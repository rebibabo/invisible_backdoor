<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8814.c" pos:tabs="8"><function pos:start="1:1" pos:end="307:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">nbd_opt_go</name><parameter_list pos:start="1:22" pos:end="3:56">(<parameter pos:start="1:23" pos:end="1:37"><decl pos:start="1:23" pos:end="1:37"><type pos:start="1:23" pos:end="1:37"><name pos:start="1:23" pos:end="1:32">QIOChannel</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:37">ioc</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:59"><decl pos:start="1:40" pos:end="1:59"><type pos:start="1:40" pos:end="1:59"><specifier pos:start="1:40" pos:end="1:44">const</specifier> <name pos:start="1:46" pos:end="1:49">char</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:59">wantname</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:41"><decl pos:start="3:23" pos:end="3:41"><type pos:start="3:23" pos:end="3:41"><name pos:start="3:23" pos:end="3:35">NBDExportInfo</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier></type><name pos:start="3:38" pos:end="3:41">info</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:55"><decl pos:start="3:44" pos:end="3:55"><type pos:start="3:44" pos:end="3:55"><name pos:start="3:44" pos:end="3:48">Error</name> <modifier pos:start="3:50" pos:end="3:50">*</modifier><modifier pos:start="3:51" pos:end="3:51">*</modifier></type><name pos:start="3:52" pos:end="3:55">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="307:1">{<block_content pos:start="7:5" pos:end="305:5">

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:17">nbd_opt_reply</name></type> <name pos:start="7:19" pos:end="7:23">reply</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:35"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:16">len</name> <init pos:start="9:18" pos:end="9:35">= <expr pos:start="9:20" pos:end="9:35"><call pos:start="9:20" pos:end="9:35"><name pos:start="9:20" pos:end="9:25">strlen</name><argument_list pos:start="9:26" pos:end="9:35">(<argument pos:start="9:27" pos:end="9:34"><expr pos:start="9:27" pos:end="9:34"><name pos:start="9:27" pos:end="9:34">wantname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint16_t</name></type> <name pos:start="11:14" pos:end="11:17">type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:13">error</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:14"><decl pos:start="15:5" pos:end="15:13"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:13">buf</name></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="23:56">/* The protocol requires that the server send NBD_INFO_EXPORT with

     * a non-zero flags (at least NBD_FLAG_HAS_FLAGS must be set); so

     * flags still 0 is a witness of a broken server. */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:20"><expr pos:start="25:5" pos:end="25:19"><name pos:start="25:5" pos:end="25:15"><name pos:start="25:5" pos:end="25:8">info</name><operator pos:start="25:9" pos:end="25:10">-&gt;</operator><name pos:start="25:11" pos:end="25:15">flags</name></name> <operator pos:start="25:17" pos:end="25:17">=</operator> <literal type="number" pos:start="25:19" pos:end="25:19">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:37"><expr pos:start="29:5" pos:end="29:36"><call pos:start="29:5" pos:end="29:36"><name pos:start="29:5" pos:end="29:26">trace_nbd_opt_go_start</name><argument_list pos:start="29:27" pos:end="29:36">(<argument pos:start="29:28" pos:end="29:35"><expr pos:start="29:28" pos:end="29:35"><name pos:start="29:28" pos:end="29:35">wantname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:62"><expr pos:start="31:5" pos:end="31:61"><name pos:start="31:5" pos:end="31:7">buf</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="31:61"><name pos:start="31:11" pos:end="31:18">g_malloc</name><argument_list pos:start="31:19" pos:end="31:61">(<argument pos:start="31:20" pos:end="31:60"><expr pos:start="31:20" pos:end="31:60"><literal type="number" pos:start="31:20" pos:end="31:22">4</literal> <operator pos:start="31:22" pos:end="31:22">+</operator> <name pos:start="31:24" pos:end="31:26">len</name> <operator pos:start="31:28" pos:end="31:28">+</operator> <literal type="number" pos:start="31:30" pos:end="31:32">2</literal> <operator pos:start="31:32" pos:end="31:32">+</operator> <literal type="number" pos:start="31:34" pos:end="31:34">2</literal> <operator pos:start="31:36" pos:end="31:36">*</operator> <name pos:start="31:38" pos:end="31:56"><name pos:start="31:38" pos:end="31:41">info</name><operator pos:start="31:42" pos:end="31:43">-&gt;</operator><name pos:start="31:44" pos:end="31:56">request_sizes</name></name> <operator pos:start="31:58" pos:end="31:58">+</operator> <literal type="number" pos:start="31:60" pos:end="31:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:23"><expr pos:start="33:5" pos:end="33:22"><call pos:start="33:5" pos:end="33:22"><name pos:start="33:5" pos:end="33:12">stl_be_p</name><argument_list pos:start="33:13" pos:end="33:22">(<argument pos:start="33:14" pos:end="33:16"><expr pos:start="33:14" pos:end="33:16"><name pos:start="33:14" pos:end="33:16">buf</name></expr></argument>, <argument pos:start="33:19" pos:end="33:21"><expr pos:start="33:19" pos:end="33:21"><name pos:start="33:19" pos:end="33:21">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:35"><expr pos:start="35:5" pos:end="35:34"><call pos:start="35:5" pos:end="35:34"><name pos:start="35:5" pos:end="35:10">memcpy</name><argument_list pos:start="35:11" pos:end="35:34">(<argument pos:start="35:12" pos:end="35:18"><expr pos:start="35:12" pos:end="35:18"><name pos:start="35:12" pos:end="35:14">buf</name> <operator pos:start="35:16" pos:end="35:16">+</operator> <literal type="number" pos:start="35:18" pos:end="35:18">4</literal></expr></argument>, <argument pos:start="35:21" pos:end="35:28"><expr pos:start="35:21" pos:end="35:28"><name pos:start="35:21" pos:end="35:28">wantname</name></expr></argument>, <argument pos:start="35:31" pos:end="35:33"><expr pos:start="35:31" pos:end="35:33"><name pos:start="35:31" pos:end="35:33">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="37:5" pos:end="37:59">/* At most one request, everything else up to server */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:49"><expr pos:start="39:5" pos:end="39:48"><call pos:start="39:5" pos:end="39:48"><name pos:start="39:5" pos:end="39:12">stw_be_p</name><argument_list pos:start="39:13" pos:end="39:48">(<argument pos:start="39:14" pos:end="39:26"><expr pos:start="39:14" pos:end="39:26"><name pos:start="39:14" pos:end="39:16">buf</name> <operator pos:start="39:18" pos:end="39:18">+</operator> <literal type="number" pos:start="39:20" pos:end="39:22">4</literal> <operator pos:start="39:22" pos:end="39:22">+</operator> <name pos:start="39:24" pos:end="39:26">len</name></expr></argument>, <argument pos:start="39:29" pos:end="39:47"><expr pos:start="39:29" pos:end="39:47"><name pos:start="39:29" pos:end="39:47"><name pos:start="39:29" pos:end="39:32">info</name><operator pos:start="39:33" pos:end="39:34">-&gt;</operator><name pos:start="39:35" pos:end="39:47">request_sizes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:28">(<expr pos:start="41:9" pos:end="41:27"><name pos:start="41:9" pos:end="41:27"><name pos:start="41:9" pos:end="41:12">info</name><operator pos:start="41:13" pos:end="41:14">-&gt;</operator><name pos:start="41:15" pos:end="41:27">request_sizes</name></name></expr>)</condition> <block pos:start="41:30" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:57">

        <expr_stmt pos:start="43:9" pos:end="43:57"><expr pos:start="43:9" pos:end="43:56"><call pos:start="43:9" pos:end="43:56"><name pos:start="43:9" pos:end="43:16">stw_be_p</name><argument_list pos:start="43:17" pos:end="43:56">(<argument pos:start="43:18" pos:end="43:34"><expr pos:start="43:18" pos:end="43:34"><name pos:start="43:18" pos:end="43:20">buf</name> <operator pos:start="43:22" pos:end="43:22">+</operator> <literal type="number" pos:start="43:24" pos:end="43:26">4</literal> <operator pos:start="43:26" pos:end="43:26">+</operator> <name pos:start="43:28" pos:end="43:30">len</name> <operator pos:start="43:32" pos:end="43:32">+</operator> <literal type="number" pos:start="43:34" pos:end="43:34">2</literal></expr></argument>, <argument pos:start="43:37" pos:end="43:55"><expr pos:start="43:37" pos:end="43:55"><name pos:start="43:37" pos:end="43:55">NBD_INFO_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="47:5" pos:end="55:5"><if pos:start="47:5" pos:end="55:5">if <condition pos:start="47:8" pos:end="51:42">(<expr pos:start="47:9" pos:end="51:41"><call pos:start="47:9" pos:end="51:37"><name pos:start="47:9" pos:end="47:31">nbd_send_option_request</name><argument_list pos:start="47:32" pos:end="51:37">(<argument pos:start="47:33" pos:end="47:35"><expr pos:start="47:33" pos:end="47:35"><name pos:start="47:33" pos:end="47:35">ioc</name></expr></argument>, <argument pos:start="47:38" pos:end="47:47"><expr pos:start="47:38" pos:end="47:47"><name pos:start="47:38" pos:end="47:47">NBD_OPT_GO</name></expr></argument>,

                                <argument pos:start="49:33" pos:end="49:69"><expr pos:start="49:33" pos:end="49:69"><literal type="number" pos:start="49:33" pos:end="49:35">4</literal> <operator pos:start="49:35" pos:end="49:35">+</operator> <name pos:start="49:37" pos:end="49:39">len</name> <operator pos:start="49:41" pos:end="49:41">+</operator> <literal type="number" pos:start="49:43" pos:end="49:45">2</literal> <operator pos:start="49:45" pos:end="49:45">+</operator> <literal type="number" pos:start="49:47" pos:end="49:47">2</literal> <operator pos:start="49:49" pos:end="49:49">*</operator> <name pos:start="49:51" pos:end="49:69"><name pos:start="49:51" pos:end="49:54">info</name><operator pos:start="49:55" pos:end="49:56">-&gt;</operator><name pos:start="49:57" pos:end="49:69">request_sizes</name></name></expr></argument>, <argument pos:start="49:72" pos:end="49:74"><expr pos:start="49:72" pos:end="49:74"><name pos:start="49:72" pos:end="49:74">buf</name></expr></argument>,

                                <argument pos:start="51:33" pos:end="51:36"><expr pos:start="51:33" pos:end="51:36"><name pos:start="51:33" pos:end="51:36">errp</name></expr></argument>)</argument_list></call> <operator pos:start="51:39" pos:end="51:39">&lt;</operator> <literal type="number" pos:start="51:41" pos:end="51:41">0</literal></expr>)</condition> <block pos:start="51:44" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:18">

        <return pos:start="53:9" pos:end="53:18">return <expr pos:start="53:16" pos:end="53:17"><operator pos:start="53:16" pos:end="53:16">-</operator><literal type="number" pos:start="53:17" pos:end="53:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <while pos:start="59:5" pos:end="305:5">while <condition pos:start="59:11" pos:end="59:13">(<expr pos:start="59:12" pos:end="59:12"><literal type="number" pos:start="59:12" pos:end="59:12">1</literal></expr>)</condition> <block pos:start="59:15" pos:end="305:5">{<block_content pos:start="61:9" pos:end="303:9">

        <if_stmt pos:start="61:9" pos:end="65:9"><if pos:start="61:9" pos:end="65:9">if <condition pos:start="61:12" pos:end="61:72">(<expr pos:start="61:13" pos:end="61:71"><call pos:start="61:13" pos:end="61:67"><name pos:start="61:13" pos:end="61:36">nbd_receive_option_reply</name><argument_list pos:start="61:37" pos:end="61:67">(<argument pos:start="61:38" pos:end="61:40"><expr pos:start="61:38" pos:end="61:40"><name pos:start="61:38" pos:end="61:40">ioc</name></expr></argument>, <argument pos:start="61:43" pos:end="61:52"><expr pos:start="61:43" pos:end="61:52"><name pos:start="61:43" pos:end="61:52">NBD_OPT_GO</name></expr></argument>, <argument pos:start="61:55" pos:end="61:60"><expr pos:start="61:55" pos:end="61:60"><operator pos:start="61:55" pos:end="61:55">&amp;</operator><name pos:start="61:56" pos:end="61:60">reply</name></expr></argument>, <argument pos:start="61:63" pos:end="61:66"><expr pos:start="61:63" pos:end="61:66"><name pos:start="61:63" pos:end="61:66">errp</name></expr></argument>)</argument_list></call> <operator pos:start="61:69" pos:end="61:69">&lt;</operator> <literal type="number" pos:start="61:71" pos:end="61:71">0</literal></expr>)</condition> <block pos:start="61:74" pos:end="65:9">{<block_content pos:start="63:13" pos:end="63:22">

            <return pos:start="63:13" pos:end="63:22">return <expr pos:start="63:20" pos:end="63:21"><operator pos:start="63:20" pos:end="63:20">-</operator><literal type="number" pos:start="63:21" pos:end="63:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:56"><expr pos:start="67:9" pos:end="67:55"><name pos:start="67:9" pos:end="67:13">error</name> <operator pos:start="67:15" pos:end="67:15">=</operator> <call pos:start="67:17" pos:end="67:55"><name pos:start="67:17" pos:end="67:36">nbd_handle_reply_err</name><argument_list pos:start="67:37" pos:end="67:55">(<argument pos:start="67:38" pos:end="67:40"><expr pos:start="67:38" pos:end="67:40"><name pos:start="67:38" pos:end="67:40">ioc</name></expr></argument>, <argument pos:start="67:43" pos:end="67:48"><expr pos:start="67:43" pos:end="67:48"><operator pos:start="67:43" pos:end="67:43">&amp;</operator><name pos:start="67:44" pos:end="67:48">reply</name></expr></argument>, <argument pos:start="67:51" pos:end="67:54"><expr pos:start="67:51" pos:end="67:54"><name pos:start="67:51" pos:end="67:54">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="69:9" pos:end="73:9"><if pos:start="69:9" pos:end="73:9">if <condition pos:start="69:12" pos:end="69:23">(<expr pos:start="69:13" pos:end="69:22"><name pos:start="69:13" pos:end="69:17">error</name> <operator pos:start="69:19" pos:end="69:20">&lt;=</operator> <literal type="number" pos:start="69:22" pos:end="69:22">0</literal></expr>)</condition> <block pos:start="69:25" pos:end="73:9">{<block_content pos:start="71:13" pos:end="71:25">

            <return pos:start="71:13" pos:end="71:25">return <expr pos:start="71:20" pos:end="71:24"><name pos:start="71:20" pos:end="71:24">error</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:27"><expr pos:start="75:9" pos:end="75:26"><name pos:start="75:9" pos:end="75:11">len</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <name pos:start="75:15" pos:end="75:26"><name pos:start="75:15" pos:end="75:19">reply</name><operator pos:start="75:20" pos:end="75:20">.</operator><name pos:start="75:21" pos:end="75:26">length</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="79:9" pos:end="109:9"><if pos:start="79:9" pos:end="109:9">if <condition pos:start="79:12" pos:end="79:38">(<expr pos:start="79:13" pos:end="79:37"><name pos:start="79:13" pos:end="79:22"><name pos:start="79:13" pos:end="79:17">reply</name><operator pos:start="79:18" pos:end="79:18">.</operator><name pos:start="79:19" pos:end="79:22">type</name></name> <operator pos:start="79:24" pos:end="79:25">==</operator> <name pos:start="79:27" pos:end="79:37">NBD_REP_ACK</name></expr>)</condition> <block pos:start="79:40" pos:end="109:9">{<block_content pos:start="85:13" pos:end="107:21">

            <comment type="block" pos:start="81:13" pos:end="83:52">/* Server is done sending info and moved into transmission

               phase, but make sure it sent flags */</comment>

            <if_stmt pos:start="85:13" pos:end="93:13"><if pos:start="85:13" pos:end="93:13">if <condition pos:start="85:16" pos:end="85:20">(<expr pos:start="85:17" pos:end="85:19"><name pos:start="85:17" pos:end="85:19">len</name></expr>)</condition> <block pos:start="85:22" pos:end="93:13">{<block_content pos:start="87:17" pos:end="91:26">

                <expr_stmt pos:start="87:17" pos:end="87:68"><expr pos:start="87:17" pos:end="87:67"><call pos:start="87:17" pos:end="87:67"><name pos:start="87:17" pos:end="87:26">error_setg</name><argument_list pos:start="87:27" pos:end="87:67">(<argument pos:start="87:28" pos:end="87:31"><expr pos:start="87:28" pos:end="87:31"><name pos:start="87:28" pos:end="87:31">errp</name></expr></argument>, <argument pos:start="87:34" pos:end="87:66"><expr pos:start="87:34" pos:end="87:66"><literal type="string" pos:start="87:34" pos:end="87:66">"server sent invalid NBD_REP_ACK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="89:17" pos:end="89:40"><expr pos:start="89:17" pos:end="89:39"><call pos:start="89:17" pos:end="89:39"><name pos:start="89:17" pos:end="89:34">nbd_send_opt_abort</name><argument_list pos:start="89:35" pos:end="89:39">(<argument pos:start="89:36" pos:end="89:38"><expr pos:start="89:36" pos:end="89:38"><name pos:start="89:36" pos:end="89:38">ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="91:17" pos:end="91:26">return <expr pos:start="91:24" pos:end="91:25"><operator pos:start="91:24" pos:end="91:24">-</operator><literal type="number" pos:start="91:25" pos:end="91:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="95:13" pos:end="103:13"><if pos:start="95:13" pos:end="103:13">if <condition pos:start="95:16" pos:end="95:29">(<expr pos:start="95:17" pos:end="95:28"><operator pos:start="95:17" pos:end="95:17">!</operator><name pos:start="95:18" pos:end="95:28"><name pos:start="95:18" pos:end="95:21">info</name><operator pos:start="95:22" pos:end="95:23">-&gt;</operator><name pos:start="95:24" pos:end="95:28">flags</name></name></expr>)</condition> <block pos:start="95:31" pos:end="103:13">{<block_content pos:start="97:17" pos:end="101:26">

                <expr_stmt pos:start="97:17" pos:end="97:74"><expr pos:start="97:17" pos:end="97:73"><call pos:start="97:17" pos:end="97:73"><name pos:start="97:17" pos:end="97:26">error_setg</name><argument_list pos:start="97:27" pos:end="97:73">(<argument pos:start="97:28" pos:end="97:31"><expr pos:start="97:28" pos:end="97:31"><name pos:start="97:28" pos:end="97:31">errp</name></expr></argument>, <argument pos:start="97:34" pos:end="97:72"><expr pos:start="97:34" pos:end="97:72"><literal type="string" pos:start="97:34" pos:end="97:72">"broken server omitted NBD_INFO_EXPORT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="99:17" pos:end="99:40"><expr pos:start="99:17" pos:end="99:39"><call pos:start="99:17" pos:end="99:39"><name pos:start="99:17" pos:end="99:34">nbd_send_opt_abort</name><argument_list pos:start="99:35" pos:end="99:39">(<argument pos:start="99:36" pos:end="99:38"><expr pos:start="99:36" pos:end="99:38"><name pos:start="99:36" pos:end="99:38">ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="101:17" pos:end="101:26">return <expr pos:start="101:24" pos:end="101:25"><operator pos:start="101:24" pos:end="101:24">-</operator><literal type="number" pos:start="101:25" pos:end="101:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:39"><expr pos:start="105:13" pos:end="105:38"><call pos:start="105:13" pos:end="105:38"><name pos:start="105:13" pos:end="105:36">trace_nbd_opt_go_success</name><argument_list pos:start="105:37" pos:end="105:38">()</argument_list></call></expr>;</expr_stmt>

            <return pos:start="107:13" pos:end="107:21">return <expr pos:start="107:20" pos:end="107:20"><literal type="number" pos:start="107:20" pos:end="107:20">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="111:9" pos:end="123:9"><if pos:start="111:9" pos:end="123:9">if <condition pos:start="111:12" pos:end="111:39">(<expr pos:start="111:13" pos:end="111:38"><name pos:start="111:13" pos:end="111:22"><name pos:start="111:13" pos:end="111:17">reply</name><operator pos:start="111:18" pos:end="111:18">.</operator><name pos:start="111:19" pos:end="111:22">type</name></name> <operator pos:start="111:24" pos:end="111:25">!=</operator> <name pos:start="111:27" pos:end="111:38">NBD_REP_INFO</name></expr>)</condition> <block pos:start="111:41" pos:end="123:9">{<block_content pos:start="113:13" pos:end="121:22">

            <expr_stmt pos:start="113:13" pos:end="117:77"><expr pos:start="113:13" pos:end="117:76"><call pos:start="113:13" pos:end="117:76"><name pos:start="113:13" pos:end="113:22">error_setg</name><argument_list pos:start="113:23" pos:end="117:76">(<argument pos:start="113:24" pos:end="113:27"><expr pos:start="113:24" pos:end="113:27"><name pos:start="113:24" pos:end="113:27">errp</name></expr></argument>, <argument pos:start="113:30" pos:end="115:43"><expr pos:start="113:30" pos:end="115:43"><literal type="string" pos:start="113:30" pos:end="113:54">"unexpected reply type %"</literal> <name pos:start="113:56" pos:end="113:61">PRIx32</name>

                       <literal type="string" pos:start="115:24" pos:end="115:43">" (%s), expected %x"</literal></expr></argument>,

                       <argument pos:start="117:24" pos:end="117:33"><expr pos:start="117:24" pos:end="117:33"><name pos:start="117:24" pos:end="117:33"><name pos:start="117:24" pos:end="117:28">reply</name><operator pos:start="117:29" pos:end="117:29">.</operator><name pos:start="117:30" pos:end="117:33">type</name></name></expr></argument>, <argument pos:start="117:36" pos:end="117:61"><expr pos:start="117:36" pos:end="117:61"><call pos:start="117:36" pos:end="117:61"><name pos:start="117:36" pos:end="117:49">nbd_rep_lookup</name><argument_list pos:start="117:50" pos:end="117:61">(<argument pos:start="117:51" pos:end="117:60"><expr pos:start="117:51" pos:end="117:60"><name pos:start="117:51" pos:end="117:60"><name pos:start="117:51" pos:end="117:55">reply</name><operator pos:start="117:56" pos:end="117:56">.</operator><name pos:start="117:57" pos:end="117:60">type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="117:64" pos:end="117:75"><expr pos:start="117:64" pos:end="117:75"><name pos:start="117:64" pos:end="117:75">NBD_REP_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:36"><expr pos:start="119:13" pos:end="119:35"><call pos:start="119:13" pos:end="119:35"><name pos:start="119:13" pos:end="119:30">nbd_send_opt_abort</name><argument_list pos:start="119:31" pos:end="119:35">(<argument pos:start="119:32" pos:end="119:34"><expr pos:start="119:32" pos:end="119:34"><name pos:start="119:32" pos:end="119:34">ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="121:13" pos:end="121:22">return <expr pos:start="121:20" pos:end="121:21"><operator pos:start="121:20" pos:end="121:20">-</operator><literal type="number" pos:start="121:21" pos:end="121:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="125:9" pos:end="135:9"><if pos:start="125:9" pos:end="135:9">if <condition pos:start="125:12" pos:end="125:31">(<expr pos:start="125:13" pos:end="125:30"><name pos:start="125:13" pos:end="125:15">len</name> <operator pos:start="125:17" pos:end="125:17">&lt;</operator> <sizeof pos:start="125:19" pos:end="125:30">sizeof<argument_list pos:start="125:25" pos:end="125:30">(<argument pos:start="125:26" pos:end="125:29"><expr pos:start="125:26" pos:end="125:29"><name pos:start="125:26" pos:end="125:29">type</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="125:33" pos:end="135:9">{<block_content pos:start="127:13" pos:end="133:22">

            <expr_stmt pos:start="127:13" pos:end="129:28"><expr pos:start="127:13" pos:end="129:27"><call pos:start="127:13" pos:end="129:27"><name pos:start="127:13" pos:end="127:22">error_setg</name><argument_list pos:start="127:23" pos:end="129:27">(<argument pos:start="127:24" pos:end="127:27"><expr pos:start="127:24" pos:end="127:27"><name pos:start="127:24" pos:end="127:27">errp</name></expr></argument>, <argument pos:start="127:30" pos:end="127:75"><expr pos:start="127:30" pos:end="127:75"><literal type="string" pos:start="127:30" pos:end="127:52">"NBD_REP_INFO length %"</literal> <name pos:start="127:54" pos:end="127:59">PRIu32</name> <literal type="string" pos:start="127:61" pos:end="127:75">" is too short"</literal></expr></argument>,

                       <argument pos:start="129:24" pos:end="129:26"><expr pos:start="129:24" pos:end="129:26"><name pos:start="129:24" pos:end="129:26">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:36"><expr pos:start="131:13" pos:end="131:35"><call pos:start="131:13" pos:end="131:35"><name pos:start="131:13" pos:end="131:30">nbd_send_opt_abort</name><argument_list pos:start="131:31" pos:end="131:35">(<argument pos:start="131:32" pos:end="131:34"><expr pos:start="131:32" pos:end="131:34"><name pos:start="131:32" pos:end="131:34">ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="133:13" pos:end="133:22">return <expr pos:start="133:20" pos:end="133:21"><operator pos:start="133:20" pos:end="133:20">-</operator><literal type="number" pos:start="133:21" pos:end="133:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="137:9" pos:end="145:9"><if pos:start="137:9" pos:end="145:9">if <condition pos:start="137:12" pos:end="137:57">(<expr pos:start="137:13" pos:end="137:56"><call pos:start="137:13" pos:end="137:52"><name pos:start="137:13" pos:end="137:20">nbd_read</name><argument_list pos:start="137:21" pos:end="137:52">(<argument pos:start="137:22" pos:end="137:24"><expr pos:start="137:22" pos:end="137:24"><name pos:start="137:22" pos:end="137:24">ioc</name></expr></argument>, <argument pos:start="137:27" pos:end="137:31"><expr pos:start="137:27" pos:end="137:31"><operator pos:start="137:27" pos:end="137:27">&amp;</operator><name pos:start="137:28" pos:end="137:31">type</name></expr></argument>, <argument pos:start="137:34" pos:end="137:45"><expr pos:start="137:34" pos:end="137:45"><sizeof pos:start="137:34" pos:end="137:45">sizeof<argument_list pos:start="137:40" pos:end="137:45">(<argument pos:start="137:41" pos:end="137:44"><expr pos:start="137:41" pos:end="137:44"><name pos:start="137:41" pos:end="137:44">type</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="137:48" pos:end="137:51"><expr pos:start="137:48" pos:end="137:51"><name pos:start="137:48" pos:end="137:51">errp</name></expr></argument>)</argument_list></call> <operator pos:start="137:54" pos:end="137:54">&lt;</operator> <literal type="number" pos:start="137:56" pos:end="137:56">0</literal></expr>)</condition> <block pos:start="137:59" pos:end="145:9">{<block_content pos:start="139:13" pos:end="143:22">

            <expr_stmt pos:start="139:13" pos:end="139:60"><expr pos:start="139:13" pos:end="139:59"><call pos:start="139:13" pos:end="139:59"><name pos:start="139:13" pos:end="139:25">error_prepend</name><argument_list pos:start="139:26" pos:end="139:59">(<argument pos:start="139:27" pos:end="139:30"><expr pos:start="139:27" pos:end="139:30"><name pos:start="139:27" pos:end="139:30">errp</name></expr></argument>, <argument pos:start="139:33" pos:end="139:58"><expr pos:start="139:33" pos:end="139:58"><literal type="string" pos:start="139:33" pos:end="139:58">"failed to read info type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:36"><expr pos:start="141:13" pos:end="141:35"><call pos:start="141:13" pos:end="141:35"><name pos:start="141:13" pos:end="141:30">nbd_send_opt_abort</name><argument_list pos:start="141:31" pos:end="141:35">(<argument pos:start="141:32" pos:end="141:34"><expr pos:start="141:32" pos:end="141:34"><name pos:start="141:32" pos:end="141:34">ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="143:13" pos:end="143:22">return <expr pos:start="143:20" pos:end="143:21"><operator pos:start="143:20" pos:end="143:20">-</operator><literal type="number" pos:start="143:21" pos:end="143:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:28"><expr pos:start="147:9" pos:end="147:27"><name pos:start="147:9" pos:end="147:11">len</name> <operator pos:start="147:13" pos:end="147:14">-=</operator> <sizeof pos:start="147:16" pos:end="147:27">sizeof<argument_list pos:start="147:22" pos:end="147:27">(<argument pos:start="147:23" pos:end="147:26"><expr pos:start="147:23" pos:end="147:26"><name pos:start="147:23" pos:end="147:26">type</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:28"><expr pos:start="149:9" pos:end="149:27"><call pos:start="149:9" pos:end="149:27"><name pos:start="149:9" pos:end="149:20">be16_to_cpus</name><argument_list pos:start="149:21" pos:end="149:27">(<argument pos:start="149:22" pos:end="149:26"><expr pos:start="149:22" pos:end="149:26"><operator pos:start="149:22" pos:end="149:22">&amp;</operator><name pos:start="149:23" pos:end="149:26">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="151:9" pos:end="303:9">switch <condition pos:start="151:16" pos:end="151:21">(<expr pos:start="151:17" pos:end="151:20"><name pos:start="151:17" pos:end="151:20">type</name></expr>)</condition> <block pos:start="151:23" pos:end="303:9">{<block_content pos:start="153:9" pos:end="301:18">

        <case pos:start="153:9" pos:end="153:29">case <expr pos:start="153:14" pos:end="153:28"><name pos:start="153:14" pos:end="153:28">NBD_INFO_EXPORT</name></expr>:</case>

            <if_stmt pos:start="155:13" pos:end="165:13"><if pos:start="155:13" pos:end="165:13">if <condition pos:start="155:16" pos:end="155:64">(<expr pos:start="155:17" pos:end="155:63"><name pos:start="155:17" pos:end="155:19">len</name> <operator pos:start="155:21" pos:end="155:22">!=</operator> <sizeof pos:start="155:24" pos:end="155:41">sizeof<argument_list pos:start="155:30" pos:end="155:41">(<argument pos:start="155:31" pos:end="155:40"><expr pos:start="155:31" pos:end="155:40"><name pos:start="155:31" pos:end="155:40"><name pos:start="155:31" pos:end="155:34">info</name><operator pos:start="155:35" pos:end="155:36">-&gt;</operator><name pos:start="155:37" pos:end="155:40">size</name></name></expr></argument>)</argument_list></sizeof> <operator pos:start="155:43" pos:end="155:43">+</operator> <sizeof pos:start="155:45" pos:end="155:63">sizeof<argument_list pos:start="155:51" pos:end="155:63">(<argument pos:start="155:52" pos:end="155:62"><expr pos:start="155:52" pos:end="155:62"><name pos:start="155:52" pos:end="155:62"><name pos:start="155:52" pos:end="155:55">info</name><operator pos:start="155:56" pos:end="155:57">-&gt;</operator><name pos:start="155:58" pos:end="155:62">flags</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="155:66" pos:end="165:13">{<block_content pos:start="157:17" pos:end="163:26">

                <expr_stmt pos:start="157:17" pos:end="159:55"><expr pos:start="157:17" pos:end="159:54"><call pos:start="157:17" pos:end="159:54"><name pos:start="157:17" pos:end="157:26">error_setg</name><argument_list pos:start="157:27" pos:end="159:54">(<argument pos:start="157:28" pos:end="157:31"><expr pos:start="157:28" pos:end="157:31"><name pos:start="157:28" pos:end="157:31">errp</name></expr></argument>, <argument pos:start="157:34" pos:end="159:48"><expr pos:start="157:34" pos:end="159:48"><literal type="string" pos:start="157:34" pos:end="157:62">"remaining export info len %"</literal> <name pos:start="157:64" pos:end="157:69">PRIu32</name>

                           <literal type="string" pos:start="159:28" pos:end="159:48">" is unexpected size"</literal></expr></argument>, <argument pos:start="159:51" pos:end="159:53"><expr pos:start="159:51" pos:end="159:53"><name pos:start="159:51" pos:end="159:53">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="161:17" pos:end="161:40"><expr pos:start="161:17" pos:end="161:39"><call pos:start="161:17" pos:end="161:39"><name pos:start="161:17" pos:end="161:34">nbd_send_opt_abort</name><argument_list pos:start="161:35" pos:end="161:39">(<argument pos:start="161:36" pos:end="161:38"><expr pos:start="161:36" pos:end="161:38"><name pos:start="161:36" pos:end="161:38">ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="163:17" pos:end="163:26">return <expr pos:start="163:24" pos:end="163:25"><operator pos:start="163:24" pos:end="163:24">-</operator><literal type="number" pos:start="163:25" pos:end="163:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="167:13" pos:end="175:13"><if pos:start="167:13" pos:end="175:13">if <condition pos:start="167:16" pos:end="167:73">(<expr pos:start="167:17" pos:end="167:72"><call pos:start="167:17" pos:end="167:68"><name pos:start="167:17" pos:end="167:24">nbd_read</name><argument_list pos:start="167:25" pos:end="167:68">(<argument pos:start="167:26" pos:end="167:28"><expr pos:start="167:26" pos:end="167:28"><name pos:start="167:26" pos:end="167:28">ioc</name></expr></argument>, <argument pos:start="167:31" pos:end="167:41"><expr pos:start="167:31" pos:end="167:41"><operator pos:start="167:31" pos:end="167:31">&amp;</operator><name pos:start="167:32" pos:end="167:41"><name pos:start="167:32" pos:end="167:35">info</name><operator pos:start="167:36" pos:end="167:37">-&gt;</operator><name pos:start="167:38" pos:end="167:41">size</name></name></expr></argument>, <argument pos:start="167:44" pos:end="167:61"><expr pos:start="167:44" pos:end="167:61"><sizeof pos:start="167:44" pos:end="167:61">sizeof<argument_list pos:start="167:50" pos:end="167:61">(<argument pos:start="167:51" pos:end="167:60"><expr pos:start="167:51" pos:end="167:60"><name pos:start="167:51" pos:end="167:60"><name pos:start="167:51" pos:end="167:54">info</name><operator pos:start="167:55" pos:end="167:56">-&gt;</operator><name pos:start="167:57" pos:end="167:60">size</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="167:64" pos:end="167:67"><expr pos:start="167:64" pos:end="167:67"><name pos:start="167:64" pos:end="167:67">errp</name></expr></argument>)</argument_list></call> <operator pos:start="167:70" pos:end="167:70">&lt;</operator> <literal type="number" pos:start="167:72" pos:end="167:72">0</literal></expr>)</condition> <block pos:start="167:75" pos:end="175:13">{<block_content pos:start="169:17" pos:end="173:26">

                <expr_stmt pos:start="169:17" pos:end="169:64"><expr pos:start="169:17" pos:end="169:63"><call pos:start="169:17" pos:end="169:63"><name pos:start="169:17" pos:end="169:29">error_prepend</name><argument_list pos:start="169:30" pos:end="169:63">(<argument pos:start="169:31" pos:end="169:34"><expr pos:start="169:31" pos:end="169:34"><name pos:start="169:31" pos:end="169:34">errp</name></expr></argument>, <argument pos:start="169:37" pos:end="169:62"><expr pos:start="169:37" pos:end="169:62"><literal type="string" pos:start="169:37" pos:end="169:62">"failed to read info size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="171:17" pos:end="171:40"><expr pos:start="171:17" pos:end="171:39"><call pos:start="171:17" pos:end="171:39"><name pos:start="171:17" pos:end="171:34">nbd_send_opt_abort</name><argument_list pos:start="171:35" pos:end="171:39">(<argument pos:start="171:36" pos:end="171:38"><expr pos:start="171:36" pos:end="171:38"><name pos:start="171:36" pos:end="171:38">ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="173:17" pos:end="173:26">return <expr pos:start="173:24" pos:end="173:25"><operator pos:start="173:24" pos:end="173:24">-</operator><literal type="number" pos:start="173:25" pos:end="173:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="177:13" pos:end="177:38"><expr pos:start="177:13" pos:end="177:37"><call pos:start="177:13" pos:end="177:37"><name pos:start="177:13" pos:end="177:24">be64_to_cpus</name><argument_list pos:start="177:25" pos:end="177:37">(<argument pos:start="177:26" pos:end="177:36"><expr pos:start="177:26" pos:end="177:36"><operator pos:start="177:26" pos:end="177:26">&amp;</operator><name pos:start="177:27" pos:end="177:36"><name pos:start="177:27" pos:end="177:30">info</name><operator pos:start="177:31" pos:end="177:32">-&gt;</operator><name pos:start="177:33" pos:end="177:36">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="179:13" pos:end="187:13"><if pos:start="179:13" pos:end="187:13">if <condition pos:start="179:16" pos:end="179:75">(<expr pos:start="179:17" pos:end="179:74"><call pos:start="179:17" pos:end="179:70"><name pos:start="179:17" pos:end="179:24">nbd_read</name><argument_list pos:start="179:25" pos:end="179:70">(<argument pos:start="179:26" pos:end="179:28"><expr pos:start="179:26" pos:end="179:28"><name pos:start="179:26" pos:end="179:28">ioc</name></expr></argument>, <argument pos:start="179:31" pos:end="179:42"><expr pos:start="179:31" pos:end="179:42"><operator pos:start="179:31" pos:end="179:31">&amp;</operator><name pos:start="179:32" pos:end="179:42"><name pos:start="179:32" pos:end="179:35">info</name><operator pos:start="179:36" pos:end="179:37">-&gt;</operator><name pos:start="179:38" pos:end="179:42">flags</name></name></expr></argument>, <argument pos:start="179:45" pos:end="179:63"><expr pos:start="179:45" pos:end="179:63"><sizeof pos:start="179:45" pos:end="179:63">sizeof<argument_list pos:start="179:51" pos:end="179:63">(<argument pos:start="179:52" pos:end="179:62"><expr pos:start="179:52" pos:end="179:62"><name pos:start="179:52" pos:end="179:62"><name pos:start="179:52" pos:end="179:55">info</name><operator pos:start="179:56" pos:end="179:57">-&gt;</operator><name pos:start="179:58" pos:end="179:62">flags</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="179:66" pos:end="179:69"><expr pos:start="179:66" pos:end="179:69"><name pos:start="179:66" pos:end="179:69">errp</name></expr></argument>)</argument_list></call> <operator pos:start="179:72" pos:end="179:72">&lt;</operator> <literal type="number" pos:start="179:74" pos:end="179:74">0</literal></expr>)</condition> <block pos:start="179:77" pos:end="187:13">{<block_content pos:start="181:17" pos:end="185:26">

                <expr_stmt pos:start="181:17" pos:end="181:65"><expr pos:start="181:17" pos:end="181:64"><call pos:start="181:17" pos:end="181:64"><name pos:start="181:17" pos:end="181:29">error_prepend</name><argument_list pos:start="181:30" pos:end="181:64">(<argument pos:start="181:31" pos:end="181:34"><expr pos:start="181:31" pos:end="181:34"><name pos:start="181:31" pos:end="181:34">errp</name></expr></argument>, <argument pos:start="181:37" pos:end="181:63"><expr pos:start="181:37" pos:end="181:63"><literal type="string" pos:start="181:37" pos:end="181:63">"failed to read info flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="183:17" pos:end="183:40"><expr pos:start="183:17" pos:end="183:39"><call pos:start="183:17" pos:end="183:39"><name pos:start="183:17" pos:end="183:34">nbd_send_opt_abort</name><argument_list pos:start="183:35" pos:end="183:39">(<argument pos:start="183:36" pos:end="183:38"><expr pos:start="183:36" pos:end="183:38"><name pos:start="183:36" pos:end="183:38">ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="185:17" pos:end="185:26">return <expr pos:start="185:24" pos:end="185:25"><operator pos:start="185:24" pos:end="185:24">-</operator><literal type="number" pos:start="185:25" pos:end="185:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="189:13" pos:end="189:39"><expr pos:start="189:13" pos:end="189:38"><call pos:start="189:13" pos:end="189:38"><name pos:start="189:13" pos:end="189:24">be16_to_cpus</name><argument_list pos:start="189:25" pos:end="189:38">(<argument pos:start="189:26" pos:end="189:37"><expr pos:start="189:26" pos:end="189:37"><operator pos:start="189:26" pos:end="189:26">&amp;</operator><name pos:start="189:27" pos:end="189:37"><name pos:start="189:27" pos:end="189:30">info</name><operator pos:start="189:31" pos:end="189:32">-&gt;</operator><name pos:start="189:33" pos:end="189:37">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="191:13" pos:end="191:76"><expr pos:start="191:13" pos:end="191:75"><call pos:start="191:13" pos:end="191:75"><name pos:start="191:13" pos:end="191:50">trace_nbd_receive_negotiate_size_flags</name><argument_list pos:start="191:51" pos:end="191:75">(<argument pos:start="191:52" pos:end="191:61"><expr pos:start="191:52" pos:end="191:61"><name pos:start="191:52" pos:end="191:61"><name pos:start="191:52" pos:end="191:55">info</name><operator pos:start="191:56" pos:end="191:57">-&gt;</operator><name pos:start="191:58" pos:end="191:61">size</name></name></expr></argument>, <argument pos:start="191:64" pos:end="191:74"><expr pos:start="191:64" pos:end="191:74"><name pos:start="191:64" pos:end="191:74"><name pos:start="191:64" pos:end="191:67">info</name><operator pos:start="191:68" pos:end="191:69">-&gt;</operator><name pos:start="191:70" pos:end="191:74">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="193:13" pos:end="193:18">break;</break>



        <case pos:start="197:9" pos:end="197:33">case <expr pos:start="197:14" pos:end="197:32"><name pos:start="197:14" pos:end="197:32">NBD_INFO_BLOCK_SIZE</name></expr>:</case>

            <if_stmt pos:start="199:13" pos:end="209:13"><if pos:start="199:13" pos:end="209:13">if <condition pos:start="199:16" pos:end="199:51">(<expr pos:start="199:17" pos:end="199:50"><name pos:start="199:17" pos:end="199:19">len</name> <operator pos:start="199:21" pos:end="199:22">!=</operator> <sizeof pos:start="199:24" pos:end="199:46">sizeof<argument_list pos:start="199:30" pos:end="199:46">(<argument pos:start="199:31" pos:end="199:45"><expr pos:start="199:31" pos:end="199:45"><name pos:start="199:31" pos:end="199:45"><name pos:start="199:31" pos:end="199:34">info</name><operator pos:start="199:35" pos:end="199:36">-&gt;</operator><name pos:start="199:37" pos:end="199:45">min_block</name></name></expr></argument>)</argument_list></sizeof> <operator pos:start="199:48" pos:end="199:48">*</operator> <literal type="number" pos:start="199:50" pos:end="199:50">3</literal></expr>)</condition> <block pos:start="199:53" pos:end="209:13">{<block_content pos:start="201:17" pos:end="207:26">

                <expr_stmt pos:start="201:17" pos:end="203:55"><expr pos:start="201:17" pos:end="203:54"><call pos:start="201:17" pos:end="203:54"><name pos:start="201:17" pos:end="201:26">error_setg</name><argument_list pos:start="201:27" pos:end="203:54">(<argument pos:start="201:28" pos:end="201:31"><expr pos:start="201:28" pos:end="201:31"><name pos:start="201:28" pos:end="201:31">errp</name></expr></argument>, <argument pos:start="201:34" pos:end="203:48"><expr pos:start="201:34" pos:end="203:48"><literal type="string" pos:start="201:34" pos:end="201:62">"remaining export info len %"</literal> <name pos:start="201:64" pos:end="201:69">PRIu32</name>

                           <literal type="string" pos:start="203:28" pos:end="203:48">" is unexpected size"</literal></expr></argument>, <argument pos:start="203:51" pos:end="203:53"><expr pos:start="203:51" pos:end="203:53"><name pos:start="203:51" pos:end="203:53">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="205:17" pos:end="205:40"><expr pos:start="205:17" pos:end="205:39"><call pos:start="205:17" pos:end="205:39"><name pos:start="205:17" pos:end="205:34">nbd_send_opt_abort</name><argument_list pos:start="205:35" pos:end="205:39">(<argument pos:start="205:36" pos:end="205:38"><expr pos:start="205:36" pos:end="205:38"><name pos:start="205:36" pos:end="205:38">ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="207:17" pos:end="207:26">return <expr pos:start="207:24" pos:end="207:25"><operator pos:start="207:24" pos:end="207:24">-</operator><literal type="number" pos:start="207:25" pos:end="207:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="211:13" pos:end="221:13"><if pos:start="211:13" pos:end="221:13">if <condition pos:start="211:16" pos:end="213:35">(<expr pos:start="211:17" pos:end="213:34"><call pos:start="211:17" pos:end="213:30"><name pos:start="211:17" pos:end="211:24">nbd_read</name><argument_list pos:start="211:25" pos:end="213:30">(<argument pos:start="211:26" pos:end="211:28"><expr pos:start="211:26" pos:end="211:28"><name pos:start="211:26" pos:end="211:28">ioc</name></expr></argument>, <argument pos:start="211:31" pos:end="211:46"><expr pos:start="211:31" pos:end="211:46"><operator pos:start="211:31" pos:end="211:31">&amp;</operator><name pos:start="211:32" pos:end="211:46"><name pos:start="211:32" pos:end="211:35">info</name><operator pos:start="211:36" pos:end="211:37">-&gt;</operator><name pos:start="211:38" pos:end="211:46">min_block</name></name></expr></argument>, <argument pos:start="211:49" pos:end="211:71"><expr pos:start="211:49" pos:end="211:71"><sizeof pos:start="211:49" pos:end="211:71">sizeof<argument_list pos:start="211:55" pos:end="211:71">(<argument pos:start="211:56" pos:end="211:70"><expr pos:start="211:56" pos:end="211:70"><name pos:start="211:56" pos:end="211:70"><name pos:start="211:56" pos:end="211:59">info</name><operator pos:start="211:60" pos:end="211:61">-&gt;</operator><name pos:start="211:62" pos:end="211:70">min_block</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

                         <argument pos:start="213:26" pos:end="213:29"><expr pos:start="213:26" pos:end="213:29"><name pos:start="213:26" pos:end="213:29">errp</name></expr></argument>)</argument_list></call> <operator pos:start="213:32" pos:end="213:32">&lt;</operator> <literal type="number" pos:start="213:34" pos:end="213:34">0</literal></expr>)</condition> <block pos:start="213:37" pos:end="221:13">{<block_content pos:start="215:17" pos:end="219:26">

                <expr_stmt pos:start="215:17" pos:end="215:78"><expr pos:start="215:17" pos:end="215:77"><call pos:start="215:17" pos:end="215:77"><name pos:start="215:17" pos:end="215:29">error_prepend</name><argument_list pos:start="215:30" pos:end="215:77">(<argument pos:start="215:31" pos:end="215:34"><expr pos:start="215:31" pos:end="215:34"><name pos:start="215:31" pos:end="215:34">errp</name></expr></argument>, <argument pos:start="215:37" pos:end="215:76"><expr pos:start="215:37" pos:end="215:76"><literal type="string" pos:start="215:37" pos:end="215:76">"failed to read info minimum block size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="217:17" pos:end="217:40"><expr pos:start="217:17" pos:end="217:39"><call pos:start="217:17" pos:end="217:39"><name pos:start="217:17" pos:end="217:34">nbd_send_opt_abort</name><argument_list pos:start="217:35" pos:end="217:39">(<argument pos:start="217:36" pos:end="217:38"><expr pos:start="217:36" pos:end="217:38"><name pos:start="217:36" pos:end="217:38">ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="219:17" pos:end="219:26">return <expr pos:start="219:24" pos:end="219:25"><operator pos:start="219:24" pos:end="219:24">-</operator><literal type="number" pos:start="219:25" pos:end="219:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="223:13" pos:end="223:43"><expr pos:start="223:13" pos:end="223:42"><call pos:start="223:13" pos:end="223:42"><name pos:start="223:13" pos:end="223:24">be32_to_cpus</name><argument_list pos:start="223:25" pos:end="223:42">(<argument pos:start="223:26" pos:end="223:41"><expr pos:start="223:26" pos:end="223:41"><operator pos:start="223:26" pos:end="223:26">&amp;</operator><name pos:start="223:27" pos:end="223:41"><name pos:start="223:27" pos:end="223:30">info</name><operator pos:start="223:31" pos:end="223:32">-&gt;</operator><name pos:start="223:33" pos:end="223:41">min_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="225:13" pos:end="235:13"><if pos:start="225:13" pos:end="235:13">if <condition pos:start="225:16" pos:end="225:48">(<expr pos:start="225:17" pos:end="225:47"><operator pos:start="225:17" pos:end="225:17">!</operator><call pos:start="225:18" pos:end="225:47"><name pos:start="225:18" pos:end="225:30">is_power_of_2</name><argument_list pos:start="225:31" pos:end="225:47">(<argument pos:start="225:32" pos:end="225:46"><expr pos:start="225:32" pos:end="225:46"><name pos:start="225:32" pos:end="225:46"><name pos:start="225:32" pos:end="225:35">info</name><operator pos:start="225:36" pos:end="225:37">-&gt;</operator><name pos:start="225:38" pos:end="225:46">min_block</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="225:50" pos:end="235:13">{<block_content pos:start="227:17" pos:end="233:26">

                <expr_stmt pos:start="227:17" pos:end="229:69"><expr pos:start="227:17" pos:end="229:68"><call pos:start="227:17" pos:end="229:68"><name pos:start="227:17" pos:end="227:26">error_setg</name><argument_list pos:start="227:27" pos:end="229:68">(<argument pos:start="227:28" pos:end="227:31"><expr pos:start="227:28" pos:end="227:31"><name pos:start="227:28" pos:end="227:31">errp</name></expr></argument>, <argument pos:start="227:34" pos:end="229:50"><expr pos:start="227:34" pos:end="229:50"><literal type="string" pos:start="227:34" pos:end="227:62">"server minimum block size %"</literal> <name pos:start="227:64" pos:end="227:69">PRId32</name>

                           <literal type="string" pos:start="229:28" pos:end="229:50">"is not a power of two"</literal></expr></argument>, <argument pos:start="229:53" pos:end="229:67"><expr pos:start="229:53" pos:end="229:67"><name pos:start="229:53" pos:end="229:67"><name pos:start="229:53" pos:end="229:56">info</name><operator pos:start="229:57" pos:end="229:58">-&gt;</operator><name pos:start="229:59" pos:end="229:67">min_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="231:17" pos:end="231:40"><expr pos:start="231:17" pos:end="231:39"><call pos:start="231:17" pos:end="231:39"><name pos:start="231:17" pos:end="231:34">nbd_send_opt_abort</name><argument_list pos:start="231:35" pos:end="231:39">(<argument pos:start="231:36" pos:end="231:38"><expr pos:start="231:36" pos:end="231:38"><name pos:start="231:36" pos:end="231:38">ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="233:17" pos:end="233:26">return <expr pos:start="233:24" pos:end="233:25"><operator pos:start="233:24" pos:end="233:24">-</operator><literal type="number" pos:start="233:25" pos:end="233:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="237:13" pos:end="247:13"><if pos:start="237:13" pos:end="247:13">if <condition pos:start="237:16" pos:end="239:35">(<expr pos:start="237:17" pos:end="239:34"><call pos:start="237:17" pos:end="239:30"><name pos:start="237:17" pos:end="237:24">nbd_read</name><argument_list pos:start="237:25" pos:end="239:30">(<argument pos:start="237:26" pos:end="237:28"><expr pos:start="237:26" pos:end="237:28"><name pos:start="237:26" pos:end="237:28">ioc</name></expr></argument>, <argument pos:start="237:31" pos:end="237:46"><expr pos:start="237:31" pos:end="237:46"><operator pos:start="237:31" pos:end="237:31">&amp;</operator><name pos:start="237:32" pos:end="237:46"><name pos:start="237:32" pos:end="237:35">info</name><operator pos:start="237:36" pos:end="237:37">-&gt;</operator><name pos:start="237:38" pos:end="237:46">opt_block</name></name></expr></argument>, <argument pos:start="237:49" pos:end="237:71"><expr pos:start="237:49" pos:end="237:71"><sizeof pos:start="237:49" pos:end="237:71">sizeof<argument_list pos:start="237:55" pos:end="237:71">(<argument pos:start="237:56" pos:end="237:70"><expr pos:start="237:56" pos:end="237:70"><name pos:start="237:56" pos:end="237:70"><name pos:start="237:56" pos:end="237:59">info</name><operator pos:start="237:60" pos:end="237:61">-&gt;</operator><name pos:start="237:62" pos:end="237:70">opt_block</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

                         <argument pos:start="239:26" pos:end="239:29"><expr pos:start="239:26" pos:end="239:29"><name pos:start="239:26" pos:end="239:29">errp</name></expr></argument>)</argument_list></call> <operator pos:start="239:32" pos:end="239:32">&lt;</operator> <literal type="number" pos:start="239:34" pos:end="239:34">0</literal></expr>)</condition> <block pos:start="239:37" pos:end="247:13">{<block_content pos:start="241:17" pos:end="245:26">

                <expr_stmt pos:start="241:17" pos:end="241:80"><expr pos:start="241:17" pos:end="241:79"><call pos:start="241:17" pos:end="241:79"><name pos:start="241:17" pos:end="241:29">error_prepend</name><argument_list pos:start="241:30" pos:end="241:79">(<argument pos:start="241:31" pos:end="241:34"><expr pos:start="241:31" pos:end="241:34"><name pos:start="241:31" pos:end="241:34">errp</name></expr></argument>, <argument pos:start="241:37" pos:end="241:78"><expr pos:start="241:37" pos:end="241:78"><literal type="string" pos:start="241:37" pos:end="241:78">"failed to read info preferred block size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="243:17" pos:end="243:40"><expr pos:start="243:17" pos:end="243:39"><call pos:start="243:17" pos:end="243:39"><name pos:start="243:17" pos:end="243:34">nbd_send_opt_abort</name><argument_list pos:start="243:35" pos:end="243:39">(<argument pos:start="243:36" pos:end="243:38"><expr pos:start="243:36" pos:end="243:38"><name pos:start="243:36" pos:end="243:38">ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="245:17" pos:end="245:26">return <expr pos:start="245:24" pos:end="245:25"><operator pos:start="245:24" pos:end="245:24">-</operator><literal type="number" pos:start="245:25" pos:end="245:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="249:13" pos:end="249:43"><expr pos:start="249:13" pos:end="249:42"><call pos:start="249:13" pos:end="249:42"><name pos:start="249:13" pos:end="249:24">be32_to_cpus</name><argument_list pos:start="249:25" pos:end="249:42">(<argument pos:start="249:26" pos:end="249:41"><expr pos:start="249:26" pos:end="249:41"><operator pos:start="249:26" pos:end="249:26">&amp;</operator><name pos:start="249:27" pos:end="249:41"><name pos:start="249:27" pos:end="249:30">info</name><operator pos:start="249:31" pos:end="249:32">-&gt;</operator><name pos:start="249:33" pos:end="249:41">opt_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="251:13" pos:end="263:13"><if pos:start="251:13" pos:end="263:13">if <condition pos:start="251:16" pos:end="253:50">(<expr pos:start="251:17" pos:end="253:49"><operator pos:start="251:17" pos:end="251:17">!</operator><call pos:start="251:18" pos:end="251:47"><name pos:start="251:18" pos:end="251:30">is_power_of_2</name><argument_list pos:start="251:31" pos:end="251:47">(<argument pos:start="251:32" pos:end="251:46"><expr pos:start="251:32" pos:end="251:46"><name pos:start="251:32" pos:end="251:46"><name pos:start="251:32" pos:end="251:35">info</name><operator pos:start="251:36" pos:end="251:37">-&gt;</operator><name pos:start="251:38" pos:end="251:46">opt_block</name></name></expr></argument>)</argument_list></call> <operator pos:start="251:49" pos:end="251:50">||</operator>

                <name pos:start="253:17" pos:end="253:31"><name pos:start="253:17" pos:end="253:20">info</name><operator pos:start="253:21" pos:end="253:22">-&gt;</operator><name pos:start="253:23" pos:end="253:31">opt_block</name></name> <operator pos:start="253:33" pos:end="253:33">&lt;</operator> <name pos:start="253:35" pos:end="253:49"><name pos:start="253:35" pos:end="253:38">info</name><operator pos:start="253:39" pos:end="253:40">-&gt;</operator><name pos:start="253:41" pos:end="253:49">min_block</name></name></expr>)</condition> <block pos:start="253:52" pos:end="263:13">{<block_content pos:start="255:17" pos:end="261:26">

                <expr_stmt pos:start="255:17" pos:end="257:60"><expr pos:start="255:17" pos:end="257:59"><call pos:start="255:17" pos:end="257:59"><name pos:start="255:17" pos:end="255:26">error_setg</name><argument_list pos:start="255:27" pos:end="257:59">(<argument pos:start="255:28" pos:end="255:31"><expr pos:start="255:28" pos:end="255:31"><name pos:start="255:28" pos:end="255:31">errp</name></expr></argument>, <argument pos:start="255:34" pos:end="257:41"><expr pos:start="255:34" pos:end="257:41"><literal type="string" pos:start="255:34" pos:end="255:64">"server preferred block size %"</literal> <name pos:start="255:66" pos:end="255:71">PRId32</name>

                           <literal type="string" pos:start="257:28" pos:end="257:41">"is not valid"</literal></expr></argument>, <argument pos:start="257:44" pos:end="257:58"><expr pos:start="257:44" pos:end="257:58"><name pos:start="257:44" pos:end="257:58"><name pos:start="257:44" pos:end="257:47">info</name><operator pos:start="257:48" pos:end="257:49">-&gt;</operator><name pos:start="257:50" pos:end="257:58">opt_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="259:17" pos:end="259:40"><expr pos:start="259:17" pos:end="259:39"><call pos:start="259:17" pos:end="259:39"><name pos:start="259:17" pos:end="259:34">nbd_send_opt_abort</name><argument_list pos:start="259:35" pos:end="259:39">(<argument pos:start="259:36" pos:end="259:38"><expr pos:start="259:36" pos:end="259:38"><name pos:start="259:36" pos:end="259:38">ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="261:17" pos:end="261:26">return <expr pos:start="261:24" pos:end="261:25"><operator pos:start="261:24" pos:end="261:24">-</operator><literal type="number" pos:start="261:25" pos:end="261:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="265:13" pos:end="275:13"><if pos:start="265:13" pos:end="275:13">if <condition pos:start="265:16" pos:end="267:35">(<expr pos:start="265:17" pos:end="267:34"><call pos:start="265:17" pos:end="267:30"><name pos:start="265:17" pos:end="265:24">nbd_read</name><argument_list pos:start="265:25" pos:end="267:30">(<argument pos:start="265:26" pos:end="265:28"><expr pos:start="265:26" pos:end="265:28"><name pos:start="265:26" pos:end="265:28">ioc</name></expr></argument>, <argument pos:start="265:31" pos:end="265:46"><expr pos:start="265:31" pos:end="265:46"><operator pos:start="265:31" pos:end="265:31">&amp;</operator><name pos:start="265:32" pos:end="265:46"><name pos:start="265:32" pos:end="265:35">info</name><operator pos:start="265:36" pos:end="265:37">-&gt;</operator><name pos:start="265:38" pos:end="265:46">max_block</name></name></expr></argument>, <argument pos:start="265:49" pos:end="265:71"><expr pos:start="265:49" pos:end="265:71"><sizeof pos:start="265:49" pos:end="265:71">sizeof<argument_list pos:start="265:55" pos:end="265:71">(<argument pos:start="265:56" pos:end="265:70"><expr pos:start="265:56" pos:end="265:70"><name pos:start="265:56" pos:end="265:70"><name pos:start="265:56" pos:end="265:59">info</name><operator pos:start="265:60" pos:end="265:61">-&gt;</operator><name pos:start="265:62" pos:end="265:70">max_block</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

                         <argument pos:start="267:26" pos:end="267:29"><expr pos:start="267:26" pos:end="267:29"><name pos:start="267:26" pos:end="267:29">errp</name></expr></argument>)</argument_list></call> <operator pos:start="267:32" pos:end="267:32">&lt;</operator> <literal type="number" pos:start="267:34" pos:end="267:34">0</literal></expr>)</condition> <block pos:start="267:37" pos:end="275:13">{<block_content pos:start="269:17" pos:end="273:26">

                <expr_stmt pos:start="269:17" pos:end="269:78"><expr pos:start="269:17" pos:end="269:77"><call pos:start="269:17" pos:end="269:77"><name pos:start="269:17" pos:end="269:29">error_prepend</name><argument_list pos:start="269:30" pos:end="269:77">(<argument pos:start="269:31" pos:end="269:34"><expr pos:start="269:31" pos:end="269:34"><name pos:start="269:31" pos:end="269:34">errp</name></expr></argument>, <argument pos:start="269:37" pos:end="269:76"><expr pos:start="269:37" pos:end="269:76"><literal type="string" pos:start="269:37" pos:end="269:76">"failed to read info maximum block size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="271:17" pos:end="271:40"><expr pos:start="271:17" pos:end="271:39"><call pos:start="271:17" pos:end="271:39"><name pos:start="271:17" pos:end="271:34">nbd_send_opt_abort</name><argument_list pos:start="271:35" pos:end="271:39">(<argument pos:start="271:36" pos:end="271:38"><expr pos:start="271:36" pos:end="271:38"><name pos:start="271:36" pos:end="271:38">ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="273:17" pos:end="273:26">return <expr pos:start="273:24" pos:end="273:25"><operator pos:start="273:24" pos:end="273:24">-</operator><literal type="number" pos:start="273:25" pos:end="273:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="277:13" pos:end="277:43"><expr pos:start="277:13" pos:end="277:42"><call pos:start="277:13" pos:end="277:42"><name pos:start="277:13" pos:end="277:24">be32_to_cpus</name><argument_list pos:start="277:25" pos:end="277:42">(<argument pos:start="277:26" pos:end="277:41"><expr pos:start="277:26" pos:end="277:41"><operator pos:start="277:26" pos:end="277:26">&amp;</operator><name pos:start="277:27" pos:end="277:41"><name pos:start="277:27" pos:end="277:30">info</name><operator pos:start="277:31" pos:end="277:32">-&gt;</operator><name pos:start="277:33" pos:end="277:41">max_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="279:13" pos:end="281:62"><expr pos:start="279:13" pos:end="281:61"><call pos:start="279:13" pos:end="281:61"><name pos:start="279:13" pos:end="279:44">trace_nbd_opt_go_info_block_size</name><argument_list pos:start="279:45" pos:end="281:61">(<argument pos:start="279:46" pos:end="279:60"><expr pos:start="279:46" pos:end="279:60"><name pos:start="279:46" pos:end="279:60"><name pos:start="279:46" pos:end="279:49">info</name><operator pos:start="279:50" pos:end="279:51">-&gt;</operator><name pos:start="279:52" pos:end="279:60">min_block</name></name></expr></argument>, <argument pos:start="279:63" pos:end="279:77"><expr pos:start="279:63" pos:end="279:77"><name pos:start="279:63" pos:end="279:77"><name pos:start="279:63" pos:end="279:66">info</name><operator pos:start="279:67" pos:end="279:68">-&gt;</operator><name pos:start="279:69" pos:end="279:77">opt_block</name></name></expr></argument>,

                                             <argument pos:start="281:46" pos:end="281:60"><expr pos:start="281:46" pos:end="281:60"><name pos:start="281:46" pos:end="281:60"><name pos:start="281:46" pos:end="281:49">info</name><operator pos:start="281:50" pos:end="281:51">-&gt;</operator><name pos:start="281:52" pos:end="281:60">max_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="283:13" pos:end="283:18">break;</break>



        <default pos:start="287:9" pos:end="287:16">default:</default>

            <expr_stmt pos:start="289:13" pos:end="289:71"><expr pos:start="289:13" pos:end="289:70"><call pos:start="289:13" pos:end="289:70"><name pos:start="289:13" pos:end="289:41">trace_nbd_opt_go_info_unknown</name><argument_list pos:start="289:42" pos:end="289:70">(<argument pos:start="289:43" pos:end="289:46"><expr pos:start="289:43" pos:end="289:46"><name pos:start="289:43" pos:end="289:46">type</name></expr></argument>, <argument pos:start="289:49" pos:end="289:69"><expr pos:start="289:49" pos:end="289:69"><call pos:start="289:49" pos:end="289:69"><name pos:start="289:49" pos:end="289:63">nbd_info_lookup</name><argument_list pos:start="289:64" pos:end="289:69">(<argument pos:start="289:65" pos:end="289:68"><expr pos:start="289:65" pos:end="289:68"><name pos:start="289:65" pos:end="289:68">type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="291:13" pos:end="299:13"><if pos:start="291:13" pos:end="299:13">if <condition pos:start="291:16" pos:end="291:45">(<expr pos:start="291:17" pos:end="291:44"><call pos:start="291:17" pos:end="291:40"><name pos:start="291:17" pos:end="291:24">nbd_drop</name><argument_list pos:start="291:25" pos:end="291:40">(<argument pos:start="291:26" pos:end="291:28"><expr pos:start="291:26" pos:end="291:28"><name pos:start="291:26" pos:end="291:28">ioc</name></expr></argument>, <argument pos:start="291:31" pos:end="291:33"><expr pos:start="291:31" pos:end="291:33"><name pos:start="291:31" pos:end="291:33">len</name></expr></argument>, <argument pos:start="291:36" pos:end="291:39"><expr pos:start="291:36" pos:end="291:39"><name pos:start="291:36" pos:end="291:39">errp</name></expr></argument>)</argument_list></call> <operator pos:start="291:42" pos:end="291:42">&lt;</operator> <literal type="number" pos:start="291:44" pos:end="291:44">0</literal></expr>)</condition> <block pos:start="291:47" pos:end="299:13">{<block_content pos:start="293:17" pos:end="297:26">

                <expr_stmt pos:start="293:17" pos:end="293:67"><expr pos:start="293:17" pos:end="293:66"><call pos:start="293:17" pos:end="293:66"><name pos:start="293:17" pos:end="293:29">error_prepend</name><argument_list pos:start="293:30" pos:end="293:66">(<argument pos:start="293:31" pos:end="293:34"><expr pos:start="293:31" pos:end="293:34"><name pos:start="293:31" pos:end="293:34">errp</name></expr></argument>, <argument pos:start="293:37" pos:end="293:65"><expr pos:start="293:37" pos:end="293:65"><literal type="string" pos:start="293:37" pos:end="293:65">"Failed to read info payload"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="295:17" pos:end="295:40"><expr pos:start="295:17" pos:end="295:39"><call pos:start="295:17" pos:end="295:39"><name pos:start="295:17" pos:end="295:34">nbd_send_opt_abort</name><argument_list pos:start="295:35" pos:end="295:39">(<argument pos:start="295:36" pos:end="295:38"><expr pos:start="295:36" pos:end="295:38"><name pos:start="295:36" pos:end="295:38">ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="297:17" pos:end="297:26">return <expr pos:start="297:24" pos:end="297:25"><operator pos:start="297:24" pos:end="297:24">-</operator><literal type="number" pos:start="297:25" pos:end="297:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="301:13" pos:end="301:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
