<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18800.c" pos:tabs="8"><function pos:start="1:1" pos:end="183:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:22">ide_dma_cb</name><parameter_list pos:start="1:23" pos:end="1:45">(<parameter pos:start="1:24" pos:end="1:35"><decl pos:start="1:24" pos:end="1:35"><type pos:start="1:24" pos:end="1:35"><name pos:start="1:24" pos:end="1:27">void</name> <modifier pos:start="1:29" pos:end="1:29">*</modifier></type><name pos:start="1:30" pos:end="1:35">opaque</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:44"><decl pos:start="1:38" pos:end="1:44"><type pos:start="1:38" pos:end="1:44"><name pos:start="1:38" pos:end="1:40">int</name></type> <name pos:start="1:42" pos:end="1:44">ret</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="183:1">{<block_content pos:start="5:5" pos:end="181:37">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">IDEState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:15">s</name> <init pos:start="5:17" pos:end="5:24">= <expr pos:start="5:19" pos:end="5:24"><name pos:start="5:19" pos:end="5:24">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">n</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int64_t</name></type> <name pos:start="9:13" pos:end="9:22">sector_num</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:19">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:29"><decl pos:start="13:5" pos:end="13:28"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">bool</name></type> <name pos:start="13:10" pos:end="13:20">stay_active</name> <init pos:start="13:22" pos:end="13:28">= <expr pos:start="13:24" pos:end="13:28"><name pos:start="13:24" pos:end="13:28">false</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="21:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:26">(<expr pos:start="17:9" pos:end="17:25"><name pos:start="17:9" pos:end="17:11">ret</name> <operator pos:start="17:13" pos:end="17:14">==</operator> <operator pos:start="17:16" pos:end="17:16">-</operator><name pos:start="17:17" pos:end="17:25">ECANCELED</name></expr>)</condition> <block pos:start="17:28" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:15">

        <return pos:start="19:9" pos:end="19:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="23:5" pos:end="35:5"><if pos:start="23:5" pos:end="35:5">if <condition pos:start="23:8" pos:end="23:16">(<expr pos:start="23:9" pos:end="23:15"><name pos:start="23:9" pos:end="23:11">ret</name> <operator pos:start="23:13" pos:end="23:13">&lt;</operator> <literal type="number" pos:start="23:15" pos:end="23:15">0</literal></expr>)</condition> <block pos:start="23:18" pos:end="35:5">{<block_content pos:start="25:9" pos:end="33:9">

        <if_stmt pos:start="25:9" pos:end="33:9"><if pos:start="25:9" pos:end="33:9">if <condition pos:start="25:12" pos:end="25:75">(<expr pos:start="25:13" pos:end="25:74"><call pos:start="25:13" pos:end="25:74"><name pos:start="25:13" pos:end="25:31">ide_handle_rw_error</name><argument_list pos:start="25:32" pos:end="25:74">(<argument pos:start="25:33" pos:end="25:33"><expr pos:start="25:33" pos:end="25:33"><name pos:start="25:33" pos:end="25:33">s</name></expr></argument>, <argument pos:start="25:36" pos:end="25:39"><expr pos:start="25:36" pos:end="25:39"><operator pos:start="25:36" pos:end="25:36">-</operator><name pos:start="25:37" pos:end="25:39">ret</name></expr></argument>, <argument pos:start="25:42" pos:end="25:73"><expr pos:start="25:42" pos:end="25:73"><call pos:start="25:42" pos:end="25:73"><name pos:start="25:42" pos:end="25:61">ide_dma_cmd_to_retry</name><argument_list pos:start="25:62" pos:end="25:73">(<argument pos:start="25:63" pos:end="25:72"><expr pos:start="25:63" pos:end="25:72"><name pos:start="25:63" pos:end="25:72"><name pos:start="25:63" pos:end="25:63">s</name><operator pos:start="25:64" pos:end="25:65">-&gt;</operator><name pos:start="25:66" pos:end="25:72">dma_cmd</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:77" pos:end="33:9">{<block_content pos:start="27:13" pos:end="31:19">

            <expr_stmt pos:start="27:13" pos:end="27:38"><expr pos:start="27:13" pos:end="27:37"><name pos:start="27:13" pos:end="27:30"><name pos:start="27:13" pos:end="27:13">s</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:18">bus</name><operator pos:start="27:19" pos:end="27:20">-&gt;</operator><name pos:start="27:21" pos:end="27:23">dma</name><operator pos:start="27:24" pos:end="27:25">-&gt;</operator><name pos:start="27:26" pos:end="27:30">aiocb</name></name> <operator pos:start="27:32" pos:end="27:32">=</operator> <name pos:start="27:34" pos:end="27:37">NULL</name></expr>;</expr_stmt>

            <expr_stmt pos:start="29:13" pos:end="29:33"><expr pos:start="29:13" pos:end="29:32"><call pos:start="29:13" pos:end="29:32"><name pos:start="29:13" pos:end="29:26">dma_buf_commit</name><argument_list pos:start="29:27" pos:end="29:32">(<argument pos:start="29:28" pos:end="29:28"><expr pos:start="29:28" pos:end="29:28"><name pos:start="29:28" pos:end="29:28">s</name></expr></argument>, <argument pos:start="29:31" pos:end="29:31"><expr pos:start="29:31" pos:end="29:31"><literal type="number" pos:start="29:31" pos:end="29:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="31:13" pos:end="31:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:31"><expr pos:start="39:5" pos:end="39:30"><name pos:start="39:5" pos:end="39:5">n</name> <operator pos:start="39:7" pos:end="39:7">=</operator> <name pos:start="39:9" pos:end="39:25"><name pos:start="39:9" pos:end="39:9">s</name><operator pos:start="39:10" pos:end="39:11">-&gt;</operator><name pos:start="39:12" pos:end="39:25">io_buffer_size</name></name> <operator pos:start="39:27" pos:end="39:28">&gt;&gt;</operator> <literal type="number" pos:start="39:30" pos:end="39:30">9</literal></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="53:5"><if pos:start="41:5" pos:end="53:5">if <condition pos:start="41:8" pos:end="41:23">(<expr pos:start="41:9" pos:end="41:22"><name pos:start="41:9" pos:end="41:9">n</name> <operator pos:start="41:11" pos:end="41:11">&gt;</operator> <name pos:start="41:13" pos:end="41:22"><name pos:start="41:13" pos:end="41:13">s</name><operator pos:start="41:14" pos:end="41:15">-&gt;</operator><name pos:start="41:16" pos:end="41:22">nsector</name></name></expr>)</condition> <block pos:start="41:25" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:27">

        <comment type="block" pos:start="43:9" pos:end="47:42">/* The PRDs were longer than needed for this request. Shorten them so

         * we don't get a negative remainder. The Active bit must remain set

         * after the request completes. */</comment>

        <expr_stmt pos:start="49:9" pos:end="49:23"><expr pos:start="49:9" pos:end="49:22"><name pos:start="49:9" pos:end="49:9">n</name> <operator pos:start="49:11" pos:end="49:11">=</operator> <name pos:start="49:13" pos:end="49:22"><name pos:start="49:13" pos:end="49:13">s</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:22">nsector</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:27"><expr pos:start="51:9" pos:end="51:26"><name pos:start="51:9" pos:end="51:19">stay_active</name> <operator pos:start="51:21" pos:end="51:21">=</operator> <name pos:start="51:23" pos:end="51:26">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:35"><expr pos:start="57:5" pos:end="57:34"><name pos:start="57:5" pos:end="57:14">sector_num</name> <operator pos:start="57:16" pos:end="57:16">=</operator> <call pos:start="57:18" pos:end="57:34"><name pos:start="57:18" pos:end="57:31">ide_get_sector</name><argument_list pos:start="57:32" pos:end="57:34">(<argument pos:start="57:33" pos:end="57:33"><expr pos:start="57:33" pos:end="57:33"><name pos:start="57:33" pos:end="57:33">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="71:5"><if pos:start="59:5" pos:end="71:5">if <condition pos:start="59:8" pos:end="59:14">(<expr pos:start="59:9" pos:end="59:13"><name pos:start="59:9" pos:end="59:9">n</name> <operator pos:start="59:11" pos:end="59:11">&gt;</operator> <literal type="number" pos:start="59:13" pos:end="59:13">0</literal></expr>)</condition> <block pos:start="59:16" pos:end="71:5">{<block_content pos:start="61:9" pos:end="69:24">

        <expr_stmt pos:start="61:9" pos:end="61:38"><expr pos:start="61:9" pos:end="61:37"><call pos:start="61:9" pos:end="61:37"><name pos:start="61:9" pos:end="61:14">assert</name><argument_list pos:start="61:15" pos:end="61:37">(<argument pos:start="61:16" pos:end="61:36"><expr pos:start="61:16" pos:end="61:36"><name pos:start="61:16" pos:end="61:16">n</name> <operator pos:start="61:18" pos:end="61:18">*</operator> <literal type="number" pos:start="61:20" pos:end="61:22">512</literal> <operator pos:start="61:24" pos:end="61:25">==</operator> <name pos:start="61:27" pos:end="61:36"><name pos:start="61:27" pos:end="61:27">s</name><operator pos:start="61:28" pos:end="61:29">-&gt;</operator><name pos:start="61:30" pos:end="61:31">sg</name><operator pos:start="61:32" pos:end="61:32">.</operator><name pos:start="61:33" pos:end="61:36">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:38"><expr pos:start="63:9" pos:end="63:37"><call pos:start="63:9" pos:end="63:37"><name pos:start="63:9" pos:end="63:22">dma_buf_commit</name><argument_list pos:start="63:23" pos:end="63:37">(<argument pos:start="63:24" pos:end="63:24"><expr pos:start="63:24" pos:end="63:24"><name pos:start="63:24" pos:end="63:24">s</name></expr></argument>, <argument pos:start="63:27" pos:end="63:36"><expr pos:start="63:27" pos:end="63:36"><name pos:start="63:27" pos:end="63:36"><name pos:start="63:27" pos:end="63:27">s</name><operator pos:start="63:28" pos:end="63:29">-&gt;</operator><name pos:start="63:30" pos:end="63:31">sg</name><operator pos:start="63:32" pos:end="63:32">.</operator><name pos:start="63:33" pos:end="63:36">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:24"><expr pos:start="65:9" pos:end="65:23"><name pos:start="65:9" pos:end="65:18">sector_num</name> <operator pos:start="65:20" pos:end="65:21">+=</operator> <name pos:start="65:23" pos:end="65:23">n</name></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:38"><expr pos:start="67:9" pos:end="67:37"><call pos:start="67:9" pos:end="67:37"><name pos:start="67:9" pos:end="67:22">ide_set_sector</name><argument_list pos:start="67:23" pos:end="67:37">(<argument pos:start="67:24" pos:end="67:24"><expr pos:start="67:24" pos:end="67:24"><name pos:start="67:24" pos:end="67:24">s</name></expr></argument>, <argument pos:start="67:27" pos:end="67:36"><expr pos:start="67:27" pos:end="67:36"><name pos:start="67:27" pos:end="67:36">sector_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:24"><expr pos:start="69:9" pos:end="69:23"><name pos:start="69:9" pos:end="69:18"><name pos:start="69:9" pos:end="69:9">s</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:18">nsector</name></name> <operator pos:start="69:20" pos:end="69:21">-=</operator> <name pos:start="69:23" pos:end="69:23">n</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="75:5" pos:end="75:27">/* end of transfer ? */</comment>

    <if_stmt pos:start="77:5" pos:end="85:5"><if pos:start="77:5" pos:end="85:5">if <condition pos:start="77:8" pos:end="77:24">(<expr pos:start="77:9" pos:end="77:23"><name pos:start="77:9" pos:end="77:18"><name pos:start="77:9" pos:end="77:9">s</name><operator pos:start="77:10" pos:end="77:11">-&gt;</operator><name pos:start="77:12" pos:end="77:18">nsector</name></name> <operator pos:start="77:20" pos:end="77:21">==</operator> <literal type="number" pos:start="77:23" pos:end="77:23">0</literal></expr>)</condition> <block pos:start="77:26" pos:end="85:5">{<block_content pos:start="79:9" pos:end="83:17">

        <expr_stmt pos:start="79:9" pos:end="79:43"><expr pos:start="79:9" pos:end="79:42"><name pos:start="79:9" pos:end="79:17"><name pos:start="79:9" pos:end="79:9">s</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:17">status</name></name> <operator pos:start="79:19" pos:end="79:19">=</operator> <name pos:start="79:21" pos:end="79:30">READY_STAT</name> <operator pos:start="79:32" pos:end="79:32">|</operator> <name pos:start="79:34" pos:end="79:42">SEEK_STAT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:28"><expr pos:start="81:9" pos:end="81:27"><call pos:start="81:9" pos:end="81:27"><name pos:start="81:9" pos:end="81:19">ide_set_irq</name><argument_list pos:start="81:20" pos:end="81:27">(<argument pos:start="81:21" pos:end="81:26"><expr pos:start="81:21" pos:end="81:26"><name pos:start="81:21" pos:end="81:26"><name pos:start="81:21" pos:end="81:21">s</name><operator pos:start="81:22" pos:end="81:23">-&gt;</operator><name pos:start="81:24" pos:end="81:26">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="83:9" pos:end="83:17">goto <name pos:start="83:14" pos:end="83:16">eot</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="89:5" pos:end="89:30">/* launch next transfer */</comment>

    <expr_stmt pos:start="91:5" pos:end="91:19"><expr pos:start="91:5" pos:end="91:18"><name pos:start="91:5" pos:end="91:5">n</name> <operator pos:start="91:7" pos:end="91:7">=</operator> <name pos:start="91:9" pos:end="91:18"><name pos:start="91:9" pos:end="91:9">s</name><operator pos:start="91:10" pos:end="91:11">-&gt;</operator><name pos:start="91:12" pos:end="91:18">nsector</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:27"><expr pos:start="93:5" pos:end="93:26"><name pos:start="93:5" pos:end="93:22"><name pos:start="93:5" pos:end="93:5">s</name><operator pos:start="93:6" pos:end="93:7">-&gt;</operator><name pos:start="93:8" pos:end="93:22">io_buffer_index</name></name> <operator pos:start="93:24" pos:end="93:24">=</operator> <literal type="number" pos:start="93:26" pos:end="93:26">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:32"><expr pos:start="95:5" pos:end="95:31"><name pos:start="95:5" pos:end="95:21"><name pos:start="95:5" pos:end="95:5">s</name><operator pos:start="95:6" pos:end="95:7">-&gt;</operator><name pos:start="95:8" pos:end="95:21">io_buffer_size</name></name> <operator pos:start="95:23" pos:end="95:23">=</operator> <name pos:start="95:25" pos:end="95:25">n</name> <operator pos:start="95:27" pos:end="95:27">*</operator> <literal type="number" pos:start="95:29" pos:end="95:31">512</literal></expr>;</expr_stmt>

    <if_stmt pos:start="97:5" pos:end="109:5"><if pos:start="97:5" pos:end="109:5">if <condition pos:start="97:8" pos:end="97:76">(<expr pos:start="97:9" pos:end="97:75"><call pos:start="97:9" pos:end="97:69"><name pos:start="97:9" pos:end="97:37"><name pos:start="97:9" pos:end="97:9">s</name><operator pos:start="97:10" pos:end="97:11">-&gt;</operator><name pos:start="97:12" pos:end="97:14">bus</name><operator pos:start="97:15" pos:end="97:16">-&gt;</operator><name pos:start="97:17" pos:end="97:19">dma</name><operator pos:start="97:20" pos:end="97:21">-&gt;</operator><name pos:start="97:22" pos:end="97:24">ops</name><operator pos:start="97:25" pos:end="97:26">-&gt;</operator><name pos:start="97:27" pos:end="97:37">prepare_buf</name></name><argument_list pos:start="97:38" pos:end="97:69">(<argument pos:start="97:39" pos:end="97:49"><expr pos:start="97:39" pos:end="97:49"><name pos:start="97:39" pos:end="97:49"><name pos:start="97:39" pos:end="97:39">s</name><operator pos:start="97:40" pos:end="97:41">-&gt;</operator><name pos:start="97:42" pos:end="97:44">bus</name><operator pos:start="97:45" pos:end="97:46">-&gt;</operator><name pos:start="97:47" pos:end="97:49">dma</name></name></expr></argument>, <argument pos:start="97:52" pos:end="97:68"><expr pos:start="97:52" pos:end="97:68"><name pos:start="97:52" pos:end="97:68"><name pos:start="97:52" pos:end="97:52">s</name><operator pos:start="97:53" pos:end="97:54">-&gt;</operator><name pos:start="97:55" pos:end="97:68">io_buffer_size</name></name></expr></argument>)</argument_list></call> <operator pos:start="97:71" pos:end="97:71">&lt;</operator> <literal type="number" pos:start="97:73" pos:end="97:75">512</literal></expr>)</condition> <block pos:start="97:78" pos:end="109:5">{<block_content pos:start="103:9" pos:end="107:17">

        <comment type="block" pos:start="99:9" pos:end="101:24">/* The PRDs were too short. Reset the Active bit, but don't raise an

         * interrupt. */</comment>

        <expr_stmt pos:start="103:9" pos:end="103:43"><expr pos:start="103:9" pos:end="103:42"><name pos:start="103:9" pos:end="103:17"><name pos:start="103:9" pos:end="103:9">s</name><operator pos:start="103:10" pos:end="103:11">-&gt;</operator><name pos:start="103:12" pos:end="103:17">status</name></name> <operator pos:start="103:19" pos:end="103:19">=</operator> <name pos:start="103:21" pos:end="103:30">READY_STAT</name> <operator pos:start="103:32" pos:end="103:32">|</operator> <name pos:start="103:34" pos:end="103:42">SEEK_STAT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:29"><expr pos:start="105:9" pos:end="105:28"><call pos:start="105:9" pos:end="105:28"><name pos:start="105:9" pos:end="105:22">dma_buf_commit</name><argument_list pos:start="105:23" pos:end="105:28">(<argument pos:start="105:24" pos:end="105:24"><expr pos:start="105:24" pos:end="105:24"><name pos:start="105:24" pos:end="105:24">s</name></expr></argument>, <argument pos:start="105:27" pos:end="105:27"><expr pos:start="105:27" pos:end="105:27"><literal type="number" pos:start="105:27" pos:end="105:27">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="107:9" pos:end="107:17">goto <name pos:start="107:14" pos:end="107:16">eot</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:68"><expr pos:start="113:5" pos:end="113:67"><call pos:start="113:5" pos:end="113:67"><name pos:start="113:5" pos:end="113:20">trace_ide_dma_cb</name><argument_list pos:start="113:21" pos:end="113:67">(<argument pos:start="113:22" pos:end="113:22"><expr pos:start="113:22" pos:end="113:22"><name pos:start="113:22" pos:end="113:22">s</name></expr></argument>, <argument pos:start="113:25" pos:end="113:34"><expr pos:start="113:25" pos:end="113:34"><name pos:start="113:25" pos:end="113:34">sector_num</name></expr></argument>, <argument pos:start="113:37" pos:end="113:37"><expr pos:start="113:37" pos:end="113:37"><name pos:start="113:37" pos:end="113:37">n</name></expr></argument>, <argument pos:start="113:40" pos:end="113:66"><expr pos:start="113:40" pos:end="113:66"><call pos:start="113:40" pos:end="113:66"><name pos:start="113:40" pos:end="113:54">IDE_DMA_CMD_str</name><argument_list pos:start="113:55" pos:end="113:66">(<argument pos:start="113:56" pos:end="113:65"><expr pos:start="113:56" pos:end="113:65"><name pos:start="113:56" pos:end="113:65"><name pos:start="113:56" pos:end="113:56">s</name><operator pos:start="113:57" pos:end="113:58">-&gt;</operator><name pos:start="113:59" pos:end="113:65">dma_cmd</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="117:5" pos:end="127:5"><if pos:start="117:5" pos:end="127:5">if <condition pos:start="117:8" pos:end="119:45">(<expr pos:start="117:9" pos:end="119:44"><operator pos:start="117:9" pos:end="117:9">(</operator><name pos:start="117:10" pos:end="117:19"><name pos:start="117:10" pos:end="117:10">s</name><operator pos:start="117:11" pos:end="117:12">-&gt;</operator><name pos:start="117:13" pos:end="117:19">dma_cmd</name></name> <operator pos:start="117:21" pos:end="117:22">==</operator> <name pos:start="117:24" pos:end="117:35">IDE_DMA_READ</name> <operator pos:start="117:37" pos:end="117:38">||</operator> <name pos:start="117:40" pos:end="117:49"><name pos:start="117:40" pos:end="117:40">s</name><operator pos:start="117:41" pos:end="117:42">-&gt;</operator><name pos:start="117:43" pos:end="117:49">dma_cmd</name></name> <operator pos:start="117:51" pos:end="117:52">==</operator> <name pos:start="117:54" pos:end="117:66">IDE_DMA_WRITE</name><operator pos:start="117:67" pos:end="117:67">)</operator> <operator pos:start="117:69" pos:end="117:70">&amp;&amp;</operator>

        <operator pos:start="119:9" pos:end="119:9">!</operator><call pos:start="119:10" pos:end="119:44"><name pos:start="119:10" pos:end="119:26">ide_sect_range_ok</name><argument_list pos:start="119:27" pos:end="119:44">(<argument pos:start="119:28" pos:end="119:28"><expr pos:start="119:28" pos:end="119:28"><name pos:start="119:28" pos:end="119:28">s</name></expr></argument>, <argument pos:start="119:31" pos:end="119:40"><expr pos:start="119:31" pos:end="119:40"><name pos:start="119:31" pos:end="119:40">sector_num</name></expr></argument>, <argument pos:start="119:43" pos:end="119:43"><expr pos:start="119:43" pos:end="119:43"><name pos:start="119:43" pos:end="119:43">n</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="119:47" pos:end="127:5">{<block_content pos:start="121:9" pos:end="125:15">

        <expr_stmt pos:start="121:9" pos:end="121:25"><expr pos:start="121:9" pos:end="121:24"><call pos:start="121:9" pos:end="121:24"><name pos:start="121:9" pos:end="121:21">ide_dma_error</name><argument_list pos:start="121:22" pos:end="121:24">(<argument pos:start="121:23" pos:end="121:23"><expr pos:start="121:23" pos:end="121:23"><name pos:start="121:23" pos:end="121:23">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:64"><expr pos:start="123:9" pos:end="123:63"><call pos:start="123:9" pos:end="123:63"><name pos:start="123:9" pos:end="123:26">block_acct_invalid</name><argument_list pos:start="123:27" pos:end="123:63">(<argument pos:start="123:28" pos:end="123:48"><expr pos:start="123:28" pos:end="123:48"><call pos:start="123:28" pos:end="123:48"><name pos:start="123:28" pos:end="123:40">blk_get_stats</name><argument_list pos:start="123:41" pos:end="123:48">(<argument pos:start="123:42" pos:end="123:47"><expr pos:start="123:42" pos:end="123:47"><name pos:start="123:42" pos:end="123:47"><name pos:start="123:42" pos:end="123:42">s</name><operator pos:start="123:43" pos:end="123:44">-&gt;</operator><name pos:start="123:45" pos:end="123:47">blk</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="123:51" pos:end="123:62"><expr pos:start="123:51" pos:end="123:62"><name pos:start="123:51" pos:end="123:62"><name pos:start="123:51" pos:end="123:51">s</name><operator pos:start="123:52" pos:end="123:53">-&gt;</operator><name pos:start="123:54" pos:end="123:57">acct</name><operator pos:start="123:58" pos:end="123:58">.</operator><name pos:start="123:59" pos:end="123:62">type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="125:9" pos:end="125:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="131:5" pos:end="131:44"><expr pos:start="131:5" pos:end="131:43"><name pos:start="131:5" pos:end="131:10">offset</name> <operator pos:start="131:12" pos:end="131:12">=</operator> <name pos:start="131:14" pos:end="131:23">sector_num</name> <operator pos:start="131:25" pos:end="131:26">&lt;&lt;</operator> <name pos:start="131:28" pos:end="131:43">BDRV_SECTOR_BITS</name></expr>;</expr_stmt>

    <switch pos:start="133:5" pos:end="167:5">switch <condition pos:start="133:12" pos:end="133:23">(<expr pos:start="133:13" pos:end="133:22"><name pos:start="133:13" pos:end="133:22"><name pos:start="133:13" pos:end="133:13">s</name><operator pos:start="133:14" pos:end="133:15">-&gt;</operator><name pos:start="133:16" pos:end="133:22">dma_cmd</name></name></expr>)</condition> <block pos:start="133:25" pos:end="167:5">{<block_content pos:start="135:5" pos:end="165:16">

    <case pos:start="135:5" pos:end="135:22">case <expr pos:start="135:10" pos:end="135:21"><name pos:start="135:10" pos:end="135:21">IDE_DMA_READ</name></expr>:</case>

        <expr_stmt pos:start="137:9" pos:end="139:75"><expr pos:start="137:9" pos:end="139:74"><name pos:start="137:9" pos:end="137:26"><name pos:start="137:9" pos:end="137:9">s</name><operator pos:start="137:10" pos:end="137:11">-&gt;</operator><name pos:start="137:12" pos:end="137:14">bus</name><operator pos:start="137:15" pos:end="137:16">-&gt;</operator><name pos:start="137:17" pos:end="137:19">dma</name><operator pos:start="137:20" pos:end="137:21">-&gt;</operator><name pos:start="137:22" pos:end="137:26">aiocb</name></name> <operator pos:start="137:28" pos:end="137:28">=</operator> <call pos:start="137:30" pos:end="139:74"><name pos:start="137:30" pos:end="137:41">dma_blk_read</name><argument_list pos:start="137:42" pos:end="139:74">(<argument pos:start="137:43" pos:end="137:48"><expr pos:start="137:43" pos:end="137:48"><name pos:start="137:43" pos:end="137:48"><name pos:start="137:43" pos:end="137:43">s</name><operator pos:start="137:44" pos:end="137:45">-&gt;</operator><name pos:start="137:46" pos:end="137:48">blk</name></name></expr></argument>, <argument pos:start="137:51" pos:end="137:56"><expr pos:start="137:51" pos:end="137:56"><operator pos:start="137:51" pos:end="137:51">&amp;</operator><name pos:start="137:52" pos:end="137:56"><name pos:start="137:52" pos:end="137:52">s</name><operator pos:start="137:53" pos:end="137:54">-&gt;</operator><name pos:start="137:55" pos:end="137:56">sg</name></name></expr></argument>, <argument pos:start="137:59" pos:end="137:64"><expr pos:start="137:59" pos:end="137:64"><name pos:start="137:59" pos:end="137:64">offset</name></expr></argument>,

                                          <argument pos:start="139:43" pos:end="139:58"><expr pos:start="139:43" pos:end="139:58"><name pos:start="139:43" pos:end="139:58">BDRV_SECTOR_SIZE</name></expr></argument>, <argument pos:start="139:61" pos:end="139:70"><expr pos:start="139:61" pos:end="139:70"><name pos:start="139:61" pos:end="139:70">ide_dma_cb</name></expr></argument>, <argument pos:start="139:73" pos:end="139:73"><expr pos:start="139:73" pos:end="139:73"><name pos:start="139:73" pos:end="139:73">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="141:9" pos:end="141:14">break;</break>

    <case pos:start="143:5" pos:end="143:23">case <expr pos:start="143:10" pos:end="143:22"><name pos:start="143:10" pos:end="143:22">IDE_DMA_WRITE</name></expr>:</case>

        <expr_stmt pos:start="145:9" pos:end="147:76"><expr pos:start="145:9" pos:end="147:75"><name pos:start="145:9" pos:end="145:26"><name pos:start="145:9" pos:end="145:9">s</name><operator pos:start="145:10" pos:end="145:11">-&gt;</operator><name pos:start="145:12" pos:end="145:14">bus</name><operator pos:start="145:15" pos:end="145:16">-&gt;</operator><name pos:start="145:17" pos:end="145:19">dma</name><operator pos:start="145:20" pos:end="145:21">-&gt;</operator><name pos:start="145:22" pos:end="145:26">aiocb</name></name> <operator pos:start="145:28" pos:end="145:28">=</operator> <call pos:start="145:30" pos:end="147:75"><name pos:start="145:30" pos:end="145:42">dma_blk_write</name><argument_list pos:start="145:43" pos:end="147:75">(<argument pos:start="145:44" pos:end="145:49"><expr pos:start="145:44" pos:end="145:49"><name pos:start="145:44" pos:end="145:49"><name pos:start="145:44" pos:end="145:44">s</name><operator pos:start="145:45" pos:end="145:46">-&gt;</operator><name pos:start="145:47" pos:end="145:49">blk</name></name></expr></argument>, <argument pos:start="145:52" pos:end="145:57"><expr pos:start="145:52" pos:end="145:57"><operator pos:start="145:52" pos:end="145:52">&amp;</operator><name pos:start="145:53" pos:end="145:57"><name pos:start="145:53" pos:end="145:53">s</name><operator pos:start="145:54" pos:end="145:55">-&gt;</operator><name pos:start="145:56" pos:end="145:57">sg</name></name></expr></argument>, <argument pos:start="145:60" pos:end="145:65"><expr pos:start="145:60" pos:end="145:65"><name pos:start="145:60" pos:end="145:65">offset</name></expr></argument>,

                                           <argument pos:start="147:44" pos:end="147:59"><expr pos:start="147:44" pos:end="147:59"><name pos:start="147:44" pos:end="147:59">BDRV_SECTOR_SIZE</name></expr></argument>, <argument pos:start="147:62" pos:end="147:71"><expr pos:start="147:62" pos:end="147:71"><name pos:start="147:62" pos:end="147:71">ide_dma_cb</name></expr></argument>, <argument pos:start="147:74" pos:end="147:74"><expr pos:start="147:74" pos:end="147:74"><name pos:start="147:74" pos:end="147:74">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="149:9" pos:end="149:14">break;</break>

    <case pos:start="151:5" pos:end="151:22">case <expr pos:start="151:10" pos:end="151:21"><name pos:start="151:10" pos:end="151:21">IDE_DMA_TRIM</name></expr>:</case>

        <expr_stmt pos:start="153:9" pos:end="159:65"><expr pos:start="153:9" pos:end="159:64"><name pos:start="153:9" pos:end="153:26"><name pos:start="153:9" pos:end="153:9">s</name><operator pos:start="153:10" pos:end="153:11">-&gt;</operator><name pos:start="153:12" pos:end="153:14">bus</name><operator pos:start="153:15" pos:end="153:16">-&gt;</operator><name pos:start="153:17" pos:end="153:19">dma</name><operator pos:start="153:20" pos:end="153:21">-&gt;</operator><name pos:start="153:22" pos:end="153:26">aiocb</name></name> <operator pos:start="153:28" pos:end="153:28">=</operator> <call pos:start="153:30" pos:end="159:64"><name pos:start="153:30" pos:end="153:39">dma_blk_io</name><argument_list pos:start="153:40" pos:end="159:64">(<argument pos:start="153:41" pos:end="153:67"><expr pos:start="153:41" pos:end="153:67"><call pos:start="153:41" pos:end="153:67"><name pos:start="153:41" pos:end="153:59">blk_get_aio_context</name><argument_list pos:start="153:60" pos:end="153:67">(<argument pos:start="153:61" pos:end="153:66"><expr pos:start="153:61" pos:end="153:66"><name pos:start="153:61" pos:end="153:66"><name pos:start="153:61" pos:end="153:61">s</name><operator pos:start="153:62" pos:end="153:63">-&gt;</operator><name pos:start="153:64" pos:end="153:66">blk</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                        <argument pos:start="155:41" pos:end="155:46"><expr pos:start="155:41" pos:end="155:46"><operator pos:start="155:41" pos:end="155:41">&amp;</operator><name pos:start="155:42" pos:end="155:46"><name pos:start="155:42" pos:end="155:42">s</name><operator pos:start="155:43" pos:end="155:44">-&gt;</operator><name pos:start="155:45" pos:end="155:46">sg</name></name></expr></argument>, <argument pos:start="155:49" pos:end="155:54"><expr pos:start="155:49" pos:end="155:54"><name pos:start="155:49" pos:end="155:54">offset</name></expr></argument>, <argument pos:start="155:57" pos:end="155:72"><expr pos:start="155:57" pos:end="155:72"><name pos:start="155:57" pos:end="155:72">BDRV_SECTOR_SIZE</name></expr></argument>,

                                        <argument pos:start="157:41" pos:end="157:54"><expr pos:start="157:41" pos:end="157:54"><name pos:start="157:41" pos:end="157:54">ide_issue_trim</name></expr></argument>, <argument pos:start="157:57" pos:end="157:62"><expr pos:start="157:57" pos:end="157:62"><name pos:start="157:57" pos:end="157:62"><name pos:start="157:57" pos:end="157:57">s</name><operator pos:start="157:58" pos:end="157:59">-&gt;</operator><name pos:start="157:60" pos:end="157:62">blk</name></name></expr></argument>, <argument pos:start="157:65" pos:end="157:74"><expr pos:start="157:65" pos:end="157:74"><name pos:start="157:65" pos:end="157:74">ide_dma_cb</name></expr></argument>, <argument pos:start="157:77" pos:end="157:77"><expr pos:start="157:77" pos:end="157:77"><name pos:start="157:77" pos:end="157:77">s</name></expr></argument>,

                                        <argument pos:start="159:41" pos:end="159:63"><expr pos:start="159:41" pos:end="159:63"><name pos:start="159:41" pos:end="159:63">DMA_DIRECTION_TO_DEVICE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="161:9" pos:end="161:14">break;</break>

    <default pos:start="163:5" pos:end="163:12">default:</default>

        <expr_stmt pos:start="165:9" pos:end="165:16"><expr pos:start="165:9" pos:end="165:15"><call pos:start="165:9" pos:end="165:15"><name pos:start="165:9" pos:end="165:13">abort</name><argument_list pos:start="165:14" pos:end="165:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

    <return pos:start="169:5" pos:end="169:11">return;</return>



<label pos:start="173:1" pos:end="173:4"><name pos:start="173:1" pos:end="173:3">eot</name>:</label>

    <if_stmt pos:start="175:5" pos:end="179:5"><if pos:start="175:5" pos:end="179:5">if <condition pos:start="175:8" pos:end="175:66">(<expr pos:start="175:9" pos:end="175:65"><name pos:start="175:9" pos:end="175:18"><name pos:start="175:9" pos:end="175:9">s</name><operator pos:start="175:10" pos:end="175:11">-&gt;</operator><name pos:start="175:12" pos:end="175:18">dma_cmd</name></name> <operator pos:start="175:20" pos:end="175:21">==</operator> <name pos:start="175:23" pos:end="175:34">IDE_DMA_READ</name> <operator pos:start="175:36" pos:end="175:37">||</operator> <name pos:start="175:39" pos:end="175:48"><name pos:start="175:39" pos:end="175:39">s</name><operator pos:start="175:40" pos:end="175:41">-&gt;</operator><name pos:start="175:42" pos:end="175:48">dma_cmd</name></name> <operator pos:start="175:50" pos:end="175:51">==</operator> <name pos:start="175:53" pos:end="175:65">IDE_DMA_WRITE</name></expr>)</condition> <block pos:start="175:68" pos:end="179:5">{<block_content pos:start="177:9" pos:end="177:57">

        <expr_stmt pos:start="177:9" pos:end="177:57"><expr pos:start="177:9" pos:end="177:56"><call pos:start="177:9" pos:end="177:56"><name pos:start="177:9" pos:end="177:23">block_acct_done</name><argument_list pos:start="177:24" pos:end="177:56">(<argument pos:start="177:25" pos:end="177:45"><expr pos:start="177:25" pos:end="177:45"><call pos:start="177:25" pos:end="177:45"><name pos:start="177:25" pos:end="177:37">blk_get_stats</name><argument_list pos:start="177:38" pos:end="177:45">(<argument pos:start="177:39" pos:end="177:44"><expr pos:start="177:39" pos:end="177:44"><name pos:start="177:39" pos:end="177:44"><name pos:start="177:39" pos:end="177:39">s</name><operator pos:start="177:40" pos:end="177:41">-&gt;</operator><name pos:start="177:42" pos:end="177:44">blk</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="177:48" pos:end="177:55"><expr pos:start="177:48" pos:end="177:55"><operator pos:start="177:48" pos:end="177:48">&amp;</operator><name pos:start="177:49" pos:end="177:55"><name pos:start="177:49" pos:end="177:49">s</name><operator pos:start="177:50" pos:end="177:51">-&gt;</operator><name pos:start="177:52" pos:end="177:55">acct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="181:5" pos:end="181:37"><expr pos:start="181:5" pos:end="181:36"><call pos:start="181:5" pos:end="181:36"><name pos:start="181:5" pos:end="181:20">ide_set_inactive</name><argument_list pos:start="181:21" pos:end="181:36">(<argument pos:start="181:22" pos:end="181:22"><expr pos:start="181:22" pos:end="181:22"><name pos:start="181:22" pos:end="181:22">s</name></expr></argument>, <argument pos:start="181:25" pos:end="181:35"><expr pos:start="181:25" pos:end="181:35"><name pos:start="181:25" pos:end="181:35">stay_active</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
