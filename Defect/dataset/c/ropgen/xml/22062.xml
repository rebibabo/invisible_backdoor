<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22062.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">qtrle_decode_1bpp</name><parameter_list pos:start="1:30" pos:end="1:96">(<parameter pos:start="1:31" pos:end="1:45"><decl pos:start="1:31" pos:end="1:45"><type pos:start="1:31" pos:end="1:45"><name pos:start="1:31" pos:end="1:42">QtrleContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:61"><decl pos:start="1:48" pos:end="1:61"><type pos:start="1:48" pos:end="1:61"><name pos:start="1:48" pos:end="1:50">int</name></type> <name pos:start="1:52" pos:end="1:61">stream_ptr</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:74"><decl pos:start="1:64" pos:end="1:74"><type pos:start="1:64" pos:end="1:74"><name pos:start="1:64" pos:end="1:66">int</name></type> <name pos:start="1:68" pos:end="1:74">row_ptr</name></decl></parameter>, <parameter pos:start="1:77" pos:end="1:95"><decl pos:start="1:77" pos:end="1:95"><type pos:start="1:77" pos:end="1:95"><name pos:start="1:77" pos:end="1:79">int</name></type> <name pos:start="1:81" pos:end="1:95">lines_to_change</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="97:1">{<block_content pos:start="5:5" pos:end="95:5">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:16">rle_code</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:17">pixel_ptr</name> <init pos:start="7:19" pos:end="7:21">= <expr pos:start="7:21" pos:end="7:21"><literal type="number" pos:start="7:21" pos:end="7:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:15">row_inc</name> <init pos:start="9:17" pos:end="9:38">= <expr pos:start="9:19" pos:end="9:38"><name pos:start="9:19" pos:end="9:38"><name pos:start="9:19" pos:end="9:19">s</name><operator pos:start="9:20" pos:end="9:21">-&gt;</operator><name pos:start="9:22" pos:end="9:26">frame</name><operator pos:start="9:27" pos:end="9:27">.</operator><name pos:start="9:28" pos:end="9:35">linesize</name><index pos:start="9:36" pos:end="9:38">[<expr pos:start="9:37" pos:end="9:37"><literal type="number" pos:start="9:37" pos:end="9:37">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:17">char</name></type> <name pos:start="11:19" pos:end="11:21">pi0</name></decl>, <decl pos:start="11:24" pos:end="11:26"><type ref="prev" pos:start="11:5" pos:end="11:17"/><name pos:start="11:24" pos:end="11:26">pi1</name></decl>;</decl_stmt>  <comment type="block" pos:start="11:30" pos:end="11:51">/* 2 8-pixel values */</comment>

    <decl_stmt pos:start="13:5" pos:end="13:42"><decl pos:start="13:5" pos:end="13:41"><type pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:17">char</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:22">rgb</name> <init pos:start="13:24" pos:end="13:41">= <expr pos:start="13:26" pos:end="13:41"><name pos:start="13:26" pos:end="13:41"><name pos:start="13:26" pos:end="13:26">s</name><operator pos:start="13:27" pos:end="13:28">-&gt;</operator><name pos:start="13:29" pos:end="13:33">frame</name><operator pos:start="13:34" pos:end="13:34">.</operator><name pos:start="13:35" pos:end="13:38">data</name><index pos:start="13:39" pos:end="13:41">[<expr pos:start="13:40" pos:end="13:40"><literal type="number" pos:start="13:40" pos:end="13:40">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:62"><decl pos:start="15:5" pos:end="15:61"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:19">pixel_limit</name> <init pos:start="15:21" pos:end="15:61">= <expr pos:start="15:23" pos:end="15:61"><name pos:start="15:23" pos:end="15:42"><name pos:start="15:23" pos:end="15:23">s</name><operator pos:start="15:24" pos:end="15:25">-&gt;</operator><name pos:start="15:26" pos:end="15:30">frame</name><operator pos:start="15:31" pos:end="15:31">.</operator><name pos:start="15:32" pos:end="15:39">linesize</name><index pos:start="15:40" pos:end="15:42">[<expr pos:start="15:41" pos:end="15:41"><literal type="number" pos:start="15:41" pos:end="15:41">0</literal></expr>]</index></name> <operator pos:start="15:44" pos:end="15:44">*</operator> <name pos:start="15:46" pos:end="15:61"><name pos:start="15:46" pos:end="15:46">s</name><operator pos:start="15:47" pos:end="15:48">-&gt;</operator><name pos:start="15:49" pos:end="15:53">avctx</name><operator pos:start="15:54" pos:end="15:55">-&gt;</operator><name pos:start="15:56" pos:end="15:61">height</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:13"><decl pos:start="17:5" pos:end="17:12"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:12">skip</name></decl>;</decl_stmt>



    <while pos:start="21:5" pos:end="95:5">while <condition pos:start="21:11" pos:end="21:27">(<expr pos:start="21:12" pos:end="21:26"><name pos:start="21:12" pos:end="21:26">lines_to_change</name></expr>)</condition> <block pos:start="21:29" pos:end="95:5">{<block_content pos:start="23:9" pos:end="93:9">

        <expr_stmt pos:start="23:9" pos:end="23:28"><expr pos:start="23:9" pos:end="23:27"><call pos:start="23:9" pos:end="23:27"><name pos:start="23:9" pos:end="23:24">CHECK_STREAM_PTR</name><argument_list pos:start="23:25" pos:end="23:27">(<argument pos:start="23:26" pos:end="23:26"><expr pos:start="23:26" pos:end="23:26"><literal type="number" pos:start="23:26" pos:end="23:26">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:36"><expr pos:start="25:9" pos:end="25:35"><name pos:start="25:9" pos:end="25:12">skip</name> <operator pos:start="25:14" pos:end="25:14">=</operator> <name pos:start="25:16" pos:end="25:35"><name pos:start="25:16" pos:end="25:16">s</name><operator pos:start="25:17" pos:end="25:18">-&gt;</operator><name pos:start="25:19" pos:end="25:21">buf</name><index pos:start="25:22" pos:end="25:35">[<expr pos:start="25:23" pos:end="25:34"><name pos:start="25:23" pos:end="25:32">stream_ptr</name><operator pos:start="25:33" pos:end="25:34">++</operator></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:53"><expr pos:start="27:9" pos:end="27:52"><name pos:start="27:9" pos:end="27:16">rle_code</name> <operator pos:start="27:18" pos:end="27:18">=</operator> <operator pos:start="27:20" pos:end="27:20">(</operator><name pos:start="27:21" pos:end="27:26">signed</name> <name pos:start="27:28" pos:end="27:31">char</name><operator pos:start="27:32" pos:end="27:32">)</operator><name pos:start="27:33" pos:end="27:52"><name pos:start="27:33" pos:end="27:33">s</name><operator pos:start="27:34" pos:end="27:35">-&gt;</operator><name pos:start="27:36" pos:end="27:38">buf</name><index pos:start="27:39" pos:end="27:52">[<expr pos:start="27:40" pos:end="27:51"><name pos:start="27:40" pos:end="27:49">stream_ptr</name><operator pos:start="27:50" pos:end="27:51">++</operator></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="31:18"><if pos:start="29:9" pos:end="31:18">if <condition pos:start="29:12" pos:end="29:26">(<expr pos:start="29:13" pos:end="29:25"><name pos:start="29:13" pos:end="29:20">rle_code</name> <operator pos:start="29:22" pos:end="29:23">==</operator> <literal type="number" pos:start="29:25" pos:end="29:25">0</literal></expr>)</condition><block type="pseudo" pos:start="31:13" pos:end="31:18"><block_content pos:start="31:13" pos:end="31:18">

            <break pos:start="31:13" pos:end="31:18">break;</break></block_content></block></if></if_stmt>

        <if_stmt pos:start="33:9" pos:end="43:34"><if pos:start="33:9" pos:end="41:9">if<condition pos:start="33:11" pos:end="33:23">(<expr pos:start="33:12" pos:end="33:22"><name pos:start="33:12" pos:end="33:15">skip</name> <operator pos:start="33:17" pos:end="33:17">&amp;</operator> <literal type="number" pos:start="33:19" pos:end="33:22">0x80</literal></expr>)</condition> <block pos:start="33:25" pos:end="41:9">{<block_content pos:start="35:13" pos:end="39:52">

            <expr_stmt pos:start="35:13" pos:end="35:30"><expr pos:start="35:13" pos:end="35:29"><name pos:start="35:13" pos:end="35:27">lines_to_change</name><operator pos:start="35:28" pos:end="35:29">--</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:31"><expr pos:start="37:13" pos:end="37:30"><name pos:start="37:13" pos:end="37:19">row_ptr</name> <operator pos:start="37:21" pos:end="37:22">+=</operator> <name pos:start="37:24" pos:end="37:30">row_inc</name></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:52"><expr pos:start="39:13" pos:end="39:51"><name pos:start="39:13" pos:end="39:21">pixel_ptr</name> <operator pos:start="39:23" pos:end="39:23">=</operator> <name pos:start="39:25" pos:end="39:31">row_ptr</name> <operator pos:start="39:33" pos:end="39:33">+</operator> <literal type="number" pos:start="39:35" pos:end="39:35">2</literal> <operator pos:start="39:37" pos:end="39:37">*</operator> <operator pos:start="39:39" pos:end="39:39">(</operator><name pos:start="39:40" pos:end="39:43">skip</name> <operator pos:start="39:45" pos:end="39:45">&amp;</operator> <literal type="number" pos:start="39:47" pos:end="39:50">0x7f</literal><operator pos:start="39:51" pos:end="39:51">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="41:11" pos:end="43:34">else<block type="pseudo" pos:start="43:13" pos:end="43:34"><block_content pos:start="43:13" pos:end="43:34">

            <expr_stmt pos:start="43:13" pos:end="43:34"><expr pos:start="43:13" pos:end="43:33"><name pos:start="43:13" pos:end="43:21">pixel_ptr</name> <operator pos:start="43:23" pos:end="43:24">+=</operator> <literal type="number" pos:start="43:26" pos:end="43:26">2</literal> <operator pos:start="43:28" pos:end="43:28">*</operator> <name pos:start="43:30" pos:end="43:33">skip</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:27"><expr pos:start="45:9" pos:end="45:26"><call pos:start="45:9" pos:end="45:26"><name pos:start="45:9" pos:end="45:23">CHECK_PIXEL_PTR</name><argument_list pos:start="45:24" pos:end="45:26">(<argument pos:start="45:25" pos:end="45:25"><expr pos:start="45:25" pos:end="45:25"><literal type="number" pos:start="45:25" pos:end="45:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="45:30" pos:end="45:66">/* make sure pixel_ptr is positive */</comment>



        <if_stmt pos:start="49:9" pos:end="93:9"><if pos:start="49:9" pos:end="77:9">if <condition pos:start="49:12" pos:end="49:25">(<expr pos:start="49:13" pos:end="49:24"><name pos:start="49:13" pos:end="49:20">rle_code</name> <operator pos:start="49:22" pos:end="49:22">&lt;</operator> <literal type="number" pos:start="49:24" pos:end="49:24">0</literal></expr>)</condition> <block pos:start="49:27" pos:end="77:9">{<block_content pos:start="53:13" pos:end="75:13">

            <comment type="block" pos:start="51:13" pos:end="51:44">/* decode the run length code */</comment>

            <expr_stmt pos:start="53:13" pos:end="53:33"><expr pos:start="53:13" pos:end="53:32"><name pos:start="53:13" pos:end="53:20">rle_code</name> <operator pos:start="53:22" pos:end="53:22">=</operator> <operator pos:start="53:24" pos:end="53:24">-</operator><name pos:start="53:25" pos:end="53:32">rle_code</name></expr>;</expr_stmt>

            <comment type="block" pos:start="55:13" pos:end="57:61">/* get the next 2 bytes from the stream, treat them as groups

             * of 8 pixels, and output them rle_code times */</comment>

            <expr_stmt pos:start="59:13" pos:end="59:32"><expr pos:start="59:13" pos:end="59:31"><call pos:start="59:13" pos:end="59:31"><name pos:start="59:13" pos:end="59:28">CHECK_STREAM_PTR</name><argument_list pos:start="59:29" pos:end="59:31">(<argument pos:start="59:30" pos:end="59:30"><expr pos:start="59:30" pos:end="59:30"><literal type="number" pos:start="59:30" pos:end="59:30">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:39"><expr pos:start="61:13" pos:end="61:38"><name pos:start="61:13" pos:end="61:15">pi0</name> <operator pos:start="61:17" pos:end="61:17">=</operator> <name pos:start="61:19" pos:end="61:38"><name pos:start="61:19" pos:end="61:19">s</name><operator pos:start="61:20" pos:end="61:21">-&gt;</operator><name pos:start="61:22" pos:end="61:24">buf</name><index pos:start="61:25" pos:end="61:38">[<expr pos:start="61:26" pos:end="61:37"><name pos:start="61:26" pos:end="61:35">stream_ptr</name><operator pos:start="61:36" pos:end="61:37">++</operator></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:39"><expr pos:start="63:13" pos:end="63:38"><name pos:start="63:13" pos:end="63:15">pi1</name> <operator pos:start="63:17" pos:end="63:17">=</operator> <name pos:start="63:19" pos:end="63:38"><name pos:start="63:19" pos:end="63:19">s</name><operator pos:start="63:20" pos:end="63:21">-&gt;</operator><name pos:start="63:22" pos:end="63:24">buf</name><index pos:start="63:25" pos:end="63:38">[<expr pos:start="63:26" pos:end="63:37"><name pos:start="63:26" pos:end="63:35">stream_ptr</name><operator pos:start="63:36" pos:end="63:37">++</operator></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:42"><expr pos:start="65:13" pos:end="65:41"><call pos:start="65:13" pos:end="65:41"><name pos:start="65:13" pos:end="65:27">CHECK_PIXEL_PTR</name><argument_list pos:start="65:28" pos:end="65:41">(<argument pos:start="65:29" pos:end="65:40"><expr pos:start="65:29" pos:end="65:40"><name pos:start="65:29" pos:end="65:36">rle_code</name> <operator pos:start="65:38" pos:end="65:38">*</operator> <literal type="number" pos:start="65:40" pos:end="65:40">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <while pos:start="69:13" pos:end="75:13">while <condition pos:start="69:19" pos:end="69:30">(<expr pos:start="69:20" pos:end="69:29"><name pos:start="69:20" pos:end="69:27">rle_code</name><operator pos:start="69:28" pos:end="69:29">--</operator></expr>)</condition> <block pos:start="69:32" pos:end="75:13">{<block_content pos:start="71:17" pos:end="73:39">

                <expr_stmt pos:start="71:17" pos:end="71:39"><expr pos:start="71:17" pos:end="71:38"><name pos:start="71:17" pos:end="71:32"><name pos:start="71:17" pos:end="71:19">rgb</name><index pos:start="71:20" pos:end="71:32">[<expr pos:start="71:21" pos:end="71:31"><name pos:start="71:21" pos:end="71:29">pixel_ptr</name><operator pos:start="71:30" pos:end="71:31">++</operator></expr>]</index></name> <operator pos:start="71:34" pos:end="71:34">=</operator> <name pos:start="71:36" pos:end="71:38">pi0</name></expr>;</expr_stmt>

                <expr_stmt pos:start="73:17" pos:end="73:39"><expr pos:start="73:17" pos:end="73:38"><name pos:start="73:17" pos:end="73:32"><name pos:start="73:17" pos:end="73:19">rgb</name><index pos:start="73:20" pos:end="73:32">[<expr pos:start="73:21" pos:end="73:31"><name pos:start="73:21" pos:end="73:29">pixel_ptr</name><operator pos:start="73:30" pos:end="73:31">++</operator></expr>]</index></name> <operator pos:start="73:34" pos:end="73:34">=</operator> <name pos:start="73:36" pos:end="73:38">pi1</name></expr>;</expr_stmt>

            </block_content>}</block></while>

        </block_content>}</block></if> <else pos:start="77:11" pos:end="93:9">else <block pos:start="77:16" pos:end="93:9">{<block_content pos:start="81:13" pos:end="91:56">

            <comment type="block" pos:start="79:13" pos:end="79:64">/* copy the same pixel directly to output 2 times */</comment>

            <expr_stmt pos:start="81:13" pos:end="81:26"><expr pos:start="81:13" pos:end="81:25"><name pos:start="81:13" pos:end="81:20">rle_code</name> <operator pos:start="81:22" pos:end="81:23">*=</operator> <literal type="number" pos:start="81:25" pos:end="81:25">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:39"><expr pos:start="83:13" pos:end="83:38"><call pos:start="83:13" pos:end="83:38"><name pos:start="83:13" pos:end="83:28">CHECK_STREAM_PTR</name><argument_list pos:start="83:29" pos:end="83:38">(<argument pos:start="83:30" pos:end="83:37"><expr pos:start="83:30" pos:end="83:37"><name pos:start="83:30" pos:end="83:37">rle_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:38"><expr pos:start="85:13" pos:end="85:37"><call pos:start="85:13" pos:end="85:37"><name pos:start="85:13" pos:end="85:27">CHECK_PIXEL_PTR</name><argument_list pos:start="85:28" pos:end="85:37">(<argument pos:start="85:29" pos:end="85:36"><expr pos:start="85:29" pos:end="85:36"><name pos:start="85:29" pos:end="85:36">rle_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <while pos:start="89:13" pos:end="91:56">while <condition pos:start="89:19" pos:end="89:30">(<expr pos:start="89:20" pos:end="89:29"><name pos:start="89:20" pos:end="89:27">rle_code</name><operator pos:start="89:28" pos:end="89:29">--</operator></expr>)</condition><block type="pseudo" pos:start="91:17" pos:end="91:56"><block_content pos:start="91:17" pos:end="91:56">

                <expr_stmt pos:start="91:17" pos:end="91:56"><expr pos:start="91:17" pos:end="91:55"><name pos:start="91:17" pos:end="91:32"><name pos:start="91:17" pos:end="91:19">rgb</name><index pos:start="91:20" pos:end="91:32">[<expr pos:start="91:21" pos:end="91:31"><name pos:start="91:21" pos:end="91:29">pixel_ptr</name><operator pos:start="91:30" pos:end="91:31">++</operator></expr>]</index></name> <operator pos:start="91:34" pos:end="91:34">=</operator> <name pos:start="91:36" pos:end="91:55"><name pos:start="91:36" pos:end="91:36">s</name><operator pos:start="91:37" pos:end="91:38">-&gt;</operator><name pos:start="91:39" pos:end="91:41">buf</name><index pos:start="91:42" pos:end="91:55">[<expr pos:start="91:43" pos:end="91:54"><name pos:start="91:43" pos:end="91:52">stream_ptr</name><operator pos:start="91:53" pos:end="91:54">++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
