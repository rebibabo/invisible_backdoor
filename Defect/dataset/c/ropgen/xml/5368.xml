<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5368.c" pos:tabs="8"><function pos:start="1:1" pos:end="45:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">paio_cancel</name><parameter_list pos:start="1:24" pos:end="1:51">(<parameter pos:start="1:25" pos:end="1:50"><decl pos:start="1:25" pos:end="1:50"><type pos:start="1:25" pos:end="1:42"><name pos:start="1:25" pos:end="1:40">BlockDriverAIOCB</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:50">blockacb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="45:1">{<block_content pos:start="5:5" pos:end="43:21">

    <decl_stmt pos:start="5:5" pos:end="5:61"><decl pos:start="5:5" pos:end="5:60"><type pos:start="5:5" pos:end="5:24"><name pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:22">qemu_paiocb</name></name> <modifier pos:start="5:24" pos:end="5:24">*</modifier></type><name pos:start="5:25" pos:end="5:27">acb</name> <init pos:start="5:29" pos:end="5:60">= <expr pos:start="5:31" pos:end="5:60"><operator pos:start="5:31" pos:end="5:31">(</operator>struct <name pos:start="5:39" pos:end="5:49">qemu_paiocb</name> <operator pos:start="5:51" pos:end="5:51">*</operator><operator pos:start="5:52" pos:end="5:52">)</operator><name pos:start="5:53" pos:end="5:60">blockacb</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:14">active</name> <init pos:start="7:16" pos:end="7:18">= <expr pos:start="7:18" pos:end="7:18"><literal type="number" pos:start="7:18" pos:end="7:18">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:22"><expr pos:start="11:5" pos:end="11:21"><call pos:start="11:5" pos:end="11:21"><name pos:start="11:5" pos:end="11:14">mutex_lock</name><argument_list pos:start="11:15" pos:end="11:21">(<argument pos:start="11:16" pos:end="11:20"><expr pos:start="11:16" pos:end="11:20"><operator pos:start="11:16" pos:end="11:16">&amp;</operator><name pos:start="11:17" pos:end="11:20">lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="13:5" pos:end="23:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:21">(<expr pos:start="13:9" pos:end="13:20"><operator pos:start="13:9" pos:end="13:9">!</operator><name pos:start="13:10" pos:end="13:20"><name pos:start="13:10" pos:end="13:12">acb</name><operator pos:start="13:13" pos:end="13:14">-&gt;</operator><name pos:start="13:15" pos:end="13:20">active</name></name></expr>)</condition> <block pos:start="13:23" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:30">

        <expr_stmt pos:start="15:9" pos:end="15:47"><expr pos:start="15:9" pos:end="15:46"><call pos:start="15:9" pos:end="15:46"><name pos:start="15:9" pos:end="15:20">TAILQ_REMOVE</name><argument_list pos:start="15:21" pos:end="15:46">(<argument pos:start="15:22" pos:end="15:34"><expr pos:start="15:22" pos:end="15:34"><operator pos:start="15:22" pos:end="15:22">&amp;</operator><name pos:start="15:23" pos:end="15:34">request_list</name></expr></argument>, <argument pos:start="15:37" pos:end="15:39"><expr pos:start="15:37" pos:end="15:39"><name pos:start="15:37" pos:end="15:39">acb</name></expr></argument>, <argument pos:start="15:42" pos:end="15:45"><expr pos:start="15:42" pos:end="15:45"><name pos:start="15:42" pos:end="15:45">node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="17:9" pos:end="17:30"><expr pos:start="17:9" pos:end="17:29"><name pos:start="17:9" pos:end="17:16"><name pos:start="17:9" pos:end="17:11">acb</name><operator pos:start="17:12" pos:end="17:13">-&gt;</operator><name pos:start="17:14" pos:end="17:16">ret</name></name> <operator pos:start="17:18" pos:end="17:18">=</operator> <operator pos:start="17:20" pos:end="17:20">-</operator><name pos:start="17:21" pos:end="17:29">ECANCELED</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="19:7" pos:end="23:5">else if <condition pos:start="19:15" pos:end="19:40">(<expr pos:start="19:16" pos:end="19:39"><name pos:start="19:16" pos:end="19:23"><name pos:start="19:16" pos:end="19:18">acb</name><operator pos:start="19:19" pos:end="19:20">-&gt;</operator><name pos:start="19:21" pos:end="19:23">ret</name></name> <operator pos:start="19:25" pos:end="19:26">==</operator> <operator pos:start="19:28" pos:end="19:28">-</operator><name pos:start="19:29" pos:end="19:39">EINPROGRESS</name></expr>)</condition> <block pos:start="19:42" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:19">

        <expr_stmt pos:start="21:9" pos:end="21:19"><expr pos:start="21:9" pos:end="21:18"><name pos:start="21:9" pos:end="21:14">active</name> <operator pos:start="21:16" pos:end="21:16">=</operator> <literal type="number" pos:start="21:18" pos:end="21:18">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:24"><expr pos:start="25:5" pos:end="25:23"><call pos:start="25:5" pos:end="25:23"><name pos:start="25:5" pos:end="25:16">mutex_unlock</name><argument_list pos:start="25:17" pos:end="25:23">(<argument pos:start="25:18" pos:end="25:22"><expr pos:start="25:18" pos:end="25:22"><operator pos:start="25:18" pos:end="25:18">&amp;</operator><name pos:start="25:19" pos:end="25:22">lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="29:5" pos:end="39:5"><if pos:start="29:5" pos:end="39:5">if <condition pos:start="29:8" pos:end="29:15">(<expr pos:start="29:9" pos:end="29:14"><name pos:start="29:9" pos:end="29:14">active</name></expr>)</condition> <block pos:start="29:17" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:13">

        <comment type="block" pos:start="31:9" pos:end="33:16">/* fail safe: if the aio could not be canceled, we wait for

           it */</comment>

        <while pos:start="35:9" pos:end="37:13">while <condition pos:start="35:15" pos:end="35:51">(<expr pos:start="35:16" pos:end="35:50"><call pos:start="35:16" pos:end="35:35"><name pos:start="35:16" pos:end="35:30">qemu_paio_error</name><argument_list pos:start="35:31" pos:end="35:35">(<argument pos:start="35:32" pos:end="35:34"><expr pos:start="35:32" pos:end="35:34"><name pos:start="35:32" pos:end="35:34">acb</name></expr></argument>)</argument_list></call> <operator pos:start="35:37" pos:end="35:38">==</operator> <name pos:start="35:40" pos:end="35:50">EINPROGRESS</name></expr>)</condition><block type="pseudo" pos:start="37:13" pos:end="37:13"><block_content pos:start="37:13" pos:end="37:13">

            <empty_stmt pos:start="37:13" pos:end="37:13">;</empty_stmt></block_content></block></while>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:21"><expr pos:start="43:5" pos:end="43:20"><call pos:start="43:5" pos:end="43:20"><name pos:start="43:5" pos:end="43:15">paio_remove</name><argument_list pos:start="43:16" pos:end="43:20">(<argument pos:start="43:17" pos:end="43:19"><expr pos:start="43:17" pos:end="43:19"><name pos:start="43:17" pos:end="43:19">acb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
