<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20756.c" pos:tabs="8"><decl_stmt pos:start="1:1" pos:end="131:1"><decl pos:start="1:1" pos:end="131:1"><type pos:start="1:1" pos:end="1:11"><name pos:start="1:1" pos:end="1:6">STATIC</name> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:15">DEF</name><argument_list pos:start="1:16" pos:end="1:33">(<argument pos:start="1:17" pos:end="1:19"><expr pos:start="1:17" pos:end="1:19"><name pos:start="1:17" pos:end="1:19">put</name></expr></argument>, <argument pos:start="1:22" pos:end="1:32"><expr pos:start="1:22" pos:end="1:32"><name pos:start="1:22" pos:end="1:32">pixels8_xy2</name></expr></argument>)</argument_list><argument_list pos:start="1:34" pos:end="3:61">(<argument pos:start="1:35" pos:end="1:48"><expr pos:start="1:35" pos:end="1:48"><name pos:start="1:35" pos:end="1:41">uint8_t</name> <operator pos:start="1:43" pos:end="1:43">*</operator><name pos:start="1:44" pos:end="1:48">block</name></expr></argument>, <argument pos:start="1:51" pos:end="1:71"><expr pos:start="1:51" pos:end="1:71"><specifier pos:start="1:51" pos:end="1:55">const</specifier> <name pos:start="1:57" pos:end="1:63">uint8_t</name> <operator pos:start="1:65" pos:end="1:65">*</operator><name pos:start="1:66" pos:end="1:71">pixels</name></expr></argument>,

                                  <argument pos:start="3:35" pos:end="3:53"><expr pos:start="3:35" pos:end="3:53"><name pos:start="3:35" pos:end="3:43">ptrdiff_t</name> <name pos:start="3:45" pos:end="3:53">line_size</name></expr></argument>, <argument pos:start="3:56" pos:end="3:60"><expr pos:start="3:56" pos:end="3:60"><name pos:start="3:56" pos:end="3:58">int</name> <name pos:start="3:60" pos:end="3:60">h</name></expr></argument>)</argument_list>

<block pos:start="5:1" pos:end="131:1">{<block_content pos:start="7:5" pos:end="129:26">

    <expr_stmt pos:start="7:5" pos:end="7:19"><expr pos:start="7:5" pos:end="7:18"><call pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:13">MOVQ_ZERO</name><argument_list pos:start="7:14" pos:end="7:18">(<argument pos:start="7:15" pos:end="7:17"><expr pos:start="7:15" pos:end="7:17"><name pos:start="7:15" pos:end="7:17">mm7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="9:5" pos:end="9:17"><expr pos:start="9:5" pos:end="9:16"><call pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:11">SET_RND</name><argument_list pos:start="9:12" pos:end="9:16">(<argument pos:start="9:13" pos:end="9:15"><expr pos:start="9:13" pos:end="9:15"><name pos:start="9:13" pos:end="9:15">mm6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="9:19" pos:end="9:59">// =2 for rnd  and  =1 for no_rnd version</comment>

    <asm pos:start="11:5" pos:end="129:26">__asm__ <specifier pos:start="11:13" pos:end="11:20">volatile</specifier>(

        "movq   (%1), %%mm0             \n\t"

        "movq   1(%1), %%mm4            \n\t"

        "movq   %%mm0, %%mm1            \n\t"

        "movq   %%mm4, %%mm5            \n\t"

        "punpcklbw %%mm7, %%mm0         \n\t"

        "punpcklbw %%mm7, %%mm4         \n\t"

        "punpckhbw %%mm7, %%mm1         \n\t"

        "punpckhbw %%mm7, %%mm5         \n\t"

        "paddusw %%mm0, %%mm4           \n\t"

        "paddusw %%mm1, %%mm5           \n\t"

        "xor    %%"REG_a", %%"REG_a"    \n\t"

        "add    %3, %1                  \n\t"

        ".p2align 3                     \n\t"

        "1:                             \n\t"

        "movq   (%1, %%"REG_a"), %%mm0  \n\t"

        "movq   1(%1, %%"REG_a"), %%mm2 \n\t"

        "movq   %%mm0, %%mm1            \n\t"

        "movq   %%mm2, %%mm3            \n\t"

        "punpcklbw %%mm7, %%mm0         \n\t"

        "punpcklbw %%mm7, %%mm2         \n\t"

        "punpckhbw %%mm7, %%mm1         \n\t"

        "punpckhbw %%mm7, %%mm3         \n\t"

        "paddusw %%mm2, %%mm0           \n\t"

        "paddusw %%mm3, %%mm1           \n\t"

        "paddusw %%mm6, %%mm4           \n\t"

        "paddusw %%mm6, %%mm5           \n\t"

        "paddusw %%mm0, %%mm4           \n\t"

        "paddusw %%mm1, %%mm5           \n\t"

        "psrlw  $2, %%mm4               \n\t"

        "psrlw  $2, %%mm5               \n\t"

        "packuswb  %%mm5, %%mm4         \n\t"

        "movq   %%mm4, (%2, %%"REG_a")  \n\t"

        "add    %3, %%"REG_a"           \n\t"



        "movq   (%1, %%"REG_a"), %%mm2  \n\t" <comment type="line" pos:start="81:47" pos:end="81:66">// 0 &lt;-&gt; 2   1 &lt;-&gt; 3</comment>

        "movq   1(%1, %%"REG_a"), %%mm4 \n\t"

        "movq   %%mm2, %%mm3            \n\t"

        "movq   %%mm4, %%mm5            \n\t"

        "punpcklbw %%mm7, %%mm2         \n\t"

        "punpcklbw %%mm7, %%mm4         \n\t"

        "punpckhbw %%mm7, %%mm3         \n\t"

        "punpckhbw %%mm7, %%mm5         \n\t"

        "paddusw %%mm2, %%mm4           \n\t"

        "paddusw %%mm3, %%mm5           \n\t"

        "paddusw %%mm6, %%mm0           \n\t"

        "paddusw %%mm6, %%mm1           \n\t"

        "paddusw %%mm4, %%mm0           \n\t"

        "paddusw %%mm5, %%mm1           \n\t"

        "psrlw  $2, %%mm0               \n\t"

        "psrlw  $2, %%mm1               \n\t"

        "packuswb  %%mm1, %%mm0         \n\t"

        "movq   %%mm0, (%2, %%"REG_a")  \n\t"

        "add    %3, %%"REG_a"           \n\t"



        "subl   $2, %0                  \n\t"

        "jnz    1b                      \n\t"

        :"+g"(h), "+S"(pixels)

        :"D"(block), "r"((x86_reg)line_size)

        :REG_a, "memory");</asm>

</block_content>}</block></decl></decl_stmt>
</unit>
