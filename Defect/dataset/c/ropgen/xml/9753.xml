<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9753.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:21">main_loop</name><parameter_list pos:start="1:22" pos:end="1:27">(<parameter pos:start="1:23" pos:end="1:26"><decl pos:start="1:23" pos:end="1:26"><type pos:start="1:23" pos:end="1:26"><name pos:start="1:23" pos:end="1:26">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="107:1">{<block_content pos:start="5:5" pos:end="105:22">

    <decl_stmt pos:start="5:5" pos:end="10:0"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">r</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="9:1" pos:end="9:22">#<cpp:directive pos:start="9:2" pos:end="9:6">ifdef</cpp:directive> <name pos:start="9:8" pos:end="9:22">CONFIG_IOTHREAD</name></cpp:ifdef>

    <expr_stmt pos:start="11:5" pos:end="11:26"><expr pos:start="11:5" pos:end="11:25"><name pos:start="11:5" pos:end="11:21">qemu_system_ready</name> <operator pos:start="11:23" pos:end="11:23">=</operator> <literal type="number" pos:start="11:25" pos:end="11:25">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="16:0"><expr pos:start="13:5" pos:end="13:42"><call pos:start="13:5" pos:end="13:42"><name pos:start="13:5" pos:end="13:23">qemu_cond_broadcast</name><argument_list pos:start="13:24" pos:end="13:42">(<argument pos:start="13:25" pos:end="13:41"><expr pos:start="13:25" pos:end="13:41"><operator pos:start="13:25" pos:end="13:25">&amp;</operator><name pos:start="13:26" pos:end="13:41">qemu_system_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="15:1" pos:end="15:6">#<cpp:directive pos:start="15:2" pos:end="15:6">endif</cpp:directive></cpp:endif>



    <for pos:start="19:5" pos:end="103:5">for <control pos:start="19:9" pos:end="19:12">(<init pos:start="19:10" pos:end="19:10">;</init><condition pos:start="19:11" pos:end="19:11">;</condition><incr/>)</control> <block pos:start="19:14" pos:end="103:5">{<block_content pos:start="21:9" pos:end="101:9">

        <do pos:start="21:9" pos:end="49:31">do <block pos:start="21:12" pos:end="49:9">{<block_content pos:start="25:13" pos:end="48:0">

<cpp:ifdef pos:start="23:1" pos:end="23:22">#<cpp:directive pos:start="23:2" pos:end="23:6">ifdef</cpp:directive> <name pos:start="23:8" pos:end="23:22">CONFIG_PROFILER</name></cpp:ifdef>

            <decl_stmt pos:start="25:13" pos:end="30:0"><decl pos:start="25:13" pos:end="25:22"><type pos:start="25:13" pos:end="25:19"><name pos:start="25:13" pos:end="25:19">int64_t</name></type> <name pos:start="25:21" pos:end="25:22">ti</name></decl>;</decl_stmt>

<cpp:endif pos:start="27:1" pos:end="27:6">#<cpp:directive pos:start="27:2" pos:end="27:6">endif</cpp:directive></cpp:endif>

<cpp:ifndef pos:start="29:1" pos:end="29:23">#<cpp:directive pos:start="29:2" pos:end="29:7">ifndef</cpp:directive> <name pos:start="29:9" pos:end="29:23">CONFIG_IOTHREAD</name></cpp:ifndef>

            <expr_stmt pos:start="31:13" pos:end="36:0"><expr pos:start="31:13" pos:end="31:26"><call pos:start="31:13" pos:end="31:26"><name pos:start="31:13" pos:end="31:24">tcg_cpu_exec</name><argument_list pos:start="31:25" pos:end="31:26">()</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="33:1" pos:end="33:6">#<cpp:directive pos:start="33:2" pos:end="33:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="35:1" pos:end="35:22">#<cpp:directive pos:start="35:2" pos:end="35:6">ifdef</cpp:directive> <name pos:start="35:8" pos:end="35:22">CONFIG_PROFILER</name></cpp:ifdef>

            <expr_stmt pos:start="37:13" pos:end="40:0"><expr pos:start="37:13" pos:end="37:35"><name pos:start="37:13" pos:end="37:14">ti</name> <operator pos:start="37:16" pos:end="37:16">=</operator> <call pos:start="37:18" pos:end="37:35"><name pos:start="37:18" pos:end="37:33">profile_getclock</name><argument_list pos:start="37:34" pos:end="37:35">()</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="39:1" pos:end="39:6">#<cpp:directive pos:start="39:2" pos:end="39:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="41:13" pos:end="44:0"><expr pos:start="41:13" pos:end="41:52"><call pos:start="41:13" pos:end="41:52"><name pos:start="41:13" pos:end="41:26">main_loop_wait</name><argument_list pos:start="41:27" pos:end="41:52">(<argument pos:start="41:28" pos:end="41:51"><expr pos:start="41:28" pos:end="41:51"><call pos:start="41:28" pos:end="41:51"><name pos:start="41:28" pos:end="41:49">qemu_calculate_timeout</name><argument_list pos:start="41:50" pos:end="41:51">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="43:1" pos:end="43:22">#<cpp:directive pos:start="43:2" pos:end="43:6">ifdef</cpp:directive> <name pos:start="43:8" pos:end="43:22">CONFIG_PROFILER</name></cpp:ifdef>

            <expr_stmt pos:start="45:13" pos:end="48:0"><expr pos:start="45:13" pos:end="45:47"><name pos:start="45:13" pos:end="45:20">dev_time</name> <operator pos:start="45:22" pos:end="45:23">+=</operator> <call pos:start="45:25" pos:end="45:42"><name pos:start="45:25" pos:end="45:40">profile_getclock</name><argument_list pos:start="45:41" pos:end="45:42">()</argument_list></call> <operator pos:start="45:44" pos:end="45:44">-</operator> <name pos:start="45:46" pos:end="45:47">ti</name></expr>;</expr_stmt>

<cpp:endif pos:start="47:1" pos:end="47:6">#<cpp:directive pos:start="47:2" pos:end="47:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block> while <condition pos:start="49:17" pos:end="49:30">(<expr pos:start="49:18" pos:end="49:29"><call pos:start="49:18" pos:end="49:29"><name pos:start="49:18" pos:end="49:27">vm_can_run</name><argument_list pos:start="49:28" pos:end="49:29">()</argument_list></call></expr>)</condition>;</do>



        <if_stmt pos:start="53:9" pos:end="59:9"><if pos:start="53:9" pos:end="59:9">if <condition pos:start="53:12" pos:end="53:35">(<expr pos:start="53:13" pos:end="53:34"><call pos:start="53:13" pos:end="53:34"><name pos:start="53:13" pos:end="53:32">qemu_debug_requested</name><argument_list pos:start="53:33" pos:end="53:34">()</argument_list></call></expr>)</condition> <block pos:start="53:37" pos:end="59:9">{<block_content pos:start="55:13" pos:end="57:32">

            <expr_stmt pos:start="55:13" pos:end="55:55"><expr pos:start="55:13" pos:end="55:54"><call pos:start="55:13" pos:end="55:54"><name pos:start="55:13" pos:end="55:34">monitor_protocol_event</name><argument_list pos:start="55:35" pos:end="55:54">(<argument pos:start="55:36" pos:end="55:47"><expr pos:start="55:36" pos:end="55:47"><name pos:start="55:36" pos:end="55:47">QEVENT_DEBUG</name></expr></argument>, <argument pos:start="55:50" pos:end="55:53"><expr pos:start="55:50" pos:end="55:53"><name pos:start="55:50" pos:end="55:53">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:32"><expr pos:start="57:13" pos:end="57:31"><call pos:start="57:13" pos:end="57:31"><name pos:start="57:13" pos:end="57:19">vm_stop</name><argument_list pos:start="57:20" pos:end="57:31">(<argument pos:start="57:21" pos:end="57:30"><expr pos:start="57:21" pos:end="57:30"><name pos:start="57:21" pos:end="57:30">EXCP_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="61:9" pos:end="75:9"><if pos:start="61:9" pos:end="75:9">if <condition pos:start="61:12" pos:end="61:38">(<expr pos:start="61:13" pos:end="61:37"><call pos:start="61:13" pos:end="61:37"><name pos:start="61:13" pos:end="61:35">qemu_shutdown_requested</name><argument_list pos:start="61:36" pos:end="61:37">()</argument_list></call></expr>)</condition> <block pos:start="61:40" pos:end="75:9">{<block_content pos:start="63:13" pos:end="73:22">

            <expr_stmt pos:start="63:13" pos:end="63:58"><expr pos:start="63:13" pos:end="63:57"><call pos:start="63:13" pos:end="63:57"><name pos:start="63:13" pos:end="63:34">monitor_protocol_event</name><argument_list pos:start="63:35" pos:end="63:57">(<argument pos:start="63:36" pos:end="63:50"><expr pos:start="63:36" pos:end="63:50"><name pos:start="63:36" pos:end="63:50">QEVENT_SHUTDOWN</name></expr></argument>, <argument pos:start="63:53" pos:end="63:56"><expr pos:start="63:53" pos:end="63:56"><name pos:start="63:53" pos:end="63:56">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="65:13" pos:end="73:22"><if pos:start="65:13" pos:end="71:13">if <condition pos:start="65:16" pos:end="65:28">(<expr pos:start="65:17" pos:end="65:27"><name pos:start="65:17" pos:end="65:27">no_shutdown</name></expr>)</condition> <block pos:start="65:30" pos:end="71:13">{<block_content pos:start="67:17" pos:end="69:32">

                <expr_stmt pos:start="67:17" pos:end="67:27"><expr pos:start="67:17" pos:end="67:26"><call pos:start="67:17" pos:end="67:26"><name pos:start="67:17" pos:end="67:23">vm_stop</name><argument_list pos:start="67:24" pos:end="67:26">(<argument pos:start="67:25" pos:end="67:25"><expr pos:start="67:25" pos:end="67:25"><literal type="number" pos:start="67:25" pos:end="67:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="69:17" pos:end="69:32"><expr pos:start="69:17" pos:end="69:31"><name pos:start="69:17" pos:end="69:27">no_shutdown</name> <operator pos:start="69:29" pos:end="69:29">=</operator> <literal type="number" pos:start="69:31" pos:end="69:31">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="71:15" pos:end="73:22">else<block type="pseudo" pos:start="73:17" pos:end="73:22"><block_content pos:start="73:17" pos:end="73:22">

                <break pos:start="73:17" pos:end="73:22">break;</break></block_content></block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="77:9" pos:end="87:9"><if pos:start="77:9" pos:end="87:9">if <condition pos:start="77:12" pos:end="77:35">(<expr pos:start="77:13" pos:end="77:34"><call pos:start="77:13" pos:end="77:34"><name pos:start="77:13" pos:end="77:32">qemu_reset_requested</name><argument_list pos:start="77:33" pos:end="77:34">()</argument_list></call></expr>)</condition> <block pos:start="77:37" pos:end="87:9">{<block_content pos:start="79:13" pos:end="85:31">

            <expr_stmt pos:start="79:13" pos:end="79:55"><expr pos:start="79:13" pos:end="79:54"><call pos:start="79:13" pos:end="79:54"><name pos:start="79:13" pos:end="79:34">monitor_protocol_event</name><argument_list pos:start="79:35" pos:end="79:54">(<argument pos:start="79:36" pos:end="79:47"><expr pos:start="79:36" pos:end="79:47"><name pos:start="79:36" pos:end="79:47">QEVENT_RESET</name></expr></argument>, <argument pos:start="79:50" pos:end="79:53"><expr pos:start="79:50" pos:end="79:53"><name pos:start="79:50" pos:end="79:53">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:30"><expr pos:start="81:13" pos:end="81:29"><call pos:start="81:13" pos:end="81:29"><name pos:start="81:13" pos:end="81:27">pause_all_vcpus</name><argument_list pos:start="81:28" pos:end="81:29">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:32"><expr pos:start="83:13" pos:end="83:31"><call pos:start="83:13" pos:end="83:31"><name pos:start="83:13" pos:end="83:29">qemu_system_reset</name><argument_list pos:start="83:30" pos:end="83:31">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:31"><expr pos:start="85:13" pos:end="85:30"><call pos:start="85:13" pos:end="85:30"><name pos:start="85:13" pos:end="85:28">resume_all_vcpus</name><argument_list pos:start="85:29" pos:end="85:30">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="89:9" pos:end="95:9"><if pos:start="89:9" pos:end="95:9">if <condition pos:start="89:12" pos:end="89:39">(<expr pos:start="89:13" pos:end="89:38"><call pos:start="89:13" pos:end="89:38"><name pos:start="89:13" pos:end="89:36">qemu_powerdown_requested</name><argument_list pos:start="89:37" pos:end="89:38">()</argument_list></call></expr>)</condition> <block pos:start="89:41" pos:end="95:9">{<block_content pos:start="91:13" pos:end="93:50">

            <expr_stmt pos:start="91:13" pos:end="91:59"><expr pos:start="91:13" pos:end="91:58"><call pos:start="91:13" pos:end="91:58"><name pos:start="91:13" pos:end="91:34">monitor_protocol_event</name><argument_list pos:start="91:35" pos:end="91:58">(<argument pos:start="91:36" pos:end="91:51"><expr pos:start="91:36" pos:end="91:51"><name pos:start="91:36" pos:end="91:51">QEVENT_POWERDOWN</name></expr></argument>, <argument pos:start="91:54" pos:end="91:57"><expr pos:start="91:54" pos:end="91:57"><name pos:start="91:54" pos:end="91:57">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:50"><expr pos:start="93:13" pos:end="93:49"><call pos:start="93:13" pos:end="93:49"><name pos:start="93:13" pos:end="93:26">qemu_irq_raise</name><argument_list pos:start="93:27" pos:end="93:49">(<argument pos:start="93:28" pos:end="93:48"><expr pos:start="93:28" pos:end="93:48"><name pos:start="93:28" pos:end="93:48">qemu_system_powerdown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="97:9" pos:end="101:9"><if pos:start="97:9" pos:end="101:9">if <condition pos:start="97:12" pos:end="97:42">(<expr pos:start="97:13" pos:end="97:41"><operator pos:start="97:13" pos:end="97:13">(</operator><name pos:start="97:14" pos:end="97:14">r</name> <operator pos:start="97:16" pos:end="97:16">=</operator> <call pos:start="97:18" pos:end="97:40"><name pos:start="97:18" pos:end="97:38">qemu_vmstop_requested</name><argument_list pos:start="97:39" pos:end="97:40">()</argument_list></call><operator pos:start="97:41" pos:end="97:41">)</operator></expr>)</condition> <block pos:start="97:44" pos:end="101:9">{<block_content pos:start="99:13" pos:end="99:23">

            <expr_stmt pos:start="99:13" pos:end="99:23"><expr pos:start="99:13" pos:end="99:22"><call pos:start="99:13" pos:end="99:22"><name pos:start="99:13" pos:end="99:19">vm_stop</name><argument_list pos:start="99:20" pos:end="99:22">(<argument pos:start="99:21" pos:end="99:21"><expr pos:start="99:21" pos:end="99:21"><name pos:start="99:21" pos:end="99:21">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="105:5" pos:end="105:22"><expr pos:start="105:5" pos:end="105:21"><call pos:start="105:5" pos:end="105:21"><name pos:start="105:5" pos:end="105:19">pause_all_vcpus</name><argument_list pos:start="105:20" pos:end="105:21">()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
