<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16636.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">exif_decode_tag</name><parameter_list pos:start="1:27" pos:end="3:62">(<parameter pos:start="1:28" pos:end="1:48"><decl pos:start="1:28" pos:end="1:48"><type pos:start="1:28" pos:end="1:48"><name pos:start="1:28" pos:end="1:41">AVCodecContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:48">avctx</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:72"><decl pos:start="1:51" pos:end="1:72"><type pos:start="1:51" pos:end="1:72"><name pos:start="1:51" pos:end="1:64">GetByteContext</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:72">gbytes</name></decl></parameter>, <parameter pos:start="1:75" pos:end="1:80"><decl pos:start="1:75" pos:end="1:80"><type pos:start="1:75" pos:end="1:80"><name pos:start="1:75" pos:end="1:77">int</name></type> <name pos:start="1:79" pos:end="1:80">le</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:36"><decl pos:start="3:28" pos:end="3:36"><type pos:start="3:28" pos:end="3:36"><name pos:start="3:28" pos:end="3:30">int</name></type> <name pos:start="3:32" pos:end="3:36">depth</name></decl></parameter>, <parameter pos:start="3:39" pos:end="3:61"><decl pos:start="3:39" pos:end="3:61"><type pos:start="3:39" pos:end="3:61"><name pos:start="3:39" pos:end="3:50">AVDictionary</name> <modifier pos:start="3:52" pos:end="3:52">*</modifier><modifier pos:start="3:53" pos:end="3:53">*</modifier></type><name pos:start="3:54" pos:end="3:61">metadata</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="93:1">{<block_content pos:start="7:5" pos:end="91:15">

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>, <decl pos:start="7:14" pos:end="7:20"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:14" pos:end="7:20">cur_pos</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">unsigned</name></type> <name pos:start="9:14" pos:end="9:15">id</name></decl>, <decl pos:start="9:18" pos:end="9:22"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:18" pos:end="9:22">count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:8">enum</name> <name pos:start="11:10" pos:end="11:18">TiffTypes</name></name></type> <name pos:start="11:20" pos:end="11:23">type</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:18">(<expr pos:start="15:9" pos:end="15:17"><name pos:start="15:9" pos:end="15:13">depth</name> <operator pos:start="15:15" pos:end="15:15">&gt;</operator> <literal type="number" pos:start="15:17" pos:end="15:17">2</literal></expr>)</condition> <block pos:start="15:20" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:17">

        <return pos:start="17:9" pos:end="17:17">return <expr pos:start="17:16" pos:end="17:16"><literal type="number" pos:start="17:16" pos:end="17:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:59"><expr pos:start="23:5" pos:end="23:58"><call pos:start="23:5" pos:end="23:58"><name pos:start="23:5" pos:end="23:16">ff_tread_tag</name><argument_list pos:start="23:17" pos:end="23:58">(<argument pos:start="23:18" pos:end="23:23"><expr pos:start="23:18" pos:end="23:23"><name pos:start="23:18" pos:end="23:23">gbytes</name></expr></argument>, <argument pos:start="23:26" pos:end="23:27"><expr pos:start="23:26" pos:end="23:27"><name pos:start="23:26" pos:end="23:27">le</name></expr></argument>, <argument pos:start="23:30" pos:end="23:32"><expr pos:start="23:30" pos:end="23:32"><operator pos:start="23:30" pos:end="23:30">&amp;</operator><name pos:start="23:31" pos:end="23:32">id</name></expr></argument>, <argument pos:start="23:35" pos:end="23:39"><expr pos:start="23:35" pos:end="23:39"><operator pos:start="23:35" pos:end="23:35">&amp;</operator><name pos:start="23:36" pos:end="23:39">type</name></expr></argument>, <argument pos:start="23:42" pos:end="23:47"><expr pos:start="23:42" pos:end="23:47"><operator pos:start="23:42" pos:end="23:42">&amp;</operator><name pos:start="23:43" pos:end="23:47">count</name></expr></argument>, <argument pos:start="23:50" pos:end="23:57"><expr pos:start="23:50" pos:end="23:57"><operator pos:start="23:50" pos:end="23:50">&amp;</operator><name pos:start="23:51" pos:end="23:57">cur_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:34">(<expr pos:start="27:9" pos:end="27:33"><operator pos:start="27:9" pos:end="27:9">!</operator><call pos:start="27:10" pos:end="27:33"><name pos:start="27:10" pos:end="27:25">bytestream2_tell</name><argument_list pos:start="27:26" pos:end="27:33">(<argument pos:start="27:27" pos:end="27:32"><expr pos:start="27:27" pos:end="27:32"><name pos:start="27:27" pos:end="27:32">gbytes</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="27:36" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:17">

        <expr_stmt pos:start="29:9" pos:end="29:52"><expr pos:start="29:9" pos:end="29:51"><call pos:start="29:9" pos:end="29:51"><name pos:start="29:9" pos:end="29:24">bytestream2_seek</name><argument_list pos:start="29:25" pos:end="29:51">(<argument pos:start="29:26" pos:end="29:31"><expr pos:start="29:26" pos:end="29:31"><name pos:start="29:26" pos:end="29:31">gbytes</name></expr></argument>, <argument pos:start="29:34" pos:end="29:40"><expr pos:start="29:34" pos:end="29:40"><name pos:start="29:34" pos:end="29:40">cur_pos</name></expr></argument>, <argument pos:start="29:43" pos:end="29:50"><expr pos:start="29:43" pos:end="29:50"><name pos:start="29:43" pos:end="29:50">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:17">return <expr pos:start="31:16" pos:end="31:16"><literal type="number" pos:start="31:16" pos:end="31:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="37:5" pos:end="37:44">// read count values and add it metadata</comment>

    <comment type="line" pos:start="39:5" pos:end="39:46">// store metadata or proceed with next IFD</comment>

    <expr_stmt pos:start="41:5" pos:end="41:25"><expr pos:start="41:5" pos:end="41:24"><name pos:start="41:5" pos:end="41:7">ret</name> <operator pos:start="41:9" pos:end="41:9">=</operator> <call pos:start="41:11" pos:end="41:24"><name pos:start="41:11" pos:end="41:20">ff_tis_ifd</name><argument_list pos:start="41:21" pos:end="41:24">(<argument pos:start="41:22" pos:end="41:23"><expr pos:start="41:22" pos:end="41:23"><name pos:start="41:22" pos:end="41:23">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="83:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:12">(<expr pos:start="43:9" pos:end="43:11"><name pos:start="43:9" pos:end="43:11">ret</name></expr>)</condition> <block pos:start="43:14" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:77">

        <expr_stmt pos:start="45:9" pos:end="45:77"><expr pos:start="45:9" pos:end="45:76"><name pos:start="45:9" pos:end="45:11">ret</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <call pos:start="45:15" pos:end="45:76"><name pos:start="45:15" pos:end="45:36">avpriv_exif_decode_ifd</name><argument_list pos:start="45:37" pos:end="45:76">(<argument pos:start="45:38" pos:end="45:42"><expr pos:start="45:38" pos:end="45:42"><name pos:start="45:38" pos:end="45:42">avctx</name></expr></argument>, <argument pos:start="45:45" pos:end="45:50"><expr pos:start="45:45" pos:end="45:50"><name pos:start="45:45" pos:end="45:50">gbytes</name></expr></argument>, <argument pos:start="45:53" pos:end="45:54"><expr pos:start="45:53" pos:end="45:54"><name pos:start="45:53" pos:end="45:54">le</name></expr></argument>, <argument pos:start="45:57" pos:end="45:65"><expr pos:start="45:57" pos:end="45:65"><name pos:start="45:57" pos:end="45:61">depth</name> <operator pos:start="45:63" pos:end="45:63">+</operator> <literal type="number" pos:start="45:65" pos:end="45:65">1</literal></expr></argument>, <argument pos:start="45:68" pos:end="45:75"><expr pos:start="45:68" pos:end="45:75"><name pos:start="45:68" pos:end="45:75">metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="47:7" pos:end="83:5">else <block pos:start="47:12" pos:end="83:5">{<block_content pos:start="49:9" pos:end="81:9">

        <decl_stmt pos:start="49:9" pos:end="49:49"><decl pos:start="49:9" pos:end="49:48"><type pos:start="49:9" pos:end="49:20"><specifier pos:start="49:9" pos:end="49:13">const</specifier> <name pos:start="49:15" pos:end="49:18">char</name> <modifier pos:start="49:20" pos:end="49:20">*</modifier></type><name pos:start="49:21" pos:end="49:24">name</name> <init pos:start="49:26" pos:end="49:48">= <expr pos:start="49:28" pos:end="49:48"><call pos:start="49:28" pos:end="49:48"><name pos:start="49:28" pos:end="49:44">exif_get_tag_name</name><argument_list pos:start="49:45" pos:end="49:48">(<argument pos:start="49:46" pos:end="49:47"><expr pos:start="49:46" pos:end="49:47"><name pos:start="49:46" pos:end="49:47">id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="51:9" pos:end="51:40"><decl pos:start="51:9" pos:end="51:39"><type pos:start="51:9" pos:end="51:14"><name pos:start="51:9" pos:end="51:12">char</name> <modifier pos:start="51:14" pos:end="51:14">*</modifier></type><name pos:start="51:15" pos:end="51:22">use_name</name>   <init pos:start="51:26" pos:end="51:39">= <expr pos:start="51:28" pos:end="51:39"><operator pos:start="51:28" pos:end="51:28">(</operator><name pos:start="51:29" pos:end="51:32">char</name><operator pos:start="51:33" pos:end="51:33">*</operator><operator pos:start="51:34" pos:end="51:34">)</operator> <name pos:start="51:36" pos:end="51:39">name</name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="55:9" pos:end="67:9"><if pos:start="55:9" pos:end="67:9">if <condition pos:start="55:12" pos:end="55:22">(<expr pos:start="55:13" pos:end="55:21"><operator pos:start="55:13" pos:end="55:13">!</operator><name pos:start="55:14" pos:end="55:21">use_name</name></expr>)</condition> <block pos:start="55:24" pos:end="67:9">{<block_content pos:start="57:13" pos:end="65:48">

            <expr_stmt pos:start="57:13" pos:end="57:36"><expr pos:start="57:13" pos:end="57:35"><name pos:start="57:13" pos:end="57:20">use_name</name> <operator pos:start="57:22" pos:end="57:22">=</operator> <call pos:start="57:24" pos:end="57:35"><name pos:start="57:24" pos:end="57:32">av_malloc</name><argument_list pos:start="57:33" pos:end="57:35">(<argument pos:start="57:34" pos:end="57:34"><expr pos:start="57:34" pos:end="57:34"><literal type="number" pos:start="57:34" pos:end="57:34">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="59:13" pos:end="63:13"><if pos:start="59:13" pos:end="63:13">if <condition pos:start="59:16" pos:end="59:26">(<expr pos:start="59:17" pos:end="59:25"><operator pos:start="59:17" pos:end="59:17">!</operator><name pos:start="59:18" pos:end="59:25">use_name</name></expr>)</condition> <block pos:start="59:28" pos:end="63:13">{<block_content pos:start="61:17" pos:end="61:39">

                <return pos:start="61:17" pos:end="61:39">return <expr pos:start="61:24" pos:end="61:38"><call pos:start="61:24" pos:end="61:38"><name pos:start="61:24" pos:end="61:30">AVERROR</name><argument_list pos:start="61:31" pos:end="61:38">(<argument pos:start="61:32" pos:end="61:37"><expr pos:start="61:32" pos:end="61:37"><name pos:start="61:32" pos:end="61:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:48"><expr pos:start="65:13" pos:end="65:47"><call pos:start="65:13" pos:end="65:47"><name pos:start="65:13" pos:end="65:20">snprintf</name><argument_list pos:start="65:21" pos:end="65:47">(<argument pos:start="65:22" pos:end="65:29"><expr pos:start="65:22" pos:end="65:29"><name pos:start="65:22" pos:end="65:29">use_name</name></expr></argument>, <argument pos:start="65:32" pos:end="65:32"><expr pos:start="65:32" pos:end="65:32"><literal type="number" pos:start="65:32" pos:end="65:32">7</literal></expr></argument>, <argument pos:start="65:35" pos:end="65:42"><expr pos:start="65:35" pos:end="65:42"><literal type="string" pos:start="65:35" pos:end="65:42">"0x%04X"</literal></expr></argument>, <argument pos:start="65:45" pos:end="65:46"><expr pos:start="65:45" pos:end="65:46"><name pos:start="65:45" pos:end="65:46">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="71:9" pos:end="73:54"><expr pos:start="71:9" pos:end="73:53"><name pos:start="71:9" pos:end="71:11">ret</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <call pos:start="71:15" pos:end="73:53"><name pos:start="71:15" pos:end="71:31">exif_add_metadata</name><argument_list pos:start="71:32" pos:end="73:53">(<argument pos:start="71:33" pos:end="71:37"><expr pos:start="71:33" pos:end="71:37"><name pos:start="71:33" pos:end="71:37">avctx</name></expr></argument>, <argument pos:start="71:40" pos:end="71:44"><expr pos:start="71:40" pos:end="71:44"><name pos:start="71:40" pos:end="71:44">count</name></expr></argument>, <argument pos:start="71:47" pos:end="71:50"><expr pos:start="71:47" pos:end="71:50"><name pos:start="71:47" pos:end="71:50">type</name></expr></argument>, <argument pos:start="71:53" pos:end="71:60"><expr pos:start="71:53" pos:end="71:60"><name pos:start="71:53" pos:end="71:60">use_name</name></expr></argument>, <argument pos:start="71:63" pos:end="71:66"><expr pos:start="71:63" pos:end="71:66"><name pos:start="71:63" pos:end="71:66">NULL</name></expr></argument>,

                                <argument pos:start="73:33" pos:end="73:38"><expr pos:start="73:33" pos:end="73:38"><name pos:start="73:33" pos:end="73:38">gbytes</name></expr></argument>, <argument pos:start="73:41" pos:end="73:42"><expr pos:start="73:41" pos:end="73:42"><name pos:start="73:41" pos:end="73:42">le</name></expr></argument>, <argument pos:start="73:45" pos:end="73:52"><expr pos:start="73:45" pos:end="73:52"><name pos:start="73:45" pos:end="73:52">metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="77:9" pos:end="81:9"><if pos:start="77:9" pos:end="81:9">if <condition pos:start="77:12" pos:end="77:18">(<expr pos:start="77:13" pos:end="77:17"><operator pos:start="77:13" pos:end="77:13">!</operator><name pos:start="77:14" pos:end="77:17">name</name></expr>)</condition> <block pos:start="77:20" pos:end="81:9">{<block_content pos:start="79:13" pos:end="79:32">

            <expr_stmt pos:start="79:13" pos:end="79:32"><expr pos:start="79:13" pos:end="79:31"><call pos:start="79:13" pos:end="79:31"><name pos:start="79:13" pos:end="79:20">av_freep</name><argument_list pos:start="79:21" pos:end="79:31">(<argument pos:start="79:22" pos:end="79:30"><expr pos:start="79:22" pos:end="79:30"><operator pos:start="79:22" pos:end="79:22">&amp;</operator><name pos:start="79:23" pos:end="79:30">use_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:48"><expr pos:start="87:5" pos:end="87:47"><call pos:start="87:5" pos:end="87:47"><name pos:start="87:5" pos:end="87:20">bytestream2_seek</name><argument_list pos:start="87:21" pos:end="87:47">(<argument pos:start="87:22" pos:end="87:27"><expr pos:start="87:22" pos:end="87:27"><name pos:start="87:22" pos:end="87:27">gbytes</name></expr></argument>, <argument pos:start="87:30" pos:end="87:36"><expr pos:start="87:30" pos:end="87:36"><name pos:start="87:30" pos:end="87:36">cur_pos</name></expr></argument>, <argument pos:start="87:39" pos:end="87:46"><expr pos:start="87:39" pos:end="87:46"><name pos:start="87:39" pos:end="87:46">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="91:5" pos:end="91:15">return <expr pos:start="91:12" pos:end="91:14"><name pos:start="91:12" pos:end="91:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
