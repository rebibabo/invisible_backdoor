<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7451.c" pos:tabs="8"><function pos:start="1:1" pos:end="49:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">breakpoint_handler</name><parameter_list pos:start="1:31" pos:end="1:48">(<parameter pos:start="1:32" pos:end="1:47"><decl pos:start="1:32" pos:end="1:47"><type pos:start="1:32" pos:end="1:44"><name pos:start="1:32" pos:end="1:42">CPUX86State</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:47">env</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="49:1">{<block_content pos:start="5:5" pos:end="47:37">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">CPUBreakpoint</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:21">bp</name></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="43:5"><if pos:start="9:5" pos:end="25:5">if <condition pos:start="9:8" pos:end="9:28">(<expr pos:start="9:9" pos:end="9:27"><name pos:start="9:9" pos:end="9:27"><name pos:start="9:9" pos:end="9:11">env</name><operator pos:start="9:12" pos:end="9:13">-&gt;</operator><name pos:start="9:14" pos:end="9:27">watchpoint_hit</name></name></expr>)</condition> <block pos:start="9:30" pos:end="25:5">{<block_content pos:start="11:9" pos:end="23:9">

        <if_stmt pos:start="11:9" pos:end="23:9"><if pos:start="11:9" pos:end="23:9">if <condition pos:start="11:12" pos:end="11:48">(<expr pos:start="11:13" pos:end="11:47"><name pos:start="11:13" pos:end="11:38"><name pos:start="11:13" pos:end="11:15">env</name><operator pos:start="11:16" pos:end="11:17">-&gt;</operator><name pos:start="11:18" pos:end="11:31">watchpoint_hit</name><operator pos:start="11:32" pos:end="11:33">-&gt;</operator><name pos:start="11:34" pos:end="11:38">flags</name></name> <operator pos:start="11:40" pos:end="11:40">&amp;</operator> <name pos:start="11:42" pos:end="11:47">BP_CPU</name></expr>)</condition> <block pos:start="11:50" pos:end="23:9">{<block_content pos:start="13:13" pos:end="21:50">

            <expr_stmt pos:start="13:13" pos:end="13:39"><expr pos:start="13:13" pos:end="13:38"><name pos:start="13:13" pos:end="13:31"><name pos:start="13:13" pos:end="13:15">env</name><operator pos:start="13:16" pos:end="13:17">-&gt;</operator><name pos:start="13:18" pos:end="13:31">watchpoint_hit</name></name> <operator pos:start="13:33" pos:end="13:33">=</operator> <name pos:start="13:35" pos:end="13:38">NULL</name></expr>;</expr_stmt>

            <if_stmt pos:start="15:13" pos:end="21:50"><if pos:start="15:13" pos:end="17:52">if <condition pos:start="15:16" pos:end="15:45">(<expr pos:start="15:17" pos:end="15:44"><call pos:start="15:17" pos:end="15:44"><name pos:start="15:17" pos:end="15:36">check_hw_breakpoints</name><argument_list pos:start="15:37" pos:end="15:44">(<argument pos:start="15:38" pos:end="15:40"><expr pos:start="15:38" pos:end="15:40"><name pos:start="15:38" pos:end="15:40">env</name></expr></argument>, <argument pos:start="15:43" pos:end="15:43"><expr pos:start="15:43" pos:end="15:43"><literal type="number" pos:start="15:43" pos:end="15:43">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="17:17" pos:end="17:52"><block_content pos:start="17:17" pos:end="17:52">

                <expr_stmt pos:start="17:17" pos:end="17:52"><expr pos:start="17:17" pos:end="17:51"><call pos:start="17:17" pos:end="17:51"><name pos:start="17:17" pos:end="17:35">raise_exception_env</name><argument_list pos:start="17:36" pos:end="17:51">(<argument pos:start="17:37" pos:end="17:45"><expr pos:start="17:37" pos:end="17:45"><name pos:start="17:37" pos:end="17:45">EXCP01_DB</name></expr></argument>, <argument pos:start="17:48" pos:end="17:50"><expr pos:start="17:48" pos:end="17:50"><name pos:start="17:48" pos:end="17:50">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="19:13" pos:end="21:50">else<block type="pseudo" pos:start="21:17" pos:end="21:50"><block_content pos:start="21:17" pos:end="21:50">

                <expr_stmt pos:start="21:17" pos:end="21:50"><expr pos:start="21:17" pos:end="21:49"><call pos:start="21:17" pos:end="21:49"><name pos:start="21:17" pos:end="21:38">cpu_resume_from_signal</name><argument_list pos:start="21:39" pos:end="21:49">(<argument pos:start="21:40" pos:end="21:42"><expr pos:start="21:40" pos:end="21:42"><name pos:start="21:40" pos:end="21:42">env</name></expr></argument>, <argument pos:start="21:45" pos:end="21:48"><expr pos:start="21:45" pos:end="21:48"><name pos:start="21:45" pos:end="21:48">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="25:7" pos:end="43:5">else <block pos:start="25:12" pos:end="43:5">{<block_content pos:start="27:9" pos:end="41:13">

        <macro pos:start="27:9" pos:end="27:52"><name pos:start="27:9" pos:end="27:22">QTAILQ_FOREACH</name><argument_list pos:start="27:23" pos:end="27:52">(<argument pos:start="27:24" pos:end="27:25">bp</argument>, <argument pos:start="27:28" pos:end="27:44">&amp;env-&gt;breakpoints</argument>, <argument pos:start="27:47" pos:end="27:51">entry</argument>)</argument_list></macro>

            <if_stmt pos:start="29:13" pos:end="41:13"><if pos:start="29:13" pos:end="41:13">if <condition pos:start="29:16" pos:end="29:35">(<expr pos:start="29:17" pos:end="29:34"><name pos:start="29:17" pos:end="29:22"><name pos:start="29:17" pos:end="29:18">bp</name><operator pos:start="29:19" pos:end="29:20">-&gt;</operator><name pos:start="29:21" pos:end="29:22">pc</name></name> <operator pos:start="29:24" pos:end="29:25">==</operator> <name pos:start="29:27" pos:end="29:34"><name pos:start="29:27" pos:end="29:29">env</name><operator pos:start="29:30" pos:end="29:31">-&gt;</operator><name pos:start="29:32" pos:end="29:34">eip</name></name></expr>)</condition> <block pos:start="29:37" pos:end="41:13">{<block_content pos:start="31:17" pos:end="39:22">

                <if_stmt pos:start="31:17" pos:end="37:17"><if pos:start="31:17" pos:end="37:17">if <condition pos:start="31:20" pos:end="31:39">(<expr pos:start="31:21" pos:end="31:38"><name pos:start="31:21" pos:end="31:29"><name pos:start="31:21" pos:end="31:22">bp</name><operator pos:start="31:23" pos:end="31:24">-&gt;</operator><name pos:start="31:25" pos:end="31:29">flags</name></name> <operator pos:start="31:31" pos:end="31:31">&amp;</operator> <name pos:start="31:33" pos:end="31:38">BP_CPU</name></expr>)</condition> <block pos:start="31:41" pos:end="37:17">{<block_content pos:start="33:21" pos:end="35:56">

                    <expr_stmt pos:start="33:21" pos:end="33:49"><expr pos:start="33:21" pos:end="33:48"><call pos:start="33:21" pos:end="33:48"><name pos:start="33:21" pos:end="33:40">check_hw_breakpoints</name><argument_list pos:start="33:41" pos:end="33:48">(<argument pos:start="33:42" pos:end="33:44"><expr pos:start="33:42" pos:end="33:44"><name pos:start="33:42" pos:end="33:44">env</name></expr></argument>, <argument pos:start="33:47" pos:end="33:47"><expr pos:start="33:47" pos:end="33:47"><literal type="number" pos:start="33:47" pos:end="33:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="35:21" pos:end="35:56"><expr pos:start="35:21" pos:end="35:55"><call pos:start="35:21" pos:end="35:55"><name pos:start="35:21" pos:end="35:39">raise_exception_env</name><argument_list pos:start="35:40" pos:end="35:55">(<argument pos:start="35:41" pos:end="35:49"><expr pos:start="35:41" pos:end="35:49"><name pos:start="35:41" pos:end="35:49">EXCP01_DB</name></expr></argument>, <argument pos:start="35:52" pos:end="35:54"><expr pos:start="35:52" pos:end="35:54"><name pos:start="35:52" pos:end="35:54">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="39:17" pos:end="39:22">break;</break>

            </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="45:5" pos:end="47:37"><if pos:start="45:5" pos:end="47:37">if <condition pos:start="45:8" pos:end="45:32">(<expr pos:start="45:9" pos:end="45:31"><name pos:start="45:9" pos:end="45:31">prev_debug_excp_handler</name></expr>)</condition><block type="pseudo" pos:start="47:9" pos:end="47:37"><block_content pos:start="47:9" pos:end="47:37">

        <expr_stmt pos:start="47:9" pos:end="47:37"><expr pos:start="47:9" pos:end="47:36"><call pos:start="47:9" pos:end="47:36"><name pos:start="47:9" pos:end="47:31">prev_debug_excp_handler</name><argument_list pos:start="47:32" pos:end="47:36">(<argument pos:start="47:33" pos:end="47:35"><expr pos:start="47:33" pos:end="47:35"><name pos:start="47:33" pos:end="47:35">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>
</unit>
