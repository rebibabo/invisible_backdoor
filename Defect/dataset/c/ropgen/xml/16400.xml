<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16400.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">pci_pcnet_init</name><parameter_list pos:start="1:26" pos:end="1:45">(<parameter pos:start="1:27" pos:end="1:44"><decl pos:start="1:27" pos:end="1:44"><type pos:start="1:27" pos:end="1:37"><name pos:start="1:27" pos:end="1:35">PCIDevice</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:44">pci_dev</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="101:1">{<block_content pos:start="5:5" pos:end="99:69">

    <decl_stmt pos:start="5:5" pos:end="5:66"><decl pos:start="5:5" pos:end="5:65"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">PCIPCNetState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">d</name> <init pos:start="5:22" pos:end="5:65">= <expr pos:start="5:24" pos:end="5:65"><call pos:start="5:24" pos:end="5:65"><name pos:start="5:24" pos:end="5:32">DO_UPCAST</name><argument_list pos:start="5:33" pos:end="5:65">(<argument pos:start="5:34" pos:end="5:46"><expr pos:start="5:34" pos:end="5:46"><name pos:start="5:34" pos:end="5:46">PCIPCNetState</name></expr></argument>, <argument pos:start="5:49" pos:end="5:55"><expr pos:start="5:49" pos:end="5:55"><name pos:start="5:49" pos:end="5:55">pci_dev</name></expr></argument>, <argument pos:start="5:58" pos:end="5:64"><expr pos:start="5:58" pos:end="5:64"><name pos:start="5:58" pos:end="5:64">pci_dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">PCNetState</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:17">s</name> <init pos:start="7:19" pos:end="7:29">= <expr pos:start="7:21" pos:end="7:29"><operator pos:start="7:21" pos:end="7:21">&amp;</operator><name pos:start="7:22" pos:end="7:29"><name pos:start="7:22" pos:end="7:22">d</name><operator pos:start="7:23" pos:end="7:24">-&gt;</operator><name pos:start="7:25" pos:end="7:29">state</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="20:0"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:21">pci_conf</name></decl>;</decl_stmt>



<cpp:if pos:start="13:1" pos:end="13:5">#<cpp:directive pos:start="13:2" pos:end="13:3">if</cpp:directive> <expr pos:start="13:5" pos:end="13:5"><literal type="number" pos:start="13:5" pos:end="13:5">0</literal></expr></cpp:if>

    printf("sizeof(RMD)=%d, sizeof(TMD)=%d\n",

        sizeof(struct pcnet_RMD), sizeof(struct pcnet_TMD));

<cpp:endif pos:start="19:1" pos:end="19:6">#<cpp:directive pos:start="19:2" pos:end="19:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="23:5" pos:end="23:31"><expr pos:start="23:5" pos:end="23:30"><name pos:start="23:5" pos:end="23:12">pci_conf</name> <operator pos:start="23:14" pos:end="23:14">=</operator> <name pos:start="23:16" pos:end="23:30"><name pos:start="23:16" pos:end="23:22">pci_dev</name><operator pos:start="23:23" pos:end="23:24">-&gt;</operator><name pos:start="23:25" pos:end="23:30">config</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:58"><expr pos:start="27:5" pos:end="27:57"><call pos:start="27:5" pos:end="27:57"><name pos:start="27:5" pos:end="27:28">pci_config_set_vendor_id</name><argument_list pos:start="27:29" pos:end="27:57">(<argument pos:start="27:30" pos:end="27:37"><expr pos:start="27:30" pos:end="27:37"><name pos:start="27:30" pos:end="27:37">pci_conf</name></expr></argument>, <argument pos:start="27:40" pos:end="27:56"><expr pos:start="27:40" pos:end="27:56"><name pos:start="27:40" pos:end="27:56">PCI_VENDOR_ID_AMD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:64"><expr pos:start="29:5" pos:end="29:63"><call pos:start="29:5" pos:end="29:63"><name pos:start="29:5" pos:end="29:28">pci_config_set_device_id</name><argument_list pos:start="29:29" pos:end="29:63">(<argument pos:start="29:30" pos:end="29:37"><expr pos:start="29:30" pos:end="29:37"><name pos:start="29:30" pos:end="29:37">pci_conf</name></expr></argument>, <argument pos:start="29:40" pos:end="29:62"><expr pos:start="29:40" pos:end="29:62"><name pos:start="29:40" pos:end="29:62">PCI_DEVICE_ID_AMD_LANCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="33:66"><expr pos:start="31:5" pos:end="33:65"><call pos:start="31:5" pos:end="33:65"><name pos:start="31:5" pos:end="31:16">pci_set_word</name><argument_list pos:start="31:17" pos:end="33:65">(<argument pos:start="31:18" pos:end="31:38"><expr pos:start="31:18" pos:end="31:38"><name pos:start="31:18" pos:end="31:25">pci_conf</name> <operator pos:start="31:27" pos:end="31:27">+</operator> <name pos:start="31:29" pos:end="31:38">PCI_STATUS</name></expr></argument>,

                 <argument pos:start="33:18" pos:end="33:64"><expr pos:start="33:18" pos:end="33:64"><name pos:start="33:18" pos:end="33:37">PCI_STATUS_FAST_BACK</name> <operator pos:start="33:39" pos:end="33:39">|</operator> <name pos:start="33:41" pos:end="33:64">PCI_STATUS_DEVSEL_MEDIUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:37"><expr pos:start="35:5" pos:end="35:36"><name pos:start="35:5" pos:end="35:29"><name pos:start="35:5" pos:end="35:12">pci_conf</name><index pos:start="35:13" pos:end="35:29">[<expr pos:start="35:14" pos:end="35:28"><name pos:start="35:14" pos:end="35:28">PCI_REVISION_ID</name></expr>]</index></name> <operator pos:start="35:31" pos:end="35:31">=</operator> <literal type="number" pos:start="35:33" pos:end="35:36">0x10</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:63"><expr pos:start="37:5" pos:end="37:62"><call pos:start="37:5" pos:end="37:62"><name pos:start="37:5" pos:end="37:24">pci_config_set_class</name><argument_list pos:start="37:25" pos:end="37:62">(<argument pos:start="37:26" pos:end="37:33"><expr pos:start="37:26" pos:end="37:33"><name pos:start="37:26" pos:end="37:33">pci_conf</name></expr></argument>, <argument pos:start="37:36" pos:end="37:61"><expr pos:start="37:36" pos:end="37:61"><name pos:start="37:36" pos:end="37:61">PCI_CLASS_NETWORK_ETHERNET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:58"><expr pos:start="41:5" pos:end="41:57"><call pos:start="41:5" pos:end="41:57"><name pos:start="41:5" pos:end="41:16">pci_set_word</name><argument_list pos:start="41:17" pos:end="41:57">(<argument pos:start="41:18" pos:end="41:51"><expr pos:start="41:18" pos:end="41:51"><name pos:start="41:18" pos:end="41:25">pci_conf</name> <operator pos:start="41:27" pos:end="41:27">+</operator> <name pos:start="41:29" pos:end="41:51">PCI_SUBSYSTEM_VENDOR_ID</name></expr></argument>, <argument pos:start="41:54" pos:end="41:56"><expr pos:start="41:54" pos:end="41:56"><literal type="number" pos:start="41:54" pos:end="41:56">0x0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:51"><expr pos:start="43:5" pos:end="43:50"><call pos:start="43:5" pos:end="43:50"><name pos:start="43:5" pos:end="43:16">pci_set_word</name><argument_list pos:start="43:17" pos:end="43:50">(<argument pos:start="43:18" pos:end="43:44"><expr pos:start="43:18" pos:end="43:44"><name pos:start="43:18" pos:end="43:25">pci_conf</name> <operator pos:start="43:27" pos:end="43:27">+</operator> <name pos:start="43:29" pos:end="43:44">PCI_SUBSYSTEM_ID</name></expr></argument>, <argument pos:start="43:47" pos:end="43:49"><expr pos:start="43:47" pos:end="43:49"><literal type="number" pos:start="43:47" pos:end="43:49">0x0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:36"><expr pos:start="47:5" pos:end="47:35"><name pos:start="47:5" pos:end="47:31"><name pos:start="47:5" pos:end="47:12">pci_conf</name><index pos:start="47:13" pos:end="47:31">[<expr pos:start="47:14" pos:end="47:30"><name pos:start="47:14" pos:end="47:30">PCI_INTERRUPT_PIN</name></expr>]</index></name> <operator pos:start="47:33" pos:end="47:33">=</operator> <literal type="number" pos:start="47:35" pos:end="47:35">1</literal></expr>;</expr_stmt> <comment type="line" pos:start="47:38" pos:end="47:55">// interrupt pin 0</comment>

    <expr_stmt pos:start="49:5" pos:end="49:33"><expr pos:start="49:5" pos:end="49:32"><name pos:start="49:5" pos:end="49:25"><name pos:start="49:5" pos:end="49:12">pci_conf</name><index pos:start="49:13" pos:end="49:25">[<expr pos:start="49:14" pos:end="49:24"><name pos:start="49:14" pos:end="49:24">PCI_MIN_GNT</name></expr>]</index></name> <operator pos:start="49:27" pos:end="49:27">=</operator> <literal type="number" pos:start="49:29" pos:end="49:32">0x06</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:33"><expr pos:start="51:5" pos:end="51:32"><name pos:start="51:5" pos:end="51:25"><name pos:start="51:5" pos:end="51:12">pci_conf</name><index pos:start="51:13" pos:end="51:25">[<expr pos:start="51:14" pos:end="51:24"><name pos:start="51:14" pos:end="51:24">PCI_MAX_LAT</name></expr>]</index></name> <operator pos:start="51:27" pos:end="51:27">=</operator> <literal type="number" pos:start="51:29" pos:end="51:32">0xff</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:39">/* Handler for memory-mapped I/O */</comment>

    <expr_stmt pos:start="57:5" pos:end="61:51"><expr pos:start="57:5" pos:end="61:50"><name pos:start="57:5" pos:end="57:17"><name pos:start="57:5" pos:end="57:5">s</name><operator pos:start="57:6" pos:end="57:7">-&gt;</operator><name pos:start="57:8" pos:end="57:17">mmio_index</name></name> <operator pos:start="57:19" pos:end="57:19">=</operator>

      <call pos:start="59:7" pos:end="61:50"><name pos:start="59:7" pos:end="59:28">cpu_register_io_memory</name><argument_list pos:start="59:29" pos:end="61:50">(<argument pos:start="59:30" pos:end="59:44"><expr pos:start="59:30" pos:end="59:44"><name pos:start="59:30" pos:end="59:44">pcnet_mmio_read</name></expr></argument>, <argument pos:start="59:47" pos:end="59:62"><expr pos:start="59:47" pos:end="59:62"><name pos:start="59:47" pos:end="59:62">pcnet_mmio_write</name></expr></argument>, <argument pos:start="59:65" pos:end="59:73"><expr pos:start="59:65" pos:end="59:73"><operator pos:start="59:65" pos:end="59:65">&amp;</operator><name pos:start="59:66" pos:end="59:73"><name pos:start="59:66" pos:end="59:66">d</name><operator pos:start="59:67" pos:end="59:68">-&gt;</operator><name pos:start="59:69" pos:end="59:73">state</name></name></expr></argument>,

                             <argument pos:start="61:30" pos:end="61:49"><expr pos:start="61:30" pos:end="61:49"><name pos:start="61:30" pos:end="61:49">DEVICE_NATIVE_ENDIAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="65:5" pos:end="67:72"><expr pos:start="65:5" pos:end="67:71"><call pos:start="65:5" pos:end="67:71"><name pos:start="65:5" pos:end="65:20">pci_register_bar</name><argument_list pos:start="65:21" pos:end="67:71">(<argument pos:start="65:22" pos:end="65:28"><expr pos:start="65:22" pos:end="65:28"><name pos:start="65:22" pos:end="65:28">pci_dev</name></expr></argument>, <argument pos:start="65:31" pos:end="65:31"><expr pos:start="65:31" pos:end="65:31"><literal type="number" pos:start="65:31" pos:end="65:31">0</literal></expr></argument>, <argument pos:start="65:34" pos:end="65:50"><expr pos:start="65:34" pos:end="65:50"><name pos:start="65:34" pos:end="65:50">PCNET_IOPORT_SIZE</name></expr></argument>,

                           <argument pos:start="67:28" pos:end="67:52"><expr pos:start="67:28" pos:end="67:52"><name pos:start="67:28" pos:end="67:52">PCI_BASE_ADDRESS_SPACE_IO</name></expr></argument>, <argument pos:start="67:55" pos:end="67:70"><expr pos:start="67:55" pos:end="67:70"><name pos:start="67:55" pos:end="67:70">pcnet_ioport_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:78"><expr pos:start="71:5" pos:end="71:77"><call pos:start="71:5" pos:end="71:77"><name pos:start="71:5" pos:end="71:27">pci_register_bar_simple</name><argument_list pos:start="71:28" pos:end="71:77">(<argument pos:start="71:29" pos:end="71:35"><expr pos:start="71:29" pos:end="71:35"><name pos:start="71:29" pos:end="71:35">pci_dev</name></expr></argument>, <argument pos:start="71:38" pos:end="71:38"><expr pos:start="71:38" pos:end="71:38"><literal type="number" pos:start="71:38" pos:end="71:38">1</literal></expr></argument>, <argument pos:start="71:41" pos:end="71:58"><expr pos:start="71:41" pos:end="71:58"><name pos:start="71:41" pos:end="71:58">PCNET_PNPMMIO_SIZE</name></expr></argument>, <argument pos:start="71:61" pos:end="71:61"><expr pos:start="71:61" pos:end="71:61"><literal type="number" pos:start="71:61" pos:end="71:61">0</literal></expr></argument>, <argument pos:start="71:64" pos:end="71:76"><expr pos:start="71:64" pos:end="71:76"><name pos:start="71:64" pos:end="71:76"><name pos:start="71:64" pos:end="71:64">s</name><operator pos:start="71:65" pos:end="71:66">-&gt;</operator><name pos:start="71:67" pos:end="71:76">mmio_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:29"><expr pos:start="75:5" pos:end="75:28"><name pos:start="75:5" pos:end="75:10"><name pos:start="75:5" pos:end="75:5">s</name><operator pos:start="75:6" pos:end="75:7">-&gt;</operator><name pos:start="75:8" pos:end="75:10">irq</name></name> <operator pos:start="75:12" pos:end="75:12">=</operator> <name pos:start="75:14" pos:end="75:28"><name pos:start="75:14" pos:end="75:20">pci_dev</name><operator pos:start="75:21" pos:end="75:22">-&gt;</operator><name pos:start="75:23" pos:end="75:25">irq</name><index pos:start="75:26" pos:end="75:28">[<expr pos:start="75:27" pos:end="75:27"><literal type="number" pos:start="75:27" pos:end="75:27">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:48"><expr pos:start="77:5" pos:end="77:47"><name pos:start="77:5" pos:end="77:20"><name pos:start="77:5" pos:end="77:5">s</name><operator pos:start="77:6" pos:end="77:7">-&gt;</operator><name pos:start="77:8" pos:end="77:20">phys_mem_read</name></name> <operator pos:start="77:22" pos:end="77:22">=</operator> <name pos:start="77:24" pos:end="77:47">pci_physical_memory_read</name></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:50"><expr pos:start="79:5" pos:end="79:49"><name pos:start="79:5" pos:end="79:21"><name pos:start="79:5" pos:end="79:5">s</name><operator pos:start="79:6" pos:end="79:7">-&gt;</operator><name pos:start="79:8" pos:end="79:21">phys_mem_write</name></name> <operator pos:start="79:23" pos:end="79:23">=</operator> <name pos:start="79:25" pos:end="79:49">pci_physical_memory_write</name></expr>;</expr_stmt>



    <if_stmt pos:start="83:5" pos:end="95:5"><if pos:start="83:5" pos:end="95:5">if <condition pos:start="83:8" pos:end="83:34">(<expr pos:start="83:9" pos:end="83:33"><operator pos:start="83:9" pos:end="83:9">!</operator><name pos:start="83:10" pos:end="83:33"><name pos:start="83:10" pos:end="83:16">pci_dev</name><operator pos:start="83:17" pos:end="83:18">-&gt;</operator><name pos:start="83:19" pos:end="83:22">qdev</name><operator pos:start="83:23" pos:end="83:23">.</operator><name pos:start="83:24" pos:end="83:33">hotplugged</name></name></expr>)</condition> <block pos:start="83:36" pos:end="95:5">{<block_content pos:start="85:9" pos:end="93:9">

        <decl_stmt pos:start="85:9" pos:end="85:30"><decl pos:start="85:9" pos:end="85:29"><type pos:start="85:9" pos:end="85:18"><specifier pos:start="85:9" pos:end="85:14">static</specifier> <name pos:start="85:16" pos:end="85:18">int</name></type> <name pos:start="85:20" pos:end="85:25">loaded</name> <init pos:start="85:27" pos:end="85:29">= <expr pos:start="85:29" pos:end="85:29"><literal type="number" pos:start="85:29" pos:end="85:29">0</literal></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="87:9" pos:end="93:9"><if pos:start="87:9" pos:end="93:9">if <condition pos:start="87:12" pos:end="87:20">(<expr pos:start="87:13" pos:end="87:19"><operator pos:start="87:13" pos:end="87:13">!</operator><name pos:start="87:14" pos:end="87:19">loaded</name></expr>)</condition> <block pos:start="87:22" pos:end="93:9">{<block_content pos:start="89:13" pos:end="91:23">

            <expr_stmt pos:start="89:13" pos:end="89:48"><expr pos:start="89:13" pos:end="89:47"><call pos:start="89:13" pos:end="89:47"><name pos:start="89:13" pos:end="89:26">rom_add_option</name><argument_list pos:start="89:27" pos:end="89:47">(<argument pos:start="89:28" pos:end="89:42"><expr pos:start="89:28" pos:end="89:42"><literal type="string" pos:start="89:28" pos:end="89:42">"pxe-pcnet.rom"</literal></expr></argument>, <argument pos:start="89:45" pos:end="89:46"><expr pos:start="89:45" pos:end="89:46"><operator pos:start="89:45" pos:end="89:45">-</operator><literal type="number" pos:start="89:46" pos:end="89:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:23"><expr pos:start="91:13" pos:end="91:22"><name pos:start="91:13" pos:end="91:18">loaded</name> <operator pos:start="91:20" pos:end="91:20">=</operator> <literal type="number" pos:start="91:22" pos:end="91:22">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="99:5" pos:end="99:69">return <expr pos:start="99:12" pos:end="99:68"><call pos:start="99:12" pos:end="99:68"><name pos:start="99:12" pos:end="99:28">pcnet_common_init</name><argument_list pos:start="99:29" pos:end="99:68">(<argument pos:start="99:30" pos:end="99:43"><expr pos:start="99:30" pos:end="99:43"><operator pos:start="99:30" pos:end="99:30">&amp;</operator><name pos:start="99:31" pos:end="99:43"><name pos:start="99:31" pos:end="99:37">pci_dev</name><operator pos:start="99:38" pos:end="99:39">-&gt;</operator><name pos:start="99:40" pos:end="99:43">qdev</name></name></expr></argument>, <argument pos:start="99:46" pos:end="99:46"><expr pos:start="99:46" pos:end="99:46"><name pos:start="99:46" pos:end="99:46">s</name></expr></argument>, <argument pos:start="99:49" pos:end="99:67"><expr pos:start="99:49" pos:end="99:67"><operator pos:start="99:49" pos:end="99:49">&amp;</operator><name pos:start="99:50" pos:end="99:67">net_pci_pcnet_info</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
