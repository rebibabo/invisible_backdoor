<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4866.c" pos:tabs="8"><function pos:start="1:1" pos:end="847:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">http_parse_request</name><parameter_list pos:start="1:30" pos:end="1:45">(<parameter pos:start="1:31" pos:end="1:44"><decl pos:start="1:31" pos:end="1:44"><type pos:start="1:31" pos:end="1:43"><name pos:start="1:31" pos:end="1:41">HTTPContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:44">c</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="847:1">{<block_content pos:start="5:5" pos:end="845:13">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:13"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:12">p1</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:8">enum</name> <name pos:start="9:10" pos:end="9:18">RedirType</name></name></type> <name pos:start="9:20" pos:end="9:29">redir_type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:16"><name pos:start="11:10" pos:end="11:12">cmd</name><index pos:start="11:13" pos:end="11:16">[<expr pos:start="11:14" pos:end="11:15"><literal type="number" pos:start="11:14" pos:end="11:15">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:36"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">char</name></type> <name pos:start="13:10" pos:end="13:19"><name pos:start="13:10" pos:end="13:13">info</name><index pos:start="13:14" pos:end="13:19">[<expr pos:start="13:15" pos:end="13:18"><literal type="number" pos:start="13:15" pos:end="13:18">1024</literal></expr>]</index></name></decl>, <decl pos:start="13:22" pos:end="13:35"><type ref="prev" pos:start="13:5" pos:end="13:8"/><name pos:start="13:22" pos:end="13:35"><name pos:start="13:22" pos:end="13:29">filename</name><index pos:start="13:30" pos:end="13:35">[<expr pos:start="13:31" pos:end="13:34"><literal type="number" pos:start="13:31" pos:end="13:34">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">char</name></type> <name pos:start="15:10" pos:end="15:18"><name pos:start="15:10" pos:end="15:12">url</name><index pos:start="15:13" pos:end="15:18">[<expr pos:start="15:14" pos:end="15:17"><literal type="number" pos:start="15:14" pos:end="15:17">1024</literal></expr>]</index></name></decl>, <decl pos:start="15:21" pos:end="15:22"><type ref="prev" pos:start="15:5" pos:end="15:8"><modifier pos:start="15:21" pos:end="15:21">*</modifier></type><name pos:start="15:22" pos:end="15:22">q</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">char</name></type> <name pos:start="17:10" pos:end="17:21"><name pos:start="17:10" pos:end="17:17">protocol</name><index pos:start="17:18" pos:end="17:21">[<expr pos:start="17:19" pos:end="17:20"><literal type="number" pos:start="17:19" pos:end="17:20">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:19"><decl pos:start="19:5" pos:end="19:18"><type pos:start="19:5" pos:end="19:8"><name pos:start="19:5" pos:end="19:8">char</name></type> <name pos:start="19:10" pos:end="19:18"><name pos:start="19:10" pos:end="19:12">msg</name><index pos:start="19:13" pos:end="19:18">[<expr pos:start="19:14" pos:end="19:17"><literal type="number" pos:start="19:14" pos:end="19:17">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:26"><decl pos:start="21:5" pos:end="21:25"><type pos:start="21:5" pos:end="21:16"><specifier pos:start="21:5" pos:end="21:9">const</specifier> <name pos:start="21:11" pos:end="21:14">char</name> <modifier pos:start="21:16" pos:end="21:16">*</modifier></type><name pos:start="21:17" pos:end="21:25">mime_type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:27"><decl pos:start="23:5" pos:end="23:26"><type pos:start="23:5" pos:end="23:20"><name pos:start="23:5" pos:end="23:18">FFServerStream</name> <modifier pos:start="23:20" pos:end="23:20">*</modifier></type><name pos:start="23:21" pos:end="23:26">stream</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:10"><decl pos:start="25:5" pos:end="25:9"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:21"><decl pos:start="27:5" pos:end="27:20"><type pos:start="27:5" pos:end="27:8"><name pos:start="27:5" pos:end="27:8">char</name></type> <name pos:start="27:10" pos:end="27:20"><name pos:start="27:10" pos:end="27:16">ratebuf</name><index pos:start="27:17" pos:end="27:20">[<expr pos:start="27:18" pos:end="27:19"><literal type="number" pos:start="27:18" pos:end="27:19">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:30"><decl pos:start="29:5" pos:end="29:29"><type pos:start="29:5" pos:end="29:16"><specifier pos:start="29:5" pos:end="29:9">const</specifier> <name pos:start="29:11" pos:end="29:14">char</name> <modifier pos:start="29:16" pos:end="29:16">*</modifier></type><name pos:start="29:17" pos:end="29:25">useragent</name> <init pos:start="29:27" pos:end="29:29">= <expr pos:start="29:29" pos:end="29:29"><literal type="number" pos:start="29:29" pos:end="29:29">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:18"><expr pos:start="33:5" pos:end="33:17"><name pos:start="33:5" pos:end="33:5">p</name> <operator pos:start="33:7" pos:end="33:7">=</operator> <name pos:start="33:9" pos:end="33:17"><name pos:start="33:9" pos:end="33:9">c</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:17">buffer</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:35"><expr pos:start="35:5" pos:end="35:34"><call pos:start="35:5" pos:end="35:34"><name pos:start="35:5" pos:end="35:12">get_word</name><argument_list pos:start="35:13" pos:end="35:34">(<argument pos:start="35:14" pos:end="35:16"><expr pos:start="35:14" pos:end="35:16"><name pos:start="35:14" pos:end="35:16">cmd</name></expr></argument>, <argument pos:start="35:19" pos:end="35:29"><expr pos:start="35:19" pos:end="35:29"><sizeof pos:start="35:19" pos:end="35:29">sizeof<argument_list pos:start="35:25" pos:end="35:29">(<argument pos:start="35:26" pos:end="35:28"><expr pos:start="35:26" pos:end="35:28"><name pos:start="35:26" pos:end="35:28">cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="35:32" pos:end="35:33"><expr pos:start="35:32" pos:end="35:33"><operator pos:start="35:32" pos:end="35:32">&amp;</operator><name pos:start="35:33" pos:end="35:33">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:50"><expr pos:start="37:5" pos:end="37:49"><call pos:start="37:5" pos:end="37:49"><name pos:start="37:5" pos:end="37:14">av_strlcpy</name><argument_list pos:start="37:15" pos:end="37:49">(<argument pos:start="37:16" pos:end="37:24"><expr pos:start="37:16" pos:end="37:24"><name pos:start="37:16" pos:end="37:24"><name pos:start="37:16" pos:end="37:16">c</name><operator pos:start="37:17" pos:end="37:18">-&gt;</operator><name pos:start="37:19" pos:end="37:24">method</name></name></expr></argument>, <argument pos:start="37:27" pos:end="37:29"><expr pos:start="37:27" pos:end="37:29"><name pos:start="37:27" pos:end="37:29">cmd</name></expr></argument>, <argument pos:start="37:32" pos:end="37:48"><expr pos:start="37:32" pos:end="37:48"><sizeof pos:start="37:32" pos:end="37:48">sizeof<argument_list pos:start="37:38" pos:end="37:48">(<argument pos:start="37:39" pos:end="37:47"><expr pos:start="37:39" pos:end="37:47"><name pos:start="37:39" pos:end="37:47"><name pos:start="37:39" pos:end="37:39">c</name><operator pos:start="37:40" pos:end="37:41">-&gt;</operator><name pos:start="37:42" pos:end="37:47">method</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="41:5" pos:end="51:18"><if pos:start="41:5" pos:end="43:20">if <condition pos:start="41:8" pos:end="41:28">(<expr pos:start="41:9" pos:end="41:27"><operator pos:start="41:9" pos:end="41:9">!</operator><call pos:start="41:10" pos:end="41:27"><name pos:start="41:10" pos:end="41:15">strcmp</name><argument_list pos:start="41:16" pos:end="41:27">(<argument pos:start="41:17" pos:end="41:19"><expr pos:start="41:17" pos:end="41:19"><name pos:start="41:17" pos:end="41:19">cmd</name></expr></argument>, <argument pos:start="41:22" pos:end="41:26"><expr pos:start="41:22" pos:end="41:26"><literal type="string" pos:start="41:22" pos:end="41:26">"GET"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="43:9" pos:end="43:20"><block_content pos:start="43:9" pos:end="43:20">

        <expr_stmt pos:start="43:9" pos:end="43:20"><expr pos:start="43:9" pos:end="43:19"><name pos:start="43:9" pos:end="43:15"><name pos:start="43:9" pos:end="43:9">c</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:15">post</name></name> <operator pos:start="43:17" pos:end="43:17">=</operator> <literal type="number" pos:start="43:19" pos:end="43:19">0</literal></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="45:5" pos:end="47:20">else if <condition pos:start="45:13" pos:end="45:34">(<expr pos:start="45:14" pos:end="45:33"><operator pos:start="45:14" pos:end="45:14">!</operator><call pos:start="45:15" pos:end="45:33"><name pos:start="45:15" pos:end="45:20">strcmp</name><argument_list pos:start="45:21" pos:end="45:33">(<argument pos:start="45:22" pos:end="45:24"><expr pos:start="45:22" pos:end="45:24"><name pos:start="45:22" pos:end="45:24">cmd</name></expr></argument>, <argument pos:start="45:27" pos:end="45:32"><expr pos:start="45:27" pos:end="45:32"><literal type="string" pos:start="45:27" pos:end="45:32">"POST"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="47:9" pos:end="47:20"><block_content pos:start="47:9" pos:end="47:20">

        <expr_stmt pos:start="47:9" pos:end="47:20"><expr pos:start="47:9" pos:end="47:19"><name pos:start="47:9" pos:end="47:15"><name pos:start="47:9" pos:end="47:9">c</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:15">post</name></name> <operator pos:start="47:17" pos:end="47:17">=</operator> <literal type="number" pos:start="47:19" pos:end="47:19">1</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="49:5" pos:end="51:18">else<block type="pseudo" pos:start="51:9" pos:end="51:18"><block_content pos:start="51:9" pos:end="51:18">

        <return pos:start="51:9" pos:end="51:18">return <expr pos:start="51:16" pos:end="51:17"><operator pos:start="51:16" pos:end="51:16">-</operator><literal type="number" pos:start="51:17" pos:end="51:17">1</literal></expr>;</return></block_content></block></else></if_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:35"><expr pos:start="55:5" pos:end="55:34"><call pos:start="55:5" pos:end="55:34"><name pos:start="55:5" pos:end="55:12">get_word</name><argument_list pos:start="55:13" pos:end="55:34">(<argument pos:start="55:14" pos:end="55:16"><expr pos:start="55:14" pos:end="55:16"><name pos:start="55:14" pos:end="55:16">url</name></expr></argument>, <argument pos:start="55:19" pos:end="55:29"><expr pos:start="55:19" pos:end="55:29"><sizeof pos:start="55:19" pos:end="55:29">sizeof<argument_list pos:start="55:25" pos:end="55:29">(<argument pos:start="55:26" pos:end="55:28"><expr pos:start="55:26" pos:end="55:28"><name pos:start="55:26" pos:end="55:28">url</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="55:32" pos:end="55:33"><expr pos:start="55:32" pos:end="55:33"><operator pos:start="55:32" pos:end="55:32">&amp;</operator><name pos:start="55:33" pos:end="55:33">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:44"><expr pos:start="57:5" pos:end="57:43"><call pos:start="57:5" pos:end="57:43"><name pos:start="57:5" pos:end="57:14">av_strlcpy</name><argument_list pos:start="57:15" pos:end="57:43">(<argument pos:start="57:16" pos:end="57:21"><expr pos:start="57:16" pos:end="57:21"><name pos:start="57:16" pos:end="57:21"><name pos:start="57:16" pos:end="57:16">c</name><operator pos:start="57:17" pos:end="57:18">-&gt;</operator><name pos:start="57:19" pos:end="57:21">url</name></name></expr></argument>, <argument pos:start="57:24" pos:end="57:26"><expr pos:start="57:24" pos:end="57:26"><name pos:start="57:24" pos:end="57:26">url</name></expr></argument>, <argument pos:start="57:29" pos:end="57:42"><expr pos:start="57:29" pos:end="57:42"><sizeof pos:start="57:29" pos:end="57:42">sizeof<argument_list pos:start="57:35" pos:end="57:42">(<argument pos:start="57:36" pos:end="57:41"><expr pos:start="57:36" pos:end="57:41"><name pos:start="57:36" pos:end="57:41"><name pos:start="57:36" pos:end="57:36">c</name><operator pos:start="57:37" pos:end="57:38">-&gt;</operator><name pos:start="57:39" pos:end="57:41">url</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:60"><expr pos:start="61:5" pos:end="61:59"><call pos:start="61:5" pos:end="61:59"><name pos:start="61:5" pos:end="61:12">get_word</name><argument_list pos:start="61:13" pos:end="61:59">(<argument pos:start="61:14" pos:end="61:21"><expr pos:start="61:14" pos:end="61:21"><name pos:start="61:14" pos:end="61:21">protocol</name></expr></argument>, <argument pos:start="61:24" pos:end="61:39"><expr pos:start="61:24" pos:end="61:39"><sizeof pos:start="61:24" pos:end="61:39">sizeof<argument_list pos:start="61:30" pos:end="61:39">(<argument pos:start="61:31" pos:end="61:38"><expr pos:start="61:31" pos:end="61:38"><name pos:start="61:31" pos:end="61:38">protocol</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="61:42" pos:end="61:58"><expr pos:start="61:42" pos:end="61:58"><operator pos:start="61:42" pos:end="61:42">(</operator><specifier pos:start="61:43" pos:end="61:47">const</specifier> <name pos:start="61:49" pos:end="61:52">char</name> <operator pos:start="61:54" pos:end="61:54">*</operator><operator pos:start="61:55" pos:end="61:55">*</operator><operator pos:start="61:56" pos:end="61:56">)</operator><operator pos:start="61:57" pos:end="61:57">&amp;</operator><name pos:start="61:58" pos:end="61:58">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="65:18"><if pos:start="63:5" pos:end="65:18">if <condition pos:start="63:8" pos:end="63:69">(<expr pos:start="63:9" pos:end="63:68"><call pos:start="63:9" pos:end="63:36"><name pos:start="63:9" pos:end="63:14">strcmp</name><argument_list pos:start="63:15" pos:end="63:36">(<argument pos:start="63:16" pos:end="63:23"><expr pos:start="63:16" pos:end="63:23"><name pos:start="63:16" pos:end="63:23">protocol</name></expr></argument>, <argument pos:start="63:26" pos:end="63:35"><expr pos:start="63:26" pos:end="63:35"><literal type="string" pos:start="63:26" pos:end="63:35">"HTTP/1.0"</literal></expr></argument>)</argument_list></call> <operator pos:start="63:38" pos:end="63:39">&amp;&amp;</operator> <call pos:start="63:41" pos:end="63:68"><name pos:start="63:41" pos:end="63:46">strcmp</name><argument_list pos:start="63:47" pos:end="63:68">(<argument pos:start="63:48" pos:end="63:55"><expr pos:start="63:48" pos:end="63:55"><name pos:start="63:48" pos:end="63:55">protocol</name></expr></argument>, <argument pos:start="63:58" pos:end="63:67"><expr pos:start="63:58" pos:end="63:67"><literal type="string" pos:start="63:58" pos:end="63:67">"HTTP/1.1"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="65:9" pos:end="65:18"><block_content pos:start="65:9" pos:end="65:18">

        <return pos:start="65:9" pos:end="65:18">return <expr pos:start="65:16" pos:end="65:17"><operator pos:start="65:16" pos:end="65:16">-</operator><literal type="number" pos:start="65:17" pos:end="65:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:59"><expr pos:start="69:5" pos:end="69:58"><call pos:start="69:5" pos:end="69:58"><name pos:start="69:5" pos:end="69:14">av_strlcpy</name><argument_list pos:start="69:15" pos:end="69:58">(<argument pos:start="69:16" pos:end="69:26"><expr pos:start="69:16" pos:end="69:26"><name pos:start="69:16" pos:end="69:26"><name pos:start="69:16" pos:end="69:16">c</name><operator pos:start="69:17" pos:end="69:18">-&gt;</operator><name pos:start="69:19" pos:end="69:26">protocol</name></name></expr></argument>, <argument pos:start="69:29" pos:end="69:36"><expr pos:start="69:29" pos:end="69:36"><name pos:start="69:29" pos:end="69:36">protocol</name></expr></argument>, <argument pos:start="69:39" pos:end="69:57"><expr pos:start="69:39" pos:end="69:57"><sizeof pos:start="69:39" pos:end="69:57">sizeof<argument_list pos:start="69:45" pos:end="69:57">(<argument pos:start="69:46" pos:end="69:56"><expr pos:start="69:46" pos:end="69:56"><name pos:start="69:46" pos:end="69:56"><name pos:start="69:46" pos:end="69:46">c</name><operator pos:start="69:47" pos:end="69:48">-&gt;</operator><name pos:start="69:49" pos:end="69:56">protocol</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="73:5" pos:end="75:95"><if pos:start="73:5" pos:end="75:95">if <condition pos:start="73:8" pos:end="73:21">(<expr pos:start="73:9" pos:end="73:20"><name pos:start="73:9" pos:end="73:20"><name pos:start="73:9" pos:end="73:14">config</name><operator pos:start="73:15" pos:end="73:15">.</operator><name pos:start="73:16" pos:end="73:20">debug</name></name></expr>)</condition><block type="pseudo" pos:start="75:9" pos:end="75:95"><block_content pos:start="75:9" pos:end="75:95">

        <expr_stmt pos:start="75:9" pos:end="75:95"><expr pos:start="75:9" pos:end="75:94"><call pos:start="75:9" pos:end="75:94"><name pos:start="75:9" pos:end="75:16">http_log</name><argument_list pos:start="75:17" pos:end="75:94">(<argument pos:start="75:18" pos:end="75:49"><expr pos:start="75:18" pos:end="75:49"><literal type="string" pos:start="75:18" pos:end="75:49">"%s - - New connection: %s %s\n"</literal></expr></argument>, <argument pos:start="75:52" pos:end="75:83"><expr pos:start="75:52" pos:end="75:83"><call pos:start="75:52" pos:end="75:83"><name pos:start="75:52" pos:end="75:60">inet_ntoa</name><argument_list pos:start="75:61" pos:end="75:83">(<argument pos:start="75:62" pos:end="75:82"><expr pos:start="75:62" pos:end="75:82"><name pos:start="75:62" pos:end="75:82"><name pos:start="75:62" pos:end="75:62">c</name><operator pos:start="75:63" pos:end="75:64">-&gt;</operator><name pos:start="75:65" pos:end="75:73">from_addr</name><operator pos:start="75:74" pos:end="75:74">.</operator><name pos:start="75:75" pos:end="75:82">sin_addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="75:86" pos:end="75:88"><expr pos:start="75:86" pos:end="75:88"><name pos:start="75:86" pos:end="75:88">cmd</name></expr></argument>, <argument pos:start="75:91" pos:end="75:93"><expr pos:start="75:91" pos:end="75:93"><name pos:start="75:91" pos:end="75:93">url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="79:5" pos:end="79:71">/* find the filename and the optional info string in the request */</comment>

    <expr_stmt pos:start="81:5" pos:end="81:26"><expr pos:start="81:5" pos:end="81:25"><name pos:start="81:5" pos:end="81:6">p1</name> <operator pos:start="81:8" pos:end="81:8">=</operator> <call pos:start="81:10" pos:end="81:25"><name pos:start="81:10" pos:end="81:15">strchr</name><argument_list pos:start="81:16" pos:end="81:25">(<argument pos:start="81:17" pos:end="81:19"><expr pos:start="81:17" pos:end="81:19"><name pos:start="81:17" pos:end="81:19">url</name></expr></argument>, <argument pos:start="81:22" pos:end="81:24"><expr pos:start="81:22" pos:end="81:24"><literal type="char" pos:start="81:22" pos:end="81:24">'?'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="83:5" pos:end="91:23"><if pos:start="83:5" pos:end="89:5">if <condition pos:start="83:8" pos:end="83:11">(<expr pos:start="83:9" pos:end="83:10"><name pos:start="83:9" pos:end="83:10">p1</name></expr>)</condition> <block pos:start="83:13" pos:end="89:5">{<block_content pos:start="85:9" pos:end="87:19">

        <expr_stmt pos:start="85:9" pos:end="85:43"><expr pos:start="85:9" pos:end="85:42"><call pos:start="85:9" pos:end="85:42"><name pos:start="85:9" pos:end="85:18">av_strlcpy</name><argument_list pos:start="85:19" pos:end="85:42">(<argument pos:start="85:20" pos:end="85:23"><expr pos:start="85:20" pos:end="85:23"><name pos:start="85:20" pos:end="85:23">info</name></expr></argument>, <argument pos:start="85:26" pos:end="85:27"><expr pos:start="85:26" pos:end="85:27"><name pos:start="85:26" pos:end="85:27">p1</name></expr></argument>, <argument pos:start="85:30" pos:end="85:41"><expr pos:start="85:30" pos:end="85:41"><sizeof pos:start="85:30" pos:end="85:41">sizeof<argument_list pos:start="85:36" pos:end="85:41">(<argument pos:start="85:37" pos:end="85:40"><expr pos:start="85:37" pos:end="85:40"><name pos:start="85:37" pos:end="85:40">info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:19"><expr pos:start="87:9" pos:end="87:18"><operator pos:start="87:9" pos:end="87:9">*</operator><name pos:start="87:10" pos:end="87:11">p1</name> <operator pos:start="87:13" pos:end="87:13">=</operator> <literal type="char" pos:start="87:15" pos:end="87:18">'\0'</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="89:7" pos:end="91:23">else<block type="pseudo" pos:start="91:9" pos:end="91:23"><block_content pos:start="91:9" pos:end="91:23">

        <expr_stmt pos:start="91:9" pos:end="91:23"><expr pos:start="91:9" pos:end="91:22"><name pos:start="91:9" pos:end="91:15"><name pos:start="91:9" pos:end="91:12">info</name><index pos:start="91:13" pos:end="91:15">[<expr pos:start="91:14" pos:end="91:14"><literal type="number" pos:start="91:14" pos:end="91:14">0</literal></expr>]</index></name> <operator pos:start="91:17" pos:end="91:17">=</operator> <literal type="char" pos:start="91:19" pos:end="91:22">'\0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:76"><expr pos:start="95:5" pos:end="95:75"><call pos:start="95:5" pos:end="95:75"><name pos:start="95:5" pos:end="95:14">av_strlcpy</name><argument_list pos:start="95:15" pos:end="95:75">(<argument pos:start="95:16" pos:end="95:23"><expr pos:start="95:16" pos:end="95:23"><name pos:start="95:16" pos:end="95:23">filename</name></expr></argument>, <argument pos:start="95:26" pos:end="95:54"><expr pos:start="95:26" pos:end="95:54"><name pos:start="95:26" pos:end="95:28">url</name> <operator pos:start="95:30" pos:end="95:30">+</operator> <operator pos:start="95:32" pos:end="95:32">(</operator><ternary pos:start="95:33" pos:end="95:53"><condition pos:start="95:33" pos:end="95:47"><expr pos:start="95:33" pos:end="95:45"><operator pos:start="95:33" pos:end="95:33">(</operator><operator pos:start="95:34" pos:end="95:34">*</operator><name pos:start="95:35" pos:end="95:37">url</name> <operator pos:start="95:39" pos:end="95:40">==</operator> <literal type="char" pos:start="95:42" pos:end="95:44">'/'</literal><operator pos:start="95:45" pos:end="95:45">)</operator></expr> ?</condition><then pos:start="95:49" pos:end="95:49"> <expr pos:start="95:49" pos:end="95:49"><literal type="number" pos:start="95:49" pos:end="95:49">1</literal></expr> </then><else pos:start="95:51" pos:end="95:53">: <expr pos:start="95:53" pos:end="95:53"><literal type="number" pos:start="95:53" pos:end="95:53">0</literal></expr></else></ternary><operator pos:start="95:54" pos:end="95:54">)</operator></expr></argument>, <argument pos:start="95:57" pos:end="95:74"><expr pos:start="95:57" pos:end="95:74"><sizeof pos:start="95:57" pos:end="95:72">sizeof<argument_list pos:start="95:63" pos:end="95:72">(<argument pos:start="95:64" pos:end="95:71"><expr pos:start="95:64" pos:end="95:71"><name pos:start="95:64" pos:end="95:71">filename</name></expr></argument>)</argument_list></sizeof><operator pos:start="95:73" pos:end="95:73">-</operator><literal type="number" pos:start="95:74" pos:end="95:74">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="99:5" pos:end="123:5">for <control pos:start="99:9" pos:end="99:57">(<init pos:start="99:10" pos:end="99:23"><expr pos:start="99:10" pos:end="99:22"><name pos:start="99:10" pos:end="99:10">p</name> <operator pos:start="99:12" pos:end="99:12">=</operator> <name pos:start="99:14" pos:end="99:22"><name pos:start="99:14" pos:end="99:14">c</name><operator pos:start="99:15" pos:end="99:16">-&gt;</operator><name pos:start="99:17" pos:end="99:22">buffer</name></name></expr>;</init> <condition pos:start="99:25" pos:end="99:55"><expr pos:start="99:25" pos:end="99:54"><operator pos:start="99:25" pos:end="99:25">*</operator><name pos:start="99:26" pos:end="99:26">p</name> <operator pos:start="99:28" pos:end="99:29">&amp;&amp;</operator> <operator pos:start="99:31" pos:end="99:31">*</operator><name pos:start="99:32" pos:end="99:32">p</name> <operator pos:start="99:34" pos:end="99:35">!=</operator> <literal type="char" pos:start="99:37" pos:end="99:40">'\r'</literal> <operator pos:start="99:42" pos:end="99:43">&amp;&amp;</operator> <operator pos:start="99:45" pos:end="99:45">*</operator><name pos:start="99:46" pos:end="99:46">p</name> <operator pos:start="99:48" pos:end="99:49">!=</operator> <literal type="char" pos:start="99:51" pos:end="99:54">'\n'</literal></expr>;</condition> <incr/>)</control> <block pos:start="99:59" pos:end="123:5">{<block_content pos:start="101:9" pos:end="121:12">

        <if_stmt pos:start="101:9" pos:end="111:9"><if pos:start="101:9" pos:end="111:9">if <condition pos:start="101:12" pos:end="101:54">(<expr pos:start="101:13" pos:end="101:53"><call pos:start="101:13" pos:end="101:48"><name pos:start="101:13" pos:end="101:26">av_strncasecmp</name><argument_list pos:start="101:27" pos:end="101:48">(<argument pos:start="101:28" pos:end="101:28"><expr pos:start="101:28" pos:end="101:28"><name pos:start="101:28" pos:end="101:28">p</name></expr></argument>, <argument pos:start="101:31" pos:end="101:43"><expr pos:start="101:31" pos:end="101:43"><literal type="string" pos:start="101:31" pos:end="101:43">"User-Agent:"</literal></expr></argument>, <argument pos:start="101:46" pos:end="101:47"><expr pos:start="101:46" pos:end="101:47"><literal type="number" pos:start="101:46" pos:end="101:47">11</literal></expr></argument>)</argument_list></call> <operator pos:start="101:50" pos:end="101:51">==</operator> <literal type="number" pos:start="101:53" pos:end="101:53">0</literal></expr>)</condition> <block pos:start="101:56" pos:end="111:9">{<block_content pos:start="103:13" pos:end="109:18">

            <expr_stmt pos:start="103:13" pos:end="103:31"><expr pos:start="103:13" pos:end="103:30"><name pos:start="103:13" pos:end="103:21">useragent</name> <operator pos:start="103:23" pos:end="103:23">=</operator> <name pos:start="103:25" pos:end="103:25">p</name> <operator pos:start="103:27" pos:end="103:27">+</operator> <literal type="number" pos:start="103:29" pos:end="103:30">11</literal></expr>;</expr_stmt>

            <if_stmt pos:start="105:13" pos:end="107:28"><if pos:start="105:13" pos:end="107:28">if <condition pos:start="105:16" pos:end="105:75">(<expr pos:start="105:17" pos:end="105:74"><operator pos:start="105:17" pos:end="105:17">*</operator><name pos:start="105:18" pos:end="105:26">useragent</name> <operator pos:start="105:28" pos:end="105:29">&amp;&amp;</operator> <operator pos:start="105:31" pos:end="105:31">*</operator><name pos:start="105:32" pos:end="105:40">useragent</name> <operator pos:start="105:42" pos:end="105:43">!=</operator> <literal type="char" pos:start="105:45" pos:end="105:48">'\n'</literal> <operator pos:start="105:50" pos:end="105:51">&amp;&amp;</operator> <call pos:start="105:53" pos:end="105:74"><name pos:start="105:53" pos:end="105:62">av_isspace</name><argument_list pos:start="105:63" pos:end="105:74">(<argument pos:start="105:64" pos:end="105:73"><expr pos:start="105:64" pos:end="105:73"><operator pos:start="105:64" pos:end="105:64">*</operator><name pos:start="105:65" pos:end="105:73">useragent</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="107:17" pos:end="107:28"><block_content pos:start="107:17" pos:end="107:28">

                <expr_stmt pos:start="107:17" pos:end="107:28"><expr pos:start="107:17" pos:end="107:27"><name pos:start="107:17" pos:end="107:25">useragent</name><operator pos:start="107:26" pos:end="107:27">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <break pos:start="109:13" pos:end="109:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:28"><expr pos:start="113:9" pos:end="113:27"><name pos:start="113:9" pos:end="113:9">p</name> <operator pos:start="113:11" pos:end="113:11">=</operator> <call pos:start="113:13" pos:end="113:27"><name pos:start="113:13" pos:end="113:18">strchr</name><argument_list pos:start="113:19" pos:end="113:27">(<argument pos:start="113:20" pos:end="113:20"><expr pos:start="113:20" pos:end="113:20"><name pos:start="113:20" pos:end="113:20">p</name></expr></argument>, <argument pos:start="113:23" pos:end="113:26"><expr pos:start="113:23" pos:end="113:26"><literal type="char" pos:start="113:23" pos:end="113:26">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="115:9" pos:end="117:18"><if pos:start="115:9" pos:end="117:18">if <condition pos:start="115:12" pos:end="115:15">(<expr pos:start="115:13" pos:end="115:14"><operator pos:start="115:13" pos:end="115:13">!</operator><name pos:start="115:14" pos:end="115:14">p</name></expr>)</condition><block type="pseudo" pos:start="117:13" pos:end="117:18"><block_content pos:start="117:13" pos:end="117:18">

            <break pos:start="117:13" pos:end="117:18">break;</break></block_content></block></if></if_stmt>



        <expr_stmt pos:start="121:9" pos:end="121:12"><expr pos:start="121:9" pos:end="121:11"><name pos:start="121:9" pos:end="121:9">p</name><operator pos:start="121:10" pos:end="121:11">++</operator></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="127:5" pos:end="127:28"><expr pos:start="127:5" pos:end="127:27"><name pos:start="127:5" pos:end="127:14">redir_type</name> <operator pos:start="127:16" pos:end="127:16">=</operator> <name pos:start="127:18" pos:end="127:27">REDIR_NONE</name></expr>;</expr_stmt>

    <if_stmt pos:start="129:5" pos:end="161:5"><if pos:start="129:5" pos:end="135:5">if <condition pos:start="129:8" pos:end="129:38">(<expr pos:start="129:9" pos:end="129:37"><call pos:start="129:9" pos:end="129:37"><name pos:start="129:9" pos:end="129:20">av_match_ext</name><argument_list pos:start="129:21" pos:end="129:37">(<argument pos:start="129:22" pos:end="129:29"><expr pos:start="129:22" pos:end="129:29"><name pos:start="129:22" pos:end="129:29">filename</name></expr></argument>, <argument pos:start="129:32" pos:end="129:36"><expr pos:start="129:32" pos:end="129:36"><literal type="string" pos:start="129:32" pos:end="129:36">"asx"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="129:40" pos:end="135:5">{<block_content pos:start="131:9" pos:end="133:43">

        <expr_stmt pos:start="131:9" pos:end="131:31"><expr pos:start="131:9" pos:end="131:30"><name pos:start="131:9" pos:end="131:18">redir_type</name> <operator pos:start="131:20" pos:end="131:20">=</operator> <name pos:start="131:22" pos:end="131:30">REDIR_ASX</name></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:43"><expr pos:start="133:9" pos:end="133:42"><name pos:start="133:9" pos:end="133:36"><name pos:start="133:9" pos:end="133:16">filename</name><index pos:start="133:17" pos:end="133:36">[<expr pos:start="133:18" pos:end="133:35"><call pos:start="133:18" pos:end="133:33"><name pos:start="133:18" pos:end="133:23">strlen</name><argument_list pos:start="133:24" pos:end="133:33">(<argument pos:start="133:25" pos:end="133:32"><expr pos:start="133:25" pos:end="133:32"><name pos:start="133:25" pos:end="133:32">filename</name></expr></argument>)</argument_list></call><operator pos:start="133:34" pos:end="133:34">-</operator><literal type="number" pos:start="133:35" pos:end="133:35">1</literal></expr>]</index></name> <operator pos:start="133:38" pos:end="133:38">=</operator> <literal type="char" pos:start="133:40" pos:end="133:42">'f'</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="135:7" pos:end="143:5">else if <condition pos:start="135:15" pos:end="137:70">(<expr pos:start="135:16" pos:end="137:69"><call pos:start="135:16" pos:end="135:44"><name pos:start="135:16" pos:end="135:27">av_match_ext</name><argument_list pos:start="135:28" pos:end="135:44">(<argument pos:start="135:29" pos:end="135:36"><expr pos:start="135:29" pos:end="135:36"><name pos:start="135:29" pos:end="135:36">filename</name></expr></argument>, <argument pos:start="135:39" pos:end="135:43"><expr pos:start="135:39" pos:end="135:43"><literal type="string" pos:start="135:39" pos:end="135:43">"asf"</literal></expr></argument>)</argument_list></call> <operator pos:start="135:46" pos:end="135:47">&amp;&amp;</operator>

        <operator pos:start="137:9" pos:end="137:9">(</operator><operator pos:start="137:10" pos:end="137:10">!</operator><name pos:start="137:11" pos:end="137:19">useragent</name> <operator pos:start="137:21" pos:end="137:22">||</operator> <call pos:start="137:24" pos:end="137:63"><name pos:start="137:24" pos:end="137:37">av_strncasecmp</name><argument_list pos:start="137:38" pos:end="137:63">(<argument pos:start="137:39" pos:end="137:47"><expr pos:start="137:39" pos:end="137:47"><name pos:start="137:39" pos:end="137:47">useragent</name></expr></argument>, <argument pos:start="137:50" pos:end="137:59"><expr pos:start="137:50" pos:end="137:59"><literal type="string" pos:start="137:50" pos:end="137:59">"NSPlayer"</literal></expr></argument>, <argument pos:start="137:62" pos:end="137:62"><expr pos:start="137:62" pos:end="137:62"><literal type="number" pos:start="137:62" pos:end="137:62">8</literal></expr></argument>)</argument_list></call> <operator pos:start="137:65" pos:end="137:66">!=</operator> <literal type="number" pos:start="137:68" pos:end="137:68">0</literal><operator pos:start="137:69" pos:end="137:69">)</operator></expr>)</condition> <block pos:start="137:72" pos:end="143:5">{<block_content pos:start="141:9" pos:end="141:31">

        <comment type="block" pos:start="139:9" pos:end="139:72">/* if this isn't WMP or lookalike, return the redirector file */</comment>

        <expr_stmt pos:start="141:9" pos:end="141:31"><expr pos:start="141:9" pos:end="141:30"><name pos:start="141:9" pos:end="141:18">redir_type</name> <operator pos:start="141:20" pos:end="141:20">=</operator> <name pos:start="141:22" pos:end="141:30">REDIR_ASF</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="143:7" pos:end="149:5">else if <condition pos:start="143:15" pos:end="143:49">(<expr pos:start="143:16" pos:end="143:48"><call pos:start="143:16" pos:end="143:48"><name pos:start="143:16" pos:end="143:27">av_match_ext</name><argument_list pos:start="143:28" pos:end="143:48">(<argument pos:start="143:29" pos:end="143:36"><expr pos:start="143:29" pos:end="143:36"><name pos:start="143:29" pos:end="143:36">filename</name></expr></argument>, <argument pos:start="143:39" pos:end="143:47"><expr pos:start="143:39" pos:end="143:47"><literal type="string" pos:start="143:39" pos:end="143:47">"rpm,ram"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="143:51" pos:end="149:5">{<block_content pos:start="145:9" pos:end="147:51">

        <expr_stmt pos:start="145:9" pos:end="145:31"><expr pos:start="145:9" pos:end="145:30"><name pos:start="145:9" pos:end="145:18">redir_type</name> <operator pos:start="145:20" pos:end="145:20">=</operator> <name pos:start="145:22" pos:end="145:30">REDIR_RAM</name></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:51"><expr pos:start="147:9" pos:end="147:50"><call pos:start="147:9" pos:end="147:50"><name pos:start="147:9" pos:end="147:14">strcpy</name><argument_list pos:start="147:15" pos:end="147:50">(<argument pos:start="147:16" pos:end="147:44"><expr pos:start="147:16" pos:end="147:44"><name pos:start="147:16" pos:end="147:23">filename</name> <operator pos:start="147:25" pos:end="147:25">+</operator> <call pos:start="147:27" pos:end="147:42"><name pos:start="147:27" pos:end="147:32">strlen</name><argument_list pos:start="147:33" pos:end="147:42">(<argument pos:start="147:34" pos:end="147:41"><expr pos:start="147:34" pos:end="147:41"><name pos:start="147:34" pos:end="147:41">filename</name></expr></argument>)</argument_list></call><operator pos:start="147:43" pos:end="147:43">-</operator><literal type="number" pos:start="147:44" pos:end="147:44">2</literal></expr></argument>, <argument pos:start="147:47" pos:end="147:49"><expr pos:start="147:47" pos:end="147:49"><literal type="string" pos:start="147:47" pos:end="147:49">"m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="149:7" pos:end="155:5">else if <condition pos:start="149:15" pos:end="149:46">(<expr pos:start="149:16" pos:end="149:45"><call pos:start="149:16" pos:end="149:45"><name pos:start="149:16" pos:end="149:27">av_match_ext</name><argument_list pos:start="149:28" pos:end="149:45">(<argument pos:start="149:29" pos:end="149:36"><expr pos:start="149:29" pos:end="149:36"><name pos:start="149:29" pos:end="149:36">filename</name></expr></argument>, <argument pos:start="149:39" pos:end="149:44"><expr pos:start="149:39" pos:end="149:44"><literal type="string" pos:start="149:39" pos:end="149:44">"rtsp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="149:48" pos:end="155:5">{<block_content pos:start="151:9" pos:end="153:62">

        <expr_stmt pos:start="151:9" pos:end="151:32"><expr pos:start="151:9" pos:end="151:31"><name pos:start="151:9" pos:end="151:18">redir_type</name> <operator pos:start="151:20" pos:end="151:20">=</operator> <name pos:start="151:22" pos:end="151:31">REDIR_RTSP</name></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:62"><expr pos:start="153:9" pos:end="153:61"><call pos:start="153:9" pos:end="153:61"><name pos:start="153:9" pos:end="153:29">compute_real_filename</name><argument_list pos:start="153:30" pos:end="153:61">(<argument pos:start="153:31" pos:end="153:38"><expr pos:start="153:31" pos:end="153:38"><name pos:start="153:31" pos:end="153:38">filename</name></expr></argument>, <argument pos:start="153:41" pos:end="153:60"><expr pos:start="153:41" pos:end="153:60"><sizeof pos:start="153:41" pos:end="153:56">sizeof<argument_list pos:start="153:47" pos:end="153:56">(<argument pos:start="153:48" pos:end="153:55"><expr pos:start="153:48" pos:end="153:55"><name pos:start="153:48" pos:end="153:55">filename</name></expr></argument>)</argument_list></sizeof> <operator pos:start="153:58" pos:end="153:58">-</operator> <literal type="number" pos:start="153:60" pos:end="153:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="155:7" pos:end="161:5">else if <condition pos:start="155:15" pos:end="155:45">(<expr pos:start="155:16" pos:end="155:44"><call pos:start="155:16" pos:end="155:44"><name pos:start="155:16" pos:end="155:27">av_match_ext</name><argument_list pos:start="155:28" pos:end="155:44">(<argument pos:start="155:29" pos:end="155:36"><expr pos:start="155:29" pos:end="155:36"><name pos:start="155:29" pos:end="155:36">filename</name></expr></argument>, <argument pos:start="155:39" pos:end="155:43"><expr pos:start="155:39" pos:end="155:43"><literal type="string" pos:start="155:39" pos:end="155:43">"sdp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="155:47" pos:end="161:5">{<block_content pos:start="157:9" pos:end="159:62">

        <expr_stmt pos:start="157:9" pos:end="157:31"><expr pos:start="157:9" pos:end="157:30"><name pos:start="157:9" pos:end="157:18">redir_type</name> <operator pos:start="157:20" pos:end="157:20">=</operator> <name pos:start="157:22" pos:end="157:30">REDIR_SDP</name></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:62"><expr pos:start="159:9" pos:end="159:61"><call pos:start="159:9" pos:end="159:61"><name pos:start="159:9" pos:end="159:29">compute_real_filename</name><argument_list pos:start="159:30" pos:end="159:61">(<argument pos:start="159:31" pos:end="159:38"><expr pos:start="159:31" pos:end="159:38"><name pos:start="159:31" pos:end="159:38">filename</name></expr></argument>, <argument pos:start="159:41" pos:end="159:60"><expr pos:start="159:41" pos:end="159:60"><sizeof pos:start="159:41" pos:end="159:56">sizeof<argument_list pos:start="159:47" pos:end="159:56">(<argument pos:start="159:48" pos:end="159:55"><expr pos:start="159:48" pos:end="159:55"><name pos:start="159:48" pos:end="159:55">filename</name></expr></argument>)</argument_list></sizeof> <operator pos:start="159:58" pos:end="159:58">-</operator> <literal type="number" pos:start="159:60" pos:end="159:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="165:5" pos:end="165:41">// "redirect" / request to index.html</comment>

    <if_stmt pos:start="167:5" pos:end="169:65"><if pos:start="167:5" pos:end="169:65">if <condition pos:start="167:8" pos:end="167:26">(<expr pos:start="167:9" pos:end="167:25"><operator pos:start="167:9" pos:end="167:9">!</operator><call pos:start="167:10" pos:end="167:25"><name pos:start="167:10" pos:end="167:15">strlen</name><argument_list pos:start="167:16" pos:end="167:25">(<argument pos:start="167:17" pos:end="167:24"><expr pos:start="167:17" pos:end="167:24"><name pos:start="167:17" pos:end="167:24">filename</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="169:9" pos:end="169:65"><block_content pos:start="169:9" pos:end="169:65">

        <expr_stmt pos:start="169:9" pos:end="169:65"><expr pos:start="169:9" pos:end="169:64"><call pos:start="169:9" pos:end="169:64"><name pos:start="169:9" pos:end="169:18">av_strlcpy</name><argument_list pos:start="169:19" pos:end="169:64">(<argument pos:start="169:20" pos:end="169:27"><expr pos:start="169:20" pos:end="169:27"><name pos:start="169:20" pos:end="169:27">filename</name></expr></argument>, <argument pos:start="169:30" pos:end="169:41"><expr pos:start="169:30" pos:end="169:41"><literal type="string" pos:start="169:30" pos:end="169:41">"index.html"</literal></expr></argument>, <argument pos:start="169:44" pos:end="169:63"><expr pos:start="169:44" pos:end="169:63"><sizeof pos:start="169:44" pos:end="169:59">sizeof<argument_list pos:start="169:50" pos:end="169:59">(<argument pos:start="169:51" pos:end="169:58"><expr pos:start="169:51" pos:end="169:58"><name pos:start="169:51" pos:end="169:58">filename</name></expr></argument>)</argument_list></sizeof> <operator pos:start="169:61" pos:end="169:61">-</operator> <literal type="number" pos:start="169:63" pos:end="169:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="173:5" pos:end="173:33"><expr pos:start="173:5" pos:end="173:32"><name pos:start="173:5" pos:end="173:10">stream</name> <operator pos:start="173:12" pos:end="173:12">=</operator> <name pos:start="173:14" pos:end="173:32"><name pos:start="173:14" pos:end="173:19">config</name><operator pos:start="173:20" pos:end="173:20">.</operator><name pos:start="173:21" pos:end="173:32">first_stream</name></name></expr>;</expr_stmt>

    <while pos:start="175:5" pos:end="183:5">while <condition pos:start="175:11" pos:end="175:18">(<expr pos:start="175:12" pos:end="175:17"><name pos:start="175:12" pos:end="175:17">stream</name></expr>)</condition> <block pos:start="175:20" pos:end="183:5">{<block_content pos:start="177:9" pos:end="181:30">

        <if_stmt pos:start="177:9" pos:end="179:18"><if pos:start="177:9" pos:end="179:18">if <condition pos:start="177:12" pos:end="177:75">(<expr pos:start="177:13" pos:end="177:74"><operator pos:start="177:13" pos:end="177:13">!</operator><call pos:start="177:14" pos:end="177:47"><name pos:start="177:14" pos:end="177:19">strcmp</name><argument_list pos:start="177:20" pos:end="177:47">(<argument pos:start="177:21" pos:end="177:36"><expr pos:start="177:21" pos:end="177:36"><name pos:start="177:21" pos:end="177:36"><name pos:start="177:21" pos:end="177:26">stream</name><operator pos:start="177:27" pos:end="177:28">-&gt;</operator><name pos:start="177:29" pos:end="177:36">filename</name></name></expr></argument>, <argument pos:start="177:39" pos:end="177:46"><expr pos:start="177:39" pos:end="177:46"><name pos:start="177:39" pos:end="177:46">filename</name></expr></argument>)</argument_list></call> <operator pos:start="177:49" pos:end="177:50">&amp;&amp;</operator> <call pos:start="177:52" pos:end="177:74"><name pos:start="177:52" pos:end="177:63">validate_acl</name><argument_list pos:start="177:64" pos:end="177:74">(<argument pos:start="177:65" pos:end="177:70"><expr pos:start="177:65" pos:end="177:70"><name pos:start="177:65" pos:end="177:70">stream</name></expr></argument>, <argument pos:start="177:73" pos:end="177:73"><expr pos:start="177:73" pos:end="177:73"><name pos:start="177:73" pos:end="177:73">c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="179:13" pos:end="179:18"><block_content pos:start="179:13" pos:end="179:18">

            <break pos:start="179:13" pos:end="179:18">break;</break></block_content></block></if></if_stmt>

        <expr_stmt pos:start="181:9" pos:end="181:30"><expr pos:start="181:9" pos:end="181:29"><name pos:start="181:9" pos:end="181:14">stream</name> <operator pos:start="181:16" pos:end="181:16">=</operator> <name pos:start="181:18" pos:end="181:29"><name pos:start="181:18" pos:end="181:23">stream</name><operator pos:start="181:24" pos:end="181:25">-&gt;</operator><name pos:start="181:26" pos:end="181:29">next</name></name></expr>;</expr_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="185:5" pos:end="193:5"><if pos:start="185:5" pos:end="193:5">if <condition pos:start="185:8" pos:end="185:16">(<expr pos:start="185:9" pos:end="185:15"><operator pos:start="185:9" pos:end="185:9">!</operator><name pos:start="185:10" pos:end="185:15">stream</name></expr>)</condition> <block pos:start="185:18" pos:end="193:5">{<block_content pos:start="187:9" pos:end="191:24">

        <expr_stmt pos:start="187:9" pos:end="187:63"><expr pos:start="187:9" pos:end="187:62"><call pos:start="187:9" pos:end="187:62"><name pos:start="187:9" pos:end="187:16">snprintf</name><argument_list pos:start="187:17" pos:end="187:62">(<argument pos:start="187:18" pos:end="187:20"><expr pos:start="187:18" pos:end="187:20"><name pos:start="187:18" pos:end="187:20">msg</name></expr></argument>, <argument pos:start="187:23" pos:end="187:33"><expr pos:start="187:23" pos:end="187:33"><sizeof pos:start="187:23" pos:end="187:33">sizeof<argument_list pos:start="187:29" pos:end="187:33">(<argument pos:start="187:30" pos:end="187:32"><expr pos:start="187:30" pos:end="187:32"><name pos:start="187:30" pos:end="187:32">msg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="187:36" pos:end="187:56"><expr pos:start="187:36" pos:end="187:56"><literal type="string" pos:start="187:36" pos:end="187:56">"File '%s' not found"</literal></expr></argument>, <argument pos:start="187:59" pos:end="187:61"><expr pos:start="187:59" pos:end="187:61"><name pos:start="187:59" pos:end="187:61">url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:47"><expr pos:start="189:9" pos:end="189:46"><call pos:start="189:9" pos:end="189:46"><name pos:start="189:9" pos:end="189:16">http_log</name><argument_list pos:start="189:17" pos:end="189:46">(<argument pos:start="189:18" pos:end="189:40"><expr pos:start="189:18" pos:end="189:40"><literal type="string" pos:start="189:18" pos:end="189:40">"File '%s' not found\n"</literal></expr></argument>, <argument pos:start="189:43" pos:end="189:45"><expr pos:start="189:43" pos:end="189:45"><name pos:start="189:43" pos:end="189:45">url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="191:9" pos:end="191:24">goto <name pos:start="191:14" pos:end="191:23">send_error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="197:5" pos:end="197:23"><expr pos:start="197:5" pos:end="197:22"><name pos:start="197:5" pos:end="197:13"><name pos:start="197:5" pos:end="197:5">c</name><operator pos:start="197:6" pos:end="197:7">-&gt;</operator><name pos:start="197:8" pos:end="197:13">stream</name></name> <operator pos:start="197:15" pos:end="197:15">=</operator> <name pos:start="197:17" pos:end="197:22">stream</name></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:75"><expr pos:start="199:5" pos:end="199:74"><call pos:start="199:5" pos:end="199:74"><name pos:start="199:5" pos:end="199:10">memcpy</name><argument_list pos:start="199:11" pos:end="199:74">(<argument pos:start="199:12" pos:end="199:26"><expr pos:start="199:12" pos:end="199:26"><name pos:start="199:12" pos:end="199:26"><name pos:start="199:12" pos:end="199:12">c</name><operator pos:start="199:13" pos:end="199:14">-&gt;</operator><name pos:start="199:15" pos:end="199:26">feed_streams</name></name></expr></argument>, <argument pos:start="199:29" pos:end="199:48"><expr pos:start="199:29" pos:end="199:48"><name pos:start="199:29" pos:end="199:48"><name pos:start="199:29" pos:end="199:34">stream</name><operator pos:start="199:35" pos:end="199:36">-&gt;</operator><name pos:start="199:37" pos:end="199:48">feed_streams</name></name></expr></argument>, <argument pos:start="199:51" pos:end="199:73"><expr pos:start="199:51" pos:end="199:73"><sizeof pos:start="199:51" pos:end="199:73">sizeof<argument_list pos:start="199:57" pos:end="199:73">(<argument pos:start="199:58" pos:end="199:72"><expr pos:start="199:58" pos:end="199:72"><name pos:start="199:58" pos:end="199:72"><name pos:start="199:58" pos:end="199:58">c</name><operator pos:start="199:59" pos:end="199:60">-&gt;</operator><name pos:start="199:61" pos:end="199:72">feed_streams</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:71"><expr pos:start="201:5" pos:end="201:70"><call pos:start="201:5" pos:end="201:70"><name pos:start="201:5" pos:end="201:10">memset</name><argument_list pos:start="201:11" pos:end="201:70">(<argument pos:start="201:12" pos:end="201:33"><expr pos:start="201:12" pos:end="201:33"><name pos:start="201:12" pos:end="201:33"><name pos:start="201:12" pos:end="201:12">c</name><operator pos:start="201:13" pos:end="201:14">-&gt;</operator><name pos:start="201:15" pos:end="201:33">switch_feed_streams</name></name></expr></argument>, <argument pos:start="201:36" pos:end="201:37"><expr pos:start="201:36" pos:end="201:37"><operator pos:start="201:36" pos:end="201:36">-</operator><literal type="number" pos:start="201:37" pos:end="201:37">1</literal></expr></argument>, <argument pos:start="201:40" pos:end="201:69"><expr pos:start="201:40" pos:end="201:69"><sizeof pos:start="201:40" pos:end="201:69">sizeof<argument_list pos:start="201:46" pos:end="201:69">(<argument pos:start="201:47" pos:end="201:68"><expr pos:start="201:47" pos:end="201:68"><name pos:start="201:47" pos:end="201:68"><name pos:start="201:47" pos:end="201:47">c</name><operator pos:start="201:48" pos:end="201:49">-&gt;</operator><name pos:start="201:50" pos:end="201:68">switch_feed_streams</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="205:5" pos:end="239:5"><if pos:start="205:5" pos:end="239:5">if <condition pos:start="205:8" pos:end="205:52">(<expr pos:start="205:9" pos:end="205:51"><name pos:start="205:9" pos:end="205:27"><name pos:start="205:9" pos:end="205:14">stream</name><operator pos:start="205:15" pos:end="205:16">-&gt;</operator><name pos:start="205:17" pos:end="205:27">stream_type</name></name> <operator pos:start="205:29" pos:end="205:30">==</operator> <name pos:start="205:32" pos:end="205:51">STREAM_TYPE_REDIRECT</name></expr>)</condition> <block pos:start="205:54" pos:end="239:5">{<block_content pos:start="207:9" pos:end="237:17">

        <expr_stmt pos:start="207:9" pos:end="207:28"><expr pos:start="207:9" pos:end="207:27"><name pos:start="207:9" pos:end="207:21"><name pos:start="207:9" pos:end="207:9">c</name><operator pos:start="207:10" pos:end="207:11">-&gt;</operator><name pos:start="207:12" pos:end="207:21">http_error</name></name> <operator pos:start="207:23" pos:end="207:23">=</operator> <literal type="number" pos:start="207:25" pos:end="207:27">301</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:22"><expr pos:start="209:9" pos:end="209:21"><name pos:start="209:9" pos:end="209:9">q</name> <operator pos:start="209:11" pos:end="209:11">=</operator> <name pos:start="209:13" pos:end="209:21"><name pos:start="209:13" pos:end="209:13">c</name><operator pos:start="209:14" pos:end="209:15">-&gt;</operator><name pos:start="209:16" pos:end="209:21">buffer</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="211:9" pos:end="225:90"><expr pos:start="211:9" pos:end="225:89"><call pos:start="211:9" pos:end="225:89"><name pos:start="211:9" pos:end="211:16">snprintf</name><argument_list pos:start="211:17" pos:end="225:89">(<argument pos:start="211:18" pos:end="211:18"><expr pos:start="211:18" pos:end="211:18"><name pos:start="211:18" pos:end="211:18">q</name></expr></argument>, <argument pos:start="211:21" pos:end="211:34"><expr pos:start="211:21" pos:end="211:34"><name pos:start="211:21" pos:end="211:34"><name pos:start="211:21" pos:end="211:21">c</name><operator pos:start="211:22" pos:end="211:23">-&gt;</operator><name pos:start="211:24" pos:end="211:34">buffer_size</name></name></expr></argument>,

                      <argument pos:start="213:23" pos:end="225:42"><expr pos:start="213:23" pos:end="225:42"><literal type="string" pos:start="213:23" pos:end="213:46">"HTTP/1.0 301 Moved\r\n"</literal>

                      <literal type="string" pos:start="215:23" pos:end="215:40">"Location: %s\r\n"</literal>

                      <literal type="string" pos:start="217:23" pos:end="217:51">"Content-type: text/html\r\n"</literal>

                      <literal type="string" pos:start="219:23" pos:end="219:28">"\r\n"</literal>

                      <literal type="string" pos:start="221:23" pos:end="221:73">"&lt;html&gt;&lt;head&gt;&lt;title&gt;Moved&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\r\n"</literal>

                      <literal type="string" pos:start="223:23" pos:end="223:72">"You should be &lt;a href=\"%s\"&gt;redirected&lt;/a&gt;.\r\n"</literal>

                      <literal type="string" pos:start="225:23" pos:end="225:42">"&lt;/body&gt;&lt;/html&gt;\r\n"</literal></expr></argument>, <argument pos:start="225:45" pos:end="225:65"><expr pos:start="225:45" pos:end="225:65"><name pos:start="225:45" pos:end="225:65"><name pos:start="225:45" pos:end="225:50">stream</name><operator pos:start="225:51" pos:end="225:52">-&gt;</operator><name pos:start="225:53" pos:end="225:65">feed_filename</name></name></expr></argument>, <argument pos:start="225:68" pos:end="225:88"><expr pos:start="225:68" pos:end="225:88"><name pos:start="225:68" pos:end="225:88"><name pos:start="225:68" pos:end="225:73">stream</name><operator pos:start="225:74" pos:end="225:75">-&gt;</operator><name pos:start="225:76" pos:end="225:88">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="227:9" pos:end="227:23"><expr pos:start="227:9" pos:end="227:22"><name pos:start="227:9" pos:end="227:9">q</name> <operator pos:start="227:11" pos:end="227:12">+=</operator> <call pos:start="227:14" pos:end="227:22"><name pos:start="227:14" pos:end="227:19">strlen</name><argument_list pos:start="227:20" pos:end="227:22">(<argument pos:start="227:21" pos:end="227:21"><expr pos:start="227:21" pos:end="227:21"><name pos:start="227:21" pos:end="227:21">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="229:9" pos:end="229:35">/* prepare output buffer */</comment>

        <expr_stmt pos:start="231:9" pos:end="231:34"><expr pos:start="231:9" pos:end="231:33"><name pos:start="231:9" pos:end="231:21"><name pos:start="231:9" pos:end="231:9">c</name><operator pos:start="231:10" pos:end="231:11">-&gt;</operator><name pos:start="231:12" pos:end="231:21">buffer_ptr</name></name> <operator pos:start="231:23" pos:end="231:23">=</operator> <name pos:start="231:25" pos:end="231:33"><name pos:start="231:25" pos:end="231:25">c</name><operator pos:start="231:26" pos:end="231:27">-&gt;</operator><name pos:start="231:28" pos:end="231:33">buffer</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="233:9" pos:end="233:26"><expr pos:start="233:9" pos:end="233:25"><name pos:start="233:9" pos:end="233:21"><name pos:start="233:9" pos:end="233:9">c</name><operator pos:start="233:10" pos:end="233:11">-&gt;</operator><name pos:start="233:12" pos:end="233:21">buffer_end</name></name> <operator pos:start="233:23" pos:end="233:23">=</operator> <name pos:start="233:25" pos:end="233:25">q</name></expr>;</expr_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:41"><expr pos:start="235:9" pos:end="235:40"><name pos:start="235:9" pos:end="235:16"><name pos:start="235:9" pos:end="235:9">c</name><operator pos:start="235:10" pos:end="235:11">-&gt;</operator><name pos:start="235:12" pos:end="235:16">state</name></name> <operator pos:start="235:18" pos:end="235:18">=</operator> <name pos:start="235:20" pos:end="235:40">HTTPSTATE_SEND_HEADER</name></expr>;</expr_stmt>

        <return pos:start="237:9" pos:end="237:17">return <expr pos:start="237:16" pos:end="237:16"><literal type="number" pos:start="237:16" pos:end="237:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="243:5" pos:end="243:50">/* If this is WMP, get the rate information */</comment>

    <if_stmt pos:start="245:5" pos:end="259:5"><if pos:start="245:5" pos:end="259:5">if <condition pos:start="245:8" pos:end="245:59">(<expr pos:start="245:9" pos:end="245:58"><call pos:start="245:9" pos:end="245:58"><name pos:start="245:9" pos:end="245:21">extract_rates</name><argument_list pos:start="245:22" pos:end="245:58">(<argument pos:start="245:23" pos:end="245:29"><expr pos:start="245:23" pos:end="245:29"><name pos:start="245:23" pos:end="245:29">ratebuf</name></expr></argument>, <argument pos:start="245:32" pos:end="245:46"><expr pos:start="245:32" pos:end="245:46"><sizeof pos:start="245:32" pos:end="245:46">sizeof<argument_list pos:start="245:38" pos:end="245:46">(<argument pos:start="245:39" pos:end="245:45"><expr pos:start="245:39" pos:end="245:45"><name pos:start="245:39" pos:end="245:45">ratebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="245:49" pos:end="245:57"><expr pos:start="245:49" pos:end="245:57"><name pos:start="245:49" pos:end="245:57"><name pos:start="245:49" pos:end="245:49">c</name><operator pos:start="245:50" pos:end="245:51">-&gt;</operator><name pos:start="245:52" pos:end="245:57">buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="245:61" pos:end="259:5">{<block_content pos:start="247:9" pos:end="257:9">

        <if_stmt pos:start="247:9" pos:end="257:9"><if pos:start="247:9" pos:end="257:9">if <condition pos:start="247:12" pos:end="247:46">(<expr pos:start="247:13" pos:end="247:45"><call pos:start="247:13" pos:end="247:45"><name pos:start="247:13" pos:end="247:33">modify_current_stream</name><argument_list pos:start="247:34" pos:end="247:45">(<argument pos:start="247:35" pos:end="247:35"><expr pos:start="247:35" pos:end="247:35"><name pos:start="247:35" pos:end="247:35">c</name></expr></argument>, <argument pos:start="247:38" pos:end="247:44"><expr pos:start="247:38" pos:end="247:44"><name pos:start="247:38" pos:end="247:44">ratebuf</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="247:48" pos:end="257:9">{<block_content pos:start="249:13" pos:end="255:13">

            <for pos:start="249:13" pos:end="255:13">for <control pos:start="249:17" pos:end="249:65">(<init pos:start="249:18" pos:end="249:23"><expr pos:start="249:18" pos:end="249:22"><name pos:start="249:18" pos:end="249:18">i</name> <operator pos:start="249:20" pos:end="249:20">=</operator> <literal type="number" pos:start="249:22" pos:end="249:22">0</literal></expr>;</init> <condition pos:start="249:25" pos:end="249:60"><expr pos:start="249:25" pos:end="249:59"><name pos:start="249:25" pos:end="249:25">i</name> <operator pos:start="249:27" pos:end="249:27">&lt;</operator> <call pos:start="249:29" pos:end="249:59"><name pos:start="249:29" pos:end="249:42">FF_ARRAY_ELEMS</name><argument_list pos:start="249:43" pos:end="249:59">(<argument pos:start="249:44" pos:end="249:58"><expr pos:start="249:44" pos:end="249:58"><name pos:start="249:44" pos:end="249:58"><name pos:start="249:44" pos:end="249:44">c</name><operator pos:start="249:45" pos:end="249:46">-&gt;</operator><name pos:start="249:47" pos:end="249:58">feed_streams</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="249:62" pos:end="249:64"><expr pos:start="249:62" pos:end="249:64"><name pos:start="249:62" pos:end="249:62">i</name><operator pos:start="249:63" pos:end="249:64">++</operator></expr></incr>)</control> <block pos:start="249:67" pos:end="255:13">{<block_content pos:start="251:17" pos:end="253:51">

                <if_stmt pos:start="251:17" pos:end="253:51"><if pos:start="251:17" pos:end="253:51">if <condition pos:start="251:20" pos:end="251:51">(<expr pos:start="251:21" pos:end="251:50"><name pos:start="251:21" pos:end="251:45"><name pos:start="251:21" pos:end="251:21">c</name><operator pos:start="251:22" pos:end="251:23">-&gt;</operator><name pos:start="251:24" pos:end="251:42">switch_feed_streams</name><index pos:start="251:43" pos:end="251:45">[<expr pos:start="251:44" pos:end="251:44"><name pos:start="251:44" pos:end="251:44">i</name></expr>]</index></name> <operator pos:start="251:47" pos:end="251:48">&gt;=</operator> <literal type="number" pos:start="251:50" pos:end="251:50">0</literal></expr>)</condition><block type="pseudo" pos:start="253:21" pos:end="253:51"><block_content pos:start="253:21" pos:end="253:51">

                    <expr_stmt pos:start="253:21" pos:end="253:51"><expr pos:start="253:21" pos:end="253:50"><name pos:start="253:21" pos:end="253:45"><name pos:start="253:21" pos:end="253:21">c</name><operator pos:start="253:22" pos:end="253:23">-&gt;</operator><name pos:start="253:24" pos:end="253:42">switch_feed_streams</name><index pos:start="253:43" pos:end="253:45">[<expr pos:start="253:44" pos:end="253:44"><name pos:start="253:44" pos:end="253:44">i</name></expr>]</index></name> <operator pos:start="253:47" pos:end="253:47">=</operator> <operator pos:start="253:49" pos:end="253:49">-</operator><literal type="number" pos:start="253:50" pos:end="253:50">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="263:5" pos:end="265:47"><if pos:start="263:5" pos:end="265:47">if <condition pos:start="263:8" pos:end="263:64">(<expr pos:start="263:9" pos:end="263:63"><name pos:start="263:9" pos:end="263:15"><name pos:start="263:9" pos:end="263:9">c</name><operator pos:start="263:10" pos:end="263:11">-&gt;</operator><name pos:start="263:12" pos:end="263:15">post</name></name> <operator pos:start="263:17" pos:end="263:18">==</operator> <literal type="number" pos:start="263:20" pos:end="263:20">0</literal> <operator pos:start="263:22" pos:end="263:23">&amp;&amp;</operator> <name pos:start="263:25" pos:end="263:43"><name pos:start="263:25" pos:end="263:30">stream</name><operator pos:start="263:31" pos:end="263:32">-&gt;</operator><name pos:start="263:33" pos:end="263:43">stream_type</name></name> <operator pos:start="263:45" pos:end="263:46">==</operator> <name pos:start="263:48" pos:end="263:63">STREAM_TYPE_LIVE</name></expr>)</condition><block type="pseudo" pos:start="265:9" pos:end="265:47"><block_content pos:start="265:9" pos:end="265:47">

        <expr_stmt pos:start="265:9" pos:end="265:47"><expr pos:start="265:9" pos:end="265:46"><name pos:start="265:9" pos:end="265:25">current_bandwidth</name> <operator pos:start="265:27" pos:end="265:28">+=</operator> <name pos:start="265:30" pos:end="265:46"><name pos:start="265:30" pos:end="265:35">stream</name><operator pos:start="265:36" pos:end="265:37">-&gt;</operator><name pos:start="265:38" pos:end="265:46">bandwidth</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="269:5" pos:end="269:74">/* If already streaming this feed, do not let start another feeder. */</comment>

    <if_stmt pos:start="271:5" pos:end="279:5"><if pos:start="271:5" pos:end="279:5">if <condition pos:start="271:8" pos:end="271:28">(<expr pos:start="271:9" pos:end="271:27"><name pos:start="271:9" pos:end="271:27"><name pos:start="271:9" pos:end="271:14">stream</name><operator pos:start="271:15" pos:end="271:16">-&gt;</operator><name pos:start="271:17" pos:end="271:27">feed_opened</name></name></expr>)</condition> <block pos:start="271:30" pos:end="279:5">{<block_content pos:start="273:9" pos:end="277:24">

        <expr_stmt pos:start="273:9" pos:end="273:75"><expr pos:start="273:9" pos:end="273:74"><call pos:start="273:9" pos:end="273:74"><name pos:start="273:9" pos:end="273:16">snprintf</name><argument_list pos:start="273:17" pos:end="273:74">(<argument pos:start="273:18" pos:end="273:20"><expr pos:start="273:18" pos:end="273:20"><name pos:start="273:18" pos:end="273:20">msg</name></expr></argument>, <argument pos:start="273:23" pos:end="273:33"><expr pos:start="273:23" pos:end="273:33"><sizeof pos:start="273:23" pos:end="273:33">sizeof<argument_list pos:start="273:29" pos:end="273:33">(<argument pos:start="273:30" pos:end="273:32"><expr pos:start="273:30" pos:end="273:32"><name pos:start="273:30" pos:end="273:32">msg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="273:36" pos:end="273:73"><expr pos:start="273:36" pos:end="273:73"><literal type="string" pos:start="273:36" pos:end="273:73">"This feed is already being received."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="275:9" pos:end="275:78"><expr pos:start="275:9" pos:end="275:77"><call pos:start="275:9" pos:end="275:77"><name pos:start="275:9" pos:end="275:16">http_log</name><argument_list pos:start="275:17" pos:end="275:77">(<argument pos:start="275:18" pos:end="275:53"><expr pos:start="275:18" pos:end="275:53"><literal type="string" pos:start="275:18" pos:end="275:53">"Feed '%s' already being received\n"</literal></expr></argument>, <argument pos:start="275:56" pos:end="275:76"><expr pos:start="275:56" pos:end="275:76"><name pos:start="275:56" pos:end="275:76"><name pos:start="275:56" pos:end="275:61">stream</name><operator pos:start="275:62" pos:end="275:63">-&gt;</operator><name pos:start="275:64" pos:end="275:76">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="277:9" pos:end="277:24">goto <name pos:start="277:14" pos:end="277:23">send_error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="283:5" pos:end="319:5"><if pos:start="283:5" pos:end="319:5">if <condition pos:start="283:8" pos:end="283:65">(<expr pos:start="283:9" pos:end="283:64"><name pos:start="283:9" pos:end="283:15"><name pos:start="283:9" pos:end="283:9">c</name><operator pos:start="283:10" pos:end="283:11">-&gt;</operator><name pos:start="283:12" pos:end="283:15">post</name></name> <operator pos:start="283:17" pos:end="283:18">==</operator> <literal type="number" pos:start="283:20" pos:end="283:20">0</literal> <operator pos:start="283:22" pos:end="283:23">&amp;&amp;</operator> <name pos:start="283:25" pos:end="283:44"><name pos:start="283:25" pos:end="283:30">config</name><operator pos:start="283:31" pos:end="283:31">.</operator><name pos:start="283:32" pos:end="283:44">max_bandwidth</name></name> <operator pos:start="283:46" pos:end="283:46">&lt;</operator> <name pos:start="283:48" pos:end="283:64">current_bandwidth</name></expr>)</condition> <block pos:start="283:67" pos:end="319:5">{<block_content pos:start="285:9" pos:end="317:17">

        <expr_stmt pos:start="285:9" pos:end="285:28"><expr pos:start="285:9" pos:end="285:27"><name pos:start="285:9" pos:end="285:21"><name pos:start="285:9" pos:end="285:9">c</name><operator pos:start="285:10" pos:end="285:11">-&gt;</operator><name pos:start="285:12" pos:end="285:21">http_error</name></name> <operator pos:start="285:23" pos:end="285:23">=</operator> <literal type="number" pos:start="285:25" pos:end="285:27">503</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="287:9" pos:end="287:22"><expr pos:start="287:9" pos:end="287:21"><name pos:start="287:9" pos:end="287:9">q</name> <operator pos:start="287:11" pos:end="287:11">=</operator> <name pos:start="287:13" pos:end="287:21"><name pos:start="287:13" pos:end="287:13">c</name><operator pos:start="287:14" pos:end="287:15">-&gt;</operator><name pos:start="287:16" pos:end="287:21">buffer</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="289:9" pos:end="305:85"><expr pos:start="289:9" pos:end="305:84"><call pos:start="289:9" pos:end="305:84"><name pos:start="289:9" pos:end="289:16">snprintf</name><argument_list pos:start="289:17" pos:end="305:84">(<argument pos:start="289:18" pos:end="289:18"><expr pos:start="289:18" pos:end="289:18"><name pos:start="289:18" pos:end="289:18">q</name></expr></argument>, <argument pos:start="289:21" pos:end="289:34"><expr pos:start="289:21" pos:end="289:34"><name pos:start="289:21" pos:end="289:34"><name pos:start="289:21" pos:end="289:21">c</name><operator pos:start="289:22" pos:end="289:23">-&gt;</operator><name pos:start="289:24" pos:end="289:34">buffer_size</name></name></expr></argument>,

                      <argument pos:start="291:23" pos:end="305:42"><expr pos:start="291:23" pos:end="305:42"><literal type="string" pos:start="291:23" pos:end="291:56">"HTTP/1.0 503 Server too busy\r\n"</literal>

                      <literal type="string" pos:start="293:23" pos:end="293:51">"Content-type: text/html\r\n"</literal>

                      <literal type="string" pos:start="295:23" pos:end="295:28">"\r\n"</literal>

                      <literal type="string" pos:start="297:23" pos:end="297:76">"&lt;html&gt;&lt;head&gt;&lt;title&gt;Too busy&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\r\n"</literal>

                      <literal type="string" pos:start="299:23" pos:end="299:93">"&lt;p&gt;The server is too busy to serve your request at this time.&lt;/p&gt;\r\n"</literal>

                      <literal type="string" pos:start="301:23" pos:end="301:82">"&lt;p&gt;The bandwidth being served (including your stream) is %"</literal><name pos:start="301:83" pos:end="301:88">PRIu64</name><literal type="string" pos:start="301:89" pos:end="301:100">"kbit/sec, "</literal>

                      <literal type="string" pos:start="303:23" pos:end="303:55">"and this exceeds the limit of %"</literal><name pos:start="303:56" pos:end="303:61">PRIu64</name><literal type="string" pos:start="303:62" pos:end="303:80">"kbit/sec.&lt;/p&gt;\r\n"</literal>

                      <literal type="string" pos:start="305:23" pos:end="305:42">"&lt;/body&gt;&lt;/html&gt;\r\n"</literal></expr></argument>, <argument pos:start="305:45" pos:end="305:61"><expr pos:start="305:45" pos:end="305:61"><name pos:start="305:45" pos:end="305:61">current_bandwidth</name></expr></argument>, <argument pos:start="305:64" pos:end="305:83"><expr pos:start="305:64" pos:end="305:83"><name pos:start="305:64" pos:end="305:83"><name pos:start="305:64" pos:end="305:69">config</name><operator pos:start="305:70" pos:end="305:70">.</operator><name pos:start="305:71" pos:end="305:83">max_bandwidth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="307:9" pos:end="307:23"><expr pos:start="307:9" pos:end="307:22"><name pos:start="307:9" pos:end="307:9">q</name> <operator pos:start="307:11" pos:end="307:12">+=</operator> <call pos:start="307:14" pos:end="307:22"><name pos:start="307:14" pos:end="307:19">strlen</name><argument_list pos:start="307:20" pos:end="307:22">(<argument pos:start="307:21" pos:end="307:21"><expr pos:start="307:21" pos:end="307:21"><name pos:start="307:21" pos:end="307:21">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="309:9" pos:end="309:35">/* prepare output buffer */</comment>

        <expr_stmt pos:start="311:9" pos:end="311:34"><expr pos:start="311:9" pos:end="311:33"><name pos:start="311:9" pos:end="311:21"><name pos:start="311:9" pos:end="311:9">c</name><operator pos:start="311:10" pos:end="311:11">-&gt;</operator><name pos:start="311:12" pos:end="311:21">buffer_ptr</name></name> <operator pos:start="311:23" pos:end="311:23">=</operator> <name pos:start="311:25" pos:end="311:33"><name pos:start="311:25" pos:end="311:25">c</name><operator pos:start="311:26" pos:end="311:27">-&gt;</operator><name pos:start="311:28" pos:end="311:33">buffer</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="313:9" pos:end="313:26"><expr pos:start="313:9" pos:end="313:25"><name pos:start="313:9" pos:end="313:21"><name pos:start="313:9" pos:end="313:9">c</name><operator pos:start="313:10" pos:end="313:11">-&gt;</operator><name pos:start="313:12" pos:end="313:21">buffer_end</name></name> <operator pos:start="313:23" pos:end="313:23">=</operator> <name pos:start="313:25" pos:end="313:25">q</name></expr>;</expr_stmt>

        <expr_stmt pos:start="315:9" pos:end="315:41"><expr pos:start="315:9" pos:end="315:40"><name pos:start="315:9" pos:end="315:16"><name pos:start="315:9" pos:end="315:9">c</name><operator pos:start="315:10" pos:end="315:11">-&gt;</operator><name pos:start="315:12" pos:end="315:16">state</name></name> <operator pos:start="315:18" pos:end="315:18">=</operator> <name pos:start="315:20" pos:end="315:40">HTTPSTATE_SEND_HEADER</name></expr>;</expr_stmt>

        <return pos:start="317:9" pos:end="317:17">return <expr pos:start="317:16" pos:end="317:16"><literal type="number" pos:start="317:16" pos:end="317:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="323:5" pos:end="577:5"><if pos:start="323:5" pos:end="577:5">if <condition pos:start="323:8" pos:end="323:33">(<expr pos:start="323:9" pos:end="323:32"><name pos:start="323:9" pos:end="323:18">redir_type</name> <operator pos:start="323:20" pos:end="323:21">!=</operator> <name pos:start="323:23" pos:end="323:32">REDIR_NONE</name></expr>)</condition> <block pos:start="323:35" pos:end="577:5">{<block_content pos:start="325:9" pos:end="575:24">

        <decl_stmt pos:start="325:9" pos:end="325:33"><decl pos:start="325:9" pos:end="325:32"><type pos:start="325:9" pos:end="325:20"><specifier pos:start="325:9" pos:end="325:13">const</specifier> <name pos:start="325:15" pos:end="325:18">char</name> <modifier pos:start="325:20" pos:end="325:20">*</modifier></type><name pos:start="325:21" pos:end="325:28">hostinfo</name> <init pos:start="325:30" pos:end="325:32">= <expr pos:start="325:32" pos:end="325:32"><literal type="number" pos:start="325:32" pos:end="325:32">0</literal></expr></init></decl>;</decl_stmt>



        <for pos:start="329:9" pos:end="349:9">for <control pos:start="329:13" pos:end="329:61">(<init pos:start="329:14" pos:end="329:27"><expr pos:start="329:14" pos:end="329:26"><name pos:start="329:14" pos:end="329:14">p</name> <operator pos:start="329:16" pos:end="329:16">=</operator> <name pos:start="329:18" pos:end="329:26"><name pos:start="329:18" pos:end="329:18">c</name><operator pos:start="329:19" pos:end="329:20">-&gt;</operator><name pos:start="329:21" pos:end="329:26">buffer</name></name></expr>;</init> <condition pos:start="329:29" pos:end="329:59"><expr pos:start="329:29" pos:end="329:58"><operator pos:start="329:29" pos:end="329:29">*</operator><name pos:start="329:30" pos:end="329:30">p</name> <operator pos:start="329:32" pos:end="329:33">&amp;&amp;</operator> <operator pos:start="329:35" pos:end="329:35">*</operator><name pos:start="329:36" pos:end="329:36">p</name> <operator pos:start="329:38" pos:end="329:39">!=</operator> <literal type="char" pos:start="329:41" pos:end="329:44">'\r'</literal> <operator pos:start="329:46" pos:end="329:47">&amp;&amp;</operator> <operator pos:start="329:49" pos:end="329:49">*</operator><name pos:start="329:50" pos:end="329:50">p</name> <operator pos:start="329:52" pos:end="329:53">!=</operator> <literal type="char" pos:start="329:55" pos:end="329:58">'\n'</literal></expr>;</condition> <incr/>)</control> <block pos:start="329:63" pos:end="349:9">{<block_content pos:start="331:13" pos:end="347:16">

            <if_stmt pos:start="331:13" pos:end="337:13"><if pos:start="331:13" pos:end="337:13">if <condition pos:start="331:16" pos:end="331:51">(<expr pos:start="331:17" pos:end="331:50"><call pos:start="331:17" pos:end="331:45"><name pos:start="331:17" pos:end="331:30">av_strncasecmp</name><argument_list pos:start="331:31" pos:end="331:45">(<argument pos:start="331:32" pos:end="331:32"><expr pos:start="331:32" pos:end="331:32"><name pos:start="331:32" pos:end="331:32">p</name></expr></argument>, <argument pos:start="331:35" pos:end="331:41"><expr pos:start="331:35" pos:end="331:41"><literal type="string" pos:start="331:35" pos:end="331:41">"Host:"</literal></expr></argument>, <argument pos:start="331:44" pos:end="331:44"><expr pos:start="331:44" pos:end="331:44"><literal type="number" pos:start="331:44" pos:end="331:44">5</literal></expr></argument>)</argument_list></call> <operator pos:start="331:47" pos:end="331:48">==</operator> <literal type="number" pos:start="331:50" pos:end="331:50">0</literal></expr>)</condition> <block pos:start="331:53" pos:end="337:13">{<block_content pos:start="333:17" pos:end="335:22">

                <expr_stmt pos:start="333:17" pos:end="333:33"><expr pos:start="333:17" pos:end="333:32"><name pos:start="333:17" pos:end="333:24">hostinfo</name> <operator pos:start="333:26" pos:end="333:26">=</operator> <name pos:start="333:28" pos:end="333:28">p</name> <operator pos:start="333:30" pos:end="333:30">+</operator> <literal type="number" pos:start="333:32" pos:end="333:32">5</literal></expr>;</expr_stmt>

                <break pos:start="335:17" pos:end="335:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="339:13" pos:end="339:32"><expr pos:start="339:13" pos:end="339:31"><name pos:start="339:13" pos:end="339:13">p</name> <operator pos:start="339:15" pos:end="339:15">=</operator> <call pos:start="339:17" pos:end="339:31"><name pos:start="339:17" pos:end="339:22">strchr</name><argument_list pos:start="339:23" pos:end="339:31">(<argument pos:start="339:24" pos:end="339:24"><expr pos:start="339:24" pos:end="339:24"><name pos:start="339:24" pos:end="339:24">p</name></expr></argument>, <argument pos:start="339:27" pos:end="339:30"><expr pos:start="339:27" pos:end="339:30"><literal type="char" pos:start="339:27" pos:end="339:30">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="341:13" pos:end="343:22"><if pos:start="341:13" pos:end="343:22">if <condition pos:start="341:16" pos:end="341:19">(<expr pos:start="341:17" pos:end="341:18"><operator pos:start="341:17" pos:end="341:17">!</operator><name pos:start="341:18" pos:end="341:18">p</name></expr>)</condition><block type="pseudo" pos:start="343:17" pos:end="343:22"><block_content pos:start="343:17" pos:end="343:22">

                <break pos:start="343:17" pos:end="343:22">break;</break></block_content></block></if></if_stmt>



            <expr_stmt pos:start="347:13" pos:end="347:16"><expr pos:start="347:13" pos:end="347:15"><name pos:start="347:13" pos:end="347:13">p</name><operator pos:start="347:14" pos:end="347:15">++</operator></expr>;</expr_stmt>

        </block_content>}</block></for>



        <if_stmt pos:start="353:9" pos:end="569:9"><if pos:start="353:9" pos:end="569:9">if <condition pos:start="353:12" pos:end="353:21">(<expr pos:start="353:13" pos:end="353:20"><name pos:start="353:13" pos:end="353:20">hostinfo</name></expr>)</condition> <block pos:start="353:23" pos:end="569:9">{<block_content pos:start="355:13" pos:end="567:13">

            <decl_stmt pos:start="355:13" pos:end="355:22"><decl pos:start="355:13" pos:end="355:21"><type pos:start="355:13" pos:end="355:18"><name pos:start="355:13" pos:end="355:16">char</name> <modifier pos:start="355:18" pos:end="355:18">*</modifier></type><name pos:start="355:19" pos:end="355:21">eoh</name></decl>;</decl_stmt>

            <decl_stmt pos:start="357:13" pos:end="357:30"><decl pos:start="357:13" pos:end="357:29"><type pos:start="357:13" pos:end="357:16"><name pos:start="357:13" pos:end="357:16">char</name></type> <name pos:start="357:18" pos:end="357:29"><name pos:start="357:18" pos:end="357:24">hostbuf</name><index pos:start="357:25" pos:end="357:29">[<expr pos:start="357:26" pos:end="357:28"><literal type="number" pos:start="357:26" pos:end="357:28">260</literal></expr>]</index></name></decl>;</decl_stmt>



            <while pos:start="361:13" pos:end="363:27">while <condition pos:start="361:19" pos:end="361:41">(<expr pos:start="361:20" pos:end="361:40"><call pos:start="361:20" pos:end="361:40"><name pos:start="361:20" pos:end="361:29">av_isspace</name><argument_list pos:start="361:30" pos:end="361:40">(<argument pos:start="361:31" pos:end="361:39"><expr pos:start="361:31" pos:end="361:39"><operator pos:start="361:31" pos:end="361:31">*</operator><name pos:start="361:32" pos:end="361:39">hostinfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="363:17" pos:end="363:27"><block_content pos:start="363:17" pos:end="363:27">

                <expr_stmt pos:start="363:17" pos:end="363:27"><expr pos:start="363:17" pos:end="363:26"><name pos:start="363:17" pos:end="363:24">hostinfo</name><operator pos:start="363:25" pos:end="363:26">++</operator></expr>;</expr_stmt></block_content></block></while>



            <expr_stmt pos:start="367:13" pos:end="367:41"><expr pos:start="367:13" pos:end="367:40"><name pos:start="367:13" pos:end="367:15">eoh</name> <operator pos:start="367:17" pos:end="367:17">=</operator> <call pos:start="367:19" pos:end="367:40"><name pos:start="367:19" pos:end="367:24">strchr</name><argument_list pos:start="367:25" pos:end="367:40">(<argument pos:start="367:26" pos:end="367:33"><expr pos:start="367:26" pos:end="367:33"><name pos:start="367:26" pos:end="367:33">hostinfo</name></expr></argument>, <argument pos:start="367:36" pos:end="367:39"><expr pos:start="367:36" pos:end="367:39"><literal type="char" pos:start="367:36" pos:end="367:39">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="369:13" pos:end="567:13"><if pos:start="369:13" pos:end="567:13">if <condition pos:start="369:16" pos:end="369:20">(<expr pos:start="369:17" pos:end="369:19"><name pos:start="369:17" pos:end="369:19">eoh</name></expr>)</condition> <block pos:start="369:22" pos:end="567:13">{<block_content pos:start="371:17" pos:end="565:17">

                <if_stmt pos:start="371:17" pos:end="373:26"><if pos:start="371:17" pos:end="373:26">if <condition pos:start="371:20" pos:end="371:36">(<expr pos:start="371:21" pos:end="371:35"><name pos:start="371:21" pos:end="371:27"><name pos:start="371:21" pos:end="371:23">eoh</name><index pos:start="371:24" pos:end="371:27">[<expr pos:start="371:25" pos:end="371:26"><operator pos:start="371:25" pos:end="371:25">-</operator><literal type="number" pos:start="371:26" pos:end="371:26">1</literal></expr>]</index></name> <operator pos:start="371:29" pos:end="371:30">==</operator> <literal type="char" pos:start="371:32" pos:end="371:35">'\r'</literal></expr>)</condition><block type="pseudo" pos:start="373:21" pos:end="373:26"><block_content pos:start="373:21" pos:end="373:26">

                    <expr_stmt pos:start="373:21" pos:end="373:26"><expr pos:start="373:21" pos:end="373:25"><name pos:start="373:21" pos:end="373:23">eoh</name><operator pos:start="373:24" pos:end="373:25">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>



                <if_stmt pos:start="377:17" pos:end="565:17"><if pos:start="377:17" pos:end="565:17">if <condition pos:start="377:20" pos:end="377:57">(<expr pos:start="377:21" pos:end="377:56"><name pos:start="377:21" pos:end="377:23">eoh</name> <operator pos:start="377:25" pos:end="377:25">-</operator> <name pos:start="377:27" pos:end="377:34">hostinfo</name> <operator pos:start="377:36" pos:end="377:36">&lt;</operator> <sizeof pos:start="377:38" pos:end="377:52">sizeof<argument_list pos:start="377:44" pos:end="377:52">(<argument pos:start="377:45" pos:end="377:51"><expr pos:start="377:45" pos:end="377:51"><name pos:start="377:45" pos:end="377:51">hostbuf</name></expr></argument>)</argument_list></sizeof> <operator pos:start="377:54" pos:end="377:54">-</operator> <literal type="number" pos:start="377:56" pos:end="377:56">1</literal></expr>)</condition> <block pos:start="377:59" pos:end="565:17">{<block_content pos:start="379:21" pos:end="563:29">

                    <expr_stmt pos:start="379:21" pos:end="379:62"><expr pos:start="379:21" pos:end="379:61"><call pos:start="379:21" pos:end="379:61"><name pos:start="379:21" pos:end="379:26">memcpy</name><argument_list pos:start="379:27" pos:end="379:61">(<argument pos:start="379:28" pos:end="379:34"><expr pos:start="379:28" pos:end="379:34"><name pos:start="379:28" pos:end="379:34">hostbuf</name></expr></argument>, <argument pos:start="379:37" pos:end="379:44"><expr pos:start="379:37" pos:end="379:44"><name pos:start="379:37" pos:end="379:44">hostinfo</name></expr></argument>, <argument pos:start="379:47" pos:end="379:60"><expr pos:start="379:47" pos:end="379:60"><name pos:start="379:47" pos:end="379:49">eoh</name> <operator pos:start="379:51" pos:end="379:51">-</operator> <name pos:start="379:53" pos:end="379:60">hostinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="381:21" pos:end="381:48"><expr pos:start="381:21" pos:end="381:47"><name pos:start="381:21" pos:end="381:43"><name pos:start="381:21" pos:end="381:27">hostbuf</name><index pos:start="381:28" pos:end="381:43">[<expr pos:start="381:29" pos:end="381:42"><name pos:start="381:29" pos:end="381:31">eoh</name> <operator pos:start="381:33" pos:end="381:33">-</operator> <name pos:start="381:35" pos:end="381:42">hostinfo</name></expr>]</index></name> <operator pos:start="381:45" pos:end="381:45">=</operator> <literal type="number" pos:start="381:47" pos:end="381:47">0</literal></expr>;</expr_stmt>



                    <expr_stmt pos:start="385:21" pos:end="385:40"><expr pos:start="385:21" pos:end="385:39"><name pos:start="385:21" pos:end="385:33"><name pos:start="385:21" pos:end="385:21">c</name><operator pos:start="385:22" pos:end="385:23">-&gt;</operator><name pos:start="385:24" pos:end="385:33">http_error</name></name> <operator pos:start="385:35" pos:end="385:35">=</operator> <literal type="number" pos:start="385:37" pos:end="385:39">200</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="387:21" pos:end="387:34"><expr pos:start="387:21" pos:end="387:33"><name pos:start="387:21" pos:end="387:21">q</name> <operator pos:start="387:23" pos:end="387:23">=</operator> <name pos:start="387:25" pos:end="387:33"><name pos:start="387:25" pos:end="387:25">c</name><operator pos:start="387:26" pos:end="387:27">-&gt;</operator><name pos:start="387:28" pos:end="387:33">buffer</name></name></expr>;</expr_stmt>

                    <switch pos:start="389:21" pos:end="551:21">switch<condition pos:start="389:27" pos:end="389:38">(<expr pos:start="389:28" pos:end="389:37"><name pos:start="389:28" pos:end="389:37">redir_type</name></expr>)</condition> <block pos:start="389:40" pos:end="551:21">{<block_content pos:start="391:21" pos:end="549:30">

                    <case pos:start="391:21" pos:end="391:35">case <expr pos:start="391:26" pos:end="391:34"><name pos:start="391:26" pos:end="391:34">REDIR_ASX</name></expr>:</case>

                        <expr_stmt pos:start="393:25" pos:end="407:77"><expr pos:start="393:25" pos:end="407:76"><call pos:start="393:25" pos:end="407:76"><name pos:start="393:25" pos:end="393:32">snprintf</name><argument_list pos:start="393:33" pos:end="407:76">(<argument pos:start="393:34" pos:end="393:34"><expr pos:start="393:34" pos:end="393:34"><name pos:start="393:34" pos:end="393:34">q</name></expr></argument>, <argument pos:start="393:37" pos:end="393:50"><expr pos:start="393:37" pos:end="393:50"><name pos:start="393:37" pos:end="393:50"><name pos:start="393:37" pos:end="393:37">c</name><operator pos:start="393:38" pos:end="393:39">-&gt;</operator><name pos:start="393:40" pos:end="393:50">buffer_size</name></name></expr></argument>,

                                      <argument pos:start="395:39" pos:end="407:50"><expr pos:start="395:39" pos:end="407:50"><literal type="string" pos:start="395:39" pos:end="395:68">"HTTP/1.0 200 ASX Follows\r\n"</literal>

                                      <literal type="string" pos:start="397:39" pos:end="397:72">"Content-type: video/x-ms-asf\r\n"</literal>

                                      <literal type="string" pos:start="399:39" pos:end="399:44">"\r\n"</literal>

                                      <literal type="string" pos:start="401:39" pos:end="401:63">"&lt;ASX Version=\"3\"&gt;\r\n"</literal>

                                      <comment type="line" pos:start="403:39" pos:end="403:80">//"&lt;!-- Autogenerated by ffserver --&gt;\r\n"</comment>

                                      <literal type="string" pos:start="405:39" pos:end="405:89">"&lt;ENTRY&gt;&lt;REF HREF=\"http://%s/%s%s\"/&gt;&lt;/ENTRY&gt;\r\n"</literal>

                                      <literal type="string" pos:start="407:39" pos:end="407:50">"&lt;/ASX&gt;\r\n"</literal></expr></argument>, <argument pos:start="407:53" pos:end="407:59"><expr pos:start="407:53" pos:end="407:59"><name pos:start="407:53" pos:end="407:59">hostbuf</name></expr></argument>, <argument pos:start="407:62" pos:end="407:69"><expr pos:start="407:62" pos:end="407:69"><name pos:start="407:62" pos:end="407:69">filename</name></expr></argument>, <argument pos:start="407:72" pos:end="407:75"><expr pos:start="407:72" pos:end="407:75"><name pos:start="407:72" pos:end="407:75">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="409:25" pos:end="409:39"><expr pos:start="409:25" pos:end="409:38"><name pos:start="409:25" pos:end="409:25">q</name> <operator pos:start="409:27" pos:end="409:28">+=</operator> <call pos:start="409:30" pos:end="409:38"><name pos:start="409:30" pos:end="409:35">strlen</name><argument_list pos:start="409:36" pos:end="409:38">(<argument pos:start="409:37" pos:end="409:37"><expr pos:start="409:37" pos:end="409:37"><name pos:start="409:37" pos:end="409:37">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="411:25" pos:end="411:30">break;</break>

                    <case pos:start="413:21" pos:end="413:35">case <expr pos:start="413:26" pos:end="413:34"><name pos:start="413:26" pos:end="413:34">REDIR_RAM</name></expr>:</case>

                        <expr_stmt pos:start="415:25" pos:end="425:85"><expr pos:start="415:25" pos:end="425:84"><call pos:start="415:25" pos:end="425:84"><name pos:start="415:25" pos:end="415:32">snprintf</name><argument_list pos:start="415:33" pos:end="425:84">(<argument pos:start="415:34" pos:end="415:34"><expr pos:start="415:34" pos:end="415:34"><name pos:start="415:34" pos:end="415:34">q</name></expr></argument>, <argument pos:start="415:37" pos:end="415:50"><expr pos:start="415:37" pos:end="415:50"><name pos:start="415:37" pos:end="415:50"><name pos:start="415:37" pos:end="415:37">c</name><operator pos:start="415:38" pos:end="415:39">-&gt;</operator><name pos:start="415:40" pos:end="415:50">buffer_size</name></name></expr></argument>,

                                      <argument pos:start="417:39" pos:end="425:58"><expr pos:start="417:39" pos:end="425:58"><literal type="string" pos:start="417:39" pos:end="417:68">"HTTP/1.0 200 RAM Follows\r\n"</literal>

                                      <literal type="string" pos:start="419:39" pos:end="419:78">"Content-type: audio/x-pn-realaudio\r\n"</literal>

                                      <literal type="string" pos:start="421:39" pos:end="421:44">"\r\n"</literal>

                                      <literal type="string" pos:start="423:39" pos:end="423:71">"# Autogenerated by ffserver\r\n"</literal>

                                      <literal type="string" pos:start="425:39" pos:end="425:58">"http://%s/%s%s\r\n"</literal></expr></argument>, <argument pos:start="425:61" pos:end="425:67"><expr pos:start="425:61" pos:end="425:67"><name pos:start="425:61" pos:end="425:67">hostbuf</name></expr></argument>, <argument pos:start="425:70" pos:end="425:77"><expr pos:start="425:70" pos:end="425:77"><name pos:start="425:70" pos:end="425:77">filename</name></expr></argument>, <argument pos:start="425:80" pos:end="425:83"><expr pos:start="425:80" pos:end="425:83"><name pos:start="425:80" pos:end="425:83">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="427:25" pos:end="427:39"><expr pos:start="427:25" pos:end="427:38"><name pos:start="427:25" pos:end="427:25">q</name> <operator pos:start="427:27" pos:end="427:28">+=</operator> <call pos:start="427:30" pos:end="427:38"><name pos:start="427:30" pos:end="427:35">strlen</name><argument_list pos:start="427:36" pos:end="427:38">(<argument pos:start="427:37" pos:end="427:37"><expr pos:start="427:37" pos:end="427:37"><name pos:start="427:37" pos:end="427:37">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="429:25" pos:end="429:30">break;</break>

                    <case pos:start="431:21" pos:end="431:35">case <expr pos:start="431:26" pos:end="431:34"><name pos:start="431:26" pos:end="431:34">REDIR_ASF</name></expr>:</case>

                        <expr_stmt pos:start="433:25" pos:end="443:90"><expr pos:start="433:25" pos:end="443:89"><call pos:start="433:25" pos:end="443:89"><name pos:start="433:25" pos:end="433:32">snprintf</name><argument_list pos:start="433:33" pos:end="443:89">(<argument pos:start="433:34" pos:end="433:34"><expr pos:start="433:34" pos:end="433:34"><name pos:start="433:34" pos:end="433:34">q</name></expr></argument>, <argument pos:start="433:37" pos:end="433:50"><expr pos:start="433:37" pos:end="433:50"><name pos:start="433:37" pos:end="433:50"><name pos:start="433:37" pos:end="433:37">c</name><operator pos:start="433:38" pos:end="433:39">-&gt;</operator><name pos:start="433:40" pos:end="433:50">buffer_size</name></name></expr></argument>,

                                      <argument pos:start="435:39" pos:end="443:63"><expr pos:start="435:39" pos:end="443:63"><literal type="string" pos:start="435:39" pos:end="435:77">"HTTP/1.0 200 ASF Redirect follows\r\n"</literal>

                                      <literal type="string" pos:start="437:39" pos:end="437:72">"Content-type: video/x-ms-asf\r\n"</literal>

                                      <literal type="string" pos:start="439:39" pos:end="439:44">"\r\n"</literal>

                                      <literal type="string" pos:start="441:39" pos:end="441:55">"[Reference]\r\n"</literal>

                                      <literal type="string" pos:start="443:39" pos:end="443:63">"Ref1=http://%s/%s%s\r\n"</literal></expr></argument>, <argument pos:start="443:66" pos:end="443:72"><expr pos:start="443:66" pos:end="443:72"><name pos:start="443:66" pos:end="443:72">hostbuf</name></expr></argument>, <argument pos:start="443:75" pos:end="443:82"><expr pos:start="443:75" pos:end="443:82"><name pos:start="443:75" pos:end="443:82">filename</name></expr></argument>, <argument pos:start="443:85" pos:end="443:88"><expr pos:start="443:85" pos:end="443:88"><name pos:start="443:85" pos:end="443:88">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="445:25" pos:end="445:39"><expr pos:start="445:25" pos:end="445:38"><name pos:start="445:25" pos:end="445:25">q</name> <operator pos:start="445:27" pos:end="445:28">+=</operator> <call pos:start="445:30" pos:end="445:38"><name pos:start="445:30" pos:end="445:35">strlen</name><argument_list pos:start="445:36" pos:end="445:38">(<argument pos:start="445:37" pos:end="445:37"><expr pos:start="445:37" pos:end="445:37"><name pos:start="445:37" pos:end="445:37">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="447:25" pos:end="447:30">break;</break>

                    <case pos:start="449:21" pos:end="449:36">case <expr pos:start="449:26" pos:end="449:35"><name pos:start="449:26" pos:end="449:35">REDIR_RTSP</name></expr>:</case>

                        <block pos:start="451:25" pos:end="479:25">{<block_content pos:start="453:29" pos:end="477:43">

                            <decl_stmt pos:start="453:29" pos:end="453:51"><decl pos:start="453:29" pos:end="453:46"><type pos:start="453:29" pos:end="453:32"><name pos:start="453:29" pos:end="453:32">char</name></type> <name pos:start="453:34" pos:end="453:46"><name pos:start="453:34" pos:end="453:41">hostname</name><index pos:start="453:42" pos:end="453:46">[<expr pos:start="453:43" pos:end="453:45"><literal type="number" pos:start="453:43" pos:end="453:45">256</literal></expr>]</index></name></decl>, <decl pos:start="453:49" pos:end="453:50"><type ref="prev" pos:start="453:29" pos:end="453:32"><modifier pos:start="453:49" pos:end="453:49">*</modifier></type><name pos:start="453:50" pos:end="453:50">p</name></decl>;</decl_stmt>

                            <comment type="block" pos:start="455:29" pos:end="455:55">/* extract only hostname */</comment>

                            <expr_stmt pos:start="457:29" pos:end="457:76"><expr pos:start="457:29" pos:end="457:75"><call pos:start="457:29" pos:end="457:75"><name pos:start="457:29" pos:end="457:38">av_strlcpy</name><argument_list pos:start="457:39" pos:end="457:75">(<argument pos:start="457:40" pos:end="457:47"><expr pos:start="457:40" pos:end="457:47"><name pos:start="457:40" pos:end="457:47">hostname</name></expr></argument>, <argument pos:start="457:50" pos:end="457:56"><expr pos:start="457:50" pos:end="457:56"><name pos:start="457:50" pos:end="457:56">hostbuf</name></expr></argument>, <argument pos:start="457:59" pos:end="457:74"><expr pos:start="457:59" pos:end="457:74"><sizeof pos:start="457:59" pos:end="457:74">sizeof<argument_list pos:start="457:65" pos:end="457:74">(<argument pos:start="457:66" pos:end="457:73"><expr pos:start="457:66" pos:end="457:73"><name pos:start="457:66" pos:end="457:73">hostname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="459:29" pos:end="459:55"><expr pos:start="459:29" pos:end="459:54"><name pos:start="459:29" pos:end="459:29">p</name> <operator pos:start="459:31" pos:end="459:31">=</operator> <call pos:start="459:33" pos:end="459:54"><name pos:start="459:33" pos:end="459:39">strrchr</name><argument_list pos:start="459:40" pos:end="459:54">(<argument pos:start="459:41" pos:end="459:48"><expr pos:start="459:41" pos:end="459:48"><name pos:start="459:41" pos:end="459:48">hostname</name></expr></argument>, <argument pos:start="459:51" pos:end="459:53"><expr pos:start="459:51" pos:end="459:53"><literal type="char" pos:start="459:51" pos:end="459:53">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="461:29" pos:end="463:42"><if pos:start="461:29" pos:end="463:42">if <condition pos:start="461:32" pos:end="461:34">(<expr pos:start="461:33" pos:end="461:33"><name pos:start="461:33" pos:end="461:33">p</name></expr>)</condition><block type="pseudo" pos:start="463:33" pos:end="463:42"><block_content pos:start="463:33" pos:end="463:42">

                                <expr_stmt pos:start="463:33" pos:end="463:42"><expr pos:start="463:33" pos:end="463:41"><operator pos:start="463:33" pos:end="463:33">*</operator><name pos:start="463:34" pos:end="463:34">p</name> <operator pos:start="463:36" pos:end="463:36">=</operator> <literal type="char" pos:start="463:38" pos:end="463:41">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="465:29" pos:end="475:119"><expr pos:start="465:29" pos:end="475:118"><call pos:start="465:29" pos:end="475:118"><name pos:start="465:29" pos:end="465:36">snprintf</name><argument_list pos:start="465:37" pos:end="475:118">(<argument pos:start="465:38" pos:end="465:38"><expr pos:start="465:38" pos:end="465:38"><name pos:start="465:38" pos:end="465:38">q</name></expr></argument>, <argument pos:start="465:41" pos:end="465:54"><expr pos:start="465:41" pos:end="465:54"><name pos:start="465:41" pos:end="465:54"><name pos:start="465:41" pos:end="465:41">c</name><operator pos:start="465:42" pos:end="465:43">-&gt;</operator><name pos:start="465:44" pos:end="465:54">buffer_size</name></name></expr></argument>,

                                          <argument pos:start="467:43" pos:end="475:63"><expr pos:start="467:43" pos:end="475:63"><literal type="string" pos:start="467:43" pos:end="467:82">"HTTP/1.0 200 RTSP Redirect follows\r\n"</literal>

                                          <comment type="block" pos:start="469:43" pos:end="469:74">/* XXX: incorrect MIME type ? */</comment>

                                          <literal type="string" pos:start="471:43" pos:end="471:80">"Content-type: application/x-rtsp\r\n"</literal>

                                          <literal type="string" pos:start="473:43" pos:end="473:48">"\r\n"</literal>

                                          <literal type="string" pos:start="475:43" pos:end="475:63">"rtsp://%s:%d/%s\r\n"</literal></expr></argument>, <argument pos:start="475:66" pos:end="475:73"><expr pos:start="475:66" pos:end="475:73"><name pos:start="475:66" pos:end="475:73">hostname</name></expr></argument>, <argument pos:start="475:76" pos:end="475:107"><expr pos:start="475:76" pos:end="475:107"><call pos:start="475:76" pos:end="475:107"><name pos:start="475:76" pos:end="475:80">ntohs</name><argument_list pos:start="475:81" pos:end="475:107">(<argument pos:start="475:82" pos:end="475:106"><expr pos:start="475:82" pos:end="475:106"><name pos:start="475:82" pos:end="475:106"><name pos:start="475:82" pos:end="475:87">config</name><operator pos:start="475:88" pos:end="475:88">.</operator><name pos:start="475:89" pos:end="475:97">rtsp_addr</name><operator pos:start="475:98" pos:end="475:98">.</operator><name pos:start="475:99" pos:end="475:106">sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="475:110" pos:end="475:117"><expr pos:start="475:110" pos:end="475:117"><name pos:start="475:110" pos:end="475:117">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="477:29" pos:end="477:43"><expr pos:start="477:29" pos:end="477:42"><name pos:start="477:29" pos:end="477:29">q</name> <operator pos:start="477:31" pos:end="477:32">+=</operator> <call pos:start="477:34" pos:end="477:42"><name pos:start="477:34" pos:end="477:39">strlen</name><argument_list pos:start="477:40" pos:end="477:42">(<argument pos:start="477:41" pos:end="477:41"><expr pos:start="477:41" pos:end="477:41"><name pos:start="477:41" pos:end="477:41">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block>

                        <break pos:start="481:25" pos:end="481:30">break;</break>

                    <case pos:start="483:21" pos:end="483:35">case <expr pos:start="483:26" pos:end="483:34"><name pos:start="483:26" pos:end="483:34">REDIR_SDP</name></expr>:</case>

                        <block pos:start="485:25" pos:end="541:25">{<block_content pos:start="487:29" pos:end="539:29">

                            <decl_stmt pos:start="487:29" pos:end="487:46"><decl pos:start="487:29" pos:end="487:45"><type pos:start="487:29" pos:end="487:37"><name pos:start="487:29" pos:end="487:35">uint8_t</name> <modifier pos:start="487:37" pos:end="487:37">*</modifier></type><name pos:start="487:38" pos:end="487:45">sdp_data</name></decl>;</decl_stmt>

                            <decl_stmt pos:start="489:29" pos:end="489:46"><decl pos:start="489:29" pos:end="489:45"><type pos:start="489:29" pos:end="489:31"><name pos:start="489:29" pos:end="489:31">int</name></type> <name pos:start="489:33" pos:end="489:45">sdp_data_size</name></decl>;</decl_stmt>

                            <decl_stmt pos:start="491:29" pos:end="491:42"><decl pos:start="491:29" pos:end="491:41"><type pos:start="491:29" pos:end="491:37"><name pos:start="491:29" pos:end="491:37">socklen_t</name></type> <name pos:start="491:39" pos:end="491:41">len</name></decl>;</decl_stmt>

                            <decl_stmt pos:start="493:29" pos:end="493:55"><decl pos:start="493:29" pos:end="493:54"><type pos:start="493:29" pos:end="493:46"><name pos:start="493:29" pos:end="493:46"><name pos:start="493:29" pos:end="493:34">struct</name> <name pos:start="493:36" pos:end="493:46">sockaddr_in</name></name></type> <name pos:start="493:48" pos:end="493:54">my_addr</name></decl>;</decl_stmt>



                            <expr_stmt pos:start="497:29" pos:end="503:50"><expr pos:start="497:29" pos:end="503:49"><call pos:start="497:29" pos:end="503:49"><name pos:start="497:29" pos:end="497:36">snprintf</name><argument_list pos:start="497:37" pos:end="503:49">(<argument pos:start="497:38" pos:end="497:38"><expr pos:start="497:38" pos:end="497:38"><name pos:start="497:38" pos:end="497:38">q</name></expr></argument>, <argument pos:start="497:41" pos:end="497:54"><expr pos:start="497:41" pos:end="497:54"><name pos:start="497:41" pos:end="497:54"><name pos:start="497:41" pos:end="497:41">c</name><operator pos:start="497:42" pos:end="497:43">-&gt;</operator><name pos:start="497:44" pos:end="497:54">buffer_size</name></name></expr></argument>,

                                          <argument pos:start="499:43" pos:end="503:48"><expr pos:start="499:43" pos:end="503:48"><literal type="string" pos:start="499:43" pos:end="499:63">"HTTP/1.0 200 OK\r\n"</literal>

                                          <literal type="string" pos:start="501:43" pos:end="501:77">"Content-type: application/sdp\r\n"</literal>

                                          <literal type="string" pos:start="503:43" pos:end="503:48">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="505:29" pos:end="505:43"><expr pos:start="505:29" pos:end="505:42"><name pos:start="505:29" pos:end="505:29">q</name> <operator pos:start="505:31" pos:end="505:32">+=</operator> <call pos:start="505:34" pos:end="505:42"><name pos:start="505:34" pos:end="505:39">strlen</name><argument_list pos:start="505:40" pos:end="505:42">(<argument pos:start="505:41" pos:end="505:41"><expr pos:start="505:41" pos:end="505:41"><name pos:start="505:41" pos:end="505:41">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                            <expr_stmt pos:start="509:29" pos:end="509:50"><expr pos:start="509:29" pos:end="509:49"><name pos:start="509:29" pos:end="509:31">len</name> <operator pos:start="509:33" pos:end="509:33">=</operator> <sizeof pos:start="509:35" pos:end="509:49">sizeof<argument_list pos:start="509:41" pos:end="509:49">(<argument pos:start="509:42" pos:end="509:48"><expr pos:start="509:42" pos:end="509:48"><name pos:start="509:42" pos:end="509:48">my_addr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



                            <comment type="block" pos:start="513:29" pos:end="513:60">/* XXX: Should probably fail? */</comment>

                            <if_stmt pos:start="515:29" pos:end="517:67"><if pos:start="515:29" pos:end="517:67">if <condition pos:start="515:32" pos:end="515:86">(<expr pos:start="515:33" pos:end="515:85"><call pos:start="515:33" pos:end="515:85"><name pos:start="515:33" pos:end="515:43">getsockname</name><argument_list pos:start="515:44" pos:end="515:85">(<argument pos:start="515:45" pos:end="515:49"><expr pos:start="515:45" pos:end="515:49"><name pos:start="515:45" pos:end="515:49"><name pos:start="515:45" pos:end="515:45">c</name><operator pos:start="515:46" pos:end="515:47">-&gt;</operator><name pos:start="515:48" pos:end="515:49">fd</name></name></expr></argument>, <argument pos:start="515:52" pos:end="515:78"><expr pos:start="515:52" pos:end="515:78"><operator pos:start="515:52" pos:end="515:52">(</operator>struct <name pos:start="515:60" pos:end="515:67">sockaddr</name> <operator pos:start="515:69" pos:end="515:69">*</operator><operator pos:start="515:70" pos:end="515:70">)</operator><operator pos:start="515:71" pos:end="515:71">&amp;</operator><name pos:start="515:72" pos:end="515:78">my_addr</name></expr></argument>, <argument pos:start="515:81" pos:end="515:84"><expr pos:start="515:81" pos:end="515:84"><operator pos:start="515:81" pos:end="515:81">&amp;</operator><name pos:start="515:82" pos:end="515:84">len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="517:33" pos:end="517:67"><block_content pos:start="517:33" pos:end="517:67">

                                <expr_stmt pos:start="517:33" pos:end="517:67"><expr pos:start="517:33" pos:end="517:66"><call pos:start="517:33" pos:end="517:66"><name pos:start="517:33" pos:end="517:40">http_log</name><argument_list pos:start="517:41" pos:end="517:66">(<argument pos:start="517:42" pos:end="517:65"><expr pos:start="517:42" pos:end="517:65"><literal type="string" pos:start="517:42" pos:end="517:65">"getsockname() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



                            <comment type="block" pos:start="521:29" pos:end="521:66">/* XXX: should use a dynamic buffer */</comment>

                            <expr_stmt pos:start="523:29" pos:end="527:86"><expr pos:start="523:29" pos:end="527:85"><name pos:start="523:29" pos:end="523:41">sdp_data_size</name> <operator pos:start="523:43" pos:end="523:43">=</operator> <call pos:start="523:45" pos:end="527:85"><name pos:start="523:45" pos:end="523:67">prepare_sdp_description</name><argument_list pos:start="523:68" pos:end="527:85">(<argument pos:start="523:69" pos:end="523:74"><expr pos:start="523:69" pos:end="523:74"><name pos:start="523:69" pos:end="523:74">stream</name></expr></argument>,

                                                                    <argument pos:start="525:69" pos:end="525:77"><expr pos:start="525:69" pos:end="525:77"><operator pos:start="525:69" pos:end="525:69">&amp;</operator><name pos:start="525:70" pos:end="525:77">sdp_data</name></expr></argument>,

                                                                    <argument pos:start="527:69" pos:end="527:84"><expr pos:start="527:69" pos:end="527:84"><name pos:start="527:69" pos:end="527:84"><name pos:start="527:69" pos:end="527:75">my_addr</name><operator pos:start="527:76" pos:end="527:76">.</operator><name pos:start="527:77" pos:end="527:84">sin_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="529:29" pos:end="539:29"><if pos:start="529:29" pos:end="539:29">if <condition pos:start="529:32" pos:end="529:50">(<expr pos:start="529:33" pos:end="529:49"><name pos:start="529:33" pos:end="529:45">sdp_data_size</name> <operator pos:start="529:47" pos:end="529:47">&gt;</operator> <literal type="number" pos:start="529:49" pos:end="529:49">0</literal></expr>)</condition> <block pos:start="529:52" pos:end="539:29">{<block_content pos:start="531:33" pos:end="537:50">

                                <expr_stmt pos:start="531:33" pos:end="531:67"><expr pos:start="531:33" pos:end="531:66"><call pos:start="531:33" pos:end="531:66"><name pos:start="531:33" pos:end="531:38">memcpy</name><argument_list pos:start="531:39" pos:end="531:66">(<argument pos:start="531:40" pos:end="531:40"><expr pos:start="531:40" pos:end="531:40"><name pos:start="531:40" pos:end="531:40">q</name></expr></argument>, <argument pos:start="531:43" pos:end="531:50"><expr pos:start="531:43" pos:end="531:50"><name pos:start="531:43" pos:end="531:50">sdp_data</name></expr></argument>, <argument pos:start="531:53" pos:end="531:65"><expr pos:start="531:53" pos:end="531:65"><name pos:start="531:53" pos:end="531:65">sdp_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="533:33" pos:end="533:51"><expr pos:start="533:33" pos:end="533:50"><name pos:start="533:33" pos:end="533:33">q</name> <operator pos:start="533:35" pos:end="533:36">+=</operator> <name pos:start="533:38" pos:end="533:50">sdp_data_size</name></expr>;</expr_stmt>

                                <expr_stmt pos:start="535:33" pos:end="535:42"><expr pos:start="535:33" pos:end="535:41"><operator pos:start="535:33" pos:end="535:33">*</operator><name pos:start="535:34" pos:end="535:34">q</name> <operator pos:start="535:36" pos:end="535:36">=</operator> <literal type="char" pos:start="535:38" pos:end="535:41">'\0'</literal></expr>;</expr_stmt>

                                <expr_stmt pos:start="537:33" pos:end="537:50"><expr pos:start="537:33" pos:end="537:49"><call pos:start="537:33" pos:end="537:49"><name pos:start="537:33" pos:end="537:39">av_free</name><argument_list pos:start="537:40" pos:end="537:49">(<argument pos:start="537:41" pos:end="537:48"><expr pos:start="537:41" pos:end="537:48"><name pos:start="537:41" pos:end="537:48">sdp_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if></if_stmt>

                        </block_content>}</block>

                        <break pos:start="543:25" pos:end="543:30">break;</break>

                    <default pos:start="545:21" pos:end="545:28">default:</default>

                        <expr_stmt pos:start="547:25" pos:end="547:32"><expr pos:start="547:25" pos:end="547:31"><call pos:start="547:25" pos:end="547:31"><name pos:start="547:25" pos:end="547:29">abort</name><argument_list pos:start="547:30" pos:end="547:31">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="549:25" pos:end="549:30">break;</break>

                    </block_content>}</block></switch>



                    <comment type="block" pos:start="555:21" pos:end="555:47">/* prepare output buffer */</comment>

                    <expr_stmt pos:start="557:21" pos:end="557:46"><expr pos:start="557:21" pos:end="557:45"><name pos:start="557:21" pos:end="557:33"><name pos:start="557:21" pos:end="557:21">c</name><operator pos:start="557:22" pos:end="557:23">-&gt;</operator><name pos:start="557:24" pos:end="557:33">buffer_ptr</name></name> <operator pos:start="557:35" pos:end="557:35">=</operator> <name pos:start="557:37" pos:end="557:45"><name pos:start="557:37" pos:end="557:37">c</name><operator pos:start="557:38" pos:end="557:39">-&gt;</operator><name pos:start="557:40" pos:end="557:45">buffer</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="559:21" pos:end="559:38"><expr pos:start="559:21" pos:end="559:37"><name pos:start="559:21" pos:end="559:33"><name pos:start="559:21" pos:end="559:21">c</name><operator pos:start="559:22" pos:end="559:23">-&gt;</operator><name pos:start="559:24" pos:end="559:33">buffer_end</name></name> <operator pos:start="559:35" pos:end="559:35">=</operator> <name pos:start="559:37" pos:end="559:37">q</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="561:21" pos:end="561:53"><expr pos:start="561:21" pos:end="561:52"><name pos:start="561:21" pos:end="561:28"><name pos:start="561:21" pos:end="561:21">c</name><operator pos:start="561:22" pos:end="561:23">-&gt;</operator><name pos:start="561:24" pos:end="561:28">state</name></name> <operator pos:start="561:30" pos:end="561:30">=</operator> <name pos:start="561:32" pos:end="561:52">HTTPSTATE_SEND_HEADER</name></expr>;</expr_stmt>

                    <return pos:start="563:21" pos:end="563:29">return <expr pos:start="563:28" pos:end="563:28"><literal type="number" pos:start="563:28" pos:end="563:28">0</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="573:9" pos:end="573:63"><expr pos:start="573:9" pos:end="573:62"><call pos:start="573:9" pos:end="573:62"><name pos:start="573:9" pos:end="573:16">snprintf</name><argument_list pos:start="573:17" pos:end="573:62">(<argument pos:start="573:18" pos:end="573:20"><expr pos:start="573:18" pos:end="573:20"><name pos:start="573:18" pos:end="573:20">msg</name></expr></argument>, <argument pos:start="573:23" pos:end="573:33"><expr pos:start="573:23" pos:end="573:33"><sizeof pos:start="573:23" pos:end="573:33">sizeof<argument_list pos:start="573:29" pos:end="573:33">(<argument pos:start="573:30" pos:end="573:32"><expr pos:start="573:30" pos:end="573:32"><name pos:start="573:30" pos:end="573:32">msg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="573:36" pos:end="573:61"><expr pos:start="573:36" pos:end="573:61"><literal type="string" pos:start="573:36" pos:end="573:61">"ASX/RAM file not handled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="575:9" pos:end="575:24">goto <name pos:start="575:14" pos:end="575:23">send_error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="581:5" pos:end="581:27"><expr pos:start="581:5" pos:end="581:26"><name pos:start="581:5" pos:end="581:24"><name pos:start="581:5" pos:end="581:10">stream</name><operator pos:start="581:11" pos:end="581:12">-&gt;</operator><name pos:start="581:13" pos:end="581:24">conns_served</name></name><operator pos:start="581:25" pos:end="581:26">++</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="585:5" pos:end="585:50">/* XXX: add there authenticate and IP match */</comment>



    <if_stmt pos:start="589:5" pos:end="720:0"><if pos:start="589:5" pos:end="720:0">if <condition pos:start="589:8" pos:end="589:16">(<expr pos:start="589:9" pos:end="589:15"><name pos:start="589:9" pos:end="589:15"><name pos:start="589:9" pos:end="589:9">c</name><operator pos:start="589:10" pos:end="589:11">-&gt;</operator><name pos:start="589:12" pos:end="589:15">post</name></name></expr>)</condition> <block pos:start="589:18" pos:end="720:0">{<block_content pos:start="593:9" pos:end="713:17">

        <comment type="block" pos:start="591:9" pos:end="591:52">/* if post, it means a feed is being sent */</comment>

        <if_stmt pos:start="593:9" pos:end="699:9"><if pos:start="593:9" pos:end="699:9">if <condition pos:start="593:12" pos:end="593:29">(<expr pos:start="593:13" pos:end="593:28"><operator pos:start="593:13" pos:end="593:13">!</operator><name pos:start="593:14" pos:end="593:28"><name pos:start="593:14" pos:end="593:19">stream</name><operator pos:start="593:20" pos:end="593:21">-&gt;</operator><name pos:start="593:22" pos:end="593:28">is_feed</name></name></expr>)</condition> <block pos:start="593:31" pos:end="699:9">{<block_content pos:start="599:13" pos:end="697:28">

            <comment type="block" pos:start="595:13" pos:end="597:54">/* However it might be a status report from WMP! Let us log the

             * data as it might come handy one day. */</comment>

            <decl_stmt pos:start="599:13" pos:end="599:36"><decl pos:start="599:13" pos:end="599:35"><type pos:start="599:13" pos:end="599:24"><specifier pos:start="599:13" pos:end="599:17">const</specifier> <name pos:start="599:19" pos:end="599:22">char</name> <modifier pos:start="599:24" pos:end="599:24">*</modifier></type><name pos:start="599:25" pos:end="599:31">logline</name> <init pos:start="599:33" pos:end="599:35">= <expr pos:start="599:35" pos:end="599:35"><literal type="number" pos:start="599:35" pos:end="599:35">0</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="601:13" pos:end="601:30"><decl pos:start="601:13" pos:end="601:29"><type pos:start="601:13" pos:end="601:15"><name pos:start="601:13" pos:end="601:15">int</name></type> <name pos:start="601:17" pos:end="601:25">client_id</name> <init pos:start="601:27" pos:end="601:29">= <expr pos:start="601:29" pos:end="601:29"><literal type="number" pos:start="601:29" pos:end="601:29">0</literal></expr></init></decl>;</decl_stmt>



            <for pos:start="605:13" pos:end="629:13">for <control pos:start="605:17" pos:end="605:65">(<init pos:start="605:18" pos:end="605:31"><expr pos:start="605:18" pos:end="605:30"><name pos:start="605:18" pos:end="605:18">p</name> <operator pos:start="605:20" pos:end="605:20">=</operator> <name pos:start="605:22" pos:end="605:30"><name pos:start="605:22" pos:end="605:22">c</name><operator pos:start="605:23" pos:end="605:24">-&gt;</operator><name pos:start="605:25" pos:end="605:30">buffer</name></name></expr>;</init> <condition pos:start="605:33" pos:end="605:63"><expr pos:start="605:33" pos:end="605:62"><operator pos:start="605:33" pos:end="605:33">*</operator><name pos:start="605:34" pos:end="605:34">p</name> <operator pos:start="605:36" pos:end="605:37">&amp;&amp;</operator> <operator pos:start="605:39" pos:end="605:39">*</operator><name pos:start="605:40" pos:end="605:40">p</name> <operator pos:start="605:42" pos:end="605:43">!=</operator> <literal type="char" pos:start="605:45" pos:end="605:48">'\r'</literal> <operator pos:start="605:50" pos:end="605:51">&amp;&amp;</operator> <operator pos:start="605:53" pos:end="605:53">*</operator><name pos:start="605:54" pos:end="605:54">p</name> <operator pos:start="605:56" pos:end="605:57">!=</operator> <literal type="char" pos:start="605:59" pos:end="605:62">'\n'</literal></expr>;</condition> <incr/>)</control> <block pos:start="605:67" pos:end="629:13">{<block_content pos:start="607:17" pos:end="627:20">

                <if_stmt pos:start="607:17" pos:end="613:17"><if pos:start="607:17" pos:end="613:17">if <condition pos:start="607:20" pos:end="607:68">(<expr pos:start="607:21" pos:end="607:67"><call pos:start="607:21" pos:end="607:62"><name pos:start="607:21" pos:end="607:34">av_strncasecmp</name><argument_list pos:start="607:35" pos:end="607:62">(<argument pos:start="607:36" pos:end="607:36"><expr pos:start="607:36" pos:end="607:36"><name pos:start="607:36" pos:end="607:36">p</name></expr></argument>, <argument pos:start="607:39" pos:end="607:57"><expr pos:start="607:39" pos:end="607:57"><literal type="string" pos:start="607:39" pos:end="607:57">"Pragma: log-line="</literal></expr></argument>, <argument pos:start="607:60" pos:end="607:61"><expr pos:start="607:60" pos:end="607:61"><literal type="number" pos:start="607:60" pos:end="607:61">17</literal></expr></argument>)</argument_list></call> <operator pos:start="607:64" pos:end="607:65">==</operator> <literal type="number" pos:start="607:67" pos:end="607:67">0</literal></expr>)</condition> <block pos:start="607:70" pos:end="613:17">{<block_content pos:start="609:21" pos:end="611:26">

                    <expr_stmt pos:start="609:21" pos:end="609:32"><expr pos:start="609:21" pos:end="609:31"><name pos:start="609:21" pos:end="609:27">logline</name> <operator pos:start="609:29" pos:end="609:29">=</operator> <name pos:start="609:31" pos:end="609:31">p</name></expr>;</expr_stmt>

                    <break pos:start="611:21" pos:end="611:26">break;</break>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="615:17" pos:end="617:54"><if pos:start="615:17" pos:end="617:54">if <condition pos:start="615:20" pos:end="615:69">(<expr pos:start="615:21" pos:end="615:68"><call pos:start="615:21" pos:end="615:63"><name pos:start="615:21" pos:end="615:34">av_strncasecmp</name><argument_list pos:start="615:35" pos:end="615:63">(<argument pos:start="615:36" pos:end="615:36"><expr pos:start="615:36" pos:end="615:36"><name pos:start="615:36" pos:end="615:36">p</name></expr></argument>, <argument pos:start="615:39" pos:end="615:58"><expr pos:start="615:39" pos:end="615:58"><literal type="string" pos:start="615:39" pos:end="615:58">"Pragma: client-id="</literal></expr></argument>, <argument pos:start="615:61" pos:end="615:62"><expr pos:start="615:61" pos:end="615:62"><literal type="number" pos:start="615:61" pos:end="615:62">18</literal></expr></argument>)</argument_list></call> <operator pos:start="615:65" pos:end="615:66">==</operator> <literal type="number" pos:start="615:68" pos:end="615:68">0</literal></expr>)</condition><block type="pseudo" pos:start="617:21" pos:end="617:54"><block_content pos:start="617:21" pos:end="617:54">

                    <expr_stmt pos:start="617:21" pos:end="617:54"><expr pos:start="617:21" pos:end="617:53"><name pos:start="617:21" pos:end="617:29">client_id</name> <operator pos:start="617:31" pos:end="617:31">=</operator> <call pos:start="617:33" pos:end="617:53"><name pos:start="617:33" pos:end="617:38">strtol</name><argument_list pos:start="617:39" pos:end="617:53">(<argument pos:start="617:40" pos:end="617:45"><expr pos:start="617:40" pos:end="617:45"><name pos:start="617:40" pos:end="617:40">p</name> <operator pos:start="617:42" pos:end="617:42">+</operator> <literal type="number" pos:start="617:44" pos:end="617:45">18</literal></expr></argument>, <argument pos:start="617:48" pos:end="617:48"><expr pos:start="617:48" pos:end="617:48"><literal type="number" pos:start="617:48" pos:end="617:48">0</literal></expr></argument>, <argument pos:start="617:51" pos:end="617:52"><expr pos:start="617:51" pos:end="617:52"><literal type="number" pos:start="617:51" pos:end="617:52">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="619:17" pos:end="619:36"><expr pos:start="619:17" pos:end="619:35"><name pos:start="619:17" pos:end="619:17">p</name> <operator pos:start="619:19" pos:end="619:19">=</operator> <call pos:start="619:21" pos:end="619:35"><name pos:start="619:21" pos:end="619:26">strchr</name><argument_list pos:start="619:27" pos:end="619:35">(<argument pos:start="619:28" pos:end="619:28"><expr pos:start="619:28" pos:end="619:28"><name pos:start="619:28" pos:end="619:28">p</name></expr></argument>, <argument pos:start="619:31" pos:end="619:34"><expr pos:start="619:31" pos:end="619:34"><literal type="char" pos:start="619:31" pos:end="619:34">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="621:17" pos:end="623:26"><if pos:start="621:17" pos:end="623:26">if <condition pos:start="621:20" pos:end="621:23">(<expr pos:start="621:21" pos:end="621:22"><operator pos:start="621:21" pos:end="621:21">!</operator><name pos:start="621:22" pos:end="621:22">p</name></expr>)</condition><block type="pseudo" pos:start="623:21" pos:end="623:26"><block_content pos:start="623:21" pos:end="623:26">

                    <break pos:start="623:21" pos:end="623:26">break;</break></block_content></block></if></if_stmt>



                <expr_stmt pos:start="627:17" pos:end="627:20"><expr pos:start="627:17" pos:end="627:19"><name pos:start="627:17" pos:end="627:17">p</name><operator pos:start="627:18" pos:end="627:19">++</operator></expr>;</expr_stmt>

            </block_content>}</block></for>



            <if_stmt pos:start="633:13" pos:end="660:0"><if pos:start="633:13" pos:end="660:0">if <condition pos:start="633:16" pos:end="633:24">(<expr pos:start="633:17" pos:end="633:23"><name pos:start="633:17" pos:end="633:23">logline</name></expr>)</condition> <block pos:start="633:26" pos:end="660:0">{<block_content pos:start="635:17" pos:end="653:17">

                <decl_stmt pos:start="635:17" pos:end="635:50"><decl pos:start="635:17" pos:end="635:49"><type pos:start="635:17" pos:end="635:22"><name pos:start="635:17" pos:end="635:20">char</name> <modifier pos:start="635:22" pos:end="635:22">*</modifier></type><name pos:start="635:23" pos:end="635:25">eol</name> <init pos:start="635:27" pos:end="635:49">= <expr pos:start="635:29" pos:end="635:49"><call pos:start="635:29" pos:end="635:49"><name pos:start="635:29" pos:end="635:34">strchr</name><argument_list pos:start="635:35" pos:end="635:49">(<argument pos:start="635:36" pos:end="635:42"><expr pos:start="635:36" pos:end="635:42"><name pos:start="635:36" pos:end="635:42">logline</name></expr></argument>, <argument pos:start="635:45" pos:end="635:48"><expr pos:start="635:45" pos:end="635:48"><literal type="char" pos:start="635:45" pos:end="635:48">'\n'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="639:17" pos:end="639:30"><expr pos:start="639:17" pos:end="639:29"><name pos:start="639:17" pos:end="639:23">logline</name> <operator pos:start="639:25" pos:end="639:26">+=</operator> <literal type="number" pos:start="639:28" pos:end="639:29">17</literal></expr>;</expr_stmt>



                <if_stmt pos:start="643:17" pos:end="653:17"><if pos:start="643:17" pos:end="653:17">if <condition pos:start="643:20" pos:end="643:24">(<expr pos:start="643:21" pos:end="643:23"><name pos:start="643:21" pos:end="643:23">eol</name></expr>)</condition> <block pos:start="643:26" pos:end="653:17">{<block_content pos:start="645:21" pos:end="651:40">

                    <if_stmt pos:start="645:21" pos:end="647:30"><if pos:start="645:21" pos:end="647:30">if <condition pos:start="645:24" pos:end="645:40">(<expr pos:start="645:25" pos:end="645:39"><name pos:start="645:25" pos:end="645:31"><name pos:start="645:25" pos:end="645:27">eol</name><index pos:start="645:28" pos:end="645:31">[<expr pos:start="645:29" pos:end="645:30"><operator pos:start="645:29" pos:end="645:29">-</operator><literal type="number" pos:start="645:30" pos:end="645:30">1</literal></expr>]</index></name> <operator pos:start="645:33" pos:end="645:34">==</operator> <literal type="char" pos:start="645:36" pos:end="645:39">'\r'</literal></expr>)</condition><block type="pseudo" pos:start="647:25" pos:end="647:30"><block_content pos:start="647:25" pos:end="647:30">

                        <expr_stmt pos:start="647:25" pos:end="647:30"><expr pos:start="647:25" pos:end="647:29"><name pos:start="647:25" pos:end="647:27">eol</name><operator pos:start="647:28" pos:end="647:29">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="649:21" pos:end="649:71"><expr pos:start="649:21" pos:end="649:70"><call pos:start="649:21" pos:end="649:70"><name pos:start="649:21" pos:end="649:28">http_log</name><argument_list pos:start="649:29" pos:end="649:70">(<argument pos:start="649:30" pos:end="649:37"><expr pos:start="649:30" pos:end="649:37"><literal type="string" pos:start="649:30" pos:end="649:37">"%.*s\n"</literal></expr></argument>, <argument pos:start="649:40" pos:end="649:60"><expr pos:start="649:40" pos:end="649:60"><operator pos:start="649:40" pos:end="649:40">(</operator><name pos:start="649:41" pos:end="649:43">int</name><operator pos:start="649:44" pos:end="649:44">)</operator> <operator pos:start="649:46" pos:end="649:46">(</operator><name pos:start="649:47" pos:end="649:49">eol</name> <operator pos:start="649:51" pos:end="649:51">-</operator> <name pos:start="649:53" pos:end="649:59">logline</name><operator pos:start="649:60" pos:end="649:60">)</operator></expr></argument>, <argument pos:start="649:63" pos:end="649:69"><expr pos:start="649:63" pos:end="649:69"><name pos:start="649:63" pos:end="649:69">logline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="651:21" pos:end="651:40"><expr pos:start="651:21" pos:end="651:39"><name pos:start="651:21" pos:end="651:35"><name pos:start="651:21" pos:end="651:21">c</name><operator pos:start="651:22" pos:end="651:23">-&gt;</operator><name pos:start="651:24" pos:end="651:35">suppress_log</name></name> <operator pos:start="651:37" pos:end="651:37">=</operator> <literal type="number" pos:start="651:39" pos:end="651:39">1</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="659:1" pos:end="659:12">#<cpp:directive pos:start="659:2" pos:end="659:6">ifdef</cpp:directive> <name pos:start="659:8" pos:end="659:12">DEBUG</name></cpp:ifdef>

            <expr_stmt pos:start="661:13" pos:end="664:0"><expr pos:start="661:13" pos:end="661:55"><call pos:start="661:13" pos:end="661:55"><name pos:start="661:13" pos:end="661:20">http_log</name><argument_list pos:start="661:21" pos:end="661:55">(<argument pos:start="661:22" pos:end="661:43"><expr pos:start="661:22" pos:end="661:43"><literal type="string" pos:start="661:22" pos:end="661:43">"\nGot request:\n%s\n"</literal></expr></argument>, <argument pos:start="661:46" pos:end="661:54"><expr pos:start="661:46" pos:end="661:54"><name pos:start="661:46" pos:end="661:54"><name pos:start="661:46" pos:end="661:46">c</name><operator pos:start="661:47" pos:end="661:48">-&gt;</operator><name pos:start="661:49" pos:end="661:54">buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="663:1" pos:end="663:6">#<cpp:directive pos:start="663:2" pos:end="663:6">endif</cpp:directive></cpp:endif>



            <if_stmt pos:start="667:13" pos:end="689:13"><if pos:start="667:13" pos:end="689:13">if <condition pos:start="667:16" pos:end="667:80">(<expr pos:start="667:17" pos:end="667:79"><name pos:start="667:17" pos:end="667:25">client_id</name> <operator pos:start="667:27" pos:end="667:28">&amp;&amp;</operator> <call pos:start="667:30" pos:end="667:79"><name pos:start="667:30" pos:end="667:42">extract_rates</name><argument_list pos:start="667:43" pos:end="667:79">(<argument pos:start="667:44" pos:end="667:50"><expr pos:start="667:44" pos:end="667:50"><name pos:start="667:44" pos:end="667:50">ratebuf</name></expr></argument>, <argument pos:start="667:53" pos:end="667:67"><expr pos:start="667:53" pos:end="667:67"><sizeof pos:start="667:53" pos:end="667:67">sizeof<argument_list pos:start="667:59" pos:end="667:67">(<argument pos:start="667:60" pos:end="667:66"><expr pos:start="667:60" pos:end="667:66"><name pos:start="667:60" pos:end="667:66">ratebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="667:70" pos:end="667:78"><expr pos:start="667:70" pos:end="667:78"><name pos:start="667:70" pos:end="667:78"><name pos:start="667:70" pos:end="667:70">c</name><operator pos:start="667:71" pos:end="667:72">-&gt;</operator><name pos:start="667:73" pos:end="667:78">buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="667:82" pos:end="689:13">{<block_content pos:start="669:17" pos:end="687:45">

                <decl_stmt pos:start="669:17" pos:end="669:34"><decl pos:start="669:17" pos:end="669:33"><type pos:start="669:17" pos:end="669:29"><name pos:start="669:17" pos:end="669:27">HTTPContext</name> <modifier pos:start="669:29" pos:end="669:29">*</modifier></type><name pos:start="669:30" pos:end="669:33">wmpc</name></decl>;</decl_stmt>



                <comment type="block" pos:start="673:17" pos:end="673:55">/* Now we have to find the client_id */</comment>

                <for pos:start="675:17" pos:end="681:17">for <control pos:start="675:21" pos:end="675:68">(<init pos:start="675:22" pos:end="675:43"><expr pos:start="675:22" pos:end="675:42"><name pos:start="675:22" pos:end="675:25">wmpc</name> <operator pos:start="675:27" pos:end="675:27">=</operator> <name pos:start="675:29" pos:end="675:42">first_http_ctx</name></expr>;</init> <condition pos:start="675:45" pos:end="675:49"><expr pos:start="675:45" pos:end="675:48"><name pos:start="675:45" pos:end="675:48">wmpc</name></expr>;</condition> <incr pos:start="675:51" pos:end="675:67"><expr pos:start="675:51" pos:end="675:67"><name pos:start="675:51" pos:end="675:54">wmpc</name> <operator pos:start="675:56" pos:end="675:56">=</operator> <name pos:start="675:58" pos:end="675:67"><name pos:start="675:58" pos:end="675:61">wmpc</name><operator pos:start="675:62" pos:end="675:63">-&gt;</operator><name pos:start="675:64" pos:end="675:67">next</name></name></expr></incr>)</control> <block pos:start="675:70" pos:end="681:17">{<block_content pos:start="677:21" pos:end="679:30">

                    <if_stmt pos:start="677:21" pos:end="679:30"><if pos:start="677:21" pos:end="679:30">if <condition pos:start="677:24" pos:end="677:57">(<expr pos:start="677:25" pos:end="677:56"><name pos:start="677:25" pos:end="677:43"><name pos:start="677:25" pos:end="677:28">wmpc</name><operator pos:start="677:29" pos:end="677:30">-&gt;</operator><name pos:start="677:31" pos:end="677:43">wmp_client_id</name></name> <operator pos:start="677:45" pos:end="677:46">==</operator> <name pos:start="677:48" pos:end="677:56">client_id</name></expr>)</condition><block type="pseudo" pos:start="679:25" pos:end="679:30"><block_content pos:start="679:25" pos:end="679:30">

                        <break pos:start="679:25" pos:end="679:30">break;</break></block_content></block></if></if_stmt>

                </block_content>}</block></for>



                <if_stmt pos:start="685:17" pos:end="687:45"><if pos:start="685:17" pos:end="687:45">if <condition pos:start="685:20" pos:end="685:65">(<expr pos:start="685:21" pos:end="685:64"><name pos:start="685:21" pos:end="685:24">wmpc</name> <operator pos:start="685:26" pos:end="685:27">&amp;&amp;</operator> <call pos:start="685:29" pos:end="685:64"><name pos:start="685:29" pos:end="685:49">modify_current_stream</name><argument_list pos:start="685:50" pos:end="685:64">(<argument pos:start="685:51" pos:end="685:54"><expr pos:start="685:51" pos:end="685:54"><name pos:start="685:51" pos:end="685:54">wmpc</name></expr></argument>, <argument pos:start="685:57" pos:end="685:63"><expr pos:start="685:57" pos:end="685:63"><name pos:start="685:57" pos:end="685:63">ratebuf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="687:21" pos:end="687:45"><block_content pos:start="687:21" pos:end="687:45">

                    <expr_stmt pos:start="687:21" pos:end="687:45"><expr pos:start="687:21" pos:end="687:44"><name pos:start="687:21" pos:end="687:40"><name pos:start="687:21" pos:end="687:24">wmpc</name><operator pos:start="687:25" pos:end="687:26">-&gt;</operator><name pos:start="687:27" pos:end="687:40">switch_pending</name></name> <operator pos:start="687:42" pos:end="687:42">=</operator> <literal type="number" pos:start="687:44" pos:end="687:44">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="693:13" pos:end="693:67"><expr pos:start="693:13" pos:end="693:66"><call pos:start="693:13" pos:end="693:66"><name pos:start="693:13" pos:end="693:20">snprintf</name><argument_list pos:start="693:21" pos:end="693:66">(<argument pos:start="693:22" pos:end="693:24"><expr pos:start="693:22" pos:end="693:24"><name pos:start="693:22" pos:end="693:24">msg</name></expr></argument>, <argument pos:start="693:27" pos:end="693:37"><expr pos:start="693:27" pos:end="693:37"><sizeof pos:start="693:27" pos:end="693:37">sizeof<argument_list pos:start="693:33" pos:end="693:37">(<argument pos:start="693:34" pos:end="693:36"><expr pos:start="693:34" pos:end="693:36"><name pos:start="693:34" pos:end="693:36">msg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="693:40" pos:end="693:65"><expr pos:start="693:40" pos:end="693:65"><literal type="string" pos:start="693:40" pos:end="693:65">"POST command not handled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="695:13" pos:end="695:26"><expr pos:start="695:13" pos:end="695:25"><name pos:start="695:13" pos:end="695:21"><name pos:start="695:13" pos:end="695:13">c</name><operator pos:start="695:14" pos:end="695:15">-&gt;</operator><name pos:start="695:16" pos:end="695:21">stream</name></name> <operator pos:start="695:23" pos:end="695:23">=</operator> <literal type="number" pos:start="695:25" pos:end="695:25">0</literal></expr>;</expr_stmt>

            <goto pos:start="697:13" pos:end="697:28">goto <name pos:start="697:18" pos:end="697:27">send_error</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="701:9" pos:end="707:9"><if pos:start="701:9" pos:end="707:9">if <condition pos:start="701:12" pos:end="701:43">(<expr pos:start="701:13" pos:end="701:42"><call pos:start="701:13" pos:end="701:38"><name pos:start="701:13" pos:end="701:35">http_start_receive_data</name><argument_list pos:start="701:36" pos:end="701:38">(<argument pos:start="701:37" pos:end="701:37"><expr pos:start="701:37" pos:end="701:37"><name pos:start="701:37" pos:end="701:37">c</name></expr></argument>)</argument_list></call> <operator pos:start="701:40" pos:end="701:40">&lt;</operator> <literal type="number" pos:start="701:42" pos:end="701:42">0</literal></expr>)</condition> <block pos:start="701:45" pos:end="707:9">{<block_content pos:start="703:13" pos:end="705:28">

            <expr_stmt pos:start="703:13" pos:end="703:62"><expr pos:start="703:13" pos:end="703:61"><call pos:start="703:13" pos:end="703:61"><name pos:start="703:13" pos:end="703:20">snprintf</name><argument_list pos:start="703:21" pos:end="703:61">(<argument pos:start="703:22" pos:end="703:24"><expr pos:start="703:22" pos:end="703:24"><name pos:start="703:22" pos:end="703:24">msg</name></expr></argument>, <argument pos:start="703:27" pos:end="703:37"><expr pos:start="703:27" pos:end="703:37"><sizeof pos:start="703:27" pos:end="703:37">sizeof<argument_list pos:start="703:33" pos:end="703:37">(<argument pos:start="703:34" pos:end="703:36"><expr pos:start="703:34" pos:end="703:36"><name pos:start="703:34" pos:end="703:36">msg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="703:40" pos:end="703:60"><expr pos:start="703:40" pos:end="703:60"><literal type="string" pos:start="703:40" pos:end="703:60">"could not open feed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="705:13" pos:end="705:28">goto <name pos:start="705:18" pos:end="705:27">send_error</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="709:9" pos:end="709:26"><expr pos:start="709:9" pos:end="709:25"><name pos:start="709:9" pos:end="709:21"><name pos:start="709:9" pos:end="709:9">c</name><operator pos:start="709:10" pos:end="709:11">-&gt;</operator><name pos:start="709:12" pos:end="709:21">http_error</name></name> <operator pos:start="709:23" pos:end="709:23">=</operator> <literal type="number" pos:start="709:25" pos:end="709:25">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="711:9" pos:end="711:42"><expr pos:start="711:9" pos:end="711:41"><name pos:start="711:9" pos:end="711:16"><name pos:start="711:9" pos:end="711:9">c</name><operator pos:start="711:10" pos:end="711:11">-&gt;</operator><name pos:start="711:12" pos:end="711:16">state</name></name> <operator pos:start="711:18" pos:end="711:18">=</operator> <name pos:start="711:20" pos:end="711:41">HTTPSTATE_RECEIVE_DATA</name></expr>;</expr_stmt>

        <return pos:start="713:9" pos:end="713:17">return <expr pos:start="713:16" pos:end="713:16"><literal type="number" pos:start="713:16" pos:end="713:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="719:1" pos:end="719:12">#<cpp:directive pos:start="719:2" pos:end="719:6">ifdef</cpp:directive> <name pos:start="719:8" pos:end="719:12">DEBUG</name></cpp:ifdef>

    <if_stmt pos:start="721:5" pos:end="726:0"><if pos:start="721:5" pos:end="726:0">if <condition pos:start="721:8" pos:end="721:77">(<expr pos:start="721:9" pos:end="721:76"><call pos:start="721:9" pos:end="721:71"><name pos:start="721:9" pos:end="721:14">strcmp</name><argument_list pos:start="721:15" pos:end="721:71">(<argument pos:start="721:16" pos:end="721:62"><expr pos:start="721:16" pos:end="721:62"><name pos:start="721:16" pos:end="721:31"><name pos:start="721:16" pos:end="721:21">stream</name><operator pos:start="721:22" pos:end="721:23">-&gt;</operator><name pos:start="721:24" pos:end="721:31">filename</name></name> <operator pos:start="721:33" pos:end="721:33">+</operator> <call pos:start="721:35" pos:end="721:58"><name pos:start="721:35" pos:end="721:40">strlen</name><argument_list pos:start="721:41" pos:end="721:58">(<argument pos:start="721:42" pos:end="721:57"><expr pos:start="721:42" pos:end="721:57"><name pos:start="721:42" pos:end="721:57"><name pos:start="721:42" pos:end="721:47">stream</name><operator pos:start="721:48" pos:end="721:49">-&gt;</operator><name pos:start="721:50" pos:end="721:57">filename</name></name></expr></argument>)</argument_list></call> <operator pos:start="721:60" pos:end="721:60">-</operator> <literal type="number" pos:start="721:62" pos:end="721:62">4</literal></expr></argument>, <argument pos:start="721:65" pos:end="721:70"><expr pos:start="721:65" pos:end="721:70"><literal type="string" pos:start="721:65" pos:end="721:70">".asf"</literal></expr></argument>)</argument_list></call> <operator pos:start="721:73" pos:end="721:74">==</operator> <literal type="number" pos:start="721:76" pos:end="721:76">0</literal></expr>)</condition><block type="pseudo" pos:start="723:9" pos:end="726:0"><block_content pos:start="723:9" pos:end="726:0">

        <expr_stmt pos:start="723:9" pos:end="726:0"><expr pos:start="723:9" pos:end="723:51"><call pos:start="723:9" pos:end="723:51"><name pos:start="723:9" pos:end="723:16">http_log</name><argument_list pos:start="723:17" pos:end="723:51">(<argument pos:start="723:18" pos:end="723:39"><expr pos:start="723:18" pos:end="723:39"><literal type="string" pos:start="723:18" pos:end="723:39">"\nGot request:\n%s\n"</literal></expr></argument>, <argument pos:start="723:42" pos:end="723:50"><expr pos:start="723:42" pos:end="723:50"><name pos:start="723:42" pos:end="723:50"><name pos:start="723:42" pos:end="723:42">c</name><operator pos:start="723:43" pos:end="723:44">-&gt;</operator><name pos:start="723:45" pos:end="723:50">buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="725:1" pos:end="725:6">#<cpp:directive pos:start="725:2" pos:end="725:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="729:5" pos:end="731:25"><if pos:start="729:5" pos:end="731:25">if <condition pos:start="729:8" pos:end="729:53">(<expr pos:start="729:9" pos:end="729:52"><name pos:start="729:9" pos:end="729:30"><name pos:start="729:9" pos:end="729:9">c</name><operator pos:start="729:10" pos:end="729:11">-&gt;</operator><name pos:start="729:12" pos:end="729:17">stream</name><operator pos:start="729:18" pos:end="729:19">-&gt;</operator><name pos:start="729:20" pos:end="729:30">stream_type</name></name> <operator pos:start="729:32" pos:end="729:33">==</operator> <name pos:start="729:35" pos:end="729:52">STREAM_TYPE_STATUS</name></expr>)</condition><block type="pseudo" pos:start="731:9" pos:end="731:25"><block_content pos:start="731:9" pos:end="731:25">

        <goto pos:start="731:9" pos:end="731:25">goto <name pos:start="731:14" pos:end="731:24">send_status</name>;</goto></block_content></block></if></if_stmt>



    <comment type="block" pos:start="735:5" pos:end="735:27">/* open input stream */</comment>

    <if_stmt pos:start="737:5" pos:end="743:5"><if pos:start="737:5" pos:end="743:5">if <condition pos:start="737:8" pos:end="737:39">(<expr pos:start="737:9" pos:end="737:38"><call pos:start="737:9" pos:end="737:34"><name pos:start="737:9" pos:end="737:25">open_input_stream</name><argument_list pos:start="737:26" pos:end="737:34">(<argument pos:start="737:27" pos:end="737:27"><expr pos:start="737:27" pos:end="737:27"><name pos:start="737:27" pos:end="737:27">c</name></expr></argument>, <argument pos:start="737:30" pos:end="737:33"><expr pos:start="737:30" pos:end="737:33"><name pos:start="737:30" pos:end="737:33">info</name></expr></argument>)</argument_list></call> <operator pos:start="737:36" pos:end="737:36">&lt;</operator> <literal type="number" pos:start="737:38" pos:end="737:38">0</literal></expr>)</condition> <block pos:start="737:41" pos:end="743:5">{<block_content pos:start="739:9" pos:end="741:24">

        <expr_stmt pos:start="739:9" pos:end="739:88"><expr pos:start="739:9" pos:end="739:87"><call pos:start="739:9" pos:end="739:87"><name pos:start="739:9" pos:end="739:16">snprintf</name><argument_list pos:start="739:17" pos:end="739:87">(<argument pos:start="739:18" pos:end="739:20"><expr pos:start="739:18" pos:end="739:20"><name pos:start="739:18" pos:end="739:20">msg</name></expr></argument>, <argument pos:start="739:23" pos:end="739:33"><expr pos:start="739:23" pos:end="739:33"><sizeof pos:start="739:23" pos:end="739:33">sizeof<argument_list pos:start="739:29" pos:end="739:33">(<argument pos:start="739:30" pos:end="739:32"><expr pos:start="739:30" pos:end="739:32"><name pos:start="739:30" pos:end="739:32">msg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="739:36" pos:end="739:81"><expr pos:start="739:36" pos:end="739:81"><literal type="string" pos:start="739:36" pos:end="739:81">"Input stream corresponding to '%s' not found"</literal></expr></argument>, <argument pos:start="739:84" pos:end="739:86"><expr pos:start="739:84" pos:end="739:86"><name pos:start="739:84" pos:end="739:86">url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="741:9" pos:end="741:24">goto <name pos:start="741:14" pos:end="741:23">send_error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="747:5" pos:end="747:29">/* prepare HTTP header */</comment>

    <expr_stmt pos:start="749:5" pos:end="749:21"><expr pos:start="749:5" pos:end="749:20"><name pos:start="749:5" pos:end="749:16"><name pos:start="749:5" pos:end="749:5">c</name><operator pos:start="749:6" pos:end="749:7">-&gt;</operator><name pos:start="749:8" pos:end="749:13">buffer</name><index pos:start="749:14" pos:end="749:16">[<expr pos:start="749:15" pos:end="749:15"><literal type="number" pos:start="749:15" pos:end="749:15">0</literal></expr>]</index></name> <operator pos:start="749:18" pos:end="749:18">=</operator> <literal type="number" pos:start="749:20" pos:end="749:20">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="751:5" pos:end="751:66"><expr pos:start="751:5" pos:end="751:65"><call pos:start="751:5" pos:end="751:65"><name pos:start="751:5" pos:end="751:15">av_strlcatf</name><argument_list pos:start="751:16" pos:end="751:65">(<argument pos:start="751:17" pos:end="751:25"><expr pos:start="751:17" pos:end="751:25"><name pos:start="751:17" pos:end="751:25"><name pos:start="751:17" pos:end="751:17">c</name><operator pos:start="751:18" pos:end="751:19">-&gt;</operator><name pos:start="751:20" pos:end="751:25">buffer</name></name></expr></argument>, <argument pos:start="751:28" pos:end="751:41"><expr pos:start="751:28" pos:end="751:41"><name pos:start="751:28" pos:end="751:41"><name pos:start="751:28" pos:end="751:28">c</name><operator pos:start="751:29" pos:end="751:30">-&gt;</operator><name pos:start="751:31" pos:end="751:41">buffer_size</name></name></expr></argument>, <argument pos:start="751:44" pos:end="751:64"><expr pos:start="751:44" pos:end="751:64"><literal type="string" pos:start="751:44" pos:end="751:64">"HTTP/1.0 200 OK\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="753:5" pos:end="753:42"><expr pos:start="753:5" pos:end="753:41"><name pos:start="753:5" pos:end="753:13">mime_type</name> <operator pos:start="753:15" pos:end="753:15">=</operator> <name pos:start="753:17" pos:end="753:41"><name pos:start="753:17" pos:end="753:17">c</name><operator pos:start="753:18" pos:end="753:19">-&gt;</operator><name pos:start="753:20" pos:end="753:25">stream</name><operator pos:start="753:26" pos:end="753:27">-&gt;</operator><name pos:start="753:28" pos:end="753:30">fmt</name><operator pos:start="753:31" pos:end="753:32">-&gt;</operator><name pos:start="753:33" pos:end="753:41">mime_type</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="755:5" pos:end="757:49"><if pos:start="755:5" pos:end="757:49">if <condition pos:start="755:8" pos:end="755:19">(<expr pos:start="755:9" pos:end="755:18"><operator pos:start="755:9" pos:end="755:9">!</operator><name pos:start="755:10" pos:end="755:18">mime_type</name></expr>)</condition><block type="pseudo" pos:start="757:9" pos:end="757:49"><block_content pos:start="757:9" pos:end="757:49">

        <expr_stmt pos:start="757:9" pos:end="757:49"><expr pos:start="757:9" pos:end="757:48"><name pos:start="757:9" pos:end="757:17">mime_type</name> <operator pos:start="757:19" pos:end="757:19">=</operator> <literal type="string" pos:start="757:21" pos:end="757:48">"application/x-octet-stream"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="759:5" pos:end="759:67"><expr pos:start="759:5" pos:end="759:66"><call pos:start="759:5" pos:end="759:66"><name pos:start="759:5" pos:end="759:15">av_strlcatf</name><argument_list pos:start="759:16" pos:end="759:66">(<argument pos:start="759:17" pos:end="759:25"><expr pos:start="759:17" pos:end="759:25"><name pos:start="759:17" pos:end="759:25"><name pos:start="759:17" pos:end="759:17">c</name><operator pos:start="759:18" pos:end="759:19">-&gt;</operator><name pos:start="759:20" pos:end="759:25">buffer</name></name></expr></argument>, <argument pos:start="759:28" pos:end="759:41"><expr pos:start="759:28" pos:end="759:41"><name pos:start="759:28" pos:end="759:41"><name pos:start="759:28" pos:end="759:28">c</name><operator pos:start="759:29" pos:end="759:30">-&gt;</operator><name pos:start="759:31" pos:end="759:41">buffer_size</name></name></expr></argument>, <argument pos:start="759:44" pos:end="759:65"><expr pos:start="759:44" pos:end="759:65"><literal type="string" pos:start="759:44" pos:end="759:65">"Pragma: no-cache\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="763:5" pos:end="763:40">/* for asf, we need extra headers */</comment>

    <if_stmt pos:start="765:5" pos:end="777:5"><if pos:start="765:5" pos:end="777:5">if <condition pos:start="765:8" pos:end="765:51">(<expr pos:start="765:9" pos:end="765:50"><operator pos:start="765:9" pos:end="765:9">!</operator><call pos:start="765:10" pos:end="765:50"><name pos:start="765:10" pos:end="765:15">strcmp</name><argument_list pos:start="765:16" pos:end="765:50">(<argument pos:start="765:17" pos:end="765:36"><expr pos:start="765:17" pos:end="765:36"><name pos:start="765:17" pos:end="765:36"><name pos:start="765:17" pos:end="765:17">c</name><operator pos:start="765:18" pos:end="765:19">-&gt;</operator><name pos:start="765:20" pos:end="765:25">stream</name><operator pos:start="765:26" pos:end="765:27">-&gt;</operator><name pos:start="765:28" pos:end="765:30">fmt</name><operator pos:start="765:31" pos:end="765:32">-&gt;</operator><name pos:start="765:33" pos:end="765:36">name</name></name></expr></argument>,<argument pos:start="765:38" pos:end="765:49"><expr pos:start="765:38" pos:end="765:49"><literal type="string" pos:start="765:38" pos:end="765:49">"asf_stream"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="765:53" pos:end="777:5">{<block_content pos:start="771:9" pos:end="775:183">

        <comment type="block" pos:start="767:9" pos:end="767:42">/* Need to allocate a client id */</comment>



        <expr_stmt pos:start="771:9" pos:end="771:53"><expr pos:start="771:9" pos:end="771:52"><name pos:start="771:9" pos:end="771:24"><name pos:start="771:9" pos:end="771:9">c</name><operator pos:start="771:10" pos:end="771:11">-&gt;</operator><name pos:start="771:12" pos:end="771:24">wmp_client_id</name></name> <operator pos:start="771:26" pos:end="771:26">=</operator> <call pos:start="771:28" pos:end="771:52"><name pos:start="771:28" pos:end="771:37">av_lfg_get</name><argument_list pos:start="771:38" pos:end="771:52">(<argument pos:start="771:39" pos:end="771:51"><expr pos:start="771:39" pos:end="771:51"><operator pos:start="771:39" pos:end="771:39">&amp;</operator><name pos:start="771:40" pos:end="771:51">random_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="775:9" pos:end="775:183"><expr pos:start="775:9" pos:end="775:182"><call pos:start="775:9" pos:end="775:182"><name pos:start="775:9" pos:end="775:19">av_strlcatf</name><argument_list pos:start="775:20" pos:end="775:182">(<argument pos:start="775:21" pos:end="775:29"><expr pos:start="775:21" pos:end="775:29"><name pos:start="775:21" pos:end="775:29"><name pos:start="775:21" pos:end="775:21">c</name><operator pos:start="775:22" pos:end="775:23">-&gt;</operator><name pos:start="775:24" pos:end="775:29">buffer</name></name></expr></argument>, <argument pos:start="775:32" pos:end="775:45"><expr pos:start="775:32" pos:end="775:45"><name pos:start="775:32" pos:end="775:45"><name pos:start="775:32" pos:end="775:32">c</name><operator pos:start="775:33" pos:end="775:34">-&gt;</operator><name pos:start="775:35" pos:end="775:45">buffer_size</name></name></expr></argument>, <argument pos:start="775:48" pos:end="775:163"><expr pos:start="775:48" pos:end="775:163"><literal type="string" pos:start="775:48" pos:end="775:163">"Server: Cougar 4.1.0.3923\r\nCache-Control: no-cache\r\nPragma: client-id=%d\r\nPragma: features=\"broadcast\"\r\n"</literal></expr></argument>, <argument pos:start="775:166" pos:end="775:181"><expr pos:start="775:166" pos:end="775:181"><name pos:start="775:166" pos:end="775:181"><name pos:start="775:166" pos:end="775:166">c</name><operator pos:start="775:167" pos:end="775:168">-&gt;</operator><name pos:start="775:169" pos:end="775:181">wmp_client_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="779:5" pos:end="779:78"><expr pos:start="779:5" pos:end="779:77"><call pos:start="779:5" pos:end="779:77"><name pos:start="779:5" pos:end="779:15">av_strlcatf</name><argument_list pos:start="779:16" pos:end="779:77">(<argument pos:start="779:17" pos:end="779:25"><expr pos:start="779:17" pos:end="779:25"><name pos:start="779:17" pos:end="779:25"><name pos:start="779:17" pos:end="779:17">c</name><operator pos:start="779:18" pos:end="779:19">-&gt;</operator><name pos:start="779:20" pos:end="779:25">buffer</name></name></expr></argument>, <argument pos:start="779:28" pos:end="779:41"><expr pos:start="779:28" pos:end="779:41"><name pos:start="779:28" pos:end="779:41"><name pos:start="779:28" pos:end="779:28">c</name><operator pos:start="779:29" pos:end="779:30">-&gt;</operator><name pos:start="779:31" pos:end="779:41">buffer_size</name></name></expr></argument>, <argument pos:start="779:44" pos:end="779:65"><expr pos:start="779:44" pos:end="779:65"><literal type="string" pos:start="779:44" pos:end="779:65">"Content-Type: %s\r\n"</literal></expr></argument>, <argument pos:start="779:68" pos:end="779:76"><expr pos:start="779:68" pos:end="779:76"><name pos:start="779:68" pos:end="779:76">mime_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="781:5" pos:end="781:51"><expr pos:start="781:5" pos:end="781:50"><call pos:start="781:5" pos:end="781:50"><name pos:start="781:5" pos:end="781:15">av_strlcatf</name><argument_list pos:start="781:16" pos:end="781:50">(<argument pos:start="781:17" pos:end="781:25"><expr pos:start="781:17" pos:end="781:25"><name pos:start="781:17" pos:end="781:25"><name pos:start="781:17" pos:end="781:17">c</name><operator pos:start="781:18" pos:end="781:19">-&gt;</operator><name pos:start="781:20" pos:end="781:25">buffer</name></name></expr></argument>, <argument pos:start="781:28" pos:end="781:41"><expr pos:start="781:28" pos:end="781:41"><name pos:start="781:28" pos:end="781:41"><name pos:start="781:28" pos:end="781:28">c</name><operator pos:start="781:29" pos:end="781:30">-&gt;</operator><name pos:start="781:31" pos:end="781:41">buffer_size</name></name></expr></argument>, <argument pos:start="781:44" pos:end="781:49"><expr pos:start="781:44" pos:end="781:49"><literal type="string" pos:start="781:44" pos:end="781:49">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="783:5" pos:end="783:38"><expr pos:start="783:5" pos:end="783:37"><name pos:start="783:5" pos:end="783:5">q</name> <operator pos:start="783:7" pos:end="783:7">=</operator> <name pos:start="783:9" pos:end="783:17"><name pos:start="783:9" pos:end="783:9">c</name><operator pos:start="783:10" pos:end="783:11">-&gt;</operator><name pos:start="783:12" pos:end="783:17">buffer</name></name> <operator pos:start="783:19" pos:end="783:19">+</operator> <call pos:start="783:21" pos:end="783:37"><name pos:start="783:21" pos:end="783:26">strlen</name><argument_list pos:start="783:27" pos:end="783:37">(<argument pos:start="783:28" pos:end="783:36"><expr pos:start="783:28" pos:end="783:36"><name pos:start="783:28" pos:end="783:36"><name pos:start="783:28" pos:end="783:28">c</name><operator pos:start="783:29" pos:end="783:30">-&gt;</operator><name pos:start="783:31" pos:end="783:36">buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="787:5" pos:end="787:31">/* prepare output buffer */</comment>

    <expr_stmt pos:start="789:5" pos:end="789:22"><expr pos:start="789:5" pos:end="789:21"><name pos:start="789:5" pos:end="789:17"><name pos:start="789:5" pos:end="789:5">c</name><operator pos:start="789:6" pos:end="789:7">-&gt;</operator><name pos:start="789:8" pos:end="789:17">http_error</name></name> <operator pos:start="789:19" pos:end="789:19">=</operator> <literal type="number" pos:start="789:21" pos:end="789:21">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="791:5" pos:end="791:30"><expr pos:start="791:5" pos:end="791:29"><name pos:start="791:5" pos:end="791:17"><name pos:start="791:5" pos:end="791:5">c</name><operator pos:start="791:6" pos:end="791:7">-&gt;</operator><name pos:start="791:8" pos:end="791:17">buffer_ptr</name></name> <operator pos:start="791:19" pos:end="791:19">=</operator> <name pos:start="791:21" pos:end="791:29"><name pos:start="791:21" pos:end="791:21">c</name><operator pos:start="791:22" pos:end="791:23">-&gt;</operator><name pos:start="791:24" pos:end="791:29">buffer</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="793:5" pos:end="793:22"><expr pos:start="793:5" pos:end="793:21"><name pos:start="793:5" pos:end="793:17"><name pos:start="793:5" pos:end="793:5">c</name><operator pos:start="793:6" pos:end="793:7">-&gt;</operator><name pos:start="793:8" pos:end="793:17">buffer_end</name></name> <operator pos:start="793:19" pos:end="793:19">=</operator> <name pos:start="793:21" pos:end="793:21">q</name></expr>;</expr_stmt>

    <expr_stmt pos:start="795:5" pos:end="795:37"><expr pos:start="795:5" pos:end="795:36"><name pos:start="795:5" pos:end="795:12"><name pos:start="795:5" pos:end="795:5">c</name><operator pos:start="795:6" pos:end="795:7">-&gt;</operator><name pos:start="795:8" pos:end="795:12">state</name></name> <operator pos:start="795:14" pos:end="795:14">=</operator> <name pos:start="795:16" pos:end="795:36">HTTPSTATE_SEND_HEADER</name></expr>;</expr_stmt>

    <return pos:start="797:5" pos:end="797:13">return <expr pos:start="797:12" pos:end="797:12"><literal type="number" pos:start="797:12" pos:end="797:12">0</literal></expr>;</return>

 <label pos:start="799:2" pos:end="799:12"><name pos:start="799:2" pos:end="799:11">send_error</name>:</label>

    <expr_stmt pos:start="801:5" pos:end="801:24"><expr pos:start="801:5" pos:end="801:23"><name pos:start="801:5" pos:end="801:17"><name pos:start="801:5" pos:end="801:5">c</name><operator pos:start="801:6" pos:end="801:7">-&gt;</operator><name pos:start="801:8" pos:end="801:17">http_error</name></name> <operator pos:start="801:19" pos:end="801:19">=</operator> <literal type="number" pos:start="801:21" pos:end="801:23">404</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="803:5" pos:end="803:18"><expr pos:start="803:5" pos:end="803:17"><name pos:start="803:5" pos:end="803:5">q</name> <operator pos:start="803:7" pos:end="803:7">=</operator> <name pos:start="803:9" pos:end="803:17"><name pos:start="803:9" pos:end="803:9">c</name><operator pos:start="803:10" pos:end="803:11">-&gt;</operator><name pos:start="803:12" pos:end="803:17">buffer</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="805:5" pos:end="805:19"><expr pos:start="805:5" pos:end="805:18"><call pos:start="805:5" pos:end="805:18"><name pos:start="805:5" pos:end="805:13">htmlstrip</name><argument_list pos:start="805:14" pos:end="805:18">(<argument pos:start="805:15" pos:end="805:17"><expr pos:start="805:15" pos:end="805:17"><name pos:start="805:15" pos:end="805:17">msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="807:5" pos:end="821:36"><expr pos:start="807:5" pos:end="821:35"><call pos:start="807:5" pos:end="821:35"><name pos:start="807:5" pos:end="807:12">snprintf</name><argument_list pos:start="807:13" pos:end="821:35">(<argument pos:start="807:14" pos:end="807:14"><expr pos:start="807:14" pos:end="807:14"><name pos:start="807:14" pos:end="807:14">q</name></expr></argument>, <argument pos:start="807:17" pos:end="807:30"><expr pos:start="807:17" pos:end="807:30"><name pos:start="807:17" pos:end="807:30"><name pos:start="807:17" pos:end="807:17">c</name><operator pos:start="807:18" pos:end="807:19">-&gt;</operator><name pos:start="807:20" pos:end="807:30">buffer_size</name></name></expr></argument>,

                  <argument pos:start="809:19" pos:end="821:29"><expr pos:start="809:19" pos:end="821:29"><literal type="string" pos:start="809:19" pos:end="809:46">"HTTP/1.0 404 Not Found\r\n"</literal>

                  <literal type="string" pos:start="811:19" pos:end="811:47">"Content-type: text/html\r\n"</literal>

                  <literal type="string" pos:start="813:19" pos:end="813:24">"\r\n"</literal>

                  <literal type="string" pos:start="815:19" pos:end="815:28">"&lt;html&gt;\n"</literal>

                  <literal type="string" pos:start="817:19" pos:end="817:63">"&lt;head&gt;&lt;title&gt;404 Not Found&lt;/title&gt;&lt;/head&gt;\n"</literal>

                  <literal type="string" pos:start="819:19" pos:end="819:37">"&lt;body&gt;%s&lt;/body&gt;\n"</literal>

                  <literal type="string" pos:start="821:19" pos:end="821:29">"&lt;/html&gt;\n"</literal></expr></argument>, <argument pos:start="821:32" pos:end="821:34"><expr pos:start="821:32" pos:end="821:34"><name pos:start="821:32" pos:end="821:34">msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="823:5" pos:end="823:19"><expr pos:start="823:5" pos:end="823:18"><name pos:start="823:5" pos:end="823:5">q</name> <operator pos:start="823:7" pos:end="823:8">+=</operator> <call pos:start="823:10" pos:end="823:18"><name pos:start="823:10" pos:end="823:15">strlen</name><argument_list pos:start="823:16" pos:end="823:18">(<argument pos:start="823:17" pos:end="823:17"><expr pos:start="823:17" pos:end="823:17"><name pos:start="823:17" pos:end="823:17">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="825:5" pos:end="825:31">/* prepare output buffer */</comment>

    <expr_stmt pos:start="827:5" pos:end="827:30"><expr pos:start="827:5" pos:end="827:29"><name pos:start="827:5" pos:end="827:17"><name pos:start="827:5" pos:end="827:5">c</name><operator pos:start="827:6" pos:end="827:7">-&gt;</operator><name pos:start="827:8" pos:end="827:17">buffer_ptr</name></name> <operator pos:start="827:19" pos:end="827:19">=</operator> <name pos:start="827:21" pos:end="827:29"><name pos:start="827:21" pos:end="827:21">c</name><operator pos:start="827:22" pos:end="827:23">-&gt;</operator><name pos:start="827:24" pos:end="827:29">buffer</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="829:5" pos:end="829:22"><expr pos:start="829:5" pos:end="829:21"><name pos:start="829:5" pos:end="829:17"><name pos:start="829:5" pos:end="829:5">c</name><operator pos:start="829:6" pos:end="829:7">-&gt;</operator><name pos:start="829:8" pos:end="829:17">buffer_end</name></name> <operator pos:start="829:19" pos:end="829:19">=</operator> <name pos:start="829:21" pos:end="829:21">q</name></expr>;</expr_stmt>

    <expr_stmt pos:start="831:5" pos:end="831:37"><expr pos:start="831:5" pos:end="831:36"><name pos:start="831:5" pos:end="831:12"><name pos:start="831:5" pos:end="831:5">c</name><operator pos:start="831:6" pos:end="831:7">-&gt;</operator><name pos:start="831:8" pos:end="831:12">state</name></name> <operator pos:start="831:14" pos:end="831:14">=</operator> <name pos:start="831:16" pos:end="831:36">HTTPSTATE_SEND_HEADER</name></expr>;</expr_stmt>

    <return pos:start="833:5" pos:end="833:13">return <expr pos:start="833:12" pos:end="833:12"><literal type="number" pos:start="833:12" pos:end="833:12">0</literal></expr>;</return>

 <label pos:start="835:2" pos:end="835:13"><name pos:start="835:2" pos:end="835:12">send_status</name>:</label>

    <expr_stmt pos:start="837:5" pos:end="837:22"><expr pos:start="837:5" pos:end="837:21"><call pos:start="837:5" pos:end="837:21"><name pos:start="837:5" pos:end="837:18">compute_status</name><argument_list pos:start="837:19" pos:end="837:21">(<argument pos:start="837:20" pos:end="837:20"><expr pos:start="837:20" pos:end="837:20"><name pos:start="837:20" pos:end="837:20">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="839:5" pos:end="839:24"><expr pos:start="839:5" pos:end="839:23"><name pos:start="839:5" pos:end="839:17"><name pos:start="839:5" pos:end="839:5">c</name><operator pos:start="839:6" pos:end="839:7">-&gt;</operator><name pos:start="839:8" pos:end="839:17">http_error</name></name> <operator pos:start="839:19" pos:end="839:19">=</operator> <literal type="number" pos:start="839:21" pos:end="839:23">200</literal></expr>;</expr_stmt> <comment type="block" pos:start="839:26" pos:end="841:59">/* horrible : we use this value to avoid

                            going to the send data state */</comment>

    <expr_stmt pos:start="843:5" pos:end="843:37"><expr pos:start="843:5" pos:end="843:36"><name pos:start="843:5" pos:end="843:12"><name pos:start="843:5" pos:end="843:5">c</name><operator pos:start="843:6" pos:end="843:7">-&gt;</operator><name pos:start="843:8" pos:end="843:12">state</name></name> <operator pos:start="843:14" pos:end="843:14">=</operator> <name pos:start="843:16" pos:end="843:36">HTTPSTATE_SEND_HEADER</name></expr>;</expr_stmt>

    <return pos:start="845:5" pos:end="845:13">return <expr pos:start="845:12" pos:end="845:12"><literal type="number" pos:start="845:12" pos:end="845:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
