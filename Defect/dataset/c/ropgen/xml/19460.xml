<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19460.c" pos:tabs="8"><function pos:start="1:1" pos:end="121:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">encode_frame</name><parameter_list pos:start="1:24" pos:end="3:49">(<parameter pos:start="1:25" pos:end="1:45"><decl pos:start="1:25" pos:end="1:45"><type pos:start="1:25" pos:end="1:45"><name pos:start="1:25" pos:end="1:38">AVCodecContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:45">avctx</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:65"><decl pos:start="1:48" pos:end="1:65"><type pos:start="1:48" pos:end="1:65"><name pos:start="1:48" pos:end="1:55">unsigned</name> <name pos:start="1:57" pos:end="1:60">char</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:65">buf</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:36"><decl pos:start="3:25" pos:end="3:36"><type pos:start="3:25" pos:end="3:36"><name pos:start="3:25" pos:end="3:27">int</name></type> <name pos:start="3:29" pos:end="3:36">buf_size</name></decl></parameter>, <parameter pos:start="3:39" pos:end="3:48"><decl pos:start="3:39" pos:end="3:48"><type pos:start="3:39" pos:end="3:48"><name pos:start="3:39" pos:end="3:42">void</name> <modifier pos:start="3:44" pos:end="3:44">*</modifier></type><name pos:start="3:45" pos:end="3:48">data</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="121:1">{<block_content pos:start="7:5" pos:end="119:19">

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">AVFrame</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">pic</name> <init pos:start="7:24" pos:end="7:29">= <expr pos:start="7:26" pos:end="7:29"><name pos:start="7:26" pos:end="7:29">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:56"><decl pos:start="9:5" pos:end="9:55"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:21">aligned_width</name> <init pos:start="9:23" pos:end="9:55">= <expr pos:start="9:25" pos:end="9:55"><operator pos:start="9:25" pos:end="9:25">(</operator><operator pos:start="9:26" pos:end="9:26">(</operator><name pos:start="9:27" pos:end="9:38"><name pos:start="9:27" pos:end="9:31">avctx</name><operator pos:start="9:32" pos:end="9:33">-&gt;</operator><name pos:start="9:34" pos:end="9:38">width</name></name> <operator pos:start="9:40" pos:end="9:40">+</operator> <literal type="number" pos:start="9:42" pos:end="9:43">47</literal><operator pos:start="9:44" pos:end="9:44">)</operator> <operator pos:start="9:46" pos:end="9:46">/</operator> <literal type="number" pos:start="9:48" pos:end="9:49">48</literal><operator pos:start="9:50" pos:end="9:50">)</operator> <operator pos:start="9:52" pos:end="9:52">*</operator> <literal type="number" pos:start="9:54" pos:end="9:55">48</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:39"><decl pos:start="11:5" pos:end="11:38"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:14">stride</name> <init pos:start="11:16" pos:end="11:38">= <expr pos:start="11:18" pos:end="11:38"><name pos:start="11:18" pos:end="11:30">aligned_width</name> <operator pos:start="11:32" pos:end="11:32">*</operator> <literal type="number" pos:start="11:34" pos:end="11:34">8</literal> <operator pos:start="11:36" pos:end="11:36">/</operator> <literal type="number" pos:start="11:38" pos:end="11:38">3</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:13"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">h</name></decl>, <decl pos:start="13:12" pos:end="13:12"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:12">w</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:54"><decl pos:start="15:5" pos:end="15:53"><type pos:start="15:5" pos:end="15:20"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:18">uint16_t</name> <modifier pos:start="15:20" pos:end="15:20">*</modifier></type><name pos:start="15:21" pos:end="15:21">y</name> <init pos:start="15:23" pos:end="15:53">= <expr pos:start="15:25" pos:end="15:53"><operator pos:start="15:25" pos:end="15:25">(</operator><specifier pos:start="15:26" pos:end="15:30">const</specifier> <name pos:start="15:32" pos:end="15:39">uint16_t</name><operator pos:start="15:40" pos:end="15:40">*</operator><operator pos:start="15:41" pos:end="15:41">)</operator><name pos:start="15:42" pos:end="15:53"><name pos:start="15:42" pos:end="15:44">pic</name><operator pos:start="15:45" pos:end="15:46">-&gt;</operator><name pos:start="15:47" pos:end="15:50">data</name><index pos:start="15:51" pos:end="15:53">[<expr pos:start="15:52" pos:end="15:52"><literal type="number" pos:start="15:52" pos:end="15:52">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:54"><decl pos:start="17:5" pos:end="17:53"><type pos:start="17:5" pos:end="17:20"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:18">uint16_t</name> <modifier pos:start="17:20" pos:end="17:20">*</modifier></type><name pos:start="17:21" pos:end="17:21">u</name> <init pos:start="17:23" pos:end="17:53">= <expr pos:start="17:25" pos:end="17:53"><operator pos:start="17:25" pos:end="17:25">(</operator><specifier pos:start="17:26" pos:end="17:30">const</specifier> <name pos:start="17:32" pos:end="17:39">uint16_t</name><operator pos:start="17:40" pos:end="17:40">*</operator><operator pos:start="17:41" pos:end="17:41">)</operator><name pos:start="17:42" pos:end="17:53"><name pos:start="17:42" pos:end="17:44">pic</name><operator pos:start="17:45" pos:end="17:46">-&gt;</operator><name pos:start="17:47" pos:end="17:50">data</name><index pos:start="17:51" pos:end="17:53">[<expr pos:start="17:52" pos:end="17:52"><literal type="number" pos:start="17:52" pos:end="17:52">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:54"><decl pos:start="19:5" pos:end="19:53"><type pos:start="19:5" pos:end="19:20"><specifier pos:start="19:5" pos:end="19:9">const</specifier> <name pos:start="19:11" pos:end="19:18">uint16_t</name> <modifier pos:start="19:20" pos:end="19:20">*</modifier></type><name pos:start="19:21" pos:end="19:21">v</name> <init pos:start="19:23" pos:end="19:53">= <expr pos:start="19:25" pos:end="19:53"><operator pos:start="19:25" pos:end="19:25">(</operator><specifier pos:start="19:26" pos:end="19:30">const</specifier> <name pos:start="19:32" pos:end="19:39">uint16_t</name><operator pos:start="19:40" pos:end="19:40">*</operator><operator pos:start="19:41" pos:end="19:41">)</operator><name pos:start="19:42" pos:end="19:53"><name pos:start="19:42" pos:end="19:44">pic</name><operator pos:start="19:45" pos:end="19:46">-&gt;</operator><name pos:start="19:47" pos:end="19:50">data</name><index pos:start="19:51" pos:end="19:53">[<expr pos:start="19:52" pos:end="19:52"><literal type="number" pos:start="19:52" pos:end="19:52">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:21"><decl pos:start="21:5" pos:end="21:20"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:11">uint8_t</name> <modifier pos:start="21:13" pos:end="21:13">*</modifier></type><name pos:start="21:14" pos:end="21:14">p</name> <init pos:start="21:16" pos:end="21:20">= <expr pos:start="21:18" pos:end="21:20"><name pos:start="21:18" pos:end="21:20">buf</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:24"><decl pos:start="23:5" pos:end="23:23"><type pos:start="23:5" pos:end="23:13"><name pos:start="23:5" pos:end="23:11">uint8_t</name> <modifier pos:start="23:13" pos:end="23:13">*</modifier></type><name pos:start="23:14" pos:end="23:17">pdst</name> <init pos:start="23:19" pos:end="23:23">= <expr pos:start="23:21" pos:end="23:23"><name pos:start="23:21" pos:end="23:23">buf</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="27:5" pos:end="54:0"><if pos:start="27:5" pos:end="54:0">if <condition pos:start="27:8" pos:end="27:57">(<expr pos:start="27:9" pos:end="27:56"><name pos:start="27:9" pos:end="27:16">buf_size</name> <operator pos:start="27:18" pos:end="27:18">&lt;</operator> <name pos:start="27:20" pos:end="27:32">aligned_width</name> <operator pos:start="27:34" pos:end="27:34">*</operator> <name pos:start="27:36" pos:end="27:48"><name pos:start="27:36" pos:end="27:40">avctx</name><operator pos:start="27:41" pos:end="27:42">-&gt;</operator><name pos:start="27:43" pos:end="27:48">height</name></name> <operator pos:start="27:50" pos:end="27:50">*</operator> <literal type="number" pos:start="27:52" pos:end="27:52">8</literal> <operator pos:start="27:54" pos:end="27:54">/</operator> <literal type="number" pos:start="27:56" pos:end="27:56">3</literal></expr>)</condition> <block pos:start="27:59" pos:end="54:0">{<block_content pos:start="29:9" pos:end="31:18">

        <expr_stmt pos:start="29:9" pos:end="29:65"><expr pos:start="29:9" pos:end="29:64"><call pos:start="29:9" pos:end="29:64"><name pos:start="29:9" pos:end="29:14">av_log</name><argument_list pos:start="29:15" pos:end="29:64">(<argument pos:start="29:16" pos:end="29:20"><expr pos:start="29:16" pos:end="29:20"><name pos:start="29:16" pos:end="29:20">avctx</name></expr></argument>, <argument pos:start="29:23" pos:end="29:34"><expr pos:start="29:23" pos:end="29:34"><name pos:start="29:23" pos:end="29:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="29:37" pos:end="29:63"><expr pos:start="29:37" pos:end="29:63"><literal type="string" pos:start="29:37" pos:end="29:63">"output buffer too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:18">return <expr pos:start="31:16" pos:end="31:17"><operator pos:start="31:16" pos:end="31:16">-</operator><literal type="number" pos:start="31:17" pos:end="31:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



<cpp:define pos:start="37:1" pos:end="37:35">#<cpp:directive pos:start="37:2" pos:end="37:7">define</cpp:directive> <cpp:macro pos:start="37:9" pos:end="37:15"><name pos:start="37:9" pos:end="37:12">CLIP</name><parameter_list pos:start="37:13" pos:end="37:15">(<parameter pos:start="37:14" pos:end="37:14"><type pos:start="37:14" pos:end="37:14"><name pos:start="37:14" pos:end="37:14">v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="37:17" pos:end="37:35">av_clip(v, 4, 1019)</cpp:value></cpp:define>



<cpp:define pos:start="41:1" pos:end="53:15">#<cpp:directive pos:start="41:2" pos:end="41:7">define</cpp:directive> <cpp:macro pos:start="41:9" pos:end="41:29"><name pos:start="41:9" pos:end="41:20">WRITE_PIXELS</name><parameter_list pos:start="41:21" pos:end="41:29">(<parameter pos:start="41:22" pos:end="41:22"><type pos:start="41:22" pos:end="41:22"><name pos:start="41:22" pos:end="41:22">a</name></type></parameter>, <parameter pos:start="41:25" pos:end="41:25"><type pos:start="41:25" pos:end="41:25"><name pos:start="41:25" pos:end="41:25">b</name></type></parameter>, <parameter pos:start="41:28" pos:end="41:28"><type pos:start="41:28" pos:end="41:28"><name pos:start="41:28" pos:end="41:28">c</name></type></parameter>)</parameter_list></cpp:macro>           \

    <cpp:value pos:start="43:5" pos:end="53:15">do {                                \

        val =   CLIP(*a++);             \

        val |= (CLIP(*b++) &lt;&lt; 10) |     \

               (CLIP(*c++) &lt;&lt; 20);      \

        bytestream_put_le32(&amp;p, val);   \

    } while (0)</cpp:value></cpp:define>



    <for pos:start="57:5" pos:end="115:5">for <control pos:start="57:9" pos:end="57:39">(<init pos:start="57:10" pos:end="57:15"><expr pos:start="57:10" pos:end="57:14"><name pos:start="57:10" pos:end="57:10">h</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <literal type="number" pos:start="57:14" pos:end="57:14">0</literal></expr>;</init> <condition pos:start="57:17" pos:end="57:34"><expr pos:start="57:17" pos:end="57:33"><name pos:start="57:17" pos:end="57:17">h</name> <operator pos:start="57:19" pos:end="57:19">&lt;</operator> <name pos:start="57:21" pos:end="57:33"><name pos:start="57:21" pos:end="57:25">avctx</name><operator pos:start="57:26" pos:end="57:27">-&gt;</operator><name pos:start="57:28" pos:end="57:33">height</name></name></expr>;</condition> <incr pos:start="57:36" pos:end="57:38"><expr pos:start="57:36" pos:end="57:38"><name pos:start="57:36" pos:end="57:36">h</name><operator pos:start="57:37" pos:end="57:38">++</operator></expr></incr>)</control> <block pos:start="57:41" pos:end="115:5">{<block_content pos:start="59:9" pos:end="113:53">

        <decl_stmt pos:start="59:9" pos:end="59:21"><decl pos:start="59:9" pos:end="59:20"><type pos:start="59:9" pos:end="59:16"><name pos:start="59:9" pos:end="59:16">uint32_t</name></type> <name pos:start="59:18" pos:end="59:20">val</name></decl>;</decl_stmt>

        <for pos:start="61:9" pos:end="71:9">for <control pos:start="61:13" pos:end="61:49">(<init pos:start="61:14" pos:end="61:19"><expr pos:start="61:14" pos:end="61:18"><name pos:start="61:14" pos:end="61:14">w</name> <operator pos:start="61:16" pos:end="61:16">=</operator> <literal type="number" pos:start="61:18" pos:end="61:18">0</literal></expr>;</init> <condition pos:start="61:21" pos:end="61:41"><expr pos:start="61:21" pos:end="61:40"><name pos:start="61:21" pos:end="61:21">w</name> <operator pos:start="61:23" pos:end="61:23">&lt;</operator> <name pos:start="61:25" pos:end="61:36"><name pos:start="61:25" pos:end="61:29">avctx</name><operator pos:start="61:30" pos:end="61:31">-&gt;</operator><name pos:start="61:32" pos:end="61:36">width</name></name> <operator pos:start="61:38" pos:end="61:38">-</operator> <literal type="number" pos:start="61:40" pos:end="61:40">5</literal></expr>;</condition> <incr pos:start="61:43" pos:end="61:48"><expr pos:start="61:43" pos:end="61:48"><name pos:start="61:43" pos:end="61:43">w</name> <operator pos:start="61:45" pos:end="61:46">+=</operator> <literal type="number" pos:start="61:48" pos:end="61:48">6</literal></expr></incr>)</control> <block pos:start="61:51" pos:end="71:9">{<block_content pos:start="63:13" pos:end="69:34">

            <expr_stmt pos:start="63:13" pos:end="63:34"><expr pos:start="63:13" pos:end="63:33"><call pos:start="63:13" pos:end="63:33"><name pos:start="63:13" pos:end="63:24">WRITE_PIXELS</name><argument_list pos:start="63:25" pos:end="63:33">(<argument pos:start="63:26" pos:end="63:26"><expr pos:start="63:26" pos:end="63:26"><name pos:start="63:26" pos:end="63:26">u</name></expr></argument>, <argument pos:start="63:29" pos:end="63:29"><expr pos:start="63:29" pos:end="63:29"><name pos:start="63:29" pos:end="63:29">y</name></expr></argument>, <argument pos:start="63:32" pos:end="63:32"><expr pos:start="63:32" pos:end="63:32"><name pos:start="63:32" pos:end="63:32">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:34"><expr pos:start="65:13" pos:end="65:33"><call pos:start="65:13" pos:end="65:33"><name pos:start="65:13" pos:end="65:24">WRITE_PIXELS</name><argument_list pos:start="65:25" pos:end="65:33">(<argument pos:start="65:26" pos:end="65:26"><expr pos:start="65:26" pos:end="65:26"><name pos:start="65:26" pos:end="65:26">y</name></expr></argument>, <argument pos:start="65:29" pos:end="65:29"><expr pos:start="65:29" pos:end="65:29"><name pos:start="65:29" pos:end="65:29">u</name></expr></argument>, <argument pos:start="65:32" pos:end="65:32"><expr pos:start="65:32" pos:end="65:32"><name pos:start="65:32" pos:end="65:32">y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:34"><expr pos:start="67:13" pos:end="67:33"><call pos:start="67:13" pos:end="67:33"><name pos:start="67:13" pos:end="67:24">WRITE_PIXELS</name><argument_list pos:start="67:25" pos:end="67:33">(<argument pos:start="67:26" pos:end="67:26"><expr pos:start="67:26" pos:end="67:26"><name pos:start="67:26" pos:end="67:26">v</name></expr></argument>, <argument pos:start="67:29" pos:end="67:29"><expr pos:start="67:29" pos:end="67:29"><name pos:start="67:29" pos:end="67:29">y</name></expr></argument>, <argument pos:start="67:32" pos:end="67:32"><expr pos:start="67:32" pos:end="67:32"><name pos:start="67:32" pos:end="67:32">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:34"><expr pos:start="69:13" pos:end="69:33"><call pos:start="69:13" pos:end="69:33"><name pos:start="69:13" pos:end="69:24">WRITE_PIXELS</name><argument_list pos:start="69:25" pos:end="69:33">(<argument pos:start="69:26" pos:end="69:26"><expr pos:start="69:26" pos:end="69:26"><name pos:start="69:26" pos:end="69:26">y</name></expr></argument>, <argument pos:start="69:29" pos:end="69:29"><expr pos:start="69:29" pos:end="69:29"><name pos:start="69:29" pos:end="69:29">v</name></expr></argument>, <argument pos:start="69:32" pos:end="69:32"><expr pos:start="69:32" pos:end="69:32"><name pos:start="69:32" pos:end="69:32">y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="73:9" pos:end="85:9"><if pos:start="73:9" pos:end="85:9">if <condition pos:start="73:12" pos:end="73:33">(<expr pos:start="73:13" pos:end="73:32"><name pos:start="73:13" pos:end="73:13">w</name> <operator pos:start="73:15" pos:end="73:15">&lt;</operator> <name pos:start="73:17" pos:end="73:28"><name pos:start="73:17" pos:end="73:21">avctx</name><operator pos:start="73:22" pos:end="73:23">-&gt;</operator><name pos:start="73:24" pos:end="73:28">width</name></name> <operator pos:start="73:30" pos:end="73:30">-</operator> <literal type="number" pos:start="73:32" pos:end="73:32">1</literal></expr>)</condition> <block pos:start="73:35" pos:end="85:9">{<block_content pos:start="75:13" pos:end="83:45">

            <expr_stmt pos:start="75:13" pos:end="75:34"><expr pos:start="75:13" pos:end="75:33"><call pos:start="75:13" pos:end="75:33"><name pos:start="75:13" pos:end="75:24">WRITE_PIXELS</name><argument_list pos:start="75:25" pos:end="75:33">(<argument pos:start="75:26" pos:end="75:26"><expr pos:start="75:26" pos:end="75:26"><name pos:start="75:26" pos:end="75:26">u</name></expr></argument>, <argument pos:start="75:29" pos:end="75:29"><expr pos:start="75:29" pos:end="75:29"><name pos:start="75:29" pos:end="75:29">y</name></expr></argument>, <argument pos:start="75:32" pos:end="75:32"><expr pos:start="75:32" pos:end="75:32"><name pos:start="75:32" pos:end="75:32">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="79:13" pos:end="79:29"><expr pos:start="79:13" pos:end="79:28"><name pos:start="79:13" pos:end="79:15">val</name> <operator pos:start="79:17" pos:end="79:17">=</operator> <call pos:start="79:19" pos:end="79:28"><name pos:start="79:19" pos:end="79:22">CLIP</name><argument_list pos:start="79:23" pos:end="79:28">(<argument pos:start="79:24" pos:end="79:27"><expr pos:start="79:24" pos:end="79:27"><operator pos:start="79:24" pos:end="79:24">*</operator><name pos:start="79:25" pos:end="79:25">y</name><operator pos:start="79:26" pos:end="79:27">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="81:13" pos:end="83:45"><if pos:start="81:13" pos:end="83:45">if <condition pos:start="81:16" pos:end="81:38">(<expr pos:start="81:17" pos:end="81:37"><name pos:start="81:17" pos:end="81:17">w</name> <operator pos:start="81:19" pos:end="81:20">==</operator> <name pos:start="81:22" pos:end="81:33"><name pos:start="81:22" pos:end="81:26">avctx</name><operator pos:start="81:27" pos:end="81:28">-&gt;</operator><name pos:start="81:29" pos:end="81:33">width</name></name> <operator pos:start="81:35" pos:end="81:35">-</operator> <literal type="number" pos:start="81:37" pos:end="81:37">2</literal></expr>)</condition><block type="pseudo" pos:start="83:17" pos:end="83:45"><block_content pos:start="83:17" pos:end="83:45">

                <expr_stmt pos:start="83:17" pos:end="83:45"><expr pos:start="83:17" pos:end="83:44"><call pos:start="83:17" pos:end="83:44"><name pos:start="83:17" pos:end="83:35">bytestream_put_le32</name><argument_list pos:start="83:36" pos:end="83:44">(<argument pos:start="83:37" pos:end="83:38"><expr pos:start="83:37" pos:end="83:38"><operator pos:start="83:37" pos:end="83:37">&amp;</operator><name pos:start="83:38" pos:end="83:38">p</name></expr></argument>, <argument pos:start="83:41" pos:end="83:43"><expr pos:start="83:41" pos:end="83:43"><name pos:start="83:41" pos:end="83:43">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="87:9" pos:end="99:9"><if pos:start="87:9" pos:end="99:9">if <condition pos:start="87:12" pos:end="87:33">(<expr pos:start="87:13" pos:end="87:32"><name pos:start="87:13" pos:end="87:13">w</name> <operator pos:start="87:15" pos:end="87:15">&lt;</operator> <name pos:start="87:17" pos:end="87:28"><name pos:start="87:17" pos:end="87:21">avctx</name><operator pos:start="87:22" pos:end="87:23">-&gt;</operator><name pos:start="87:24" pos:end="87:28">width</name></name> <operator pos:start="87:30" pos:end="87:30">-</operator> <literal type="number" pos:start="87:32" pos:end="87:32">3</literal></expr>)</condition> <block pos:start="87:35" pos:end="99:9">{<block_content pos:start="89:13" pos:end="97:41">

            <expr_stmt pos:start="89:13" pos:end="89:59"><expr pos:start="89:13" pos:end="89:58"><name pos:start="89:13" pos:end="89:15">val</name> <operator pos:start="89:17" pos:end="89:18">|=</operator> <operator pos:start="89:20" pos:end="89:20">(</operator><call pos:start="89:21" pos:end="89:30"><name pos:start="89:21" pos:end="89:24">CLIP</name><argument_list pos:start="89:25" pos:end="89:30">(<argument pos:start="89:26" pos:end="89:29"><expr pos:start="89:26" pos:end="89:29"><operator pos:start="89:26" pos:end="89:26">*</operator><name pos:start="89:27" pos:end="89:27">u</name><operator pos:start="89:28" pos:end="89:29">++</operator></expr></argument>)</argument_list></call> <operator pos:start="89:32" pos:end="89:33">&lt;&lt;</operator> <literal type="number" pos:start="89:35" pos:end="89:36">10</literal><operator pos:start="89:37" pos:end="89:37">)</operator> <operator pos:start="89:39" pos:end="89:39">|</operator> <operator pos:start="89:41" pos:end="89:41">(</operator><call pos:start="89:42" pos:end="89:51"><name pos:start="89:42" pos:end="89:45">CLIP</name><argument_list pos:start="89:46" pos:end="89:51">(<argument pos:start="89:47" pos:end="89:50"><expr pos:start="89:47" pos:end="89:50"><operator pos:start="89:47" pos:end="89:47">*</operator><name pos:start="89:48" pos:end="89:48">y</name><operator pos:start="89:49" pos:end="89:50">++</operator></expr></argument>)</argument_list></call> <operator pos:start="89:53" pos:end="89:54">&lt;&lt;</operator> <literal type="number" pos:start="89:56" pos:end="89:57">20</literal><operator pos:start="89:58" pos:end="89:58">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:41"><expr pos:start="91:13" pos:end="91:40"><call pos:start="91:13" pos:end="91:40"><name pos:start="91:13" pos:end="91:31">bytestream_put_le32</name><argument_list pos:start="91:32" pos:end="91:40">(<argument pos:start="91:33" pos:end="91:34"><expr pos:start="91:33" pos:end="91:34"><operator pos:start="91:33" pos:end="91:33">&amp;</operator><name pos:start="91:34" pos:end="91:34">p</name></expr></argument>, <argument pos:start="91:37" pos:end="91:39"><expr pos:start="91:37" pos:end="91:39"><name pos:start="91:37" pos:end="91:39">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="95:13" pos:end="95:50"><expr pos:start="95:13" pos:end="95:49"><name pos:start="95:13" pos:end="95:15">val</name> <operator pos:start="95:17" pos:end="95:17">=</operator> <call pos:start="95:19" pos:end="95:28"><name pos:start="95:19" pos:end="95:22">CLIP</name><argument_list pos:start="95:23" pos:end="95:28">(<argument pos:start="95:24" pos:end="95:27"><expr pos:start="95:24" pos:end="95:27"><operator pos:start="95:24" pos:end="95:24">*</operator><name pos:start="95:25" pos:end="95:25">v</name><operator pos:start="95:26" pos:end="95:27">++</operator></expr></argument>)</argument_list></call> <operator pos:start="95:30" pos:end="95:30">|</operator> <operator pos:start="95:32" pos:end="95:32">(</operator><call pos:start="95:33" pos:end="95:42"><name pos:start="95:33" pos:end="95:36">CLIP</name><argument_list pos:start="95:37" pos:end="95:42">(<argument pos:start="95:38" pos:end="95:41"><expr pos:start="95:38" pos:end="95:41"><operator pos:start="95:38" pos:end="95:38">*</operator><name pos:start="95:39" pos:end="95:39">y</name><operator pos:start="95:40" pos:end="95:41">++</operator></expr></argument>)</argument_list></call> <operator pos:start="95:44" pos:end="95:45">&lt;&lt;</operator> <literal type="number" pos:start="95:47" pos:end="95:48">10</literal><operator pos:start="95:49" pos:end="95:49">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:41"><expr pos:start="97:13" pos:end="97:40"><call pos:start="97:13" pos:end="97:40"><name pos:start="97:13" pos:end="97:31">bytestream_put_le32</name><argument_list pos:start="97:32" pos:end="97:40">(<argument pos:start="97:33" pos:end="97:34"><expr pos:start="97:33" pos:end="97:34"><operator pos:start="97:33" pos:end="97:33">&amp;</operator><name pos:start="97:34" pos:end="97:34">p</name></expr></argument>, <argument pos:start="97:37" pos:end="97:39"><expr pos:start="97:37" pos:end="97:39"><name pos:start="97:37" pos:end="97:39">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="103:9" pos:end="103:23"><expr pos:start="103:9" pos:end="103:22"><name pos:start="103:9" pos:end="103:12">pdst</name> <operator pos:start="103:14" pos:end="103:15">+=</operator> <name pos:start="103:17" pos:end="103:22">stride</name></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:31"><expr pos:start="105:9" pos:end="105:30"><call pos:start="105:9" pos:end="105:30"><name pos:start="105:9" pos:end="105:14">memset</name><argument_list pos:start="105:15" pos:end="105:30">(<argument pos:start="105:16" pos:end="105:16"><expr pos:start="105:16" pos:end="105:16"><name pos:start="105:16" pos:end="105:16">p</name></expr></argument>, <argument pos:start="105:19" pos:end="105:19"><expr pos:start="105:19" pos:end="105:19"><literal type="number" pos:start="105:19" pos:end="105:19">0</literal></expr></argument>, <argument pos:start="105:22" pos:end="105:29"><expr pos:start="105:22" pos:end="105:29"><name pos:start="105:22" pos:end="105:25">pdst</name> <operator pos:start="105:27" pos:end="105:27">-</operator> <name pos:start="105:29" pos:end="105:29">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:17"><expr pos:start="107:9" pos:end="107:16"><name pos:start="107:9" pos:end="107:9">p</name> <operator pos:start="107:11" pos:end="107:11">=</operator> <name pos:start="107:13" pos:end="107:16">pdst</name></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:49"><expr pos:start="109:9" pos:end="109:48"><name pos:start="109:9" pos:end="109:9">y</name> <operator pos:start="109:11" pos:end="109:12">+=</operator> <name pos:start="109:14" pos:end="109:29"><name pos:start="109:14" pos:end="109:16">pic</name><operator pos:start="109:17" pos:end="109:18">-&gt;</operator><name pos:start="109:19" pos:end="109:26">linesize</name><index pos:start="109:27" pos:end="109:29">[<expr pos:start="109:28" pos:end="109:28"><literal type="number" pos:start="109:28" pos:end="109:28">0</literal></expr>]</index></name> <operator pos:start="109:31" pos:end="109:31">/</operator> <literal type="number" pos:start="109:33" pos:end="109:35">2</literal> <operator pos:start="109:35" pos:end="109:35">-</operator> <name pos:start="109:37" pos:end="109:48"><name pos:start="109:37" pos:end="109:41">avctx</name><operator pos:start="109:42" pos:end="109:43">-&gt;</operator><name pos:start="109:44" pos:end="109:48">width</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:53"><expr pos:start="111:9" pos:end="111:52"><name pos:start="111:9" pos:end="111:9">u</name> <operator pos:start="111:11" pos:end="111:12">+=</operator> <name pos:start="111:14" pos:end="111:29"><name pos:start="111:14" pos:end="111:16">pic</name><operator pos:start="111:17" pos:end="111:18">-&gt;</operator><name pos:start="111:19" pos:end="111:26">linesize</name><index pos:start="111:27" pos:end="111:29">[<expr pos:start="111:28" pos:end="111:28"><literal type="number" pos:start="111:28" pos:end="111:28">1</literal></expr>]</index></name> <operator pos:start="111:31" pos:end="111:31">/</operator> <literal type="number" pos:start="111:33" pos:end="111:35">2</literal> <operator pos:start="111:35" pos:end="111:35">-</operator> <name pos:start="111:37" pos:end="111:48"><name pos:start="111:37" pos:end="111:41">avctx</name><operator pos:start="111:42" pos:end="111:43">-&gt;</operator><name pos:start="111:44" pos:end="111:48">width</name></name> <operator pos:start="111:50" pos:end="111:50">/</operator> <literal type="number" pos:start="111:52" pos:end="111:52">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:53"><expr pos:start="113:9" pos:end="113:52"><name pos:start="113:9" pos:end="113:9">v</name> <operator pos:start="113:11" pos:end="113:12">+=</operator> <name pos:start="113:14" pos:end="113:29"><name pos:start="113:14" pos:end="113:16">pic</name><operator pos:start="113:17" pos:end="113:18">-&gt;</operator><name pos:start="113:19" pos:end="113:26">linesize</name><index pos:start="113:27" pos:end="113:29">[<expr pos:start="113:28" pos:end="113:28"><literal type="number" pos:start="113:28" pos:end="113:28">2</literal></expr>]</index></name> <operator pos:start="113:31" pos:end="113:31">/</operator> <literal type="number" pos:start="113:33" pos:end="113:35">2</literal> <operator pos:start="113:35" pos:end="113:35">-</operator> <name pos:start="113:37" pos:end="113:48"><name pos:start="113:37" pos:end="113:41">avctx</name><operator pos:start="113:42" pos:end="113:43">-&gt;</operator><name pos:start="113:44" pos:end="113:48">width</name></name> <operator pos:start="113:50" pos:end="113:50">/</operator> <literal type="number" pos:start="113:52" pos:end="113:52">2</literal></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="119:5" pos:end="119:19">return <expr pos:start="119:12" pos:end="119:18"><name pos:start="119:12" pos:end="119:12">p</name> <operator pos:start="119:14" pos:end="119:14">-</operator> <name pos:start="119:16" pos:end="119:18">buf</name></expr>;</return>

</block_content>}</block></function>
</unit>
