<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9562.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:38">fimd_update_memory_section</name><parameter_list pos:start="1:39" pos:end="1:76">(<parameter pos:start="1:40" pos:end="1:61"><decl pos:start="1:40" pos:end="1:61"><type pos:start="1:40" pos:end="1:61"><name pos:start="1:40" pos:end="1:58">Exynos4210fimdState</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:61">s</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:75"><decl pos:start="1:64" pos:end="1:75"><type pos:start="1:64" pos:end="1:75"><name pos:start="1:64" pos:end="1:71">unsigned</name></type> <name pos:start="1:73" pos:end="1:75">win</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="105:1">{<block_content pos:start="5:5" pos:end="103:18">

    <decl_stmt pos:start="5:5" pos:end="5:46"><decl pos:start="5:5" pos:end="5:45"><type pos:start="5:5" pos:end="5:26"><name pos:start="5:5" pos:end="5:24">Exynos4210fimdWindow</name> <modifier pos:start="5:26" pos:end="5:26">*</modifier></type><name pos:start="5:27" pos:end="5:27">w</name> <init pos:start="5:29" pos:end="5:45">= <expr pos:start="5:31" pos:end="5:45"><operator pos:start="5:31" pos:end="5:31">&amp;</operator><name pos:start="5:32" pos:end="5:45"><name pos:start="5:32" pos:end="5:32">s</name><operator pos:start="5:33" pos:end="5:34">-&gt;</operator><name pos:start="5:35" pos:end="5:40">window</name><index pos:start="5:41" pos:end="5:45">[<expr pos:start="5:42" pos:end="5:44"><name pos:start="5:42" pos:end="5:44">win</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:52"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:22">target_phys_addr_t</name></type> <name pos:start="7:24" pos:end="7:36">fb_start_addr</name></decl>, <decl pos:start="7:39" pos:end="7:51"><type ref="prev" pos:start="7:5" pos:end="7:22"/><name pos:start="7:39" pos:end="7:51">fb_mapped_len</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="17:5"><if pos:start="11:5" pos:end="17:5">if <condition pos:start="11:8" pos:end="13:53">(<expr pos:start="11:9" pos:end="13:52"><operator pos:start="11:9" pos:end="11:9">!</operator><name pos:start="11:10" pos:end="11:19"><name pos:start="11:10" pos:end="11:10">s</name><operator pos:start="11:11" pos:end="11:12">-&gt;</operator><name pos:start="11:13" pos:end="11:19">enabled</name></name> <operator pos:start="11:21" pos:end="11:22">||</operator> <operator pos:start="11:24" pos:end="11:24">!</operator><operator pos:start="11:25" pos:end="11:25">(</operator><name pos:start="11:26" pos:end="11:34"><name pos:start="11:26" pos:end="11:26">w</name><operator pos:start="11:27" pos:end="11:28">-&gt;</operator><name pos:start="11:29" pos:end="11:34">wincon</name></name> <operator pos:start="11:36" pos:end="11:36">&amp;</operator> <name pos:start="11:38" pos:end="11:54">FIMD_WINCON_ENWIN</name><operator pos:start="11:55" pos:end="11:55">)</operator> <operator pos:start="11:57" pos:end="11:58">||</operator>

            <call pos:start="13:13" pos:end="13:52"><name pos:start="13:13" pos:end="13:33">FIMD_WINDOW_PROTECTED</name><argument_list pos:start="13:34" pos:end="13:52">(<argument pos:start="13:35" pos:end="13:46"><expr pos:start="13:35" pos:end="13:46"><name pos:start="13:35" pos:end="13:46"><name pos:start="13:35" pos:end="13:35">s</name><operator pos:start="13:36" pos:end="13:37">-&gt;</operator><name pos:start="13:38" pos:end="13:46">shadowcon</name></name></expr></argument>, <argument pos:start="13:49" pos:end="13:51"><expr pos:start="13:49" pos:end="13:51"><name pos:start="13:49" pos:end="13:51">win</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="13:55" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:15">

        <return pos:start="15:9" pos:end="15:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="21:5" pos:end="29:5"><if pos:start="21:5" pos:end="29:5">if <condition pos:start="21:8" pos:end="21:24">(<expr pos:start="21:9" pos:end="21:23"><name pos:start="21:9" pos:end="21:23"><name pos:start="21:9" pos:end="21:9">w</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:23">host_fb_addr</name></name></expr>)</condition> <block pos:start="21:26" pos:end="29:5">{<block_content pos:start="23:9" pos:end="27:22">

        <expr_stmt pos:start="23:9" pos:end="23:68"><expr pos:start="23:9" pos:end="23:67"><call pos:start="23:9" pos:end="23:67"><name pos:start="23:9" pos:end="23:33">cpu_physical_memory_unmap</name><argument_list pos:start="23:34" pos:end="23:67">(<argument pos:start="23:35" pos:end="23:49"><expr pos:start="23:35" pos:end="23:49"><name pos:start="23:35" pos:end="23:49"><name pos:start="23:35" pos:end="23:35">w</name><operator pos:start="23:36" pos:end="23:37">-&gt;</operator><name pos:start="23:38" pos:end="23:49">host_fb_addr</name></name></expr></argument>, <argument pos:start="23:52" pos:end="23:60"><expr pos:start="23:52" pos:end="23:60"><name pos:start="23:52" pos:end="23:60"><name pos:start="23:52" pos:end="23:52">w</name><operator pos:start="23:53" pos:end="23:54">-&gt;</operator><name pos:start="23:55" pos:end="23:60">fb_len</name></name></expr></argument>, <argument pos:start="23:63" pos:end="23:63"><expr pos:start="23:63" pos:end="23:63"><literal type="number" pos:start="23:63" pos:end="23:63">0</literal></expr></argument>, <argument pos:start="23:66" pos:end="23:66"><expr pos:start="23:66" pos:end="23:66"><literal type="number" pos:start="23:66" pos:end="23:66">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:31"><expr pos:start="25:9" pos:end="25:30"><name pos:start="25:9" pos:end="25:23"><name pos:start="25:9" pos:end="25:9">w</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:23">host_fb_addr</name></name> <operator pos:start="25:25" pos:end="25:25">=</operator> <name pos:start="25:27" pos:end="25:30">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:22"><expr pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:17"><name pos:start="27:9" pos:end="27:9">w</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:17">fb_len</name></name> <operator pos:start="27:19" pos:end="27:19">=</operator> <literal type="number" pos:start="27:21" pos:end="27:21">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:56"><expr pos:start="33:5" pos:end="33:55"><name pos:start="33:5" pos:end="33:17">fb_start_addr</name> <operator pos:start="33:19" pos:end="33:19">=</operator> <name pos:start="33:21" pos:end="33:55"><name pos:start="33:21" pos:end="33:21">w</name><operator pos:start="33:22" pos:end="33:23">-&gt;</operator><name pos:start="33:24" pos:end="33:32">buf_start</name><index pos:start="33:33" pos:end="33:55">[<expr pos:start="33:34" pos:end="33:54"><call pos:start="33:34" pos:end="33:54"><name pos:start="33:34" pos:end="33:51">fimd_get_buffer_id</name><argument_list pos:start="33:52" pos:end="33:54">(<argument pos:start="33:53" pos:end="33:53"><expr pos:start="33:53" pos:end="33:53"><name pos:start="33:53" pos:end="33:53">w</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

    <comment type="block" pos:start="35:5" pos:end="35:72">/* Total number of bytes of virtual screen used by current window */</comment>

    <expr_stmt pos:start="37:5" pos:end="39:47"><expr pos:start="37:5" pos:end="39:46"><name pos:start="37:5" pos:end="37:13"><name pos:start="37:5" pos:end="37:5">w</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:13">fb_len</name></name> <operator pos:start="37:15" pos:end="37:15">=</operator> <name pos:start="37:17" pos:end="37:29">fb_mapped_len</name> <operator pos:start="37:31" pos:end="37:31">=</operator> <operator pos:start="37:33" pos:end="37:33">(</operator><name pos:start="37:34" pos:end="37:50"><name pos:start="37:34" pos:end="37:34">w</name><operator pos:start="37:35" pos:end="37:36">-&gt;</operator><name pos:start="37:37" pos:end="37:50">virtpage_width</name></name> <operator pos:start="37:52" pos:end="37:52">+</operator> <name pos:start="37:54" pos:end="37:72"><name pos:start="37:54" pos:end="37:54">w</name><operator pos:start="37:55" pos:end="37:56">-&gt;</operator><name pos:start="37:57" pos:end="37:72">virtpage_offsize</name></name><operator pos:start="37:73" pos:end="37:73">)</operator> <operator pos:start="37:75" pos:end="37:75">*</operator>

            <operator pos:start="39:13" pos:end="39:13">(</operator><name pos:start="39:14" pos:end="39:26"><name pos:start="39:14" pos:end="39:14">w</name><operator pos:start="39:15" pos:end="39:16">-&gt;</operator><name pos:start="39:17" pos:end="39:26">rightbot_y</name></name> <operator pos:start="39:28" pos:end="39:28">-</operator> <name pos:start="39:30" pos:end="39:41"><name pos:start="39:30" pos:end="39:30">w</name><operator pos:start="39:31" pos:end="39:32">-&gt;</operator><name pos:start="39:33" pos:end="39:41">lefttop_y</name></name> <operator pos:start="39:43" pos:end="39:43">+</operator> <literal type="number" pos:start="39:45" pos:end="39:45">1</literal><operator pos:start="39:46" pos:end="39:46">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="43:38"><expr pos:start="41:5" pos:end="43:37"><name pos:start="41:5" pos:end="41:18"><name pos:start="41:5" pos:end="41:5">w</name><operator pos:start="41:6" pos:end="41:7">-&gt;</operator><name pos:start="41:8" pos:end="41:18">mem_section</name></name> <operator pos:start="41:20" pos:end="41:20">=</operator> <call pos:start="41:22" pos:end="43:37"><name pos:start="41:22" pos:end="41:39">memory_region_find</name><argument_list pos:start="41:40" pos:end="43:37">(<argument pos:start="41:41" pos:end="41:72"><expr pos:start="41:41" pos:end="41:72"><call pos:start="41:41" pos:end="41:72"><name pos:start="41:41" pos:end="41:60">sysbus_address_space</name><argument_list pos:start="41:61" pos:end="41:72">(<argument pos:start="41:62" pos:end="41:71"><expr pos:start="41:62" pos:end="41:71"><operator pos:start="41:62" pos:end="41:62">&amp;</operator><name pos:start="41:63" pos:end="41:71"><name pos:start="41:63" pos:end="41:63">s</name><operator pos:start="41:64" pos:end="41:65">-&gt;</operator><name pos:start="41:66" pos:end="41:71">busdev</name></name></expr></argument>)</argument_list></call></expr></argument>,

            <argument pos:start="43:13" pos:end="43:25"><expr pos:start="43:13" pos:end="43:25"><name pos:start="43:13" pos:end="43:25">fb_start_addr</name></expr></argument>, <argument pos:start="43:28" pos:end="43:36"><expr pos:start="43:28" pos:end="43:36"><name pos:start="43:28" pos:end="43:36"><name pos:start="43:28" pos:end="43:28">w</name><operator pos:start="43:29" pos:end="43:30">-&gt;</operator><name pos:start="43:31" pos:end="43:36">fb_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:30"><expr pos:start="45:5" pos:end="45:29"><call pos:start="45:5" pos:end="45:29"><name pos:start="45:5" pos:end="45:10">assert</name><argument_list pos:start="45:11" pos:end="45:29">(<argument pos:start="45:12" pos:end="45:28"><expr pos:start="45:12" pos:end="45:28"><name pos:start="45:12" pos:end="45:28"><name pos:start="45:12" pos:end="45:12">w</name><operator pos:start="45:13" pos:end="45:14">-&gt;</operator><name pos:start="45:15" pos:end="45:25">mem_section</name><operator pos:start="45:26" pos:end="45:26">.</operator><name pos:start="45:27" pos:end="45:28">mr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:72"><expr pos:start="47:5" pos:end="47:71"><call pos:start="47:5" pos:end="47:71"><name pos:start="47:5" pos:end="47:10">assert</name><argument_list pos:start="47:11" pos:end="47:71">(<argument pos:start="47:12" pos:end="47:70"><expr pos:start="47:12" pos:end="47:70"><name pos:start="47:12" pos:end="47:53"><name pos:start="47:12" pos:end="47:12">w</name><operator pos:start="47:13" pos:end="47:14">-&gt;</operator><name pos:start="47:15" pos:end="47:25">mem_section</name><operator pos:start="47:26" pos:end="47:26">.</operator><name pos:start="47:27" pos:end="47:53">offset_within_address_space</name></name> <operator pos:start="47:55" pos:end="47:56">==</operator> <name pos:start="47:58" pos:end="47:70">fb_start_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="51:43"><expr pos:start="49:5" pos:end="51:42"><call pos:start="49:5" pos:end="51:42"><name pos:start="49:5" pos:end="49:16">DPRINT_TRACE</name><argument_list pos:start="49:17" pos:end="51:42">(<argument pos:start="49:18" pos:end="49:76"><expr pos:start="49:18" pos:end="49:76"><literal type="string" pos:start="49:18" pos:end="49:76">"Window %u framebuffer changed: address=0x%08x, len=0x%x\n"</literal></expr></argument>,

            <argument pos:start="51:13" pos:end="51:15"><expr pos:start="51:13" pos:end="51:15"><name pos:start="51:13" pos:end="51:15">win</name></expr></argument>, <argument pos:start="51:18" pos:end="51:30"><expr pos:start="51:18" pos:end="51:30"><name pos:start="51:18" pos:end="51:30">fb_start_addr</name></expr></argument>, <argument pos:start="51:33" pos:end="51:41"><expr pos:start="51:33" pos:end="51:41"><name pos:start="51:33" pos:end="51:41"><name pos:start="51:33" pos:end="51:33">w</name><operator pos:start="51:34" pos:end="51:35">-&gt;</operator><name pos:start="51:36" pos:end="51:41">fb_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="55:5" pos:end="63:5"><if pos:start="55:5" pos:end="63:5">if <condition pos:start="55:8" pos:end="57:53">(<expr pos:start="55:9" pos:end="57:52"><name pos:start="55:9" pos:end="55:27"><name pos:start="55:9" pos:end="55:9">w</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:22">mem_section</name><operator pos:start="55:23" pos:end="55:23">.</operator><name pos:start="55:24" pos:end="55:27">size</name></name> <operator pos:start="55:29" pos:end="55:30">!=</operator> <name pos:start="55:32" pos:end="55:40"><name pos:start="55:32" pos:end="55:32">w</name><operator pos:start="55:33" pos:end="55:34">-&gt;</operator><name pos:start="55:35" pos:end="55:40">fb_len</name></name> <operator pos:start="55:42" pos:end="55:43">||</operator>

            <operator pos:start="57:13" pos:end="57:13">!</operator><call pos:start="57:14" pos:end="57:52"><name pos:start="57:14" pos:end="57:33">memory_region_is_ram</name><argument_list pos:start="57:34" pos:end="57:52">(<argument pos:start="57:35" pos:end="57:51"><expr pos:start="57:35" pos:end="57:51"><name pos:start="57:35" pos:end="57:51"><name pos:start="57:35" pos:end="57:35">w</name><operator pos:start="57:36" pos:end="57:37">-&gt;</operator><name pos:start="57:38" pos:end="57:48">mem_section</name><operator pos:start="57:49" pos:end="57:49">.</operator><name pos:start="57:50" pos:end="57:51">mr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="57:55" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:26">

        <expr_stmt pos:start="59:9" pos:end="59:75"><expr pos:start="59:9" pos:end="59:74"><call pos:start="59:9" pos:end="59:74"><name pos:start="59:9" pos:end="59:20">DPRINT_ERROR</name><argument_list pos:start="59:21" pos:end="59:74">(<argument pos:start="59:22" pos:end="59:68"><expr pos:start="59:22" pos:end="59:68"><literal type="string" pos:start="59:22" pos:end="59:68">"Failed to find window %u framebuffer region\n"</literal></expr></argument>, <argument pos:start="59:71" pos:end="59:73"><expr pos:start="59:71" pos:end="59:73"><name pos:start="59:71" pos:end="59:73">win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="61:9" pos:end="61:26">goto <name pos:start="61:14" pos:end="61:25">error_return</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:80"><expr pos:start="67:5" pos:end="67:79"><name pos:start="67:5" pos:end="67:19"><name pos:start="67:5" pos:end="67:5">w</name><operator pos:start="67:6" pos:end="67:7">-&gt;</operator><name pos:start="67:8" pos:end="67:19">host_fb_addr</name></name> <operator pos:start="67:21" pos:end="67:21">=</operator> <call pos:start="67:23" pos:end="67:79"><name pos:start="67:23" pos:end="67:45">cpu_physical_memory_map</name><argument_list pos:start="67:46" pos:end="67:79">(<argument pos:start="67:47" pos:end="67:59"><expr pos:start="67:47" pos:end="67:59"><name pos:start="67:47" pos:end="67:59">fb_start_addr</name></expr></argument>, <argument pos:start="67:62" pos:end="67:75"><expr pos:start="67:62" pos:end="67:75"><operator pos:start="67:62" pos:end="67:62">&amp;</operator><name pos:start="67:63" pos:end="67:75">fb_mapped_len</name></expr></argument>, <argument pos:start="67:78" pos:end="67:78"><expr pos:start="67:78" pos:end="67:78"><literal type="number" pos:start="67:78" pos:end="67:78">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="69:5" pos:end="75:5"><if pos:start="69:5" pos:end="75:5">if <condition pos:start="69:8" pos:end="69:25">(<expr pos:start="69:9" pos:end="69:24"><operator pos:start="69:9" pos:end="69:9">!</operator><name pos:start="69:10" pos:end="69:24"><name pos:start="69:10" pos:end="69:10">w</name><operator pos:start="69:11" pos:end="69:12">-&gt;</operator><name pos:start="69:13" pos:end="69:24">host_fb_addr</name></name></expr>)</condition> <block pos:start="69:27" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:26">

        <expr_stmt pos:start="71:9" pos:end="71:67"><expr pos:start="71:9" pos:end="71:66"><call pos:start="71:9" pos:end="71:66"><name pos:start="71:9" pos:end="71:20">DPRINT_ERROR</name><argument_list pos:start="71:21" pos:end="71:66">(<argument pos:start="71:22" pos:end="71:60"><expr pos:start="71:22" pos:end="71:60"><literal type="string" pos:start="71:22" pos:end="71:60">"Failed to map window %u framebuffer\n"</literal></expr></argument>, <argument pos:start="71:63" pos:end="71:65"><expr pos:start="71:63" pos:end="71:65"><name pos:start="71:63" pos:end="71:65">win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="73:9" pos:end="73:26">goto <name pos:start="73:14" pos:end="73:25">error_return</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="79:5" pos:end="89:5"><if pos:start="79:5" pos:end="89:5">if <condition pos:start="79:8" pos:end="79:35">(<expr pos:start="79:9" pos:end="79:34"><name pos:start="79:9" pos:end="79:21">fb_mapped_len</name> <operator pos:start="79:23" pos:end="79:24">!=</operator> <name pos:start="79:26" pos:end="79:34"><name pos:start="79:26" pos:end="79:26">w</name><operator pos:start="79:27" pos:end="79:28">-&gt;</operator><name pos:start="79:29" pos:end="79:34">fb_len</name></name></expr>)</condition> <block pos:start="79:37" pos:end="89:5">{<block_content pos:start="81:9" pos:end="87:26">

        <expr_stmt pos:start="81:9" pos:end="83:35"><expr pos:start="81:9" pos:end="83:34"><call pos:start="81:9" pos:end="83:34"><name pos:start="81:9" pos:end="81:20">DPRINT_ERROR</name><argument_list pos:start="81:21" pos:end="83:34">(<argument pos:start="81:22" pos:end="83:28"><expr pos:start="81:22" pos:end="83:28"><literal type="string" pos:start="81:22" pos:end="81:72">"Window %u mapped framebuffer length is less then "</literal>

                <literal type="string" pos:start="83:17" pos:end="83:28">"expected\n"</literal></expr></argument>, <argument pos:start="83:31" pos:end="83:33"><expr pos:start="83:31" pos:end="83:33"><name pos:start="83:31" pos:end="83:33">win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:72"><expr pos:start="85:9" pos:end="85:71"><call pos:start="85:9" pos:end="85:71"><name pos:start="85:9" pos:end="85:33">cpu_physical_memory_unmap</name><argument_list pos:start="85:34" pos:end="85:71">(<argument pos:start="85:35" pos:end="85:49"><expr pos:start="85:35" pos:end="85:49"><name pos:start="85:35" pos:end="85:49"><name pos:start="85:35" pos:end="85:35">w</name><operator pos:start="85:36" pos:end="85:37">-&gt;</operator><name pos:start="85:38" pos:end="85:49">host_fb_addr</name></name></expr></argument>, <argument pos:start="85:52" pos:end="85:64"><expr pos:start="85:52" pos:end="85:64"><name pos:start="85:52" pos:end="85:64">fb_mapped_len</name></expr></argument>, <argument pos:start="85:67" pos:end="85:67"><expr pos:start="85:67" pos:end="85:67"><literal type="number" pos:start="85:67" pos:end="85:67">0</literal></expr></argument>, <argument pos:start="85:70" pos:end="85:70"><expr pos:start="85:70" pos:end="85:70"><literal type="number" pos:start="85:70" pos:end="85:70">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="87:9" pos:end="87:26">goto <name pos:start="87:14" pos:end="87:25">error_return</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <return pos:start="91:5" pos:end="91:11">return;</return>



<label pos:start="95:1" pos:end="95:13"><name pos:start="95:1" pos:end="95:12">error_return</name>:</label>

    <expr_stmt pos:start="97:5" pos:end="97:29"><expr pos:start="97:5" pos:end="97:28"><name pos:start="97:5" pos:end="97:21"><name pos:start="97:5" pos:end="97:5">w</name><operator pos:start="97:6" pos:end="97:7">-&gt;</operator><name pos:start="97:8" pos:end="97:18">mem_section</name><operator pos:start="97:19" pos:end="97:19">.</operator><name pos:start="97:20" pos:end="97:21">mr</name></name> <operator pos:start="97:23" pos:end="97:23">=</operator> <name pos:start="97:25" pos:end="97:28">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:28"><expr pos:start="99:5" pos:end="99:27"><name pos:start="99:5" pos:end="99:23"><name pos:start="99:5" pos:end="99:5">w</name><operator pos:start="99:6" pos:end="99:7">-&gt;</operator><name pos:start="99:8" pos:end="99:18">mem_section</name><operator pos:start="99:19" pos:end="99:19">.</operator><name pos:start="99:20" pos:end="99:23">size</name></name> <operator pos:start="99:25" pos:end="99:25">=</operator> <literal type="number" pos:start="99:27" pos:end="99:27">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:27"><expr pos:start="101:5" pos:end="101:26"><name pos:start="101:5" pos:end="101:19"><name pos:start="101:5" pos:end="101:5">w</name><operator pos:start="101:6" pos:end="101:7">-&gt;</operator><name pos:start="101:8" pos:end="101:19">host_fb_addr</name></name> <operator pos:start="101:21" pos:end="101:21">=</operator> <name pos:start="101:23" pos:end="101:26">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:18"><expr pos:start="103:5" pos:end="103:17"><name pos:start="103:5" pos:end="103:13"><name pos:start="103:5" pos:end="103:5">w</name><operator pos:start="103:6" pos:end="103:7">-&gt;</operator><name pos:start="103:8" pos:end="103:13">fb_len</name></name> <operator pos:start="103:15" pos:end="103:15">=</operator> <literal type="number" pos:start="103:17" pos:end="103:17">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
