<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15705.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">vmxnet3_pci_realize</name><parameter_list pos:start="1:32" pos:end="1:65">(<parameter pos:start="1:33" pos:end="1:50"><decl pos:start="1:33" pos:end="1:50"><type pos:start="1:33" pos:end="1:50"><name pos:start="1:33" pos:end="1:41">PCIDevice</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:50">pci_dev</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:64"><decl pos:start="1:53" pos:end="1:64"><type pos:start="1:53" pos:end="1:64"><name pos:start="1:53" pos:end="1:57">Error</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier><modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:64">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="101:1">{<block_content pos:start="5:5" pos:end="99:78">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:38"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">DeviceState</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:20">dev</name> <init pos:start="5:22" pos:end="5:38">= <expr pos:start="5:24" pos:end="5:38"><call pos:start="5:24" pos:end="5:38"><name pos:start="5:24" pos:end="5:29">DEVICE</name><argument_list pos:start="5:30" pos:end="5:38">(<argument pos:start="5:31" pos:end="5:37"><expr pos:start="5:31" pos:end="5:37"><name pos:start="5:31" pos:end="5:37">pci_dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:38"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">VMXNET3State</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">s</name> <init pos:start="7:21" pos:end="7:38">= <expr pos:start="7:23" pos:end="7:38"><call pos:start="7:23" pos:end="7:38"><name pos:start="7:23" pos:end="7:29">VMXNET3</name><argument_list pos:start="7:30" pos:end="7:38">(<argument pos:start="7:31" pos:end="7:37"><expr pos:start="7:31" pos:end="7:37"><name pos:start="7:31" pos:end="7:37">pci_dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:34"><expr pos:start="13:5" pos:end="13:33"><call pos:start="13:5" pos:end="13:33"><name pos:start="13:5" pos:end="13:13">VMW_CBPRN</name><argument_list pos:start="13:14" pos:end="13:33">(<argument pos:start="13:15" pos:end="13:32"><expr pos:start="13:15" pos:end="13:32"><literal type="string" pos:start="13:15" pos:end="13:32">"Starting init..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="19:61"><expr pos:start="17:5" pos:end="19:60"><call pos:start="17:5" pos:end="19:60"><name pos:start="17:5" pos:end="17:25">memory_region_init_io</name><argument_list pos:start="17:26" pos:end="19:60">(<argument pos:start="17:27" pos:end="17:34"><expr pos:start="17:27" pos:end="17:34"><operator pos:start="17:27" pos:end="17:27">&amp;</operator><name pos:start="17:28" pos:end="17:34"><name pos:start="17:28" pos:end="17:28">s</name><operator pos:start="17:29" pos:end="17:30">-&gt;</operator><name pos:start="17:31" pos:end="17:34">bar0</name></name></expr></argument>, <argument pos:start="17:37" pos:end="17:45"><expr pos:start="17:37" pos:end="17:45"><call pos:start="17:37" pos:end="17:45"><name pos:start="17:37" pos:end="17:42">OBJECT</name><argument_list pos:start="17:43" pos:end="17:45">(<argument pos:start="17:44" pos:end="17:44"><expr pos:start="17:44" pos:end="17:44"><name pos:start="17:44" pos:end="17:44">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="17:48" pos:end="17:54"><expr pos:start="17:48" pos:end="17:54"><operator pos:start="17:48" pos:end="17:48">&amp;</operator><name pos:start="17:49" pos:end="17:54">b0_ops</name></expr></argument>, <argument pos:start="17:57" pos:end="17:57"><expr pos:start="17:57" pos:end="17:57"><name pos:start="17:57" pos:end="17:57">s</name></expr></argument>,

                          <argument pos:start="19:27" pos:end="19:38"><expr pos:start="19:27" pos:end="19:38"><literal type="string" pos:start="19:27" pos:end="19:38">"vmxnet3-b0"</literal></expr></argument>, <argument pos:start="19:41" pos:end="19:59"><expr pos:start="19:41" pos:end="19:59"><name pos:start="19:41" pos:end="19:59">VMXNET3_PT_REG_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="23:62"><expr pos:start="21:5" pos:end="23:61"><call pos:start="21:5" pos:end="23:61"><name pos:start="21:5" pos:end="21:20">pci_register_bar</name><argument_list pos:start="21:21" pos:end="23:61">(<argument pos:start="21:22" pos:end="21:28"><expr pos:start="21:22" pos:end="21:28"><name pos:start="21:22" pos:end="21:28">pci_dev</name></expr></argument>, <argument pos:start="21:31" pos:end="21:46"><expr pos:start="21:31" pos:end="21:46"><name pos:start="21:31" pos:end="21:46">VMXNET3_BAR0_IDX</name></expr></argument>,

                     <argument pos:start="23:22" pos:end="23:50"><expr pos:start="23:22" pos:end="23:50"><name pos:start="23:22" pos:end="23:50">PCI_BASE_ADDRESS_SPACE_MEMORY</name></expr></argument>, <argument pos:start="23:53" pos:end="23:60"><expr pos:start="23:53" pos:end="23:60"><operator pos:start="23:53" pos:end="23:53">&amp;</operator><name pos:start="23:54" pos:end="23:60"><name pos:start="23:54" pos:end="23:54">s</name><operator pos:start="23:55" pos:end="23:56">-&gt;</operator><name pos:start="23:57" pos:end="23:60">bar0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="29:61"><expr pos:start="27:5" pos:end="29:60"><call pos:start="27:5" pos:end="29:60"><name pos:start="27:5" pos:end="27:25">memory_region_init_io</name><argument_list pos:start="27:26" pos:end="29:60">(<argument pos:start="27:27" pos:end="27:34"><expr pos:start="27:27" pos:end="27:34"><operator pos:start="27:27" pos:end="27:27">&amp;</operator><name pos:start="27:28" pos:end="27:34"><name pos:start="27:28" pos:end="27:28">s</name><operator pos:start="27:29" pos:end="27:30">-&gt;</operator><name pos:start="27:31" pos:end="27:34">bar1</name></name></expr></argument>, <argument pos:start="27:37" pos:end="27:45"><expr pos:start="27:37" pos:end="27:45"><call pos:start="27:37" pos:end="27:45"><name pos:start="27:37" pos:end="27:42">OBJECT</name><argument_list pos:start="27:43" pos:end="27:45">(<argument pos:start="27:44" pos:end="27:44"><expr pos:start="27:44" pos:end="27:44"><name pos:start="27:44" pos:end="27:44">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="27:48" pos:end="27:54"><expr pos:start="27:48" pos:end="27:54"><operator pos:start="27:48" pos:end="27:48">&amp;</operator><name pos:start="27:49" pos:end="27:54">b1_ops</name></expr></argument>, <argument pos:start="27:57" pos:end="27:57"><expr pos:start="27:57" pos:end="27:57"><name pos:start="27:57" pos:end="27:57">s</name></expr></argument>,

                          <argument pos:start="29:27" pos:end="29:38"><expr pos:start="29:27" pos:end="29:38"><literal type="string" pos:start="29:27" pos:end="29:38">"vmxnet3-b1"</literal></expr></argument>, <argument pos:start="29:41" pos:end="29:59"><expr pos:start="29:41" pos:end="29:59"><name pos:start="29:41" pos:end="29:59">VMXNET3_VD_REG_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="33:62"><expr pos:start="31:5" pos:end="33:61"><call pos:start="31:5" pos:end="33:61"><name pos:start="31:5" pos:end="31:20">pci_register_bar</name><argument_list pos:start="31:21" pos:end="33:61">(<argument pos:start="31:22" pos:end="31:28"><expr pos:start="31:22" pos:end="31:28"><name pos:start="31:22" pos:end="31:28">pci_dev</name></expr></argument>, <argument pos:start="31:31" pos:end="31:46"><expr pos:start="31:31" pos:end="31:46"><name pos:start="31:31" pos:end="31:46">VMXNET3_BAR1_IDX</name></expr></argument>,

                     <argument pos:start="33:22" pos:end="33:50"><expr pos:start="33:22" pos:end="33:50"><name pos:start="33:22" pos:end="33:50">PCI_BASE_ADDRESS_SPACE_MEMORY</name></expr></argument>, <argument pos:start="33:53" pos:end="33:60"><expr pos:start="33:53" pos:end="33:60"><operator pos:start="33:53" pos:end="33:53">&amp;</operator><name pos:start="33:54" pos:end="33:60"><name pos:start="33:54" pos:end="33:54">s</name><operator pos:start="33:55" pos:end="33:56">-&gt;</operator><name pos:start="33:57" pos:end="33:60">bar1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="39:46"><expr pos:start="37:5" pos:end="39:45"><call pos:start="37:5" pos:end="39:45"><name pos:start="37:5" pos:end="37:22">memory_region_init</name><argument_list pos:start="37:23" pos:end="39:45">(<argument pos:start="37:24" pos:end="37:35"><expr pos:start="37:24" pos:end="37:35"><operator pos:start="37:24" pos:end="37:24">&amp;</operator><name pos:start="37:25" pos:end="37:35"><name pos:start="37:25" pos:end="37:25">s</name><operator pos:start="37:26" pos:end="37:27">-&gt;</operator><name pos:start="37:28" pos:end="37:35">msix_bar</name></name></expr></argument>, <argument pos:start="37:38" pos:end="37:46"><expr pos:start="37:38" pos:end="37:46"><call pos:start="37:38" pos:end="37:46"><name pos:start="37:38" pos:end="37:43">OBJECT</name><argument_list pos:start="37:44" pos:end="37:46">(<argument pos:start="37:45" pos:end="37:45"><expr pos:start="37:45" pos:end="37:45"><name pos:start="37:45" pos:end="37:45">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="37:49" pos:end="37:66"><expr pos:start="37:49" pos:end="37:66"><literal type="string" pos:start="37:49" pos:end="37:66">"vmxnet3-msix-bar"</literal></expr></argument>,

                       <argument pos:start="39:24" pos:end="39:44"><expr pos:start="39:24" pos:end="39:44"><name pos:start="39:24" pos:end="39:44">VMXNET3_MSIX_BAR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="43:66"><expr pos:start="41:5" pos:end="43:65"><call pos:start="41:5" pos:end="43:65"><name pos:start="41:5" pos:end="41:20">pci_register_bar</name><argument_list pos:start="41:21" pos:end="43:65">(<argument pos:start="41:22" pos:end="41:28"><expr pos:start="41:22" pos:end="41:28"><name pos:start="41:22" pos:end="41:28">pci_dev</name></expr></argument>, <argument pos:start="41:31" pos:end="41:50"><expr pos:start="41:31" pos:end="41:50"><name pos:start="41:31" pos:end="41:50">VMXNET3_MSIX_BAR_IDX</name></expr></argument>,

                     <argument pos:start="43:22" pos:end="43:50"><expr pos:start="43:22" pos:end="43:50"><name pos:start="43:22" pos:end="43:50">PCI_BASE_ADDRESS_SPACE_MEMORY</name></expr></argument>, <argument pos:start="43:53" pos:end="43:64"><expr pos:start="43:53" pos:end="43:64"><operator pos:start="43:53" pos:end="43:53">&amp;</operator><name pos:start="43:54" pos:end="43:64"><name pos:start="43:54" pos:end="43:54">s</name><operator pos:start="43:55" pos:end="43:56">-&gt;</operator><name pos:start="43:57" pos:end="43:64">msix_bar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:38"><expr pos:start="47:5" pos:end="47:37"><call pos:start="47:5" pos:end="47:37"><name pos:start="47:5" pos:end="47:34">vmxnet3_reset_interrupt_states</name><argument_list pos:start="47:35" pos:end="47:37">(<argument pos:start="47:36" pos:end="47:36"><expr pos:start="47:36" pos:end="47:36"><name pos:start="47:36" pos:end="47:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:25">/* Interrupt pin A */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:46"><expr pos:start="53:5" pos:end="53:45"><name pos:start="53:5" pos:end="53:38"><name pos:start="53:5" pos:end="53:11">pci_dev</name><operator pos:start="53:12" pos:end="53:13">-&gt;</operator><name pos:start="53:14" pos:end="53:19">config</name><index pos:start="53:20" pos:end="53:38">[<expr pos:start="53:21" pos:end="53:37"><name pos:start="53:21" pos:end="53:37">PCI_INTERRUPT_PIN</name></expr>]</index></name> <operator pos:start="53:40" pos:end="53:40">=</operator> <literal type="number" pos:start="53:42" pos:end="53:45">0x01</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="59:69"><expr pos:start="57:5" pos:end="59:68"><name pos:start="57:5" pos:end="57:7">ret</name> <operator pos:start="57:9" pos:end="57:9">=</operator> <call pos:start="57:11" pos:end="59:68"><name pos:start="57:11" pos:end="57:18">msi_init</name><argument_list pos:start="57:19" pos:end="59:68">(<argument pos:start="57:20" pos:end="57:26"><expr pos:start="57:20" pos:end="57:26"><name pos:start="57:20" pos:end="57:26">pci_dev</name></expr></argument>, <argument pos:start="57:29" pos:end="57:49"><expr pos:start="57:29" pos:end="57:49"><call pos:start="57:29" pos:end="57:49"><name pos:start="57:29" pos:end="57:46">VMXNET3_MSI_OFFSET</name><argument_list pos:start="57:47" pos:end="57:49">(<argument pos:start="57:48" pos:end="57:48"><expr pos:start="57:48" pos:end="57:48"><name pos:start="57:48" pos:end="57:48">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="57:52" pos:end="57:74"><expr pos:start="57:52" pos:end="57:74"><name pos:start="57:52" pos:end="57:74">VMXNET3_MAX_NMSIX_INTRS</name></expr></argument>,

                   <argument pos:start="59:20" pos:end="59:36"><expr pos:start="59:20" pos:end="59:36"><name pos:start="59:20" pos:end="59:36">VMXNET3_USE_64BIT</name></expr></argument>, <argument pos:start="59:39" pos:end="59:61"><expr pos:start="59:39" pos:end="59:61"><name pos:start="59:39" pos:end="59:61">VMXNET3_PER_VECTOR_MASK</name></expr></argument>, <argument pos:start="59:64" pos:end="59:67"><expr pos:start="59:64" pos:end="59:67"><name pos:start="59:64" pos:end="59:67">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="61:5" pos:end="63:72">/* Any error other than -ENOTSUP(board's MSI support is broken)

     * is a programming error. Fall back to INTx silently on -ENOTSUP */</comment>

    <expr_stmt pos:start="65:5" pos:end="65:36"><expr pos:start="65:5" pos:end="65:35"><call pos:start="65:5" pos:end="65:35"><name pos:start="65:5" pos:end="65:10">assert</name><argument_list pos:start="65:11" pos:end="65:35">(<argument pos:start="65:12" pos:end="65:34"><expr pos:start="65:12" pos:end="65:34"><operator pos:start="65:12" pos:end="65:12">!</operator><name pos:start="65:13" pos:end="65:15">ret</name> <operator pos:start="65:17" pos:end="65:18">||</operator> <name pos:start="65:20" pos:end="65:22">ret</name> <operator pos:start="65:24" pos:end="65:25">==</operator> <operator pos:start="65:27" pos:end="65:27">-</operator><name pos:start="65:28" pos:end="65:34">ENOTSUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="69:5" pos:end="73:5"><if pos:start="69:5" pos:end="73:5">if <condition pos:start="69:8" pos:end="69:30">(<expr pos:start="69:9" pos:end="69:29"><operator pos:start="69:9" pos:end="69:9">!</operator><call pos:start="69:10" pos:end="69:29"><name pos:start="69:10" pos:end="69:26">vmxnet3_init_msix</name><argument_list pos:start="69:27" pos:end="69:29">(<argument pos:start="69:28" pos:end="69:28"><expr pos:start="69:28" pos:end="69:28"><name pos:start="69:28" pos:end="69:28">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="69:32" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:80">

        <expr_stmt pos:start="71:9" pos:end="71:80"><expr pos:start="71:9" pos:end="71:79"><call pos:start="71:9" pos:end="71:79"><name pos:start="71:9" pos:end="71:17">VMW_WRPRN</name><argument_list pos:start="71:18" pos:end="71:79">(<argument pos:start="71:19" pos:end="71:78"><expr pos:start="71:19" pos:end="71:78"><literal type="string" pos:start="71:19" pos:end="71:78">"Failed to initialize MSI-X, configuration is inconsistent."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:24"><expr pos:start="77:5" pos:end="77:23"><call pos:start="77:5" pos:end="77:23"><name pos:start="77:5" pos:end="77:20">vmxnet3_net_init</name><argument_list pos:start="77:21" pos:end="77:23">(<argument pos:start="77:22" pos:end="77:22"><expr pos:start="77:22" pos:end="77:22"><name pos:start="77:22" pos:end="77:22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="81:5" pos:end="95:5"><if pos:start="81:5" pos:end="95:5">if <condition pos:start="81:8" pos:end="81:32">(<expr pos:start="81:9" pos:end="81:31"><call pos:start="81:9" pos:end="81:31"><name pos:start="81:9" pos:end="81:22">pci_is_express</name><argument_list pos:start="81:23" pos:end="81:31">(<argument pos:start="81:24" pos:end="81:30"><expr pos:start="81:24" pos:end="81:30"><name pos:start="81:24" pos:end="81:30">pci_dev</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="81:34" pos:end="95:5">{<block_content pos:start="83:9" pos:end="93:60">

        <if_stmt pos:start="83:9" pos:end="87:9"><if pos:start="83:9" pos:end="87:9">if <condition pos:start="83:12" pos:end="83:45">(<expr pos:start="83:13" pos:end="83:44"><call pos:start="83:13" pos:end="83:44"><name pos:start="83:13" pos:end="83:30">pci_bus_is_express</name><argument_list pos:start="83:31" pos:end="83:44">(<argument pos:start="83:32" pos:end="83:43"><expr pos:start="83:32" pos:end="83:43"><name pos:start="83:32" pos:end="83:43"><name pos:start="83:32" pos:end="83:38">pci_dev</name><operator pos:start="83:39" pos:end="83:40">-&gt;</operator><name pos:start="83:41" pos:end="83:43">bus</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="83:47" pos:end="87:9">{<block_content pos:start="85:13" pos:end="85:67">

            <expr_stmt pos:start="85:13" pos:end="85:67"><expr pos:start="85:13" pos:end="85:66"><call pos:start="85:13" pos:end="85:66"><name pos:start="85:13" pos:end="85:34">pcie_endpoint_cap_init</name><argument_list pos:start="85:35" pos:end="85:66">(<argument pos:start="85:36" pos:end="85:42"><expr pos:start="85:36" pos:end="85:42"><name pos:start="85:36" pos:end="85:42">pci_dev</name></expr></argument>, <argument pos:start="85:45" pos:end="85:65"><expr pos:start="85:45" pos:end="85:65"><name pos:start="85:45" pos:end="85:65">VMXNET3_EXP_EP_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="91:9" pos:end="93:60"><expr pos:start="91:9" pos:end="93:59"><call pos:start="91:9" pos:end="93:59"><name pos:start="91:9" pos:end="91:29">pcie_dev_ser_num_init</name><argument_list pos:start="91:30" pos:end="93:59">(<argument pos:start="91:31" pos:end="91:37"><expr pos:start="91:31" pos:end="91:37"><name pos:start="91:31" pos:end="91:37">pci_dev</name></expr></argument>, <argument pos:start="91:40" pos:end="91:57"><expr pos:start="91:40" pos:end="91:57"><name pos:start="91:40" pos:end="91:57">VMXNET3_DSN_OFFSET</name></expr></argument>,

                              <argument pos:start="93:31" pos:end="93:58"><expr pos:start="93:31" pos:end="93:58"><call pos:start="93:31" pos:end="93:58"><name pos:start="93:31" pos:end="93:55">vmxnet3_device_serial_num</name><argument_list pos:start="93:56" pos:end="93:58">(<argument pos:start="93:57" pos:end="93:57"><expr pos:start="93:57" pos:end="93:57"><name pos:start="93:57" pos:end="93:57">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="99:5" pos:end="99:78"><expr pos:start="99:5" pos:end="99:77"><call pos:start="99:5" pos:end="99:77"><name pos:start="99:5" pos:end="99:24">register_savevm_live</name><argument_list pos:start="99:25" pos:end="99:77">(<argument pos:start="99:26" pos:end="99:28"><expr pos:start="99:26" pos:end="99:28"><name pos:start="99:26" pos:end="99:28">dev</name></expr></argument>, <argument pos:start="99:31" pos:end="99:44"><expr pos:start="99:31" pos:end="99:44"><literal type="string" pos:start="99:31" pos:end="99:44">"vmxnet3-msix"</literal></expr></argument>, <argument pos:start="99:47" pos:end="99:48"><expr pos:start="99:47" pos:end="99:48"><operator pos:start="99:47" pos:end="99:47">-</operator><literal type="number" pos:start="99:48" pos:end="99:48">1</literal></expr></argument>, <argument pos:start="99:51" pos:end="99:51"><expr pos:start="99:51" pos:end="99:51"><literal type="number" pos:start="99:51" pos:end="99:51">1</literal></expr></argument>, <argument pos:start="99:54" pos:end="99:73"><expr pos:start="99:54" pos:end="99:73"><operator pos:start="99:54" pos:end="99:54">&amp;</operator><name pos:start="99:55" pos:end="99:73">savevm_vmxnet3_msix</name></expr></argument>, <argument pos:start="99:76" pos:end="99:76"><expr pos:start="99:76" pos:end="99:76"><name pos:start="99:76" pos:end="99:76">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
