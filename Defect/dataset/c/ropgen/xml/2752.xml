<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2752.c" pos:tabs="8"><function pos:start="1:1" pos:end="171:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:23">pcistb_service_call</name><parameter_list pos:start="1:24" pos:end="3:49">(<parameter pos:start="1:25" pos:end="1:36"><decl pos:start="1:25" pos:end="1:36"><type pos:start="1:25" pos:end="1:36"><name pos:start="1:25" pos:end="1:31">S390CPU</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:36">cpu</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:48"><decl pos:start="1:39" pos:end="1:48"><type pos:start="1:39" pos:end="1:48"><name pos:start="1:39" pos:end="1:45">uint8_t</name></type> <name pos:start="1:47" pos:end="1:48">r1</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:60"><decl pos:start="1:51" pos:end="1:60"><type pos:start="1:51" pos:end="1:60"><name pos:start="1:51" pos:end="1:57">uint8_t</name></type> <name pos:start="1:59" pos:end="1:60">r3</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:76"><decl pos:start="1:63" pos:end="1:76"><type pos:start="1:63" pos:end="1:76"><name pos:start="1:63" pos:end="1:70">uint64_t</name></type> <name pos:start="1:72" pos:end="1:76">gaddr</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:34"><decl pos:start="3:25" pos:end="3:34"><type pos:start="3:25" pos:end="3:34"><name pos:start="3:25" pos:end="3:31">uint8_t</name></type> <name pos:start="3:33" pos:end="3:34">ar</name></decl></parameter>, <parameter pos:start="3:37" pos:end="3:48"><decl pos:start="3:37" pos:end="3:48"><type pos:start="3:37" pos:end="3:48"><name pos:start="3:37" pos:end="3:45">uintptr_t</name></type> <name pos:start="3:47" pos:end="3:48">ra</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="171:1">{<block_content pos:start="7:5" pos:end="169:13">

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">CPUS390XState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">env</name> <init pos:start="7:24" pos:end="7:34">= <expr pos:start="7:26" pos:end="7:34"><operator pos:start="7:26" pos:end="7:26">&amp;</operator><name pos:start="7:27" pos:end="7:34"><name pos:start="7:27" pos:end="7:29">cpu</name><operator pos:start="7:30" pos:end="7:31">-&gt;</operator><name pos:start="7:32" pos:end="7:34">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">S390PCIBusDevice</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:27">pbdev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">MemoryRegion</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:20">mr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:15">MemTxResult</name></type> <name pos:start="13:17" pos:end="13:22">result</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:10"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:16"><decl pos:start="17:5" pos:end="17:15"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:15">fh</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:18"><decl pos:start="19:5" pos:end="19:17"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">uint8_t</name></type> <name pos:start="19:13" pos:end="19:17">pcias</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:16"><decl pos:start="21:5" pos:end="21:15"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">uint8_t</name></type> <name pos:start="21:13" pos:end="21:15">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:24"><decl pos:start="23:5" pos:end="23:23"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:11">uint8_t</name></type> <name pos:start="23:13" pos:end="23:23"><name pos:start="23:13" pos:end="23:18">buffer</name><index pos:start="23:19" pos:end="23:23">[<expr pos:start="23:20" pos:end="23:22"><literal type="number" pos:start="23:20" pos:end="23:22">128</literal></expr>]</index></name></decl>;</decl_stmt>



    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:40">(<expr pos:start="27:9" pos:end="27:39"><name pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:11">env</name><operator pos:start="27:12" pos:end="27:13">-&gt;</operator><name pos:start="27:14" pos:end="27:16">psw</name><operator pos:start="27:17" pos:end="27:17">.</operator><name pos:start="27:18" pos:end="27:21">mask</name></name> <operator pos:start="27:23" pos:end="27:23">&amp;</operator> <name pos:start="27:25" pos:end="27:39">PSW_MASK_PSTATE</name></expr>)</condition> <block pos:start="27:42" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:17">

        <expr_stmt pos:start="29:9" pos:end="29:59"><expr pos:start="29:9" pos:end="29:58"><call pos:start="29:9" pos:end="29:58"><name pos:start="29:9" pos:end="29:30">s390_program_interrupt</name><argument_list pos:start="29:31" pos:end="29:58">(<argument pos:start="29:32" pos:end="29:34"><expr pos:start="29:32" pos:end="29:34"><name pos:start="29:32" pos:end="29:34">env</name></expr></argument>, <argument pos:start="29:37" pos:end="29:50"><expr pos:start="29:37" pos:end="29:50"><name pos:start="29:37" pos:end="29:50">PGM_PRIVILEGED</name></expr></argument>, <argument pos:start="29:53" pos:end="29:53"><expr pos:start="29:53" pos:end="29:53"><literal type="number" pos:start="29:53" pos:end="29:53">6</literal></expr></argument>, <argument pos:start="29:56" pos:end="29:57"><expr pos:start="29:56" pos:end="29:57"><name pos:start="29:56" pos:end="29:57">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:17">return <expr pos:start="31:16" pos:end="31:16"><literal type="number" pos:start="31:16" pos:end="31:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:29"><expr pos:start="37:5" pos:end="37:28"><name pos:start="37:5" pos:end="37:6">fh</name> <operator pos:start="37:8" pos:end="37:8">=</operator> <name pos:start="37:10" pos:end="37:22"><name pos:start="37:10" pos:end="37:12">env</name><operator pos:start="37:13" pos:end="37:14">-&gt;</operator><name pos:start="37:15" pos:end="37:18">regs</name><index pos:start="37:19" pos:end="37:22">[<expr pos:start="37:20" pos:end="37:21"><name pos:start="37:20" pos:end="37:21">r1</name></expr>]</index></name> <operator pos:start="37:24" pos:end="37:25">&gt;&gt;</operator> <literal type="number" pos:start="37:27" pos:end="37:28">32</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:40"><expr pos:start="39:5" pos:end="39:39"><name pos:start="39:5" pos:end="39:9">pcias</name> <operator pos:start="39:11" pos:end="39:11">=</operator> <operator pos:start="39:13" pos:end="39:13">(</operator><name pos:start="39:14" pos:end="39:26"><name pos:start="39:14" pos:end="39:16">env</name><operator pos:start="39:17" pos:end="39:18">-&gt;</operator><name pos:start="39:19" pos:end="39:22">regs</name><index pos:start="39:23" pos:end="39:26">[<expr pos:start="39:24" pos:end="39:25"><name pos:start="39:24" pos:end="39:25">r1</name></expr>]</index></name> <operator pos:start="39:28" pos:end="39:29">&gt;&gt;</operator> <literal type="number" pos:start="39:31" pos:end="39:32">16</literal><operator pos:start="39:33" pos:end="39:33">)</operator> <operator pos:start="39:35" pos:end="39:35">&amp;</operator> <literal type="number" pos:start="39:37" pos:end="39:39">0xf</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:31"><expr pos:start="41:5" pos:end="41:30"><name pos:start="41:5" pos:end="41:7">len</name> <operator pos:start="41:9" pos:end="41:9">=</operator> <name pos:start="41:11" pos:end="41:23"><name pos:start="41:11" pos:end="41:13">env</name><operator pos:start="41:14" pos:end="41:15">-&gt;</operator><name pos:start="41:16" pos:end="41:19">regs</name><index pos:start="41:20" pos:end="41:23">[<expr pos:start="41:21" pos:end="41:22"><name pos:start="41:21" pos:end="41:22">r1</name></expr>]</index></name> <operator pos:start="41:25" pos:end="41:25">&amp;</operator> <literal type="number" pos:start="41:27" pos:end="41:30">0xff</literal></expr>;</expr_stmt>



    <if_stmt pos:start="45:5" pos:end="55:5"><if pos:start="45:5" pos:end="55:5">if <condition pos:start="45:8" pos:end="45:18">(<expr pos:start="45:9" pos:end="45:17"><name pos:start="45:9" pos:end="45:13">pcias</name> <operator pos:start="45:15" pos:end="45:15">&gt;</operator> <literal type="number" pos:start="45:17" pos:end="45:17">5</literal></expr>)</condition> <block pos:start="45:20" pos:end="55:5">{<block_content pos:start="47:9" pos:end="53:17">

        <expr_stmt pos:start="47:9" pos:end="47:42"><expr pos:start="47:9" pos:end="47:41"><call pos:start="47:9" pos:end="47:41"><name pos:start="47:9" pos:end="47:15">DPRINTF</name><argument_list pos:start="47:16" pos:end="47:41">(<argument pos:start="47:17" pos:end="47:40"><expr pos:start="47:17" pos:end="47:40"><literal type="string" pos:start="47:17" pos:end="47:40">"pcistb invalid space\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:36"><expr pos:start="49:9" pos:end="49:35"><call pos:start="49:9" pos:end="49:35"><name pos:start="49:9" pos:end="49:13">setcc</name><argument_list pos:start="49:14" pos:end="49:35">(<argument pos:start="49:15" pos:end="49:17"><expr pos:start="49:15" pos:end="49:17"><name pos:start="49:15" pos:end="49:17">cpu</name></expr></argument>, <argument pos:start="49:20" pos:end="49:34"><expr pos:start="49:20" pos:end="49:34"><name pos:start="49:20" pos:end="49:34">ZPCI_PCI_LS_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:60"><expr pos:start="51:9" pos:end="51:59"><call pos:start="51:9" pos:end="51:59"><name pos:start="51:9" pos:end="51:28">s390_set_status_code</name><argument_list pos:start="51:29" pos:end="51:59">(<argument pos:start="51:30" pos:end="51:32"><expr pos:start="51:30" pos:end="51:32"><name pos:start="51:30" pos:end="51:32">env</name></expr></argument>, <argument pos:start="51:35" pos:end="51:36"><expr pos:start="51:35" pos:end="51:36"><name pos:start="51:35" pos:end="51:36">r1</name></expr></argument>, <argument pos:start="51:39" pos:end="51:58"><expr pos:start="51:39" pos:end="51:58"><name pos:start="51:39" pos:end="51:58">ZPCI_PCI_ST_INVAL_AS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:17">return <expr pos:start="53:16" pos:end="53:16"><literal type="number" pos:start="53:16" pos:end="53:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="59:5" pos:end="77:5">switch <condition pos:start="59:12" pos:end="59:16">(<expr pos:start="59:13" pos:end="59:15"><name pos:start="59:13" pos:end="59:15">len</name></expr>)</condition> <block pos:start="59:18" pos:end="77:5">{<block_content pos:start="61:5" pos:end="75:17">

    <case pos:start="61:5" pos:end="61:12">case <expr pos:start="61:10" pos:end="61:11"><literal type="number" pos:start="61:10" pos:end="61:11">16</literal></expr>:</case>

    <case pos:start="63:5" pos:end="63:12">case <expr pos:start="63:10" pos:end="63:11"><literal type="number" pos:start="63:10" pos:end="63:11">32</literal></expr>:</case>

    <case pos:start="65:5" pos:end="65:12">case <expr pos:start="65:10" pos:end="65:11"><literal type="number" pos:start="65:10" pos:end="65:11">64</literal></expr>:</case>

    <case pos:start="67:5" pos:end="67:13">case <expr pos:start="67:10" pos:end="67:12"><literal type="number" pos:start="67:10" pos:end="67:12">128</literal></expr>:</case>

        <break pos:start="69:9" pos:end="69:14">break;</break>

    <default pos:start="71:5" pos:end="71:12">default:</default>

        <expr_stmt pos:start="73:9" pos:end="73:62"><expr pos:start="73:9" pos:end="73:61"><call pos:start="73:9" pos:end="73:61"><name pos:start="73:9" pos:end="73:30">s390_program_interrupt</name><argument_list pos:start="73:31" pos:end="73:61">(<argument pos:start="73:32" pos:end="73:34"><expr pos:start="73:32" pos:end="73:34"><name pos:start="73:32" pos:end="73:34">env</name></expr></argument>, <argument pos:start="73:37" pos:end="73:53"><expr pos:start="73:37" pos:end="73:53"><name pos:start="73:37" pos:end="73:53">PGM_SPECIFICATION</name></expr></argument>, <argument pos:start="73:56" pos:end="73:56"><expr pos:start="73:56" pos:end="73:56"><literal type="number" pos:start="73:56" pos:end="73:56">6</literal></expr></argument>, <argument pos:start="73:59" pos:end="73:60"><expr pos:start="73:59" pos:end="73:60"><name pos:start="73:59" pos:end="73:60">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="75:9" pos:end="75:17">return <expr pos:start="75:16" pos:end="75:16"><literal type="number" pos:start="75:16" pos:end="75:16">0</literal></expr>;</return>

    </block_content>}</block></switch>



    <expr_stmt pos:start="81:5" pos:end="81:56"><expr pos:start="81:5" pos:end="81:55"><name pos:start="81:5" pos:end="81:9">pbdev</name> <operator pos:start="81:11" pos:end="81:11">=</operator> <call pos:start="81:13" pos:end="81:55"><name pos:start="81:13" pos:end="81:35">s390_pci_find_dev_by_fh</name><argument_list pos:start="81:36" pos:end="81:55">(<argument pos:start="81:37" pos:end="81:50"><expr pos:start="81:37" pos:end="81:50"><call pos:start="81:37" pos:end="81:50"><name pos:start="81:37" pos:end="81:48">s390_get_phb</name><argument_list pos:start="81:49" pos:end="81:50">()</argument_list></call></expr></argument>, <argument pos:start="81:53" pos:end="81:54"><expr pos:start="81:53" pos:end="81:54"><name pos:start="81:53" pos:end="81:54">fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="83:5" pos:end="91:5"><if pos:start="83:5" pos:end="91:5">if <condition pos:start="83:8" pos:end="83:15">(<expr pos:start="83:9" pos:end="83:14"><operator pos:start="83:9" pos:end="83:9">!</operator><name pos:start="83:10" pos:end="83:14">pbdev</name></expr>)</condition> <block pos:start="83:17" pos:end="91:5">{<block_content pos:start="85:9" pos:end="89:17">

        <expr_stmt pos:start="85:9" pos:end="85:51"><expr pos:start="85:9" pos:end="85:50"><call pos:start="85:9" pos:end="85:50"><name pos:start="85:9" pos:end="85:15">DPRINTF</name><argument_list pos:start="85:16" pos:end="85:50">(<argument pos:start="85:17" pos:end="85:45"><expr pos:start="85:17" pos:end="85:45"><literal type="string" pos:start="85:17" pos:end="85:45">"pcistb no pci dev fh 0x%x\n"</literal></expr></argument>, <argument pos:start="85:48" pos:end="85:49"><expr pos:start="85:48" pos:end="85:49"><name pos:start="85:48" pos:end="85:49">fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:45"><expr pos:start="87:9" pos:end="87:44"><call pos:start="87:9" pos:end="87:44"><name pos:start="87:9" pos:end="87:13">setcc</name><argument_list pos:start="87:14" pos:end="87:44">(<argument pos:start="87:15" pos:end="87:17"><expr pos:start="87:15" pos:end="87:17"><name pos:start="87:15" pos:end="87:17">cpu</name></expr></argument>, <argument pos:start="87:20" pos:end="87:43"><expr pos:start="87:20" pos:end="87:43"><name pos:start="87:20" pos:end="87:43">ZPCI_PCI_LS_INVAL_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="89:9" pos:end="89:17">return <expr pos:start="89:16" pos:end="89:16"><literal type="number" pos:start="89:16" pos:end="89:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="95:5" pos:end="121:5">switch <condition pos:start="95:12" pos:end="95:25">(<expr pos:start="95:13" pos:end="95:24"><name pos:start="95:13" pos:end="95:24"><name pos:start="95:13" pos:end="95:17">pbdev</name><operator pos:start="95:18" pos:end="95:19">-&gt;</operator><name pos:start="95:20" pos:end="95:24">state</name></name></expr>)</condition> <block pos:start="95:27" pos:end="121:5">{<block_content pos:start="97:5" pos:end="119:14">

    <case pos:start="97:5" pos:end="97:26">case <expr pos:start="97:10" pos:end="97:25"><name pos:start="97:10" pos:end="97:25">ZPCI_FS_RESERVED</name></expr>:</case>

    <case pos:start="99:5" pos:end="99:25">case <expr pos:start="99:10" pos:end="99:24"><name pos:start="99:10" pos:end="99:24">ZPCI_FS_STANDBY</name></expr>:</case>

    <case pos:start="101:5" pos:end="101:26">case <expr pos:start="101:10" pos:end="101:25"><name pos:start="101:10" pos:end="101:25">ZPCI_FS_DISABLED</name></expr>:</case>

    <case pos:start="103:5" pos:end="103:33">case <expr pos:start="103:10" pos:end="103:32"><name pos:start="103:10" pos:end="103:32">ZPCI_FS_PERMANENT_ERROR</name></expr>:</case>

        <expr_stmt pos:start="105:9" pos:end="105:45"><expr pos:start="105:9" pos:end="105:44"><call pos:start="105:9" pos:end="105:44"><name pos:start="105:9" pos:end="105:13">setcc</name><argument_list pos:start="105:14" pos:end="105:44">(<argument pos:start="105:15" pos:end="105:17"><expr pos:start="105:15" pos:end="105:17"><name pos:start="105:15" pos:end="105:17">cpu</name></expr></argument>, <argument pos:start="105:20" pos:end="105:43"><expr pos:start="105:20" pos:end="105:43"><name pos:start="105:20" pos:end="105:43">ZPCI_PCI_LS_INVAL_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="107:9" pos:end="107:17">return <expr pos:start="107:16" pos:end="107:16"><literal type="number" pos:start="107:16" pos:end="107:16">0</literal></expr>;</return>

    <case pos:start="109:5" pos:end="109:23">case <expr pos:start="109:10" pos:end="109:22"><name pos:start="109:10" pos:end="109:22">ZPCI_FS_ERROR</name></expr>:</case>

        <expr_stmt pos:start="111:9" pos:end="111:36"><expr pos:start="111:9" pos:end="111:35"><call pos:start="111:9" pos:end="111:35"><name pos:start="111:9" pos:end="111:13">setcc</name><argument_list pos:start="111:14" pos:end="111:35">(<argument pos:start="111:15" pos:end="111:17"><expr pos:start="111:15" pos:end="111:17"><name pos:start="111:15" pos:end="111:17">cpu</name></expr></argument>, <argument pos:start="111:20" pos:end="111:34"><expr pos:start="111:20" pos:end="111:34"><name pos:start="111:20" pos:end="111:34">ZPCI_PCI_LS_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:59"><expr pos:start="113:9" pos:end="113:58"><call pos:start="113:9" pos:end="113:58"><name pos:start="113:9" pos:end="113:28">s390_set_status_code</name><argument_list pos:start="113:29" pos:end="113:58">(<argument pos:start="113:30" pos:end="113:32"><expr pos:start="113:30" pos:end="113:32"><name pos:start="113:30" pos:end="113:32">env</name></expr></argument>, <argument pos:start="113:35" pos:end="113:36"><expr pos:start="113:35" pos:end="113:36"><name pos:start="113:35" pos:end="113:36">r1</name></expr></argument>, <argument pos:start="113:39" pos:end="113:57"><expr pos:start="113:39" pos:end="113:57"><name pos:start="113:39" pos:end="113:57">ZPCI_PCI_ST_BLOCKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="115:9" pos:end="115:17">return <expr pos:start="115:16" pos:end="115:16"><literal type="number" pos:start="115:16" pos:end="115:16">0</literal></expr>;</return>

    <default pos:start="117:5" pos:end="117:12">default:</default>

        <break pos:start="119:9" pos:end="119:14">break;</break>

    </block_content>}</block></switch>



    <expr_stmt pos:start="125:5" pos:end="125:47"><expr pos:start="125:5" pos:end="125:46"><name pos:start="125:5" pos:end="125:6">mr</name> <operator pos:start="125:8" pos:end="125:8">=</operator> <name pos:start="125:10" pos:end="125:39"><name pos:start="125:10" pos:end="125:14">pbdev</name><operator pos:start="125:15" pos:end="125:16">-&gt;</operator><name pos:start="125:17" pos:end="125:20">pdev</name><operator pos:start="125:21" pos:end="125:22">-&gt;</operator><name pos:start="125:23" pos:end="125:32">io_regions</name><index pos:start="125:33" pos:end="125:39">[<expr pos:start="125:34" pos:end="125:38"><name pos:start="125:34" pos:end="125:38">pcias</name></expr>]</index></name><operator pos:start="125:40" pos:end="125:40">.</operator><name pos:start="125:41" pos:end="125:46">memory</name></expr>;</expr_stmt>

    <if_stmt pos:start="127:5" pos:end="133:5"><if pos:start="127:5" pos:end="133:5">if <condition pos:start="127:8" pos:end="127:66">(<expr pos:start="127:9" pos:end="127:65"><operator pos:start="127:9" pos:end="127:9">!</operator><call pos:start="127:10" pos:end="127:65"><name pos:start="127:10" pos:end="127:35">memory_region_access_valid</name><argument_list pos:start="127:36" pos:end="127:65">(<argument pos:start="127:37" pos:end="127:38"><expr pos:start="127:37" pos:end="127:38"><name pos:start="127:37" pos:end="127:38">mr</name></expr></argument>, <argument pos:start="127:41" pos:end="127:53"><expr pos:start="127:41" pos:end="127:53"><name pos:start="127:41" pos:end="127:53"><name pos:start="127:41" pos:end="127:43">env</name><operator pos:start="127:44" pos:end="127:45">-&gt;</operator><name pos:start="127:46" pos:end="127:49">regs</name><index pos:start="127:50" pos:end="127:53">[<expr pos:start="127:51" pos:end="127:52"><name pos:start="127:51" pos:end="127:52">r3</name></expr>]</index></name></expr></argument>, <argument pos:start="127:56" pos:end="127:58"><expr pos:start="127:56" pos:end="127:58"><name pos:start="127:56" pos:end="127:58">len</name></expr></argument>, <argument pos:start="127:61" pos:end="127:64"><expr pos:start="127:61" pos:end="127:64"><name pos:start="127:61" pos:end="127:64">true</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="127:68" pos:end="133:5">{<block_content pos:start="129:9" pos:end="131:17">

        <expr_stmt pos:start="129:9" pos:end="129:56"><expr pos:start="129:9" pos:end="129:55"><call pos:start="129:9" pos:end="129:55"><name pos:start="129:9" pos:end="129:30">s390_program_interrupt</name><argument_list pos:start="129:31" pos:end="129:55">(<argument pos:start="129:32" pos:end="129:34"><expr pos:start="129:32" pos:end="129:34"><name pos:start="129:32" pos:end="129:34">env</name></expr></argument>, <argument pos:start="129:37" pos:end="129:47"><expr pos:start="129:37" pos:end="129:47"><name pos:start="129:37" pos:end="129:47">PGM_OPERAND</name></expr></argument>, <argument pos:start="129:50" pos:end="129:50"><expr pos:start="129:50" pos:end="129:50"><literal type="number" pos:start="129:50" pos:end="129:50">6</literal></expr></argument>, <argument pos:start="129:53" pos:end="129:54"><expr pos:start="129:53" pos:end="129:54"><name pos:start="129:53" pos:end="129:54">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="131:9" pos:end="131:17">return <expr pos:start="131:16" pos:end="131:16"><literal type="number" pos:start="131:16" pos:end="131:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="137:5" pos:end="143:5"><if pos:start="137:5" pos:end="143:5">if <condition pos:start="137:8" pos:end="137:60">(<expr pos:start="137:9" pos:end="137:59"><call pos:start="137:9" pos:end="137:59"><name pos:start="137:9" pos:end="137:30">s390_cpu_virt_mem_read</name><argument_list pos:start="137:31" pos:end="137:59">(<argument pos:start="137:32" pos:end="137:34"><expr pos:start="137:32" pos:end="137:34"><name pos:start="137:32" pos:end="137:34">cpu</name></expr></argument>, <argument pos:start="137:37" pos:end="137:41"><expr pos:start="137:37" pos:end="137:41"><name pos:start="137:37" pos:end="137:41">gaddr</name></expr></argument>, <argument pos:start="137:44" pos:end="137:45"><expr pos:start="137:44" pos:end="137:45"><name pos:start="137:44" pos:end="137:45">ar</name></expr></argument>, <argument pos:start="137:48" pos:end="137:53"><expr pos:start="137:48" pos:end="137:53"><name pos:start="137:48" pos:end="137:53">buffer</name></expr></argument>, <argument pos:start="137:56" pos:end="137:58"><expr pos:start="137:56" pos:end="137:58"><name pos:start="137:56" pos:end="137:58">len</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="137:62" pos:end="143:5">{<block_content pos:start="139:9" pos:end="141:17">

        <expr_stmt pos:start="139:9" pos:end="139:46"><expr pos:start="139:9" pos:end="139:45"><call pos:start="139:9" pos:end="139:45"><name pos:start="139:9" pos:end="139:36">s390_cpu_virt_mem_handle_exc</name><argument_list pos:start="139:37" pos:end="139:45">(<argument pos:start="139:38" pos:end="139:40"><expr pos:start="139:38" pos:end="139:40"><name pos:start="139:38" pos:end="139:40">cpu</name></expr></argument>, <argument pos:start="139:43" pos:end="139:44"><expr pos:start="139:43" pos:end="139:44"><name pos:start="139:43" pos:end="139:44">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="141:9" pos:end="141:17">return <expr pos:start="141:16" pos:end="141:16"><literal type="number" pos:start="141:16" pos:end="141:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="147:5" pos:end="163:5">for <control pos:start="147:9" pos:end="147:33">(<init pos:start="147:10" pos:end="147:15"><expr pos:start="147:10" pos:end="147:14"><name pos:start="147:10" pos:end="147:10">i</name> <operator pos:start="147:12" pos:end="147:12">=</operator> <literal type="number" pos:start="147:14" pos:end="147:14">0</literal></expr>;</init> <condition pos:start="147:17" pos:end="147:28"><expr pos:start="147:17" pos:end="147:27"><name pos:start="147:17" pos:end="147:17">i</name> <operator pos:start="147:19" pos:end="147:19">&lt;</operator> <name pos:start="147:21" pos:end="147:23">len</name> <operator pos:start="147:25" pos:end="147:25">/</operator> <literal type="number" pos:start="147:27" pos:end="147:27">8</literal></expr>;</condition> <incr pos:start="147:30" pos:end="147:32"><expr pos:start="147:30" pos:end="147:32"><name pos:start="147:30" pos:end="147:30">i</name><operator pos:start="147:31" pos:end="147:32">++</operator></expr></incr>)</control> <block pos:start="147:35" pos:end="163:5">{<block_content pos:start="149:9" pos:end="161:9">

        <expr_stmt pos:start="149:9" pos:end="153:61"><expr pos:start="149:9" pos:end="153:60"><name pos:start="149:9" pos:end="149:14">result</name> <operator pos:start="149:16" pos:end="149:16">=</operator> <call pos:start="149:18" pos:end="153:60"><name pos:start="149:18" pos:end="149:45">memory_region_dispatch_write</name><argument_list pos:start="149:46" pos:end="153:60">(<argument pos:start="149:47" pos:end="149:48"><expr pos:start="149:47" pos:end="149:48"><name pos:start="149:47" pos:end="149:48">mr</name></expr></argument>, <argument pos:start="149:51" pos:end="149:71"><expr pos:start="149:51" pos:end="149:71"><name pos:start="149:51" pos:end="149:63"><name pos:start="149:51" pos:end="149:53">env</name><operator pos:start="149:54" pos:end="149:55">-&gt;</operator><name pos:start="149:56" pos:end="149:59">regs</name><index pos:start="149:60" pos:end="149:63">[<expr pos:start="149:61" pos:end="149:62"><name pos:start="149:61" pos:end="149:62">r3</name></expr>]</index></name> <operator pos:start="149:65" pos:end="149:65">+</operator> <name pos:start="149:67" pos:end="149:67">i</name> <operator pos:start="149:69" pos:end="149:69">*</operator> <literal type="number" pos:start="149:71" pos:end="149:71">8</literal></expr></argument>,

                                     <argument pos:start="151:38" pos:end="151:58"><expr pos:start="151:38" pos:end="151:58"><call pos:start="151:38" pos:end="151:58"><name pos:start="151:38" pos:end="151:42">ldq_p</name><argument_list pos:start="151:43" pos:end="151:58">(<argument pos:start="151:44" pos:end="151:57"><expr pos:start="151:44" pos:end="151:57"><name pos:start="151:44" pos:end="151:49">buffer</name> <operator pos:start="151:51" pos:end="151:51">+</operator> <name pos:start="151:53" pos:end="151:53">i</name> <operator pos:start="151:55" pos:end="151:55">*</operator> <literal type="number" pos:start="151:57" pos:end="151:57">8</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="151:61" pos:end="151:61"><expr pos:start="151:61" pos:end="151:61"><literal type="number" pos:start="151:61" pos:end="151:61">8</literal></expr></argument>,

                                     <argument pos:start="153:38" pos:end="153:59"><expr pos:start="153:38" pos:end="153:59"><name pos:start="153:38" pos:end="153:59">MEMTXATTRS_UNSPECIFIED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="155:9" pos:end="161:9"><if pos:start="155:9" pos:end="161:9">if <condition pos:start="155:12" pos:end="155:31">(<expr pos:start="155:13" pos:end="155:30"><name pos:start="155:13" pos:end="155:18">result</name> <operator pos:start="155:20" pos:end="155:21">!=</operator> <name pos:start="155:23" pos:end="155:30">MEMTX_OK</name></expr>)</condition> <block pos:start="155:33" pos:end="161:9">{<block_content pos:start="157:13" pos:end="159:21">

            <expr_stmt pos:start="157:13" pos:end="157:60"><expr pos:start="157:13" pos:end="157:59"><call pos:start="157:13" pos:end="157:59"><name pos:start="157:13" pos:end="157:34">s390_program_interrupt</name><argument_list pos:start="157:35" pos:end="157:59">(<argument pos:start="157:36" pos:end="157:38"><expr pos:start="157:36" pos:end="157:38"><name pos:start="157:36" pos:end="157:38">env</name></expr></argument>, <argument pos:start="157:41" pos:end="157:51"><expr pos:start="157:41" pos:end="157:51"><name pos:start="157:41" pos:end="157:51">PGM_OPERAND</name></expr></argument>, <argument pos:start="157:54" pos:end="157:54"><expr pos:start="157:54" pos:end="157:54"><literal type="number" pos:start="157:54" pos:end="157:54">6</literal></expr></argument>, <argument pos:start="157:57" pos:end="157:58"><expr pos:start="157:57" pos:end="157:58"><name pos:start="157:57" pos:end="157:58">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="159:13" pos:end="159:21">return <expr pos:start="159:20" pos:end="159:20"><literal type="number" pos:start="159:20" pos:end="159:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="167:5" pos:end="167:31"><expr pos:start="167:5" pos:end="167:30"><call pos:start="167:5" pos:end="167:30"><name pos:start="167:5" pos:end="167:9">setcc</name><argument_list pos:start="167:10" pos:end="167:30">(<argument pos:start="167:11" pos:end="167:13"><expr pos:start="167:11" pos:end="167:13"><name pos:start="167:11" pos:end="167:13">cpu</name></expr></argument>, <argument pos:start="167:16" pos:end="167:29"><expr pos:start="167:16" pos:end="167:29"><name pos:start="167:16" pos:end="167:29">ZPCI_PCI_LS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="169:5" pos:end="169:13">return <expr pos:start="169:12" pos:end="169:12"><literal type="number" pos:start="169:12" pos:end="169:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
