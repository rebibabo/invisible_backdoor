<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16366.c" pos:tabs="8"><function pos:start="1:1" pos:end="281:1"><type pos:start="1:1" pos:end="1:12"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:12">float</name></type> <name pos:start="1:14" pos:end="1:42">quantize_and_encode_band_cost</name><parameter_list pos:start="1:43" pos:end="9:42">(<parameter pos:start="1:44" pos:end="1:66"><decl pos:start="1:44" pos:end="1:66"><type pos:start="1:44" pos:end="1:66"><name pos:start="1:44" pos:end="1:63"><name pos:start="1:44" pos:end="1:49">struct</name> <name pos:start="1:51" pos:end="1:63">AACEncContext</name></name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:66">s</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:49"><decl pos:start="3:33" pos:end="3:49"><type pos:start="3:33" pos:end="3:49"><name pos:start="3:33" pos:end="3:45">PutBitContext</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:49">pb</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:66"><decl pos:start="3:52" pos:end="3:66"><type pos:start="3:52" pos:end="3:66"><specifier pos:start="3:52" pos:end="3:56">const</specifier> <name pos:start="3:58" pos:end="3:62">float</name> <modifier pos:start="3:64" pos:end="3:64">*</modifier></type><name pos:start="3:65" pos:end="3:66">in</name></decl></parameter>,

                                <parameter pos:start="5:33" pos:end="5:51"><decl pos:start="5:33" pos:end="5:51"><type pos:start="5:33" pos:end="5:51"><specifier pos:start="5:33" pos:end="5:37">const</specifier> <name pos:start="5:39" pos:end="5:43">float</name> <modifier pos:start="5:45" pos:end="5:45">*</modifier></type><name pos:start="5:46" pos:end="5:51">scaled</name></decl></parameter>, <parameter pos:start="5:54" pos:end="5:61"><decl pos:start="5:54" pos:end="5:61"><type pos:start="5:54" pos:end="5:61"><name pos:start="5:54" pos:end="5:56">int</name></type> <name pos:start="5:58" pos:end="5:61">size</name></decl></parameter>, <parameter pos:start="5:64" pos:end="5:76"><decl pos:start="5:64" pos:end="5:76"><type pos:start="5:64" pos:end="5:76"><name pos:start="5:64" pos:end="5:66">int</name></type> <name pos:start="5:68" pos:end="5:76">scale_idx</name></decl></parameter>,

                                <parameter pos:start="7:33" pos:end="7:38"><decl pos:start="7:33" pos:end="7:38"><type pos:start="7:33" pos:end="7:38"><name pos:start="7:33" pos:end="7:35">int</name></type> <name pos:start="7:37" pos:end="7:38">cb</name></decl></parameter>, <parameter pos:start="7:41" pos:end="7:58"><decl pos:start="7:41" pos:end="7:58"><type pos:start="7:41" pos:end="7:58"><specifier pos:start="7:41" pos:end="7:45">const</specifier> <name pos:start="7:47" pos:end="7:51">float</name></type> <name pos:start="7:53" pos:end="7:58">lambda</name></decl></parameter>, <parameter pos:start="7:61" pos:end="7:77"><decl pos:start="7:61" pos:end="7:77"><type pos:start="7:61" pos:end="7:77"><specifier pos:start="7:61" pos:end="7:65">const</specifier> <name pos:start="7:67" pos:end="7:71">float</name></type> <name pos:start="7:73" pos:end="7:77">uplim</name></decl></parameter>,

                                <parameter pos:start="9:33" pos:end="9:41"><decl pos:start="9:33" pos:end="9:41"><type pos:start="9:33" pos:end="9:41"><name pos:start="9:33" pos:end="9:35">int</name> <modifier pos:start="9:37" pos:end="9:37">*</modifier></type><name pos:start="9:38" pos:end="9:41">bits</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="281:1">{<block_content pos:start="13:5" pos:end="281:1">

    <decl_stmt pos:start="13:5" pos:end="13:88"><decl pos:start="13:5" pos:end="13:87"><type pos:start="13:5" pos:end="13:15"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:15">float</name></type> <name pos:start="13:17" pos:end="13:18">IQ</name> <init pos:start="13:20" pos:end="13:87">= <expr pos:start="13:22" pos:end="13:87"><name pos:start="13:22" pos:end="13:87"><name pos:start="13:22" pos:end="13:38">ff_aac_pow2sf_tab</name><index pos:start="13:39" pos:end="13:87">[<expr pos:start="13:40" pos:end="13:86"><literal type="number" pos:start="13:40" pos:end="13:44">200</literal> <operator pos:start="13:44" pos:end="13:44">+</operator> <name pos:start="13:46" pos:end="13:54">scale_idx</name> <operator pos:start="13:56" pos:end="13:56">-</operator> <name pos:start="13:58" pos:end="13:70">SCALE_ONE_POS</name> <operator pos:start="13:72" pos:end="13:72">+</operator> <name pos:start="13:74" pos:end="13:86">SCALE_DIV_512</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:88"><decl pos:start="15:5" pos:end="15:87"><type pos:start="15:5" pos:end="15:15"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:15">float</name></type>  <name pos:start="15:18" pos:end="15:18">Q</name> <init pos:start="15:20" pos:end="15:87">= <expr pos:start="15:22" pos:end="15:87"><name pos:start="15:22" pos:end="15:87"><name pos:start="15:22" pos:end="15:38">ff_aac_pow2sf_tab</name><index pos:start="15:39" pos:end="15:87">[<expr pos:start="15:40" pos:end="15:86"><literal type="number" pos:start="15:40" pos:end="15:44">200</literal> <operator pos:start="15:44" pos:end="15:44">-</operator> <name pos:start="15:46" pos:end="15:54">scale_idx</name> <operator pos:start="15:56" pos:end="15:56">+</operator> <name pos:start="15:58" pos:end="15:70">SCALE_ONE_POS</name> <operator pos:start="15:72" pos:end="15:72">-</operator> <name pos:start="15:74" pos:end="15:86">SCALE_DIV_512</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:46"><decl pos:start="17:5" pos:end="17:45"><type pos:start="17:5" pos:end="17:15"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:15">float</name></type> <name pos:start="17:17" pos:end="17:30">CLIPPED_ESCAPE</name> <init pos:start="17:32" pos:end="17:45">= <expr pos:start="17:34" pos:end="17:45"><literal type="number" pos:start="17:34" pos:end="17:42">165140.0f</literal><operator pos:start="17:43" pos:end="17:43">*</operator><name pos:start="17:44" pos:end="17:45">IQ</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:16"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">i</name></decl>, <decl pos:start="19:12" pos:end="19:12"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:12" pos:end="19:12">j</name></decl>, <decl pos:start="19:15" pos:end="19:15"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:15" pos:end="19:15">k</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:19"><decl pos:start="21:5" pos:end="21:18"><type pos:start="21:5" pos:end="21:9"><name pos:start="21:5" pos:end="21:9">float</name></type> <name pos:start="21:11" pos:end="21:14">cost</name> <init pos:start="21:16" pos:end="21:18">= <expr pos:start="21:18" pos:end="21:18"><literal type="number" pos:start="21:18" pos:end="21:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:47"><decl pos:start="23:5" pos:end="23:46"><type pos:start="23:5" pos:end="23:13"><specifier pos:start="23:5" pos:end="23:9">const</specifier> <name pos:start="23:11" pos:end="23:13">int</name></type> <name pos:start="23:15" pos:end="23:17">dim</name> <init pos:start="23:19" pos:end="23:46">= <expr pos:start="23:21" pos:end="23:46"><ternary pos:start="23:21" pos:end="23:46"><condition pos:start="23:21" pos:end="23:40"><expr pos:start="23:21" pos:end="23:38"><name pos:start="23:21" pos:end="23:22">cb</name> <operator pos:start="23:24" pos:end="23:24">&lt;</operator> <name pos:start="23:26" pos:end="23:38">FIRST_PAIR_BT</name></expr> ?</condition><then pos:start="23:42" pos:end="23:42"> <expr pos:start="23:42" pos:end="23:42"><literal type="number" pos:start="23:42" pos:end="23:42">4</literal></expr> </then><else pos:start="23:44" pos:end="23:46">: <expr pos:start="23:46" pos:end="23:46"><literal type="number" pos:start="23:46" pos:end="23:46">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="28:0"><decl pos:start="25:5" pos:end="25:19"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:15">resbits</name> <init pos:start="25:17" pos:end="25:19">= <expr pos:start="25:19" pos:end="25:19"><literal type="number" pos:start="25:19" pos:end="25:19">0</literal></expr></init></decl>;</decl_stmt>

<cpp:ifndef pos:start="27:1" pos:end="27:30">#<cpp:directive pos:start="27:2" pos:end="27:7">ifndef</cpp:directive> <name pos:start="27:9" pos:end="27:30">USE_REALLY_FULL_SEARCH</name></cpp:ifndef>

    <decl_stmt pos:start="29:5" pos:end="29:43"><decl pos:start="29:5" pos:end="29:42"><type pos:start="29:5" pos:end="29:15"><specifier pos:start="29:5" pos:end="29:9">const</specifier> <name pos:start="29:11" pos:end="29:15">float</name></type>  <name pos:start="29:18" pos:end="29:20">Q34</name> <init pos:start="29:22" pos:end="29:42">= <expr pos:start="29:24" pos:end="29:42"><call pos:start="29:24" pos:end="29:42"><name pos:start="29:24" pos:end="29:28">sqrtf</name><argument_list pos:start="29:29" pos:end="29:42">(<argument pos:start="29:30" pos:end="29:41"><expr pos:start="29:30" pos:end="29:41"><name pos:start="29:30" pos:end="29:30">Q</name> <operator pos:start="29:32" pos:end="29:32">*</operator> <call pos:start="29:34" pos:end="29:41"><name pos:start="29:34" pos:end="29:38">sqrtf</name><argument_list pos:start="29:39" pos:end="29:41">(<argument pos:start="29:40" pos:end="29:40"><expr pos:start="29:40" pos:end="29:40"><name pos:start="29:40" pos:end="29:40">Q</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:40"><decl pos:start="31:5" pos:end="31:39"><type pos:start="31:5" pos:end="31:13"><specifier pos:start="31:5" pos:end="31:9">const</specifier> <name pos:start="31:11" pos:end="31:13">int</name></type> <name pos:start="31:15" pos:end="31:19">range</name>  <init pos:start="31:22" pos:end="31:39">= <expr pos:start="31:24" pos:end="31:39"><name pos:start="31:24" pos:end="31:39"><name pos:start="31:24" pos:end="31:35">aac_cb_range</name><index pos:start="31:36" pos:end="31:39">[<expr pos:start="31:37" pos:end="31:38"><name pos:start="31:37" pos:end="31:38">cb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:41"><decl pos:start="33:5" pos:end="33:40"><type pos:start="33:5" pos:end="33:13"><specifier pos:start="33:5" pos:end="33:9">const</specifier> <name pos:start="33:11" pos:end="33:13">int</name></type> <name pos:start="33:15" pos:end="33:20">maxval</name> <init pos:start="33:22" pos:end="33:40">= <expr pos:start="33:24" pos:end="33:40"><name pos:start="33:24" pos:end="33:40"><name pos:start="33:24" pos:end="33:36">aac_cb_maxval</name><index pos:start="33:37" pos:end="33:40">[<expr pos:start="33:38" pos:end="33:39"><name pos:start="33:38" pos:end="33:39">cb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="38:0"><decl pos:start="35:5" pos:end="35:15"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:15"><name pos:start="35:9" pos:end="35:12">offs</name><index pos:start="35:13" pos:end="35:15">[<expr pos:start="35:14" pos:end="35:14"><literal type="number" pos:start="35:14" pos:end="35:14">4</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:endif pos:start="37:1" pos:end="37:6">#<cpp:directive pos:start="37:2" pos:end="37:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="37:8" pos:end="37:35">/* USE_REALLY_FULL_SEARCH */</comment>



    <if_stmt pos:start="41:5" pos:end="56:0"><if pos:start="41:5" pos:end="56:0">if <condition pos:start="41:8" pos:end="41:12">(<expr pos:start="41:9" pos:end="41:11"><operator pos:start="41:9" pos:end="41:9">!</operator><name pos:start="41:10" pos:end="41:11">cb</name></expr>)</condition> <block pos:start="41:14" pos:end="56:0">{<block_content pos:start="43:9" pos:end="51:29">

        <for pos:start="43:9" pos:end="45:32">for <control pos:start="43:13" pos:end="43:34">(<init pos:start="43:14" pos:end="43:19"><expr pos:start="43:14" pos:end="43:18"><name pos:start="43:14" pos:end="43:14">i</name> <operator pos:start="43:16" pos:end="43:16">=</operator> <literal type="number" pos:start="43:18" pos:end="43:18">0</literal></expr>;</init> <condition pos:start="43:21" pos:end="43:29"><expr pos:start="43:21" pos:end="43:28"><name pos:start="43:21" pos:end="43:21">i</name> <operator pos:start="43:23" pos:end="43:23">&lt;</operator> <name pos:start="43:25" pos:end="43:28">size</name></expr>;</condition> <incr pos:start="43:31" pos:end="43:33"><expr pos:start="43:31" pos:end="43:33"><name pos:start="43:31" pos:end="43:31">i</name><operator pos:start="43:32" pos:end="43:33">++</operator></expr></incr>)</control><block type="pseudo" pos:start="45:13" pos:end="45:32"><block_content pos:start="45:13" pos:end="45:32">

            <expr_stmt pos:start="45:13" pos:end="45:32"><expr pos:start="45:13" pos:end="45:31"><name pos:start="45:13" pos:end="45:16">cost</name> <operator pos:start="45:18" pos:end="45:19">+=</operator> <name pos:start="45:21" pos:end="45:25"><name pos:start="45:21" pos:end="45:22">in</name><index pos:start="45:23" pos:end="45:25">[<expr pos:start="45:24" pos:end="45:24"><name pos:start="45:24" pos:end="45:24">i</name></expr>]</index></name><operator pos:start="45:26" pos:end="45:26">*</operator><name pos:start="45:27" pos:end="45:31"><name pos:start="45:27" pos:end="45:28">in</name><index pos:start="45:29" pos:end="45:31">[<expr pos:start="45:30" pos:end="45:30"><name pos:start="45:30" pos:end="45:30">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        <if_stmt pos:start="47:9" pos:end="49:22"><if pos:start="47:9" pos:end="49:22">if <condition pos:start="47:12" pos:end="47:17">(<expr pos:start="47:13" pos:end="47:16"><name pos:start="47:13" pos:end="47:16">bits</name></expr>)</condition><block type="pseudo" pos:start="49:13" pos:end="49:22"><block_content pos:start="49:13" pos:end="49:22">

            <expr_stmt pos:start="49:13" pos:end="49:22"><expr pos:start="49:13" pos:end="49:21"><operator pos:start="49:13" pos:end="49:13">*</operator><name pos:start="49:14" pos:end="49:17">bits</name> <operator pos:start="49:19" pos:end="49:19">=</operator> <literal type="number" pos:start="49:21" pos:end="49:21">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return pos:start="51:9" pos:end="51:29">return <expr pos:start="51:16" pos:end="51:28"><name pos:start="51:16" pos:end="51:19">cost</name> <operator pos:start="51:21" pos:end="51:21">*</operator> <name pos:start="51:23" pos:end="51:28">lambda</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

<cpp:ifndef pos:start="55:1" pos:end="55:30">#<cpp:directive pos:start="55:2" pos:end="55:7">ifndef</cpp:directive> <name pos:start="55:9" pos:end="55:30">USE_REALLY_FULL_SEARCH</name></cpp:ifndef>

    <expr_stmt pos:start="57:5" pos:end="57:16"><expr pos:start="57:5" pos:end="57:15"><name pos:start="57:5" pos:end="57:11"><name pos:start="57:5" pos:end="57:8">offs</name><index pos:start="57:9" pos:end="57:11">[<expr pos:start="57:10" pos:end="57:10"><literal type="number" pos:start="57:10" pos:end="57:10">0</literal></expr>]</index></name> <operator pos:start="57:13" pos:end="57:13">=</operator> <literal type="number" pos:start="57:15" pos:end="57:15">1</literal></expr>;</expr_stmt>

    <for pos:start="59:5" pos:end="61:34">for <control pos:start="59:9" pos:end="59:29">(<init pos:start="59:10" pos:end="59:15"><expr pos:start="59:10" pos:end="59:14"><name pos:start="59:10" pos:end="59:10">i</name> <operator pos:start="59:12" pos:end="59:12">=</operator> <literal type="number" pos:start="59:14" pos:end="59:14">1</literal></expr>;</init> <condition pos:start="59:17" pos:end="59:24"><expr pos:start="59:17" pos:end="59:23"><name pos:start="59:17" pos:end="59:17">i</name> <operator pos:start="59:19" pos:end="59:19">&lt;</operator> <name pos:start="59:21" pos:end="59:23">dim</name></expr>;</condition> <incr pos:start="59:26" pos:end="59:28"><expr pos:start="59:26" pos:end="59:28"><name pos:start="59:26" pos:end="59:26">i</name><operator pos:start="59:27" pos:end="59:28">++</operator></expr></incr>)</control><block type="pseudo" pos:start="61:9" pos:end="61:34"><block_content pos:start="61:9" pos:end="61:34">

        <expr_stmt pos:start="61:9" pos:end="61:34"><expr pos:start="61:9" pos:end="61:33"><name pos:start="61:9" pos:end="61:15"><name pos:start="61:9" pos:end="61:12">offs</name><index pos:start="61:13" pos:end="61:15">[<expr pos:start="61:14" pos:end="61:14"><name pos:start="61:14" pos:end="61:14">i</name></expr>]</index></name> <operator pos:start="61:17" pos:end="61:17">=</operator> <name pos:start="61:19" pos:end="61:27"><name pos:start="61:19" pos:end="61:22">offs</name><index pos:start="61:23" pos:end="61:27">[<expr pos:start="61:24" pos:end="61:26"><name pos:start="61:24" pos:end="61:24">i</name><operator pos:start="61:25" pos:end="61:25">-</operator><literal type="number" pos:start="61:26" pos:end="61:26">1</literal></expr>]</index></name><operator pos:start="61:28" pos:end="61:28">*</operator><name pos:start="61:29" pos:end="61:33">range</name></expr>;</expr_stmt></block_content></block></for>

    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:16">(<expr pos:start="63:9" pos:end="63:15"><operator pos:start="63:9" pos:end="63:9">!</operator><name pos:start="63:10" pos:end="63:15">scaled</name></expr>)</condition> <block pos:start="63:18" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:27">

        <expr_stmt pos:start="65:9" pos:end="65:41"><expr pos:start="65:9" pos:end="65:40"><call pos:start="65:9" pos:end="65:40"><name pos:start="65:9" pos:end="65:19">abs_pow34_v</name><argument_list pos:start="65:20" pos:end="65:40">(<argument pos:start="65:21" pos:end="65:29"><expr pos:start="65:21" pos:end="65:29"><name pos:start="65:21" pos:end="65:29"><name pos:start="65:21" pos:end="65:21">s</name><operator pos:start="65:22" pos:end="65:23">-&gt;</operator><name pos:start="65:24" pos:end="65:29">scoefs</name></name></expr></argument>, <argument pos:start="65:32" pos:end="65:33"><expr pos:start="65:32" pos:end="65:33"><name pos:start="65:32" pos:end="65:33">in</name></expr></argument>, <argument pos:start="65:36" pos:end="65:39"><expr pos:start="65:36" pos:end="65:39"><name pos:start="65:36" pos:end="65:39">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:27"><expr pos:start="67:9" pos:end="67:26"><name pos:start="67:9" pos:end="67:14">scaled</name> <operator pos:start="67:16" pos:end="67:16">=</operator> <name pos:start="67:18" pos:end="67:26"><name pos:start="67:18" pos:end="67:18">s</name><operator pos:start="67:19" pos:end="67:20">-&gt;</operator><name pos:start="67:21" pos:end="67:26">scoefs</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="71:5" pos:end="74:0"><expr pos:start="71:5" pos:end="71:87"><call pos:start="71:5" pos:end="71:87"><name pos:start="71:5" pos:end="71:18">quantize_bands</name><argument_list pos:start="71:19" pos:end="71:87">(<argument pos:start="71:20" pos:end="71:28"><expr pos:start="71:20" pos:end="71:28"><name pos:start="71:20" pos:end="71:28"><name pos:start="71:20" pos:end="71:20">s</name><operator pos:start="71:21" pos:end="71:22">-&gt;</operator><name pos:start="71:23" pos:end="71:28">qcoefs</name></name></expr></argument>, <argument pos:start="71:31" pos:end="71:32"><expr pos:start="71:31" pos:end="71:32"><name pos:start="71:31" pos:end="71:32">in</name></expr></argument>, <argument pos:start="71:35" pos:end="71:40"><expr pos:start="71:35" pos:end="71:40"><name pos:start="71:35" pos:end="71:40">scaled</name></expr></argument>, <argument pos:start="71:43" pos:end="71:46"><expr pos:start="71:43" pos:end="71:46"><name pos:start="71:43" pos:end="71:46">size</name></expr></argument>, <argument pos:start="71:49" pos:end="71:51"><expr pos:start="71:49" pos:end="71:51"><name pos:start="71:49" pos:end="71:51">Q34</name></expr></argument>, <argument pos:start="71:54" pos:end="71:78"><expr pos:start="71:54" pos:end="71:78"><operator pos:start="71:54" pos:end="71:54">!</operator><call pos:start="71:55" pos:end="71:78"><name pos:start="71:55" pos:end="71:74">IS_CODEBOOK_UNSIGNED</name><argument_list pos:start="71:75" pos:end="71:78">(<argument pos:start="71:76" pos:end="71:77"><expr pos:start="71:76" pos:end="71:77"><name pos:start="71:76" pos:end="71:77">cb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="71:81" pos:end="71:86"><expr pos:start="71:81" pos:end="71:86"><name pos:start="71:81" pos:end="71:86">maxval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="73:1" pos:end="73:6">#<cpp:directive pos:start="73:2" pos:end="73:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="73:8" pos:end="73:35">/* USE_REALLY_FULL_SEARCH */</comment>

    <for pos:start="75:5" pos:end="281:1">for <control pos:start="75:9" pos:end="75:35">(<init pos:start="75:10" pos:end="75:15"><expr pos:start="75:10" pos:end="75:14"><name pos:start="75:10" pos:end="75:10">i</name> <operator pos:start="75:12" pos:end="75:12">=</operator> <literal type="number" pos:start="75:14" pos:end="75:14">0</literal></expr>;</init> <condition pos:start="75:17" pos:end="75:25"><expr pos:start="75:17" pos:end="75:24"><name pos:start="75:17" pos:end="75:17">i</name> <operator pos:start="75:19" pos:end="75:19">&lt;</operator> <name pos:start="75:21" pos:end="75:24">size</name></expr>;</condition> <incr pos:start="75:27" pos:end="75:34"><expr pos:start="75:27" pos:end="75:34"><name pos:start="75:27" pos:end="75:27">i</name> <operator pos:start="75:29" pos:end="75:30">+=</operator> <name pos:start="75:32" pos:end="75:34">dim</name></expr></incr>)</control> <block pos:start="75:37" pos:end="281:1">{<block_content pos:start="77:9" pos:end="279:16">

        <decl_stmt pos:start="77:9" pos:end="77:22"><decl pos:start="77:9" pos:end="77:21"><type pos:start="77:9" pos:end="77:13"><name pos:start="77:9" pos:end="77:13">float</name></type> <name pos:start="77:15" pos:end="77:21">mincost</name></decl>;</decl_stmt>

        <decl_stmt pos:start="79:9" pos:end="79:24"><decl pos:start="79:9" pos:end="79:23"><type pos:start="79:9" pos:end="79:11"><name pos:start="79:9" pos:end="79:11">int</name></type> <name pos:start="79:13" pos:end="79:18">minidx</name>  <init pos:start="79:21" pos:end="79:23">= <expr pos:start="79:23" pos:end="79:23"><literal type="number" pos:start="79:23" pos:end="79:23">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="81:9" pos:end="81:24"><decl pos:start="81:9" pos:end="81:23"><type pos:start="81:9" pos:end="81:11"><name pos:start="81:9" pos:end="81:11">int</name></type> <name pos:start="81:13" pos:end="81:19">minbits</name> <init pos:start="81:21" pos:end="81:23">= <expr pos:start="81:23" pos:end="81:23"><literal type="number" pos:start="81:23" pos:end="81:23">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="83:9" pos:end="86:0"><decl pos:start="83:9" pos:end="83:24"><type pos:start="83:9" pos:end="83:21"><specifier pos:start="83:9" pos:end="83:13">const</specifier> <name pos:start="83:15" pos:end="83:19">float</name> <modifier pos:start="83:21" pos:end="83:21">*</modifier></type><name pos:start="83:22" pos:end="83:24">vec</name></decl>;</decl_stmt>

<cpp:ifndef pos:start="85:1" pos:end="85:30">#<cpp:directive pos:start="85:2" pos:end="85:7">ifndef</cpp:directive> <name pos:start="85:9" pos:end="85:30">USE_REALLY_FULL_SEARCH</name></cpp:ifndef>

        <expr_stmt pos:start="87:9" pos:end="87:41"><expr pos:start="87:9" pos:end="87:40"><call pos:start="87:9" pos:end="87:21"><name pos:start="87:9" pos:end="87:11">int</name> <argument_list pos:start="87:13" pos:end="87:21">(<argument pos:start="87:14" pos:end="87:20"><expr pos:start="87:14" pos:end="87:20"><operator pos:start="87:14" pos:end="87:14">*</operator><name pos:start="87:15" pos:end="87:20">quants</name></expr></argument>)</argument_list></call><index pos:start="87:22" pos:end="87:24">[<expr pos:start="87:23" pos:end="87:23"><literal type="number" pos:start="87:23" pos:end="87:23">2</literal></expr>]</index> <operator pos:start="87:26" pos:end="87:26">=</operator> <operator pos:start="87:28" pos:end="87:28">&amp;</operator><name pos:start="87:29" pos:end="87:40"><name pos:start="87:29" pos:end="87:29">s</name><operator pos:start="87:30" pos:end="87:31">-&gt;</operator><name pos:start="87:32" pos:end="87:37">qcoefs</name><index pos:start="87:38" pos:end="87:40">[<expr pos:start="87:39" pos:end="87:39"><name pos:start="87:39" pos:end="87:39">i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:23"><expr pos:start="89:9" pos:end="89:22"><name pos:start="89:9" pos:end="89:15">mincost</name> <operator pos:start="89:17" pos:end="89:17">=</operator> <literal type="number" pos:start="89:19" pos:end="89:22">0.0f</literal></expr>;</expr_stmt>

        <for pos:start="91:9" pos:end="93:39">for <control pos:start="91:13" pos:end="91:33">(<init pos:start="91:14" pos:end="91:19"><expr pos:start="91:14" pos:end="91:18"><name pos:start="91:14" pos:end="91:14">j</name> <operator pos:start="91:16" pos:end="91:16">=</operator> <literal type="number" pos:start="91:18" pos:end="91:18">0</literal></expr>;</init> <condition pos:start="91:21" pos:end="91:28"><expr pos:start="91:21" pos:end="91:27"><name pos:start="91:21" pos:end="91:21">j</name> <operator pos:start="91:23" pos:end="91:23">&lt;</operator> <name pos:start="91:25" pos:end="91:27">dim</name></expr>;</condition> <incr pos:start="91:30" pos:end="91:32"><expr pos:start="91:30" pos:end="91:32"><name pos:start="91:30" pos:end="91:30">j</name><operator pos:start="91:31" pos:end="91:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="93:13" pos:end="93:39"><block_content pos:start="93:13" pos:end="93:39">

            <expr_stmt pos:start="93:13" pos:end="93:39"><expr pos:start="93:13" pos:end="93:38"><name pos:start="93:13" pos:end="93:19">mincost</name> <operator pos:start="93:21" pos:end="93:22">+=</operator> <name pos:start="93:24" pos:end="93:30"><name pos:start="93:24" pos:end="93:25">in</name><index pos:start="93:26" pos:end="93:30">[<expr pos:start="93:27" pos:end="93:29"><name pos:start="93:27" pos:end="93:27">i</name><operator pos:start="93:28" pos:end="93:28">+</operator><name pos:start="93:29" pos:end="93:29">j</name></expr>]</index></name><operator pos:start="93:31" pos:end="93:31">*</operator><name pos:start="93:32" pos:end="93:38"><name pos:start="93:32" pos:end="93:33">in</name><index pos:start="93:34" pos:end="93:38">[<expr pos:start="93:35" pos:end="93:37"><name pos:start="93:35" pos:end="93:35">i</name><operator pos:start="93:36" pos:end="93:36">+</operator><name pos:start="93:37" pos:end="93:37">j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt pos:start="95:9" pos:end="95:51"><expr pos:start="95:9" pos:end="95:50"><name pos:start="95:9" pos:end="95:14">minidx</name> <operator pos:start="95:16" pos:end="95:16">=</operator> <ternary pos:start="95:18" pos:end="95:50"><condition pos:start="95:18" pos:end="95:43"><expr pos:start="95:18" pos:end="95:41"><call pos:start="95:18" pos:end="95:41"><name pos:start="95:18" pos:end="95:37">IS_CODEBOOK_UNSIGNED</name><argument_list pos:start="95:38" pos:end="95:41">(<argument pos:start="95:39" pos:end="95:40"><expr pos:start="95:39" pos:end="95:40"><name pos:start="95:39" pos:end="95:40">cb</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="95:45" pos:end="95:45"> <expr pos:start="95:45" pos:end="95:45"><literal type="number" pos:start="95:45" pos:end="95:45">0</literal></expr> </then><else pos:start="95:47" pos:end="95:50">: <expr pos:start="95:49" pos:end="95:50"><literal type="number" pos:start="95:49" pos:end="95:50">40</literal></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:53"><expr pos:start="97:9" pos:end="97:52"><name pos:start="97:9" pos:end="97:15">minbits</name> <operator pos:start="97:17" pos:end="97:17">=</operator> <name pos:start="97:19" pos:end="97:52"><name pos:start="97:19" pos:end="97:38">ff_aac_spectral_bits</name><index pos:start="97:39" pos:end="97:44">[<expr pos:start="97:40" pos:end="97:43"><name pos:start="97:40" pos:end="97:41">cb</name><operator pos:start="97:42" pos:end="97:42">-</operator><literal type="number" pos:start="97:43" pos:end="97:43">1</literal></expr>]</index><index pos:start="97:45" pos:end="97:52">[<expr pos:start="97:46" pos:end="97:51"><name pos:start="97:46" pos:end="97:51">minidx</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:45"><expr pos:start="99:9" pos:end="99:44"><name pos:start="99:9" pos:end="99:15">mincost</name> <operator pos:start="99:17" pos:end="99:17">=</operator> <name pos:start="99:19" pos:end="99:25">mincost</name> <operator pos:start="99:27" pos:end="99:27">*</operator> <name pos:start="99:29" pos:end="99:34">lambda</name> <operator pos:start="99:36" pos:end="99:36">+</operator> <name pos:start="99:38" pos:end="99:44">minbits</name></expr>;</expr_stmt>

        <for pos:start="101:9" pos:end="271:5">for <control pos:start="101:13" pos:end="101:38">(<init pos:start="101:14" pos:end="101:19"><expr pos:start="101:14" pos:end="101:18"><name pos:start="101:14" pos:end="101:14">j</name> <operator pos:start="101:16" pos:end="101:16">=</operator> <literal type="number" pos:start="101:18" pos:end="101:18">0</literal></expr>;</init> <condition pos:start="101:21" pos:end="101:33"><expr pos:start="101:21" pos:end="101:32"><name pos:start="101:21" pos:end="101:21">j</name> <operator pos:start="101:23" pos:end="101:23">&lt;</operator> <operator pos:start="101:25" pos:end="101:25">(</operator><literal type="number" pos:start="101:26" pos:end="101:26">1</literal><operator pos:start="101:27" pos:end="101:28">&lt;&lt;</operator><name pos:start="101:29" pos:end="101:31">dim</name><operator pos:start="101:32" pos:end="101:32">)</operator></expr>;</condition> <incr pos:start="101:35" pos:end="101:37"><expr pos:start="101:35" pos:end="101:37"><name pos:start="101:35" pos:end="101:35">j</name><operator pos:start="101:36" pos:end="101:37">++</operator></expr></incr>)</control> <block pos:start="101:40" pos:end="271:5">{<block_content pos:start="103:13" pos:end="269:9">

            <decl_stmt pos:start="103:13" pos:end="103:28"><decl pos:start="103:13" pos:end="103:27"><type pos:start="103:13" pos:end="103:17"><name pos:start="103:13" pos:end="103:17">float</name></type> <name pos:start="103:19" pos:end="103:20">rd</name> <init pos:start="103:22" pos:end="103:27">= <expr pos:start="103:24" pos:end="103:27"><literal type="number" pos:start="103:24" pos:end="103:27">0.0f</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="105:13" pos:end="105:24"><decl pos:start="105:13" pos:end="105:23"><type pos:start="105:13" pos:end="105:15"><name pos:start="105:13" pos:end="105:15">int</name></type> <name pos:start="105:17" pos:end="105:23">curbits</name></decl>;</decl_stmt>

            <decl_stmt pos:start="107:13" pos:end="107:59"><decl pos:start="107:13" pos:end="107:58"><type pos:start="107:13" pos:end="107:15"><name pos:start="107:13" pos:end="107:15">int</name></type> <name pos:start="107:17" pos:end="107:22">curidx</name> <init pos:start="107:24" pos:end="107:58">= <expr pos:start="107:26" pos:end="107:58"><ternary pos:start="107:26" pos:end="107:58"><condition pos:start="107:26" pos:end="107:51"><expr pos:start="107:26" pos:end="107:49"><call pos:start="107:26" pos:end="107:49"><name pos:start="107:26" pos:end="107:45">IS_CODEBOOK_UNSIGNED</name><argument_list pos:start="107:46" pos:end="107:49">(<argument pos:start="107:47" pos:end="107:48"><expr pos:start="107:47" pos:end="107:48"><name pos:start="107:47" pos:end="107:48">cb</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="107:53" pos:end="107:53"> <expr pos:start="107:53" pos:end="107:53"><literal type="number" pos:start="107:53" pos:end="107:53">0</literal></expr> </then><else pos:start="107:55" pos:end="107:58">: <expr pos:start="107:57" pos:end="107:58"><literal type="number" pos:start="107:57" pos:end="107:58">40</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="109:13" pos:end="109:27"><decl pos:start="109:13" pos:end="109:26"><type pos:start="109:13" pos:end="109:15"><name pos:start="109:13" pos:end="109:15">int</name></type> <name pos:start="109:17" pos:end="109:20">same</name>   <init pos:start="109:24" pos:end="109:26">= <expr pos:start="109:26" pos:end="109:26"><literal type="number" pos:start="109:26" pos:end="109:26">0</literal></expr></init></decl>;</decl_stmt>

            <for pos:start="111:13" pos:end="121:13">for <control pos:start="111:17" pos:end="111:37">(<init pos:start="111:18" pos:end="111:23"><expr pos:start="111:18" pos:end="111:22"><name pos:start="111:18" pos:end="111:18">k</name> <operator pos:start="111:20" pos:end="111:20">=</operator> <literal type="number" pos:start="111:22" pos:end="111:22">0</literal></expr>;</init> <condition pos:start="111:25" pos:end="111:32"><expr pos:start="111:25" pos:end="111:31"><name pos:start="111:25" pos:end="111:25">k</name> <operator pos:start="111:27" pos:end="111:27">&lt;</operator> <name pos:start="111:29" pos:end="111:31">dim</name></expr>;</condition> <incr pos:start="111:34" pos:end="111:36"><expr pos:start="111:34" pos:end="111:36"><name pos:start="111:34" pos:end="111:34">k</name><operator pos:start="111:35" pos:end="111:36">++</operator></expr></incr>)</control> <block pos:start="111:39" pos:end="121:13">{<block_content pos:start="113:17" pos:end="119:17">

                <if_stmt pos:start="113:17" pos:end="119:17"><if pos:start="113:17" pos:end="119:17">if <condition pos:start="113:20" pos:end="113:67">(<expr pos:start="113:21" pos:end="113:66"><operator pos:start="113:21" pos:end="113:21">(</operator><name pos:start="113:22" pos:end="113:22">j</name> <operator pos:start="113:24" pos:end="113:24">&amp;</operator> <operator pos:start="113:26" pos:end="113:26">(</operator><literal type="number" pos:start="113:27" pos:end="113:27">1</literal> <operator pos:start="113:29" pos:end="113:30">&lt;&lt;</operator> <name pos:start="113:32" pos:end="113:32">k</name><operator pos:start="113:33" pos:end="113:33">)</operator><operator pos:start="113:34" pos:end="113:34">)</operator> <operator pos:start="113:36" pos:end="113:37">&amp;&amp;</operator> <name pos:start="113:39" pos:end="113:50"><name pos:start="113:39" pos:end="113:44">quants</name><index pos:start="113:45" pos:end="113:47">[<expr pos:start="113:46" pos:end="113:46"><name pos:start="113:46" pos:end="113:46">k</name></expr>]</index><index pos:start="113:48" pos:end="113:50">[<expr pos:start="113:49" pos:end="113:49"><literal type="number" pos:start="113:49" pos:end="113:49">0</literal></expr>]</index></name> <operator pos:start="113:52" pos:end="113:53">==</operator> <name pos:start="113:55" pos:end="113:66"><name pos:start="113:55" pos:end="113:60">quants</name><index pos:start="113:61" pos:end="113:63">[<expr pos:start="113:62" pos:end="113:62"><name pos:start="113:62" pos:end="113:62">k</name></expr>]</index><index pos:start="113:64" pos:end="113:66">[<expr pos:start="113:65" pos:end="113:65"><literal type="number" pos:start="113:65" pos:end="113:65">1</literal></expr>]</index></name></expr>)</condition> <block pos:start="113:69" pos:end="119:17">{<block_content pos:start="115:21" pos:end="117:26">

                    <expr_stmt pos:start="115:21" pos:end="115:29"><expr pos:start="115:21" pos:end="115:28"><name pos:start="115:21" pos:end="115:24">same</name> <operator pos:start="115:26" pos:end="115:26">=</operator> <literal type="number" pos:start="115:28" pos:end="115:28">1</literal></expr>;</expr_stmt>

                    <break pos:start="117:21" pos:end="117:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="123:13" pos:end="125:25"><if pos:start="123:13" pos:end="125:25">if <condition pos:start="123:16" pos:end="123:21">(<expr pos:start="123:17" pos:end="123:20"><name pos:start="123:17" pos:end="123:20">same</name></expr>)</condition><block type="pseudo" pos:start="125:17" pos:end="125:25"><block_content pos:start="125:17" pos:end="125:25">

                <continue pos:start="125:17" pos:end="125:25">continue;</continue></block_content></block></if></if_stmt>

            <for pos:start="127:13" pos:end="129:74">for <control pos:start="127:17" pos:end="127:37">(<init pos:start="127:18" pos:end="127:23"><expr pos:start="127:18" pos:end="127:22"><name pos:start="127:18" pos:end="127:18">k</name> <operator pos:start="127:20" pos:end="127:20">=</operator> <literal type="number" pos:start="127:22" pos:end="127:22">0</literal></expr>;</init> <condition pos:start="127:25" pos:end="127:32"><expr pos:start="127:25" pos:end="127:31"><name pos:start="127:25" pos:end="127:25">k</name> <operator pos:start="127:27" pos:end="127:27">&lt;</operator> <name pos:start="127:29" pos:end="127:31">dim</name></expr>;</condition> <incr pos:start="127:34" pos:end="127:36"><expr pos:start="127:34" pos:end="127:36"><name pos:start="127:34" pos:end="127:34">k</name><operator pos:start="127:35" pos:end="127:36">++</operator></expr></incr>)</control><block type="pseudo" pos:start="129:17" pos:end="129:74"><block_content pos:start="129:17" pos:end="129:74">

                <expr_stmt pos:start="129:17" pos:end="129:74"><expr pos:start="129:17" pos:end="129:73"><name pos:start="129:17" pos:end="129:22">curidx</name> <operator pos:start="129:24" pos:end="129:25">+=</operator> <name pos:start="129:27" pos:end="129:53"><name pos:start="129:27" pos:end="129:32">quants</name><index pos:start="129:33" pos:end="129:35">[<expr pos:start="129:34" pos:end="129:34"><name pos:start="129:34" pos:end="129:34">k</name></expr>]</index><index pos:start="129:36" pos:end="129:53">[<expr pos:start="129:37" pos:end="129:52"><operator pos:start="129:37" pos:end="129:37">!</operator><operator pos:start="129:38" pos:end="129:38">!</operator><operator pos:start="129:39" pos:end="129:39">(</operator><name pos:start="129:40" pos:end="129:40">j</name> <operator pos:start="129:42" pos:end="129:42">&amp;</operator> <operator pos:start="129:44" pos:end="129:44">(</operator><literal type="number" pos:start="129:45" pos:end="129:45">1</literal> <operator pos:start="129:47" pos:end="129:48">&lt;&lt;</operator> <name pos:start="129:50" pos:end="129:50">k</name><operator pos:start="129:51" pos:end="129:51">)</operator><operator pos:start="129:52" pos:end="129:52">)</operator></expr>]</index></name> <operator pos:start="129:55" pos:end="129:55">*</operator> <name pos:start="129:57" pos:end="129:73"><name pos:start="129:57" pos:end="129:60">offs</name><index pos:start="129:61" pos:end="129:73">[<expr pos:start="129:62" pos:end="129:72"><name pos:start="129:62" pos:end="129:64">dim</name> <operator pos:start="129:66" pos:end="129:66">-</operator> <literal type="number" pos:start="129:68" pos:end="129:70">1</literal> <operator pos:start="129:70" pos:end="129:70">-</operator> <name pos:start="129:72" pos:end="129:72">k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="131:13" pos:end="131:58"><expr pos:start="131:13" pos:end="131:57"><name pos:start="131:13" pos:end="131:19">curbits</name> <operator pos:start="131:21" pos:end="131:21">=</operator>  <name pos:start="131:24" pos:end="131:57"><name pos:start="131:24" pos:end="131:43">ff_aac_spectral_bits</name><index pos:start="131:44" pos:end="131:49">[<expr pos:start="131:45" pos:end="131:48"><name pos:start="131:45" pos:end="131:46">cb</name><operator pos:start="131:47" pos:end="131:47">-</operator><literal type="number" pos:start="131:48" pos:end="131:48">1</literal></expr>]</index><index pos:start="131:50" pos:end="131:57">[<expr pos:start="131:51" pos:end="131:56"><name pos:start="131:51" pos:end="131:56">curidx</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="136:0"><expr pos:start="133:13" pos:end="133:64"><name pos:start="133:13" pos:end="133:15">vec</name>     <operator pos:start="133:21" pos:end="133:21">=</operator> <operator pos:start="133:23" pos:end="133:23">&amp;</operator><name pos:start="133:24" pos:end="133:64"><name pos:start="133:24" pos:end="133:46">ff_aac_codebook_vectors</name><index pos:start="133:47" pos:end="133:52">[<expr pos:start="133:48" pos:end="133:51"><name pos:start="133:48" pos:end="133:49">cb</name><operator pos:start="133:50" pos:end="133:50">-</operator><literal type="number" pos:start="133:51" pos:end="133:51">1</literal></expr>]</index><index pos:start="133:53" pos:end="133:64">[<expr pos:start="133:54" pos:end="133:63"><name pos:start="133:54" pos:end="133:59">curidx</name><operator pos:start="133:60" pos:end="133:60">*</operator><name pos:start="133:61" pos:end="133:63">dim</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:else pos:start="135:1" pos:end="135:5">#<cpp:directive pos:start="135:2" pos:end="135:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="137:9" pos:end="137:27"><expr pos:start="137:9" pos:end="137:26"><name pos:start="137:9" pos:end="137:15">mincost</name> <operator pos:start="137:17" pos:end="137:17">=</operator> <name pos:start="137:19" pos:end="137:26">INFINITY</name></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:44"><expr pos:start="139:9" pos:end="139:43"><name pos:start="139:9" pos:end="139:11">vec</name> <operator pos:start="139:13" pos:end="139:13">=</operator> <name pos:start="139:15" pos:end="139:43"><name pos:start="139:15" pos:end="139:37">ff_aac_codebook_vectors</name><index pos:start="139:38" pos:end="139:43">[<expr pos:start="139:39" pos:end="139:42"><name pos:start="139:39" pos:end="139:40">cb</name><operator pos:start="139:41" pos:end="139:41">-</operator><literal type="number" pos:start="139:42" pos:end="139:42">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <for pos:start="141:9" pos:end="225:9">for <control pos:start="141:13" pos:end="141:69">(<init pos:start="141:14" pos:end="141:19"><expr pos:start="141:14" pos:end="141:18"><name pos:start="141:14" pos:end="141:14">j</name> <operator pos:start="141:16" pos:end="141:16">=</operator> <literal type="number" pos:start="141:18" pos:end="141:18">0</literal></expr>;</init> <condition pos:start="141:21" pos:end="141:52"><expr pos:start="141:21" pos:end="141:51"><name pos:start="141:21" pos:end="141:21">j</name> <operator pos:start="141:23" pos:end="141:23">&lt;</operator> <name pos:start="141:25" pos:end="141:51"><name pos:start="141:25" pos:end="141:45">ff_aac_spectral_sizes</name><index pos:start="141:46" pos:end="141:51">[<expr pos:start="141:47" pos:end="141:50"><name pos:start="141:47" pos:end="141:48">cb</name><operator pos:start="141:49" pos:end="141:49">-</operator><literal type="number" pos:start="141:50" pos:end="141:50">1</literal></expr>]</index></name></expr>;</condition> <incr pos:start="141:54" pos:end="141:68"><expr pos:start="141:54" pos:end="141:56"><name pos:start="141:54" pos:end="141:54">j</name><operator pos:start="141:55" pos:end="141:56">++</operator></expr><operator pos:start="141:57" pos:end="141:57">,</operator> <expr pos:start="141:59" pos:end="141:68"><name pos:start="141:59" pos:end="141:61">vec</name> <operator pos:start="141:63" pos:end="141:64">+=</operator> <name pos:start="141:66" pos:end="141:68">dim</name></expr></incr>)</control> <block pos:start="141:71" pos:end="225:9">{<block_content pos:start="143:13" pos:end="223:13">

            <decl_stmt pos:start="143:13" pos:end="143:28"><decl pos:start="143:13" pos:end="143:27"><type pos:start="143:13" pos:end="143:17"><name pos:start="143:13" pos:end="143:17">float</name></type> <name pos:start="143:19" pos:end="143:20">rd</name> <init pos:start="143:22" pos:end="143:27">= <expr pos:start="143:24" pos:end="143:27"><literal type="number" pos:start="143:24" pos:end="143:27">0.0f</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="145:13" pos:end="145:56"><decl pos:start="145:13" pos:end="145:55"><type pos:start="145:13" pos:end="145:15"><name pos:start="145:13" pos:end="145:15">int</name></type> <name pos:start="145:17" pos:end="145:23">curbits</name> <init pos:start="145:25" pos:end="145:55">= <expr pos:start="145:27" pos:end="145:55"><name pos:start="145:27" pos:end="145:55"><name pos:start="145:27" pos:end="145:46">ff_aac_spectral_bits</name><index pos:start="145:47" pos:end="145:52">[<expr pos:start="145:48" pos:end="145:51"><name pos:start="145:48" pos:end="145:49">cb</name><operator pos:start="145:50" pos:end="145:50">-</operator><literal type="number" pos:start="145:51" pos:end="145:51">1</literal></expr>]</index><index pos:start="145:53" pos:end="145:55">[<expr pos:start="145:54" pos:end="145:54"><name pos:start="145:54" pos:end="145:54">j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="147:13" pos:end="150:0"><decl pos:start="147:13" pos:end="147:26"><type pos:start="147:13" pos:end="147:15"><name pos:start="147:13" pos:end="147:15">int</name></type> <name pos:start="147:17" pos:end="147:22">curidx</name> <init pos:start="147:24" pos:end="147:26">= <expr pos:start="147:26" pos:end="147:26"><name pos:start="147:26" pos:end="147:26">j</name></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="149:1" pos:end="149:6">#<cpp:directive pos:start="149:2" pos:end="149:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="149:8" pos:end="149:35">/* USE_REALLY_FULL_SEARCH */</comment>

            <if_stmt pos:start="151:13" pos:end="211:13"><if pos:start="151:13" pos:end="201:13">if <condition pos:start="151:16" pos:end="151:41">(<expr pos:start="151:17" pos:end="151:40"><call pos:start="151:17" pos:end="151:40"><name pos:start="151:17" pos:end="151:36">IS_CODEBOOK_UNSIGNED</name><argument_list pos:start="151:37" pos:end="151:40">(<argument pos:start="151:38" pos:end="151:39"><expr pos:start="151:38" pos:end="151:39"><name pos:start="151:38" pos:end="151:39">cb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="151:43" pos:end="201:13">{<block_content pos:start="153:17" pos:end="199:17">

                <for pos:start="153:17" pos:end="199:17">for <control pos:start="153:21" pos:end="153:41">(<init pos:start="153:22" pos:end="153:27"><expr pos:start="153:22" pos:end="153:26"><name pos:start="153:22" pos:end="153:22">k</name> <operator pos:start="153:24" pos:end="153:24">=</operator> <literal type="number" pos:start="153:26" pos:end="153:26">0</literal></expr>;</init> <condition pos:start="153:29" pos:end="153:36"><expr pos:start="153:29" pos:end="153:35"><name pos:start="153:29" pos:end="153:29">k</name> <operator pos:start="153:31" pos:end="153:31">&lt;</operator> <name pos:start="153:33" pos:end="153:35">dim</name></expr>;</condition> <incr pos:start="153:38" pos:end="153:40"><expr pos:start="153:38" pos:end="153:40"><name pos:start="153:38" pos:end="153:38">k</name><operator pos:start="153:39" pos:end="153:40">++</operator></expr></incr>)</control> <block pos:start="153:43" pos:end="199:17">{<block_content pos:start="155:21" pos:end="197:32">

                    <decl_stmt pos:start="155:21" pos:end="155:45"><decl pos:start="155:21" pos:end="155:44"><type pos:start="155:21" pos:end="155:25"><name pos:start="155:21" pos:end="155:25">float</name></type> <name pos:start="155:27" pos:end="155:27">t</name> <init pos:start="155:29" pos:end="155:44">= <expr pos:start="155:31" pos:end="155:44"><call pos:start="155:31" pos:end="155:44"><name pos:start="155:31" pos:end="155:35">fabsf</name><argument_list pos:start="155:36" pos:end="155:44">(<argument pos:start="155:37" pos:end="155:43"><expr pos:start="155:37" pos:end="155:43"><name pos:start="155:37" pos:end="155:43"><name pos:start="155:37" pos:end="155:38">in</name><index pos:start="155:39" pos:end="155:43">[<expr pos:start="155:40" pos:end="155:42"><name pos:start="155:40" pos:end="155:40">i</name><operator pos:start="155:41" pos:end="155:41">+</operator><name pos:start="155:42" pos:end="155:42">k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="157:21" pos:end="157:29"><decl pos:start="157:21" pos:end="157:28"><type pos:start="157:21" pos:end="157:25"><name pos:start="157:21" pos:end="157:25">float</name></type> <name pos:start="157:27" pos:end="157:28">di</name></decl>;</decl_stmt>

                    <if_stmt pos:start="159:21" pos:end="191:21"><if pos:start="159:21" pos:end="187:21">if <condition pos:start="159:24" pos:end="159:40">(<expr pos:start="159:25" pos:end="159:39"><name pos:start="159:25" pos:end="159:30"><name pos:start="159:25" pos:end="159:27">vec</name><index pos:start="159:28" pos:end="159:30">[<expr pos:start="159:29" pos:end="159:29"><name pos:start="159:29" pos:end="159:29">k</name></expr>]</index></name> <operator pos:start="159:32" pos:end="159:33">==</operator> <literal type="number" pos:start="159:35" pos:end="159:39">64.0f</literal></expr>)</condition> <block pos:start="159:42" pos:end="187:21">{<block_content pos:start="163:25" pos:end="185:25"> <comment type="line" pos:start="159:44" pos:end="159:56">//FIXME: slow</comment>

                        <comment type="line" pos:start="161:25" pos:end="161:71">//do not code with escape sequence small values</comment>

                        <if_stmt pos:start="163:25" pos:end="169:25"><if pos:start="163:25" pos:end="169:25">if <condition pos:start="163:28" pos:end="163:41">(<expr pos:start="163:29" pos:end="163:40"><name pos:start="163:29" pos:end="163:29">t</name> <operator pos:start="163:31" pos:end="163:31">&lt;</operator> <literal type="number" pos:start="163:33" pos:end="163:37">39.0f</literal><operator pos:start="163:38" pos:end="163:38">*</operator><name pos:start="163:39" pos:end="163:40">IQ</name></expr>)</condition> <block pos:start="163:43" pos:end="169:25">{<block_content pos:start="165:29" pos:end="167:34">

                            <expr_stmt pos:start="165:29" pos:end="165:42"><expr pos:start="165:29" pos:end="165:41"><name pos:start="165:29" pos:end="165:30">rd</name> <operator pos:start="165:32" pos:end="165:32">=</operator> <name pos:start="165:34" pos:end="165:41">INFINITY</name></expr>;</expr_stmt>

                            <break pos:start="167:29" pos:end="167:34">break;</break>

                        </block_content>}</block></if></if_stmt>

                        <if_stmt pos:start="171:25" pos:end="185:25"><if pos:start="171:25" pos:end="177:25">if <condition pos:start="171:28" pos:end="171:48">(<expr pos:start="171:29" pos:end="171:47"><name pos:start="171:29" pos:end="171:29">t</name> <operator pos:start="171:31" pos:end="171:32">&gt;=</operator> <name pos:start="171:34" pos:end="171:47">CLIPPED_ESCAPE</name></expr>)</condition> <block pos:start="171:50" pos:end="177:25">{<block_content pos:start="173:29" pos:end="175:42">

                            <expr_stmt pos:start="173:29" pos:end="173:52"><expr pos:start="173:29" pos:end="173:51"><name pos:start="173:29" pos:end="173:30">di</name> <operator pos:start="173:32" pos:end="173:32">=</operator> <name pos:start="173:34" pos:end="173:34">t</name> <operator pos:start="173:36" pos:end="173:36">-</operator> <name pos:start="173:38" pos:end="173:51">CLIPPED_ESCAPE</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="175:29" pos:end="175:42"><expr pos:start="175:29" pos:end="175:41"><name pos:start="175:29" pos:end="175:35">curbits</name> <operator pos:start="175:37" pos:end="175:38">+=</operator> <literal type="number" pos:start="175:40" pos:end="175:41">21</literal></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="177:27" pos:end="185:25">else <block pos:start="177:32" pos:end="185:25">{<block_content pos:start="179:29" pos:end="183:60">

                            <decl_stmt pos:start="179:29" pos:end="179:66"><decl pos:start="179:29" pos:end="179:65"><type pos:start="179:29" pos:end="179:31"><name pos:start="179:29" pos:end="179:31">int</name></type> <name pos:start="179:33" pos:end="179:33">c</name> <init pos:start="179:35" pos:end="179:65">= <expr pos:start="179:37" pos:end="179:65"><call pos:start="179:37" pos:end="179:65"><name pos:start="179:37" pos:end="179:43">av_clip</name><argument_list pos:start="179:44" pos:end="179:65">(<argument pos:start="179:45" pos:end="179:55"><expr pos:start="179:45" pos:end="179:55"><call pos:start="179:45" pos:end="179:55"><name pos:start="179:45" pos:end="179:49">quant</name><argument_list pos:start="179:50" pos:end="179:55">(<argument pos:start="179:51" pos:end="179:51"><expr pos:start="179:51" pos:end="179:51"><name pos:start="179:51" pos:end="179:51">t</name></expr></argument>, <argument pos:start="179:54" pos:end="179:54"><expr pos:start="179:54" pos:end="179:54"><name pos:start="179:54" pos:end="179:54">Q</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="179:58" pos:end="179:58"><expr pos:start="179:58" pos:end="179:58"><literal type="number" pos:start="179:58" pos:end="179:58">0</literal></expr></argument>, <argument pos:start="179:61" pos:end="179:64"><expr pos:start="179:61" pos:end="179:64"><literal type="number" pos:start="179:61" pos:end="179:64">8191</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <expr_stmt pos:start="181:29" pos:end="181:51"><expr pos:start="181:29" pos:end="181:50"><name pos:start="181:29" pos:end="181:30">di</name> <operator pos:start="181:32" pos:end="181:32">=</operator> <name pos:start="181:34" pos:end="181:34">t</name> <operator pos:start="181:36" pos:end="181:36">-</operator> <name pos:start="181:38" pos:end="181:38">c</name><operator pos:start="181:39" pos:end="181:39">*</operator><call pos:start="181:40" pos:end="181:47"><name pos:start="181:40" pos:end="181:44">cbrtf</name><argument_list pos:start="181:45" pos:end="181:47">(<argument pos:start="181:46" pos:end="181:46"><expr pos:start="181:46" pos:end="181:46"><name pos:start="181:46" pos:end="181:46">c</name></expr></argument>)</argument_list></call><operator pos:start="181:48" pos:end="181:48">*</operator><name pos:start="181:49" pos:end="181:50">IQ</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="183:29" pos:end="183:60"><expr pos:start="183:29" pos:end="183:59"><name pos:start="183:29" pos:end="183:35">curbits</name> <operator pos:start="183:37" pos:end="183:38">+=</operator> <call pos:start="183:40" pos:end="183:49"><name pos:start="183:40" pos:end="183:46">av_log2</name><argument_list pos:start="183:47" pos:end="183:49">(<argument pos:start="183:48" pos:end="183:48"><expr pos:start="183:48" pos:end="183:48"><name pos:start="183:48" pos:end="183:48">c</name></expr></argument>)</argument_list></call><operator pos:start="183:50" pos:end="183:50">*</operator><literal type="number" pos:start="183:51" pos:end="183:53">2</literal> <operator pos:start="183:53" pos:end="183:53">-</operator> <literal type="number" pos:start="183:55" pos:end="183:57">4</literal> <operator pos:start="183:57" pos:end="183:57">+</operator> <literal type="number" pos:start="183:59" pos:end="183:59">1</literal></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="187:23" pos:end="191:21">else <block pos:start="187:28" pos:end="191:21">{<block_content pos:start="189:25" pos:end="189:43">

                        <expr_stmt pos:start="189:25" pos:end="189:43"><expr pos:start="189:25" pos:end="189:42"><name pos:start="189:25" pos:end="189:26">di</name> <operator pos:start="189:28" pos:end="189:28">=</operator> <name pos:start="189:30" pos:end="189:30">t</name> <operator pos:start="189:32" pos:end="189:32">-</operator> <name pos:start="189:34" pos:end="189:39"><name pos:start="189:34" pos:end="189:36">vec</name><index pos:start="189:37" pos:end="189:39">[<expr pos:start="189:38" pos:end="189:38"><name pos:start="189:38" pos:end="189:38">k</name></expr>]</index></name><operator pos:start="189:40" pos:end="189:40">*</operator><name pos:start="189:41" pos:end="189:42">IQ</name></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <if_stmt pos:start="193:21" pos:end="195:34"><if pos:start="193:21" pos:end="195:34">if <condition pos:start="193:24" pos:end="193:39">(<expr pos:start="193:25" pos:end="193:38"><name pos:start="193:25" pos:end="193:30"><name pos:start="193:25" pos:end="193:27">vec</name><index pos:start="193:28" pos:end="193:30">[<expr pos:start="193:29" pos:end="193:29"><name pos:start="193:29" pos:end="193:29">k</name></expr>]</index></name> <operator pos:start="193:32" pos:end="193:33">!=</operator> <literal type="number" pos:start="193:35" pos:end="193:38">0.0f</literal></expr>)</condition><block type="pseudo" pos:start="195:25" pos:end="195:34"><block_content pos:start="195:25" pos:end="195:34">

                        <expr_stmt pos:start="195:25" pos:end="195:34"><expr pos:start="195:25" pos:end="195:33"><name pos:start="195:25" pos:end="195:31">curbits</name><operator pos:start="195:32" pos:end="195:33">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="197:21" pos:end="197:32"><expr pos:start="197:21" pos:end="197:31"><name pos:start="197:21" pos:end="197:22">rd</name> <operator pos:start="197:24" pos:end="197:25">+=</operator> <name pos:start="197:27" pos:end="197:28">di</name><operator pos:start="197:29" pos:end="197:29">*</operator><name pos:start="197:30" pos:end="197:31">di</name></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if> <else pos:start="201:15" pos:end="211:13">else <block pos:start="201:20" pos:end="211:13">{<block_content pos:start="203:17" pos:end="209:17">

                <for pos:start="203:17" pos:end="209:17">for <control pos:start="203:21" pos:end="203:41">(<init pos:start="203:22" pos:end="203:27"><expr pos:start="203:22" pos:end="203:26"><name pos:start="203:22" pos:end="203:22">k</name> <operator pos:start="203:24" pos:end="203:24">=</operator> <literal type="number" pos:start="203:26" pos:end="203:26">0</literal></expr>;</init> <condition pos:start="203:29" pos:end="203:36"><expr pos:start="203:29" pos:end="203:35"><name pos:start="203:29" pos:end="203:29">k</name> <operator pos:start="203:31" pos:end="203:31">&lt;</operator> <name pos:start="203:33" pos:end="203:35">dim</name></expr>;</condition> <incr pos:start="203:38" pos:end="203:40"><expr pos:start="203:38" pos:end="203:40"><name pos:start="203:38" pos:end="203:38">k</name><operator pos:start="203:39" pos:end="203:40">++</operator></expr></incr>)</control> <block pos:start="203:43" pos:end="209:17">{<block_content pos:start="205:21" pos:end="207:32">

                    <decl_stmt pos:start="205:21" pos:end="205:51"><decl pos:start="205:21" pos:end="205:50"><type pos:start="205:21" pos:end="205:25"><name pos:start="205:21" pos:end="205:25">float</name></type> <name pos:start="205:27" pos:end="205:28">di</name> <init pos:start="205:30" pos:end="205:50">= <expr pos:start="205:32" pos:end="205:50"><name pos:start="205:32" pos:end="205:38"><name pos:start="205:32" pos:end="205:33">in</name><index pos:start="205:34" pos:end="205:38">[<expr pos:start="205:35" pos:end="205:37"><name pos:start="205:35" pos:end="205:35">i</name><operator pos:start="205:36" pos:end="205:36">+</operator><name pos:start="205:37" pos:end="205:37">k</name></expr>]</index></name> <operator pos:start="205:40" pos:end="205:40">-</operator> <name pos:start="205:42" pos:end="205:47"><name pos:start="205:42" pos:end="205:44">vec</name><index pos:start="205:45" pos:end="205:47">[<expr pos:start="205:46" pos:end="205:46"><name pos:start="205:46" pos:end="205:46">k</name></expr>]</index></name><operator pos:start="205:48" pos:end="205:48">*</operator><name pos:start="205:49" pos:end="205:50">IQ</name></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="207:21" pos:end="207:32"><expr pos:start="207:21" pos:end="207:31"><name pos:start="207:21" pos:end="207:22">rd</name> <operator pos:start="207:24" pos:end="207:25">+=</operator> <name pos:start="207:27" pos:end="207:28">di</name><operator pos:start="207:29" pos:end="207:29">*</operator><name pos:start="207:30" pos:end="207:31">di</name></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="213:13" pos:end="213:39"><expr pos:start="213:13" pos:end="213:38"><name pos:start="213:13" pos:end="213:14">rd</name> <operator pos:start="213:16" pos:end="213:16">=</operator> <name pos:start="213:18" pos:end="213:19">rd</name> <operator pos:start="213:21" pos:end="213:21">*</operator> <name pos:start="213:23" pos:end="213:28">lambda</name> <operator pos:start="213:30" pos:end="213:30">+</operator> <name pos:start="213:32" pos:end="213:38">curbits</name></expr>;</expr_stmt>

            <if_stmt pos:start="215:13" pos:end="223:13"><if pos:start="215:13" pos:end="223:13">if <condition pos:start="215:16" pos:end="215:29">(<expr pos:start="215:17" pos:end="215:28"><name pos:start="215:17" pos:end="215:18">rd</name> <operator pos:start="215:20" pos:end="215:20">&lt;</operator> <name pos:start="215:22" pos:end="215:28">mincost</name></expr>)</condition> <block pos:start="215:31" pos:end="223:13">{<block_content pos:start="217:17" pos:end="221:34">

                <expr_stmt pos:start="217:17" pos:end="217:29"><expr pos:start="217:17" pos:end="217:28"><name pos:start="217:17" pos:end="217:23">mincost</name> <operator pos:start="217:25" pos:end="217:25">=</operator> <name pos:start="217:27" pos:end="217:28">rd</name></expr>;</expr_stmt>

                <expr_stmt pos:start="219:17" pos:end="219:33"><expr pos:start="219:17" pos:end="219:32"><name pos:start="219:17" pos:end="219:22">minidx</name>  <operator pos:start="219:25" pos:end="219:25">=</operator> <name pos:start="219:27" pos:end="219:32">curidx</name></expr>;</expr_stmt>

                <expr_stmt pos:start="221:17" pos:end="221:34"><expr pos:start="221:17" pos:end="221:33"><name pos:start="221:17" pos:end="221:23">minbits</name> <operator pos:start="221:25" pos:end="221:25">=</operator> <name pos:start="221:27" pos:end="221:33">curbits</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="227:9" pos:end="227:27"><expr pos:start="227:9" pos:end="227:26"><name pos:start="227:9" pos:end="227:12">cost</name>    <operator pos:start="227:17" pos:end="227:18">+=</operator> <name pos:start="227:20" pos:end="227:26">mincost</name></expr>;</expr_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:27"><expr pos:start="229:9" pos:end="229:26"><name pos:start="229:9" pos:end="229:15">resbits</name> <operator pos:start="229:17" pos:end="229:18">+=</operator> <name pos:start="229:20" pos:end="229:26">minbits</name></expr>;</expr_stmt>

        <if_stmt pos:start="231:9" pos:end="233:25"><if pos:start="231:9" pos:end="233:25">if <condition pos:start="231:12" pos:end="231:26">(<expr pos:start="231:13" pos:end="231:25"><name pos:start="231:13" pos:end="231:16">cost</name> <operator pos:start="231:18" pos:end="231:19">&gt;=</operator> <name pos:start="231:21" pos:end="231:25">uplim</name></expr>)</condition><block type="pseudo" pos:start="233:13" pos:end="233:25"><block_content pos:start="233:13" pos:end="233:25">

            <return pos:start="233:13" pos:end="233:25">return <expr pos:start="233:20" pos:end="233:24"><name pos:start="233:20" pos:end="233:24">uplim</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="235:9" pos:end="269:9"><if pos:start="235:9" pos:end="269:9">if <condition pos:start="235:12" pos:end="235:15">(<expr pos:start="235:13" pos:end="235:14"><name pos:start="235:13" pos:end="235:14">pb</name></expr>)</condition> <block pos:start="235:17" pos:end="269:9">{<block_content pos:start="237:9" pos:end="267:9">

        <expr_stmt pos:start="237:9" pos:end="237:94"><expr pos:start="237:9" pos:end="237:93"><call pos:start="237:9" pos:end="237:93"><name pos:start="237:9" pos:end="237:16">put_bits</name><argument_list pos:start="237:17" pos:end="237:93">(<argument pos:start="237:18" pos:end="237:19"><expr pos:start="237:18" pos:end="237:19"><name pos:start="237:18" pos:end="237:19">pb</name></expr></argument>, <argument pos:start="237:22" pos:end="237:55"><expr pos:start="237:22" pos:end="237:55"><name pos:start="237:22" pos:end="237:55"><name pos:start="237:22" pos:end="237:41">ff_aac_spectral_bits</name><index pos:start="237:42" pos:end="237:47">[<expr pos:start="237:43" pos:end="237:46"><name pos:start="237:43" pos:end="237:44">cb</name><operator pos:start="237:45" pos:end="237:45">-</operator><literal type="number" pos:start="237:46" pos:end="237:46">1</literal></expr>]</index><index pos:start="237:48" pos:end="237:55">[<expr pos:start="237:49" pos:end="237:54"><name pos:start="237:49" pos:end="237:54">minidx</name></expr>]</index></name></expr></argument>, <argument pos:start="237:58" pos:end="237:92"><expr pos:start="237:58" pos:end="237:92"><name pos:start="237:58" pos:end="237:92"><name pos:start="237:58" pos:end="237:78">ff_aac_spectral_codes</name><index pos:start="237:79" pos:end="237:84">[<expr pos:start="237:80" pos:end="237:83"><name pos:start="237:80" pos:end="237:81">cb</name><operator pos:start="237:82" pos:end="237:82">-</operator><literal type="number" pos:start="237:83" pos:end="237:83">1</literal></expr>]</index><index pos:start="237:85" pos:end="237:92">[<expr pos:start="237:86" pos:end="237:91"><name pos:start="237:86" pos:end="237:91">minidx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="239:9" pos:end="245:52"><if pos:start="239:9" pos:end="245:52">if <condition pos:start="239:12" pos:end="239:37">(<expr pos:start="239:13" pos:end="239:36"><call pos:start="239:13" pos:end="239:36"><name pos:start="239:13" pos:end="239:32">IS_CODEBOOK_UNSIGNED</name><argument_list pos:start="239:33" pos:end="239:36">(<argument pos:start="239:34" pos:end="239:35"><expr pos:start="239:34" pos:end="239:35"><name pos:start="239:34" pos:end="239:35">cb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="241:13" pos:end="245:52"><block_content pos:start="241:13" pos:end="245:52">

            <for pos:start="241:13" pos:end="245:52">for <control pos:start="241:17" pos:end="241:37">(<init pos:start="241:18" pos:end="241:23"><expr pos:start="241:18" pos:end="241:22"><name pos:start="241:18" pos:end="241:18">j</name> <operator pos:start="241:20" pos:end="241:20">=</operator> <literal type="number" pos:start="241:22" pos:end="241:22">0</literal></expr>;</init> <condition pos:start="241:25" pos:end="241:32"><expr pos:start="241:25" pos:end="241:31"><name pos:start="241:25" pos:end="241:25">j</name> <operator pos:start="241:27" pos:end="241:27">&lt;</operator> <name pos:start="241:29" pos:end="241:31">dim</name></expr>;</condition> <incr pos:start="241:34" pos:end="241:36"><expr pos:start="241:34" pos:end="241:36"><name pos:start="241:34" pos:end="241:34">j</name><operator pos:start="241:35" pos:end="241:36">++</operator></expr></incr>)</control><block type="pseudo" pos:start="243:17" pos:end="245:52"><block_content pos:start="243:17" pos:end="245:52">

                <if_stmt pos:start="243:17" pos:end="245:52"><if pos:start="243:17" pos:end="245:52">if <condition pos:start="243:20" pos:end="243:72">(<expr pos:start="243:21" pos:end="243:71"><name pos:start="243:21" pos:end="243:63"><name pos:start="243:21" pos:end="243:43">ff_aac_codebook_vectors</name><index pos:start="243:44" pos:end="243:49">[<expr pos:start="243:45" pos:end="243:48"><name pos:start="243:45" pos:end="243:46">cb</name><operator pos:start="243:47" pos:end="243:47">-</operator><literal type="number" pos:start="243:48" pos:end="243:48">1</literal></expr>]</index><index pos:start="243:50" pos:end="243:63">[<expr pos:start="243:51" pos:end="243:62"><name pos:start="243:51" pos:end="243:56">minidx</name><operator pos:start="243:57" pos:end="243:57">*</operator><name pos:start="243:58" pos:end="243:60">dim</name><operator pos:start="243:61" pos:end="243:61">+</operator><name pos:start="243:62" pos:end="243:62">j</name></expr>]</index></name> <operator pos:start="243:65" pos:end="243:66">!=</operator> <literal type="number" pos:start="243:68" pos:end="243:71">0.0f</literal></expr>)</condition><block type="pseudo" pos:start="245:21" pos:end="245:52"><block_content pos:start="245:21" pos:end="245:52">

                    <expr_stmt pos:start="245:21" pos:end="245:52"><expr pos:start="245:21" pos:end="245:51"><call pos:start="245:21" pos:end="245:51"><name pos:start="245:21" pos:end="245:28">put_bits</name><argument_list pos:start="245:29" pos:end="245:51">(<argument pos:start="245:30" pos:end="245:31"><expr pos:start="245:30" pos:end="245:31"><name pos:start="245:30" pos:end="245:31">pb</name></expr></argument>, <argument pos:start="245:34" pos:end="245:34"><expr pos:start="245:34" pos:end="245:34"><literal type="number" pos:start="245:34" pos:end="245:34">1</literal></expr></argument>, <argument pos:start="245:37" pos:end="245:50"><expr pos:start="245:37" pos:end="245:50"><name pos:start="245:37" pos:end="245:43"><name pos:start="245:37" pos:end="245:38">in</name><index pos:start="245:39" pos:end="245:43">[<expr pos:start="245:40" pos:end="245:42"><name pos:start="245:40" pos:end="245:40">i</name><operator pos:start="245:41" pos:end="245:41">+</operator><name pos:start="245:42" pos:end="245:42">j</name></expr>]</index></name> <operator pos:start="245:45" pos:end="245:45">&lt;</operator> <literal type="number" pos:start="245:47" pos:end="245:50">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>

        <if_stmt pos:start="247:9" pos:end="267:9"><if pos:start="247:9" pos:end="267:9">if <condition pos:start="247:12" pos:end="247:25">(<expr pos:start="247:13" pos:end="247:24"><name pos:start="247:13" pos:end="247:14">cb</name> <operator pos:start="247:16" pos:end="247:17">==</operator> <name pos:start="247:19" pos:end="247:24">ESC_BT</name></expr>)</condition> <block pos:start="247:27" pos:end="267:9">{<block_content pos:start="249:13" pos:end="265:13">

            <for pos:start="249:13" pos:end="265:13">for <control pos:start="249:17" pos:end="249:35">(<init pos:start="249:18" pos:end="249:23"><expr pos:start="249:18" pos:end="249:22"><name pos:start="249:18" pos:end="249:18">j</name> <operator pos:start="249:20" pos:end="249:20">=</operator> <literal type="number" pos:start="249:22" pos:end="249:22">0</literal></expr>;</init> <condition pos:start="249:25" pos:end="249:30"><expr pos:start="249:25" pos:end="249:29"><name pos:start="249:25" pos:end="249:25">j</name> <operator pos:start="249:27" pos:end="249:27">&lt;</operator> <literal type="number" pos:start="249:29" pos:end="249:29">2</literal></expr>;</condition> <incr pos:start="249:32" pos:end="249:34"><expr pos:start="249:32" pos:end="249:34"><name pos:start="249:32" pos:end="249:32">j</name><operator pos:start="249:33" pos:end="249:34">++</operator></expr></incr>)</control> <block pos:start="249:37" pos:end="265:13">{<block_content pos:start="251:17" pos:end="263:17">

                <if_stmt pos:start="251:17" pos:end="263:17"><if pos:start="251:17" pos:end="263:17">if <condition pos:start="251:20" pos:end="251:71">(<expr pos:start="251:21" pos:end="251:70"><name pos:start="251:21" pos:end="251:61"><name pos:start="251:21" pos:end="251:43">ff_aac_codebook_vectors</name><index pos:start="251:44" pos:end="251:49">[<expr pos:start="251:45" pos:end="251:48"><name pos:start="251:45" pos:end="251:46">cb</name><operator pos:start="251:47" pos:end="251:47">-</operator><literal type="number" pos:start="251:48" pos:end="251:48">1</literal></expr>]</index><index pos:start="251:50" pos:end="251:61">[<expr pos:start="251:51" pos:end="251:60"><name pos:start="251:51" pos:end="251:56">minidx</name><operator pos:start="251:57" pos:end="251:57">*</operator><literal type="number" pos:start="251:58" pos:end="251:58">2</literal><operator pos:start="251:59" pos:end="251:59">+</operator><name pos:start="251:60" pos:end="251:60">j</name></expr>]</index></name> <operator pos:start="251:63" pos:end="251:64">==</operator> <literal type="number" pos:start="251:66" pos:end="251:70">64.0f</literal></expr>)</condition> <block pos:start="251:73" pos:end="263:17">{<block_content pos:start="253:21" pos:end="261:63">

                    <decl_stmt pos:start="253:21" pos:end="253:74"><decl pos:start="253:21" pos:end="253:73"><type pos:start="253:21" pos:end="253:23"><name pos:start="253:21" pos:end="253:23">int</name></type> <name pos:start="253:25" pos:end="253:28">coef</name> <init pos:start="253:30" pos:end="253:73">= <expr pos:start="253:32" pos:end="253:73"><call pos:start="253:32" pos:end="253:73"><name pos:start="253:32" pos:end="253:38">av_clip</name><argument_list pos:start="253:39" pos:end="253:73">(<argument pos:start="253:40" pos:end="253:63"><expr pos:start="253:40" pos:end="253:63"><call pos:start="253:40" pos:end="253:63"><name pos:start="253:40" pos:end="253:44">quant</name><argument_list pos:start="253:45" pos:end="253:63">(<argument pos:start="253:46" pos:end="253:59"><expr pos:start="253:46" pos:end="253:59"><call pos:start="253:46" pos:end="253:59"><name pos:start="253:46" pos:end="253:50">fabsf</name><argument_list pos:start="253:51" pos:end="253:59">(<argument pos:start="253:52" pos:end="253:58"><expr pos:start="253:52" pos:end="253:58"><name pos:start="253:52" pos:end="253:58"><name pos:start="253:52" pos:end="253:53">in</name><index pos:start="253:54" pos:end="253:58">[<expr pos:start="253:55" pos:end="253:57"><name pos:start="253:55" pos:end="253:55">i</name><operator pos:start="253:56" pos:end="253:56">+</operator><name pos:start="253:57" pos:end="253:57">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="253:62" pos:end="253:62"><expr pos:start="253:62" pos:end="253:62"><name pos:start="253:62" pos:end="253:62">Q</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="253:66" pos:end="253:66"><expr pos:start="253:66" pos:end="253:66"><literal type="number" pos:start="253:66" pos:end="253:66">0</literal></expr></argument>, <argument pos:start="253:69" pos:end="253:72"><expr pos:start="253:69" pos:end="253:72"><literal type="number" pos:start="253:69" pos:end="253:72">8191</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="255:21" pos:end="255:44"><decl pos:start="255:21" pos:end="255:43"><type pos:start="255:21" pos:end="255:23"><name pos:start="255:21" pos:end="255:23">int</name></type> <name pos:start="255:25" pos:end="255:27">len</name> <init pos:start="255:29" pos:end="255:43">= <expr pos:start="255:31" pos:end="255:43"><call pos:start="255:31" pos:end="255:43"><name pos:start="255:31" pos:end="255:37">av_log2</name><argument_list pos:start="255:38" pos:end="255:43">(<argument pos:start="255:39" pos:end="255:42"><expr pos:start="255:39" pos:end="255:42"><name pos:start="255:39" pos:end="255:42">coef</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                    <expr_stmt pos:start="259:21" pos:end="259:72"><expr pos:start="259:21" pos:end="259:71"><call pos:start="259:21" pos:end="259:71"><name pos:start="259:21" pos:end="259:28">put_bits</name><argument_list pos:start="259:29" pos:end="259:71">(<argument pos:start="259:30" pos:end="259:31"><expr pos:start="259:30" pos:end="259:31"><name pos:start="259:30" pos:end="259:31">pb</name></expr></argument>, <argument pos:start="259:34" pos:end="259:44"><expr pos:start="259:34" pos:end="259:44"><name pos:start="259:34" pos:end="259:36">len</name> <operator pos:start="259:38" pos:end="259:38">-</operator> <literal type="number" pos:start="259:40" pos:end="259:42">4</literal> <operator pos:start="259:42" pos:end="259:42">+</operator> <literal type="number" pos:start="259:44" pos:end="259:44">1</literal></expr></argument>, <argument pos:start="259:47" pos:end="259:70"><expr pos:start="259:47" pos:end="259:70"><operator pos:start="259:47" pos:end="259:47">(</operator><literal type="number" pos:start="259:48" pos:end="259:48">1</literal> <operator pos:start="259:50" pos:end="259:51">&lt;&lt;</operator> <operator pos:start="259:53" pos:end="259:53">(</operator><name pos:start="259:54" pos:end="259:56">len</name> <operator pos:start="259:58" pos:end="259:58">-</operator> <literal type="number" pos:start="259:60" pos:end="259:62">4</literal> <operator pos:start="259:62" pos:end="259:62">+</operator> <literal type="number" pos:start="259:64" pos:end="259:64">1</literal><operator pos:start="259:65" pos:end="259:65">)</operator><operator pos:start="259:66" pos:end="259:66">)</operator> <operator pos:start="259:68" pos:end="259:68">-</operator> <literal type="number" pos:start="259:70" pos:end="259:70">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="261:21" pos:end="261:63"><expr pos:start="261:21" pos:end="261:62"><call pos:start="261:21" pos:end="261:62"><name pos:start="261:21" pos:end="261:28">put_bits</name><argument_list pos:start="261:29" pos:end="261:62">(<argument pos:start="261:30" pos:end="261:31"><expr pos:start="261:30" pos:end="261:31"><name pos:start="261:30" pos:end="261:31">pb</name></expr></argument>, <argument pos:start="261:34" pos:end="261:36"><expr pos:start="261:34" pos:end="261:36"><name pos:start="261:34" pos:end="261:36">len</name></expr></argument>, <argument pos:start="261:39" pos:end="261:61"><expr pos:start="261:39" pos:end="261:61"><name pos:start="261:39" pos:end="261:42">coef</name> <operator pos:start="261:44" pos:end="261:44">&amp;</operator> <operator pos:start="261:46" pos:end="261:46">(</operator><operator pos:start="261:47" pos:end="261:47">(</operator><literal type="number" pos:start="261:48" pos:end="261:48">1</literal> <operator pos:start="261:50" pos:end="261:51">&lt;&lt;</operator> <name pos:start="261:53" pos:end="261:55">len</name><operator pos:start="261:56" pos:end="261:56">)</operator> <operator pos:start="261:58" pos:end="261:58">-</operator> <literal type="number" pos:start="261:60" pos:end="261:60">1</literal><operator pos:start="261:61" pos:end="261:61">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="275:5" pos:end="277:24"><if pos:start="275:5" pos:end="277:24">if <condition pos:start="275:8" pos:end="275:13">(<expr pos:start="275:9" pos:end="275:12"><name pos:start="275:9" pos:end="275:12">bits</name></expr>)</condition><block type="pseudo" pos:start="277:9" pos:end="277:24"><block_content pos:start="277:9" pos:end="277:24">

        <expr_stmt pos:start="277:9" pos:end="277:24"><expr pos:start="277:9" pos:end="277:23"><operator pos:start="277:9" pos:end="277:9">*</operator><name pos:start="277:10" pos:end="277:13">bits</name> <operator pos:start="277:15" pos:end="277:15">=</operator> <name pos:start="277:17" pos:end="277:23">resbits</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="279:5" pos:end="279:16">return <expr pos:start="279:12" pos:end="279:15"><name pos:start="279:12" pos:end="279:15">cost</name></expr>;</return>

</block_content>}</block></for></block_content></block></function>
</unit>
