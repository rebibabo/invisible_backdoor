<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25679.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:11"><name pos:start="1:1" pos:end="1:9">PCIDevice</name> <modifier pos:start="1:11" pos:end="1:11">*</modifier></type><name pos:start="1:12" pos:end="1:25">pci_pcnet_init</name><parameter_list pos:start="1:26" pos:end="1:62">(<parameter pos:start="1:27" pos:end="1:37"><decl pos:start="1:27" pos:end="1:37"><type pos:start="1:27" pos:end="1:37"><name pos:start="1:27" pos:end="1:32">PCIBus</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:37">bus</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:50"><decl pos:start="1:40" pos:end="1:50"><type pos:start="1:40" pos:end="1:50"><name pos:start="1:40" pos:end="1:46">NICInfo</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:50">nd</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:61"><decl pos:start="1:53" pos:end="1:61"><type pos:start="1:53" pos:end="1:61"><name pos:start="1:53" pos:end="1:55">int</name></type> <name pos:start="1:57" pos:end="1:61">devfn</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="97:1">{<block_content pos:start="5:5" pos:end="95:26">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">PCNetState</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">d</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="18:0"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:21">pci_conf</name></decl>;</decl_stmt>



<cpp:if pos:start="11:1" pos:end="11:5">#<cpp:directive pos:start="11:2" pos:end="11:3">if</cpp:directive> <expr pos:start="11:5" pos:end="11:5"><literal type="number" pos:start="11:5" pos:end="11:5">0</literal></expr></cpp:if>

    printf("sizeof(RMD)=%d, sizeof(TMD)=%d\n",

        sizeof(struct pcnet_RMD), sizeof(struct pcnet_TMD));

<cpp:endif pos:start="17:1" pos:end="17:6">#<cpp:directive pos:start="17:2" pos:end="17:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="21:5" pos:end="23:61"><expr pos:start="21:5" pos:end="23:60"><name pos:start="21:5" pos:end="21:5">d</name> <operator pos:start="21:7" pos:end="21:7">=</operator> <operator pos:start="21:9" pos:end="21:9">(</operator><name pos:start="21:10" pos:end="21:19">PCNetState</name> <operator pos:start="21:21" pos:end="21:21">*</operator><operator pos:start="21:22" pos:end="21:22">)</operator><call pos:start="21:23" pos:end="23:60"><name pos:start="21:23" pos:end="21:41">pci_register_device</name><argument_list pos:start="21:42" pos:end="23:60">(<argument pos:start="21:43" pos:end="21:45"><expr pos:start="21:43" pos:end="21:45"><name pos:start="21:43" pos:end="21:45">bus</name></expr></argument>, <argument pos:start="21:48" pos:end="21:54"><expr pos:start="21:48" pos:end="21:54"><literal type="string" pos:start="21:48" pos:end="21:54">"PCNet"</literal></expr></argument>, <argument pos:start="21:57" pos:end="21:74"><expr pos:start="21:57" pos:end="21:74"><sizeof pos:start="21:57" pos:end="21:74">sizeof<argument_list pos:start="21:63" pos:end="21:74">(<argument pos:start="21:64" pos:end="21:73"><expr pos:start="21:64" pos:end="21:73"><name pos:start="21:64" pos:end="21:73">PCNetState</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                                          <argument pos:start="23:43" pos:end="23:47"><expr pos:start="23:43" pos:end="23:47"><name pos:start="23:43" pos:end="23:47">devfn</name></expr></argument>, <argument pos:start="23:50" pos:end="23:53"><expr pos:start="23:50" pos:end="23:53"><name pos:start="23:50" pos:end="23:53">NULL</name></expr></argument>, <argument pos:start="23:56" pos:end="23:59"><expr pos:start="23:56" pos:end="23:59"><name pos:start="23:56" pos:end="23:59">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:29"><expr pos:start="27:5" pos:end="27:28"><name pos:start="27:5" pos:end="27:12">pci_conf</name> <operator pos:start="27:14" pos:end="27:14">=</operator> <name pos:start="27:16" pos:end="27:28"><name pos:start="27:16" pos:end="27:16">d</name><operator pos:start="27:17" pos:end="27:18">-&gt;</operator><name pos:start="27:19" pos:end="27:21">dev</name><operator pos:start="27:22" pos:end="27:22">.</operator><name pos:start="27:23" pos:end="27:28">config</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:58"><expr pos:start="31:5" pos:end="31:57"><call pos:start="31:5" pos:end="31:57"><name pos:start="31:5" pos:end="31:28">pci_config_set_vendor_id</name><argument_list pos:start="31:29" pos:end="31:57">(<argument pos:start="31:30" pos:end="31:37"><expr pos:start="31:30" pos:end="31:37"><name pos:start="31:30" pos:end="31:37">pci_conf</name></expr></argument>, <argument pos:start="31:40" pos:end="31:56"><expr pos:start="31:40" pos:end="31:56"><name pos:start="31:40" pos:end="31:56">PCI_VENDOR_ID_AMD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:64"><expr pos:start="33:5" pos:end="33:63"><call pos:start="33:5" pos:end="33:63"><name pos:start="33:5" pos:end="33:28">pci_config_set_device_id</name><argument_list pos:start="33:29" pos:end="33:63">(<argument pos:start="33:30" pos:end="33:37"><expr pos:start="33:30" pos:end="33:37"><name pos:start="33:30" pos:end="33:37">pci_conf</name></expr></argument>, <argument pos:start="33:40" pos:end="33:62"><expr pos:start="33:40" pos:end="33:62"><name pos:start="33:40" pos:end="33:62">PCI_DEVICE_ID_AMD_LANCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:55"><expr pos:start="35:5" pos:end="35:54"><operator pos:start="35:5" pos:end="35:5">*</operator><operator pos:start="35:6" pos:end="35:6">(</operator><name pos:start="35:7" pos:end="35:14">uint16_t</name> <operator pos:start="35:16" pos:end="35:16">*</operator><operator pos:start="35:17" pos:end="35:17">)</operator><operator pos:start="35:18" pos:end="35:18">&amp;</operator><name pos:start="35:19" pos:end="35:32"><name pos:start="35:19" pos:end="35:26">pci_conf</name><index pos:start="35:27" pos:end="35:32">[<expr pos:start="35:28" pos:end="35:31"><literal type="number" pos:start="35:28" pos:end="35:31">0x04</literal></expr>]</index></name> <operator pos:start="35:34" pos:end="35:34">=</operator> <call pos:start="35:36" pos:end="35:54"><name pos:start="35:36" pos:end="35:46">cpu_to_le16</name><argument_list pos:start="35:47" pos:end="35:54">(<argument pos:start="35:48" pos:end="35:53"><expr pos:start="35:48" pos:end="35:53"><literal type="number" pos:start="35:48" pos:end="35:53">0x0007</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:55"><expr pos:start="37:5" pos:end="37:54"><operator pos:start="37:5" pos:end="37:5">*</operator><operator pos:start="37:6" pos:end="37:6">(</operator><name pos:start="37:7" pos:end="37:14">uint16_t</name> <operator pos:start="37:16" pos:end="37:16">*</operator><operator pos:start="37:17" pos:end="37:17">)</operator><operator pos:start="37:18" pos:end="37:18">&amp;</operator><name pos:start="37:19" pos:end="37:32"><name pos:start="37:19" pos:end="37:26">pci_conf</name><index pos:start="37:27" pos:end="37:32">[<expr pos:start="37:28" pos:end="37:31"><literal type="number" pos:start="37:28" pos:end="37:31">0x06</literal></expr>]</index></name> <operator pos:start="37:34" pos:end="37:34">=</operator> <call pos:start="37:36" pos:end="37:54"><name pos:start="37:36" pos:end="37:46">cpu_to_le16</name><argument_list pos:start="37:47" pos:end="37:54">(<argument pos:start="37:48" pos:end="37:53"><expr pos:start="37:48" pos:end="37:53"><literal type="number" pos:start="37:48" pos:end="37:53">0x0280</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:26"><expr pos:start="39:5" pos:end="39:25"><name pos:start="39:5" pos:end="39:18"><name pos:start="39:5" pos:end="39:12">pci_conf</name><index pos:start="39:13" pos:end="39:18">[<expr pos:start="39:14" pos:end="39:17"><literal type="number" pos:start="39:14" pos:end="39:17">0x08</literal></expr>]</index></name> <operator pos:start="39:20" pos:end="39:20">=</operator> <literal type="number" pos:start="39:22" pos:end="39:25">0x10</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:26"><expr pos:start="41:5" pos:end="41:25"><name pos:start="41:5" pos:end="41:18"><name pos:start="41:5" pos:end="41:12">pci_conf</name><index pos:start="41:13" pos:end="41:18">[<expr pos:start="41:14" pos:end="41:17"><literal type="number" pos:start="41:14" pos:end="41:17">0x09</literal></expr>]</index></name> <operator pos:start="41:20" pos:end="41:20">=</operator> <literal type="number" pos:start="41:22" pos:end="41:25">0x00</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:63"><expr pos:start="43:5" pos:end="43:62"><call pos:start="43:5" pos:end="43:62"><name pos:start="43:5" pos:end="43:24">pci_config_set_class</name><argument_list pos:start="43:25" pos:end="43:62">(<argument pos:start="43:26" pos:end="43:33"><expr pos:start="43:26" pos:end="43:33"><name pos:start="43:26" pos:end="43:33">pci_conf</name></expr></argument>, <argument pos:start="43:36" pos:end="43:61"><expr pos:start="43:36" pos:end="43:61"><name pos:start="43:36" pos:end="43:61">PCI_CLASS_NETWORK_ETHERNET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:26"><expr pos:start="45:5" pos:end="45:25"><name pos:start="45:5" pos:end="45:18"><name pos:start="45:5" pos:end="45:12">pci_conf</name><index pos:start="45:13" pos:end="45:18">[<expr pos:start="45:14" pos:end="45:17"><literal type="number" pos:start="45:14" pos:end="45:17">0x0e</literal></expr>]</index></name> <operator pos:start="45:20" pos:end="45:20">=</operator> <literal type="number" pos:start="45:22" pos:end="45:25">0x00</literal></expr>;</expr_stmt> <comment type="line" pos:start="45:28" pos:end="45:41">// header_type</comment>



    <expr_stmt pos:start="49:5" pos:end="49:59"><expr pos:start="49:5" pos:end="49:58"><operator pos:start="49:5" pos:end="49:5">*</operator><operator pos:start="49:6" pos:end="49:6">(</operator><name pos:start="49:7" pos:end="49:14">uint32_t</name> <operator pos:start="49:16" pos:end="49:16">*</operator><operator pos:start="49:17" pos:end="49:17">)</operator><operator pos:start="49:18" pos:end="49:18">&amp;</operator><name pos:start="49:19" pos:end="49:32"><name pos:start="49:19" pos:end="49:26">pci_conf</name><index pos:start="49:27" pos:end="49:32">[<expr pos:start="49:28" pos:end="49:31"><literal type="number" pos:start="49:28" pos:end="49:31">0x10</literal></expr>]</index></name> <operator pos:start="49:34" pos:end="49:34">=</operator> <call pos:start="49:36" pos:end="49:58"><name pos:start="49:36" pos:end="49:46">cpu_to_le32</name><argument_list pos:start="49:47" pos:end="49:58">(<argument pos:start="49:48" pos:end="49:57"><expr pos:start="49:48" pos:end="49:57"><literal type="number" pos:start="49:48" pos:end="49:57">0x00000001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:59"><expr pos:start="51:5" pos:end="51:58"><operator pos:start="51:5" pos:end="51:5">*</operator><operator pos:start="51:6" pos:end="51:6">(</operator><name pos:start="51:7" pos:end="51:14">uint32_t</name> <operator pos:start="51:16" pos:end="51:16">*</operator><operator pos:start="51:17" pos:end="51:17">)</operator><operator pos:start="51:18" pos:end="51:18">&amp;</operator><name pos:start="51:19" pos:end="51:32"><name pos:start="51:19" pos:end="51:26">pci_conf</name><index pos:start="51:27" pos:end="51:32">[<expr pos:start="51:28" pos:end="51:31"><literal type="number" pos:start="51:28" pos:end="51:31">0x14</literal></expr>]</index></name> <operator pos:start="51:34" pos:end="51:34">=</operator> <call pos:start="51:36" pos:end="51:58"><name pos:start="51:36" pos:end="51:46">cpu_to_le32</name><argument_list pos:start="51:47" pos:end="51:58">(<argument pos:start="51:48" pos:end="51:57"><expr pos:start="51:48" pos:end="51:57"><literal type="number" pos:start="51:48" pos:end="51:57">0x00000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:23"><expr pos:start="55:5" pos:end="55:22"><name pos:start="55:5" pos:end="55:18"><name pos:start="55:5" pos:end="55:12">pci_conf</name><index pos:start="55:13" pos:end="55:18">[<expr pos:start="55:14" pos:end="55:17"><literal type="number" pos:start="55:14" pos:end="55:17">0x3d</literal></expr>]</index></name> <operator pos:start="55:20" pos:end="55:20">=</operator> <literal type="number" pos:start="55:22" pos:end="55:22">1</literal></expr>;</expr_stmt> <comment type="line" pos:start="55:25" pos:end="55:42">// interrupt pin 0</comment>

    <expr_stmt pos:start="57:5" pos:end="57:26"><expr pos:start="57:5" pos:end="57:25"><name pos:start="57:5" pos:end="57:18"><name pos:start="57:5" pos:end="57:12">pci_conf</name><index pos:start="57:13" pos:end="57:18">[<expr pos:start="57:14" pos:end="57:17"><literal type="number" pos:start="57:14" pos:end="57:17">0x3e</literal></expr>]</index></name> <operator pos:start="57:20" pos:end="57:20">=</operator> <literal type="number" pos:start="57:22" pos:end="57:25">0x06</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:26"><expr pos:start="59:5" pos:end="59:25"><name pos:start="59:5" pos:end="59:18"><name pos:start="59:5" pos:end="59:12">pci_conf</name><index pos:start="59:13" pos:end="59:18">[<expr pos:start="59:14" pos:end="59:17"><literal type="number" pos:start="59:14" pos:end="59:17">0x3f</literal></expr>]</index></name> <operator pos:start="59:20" pos:end="59:20">=</operator> <literal type="number" pos:start="59:22" pos:end="59:25">0xff</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="63:5" pos:end="63:39">/* Handler for memory-mapped I/O */</comment>

    <expr_stmt pos:start="65:5" pos:end="67:70"><expr pos:start="65:5" pos:end="67:69"><name pos:start="65:5" pos:end="65:17"><name pos:start="65:5" pos:end="65:5">d</name><operator pos:start="65:6" pos:end="65:7">-&gt;</operator><name pos:start="65:8" pos:end="65:17">mmio_index</name></name> <operator pos:start="65:19" pos:end="65:19">=</operator>

      <call pos:start="67:7" pos:end="67:69"><name pos:start="67:7" pos:end="67:28">cpu_register_io_memory</name><argument_list pos:start="67:29" pos:end="67:69">(<argument pos:start="67:30" pos:end="67:30"><expr pos:start="67:30" pos:end="67:30"><literal type="number" pos:start="67:30" pos:end="67:30">0</literal></expr></argument>, <argument pos:start="67:33" pos:end="67:47"><expr pos:start="67:33" pos:end="67:47"><name pos:start="67:33" pos:end="67:47">pcnet_mmio_read</name></expr></argument>, <argument pos:start="67:50" pos:end="67:65"><expr pos:start="67:50" pos:end="67:65"><name pos:start="67:50" pos:end="67:65">pcnet_mmio_write</name></expr></argument>, <argument pos:start="67:68" pos:end="67:68"><expr pos:start="67:68" pos:end="67:68"><name pos:start="67:68" pos:end="67:68">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="71:5" pos:end="73:67"><expr pos:start="71:5" pos:end="73:66"><call pos:start="71:5" pos:end="73:66"><name pos:start="71:5" pos:end="71:26">pci_register_io_region</name><argument_list pos:start="71:27" pos:end="73:66">(<argument pos:start="71:28" pos:end="71:41"><expr pos:start="71:28" pos:end="71:41"><operator pos:start="71:28" pos:end="71:28">(</operator><name pos:start="71:29" pos:end="71:37">PCIDevice</name> <operator pos:start="71:39" pos:end="71:39">*</operator><operator pos:start="71:40" pos:end="71:40">)</operator><name pos:start="71:41" pos:end="71:41">d</name></expr></argument>, <argument pos:start="71:44" pos:end="71:44"><expr pos:start="71:44" pos:end="71:44"><literal type="number" pos:start="71:44" pos:end="71:44">0</literal></expr></argument>, <argument pos:start="71:47" pos:end="71:63"><expr pos:start="71:47" pos:end="71:63"><name pos:start="71:47" pos:end="71:63">PCNET_IOPORT_SIZE</name></expr></argument>,

                           <argument pos:start="73:28" pos:end="73:47"><expr pos:start="73:28" pos:end="73:47"><name pos:start="73:28" pos:end="73:47">PCI_ADDRESS_SPACE_IO</name></expr></argument>, <argument pos:start="73:50" pos:end="73:65"><expr pos:start="73:50" pos:end="73:65"><name pos:start="73:50" pos:end="73:65">pcnet_ioport_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="77:5" pos:end="79:66"><expr pos:start="77:5" pos:end="79:65"><call pos:start="77:5" pos:end="79:65"><name pos:start="77:5" pos:end="77:26">pci_register_io_region</name><argument_list pos:start="77:27" pos:end="79:65">(<argument pos:start="77:28" pos:end="77:41"><expr pos:start="77:28" pos:end="77:41"><operator pos:start="77:28" pos:end="77:28">(</operator><name pos:start="77:29" pos:end="77:37">PCIDevice</name> <operator pos:start="77:39" pos:end="77:39">*</operator><operator pos:start="77:40" pos:end="77:40">)</operator><name pos:start="77:41" pos:end="77:41">d</name></expr></argument>, <argument pos:start="77:44" pos:end="77:44"><expr pos:start="77:44" pos:end="77:44"><literal type="number" pos:start="77:44" pos:end="77:44">1</literal></expr></argument>, <argument pos:start="77:47" pos:end="77:64"><expr pos:start="77:47" pos:end="77:64"><name pos:start="77:47" pos:end="77:64">PCNET_PNPMMIO_SIZE</name></expr></argument>,

                           <argument pos:start="79:28" pos:end="79:48"><expr pos:start="79:28" pos:end="79:48"><name pos:start="79:28" pos:end="79:48">PCI_ADDRESS_SPACE_MEM</name></expr></argument>, <argument pos:start="79:51" pos:end="79:64"><expr pos:start="79:51" pos:end="79:64"><name pos:start="79:51" pos:end="79:64">pcnet_mmio_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:27"><expr pos:start="83:5" pos:end="83:26"><name pos:start="83:5" pos:end="83:10"><name pos:start="83:5" pos:end="83:5">d</name><operator pos:start="83:6" pos:end="83:7">-&gt;</operator><name pos:start="83:8" pos:end="83:10">irq</name></name> <operator pos:start="83:12" pos:end="83:12">=</operator> <name pos:start="83:14" pos:end="83:26"><name pos:start="83:14" pos:end="83:14">d</name><operator pos:start="83:15" pos:end="83:16">-&gt;</operator><name pos:start="83:17" pos:end="83:19">dev</name><operator pos:start="83:20" pos:end="83:20">.</operator><name pos:start="83:21" pos:end="83:23">irq</name><index pos:start="83:24" pos:end="83:26">[<expr pos:start="83:25" pos:end="83:25"><literal type="number" pos:start="83:25" pos:end="83:25">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:48"><expr pos:start="85:5" pos:end="85:47"><name pos:start="85:5" pos:end="85:20"><name pos:start="85:5" pos:end="85:5">d</name><operator pos:start="85:6" pos:end="85:7">-&gt;</operator><name pos:start="85:8" pos:end="85:20">phys_mem_read</name></name> <operator pos:start="85:22" pos:end="85:22">=</operator> <name pos:start="85:24" pos:end="85:47">pci_physical_memory_read</name></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:50"><expr pos:start="87:5" pos:end="87:49"><name pos:start="87:5" pos:end="87:21"><name pos:start="87:5" pos:end="87:5">d</name><operator pos:start="87:6" pos:end="87:7">-&gt;</operator><name pos:start="87:8" pos:end="87:21">phys_mem_write</name></name> <operator pos:start="87:23" pos:end="87:23">=</operator> <name pos:start="87:25" pos:end="87:49">pci_physical_memory_write</name></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:25"><expr pos:start="89:5" pos:end="89:24"><name pos:start="89:5" pos:end="89:14"><name pos:start="89:5" pos:end="89:5">d</name><operator pos:start="89:6" pos:end="89:7">-&gt;</operator><name pos:start="89:8" pos:end="89:14">pci_dev</name></name> <operator pos:start="89:16" pos:end="89:16">=</operator> <operator pos:start="89:18" pos:end="89:18">&amp;</operator><name pos:start="89:19" pos:end="89:24"><name pos:start="89:19" pos:end="89:19">d</name><operator pos:start="89:20" pos:end="89:21">-&gt;</operator><name pos:start="89:22" pos:end="89:24">dev</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:29"><expr pos:start="93:5" pos:end="93:28"><call pos:start="93:5" pos:end="93:28"><name pos:start="93:5" pos:end="93:21">pcnet_common_init</name><argument_list pos:start="93:22" pos:end="93:28">(<argument pos:start="93:23" pos:end="93:23"><expr pos:start="93:23" pos:end="93:23"><name pos:start="93:23" pos:end="93:23">d</name></expr></argument>, <argument pos:start="93:26" pos:end="93:27"><expr pos:start="93:26" pos:end="93:27"><name pos:start="93:26" pos:end="93:27">nd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="95:5" pos:end="95:26">return <expr pos:start="95:12" pos:end="95:25"><operator pos:start="95:12" pos:end="95:12">(</operator><name pos:start="95:13" pos:end="95:21">PCIDevice</name> <operator pos:start="95:23" pos:end="95:23">*</operator><operator pos:start="95:24" pos:end="95:24">)</operator><name pos:start="95:25" pos:end="95:25">d</name></expr>;</return>

</block_content>}</block></function>
</unit>
