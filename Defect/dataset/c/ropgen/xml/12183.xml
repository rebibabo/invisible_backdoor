<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12183.c" pos:tabs="8"><function pos:start="1:1" pos:end="149:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">submit_packet</name><parameter_list pos:start="1:25" pos:end="1:62">(<parameter pos:start="1:26" pos:end="1:44"><decl pos:start="1:26" pos:end="1:44"><type pos:start="1:26" pos:end="1:44"><name pos:start="1:26" pos:end="1:41">PerThreadContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:44">p</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:61"><decl pos:start="1:47" pos:end="1:61"><type pos:start="1:47" pos:end="1:61"><name pos:start="1:47" pos:end="1:54">AVPacket</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:61">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="149:1">{<block_content pos:start="5:5" pos:end="147:13">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:24"><name pos:start="5:5" pos:end="5:22">FrameThreadContext</name> <modifier pos:start="5:24" pos:end="5:24">*</modifier></type><name pos:start="5:25" pos:end="5:28">fctx</name> <init pos:start="5:30" pos:end="5:40">= <expr pos:start="5:32" pos:end="5:40"><name pos:start="5:32" pos:end="5:40"><name pos:start="5:32" pos:end="5:32">p</name><operator pos:start="5:33" pos:end="5:34">-&gt;</operator><name pos:start="5:35" pos:end="5:40">parent</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:54"><decl pos:start="7:5" pos:end="7:53"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">PerThreadContext</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:33">prev_thread</name> <init pos:start="7:35" pos:end="7:53">= <expr pos:start="7:37" pos:end="7:53"><name pos:start="7:37" pos:end="7:53"><name pos:start="7:37" pos:end="7:40">fctx</name><operator pos:start="7:41" pos:end="7:42">-&gt;</operator><name pos:start="7:43" pos:end="7:53">prev_thread</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:43"><decl pos:start="9:5" pos:end="9:42"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">AVCodec</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:24">codec</name> <init pos:start="9:26" pos:end="9:42">= <expr pos:start="9:28" pos:end="9:42"><name pos:start="9:28" pos:end="9:42"><name pos:start="9:28" pos:end="9:28">p</name><operator pos:start="9:29" pos:end="9:30">-&gt;</operator><name pos:start="9:31" pos:end="9:35">avctx</name><operator pos:start="9:36" pos:end="9:37">-&gt;</operator><name pos:start="9:38" pos:end="9:42">codec</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="15:17"><if pos:start="13:5" pos:end="15:17">if <condition pos:start="13:8" pos:end="13:68">(<expr pos:start="13:9" pos:end="13:67"><operator pos:start="13:9" pos:end="13:9">!</operator><name pos:start="13:10" pos:end="13:20"><name pos:start="13:10" pos:end="13:14">avpkt</name><operator pos:start="13:15" pos:end="13:16">-&gt;</operator><name pos:start="13:17" pos:end="13:20">size</name></name> <operator pos:start="13:22" pos:end="13:23">&amp;&amp;</operator> <operator pos:start="13:25" pos:end="13:25">!</operator><operator pos:start="13:26" pos:end="13:26">(</operator><name pos:start="13:27" pos:end="13:45"><name pos:start="13:27" pos:end="13:31">codec</name><operator pos:start="13:32" pos:end="13:33">-&gt;</operator><name pos:start="13:34" pos:end="13:45">capabilities</name></name> <operator pos:start="13:47" pos:end="13:47">&amp;</operator> <name pos:start="13:49" pos:end="13:66">AV_CODEC_CAP_DELAY</name><operator pos:start="13:67" pos:end="13:67">)</operator></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:17"><block_content pos:start="15:9" pos:end="15:17">

        <return pos:start="15:9" pos:end="15:17">return <expr pos:start="15:16" pos:end="15:16"><literal type="number" pos:start="15:16" pos:end="15:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:34"><expr pos:start="19:5" pos:end="19:33"><call pos:start="19:5" pos:end="19:33"><name pos:start="19:5" pos:end="19:22">pthread_mutex_lock</name><argument_list pos:start="19:23" pos:end="19:33">(<argument pos:start="19:24" pos:end="19:32"><expr pos:start="19:24" pos:end="19:32"><operator pos:start="19:24" pos:end="19:24">&amp;</operator><name pos:start="19:25" pos:end="19:32"><name pos:start="19:25" pos:end="19:25">p</name><operator pos:start="19:26" pos:end="19:27">-&gt;</operator><name pos:start="19:28" pos:end="19:32">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:31"><expr pos:start="23:5" pos:end="23:30"><call pos:start="23:5" pos:end="23:30"><name pos:start="23:5" pos:end="23:27">release_delayed_buffers</name><argument_list pos:start="23:28" pos:end="23:30">(<argument pos:start="23:29" pos:end="23:29"><expr pos:start="23:29" pos:end="23:29"><name pos:start="23:29" pos:end="23:29">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="55:5"><if pos:start="27:5" pos:end="55:5">if <condition pos:start="27:8" pos:end="27:20">(<expr pos:start="27:9" pos:end="27:19"><name pos:start="27:9" pos:end="27:19">prev_thread</name></expr>)</condition> <block pos:start="27:22" pos:end="55:5">{<block_content pos:start="29:9" pos:end="53:9">

        <decl_stmt pos:start="29:9" pos:end="29:16"><decl pos:start="29:9" pos:end="29:15"><type pos:start="29:9" pos:end="29:11"><name pos:start="29:9" pos:end="29:11">int</name></type> <name pos:start="29:13" pos:end="29:15">err</name></decl>;</decl_stmt>

        <if_stmt pos:start="31:9" pos:end="41:9"><if pos:start="31:9" pos:end="41:9">if <condition pos:start="31:12" pos:end="31:51">(<expr pos:start="31:13" pos:end="31:50"><name pos:start="31:13" pos:end="31:30"><name pos:start="31:13" pos:end="31:23">prev_thread</name><operator pos:start="31:24" pos:end="31:25">-&gt;</operator><name pos:start="31:26" pos:end="31:30">state</name></name> <operator pos:start="31:32" pos:end="31:33">==</operator> <name pos:start="31:35" pos:end="31:50">STATE_SETTING_UP</name></expr>)</condition> <block pos:start="31:53" pos:end="41:9">{<block_content pos:start="33:13" pos:end="39:63">

            <expr_stmt pos:start="33:13" pos:end="33:61"><expr pos:start="33:13" pos:end="33:60"><call pos:start="33:13" pos:end="33:60"><name pos:start="33:13" pos:end="33:30">pthread_mutex_lock</name><argument_list pos:start="33:31" pos:end="33:60">(<argument pos:start="33:32" pos:end="33:59"><expr pos:start="33:32" pos:end="33:59"><operator pos:start="33:32" pos:end="33:32">&amp;</operator><name pos:start="33:33" pos:end="33:59"><name pos:start="33:33" pos:end="33:43">prev_thread</name><operator pos:start="33:44" pos:end="33:45">-&gt;</operator><name pos:start="33:46" pos:end="33:59">progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <while pos:start="35:13" pos:end="37:93">while <condition pos:start="35:19" pos:end="35:58">(<expr pos:start="35:20" pos:end="35:57"><name pos:start="35:20" pos:end="35:37"><name pos:start="35:20" pos:end="35:30">prev_thread</name><operator pos:start="35:31" pos:end="35:32">-&gt;</operator><name pos:start="35:33" pos:end="35:37">state</name></name> <operator pos:start="35:39" pos:end="35:40">==</operator> <name pos:start="35:42" pos:end="35:57">STATE_SETTING_UP</name></expr>)</condition><block type="pseudo" pos:start="37:17" pos:end="37:93"><block_content pos:start="37:17" pos:end="37:93">

                <expr_stmt pos:start="37:17" pos:end="37:93"><expr pos:start="37:17" pos:end="37:92"><call pos:start="37:17" pos:end="37:92"><name pos:start="37:17" pos:end="37:33">pthread_cond_wait</name><argument_list pos:start="37:34" pos:end="37:92">(<argument pos:start="37:35" pos:end="37:61"><expr pos:start="37:35" pos:end="37:61"><operator pos:start="37:35" pos:end="37:35">&amp;</operator><name pos:start="37:36" pos:end="37:61"><name pos:start="37:36" pos:end="37:46">prev_thread</name><operator pos:start="37:47" pos:end="37:48">-&gt;</operator><name pos:start="37:49" pos:end="37:61">progress_cond</name></name></expr></argument>, <argument pos:start="37:64" pos:end="37:91"><expr pos:start="37:64" pos:end="37:91"><operator pos:start="37:64" pos:end="37:64">&amp;</operator><name pos:start="37:65" pos:end="37:91"><name pos:start="37:65" pos:end="37:75">prev_thread</name><operator pos:start="37:76" pos:end="37:77">-&gt;</operator><name pos:start="37:78" pos:end="37:91">progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

            <expr_stmt pos:start="39:13" pos:end="39:63"><expr pos:start="39:13" pos:end="39:62"><call pos:start="39:13" pos:end="39:62"><name pos:start="39:13" pos:end="39:32">pthread_mutex_unlock</name><argument_list pos:start="39:33" pos:end="39:62">(<argument pos:start="39:34" pos:end="39:61"><expr pos:start="39:34" pos:end="39:61"><operator pos:start="39:34" pos:end="39:34">&amp;</operator><name pos:start="39:35" pos:end="39:61"><name pos:start="39:35" pos:end="39:45">prev_thread</name><operator pos:start="39:46" pos:end="39:47">-&gt;</operator><name pos:start="39:48" pos:end="39:61">progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="45:9" pos:end="45:74"><expr pos:start="45:9" pos:end="45:73"><name pos:start="45:9" pos:end="45:11">err</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <call pos:start="45:15" pos:end="45:73"><name pos:start="45:15" pos:end="45:40">update_context_from_thread</name><argument_list pos:start="45:41" pos:end="45:73">(<argument pos:start="45:42" pos:end="45:49"><expr pos:start="45:42" pos:end="45:49"><name pos:start="45:42" pos:end="45:49"><name pos:start="45:42" pos:end="45:42">p</name><operator pos:start="45:43" pos:end="45:44">-&gt;</operator><name pos:start="45:45" pos:end="45:49">avctx</name></name></expr></argument>, <argument pos:start="45:52" pos:end="45:69"><expr pos:start="45:52" pos:end="45:69"><name pos:start="45:52" pos:end="45:69"><name pos:start="45:52" pos:end="45:62">prev_thread</name><operator pos:start="45:63" pos:end="45:64">-&gt;</operator><name pos:start="45:65" pos:end="45:69">avctx</name></name></expr></argument>, <argument pos:start="45:72" pos:end="45:72"><expr pos:start="45:72" pos:end="45:72"><literal type="number" pos:start="45:72" pos:end="45:72">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="47:9" pos:end="53:9"><if pos:start="47:9" pos:end="53:9">if <condition pos:start="47:12" pos:end="47:16">(<expr pos:start="47:13" pos:end="47:15"><name pos:start="47:13" pos:end="47:15">err</name></expr>)</condition> <block pos:start="47:18" pos:end="53:9">{<block_content pos:start="49:13" pos:end="51:23">

            <expr_stmt pos:start="49:13" pos:end="49:44"><expr pos:start="49:13" pos:end="49:43"><call pos:start="49:13" pos:end="49:43"><name pos:start="49:13" pos:end="49:32">pthread_mutex_unlock</name><argument_list pos:start="49:33" pos:end="49:43">(<argument pos:start="49:34" pos:end="49:42"><expr pos:start="49:34" pos:end="49:42"><operator pos:start="49:34" pos:end="49:34">&amp;</operator><name pos:start="49:35" pos:end="49:42"><name pos:start="49:35" pos:end="49:35">p</name><operator pos:start="49:36" pos:end="49:37">-&gt;</operator><name pos:start="49:38" pos:end="49:42">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="51:13" pos:end="51:23">return <expr pos:start="51:20" pos:end="51:22"><name pos:start="51:20" pos:end="51:22">err</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:31"><expr pos:start="59:5" pos:end="59:30"><call pos:start="59:5" pos:end="59:30"><name pos:start="59:5" pos:end="59:19">av_packet_unref</name><argument_list pos:start="59:20" pos:end="59:30">(<argument pos:start="59:21" pos:end="59:29"><expr pos:start="59:21" pos:end="59:29"><operator pos:start="59:21" pos:end="59:21">&amp;</operator><name pos:start="59:22" pos:end="59:29"><name pos:start="59:22" pos:end="59:22">p</name><operator pos:start="59:23" pos:end="59:24">-&gt;</operator><name pos:start="59:25" pos:end="59:29">avpkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:36"><expr pos:start="61:5" pos:end="61:35"><call pos:start="61:5" pos:end="61:35"><name pos:start="61:5" pos:end="61:17">av_packet_ref</name><argument_list pos:start="61:18" pos:end="61:35">(<argument pos:start="61:19" pos:end="61:27"><expr pos:start="61:19" pos:end="61:27"><operator pos:start="61:19" pos:end="61:19">&amp;</operator><name pos:start="61:20" pos:end="61:27"><name pos:start="61:20" pos:end="61:20">p</name><operator pos:start="61:21" pos:end="61:22">-&gt;</operator><name pos:start="61:23" pos:end="61:27">avpkt</name></name></expr></argument>, <argument pos:start="61:30" pos:end="61:34"><expr pos:start="61:30" pos:end="61:34"><name pos:start="61:30" pos:end="61:34">avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:32"><expr pos:start="65:5" pos:end="65:31"><name pos:start="65:5" pos:end="65:12"><name pos:start="65:5" pos:end="65:5">p</name><operator pos:start="65:6" pos:end="65:7">-&gt;</operator><name pos:start="65:8" pos:end="65:12">state</name></name> <operator pos:start="65:14" pos:end="65:14">=</operator> <name pos:start="65:16" pos:end="65:31">STATE_SETTING_UP</name></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:40"><expr pos:start="67:5" pos:end="67:39"><call pos:start="67:5" pos:end="67:39"><name pos:start="67:5" pos:end="67:23">pthread_cond_signal</name><argument_list pos:start="67:24" pos:end="67:39">(<argument pos:start="67:25" pos:end="67:38"><expr pos:start="67:25" pos:end="67:38"><operator pos:start="67:25" pos:end="67:25">&amp;</operator><name pos:start="67:26" pos:end="67:38"><name pos:start="67:26" pos:end="67:26">p</name><operator pos:start="67:27" pos:end="67:28">-&gt;</operator><name pos:start="67:29" pos:end="67:38">input_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:36"><expr pos:start="69:5" pos:end="69:35"><call pos:start="69:5" pos:end="69:35"><name pos:start="69:5" pos:end="69:24">pthread_mutex_unlock</name><argument_list pos:start="69:25" pos:end="69:35">(<argument pos:start="69:26" pos:end="69:34"><expr pos:start="69:26" pos:end="69:34"><operator pos:start="69:26" pos:end="69:26">&amp;</operator><name pos:start="69:27" pos:end="69:34"><name pos:start="69:27" pos:end="69:27">p</name><operator pos:start="69:28" pos:end="69:29">-&gt;</operator><name pos:start="69:30" pos:end="69:34">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="73:5" pos:end="81:7">/*

     * If the client doesn't have a thread-safe get_buffer(),

     * then decoding threads call back to the main thread,

     * and it calls back to the client here.

     */</comment>



    <if_stmt pos:start="85:5" pos:end="137:5"><if pos:start="85:5" pos:end="137:5">if <condition pos:start="85:8" pos:end="89:63">(<expr pos:start="85:9" pos:end="89:62"><operator pos:start="85:9" pos:end="85:9">!</operator><name pos:start="85:10" pos:end="85:40"><name pos:start="85:10" pos:end="85:10">p</name><operator pos:start="85:11" pos:end="85:12">-&gt;</operator><name pos:start="85:13" pos:end="85:17">avctx</name><operator pos:start="85:18" pos:end="85:19">-&gt;</operator><name pos:start="85:20" pos:end="85:40">thread_safe_callbacks</name></name> <operator pos:start="85:42" pos:end="85:43">&amp;&amp;</operator> <operator pos:start="85:45" pos:end="85:45">(</operator>

         <name pos:start="87:10" pos:end="87:29"><name pos:start="87:10" pos:end="87:10">p</name><operator pos:start="87:11" pos:end="87:12">-&gt;</operator><name pos:start="87:13" pos:end="87:17">avctx</name><operator pos:start="87:18" pos:end="87:19">-&gt;</operator><name pos:start="87:20" pos:end="87:29">get_format</name></name> <operator pos:start="87:31" pos:end="87:32">!=</operator> <name pos:start="87:34" pos:end="87:59">avcodec_default_get_format</name> <operator pos:start="87:61" pos:end="87:62">||</operator>

         <name pos:start="89:10" pos:end="89:30"><name pos:start="89:10" pos:end="89:10">p</name><operator pos:start="89:11" pos:end="89:12">-&gt;</operator><name pos:start="89:13" pos:end="89:17">avctx</name><operator pos:start="89:18" pos:end="89:19">-&gt;</operator><name pos:start="89:20" pos:end="89:30">get_buffer2</name></name> <operator pos:start="89:32" pos:end="89:33">!=</operator> <name pos:start="89:35" pos:end="89:61">avcodec_default_get_buffer2</name><operator pos:start="89:62" pos:end="89:62">)</operator></expr>)</condition> <block pos:start="89:65" pos:end="137:5">{<block_content pos:start="91:9" pos:end="135:9">

        <while pos:start="91:9" pos:end="135:9">while <condition pos:start="91:15" pos:end="91:81">(<expr pos:start="91:16" pos:end="91:80"><name pos:start="91:16" pos:end="91:23"><name pos:start="91:16" pos:end="91:16">p</name><operator pos:start="91:17" pos:end="91:18">-&gt;</operator><name pos:start="91:19" pos:end="91:23">state</name></name> <operator pos:start="91:25" pos:end="91:26">!=</operator> <name pos:start="91:28" pos:end="91:47">STATE_SETUP_FINISHED</name> <operator pos:start="91:49" pos:end="91:50">&amp;&amp;</operator> <name pos:start="91:52" pos:end="91:59"><name pos:start="91:52" pos:end="91:52">p</name><operator pos:start="91:53" pos:end="91:54">-&gt;</operator><name pos:start="91:55" pos:end="91:59">state</name></name> <operator pos:start="91:61" pos:end="91:62">!=</operator> <name pos:start="91:64" pos:end="91:80">STATE_INPUT_READY</name></expr>)</condition> <block pos:start="91:83" pos:end="135:9">{<block_content pos:start="93:13" pos:end="133:53">

            <decl_stmt pos:start="93:13" pos:end="93:30"><decl pos:start="93:13" pos:end="93:29"><type pos:start="93:13" pos:end="93:15"><name pos:start="93:13" pos:end="93:15">int</name></type> <name pos:start="93:17" pos:end="93:25">call_done</name> <init pos:start="93:27" pos:end="93:29">= <expr pos:start="93:29" pos:end="93:29"><literal type="number" pos:start="93:29" pos:end="93:29">1</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:51"><expr pos:start="95:13" pos:end="95:50"><call pos:start="95:13" pos:end="95:50"><name pos:start="95:13" pos:end="95:30">pthread_mutex_lock</name><argument_list pos:start="95:31" pos:end="95:50">(<argument pos:start="95:32" pos:end="95:49"><expr pos:start="95:32" pos:end="95:49"><operator pos:start="95:32" pos:end="95:32">&amp;</operator><name pos:start="95:33" pos:end="95:49"><name pos:start="95:33" pos:end="95:33">p</name><operator pos:start="95:34" pos:end="95:35">-&gt;</operator><name pos:start="95:36" pos:end="95:49">progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <while pos:start="97:13" pos:end="99:73">while <condition pos:start="97:19" pos:end="97:48">(<expr pos:start="97:20" pos:end="97:47"><name pos:start="97:20" pos:end="97:27"><name pos:start="97:20" pos:end="97:20">p</name><operator pos:start="97:21" pos:end="97:22">-&gt;</operator><name pos:start="97:23" pos:end="97:27">state</name></name> <operator pos:start="97:29" pos:end="97:30">==</operator> <name pos:start="97:32" pos:end="97:47">STATE_SETTING_UP</name></expr>)</condition><block type="pseudo" pos:start="99:17" pos:end="99:73"><block_content pos:start="99:17" pos:end="99:73">

                <expr_stmt pos:start="99:17" pos:end="99:73"><expr pos:start="99:17" pos:end="99:72"><call pos:start="99:17" pos:end="99:72"><name pos:start="99:17" pos:end="99:33">pthread_cond_wait</name><argument_list pos:start="99:34" pos:end="99:72">(<argument pos:start="99:35" pos:end="99:51"><expr pos:start="99:35" pos:end="99:51"><operator pos:start="99:35" pos:end="99:35">&amp;</operator><name pos:start="99:36" pos:end="99:51"><name pos:start="99:36" pos:end="99:36">p</name><operator pos:start="99:37" pos:end="99:38">-&gt;</operator><name pos:start="99:39" pos:end="99:51">progress_cond</name></name></expr></argument>, <argument pos:start="99:54" pos:end="99:71"><expr pos:start="99:54" pos:end="99:71"><operator pos:start="99:54" pos:end="99:54">&amp;</operator><name pos:start="99:55" pos:end="99:71"><name pos:start="99:55" pos:end="99:55">p</name><operator pos:start="99:56" pos:end="99:57">-&gt;</operator><name pos:start="99:58" pos:end="99:71">progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>



            <switch pos:start="103:13" pos:end="123:13">switch <condition pos:start="103:20" pos:end="103:29">(<expr pos:start="103:21" pos:end="103:28"><name pos:start="103:21" pos:end="103:28"><name pos:start="103:21" pos:end="103:21">p</name><operator pos:start="103:22" pos:end="103:23">-&gt;</operator><name pos:start="103:24" pos:end="103:28">state</name></name></expr>)</condition> <block pos:start="103:31" pos:end="123:13">{<block_content pos:start="105:13" pos:end="121:22">

            <case pos:start="105:13" pos:end="105:34">case <expr pos:start="105:18" pos:end="105:33"><name pos:start="105:18" pos:end="105:33">STATE_GET_BUFFER</name></expr>:</case>

                <expr_stmt pos:start="107:17" pos:end="107:92"><expr pos:start="107:17" pos:end="107:91"><name pos:start="107:17" pos:end="107:25"><name pos:start="107:17" pos:end="107:17">p</name><operator pos:start="107:18" pos:end="107:19">-&gt;</operator><name pos:start="107:20" pos:end="107:25">result</name></name> <operator pos:start="107:27" pos:end="107:27">=</operator> <call pos:start="107:29" pos:end="107:91"><name pos:start="107:29" pos:end="107:41">ff_get_buffer</name><argument_list pos:start="107:42" pos:end="107:91">(<argument pos:start="107:43" pos:end="107:50"><expr pos:start="107:43" pos:end="107:50"><name pos:start="107:43" pos:end="107:50"><name pos:start="107:43" pos:end="107:43">p</name><operator pos:start="107:44" pos:end="107:45">-&gt;</operator><name pos:start="107:46" pos:end="107:50">avctx</name></name></expr></argument>, <argument pos:start="107:53" pos:end="107:70"><expr pos:start="107:53" pos:end="107:70"><name pos:start="107:53" pos:end="107:70"><name pos:start="107:53" pos:end="107:53">p</name><operator pos:start="107:54" pos:end="107:55">-&gt;</operator><name pos:start="107:56" pos:end="107:70">requested_frame</name></name></expr></argument>, <argument pos:start="107:73" pos:end="107:90"><expr pos:start="107:73" pos:end="107:90"><name pos:start="107:73" pos:end="107:90"><name pos:start="107:73" pos:end="107:73">p</name><operator pos:start="107:74" pos:end="107:75">-&gt;</operator><name pos:start="107:76" pos:end="107:90">requested_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="109:17" pos:end="109:22">break;</break>

            <case pos:start="111:13" pos:end="111:34">case <expr pos:start="111:18" pos:end="111:33"><name pos:start="111:18" pos:end="111:33">STATE_GET_FORMAT</name></expr>:</case>

                <expr_stmt pos:start="113:17" pos:end="113:81"><expr pos:start="113:17" pos:end="113:80"><name pos:start="113:17" pos:end="113:32"><name pos:start="113:17" pos:end="113:17">p</name><operator pos:start="113:18" pos:end="113:19">-&gt;</operator><name pos:start="113:20" pos:end="113:32">result_format</name></name> <operator pos:start="113:34" pos:end="113:34">=</operator> <call pos:start="113:36" pos:end="113:80"><name pos:start="113:36" pos:end="113:48">ff_get_format</name><argument_list pos:start="113:49" pos:end="113:80">(<argument pos:start="113:50" pos:end="113:57"><expr pos:start="113:50" pos:end="113:57"><name pos:start="113:50" pos:end="113:57"><name pos:start="113:50" pos:end="113:50">p</name><operator pos:start="113:51" pos:end="113:52">-&gt;</operator><name pos:start="113:53" pos:end="113:57">avctx</name></name></expr></argument>, <argument pos:start="113:60" pos:end="113:79"><expr pos:start="113:60" pos:end="113:79"><name pos:start="113:60" pos:end="113:79"><name pos:start="113:60" pos:end="113:60">p</name><operator pos:start="113:61" pos:end="113:62">-&gt;</operator><name pos:start="113:63" pos:end="113:79">available_formats</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="115:17" pos:end="115:22">break;</break>

            <default pos:start="117:13" pos:end="117:20">default:</default>

                <expr_stmt pos:start="119:17" pos:end="119:30"><expr pos:start="119:17" pos:end="119:29"><name pos:start="119:17" pos:end="119:25">call_done</name> <operator pos:start="119:27" pos:end="119:27">=</operator> <literal type="number" pos:start="119:29" pos:end="119:29">0</literal></expr>;</expr_stmt>

                <break pos:start="121:17" pos:end="121:22">break;</break>

            </block_content>}</block></switch>

            <if_stmt pos:start="125:13" pos:end="131:13"><if pos:start="125:13" pos:end="131:13">if <condition pos:start="125:16" pos:end="125:26">(<expr pos:start="125:17" pos:end="125:25"><name pos:start="125:17" pos:end="125:25">call_done</name></expr>)</condition> <block pos:start="125:28" pos:end="131:13">{<block_content pos:start="127:17" pos:end="129:55">

                <expr_stmt pos:start="127:17" pos:end="127:45"><expr pos:start="127:17" pos:end="127:44"><name pos:start="127:17" pos:end="127:24"><name pos:start="127:17" pos:end="127:17">p</name><operator pos:start="127:18" pos:end="127:19">-&gt;</operator><name pos:start="127:20" pos:end="127:24">state</name></name>  <operator pos:start="127:27" pos:end="127:27">=</operator> <name pos:start="127:29" pos:end="127:44">STATE_SETTING_UP</name></expr>;</expr_stmt>

                <expr_stmt pos:start="129:17" pos:end="129:55"><expr pos:start="129:17" pos:end="129:54"><call pos:start="129:17" pos:end="129:54"><name pos:start="129:17" pos:end="129:35">pthread_cond_signal</name><argument_list pos:start="129:36" pos:end="129:54">(<argument pos:start="129:37" pos:end="129:53"><expr pos:start="129:37" pos:end="129:53"><operator pos:start="129:37" pos:end="129:37">&amp;</operator><name pos:start="129:38" pos:end="129:53"><name pos:start="129:38" pos:end="129:38">p</name><operator pos:start="129:39" pos:end="129:40">-&gt;</operator><name pos:start="129:41" pos:end="129:53">progress_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:53"><expr pos:start="133:13" pos:end="133:52"><call pos:start="133:13" pos:end="133:52"><name pos:start="133:13" pos:end="133:32">pthread_mutex_unlock</name><argument_list pos:start="133:33" pos:end="133:52">(<argument pos:start="133:34" pos:end="133:51"><expr pos:start="133:34" pos:end="133:51"><operator pos:start="133:34" pos:end="133:34">&amp;</operator><name pos:start="133:35" pos:end="133:51"><name pos:start="133:35" pos:end="133:35">p</name><operator pos:start="133:36" pos:end="133:37">-&gt;</operator><name pos:start="133:38" pos:end="133:51">progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="141:5" pos:end="141:26"><expr pos:start="141:5" pos:end="141:25"><name pos:start="141:5" pos:end="141:21"><name pos:start="141:5" pos:end="141:8">fctx</name><operator pos:start="141:9" pos:end="141:10">-&gt;</operator><name pos:start="141:11" pos:end="141:21">prev_thread</name></name> <operator pos:start="141:23" pos:end="141:23">=</operator> <name pos:start="141:25" pos:end="141:25">p</name></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:26"><expr pos:start="143:5" pos:end="143:25"><name pos:start="143:5" pos:end="143:23"><name pos:start="143:5" pos:end="143:8">fctx</name><operator pos:start="143:9" pos:end="143:10">-&gt;</operator><name pos:start="143:11" pos:end="143:23">next_decoding</name></name><operator pos:start="143:24" pos:end="143:25">++</operator></expr>;</expr_stmt>



    <return pos:start="147:5" pos:end="147:13">return <expr pos:start="147:12" pos:end="147:12"><literal type="number" pos:start="147:12" pos:end="147:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
