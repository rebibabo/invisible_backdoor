<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26440.c" pos:tabs="8"><function pos:start="1:1" pos:end="161:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">decode_plane</name><parameter_list pos:start="1:24" pos:end="7:71">(<parameter pos:start="1:25" pos:end="1:41"><decl pos:start="1:25" pos:end="1:41"><type pos:start="1:25" pos:end="1:41"><name pos:start="1:25" pos:end="1:38">UtvideoContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:41">c</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:55"><decl pos:start="1:44" pos:end="1:55"><type pos:start="1:44" pos:end="1:55"><name pos:start="1:44" pos:end="1:46">int</name></type> <name pos:start="1:48" pos:end="1:55">plane_no</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:36"><decl pos:start="3:25" pos:end="3:36"><type pos:start="3:25" pos:end="3:36"><name pos:start="3:25" pos:end="3:31">uint8_t</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:36">dst</name></decl></parameter>, <parameter pos:start="3:39" pos:end="3:46"><decl pos:start="3:39" pos:end="3:46"><type pos:start="3:39" pos:end="3:46"><name pos:start="3:39" pos:end="3:41">int</name></type> <name pos:start="3:43" pos:end="3:46">step</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:58"><decl pos:start="3:49" pos:end="3:58"><type pos:start="3:49" pos:end="3:58"><name pos:start="3:49" pos:end="3:51">int</name></type> <name pos:start="3:53" pos:end="3:58">stride</name></decl></parameter>,

                        <parameter pos:start="5:25" pos:end="5:33"><decl pos:start="5:25" pos:end="5:33"><type pos:start="5:25" pos:end="5:33"><name pos:start="5:25" pos:end="5:27">int</name></type> <name pos:start="5:29" pos:end="5:33">width</name></decl></parameter>, <parameter pos:start="5:36" pos:end="5:45"><decl pos:start="5:36" pos:end="5:45"><type pos:start="5:36" pos:end="5:45"><name pos:start="5:36" pos:end="5:38">int</name></type> <name pos:start="5:40" pos:end="5:45">height</name></decl></parameter>,

                        <parameter pos:start="7:25" pos:end="7:42"><decl pos:start="7:25" pos:end="7:42"><type pos:start="7:25" pos:end="7:42"><specifier pos:start="7:25" pos:end="7:29">const</specifier> <name pos:start="7:31" pos:end="7:37">uint8_t</name> <modifier pos:start="7:39" pos:end="7:39">*</modifier></type><name pos:start="7:40" pos:end="7:42">src</name></decl></parameter>, <parameter pos:start="7:45" pos:end="7:56"><decl pos:start="7:45" pos:end="7:56"><type pos:start="7:45" pos:end="7:56"><name pos:start="7:45" pos:end="7:47">int</name></type> <name pos:start="7:49" pos:end="7:56">src_size</name></decl></parameter>, <parameter pos:start="7:59" pos:end="7:70"><decl pos:start="7:59" pos:end="7:70"><type pos:start="7:59" pos:end="7:70"><name pos:start="7:59" pos:end="7:61">int</name></type> <name pos:start="7:63" pos:end="7:70">use_pred</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="161:1">{<block_content pos:start="11:5" pos:end="159:31">

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>, <decl pos:start="11:12" pos:end="11:12"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:12">j</name></decl>, <decl pos:start="11:15" pos:end="11:19"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:15" pos:end="11:19">slice</name></decl>, <decl pos:start="11:22" pos:end="11:24"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:22" pos:end="11:24">pix</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:14"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:14">sstart</name></decl>, <decl pos:start="13:17" pos:end="13:20"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:17" pos:end="13:20">send</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">VLC</name></type> <name pos:start="15:9" pos:end="15:11">vlc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:17">GetBitContext</name></type> <name pos:start="17:19" pos:end="17:20">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:13"><decl pos:start="19:5" pos:end="19:12"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:12">prev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:75"><decl pos:start="21:5" pos:end="21:74"><type pos:start="21:5" pos:end="21:13"><specifier pos:start="21:5" pos:end="21:9">const</specifier> <name pos:start="21:11" pos:end="21:13">int</name></type> <name pos:start="21:15" pos:end="21:19">cmask</name> <init pos:start="21:21" pos:end="21:74">= <expr pos:start="21:23" pos:end="21:74"><operator pos:start="21:23" pos:end="21:23">~</operator><operator pos:start="21:24" pos:end="21:24">(</operator><operator pos:start="21:25" pos:end="21:25">!</operator><name pos:start="21:26" pos:end="21:33">plane_no</name> <operator pos:start="21:35" pos:end="21:36">&amp;&amp;</operator> <name pos:start="21:38" pos:end="21:54"><name pos:start="21:38" pos:end="21:38">c</name><operator pos:start="21:39" pos:end="21:40">-&gt;</operator><name pos:start="21:41" pos:end="21:45">avctx</name><operator pos:start="21:46" pos:end="21:47">-&gt;</operator><name pos:start="21:48" pos:end="21:54">pix_fmt</name></name> <operator pos:start="21:56" pos:end="21:57">==</operator> <name pos:start="21:59" pos:end="21:73">PIX_FMT_YUV420P</name><operator pos:start="21:74" pos:end="21:74">)</operator></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:30">(<expr pos:start="25:9" pos:end="25:29"><call pos:start="25:9" pos:end="25:29"><name pos:start="25:9" pos:end="25:18">build_huff</name><argument_list pos:start="25:19" pos:end="25:29">(<argument pos:start="25:20" pos:end="25:22"><expr pos:start="25:20" pos:end="25:22"><name pos:start="25:20" pos:end="25:22">src</name></expr></argument>, <argument pos:start="25:25" pos:end="25:28"><expr pos:start="25:25" pos:end="25:28"><operator pos:start="25:25" pos:end="25:25">&amp;</operator><name pos:start="25:26" pos:end="25:28">vlc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:32" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:35">

        <expr_stmt pos:start="27:9" pos:end="27:71"><expr pos:start="27:9" pos:end="27:70"><call pos:start="27:9" pos:end="27:70"><name pos:start="27:9" pos:end="27:14">av_log</name><argument_list pos:start="27:15" pos:end="27:70">(<argument pos:start="27:16" pos:end="27:23"><expr pos:start="27:16" pos:end="27:23"><name pos:start="27:16" pos:end="27:23"><name pos:start="27:16" pos:end="27:16">c</name><operator pos:start="27:17" pos:end="27:18">-&gt;</operator><name pos:start="27:19" pos:end="27:23">avctx</name></name></expr></argument>, <argument pos:start="27:26" pos:end="27:37"><expr pos:start="27:26" pos:end="27:37"><name pos:start="27:26" pos:end="27:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="27:40" pos:end="27:69"><expr pos:start="27:40" pos:end="27:69"><literal type="string" pos:start="27:40" pos:end="27:69">"Cannot build Huffman codes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:35">return <expr pos:start="29:16" pos:end="29:34"><name pos:start="29:16" pos:end="29:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:20"><expr pos:start="35:5" pos:end="35:19"><name pos:start="35:5" pos:end="35:7">src</name>      <operator pos:start="35:14" pos:end="35:15">+=</operator> <literal type="number" pos:start="35:17" pos:end="35:19">256</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:20"><expr pos:start="37:5" pos:end="37:19"><name pos:start="37:5" pos:end="37:12">src_size</name> <operator pos:start="37:14" pos:end="37:15">-=</operator> <literal type="number" pos:start="37:17" pos:end="37:19">256</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:13"><expr pos:start="41:5" pos:end="41:12"><name pos:start="41:5" pos:end="41:8">send</name> <operator pos:start="41:10" pos:end="41:10">=</operator> <literal type="number" pos:start="41:12" pos:end="41:12">0</literal></expr>;</expr_stmt>

    <for pos:start="43:5" pos:end="145:5">for <control pos:start="43:9" pos:end="43:47">(<init pos:start="43:10" pos:end="43:19"><expr pos:start="43:10" pos:end="43:18"><name pos:start="43:10" pos:end="43:14">slice</name> <operator pos:start="43:16" pos:end="43:16">=</operator> <literal type="number" pos:start="43:18" pos:end="43:18">0</literal></expr>;</init> <condition pos:start="43:21" pos:end="43:38"><expr pos:start="43:21" pos:end="43:37"><name pos:start="43:21" pos:end="43:25">slice</name> <operator pos:start="43:27" pos:end="43:27">&lt;</operator> <name pos:start="43:29" pos:end="43:37"><name pos:start="43:29" pos:end="43:29">c</name><operator pos:start="43:30" pos:end="43:31">-&gt;</operator><name pos:start="43:32" pos:end="43:37">slices</name></name></expr>;</condition> <incr pos:start="43:40" pos:end="43:46"><expr pos:start="43:40" pos:end="43:46"><name pos:start="43:40" pos:end="43:44">slice</name><operator pos:start="43:45" pos:end="43:46">++</operator></expr></incr>)</control> <block pos:start="43:49" pos:end="145:5">{<block_content pos:start="45:9" pos:end="143:39">

        <decl_stmt pos:start="45:9" pos:end="45:22"><decl pos:start="45:9" pos:end="45:21"><type pos:start="45:9" pos:end="45:17"><name pos:start="45:9" pos:end="45:15">uint8_t</name> <modifier pos:start="45:17" pos:end="45:17">*</modifier></type><name pos:start="45:18" pos:end="45:21">dest</name></decl>;</decl_stmt>

        <decl_stmt pos:start="47:9" pos:end="47:57"><decl pos:start="47:9" pos:end="47:28"><type pos:start="47:9" pos:end="47:11"><name pos:start="47:9" pos:end="47:11">int</name></type> <name pos:start="47:13" pos:end="47:28">slice_data_start</name></decl>, <decl pos:start="47:31" pos:end="47:44"><type ref="prev" pos:start="47:9" pos:end="47:11"/><name pos:start="47:31" pos:end="47:44">slice_data_end</name></decl>, <decl pos:start="47:47" pos:end="47:56"><type ref="prev" pos:start="47:9" pos:end="47:11"/><name pos:start="47:47" pos:end="47:56">slice_size</name></decl>;</decl_stmt>



        <expr_stmt pos:start="51:9" pos:end="51:22"><expr pos:start="51:9" pos:end="51:21"><name pos:start="51:9" pos:end="51:14">sstart</name> <operator pos:start="51:16" pos:end="51:16">=</operator> <name pos:start="51:18" pos:end="51:21">send</name></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:60"><expr pos:start="53:9" pos:end="53:59"><name pos:start="53:9" pos:end="53:12">send</name>   <operator pos:start="53:16" pos:end="53:16">=</operator> <operator pos:start="53:18" pos:end="53:18">(</operator><name pos:start="53:19" pos:end="53:24">height</name> <operator pos:start="53:26" pos:end="53:26">*</operator> <operator pos:start="53:28" pos:end="53:28">(</operator><name pos:start="53:29" pos:end="53:33">slice</name> <operator pos:start="53:35" pos:end="53:35">+</operator> <literal type="number" pos:start="53:37" pos:end="53:37">1</literal><operator pos:start="53:38" pos:end="53:38">)</operator> <operator pos:start="53:40" pos:end="53:40">/</operator> <name pos:start="53:42" pos:end="53:50"><name pos:start="53:42" pos:end="53:42">c</name><operator pos:start="53:43" pos:end="53:44">-&gt;</operator><name pos:start="53:45" pos:end="53:50">slices</name></name><operator pos:start="53:51" pos:end="53:51">)</operator> <operator pos:start="53:53" pos:end="53:53">&amp;</operator> <name pos:start="53:55" pos:end="53:59">cmask</name></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:39"><expr pos:start="55:9" pos:end="55:38"><name pos:start="55:9" pos:end="55:12">dest</name>   <operator pos:start="55:16" pos:end="55:16">=</operator> <name pos:start="55:18" pos:end="55:20">dst</name> <operator pos:start="55:22" pos:end="55:22">+</operator> <name pos:start="55:24" pos:end="55:29">sstart</name> <operator pos:start="55:31" pos:end="55:31">*</operator> <name pos:start="55:33" pos:end="55:38">stride</name></expr>;</expr_stmt>



        <comment type="line" pos:start="59:9" pos:end="59:60">// slice offset and size validation was done earlier</comment>

        <expr_stmt pos:start="61:9" pos:end="61:68"><expr pos:start="61:9" pos:end="61:67"><name pos:start="61:9" pos:end="61:24">slice_data_start</name> <operator pos:start="61:26" pos:end="61:26">=</operator> <ternary pos:start="61:28" pos:end="61:67"><condition pos:start="61:28" pos:end="61:34"><expr pos:start="61:28" pos:end="61:32"><name pos:start="61:28" pos:end="61:32">slice</name></expr> ?</condition><then pos:start="61:36" pos:end="61:63"> <expr pos:start="61:36" pos:end="61:63"><call pos:start="61:36" pos:end="61:63"><name pos:start="61:36" pos:end="61:42">AV_RL32</name><argument_list pos:start="61:43" pos:end="61:63">(<argument pos:start="61:44" pos:end="61:62"><expr pos:start="61:44" pos:end="61:62"><name pos:start="61:44" pos:end="61:46">src</name> <operator pos:start="61:48" pos:end="61:48">+</operator> <name pos:start="61:50" pos:end="61:54">slice</name> <operator pos:start="61:56" pos:end="61:56">*</operator> <literal type="number" pos:start="61:58" pos:end="61:60">4</literal> <operator pos:start="61:60" pos:end="61:60">-</operator> <literal type="number" pos:start="61:62" pos:end="61:62">4</literal></expr></argument>)</argument_list></call></expr> </then><else pos:start="61:65" pos:end="61:67">: <expr pos:start="61:67" pos:end="61:67"><literal type="number" pos:start="61:67" pos:end="61:67">0</literal></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:52"><expr pos:start="63:9" pos:end="63:51"><name pos:start="63:9" pos:end="63:22">slice_data_end</name>   <operator pos:start="63:26" pos:end="63:26">=</operator> <call pos:start="63:28" pos:end="63:51"><name pos:start="63:28" pos:end="63:34">AV_RL32</name><argument_list pos:start="63:35" pos:end="63:51">(<argument pos:start="63:36" pos:end="63:50"><expr pos:start="63:36" pos:end="63:50"><name pos:start="63:36" pos:end="63:38">src</name> <operator pos:start="63:40" pos:end="63:40">+</operator> <name pos:start="63:42" pos:end="63:46">slice</name> <operator pos:start="63:48" pos:end="63:48">*</operator> <literal type="number" pos:start="63:50" pos:end="63:50">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:61"><expr pos:start="65:9" pos:end="65:60"><name pos:start="65:9" pos:end="65:18">slice_size</name>       <operator pos:start="65:26" pos:end="65:26">=</operator> <name pos:start="65:28" pos:end="65:41">slice_data_end</name> <operator pos:start="65:43" pos:end="65:43">-</operator> <name pos:start="65:45" pos:end="65:60">slice_data_start</name></expr>;</expr_stmt>



        <if_stmt pos:start="69:9" pos:end="83:9"><if pos:start="69:9" pos:end="83:9">if <condition pos:start="69:12" pos:end="69:24">(<expr pos:start="69:13" pos:end="69:23"><operator pos:start="69:13" pos:end="69:13">!</operator><name pos:start="69:14" pos:end="69:23">slice_size</name></expr>)</condition> <block pos:start="69:26" pos:end="83:9">{<block_content pos:start="71:13" pos:end="81:21">

            <for pos:start="71:13" pos:end="79:13">for <control pos:start="71:17" pos:end="71:43">(<init pos:start="71:18" pos:end="71:28"><expr pos:start="71:18" pos:end="71:27"><name pos:start="71:18" pos:end="71:18">j</name> <operator pos:start="71:20" pos:end="71:20">=</operator> <name pos:start="71:22" pos:end="71:27">sstart</name></expr>;</init> <condition pos:start="71:30" pos:end="71:38"><expr pos:start="71:30" pos:end="71:37"><name pos:start="71:30" pos:end="71:30">j</name> <operator pos:start="71:32" pos:end="71:32">&lt;</operator> <name pos:start="71:34" pos:end="71:37">send</name></expr>;</condition> <incr pos:start="71:40" pos:end="71:42"><expr pos:start="71:40" pos:end="71:42"><name pos:start="71:40" pos:end="71:40">j</name><operator pos:start="71:41" pos:end="71:42">++</operator></expr></incr>)</control> <block pos:start="71:45" pos:end="79:13">{<block_content pos:start="73:17" pos:end="77:31">

                <for pos:start="73:17" pos:end="75:35">for <control pos:start="73:21" pos:end="73:56">(<init pos:start="73:22" pos:end="73:27"><expr pos:start="73:22" pos:end="73:26"><name pos:start="73:22" pos:end="73:22">i</name> <operator pos:start="73:24" pos:end="73:24">=</operator> <literal type="number" pos:start="73:26" pos:end="73:26">0</literal></expr>;</init> <condition pos:start="73:29" pos:end="73:45"><expr pos:start="73:29" pos:end="73:44"><name pos:start="73:29" pos:end="73:29">i</name> <operator pos:start="73:31" pos:end="73:31">&lt;</operator> <name pos:start="73:33" pos:end="73:37">width</name> <operator pos:start="73:39" pos:end="73:39">*</operator> <name pos:start="73:41" pos:end="73:44">step</name></expr>;</condition> <incr pos:start="73:47" pos:end="73:55"><expr pos:start="73:47" pos:end="73:55"><name pos:start="73:47" pos:end="73:47">i</name> <operator pos:start="73:49" pos:end="73:50">+=</operator> <name pos:start="73:52" pos:end="73:55">step</name></expr></incr>)</control><block type="pseudo" pos:start="75:21" pos:end="75:35"><block_content pos:start="75:21" pos:end="75:35">

                    <expr_stmt pos:start="75:21" pos:end="75:35"><expr pos:start="75:21" pos:end="75:34"><name pos:start="75:21" pos:end="75:27"><name pos:start="75:21" pos:end="75:24">dest</name><index pos:start="75:25" pos:end="75:27">[<expr pos:start="75:26" pos:end="75:26"><name pos:start="75:26" pos:end="75:26">i</name></expr>]</index></name> <operator pos:start="75:29" pos:end="75:29">=</operator> <literal type="number" pos:start="75:31" pos:end="75:34">0x80</literal></expr>;</expr_stmt></block_content></block></for>

                <expr_stmt pos:start="77:17" pos:end="77:31"><expr pos:start="77:17" pos:end="77:30"><name pos:start="77:17" pos:end="77:20">dest</name> <operator pos:start="77:22" pos:end="77:23">+=</operator> <name pos:start="77:25" pos:end="77:30">stride</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <continue pos:start="81:13" pos:end="81:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="87:9" pos:end="87:82"><expr pos:start="87:9" pos:end="87:81"><call pos:start="87:9" pos:end="87:81"><name pos:start="87:9" pos:end="87:14">memcpy</name><argument_list pos:start="87:15" pos:end="87:81">(<argument pos:start="87:16" pos:end="87:28"><expr pos:start="87:16" pos:end="87:28"><name pos:start="87:16" pos:end="87:28"><name pos:start="87:16" pos:end="87:16">c</name><operator pos:start="87:17" pos:end="87:18">-&gt;</operator><name pos:start="87:19" pos:end="87:28">slice_bits</name></name></expr></argument>, <argument pos:start="87:31" pos:end="87:68"><expr pos:start="87:31" pos:end="87:68"><name pos:start="87:31" pos:end="87:33">src</name> <operator pos:start="87:35" pos:end="87:35">+</operator> <name pos:start="87:37" pos:end="87:52">slice_data_start</name> <operator pos:start="87:54" pos:end="87:54">+</operator> <name pos:start="87:56" pos:end="87:64"><name pos:start="87:56" pos:end="87:56">c</name><operator pos:start="87:57" pos:end="87:58">-&gt;</operator><name pos:start="87:59" pos:end="87:64">slices</name></name> <operator pos:start="87:66" pos:end="87:66">*</operator> <literal type="number" pos:start="87:68" pos:end="87:68">4</literal></expr></argument>, <argument pos:start="87:71" pos:end="87:80"><expr pos:start="87:71" pos:end="87:80"><name pos:start="87:71" pos:end="87:80">slice_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:76"><expr pos:start="89:9" pos:end="89:75"><call pos:start="89:9" pos:end="89:75"><name pos:start="89:9" pos:end="89:14">memset</name><argument_list pos:start="89:15" pos:end="89:75">(<argument pos:start="89:16" pos:end="89:41"><expr pos:start="89:16" pos:end="89:41"><name pos:start="89:16" pos:end="89:28"><name pos:start="89:16" pos:end="89:16">c</name><operator pos:start="89:17" pos:end="89:18">-&gt;</operator><name pos:start="89:19" pos:end="89:28">slice_bits</name></name> <operator pos:start="89:30" pos:end="89:30">+</operator> <name pos:start="89:32" pos:end="89:41">slice_size</name></expr></argument>, <argument pos:start="89:44" pos:end="89:44"><expr pos:start="89:44" pos:end="89:44"><literal type="number" pos:start="89:44" pos:end="89:44">0</literal></expr></argument>, <argument pos:start="89:47" pos:end="89:74"><expr pos:start="89:47" pos:end="89:74"><name pos:start="89:47" pos:end="89:74">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="93:71"><expr pos:start="91:9" pos:end="93:70"><call pos:start="91:9" pos:end="93:70"><name pos:start="91:9" pos:end="91:24"><name pos:start="91:9" pos:end="91:9">c</name><operator pos:start="91:10" pos:end="91:11">-&gt;</operator><name pos:start="91:12" pos:end="91:14">dsp</name><operator pos:start="91:15" pos:end="91:15">.</operator><name pos:start="91:16" pos:end="91:24">bswap_buf</name></name><argument_list pos:start="91:25" pos:end="93:70">(<argument pos:start="91:26" pos:end="91:49"><expr pos:start="91:26" pos:end="91:49"><operator pos:start="91:26" pos:end="91:26">(</operator><name pos:start="91:27" pos:end="91:34">uint32_t</name><operator pos:start="91:35" pos:end="91:35">*</operator><operator pos:start="91:36" pos:end="91:36">)</operator><name pos:start="91:37" pos:end="91:49"><name pos:start="91:37" pos:end="91:37">c</name><operator pos:start="91:38" pos:end="91:39">-&gt;</operator><name pos:start="91:40" pos:end="91:49">slice_bits</name></name></expr></argument>, <argument pos:start="91:52" pos:end="91:75"><expr pos:start="91:52" pos:end="91:75"><operator pos:start="91:52" pos:end="91:52">(</operator><name pos:start="91:53" pos:end="91:60">uint32_t</name><operator pos:start="91:61" pos:end="91:61">*</operator><operator pos:start="91:62" pos:end="91:62">)</operator><name pos:start="91:63" pos:end="91:75"><name pos:start="91:63" pos:end="91:63">c</name><operator pos:start="91:64" pos:end="91:65">-&gt;</operator><name pos:start="91:66" pos:end="91:75">slice_bits</name></name></expr></argument>,

                         <argument pos:start="93:26" pos:end="93:69"><expr pos:start="93:26" pos:end="93:69"><operator pos:start="93:26" pos:end="93:26">(</operator><name pos:start="93:27" pos:end="93:40">slice_data_end</name> <operator pos:start="93:42" pos:end="93:42">-</operator> <name pos:start="93:44" pos:end="93:59">slice_data_start</name> <operator pos:start="93:61" pos:end="93:61">+</operator> <literal type="number" pos:start="93:63" pos:end="93:63">3</literal><operator pos:start="93:64" pos:end="93:64">)</operator> <operator pos:start="93:66" pos:end="93:67">&gt;&gt;</operator> <literal type="number" pos:start="93:69" pos:end="93:69">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:58"><expr pos:start="95:9" pos:end="95:57"><call pos:start="95:9" pos:end="95:57"><name pos:start="95:9" pos:end="95:21">init_get_bits</name><argument_list pos:start="95:22" pos:end="95:57">(<argument pos:start="95:23" pos:end="95:25"><expr pos:start="95:23" pos:end="95:25"><operator pos:start="95:23" pos:end="95:23">&amp;</operator><name pos:start="95:24" pos:end="95:25">gb</name></expr></argument>, <argument pos:start="95:28" pos:end="95:40"><expr pos:start="95:28" pos:end="95:40"><name pos:start="95:28" pos:end="95:40"><name pos:start="95:28" pos:end="95:28">c</name><operator pos:start="95:29" pos:end="95:30">-&gt;</operator><name pos:start="95:31" pos:end="95:40">slice_bits</name></name></expr></argument>, <argument pos:start="95:43" pos:end="95:56"><expr pos:start="95:43" pos:end="95:56"><name pos:start="95:43" pos:end="95:52">slice_size</name> <operator pos:start="95:54" pos:end="95:54">*</operator> <literal type="number" pos:start="95:56" pos:end="95:56">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="99:9" pos:end="99:20"><expr pos:start="99:9" pos:end="99:19"><name pos:start="99:9" pos:end="99:12">prev</name> <operator pos:start="99:14" pos:end="99:14">=</operator> <literal type="number" pos:start="99:16" pos:end="99:19">0x80</literal></expr>;</expr_stmt>

        <for pos:start="101:9" pos:end="137:9">for <control pos:start="101:13" pos:end="101:39">(<init pos:start="101:14" pos:end="101:24"><expr pos:start="101:14" pos:end="101:23"><name pos:start="101:14" pos:end="101:14">j</name> <operator pos:start="101:16" pos:end="101:16">=</operator> <name pos:start="101:18" pos:end="101:23">sstart</name></expr>;</init> <condition pos:start="101:26" pos:end="101:34"><expr pos:start="101:26" pos:end="101:33"><name pos:start="101:26" pos:end="101:26">j</name> <operator pos:start="101:28" pos:end="101:28">&lt;</operator> <name pos:start="101:30" pos:end="101:33">send</name></expr>;</condition> <incr pos:start="101:36" pos:end="101:38"><expr pos:start="101:36" pos:end="101:38"><name pos:start="101:36" pos:end="101:36">j</name><operator pos:start="101:37" pos:end="101:38">++</operator></expr></incr>)</control> <block pos:start="101:41" pos:end="137:9">{<block_content pos:start="103:13" pos:end="135:27">

            <for pos:start="103:13" pos:end="133:13">for <control pos:start="103:17" pos:end="103:52">(<init pos:start="103:18" pos:end="103:23"><expr pos:start="103:18" pos:end="103:22"><name pos:start="103:18" pos:end="103:18">i</name> <operator pos:start="103:20" pos:end="103:20">=</operator> <literal type="number" pos:start="103:22" pos:end="103:22">0</literal></expr>;</init> <condition pos:start="103:25" pos:end="103:41"><expr pos:start="103:25" pos:end="103:40"><name pos:start="103:25" pos:end="103:25">i</name> <operator pos:start="103:27" pos:end="103:27">&lt;</operator> <name pos:start="103:29" pos:end="103:33">width</name> <operator pos:start="103:35" pos:end="103:35">*</operator> <name pos:start="103:37" pos:end="103:40">step</name></expr>;</condition> <incr pos:start="103:43" pos:end="103:51"><expr pos:start="103:43" pos:end="103:51"><name pos:start="103:43" pos:end="103:43">i</name> <operator pos:start="103:45" pos:end="103:46">+=</operator> <name pos:start="103:48" pos:end="103:51">step</name></expr></incr>)</control> <block pos:start="103:54" pos:end="133:13">{<block_content pos:start="105:17" pos:end="131:30">

                <if_stmt pos:start="105:17" pos:end="111:17"><if pos:start="105:17" pos:end="111:17">if <condition pos:start="105:20" pos:end="105:44">(<expr pos:start="105:21" pos:end="105:43"><call pos:start="105:21" pos:end="105:38"><name pos:start="105:21" pos:end="105:33">get_bits_left</name><argument_list pos:start="105:34" pos:end="105:38">(<argument pos:start="105:35" pos:end="105:37"><expr pos:start="105:35" pos:end="105:37"><operator pos:start="105:35" pos:end="105:35">&amp;</operator><name pos:start="105:36" pos:end="105:37">gb</name></expr></argument>)</argument_list></call> <operator pos:start="105:40" pos:end="105:41">&lt;=</operator> <literal type="number" pos:start="105:43" pos:end="105:43">0</literal></expr>)</condition> <block pos:start="105:46" pos:end="111:17">{<block_content pos:start="107:21" pos:end="109:30">

                    <expr_stmt pos:start="107:21" pos:end="107:87"><expr pos:start="107:21" pos:end="107:86"><call pos:start="107:21" pos:end="107:86"><name pos:start="107:21" pos:end="107:26">av_log</name><argument_list pos:start="107:27" pos:end="107:86">(<argument pos:start="107:28" pos:end="107:35"><expr pos:start="107:28" pos:end="107:35"><name pos:start="107:28" pos:end="107:35"><name pos:start="107:28" pos:end="107:28">c</name><operator pos:start="107:29" pos:end="107:30">-&gt;</operator><name pos:start="107:31" pos:end="107:35">avctx</name></name></expr></argument>, <argument pos:start="107:38" pos:end="107:49"><expr pos:start="107:38" pos:end="107:49"><name pos:start="107:38" pos:end="107:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="107:52" pos:end="107:85"><expr pos:start="107:52" pos:end="107:85"><literal type="string" pos:start="107:52" pos:end="107:85">"Slice decoding ran out of bits\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="109:21" pos:end="109:30">goto <name pos:start="109:26" pos:end="109:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="113:17" pos:end="113:60"><expr pos:start="113:17" pos:end="113:59"><name pos:start="113:17" pos:end="113:19">pix</name> <operator pos:start="113:21" pos:end="113:21">=</operator> <call pos:start="113:23" pos:end="113:59"><name pos:start="113:23" pos:end="113:30">get_vlc2</name><argument_list pos:start="113:31" pos:end="113:59">(<argument pos:start="113:32" pos:end="113:34"><expr pos:start="113:32" pos:end="113:34"><operator pos:start="113:32" pos:end="113:32">&amp;</operator><name pos:start="113:33" pos:end="113:34">gb</name></expr></argument>, <argument pos:start="113:37" pos:end="113:45"><expr pos:start="113:37" pos:end="113:45"><name pos:start="113:37" pos:end="113:45"><name pos:start="113:37" pos:end="113:39">vlc</name><operator pos:start="113:40" pos:end="113:40">.</operator><name pos:start="113:41" pos:end="113:45">table</name></name></expr></argument>, <argument pos:start="113:48" pos:end="113:55"><expr pos:start="113:48" pos:end="113:55"><name pos:start="113:48" pos:end="113:55"><name pos:start="113:48" pos:end="113:50">vlc</name><operator pos:start="113:51" pos:end="113:51">.</operator><name pos:start="113:52" pos:end="113:55">bits</name></name></expr></argument>, <argument pos:start="113:58" pos:end="113:58"><expr pos:start="113:58" pos:end="113:58"><literal type="number" pos:start="113:58" pos:end="113:58">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="115:17" pos:end="121:17"><if pos:start="115:17" pos:end="121:17">if <condition pos:start="115:20" pos:end="115:28">(<expr pos:start="115:21" pos:end="115:27"><name pos:start="115:21" pos:end="115:23">pix</name> <operator pos:start="115:25" pos:end="115:25">&lt;</operator> <literal type="number" pos:start="115:27" pos:end="115:27">0</literal></expr>)</condition> <block pos:start="115:30" pos:end="121:17">{<block_content pos:start="117:21" pos:end="119:30">

                    <expr_stmt pos:start="117:21" pos:end="117:71"><expr pos:start="117:21" pos:end="117:70"><call pos:start="117:21" pos:end="117:70"><name pos:start="117:21" pos:end="117:26">av_log</name><argument_list pos:start="117:27" pos:end="117:70">(<argument pos:start="117:28" pos:end="117:35"><expr pos:start="117:28" pos:end="117:35"><name pos:start="117:28" pos:end="117:35"><name pos:start="117:28" pos:end="117:28">c</name><operator pos:start="117:29" pos:end="117:30">-&gt;</operator><name pos:start="117:31" pos:end="117:35">avctx</name></name></expr></argument>, <argument pos:start="117:38" pos:end="117:49"><expr pos:start="117:38" pos:end="117:49"><name pos:start="117:38" pos:end="117:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="117:52" pos:end="117:69"><expr pos:start="117:52" pos:end="117:69"><literal type="string" pos:start="117:52" pos:end="117:69">"Decoding error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="119:21" pos:end="119:30">goto <name pos:start="119:26" pos:end="119:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="123:17" pos:end="129:17"><if pos:start="123:17" pos:end="129:17">if <condition pos:start="123:20" pos:end="123:29">(<expr pos:start="123:21" pos:end="123:28"><name pos:start="123:21" pos:end="123:28">use_pred</name></expr>)</condition> <block pos:start="123:31" pos:end="129:17">{<block_content pos:start="125:21" pos:end="127:33">

                    <expr_stmt pos:start="125:21" pos:end="125:32"><expr pos:start="125:21" pos:end="125:31"><name pos:start="125:21" pos:end="125:24">prev</name> <operator pos:start="125:26" pos:end="125:27">+=</operator> <name pos:start="125:29" pos:end="125:31">pix</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="127:21" pos:end="127:33"><expr pos:start="127:21" pos:end="127:32"><name pos:start="127:21" pos:end="127:23">pix</name>   <operator pos:start="127:27" pos:end="127:27">=</operator> <name pos:start="127:29" pos:end="127:32">prev</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="131:17" pos:end="131:30"><expr pos:start="131:17" pos:end="131:29"><name pos:start="131:17" pos:end="131:23"><name pos:start="131:17" pos:end="131:20">dest</name><index pos:start="131:21" pos:end="131:23">[<expr pos:start="131:22" pos:end="131:22"><name pos:start="131:22" pos:end="131:22">i</name></expr>]</index></name> <operator pos:start="131:25" pos:end="131:25">=</operator> <name pos:start="131:27" pos:end="131:29">pix</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="135:13" pos:end="135:27"><expr pos:start="135:13" pos:end="135:26"><name pos:start="135:13" pos:end="135:16">dest</name> <operator pos:start="135:18" pos:end="135:19">+=</operator> <name pos:start="135:21" pos:end="135:26">stride</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="139:9" pos:end="143:39"><if pos:start="139:9" pos:end="143:39">if <condition pos:start="139:12" pos:end="139:36">(<expr pos:start="139:13" pos:end="139:35"><call pos:start="139:13" pos:end="139:30"><name pos:start="139:13" pos:end="139:25">get_bits_left</name><argument_list pos:start="139:26" pos:end="139:30">(<argument pos:start="139:27" pos:end="139:29"><expr pos:start="139:27" pos:end="139:29"><operator pos:start="139:27" pos:end="139:27">&amp;</operator><name pos:start="139:28" pos:end="139:29">gb</name></expr></argument>)</argument_list></call> <operator pos:start="139:32" pos:end="139:32">&gt;</operator> <literal type="number" pos:start="139:34" pos:end="139:35">32</literal></expr>)</condition><block type="pseudo" pos:start="141:13" pos:end="143:39"><block_content pos:start="141:13" pos:end="143:39">

            <expr_stmt pos:start="141:13" pos:end="143:39"><expr pos:start="141:13" pos:end="143:38"><call pos:start="141:13" pos:end="143:38"><name pos:start="141:13" pos:end="141:18">av_log</name><argument_list pos:start="141:19" pos:end="143:38">(<argument pos:start="141:20" pos:end="141:27"><expr pos:start="141:20" pos:end="141:27"><name pos:start="141:20" pos:end="141:27"><name pos:start="141:20" pos:end="141:20">c</name><operator pos:start="141:21" pos:end="141:22">-&gt;</operator><name pos:start="141:23" pos:end="141:27">avctx</name></name></expr></argument>, <argument pos:start="141:30" pos:end="141:43"><expr pos:start="141:30" pos:end="141:43"><name pos:start="141:30" pos:end="141:43">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="141:46" pos:end="141:82"><expr pos:start="141:46" pos:end="141:82"><literal type="string" pos:start="141:46" pos:end="141:82">"%d bits left after decoding slice\n"</literal></expr></argument>,

                   <argument pos:start="143:20" pos:end="143:37"><expr pos:start="143:20" pos:end="143:37"><call pos:start="143:20" pos:end="143:37"><name pos:start="143:20" pos:end="143:32">get_bits_left</name><argument_list pos:start="143:33" pos:end="143:37">(<argument pos:start="143:34" pos:end="143:36"><expr pos:start="143:34" pos:end="143:36"><operator pos:start="143:34" pos:end="143:34">&amp;</operator><name pos:start="143:35" pos:end="143:36">gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="149:5" pos:end="149:19"><expr pos:start="149:5" pos:end="149:18"><call pos:start="149:5" pos:end="149:18"><name pos:start="149:5" pos:end="149:12">free_vlc</name><argument_list pos:start="149:13" pos:end="149:18">(<argument pos:start="149:14" pos:end="149:17"><expr pos:start="149:14" pos:end="149:17"><operator pos:start="149:14" pos:end="149:14">&amp;</operator><name pos:start="149:15" pos:end="149:17">vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="153:5" pos:end="153:13">return <expr pos:start="153:12" pos:end="153:12"><literal type="number" pos:start="153:12" pos:end="153:12">0</literal></expr>;</return>

<label pos:start="155:1" pos:end="155:5"><name pos:start="155:1" pos:end="155:4">fail</name>:</label>

    <expr_stmt pos:start="157:5" pos:end="157:19"><expr pos:start="157:5" pos:end="157:18"><call pos:start="157:5" pos:end="157:18"><name pos:start="157:5" pos:end="157:12">free_vlc</name><argument_list pos:start="157:13" pos:end="157:18">(<argument pos:start="157:14" pos:end="157:17"><expr pos:start="157:14" pos:end="157:17"><operator pos:start="157:14" pos:end="157:14">&amp;</operator><name pos:start="157:15" pos:end="157:17">vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="159:5" pos:end="159:31">return <expr pos:start="159:12" pos:end="159:30"><name pos:start="159:12" pos:end="159:30">AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></function>
</unit>
