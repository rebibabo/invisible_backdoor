<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/317.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:21"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:19">PhysPageDesc</name> <modifier pos:start="1:21" pos:end="1:21">*</modifier></type><name pos:start="1:22" pos:end="1:41">phys_page_find_alloc</name><parameter_list pos:start="1:42" pos:end="1:78">(<parameter pos:start="1:43" pos:end="1:66"><decl pos:start="1:43" pos:end="1:66"><type pos:start="1:43" pos:end="1:66"><name pos:start="1:43" pos:end="1:60">target_phys_addr_t</name></type> <name pos:start="1:62" pos:end="1:66">index</name></decl></parameter>, <parameter pos:start="1:69" pos:end="1:77"><decl pos:start="1:69" pos:end="1:77"><type pos:start="1:69" pos:end="1:77"><name pos:start="1:69" pos:end="1:71">int</name></type> <name pos:start="1:73" pos:end="1:77">alloc</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="65:1">{<block_content pos:start="5:5" pos:end="63:57">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:13"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:8">void</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier><modifier pos:start="5:11" pos:end="5:11">*</modifier></type><name pos:start="5:12" pos:end="5:13">lp</name></decl>, <decl pos:start="5:16" pos:end="5:18"><type ref="prev" pos:start="5:5" pos:end="5:11"><modifier pos:start="5:16" pos:end="5:16">*</modifier><modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:18">p</name></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="20:0"><expr pos:start="9:5" pos:end="9:28"><name pos:start="9:5" pos:end="9:5">p</name> <operator pos:start="9:7" pos:end="9:7">=</operator> <operator pos:start="9:9" pos:end="9:9">(</operator><name pos:start="9:10" pos:end="9:13">void</name> <operator pos:start="9:15" pos:end="9:15">*</operator><operator pos:start="9:16" pos:end="9:16">*</operator><operator pos:start="9:17" pos:end="9:17">)</operator><name pos:start="9:18" pos:end="9:28">l1_phys_map</name></expr>;</expr_stmt>

<cpp:if pos:start="11:1" pos:end="11:36">#<cpp:directive pos:start="11:2" pos:end="11:3">if</cpp:directive> <expr pos:start="11:5" pos:end="11:36"><name pos:start="11:5" pos:end="11:31">TARGET_PHYS_ADDR_SPACE_BITS</name> <operator pos:start="11:33" pos:end="11:33">&gt;</operator> <literal type="number" pos:start="11:35" pos:end="11:36">32</literal></expr></cpp:if>



<cpp:if pos:start="15:1" pos:end="15:48">#<cpp:directive pos:start="15:2" pos:end="15:3">if</cpp:directive> <expr pos:start="15:5" pos:end="15:48"><name pos:start="15:5" pos:end="15:31">TARGET_PHYS_ADDR_SPACE_BITS</name> <operator pos:start="15:33" pos:end="15:33">&gt;</operator> <operator pos:start="15:35" pos:end="15:35">(</operator><literal type="number" pos:start="15:36" pos:end="15:39">32</literal> <operator pos:start="15:39" pos:end="15:39">+</operator> <name pos:start="15:41" pos:end="15:47">L1_BITS</name><operator pos:start="15:48" pos:end="15:48">)</operator></expr></cpp:if>

<cpp:error pos:start="17:1" pos:end="17:46">#<cpp:directive pos:start="17:2" pos:end="17:6">error</cpp:directive> unsupported TARGET_PHYS_ADDR_SPACE_BITS</cpp:error>

<cpp:endif pos:start="19:1" pos:end="19:6">#<cpp:directive pos:start="19:2" pos:end="19:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="21:5" pos:end="21:62"><expr pos:start="21:5" pos:end="21:61"><name pos:start="21:5" pos:end="21:6">lp</name> <operator pos:start="21:8" pos:end="21:8">=</operator> <name pos:start="21:10" pos:end="21:10">p</name> <operator pos:start="21:12" pos:end="21:12">+</operator> <operator pos:start="21:14" pos:end="21:14">(</operator><operator pos:start="21:15" pos:end="21:15">(</operator><name pos:start="21:16" pos:end="21:20">index</name> <operator pos:start="21:22" pos:end="21:23">&gt;&gt;</operator> <operator pos:start="21:25" pos:end="21:25">(</operator><name pos:start="21:26" pos:end="21:32">L1_BITS</name> <operator pos:start="21:34" pos:end="21:34">+</operator> <name pos:start="21:36" pos:end="21:42">L2_BITS</name><operator pos:start="21:43" pos:end="21:43">)</operator><operator pos:start="21:44" pos:end="21:44">)</operator> <operator pos:start="21:46" pos:end="21:46">&amp;</operator> <operator pos:start="21:48" pos:end="21:48">(</operator><name pos:start="21:49" pos:end="21:55">L1_SIZE</name> <operator pos:start="21:57" pos:end="21:57">-</operator> <literal type="number" pos:start="21:59" pos:end="21:59">1</literal><operator pos:start="21:60" pos:end="21:60">)</operator><operator pos:start="21:61" pos:end="21:61">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:12"><expr pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:5">p</name> <operator pos:start="23:7" pos:end="23:7">=</operator> <operator pos:start="23:9" pos:end="23:9">*</operator><name pos:start="23:10" pos:end="23:11">lp</name></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="42:0"><if pos:start="25:5" pos:end="42:0">if <condition pos:start="25:8" pos:end="25:11">(<expr pos:start="25:9" pos:end="25:10"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:10">p</name></expr>)</condition> <block pos:start="25:13" pos:end="42:0">{<block_content pos:start="29:9" pos:end="37:16">

        <comment type="block" pos:start="27:9" pos:end="27:35">/* allocate if not found */</comment>

        <if_stmt pos:start="29:9" pos:end="31:24"><if pos:start="29:9" pos:end="31:24">if <condition pos:start="29:12" pos:end="29:19">(<expr pos:start="29:13" pos:end="29:18"><operator pos:start="29:13" pos:end="29:13">!</operator><name pos:start="29:14" pos:end="29:18">alloc</name></expr>)</condition><block type="pseudo" pos:start="31:13" pos:end="31:24"><block_content pos:start="31:13" pos:end="31:24">

            <return pos:start="31:13" pos:end="31:24">return <expr pos:start="31:20" pos:end="31:23"><name pos:start="31:20" pos:end="31:23">NULL</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:51"><expr pos:start="33:9" pos:end="33:50"><name pos:start="33:9" pos:end="33:9">p</name> <operator pos:start="33:11" pos:end="33:11">=</operator> <call pos:start="33:13" pos:end="33:50"><name pos:start="33:13" pos:end="33:24">qemu_vmalloc</name><argument_list pos:start="33:25" pos:end="33:50">(<argument pos:start="33:26" pos:end="33:49"><expr pos:start="33:26" pos:end="33:49"><sizeof pos:start="33:26" pos:end="33:39">sizeof<argument_list pos:start="33:32" pos:end="33:39">(<argument pos:start="33:33" pos:end="33:38"><expr pos:start="33:33" pos:end="33:38"><name pos:start="33:33" pos:end="33:36">void</name> <operator pos:start="33:38" pos:end="33:38">*</operator></expr></argument>)</argument_list></sizeof> <operator pos:start="33:41" pos:end="33:41">*</operator> <name pos:start="33:43" pos:end="33:49">L1_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:47"><expr pos:start="35:9" pos:end="35:46"><call pos:start="35:9" pos:end="35:46"><name pos:start="35:9" pos:end="35:14">memset</name><argument_list pos:start="35:15" pos:end="35:46">(<argument pos:start="35:16" pos:end="35:16"><expr pos:start="35:16" pos:end="35:16"><name pos:start="35:16" pos:end="35:16">p</name></expr></argument>, <argument pos:start="35:19" pos:end="35:19"><expr pos:start="35:19" pos:end="35:19"><literal type="number" pos:start="35:19" pos:end="35:19">0</literal></expr></argument>, <argument pos:start="35:22" pos:end="35:45"><expr pos:start="35:22" pos:end="35:45"><sizeof pos:start="35:22" pos:end="35:35">sizeof<argument_list pos:start="35:28" pos:end="35:35">(<argument pos:start="35:29" pos:end="35:34"><expr pos:start="35:29" pos:end="35:34"><name pos:start="35:29" pos:end="35:32">void</name> <operator pos:start="35:34" pos:end="35:34">*</operator></expr></argument>)</argument_list></sizeof> <operator pos:start="35:37" pos:end="35:37">*</operator> <name pos:start="35:39" pos:end="35:45">L1_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:16"><expr pos:start="37:9" pos:end="37:15"><operator pos:start="37:9" pos:end="37:9">*</operator><name pos:start="37:10" pos:end="37:11">lp</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <name pos:start="37:15" pos:end="37:15">p</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="41:1" pos:end="41:6">#<cpp:directive pos:start="41:2" pos:end="41:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="43:5" pos:end="43:50"><expr pos:start="43:5" pos:end="43:49"><name pos:start="43:5" pos:end="43:6">lp</name> <operator pos:start="43:8" pos:end="43:8">=</operator> <name pos:start="43:10" pos:end="43:10">p</name> <operator pos:start="43:12" pos:end="43:12">+</operator> <operator pos:start="43:14" pos:end="43:14">(</operator><operator pos:start="43:15" pos:end="43:15">(</operator><name pos:start="43:16" pos:end="43:20">index</name> <operator pos:start="43:22" pos:end="43:23">&gt;&gt;</operator> <name pos:start="43:25" pos:end="43:31">L2_BITS</name><operator pos:start="43:32" pos:end="43:32">)</operator> <operator pos:start="43:34" pos:end="43:34">&amp;</operator> <operator pos:start="43:36" pos:end="43:36">(</operator><name pos:start="43:37" pos:end="43:43">L1_SIZE</name> <operator pos:start="43:45" pos:end="43:45">-</operator> <literal type="number" pos:start="43:47" pos:end="43:47">1</literal><operator pos:start="43:48" pos:end="43:48">)</operator><operator pos:start="43:49" pos:end="43:49">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:12"><expr pos:start="45:5" pos:end="45:11"><name pos:start="45:5" pos:end="45:5">p</name> <operator pos:start="45:7" pos:end="45:7">=</operator> <operator pos:start="45:9" pos:end="45:9">*</operator><name pos:start="45:10" pos:end="45:11">lp</name></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="61:5"><if pos:start="47:5" pos:end="61:5">if <condition pos:start="47:8" pos:end="47:11">(<expr pos:start="47:9" pos:end="47:10"><operator pos:start="47:9" pos:end="47:9">!</operator><name pos:start="47:10" pos:end="47:10">p</name></expr>)</condition> <block pos:start="47:13" pos:end="61:5">{<block_content pos:start="51:9" pos:end="59:16">

        <comment type="block" pos:start="49:9" pos:end="49:35">/* allocate if not found */</comment>

        <if_stmt pos:start="51:9" pos:end="53:24"><if pos:start="51:9" pos:end="53:24">if <condition pos:start="51:12" pos:end="51:19">(<expr pos:start="51:13" pos:end="51:18"><operator pos:start="51:13" pos:end="51:13">!</operator><name pos:start="51:14" pos:end="51:18">alloc</name></expr>)</condition><block type="pseudo" pos:start="53:13" pos:end="53:24"><block_content pos:start="53:13" pos:end="53:24">

            <return pos:start="53:13" pos:end="53:24">return <expr pos:start="53:20" pos:end="53:23"><name pos:start="53:20" pos:end="53:23">NULL</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:57"><expr pos:start="55:9" pos:end="55:56"><name pos:start="55:9" pos:end="55:9">p</name> <operator pos:start="55:11" pos:end="55:11">=</operator> <call pos:start="55:13" pos:end="55:56"><name pos:start="55:13" pos:end="55:24">qemu_vmalloc</name><argument_list pos:start="55:25" pos:end="55:56">(<argument pos:start="55:26" pos:end="55:55"><expr pos:start="55:26" pos:end="55:55"><sizeof pos:start="55:26" pos:end="55:45">sizeof<argument_list pos:start="55:32" pos:end="55:45">(<argument pos:start="55:33" pos:end="55:44"><expr pos:start="55:33" pos:end="55:44"><name pos:start="55:33" pos:end="55:44">PhysPageDesc</name></expr></argument>)</argument_list></sizeof> <operator pos:start="55:47" pos:end="55:47">*</operator> <name pos:start="55:49" pos:end="55:55">L2_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:53"><expr pos:start="57:9" pos:end="57:52"><call pos:start="57:9" pos:end="57:52"><name pos:start="57:9" pos:end="57:14">memset</name><argument_list pos:start="57:15" pos:end="57:52">(<argument pos:start="57:16" pos:end="57:16"><expr pos:start="57:16" pos:end="57:16"><name pos:start="57:16" pos:end="57:16">p</name></expr></argument>, <argument pos:start="57:19" pos:end="57:19"><expr pos:start="57:19" pos:end="57:19"><literal type="number" pos:start="57:19" pos:end="57:19">0</literal></expr></argument>, <argument pos:start="57:22" pos:end="57:51"><expr pos:start="57:22" pos:end="57:51"><sizeof pos:start="57:22" pos:end="57:41">sizeof<argument_list pos:start="57:28" pos:end="57:41">(<argument pos:start="57:29" pos:end="57:40"><expr pos:start="57:29" pos:end="57:40"><name pos:start="57:29" pos:end="57:40">PhysPageDesc</name></expr></argument>)</argument_list></sizeof> <operator pos:start="57:43" pos:end="57:43">*</operator> <name pos:start="57:45" pos:end="57:51">L2_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:16"><expr pos:start="59:9" pos:end="59:15"><operator pos:start="59:9" pos:end="59:9">*</operator><name pos:start="59:10" pos:end="59:11">lp</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <name pos:start="59:15" pos:end="59:15">p</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="63:5" pos:end="63:57">return <expr pos:start="63:12" pos:end="63:56"><operator pos:start="63:12" pos:end="63:12">(</operator><operator pos:start="63:13" pos:end="63:13">(</operator><name pos:start="63:14" pos:end="63:25">PhysPageDesc</name> <operator pos:start="63:27" pos:end="63:27">*</operator><operator pos:start="63:28" pos:end="63:28">)</operator><name pos:start="63:29" pos:end="63:29">p</name><operator pos:start="63:30" pos:end="63:30">)</operator> <operator pos:start="63:32" pos:end="63:32">+</operator> <operator pos:start="63:34" pos:end="63:34">(</operator><name pos:start="63:35" pos:end="63:39">index</name> <operator pos:start="63:41" pos:end="63:41">&amp;</operator> <operator pos:start="63:43" pos:end="63:43">(</operator><name pos:start="63:44" pos:end="63:50">L2_SIZE</name> <operator pos:start="63:52" pos:end="63:52">-</operator> <literal type="number" pos:start="63:54" pos:end="63:54">1</literal><operator pos:start="63:55" pos:end="63:55">)</operator><operator pos:start="63:56" pos:end="63:56">)</operator></expr>;</return>

</block_content>}</block></function>
</unit>
