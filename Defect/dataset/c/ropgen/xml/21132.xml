<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21132.c" pos:tabs="8"><function pos:start="1:1" pos:end="177:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">libkvazaar_encode</name><parameter_list pos:start="1:29" pos:end="7:49">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:50"><name pos:start="1:30" pos:end="1:43">AVCodecContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:44"><decl pos:start="3:30" pos:end="3:44"><type pos:start="3:30" pos:end="3:44"><name pos:start="3:30" pos:end="3:37">AVPacket</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:44">avpkt</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:49"><decl pos:start="5:30" pos:end="5:49"><type pos:start="5:30" pos:end="5:49"><specifier pos:start="5:30" pos:end="5:34">const</specifier> <name pos:start="5:36" pos:end="5:42">AVFrame</name> <modifier pos:start="5:44" pos:end="5:44">*</modifier></type><name pos:start="5:45" pos:end="5:49">frame</name></decl></parameter>,

                             <parameter pos:start="7:30" pos:end="7:48"><decl pos:start="7:30" pos:end="7:48"><type pos:start="7:30" pos:end="7:48"><name pos:start="7:30" pos:end="7:32">int</name> <modifier pos:start="7:34" pos:end="7:34">*</modifier></type><name pos:start="7:35" pos:end="7:48">got_packet_ptr</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="177:1">{<block_content pos:start="11:5" pos:end="175:18">

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:14">retval</name> <init pos:start="11:16" pos:end="11:18">= <expr pos:start="11:18" pos:end="11:18"><literal type="number" pos:start="11:18" pos:end="11:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:31"><decl pos:start="13:5" pos:end="13:30"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:15">kvz_picture</name> <modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:23">img_in</name> <init pos:start="13:25" pos:end="13:30">= <expr pos:start="13:27" pos:end="13:30"><name pos:start="13:27" pos:end="13:30">NULL</name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="17:5" pos:end="17:36"><decl pos:start="17:5" pos:end="17:35"><type pos:start="17:5" pos:end="17:20"><name pos:start="17:5" pos:end="17:18">kvz_data_chunk</name> <modifier pos:start="17:20" pos:end="17:20">*</modifier></type><name pos:start="17:21" pos:end="17:28">data_out</name> <init pos:start="17:30" pos:end="17:35">= <expr pos:start="17:32" pos:end="17:35"><name pos:start="17:32" pos:end="17:35">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:25"><decl pos:start="19:5" pos:end="19:24"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint32_t</name></type> <name pos:start="19:14" pos:end="19:20">len_out</name> <init pos:start="19:22" pos:end="19:24">= <expr pos:start="19:24" pos:end="19:24"><literal type="number" pos:start="19:24" pos:end="19:24">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:30"><decl pos:start="21:5" pos:end="21:29"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:18">kvz_frame_info</name></type> <name pos:start="21:20" pos:end="21:29">frame_info</name></decl>;</decl_stmt>



    <decl_stmt pos:start="25:5" pos:end="25:46"><decl pos:start="25:5" pos:end="25:45"><type pos:start="25:5" pos:end="25:23"><name pos:start="25:5" pos:end="25:21">LibkvazaarContext</name> <modifier pos:start="25:23" pos:end="25:23">*</modifier></type><name pos:start="25:24" pos:end="25:26">ctx</name> <init pos:start="25:28" pos:end="25:45">= <expr pos:start="25:30" pos:end="25:45"><name pos:start="25:30" pos:end="25:45"><name pos:start="25:30" pos:end="25:34">avctx</name><operator pos:start="25:35" pos:end="25:36">-&gt;</operator><name pos:start="25:37" pos:end="25:45">priv_data</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:24"><expr pos:start="29:5" pos:end="29:23"><operator pos:start="29:5" pos:end="29:5">*</operator><name pos:start="29:6" pos:end="29:19">got_packet_ptr</name> <operator pos:start="29:21" pos:end="29:21">=</operator> <literal type="number" pos:start="29:23" pos:end="29:23">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="33:5" pos:end="89:5"><if pos:start="33:5" pos:end="89:5">if <condition pos:start="33:8" pos:end="33:14">(<expr pos:start="33:9" pos:end="33:13"><name pos:start="33:9" pos:end="33:13">frame</name></expr>)</condition> <block pos:start="33:16" pos:end="89:5">{<block_content pos:start="35:9" pos:end="87:9">

        <decl_stmt pos:start="35:9" pos:end="35:18"><decl pos:start="35:9" pos:end="35:17"><type pos:start="35:9" pos:end="35:11"><name pos:start="35:9" pos:end="35:11">int</name></type> <name pos:start="35:13" pos:end="35:13">i</name> <init pos:start="35:15" pos:end="35:17">= <expr pos:start="35:17" pos:end="35:17"><literal type="number" pos:start="35:17" pos:end="35:17">0</literal></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="39:9" pos:end="39:55"><expr pos:start="39:9" pos:end="39:54"><call pos:start="39:9" pos:end="39:54"><name pos:start="39:9" pos:end="39:18">av_assert0</name><argument_list pos:start="39:19" pos:end="39:54">(<argument pos:start="39:20" pos:end="39:53"><expr pos:start="39:20" pos:end="39:53"><name pos:start="39:20" pos:end="39:31"><name pos:start="39:20" pos:end="39:24">frame</name><operator pos:start="39:25" pos:end="39:26">-&gt;</operator><name pos:start="39:27" pos:end="39:31">width</name></name> <operator pos:start="39:33" pos:end="39:34">==</operator> <name pos:start="39:36" pos:end="39:53"><name pos:start="39:36" pos:end="39:38">ctx</name><operator pos:start="39:39" pos:end="39:40">-&gt;</operator><name pos:start="39:41" pos:end="39:46">config</name><operator pos:start="39:47" pos:end="39:48">-&gt;</operator><name pos:start="39:49" pos:end="39:53">width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:57"><expr pos:start="41:9" pos:end="41:56"><call pos:start="41:9" pos:end="41:56"><name pos:start="41:9" pos:end="41:18">av_assert0</name><argument_list pos:start="41:19" pos:end="41:56">(<argument pos:start="41:20" pos:end="41:55"><expr pos:start="41:20" pos:end="41:55"><name pos:start="41:20" pos:end="41:32"><name pos:start="41:20" pos:end="41:24">frame</name><operator pos:start="41:25" pos:end="41:26">-&gt;</operator><name pos:start="41:27" pos:end="41:32">height</name></name> <operator pos:start="41:34" pos:end="41:35">==</operator> <name pos:start="41:37" pos:end="41:55"><name pos:start="41:37" pos:end="41:39">ctx</name><operator pos:start="41:40" pos:end="41:41">-&gt;</operator><name pos:start="41:42" pos:end="41:47">config</name><operator pos:start="41:48" pos:end="41:49">-&gt;</operator><name pos:start="41:50" pos:end="41:55">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:52"><expr pos:start="43:9" pos:end="43:51"><call pos:start="43:9" pos:end="43:51"><name pos:start="43:9" pos:end="43:18">av_assert0</name><argument_list pos:start="43:19" pos:end="43:51">(<argument pos:start="43:20" pos:end="43:50"><expr pos:start="43:20" pos:end="43:50"><name pos:start="43:20" pos:end="43:32"><name pos:start="43:20" pos:end="43:24">frame</name><operator pos:start="43:25" pos:end="43:26">-&gt;</operator><name pos:start="43:27" pos:end="43:32">format</name></name> <operator pos:start="43:34" pos:end="43:35">==</operator> <name pos:start="43:37" pos:end="43:50"><name pos:start="43:37" pos:end="43:41">avctx</name><operator pos:start="43:42" pos:end="43:43">-&gt;</operator><name pos:start="43:44" pos:end="43:50">pix_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="line" pos:start="47:9" pos:end="47:46">// Allocate input picture for kvazaar.</comment>

        <expr_stmt pos:start="49:9" pos:end="49:70"><expr pos:start="49:9" pos:end="49:69"><name pos:start="49:9" pos:end="49:14">img_in</name> <operator pos:start="49:16" pos:end="49:16">=</operator> <call pos:start="49:18" pos:end="49:69"><name pos:start="49:18" pos:end="49:40"><name pos:start="49:18" pos:end="49:20">ctx</name><operator pos:start="49:21" pos:end="49:22">-&gt;</operator><name pos:start="49:23" pos:end="49:25">api</name><operator pos:start="49:26" pos:end="49:27">-&gt;</operator><name pos:start="49:28" pos:end="49:40">picture_alloc</name></name><argument_list pos:start="49:41" pos:end="49:69">(<argument pos:start="49:42" pos:end="49:53"><expr pos:start="49:42" pos:end="49:53"><name pos:start="49:42" pos:end="49:53"><name pos:start="49:42" pos:end="49:46">frame</name><operator pos:start="49:47" pos:end="49:48">-&gt;</operator><name pos:start="49:49" pos:end="49:53">width</name></name></expr></argument>, <argument pos:start="49:56" pos:end="49:68"><expr pos:start="49:56" pos:end="49:68"><name pos:start="49:56" pos:end="49:68"><name pos:start="49:56" pos:end="49:60">frame</name><operator pos:start="49:61" pos:end="49:62">-&gt;</operator><name pos:start="49:63" pos:end="49:68">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="51:9" pos:end="59:9"><if pos:start="51:9" pos:end="59:9">if <condition pos:start="51:12" pos:end="51:20">(<expr pos:start="51:13" pos:end="51:19"><operator pos:start="51:13" pos:end="51:13">!</operator><name pos:start="51:14" pos:end="51:19">img_in</name></expr>)</condition> <block pos:start="51:22" pos:end="59:9">{<block_content pos:start="53:13" pos:end="57:22">

            <expr_stmt pos:start="53:13" pos:end="53:73"><expr pos:start="53:13" pos:end="53:72"><call pos:start="53:13" pos:end="53:72"><name pos:start="53:13" pos:end="53:18">av_log</name><argument_list pos:start="53:19" pos:end="53:72">(<argument pos:start="53:20" pos:end="53:24"><expr pos:start="53:20" pos:end="53:24"><name pos:start="53:20" pos:end="53:24">avctx</name></expr></argument>, <argument pos:start="53:27" pos:end="53:38"><expr pos:start="53:27" pos:end="53:38"><name pos:start="53:27" pos:end="53:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="53:41" pos:end="53:71"><expr pos:start="53:41" pos:end="53:71"><literal type="string" pos:start="53:41" pos:end="53:71">"Failed to allocate picture.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:37"><expr pos:start="55:13" pos:end="55:36"><name pos:start="55:13" pos:end="55:18">retval</name> <operator pos:start="55:20" pos:end="55:20">=</operator> <call pos:start="55:22" pos:end="55:36"><name pos:start="55:22" pos:end="55:28">AVERROR</name><argument_list pos:start="55:29" pos:end="55:36">(<argument pos:start="55:30" pos:end="55:35"><expr pos:start="55:30" pos:end="55:35"><name pos:start="55:30" pos:end="55:35">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="57:13" pos:end="57:22">goto <name pos:start="57:18" pos:end="57:21">done</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="line" pos:start="63:9" pos:end="63:44">// Copy pixels from frame to img_in.</comment>

        <for pos:start="65:9" pos:end="87:9">for <control pos:start="65:13" pos:end="65:31">(<init pos:start="65:14" pos:end="65:19"><expr pos:start="65:14" pos:end="65:18"><name pos:start="65:14" pos:end="65:14">i</name> <operator pos:start="65:16" pos:end="65:16">=</operator> <literal type="number" pos:start="65:18" pos:end="65:18">0</literal></expr>;</init> <condition pos:start="65:21" pos:end="65:26"><expr pos:start="65:21" pos:end="65:25"><name pos:start="65:21" pos:end="65:21">i</name> <operator pos:start="65:23" pos:end="65:23">&lt;</operator> <literal type="number" pos:start="65:25" pos:end="65:25">3</literal></expr>;</condition> <incr pos:start="65:28" pos:end="65:30"><expr pos:start="65:28" pos:end="65:30"><operator pos:start="65:28" pos:end="65:29">++</operator><name pos:start="65:30" pos:end="65:30">i</name></expr></incr>)</control> <block pos:start="65:33" pos:end="87:9">{<block_content pos:start="67:13" pos:end="85:13">

            <decl_stmt pos:start="67:13" pos:end="67:43"><decl pos:start="67:13" pos:end="67:42"><type pos:start="67:13" pos:end="67:21"><name pos:start="67:13" pos:end="67:19">uint8_t</name> <modifier pos:start="67:21" pos:end="67:21">*</modifier></type><name pos:start="67:22" pos:end="67:24">dst</name> <init pos:start="67:26" pos:end="67:42">= <expr pos:start="67:28" pos:end="67:42"><name pos:start="67:28" pos:end="67:42"><name pos:start="67:28" pos:end="67:33">img_in</name><operator pos:start="67:34" pos:end="67:35">-&gt;</operator><name pos:start="67:36" pos:end="67:39">data</name><index pos:start="67:40" pos:end="67:42">[<expr pos:start="67:41" pos:end="67:41"><name pos:start="67:41" pos:end="67:41">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="69:13" pos:end="69:42"><decl pos:start="69:13" pos:end="69:41"><type pos:start="69:13" pos:end="69:21"><name pos:start="69:13" pos:end="69:19">uint8_t</name> <modifier pos:start="69:21" pos:end="69:21">*</modifier></type><name pos:start="69:22" pos:end="69:24">src</name> <init pos:start="69:26" pos:end="69:41">= <expr pos:start="69:28" pos:end="69:41"><name pos:start="69:28" pos:end="69:41"><name pos:start="69:28" pos:end="69:32">frame</name><operator pos:start="69:33" pos:end="69:34">-&gt;</operator><name pos:start="69:35" pos:end="69:38">data</name><index pos:start="69:39" pos:end="69:41">[<expr pos:start="69:40" pos:end="69:40"><name pos:start="69:40" pos:end="69:40">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="71:13" pos:end="71:69"><decl pos:start="71:13" pos:end="71:68"><type pos:start="71:13" pos:end="71:15"><name pos:start="71:13" pos:end="71:15">int</name></type> <name pos:start="71:17" pos:end="71:21">width</name> <init pos:start="71:23" pos:end="71:68">= <expr pos:start="71:25" pos:end="71:68"><ternary pos:start="71:25" pos:end="71:68"><condition pos:start="71:25" pos:end="71:34"><expr pos:start="71:25" pos:end="71:32"><operator pos:start="71:25" pos:end="71:25">(</operator><name pos:start="71:26" pos:end="71:26">i</name> <operator pos:start="71:28" pos:end="71:29">==</operator> <literal type="number" pos:start="71:31" pos:end="71:31">0</literal><operator pos:start="71:32" pos:end="71:32">)</operator></expr> ?</condition><then pos:start="71:36" pos:end="71:47"> <expr pos:start="71:36" pos:end="71:47"><name pos:start="71:36" pos:end="71:47"><name pos:start="71:36" pos:end="71:40">frame</name><operator pos:start="71:41" pos:end="71:42">-&gt;</operator><name pos:start="71:43" pos:end="71:47">width</name></name></expr> </then><else pos:start="71:49" pos:end="71:68">: <expr pos:start="71:51" pos:end="71:68"><operator pos:start="71:51" pos:end="71:51">(</operator><name pos:start="71:52" pos:end="71:63"><name pos:start="71:52" pos:end="71:56">frame</name><operator pos:start="71:57" pos:end="71:58">-&gt;</operator><name pos:start="71:59" pos:end="71:63">width</name></name> <operator pos:start="71:65" pos:end="71:65">/</operator> <literal type="number" pos:start="71:67" pos:end="71:67">2</literal><operator pos:start="71:68" pos:end="71:68">)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="73:13" pos:end="73:72"><decl pos:start="73:13" pos:end="73:71"><type pos:start="73:13" pos:end="73:15"><name pos:start="73:13" pos:end="73:15">int</name></type> <name pos:start="73:17" pos:end="73:22">height</name> <init pos:start="73:24" pos:end="73:71">= <expr pos:start="73:26" pos:end="73:71"><ternary pos:start="73:26" pos:end="73:71"><condition pos:start="73:26" pos:end="73:35"><expr pos:start="73:26" pos:end="73:33"><operator pos:start="73:26" pos:end="73:26">(</operator><name pos:start="73:27" pos:end="73:27">i</name> <operator pos:start="73:29" pos:end="73:30">==</operator> <literal type="number" pos:start="73:32" pos:end="73:32">0</literal><operator pos:start="73:33" pos:end="73:33">)</operator></expr> ?</condition><then pos:start="73:37" pos:end="73:49"> <expr pos:start="73:37" pos:end="73:49"><name pos:start="73:37" pos:end="73:49"><name pos:start="73:37" pos:end="73:41">frame</name><operator pos:start="73:42" pos:end="73:43">-&gt;</operator><name pos:start="73:44" pos:end="73:49">height</name></name></expr> </then><else pos:start="73:51" pos:end="73:71">: <expr pos:start="73:53" pos:end="73:71"><operator pos:start="73:53" pos:end="73:53">(</operator><name pos:start="73:54" pos:end="73:66"><name pos:start="73:54" pos:end="73:58">frame</name><operator pos:start="73:59" pos:end="73:60">-&gt;</operator><name pos:start="73:61" pos:end="73:66">height</name></name> <operator pos:start="73:68" pos:end="73:68">/</operator> <literal type="number" pos:start="73:70" pos:end="73:70">2</literal><operator pos:start="73:71" pos:end="73:71">)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="75:13" pos:end="75:22"><decl pos:start="75:13" pos:end="75:21"><type pos:start="75:13" pos:end="75:15"><name pos:start="75:13" pos:end="75:15">int</name></type> <name pos:start="75:17" pos:end="75:17">y</name> <init pos:start="75:19" pos:end="75:21">= <expr pos:start="75:21" pos:end="75:21"><literal type="number" pos:start="75:21" pos:end="75:21">0</literal></expr></init></decl>;</decl_stmt>

            <for pos:start="77:13" pos:end="85:13">for <control pos:start="77:17" pos:end="77:40">(<init pos:start="77:18" pos:end="77:23"><expr pos:start="77:18" pos:end="77:22"><name pos:start="77:18" pos:end="77:18">y</name> <operator pos:start="77:20" pos:end="77:20">=</operator> <literal type="number" pos:start="77:22" pos:end="77:22">0</literal></expr>;</init> <condition pos:start="77:25" pos:end="77:35"><expr pos:start="77:25" pos:end="77:34"><name pos:start="77:25" pos:end="77:25">y</name> <operator pos:start="77:27" pos:end="77:27">&lt;</operator> <name pos:start="77:29" pos:end="77:34">height</name></expr>;</condition> <incr pos:start="77:37" pos:end="77:39"><expr pos:start="77:37" pos:end="77:39"><operator pos:start="77:37" pos:end="77:38">++</operator><name pos:start="77:39" pos:end="77:39">y</name></expr></incr>)</control> <block pos:start="77:42" pos:end="85:13">{<block_content pos:start="79:17" pos:end="83:29">

                <expr_stmt pos:start="79:17" pos:end="79:40"><expr pos:start="79:17" pos:end="79:39"><call pos:start="79:17" pos:end="79:39"><name pos:start="79:17" pos:end="79:22">memcpy</name><argument_list pos:start="79:23" pos:end="79:39">(<argument pos:start="79:24" pos:end="79:26"><expr pos:start="79:24" pos:end="79:26"><name pos:start="79:24" pos:end="79:26">dst</name></expr></argument>, <argument pos:start="79:29" pos:end="79:31"><expr pos:start="79:29" pos:end="79:31"><name pos:start="79:29" pos:end="79:31">src</name></expr></argument>, <argument pos:start="79:34" pos:end="79:38"><expr pos:start="79:34" pos:end="79:38"><name pos:start="79:34" pos:end="79:38">width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="81:17" pos:end="81:42"><expr pos:start="81:17" pos:end="81:41"><name pos:start="81:17" pos:end="81:19">src</name> <operator pos:start="81:21" pos:end="81:22">+=</operator> <name pos:start="81:24" pos:end="81:41"><name pos:start="81:24" pos:end="81:28">frame</name><operator pos:start="81:29" pos:end="81:30">-&gt;</operator><name pos:start="81:31" pos:end="81:38">linesize</name><index pos:start="81:39" pos:end="81:41">[<expr pos:start="81:40" pos:end="81:40"><name pos:start="81:40" pos:end="81:40">i</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="83:17" pos:end="83:29"><expr pos:start="83:17" pos:end="83:28"><name pos:start="83:17" pos:end="83:19">dst</name> <operator pos:start="83:21" pos:end="83:22">+=</operator> <name pos:start="83:24" pos:end="83:28">width</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="93:5" pos:end="107:5"><if pos:start="93:5" pos:end="107:5">if <condition pos:start="93:8" pos:end="99:47">(<expr pos:start="93:9" pos:end="99:46"><operator pos:start="93:9" pos:end="93:9">!</operator><call pos:start="93:10" pos:end="99:46"><name pos:start="93:10" pos:end="93:33"><name pos:start="93:10" pos:end="93:12">ctx</name><operator pos:start="93:13" pos:end="93:14">-&gt;</operator><name pos:start="93:15" pos:end="93:17">api</name><operator pos:start="93:18" pos:end="93:19">-&gt;</operator><name pos:start="93:20" pos:end="93:33">encoder_encode</name></name><argument_list pos:start="93:34" pos:end="99:46">(<argument pos:start="93:35" pos:end="93:46"><expr pos:start="93:35" pos:end="93:46"><name pos:start="93:35" pos:end="93:46"><name pos:start="93:35" pos:end="93:37">ctx</name><operator pos:start="93:38" pos:end="93:39">-&gt;</operator><name pos:start="93:40" pos:end="93:46">encoder</name></name></expr></argument>, <argument pos:start="93:49" pos:end="93:54"><expr pos:start="93:49" pos:end="93:54"><name pos:start="93:49" pos:end="93:54">img_in</name></expr></argument>,

                                  <argument pos:start="95:35" pos:end="95:43"><expr pos:start="95:35" pos:end="95:43"><operator pos:start="95:35" pos:end="95:35">&amp;</operator><name pos:start="95:36" pos:end="95:43">data_out</name></expr></argument>, <argument pos:start="95:46" pos:end="95:53"><expr pos:start="95:46" pos:end="95:53"><operator pos:start="95:46" pos:end="95:46">&amp;</operator><name pos:start="95:47" pos:end="95:53">len_out</name></expr></argument>,

                                  <argument pos:start="97:35" pos:end="97:38"><expr pos:start="97:35" pos:end="97:38"><name pos:start="97:35" pos:end="97:38">NULL</name></expr></argument>, <argument pos:start="97:41" pos:end="97:44"><expr pos:start="97:41" pos:end="97:44"><name pos:start="97:41" pos:end="97:44">NULL</name></expr></argument>,

                                  <argument pos:start="99:35" pos:end="99:45"><expr pos:start="99:35" pos:end="99:45"><operator pos:start="99:35" pos:end="99:35">&amp;</operator><name pos:start="99:36" pos:end="99:45">frame_info</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="99:49" pos:end="107:5">{<block_content pos:start="101:9" pos:end="105:18">

        <expr_stmt pos:start="101:9" pos:end="101:65"><expr pos:start="101:9" pos:end="101:64"><call pos:start="101:9" pos:end="101:64"><name pos:start="101:9" pos:end="101:14">av_log</name><argument_list pos:start="101:15" pos:end="101:64">(<argument pos:start="101:16" pos:end="101:20"><expr pos:start="101:16" pos:end="101:20"><name pos:start="101:16" pos:end="101:20">avctx</name></expr></argument>, <argument pos:start="101:23" pos:end="101:34"><expr pos:start="101:23" pos:end="101:34"><name pos:start="101:23" pos:end="101:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="101:37" pos:end="101:63"><expr pos:start="101:37" pos:end="101:63"><literal type="string" pos:start="101:37" pos:end="101:63">"Failed to encode frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:34"><expr pos:start="103:9" pos:end="103:33"><name pos:start="103:9" pos:end="103:14">retval</name> <operator pos:start="103:16" pos:end="103:16">=</operator> <name pos:start="103:18" pos:end="103:33">AVERROR_EXTERNAL</name></expr>;</expr_stmt>

        <goto pos:start="105:9" pos:end="105:18">goto <name pos:start="105:14" pos:end="105:17">done</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="111:5" pos:end="165:5"><if pos:start="111:5" pos:end="165:5">if <condition pos:start="111:8" pos:end="111:17">(<expr pos:start="111:9" pos:end="111:16"><name pos:start="111:9" pos:end="111:16">data_out</name></expr>)</condition> <block pos:start="111:19" pos:end="165:5">{<block_content pos:start="113:9" pos:end="163:9">

        <decl_stmt pos:start="113:9" pos:end="113:37"><decl pos:start="113:9" pos:end="113:36"><type pos:start="113:9" pos:end="113:24"><name pos:start="113:9" pos:end="113:22">kvz_data_chunk</name> <modifier pos:start="113:24" pos:end="113:24">*</modifier></type><name pos:start="113:25" pos:end="113:29">chunk</name> <init pos:start="113:31" pos:end="113:36">= <expr pos:start="113:33" pos:end="113:36"><name pos:start="113:33" pos:end="113:36">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="115:9" pos:end="115:29"><decl pos:start="115:9" pos:end="115:28"><type pos:start="115:9" pos:end="115:16"><name pos:start="115:9" pos:end="115:16">uint64_t</name></type> <name pos:start="115:18" pos:end="115:24">written</name> <init pos:start="115:26" pos:end="115:28">= <expr pos:start="115:28" pos:end="115:28"><literal type="number" pos:start="115:28" pos:end="115:28">0</literal></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="119:9" pos:end="119:49"><expr pos:start="119:9" pos:end="119:48"><name pos:start="119:9" pos:end="119:14">retval</name> <operator pos:start="119:16" pos:end="119:16">=</operator> <call pos:start="119:18" pos:end="119:48"><name pos:start="119:18" pos:end="119:32">ff_alloc_packet</name><argument_list pos:start="119:33" pos:end="119:48">(<argument pos:start="119:34" pos:end="119:38"><expr pos:start="119:34" pos:end="119:38"><name pos:start="119:34" pos:end="119:38">avpkt</name></expr></argument>, <argument pos:start="119:41" pos:end="119:47"><expr pos:start="119:41" pos:end="119:47"><name pos:start="119:41" pos:end="119:47">len_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="121:9" pos:end="127:9"><if pos:start="121:9" pos:end="127:9">if <condition pos:start="121:12" pos:end="121:23">(<expr pos:start="121:13" pos:end="121:22"><name pos:start="121:13" pos:end="121:18">retval</name> <operator pos:start="121:20" pos:end="121:20">&lt;</operator> <literal type="number" pos:start="121:22" pos:end="121:22">0</literal></expr>)</condition> <block pos:start="121:25" pos:end="127:9">{<block_content pos:start="123:13" pos:end="125:22">

            <expr_stmt pos:start="123:13" pos:end="123:79"><expr pos:start="123:13" pos:end="123:78"><call pos:start="123:13" pos:end="123:78"><name pos:start="123:13" pos:end="123:18">av_log</name><argument_list pos:start="123:19" pos:end="123:78">(<argument pos:start="123:20" pos:end="123:24"><expr pos:start="123:20" pos:end="123:24"><name pos:start="123:20" pos:end="123:24">avctx</name></expr></argument>, <argument pos:start="123:27" pos:end="123:38"><expr pos:start="123:27" pos:end="123:38"><name pos:start="123:27" pos:end="123:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="123:41" pos:end="123:77"><expr pos:start="123:41" pos:end="123:77"><literal type="string" pos:start="123:41" pos:end="123:77">"Failed to allocate output packet.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="125:13" pos:end="125:22">goto <name pos:start="125:18" pos:end="125:21">done</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <for pos:start="131:9" pos:end="139:9">for <control pos:start="131:13" pos:end="131:66">(<init pos:start="131:14" pos:end="131:30"><expr pos:start="131:14" pos:end="131:29"><name pos:start="131:14" pos:end="131:18">chunk</name> <operator pos:start="131:20" pos:end="131:20">=</operator> <name pos:start="131:22" pos:end="131:29">data_out</name></expr>;</init> <condition pos:start="131:32" pos:end="131:45"><expr pos:start="131:32" pos:end="131:44"><name pos:start="131:32" pos:end="131:36">chunk</name> <operator pos:start="131:38" pos:end="131:39">!=</operator> <name pos:start="131:41" pos:end="131:44">NULL</name></expr>;</condition> <incr pos:start="131:47" pos:end="131:65"><expr pos:start="131:47" pos:end="131:65"><name pos:start="131:47" pos:end="131:51">chunk</name> <operator pos:start="131:53" pos:end="131:53">=</operator> <name pos:start="131:55" pos:end="131:65"><name pos:start="131:55" pos:end="131:59">chunk</name><operator pos:start="131:60" pos:end="131:61">-&gt;</operator><name pos:start="131:62" pos:end="131:65">next</name></name></expr></incr>)</control> <block pos:start="131:68" pos:end="139:9">{<block_content pos:start="133:13" pos:end="137:34">

            <expr_stmt pos:start="133:13" pos:end="133:56"><expr pos:start="133:13" pos:end="133:55"><call pos:start="133:13" pos:end="133:55"><name pos:start="133:13" pos:end="133:22">av_assert0</name><argument_list pos:start="133:23" pos:end="133:55">(<argument pos:start="133:24" pos:end="133:54"><expr pos:start="133:24" pos:end="133:54"><name pos:start="133:24" pos:end="133:30">written</name> <operator pos:start="133:32" pos:end="133:32">+</operator> <name pos:start="133:34" pos:end="133:43"><name pos:start="133:34" pos:end="133:38">chunk</name><operator pos:start="133:39" pos:end="133:40">-&gt;</operator><name pos:start="133:41" pos:end="133:43">len</name></name> <operator pos:start="133:45" pos:end="133:46">&lt;=</operator> <name pos:start="133:48" pos:end="133:54">len_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:67"><expr pos:start="135:13" pos:end="135:66"><call pos:start="135:13" pos:end="135:66"><name pos:start="135:13" pos:end="135:18">memcpy</name><argument_list pos:start="135:19" pos:end="135:66">(<argument pos:start="135:20" pos:end="135:40"><expr pos:start="135:20" pos:end="135:40"><name pos:start="135:20" pos:end="135:30"><name pos:start="135:20" pos:end="135:24">avpkt</name><operator pos:start="135:25" pos:end="135:26">-&gt;</operator><name pos:start="135:27" pos:end="135:30">data</name></name> <operator pos:start="135:32" pos:end="135:32">+</operator> <name pos:start="135:34" pos:end="135:40">written</name></expr></argument>, <argument pos:start="135:43" pos:end="135:53"><expr pos:start="135:43" pos:end="135:53"><name pos:start="135:43" pos:end="135:53"><name pos:start="135:43" pos:end="135:47">chunk</name><operator pos:start="135:48" pos:end="135:49">-&gt;</operator><name pos:start="135:50" pos:end="135:53">data</name></name></expr></argument>, <argument pos:start="135:56" pos:end="135:65"><expr pos:start="135:56" pos:end="135:65"><name pos:start="135:56" pos:end="135:65"><name pos:start="135:56" pos:end="135:60">chunk</name><operator pos:start="135:61" pos:end="135:62">-&gt;</operator><name pos:start="135:63" pos:end="135:65">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:34"><expr pos:start="137:13" pos:end="137:33"><name pos:start="137:13" pos:end="137:19">written</name> <operator pos:start="137:21" pos:end="137:22">+=</operator> <name pos:start="137:24" pos:end="137:33"><name pos:start="137:24" pos:end="137:28">chunk</name><operator pos:start="137:29" pos:end="137:30">-&gt;</operator><name pos:start="137:31" pos:end="137:33">len</name></name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="141:9" pos:end="141:28"><expr pos:start="141:9" pos:end="141:27"><operator pos:start="141:9" pos:end="141:9">*</operator><name pos:start="141:10" pos:end="141:23">got_packet_ptr</name> <operator pos:start="141:25" pos:end="141:25">=</operator> <literal type="number" pos:start="141:27" pos:end="141:27">1</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="145:9" pos:end="145:39"><expr pos:start="145:9" pos:end="145:38"><call pos:start="145:9" pos:end="145:38"><name pos:start="145:9" pos:end="145:28"><name pos:start="145:9" pos:end="145:11">ctx</name><operator pos:start="145:12" pos:end="145:13">-&gt;</operator><name pos:start="145:14" pos:end="145:16">api</name><operator pos:start="145:17" pos:end="145:18">-&gt;</operator><name pos:start="145:19" pos:end="145:28">chunk_free</name></name><argument_list pos:start="145:29" pos:end="145:38">(<argument pos:start="145:30" pos:end="145:37"><expr pos:start="145:30" pos:end="145:37"><name pos:start="145:30" pos:end="145:37">data_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:24"><expr pos:start="147:9" pos:end="147:23"><name pos:start="147:9" pos:end="147:16">data_out</name> <operator pos:start="147:18" pos:end="147:18">=</operator> <name pos:start="147:20" pos:end="147:23">NULL</name></expr>;</expr_stmt>



        <expr_stmt pos:start="151:9" pos:end="151:25"><expr pos:start="151:9" pos:end="151:24"><name pos:start="151:9" pos:end="151:20"><name pos:start="151:9" pos:end="151:13">avpkt</name><operator pos:start="151:14" pos:end="151:15">-&gt;</operator><name pos:start="151:16" pos:end="151:20">flags</name></name> <operator pos:start="151:22" pos:end="151:22">=</operator> <literal type="number" pos:start="151:24" pos:end="151:24">0</literal></expr>;</expr_stmt>

        <comment type="line" pos:start="153:9" pos:end="153:49">// IRAP VCL NAL unit types span the range</comment>

        <comment type="line" pos:start="155:9" pos:end="155:48">// [BLA_W_LP (16), RSV_IRAP_VCL23 (23)].</comment>

        <if_stmt pos:start="157:9" pos:end="163:9"><if pos:start="157:9" pos:end="163:9">if <condition pos:start="157:12" pos:end="159:67">(<expr pos:start="157:13" pos:end="159:66"><name pos:start="157:13" pos:end="157:36"><name pos:start="157:13" pos:end="157:22">frame_info</name><operator pos:start="157:23" pos:end="157:23">.</operator><name pos:start="157:24" pos:end="157:36">nal_unit_type</name></name> <operator pos:start="157:38" pos:end="157:39">&gt;=</operator> <name pos:start="157:41" pos:end="157:56">KVZ_NAL_BLA_W_LP</name> <operator pos:start="157:58" pos:end="157:59">&amp;&amp;</operator>

                <name pos:start="159:17" pos:end="159:40"><name pos:start="159:17" pos:end="159:26">frame_info</name><operator pos:start="159:27" pos:end="159:27">.</operator><name pos:start="159:28" pos:end="159:40">nal_unit_type</name></name> <operator pos:start="159:42" pos:end="159:43">&lt;=</operator> <name pos:start="159:45" pos:end="159:66">KVZ_NAL_RSV_IRAP_VCL23</name></expr>)</condition> <block pos:start="159:69" pos:end="163:9">{<block_content pos:start="161:13" pos:end="161:44">

            <expr_stmt pos:start="161:13" pos:end="161:44"><expr pos:start="161:13" pos:end="161:43"><name pos:start="161:13" pos:end="161:24"><name pos:start="161:13" pos:end="161:17">avpkt</name><operator pos:start="161:18" pos:end="161:19">-&gt;</operator><name pos:start="161:20" pos:end="161:24">flags</name></name> <operator pos:start="161:26" pos:end="161:27">|=</operator> <name pos:start="161:29" pos:end="161:43">AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="169:1" pos:end="169:5"><name pos:start="169:1" pos:end="169:4">done</name>:</label>

    <expr_stmt pos:start="171:5" pos:end="171:35"><expr pos:start="171:5" pos:end="171:34"><call pos:start="171:5" pos:end="171:34"><name pos:start="171:5" pos:end="171:26"><name pos:start="171:5" pos:end="171:7">ctx</name><operator pos:start="171:8" pos:end="171:9">-&gt;</operator><name pos:start="171:10" pos:end="171:12">api</name><operator pos:start="171:13" pos:end="171:14">-&gt;</operator><name pos:start="171:15" pos:end="171:26">picture_free</name></name><argument_list pos:start="171:27" pos:end="171:34">(<argument pos:start="171:28" pos:end="171:33"><expr pos:start="171:28" pos:end="171:33"><name pos:start="171:28" pos:end="171:33">img_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="173:5" pos:end="173:35"><expr pos:start="173:5" pos:end="173:34"><call pos:start="173:5" pos:end="173:34"><name pos:start="173:5" pos:end="173:24"><name pos:start="173:5" pos:end="173:7">ctx</name><operator pos:start="173:8" pos:end="173:9">-&gt;</operator><name pos:start="173:10" pos:end="173:12">api</name><operator pos:start="173:13" pos:end="173:14">-&gt;</operator><name pos:start="173:15" pos:end="173:24">chunk_free</name></name><argument_list pos:start="173:25" pos:end="173:34">(<argument pos:start="173:26" pos:end="173:33"><expr pos:start="173:26" pos:end="173:33"><name pos:start="173:26" pos:end="173:33">data_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="175:5" pos:end="175:18">return <expr pos:start="175:12" pos:end="175:17"><name pos:start="175:12" pos:end="175:17">retval</name></expr>;</return>

</block_content>}</block></function>
</unit>
