<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9028.c" pos:tabs="8"><function pos:start="1:1" pos:end="137:1"><type pos:start="1:1" pos:end="1:27"><name pos:start="1:1" pos:end="1:25">GuestLogicalProcessorList</name> <modifier pos:start="1:27" pos:end="1:27">*</modifier></type><name pos:start="1:28" pos:end="1:46">qmp_guest_get_vcpus</name><parameter_list pos:start="1:47" pos:end="1:60">(<parameter pos:start="1:48" pos:end="1:59"><decl pos:start="1:48" pos:end="1:59"><type pos:start="1:48" pos:end="1:55"><name pos:start="1:48" pos:end="1:52">Error</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier><modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:59">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="137:1">{<block_content pos:start="5:5" pos:end="135:16">

    <decl_stmt pos:start="5:5" pos:end="5:53"><decl pos:start="5:5" pos:end="5:47"><type pos:start="5:5" pos:end="5:41"><name pos:start="5:5" pos:end="5:41">PSYSTEM_LOGICAL_PROCESSOR_INFORMATION</name></type> <name pos:start="5:43" pos:end="5:47">pslpi</name></decl>, <decl pos:start="5:50" pos:end="5:52"><type ref="prev" pos:start="5:5" pos:end="5:41"/><name pos:start="5:50" pos:end="5:52">ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:9"><name pos:start="7:5" pos:end="7:9">DWORD</name></type> <name pos:start="7:11" pos:end="7:16">length</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:44"><decl pos:start="9:5" pos:end="9:35"><type pos:start="9:5" pos:end="9:31"><name pos:start="9:5" pos:end="9:29">GuestLogicalProcessorList</name> <modifier pos:start="9:31" pos:end="9:31">*</modifier></type><name pos:start="9:32" pos:end="9:35">head</name></decl>, <decl pos:start="9:38" pos:end="9:43"><type ref="prev" pos:start="9:5" pos:end="9:31"><modifier pos:start="9:38" pos:end="9:38">*</modifier><modifier pos:start="9:39" pos:end="9:39">*</modifier></type><name pos:start="9:40" pos:end="9:43">link</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">Error</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:20">local_err</name> <init pos:start="11:22" pos:end="11:27">= <expr pos:start="11:24" pos:end="11:27"><name pos:start="11:24" pos:end="11:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">int64_t</name></type> <name pos:start="13:13" pos:end="13:19">current</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:23"><expr pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:7">ptr</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <name pos:start="17:11" pos:end="17:15">pslpi</name> <operator pos:start="17:17" pos:end="17:17">=</operator> <name pos:start="17:19" pos:end="17:22">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:15"><expr pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:10">length</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <literal type="number" pos:start="19:14" pos:end="19:14">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:16"><expr pos:start="21:5" pos:end="21:15"><name pos:start="21:5" pos:end="21:11">current</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <literal type="number" pos:start="21:15" pos:end="21:15">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:16"><expr pos:start="23:5" pos:end="23:15"><name pos:start="23:5" pos:end="23:8">head</name> <operator pos:start="23:10" pos:end="23:10">=</operator> <name pos:start="23:12" pos:end="23:15">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:17"><expr pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:8">link</name> <operator pos:start="25:10" pos:end="25:10">=</operator> <operator pos:start="25:12" pos:end="25:12">&amp;</operator><name pos:start="25:13" pos:end="25:16">head</name></expr>;</expr_stmt>



    <if_stmt pos:start="29:5" pos:end="53:5"><if pos:start="29:5" pos:end="45:5">if <condition pos:start="29:8" pos:end="33:64">(<expr pos:start="29:9" pos:end="33:63"><operator pos:start="29:9" pos:end="29:9">(</operator><call pos:start="29:10" pos:end="29:55"><name pos:start="29:10" pos:end="29:39">GetLogicalProcessorInformation</name><argument_list pos:start="29:40" pos:end="29:55">(<argument pos:start="29:41" pos:end="29:45"><expr pos:start="29:41" pos:end="29:45"><name pos:start="29:41" pos:end="29:45">pslpi</name></expr></argument>, <argument pos:start="29:48" pos:end="29:54"><expr pos:start="29:48" pos:end="29:54"><operator pos:start="29:48" pos:end="29:48">&amp;</operator><name pos:start="29:49" pos:end="29:54">length</name></expr></argument>)</argument_list></call> <operator pos:start="29:57" pos:end="29:58">==</operator> <name pos:start="29:60" pos:end="29:64">FALSE</name><operator pos:start="29:65" pos:end="29:65">)</operator> <operator pos:start="29:67" pos:end="29:68">&amp;&amp;</operator>

        <operator pos:start="31:9" pos:end="31:9">(</operator><call pos:start="31:10" pos:end="31:23"><name pos:start="31:10" pos:end="31:21">GetLastError</name><argument_list pos:start="31:22" pos:end="31:23">()</argument_list></call> <operator pos:start="31:25" pos:end="31:26">==</operator> <name pos:start="31:28" pos:end="31:52">ERROR_INSUFFICIENT_BUFFER</name><operator pos:start="31:53" pos:end="31:53">)</operator> <operator pos:start="31:55" pos:end="31:56">&amp;&amp;</operator>

        <operator pos:start="33:9" pos:end="33:9">(</operator><name pos:start="33:10" pos:end="33:15">length</name> <operator pos:start="33:17" pos:end="33:17">&gt;</operator> <sizeof pos:start="33:19" pos:end="33:62">sizeof<argument_list pos:start="33:25" pos:end="33:62">(<argument pos:start="33:26" pos:end="33:61"><expr pos:start="33:26" pos:end="33:61"><name pos:start="33:26" pos:end="33:61">SYSTEM_LOGICAL_PROCESSOR_INFORMATION</name></expr></argument>)</argument_list></sizeof><operator pos:start="33:63" pos:end="33:63">)</operator></expr>)</condition> <block pos:start="33:66" pos:end="45:5">{<block_content pos:start="35:9" pos:end="43:9">

        <expr_stmt pos:start="35:9" pos:end="35:40"><expr pos:start="35:9" pos:end="35:39"><name pos:start="35:9" pos:end="35:11">ptr</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <name pos:start="35:15" pos:end="35:19">pslpi</name> <operator pos:start="35:21" pos:end="35:21">=</operator> <call pos:start="35:23" pos:end="35:39"><name pos:start="35:23" pos:end="35:31">g_malloc0</name><argument_list pos:start="35:32" pos:end="35:39">(<argument pos:start="35:33" pos:end="35:38"><expr pos:start="35:33" pos:end="35:38"><name pos:start="35:33" pos:end="35:38">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="43:9"><if pos:start="37:9" pos:end="43:9">if <condition pos:start="37:12" pos:end="37:68">(<expr pos:start="37:13" pos:end="37:67"><call pos:start="37:13" pos:end="37:58"><name pos:start="37:13" pos:end="37:42">GetLogicalProcessorInformation</name><argument_list pos:start="37:43" pos:end="37:58">(<argument pos:start="37:44" pos:end="37:48"><expr pos:start="37:44" pos:end="37:48"><name pos:start="37:44" pos:end="37:48">pslpi</name></expr></argument>, <argument pos:start="37:51" pos:end="37:57"><expr pos:start="37:51" pos:end="37:57"><operator pos:start="37:51" pos:end="37:51">&amp;</operator><name pos:start="37:52" pos:end="37:57">length</name></expr></argument>)</argument_list></call> <operator pos:start="37:60" pos:end="37:61">==</operator> <name pos:start="37:63" pos:end="37:67">FALSE</name></expr>)</condition> <block pos:start="37:70" pos:end="43:9">{<block_content pos:start="39:13" pos:end="41:44">

            <expr_stmt pos:start="39:13" pos:end="41:44"><expr pos:start="39:13" pos:end="41:43"><call pos:start="39:13" pos:end="41:43"><name pos:start="39:13" pos:end="39:22">error_setg</name><argument_list pos:start="39:23" pos:end="41:43">(<argument pos:start="39:24" pos:end="39:33"><expr pos:start="39:24" pos:end="39:33"><operator pos:start="39:24" pos:end="39:24">&amp;</operator><name pos:start="39:25" pos:end="39:33">local_err</name></expr></argument>, <argument pos:start="39:36" pos:end="39:76"><expr pos:start="39:36" pos:end="39:76"><literal type="string" pos:start="39:36" pos:end="39:76">"Failed to get processor information: %d"</literal></expr></argument>,

                       <argument pos:start="41:24" pos:end="41:42"><expr pos:start="41:24" pos:end="41:42"><operator pos:start="41:24" pos:end="41:24">(</operator><name pos:start="41:25" pos:end="41:27">int</name><operator pos:start="41:28" pos:end="41:28">)</operator><call pos:start="41:29" pos:end="41:42"><name pos:start="41:29" pos:end="41:40">GetLastError</name><argument_list pos:start="41:41" pos:end="41:42">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="45:7" pos:end="53:5">else <block pos:start="45:12" pos:end="53:5">{<block_content pos:start="47:9" pos:end="51:40">

        <expr_stmt pos:start="47:9" pos:end="51:40"><expr pos:start="47:9" pos:end="51:39"><call pos:start="47:9" pos:end="51:39"><name pos:start="47:9" pos:end="47:18">error_setg</name><argument_list pos:start="47:19" pos:end="51:39">(<argument pos:start="47:20" pos:end="47:29"><expr pos:start="47:20" pos:end="47:29"><operator pos:start="47:20" pos:end="47:20">&amp;</operator><name pos:start="47:21" pos:end="47:29">local_err</name></expr></argument>,

                   <argument pos:start="49:20" pos:end="49:74"><expr pos:start="49:20" pos:end="49:74"><literal type="string" pos:start="49:20" pos:end="49:74">"Failed to get processor information buffer length: %d"</literal></expr></argument>,

                   <argument pos:start="51:20" pos:end="51:38"><expr pos:start="51:20" pos:end="51:38"><operator pos:start="51:20" pos:end="51:20">(</operator><name pos:start="51:21" pos:end="51:23">int</name><operator pos:start="51:24" pos:end="51:24">)</operator><call pos:start="51:25" pos:end="51:38"><name pos:start="51:25" pos:end="51:36">GetLastError</name><argument_list pos:start="51:37" pos:end="51:38">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <while pos:start="57:5" pos:end="107:5">while <condition pos:start="57:11" pos:end="57:47">(<expr pos:start="57:12" pos:end="57:46"><operator pos:start="57:12" pos:end="57:12">(</operator><name pos:start="57:13" pos:end="57:21">local_err</name> <operator pos:start="57:23" pos:end="57:24">==</operator> <name pos:start="57:26" pos:end="57:29">NULL</name><operator pos:start="57:30" pos:end="57:30">)</operator> <operator pos:start="57:32" pos:end="57:33">&amp;&amp;</operator> <operator pos:start="57:35" pos:end="57:35">(</operator><name pos:start="57:36" pos:end="57:41">length</name> <operator pos:start="57:43" pos:end="57:43">&gt;</operator> <literal type="number" pos:start="57:45" pos:end="57:45">0</literal><operator pos:start="57:46" pos:end="57:46">)</operator></expr>)</condition> <block pos:start="57:49" pos:end="107:5">{<block_content pos:start="59:9" pos:end="105:16">

        <if_stmt pos:start="59:9" pos:end="101:9"><if pos:start="59:9" pos:end="101:9">if <condition pos:start="59:12" pos:end="59:57">(<expr pos:start="59:13" pos:end="59:56"><name pos:start="59:13" pos:end="59:31"><name pos:start="59:13" pos:end="59:17">pslpi</name><operator pos:start="59:18" pos:end="59:19">-&gt;</operator><name pos:start="59:20" pos:end="59:31">Relationship</name></name> <operator pos:start="59:33" pos:end="59:34">==</operator> <name pos:start="59:36" pos:end="59:56">RelationProcessorCore</name></expr>)</condition> <block pos:start="59:59" pos:end="101:9">{<block_content pos:start="61:13" pos:end="99:13">

            <decl_stmt pos:start="61:13" pos:end="61:54"><decl pos:start="61:13" pos:end="61:53"><type pos:start="61:13" pos:end="61:21"><name pos:start="61:13" pos:end="61:21">ULONG_PTR</name></type> <name pos:start="61:23" pos:end="61:30">cpu_bits</name> <init pos:start="61:32" pos:end="61:53">= <expr pos:start="61:34" pos:end="61:53"><name pos:start="61:34" pos:end="61:53"><name pos:start="61:34" pos:end="61:38">pslpi</name><operator pos:start="61:39" pos:end="61:40">-&gt;</operator><name pos:start="61:41" pos:end="61:53">ProcessorMask</name></name></expr></init></decl>;</decl_stmt>



            <while pos:start="65:13" pos:end="99:13">while <condition pos:start="65:19" pos:end="65:32">(<expr pos:start="65:20" pos:end="65:31"><name pos:start="65:20" pos:end="65:27">cpu_bits</name> <operator pos:start="65:29" pos:end="65:29">&gt;</operator> <literal type="number" pos:start="65:31" pos:end="65:31">0</literal></expr>)</condition> <block pos:start="65:34" pos:end="99:13">{<block_content pos:start="67:17" pos:end="97:31">

                <if_stmt pos:start="67:17" pos:end="95:17"><if pos:start="67:17" pos:end="95:17">if <condition pos:start="67:20" pos:end="67:37">(<expr pos:start="67:21" pos:end="67:36"><operator pos:start="67:21" pos:end="67:21">!</operator><operator pos:start="67:22" pos:end="67:22">!</operator><operator pos:start="67:23" pos:end="67:23">(</operator><name pos:start="67:24" pos:end="67:31">cpu_bits</name> <operator pos:start="67:33" pos:end="67:33">&amp;</operator> <literal type="number" pos:start="67:35" pos:end="67:35">1</literal><operator pos:start="67:36" pos:end="67:36">)</operator></expr>)</condition> <block pos:start="67:39" pos:end="95:17">{<block_content pos:start="69:21" pos:end="93:40">

                    <decl_stmt pos:start="69:21" pos:end="69:48"><decl pos:start="69:21" pos:end="69:47"><type pos:start="69:21" pos:end="69:43"><name pos:start="69:21" pos:end="69:41">GuestLogicalProcessor</name> <modifier pos:start="69:43" pos:end="69:43">*</modifier></type><name pos:start="69:44" pos:end="69:47">vcpu</name></decl>;</decl_stmt>

                    <decl_stmt pos:start="71:21" pos:end="71:53"><decl pos:start="71:21" pos:end="71:52"><type pos:start="71:21" pos:end="71:47"><name pos:start="71:21" pos:end="71:45">GuestLogicalProcessorList</name> <modifier pos:start="71:47" pos:end="71:47">*</modifier></type><name pos:start="71:48" pos:end="71:52">entry</name></decl>;</decl_stmt>



                    <expr_stmt pos:start="75:21" pos:end="75:51"><expr pos:start="75:21" pos:end="75:50"><name pos:start="75:21" pos:end="75:24">vcpu</name> <operator pos:start="75:26" pos:end="75:26">=</operator> <call pos:start="75:28" pos:end="75:50"><name pos:start="75:28" pos:end="75:36">g_malloc0</name><argument_list pos:start="75:37" pos:end="75:50">(<argument pos:start="75:38" pos:end="75:49"><expr pos:start="75:38" pos:end="75:49"><sizeof pos:start="75:38" pos:end="75:43">sizeof <name/></sizeof>*<name pos:start="75:46" pos:end="75:49">vcpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="77:21" pos:end="77:49"><expr pos:start="77:21" pos:end="77:48"><name pos:start="77:21" pos:end="77:36"><name pos:start="77:21" pos:end="77:24">vcpu</name><operator pos:start="77:25" pos:end="77:26">-&gt;</operator><name pos:start="77:27" pos:end="77:36">logical_id</name></name> <operator pos:start="77:38" pos:end="77:38">=</operator> <name pos:start="77:40" pos:end="77:46">current</name><operator pos:start="77:47" pos:end="77:48">++</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="79:21" pos:end="79:40"><expr pos:start="79:21" pos:end="79:39"><name pos:start="79:21" pos:end="79:32"><name pos:start="79:21" pos:end="79:24">vcpu</name><operator pos:start="79:25" pos:end="79:26">-&gt;</operator><name pos:start="79:27" pos:end="79:32">online</name></name> <operator pos:start="79:34" pos:end="79:34">=</operator> <name pos:start="79:36" pos:end="79:39">true</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="81:21" pos:end="81:50"><expr pos:start="81:21" pos:end="81:49"><name pos:start="81:21" pos:end="81:41"><name pos:start="81:21" pos:end="81:24">vcpu</name><operator pos:start="81:25" pos:end="81:26">-&gt;</operator><name pos:start="81:27" pos:end="81:41">has_can_offline</name></name> <operator pos:start="81:43" pos:end="81:43">=</operator> <name pos:start="81:45" pos:end="81:49">false</name></expr>;</expr_stmt>



                    <expr_stmt pos:start="85:21" pos:end="85:53"><expr pos:start="85:21" pos:end="85:52"><name pos:start="85:21" pos:end="85:25">entry</name> <operator pos:start="85:27" pos:end="85:27">=</operator> <call pos:start="85:29" pos:end="85:52"><name pos:start="85:29" pos:end="85:37">g_malloc0</name><argument_list pos:start="85:38" pos:end="85:52">(<argument pos:start="85:39" pos:end="85:51"><expr pos:start="85:39" pos:end="85:51"><sizeof pos:start="85:39" pos:end="85:44">sizeof <name/></sizeof>*<name pos:start="85:47" pos:end="85:51">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="87:21" pos:end="87:40"><expr pos:start="87:21" pos:end="87:39"><name pos:start="87:21" pos:end="87:32"><name pos:start="87:21" pos:end="87:25">entry</name><operator pos:start="87:26" pos:end="87:27">-&gt;</operator><name pos:start="87:28" pos:end="87:32">value</name></name> <operator pos:start="87:34" pos:end="87:34">=</operator> <name pos:start="87:36" pos:end="87:39">vcpu</name></expr>;</expr_stmt>



                    <expr_stmt pos:start="91:21" pos:end="91:34"><expr pos:start="91:21" pos:end="91:33"><operator pos:start="91:21" pos:end="91:21">*</operator><name pos:start="91:22" pos:end="91:25">link</name> <operator pos:start="91:27" pos:end="91:27">=</operator> <name pos:start="91:29" pos:end="91:33">entry</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="93:21" pos:end="93:40"><expr pos:start="93:21" pos:end="93:39"><name pos:start="93:21" pos:end="93:24">link</name> <operator pos:start="93:26" pos:end="93:26">=</operator> <operator pos:start="93:28" pos:end="93:28">&amp;</operator><name pos:start="93:29" pos:end="93:39"><name pos:start="93:29" pos:end="93:33">entry</name><operator pos:start="93:34" pos:end="93:35">-&gt;</operator><name pos:start="93:36" pos:end="93:39">next</name></name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="97:17" pos:end="97:31"><expr pos:start="97:17" pos:end="97:30"><name pos:start="97:17" pos:end="97:24">cpu_bits</name> <operator pos:start="97:26" pos:end="97:28">&gt;&gt;=</operator> <literal type="number" pos:start="97:30" pos:end="97:30">1</literal></expr>;</expr_stmt>

            </block_content>}</block></while>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:63"><expr pos:start="103:9" pos:end="103:62"><name pos:start="103:9" pos:end="103:14">length</name> <operator pos:start="103:16" pos:end="103:17">-=</operator> <sizeof pos:start="103:19" pos:end="103:62">sizeof<argument_list pos:start="103:25" pos:end="103:62">(<argument pos:start="103:26" pos:end="103:61"><expr pos:start="103:26" pos:end="103:61"><name pos:start="103:26" pos:end="103:61">SYSTEM_LOGICAL_PROCESSOR_INFORMATION</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:16"><expr pos:start="105:9" pos:end="105:15"><name pos:start="105:9" pos:end="105:13">pslpi</name><operator pos:start="105:14" pos:end="105:15">++</operator></expr>;</expr_stmt> <comment type="block" pos:start="105:18" pos:end="105:33">/* next entry */</comment>

    </block_content>}</block></while>



    <expr_stmt pos:start="111:5" pos:end="111:16"><expr pos:start="111:5" pos:end="111:15"><call pos:start="111:5" pos:end="111:15"><name pos:start="111:5" pos:end="111:10">g_free</name><argument_list pos:start="111:11" pos:end="111:15">(<argument pos:start="111:12" pos:end="111:14"><expr pos:start="111:12" pos:end="111:14"><name pos:start="111:12" pos:end="111:14">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="115:5" pos:end="127:5"><if pos:start="115:5" pos:end="127:5">if <condition pos:start="115:8" pos:end="115:26">(<expr pos:start="115:9" pos:end="115:25"><name pos:start="115:9" pos:end="115:17">local_err</name> <operator pos:start="115:19" pos:end="115:20">==</operator> <name pos:start="115:22" pos:end="115:25">NULL</name></expr>)</condition> <block pos:start="115:28" pos:end="127:5">{<block_content pos:start="117:9" pos:end="125:60">

        <if_stmt pos:start="117:9" pos:end="121:9"><if pos:start="117:9" pos:end="121:9">if <condition pos:start="117:12" pos:end="117:25">(<expr pos:start="117:13" pos:end="117:24"><name pos:start="117:13" pos:end="117:16">head</name> <operator pos:start="117:18" pos:end="117:19">!=</operator> <name pos:start="117:21" pos:end="117:24">NULL</name></expr>)</condition> <block pos:start="117:27" pos:end="121:9">{<block_content pos:start="119:13" pos:end="119:24">

            <return pos:start="119:13" pos:end="119:24">return <expr pos:start="119:20" pos:end="119:23"><name pos:start="119:20" pos:end="119:23">head</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="123:9" pos:end="123:46">/* there's no guest with zero VCPUs */</comment>

        <expr_stmt pos:start="125:9" pos:end="125:60"><expr pos:start="125:9" pos:end="125:59"><call pos:start="125:9" pos:end="125:59"><name pos:start="125:9" pos:end="125:18">error_setg</name><argument_list pos:start="125:19" pos:end="125:59">(<argument pos:start="125:20" pos:end="125:29"><expr pos:start="125:20" pos:end="125:29"><operator pos:start="125:20" pos:end="125:20">&amp;</operator><name pos:start="125:21" pos:end="125:29">local_err</name></expr></argument>, <argument pos:start="125:32" pos:end="125:58"><expr pos:start="125:32" pos:end="125:58"><literal type="string" pos:start="125:32" pos:end="125:58">"Guest reported zero VCPUs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="131:5" pos:end="131:46"><expr pos:start="131:5" pos:end="131:45"><call pos:start="131:5" pos:end="131:45"><name pos:start="131:5" pos:end="131:39">qapi_free_GuestLogicalProcessorList</name><argument_list pos:start="131:40" pos:end="131:45">(<argument pos:start="131:41" pos:end="131:44"><expr pos:start="131:41" pos:end="131:44"><name pos:start="131:41" pos:end="131:44">head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:37"><expr pos:start="133:5" pos:end="133:36"><call pos:start="133:5" pos:end="133:36"><name pos:start="133:5" pos:end="133:19">error_propagate</name><argument_list pos:start="133:20" pos:end="133:36">(<argument pos:start="133:21" pos:end="133:24"><expr pos:start="133:21" pos:end="133:24"><name pos:start="133:21" pos:end="133:24">errp</name></expr></argument>, <argument pos:start="133:27" pos:end="133:35"><expr pos:start="133:27" pos:end="133:35"><name pos:start="133:27" pos:end="133:35">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="135:5" pos:end="135:16">return <expr pos:start="135:12" pos:end="135:15"><name pos:start="135:12" pos:end="135:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
