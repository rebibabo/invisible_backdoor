<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15081.c" pos:tabs="8"><function pos:start="1:1" pos:end="177:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">handle_pending_signal</name><parameter_list pos:start="1:34" pos:end="1:65">(<parameter pos:start="1:35" pos:end="1:55"><decl pos:start="1:35" pos:end="1:55"><type pos:start="1:35" pos:end="1:55"><name pos:start="1:35" pos:end="1:46">CPUArchState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:55">cpu_env</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:64"><decl pos:start="1:58" pos:end="1:64"><type pos:start="1:58" pos:end="1:64"><name pos:start="1:58" pos:end="1:60">int</name></type> <name pos:start="1:62" pos:end="1:64">sig</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="177:1">{<block_content pos:start="5:5" pos:end="175:5">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:17">cpu</name> <init pos:start="5:19" pos:end="5:40">= <expr pos:start="5:21" pos:end="5:40"><call pos:start="5:21" pos:end="5:40"><name pos:start="5:21" pos:end="5:31">ENV_GET_CPU</name><argument_list pos:start="5:32" pos:end="5:40">(<argument pos:start="5:33" pos:end="5:39"><expr pos:start="5:33" pos:end="5:39"><name pos:start="5:33" pos:end="5:39">cpu_env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:13">abi_ulong</name></type> <name pos:start="7:15" pos:end="7:21">handler</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">sigset_t</name></type> <name pos:start="9:14" pos:end="9:16">set</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:35"><decl pos:start="11:5" pos:end="11:34"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:19">target_sigset_t</name></type> <name pos:start="11:21" pos:end="11:34">target_old_set</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:32"><decl pos:start="13:5" pos:end="13:31"><type pos:start="13:5" pos:end="13:29"><name pos:start="13:5" pos:end="13:27"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:27">target_sigaction</name></name> <modifier pos:start="13:29" pos:end="13:29">*</modifier></type><name pos:start="13:30" pos:end="13:31">sa</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:32"><decl pos:start="15:5" pos:end="15:31"><type pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:13">TaskState</name> <modifier pos:start="15:15" pos:end="15:15">*</modifier></type><name pos:start="15:16" pos:end="15:17">ts</name> <init pos:start="15:19" pos:end="15:31">= <expr pos:start="15:21" pos:end="15:31"><name pos:start="15:21" pos:end="15:31"><name pos:start="15:21" pos:end="15:23">cpu</name><operator pos:start="15:24" pos:end="15:25">-&gt;</operator><name pos:start="15:26" pos:end="15:31">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:55"><decl pos:start="17:5" pos:end="17:54"><type pos:start="17:5" pos:end="17:30"><name pos:start="17:5" pos:end="17:28"><name pos:start="17:5" pos:end="17:10">struct</name> <name pos:start="17:12" pos:end="17:28">emulated_sigtable</name></name> <modifier pos:start="17:30" pos:end="17:30">*</modifier></type><name pos:start="17:31" pos:end="17:31">k</name> <init pos:start="17:33" pos:end="17:54">= <expr pos:start="17:35" pos:end="17:54"><operator pos:start="17:35" pos:end="17:35">&amp;</operator><name pos:start="17:36" pos:end="17:54"><name pos:start="17:36" pos:end="17:37">ts</name><operator pos:start="17:38" pos:end="17:39">-&gt;</operator><name pos:start="17:40" pos:end="17:45">sigtab</name><index pos:start="17:46" pos:end="17:54">[<expr pos:start="17:47" pos:end="17:53"><name pos:start="17:47" pos:end="17:49">sig</name> <operator pos:start="17:51" pos:end="17:51">-</operator> <literal type="number" pos:start="17:53" pos:end="17:53">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:43"><expr pos:start="21:5" pos:end="21:42"><call pos:start="21:5" pos:end="21:42"><name pos:start="21:5" pos:end="21:28">trace_user_handle_signal</name><argument_list pos:start="21:29" pos:end="21:42">(<argument pos:start="21:30" pos:end="21:36"><expr pos:start="21:30" pos:end="21:36"><name pos:start="21:30" pos:end="21:36">cpu_env</name></expr></argument>, <argument pos:start="21:39" pos:end="21:41"><expr pos:start="21:39" pos:end="21:41"><name pos:start="21:39" pos:end="21:41">sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="23:5" pos:end="23:24">/* dequeue signal */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:19"><expr pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:5">k</name><operator pos:start="25:6" pos:end="25:7">-&gt;</operator><name pos:start="25:8" pos:end="25:14">pending</name></name> <operator pos:start="25:16" pos:end="25:16">=</operator> <literal type="number" pos:start="25:18" pos:end="25:18">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:34"><expr pos:start="29:5" pos:end="29:33"><name pos:start="29:5" pos:end="29:7">sig</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:33"><name pos:start="29:11" pos:end="29:23">gdb_handlesig</name><argument_list pos:start="29:24" pos:end="29:33">(<argument pos:start="29:25" pos:end="29:27"><expr pos:start="29:25" pos:end="29:27"><name pos:start="29:25" pos:end="29:27">cpu</name></expr></argument>, <argument pos:start="29:30" pos:end="29:32"><expr pos:start="29:30" pos:end="29:32"><name pos:start="29:30" pos:end="29:32">sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="43:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:13">(<expr pos:start="31:9" pos:end="31:12"><operator pos:start="31:9" pos:end="31:9">!</operator><name pos:start="31:10" pos:end="31:12">sig</name></expr>)</condition> <block pos:start="31:15" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:33">

        <expr_stmt pos:start="33:9" pos:end="33:18"><expr pos:start="33:9" pos:end="33:17"><name pos:start="33:9" pos:end="33:10">sa</name> <operator pos:start="33:12" pos:end="33:12">=</operator> <name pos:start="33:14" pos:end="33:17">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:33"><expr pos:start="35:9" pos:end="35:32"><name pos:start="35:9" pos:end="35:15">handler</name> <operator pos:start="35:17" pos:end="35:17">=</operator> <name pos:start="35:19" pos:end="35:32">TARGET_SIG_IGN</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="37:7" pos:end="43:5">else <block pos:start="37:12" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:34">

        <expr_stmt pos:start="39:9" pos:end="39:36"><expr pos:start="39:9" pos:end="39:35"><name pos:start="39:9" pos:end="39:10">sa</name> <operator pos:start="39:12" pos:end="39:12">=</operator> <operator pos:start="39:14" pos:end="39:14">&amp;</operator><name pos:start="39:15" pos:end="39:35"><name pos:start="39:15" pos:end="39:26">sigact_table</name><index pos:start="39:27" pos:end="39:35">[<expr pos:start="39:28" pos:end="39:34"><name pos:start="39:28" pos:end="39:30">sig</name> <operator pos:start="39:32" pos:end="39:32">-</operator> <literal type="number" pos:start="39:34" pos:end="39:34">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:34"><expr pos:start="41:9" pos:end="41:33"><name pos:start="41:9" pos:end="41:15">handler</name> <operator pos:start="41:17" pos:end="41:17">=</operator> <name pos:start="41:19" pos:end="41:33"><name pos:start="41:19" pos:end="41:20">sa</name><operator pos:start="41:21" pos:end="41:22">-&gt;</operator><name pos:start="41:23" pos:end="41:33">_sa_handler</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="47:5" pos:end="59:5"><if pos:start="47:5" pos:end="59:5">if <condition pos:start="47:8" pos:end="47:72">(<expr pos:start="47:9" pos:end="47:71"><name pos:start="47:9" pos:end="47:11">sig</name> <operator pos:start="47:13" pos:end="47:14">==</operator> <name pos:start="47:16" pos:end="47:29">TARGET_SIGSEGV</name> <operator pos:start="47:31" pos:end="47:32">&amp;&amp;</operator> <call pos:start="47:34" pos:end="47:71"><name pos:start="47:34" pos:end="47:44">sigismember</name><argument_list pos:start="47:45" pos:end="47:71">(<argument pos:start="47:46" pos:end="47:61"><expr pos:start="47:46" pos:end="47:61"><operator pos:start="47:46" pos:end="47:46">&amp;</operator><name pos:start="47:47" pos:end="47:61"><name pos:start="47:47" pos:end="47:48">ts</name><operator pos:start="47:49" pos:end="47:50">-&gt;</operator><name pos:start="47:51" pos:end="47:61">signal_mask</name></name></expr></argument>, <argument pos:start="47:64" pos:end="47:70"><expr pos:start="47:64" pos:end="47:70"><name pos:start="47:64" pos:end="47:70">SIGSEGV</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="47:74" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:33">

        <comment type="block" pos:start="49:9" pos:end="55:11">/* Guest has blocked SIGSEGV but we got one anyway. Assume this

         * is a forced SIGSEGV (ie one the kernel handles via force_sig_info

         * because it got a real MMU fault), and treat as if default handler.

         */</comment>

        <expr_stmt pos:start="57:9" pos:end="57:33"><expr pos:start="57:9" pos:end="57:32"><name pos:start="57:9" pos:end="57:15">handler</name> <operator pos:start="57:17" pos:end="57:17">=</operator> <name pos:start="57:19" pos:end="57:32">TARGET_SIG_DFL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="63:5" pos:end="175:5"><if pos:start="63:5" pos:end="83:5">if <condition pos:start="63:8" pos:end="63:34">(<expr pos:start="63:9" pos:end="63:33"><name pos:start="63:9" pos:end="63:15">handler</name> <operator pos:start="63:17" pos:end="63:18">==</operator> <name pos:start="63:20" pos:end="63:33">TARGET_SIG_DFL</name></expr>)</condition> <block pos:start="63:36" pos:end="83:5">{<block_content pos:start="67:9" pos:end="81:9">

        <comment type="block" pos:start="65:9" pos:end="65:86">/* default handler : ignore some signal. The other are job control or fatal */</comment>

        <if_stmt pos:start="67:9" pos:end="81:9"><if pos:start="67:9" pos:end="71:9">if <condition pos:start="67:12" pos:end="67:84">(<expr pos:start="67:13" pos:end="67:83"><name pos:start="67:13" pos:end="67:15">sig</name> <operator pos:start="67:17" pos:end="67:18">==</operator> <name pos:start="67:20" pos:end="67:33">TARGET_SIGTSTP</name> <operator pos:start="67:35" pos:end="67:36">||</operator> <name pos:start="67:38" pos:end="67:40">sig</name> <operator pos:start="67:42" pos:end="67:43">==</operator> <name pos:start="67:45" pos:end="67:58">TARGET_SIGTTIN</name> <operator pos:start="67:60" pos:end="67:61">||</operator> <name pos:start="67:63" pos:end="67:65">sig</name> <operator pos:start="67:67" pos:end="67:68">==</operator> <name pos:start="67:70" pos:end="67:83">TARGET_SIGTTOU</name></expr>)</condition> <block pos:start="67:86" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:35">

            <expr_stmt pos:start="69:13" pos:end="69:35"><expr pos:start="69:13" pos:end="69:34"><call pos:start="69:13" pos:end="69:34"><name pos:start="69:13" pos:end="69:16">kill</name><argument_list pos:start="69:17" pos:end="69:34">(<argument pos:start="69:18" pos:end="69:25"><expr pos:start="69:18" pos:end="69:25"><call pos:start="69:18" pos:end="69:25"><name pos:start="69:18" pos:end="69:23">getpid</name><argument_list pos:start="69:24" pos:end="69:25">()</argument_list></call></expr></argument>,<argument pos:start="69:27" pos:end="69:33"><expr pos:start="69:27" pos:end="69:33"><name pos:start="69:27" pos:end="69:33">SIGSTOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="71:11" pos:end="81:9">else if <condition pos:start="71:19" pos:end="77:41">(<expr pos:start="71:20" pos:end="77:40"><name pos:start="71:20" pos:end="71:22">sig</name> <operator pos:start="71:24" pos:end="71:25">!=</operator> <name pos:start="71:27" pos:end="71:40">TARGET_SIGCHLD</name> <operator pos:start="71:42" pos:end="71:43">&amp;&amp;</operator>

                   <name pos:start="73:20" pos:end="73:22">sig</name> <operator pos:start="73:24" pos:end="73:25">!=</operator> <name pos:start="73:27" pos:end="73:39">TARGET_SIGURG</name> <operator pos:start="73:41" pos:end="73:42">&amp;&amp;</operator>

                   <name pos:start="75:20" pos:end="75:22">sig</name> <operator pos:start="75:24" pos:end="75:25">!=</operator> <name pos:start="75:27" pos:end="75:41">TARGET_SIGWINCH</name> <operator pos:start="75:43" pos:end="75:44">&amp;&amp;</operator>

                   <name pos:start="77:20" pos:end="77:22">sig</name> <operator pos:start="77:24" pos:end="77:25">!=</operator> <name pos:start="77:27" pos:end="77:40">TARGET_SIGCONT</name></expr>)</condition> <block pos:start="77:43" pos:end="81:9">{<block_content pos:start="79:13" pos:end="79:27">

            <expr_stmt pos:start="79:13" pos:end="79:27"><expr pos:start="79:13" pos:end="79:26"><call pos:start="79:13" pos:end="79:26"><name pos:start="79:13" pos:end="79:21">force_sig</name><argument_list pos:start="79:22" pos:end="79:26">(<argument pos:start="79:23" pos:end="79:25"><expr pos:start="79:23" pos:end="79:25"><name pos:start="79:23" pos:end="79:25">sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="83:7" pos:end="87:5">else if <condition pos:start="83:15" pos:end="83:41">(<expr pos:start="83:16" pos:end="83:40"><name pos:start="83:16" pos:end="83:22">handler</name> <operator pos:start="83:24" pos:end="83:25">==</operator> <name pos:start="83:27" pos:end="83:40">TARGET_SIG_IGN</name></expr>)</condition> <block pos:start="83:43" pos:end="87:5">{<block_content>

        <comment type="block" pos:start="85:9" pos:end="85:24">/* ignore sig */</comment>

    </block_content>}</block></if> <if type="elseif" pos:start="87:7" pos:end="91:5">else if <condition pos:start="87:15" pos:end="87:41">(<expr pos:start="87:16" pos:end="87:40"><name pos:start="87:16" pos:end="87:22">handler</name> <operator pos:start="87:24" pos:end="87:25">==</operator> <name pos:start="87:27" pos:end="87:40">TARGET_SIG_ERR</name></expr>)</condition> <block pos:start="87:43" pos:end="91:5">{<block_content pos:start="89:9" pos:end="89:23">

        <expr_stmt pos:start="89:9" pos:end="89:23"><expr pos:start="89:9" pos:end="89:22"><call pos:start="89:9" pos:end="89:22"><name pos:start="89:9" pos:end="89:17">force_sig</name><argument_list pos:start="89:18" pos:end="89:22">(<argument pos:start="89:19" pos:end="89:21"><expr pos:start="89:19" pos:end="89:21"><name pos:start="89:19" pos:end="89:21">sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="91:7" pos:end="175:5">else <block pos:start="91:12" pos:end="175:5">{<block_content pos:start="95:9" pos:end="173:9">

        <comment type="block" pos:start="93:9" pos:end="93:70">/* compute the blocked signals during the handler execution */</comment>

        <decl_stmt pos:start="95:9" pos:end="95:30"><decl pos:start="95:9" pos:end="95:29"><type pos:start="95:9" pos:end="95:18"><name pos:start="95:9" pos:end="95:16">sigset_t</name> <modifier pos:start="95:18" pos:end="95:18">*</modifier></type><name pos:start="95:19" pos:end="95:29">blocked_set</name></decl>;</decl_stmt>



        <expr_stmt pos:start="99:9" pos:end="99:50"><expr pos:start="99:9" pos:end="99:49"><call pos:start="99:9" pos:end="99:49"><name pos:start="99:9" pos:end="99:29">target_to_host_sigset</name><argument_list pos:start="99:30" pos:end="99:49">(<argument pos:start="99:31" pos:end="99:34"><expr pos:start="99:31" pos:end="99:34"><operator pos:start="99:31" pos:end="99:31">&amp;</operator><name pos:start="99:32" pos:end="99:34">set</name></expr></argument>, <argument pos:start="99:37" pos:end="99:48"><expr pos:start="99:37" pos:end="99:48"><operator pos:start="99:37" pos:end="99:37">&amp;</operator><name pos:start="99:38" pos:end="99:48"><name pos:start="99:38" pos:end="99:39">sa</name><operator pos:start="99:40" pos:end="99:41">-&gt;</operator><name pos:start="99:42" pos:end="99:48">sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="101:9" pos:end="103:40">/* SA_NODEFER indicates that the current signal should not be

           blocked during the handler */</comment>

        <if_stmt pos:start="105:9" pos:end="107:56"><if pos:start="105:9" pos:end="107:56">if <condition pos:start="105:12" pos:end="105:48">(<expr pos:start="105:13" pos:end="105:47"><operator pos:start="105:13" pos:end="105:13">!</operator><operator pos:start="105:14" pos:end="105:14">(</operator><name pos:start="105:15" pos:end="105:26"><name pos:start="105:15" pos:end="105:16">sa</name><operator pos:start="105:17" pos:end="105:18">-&gt;</operator><name pos:start="105:19" pos:end="105:26">sa_flags</name></name> <operator pos:start="105:28" pos:end="105:28">&amp;</operator> <name pos:start="105:30" pos:end="105:46">TARGET_SA_NODEFER</name><operator pos:start="105:47" pos:end="105:47">)</operator></expr>)</condition><block type="pseudo" pos:start="107:13" pos:end="107:56"><block_content pos:start="107:13" pos:end="107:56">

            <expr_stmt pos:start="107:13" pos:end="107:56"><expr pos:start="107:13" pos:end="107:55"><call pos:start="107:13" pos:end="107:55"><name pos:start="107:13" pos:end="107:21">sigaddset</name><argument_list pos:start="107:22" pos:end="107:55">(<argument pos:start="107:23" pos:end="107:26"><expr pos:start="107:23" pos:end="107:26"><operator pos:start="107:23" pos:end="107:23">&amp;</operator><name pos:start="107:24" pos:end="107:26">set</name></expr></argument>, <argument pos:start="107:29" pos:end="107:54"><expr pos:start="107:29" pos:end="107:54"><call pos:start="107:29" pos:end="107:54"><name pos:start="107:29" pos:end="107:49">target_to_host_signal</name><argument_list pos:start="107:50" pos:end="107:54">(<argument pos:start="107:51" pos:end="107:53"><expr pos:start="107:51" pos:end="107:53"><name pos:start="107:51" pos:end="107:53">sig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <comment type="block" pos:start="111:9" pos:end="113:60">/* save the previous blocked signal state to restore it at the

           end of the signal execution (see do_sigreturn) */</comment>

        <expr_stmt pos:start="115:9" pos:end="115:74"><expr pos:start="115:9" pos:end="115:73"><call pos:start="115:9" pos:end="115:73"><name pos:start="115:9" pos:end="115:38">host_to_target_sigset_internal</name><argument_list pos:start="115:39" pos:end="115:73">(<argument pos:start="115:40" pos:end="115:54"><expr pos:start="115:40" pos:end="115:54"><operator pos:start="115:40" pos:end="115:40">&amp;</operator><name pos:start="115:41" pos:end="115:54">target_old_set</name></expr></argument>, <argument pos:start="115:57" pos:end="115:72"><expr pos:start="115:57" pos:end="115:72"><operator pos:start="115:57" pos:end="115:57">&amp;</operator><name pos:start="115:58" pos:end="115:72"><name pos:start="115:58" pos:end="115:59">ts</name><operator pos:start="115:60" pos:end="115:61">-&gt;</operator><name pos:start="115:62" pos:end="115:72">signal_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="119:9" pos:end="119:42">/* block signals in the handler */</comment>

        <expr_stmt pos:start="121:9" pos:end="123:52"><expr pos:start="121:9" pos:end="123:51"><name pos:start="121:9" pos:end="121:19">blocked_set</name> <operator pos:start="121:21" pos:end="121:21">=</operator> <ternary pos:start="121:23" pos:end="123:51"><condition pos:start="121:23" pos:end="121:41"><expr pos:start="121:23" pos:end="121:39"><name pos:start="121:23" pos:end="121:39"><name pos:start="121:23" pos:end="121:24">ts</name><operator pos:start="121:25" pos:end="121:26">-&gt;</operator><name pos:start="121:27" pos:end="121:39">in_sigsuspend</name></name></expr> ?</condition><then pos:start="123:13" pos:end="123:32">

            <expr pos:start="123:13" pos:end="123:32"><operator pos:start="123:13" pos:end="123:13">&amp;</operator><name pos:start="123:14" pos:end="123:32"><name pos:start="123:14" pos:end="123:15">ts</name><operator pos:start="123:16" pos:end="123:17">-&gt;</operator><name pos:start="123:18" pos:end="123:32">sigsuspend_mask</name></name></expr> </then><else pos:start="123:34" pos:end="123:51">: <expr pos:start="123:36" pos:end="123:51"><operator pos:start="123:36" pos:end="123:36">&amp;</operator><name pos:start="123:37" pos:end="123:51"><name pos:start="123:37" pos:end="123:38">ts</name><operator pos:start="123:39" pos:end="123:40">-&gt;</operator><name pos:start="123:41" pos:end="123:51">signal_mask</name></name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:54"><expr pos:start="125:9" pos:end="125:53"><call pos:start="125:9" pos:end="125:53"><name pos:start="125:9" pos:end="125:16">sigorset</name><argument_list pos:start="125:17" pos:end="125:53">(<argument pos:start="125:18" pos:end="125:33"><expr pos:start="125:18" pos:end="125:33"><operator pos:start="125:18" pos:end="125:18">&amp;</operator><name pos:start="125:19" pos:end="125:33"><name pos:start="125:19" pos:end="125:20">ts</name><operator pos:start="125:21" pos:end="125:22">-&gt;</operator><name pos:start="125:23" pos:end="125:33">signal_mask</name></name></expr></argument>, <argument pos:start="125:36" pos:end="125:46"><expr pos:start="125:36" pos:end="125:46"><name pos:start="125:36" pos:end="125:46">blocked_set</name></expr></argument>, <argument pos:start="125:49" pos:end="125:52"><expr pos:start="125:49" pos:end="125:52"><operator pos:start="125:49" pos:end="125:49">&amp;</operator><name pos:start="125:50" pos:end="125:52">set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="134:0"><expr pos:start="127:9" pos:end="127:29"><name pos:start="127:9" pos:end="127:25"><name pos:start="127:9" pos:end="127:10">ts</name><operator pos:start="127:11" pos:end="127:12">-&gt;</operator><name pos:start="127:13" pos:end="127:25">in_sigsuspend</name></name> <operator pos:start="127:27" pos:end="127:27">=</operator> <literal type="number" pos:start="127:29" pos:end="127:29">0</literal></expr>;</expr_stmt>



        <comment type="block" pos:start="131:9" pos:end="131:70">/* if the CPU is in VM86 mode, we restore the 32 bit values */</comment>

<cpp:if pos:start="133:1" pos:end="133:51">#<cpp:directive pos:start="133:2" pos:end="133:3">if</cpp:directive> <expr pos:start="133:5" pos:end="133:51"><call pos:start="133:5" pos:end="133:24"><name pos:start="133:5" pos:end="133:11">defined</name><argument_list pos:start="133:12" pos:end="133:24">(<argument pos:start="133:13" pos:end="133:23"><expr pos:start="133:13" pos:end="133:23"><name pos:start="133:13" pos:end="133:23">TARGET_I386</name></expr></argument>)</argument_list></call> <operator pos:start="133:26" pos:end="133:27">&amp;&amp;</operator> <operator pos:start="133:29" pos:end="133:29">!</operator><call pos:start="133:30" pos:end="133:51"><name pos:start="133:30" pos:end="133:36">defined</name><argument_list pos:start="133:37" pos:end="133:51">(<argument pos:start="133:38" pos:end="133:50"><expr pos:start="133:38" pos:end="133:50"><name pos:start="133:38" pos:end="133:50">TARGET_X86_64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <block pos:start="135:9" pos:end="152:0">{<block_content pos:start="137:13" pos:end="141:36">

            <decl_stmt pos:start="137:13" pos:end="137:39"><decl pos:start="137:13" pos:end="137:38"><type pos:start="137:13" pos:end="137:25"><name pos:start="137:13" pos:end="137:23">CPUX86State</name> <modifier pos:start="137:25" pos:end="137:25">*</modifier></type><name pos:start="137:26" pos:end="137:28">env</name> <init pos:start="137:30" pos:end="137:38">= <expr pos:start="137:32" pos:end="137:38"><name pos:start="137:32" pos:end="137:38">cpu_env</name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="139:13" pos:end="141:36"><if pos:start="139:13" pos:end="141:36">if <condition pos:start="139:16" pos:end="139:38">(<expr pos:start="139:17" pos:end="139:37"><name pos:start="139:17" pos:end="139:27"><name pos:start="139:17" pos:end="139:19">env</name><operator pos:start="139:20" pos:end="139:21">-&gt;</operator><name pos:start="139:22" pos:end="139:27">eflags</name></name> <operator pos:start="139:29" pos:end="139:29">&amp;</operator> <name pos:start="139:31" pos:end="139:37">VM_MASK</name></expr>)</condition><block type="pseudo" pos:start="141:17" pos:end="141:36"><block_content pos:start="141:17" pos:end="141:36">

                <expr_stmt pos:start="141:17" pos:end="141:36"><expr pos:start="141:17" pos:end="141:35"><call pos:start="141:17" pos:end="141:35"><name pos:start="141:17" pos:end="141:30">save_v86_state</name><argument_list pos:start="141:31" pos:end="141:35">(<argument pos:start="141:32" pos:end="141:34"><expr pos:start="141:32" pos:end="141:34"><name pos:start="141:32" pos:end="141:34">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block>

<cpp:endif pos:start="145:1" pos:end="145:6">#<cpp:directive pos:start="145:2" pos:end="145:6">endif</cpp:directive></cpp:endif>

        <comment type="block" pos:start="147:9" pos:end="147:56">/* prepare the stack frame of the virtual CPU */</comment>

<cpp:if pos:start="149:1" pos:end="151:57">#<cpp:directive pos:start="149:2" pos:end="149:3">if</cpp:directive> <expr pos:start="149:5" pos:end="151:57"><call pos:start="149:5" pos:end="149:31"><name pos:start="149:5" pos:end="149:11">defined</name><argument_list pos:start="149:12" pos:end="149:31">(<argument pos:start="149:13" pos:end="149:30"><expr pos:start="149:13" pos:end="149:30"><name pos:start="149:13" pos:end="149:30">TARGET_ABI_MIPSN32</name></expr></argument>)</argument_list></call> <operator pos:start="149:33" pos:end="149:34">||</operator> <call pos:start="149:36" pos:end="149:62"><name pos:start="149:36" pos:end="149:42">defined</name><argument_list pos:start="149:43" pos:end="149:62">(<argument pos:start="149:44" pos:end="149:61"><expr pos:start="149:44" pos:end="149:61"><name pos:start="149:44" pos:end="149:61">TARGET_ABI_MIPSN64</name></expr></argument>)</argument_list></call> \

    <operator pos:start="151:5" pos:end="151:6">||</operator> <call pos:start="151:8" pos:end="151:31"><name pos:start="151:8" pos:end="151:14">defined</name><argument_list pos:start="151:15" pos:end="151:31">(<argument pos:start="151:16" pos:end="151:30"><expr pos:start="151:16" pos:end="151:30"><name pos:start="151:16" pos:end="151:30">TARGET_OPENRISC</name></expr></argument>)</argument_list></call> <operator pos:start="151:33" pos:end="151:34">||</operator> <call pos:start="151:36" pos:end="151:57"><name pos:start="151:36" pos:end="151:42">defined</name><argument_list pos:start="151:43" pos:end="151:57">(<argument pos:start="151:44" pos:end="151:56"><expr pos:start="151:44" pos:end="151:56"><name pos:start="151:44" pos:end="151:56">TARGET_TILEGX</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <comment type="block" pos:start="153:9" pos:end="153:61">/* These targets do not have traditional signals.  */</comment>

        <expr_stmt pos:start="155:9" pos:end="158:0"><expr pos:start="155:9" pos:end="155:67"><call pos:start="155:9" pos:end="155:67"><name pos:start="155:9" pos:end="155:22">setup_rt_frame</name><argument_list pos:start="155:23" pos:end="155:67">(<argument pos:start="155:24" pos:end="155:26"><expr pos:start="155:24" pos:end="155:26"><name pos:start="155:24" pos:end="155:26">sig</name></expr></argument>, <argument pos:start="155:29" pos:end="155:30"><expr pos:start="155:29" pos:end="155:30"><name pos:start="155:29" pos:end="155:30">sa</name></expr></argument>, <argument pos:start="155:33" pos:end="155:40"><expr pos:start="155:33" pos:end="155:40"><operator pos:start="155:33" pos:end="155:33">&amp;</operator><name pos:start="155:34" pos:end="155:40"><name pos:start="155:34" pos:end="155:34">k</name><operator pos:start="155:35" pos:end="155:36">-&gt;</operator><name pos:start="155:37" pos:end="155:40">info</name></name></expr></argument>, <argument pos:start="155:43" pos:end="155:57"><expr pos:start="155:43" pos:end="155:57"><operator pos:start="155:43" pos:end="155:43">&amp;</operator><name pos:start="155:44" pos:end="155:57">target_old_set</name></expr></argument>, <argument pos:start="155:60" pos:end="155:66"><expr pos:start="155:60" pos:end="155:66"><name pos:start="155:60" pos:end="155:66">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="157:1" pos:end="157:5">#<cpp:directive pos:start="157:2" pos:end="157:5">else</cpp:directive></cpp:else>

        <if_stmt pos:start="159:9" pos:end="168:0"><if pos:start="159:9" pos:end="161:72">if <condition pos:start="159:12" pos:end="159:45">(<expr pos:start="159:13" pos:end="159:44"><name pos:start="159:13" pos:end="159:24"><name pos:start="159:13" pos:end="159:14">sa</name><operator pos:start="159:15" pos:end="159:16">-&gt;</operator><name pos:start="159:17" pos:end="159:24">sa_flags</name></name> <operator pos:start="159:26" pos:end="159:26">&amp;</operator> <name pos:start="159:28" pos:end="159:44">TARGET_SA_SIGINFO</name></expr>)</condition><block type="pseudo" pos:start="161:13" pos:end="161:72"><block_content pos:start="161:13" pos:end="161:72">

            <expr_stmt pos:start="161:13" pos:end="161:72"><expr pos:start="161:13" pos:end="161:71"><call pos:start="161:13" pos:end="161:71"><name pos:start="161:13" pos:end="161:26">setup_rt_frame</name><argument_list pos:start="161:27" pos:end="161:71">(<argument pos:start="161:28" pos:end="161:30"><expr pos:start="161:28" pos:end="161:30"><name pos:start="161:28" pos:end="161:30">sig</name></expr></argument>, <argument pos:start="161:33" pos:end="161:34"><expr pos:start="161:33" pos:end="161:34"><name pos:start="161:33" pos:end="161:34">sa</name></expr></argument>, <argument pos:start="161:37" pos:end="161:44"><expr pos:start="161:37" pos:end="161:44"><operator pos:start="161:37" pos:end="161:37">&amp;</operator><name pos:start="161:38" pos:end="161:44"><name pos:start="161:38" pos:end="161:38">k</name><operator pos:start="161:39" pos:end="161:40">-&gt;</operator><name pos:start="161:41" pos:end="161:44">info</name></name></expr></argument>, <argument pos:start="161:47" pos:end="161:61"><expr pos:start="161:47" pos:end="161:61"><operator pos:start="161:47" pos:end="161:47">&amp;</operator><name pos:start="161:48" pos:end="161:61">target_old_set</name></expr></argument>, <argument pos:start="161:64" pos:end="161:70"><expr pos:start="161:64" pos:end="161:70"><name pos:start="161:64" pos:end="161:70">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="163:9" pos:end="168:0">else<block type="pseudo" pos:start="165:13" pos:end="168:0"><block_content pos:start="165:13" pos:end="168:0">

            <expr_stmt pos:start="165:13" pos:end="168:0"><expr pos:start="165:13" pos:end="165:58"><call pos:start="165:13" pos:end="165:58"><name pos:start="165:13" pos:end="165:23">setup_frame</name><argument_list pos:start="165:24" pos:end="165:58">(<argument pos:start="165:25" pos:end="165:27"><expr pos:start="165:25" pos:end="165:27"><name pos:start="165:25" pos:end="165:27">sig</name></expr></argument>, <argument pos:start="165:30" pos:end="165:31"><expr pos:start="165:30" pos:end="165:31"><name pos:start="165:30" pos:end="165:31">sa</name></expr></argument>, <argument pos:start="165:34" pos:end="165:48"><expr pos:start="165:34" pos:end="165:48"><operator pos:start="165:34" pos:end="165:34">&amp;</operator><name pos:start="165:35" pos:end="165:48">target_old_set</name></expr></argument>, <argument pos:start="165:51" pos:end="165:57"><expr pos:start="165:51" pos:end="165:57"><name pos:start="165:51" pos:end="165:57">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif pos:start="167:1" pos:end="167:6">#<cpp:directive pos:start="167:2" pos:end="167:6">endif</cpp:directive></cpp:endif>

        <if_stmt pos:start="169:9" pos:end="173:9"><if pos:start="169:9" pos:end="173:9">if <condition pos:start="169:12" pos:end="169:47">(<expr pos:start="169:13" pos:end="169:46"><name pos:start="169:13" pos:end="169:24"><name pos:start="169:13" pos:end="169:14">sa</name><operator pos:start="169:15" pos:end="169:16">-&gt;</operator><name pos:start="169:17" pos:end="169:24">sa_flags</name></name> <operator pos:start="169:26" pos:end="169:26">&amp;</operator> <name pos:start="169:28" pos:end="169:46">TARGET_SA_RESETHAND</name></expr>)</condition> <block pos:start="169:49" pos:end="173:9">{<block_content pos:start="171:13" pos:end="171:45">

            <expr_stmt pos:start="171:13" pos:end="171:45"><expr pos:start="171:13" pos:end="171:44"><name pos:start="171:13" pos:end="171:27"><name pos:start="171:13" pos:end="171:14">sa</name><operator pos:start="171:15" pos:end="171:16">-&gt;</operator><name pos:start="171:17" pos:end="171:27">_sa_handler</name></name> <operator pos:start="171:29" pos:end="171:29">=</operator> <name pos:start="171:31" pos:end="171:44">TARGET_SIG_DFL</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
