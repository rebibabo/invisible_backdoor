<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15303.c" pos:tabs="8"><function pos:start="1:1" pos:end="33:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:31">kvm_arm_sync_mpstate_to_kvm</name><parameter_list pos:start="1:32" pos:end="1:44">(<parameter pos:start="1:33" pos:end="1:43"><decl pos:start="1:33" pos:end="1:43"><type pos:start="1:33" pos:end="1:40"><name pos:start="1:33" pos:end="1:38">ARMCPU</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">cpu</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="33:1">{<block_content pos:start="5:5" pos:end="31:13">

    <if_stmt pos:start="5:5" pos:end="27:5"><if pos:start="5:5" pos:end="27:5">if <condition pos:start="5:8" pos:end="5:25">(<expr pos:start="5:9" pos:end="5:24"><name pos:start="5:9" pos:end="5:24">cap_has_mp_state</name></expr>)</condition> <block pos:start="5:27" pos:end="27:5">{<block_content pos:start="7:9" pos:end="25:9">

        <decl_stmt pos:start="7:9" pos:end="13:10"><decl pos:start="7:9" pos:end="13:9"><type pos:start="7:9" pos:end="7:27"><name pos:start="7:9" pos:end="7:27"><name pos:start="7:9" pos:end="7:14">struct</name> <name pos:start="7:16" pos:end="7:27">kvm_mp_state</name></name></type> <name pos:start="7:29" pos:end="7:36">mp_state</name> <init pos:start="7:38" pos:end="13:9">= <expr pos:start="7:40" pos:end="13:9"><block pos:start="7:40" pos:end="13:9">{

            <expr pos:start="9:13" pos:end="11:75"><operator pos:start="9:13" pos:end="9:13">.</operator><name pos:start="9:14" pos:end="9:21">mp_state</name> <operator pos:start="9:23" pos:end="9:23">=</operator>

            <name pos:start="11:13" pos:end="11:28"><name pos:start="11:13" pos:end="11:15">cpu</name><operator pos:start="11:16" pos:end="11:17">-&gt;</operator><name pos:start="11:18" pos:end="11:28">powered_off</name></name> <operator pos:start="11:30" pos:end="11:30">?</operator> <name pos:start="11:32" pos:end="11:51">KVM_MP_STATE_STOPPED</name> <operator pos:start="11:53" pos:end="11:53">:</operator> <name pos:start="11:55" pos:end="11:75">KVM_MP_STATE_RUNNABLE</name></expr>

        }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:72"><decl pos:start="15:9" pos:end="15:71"><type pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:11">int</name></type> <name pos:start="15:13" pos:end="15:15">ret</name> <init pos:start="15:17" pos:end="15:71">= <expr pos:start="15:19" pos:end="15:71"><call pos:start="15:19" pos:end="15:71"><name pos:start="15:19" pos:end="15:32">kvm_vcpu_ioctl</name><argument_list pos:start="15:33" pos:end="15:71">(<argument pos:start="15:34" pos:end="15:41"><expr pos:start="15:34" pos:end="15:41"><call pos:start="15:34" pos:end="15:41"><name pos:start="15:34" pos:end="15:36">CPU</name><argument_list pos:start="15:37" pos:end="15:41">(<argument pos:start="15:38" pos:end="15:40"><expr pos:start="15:38" pos:end="15:40"><name pos:start="15:38" pos:end="15:40">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="15:44" pos:end="15:59"><expr pos:start="15:44" pos:end="15:59"><name pos:start="15:44" pos:end="15:59">KVM_SET_MP_STATE</name></expr></argument>, <argument pos:start="15:62" pos:end="15:70"><expr pos:start="15:62" pos:end="15:70"><operator pos:start="15:62" pos:end="15:62">&amp;</operator><name pos:start="15:63" pos:end="15:70">mp_state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="17:9" pos:end="25:9"><if pos:start="17:9" pos:end="25:9">if <condition pos:start="17:12" pos:end="17:16">(<expr pos:start="17:13" pos:end="17:15"><name pos:start="17:13" pos:end="17:15">ret</name></expr>)</condition> <block pos:start="17:18" pos:end="25:9">{<block_content pos:start="19:13" pos:end="23:22">

            <expr_stmt pos:start="19:13" pos:end="21:51"><expr pos:start="19:13" pos:end="21:50"><call pos:start="19:13" pos:end="21:50"><name pos:start="19:13" pos:end="19:19">fprintf</name><argument_list pos:start="19:20" pos:end="21:50">(<argument pos:start="19:21" pos:end="19:26"><expr pos:start="19:21" pos:end="19:26"><name pos:start="19:21" pos:end="19:26">stderr</name></expr></argument>, <argument pos:start="19:29" pos:end="19:64"><expr pos:start="19:29" pos:end="19:64"><literal type="string" pos:start="19:29" pos:end="19:64">"%s: failed to set MP_STATE %d/%s\n"</literal></expr></argument>,

                    <argument pos:start="21:21" pos:end="21:28"><expr pos:start="21:21" pos:end="21:28"><name pos:start="21:21" pos:end="21:28">__func__</name></expr></argument>, <argument pos:start="21:31" pos:end="21:33"><expr pos:start="21:31" pos:end="21:33"><name pos:start="21:31" pos:end="21:33">ret</name></expr></argument>, <argument pos:start="21:36" pos:end="21:49"><expr pos:start="21:36" pos:end="21:49"><call pos:start="21:36" pos:end="21:49"><name pos:start="21:36" pos:end="21:43">strerror</name><argument_list pos:start="21:44" pos:end="21:49">(<argument pos:start="21:45" pos:end="21:48"><expr pos:start="21:45" pos:end="21:48"><operator pos:start="21:45" pos:end="21:45">-</operator><name pos:start="21:46" pos:end="21:48">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="23:13" pos:end="23:22">return <expr pos:start="23:20" pos:end="23:21"><operator pos:start="23:20" pos:end="23:20">-</operator><literal type="number" pos:start="23:21" pos:end="23:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="31:5" pos:end="31:13">return <expr pos:start="31:12" pos:end="31:12"><literal type="number" pos:start="31:12" pos:end="31:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
