<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14171.c" pos:tabs="8"><function pos:start="1:1" pos:end="223:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:23">coroutine_fn</name></type> <name pos:start="1:25" pos:end="1:39">sd_co_rw_vector</name><parameter_list pos:start="1:40" pos:end="1:48">(<parameter pos:start="1:41" pos:end="1:47"><decl pos:start="1:41" pos:end="1:47"><type pos:start="1:41" pos:end="1:46"><name pos:start="1:41" pos:end="1:44">void</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:47">p</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="223:1">{<block_content pos:start="5:5" pos:end="221:13">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">SheepdogAIOCB</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:22">acb</name> <init pos:start="5:24" pos:end="5:26">= <expr pos:start="5:26" pos:end="5:26"><name pos:start="5:26" pos:end="5:26">p</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:76"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:17">long</name></type> <name pos:start="9:19" pos:end="9:21">len</name></decl>, <decl pos:start="9:24" pos:end="9:31"><type ref="prev" pos:start="9:5" pos:end="9:17"/><name pos:start="9:24" pos:end="9:27">done</name> <init pos:start="9:29" pos:end="9:31">= <expr pos:start="9:31" pos:end="9:31"><literal type="number" pos:start="9:31" pos:end="9:31">0</literal></expr></init></decl>, <decl pos:start="9:34" pos:end="9:75"><type ref="prev" pos:start="9:5" pos:end="9:17"/><name pos:start="9:34" pos:end="9:38">total</name> <init pos:start="9:40" pos:end="9:75">= <expr pos:start="9:42" pos:end="9:75"><name pos:start="9:42" pos:end="9:56"><name pos:start="9:42" pos:end="9:44">acb</name><operator pos:start="9:45" pos:end="9:46">-&gt;</operator><name pos:start="9:47" pos:end="9:56">nb_sectors</name></name> <operator pos:start="9:58" pos:end="9:58">*</operator> <name pos:start="9:60" pos:end="9:75">BDRV_SECTOR_SIZE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:78"><decl pos:start="11:5" pos:end="11:77"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:17">long</name></type> <name pos:start="11:19" pos:end="11:21">idx</name> <init pos:start="11:23" pos:end="11:77">= <expr pos:start="11:25" pos:end="11:77"><name pos:start="11:25" pos:end="11:39"><name pos:start="11:25" pos:end="11:27">acb</name><operator pos:start="11:28" pos:end="11:29">-&gt;</operator><name pos:start="11:30" pos:end="11:39">sector_num</name></name> <operator pos:start="11:41" pos:end="11:41">*</operator> <name pos:start="11:43" pos:end="11:58">BDRV_SECTOR_SIZE</name> <operator pos:start="11:60" pos:end="11:60">/</operator> <name pos:start="11:62" pos:end="11:77">SD_DATA_OBJ_SIZE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:16">oid</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:78"><decl pos:start="15:5" pos:end="15:77"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:19">offset</name> <init pos:start="15:21" pos:end="15:77">= <expr pos:start="15:23" pos:end="15:77"><operator pos:start="15:23" pos:end="15:23">(</operator><name pos:start="15:24" pos:end="15:38"><name pos:start="15:24" pos:end="15:26">acb</name><operator pos:start="15:27" pos:end="15:28">-&gt;</operator><name pos:start="15:29" pos:end="15:38">sector_num</name></name> <operator pos:start="15:40" pos:end="15:40">*</operator> <name pos:start="15:42" pos:end="15:57">BDRV_SECTOR_SIZE</name><operator pos:start="15:58" pos:end="15:58">)</operator> <operator pos:start="15:60" pos:end="15:60">%</operator> <name pos:start="15:62" pos:end="15:77">SD_DATA_OBJ_SIZE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:50"><decl pos:start="17:5" pos:end="17:49"><type pos:start="17:5" pos:end="17:23"><name pos:start="17:5" pos:end="17:21">BDRVSheepdogState</name> <modifier pos:start="17:23" pos:end="17:23">*</modifier></type><name pos:start="17:24" pos:end="17:24">s</name> <init pos:start="17:26" pos:end="17:49">= <expr pos:start="17:28" pos:end="17:49"><name pos:start="17:28" pos:end="17:49"><name pos:start="17:28" pos:end="17:30">acb</name><operator pos:start="17:31" pos:end="17:32">-&gt;</operator><name pos:start="17:33" pos:end="17:38">common</name><operator pos:start="17:39" pos:end="17:39">.</operator><name pos:start="17:40" pos:end="17:41">bs</name><operator pos:start="17:42" pos:end="17:43">-&gt;</operator><name pos:start="17:44" pos:end="17:49">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:37"><decl pos:start="19:5" pos:end="19:36"><type pos:start="19:5" pos:end="19:19"><name pos:start="19:5" pos:end="19:17">SheepdogInode</name> <modifier pos:start="19:19" pos:end="19:19">*</modifier></type><name pos:start="19:20" pos:end="19:24">inode</name> <init pos:start="19:26" pos:end="19:36">= <expr pos:start="19:28" pos:end="19:36"><operator pos:start="19:28" pos:end="19:28">&amp;</operator><name pos:start="19:29" pos:end="19:36"><name pos:start="19:29" pos:end="19:29">s</name><operator pos:start="19:30" pos:end="19:31">-&gt;</operator><name pos:start="19:32" pos:end="19:36">inode</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:20"><decl pos:start="21:5" pos:end="21:19"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:10">AIOReq</name> <modifier pos:start="21:12" pos:end="21:12">*</modifier></type><name pos:start="21:13" pos:end="21:19">aio_req</name></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="45:5"><if pos:start="25:5" pos:end="45:5">if <condition pos:start="25:8" pos:end="25:63">(<expr pos:start="25:9" pos:end="25:62"><name pos:start="25:9" pos:end="25:23"><name pos:start="25:9" pos:end="25:11">acb</name><operator pos:start="25:12" pos:end="25:13">-&gt;</operator><name pos:start="25:14" pos:end="25:23">aiocb_type</name></name> <operator pos:start="25:25" pos:end="25:26">==</operator> <name pos:start="25:28" pos:end="25:44">AIOCB_WRITE_UDATA</name> <operator pos:start="25:46" pos:end="25:47">&amp;&amp;</operator> <name pos:start="25:49" pos:end="25:62"><name pos:start="25:49" pos:end="25:49">s</name><operator pos:start="25:50" pos:end="25:51">-&gt;</operator><name pos:start="25:52" pos:end="25:62">is_snapshot</name></name></expr>)</condition> <block pos:start="25:65" pos:end="45:5">{<block_content pos:start="35:9" pos:end="43:9">

        <comment type="block" pos:start="27:9" pos:end="33:11">/*

         * In the case we open the snapshot VDI, Sheepdog creates the

         * writable VDI when we do a write operation first.

         */</comment>

        <expr_stmt pos:start="35:9" pos:end="35:34"><expr pos:start="35:9" pos:end="35:33"><name pos:start="35:9" pos:end="35:11">ret</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <call pos:start="35:15" pos:end="35:33"><name pos:start="35:15" pos:end="35:30">sd_create_branch</name><argument_list pos:start="35:31" pos:end="35:33">(<argument pos:start="35:32" pos:end="35:32"><expr pos:start="35:32" pos:end="35:32"><name pos:start="35:32" pos:end="35:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="43:9"><if pos:start="37:9" pos:end="43:9">if <condition pos:start="37:12" pos:end="37:16">(<expr pos:start="37:13" pos:end="37:15"><name pos:start="37:13" pos:end="37:15">ret</name></expr>)</condition> <block pos:start="37:18" pos:end="43:9">{<block_content pos:start="39:13" pos:end="41:21">

            <expr_stmt pos:start="39:13" pos:end="39:28"><expr pos:start="39:13" pos:end="39:27"><name pos:start="39:13" pos:end="39:20"><name pos:start="39:13" pos:end="39:15">acb</name><operator pos:start="39:16" pos:end="39:17">-&gt;</operator><name pos:start="39:18" pos:end="39:20">ret</name></name> <operator pos:start="39:22" pos:end="39:22">=</operator> <operator pos:start="39:24" pos:end="39:24">-</operator><name pos:start="39:25" pos:end="39:27">EIO</name></expr>;</expr_stmt>

            <goto pos:start="41:13" pos:end="41:21">goto <name pos:start="41:18" pos:end="41:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="49:5" pos:end="55:7">/*

     * Make sure we don't free the aiocb before we are done with all requests.

     * This additional reference is dropped at the end of this function.

     */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:22"><expr pos:start="57:5" pos:end="57:21"><name pos:start="57:5" pos:end="57:19"><name pos:start="57:5" pos:end="57:7">acb</name><operator pos:start="57:8" pos:end="57:9">-&gt;</operator><name pos:start="57:10" pos:end="57:19">nr_pending</name></name><operator pos:start="57:20" pos:end="57:21">++</operator></expr>;</expr_stmt>



    <while pos:start="61:5" pos:end="211:5">while <condition pos:start="61:11" pos:end="61:25">(<expr pos:start="61:12" pos:end="61:24"><name pos:start="61:12" pos:end="61:15">done</name> <operator pos:start="61:17" pos:end="61:18">!=</operator> <name pos:start="61:20" pos:end="61:24">total</name></expr>)</condition> <block pos:start="61:27" pos:end="211:5">{<block_content pos:start="63:9" pos:end="209:20">

        <decl_stmt pos:start="63:9" pos:end="63:26"><decl pos:start="63:9" pos:end="63:25"><type pos:start="63:9" pos:end="63:15"><name pos:start="63:9" pos:end="63:15">uint8_t</name></type> <name pos:start="63:17" pos:end="63:21">flags</name> <init pos:start="63:23" pos:end="63:25">= <expr pos:start="63:25" pos:end="63:25"><literal type="number" pos:start="63:25" pos:end="63:25">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="65:9" pos:end="65:29"><decl pos:start="65:9" pos:end="65:28"><type pos:start="65:9" pos:end="65:16"><name pos:start="65:9" pos:end="65:16">uint64_t</name></type> <name pos:start="65:18" pos:end="65:24">old_oid</name> <init pos:start="65:26" pos:end="65:28">= <expr pos:start="65:28" pos:end="65:28"><literal type="number" pos:start="65:28" pos:end="65:28">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="67:9" pos:end="67:28"><decl pos:start="67:9" pos:end="67:27"><type pos:start="67:9" pos:end="67:12"><name pos:start="67:9" pos:end="67:12">bool</name></type> <name pos:start="67:14" pos:end="67:19">create</name> <init pos:start="67:21" pos:end="67:27">= <expr pos:start="67:23" pos:end="67:27"><name pos:start="67:23" pos:end="67:27">false</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="71:9" pos:end="71:60"><expr pos:start="71:9" pos:end="71:59"><name pos:start="71:9" pos:end="71:11">oid</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <call pos:start="71:15" pos:end="71:59"><name pos:start="71:15" pos:end="71:29">vid_to_data_oid</name><argument_list pos:start="71:30" pos:end="71:59">(<argument pos:start="71:31" pos:end="71:53"><expr pos:start="71:31" pos:end="71:53"><name pos:start="71:31" pos:end="71:53"><name pos:start="71:31" pos:end="71:35">inode</name><operator pos:start="71:36" pos:end="71:37">-&gt;</operator><name pos:start="71:38" pos:end="71:48">data_vdi_id</name><index pos:start="71:49" pos:end="71:53">[<expr pos:start="71:50" pos:end="71:52"><name pos:start="71:50" pos:end="71:52">idx</name></expr>]</index></name></expr></argument>, <argument pos:start="71:56" pos:end="71:58"><expr pos:start="71:56" pos:end="71:58"><name pos:start="71:56" pos:end="71:58">idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="75:9" pos:end="75:59"><expr pos:start="75:9" pos:end="75:58"><name pos:start="75:9" pos:end="75:11">len</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <call pos:start="75:15" pos:end="75:58"><name pos:start="75:15" pos:end="75:17">MIN</name><argument_list pos:start="75:18" pos:end="75:58">(<argument pos:start="75:19" pos:end="75:30"><expr pos:start="75:19" pos:end="75:30"><name pos:start="75:19" pos:end="75:23">total</name> <operator pos:start="75:25" pos:end="75:25">-</operator> <name pos:start="75:27" pos:end="75:30">done</name></expr></argument>, <argument pos:start="75:33" pos:end="75:57"><expr pos:start="75:33" pos:end="75:57"><name pos:start="75:33" pos:end="75:48">SD_DATA_OBJ_SIZE</name> <operator pos:start="75:50" pos:end="75:50">-</operator> <name pos:start="75:52" pos:end="75:57">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <switch pos:start="79:9" pos:end="135:9">switch <condition pos:start="79:16" pos:end="79:32">(<expr pos:start="79:17" pos:end="79:31"><name pos:start="79:17" pos:end="79:31"><name pos:start="79:17" pos:end="79:19">acb</name><operator pos:start="79:20" pos:end="79:21">-&gt;</operator><name pos:start="79:22" pos:end="79:31">aiocb_type</name></name></expr>)</condition> <block pos:start="79:34" pos:end="135:9">{<block_content pos:start="81:9" pos:end="133:18">

        <case pos:start="81:9" pos:end="81:30">case <expr pos:start="81:14" pos:end="81:29"><name pos:start="81:14" pos:end="81:29">AIOCB_READ_UDATA</name></expr>:</case>

            <if_stmt pos:start="83:13" pos:end="89:13"><if pos:start="83:13" pos:end="89:13">if <condition pos:start="83:16" pos:end="83:41">(<expr pos:start="83:17" pos:end="83:40"><operator pos:start="83:17" pos:end="83:17">!</operator><name pos:start="83:18" pos:end="83:40"><name pos:start="83:18" pos:end="83:22">inode</name><operator pos:start="83:23" pos:end="83:24">-&gt;</operator><name pos:start="83:25" pos:end="83:35">data_vdi_id</name><index pos:start="83:36" pos:end="83:40">[<expr pos:start="83:37" pos:end="83:39"><name pos:start="83:37" pos:end="83:39">idx</name></expr>]</index></name></expr>)</condition> <block pos:start="83:43" pos:end="89:13">{<block_content pos:start="85:17" pos:end="87:26">

                <expr_stmt pos:start="85:17" pos:end="85:59"><expr pos:start="85:17" pos:end="85:58"><call pos:start="85:17" pos:end="85:58"><name pos:start="85:17" pos:end="85:33">qemu_iovec_memset</name><argument_list pos:start="85:34" pos:end="85:58">(<argument pos:start="85:35" pos:end="85:43"><expr pos:start="85:35" pos:end="85:43"><name pos:start="85:35" pos:end="85:43"><name pos:start="85:35" pos:end="85:37">acb</name><operator pos:start="85:38" pos:end="85:39">-&gt;</operator><name pos:start="85:40" pos:end="85:43">qiov</name></name></expr></argument>, <argument pos:start="85:46" pos:end="85:49"><expr pos:start="85:46" pos:end="85:49"><name pos:start="85:46" pos:end="85:49">done</name></expr></argument>, <argument pos:start="85:52" pos:end="85:52"><expr pos:start="85:52" pos:end="85:52"><literal type="number" pos:start="85:52" pos:end="85:52">0</literal></expr></argument>, <argument pos:start="85:55" pos:end="85:57"><expr pos:start="85:55" pos:end="85:57"><name pos:start="85:55" pos:end="85:57">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="87:17" pos:end="87:26">goto <name pos:start="87:22" pos:end="87:25">done</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <break pos:start="91:13" pos:end="91:18">break;</break>

        <case pos:start="93:9" pos:end="93:31">case <expr pos:start="93:14" pos:end="93:30"><name pos:start="93:14" pos:end="93:30">AIOCB_WRITE_UDATA</name></expr>:</case>

            <if_stmt pos:start="95:13" pos:end="109:13"><if pos:start="95:13" pos:end="99:13">if <condition pos:start="95:16" pos:end="95:41">(<expr pos:start="95:17" pos:end="95:40"><operator pos:start="95:17" pos:end="95:17">!</operator><name pos:start="95:18" pos:end="95:40"><name pos:start="95:18" pos:end="95:22">inode</name><operator pos:start="95:23" pos:end="95:24">-&gt;</operator><name pos:start="95:25" pos:end="95:35">data_vdi_id</name><index pos:start="95:36" pos:end="95:40">[<expr pos:start="95:37" pos:end="95:39"><name pos:start="95:37" pos:end="95:39">idx</name></expr>]</index></name></expr>)</condition> <block pos:start="95:43" pos:end="99:13">{<block_content pos:start="97:17" pos:end="97:30">

                <expr_stmt pos:start="97:17" pos:end="97:30"><expr pos:start="97:17" pos:end="97:29"><name pos:start="97:17" pos:end="97:22">create</name> <operator pos:start="97:24" pos:end="97:24">=</operator> <name pos:start="97:26" pos:end="97:29">true</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="99:15" pos:end="109:13">else if <condition pos:start="99:23" pos:end="99:57">(<expr pos:start="99:24" pos:end="99:56"><operator pos:start="99:24" pos:end="99:24">!</operator><call pos:start="99:25" pos:end="99:56"><name pos:start="99:25" pos:end="99:44">is_data_obj_writable</name><argument_list pos:start="99:45" pos:end="99:56">(<argument pos:start="99:46" pos:end="99:50"><expr pos:start="99:46" pos:end="99:50"><name pos:start="99:46" pos:end="99:50">inode</name></expr></argument>, <argument pos:start="99:53" pos:end="99:55"><expr pos:start="99:53" pos:end="99:55"><name pos:start="99:53" pos:end="99:55">idx</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="99:59" pos:end="109:13">{<block_content pos:start="103:17" pos:end="107:40">

                <comment type="block" pos:start="101:17" pos:end="101:35">/* Copy-On-Write */</comment>

                <expr_stmt pos:start="103:17" pos:end="103:30"><expr pos:start="103:17" pos:end="103:29"><name pos:start="103:17" pos:end="103:22">create</name> <operator pos:start="103:24" pos:end="103:24">=</operator> <name pos:start="103:26" pos:end="103:29">true</name></expr>;</expr_stmt>

                <expr_stmt pos:start="105:17" pos:end="105:30"><expr pos:start="105:17" pos:end="105:29"><name pos:start="105:17" pos:end="105:23">old_oid</name> <operator pos:start="105:25" pos:end="105:25">=</operator> <name pos:start="105:27" pos:end="105:29">oid</name></expr>;</expr_stmt>

                <expr_stmt pos:start="107:17" pos:end="107:40"><expr pos:start="107:17" pos:end="107:39"><name pos:start="107:17" pos:end="107:21">flags</name> <operator pos:start="107:23" pos:end="107:23">=</operator> <name pos:start="107:25" pos:end="107:39">SD_FLAG_CMD_COW</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="111:13" pos:end="111:18">break;</break>

        <case pos:start="113:9" pos:end="113:31">case <expr pos:start="113:14" pos:end="113:30"><name pos:start="113:14" pos:end="113:30">AIOCB_DISCARD_OBJ</name></expr>:</case>

            <comment type="block" pos:start="115:13" pos:end="121:15">/*

             * We discard the object only when the whole object is

             * 1) allocated 2) trimmed. Otherwise, simply skip it.

             */</comment>

            <if_stmt pos:start="123:13" pos:end="127:13"><if pos:start="123:13" pos:end="127:13">if <condition pos:start="123:16" pos:end="123:72">(<expr pos:start="123:17" pos:end="123:71"><name pos:start="123:17" pos:end="123:19">len</name> <operator pos:start="123:21" pos:end="123:22">!=</operator> <name pos:start="123:24" pos:end="123:39">SD_DATA_OBJ_SIZE</name> <operator pos:start="123:41" pos:end="123:42">||</operator> <name pos:start="123:44" pos:end="123:66"><name pos:start="123:44" pos:end="123:48">inode</name><operator pos:start="123:49" pos:end="123:50">-&gt;</operator><name pos:start="123:51" pos:end="123:61">data_vdi_id</name><index pos:start="123:62" pos:end="123:66">[<expr pos:start="123:63" pos:end="123:65"><name pos:start="123:63" pos:end="123:65">idx</name></expr>]</index></name> <operator pos:start="123:68" pos:end="123:69">==</operator> <literal type="number" pos:start="123:71" pos:end="123:71">0</literal></expr>)</condition> <block pos:start="123:74" pos:end="127:13">{<block_content pos:start="125:17" pos:end="125:26">

                <goto pos:start="125:17" pos:end="125:26">goto <name pos:start="125:22" pos:end="125:25">done</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <break pos:start="129:13" pos:end="129:18">break;</break>

        <default pos:start="131:9" pos:end="131:16">default:</default>

            <break pos:start="133:13" pos:end="133:18">break;</break>

        </block_content>}</block></switch>



        <if_stmt pos:start="139:9" pos:end="151:9"><if pos:start="139:9" pos:end="151:9">if <condition pos:start="139:12" pos:end="139:19">(<expr pos:start="139:13" pos:end="139:18"><name pos:start="139:13" pos:end="139:18">create</name></expr>)</condition> <block pos:start="139:21" pos:end="151:9">{<block_content pos:start="141:13" pos:end="149:50">

            <expr_stmt pos:start="141:13" pos:end="145:72"><expr pos:start="141:13" pos:end="145:71"><call pos:start="141:13" pos:end="145:71"><name pos:start="141:13" pos:end="141:19">DPRINTF</name><argument_list pos:start="141:20" pos:end="145:71">(<argument pos:start="141:21" pos:end="141:76"><expr pos:start="141:21" pos:end="141:76"><literal type="string" pos:start="141:21" pos:end="141:35">"update ino (%"</literal> <name pos:start="141:37" pos:end="141:42">PRIu32</name> <literal type="string" pos:start="141:44" pos:end="141:48">") %"</literal> <name pos:start="141:50" pos:end="141:55">PRIu64</name> <literal type="string" pos:start="141:57" pos:end="141:60">" %"</literal> <name pos:start="141:62" pos:end="141:67">PRIu64</name> <literal type="string" pos:start="141:69" pos:end="141:76">" %ld\n"</literal></expr></argument>,

                    <argument pos:start="143:21" pos:end="143:33"><expr pos:start="143:21" pos:end="143:33"><name pos:start="143:21" pos:end="143:33"><name pos:start="143:21" pos:end="143:25">inode</name><operator pos:start="143:26" pos:end="143:27">-&gt;</operator><name pos:start="143:28" pos:end="143:33">vdi_id</name></name></expr></argument>, <argument pos:start="143:36" pos:end="143:38"><expr pos:start="143:36" pos:end="143:38"><name pos:start="143:36" pos:end="143:38">oid</name></expr></argument>,

                    <argument pos:start="145:21" pos:end="145:65"><expr pos:start="145:21" pos:end="145:65"><call pos:start="145:21" pos:end="145:65"><name pos:start="145:21" pos:end="145:35">vid_to_data_oid</name><argument_list pos:start="145:36" pos:end="145:65">(<argument pos:start="145:37" pos:end="145:59"><expr pos:start="145:37" pos:end="145:59"><name pos:start="145:37" pos:end="145:59"><name pos:start="145:37" pos:end="145:41">inode</name><operator pos:start="145:42" pos:end="145:43">-&gt;</operator><name pos:start="145:44" pos:end="145:54">data_vdi_id</name><index pos:start="145:55" pos:end="145:59">[<expr pos:start="145:56" pos:end="145:58"><name pos:start="145:56" pos:end="145:58">idx</name></expr>]</index></name></expr></argument>, <argument pos:start="145:62" pos:end="145:64"><expr pos:start="145:62" pos:end="145:64"><name pos:start="145:62" pos:end="145:64">idx</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="145:68" pos:end="145:70"><expr pos:start="145:68" pos:end="145:70"><name pos:start="145:68" pos:end="145:70">idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="147:13" pos:end="147:54"><expr pos:start="147:13" pos:end="147:53"><name pos:start="147:13" pos:end="147:15">oid</name> <operator pos:start="147:17" pos:end="147:17">=</operator> <call pos:start="147:19" pos:end="147:53"><name pos:start="147:19" pos:end="147:33">vid_to_data_oid</name><argument_list pos:start="147:34" pos:end="147:53">(<argument pos:start="147:35" pos:end="147:47"><expr pos:start="147:35" pos:end="147:47"><name pos:start="147:35" pos:end="147:47"><name pos:start="147:35" pos:end="147:39">inode</name><operator pos:start="147:40" pos:end="147:41">-&gt;</operator><name pos:start="147:42" pos:end="147:47">vdi_id</name></name></expr></argument>, <argument pos:start="147:50" pos:end="147:52"><expr pos:start="147:50" pos:end="147:52"><name pos:start="147:50" pos:end="147:52">idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:50"><expr pos:start="149:13" pos:end="149:49"><call pos:start="149:13" pos:end="149:49"><name pos:start="149:13" pos:end="149:19">DPRINTF</name><argument_list pos:start="149:20" pos:end="149:49">(<argument pos:start="149:21" pos:end="149:43"><expr pos:start="149:21" pos:end="149:43"><literal type="string" pos:start="149:21" pos:end="149:31">"new oid %"</literal> <name pos:start="149:33" pos:end="149:38">PRIx64</name> <literal type="string" pos:start="149:40" pos:end="149:43">"\n"</literal></expr></argument>, <argument pos:start="149:46" pos:end="149:48"><expr pos:start="149:46" pos:end="149:48"><name pos:start="149:46" pos:end="149:48">oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="155:9" pos:end="155:80"><expr pos:start="155:9" pos:end="155:79"><name pos:start="155:9" pos:end="155:15">aio_req</name> <operator pos:start="155:17" pos:end="155:17">=</operator> <call pos:start="155:19" pos:end="155:79"><name pos:start="155:19" pos:end="155:31">alloc_aio_req</name><argument_list pos:start="155:32" pos:end="155:79">(<argument pos:start="155:33" pos:end="155:33"><expr pos:start="155:33" pos:end="155:33"><name pos:start="155:33" pos:end="155:33">s</name></expr></argument>, <argument pos:start="155:36" pos:end="155:38"><expr pos:start="155:36" pos:end="155:38"><name pos:start="155:36" pos:end="155:38">acb</name></expr></argument>, <argument pos:start="155:41" pos:end="155:43"><expr pos:start="155:41" pos:end="155:43"><name pos:start="155:41" pos:end="155:43">oid</name></expr></argument>, <argument pos:start="155:46" pos:end="155:48"><expr pos:start="155:46" pos:end="155:48"><name pos:start="155:46" pos:end="155:48">len</name></expr></argument>, <argument pos:start="155:51" pos:end="155:56"><expr pos:start="155:51" pos:end="155:56"><name pos:start="155:51" pos:end="155:56">offset</name></expr></argument>, <argument pos:start="155:59" pos:end="155:63"><expr pos:start="155:59" pos:end="155:63"><name pos:start="155:59" pos:end="155:63">flags</name></expr></argument>, <argument pos:start="155:66" pos:end="155:72"><expr pos:start="155:66" pos:end="155:72"><name pos:start="155:66" pos:end="155:72">old_oid</name></expr></argument>, <argument pos:start="155:75" pos:end="155:78"><expr pos:start="155:75" pos:end="155:78"><name pos:start="155:75" pos:end="155:78">done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="159:9" pos:end="193:9"><if pos:start="159:9" pos:end="193:9">if <condition pos:start="159:12" pos:end="159:19">(<expr pos:start="159:13" pos:end="159:18"><name pos:start="159:13" pos:end="159:18">create</name></expr>)</condition> <block pos:start="159:21" pos:end="193:9">{<block_content pos:start="161:13" pos:end="191:13">

            <decl_stmt pos:start="161:13" pos:end="161:25"><decl pos:start="161:13" pos:end="161:24"><type pos:start="161:13" pos:end="161:20"><name pos:start="161:13" pos:end="161:18">AIOReq</name> <modifier pos:start="161:20" pos:end="161:20">*</modifier></type><name pos:start="161:21" pos:end="161:24">areq</name></decl>;</decl_stmt>

            <macro pos:start="163:13" pos:end="163:68"><name pos:start="163:13" pos:end="163:25">QLIST_FOREACH</name><argument_list pos:start="163:26" pos:end="163:68">(<argument pos:start="163:27" pos:end="163:30">areq</argument>, <argument pos:start="163:33" pos:end="163:53">&amp;s-&gt;inflight_aio_head</argument>, <argument pos:start="163:56" pos:end="163:67">aio_siblings</argument>)</argument_list></macro> <block pos:start="163:70" pos:end="191:13">{<block_content pos:start="165:17" pos:end="189:17">

                <if_stmt pos:start="165:17" pos:end="189:17"><if pos:start="165:17" pos:end="189:17">if <condition pos:start="165:20" pos:end="165:37">(<expr pos:start="165:21" pos:end="165:36"><name pos:start="165:21" pos:end="165:29"><name pos:start="165:21" pos:end="165:24">areq</name><operator pos:start="165:25" pos:end="165:26">-&gt;</operator><name pos:start="165:27" pos:end="165:29">oid</name></name> <operator pos:start="165:31" pos:end="165:32">==</operator> <name pos:start="165:34" pos:end="165:36">oid</name></expr>)</condition> <block pos:start="165:39" pos:end="189:17">{<block_content pos:start="179:21" pos:end="187:30">

                    <comment type="block" pos:start="167:21" pos:end="177:23">/*

                     * Sheepdog cannot handle simultaneous create

                     * requests to the same object.  So we cannot send

                     * the request until the previous request

                     * finishes.

                     */</comment>

                    <expr_stmt pos:start="179:21" pos:end="179:39"><expr pos:start="179:21" pos:end="179:38"><name pos:start="179:21" pos:end="179:34"><name pos:start="179:21" pos:end="179:27">aio_req</name><operator pos:start="179:28" pos:end="179:29">-&gt;</operator><name pos:start="179:30" pos:end="179:34">flags</name></name> <operator pos:start="179:36" pos:end="179:36">=</operator> <literal type="number" pos:start="179:38" pos:end="179:38">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="181:21" pos:end="181:42"><expr pos:start="181:21" pos:end="181:41"><name pos:start="181:21" pos:end="181:37"><name pos:start="181:21" pos:end="181:27">aio_req</name><operator pos:start="181:28" pos:end="181:29">-&gt;</operator><name pos:start="181:30" pos:end="181:37">base_oid</name></name> <operator pos:start="181:39" pos:end="181:39">=</operator> <literal type="number" pos:start="181:41" pos:end="181:41">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="183:21" pos:end="185:52"><expr pos:start="183:21" pos:end="185:51"><call pos:start="183:21" pos:end="185:51"><name pos:start="183:21" pos:end="183:37">QLIST_INSERT_HEAD</name><argument_list pos:start="183:38" pos:end="185:51">(<argument pos:start="183:39" pos:end="183:58"><expr pos:start="183:39" pos:end="183:58"><operator pos:start="183:39" pos:end="183:39">&amp;</operator><name pos:start="183:40" pos:end="183:58"><name pos:start="183:40" pos:end="183:40">s</name><operator pos:start="183:41" pos:end="183:42">-&gt;</operator><name pos:start="183:43" pos:end="183:58">pending_aio_head</name></name></expr></argument>, <argument pos:start="183:61" pos:end="183:67"><expr pos:start="183:61" pos:end="183:67"><name pos:start="183:61" pos:end="183:67">aio_req</name></expr></argument>,

                                      <argument pos:start="185:39" pos:end="185:50"><expr pos:start="185:39" pos:end="185:50"><name pos:start="185:39" pos:end="185:50">aio_siblings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="187:21" pos:end="187:30">goto <name pos:start="187:26" pos:end="187:29">done</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="197:9" pos:end="197:72"><expr pos:start="197:9" pos:end="197:71"><call pos:start="197:9" pos:end="197:71"><name pos:start="197:9" pos:end="197:25">QLIST_INSERT_HEAD</name><argument_list pos:start="197:26" pos:end="197:71">(<argument pos:start="197:27" pos:end="197:47"><expr pos:start="197:27" pos:end="197:47"><operator pos:start="197:27" pos:end="197:27">&amp;</operator><name pos:start="197:28" pos:end="197:47"><name pos:start="197:28" pos:end="197:28">s</name><operator pos:start="197:29" pos:end="197:30">-&gt;</operator><name pos:start="197:31" pos:end="197:47">inflight_aio_head</name></name></expr></argument>, <argument pos:start="197:50" pos:end="197:56"><expr pos:start="197:50" pos:end="197:56"><name pos:start="197:50" pos:end="197:56">aio_req</name></expr></argument>, <argument pos:start="197:59" pos:end="197:70"><expr pos:start="197:59" pos:end="197:70"><name pos:start="197:59" pos:end="197:70">aio_siblings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="199:9" pos:end="201:41"><expr pos:start="199:9" pos:end="201:40"><call pos:start="199:9" pos:end="201:40"><name pos:start="199:9" pos:end="199:23">add_aio_request</name><argument_list pos:start="199:24" pos:end="201:40">(<argument pos:start="199:25" pos:end="199:25"><expr pos:start="199:25" pos:end="199:25"><name pos:start="199:25" pos:end="199:25">s</name></expr></argument>, <argument pos:start="199:28" pos:end="199:34"><expr pos:start="199:28" pos:end="199:34"><name pos:start="199:28" pos:end="199:34">aio_req</name></expr></argument>, <argument pos:start="199:37" pos:end="199:50"><expr pos:start="199:37" pos:end="199:50"><name pos:start="199:37" pos:end="199:50"><name pos:start="199:37" pos:end="199:39">acb</name><operator pos:start="199:40" pos:end="199:41">-&gt;</operator><name pos:start="199:42" pos:end="199:45">qiov</name><operator pos:start="199:46" pos:end="199:47">-&gt;</operator><name pos:start="199:48" pos:end="199:50">iov</name></name></expr></argument>, <argument pos:start="199:53" pos:end="199:67"><expr pos:start="199:53" pos:end="199:67"><name pos:start="199:53" pos:end="199:67"><name pos:start="199:53" pos:end="199:55">acb</name><operator pos:start="199:56" pos:end="199:57">-&gt;</operator><name pos:start="199:58" pos:end="199:61">qiov</name><operator pos:start="199:62" pos:end="199:63">-&gt;</operator><name pos:start="199:64" pos:end="199:67">niov</name></name></expr></argument>, <argument pos:start="199:70" pos:end="199:75"><expr pos:start="199:70" pos:end="199:75"><name pos:start="199:70" pos:end="199:75">create</name></expr></argument>,

                        <argument pos:start="201:25" pos:end="201:39"><expr pos:start="201:25" pos:end="201:39"><name pos:start="201:25" pos:end="201:39"><name pos:start="201:25" pos:end="201:27">acb</name><operator pos:start="201:28" pos:end="201:29">-&gt;</operator><name pos:start="201:30" pos:end="201:39">aiocb_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <label pos:start="203:5" pos:end="203:9"><name pos:start="203:5" pos:end="203:8">done</name>:</label>

        <expr_stmt pos:start="205:9" pos:end="205:19"><expr pos:start="205:9" pos:end="205:18"><name pos:start="205:9" pos:end="205:14">offset</name> <operator pos:start="205:16" pos:end="205:16">=</operator> <literal type="number" pos:start="205:18" pos:end="205:18">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="207:9" pos:end="207:14"><expr pos:start="207:9" pos:end="207:13"><name pos:start="207:9" pos:end="207:11">idx</name><operator pos:start="207:12" pos:end="207:13">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:20"><expr pos:start="209:9" pos:end="209:19"><name pos:start="209:9" pos:end="209:12">done</name> <operator pos:start="209:14" pos:end="209:15">+=</operator> <name pos:start="209:17" pos:end="209:19">len</name></expr>;</expr_stmt>

    </block_content>}</block></while>

<label pos:start="213:1" pos:end="213:4"><name pos:start="213:1" pos:end="213:3">out</name>:</label>

    <if_stmt pos:start="215:5" pos:end="219:5"><if pos:start="215:5" pos:end="219:5">if <condition pos:start="215:8" pos:end="215:27">(<expr pos:start="215:9" pos:end="215:26"><operator pos:start="215:9" pos:end="215:9">!</operator><operator pos:start="215:10" pos:end="215:11">--</operator><name pos:start="215:12" pos:end="215:26"><name pos:start="215:12" pos:end="215:14">acb</name><operator pos:start="215:15" pos:end="215:16">-&gt;</operator><name pos:start="215:17" pos:end="215:26">nr_pending</name></name></expr>)</condition> <block pos:start="215:29" pos:end="219:5">{<block_content pos:start="217:9" pos:end="217:24">

        <return pos:start="217:9" pos:end="217:24">return <expr pos:start="217:16" pos:end="217:23"><name pos:start="217:16" pos:end="217:23"><name pos:start="217:16" pos:end="217:18">acb</name><operator pos:start="217:19" pos:end="217:20">-&gt;</operator><name pos:start="217:21" pos:end="217:23">ret</name></name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="221:5" pos:end="221:13">return <expr pos:start="221:12" pos:end="221:12"><literal type="number" pos:start="221:12" pos:end="221:12">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
