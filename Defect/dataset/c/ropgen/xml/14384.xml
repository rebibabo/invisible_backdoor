<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14384.c" pos:tabs="8"><function pos:start="1:1" pos:end="295:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:22">CharDriverState</name> <modifier pos:start="1:24" pos:end="1:24">*</modifier></type><name pos:start="1:25" pos:end="1:41">qemu_chr_open_tcp</name><parameter_list pos:start="1:42" pos:end="5:54">(<parameter pos:start="1:43" pos:end="1:62"><decl pos:start="1:43" pos:end="1:62"><type pos:start="1:43" pos:end="1:62"><specifier pos:start="1:43" pos:end="1:47">const</specifier> <name pos:start="1:49" pos:end="1:52">char</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:62">host_str</name></decl></parameter>,

                                          <parameter pos:start="3:43" pos:end="3:55"><decl pos:start="3:43" pos:end="3:55"><type pos:start="3:43" pos:end="3:55"><name pos:start="3:43" pos:end="3:45">int</name></type> <name pos:start="3:47" pos:end="3:55">is_telnet</name></decl></parameter>,

					  <parameter pos:start="5:43" pos:end="5:53"><decl pos:start="5:43" pos:end="5:53"><type pos:start="5:43" pos:end="5:53"><name pos:start="5:43" pos:end="5:45">int</name></type> <name pos:start="5:47" pos:end="5:53">is_unix</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="295:1">{<block_content pos:start="9:5" pos:end="293:16">

    <decl_stmt pos:start="9:5" pos:end="9:32"><decl pos:start="9:5" pos:end="9:31"><type pos:start="9:5" pos:end="9:21"><name pos:start="9:5" pos:end="9:19">CharDriverState</name> <modifier pos:start="9:21" pos:end="9:21">*</modifier></type><name pos:start="9:22" pos:end="9:24">chr</name> <init pos:start="9:26" pos:end="9:31">= <expr pos:start="9:28" pos:end="9:31"><name pos:start="9:28" pos:end="9:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:17">TCPCharDriver</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:20">s</name> <init pos:start="11:22" pos:end="11:27">= <expr pos:start="11:24" pos:end="11:27"><name pos:start="11:24" pos:end="11:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:31"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:10">fd</name> <init pos:start="13:12" pos:end="13:15">= <expr pos:start="13:14" pos:end="13:15"><operator pos:start="13:14" pos:end="13:14">-</operator><literal type="number" pos:start="13:15" pos:end="13:15">1</literal></expr></init></decl>, <decl pos:start="13:18" pos:end="13:20"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:18" pos:end="13:20">ret</name></decl>, <decl pos:start="13:23" pos:end="13:25"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:23" pos:end="13:25">err</name></decl>, <decl pos:start="13:28" pos:end="13:30"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:28" pos:end="13:30">val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:17">is_listen</name> <init pos:start="15:19" pos:end="15:21">= <expr pos:start="15:21" pos:end="15:21"><literal type="number" pos:start="15:21" pos:end="15:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:27"><decl pos:start="17:5" pos:end="17:26"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:22">is_waitconnect</name> <init pos:start="17:24" pos:end="17:26">= <expr pos:start="17:26" pos:end="17:26"><literal type="number" pos:start="17:26" pos:end="17:26">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:23"><decl pos:start="19:5" pos:end="19:22"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:18">do_nodelay</name> <init pos:start="19:20" pos:end="19:22">= <expr pos:start="19:22" pos:end="19:22"><literal type="number" pos:start="19:22" pos:end="19:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:20"><decl pos:start="21:5" pos:end="21:19"><type pos:start="21:5" pos:end="21:16"><specifier pos:start="21:5" pos:end="21:9">const</specifier> <name pos:start="21:11" pos:end="21:14">char</name> <modifier pos:start="21:16" pos:end="21:16">*</modifier></type><name pos:start="21:17" pos:end="21:19">ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="26:0"><decl pos:start="23:5" pos:end="23:28"><type pos:start="23:5" pos:end="23:22"><name pos:start="23:5" pos:end="23:22"><name pos:start="23:5" pos:end="23:10">struct</name> <name pos:start="23:12" pos:end="23:22">sockaddr_in</name></name></type> <name pos:start="23:24" pos:end="23:28">saddr</name></decl>;</decl_stmt>

<cpp:ifndef pos:start="25:1" pos:end="25:14">#<cpp:directive pos:start="25:2" pos:end="25:7">ifndef</cpp:directive> <name pos:start="25:9" pos:end="25:14">_WIN32</name></cpp:ifndef>

    <decl_stmt pos:start="27:5" pos:end="30:0"><decl pos:start="27:5" pos:end="27:28"><type pos:start="27:5" pos:end="27:22"><name pos:start="27:5" pos:end="27:22"><name pos:start="27:5" pos:end="27:10">struct</name> <name pos:start="27:12" pos:end="27:22">sockaddr_un</name></name></type> <name pos:start="27:24" pos:end="27:28">uaddr</name></decl>;</decl_stmt>

<cpp:endif pos:start="29:1" pos:end="29:6">#<cpp:directive pos:start="29:2" pos:end="29:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="31:5" pos:end="31:26"><decl pos:start="31:5" pos:end="31:25"><type pos:start="31:5" pos:end="31:21"><name pos:start="31:5" pos:end="31:19"><name pos:start="31:5" pos:end="31:10">struct</name> <name pos:start="31:12" pos:end="31:19">sockaddr</name></name> <modifier pos:start="31:21" pos:end="31:21">*</modifier></type><name pos:start="31:22" pos:end="31:25">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="38:0"><decl pos:start="33:5" pos:end="33:21"><type pos:start="33:5" pos:end="33:13"><name pos:start="33:5" pos:end="33:13">socklen_t</name></type> <name pos:start="33:15" pos:end="33:21">addrlen</name></decl>;</decl_stmt>



<cpp:ifndef pos:start="37:1" pos:end="37:14">#<cpp:directive pos:start="37:2" pos:end="37:7">ifndef</cpp:directive> <name pos:start="37:9" pos:end="37:14">_WIN32</name></cpp:ifndef>

    <if_stmt pos:start="39:5" pos:end="63:5"><if pos:start="39:5" pos:end="49:5">if <condition pos:start="39:8" pos:end="39:16">(<expr pos:start="39:9" pos:end="39:15"><name pos:start="39:9" pos:end="39:15">is_unix</name></expr>)</condition> <block pos:start="39:18" pos:end="49:5">{<block_content pos:start="41:9" pos:end="47:22">

	<expr_stmt pos:start="41:9" pos:end="41:41"><expr pos:start="41:9" pos:end="41:40"><name pos:start="41:9" pos:end="41:12">addr</name> <operator pos:start="41:14" pos:end="41:14">=</operator> <operator pos:start="41:16" pos:end="41:16">(</operator>struct <name pos:start="41:24" pos:end="41:31">sockaddr</name> <operator pos:start="41:33" pos:end="41:33">*</operator><operator pos:start="41:34" pos:end="41:34">)</operator><operator pos:start="41:35" pos:end="41:35">&amp;</operator><name pos:start="41:36" pos:end="41:40">uaddr</name></expr>;</expr_stmt>

	<expr_stmt pos:start="43:9" pos:end="43:32"><expr pos:start="43:9" pos:end="43:31"><name pos:start="43:9" pos:end="43:15">addrlen</name> <operator pos:start="43:17" pos:end="43:17">=</operator> <sizeof pos:start="43:19" pos:end="43:31">sizeof<argument_list pos:start="43:25" pos:end="43:31">(<argument pos:start="43:26" pos:end="43:30"><expr pos:start="43:26" pos:end="43:30"><name pos:start="43:26" pos:end="43:30">uaddr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<if_stmt pos:start="45:9" pos:end="47:22"><if pos:start="45:9" pos:end="47:22">if <condition pos:start="45:12" pos:end="45:50">(<expr pos:start="45:13" pos:end="45:49"><call pos:start="45:13" pos:end="45:45"><name pos:start="45:13" pos:end="45:27">parse_unix_path</name><argument_list pos:start="45:28" pos:end="45:45">(<argument pos:start="45:29" pos:end="45:34"><expr pos:start="45:29" pos:end="45:34"><operator pos:start="45:29" pos:end="45:29">&amp;</operator><name pos:start="45:30" pos:end="45:34">uaddr</name></expr></argument>, <argument pos:start="45:37" pos:end="45:44"><expr pos:start="45:37" pos:end="45:44"><name pos:start="45:37" pos:end="45:44">host_str</name></expr></argument>)</argument_list></call> <operator pos:start="45:47" pos:end="45:47">&lt;</operator> <literal type="number" pos:start="45:49" pos:end="45:49">0</literal></expr>)</condition><block type="pseudo" pos:start="47:13" pos:end="47:22"><block_content pos:start="47:13" pos:end="47:22">

	    <goto pos:start="47:13" pos:end="47:22">goto <name pos:start="47:18" pos:end="47:21">fail</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="49:7" pos:end="63:5">else

<cpp:endif pos:start="51:1" pos:end="51:6">#<cpp:directive pos:start="51:2" pos:end="51:6">endif</cpp:directive></cpp:endif>

    <block pos:start="53:5" pos:end="63:5">{<block_content pos:start="55:9" pos:end="61:22">

	<expr_stmt pos:start="55:9" pos:end="55:41"><expr pos:start="55:9" pos:end="55:40"><name pos:start="55:9" pos:end="55:12">addr</name> <operator pos:start="55:14" pos:end="55:14">=</operator> <operator pos:start="55:16" pos:end="55:16">(</operator>struct <name pos:start="55:24" pos:end="55:31">sockaddr</name> <operator pos:start="55:33" pos:end="55:33">*</operator><operator pos:start="55:34" pos:end="55:34">)</operator><operator pos:start="55:35" pos:end="55:35">&amp;</operator><name pos:start="55:36" pos:end="55:40">saddr</name></expr>;</expr_stmt>

	<expr_stmt pos:start="57:9" pos:end="57:32"><expr pos:start="57:9" pos:end="57:31"><name pos:start="57:9" pos:end="57:15">addrlen</name> <operator pos:start="57:17" pos:end="57:17">=</operator> <sizeof pos:start="57:19" pos:end="57:31">sizeof<argument_list pos:start="57:25" pos:end="57:31">(<argument pos:start="57:26" pos:end="57:30"><expr pos:start="57:26" pos:end="57:30"><name pos:start="57:26" pos:end="57:30">saddr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<if_stmt pos:start="59:9" pos:end="61:22"><if pos:start="59:9" pos:end="61:22">if <condition pos:start="59:12" pos:end="59:50">(<expr pos:start="59:13" pos:end="59:49"><call pos:start="59:13" pos:end="59:45"><name pos:start="59:13" pos:end="59:27">parse_host_port</name><argument_list pos:start="59:28" pos:end="59:45">(<argument pos:start="59:29" pos:end="59:34"><expr pos:start="59:29" pos:end="59:34"><operator pos:start="59:29" pos:end="59:29">&amp;</operator><name pos:start="59:30" pos:end="59:34">saddr</name></expr></argument>, <argument pos:start="59:37" pos:end="59:44"><expr pos:start="59:37" pos:end="59:44"><name pos:start="59:37" pos:end="59:44">host_str</name></expr></argument>)</argument_list></call> <operator pos:start="59:47" pos:end="59:47">&lt;</operator> <literal type="number" pos:start="59:49" pos:end="59:49">0</literal></expr>)</condition><block type="pseudo" pos:start="61:13" pos:end="61:22"><block_content pos:start="61:13" pos:end="61:22">

	    <goto pos:start="61:13" pos:end="61:22">goto <name pos:start="61:18" pos:end="61:21">fail</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:19"><expr pos:start="67:5" pos:end="67:18"><name pos:start="67:5" pos:end="67:7">ptr</name> <operator pos:start="67:9" pos:end="67:9">=</operator> <name pos:start="67:11" pos:end="67:18">host_str</name></expr>;</expr_stmt>

    <while pos:start="69:5" pos:end="93:5">while<condition pos:start="69:10" pos:end="69:34">(<expr pos:start="69:11" pos:end="69:33"><operator pos:start="69:11" pos:end="69:11">(</operator><name pos:start="69:12" pos:end="69:14">ptr</name> <operator pos:start="69:16" pos:end="69:16">=</operator> <call pos:start="69:18" pos:end="69:32"><name pos:start="69:18" pos:end="69:23">strchr</name><argument_list pos:start="69:24" pos:end="69:32">(<argument pos:start="69:25" pos:end="69:27"><expr pos:start="69:25" pos:end="69:27"><name pos:start="69:25" pos:end="69:27">ptr</name></expr></argument>,<argument pos:start="69:29" pos:end="69:31"><expr pos:start="69:29" pos:end="69:31"><literal type="char" pos:start="69:29" pos:end="69:31">','</literal></expr></argument>)</argument_list></call><operator pos:start="69:33" pos:end="69:33">)</operator></expr>)</condition> <block pos:start="69:36" pos:end="93:5">{<block_content pos:start="71:9" pos:end="91:9">

        <expr_stmt pos:start="71:9" pos:end="71:14"><expr pos:start="71:9" pos:end="71:13"><name pos:start="71:9" pos:end="71:11">ptr</name><operator pos:start="71:12" pos:end="71:13">++</operator></expr>;</expr_stmt>

        <if_stmt pos:start="73:9" pos:end="91:9"><if pos:start="73:9" pos:end="77:9">if <condition pos:start="73:12" pos:end="73:37">(<expr pos:start="73:13" pos:end="73:36"><operator pos:start="73:13" pos:end="73:13">!</operator><call pos:start="73:14" pos:end="73:36"><name pos:start="73:14" pos:end="73:20">strncmp</name><argument_list pos:start="73:21" pos:end="73:36">(<argument pos:start="73:22" pos:end="73:24"><expr pos:start="73:22" pos:end="73:24"><name pos:start="73:22" pos:end="73:24">ptr</name></expr></argument>,<argument pos:start="73:26" pos:end="73:33"><expr pos:start="73:26" pos:end="73:33"><literal type="string" pos:start="73:26" pos:end="73:33">"server"</literal></expr></argument>,<argument pos:start="73:35" pos:end="73:35"><expr pos:start="73:35" pos:end="73:35"><literal type="number" pos:start="73:35" pos:end="73:35">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="73:39" pos:end="77:9">{<block_content pos:start="75:13" pos:end="75:26">

            <expr_stmt pos:start="75:13" pos:end="75:26"><expr pos:start="75:13" pos:end="75:25"><name pos:start="75:13" pos:end="75:21">is_listen</name> <operator pos:start="75:23" pos:end="75:23">=</operator> <literal type="number" pos:start="75:25" pos:end="75:25">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="77:11" pos:end="81:9">else if <condition pos:start="77:19" pos:end="77:44">(<expr pos:start="77:20" pos:end="77:43"><operator pos:start="77:20" pos:end="77:20">!</operator><call pos:start="77:21" pos:end="77:43"><name pos:start="77:21" pos:end="77:27">strncmp</name><argument_list pos:start="77:28" pos:end="77:43">(<argument pos:start="77:29" pos:end="77:31"><expr pos:start="77:29" pos:end="77:31"><name pos:start="77:29" pos:end="77:31">ptr</name></expr></argument>,<argument pos:start="77:33" pos:end="77:40"><expr pos:start="77:33" pos:end="77:40"><literal type="string" pos:start="77:33" pos:end="77:40">"nowait"</literal></expr></argument>,<argument pos:start="77:42" pos:end="77:42"><expr pos:start="77:42" pos:end="77:42"><literal type="number" pos:start="77:42" pos:end="77:42">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="77:46" pos:end="81:9">{<block_content pos:start="79:13" pos:end="79:31">

            <expr_stmt pos:start="79:13" pos:end="79:31"><expr pos:start="79:13" pos:end="79:30"><name pos:start="79:13" pos:end="79:26">is_waitconnect</name> <operator pos:start="79:28" pos:end="79:28">=</operator> <literal type="number" pos:start="79:30" pos:end="79:30">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="81:11" pos:end="85:9">else if <condition pos:start="81:19" pos:end="81:45">(<expr pos:start="81:20" pos:end="81:44"><operator pos:start="81:20" pos:end="81:20">!</operator><call pos:start="81:21" pos:end="81:44"><name pos:start="81:21" pos:end="81:27">strncmp</name><argument_list pos:start="81:28" pos:end="81:44">(<argument pos:start="81:29" pos:end="81:31"><expr pos:start="81:29" pos:end="81:31"><name pos:start="81:29" pos:end="81:31">ptr</name></expr></argument>,<argument pos:start="81:33" pos:end="81:41"><expr pos:start="81:33" pos:end="81:41"><literal type="string" pos:start="81:33" pos:end="81:41">"nodelay"</literal></expr></argument>,<argument pos:start="81:43" pos:end="81:43"><expr pos:start="81:43" pos:end="81:43"><literal type="number" pos:start="81:43" pos:end="81:43">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="81:47" pos:end="85:9">{<block_content pos:start="83:13" pos:end="83:27">

            <expr_stmt pos:start="83:13" pos:end="83:27"><expr pos:start="83:13" pos:end="83:26"><name pos:start="83:13" pos:end="83:22">do_nodelay</name> <operator pos:start="83:24" pos:end="83:24">=</operator> <literal type="number" pos:start="83:26" pos:end="83:26">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="85:11" pos:end="91:9">else <block pos:start="85:16" pos:end="91:9">{<block_content pos:start="87:13" pos:end="89:22">

            <expr_stmt pos:start="87:13" pos:end="87:48"><expr pos:start="87:13" pos:end="87:47"><call pos:start="87:13" pos:end="87:47"><name pos:start="87:13" pos:end="87:18">printf</name><argument_list pos:start="87:19" pos:end="87:47">(<argument pos:start="87:20" pos:end="87:41"><expr pos:start="87:20" pos:end="87:41"><literal type="string" pos:start="87:20" pos:end="87:41">"Unknown option: %s\n"</literal></expr></argument>, <argument pos:start="87:44" pos:end="87:46"><expr pos:start="87:44" pos:end="87:46"><name pos:start="87:44" pos:end="87:46">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="89:13" pos:end="89:22">goto <name pos:start="89:18" pos:end="89:21">fail</name>;</goto>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="95:5" pos:end="97:27"><if pos:start="95:5" pos:end="97:27">if <condition pos:start="95:8" pos:end="95:19">(<expr pos:start="95:9" pos:end="95:18"><operator pos:start="95:9" pos:end="95:9">!</operator><name pos:start="95:10" pos:end="95:18">is_listen</name></expr>)</condition><block type="pseudo" pos:start="97:9" pos:end="97:27"><block_content pos:start="97:9" pos:end="97:27">

        <expr_stmt pos:start="97:9" pos:end="97:27"><expr pos:start="97:9" pos:end="97:26"><name pos:start="97:9" pos:end="97:22">is_waitconnect</name> <operator pos:start="97:24" pos:end="97:24">=</operator> <literal type="number" pos:start="97:26" pos:end="97:26">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="101:5" pos:end="101:48"><expr pos:start="101:5" pos:end="101:47"><name pos:start="101:5" pos:end="101:7">chr</name> <operator pos:start="101:9" pos:end="101:9">=</operator> <call pos:start="101:11" pos:end="101:47"><name pos:start="101:11" pos:end="101:22">qemu_mallocz</name><argument_list pos:start="101:23" pos:end="101:47">(<argument pos:start="101:24" pos:end="101:46"><expr pos:start="101:24" pos:end="101:46"><sizeof pos:start="101:24" pos:end="101:46">sizeof<argument_list pos:start="101:30" pos:end="101:46">(<argument pos:start="101:31" pos:end="101:45"><expr pos:start="101:31" pos:end="101:45"><name pos:start="101:31" pos:end="101:45">CharDriverState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="103:5" pos:end="105:18"><if pos:start="103:5" pos:end="105:18">if <condition pos:start="103:8" pos:end="103:13">(<expr pos:start="103:9" pos:end="103:12"><operator pos:start="103:9" pos:end="103:9">!</operator><name pos:start="103:10" pos:end="103:12">chr</name></expr>)</condition><block type="pseudo" pos:start="105:9" pos:end="105:18"><block_content pos:start="105:9" pos:end="105:18">

        <goto pos:start="105:9" pos:end="105:18">goto <name pos:start="105:14" pos:end="105:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:44"><expr pos:start="107:5" pos:end="107:43"><name pos:start="107:5" pos:end="107:5">s</name> <operator pos:start="107:7" pos:end="107:7">=</operator> <call pos:start="107:9" pos:end="107:43"><name pos:start="107:9" pos:end="107:20">qemu_mallocz</name><argument_list pos:start="107:21" pos:end="107:43">(<argument pos:start="107:22" pos:end="107:42"><expr pos:start="107:22" pos:end="107:42"><sizeof pos:start="107:22" pos:end="107:42">sizeof<argument_list pos:start="107:28" pos:end="107:42">(<argument pos:start="107:29" pos:end="107:41"><expr pos:start="107:29" pos:end="107:41"><name pos:start="107:29" pos:end="107:41">TCPCharDriver</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="109:5" pos:end="116:0"><if pos:start="109:5" pos:end="116:0">if <condition pos:start="109:8" pos:end="109:11">(<expr pos:start="109:9" pos:end="109:10"><operator pos:start="109:9" pos:end="109:9">!</operator><name pos:start="109:10" pos:end="109:10">s</name></expr>)</condition><block type="pseudo" pos:start="111:9" pos:end="116:0"><block_content pos:start="111:9" pos:end="116:0">

        <goto pos:start="111:9" pos:end="116:0">goto <name pos:start="111:14" pos:end="111:17">fail</name>;</goto></block_content></block></if></if_stmt>



<cpp:ifndef pos:start="115:1" pos:end="115:14">#<cpp:directive pos:start="115:2" pos:end="115:7">ifndef</cpp:directive> <name pos:start="115:9" pos:end="115:14">_WIN32</name></cpp:ifndef>

    <if_stmt pos:start="117:5" pos:end="125:45"><if pos:start="117:5" pos:end="119:45">if <condition pos:start="117:8" pos:end="117:16">(<expr pos:start="117:9" pos:end="117:15"><name pos:start="117:9" pos:end="117:15">is_unix</name></expr>)</condition><block type="pseudo" pos:start="119:9" pos:end="119:45"><block_content pos:start="119:9" pos:end="119:45">

	<expr_stmt pos:start="119:9" pos:end="119:45"><expr pos:start="119:9" pos:end="119:44"><name pos:start="119:9" pos:end="119:10">fd</name> <operator pos:start="119:12" pos:end="119:12">=</operator> <call pos:start="119:14" pos:end="119:44"><name pos:start="119:14" pos:end="119:19">socket</name><argument_list pos:start="119:20" pos:end="119:44">(<argument pos:start="119:21" pos:end="119:27"><expr pos:start="119:21" pos:end="119:27"><name pos:start="119:21" pos:end="119:27">PF_UNIX</name></expr></argument>, <argument pos:start="119:30" pos:end="119:40"><expr pos:start="119:30" pos:end="119:40"><name pos:start="119:30" pos:end="119:40">SOCK_STREAM</name></expr></argument>, <argument pos:start="119:43" pos:end="119:43"><expr pos:start="119:43" pos:end="119:43"><literal type="number" pos:start="119:43" pos:end="119:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="121:5" pos:end="125:45">else<block type="pseudo" pos:start="125:9" pos:end="125:45"><block_content pos:start="125:9" pos:end="125:45">

<cpp:endif pos:start="123:1" pos:end="123:6">#<cpp:directive pos:start="123:2" pos:end="123:6">endif</cpp:directive></cpp:endif>

	<expr_stmt pos:start="125:9" pos:end="125:45"><expr pos:start="125:9" pos:end="125:44"><name pos:start="125:9" pos:end="125:10">fd</name> <operator pos:start="125:12" pos:end="125:12">=</operator> <call pos:start="125:14" pos:end="125:44"><name pos:start="125:14" pos:end="125:19">socket</name><argument_list pos:start="125:20" pos:end="125:44">(<argument pos:start="125:21" pos:end="125:27"><expr pos:start="125:21" pos:end="125:27"><name pos:start="125:21" pos:end="125:27">PF_INET</name></expr></argument>, <argument pos:start="125:30" pos:end="125:40"><expr pos:start="125:30" pos:end="125:40"><name pos:start="125:30" pos:end="125:40">SOCK_STREAM</name></expr></argument>, <argument pos:start="125:43" pos:end="125:43"><expr pos:start="125:43" pos:end="125:43"><literal type="number" pos:start="125:43" pos:end="125:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <if_stmt pos:start="129:5" pos:end="131:18"><if pos:start="129:5" pos:end="131:18">if <condition pos:start="129:8" pos:end="129:15">(<expr pos:start="129:9" pos:end="129:14"><name pos:start="129:9" pos:end="129:10">fd</name> <operator pos:start="129:12" pos:end="129:12">&lt;</operator> <literal type="number" pos:start="129:14" pos:end="129:14">0</literal></expr>)</condition><block type="pseudo" pos:start="131:9" pos:end="131:18"><block_content pos:start="131:9" pos:end="131:18">

        <goto pos:start="131:9" pos:end="131:18">goto <name pos:start="131:14" pos:end="131:17">fail</name>;</goto></block_content></block></if></if_stmt>



    <if_stmt pos:start="135:5" pos:end="137:32"><if pos:start="135:5" pos:end="137:32">if <condition pos:start="135:8" pos:end="135:24">(<expr pos:start="135:9" pos:end="135:23"><operator pos:start="135:9" pos:end="135:9">!</operator><name pos:start="135:10" pos:end="135:23">is_waitconnect</name></expr>)</condition><block type="pseudo" pos:start="137:9" pos:end="137:32"><block_content pos:start="137:9" pos:end="137:32">

        <expr_stmt pos:start="137:9" pos:end="137:32"><expr pos:start="137:9" pos:end="137:31"><call pos:start="137:9" pos:end="137:31"><name pos:start="137:9" pos:end="137:27">socket_set_nonblock</name><argument_list pos:start="137:28" pos:end="137:31">(<argument pos:start="137:29" pos:end="137:30"><expr pos:start="137:29" pos:end="137:30"><name pos:start="137:29" pos:end="137:30">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="141:5" pos:end="141:21"><expr pos:start="141:5" pos:end="141:20"><name pos:start="141:5" pos:end="141:16"><name pos:start="141:5" pos:end="141:5">s</name><operator pos:start="141:6" pos:end="141:7">-&gt;</operator><name pos:start="141:8" pos:end="141:16">connected</name></name> <operator pos:start="141:18" pos:end="141:18">=</operator> <literal type="number" pos:start="141:20" pos:end="141:20">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:15"><expr pos:start="143:5" pos:end="143:14"><name pos:start="143:5" pos:end="143:9"><name pos:start="143:5" pos:end="143:5">s</name><operator pos:start="143:6" pos:end="143:7">-&gt;</operator><name pos:start="143:8" pos:end="143:9">fd</name></name> <operator pos:start="143:11" pos:end="143:11">=</operator> <operator pos:start="143:13" pos:end="143:13">-</operator><literal type="number" pos:start="143:14" pos:end="143:14">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:22"><expr pos:start="145:5" pos:end="145:21"><name pos:start="145:5" pos:end="145:16"><name pos:start="145:5" pos:end="145:5">s</name><operator pos:start="145:6" pos:end="145:7">-&gt;</operator><name pos:start="145:8" pos:end="145:16">listen_fd</name></name> <operator pos:start="145:18" pos:end="145:18">=</operator> <operator pos:start="145:20" pos:end="145:20">-</operator><literal type="number" pos:start="145:21" pos:end="145:21">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:25"><expr pos:start="147:5" pos:end="147:24"><name pos:start="147:5" pos:end="147:14"><name pos:start="147:5" pos:end="147:5">s</name><operator pos:start="147:6" pos:end="147:7">-&gt;</operator><name pos:start="147:8" pos:end="147:14">is_unix</name></name> <operator pos:start="147:16" pos:end="147:16">=</operator> <name pos:start="147:18" pos:end="147:24">is_unix</name></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:43"><expr pos:start="149:5" pos:end="149:42"><name pos:start="149:5" pos:end="149:17"><name pos:start="149:5" pos:end="149:5">s</name><operator pos:start="149:6" pos:end="149:7">-&gt;</operator><name pos:start="149:8" pos:end="149:17">do_nodelay</name></name> <operator pos:start="149:19" pos:end="149:19">=</operator> <name pos:start="149:21" pos:end="149:30">do_nodelay</name> <operator pos:start="149:32" pos:end="149:33">&amp;&amp;</operator> <operator pos:start="149:35" pos:end="149:35">!</operator><name pos:start="149:36" pos:end="149:42">is_unix</name></expr>;</expr_stmt>



    <expr_stmt pos:start="153:5" pos:end="153:20"><expr pos:start="153:5" pos:end="153:19"><name pos:start="153:5" pos:end="153:15"><name pos:start="153:5" pos:end="153:7">chr</name><operator pos:start="153:8" pos:end="153:9">-&gt;</operator><name pos:start="153:10" pos:end="153:15">opaque</name></name> <operator pos:start="153:17" pos:end="153:17">=</operator> <name pos:start="153:19" pos:end="153:19">s</name></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:35"><expr pos:start="155:5" pos:end="155:34"><name pos:start="155:5" pos:end="155:18"><name pos:start="155:5" pos:end="155:7">chr</name><operator pos:start="155:8" pos:end="155:9">-&gt;</operator><name pos:start="155:10" pos:end="155:18">chr_write</name></name> <operator pos:start="155:20" pos:end="155:20">=</operator> <name pos:start="155:22" pos:end="155:34">tcp_chr_write</name></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:35"><expr pos:start="157:5" pos:end="157:34"><name pos:start="157:5" pos:end="157:18"><name pos:start="157:5" pos:end="157:7">chr</name><operator pos:start="157:8" pos:end="157:9">-&gt;</operator><name pos:start="157:10" pos:end="157:18">chr_close</name></name> <operator pos:start="157:20" pos:end="157:20">=</operator> <name pos:start="157:22" pos:end="157:34">tcp_chr_close</name></expr>;</expr_stmt>



    <if_stmt pos:start="161:5" pos:end="265:5"><if pos:start="161:5" pos:end="213:5">if <condition pos:start="161:8" pos:end="161:18">(<expr pos:start="161:9" pos:end="161:17"><name pos:start="161:9" pos:end="161:17">is_listen</name></expr>)</condition> <block pos:start="161:20" pos:end="213:5">{<block_content pos:start="167:9" pos:end="211:32">

        <comment type="block" pos:start="163:9" pos:end="163:30">/* allow fast reuse */</comment>

<cpp:ifndef pos:start="165:1" pos:end="165:14">#<cpp:directive pos:start="165:2" pos:end="165:7">ifndef</cpp:directive> <name pos:start="165:9" pos:end="165:14">_WIN32</name></cpp:ifndef>

	<if_stmt pos:start="167:9" pos:end="185:9"><if pos:start="167:9" pos:end="175:9">if <condition pos:start="167:12" pos:end="167:20">(<expr pos:start="167:13" pos:end="167:19"><name pos:start="167:13" pos:end="167:19">is_unix</name></expr>)</condition> <block pos:start="167:22" pos:end="175:9">{<block_content pos:start="169:13" pos:end="173:25">

	    <decl_stmt pos:start="169:13" pos:end="169:27"><decl pos:start="169:13" pos:end="169:26"><type pos:start="169:13" pos:end="169:16"><name pos:start="169:13" pos:end="169:16">char</name></type> <name pos:start="169:18" pos:end="169:26"><name pos:start="169:18" pos:end="169:21">path</name><index pos:start="169:22" pos:end="169:26">[<expr pos:start="169:23" pos:end="169:25"><literal type="number" pos:start="169:23" pos:end="169:25">109</literal></expr>]</index></name></decl>;</decl_stmt>

	    <expr_stmt pos:start="171:13" pos:end="171:56"><expr pos:start="171:13" pos:end="171:55"><call pos:start="171:13" pos:end="171:55"><name pos:start="171:13" pos:end="171:19">pstrcpy</name><argument_list pos:start="171:20" pos:end="171:55">(<argument pos:start="171:21" pos:end="171:24"><expr pos:start="171:21" pos:end="171:24"><name pos:start="171:21" pos:end="171:24">path</name></expr></argument>, <argument pos:start="171:27" pos:end="171:38"><expr pos:start="171:27" pos:end="171:38"><sizeof pos:start="171:27" pos:end="171:38">sizeof<argument_list pos:start="171:33" pos:end="171:38">(<argument pos:start="171:34" pos:end="171:37"><expr pos:start="171:34" pos:end="171:37"><name pos:start="171:34" pos:end="171:37">path</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="171:41" pos:end="171:54"><expr pos:start="171:41" pos:end="171:54"><name pos:start="171:41" pos:end="171:54"><name pos:start="171:41" pos:end="171:45">uaddr</name><operator pos:start="171:46" pos:end="171:46">.</operator><name pos:start="171:47" pos:end="171:54">sun_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="173:13" pos:end="173:25"><expr pos:start="173:13" pos:end="173:24"><call pos:start="173:13" pos:end="173:24"><name pos:start="173:13" pos:end="173:18">unlink</name><argument_list pos:start="173:19" pos:end="173:24">(<argument pos:start="173:20" pos:end="173:23"><expr pos:start="173:20" pos:end="173:23"><name pos:start="173:20" pos:end="173:23">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if> <else pos:start="175:11" pos:end="185:9">else

<cpp:endif pos:start="177:1" pos:end="177:6">#<cpp:directive pos:start="177:2" pos:end="177:6">endif</cpp:directive></cpp:endif>

	<block pos:start="179:9" pos:end="185:9">{<block_content pos:start="181:13" pos:end="183:86">

	    <expr_stmt pos:start="181:13" pos:end="181:20"><expr pos:start="181:13" pos:end="181:19"><name pos:start="181:13" pos:end="181:15">val</name> <operator pos:start="181:17" pos:end="181:17">=</operator> <literal type="number" pos:start="181:19" pos:end="181:19">1</literal></expr>;</expr_stmt>

	    <expr_stmt pos:start="183:13" pos:end="183:86"><expr pos:start="183:13" pos:end="183:85"><call pos:start="183:13" pos:end="183:85"><name pos:start="183:13" pos:end="183:22">setsockopt</name><argument_list pos:start="183:23" pos:end="183:85">(<argument pos:start="183:24" pos:end="183:25"><expr pos:start="183:24" pos:end="183:25"><name pos:start="183:24" pos:end="183:25">fd</name></expr></argument>, <argument pos:start="183:28" pos:end="183:37"><expr pos:start="183:28" pos:end="183:37"><name pos:start="183:28" pos:end="183:37">SOL_SOCKET</name></expr></argument>, <argument pos:start="183:40" pos:end="183:51"><expr pos:start="183:40" pos:end="183:51"><name pos:start="183:40" pos:end="183:51">SO_REUSEADDR</name></expr></argument>, <argument pos:start="183:54" pos:end="183:71"><expr pos:start="183:54" pos:end="183:71"><operator pos:start="183:54" pos:end="183:54">(</operator><specifier pos:start="183:55" pos:end="183:59">const</specifier> <name pos:start="183:61" pos:end="183:64">char</name> <operator pos:start="183:66" pos:end="183:66">*</operator><operator pos:start="183:67" pos:end="183:67">)</operator><operator pos:start="183:68" pos:end="183:68">&amp;</operator><name pos:start="183:69" pos:end="183:71">val</name></expr></argument>, <argument pos:start="183:74" pos:end="183:84"><expr pos:start="183:74" pos:end="183:84"><sizeof pos:start="183:74" pos:end="183:84">sizeof<argument_list pos:start="183:80" pos:end="183:84">(<argument pos:start="183:81" pos:end="183:83"><expr pos:start="183:81" pos:end="183:83"><name pos:start="183:81" pos:end="183:83">val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="189:9" pos:end="189:38"><expr pos:start="189:9" pos:end="189:37"><name pos:start="189:9" pos:end="189:11">ret</name> <operator pos:start="189:13" pos:end="189:13">=</operator> <call pos:start="189:15" pos:end="189:37"><name pos:start="189:15" pos:end="189:18">bind</name><argument_list pos:start="189:19" pos:end="189:37">(<argument pos:start="189:20" pos:end="189:21"><expr pos:start="189:20" pos:end="189:21"><name pos:start="189:20" pos:end="189:21">fd</name></expr></argument>, <argument pos:start="189:24" pos:end="189:27"><expr pos:start="189:24" pos:end="189:27"><name pos:start="189:24" pos:end="189:27">addr</name></expr></argument>, <argument pos:start="189:30" pos:end="189:36"><expr pos:start="189:30" pos:end="189:36"><name pos:start="189:30" pos:end="189:36">addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="191:9" pos:end="193:22"><if pos:start="191:9" pos:end="193:22">if <condition pos:start="191:12" pos:end="191:20">(<expr pos:start="191:13" pos:end="191:19"><name pos:start="191:13" pos:end="191:15">ret</name> <operator pos:start="191:17" pos:end="191:17">&lt;</operator> <literal type="number" pos:start="191:19" pos:end="191:19">0</literal></expr>)</condition><block type="pseudo" pos:start="193:13" pos:end="193:22"><block_content pos:start="193:13" pos:end="193:22">

            <goto pos:start="193:13" pos:end="193:22">goto <name pos:start="193:18" pos:end="193:21">fail</name>;</goto></block_content></block></if></if_stmt>



        <expr_stmt pos:start="197:9" pos:end="197:28"><expr pos:start="197:9" pos:end="197:27"><name pos:start="197:9" pos:end="197:11">ret</name> <operator pos:start="197:13" pos:end="197:13">=</operator> <call pos:start="197:15" pos:end="197:27"><name pos:start="197:15" pos:end="197:20">listen</name><argument_list pos:start="197:21" pos:end="197:27">(<argument pos:start="197:22" pos:end="197:23"><expr pos:start="197:22" pos:end="197:23"><name pos:start="197:22" pos:end="197:23">fd</name></expr></argument>, <argument pos:start="197:26" pos:end="197:26"><expr pos:start="197:26" pos:end="197:26"><literal type="number" pos:start="197:26" pos:end="197:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="199:9" pos:end="201:22"><if pos:start="199:9" pos:end="201:22">if <condition pos:start="199:12" pos:end="199:20">(<expr pos:start="199:13" pos:end="199:19"><name pos:start="199:13" pos:end="199:15">ret</name> <operator pos:start="199:17" pos:end="199:17">&lt;</operator> <literal type="number" pos:start="199:19" pos:end="199:19">0</literal></expr>)</condition><block type="pseudo" pos:start="201:13" pos:end="201:22"><block_content pos:start="201:13" pos:end="201:22">

            <goto pos:start="201:13" pos:end="201:22">goto <name pos:start="201:18" pos:end="201:21">fail</name>;</goto></block_content></block></if></if_stmt>



        <expr_stmt pos:start="205:9" pos:end="205:26"><expr pos:start="205:9" pos:end="205:25"><name pos:start="205:9" pos:end="205:20"><name pos:start="205:9" pos:end="205:9">s</name><operator pos:start="205:10" pos:end="205:11">-&gt;</operator><name pos:start="205:12" pos:end="205:20">listen_fd</name></name> <operator pos:start="205:22" pos:end="205:22">=</operator> <name pos:start="205:24" pos:end="205:25">fd</name></expr>;</expr_stmt>

        <expr_stmt pos:start="207:9" pos:end="207:69"><expr pos:start="207:9" pos:end="207:68"><call pos:start="207:9" pos:end="207:68"><name pos:start="207:9" pos:end="207:27">qemu_set_fd_handler</name><argument_list pos:start="207:28" pos:end="207:68">(<argument pos:start="207:29" pos:end="207:40"><expr pos:start="207:29" pos:end="207:40"><name pos:start="207:29" pos:end="207:40"><name pos:start="207:29" pos:end="207:29">s</name><operator pos:start="207:30" pos:end="207:31">-&gt;</operator><name pos:start="207:32" pos:end="207:40">listen_fd</name></name></expr></argument>, <argument pos:start="207:43" pos:end="207:56"><expr pos:start="207:43" pos:end="207:56"><name pos:start="207:43" pos:end="207:56">tcp_chr_accept</name></expr></argument>, <argument pos:start="207:59" pos:end="207:62"><expr pos:start="207:59" pos:end="207:62"><name pos:start="207:59" pos:end="207:62">NULL</name></expr></argument>, <argument pos:start="207:65" pos:end="207:67"><expr pos:start="207:65" pos:end="207:67"><name pos:start="207:65" pos:end="207:67">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="209:9" pos:end="211:32"><if pos:start="209:9" pos:end="211:32">if <condition pos:start="209:12" pos:end="209:22">(<expr pos:start="209:13" pos:end="209:21"><name pos:start="209:13" pos:end="209:21">is_telnet</name></expr>)</condition><block type="pseudo" pos:start="211:13" pos:end="211:32"><block_content pos:start="211:13" pos:end="211:32">

            <expr_stmt pos:start="211:13" pos:end="211:32"><expr pos:start="211:13" pos:end="211:31"><name pos:start="211:13" pos:end="211:27"><name pos:start="211:13" pos:end="211:13">s</name><operator pos:start="211:14" pos:end="211:15">-&gt;</operator><name pos:start="211:16" pos:end="211:27">do_telnetopt</name></name> <operator pos:start="211:29" pos:end="211:29">=</operator> <literal type="number" pos:start="211:31" pos:end="211:31">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="213:7" pos:end="265:5">else <block pos:start="213:12" pos:end="265:5">{<block_content pos:start="215:9" pos:end="263:67">

        <for pos:start="215:9" pos:end="251:9">for<control pos:start="215:12" pos:end="215:15">(<init pos:start="215:13" pos:end="215:13">;</init><condition pos:start="215:14" pos:end="215:14">;</condition><incr/>)</control> <block pos:start="215:17" pos:end="251:9">{<block_content pos:start="217:13" pos:end="249:13">

            <expr_stmt pos:start="217:13" pos:end="217:45"><expr pos:start="217:13" pos:end="217:44"><name pos:start="217:13" pos:end="217:15">ret</name> <operator pos:start="217:17" pos:end="217:17">=</operator> <call pos:start="217:19" pos:end="217:44"><name pos:start="217:19" pos:end="217:25">connect</name><argument_list pos:start="217:26" pos:end="217:44">(<argument pos:start="217:27" pos:end="217:28"><expr pos:start="217:27" pos:end="217:28"><name pos:start="217:27" pos:end="217:28">fd</name></expr></argument>, <argument pos:start="217:31" pos:end="217:34"><expr pos:start="217:31" pos:end="217:34"><name pos:start="217:31" pos:end="217:34">addr</name></expr></argument>, <argument pos:start="217:37" pos:end="217:43"><expr pos:start="217:37" pos:end="217:43"><name pos:start="217:37" pos:end="217:43">addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="219:13" pos:end="249:13"><if pos:start="219:13" pos:end="243:13">if <condition pos:start="219:16" pos:end="219:24">(<expr pos:start="219:17" pos:end="219:23"><name pos:start="219:17" pos:end="219:19">ret</name> <operator pos:start="219:21" pos:end="219:21">&lt;</operator> <literal type="number" pos:start="219:23" pos:end="219:23">0</literal></expr>)</condition> <block pos:start="219:26" pos:end="243:13">{<block_content pos:start="221:17" pos:end="241:17">

                <expr_stmt pos:start="221:17" pos:end="221:37"><expr pos:start="221:17" pos:end="221:36"><name pos:start="221:17" pos:end="221:19">err</name> <operator pos:start="221:21" pos:end="221:21">=</operator> <call pos:start="221:23" pos:end="221:36"><name pos:start="221:23" pos:end="221:34">socket_error</name><argument_list pos:start="221:35" pos:end="221:36">()</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="223:17" pos:end="241:17"><if pos:start="223:17" pos:end="225:17">if <condition pos:start="223:20" pos:end="223:55">(<expr pos:start="223:21" pos:end="223:54"><name pos:start="223:21" pos:end="223:23">err</name> <operator pos:start="223:25" pos:end="223:26">==</operator> <name pos:start="223:28" pos:end="223:32">EINTR</name> <operator pos:start="223:34" pos:end="223:35">||</operator> <name pos:start="223:37" pos:end="223:39">err</name> <operator pos:start="223:41" pos:end="223:42">==</operator> <name pos:start="223:44" pos:end="223:54">EWOULDBLOCK</name></expr>)</condition> <block pos:start="223:57" pos:end="225:17">{<block_content>

                </block_content>}</block></if> <if type="elseif" pos:start="225:19" pos:end="231:17">else if <condition pos:start="225:27" pos:end="225:46">(<expr pos:start="225:28" pos:end="225:45"><name pos:start="225:28" pos:end="225:30">err</name> <operator pos:start="225:32" pos:end="225:33">==</operator> <name pos:start="225:35" pos:end="225:45">EINPROGRESS</name></expr>)</condition> <block pos:start="225:48" pos:end="231:17">{<block_content pos:start="227:21" pos:end="230:0">

                    <break pos:start="227:21" pos:end="230:0">break;</break>

<cpp:ifdef pos:start="229:1" pos:end="229:13">#<cpp:directive pos:start="229:2" pos:end="229:6">ifdef</cpp:directive> <name pos:start="229:8" pos:end="229:13">_WIN32</name></cpp:ifdef>

                </block_content>}</block></if> <if type="elseif" pos:start="231:19" pos:end="237:17">else if <condition pos:start="231:27" pos:end="231:46">(<expr pos:start="231:28" pos:end="231:45"><name pos:start="231:28" pos:end="231:30">err</name> <operator pos:start="231:32" pos:end="231:33">==</operator> <name pos:start="231:35" pos:end="231:45">WSAEALREADY</name></expr>)</condition> <block pos:start="231:48" pos:end="237:17">{<block_content pos:start="233:21" pos:end="236:0">

                    <break pos:start="233:21" pos:end="236:0">break;</break>

<cpp:endif pos:start="235:1" pos:end="235:6">#<cpp:directive pos:start="235:2" pos:end="235:6">endif</cpp:directive></cpp:endif>

                </block_content>}</block></if> <else pos:start="237:19" pos:end="241:17">else <block pos:start="237:24" pos:end="241:17">{<block_content pos:start="239:21" pos:end="239:30">

                    <goto pos:start="239:21" pos:end="239:30">goto <name pos:start="239:26" pos:end="239:29">fail</name>;</goto>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="243:15" pos:end="249:13">else <block pos:start="243:20" pos:end="249:13">{<block_content pos:start="245:17" pos:end="247:22">

                <expr_stmt pos:start="245:17" pos:end="245:33"><expr pos:start="245:17" pos:end="245:32"><name pos:start="245:17" pos:end="245:28"><name pos:start="245:17" pos:end="245:17">s</name><operator pos:start="245:18" pos:end="245:19">-&gt;</operator><name pos:start="245:20" pos:end="245:28">connected</name></name> <operator pos:start="245:30" pos:end="245:30">=</operator> <literal type="number" pos:start="245:32" pos:end="245:32">1</literal></expr>;</expr_stmt>

                <break pos:start="247:17" pos:end="247:22">break;</break>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="253:9" pos:end="253:19"><expr pos:start="253:9" pos:end="253:18"><name pos:start="253:9" pos:end="253:13"><name pos:start="253:9" pos:end="253:9">s</name><operator pos:start="253:10" pos:end="253:11">-&gt;</operator><name pos:start="253:12" pos:end="253:13">fd</name></name> <operator pos:start="253:15" pos:end="253:15">=</operator> <name pos:start="253:17" pos:end="253:18">fd</name></expr>;</expr_stmt>

        <expr_stmt pos:start="255:9" pos:end="255:31"><expr pos:start="255:9" pos:end="255:30"><call pos:start="255:9" pos:end="255:30"><name pos:start="255:9" pos:end="255:26">socket_set_nodelay</name><argument_list pos:start="255:27" pos:end="255:30">(<argument pos:start="255:28" pos:end="255:29"><expr pos:start="255:28" pos:end="255:29"><name pos:start="255:28" pos:end="255:29">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="257:9" pos:end="263:67"><if pos:start="257:9" pos:end="259:33">if <condition pos:start="257:12" pos:end="257:25">(<expr pos:start="257:13" pos:end="257:24"><name pos:start="257:13" pos:end="257:24"><name pos:start="257:13" pos:end="257:13">s</name><operator pos:start="257:14" pos:end="257:15">-&gt;</operator><name pos:start="257:16" pos:end="257:24">connected</name></name></expr>)</condition><block type="pseudo" pos:start="259:13" pos:end="259:33"><block_content pos:start="259:13" pos:end="259:33">

            <expr_stmt pos:start="259:13" pos:end="259:33"><expr pos:start="259:13" pos:end="259:32"><call pos:start="259:13" pos:end="259:32"><name pos:start="259:13" pos:end="259:27">tcp_chr_connect</name><argument_list pos:start="259:28" pos:end="259:32">(<argument pos:start="259:29" pos:end="259:31"><expr pos:start="259:29" pos:end="259:31"><name pos:start="259:29" pos:end="259:31">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="261:9" pos:end="263:67">else<block type="pseudo" pos:start="263:13" pos:end="263:67"><block_content pos:start="263:13" pos:end="263:67">

            <expr_stmt pos:start="263:13" pos:end="263:67"><expr pos:start="263:13" pos:end="263:66"><call pos:start="263:13" pos:end="263:66"><name pos:start="263:13" pos:end="263:31">qemu_set_fd_handler</name><argument_list pos:start="263:32" pos:end="263:66">(<argument pos:start="263:33" pos:end="263:37"><expr pos:start="263:33" pos:end="263:37"><name pos:start="263:33" pos:end="263:37"><name pos:start="263:33" pos:end="263:33">s</name><operator pos:start="263:34" pos:end="263:35">-&gt;</operator><name pos:start="263:36" pos:end="263:37">fd</name></name></expr></argument>, <argument pos:start="263:40" pos:end="263:43"><expr pos:start="263:40" pos:end="263:43"><name pos:start="263:40" pos:end="263:43">NULL</name></expr></argument>, <argument pos:start="263:46" pos:end="263:60"><expr pos:start="263:46" pos:end="263:60"><name pos:start="263:46" pos:end="263:60">tcp_chr_connect</name></expr></argument>, <argument pos:start="263:63" pos:end="263:65"><expr pos:start="263:63" pos:end="263:65"><name pos:start="263:63" pos:end="263:65">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="269:5" pos:end="277:5"><if pos:start="269:5" pos:end="277:5">if <condition pos:start="269:8" pos:end="269:36">(<expr pos:start="269:9" pos:end="269:35"><name pos:start="269:9" pos:end="269:17">is_listen</name> <operator pos:start="269:19" pos:end="269:20">&amp;&amp;</operator> <name pos:start="269:22" pos:end="269:35">is_waitconnect</name></expr>)</condition> <block pos:start="269:38" pos:end="277:5">{<block_content pos:start="271:9" pos:end="275:42">

        <expr_stmt pos:start="271:9" pos:end="271:65"><expr pos:start="271:9" pos:end="271:64"><call pos:start="271:9" pos:end="271:64"><name pos:start="271:9" pos:end="271:14">printf</name><argument_list pos:start="271:15" pos:end="271:64">(<argument pos:start="271:16" pos:end="271:53"><expr pos:start="271:16" pos:end="271:53"><literal type="string" pos:start="271:16" pos:end="271:53">"QEMU waiting for connection on: %s\n"</literal></expr></argument>, <argument pos:start="271:56" pos:end="271:63"><expr pos:start="271:56" pos:end="271:63"><name pos:start="271:56" pos:end="271:63">host_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="273:9" pos:end="273:28"><expr pos:start="273:9" pos:end="273:27"><call pos:start="273:9" pos:end="273:27"><name pos:start="273:9" pos:end="273:22">tcp_chr_accept</name><argument_list pos:start="273:23" pos:end="273:27">(<argument pos:start="273:24" pos:end="273:26"><expr pos:start="273:24" pos:end="273:26"><name pos:start="273:24" pos:end="273:26">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="275:9" pos:end="275:42"><expr pos:start="275:9" pos:end="275:41"><call pos:start="275:9" pos:end="275:41"><name pos:start="275:9" pos:end="275:27">socket_set_nonblock</name><argument_list pos:start="275:28" pos:end="275:41">(<argument pos:start="275:29" pos:end="275:40"><expr pos:start="275:29" pos:end="275:40"><name pos:start="275:29" pos:end="275:40"><name pos:start="275:29" pos:end="275:29">s</name><operator pos:start="275:30" pos:end="275:31">-&gt;</operator><name pos:start="275:32" pos:end="275:40">listen_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="281:5" pos:end="281:15">return <expr pos:start="281:12" pos:end="281:14"><name pos:start="281:12" pos:end="281:14">chr</name></expr>;</return>

 <label pos:start="283:2" pos:end="283:6"><name pos:start="283:2" pos:end="283:5">fail</name>:</label>

    <if_stmt pos:start="285:5" pos:end="287:24"><if pos:start="285:5" pos:end="287:24">if <condition pos:start="285:8" pos:end="285:16">(<expr pos:start="285:9" pos:end="285:15"><name pos:start="285:9" pos:end="285:10">fd</name> <operator pos:start="285:12" pos:end="285:13">&gt;=</operator> <literal type="number" pos:start="285:15" pos:end="285:15">0</literal></expr>)</condition><block type="pseudo" pos:start="287:9" pos:end="287:24"><block_content pos:start="287:9" pos:end="287:24">

        <expr_stmt pos:start="287:9" pos:end="287:24"><expr pos:start="287:9" pos:end="287:23"><call pos:start="287:9" pos:end="287:23"><name pos:start="287:9" pos:end="287:19">closesocket</name><argument_list pos:start="287:20" pos:end="287:23">(<argument pos:start="287:21" pos:end="287:22"><expr pos:start="287:21" pos:end="287:22"><name pos:start="287:21" pos:end="287:22">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="289:5" pos:end="289:17"><expr pos:start="289:5" pos:end="289:16"><call pos:start="289:5" pos:end="289:16"><name pos:start="289:5" pos:end="289:13">qemu_free</name><argument_list pos:start="289:14" pos:end="289:16">(<argument pos:start="289:15" pos:end="289:15"><expr pos:start="289:15" pos:end="289:15"><name pos:start="289:15" pos:end="289:15">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="291:5" pos:end="291:19"><expr pos:start="291:5" pos:end="291:18"><call pos:start="291:5" pos:end="291:18"><name pos:start="291:5" pos:end="291:13">qemu_free</name><argument_list pos:start="291:14" pos:end="291:18">(<argument pos:start="291:15" pos:end="291:17"><expr pos:start="291:15" pos:end="291:17"><name pos:start="291:15" pos:end="291:17">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="293:5" pos:end="293:16">return <expr pos:start="293:12" pos:end="293:15"><name pos:start="293:12" pos:end="293:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
