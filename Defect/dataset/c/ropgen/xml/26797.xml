<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26797.c" pos:tabs="8"><function pos:start="1:1" pos:end="29:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:40">pc_dimm_check_memdev_is_busy</name><parameter_list pos:start="1:41" pos:end="3:64">(<parameter pos:start="1:42" pos:end="1:58"><decl pos:start="1:42" pos:end="1:58"><type pos:start="1:42" pos:end="1:58"><specifier pos:start="1:42" pos:end="1:46">const</specifier> <name pos:start="1:48" pos:end="1:53">Object</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:58">obj</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:76"><decl pos:start="1:61" pos:end="1:76"><type pos:start="1:61" pos:end="1:76"><specifier pos:start="1:61" pos:end="1:65">const</specifier> <name pos:start="1:67" pos:end="1:70">char</name> <modifier pos:start="1:72" pos:end="1:72">*</modifier></type><name pos:start="1:73" pos:end="1:76">name</name></decl></parameter>,

                                      <parameter pos:start="3:39" pos:end="3:49"><decl pos:start="3:39" pos:end="3:49"><type pos:start="3:39" pos:end="3:49"><name pos:start="3:39" pos:end="3:44">Object</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:49">val</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:63"><decl pos:start="3:52" pos:end="3:63"><type pos:start="3:52" pos:end="3:63"><name pos:start="3:52" pos:end="3:56">Error</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier><modifier pos:start="3:59" pos:end="3:59">*</modifier></type><name pos:start="3:60" pos:end="3:63">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="29:1">{<block_content pos:start="7:5" pos:end="27:37">

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:9">Error</name> <modifier pos:start="7:11" pos:end="7:11">*</modifier></type><name pos:start="7:12" pos:end="7:20">local_err</name> <init pos:start="7:22" pos:end="7:27">= <expr pos:start="7:24" pos:end="7:27"><name pos:start="7:24" pos:end="7:27">NULL</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="23:5"><if pos:start="11:5" pos:end="19:5">if <condition pos:start="11:8" pos:end="11:59">(<expr pos:start="11:9" pos:end="11:58"><call pos:start="11:9" pos:end="11:58"><name pos:start="11:9" pos:end="11:37">host_memory_backend_is_mapped</name><argument_list pos:start="11:38" pos:end="11:58">(<argument pos:start="11:39" pos:end="11:57"><expr pos:start="11:39" pos:end="11:57"><call pos:start="11:39" pos:end="11:57"><name pos:start="11:39" pos:end="11:52">MEMORY_BACKEND</name><argument_list pos:start="11:53" pos:end="11:57">(<argument pos:start="11:54" pos:end="11:56"><expr pos:start="11:54" pos:end="11:56"><name pos:start="11:54" pos:end="11:56">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="11:61" pos:end="19:5">{<block_content pos:start="13:9" pos:end="17:21">

        <decl_stmt pos:start="13:9" pos:end="13:62"><decl pos:start="13:9" pos:end="13:61"><type pos:start="13:9" pos:end="13:14"><name pos:start="13:9" pos:end="13:12">char</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:18">path</name> <init pos:start="13:20" pos:end="13:61">= <expr pos:start="13:22" pos:end="13:61"><call pos:start="13:22" pos:end="13:61"><name pos:start="13:22" pos:end="13:56">object_get_canonical_path_component</name><argument_list pos:start="13:57" pos:end="13:61">(<argument pos:start="13:58" pos:end="13:60"><expr pos:start="13:58" pos:end="13:60"><name pos:start="13:58" pos:end="13:60">val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="15:9" pos:end="15:74"><expr pos:start="15:9" pos:end="15:73"><call pos:start="15:9" pos:end="15:73"><name pos:start="15:9" pos:end="15:18">error_setg</name><argument_list pos:start="15:19" pos:end="15:73">(<argument pos:start="15:20" pos:end="15:29"><expr pos:start="15:20" pos:end="15:29"><operator pos:start="15:20" pos:end="15:20">&amp;</operator><name pos:start="15:21" pos:end="15:29">local_err</name></expr></argument>, <argument pos:start="15:32" pos:end="15:66"><expr pos:start="15:32" pos:end="15:66"><literal type="string" pos:start="15:32" pos:end="15:66">"can't use already busy memdev: %s"</literal></expr></argument>, <argument pos:start="15:69" pos:end="15:72"><expr pos:start="15:69" pos:end="15:72"><name pos:start="15:69" pos:end="15:72">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="17:9" pos:end="17:21"><expr pos:start="17:9" pos:end="17:20"><call pos:start="17:9" pos:end="17:20"><name pos:start="17:9" pos:end="17:14">g_free</name><argument_list pos:start="17:15" pos:end="17:20">(<argument pos:start="17:16" pos:end="17:19"><expr pos:start="17:16" pos:end="17:19"><name pos:start="17:16" pos:end="17:19">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="19:7" pos:end="23:5">else <block pos:start="19:12" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:76">

        <expr_stmt pos:start="21:9" pos:end="21:76"><expr pos:start="21:9" pos:end="21:75"><call pos:start="21:9" pos:end="21:75"><name pos:start="21:9" pos:end="21:47">qdev_prop_allow_set_link_before_realize</name><argument_list pos:start="21:48" pos:end="21:75">(<argument pos:start="21:49" pos:end="21:51"><expr pos:start="21:49" pos:end="21:51"><name pos:start="21:49" pos:end="21:51">obj</name></expr></argument>, <argument pos:start="21:54" pos:end="21:57"><expr pos:start="21:54" pos:end="21:57"><name pos:start="21:54" pos:end="21:57">name</name></expr></argument>, <argument pos:start="21:60" pos:end="21:62"><expr pos:start="21:60" pos:end="21:62"><name pos:start="21:60" pos:end="21:62">val</name></expr></argument>, <argument pos:start="21:65" pos:end="21:74"><expr pos:start="21:65" pos:end="21:74"><operator pos:start="21:65" pos:end="21:65">&amp;</operator><name pos:start="21:66" pos:end="21:74">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:37"><expr pos:start="27:5" pos:end="27:36"><call pos:start="27:5" pos:end="27:36"><name pos:start="27:5" pos:end="27:19">error_propagate</name><argument_list pos:start="27:20" pos:end="27:36">(<argument pos:start="27:21" pos:end="27:24"><expr pos:start="27:21" pos:end="27:24"><name pos:start="27:21" pos:end="27:24">errp</name></expr></argument>, <argument pos:start="27:27" pos:end="27:35"><expr pos:start="27:27" pos:end="27:35"><name pos:start="27:27" pos:end="27:35">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
