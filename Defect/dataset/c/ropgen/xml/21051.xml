<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21051.c" pos:tabs="8"><function pos:start="1:1" pos:end="51:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:18">analyze</name><parameter_list pos:start="1:19" pos:end="1:77">(<parameter pos:start="1:20" pos:end="1:37"><decl pos:start="1:20" pos:end="1:37"><type pos:start="1:20" pos:end="1:37"><specifier pos:start="1:20" pos:end="1:24">const</specifier> <name pos:start="1:26" pos:end="1:32">uint8_t</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:37">buf</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:47"><decl pos:start="1:40" pos:end="1:47"><type pos:start="1:40" pos:end="1:47"><name pos:start="1:40" pos:end="1:42">int</name></type> <name pos:start="1:44" pos:end="1:47">size</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:64"><decl pos:start="1:50" pos:end="1:64"><type pos:start="1:50" pos:end="1:64"><name pos:start="1:50" pos:end="1:52">int</name></type> <name pos:start="1:54" pos:end="1:64">packet_size</name></decl></parameter>, <parameter pos:start="1:67" pos:end="1:76"><decl pos:start="1:67" pos:end="1:76"><type pos:start="1:67" pos:end="1:76"><name pos:start="1:67" pos:end="1:69">int</name> <modifier pos:start="1:71" pos:end="1:71">*</modifier></type><name pos:start="1:72" pos:end="1:76">index</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="51:1">{<block_content pos:start="5:5" pos:end="49:22">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:32"><name pos:start="5:9" pos:end="5:12">stat</name><index pos:start="5:13" pos:end="5:32">[<expr pos:start="5:14" pos:end="5:31"><name pos:start="5:14" pos:end="5:31">TS_MAX_PACKET_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:14"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">x</name> <init pos:start="9:11" pos:end="9:13">= <expr pos:start="9:13" pos:end="9:13"><literal type="number" pos:start="9:13" pos:end="9:13">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:18">best_score</name> <init pos:start="11:20" pos:end="11:22">= <expr pos:start="11:22" pos:end="11:22"><literal type="number" pos:start="11:22" pos:end="11:22">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:47"><expr pos:start="15:5" pos:end="15:46"><call pos:start="15:5" pos:end="15:46"><name pos:start="15:5" pos:end="15:10">memset</name><argument_list pos:start="15:11" pos:end="15:46">(<argument pos:start="15:12" pos:end="15:15"><expr pos:start="15:12" pos:end="15:15"><name pos:start="15:12" pos:end="15:15">stat</name></expr></argument>, <argument pos:start="15:18" pos:end="15:18"><expr pos:start="15:18" pos:end="15:18"><literal type="number" pos:start="15:18" pos:end="15:18">0</literal></expr></argument>, <argument pos:start="15:21" pos:end="15:45"><expr pos:start="15:21" pos:end="15:45"><name pos:start="15:21" pos:end="15:31">packet_size</name> <operator pos:start="15:33" pos:end="15:33">*</operator> <sizeof pos:start="15:35" pos:end="15:45">sizeof<argument_list pos:start="15:41" pos:end="15:45">(<argument pos:start="15:42" pos:end="15:44"><expr pos:start="15:42" pos:end="15:44"><name pos:start="15:42" pos:end="15:44">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="19:5" pos:end="45:5">for <control pos:start="19:9" pos:end="19:38">(<init pos:start="19:10" pos:end="19:19"><expr pos:start="19:10" pos:end="19:18"><name pos:start="19:10" pos:end="19:10">x</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <name pos:start="19:14" pos:end="19:14">i</name> <operator pos:start="19:16" pos:end="19:16">=</operator> <literal type="number" pos:start="19:18" pos:end="19:18">0</literal></expr>;</init> <condition pos:start="19:21" pos:end="19:33"><expr pos:start="19:21" pos:end="19:32"><name pos:start="19:21" pos:end="19:21">i</name> <operator pos:start="19:23" pos:end="19:23">&lt;</operator> <name pos:start="19:25" pos:end="19:28">size</name> <operator pos:start="19:30" pos:end="19:30">-</operator> <literal type="number" pos:start="19:32" pos:end="19:32">3</literal></expr>;</condition> <incr pos:start="19:35" pos:end="19:37"><expr pos:start="19:35" pos:end="19:37"><name pos:start="19:35" pos:end="19:35">i</name><operator pos:start="19:36" pos:end="19:37">++</operator></expr></incr>)</control> <block pos:start="19:40" pos:end="45:5">{<block_content pos:start="21:9" pos:end="43:18">

        <if_stmt pos:start="21:9" pos:end="35:9"><if pos:start="21:9" pos:end="35:9">if <condition pos:start="21:12" pos:end="21:74">(<expr pos:start="21:13" pos:end="21:73"><name pos:start="21:13" pos:end="21:18"><name pos:start="21:13" pos:end="21:15">buf</name><index pos:start="21:16" pos:end="21:18">[<expr pos:start="21:17" pos:end="21:17"><name pos:start="21:17" pos:end="21:17">i</name></expr>]</index></name> <operator pos:start="21:20" pos:end="21:21">==</operator> <literal type="number" pos:start="21:23" pos:end="21:26">0x47</literal> <operator pos:start="21:28" pos:end="21:29">&amp;&amp;</operator> <operator pos:start="21:31" pos:end="21:31">!</operator><operator pos:start="21:32" pos:end="21:32">(</operator><name pos:start="21:33" pos:end="21:42"><name pos:start="21:33" pos:end="21:35">buf</name><index pos:start="21:36" pos:end="21:42">[<expr pos:start="21:37" pos:end="21:41"><name pos:start="21:37" pos:end="21:37">i</name> <operator pos:start="21:39" pos:end="21:39">+</operator> <literal type="number" pos:start="21:41" pos:end="21:41">1</literal></expr>]</index></name> <operator pos:start="21:44" pos:end="21:44">&amp;</operator> <literal type="number" pos:start="21:46" pos:end="21:49">0x80</literal><operator pos:start="21:50" pos:end="21:50">)</operator> <operator pos:start="21:52" pos:end="21:53">&amp;&amp;</operator> <operator pos:start="21:55" pos:end="21:55">(</operator><name pos:start="21:56" pos:end="21:65"><name pos:start="21:56" pos:end="21:58">buf</name><index pos:start="21:59" pos:end="21:65">[<expr pos:start="21:60" pos:end="21:64"><name pos:start="21:60" pos:end="21:60">i</name> <operator pos:start="21:62" pos:end="21:62">+</operator> <literal type="number" pos:start="21:64" pos:end="21:64">3</literal></expr>]</index></name> <operator pos:start="21:67" pos:end="21:67">&amp;</operator> <literal type="number" pos:start="21:69" pos:end="21:72">0x30</literal><operator pos:start="21:73" pos:end="21:73">)</operator></expr>)</condition> <block pos:start="21:76" pos:end="35:9">{<block_content pos:start="23:13" pos:end="33:13">

            <expr_stmt pos:start="23:13" pos:end="23:22"><expr pos:start="23:13" pos:end="23:21"><name pos:start="23:13" pos:end="23:19"><name pos:start="23:13" pos:end="23:16">stat</name><index pos:start="23:17" pos:end="23:19">[<expr pos:start="23:18" pos:end="23:18"><name pos:start="23:18" pos:end="23:18">x</name></expr>]</index></name><operator pos:start="23:20" pos:end="23:21">++</operator></expr>;</expr_stmt>

            <if_stmt pos:start="25:13" pos:end="33:13"><if pos:start="25:13" pos:end="33:13">if <condition pos:start="25:16" pos:end="25:37">(<expr pos:start="25:17" pos:end="25:36"><name pos:start="25:17" pos:end="25:23"><name pos:start="25:17" pos:end="25:20">stat</name><index pos:start="25:21" pos:end="25:23">[<expr pos:start="25:22" pos:end="25:22"><name pos:start="25:22" pos:end="25:22">x</name></expr>]</index></name> <operator pos:start="25:25" pos:end="25:25">&gt;</operator> <name pos:start="25:27" pos:end="25:36">best_score</name></expr>)</condition> <block pos:start="25:39" pos:end="33:13">{<block_content pos:start="27:17" pos:end="31:31">

                <expr_stmt pos:start="27:17" pos:end="27:37"><expr pos:start="27:17" pos:end="27:36"><name pos:start="27:17" pos:end="27:26">best_score</name> <operator pos:start="27:28" pos:end="27:28">=</operator> <name pos:start="27:30" pos:end="27:36"><name pos:start="27:30" pos:end="27:33">stat</name><index pos:start="27:34" pos:end="27:36">[<expr pos:start="27:35" pos:end="27:35"><name pos:start="27:35" pos:end="27:35">x</name></expr>]</index></name></expr>;</expr_stmt>

                <if_stmt pos:start="29:17" pos:end="31:31"><if pos:start="29:17" pos:end="31:31">if <condition pos:start="29:20" pos:end="29:26">(<expr pos:start="29:21" pos:end="29:25"><name pos:start="29:21" pos:end="29:25">index</name></expr>)</condition><block type="pseudo" pos:start="31:21" pos:end="31:31"><block_content pos:start="31:21" pos:end="31:31">

                    <expr_stmt pos:start="31:21" pos:end="31:31"><expr pos:start="31:21" pos:end="31:30"><operator pos:start="31:21" pos:end="31:21">*</operator><name pos:start="31:22" pos:end="31:26">index</name> <operator pos:start="31:28" pos:end="31:28">=</operator> <name pos:start="31:30" pos:end="31:30">x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="39:9" pos:end="39:12"><expr pos:start="39:9" pos:end="39:11"><name pos:start="39:9" pos:end="39:9">x</name><operator pos:start="39:10" pos:end="39:11">++</operator></expr>;</expr_stmt>

        <if_stmt pos:start="41:9" pos:end="43:18"><if pos:start="41:9" pos:end="43:18">if <condition pos:start="41:12" pos:end="41:29">(<expr pos:start="41:13" pos:end="41:28"><name pos:start="41:13" pos:end="41:13">x</name> <operator pos:start="41:15" pos:end="41:16">==</operator> <name pos:start="41:18" pos:end="41:28">packet_size</name></expr>)</condition><block type="pseudo" pos:start="43:13" pos:end="43:18"><block_content pos:start="43:13" pos:end="43:18">

            <expr_stmt pos:start="43:13" pos:end="43:18"><expr pos:start="43:13" pos:end="43:17"><name pos:start="43:13" pos:end="43:13">x</name> <operator pos:start="43:15" pos:end="43:15">=</operator> <literal type="number" pos:start="43:17" pos:end="43:17">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <return pos:start="49:5" pos:end="49:22">return <expr pos:start="49:12" pos:end="49:21"><name pos:start="49:12" pos:end="49:21">best_score</name></expr>;</return>

</block_content>}</block></function>
</unit>
