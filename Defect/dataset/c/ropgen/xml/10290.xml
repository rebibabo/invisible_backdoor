<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10290.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:18">cpu_interrupt</name><parameter_list pos:start="1:19" pos:end="1:43">(<parameter pos:start="1:20" pos:end="1:32"><decl pos:start="1:20" pos:end="1:32"><type pos:start="1:20" pos:end="1:32"><name pos:start="1:20" pos:end="1:27">CPUState</name> <modifier pos:start="1:29" pos:end="1:29">*</modifier></type><name pos:start="1:30" pos:end="1:32">env</name></decl></parameter>, <parameter pos:start="1:35" pos:end="1:42"><decl pos:start="1:35" pos:end="1:42"><type pos:start="1:35" pos:end="1:42"><name pos:start="1:35" pos:end="1:37">int</name></type> <name pos:start="1:39" pos:end="1:42">mask</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="59:1">{<block_content pos:start="5:5" pos:end="57:5">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:16">old_mask</name></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:38"><expr pos:start="9:5" pos:end="9:37"><name pos:start="9:5" pos:end="9:12">old_mask</name> <operator pos:start="9:14" pos:end="9:14">=</operator> <name pos:start="9:16" pos:end="9:37"><name pos:start="9:16" pos:end="9:18">env</name><operator pos:start="9:19" pos:end="9:20">-&gt;</operator><name pos:start="9:21" pos:end="9:37">interrupt_request</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="11:5" pos:end="16:0"><expr pos:start="11:5" pos:end="11:34"><name pos:start="11:5" pos:end="11:26"><name pos:start="11:5" pos:end="11:7">env</name><operator pos:start="11:8" pos:end="11:9">-&gt;</operator><name pos:start="11:10" pos:end="11:26">interrupt_request</name></name> <operator pos:start="11:28" pos:end="11:29">|=</operator> <name pos:start="11:31" pos:end="11:34">mask</name></expr>;</expr_stmt>



<cpp:ifndef pos:start="15:1" pos:end="15:24">#<cpp:directive pos:start="15:2" pos:end="15:7">ifndef</cpp:directive> <name pos:start="15:9" pos:end="15:24">CONFIG_USER_ONLY</name></cpp:ifndef>

    <comment type="block" pos:start="17:5" pos:end="23:7">/*

     * If called from iothread context, wake the target cpu in

     * case its halted.

     */</comment>

    <if_stmt pos:start="25:5" pos:end="34:0"><if pos:start="25:5" pos:end="34:0">if <condition pos:start="25:8" pos:end="25:28">(<expr pos:start="25:9" pos:end="25:27"><operator pos:start="25:9" pos:end="25:9">!</operator><call pos:start="25:10" pos:end="25:27"><name pos:start="25:10" pos:end="25:22">qemu_cpu_self</name><argument_list pos:start="25:23" pos:end="25:27">(<argument pos:start="25:24" pos:end="25:26"><expr pos:start="25:24" pos:end="25:26"><name pos:start="25:24" pos:end="25:26">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:30" pos:end="34:0">{<block_content pos:start="27:9" pos:end="29:15">

        <expr_stmt pos:start="27:9" pos:end="27:27"><expr pos:start="27:9" pos:end="27:26"><call pos:start="27:9" pos:end="27:26"><name pos:start="27:9" pos:end="27:21">qemu_cpu_kick</name><argument_list pos:start="27:22" pos:end="27:26">(<argument pos:start="27:23" pos:end="27:25"><expr pos:start="27:23" pos:end="27:25"><name pos:start="27:23" pos:end="27:25">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:15">return;</return>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="33:1" pos:end="33:6">#<cpp:directive pos:start="33:2" pos:end="33:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="37:5" pos:end="57:5"><if pos:start="37:5" pos:end="53:5">if <condition pos:start="37:8" pos:end="37:19">(<expr pos:start="37:9" pos:end="37:18"><name pos:start="37:9" pos:end="37:18">use_icount</name></expr>)</condition> <block pos:start="37:21" pos:end="53:5">{<block_content pos:start="39:9" pos:end="52:0">

        <expr_stmt pos:start="39:9" pos:end="42:0"><expr pos:start="39:9" pos:end="39:42"><name pos:start="39:9" pos:end="39:33"><name pos:start="39:9" pos:end="39:11">env</name><operator pos:start="39:12" pos:end="39:13">-&gt;</operator><name pos:start="39:14" pos:end="39:24">icount_decr</name><operator pos:start="39:25" pos:end="39:25">.</operator><name pos:start="39:26" pos:end="39:28">u16</name><operator pos:start="39:29" pos:end="39:29">.</operator><name pos:start="39:30" pos:end="39:33">high</name></name> <operator pos:start="39:35" pos:end="39:35">=</operator> <literal type="number" pos:start="39:37" pos:end="39:42">0xffff</literal></expr>;</expr_stmt>

<cpp:ifndef pos:start="41:1" pos:end="41:24">#<cpp:directive pos:start="41:2" pos:end="41:7">ifndef</cpp:directive> <name pos:start="41:9" pos:end="41:24">CONFIG_USER_ONLY</name></cpp:ifndef>

        <if_stmt pos:start="43:9" pos:end="52:0"><if pos:start="43:9" pos:end="52:0">if <condition pos:start="43:12" pos:end="45:39">(<expr pos:start="43:13" pos:end="45:38"><operator pos:start="43:13" pos:end="43:13">!</operator><call pos:start="43:14" pos:end="43:27"><name pos:start="43:14" pos:end="43:22">can_do_io</name><argument_list pos:start="43:23" pos:end="43:27">(<argument pos:start="43:24" pos:end="43:26"><expr pos:start="43:24" pos:end="43:26"><name pos:start="43:24" pos:end="43:26">env</name></expr></argument>)</argument_list></call>

            <operator pos:start="45:13" pos:end="45:14">&amp;&amp;</operator> <operator pos:start="45:16" pos:end="45:16">(</operator><name pos:start="45:17" pos:end="45:20">mask</name> <operator pos:start="45:22" pos:end="45:22">&amp;</operator> <operator pos:start="45:24" pos:end="45:24">~</operator><name pos:start="45:25" pos:end="45:32">old_mask</name><operator pos:start="45:33" pos:end="45:33">)</operator> <operator pos:start="45:35" pos:end="45:36">!=</operator> <literal type="number" pos:start="45:38" pos:end="45:38">0</literal></expr>)</condition> <block pos:start="45:41" pos:end="52:0">{<block_content pos:start="47:13" pos:end="47:73">

            <expr_stmt pos:start="47:13" pos:end="47:73"><expr pos:start="47:13" pos:end="47:72"><call pos:start="47:13" pos:end="47:72"><name pos:start="47:13" pos:end="47:21">cpu_abort</name><argument_list pos:start="47:22" pos:end="47:72">(<argument pos:start="47:23" pos:end="47:25"><expr pos:start="47:23" pos:end="47:25"><name pos:start="47:23" pos:end="47:25">env</name></expr></argument>, <argument pos:start="47:28" pos:end="47:71"><expr pos:start="47:28" pos:end="47:71"><literal type="string" pos:start="47:28" pos:end="47:71">"Raised interrupt while not in I/O function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="51:1" pos:end="51:6">#<cpp:directive pos:start="51:2" pos:end="51:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if> <else pos:start="53:7" pos:end="57:5">else <block pos:start="53:12" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:27">

        <expr_stmt pos:start="55:9" pos:end="55:27"><expr pos:start="55:9" pos:end="55:26"><call pos:start="55:9" pos:end="55:26"><name pos:start="55:9" pos:end="55:21">cpu_unlink_tb</name><argument_list pos:start="55:22" pos:end="55:26">(<argument pos:start="55:23" pos:end="55:25"><expr pos:start="55:23" pos:end="55:25"><name pos:start="55:23" pos:end="55:25">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
