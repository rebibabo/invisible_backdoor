<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/832.c" pos:tabs="8"><function pos:start="1:1" pos:end="94:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">spdif_write_packet</name><parameter_list pos:start="1:30" pos:end="1:71">(<parameter pos:start="1:31" pos:end="1:55"><decl pos:start="1:31" pos:end="1:55"><type pos:start="1:31" pos:end="1:55"><name pos:start="1:31" pos:end="1:52"><name pos:start="1:31" pos:end="1:36">struct</name> <name pos:start="1:38" pos:end="1:52">AVFormatContext</name></name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:55">s</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:70"><decl pos:start="1:58" pos:end="1:70"><type pos:start="1:58" pos:end="1:70"><name pos:start="1:58" pos:end="1:65">AVPacket</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:70">pkt</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="94:1">{<block_content pos:start="5:5" pos:end="92:13">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">IEC958Context</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:22">ctx</name> <init pos:start="5:24" pos:end="5:37">= <expr pos:start="5:26" pos:end="5:37"><name pos:start="5:26" pos:end="5:37"><name pos:start="5:26" pos:end="5:26">s</name><operator pos:start="5:27" pos:end="5:28">-&gt;</operator><name pos:start="5:29" pos:end="5:37">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>, <decl pos:start="7:14" pos:end="7:20"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:14" pos:end="7:20">padding</name></decl>;</decl_stmt>




    <expr_stmt pos:start="12:5" pos:end="12:31"><expr pos:start="12:5" pos:end="12:30"><name pos:start="12:5" pos:end="12:18"><name pos:start="12:5" pos:end="12:7">ctx</name><operator pos:start="12:8" pos:end="12:9">-&gt;</operator><name pos:start="12:10" pos:end="12:18">out_bytes</name></name> <operator pos:start="12:20" pos:end="12:20">=</operator> <name pos:start="12:22" pos:end="12:30"><name pos:start="12:22" pos:end="12:24">pkt</name><operator pos:start="12:25" pos:end="12:26">-&gt;</operator><name pos:start="12:27" pos:end="12:30">size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="14:5" pos:end="14:50"><expr pos:start="14:5" pos:end="14:49"><name pos:start="14:5" pos:end="14:20"><name pos:start="14:5" pos:end="14:7">ctx</name><operator pos:start="14:8" pos:end="14:9">-&gt;</operator><name pos:start="14:10" pos:end="14:20">length_code</name></name> <operator pos:start="14:22" pos:end="14:22">=</operator> <call pos:start="14:24" pos:end="14:44"><name pos:start="14:24" pos:end="14:30">FFALIGN</name><argument_list pos:start="14:31" pos:end="14:44">(<argument pos:start="14:32" pos:end="14:40"><expr pos:start="14:32" pos:end="14:40"><name pos:start="14:32" pos:end="14:40"><name pos:start="14:32" pos:end="14:34">pkt</name><operator pos:start="14:35" pos:end="14:36">-&gt;</operator><name pos:start="14:37" pos:end="14:40">size</name></name></expr></argument>, <argument pos:start="14:43" pos:end="14:43"><expr pos:start="14:43" pos:end="14:43"><literal type="number" pos:start="14:43" pos:end="14:43">2</literal></expr></argument>)</argument_list></call> <operator pos:start="14:46" pos:end="14:47">&lt;&lt;</operator> <literal type="number" pos:start="14:49" pos:end="14:49">3</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="18:5" pos:end="18:35"><expr pos:start="18:5" pos:end="18:34"><name pos:start="18:5" pos:end="18:7">ret</name> <operator pos:start="18:9" pos:end="18:9">=</operator> <call pos:start="18:11" pos:end="18:34"><name pos:start="18:11" pos:end="18:26"><name pos:start="18:11" pos:end="18:13">ctx</name><operator pos:start="18:14" pos:end="18:15">-&gt;</operator><name pos:start="18:16" pos:end="18:26">header_info</name></name><argument_list pos:start="18:27" pos:end="18:34">(<argument pos:start="18:28" pos:end="18:28"><expr pos:start="18:28" pos:end="18:28"><name pos:start="18:28" pos:end="18:28">s</name></expr></argument>, <argument pos:start="18:31" pos:end="18:33"><expr pos:start="18:31" pos:end="18:33"><name pos:start="18:31" pos:end="18:33">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="20:5" pos:end="22:18"><if pos:start="20:5" pos:end="22:18">if <condition pos:start="20:8" pos:end="20:16">(<expr pos:start="20:9" pos:end="20:15"><name pos:start="20:9" pos:end="20:11">ret</name> <operator pos:start="20:13" pos:end="20:13">&lt;</operator> <literal type="number" pos:start="20:15" pos:end="20:15">0</literal></expr>)</condition><block type="pseudo" pos:start="22:9" pos:end="22:18"><block_content pos:start="22:9" pos:end="22:18">

        <return pos:start="22:9" pos:end="22:18">return <expr pos:start="22:16" pos:end="22:17"><operator pos:start="22:16" pos:end="22:16">-</operator><literal type="number" pos:start="22:17" pos:end="22:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="24:5" pos:end="26:17"><if pos:start="24:5" pos:end="26:17">if <condition pos:start="24:8" pos:end="24:25">(<expr pos:start="24:9" pos:end="24:24"><operator pos:start="24:9" pos:end="24:9">!</operator><name pos:start="24:10" pos:end="24:24"><name pos:start="24:10" pos:end="24:12">ctx</name><operator pos:start="24:13" pos:end="24:14">-&gt;</operator><name pos:start="24:15" pos:end="24:24">pkt_offset</name></name></expr>)</condition><block type="pseudo" pos:start="26:9" pos:end="26:17"><block_content pos:start="26:9" pos:end="26:17">

        <return pos:start="26:9" pos:end="26:17">return <expr pos:start="26:16" pos:end="26:16"><literal type="number" pos:start="26:16" pos:end="26:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="30:5" pos:end="30:74"><expr pos:start="30:5" pos:end="30:73"><name pos:start="30:5" pos:end="30:11">padding</name> <operator pos:start="30:13" pos:end="30:13">=</operator> <operator pos:start="30:15" pos:end="30:15">(</operator><name pos:start="30:16" pos:end="30:30"><name pos:start="30:16" pos:end="30:18">ctx</name><operator pos:start="30:19" pos:end="30:20">-&gt;</operator><name pos:start="30:21" pos:end="30:30">pkt_offset</name></name> <operator pos:start="30:32" pos:end="30:32">-</operator> <name pos:start="30:34" pos:end="30:50">BURST_HEADER_SIZE</name> <operator pos:start="30:52" pos:end="30:52">-</operator> <name pos:start="30:54" pos:end="30:67"><name pos:start="30:54" pos:end="30:56">ctx</name><operator pos:start="30:57" pos:end="30:58">-&gt;</operator><name pos:start="30:59" pos:end="30:67">out_bytes</name></name><operator pos:start="30:68" pos:end="30:68">)</operator> <operator pos:start="30:70" pos:end="30:71">&gt;&gt;</operator> <literal type="number" pos:start="30:73" pos:end="30:73">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="32:5" pos:end="38:5"><if pos:start="32:5" pos:end="38:5">if <condition pos:start="32:8" pos:end="32:20">(<expr pos:start="32:9" pos:end="32:19"><name pos:start="32:9" pos:end="32:15">padding</name> <operator pos:start="32:17" pos:end="32:17">&lt;</operator> <literal type="number" pos:start="32:19" pos:end="32:19">0</literal></expr>)</condition> <block pos:start="32:22" pos:end="38:5">{<block_content pos:start="34:9" pos:end="36:18">

        <expr_stmt pos:start="34:9" pos:end="34:57"><expr pos:start="34:9" pos:end="34:56"><call pos:start="34:9" pos:end="34:56"><name pos:start="34:9" pos:end="34:14">av_log</name><argument_list pos:start="34:15" pos:end="34:56">(<argument pos:start="34:16" pos:end="34:16"><expr pos:start="34:16" pos:end="34:16"><name pos:start="34:16" pos:end="34:16">s</name></expr></argument>, <argument pos:start="34:19" pos:end="34:30"><expr pos:start="34:19" pos:end="34:30"><name pos:start="34:19" pos:end="34:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="34:33" pos:end="34:55"><expr pos:start="34:33" pos:end="34:55"><literal type="string" pos:start="34:33" pos:end="34:55">"bitrate is too high\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="36:9" pos:end="36:18">return <expr pos:start="36:16" pos:end="36:17"><operator pos:start="36:16" pos:end="36:16">-</operator><literal type="number" pos:start="36:17" pos:end="36:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="42:5" pos:end="42:31"><expr pos:start="42:5" pos:end="42:30"><call pos:start="42:5" pos:end="42:30"><name pos:start="42:5" pos:end="42:12">put_le16</name><argument_list pos:start="42:13" pos:end="42:30">(<argument pos:start="42:14" pos:end="42:18"><expr pos:start="42:14" pos:end="42:18"><name pos:start="42:14" pos:end="42:18"><name pos:start="42:14" pos:end="42:14">s</name><operator pos:start="42:15" pos:end="42:16">-&gt;</operator><name pos:start="42:17" pos:end="42:18">pb</name></name></expr></argument>, <argument pos:start="42:21" pos:end="42:29"><expr pos:start="42:21" pos:end="42:29"><name pos:start="42:21" pos:end="42:29">SYNCWORD1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="line" pos:start="42:38" pos:end="42:41">//Pa</comment>

    <expr_stmt pos:start="44:5" pos:end="44:31"><expr pos:start="44:5" pos:end="44:30"><call pos:start="44:5" pos:end="44:30"><name pos:start="44:5" pos:end="44:12">put_le16</name><argument_list pos:start="44:13" pos:end="44:30">(<argument pos:start="44:14" pos:end="44:18"><expr pos:start="44:14" pos:end="44:18"><name pos:start="44:14" pos:end="44:18"><name pos:start="44:14" pos:end="44:14">s</name><operator pos:start="44:15" pos:end="44:16">-&gt;</operator><name pos:start="44:17" pos:end="44:18">pb</name></name></expr></argument>, <argument pos:start="44:21" pos:end="44:29"><expr pos:start="44:21" pos:end="44:29"><name pos:start="44:21" pos:end="44:29">SYNCWORD2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="line" pos:start="44:38" pos:end="44:41">//Pb</comment>

    <expr_stmt pos:start="46:5" pos:end="46:36"><expr pos:start="46:5" pos:end="46:35"><call pos:start="46:5" pos:end="46:35"><name pos:start="46:5" pos:end="46:12">put_le16</name><argument_list pos:start="46:13" pos:end="46:35">(<argument pos:start="46:14" pos:end="46:18"><expr pos:start="46:14" pos:end="46:18"><name pos:start="46:14" pos:end="46:18"><name pos:start="46:14" pos:end="46:14">s</name><operator pos:start="46:15" pos:end="46:16">-&gt;</operator><name pos:start="46:17" pos:end="46:18">pb</name></name></expr></argument>, <argument pos:start="46:21" pos:end="46:34"><expr pos:start="46:21" pos:end="46:34"><name pos:start="46:21" pos:end="46:34"><name pos:start="46:21" pos:end="46:23">ctx</name><operator pos:start="46:24" pos:end="46:25">-&gt;</operator><name pos:start="46:26" pos:end="46:34">data_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="46:38" pos:end="46:41">//Pc</comment>

    <expr_stmt pos:start="48:5" pos:end="53:0"><expr pos:start="48:5" pos:end="48:37"><call pos:start="48:5" pos:end="48:37"><name pos:start="48:5" pos:end="48:12">put_le16</name><argument_list pos:start="48:13" pos:end="48:37">(<argument pos:start="48:14" pos:end="48:18"><expr pos:start="48:14" pos:end="48:18"><name pos:start="48:14" pos:end="48:18"><name pos:start="48:14" pos:end="48:14">s</name><operator pos:start="48:15" pos:end="48:16">-&gt;</operator><name pos:start="48:17" pos:end="48:18">pb</name></name></expr></argument>, <argument pos:start="48:21" pos:end="48:36"><expr pos:start="48:21" pos:end="48:36"><name pos:start="48:21" pos:end="48:36"><name pos:start="48:21" pos:end="48:23">ctx</name><operator pos:start="48:24" pos:end="48:25">-&gt;</operator><name pos:start="48:26" pos:end="48:36">length_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:start="48:39" pos:end="48:42">//Pd</comment>



<cpp:if pos:start="52:1" pos:end="52:18">#<cpp:directive pos:start="52:2" pos:end="52:3">if</cpp:directive> <expr pos:start="52:5" pos:end="52:18"><name pos:start="52:5" pos:end="52:18">HAVE_BIGENDIAN</name></expr></cpp:if>

    <expr_stmt pos:start="54:5" pos:end="57:0"><expr pos:start="54:5" pos:end="54:56"><call pos:start="54:5" pos:end="54:56"><name pos:start="54:5" pos:end="54:14">put_buffer</name><argument_list pos:start="54:15" pos:end="54:56">(<argument pos:start="54:16" pos:end="54:20"><expr pos:start="54:16" pos:end="54:20"><name pos:start="54:16" pos:end="54:20"><name pos:start="54:16" pos:end="54:16">s</name><operator pos:start="54:17" pos:end="54:18">-&gt;</operator><name pos:start="54:19" pos:end="54:20">pb</name></name></expr></argument>, <argument pos:start="54:23" pos:end="54:34"><expr pos:start="54:23" pos:end="54:34"><name pos:start="54:23" pos:end="54:34"><name pos:start="54:23" pos:end="54:25">ctx</name><operator pos:start="54:26" pos:end="54:27">-&gt;</operator><name pos:start="54:28" pos:end="54:34">out_buf</name></name></expr></argument>, <argument pos:start="54:37" pos:end="54:55"><expr pos:start="54:37" pos:end="54:55"><name pos:start="54:37" pos:end="54:50"><name pos:start="54:37" pos:end="54:39">ctx</name><operator pos:start="54:40" pos:end="54:41">-&gt;</operator><name pos:start="54:42" pos:end="54:50">out_bytes</name></name> <operator pos:start="54:52" pos:end="54:52">&amp;</operator> <operator pos:start="54:54" pos:end="54:54">~</operator><literal type="number" pos:start="54:55" pos:end="54:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="56:1" pos:end="56:5">#<cpp:directive pos:start="56:2" pos:end="56:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="58:5" pos:end="58:99"><expr pos:start="58:5" pos:end="58:98"><call pos:start="58:5" pos:end="58:98"><name pos:start="58:5" pos:end="58:18">av_fast_malloc</name><argument_list pos:start="58:19" pos:end="58:98">(<argument pos:start="58:20" pos:end="58:31"><expr pos:start="58:20" pos:end="58:31"><operator pos:start="58:20" pos:end="58:20">&amp;</operator><name pos:start="58:21" pos:end="58:31"><name pos:start="58:21" pos:end="58:23">ctx</name><operator pos:start="58:24" pos:end="58:25">-&gt;</operator><name pos:start="58:26" pos:end="58:31">buffer</name></name></expr></argument>, <argument pos:start="58:34" pos:end="58:50"><expr pos:start="58:34" pos:end="58:50"><operator pos:start="58:34" pos:end="58:34">&amp;</operator><name pos:start="58:35" pos:end="58:50"><name pos:start="58:35" pos:end="58:37">ctx</name><operator pos:start="58:38" pos:end="58:39">-&gt;</operator><name pos:start="58:40" pos:end="58:50">buffer_size</name></name></expr></argument>, <argument pos:start="58:53" pos:end="58:97"><expr pos:start="58:53" pos:end="58:97"><name pos:start="58:53" pos:end="58:66"><name pos:start="58:53" pos:end="58:55">ctx</name><operator pos:start="58:56" pos:end="58:57">-&gt;</operator><name pos:start="58:58" pos:end="58:66">out_bytes</name></name> <operator pos:start="58:68" pos:end="58:68">+</operator> <name pos:start="58:70" pos:end="58:97">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="60:5" pos:end="62:31"><if pos:start="60:5" pos:end="62:31">if <condition pos:start="60:8" pos:end="60:21">(<expr pos:start="60:9" pos:end="60:20"><operator pos:start="60:9" pos:end="60:9">!</operator><name pos:start="60:10" pos:end="60:20"><name pos:start="60:10" pos:end="60:12">ctx</name><operator pos:start="60:13" pos:end="60:14">-&gt;</operator><name pos:start="60:15" pos:end="60:20">buffer</name></name></expr>)</condition><block type="pseudo" pos:start="62:9" pos:end="62:31"><block_content pos:start="62:9" pos:end="62:31">

        <return pos:start="62:9" pos:end="62:31">return <expr pos:start="62:16" pos:end="62:30"><call pos:start="62:16" pos:end="62:30"><name pos:start="62:16" pos:end="62:22">AVERROR</name><argument_list pos:start="62:23" pos:end="62:30">(<argument pos:start="62:24" pos:end="62:29"><expr pos:start="62:24" pos:end="62:29"><name pos:start="62:24" pos:end="62:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="64:5" pos:end="64:97"><expr pos:start="64:5" pos:end="64:96"><call pos:start="64:5" pos:end="64:96"><name pos:start="64:5" pos:end="64:24">ff_spdif_bswap_buf16</name><argument_list pos:start="64:25" pos:end="64:96">(<argument pos:start="64:26" pos:end="64:48"><expr pos:start="64:26" pos:end="64:48"><operator pos:start="64:26" pos:end="64:26">(</operator><name pos:start="64:27" pos:end="64:34">uint16_t</name> <operator pos:start="64:36" pos:end="64:36">*</operator><operator pos:start="64:37" pos:end="64:37">)</operator><name pos:start="64:38" pos:end="64:48"><name pos:start="64:38" pos:end="64:40">ctx</name><operator pos:start="64:41" pos:end="64:42">-&gt;</operator><name pos:start="64:43" pos:end="64:48">buffer</name></name></expr></argument>, <argument pos:start="64:51" pos:end="64:74"><expr pos:start="64:51" pos:end="64:74"><operator pos:start="64:51" pos:end="64:51">(</operator><name pos:start="64:52" pos:end="64:59">uint16_t</name> <operator pos:start="64:61" pos:end="64:61">*</operator><operator pos:start="64:62" pos:end="64:62">)</operator><name pos:start="64:63" pos:end="64:74"><name pos:start="64:63" pos:end="64:65">ctx</name><operator pos:start="64:66" pos:end="64:67">-&gt;</operator><name pos:start="64:68" pos:end="64:74">out_buf</name></name></expr></argument>, <argument pos:start="64:77" pos:end="64:95"><expr pos:start="64:77" pos:end="64:95"><name pos:start="64:77" pos:end="64:90"><name pos:start="64:77" pos:end="64:79">ctx</name><operator pos:start="64:80" pos:end="64:81">-&gt;</operator><name pos:start="64:82" pos:end="64:90">out_bytes</name></name> <operator pos:start="64:92" pos:end="64:93">&gt;&gt;</operator> <literal type="number" pos:start="64:95" pos:end="64:95">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="66:5" pos:end="69:0"><expr pos:start="66:5" pos:end="66:55"><call pos:start="66:5" pos:end="66:55"><name pos:start="66:5" pos:end="66:14">put_buffer</name><argument_list pos:start="66:15" pos:end="66:55">(<argument pos:start="66:16" pos:end="66:20"><expr pos:start="66:16" pos:end="66:20"><name pos:start="66:16" pos:end="66:20"><name pos:start="66:16" pos:end="66:16">s</name><operator pos:start="66:17" pos:end="66:18">-&gt;</operator><name pos:start="66:19" pos:end="66:20">pb</name></name></expr></argument>, <argument pos:start="66:23" pos:end="66:33"><expr pos:start="66:23" pos:end="66:33"><name pos:start="66:23" pos:end="66:33"><name pos:start="66:23" pos:end="66:25">ctx</name><operator pos:start="66:26" pos:end="66:27">-&gt;</operator><name pos:start="66:28" pos:end="66:33">buffer</name></name></expr></argument>, <argument pos:start="66:36" pos:end="66:54"><expr pos:start="66:36" pos:end="66:54"><name pos:start="66:36" pos:end="66:49"><name pos:start="66:36" pos:end="66:38">ctx</name><operator pos:start="66:39" pos:end="66:40">-&gt;</operator><name pos:start="66:41" pos:end="66:49">out_bytes</name></name> <operator pos:start="66:51" pos:end="66:51">&amp;</operator> <operator pos:start="66:53" pos:end="66:53">~</operator><literal type="number" pos:start="66:54" pos:end="66:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="68:1" pos:end="68:6">#<cpp:directive pos:start="68:2" pos:end="68:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="72:5" pos:end="74:58"><if pos:start="72:5" pos:end="74:58">if <condition pos:start="72:8" pos:end="72:27">(<expr pos:start="72:9" pos:end="72:26"><name pos:start="72:9" pos:end="72:22"><name pos:start="72:9" pos:end="72:11">ctx</name><operator pos:start="72:12" pos:end="72:13">-&gt;</operator><name pos:start="72:14" pos:end="72:22">out_bytes</name></name> <operator pos:start="72:24" pos:end="72:24">&amp;</operator> <literal type="number" pos:start="72:26" pos:end="72:26">1</literal></expr>)</condition><block type="pseudo" pos:start="74:9" pos:end="74:58"><block_content pos:start="74:9" pos:end="74:58">

        <expr_stmt pos:start="74:9" pos:end="74:58"><expr pos:start="74:9" pos:end="74:57"><call pos:start="74:9" pos:end="74:57"><name pos:start="74:9" pos:end="74:16">put_be16</name><argument_list pos:start="74:17" pos:end="74:57">(<argument pos:start="74:18" pos:end="74:22"><expr pos:start="74:18" pos:end="74:22"><name pos:start="74:18" pos:end="74:22"><name pos:start="74:18" pos:end="74:18">s</name><operator pos:start="74:19" pos:end="74:20">-&gt;</operator><name pos:start="74:21" pos:end="74:22">pb</name></name></expr></argument>, <argument pos:start="74:25" pos:end="74:56"><expr pos:start="74:25" pos:end="74:56"><name pos:start="74:25" pos:end="74:56"><name pos:start="74:25" pos:end="74:27">ctx</name><operator pos:start="74:28" pos:end="74:29">-&gt;</operator><name pos:start="74:30" pos:end="74:36">out_buf</name><index pos:start="74:37" pos:end="74:56">[<expr pos:start="74:38" pos:end="74:55"><name pos:start="74:38" pos:end="74:51"><name pos:start="74:38" pos:end="74:40">ctx</name><operator pos:start="74:41" pos:end="74:42">-&gt;</operator><name pos:start="74:43" pos:end="74:51">out_bytes</name></name> <operator pos:start="74:53" pos:end="74:53">-</operator> <literal type="number" pos:start="74:55" pos:end="74:55">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <for pos:start="78:5" pos:end="80:27">for <control pos:start="78:9" pos:end="78:34">(<init pos:start="78:10" pos:end="78:10">;</init> <condition pos:start="78:12" pos:end="78:23"><expr pos:start="78:12" pos:end="78:22"><name pos:start="78:12" pos:end="78:18">padding</name> <operator pos:start="78:20" pos:end="78:20">&gt;</operator> <literal type="number" pos:start="78:22" pos:end="78:22">0</literal></expr>;</condition> <incr pos:start="78:25" pos:end="78:33"><expr pos:start="78:25" pos:end="78:33"><name pos:start="78:25" pos:end="78:31">padding</name><operator pos:start="78:32" pos:end="78:33">--</operator></expr></incr>)</control><block type="pseudo" pos:start="80:9" pos:end="80:27"><block_content pos:start="80:9" pos:end="80:27">

        <expr_stmt pos:start="80:9" pos:end="80:27"><expr pos:start="80:9" pos:end="80:26"><call pos:start="80:9" pos:end="80:26"><name pos:start="80:9" pos:end="80:16">put_be16</name><argument_list pos:start="80:17" pos:end="80:26">(<argument pos:start="80:18" pos:end="80:22"><expr pos:start="80:18" pos:end="80:22"><name pos:start="80:18" pos:end="80:22"><name pos:start="80:18" pos:end="80:18">s</name><operator pos:start="80:19" pos:end="80:20">-&gt;</operator><name pos:start="80:21" pos:end="80:22">pb</name></name></expr></argument>, <argument pos:start="80:25" pos:end="80:25"><expr pos:start="80:25" pos:end="80:25"><literal type="number" pos:start="80:25" pos:end="80:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <expr_stmt pos:start="84:5" pos:end="86:60"><expr pos:start="84:5" pos:end="86:59"><call pos:start="84:5" pos:end="86:59"><name pos:start="84:5" pos:end="84:10">av_log</name><argument_list pos:start="84:11" pos:end="86:59">(<argument pos:start="84:12" pos:end="84:12"><expr pos:start="84:12" pos:end="84:12"><name pos:start="84:12" pos:end="84:12">s</name></expr></argument>, <argument pos:start="84:15" pos:end="84:26"><expr pos:start="84:15" pos:end="84:26"><name pos:start="84:15" pos:end="84:26">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="84:29" pos:end="84:60"><expr pos:start="84:29" pos:end="84:60"><literal type="string" pos:start="84:29" pos:end="84:60">"type=%x len=%i pkt_offset=%i\n"</literal></expr></argument>,

           <argument pos:start="86:12" pos:end="86:25"><expr pos:start="86:12" pos:end="86:25"><name pos:start="86:12" pos:end="86:25"><name pos:start="86:12" pos:end="86:14">ctx</name><operator pos:start="86:15" pos:end="86:16">-&gt;</operator><name pos:start="86:17" pos:end="86:25">data_type</name></name></expr></argument>, <argument pos:start="86:28" pos:end="86:41"><expr pos:start="86:28" pos:end="86:41"><name pos:start="86:28" pos:end="86:41"><name pos:start="86:28" pos:end="86:30">ctx</name><operator pos:start="86:31" pos:end="86:32">-&gt;</operator><name pos:start="86:33" pos:end="86:41">out_bytes</name></name></expr></argument>, <argument pos:start="86:44" pos:end="86:58"><expr pos:start="86:44" pos:end="86:58"><name pos:start="86:44" pos:end="86:58"><name pos:start="86:44" pos:end="86:46">ctx</name><operator pos:start="86:47" pos:end="86:48">-&gt;</operator><name pos:start="86:49" pos:end="86:58">pkt_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="90:5" pos:end="90:28"><expr pos:start="90:5" pos:end="90:27"><call pos:start="90:5" pos:end="90:27"><name pos:start="90:5" pos:end="90:20">put_flush_packet</name><argument_list pos:start="90:21" pos:end="90:27">(<argument pos:start="90:22" pos:end="90:26"><expr pos:start="90:22" pos:end="90:26"><name pos:start="90:22" pos:end="90:26"><name pos:start="90:22" pos:end="90:22">s</name><operator pos:start="90:23" pos:end="90:24">-&gt;</operator><name pos:start="90:25" pos:end="90:26">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="92:5" pos:end="92:13">return <expr pos:start="92:12" pos:end="92:12"><literal type="number" pos:start="92:12" pos:end="92:12">0</literal></expr>;</return>

</block_content>}</block></function></unit>
