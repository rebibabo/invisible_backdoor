<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14549.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">write_elf_loads</name><parameter_list pos:start="1:27" pos:end="1:40">(<parameter pos:start="1:28" pos:end="1:39"><decl pos:start="1:28" pos:end="1:39"><type pos:start="1:28" pos:end="1:38"><name pos:start="1:28" pos:end="1:36">DumpState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:39">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="65:1">{<block_content pos:start="5:5" pos:end="63:13">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:10">hwaddr</name></type> <name pos:start="5:12" pos:end="5:17">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">MemoryMapping</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:33">memory_mapping</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:23">phdr_index</name> <init pos:start="9:25" pos:end="9:27">= <expr pos:start="9:27" pos:end="9:27"><literal type="number" pos:start="9:27" pos:end="9:27">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:22">max_index</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="25:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:24">(<expr pos:start="17:9" pos:end="17:23"><name pos:start="17:9" pos:end="17:23"><name pos:start="17:9" pos:end="17:9">s</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:23">have_section</name></name></expr>)</condition> <block pos:start="17:26" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:31">

        <expr_stmt pos:start="19:9" pos:end="19:31"><expr pos:start="19:9" pos:end="19:30"><name pos:start="19:9" pos:end="19:17">max_index</name> <operator pos:start="19:19" pos:end="19:19">=</operator> <name pos:start="19:21" pos:end="19:30"><name pos:start="19:21" pos:end="19:21">s</name><operator pos:start="19:22" pos:end="19:23">-&gt;</operator><name pos:start="19:24" pos:end="19:30">sh_info</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="21:7" pos:end="25:5">else <block pos:start="21:12" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:32">

        <expr_stmt pos:start="23:9" pos:end="23:32"><expr pos:start="23:9" pos:end="23:31"><name pos:start="23:9" pos:end="23:17">max_index</name> <operator pos:start="23:19" pos:end="23:19">=</operator> <name pos:start="23:21" pos:end="23:31"><name pos:start="23:21" pos:end="23:21">s</name><operator pos:start="23:22" pos:end="23:23">-&gt;</operator><name pos:start="23:24" pos:end="23:31">phdr_num</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <macro pos:start="29:5" pos:end="29:55"><name pos:start="29:5" pos:end="29:18">QTAILQ_FOREACH</name><argument_list pos:start="29:19" pos:end="29:55">(<argument pos:start="29:20" pos:end="29:33">memory_mapping</argument>, <argument pos:start="29:36" pos:end="29:48">&amp;s-&gt;list.head</argument>, <argument pos:start="29:51" pos:end="29:54">next</argument>)</argument_list></macro> <block pos:start="29:57" pos:end="59:5">{<block_content pos:start="31:9" pos:end="57:9">

        <expr_stmt pos:start="31:9" pos:end="31:58"><expr pos:start="31:9" pos:end="31:57"><name pos:start="31:9" pos:end="31:14">offset</name> <operator pos:start="31:16" pos:end="31:16">=</operator> <call pos:start="31:18" pos:end="31:57"><name pos:start="31:18" pos:end="31:27">get_offset</name><argument_list pos:start="31:28" pos:end="31:57">(<argument pos:start="31:29" pos:end="31:53"><expr pos:start="31:29" pos:end="31:53"><name pos:start="31:29" pos:end="31:53"><name pos:start="31:29" pos:end="31:42">memory_mapping</name><operator pos:start="31:43" pos:end="31:44">-&gt;</operator><name pos:start="31:45" pos:end="31:53">phys_addr</name></name></expr></argument>, <argument pos:start="31:56" pos:end="31:56"><expr pos:start="31:56" pos:end="31:56"><name pos:start="31:56" pos:end="31:56">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="41:9"><if pos:start="33:9" pos:end="37:9">if <condition pos:start="33:12" pos:end="33:47">(<expr pos:start="33:13" pos:end="33:46"><name pos:start="33:13" pos:end="33:32"><name pos:start="33:13" pos:end="33:13">s</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:24">dump_info</name><operator pos:start="33:25" pos:end="33:25">.</operator><name pos:start="33:26" pos:end="33:32">d_class</name></name> <operator pos:start="33:34" pos:end="33:35">==</operator> <name pos:start="33:37" pos:end="33:46">ELFCLASS64</name></expr>)</condition> <block pos:start="33:49" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:76">

            <expr_stmt pos:start="35:13" pos:end="35:76"><expr pos:start="35:13" pos:end="35:75"><name pos:start="35:13" pos:end="35:15">ret</name> <operator pos:start="35:17" pos:end="35:17">=</operator> <call pos:start="35:19" pos:end="35:75"><name pos:start="35:19" pos:end="35:34">write_elf64_load</name><argument_list pos:start="35:35" pos:end="35:75">(<argument pos:start="35:36" pos:end="35:36"><expr pos:start="35:36" pos:end="35:36"><name pos:start="35:36" pos:end="35:36">s</name></expr></argument>, <argument pos:start="35:39" pos:end="35:52"><expr pos:start="35:39" pos:end="35:52"><name pos:start="35:39" pos:end="35:52">memory_mapping</name></expr></argument>, <argument pos:start="35:55" pos:end="35:66"><expr pos:start="35:55" pos:end="35:66"><name pos:start="35:55" pos:end="35:64">phdr_index</name><operator pos:start="35:65" pos:end="35:66">++</operator></expr></argument>, <argument pos:start="35:69" pos:end="35:74"><expr pos:start="35:69" pos:end="35:74"><name pos:start="35:69" pos:end="35:74">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="37:11" pos:end="41:9">else <block pos:start="37:16" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:76">

            <expr_stmt pos:start="39:13" pos:end="39:76"><expr pos:start="39:13" pos:end="39:75"><name pos:start="39:13" pos:end="39:15">ret</name> <operator pos:start="39:17" pos:end="39:17">=</operator> <call pos:start="39:19" pos:end="39:75"><name pos:start="39:19" pos:end="39:34">write_elf32_load</name><argument_list pos:start="39:35" pos:end="39:75">(<argument pos:start="39:36" pos:end="39:36"><expr pos:start="39:36" pos:end="39:36"><name pos:start="39:36" pos:end="39:36">s</name></expr></argument>, <argument pos:start="39:39" pos:end="39:52"><expr pos:start="39:39" pos:end="39:52"><name pos:start="39:39" pos:end="39:52">memory_mapping</name></expr></argument>, <argument pos:start="39:55" pos:end="39:66"><expr pos:start="39:55" pos:end="39:66"><name pos:start="39:55" pos:end="39:64">phdr_index</name><operator pos:start="39:65" pos:end="39:66">++</operator></expr></argument>, <argument pos:start="39:69" pos:end="39:74"><expr pos:start="39:69" pos:end="39:74"><name pos:start="39:69" pos:end="39:74">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="45:9" pos:end="49:9"><if pos:start="45:9" pos:end="49:9">if <condition pos:start="45:12" pos:end="45:20">(<expr pos:start="45:13" pos:end="45:19"><name pos:start="45:13" pos:end="45:15">ret</name> <operator pos:start="45:17" pos:end="45:17">&lt;</operator> <literal type="number" pos:start="45:19" pos:end="45:19">0</literal></expr>)</condition> <block pos:start="45:22" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:22">

            <return pos:start="47:13" pos:end="47:22">return <expr pos:start="47:20" pos:end="47:21"><operator pos:start="47:20" pos:end="47:20">-</operator><literal type="number" pos:start="47:21" pos:end="47:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="53:9" pos:end="57:9"><if pos:start="53:9" pos:end="57:9">if <condition pos:start="53:12" pos:end="53:36">(<expr pos:start="53:13" pos:end="53:35"><name pos:start="53:13" pos:end="53:22">phdr_index</name> <operator pos:start="53:24" pos:end="53:25">&gt;=</operator> <name pos:start="53:27" pos:end="53:35">max_index</name></expr>)</condition> <block pos:start="53:38" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:18">

            <break pos:start="55:13" pos:end="55:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>



    <return pos:start="63:5" pos:end="63:13">return <expr pos:start="63:12" pos:end="63:12"><literal type="number" pos:start="63:12" pos:end="63:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
