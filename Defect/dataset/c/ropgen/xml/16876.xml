<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16876.c" pos:tabs="8"><function pos:start="1:1" pos:end="137:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">xen_init_pv</name><parameter_list pos:start="1:24" pos:end="1:46">(<parameter pos:start="1:25" pos:end="1:45"><decl pos:start="1:25" pos:end="1:45"><type pos:start="1:25" pos:end="1:38"><name pos:start="1:25" pos:end="1:36">MachineState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:45">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="137:1">{<block_content pos:start="5:5" pos:end="135:32">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">DriveInfo</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:43">/* Initialize backend core &amp; drivers */</comment>

    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:27">(<expr pos:start="13:9" pos:end="13:26"><call pos:start="13:9" pos:end="13:21"><name pos:start="13:9" pos:end="13:19">xen_be_init</name><argument_list pos:start="13:20" pos:end="13:21">()</argument_list></call> <operator pos:start="13:23" pos:end="13:24">!=</operator> <literal type="number" pos:start="13:26" pos:end="13:26">0</literal></expr>)</condition> <block pos:start="13:29" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:16">

        <expr_stmt pos:start="15:9" pos:end="15:77"><expr pos:start="15:9" pos:end="15:76"><call pos:start="15:9" pos:end="15:76"><name pos:start="15:9" pos:end="15:15">fprintf</name><argument_list pos:start="15:16" pos:end="15:76">(<argument pos:start="15:17" pos:end="15:22"><expr pos:start="15:17" pos:end="15:22"><name pos:start="15:17" pos:end="15:22">stderr</name></expr></argument>, <argument pos:start="15:25" pos:end="15:61"><expr pos:start="15:25" pos:end="15:61"><literal type="string" pos:start="15:25" pos:end="15:61">"%s: xen backend core setup failed\n"</literal></expr></argument>, <argument pos:start="15:64" pos:end="15:75"><expr pos:start="15:64" pos:end="15:75"><name pos:start="15:64" pos:end="15:75">__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="17:9" pos:end="17:16"><expr pos:start="17:9" pos:end="17:15"><call pos:start="17:9" pos:end="17:15"><name pos:start="17:9" pos:end="17:12">exit</name><argument_list pos:start="17:13" pos:end="17:15">(<argument pos:start="17:14" pos:end="17:14"><expr pos:start="17:14" pos:end="17:14"><literal type="number" pos:start="17:14" pos:end="17:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="23:5" pos:end="73:5">switch <condition pos:start="23:12" pos:end="23:21">(<expr pos:start="23:13" pos:end="23:20"><name pos:start="23:13" pos:end="23:20">xen_mode</name></expr>)</condition> <block pos:start="23:23" pos:end="73:5">{<block_content pos:start="25:5" pos:end="71:14">

    <case pos:start="25:5" pos:end="25:20">case <expr pos:start="25:10" pos:end="25:19"><name pos:start="25:10" pos:end="25:19">XEN_ATTACH</name></expr>:</case>

        <comment type="block" pos:start="27:9" pos:end="27:52">/* nothing to do, xend handles everything */</comment>

        <break pos:start="29:9" pos:end="32:0">break;</break>

<cpp:ifdef pos:start="31:1" pos:end="31:33">#<cpp:directive pos:start="31:2" pos:end="31:6">ifdef</cpp:directive> <name pos:start="31:8" pos:end="31:33">CONFIG_XEN_PV_DOMAIN_BUILD</name></cpp:ifdef>

    <case pos:start="33:5" pos:end="33:20">case <expr pos:start="33:10" pos:end="33:19"><name pos:start="33:10" pos:end="33:19">XEN_CREATE</name></expr>:</case> <block pos:start="33:22" pos:end="56:0">{<block_content pos:start="35:9" pos:end="51:14">

        <decl_stmt pos:start="35:9" pos:end="35:63"><decl pos:start="35:9" pos:end="35:62"><type pos:start="35:9" pos:end="35:20"><specifier pos:start="35:9" pos:end="35:13">const</specifier> <name pos:start="35:15" pos:end="35:18">char</name> <modifier pos:start="35:20" pos:end="35:20">*</modifier></type><name pos:start="35:21" pos:end="35:35">kernel_filename</name> <init pos:start="35:37" pos:end="35:62">= <expr pos:start="35:39" pos:end="35:62"><name pos:start="35:39" pos:end="35:62"><name pos:start="35:39" pos:end="35:45">machine</name><operator pos:start="35:46" pos:end="35:47">-&gt;</operator><name pos:start="35:48" pos:end="35:62">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="37:9" pos:end="37:61"><decl pos:start="37:9" pos:end="37:60"><type pos:start="37:9" pos:end="37:20"><specifier pos:start="37:9" pos:end="37:13">const</specifier> <name pos:start="37:15" pos:end="37:18">char</name> <modifier pos:start="37:20" pos:end="37:20">*</modifier></type><name pos:start="37:21" pos:end="37:34">kernel_cmdline</name> <init pos:start="37:36" pos:end="37:60">= <expr pos:start="37:38" pos:end="37:60"><name pos:start="37:38" pos:end="37:60"><name pos:start="37:38" pos:end="37:44">machine</name><operator pos:start="37:45" pos:end="37:46">-&gt;</operator><name pos:start="37:47" pos:end="37:60">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="39:9" pos:end="39:63"><decl pos:start="39:9" pos:end="39:62"><type pos:start="39:9" pos:end="39:20"><specifier pos:start="39:9" pos:end="39:13">const</specifier> <name pos:start="39:15" pos:end="39:18">char</name> <modifier pos:start="39:20" pos:end="39:20">*</modifier></type><name pos:start="39:21" pos:end="39:35">initrd_filename</name> <init pos:start="39:37" pos:end="39:62">= <expr pos:start="39:39" pos:end="39:62"><name pos:start="39:39" pos:end="39:62"><name pos:start="39:39" pos:end="39:45">machine</name><operator pos:start="39:46" pos:end="39:47">-&gt;</operator><name pos:start="39:48" pos:end="39:62">initrd_filename</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="41:9" pos:end="49:9"><if pos:start="41:9" pos:end="49:9">if <condition pos:start="41:12" pos:end="43:52">(<expr pos:start="41:13" pos:end="43:51"><call pos:start="41:13" pos:end="43:47"><name pos:start="41:13" pos:end="41:31">xen_domain_build_pv</name><argument_list pos:start="41:32" pos:end="43:47">(<argument pos:start="41:33" pos:end="41:47"><expr pos:start="41:33" pos:end="41:47"><name pos:start="41:33" pos:end="41:47">kernel_filename</name></expr></argument>, <argument pos:start="41:50" pos:end="41:64"><expr pos:start="41:50" pos:end="41:64"><name pos:start="41:50" pos:end="41:64">initrd_filename</name></expr></argument>,

                                <argument pos:start="43:33" pos:end="43:46"><expr pos:start="43:33" pos:end="43:46"><name pos:start="43:33" pos:end="43:46">kernel_cmdline</name></expr></argument>)</argument_list></call> <operator pos:start="43:49" pos:end="43:49">&lt;</operator> <literal type="number" pos:start="43:51" pos:end="43:51">0</literal></expr>)</condition> <block pos:start="43:54" pos:end="49:9">{<block_content pos:start="45:13" pos:end="47:20">

            <expr_stmt pos:start="45:13" pos:end="45:63"><expr pos:start="45:13" pos:end="45:62"><call pos:start="45:13" pos:end="45:62"><name pos:start="45:13" pos:end="45:19">fprintf</name><argument_list pos:start="45:20" pos:end="45:62">(<argument pos:start="45:21" pos:end="45:26"><expr pos:start="45:21" pos:end="45:26"><name pos:start="45:21" pos:end="45:26">stderr</name></expr></argument>, <argument pos:start="45:29" pos:end="45:61"><expr pos:start="45:29" pos:end="45:61"><literal type="string" pos:start="45:29" pos:end="45:61">"xen pv domain creation failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:20"><expr pos:start="47:13" pos:end="47:19"><call pos:start="47:13" pos:end="47:19"><name pos:start="47:13" pos:end="47:16">exit</name><argument_list pos:start="47:17" pos:end="47:19">(<argument pos:start="47:18" pos:end="47:18"><expr pos:start="47:18" pos:end="47:18"><literal type="number" pos:start="47:18" pos:end="47:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="51:9" pos:end="51:14">break;</break>

    </block_content>}</block>

<cpp:endif pos:start="55:1" pos:end="55:6">#<cpp:directive pos:start="55:2" pos:end="55:6">endif</cpp:directive></cpp:endif>

    <case pos:start="57:5" pos:end="57:21">case <expr pos:start="57:10" pos:end="57:20"><name pos:start="57:10" pos:end="57:20">XEN_EMULATE</name></expr>:</case>

        <expr_stmt pos:start="59:9" pos:end="59:65"><expr pos:start="59:9" pos:end="59:64"><call pos:start="59:9" pos:end="59:64"><name pos:start="59:9" pos:end="59:15">fprintf</name><argument_list pos:start="59:16" pos:end="59:64">(<argument pos:start="59:17" pos:end="59:22"><expr pos:start="59:17" pos:end="59:22"><name pos:start="59:17" pos:end="59:22">stderr</name></expr></argument>, <argument pos:start="59:25" pos:end="59:63"><expr pos:start="59:25" pos:end="59:63"><literal type="string" pos:start="59:25" pos:end="59:63">"xen emulation not implemented (yet)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:16"><expr pos:start="61:9" pos:end="61:15"><call pos:start="61:9" pos:end="61:15"><name pos:start="61:9" pos:end="61:12">exit</name><argument_list pos:start="61:13" pos:end="61:15">(<argument pos:start="61:14" pos:end="61:14"><expr pos:start="61:14" pos:end="61:14"><literal type="number" pos:start="61:14" pos:end="61:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="63:9" pos:end="63:14">break;</break>

    <default pos:start="65:5" pos:end="65:12">default:</default>

        <expr_stmt pos:start="67:9" pos:end="67:61"><expr pos:start="67:9" pos:end="67:60"><call pos:start="67:9" pos:end="67:60"><name pos:start="67:9" pos:end="67:15">fprintf</name><argument_list pos:start="67:16" pos:end="67:60">(<argument pos:start="67:17" pos:end="67:22"><expr pos:start="67:17" pos:end="67:22"><name pos:start="67:17" pos:end="67:22">stderr</name></expr></argument>, <argument pos:start="67:25" pos:end="67:49"><expr pos:start="67:25" pos:end="67:49"><literal type="string" pos:start="67:25" pos:end="67:49">"unhandled xen_mode %d\n"</literal></expr></argument>, <argument pos:start="67:52" pos:end="67:59"><expr pos:start="67:52" pos:end="67:59"><name pos:start="67:52" pos:end="67:59">xen_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:16"><expr pos:start="69:9" pos:end="69:15"><call pos:start="69:9" pos:end="69:15"><name pos:start="69:9" pos:end="69:12">exit</name><argument_list pos:start="69:13" pos:end="69:15">(<argument pos:start="69:14" pos:end="69:14"><expr pos:start="69:14" pos:end="69:14"><literal type="number" pos:start="69:14" pos:end="69:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="71:9" pos:end="71:14">break;</break>

    </block_content>}</block></switch>



    <expr_stmt pos:start="77:5" pos:end="77:29"><expr pos:start="77:5" pos:end="77:28"><call pos:start="77:5" pos:end="77:28"><name pos:start="77:5" pos:end="77:26">xen_be_register_common</name><argument_list pos:start="77:27" pos:end="77:28">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:49"><expr pos:start="79:5" pos:end="79:48"><call pos:start="79:5" pos:end="79:48"><name pos:start="79:5" pos:end="79:19">xen_be_register</name><argument_list pos:start="79:20" pos:end="79:48">(<argument pos:start="79:21" pos:end="79:25"><expr pos:start="79:21" pos:end="79:25"><literal type="string" pos:start="79:21" pos:end="79:25">"vfb"</literal></expr></argument>, <argument pos:start="79:28" pos:end="79:47"><expr pos:start="79:28" pos:end="79:47"><operator pos:start="79:28" pos:end="79:28">&amp;</operator><name pos:start="79:29" pos:end="79:47">xen_framebuffer_ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:45"><expr pos:start="81:5" pos:end="81:44"><call pos:start="81:5" pos:end="81:44"><name pos:start="81:5" pos:end="81:19">xen_be_register</name><argument_list pos:start="81:20" pos:end="81:44">(<argument pos:start="81:21" pos:end="81:26"><expr pos:start="81:21" pos:end="81:26"><literal type="string" pos:start="81:21" pos:end="81:26">"qnic"</literal></expr></argument>, <argument pos:start="81:29" pos:end="81:43"><expr pos:start="81:29" pos:end="81:43"><operator pos:start="81:29" pos:end="81:29">&amp;</operator><name pos:start="81:30" pos:end="81:43">xen_netdev_ops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="85:5" pos:end="85:31">/* configure framebuffer */</comment>

    <if_stmt pos:start="87:5" pos:end="93:5"><if pos:start="87:5" pos:end="93:5">if <condition pos:start="87:8" pos:end="87:22">(<expr pos:start="87:9" pos:end="87:21"><name pos:start="87:9" pos:end="87:21">xenfb_enabled</name></expr>)</condition> <block pos:start="87:24" pos:end="93:5">{<block_content pos:start="89:9" pos:end="91:31">

        <expr_stmt pos:start="89:9" pos:end="89:37"><expr pos:start="89:9" pos:end="89:36"><call pos:start="89:9" pos:end="89:36"><name pos:start="89:9" pos:end="89:26">xen_config_dev_vfb</name><argument_list pos:start="89:27" pos:end="89:36">(<argument pos:start="89:28" pos:end="89:28"><expr pos:start="89:28" pos:end="89:28"><literal type="number" pos:start="89:28" pos:end="89:28">0</literal></expr></argument>, <argument pos:start="89:31" pos:end="89:35"><expr pos:start="89:31" pos:end="89:35"><literal type="string" pos:start="89:31" pos:end="89:35">"vnc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:31"><expr pos:start="91:9" pos:end="91:30"><call pos:start="91:9" pos:end="91:30"><name pos:start="91:9" pos:end="91:27">xen_config_dev_vkbd</name><argument_list pos:start="91:28" pos:end="91:30">(<argument pos:start="91:29" pos:end="91:29"><expr pos:start="91:29" pos:end="91:29"><literal type="number" pos:start="91:29" pos:end="91:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="97:5" pos:end="97:25">/* configure disks */</comment>

    <for pos:start="99:5" pos:end="109:5">for <control pos:start="99:9" pos:end="99:28">(<init pos:start="99:10" pos:end="99:15"><expr pos:start="99:10" pos:end="99:14"><name pos:start="99:10" pos:end="99:10">i</name> <operator pos:start="99:12" pos:end="99:12">=</operator> <literal type="number" pos:start="99:14" pos:end="99:14">0</literal></expr>;</init> <condition pos:start="99:17" pos:end="99:23"><expr pos:start="99:17" pos:end="99:22"><name pos:start="99:17" pos:end="99:17">i</name> <operator pos:start="99:19" pos:end="99:19">&lt;</operator> <literal type="number" pos:start="99:21" pos:end="99:22">16</literal></expr>;</condition> <incr pos:start="99:25" pos:end="99:27"><expr pos:start="99:25" pos:end="99:27"><name pos:start="99:25" pos:end="99:25">i</name><operator pos:start="99:26" pos:end="99:27">++</operator></expr></incr>)</control> <block pos:start="99:30" pos:end="109:5">{<block_content pos:start="101:9" pos:end="107:34">

        <expr_stmt pos:start="101:9" pos:end="101:40"><expr pos:start="101:9" pos:end="101:39"><name pos:start="101:9" pos:end="101:13">dinfo</name> <operator pos:start="101:15" pos:end="101:15">=</operator> <call pos:start="101:17" pos:end="101:39"><name pos:start="101:17" pos:end="101:25">drive_get</name><argument_list pos:start="101:26" pos:end="101:39">(<argument pos:start="101:27" pos:end="101:32"><expr pos:start="101:27" pos:end="101:32"><name pos:start="101:27" pos:end="101:32">IF_XEN</name></expr></argument>, <argument pos:start="101:35" pos:end="101:35"><expr pos:start="101:35" pos:end="101:35"><literal type="number" pos:start="101:35" pos:end="101:35">0</literal></expr></argument>, <argument pos:start="101:38" pos:end="101:38"><expr pos:start="101:38" pos:end="101:38"><name pos:start="101:38" pos:end="101:38">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="103:9" pos:end="105:21"><if pos:start="103:9" pos:end="105:21">if <condition pos:start="103:12" pos:end="103:19">(<expr pos:start="103:13" pos:end="103:18"><operator pos:start="103:13" pos:end="103:13">!</operator><name pos:start="103:14" pos:end="103:18">dinfo</name></expr>)</condition><block type="pseudo" pos:start="105:13" pos:end="105:21"><block_content pos:start="105:13" pos:end="105:21">

            <continue pos:start="105:13" pos:end="105:21">continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:34"><expr pos:start="107:9" pos:end="107:33"><call pos:start="107:9" pos:end="107:33"><name pos:start="107:9" pos:end="107:26">xen_config_dev_blk</name><argument_list pos:start="107:27" pos:end="107:33">(<argument pos:start="107:28" pos:end="107:32"><expr pos:start="107:28" pos:end="107:32"><name pos:start="107:28" pos:end="107:32">dinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="113:5" pos:end="113:24">/* configure nics */</comment>

    <for pos:start="115:5" pos:end="123:5">for <control pos:start="115:9" pos:end="115:33">(<init pos:start="115:10" pos:end="115:15"><expr pos:start="115:10" pos:end="115:14"><name pos:start="115:10" pos:end="115:10">i</name> <operator pos:start="115:12" pos:end="115:12">=</operator> <literal type="number" pos:start="115:14" pos:end="115:14">0</literal></expr>;</init> <condition pos:start="115:17" pos:end="115:28"><expr pos:start="115:17" pos:end="115:27"><name pos:start="115:17" pos:end="115:17">i</name> <operator pos:start="115:19" pos:end="115:19">&lt;</operator> <name pos:start="115:21" pos:end="115:27">nb_nics</name></expr>;</condition> <incr pos:start="115:30" pos:end="115:32"><expr pos:start="115:30" pos:end="115:32"><name pos:start="115:30" pos:end="115:30">i</name><operator pos:start="115:31" pos:end="115:32">++</operator></expr></incr>)</control> <block pos:start="115:35" pos:end="123:5">{<block_content pos:start="117:9" pos:end="121:41">

        <if_stmt pos:start="117:9" pos:end="119:21"><if pos:start="117:9" pos:end="119:21">if <condition pos:start="117:12" pos:end="117:72">(<expr pos:start="117:13" pos:end="117:71"><operator pos:start="117:13" pos:end="117:13">!</operator><name pos:start="117:14" pos:end="117:24"><name pos:start="117:14" pos:end="117:21">nd_table</name><index pos:start="117:22" pos:end="117:24">[<expr pos:start="117:23" pos:end="117:23"><name pos:start="117:23" pos:end="117:23">i</name></expr>]</index></name><operator pos:start="117:25" pos:end="117:25">.</operator><name pos:start="117:26" pos:end="117:30">model</name> <operator pos:start="117:32" pos:end="117:33">||</operator> <literal type="number" pos:start="117:35" pos:end="117:35">0</literal> <operator pos:start="117:37" pos:end="117:38">!=</operator> <call pos:start="117:40" pos:end="117:71"><name pos:start="117:40" pos:end="117:45">strcmp</name><argument_list pos:start="117:46" pos:end="117:71">(<argument pos:start="117:47" pos:end="117:63"><expr pos:start="117:47" pos:end="117:63"><name pos:start="117:47" pos:end="117:57"><name pos:start="117:47" pos:end="117:54">nd_table</name><index pos:start="117:55" pos:end="117:57">[<expr pos:start="117:56" pos:end="117:56"><name pos:start="117:56" pos:end="117:56">i</name></expr>]</index></name><operator pos:start="117:58" pos:end="117:58">.</operator><name pos:start="117:59" pos:end="117:63">model</name></expr></argument>, <argument pos:start="117:66" pos:end="117:70"><expr pos:start="117:66" pos:end="117:70"><literal type="string" pos:start="117:66" pos:end="117:70">"xen"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="119:13" pos:end="119:21"><block_content pos:start="119:13" pos:end="119:21">

            <continue pos:start="119:13" pos:end="119:21">continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:41"><expr pos:start="121:9" pos:end="121:40"><call pos:start="121:9" pos:end="121:40"><name pos:start="121:9" pos:end="121:26">xen_config_dev_nic</name><argument_list pos:start="121:27" pos:end="121:40">(<argument pos:start="121:28" pos:end="121:39"><expr pos:start="121:28" pos:end="121:39"><name pos:start="121:28" pos:end="121:35">nd_table</name> <operator pos:start="121:37" pos:end="121:37">+</operator> <name pos:start="121:39" pos:end="121:39">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="127:5" pos:end="127:29">/* config cleanup hook */</comment>

    <expr_stmt pos:start="129:5" pos:end="129:31"><expr pos:start="129:5" pos:end="129:30"><call pos:start="129:5" pos:end="129:30"><name pos:start="129:5" pos:end="129:10">atexit</name><argument_list pos:start="129:11" pos:end="129:30">(<argument pos:start="129:12" pos:end="129:29"><expr pos:start="129:12" pos:end="129:29"><name pos:start="129:12" pos:end="129:29">xen_config_cleanup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="133:5" pos:end="133:27">/* setup framebuffer */</comment>

    <expr_stmt pos:start="135:5" pos:end="135:32"><expr pos:start="135:5" pos:end="135:31"><call pos:start="135:5" pos:end="135:31"><name pos:start="135:5" pos:end="135:20">xen_init_display</name><argument_list pos:start="135:21" pos:end="135:31">(<argument pos:start="135:22" pos:end="135:30"><expr pos:start="135:22" pos:end="135:30"><name pos:start="135:22" pos:end="135:30">xen_domid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
