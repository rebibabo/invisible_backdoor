<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19192.c" pos:tabs="8"><function pos:start="1:1" pos:end="155:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">vfio_add_ext_cap</name><parameter_list pos:start="1:29" pos:end="1:49">(<parameter pos:start="1:30" pos:end="1:48"><decl pos:start="1:30" pos:end="1:48"><type pos:start="1:30" pos:end="1:44"><name pos:start="1:30" pos:end="1:42">VFIOPCIDevice</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:48">vdev</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="155:1">{<block_content pos:start="5:5" pos:end="153:11">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">PCIDevice</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:19">pdev</name> <init pos:start="5:21" pos:end="5:33">= <expr pos:start="5:23" pos:end="5:33"><operator pos:start="5:23" pos:end="5:23">&amp;</operator><name pos:start="5:24" pos:end="5:33"><name pos:start="5:24" pos:end="5:27">vdev</name><operator pos:start="5:28" pos:end="5:29">-&gt;</operator><name pos:start="5:30" pos:end="5:33">pdev</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:19">header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:32"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint16_t</name></type> <name pos:start="9:14" pos:end="9:19">cap_id</name></decl>, <decl pos:start="9:22" pos:end="9:25"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:22" pos:end="9:25">next</name></decl>, <decl pos:start="9:28" pos:end="9:31"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:28" pos:end="9:31">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type> <name pos:start="11:13" pos:end="11:19">cap_ver</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:19">config</name></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:75">/* Only add extended caps if we have them and the guest can see them */</comment>

    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="21:60">(<expr pos:start="19:9" pos:end="21:59"><operator pos:start="19:9" pos:end="19:9">!</operator><call pos:start="19:10" pos:end="19:29"><name pos:start="19:10" pos:end="19:23">pci_is_express</name><argument_list pos:start="19:24" pos:end="19:29">(<argument pos:start="19:25" pos:end="19:28"><expr pos:start="19:25" pos:end="19:28"><name pos:start="19:25" pos:end="19:28">pdev</name></expr></argument>)</argument_list></call> <operator pos:start="19:31" pos:end="19:32">||</operator> <operator pos:start="19:34" pos:end="19:34">!</operator><call pos:start="19:35" pos:end="19:63"><name pos:start="19:35" pos:end="19:52">pci_bus_is_express</name><argument_list pos:start="19:53" pos:end="19:63">(<argument pos:start="19:54" pos:end="19:62"><expr pos:start="19:54" pos:end="19:62"><name pos:start="19:54" pos:end="19:62"><name pos:start="19:54" pos:end="19:57">pdev</name><operator pos:start="19:58" pos:end="19:59">-&gt;</operator><name pos:start="19:60" pos:end="19:62">bus</name></name></expr></argument>)</argument_list></call> <operator pos:start="19:65" pos:end="19:66">||</operator>

        <operator pos:start="21:9" pos:end="21:9">!</operator><call pos:start="21:10" pos:end="21:59"><name pos:start="21:10" pos:end="21:21">pci_get_long</name><argument_list pos:start="21:22" pos:end="21:59">(<argument pos:start="21:23" pos:end="21:58"><expr pos:start="21:23" pos:end="21:58"><name pos:start="21:23" pos:end="21:34"><name pos:start="21:23" pos:end="21:26">pdev</name><operator pos:start="21:27" pos:end="21:28">-&gt;</operator><name pos:start="21:29" pos:end="21:34">config</name></name> <operator pos:start="21:36" pos:end="21:36">+</operator> <name pos:start="21:38" pos:end="21:58">PCI_CONFIG_SPACE_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:62" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:15">

        <return pos:start="23:9" pos:end="23:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="29:5" pos:end="39:7">/*

     * pcie_add_capability always inserts the new capability at the tail

     * of the chain.  Therefore to end up with a chain that matches the

     * physical device, we cache the config space to avoid overwriting

     * the original config space when we parse the extended capabilities.

     */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:55"><expr pos:start="41:5" pos:end="41:54"><name pos:start="41:5" pos:end="41:10">config</name> <operator pos:start="41:12" pos:end="41:12">=</operator> <call pos:start="41:14" pos:end="41:54"><name pos:start="41:14" pos:end="41:21">g_memdup</name><argument_list pos:start="41:22" pos:end="41:54">(<argument pos:start="41:23" pos:end="41:34"><expr pos:start="41:23" pos:end="41:34"><name pos:start="41:23" pos:end="41:34"><name pos:start="41:23" pos:end="41:26">pdev</name><operator pos:start="41:27" pos:end="41:28">-&gt;</operator><name pos:start="41:29" pos:end="41:34">config</name></name></expr></argument>, <argument pos:start="41:37" pos:end="41:53"><expr pos:start="41:37" pos:end="41:53"><name pos:start="41:37" pos:end="41:53"><name pos:start="41:37" pos:end="41:40">vdev</name><operator pos:start="41:41" pos:end="41:42">-&gt;</operator><name pos:start="41:43" pos:end="41:53">config_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="45:5" pos:end="71:7">/*

     * Extended capabilities are chained with each pointing to the next, so we

     * can drop anything other than the head of the chain simply by modifying

     * the previous next pointer.  For the head of the chain, we can modify the

     * capability ID to something that cannot match a valid capability.  ID

     * 0 is reserved for this since absence of capabilities is indicated by

     * 0 for the ID, version, AND next pointer.  However, pcie_add_capability()

     * uses ID 0 as reserved for list management and will incorrectly match and

     * assert if we attempt to pre-load the head of the chain with this ID.

     * Use ID 0xFFFF temporarily since it is also seems to be reserved in

     * part for identifying absence of capabilities in a root complex register

     * block.  If the ID still exists after adding capabilities, switch back to

     * zero.  We'll mark this entire first dword as emulated for this purpose.

     */</comment>

    <expr_stmt pos:start="73:5" pos:end="75:44"><expr pos:start="73:5" pos:end="75:43"><call pos:start="73:5" pos:end="75:43"><name pos:start="73:5" pos:end="73:16">pci_set_long</name><argument_list pos:start="73:17" pos:end="75:43">(<argument pos:start="73:18" pos:end="73:53"><expr pos:start="73:18" pos:end="73:53"><name pos:start="73:18" pos:end="73:29"><name pos:start="73:18" pos:end="73:21">pdev</name><operator pos:start="73:22" pos:end="73:23">-&gt;</operator><name pos:start="73:24" pos:end="73:29">config</name></name> <operator pos:start="73:31" pos:end="73:31">+</operator> <name pos:start="73:33" pos:end="73:53">PCI_CONFIG_SPACE_SIZE</name></expr></argument>,

                 <argument pos:start="75:18" pos:end="75:42"><expr pos:start="75:18" pos:end="75:42"><call pos:start="75:18" pos:end="75:42"><name pos:start="75:18" pos:end="75:28">PCI_EXT_CAP</name><argument_list pos:start="75:29" pos:end="75:42">(<argument pos:start="75:30" pos:end="75:35"><expr pos:start="75:30" pos:end="75:35"><literal type="number" pos:start="75:30" pos:end="75:35">0xFFFF</literal></expr></argument>, <argument pos:start="75:38" pos:end="75:38"><expr pos:start="75:38" pos:end="75:38"><literal type="number" pos:start="75:38" pos:end="75:38">0</literal></expr></argument>, <argument pos:start="75:41" pos:end="75:41"><expr pos:start="75:41" pos:end="75:41"><literal type="number" pos:start="75:41" pos:end="75:41">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:57"><expr pos:start="77:5" pos:end="77:56"><call pos:start="77:5" pos:end="77:56"><name pos:start="77:5" pos:end="77:16">pci_set_long</name><argument_list pos:start="77:17" pos:end="77:56">(<argument pos:start="77:18" pos:end="77:52"><expr pos:start="77:18" pos:end="77:52"><name pos:start="77:18" pos:end="77:28"><name pos:start="77:18" pos:end="77:21">pdev</name><operator pos:start="77:22" pos:end="77:23">-&gt;</operator><name pos:start="77:24" pos:end="77:28">wmask</name></name> <operator pos:start="77:30" pos:end="77:30">+</operator> <name pos:start="77:32" pos:end="77:52">PCI_CONFIG_SPACE_SIZE</name></expr></argument>, <argument pos:start="77:55" pos:end="77:55"><expr pos:start="77:55" pos:end="77:55"><literal type="number" pos:start="77:55" pos:end="77:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:73"><expr pos:start="79:5" pos:end="79:72"><call pos:start="79:5" pos:end="79:72"><name pos:start="79:5" pos:end="79:16">pci_set_long</name><argument_list pos:start="79:17" pos:end="79:72">(<argument pos:start="79:18" pos:end="79:67"><expr pos:start="79:18" pos:end="79:67"><name pos:start="79:18" pos:end="79:43"><name pos:start="79:18" pos:end="79:21">vdev</name><operator pos:start="79:22" pos:end="79:23">-&gt;</operator><name pos:start="79:24" pos:end="79:43">emulated_config_bits</name></name> <operator pos:start="79:45" pos:end="79:45">+</operator> <name pos:start="79:47" pos:end="79:67">PCI_CONFIG_SPACE_SIZE</name></expr></argument>, <argument pos:start="79:70" pos:end="79:71"><expr pos:start="79:70" pos:end="79:71"><operator pos:start="79:70" pos:end="79:70">~</operator><literal type="number" pos:start="79:71" pos:end="79:71">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="83:5" pos:end="137:5">for <control pos:start="83:9" pos:end="85:62">(<init pos:start="83:10" pos:end="83:38"><expr pos:start="83:10" pos:end="83:37"><name pos:start="83:10" pos:end="83:13">next</name> <operator pos:start="83:15" pos:end="83:15">=</operator> <name pos:start="83:17" pos:end="83:37">PCI_CONFIG_SPACE_SIZE</name></expr>;</init> <condition pos:start="83:40" pos:end="83:44"><expr pos:start="83:40" pos:end="83:43"><name pos:start="83:40" pos:end="83:43">next</name></expr>;</condition>

         <incr pos:start="85:10" pos:end="85:61"><expr pos:start="85:10" pos:end="85:61"><name pos:start="85:10" pos:end="85:13">next</name> <operator pos:start="85:15" pos:end="85:15">=</operator> <call pos:start="85:17" pos:end="85:61"><name pos:start="85:17" pos:end="85:32">PCI_EXT_CAP_NEXT</name><argument_list pos:start="85:33" pos:end="85:61">(<argument pos:start="85:34" pos:end="85:60"><expr pos:start="85:34" pos:end="85:60"><call pos:start="85:34" pos:end="85:60"><name pos:start="85:34" pos:end="85:45">pci_get_long</name><argument_list pos:start="85:46" pos:end="85:60">(<argument pos:start="85:47" pos:end="85:59"><expr pos:start="85:47" pos:end="85:59"><name pos:start="85:47" pos:end="85:52">config</name> <operator pos:start="85:54" pos:end="85:54">+</operator> <name pos:start="85:56" pos:end="85:59">next</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></incr>)</control> <block pos:start="85:64" pos:end="137:5">{<block_content pos:start="87:9" pos:end="133:9">

        <expr_stmt pos:start="87:9" pos:end="87:45"><expr pos:start="87:9" pos:end="87:44"><name pos:start="87:9" pos:end="87:14">header</name> <operator pos:start="87:16" pos:end="87:16">=</operator> <call pos:start="87:18" pos:end="87:44"><name pos:start="87:18" pos:end="87:29">pci_get_long</name><argument_list pos:start="87:30" pos:end="87:44">(<argument pos:start="87:31" pos:end="87:43"><expr pos:start="87:31" pos:end="87:43"><name pos:start="87:31" pos:end="87:36">config</name> <operator pos:start="87:38" pos:end="87:38">+</operator> <name pos:start="87:40" pos:end="87:43">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:40"><expr pos:start="89:9" pos:end="89:39"><name pos:start="89:9" pos:end="89:14">cap_id</name> <operator pos:start="89:16" pos:end="89:16">=</operator> <call pos:start="89:18" pos:end="89:39"><name pos:start="89:18" pos:end="89:31">PCI_EXT_CAP_ID</name><argument_list pos:start="89:32" pos:end="89:39">(<argument pos:start="89:33" pos:end="89:38"><expr pos:start="89:33" pos:end="89:38"><name pos:start="89:33" pos:end="89:38">header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:42"><expr pos:start="91:9" pos:end="91:41"><name pos:start="91:9" pos:end="91:15">cap_ver</name> <operator pos:start="91:17" pos:end="91:17">=</operator> <call pos:start="91:19" pos:end="91:41"><name pos:start="91:19" pos:end="91:33">PCI_EXT_CAP_VER</name><argument_list pos:start="91:34" pos:end="91:41">(<argument pos:start="91:35" pos:end="91:40"><expr pos:start="91:35" pos:end="91:40"><name pos:start="91:35" pos:end="91:40">header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="95:9" pos:end="105:11">/*

         * If it becomes important to configure extended capabilities to their

         * actual size, use this as the default when it's something we don't

         * recognize. Since QEMU doesn't actually handle many of the config

         * accesses, exact size doesn't seem worthwhile.

         */</comment>

        <expr_stmt pos:start="107:9" pos:end="107:51"><expr pos:start="107:9" pos:end="107:50"><name pos:start="107:9" pos:end="107:12">size</name> <operator pos:start="107:14" pos:end="107:14">=</operator> <call pos:start="107:16" pos:end="107:50"><name pos:start="107:16" pos:end="107:36">vfio_ext_cap_max_size</name><argument_list pos:start="107:37" pos:end="107:50">(<argument pos:start="107:38" pos:end="107:43"><expr pos:start="107:38" pos:end="107:43"><name pos:start="107:38" pos:end="107:43">config</name></expr></argument>, <argument pos:start="107:46" pos:end="107:49"><expr pos:start="107:46" pos:end="107:49"><name pos:start="107:46" pos:end="107:49">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="111:9" pos:end="111:71">/* Use emulated next pointer to allow dropping extended caps */</comment>

        <expr_stmt pos:start="113:9" pos:end="115:58"><expr pos:start="113:9" pos:end="115:57"><call pos:start="113:9" pos:end="115:57"><name pos:start="113:9" pos:end="113:34">pci_long_test_and_set_mask</name><argument_list pos:start="113:35" pos:end="115:57">(<argument pos:start="113:36" pos:end="113:68"><expr pos:start="113:36" pos:end="113:68"><name pos:start="113:36" pos:end="113:61"><name pos:start="113:36" pos:end="113:39">vdev</name><operator pos:start="113:40" pos:end="113:41">-&gt;</operator><name pos:start="113:42" pos:end="113:61">emulated_config_bits</name></name> <operator pos:start="113:63" pos:end="113:63">+</operator> <name pos:start="113:65" pos:end="113:68">next</name></expr></argument>,

                                   <argument pos:start="115:36" pos:end="115:56"><expr pos:start="115:36" pos:end="115:56"><name pos:start="115:36" pos:end="115:56">PCI_EXT_CAP_NEXT_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <switch pos:start="119:9" pos:end="133:9">switch <condition pos:start="119:16" pos:end="119:23">(<expr pos:start="119:17" pos:end="119:22"><name pos:start="119:17" pos:end="119:22">cap_id</name></expr>)</condition> <block pos:start="119:25" pos:end="133:9">{<block_content pos:start="121:9" pos:end="131:67">

        <case pos:start="121:9" pos:end="121:34">case <expr pos:start="121:14" pos:end="121:33"><name pos:start="121:14" pos:end="121:33">PCI_EXT_CAP_ID_SRIOV</name></expr>:</case> <comment type="block" pos:start="121:36" pos:end="121:71">/* Read-only VF BARs confuse OVMF */</comment>

        <case pos:start="123:9" pos:end="123:32">case <expr pos:start="123:14" pos:end="123:31"><name pos:start="123:14" pos:end="123:31">PCI_EXT_CAP_ID_ARI</name></expr>:</case> <comment type="block" pos:start="123:34" pos:end="123:77">/* XXX Needs next function virtualization */</comment>

            <expr_stmt pos:start="125:13" pos:end="125:78"><expr pos:start="125:13" pos:end="125:77"><call pos:start="125:13" pos:end="125:77"><name pos:start="125:13" pos:end="125:42">trace_vfio_add_ext_cap_dropped</name><argument_list pos:start="125:43" pos:end="125:77">(<argument pos:start="125:44" pos:end="125:62"><expr pos:start="125:44" pos:end="125:62"><name pos:start="125:44" pos:end="125:62"><name pos:start="125:44" pos:end="125:47">vdev</name><operator pos:start="125:48" pos:end="125:49">-&gt;</operator><name pos:start="125:50" pos:end="125:57">vbasedev</name><operator pos:start="125:58" pos:end="125:58">.</operator><name pos:start="125:59" pos:end="125:62">name</name></name></expr></argument>, <argument pos:start="125:65" pos:end="125:70"><expr pos:start="125:65" pos:end="125:70"><name pos:start="125:65" pos:end="125:70">cap_id</name></expr></argument>, <argument pos:start="125:73" pos:end="125:76"><expr pos:start="125:73" pos:end="125:76"><name pos:start="125:73" pos:end="125:76">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="127:13" pos:end="127:18">break;</break>

        <default pos:start="129:9" pos:end="129:16">default:</default>

            <expr_stmt pos:start="131:13" pos:end="131:67"><expr pos:start="131:13" pos:end="131:66"><call pos:start="131:13" pos:end="131:66"><name pos:start="131:13" pos:end="131:31">pcie_add_capability</name><argument_list pos:start="131:32" pos:end="131:66">(<argument pos:start="131:33" pos:end="131:36"><expr pos:start="131:33" pos:end="131:36"><name pos:start="131:33" pos:end="131:36">pdev</name></expr></argument>, <argument pos:start="131:39" pos:end="131:44"><expr pos:start="131:39" pos:end="131:44"><name pos:start="131:39" pos:end="131:44">cap_id</name></expr></argument>, <argument pos:start="131:47" pos:end="131:53"><expr pos:start="131:47" pos:end="131:53"><name pos:start="131:47" pos:end="131:53">cap_ver</name></expr></argument>, <argument pos:start="131:56" pos:end="131:59"><expr pos:start="131:56" pos:end="131:59"><name pos:start="131:56" pos:end="131:59">next</name></expr></argument>, <argument pos:start="131:62" pos:end="131:65"><expr pos:start="131:62" pos:end="131:65"><name pos:start="131:62" pos:end="131:65">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>



    </block_content>}</block></for>



    <comment type="block" pos:start="141:5" pos:end="141:44">/* Cleanup chain head ID if necessary */</comment>

    <if_stmt pos:start="143:5" pos:end="147:5"><if pos:start="143:5" pos:end="147:5">if <condition pos:start="143:8" pos:end="143:69">(<expr pos:start="143:9" pos:end="143:68"><call pos:start="143:9" pos:end="143:58"><name pos:start="143:9" pos:end="143:20">pci_get_word</name><argument_list pos:start="143:21" pos:end="143:58">(<argument pos:start="143:22" pos:end="143:57"><expr pos:start="143:22" pos:end="143:57"><name pos:start="143:22" pos:end="143:33"><name pos:start="143:22" pos:end="143:25">pdev</name><operator pos:start="143:26" pos:end="143:27">-&gt;</operator><name pos:start="143:28" pos:end="143:33">config</name></name> <operator pos:start="143:35" pos:end="143:35">+</operator> <name pos:start="143:37" pos:end="143:57">PCI_CONFIG_SPACE_SIZE</name></expr></argument>)</argument_list></call> <operator pos:start="143:60" pos:end="143:61">==</operator> <literal type="number" pos:start="143:63" pos:end="143:68">0xFFFF</literal></expr>)</condition> <block pos:start="143:71" pos:end="147:5">{<block_content pos:start="145:9" pos:end="145:62">

        <expr_stmt pos:start="145:9" pos:end="145:62"><expr pos:start="145:9" pos:end="145:61"><call pos:start="145:9" pos:end="145:61"><name pos:start="145:9" pos:end="145:20">pci_set_word</name><argument_list pos:start="145:21" pos:end="145:61">(<argument pos:start="145:22" pos:end="145:57"><expr pos:start="145:22" pos:end="145:57"><name pos:start="145:22" pos:end="145:33"><name pos:start="145:22" pos:end="145:25">pdev</name><operator pos:start="145:26" pos:end="145:27">-&gt;</operator><name pos:start="145:28" pos:end="145:33">config</name></name> <operator pos:start="145:35" pos:end="145:35">+</operator> <name pos:start="145:37" pos:end="145:57">PCI_CONFIG_SPACE_SIZE</name></expr></argument>, <argument pos:start="145:60" pos:end="145:60"><expr pos:start="145:60" pos:end="145:60"><literal type="number" pos:start="145:60" pos:end="145:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="151:5" pos:end="151:19"><expr pos:start="151:5" pos:end="151:18"><call pos:start="151:5" pos:end="151:18"><name pos:start="151:5" pos:end="151:10">g_free</name><argument_list pos:start="151:11" pos:end="151:18">(<argument pos:start="151:12" pos:end="151:17"><expr pos:start="151:12" pos:end="151:17"><name pos:start="151:12" pos:end="151:17">config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="153:5" pos:end="153:11">return;</return>

</block_content>}</block></function>
</unit>
