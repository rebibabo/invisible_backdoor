<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10981.c" pos:tabs="8"><function pos:start="1:1" pos:end="163:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">get_codec_data</name><parameter_list pos:start="1:26" pos:end="3:50">(<parameter pos:start="1:27" pos:end="1:41"><decl pos:start="1:27" pos:end="1:41"><type pos:start="1:27" pos:end="1:41"><name pos:start="1:27" pos:end="1:37">AVIOContext</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:41">pb</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:56"><decl pos:start="1:44" pos:end="1:56"><type pos:start="1:44" pos:end="1:56"><name pos:start="1:44" pos:end="1:51">AVStream</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:56">vst</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:39"><decl pos:start="3:27" pos:end="3:39"><type pos:start="3:27" pos:end="3:39"><name pos:start="3:27" pos:end="3:34">AVStream</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:39">ast</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:49"><decl pos:start="3:42" pos:end="3:49"><type pos:start="3:42" pos:end="3:49"><name pos:start="3:42" pos:end="3:44">int</name></type> <name pos:start="3:46" pos:end="3:49">myth</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="163:1">{<block_content pos:start="7:5" pos:end="161:13">

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:17">nuv_frametype</name></type> <name pos:start="7:19" pos:end="7:27">frametype</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="13:17"><if pos:start="11:5" pos:end="13:17">if <condition pos:start="11:8" pos:end="11:22">(<expr pos:start="11:9" pos:end="11:21"><operator pos:start="11:9" pos:end="11:9">!</operator><name pos:start="11:10" pos:end="11:12">vst</name> <operator pos:start="11:14" pos:end="11:15">&amp;&amp;</operator> <operator pos:start="11:17" pos:end="11:17">!</operator><name pos:start="11:18" pos:end="11:21">myth</name></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="13:17"><block_content pos:start="13:9" pos:end="13:17">

        <return pos:start="13:9" pos:end="13:17">return <expr pos:start="13:16" pos:end="13:16"><literal type="number" pos:start="13:16" pos:end="13:16">1</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="line" pos:start="13:19" pos:end="13:41">// no codec data needed</comment>

    <while pos:start="15:5" pos:end="157:5">while <condition pos:start="15:11" pos:end="15:26">(<expr pos:start="15:12" pos:end="15:25"><operator pos:start="15:12" pos:end="15:12">!</operator><call pos:start="15:13" pos:end="15:25"><name pos:start="15:13" pos:end="15:21">avio_feof</name><argument_list pos:start="15:22" pos:end="15:25">(<argument pos:start="15:23" pos:end="15:24"><expr pos:start="15:23" pos:end="15:24"><name pos:start="15:23" pos:end="15:24">pb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="15:28" pos:end="157:5">{<block_content pos:start="17:9" pos:end="155:28">

        <decl_stmt pos:start="17:9" pos:end="17:26"><decl pos:start="17:9" pos:end="17:16"><type pos:start="17:9" pos:end="17:11"><name pos:start="17:9" pos:end="17:11">int</name></type> <name pos:start="17:13" pos:end="17:16">size</name></decl>, <decl pos:start="17:19" pos:end="17:25"><type ref="prev" pos:start="17:9" pos:end="17:11"/><name pos:start="17:19" pos:end="17:25">subtype</name></decl>;</decl_stmt>



        <expr_stmt pos:start="21:9" pos:end="21:32"><expr pos:start="21:9" pos:end="21:31"><name pos:start="21:9" pos:end="21:17">frametype</name> <operator pos:start="21:19" pos:end="21:19">=</operator> <call pos:start="21:21" pos:end="21:31"><name pos:start="21:21" pos:end="21:27">avio_r8</name><argument_list pos:start="21:28" pos:end="21:31">(<argument pos:start="21:29" pos:end="21:30"><expr pos:start="21:29" pos:end="21:30"><name pos:start="21:29" pos:end="21:30">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="23:9" pos:end="153:9">switch <condition pos:start="23:16" pos:end="23:26">(<expr pos:start="23:17" pos:end="23:25"><name pos:start="23:17" pos:end="23:25">frametype</name></expr>)</condition> <block pos:start="23:28" pos:end="153:9">{<block_content pos:start="25:9" pos:end="151:18">

        <case pos:start="25:9" pos:end="25:27">case <expr pos:start="25:14" pos:end="25:26"><name pos:start="25:14" pos:end="25:26">NUV_EXTRADATA</name></expr>:</case>

            <expr_stmt pos:start="27:13" pos:end="27:34"><expr pos:start="27:13" pos:end="27:33"><name pos:start="27:13" pos:end="27:19">subtype</name> <operator pos:start="27:21" pos:end="27:21">=</operator> <call pos:start="27:23" pos:end="27:33"><name pos:start="27:23" pos:end="27:29">avio_r8</name><argument_list pos:start="27:30" pos:end="27:33">(<argument pos:start="27:31" pos:end="27:32"><expr pos:start="27:31" pos:end="27:32"><name pos:start="27:31" pos:end="27:32">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="29:13" pos:end="29:29"><expr pos:start="29:13" pos:end="29:28"><call pos:start="29:13" pos:end="29:28"><name pos:start="29:13" pos:end="29:21">avio_skip</name><argument_list pos:start="29:22" pos:end="29:28">(<argument pos:start="29:23" pos:end="29:24"><expr pos:start="29:23" pos:end="29:24"><name pos:start="29:23" pos:end="29:24">pb</name></expr></argument>, <argument pos:start="29:27" pos:end="29:27"><expr pos:start="29:27" pos:end="29:27"><literal type="number" pos:start="29:27" pos:end="29:27">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="31:13" pos:end="31:42"><expr pos:start="31:13" pos:end="31:41"><name pos:start="31:13" pos:end="31:16">size</name> <operator pos:start="31:18" pos:end="31:18">=</operator> <call pos:start="31:20" pos:end="31:41"><name pos:start="31:20" pos:end="31:26">PKTSIZE</name><argument_list pos:start="31:27" pos:end="31:41">(<argument pos:start="31:28" pos:end="31:40"><expr pos:start="31:28" pos:end="31:40"><call pos:start="31:28" pos:end="31:40"><name pos:start="31:28" pos:end="31:36">avio_rl32</name><argument_list pos:start="31:37" pos:end="31:40">(<argument pos:start="31:38" pos:end="31:39"><expr pos:start="31:38" pos:end="31:39"><name pos:start="31:38" pos:end="31:39">pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="33:13" pos:end="53:13"><if pos:start="33:13" pos:end="53:13">if <condition pos:start="33:16" pos:end="33:38">(<expr pos:start="33:17" pos:end="33:37"><name pos:start="33:17" pos:end="33:19">vst</name> <operator pos:start="33:21" pos:end="33:22">&amp;&amp;</operator> <name pos:start="33:24" pos:end="33:30">subtype</name> <operator pos:start="33:32" pos:end="33:33">==</operator> <literal type="char" pos:start="33:35" pos:end="33:37">'R'</literal></expr>)</condition> <block pos:start="33:40" pos:end="53:13">{<block_content pos:start="35:17" pos:end="51:29">

                <if_stmt pos:start="35:17" pos:end="41:17"><if pos:start="35:17" pos:end="41:17">if <condition pos:start="35:20" pos:end="35:45">(<expr pos:start="35:21" pos:end="35:44"><name pos:start="35:21" pos:end="35:44"><name pos:start="35:21" pos:end="35:23">vst</name><operator pos:start="35:24" pos:end="35:25">-&gt;</operator><name pos:start="35:26" pos:end="35:33">codecpar</name><operator pos:start="35:34" pos:end="35:35">-&gt;</operator><name pos:start="35:36" pos:end="35:44">extradata</name></name></expr>)</condition> <block pos:start="35:47" pos:end="41:17">{<block_content pos:start="37:21" pos:end="39:54">

                    <expr_stmt pos:start="37:21" pos:end="37:56"><expr pos:start="37:21" pos:end="37:55"><call pos:start="37:21" pos:end="37:55"><name pos:start="37:21" pos:end="37:28">av_freep</name><argument_list pos:start="37:29" pos:end="37:55">(<argument pos:start="37:30" pos:end="37:54"><expr pos:start="37:30" pos:end="37:54"><operator pos:start="37:30" pos:end="37:30">&amp;</operator><name pos:start="37:31" pos:end="37:54"><name pos:start="37:31" pos:end="37:33">vst</name><operator pos:start="37:34" pos:end="37:35">-&gt;</operator><name pos:start="37:36" pos:end="37:43">codecpar</name><operator pos:start="37:44" pos:end="37:45">-&gt;</operator><name pos:start="37:46" pos:end="37:54">extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="39:21" pos:end="39:54"><expr pos:start="39:21" pos:end="39:53"><name pos:start="39:21" pos:end="39:49"><name pos:start="39:21" pos:end="39:23">vst</name><operator pos:start="39:24" pos:end="39:25">-&gt;</operator><name pos:start="39:26" pos:end="39:33">codecpar</name><operator pos:start="39:34" pos:end="39:35">-&gt;</operator><name pos:start="39:36" pos:end="39:49">extradata_size</name></name> <operator pos:start="39:51" pos:end="39:51">=</operator> <literal type="number" pos:start="39:53" pos:end="39:53">0</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="43:17" pos:end="45:43"><if pos:start="43:17" pos:end="45:43">if <condition pos:start="43:20" pos:end="43:72">(<expr pos:start="43:21" pos:end="43:71"><call pos:start="43:21" pos:end="43:67"><name pos:start="43:21" pos:end="43:36">ff_get_extradata</name><argument_list pos:start="43:37" pos:end="43:67">(<argument pos:start="43:38" pos:end="43:41"><expr pos:start="43:38" pos:end="43:41"><name pos:start="43:38" pos:end="43:41">NULL</name></expr></argument>, <argument pos:start="43:44" pos:end="43:56"><expr pos:start="43:44" pos:end="43:56"><name pos:start="43:44" pos:end="43:56"><name pos:start="43:44" pos:end="43:46">vst</name><operator pos:start="43:47" pos:end="43:48">-&gt;</operator><name pos:start="43:49" pos:end="43:56">codecpar</name></name></expr></argument>, <argument pos:start="43:59" pos:end="43:60"><expr pos:start="43:59" pos:end="43:60"><name pos:start="43:59" pos:end="43:60">pb</name></expr></argument>, <argument pos:start="43:63" pos:end="43:66"><expr pos:start="43:63" pos:end="43:66"><name pos:start="43:63" pos:end="43:66">size</name></expr></argument>)</argument_list></call> <operator pos:start="43:69" pos:end="43:69">&lt;</operator> <literal type="number" pos:start="43:71" pos:end="43:71">0</literal></expr>)</condition><block type="pseudo" pos:start="45:21" pos:end="45:43"><block_content pos:start="45:21" pos:end="45:43">

                    <return pos:start="45:21" pos:end="45:43">return <expr pos:start="45:28" pos:end="45:42"><call pos:start="45:28" pos:end="45:42"><name pos:start="45:28" pos:end="45:34">AVERROR</name><argument_list pos:start="45:35" pos:end="45:42">(<argument pos:start="45:36" pos:end="45:41"><expr pos:start="45:36" pos:end="45:41"><name pos:start="45:36" pos:end="45:41">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="47:17" pos:end="47:25"><expr pos:start="47:17" pos:end="47:24"><name pos:start="47:17" pos:end="47:20">size</name> <operator pos:start="47:22" pos:end="47:22">=</operator> <literal type="number" pos:start="47:24" pos:end="47:24">0</literal></expr>;</expr_stmt>

                <if_stmt pos:start="49:17" pos:end="51:29"><if pos:start="49:17" pos:end="51:29">if <condition pos:start="49:20" pos:end="49:26">(<expr pos:start="49:21" pos:end="49:25"><operator pos:start="49:21" pos:end="49:21">!</operator><name pos:start="49:22" pos:end="49:25">myth</name></expr>)</condition><block type="pseudo" pos:start="51:21" pos:end="51:29"><block_content pos:start="51:21" pos:end="51:29">

                    <return pos:start="51:21" pos:end="51:29">return <expr pos:start="51:28" pos:end="51:28"><literal type="number" pos:start="51:28" pos:end="51:28">0</literal></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="55:13" pos:end="55:18">break;</break>

        <case pos:start="57:9" pos:end="57:25">case <expr pos:start="57:14" pos:end="57:24"><name pos:start="57:14" pos:end="57:24">NUV_MYTHEXT</name></expr>:</case>

            <expr_stmt pos:start="59:13" pos:end="59:29"><expr pos:start="59:13" pos:end="59:28"><call pos:start="59:13" pos:end="59:28"><name pos:start="59:13" pos:end="59:21">avio_skip</name><argument_list pos:start="59:22" pos:end="59:28">(<argument pos:start="59:23" pos:end="59:24"><expr pos:start="59:23" pos:end="59:24"><name pos:start="59:23" pos:end="59:24">pb</name></expr></argument>, <argument pos:start="59:27" pos:end="59:27"><expr pos:start="59:27" pos:end="59:27"><literal type="number" pos:start="59:27" pos:end="59:27">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:42"><expr pos:start="61:13" pos:end="61:41"><name pos:start="61:13" pos:end="61:16">size</name> <operator pos:start="61:18" pos:end="61:18">=</operator> <call pos:start="61:20" pos:end="61:41"><name pos:start="61:20" pos:end="61:26">PKTSIZE</name><argument_list pos:start="61:27" pos:end="61:41">(<argument pos:start="61:28" pos:end="61:40"><expr pos:start="61:28" pos:end="61:40"><call pos:start="61:28" pos:end="61:40"><name pos:start="61:28" pos:end="61:36">avio_rl32</name><argument_list pos:start="61:37" pos:end="61:40">(<argument pos:start="61:38" pos:end="61:39"><expr pos:start="61:38" pos:end="61:39"><name pos:start="61:38" pos:end="61:39">pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="63:13" pos:end="65:22"><if pos:start="63:13" pos:end="65:22">if <condition pos:start="63:16" pos:end="63:32">(<expr pos:start="63:17" pos:end="63:31"><name pos:start="63:17" pos:end="63:20">size</name> <operator pos:start="63:22" pos:end="63:23">!=</operator> <literal type="number" pos:start="63:25" pos:end="63:27">128</literal> <operator pos:start="63:29" pos:end="63:29">*</operator> <literal type="number" pos:start="63:31" pos:end="63:31">4</literal></expr>)</condition><block type="pseudo" pos:start="65:17" pos:end="65:22"><block_content pos:start="65:17" pos:end="65:22">

                <break pos:start="65:17" pos:end="65:22">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:26"><expr pos:start="67:13" pos:end="67:25"><call pos:start="67:13" pos:end="67:25"><name pos:start="67:13" pos:end="67:21">avio_rl32</name><argument_list pos:start="67:22" pos:end="67:25">(<argument pos:start="67:23" pos:end="67:24"><expr pos:start="67:23" pos:end="67:24"><name pos:start="67:23" pos:end="67:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="67:28" pos:end="67:37">// version</comment>

            <if_stmt pos:start="69:13" pos:end="83:33"><if pos:start="69:13" pos:end="81:13">if <condition pos:start="69:16" pos:end="69:20">(<expr pos:start="69:17" pos:end="69:19"><name pos:start="69:17" pos:end="69:19">vst</name></expr>)</condition> <block pos:start="69:22" pos:end="81:13">{<block_content pos:start="71:17" pos:end="79:62">

                <expr_stmt pos:start="71:17" pos:end="71:57"><expr pos:start="71:17" pos:end="71:56"><name pos:start="71:17" pos:end="71:40"><name pos:start="71:17" pos:end="71:19">vst</name><operator pos:start="71:20" pos:end="71:21">-&gt;</operator><name pos:start="71:22" pos:end="71:29">codecpar</name><operator pos:start="71:30" pos:end="71:31">-&gt;</operator><name pos:start="71:32" pos:end="71:40">codec_tag</name></name> <operator pos:start="71:42" pos:end="71:42">=</operator> <call pos:start="71:44" pos:end="71:56"><name pos:start="71:44" pos:end="71:52">avio_rl32</name><argument_list pos:start="71:53" pos:end="71:56">(<argument pos:start="71:54" pos:end="71:55"><expr pos:start="71:54" pos:end="71:55"><name pos:start="71:54" pos:end="71:55">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="73:17" pos:end="75:81"><expr pos:start="73:17" pos:end="75:80"><name pos:start="73:17" pos:end="73:39"><name pos:start="73:17" pos:end="73:19">vst</name><operator pos:start="73:20" pos:end="73:21">-&gt;</operator><name pos:start="73:22" pos:end="73:29">codecpar</name><operator pos:start="73:30" pos:end="73:31">-&gt;</operator><name pos:start="73:32" pos:end="73:39">codec_id</name></name> <operator pos:start="73:41" pos:end="73:41">=</operator>

                    <call pos:start="75:21" pos:end="75:80"><name pos:start="75:21" pos:end="75:35">ff_codec_get_id</name><argument_list pos:start="75:36" pos:end="75:80">(<argument pos:start="75:37" pos:end="75:53"><expr pos:start="75:37" pos:end="75:53"><name pos:start="75:37" pos:end="75:53">ff_codec_bmp_tags</name></expr></argument>, <argument pos:start="75:56" pos:end="75:79"><expr pos:start="75:56" pos:end="75:79"><name pos:start="75:56" pos:end="75:79"><name pos:start="75:56" pos:end="75:58">vst</name><operator pos:start="75:59" pos:end="75:60">-&gt;</operator><name pos:start="75:61" pos:end="75:68">codecpar</name><operator pos:start="75:69" pos:end="75:70">-&gt;</operator><name pos:start="75:71" pos:end="75:79">codec_tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="77:17" pos:end="79:62"><if pos:start="77:17" pos:end="79:62">if <condition pos:start="77:20" pos:end="77:74">(<expr pos:start="77:21" pos:end="77:73"><name pos:start="77:21" pos:end="77:44"><name pos:start="77:21" pos:end="77:23">vst</name><operator pos:start="77:24" pos:end="77:25">-&gt;</operator><name pos:start="77:26" pos:end="77:33">codecpar</name><operator pos:start="77:34" pos:end="77:35">-&gt;</operator><name pos:start="77:36" pos:end="77:44">codec_tag</name></name> <operator pos:start="77:46" pos:end="77:47">==</operator> <call pos:start="77:49" pos:end="77:73"><name pos:start="77:49" pos:end="77:53">MKTAG</name><argument_list pos:start="77:54" pos:end="77:73">(<argument pos:start="77:55" pos:end="77:57"><expr pos:start="77:55" pos:end="77:57"><literal type="char" pos:start="77:55" pos:end="77:57">'R'</literal></expr></argument>, <argument pos:start="77:60" pos:end="77:62"><expr pos:start="77:60" pos:end="77:62"><literal type="char" pos:start="77:60" pos:end="77:62">'J'</literal></expr></argument>, <argument pos:start="77:65" pos:end="77:67"><expr pos:start="77:65" pos:end="77:67"><literal type="char" pos:start="77:65" pos:end="77:67">'P'</literal></expr></argument>, <argument pos:start="77:70" pos:end="77:72"><expr pos:start="77:70" pos:end="77:72"><literal type="char" pos:start="77:70" pos:end="77:72">'G'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="79:21" pos:end="79:62"><block_content pos:start="79:21" pos:end="79:62">

                    <expr_stmt pos:start="79:21" pos:end="79:62"><expr pos:start="79:21" pos:end="79:61"><name pos:start="79:21" pos:end="79:43"><name pos:start="79:21" pos:end="79:23">vst</name><operator pos:start="79:24" pos:end="79:25">-&gt;</operator><name pos:start="79:26" pos:end="79:33">codecpar</name><operator pos:start="79:34" pos:end="79:35">-&gt;</operator><name pos:start="79:36" pos:end="79:43">codec_id</name></name> <operator pos:start="79:45" pos:end="79:45">=</operator> <name pos:start="79:47" pos:end="79:61">AV_CODEC_ID_NUV</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="81:15" pos:end="83:33">else<block type="pseudo" pos:start="83:17" pos:end="83:33"><block_content pos:start="83:17" pos:end="83:33">

                <expr_stmt pos:start="83:17" pos:end="83:33"><expr pos:start="83:17" pos:end="83:32"><call pos:start="83:17" pos:end="83:32"><name pos:start="83:17" pos:end="83:25">avio_skip</name><argument_list pos:start="83:26" pos:end="83:32">(<argument pos:start="83:27" pos:end="83:28"><expr pos:start="83:27" pos:end="83:28"><name pos:start="83:27" pos:end="83:28">pb</name></expr></argument>, <argument pos:start="83:31" pos:end="83:31"><expr pos:start="83:31" pos:end="83:31"><literal type="number" pos:start="83:31" pos:end="83:31">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <if_stmt pos:start="87:13" pos:end="129:37"><if pos:start="87:13" pos:end="127:13">if <condition pos:start="87:16" pos:end="87:20">(<expr pos:start="87:17" pos:end="87:19"><name pos:start="87:17" pos:end="87:19">ast</name></expr>)</condition> <block pos:start="87:22" pos:end="127:13">{<block_content pos:start="89:17" pos:end="125:56">

                <decl_stmt pos:start="89:17" pos:end="89:23"><decl pos:start="89:17" pos:end="89:22"><type pos:start="89:17" pos:end="89:19"><name pos:start="89:17" pos:end="89:19">int</name></type> <name pos:start="89:21" pos:end="89:22">id</name></decl>;</decl_stmt>



                <expr_stmt pos:start="93:17" pos:end="93:69"><expr pos:start="93:17" pos:end="93:68"><name pos:start="93:17" pos:end="93:40"><name pos:start="93:17" pos:end="93:19">ast</name><operator pos:start="93:20" pos:end="93:21">-&gt;</operator><name pos:start="93:22" pos:end="93:29">codecpar</name><operator pos:start="93:30" pos:end="93:31">-&gt;</operator><name pos:start="93:32" pos:end="93:40">codec_tag</name></name>             <operator pos:start="93:54" pos:end="93:54">=</operator> <call pos:start="93:56" pos:end="93:68"><name pos:start="93:56" pos:end="93:64">avio_rl32</name><argument_list pos:start="93:65" pos:end="93:68">(<argument pos:start="93:66" pos:end="93:67"><expr pos:start="93:66" pos:end="93:67"><name pos:start="93:66" pos:end="93:67">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="95:17" pos:end="95:69"><expr pos:start="95:17" pos:end="95:68"><name pos:start="95:17" pos:end="95:42"><name pos:start="95:17" pos:end="95:19">ast</name><operator pos:start="95:20" pos:end="95:21">-&gt;</operator><name pos:start="95:22" pos:end="95:29">codecpar</name><operator pos:start="95:30" pos:end="95:31">-&gt;</operator><name pos:start="95:32" pos:end="95:42">sample_rate</name></name>           <operator pos:start="95:54" pos:end="95:54">=</operator> <call pos:start="95:56" pos:end="95:68"><name pos:start="95:56" pos:end="95:64">avio_rl32</name><argument_list pos:start="95:65" pos:end="95:68">(<argument pos:start="95:66" pos:end="95:67"><expr pos:start="95:66" pos:end="95:67"><name pos:start="95:66" pos:end="95:67">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="97:17" pos:end="97:69"><expr pos:start="97:17" pos:end="97:68"><name pos:start="97:17" pos:end="97:52"><name pos:start="97:17" pos:end="97:19">ast</name><operator pos:start="97:20" pos:end="97:21">-&gt;</operator><name pos:start="97:22" pos:end="97:29">codecpar</name><operator pos:start="97:30" pos:end="97:31">-&gt;</operator><name pos:start="97:32" pos:end="97:52">bits_per_coded_sample</name></name> <operator pos:start="97:54" pos:end="97:54">=</operator> <call pos:start="97:56" pos:end="97:68"><name pos:start="97:56" pos:end="97:64">avio_rl32</name><argument_list pos:start="97:65" pos:end="97:68">(<argument pos:start="97:66" pos:end="97:67"><expr pos:start="97:66" pos:end="97:67"><name pos:start="97:66" pos:end="97:67">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="99:17" pos:end="99:69"><expr pos:start="99:17" pos:end="99:68"><name pos:start="99:17" pos:end="99:39"><name pos:start="99:17" pos:end="99:19">ast</name><operator pos:start="99:20" pos:end="99:21">-&gt;</operator><name pos:start="99:22" pos:end="99:29">codecpar</name><operator pos:start="99:30" pos:end="99:31">-&gt;</operator><name pos:start="99:32" pos:end="99:39">channels</name></name>              <operator pos:start="99:54" pos:end="99:54">=</operator> <call pos:start="99:56" pos:end="99:68"><name pos:start="99:56" pos:end="99:64">avio_rl32</name><argument_list pos:start="99:65" pos:end="99:68">(<argument pos:start="99:66" pos:end="99:67"><expr pos:start="99:66" pos:end="99:67"><name pos:start="99:66" pos:end="99:67">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="101:17" pos:end="101:57"><expr pos:start="101:17" pos:end="101:56"><name pos:start="101:17" pos:end="101:45"><name pos:start="101:17" pos:end="101:19">ast</name><operator pos:start="101:20" pos:end="101:21">-&gt;</operator><name pos:start="101:22" pos:end="101:29">codecpar</name><operator pos:start="101:30" pos:end="101:31">-&gt;</operator><name pos:start="101:32" pos:end="101:45">channel_layout</name></name>        <operator pos:start="101:54" pos:end="101:54">=</operator> <literal type="number" pos:start="101:56" pos:end="101:56">0</literal></expr>;</expr_stmt>



                <expr_stmt pos:start="105:17" pos:end="107:79"><expr pos:start="105:17" pos:end="107:78"><name pos:start="105:17" pos:end="105:18">id</name> <operator pos:start="105:20" pos:end="105:20">=</operator> <call pos:start="105:22" pos:end="107:78"><name pos:start="105:22" pos:end="105:40">ff_wav_codec_get_id</name><argument_list pos:start="105:41" pos:end="107:78">(<argument pos:start="105:42" pos:end="105:65"><expr pos:start="105:42" pos:end="105:65"><name pos:start="105:42" pos:end="105:65"><name pos:start="105:42" pos:end="105:44">ast</name><operator pos:start="105:45" pos:end="105:46">-&gt;</operator><name pos:start="105:47" pos:end="105:54">codecpar</name><operator pos:start="105:55" pos:end="105:56">-&gt;</operator><name pos:start="105:57" pos:end="105:65">codec_tag</name></name></expr></argument>,

                                         <argument pos:start="107:42" pos:end="107:77"><expr pos:start="107:42" pos:end="107:77"><name pos:start="107:42" pos:end="107:77"><name pos:start="107:42" pos:end="107:44">ast</name><operator pos:start="107:45" pos:end="107:46">-&gt;</operator><name pos:start="107:47" pos:end="107:54">codecpar</name><operator pos:start="107:55" pos:end="107:56">-&gt;</operator><name pos:start="107:57" pos:end="107:77">bits_per_coded_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="109:17" pos:end="119:17"><if pos:start="109:17" pos:end="119:17">if <condition pos:start="109:20" pos:end="109:43">(<expr pos:start="109:21" pos:end="109:42"><name pos:start="109:21" pos:end="109:22">id</name> <operator pos:start="109:24" pos:end="109:25">==</operator> <name pos:start="109:27" pos:end="109:42">AV_CODEC_ID_NONE</name></expr>)</condition> <block pos:start="109:45" pos:end="119:17">{<block_content pos:start="111:21" pos:end="117:59">

                    <expr_stmt pos:start="111:21" pos:end="111:83"><expr pos:start="111:21" pos:end="111:82"><name pos:start="111:21" pos:end="111:22">id</name> <operator pos:start="111:24" pos:end="111:24">=</operator> <call pos:start="111:26" pos:end="111:82"><name pos:start="111:26" pos:end="111:40">ff_codec_get_id</name><argument_list pos:start="111:41" pos:end="111:82">(<argument pos:start="111:42" pos:end="111:55"><expr pos:start="111:42" pos:end="111:55"><name pos:start="111:42" pos:end="111:55">nuv_audio_tags</name></expr></argument>, <argument pos:start="111:58" pos:end="111:81"><expr pos:start="111:58" pos:end="111:81"><name pos:start="111:58" pos:end="111:81"><name pos:start="111:58" pos:end="111:60">ast</name><operator pos:start="111:61" pos:end="111:62">-&gt;</operator><name pos:start="111:63" pos:end="111:70">codecpar</name><operator pos:start="111:71" pos:end="111:72">-&gt;</operator><name pos:start="111:73" pos:end="111:81">codec_tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="113:21" pos:end="117:59"><if pos:start="113:21" pos:end="117:59">if <condition pos:start="113:24" pos:end="113:52">(<expr pos:start="113:25" pos:end="113:51"><name pos:start="113:25" pos:end="113:26">id</name> <operator pos:start="113:28" pos:end="113:29">==</operator> <name pos:start="113:31" pos:end="113:51">AV_CODEC_ID_PCM_S16LE</name></expr>)</condition><block type="pseudo" pos:start="115:25" pos:end="117:59"><block_content pos:start="115:25" pos:end="117:59">

                        <expr_stmt pos:start="115:25" pos:end="117:59"><expr pos:start="115:25" pos:end="117:58"><name pos:start="115:25" pos:end="115:26">id</name> <operator pos:start="115:28" pos:end="115:28">=</operator> <call pos:start="115:30" pos:end="117:58"><name pos:start="115:30" pos:end="115:48">ff_get_pcm_codec_id</name><argument_list pos:start="115:49" pos:end="117:58">(<argument pos:start="115:50" pos:end="115:85"><expr pos:start="115:50" pos:end="115:85"><name pos:start="115:50" pos:end="115:85"><name pos:start="115:50" pos:end="115:52">ast</name><operator pos:start="115:53" pos:end="115:54">-&gt;</operator><name pos:start="115:55" pos:end="115:62">codecpar</name><operator pos:start="115:63" pos:end="115:64">-&gt;</operator><name pos:start="115:65" pos:end="115:85">bits_per_coded_sample</name></name></expr></argument>,

                                                 <argument pos:start="117:50" pos:end="117:50"><expr pos:start="117:50" pos:end="117:50"><literal type="number" pos:start="117:50" pos:end="117:50">0</literal></expr></argument>, <argument pos:start="117:53" pos:end="117:53"><expr pos:start="117:53" pos:end="117:53"><literal type="number" pos:start="117:53" pos:end="117:53">0</literal></expr></argument>, <argument pos:start="117:56" pos:end="117:57"><expr pos:start="117:56" pos:end="117:57"><operator pos:start="117:56" pos:end="117:56">~</operator><literal type="number" pos:start="117:57" pos:end="117:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="121:17" pos:end="121:45"><expr pos:start="121:17" pos:end="121:44"><name pos:start="121:17" pos:end="121:39"><name pos:start="121:17" pos:end="121:19">ast</name><operator pos:start="121:20" pos:end="121:21">-&gt;</operator><name pos:start="121:22" pos:end="121:29">codecpar</name><operator pos:start="121:30" pos:end="121:31">-&gt;</operator><name pos:start="121:32" pos:end="121:39">codec_id</name></name> <operator pos:start="121:41" pos:end="121:41">=</operator> <name pos:start="121:43" pos:end="121:44">id</name></expr>;</expr_stmt>



                <expr_stmt pos:start="125:17" pos:end="125:56"><expr pos:start="125:17" pos:end="125:55"><name pos:start="125:17" pos:end="125:33"><name pos:start="125:17" pos:end="125:19">ast</name><operator pos:start="125:20" pos:end="125:21">-&gt;</operator><name pos:start="125:22" pos:end="125:33">need_parsing</name></name> <operator pos:start="125:35" pos:end="125:35">=</operator> <name pos:start="125:37" pos:end="125:55">AVSTREAM_PARSE_FULL</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="127:15" pos:end="129:37">else<block type="pseudo" pos:start="129:17" pos:end="129:37"><block_content pos:start="129:17" pos:end="129:37">

                <expr_stmt pos:start="129:17" pos:end="129:37"><expr pos:start="129:17" pos:end="129:36"><call pos:start="129:17" pos:end="129:36"><name pos:start="129:17" pos:end="129:25">avio_skip</name><argument_list pos:start="129:26" pos:end="129:36">(<argument pos:start="129:27" pos:end="129:28"><expr pos:start="129:27" pos:end="129:28"><name pos:start="129:27" pos:end="129:28">pb</name></expr></argument>, <argument pos:start="129:31" pos:end="129:35"><expr pos:start="129:31" pos:end="129:35"><literal type="number" pos:start="129:31" pos:end="129:31">4</literal> <operator pos:start="129:33" pos:end="129:33">*</operator> <literal type="number" pos:start="129:35" pos:end="129:35">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <expr_stmt pos:start="133:13" pos:end="133:26"><expr pos:start="133:13" pos:end="133:25"><name pos:start="133:13" pos:end="133:16">size</name> <operator pos:start="133:18" pos:end="133:19">-=</operator> <literal type="number" pos:start="133:21" pos:end="133:21">6</literal> <operator pos:start="133:23" pos:end="133:23">*</operator> <literal type="number" pos:start="133:25" pos:end="133:25">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:32"><expr pos:start="135:13" pos:end="135:31"><call pos:start="135:13" pos:end="135:31"><name pos:start="135:13" pos:end="135:21">avio_skip</name><argument_list pos:start="135:22" pos:end="135:31">(<argument pos:start="135:23" pos:end="135:24"><expr pos:start="135:23" pos:end="135:24"><name pos:start="135:23" pos:end="135:24">pb</name></expr></argument>, <argument pos:start="135:27" pos:end="135:30"><expr pos:start="135:27" pos:end="135:30"><name pos:start="135:27" pos:end="135:30">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="137:13" pos:end="137:21">return <expr pos:start="137:20" pos:end="137:20"><literal type="number" pos:start="137:20" pos:end="137:20">0</literal></expr>;</return>

        <case pos:start="139:9" pos:end="139:23">case <expr pos:start="139:14" pos:end="139:22"><name pos:start="139:14" pos:end="139:22">NUV_SEEKP</name></expr>:</case>

            <expr_stmt pos:start="141:13" pos:end="141:22"><expr pos:start="141:13" pos:end="141:21"><name pos:start="141:13" pos:end="141:16">size</name> <operator pos:start="141:18" pos:end="141:18">=</operator> <literal type="number" pos:start="141:20" pos:end="141:21">11</literal></expr>;</expr_stmt>

            <break pos:start="143:13" pos:end="143:18">break;</break>

        <default pos:start="145:9" pos:end="145:16">default:</default>

            <expr_stmt pos:start="147:13" pos:end="147:29"><expr pos:start="147:13" pos:end="147:28"><call pos:start="147:13" pos:end="147:28"><name pos:start="147:13" pos:end="147:21">avio_skip</name><argument_list pos:start="147:22" pos:end="147:28">(<argument pos:start="147:23" pos:end="147:24"><expr pos:start="147:23" pos:end="147:24"><name pos:start="147:23" pos:end="147:24">pb</name></expr></argument>, <argument pos:start="147:27" pos:end="147:27"><expr pos:start="147:27" pos:end="147:27"><literal type="number" pos:start="147:27" pos:end="147:27">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:42"><expr pos:start="149:13" pos:end="149:41"><name pos:start="149:13" pos:end="149:16">size</name> <operator pos:start="149:18" pos:end="149:18">=</operator> <call pos:start="149:20" pos:end="149:41"><name pos:start="149:20" pos:end="149:26">PKTSIZE</name><argument_list pos:start="149:27" pos:end="149:41">(<argument pos:start="149:28" pos:end="149:40"><expr pos:start="149:28" pos:end="149:40"><call pos:start="149:28" pos:end="149:40"><name pos:start="149:28" pos:end="149:36">avio_rl32</name><argument_list pos:start="149:37" pos:end="149:40">(<argument pos:start="149:38" pos:end="149:39"><expr pos:start="149:38" pos:end="149:39"><name pos:start="149:38" pos:end="149:39">pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="151:13" pos:end="151:18">break;</break>

        </block_content>}</block></switch>

        <expr_stmt pos:start="155:9" pos:end="155:28"><expr pos:start="155:9" pos:end="155:27"><call pos:start="155:9" pos:end="155:27"><name pos:start="155:9" pos:end="155:17">avio_skip</name><argument_list pos:start="155:18" pos:end="155:27">(<argument pos:start="155:19" pos:end="155:20"><expr pos:start="155:19" pos:end="155:20"><name pos:start="155:19" pos:end="155:20">pb</name></expr></argument>, <argument pos:start="155:23" pos:end="155:26"><expr pos:start="155:23" pos:end="155:26"><name pos:start="155:23" pos:end="155:26">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <return pos:start="161:5" pos:end="161:13">return <expr pos:start="161:12" pos:end="161:12"><literal type="number" pos:start="161:12" pos:end="161:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
