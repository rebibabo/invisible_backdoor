<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25402.c" pos:tabs="8"><function pos:start="1:1" pos:end="155:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">cdxl_decode_frame</name><parameter_list pos:start="1:29" pos:end="3:59">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:50"><name pos:start="1:30" pos:end="1:43">AVCodecContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:62"><decl pos:start="1:53" pos:end="1:62"><type pos:start="1:53" pos:end="1:62"><name pos:start="1:53" pos:end="1:56">void</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">data</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:43"><decl pos:start="3:30" pos:end="3:43"><type pos:start="3:30" pos:end="3:43"><name pos:start="3:30" pos:end="3:32">int</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:43">got_frame</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:58"><decl pos:start="3:46" pos:end="3:58"><type pos:start="3:46" pos:end="3:58"><name pos:start="3:46" pos:end="3:53">AVPacket</name> <modifier pos:start="3:55" pos:end="3:55">*</modifier></type><name pos:start="3:56" pos:end="3:58">pkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="155:1">{<block_content pos:start="7:5" pos:end="153:20">

    <decl_stmt pos:start="7:5" pos:end="7:43"><decl pos:start="7:5" pos:end="7:42"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">CDXLVideoContext</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:23">c</name> <init pos:start="7:25" pos:end="7:42">= <expr pos:start="7:27" pos:end="7:42"><name pos:start="7:27" pos:end="7:42"><name pos:start="7:27" pos:end="7:31">avctx</name><operator pos:start="7:32" pos:end="7:33">-&gt;</operator><name pos:start="7:34" pos:end="7:42">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:11">AVFrame</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier> <specifier pos:start="9:15" pos:end="9:19">const</specifier></type> <name pos:start="9:21" pos:end="9:21">p</name> <init pos:start="9:23" pos:end="9:28">= <expr pos:start="9:25" pos:end="9:28"><name pos:start="9:25" pos:end="9:28">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:65"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>, <decl pos:start="11:14" pos:end="11:14"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:14" pos:end="11:14">w</name></decl>, <decl pos:start="11:17" pos:end="11:17"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:17" pos:end="11:17">h</name></decl>, <decl pos:start="11:20" pos:end="11:27"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:20" pos:end="11:27">encoding</name></decl>, <decl pos:start="11:30" pos:end="11:42"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:30" pos:end="11:42">aligned_width</name></decl>, <decl pos:start="11:45" pos:end="11:64"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:45" pos:end="11:52">buf_size</name> <init pos:start="11:54" pos:end="11:64">= <expr pos:start="11:56" pos:end="11:64"><name pos:start="11:56" pos:end="11:64"><name pos:start="11:56" pos:end="11:58">pkt</name><operator pos:start="11:59" pos:end="11:60">-&gt;</operator><name pos:start="11:61" pos:end="11:64">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:35"><decl pos:start="13:5" pos:end="13:34"><type pos:start="13:5" pos:end="13:19"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:17">uint8_t</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:22">buf</name> <init pos:start="13:24" pos:end="13:34">= <expr pos:start="13:26" pos:end="13:34"><name pos:start="13:26" pos:end="13:34"><name pos:start="13:26" pos:end="13:28">pkt</name><operator pos:start="13:29" pos:end="13:30">-&gt;</operator><name pos:start="13:31" pos:end="13:34">data</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="19:35"><if pos:start="17:5" pos:end="19:35">if <condition pos:start="17:8" pos:end="17:22">(<expr pos:start="17:9" pos:end="17:21"><name pos:start="17:9" pos:end="17:16">buf_size</name> <operator pos:start="17:18" pos:end="17:18">&lt;</operator> <literal type="number" pos:start="17:20" pos:end="17:21">32</literal></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:35"><block_content pos:start="19:9" pos:end="19:35">

        <return pos:start="19:9" pos:end="19:35">return <expr pos:start="19:16" pos:end="19:34"><name pos:start="19:16" pos:end="19:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:33"><expr pos:start="21:5" pos:end="21:32"><name pos:start="21:5" pos:end="21:12">encoding</name>        <operator pos:start="21:21" pos:end="21:21">=</operator> <name pos:start="21:23" pos:end="21:28"><name pos:start="21:23" pos:end="21:25">buf</name><index pos:start="21:26" pos:end="21:28">[<expr pos:start="21:27" pos:end="21:27"><literal type="number" pos:start="21:27" pos:end="21:27">1</literal></expr>]</index></name> <operator pos:start="21:30" pos:end="21:30">&amp;</operator> <literal type="number" pos:start="21:32" pos:end="21:32">7</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:36"><expr pos:start="23:5" pos:end="23:35"><name pos:start="23:5" pos:end="23:13"><name pos:start="23:5" pos:end="23:5">c</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:13">format</name></name>       <operator pos:start="23:21" pos:end="23:21">=</operator> <name pos:start="23:23" pos:end="23:28"><name pos:start="23:23" pos:end="23:25">buf</name><index pos:start="23:26" pos:end="23:28">[<expr pos:start="23:27" pos:end="23:27"><literal type="number" pos:start="23:27" pos:end="23:27">1</literal></expr>]</index></name> <operator pos:start="23:30" pos:end="23:30">&amp;</operator> <literal type="number" pos:start="23:32" pos:end="23:35">0xE0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:40"><expr pos:start="25:5" pos:end="25:39"><name pos:start="25:5" pos:end="25:5">w</name>               <operator pos:start="25:21" pos:end="25:21">=</operator> <call pos:start="25:23" pos:end="25:39"><name pos:start="25:23" pos:end="25:29">AV_RB16</name><argument_list pos:start="25:30" pos:end="25:39">(<argument pos:start="25:31" pos:end="25:38"><expr pos:start="25:31" pos:end="25:38"><operator pos:start="25:31" pos:end="25:31">&amp;</operator><name pos:start="25:32" pos:end="25:38"><name pos:start="25:32" pos:end="25:34">buf</name><index pos:start="25:35" pos:end="25:38">[<expr pos:start="25:36" pos:end="25:37"><literal type="number" pos:start="25:36" pos:end="25:37">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:40"><expr pos:start="27:5" pos:end="27:39"><name pos:start="27:5" pos:end="27:5">h</name>               <operator pos:start="27:21" pos:end="27:21">=</operator> <call pos:start="27:23" pos:end="27:39"><name pos:start="27:23" pos:end="27:29">AV_RB16</name><argument_list pos:start="27:30" pos:end="27:39">(<argument pos:start="27:31" pos:end="27:38"><expr pos:start="27:31" pos:end="27:38"><operator pos:start="27:31" pos:end="27:31">&amp;</operator><name pos:start="27:32" pos:end="27:38"><name pos:start="27:32" pos:end="27:34">buf</name><index pos:start="27:35" pos:end="27:38">[<expr pos:start="27:36" pos:end="27:37"><literal type="number" pos:start="27:36" pos:end="27:37">16</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:30"><expr pos:start="29:5" pos:end="29:29"><name pos:start="29:5" pos:end="29:10"><name pos:start="29:5" pos:end="29:5">c</name><operator pos:start="29:6" pos:end="29:7">-&gt;</operator><name pos:start="29:8" pos:end="29:10">bpp</name></name>          <operator pos:start="29:21" pos:end="29:21">=</operator> <name pos:start="29:23" pos:end="29:29"><name pos:start="29:23" pos:end="29:25">buf</name><index pos:start="29:26" pos:end="29:29">[<expr pos:start="29:27" pos:end="29:28"><literal type="number" pos:start="29:27" pos:end="29:28">19</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:40"><expr pos:start="31:5" pos:end="31:39"><name pos:start="31:5" pos:end="31:19"><name pos:start="31:5" pos:end="31:5">c</name><operator pos:start="31:6" pos:end="31:7">-&gt;</operator><name pos:start="31:8" pos:end="31:19">palette_size</name></name> <operator pos:start="31:21" pos:end="31:21">=</operator> <call pos:start="31:23" pos:end="31:39"><name pos:start="31:23" pos:end="31:29">AV_RB16</name><argument_list pos:start="31:30" pos:end="31:39">(<argument pos:start="31:31" pos:end="31:38"><expr pos:start="31:31" pos:end="31:38"><operator pos:start="31:31" pos:end="31:31">&amp;</operator><name pos:start="31:32" pos:end="31:38"><name pos:start="31:32" pos:end="31:34">buf</name><index pos:start="31:35" pos:end="31:38">[<expr pos:start="31:36" pos:end="31:37"><literal type="number" pos:start="31:36" pos:end="31:37">20</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:31"><expr pos:start="33:5" pos:end="33:30"><name pos:start="33:5" pos:end="33:14"><name pos:start="33:5" pos:end="33:5">c</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:14">palette</name></name>      <operator pos:start="33:21" pos:end="33:21">=</operator> <name pos:start="33:23" pos:end="33:25">buf</name> <operator pos:start="33:27" pos:end="33:27">+</operator> <literal type="number" pos:start="33:29" pos:end="33:30">32</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:51"><expr pos:start="35:5" pos:end="35:50"><name pos:start="35:5" pos:end="35:12"><name pos:start="35:5" pos:end="35:5">c</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:12">video</name></name>        <operator pos:start="35:21" pos:end="35:21">=</operator> <name pos:start="35:23" pos:end="35:32"><name pos:start="35:23" pos:end="35:23">c</name><operator pos:start="35:24" pos:end="35:25">-&gt;</operator><name pos:start="35:26" pos:end="35:32">palette</name></name> <operator pos:start="35:34" pos:end="35:34">+</operator> <name pos:start="35:36" pos:end="35:50"><name pos:start="35:36" pos:end="35:36">c</name><operator pos:start="35:37" pos:end="35:38">-&gt;</operator><name pos:start="35:39" pos:end="35:50">palette_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:54"><expr pos:start="37:5" pos:end="37:53"><name pos:start="37:5" pos:end="37:17"><name pos:start="37:5" pos:end="37:5">c</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:17">video_size</name></name>   <operator pos:start="37:21" pos:end="37:21">=</operator> <name pos:start="37:23" pos:end="37:30">buf_size</name> <operator pos:start="37:32" pos:end="37:32">-</operator> <name pos:start="37:34" pos:end="37:48"><name pos:start="37:34" pos:end="37:34">c</name><operator pos:start="37:35" pos:end="37:36">-&gt;</operator><name pos:start="37:37" pos:end="37:48">palette_size</name></name> <operator pos:start="37:50" pos:end="37:50">-</operator> <literal type="number" pos:start="37:52" pos:end="37:53">32</literal></expr>;</expr_stmt>



    <if_stmt pos:start="41:5" pos:end="43:35"><if pos:start="41:5" pos:end="43:35">if <condition pos:start="41:8" pos:end="41:30">(<expr pos:start="41:9" pos:end="41:29"><name pos:start="41:9" pos:end="41:23"><name pos:start="41:9" pos:end="41:9">c</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:23">palette_size</name></name> <operator pos:start="41:25" pos:end="41:25">&gt;</operator> <literal type="number" pos:start="41:27" pos:end="41:29">512</literal></expr>)</condition><block type="pseudo" pos:start="43:9" pos:end="43:35"><block_content pos:start="43:9" pos:end="43:35">

        <return pos:start="43:9" pos:end="43:35">return <expr pos:start="43:16" pos:end="43:34"><name pos:start="43:16" pos:end="43:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="45:5" pos:end="47:35"><if pos:start="45:5" pos:end="47:35">if <condition pos:start="45:8" pos:end="45:40">(<expr pos:start="45:9" pos:end="45:39"><name pos:start="45:9" pos:end="45:16">buf_size</name> <operator pos:start="45:18" pos:end="45:18">&lt;</operator> <name pos:start="45:20" pos:end="45:34"><name pos:start="45:20" pos:end="45:20">c</name><operator pos:start="45:21" pos:end="45:22">-&gt;</operator><name pos:start="45:23" pos:end="45:34">palette_size</name></name> <operator pos:start="45:36" pos:end="45:36">+</operator> <literal type="number" pos:start="45:38" pos:end="45:39">32</literal></expr>)</condition><block type="pseudo" pos:start="47:9" pos:end="47:35"><block_content pos:start="47:9" pos:end="47:35">

        <return pos:start="47:9" pos:end="47:35">return <expr pos:start="47:16" pos:end="47:34"><name pos:start="47:16" pos:end="47:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="49:5" pos:end="51:35"><if pos:start="49:5" pos:end="51:35">if <condition pos:start="49:8" pos:end="49:19">(<expr pos:start="49:9" pos:end="49:18"><name pos:start="49:9" pos:end="49:14"><name pos:start="49:9" pos:end="49:9">c</name><operator pos:start="49:10" pos:end="49:11">-&gt;</operator><name pos:start="49:12" pos:end="49:14">bpp</name></name> <operator pos:start="49:16" pos:end="49:16">&lt;</operator> <literal type="number" pos:start="49:18" pos:end="49:18">1</literal></expr>)</condition><block type="pseudo" pos:start="51:9" pos:end="51:35"><block_content pos:start="51:9" pos:end="51:35">

        <return pos:start="51:9" pos:end="51:35">return <expr pos:start="51:16" pos:end="51:34"><name pos:start="51:16" pos:end="51:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:80">(<expr pos:start="53:9" pos:end="53:79"><name pos:start="53:9" pos:end="53:17"><name pos:start="53:9" pos:end="53:9">c</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:17">format</name></name> <operator pos:start="53:19" pos:end="53:20">!=</operator> <name pos:start="53:22" pos:end="53:31">BIT_PLANAR</name> <operator pos:start="53:33" pos:end="53:34">&amp;&amp;</operator> <name pos:start="53:36" pos:end="53:44"><name pos:start="53:36" pos:end="53:36">c</name><operator pos:start="53:37" pos:end="53:38">-&gt;</operator><name pos:start="53:39" pos:end="53:44">format</name></name> <operator pos:start="53:46" pos:end="53:47">!=</operator> <name pos:start="53:49" pos:end="53:56">BIT_LINE</name> <operator pos:start="53:58" pos:end="53:59">&amp;&amp;</operator> <name pos:start="53:61" pos:end="53:69"><name pos:start="53:61" pos:end="53:61">c</name><operator pos:start="53:62" pos:end="53:63">-&gt;</operator><name pos:start="53:64" pos:end="53:69">format</name></name> <operator pos:start="53:71" pos:end="53:72">!=</operator> <name pos:start="53:74" pos:end="53:79">CHUNKY</name></expr>)</condition> <block pos:start="53:82" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:36">

        <expr_stmt pos:start="55:9" pos:end="55:70"><expr pos:start="55:9" pos:end="55:69"><call pos:start="55:9" pos:end="55:69"><name pos:start="55:9" pos:end="55:29">avpriv_request_sample</name><argument_list pos:start="55:30" pos:end="55:69">(<argument pos:start="55:31" pos:end="55:35"><expr pos:start="55:31" pos:end="55:35"><name pos:start="55:31" pos:end="55:35">avctx</name></expr></argument>, <argument pos:start="55:38" pos:end="55:57"><expr pos:start="55:38" pos:end="55:57"><literal type="string" pos:start="55:38" pos:end="55:57">"Pixel format 0x%0x"</literal></expr></argument>, <argument pos:start="55:60" pos:end="55:68"><expr pos:start="55:60" pos:end="55:68"><name pos:start="55:60" pos:end="55:68"><name pos:start="55:60" pos:end="55:60">c</name><operator pos:start="55:61" pos:end="55:62">-&gt;</operator><name pos:start="55:63" pos:end="55:68">format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:36">return <expr pos:start="57:16" pos:end="57:35"><name pos:start="57:16" pos:end="57:35">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="63:5" pos:end="65:19"><if pos:start="63:5" pos:end="65:19">if <condition pos:start="63:8" pos:end="63:51">(<expr pos:start="63:9" pos:end="63:50"><operator pos:start="63:9" pos:end="63:9">(</operator><name pos:start="63:10" pos:end="63:12">ret</name> <operator pos:start="63:14" pos:end="63:14">=</operator> <call pos:start="63:16" pos:end="63:45"><name pos:start="63:16" pos:end="63:32">ff_set_dimensions</name><argument_list pos:start="63:33" pos:end="63:45">(<argument pos:start="63:34" pos:end="63:38"><expr pos:start="63:34" pos:end="63:38"><name pos:start="63:34" pos:end="63:38">avctx</name></expr></argument>, <argument pos:start="63:41" pos:end="63:41"><expr pos:start="63:41" pos:end="63:41"><name pos:start="63:41" pos:end="63:41">w</name></expr></argument>, <argument pos:start="63:44" pos:end="63:44"><expr pos:start="63:44" pos:end="63:44"><name pos:start="63:44" pos:end="63:44">h</name></expr></argument>)</argument_list></call><operator pos:start="63:46" pos:end="63:46">)</operator> <operator pos:start="63:48" pos:end="63:48">&lt;</operator> <literal type="number" pos:start="63:50" pos:end="63:50">0</literal></expr>)</condition><block type="pseudo" pos:start="65:9" pos:end="65:19"><block_content pos:start="65:9" pos:end="65:19">

        <return pos:start="65:9" pos:end="65:19">return <expr pos:start="65:16" pos:end="65:18"><name pos:start="65:16" pos:end="65:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="69:5" pos:end="75:53"><if pos:start="69:5" pos:end="71:37">if <condition pos:start="69:8" pos:end="69:28">(<expr pos:start="69:9" pos:end="69:27"><name pos:start="69:9" pos:end="69:17"><name pos:start="69:9" pos:end="69:9">c</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:17">format</name></name> <operator pos:start="69:19" pos:end="69:20">==</operator> <name pos:start="69:22" pos:end="69:27">CHUNKY</name></expr>)</condition><block type="pseudo" pos:start="71:9" pos:end="71:37"><block_content pos:start="71:9" pos:end="71:37">

        <expr_stmt pos:start="71:9" pos:end="71:37"><expr pos:start="71:9" pos:end="71:36"><name pos:start="71:9" pos:end="71:21">aligned_width</name> <operator pos:start="71:23" pos:end="71:23">=</operator> <name pos:start="71:25" pos:end="71:36"><name pos:start="71:25" pos:end="71:29">avctx</name><operator pos:start="71:30" pos:end="71:31">-&gt;</operator><name pos:start="71:32" pos:end="71:36">width</name></name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="73:5" pos:end="75:53">else<block type="pseudo" pos:start="75:9" pos:end="75:53"><block_content pos:start="75:9" pos:end="75:53">

        <expr_stmt pos:start="75:9" pos:end="75:53"><expr pos:start="75:9" pos:end="75:52"><name pos:start="75:9" pos:end="75:21">aligned_width</name> <operator pos:start="75:23" pos:end="75:23">=</operator> <call pos:start="75:25" pos:end="75:52"><name pos:start="75:25" pos:end="75:31">FFALIGN</name><argument_list pos:start="75:32" pos:end="75:52">(<argument pos:start="75:33" pos:end="75:47"><expr pos:start="75:33" pos:end="75:47"><name pos:start="75:33" pos:end="75:47"><name pos:start="75:33" pos:end="75:33">c</name><operator pos:start="75:34" pos:end="75:35">-&gt;</operator><name pos:start="75:36" pos:end="75:40">avctx</name><operator pos:start="75:41" pos:end="75:42">-&gt;</operator><name pos:start="75:43" pos:end="75:47">width</name></name></expr></argument>, <argument pos:start="75:50" pos:end="75:51"><expr pos:start="75:50" pos:end="75:51"><literal type="number" pos:start="75:50" pos:end="75:51">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:54"><expr pos:start="77:5" pos:end="77:53"><name pos:start="77:5" pos:end="77:18"><name pos:start="77:5" pos:end="77:5">c</name><operator pos:start="77:6" pos:end="77:7">-&gt;</operator><name pos:start="77:8" pos:end="77:18">padded_bits</name></name>  <operator pos:start="77:21" pos:end="77:21">=</operator> <name pos:start="77:23" pos:end="77:35">aligned_width</name> <operator pos:start="77:37" pos:end="77:37">-</operator> <name pos:start="77:39" pos:end="77:53"><name pos:start="77:39" pos:end="77:39">c</name><operator pos:start="77:40" pos:end="77:41">-&gt;</operator><name pos:start="77:42" pos:end="77:46">avctx</name><operator pos:start="77:47" pos:end="77:48">-&gt;</operator><name pos:start="77:49" pos:end="77:53">width</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="81:35"><if pos:start="79:5" pos:end="81:35">if <condition pos:start="79:8" pos:end="79:67">(<expr pos:start="79:9" pos:end="79:66"><name pos:start="79:9" pos:end="79:21"><name pos:start="79:9" pos:end="79:9">c</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:21">video_size</name></name> <operator pos:start="79:23" pos:end="79:23">&lt;</operator> <name pos:start="79:25" pos:end="79:37">aligned_width</name> <operator pos:start="79:39" pos:end="79:39">*</operator> <name pos:start="79:41" pos:end="79:53"><name pos:start="79:41" pos:end="79:45">avctx</name><operator pos:start="79:46" pos:end="79:47">-&gt;</operator><name pos:start="79:48" pos:end="79:53">height</name></name> <operator pos:start="79:55" pos:end="79:55">*</operator> <name pos:start="79:57" pos:end="79:62"><name pos:start="79:57" pos:end="79:57">c</name><operator pos:start="79:58" pos:end="79:59">-&gt;</operator><name pos:start="79:60" pos:end="79:62">bpp</name></name> <operator pos:start="79:64" pos:end="79:64">/</operator> <literal type="number" pos:start="79:66" pos:end="79:66">8</literal></expr>)</condition><block type="pseudo" pos:start="81:9" pos:end="81:35"><block_content pos:start="81:9" pos:end="81:35">

        <return pos:start="81:9" pos:end="81:35">return <expr pos:start="81:16" pos:end="81:34"><name pos:start="81:16" pos:end="81:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="83:5" pos:end="109:5"><if pos:start="83:5" pos:end="87:5">if <condition pos:start="83:8" pos:end="83:52">(<expr pos:start="83:9" pos:end="83:51"><operator pos:start="83:9" pos:end="83:9">!</operator><name pos:start="83:10" pos:end="83:17">encoding</name> <operator pos:start="83:19" pos:end="83:20">&amp;&amp;</operator> <name pos:start="83:22" pos:end="83:36"><name pos:start="83:22" pos:end="83:22">c</name><operator pos:start="83:23" pos:end="83:24">-&gt;</operator><name pos:start="83:25" pos:end="83:36">palette_size</name></name> <operator pos:start="83:38" pos:end="83:39">&amp;&amp;</operator> <name pos:start="83:41" pos:end="83:46"><name pos:start="83:41" pos:end="83:41">c</name><operator pos:start="83:42" pos:end="83:43">-&gt;</operator><name pos:start="83:44" pos:end="83:46">bpp</name></name> <operator pos:start="83:48" pos:end="83:49">&lt;=</operator> <literal type="number" pos:start="83:51" pos:end="83:51">8</literal></expr>)</condition> <block pos:start="83:54" pos:end="87:5">{<block_content pos:start="85:9" pos:end="85:41">

        <expr_stmt pos:start="85:9" pos:end="85:41"><expr pos:start="85:9" pos:end="85:40"><name pos:start="85:9" pos:end="85:22"><name pos:start="85:9" pos:end="85:13">avctx</name><operator pos:start="85:14" pos:end="85:15">-&gt;</operator><name pos:start="85:16" pos:end="85:22">pix_fmt</name></name> <operator pos:start="85:24" pos:end="85:24">=</operator> <name pos:start="85:26" pos:end="85:40">AV_PIX_FMT_PAL8</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="87:7" pos:end="95:5">else if <condition pos:start="87:15" pos:end="87:61">(<expr pos:start="87:16" pos:end="87:60"><name pos:start="87:16" pos:end="87:23">encoding</name> <operator pos:start="87:25" pos:end="87:26">==</operator> <literal type="number" pos:start="87:28" pos:end="87:28">1</literal> <operator pos:start="87:30" pos:end="87:31">&amp;&amp;</operator> <operator pos:start="87:33" pos:end="87:33">(</operator><name pos:start="87:34" pos:end="87:39"><name pos:start="87:34" pos:end="87:34">c</name><operator pos:start="87:35" pos:end="87:36">-&gt;</operator><name pos:start="87:37" pos:end="87:39">bpp</name></name> <operator pos:start="87:41" pos:end="87:42">==</operator> <literal type="number" pos:start="87:44" pos:end="87:44">6</literal> <operator pos:start="87:46" pos:end="87:47">||</operator> <name pos:start="87:49" pos:end="87:54"><name pos:start="87:49" pos:end="87:49">c</name><operator pos:start="87:50" pos:end="87:51">-&gt;</operator><name pos:start="87:52" pos:end="87:54">bpp</name></name> <operator pos:start="87:56" pos:end="87:57">==</operator> <literal type="number" pos:start="87:59" pos:end="87:59">8</literal><operator pos:start="87:60" pos:end="87:60">)</operator></expr>)</condition> <block pos:start="87:63" pos:end="95:5">{<block_content pos:start="89:9" pos:end="93:42">

        <if_stmt pos:start="89:9" pos:end="91:39"><if pos:start="89:9" pos:end="91:39">if <condition pos:start="89:12" pos:end="89:51">(<expr pos:start="89:13" pos:end="89:50"><name pos:start="89:13" pos:end="89:27"><name pos:start="89:13" pos:end="89:13">c</name><operator pos:start="89:14" pos:end="89:15">-&gt;</operator><name pos:start="89:16" pos:end="89:27">palette_size</name></name> <operator pos:start="89:29" pos:end="89:30">!=</operator> <operator pos:start="89:32" pos:end="89:32">(</operator><literal type="number" pos:start="89:33" pos:end="89:33">1</literal> <operator pos:start="89:35" pos:end="89:36">&lt;&lt;</operator> <operator pos:start="89:38" pos:end="89:38">(</operator><name pos:start="89:39" pos:end="89:44"><name pos:start="89:39" pos:end="89:39">c</name><operator pos:start="89:40" pos:end="89:41">-&gt;</operator><name pos:start="89:42" pos:end="89:44">bpp</name></name> <operator pos:start="89:46" pos:end="89:46">-</operator> <literal type="number" pos:start="89:48" pos:end="89:48">1</literal><operator pos:start="89:49" pos:end="89:49">)</operator><operator pos:start="89:50" pos:end="89:50">)</operator></expr>)</condition><block type="pseudo" pos:start="91:13" pos:end="91:39"><block_content pos:start="91:13" pos:end="91:39">

            <return pos:start="91:13" pos:end="91:39">return <expr pos:start="91:20" pos:end="91:38"><name pos:start="91:20" pos:end="91:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:42"><expr pos:start="93:9" pos:end="93:41"><name pos:start="93:9" pos:end="93:22"><name pos:start="93:9" pos:end="93:13">avctx</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:22">pix_fmt</name></name> <operator pos:start="93:24" pos:end="93:24">=</operator> <name pos:start="93:26" pos:end="93:41">AV_PIX_FMT_BGR24</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="95:7" pos:end="101:5">else if <condition pos:start="95:15" pos:end="97:32">(<expr pos:start="95:16" pos:end="97:31"><operator pos:start="95:16" pos:end="95:16">!</operator><name pos:start="95:17" pos:end="95:24">encoding</name> <operator pos:start="95:26" pos:end="95:27">&amp;&amp;</operator> <name pos:start="95:29" pos:end="95:34"><name pos:start="95:29" pos:end="95:29">c</name><operator pos:start="95:30" pos:end="95:31">-&gt;</operator><name pos:start="95:32" pos:end="95:34">bpp</name></name> <operator pos:start="95:36" pos:end="95:37">==</operator> <literal type="number" pos:start="95:39" pos:end="95:40">24</literal> <operator pos:start="95:42" pos:end="95:43">&amp;&amp;</operator> <name pos:start="95:45" pos:end="95:53"><name pos:start="95:45" pos:end="95:45">c</name><operator pos:start="95:46" pos:end="95:47">-&gt;</operator><name pos:start="95:48" pos:end="95:53">format</name></name> <operator pos:start="95:55" pos:end="95:56">==</operator> <name pos:start="95:58" pos:end="95:63">CHUNKY</name> <operator pos:start="95:65" pos:end="95:66">&amp;&amp;</operator>

               <operator pos:start="97:16" pos:end="97:16">!</operator><name pos:start="97:17" pos:end="97:31"><name pos:start="97:17" pos:end="97:17">c</name><operator pos:start="97:18" pos:end="97:19">-&gt;</operator><name pos:start="97:20" pos:end="97:31">palette_size</name></name></expr>)</condition> <block pos:start="97:34" pos:end="101:5">{<block_content pos:start="99:9" pos:end="99:42">

        <expr_stmt pos:start="99:9" pos:end="99:42"><expr pos:start="99:9" pos:end="99:41"><name pos:start="99:9" pos:end="99:22"><name pos:start="99:9" pos:end="99:13">avctx</name><operator pos:start="99:14" pos:end="99:15">-&gt;</operator><name pos:start="99:16" pos:end="99:22">pix_fmt</name></name> <operator pos:start="99:24" pos:end="99:24">=</operator> <name pos:start="99:26" pos:end="99:41">AV_PIX_FMT_RGB24</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="101:7" pos:end="109:5">else <block pos:start="101:12" pos:end="109:5">{<block_content pos:start="103:9" pos:end="107:36">

        <expr_stmt pos:start="103:9" pos:end="105:59"><expr pos:start="103:9" pos:end="105:58"><call pos:start="103:9" pos:end="105:58"><name pos:start="103:9" pos:end="103:29">avpriv_request_sample</name><argument_list pos:start="103:30" pos:end="105:58">(<argument pos:start="103:31" pos:end="103:35"><expr pos:start="103:31" pos:end="103:35"><name pos:start="103:31" pos:end="103:35">avctx</name></expr></argument>, <argument pos:start="103:38" pos:end="103:74"><expr pos:start="103:38" pos:end="103:74"><literal type="string" pos:start="103:38" pos:end="103:74">"Encoding %d, bpp %d and format 0x%x"</literal></expr></argument>,

                              <argument pos:start="105:31" pos:end="105:38"><expr pos:start="105:31" pos:end="105:38"><name pos:start="105:31" pos:end="105:38">encoding</name></expr></argument>, <argument pos:start="105:41" pos:end="105:46"><expr pos:start="105:41" pos:end="105:46"><name pos:start="105:41" pos:end="105:46"><name pos:start="105:41" pos:end="105:41">c</name><operator pos:start="105:42" pos:end="105:43">-&gt;</operator><name pos:start="105:44" pos:end="105:46">bpp</name></name></expr></argument>, <argument pos:start="105:49" pos:end="105:57"><expr pos:start="105:49" pos:end="105:57"><name pos:start="105:49" pos:end="105:57"><name pos:start="105:49" pos:end="105:49">c</name><operator pos:start="105:50" pos:end="105:51">-&gt;</operator><name pos:start="105:52" pos:end="105:57">format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="107:9" pos:end="107:36">return <expr pos:start="107:16" pos:end="107:35"><name pos:start="107:16" pos:end="107:35">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="113:5" pos:end="115:19"><if pos:start="113:5" pos:end="115:19">if <condition pos:start="113:8" pos:end="113:47">(<expr pos:start="113:9" pos:end="113:46"><operator pos:start="113:9" pos:end="113:9">(</operator><name pos:start="113:10" pos:end="113:12">ret</name> <operator pos:start="113:14" pos:end="113:14">=</operator> <call pos:start="113:16" pos:end="113:41"><name pos:start="113:16" pos:end="113:28">ff_get_buffer</name><argument_list pos:start="113:29" pos:end="113:41">(<argument pos:start="113:30" pos:end="113:34"><expr pos:start="113:30" pos:end="113:34"><name pos:start="113:30" pos:end="113:34">avctx</name></expr></argument>, <argument pos:start="113:37" pos:end="113:37"><expr pos:start="113:37" pos:end="113:37"><name pos:start="113:37" pos:end="113:37">p</name></expr></argument>, <argument pos:start="113:40" pos:end="113:40"><expr pos:start="113:40" pos:end="113:40"><literal type="number" pos:start="113:40" pos:end="113:40">0</literal></expr></argument>)</argument_list></call><operator pos:start="113:42" pos:end="113:42">)</operator> <operator pos:start="113:44" pos:end="113:44">&lt;</operator> <literal type="number" pos:start="113:46" pos:end="113:46">0</literal></expr>)</condition><block type="pseudo" pos:start="115:9" pos:end="115:19"><block_content pos:start="115:9" pos:end="115:19">

        <return pos:start="115:9" pos:end="115:19">return <expr pos:start="115:16" pos:end="115:18"><name pos:start="115:16" pos:end="115:18">ret</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:37"><expr pos:start="117:5" pos:end="117:36"><name pos:start="117:5" pos:end="117:16"><name pos:start="117:5" pos:end="117:5">p</name><operator pos:start="117:6" pos:end="117:7">-&gt;</operator><name pos:start="117:8" pos:end="117:16">pict_type</name></name> <operator pos:start="117:18" pos:end="117:18">=</operator> <name pos:start="117:20" pos:end="117:36">AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>



    <if_stmt pos:start="121:5" pos:end="147:5"><if pos:start="121:5" pos:end="139:5">if <condition pos:start="121:8" pos:end="121:17">(<expr pos:start="121:9" pos:end="121:16"><name pos:start="121:9" pos:end="121:16">encoding</name></expr>)</condition> <block pos:start="121:19" pos:end="139:5">{<block_content pos:start="123:9" pos:end="137:35">

        <expr_stmt pos:start="123:9" pos:end="125:68"><expr pos:start="123:9" pos:end="125:67"><call pos:start="123:9" pos:end="125:67"><name pos:start="123:9" pos:end="123:29">av_fast_padded_malloc</name><argument_list pos:start="123:30" pos:end="125:67">(<argument pos:start="123:31" pos:end="123:43"><expr pos:start="123:31" pos:end="123:43"><operator pos:start="123:31" pos:end="123:31">&amp;</operator><name pos:start="123:32" pos:end="123:43"><name pos:start="123:32" pos:end="123:32">c</name><operator pos:start="123:33" pos:end="123:34">-&gt;</operator><name pos:start="123:35" pos:end="123:43">new_video</name></name></expr></argument>, <argument pos:start="123:46" pos:end="123:63"><expr pos:start="123:46" pos:end="123:63"><operator pos:start="123:46" pos:end="123:46">&amp;</operator><name pos:start="123:47" pos:end="123:63"><name pos:start="123:47" pos:end="123:47">c</name><operator pos:start="123:48" pos:end="123:49">-&gt;</operator><name pos:start="123:50" pos:end="123:63">new_video_size</name></name></expr></argument>,

                              <argument pos:start="125:31" pos:end="125:66"><expr pos:start="125:31" pos:end="125:66"><name pos:start="125:31" pos:end="125:31">h</name> <operator pos:start="125:33" pos:end="125:33">*</operator> <name pos:start="125:35" pos:end="125:35">w</name> <operator pos:start="125:37" pos:end="125:37">+</operator> <name pos:start="125:39" pos:end="125:66">AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="127:9" pos:end="129:35"><if pos:start="127:9" pos:end="129:35">if <condition pos:start="127:12" pos:end="127:26">(<expr pos:start="127:13" pos:end="127:25"><operator pos:start="127:13" pos:end="127:13">!</operator><name pos:start="127:14" pos:end="127:25"><name pos:start="127:14" pos:end="127:14">c</name><operator pos:start="127:15" pos:end="127:16">-&gt;</operator><name pos:start="127:17" pos:end="127:25">new_video</name></name></expr>)</condition><block type="pseudo" pos:start="129:13" pos:end="129:35"><block_content pos:start="129:13" pos:end="129:35">

            <return pos:start="129:13" pos:end="129:35">return <expr pos:start="129:20" pos:end="129:34"><call pos:start="129:20" pos:end="129:34"><name pos:start="129:20" pos:end="129:26">AVERROR</name><argument_list pos:start="129:27" pos:end="129:34">(<argument pos:start="129:28" pos:end="129:33"><expr pos:start="129:28" pos:end="129:33"><name pos:start="129:28" pos:end="129:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="131:9" pos:end="137:35"><if pos:start="131:9" pos:end="133:35">if <condition pos:start="131:12" pos:end="131:24">(<expr pos:start="131:13" pos:end="131:23"><name pos:start="131:13" pos:end="131:18"><name pos:start="131:13" pos:end="131:13">c</name><operator pos:start="131:14" pos:end="131:15">-&gt;</operator><name pos:start="131:16" pos:end="131:18">bpp</name></name> <operator pos:start="131:20" pos:end="131:21">==</operator> <literal type="number" pos:start="131:23" pos:end="131:23">8</literal></expr>)</condition><block type="pseudo" pos:start="133:13" pos:end="133:35"><block_content pos:start="133:13" pos:end="133:35">

            <expr_stmt pos:start="133:13" pos:end="133:35"><expr pos:start="133:13" pos:end="133:34"><call pos:start="133:13" pos:end="133:34"><name pos:start="133:13" pos:end="133:28">cdxl_decode_ham8</name><argument_list pos:start="133:29" pos:end="133:34">(<argument pos:start="133:30" pos:end="133:30"><expr pos:start="133:30" pos:end="133:30"><name pos:start="133:30" pos:end="133:30">c</name></expr></argument>, <argument pos:start="133:33" pos:end="133:33"><expr pos:start="133:33" pos:end="133:33"><name pos:start="133:33" pos:end="133:33">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="135:9" pos:end="137:35">else<block type="pseudo" pos:start="137:13" pos:end="137:35"><block_content pos:start="137:13" pos:end="137:35">

            <expr_stmt pos:start="137:13" pos:end="137:35"><expr pos:start="137:13" pos:end="137:34"><call pos:start="137:13" pos:end="137:34"><name pos:start="137:13" pos:end="137:28">cdxl_decode_ham6</name><argument_list pos:start="137:29" pos:end="137:34">(<argument pos:start="137:30" pos:end="137:30"><expr pos:start="137:30" pos:end="137:30"><name pos:start="137:30" pos:end="137:30">c</name></expr></argument>, <argument pos:start="137:33" pos:end="137:33"><expr pos:start="137:33" pos:end="137:33"><name pos:start="137:33" pos:end="137:33">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="139:7" pos:end="143:5">else if <condition pos:start="139:15" pos:end="139:49">(<expr pos:start="139:16" pos:end="139:48"><name pos:start="139:16" pos:end="139:29"><name pos:start="139:16" pos:end="139:20">avctx</name><operator pos:start="139:21" pos:end="139:22">-&gt;</operator><name pos:start="139:23" pos:end="139:29">pix_fmt</name></name> <operator pos:start="139:31" pos:end="139:32">==</operator> <name pos:start="139:34" pos:end="139:48">AV_PIX_FMT_PAL8</name></expr>)</condition> <block pos:start="139:51" pos:end="143:5">{<block_content pos:start="141:9" pos:end="141:30">

        <expr_stmt pos:start="141:9" pos:end="141:30"><expr pos:start="141:9" pos:end="141:29"><call pos:start="141:9" pos:end="141:29"><name pos:start="141:9" pos:end="141:23">cdxl_decode_rgb</name><argument_list pos:start="141:24" pos:end="141:29">(<argument pos:start="141:25" pos:end="141:25"><expr pos:start="141:25" pos:end="141:25"><name pos:start="141:25" pos:end="141:25">c</name></expr></argument>, <argument pos:start="141:28" pos:end="141:28"><expr pos:start="141:28" pos:end="141:28"><name pos:start="141:28" pos:end="141:28">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="143:7" pos:end="147:5">else <block pos:start="143:12" pos:end="147:5">{<block_content pos:start="145:9" pos:end="145:30">

        <expr_stmt pos:start="145:9" pos:end="145:30"><expr pos:start="145:9" pos:end="145:29"><call pos:start="145:9" pos:end="145:29"><name pos:start="145:9" pos:end="145:23">cdxl_decode_raw</name><argument_list pos:start="145:24" pos:end="145:29">(<argument pos:start="145:25" pos:end="145:25"><expr pos:start="145:25" pos:end="145:25"><name pos:start="145:25" pos:end="145:25">c</name></expr></argument>, <argument pos:start="145:28" pos:end="145:28"><expr pos:start="145:28" pos:end="145:28"><name pos:start="145:28" pos:end="145:28">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:19"><expr pos:start="149:5" pos:end="149:18"><operator pos:start="149:5" pos:end="149:5">*</operator><name pos:start="149:6" pos:end="149:14">got_frame</name> <operator pos:start="149:16" pos:end="149:16">=</operator> <literal type="number" pos:start="149:18" pos:end="149:18">1</literal></expr>;</expr_stmt>



    <return pos:start="153:5" pos:end="153:20">return <expr pos:start="153:12" pos:end="153:19"><name pos:start="153:12" pos:end="153:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
