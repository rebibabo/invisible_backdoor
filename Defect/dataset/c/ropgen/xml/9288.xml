<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9288.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">mov_read_keys</name><parameter_list pos:start="1:25" pos:end="1:70">(<parameter pos:start="1:26" pos:end="1:38"><decl pos:start="1:26" pos:end="1:38"><type pos:start="1:26" pos:end="1:38"><name pos:start="1:26" pos:end="1:35">MOVContext</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">c</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:55"><decl pos:start="1:41" pos:end="1:55"><type pos:start="1:41" pos:end="1:55"><name pos:start="1:41" pos:end="1:51">AVIOContext</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:55">pb</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:69"><decl pos:start="1:58" pos:end="1:69"><type pos:start="1:58" pos:end="1:69"><name pos:start="1:58" pos:end="1:64">MOVAtom</name></type> <name pos:start="1:66" pos:end="1:69">atom</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="81:1">{<block_content pos:start="5:5" pos:end="79:13">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:18">count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:14">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="13:17"><if pos:start="11:5" pos:end="13:17">if <condition pos:start="11:8" pos:end="11:22">(<expr pos:start="11:9" pos:end="11:21"><name pos:start="11:9" pos:end="11:17"><name pos:start="11:9" pos:end="11:12">atom</name><operator pos:start="11:13" pos:end="11:13">.</operator><name pos:start="11:14" pos:end="11:17">size</name></name> <operator pos:start="11:19" pos:end="11:19">&lt;</operator> <literal type="number" pos:start="11:21" pos:end="11:21">8</literal></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="13:17"><block_content pos:start="13:9" pos:end="13:17">

        <return pos:start="13:9" pos:end="13:17">return <expr pos:start="13:16" pos:end="13:16"><literal type="number" pos:start="13:16" pos:end="13:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:21"><expr pos:start="17:5" pos:end="17:20"><call pos:start="17:5" pos:end="17:20"><name pos:start="17:5" pos:end="17:13">avio_skip</name><argument_list pos:start="17:14" pos:end="17:20">(<argument pos:start="17:15" pos:end="17:16"><expr pos:start="17:15" pos:end="17:16"><name pos:start="17:15" pos:end="17:16">pb</name></expr></argument>, <argument pos:start="17:19" pos:end="17:19"><expr pos:start="17:19" pos:end="17:19"><literal type="number" pos:start="17:19" pos:end="17:19">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:26"><expr pos:start="19:5" pos:end="19:25"><name pos:start="19:5" pos:end="19:9">count</name> <operator pos:start="19:11" pos:end="19:11">=</operator> <call pos:start="19:13" pos:end="19:25"><name pos:start="19:13" pos:end="19:21">avio_rb32</name><argument_list pos:start="19:22" pos:end="19:25">(<argument pos:start="19:23" pos:end="19:24"><expr pos:start="19:23" pos:end="19:24"><name pos:start="19:23" pos:end="19:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="29:5"><if pos:start="21:5" pos:end="29:5">if <condition pos:start="21:8" pos:end="21:49">(<expr pos:start="21:9" pos:end="21:48"><name pos:start="21:9" pos:end="21:13">count</name> <operator pos:start="21:15" pos:end="21:15">&gt;</operator> <name pos:start="21:17" pos:end="21:24">UINT_MAX</name> <operator pos:start="21:26" pos:end="21:26">/</operator> <sizeof pos:start="21:28" pos:end="21:48">sizeof<argument_list pos:start="21:34" pos:end="21:48">(<argument pos:start="21:35" pos:end="21:47"><expr pos:start="21:35" pos:end="21:47"><operator pos:start="21:35" pos:end="21:35">*</operator><name pos:start="21:36" pos:end="21:47"><name pos:start="21:36" pos:end="21:36">c</name><operator pos:start="21:37" pos:end="21:38">-&gt;</operator><name pos:start="21:39" pos:end="21:47">meta_keys</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="21:51" pos:end="29:5">{<block_content pos:start="23:9" pos:end="27:35">

        <expr_stmt pos:start="23:9" pos:end="25:74"><expr pos:start="23:9" pos:end="25:73"><call pos:start="23:9" pos:end="25:73"><name pos:start="23:9" pos:end="23:14">av_log</name><argument_list pos:start="23:15" pos:end="25:73">(<argument pos:start="23:16" pos:end="23:20"><expr pos:start="23:16" pos:end="23:20"><name pos:start="23:16" pos:end="23:20"><name pos:start="23:16" pos:end="23:16">c</name><operator pos:start="23:17" pos:end="23:18">-&gt;</operator><name pos:start="23:19" pos:end="23:20">fc</name></name></expr></argument>, <argument pos:start="23:23" pos:end="23:34"><expr pos:start="23:23" pos:end="23:34"><name pos:start="23:23" pos:end="23:34">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="25:16" pos:end="25:65"><expr pos:start="25:16" pos:end="25:65"><literal type="string" pos:start="25:16" pos:end="25:65">"The 'keys' atom with the invalid key count: %d\n"</literal></expr></argument>, <argument pos:start="25:68" pos:end="25:72"><expr pos:start="25:68" pos:end="25:72"><name pos:start="25:68" pos:end="25:72">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:35">return <expr pos:start="27:16" pos:end="27:34"><name pos:start="27:16" pos:end="27:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:35"><expr pos:start="33:5" pos:end="33:34"><name pos:start="33:5" pos:end="33:22"><name pos:start="33:5" pos:end="33:5">c</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:22">meta_keys_count</name></name> <operator pos:start="33:24" pos:end="33:24">=</operator> <name pos:start="33:26" pos:end="33:30">count</name> <operator pos:start="33:32" pos:end="33:32">+</operator> <literal type="number" pos:start="33:34" pos:end="33:34">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:74"><expr pos:start="35:5" pos:end="35:73"><name pos:start="35:5" pos:end="35:16"><name pos:start="35:5" pos:end="35:5">c</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:16">meta_keys</name></name> <operator pos:start="35:18" pos:end="35:18">=</operator> <call pos:start="35:20" pos:end="35:73"><name pos:start="35:20" pos:end="35:29">av_mallocz</name><argument_list pos:start="35:30" pos:end="35:73">(<argument pos:start="35:31" pos:end="35:72"><expr pos:start="35:31" pos:end="35:72"><name pos:start="35:31" pos:end="35:48"><name pos:start="35:31" pos:end="35:31">c</name><operator pos:start="35:32" pos:end="35:33">-&gt;</operator><name pos:start="35:34" pos:end="35:48">meta_keys_count</name></name> <operator pos:start="35:50" pos:end="35:50">*</operator> <sizeof pos:start="35:52" pos:end="35:72">sizeof<argument_list pos:start="35:58" pos:end="35:72">(<argument pos:start="35:59" pos:end="35:71"><expr pos:start="35:59" pos:end="35:71"><operator pos:start="35:59" pos:end="35:59">*</operator><name pos:start="35:60" pos:end="35:71"><name pos:start="35:60" pos:end="35:60">c</name><operator pos:start="35:61" pos:end="35:62">-&gt;</operator><name pos:start="35:63" pos:end="35:71">meta_keys</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="39:31"><if pos:start="37:5" pos:end="39:31">if <condition pos:start="37:8" pos:end="37:22">(<expr pos:start="37:9" pos:end="37:21"><operator pos:start="37:9" pos:end="37:9">!</operator><name pos:start="37:10" pos:end="37:21"><name pos:start="37:10" pos:end="37:10">c</name><operator pos:start="37:11" pos:end="37:12">-&gt;</operator><name pos:start="37:13" pos:end="37:21">meta_keys</name></name></expr>)</condition><block type="pseudo" pos:start="39:9" pos:end="39:31"><block_content pos:start="39:9" pos:end="39:31">

        <return pos:start="39:9" pos:end="39:31">return <expr pos:start="39:16" pos:end="39:30"><call pos:start="39:16" pos:end="39:30"><name pos:start="39:16" pos:end="39:22">AVERROR</name><argument_list pos:start="39:23" pos:end="39:30">(<argument pos:start="39:24" pos:end="39:29"><expr pos:start="39:24" pos:end="39:29"><name pos:start="39:24" pos:end="39:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <for pos:start="43:5" pos:end="75:5">for <control pos:start="43:9" pos:end="43:32">(<init pos:start="43:10" pos:end="43:15"><expr pos:start="43:10" pos:end="43:14"><name pos:start="43:10" pos:end="43:10">i</name> <operator pos:start="43:12" pos:end="43:12">=</operator> <literal type="number" pos:start="43:14" pos:end="43:14">1</literal></expr>;</init> <condition pos:start="43:17" pos:end="43:27"><expr pos:start="43:17" pos:end="43:26"><name pos:start="43:17" pos:end="43:17">i</name> <operator pos:start="43:19" pos:end="43:20">&lt;=</operator> <name pos:start="43:22" pos:end="43:26">count</name></expr>;</condition> <incr pos:start="43:29" pos:end="43:31"><expr pos:start="43:29" pos:end="43:31"><operator pos:start="43:29" pos:end="43:30">++</operator><name pos:start="43:31" pos:end="43:31">i</name></expr></incr>)</control> <block pos:start="43:34" pos:end="75:5">{<block_content pos:start="45:9" pos:end="73:49">

        <decl_stmt pos:start="45:9" pos:end="45:42"><decl pos:start="45:9" pos:end="45:41"><type pos:start="45:9" pos:end="45:16"><name pos:start="45:9" pos:end="45:16">uint32_t</name></type> <name pos:start="45:18" pos:end="45:25">key_size</name> <init pos:start="45:27" pos:end="45:41">= <expr pos:start="45:29" pos:end="45:41"><call pos:start="45:29" pos:end="45:41"><name pos:start="45:29" pos:end="45:37">avio_rb32</name><argument_list pos:start="45:38" pos:end="45:41">(<argument pos:start="45:39" pos:end="45:40"><expr pos:start="45:39" pos:end="45:40"><name pos:start="45:39" pos:end="45:40">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="47:9" pos:end="47:38"><decl pos:start="47:9" pos:end="47:37"><type pos:start="47:9" pos:end="47:16"><name pos:start="47:9" pos:end="47:16">uint32_t</name></type> <name pos:start="47:18" pos:end="47:21">type</name> <init pos:start="47:23" pos:end="47:37">= <expr pos:start="47:25" pos:end="47:37"><call pos:start="47:25" pos:end="47:37"><name pos:start="47:25" pos:end="47:33">avio_rl32</name><argument_list pos:start="47:34" pos:end="47:37">(<argument pos:start="47:35" pos:end="47:36"><expr pos:start="47:35" pos:end="47:36"><name pos:start="47:35" pos:end="47:36">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="49:9" pos:end="57:9"><if pos:start="49:9" pos:end="57:9">if <condition pos:start="49:12" pos:end="49:25">(<expr pos:start="49:13" pos:end="49:24"><name pos:start="49:13" pos:end="49:20">key_size</name> <operator pos:start="49:22" pos:end="49:22">&lt;</operator> <literal type="number" pos:start="49:24" pos:end="49:24">8</literal></expr>)</condition> <block pos:start="49:27" pos:end="57:9">{<block_content pos:start="51:13" pos:end="55:39">

            <expr_stmt pos:start="51:13" pos:end="53:78"><expr pos:start="51:13" pos:end="53:77"><call pos:start="51:13" pos:end="53:77"><name pos:start="51:13" pos:end="51:18">av_log</name><argument_list pos:start="51:19" pos:end="53:77">(<argument pos:start="51:20" pos:end="51:24"><expr pos:start="51:20" pos:end="51:24"><name pos:start="51:20" pos:end="51:24"><name pos:start="51:20" pos:end="51:20">c</name><operator pos:start="51:21" pos:end="51:22">-&gt;</operator><name pos:start="51:23" pos:end="51:24">fc</name></name></expr></argument>, <argument pos:start="51:27" pos:end="51:38"><expr pos:start="51:27" pos:end="51:38"><name pos:start="51:27" pos:end="51:38">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="53:20" pos:end="53:63"><expr pos:start="53:20" pos:end="53:63"><literal type="string" pos:start="53:20" pos:end="53:63">"The key# %d in meta has invalid size: %d\n"</literal></expr></argument>, <argument pos:start="53:66" pos:end="53:66"><expr pos:start="53:66" pos:end="53:66"><name pos:start="53:66" pos:end="53:66">i</name></expr></argument>, <argument pos:start="53:69" pos:end="53:76"><expr pos:start="53:69" pos:end="53:76"><name pos:start="53:69" pos:end="53:76">key_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="55:13" pos:end="55:39">return <expr pos:start="55:20" pos:end="55:38"><name pos:start="55:20" pos:end="55:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:22"><expr pos:start="59:9" pos:end="59:21"><name pos:start="59:9" pos:end="59:16">key_size</name> <operator pos:start="59:18" pos:end="59:19">-=</operator> <literal type="number" pos:start="59:21" pos:end="59:21">8</literal></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="65:9"><if pos:start="61:9" pos:end="65:9">if <condition pos:start="61:12" pos:end="61:43">(<expr pos:start="61:13" pos:end="61:42"><name pos:start="61:13" pos:end="61:16">type</name> <operator pos:start="61:18" pos:end="61:19">!=</operator> <call pos:start="61:21" pos:end="61:42"><name pos:start="61:21" pos:end="61:25">MKTAG</name><argument_list pos:start="61:26" pos:end="61:42">(<argument pos:start="61:27" pos:end="61:29"><expr pos:start="61:27" pos:end="61:29"><literal type="char" pos:start="61:27" pos:end="61:29">'m'</literal></expr></argument>,<argument pos:start="61:31" pos:end="61:33"><expr pos:start="61:31" pos:end="61:33"><literal type="char" pos:start="61:31" pos:end="61:33">'d'</literal></expr></argument>,<argument pos:start="61:35" pos:end="61:37"><expr pos:start="61:35" pos:end="61:37"><literal type="char" pos:start="61:35" pos:end="61:37">'t'</literal></expr></argument>,<argument pos:start="61:39" pos:end="61:41"><expr pos:start="61:39" pos:end="61:41"><literal type="char" pos:start="61:39" pos:end="61:41">'a'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="61:45" pos:end="65:9">{<block_content pos:start="63:13" pos:end="63:36">

            <expr_stmt pos:start="63:13" pos:end="63:36"><expr pos:start="63:13" pos:end="63:35"><call pos:start="63:13" pos:end="63:35"><name pos:start="63:13" pos:end="63:21">avio_skip</name><argument_list pos:start="63:22" pos:end="63:35">(<argument pos:start="63:23" pos:end="63:24"><expr pos:start="63:23" pos:end="63:24"><name pos:start="63:23" pos:end="63:24">pb</name></expr></argument>, <argument pos:start="63:27" pos:end="63:34"><expr pos:start="63:27" pos:end="63:34"><name pos:start="63:27" pos:end="63:34">key_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:51"><expr pos:start="67:9" pos:end="67:50"><name pos:start="67:9" pos:end="67:23"><name pos:start="67:9" pos:end="67:9">c</name><operator pos:start="67:10" pos:end="67:11">-&gt;</operator><name pos:start="67:12" pos:end="67:20">meta_keys</name><index pos:start="67:21" pos:end="67:23">[<expr pos:start="67:22" pos:end="67:22"><name pos:start="67:22" pos:end="67:22">i</name></expr>]</index></name> <operator pos:start="67:25" pos:end="67:25">=</operator> <call pos:start="67:27" pos:end="67:50"><name pos:start="67:27" pos:end="67:36">av_mallocz</name><argument_list pos:start="67:37" pos:end="67:50">(<argument pos:start="67:38" pos:end="67:49"><expr pos:start="67:38" pos:end="67:49"><name pos:start="67:38" pos:end="67:45">key_size</name> <operator pos:start="67:47" pos:end="67:47">+</operator> <literal type="number" pos:start="67:49" pos:end="67:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="69:9" pos:end="71:35"><if pos:start="69:9" pos:end="71:35">if <condition pos:start="69:12" pos:end="69:29">(<expr pos:start="69:13" pos:end="69:28"><operator pos:start="69:13" pos:end="69:13">!</operator><name pos:start="69:14" pos:end="69:28"><name pos:start="69:14" pos:end="69:14">c</name><operator pos:start="69:15" pos:end="69:16">-&gt;</operator><name pos:start="69:17" pos:end="69:25">meta_keys</name><index pos:start="69:26" pos:end="69:28">[<expr pos:start="69:27" pos:end="69:27"><name pos:start="69:27" pos:end="69:27">i</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="71:13" pos:end="71:35"><block_content pos:start="71:13" pos:end="71:35">

            <return pos:start="71:13" pos:end="71:35">return <expr pos:start="71:20" pos:end="71:34"><call pos:start="71:20" pos:end="71:34"><name pos:start="71:20" pos:end="71:26">AVERROR</name><argument_list pos:start="71:27" pos:end="71:34">(<argument pos:start="71:28" pos:end="71:33"><expr pos:start="71:28" pos:end="71:33"><name pos:start="71:28" pos:end="71:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:49"><expr pos:start="73:9" pos:end="73:48"><call pos:start="73:9" pos:end="73:48"><name pos:start="73:9" pos:end="73:17">avio_read</name><argument_list pos:start="73:18" pos:end="73:48">(<argument pos:start="73:19" pos:end="73:20"><expr pos:start="73:19" pos:end="73:20"><name pos:start="73:19" pos:end="73:20">pb</name></expr></argument>, <argument pos:start="73:23" pos:end="73:37"><expr pos:start="73:23" pos:end="73:37"><name pos:start="73:23" pos:end="73:37"><name pos:start="73:23" pos:end="73:23">c</name><operator pos:start="73:24" pos:end="73:25">-&gt;</operator><name pos:start="73:26" pos:end="73:34">meta_keys</name><index pos:start="73:35" pos:end="73:37">[<expr pos:start="73:36" pos:end="73:36"><name pos:start="73:36" pos:end="73:36">i</name></expr>]</index></name></expr></argument>, <argument pos:start="73:40" pos:end="73:47"><expr pos:start="73:40" pos:end="73:47"><name pos:start="73:40" pos:end="73:47">key_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="79:5" pos:end="79:13">return <expr pos:start="79:12" pos:end="79:12"><literal type="number" pos:start="79:12" pos:end="79:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
