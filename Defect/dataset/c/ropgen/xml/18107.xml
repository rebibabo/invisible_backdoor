<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18107.c" pos:tabs="8"><function pos:start="1:1" pos:end="185:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">lm32_evr_init</name><parameter_list pos:start="1:26" pos:end="1:48">(<parameter pos:start="1:27" pos:end="1:47"><decl pos:start="1:27" pos:end="1:47"><type pos:start="1:27" pos:end="1:40"><name pos:start="1:27" pos:end="1:38">MachineState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:47">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="185:1">{<block_content pos:start="5:5" pos:end="183:52">

    <decl_stmt pos:start="5:5" pos:end="5:47"><decl pos:start="5:5" pos:end="5:46"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:25">cpu_model</name> <init pos:start="5:27" pos:end="5:46">= <expr pos:start="5:29" pos:end="5:46"><name pos:start="5:29" pos:end="5:46"><name pos:start="5:29" pos:end="5:35">machine</name><operator pos:start="5:36" pos:end="5:37">-&gt;</operator><name pos:start="5:38" pos:end="5:46">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:59"><decl pos:start="7:5" pos:end="7:58"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:31">kernel_filename</name> <init pos:start="7:33" pos:end="7:58">= <expr pos:start="7:35" pos:end="7:58"><name pos:start="7:35" pos:end="7:58"><name pos:start="7:35" pos:end="7:41">machine</name><operator pos:start="7:42" pos:end="7:43">-&gt;</operator><name pos:start="7:44" pos:end="7:58">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">LM32CPU</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:16">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">CPULM32State</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:21">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:13">DriveInfo</name> <modifier pos:start="13:15" pos:end="13:15">*</modifier></type><name pos:start="13:16" pos:end="13:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:59"><decl pos:start="15:5" pos:end="15:58"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:16">MemoryRegion</name> <modifier pos:start="15:18" pos:end="15:18">*</modifier></type><name pos:start="15:19" pos:end="15:35">address_space_mem</name> <init pos:start="15:37" pos:end="15:58">=  <expr pos:start="15:40" pos:end="15:58"><call pos:start="15:40" pos:end="15:58"><name pos:start="15:40" pos:end="15:56">get_system_memory</name><argument_list pos:start="15:57" pos:end="15:58">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:52"><decl pos:start="17:5" pos:end="17:51"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">MemoryRegion</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:26">phys_ram</name> <init pos:start="17:28" pos:end="17:51">= <expr pos:start="17:30" pos:end="17:51"><call pos:start="17:30" pos:end="17:51"><name pos:start="17:30" pos:end="17:34">g_new</name><argument_list pos:start="17:35" pos:end="17:51">(<argument pos:start="17:36" pos:end="17:47"><expr pos:start="17:36" pos:end="17:47"><name pos:start="17:36" pos:end="17:47">MemoryRegion</name></expr></argument>, <argument pos:start="17:50" pos:end="17:50"><expr pos:start="17:50" pos:end="17:50"><literal type="number" pos:start="17:50" pos:end="17:50">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:31"><decl pos:start="19:5" pos:end="19:21"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:12">qemu_irq</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:21">cpu_irq</name></decl>, <decl pos:start="19:24" pos:end="19:30"><type ref="prev" pos:start="19:5" pos:end="19:14"/><name pos:start="19:24" pos:end="19:30"><name pos:start="19:24" pos:end="19:26">irq</name><index pos:start="19:27" pos:end="19:30">[<expr pos:start="19:28" pos:end="19:29"><literal type="number" pos:start="19:28" pos:end="19:29">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:26"><decl pos:start="21:5" pos:end="21:25"><type pos:start="21:5" pos:end="21:15"><name pos:start="21:5" pos:end="21:13">ResetInfo</name> <modifier pos:start="21:15" pos:end="21:15">*</modifier></type><name pos:start="21:16" pos:end="21:25">reset_info</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:10"><decl pos:start="23:5" pos:end="23:9"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:9">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:20">/* memory map */</comment>

    <decl_stmt pos:start="29:5" pos:end="29:36"><decl pos:start="29:5" pos:end="29:35"><type pos:start="29:5" pos:end="29:10"><name pos:start="29:5" pos:end="29:10">hwaddr</name></type> <name pos:start="29:12" pos:end="29:21">flash_base</name>  <init pos:start="29:24" pos:end="29:35">= <expr pos:start="29:26" pos:end="29:35"><literal type="number" pos:start="29:26" pos:end="29:35">0x04000000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:48"><decl pos:start="31:5" pos:end="31:47"><type pos:start="31:5" pos:end="31:10"><name pos:start="31:5" pos:end="31:10">size_t</name></type> <name pos:start="31:12" pos:end="31:28">flash_sector_size</name>       <init pos:start="31:36" pos:end="31:47">= <expr pos:start="31:38" pos:end="31:47"><literal type="number" pos:start="31:38" pos:end="31:40">256</literal> <operator pos:start="31:42" pos:end="31:42">*</operator> <literal type="number" pos:start="31:44" pos:end="31:47">1024</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:54"><decl pos:start="33:5" pos:end="33:53"><type pos:start="33:5" pos:end="33:10"><name pos:start="33:5" pos:end="33:10">size_t</name></type> <name pos:start="33:12" pos:end="33:21">flash_size</name>              <init pos:start="33:36" pos:end="33:53">= <expr pos:start="33:38" pos:end="33:53"><literal type="number" pos:start="33:38" pos:end="33:39">32</literal> <operator pos:start="33:41" pos:end="33:41">*</operator> <literal type="number" pos:start="33:43" pos:end="33:46">1024</literal> <operator pos:start="33:48" pos:end="33:48">*</operator> <literal type="number" pos:start="33:50" pos:end="33:53">1024</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:36"><decl pos:start="35:5" pos:end="35:35"><type pos:start="35:5" pos:end="35:10"><name pos:start="35:5" pos:end="35:10">hwaddr</name></type> <name pos:start="35:12" pos:end="35:19">ram_base</name>    <init pos:start="35:24" pos:end="35:35">= <expr pos:start="35:26" pos:end="35:35"><literal type="number" pos:start="35:26" pos:end="35:35">0x08000000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:54"><decl pos:start="37:5" pos:end="37:53"><type pos:start="37:5" pos:end="37:10"><name pos:start="37:5" pos:end="37:10">size_t</name></type> <name pos:start="37:12" pos:end="37:19">ram_size</name>                <init pos:start="37:36" pos:end="37:53">= <expr pos:start="37:38" pos:end="37:53"><literal type="number" pos:start="37:38" pos:end="37:39">64</literal> <operator pos:start="37:41" pos:end="37:41">*</operator> <literal type="number" pos:start="37:43" pos:end="37:46">1024</literal> <operator pos:start="37:48" pos:end="37:48">*</operator> <literal type="number" pos:start="37:50" pos:end="37:53">1024</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:36"><decl pos:start="39:5" pos:end="39:35"><type pos:start="39:5" pos:end="39:10"><name pos:start="39:5" pos:end="39:10">hwaddr</name></type> <name pos:start="39:12" pos:end="39:22">timer0_base</name> <init pos:start="39:24" pos:end="39:35">= <expr pos:start="39:26" pos:end="39:35"><literal type="number" pos:start="39:26" pos:end="39:35">0x80002000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:36"><decl pos:start="41:5" pos:end="41:35"><type pos:start="41:5" pos:end="41:10"><name pos:start="41:5" pos:end="41:10">hwaddr</name></type> <name pos:start="41:12" pos:end="41:21">uart0_base</name>  <init pos:start="41:24" pos:end="41:35">= <expr pos:start="41:26" pos:end="41:35"><literal type="number" pos:start="41:26" pos:end="41:35">0x80006000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:36"><decl pos:start="43:5" pos:end="43:35"><type pos:start="43:5" pos:end="43:10"><name pos:start="43:5" pos:end="43:10">hwaddr</name></type> <name pos:start="43:12" pos:end="43:22">timer1_base</name> <init pos:start="43:24" pos:end="43:35">= <expr pos:start="43:26" pos:end="43:35"><literal type="number" pos:start="43:26" pos:end="43:35">0x8000a000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:39"><decl pos:start="45:5" pos:end="45:38"><type pos:start="45:5" pos:end="45:7"><name pos:start="45:5" pos:end="45:7">int</name></type> <name pos:start="45:9" pos:end="45:17">uart0_irq</name>                  <init pos:start="45:36" pos:end="45:38">= <expr pos:start="45:38" pos:end="45:38"><literal type="number" pos:start="45:38" pos:end="45:38">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:39"><decl pos:start="47:5" pos:end="47:38"><type pos:start="47:5" pos:end="47:7"><name pos:start="47:5" pos:end="47:7">int</name></type> <name pos:start="47:9" pos:end="47:18">timer0_irq</name>                 <init pos:start="47:36" pos:end="47:38">= <expr pos:start="47:38" pos:end="47:38"><literal type="number" pos:start="47:38" pos:end="47:38">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:39"><decl pos:start="49:5" pos:end="49:38"><type pos:start="49:5" pos:end="49:7"><name pos:start="49:5" pos:end="49:7">int</name></type> <name pos:start="49:9" pos:end="49:18">timer1_irq</name>                 <init pos:start="49:36" pos:end="49:38">= <expr pos:start="49:38" pos:end="49:38"><literal type="number" pos:start="49:38" pos:end="49:38">3</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:46"><expr pos:start="53:5" pos:end="53:45"><name pos:start="53:5" pos:end="53:14">reset_info</name> <operator pos:start="53:16" pos:end="53:16">=</operator> <call pos:start="53:18" pos:end="53:45"><name pos:start="53:18" pos:end="53:26">g_malloc0</name><argument_list pos:start="53:27" pos:end="53:45">(<argument pos:start="53:28" pos:end="53:44"><expr pos:start="53:28" pos:end="53:44"><sizeof pos:start="53:28" pos:end="53:44">sizeof<argument_list pos:start="53:34" pos:end="53:44">(<argument pos:start="53:35" pos:end="53:43"><expr pos:start="53:35" pos:end="53:43"><name pos:start="53:35" pos:end="53:43">ResetInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="57:5" pos:end="61:5"><if pos:start="57:5" pos:end="61:5">if <condition pos:start="57:8" pos:end="57:26">(<expr pos:start="57:9" pos:end="57:25"><name pos:start="57:9" pos:end="57:17">cpu_model</name> <operator pos:start="57:19" pos:end="57:20">==</operator> <name pos:start="57:22" pos:end="57:25">NULL</name></expr>)</condition> <block pos:start="57:28" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:32">

        <expr_stmt pos:start="59:9" pos:end="59:32"><expr pos:start="59:9" pos:end="59:31"><name pos:start="59:9" pos:end="59:17">cpu_model</name> <operator pos:start="59:19" pos:end="59:19">=</operator> <literal type="string" pos:start="59:21" pos:end="59:31">"lm32-full"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:35"><expr pos:start="63:5" pos:end="63:34"><name pos:start="63:5" pos:end="63:7">cpu</name> <operator pos:start="63:9" pos:end="63:9">=</operator> <call pos:start="63:11" pos:end="63:34"><name pos:start="63:11" pos:end="63:23">cpu_lm32_init</name><argument_list pos:start="63:24" pos:end="63:34">(<argument pos:start="63:25" pos:end="63:33"><expr pos:start="63:25" pos:end="63:33"><name pos:start="63:25" pos:end="63:33">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="71:5"><if pos:start="65:5" pos:end="71:5">if <condition pos:start="65:8" pos:end="65:20">(<expr pos:start="65:9" pos:end="65:19"><name pos:start="65:9" pos:end="65:11">cpu</name> <operator pos:start="65:13" pos:end="65:14">==</operator> <name pos:start="65:16" pos:end="65:19">NULL</name></expr>)</condition> <block pos:start="65:22" pos:end="71:5">{<block_content pos:start="67:9" pos:end="69:16">

        <expr_stmt pos:start="67:9" pos:end="67:70"><expr pos:start="67:9" pos:end="67:69"><call pos:start="67:9" pos:end="67:69"><name pos:start="67:9" pos:end="67:15">fprintf</name><argument_list pos:start="67:16" pos:end="67:69">(<argument pos:start="67:17" pos:end="67:22"><expr pos:start="67:17" pos:end="67:22"><name pos:start="67:17" pos:end="67:22">stderr</name></expr></argument>, <argument pos:start="67:25" pos:end="67:57"><expr pos:start="67:25" pos:end="67:57"><literal type="string" pos:start="67:25" pos:end="67:57">"qemu: unable to find CPU '%s'\n"</literal></expr></argument>, <argument pos:start="67:60" pos:end="67:68"><expr pos:start="67:60" pos:end="67:68"><name pos:start="67:60" pos:end="67:68">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:16"><expr pos:start="69:9" pos:end="69:15"><call pos:start="69:9" pos:end="69:15"><name pos:start="69:9" pos:end="69:12">exit</name><argument_list pos:start="69:13" pos:end="69:15">(<argument pos:start="69:14" pos:end="69:14"><expr pos:start="69:14" pos:end="69:14"><literal type="number" pos:start="69:14" pos:end="69:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:20"><expr pos:start="75:5" pos:end="75:19"><name pos:start="75:5" pos:end="75:7">env</name> <operator pos:start="75:9" pos:end="75:9">=</operator> <operator pos:start="75:11" pos:end="75:11">&amp;</operator><name pos:start="75:12" pos:end="75:19"><name pos:start="75:12" pos:end="75:14">cpu</name><operator pos:start="75:15" pos:end="75:16">-&gt;</operator><name pos:start="75:17" pos:end="75:19">env</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:26"><expr pos:start="77:5" pos:end="77:25"><name pos:start="77:5" pos:end="77:19"><name pos:start="77:5" pos:end="77:14">reset_info</name><operator pos:start="77:15" pos:end="77:16">-&gt;</operator><name pos:start="77:17" pos:end="77:19">cpu</name></name> <operator pos:start="77:21" pos:end="77:21">=</operator> <name pos:start="77:23" pos:end="77:25">cpu</name></expr>;</expr_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:40"><expr pos:start="81:5" pos:end="81:39"><name pos:start="81:5" pos:end="81:26"><name pos:start="81:5" pos:end="81:14">reset_info</name><operator pos:start="81:15" pos:end="81:16">-&gt;</operator><name pos:start="81:17" pos:end="81:26">flash_base</name></name> <operator pos:start="81:28" pos:end="81:28">=</operator> <name pos:start="81:30" pos:end="81:39">flash_base</name></expr>;</expr_stmt>



    <expr_stmt pos:start="85:5" pos:end="87:41"><expr pos:start="85:5" pos:end="87:40"><call pos:start="85:5" pos:end="87:40"><name pos:start="85:5" pos:end="85:26">memory_region_init_ram</name><argument_list pos:start="85:27" pos:end="87:40">(<argument pos:start="85:28" pos:end="85:35"><expr pos:start="85:28" pos:end="85:35"><name pos:start="85:28" pos:end="85:35">phys_ram</name></expr></argument>, <argument pos:start="85:38" pos:end="85:41"><expr pos:start="85:38" pos:end="85:41"><name pos:start="85:38" pos:end="85:41">NULL</name></expr></argument>, <argument pos:start="85:44" pos:end="85:59"><expr pos:start="85:44" pos:end="85:59"><literal type="string" pos:start="85:44" pos:end="85:59">"lm32_evr.sdram"</literal></expr></argument>, <argument pos:start="85:62" pos:end="85:69"><expr pos:start="85:62" pos:end="85:69"><name pos:start="85:62" pos:end="85:69">ram_size</name></expr></argument>,

                           <argument pos:start="87:28" pos:end="87:39"><expr pos:start="87:28" pos:end="87:39"><operator pos:start="87:28" pos:end="87:28">&amp;</operator><name pos:start="87:29" pos:end="87:39">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:42"><expr pos:start="89:5" pos:end="89:41"><call pos:start="89:5" pos:end="89:41"><name pos:start="89:5" pos:end="89:31">vmstate_register_ram_global</name><argument_list pos:start="89:32" pos:end="89:41">(<argument pos:start="89:33" pos:end="89:40"><expr pos:start="89:33" pos:end="89:40"><name pos:start="89:33" pos:end="89:40">phys_ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:71"><expr pos:start="91:5" pos:end="91:70"><call pos:start="91:5" pos:end="91:70"><name pos:start="91:5" pos:end="91:31">memory_region_add_subregion</name><argument_list pos:start="91:32" pos:end="91:70">(<argument pos:start="91:33" pos:end="91:49"><expr pos:start="91:33" pos:end="91:49"><name pos:start="91:33" pos:end="91:49">address_space_mem</name></expr></argument>, <argument pos:start="91:52" pos:end="91:59"><expr pos:start="91:52" pos:end="91:59"><name pos:start="91:52" pos:end="91:59">ram_base</name></expr></argument>, <argument pos:start="91:62" pos:end="91:69"><expr pos:start="91:62" pos:end="91:69"><name pos:start="91:62" pos:end="91:69">phys_ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:39"><expr pos:start="95:5" pos:end="95:38"><name pos:start="95:5" pos:end="95:9">dinfo</name> <operator pos:start="95:11" pos:end="95:11">=</operator> <call pos:start="95:13" pos:end="95:38"><name pos:start="95:13" pos:end="95:21">drive_get</name><argument_list pos:start="95:22" pos:end="95:38">(<argument pos:start="95:23" pos:end="95:31"><expr pos:start="95:23" pos:end="95:31"><name pos:start="95:23" pos:end="95:31">IF_PFLASH</name></expr></argument>, <argument pos:start="95:34" pos:end="95:34"><expr pos:start="95:34" pos:end="95:34"><literal type="number" pos:start="95:34" pos:end="95:34">0</literal></expr></argument>, <argument pos:start="95:37" pos:end="95:37"><expr pos:start="95:37" pos:end="95:37"><literal type="number" pos:start="95:37" pos:end="95:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="97:5" pos:end="97:28">/* Spansion S29NS128P */</comment>

    <expr_stmt pos:start="99:5" pos:end="105:73"><expr pos:start="99:5" pos:end="105:72"><call pos:start="99:5" pos:end="105:72"><name pos:start="99:5" pos:end="99:25">pflash_cfi02_register</name><argument_list pos:start="99:26" pos:end="105:72">(<argument pos:start="99:27" pos:end="99:36"><expr pos:start="99:27" pos:end="99:36"><name pos:start="99:27" pos:end="99:36">flash_base</name></expr></argument>, <argument pos:start="99:39" pos:end="99:42"><expr pos:start="99:39" pos:end="99:42"><name pos:start="99:39" pos:end="99:42">NULL</name></expr></argument>, <argument pos:start="99:45" pos:end="99:60"><expr pos:start="99:45" pos:end="99:60"><literal type="string" pos:start="99:45" pos:end="99:60">"lm32_evr.flash"</literal></expr></argument>, <argument pos:start="99:63" pos:end="99:72"><expr pos:start="99:63" pos:end="99:72"><name pos:start="99:63" pos:end="99:72">flash_size</name></expr></argument>,

                          <argument pos:start="101:27" pos:end="101:75"><expr pos:start="101:27" pos:end="101:75"><ternary pos:start="101:27" pos:end="101:75"><condition pos:start="101:27" pos:end="101:33"><expr pos:start="101:27" pos:end="101:31"><name pos:start="101:27" pos:end="101:31">dinfo</name></expr> ?</condition><then pos:start="101:35" pos:end="101:68"> <expr pos:start="101:35" pos:end="101:68"><call pos:start="101:35" pos:end="101:68"><name pos:start="101:35" pos:end="101:40">blk_bs</name><argument_list pos:start="101:41" pos:end="101:68">(<argument pos:start="101:42" pos:end="101:67"><expr pos:start="101:42" pos:end="101:67"><call pos:start="101:42" pos:end="101:67"><name pos:start="101:42" pos:end="101:60">blk_by_legacy_dinfo</name><argument_list pos:start="101:61" pos:end="101:67">(<argument pos:start="101:62" pos:end="101:66"><expr pos:start="101:62" pos:end="101:66"><name pos:start="101:62" pos:end="101:66">dinfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else pos:start="101:70" pos:end="101:75">: <expr pos:start="101:72" pos:end="101:75"><name pos:start="101:72" pos:end="101:75">NULL</name></expr></else></ternary></expr></argument>,

                          <argument pos:start="103:27" pos:end="103:43"><expr pos:start="103:27" pos:end="103:43"><name pos:start="103:27" pos:end="103:43">flash_sector_size</name></expr></argument>, <argument pos:start="103:46" pos:end="103:75"><expr pos:start="103:46" pos:end="103:75"><name pos:start="103:46" pos:end="103:55">flash_size</name> <operator pos:start="103:57" pos:end="103:57">/</operator> <name pos:start="103:59" pos:end="103:75">flash_sector_size</name></expr></argument>,

                          <argument pos:start="105:27" pos:end="105:27"><expr pos:start="105:27" pos:end="105:27"><literal type="number" pos:start="105:27" pos:end="105:27">1</literal></expr></argument>, <argument pos:start="105:30" pos:end="105:30"><expr pos:start="105:30" pos:end="105:30"><literal type="number" pos:start="105:30" pos:end="105:30">2</literal></expr></argument>, <argument pos:start="105:33" pos:end="105:36"><expr pos:start="105:33" pos:end="105:36"><literal type="number" pos:start="105:33" pos:end="105:36">0x01</literal></expr></argument>, <argument pos:start="105:39" pos:end="105:42"><expr pos:start="105:39" pos:end="105:42"><literal type="number" pos:start="105:39" pos:end="105:42">0x7e</literal></expr></argument>, <argument pos:start="105:45" pos:end="105:48"><expr pos:start="105:45" pos:end="105:48"><literal type="number" pos:start="105:45" pos:end="105:48">0x43</literal></expr></argument>, <argument pos:start="105:51" pos:end="105:54"><expr pos:start="105:51" pos:end="105:54"><literal type="number" pos:start="105:51" pos:end="105:54">0x00</literal></expr></argument>, <argument pos:start="105:57" pos:end="105:61"><expr pos:start="105:57" pos:end="105:61"><literal type="number" pos:start="105:57" pos:end="105:61">0x555</literal></expr></argument>, <argument pos:start="105:64" pos:end="105:68"><expr pos:start="105:64" pos:end="105:68"><literal type="number" pos:start="105:64" pos:end="105:68">0x2aa</literal></expr></argument>, <argument pos:start="105:71" pos:end="105:71"><expr pos:start="105:71" pos:end="105:71"><literal type="number" pos:start="105:71" pos:end="105:71">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="109:5" pos:end="109:26">/* create irq lines */</comment>

    <expr_stmt pos:start="111:5" pos:end="111:58"><expr pos:start="111:5" pos:end="111:57"><name pos:start="111:5" pos:end="111:11">cpu_irq</name> <operator pos:start="111:13" pos:end="111:13">=</operator> <call pos:start="111:15" pos:end="111:57"><name pos:start="111:15" pos:end="111:32">qemu_allocate_irqs</name><argument_list pos:start="111:33" pos:end="111:57">(<argument pos:start="111:34" pos:end="111:48"><expr pos:start="111:34" pos:end="111:48"><name pos:start="111:34" pos:end="111:48">cpu_irq_handler</name></expr></argument>, <argument pos:start="111:51" pos:end="111:53"><expr pos:start="111:51" pos:end="111:53"><name pos:start="111:51" pos:end="111:53">cpu</name></expr></argument>, <argument pos:start="111:56" pos:end="111:56"><expr pos:start="111:56" pos:end="111:56"><literal type="number" pos:start="111:56" pos:end="111:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:45"><expr pos:start="113:5" pos:end="113:44"><name pos:start="113:5" pos:end="113:18"><name pos:start="113:5" pos:end="113:7">env</name><operator pos:start="113:8" pos:end="113:9">-&gt;</operator><name pos:start="113:10" pos:end="113:18">pic_state</name></name> <operator pos:start="113:20" pos:end="113:20">=</operator> <call pos:start="113:22" pos:end="113:44"><name pos:start="113:22" pos:end="113:34">lm32_pic_init</name><argument_list pos:start="113:35" pos:end="113:44">(<argument pos:start="113:36" pos:end="113:43"><expr pos:start="113:36" pos:end="113:43"><operator pos:start="113:36" pos:end="113:36">*</operator><name pos:start="113:37" pos:end="113:43">cpu_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="115:5" pos:end="119:5">for <control pos:start="115:9" pos:end="115:28">(<init pos:start="115:10" pos:end="115:15"><expr pos:start="115:10" pos:end="115:14"><name pos:start="115:10" pos:end="115:10">i</name> <operator pos:start="115:12" pos:end="115:12">=</operator> <literal type="number" pos:start="115:14" pos:end="115:14">0</literal></expr>;</init> <condition pos:start="115:17" pos:end="115:23"><expr pos:start="115:17" pos:end="115:22"><name pos:start="115:17" pos:end="115:17">i</name> <operator pos:start="115:19" pos:end="115:19">&lt;</operator> <literal type="number" pos:start="115:21" pos:end="115:22">32</literal></expr>;</condition> <incr pos:start="115:25" pos:end="115:27"><expr pos:start="115:25" pos:end="115:27"><name pos:start="115:25" pos:end="115:25">i</name><operator pos:start="115:26" pos:end="115:27">++</operator></expr></incr>)</control> <block pos:start="115:30" pos:end="119:5">{<block_content pos:start="117:9" pos:end="117:53">

        <expr_stmt pos:start="117:9" pos:end="117:53"><expr pos:start="117:9" pos:end="117:52"><name pos:start="117:9" pos:end="117:14"><name pos:start="117:9" pos:end="117:11">irq</name><index pos:start="117:12" pos:end="117:14">[<expr pos:start="117:13" pos:end="117:13"><name pos:start="117:13" pos:end="117:13">i</name></expr>]</index></name> <operator pos:start="117:16" pos:end="117:16">=</operator> <call pos:start="117:18" pos:end="117:52"><name pos:start="117:18" pos:end="117:33">qdev_get_gpio_in</name><argument_list pos:start="117:34" pos:end="117:52">(<argument pos:start="117:35" pos:end="117:48"><expr pos:start="117:35" pos:end="117:48"><name pos:start="117:35" pos:end="117:48"><name pos:start="117:35" pos:end="117:37">env</name><operator pos:start="117:38" pos:end="117:39">-&gt;</operator><name pos:start="117:40" pos:end="117:48">pic_state</name></name></expr></argument>, <argument pos:start="117:51" pos:end="117:51"><expr pos:start="117:51" pos:end="117:51"><name pos:start="117:51" pos:end="117:51">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="123:5" pos:end="123:66"><expr pos:start="123:5" pos:end="123:65"><call pos:start="123:5" pos:end="123:65"><name pos:start="123:5" pos:end="123:24">sysbus_create_simple</name><argument_list pos:start="123:25" pos:end="123:65">(<argument pos:start="123:26" pos:end="123:36"><expr pos:start="123:26" pos:end="123:36"><literal type="string" pos:start="123:26" pos:end="123:36">"lm32-uart"</literal></expr></argument>, <argument pos:start="123:39" pos:end="123:48"><expr pos:start="123:39" pos:end="123:48"><name pos:start="123:39" pos:end="123:48">uart0_base</name></expr></argument>, <argument pos:start="123:51" pos:end="123:64"><expr pos:start="123:51" pos:end="123:64"><name pos:start="123:51" pos:end="123:64"><name pos:start="123:51" pos:end="123:53">irq</name><index pos:start="123:54" pos:end="123:64">[<expr pos:start="123:55" pos:end="123:63"><name pos:start="123:55" pos:end="123:63">uart0_irq</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:69"><expr pos:start="125:5" pos:end="125:68"><call pos:start="125:5" pos:end="125:68"><name pos:start="125:5" pos:end="125:24">sysbus_create_simple</name><argument_list pos:start="125:25" pos:end="125:68">(<argument pos:start="125:26" pos:end="125:37"><expr pos:start="125:26" pos:end="125:37"><literal type="string" pos:start="125:26" pos:end="125:37">"lm32-timer"</literal></expr></argument>, <argument pos:start="125:40" pos:end="125:50"><expr pos:start="125:40" pos:end="125:50"><name pos:start="125:40" pos:end="125:50">timer0_base</name></expr></argument>, <argument pos:start="125:53" pos:end="125:67"><expr pos:start="125:53" pos:end="125:67"><name pos:start="125:53" pos:end="125:67"><name pos:start="125:53" pos:end="125:55">irq</name><index pos:start="125:56" pos:end="125:67">[<expr pos:start="125:57" pos:end="125:66"><name pos:start="125:57" pos:end="125:66">timer0_irq</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:69"><expr pos:start="127:5" pos:end="127:68"><call pos:start="127:5" pos:end="127:68"><name pos:start="127:5" pos:end="127:24">sysbus_create_simple</name><argument_list pos:start="127:25" pos:end="127:68">(<argument pos:start="127:26" pos:end="127:37"><expr pos:start="127:26" pos:end="127:37"><literal type="string" pos:start="127:26" pos:end="127:37">"lm32-timer"</literal></expr></argument>, <argument pos:start="127:40" pos:end="127:50"><expr pos:start="127:40" pos:end="127:50"><name pos:start="127:40" pos:end="127:50">timer1_base</name></expr></argument>, <argument pos:start="127:53" pos:end="127:67"><expr pos:start="127:53" pos:end="127:67"><name pos:start="127:53" pos:end="127:67"><name pos:start="127:53" pos:end="127:55">irq</name><index pos:start="127:56" pos:end="127:67">[<expr pos:start="127:57" pos:end="127:66"><name pos:start="127:57" pos:end="127:66">timer1_irq</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="131:5" pos:end="131:49">/* make sure juart isn't the first chardev */</comment>

    <expr_stmt pos:start="133:5" pos:end="133:41"><expr pos:start="133:5" pos:end="133:40"><name pos:start="133:5" pos:end="133:20"><name pos:start="133:5" pos:end="133:7">env</name><operator pos:start="133:8" pos:end="133:9">-&gt;</operator><name pos:start="133:10" pos:end="133:20">juart_state</name></name> <operator pos:start="133:22" pos:end="133:22">=</operator> <call pos:start="133:24" pos:end="133:40"><name pos:start="133:24" pos:end="133:38">lm32_juart_init</name><argument_list pos:start="133:39" pos:end="133:40">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="137:5" pos:end="137:42"><expr pos:start="137:5" pos:end="137:41"><name pos:start="137:5" pos:end="137:28"><name pos:start="137:5" pos:end="137:14">reset_info</name><operator pos:start="137:15" pos:end="137:16">-&gt;</operator><name pos:start="137:17" pos:end="137:28">bootstrap_pc</name></name> <operator pos:start="137:30" pos:end="137:30">=</operator> <name pos:start="137:32" pos:end="137:41">flash_base</name></expr>;</expr_stmt>



    <if_stmt pos:start="141:5" pos:end="179:5"><if pos:start="141:5" pos:end="179:5">if <condition pos:start="141:8" pos:end="141:24">(<expr pos:start="141:9" pos:end="141:23"><name pos:start="141:9" pos:end="141:23">kernel_filename</name></expr>)</condition> <block pos:start="141:26" pos:end="179:5">{<block_content pos:start="143:9" pos:end="177:9">

        <decl_stmt pos:start="143:9" pos:end="143:23"><decl pos:start="143:9" pos:end="143:22"><type pos:start="143:9" pos:end="143:16"><name pos:start="143:9" pos:end="143:16">uint64_t</name></type> <name pos:start="143:18" pos:end="143:22">entry</name></decl>;</decl_stmt>

        <decl_stmt pos:start="145:9" pos:end="145:24"><decl pos:start="145:9" pos:end="145:23"><type pos:start="145:9" pos:end="145:11"><name pos:start="145:9" pos:end="145:11">int</name></type> <name pos:start="145:13" pos:end="145:23">kernel_size</name></decl>;</decl_stmt>



        <expr_stmt pos:start="149:9" pos:end="151:50"><expr pos:start="149:9" pos:end="151:49"><name pos:start="149:9" pos:end="149:19">kernel_size</name> <operator pos:start="149:21" pos:end="149:21">=</operator> <call pos:start="149:23" pos:end="151:49"><name pos:start="149:23" pos:end="149:30">load_elf</name><argument_list pos:start="149:31" pos:end="151:49">(<argument pos:start="149:32" pos:end="149:46"><expr pos:start="149:32" pos:end="149:46"><name pos:start="149:32" pos:end="149:46">kernel_filename</name></expr></argument>, <argument pos:start="149:49" pos:end="149:52"><expr pos:start="149:49" pos:end="149:52"><name pos:start="149:49" pos:end="149:52">NULL</name></expr></argument>, <argument pos:start="149:55" pos:end="149:58"><expr pos:start="149:55" pos:end="149:58"><name pos:start="149:55" pos:end="149:58">NULL</name></expr></argument>, <argument pos:start="149:61" pos:end="149:66"><expr pos:start="149:61" pos:end="149:66"><operator pos:start="149:61" pos:end="149:61">&amp;</operator><name pos:start="149:62" pos:end="149:66">entry</name></expr></argument>, <argument pos:start="149:69" pos:end="149:72"><expr pos:start="149:69" pos:end="149:72"><name pos:start="149:69" pos:end="149:72">NULL</name></expr></argument>, <argument pos:start="149:75" pos:end="149:78"><expr pos:start="149:75" pos:end="149:78"><name pos:start="149:75" pos:end="149:78">NULL</name></expr></argument>,

                               <argument pos:start="151:32" pos:end="151:32"><expr pos:start="151:32" pos:end="151:32"><literal type="number" pos:start="151:32" pos:end="151:32">1</literal></expr></argument>, <argument pos:start="151:35" pos:end="151:45"><expr pos:start="151:35" pos:end="151:45"><name pos:start="151:35" pos:end="151:45">ELF_MACHINE</name></expr></argument>, <argument pos:start="151:48" pos:end="151:48"><expr pos:start="151:48" pos:end="151:48"><literal type="number" pos:start="151:48" pos:end="151:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:41"><expr pos:start="153:9" pos:end="153:40"><name pos:start="153:9" pos:end="153:32"><name pos:start="153:9" pos:end="153:18">reset_info</name><operator pos:start="153:19" pos:end="153:20">-&gt;</operator><name pos:start="153:21" pos:end="153:32">bootstrap_pc</name></name> <operator pos:start="153:34" pos:end="153:34">=</operator> <name pos:start="153:36" pos:end="153:40">entry</name></expr>;</expr_stmt>



        <if_stmt pos:start="157:9" pos:end="165:9"><if pos:start="157:9" pos:end="165:9">if <condition pos:start="157:12" pos:end="157:28">(<expr pos:start="157:13" pos:end="157:27"><name pos:start="157:13" pos:end="157:23">kernel_size</name> <operator pos:start="157:25" pos:end="157:25">&lt;</operator> <literal type="number" pos:start="157:27" pos:end="157:27">0</literal></expr>)</condition> <block pos:start="157:30" pos:end="165:9">{<block_content pos:start="159:13" pos:end="163:48">

            <expr_stmt pos:start="159:13" pos:end="161:56"><expr pos:start="159:13" pos:end="161:55"><name pos:start="159:13" pos:end="159:23">kernel_size</name> <operator pos:start="159:25" pos:end="159:25">=</operator> <call pos:start="159:27" pos:end="161:55"><name pos:start="159:27" pos:end="159:45">load_image_targphys</name><argument_list pos:start="159:46" pos:end="161:55">(<argument pos:start="159:47" pos:end="159:61"><expr pos:start="159:47" pos:end="159:61"><name pos:start="159:47" pos:end="159:61">kernel_filename</name></expr></argument>, <argument pos:start="159:64" pos:end="159:71"><expr pos:start="159:64" pos:end="159:71"><name pos:start="159:64" pos:end="159:71">ram_base</name></expr></argument>,

                                              <argument pos:start="161:47" pos:end="161:54"><expr pos:start="161:47" pos:end="161:54"><name pos:start="161:47" pos:end="161:54">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:48"><expr pos:start="163:13" pos:end="163:47"><name pos:start="163:13" pos:end="163:36"><name pos:start="163:13" pos:end="163:22">reset_info</name><operator pos:start="163:23" pos:end="163:24">-&gt;</operator><name pos:start="163:25" pos:end="163:36">bootstrap_pc</name></name> <operator pos:start="163:38" pos:end="163:38">=</operator> <name pos:start="163:40" pos:end="163:47">ram_base</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="169:9" pos:end="177:9"><if pos:start="169:9" pos:end="177:9">if <condition pos:start="169:12" pos:end="169:28">(<expr pos:start="169:13" pos:end="169:27"><name pos:start="169:13" pos:end="169:23">kernel_size</name> <operator pos:start="169:25" pos:end="169:25">&lt;</operator> <literal type="number" pos:start="169:27" pos:end="169:27">0</literal></expr>)</condition> <block pos:start="169:30" pos:end="177:9">{<block_content pos:start="171:13" pos:end="175:20">

            <expr_stmt pos:start="171:13" pos:end="173:37"><expr pos:start="171:13" pos:end="173:36"><call pos:start="171:13" pos:end="173:36"><name pos:start="171:13" pos:end="171:19">fprintf</name><argument_list pos:start="171:20" pos:end="173:36">(<argument pos:start="171:21" pos:end="171:26"><expr pos:start="171:21" pos:end="171:26"><name pos:start="171:21" pos:end="171:26">stderr</name></expr></argument>, <argument pos:start="171:29" pos:end="171:64"><expr pos:start="171:29" pos:end="171:64"><literal type="string" pos:start="171:29" pos:end="171:64">"qemu: could not load kernel '%s'\n"</literal></expr></argument>,

                    <argument pos:start="173:21" pos:end="173:35"><expr pos:start="173:21" pos:end="173:35"><name pos:start="173:21" pos:end="173:35">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="175:13" pos:end="175:20"><expr pos:start="175:13" pos:end="175:19"><call pos:start="175:13" pos:end="175:19"><name pos:start="175:13" pos:end="175:16">exit</name><argument_list pos:start="175:17" pos:end="175:19">(<argument pos:start="175:18" pos:end="175:18"><expr pos:start="175:18" pos:end="175:18"><literal type="number" pos:start="175:18" pos:end="175:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="183:5" pos:end="183:52"><expr pos:start="183:5" pos:end="183:51"><call pos:start="183:5" pos:end="183:51"><name pos:start="183:5" pos:end="183:23">qemu_register_reset</name><argument_list pos:start="183:24" pos:end="183:51">(<argument pos:start="183:25" pos:end="183:38"><expr pos:start="183:25" pos:end="183:38"><name pos:start="183:25" pos:end="183:38">main_cpu_reset</name></expr></argument>, <argument pos:start="183:41" pos:end="183:50"><expr pos:start="183:41" pos:end="183:50"><name pos:start="183:41" pos:end="183:50">reset_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
