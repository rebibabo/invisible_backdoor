<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15015.c" pos:tabs="8"><function pos:start="1:1" pos:end="163:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:39">qemu_rdma_broken_ipv6_kernel</name><parameter_list pos:start="1:40" pos:end="1:80">(<parameter pos:start="1:41" pos:end="1:52"><decl pos:start="1:41" pos:end="1:52"><type pos:start="1:41" pos:end="1:52"><name pos:start="1:41" pos:end="1:45">Error</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier><modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:52">errp</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:79"><decl pos:start="1:55" pos:end="1:79"><type pos:start="1:55" pos:end="1:79"><name pos:start="1:55" pos:end="1:72"><name pos:start="1:55" pos:end="1:60">struct</name> <name pos:start="1:62" pos:end="1:72">ibv_context</name></name> <modifier pos:start="1:74" pos:end="1:74">*</modifier></type><name pos:start="1:75" pos:end="1:79">verbs</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="163:1">{<block_content pos:start="5:5" pos:end="161:13">

    <decl_stmt pos:start="5:5" pos:end="12:0"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:24"><name pos:start="5:5" pos:end="5:24"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:24">ibv_port_attr</name></name></type> <name pos:start="5:26" pos:end="5:34">port_attr</name></decl>;</decl_stmt>



    <comment type="block" pos:start="9:5" pos:end="9:58">/* This bug only exists in linux, to our knowledge. */</comment>

<cpp:ifdef pos:start="11:1" pos:end="11:19">#<cpp:directive pos:start="11:2" pos:end="11:6">ifdef</cpp:directive> <name pos:start="11:8" pos:end="11:19">CONFIG_LINUX</name></cpp:ifdef>



    <comment type="block" pos:start="15:5" pos:end="31:7">/* 

     * Verbs are only NULL if management has bound to '[::]'.

     * 

     * Let's iterate through all the devices and see if there any pure IB

     * devices (non-ethernet).

     * 

     * If not, then we can safely proceed with the migration.

     * Otherwise, there are no guarantees until the bug is fixed in linux.

     */</comment>

    <if_stmt pos:start="33:5" pos:end="117:5"><if pos:start="33:5" pos:end="117:5">if <condition pos:start="33:8" pos:end="33:15">(<expr pos:start="33:9" pos:end="33:14"><operator pos:start="33:9" pos:end="33:9">!</operator><name pos:start="33:10" pos:end="33:14">verbs</name></expr>)</condition> <block pos:start="33:17" pos:end="117:5">{<block_content pos:start="35:13" pos:end="115:17">

	    <decl_stmt pos:start="35:13" pos:end="35:31"><decl pos:start="35:13" pos:end="35:27"><type pos:start="35:13" pos:end="35:15"><name pos:start="35:13" pos:end="35:15">int</name></type> <name pos:start="35:17" pos:end="35:27">num_devices</name></decl>, <decl pos:start="35:30" pos:end="35:30"><type ref="prev" pos:start="35:13" pos:end="35:15"/><name pos:start="35:30" pos:end="35:30">x</name></decl>;</decl_stmt>

        <decl_stmt pos:start="37:9" pos:end="37:74"><decl pos:start="37:9" pos:end="37:73"><type pos:start="37:9" pos:end="37:28"><name pos:start="37:9" pos:end="37:25"><name pos:start="37:9" pos:end="37:14">struct</name> <name pos:start="37:16" pos:end="37:25">ibv_device</name></name> <modifier pos:start="37:27" pos:end="37:27">*</modifier><modifier pos:start="37:28" pos:end="37:28">*</modifier></type> <name pos:start="37:30" pos:end="37:37">dev_list</name> <init pos:start="37:39" pos:end="37:73">= <expr pos:start="37:41" pos:end="37:73"><call pos:start="37:41" pos:end="37:73"><name pos:start="37:41" pos:end="37:59">ibv_get_device_list</name><argument_list pos:start="37:60" pos:end="37:73">(<argument pos:start="37:61" pos:end="37:72"><expr pos:start="37:61" pos:end="37:72"><operator pos:start="37:61" pos:end="37:61">&amp;</operator><name pos:start="37:62" pos:end="37:72">num_devices</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="39:9" pos:end="39:32"><decl pos:start="39:9" pos:end="39:31"><type pos:start="39:9" pos:end="39:12"><name pos:start="39:9" pos:end="39:12">bool</name></type> <name pos:start="39:14" pos:end="39:23">roce_found</name> <init pos:start="39:25" pos:end="39:31">= <expr pos:start="39:27" pos:end="39:31"><name pos:start="39:27" pos:end="39:31">false</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="41:9" pos:end="41:30"><decl pos:start="41:9" pos:end="41:29"><type pos:start="41:9" pos:end="41:12"><name pos:start="41:9" pos:end="41:12">bool</name></type> <name pos:start="41:14" pos:end="41:21">ib_found</name> <init pos:start="41:23" pos:end="41:29">= <expr pos:start="41:25" pos:end="41:29"><name pos:start="41:25" pos:end="41:29">false</name></expr></init></decl>;</decl_stmt>



        <for pos:start="45:9" pos:end="79:9">for <control pos:start="45:13" pos:end="45:41">(<init pos:start="45:14" pos:end="45:19"><expr pos:start="45:14" pos:end="45:18"><name pos:start="45:14" pos:end="45:14">x</name> <operator pos:start="45:16" pos:end="45:16">=</operator> <literal type="number" pos:start="45:18" pos:end="45:18">0</literal></expr>;</init> <condition pos:start="45:21" pos:end="45:36"><expr pos:start="45:21" pos:end="45:35"><name pos:start="45:21" pos:end="45:21">x</name> <operator pos:start="45:23" pos:end="45:23">&lt;</operator> <name pos:start="45:25" pos:end="45:35">num_devices</name></expr>;</condition> <incr pos:start="45:38" pos:end="45:40"><expr pos:start="45:38" pos:end="45:40"><name pos:start="45:38" pos:end="45:38">x</name><operator pos:start="45:39" pos:end="45:40">++</operator></expr></incr>)</control> <block pos:start="45:43" pos:end="79:9">{<block_content pos:start="47:13" pos:end="75:36">

            <expr_stmt pos:start="47:13" pos:end="47:49"><expr pos:start="47:13" pos:end="47:48"><name pos:start="47:13" pos:end="47:17">verbs</name> <operator pos:start="47:19" pos:end="47:19">=</operator> <call pos:start="47:21" pos:end="47:48"><name pos:start="47:21" pos:end="47:35">ibv_open_device</name><argument_list pos:start="47:36" pos:end="47:48">(<argument pos:start="47:37" pos:end="47:47"><expr pos:start="47:37" pos:end="47:47"><name pos:start="47:37" pos:end="47:47"><name pos:start="47:37" pos:end="47:44">dev_list</name><index pos:start="47:45" pos:end="47:47">[<expr pos:start="47:46" pos:end="47:46"><name pos:start="47:46" pos:end="47:46">x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="51:13" pos:end="59:13"><if pos:start="51:13" pos:end="59:13">if <condition pos:start="51:16" pos:end="51:53">(<expr pos:start="51:17" pos:end="51:52"><call pos:start="51:17" pos:end="51:52"><name pos:start="51:17" pos:end="51:30">ibv_query_port</name><argument_list pos:start="51:31" pos:end="51:52">(<argument pos:start="51:32" pos:end="51:36"><expr pos:start="51:32" pos:end="51:36"><name pos:start="51:32" pos:end="51:36">verbs</name></expr></argument>, <argument pos:start="51:39" pos:end="51:39"><expr pos:start="51:39" pos:end="51:39"><literal type="number" pos:start="51:39" pos:end="51:39">1</literal></expr></argument>, <argument pos:start="51:42" pos:end="51:51"><expr pos:start="51:42" pos:end="51:51"><operator pos:start="51:42" pos:end="51:42">&amp;</operator><name pos:start="51:43" pos:end="51:51">port_attr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:55" pos:end="59:13">{<block_content pos:start="53:17" pos:end="57:31">

                <expr_stmt pos:start="53:17" pos:end="53:40"><expr pos:start="53:17" pos:end="53:39"><call pos:start="53:17" pos:end="53:39"><name pos:start="53:17" pos:end="53:32">ibv_close_device</name><argument_list pos:start="53:33" pos:end="53:39">(<argument pos:start="53:34" pos:end="53:38"><expr pos:start="53:34" pos:end="53:38"><name pos:start="53:34" pos:end="53:38">verbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="55:17" pos:end="55:63"><expr pos:start="55:17" pos:end="55:62"><call pos:start="55:17" pos:end="55:62"><name pos:start="55:17" pos:end="55:21">ERROR</name><argument_list pos:start="55:22" pos:end="55:62">(<argument pos:start="55:23" pos:end="55:26"><expr pos:start="55:23" pos:end="55:26"><name pos:start="55:23" pos:end="55:26">errp</name></expr></argument>, <argument pos:start="55:29" pos:end="55:61"><expr pos:start="55:29" pos:end="55:61"><literal type="string" pos:start="55:29" pos:end="55:61">"Could not query initial IB port"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="57:17" pos:end="57:31">return <expr pos:start="57:24" pos:end="57:30"><operator pos:start="57:24" pos:end="57:24">-</operator><name pos:start="57:25" pos:end="57:30">EINVAL</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="63:13" pos:end="71:13"><if pos:start="63:13" pos:end="67:13">if <condition pos:start="63:16" pos:end="63:66">(<expr pos:start="63:17" pos:end="63:65"><name pos:start="63:17" pos:end="63:36"><name pos:start="63:17" pos:end="63:25">port_attr</name><operator pos:start="63:26" pos:end="63:26">.</operator><name pos:start="63:27" pos:end="63:36">link_layer</name></name> <operator pos:start="63:38" pos:end="63:39">==</operator> <name pos:start="63:41" pos:end="63:65">IBV_LINK_LAYER_INFINIBAND</name></expr>)</condition> <block pos:start="63:68" pos:end="67:13">{<block_content pos:start="65:17" pos:end="65:32">

                <expr_stmt pos:start="65:17" pos:end="65:32"><expr pos:start="65:17" pos:end="65:31"><name pos:start="65:17" pos:end="65:24">ib_found</name> <operator pos:start="65:26" pos:end="65:26">=</operator> <name pos:start="65:28" pos:end="65:31">true</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="67:15" pos:end="71:13">else if <condition pos:start="67:23" pos:end="67:71">(<expr pos:start="67:24" pos:end="67:70"><name pos:start="67:24" pos:end="67:43"><name pos:start="67:24" pos:end="67:32">port_attr</name><operator pos:start="67:33" pos:end="67:33">.</operator><name pos:start="67:34" pos:end="67:43">link_layer</name></name> <operator pos:start="67:45" pos:end="67:46">==</operator> <name pos:start="67:48" pos:end="67:70">IBV_LINK_LAYER_ETHERNET</name></expr>)</condition> <block pos:start="67:73" pos:end="71:13">{<block_content pos:start="69:17" pos:end="69:34">

                <expr_stmt pos:start="69:17" pos:end="69:34"><expr pos:start="69:17" pos:end="69:33"><name pos:start="69:17" pos:end="69:26">roce_found</name> <operator pos:start="69:28" pos:end="69:28">=</operator> <name pos:start="69:30" pos:end="69:33">true</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="75:13" pos:end="75:36"><expr pos:start="75:13" pos:end="75:35"><call pos:start="75:13" pos:end="75:35"><name pos:start="75:13" pos:end="75:28">ibv_close_device</name><argument_list pos:start="75:29" pos:end="75:35">(<argument pos:start="75:30" pos:end="75:34"><expr pos:start="75:30" pos:end="75:34"><name pos:start="75:30" pos:end="75:34">verbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        </block_content>}</block></for>



        <if_stmt pos:start="83:9" pos:end="111:9"><if pos:start="83:9" pos:end="111:9">if <condition pos:start="83:12" pos:end="83:23">(<expr pos:start="83:13" pos:end="83:22"><name pos:start="83:13" pos:end="83:22">roce_found</name></expr>)</condition> <block pos:start="83:25" pos:end="111:9">{<block_content pos:start="85:13" pos:end="109:13">

            <if_stmt pos:start="85:13" pos:end="109:13"><if pos:start="85:13" pos:end="99:13">if <condition pos:start="85:16" pos:end="85:25">(<expr pos:start="85:17" pos:end="85:24"><name pos:start="85:17" pos:end="85:24">ib_found</name></expr>)</condition> <block pos:start="85:27" pos:end="99:13">{<block_content pos:start="87:17" pos:end="97:53">

                <expr_stmt pos:start="87:17" pos:end="97:53"><expr pos:start="87:17" pos:end="97:52"><call pos:start="87:17" pos:end="97:52"><name pos:start="87:17" pos:end="87:23">fprintf</name><argument_list pos:start="87:24" pos:end="97:52">(<argument pos:start="87:25" pos:end="87:30"><expr pos:start="87:25" pos:end="87:30"><name pos:start="87:25" pos:end="87:30">stderr</name></expr></argument>, <argument pos:start="87:33" pos:end="97:51"><expr pos:start="87:33" pos:end="97:51"><literal type="string" pos:start="87:33" pos:end="87:60">"WARN: migrations may fail:"</literal>

                                <literal type="string" pos:start="89:33" pos:end="89:66">" IPv6 over RoCE / iWARP in linux"</literal>

                                <literal type="string" pos:start="91:33" pos:end="91:76">" is broken. But since you appear to have a"</literal>

                                <literal type="string" pos:start="93:33" pos:end="93:79">" mixed RoCE / IB environment, be sure to only"</literal>

                                <literal type="string" pos:start="95:33" pos:end="95:79">" migrate over the IB fabric until the kernel "</literal>

                                <literal type="string" pos:start="97:33" pos:end="97:51">" fixes the bug.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="99:15" pos:end="109:13">else <block pos:start="99:20" pos:end="109:13">{<block_content pos:start="101:17" pos:end="107:31">

                <expr_stmt pos:start="101:17" pos:end="105:87"><expr pos:start="101:17" pos:end="105:86"><call pos:start="101:17" pos:end="105:86"><name pos:start="101:17" pos:end="101:21">ERROR</name><argument_list pos:start="101:22" pos:end="105:86">(<argument pos:start="101:23" pos:end="101:26"><expr pos:start="101:23" pos:end="101:26"><name pos:start="101:23" pos:end="101:26">errp</name></expr></argument>, <argument pos:start="101:29" pos:end="105:85"><expr pos:start="101:29" pos:end="105:85"><literal type="string" pos:start="101:29" pos:end="101:80">"You only have RoCE / iWARP devices in your systems"</literal>

                            <literal type="string" pos:start="103:29" pos:end="103:80">" and your management software has specified '[::]'"</literal>

                            <literal type="string" pos:start="105:29" pos:end="105:85">", but IPv6 over RoCE / iWARP is not supported in Linux."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="107:17" pos:end="107:31">return <expr pos:start="107:24" pos:end="107:30"><operator pos:start="107:24" pos:end="107:24">-</operator><name pos:start="107:25" pos:end="107:30">ENONET</name></expr>;</return>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>



        <return pos:start="115:9" pos:end="115:17">return <expr pos:start="115:16" pos:end="115:16"><literal type="number" pos:start="115:16" pos:end="115:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="121:5" pos:end="129:7">/*

     * If we have a verbs context, that means that some other than '[::]' was

     * used by the management software for binding. In which case we can actually 

     * warn the user about a potential broken kernel;

     */</comment>



    <comment type="block" pos:start="133:5" pos:end="133:38">/* IB ports start with 1, not 0 */</comment>

    <if_stmt pos:start="135:5" pos:end="141:5"><if pos:start="135:5" pos:end="141:5">if <condition pos:start="135:8" pos:end="135:45">(<expr pos:start="135:9" pos:end="135:44"><call pos:start="135:9" pos:end="135:44"><name pos:start="135:9" pos:end="135:22">ibv_query_port</name><argument_list pos:start="135:23" pos:end="135:44">(<argument pos:start="135:24" pos:end="135:28"><expr pos:start="135:24" pos:end="135:28"><name pos:start="135:24" pos:end="135:28">verbs</name></expr></argument>, <argument pos:start="135:31" pos:end="135:31"><expr pos:start="135:31" pos:end="135:31"><literal type="number" pos:start="135:31" pos:end="135:31">1</literal></expr></argument>, <argument pos:start="135:34" pos:end="135:43"><expr pos:start="135:34" pos:end="135:43"><operator pos:start="135:34" pos:end="135:34">&amp;</operator><name pos:start="135:35" pos:end="135:43">port_attr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="135:47" pos:end="141:5">{<block_content pos:start="137:9" pos:end="139:23">

        <expr_stmt pos:start="137:9" pos:end="137:55"><expr pos:start="137:9" pos:end="137:54"><call pos:start="137:9" pos:end="137:54"><name pos:start="137:9" pos:end="137:13">ERROR</name><argument_list pos:start="137:14" pos:end="137:54">(<argument pos:start="137:15" pos:end="137:18"><expr pos:start="137:15" pos:end="137:18"><name pos:start="137:15" pos:end="137:18">errp</name></expr></argument>, <argument pos:start="137:21" pos:end="137:53"><expr pos:start="137:21" pos:end="137:53"><literal type="string" pos:start="137:21" pos:end="137:53">"Could not query initial IB port"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="139:9" pos:end="139:23">return <expr pos:start="139:16" pos:end="139:22"><operator pos:start="139:16" pos:end="139:16">-</operator><name pos:start="139:17" pos:end="139:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="145:5" pos:end="158:0"><if pos:start="145:5" pos:end="158:0">if <condition pos:start="145:8" pos:end="145:56">(<expr pos:start="145:9" pos:end="145:55"><name pos:start="145:9" pos:end="145:28"><name pos:start="145:9" pos:end="145:17">port_attr</name><operator pos:start="145:18" pos:end="145:18">.</operator><name pos:start="145:19" pos:end="145:28">link_layer</name></name> <operator pos:start="145:30" pos:end="145:31">==</operator> <name pos:start="145:33" pos:end="145:55">IBV_LINK_LAYER_ETHERNET</name></expr>)</condition> <block pos:start="145:58" pos:end="158:0">{<block_content pos:start="147:9" pos:end="151:23">

        <expr_stmt pos:start="147:9" pos:end="149:63"><expr pos:start="147:9" pos:end="149:62"><call pos:start="147:9" pos:end="149:62"><name pos:start="147:9" pos:end="147:13">ERROR</name><argument_list pos:start="147:14" pos:end="149:62">(<argument pos:start="147:15" pos:end="147:18"><expr pos:start="147:15" pos:end="147:18"><name pos:start="147:15" pos:end="147:18">errp</name></expr></argument>, <argument pos:start="147:21" pos:end="149:61"><expr pos:start="147:21" pos:end="149:61"><literal type="string" pos:start="147:21" pos:end="147:72">"Linux kernel's RoCE / iWARP does not support IPv6 "</literal>

                    <literal type="string" pos:start="149:21" pos:end="149:61">"(but patches on linux-rdma in progress)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="151:9" pos:end="151:23">return <expr pos:start="151:16" pos:end="151:22"><operator pos:start="151:16" pos:end="151:16">-</operator><name pos:start="151:17" pos:end="151:22">ENONET</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



<cpp:endif pos:start="157:1" pos:end="157:6">#<cpp:directive pos:start="157:2" pos:end="157:6">endif</cpp:directive></cpp:endif>



    <return pos:start="161:5" pos:end="161:13">return <expr pos:start="161:12" pos:end="161:12"><literal type="number" pos:start="161:12" pos:end="161:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
