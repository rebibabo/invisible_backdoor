<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1267.c" pos:tabs="8"><function pos:start="1:1" pos:end="123:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:35">decode_block_progressive</name><parameter_list pos:start="1:36" pos:end="5:72">(<parameter pos:start="1:37" pos:end="1:57"><decl pos:start="1:37" pos:end="1:57"><type pos:start="1:37" pos:end="1:57"><name pos:start="1:37" pos:end="1:54">MJpegDecodeContext</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:57">s</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:73"><decl pos:start="1:60" pos:end="1:73"><type pos:start="1:60" pos:end="1:73"><name pos:start="1:60" pos:end="1:66">DCTELEM</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:73">block</name></decl></parameter>, <parameter pos:start="1:76" pos:end="1:92"><decl pos:start="1:76" pos:end="1:92"><type pos:start="1:76" pos:end="1:92"><name pos:start="1:76" pos:end="1:82">uint8_t</name> <modifier pos:start="1:84" pos:end="1:84">*</modifier></type><name pos:start="1:85" pos:end="1:92">last_nnz</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:48"><decl pos:start="3:37" pos:end="3:48"><type pos:start="3:37" pos:end="3:48"><name pos:start="3:37" pos:end="3:39">int</name></type> <name pos:start="3:41" pos:end="3:48">ac_index</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:71"><decl pos:start="3:51" pos:end="3:71"><type pos:start="3:51" pos:end="3:71"><name pos:start="3:51" pos:end="3:57">int16_t</name> <modifier pos:start="3:59" pos:end="3:59">*</modifier></type><name pos:start="3:60" pos:end="3:71">quant_matrix</name></decl></parameter>,

                                    <parameter pos:start="5:37" pos:end="5:42"><decl pos:start="5:37" pos:end="5:42"><type pos:start="5:37" pos:end="5:42"><name pos:start="5:37" pos:end="5:39">int</name></type> <name pos:start="5:41" pos:end="5:42">ss</name></decl></parameter>, <parameter pos:start="5:45" pos:end="5:50"><decl pos:start="5:45" pos:end="5:50"><type pos:start="5:45" pos:end="5:50"><name pos:start="5:45" pos:end="5:47">int</name></type> <name pos:start="5:49" pos:end="5:50">se</name></decl></parameter>, <parameter pos:start="5:53" pos:end="5:58"><decl pos:start="5:53" pos:end="5:58"><type pos:start="5:53" pos:end="5:58"><name pos:start="5:53" pos:end="5:55">int</name></type> <name pos:start="5:57" pos:end="5:58">Al</name></decl></parameter>, <parameter pos:start="5:61" pos:end="5:71"><decl pos:start="5:61" pos:end="5:71"><type pos:start="5:61" pos:end="5:71"><name pos:start="5:61" pos:end="5:63">int</name> <modifier pos:start="5:65" pos:end="5:65">*</modifier></type><name pos:start="5:66" pos:end="5:71">EOBRUN</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="123:1">{<block_content pos:start="9:5" pos:end="121:13">

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">code</name></decl>, <decl pos:start="9:15" pos:end="9:15"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:15" pos:end="9:15">i</name></decl>, <decl pos:start="9:18" pos:end="9:18"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:18" pos:end="9:18">j</name></decl>, <decl pos:start="9:21" pos:end="9:25"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:21" pos:end="9:25">level</name></decl>, <decl pos:start="9:28" pos:end="9:30"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:28" pos:end="9:30">val</name></decl>, <decl pos:start="9:33" pos:end="9:35"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:33" pos:end="9:35">run</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if<condition pos:start="13:7" pos:end="13:15">(<expr pos:start="13:8" pos:end="13:14"><operator pos:start="13:8" pos:end="13:8">*</operator><name pos:start="13:9" pos:end="13:14">EOBRUN</name></expr>)</condition><block pos:start="13:16" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:17">

        <expr_stmt pos:start="15:9" pos:end="15:20"><expr pos:start="15:9" pos:end="15:19"><operator pos:start="15:9" pos:end="15:9">(</operator><operator pos:start="15:10" pos:end="15:10">*</operator><name pos:start="15:11" pos:end="15:16">EOBRUN</name><operator pos:start="15:17" pos:end="15:17">)</operator><operator pos:start="15:18" pos:end="15:19">--</operator></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:17">return <expr pos:start="17:16" pos:end="17:16"><literal type="number" pos:start="17:16" pos:end="17:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <block pos:start="21:5" pos:end="115:29">{<block_content pos:start="21:6" pos:end="115:28"><macro pos:start="21:6" pos:end="21:28"><name pos:start="21:6" pos:end="21:16">OPEN_READER</name><argument_list pos:start="21:17" pos:end="21:28">(<argument pos:start="21:18" pos:end="21:19">re</argument>, <argument pos:start="21:22" pos:end="21:27">&amp;s-&gt;gb</argument>)</argument_list></macro>

    <for pos:start="23:5" pos:end="113:5">for<control pos:start="23:8" pos:end="23:18">(<init pos:start="23:9" pos:end="23:13"><expr pos:start="23:9" pos:end="23:12"><name pos:start="23:9" pos:end="23:9">i</name><operator pos:start="23:10" pos:end="23:10">=</operator><name pos:start="23:11" pos:end="23:12">ss</name></expr>;</init><condition pos:start="23:14" pos:end="23:14">;</condition><incr pos:start="23:15" pos:end="23:17"><expr pos:start="23:15" pos:end="23:17"><name pos:start="23:15" pos:end="23:15">i</name><operator pos:start="23:16" pos:end="23:17">++</operator></expr></incr>)</control> <block pos:start="23:20" pos:end="113:5">{<block_content pos:start="25:9" pos:end="111:9">

        <expr_stmt pos:start="25:9" pos:end="25:33"><expr pos:start="25:9" pos:end="25:32"><call pos:start="25:9" pos:end="25:32"><name pos:start="25:9" pos:end="25:20">UPDATE_CACHE</name><argument_list pos:start="25:21" pos:end="25:32">(<argument pos:start="25:22" pos:end="25:23"><expr pos:start="25:22" pos:end="25:23"><name pos:start="25:22" pos:end="25:23">re</name></expr></argument>, <argument pos:start="25:26" pos:end="25:31"><expr pos:start="25:26" pos:end="25:31"><operator pos:start="25:26" pos:end="25:26">&amp;</operator><name pos:start="25:27" pos:end="25:31"><name pos:start="25:27" pos:end="25:27">s</name><operator pos:start="25:28" pos:end="25:29">-&gt;</operator><name pos:start="25:30" pos:end="25:31">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro pos:start="27:9" pos:end="27:67"><name pos:start="27:9" pos:end="27:15">GET_VLC</name><argument_list pos:start="27:16" pos:end="27:67">(<argument pos:start="27:17" pos:end="27:20">code</argument>, <argument pos:start="27:23" pos:end="27:24">re</argument>, <argument pos:start="27:27" pos:end="27:32">&amp;s-&gt;gb</argument>, <argument pos:start="27:35" pos:end="27:60">s-&gt;vlcs[<literal type="number" pos:start="27:43" pos:end="27:43">1</literal>][ac_index].table</argument>, <argument pos:start="27:63" pos:end="27:63"><literal type="number" pos:start="27:63" pos:end="27:63">9</literal></argument>, <argument pos:start="27:66" pos:end="27:66"><literal type="number" pos:start="27:66" pos:end="27:66">2</literal></argument>)</argument_list></macro>

        <comment type="block" pos:start="29:9" pos:end="29:97">/* Progressive JPEG use AC coeffs from zero and this decoder sets offset 16 by default */</comment>

        <expr_stmt pos:start="31:9" pos:end="31:19"><expr pos:start="31:9" pos:end="31:18"><name pos:start="31:9" pos:end="31:12">code</name> <operator pos:start="31:14" pos:end="31:15">-=</operator> <literal type="number" pos:start="31:17" pos:end="31:18">16</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:37"><expr pos:start="33:9" pos:end="33:36"><name pos:start="33:9" pos:end="33:11">run</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <operator pos:start="33:15" pos:end="33:15">(</operator><operator pos:start="33:16" pos:end="33:16">(</operator><name pos:start="33:17" pos:end="33:24">unsigned</name><operator pos:start="33:25" pos:end="33:25">)</operator> <name pos:start="33:27" pos:end="33:30">code</name><operator pos:start="33:31" pos:end="33:31">)</operator> <operator pos:start="33:33" pos:end="33:34">&gt;&gt;</operator> <literal type="number" pos:start="33:36" pos:end="33:36">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:20"><expr pos:start="35:9" pos:end="35:19"><name pos:start="35:9" pos:end="35:12">code</name> <operator pos:start="35:14" pos:end="35:15">&amp;=</operator> <literal type="number" pos:start="35:17" pos:end="35:19">0xF</literal></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="111:9"><if pos:start="37:9" pos:end="85:9">if<condition pos:start="37:11" pos:end="37:16">(<expr pos:start="37:12" pos:end="37:15"><name pos:start="37:12" pos:end="37:15">code</name></expr>)</condition> <block pos:start="37:18" pos:end="85:9">{<block_content pos:start="39:13" pos:end="83:53">

            <expr_stmt pos:start="39:13" pos:end="39:21"><expr pos:start="39:13" pos:end="39:20"><name pos:start="39:13" pos:end="39:13">i</name> <operator pos:start="39:15" pos:end="39:16">+=</operator> <name pos:start="39:18" pos:end="39:20">run</name></expr>;</expr_stmt>

            <if_stmt pos:start="41:13" pos:end="45:13"><if pos:start="41:13" pos:end="45:13">if<condition pos:start="41:15" pos:end="41:42">(<expr pos:start="41:16" pos:end="41:41"><name pos:start="41:16" pos:end="41:19">code</name> <operator pos:start="41:21" pos:end="41:21">&gt;</operator> <name pos:start="41:23" pos:end="41:36">MIN_CACHE_BITS</name> <operator pos:start="41:38" pos:end="41:38">-</operator> <literal type="number" pos:start="41:40" pos:end="41:41">16</literal></expr>)</condition><block pos:start="41:43" pos:end="45:13">{<block_content pos:start="43:17" pos:end="43:40">

                <macro pos:start="43:17" pos:end="43:40"><name pos:start="43:17" pos:end="43:28">UPDATE_CACHE</name><argument_list pos:start="43:29" pos:end="43:40">(<argument pos:start="43:30" pos:end="43:31">re</argument>, <argument pos:start="43:34" pos:end="43:39">&amp;s-&gt;gb</argument>)</argument_list></macro>

            </block_content>}</block></if></if_stmt>

            <block pos:start="47:13" pos:end="55:13">{<block_content pos:start="49:17" pos:end="53:69">

                <decl_stmt pos:start="49:17" pos:end="49:47"><decl pos:start="49:17" pos:end="49:46"><type pos:start="49:17" pos:end="49:19"><name pos:start="49:17" pos:end="49:19">int</name></type> <name pos:start="49:21" pos:end="49:25">cache</name><init pos:start="49:26" pos:end="49:46">=<expr pos:start="49:27" pos:end="49:46"><call pos:start="49:27" pos:end="49:46"><name pos:start="49:27" pos:end="49:35">GET_CACHE</name><argument_list pos:start="49:36" pos:end="49:46">(<argument pos:start="49:37" pos:end="49:38"><expr pos:start="49:37" pos:end="49:38"><name pos:start="49:37" pos:end="49:38">re</name></expr></argument>,<argument pos:start="49:40" pos:end="49:45"><expr pos:start="49:40" pos:end="49:45"><operator pos:start="49:40" pos:end="49:40">&amp;</operator><name pos:start="49:41" pos:end="49:45"><name pos:start="49:41" pos:end="49:41">s</name><operator pos:start="49:42" pos:end="49:43">-&gt;</operator><name pos:start="49:44" pos:end="49:45">gb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="51:17" pos:end="51:38"><decl pos:start="51:17" pos:end="51:37"><type pos:start="51:17" pos:end="51:19"><name pos:start="51:17" pos:end="51:19">int</name></type> <name pos:start="51:21" pos:end="51:24">sign</name><init pos:start="51:25" pos:end="51:37">=<expr pos:start="51:26" pos:end="51:37"><operator pos:start="51:26" pos:end="51:26">(</operator><operator pos:start="51:27" pos:end="51:27">~</operator><name pos:start="51:28" pos:end="51:32">cache</name><operator pos:start="51:33" pos:end="51:33">)</operator><operator pos:start="51:34" pos:end="51:35">&gt;&gt;</operator><literal type="number" pos:start="51:36" pos:end="51:37">31</literal></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="53:17" pos:end="53:69"><expr pos:start="53:17" pos:end="53:68"><name pos:start="53:17" pos:end="53:21">level</name> <operator pos:start="53:23" pos:end="53:23">=</operator> <operator pos:start="53:25" pos:end="53:25">(</operator><call pos:start="53:26" pos:end="53:53"><name pos:start="53:26" pos:end="53:34">NEG_USR32</name><argument_list pos:start="53:35" pos:end="53:53">(<argument pos:start="53:36" pos:end="53:47"><expr pos:start="53:36" pos:end="53:47"><name pos:start="53:36" pos:end="53:39">sign</name> <operator pos:start="53:41" pos:end="53:41">^</operator> <name pos:start="53:43" pos:end="53:47">cache</name></expr></argument>,<argument pos:start="53:49" pos:end="53:52"><expr pos:start="53:49" pos:end="53:52"><name pos:start="53:49" pos:end="53:52">code</name></expr></argument>)</argument_list></call> <operator pos:start="53:55" pos:end="53:55">^</operator> <name pos:start="53:57" pos:end="53:60">sign</name><operator pos:start="53:61" pos:end="53:61">)</operator> <operator pos:start="53:63" pos:end="53:63">-</operator> <name pos:start="53:65" pos:end="53:68">sign</name></expr>;</expr_stmt>

            </block_content>}</block>



            <macro pos:start="59:13" pos:end="59:44"><name pos:start="59:13" pos:end="59:26">LAST_SKIP_BITS</name><argument_list pos:start="59:27" pos:end="59:44">(<argument pos:start="59:28" pos:end="59:29">re</argument>, <argument pos:start="59:32" pos:end="59:37">&amp;s-&gt;gb</argument>, <argument pos:start="59:40" pos:end="59:43">code</argument>)</argument_list></macro>



            <if_stmt pos:start="63:13" pos:end="79:13"><if pos:start="63:13" pos:end="79:13">if <condition pos:start="63:16" pos:end="63:24">(<expr pos:start="63:17" pos:end="63:23"><name pos:start="63:17" pos:end="63:17">i</name> <operator pos:start="63:19" pos:end="63:20">&gt;=</operator> <name pos:start="63:22" pos:end="63:23">se</name></expr>)</condition> <block pos:start="63:26" pos:end="79:13">{<block_content pos:start="65:17" pos:end="77:26">

                <if_stmt pos:start="65:17" pos:end="73:17"><if pos:start="65:17" pos:end="73:17">if<condition pos:start="65:19" pos:end="65:27">(<expr pos:start="65:20" pos:end="65:26"><name pos:start="65:20" pos:end="65:20">i</name> <operator pos:start="65:22" pos:end="65:23">==</operator> <name pos:start="65:25" pos:end="65:26">se</name></expr>)</condition><block pos:start="65:28" pos:end="73:17">{<block_content pos:start="67:21" pos:end="71:26">

                    <expr_stmt pos:start="67:21" pos:end="67:52"><expr pos:start="67:21" pos:end="67:51"><name pos:start="67:21" pos:end="67:21">j</name> <operator pos:start="67:23" pos:end="67:23">=</operator> <name pos:start="67:25" pos:end="67:51"><name pos:start="67:25" pos:end="67:25">s</name><operator pos:start="67:26" pos:end="67:27">-&gt;</operator><name pos:start="67:28" pos:end="67:36">scantable</name><operator pos:start="67:37" pos:end="67:37">.</operator><name pos:start="67:38" pos:end="67:47">permutated</name><index pos:start="67:48" pos:end="67:51">[<expr pos:start="67:49" pos:end="67:50"><name pos:start="67:49" pos:end="67:50">se</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="69:21" pos:end="69:61"><expr pos:start="69:21" pos:end="69:60"><name pos:start="69:21" pos:end="69:28"><name pos:start="69:21" pos:end="69:25">block</name><index pos:start="69:26" pos:end="69:28">[<expr pos:start="69:27" pos:end="69:27"><name pos:start="69:27" pos:end="69:27">j</name></expr>]</index></name> <operator pos:start="69:30" pos:end="69:30">=</operator> <name pos:start="69:32" pos:end="69:36">level</name> <operator pos:start="69:38" pos:end="69:38">*</operator> <name pos:start="69:40" pos:end="69:54"><name pos:start="69:40" pos:end="69:51">quant_matrix</name><index pos:start="69:52" pos:end="69:54">[<expr pos:start="69:53" pos:end="69:53"><name pos:start="69:53" pos:end="69:53">j</name></expr>]</index></name> <operator pos:start="69:56" pos:end="69:57">&lt;&lt;</operator> <name pos:start="69:59" pos:end="69:60">Al</name></expr>;</expr_stmt>

                    <break pos:start="71:21" pos:end="71:26">break;</break>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="75:17" pos:end="75:71"><expr pos:start="75:17" pos:end="75:70"><call pos:start="75:17" pos:end="75:70"><name pos:start="75:17" pos:end="75:22">av_log</name><argument_list pos:start="75:23" pos:end="75:70">(<argument pos:start="75:24" pos:end="75:31"><expr pos:start="75:24" pos:end="75:31"><name pos:start="75:24" pos:end="75:31"><name pos:start="75:24" pos:end="75:24">s</name><operator pos:start="75:25" pos:end="75:26">-&gt;</operator><name pos:start="75:27" pos:end="75:31">avctx</name></name></expr></argument>, <argument pos:start="75:34" pos:end="75:45"><expr pos:start="75:34" pos:end="75:45"><name pos:start="75:34" pos:end="75:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="75:48" pos:end="75:66"><expr pos:start="75:48" pos:end="75:66"><literal type="string" pos:start="75:48" pos:end="75:66">"error count: %d\n"</literal></expr></argument>, <argument pos:start="75:69" pos:end="75:69"><expr pos:start="75:69" pos:end="75:69"><name pos:start="75:69" pos:end="75:69">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="77:17" pos:end="77:26">return <expr pos:start="77:24" pos:end="77:25"><operator pos:start="77:24" pos:end="77:24">-</operator><literal type="number" pos:start="77:25" pos:end="77:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:43"><expr pos:start="81:13" pos:end="81:42"><name pos:start="81:13" pos:end="81:13">j</name> <operator pos:start="81:15" pos:end="81:15">=</operator> <name pos:start="81:17" pos:end="81:42"><name pos:start="81:17" pos:end="81:17">s</name><operator pos:start="81:18" pos:end="81:19">-&gt;</operator><name pos:start="81:20" pos:end="81:28">scantable</name><operator pos:start="81:29" pos:end="81:29">.</operator><name pos:start="81:30" pos:end="81:39">permutated</name><index pos:start="81:40" pos:end="81:42">[<expr pos:start="81:41" pos:end="81:41"><name pos:start="81:41" pos:end="81:41">i</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:53"><expr pos:start="83:13" pos:end="83:52"><name pos:start="83:13" pos:end="83:20"><name pos:start="83:13" pos:end="83:17">block</name><index pos:start="83:18" pos:end="83:20">[<expr pos:start="83:19" pos:end="83:19"><name pos:start="83:19" pos:end="83:19">j</name></expr>]</index></name> <operator pos:start="83:22" pos:end="83:22">=</operator> <name pos:start="83:24" pos:end="83:28">level</name> <operator pos:start="83:30" pos:end="83:30">*</operator> <name pos:start="83:32" pos:end="83:46"><name pos:start="83:32" pos:end="83:43">quant_matrix</name><index pos:start="83:44" pos:end="83:46">[<expr pos:start="83:45" pos:end="83:45"><name pos:start="83:45" pos:end="83:45">j</name></expr>]</index></name> <operator pos:start="83:48" pos:end="83:49">&lt;&lt;</operator> <name pos:start="83:51" pos:end="83:52">Al</name></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="85:10" pos:end="111:9">else<block pos:start="85:14" pos:end="111:9">{<block_content pos:start="87:13" pos:end="109:13">

            <if_stmt pos:start="87:13" pos:end="109:13"><if pos:start="87:13" pos:end="91:13">if<condition pos:start="87:15" pos:end="87:26">(<expr pos:start="87:16" pos:end="87:25"><name pos:start="87:16" pos:end="87:18">run</name> <operator pos:start="87:20" pos:end="87:21">==</operator> <literal type="number" pos:start="87:23" pos:end="87:25">0xF</literal></expr>)</condition><block pos:start="87:27" pos:end="91:13">{<block_content pos:start="89:17" pos:end="89:24"><comment type="line" pos:start="87:28" pos:end="87:56">// ZRL - skip 15 coefficients</comment>

                <expr_stmt pos:start="89:17" pos:end="89:24"><expr pos:start="89:17" pos:end="89:23"><name pos:start="89:17" pos:end="89:17">i</name> <operator pos:start="89:19" pos:end="89:20">+=</operator> <literal type="number" pos:start="89:22" pos:end="89:23">15</literal></expr>;</expr_stmt>

            </block_content>}</block></if><else pos:start="91:14" pos:end="109:13">else<block pos:start="91:18" pos:end="109:13">{<block_content pos:start="93:17" pos:end="107:22">

                <expr_stmt pos:start="93:17" pos:end="93:33"><expr pos:start="93:17" pos:end="93:32"><name pos:start="93:17" pos:end="93:19">val</name> <operator pos:start="93:21" pos:end="93:21">=</operator> <operator pos:start="93:23" pos:end="93:23">(</operator><literal type="number" pos:start="93:24" pos:end="93:24">1</literal> <operator pos:start="93:26" pos:end="93:27">&lt;&lt;</operator> <name pos:start="93:29" pos:end="93:31">run</name><operator pos:start="93:32" pos:end="93:32">)</operator></expr>;</expr_stmt>

                <if_stmt pos:start="95:17" pos:end="103:17"><if pos:start="95:17" pos:end="103:17">if<condition pos:start="95:19" pos:end="95:23">(<expr pos:start="95:20" pos:end="95:22"><name pos:start="95:20" pos:end="95:22">run</name></expr>)</condition><block pos:start="95:24" pos:end="103:17">{<block_content pos:start="97:21" pos:end="101:52">

                    <expr_stmt pos:start="97:21" pos:end="97:45"><expr pos:start="97:21" pos:end="97:44"><call pos:start="97:21" pos:end="97:44"><name pos:start="97:21" pos:end="97:32">UPDATE_CACHE</name><argument_list pos:start="97:33" pos:end="97:44">(<argument pos:start="97:34" pos:end="97:35"><expr pos:start="97:34" pos:end="97:35"><name pos:start="97:34" pos:end="97:35">re</name></expr></argument>, <argument pos:start="97:38" pos:end="97:43"><expr pos:start="97:38" pos:end="97:43"><operator pos:start="97:38" pos:end="97:38">&amp;</operator><name pos:start="97:39" pos:end="97:43"><name pos:start="97:39" pos:end="97:39">s</name><operator pos:start="97:40" pos:end="97:41">-&gt;</operator><name pos:start="97:42" pos:end="97:43">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="99:21" pos:end="99:65"><expr pos:start="99:21" pos:end="99:64"><name pos:start="99:21" pos:end="99:23">val</name> <operator pos:start="99:25" pos:end="99:26">+=</operator> <call pos:start="99:28" pos:end="99:64"><name pos:start="99:28" pos:end="99:36">NEG_USR32</name><argument_list pos:start="99:37" pos:end="99:64">(<argument pos:start="99:38" pos:end="99:58"><expr pos:start="99:38" pos:end="99:58"><call pos:start="99:38" pos:end="99:58"><name pos:start="99:38" pos:end="99:46">GET_CACHE</name><argument_list pos:start="99:47" pos:end="99:58">(<argument pos:start="99:48" pos:end="99:49"><expr pos:start="99:48" pos:end="99:49"><name pos:start="99:48" pos:end="99:49">re</name></expr></argument>, <argument pos:start="99:52" pos:end="99:57"><expr pos:start="99:52" pos:end="99:57"><operator pos:start="99:52" pos:end="99:52">&amp;</operator><name pos:start="99:53" pos:end="99:57"><name pos:start="99:53" pos:end="99:53">s</name><operator pos:start="99:54" pos:end="99:55">-&gt;</operator><name pos:start="99:56" pos:end="99:57">gb</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="99:61" pos:end="99:63"><expr pos:start="99:61" pos:end="99:63"><name pos:start="99:61" pos:end="99:63">run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="101:21" pos:end="101:52"><expr pos:start="101:21" pos:end="101:51"><call pos:start="101:21" pos:end="101:51"><name pos:start="101:21" pos:end="101:34">LAST_SKIP_BITS</name><argument_list pos:start="101:35" pos:end="101:51">(<argument pos:start="101:36" pos:end="101:37"><expr pos:start="101:36" pos:end="101:37"><name pos:start="101:36" pos:end="101:37">re</name></expr></argument>, <argument pos:start="101:40" pos:end="101:45"><expr pos:start="101:40" pos:end="101:45"><operator pos:start="101:40" pos:end="101:40">&amp;</operator><name pos:start="101:41" pos:end="101:45"><name pos:start="101:41" pos:end="101:41">s</name><operator pos:start="101:42" pos:end="101:43">-&gt;</operator><name pos:start="101:44" pos:end="101:45">gb</name></name></expr></argument>, <argument pos:start="101:48" pos:end="101:50"><expr pos:start="101:48" pos:end="101:50"><name pos:start="101:48" pos:end="101:50">run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="105:17" pos:end="105:34"><expr pos:start="105:17" pos:end="105:33"><operator pos:start="105:17" pos:end="105:17">*</operator><name pos:start="105:18" pos:end="105:23">EOBRUN</name> <operator pos:start="105:25" pos:end="105:25">=</operator> <name pos:start="105:27" pos:end="105:29">val</name> <operator pos:start="105:31" pos:end="105:31">-</operator> <literal type="number" pos:start="105:33" pos:end="105:33">1</literal></expr>;</expr_stmt>

                <break pos:start="107:17" pos:end="107:22">break;</break>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>

    <macro pos:start="115:5" pos:end="115:28"><name pos:start="115:5" pos:end="115:16">CLOSE_READER</name><argument_list pos:start="115:17" pos:end="115:28">(<argument pos:start="115:18" pos:end="115:19">re</argument>, <argument pos:start="115:22" pos:end="115:27">&amp;s-&gt;gb</argument>)</argument_list></macro></block_content>}</block>

    <if_stmt pos:start="117:5" pos:end="119:22"><if pos:start="117:5" pos:end="119:22">if<condition pos:start="117:7" pos:end="117:21">(<expr pos:start="117:8" pos:end="117:20"><name pos:start="117:8" pos:end="117:8">i</name> <operator pos:start="117:10" pos:end="117:10">&gt;</operator> <operator pos:start="117:12" pos:end="117:12">*</operator><name pos:start="117:13" pos:end="117:20">last_nnz</name></expr>)</condition><block type="pseudo" pos:start="119:9" pos:end="119:22"><block_content pos:start="119:9" pos:end="119:22">

        <expr_stmt pos:start="119:9" pos:end="119:22"><expr pos:start="119:9" pos:end="119:21"><operator pos:start="119:9" pos:end="119:9">*</operator><name pos:start="119:10" pos:end="119:17">last_nnz</name> <operator pos:start="119:19" pos:end="119:19">=</operator> <name pos:start="119:21" pos:end="119:21">i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="121:5" pos:end="121:13">return <expr pos:start="121:12" pos:end="121:12"><literal type="number" pos:start="121:12" pos:end="121:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
