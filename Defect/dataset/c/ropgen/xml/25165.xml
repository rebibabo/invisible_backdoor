<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25165.c" pos:tabs="8"><function pos:start="1:1" pos:end="293:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">serial_ioport_write</name><parameter_list pos:start="1:32" pos:end="3:46">(<parameter pos:start="1:33" pos:end="1:44"><decl pos:start="1:33" pos:end="1:44"><type pos:start="1:33" pos:end="1:44"><name pos:start="1:33" pos:end="1:36">void</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:44">opaque</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:57"><decl pos:start="1:47" pos:end="1:57"><type pos:start="1:47" pos:end="1:57"><name pos:start="1:47" pos:end="1:52">hwaddr</name></type> <name pos:start="1:54" pos:end="1:57">addr</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:71"><decl pos:start="1:60" pos:end="1:71"><type pos:start="1:60" pos:end="1:71"><name pos:start="1:60" pos:end="1:67">uint64_t</name></type> <name pos:start="1:69" pos:end="1:71">val</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:45"><decl pos:start="3:33" pos:end="3:45"><type pos:start="3:33" pos:end="3:45"><name pos:start="3:33" pos:end="3:40">unsigned</name></type> <name pos:start="3:42" pos:end="3:45">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="293:1">{<block_content pos:start="7:5" pos:end="291:5">

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">SerialState</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:18">s</name> <init pos:start="7:20" pos:end="7:27">= <expr pos:start="7:22" pos:end="7:27"><name pos:start="7:22" pos:end="7:27">opaque</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:14"><expr pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:8">addr</name> <operator pos:start="11:10" pos:end="11:11">&amp;=</operator> <literal type="number" pos:start="11:13" pos:end="11:13">7</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:76"><expr pos:start="13:5" pos:end="13:75"><call pos:start="13:5" pos:end="13:75"><name pos:start="13:5" pos:end="13:11">DPRINTF</name><argument_list pos:start="13:12" pos:end="13:75">(<argument pos:start="13:13" pos:end="13:63"><expr pos:start="13:13" pos:end="13:63"><literal type="string" pos:start="13:13" pos:end="13:28">"write addr=0x%"</literal> <name pos:start="13:30" pos:end="13:40">HWADDR_PRIx</name> <literal type="string" pos:start="13:42" pos:end="13:51">" val=0x%"</literal> <name pos:start="13:53" pos:end="13:58">PRIx64</name> <literal type="string" pos:start="13:60" pos:end="13:63">"\n"</literal></expr></argument>, <argument pos:start="13:66" pos:end="13:69"><expr pos:start="13:66" pos:end="13:69"><name pos:start="13:66" pos:end="13:69">addr</name></expr></argument>, <argument pos:start="13:72" pos:end="13:74"><expr pos:start="13:72" pos:end="13:74"><name pos:start="13:72" pos:end="13:74">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="15:5" pos:end="291:5">switch<condition pos:start="15:11" pos:end="15:16">(<expr pos:start="15:12" pos:end="15:15"><name pos:start="15:12" pos:end="15:15">addr</name></expr>)</condition> <block pos:start="15:18" pos:end="291:5">{<block_content pos:start="17:5" pos:end="289:14">

    <default pos:start="17:5" pos:end="17:12">default:</default>

    <case pos:start="19:5" pos:end="19:11">case <expr pos:start="19:10" pos:end="19:10"><literal type="number" pos:start="19:10" pos:end="19:10">0</literal></expr>:</case>

        <if_stmt pos:start="21:9" pos:end="59:9"><if pos:start="21:9" pos:end="27:9">if <condition pos:start="21:12" pos:end="21:35">(<expr pos:start="21:13" pos:end="21:34"><name pos:start="21:13" pos:end="21:18"><name pos:start="21:13" pos:end="21:13">s</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:18">lcr</name></name> <operator pos:start="21:20" pos:end="21:20">&amp;</operator> <name pos:start="21:22" pos:end="21:34">UART_LCR_DLAB</name></expr>)</condition> <block pos:start="21:37" pos:end="27:9">{<block_content pos:start="23:13" pos:end="25:40">

            <expr_stmt pos:start="23:13" pos:end="23:53"><expr pos:start="23:13" pos:end="23:52"><name pos:start="23:13" pos:end="23:22"><name pos:start="23:13" pos:end="23:13">s</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:22">divider</name></name> <operator pos:start="23:24" pos:end="23:24">=</operator> <operator pos:start="23:26" pos:end="23:26">(</operator><name pos:start="23:27" pos:end="23:36"><name pos:start="23:27" pos:end="23:27">s</name><operator pos:start="23:28" pos:end="23:29">-&gt;</operator><name pos:start="23:30" pos:end="23:36">divider</name></name> <operator pos:start="23:38" pos:end="23:38">&amp;</operator> <literal type="number" pos:start="23:40" pos:end="23:45">0xff00</literal><operator pos:start="23:46" pos:end="23:46">)</operator> <operator pos:start="23:48" pos:end="23:48">|</operator> <name pos:start="23:50" pos:end="23:52">val</name></expr>;</expr_stmt>

            <expr_stmt pos:start="25:13" pos:end="25:40"><expr pos:start="25:13" pos:end="25:39"><call pos:start="25:13" pos:end="25:39"><name pos:start="25:13" pos:end="25:36">serial_update_parameters</name><argument_list pos:start="25:37" pos:end="25:39">(<argument pos:start="25:38" pos:end="25:38"><expr pos:start="25:38" pos:end="25:38"><name pos:start="25:38" pos:end="25:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="27:11" pos:end="59:9">else <block pos:start="27:16" pos:end="59:9">{<block_content pos:start="29:13" pos:end="57:13">

            <expr_stmt pos:start="29:13" pos:end="29:35"><expr pos:start="29:13" pos:end="29:34"><name pos:start="29:13" pos:end="29:18"><name pos:start="29:13" pos:end="29:13">s</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:18">thr</name></name> <operator pos:start="29:20" pos:end="29:20">=</operator> <operator pos:start="29:22" pos:end="29:22">(</operator><name pos:start="29:23" pos:end="29:29">uint8_t</name><operator pos:start="29:30" pos:end="29:30">)</operator> <name pos:start="29:32" pos:end="29:34">val</name></expr>;</expr_stmt>

            <if_stmt pos:start="31:13" pos:end="43:13"><if pos:start="31:13" pos:end="43:13">if<condition pos:start="31:15" pos:end="31:36">(<expr pos:start="31:16" pos:end="31:35"><name pos:start="31:16" pos:end="31:21"><name pos:start="31:16" pos:end="31:16">s</name><operator pos:start="31:17" pos:end="31:18">-&gt;</operator><name pos:start="31:19" pos:end="31:21">fcr</name></name> <operator pos:start="31:23" pos:end="31:23">&amp;</operator> <name pos:start="31:25" pos:end="31:35">UART_FCR_FE</name></expr>)</condition> <block pos:start="31:38" pos:end="43:13">{<block_content pos:start="35:17" pos:end="41:50">

                <comment type="block" pos:start="33:17" pos:end="33:75">/* xmit overruns overwrite data, so make space if needed */</comment>

                <if_stmt pos:start="35:17" pos:end="39:17"><if pos:start="35:17" pos:end="39:17">if <condition pos:start="35:20" pos:end="35:49">(<expr pos:start="35:21" pos:end="35:48"><call pos:start="35:21" pos:end="35:48"><name pos:start="35:21" pos:end="35:33">fifo8_is_full</name><argument_list pos:start="35:34" pos:end="35:48">(<argument pos:start="35:35" pos:end="35:47"><expr pos:start="35:35" pos:end="35:47"><operator pos:start="35:35" pos:end="35:35">&amp;</operator><name pos:start="35:36" pos:end="35:47"><name pos:start="35:36" pos:end="35:36">s</name><operator pos:start="35:37" pos:end="35:38">-&gt;</operator><name pos:start="35:39" pos:end="35:47">xmit_fifo</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="35:51" pos:end="39:17">{<block_content pos:start="37:21" pos:end="37:45">

                    <expr_stmt pos:start="37:21" pos:end="37:45"><expr pos:start="37:21" pos:end="37:44"><call pos:start="37:21" pos:end="37:44"><name pos:start="37:21" pos:end="37:29">fifo8_pop</name><argument_list pos:start="37:30" pos:end="37:44">(<argument pos:start="37:31" pos:end="37:43"><expr pos:start="37:31" pos:end="37:43"><operator pos:start="37:31" pos:end="37:31">&amp;</operator><name pos:start="37:32" pos:end="37:43"><name pos:start="37:32" pos:end="37:32">s</name><operator pos:start="37:33" pos:end="37:34">-&gt;</operator><name pos:start="37:35" pos:end="37:43">xmit_fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="41:17" pos:end="41:50"><expr pos:start="41:17" pos:end="41:49"><call pos:start="41:17" pos:end="41:49"><name pos:start="41:17" pos:end="41:26">fifo8_push</name><argument_list pos:start="41:27" pos:end="41:49">(<argument pos:start="41:28" pos:end="41:40"><expr pos:start="41:28" pos:end="41:40"><operator pos:start="41:28" pos:end="41:28">&amp;</operator><name pos:start="41:29" pos:end="41:40"><name pos:start="41:29" pos:end="41:29">s</name><operator pos:start="41:30" pos:end="41:31">-&gt;</operator><name pos:start="41:32" pos:end="41:40">xmit_fifo</name></name></expr></argument>, <argument pos:start="41:43" pos:end="41:48"><expr pos:start="41:43" pos:end="41:48"><name pos:start="41:43" pos:end="41:48"><name pos:start="41:43" pos:end="41:43">s</name><operator pos:start="41:44" pos:end="41:45">-&gt;</operator><name pos:start="41:46" pos:end="41:48">thr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:32"><expr pos:start="45:13" pos:end="45:31"><name pos:start="45:13" pos:end="45:27"><name pos:start="45:13" pos:end="45:13">s</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:27">thr_ipending</name></name> <operator pos:start="45:29" pos:end="45:29">=</operator> <literal type="number" pos:start="45:31" pos:end="45:31">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:37"><expr pos:start="47:13" pos:end="47:36"><name pos:start="47:13" pos:end="47:18"><name pos:start="47:13" pos:end="47:13">s</name><operator pos:start="47:14" pos:end="47:15">-&gt;</operator><name pos:start="47:16" pos:end="47:18">lsr</name></name> <operator pos:start="47:20" pos:end="47:21">&amp;=</operator> <operator pos:start="47:23" pos:end="47:23">~</operator><name pos:start="47:24" pos:end="47:36">UART_LSR_THRE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:37"><expr pos:start="49:13" pos:end="49:36"><name pos:start="49:13" pos:end="49:18"><name pos:start="49:13" pos:end="49:13">s</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:18">lsr</name></name> <operator pos:start="49:20" pos:end="49:21">&amp;=</operator> <operator pos:start="49:23" pos:end="49:23">~</operator><name pos:start="49:24" pos:end="49:36">UART_LSR_TEMT</name></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:33"><expr pos:start="51:13" pos:end="51:32"><call pos:start="51:13" pos:end="51:32"><name pos:start="51:13" pos:end="51:29">serial_update_irq</name><argument_list pos:start="51:30" pos:end="51:32">(<argument pos:start="51:31" pos:end="51:31"><expr pos:start="51:31" pos:end="51:31"><name pos:start="51:31" pos:end="51:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="53:13" pos:end="57:13"><if pos:start="53:13" pos:end="57:13">if <condition pos:start="53:16" pos:end="53:34">(<expr pos:start="53:17" pos:end="53:33"><name pos:start="53:17" pos:end="53:28"><name pos:start="53:17" pos:end="53:17">s</name><operator pos:start="53:18" pos:end="53:19">-&gt;</operator><name pos:start="53:20" pos:end="53:28">tsr_retry</name></name> <operator pos:start="53:30" pos:end="53:31">&lt;=</operator> <literal type="number" pos:start="53:33" pos:end="53:33">0</literal></expr>)</condition> <block pos:start="53:36" pos:end="57:13">{<block_content pos:start="55:17" pos:end="55:47">

                <expr_stmt pos:start="55:17" pos:end="55:47"><expr pos:start="55:17" pos:end="55:46"><call pos:start="55:17" pos:end="55:46"><name pos:start="55:17" pos:end="55:27">serial_xmit</name><argument_list pos:start="55:28" pos:end="55:46">(<argument pos:start="55:29" pos:end="55:32"><expr pos:start="55:29" pos:end="55:32"><name pos:start="55:29" pos:end="55:32">NULL</name></expr></argument>, <argument pos:start="55:35" pos:end="55:42"><expr pos:start="55:35" pos:end="55:42"><name pos:start="55:35" pos:end="55:42">G_IO_OUT</name></expr></argument>, <argument pos:start="55:45" pos:end="55:45"><expr pos:start="55:45" pos:end="55:45"><name pos:start="55:45" pos:end="55:45">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="61:9" pos:end="61:14">break;</break>

    <case pos:start="63:5" pos:end="63:11">case <expr pos:start="63:10" pos:end="63:10"><literal type="number" pos:start="63:10" pos:end="63:10">1</literal></expr>:</case>

        <if_stmt pos:start="65:9" pos:end="147:9"><if pos:start="65:9" pos:end="71:9">if <condition pos:start="65:12" pos:end="65:35">(<expr pos:start="65:13" pos:end="65:34"><name pos:start="65:13" pos:end="65:18"><name pos:start="65:13" pos:end="65:13">s</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:18">lcr</name></name> <operator pos:start="65:20" pos:end="65:20">&amp;</operator> <name pos:start="65:22" pos:end="65:34">UART_LCR_DLAB</name></expr>)</condition> <block pos:start="65:37" pos:end="71:9">{<block_content pos:start="67:13" pos:end="69:40">

            <expr_stmt pos:start="67:13" pos:end="67:60"><expr pos:start="67:13" pos:end="67:59"><name pos:start="67:13" pos:end="67:22"><name pos:start="67:13" pos:end="67:13">s</name><operator pos:start="67:14" pos:end="67:15">-&gt;</operator><name pos:start="67:16" pos:end="67:22">divider</name></name> <operator pos:start="67:24" pos:end="67:24">=</operator> <operator pos:start="67:26" pos:end="67:26">(</operator><name pos:start="67:27" pos:end="67:36"><name pos:start="67:27" pos:end="67:27">s</name><operator pos:start="67:28" pos:end="67:29">-&gt;</operator><name pos:start="67:30" pos:end="67:36">divider</name></name> <operator pos:start="67:38" pos:end="67:38">&amp;</operator> <literal type="number" pos:start="67:40" pos:end="67:45">0x00ff</literal><operator pos:start="67:46" pos:end="67:46">)</operator> <operator pos:start="67:48" pos:end="67:48">|</operator> <operator pos:start="67:50" pos:end="67:50">(</operator><name pos:start="67:51" pos:end="67:53">val</name> <operator pos:start="67:55" pos:end="67:56">&lt;&lt;</operator> <literal type="number" pos:start="67:58" pos:end="67:58">8</literal><operator pos:start="67:59" pos:end="67:59">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:40"><expr pos:start="69:13" pos:end="69:39"><call pos:start="69:13" pos:end="69:39"><name pos:start="69:13" pos:end="69:36">serial_update_parameters</name><argument_list pos:start="69:37" pos:end="69:39">(<argument pos:start="69:38" pos:end="69:38"><expr pos:start="69:38" pos:end="69:38"><name pos:start="69:38" pos:end="69:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="71:11" pos:end="147:9">else <block pos:start="71:16" pos:end="147:9">{<block_content pos:start="73:13" pos:end="145:13">

            <decl_stmt pos:start="73:13" pos:end="73:52"><decl pos:start="73:13" pos:end="73:51"><type pos:start="73:13" pos:end="73:19"><name pos:start="73:13" pos:end="73:19">uint8_t</name></type> <name pos:start="73:21" pos:end="73:27">changed</name> <init pos:start="73:29" pos:end="73:51">= <expr pos:start="73:31" pos:end="73:51"><operator pos:start="73:31" pos:end="73:31">(</operator><name pos:start="73:32" pos:end="73:37"><name pos:start="73:32" pos:end="73:32">s</name><operator pos:start="73:33" pos:end="73:34">-&gt;</operator><name pos:start="73:35" pos:end="73:37">ier</name></name> <operator pos:start="73:39" pos:end="73:39">^</operator> <name pos:start="73:41" pos:end="73:43">val</name><operator pos:start="73:44" pos:end="73:44">)</operator> <operator pos:start="73:46" pos:end="73:46">&amp;</operator> <literal type="number" pos:start="73:48" pos:end="73:51">0x0f</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:32"><expr pos:start="75:13" pos:end="75:31"><name pos:start="75:13" pos:end="75:18"><name pos:start="75:13" pos:end="75:13">s</name><operator pos:start="75:14" pos:end="75:15">-&gt;</operator><name pos:start="75:16" pos:end="75:18">ier</name></name> <operator pos:start="75:20" pos:end="75:20">=</operator> <name pos:start="75:22" pos:end="75:24">val</name> <operator pos:start="75:26" pos:end="75:26">&amp;</operator> <literal type="number" pos:start="75:28" pos:end="75:31">0x0f</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="77:13" pos:end="81:15">/* If the backend device is a real serial port, turn polling of the modem

             * status lines on physical port on or off depending on UART_IER_MSI state.

             */</comment>

            <if_stmt pos:start="83:13" pos:end="99:13"><if pos:start="83:13" pos:end="99:13">if <condition pos:start="83:16" pos:end="83:61">(<expr pos:start="83:17" pos:end="83:60"><operator pos:start="83:17" pos:end="83:17">(</operator><name pos:start="83:18" pos:end="83:24">changed</name> <operator pos:start="83:26" pos:end="83:26">&amp;</operator> <name pos:start="83:28" pos:end="83:39">UART_IER_MSI</name><operator pos:start="83:40" pos:end="83:40">)</operator> <operator pos:start="83:42" pos:end="83:43">&amp;&amp;</operator> <name pos:start="83:45" pos:end="83:55"><name pos:start="83:45" pos:end="83:45">s</name><operator pos:start="83:46" pos:end="83:47">-&gt;</operator><name pos:start="83:48" pos:end="83:55">poll_msl</name></name> <operator pos:start="83:57" pos:end="83:58">&gt;=</operator> <literal type="number" pos:start="83:60" pos:end="83:60">0</literal></expr>)</condition> <block pos:start="83:63" pos:end="99:13">{<block_content pos:start="85:17" pos:end="97:17">

                <if_stmt pos:start="85:17" pos:end="97:17"><if pos:start="85:17" pos:end="91:17">if <condition pos:start="85:20" pos:end="85:42">(<expr pos:start="85:21" pos:end="85:41"><name pos:start="85:21" pos:end="85:26"><name pos:start="85:21" pos:end="85:21">s</name><operator pos:start="85:22" pos:end="85:23">-&gt;</operator><name pos:start="85:24" pos:end="85:26">ier</name></name> <operator pos:start="85:28" pos:end="85:28">&amp;</operator> <name pos:start="85:30" pos:end="85:41">UART_IER_MSI</name></expr>)</condition> <block pos:start="85:44" pos:end="91:17">{<block_content pos:start="87:22" pos:end="89:42">

                     <expr_stmt pos:start="87:22" pos:end="87:37"><expr pos:start="87:22" pos:end="87:36"><name pos:start="87:22" pos:end="87:32"><name pos:start="87:22" pos:end="87:22">s</name><operator pos:start="87:23" pos:end="87:24">-&gt;</operator><name pos:start="87:25" pos:end="87:32">poll_msl</name></name> <operator pos:start="87:34" pos:end="87:34">=</operator> <literal type="number" pos:start="87:36" pos:end="87:36">1</literal></expr>;</expr_stmt>

                     <expr_stmt pos:start="89:22" pos:end="89:42"><expr pos:start="89:22" pos:end="89:41"><call pos:start="89:22" pos:end="89:41"><name pos:start="89:22" pos:end="89:38">serial_update_msl</name><argument_list pos:start="89:39" pos:end="89:41">(<argument pos:start="89:40" pos:end="89:40"><expr pos:start="89:40" pos:end="89:40"><name pos:start="89:40" pos:end="89:40">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="91:19" pos:end="97:17">else <block pos:start="91:24" pos:end="97:17">{<block_content pos:start="93:22" pos:end="95:37">

                     <expr_stmt pos:start="93:22" pos:end="93:53"><expr pos:start="93:22" pos:end="93:52"><call pos:start="93:22" pos:end="93:52"><name pos:start="93:22" pos:end="93:30">timer_del</name><argument_list pos:start="93:31" pos:end="93:52">(<argument pos:start="93:32" pos:end="93:51"><expr pos:start="93:32" pos:end="93:51"><name pos:start="93:32" pos:end="93:51"><name pos:start="93:32" pos:end="93:32">s</name><operator pos:start="93:33" pos:end="93:34">-&gt;</operator><name pos:start="93:35" pos:end="93:51">modem_status_poll</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                     <expr_stmt pos:start="95:22" pos:end="95:37"><expr pos:start="95:22" pos:end="95:36"><name pos:start="95:22" pos:end="95:32"><name pos:start="95:22" pos:end="95:22">s</name><operator pos:start="95:23" pos:end="95:24">-&gt;</operator><name pos:start="95:25" pos:end="95:32">poll_msl</name></name> <operator pos:start="95:34" pos:end="95:34">=</operator> <literal type="number" pos:start="95:36" pos:end="95:36">0</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="103:13" pos:end="123:15">/* Turning on the THRE interrupt on IER can trigger the interrupt

             * if LSR.THRE=1, even if it had been masked before by reading IIR.

             * This is not in the datasheet, but Windows relies on it.  It is

             * unclear if THRE has to be resampled every time THRI becomes

             * 1, or only on the rising edge.  Bochs does the latter, and Windows

             * always toggles IER to all zeroes and back to all ones, so do the

             * same.

             *

             * If IER.THRI is zero, thr_ipending is not used.  Set it to zero

             * so that the thr_ipending subsection is not migrated.

             */</comment>

            <if_stmt pos:start="125:13" pos:end="137:13"><if pos:start="125:13" pos:end="137:13">if <condition pos:start="125:16" pos:end="125:40">(<expr pos:start="125:17" pos:end="125:39"><name pos:start="125:17" pos:end="125:23">changed</name> <operator pos:start="125:25" pos:end="125:25">&amp;</operator> <name pos:start="125:27" pos:end="125:39">UART_IER_THRI</name></expr>)</condition> <block pos:start="125:42" pos:end="137:13">{<block_content pos:start="127:17" pos:end="135:17">

                <if_stmt pos:start="127:17" pos:end="135:17"><if pos:start="127:17" pos:end="131:17">if <condition pos:start="127:20" pos:end="127:73">(<expr pos:start="127:21" pos:end="127:72"><operator pos:start="127:21" pos:end="127:21">(</operator><name pos:start="127:22" pos:end="127:27"><name pos:start="127:22" pos:end="127:22">s</name><operator pos:start="127:23" pos:end="127:24">-&gt;</operator><name pos:start="127:25" pos:end="127:27">ier</name></name> <operator pos:start="127:29" pos:end="127:29">&amp;</operator> <name pos:start="127:31" pos:end="127:43">UART_IER_THRI</name><operator pos:start="127:44" pos:end="127:44">)</operator> <operator pos:start="127:46" pos:end="127:47">&amp;&amp;</operator> <operator pos:start="127:49" pos:end="127:49">(</operator><name pos:start="127:50" pos:end="127:55"><name pos:start="127:50" pos:end="127:50">s</name><operator pos:start="127:51" pos:end="127:52">-&gt;</operator><name pos:start="127:53" pos:end="127:55">lsr</name></name> <operator pos:start="127:57" pos:end="127:57">&amp;</operator> <name pos:start="127:59" pos:end="127:71">UART_LSR_THRE</name><operator pos:start="127:72" pos:end="127:72">)</operator></expr>)</condition> <block pos:start="127:75" pos:end="131:17">{<block_content pos:start="129:21" pos:end="129:40">

                    <expr_stmt pos:start="129:21" pos:end="129:40"><expr pos:start="129:21" pos:end="129:39"><name pos:start="129:21" pos:end="129:35"><name pos:start="129:21" pos:end="129:21">s</name><operator pos:start="129:22" pos:end="129:23">-&gt;</operator><name pos:start="129:24" pos:end="129:35">thr_ipending</name></name> <operator pos:start="129:37" pos:end="129:37">=</operator> <literal type="number" pos:start="129:39" pos:end="129:39">1</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="131:19" pos:end="135:17">else <block pos:start="131:24" pos:end="135:17">{<block_content pos:start="133:21" pos:end="133:40">

                    <expr_stmt pos:start="133:21" pos:end="133:40"><expr pos:start="133:21" pos:end="133:39"><name pos:start="133:21" pos:end="133:35"><name pos:start="133:21" pos:end="133:21">s</name><operator pos:start="133:22" pos:end="133:23">-&gt;</operator><name pos:start="133:24" pos:end="133:35">thr_ipending</name></name> <operator pos:start="133:37" pos:end="133:37">=</operator> <literal type="number" pos:start="133:39" pos:end="133:39">0</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="141:13" pos:end="145:13"><if pos:start="141:13" pos:end="145:13">if <condition pos:start="141:16" pos:end="141:24">(<expr pos:start="141:17" pos:end="141:23"><name pos:start="141:17" pos:end="141:23">changed</name></expr>)</condition> <block pos:start="141:26" pos:end="145:13">{<block_content pos:start="143:17" pos:end="143:37">

                <expr_stmt pos:start="143:17" pos:end="143:37"><expr pos:start="143:17" pos:end="143:36"><call pos:start="143:17" pos:end="143:36"><name pos:start="143:17" pos:end="143:33">serial_update_irq</name><argument_list pos:start="143:34" pos:end="143:36">(<argument pos:start="143:35" pos:end="143:35"><expr pos:start="143:35" pos:end="143:35"><name pos:start="143:35" pos:end="143:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="149:9" pos:end="149:14">break;</break>

    <case pos:start="151:5" pos:end="151:11">case <expr pos:start="151:10" pos:end="151:10"><literal type="number" pos:start="151:10" pos:end="151:10">2</literal></expr>:</case>

        <comment type="block" pos:start="153:9" pos:end="153:84">/* Did the enable/disable flag change? If so, make sure FIFOs get flushed */</comment>

        <if_stmt pos:start="155:9" pos:end="159:9"><if pos:start="155:9" pos:end="159:9">if <condition pos:start="155:12" pos:end="155:41">(<expr pos:start="155:13" pos:end="155:40"><operator pos:start="155:13" pos:end="155:13">(</operator><name pos:start="155:14" pos:end="155:16">val</name> <operator pos:start="155:18" pos:end="155:18">^</operator> <name pos:start="155:20" pos:end="155:25"><name pos:start="155:20" pos:end="155:20">s</name><operator pos:start="155:21" pos:end="155:22">-&gt;</operator><name pos:start="155:23" pos:end="155:25">fcr</name></name><operator pos:start="155:26" pos:end="155:26">)</operator> <operator pos:start="155:28" pos:end="155:28">&amp;</operator> <name pos:start="155:30" pos:end="155:40">UART_FCR_FE</name></expr>)</condition> <block pos:start="155:43" pos:end="159:9">{<block_content pos:start="157:13" pos:end="157:47">

            <expr_stmt pos:start="157:13" pos:end="157:47"><expr pos:start="157:13" pos:end="157:46"><name pos:start="157:13" pos:end="157:15">val</name> <operator pos:start="157:17" pos:end="157:18">|=</operator> <name pos:start="157:20" pos:end="157:31">UART_FCR_XFR</name> <operator pos:start="157:33" pos:end="157:33">|</operator> <name pos:start="157:35" pos:end="157:46">UART_FCR_RFR</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="163:9" pos:end="163:24">/* FIFO clear */</comment>



        <if_stmt pos:start="167:9" pos:end="177:9"><if pos:start="167:9" pos:end="177:9">if <condition pos:start="167:12" pos:end="167:31">(<expr pos:start="167:13" pos:end="167:30"><name pos:start="167:13" pos:end="167:15">val</name> <operator pos:start="167:17" pos:end="167:17">&amp;</operator> <name pos:start="167:19" pos:end="167:30">UART_FCR_RFR</name></expr>)</condition> <block pos:start="167:33" pos:end="177:9">{<block_content pos:start="169:13" pos:end="175:39">

            <expr_stmt pos:start="169:13" pos:end="169:51"><expr pos:start="169:13" pos:end="169:50"><name pos:start="169:13" pos:end="169:18"><name pos:start="169:13" pos:end="169:13">s</name><operator pos:start="169:14" pos:end="169:15">-&gt;</operator><name pos:start="169:16" pos:end="169:18">lsr</name></name> <operator pos:start="169:20" pos:end="169:21">&amp;=</operator> <operator pos:start="169:23" pos:end="169:23">~</operator><operator pos:start="169:24" pos:end="169:24">(</operator><name pos:start="169:25" pos:end="169:35">UART_LSR_DR</name> <operator pos:start="169:37" pos:end="169:37">|</operator> <name pos:start="169:39" pos:end="169:49">UART_LSR_BI</name><operator pos:start="169:50" pos:end="169:50">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:45"><expr pos:start="171:13" pos:end="171:44"><call pos:start="171:13" pos:end="171:44"><name pos:start="171:13" pos:end="171:21">timer_del</name><argument_list pos:start="171:22" pos:end="171:44">(<argument pos:start="171:23" pos:end="171:43"><expr pos:start="171:23" pos:end="171:43"><name pos:start="171:23" pos:end="171:43"><name pos:start="171:23" pos:end="171:23">s</name><operator pos:start="171:24" pos:end="171:25">-&gt;</operator><name pos:start="171:26" pos:end="171:43">fifo_timeout_timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:36"><expr pos:start="173:13" pos:end="173:35"><name pos:start="173:13" pos:end="173:31"><name pos:start="173:13" pos:end="173:13">s</name><operator pos:start="173:14" pos:end="173:15">-&gt;</operator><name pos:start="173:16" pos:end="173:31">timeout_ipending</name></name> <operator pos:start="173:33" pos:end="173:33">=</operator> <literal type="number" pos:start="173:35" pos:end="173:35">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="175:13" pos:end="175:39"><expr pos:start="175:13" pos:end="175:38"><call pos:start="175:13" pos:end="175:38"><name pos:start="175:13" pos:end="175:23">fifo8_reset</name><argument_list pos:start="175:24" pos:end="175:38">(<argument pos:start="175:25" pos:end="175:37"><expr pos:start="175:25" pos:end="175:37"><operator pos:start="175:25" pos:end="175:25">&amp;</operator><name pos:start="175:26" pos:end="175:37"><name pos:start="175:26" pos:end="175:26">s</name><operator pos:start="175:27" pos:end="175:28">-&gt;</operator><name pos:start="175:29" pos:end="175:37">recv_fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="181:9" pos:end="189:9"><if pos:start="181:9" pos:end="189:9">if <condition pos:start="181:12" pos:end="181:31">(<expr pos:start="181:13" pos:end="181:30"><name pos:start="181:13" pos:end="181:15">val</name> <operator pos:start="181:17" pos:end="181:17">&amp;</operator> <name pos:start="181:19" pos:end="181:30">UART_FCR_XFR</name></expr>)</condition> <block pos:start="181:33" pos:end="189:9">{<block_content pos:start="183:13" pos:end="187:39">

            <expr_stmt pos:start="183:13" pos:end="183:36"><expr pos:start="183:13" pos:end="183:35"><name pos:start="183:13" pos:end="183:18"><name pos:start="183:13" pos:end="183:13">s</name><operator pos:start="183:14" pos:end="183:15">-&gt;</operator><name pos:start="183:16" pos:end="183:18">lsr</name></name> <operator pos:start="183:20" pos:end="183:21">|=</operator> <name pos:start="183:23" pos:end="183:35">UART_LSR_THRE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="185:13" pos:end="185:32"><expr pos:start="185:13" pos:end="185:31"><name pos:start="185:13" pos:end="185:27"><name pos:start="185:13" pos:end="185:13">s</name><operator pos:start="185:14" pos:end="185:15">-&gt;</operator><name pos:start="185:16" pos:end="185:27">thr_ipending</name></name> <operator pos:start="185:29" pos:end="185:29">=</operator> <literal type="number" pos:start="185:31" pos:end="185:31">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="187:13" pos:end="187:39"><expr pos:start="187:13" pos:end="187:38"><call pos:start="187:13" pos:end="187:38"><name pos:start="187:13" pos:end="187:23">fifo8_reset</name><argument_list pos:start="187:24" pos:end="187:38">(<argument pos:start="187:25" pos:end="187:37"><expr pos:start="187:25" pos:end="187:37"><operator pos:start="187:25" pos:end="187:25">&amp;</operator><name pos:start="187:26" pos:end="187:37"><name pos:start="187:26" pos:end="187:26">s</name><operator pos:start="187:27" pos:end="187:28">-&gt;</operator><name pos:start="187:29" pos:end="187:37">xmit_fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="193:9" pos:end="193:40"><expr pos:start="193:9" pos:end="193:39"><call pos:start="193:9" pos:end="193:39"><name pos:start="193:9" pos:end="193:24">serial_write_fcr</name><argument_list pos:start="193:25" pos:end="193:39">(<argument pos:start="193:26" pos:end="193:26"><expr pos:start="193:26" pos:end="193:26"><name pos:start="193:26" pos:end="193:26">s</name></expr></argument>, <argument pos:start="193:29" pos:end="193:38"><expr pos:start="193:29" pos:end="193:38"><name pos:start="193:29" pos:end="193:31">val</name> <operator pos:start="193:33" pos:end="193:33">&amp;</operator> <literal type="number" pos:start="193:35" pos:end="193:38">0xC9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="195:9" pos:end="195:29"><expr pos:start="195:9" pos:end="195:28"><call pos:start="195:9" pos:end="195:28"><name pos:start="195:9" pos:end="195:25">serial_update_irq</name><argument_list pos:start="195:26" pos:end="195:28">(<argument pos:start="195:27" pos:end="195:27"><expr pos:start="195:27" pos:end="195:27"><name pos:start="195:27" pos:end="195:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="197:9" pos:end="197:14">break;</break>

    <case pos:start="199:5" pos:end="199:11">case <expr pos:start="199:10" pos:end="199:10"><literal type="number" pos:start="199:10" pos:end="199:10">3</literal></expr>:</case>

        <block pos:start="201:9" pos:end="221:9">{<block_content pos:start="203:13" pos:end="219:13">

            <decl_stmt pos:start="203:13" pos:end="203:29"><decl pos:start="203:13" pos:end="203:28"><type pos:start="203:13" pos:end="203:15"><name pos:start="203:13" pos:end="203:15">int</name></type> <name pos:start="203:17" pos:end="203:28">break_enable</name></decl>;</decl_stmt>

            <expr_stmt pos:start="205:13" pos:end="205:25"><expr pos:start="205:13" pos:end="205:24"><name pos:start="205:13" pos:end="205:18"><name pos:start="205:13" pos:end="205:13">s</name><operator pos:start="205:14" pos:end="205:15">-&gt;</operator><name pos:start="205:16" pos:end="205:18">lcr</name></name> <operator pos:start="205:20" pos:end="205:20">=</operator> <name pos:start="205:22" pos:end="205:24">val</name></expr>;</expr_stmt>

            <expr_stmt pos:start="207:13" pos:end="207:40"><expr pos:start="207:13" pos:end="207:39"><call pos:start="207:13" pos:end="207:39"><name pos:start="207:13" pos:end="207:36">serial_update_parameters</name><argument_list pos:start="207:37" pos:end="207:39">(<argument pos:start="207:38" pos:end="207:38"><expr pos:start="207:38" pos:end="207:38"><name pos:start="207:38" pos:end="207:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="209:13" pos:end="209:42"><expr pos:start="209:13" pos:end="209:41"><name pos:start="209:13" pos:end="209:24">break_enable</name> <operator pos:start="209:26" pos:end="209:26">=</operator> <operator pos:start="209:28" pos:end="209:28">(</operator><name pos:start="209:29" pos:end="209:31">val</name> <operator pos:start="209:33" pos:end="209:34">&gt;&gt;</operator> <literal type="number" pos:start="209:36" pos:end="209:36">6</literal><operator pos:start="209:37" pos:end="209:37">)</operator> <operator pos:start="209:39" pos:end="209:39">&amp;</operator> <literal type="number" pos:start="209:41" pos:end="209:41">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="211:13" pos:end="219:13"><if pos:start="211:13" pos:end="219:13">if <condition pos:start="211:16" pos:end="211:53">(<expr pos:start="211:17" pos:end="211:52"><name pos:start="211:17" pos:end="211:28">break_enable</name> <operator pos:start="211:30" pos:end="211:31">!=</operator> <name pos:start="211:33" pos:end="211:52"><name pos:start="211:33" pos:end="211:33">s</name><operator pos:start="211:34" pos:end="211:35">-&gt;</operator><name pos:start="211:36" pos:end="211:52">last_break_enable</name></name></expr>)</condition> <block pos:start="211:55" pos:end="219:13">{<block_content pos:start="213:17" pos:end="217:46">

                <expr_stmt pos:start="213:17" pos:end="213:52"><expr pos:start="213:17" pos:end="213:51"><name pos:start="213:17" pos:end="213:36"><name pos:start="213:17" pos:end="213:17">s</name><operator pos:start="213:18" pos:end="213:19">-&gt;</operator><name pos:start="213:20" pos:end="213:36">last_break_enable</name></name> <operator pos:start="213:38" pos:end="213:38">=</operator> <name pos:start="213:40" pos:end="213:51">break_enable</name></expr>;</expr_stmt>

                <expr_stmt pos:start="215:17" pos:end="217:46"><expr pos:start="215:17" pos:end="217:45"><call pos:start="215:17" pos:end="217:45"><name pos:start="215:17" pos:end="215:33">qemu_chr_fe_ioctl</name><argument_list pos:start="215:34" pos:end="217:45">(<argument pos:start="215:35" pos:end="215:40"><expr pos:start="215:35" pos:end="215:40"><name pos:start="215:35" pos:end="215:40"><name pos:start="215:35" pos:end="215:35">s</name><operator pos:start="215:36" pos:end="215:37">-&gt;</operator><name pos:start="215:38" pos:end="215:40">chr</name></name></expr></argument>, <argument pos:start="215:43" pos:end="215:68"><expr pos:start="215:43" pos:end="215:68"><name pos:start="215:43" pos:end="215:68">CHR_IOCTL_SERIAL_SET_BREAK</name></expr></argument>,

                               <argument pos:start="217:32" pos:end="217:44"><expr pos:start="217:32" pos:end="217:44"><operator pos:start="217:32" pos:end="217:32">&amp;</operator><name pos:start="217:33" pos:end="217:44">break_enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="223:9" pos:end="223:14">break;</break>

    <case pos:start="225:5" pos:end="225:11">case <expr pos:start="225:10" pos:end="225:10"><literal type="number" pos:start="225:10" pos:end="225:10">4</literal></expr>:</case>

        <block pos:start="227:9" pos:end="273:9">{<block_content pos:start="229:13" pos:end="271:13">

            <decl_stmt pos:start="229:13" pos:end="229:22"><decl pos:start="229:13" pos:end="229:21"><type pos:start="229:13" pos:end="229:15"><name pos:start="229:13" pos:end="229:15">int</name></type> <name pos:start="229:17" pos:end="229:21">flags</name></decl>;</decl_stmt>

            <decl_stmt pos:start="231:13" pos:end="231:33"><decl pos:start="231:13" pos:end="231:32"><type pos:start="231:13" pos:end="231:15"><name pos:start="231:13" pos:end="231:15">int</name></type> <name pos:start="231:17" pos:end="231:23">old_mcr</name> <init pos:start="231:25" pos:end="231:32">= <expr pos:start="231:27" pos:end="231:32"><name pos:start="231:27" pos:end="231:32"><name pos:start="231:27" pos:end="231:27">s</name><operator pos:start="231:28" pos:end="231:29">-&gt;</operator><name pos:start="231:30" pos:end="231:32">mcr</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="233:13" pos:end="233:32"><expr pos:start="233:13" pos:end="233:31"><name pos:start="233:13" pos:end="233:18"><name pos:start="233:13" pos:end="233:13">s</name><operator pos:start="233:14" pos:end="233:15">-&gt;</operator><name pos:start="233:16" pos:end="233:18">mcr</name></name> <operator pos:start="233:20" pos:end="233:20">=</operator> <name pos:start="233:22" pos:end="233:24">val</name> <operator pos:start="233:26" pos:end="233:26">&amp;</operator> <literal type="number" pos:start="233:28" pos:end="233:31">0x1f</literal></expr>;</expr_stmt>

            <if_stmt pos:start="235:13" pos:end="237:22"><if pos:start="235:13" pos:end="237:22">if <condition pos:start="235:16" pos:end="235:36">(<expr pos:start="235:17" pos:end="235:35"><name pos:start="235:17" pos:end="235:19">val</name> <operator pos:start="235:21" pos:end="235:21">&amp;</operator> <name pos:start="235:23" pos:end="235:35">UART_MCR_LOOP</name></expr>)</condition><block type="pseudo" pos:start="237:17" pos:end="237:22"><block_content pos:start="237:17" pos:end="237:22">

                <break pos:start="237:17" pos:end="237:22">break;</break></block_content></block></if></if_stmt>



            <if_stmt pos:start="241:13" pos:end="271:13"><if pos:start="241:13" pos:end="271:13">if <condition pos:start="241:16" pos:end="241:54">(<expr pos:start="241:17" pos:end="241:53"><name pos:start="241:17" pos:end="241:27"><name pos:start="241:17" pos:end="241:17">s</name><operator pos:start="241:18" pos:end="241:19">-&gt;</operator><name pos:start="241:20" pos:end="241:27">poll_msl</name></name> <operator pos:start="241:29" pos:end="241:30">&gt;=</operator> <literal type="number" pos:start="241:32" pos:end="241:32">0</literal> <operator pos:start="241:34" pos:end="241:35">&amp;&amp;</operator> <name pos:start="241:37" pos:end="241:43">old_mcr</name> <operator pos:start="241:45" pos:end="241:46">!=</operator> <name pos:start="241:48" pos:end="241:53"><name pos:start="241:48" pos:end="241:48">s</name><operator pos:start="241:49" pos:end="241:50">-&gt;</operator><name pos:start="241:51" pos:end="241:53">mcr</name></name></expr>)</condition> <block pos:start="241:56" pos:end="271:13">{<block_content pos:start="245:17" pos:end="269:111">



                <expr_stmt pos:start="245:17" pos:end="245:77"><expr pos:start="245:17" pos:end="245:76"><call pos:start="245:17" pos:end="245:76"><name pos:start="245:17" pos:end="245:33">qemu_chr_fe_ioctl</name><argument_list pos:start="245:34" pos:end="245:76">(<argument pos:start="245:35" pos:end="245:40"><expr pos:start="245:35" pos:end="245:40"><name pos:start="245:35" pos:end="245:40"><name pos:start="245:35" pos:end="245:35">s</name><operator pos:start="245:36" pos:end="245:37">-&gt;</operator><name pos:start="245:38" pos:end="245:40">chr</name></name></expr></argument>,<argument pos:start="245:42" pos:end="245:67"><expr pos:start="245:42" pos:end="245:67"><name pos:start="245:42" pos:end="245:67">CHR_IOCTL_SERIAL_GET_TIOCM</name></expr></argument>, <argument pos:start="245:70" pos:end="245:75"><expr pos:start="245:70" pos:end="245:75"><operator pos:start="245:70" pos:end="245:70">&amp;</operator><name pos:start="245:71" pos:end="245:75">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="249:17" pos:end="249:58"><expr pos:start="249:17" pos:end="249:57"><name pos:start="249:17" pos:end="249:21">flags</name> <operator pos:start="249:23" pos:end="249:24">&amp;=</operator> <operator pos:start="249:26" pos:end="249:26">~</operator><operator pos:start="249:27" pos:end="249:27">(</operator><name pos:start="249:28" pos:end="249:40">CHR_TIOCM_RTS</name> <operator pos:start="249:42" pos:end="249:42">|</operator> <name pos:start="249:44" pos:end="249:56">CHR_TIOCM_DTR</name><operator pos:start="249:57" pos:end="249:57">)</operator></expr>;</expr_stmt>



                <if_stmt pos:start="253:17" pos:end="255:43"><if pos:start="253:17" pos:end="255:43">if <condition pos:start="253:20" pos:end="253:39">(<expr pos:start="253:21" pos:end="253:38"><name pos:start="253:21" pos:end="253:23">val</name> <operator pos:start="253:25" pos:end="253:25">&amp;</operator> <name pos:start="253:27" pos:end="253:38">UART_MCR_RTS</name></expr>)</condition><block type="pseudo" pos:start="255:21" pos:end="255:43"><block_content pos:start="255:21" pos:end="255:43">

                    <expr_stmt pos:start="255:21" pos:end="255:43"><expr pos:start="255:21" pos:end="255:42"><name pos:start="255:21" pos:end="255:25">flags</name> <operator pos:start="255:27" pos:end="255:28">|=</operator> <name pos:start="255:30" pos:end="255:42">CHR_TIOCM_RTS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="257:17" pos:end="259:43"><if pos:start="257:17" pos:end="259:43">if <condition pos:start="257:20" pos:end="257:39">(<expr pos:start="257:21" pos:end="257:38"><name pos:start="257:21" pos:end="257:23">val</name> <operator pos:start="257:25" pos:end="257:25">&amp;</operator> <name pos:start="257:27" pos:end="257:38">UART_MCR_DTR</name></expr>)</condition><block type="pseudo" pos:start="259:21" pos:end="259:43"><block_content pos:start="259:21" pos:end="259:43">

                    <expr_stmt pos:start="259:21" pos:end="259:43"><expr pos:start="259:21" pos:end="259:42"><name pos:start="259:21" pos:end="259:25">flags</name> <operator pos:start="259:27" pos:end="259:28">|=</operator> <name pos:start="259:30" pos:end="259:42">CHR_TIOCM_DTR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



                <expr_stmt pos:start="263:17" pos:end="263:77"><expr pos:start="263:17" pos:end="263:76"><call pos:start="263:17" pos:end="263:76"><name pos:start="263:17" pos:end="263:33">qemu_chr_fe_ioctl</name><argument_list pos:start="263:34" pos:end="263:76">(<argument pos:start="263:35" pos:end="263:40"><expr pos:start="263:35" pos:end="263:40"><name pos:start="263:35" pos:end="263:40"><name pos:start="263:35" pos:end="263:35">s</name><operator pos:start="263:36" pos:end="263:37">-&gt;</operator><name pos:start="263:38" pos:end="263:40">chr</name></name></expr></argument>,<argument pos:start="263:42" pos:end="263:67"><expr pos:start="263:42" pos:end="263:67"><name pos:start="263:42" pos:end="263:67">CHR_IOCTL_SERIAL_SET_TIOCM</name></expr></argument>, <argument pos:start="263:70" pos:end="263:75"><expr pos:start="263:70" pos:end="263:75"><operator pos:start="263:70" pos:end="263:70">&amp;</operator><name pos:start="263:71" pos:end="263:75">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="265:17" pos:end="267:82">/* Update the modem status after a one-character-send wait-time, since there may be a response

                   from the device/computer at the other end of the serial line */</comment>

                <expr_stmt pos:start="269:17" pos:end="269:111"><expr pos:start="269:17" pos:end="269:110"><call pos:start="269:17" pos:end="269:110"><name pos:start="269:17" pos:end="269:25">timer_mod</name><argument_list pos:start="269:26" pos:end="269:110">(<argument pos:start="269:27" pos:end="269:46"><expr pos:start="269:27" pos:end="269:46"><name pos:start="269:27" pos:end="269:46"><name pos:start="269:27" pos:end="269:27">s</name><operator pos:start="269:28" pos:end="269:29">-&gt;</operator><name pos:start="269:30" pos:end="269:46">modem_status_poll</name></name></expr></argument>, <argument pos:start="269:49" pos:end="269:109"><expr pos:start="269:49" pos:end="269:109"><call pos:start="269:49" pos:end="269:85"><name pos:start="269:49" pos:end="269:65">qemu_clock_get_ns</name><argument_list pos:start="269:66" pos:end="269:85">(<argument pos:start="269:67" pos:end="269:84"><expr pos:start="269:67" pos:end="269:84"><name pos:start="269:67" pos:end="269:84">QEMU_CLOCK_VIRTUAL</name></expr></argument>)</argument_list></call> <operator pos:start="269:87" pos:end="269:87">+</operator> <name pos:start="269:89" pos:end="269:109"><name pos:start="269:89" pos:end="269:89">s</name><operator pos:start="269:90" pos:end="269:91">-&gt;</operator><name pos:start="269:92" pos:end="269:109">char_transmit_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="275:9" pos:end="275:14">break;</break>

    <case pos:start="277:5" pos:end="277:11">case <expr pos:start="277:10" pos:end="277:10"><literal type="number" pos:start="277:10" pos:end="277:10">5</literal></expr>:</case>

        <break pos:start="279:9" pos:end="279:14">break;</break>

    <case pos:start="281:5" pos:end="281:11">case <expr pos:start="281:10" pos:end="281:10"><literal type="number" pos:start="281:10" pos:end="281:10">6</literal></expr>:</case>

        <break pos:start="283:9" pos:end="283:14">break;</break>

    <case pos:start="285:5" pos:end="285:11">case <expr pos:start="285:10" pos:end="285:10"><literal type="number" pos:start="285:10" pos:end="285:10">7</literal></expr>:</case>

        <expr_stmt pos:start="287:9" pos:end="287:21"><expr pos:start="287:9" pos:end="287:20"><name pos:start="287:9" pos:end="287:14"><name pos:start="287:9" pos:end="287:9">s</name><operator pos:start="287:10" pos:end="287:11">-&gt;</operator><name pos:start="287:12" pos:end="287:14">scr</name></name> <operator pos:start="287:16" pos:end="287:16">=</operator> <name pos:start="287:18" pos:end="287:20">val</name></expr>;</expr_stmt>

        <break pos:start="289:9" pos:end="289:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
