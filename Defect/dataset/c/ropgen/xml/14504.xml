<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14504.c" pos:tabs="8"><function pos:start="1:1" pos:end="143:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">qemu_chr_parse_socket</name><parameter_list pos:start="1:34" pos:end="3:47">(<parameter pos:start="1:35" pos:end="1:48"><decl pos:start="1:35" pos:end="1:48"><type pos:start="1:35" pos:end="1:48"><name pos:start="1:35" pos:end="1:42">QemuOpts</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:48">opts</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:73"><decl pos:start="1:51" pos:end="1:73"><type pos:start="1:51" pos:end="1:73"><name pos:start="1:51" pos:end="1:64">ChardevBackend</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:73">backend</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:46"><decl pos:start="3:35" pos:end="3:46"><type pos:start="3:35" pos:end="3:46"><name pos:start="3:35" pos:end="3:39">Error</name> <modifier pos:start="3:41" pos:end="3:41">*</modifier><modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:46">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="143:1">{<block_content pos:start="7:5" pos:end="141:22">

    <decl_stmt pos:start="7:5" pos:end="7:67"><decl pos:start="7:5" pos:end="7:66"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">bool</name></type> <name pos:start="7:10" pos:end="7:18">is_listen</name>      <init pos:start="7:25" pos:end="7:66">= <expr pos:start="7:27" pos:end="7:66"><call pos:start="7:27" pos:end="7:66"><name pos:start="7:27" pos:end="7:43">qemu_opt_get_bool</name><argument_list pos:start="7:44" pos:end="7:66">(<argument pos:start="7:45" pos:end="7:48"><expr pos:start="7:45" pos:end="7:48"><name pos:start="7:45" pos:end="7:48">opts</name></expr></argument>, <argument pos:start="7:51" pos:end="7:58"><expr pos:start="7:51" pos:end="7:58"><literal type="string" pos:start="7:51" pos:end="7:58">"server"</literal></expr></argument>, <argument pos:start="7:61" pos:end="7:65"><expr pos:start="7:61" pos:end="7:65"><name pos:start="7:61" pos:end="7:65">false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:77"><decl pos:start="9:5" pos:end="9:76"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">bool</name></type> <name pos:start="9:10" pos:end="9:23">is_waitconnect</name> <init pos:start="9:25" pos:end="9:76">= <expr pos:start="9:27" pos:end="9:76"><name pos:start="9:27" pos:end="9:35">is_listen</name> <operator pos:start="9:37" pos:end="9:38">&amp;&amp;</operator> <call pos:start="9:40" pos:end="9:76"><name pos:start="9:40" pos:end="9:56">qemu_opt_get_bool</name><argument_list pos:start="9:57" pos:end="9:76">(<argument pos:start="9:58" pos:end="9:61"><expr pos:start="9:58" pos:end="9:61"><name pos:start="9:58" pos:end="9:61">opts</name></expr></argument>, <argument pos:start="9:64" pos:end="9:69"><expr pos:start="9:64" pos:end="9:69"><literal type="string" pos:start="9:64" pos:end="9:69">"wait"</literal></expr></argument>, <argument pos:start="9:72" pos:end="9:75"><expr pos:start="9:72" pos:end="9:75"><name pos:start="9:72" pos:end="9:75">true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:67"><decl pos:start="11:5" pos:end="11:66"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">bool</name></type> <name pos:start="11:10" pos:end="11:18">is_telnet</name>      <init pos:start="11:25" pos:end="11:66">= <expr pos:start="11:27" pos:end="11:66"><call pos:start="11:27" pos:end="11:66"><name pos:start="11:27" pos:end="11:43">qemu_opt_get_bool</name><argument_list pos:start="11:44" pos:end="11:66">(<argument pos:start="11:45" pos:end="11:48"><expr pos:start="11:45" pos:end="11:48"><name pos:start="11:45" pos:end="11:48">opts</name></expr></argument>, <argument pos:start="11:51" pos:end="11:58"><expr pos:start="11:51" pos:end="11:58"><literal type="string" pos:start="11:51" pos:end="11:58">"telnet"</literal></expr></argument>, <argument pos:start="11:61" pos:end="11:65"><expr pos:start="11:61" pos:end="11:65"><name pos:start="11:61" pos:end="11:65">false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:67"><decl pos:start="13:5" pos:end="13:66"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">bool</name></type> <name pos:start="13:10" pos:end="13:18">is_tn3270</name>      <init pos:start="13:25" pos:end="13:66">= <expr pos:start="13:27" pos:end="13:66"><call pos:start="13:27" pos:end="13:66"><name pos:start="13:27" pos:end="13:43">qemu_opt_get_bool</name><argument_list pos:start="13:44" pos:end="13:66">(<argument pos:start="13:45" pos:end="13:48"><expr pos:start="13:45" pos:end="13:48"><name pos:start="13:45" pos:end="13:48">opts</name></expr></argument>, <argument pos:start="13:51" pos:end="13:58"><expr pos:start="13:51" pos:end="13:58"><literal type="string" pos:start="13:51" pos:end="13:58">"tn3270"</literal></expr></argument>, <argument pos:start="13:61" pos:end="13:65"><expr pos:start="13:61" pos:end="13:65"><name pos:start="13:61" pos:end="13:65">false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:66"><decl pos:start="15:5" pos:end="15:65"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">bool</name></type> <name pos:start="15:10" pos:end="15:19">do_nodelay</name>     <init pos:start="15:25" pos:end="15:65">= <expr pos:start="15:27" pos:end="15:65"><operator pos:start="15:27" pos:end="15:27">!</operator><call pos:start="15:28" pos:end="15:65"><name pos:start="15:28" pos:end="15:44">qemu_opt_get_bool</name><argument_list pos:start="15:45" pos:end="15:65">(<argument pos:start="15:46" pos:end="15:49"><expr pos:start="15:46" pos:end="15:49"><name pos:start="15:46" pos:end="15:49">opts</name></expr></argument>, <argument pos:start="15:52" pos:end="15:58"><expr pos:start="15:52" pos:end="15:58"><literal type="string" pos:start="15:52" pos:end="15:58">"delay"</literal></expr></argument>, <argument pos:start="15:61" pos:end="15:64"><expr pos:start="15:61" pos:end="15:64"><name pos:start="15:61" pos:end="15:64">true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:68"><decl pos:start="17:5" pos:end="17:67"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">int64_t</name></type> <name pos:start="17:13" pos:end="17:21">reconnect</name>   <init pos:start="17:25" pos:end="17:67">= <expr pos:start="17:27" pos:end="17:67"><call pos:start="17:27" pos:end="17:67"><name pos:start="17:27" pos:end="17:45">qemu_opt_get_number</name><argument_list pos:start="17:46" pos:end="17:67">(<argument pos:start="17:47" pos:end="17:50"><expr pos:start="17:47" pos:end="17:50"><name pos:start="17:47" pos:end="17:50">opts</name></expr></argument>, <argument pos:start="17:53" pos:end="17:63"><expr pos:start="17:53" pos:end="17:63"><literal type="string" pos:start="17:53" pos:end="17:63">"reconnect"</literal></expr></argument>, <argument pos:start="17:66" pos:end="17:66"><expr pos:start="17:66" pos:end="17:66"><literal type="number" pos:start="17:66" pos:end="17:66">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:50"><decl pos:start="19:5" pos:end="19:49"><type pos:start="19:5" pos:end="19:16"><specifier pos:start="19:5" pos:end="19:9">const</specifier> <name pos:start="19:11" pos:end="19:14">char</name> <modifier pos:start="19:16" pos:end="19:16">*</modifier></type><name pos:start="19:17" pos:end="19:20">path</name> <init pos:start="19:22" pos:end="19:49">= <expr pos:start="19:24" pos:end="19:49"><call pos:start="19:24" pos:end="19:49"><name pos:start="19:24" pos:end="19:35">qemu_opt_get</name><argument_list pos:start="19:36" pos:end="19:49">(<argument pos:start="19:37" pos:end="19:40"><expr pos:start="19:37" pos:end="19:40"><name pos:start="19:37" pos:end="19:40">opts</name></expr></argument>, <argument pos:start="19:43" pos:end="19:48"><expr pos:start="19:43" pos:end="19:48"><literal type="string" pos:start="19:43" pos:end="19:48">"path"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:50"><decl pos:start="21:5" pos:end="21:49"><type pos:start="21:5" pos:end="21:16"><specifier pos:start="21:5" pos:end="21:9">const</specifier> <name pos:start="21:11" pos:end="21:14">char</name> <modifier pos:start="21:16" pos:end="21:16">*</modifier></type><name pos:start="21:17" pos:end="21:20">host</name> <init pos:start="21:22" pos:end="21:49">= <expr pos:start="21:24" pos:end="21:49"><call pos:start="21:24" pos:end="21:49"><name pos:start="21:24" pos:end="21:35">qemu_opt_get</name><argument_list pos:start="21:36" pos:end="21:49">(<argument pos:start="21:37" pos:end="21:40"><expr pos:start="21:37" pos:end="21:40"><name pos:start="21:37" pos:end="21:40">opts</name></expr></argument>, <argument pos:start="21:43" pos:end="21:48"><expr pos:start="21:43" pos:end="21:48"><literal type="string" pos:start="21:43" pos:end="21:48">"host"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:50"><decl pos:start="23:5" pos:end="23:49"><type pos:start="23:5" pos:end="23:16"><specifier pos:start="23:5" pos:end="23:9">const</specifier> <name pos:start="23:11" pos:end="23:14">char</name> <modifier pos:start="23:16" pos:end="23:16">*</modifier></type><name pos:start="23:17" pos:end="23:20">port</name> <init pos:start="23:22" pos:end="23:49">= <expr pos:start="23:24" pos:end="23:49"><call pos:start="23:24" pos:end="23:49"><name pos:start="23:24" pos:end="23:35">qemu_opt_get</name><argument_list pos:start="23:36" pos:end="23:49">(<argument pos:start="23:37" pos:end="23:40"><expr pos:start="23:37" pos:end="23:40"><name pos:start="23:37" pos:end="23:40">opts</name></expr></argument>, <argument pos:start="23:43" pos:end="23:48"><expr pos:start="23:43" pos:end="23:48"><literal type="string" pos:start="23:43" pos:end="23:48">"port"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:60"><decl pos:start="25:5" pos:end="25:59"><type pos:start="25:5" pos:end="25:16"><specifier pos:start="25:5" pos:end="25:9">const</specifier> <name pos:start="25:11" pos:end="25:14">char</name> <modifier pos:start="25:16" pos:end="25:16">*</modifier></type><name pos:start="25:17" pos:end="25:25">tls_creds</name> <init pos:start="25:27" pos:end="25:59">= <expr pos:start="25:29" pos:end="25:59"><call pos:start="25:29" pos:end="25:59"><name pos:start="25:29" pos:end="25:40">qemu_opt_get</name><argument_list pos:start="25:41" pos:end="25:59">(<argument pos:start="25:42" pos:end="25:45"><expr pos:start="25:42" pos:end="25:45"><name pos:start="25:42" pos:end="25:45">opts</name></expr></argument>, <argument pos:start="25:48" pos:end="25:58"><expr pos:start="25:48" pos:end="25:58"><literal type="string" pos:start="25:48" pos:end="25:58">"tls-creds"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:24"><decl pos:start="27:5" pos:end="27:23"><type pos:start="27:5" pos:end="27:19"><name pos:start="27:5" pos:end="27:17">SocketAddress</name> <modifier pos:start="27:19" pos:end="27:19">*</modifier></type><name pos:start="27:20" pos:end="27:23">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:24"><decl pos:start="29:5" pos:end="29:23"><type pos:start="29:5" pos:end="29:19"><name pos:start="29:5" pos:end="29:17">ChardevSocket</name> <modifier pos:start="29:19" pos:end="29:19">*</modifier></type><name pos:start="29:20" pos:end="29:23">sock</name></decl>;</decl_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:48"><expr pos:start="33:5" pos:end="33:47"><name pos:start="33:5" pos:end="33:17"><name pos:start="33:5" pos:end="33:11">backend</name><operator pos:start="33:12" pos:end="33:13">-&gt;</operator><name pos:start="33:14" pos:end="33:17">type</name></name> <operator pos:start="33:19" pos:end="33:19">=</operator> <name pos:start="33:21" pos:end="33:47">CHARDEV_BACKEND_KIND_SOCKET</name></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="63:5"><if pos:start="35:5" pos:end="53:5">if <condition pos:start="35:8" pos:end="35:14">(<expr pos:start="35:9" pos:end="35:13"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:13">path</name></expr>)</condition> <block pos:start="35:16" pos:end="53:5">{<block_content pos:start="37:9" pos:end="51:9">

        <if_stmt pos:start="37:9" pos:end="43:9"><if pos:start="37:9" pos:end="43:9">if <condition pos:start="37:12" pos:end="37:18">(<expr pos:start="37:13" pos:end="37:17"><operator pos:start="37:13" pos:end="37:13">!</operator><name pos:start="37:14" pos:end="37:17">host</name></expr>)</condition> <block pos:start="37:20" pos:end="43:9">{<block_content pos:start="39:13" pos:end="41:19">

            <expr_stmt pos:start="39:13" pos:end="39:63"><expr pos:start="39:13" pos:end="39:62"><call pos:start="39:13" pos:end="39:62"><name pos:start="39:13" pos:end="39:22">error_setg</name><argument_list pos:start="39:23" pos:end="39:62">(<argument pos:start="39:24" pos:end="39:27"><expr pos:start="39:24" pos:end="39:27"><name pos:start="39:24" pos:end="39:27">errp</name></expr></argument>, <argument pos:start="39:30" pos:end="39:61"><expr pos:start="39:30" pos:end="39:61"><literal type="string" pos:start="39:30" pos:end="39:61">"chardev: socket: no host given"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="41:13" pos:end="41:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="45:9" pos:end="51:9"><if pos:start="45:9" pos:end="51:9">if <condition pos:start="45:12" pos:end="45:18">(<expr pos:start="45:13" pos:end="45:17"><operator pos:start="45:13" pos:end="45:13">!</operator><name pos:start="45:14" pos:end="45:17">port</name></expr>)</condition> <block pos:start="45:20" pos:end="51:9">{<block_content pos:start="47:13" pos:end="49:19">

            <expr_stmt pos:start="47:13" pos:end="47:63"><expr pos:start="47:13" pos:end="47:62"><call pos:start="47:13" pos:end="47:62"><name pos:start="47:13" pos:end="47:22">error_setg</name><argument_list pos:start="47:23" pos:end="47:62">(<argument pos:start="47:24" pos:end="47:27"><expr pos:start="47:24" pos:end="47:27"><name pos:start="47:24" pos:end="47:27">errp</name></expr></argument>, <argument pos:start="47:30" pos:end="47:61"><expr pos:start="47:30" pos:end="47:61"><literal type="string" pos:start="47:30" pos:end="47:61">"chardev: socket: no port given"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="49:13" pos:end="49:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="53:7" pos:end="63:5">else <block pos:start="53:12" pos:end="63:5">{<block_content pos:start="55:9" pos:end="61:9">

        <if_stmt pos:start="55:9" pos:end="61:9"><if pos:start="55:9" pos:end="61:9">if <condition pos:start="55:12" pos:end="55:22">(<expr pos:start="55:13" pos:end="55:21"><name pos:start="55:13" pos:end="55:21">tls_creds</name></expr>)</condition> <block pos:start="55:24" pos:end="61:9">{<block_content pos:start="57:13" pos:end="59:19">

            <expr_stmt pos:start="57:13" pos:end="57:69"><expr pos:start="57:13" pos:end="57:68"><call pos:start="57:13" pos:end="57:68"><name pos:start="57:13" pos:end="57:22">error_setg</name><argument_list pos:start="57:23" pos:end="57:68">(<argument pos:start="57:24" pos:end="57:27"><expr pos:start="57:24" pos:end="57:27"><name pos:start="57:24" pos:end="57:27">errp</name></expr></argument>, <argument pos:start="57:30" pos:end="57:67"><expr pos:start="57:30" pos:end="57:67"><literal type="string" pos:start="57:30" pos:end="57:67">"TLS can only be used over TCP socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="59:13" pos:end="59:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:61"><expr pos:start="67:5" pos:end="67:60"><name pos:start="67:5" pos:end="67:8">sock</name> <operator pos:start="67:10" pos:end="67:10">=</operator> <name pos:start="67:12" pos:end="67:33"><name pos:start="67:12" pos:end="67:18">backend</name><operator pos:start="67:19" pos:end="67:20">-&gt;</operator><name pos:start="67:21" pos:end="67:21">u</name><operator pos:start="67:22" pos:end="67:22">.</operator><name pos:start="67:23" pos:end="67:28">socket</name><operator pos:start="67:29" pos:end="67:29">.</operator><name pos:start="67:30" pos:end="67:33">data</name></name> <operator pos:start="67:35" pos:end="67:35">=</operator> <call pos:start="67:37" pos:end="67:60"><name pos:start="67:37" pos:end="67:42">g_new0</name><argument_list pos:start="67:43" pos:end="67:60">(<argument pos:start="67:44" pos:end="67:56"><expr pos:start="67:44" pos:end="67:56"><name pos:start="67:44" pos:end="67:56">ChardevSocket</name></expr></argument>, <argument pos:start="67:59" pos:end="67:59"><expr pos:start="67:59" pos:end="67:59"><literal type="number" pos:start="67:59" pos:end="67:59">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:63"><expr pos:start="69:5" pos:end="69:62"><call pos:start="69:5" pos:end="69:62"><name pos:start="69:5" pos:end="69:25">qemu_chr_parse_common</name><argument_list pos:start="69:26" pos:end="69:62">(<argument pos:start="69:27" pos:end="69:30"><expr pos:start="69:27" pos:end="69:30"><name pos:start="69:27" pos:end="69:30">opts</name></expr></argument>, <argument pos:start="69:33" pos:end="69:61"><expr pos:start="69:33" pos:end="69:61"><call pos:start="69:33" pos:end="69:61"><name pos:start="69:33" pos:end="69:55">qapi_ChardevSocket_base</name><argument_list pos:start="69:56" pos:end="69:61">(<argument pos:start="69:57" pos:end="69:60"><expr pos:start="69:57" pos:end="69:60"><name pos:start="69:57" pos:end="69:60">sock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:29"><expr pos:start="73:5" pos:end="73:28"><name pos:start="73:5" pos:end="73:21"><name pos:start="73:5" pos:end="73:8">sock</name><operator pos:start="73:9" pos:end="73:10">-&gt;</operator><name pos:start="73:11" pos:end="73:21">has_nodelay</name></name> <operator pos:start="73:23" pos:end="73:23">=</operator> <name pos:start="73:25" pos:end="73:28">true</name></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:31"><expr pos:start="75:5" pos:end="75:30"><name pos:start="75:5" pos:end="75:17"><name pos:start="75:5" pos:end="75:8">sock</name><operator pos:start="75:9" pos:end="75:10">-&gt;</operator><name pos:start="75:11" pos:end="75:17">nodelay</name></name> <operator pos:start="75:19" pos:end="75:19">=</operator> <name pos:start="75:21" pos:end="75:30">do_nodelay</name></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:28"><expr pos:start="77:5" pos:end="77:27"><name pos:start="77:5" pos:end="77:20"><name pos:start="77:5" pos:end="77:8">sock</name><operator pos:start="77:9" pos:end="77:10">-&gt;</operator><name pos:start="77:11" pos:end="77:20">has_server</name></name> <operator pos:start="77:22" pos:end="77:22">=</operator> <name pos:start="77:24" pos:end="77:27">true</name></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:29"><expr pos:start="79:5" pos:end="79:28"><name pos:start="79:5" pos:end="79:16"><name pos:start="79:5" pos:end="79:8">sock</name><operator pos:start="79:9" pos:end="79:10">-&gt;</operator><name pos:start="79:11" pos:end="79:16">server</name></name> <operator pos:start="79:18" pos:end="79:18">=</operator> <name pos:start="79:20" pos:end="79:28">is_listen</name></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:28"><expr pos:start="81:5" pos:end="81:27"><name pos:start="81:5" pos:end="81:20"><name pos:start="81:5" pos:end="81:8">sock</name><operator pos:start="81:9" pos:end="81:10">-&gt;</operator><name pos:start="81:11" pos:end="81:20">has_telnet</name></name> <operator pos:start="81:22" pos:end="81:22">=</operator> <name pos:start="81:24" pos:end="81:27">true</name></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:29"><expr pos:start="83:5" pos:end="83:28"><name pos:start="83:5" pos:end="83:16"><name pos:start="83:5" pos:end="83:8">sock</name><operator pos:start="83:9" pos:end="83:10">-&gt;</operator><name pos:start="83:11" pos:end="83:16">telnet</name></name> <operator pos:start="83:18" pos:end="83:18">=</operator> <name pos:start="83:20" pos:end="83:28">is_telnet</name></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:28"><expr pos:start="85:5" pos:end="85:27"><name pos:start="85:5" pos:end="85:20"><name pos:start="85:5" pos:end="85:8">sock</name><operator pos:start="85:9" pos:end="85:10">-&gt;</operator><name pos:start="85:11" pos:end="85:20">has_tn3270</name></name> <operator pos:start="85:22" pos:end="85:22">=</operator> <name pos:start="85:24" pos:end="85:27">true</name></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:29"><expr pos:start="87:5" pos:end="87:28"><name pos:start="87:5" pos:end="87:16"><name pos:start="87:5" pos:end="87:8">sock</name><operator pos:start="87:9" pos:end="87:10">-&gt;</operator><name pos:start="87:11" pos:end="87:16">tn3270</name></name> <operator pos:start="87:18" pos:end="87:18">=</operator> <name pos:start="87:20" pos:end="87:28">is_tn3270</name></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:26"><expr pos:start="89:5" pos:end="89:25"><name pos:start="89:5" pos:end="89:18"><name pos:start="89:5" pos:end="89:8">sock</name><operator pos:start="89:9" pos:end="89:10">-&gt;</operator><name pos:start="89:11" pos:end="89:18">has_wait</name></name> <operator pos:start="89:20" pos:end="89:20">=</operator> <name pos:start="89:22" pos:end="89:25">true</name></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:32"><expr pos:start="91:5" pos:end="91:31"><name pos:start="91:5" pos:end="91:14"><name pos:start="91:5" pos:end="91:8">sock</name><operator pos:start="91:9" pos:end="91:10">-&gt;</operator><name pos:start="91:11" pos:end="91:14">wait</name></name> <operator pos:start="91:16" pos:end="91:16">=</operator> <name pos:start="91:18" pos:end="91:31">is_waitconnect</name></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:31"><expr pos:start="93:5" pos:end="93:30"><name pos:start="93:5" pos:end="93:23"><name pos:start="93:5" pos:end="93:8">sock</name><operator pos:start="93:9" pos:end="93:10">-&gt;</operator><name pos:start="93:11" pos:end="93:23">has_reconnect</name></name> <operator pos:start="93:25" pos:end="93:25">=</operator> <name pos:start="93:27" pos:end="93:30">true</name></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:32"><expr pos:start="95:5" pos:end="95:31"><name pos:start="95:5" pos:end="95:19"><name pos:start="95:5" pos:end="95:8">sock</name><operator pos:start="95:9" pos:end="95:10">-&gt;</operator><name pos:start="95:11" pos:end="95:19">reconnect</name></name> <operator pos:start="95:21" pos:end="95:21">=</operator> <name pos:start="95:23" pos:end="95:31">reconnect</name></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:42"><expr pos:start="97:5" pos:end="97:41"><name pos:start="97:5" pos:end="97:19"><name pos:start="97:5" pos:end="97:8">sock</name><operator pos:start="97:9" pos:end="97:10">-&gt;</operator><name pos:start="97:11" pos:end="97:19">tls_creds</name></name> <operator pos:start="97:21" pos:end="97:21">=</operator> <call pos:start="97:23" pos:end="97:41"><name pos:start="97:23" pos:end="97:30">g_strdup</name><argument_list pos:start="97:31" pos:end="97:41">(<argument pos:start="97:32" pos:end="97:40"><expr pos:start="97:32" pos:end="97:40"><name pos:start="97:32" pos:end="97:40">tls_creds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="101:5" pos:end="101:36"><expr pos:start="101:5" pos:end="101:35"><name pos:start="101:5" pos:end="101:8">addr</name> <operator pos:start="101:10" pos:end="101:10">=</operator> <call pos:start="101:12" pos:end="101:35"><name pos:start="101:12" pos:end="101:17">g_new0</name><argument_list pos:start="101:18" pos:end="101:35">(<argument pos:start="101:19" pos:end="101:31"><expr pos:start="101:19" pos:end="101:31"><name pos:start="101:19" pos:end="101:31">SocketAddress</name></expr></argument>, <argument pos:start="101:34" pos:end="101:34"><expr pos:start="101:34" pos:end="101:34"><literal type="number" pos:start="101:34" pos:end="101:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="103:5" pos:end="139:5"><if pos:start="103:5" pos:end="113:5">if <condition pos:start="103:8" pos:end="103:13">(<expr pos:start="103:9" pos:end="103:12"><name pos:start="103:9" pos:end="103:12">path</name></expr>)</condition> <block pos:start="103:15" pos:end="113:5">{<block_content pos:start="105:9" pos:end="111:38">

        <decl_stmt pos:start="105:9" pos:end="105:34"><decl pos:start="105:9" pos:end="105:33"><type pos:start="105:9" pos:end="105:27"><name pos:start="105:9" pos:end="105:25">UnixSocketAddress</name> <modifier pos:start="105:27" pos:end="105:27">*</modifier></type><name pos:start="105:28" pos:end="105:33">q_unix</name></decl>;</decl_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:46"><expr pos:start="107:9" pos:end="107:45"><name pos:start="107:9" pos:end="107:18"><name pos:start="107:9" pos:end="107:12">addr</name><operator pos:start="107:13" pos:end="107:14">-&gt;</operator><name pos:start="107:15" pos:end="107:18">type</name></name> <operator pos:start="107:20" pos:end="107:20">=</operator> <name pos:start="107:22" pos:end="107:45">SOCKET_ADDRESS_KIND_UNIX</name></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:68"><expr pos:start="109:9" pos:end="109:67"><name pos:start="109:9" pos:end="109:14">q_unix</name> <operator pos:start="109:16" pos:end="109:16">=</operator> <name pos:start="109:18" pos:end="109:36"><name pos:start="109:18" pos:end="109:21">addr</name><operator pos:start="109:22" pos:end="109:23">-&gt;</operator><name pos:start="109:24" pos:end="109:24">u</name><operator pos:start="109:25" pos:end="109:25">.</operator><name pos:start="109:26" pos:end="109:31">q_unix</name><operator pos:start="109:32" pos:end="109:32">.</operator><name pos:start="109:33" pos:end="109:36">data</name></name> <operator pos:start="109:38" pos:end="109:38">=</operator> <call pos:start="109:40" pos:end="109:67"><name pos:start="109:40" pos:end="109:45">g_new0</name><argument_list pos:start="109:46" pos:end="109:67">(<argument pos:start="109:47" pos:end="109:63"><expr pos:start="109:47" pos:end="109:63"><name pos:start="109:47" pos:end="109:63">UnixSocketAddress</name></expr></argument>, <argument pos:start="109:66" pos:end="109:66"><expr pos:start="109:66" pos:end="109:66"><literal type="number" pos:start="109:66" pos:end="109:66">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:38"><expr pos:start="111:9" pos:end="111:37"><name pos:start="111:9" pos:end="111:20"><name pos:start="111:9" pos:end="111:14">q_unix</name><operator pos:start="111:15" pos:end="111:16">-&gt;</operator><name pos:start="111:17" pos:end="111:20">path</name></name> <operator pos:start="111:22" pos:end="111:22">=</operator> <call pos:start="111:24" pos:end="111:37"><name pos:start="111:24" pos:end="111:31">g_strdup</name><argument_list pos:start="111:32" pos:end="111:37">(<argument pos:start="111:33" pos:end="111:36"><expr pos:start="111:33" pos:end="111:36"><name pos:start="111:33" pos:end="111:36">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="113:7" pos:end="139:5">else <block pos:start="113:12" pos:end="139:5">{<block_content pos:start="115:9" pos:end="137:10">

        <expr_stmt pos:start="115:9" pos:end="115:46"><expr pos:start="115:9" pos:end="115:45"><name pos:start="115:9" pos:end="115:18"><name pos:start="115:9" pos:end="115:12">addr</name><operator pos:start="115:13" pos:end="115:14">-&gt;</operator><name pos:start="115:15" pos:end="115:18">type</name></name> <operator pos:start="115:20" pos:end="115:20">=</operator> <name pos:start="115:22" pos:end="115:45">SOCKET_ADDRESS_KIND_INET</name></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:56"><expr pos:start="117:9" pos:end="117:55"><name pos:start="117:9" pos:end="117:25"><name pos:start="117:9" pos:end="117:12">addr</name><operator pos:start="117:13" pos:end="117:14">-&gt;</operator><name pos:start="117:15" pos:end="117:15">u</name><operator pos:start="117:16" pos:end="117:16">.</operator><name pos:start="117:17" pos:end="117:20">inet</name><operator pos:start="117:21" pos:end="117:21">.</operator><name pos:start="117:22" pos:end="117:25">data</name></name> <operator pos:start="117:27" pos:end="117:27">=</operator> <call pos:start="117:29" pos:end="117:55"><name pos:start="117:29" pos:end="117:33">g_new</name><argument_list pos:start="117:34" pos:end="117:55">(<argument pos:start="117:35" pos:end="117:51"><expr pos:start="117:35" pos:end="117:51"><name pos:start="117:35" pos:end="117:51">InetSocketAddress</name></expr></argument>, <argument pos:start="117:54" pos:end="117:54"><expr pos:start="117:54" pos:end="117:54"><literal type="number" pos:start="117:54" pos:end="117:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="137:10"><expr pos:start="119:9" pos:end="137:9"><operator pos:start="119:9" pos:end="119:9">*</operator><name pos:start="119:10" pos:end="119:26"><name pos:start="119:10" pos:end="119:13">addr</name><operator pos:start="119:14" pos:end="119:15">-&gt;</operator><name pos:start="119:16" pos:end="119:16">u</name><operator pos:start="119:17" pos:end="119:17">.</operator><name pos:start="119:18" pos:end="119:21">inet</name><operator pos:start="119:22" pos:end="119:22">.</operator><name pos:start="119:23" pos:end="119:26">data</name></name> <operator pos:start="119:28" pos:end="119:28">=</operator> <operator pos:start="119:30" pos:end="119:30">(</operator><name pos:start="119:31" pos:end="119:47">InetSocketAddress</name><operator pos:start="119:48" pos:end="119:48">)</operator> <block pos:start="119:50" pos:end="137:9">{

            <expr pos:start="121:13" pos:end="121:34"><operator pos:start="121:13" pos:end="121:13">.</operator><name pos:start="121:14" pos:end="121:17">host</name> <operator pos:start="121:19" pos:end="121:19">=</operator> <call pos:start="121:21" pos:end="121:34"><name pos:start="121:21" pos:end="121:28">g_strdup</name><argument_list pos:start="121:29" pos:end="121:34">(<argument pos:start="121:30" pos:end="121:33"><expr pos:start="121:30" pos:end="121:33"><name pos:start="121:30" pos:end="121:33">host</name></expr></argument>)</argument_list></call></expr>,

            <expr pos:start="123:13" pos:end="123:34"><operator pos:start="123:13" pos:end="123:13">.</operator><name pos:start="123:14" pos:end="123:17">port</name> <operator pos:start="123:19" pos:end="123:19">=</operator> <call pos:start="123:21" pos:end="123:34"><name pos:start="123:21" pos:end="123:28">g_strdup</name><argument_list pos:start="123:29" pos:end="123:34">(<argument pos:start="123:30" pos:end="123:33"><expr pos:start="123:30" pos:end="123:33"><name pos:start="123:30" pos:end="123:33">port</name></expr></argument>)</argument_list></call></expr>,

            <expr pos:start="125:13" pos:end="125:46"><operator pos:start="125:13" pos:end="125:13">.</operator><name pos:start="125:14" pos:end="125:19">has_to</name> <operator pos:start="125:21" pos:end="125:21">=</operator> <call pos:start="125:23" pos:end="125:46"><name pos:start="125:23" pos:end="125:34">qemu_opt_get</name><argument_list pos:start="125:35" pos:end="125:46">(<argument pos:start="125:36" pos:end="125:39"><expr pos:start="125:36" pos:end="125:39"><name pos:start="125:36" pos:end="125:39">opts</name></expr></argument>, <argument pos:start="125:42" pos:end="125:45"><expr pos:start="125:42" pos:end="125:45"><literal type="string" pos:start="125:42" pos:end="125:45">"to"</literal></expr></argument>)</argument_list></call></expr>,

            <expr pos:start="127:13" pos:end="127:52"><operator pos:start="127:13" pos:end="127:13">.</operator><name pos:start="127:14" pos:end="127:15">to</name> <operator pos:start="127:17" pos:end="127:17">=</operator> <call pos:start="127:19" pos:end="127:52"><name pos:start="127:19" pos:end="127:37">qemu_opt_get_number</name><argument_list pos:start="127:38" pos:end="127:52">(<argument pos:start="127:39" pos:end="127:42"><expr pos:start="127:39" pos:end="127:42"><name pos:start="127:39" pos:end="127:42">opts</name></expr></argument>, <argument pos:start="127:45" pos:end="127:48"><expr pos:start="127:45" pos:end="127:48"><literal type="string" pos:start="127:45" pos:end="127:48">"to"</literal></expr></argument>, <argument pos:start="127:51" pos:end="127:51"><expr pos:start="127:51" pos:end="127:51"><literal type="number" pos:start="127:51" pos:end="127:51">0</literal></expr></argument>)</argument_list></call></expr>,

            <expr pos:start="129:13" pos:end="129:50"><operator pos:start="129:13" pos:end="129:13">.</operator><name pos:start="129:14" pos:end="129:21">has_ipv4</name> <operator pos:start="129:23" pos:end="129:23">=</operator> <call pos:start="129:25" pos:end="129:50"><name pos:start="129:25" pos:end="129:36">qemu_opt_get</name><argument_list pos:start="129:37" pos:end="129:50">(<argument pos:start="129:38" pos:end="129:41"><expr pos:start="129:38" pos:end="129:41"><name pos:start="129:38" pos:end="129:41">opts</name></expr></argument>, <argument pos:start="129:44" pos:end="129:49"><expr pos:start="129:44" pos:end="129:49"><literal type="string" pos:start="129:44" pos:end="129:49">"ipv4"</literal></expr></argument>)</argument_list></call></expr>,

            <expr pos:start="131:13" pos:end="131:54"><operator pos:start="131:13" pos:end="131:13">.</operator><name pos:start="131:14" pos:end="131:17">ipv4</name> <operator pos:start="131:19" pos:end="131:19">=</operator> <call pos:start="131:21" pos:end="131:54"><name pos:start="131:21" pos:end="131:37">qemu_opt_get_bool</name><argument_list pos:start="131:38" pos:end="131:54">(<argument pos:start="131:39" pos:end="131:42"><expr pos:start="131:39" pos:end="131:42"><name pos:start="131:39" pos:end="131:42">opts</name></expr></argument>, <argument pos:start="131:45" pos:end="131:50"><expr pos:start="131:45" pos:end="131:50"><literal type="string" pos:start="131:45" pos:end="131:50">"ipv4"</literal></expr></argument>, <argument pos:start="131:53" pos:end="131:53"><expr pos:start="131:53" pos:end="131:53"><literal type="number" pos:start="131:53" pos:end="131:53">0</literal></expr></argument>)</argument_list></call></expr>,

            <expr pos:start="133:13" pos:end="133:50"><operator pos:start="133:13" pos:end="133:13">.</operator><name pos:start="133:14" pos:end="133:21">has_ipv6</name> <operator pos:start="133:23" pos:end="133:23">=</operator> <call pos:start="133:25" pos:end="133:50"><name pos:start="133:25" pos:end="133:36">qemu_opt_get</name><argument_list pos:start="133:37" pos:end="133:50">(<argument pos:start="133:38" pos:end="133:41"><expr pos:start="133:38" pos:end="133:41"><name pos:start="133:38" pos:end="133:41">opts</name></expr></argument>, <argument pos:start="133:44" pos:end="133:49"><expr pos:start="133:44" pos:end="133:49"><literal type="string" pos:start="133:44" pos:end="133:49">"ipv6"</literal></expr></argument>)</argument_list></call></expr>,

            <expr pos:start="135:13" pos:end="135:54"><operator pos:start="135:13" pos:end="135:13">.</operator><name pos:start="135:14" pos:end="135:17">ipv6</name> <operator pos:start="135:19" pos:end="135:19">=</operator> <call pos:start="135:21" pos:end="135:54"><name pos:start="135:21" pos:end="135:37">qemu_opt_get_bool</name><argument_list pos:start="135:38" pos:end="135:54">(<argument pos:start="135:39" pos:end="135:42"><expr pos:start="135:39" pos:end="135:42"><name pos:start="135:39" pos:end="135:42">opts</name></expr></argument>, <argument pos:start="135:45" pos:end="135:50"><expr pos:start="135:45" pos:end="135:50"><literal type="string" pos:start="135:45" pos:end="135:50">"ipv6"</literal></expr></argument>, <argument pos:start="135:53" pos:end="135:53"><expr pos:start="135:53" pos:end="135:53"><literal type="number" pos:start="135:53" pos:end="135:53">0</literal></expr></argument>)</argument_list></call></expr>,

        }</block></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:22"><expr pos:start="141:5" pos:end="141:21"><name pos:start="141:5" pos:end="141:14"><name pos:start="141:5" pos:end="141:8">sock</name><operator pos:start="141:9" pos:end="141:10">-&gt;</operator><name pos:start="141:11" pos:end="141:14">addr</name></name> <operator pos:start="141:16" pos:end="141:16">=</operator> <name pos:start="141:18" pos:end="141:21">addr</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
