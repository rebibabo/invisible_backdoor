<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16022.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">long</name></type> <name pos:start="1:13" pos:end="1:27">do_sigreturn_v1</name><parameter_list pos:start="1:28" pos:end="1:45">(<parameter pos:start="1:29" pos:end="1:44"><decl pos:start="1:29" pos:end="1:44"><type pos:start="1:29" pos:end="1:41"><name pos:start="1:29" pos:end="1:39">CPUARMState</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">env</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="93:1">{<block_content pos:start="5:5" pos:end="91:13">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:13">abi_ulong</name></type> <name pos:start="5:15" pos:end="5:24">frame_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:22">sigframe_v1</name></name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:29">frame</name> <init pos:start="7:31" pos:end="7:36">= <expr pos:start="7:33" pos:end="7:36"><name pos:start="7:33" pos:end="7:36">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:19">target_sigset_t</name></type> <name pos:start="9:21" pos:end="9:23">set</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">sigset_t</name></type> <name pos:start="11:14" pos:end="11:21">host_set</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:10"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="25:7">/*

     * Since we stacked the signal on a 64-bit boundary,

     * then 'sp' should be word aligned here.  If it's

     * not, then the user is trying to mess with us.

     */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:31"><expr pos:start="27:5" pos:end="27:30"><name pos:start="27:5" pos:end="27:14">frame_addr</name> <operator pos:start="27:16" pos:end="27:16">=</operator> <name pos:start="27:18" pos:end="27:30"><name pos:start="27:18" pos:end="27:20">env</name><operator pos:start="27:21" pos:end="27:22">-&gt;</operator><name pos:start="27:23" pos:end="27:26">regs</name><index pos:start="27:27" pos:end="27:30">[<expr pos:start="27:28" pos:end="27:29"><literal type="number" pos:start="27:28" pos:end="27:29">13</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:45"><expr pos:start="29:5" pos:end="29:44"><call pos:start="29:5" pos:end="29:44"><name pos:start="29:5" pos:end="29:27">trace_user_do_sigreturn</name><argument_list pos:start="29:28" pos:end="29:44">(<argument pos:start="29:29" pos:end="29:31"><expr pos:start="29:29" pos:end="29:31"><name pos:start="29:29" pos:end="29:31">env</name></expr></argument>, <argument pos:start="29:34" pos:end="29:43"><expr pos:start="29:34" pos:end="29:43"><name pos:start="29:34" pos:end="29:43">frame_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:23">(<expr pos:start="31:9" pos:end="31:22"><name pos:start="31:9" pos:end="31:18">frame_addr</name> <operator pos:start="31:20" pos:end="31:20">&amp;</operator> <literal type="number" pos:start="31:22" pos:end="31:22">7</literal></expr>)</condition> <block pos:start="31:25" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:22">

        <goto pos:start="33:9" pos:end="33:22">goto <name pos:start="33:14" pos:end="33:21">badframe</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="39:5" pos:end="43:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:61">(<expr pos:start="39:9" pos:end="39:60"><operator pos:start="39:9" pos:end="39:9">!</operator><call pos:start="39:10" pos:end="39:60"><name pos:start="39:10" pos:end="39:25">lock_user_struct</name><argument_list pos:start="39:26" pos:end="39:60">(<argument pos:start="39:27" pos:end="39:37"><expr pos:start="39:27" pos:end="39:37"><name pos:start="39:27" pos:end="39:37">VERIFY_READ</name></expr></argument>, <argument pos:start="39:40" pos:end="39:44"><expr pos:start="39:40" pos:end="39:44"><name pos:start="39:40" pos:end="39:44">frame</name></expr></argument>, <argument pos:start="39:47" pos:end="39:56"><expr pos:start="39:47" pos:end="39:56"><name pos:start="39:47" pos:end="39:56">frame_addr</name></expr></argument>, <argument pos:start="39:59" pos:end="39:59"><expr pos:start="39:59" pos:end="39:59"><literal type="number" pos:start="39:59" pos:end="39:59">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:63" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:22">

        <goto pos:start="41:9" pos:end="41:22">goto <name pos:start="41:14" pos:end="41:21">badframe</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:47"><expr pos:start="47:5" pos:end="47:46"><call pos:start="47:5" pos:end="47:46"><name pos:start="47:5" pos:end="47:14">__get_user</name><argument_list pos:start="47:15" pos:end="47:46">(<argument pos:start="47:16" pos:end="47:25"><expr pos:start="47:16" pos:end="47:25"><name pos:start="47:16" pos:end="47:25"><name pos:start="47:16" pos:end="47:18">set</name><operator pos:start="47:19" pos:end="47:19">.</operator><name pos:start="47:20" pos:end="47:22">sig</name><index pos:start="47:23" pos:end="47:25">[<expr pos:start="47:24" pos:end="47:24"><literal type="number" pos:start="47:24" pos:end="47:24">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="47:28" pos:end="47:45"><expr pos:start="47:28" pos:end="47:45"><operator pos:start="47:28" pos:end="47:28">&amp;</operator><name pos:start="47:29" pos:end="47:45"><name pos:start="47:29" pos:end="47:33">frame</name><operator pos:start="47:34" pos:end="47:35">-&gt;</operator><name pos:start="47:36" pos:end="47:37">sc</name><operator pos:start="47:38" pos:end="47:38">.</operator><name pos:start="47:39" pos:end="47:45">oldmask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="49:5" pos:end="53:5">for<control pos:start="49:8" pos:end="49:42">(<init pos:start="49:9" pos:end="49:14"><expr pos:start="49:9" pos:end="49:13"><name pos:start="49:9" pos:end="49:9">i</name> <operator pos:start="49:11" pos:end="49:11">=</operator> <literal type="number" pos:start="49:13" pos:end="49:13">1</literal></expr>;</init> <condition pos:start="49:16" pos:end="49:37"><expr pos:start="49:16" pos:end="49:36"><name pos:start="49:16" pos:end="49:16">i</name> <operator pos:start="49:18" pos:end="49:18">&lt;</operator> <name pos:start="49:20" pos:end="49:36">TARGET_NSIG_WORDS</name></expr>;</condition> <incr pos:start="49:39" pos:end="49:41"><expr pos:start="49:39" pos:end="49:41"><name pos:start="49:39" pos:end="49:39">i</name><operator pos:start="49:40" pos:end="49:41">++</operator></expr></incr>)</control> <block pos:start="49:44" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:57">

        <expr_stmt pos:start="51:9" pos:end="51:57"><expr pos:start="51:9" pos:end="51:56"><call pos:start="51:9" pos:end="51:56"><name pos:start="51:9" pos:end="51:18">__get_user</name><argument_list pos:start="51:19" pos:end="51:56">(<argument pos:start="51:20" pos:end="51:29"><expr pos:start="51:20" pos:end="51:29"><name pos:start="51:20" pos:end="51:29"><name pos:start="51:20" pos:end="51:22">set</name><operator pos:start="51:23" pos:end="51:23">.</operator><name pos:start="51:24" pos:end="51:26">sig</name><index pos:start="51:27" pos:end="51:29">[<expr pos:start="51:28" pos:end="51:28"><name pos:start="51:28" pos:end="51:28">i</name></expr>]</index></name></expr></argument>, <argument pos:start="51:32" pos:end="51:55"><expr pos:start="51:32" pos:end="51:55"><operator pos:start="51:32" pos:end="51:32">&amp;</operator><name pos:start="51:33" pos:end="51:55"><name pos:start="51:33" pos:end="51:37">frame</name><operator pos:start="51:38" pos:end="51:39">-&gt;</operator><name pos:start="51:40" pos:end="51:48">extramask</name><index pos:start="51:49" pos:end="51:55">[<expr pos:start="51:50" pos:end="51:54"><name pos:start="51:50" pos:end="51:50">i</name> <operator pos:start="51:52" pos:end="51:52">-</operator> <literal type="number" pos:start="51:54" pos:end="51:54">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="57:5" pos:end="57:52"><expr pos:start="57:5" pos:end="57:51"><call pos:start="57:5" pos:end="57:51"><name pos:start="57:5" pos:end="57:34">target_to_host_sigset_internal</name><argument_list pos:start="57:35" pos:end="57:51">(<argument pos:start="57:36" pos:end="57:44"><expr pos:start="57:36" pos:end="57:44"><operator pos:start="57:36" pos:end="57:36">&amp;</operator><name pos:start="57:37" pos:end="57:44">host_set</name></expr></argument>, <argument pos:start="57:47" pos:end="57:50"><expr pos:start="57:47" pos:end="57:50"><operator pos:start="57:47" pos:end="57:47">&amp;</operator><name pos:start="57:48" pos:end="57:50">set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:49"><expr pos:start="59:5" pos:end="59:48"><call pos:start="59:5" pos:end="59:48"><name pos:start="59:5" pos:end="59:18">do_sigprocmask</name><argument_list pos:start="59:19" pos:end="59:48">(<argument pos:start="59:20" pos:end="59:30"><expr pos:start="59:20" pos:end="59:30"><name pos:start="59:20" pos:end="59:30">SIG_SETMASK</name></expr></argument>, <argument pos:start="59:33" pos:end="59:41"><expr pos:start="59:33" pos:end="59:41"><operator pos:start="59:33" pos:end="59:33">&amp;</operator><name pos:start="59:34" pos:end="59:41">host_set</name></expr></argument>, <argument pos:start="59:44" pos:end="59:47"><expr pos:start="59:44" pos:end="59:47"><name pos:start="59:44" pos:end="59:47">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="63:5" pos:end="80:0"><if pos:start="63:5" pos:end="80:0">if <condition pos:start="63:8" pos:end="63:44">(<expr pos:start="63:9" pos:end="63:43"><call pos:start="63:9" pos:end="63:43"><name pos:start="63:9" pos:end="63:26">restore_sigcontext</name><argument_list pos:start="63:27" pos:end="63:43">(<argument pos:start="63:28" pos:end="63:30"><expr pos:start="63:28" pos:end="63:30"><name pos:start="63:28" pos:end="63:30">env</name></expr></argument>, <argument pos:start="63:33" pos:end="63:42"><expr pos:start="63:33" pos:end="63:42"><operator pos:start="63:33" pos:end="63:33">&amp;</operator><name pos:start="63:34" pos:end="63:42"><name pos:start="63:34" pos:end="63:38">frame</name><operator pos:start="63:39" pos:end="63:40">-&gt;</operator><name pos:start="63:41" pos:end="63:42">sc</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="63:46" pos:end="80:0">{<block_content pos:start="65:9" pos:end="65:22">

        <goto pos:start="65:9" pos:end="65:22">goto <name pos:start="65:14" pos:end="65:21">badframe</name>;</goto>

    </block_content>}</block></if></if_stmt>



<cpp:if pos:start="71:1" pos:end="71:5">#<cpp:directive pos:start="71:2" pos:end="71:3">if</cpp:directive> <expr pos:start="71:5" pos:end="71:5"><literal type="number" pos:start="71:5" pos:end="71:5">0</literal></expr></cpp:if>

    <comment type="block" pos:start="73:5" pos:end="73:47">/* Send SIGTRAP if we're single-stepping */</comment>

    if (ptrace_cancel_bpt(current))

        send_sig(SIGTRAP, current, 1);

<cpp:endif pos:start="79:1" pos:end="79:6">#<cpp:directive pos:start="79:2" pos:end="79:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="81:5" pos:end="81:45"><expr pos:start="81:5" pos:end="81:44"><call pos:start="81:5" pos:end="81:44"><name pos:start="81:5" pos:end="81:22">unlock_user_struct</name><argument_list pos:start="81:23" pos:end="81:44">(<argument pos:start="81:24" pos:end="81:28"><expr pos:start="81:24" pos:end="81:28"><name pos:start="81:24" pos:end="81:28">frame</name></expr></argument>, <argument pos:start="81:31" pos:end="81:40"><expr pos:start="81:31" pos:end="81:40"><name pos:start="81:31" pos:end="81:40">frame_addr</name></expr></argument>, <argument pos:start="81:43" pos:end="81:43"><expr pos:start="81:43" pos:end="81:43"><literal type="number" pos:start="81:43" pos:end="81:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="83:5" pos:end="83:24">return <expr pos:start="83:12" pos:end="83:23"><name pos:start="83:12" pos:end="83:23"><name pos:start="83:12" pos:end="83:14">env</name><operator pos:start="83:15" pos:end="83:16">-&gt;</operator><name pos:start="83:17" pos:end="83:20">regs</name><index pos:start="83:21" pos:end="83:23">[<expr pos:start="83:22" pos:end="83:22"><literal type="number" pos:start="83:22" pos:end="83:22">0</literal></expr>]</index></name></expr>;</return>



<label pos:start="87:1" pos:end="87:9"><name pos:start="87:1" pos:end="87:8">badframe</name>:</label>

    <expr_stmt pos:start="89:5" pos:end="89:46"><expr pos:start="89:5" pos:end="89:45"><call pos:start="89:5" pos:end="89:45"><name pos:start="89:5" pos:end="89:13">force_sig</name><argument_list pos:start="89:14" pos:end="89:45">(<argument pos:start="89:15" pos:end="89:28"><expr pos:start="89:15" pos:end="89:28"><name pos:start="89:15" pos:end="89:28">TARGET_SIGSEGV</name></expr></argument> <comment type="block" pos:start="89:30" pos:end="89:44">/* , current */</comment>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="91:5" pos:end="91:13">return <expr pos:start="91:12" pos:end="91:12"><literal type="number" pos:start="91:12" pos:end="91:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
