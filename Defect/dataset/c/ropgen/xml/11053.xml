<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11053.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:22"><name pos:start="1:1" pos:end="1:20">AVCodecParserContext</name> <modifier pos:start="1:22" pos:end="1:22">*</modifier></type><name pos:start="1:23" pos:end="1:36">av_parser_init</name><parameter_list pos:start="1:37" pos:end="1:50">(<parameter pos:start="1:38" pos:end="1:49"><decl pos:start="1:38" pos:end="1:49"><type pos:start="1:38" pos:end="1:40"><name pos:start="1:38" pos:end="1:40">int</name></type> <name pos:start="1:42" pos:end="1:49">codec_id</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="93:1">{<block_content pos:start="5:5" pos:end="91:13">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:26"><name pos:start="5:5" pos:end="5:24">AVCodecParserContext</name> <modifier pos:start="5:26" pos:end="5:26">*</modifier></type><name pos:start="5:27" pos:end="5:27">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">AVCodecParser</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:25">parser</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="15:20"><if pos:start="13:5" pos:end="15:20">if<condition pos:start="13:7" pos:end="13:33">(<expr pos:start="13:8" pos:end="13:32"><name pos:start="13:8" pos:end="13:15">codec_id</name> <operator pos:start="13:17" pos:end="13:18">==</operator> <name pos:start="13:20" pos:end="13:32">CODEC_ID_NONE</name></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:20"><block_content pos:start="15:9" pos:end="15:20">

        <return pos:start="15:9" pos:end="15:20">return <expr pos:start="15:16" pos:end="15:19"><name pos:start="15:16" pos:end="15:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>



    <for pos:start="19:5" pos:end="33:5">for<control pos:start="19:8" pos:end="19:72">(<init pos:start="19:9" pos:end="19:33"><expr pos:start="19:9" pos:end="19:32"><name pos:start="19:9" pos:end="19:14">parser</name> <operator pos:start="19:16" pos:end="19:16">=</operator> <name pos:start="19:18" pos:end="19:32">av_first_parser</name></expr>;</init> <condition pos:start="19:35" pos:end="19:49"><expr pos:start="19:35" pos:end="19:48"><name pos:start="19:35" pos:end="19:40">parser</name> <operator pos:start="19:42" pos:end="19:43">!=</operator> <name pos:start="19:45" pos:end="19:48">NULL</name></expr>;</condition> <incr pos:start="19:51" pos:end="19:71"><expr pos:start="19:51" pos:end="19:71"><name pos:start="19:51" pos:end="19:56">parser</name> <operator pos:start="19:58" pos:end="19:58">=</operator> <name pos:start="19:60" pos:end="19:71"><name pos:start="19:60" pos:end="19:65">parser</name><operator pos:start="19:66" pos:end="19:67">-&gt;</operator><name pos:start="19:68" pos:end="19:71">next</name></name></expr></incr>)</control> <block pos:start="19:74" pos:end="33:5">{<block_content pos:start="21:9" pos:end="31:23">

        <if_stmt pos:start="21:9" pos:end="31:23"><if pos:start="21:9" pos:end="31:23">if <condition pos:start="21:12" pos:end="29:45">(<expr pos:start="21:13" pos:end="29:44"><name pos:start="21:13" pos:end="21:32"><name pos:start="21:13" pos:end="21:18">parser</name><operator pos:start="21:19" pos:end="21:20">-&gt;</operator><name pos:start="21:21" pos:end="21:29">codec_ids</name><index pos:start="21:30" pos:end="21:32">[<expr pos:start="21:31" pos:end="21:31"><literal type="number" pos:start="21:31" pos:end="21:31">0</literal></expr>]</index></name> <operator pos:start="21:34" pos:end="21:35">==</operator> <name pos:start="21:37" pos:end="21:44">codec_id</name> <operator pos:start="21:46" pos:end="21:47">||</operator>

            <name pos:start="23:13" pos:end="23:32"><name pos:start="23:13" pos:end="23:18">parser</name><operator pos:start="23:19" pos:end="23:20">-&gt;</operator><name pos:start="23:21" pos:end="23:29">codec_ids</name><index pos:start="23:30" pos:end="23:32">[<expr pos:start="23:31" pos:end="23:31"><literal type="number" pos:start="23:31" pos:end="23:31">1</literal></expr>]</index></name> <operator pos:start="23:34" pos:end="23:35">==</operator> <name pos:start="23:37" pos:end="23:44">codec_id</name> <operator pos:start="23:46" pos:end="23:47">||</operator>

            <name pos:start="25:13" pos:end="25:32"><name pos:start="25:13" pos:end="25:18">parser</name><operator pos:start="25:19" pos:end="25:20">-&gt;</operator><name pos:start="25:21" pos:end="25:29">codec_ids</name><index pos:start="25:30" pos:end="25:32">[<expr pos:start="25:31" pos:end="25:31"><literal type="number" pos:start="25:31" pos:end="25:31">2</literal></expr>]</index></name> <operator pos:start="25:34" pos:end="25:35">==</operator> <name pos:start="25:37" pos:end="25:44">codec_id</name> <operator pos:start="25:46" pos:end="25:47">||</operator>

            <name pos:start="27:13" pos:end="27:32"><name pos:start="27:13" pos:end="27:18">parser</name><operator pos:start="27:19" pos:end="27:20">-&gt;</operator><name pos:start="27:21" pos:end="27:29">codec_ids</name><index pos:start="27:30" pos:end="27:32">[<expr pos:start="27:31" pos:end="27:31"><literal type="number" pos:start="27:31" pos:end="27:31">3</literal></expr>]</index></name> <operator pos:start="27:34" pos:end="27:35">==</operator> <name pos:start="27:37" pos:end="27:44">codec_id</name> <operator pos:start="27:46" pos:end="27:47">||</operator>

            <name pos:start="29:13" pos:end="29:32"><name pos:start="29:13" pos:end="29:18">parser</name><operator pos:start="29:19" pos:end="29:20">-&gt;</operator><name pos:start="29:21" pos:end="29:29">codec_ids</name><index pos:start="29:30" pos:end="29:32">[<expr pos:start="29:31" pos:end="29:31"><literal type="number" pos:start="29:31" pos:end="29:31">4</literal></expr>]</index></name> <operator pos:start="29:34" pos:end="29:35">==</operator> <name pos:start="29:37" pos:end="29:44">codec_id</name></expr>)</condition><block type="pseudo" pos:start="31:13" pos:end="31:23"><block_content pos:start="31:13" pos:end="31:23">

            <goto pos:start="31:13" pos:end="31:23">goto <name pos:start="31:18" pos:end="31:22">found</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></for>

    <return pos:start="35:5" pos:end="35:16">return <expr pos:start="35:12" pos:end="35:15"><name pos:start="35:12" pos:end="35:15">NULL</name></expr>;</return>

 <label pos:start="37:2" pos:end="37:7"><name pos:start="37:2" pos:end="37:6">found</name>:</label>

    <expr_stmt pos:start="39:5" pos:end="39:49"><expr pos:start="39:5" pos:end="39:48"><name pos:start="39:5" pos:end="39:5">s</name> <operator pos:start="39:7" pos:end="39:7">=</operator> <call pos:start="39:9" pos:end="39:48"><name pos:start="39:9" pos:end="39:18">av_mallocz</name><argument_list pos:start="39:19" pos:end="39:48">(<argument pos:start="39:20" pos:end="39:47"><expr pos:start="39:20" pos:end="39:47"><sizeof pos:start="39:20" pos:end="39:47">sizeof<argument_list pos:start="39:26" pos:end="39:47">(<argument pos:start="39:27" pos:end="39:46"><expr pos:start="39:27" pos:end="39:46"><name pos:start="39:27" pos:end="39:46">AVCodecParserContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="43:20"><if pos:start="41:5" pos:end="43:20">if <condition pos:start="41:8" pos:end="41:11">(<expr pos:start="41:9" pos:end="41:10"><operator pos:start="41:9" pos:end="41:9">!</operator><name pos:start="41:10" pos:end="41:10">s</name></expr>)</condition><block type="pseudo" pos:start="43:9" pos:end="43:20"><block_content pos:start="43:9" pos:end="43:20">

        <return pos:start="43:9" pos:end="43:20">return <expr pos:start="43:16" pos:end="43:19"><name pos:start="43:16" pos:end="43:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:23"><expr pos:start="45:5" pos:end="45:22"><name pos:start="45:5" pos:end="45:13"><name pos:start="45:5" pos:end="45:5">s</name><operator pos:start="45:6" pos:end="45:7">-&gt;</operator><name pos:start="45:8" pos:end="45:13">parser</name></name> <operator pos:start="45:15" pos:end="45:15">=</operator> <name pos:start="45:17" pos:end="45:22">parser</name></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="59:5"><if pos:start="47:5" pos:end="59:5">if <condition pos:start="47:8" pos:end="47:31">(<expr pos:start="47:9" pos:end="47:30"><name pos:start="47:9" pos:end="47:30"><name pos:start="47:9" pos:end="47:14">parser</name><operator pos:start="47:15" pos:end="47:16">-&gt;</operator><name pos:start="47:17" pos:end="47:30">priv_data_size</name></name></expr>)</condition> <block pos:start="47:33" pos:end="59:5">{<block_content pos:start="49:9" pos:end="57:9">

        <expr_stmt pos:start="49:9" pos:end="49:58"><expr pos:start="49:9" pos:end="49:57"><name pos:start="49:9" pos:end="49:20"><name pos:start="49:9" pos:end="49:9">s</name><operator pos:start="49:10" pos:end="49:11">-&gt;</operator><name pos:start="49:12" pos:end="49:20">priv_data</name></name> <operator pos:start="49:22" pos:end="49:22">=</operator> <call pos:start="49:24" pos:end="49:57"><name pos:start="49:24" pos:end="49:33">av_mallocz</name><argument_list pos:start="49:34" pos:end="49:57">(<argument pos:start="49:35" pos:end="49:56"><expr pos:start="49:35" pos:end="49:56"><name pos:start="49:35" pos:end="49:56"><name pos:start="49:35" pos:end="49:40">parser</name><operator pos:start="49:41" pos:end="49:42">-&gt;</operator><name pos:start="49:43" pos:end="49:56">priv_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="51:9" pos:end="57:9"><if pos:start="51:9" pos:end="57:9">if <condition pos:start="51:12" pos:end="51:26">(<expr pos:start="51:13" pos:end="51:25"><operator pos:start="51:13" pos:end="51:13">!</operator><name pos:start="51:14" pos:end="51:25"><name pos:start="51:14" pos:end="51:14">s</name><operator pos:start="51:15" pos:end="51:16">-&gt;</operator><name pos:start="51:17" pos:end="51:25">priv_data</name></name></expr>)</condition> <block pos:start="51:28" pos:end="57:9">{<block_content pos:start="53:13" pos:end="55:24">

            <expr_stmt pos:start="53:13" pos:end="53:23"><expr pos:start="53:13" pos:end="53:22"><call pos:start="53:13" pos:end="53:22"><name pos:start="53:13" pos:end="53:19">av_free</name><argument_list pos:start="53:20" pos:end="53:22">(<argument pos:start="53:21" pos:end="53:21"><expr pos:start="53:21" pos:end="53:21"><name pos:start="53:21" pos:end="53:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="55:13" pos:end="55:24">return <expr pos:start="55:20" pos:end="55:23"><name pos:start="55:20" pos:end="55:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="61:5" pos:end="75:5"><if pos:start="61:5" pos:end="75:5">if <condition pos:start="61:8" pos:end="61:28">(<expr pos:start="61:9" pos:end="61:27"><name pos:start="61:9" pos:end="61:27"><name pos:start="61:9" pos:end="61:14">parser</name><operator pos:start="61:15" pos:end="61:16">-&gt;</operator><name pos:start="61:17" pos:end="61:27">parser_init</name></name></expr>)</condition> <block pos:start="61:30" pos:end="75:5">{<block_content pos:start="63:9" pos:end="73:9">

        <expr_stmt pos:start="63:9" pos:end="63:37"><expr pos:start="63:9" pos:end="63:36"><name pos:start="63:9" pos:end="63:11">ret</name> <operator pos:start="63:13" pos:end="63:13">=</operator> <call pos:start="63:15" pos:end="63:36"><name pos:start="63:15" pos:end="63:33"><name pos:start="63:15" pos:end="63:20">parser</name><operator pos:start="63:21" pos:end="63:22">-&gt;</operator><name pos:start="63:23" pos:end="63:33">parser_init</name></name><argument_list pos:start="63:34" pos:end="63:36">(<argument pos:start="63:35" pos:end="63:35"><expr pos:start="63:35" pos:end="63:35"><name pos:start="63:35" pos:end="63:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="65:9" pos:end="73:9"><if pos:start="65:9" pos:end="73:9">if <condition pos:start="65:12" pos:end="65:21">(<expr pos:start="65:13" pos:end="65:20"><name pos:start="65:13" pos:end="65:15">ret</name> <operator pos:start="65:17" pos:end="65:18">!=</operator> <literal type="number" pos:start="65:20" pos:end="65:20">0</literal></expr>)</condition> <block pos:start="65:23" pos:end="73:9">{<block_content pos:start="67:13" pos:end="71:24">

            <expr_stmt pos:start="67:13" pos:end="67:34"><expr pos:start="67:13" pos:end="67:33"><call pos:start="67:13" pos:end="67:33"><name pos:start="67:13" pos:end="67:19">av_free</name><argument_list pos:start="67:20" pos:end="67:33">(<argument pos:start="67:21" pos:end="67:32"><expr pos:start="67:21" pos:end="67:32"><name pos:start="67:21" pos:end="67:32"><name pos:start="67:21" pos:end="67:21">s</name><operator pos:start="67:22" pos:end="67:23">-&gt;</operator><name pos:start="67:24" pos:end="67:32">priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:23"><expr pos:start="69:13" pos:end="69:22"><call pos:start="69:13" pos:end="69:22"><name pos:start="69:13" pos:end="69:19">av_free</name><argument_list pos:start="69:20" pos:end="69:22">(<argument pos:start="69:21" pos:end="69:21"><expr pos:start="69:21" pos:end="69:21"><name pos:start="69:21" pos:end="69:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="71:13" pos:end="71:24">return <expr pos:start="71:20" pos:end="71:23"><name pos:start="71:20" pos:end="71:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:25"><expr pos:start="77:5" pos:end="77:24"><name pos:start="77:5" pos:end="77:22"><name pos:start="77:5" pos:end="77:5">s</name><operator pos:start="77:6" pos:end="77:7">-&gt;</operator><name pos:start="77:8" pos:end="77:22">fetch_timestamp</name></name><operator pos:start="77:23" pos:end="77:23">=</operator><literal type="number" pos:start="77:24" pos:end="77:24">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:29"><expr pos:start="79:5" pos:end="79:28"><name pos:start="79:5" pos:end="79:16"><name pos:start="79:5" pos:end="79:5">s</name><operator pos:start="79:6" pos:end="79:7">-&gt;</operator><name pos:start="79:8" pos:end="79:16">pict_type</name></name> <operator pos:start="79:18" pos:end="79:18">=</operator> <name pos:start="79:20" pos:end="79:28">FF_I_TYPE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:22"><expr pos:start="81:5" pos:end="81:21"><name pos:start="81:5" pos:end="81:16"><name pos:start="81:5" pos:end="81:5">s</name><operator pos:start="81:6" pos:end="81:7">-&gt;</operator><name pos:start="81:8" pos:end="81:16">key_frame</name></name> <operator pos:start="81:18" pos:end="81:18">=</operator> <operator pos:start="81:20" pos:end="81:20">-</operator><literal type="number" pos:start="81:21" pos:end="81:21">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:32"><expr pos:start="83:5" pos:end="83:31"><name pos:start="83:5" pos:end="83:27"><name pos:start="83:5" pos:end="83:5">s</name><operator pos:start="83:6" pos:end="83:7">-&gt;</operator><name pos:start="83:8" pos:end="83:27">convergence_duration</name></name> <operator pos:start="83:29" pos:end="83:29">=</operator> <literal type="number" pos:start="83:31" pos:end="83:31">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:38"><expr pos:start="85:5" pos:end="85:37"><name pos:start="85:5" pos:end="85:21"><name pos:start="85:5" pos:end="85:5">s</name><operator pos:start="85:6" pos:end="85:7">-&gt;</operator><name pos:start="85:8" pos:end="85:21">dts_sync_point</name></name>       <operator pos:start="85:29" pos:end="85:29">=</operator> <name pos:start="85:31" pos:end="85:37">INT_MIN</name></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:38"><expr pos:start="87:5" pos:end="87:37"><name pos:start="87:5" pos:end="87:24"><name pos:start="87:5" pos:end="87:5">s</name><operator pos:start="87:6" pos:end="87:7">-&gt;</operator><name pos:start="87:8" pos:end="87:24">dts_ref_dts_delta</name></name>    <operator pos:start="87:29" pos:end="87:29">=</operator> <name pos:start="87:31" pos:end="87:37">INT_MIN</name></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:38"><expr pos:start="89:5" pos:end="89:37"><name pos:start="89:5" pos:end="89:20"><name pos:start="89:5" pos:end="89:5">s</name><operator pos:start="89:6" pos:end="89:7">-&gt;</operator><name pos:start="89:8" pos:end="89:20">pts_dts_delta</name></name>        <operator pos:start="89:29" pos:end="89:29">=</operator> <name pos:start="89:31" pos:end="89:37">INT_MIN</name></expr>;</expr_stmt>

    <return pos:start="91:5" pos:end="91:13">return <expr pos:start="91:12" pos:end="91:12"><name pos:start="91:12" pos:end="91:12">s</name></expr>;</return>

</block_content>}</block></function>
</unit>
