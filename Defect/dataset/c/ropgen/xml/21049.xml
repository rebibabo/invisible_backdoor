<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21049.c" pos:tabs="8"><function pos:start="1:1" pos:end="161:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:24">ff_vp56_decode_frame</name><parameter_list pos:start="1:25" pos:end="3:41">(<parameter pos:start="1:26" pos:end="1:46"><decl pos:start="1:26" pos:end="1:46"><type pos:start="1:26" pos:end="1:46"><name pos:start="1:26" pos:end="1:39">AVCodecContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:46">avctx</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:58"><decl pos:start="1:49" pos:end="1:58"><type pos:start="1:49" pos:end="1:58"><name pos:start="1:49" pos:end="1:52">void</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:58">data</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:74"><decl pos:start="1:61" pos:end="1:74"><type pos:start="1:61" pos:end="1:74"><name pos:start="1:61" pos:end="1:63">int</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:74">got_frame</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:40"><decl pos:start="3:26" pos:end="3:40"><type pos:start="3:26" pos:end="3:40"><name pos:start="3:26" pos:end="3:33">AVPacket</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:40">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="161:1">{<block_content pos:start="7:5" pos:end="159:23">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">buf</name> <init pos:start="7:24" pos:end="7:36">= <expr pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:30">avpkt</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">VP56Context</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:18">s</name> <init pos:start="9:20" pos:end="9:37">= <expr pos:start="9:22" pos:end="9:37"><name pos:start="9:22" pos:end="9:37"><name pos:start="9:22" pos:end="9:26">avctx</name><operator pos:start="9:27" pos:end="9:28">-&gt;</operator><name pos:start="9:29" pos:end="9:37">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:53"><decl pos:start="11:5" pos:end="11:52"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:11">AVFrame</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier><specifier pos:start="11:14" pos:end="11:18">const</specifier></type> <name pos:start="11:20" pos:end="11:20">p</name> <init pos:start="11:22" pos:end="11:52">= <expr pos:start="11:24" pos:end="11:52"><name pos:start="11:24" pos:end="11:52"><name pos:start="11:24" pos:end="11:24">s</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:32">frames</name><index pos:start="11:33" pos:end="11:52">[<expr pos:start="11:34" pos:end="11:51"><name pos:start="11:34" pos:end="11:51">VP56_FRAME_CURRENT</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:41"><decl pos:start="13:5" pos:end="13:40"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:26">remaining_buf_size</name> <init pos:start="13:28" pos:end="13:40">= <expr pos:start="13:30" pos:end="13:40"><name pos:start="13:30" pos:end="13:40"><name pos:start="13:30" pos:end="13:34">avpkt</name><operator pos:start="13:35" pos:end="13:36">-&gt;</operator><name pos:start="13:37" pos:end="13:40">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:32"><decl pos:start="15:5" pos:end="15:31"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:17">av_uninit</name><argument_list pos:start="15:18" pos:end="15:31">(<argument pos:start="15:19" pos:end="15:30"><expr pos:start="15:19" pos:end="15:30"><name pos:start="15:19" pos:end="15:30">alpha_offset</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:15"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">i</name></decl>, <decl pos:start="17:12" pos:end="17:14"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:12" pos:end="17:14">res</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:12"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="37:5"><if pos:start="23:5" pos:end="37:5">if <condition pos:start="23:8" pos:end="23:21">(<expr pos:start="23:9" pos:end="23:20"><name pos:start="23:9" pos:end="23:20"><name pos:start="23:9" pos:end="23:9">s</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:20">has_alpha</name></name></expr>)</condition> <block pos:start="23:23" pos:end="37:5">{<block_content pos:start="25:9" pos:end="35:39">

        <if_stmt pos:start="25:9" pos:end="27:39"><if pos:start="25:9" pos:end="27:39">if <condition pos:start="25:12" pos:end="25:35">(<expr pos:start="25:13" pos:end="25:34"><name pos:start="25:13" pos:end="25:30">remaining_buf_size</name> <operator pos:start="25:32" pos:end="25:32">&lt;</operator> <literal type="number" pos:start="25:34" pos:end="25:34">3</literal></expr>)</condition><block type="pseudo" pos:start="27:13" pos:end="27:39"><block_content pos:start="27:13" pos:end="27:39">

            <return pos:start="27:13" pos:end="27:39">return <expr pos:start="27:20" pos:end="27:38"><name pos:start="27:20" pos:end="27:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:49"><expr pos:start="29:9" pos:end="29:48"><name pos:start="29:9" pos:end="29:20">alpha_offset</name> <operator pos:start="29:22" pos:end="29:22">=</operator> <call pos:start="29:24" pos:end="29:48"><name pos:start="29:24" pos:end="29:42">bytestream_get_be24</name><argument_list pos:start="29:43" pos:end="29:48">(<argument pos:start="29:44" pos:end="29:47"><expr pos:start="29:44" pos:end="29:47"><operator pos:start="29:44" pos:end="29:44">&amp;</operator><name pos:start="29:45" pos:end="29:47">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:32"><expr pos:start="31:9" pos:end="31:31"><name pos:start="31:9" pos:end="31:26">remaining_buf_size</name> <operator pos:start="31:28" pos:end="31:29">-=</operator> <literal type="number" pos:start="31:31" pos:end="31:31">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="35:39"><if pos:start="33:9" pos:end="35:39">if <condition pos:start="33:12" pos:end="33:46">(<expr pos:start="33:13" pos:end="33:45"><name pos:start="33:13" pos:end="33:30">remaining_buf_size</name> <operator pos:start="33:32" pos:end="33:32">&lt;</operator> <name pos:start="33:34" pos:end="33:45">alpha_offset</name></expr>)</condition><block type="pseudo" pos:start="35:13" pos:end="35:39"><block_content pos:start="35:13" pos:end="35:39">

            <return pos:start="35:13" pos:end="35:39">return <expr pos:start="35:20" pos:end="35:38"><name pos:start="35:20" pos:end="35:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:54"><expr pos:start="41:5" pos:end="41:53"><name pos:start="41:5" pos:end="41:7">res</name> <operator pos:start="41:9" pos:end="41:9">=</operator> <call pos:start="41:11" pos:end="41:53"><name pos:start="41:11" pos:end="41:25"><name pos:start="41:11" pos:end="41:11">s</name><operator pos:start="41:12" pos:end="41:13">-&gt;</operator><name pos:start="41:14" pos:end="41:25">parse_header</name></name><argument_list pos:start="41:26" pos:end="41:53">(<argument pos:start="41:27" pos:end="41:27"><expr pos:start="41:27" pos:end="41:27"><name pos:start="41:27" pos:end="41:27">s</name></expr></argument>, <argument pos:start="41:30" pos:end="41:32"><expr pos:start="41:30" pos:end="41:32"><name pos:start="41:30" pos:end="41:32">buf</name></expr></argument>, <argument pos:start="41:35" pos:end="41:52"><expr pos:start="41:35" pos:end="41:52"><name pos:start="41:35" pos:end="41:52">remaining_buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="45:19"><if pos:start="43:5" pos:end="45:19">if <condition pos:start="43:8" pos:end="43:16">(<expr pos:start="43:9" pos:end="43:15"><name pos:start="43:9" pos:end="43:11">res</name> <operator pos:start="43:13" pos:end="43:13">&lt;</operator> <literal type="number" pos:start="43:15" pos:end="43:15">0</literal></expr>)</condition><block type="pseudo" pos:start="45:9" pos:end="45:19"><block_content pos:start="45:9" pos:end="45:19">

        <return pos:start="45:9" pos:end="45:19">return <expr pos:start="45:16" pos:end="45:18"><name pos:start="45:16" pos:end="45:18">res</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="49:5" pos:end="61:5"><if pos:start="49:5" pos:end="61:5">if <condition pos:start="49:8" pos:end="49:32">(<expr pos:start="49:9" pos:end="49:31"><name pos:start="49:9" pos:end="49:11">res</name> <operator pos:start="49:13" pos:end="49:14">==</operator> <name pos:start="49:16" pos:end="49:31">VP56_SIZE_CHANGE</name></expr>)</condition> <block pos:start="49:34" pos:end="61:5">{<block_content pos:start="51:9" pos:end="59:9">

        <for pos:start="51:9" pos:end="59:9">for <control pos:start="51:13" pos:end="51:31">(<init pos:start="51:14" pos:end="51:19"><expr pos:start="51:14" pos:end="51:18"><name pos:start="51:14" pos:end="51:14">i</name> <operator pos:start="51:16" pos:end="51:16">=</operator> <literal type="number" pos:start="51:18" pos:end="51:18">0</literal></expr>;</init> <condition pos:start="51:21" pos:end="51:26"><expr pos:start="51:21" pos:end="51:25"><name pos:start="51:21" pos:end="51:21">i</name> <operator pos:start="51:23" pos:end="51:23">&lt;</operator> <literal type="number" pos:start="51:25" pos:end="51:25">4</literal></expr>;</condition> <incr pos:start="51:28" pos:end="51:30"><expr pos:start="51:28" pos:end="51:30"><name pos:start="51:28" pos:end="51:28">i</name><operator pos:start="51:29" pos:end="51:30">++</operator></expr></incr>)</control> <block pos:start="51:33" pos:end="59:9">{<block_content pos:start="53:13" pos:end="57:60">

            <expr_stmt pos:start="53:13" pos:end="53:41"><expr pos:start="53:13" pos:end="53:40"><call pos:start="53:13" pos:end="53:40"><name pos:start="53:13" pos:end="53:26">av_frame_unref</name><argument_list pos:start="53:27" pos:end="53:40">(<argument pos:start="53:28" pos:end="53:39"><expr pos:start="53:28" pos:end="53:39"><name pos:start="53:28" pos:end="53:39"><name pos:start="53:28" pos:end="53:28">s</name><operator pos:start="53:29" pos:end="53:30">-&gt;</operator><name pos:start="53:31" pos:end="53:36">frames</name><index pos:start="53:37" pos:end="53:39">[<expr pos:start="53:38" pos:end="53:38"><name pos:start="53:38" pos:end="53:38">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="55:13" pos:end="57:60"><if pos:start="55:13" pos:end="57:60">if <condition pos:start="55:16" pos:end="55:33">(<expr pos:start="55:17" pos:end="55:32"><name pos:start="55:17" pos:end="55:32"><name pos:start="55:17" pos:end="55:17">s</name><operator pos:start="55:18" pos:end="55:19">-&gt;</operator><name pos:start="55:20" pos:end="55:32">alpha_context</name></name></expr>)</condition><block type="pseudo" pos:start="57:17" pos:end="57:60"><block_content pos:start="57:17" pos:end="57:60">

                <expr_stmt pos:start="57:17" pos:end="57:60"><expr pos:start="57:17" pos:end="57:59"><call pos:start="57:17" pos:end="57:59"><name pos:start="57:17" pos:end="57:30">av_frame_unref</name><argument_list pos:start="57:31" pos:end="57:59">(<argument pos:start="57:32" pos:end="57:58"><expr pos:start="57:32" pos:end="57:58"><name pos:start="57:32" pos:end="57:58"><name pos:start="57:32" pos:end="57:32">s</name><operator pos:start="57:33" pos:end="57:34">-&gt;</operator><name pos:start="57:35" pos:end="57:47">alpha_context</name><operator pos:start="57:48" pos:end="57:49">-&gt;</operator><name pos:start="57:50" pos:end="57:55">frames</name><index pos:start="57:56" pos:end="57:58">[<expr pos:start="57:57" pos:end="57:57"><name pos:start="57:57" pos:end="57:57">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:58"><expr pos:start="65:5" pos:end="65:57"><name pos:start="65:5" pos:end="65:7">ret</name> <operator pos:start="65:9" pos:end="65:9">=</operator> <call pos:start="65:11" pos:end="65:57"><name pos:start="65:11" pos:end="65:23">ff_get_buffer</name><argument_list pos:start="65:24" pos:end="65:57">(<argument pos:start="65:25" pos:end="65:29"><expr pos:start="65:25" pos:end="65:29"><name pos:start="65:25" pos:end="65:29">avctx</name></expr></argument>, <argument pos:start="65:32" pos:end="65:32"><expr pos:start="65:32" pos:end="65:32"><name pos:start="65:32" pos:end="65:32">p</name></expr></argument>, <argument pos:start="65:35" pos:end="65:56"><expr pos:start="65:35" pos:end="65:56"><name pos:start="65:35" pos:end="65:56">AV_GET_BUFFER_FLAG_REF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="69:19"><if pos:start="67:5" pos:end="69:19">if <condition pos:start="67:8" pos:end="67:16">(<expr pos:start="67:9" pos:end="67:15"><name pos:start="67:9" pos:end="67:11">ret</name> <operator pos:start="67:13" pos:end="67:13">&lt;</operator> <literal type="number" pos:start="67:15" pos:end="67:15">0</literal></expr>)</condition><block type="pseudo" pos:start="69:9" pos:end="69:19"><block_content pos:start="69:9" pos:end="69:19">

        <return pos:start="69:9" pos:end="69:19">return <expr pos:start="69:16" pos:end="69:18"><name pos:start="69:16" pos:end="69:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="73:5" pos:end="85:5"><if pos:start="73:5" pos:end="85:5">if <condition pos:start="73:8" pos:end="73:46">(<expr pos:start="73:9" pos:end="73:45"><name pos:start="73:9" pos:end="73:22"><name pos:start="73:9" pos:end="73:13">avctx</name><operator pos:start="73:14" pos:end="73:15">-&gt;</operator><name pos:start="73:16" pos:end="73:22">pix_fmt</name></name> <operator pos:start="73:24" pos:end="73:25">==</operator> <name pos:start="73:27" pos:end="73:45">AV_PIX_FMT_YUVA420P</name></expr>)</condition> <block pos:start="73:48" pos:end="85:5">{<block_content pos:start="75:9" pos:end="83:9">

        <expr_stmt pos:start="75:9" pos:end="75:69"><expr pos:start="75:9" pos:end="75:68"><call pos:start="75:9" pos:end="75:68"><name pos:start="75:9" pos:end="75:22">av_frame_unref</name><argument_list pos:start="75:23" pos:end="75:68">(<argument pos:start="75:24" pos:end="75:67"><expr pos:start="75:24" pos:end="75:67"><name pos:start="75:24" pos:end="75:67"><name pos:start="75:24" pos:end="75:24">s</name><operator pos:start="75:25" pos:end="75:26">-&gt;</operator><name pos:start="75:27" pos:end="75:39">alpha_context</name><operator pos:start="75:40" pos:end="75:41">-&gt;</operator><name pos:start="75:42" pos:end="75:47">frames</name><index pos:start="75:48" pos:end="75:67">[<expr pos:start="75:49" pos:end="75:66"><name pos:start="75:49" pos:end="75:66">VP56_FRAME_CURRENT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="77:9" pos:end="83:9"><if pos:start="77:9" pos:end="83:9">if <condition pos:start="77:12" pos:end="77:86">(<expr pos:start="77:13" pos:end="77:85"><operator pos:start="77:13" pos:end="77:13">(</operator><name pos:start="77:14" pos:end="77:16">ret</name> <operator pos:start="77:18" pos:end="77:18">=</operator> <call pos:start="77:20" pos:end="77:80"><name pos:start="77:20" pos:end="77:31">av_frame_ref</name><argument_list pos:start="77:32" pos:end="77:80">(<argument pos:start="77:33" pos:end="77:76"><expr pos:start="77:33" pos:end="77:76"><name pos:start="77:33" pos:end="77:76"><name pos:start="77:33" pos:end="77:33">s</name><operator pos:start="77:34" pos:end="77:35">-&gt;</operator><name pos:start="77:36" pos:end="77:48">alpha_context</name><operator pos:start="77:49" pos:end="77:50">-&gt;</operator><name pos:start="77:51" pos:end="77:56">frames</name><index pos:start="77:57" pos:end="77:76">[<expr pos:start="77:58" pos:end="77:75"><name pos:start="77:58" pos:end="77:75">VP56_FRAME_CURRENT</name></expr>]</index></name></expr></argument>, <argument pos:start="77:79" pos:end="77:79"><expr pos:start="77:79" pos:end="77:79"><name pos:start="77:79" pos:end="77:79">p</name></expr></argument>)</argument_list></call><operator pos:start="77:81" pos:end="77:81">)</operator> <operator pos:start="77:83" pos:end="77:83">&lt;</operator> <literal type="number" pos:start="77:85" pos:end="77:85">0</literal></expr>)</condition> <block pos:start="77:88" pos:end="83:9">{<block_content pos:start="79:13" pos:end="81:23">

            <expr_stmt pos:start="79:13" pos:end="79:30"><expr pos:start="79:13" pos:end="79:29"><call pos:start="79:13" pos:end="79:29"><name pos:start="79:13" pos:end="79:26">av_frame_unref</name><argument_list pos:start="79:27" pos:end="79:29">(<argument pos:start="79:28" pos:end="79:28"><expr pos:start="79:28" pos:end="79:28"><name pos:start="79:28" pos:end="79:28">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="81:13" pos:end="81:23">return <expr pos:start="81:20" pos:end="81:22"><name pos:start="81:20" pos:end="81:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="89:5" pos:end="99:5"><if pos:start="89:5" pos:end="99:5">if <condition pos:start="89:8" pos:end="89:32">(<expr pos:start="89:9" pos:end="89:31"><name pos:start="89:9" pos:end="89:11">res</name> <operator pos:start="89:13" pos:end="89:14">==</operator> <name pos:start="89:16" pos:end="89:31">VP56_SIZE_CHANGE</name></expr>)</condition> <block pos:start="89:34" pos:end="99:5">{<block_content pos:start="91:9" pos:end="97:9">

        <if_stmt pos:start="91:9" pos:end="97:9"><if pos:start="91:9" pos:end="97:9">if <condition pos:start="91:12" pos:end="91:33">(<expr pos:start="91:13" pos:end="91:32"><call pos:start="91:13" pos:end="91:32"><name pos:start="91:13" pos:end="91:29">vp56_size_changed</name><argument_list pos:start="91:30" pos:end="91:32">(<argument pos:start="91:31" pos:end="91:31"><expr pos:start="91:31" pos:end="91:31"><name pos:start="91:31" pos:end="91:31">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="91:35" pos:end="97:9">{<block_content pos:start="93:13" pos:end="95:39">

            <expr_stmt pos:start="93:13" pos:end="93:30"><expr pos:start="93:13" pos:end="93:29"><call pos:start="93:13" pos:end="93:29"><name pos:start="93:13" pos:end="93:26">av_frame_unref</name><argument_list pos:start="93:27" pos:end="93:29">(<argument pos:start="93:28" pos:end="93:28"><expr pos:start="93:28" pos:end="93:28"><name pos:start="93:28" pos:end="93:28">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="95:13" pos:end="95:39">return <expr pos:start="95:20" pos:end="95:38"><name pos:start="95:20" pos:end="95:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="103:5" pos:end="143:5"><if pos:start="103:5" pos:end="143:5">if <condition pos:start="103:8" pos:end="103:46">(<expr pos:start="103:9" pos:end="103:45"><name pos:start="103:9" pos:end="103:22"><name pos:start="103:9" pos:end="103:13">avctx</name><operator pos:start="103:14" pos:end="103:15">-&gt;</operator><name pos:start="103:16" pos:end="103:22">pix_fmt</name></name> <operator pos:start="103:24" pos:end="103:25">==</operator> <name pos:start="103:27" pos:end="103:45">AV_PIX_FMT_YUVA420P</name></expr>)</condition> <block pos:start="103:48" pos:end="143:5">{<block_content pos:start="105:9" pos:end="141:9">

        <decl_stmt pos:start="105:9" pos:end="105:33"><decl pos:start="105:9" pos:end="105:32"><type pos:start="105:9" pos:end="105:11"><name pos:start="105:9" pos:end="105:11">int</name></type> <name pos:start="105:13" pos:end="105:17">bak_w</name> <init pos:start="105:19" pos:end="105:32">= <expr pos:start="105:21" pos:end="105:32"><name pos:start="105:21" pos:end="105:32"><name pos:start="105:21" pos:end="105:25">avctx</name><operator pos:start="105:26" pos:end="105:27">-&gt;</operator><name pos:start="105:28" pos:end="105:32">width</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="107:9" pos:end="107:34"><decl pos:start="107:9" pos:end="107:33"><type pos:start="107:9" pos:end="107:11"><name pos:start="107:9" pos:end="107:11">int</name></type> <name pos:start="107:13" pos:end="107:17">bak_h</name> <init pos:start="107:19" pos:end="107:33">= <expr pos:start="107:21" pos:end="107:33"><name pos:start="107:21" pos:end="107:33"><name pos:start="107:21" pos:end="107:25">avctx</name><operator pos:start="107:26" pos:end="107:27">-&gt;</operator><name pos:start="107:28" pos:end="107:33">height</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="109:9" pos:end="109:40"><decl pos:start="109:9" pos:end="109:39"><type pos:start="109:9" pos:end="109:11"><name pos:start="109:9" pos:end="109:11">int</name></type> <name pos:start="109:13" pos:end="109:18">bak_cw</name> <init pos:start="109:20" pos:end="109:39">= <expr pos:start="109:22" pos:end="109:39"><name pos:start="109:22" pos:end="109:39"><name pos:start="109:22" pos:end="109:26">avctx</name><operator pos:start="109:27" pos:end="109:28">-&gt;</operator><name pos:start="109:29" pos:end="109:39">coded_width</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="111:9" pos:end="111:41"><decl pos:start="111:9" pos:end="111:40"><type pos:start="111:9" pos:end="111:11"><name pos:start="111:9" pos:end="111:11">int</name></type> <name pos:start="111:13" pos:end="111:18">bak_ch</name> <init pos:start="111:20" pos:end="111:40">= <expr pos:start="111:22" pos:end="111:40"><name pos:start="111:22" pos:end="111:40"><name pos:start="111:22" pos:end="111:26">avctx</name><operator pos:start="111:27" pos:end="111:28">-&gt;</operator><name pos:start="111:29" pos:end="111:40">coded_height</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:28"><expr pos:start="113:9" pos:end="113:27"><name pos:start="113:9" pos:end="113:11">buf</name> <operator pos:start="113:13" pos:end="113:14">+=</operator> <name pos:start="113:16" pos:end="113:27">alpha_offset</name></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:43"><expr pos:start="115:9" pos:end="115:42"><name pos:start="115:9" pos:end="115:26">remaining_buf_size</name> <operator pos:start="115:28" pos:end="115:29">-=</operator> <name pos:start="115:31" pos:end="115:42">alpha_offset</name></expr>;</expr_stmt>



        <expr_stmt pos:start="119:9" pos:end="119:88"><expr pos:start="119:9" pos:end="119:87"><name pos:start="119:9" pos:end="119:11">res</name> <operator pos:start="119:13" pos:end="119:13">=</operator> <call pos:start="119:15" pos:end="119:87"><name pos:start="119:15" pos:end="119:44"><name pos:start="119:15" pos:end="119:15">s</name><operator pos:start="119:16" pos:end="119:17">-&gt;</operator><name pos:start="119:18" pos:end="119:30">alpha_context</name><operator pos:start="119:31" pos:end="119:32">-&gt;</operator><name pos:start="119:33" pos:end="119:44">parse_header</name></name><argument_list pos:start="119:45" pos:end="119:87">(<argument pos:start="119:46" pos:end="119:61"><expr pos:start="119:46" pos:end="119:61"><name pos:start="119:46" pos:end="119:61"><name pos:start="119:46" pos:end="119:46">s</name><operator pos:start="119:47" pos:end="119:48">-&gt;</operator><name pos:start="119:49" pos:end="119:61">alpha_context</name></name></expr></argument>, <argument pos:start="119:64" pos:end="119:66"><expr pos:start="119:64" pos:end="119:66"><name pos:start="119:64" pos:end="119:66">buf</name></expr></argument>, <argument pos:start="119:69" pos:end="119:86"><expr pos:start="119:69" pos:end="119:86"><name pos:start="119:69" pos:end="119:86">remaining_buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="121:9" pos:end="141:9"><if pos:start="121:9" pos:end="141:9">if <condition pos:start="121:12" pos:end="121:21">(<expr pos:start="121:13" pos:end="121:20"><name pos:start="121:13" pos:end="121:15">res</name> <operator pos:start="121:17" pos:end="121:18">!=</operator> <literal type="number" pos:start="121:20" pos:end="121:20">0</literal></expr>)</condition> <block pos:start="121:23" pos:end="141:9">{<block_content pos:start="123:13" pos:end="139:39">

            <if_stmt pos:start="123:13" pos:end="135:13"><if pos:start="123:13" pos:end="135:13">if<condition pos:start="123:15" pos:end="123:37">(<expr pos:start="123:16" pos:end="123:36"><name pos:start="123:16" pos:end="123:18">res</name><operator pos:start="123:19" pos:end="123:20">==</operator><name pos:start="123:21" pos:end="123:36">VP56_SIZE_CHANGE</name></expr>)</condition> <block pos:start="123:39" pos:end="135:13">{<block_content pos:start="125:17" pos:end="133:45">

                <expr_stmt pos:start="125:17" pos:end="125:71"><expr pos:start="125:17" pos:end="125:70"><call pos:start="125:17" pos:end="125:70"><name pos:start="125:17" pos:end="125:22">av_log</name><argument_list pos:start="125:23" pos:end="125:70">(<argument pos:start="125:24" pos:end="125:28"><expr pos:start="125:24" pos:end="125:28"><name pos:start="125:24" pos:end="125:28">avctx</name></expr></argument>, <argument pos:start="125:31" pos:end="125:42"><expr pos:start="125:31" pos:end="125:42"><name pos:start="125:31" pos:end="125:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="125:45" pos:end="125:69"><expr pos:start="125:45" pos:end="125:69"><literal type="string" pos:start="125:45" pos:end="125:69">"Alpha reconfiguration\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="127:17" pos:end="127:38"><expr pos:start="127:17" pos:end="127:37"><name pos:start="127:17" pos:end="127:28"><name pos:start="127:17" pos:end="127:21">avctx</name><operator pos:start="127:22" pos:end="127:23">-&gt;</operator><name pos:start="127:24" pos:end="127:28">width</name></name>  <operator pos:start="127:31" pos:end="127:31">=</operator> <name pos:start="127:33" pos:end="127:37">bak_w</name></expr>;</expr_stmt>

                <expr_stmt pos:start="129:17" pos:end="129:38"><expr pos:start="129:17" pos:end="129:37"><name pos:start="129:17" pos:end="129:29"><name pos:start="129:17" pos:end="129:21">avctx</name><operator pos:start="129:22" pos:end="129:23">-&gt;</operator><name pos:start="129:24" pos:end="129:29">height</name></name> <operator pos:start="129:31" pos:end="129:31">=</operator> <name pos:start="129:33" pos:end="129:37">bak_h</name></expr>;</expr_stmt>

                <expr_stmt pos:start="131:17" pos:end="131:45"><expr pos:start="131:17" pos:end="131:44"><name pos:start="131:17" pos:end="131:34"><name pos:start="131:17" pos:end="131:21">avctx</name><operator pos:start="131:22" pos:end="131:23">-&gt;</operator><name pos:start="131:24" pos:end="131:34">coded_width</name></name>  <operator pos:start="131:37" pos:end="131:37">=</operator> <name pos:start="131:39" pos:end="131:44">bak_cw</name></expr>;</expr_stmt>

                <expr_stmt pos:start="133:17" pos:end="133:45"><expr pos:start="133:17" pos:end="133:44"><name pos:start="133:17" pos:end="133:35"><name pos:start="133:17" pos:end="133:21">avctx</name><operator pos:start="133:22" pos:end="133:23">-&gt;</operator><name pos:start="133:24" pos:end="133:35">coded_height</name></name> <operator pos:start="133:37" pos:end="133:37">=</operator> <name pos:start="133:39" pos:end="133:44">bak_ch</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:30"><expr pos:start="137:13" pos:end="137:29"><call pos:start="137:13" pos:end="137:29"><name pos:start="137:13" pos:end="137:26">av_frame_unref</name><argument_list pos:start="137:27" pos:end="137:29">(<argument pos:start="137:28" pos:end="137:28"><expr pos:start="137:28" pos:end="137:28"><name pos:start="137:28" pos:end="137:28">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="139:13" pos:end="139:39">return <expr pos:start="139:20" pos:end="139:38"><name pos:start="139:20" pos:end="139:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="147:5" pos:end="147:98"><expr pos:start="147:5" pos:end="147:97"><call pos:start="147:5" pos:end="147:97"><name pos:start="147:5" pos:end="147:19"><name pos:start="147:5" pos:end="147:9">avctx</name><operator pos:start="147:10" pos:end="147:11">-&gt;</operator><name pos:start="147:12" pos:end="147:19">execute2</name></name><argument_list pos:start="147:20" pos:end="147:97">(<argument pos:start="147:21" pos:end="147:25"><expr pos:start="147:21" pos:end="147:25"><name pos:start="147:21" pos:end="147:25">avctx</name></expr></argument>, <argument pos:start="147:28" pos:end="147:45"><expr pos:start="147:28" pos:end="147:45"><name pos:start="147:28" pos:end="147:45">ff_vp56_decode_mbs</name></expr></argument>, <argument pos:start="147:48" pos:end="147:48"><expr pos:start="147:48" pos:end="147:48"><literal type="number" pos:start="147:48" pos:end="147:48">0</literal></expr></argument>, <argument pos:start="147:51" pos:end="147:51"><expr pos:start="147:51" pos:end="147:51"><literal type="number" pos:start="147:51" pos:end="147:51">0</literal></expr></argument>, <argument pos:start="147:54" pos:end="147:96"><expr pos:start="147:54" pos:end="147:96"><operator pos:start="147:54" pos:end="147:54">(</operator><name pos:start="147:55" pos:end="147:68"><name pos:start="147:55" pos:end="147:59">avctx</name><operator pos:start="147:60" pos:end="147:61">-&gt;</operator><name pos:start="147:62" pos:end="147:68">pix_fmt</name></name> <operator pos:start="147:70" pos:end="147:71">==</operator> <name pos:start="147:73" pos:end="147:91">AV_PIX_FMT_YUVA420P</name><operator pos:start="147:92" pos:end="147:92">)</operator> <operator pos:start="147:94" pos:end="147:94">+</operator> <literal type="number" pos:start="147:96" pos:end="147:96">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="151:5" pos:end="153:19"><if pos:start="151:5" pos:end="153:19">if <condition pos:start="151:8" pos:end="151:42">(<expr pos:start="151:9" pos:end="151:41"><operator pos:start="151:9" pos:end="151:9">(</operator><name pos:start="151:10" pos:end="151:12">res</name> <operator pos:start="151:14" pos:end="151:14">=</operator> <call pos:start="151:16" pos:end="151:36"><name pos:start="151:16" pos:end="151:27">av_frame_ref</name><argument_list pos:start="151:28" pos:end="151:36">(<argument pos:start="151:29" pos:end="151:32"><expr pos:start="151:29" pos:end="151:32"><name pos:start="151:29" pos:end="151:32">data</name></expr></argument>, <argument pos:start="151:35" pos:end="151:35"><expr pos:start="151:35" pos:end="151:35"><name pos:start="151:35" pos:end="151:35">p</name></expr></argument>)</argument_list></call><operator pos:start="151:37" pos:end="151:37">)</operator> <operator pos:start="151:39" pos:end="151:39">&lt;</operator> <literal type="number" pos:start="151:41" pos:end="151:41">0</literal></expr>)</condition><block type="pseudo" pos:start="153:9" pos:end="153:19"><block_content pos:start="153:9" pos:end="153:19">

        <return pos:start="153:9" pos:end="153:19">return <expr pos:start="153:16" pos:end="153:18"><name pos:start="153:16" pos:end="153:18">res</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:19"><expr pos:start="155:5" pos:end="155:18"><operator pos:start="155:5" pos:end="155:5">*</operator><name pos:start="155:6" pos:end="155:14">got_frame</name> <operator pos:start="155:16" pos:end="155:16">=</operator> <literal type="number" pos:start="155:18" pos:end="155:18">1</literal></expr>;</expr_stmt>



    <return pos:start="159:5" pos:end="159:23">return <expr pos:start="159:12" pos:end="159:22"><name pos:start="159:12" pos:end="159:22"><name pos:start="159:12" pos:end="159:16">avpkt</name><operator pos:start="159:17" pos:end="159:18">-&gt;</operator><name pos:start="159:19" pos:end="159:22">size</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
