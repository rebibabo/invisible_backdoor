<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12969.c" pos:tabs="8"><function pos:start="1:1" pos:end="209:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">local_symlink</name><parameter_list pos:start="1:25" pos:end="3:77">(<parameter pos:start="1:26" pos:end="1:42"><decl pos:start="1:26" pos:end="1:42"><type pos:start="1:26" pos:end="1:42"><name pos:start="1:26" pos:end="1:34">FsContext</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:42">fs_ctx</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:63"><decl pos:start="1:45" pos:end="1:63"><type pos:start="1:45" pos:end="1:63"><specifier pos:start="1:45" pos:end="1:49">const</specifier> <name pos:start="1:51" pos:end="1:54">char</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:63">oldpath</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:43"><decl pos:start="3:26" pos:end="3:43"><type pos:start="3:26" pos:end="3:43"><name pos:start="3:26" pos:end="3:33">V9fsPath</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:43">dir_path</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:61"><decl pos:start="3:46" pos:end="3:61"><type pos:start="3:46" pos:end="3:61"><specifier pos:start="3:46" pos:end="3:50">const</specifier> <name pos:start="3:52" pos:end="3:55">char</name> <modifier pos:start="3:57" pos:end="3:57">*</modifier></type><name pos:start="3:58" pos:end="3:61">name</name></decl></parameter>, <parameter pos:start="3:64" pos:end="3:76"><decl pos:start="3:64" pos:end="3:76"><type pos:start="3:64" pos:end="3:76"><name pos:start="3:64" pos:end="3:69">FsCred</name> <modifier pos:start="3:71" pos:end="3:71">*</modifier></type><name pos:start="3:72" pos:end="3:76">credp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="209:1">{<block_content pos:start="7:5" pos:end="207:15">

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">err</name> <init pos:start="7:13" pos:end="7:16">= <expr pos:start="7:15" pos:end="7:16"><operator pos:start="7:15" pos:end="7:15">-</operator><literal type="number" pos:start="7:16" pos:end="7:16">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:14">serrno</name> <init pos:start="9:16" pos:end="9:18">= <expr pos:start="9:18" pos:end="9:18"><literal type="number" pos:start="9:18" pos:end="9:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:17">newpath</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:14">V9fsString</name></type> <name pos:start="13:16" pos:end="13:23">fullname</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:17"><decl pos:start="15:5" pos:end="15:16"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:16">buffer</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:32"><expr pos:start="19:5" pos:end="19:31"><call pos:start="19:5" pos:end="19:31"><name pos:start="19:5" pos:end="19:20">v9fs_string_init</name><argument_list pos:start="19:21" pos:end="19:31">(<argument pos:start="19:22" pos:end="19:30"><expr pos:start="19:22" pos:end="19:30"><operator pos:start="19:22" pos:end="19:22">&amp;</operator><name pos:start="19:23" pos:end="19:30">fullname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:66"><expr pos:start="21:5" pos:end="21:65"><call pos:start="21:5" pos:end="21:65"><name pos:start="21:5" pos:end="21:23">v9fs_string_sprintf</name><argument_list pos:start="21:24" pos:end="21:65">(<argument pos:start="21:25" pos:end="21:33"><expr pos:start="21:25" pos:end="21:33"><operator pos:start="21:25" pos:end="21:25">&amp;</operator><name pos:start="21:26" pos:end="21:33">fullname</name></expr></argument>, <argument pos:start="21:36" pos:end="21:42"><expr pos:start="21:36" pos:end="21:42"><literal type="string" pos:start="21:36" pos:end="21:42">"%s/%s"</literal></expr></argument>, <argument pos:start="21:45" pos:end="21:58"><expr pos:start="21:45" pos:end="21:58"><name pos:start="21:45" pos:end="21:58"><name pos:start="21:45" pos:end="21:52">dir_path</name><operator pos:start="21:53" pos:end="21:54">-&gt;</operator><name pos:start="21:55" pos:end="21:58">data</name></name></expr></argument>, <argument pos:start="21:61" pos:end="21:64"><expr pos:start="21:61" pos:end="21:64"><name pos:start="21:61" pos:end="21:64">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:28"><expr pos:start="23:5" pos:end="23:27"><name pos:start="23:5" pos:end="23:11">newpath</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <name pos:start="23:15" pos:end="23:27"><name pos:start="23:15" pos:end="23:22">fullname</name><operator pos:start="23:23" pos:end="23:23">.</operator><name pos:start="23:24" pos:end="23:27">data</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:38">/* Determine the security model */</comment>

    <if_stmt pos:start="29:5" pos:end="189:5"><if pos:start="29:5" pos:end="89:5">if <condition pos:start="29:8" pos:end="29:46">(<expr pos:start="29:9" pos:end="29:45"><name pos:start="29:9" pos:end="29:28"><name pos:start="29:9" pos:end="29:14">fs_ctx</name><operator pos:start="29:15" pos:end="29:16">-&gt;</operator><name pos:start="29:17" pos:end="29:28">export_flags</name></name> <operator pos:start="29:30" pos:end="29:30">&amp;</operator> <name pos:start="29:32" pos:end="29:45">V9FS_SM_MAPPED</name></expr>)</condition> <block pos:start="29:48" pos:end="89:5">{<block_content pos:start="31:9" pos:end="87:9">

        <decl_stmt pos:start="31:9" pos:end="31:15"><decl pos:start="31:9" pos:end="31:14"><type pos:start="31:9" pos:end="31:11"><name pos:start="31:9" pos:end="31:11">int</name></type> <name pos:start="31:13" pos:end="31:14">fd</name></decl>;</decl_stmt>

        <decl_stmt pos:start="33:9" pos:end="33:41"><decl pos:start="33:9" pos:end="33:28"><type pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:15">ssize_t</name></type> <name pos:start="33:17" pos:end="33:28">oldpath_size</name></decl>, <decl pos:start="33:31" pos:end="33:40"><type ref="prev" pos:start="33:9" pos:end="33:15"/><name pos:start="33:31" pos:end="33:40">write_size</name></decl>;</decl_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:40"><expr pos:start="35:9" pos:end="35:39"><name pos:start="35:9" pos:end="35:14">buffer</name> <operator pos:start="35:16" pos:end="35:16">=</operator> <call pos:start="35:18" pos:end="35:39"><name pos:start="35:18" pos:end="35:22">rpath</name><argument_list pos:start="35:23" pos:end="35:39">(<argument pos:start="35:24" pos:end="35:29"><expr pos:start="35:24" pos:end="35:29"><name pos:start="35:24" pos:end="35:29">fs_ctx</name></expr></argument>, <argument pos:start="35:32" pos:end="35:38"><expr pos:start="35:32" pos:end="35:38"><name pos:start="35:32" pos:end="35:38">newpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:80"><expr pos:start="37:9" pos:end="37:79"><name pos:start="37:9" pos:end="37:10">fd</name> <operator pos:start="37:12" pos:end="37:12">=</operator> <call pos:start="37:14" pos:end="37:79"><name pos:start="37:14" pos:end="37:17">open</name><argument_list pos:start="37:18" pos:end="37:79">(<argument pos:start="37:19" pos:end="37:24"><expr pos:start="37:19" pos:end="37:24"><name pos:start="37:19" pos:end="37:24">buffer</name></expr></argument>, <argument pos:start="37:27" pos:end="37:58"><expr pos:start="37:27" pos:end="37:58"><name pos:start="37:27" pos:end="37:33">O_CREAT</name><operator pos:start="37:34" pos:end="37:34">|</operator><name pos:start="37:35" pos:end="37:40">O_EXCL</name><operator pos:start="37:41" pos:end="37:41">|</operator><name pos:start="37:42" pos:end="37:47">O_RDWR</name><operator pos:start="37:48" pos:end="37:48">|</operator><name pos:start="37:49" pos:end="37:58">O_NOFOLLOW</name></expr></argument>, <argument pos:start="37:61" pos:end="37:78"><expr pos:start="37:61" pos:end="37:78"><name pos:start="37:61" pos:end="37:78">SM_LOCAL_MODE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="47:9"><if pos:start="39:9" pos:end="47:9">if <condition pos:start="39:12" pos:end="39:21">(<expr pos:start="39:13" pos:end="39:20"><name pos:start="39:13" pos:end="39:14">fd</name> <operator pos:start="39:16" pos:end="39:17">==</operator> <operator pos:start="39:19" pos:end="39:19">-</operator><literal type="number" pos:start="39:20" pos:end="39:20">1</literal></expr>)</condition> <block pos:start="39:23" pos:end="47:9">{<block_content pos:start="41:13" pos:end="45:21">

            <expr_stmt pos:start="41:13" pos:end="41:27"><expr pos:start="41:13" pos:end="41:26"><call pos:start="41:13" pos:end="41:26"><name pos:start="41:13" pos:end="41:18">g_free</name><argument_list pos:start="41:19" pos:end="41:26">(<argument pos:start="41:20" pos:end="41:25"><expr pos:start="41:20" pos:end="41:25"><name pos:start="41:20" pos:end="41:25">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:21"><expr pos:start="43:13" pos:end="43:20"><name pos:start="43:13" pos:end="43:15">err</name> <operator pos:start="43:17" pos:end="43:17">=</operator> <name pos:start="43:19" pos:end="43:20">fd</name></expr>;</expr_stmt>

            <goto pos:start="45:13" pos:end="45:21">goto <name pos:start="45:18" pos:end="45:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="49:9" pos:end="49:53">/* Write the oldpath (target) to the file. */</comment>

        <expr_stmt pos:start="51:9" pos:end="51:39"><expr pos:start="51:9" pos:end="51:38"><name pos:start="51:9" pos:end="51:20">oldpath_size</name> <operator pos:start="51:22" pos:end="51:22">=</operator> <call pos:start="51:24" pos:end="51:38"><name pos:start="51:24" pos:end="51:29">strlen</name><argument_list pos:start="51:30" pos:end="51:38">(<argument pos:start="51:31" pos:end="51:37"><expr pos:start="51:31" pos:end="51:37"><name pos:start="51:31" pos:end="51:37">oldpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <do pos:start="53:9" pos:end="57:53">do <block pos:start="53:12" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:66">

            <expr_stmt pos:start="55:13" pos:end="55:66"><expr pos:start="55:13" pos:end="55:65"><name pos:start="55:13" pos:end="55:22">write_size</name> <operator pos:start="55:24" pos:end="55:24">=</operator> <call pos:start="55:26" pos:end="55:65"><name pos:start="55:26" pos:end="55:30">write</name><argument_list pos:start="55:31" pos:end="55:65">(<argument pos:start="55:32" pos:end="55:33"><expr pos:start="55:32" pos:end="55:33"><name pos:start="55:32" pos:end="55:33">fd</name></expr></argument>, <argument pos:start="55:36" pos:end="55:50"><expr pos:start="55:36" pos:end="55:50"><operator pos:start="55:36" pos:end="55:36">(</operator><name pos:start="55:37" pos:end="55:40">void</name> <operator pos:start="55:42" pos:end="55:42">*</operator><operator pos:start="55:43" pos:end="55:43">)</operator><name pos:start="55:44" pos:end="55:50">oldpath</name></expr></argument>, <argument pos:start="55:53" pos:end="55:64"><expr pos:start="55:53" pos:end="55:64"><name pos:start="55:53" pos:end="55:64">oldpath_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block> while <condition pos:start="57:17" pos:end="57:52">(<expr pos:start="57:18" pos:end="57:51"><name pos:start="57:18" pos:end="57:27">write_size</name> <operator pos:start="57:29" pos:end="57:30">==</operator> <operator pos:start="57:32" pos:end="57:32">-</operator><literal type="number" pos:start="57:33" pos:end="57:33">1</literal> <operator pos:start="57:35" pos:end="57:36">&amp;&amp;</operator> <name pos:start="57:38" pos:end="57:42">errno</name> <operator pos:start="57:44" pos:end="57:45">==</operator> <name pos:start="57:47" pos:end="57:51">EINTR</name></expr>)</condition>;</do>



        <if_stmt pos:start="61:9" pos:end="71:9"><if pos:start="61:9" pos:end="71:9">if <condition pos:start="61:12" pos:end="61:39">(<expr pos:start="61:13" pos:end="61:38"><name pos:start="61:13" pos:end="61:22">write_size</name> <operator pos:start="61:24" pos:end="61:25">!=</operator> <name pos:start="61:27" pos:end="61:38">oldpath_size</name></expr>)</condition> <block pos:start="61:41" pos:end="71:9">{<block_content pos:start="63:13" pos:end="69:25">

            <expr_stmt pos:start="63:13" pos:end="63:27"><expr pos:start="63:13" pos:end="63:26"><name pos:start="63:13" pos:end="63:18">serrno</name> <operator pos:start="63:20" pos:end="63:20">=</operator> <name pos:start="63:22" pos:end="63:26">errno</name></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:22"><expr pos:start="65:13" pos:end="65:21"><call pos:start="65:13" pos:end="65:21"><name pos:start="65:13" pos:end="65:17">close</name><argument_list pos:start="65:18" pos:end="65:21">(<argument pos:start="65:19" pos:end="65:20"><expr pos:start="65:19" pos:end="65:20"><name pos:start="65:19" pos:end="65:20">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:21"><expr pos:start="67:13" pos:end="67:20"><name pos:start="67:13" pos:end="67:15">err</name> <operator pos:start="67:17" pos:end="67:17">=</operator> <operator pos:start="67:19" pos:end="67:19">-</operator><literal type="number" pos:start="67:20" pos:end="67:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="69:13" pos:end="69:25">goto <name pos:start="69:18" pos:end="69:24">err_end</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:18"><expr pos:start="73:9" pos:end="73:17"><call pos:start="73:9" pos:end="73:17"><name pos:start="73:9" pos:end="73:13">close</name><argument_list pos:start="73:14" pos:end="73:17">(<argument pos:start="73:15" pos:end="73:16"><expr pos:start="73:15" pos:end="73:16"><name pos:start="73:15" pos:end="73:16">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="75:9" pos:end="75:55">/* Set cleint credentials in symlink's xattr */</comment>

        <expr_stmt pos:start="77:9" pos:end="77:48"><expr pos:start="77:9" pos:end="77:47"><name pos:start="77:9" pos:end="77:22"><name pos:start="77:9" pos:end="77:13">credp</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:22">fc_mode</name></name> <operator pos:start="77:24" pos:end="77:24">=</operator> <name pos:start="77:26" pos:end="77:39"><name pos:start="77:26" pos:end="77:30">credp</name><operator pos:start="77:31" pos:end="77:32">-&gt;</operator><name pos:start="77:33" pos:end="77:39">fc_mode</name></name><operator pos:start="77:40" pos:end="77:40">|</operator><name pos:start="77:41" pos:end="77:47">S_IFLNK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:45"><expr pos:start="79:9" pos:end="79:44"><name pos:start="79:9" pos:end="79:11">err</name> <operator pos:start="79:13" pos:end="79:13">=</operator> <call pos:start="79:15" pos:end="79:44"><name pos:start="79:15" pos:end="79:29">local_set_xattr</name><argument_list pos:start="79:30" pos:end="79:44">(<argument pos:start="79:31" pos:end="79:36"><expr pos:start="79:31" pos:end="79:36"><name pos:start="79:31" pos:end="79:36">buffer</name></expr></argument>, <argument pos:start="79:39" pos:end="79:43"><expr pos:start="79:39" pos:end="79:43"><name pos:start="79:39" pos:end="79:43">credp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="81:9" pos:end="87:9"><if pos:start="81:9" pos:end="87:9">if <condition pos:start="81:12" pos:end="81:22">(<expr pos:start="81:13" pos:end="81:21"><name pos:start="81:13" pos:end="81:15">err</name> <operator pos:start="81:17" pos:end="81:18">==</operator> <operator pos:start="81:20" pos:end="81:20">-</operator><literal type="number" pos:start="81:21" pos:end="81:21">1</literal></expr>)</condition> <block pos:start="81:24" pos:end="87:9">{<block_content pos:start="83:13" pos:end="85:25">

            <expr_stmt pos:start="83:13" pos:end="83:27"><expr pos:start="83:13" pos:end="83:26"><name pos:start="83:13" pos:end="83:18">serrno</name> <operator pos:start="83:20" pos:end="83:20">=</operator> <name pos:start="83:22" pos:end="83:26">errno</name></expr>;</expr_stmt>

            <goto pos:start="85:13" pos:end="85:25">goto <name pos:start="85:18" pos:end="85:24">err_end</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="89:7" pos:end="149:5">else if <condition pos:start="89:15" pos:end="89:58">(<expr pos:start="89:16" pos:end="89:57"><name pos:start="89:16" pos:end="89:35"><name pos:start="89:16" pos:end="89:21">fs_ctx</name><operator pos:start="89:22" pos:end="89:23">-&gt;</operator><name pos:start="89:24" pos:end="89:35">export_flags</name></name> <operator pos:start="89:37" pos:end="89:37">&amp;</operator> <name pos:start="89:39" pos:end="89:57">V9FS_SM_MAPPED_FILE</name></expr>)</condition> <block pos:start="89:60" pos:end="149:5">{<block_content pos:start="91:9" pos:end="147:9">

        <decl_stmt pos:start="91:9" pos:end="91:15"><decl pos:start="91:9" pos:end="91:14"><type pos:start="91:9" pos:end="91:11"><name pos:start="91:9" pos:end="91:11">int</name></type> <name pos:start="91:13" pos:end="91:14">fd</name></decl>;</decl_stmt>

        <decl_stmt pos:start="93:9" pos:end="93:41"><decl pos:start="93:9" pos:end="93:28"><type pos:start="93:9" pos:end="93:15"><name pos:start="93:9" pos:end="93:15">ssize_t</name></type> <name pos:start="93:17" pos:end="93:28">oldpath_size</name></decl>, <decl pos:start="93:31" pos:end="93:40"><type ref="prev" pos:start="93:9" pos:end="93:15"/><name pos:start="93:31" pos:end="93:40">write_size</name></decl>;</decl_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:40"><expr pos:start="95:9" pos:end="95:39"><name pos:start="95:9" pos:end="95:14">buffer</name> <operator pos:start="95:16" pos:end="95:16">=</operator> <call pos:start="95:18" pos:end="95:39"><name pos:start="95:18" pos:end="95:22">rpath</name><argument_list pos:start="95:23" pos:end="95:39">(<argument pos:start="95:24" pos:end="95:29"><expr pos:start="95:24" pos:end="95:29"><name pos:start="95:24" pos:end="95:29">fs_ctx</name></expr></argument>, <argument pos:start="95:32" pos:end="95:38"><expr pos:start="95:32" pos:end="95:38"><name pos:start="95:32" pos:end="95:38">newpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:80"><expr pos:start="97:9" pos:end="97:79"><name pos:start="97:9" pos:end="97:10">fd</name> <operator pos:start="97:12" pos:end="97:12">=</operator> <call pos:start="97:14" pos:end="97:79"><name pos:start="97:14" pos:end="97:17">open</name><argument_list pos:start="97:18" pos:end="97:79">(<argument pos:start="97:19" pos:end="97:24"><expr pos:start="97:19" pos:end="97:24"><name pos:start="97:19" pos:end="97:24">buffer</name></expr></argument>, <argument pos:start="97:27" pos:end="97:58"><expr pos:start="97:27" pos:end="97:58"><name pos:start="97:27" pos:end="97:33">O_CREAT</name><operator pos:start="97:34" pos:end="97:34">|</operator><name pos:start="97:35" pos:end="97:40">O_EXCL</name><operator pos:start="97:41" pos:end="97:41">|</operator><name pos:start="97:42" pos:end="97:47">O_RDWR</name><operator pos:start="97:48" pos:end="97:48">|</operator><name pos:start="97:49" pos:end="97:58">O_NOFOLLOW</name></expr></argument>, <argument pos:start="97:61" pos:end="97:78"><expr pos:start="97:61" pos:end="97:78"><name pos:start="97:61" pos:end="97:78">SM_LOCAL_MODE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="99:9" pos:end="107:9"><if pos:start="99:9" pos:end="107:9">if <condition pos:start="99:12" pos:end="99:21">(<expr pos:start="99:13" pos:end="99:20"><name pos:start="99:13" pos:end="99:14">fd</name> <operator pos:start="99:16" pos:end="99:17">==</operator> <operator pos:start="99:19" pos:end="99:19">-</operator><literal type="number" pos:start="99:20" pos:end="99:20">1</literal></expr>)</condition> <block pos:start="99:23" pos:end="107:9">{<block_content pos:start="101:13" pos:end="105:21">

            <expr_stmt pos:start="101:13" pos:end="101:27"><expr pos:start="101:13" pos:end="101:26"><call pos:start="101:13" pos:end="101:26"><name pos:start="101:13" pos:end="101:18">g_free</name><argument_list pos:start="101:19" pos:end="101:26">(<argument pos:start="101:20" pos:end="101:25"><expr pos:start="101:20" pos:end="101:25"><name pos:start="101:20" pos:end="101:25">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:21"><expr pos:start="103:13" pos:end="103:20"><name pos:start="103:13" pos:end="103:15">err</name> <operator pos:start="103:17" pos:end="103:17">=</operator> <name pos:start="103:19" pos:end="103:20">fd</name></expr>;</expr_stmt>

            <goto pos:start="105:13" pos:end="105:21">goto <name pos:start="105:18" pos:end="105:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="109:9" pos:end="109:53">/* Write the oldpath (target) to the file. */</comment>

        <expr_stmt pos:start="111:9" pos:end="111:39"><expr pos:start="111:9" pos:end="111:38"><name pos:start="111:9" pos:end="111:20">oldpath_size</name> <operator pos:start="111:22" pos:end="111:22">=</operator> <call pos:start="111:24" pos:end="111:38"><name pos:start="111:24" pos:end="111:29">strlen</name><argument_list pos:start="111:30" pos:end="111:38">(<argument pos:start="111:31" pos:end="111:37"><expr pos:start="111:31" pos:end="111:37"><name pos:start="111:31" pos:end="111:37">oldpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <do pos:start="113:9" pos:end="117:53">do <block pos:start="113:12" pos:end="117:9">{<block_content pos:start="115:13" pos:end="115:66">

            <expr_stmt pos:start="115:13" pos:end="115:66"><expr pos:start="115:13" pos:end="115:65"><name pos:start="115:13" pos:end="115:22">write_size</name> <operator pos:start="115:24" pos:end="115:24">=</operator> <call pos:start="115:26" pos:end="115:65"><name pos:start="115:26" pos:end="115:30">write</name><argument_list pos:start="115:31" pos:end="115:65">(<argument pos:start="115:32" pos:end="115:33"><expr pos:start="115:32" pos:end="115:33"><name pos:start="115:32" pos:end="115:33">fd</name></expr></argument>, <argument pos:start="115:36" pos:end="115:50"><expr pos:start="115:36" pos:end="115:50"><operator pos:start="115:36" pos:end="115:36">(</operator><name pos:start="115:37" pos:end="115:40">void</name> <operator pos:start="115:42" pos:end="115:42">*</operator><operator pos:start="115:43" pos:end="115:43">)</operator><name pos:start="115:44" pos:end="115:50">oldpath</name></expr></argument>, <argument pos:start="115:53" pos:end="115:64"><expr pos:start="115:53" pos:end="115:64"><name pos:start="115:53" pos:end="115:64">oldpath_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block> while <condition pos:start="117:17" pos:end="117:52">(<expr pos:start="117:18" pos:end="117:51"><name pos:start="117:18" pos:end="117:27">write_size</name> <operator pos:start="117:29" pos:end="117:30">==</operator> <operator pos:start="117:32" pos:end="117:32">-</operator><literal type="number" pos:start="117:33" pos:end="117:33">1</literal> <operator pos:start="117:35" pos:end="117:36">&amp;&amp;</operator> <name pos:start="117:38" pos:end="117:42">errno</name> <operator pos:start="117:44" pos:end="117:45">==</operator> <name pos:start="117:47" pos:end="117:51">EINTR</name></expr>)</condition>;</do>



        <if_stmt pos:start="121:9" pos:end="131:9"><if pos:start="121:9" pos:end="131:9">if <condition pos:start="121:12" pos:end="121:39">(<expr pos:start="121:13" pos:end="121:38"><name pos:start="121:13" pos:end="121:22">write_size</name> <operator pos:start="121:24" pos:end="121:25">!=</operator> <name pos:start="121:27" pos:end="121:38">oldpath_size</name></expr>)</condition> <block pos:start="121:41" pos:end="131:9">{<block_content pos:start="123:13" pos:end="129:25">

            <expr_stmt pos:start="123:13" pos:end="123:27"><expr pos:start="123:13" pos:end="123:26"><name pos:start="123:13" pos:end="123:18">serrno</name> <operator pos:start="123:20" pos:end="123:20">=</operator> <name pos:start="123:22" pos:end="123:26">errno</name></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:22"><expr pos:start="125:13" pos:end="125:21"><call pos:start="125:13" pos:end="125:21"><name pos:start="125:13" pos:end="125:17">close</name><argument_list pos:start="125:18" pos:end="125:21">(<argument pos:start="125:19" pos:end="125:20"><expr pos:start="125:19" pos:end="125:20"><name pos:start="125:19" pos:end="125:20">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:21"><expr pos:start="127:13" pos:end="127:20"><name pos:start="127:13" pos:end="127:15">err</name> <operator pos:start="127:17" pos:end="127:17">=</operator> <operator pos:start="127:19" pos:end="127:19">-</operator><literal type="number" pos:start="127:20" pos:end="127:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="129:13" pos:end="129:25">goto <name pos:start="129:18" pos:end="129:24">err_end</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:18"><expr pos:start="133:9" pos:end="133:17"><call pos:start="133:9" pos:end="133:17"><name pos:start="133:9" pos:end="133:13">close</name><argument_list pos:start="133:14" pos:end="133:17">(<argument pos:start="133:15" pos:end="133:16"><expr pos:start="133:15" pos:end="133:16"><name pos:start="133:15" pos:end="133:16">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="135:9" pos:end="135:55">/* Set cleint credentials in symlink's xattr */</comment>

        <expr_stmt pos:start="137:9" pos:end="137:48"><expr pos:start="137:9" pos:end="137:47"><name pos:start="137:9" pos:end="137:22"><name pos:start="137:9" pos:end="137:13">credp</name><operator pos:start="137:14" pos:end="137:15">-&gt;</operator><name pos:start="137:16" pos:end="137:22">fc_mode</name></name> <operator pos:start="137:24" pos:end="137:24">=</operator> <name pos:start="137:26" pos:end="137:39"><name pos:start="137:26" pos:end="137:30">credp</name><operator pos:start="137:31" pos:end="137:32">-&gt;</operator><name pos:start="137:33" pos:end="137:39">fc_mode</name></name><operator pos:start="137:40" pos:end="137:40">|</operator><name pos:start="137:41" pos:end="137:47">S_IFLNK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:65"><expr pos:start="139:9" pos:end="139:64"><name pos:start="139:9" pos:end="139:11">err</name> <operator pos:start="139:13" pos:end="139:13">=</operator> <call pos:start="139:15" pos:end="139:64"><name pos:start="139:15" pos:end="139:40">local_set_mapped_file_attr</name><argument_list pos:start="139:41" pos:end="139:64">(<argument pos:start="139:42" pos:end="139:47"><expr pos:start="139:42" pos:end="139:47"><name pos:start="139:42" pos:end="139:47">fs_ctx</name></expr></argument>, <argument pos:start="139:50" pos:end="139:56"><expr pos:start="139:50" pos:end="139:56"><name pos:start="139:50" pos:end="139:56">newpath</name></expr></argument>, <argument pos:start="139:59" pos:end="139:63"><expr pos:start="139:59" pos:end="139:63"><name pos:start="139:59" pos:end="139:63">credp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="141:9" pos:end="147:9"><if pos:start="141:9" pos:end="147:9">if <condition pos:start="141:12" pos:end="141:22">(<expr pos:start="141:13" pos:end="141:21"><name pos:start="141:13" pos:end="141:15">err</name> <operator pos:start="141:17" pos:end="141:18">==</operator> <operator pos:start="141:20" pos:end="141:20">-</operator><literal type="number" pos:start="141:21" pos:end="141:21">1</literal></expr>)</condition> <block pos:start="141:24" pos:end="147:9">{<block_content pos:start="143:13" pos:end="145:25">

            <expr_stmt pos:start="143:13" pos:end="143:27"><expr pos:start="143:13" pos:end="143:26"><name pos:start="143:13" pos:end="143:18">serrno</name> <operator pos:start="143:20" pos:end="143:20">=</operator> <name pos:start="143:22" pos:end="143:26">errno</name></expr>;</expr_stmt>

            <goto pos:start="145:13" pos:end="145:25">goto <name pos:start="145:18" pos:end="145:24">err_end</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="149:7" pos:end="189:5">else if <condition pos:start="149:15" pos:end="151:53">(<expr pos:start="149:16" pos:end="151:52"><operator pos:start="149:16" pos:end="149:16">(</operator><name pos:start="149:17" pos:end="149:36"><name pos:start="149:17" pos:end="149:22">fs_ctx</name><operator pos:start="149:23" pos:end="149:24">-&gt;</operator><name pos:start="149:25" pos:end="149:36">export_flags</name></name> <operator pos:start="149:38" pos:end="149:38">&amp;</operator> <name pos:start="149:40" pos:end="149:58">V9FS_SM_PASSTHROUGH</name><operator pos:start="149:59" pos:end="149:59">)</operator> <operator pos:start="149:61" pos:end="149:62">||</operator>

               <operator pos:start="151:16" pos:end="151:16">(</operator><name pos:start="151:17" pos:end="151:36"><name pos:start="151:17" pos:end="151:22">fs_ctx</name><operator pos:start="151:23" pos:end="151:24">-&gt;</operator><name pos:start="151:25" pos:end="151:36">export_flags</name></name> <operator pos:start="151:38" pos:end="151:38">&amp;</operator> <name pos:start="151:40" pos:end="151:51">V9FS_SM_NONE</name><operator pos:start="151:52" pos:end="151:52">)</operator></expr>)</condition> <block pos:start="151:55" pos:end="189:5">{<block_content pos:start="153:9" pos:end="187:9">

        <expr_stmt pos:start="153:9" pos:end="153:40"><expr pos:start="153:9" pos:end="153:39"><name pos:start="153:9" pos:end="153:14">buffer</name> <operator pos:start="153:16" pos:end="153:16">=</operator> <call pos:start="153:18" pos:end="153:39"><name pos:start="153:18" pos:end="153:22">rpath</name><argument_list pos:start="153:23" pos:end="153:39">(<argument pos:start="153:24" pos:end="153:29"><expr pos:start="153:24" pos:end="153:29"><name pos:start="153:24" pos:end="153:29">fs_ctx</name></expr></argument>, <argument pos:start="153:32" pos:end="153:38"><expr pos:start="153:32" pos:end="153:38"><name pos:start="153:32" pos:end="153:38">newpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:39"><expr pos:start="155:9" pos:end="155:38"><name pos:start="155:9" pos:end="155:11">err</name> <operator pos:start="155:13" pos:end="155:13">=</operator> <call pos:start="155:15" pos:end="155:38"><name pos:start="155:15" pos:end="155:21">symlink</name><argument_list pos:start="155:22" pos:end="155:38">(<argument pos:start="155:23" pos:end="155:29"><expr pos:start="155:23" pos:end="155:29"><name pos:start="155:23" pos:end="155:29">oldpath</name></expr></argument>, <argument pos:start="155:32" pos:end="155:37"><expr pos:start="155:32" pos:end="155:37"><name pos:start="155:32" pos:end="155:37">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="157:9" pos:end="163:9"><if pos:start="157:9" pos:end="163:9">if <condition pos:start="157:12" pos:end="157:16">(<expr pos:start="157:13" pos:end="157:15"><name pos:start="157:13" pos:end="157:15">err</name></expr>)</condition> <block pos:start="157:18" pos:end="163:9">{<block_content pos:start="159:13" pos:end="161:21">

            <expr_stmt pos:start="159:13" pos:end="159:27"><expr pos:start="159:13" pos:end="159:26"><call pos:start="159:13" pos:end="159:26"><name pos:start="159:13" pos:end="159:18">g_free</name><argument_list pos:start="159:19" pos:end="159:26">(<argument pos:start="159:20" pos:end="159:25"><expr pos:start="159:20" pos:end="159:25"><name pos:start="159:20" pos:end="159:25">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="161:13" pos:end="161:21">goto <name pos:start="161:18" pos:end="161:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:59"><expr pos:start="165:9" pos:end="165:58"><name pos:start="165:9" pos:end="165:11">err</name> <operator pos:start="165:13" pos:end="165:13">=</operator> <call pos:start="165:15" pos:end="165:58"><name pos:start="165:15" pos:end="165:20">lchown</name><argument_list pos:start="165:21" pos:end="165:58">(<argument pos:start="165:22" pos:end="165:27"><expr pos:start="165:22" pos:end="165:27"><name pos:start="165:22" pos:end="165:27">buffer</name></expr></argument>, <argument pos:start="165:30" pos:end="165:42"><expr pos:start="165:30" pos:end="165:42"><name pos:start="165:30" pos:end="165:42"><name pos:start="165:30" pos:end="165:34">credp</name><operator pos:start="165:35" pos:end="165:36">-&gt;</operator><name pos:start="165:37" pos:end="165:42">fc_uid</name></name></expr></argument>, <argument pos:start="165:45" pos:end="165:57"><expr pos:start="165:45" pos:end="165:57"><name pos:start="165:45" pos:end="165:57"><name pos:start="165:45" pos:end="165:49">credp</name><operator pos:start="165:50" pos:end="165:51">-&gt;</operator><name pos:start="165:52" pos:end="165:57">fc_gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="167:9" pos:end="187:9"><if pos:start="167:9" pos:end="187:9">if <condition pos:start="167:12" pos:end="167:22">(<expr pos:start="167:13" pos:end="167:21"><name pos:start="167:13" pos:end="167:15">err</name> <operator pos:start="167:17" pos:end="167:18">==</operator> <operator pos:start="167:20" pos:end="167:20">-</operator><literal type="number" pos:start="167:21" pos:end="167:21">1</literal></expr>)</condition> <block pos:start="167:24" pos:end="187:9">{<block_content pos:start="177:13" pos:end="185:24">

            <comment type="block" pos:start="169:13" pos:end="175:15">/*

             * If we fail to change ownership and if we are

             * using security model none. Ignore the error

             */</comment>

            <if_stmt pos:start="177:13" pos:end="185:24"><if pos:start="177:13" pos:end="183:13">if <condition pos:start="177:16" pos:end="177:71">(<expr pos:start="177:17" pos:end="177:70"><operator pos:start="177:17" pos:end="177:17">(</operator><name pos:start="177:18" pos:end="177:37"><name pos:start="177:18" pos:end="177:23">fs_ctx</name><operator pos:start="177:24" pos:end="177:25">-&gt;</operator><name pos:start="177:26" pos:end="177:37">export_flags</name></name> <operator pos:start="177:39" pos:end="177:39">&amp;</operator> <name pos:start="177:41" pos:end="177:53">V9FS_SEC_MASK</name><operator pos:start="177:54" pos:end="177:54">)</operator> <operator pos:start="177:56" pos:end="177:57">!=</operator> <name pos:start="177:59" pos:end="177:70">V9FS_SM_NONE</name></expr>)</condition> <block pos:start="177:73" pos:end="183:13">{<block_content pos:start="179:17" pos:end="181:29">

                <expr_stmt pos:start="179:17" pos:end="179:31"><expr pos:start="179:17" pos:end="179:30"><name pos:start="179:17" pos:end="179:22">serrno</name> <operator pos:start="179:24" pos:end="179:24">=</operator> <name pos:start="179:26" pos:end="179:30">errno</name></expr>;</expr_stmt>

                <goto pos:start="181:17" pos:end="181:29">goto <name pos:start="181:22" pos:end="181:28">err_end</name>;</goto>

            </block_content>}</block></if> <else pos:start="183:15" pos:end="185:24">else<block type="pseudo" pos:start="185:17" pos:end="185:24"><block_content pos:start="185:17" pos:end="185:24">

                <expr_stmt pos:start="185:17" pos:end="185:24"><expr pos:start="185:17" pos:end="185:23"><name pos:start="185:17" pos:end="185:19">err</name> <operator pos:start="185:21" pos:end="185:21">=</operator> <literal type="number" pos:start="185:23" pos:end="185:23">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <goto pos:start="191:5" pos:end="191:13">goto <name pos:start="191:10" pos:end="191:12">out</name>;</goto>



<label pos:start="195:1" pos:end="195:8"><name pos:start="195:1" pos:end="195:7">err_end</name>:</label>

    <expr_stmt pos:start="197:5" pos:end="197:19"><expr pos:start="197:5" pos:end="197:18"><call pos:start="197:5" pos:end="197:18"><name pos:start="197:5" pos:end="197:10">remove</name><argument_list pos:start="197:11" pos:end="197:18">(<argument pos:start="197:12" pos:end="197:17"><expr pos:start="197:12" pos:end="197:17"><name pos:start="197:12" pos:end="197:17">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:19"><expr pos:start="199:5" pos:end="199:18"><name pos:start="199:5" pos:end="199:9">errno</name> <operator pos:start="199:11" pos:end="199:11">=</operator> <name pos:start="199:13" pos:end="199:18">serrno</name></expr>;</expr_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:19"><expr pos:start="201:5" pos:end="201:18"><call pos:start="201:5" pos:end="201:18"><name pos:start="201:5" pos:end="201:10">g_free</name><argument_list pos:start="201:11" pos:end="201:18">(<argument pos:start="201:12" pos:end="201:17"><expr pos:start="201:12" pos:end="201:17"><name pos:start="201:12" pos:end="201:17">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="203:1" pos:end="203:4"><name pos:start="203:1" pos:end="203:3">out</name>:</label>

    <expr_stmt pos:start="205:5" pos:end="205:32"><expr pos:start="205:5" pos:end="205:31"><call pos:start="205:5" pos:end="205:31"><name pos:start="205:5" pos:end="205:20">v9fs_string_free</name><argument_list pos:start="205:21" pos:end="205:31">(<argument pos:start="205:22" pos:end="205:30"><expr pos:start="205:22" pos:end="205:30"><operator pos:start="205:22" pos:end="205:22">&amp;</operator><name pos:start="205:23" pos:end="205:30">fullname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="207:5" pos:end="207:15">return <expr pos:start="207:12" pos:end="207:14"><name pos:start="207:12" pos:end="207:14">err</name></expr>;</return>

</block_content>}</block></function>
</unit>
