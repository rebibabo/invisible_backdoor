<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13279.c" pos:tabs="8"><function pos:start="1:1" pos:end="786:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">dca_decode_frame</name><parameter_list pos:start="1:28" pos:end="3:64">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:61"><decl pos:start="1:52" pos:end="1:61"><type pos:start="1:52" pos:end="1:61"><name pos:start="1:52" pos:end="1:55">void</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">data</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:46"><decl pos:start="3:29" pos:end="3:46"><type pos:start="3:29" pos:end="3:46"><name pos:start="3:29" pos:end="3:31">int</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:46">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:63"><decl pos:start="3:49" pos:end="3:63"><type pos:start="3:49" pos:end="3:63"><name pos:start="3:49" pos:end="3:56">AVPacket</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:63">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="786:1">{<block_content pos:start="7:5" pos:end="784:20">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">buf</name> <init pos:start="7:24" pos:end="7:36">= <expr pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:30">avpkt</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">buf_size</name> <init pos:start="9:18" pos:end="9:30">= <expr pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:24">avpkt</name><operator pos:start="9:25" pos:end="9:26">-&gt;</operator><name pos:start="9:27" pos:end="9:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:20">channel_mask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:22">channel_layout</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:19">lfe_samples</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:30"><decl pos:start="17:5" pos:end="17:29"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:25">num_core_channels</name> <init pos:start="17:27" pos:end="17:29">= <expr pos:start="17:29" pos:end="17:29"><literal type="number" pos:start="17:29" pos:end="17:29">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:15"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">i</name></decl>, <decl pos:start="19:12" pos:end="19:14"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:12" pos:end="19:14">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:24"><decl pos:start="21:5" pos:end="21:23"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:9">float</name> <modifier pos:start="21:11" pos:end="21:11">*</modifier><modifier pos:start="21:12" pos:end="21:12">*</modifier></type><name pos:start="21:13" pos:end="21:23">samples_flt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:20"><decl pos:start="23:5" pos:end="23:19"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:9">float</name> <modifier pos:start="23:11" pos:end="23:11">*</modifier></type><name pos:start="23:12" pos:end="23:19">src_chan</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:20"><decl pos:start="25:5" pos:end="25:19"><type pos:start="25:5" pos:end="25:11"><name pos:start="25:5" pos:end="25:9">float</name> <modifier pos:start="25:11" pos:end="25:11">*</modifier></type><name pos:start="25:12" pos:end="25:19">dst_chan</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:37"><decl pos:start="27:5" pos:end="27:36"><type pos:start="27:5" pos:end="27:16"><name pos:start="27:5" pos:end="27:14">DCAContext</name> <modifier pos:start="27:16" pos:end="27:16">*</modifier></type><name pos:start="27:17" pos:end="27:17">s</name> <init pos:start="27:19" pos:end="27:36">= <expr pos:start="27:21" pos:end="27:36"><name pos:start="27:21" pos:end="27:36"><name pos:start="27:21" pos:end="27:25">avctx</name><operator pos:start="27:26" pos:end="27:27">-&gt;</operator><name pos:start="27:28" pos:end="27:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:20"><decl pos:start="29:5" pos:end="29:19"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:19">core_ss_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:32"><decl pos:start="31:5" pos:end="31:16"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:16">channels</name></decl>, <decl pos:start="31:19" pos:end="31:31"><type ref="prev" pos:start="31:5" pos:end="31:7"/><name pos:start="31:19" pos:end="31:31">full_channels</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:16"><decl pos:start="33:5" pos:end="33:15"><type pos:start="33:5" pos:end="33:9"><name pos:start="33:5" pos:end="33:9">float</name></type> <name pos:start="33:11" pos:end="33:15">scale</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:14"><decl pos:start="35:5" pos:end="35:13"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:13">achan</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:14"><decl pos:start="37:5" pos:end="37:13"><type pos:start="37:5" pos:end="37:7"><name pos:start="37:5" pos:end="37:7">int</name></type> <name pos:start="37:9" pos:end="37:13">chset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:13"><decl pos:start="39:5" pos:end="39:12"><type pos:start="39:5" pos:end="39:7"><name pos:start="39:5" pos:end="39:7">int</name></type> <name pos:start="39:9" pos:end="39:12">mask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:13"><decl pos:start="41:5" pos:end="41:12"><type pos:start="41:5" pos:end="41:7"><name pos:start="41:5" pos:end="41:7">int</name></type> <name pos:start="41:9" pos:end="41:12">lavc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:13"><decl pos:start="43:5" pos:end="43:12"><type pos:start="43:5" pos:end="43:7"><name pos:start="43:5" pos:end="43:7">int</name></type> <name pos:start="43:9" pos:end="43:12">posn</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:13"><decl pos:start="45:5" pos:end="45:9"><type pos:start="45:5" pos:end="45:7"><name pos:start="45:5" pos:end="45:7">int</name></type> <name pos:start="45:9" pos:end="45:9">j</name></decl>, <decl pos:start="45:12" pos:end="45:12"><type ref="prev" pos:start="45:5" pos:end="45:7"/><name pos:start="45:12" pos:end="45:12">k</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:14"><decl pos:start="47:5" pos:end="47:13"><type pos:start="47:5" pos:end="47:7"><name pos:start="47:5" pos:end="47:7">int</name></type> <name pos:start="47:9" pos:end="47:13">endch</name></decl>;</decl_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:23"><expr pos:start="51:5" pos:end="51:22"><name pos:start="51:5" pos:end="51:18"><name pos:start="51:5" pos:end="51:5">s</name><operator pos:start="51:6" pos:end="51:7">-&gt;</operator><name pos:start="51:8" pos:end="51:18">xch_present</name></name> <operator pos:start="51:20" pos:end="51:20">=</operator> <literal type="number" pos:start="51:22" pos:end="51:22">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="57:97"><expr pos:start="55:5" pos:end="57:96"><name pos:start="55:5" pos:end="55:22"><name pos:start="55:5" pos:end="55:5">s</name><operator pos:start="55:6" pos:end="55:7">-&gt;</operator><name pos:start="55:8" pos:end="55:22">dca_buffer_size</name></name> <operator pos:start="55:24" pos:end="55:24">=</operator> <call pos:start="55:26" pos:end="57:96"><name pos:start="55:26" pos:end="55:49">ff_dca_convert_bitstream</name><argument_list pos:start="55:50" pos:end="57:96">(<argument pos:start="55:51" pos:end="55:53"><expr pos:start="55:51" pos:end="55:53"><name pos:start="55:51" pos:end="55:53">buf</name></expr></argument>, <argument pos:start="55:56" pos:end="55:63"><expr pos:start="55:56" pos:end="55:63"><name pos:start="55:56" pos:end="55:63">buf_size</name></expr></argument>, <argument pos:start="55:66" pos:end="55:78"><expr pos:start="55:66" pos:end="55:78"><name pos:start="55:66" pos:end="55:78"><name pos:start="55:66" pos:end="55:66">s</name><operator pos:start="55:67" pos:end="55:68">-&gt;</operator><name pos:start="55:69" pos:end="55:78">dca_buffer</name></name></expr></argument>,

                                                  <argument pos:start="57:51" pos:end="57:95"><expr pos:start="57:51" pos:end="57:95"><name pos:start="57:51" pos:end="57:68">DCA_MAX_FRAME_SIZE</name> <operator pos:start="57:70" pos:end="57:70">+</operator> <name pos:start="57:72" pos:end="57:95">DCA_MAX_EXSS_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="64:5"><if pos:start="59:5" pos:end="64:5">if <condition pos:start="59:8" pos:end="59:50">(<expr pos:start="59:9" pos:end="59:49"><name pos:start="59:9" pos:end="59:26"><name pos:start="59:9" pos:end="59:9">s</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:26">dca_buffer_size</name></name> <operator pos:start="59:28" pos:end="59:29">==</operator> <name pos:start="59:31" pos:end="59:49">AVERROR_INVALIDDATA</name></expr>)</condition> <block pos:start="59:52" pos:end="64:5">{<block_content pos:start="61:9" pos:end="61:63">

        <expr_stmt pos:start="61:9" pos:end="61:63"><expr pos:start="61:9" pos:end="61:62"><call pos:start="61:9" pos:end="61:62"><name pos:start="61:9" pos:end="61:14">av_log</name><argument_list pos:start="61:15" pos:end="61:62">(<argument pos:start="61:16" pos:end="61:20"><expr pos:start="61:16" pos:end="61:20"><name pos:start="61:16" pos:end="61:20">avctx</name></expr></argument>, <argument pos:start="61:23" pos:end="61:34"><expr pos:start="61:23" pos:end="61:34"><name pos:start="61:23" pos:end="61:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="61:37" pos:end="61:61"><expr pos:start="61:37" pos:end="61:61"><literal type="string" pos:start="61:37" pos:end="61:61">"Not a valid DCA frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="68:5" pos:end="68:65"><expr pos:start="68:5" pos:end="68:64"><call pos:start="68:5" pos:end="68:64"><name pos:start="68:5" pos:end="68:17">init_get_bits</name><argument_list pos:start="68:18" pos:end="68:64">(<argument pos:start="68:19" pos:end="68:24"><expr pos:start="68:19" pos:end="68:24"><operator pos:start="68:19" pos:end="68:19">&amp;</operator><name pos:start="68:20" pos:end="68:24"><name pos:start="68:20" pos:end="68:20">s</name><operator pos:start="68:21" pos:end="68:22">-&gt;</operator><name pos:start="68:23" pos:end="68:24">gb</name></name></expr></argument>, <argument pos:start="68:27" pos:end="68:39"><expr pos:start="68:27" pos:end="68:39"><name pos:start="68:27" pos:end="68:39"><name pos:start="68:27" pos:end="68:27">s</name><operator pos:start="68:28" pos:end="68:29">-&gt;</operator><name pos:start="68:30" pos:end="68:39">dca_buffer</name></name></expr></argument>, <argument pos:start="68:42" pos:end="68:63"><expr pos:start="68:42" pos:end="68:63"><name pos:start="68:42" pos:end="68:59"><name pos:start="68:42" pos:end="68:42">s</name><operator pos:start="68:43" pos:end="68:44">-&gt;</operator><name pos:start="68:45" pos:end="68:59">dca_buffer_size</name></name> <operator pos:start="68:61" pos:end="68:61">*</operator> <literal type="number" pos:start="68:63" pos:end="68:63">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="70:5" pos:end="76:5"><if pos:start="70:5" pos:end="76:5">if <condition pos:start="70:8" pos:end="70:46">(<expr pos:start="70:9" pos:end="70:45"><operator pos:start="70:9" pos:end="70:9">(</operator><name pos:start="70:10" pos:end="70:12">ret</name> <operator pos:start="70:14" pos:end="70:14">=</operator> <call pos:start="70:16" pos:end="70:40"><name pos:start="70:16" pos:end="70:37">dca_parse_frame_header</name><argument_list pos:start="70:38" pos:end="70:40">(<argument pos:start="70:39" pos:end="70:39"><expr pos:start="70:39" pos:end="70:39"><name pos:start="70:39" pos:end="70:39">s</name></expr></argument>)</argument_list></call><operator pos:start="70:41" pos:end="70:41">)</operator> <operator pos:start="70:43" pos:end="70:43">&lt;</operator> <literal type="number" pos:start="70:45" pos:end="70:45">0</literal></expr>)</condition> <block pos:start="70:48" pos:end="76:5">{<block_content pos:start="74:9" pos:end="74:19">

        <comment type="line" pos:start="72:9" pos:end="72:64">//seems like the frame is corrupt, try with the next one</comment>

        <return pos:start="74:9" pos:end="74:19">return <expr pos:start="74:16" pos:end="74:18"><name pos:start="74:16" pos:end="74:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="line" pos:start="78:5" pos:end="78:41">//set AVCodec values with parsed data</comment>

    <expr_stmt pos:start="80:5" pos:end="80:40"><expr pos:start="80:5" pos:end="80:39"><name pos:start="80:5" pos:end="80:22"><name pos:start="80:5" pos:end="80:9">avctx</name><operator pos:start="80:10" pos:end="80:11">-&gt;</operator><name pos:start="80:12" pos:end="80:22">sample_rate</name></name> <operator pos:start="80:24" pos:end="80:24">=</operator> <name pos:start="80:26" pos:end="80:39"><name pos:start="80:26" pos:end="80:26">s</name><operator pos:start="80:27" pos:end="80:28">-&gt;</operator><name pos:start="80:29" pos:end="80:39">sample_rate</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="82:5" pos:end="82:37"><expr pos:start="82:5" pos:end="82:36"><name pos:start="82:5" pos:end="82:19"><name pos:start="82:5" pos:end="82:9">avctx</name><operator pos:start="82:10" pos:end="82:11">-&gt;</operator><name pos:start="82:12" pos:end="82:19">bit_rate</name></name>    <operator pos:start="82:24" pos:end="82:24">=</operator> <name pos:start="82:26" pos:end="82:36"><name pos:start="82:26" pos:end="82:26">s</name><operator pos:start="82:27" pos:end="82:28">-&gt;</operator><name pos:start="82:29" pos:end="82:36">bit_rate</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="86:5" pos:end="86:32"><expr pos:start="86:5" pos:end="86:31"><name pos:start="86:5" pos:end="86:14"><name pos:start="86:5" pos:end="86:5">s</name><operator pos:start="86:6" pos:end="86:7">-&gt;</operator><name pos:start="86:8" pos:end="86:14">profile</name></name> <operator pos:start="86:16" pos:end="86:16">=</operator> <name pos:start="86:18" pos:end="86:31">FF_PROFILE_DTS</name></expr>;</expr_stmt>



    <for pos:start="90:5" pos:end="100:5">for <control pos:start="90:9" pos:end="90:48">(<init pos:start="90:10" pos:end="90:15"><expr pos:start="90:10" pos:end="90:14"><name pos:start="90:10" pos:end="90:10">i</name> <operator pos:start="90:12" pos:end="90:12">=</operator> <literal type="number" pos:start="90:14" pos:end="90:14">0</literal></expr>;</init> <condition pos:start="90:17" pos:end="90:43"><expr pos:start="90:17" pos:end="90:42"><name pos:start="90:17" pos:end="90:17">i</name> <operator pos:start="90:19" pos:end="90:19">&lt;</operator> <operator pos:start="90:21" pos:end="90:21">(</operator><name pos:start="90:22" pos:end="90:37"><name pos:start="90:22" pos:end="90:22">s</name><operator pos:start="90:23" pos:end="90:24">-&gt;</operator><name pos:start="90:25" pos:end="90:37">sample_blocks</name></name> <operator pos:start="90:39" pos:end="90:39">/</operator> <literal type="number" pos:start="90:41" pos:end="90:41">8</literal><operator pos:start="90:42" pos:end="90:42">)</operator></expr>;</condition> <incr pos:start="90:45" pos:end="90:47"><expr pos:start="90:45" pos:end="90:47"><name pos:start="90:45" pos:end="90:45">i</name><operator pos:start="90:46" pos:end="90:47">++</operator></expr></incr>)</control> <block pos:start="90:50" pos:end="100:5">{<block_content pos:start="92:9" pos:end="98:9">

        <if_stmt pos:start="92:9" pos:end="98:9"><if pos:start="92:9" pos:end="98:9">if <condition pos:start="92:12" pos:end="92:46">(<expr pos:start="92:13" pos:end="92:45"><operator pos:start="92:13" pos:end="92:13">(</operator><name pos:start="92:14" pos:end="92:16">ret</name> <operator pos:start="92:18" pos:end="92:18">=</operator> <call pos:start="92:20" pos:end="92:44"><name pos:start="92:20" pos:end="92:35">dca_decode_block</name><argument_list pos:start="92:36" pos:end="92:44">(<argument pos:start="92:37" pos:end="92:37"><expr pos:start="92:37" pos:end="92:37"><name pos:start="92:37" pos:end="92:37">s</name></expr></argument>, <argument pos:start="92:40" pos:end="92:40"><expr pos:start="92:40" pos:end="92:40"><literal type="number" pos:start="92:40" pos:end="92:40">0</literal></expr></argument>, <argument pos:start="92:43" pos:end="92:43"><expr pos:start="92:43" pos:end="92:43"><name pos:start="92:43" pos:end="92:43">i</name></expr></argument>)</argument_list></call><operator pos:start="92:45" pos:end="92:45">)</operator></expr>)</condition> <block pos:start="92:48" pos:end="98:9">{<block_content pos:start="94:13" pos:end="96:23">

            <expr_stmt pos:start="94:13" pos:end="94:66"><expr pos:start="94:13" pos:end="94:65"><call pos:start="94:13" pos:end="94:65"><name pos:start="94:13" pos:end="94:18">av_log</name><argument_list pos:start="94:19" pos:end="94:65">(<argument pos:start="94:20" pos:end="94:24"><expr pos:start="94:20" pos:end="94:24"><name pos:start="94:20" pos:end="94:24">avctx</name></expr></argument>, <argument pos:start="94:27" pos:end="94:38"><expr pos:start="94:27" pos:end="94:38"><name pos:start="94:27" pos:end="94:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="94:41" pos:end="94:64"><expr pos:start="94:41" pos:end="94:64"><literal type="string" pos:start="94:41" pos:end="94:64">"error decoding block\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="96:13" pos:end="96:23">return <expr pos:start="96:20" pos:end="96:22"><name pos:start="96:20" pos:end="96:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="104:5" pos:end="104:84">/* record number of core channels incase less than max channels are requested */</comment>

    <expr_stmt pos:start="106:5" pos:end="106:41"><expr pos:start="106:5" pos:end="106:40"><name pos:start="106:5" pos:end="106:21">num_core_channels</name> <operator pos:start="106:23" pos:end="106:23">=</operator> <name pos:start="106:25" pos:end="106:40"><name pos:start="106:25" pos:end="106:25">s</name><operator pos:start="106:26" pos:end="106:27">-&gt;</operator><name pos:start="106:28" pos:end="106:40">prim_channels</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="110:5" pos:end="116:29"><if pos:start="110:5" pos:end="112:66">if <condition pos:start="110:8" pos:end="110:22">(<expr pos:start="110:9" pos:end="110:21"><name pos:start="110:9" pos:end="110:21"><name pos:start="110:9" pos:end="110:9">s</name><operator pos:start="110:10" pos:end="110:11">-&gt;</operator><name pos:start="110:12" pos:end="110:21">ext_coding</name></name></expr>)</condition><block type="pseudo" pos:start="112:9" pos:end="112:66"><block_content pos:start="112:9" pos:end="112:66">

        <expr_stmt pos:start="112:9" pos:end="112:66"><expr pos:start="112:9" pos:end="112:65"><name pos:start="112:9" pos:end="112:24"><name pos:start="112:9" pos:end="112:9">s</name><operator pos:start="112:10" pos:end="112:11">-&gt;</operator><name pos:start="112:12" pos:end="112:24">core_ext_mask</name></name> <operator pos:start="112:26" pos:end="112:26">=</operator> <name pos:start="112:28" pos:end="112:65"><name pos:start="112:28" pos:end="112:51">dca_ext_audio_descr_mask</name><index pos:start="112:52" pos:end="112:65">[<expr pos:start="112:53" pos:end="112:64"><name pos:start="112:53" pos:end="112:64"><name pos:start="112:53" pos:end="112:53">s</name><operator pos:start="112:54" pos:end="112:55">-&gt;</operator><name pos:start="112:56" pos:end="112:64">ext_descr</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="114:5" pos:end="116:29">else<block type="pseudo" pos:start="116:9" pos:end="116:29"><block_content pos:start="116:9" pos:end="116:29">

        <expr_stmt pos:start="116:9" pos:end="116:29"><expr pos:start="116:9" pos:end="116:28"><name pos:start="116:9" pos:end="116:24"><name pos:start="116:9" pos:end="116:9">s</name><operator pos:start="116:10" pos:end="116:11">-&gt;</operator><name pos:start="116:12" pos:end="116:24">core_ext_mask</name></name> <operator pos:start="116:26" pos:end="116:26">=</operator> <literal type="number" pos:start="116:28" pos:end="116:28">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <expr_stmt pos:start="120:5" pos:end="120:63"><expr pos:start="120:5" pos:end="120:62"><name pos:start="120:5" pos:end="120:15">core_ss_end</name> <operator pos:start="120:17" pos:end="120:17">=</operator> <call pos:start="120:19" pos:end="120:58"><name pos:start="120:19" pos:end="120:23">FFMIN</name><argument_list pos:start="120:24" pos:end="120:58">(<argument pos:start="120:25" pos:end="120:37"><expr pos:start="120:25" pos:end="120:37"><name pos:start="120:25" pos:end="120:37"><name pos:start="120:25" pos:end="120:25">s</name><operator pos:start="120:26" pos:end="120:27">-&gt;</operator><name pos:start="120:28" pos:end="120:37">frame_size</name></name></expr></argument>, <argument pos:start="120:40" pos:end="120:57"><expr pos:start="120:40" pos:end="120:57"><name pos:start="120:40" pos:end="120:57"><name pos:start="120:40" pos:end="120:40">s</name><operator pos:start="120:41" pos:end="120:42">-&gt;</operator><name pos:start="120:43" pos:end="120:57">dca_buffer_size</name></name></expr></argument>)</argument_list></call> <operator pos:start="120:60" pos:end="120:60">*</operator> <literal type="number" pos:start="120:62" pos:end="120:62">8</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="124:5" pos:end="126:33">/* only scan for extensions if ext_descr was unknown or indicated a

     * supported XCh extension */</comment>

    <if_stmt pos:start="128:5" pos:end="294:5"><if pos:start="128:5" pos:end="288:5">if <condition pos:start="128:8" pos:end="128:80">(<expr pos:start="128:9" pos:end="128:79"><name pos:start="128:9" pos:end="128:24"><name pos:start="128:9" pos:end="128:9">s</name><operator pos:start="128:10" pos:end="128:11">-&gt;</operator><name pos:start="128:12" pos:end="128:24">core_ext_mask</name></name> <operator pos:start="128:26" pos:end="128:26">&lt;</operator> <literal type="number" pos:start="128:28" pos:end="128:28">0</literal> <operator pos:start="128:30" pos:end="128:31">||</operator> <name pos:start="128:33" pos:end="128:48"><name pos:start="128:33" pos:end="128:33">s</name><operator pos:start="128:34" pos:end="128:35">-&gt;</operator><name pos:start="128:36" pos:end="128:48">core_ext_mask</name></name> <operator pos:start="128:50" pos:end="128:50">&amp;</operator> <operator pos:start="128:52" pos:end="128:52">(</operator><name pos:start="128:53" pos:end="128:63">DCA_EXT_XCH</name> <operator pos:start="128:65" pos:end="128:65">|</operator> <name pos:start="128:67" pos:end="128:78">DCA_EXT_XXCH</name><operator pos:start="128:79" pos:end="128:79">)</operator></expr>)</condition> <block pos:start="128:82" pos:end="288:5">{<block_content pos:start="136:9" pos:end="286:9">



        <comment type="block" pos:start="132:9" pos:end="134:44">/* if ext_descr was unknown, clear s-&gt;core_ext_mask so that the

         * extensions scan can fill it up */</comment>

        <expr_stmt pos:start="136:9" pos:end="136:54"><expr pos:start="136:9" pos:end="136:53"><name pos:start="136:9" pos:end="136:24"><name pos:start="136:9" pos:end="136:9">s</name><operator pos:start="136:10" pos:end="136:11">-&gt;</operator><name pos:start="136:12" pos:end="136:24">core_ext_mask</name></name> <operator pos:start="136:26" pos:end="136:26">=</operator> <call pos:start="136:28" pos:end="136:53"><name pos:start="136:28" pos:end="136:32">FFMAX</name><argument_list pos:start="136:33" pos:end="136:53">(<argument pos:start="136:34" pos:end="136:49"><expr pos:start="136:34" pos:end="136:49"><name pos:start="136:34" pos:end="136:49"><name pos:start="136:34" pos:end="136:34">s</name><operator pos:start="136:35" pos:end="136:36">-&gt;</operator><name pos:start="136:37" pos:end="136:49">core_ext_mask</name></name></expr></argument>, <argument pos:start="136:52" pos:end="136:52"><expr pos:start="136:52" pos:end="136:52"><literal type="number" pos:start="136:52" pos:end="136:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="140:9" pos:end="140:66">/* extensions start at 32-bit boundaries into bitstream */</comment>

        <expr_stmt pos:start="142:9" pos:end="142:63"><expr pos:start="142:9" pos:end="142:62"><call pos:start="142:9" pos:end="142:62"><name pos:start="142:9" pos:end="142:22">skip_bits_long</name><argument_list pos:start="142:23" pos:end="142:62">(<argument pos:start="142:24" pos:end="142:29"><expr pos:start="142:24" pos:end="142:29"><operator pos:start="142:24" pos:end="142:24">&amp;</operator><name pos:start="142:25" pos:end="142:29"><name pos:start="142:25" pos:end="142:25">s</name><operator pos:start="142:26" pos:end="142:27">-&gt;</operator><name pos:start="142:28" pos:end="142:29">gb</name></name></expr></argument>, <argument pos:start="142:32" pos:end="142:61"><expr pos:start="142:32" pos:end="142:61"><operator pos:start="142:32" pos:end="142:32">(</operator><operator pos:start="142:33" pos:end="142:33">-</operator><call pos:start="142:34" pos:end="142:55"><name pos:start="142:34" pos:end="142:47">get_bits_count</name><argument_list pos:start="142:48" pos:end="142:55">(<argument pos:start="142:49" pos:end="142:54"><expr pos:start="142:49" pos:end="142:54"><operator pos:start="142:49" pos:end="142:49">&amp;</operator><name pos:start="142:50" pos:end="142:54"><name pos:start="142:50" pos:end="142:50">s</name><operator pos:start="142:51" pos:end="142:52">-&gt;</operator><name pos:start="142:53" pos:end="142:54">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="142:56" pos:end="142:56">)</operator> <operator pos:start="142:58" pos:end="142:58">&amp;</operator> <literal type="number" pos:start="142:60" pos:end="142:61">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <while pos:start="146:9" pos:end="286:9">while <condition pos:start="146:15" pos:end="146:58">(<expr pos:start="146:16" pos:end="146:57"><name pos:start="146:16" pos:end="146:26">core_ss_end</name> <operator pos:start="146:28" pos:end="146:28">-</operator> <call pos:start="146:30" pos:end="146:51"><name pos:start="146:30" pos:end="146:43">get_bits_count</name><argument_list pos:start="146:44" pos:end="146:51">(<argument pos:start="146:45" pos:end="146:50"><expr pos:start="146:45" pos:end="146:50"><operator pos:start="146:45" pos:end="146:45">&amp;</operator><name pos:start="146:46" pos:end="146:50"><name pos:start="146:46" pos:end="146:46">s</name><operator pos:start="146:47" pos:end="146:48">-&gt;</operator><name pos:start="146:49" pos:end="146:50">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="146:53" pos:end="146:54">&gt;=</operator> <literal type="number" pos:start="146:56" pos:end="146:57">32</literal></expr>)</condition> <block pos:start="146:60" pos:end="286:9">{<block_content pos:start="148:13" pos:end="284:67">

            <decl_stmt pos:start="148:13" pos:end="148:54"><decl pos:start="148:13" pos:end="148:53"><type pos:start="148:13" pos:end="148:20"><name pos:start="148:13" pos:end="148:20">uint32_t</name></type> <name pos:start="148:22" pos:end="148:25">bits</name> <init pos:start="148:27" pos:end="148:53">= <expr pos:start="148:29" pos:end="148:53"><call pos:start="148:29" pos:end="148:53"><name pos:start="148:29" pos:end="148:41">get_bits_long</name><argument_list pos:start="148:42" pos:end="148:53">(<argument pos:start="148:43" pos:end="148:48"><expr pos:start="148:43" pos:end="148:48"><operator pos:start="148:43" pos:end="148:43">&amp;</operator><name pos:start="148:44" pos:end="148:48"><name pos:start="148:44" pos:end="148:44">s</name><operator pos:start="148:45" pos:end="148:46">-&gt;</operator><name pos:start="148:47" pos:end="148:48">gb</name></name></expr></argument>, <argument pos:start="148:51" pos:end="148:52"><expr pos:start="148:51" pos:end="148:52"><literal type="number" pos:start="148:51" pos:end="148:52">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <switch pos:start="152:13" pos:end="280:13">switch <condition pos:start="152:20" pos:end="152:25">(<expr pos:start="152:21" pos:end="152:24"><name pos:start="152:21" pos:end="152:24">bits</name></expr>)</condition> <block pos:start="152:27" pos:end="280:13">{<block_content pos:start="154:13" pos:end="278:13">

            <case pos:start="154:13" pos:end="154:28">case <expr pos:start="154:18" pos:end="154:27"><literal type="number" pos:start="154:18" pos:end="154:27">0x5a5a5a5a</literal></expr>:</case> <block pos:start="154:30" pos:end="234:13">{<block_content pos:start="156:17" pos:end="232:22">

                <decl_stmt pos:start="156:17" pos:end="156:41"><decl pos:start="156:17" pos:end="156:29"><type pos:start="156:17" pos:end="156:19"><name pos:start="156:17" pos:end="156:19">int</name></type> <name pos:start="156:21" pos:end="156:29">ext_amode</name></decl>, <decl pos:start="156:32" pos:end="156:40"><type ref="prev" pos:start="156:17" pos:end="156:19"/><name pos:start="156:32" pos:end="156:40">xch_fsize</name></decl>;</decl_stmt>



                <expr_stmt pos:start="160:17" pos:end="160:55"><expr pos:start="160:17" pos:end="160:54"><name pos:start="160:17" pos:end="160:35"><name pos:start="160:17" pos:end="160:17">s</name><operator pos:start="160:18" pos:end="160:19">-&gt;</operator><name pos:start="160:20" pos:end="160:35">xch_base_channel</name></name> <operator pos:start="160:37" pos:end="160:37">=</operator> <name pos:start="160:39" pos:end="160:54"><name pos:start="160:39" pos:end="160:39">s</name><operator pos:start="160:40" pos:end="160:41">-&gt;</operator><name pos:start="160:42" pos:end="160:54">prim_channels</name></name></expr>;</expr_stmt>



                <comment type="block" pos:start="164:17" pos:end="164:61">/* validate sync word using XCHFSIZE field */</comment>

                <expr_stmt pos:start="166:17" pos:end="166:50"><expr pos:start="166:17" pos:end="166:49"><name pos:start="166:17" pos:end="166:25">xch_fsize</name> <operator pos:start="166:27" pos:end="166:27">=</operator> <call pos:start="166:29" pos:end="166:49"><name pos:start="166:29" pos:end="166:37">show_bits</name><argument_list pos:start="166:38" pos:end="166:49">(<argument pos:start="166:39" pos:end="166:44"><expr pos:start="166:39" pos:end="166:44"><operator pos:start="166:39" pos:end="166:39">&amp;</operator><name pos:start="166:40" pos:end="166:44"><name pos:start="166:40" pos:end="166:40">s</name><operator pos:start="166:41" pos:end="166:42">-&gt;</operator><name pos:start="166:43" pos:end="166:44">gb</name></name></expr></argument>, <argument pos:start="166:47" pos:end="166:48"><expr pos:start="166:47" pos:end="166:48"><literal type="number" pos:start="166:47" pos:end="166:48">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="168:17" pos:end="172:29"><if pos:start="168:17" pos:end="172:29">if <condition pos:start="168:20" pos:end="170:89">(<expr pos:start="168:21" pos:end="170:88"><operator pos:start="168:21" pos:end="168:21">(</operator><name pos:start="168:22" pos:end="168:34"><name pos:start="168:22" pos:end="168:22">s</name><operator pos:start="168:23" pos:end="168:24">-&gt;</operator><name pos:start="168:25" pos:end="168:34">frame_size</name></name> <operator pos:start="168:36" pos:end="168:37">!=</operator> <operator pos:start="168:39" pos:end="168:39">(</operator><call pos:start="168:40" pos:end="168:61"><name pos:start="168:40" pos:end="168:53">get_bits_count</name><argument_list pos:start="168:54" pos:end="168:61">(<argument pos:start="168:55" pos:end="168:60"><expr pos:start="168:55" pos:end="168:60"><operator pos:start="168:55" pos:end="168:55">&amp;</operator><name pos:start="168:56" pos:end="168:60"><name pos:start="168:56" pos:end="168:56">s</name><operator pos:start="168:57" pos:end="168:58">-&gt;</operator><name pos:start="168:59" pos:end="168:60">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="168:63" pos:end="168:64">&gt;&gt;</operator> <literal type="number" pos:start="168:66" pos:end="168:66">3</literal><operator pos:start="168:67" pos:end="168:67">)</operator> <operator pos:start="168:69" pos:end="168:69">-</operator> <literal type="number" pos:start="168:71" pos:end="168:73">4</literal> <operator pos:start="168:73" pos:end="168:73">+</operator> <name pos:start="168:75" pos:end="168:83">xch_fsize</name><operator pos:start="168:84" pos:end="168:84">)</operator> <operator pos:start="168:86" pos:end="168:87">&amp;&amp;</operator>

                    <operator pos:start="170:21" pos:end="170:21">(</operator><name pos:start="170:22" pos:end="170:34"><name pos:start="170:22" pos:end="170:22">s</name><operator pos:start="170:23" pos:end="170:24">-&gt;</operator><name pos:start="170:25" pos:end="170:34">frame_size</name></name> <operator pos:start="170:36" pos:end="170:37">!=</operator> <operator pos:start="170:39" pos:end="170:39">(</operator><call pos:start="170:40" pos:end="170:61"><name pos:start="170:40" pos:end="170:53">get_bits_count</name><argument_list pos:start="170:54" pos:end="170:61">(<argument pos:start="170:55" pos:end="170:60"><expr pos:start="170:55" pos:end="170:60"><operator pos:start="170:55" pos:end="170:55">&amp;</operator><name pos:start="170:56" pos:end="170:60"><name pos:start="170:56" pos:end="170:56">s</name><operator pos:start="170:57" pos:end="170:58">-&gt;</operator><name pos:start="170:59" pos:end="170:60">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="170:63" pos:end="170:64">&gt;&gt;</operator> <literal type="number" pos:start="170:66" pos:end="170:66">3</literal><operator pos:start="170:67" pos:end="170:67">)</operator> <operator pos:start="170:69" pos:end="170:69">-</operator> <literal type="number" pos:start="170:71" pos:end="170:73">4</literal> <operator pos:start="170:73" pos:end="170:73">+</operator> <name pos:start="170:75" pos:end="170:83">xch_fsize</name> <operator pos:start="170:85" pos:end="170:85">+</operator> <literal type="number" pos:start="170:87" pos:end="170:87">1</literal><operator pos:start="170:88" pos:end="170:88">)</operator></expr>)</condition><block type="pseudo" pos:start="172:21" pos:end="172:29"><block_content pos:start="172:21" pos:end="172:29">

                    <continue pos:start="172:21" pos:end="172:29">continue;</continue></block_content></block></if></if_stmt>



                <comment type="block" pos:start="176:17" pos:end="176:70">/* skip length-to-end-of-frame field for the moment */</comment>

                <expr_stmt pos:start="178:17" pos:end="178:38"><expr pos:start="178:17" pos:end="178:37"><call pos:start="178:17" pos:end="178:37"><name pos:start="178:17" pos:end="178:25">skip_bits</name><argument_list pos:start="178:26" pos:end="178:37">(<argument pos:start="178:27" pos:end="178:32"><expr pos:start="178:27" pos:end="178:32"><operator pos:start="178:27" pos:end="178:27">&amp;</operator><name pos:start="178:28" pos:end="178:32"><name pos:start="178:28" pos:end="178:28">s</name><operator pos:start="178:29" pos:end="178:30">-&gt;</operator><name pos:start="178:31" pos:end="178:32">gb</name></name></expr></argument>, <argument pos:start="178:35" pos:end="178:36"><expr pos:start="178:35" pos:end="178:36"><literal type="number" pos:start="178:35" pos:end="178:36">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="182:17" pos:end="182:48"><expr pos:start="182:17" pos:end="182:47"><name pos:start="182:17" pos:end="182:32"><name pos:start="182:17" pos:end="182:17">s</name><operator pos:start="182:18" pos:end="182:19">-&gt;</operator><name pos:start="182:20" pos:end="182:32">core_ext_mask</name></name> <operator pos:start="182:34" pos:end="182:35">|=</operator> <name pos:start="182:37" pos:end="182:47">DCA_EXT_XCH</name></expr>;</expr_stmt>



                <comment type="block" pos:start="186:17" pos:end="186:82">/* extension amode(number of channels in extension) should be 1 */</comment>

                <comment type="block" pos:start="188:17" pos:end="188:61">/* AFAIK XCh is not used for more channels */</comment>

                <if_stmt pos:start="190:17" pos:end="198:17"><if pos:start="190:17" pos:end="198:17">if <condition pos:start="190:20" pos:end="190:59">(<expr pos:start="190:21" pos:end="190:58"><operator pos:start="190:21" pos:end="190:21">(</operator><name pos:start="190:22" pos:end="190:30">ext_amode</name> <operator pos:start="190:32" pos:end="190:32">=</operator> <call pos:start="190:34" pos:end="190:52"><name pos:start="190:34" pos:end="190:41">get_bits</name><argument_list pos:start="190:42" pos:end="190:52">(<argument pos:start="190:43" pos:end="190:48"><expr pos:start="190:43" pos:end="190:48"><operator pos:start="190:43" pos:end="190:43">&amp;</operator><name pos:start="190:44" pos:end="190:48"><name pos:start="190:44" pos:end="190:44">s</name><operator pos:start="190:45" pos:end="190:46">-&gt;</operator><name pos:start="190:47" pos:end="190:48">gb</name></name></expr></argument>, <argument pos:start="190:51" pos:end="190:51"><expr pos:start="190:51" pos:end="190:51"><literal type="number" pos:start="190:51" pos:end="190:51">4</literal></expr></argument>)</argument_list></call><operator pos:start="190:53" pos:end="190:53">)</operator> <operator pos:start="190:55" pos:end="190:56">!=</operator> <literal type="number" pos:start="190:58" pos:end="190:58">1</literal></expr>)</condition> <block pos:start="190:61" pos:end="198:17">{<block_content pos:start="192:21" pos:end="196:29">

                    <expr_stmt pos:start="192:21" pos:end="194:55"><expr pos:start="192:21" pos:end="194:54"><call pos:start="192:21" pos:end="194:54"><name pos:start="192:21" pos:end="192:26">av_log</name><argument_list pos:start="192:27" pos:end="194:54">(<argument pos:start="192:28" pos:end="192:32"><expr pos:start="192:28" pos:end="192:32"><name pos:start="192:28" pos:end="192:32">avctx</name></expr></argument>, <argument pos:start="192:35" pos:end="192:46"><expr pos:start="192:35" pos:end="192:46"><name pos:start="192:35" pos:end="192:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="192:49" pos:end="194:42"><expr pos:start="192:49" pos:end="194:42"><literal type="string" pos:start="192:49" pos:end="192:76">"XCh extension amode %d not"</literal>

                           <literal type="string" pos:start="194:28" pos:end="194:42">" supported!\n"</literal></expr></argument>, <argument pos:start="194:45" pos:end="194:53"><expr pos:start="194:45" pos:end="194:53"><name pos:start="194:45" pos:end="194:53">ext_amode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <continue pos:start="196:21" pos:end="196:29">continue;</continue>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="202:17" pos:end="208:17"><if pos:start="202:17" pos:end="208:17">if <condition pos:start="202:20" pos:end="202:44">(<expr pos:start="202:21" pos:end="202:43"><name pos:start="202:21" pos:end="202:39"><name pos:start="202:21" pos:end="202:21">s</name><operator pos:start="202:22" pos:end="202:23">-&gt;</operator><name pos:start="202:24" pos:end="202:39">xch_base_channel</name></name> <operator pos:start="202:41" pos:end="202:41">&lt;</operator> <literal type="number" pos:start="202:43" pos:end="202:43">2</literal></expr>)</condition> <block pos:start="202:46" pos:end="208:17">{<block_content pos:start="204:21" pos:end="206:29">

                    <expr_stmt pos:start="204:21" pos:end="204:107"><expr pos:start="204:21" pos:end="204:106"><call pos:start="204:21" pos:end="204:106"><name pos:start="204:21" pos:end="204:41">av_log_ask_for_sample</name><argument_list pos:start="204:42" pos:end="204:106">(<argument pos:start="204:43" pos:end="204:47"><expr pos:start="204:43" pos:end="204:47"><name pos:start="204:43" pos:end="204:47">avctx</name></expr></argument>, <argument pos:start="204:50" pos:end="204:105"><expr pos:start="204:50" pos:end="204:105"><literal type="string" pos:start="204:50" pos:end="204:105">"XCh with fewer than 2 base channels is not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <continue pos:start="206:21" pos:end="206:29">continue;</continue>

                </block_content>}</block></if></if_stmt>



                <comment type="block" pos:start="212:17" pos:end="212:64">/* much like core primary audio coding header */</comment>

                <expr_stmt pos:start="214:17" pos:end="214:73"><expr pos:start="214:17" pos:end="214:72"><call pos:start="214:17" pos:end="214:72"><name pos:start="214:17" pos:end="214:45">dca_parse_audio_coding_header</name><argument_list pos:start="214:46" pos:end="214:72">(<argument pos:start="214:47" pos:end="214:47"><expr pos:start="214:47" pos:end="214:47"><name pos:start="214:47" pos:end="214:47">s</name></expr></argument>, <argument pos:start="214:50" pos:end="214:68"><expr pos:start="214:50" pos:end="214:68"><name pos:start="214:50" pos:end="214:68"><name pos:start="214:50" pos:end="214:50">s</name><operator pos:start="214:51" pos:end="214:52">-&gt;</operator><name pos:start="214:53" pos:end="214:68">xch_base_channel</name></name></expr></argument>, <argument pos:start="214:71" pos:end="214:71"><expr pos:start="214:71" pos:end="214:71"><literal type="number" pos:start="214:71" pos:end="214:71">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <for pos:start="218:17" pos:end="226:21">for <control pos:start="218:21" pos:end="218:60">(<init pos:start="218:22" pos:end="218:27"><expr pos:start="218:22" pos:end="218:26"><name pos:start="218:22" pos:end="218:22">i</name> <operator pos:start="218:24" pos:end="218:24">=</operator> <literal type="number" pos:start="218:26" pos:end="218:26">0</literal></expr>;</init> <condition pos:start="218:29" pos:end="218:55"><expr pos:start="218:29" pos:end="218:54"><name pos:start="218:29" pos:end="218:29">i</name> <operator pos:start="218:31" pos:end="218:31">&lt;</operator> <operator pos:start="218:33" pos:end="218:33">(</operator><name pos:start="218:34" pos:end="218:49"><name pos:start="218:34" pos:end="218:34">s</name><operator pos:start="218:35" pos:end="218:36">-&gt;</operator><name pos:start="218:37" pos:end="218:49">sample_blocks</name></name> <operator pos:start="218:51" pos:end="218:51">/</operator> <literal type="number" pos:start="218:53" pos:end="218:53">8</literal><operator pos:start="218:54" pos:end="218:54">)</operator></expr>;</condition> <incr pos:start="218:57" pos:end="218:59"><expr pos:start="218:57" pos:end="218:59"><name pos:start="218:57" pos:end="218:57">i</name><operator pos:start="218:58" pos:end="218:59">++</operator></expr></incr>)</control><block type="pseudo" pos:start="220:21" pos:end="226:21"><block_content pos:start="220:21" pos:end="226:21">

                    <if_stmt pos:start="220:21" pos:end="226:21"><if pos:start="220:21" pos:end="226:21">if <condition pos:start="220:24" pos:end="220:76">(<expr pos:start="220:25" pos:end="220:75"><operator pos:start="220:25" pos:end="220:25">(</operator><name pos:start="220:26" pos:end="220:28">ret</name> <operator pos:start="220:30" pos:end="220:30">=</operator> <call pos:start="220:32" pos:end="220:74"><name pos:start="220:32" pos:end="220:47">dca_decode_block</name><argument_list pos:start="220:48" pos:end="220:74">(<argument pos:start="220:49" pos:end="220:49"><expr pos:start="220:49" pos:end="220:49"><name pos:start="220:49" pos:end="220:49">s</name></expr></argument>, <argument pos:start="220:52" pos:end="220:70"><expr pos:start="220:52" pos:end="220:70"><name pos:start="220:52" pos:end="220:70"><name pos:start="220:52" pos:end="220:52">s</name><operator pos:start="220:53" pos:end="220:54">-&gt;</operator><name pos:start="220:55" pos:end="220:70">xch_base_channel</name></name></expr></argument>, <argument pos:start="220:73" pos:end="220:73"><expr pos:start="220:73" pos:end="220:73"><name pos:start="220:73" pos:end="220:73">i</name></expr></argument>)</argument_list></call><operator pos:start="220:75" pos:end="220:75">)</operator></expr>)</condition> <block pos:start="220:78" pos:end="226:21">{<block_content pos:start="222:25" pos:end="224:33">

                        <expr_stmt pos:start="222:25" pos:end="222:86"><expr pos:start="222:25" pos:end="222:85"><call pos:start="222:25" pos:end="222:85"><name pos:start="222:25" pos:end="222:30">av_log</name><argument_list pos:start="222:31" pos:end="222:85">(<argument pos:start="222:32" pos:end="222:36"><expr pos:start="222:32" pos:end="222:36"><name pos:start="222:32" pos:end="222:36">avctx</name></expr></argument>, <argument pos:start="222:39" pos:end="222:50"><expr pos:start="222:39" pos:end="222:50"><name pos:start="222:39" pos:end="222:50">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="222:53" pos:end="222:84"><expr pos:start="222:53" pos:end="222:84"><literal type="string" pos:start="222:53" pos:end="222:84">"error decoding XCh extension\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <continue pos:start="224:25" pos:end="224:33">continue;</continue>

                    </block_content>}</block></if></if_stmt></block_content></block></for>



                <expr_stmt pos:start="230:17" pos:end="230:35"><expr pos:start="230:17" pos:end="230:34"><name pos:start="230:17" pos:end="230:30"><name pos:start="230:17" pos:end="230:17">s</name><operator pos:start="230:18" pos:end="230:19">-&gt;</operator><name pos:start="230:20" pos:end="230:30">xch_present</name></name> <operator pos:start="230:32" pos:end="230:32">=</operator> <literal type="number" pos:start="230:34" pos:end="230:34">1</literal></expr>;</expr_stmt>

                <break pos:start="232:17" pos:end="232:22">break;</break>

            </block_content>}</block>

            <case pos:start="236:13" pos:end="236:28">case <expr pos:start="236:18" pos:end="236:27"><literal type="number" pos:start="236:18" pos:end="236:27">0x47004a03</literal></expr>:</case>

                <comment type="block" pos:start="238:17" pos:end="238:45">/* XXCh: extended channels */</comment>

                <comment type="block" pos:start="240:17" pos:end="242:77">/* usually found either in core or HD part in DTS-HD HRA streams,

                 * but not in DTS-ES which contains XCh extensions instead */</comment>

                <expr_stmt pos:start="244:17" pos:end="244:49"><expr pos:start="244:17" pos:end="244:48"><name pos:start="244:17" pos:end="244:32"><name pos:start="244:17" pos:end="244:17">s</name><operator pos:start="244:18" pos:end="244:19">-&gt;</operator><name pos:start="244:20" pos:end="244:32">core_ext_mask</name></name> <operator pos:start="244:34" pos:end="244:35">|=</operator> <name pos:start="244:37" pos:end="244:48">DCA_EXT_XXCH</name></expr>;</expr_stmt>

                <expr_stmt pos:start="246:17" pos:end="246:41"><expr pos:start="246:17" pos:end="246:40"><call pos:start="246:17" pos:end="246:40"><name pos:start="246:17" pos:end="246:37">dca_xxch_decode_frame</name><argument_list pos:start="246:38" pos:end="246:40">(<argument pos:start="246:39" pos:end="246:39"><expr pos:start="246:39" pos:end="246:39"><name pos:start="246:39" pos:end="246:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="248:17" pos:end="248:22">break;</break>



            <case pos:start="252:13" pos:end="252:28">case <expr pos:start="252:18" pos:end="252:27"><literal type="number" pos:start="252:18" pos:end="252:27">0x1d95f262</literal></expr>:</case> <block pos:start="252:30" pos:end="278:13">{<block_content pos:start="254:17" pos:end="276:22">

                <decl_stmt pos:start="254:17" pos:end="254:56"><decl pos:start="254:17" pos:end="254:55"><type pos:start="254:17" pos:end="254:19"><name pos:start="254:17" pos:end="254:19">int</name></type> <name pos:start="254:21" pos:end="254:27">fsize96</name> <init pos:start="254:29" pos:end="254:55">= <expr pos:start="254:31" pos:end="254:55"><call pos:start="254:31" pos:end="254:51"><name pos:start="254:31" pos:end="254:39">show_bits</name><argument_list pos:start="254:40" pos:end="254:51">(<argument pos:start="254:41" pos:end="254:46"><expr pos:start="254:41" pos:end="254:46"><operator pos:start="254:41" pos:end="254:41">&amp;</operator><name pos:start="254:42" pos:end="254:46"><name pos:start="254:42" pos:end="254:42">s</name><operator pos:start="254:43" pos:end="254:44">-&gt;</operator><name pos:start="254:45" pos:end="254:46">gb</name></name></expr></argument>, <argument pos:start="254:49" pos:end="254:50"><expr pos:start="254:49" pos:end="254:50"><literal type="number" pos:start="254:49" pos:end="254:50">12</literal></expr></argument>)</argument_list></call> <operator pos:start="254:53" pos:end="254:53">+</operator> <literal type="number" pos:start="254:55" pos:end="254:55">1</literal></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="256:17" pos:end="258:29"><if pos:start="256:17" pos:end="258:29">if <condition pos:start="256:20" pos:end="256:81">(<expr pos:start="256:21" pos:end="256:80"><name pos:start="256:21" pos:end="256:33"><name pos:start="256:21" pos:end="256:21">s</name><operator pos:start="256:22" pos:end="256:23">-&gt;</operator><name pos:start="256:24" pos:end="256:33">frame_size</name></name> <operator pos:start="256:35" pos:end="256:36">!=</operator> <operator pos:start="256:38" pos:end="256:38">(</operator><call pos:start="256:39" pos:end="256:60"><name pos:start="256:39" pos:end="256:52">get_bits_count</name><argument_list pos:start="256:53" pos:end="256:60">(<argument pos:start="256:54" pos:end="256:59"><expr pos:start="256:54" pos:end="256:59"><operator pos:start="256:54" pos:end="256:54">&amp;</operator><name pos:start="256:55" pos:end="256:59"><name pos:start="256:55" pos:end="256:55">s</name><operator pos:start="256:56" pos:end="256:57">-&gt;</operator><name pos:start="256:58" pos:end="256:59">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="256:62" pos:end="256:63">&gt;&gt;</operator> <literal type="number" pos:start="256:65" pos:end="256:65">3</literal><operator pos:start="256:66" pos:end="256:66">)</operator> <operator pos:start="256:68" pos:end="256:68">-</operator> <literal type="number" pos:start="256:70" pos:end="256:72">4</literal> <operator pos:start="256:72" pos:end="256:72">+</operator> <name pos:start="256:74" pos:end="256:80">fsize96</name></expr>)</condition><block type="pseudo" pos:start="258:21" pos:end="258:29"><block_content pos:start="258:21" pos:end="258:29">

                    <continue pos:start="258:21" pos:end="258:29">continue;</continue></block_content></block></if></if_stmt>



                <expr_stmt pos:start="262:17" pos:end="264:47"><expr pos:start="262:17" pos:end="264:46"><call pos:start="262:17" pos:end="264:46"><name pos:start="262:17" pos:end="262:22">av_log</name><argument_list pos:start="262:23" pos:end="264:46">(<argument pos:start="262:24" pos:end="262:28"><expr pos:start="262:24" pos:end="262:28"><name pos:start="262:24" pos:end="262:28">avctx</name></expr></argument>, <argument pos:start="262:31" pos:end="262:42"><expr pos:start="262:31" pos:end="262:42"><name pos:start="262:31" pos:end="262:42">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="262:45" pos:end="262:78"><expr pos:start="262:45" pos:end="262:78"><literal type="string" pos:start="262:45" pos:end="262:78">"X96 extension found at %d bits\n"</literal></expr></argument>,

                       <argument pos:start="264:24" pos:end="264:45"><expr pos:start="264:24" pos:end="264:45"><call pos:start="264:24" pos:end="264:45"><name pos:start="264:24" pos:end="264:37">get_bits_count</name><argument_list pos:start="264:38" pos:end="264:45">(<argument pos:start="264:39" pos:end="264:44"><expr pos:start="264:39" pos:end="264:44"><operator pos:start="264:39" pos:end="264:39">&amp;</operator><name pos:start="264:40" pos:end="264:44"><name pos:start="264:40" pos:end="264:40">s</name><operator pos:start="264:41" pos:end="264:42">-&gt;</operator><name pos:start="264:43" pos:end="264:44">gb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="266:17" pos:end="266:38"><expr pos:start="266:17" pos:end="266:37"><call pos:start="266:17" pos:end="266:37"><name pos:start="266:17" pos:end="266:25">skip_bits</name><argument_list pos:start="266:26" pos:end="266:37">(<argument pos:start="266:27" pos:end="266:32"><expr pos:start="266:27" pos:end="266:32"><operator pos:start="266:27" pos:end="266:27">&amp;</operator><name pos:start="266:28" pos:end="266:32"><name pos:start="266:28" pos:end="266:28">s</name><operator pos:start="266:29" pos:end="266:30">-&gt;</operator><name pos:start="266:31" pos:end="266:32">gb</name></name></expr></argument>, <argument pos:start="266:35" pos:end="266:36"><expr pos:start="266:35" pos:end="266:36"><literal type="number" pos:start="266:35" pos:end="266:36">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="268:17" pos:end="268:77"><expr pos:start="268:17" pos:end="268:76"><call pos:start="268:17" pos:end="268:76"><name pos:start="268:17" pos:end="268:22">av_log</name><argument_list pos:start="268:23" pos:end="268:76">(<argument pos:start="268:24" pos:end="268:28"><expr pos:start="268:24" pos:end="268:28"><name pos:start="268:24" pos:end="268:28">avctx</name></expr></argument>, <argument pos:start="268:31" pos:end="268:42"><expr pos:start="268:31" pos:end="268:42"><name pos:start="268:31" pos:end="268:42">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="268:45" pos:end="268:66"><expr pos:start="268:45" pos:end="268:66"><literal type="string" pos:start="268:45" pos:end="268:66">"FSIZE96 = %d bytes\n"</literal></expr></argument>, <argument pos:start="268:69" pos:end="268:75"><expr pos:start="268:69" pos:end="268:75"><name pos:start="268:69" pos:end="268:75">fsize96</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="270:17" pos:end="270:81"><expr pos:start="270:17" pos:end="270:80"><call pos:start="270:17" pos:end="270:80"><name pos:start="270:17" pos:end="270:22">av_log</name><argument_list pos:start="270:23" pos:end="270:80">(<argument pos:start="270:24" pos:end="270:28"><expr pos:start="270:24" pos:end="270:28"><name pos:start="270:24" pos:end="270:28">avctx</name></expr></argument>, <argument pos:start="270:31" pos:end="270:42"><expr pos:start="270:31" pos:end="270:42"><name pos:start="270:31" pos:end="270:42">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="270:45" pos:end="270:58"><expr pos:start="270:45" pos:end="270:58"><literal type="string" pos:start="270:45" pos:end="270:58">"REVNO = %d\n"</literal></expr></argument>, <argument pos:start="270:61" pos:end="270:79"><expr pos:start="270:61" pos:end="270:79"><call pos:start="270:61" pos:end="270:79"><name pos:start="270:61" pos:end="270:68">get_bits</name><argument_list pos:start="270:69" pos:end="270:79">(<argument pos:start="270:70" pos:end="270:75"><expr pos:start="270:70" pos:end="270:75"><operator pos:start="270:70" pos:end="270:70">&amp;</operator><name pos:start="270:71" pos:end="270:75"><name pos:start="270:71" pos:end="270:71">s</name><operator pos:start="270:72" pos:end="270:73">-&gt;</operator><name pos:start="270:74" pos:end="270:75">gb</name></name></expr></argument>, <argument pos:start="270:78" pos:end="270:78"><expr pos:start="270:78" pos:end="270:78"><literal type="number" pos:start="270:78" pos:end="270:78">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="274:17" pos:end="274:48"><expr pos:start="274:17" pos:end="274:47"><name pos:start="274:17" pos:end="274:32"><name pos:start="274:17" pos:end="274:17">s</name><operator pos:start="274:18" pos:end="274:19">-&gt;</operator><name pos:start="274:20" pos:end="274:32">core_ext_mask</name></name> <operator pos:start="274:34" pos:end="274:35">|=</operator> <name pos:start="274:37" pos:end="274:47">DCA_EXT_X96</name></expr>;</expr_stmt>

                <break pos:start="276:17" pos:end="276:22">break;</break>

            </block_content>}</block>

            </block_content>}</block></switch>



            <expr_stmt pos:start="284:13" pos:end="284:67"><expr pos:start="284:13" pos:end="284:66"><call pos:start="284:13" pos:end="284:66"><name pos:start="284:13" pos:end="284:26">skip_bits_long</name><argument_list pos:start="284:27" pos:end="284:66">(<argument pos:start="284:28" pos:end="284:33"><expr pos:start="284:28" pos:end="284:33"><operator pos:start="284:28" pos:end="284:28">&amp;</operator><name pos:start="284:29" pos:end="284:33"><name pos:start="284:29" pos:end="284:29">s</name><operator pos:start="284:30" pos:end="284:31">-&gt;</operator><name pos:start="284:32" pos:end="284:33">gb</name></name></expr></argument>, <argument pos:start="284:36" pos:end="284:65"><expr pos:start="284:36" pos:end="284:65"><operator pos:start="284:36" pos:end="284:36">(</operator><operator pos:start="284:37" pos:end="284:37">-</operator><call pos:start="284:38" pos:end="284:59"><name pos:start="284:38" pos:end="284:51">get_bits_count</name><argument_list pos:start="284:52" pos:end="284:59">(<argument pos:start="284:53" pos:end="284:58"><expr pos:start="284:53" pos:end="284:58"><operator pos:start="284:53" pos:end="284:53">&amp;</operator><name pos:start="284:54" pos:end="284:58"><name pos:start="284:54" pos:end="284:54">s</name><operator pos:start="284:55" pos:end="284:56">-&gt;</operator><name pos:start="284:57" pos:end="284:58">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="284:60" pos:end="284:60">)</operator> <operator pos:start="284:62" pos:end="284:62">&amp;</operator> <literal type="number" pos:start="284:64" pos:end="284:65">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></if> <else pos:start="288:7" pos:end="294:5">else <block pos:start="288:12" pos:end="294:5">{<block_content pos:start="292:9" pos:end="292:69">

        <comment type="block" pos:start="290:9" pos:end="290:74">/* no supported extensions, skip the rest of the core substream */</comment>

        <expr_stmt pos:start="292:9" pos:end="292:69"><expr pos:start="292:9" pos:end="292:68"><call pos:start="292:9" pos:end="292:68"><name pos:start="292:9" pos:end="292:22">skip_bits_long</name><argument_list pos:start="292:23" pos:end="292:68">(<argument pos:start="292:24" pos:end="292:29"><expr pos:start="292:24" pos:end="292:29"><operator pos:start="292:24" pos:end="292:24">&amp;</operator><name pos:start="292:25" pos:end="292:29"><name pos:start="292:25" pos:end="292:25">s</name><operator pos:start="292:26" pos:end="292:27">-&gt;</operator><name pos:start="292:28" pos:end="292:29">gb</name></name></expr></argument>, <argument pos:start="292:32" pos:end="292:67"><expr pos:start="292:32" pos:end="292:67"><name pos:start="292:32" pos:end="292:42">core_ss_end</name> <operator pos:start="292:44" pos:end="292:44">-</operator> <call pos:start="292:46" pos:end="292:67"><name pos:start="292:46" pos:end="292:59">get_bits_count</name><argument_list pos:start="292:60" pos:end="292:67">(<argument pos:start="292:61" pos:end="292:66"><expr pos:start="292:61" pos:end="292:66"><operator pos:start="292:61" pos:end="292:61">&amp;</operator><name pos:start="292:62" pos:end="292:66"><name pos:start="292:62" pos:end="292:62">s</name><operator pos:start="292:63" pos:end="292:64">-&gt;</operator><name pos:start="292:65" pos:end="292:66">gb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="298:5" pos:end="304:39"><if pos:start="298:5" pos:end="300:42">if <condition pos:start="298:8" pos:end="298:39">(<expr pos:start="298:9" pos:end="298:38"><name pos:start="298:9" pos:end="298:24"><name pos:start="298:9" pos:end="298:9">s</name><operator pos:start="298:10" pos:end="298:11">-&gt;</operator><name pos:start="298:12" pos:end="298:24">core_ext_mask</name></name> <operator pos:start="298:26" pos:end="298:26">&amp;</operator> <name pos:start="298:28" pos:end="298:38">DCA_EXT_X96</name></expr>)</condition><block type="pseudo" pos:start="300:9" pos:end="300:42"><block_content pos:start="300:9" pos:end="300:42">

        <expr_stmt pos:start="300:9" pos:end="300:42"><expr pos:start="300:9" pos:end="300:41"><name pos:start="300:9" pos:end="300:18"><name pos:start="300:9" pos:end="300:9">s</name><operator pos:start="300:10" pos:end="300:11">-&gt;</operator><name pos:start="300:12" pos:end="300:18">profile</name></name> <operator pos:start="300:20" pos:end="300:20">=</operator> <name pos:start="300:22" pos:end="300:41">FF_PROFILE_DTS_96_24</name></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="302:5" pos:end="304:39">else if <condition pos:start="302:13" pos:end="302:61">(<expr pos:start="302:14" pos:end="302:60"><name pos:start="302:14" pos:end="302:29"><name pos:start="302:14" pos:end="302:14">s</name><operator pos:start="302:15" pos:end="302:16">-&gt;</operator><name pos:start="302:17" pos:end="302:29">core_ext_mask</name></name> <operator pos:start="302:31" pos:end="302:31">&amp;</operator> <operator pos:start="302:33" pos:end="302:33">(</operator><name pos:start="302:34" pos:end="302:44">DCA_EXT_XCH</name> <operator pos:start="302:46" pos:end="302:46">|</operator> <name pos:start="302:48" pos:end="302:59">DCA_EXT_XXCH</name><operator pos:start="302:60" pos:end="302:60">)</operator></expr>)</condition><block type="pseudo" pos:start="304:9" pos:end="304:39"><block_content pos:start="304:9" pos:end="304:39">

        <expr_stmt pos:start="304:9" pos:end="304:39"><expr pos:start="304:9" pos:end="304:38"><name pos:start="304:9" pos:end="304:18"><name pos:start="304:9" pos:end="304:9">s</name><operator pos:start="304:10" pos:end="304:11">-&gt;</operator><name pos:start="304:12" pos:end="304:18">profile</name></name> <operator pos:start="304:20" pos:end="304:20">=</operator> <name pos:start="304:22" pos:end="304:38">FF_PROFILE_DTS_ES</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="308:5" pos:end="308:34">/* check for ExSS (HD part) */</comment>

    <if_stmt pos:start="310:5" pos:end="314:33"><if pos:start="310:5" pos:end="314:33">if <condition pos:start="310:8" pos:end="312:51">(<expr pos:start="310:9" pos:end="312:50"><name pos:start="310:9" pos:end="310:26"><name pos:start="310:9" pos:end="310:9">s</name><operator pos:start="310:10" pos:end="310:11">-&gt;</operator><name pos:start="310:12" pos:end="310:26">dca_buffer_size</name></name> <operator pos:start="310:28" pos:end="310:28">-</operator> <name pos:start="310:30" pos:end="310:42"><name pos:start="310:30" pos:end="310:30">s</name><operator pos:start="310:31" pos:end="310:32">-&gt;</operator><name pos:start="310:33" pos:end="310:42">frame_size</name></name> <operator pos:start="310:44" pos:end="310:44">&gt;</operator> <literal type="number" pos:start="310:46" pos:end="310:47">32</literal> <operator pos:start="310:49" pos:end="310:50">&amp;&amp;</operator>

        <call pos:start="312:9" pos:end="312:33"><name pos:start="312:9" pos:end="312:21">get_bits_long</name><argument_list pos:start="312:22" pos:end="312:33">(<argument pos:start="312:23" pos:end="312:28"><expr pos:start="312:23" pos:end="312:28"><operator pos:start="312:23" pos:end="312:23">&amp;</operator><name pos:start="312:24" pos:end="312:28"><name pos:start="312:24" pos:end="312:24">s</name><operator pos:start="312:25" pos:end="312:26">-&gt;</operator><name pos:start="312:27" pos:end="312:28">gb</name></name></expr></argument>, <argument pos:start="312:31" pos:end="312:32"><expr pos:start="312:31" pos:end="312:32"><literal type="number" pos:start="312:31" pos:end="312:32">32</literal></expr></argument>)</argument_list></call> <operator pos:start="312:35" pos:end="312:36">==</operator> <name pos:start="312:38" pos:end="312:50">DCA_HD_MARKER</name></expr>)</condition><block type="pseudo" pos:start="314:9" pos:end="314:33"><block_content pos:start="314:9" pos:end="314:33">

        <expr_stmt pos:start="314:9" pos:end="314:33"><expr pos:start="314:9" pos:end="314:32"><call pos:start="314:9" pos:end="314:32"><name pos:start="314:9" pos:end="314:29">dca_exss_parse_header</name><argument_list pos:start="314:30" pos:end="314:32">(<argument pos:start="314:31" pos:end="314:31"><expr pos:start="314:31" pos:end="314:31"><name pos:start="314:31" pos:end="314:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="318:5" pos:end="318:32"><expr pos:start="318:5" pos:end="318:31"><name pos:start="318:5" pos:end="318:18"><name pos:start="318:5" pos:end="318:9">avctx</name><operator pos:start="318:10" pos:end="318:11">-&gt;</operator><name pos:start="318:12" pos:end="318:18">profile</name></name> <operator pos:start="318:20" pos:end="318:20">=</operator> <name pos:start="318:22" pos:end="318:31"><name pos:start="318:22" pos:end="318:22">s</name><operator pos:start="318:23" pos:end="318:24">-&gt;</operator><name pos:start="318:25" pos:end="318:31">profile</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="322:5" pos:end="322:59"><expr pos:start="322:5" pos:end="322:58"><name pos:start="322:5" pos:end="322:17">full_channels</name> <operator pos:start="322:19" pos:end="322:19">=</operator> <name pos:start="322:21" pos:end="322:28">channels</name> <operator pos:start="322:30" pos:end="322:30">=</operator> <name pos:start="322:32" pos:end="322:47"><name pos:start="322:32" pos:end="322:32">s</name><operator pos:start="322:33" pos:end="322:34">-&gt;</operator><name pos:start="322:35" pos:end="322:47">prim_channels</name></name> <operator pos:start="322:49" pos:end="322:49">+</operator> <operator pos:start="322:51" pos:end="322:51">!</operator><operator pos:start="322:52" pos:end="322:52">!</operator><name pos:start="322:53" pos:end="322:58"><name pos:start="322:53" pos:end="322:53">s</name><operator pos:start="322:54" pos:end="322:55">-&gt;</operator><name pos:start="322:56" pos:end="322:58">lfe</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="326:5" pos:end="326:72">/* If we have XXCH then the channel layout is managed differently */</comment>

    <comment type="block" pos:start="328:5" pos:end="328:63">/* note that XLL will also have another way to do things */</comment>

    <if_stmt pos:start="330:5" pos:end="556:5"><if pos:start="330:5" pos:end="437:5">if <condition pos:start="330:8" pos:end="336:67">(<expr pos:start="330:9" pos:end="336:66"><operator pos:start="330:9" pos:end="330:9">!</operator><operator pos:start="330:10" pos:end="330:10">(</operator><name pos:start="330:11" pos:end="330:26"><name pos:start="330:11" pos:end="330:11">s</name><operator pos:start="330:12" pos:end="330:13">-&gt;</operator><name pos:start="330:14" pos:end="330:26">core_ext_mask</name></name> <operator pos:start="330:28" pos:end="330:28">&amp;</operator> <name pos:start="330:30" pos:end="330:41">DCA_EXT_XXCH</name><operator pos:start="330:42" pos:end="330:42">)</operator>

        <operator pos:start="332:9" pos:end="332:10">||</operator> <operator pos:start="332:12" pos:end="332:12">(</operator><name pos:start="332:13" pos:end="332:28"><name pos:start="332:13" pos:end="332:13">s</name><operator pos:start="332:14" pos:end="332:15">-&gt;</operator><name pos:start="332:16" pos:end="332:28">core_ext_mask</name></name> <operator pos:start="332:30" pos:end="332:30">&amp;</operator> <name pos:start="332:32" pos:end="332:43">DCA_EXT_XXCH</name> <operator pos:start="332:45" pos:end="332:46">&amp;&amp;</operator> <name pos:start="332:48" pos:end="332:70"><name pos:start="332:48" pos:end="332:52">avctx</name><operator pos:start="332:53" pos:end="332:54">-&gt;</operator><name pos:start="332:55" pos:end="332:70">request_channels</name></name> <operator pos:start="332:72" pos:end="332:72">&gt;</operator> <literal type="number" pos:start="332:74" pos:end="332:74">0</literal>

            <operator pos:start="334:13" pos:end="334:14">&amp;&amp;</operator> <name pos:start="334:16" pos:end="334:38"><name pos:start="334:16" pos:end="334:20">avctx</name><operator pos:start="334:21" pos:end="334:22">-&gt;</operator><name pos:start="334:23" pos:end="334:38">request_channels</name></name>

            <operator pos:start="336:13" pos:end="336:13">&lt;</operator> <name pos:start="336:15" pos:end="336:31">num_core_channels</name> <operator pos:start="336:33" pos:end="336:33">+</operator> <operator pos:start="336:35" pos:end="336:35">!</operator><operator pos:start="336:36" pos:end="336:36">!</operator><name pos:start="336:37" pos:end="336:42"><name pos:start="336:37" pos:end="336:37">s</name><operator pos:start="336:38" pos:end="336:39">-&gt;</operator><name pos:start="336:40" pos:end="336:42">lfe</name></name> <operator pos:start="336:44" pos:end="336:44">+</operator> <name pos:start="336:46" pos:end="336:65"><name pos:start="336:46" pos:end="336:46">s</name><operator pos:start="336:47" pos:end="336:48">-&gt;</operator><name pos:start="336:49" pos:end="336:62">xxch_chset_nch</name><index pos:start="336:63" pos:end="336:65">[<expr pos:start="336:64" pos:end="336:64"><literal type="number" pos:start="336:64" pos:end="336:64">0</literal></expr>]</index></name><operator pos:start="336:66" pos:end="336:66">)</operator></expr>)</condition>

    <block pos:start="338:5" pos:end="437:5">{<block_content pos:start="340:9" pos:end="435:34"> <comment type="block" pos:start="338:7" pos:end="338:44">/* xxx should also do MA extensions */</comment>

        <if_stmt pos:start="340:9" pos:end="431:9"><if pos:start="340:9" pos:end="424:9">if <condition pos:start="340:12" pos:end="340:26">(<expr pos:start="340:13" pos:end="340:25"><name pos:start="340:13" pos:end="340:20"><name pos:start="340:13" pos:end="340:13">s</name><operator pos:start="340:14" pos:end="340:15">-&gt;</operator><name pos:start="340:16" pos:end="340:20">amode</name></name> <operator pos:start="340:22" pos:end="340:22">&lt;</operator> <literal type="number" pos:start="340:24" pos:end="340:25">16</literal></expr>)</condition> <block pos:start="340:28" pos:end="424:9">{<block_content pos:start="342:13" pos:end="422:51">

            <expr_stmt pos:start="342:13" pos:end="342:70"><expr pos:start="342:13" pos:end="342:69"><name pos:start="342:13" pos:end="342:33"><name pos:start="342:13" pos:end="342:17">avctx</name><operator pos:start="342:18" pos:end="342:19">-&gt;</operator><name pos:start="342:20" pos:end="342:33">channel_layout</name></name> <operator pos:start="342:35" pos:end="342:35">=</operator> <name pos:start="342:37" pos:end="342:69"><name pos:start="342:37" pos:end="342:59">dca_core_channel_layout</name><index pos:start="342:60" pos:end="342:69">[<expr pos:start="342:61" pos:end="342:68"><name pos:start="342:61" pos:end="342:68"><name pos:start="342:61" pos:end="342:61">s</name><operator pos:start="342:62" pos:end="342:63">-&gt;</operator><name pos:start="342:64" pos:end="342:68">amode</name></name></expr>]</index></name></expr>;</expr_stmt>



            <if_stmt pos:start="346:13" pos:end="384:13"><if pos:start="346:13" pos:end="368:13">if <condition pos:start="346:16" pos:end="350:67">(<expr pos:start="346:17" pos:end="350:66"><name pos:start="346:17" pos:end="346:30"><name pos:start="346:17" pos:end="346:17">s</name><operator pos:start="346:18" pos:end="346:19">-&gt;</operator><name pos:start="346:20" pos:end="346:30">xch_present</name></name> <operator pos:start="346:32" pos:end="346:33">&amp;&amp;</operator> <operator pos:start="346:35" pos:end="346:35">(</operator><operator pos:start="346:36" pos:end="346:36">!</operator><name pos:start="346:37" pos:end="346:59"><name pos:start="346:37" pos:end="346:41">avctx</name><operator pos:start="346:42" pos:end="346:43">-&gt;</operator><name pos:start="346:44" pos:end="346:59">request_channels</name></name> <operator pos:start="346:61" pos:end="346:62">||</operator>

                                   <name pos:start="348:36" pos:end="348:58"><name pos:start="348:36" pos:end="348:40">avctx</name><operator pos:start="348:41" pos:end="348:42">-&gt;</operator><name pos:start="348:43" pos:end="348:58">request_channels</name></name>

                                   <operator pos:start="350:36" pos:end="350:36">&gt;</operator> <name pos:start="350:38" pos:end="350:54">num_core_channels</name> <operator pos:start="350:56" pos:end="350:56">+</operator> <operator pos:start="350:58" pos:end="350:58">!</operator><operator pos:start="350:59" pos:end="350:59">!</operator><name pos:start="350:60" pos:end="350:65"><name pos:start="350:60" pos:end="350:60">s</name><operator pos:start="350:61" pos:end="350:62">-&gt;</operator><name pos:start="350:63" pos:end="350:65">lfe</name></name><operator pos:start="350:66" pos:end="350:66">)</operator></expr>)</condition> <block pos:start="350:69" pos:end="368:13">{<block_content pos:start="352:17" pos:end="364:17">

                <expr_stmt pos:start="352:17" pos:end="352:59"><expr pos:start="352:17" pos:end="352:58"><name pos:start="352:17" pos:end="352:37"><name pos:start="352:17" pos:end="352:21">avctx</name><operator pos:start="352:22" pos:end="352:23">-&gt;</operator><name pos:start="352:24" pos:end="352:37">channel_layout</name></name> <operator pos:start="352:39" pos:end="352:40">|=</operator> <name pos:start="352:42" pos:end="352:58">AV_CH_BACK_CENTER</name></expr>;</expr_stmt>

                <if_stmt pos:start="354:17" pos:end="364:17"><if pos:start="354:17" pos:end="360:17">if <condition pos:start="354:20" pos:end="354:27">(<expr pos:start="354:21" pos:end="354:26"><name pos:start="354:21" pos:end="354:26"><name pos:start="354:21" pos:end="354:21">s</name><operator pos:start="354:22" pos:end="354:23">-&gt;</operator><name pos:start="354:24" pos:end="354:26">lfe</name></name></expr>)</condition> <block pos:start="354:29" pos:end="360:17">{<block_content pos:start="356:21" pos:end="358:81">

                    <expr_stmt pos:start="356:21" pos:end="356:65"><expr pos:start="356:21" pos:end="356:64"><name pos:start="356:21" pos:end="356:41"><name pos:start="356:21" pos:end="356:25">avctx</name><operator pos:start="356:26" pos:end="356:27">-&gt;</operator><name pos:start="356:28" pos:end="356:41">channel_layout</name></name> <operator pos:start="356:43" pos:end="356:44">|=</operator> <name pos:start="356:46" pos:end="356:64">AV_CH_LOW_FREQUENCY</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="358:21" pos:end="358:81"><expr pos:start="358:21" pos:end="358:80"><name pos:start="358:21" pos:end="358:40"><name pos:start="358:21" pos:end="358:21">s</name><operator pos:start="358:22" pos:end="358:23">-&gt;</operator><name pos:start="358:24" pos:end="358:40">channel_order_tab</name></name> <operator pos:start="358:42" pos:end="358:42">=</operator> <name pos:start="358:44" pos:end="358:80"><name pos:start="358:44" pos:end="358:70">dca_channel_reorder_lfe_xch</name><index pos:start="358:71" pos:end="358:80">[<expr pos:start="358:72" pos:end="358:79"><name pos:start="358:72" pos:end="358:79"><name pos:start="358:72" pos:end="358:72">s</name><operator pos:start="358:73" pos:end="358:74">-&gt;</operator><name pos:start="358:75" pos:end="358:79">amode</name></name></expr>]</index></name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="360:19" pos:end="364:17">else <block pos:start="360:24" pos:end="364:17">{<block_content pos:start="362:21" pos:end="362:83">

                    <expr_stmt pos:start="362:21" pos:end="362:83"><expr pos:start="362:21" pos:end="362:82"><name pos:start="362:21" pos:end="362:40"><name pos:start="362:21" pos:end="362:21">s</name><operator pos:start="362:22" pos:end="362:23">-&gt;</operator><name pos:start="362:24" pos:end="362:40">channel_order_tab</name></name> <operator pos:start="362:42" pos:end="362:42">=</operator> <name pos:start="362:44" pos:end="362:82"><name pos:start="362:44" pos:end="362:72">dca_channel_reorder_nolfe_xch</name><index pos:start="362:73" pos:end="362:82">[<expr pos:start="362:74" pos:end="362:81"><name pos:start="362:74" pos:end="362:81"><name pos:start="362:74" pos:end="362:74">s</name><operator pos:start="362:75" pos:end="362:76">-&gt;</operator><name pos:start="362:77" pos:end="362:81">amode</name></name></expr>]</index></name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>



            </block_content>}</block></if> <else pos:start="368:15" pos:end="384:13">else <block pos:start="368:20" pos:end="384:13">{<block_content pos:start="370:17" pos:end="382:79">

                <expr_stmt pos:start="370:17" pos:end="370:56"><expr pos:start="370:17" pos:end="370:55"><name pos:start="370:17" pos:end="370:24">channels</name> <operator pos:start="370:26" pos:end="370:26">=</operator> <name pos:start="370:28" pos:end="370:44">num_core_channels</name> <operator pos:start="370:46" pos:end="370:46">+</operator> <operator pos:start="370:48" pos:end="370:48">!</operator><operator pos:start="370:49" pos:end="370:49">!</operator><name pos:start="370:50" pos:end="370:55"><name pos:start="370:50" pos:end="370:50">s</name><operator pos:start="370:51" pos:end="370:52">-&gt;</operator><name pos:start="370:53" pos:end="370:55">lfe</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="372:17" pos:end="372:35"><expr pos:start="372:17" pos:end="372:34"><name pos:start="372:17" pos:end="372:30"><name pos:start="372:17" pos:end="372:17">s</name><operator pos:start="372:18" pos:end="372:19">-&gt;</operator><name pos:start="372:20" pos:end="372:30">xch_present</name></name> <operator pos:start="372:32" pos:end="372:32">=</operator> <literal type="number" pos:start="372:34" pos:end="372:34">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="372:37" pos:end="372:72">/* disable further xch processing */</comment>

                <if_stmt pos:start="374:17" pos:end="382:79"><if pos:start="374:17" pos:end="380:17">if <condition pos:start="374:20" pos:end="374:27">(<expr pos:start="374:21" pos:end="374:26"><name pos:start="374:21" pos:end="374:26"><name pos:start="374:21" pos:end="374:21">s</name><operator pos:start="374:22" pos:end="374:23">-&gt;</operator><name pos:start="374:24" pos:end="374:26">lfe</name></name></expr>)</condition> <block pos:start="374:29" pos:end="380:17">{<block_content pos:start="376:21" pos:end="378:77">

                    <expr_stmt pos:start="376:21" pos:end="376:65"><expr pos:start="376:21" pos:end="376:64"><name pos:start="376:21" pos:end="376:41"><name pos:start="376:21" pos:end="376:25">avctx</name><operator pos:start="376:26" pos:end="376:27">-&gt;</operator><name pos:start="376:28" pos:end="376:41">channel_layout</name></name> <operator pos:start="376:43" pos:end="376:44">|=</operator> <name pos:start="376:46" pos:end="376:64">AV_CH_LOW_FREQUENCY</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="378:21" pos:end="378:77"><expr pos:start="378:21" pos:end="378:76"><name pos:start="378:21" pos:end="378:40"><name pos:start="378:21" pos:end="378:21">s</name><operator pos:start="378:22" pos:end="378:23">-&gt;</operator><name pos:start="378:24" pos:end="378:40">channel_order_tab</name></name> <operator pos:start="378:42" pos:end="378:42">=</operator> <name pos:start="378:44" pos:end="378:76"><name pos:start="378:44" pos:end="378:66">dca_channel_reorder_lfe</name><index pos:start="378:67" pos:end="378:76">[<expr pos:start="378:68" pos:end="378:75"><name pos:start="378:68" pos:end="378:75"><name pos:start="378:68" pos:end="378:68">s</name><operator pos:start="378:69" pos:end="378:70">-&gt;</operator><name pos:start="378:71" pos:end="378:75">amode</name></name></expr>]</index></name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="380:19" pos:end="382:79">else<block type="pseudo" pos:start="382:21" pos:end="382:79"><block_content pos:start="382:21" pos:end="382:79">

                    <expr_stmt pos:start="382:21" pos:end="382:79"><expr pos:start="382:21" pos:end="382:78"><name pos:start="382:21" pos:end="382:40"><name pos:start="382:21" pos:end="382:21">s</name><operator pos:start="382:22" pos:end="382:23">-&gt;</operator><name pos:start="382:24" pos:end="382:40">channel_order_tab</name></name> <operator pos:start="382:42" pos:end="382:42">=</operator> <name pos:start="382:44" pos:end="382:78"><name pos:start="382:44" pos:end="382:68">dca_channel_reorder_nolfe</name><index pos:start="382:69" pos:end="382:78">[<expr pos:start="382:70" pos:end="382:77"><name pos:start="382:70" pos:end="382:77"><name pos:start="382:70" pos:end="382:70">s</name><operator pos:start="382:71" pos:end="382:72">-&gt;</operator><name pos:start="382:73" pos:end="382:77">amode</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></else></if_stmt>



            <if_stmt pos:start="388:13" pos:end="400:13"><if pos:start="388:13" pos:end="400:13">if <condition pos:start="388:16" pos:end="390:66">(<expr pos:start="388:17" pos:end="390:65"><name pos:start="388:17" pos:end="388:24">channels</name> <operator pos:start="388:26" pos:end="388:26">&gt;</operator> <operator pos:start="388:28" pos:end="388:28">!</operator><operator pos:start="388:29" pos:end="388:29">!</operator><name pos:start="388:30" pos:end="388:35"><name pos:start="388:30" pos:end="388:30">s</name><operator pos:start="388:31" pos:end="388:32">-&gt;</operator><name pos:start="388:33" pos:end="388:35">lfe</name></name> <operator pos:start="388:37" pos:end="388:38">&amp;&amp;</operator>

                <name pos:start="390:17" pos:end="390:61"><name pos:start="390:17" pos:end="390:17">s</name><operator pos:start="390:18" pos:end="390:19">-&gt;</operator><name pos:start="390:20" pos:end="390:36">channel_order_tab</name><index pos:start="390:37" pos:end="390:61">[<expr pos:start="390:38" pos:end="390:60"><name pos:start="390:38" pos:end="390:45">channels</name> <operator pos:start="390:47" pos:end="390:47">-</operator> <literal type="number" pos:start="390:49" pos:end="390:51">1</literal> <operator pos:start="390:51" pos:end="390:51">-</operator> <operator pos:start="390:53" pos:end="390:53">!</operator><operator pos:start="390:54" pos:end="390:54">!</operator><name pos:start="390:55" pos:end="390:60"><name pos:start="390:55" pos:end="390:55">s</name><operator pos:start="390:56" pos:end="390:57">-&gt;</operator><name pos:start="390:58" pos:end="390:60">lfe</name></name></expr>]</index></name> <operator pos:start="390:63" pos:end="390:63">&lt;</operator> <literal type="number" pos:start="390:65" pos:end="390:65">0</literal></expr>)</condition><block type="pseudo" pos:start="395:13" pos:end="400:13"><block_content pos:start="395:13" pos:end="400:13">




            <if_stmt pos:start="395:13" pos:end="400:13"><if pos:start="395:13" pos:end="400:13">if <condition pos:start="395:16" pos:end="395:85">(<expr pos:start="395:17" pos:end="395:84"><call pos:start="395:17" pos:end="395:72"><name pos:start="395:17" pos:end="395:49">av_get_channel_layout_nb_channels</name><argument_list pos:start="395:50" pos:end="395:72">(<argument pos:start="395:51" pos:end="395:71"><expr pos:start="395:51" pos:end="395:71"><name pos:start="395:51" pos:end="395:71"><name pos:start="395:51" pos:end="395:55">avctx</name><operator pos:start="395:56" pos:end="395:57">-&gt;</operator><name pos:start="395:58" pos:end="395:71">channel_layout</name></name></expr></argument>)</argument_list></call> <operator pos:start="395:74" pos:end="395:75">!=</operator> <name pos:start="395:77" pos:end="395:84">channels</name></expr>)</condition> <block pos:start="395:87" pos:end="400:13">{<block_content pos:start="397:17" pos:end="397:160">

                <expr_stmt pos:start="397:17" pos:end="397:160"><expr pos:start="397:17" pos:end="397:159"><call pos:start="397:17" pos:end="397:159"><name pos:start="397:17" pos:end="397:22">av_log</name><argument_list pos:start="397:23" pos:end="397:159">(<argument pos:start="397:24" pos:end="397:28"><expr pos:start="397:24" pos:end="397:28"><name pos:start="397:24" pos:end="397:28">avctx</name></expr></argument>, <argument pos:start="397:31" pos:end="397:42"><expr pos:start="397:31" pos:end="397:42"><name pos:start="397:31" pos:end="397:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="397:45" pos:end="397:90"><expr pos:start="397:45" pos:end="397:90"><literal type="string" pos:start="397:45" pos:end="397:90">"Number of channels %d mismatches layout %d\n"</literal></expr></argument>, <argument pos:start="397:93" pos:end="397:100"><expr pos:start="397:93" pos:end="397:100"><name pos:start="397:93" pos:end="397:100">channels</name></expr></argument>, <argument pos:start="397:103" pos:end="397:158"><expr pos:start="397:103" pos:end="397:158"><call pos:start="397:103" pos:end="397:158"><name pos:start="397:103" pos:end="397:135">av_get_channel_layout_nb_channels</name><argument_list pos:start="397:136" pos:end="397:158">(<argument pos:start="397:137" pos:end="397:157"><expr pos:start="397:137" pos:end="397:157"><name pos:start="397:137" pos:end="397:157"><name pos:start="397:137" pos:end="397:141">avctx</name><operator pos:start="397:142" pos:end="397:143">-&gt;</operator><name pos:start="397:144" pos:end="397:157">channel_layout</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


            </block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>



            <if_stmt pos:start="404:13" pos:end="420:13"><if pos:start="404:13" pos:end="412:13">if <condition pos:start="404:16" pos:end="404:69">(<expr pos:start="404:17" pos:end="404:68"><name pos:start="404:17" pos:end="404:39"><name pos:start="404:17" pos:end="404:21">avctx</name><operator pos:start="404:22" pos:end="404:23">-&gt;</operator><name pos:start="404:24" pos:end="404:39">request_channels</name></name> <operator pos:start="404:41" pos:end="404:42">==</operator> <literal type="number" pos:start="404:44" pos:end="404:44">2</literal> <operator pos:start="404:46" pos:end="404:47">&amp;&amp;</operator> <name pos:start="404:49" pos:end="404:64"><name pos:start="404:49" pos:end="404:49">s</name><operator pos:start="404:50" pos:end="404:51">-&gt;</operator><name pos:start="404:52" pos:end="404:64">prim_channels</name></name> <operator pos:start="404:66" pos:end="404:66">&gt;</operator> <literal type="number" pos:start="404:68" pos:end="404:68">2</literal></expr>)</condition> <block pos:start="404:71" pos:end="412:13">{<block_content pos:start="406:17" pos:end="410:60">

                <expr_stmt pos:start="406:17" pos:end="406:29"><expr pos:start="406:17" pos:end="406:28"><name pos:start="406:17" pos:end="406:24">channels</name> <operator pos:start="406:26" pos:end="406:26">=</operator> <literal type="number" pos:start="406:28" pos:end="406:28">2</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="408:17" pos:end="408:39"><expr pos:start="408:17" pos:end="408:38"><name pos:start="408:17" pos:end="408:25"><name pos:start="408:17" pos:end="408:17">s</name><operator pos:start="408:18" pos:end="408:19">-&gt;</operator><name pos:start="408:20" pos:end="408:25">output</name></name> <operator pos:start="408:27" pos:end="408:27">=</operator> <name pos:start="408:29" pos:end="408:38">DCA_STEREO</name></expr>;</expr_stmt>

                <expr_stmt pos:start="410:17" pos:end="410:60"><expr pos:start="410:17" pos:end="410:59"><name pos:start="410:17" pos:end="410:37"><name pos:start="410:17" pos:end="410:21">avctx</name><operator pos:start="410:22" pos:end="410:23">-&gt;</operator><name pos:start="410:24" pos:end="410:37">channel_layout</name></name> <operator pos:start="410:39" pos:end="410:39">=</operator> <name pos:start="410:41" pos:end="410:59">AV_CH_LAYOUT_STEREO</name></expr>;</expr_stmt>

            </block_content>}</block></if>

            <if type="elseif" pos:start="414:13" pos:end="420:13">else if <condition pos:start="414:21" pos:end="414:73">(<expr pos:start="414:22" pos:end="414:72"><name pos:start="414:22" pos:end="414:50"><name pos:start="414:22" pos:end="414:26">avctx</name><operator pos:start="414:27" pos:end="414:28">-&gt;</operator><name pos:start="414:29" pos:end="414:50">request_channel_layout</name></name> <operator pos:start="414:52" pos:end="414:52">&amp;</operator> <name pos:start="414:54" pos:end="414:72">AV_CH_LAYOUT_NATIVE</name></expr>)</condition> <block pos:start="414:75" pos:end="420:13">{<block_content pos:start="416:17" pos:end="418:64">

                <decl_stmt pos:start="416:17" pos:end="416:96"><decl pos:start="416:17" pos:end="416:95"><type pos:start="416:17" pos:end="416:35"><specifier pos:start="416:17" pos:end="416:22">static</specifier> <specifier pos:start="416:24" pos:end="416:28">const</specifier> <name pos:start="416:30" pos:end="416:35">int8_t</name></type> <name pos:start="416:37" pos:end="416:63"><name pos:start="416:37" pos:end="416:60">dca_channel_order_native</name><index pos:start="416:61" pos:end="416:63">[<expr pos:start="416:62" pos:end="416:62"><literal type="number" pos:start="416:62" pos:end="416:62">9</literal></expr>]</index></name> <init pos:start="416:65" pos:end="416:95">= <expr pos:start="416:67" pos:end="416:95"><block pos:start="416:67" pos:end="416:95">{ <expr pos:start="416:69" pos:end="416:69"><literal type="number" pos:start="416:69" pos:end="416:69">0</literal></expr>, <expr pos:start="416:72" pos:end="416:72"><literal type="number" pos:start="416:72" pos:end="416:72">1</literal></expr>, <expr pos:start="416:75" pos:end="416:75"><literal type="number" pos:start="416:75" pos:end="416:75">2</literal></expr>, <expr pos:start="416:78" pos:end="416:78"><literal type="number" pos:start="416:78" pos:end="416:78">3</literal></expr>, <expr pos:start="416:81" pos:end="416:81"><literal type="number" pos:start="416:81" pos:end="416:81">4</literal></expr>, <expr pos:start="416:84" pos:end="416:84"><literal type="number" pos:start="416:84" pos:end="416:84">5</literal></expr>, <expr pos:start="416:87" pos:end="416:87"><literal type="number" pos:start="416:87" pos:end="416:87">6</literal></expr>, <expr pos:start="416:90" pos:end="416:90"><literal type="number" pos:start="416:90" pos:end="416:90">7</literal></expr>, <expr pos:start="416:93" pos:end="416:93"><literal type="number" pos:start="416:93" pos:end="416:93">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="418:17" pos:end="418:64"><expr pos:start="418:17" pos:end="418:63"><name pos:start="418:17" pos:end="418:36"><name pos:start="418:17" pos:end="418:17">s</name><operator pos:start="418:18" pos:end="418:19">-&gt;</operator><name pos:start="418:20" pos:end="418:36">channel_order_tab</name></name> <operator pos:start="418:38" pos:end="418:38">=</operator> <name pos:start="418:40" pos:end="418:63">dca_channel_order_native</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="422:13" pos:end="422:51"><expr pos:start="422:13" pos:end="422:50"><name pos:start="422:13" pos:end="422:24"><name pos:start="422:13" pos:end="422:13">s</name><operator pos:start="422:14" pos:end="422:15">-&gt;</operator><name pos:start="422:16" pos:end="422:24">lfe_index</name></name> <operator pos:start="422:26" pos:end="422:26">=</operator> <name pos:start="422:28" pos:end="422:50"><name pos:start="422:28" pos:end="422:40">dca_lfe_index</name><index pos:start="422:41" pos:end="422:50">[<expr pos:start="422:42" pos:end="422:49"><name pos:start="422:42" pos:end="422:49"><name pos:start="422:42" pos:end="422:42">s</name><operator pos:start="422:43" pos:end="422:44">-&gt;</operator><name pos:start="422:45" pos:end="422:49">amode</name></name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="424:11" pos:end="431:9">else <block pos:start="424:16" pos:end="431:9">{<block_content pos:start="426:13" pos:end="428:66">

            <expr_stmt pos:start="426:13" pos:end="428:66"><expr pos:start="426:13" pos:end="428:65"><call pos:start="426:13" pos:end="428:65"><name pos:start="426:13" pos:end="426:18">av_log</name><argument_list pos:start="426:19" pos:end="428:65">(<argument pos:start="426:20" pos:end="426:24"><expr pos:start="426:20" pos:end="426:24"><name pos:start="426:20" pos:end="426:24">avctx</name></expr></argument>, <argument pos:start="426:27" pos:end="426:38"><expr pos:start="426:27" pos:end="426:38"><name pos:start="426:27" pos:end="426:38">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="428:20" pos:end="428:54"><expr pos:start="428:20" pos:end="428:54"><literal type="string" pos:start="428:20" pos:end="428:54">"Non standard configuration %d !\n"</literal></expr></argument>, <argument pos:start="428:57" pos:end="428:64"><expr pos:start="428:57" pos:end="428:64"><name pos:start="428:57" pos:end="428:64"><name pos:start="428:57" pos:end="428:57">s</name><operator pos:start="428:58" pos:end="428:59">-&gt;</operator><name pos:start="428:60" pos:end="428:64">amode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="435:9" pos:end="435:34"><expr pos:start="435:9" pos:end="435:33"><name pos:start="435:9" pos:end="435:29"><name pos:start="435:9" pos:end="435:9">s</name><operator pos:start="435:10" pos:end="435:11">-&gt;</operator><name pos:start="435:12" pos:end="435:29">xxch_dmix_embedded</name></name> <operator pos:start="435:31" pos:end="435:31">=</operator> <literal type="number" pos:start="435:33" pos:end="435:33">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="437:7" pos:end="556:5">else <block pos:start="437:12" pos:end="556:5">{<block_content pos:start="441:9" pos:end="554:49">

        <comment type="block" pos:start="439:9" pos:end="439:77">/* we only get here if an XXCH channel set can be added to the mix */</comment>

        <expr_stmt pos:start="441:9" pos:end="441:44"><expr pos:start="441:9" pos:end="441:43"><name pos:start="441:9" pos:end="441:20">channel_mask</name> <operator pos:start="441:22" pos:end="441:22">=</operator> <name pos:start="441:24" pos:end="441:43"><name pos:start="441:24" pos:end="441:24">s</name><operator pos:start="441:25" pos:end="441:26">-&gt;</operator><name pos:start="441:27" pos:end="441:43">xxch_core_spkmask</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="445:9" pos:end="471:9"><if pos:start="445:9" pos:end="461:9">if <condition pos:start="445:12" pos:end="447:58">(<expr pos:start="445:13" pos:end="447:57"><name pos:start="445:13" pos:end="445:35"><name pos:start="445:13" pos:end="445:17">avctx</name><operator pos:start="445:18" pos:end="445:19">-&gt;</operator><name pos:start="445:20" pos:end="445:35">request_channels</name></name> <operator pos:start="445:37" pos:end="445:37">&gt;</operator> <literal type="number" pos:start="445:39" pos:end="445:39">0</literal>

            <operator pos:start="447:13" pos:end="447:14">&amp;&amp;</operator> <name pos:start="447:16" pos:end="447:38"><name pos:start="447:16" pos:end="447:20">avctx</name><operator pos:start="447:21" pos:end="447:22">-&gt;</operator><name pos:start="447:23" pos:end="447:38">request_channels</name></name> <operator pos:start="447:40" pos:end="447:40">&lt;</operator> <name pos:start="447:42" pos:end="447:57"><name pos:start="447:42" pos:end="447:42">s</name><operator pos:start="447:43" pos:end="447:44">-&gt;</operator><name pos:start="447:45" pos:end="447:57">prim_channels</name></name></expr>)</condition> <block pos:start="447:60" pos:end="461:9">{<block_content pos:start="449:13" pos:end="459:13">

            <expr_stmt pos:start="449:13" pos:end="449:52"><expr pos:start="449:13" pos:end="449:51"><name pos:start="449:13" pos:end="449:20">channels</name> <operator pos:start="449:22" pos:end="449:22">=</operator> <name pos:start="449:24" pos:end="449:40">num_core_channels</name> <operator pos:start="449:42" pos:end="449:42">+</operator> <operator pos:start="449:44" pos:end="449:44">!</operator><operator pos:start="449:45" pos:end="449:45">!</operator><name pos:start="449:46" pos:end="449:51"><name pos:start="449:46" pos:end="449:46">s</name><operator pos:start="449:47" pos:end="449:48">-&gt;</operator><name pos:start="449:49" pos:end="449:51">lfe</name></name></expr>;</expr_stmt>

            <for pos:start="451:13" pos:end="459:13">for <control pos:start="451:17" pos:end="453:78">(<init pos:start="451:18" pos:end="451:23"><expr pos:start="451:18" pos:end="451:22"><name pos:start="451:18" pos:end="451:18">i</name> <operator pos:start="451:20" pos:end="451:20">=</operator> <literal type="number" pos:start="451:22" pos:end="451:22">0</literal></expr>;</init> <condition pos:start="451:25" pos:end="453:73"><expr pos:start="451:25" pos:end="453:72"><name pos:start="451:25" pos:end="451:25">i</name> <operator pos:start="451:27" pos:end="451:27">&lt;</operator> <name pos:start="451:29" pos:end="451:41"><name pos:start="451:29" pos:end="451:29">s</name><operator pos:start="451:30" pos:end="451:31">-&gt;</operator><name pos:start="451:32" pos:end="451:41">xxch_chset</name></name> <operator pos:start="451:43" pos:end="451:44">&amp;&amp;</operator> <name pos:start="451:46" pos:end="451:53">channels</name> <operator pos:start="451:55" pos:end="451:55">+</operator> <name pos:start="451:57" pos:end="451:76"><name pos:start="451:57" pos:end="451:57">s</name><operator pos:start="451:58" pos:end="451:59">-&gt;</operator><name pos:start="451:60" pos:end="451:73">xxch_chset_nch</name><index pos:start="451:74" pos:end="451:76">[<expr pos:start="451:75" pos:end="451:75"><name pos:start="451:75" pos:end="451:75">i</name></expr>]</index></name>

                                              <operator pos:start="453:47" pos:end="453:48">&lt;=</operator> <name pos:start="453:50" pos:end="453:72"><name pos:start="453:50" pos:end="453:54">avctx</name><operator pos:start="453:55" pos:end="453:56">-&gt;</operator><name pos:start="453:57" pos:end="453:72">request_channels</name></name></expr>;</condition> <incr pos:start="453:75" pos:end="453:77"><expr pos:start="453:75" pos:end="453:77"><name pos:start="453:75" pos:end="453:75">i</name><operator pos:start="453:76" pos:end="453:77">++</operator></expr></incr>)</control> <block pos:start="453:80" pos:end="459:13">{<block_content pos:start="455:17" pos:end="457:53">

                <expr_stmt pos:start="455:17" pos:end="455:49"><expr pos:start="455:17" pos:end="455:48"><name pos:start="455:17" pos:end="455:24">channels</name> <operator pos:start="455:26" pos:end="455:27">+=</operator> <name pos:start="455:29" pos:end="455:48"><name pos:start="455:29" pos:end="455:29">s</name><operator pos:start="455:30" pos:end="455:31">-&gt;</operator><name pos:start="455:32" pos:end="455:45">xxch_chset_nch</name><index pos:start="455:46" pos:end="455:48">[<expr pos:start="455:47" pos:end="455:47"><name pos:start="455:47" pos:end="455:47">i</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="457:17" pos:end="457:53"><expr pos:start="457:17" pos:end="457:52"><name pos:start="457:17" pos:end="457:28">channel_mask</name> <operator pos:start="457:30" pos:end="457:31">|=</operator> <name pos:start="457:33" pos:end="457:52"><name pos:start="457:33" pos:end="457:33">s</name><operator pos:start="457:34" pos:end="457:35">-&gt;</operator><name pos:start="457:36" pos:end="457:49">xxch_spk_masks</name><index pos:start="457:50" pos:end="457:52">[<expr pos:start="457:51" pos:end="457:51"><name pos:start="457:51" pos:end="457:51">i</name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <else pos:start="461:11" pos:end="471:9">else <block pos:start="461:16" pos:end="471:9">{<block_content pos:start="463:13" pos:end="469:13">

            <expr_stmt pos:start="463:13" pos:end="463:51"><expr pos:start="463:13" pos:end="463:50"><name pos:start="463:13" pos:end="463:20">channels</name> <operator pos:start="463:22" pos:end="463:22">=</operator> <name pos:start="463:24" pos:end="463:39"><name pos:start="463:24" pos:end="463:24">s</name><operator pos:start="463:25" pos:end="463:26">-&gt;</operator><name pos:start="463:27" pos:end="463:39">prim_channels</name></name> <operator pos:start="463:41" pos:end="463:41">+</operator> <operator pos:start="463:43" pos:end="463:43">!</operator><operator pos:start="463:44" pos:end="463:44">!</operator><name pos:start="463:45" pos:end="463:50"><name pos:start="463:45" pos:end="463:45">s</name><operator pos:start="463:46" pos:end="463:47">-&gt;</operator><name pos:start="463:48" pos:end="463:50">lfe</name></name></expr>;</expr_stmt>

            <for pos:start="465:13" pos:end="469:13">for <control pos:start="465:17" pos:end="465:47">(<init pos:start="465:18" pos:end="465:23"><expr pos:start="465:18" pos:end="465:22"><name pos:start="465:18" pos:end="465:18">i</name> <operator pos:start="465:20" pos:end="465:20">=</operator> <literal type="number" pos:start="465:22" pos:end="465:22">0</literal></expr>;</init> <condition pos:start="465:25" pos:end="465:42"><expr pos:start="465:25" pos:end="465:41"><name pos:start="465:25" pos:end="465:25">i</name> <operator pos:start="465:27" pos:end="465:27">&lt;</operator> <name pos:start="465:29" pos:end="465:41"><name pos:start="465:29" pos:end="465:29">s</name><operator pos:start="465:30" pos:end="465:31">-&gt;</operator><name pos:start="465:32" pos:end="465:41">xxch_chset</name></name></expr>;</condition> <incr pos:start="465:44" pos:end="465:46"><expr pos:start="465:44" pos:end="465:46"><name pos:start="465:44" pos:end="465:44">i</name><operator pos:start="465:45" pos:end="465:46">++</operator></expr></incr>)</control> <block pos:start="465:49" pos:end="469:13">{<block_content pos:start="467:17" pos:end="467:53">

                <expr_stmt pos:start="467:17" pos:end="467:53"><expr pos:start="467:17" pos:end="467:52"><name pos:start="467:17" pos:end="467:28">channel_mask</name> <operator pos:start="467:30" pos:end="467:31">|=</operator> <name pos:start="467:33" pos:end="467:52"><name pos:start="467:33" pos:end="467:33">s</name><operator pos:start="467:34" pos:end="467:35">-&gt;</operator><name pos:start="467:36" pos:end="467:49">xxch_spk_masks</name><index pos:start="467:50" pos:end="467:52">[<expr pos:start="467:51" pos:end="467:51"><name pos:start="467:51" pos:end="467:51">i</name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="475:9" pos:end="475:77">/* Given the DTS spec'ed channel mask, generate an avcodec version */</comment>

        <expr_stmt pos:start="477:9" pos:end="477:27"><expr pos:start="477:9" pos:end="477:26"><name pos:start="477:9" pos:end="477:22">channel_layout</name> <operator pos:start="477:24" pos:end="477:24">=</operator> <literal type="number" pos:start="477:26" pos:end="477:26">0</literal></expr>;</expr_stmt>

        <for pos:start="479:9" pos:end="487:9">for <control pos:start="479:13" pos:end="479:52">(<init pos:start="479:14" pos:end="479:19"><expr pos:start="479:14" pos:end="479:18"><name pos:start="479:14" pos:end="479:14">i</name> <operator pos:start="479:16" pos:end="479:16">=</operator> <literal type="number" pos:start="479:18" pos:end="479:18">0</literal></expr>;</init> <condition pos:start="479:21" pos:end="479:47"><expr pos:start="479:21" pos:end="479:46"><name pos:start="479:21" pos:end="479:21">i</name> <operator pos:start="479:23" pos:end="479:23">&lt;</operator> <name pos:start="479:25" pos:end="479:46"><name pos:start="479:25" pos:end="479:25">s</name><operator pos:start="479:26" pos:end="479:27">-&gt;</operator><name pos:start="479:28" pos:end="479:46">xxch_nbits_spk_mask</name></name></expr>;</condition> <incr pos:start="479:49" pos:end="479:51"><expr pos:start="479:49" pos:end="479:51"><operator pos:start="479:49" pos:end="479:50">++</operator><name pos:start="479:51" pos:end="479:51">i</name></expr></incr>)</control> <block pos:start="479:54" pos:end="487:9">{<block_content pos:start="481:13" pos:end="485:13">

            <if_stmt pos:start="481:13" pos:end="485:13"><if pos:start="481:13" pos:end="485:13">if <condition pos:start="481:16" pos:end="481:40">(<expr pos:start="481:17" pos:end="481:39"><name pos:start="481:17" pos:end="481:28">channel_mask</name> <operator pos:start="481:30" pos:end="481:30">&amp;</operator> <operator pos:start="481:32" pos:end="481:32">(</operator><literal type="number" pos:start="481:33" pos:end="481:33">1</literal> <operator pos:start="481:35" pos:end="481:36">&lt;&lt;</operator> <name pos:start="481:38" pos:end="481:38">i</name><operator pos:start="481:39" pos:end="481:39">)</operator></expr>)</condition> <block pos:start="481:42" pos:end="485:13">{<block_content pos:start="483:17" pos:end="483:56">

                <expr_stmt pos:start="483:17" pos:end="483:56"><expr pos:start="483:17" pos:end="483:55"><name pos:start="483:17" pos:end="483:30">channel_layout</name> <operator pos:start="483:32" pos:end="483:33">|=</operator> <name pos:start="483:35" pos:end="483:55"><name pos:start="483:35" pos:end="483:52">map_xxch_to_native</name><index pos:start="483:53" pos:end="483:55">[<expr pos:start="483:54" pos:end="483:54"><name pos:start="483:54" pos:end="483:54">i</name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <comment type="block" pos:start="491:9" pos:end="493:78">/* make sure that we have managed to get equivelant dts/avcodec channel

         * masks in some sense -- unfortunately some channels could overlap */</comment>

        <if_stmt pos:start="495:9" pos:end="502:9"><if pos:start="495:9" pos:end="502:9">if <condition pos:start="495:12" pos:end="495:69">(<expr pos:start="495:13" pos:end="495:68"><call pos:start="495:13" pos:end="495:37"><name pos:start="495:13" pos:end="495:23">av_popcount</name><argument_list pos:start="495:24" pos:end="495:37">(<argument pos:start="495:25" pos:end="495:36"><expr pos:start="495:25" pos:end="495:36"><name pos:start="495:25" pos:end="495:36">channel_mask</name></expr></argument>)</argument_list></call> <operator pos:start="495:39" pos:end="495:40">!=</operator> <call pos:start="495:42" pos:end="495:68"><name pos:start="495:42" pos:end="495:52">av_popcount</name><argument_list pos:start="495:53" pos:end="495:68">(<argument pos:start="495:54" pos:end="495:67"><expr pos:start="495:54" pos:end="495:67"><name pos:start="495:54" pos:end="495:67">channel_layout</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="495:71" pos:end="502:9">{<block_content pos:start="497:13" pos:end="499:75">

            <expr_stmt pos:start="497:13" pos:end="499:75"><expr pos:start="497:13" pos:end="499:74"><call pos:start="497:13" pos:end="499:74"><name pos:start="497:13" pos:end="497:18">av_log</name><argument_list pos:start="497:19" pos:end="499:74">(<argument pos:start="497:20" pos:end="497:24"><expr pos:start="497:20" pos:end="497:24"><name pos:start="497:20" pos:end="497:24">avctx</name></expr></argument>, <argument pos:start="497:27" pos:end="497:38"><expr pos:start="497:27" pos:end="497:38"><name pos:start="497:27" pos:end="497:38">AV_LOG_DEBUG</name></expr></argument>,

                   <argument pos:start="499:20" pos:end="499:73"><expr pos:start="499:20" pos:end="499:73"><literal type="string" pos:start="499:20" pos:end="499:73">"DTS-XXCH: Inconsistant avcodec/dts channel layouts\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="506:9" pos:end="506:47"><expr pos:start="506:9" pos:end="506:46"><name pos:start="506:9" pos:end="506:29"><name pos:start="506:9" pos:end="506:13">avctx</name><operator pos:start="506:14" pos:end="506:15">-&gt;</operator><name pos:start="506:16" pos:end="506:29">channel_layout</name></name> <operator pos:start="506:31" pos:end="506:31">=</operator> <name pos:start="506:33" pos:end="506:46">channel_layout</name></expr>;</expr_stmt>



        <if_stmt pos:start="510:9" pos:end="550:9"><if pos:start="510:9" pos:end="540:9">if <condition pos:start="510:12" pos:end="510:67">(<expr pos:start="510:13" pos:end="510:66"><operator pos:start="510:13" pos:end="510:13">!</operator><operator pos:start="510:14" pos:end="510:14">(</operator><name pos:start="510:15" pos:end="510:43"><name pos:start="510:15" pos:end="510:19">avctx</name><operator pos:start="510:20" pos:end="510:21">-&gt;</operator><name pos:start="510:22" pos:end="510:43">request_channel_layout</name></name> <operator pos:start="510:45" pos:end="510:45">&amp;</operator> <name pos:start="510:47" pos:end="510:65">AV_CH_LAYOUT_NATIVE</name><operator pos:start="510:66" pos:end="510:66">)</operator></expr>)</condition> <block pos:start="510:69" pos:end="540:9">{<block_content pos:start="514:13" pos:end="538:81">

            <comment type="block" pos:start="512:13" pos:end="512:57">/* Estimate DTS --&gt; avcodec ordering table */</comment>

            <for pos:start="514:13" pos:end="534:13">for <control pos:start="514:17" pos:end="514:67">(<init pos:start="514:18" pos:end="514:35"><expr pos:start="514:18" pos:end="514:27"><name pos:start="514:18" pos:end="514:22">chset</name> <operator pos:start="514:24" pos:end="514:24">=</operator> <operator pos:start="514:26" pos:end="514:26">-</operator><literal type="number" pos:start="514:27" pos:end="514:27">1</literal></expr><operator pos:start="514:28" pos:end="514:28">,</operator> <expr pos:start="514:30" pos:end="514:34"><name pos:start="514:30" pos:end="514:30">j</name> <operator pos:start="514:32" pos:end="514:32">=</operator> <literal type="number" pos:start="514:34" pos:end="514:34">0</literal></expr>;</init> <condition pos:start="514:37" pos:end="514:58"><expr pos:start="514:37" pos:end="514:57"><name pos:start="514:37" pos:end="514:41">chset</name> <operator pos:start="514:43" pos:end="514:43">&lt;</operator> <name pos:start="514:45" pos:end="514:57"><name pos:start="514:45" pos:end="514:45">s</name><operator pos:start="514:46" pos:end="514:47">-&gt;</operator><name pos:start="514:48" pos:end="514:57">xxch_chset</name></name></expr>;</condition> <incr pos:start="514:60" pos:end="514:66"><expr pos:start="514:60" pos:end="514:66"><operator pos:start="514:60" pos:end="514:61">++</operator><name pos:start="514:62" pos:end="514:66">chset</name></expr></incr>)</control> <block pos:start="514:69" pos:end="534:13">{<block_content pos:start="516:17" pos:end="532:17">

                <expr_stmt pos:start="516:17" pos:end="518:57"><expr pos:start="516:17" pos:end="518:56"><name pos:start="516:17" pos:end="516:20">mask</name> <operator pos:start="516:22" pos:end="516:22">=</operator> <ternary pos:start="516:24" pos:end="518:56"><condition pos:start="516:24" pos:end="516:35"><expr pos:start="516:24" pos:end="516:33"><name pos:start="516:24" pos:end="516:28">chset</name> <operator pos:start="516:30" pos:end="516:31">&gt;=</operator> <literal type="number" pos:start="516:33" pos:end="516:33">0</literal></expr> ?</condition><then pos:start="516:37" pos:end="516:60"> <expr pos:start="516:37" pos:end="516:60"><name pos:start="516:37" pos:end="516:60"><name pos:start="516:37" pos:end="516:37">s</name><operator pos:start="516:38" pos:end="516:39">-&gt;</operator><name pos:start="516:40" pos:end="516:53">xxch_spk_masks</name><index pos:start="516:54" pos:end="516:60">[<expr pos:start="516:55" pos:end="516:59"><name pos:start="516:55" pos:end="516:59">chset</name></expr>]</index></name></expr>

                                  </then><else pos:start="518:35" pos:end="518:56">: <expr pos:start="518:37" pos:end="518:56"><name pos:start="518:37" pos:end="518:56"><name pos:start="518:37" pos:end="518:37">s</name><operator pos:start="518:38" pos:end="518:39">-&gt;</operator><name pos:start="518:40" pos:end="518:56">xxch_core_spkmask</name></name></expr></else></ternary></expr>;</expr_stmt>

                <for pos:start="520:17" pos:end="532:17">for <control pos:start="520:21" pos:end="520:60">(<init pos:start="520:22" pos:end="520:27"><expr pos:start="520:22" pos:end="520:26"><name pos:start="520:22" pos:end="520:22">i</name> <operator pos:start="520:24" pos:end="520:24">=</operator> <literal type="number" pos:start="520:26" pos:end="520:26">0</literal></expr>;</init> <condition pos:start="520:29" pos:end="520:55"><expr pos:start="520:29" pos:end="520:54"><name pos:start="520:29" pos:end="520:29">i</name> <operator pos:start="520:31" pos:end="520:31">&lt;</operator> <name pos:start="520:33" pos:end="520:54"><name pos:start="520:33" pos:end="520:33">s</name><operator pos:start="520:34" pos:end="520:35">-&gt;</operator><name pos:start="520:36" pos:end="520:54">xxch_nbits_spk_mask</name></name></expr>;</condition> <incr pos:start="520:57" pos:end="520:59"><expr pos:start="520:57" pos:end="520:59"><name pos:start="520:57" pos:end="520:57">i</name><operator pos:start="520:58" pos:end="520:59">++</operator></expr></incr>)</control> <block pos:start="520:62" pos:end="532:17">{<block_content pos:start="522:21" pos:end="530:21">

                    <if_stmt pos:start="522:21" pos:end="530:21"><if pos:start="522:21" pos:end="530:21">if <condition pos:start="522:24" pos:end="522:75">(<expr pos:start="522:25" pos:end="522:74"><name pos:start="522:25" pos:end="522:28">mask</name> <operator pos:start="522:30" pos:end="522:30">&amp;</operator> <operator pos:start="522:32" pos:end="522:32">~</operator><operator pos:start="522:33" pos:end="522:33">(</operator><name pos:start="522:34" pos:end="522:46">DCA_XXCH_LFE1</name> <operator pos:start="522:48" pos:end="522:48">|</operator> <name pos:start="522:50" pos:end="522:62">DCA_XXCH_LFE2</name><operator pos:start="522:63" pos:end="522:63">)</operator> <operator pos:start="522:65" pos:end="522:65">&amp;</operator> <operator pos:start="522:67" pos:end="522:67">(</operator><literal type="number" pos:start="522:68" pos:end="522:68">1</literal> <operator pos:start="522:70" pos:end="522:71">&lt;&lt;</operator> <name pos:start="522:73" pos:end="522:73">i</name><operator pos:start="522:74" pos:end="522:74">)</operator></expr>)</condition> <block pos:start="522:77" pos:end="530:21">{<block_content pos:start="524:25" pos:end="528:54">

                        <expr_stmt pos:start="524:25" pos:end="524:53"><expr pos:start="524:25" pos:end="524:52"><name pos:start="524:25" pos:end="524:28">lavc</name> <operator pos:start="524:30" pos:end="524:30">=</operator> <name pos:start="524:32" pos:end="524:52"><name pos:start="524:32" pos:end="524:49">map_xxch_to_native</name><index pos:start="524:50" pos:end="524:52">[<expr pos:start="524:51" pos:end="524:51"><name pos:start="524:51" pos:end="524:51">i</name></expr>]</index></name></expr>;</expr_stmt>

                        <expr_stmt pos:start="526:25" pos:end="526:72"><expr pos:start="526:25" pos:end="526:71"><name pos:start="526:25" pos:end="526:28">posn</name> <operator pos:start="526:30" pos:end="526:30">=</operator> <call pos:start="526:32" pos:end="526:71"><name pos:start="526:32" pos:end="526:42">av_popcount</name><argument_list pos:start="526:43" pos:end="526:71">(<argument pos:start="526:44" pos:end="526:70"><expr pos:start="526:44" pos:end="526:70"><name pos:start="526:44" pos:end="526:57">channel_layout</name> <operator pos:start="526:59" pos:end="526:59">&amp;</operator> <operator pos:start="526:61" pos:end="526:61">(</operator><name pos:start="526:62" pos:end="526:65">lavc</name> <operator pos:start="526:67" pos:end="526:67">-</operator> <literal type="number" pos:start="526:69" pos:end="526:69">1</literal><operator pos:start="526:70" pos:end="526:70">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="528:25" pos:end="528:54"><expr pos:start="528:25" pos:end="528:53"><name pos:start="528:25" pos:end="528:46"><name pos:start="528:25" pos:end="528:25">s</name><operator pos:start="528:26" pos:end="528:27">-&gt;</operator><name pos:start="528:28" pos:end="528:41">xxch_order_tab</name><index pos:start="528:42" pos:end="528:46">[<expr pos:start="528:43" pos:end="528:45"><name pos:start="528:43" pos:end="528:43">j</name><operator pos:start="528:44" pos:end="528:45">++</operator></expr>]</index></name> <operator pos:start="528:48" pos:end="528:48">=</operator> <name pos:start="528:50" pos:end="528:53">posn</name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></for>



            <expr_stmt pos:start="538:13" pos:end="538:81"><expr pos:start="538:13" pos:end="538:80"><name pos:start="538:13" pos:end="538:24"><name pos:start="538:13" pos:end="538:13">s</name><operator pos:start="538:14" pos:end="538:15">-&gt;</operator><name pos:start="538:16" pos:end="538:24">lfe_index</name></name> <operator pos:start="538:26" pos:end="538:26">=</operator> <call pos:start="538:28" pos:end="538:80"><name pos:start="538:28" pos:end="538:38">av_popcount</name><argument_list pos:start="538:39" pos:end="538:80">(<argument pos:start="538:40" pos:end="538:79"><expr pos:start="538:40" pos:end="538:79"><name pos:start="538:40" pos:end="538:53">channel_layout</name> <operator pos:start="538:55" pos:end="538:55">&amp;</operator> <operator pos:start="538:57" pos:end="538:57">(</operator><name pos:start="538:58" pos:end="538:76">AV_CH_LOW_FREQUENCY</name><operator pos:start="538:77" pos:end="538:77">-</operator><literal type="number" pos:start="538:78" pos:end="538:78">1</literal><operator pos:start="538:79" pos:end="538:79">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="540:11" pos:end="550:9">else <block pos:start="540:16" pos:end="550:9">{<block_content pos:start="542:13" pos:end="548:40"> <comment type="block" pos:start="540:18" pos:end="540:38">/* native ordering */</comment>

            <for pos:start="542:13" pos:end="544:41">for <control pos:start="542:17" pos:end="542:42">(<init pos:start="542:18" pos:end="542:23"><expr pos:start="542:18" pos:end="542:22"><name pos:start="542:18" pos:end="542:18">i</name> <operator pos:start="542:20" pos:end="542:20">=</operator> <literal type="number" pos:start="542:22" pos:end="542:22">0</literal></expr>;</init> <condition pos:start="542:25" pos:end="542:37"><expr pos:start="542:25" pos:end="542:36"><name pos:start="542:25" pos:end="542:25">i</name> <operator pos:start="542:27" pos:end="542:27">&lt;</operator> <name pos:start="542:29" pos:end="542:36">channels</name></expr>;</condition> <incr pos:start="542:39" pos:end="542:41"><expr pos:start="542:39" pos:end="542:41"><name pos:start="542:39" pos:end="542:39">i</name><operator pos:start="542:40" pos:end="542:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="544:17" pos:end="544:41"><block_content pos:start="544:17" pos:end="544:41">

                <expr_stmt pos:start="544:17" pos:end="544:41"><expr pos:start="544:17" pos:end="544:40"><name pos:start="544:17" pos:end="544:36"><name pos:start="544:17" pos:end="544:17">s</name><operator pos:start="544:18" pos:end="544:19">-&gt;</operator><name pos:start="544:20" pos:end="544:33">xxch_order_tab</name><index pos:start="544:34" pos:end="544:36">[<expr pos:start="544:35" pos:end="544:35"><name pos:start="544:35" pos:end="544:35">i</name></expr>]</index></name> <operator pos:start="544:38" pos:end="544:38">=</operator> <name pos:start="544:40" pos:end="544:40">i</name></expr>;</expr_stmt></block_content></block></for>



            <expr_stmt pos:start="548:13" pos:end="548:40"><expr pos:start="548:13" pos:end="548:39"><name pos:start="548:13" pos:end="548:24"><name pos:start="548:13" pos:end="548:13">s</name><operator pos:start="548:14" pos:end="548:15">-&gt;</operator><name pos:start="548:16" pos:end="548:24">lfe_index</name></name> <operator pos:start="548:26" pos:end="548:26">=</operator> <name pos:start="548:28" pos:end="548:35">channels</name> <operator pos:start="548:37" pos:end="548:37">-</operator> <literal type="number" pos:start="548:39" pos:end="548:39">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="554:9" pos:end="554:49"><expr pos:start="554:9" pos:end="554:48"><name pos:start="554:9" pos:end="554:28"><name pos:start="554:9" pos:end="554:9">s</name><operator pos:start="554:10" pos:end="554:11">-&gt;</operator><name pos:start="554:12" pos:end="554:28">channel_order_tab</name></name> <operator pos:start="554:30" pos:end="554:30">=</operator> <name pos:start="554:32" pos:end="554:48"><name pos:start="554:32" pos:end="554:32">s</name><operator pos:start="554:33" pos:end="554:34">-&gt;</operator><name pos:start="554:35" pos:end="554:48">xxch_order_tab</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="560:5" pos:end="568:5"><if pos:start="560:5" pos:end="568:5">if <condition pos:start="560:8" pos:end="560:36">(<expr pos:start="560:9" pos:end="560:35"><name pos:start="560:9" pos:end="560:23"><name pos:start="560:9" pos:end="560:13">avctx</name><operator pos:start="560:14" pos:end="560:15">-&gt;</operator><name pos:start="560:16" pos:end="560:23">channels</name></name> <operator pos:start="560:25" pos:end="560:26">!=</operator> <name pos:start="560:28" pos:end="560:35">channels</name></expr>)</condition> <block pos:start="560:38" pos:end="568:5">{<block_content pos:start="562:9" pos:end="566:35">

        <if_stmt pos:start="562:9" pos:end="564:124"><if pos:start="562:9" pos:end="564:124">if <condition pos:start="562:12" pos:end="562:28">(<expr pos:start="562:13" pos:end="562:27"><name pos:start="562:13" pos:end="562:27"><name pos:start="562:13" pos:end="562:17">avctx</name><operator pos:start="562:18" pos:end="562:19">-&gt;</operator><name pos:start="562:20" pos:end="562:27">channels</name></name></expr>)</condition><block type="pseudo" pos:start="564:13" pos:end="564:124"><block_content pos:start="564:13" pos:end="564:124">

            <expr_stmt pos:start="564:13" pos:end="564:124"><expr pos:start="564:13" pos:end="564:123"><call pos:start="564:13" pos:end="564:123"><name pos:start="564:13" pos:end="564:18">av_log</name><argument_list pos:start="564:19" pos:end="564:123">(<argument pos:start="564:20" pos:end="564:24"><expr pos:start="564:20" pos:end="564:24"><name pos:start="564:20" pos:end="564:24">avctx</name></expr></argument>, <argument pos:start="564:27" pos:end="564:37"><expr pos:start="564:27" pos:end="564:37"><name pos:start="564:27" pos:end="564:37">AV_LOG_INFO</name></expr></argument>, <argument pos:start="564:40" pos:end="564:95"><expr pos:start="564:40" pos:end="564:95"><literal type="string" pos:start="564:40" pos:end="564:95">"Number of channels changed in DCA decoder (%d -&gt; %d)\n"</literal></expr></argument>, <argument pos:start="564:98" pos:end="564:112"><expr pos:start="564:98" pos:end="564:112"><name pos:start="564:98" pos:end="564:112"><name pos:start="564:98" pos:end="564:102">avctx</name><operator pos:start="564:103" pos:end="564:104">-&gt;</operator><name pos:start="564:105" pos:end="564:112">channels</name></name></expr></argument>, <argument pos:start="564:115" pos:end="564:122"><expr pos:start="564:115" pos:end="564:122"><name pos:start="564:115" pos:end="564:122">channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="566:9" pos:end="566:35"><expr pos:start="566:9" pos:end="566:34"><name pos:start="566:9" pos:end="566:23"><name pos:start="566:9" pos:end="566:13">avctx</name><operator pos:start="566:14" pos:end="566:15">-&gt;</operator><name pos:start="566:16" pos:end="566:23">channels</name></name> <operator pos:start="566:25" pos:end="566:25">=</operator> <name pos:start="566:27" pos:end="566:34">channels</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="572:5" pos:end="572:27">/* get output buffer */</comment>

    <expr_stmt pos:start="574:5" pos:end="574:55"><expr pos:start="574:5" pos:end="574:54"><name pos:start="574:5" pos:end="574:23"><name pos:start="574:5" pos:end="574:5">s</name><operator pos:start="574:6" pos:end="574:7">-&gt;</operator><name pos:start="574:8" pos:end="574:12">frame</name><operator pos:start="574:13" pos:end="574:13">.</operator><name pos:start="574:14" pos:end="574:23">nb_samples</name></name> <operator pos:start="574:25" pos:end="574:25">=</operator> <literal type="number" pos:start="574:27" pos:end="574:29">256</literal> <operator pos:start="574:31" pos:end="574:31">*</operator> <operator pos:start="574:33" pos:end="574:33">(</operator><name pos:start="574:34" pos:end="574:49"><name pos:start="574:34" pos:end="574:34">s</name><operator pos:start="574:35" pos:end="574:36">-&gt;</operator><name pos:start="574:37" pos:end="574:49">sample_blocks</name></name> <operator pos:start="574:51" pos:end="574:51">/</operator> <literal type="number" pos:start="574:53" pos:end="574:53">8</literal><operator pos:start="574:54" pos:end="574:54">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="576:5" pos:end="582:5"><if pos:start="576:5" pos:end="582:5">if <condition pos:start="576:8" pos:end="576:52">(<expr pos:start="576:9" pos:end="576:51"><operator pos:start="576:9" pos:end="576:9">(</operator><name pos:start="576:10" pos:end="576:12">ret</name> <operator pos:start="576:14" pos:end="576:14">=</operator> <call pos:start="576:16" pos:end="576:46"><name pos:start="576:16" pos:end="576:28">ff_get_buffer</name><argument_list pos:start="576:29" pos:end="576:46">(<argument pos:start="576:30" pos:end="576:34"><expr pos:start="576:30" pos:end="576:34"><name pos:start="576:30" pos:end="576:34">avctx</name></expr></argument>, <argument pos:start="576:37" pos:end="576:45"><expr pos:start="576:37" pos:end="576:45"><operator pos:start="576:37" pos:end="576:37">&amp;</operator><name pos:start="576:38" pos:end="576:45"><name pos:start="576:38" pos:end="576:38">s</name><operator pos:start="576:39" pos:end="576:40">-&gt;</operator><name pos:start="576:41" pos:end="576:45">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="576:47" pos:end="576:47">)</operator> <operator pos:start="576:49" pos:end="576:49">&lt;</operator> <literal type="number" pos:start="576:51" pos:end="576:51">0</literal></expr>)</condition> <block pos:start="576:54" pos:end="582:5">{<block_content pos:start="578:9" pos:end="580:19">

        <expr_stmt pos:start="578:9" pos:end="578:61"><expr pos:start="578:9" pos:end="578:60"><call pos:start="578:9" pos:end="578:60"><name pos:start="578:9" pos:end="578:14">av_log</name><argument_list pos:start="578:15" pos:end="578:60">(<argument pos:start="578:16" pos:end="578:20"><expr pos:start="578:16" pos:end="578:20"><name pos:start="578:16" pos:end="578:20">avctx</name></expr></argument>, <argument pos:start="578:23" pos:end="578:34"><expr pos:start="578:23" pos:end="578:34"><name pos:start="578:23" pos:end="578:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="578:37" pos:end="578:59"><expr pos:start="578:37" pos:end="578:59"><literal type="string" pos:start="578:37" pos:end="578:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="580:9" pos:end="580:19">return <expr pos:start="580:16" pos:end="580:18"><name pos:start="580:16" pos:end="580:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="584:5" pos:end="584:53"><expr pos:start="584:5" pos:end="584:52"><name pos:start="584:5" pos:end="584:15">samples_flt</name> <operator pos:start="584:17" pos:end="584:17">=</operator> <operator pos:start="584:19" pos:end="584:19">(</operator><name pos:start="584:20" pos:end="584:24">float</name>  <operator pos:start="584:27" pos:end="584:27">*</operator><operator pos:start="584:28" pos:end="584:28">*</operator><operator pos:start="584:29" pos:end="584:29">)</operator> <name pos:start="584:31" pos:end="584:52"><name pos:start="584:31" pos:end="584:31">s</name><operator pos:start="584:32" pos:end="584:33">-&gt;</operator><name pos:start="584:34" pos:end="584:38">frame</name><operator pos:start="584:39" pos:end="584:39">.</operator><name pos:start="584:40" pos:end="584:52">extended_data</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="588:5" pos:end="588:58">/* allocate buffer for extra channels if downmixing */</comment>

    <if_stmt pos:start="590:5" pos:end="626:5"><if pos:start="590:5" pos:end="626:5">if <condition pos:start="590:8" pos:end="590:40">(<expr pos:start="590:9" pos:end="590:39"><name pos:start="590:9" pos:end="590:23"><name pos:start="590:9" pos:end="590:13">avctx</name><operator pos:start="590:14" pos:end="590:15">-&gt;</operator><name pos:start="590:16" pos:end="590:23">channels</name></name> <operator pos:start="590:25" pos:end="590:25">&lt;</operator> <name pos:start="590:27" pos:end="590:39">full_channels</name></expr>)</condition> <block pos:start="590:42" pos:end="626:5">{<block_content pos:start="592:9" pos:end="624:23">

        <expr_stmt pos:start="592:9" pos:end="596:63"><expr pos:start="592:9" pos:end="596:62"><name pos:start="592:9" pos:end="592:11">ret</name> <operator pos:start="592:13" pos:end="592:13">=</operator> <call pos:start="592:15" pos:end="596:62"><name pos:start="592:15" pos:end="592:40">av_samples_get_buffer_size</name><argument_list pos:start="592:41" pos:end="596:62">(<argument pos:start="592:42" pos:end="592:45"><expr pos:start="592:42" pos:end="592:45"><name pos:start="592:42" pos:end="592:45">NULL</name></expr></argument>, <argument pos:start="592:48" pos:end="592:71"><expr pos:start="592:48" pos:end="592:71"><name pos:start="592:48" pos:end="592:60">full_channels</name> <operator pos:start="592:62" pos:end="592:62">-</operator> <name pos:start="592:64" pos:end="592:71">channels</name></expr></argument>,

                                         <argument pos:start="594:42" pos:end="594:60"><expr pos:start="594:42" pos:end="594:60"><name pos:start="594:42" pos:end="594:60"><name pos:start="594:42" pos:end="594:42">s</name><operator pos:start="594:43" pos:end="594:44">-&gt;</operator><name pos:start="594:45" pos:end="594:49">frame</name><operator pos:start="594:50" pos:end="594:50">.</operator><name pos:start="594:51" pos:end="594:60">nb_samples</name></name></expr></argument>,

                                         <argument pos:start="596:42" pos:end="596:58"><expr pos:start="596:42" pos:end="596:58"><name pos:start="596:42" pos:end="596:58"><name pos:start="596:42" pos:end="596:46">avctx</name><operator pos:start="596:47" pos:end="596:48">-&gt;</operator><name pos:start="596:49" pos:end="596:58">sample_fmt</name></name></expr></argument>, <argument pos:start="596:61" pos:end="596:61"><expr pos:start="596:61" pos:end="596:61"><literal type="number" pos:start="596:61" pos:end="596:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="598:9" pos:end="600:23"><if pos:start="598:9" pos:end="600:23">if <condition pos:start="598:12" pos:end="598:20">(<expr pos:start="598:13" pos:end="598:19"><name pos:start="598:13" pos:end="598:15">ret</name> <operator pos:start="598:17" pos:end="598:17">&lt;</operator> <literal type="number" pos:start="598:19" pos:end="598:19">0</literal></expr>)</condition><block type="pseudo" pos:start="600:13" pos:end="600:23"><block_content pos:start="600:13" pos:end="600:23">

            <return pos:start="600:13" pos:end="600:23">return <expr pos:start="600:20" pos:end="600:22"><name pos:start="600:20" pos:end="600:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="604:9" pos:end="606:60"><expr pos:start="604:9" pos:end="606:59"><call pos:start="604:9" pos:end="606:59"><name pos:start="604:9" pos:end="604:22">av_fast_malloc</name><argument_list pos:start="604:23" pos:end="606:59">(<argument pos:start="604:24" pos:end="604:48"><expr pos:start="604:24" pos:end="604:48"><operator pos:start="604:24" pos:end="604:24">&amp;</operator><name pos:start="604:25" pos:end="604:48"><name pos:start="604:25" pos:end="604:25">s</name><operator pos:start="604:26" pos:end="604:27">-&gt;</operator><name pos:start="604:28" pos:end="604:48">extra_channels_buffer</name></name></expr></argument>,

                       <argument pos:start="606:24" pos:end="606:53"><expr pos:start="606:24" pos:end="606:53"><operator pos:start="606:24" pos:end="606:24">&amp;</operator><name pos:start="606:25" pos:end="606:53"><name pos:start="606:25" pos:end="606:25">s</name><operator pos:start="606:26" pos:end="606:27">-&gt;</operator><name pos:start="606:28" pos:end="606:53">extra_channels_buffer_size</name></name></expr></argument>, <argument pos:start="606:56" pos:end="606:58"><expr pos:start="606:56" pos:end="606:58"><name pos:start="606:56" pos:end="606:58">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="608:9" pos:end="610:35"><if pos:start="608:9" pos:end="610:35">if <condition pos:start="608:12" pos:end="608:38">(<expr pos:start="608:13" pos:end="608:37"><operator pos:start="608:13" pos:end="608:13">!</operator><name pos:start="608:14" pos:end="608:37"><name pos:start="608:14" pos:end="608:14">s</name><operator pos:start="608:15" pos:end="608:16">-&gt;</operator><name pos:start="608:17" pos:end="608:37">extra_channels_buffer</name></name></expr>)</condition><block type="pseudo" pos:start="610:13" pos:end="610:35"><block_content pos:start="610:13" pos:end="610:35">

            <return pos:start="610:13" pos:end="610:35">return <expr pos:start="610:20" pos:end="610:34"><call pos:start="610:20" pos:end="610:34"><name pos:start="610:20" pos:end="610:26">AVERROR</name><argument_list pos:start="610:27" pos:end="610:34">(<argument pos:start="610:28" pos:end="610:33"><expr pos:start="610:28" pos:end="610:33"><name pos:start="610:28" pos:end="610:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="614:9" pos:end="620:80"><expr pos:start="614:9" pos:end="620:79"><name pos:start="614:9" pos:end="614:11">ret</name> <operator pos:start="614:13" pos:end="614:13">=</operator> <call pos:start="614:15" pos:end="620:79"><name pos:start="614:15" pos:end="614:36">av_samples_fill_arrays</name><argument_list pos:start="614:37" pos:end="620:79">(<argument pos:start="614:38" pos:end="614:66"><expr pos:start="614:38" pos:end="614:66"><operator pos:start="614:38" pos:end="614:38">(</operator><name pos:start="614:39" pos:end="614:45">uint8_t</name> <operator pos:start="614:47" pos:end="614:47">*</operator><operator pos:start="614:48" pos:end="614:48">*</operator><operator pos:start="614:49" pos:end="614:49">)</operator><name pos:start="614:50" pos:end="614:66"><name pos:start="614:50" pos:end="614:50">s</name><operator pos:start="614:51" pos:end="614:52">-&gt;</operator><name pos:start="614:53" pos:end="614:66">extra_channels</name></name></expr></argument>, <argument pos:start="614:69" pos:end="614:72"><expr pos:start="614:69" pos:end="614:72"><name pos:start="614:69" pos:end="614:72">NULL</name></expr></argument>,

                                     <argument pos:start="616:38" pos:end="616:61"><expr pos:start="616:38" pos:end="616:61"><name pos:start="616:38" pos:end="616:61"><name pos:start="616:38" pos:end="616:38">s</name><operator pos:start="616:39" pos:end="616:40">-&gt;</operator><name pos:start="616:41" pos:end="616:61">extra_channels_buffer</name></name></expr></argument>,

                                     <argument pos:start="618:38" pos:end="618:61"><expr pos:start="618:38" pos:end="618:61"><name pos:start="618:38" pos:end="618:50">full_channels</name> <operator pos:start="618:52" pos:end="618:52">-</operator> <name pos:start="618:54" pos:end="618:61">channels</name></expr></argument>,

                                     <argument pos:start="620:38" pos:end="620:56"><expr pos:start="620:38" pos:end="620:56"><name pos:start="620:38" pos:end="620:56"><name pos:start="620:38" pos:end="620:38">s</name><operator pos:start="620:39" pos:end="620:40">-&gt;</operator><name pos:start="620:41" pos:end="620:45">frame</name><operator pos:start="620:46" pos:end="620:46">.</operator><name pos:start="620:47" pos:end="620:56">nb_samples</name></name></expr></argument>, <argument pos:start="620:59" pos:end="620:75"><expr pos:start="620:59" pos:end="620:75"><name pos:start="620:59" pos:end="620:75"><name pos:start="620:59" pos:end="620:63">avctx</name><operator pos:start="620:64" pos:end="620:65">-&gt;</operator><name pos:start="620:66" pos:end="620:75">sample_fmt</name></name></expr></argument>, <argument pos:start="620:78" pos:end="620:78"><expr pos:start="620:78" pos:end="620:78"><literal type="number" pos:start="620:78" pos:end="620:78">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="622:9" pos:end="624:23"><if pos:start="622:9" pos:end="624:23">if <condition pos:start="622:12" pos:end="622:20">(<expr pos:start="622:13" pos:end="622:19"><name pos:start="622:13" pos:end="622:15">ret</name> <operator pos:start="622:17" pos:end="622:17">&lt;</operator> <literal type="number" pos:start="622:19" pos:end="622:19">0</literal></expr>)</condition><block type="pseudo" pos:start="624:13" pos:end="624:23"><block_content pos:start="624:13" pos:end="624:23">

            <return pos:start="624:13" pos:end="624:23">return <expr pos:start="624:20" pos:end="624:22"><name pos:start="624:20" pos:end="624:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="630:5" pos:end="630:36">/* filter to get final output */</comment>

    <for pos:start="632:5" pos:end="764:5">for <control pos:start="632:9" pos:end="632:48">(<init pos:start="632:10" pos:end="632:15"><expr pos:start="632:10" pos:end="632:14"><name pos:start="632:10" pos:end="632:10">i</name> <operator pos:start="632:12" pos:end="632:12">=</operator> <literal type="number" pos:start="632:14" pos:end="632:14">0</literal></expr>;</init> <condition pos:start="632:17" pos:end="632:43"><expr pos:start="632:17" pos:end="632:42"><name pos:start="632:17" pos:end="632:17">i</name> <operator pos:start="632:19" pos:end="632:19">&lt;</operator> <operator pos:start="632:21" pos:end="632:21">(</operator><name pos:start="632:22" pos:end="632:37"><name pos:start="632:22" pos:end="632:22">s</name><operator pos:start="632:23" pos:end="632:24">-&gt;</operator><name pos:start="632:25" pos:end="632:37">sample_blocks</name></name> <operator pos:start="632:39" pos:end="632:39">/</operator> <literal type="number" pos:start="632:41" pos:end="632:41">8</literal><operator pos:start="632:42" pos:end="632:42">)</operator></expr>;</condition> <incr pos:start="632:45" pos:end="632:47"><expr pos:start="632:45" pos:end="632:47"><name pos:start="632:45" pos:end="632:45">i</name><operator pos:start="632:46" pos:end="632:47">++</operator></expr></incr>)</control> <block pos:start="632:50" pos:end="764:5">{<block_content pos:start="634:9" pos:end="762:9">

        <decl_stmt pos:start="634:9" pos:end="634:15"><decl pos:start="634:9" pos:end="634:14"><type pos:start="634:9" pos:end="634:11"><name pos:start="634:9" pos:end="634:11">int</name></type> <name pos:start="634:13" pos:end="634:14">ch</name></decl>;</decl_stmt>



        <for pos:start="638:9" pos:end="640:63">for <control pos:start="638:13" pos:end="638:41">(<init pos:start="638:14" pos:end="638:20"><expr pos:start="638:14" pos:end="638:19"><name pos:start="638:14" pos:end="638:15">ch</name> <operator pos:start="638:17" pos:end="638:17">=</operator> <literal type="number" pos:start="638:19" pos:end="638:19">0</literal></expr>;</init> <condition pos:start="638:22" pos:end="638:35"><expr pos:start="638:22" pos:end="638:34"><name pos:start="638:22" pos:end="638:23">ch</name> <operator pos:start="638:25" pos:end="638:25">&lt;</operator> <name pos:start="638:27" pos:end="638:34">channels</name></expr>;</condition> <incr pos:start="638:37" pos:end="638:40"><expr pos:start="638:37" pos:end="638:40"><name pos:start="638:37" pos:end="638:38">ch</name><operator pos:start="638:39" pos:end="638:40">++</operator></expr></incr>)</control><block type="pseudo" pos:start="640:13" pos:end="640:63"><block_content pos:start="640:13" pos:end="640:63">

            <expr_stmt pos:start="640:13" pos:end="640:63"><expr pos:start="640:13" pos:end="640:62"><name pos:start="640:13" pos:end="640:34"><name pos:start="640:13" pos:end="640:13">s</name><operator pos:start="640:14" pos:end="640:15">-&gt;</operator><name pos:start="640:16" pos:end="640:30">samples_chanptr</name><index pos:start="640:31" pos:end="640:34">[<expr pos:start="640:32" pos:end="640:33"><name pos:start="640:32" pos:end="640:33">ch</name></expr>]</index></name> <operator pos:start="640:36" pos:end="640:36">=</operator> <name pos:start="640:38" pos:end="640:52"><name pos:start="640:38" pos:end="640:48">samples_flt</name><index pos:start="640:49" pos:end="640:52">[<expr pos:start="640:50" pos:end="640:51"><name pos:start="640:50" pos:end="640:51">ch</name></expr>]</index></name> <operator pos:start="640:54" pos:end="640:54">+</operator> <name pos:start="640:56" pos:end="640:56">i</name> <operator pos:start="640:58" pos:end="640:58">*</operator> <literal type="number" pos:start="640:60" pos:end="640:62">256</literal></expr>;</expr_stmt></block_content></block></for>

        <for pos:start="642:9" pos:end="644:80">for <control pos:start="642:13" pos:end="642:40">(<init pos:start="642:14" pos:end="642:14">;</init> <condition pos:start="642:16" pos:end="642:34"><expr pos:start="642:16" pos:end="642:33"><name pos:start="642:16" pos:end="642:17">ch</name> <operator pos:start="642:19" pos:end="642:19">&lt;</operator> <name pos:start="642:21" pos:end="642:33">full_channels</name></expr>;</condition> <incr pos:start="642:36" pos:end="642:39"><expr pos:start="642:36" pos:end="642:39"><name pos:start="642:36" pos:end="642:37">ch</name><operator pos:start="642:38" pos:end="642:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="644:13" pos:end="644:80"><block_content pos:start="644:13" pos:end="644:80">

            <expr_stmt pos:start="644:13" pos:end="644:80"><expr pos:start="644:13" pos:end="644:79"><name pos:start="644:13" pos:end="644:34"><name pos:start="644:13" pos:end="644:13">s</name><operator pos:start="644:14" pos:end="644:15">-&gt;</operator><name pos:start="644:16" pos:end="644:30">samples_chanptr</name><index pos:start="644:31" pos:end="644:34">[<expr pos:start="644:32" pos:end="644:33"><name pos:start="644:32" pos:end="644:33">ch</name></expr>]</index></name> <operator pos:start="644:36" pos:end="644:36">=</operator> <name pos:start="644:38" pos:end="644:69"><name pos:start="644:38" pos:end="644:38">s</name><operator pos:start="644:39" pos:end="644:40">-&gt;</operator><name pos:start="644:41" pos:end="644:54">extra_channels</name><index pos:start="644:55" pos:end="644:69">[<expr pos:start="644:56" pos:end="644:68"><name pos:start="644:56" pos:end="644:57">ch</name> <operator pos:start="644:59" pos:end="644:59">-</operator> <name pos:start="644:61" pos:end="644:68">channels</name></expr>]</index></name> <operator pos:start="644:71" pos:end="644:71">+</operator> <name pos:start="644:73" pos:end="644:73">i</name> <operator pos:start="644:75" pos:end="644:75">*</operator> <literal type="number" pos:start="644:77" pos:end="644:79">256</literal></expr>;</expr_stmt></block_content></block></for>



        <expr_stmt pos:start="648:9" pos:end="648:34"><expr pos:start="648:9" pos:end="648:33"><call pos:start="648:9" pos:end="648:33"><name pos:start="648:9" pos:end="648:27">dca_filter_channels</name><argument_list pos:start="648:28" pos:end="648:33">(<argument pos:start="648:29" pos:end="648:29"><expr pos:start="648:29" pos:end="648:29"><name pos:start="648:29" pos:end="648:29">s</name></expr></argument>, <argument pos:start="648:32" pos:end="648:32"><expr pos:start="648:32" pos:end="648:32"><name pos:start="648:32" pos:end="648:32">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="652:9" pos:end="652:77">/* If this was marked as a DTS-ES stream we need to subtract back- */</comment>

        <comment type="block" pos:start="654:9" pos:end="654:73">/* channel from SL &amp; SR to remove matrixed back-channel signal */</comment>

        <if_stmt pos:start="656:9" pos:end="668:9"><if pos:start="656:9" pos:end="668:9">if <condition pos:start="656:12" pos:end="656:54">(<expr pos:start="656:13" pos:end="656:53"><operator pos:start="656:13" pos:end="656:13">(</operator><name pos:start="656:14" pos:end="656:30"><name pos:start="656:14" pos:end="656:14">s</name><operator pos:start="656:15" pos:end="656:16">-&gt;</operator><name pos:start="656:17" pos:end="656:30">source_pcm_res</name></name> <operator pos:start="656:32" pos:end="656:32">&amp;</operator> <literal type="number" pos:start="656:34" pos:end="656:34">1</literal><operator pos:start="656:35" pos:end="656:35">)</operator> <operator pos:start="656:37" pos:end="656:38">&amp;&amp;</operator> <name pos:start="656:40" pos:end="656:53"><name pos:start="656:40" pos:end="656:40">s</name><operator pos:start="656:41" pos:end="656:42">-&gt;</operator><name pos:start="656:43" pos:end="656:53">xch_present</name></name></expr>)</condition> <block pos:start="656:56" pos:end="668:9">{<block_content pos:start="658:13" pos:end="666:76">

            <decl_stmt pos:start="658:13" pos:end="658:93"><decl pos:start="658:13" pos:end="658:92"><type pos:start="658:13" pos:end="658:19"><name pos:start="658:13" pos:end="658:17">float</name> <modifier pos:start="658:19" pos:end="658:19">*</modifier></type><name pos:start="658:20" pos:end="658:28">back_chan</name> <init pos:start="658:30" pos:end="658:92">= <expr pos:start="658:32" pos:end="658:92"><name pos:start="658:32" pos:end="658:92"><name pos:start="658:32" pos:end="658:32">s</name><operator pos:start="658:33" pos:end="658:34">-&gt;</operator><name pos:start="658:35" pos:end="658:49">samples_chanptr</name><index pos:start="658:50" pos:end="658:92">[<expr pos:start="658:51" pos:end="658:91"><name pos:start="658:51" pos:end="658:91"><name pos:start="658:51" pos:end="658:51">s</name><operator pos:start="658:52" pos:end="658:53">-&gt;</operator><name pos:start="658:54" pos:end="658:70">channel_order_tab</name><index pos:start="658:71" pos:end="658:91">[<expr pos:start="658:72" pos:end="658:90"><name pos:start="658:72" pos:end="658:90"><name pos:start="658:72" pos:end="658:72">s</name><operator pos:start="658:73" pos:end="658:74">-&gt;</operator><name pos:start="658:75" pos:end="658:90">xch_base_channel</name></name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="660:13" pos:end="660:97"><decl pos:start="660:13" pos:end="660:96"><type pos:start="660:13" pos:end="660:19"><name pos:start="660:13" pos:end="660:17">float</name> <modifier pos:start="660:19" pos:end="660:19">*</modifier></type><name pos:start="660:20" pos:end="660:26">lt_chan</name>   <init pos:start="660:30" pos:end="660:96">= <expr pos:start="660:32" pos:end="660:96"><name pos:start="660:32" pos:end="660:96"><name pos:start="660:32" pos:end="660:32">s</name><operator pos:start="660:33" pos:end="660:34">-&gt;</operator><name pos:start="660:35" pos:end="660:49">samples_chanptr</name><index pos:start="660:50" pos:end="660:96">[<expr pos:start="660:51" pos:end="660:95"><name pos:start="660:51" pos:end="660:95"><name pos:start="660:51" pos:end="660:51">s</name><operator pos:start="660:52" pos:end="660:53">-&gt;</operator><name pos:start="660:54" pos:end="660:70">channel_order_tab</name><index pos:start="660:71" pos:end="660:95">[<expr pos:start="660:72" pos:end="660:94"><name pos:start="660:72" pos:end="660:90"><name pos:start="660:72" pos:end="660:72">s</name><operator pos:start="660:73" pos:end="660:74">-&gt;</operator><name pos:start="660:75" pos:end="660:90">xch_base_channel</name></name> <operator pos:start="660:92" pos:end="660:92">-</operator> <literal type="number" pos:start="660:94" pos:end="660:94">2</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="662:13" pos:end="662:97"><decl pos:start="662:13" pos:end="662:96"><type pos:start="662:13" pos:end="662:19"><name pos:start="662:13" pos:end="662:17">float</name> <modifier pos:start="662:19" pos:end="662:19">*</modifier></type><name pos:start="662:20" pos:end="662:26">rt_chan</name>   <init pos:start="662:30" pos:end="662:96">= <expr pos:start="662:32" pos:end="662:96"><name pos:start="662:32" pos:end="662:96"><name pos:start="662:32" pos:end="662:32">s</name><operator pos:start="662:33" pos:end="662:34">-&gt;</operator><name pos:start="662:35" pos:end="662:49">samples_chanptr</name><index pos:start="662:50" pos:end="662:96">[<expr pos:start="662:51" pos:end="662:95"><name pos:start="662:51" pos:end="662:95"><name pos:start="662:51" pos:end="662:51">s</name><operator pos:start="662:52" pos:end="662:53">-&gt;</operator><name pos:start="662:54" pos:end="662:70">channel_order_tab</name><index pos:start="662:71" pos:end="662:95">[<expr pos:start="662:72" pos:end="662:94"><name pos:start="662:72" pos:end="662:90"><name pos:start="662:72" pos:end="662:72">s</name><operator pos:start="662:73" pos:end="662:74">-&gt;</operator><name pos:start="662:75" pos:end="662:90">xch_base_channel</name></name> <operator pos:start="662:92" pos:end="662:92">-</operator> <literal type="number" pos:start="662:94" pos:end="662:94">1</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="664:13" pos:end="664:76"><expr pos:start="664:13" pos:end="664:75"><call pos:start="664:13" pos:end="664:75"><name pos:start="664:13" pos:end="664:38"><name pos:start="664:13" pos:end="664:13">s</name><operator pos:start="664:14" pos:end="664:15">-&gt;</operator><name pos:start="664:16" pos:end="664:19">fdsp</name><operator pos:start="664:20" pos:end="664:20">.</operator><name pos:start="664:21" pos:end="664:38">vector_fmac_scalar</name></name><argument_list pos:start="664:39" pos:end="664:75">(<argument pos:start="664:40" pos:end="664:46"><expr pos:start="664:40" pos:end="664:46"><name pos:start="664:40" pos:end="664:46">lt_chan</name></expr></argument>, <argument pos:start="664:49" pos:end="664:57"><expr pos:start="664:49" pos:end="664:57"><name pos:start="664:49" pos:end="664:57">back_chan</name></expr></argument>, <argument pos:start="664:60" pos:end="664:69"><expr pos:start="664:60" pos:end="664:69"><operator pos:start="664:60" pos:end="664:60">-</operator><name pos:start="664:61" pos:end="664:69">M_SQRT1_2</name></expr></argument>, <argument pos:start="664:72" pos:end="664:74"><expr pos:start="664:72" pos:end="664:74"><literal type="number" pos:start="664:72" pos:end="664:74">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="666:13" pos:end="666:76"><expr pos:start="666:13" pos:end="666:75"><call pos:start="666:13" pos:end="666:75"><name pos:start="666:13" pos:end="666:38"><name pos:start="666:13" pos:end="666:13">s</name><operator pos:start="666:14" pos:end="666:15">-&gt;</operator><name pos:start="666:16" pos:end="666:19">fdsp</name><operator pos:start="666:20" pos:end="666:20">.</operator><name pos:start="666:21" pos:end="666:38">vector_fmac_scalar</name></name><argument_list pos:start="666:39" pos:end="666:75">(<argument pos:start="666:40" pos:end="666:46"><expr pos:start="666:40" pos:end="666:46"><name pos:start="666:40" pos:end="666:46">rt_chan</name></expr></argument>, <argument pos:start="666:49" pos:end="666:57"><expr pos:start="666:49" pos:end="666:57"><name pos:start="666:49" pos:end="666:57">back_chan</name></expr></argument>, <argument pos:start="666:60" pos:end="666:69"><expr pos:start="666:60" pos:end="666:69"><operator pos:start="666:60" pos:end="666:60">-</operator><name pos:start="666:61" pos:end="666:69">M_SQRT1_2</name></expr></argument>, <argument pos:start="666:72" pos:end="666:74"><expr pos:start="666:72" pos:end="666:74"><literal type="number" pos:start="666:72" pos:end="666:74">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="672:9" pos:end="672:80">/* If stream contains XXCH, we might need to undo an embedded downmix */</comment>

        <if_stmt pos:start="674:9" pos:end="762:9"><if pos:start="674:9" pos:end="762:9">if <condition pos:start="674:12" pos:end="674:34">(<expr pos:start="674:13" pos:end="674:33"><name pos:start="674:13" pos:end="674:33"><name pos:start="674:13" pos:end="674:13">s</name><operator pos:start="674:14" pos:end="674:15">-&gt;</operator><name pos:start="674:16" pos:end="674:33">xxch_dmix_embedded</name></name></expr>)</condition> <block pos:start="674:36" pos:end="762:9">{<block_content pos:start="678:13" pos:end="758:13">

            <comment type="block" pos:start="676:13" pos:end="676:48">/* Loop over channel sets in turn */</comment>

            <expr_stmt pos:start="678:13" pos:end="678:35"><expr pos:start="678:13" pos:end="678:34"><name pos:start="678:13" pos:end="678:14">ch</name> <operator pos:start="678:16" pos:end="678:16">=</operator> <name pos:start="678:18" pos:end="678:34">num_core_channels</name></expr>;</expr_stmt>

            <for pos:start="680:13" pos:end="758:13">for <control pos:start="680:17" pos:end="680:59">(<init pos:start="680:18" pos:end="680:27"><expr pos:start="680:18" pos:end="680:26"><name pos:start="680:18" pos:end="680:22">chset</name> <operator pos:start="680:24" pos:end="680:24">=</operator> <literal type="number" pos:start="680:26" pos:end="680:26">0</literal></expr>;</init> <condition pos:start="680:29" pos:end="680:50"><expr pos:start="680:29" pos:end="680:49"><name pos:start="680:29" pos:end="680:33">chset</name> <operator pos:start="680:35" pos:end="680:35">&lt;</operator> <name pos:start="680:37" pos:end="680:49"><name pos:start="680:37" pos:end="680:37">s</name><operator pos:start="680:38" pos:end="680:39">-&gt;</operator><name pos:start="680:40" pos:end="680:49">xxch_chset</name></name></expr>;</condition> <incr pos:start="680:52" pos:end="680:58"><expr pos:start="680:52" pos:end="680:58"><name pos:start="680:52" pos:end="680:56">chset</name><operator pos:start="680:57" pos:end="680:58">++</operator></expr></incr>)</control> <block pos:start="680:61" pos:end="758:13">{<block_content pos:start="682:17" pos:end="756:27">

                <expr_stmt pos:start="682:17" pos:end="682:54"><expr pos:start="682:17" pos:end="682:53"><name pos:start="682:17" pos:end="682:21">endch</name> <operator pos:start="682:23" pos:end="682:23">=</operator> <name pos:start="682:25" pos:end="682:26">ch</name> <operator pos:start="682:28" pos:end="682:28">+</operator> <name pos:start="682:30" pos:end="682:53"><name pos:start="682:30" pos:end="682:30">s</name><operator pos:start="682:31" pos:end="682:32">-&gt;</operator><name pos:start="682:33" pos:end="682:46">xxch_chset_nch</name><index pos:start="682:47" pos:end="682:53">[<expr pos:start="682:48" pos:end="682:52"><name pos:start="682:48" pos:end="682:52">chset</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="684:17" pos:end="684:45"><expr pos:start="684:17" pos:end="684:44"><name pos:start="684:17" pos:end="684:20">mask</name> <operator pos:start="684:22" pos:end="684:22">=</operator> <name pos:start="684:24" pos:end="684:44"><name pos:start="684:24" pos:end="684:24">s</name><operator pos:start="684:25" pos:end="684:26">-&gt;</operator><name pos:start="684:27" pos:end="684:44">xxch_dmix_embedded</name></name></expr>;</expr_stmt>



                <comment type="block" pos:start="688:17" pos:end="688:34">/* undo downmix */</comment>

                <for pos:start="690:17" pos:end="716:17">for <control pos:start="690:21" pos:end="690:44">(<init pos:start="690:22" pos:end="690:28"><expr pos:start="690:22" pos:end="690:27"><name pos:start="690:22" pos:end="690:22">j</name> <operator pos:start="690:24" pos:end="690:24">=</operator> <name pos:start="690:26" pos:end="690:27">ch</name></expr>;</init> <condition pos:start="690:30" pos:end="690:39"><expr pos:start="690:30" pos:end="690:38"><name pos:start="690:30" pos:end="690:30">j</name> <operator pos:start="690:32" pos:end="690:32">&lt;</operator> <name pos:start="690:34" pos:end="690:38">endch</name></expr>;</condition> <incr pos:start="690:41" pos:end="690:43"><expr pos:start="690:41" pos:end="690:43"><name pos:start="690:41" pos:end="690:41">j</name><operator pos:start="690:42" pos:end="690:43">++</operator></expr></incr>)</control> <block pos:start="690:46" pos:end="716:17">{<block_content pos:start="692:21" pos:end="714:21">

                    <if_stmt pos:start="692:21" pos:end="714:21"><if pos:start="692:21" pos:end="714:21">if <condition pos:start="692:24" pos:end="692:40">(<expr pos:start="692:25" pos:end="692:39"><name pos:start="692:25" pos:end="692:28">mask</name> <operator pos:start="692:30" pos:end="692:30">&amp;</operator> <operator pos:start="692:32" pos:end="692:32">(</operator><literal type="number" pos:start="692:33" pos:end="692:33">1</literal> <operator pos:start="692:35" pos:end="692:36">&lt;&lt;</operator> <name pos:start="692:38" pos:end="692:38">j</name><operator pos:start="692:39" pos:end="692:39">)</operator></expr>)</condition> <block pos:start="692:42" pos:end="714:21">{<block_content pos:start="694:25" pos:end="712:25"> <comment type="block" pos:start="692:44" pos:end="692:80">/* this channel has been mixed-out */</comment>

                        <expr_stmt pos:start="694:25" pos:end="694:79"><expr pos:start="694:25" pos:end="694:78"><name pos:start="694:25" pos:end="694:32">src_chan</name> <operator pos:start="694:34" pos:end="694:34">=</operator> <name pos:start="694:36" pos:end="694:78"><name pos:start="694:36" pos:end="694:36">s</name><operator pos:start="694:37" pos:end="694:38">-&gt;</operator><name pos:start="694:39" pos:end="694:53">samples_chanptr</name><index pos:start="694:54" pos:end="694:78">[<expr pos:start="694:55" pos:end="694:77"><name pos:start="694:55" pos:end="694:77"><name pos:start="694:55" pos:end="694:55">s</name><operator pos:start="694:56" pos:end="694:57">-&gt;</operator><name pos:start="694:58" pos:end="694:74">channel_order_tab</name><index pos:start="694:75" pos:end="694:77">[<expr pos:start="694:76" pos:end="694:76"><name pos:start="694:76" pos:end="694:76">j</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

                        <for pos:start="696:25" pos:end="712:25">for <control pos:start="696:29" pos:end="696:51">(<init pos:start="696:30" pos:end="696:35"><expr pos:start="696:30" pos:end="696:34"><name pos:start="696:30" pos:end="696:30">k</name> <operator pos:start="696:32" pos:end="696:32">=</operator> <literal type="number" pos:start="696:34" pos:end="696:34">0</literal></expr>;</init> <condition pos:start="696:37" pos:end="696:46"><expr pos:start="696:37" pos:end="696:45"><name pos:start="696:37" pos:end="696:37">k</name> <operator pos:start="696:39" pos:end="696:39">&lt;</operator> <name pos:start="696:41" pos:end="696:45">endch</name></expr>;</condition> <incr pos:start="696:48" pos:end="696:50"><expr pos:start="696:48" pos:end="696:50"><name pos:start="696:48" pos:end="696:48">k</name><operator pos:start="696:49" pos:end="696:50">++</operator></expr></incr>)</control> <block pos:start="696:53" pos:end="712:25">{<block_content pos:start="698:29" pos:end="710:29">

                            <expr_stmt pos:start="698:29" pos:end="698:60"><expr pos:start="698:29" pos:end="698:59"><name pos:start="698:29" pos:end="698:33">achan</name> <operator pos:start="698:35" pos:end="698:35">=</operator> <name pos:start="698:37" pos:end="698:59"><name pos:start="698:37" pos:end="698:37">s</name><operator pos:start="698:38" pos:end="698:39">-&gt;</operator><name pos:start="698:40" pos:end="698:56">channel_order_tab</name><index pos:start="698:57" pos:end="698:59">[<expr pos:start="698:58" pos:end="698:58"><name pos:start="698:58" pos:end="698:58">k</name></expr>]</index></name></expr>;</expr_stmt>

                            <expr_stmt pos:start="700:29" pos:end="700:61"><expr pos:start="700:29" pos:end="700:60"><name pos:start="700:29" pos:end="700:33">scale</name> <operator pos:start="700:35" pos:end="700:35">=</operator> <name pos:start="700:37" pos:end="700:60"><name pos:start="700:37" pos:end="700:37">s</name><operator pos:start="700:38" pos:end="700:39">-&gt;</operator><name pos:start="700:40" pos:end="700:54">xxch_dmix_coeff</name><index pos:start="700:55" pos:end="700:57">[<expr pos:start="700:56" pos:end="700:56"><name pos:start="700:56" pos:end="700:56">j</name></expr>]</index><index pos:start="700:58" pos:end="700:60">[<expr pos:start="700:59" pos:end="700:59"><name pos:start="700:59" pos:end="700:59">k</name></expr>]</index></name></expr>;</expr_stmt>

                            <if_stmt pos:start="702:29" pos:end="710:29"><if pos:start="702:29" pos:end="710:29">if <condition pos:start="702:32" pos:end="702:45">(<expr pos:start="702:33" pos:end="702:44"><name pos:start="702:33" pos:end="702:37">scale</name> <operator pos:start="702:39" pos:end="702:40">!=</operator> <literal type="number" pos:start="702:42" pos:end="702:44">0.0</literal></expr>)</condition> <block pos:start="702:47" pos:end="710:29">{<block_content pos:start="704:33" pos:end="708:72">

                                <expr_stmt pos:start="704:33" pos:end="704:69"><expr pos:start="704:33" pos:end="704:68"><name pos:start="704:33" pos:end="704:40">dst_chan</name> <operator pos:start="704:42" pos:end="704:42">=</operator> <name pos:start="704:44" pos:end="704:68"><name pos:start="704:44" pos:end="704:44">s</name><operator pos:start="704:45" pos:end="704:46">-&gt;</operator><name pos:start="704:47" pos:end="704:61">samples_chanptr</name><index pos:start="704:62" pos:end="704:68">[<expr pos:start="704:63" pos:end="704:67"><name pos:start="704:63" pos:end="704:67">achan</name></expr>]</index></name></expr>;</expr_stmt>

                                <expr_stmt pos:start="706:33" pos:end="708:72"><expr pos:start="706:33" pos:end="708:71"><call pos:start="706:33" pos:end="708:71"><name pos:start="706:33" pos:end="706:58"><name pos:start="706:33" pos:end="706:33">s</name><operator pos:start="706:34" pos:end="706:35">-&gt;</operator><name pos:start="706:36" pos:end="706:39">fdsp</name><operator pos:start="706:40" pos:end="706:40">.</operator><name pos:start="706:41" pos:end="706:58">vector_fmac_scalar</name></name><argument_list pos:start="706:59" pos:end="708:71">(<argument pos:start="706:60" pos:end="706:67"><expr pos:start="706:60" pos:end="706:67"><name pos:start="706:60" pos:end="706:67">dst_chan</name></expr></argument>, <argument pos:start="706:70" pos:end="706:77"><expr pos:start="706:70" pos:end="706:77"><name pos:start="706:70" pos:end="706:77">src_chan</name></expr></argument>,

                                                           <argument pos:start="708:60" pos:end="708:65"><expr pos:start="708:60" pos:end="708:65"><operator pos:start="708:60" pos:end="708:60">-</operator><name pos:start="708:61" pos:end="708:65">scale</name></expr></argument>, <argument pos:start="708:68" pos:end="708:70"><expr pos:start="708:68" pos:end="708:70"><literal type="number" pos:start="708:68" pos:end="708:70">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if></if_stmt>

                        </block_content>}</block></for>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></for>



                <comment type="block" pos:start="720:17" pos:end="720:78">/* if a downmix has been embedded then undo the pre-scaling */</comment>

                <if_stmt pos:start="722:17" pos:end="752:17"><if pos:start="722:17" pos:end="752:17">if <condition pos:start="722:20" pos:end="722:73">(<expr pos:start="722:21" pos:end="722:72"><operator pos:start="722:21" pos:end="722:21">(</operator><name pos:start="722:22" pos:end="722:25">mask</name> <operator pos:start="722:27" pos:end="722:27">&amp;</operator> <operator pos:start="722:29" pos:end="722:29">(</operator><literal type="number" pos:start="722:30" pos:end="722:30">1</literal> <operator pos:start="722:32" pos:end="722:33">&lt;&lt;</operator> <name pos:start="722:35" pos:end="722:36">ch</name><operator pos:start="722:37" pos:end="722:37">)</operator><operator pos:start="722:38" pos:end="722:38">)</operator> <operator pos:start="722:40" pos:end="722:41">&amp;&amp;</operator> <name pos:start="722:43" pos:end="722:64"><name pos:start="722:43" pos:end="722:43">s</name><operator pos:start="722:44" pos:end="722:45">-&gt;</operator><name pos:start="722:46" pos:end="722:57">xxch_dmix_sf</name><index pos:start="722:58" pos:end="722:64">[<expr pos:start="722:59" pos:end="722:63"><name pos:start="722:59" pos:end="722:63">chset</name></expr>]</index></name> <operator pos:start="722:66" pos:end="722:67">!=</operator> <literal type="number" pos:start="722:69" pos:end="722:72">1.0f</literal></expr>)</condition> <block pos:start="722:75" pos:end="752:17">{<block_content pos:start="724:21" pos:end="750:21">

                    <expr_stmt pos:start="724:21" pos:end="724:51"><expr pos:start="724:21" pos:end="724:50"><name pos:start="724:21" pos:end="724:25">scale</name> <operator pos:start="724:27" pos:end="724:27">=</operator> <name pos:start="724:29" pos:end="724:50"><name pos:start="724:29" pos:end="724:29">s</name><operator pos:start="724:30" pos:end="724:31">-&gt;</operator><name pos:start="724:32" pos:end="724:43">xxch_dmix_sf</name><index pos:start="724:44" pos:end="724:50">[<expr pos:start="724:45" pos:end="724:49"><name pos:start="724:45" pos:end="724:49">chset</name></expr>]</index></name></expr>;</expr_stmt>



                    <for pos:start="728:21" pos:end="736:21">for <control pos:start="728:25" pos:end="728:44">(<init pos:start="728:26" pos:end="728:31"><expr pos:start="728:26" pos:end="728:30"><name pos:start="728:26" pos:end="728:26">j</name> <operator pos:start="728:28" pos:end="728:28">=</operator> <literal type="number" pos:start="728:30" pos:end="728:30">0</literal></expr>;</init> <condition pos:start="728:33" pos:end="728:39"><expr pos:start="728:33" pos:end="728:38"><name pos:start="728:33" pos:end="728:33">j</name> <operator pos:start="728:35" pos:end="728:35">&lt;</operator> <name pos:start="728:37" pos:end="728:38">ch</name></expr>;</condition> <incr pos:start="728:41" pos:end="728:43"><expr pos:start="728:41" pos:end="728:43"><name pos:start="728:41" pos:end="728:41">j</name><operator pos:start="728:42" pos:end="728:43">++</operator></expr></incr>)</control> <block pos:start="728:46" pos:end="736:21">{<block_content pos:start="730:25" pos:end="734:49">

                        <expr_stmt pos:start="730:25" pos:end="730:79"><expr pos:start="730:25" pos:end="730:78"><name pos:start="730:25" pos:end="730:32">src_chan</name> <operator pos:start="730:34" pos:end="730:34">=</operator> <name pos:start="730:36" pos:end="730:78"><name pos:start="730:36" pos:end="730:36">s</name><operator pos:start="730:37" pos:end="730:38">-&gt;</operator><name pos:start="730:39" pos:end="730:53">samples_chanptr</name><index pos:start="730:54" pos:end="730:78">[<expr pos:start="730:55" pos:end="730:77"><name pos:start="730:55" pos:end="730:77"><name pos:start="730:55" pos:end="730:55">s</name><operator pos:start="730:56" pos:end="730:57">-&gt;</operator><name pos:start="730:58" pos:end="730:74">channel_order_tab</name><index pos:start="730:75" pos:end="730:77">[<expr pos:start="730:76" pos:end="730:76"><name pos:start="730:76" pos:end="730:76">j</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

                        <for pos:start="732:25" pos:end="734:49">for <control pos:start="732:29" pos:end="732:49">(<init pos:start="732:30" pos:end="732:35"><expr pos:start="732:30" pos:end="732:34"><name pos:start="732:30" pos:end="732:30">k</name> <operator pos:start="732:32" pos:end="732:32">=</operator> <literal type="number" pos:start="732:34" pos:end="732:34">0</literal></expr>;</init> <condition pos:start="732:37" pos:end="732:44"><expr pos:start="732:37" pos:end="732:43"><name pos:start="732:37" pos:end="732:37">k</name> <operator pos:start="732:39" pos:end="732:39">&lt;</operator> <literal type="number" pos:start="732:41" pos:end="732:43">256</literal></expr>;</condition> <incr pos:start="732:46" pos:end="732:48"><expr pos:start="732:46" pos:end="732:48"><name pos:start="732:46" pos:end="732:46">k</name><operator pos:start="732:47" pos:end="732:48">++</operator></expr></incr>)</control><block type="pseudo" pos:start="734:29" pos:end="734:49"><block_content pos:start="734:29" pos:end="734:49">

                            <expr_stmt pos:start="734:29" pos:end="734:49"><expr pos:start="734:29" pos:end="734:48"><name pos:start="734:29" pos:end="734:39"><name pos:start="734:29" pos:end="734:36">src_chan</name><index pos:start="734:37" pos:end="734:39">[<expr pos:start="734:38" pos:end="734:38"><name pos:start="734:38" pos:end="734:38">k</name></expr>]</index></name> <operator pos:start="734:41" pos:end="734:42">*=</operator> <name pos:start="734:44" pos:end="734:48">scale</name></expr>;</expr_stmt></block_content></block></for>

                    </block_content>}</block></for>



                    <comment type="block" pos:start="740:21" pos:end="740:80">/* LFE channel is always part of core, scale if it exists */</comment>

                    <if_stmt pos:start="742:21" pos:end="750:21"><if pos:start="742:21" pos:end="750:21">if <condition pos:start="742:24" pos:end="742:31">(<expr pos:start="742:25" pos:end="742:30"><name pos:start="742:25" pos:end="742:30"><name pos:start="742:25" pos:end="742:25">s</name><operator pos:start="742:26" pos:end="742:27">-&gt;</operator><name pos:start="742:28" pos:end="742:30">lfe</name></name></expr>)</condition> <block pos:start="742:33" pos:end="750:21">{<block_content pos:start="744:25" pos:end="748:49">

                        <expr_stmt pos:start="744:25" pos:end="744:68"><expr pos:start="744:25" pos:end="744:67"><name pos:start="744:25" pos:end="744:32">src_chan</name> <operator pos:start="744:34" pos:end="744:34">=</operator> <name pos:start="744:36" pos:end="744:67"><name pos:start="744:36" pos:end="744:36">s</name><operator pos:start="744:37" pos:end="744:38">-&gt;</operator><name pos:start="744:39" pos:end="744:53">samples_chanptr</name><index pos:start="744:54" pos:end="744:67">[<expr pos:start="744:55" pos:end="744:66"><name pos:start="744:55" pos:end="744:66"><name pos:start="744:55" pos:end="744:55">s</name><operator pos:start="744:56" pos:end="744:57">-&gt;</operator><name pos:start="744:58" pos:end="744:66">lfe_index</name></name></expr>]</index></name></expr>;</expr_stmt>

                        <for pos:start="746:25" pos:end="748:49">for <control pos:start="746:29" pos:end="746:49">(<init pos:start="746:30" pos:end="746:35"><expr pos:start="746:30" pos:end="746:34"><name pos:start="746:30" pos:end="746:30">k</name> <operator pos:start="746:32" pos:end="746:32">=</operator> <literal type="number" pos:start="746:34" pos:end="746:34">0</literal></expr>;</init> <condition pos:start="746:37" pos:end="746:44"><expr pos:start="746:37" pos:end="746:43"><name pos:start="746:37" pos:end="746:37">k</name> <operator pos:start="746:39" pos:end="746:39">&lt;</operator> <literal type="number" pos:start="746:41" pos:end="746:43">256</literal></expr>;</condition> <incr pos:start="746:46" pos:end="746:48"><expr pos:start="746:46" pos:end="746:48"><name pos:start="746:46" pos:end="746:46">k</name><operator pos:start="746:47" pos:end="746:48">++</operator></expr></incr>)</control><block type="pseudo" pos:start="748:29" pos:end="748:49"><block_content pos:start="748:29" pos:end="748:49">

                            <expr_stmt pos:start="748:29" pos:end="748:49"><expr pos:start="748:29" pos:end="748:48"><name pos:start="748:29" pos:end="748:39"><name pos:start="748:29" pos:end="748:36">src_chan</name><index pos:start="748:37" pos:end="748:39">[<expr pos:start="748:38" pos:end="748:38"><name pos:start="748:38" pos:end="748:38">k</name></expr>]</index></name> <operator pos:start="748:41" pos:end="748:42">*=</operator> <name pos:start="748:44" pos:end="748:48">scale</name></expr>;</expr_stmt></block_content></block></for>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="756:17" pos:end="756:27"><expr pos:start="756:17" pos:end="756:26"><name pos:start="756:17" pos:end="756:18">ch</name> <operator pos:start="756:20" pos:end="756:20">=</operator> <name pos:start="756:22" pos:end="756:26">endch</name></expr>;</expr_stmt>

            </block_content>}</block></for>



        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="768:5" pos:end="768:28">/* update lfe history */</comment>

    <expr_stmt pos:start="770:5" pos:end="770:54"><expr pos:start="770:5" pos:end="770:53"><name pos:start="770:5" pos:end="770:15">lfe_samples</name> <operator pos:start="770:17" pos:end="770:17">=</operator> <literal type="number" pos:start="770:19" pos:end="770:19">2</literal> <operator pos:start="770:21" pos:end="770:21">*</operator> <name pos:start="770:23" pos:end="770:28"><name pos:start="770:23" pos:end="770:23">s</name><operator pos:start="770:24" pos:end="770:25">-&gt;</operator><name pos:start="770:26" pos:end="770:28">lfe</name></name> <operator pos:start="770:30" pos:end="770:30">*</operator> <operator pos:start="770:32" pos:end="770:32">(</operator><name pos:start="770:33" pos:end="770:48"><name pos:start="770:33" pos:end="770:33">s</name><operator pos:start="770:34" pos:end="770:35">-&gt;</operator><name pos:start="770:36" pos:end="770:48">sample_blocks</name></name> <operator pos:start="770:50" pos:end="770:50">/</operator> <literal type="number" pos:start="770:52" pos:end="770:52">8</literal><operator pos:start="770:53" pos:end="770:53">)</operator></expr>;</expr_stmt>

    <for pos:start="772:5" pos:end="774:54">for <control pos:start="772:9" pos:end="772:40">(<init pos:start="772:10" pos:end="772:15"><expr pos:start="772:10" pos:end="772:14"><name pos:start="772:10" pos:end="772:10">i</name> <operator pos:start="772:12" pos:end="772:12">=</operator> <literal type="number" pos:start="772:14" pos:end="772:14">0</literal></expr>;</init> <condition pos:start="772:17" pos:end="772:35"><expr pos:start="772:17" pos:end="772:34"><name pos:start="772:17" pos:end="772:17">i</name> <operator pos:start="772:19" pos:end="772:19">&lt;</operator> <literal type="number" pos:start="772:21" pos:end="772:21">2</literal> <operator pos:start="772:23" pos:end="772:23">*</operator> <name pos:start="772:25" pos:end="772:30"><name pos:start="772:25" pos:end="772:25">s</name><operator pos:start="772:26" pos:end="772:27">-&gt;</operator><name pos:start="772:28" pos:end="772:30">lfe</name></name> <operator pos:start="772:32" pos:end="772:32">*</operator> <literal type="number" pos:start="772:34" pos:end="772:34">4</literal></expr>;</condition> <incr pos:start="772:37" pos:end="772:39"><expr pos:start="772:37" pos:end="772:39"><name pos:start="772:37" pos:end="772:37">i</name><operator pos:start="772:38" pos:end="772:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="774:9" pos:end="774:54"><block_content pos:start="774:9" pos:end="774:54">

        <expr_stmt pos:start="774:9" pos:end="774:54"><expr pos:start="774:9" pos:end="774:53"><name pos:start="774:9" pos:end="774:22"><name pos:start="774:9" pos:end="774:9">s</name><operator pos:start="774:10" pos:end="774:11">-&gt;</operator><name pos:start="774:12" pos:end="774:19">lfe_data</name><index pos:start="774:20" pos:end="774:22">[<expr pos:start="774:21" pos:end="774:21"><name pos:start="774:21" pos:end="774:21">i</name></expr>]</index></name> <operator pos:start="774:24" pos:end="774:24">=</operator> <name pos:start="774:26" pos:end="774:53"><name pos:start="774:26" pos:end="774:26">s</name><operator pos:start="774:27" pos:end="774:28">-&gt;</operator><name pos:start="774:29" pos:end="774:36">lfe_data</name><index pos:start="774:37" pos:end="774:53">[<expr pos:start="774:38" pos:end="774:52"><name pos:start="774:38" pos:end="774:38">i</name> <operator pos:start="774:40" pos:end="774:40">+</operator> <name pos:start="774:42" pos:end="774:52">lfe_samples</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>



    <expr_stmt pos:start="778:5" pos:end="778:26"><expr pos:start="778:5" pos:end="778:25"><operator pos:start="778:5" pos:end="778:5">*</operator><name pos:start="778:6" pos:end="778:18">got_frame_ptr</name>    <operator pos:start="778:23" pos:end="778:23">=</operator> <literal type="number" pos:start="778:25" pos:end="778:25">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="780:5" pos:end="780:33"><expr pos:start="780:5" pos:end="780:32"><operator pos:start="780:5" pos:end="780:5">*</operator><operator pos:start="780:6" pos:end="780:6">(</operator><name pos:start="780:7" pos:end="780:13">AVFrame</name> <operator pos:start="780:15" pos:end="780:15">*</operator><operator pos:start="780:16" pos:end="780:16">)</operator> <name pos:start="780:18" pos:end="780:21">data</name> <operator pos:start="780:23" pos:end="780:23">=</operator> <name pos:start="780:25" pos:end="780:32"><name pos:start="780:25" pos:end="780:25">s</name><operator pos:start="780:26" pos:end="780:27">-&gt;</operator><name pos:start="780:28" pos:end="780:32">frame</name></name></expr>;</expr_stmt>



    <return pos:start="784:5" pos:end="784:20">return <expr pos:start="784:12" pos:end="784:19"><name pos:start="784:12" pos:end="784:19">buf_size</name></expr>;</return>

</block_content>}</block></function></unit>
