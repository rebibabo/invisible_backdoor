<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4349.c" pos:tabs="8"><function pos:start="1:1" pos:end="113:15"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">parse_interval</name><parameter_list pos:start="1:26" pos:end="3:58">(<parameter pos:start="1:27" pos:end="1:44"><decl pos:start="1:27" pos:end="1:44"><type pos:start="1:27" pos:end="1:44"><name pos:start="1:27" pos:end="1:34">Interval</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:44">interval</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:64"><decl pos:start="1:47" pos:end="1:64"><type pos:start="1:47" pos:end="1:64"><name pos:start="1:47" pos:end="1:49">int</name></type> <name pos:start="1:51" pos:end="1:64">interval_count</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:42"><decl pos:start="3:27" pos:end="3:42"><type pos:start="3:27" pos:end="3:42"><specifier pos:start="3:27" pos:end="3:31">const</specifier> <name pos:start="3:33" pos:end="3:36">char</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier><modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:42">buf</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:57"><decl pos:start="3:45" pos:end="3:57"><type pos:start="3:45" pos:end="3:57"><name pos:start="3:45" pos:end="3:48">void</name> <modifier pos:start="3:50" pos:end="3:50">*</modifier></type><name pos:start="3:51" pos:end="3:57">log_ctx</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="113:15">{<block_content pos:start="7:5" pos:end="113:15">

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:21">intervalstr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:33"><expr pos:start="13:5" pos:end="13:32"><operator pos:start="13:5" pos:end="13:5">*</operator><name pos:start="13:6" pos:end="13:8">buf</name> <operator pos:start="13:10" pos:end="13:11">+=</operator> <call pos:start="13:13" pos:end="13:32"><name pos:start="13:13" pos:end="13:18">strspn</name><argument_list pos:start="13:19" pos:end="13:32">(<argument pos:start="13:20" pos:end="13:23"><expr pos:start="13:20" pos:end="13:23"><operator pos:start="13:20" pos:end="13:20">*</operator><name pos:start="13:21" pos:end="13:23">buf</name></expr></argument>, <argument pos:start="13:26" pos:end="13:31"><expr pos:start="13:26" pos:end="13:31"><name pos:start="13:26" pos:end="13:31">SPACES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="17:17"><if pos:start="15:5" pos:end="17:17">if <condition pos:start="15:8" pos:end="15:15">(<expr pos:start="15:9" pos:end="15:14"><operator pos:start="15:9" pos:end="15:9">!</operator><operator pos:start="15:10" pos:end="15:10">*</operator><operator pos:start="15:11" pos:end="15:11">*</operator><name pos:start="15:12" pos:end="15:14">buf</name></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:17"><block_content pos:start="17:9" pos:end="17:17">

        <return pos:start="17:9" pos:end="17:17">return <expr pos:start="17:16" pos:end="17:16"><literal type="number" pos:start="17:16" pos:end="17:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:20">/* reset data */</comment>

    <expr_stmt pos:start="23:5" pos:end="23:42"><expr pos:start="23:5" pos:end="23:41"><call pos:start="23:5" pos:end="23:41"><name pos:start="23:5" pos:end="23:10">memset</name><argument_list pos:start="23:11" pos:end="23:41">(<argument pos:start="23:12" pos:end="23:19"><expr pos:start="23:12" pos:end="23:19"><name pos:start="23:12" pos:end="23:19">interval</name></expr></argument>, <argument pos:start="23:22" pos:end="23:22"><expr pos:start="23:22" pos:end="23:22"><literal type="number" pos:start="23:22" pos:end="23:22">0</literal></expr></argument>, <argument pos:start="23:25" pos:end="23:40"><expr pos:start="23:25" pos:end="23:40"><sizeof pos:start="23:25" pos:end="23:40">sizeof<argument_list pos:start="23:31" pos:end="23:40">(<argument pos:start="23:32" pos:end="23:39"><expr pos:start="23:32" pos:end="23:39"><name pos:start="23:32" pos:end="23:39">Interval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:37"><expr pos:start="25:5" pos:end="25:36"><name pos:start="25:5" pos:end="25:19"><name pos:start="25:5" pos:end="25:12">interval</name><operator pos:start="25:13" pos:end="25:14">-&gt;</operator><name pos:start="25:15" pos:end="25:19">index</name></name> <operator pos:start="25:21" pos:end="25:21">=</operator> <name pos:start="25:23" pos:end="25:36">interval_count</name></expr>;</expr_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:35">/* format: INTERVAL COMMANDS */</comment>



    <comment type="block" pos:start="33:5" pos:end="33:24">/* parse interval */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:44"><expr pos:start="35:5" pos:end="35:43"><name pos:start="35:5" pos:end="35:15">intervalstr</name> <operator pos:start="35:17" pos:end="35:17">=</operator> <call pos:start="35:19" pos:end="35:43"><name pos:start="35:19" pos:end="35:30">av_get_token</name><argument_list pos:start="35:31" pos:end="35:43">(<argument pos:start="35:32" pos:end="35:34"><expr pos:start="35:32" pos:end="35:34"><name pos:start="35:32" pos:end="35:34">buf</name></expr></argument>, <argument pos:start="35:37" pos:end="35:42"><expr pos:start="35:37" pos:end="35:42"><name pos:start="35:37" pos:end="35:42">DELIMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="113:15"><if pos:start="37:5" pos:end="113:15">if <condition pos:start="37:8" pos:end="37:38">(<expr pos:start="37:9" pos:end="37:37"><name pos:start="37:9" pos:end="37:19">intervalstr</name> <operator pos:start="37:21" pos:end="37:22">&amp;&amp;</operator> <name pos:start="37:24" pos:end="37:37"><name pos:start="37:24" pos:end="37:34">intervalstr</name><index pos:start="37:35" pos:end="37:37">[<expr pos:start="37:36" pos:end="37:36"><literal type="number" pos:start="37:36" pos:end="37:36">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="37:40" pos:end="113:15">{<block_content pos:start="39:9" pos:end="113:15">

        <decl_stmt pos:start="39:9" pos:end="39:26"><decl pos:start="39:9" pos:end="39:19"><type pos:start="39:9" pos:end="39:14"><name pos:start="39:9" pos:end="39:12">char</name> <modifier pos:start="39:14" pos:end="39:14">*</modifier></type><name pos:start="39:15" pos:end="39:19">start</name></decl>, <decl pos:start="39:22" pos:end="39:25"><type ref="prev" pos:start="39:9" pos:end="39:14"><modifier pos:start="39:22" pos:end="39:22">*</modifier></type><name pos:start="39:23" pos:end="39:25">end</name></decl>;</decl_stmt>



        <expr_stmt pos:start="43:9" pos:end="43:50"><expr pos:start="43:9" pos:end="43:49"><name pos:start="43:9" pos:end="43:13">start</name> <operator pos:start="43:15" pos:end="43:15">=</operator> <call pos:start="43:17" pos:end="43:49"><name pos:start="43:17" pos:end="43:25">av_strtok</name><argument_list pos:start="43:26" pos:end="43:49">(<argument pos:start="43:27" pos:end="43:37"><expr pos:start="43:27" pos:end="43:37"><name pos:start="43:27" pos:end="43:37">intervalstr</name></expr></argument>, <argument pos:start="43:40" pos:end="43:42"><expr pos:start="43:40" pos:end="43:42"><literal type="string" pos:start="43:40" pos:end="43:42">"-"</literal></expr></argument>, <argument pos:start="43:45" pos:end="43:48"><expr pos:start="43:45" pos:end="43:48"><operator pos:start="43:45" pos:end="43:45">&amp;</operator><name pos:start="43:46" pos:end="43:48">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>








        <if_stmt pos:start="52:9" pos:end="57:42"><if pos:start="52:9" pos:end="57:42">if <condition pos:start="52:12" pos:end="52:69">(<expr pos:start="52:13" pos:end="52:68"><operator pos:start="52:13" pos:end="52:13">(</operator><name pos:start="52:14" pos:end="52:16">ret</name> <operator pos:start="52:18" pos:end="52:18">=</operator> <call pos:start="52:20" pos:end="52:63"><name pos:start="52:20" pos:end="52:32">av_parse_time</name><argument_list pos:start="52:33" pos:end="52:63">(<argument pos:start="52:34" pos:end="52:52"><expr pos:start="52:34" pos:end="52:52"><operator pos:start="52:34" pos:end="52:34">&amp;</operator><name pos:start="52:35" pos:end="52:52"><name pos:start="52:35" pos:end="52:42">interval</name><operator pos:start="52:43" pos:end="52:44">-&gt;</operator><name pos:start="52:45" pos:end="52:52">start_ts</name></name></expr></argument>, <argument pos:start="52:55" pos:end="52:59"><expr pos:start="52:55" pos:end="52:59"><name pos:start="52:55" pos:end="52:59">start</name></expr></argument>, <argument pos:start="52:62" pos:end="52:62"><expr pos:start="52:62" pos:end="52:62"><literal type="number" pos:start="52:62" pos:end="52:62">1</literal></expr></argument>)</argument_list></call><operator pos:start="52:64" pos:end="52:64">)</operator> <operator pos:start="52:66" pos:end="52:66">&lt;</operator> <literal type="number" pos:start="52:68" pos:end="52:68">0</literal></expr>)</condition> <block pos:start="52:71" pos:end="57:41">{<block_content pos:start="55:20" pos:end="57:41">


                   <expr_stmt pos:start="55:20" pos:end="57:40"><expr pos:start="55:20" pos:end="55:76"><literal type="string" pos:start="55:20" pos:end="55:76">"Invalid start time specification '%s' in interval #%d\n"</literal></expr><operator pos:start="55:77" pos:end="55:77">,</operator>

                   <expr pos:start="57:20" pos:end="57:24"><name pos:start="57:20" pos:end="57:24">start</name></expr><operator pos:start="57:25" pos:end="57:25">,</operator> <expr pos:start="57:27" pos:end="57:40"><name pos:start="57:27" pos:end="57:40">interval_count</name></expr></expr_stmt>)</block_content></block><empty_stmt pos:start="57:42" pos:end="57:42">;</empty_stmt></if></if_stmt>





        <if_stmt pos:start="63:9" pos:end="91:5"><if pos:start="63:9" pos:end="74:9">if <condition pos:start="63:12" pos:end="63:16">(<expr pos:start="63:13" pos:end="63:15"><name pos:start="63:13" pos:end="63:15">end</name></expr>)</condition> <block pos:start="63:18" pos:end="74:9">{<block_content pos:start="65:13" pos:end="70:44">

            <if_stmt pos:start="65:13" pos:end="70:44"><if pos:start="65:13" pos:end="70:44">if <condition pos:start="65:16" pos:end="65:69">(<expr pos:start="65:17" pos:end="65:68"><operator pos:start="65:17" pos:end="65:17">(</operator><name pos:start="65:18" pos:end="65:20">ret</name> <operator pos:start="65:22" pos:end="65:22">=</operator> <call pos:start="65:24" pos:end="65:63"><name pos:start="65:24" pos:end="65:36">av_parse_time</name><argument_list pos:start="65:37" pos:end="65:63">(<argument pos:start="65:38" pos:end="65:54"><expr pos:start="65:38" pos:end="65:54"><operator pos:start="65:38" pos:end="65:38">&amp;</operator><name pos:start="65:39" pos:end="65:54"><name pos:start="65:39" pos:end="65:46">interval</name><operator pos:start="65:47" pos:end="65:48">-&gt;</operator><name pos:start="65:49" pos:end="65:54">end_ts</name></name></expr></argument>, <argument pos:start="65:57" pos:end="65:59"><expr pos:start="65:57" pos:end="65:59"><name pos:start="65:57" pos:end="65:59">end</name></expr></argument>, <argument pos:start="65:62" pos:end="65:62"><expr pos:start="65:62" pos:end="65:62"><literal type="number" pos:start="65:62" pos:end="65:62">1</literal></expr></argument>)</argument_list></call><operator pos:start="65:64" pos:end="65:64">)</operator> <operator pos:start="65:66" pos:end="65:66">&lt;</operator> <literal type="number" pos:start="65:68" pos:end="65:68">0</literal></expr>)</condition> <block pos:start="65:71" pos:end="70:43">{<block_content pos:start="68:24" pos:end="70:43">


                       <expr_stmt pos:start="68:24" pos:end="70:42"><expr pos:start="68:24" pos:end="68:78"><literal type="string" pos:start="68:24" pos:end="68:78">"Invalid end time specification '%s' in interval #%d\n"</literal></expr><operator pos:start="68:79" pos:end="68:79">,</operator>

                       <expr pos:start="70:24" pos:end="70:26"><name pos:start="70:24" pos:end="70:26">end</name></expr><operator pos:start="70:27" pos:end="70:27">,</operator> <expr pos:start="70:29" pos:end="70:42"><name pos:start="70:29" pos:end="70:42">interval_count</name></expr></expr_stmt>)</block_content></block><empty_stmt pos:start="70:44" pos:end="70:44">;</empty_stmt></if></if_stmt>



        </block_content>}</block></if> <else pos:start="74:11" pos:end="91:5">else <block pos:start="74:16" pos:end="91:5">{<block_content pos:start="76:13" pos:end="86:47">

            <expr_stmt pos:start="76:13" pos:end="76:41"><expr pos:start="76:13" pos:end="76:40"><name pos:start="76:13" pos:end="76:28"><name pos:start="76:13" pos:end="76:20">interval</name><operator pos:start="76:21" pos:end="76:22">-&gt;</operator><name pos:start="76:23" pos:end="76:28">end_ts</name></name> <operator pos:start="76:30" pos:end="76:30">=</operator> <name pos:start="76:32" pos:end="76:40">INT64_MAX</name></expr>;</expr_stmt>


        <if_stmt pos:start="79:9" pos:end="86:47"><if pos:start="79:9" pos:end="86:47">if <condition pos:start="79:12" pos:end="79:50">(<expr pos:start="79:13" pos:end="79:49"><name pos:start="79:13" pos:end="79:28"><name pos:start="79:13" pos:end="79:20">interval</name><operator pos:start="79:21" pos:end="79:22">-&gt;</operator><name pos:start="79:23" pos:end="79:28">end_ts</name></name> <operator pos:start="79:30" pos:end="79:30">&lt;</operator> <name pos:start="79:32" pos:end="79:49"><name pos:start="79:32" pos:end="79:39">interval</name><operator pos:start="79:40" pos:end="79:41">-&gt;</operator><name pos:start="79:42" pos:end="79:49">start_ts</name></name></expr>)</condition> <block pos:start="79:52" pos:end="86:46">{<block_content pos:start="82:20" pos:end="86:46">


                   <expr_stmt pos:start="82:20" pos:end="86:45"><expr pos:start="82:20" pos:end="84:60"><literal type="string" pos:start="82:20" pos:end="82:60">"Invalid end time '%s' in interval #%d: "</literal>

                   <literal type="string" pos:start="84:20" pos:end="84:60">"cannot be lesser than start time '%s'\n"</literal></expr><operator pos:start="84:61" pos:end="84:61">,</operator>

                   <expr pos:start="86:20" pos:end="86:22"><name pos:start="86:20" pos:end="86:22">end</name></expr><operator pos:start="86:23" pos:end="86:23">,</operator> <expr pos:start="86:25" pos:end="86:38"><name pos:start="86:25" pos:end="86:38">interval_count</name></expr><operator pos:start="86:39" pos:end="86:39">,</operator> <expr pos:start="86:41" pos:end="86:45"><name pos:start="86:41" pos:end="86:45">start</name></expr></expr_stmt>)</block_content></block><empty_stmt pos:start="86:47" pos:end="86:47">;</empty_stmt></if></if_stmt>




    </block_content>}</block></else></if_stmt> <if_stmt pos:start="91:7" pos:end="94:75"><else pos:start="91:7" pos:end="94:75">else <block pos:start="91:12" pos:end="94:74">{<block_content pos:start="94:16" pos:end="94:74">


               <expr_stmt pos:start="94:16" pos:end="94:73"><expr pos:start="94:16" pos:end="94:57"><literal type="string" pos:start="94:16" pos:end="94:57">"No interval specified for interval #%d\n"</literal></expr><operator pos:start="94:58" pos:end="94:58">,</operator> <expr pos:start="94:60" pos:end="94:73"><name pos:start="94:60" pos:end="94:73">interval_count</name></expr></expr_stmt>)</block_content></block><empty_stmt pos:start="94:75" pos:end="94:75">;</empty_stmt></else></if_stmt>






    <comment type="block" pos:start="101:5" pos:end="101:24">/* parse commands */</comment>

    <expr_stmt pos:start="103:5" pos:end="105:55"><expr pos:start="103:5" pos:end="105:54"><name pos:start="103:5" pos:end="103:7">ret</name> <operator pos:start="103:9" pos:end="103:9">=</operator> <call pos:start="103:11" pos:end="105:54"><name pos:start="103:11" pos:end="103:24">parse_commands</name><argument_list pos:start="103:25" pos:end="105:54">(<argument pos:start="103:26" pos:end="103:44"><expr pos:start="103:26" pos:end="103:44"><operator pos:start="103:26" pos:end="103:26">&amp;</operator><name pos:start="103:27" pos:end="103:44"><name pos:start="103:27" pos:end="103:34">interval</name><operator pos:start="103:35" pos:end="103:36">-&gt;</operator><name pos:start="103:37" pos:end="103:44">commands</name></name></expr></argument>, <argument pos:start="103:47" pos:end="103:68"><expr pos:start="103:47" pos:end="103:68"><operator pos:start="103:47" pos:end="103:47">&amp;</operator><name pos:start="103:48" pos:end="103:68"><name pos:start="103:48" pos:end="103:55">interval</name><operator pos:start="103:56" pos:end="103:57">-&gt;</operator><name pos:start="103:58" pos:end="103:68">nb_commands</name></name></expr></argument>,

                         <argument pos:start="105:26" pos:end="105:39"><expr pos:start="105:26" pos:end="105:39"><name pos:start="105:26" pos:end="105:39">interval_count</name></expr></argument>, <argument pos:start="105:42" pos:end="105:44"><expr pos:start="105:42" pos:end="105:44"><name pos:start="105:42" pos:end="105:44">buf</name></expr></argument>, <argument pos:start="105:47" pos:end="105:53"><expr pos:start="105:47" pos:end="105:53"><name pos:start="105:47" pos:end="105:53">log_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="109:1" pos:end="109:4"><name pos:start="109:1" pos:end="109:3">end</name>:</label>

    <expr_stmt pos:start="111:5" pos:end="111:25"><expr pos:start="111:5" pos:end="111:24"><call pos:start="111:5" pos:end="111:24"><name pos:start="111:5" pos:end="111:11">av_free</name><argument_list pos:start="111:12" pos:end="111:24">(<argument pos:start="111:13" pos:end="111:23"><expr pos:start="111:13" pos:end="111:23"><name pos:start="111:13" pos:end="111:23">intervalstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="113:5" pos:end="113:15">return <expr pos:start="113:12" pos:end="113:14"><name pos:start="113:12" pos:end="113:14">ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></function>
</unit>
