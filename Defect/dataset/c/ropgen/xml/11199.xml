<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11199.c" pos:tabs="8"><function pos:start="1:1" pos:end="179:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:23">ff_imdct_half_3dn2</name><parameter_list pos:start="1:24" pos:end="1:81">(<parameter pos:start="1:25" pos:end="1:37"><decl pos:start="1:25" pos:end="1:37"><type pos:start="1:25" pos:end="1:37"><name pos:start="1:25" pos:end="1:34">FFTContext</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:37">s</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:56"><decl pos:start="1:40" pos:end="1:56"><type pos:start="1:40" pos:end="1:56"><name pos:start="1:40" pos:end="1:48">FFTSample</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:56">output</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:80"><decl pos:start="1:59" pos:end="1:80"><type pos:start="1:59" pos:end="1:80"><specifier pos:start="1:59" pos:end="1:63">const</specifier> <name pos:start="1:65" pos:end="1:73">FFTSample</name> <modifier pos:start="1:75" pos:end="1:75">*</modifier></type><name pos:start="1:76" pos:end="1:80">input</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="179:1">{<block_content pos:start="5:5" pos:end="177:30">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:13"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">x86_reg</name></type> <name pos:start="5:13" pos:end="5:13">j</name></decl>, <decl pos:start="5:16" pos:end="5:16"><type ref="prev" pos:start="5:5" pos:end="5:11"/><name pos:start="5:16" pos:end="5:16">k</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">long</name></type> <name pos:start="7:10" pos:end="7:10">n</name> <init pos:start="7:12" pos:end="7:25">= <expr pos:start="7:14" pos:end="7:25"><name pos:start="7:14" pos:end="7:25"><name pos:start="7:14" pos:end="7:14">s</name><operator pos:start="7:15" pos:end="7:16">-&gt;</operator><name pos:start="7:17" pos:end="7:25">mdct_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">long</name></type> <name pos:start="9:10" pos:end="9:11">n2</name> <init pos:start="9:13" pos:end="9:20">= <expr pos:start="9:15" pos:end="9:20"><name pos:start="9:15" pos:end="9:15">n</name> <operator pos:start="9:17" pos:end="9:18">&gt;&gt;</operator> <literal type="number" pos:start="9:20" pos:end="9:20">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">long</name></type> <name pos:start="11:10" pos:end="11:11">n4</name> <init pos:start="11:13" pos:end="11:20">= <expr pos:start="11:15" pos:end="11:20"><name pos:start="11:15" pos:end="11:15">n</name> <operator pos:start="11:17" pos:end="11:18">&gt;&gt;</operator> <literal type="number" pos:start="11:20" pos:end="11:20">2</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">long</name></type> <name pos:start="13:10" pos:end="13:11">n8</name> <init pos:start="13:13" pos:end="13:20">= <expr pos:start="13:15" pos:end="13:20"><name pos:start="13:15" pos:end="13:15">n</name> <operator pos:start="13:17" pos:end="13:18">&gt;&gt;</operator> <literal type="number" pos:start="13:20" pos:end="13:20">3</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:39"><decl pos:start="15:5" pos:end="15:38"><type pos:start="15:5" pos:end="15:20"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:18">uint16_t</name> <modifier pos:start="15:20" pos:end="15:20">*</modifier></type><name pos:start="15:21" pos:end="15:26">revtab</name> <init pos:start="15:28" pos:end="15:38">= <expr pos:start="15:30" pos:end="15:38"><name pos:start="15:30" pos:end="15:38"><name pos:start="15:30" pos:end="15:30">s</name><operator pos:start="15:31" pos:end="15:32">-&gt;</operator><name pos:start="15:33" pos:end="15:38">revtab</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:36"><decl pos:start="17:5" pos:end="17:35"><type pos:start="17:5" pos:end="17:21"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:19">FFTSample</name> <modifier pos:start="17:21" pos:end="17:21">*</modifier></type><name pos:start="17:22" pos:end="17:25">tcos</name> <init pos:start="17:27" pos:end="17:35">= <expr pos:start="17:29" pos:end="17:35"><name pos:start="17:29" pos:end="17:35"><name pos:start="17:29" pos:end="17:29">s</name><operator pos:start="17:30" pos:end="17:31">-&gt;</operator><name pos:start="17:32" pos:end="17:35">tcos</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:36"><decl pos:start="19:5" pos:end="19:35"><type pos:start="19:5" pos:end="19:21"><specifier pos:start="19:5" pos:end="19:9">const</specifier> <name pos:start="19:11" pos:end="19:19">FFTSample</name> <modifier pos:start="19:21" pos:end="19:21">*</modifier></type><name pos:start="19:22" pos:end="19:25">tsin</name> <init pos:start="19:27" pos:end="19:35">= <expr pos:start="19:29" pos:end="19:35"><name pos:start="19:29" pos:end="19:35"><name pos:start="19:29" pos:end="19:29">s</name><operator pos:start="19:30" pos:end="19:31">-&gt;</operator><name pos:start="19:32" pos:end="19:35">tsin</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:31"><decl pos:start="21:5" pos:end="21:24"><type pos:start="21:5" pos:end="21:21"><specifier pos:start="21:5" pos:end="21:9">const</specifier> <name pos:start="21:11" pos:end="21:19">FFTSample</name> <modifier pos:start="21:21" pos:end="21:21">*</modifier></type><name pos:start="21:22" pos:end="21:24">in1</name></decl>, <decl pos:start="21:27" pos:end="21:30"><type ref="prev" pos:start="21:5" pos:end="21:21"><modifier pos:start="21:27" pos:end="21:27">*</modifier></type><name pos:start="21:28" pos:end="21:30">in2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:41"><decl pos:start="23:5" pos:end="23:40"><type pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:14">FFTComplex</name> <modifier pos:start="23:16" pos:end="23:16">*</modifier></type><name pos:start="23:17" pos:end="23:17">z</name> <init pos:start="23:19" pos:end="23:40">= <expr pos:start="23:21" pos:end="23:40"><operator pos:start="23:21" pos:end="23:21">(</operator><name pos:start="23:22" pos:end="23:31">FFTComplex</name> <operator pos:start="23:33" pos:end="23:33">*</operator><operator pos:start="23:34" pos:end="23:34">)</operator><name pos:start="23:35" pos:end="23:40">output</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:22">/* pre rotation */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:16"><expr pos:start="29:5" pos:end="29:15"><name pos:start="29:5" pos:end="29:7">in1</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <name pos:start="29:11" pos:end="29:15">input</name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="34:0"><expr pos:start="31:5" pos:end="31:24"><name pos:start="31:5" pos:end="31:7">in2</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <name pos:start="31:11" pos:end="31:15">input</name> <operator pos:start="31:17" pos:end="31:17">+</operator> <name pos:start="31:19" pos:end="31:20">n2</name> <operator pos:start="31:22" pos:end="31:22">-</operator> <literal type="number" pos:start="31:24" pos:end="31:24">1</literal></expr>;</expr_stmt>

<cpp:ifdef pos:start="33:1" pos:end="33:23">#<cpp:directive pos:start="33:2" pos:end="33:6">ifdef</cpp:directive> <name pos:start="33:8" pos:end="33:23">EMULATE_3DNOWEXT</name></cpp:ifdef>

    <asm pos:start="35:5" pos:end="38:0">__asm__ <specifier pos:start="35:13" pos:end="35:20">volatile</specifier>("movd %0, %%mm7" ::"r"(1&lt;&lt;31));</asm>

<cpp:endif pos:start="37:1" pos:end="37:6">#<cpp:directive pos:start="37:2" pos:end="37:6">endif</cpp:directive></cpp:endif>

    <for pos:start="39:5" pos:end="93:5">for<control pos:start="39:8" pos:end="39:27">(<init pos:start="39:9" pos:end="39:14"><expr pos:start="39:9" pos:end="39:13"><name pos:start="39:9" pos:end="39:9">k</name> <operator pos:start="39:11" pos:end="39:11">=</operator> <literal type="number" pos:start="39:13" pos:end="39:13">0</literal></expr>;</init> <condition pos:start="39:16" pos:end="39:22"><expr pos:start="39:16" pos:end="39:21"><name pos:start="39:16" pos:end="39:16">k</name> <operator pos:start="39:18" pos:end="39:18">&lt;</operator> <name pos:start="39:20" pos:end="39:21">n4</name></expr>;</condition> <incr pos:start="39:24" pos:end="39:26"><expr pos:start="39:24" pos:end="39:26"><name pos:start="39:24" pos:end="39:24">k</name><operator pos:start="39:25" pos:end="39:26">++</operator></expr></incr>)</control> <block pos:start="39:29" pos:end="93:5">{<block_content pos:start="43:9" pos:end="91:10">

        <comment type="line" pos:start="41:9" pos:end="41:91">// FIXME a single block is faster, but gcc 2.95 and 3.4.x on 32bit can't compile it</comment>

        <asm pos:start="43:9" pos:end="83:10">__asm__ <specifier pos:start="43:17" pos:end="43:24">volatile</specifier>(

            "movd         %0, %%mm0 \n"

            "movd         %2, %%mm1 \n"

            "punpckldq    %1, %%mm0 \n"

            "punpckldq    %3, %%mm1 \n"

            "movq      %%mm0, %%mm2 \n"

            PSWAPD(    %%mm1, %%mm3 )

            "pfmul     %%mm1, %%mm0 \n"

            "pfmul     %%mm3, %%mm2 \n"

<cpp:ifdef pos:start="61:1" pos:end="61:23">#<cpp:directive pos:start="61:2" pos:end="61:6">ifdef</cpp:directive> <name pos:start="61:8" pos:end="61:23">EMULATE_3DNOWEXT</name></cpp:ifdef>

            "movq      %%mm0, %%mm1 \n"

            "punpckhdq %%mm2, %%mm0 \n"

            "punpckldq %%mm2, %%mm1 \n"

            "pxor      %%mm7, %%mm0 \n"

            "pfadd     %%mm1, %%mm0 \n"

<cpp:else pos:start="73:1" pos:end="73:5">#<cpp:directive pos:start="73:2" pos:end="73:5">else</cpp:directive></cpp:else>

            "pfpnacc   %%mm2, %%mm0 \n"

<cpp:endif pos:start="77:1" pos:end="77:6">#<cpp:directive pos:start="77:2" pos:end="77:6">endif</cpp:directive></cpp:endif>

            ::"m"(in2[-2*k]), "m"(in1[2*k]),

              "m"(tcos[k]), "m"(tsin[k])

        );</asm>

        <asm pos:start="85:9" pos:end="91:10">__asm__ <specifier pos:start="85:17" pos:end="85:24">volatile</specifier>(

            "movq    %%mm0, %0    \n\t"

            :"=m"(z[revtab[k]])

        );</asm>

    </block_content>}</block></for>



    <expr_stmt pos:start="97:5" pos:end="122:0"><expr pos:start="97:5" pos:end="97:37"><call pos:start="97:5" pos:end="97:37"><name pos:start="97:5" pos:end="97:24">ff_fft_dispatch_3dn2</name><argument_list pos:start="97:25" pos:end="97:37">(<argument pos:start="97:26" pos:end="97:26"><expr pos:start="97:26" pos:end="97:26"><name pos:start="97:26" pos:end="97:26">z</name></expr></argument>, <argument pos:start="97:29" pos:end="97:36"><expr pos:start="97:29" pos:end="97:36"><name pos:start="97:29" pos:end="97:36"><name pos:start="97:29" pos:end="97:29">s</name><operator pos:start="97:30" pos:end="97:31">-&gt;</operator><name pos:start="97:32" pos:end="97:36">nbits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:define pos:start="101:1" pos:end="121:37">#<cpp:directive pos:start="101:2" pos:end="101:7">define</cpp:directive> <cpp:macro pos:start="101:9" pos:end="101:23"><name pos:start="101:9" pos:end="101:12">CMUL</name><parameter_list pos:start="101:13" pos:end="101:23">(<parameter pos:start="101:14" pos:end="101:14"><type pos:start="101:14" pos:end="101:14"><name pos:start="101:14" pos:end="101:14">j</name></type></parameter>,<parameter pos:start="101:16" pos:end="101:18"><type pos:start="101:16" pos:end="101:18"><name pos:start="101:16" pos:end="101:18">mm0</name></type></parameter>,<parameter pos:start="101:20" pos:end="101:22"><type pos:start="101:20" pos:end="101:22"><name pos:start="101:20" pos:end="101:22">mm1</name></type></parameter>)</parameter_list></cpp:macro>\

        <cpp:value pos:start="103:9" pos:end="121:37">"movq  (%2,"#j",2), %%mm6 \n"\

        "movq 8(%2,"#j",2), "#mm0"\n"\

        "movq        %%mm6, "#mm1"\n"\

        "movq        "#mm0",%%mm7 \n"\

        "pfmul   (%3,"#j"), %%mm6 \n"\

        "pfmul   (%4,"#j"), "#mm0"\n"\

        "pfmul   (%4,"#j"), "#mm1"\n"\

        "pfmul   (%3,"#j"), %%mm7 \n"\

        "pfsub       %%mm6, "#mm0"\n"\

        "pfadd       %%mm7, "#mm1"\n"</cpp:value></cpp:define>



    <comment type="block" pos:start="125:5" pos:end="125:23">/* post rotation */</comment>

    <expr_stmt pos:start="127:5" pos:end="127:12"><expr pos:start="127:5" pos:end="127:11"><name pos:start="127:5" pos:end="127:5">j</name> <operator pos:start="127:7" pos:end="127:7">=</operator> <operator pos:start="127:9" pos:end="127:9">-</operator><name pos:start="127:10" pos:end="127:11">n2</name></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:13"><expr pos:start="129:5" pos:end="129:12"><name pos:start="129:5" pos:end="129:5">k</name> <operator pos:start="129:7" pos:end="129:7">=</operator> <name pos:start="129:9" pos:end="129:10">n2</name><operator pos:start="129:11" pos:end="129:11">-</operator><literal type="number" pos:start="129:12" pos:end="129:12">8</literal></expr>;</expr_stmt>

    <asm pos:start="131:5" pos:end="175:6">__asm__ <specifier pos:start="131:13" pos:end="131:20">volatile</specifier>(

        "1: \n"

        CMUL(%0, %%mm0, %%mm1)

        CMUL(%1, %%mm2, %%mm3)

        "movd   %%mm0,  (%2,%0,2) \n"

        "movd   %%mm1,12(%2,%1,2) \n"

        "movd   %%mm2,  (%2,%1,2) \n"

        "movd   %%mm3,12(%2,%0,2) \n"

        "psrlq  $32,   %%mm0 \n"

        "psrlq  $32,   %%mm1 \n"

        "psrlq  $32,   %%mm2 \n"

        "psrlq  $32,   %%mm3 \n"

        "movd   %%mm0, 8(%2,%0,2) \n"

        "movd   %%mm1, 4(%2,%1,2) \n"

        "movd   %%mm2, 8(%2,%1,2) \n"

        "movd   %%mm3, 4(%2,%0,2) \n"

        "sub $8, %1 \n"

        "add $8, %0 \n"

        "jl 1b \n"

        :"+r"(j), "+r"(k)

        :"r"(z+n8), "r"(tcos+n8), "r"(tsin+n8)

        :"memory"

    );</asm>

    <asm pos:start="177:5" pos:end="177:30">__asm__ <specifier pos:start="177:13" pos:end="177:20">volatile</specifier>("femms");</asm>

</block_content>}</block></function>
</unit>
