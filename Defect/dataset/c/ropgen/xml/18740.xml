<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18740.c" pos:tabs="8"><function pos:start="1:1" pos:end="193:1"><type pos:start="1:1" pos:end="1:12"><name pos:start="1:1" pos:end="1:12">coroutine_fn</name></type> <name pos:start="1:14" pos:end="1:35">iscsi_co_pwrite_zeroes</name><parameter_list pos:start="1:36" pos:end="3:70">(<parameter pos:start="1:37" pos:end="1:56"><decl pos:start="1:37" pos:end="1:56"><type pos:start="1:37" pos:end="1:56"><name pos:start="1:37" pos:end="1:52">BlockDriverState</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:56">bs</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:72"><decl pos:start="1:59" pos:end="1:72"><type pos:start="1:59" pos:end="1:72"><name pos:start="1:59" pos:end="1:65">int64_t</name></type> <name pos:start="1:67" pos:end="1:72">offset</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:45"><decl pos:start="3:37" pos:end="3:45"><type pos:start="3:37" pos:end="3:45"><name pos:start="3:37" pos:end="3:39">int</name></type> <name pos:start="3:41" pos:end="3:45">count</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:69"><decl pos:start="3:48" pos:end="3:69"><type pos:start="3:48" pos:end="3:69"><name pos:start="3:48" pos:end="3:63">BdrvRequestFlags</name></type> <name pos:start="3:65" pos:end="3:69">flags</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="193:1">{<block_content pos:start="7:5" pos:end="191:13">

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">IscsiLun</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:22">iscsilun</name> <init pos:start="7:24" pos:end="7:35">= <expr pos:start="7:26" pos:end="7:35"><name pos:start="7:26" pos:end="7:35"><name pos:start="7:26" pos:end="7:27">bs</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:35">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:20">IscsiTask</name></name></type> <name pos:start="9:22" pos:end="9:26">iTask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:16">lba</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:22">nb_blocks</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:49"><decl pos:start="15:5" pos:end="15:48"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">bool</name></type> <name pos:start="15:10" pos:end="15:22">use_16_for_ws</name> <init pos:start="15:24" pos:end="15:48">= <expr pos:start="15:26" pos:end="15:48"><name pos:start="15:26" pos:end="15:48"><name pos:start="15:26" pos:end="15:33">iscsilun</name><operator pos:start="15:34" pos:end="15:35">-&gt;</operator><name pos:start="15:36" pos:end="15:48">use_16_for_rw</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:62">(<expr pos:start="19:9" pos:end="19:61"><operator pos:start="19:9" pos:end="19:9">!</operator><call pos:start="19:10" pos:end="19:61"><name pos:start="19:10" pos:end="19:36">is_byte_request_lun_aligned</name><argument_list pos:start="19:37" pos:end="19:61">(<argument pos:start="19:38" pos:end="19:43"><expr pos:start="19:38" pos:end="19:43"><name pos:start="19:38" pos:end="19:43">offset</name></expr></argument>, <argument pos:start="19:46" pos:end="19:50"><expr pos:start="19:46" pos:end="19:50"><name pos:start="19:46" pos:end="19:50">count</name></expr></argument>, <argument pos:start="19:53" pos:end="19:60"><expr pos:start="19:53" pos:end="19:60"><name pos:start="19:53" pos:end="19:60">iscsilun</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="19:64" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:24">

        <return pos:start="21:9" pos:end="21:24">return <expr pos:start="21:16" pos:end="21:23"><operator pos:start="21:16" pos:end="21:16">-</operator><name pos:start="21:17" pos:end="21:23">ENOTSUP</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="27:5" pos:end="49:5"><if pos:start="27:5" pos:end="49:5">if <condition pos:start="27:8" pos:end="27:35">(<expr pos:start="27:9" pos:end="27:34"><name pos:start="27:9" pos:end="27:13">flags</name> <operator pos:start="27:15" pos:end="27:15">&amp;</operator> <name pos:start="27:17" pos:end="27:34">BDRV_REQ_MAY_UNMAP</name></expr>)</condition> <block pos:start="27:37" pos:end="49:5">{<block_content pos:start="29:9" pos:end="47:9">

        <if_stmt pos:start="29:9" pos:end="35:9"><if pos:start="29:9" pos:end="35:9">if <condition pos:start="29:12" pos:end="29:53">(<expr pos:start="29:13" pos:end="29:52"><operator pos:start="29:13" pos:end="29:13">!</operator><name pos:start="29:14" pos:end="29:26">use_16_for_ws</name> <operator pos:start="29:28" pos:end="29:29">&amp;&amp;</operator> <operator pos:start="29:31" pos:end="29:31">!</operator><name pos:start="29:32" pos:end="29:52"><name pos:start="29:32" pos:end="29:39">iscsilun</name><operator pos:start="29:40" pos:end="29:41">-&gt;</operator><name pos:start="29:42" pos:end="29:44">lbp</name><operator pos:start="29:45" pos:end="29:45">.</operator><name pos:start="29:46" pos:end="29:52">lbpws10</name></name></expr>)</condition> <block pos:start="29:55" pos:end="35:9">{<block_content pos:start="33:13" pos:end="33:33">

            <comment type="block" pos:start="31:13" pos:end="31:71">/* WRITESAME10 with UNMAP is unsupported try WRITESAME16 */</comment>

            <expr_stmt pos:start="33:13" pos:end="33:33"><expr pos:start="33:13" pos:end="33:32"><name pos:start="33:13" pos:end="33:25">use_16_for_ws</name> <operator pos:start="33:27" pos:end="33:27">=</operator> <name pos:start="33:29" pos:end="33:32">true</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="37:9" pos:end="47:9"><if pos:start="37:9" pos:end="47:9">if <condition pos:start="37:12" pos:end="37:50">(<expr pos:start="37:13" pos:end="37:49"><name pos:start="37:13" pos:end="37:25">use_16_for_ws</name> <operator pos:start="37:27" pos:end="37:28">&amp;&amp;</operator> <operator pos:start="37:30" pos:end="37:30">!</operator><name pos:start="37:31" pos:end="37:49"><name pos:start="37:31" pos:end="37:38">iscsilun</name><operator pos:start="37:39" pos:end="37:40">-&gt;</operator><name pos:start="37:41" pos:end="37:43">lbp</name><operator pos:start="37:44" pos:end="37:44">.</operator><name pos:start="37:45" pos:end="37:49">lbpws</name></name></expr>)</condition> <block pos:start="37:52" pos:end="47:9">{<block_content pos:start="43:13" pos:end="45:52">

            <comment type="block" pos:start="39:13" pos:end="41:64">/* WRITESAME16 with UNMAP is not supported by the target,

             * fall back and try WRITESAME10/16 without UNMAP */</comment>

            <expr_stmt pos:start="43:13" pos:end="43:41"><expr pos:start="43:13" pos:end="43:40"><name pos:start="43:13" pos:end="43:17">flags</name> <operator pos:start="43:19" pos:end="43:20">&amp;=</operator> <operator pos:start="43:22" pos:end="43:22">~</operator><name pos:start="43:23" pos:end="43:40">BDRV_REQ_MAY_UNMAP</name></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:52"><expr pos:start="45:13" pos:end="45:51"><name pos:start="45:13" pos:end="45:25">use_16_for_ws</name> <operator pos:start="45:27" pos:end="45:27">=</operator> <name pos:start="45:29" pos:end="45:51"><name pos:start="45:29" pos:end="45:36">iscsilun</name><operator pos:start="45:37" pos:end="45:38">-&gt;</operator><name pos:start="45:39" pos:end="45:51">use_16_for_rw</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:67">(<expr pos:start="53:9" pos:end="53:66"><operator pos:start="53:9" pos:end="53:9">!</operator><operator pos:start="53:10" pos:end="53:10">(</operator><name pos:start="53:11" pos:end="53:15">flags</name> <operator pos:start="53:17" pos:end="53:17">&amp;</operator> <name pos:start="53:19" pos:end="53:36">BDRV_REQ_MAY_UNMAP</name><operator pos:start="53:37" pos:end="53:37">)</operator> <operator pos:start="53:39" pos:end="53:40">&amp;&amp;</operator> <operator pos:start="53:42" pos:end="53:42">!</operator><name pos:start="53:43" pos:end="53:66"><name pos:start="53:43" pos:end="53:50">iscsilun</name><operator pos:start="53:51" pos:end="53:52">-&gt;</operator><name pos:start="53:53" pos:end="53:66">has_write_same</name></name></expr>)</condition> <block pos:start="53:69" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:24">

        <comment type="block" pos:start="55:9" pos:end="55:68">/* WRITESAME without UNMAP is not supported by the target */</comment>

        <return pos:start="57:9" pos:end="57:24">return <expr pos:start="57:16" pos:end="57:23"><operator pos:start="57:16" pos:end="57:16">-</operator><name pos:start="57:17" pos:end="57:23">ENOTSUP</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:40"><expr pos:start="63:5" pos:end="63:39"><name pos:start="63:5" pos:end="63:7">lba</name> <operator pos:start="63:9" pos:end="63:9">=</operator> <name pos:start="63:11" pos:end="63:16">offset</name> <operator pos:start="63:18" pos:end="63:18">/</operator> <name pos:start="63:20" pos:end="63:39"><name pos:start="63:20" pos:end="63:27">iscsilun</name><operator pos:start="63:28" pos:end="63:29">-&gt;</operator><name pos:start="63:30" pos:end="63:39">block_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:45"><expr pos:start="65:5" pos:end="65:44"><name pos:start="65:5" pos:end="65:13">nb_blocks</name> <operator pos:start="65:15" pos:end="65:15">=</operator> <name pos:start="65:17" pos:end="65:21">count</name> <operator pos:start="65:23" pos:end="65:23">/</operator> <name pos:start="65:25" pos:end="65:44"><name pos:start="65:25" pos:end="65:32">iscsilun</name><operator pos:start="65:33" pos:end="65:34">-&gt;</operator><name pos:start="65:35" pos:end="65:44">block_size</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="69:5" pos:end="79:5"><if pos:start="69:5" pos:end="79:5">if <condition pos:start="69:8" pos:end="69:36">(<expr pos:start="69:9" pos:end="69:35"><name pos:start="69:9" pos:end="69:27"><name pos:start="69:9" pos:end="69:16">iscsilun</name><operator pos:start="69:17" pos:end="69:18">-&gt;</operator><name pos:start="69:19" pos:end="69:27">zeroblock</name></name> <operator pos:start="69:29" pos:end="69:30">==</operator> <name pos:start="69:32" pos:end="69:35">NULL</name></expr>)</condition> <block pos:start="69:38" pos:end="79:5">{<block_content pos:start="71:9" pos:end="77:9">

        <expr_stmt pos:start="71:9" pos:end="71:66"><expr pos:start="71:9" pos:end="71:65"><name pos:start="71:9" pos:end="71:27"><name pos:start="71:9" pos:end="71:16">iscsilun</name><operator pos:start="71:17" pos:end="71:18">-&gt;</operator><name pos:start="71:19" pos:end="71:27">zeroblock</name></name> <operator pos:start="71:29" pos:end="71:29">=</operator> <call pos:start="71:31" pos:end="71:65"><name pos:start="71:31" pos:end="71:43">g_try_malloc0</name><argument_list pos:start="71:44" pos:end="71:65">(<argument pos:start="71:45" pos:end="71:64"><expr pos:start="71:45" pos:end="71:64"><name pos:start="71:45" pos:end="71:64"><name pos:start="71:45" pos:end="71:52">iscsilun</name><operator pos:start="71:53" pos:end="71:54">-&gt;</operator><name pos:start="71:55" pos:end="71:64">block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="73:9" pos:end="77:9"><if pos:start="73:9" pos:end="77:9">if <condition pos:start="73:12" pos:end="73:40">(<expr pos:start="73:13" pos:end="73:39"><name pos:start="73:13" pos:end="73:31"><name pos:start="73:13" pos:end="73:20">iscsilun</name><operator pos:start="73:21" pos:end="73:22">-&gt;</operator><name pos:start="73:23" pos:end="73:31">zeroblock</name></name> <operator pos:start="73:33" pos:end="73:34">==</operator> <name pos:start="73:36" pos:end="73:39">NULL</name></expr>)</condition> <block pos:start="73:42" pos:end="77:9">{<block_content pos:start="75:13" pos:end="75:27">

            <return pos:start="75:13" pos:end="75:27">return <expr pos:start="75:20" pos:end="75:26"><operator pos:start="75:20" pos:end="75:20">-</operator><name pos:start="75:21" pos:end="75:26">ENOMEM</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:46"><expr pos:start="83:5" pos:end="83:45"><call pos:start="83:5" pos:end="83:45"><name pos:start="83:5" pos:end="83:27">iscsi_co_init_iscsitask</name><argument_list pos:start="83:28" pos:end="83:45">(<argument pos:start="83:29" pos:end="83:36"><expr pos:start="83:29" pos:end="83:36"><name pos:start="83:29" pos:end="83:36">iscsilun</name></expr></argument>, <argument pos:start="83:39" pos:end="83:44"><expr pos:start="83:39" pos:end="83:44"><operator pos:start="83:39" pos:end="83:39">&amp;</operator><name pos:start="83:40" pos:end="83:44">iTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="85:1" pos:end="85:6"><name pos:start="85:1" pos:end="85:5">retry</name>:</label>

    <if_stmt pos:start="87:5" pos:end="107:5"><if pos:start="87:5" pos:end="97:5">if <condition pos:start="87:8" pos:end="87:22">(<expr pos:start="87:9" pos:end="87:21"><name pos:start="87:9" pos:end="87:21">use_16_for_ws</name></expr>)</condition> <block pos:start="87:24" pos:end="97:5">{<block_content pos:start="89:9" pos:end="95:79">

        <expr_stmt pos:start="89:9" pos:end="95:79"><expr pos:start="89:9" pos:end="95:78"><name pos:start="89:9" pos:end="89:18"><name pos:start="89:9" pos:end="89:13">iTask</name><operator pos:start="89:14" pos:end="89:14">.</operator><name pos:start="89:15" pos:end="89:18">task</name></name> <operator pos:start="89:20" pos:end="89:20">=</operator> <call pos:start="89:22" pos:end="95:78"><name pos:start="89:22" pos:end="89:43">iscsi_writesame16_task</name><argument_list pos:start="89:44" pos:end="95:78">(<argument pos:start="89:45" pos:end="89:59"><expr pos:start="89:45" pos:end="89:59"><name pos:start="89:45" pos:end="89:59"><name pos:start="89:45" pos:end="89:52">iscsilun</name><operator pos:start="89:53" pos:end="89:54">-&gt;</operator><name pos:start="89:55" pos:end="89:59">iscsi</name></name></expr></argument>, <argument pos:start="89:62" pos:end="89:74"><expr pos:start="89:62" pos:end="89:74"><name pos:start="89:62" pos:end="89:74"><name pos:start="89:62" pos:end="89:69">iscsilun</name><operator pos:start="89:70" pos:end="89:71">-&gt;</operator><name pos:start="89:72" pos:end="89:74">lun</name></name></expr></argument>, <argument pos:start="89:77" pos:end="89:79"><expr pos:start="89:77" pos:end="89:79"><name pos:start="89:77" pos:end="89:79">lba</name></expr></argument>,

                                            <argument pos:start="91:45" pos:end="91:63"><expr pos:start="91:45" pos:end="91:63"><name pos:start="91:45" pos:end="91:63"><name pos:start="91:45" pos:end="91:52">iscsilun</name><operator pos:start="91:53" pos:end="91:54">-&gt;</operator><name pos:start="91:55" pos:end="91:63">zeroblock</name></name></expr></argument>, <argument pos:start="91:66" pos:end="91:85"><expr pos:start="91:66" pos:end="91:85"><name pos:start="91:66" pos:end="91:85"><name pos:start="91:66" pos:end="91:73">iscsilun</name><operator pos:start="91:74" pos:end="91:75">-&gt;</operator><name pos:start="91:76" pos:end="91:85">block_size</name></name></expr></argument>,

                                            <argument pos:start="93:45" pos:end="93:53"><expr pos:start="93:45" pos:end="93:53"><name pos:start="93:45" pos:end="93:53">nb_blocks</name></expr></argument>, <argument pos:start="93:56" pos:end="93:56"><expr pos:start="93:56" pos:end="93:56"><literal type="number" pos:start="93:56" pos:end="93:56">0</literal></expr></argument>, <argument pos:start="93:59" pos:end="93:88"><expr pos:start="93:59" pos:end="93:88"><operator pos:start="93:59" pos:end="93:59">!</operator><operator pos:start="93:60" pos:end="93:60">!</operator><operator pos:start="93:61" pos:end="93:61">(</operator><name pos:start="93:62" pos:end="93:66">flags</name> <operator pos:start="93:68" pos:end="93:68">&amp;</operator> <name pos:start="93:70" pos:end="93:87">BDRV_REQ_MAY_UNMAP</name><operator pos:start="93:88" pos:end="93:88">)</operator></expr></argument>,

                                            <argument pos:start="95:45" pos:end="95:45"><expr pos:start="95:45" pos:end="95:45"><literal type="number" pos:start="95:45" pos:end="95:45">0</literal></expr></argument>, <argument pos:start="95:48" pos:end="95:48"><expr pos:start="95:48" pos:end="95:48"><literal type="number" pos:start="95:48" pos:end="95:48">0</literal></expr></argument>, <argument pos:start="95:51" pos:end="95:69"><expr pos:start="95:51" pos:end="95:69"><name pos:start="95:51" pos:end="95:69">iscsi_co_generic_cb</name></expr></argument>, <argument pos:start="95:72" pos:end="95:77"><expr pos:start="95:72" pos:end="95:77"><operator pos:start="95:72" pos:end="95:72">&amp;</operator><name pos:start="95:73" pos:end="95:77">iTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="97:7" pos:end="107:5">else <block pos:start="97:12" pos:end="107:5">{<block_content pos:start="99:9" pos:end="105:79">

        <expr_stmt pos:start="99:9" pos:end="105:79"><expr pos:start="99:9" pos:end="105:78"><name pos:start="99:9" pos:end="99:18"><name pos:start="99:9" pos:end="99:13">iTask</name><operator pos:start="99:14" pos:end="99:14">.</operator><name pos:start="99:15" pos:end="99:18">task</name></name> <operator pos:start="99:20" pos:end="99:20">=</operator> <call pos:start="99:22" pos:end="105:78"><name pos:start="99:22" pos:end="99:43">iscsi_writesame10_task</name><argument_list pos:start="99:44" pos:end="105:78">(<argument pos:start="99:45" pos:end="99:59"><expr pos:start="99:45" pos:end="99:59"><name pos:start="99:45" pos:end="99:59"><name pos:start="99:45" pos:end="99:52">iscsilun</name><operator pos:start="99:53" pos:end="99:54">-&gt;</operator><name pos:start="99:55" pos:end="99:59">iscsi</name></name></expr></argument>, <argument pos:start="99:62" pos:end="99:74"><expr pos:start="99:62" pos:end="99:74"><name pos:start="99:62" pos:end="99:74"><name pos:start="99:62" pos:end="99:69">iscsilun</name><operator pos:start="99:70" pos:end="99:71">-&gt;</operator><name pos:start="99:72" pos:end="99:74">lun</name></name></expr></argument>, <argument pos:start="99:77" pos:end="99:79"><expr pos:start="99:77" pos:end="99:79"><name pos:start="99:77" pos:end="99:79">lba</name></expr></argument>,

                                            <argument pos:start="101:45" pos:end="101:63"><expr pos:start="101:45" pos:end="101:63"><name pos:start="101:45" pos:end="101:63"><name pos:start="101:45" pos:end="101:52">iscsilun</name><operator pos:start="101:53" pos:end="101:54">-&gt;</operator><name pos:start="101:55" pos:end="101:63">zeroblock</name></name></expr></argument>, <argument pos:start="101:66" pos:end="101:85"><expr pos:start="101:66" pos:end="101:85"><name pos:start="101:66" pos:end="101:85"><name pos:start="101:66" pos:end="101:73">iscsilun</name><operator pos:start="101:74" pos:end="101:75">-&gt;</operator><name pos:start="101:76" pos:end="101:85">block_size</name></name></expr></argument>,

                                            <argument pos:start="103:45" pos:end="103:53"><expr pos:start="103:45" pos:end="103:53"><name pos:start="103:45" pos:end="103:53">nb_blocks</name></expr></argument>, <argument pos:start="103:56" pos:end="103:56"><expr pos:start="103:56" pos:end="103:56"><literal type="number" pos:start="103:56" pos:end="103:56">0</literal></expr></argument>, <argument pos:start="103:59" pos:end="103:88"><expr pos:start="103:59" pos:end="103:88"><operator pos:start="103:59" pos:end="103:59">!</operator><operator pos:start="103:60" pos:end="103:60">!</operator><operator pos:start="103:61" pos:end="103:61">(</operator><name pos:start="103:62" pos:end="103:66">flags</name> <operator pos:start="103:68" pos:end="103:68">&amp;</operator> <name pos:start="103:70" pos:end="103:87">BDRV_REQ_MAY_UNMAP</name><operator pos:start="103:88" pos:end="103:88">)</operator></expr></argument>,

                                            <argument pos:start="105:45" pos:end="105:45"><expr pos:start="105:45" pos:end="105:45"><literal type="number" pos:start="105:45" pos:end="105:45">0</literal></expr></argument>, <argument pos:start="105:48" pos:end="105:48"><expr pos:start="105:48" pos:end="105:48"><literal type="number" pos:start="105:48" pos:end="105:48">0</literal></expr></argument>, <argument pos:start="105:51" pos:end="105:69"><expr pos:start="105:51" pos:end="105:69"><name pos:start="105:51" pos:end="105:69">iscsi_co_generic_cb</name></expr></argument>, <argument pos:start="105:72" pos:end="105:77"><expr pos:start="105:72" pos:end="105:77"><operator pos:start="105:72" pos:end="105:72">&amp;</operator><name pos:start="105:73" pos:end="105:77">iTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="109:5" pos:end="113:5"><if pos:start="109:5" pos:end="113:5">if <condition pos:start="109:8" pos:end="109:27">(<expr pos:start="109:9" pos:end="109:26"><name pos:start="109:9" pos:end="109:18"><name pos:start="109:9" pos:end="109:13">iTask</name><operator pos:start="109:14" pos:end="109:14">.</operator><name pos:start="109:15" pos:end="109:18">task</name></name> <operator pos:start="109:20" pos:end="109:21">==</operator> <name pos:start="109:23" pos:end="109:26">NULL</name></expr>)</condition> <block pos:start="109:29" pos:end="113:5">{<block_content pos:start="111:9" pos:end="111:23">

        <return pos:start="111:9" pos:end="111:23">return <expr pos:start="111:16" pos:end="111:22"><operator pos:start="111:16" pos:end="111:16">-</operator><name pos:start="111:17" pos:end="111:22">ENOMEM</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <while pos:start="117:5" pos:end="123:5">while <condition pos:start="117:11" pos:end="117:27">(<expr pos:start="117:12" pos:end="117:26"><operator pos:start="117:12" pos:end="117:12">!</operator><name pos:start="117:13" pos:end="117:26"><name pos:start="117:13" pos:end="117:17">iTask</name><operator pos:start="117:18" pos:end="117:18">.</operator><name pos:start="117:19" pos:end="117:26">complete</name></name></expr>)</condition> <block pos:start="117:29" pos:end="123:5">{<block_content pos:start="119:9" pos:end="121:31">

        <expr_stmt pos:start="119:9" pos:end="119:35"><expr pos:start="119:9" pos:end="119:34"><call pos:start="119:9" pos:end="119:34"><name pos:start="119:9" pos:end="119:24">iscsi_set_events</name><argument_list pos:start="119:25" pos:end="119:34">(<argument pos:start="119:26" pos:end="119:33"><expr pos:start="119:26" pos:end="119:33"><name pos:start="119:26" pos:end="119:33">iscsilun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:31"><expr pos:start="121:9" pos:end="121:30"><call pos:start="121:9" pos:end="121:30"><name pos:start="121:9" pos:end="121:28">qemu_coroutine_yield</name><argument_list pos:start="121:29" pos:end="121:30">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="127:5" pos:end="143:5"><if pos:start="127:5" pos:end="143:5">if <condition pos:start="127:8" pos:end="133:73">(<expr pos:start="127:9" pos:end="133:72"><name pos:start="127:9" pos:end="127:20"><name pos:start="127:9" pos:end="127:13">iTask</name><operator pos:start="127:14" pos:end="127:14">.</operator><name pos:start="127:15" pos:end="127:20">status</name></name> <operator pos:start="127:22" pos:end="127:23">==</operator> <name pos:start="127:25" pos:end="127:51">SCSI_STATUS_CHECK_CONDITION</name> <operator pos:start="127:53" pos:end="127:54">&amp;&amp;</operator>

        <name pos:start="129:9" pos:end="129:29"><name pos:start="129:9" pos:end="129:13">iTask</name><operator pos:start="129:14" pos:end="129:14">.</operator><name pos:start="129:15" pos:end="129:18">task</name><operator pos:start="129:19" pos:end="129:20">-&gt;</operator><name pos:start="129:21" pos:end="129:25">sense</name><operator pos:start="129:26" pos:end="129:26">.</operator><name pos:start="129:27" pos:end="129:29">key</name></name> <operator pos:start="129:31" pos:end="129:32">==</operator> <name pos:start="129:34" pos:end="129:59">SCSI_SENSE_ILLEGAL_REQUEST</name> <operator pos:start="129:61" pos:end="129:62">&amp;&amp;</operator>

        <operator pos:start="131:9" pos:end="131:9">(</operator><name pos:start="131:10" pos:end="131:31"><name pos:start="131:10" pos:end="131:14">iTask</name><operator pos:start="131:15" pos:end="131:15">.</operator><name pos:start="131:16" pos:end="131:19">task</name><operator pos:start="131:20" pos:end="131:21">-&gt;</operator><name pos:start="131:22" pos:end="131:26">sense</name><operator pos:start="131:27" pos:end="131:27">.</operator><name pos:start="131:28" pos:end="131:31">ascq</name></name> <operator pos:start="131:33" pos:end="131:34">==</operator> <name pos:start="131:36" pos:end="131:73">SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE</name> <operator pos:start="131:75" pos:end="131:76">||</operator>

         <name pos:start="133:10" pos:end="133:31"><name pos:start="133:10" pos:end="133:14">iTask</name><operator pos:start="133:15" pos:end="133:15">.</operator><name pos:start="133:16" pos:end="133:19">task</name><operator pos:start="133:20" pos:end="133:21">-&gt;</operator><name pos:start="133:22" pos:end="133:26">sense</name><operator pos:start="133:27" pos:end="133:27">.</operator><name pos:start="133:28" pos:end="133:31">ascq</name></name> <operator pos:start="133:33" pos:end="133:34">==</operator> <name pos:start="133:36" pos:end="133:71">SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB</name><operator pos:start="133:72" pos:end="133:72">)</operator></expr>)</condition> <block pos:start="133:75" pos:end="143:5">{<block_content pos:start="137:9" pos:end="141:24">

        <comment type="block" pos:start="135:9" pos:end="135:55">/* WRITE SAME is not supported by the target */</comment>

        <expr_stmt pos:start="137:9" pos:end="137:41"><expr pos:start="137:9" pos:end="137:40"><name pos:start="137:9" pos:end="137:32"><name pos:start="137:9" pos:end="137:16">iscsilun</name><operator pos:start="137:17" pos:end="137:18">-&gt;</operator><name pos:start="137:19" pos:end="137:32">has_write_same</name></name> <operator pos:start="137:34" pos:end="137:34">=</operator> <name pos:start="137:36" pos:end="137:40">false</name></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:40"><expr pos:start="139:9" pos:end="139:39"><call pos:start="139:9" pos:end="139:39"><name pos:start="139:9" pos:end="139:27">scsi_free_scsi_task</name><argument_list pos:start="139:28" pos:end="139:39">(<argument pos:start="139:29" pos:end="139:38"><expr pos:start="139:29" pos:end="139:38"><name pos:start="139:29" pos:end="139:38"><name pos:start="139:29" pos:end="139:33">iTask</name><operator pos:start="139:34" pos:end="139:34">.</operator><name pos:start="139:35" pos:end="139:38">task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="141:9" pos:end="141:24">return <expr pos:start="141:16" pos:end="141:23"><operator pos:start="141:16" pos:end="141:16">-</operator><name pos:start="141:17" pos:end="141:23">ENOTSUP</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="147:5" pos:end="153:5"><if pos:start="147:5" pos:end="153:5">if <condition pos:start="147:8" pos:end="147:27">(<expr pos:start="147:9" pos:end="147:26"><name pos:start="147:9" pos:end="147:18"><name pos:start="147:9" pos:end="147:13">iTask</name><operator pos:start="147:14" pos:end="147:14">.</operator><name pos:start="147:15" pos:end="147:18">task</name></name> <operator pos:start="147:20" pos:end="147:21">!=</operator> <name pos:start="147:23" pos:end="147:26">NULL</name></expr>)</condition> <block pos:start="147:29" pos:end="153:5">{<block_content pos:start="149:9" pos:end="151:26">

        <expr_stmt pos:start="149:9" pos:end="149:40"><expr pos:start="149:9" pos:end="149:39"><call pos:start="149:9" pos:end="149:39"><name pos:start="149:9" pos:end="149:27">scsi_free_scsi_task</name><argument_list pos:start="149:28" pos:end="149:39">(<argument pos:start="149:29" pos:end="149:38"><expr pos:start="149:29" pos:end="149:38"><name pos:start="149:29" pos:end="149:38"><name pos:start="149:29" pos:end="149:33">iTask</name><operator pos:start="149:34" pos:end="149:34">.</operator><name pos:start="149:35" pos:end="149:38">task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:26"><expr pos:start="151:9" pos:end="151:25"><name pos:start="151:9" pos:end="151:18"><name pos:start="151:9" pos:end="151:13">iTask</name><operator pos:start="151:14" pos:end="151:14">.</operator><name pos:start="151:15" pos:end="151:18">task</name></name> <operator pos:start="151:20" pos:end="151:20">=</operator> <name pos:start="151:22" pos:end="151:25">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="157:5" pos:end="163:5"><if pos:start="157:5" pos:end="163:5">if <condition pos:start="157:8" pos:end="157:23">(<expr pos:start="157:9" pos:end="157:22"><name pos:start="157:9" pos:end="157:22"><name pos:start="157:9" pos:end="157:13">iTask</name><operator pos:start="157:14" pos:end="157:14">.</operator><name pos:start="157:15" pos:end="157:22">do_retry</name></name></expr>)</condition> <block pos:start="157:25" pos:end="163:5">{<block_content pos:start="159:9" pos:end="161:19">

        <expr_stmt pos:start="159:9" pos:end="159:27"><expr pos:start="159:9" pos:end="159:26"><name pos:start="159:9" pos:end="159:22"><name pos:start="159:9" pos:end="159:13">iTask</name><operator pos:start="159:14" pos:end="159:14">.</operator><name pos:start="159:15" pos:end="159:22">complete</name></name> <operator pos:start="159:24" pos:end="159:24">=</operator> <literal type="number" pos:start="159:26" pos:end="159:26">0</literal></expr>;</expr_stmt>

        <goto pos:start="161:9" pos:end="161:19">goto <name pos:start="161:14" pos:end="161:18">retry</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="167:5" pos:end="171:5"><if pos:start="167:5" pos:end="171:5">if <condition pos:start="167:8" pos:end="167:41">(<expr pos:start="167:9" pos:end="167:40"><name pos:start="167:9" pos:end="167:20"><name pos:start="167:9" pos:end="167:13">iTask</name><operator pos:start="167:14" pos:end="167:14">.</operator><name pos:start="167:15" pos:end="167:20">status</name></name> <operator pos:start="167:22" pos:end="167:23">!=</operator> <name pos:start="167:25" pos:end="167:40">SCSI_STATUS_GOOD</name></expr>)</condition> <block pos:start="167:43" pos:end="171:5">{<block_content pos:start="169:9" pos:end="169:30">

        <return pos:start="169:9" pos:end="169:30">return <expr pos:start="169:16" pos:end="169:29"><name pos:start="169:16" pos:end="169:29"><name pos:start="169:16" pos:end="169:20">iTask</name><operator pos:start="169:21" pos:end="169:21">.</operator><name pos:start="169:22" pos:end="169:29">err_code</name></name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="175:5" pos:end="187:5"><if pos:start="175:5" pos:end="181:5">if <condition pos:start="175:8" pos:end="175:35">(<expr pos:start="175:9" pos:end="175:34"><name pos:start="175:9" pos:end="175:13">flags</name> <operator pos:start="175:15" pos:end="175:15">&amp;</operator> <name pos:start="175:17" pos:end="175:34">BDRV_REQ_MAY_UNMAP</name></expr>)</condition> <block pos:start="175:37" pos:end="181:5">{<block_content pos:start="177:9" pos:end="179:61">

        <expr_stmt pos:start="177:9" pos:end="179:61"><expr pos:start="177:9" pos:end="179:60"><call pos:start="177:9" pos:end="179:60"><name pos:start="177:9" pos:end="177:33">iscsi_allocationmap_clear</name><argument_list pos:start="177:34" pos:end="179:60">(<argument pos:start="177:35" pos:end="177:42"><expr pos:start="177:35" pos:end="177:42"><name pos:start="177:35" pos:end="177:42">iscsilun</name></expr></argument>, <argument pos:start="177:45" pos:end="177:70"><expr pos:start="177:45" pos:end="177:70"><name pos:start="177:45" pos:end="177:50">offset</name> <operator pos:start="177:52" pos:end="177:53">&gt;&gt;</operator> <name pos:start="177:55" pos:end="177:70">BDRV_SECTOR_BITS</name></expr></argument>,

                                  <argument pos:start="179:35" pos:end="179:59"><expr pos:start="179:35" pos:end="179:59"><name pos:start="179:35" pos:end="179:39">count</name> <operator pos:start="179:41" pos:end="179:42">&gt;&gt;</operator> <name pos:start="179:44" pos:end="179:59">BDRV_SECTOR_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="181:7" pos:end="187:5">else <block pos:start="181:12" pos:end="187:5">{<block_content pos:start="183:9" pos:end="185:59">

        <expr_stmt pos:start="183:9" pos:end="185:59"><expr pos:start="183:9" pos:end="185:58"><call pos:start="183:9" pos:end="185:58"><name pos:start="183:9" pos:end="183:31">iscsi_allocationmap_set</name><argument_list pos:start="183:32" pos:end="185:58">(<argument pos:start="183:33" pos:end="183:40"><expr pos:start="183:33" pos:end="183:40"><name pos:start="183:33" pos:end="183:40">iscsilun</name></expr></argument>, <argument pos:start="183:43" pos:end="183:68"><expr pos:start="183:43" pos:end="183:68"><name pos:start="183:43" pos:end="183:48">offset</name> <operator pos:start="183:50" pos:end="183:51">&gt;&gt;</operator> <name pos:start="183:53" pos:end="183:68">BDRV_SECTOR_BITS</name></expr></argument>,

                                <argument pos:start="185:33" pos:end="185:57"><expr pos:start="185:33" pos:end="185:57"><name pos:start="185:33" pos:end="185:37">count</name> <operator pos:start="185:39" pos:end="185:40">&gt;&gt;</operator> <name pos:start="185:42" pos:end="185:57">BDRV_SECTOR_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="191:5" pos:end="191:13">return <expr pos:start="191:12" pos:end="191:12"><literal type="number" pos:start="191:12" pos:end="191:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
