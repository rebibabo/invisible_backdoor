<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9112.c" pos:tabs="8"><function pos:start="1:1" pos:end="121:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">http_connect</name><parameter_list pos:start="1:24" pos:end="1:77">(<parameter pos:start="1:25" pos:end="1:37"><decl pos:start="1:25" pos:end="1:37"><type pos:start="1:25" pos:end="1:37"><name pos:start="1:25" pos:end="1:34">URLContext</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:37">h</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:55"><decl pos:start="1:40" pos:end="1:55"><type pos:start="1:40" pos:end="1:55"><specifier pos:start="1:40" pos:end="1:44">const</specifier> <name pos:start="1:46" pos:end="1:49">char</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:55">path</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:76"><decl pos:start="1:58" pos:end="1:76"><type pos:start="1:58" pos:end="1:76"><specifier pos:start="1:58" pos:end="1:62">const</specifier> <name pos:start="1:64" pos:end="1:67">char</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:76">hoststr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="121:1">{<block_content pos:start="5:5" pos:end="119:5">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">HTTPContext</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:18">s</name> <init pos:start="5:20" pos:end="5:33">= <expr pos:start="5:22" pos:end="5:33"><name pos:start="5:22" pos:end="5:33"><name pos:start="5:22" pos:end="5:22">h</name><operator pos:start="5:23" pos:end="5:24">-&gt;</operator><name pos:start="5:25" pos:end="5:33">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">post</name></decl>, <decl pos:start="7:15" pos:end="7:17"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:15" pos:end="7:17">err</name></decl>, <decl pos:start="7:20" pos:end="7:21"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:20" pos:end="7:21">ch</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:19"><name pos:start="9:10" pos:end="9:13">line</name><index pos:start="9:14" pos:end="9:19">[<expr pos:start="9:15" pos:end="9:18"><literal type="number" pos:start="9:15" pos:end="9:18">1024</literal></expr>]</index></name></decl>, <decl pos:start="9:22" pos:end="9:23"><type ref="prev" pos:start="9:5" pos:end="9:8"><modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:23">q</name></decl>;</decl_stmt>





    <comment type="block" pos:start="15:5" pos:end="15:26">/* send http header */</comment>

    <expr_stmt pos:start="17:5" pos:end="17:33"><expr pos:start="17:5" pos:end="17:32"><name pos:start="17:5" pos:end="17:8">post</name> <operator pos:start="17:10" pos:end="17:10">=</operator> <name pos:start="17:12" pos:end="17:19"><name pos:start="17:12" pos:end="17:12">h</name><operator pos:start="17:13" pos:end="17:14">-&gt;</operator><name pos:start="17:15" pos:end="17:19">flags</name></name> <operator pos:start="17:21" pos:end="17:21">&amp;</operator> <name pos:start="17:23" pos:end="17:32">URL_WRONLY</name></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="39:22"><expr pos:start="21:5" pos:end="39:21"><call pos:start="21:5" pos:end="39:21"><name pos:start="21:5" pos:end="21:12">snprintf</name><argument_list pos:start="21:13" pos:end="39:21">(<argument pos:start="21:14" pos:end="21:22"><expr pos:start="21:14" pos:end="21:22"><name pos:start="21:14" pos:end="21:22"><name pos:start="21:14" pos:end="21:14">s</name><operator pos:start="21:15" pos:end="21:16">-&gt;</operator><name pos:start="21:17" pos:end="21:22">buffer</name></name></expr></argument>, <argument pos:start="21:25" pos:end="21:41"><expr pos:start="21:25" pos:end="21:41"><sizeof pos:start="21:25" pos:end="21:41">sizeof<argument_list pos:start="21:31" pos:end="21:41">(<argument pos:start="21:32" pos:end="21:40"><expr pos:start="21:32" pos:end="21:40"><name pos:start="21:32" pos:end="21:40"><name pos:start="21:32" pos:end="21:32">s</name><operator pos:start="21:33" pos:end="21:34">-&gt;</operator><name pos:start="21:35" pos:end="21:40">buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

             <argument pos:start="23:14" pos:end="31:19"><expr pos:start="23:14" pos:end="31:19"><literal type="string" pos:start="23:14" pos:end="23:33">"%s %s HTTP/1.0\r\n"</literal>

             <literal type="string" pos:start="25:14" pos:end="25:33">"User-Agent: %s\r\n"</literal>

             <literal type="string" pos:start="27:14" pos:end="27:30">"Accept: */*\r\n"</literal>

             <literal type="string" pos:start="29:14" pos:end="29:27">"Host: %s\r\n"</literal>

             <literal type="string" pos:start="31:14" pos:end="31:19">"\r\n"</literal></expr></argument>,

             <argument pos:start="33:14" pos:end="33:34"><expr pos:start="33:14" pos:end="33:34"><ternary pos:start="33:14" pos:end="33:34"><condition pos:start="33:14" pos:end="33:19"><expr pos:start="33:14" pos:end="33:17"><name pos:start="33:14" pos:end="33:17">post</name></expr> ?</condition><then pos:start="33:21" pos:end="33:26"> <expr pos:start="33:21" pos:end="33:26"><literal type="string" pos:start="33:21" pos:end="33:26">"POST"</literal></expr> </then><else pos:start="33:28" pos:end="33:34">: <expr pos:start="33:30" pos:end="33:34"><literal type="string" pos:start="33:30" pos:end="33:34">"GET"</literal></expr></else></ternary></expr></argument>,

             <argument pos:start="35:14" pos:end="35:17"><expr pos:start="35:14" pos:end="35:17"><name pos:start="35:14" pos:end="35:17">path</name></expr></argument>,

             <argument pos:start="37:14" pos:end="37:30"><expr pos:start="37:14" pos:end="37:30"><name pos:start="37:14" pos:end="37:30">LIBAVFORMAT_IDENT</name></expr></argument>,

             <argument pos:start="39:14" pos:end="39:20"><expr pos:start="39:14" pos:end="39:20"><name pos:start="39:14" pos:end="39:20">hoststr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    

    <if_stmt pos:start="43:5" pos:end="45:26"><if pos:start="43:5" pos:end="45:26">if <condition pos:start="43:8" pos:end="43:56">(<expr pos:start="43:9" pos:end="43:55"><call pos:start="43:9" pos:end="43:51"><name pos:start="43:9" pos:end="43:18">http_write</name><argument_list pos:start="43:19" pos:end="43:51">(<argument pos:start="43:20" pos:end="43:20"><expr pos:start="43:20" pos:end="43:20"><name pos:start="43:20" pos:end="43:20">h</name></expr></argument>, <argument pos:start="43:23" pos:end="43:31"><expr pos:start="43:23" pos:end="43:31"><name pos:start="43:23" pos:end="43:31"><name pos:start="43:23" pos:end="43:23">s</name><operator pos:start="43:24" pos:end="43:25">-&gt;</operator><name pos:start="43:26" pos:end="43:31">buffer</name></name></expr></argument>, <argument pos:start="43:34" pos:end="43:50"><expr pos:start="43:34" pos:end="43:50"><call pos:start="43:34" pos:end="43:50"><name pos:start="43:34" pos:end="43:39">strlen</name><argument_list pos:start="43:40" pos:end="43:50">(<argument pos:start="43:41" pos:end="43:49"><expr pos:start="43:41" pos:end="43:49"><name pos:start="43:41" pos:end="43:49"><name pos:start="43:41" pos:end="43:41">s</name><operator pos:start="43:42" pos:end="43:43">-&gt;</operator><name pos:start="43:44" pos:end="43:49">buffer</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="43:53" pos:end="43:53">&lt;</operator> <literal type="number" pos:start="43:55" pos:end="43:55">0</literal></expr>)</condition><block type="pseudo" pos:start="45:9" pos:end="45:26"><block_content pos:start="45:9" pos:end="45:26">

        <return pos:start="45:9" pos:end="45:26">return <expr pos:start="45:16" pos:end="45:25"><name pos:start="45:16" pos:end="45:25">AVERROR_IO</name></expr>;</return></block_content></block></if></if_stmt>

        

    <comment type="block" pos:start="49:5" pos:end="49:27">/* init input buffer */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:27"><expr pos:start="51:5" pos:end="51:26"><name pos:start="51:5" pos:end="51:14"><name pos:start="51:5" pos:end="51:5">s</name><operator pos:start="51:6" pos:end="51:7">-&gt;</operator><name pos:start="51:8" pos:end="51:14">buf_ptr</name></name> <operator pos:start="51:16" pos:end="51:16">=</operator> <name pos:start="51:18" pos:end="51:26"><name pos:start="51:18" pos:end="51:18">s</name><operator pos:start="51:19" pos:end="51:20">-&gt;</operator><name pos:start="51:21" pos:end="51:26">buffer</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:27"><expr pos:start="53:5" pos:end="53:26"><name pos:start="53:5" pos:end="53:14"><name pos:start="53:5" pos:end="53:5">s</name><operator pos:start="53:6" pos:end="53:7">-&gt;</operator><name pos:start="53:8" pos:end="53:14">buf_end</name></name> <operator pos:start="53:16" pos:end="53:16">=</operator> <name pos:start="53:18" pos:end="53:26"><name pos:start="53:18" pos:end="53:18">s</name><operator pos:start="53:19" pos:end="53:20">-&gt;</operator><name pos:start="53:21" pos:end="53:26">buffer</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:22"><expr pos:start="55:5" pos:end="55:21"><name pos:start="55:5" pos:end="55:17"><name pos:start="55:5" pos:end="55:5">s</name><operator pos:start="55:6" pos:end="55:7">-&gt;</operator><name pos:start="55:8" pos:end="55:17">line_count</name></name> <operator pos:start="55:19" pos:end="55:19">=</operator> <literal type="number" pos:start="55:21" pos:end="55:21">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:26"><expr pos:start="57:5" pos:end="57:25"><name pos:start="57:5" pos:end="57:18"><name pos:start="57:5" pos:end="57:5">s</name><operator pos:start="57:6" pos:end="57:7">-&gt;</operator><name pos:start="57:8" pos:end="57:15">location</name><index pos:start="57:16" pos:end="57:18">[<expr pos:start="57:17" pos:end="57:17"><literal type="number" pos:start="57:17" pos:end="57:17">0</literal></expr>]</index></name> <operator pos:start="57:20" pos:end="57:20">=</operator> <literal type="char" pos:start="57:22" pos:end="57:25">'\0'</literal></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="65:5"><if pos:start="59:5" pos:end="65:5">if <condition pos:start="59:8" pos:end="59:13">(<expr pos:start="59:9" pos:end="59:12"><name pos:start="59:9" pos:end="59:12">post</name></expr>)</condition> <block pos:start="59:15" pos:end="65:5">{<block_content pos:start="61:9" pos:end="63:17">

        <expr_stmt pos:start="61:9" pos:end="61:17"><expr pos:start="61:9" pos:end="61:16"><call pos:start="61:9" pos:end="61:16"><name pos:start="61:9" pos:end="61:13">sleep</name><argument_list pos:start="61:14" pos:end="61:16">(<argument pos:start="61:15" pos:end="61:15"><expr pos:start="61:15" pos:end="61:15"><literal type="number" pos:start="61:15" pos:end="61:15">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="63:9" pos:end="63:17">return <expr pos:start="63:16" pos:end="63:16"><literal type="number" pos:start="63:16" pos:end="63:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    

    <comment type="block" pos:start="69:5" pos:end="69:25">/* wait for header */</comment>

    <expr_stmt pos:start="71:5" pos:end="71:13"><expr pos:start="71:5" pos:end="71:12"><name pos:start="71:5" pos:end="71:5">q</name> <operator pos:start="71:7" pos:end="71:7">=</operator> <name pos:start="71:9" pos:end="71:12">line</name></expr>;</expr_stmt>

    <for pos:start="73:5" pos:end="119:5">for<control pos:start="73:8" pos:end="73:11">(<init pos:start="73:9" pos:end="73:9">;</init><condition pos:start="73:10" pos:end="73:10">;</condition><incr/>)</control> <block pos:start="73:13" pos:end="119:5">{<block_content pos:start="75:9" pos:end="117:9">

        <expr_stmt pos:start="75:9" pos:end="75:26"><expr pos:start="75:9" pos:end="75:25"><name pos:start="75:9" pos:end="75:10">ch</name> <operator pos:start="75:12" pos:end="75:12">=</operator> <call pos:start="75:14" pos:end="75:25"><name pos:start="75:14" pos:end="75:22">http_getc</name><argument_list pos:start="75:23" pos:end="75:25">(<argument pos:start="75:24" pos:end="75:24"><expr pos:start="75:24" pos:end="75:24"><name pos:start="75:24" pos:end="75:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="77:9" pos:end="79:30"><if pos:start="77:9" pos:end="79:30">if <condition pos:start="77:12" pos:end="77:19">(<expr pos:start="77:13" pos:end="77:18"><name pos:start="77:13" pos:end="77:14">ch</name> <operator pos:start="77:16" pos:end="77:16">&lt;</operator> <literal type="number" pos:start="77:18" pos:end="77:18">0</literal></expr>)</condition><block type="pseudo" pos:start="79:13" pos:end="79:30"><block_content pos:start="79:13" pos:end="79:30">

            <return pos:start="79:13" pos:end="79:30">return <expr pos:start="79:20" pos:end="79:29"><name pos:start="79:20" pos:end="79:29">AVERROR_IO</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="81:9" pos:end="117:9"><if pos:start="81:9" pos:end="111:9">if <condition pos:start="81:12" pos:end="81:23">(<expr pos:start="81:13" pos:end="81:22"><name pos:start="81:13" pos:end="81:14">ch</name> <operator pos:start="81:16" pos:end="81:17">==</operator> <literal type="char" pos:start="81:19" pos:end="81:22">'\n'</literal></expr>)</condition> <block pos:start="81:25" pos:end="111:9">{<block_content pos:start="85:13" pos:end="109:21">

            <comment type="block" pos:start="83:13" pos:end="83:30">/* process line */</comment>

            <if_stmt pos:start="85:13" pos:end="87:20"><if pos:start="85:13" pos:end="87:20">if <condition pos:start="85:16" pos:end="85:42">(<expr pos:start="85:17" pos:end="85:41"><name pos:start="85:17" pos:end="85:17">q</name> <operator pos:start="85:19" pos:end="85:19">&gt;</operator> <name pos:start="85:21" pos:end="85:24">line</name> <operator pos:start="85:26" pos:end="85:27">&amp;&amp;</operator> <name pos:start="85:29" pos:end="85:33"><name pos:start="85:29" pos:end="85:29">q</name><index pos:start="85:30" pos:end="85:33">[<expr pos:start="85:31" pos:end="85:32"><operator pos:start="85:31" pos:end="85:31">-</operator><literal type="number" pos:start="85:32" pos:end="85:32">1</literal></expr>]</index></name> <operator pos:start="85:35" pos:end="85:36">==</operator> <literal type="char" pos:start="85:38" pos:end="85:41">'\r'</literal></expr>)</condition><block type="pseudo" pos:start="87:17" pos:end="87:20"><block_content pos:start="87:17" pos:end="87:20">

                <expr_stmt pos:start="87:17" pos:end="87:20"><expr pos:start="87:17" pos:end="87:19"><name pos:start="87:17" pos:end="87:17">q</name><operator pos:start="87:18" pos:end="87:19">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="89:13" pos:end="92:0"><expr pos:start="89:13" pos:end="89:21"><operator pos:start="89:13" pos:end="89:13">*</operator><name pos:start="89:14" pos:end="89:14">q</name> <operator pos:start="89:16" pos:end="89:16">=</operator> <literal type="char" pos:start="89:18" pos:end="89:21">'\0'</literal></expr>;</expr_stmt>

<cpp:ifdef pos:start="91:1" pos:end="91:12">#<cpp:directive pos:start="91:2" pos:end="91:6">ifdef</cpp:directive> <name pos:start="91:8" pos:end="91:12">DEBUG</name></cpp:ifdef>

            <expr_stmt pos:start="93:13" pos:end="96:0"><expr pos:start="93:13" pos:end="93:41"><call pos:start="93:13" pos:end="93:41"><name pos:start="93:13" pos:end="93:18">printf</name><argument_list pos:start="93:19" pos:end="93:41">(<argument pos:start="93:20" pos:end="93:34"><expr pos:start="93:20" pos:end="93:34"><literal type="string" pos:start="93:20" pos:end="93:34">"header='%s'\n"</literal></expr></argument>, <argument pos:start="93:37" pos:end="93:40"><expr pos:start="93:37" pos:end="93:40"><name pos:start="93:37" pos:end="93:40">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="95:1" pos:end="95:6">#<cpp:directive pos:start="95:2" pos:end="95:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="97:13" pos:end="97:55"><expr pos:start="97:13" pos:end="97:54"><name pos:start="97:13" pos:end="97:15">err</name> <operator pos:start="97:17" pos:end="97:17">=</operator> <call pos:start="97:19" pos:end="97:54"><name pos:start="97:19" pos:end="97:30">process_line</name><argument_list pos:start="97:31" pos:end="97:54">(<argument pos:start="97:32" pos:end="97:32"><expr pos:start="97:32" pos:end="97:32"><name pos:start="97:32" pos:end="97:32">s</name></expr></argument>, <argument pos:start="97:35" pos:end="97:38"><expr pos:start="97:35" pos:end="97:38"><name pos:start="97:35" pos:end="97:38">line</name></expr></argument>, <argument pos:start="97:41" pos:end="97:53"><expr pos:start="97:41" pos:end="97:53"><name pos:start="97:41" pos:end="97:53"><name pos:start="97:41" pos:end="97:41">s</name><operator pos:start="97:42" pos:end="97:43">-&gt;</operator><name pos:start="97:44" pos:end="97:53">line_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="99:13" pos:end="101:27"><if pos:start="99:13" pos:end="101:27">if <condition pos:start="99:16" pos:end="99:24">(<expr pos:start="99:17" pos:end="99:23"><name pos:start="99:17" pos:end="99:19">err</name> <operator pos:start="99:21" pos:end="99:21">&lt;</operator> <literal type="number" pos:start="99:23" pos:end="99:23">0</literal></expr>)</condition><block type="pseudo" pos:start="101:17" pos:end="101:27"><block_content pos:start="101:17" pos:end="101:27">

                <return pos:start="101:17" pos:end="101:27">return <expr pos:start="101:24" pos:end="101:26"><name pos:start="101:24" pos:end="101:26">err</name></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="103:13" pos:end="105:25"><if pos:start="103:13" pos:end="105:25">if <condition pos:start="103:16" pos:end="103:25">(<expr pos:start="103:17" pos:end="103:24"><name pos:start="103:17" pos:end="103:19">err</name> <operator pos:start="103:21" pos:end="103:22">==</operator> <literal type="number" pos:start="103:24" pos:end="103:24">0</literal></expr>)</condition><block type="pseudo" pos:start="105:17" pos:end="105:25"><block_content pos:start="105:17" pos:end="105:25">

                <return pos:start="105:17" pos:end="105:25">return <expr pos:start="105:24" pos:end="105:24"><literal type="number" pos:start="105:24" pos:end="105:24">0</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:28"><expr pos:start="107:13" pos:end="107:27"><name pos:start="107:13" pos:end="107:25"><name pos:start="107:13" pos:end="107:13">s</name><operator pos:start="107:14" pos:end="107:15">-&gt;</operator><name pos:start="107:16" pos:end="107:25">line_count</name></name><operator pos:start="107:26" pos:end="107:27">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:21"><expr pos:start="109:13" pos:end="109:20"><name pos:start="109:13" pos:end="109:13">q</name> <operator pos:start="109:15" pos:end="109:15">=</operator> <name pos:start="109:17" pos:end="109:20">line</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="111:11" pos:end="117:9">else <block pos:start="111:16" pos:end="117:9">{<block_content pos:start="113:13" pos:end="115:26">

            <if_stmt pos:start="113:13" pos:end="115:26"><if pos:start="113:13" pos:end="115:26">if <condition pos:start="113:16" pos:end="113:46">(<expr pos:start="113:17" pos:end="113:45"><operator pos:start="113:17" pos:end="113:17">(</operator><name pos:start="113:18" pos:end="113:18">q</name> <operator pos:start="113:20" pos:end="113:20">-</operator> <name pos:start="113:22" pos:end="113:25">line</name><operator pos:start="113:26" pos:end="113:26">)</operator> <operator pos:start="113:28" pos:end="113:28">&lt;</operator> <sizeof pos:start="113:30" pos:end="113:41">sizeof<argument_list pos:start="113:36" pos:end="113:41">(<argument pos:start="113:37" pos:end="113:40"><expr pos:start="113:37" pos:end="113:40"><name pos:start="113:37" pos:end="113:40">line</name></expr></argument>)</argument_list></sizeof> <operator pos:start="113:43" pos:end="113:43">-</operator> <literal type="number" pos:start="113:45" pos:end="113:45">1</literal></expr>)</condition><block type="pseudo" pos:start="115:17" pos:end="115:26"><block_content pos:start="115:17" pos:end="115:26">

                <expr_stmt pos:start="115:17" pos:end="115:26"><expr pos:start="115:17" pos:end="115:25"><operator pos:start="115:17" pos:end="115:17">*</operator><name pos:start="115:18" pos:end="115:18">q</name><operator pos:start="115:19" pos:end="115:20">++</operator> <operator pos:start="115:22" pos:end="115:22">=</operator> <name pos:start="115:24" pos:end="115:25">ch</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
