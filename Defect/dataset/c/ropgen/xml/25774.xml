<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25774.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:74"><name pos:start="1:1" pos:end="1:25">ivshmem_server_parse_args</name><argument_list pos:start="1:26" pos:end="1:74">(<argument pos:start="1:27" pos:end="1:49">IvshmemServerArgs *args</argument>, <argument pos:start="1:52" pos:end="1:59">int argc</argument>, <argument pos:start="1:62" pos:end="1:73">char *argv[]</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="153:1">{<block_content pos:start="5:5" pos:end="151:5">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">c</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:17">long</name> <name pos:start="7:19" pos:end="7:22">long</name></type> <name pos:start="7:24" pos:end="7:24">v</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">Error</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:15">errp</name> <init pos:start="9:17" pos:end="9:22">= <expr pos:start="9:19" pos:end="9:22"><name pos:start="9:19" pos:end="9:22">NULL</name></expr></init></decl>;</decl_stmt>



    <while pos:start="13:5" pos:end="129:5">while <condition pos:start="13:11" pos:end="31:31">(<expr pos:start="13:12" pos:end="31:30"><operator pos:start="13:12" pos:end="13:12">(</operator><name pos:start="13:13" pos:end="13:13">c</name> <operator pos:start="13:15" pos:end="13:15">=</operator> <call pos:start="13:17" pos:end="31:23"><name pos:start="13:17" pos:end="13:22">getopt</name><argument_list pos:start="13:23" pos:end="31:23">(<argument pos:start="13:24" pos:end="13:27"><expr pos:start="13:24" pos:end="13:27"><name pos:start="13:24" pos:end="13:27">argc</name></expr></argument>, <argument pos:start="13:30" pos:end="13:33"><expr pos:start="13:30" pos:end="13:33"><name pos:start="13:30" pos:end="13:33">argv</name></expr></argument>,

                       <argument pos:start="15:24" pos:end="29:27"><expr pos:start="15:24" pos:end="29:27"><literal type="string" pos:start="15:24" pos:end="15:26">"h"</literal>  <comment type="block" pos:start="15:29" pos:end="15:38">/* help */</comment>

                       <literal type="string" pos:start="17:24" pos:end="17:26">"v"</literal>  <comment type="block" pos:start="17:29" pos:end="17:41">/* verbose */</comment>

                       <literal type="string" pos:start="19:24" pos:end="19:26">"F"</literal>  <comment type="block" pos:start="19:29" pos:end="19:44">/* foreground */</comment>

                       <literal type="string" pos:start="21:24" pos:end="21:27">"p:"</literal> <comment type="block" pos:start="21:29" pos:end="21:42">/* pid_file */</comment>

                       <literal type="string" pos:start="23:24" pos:end="23:27">"S:"</literal> <comment type="block" pos:start="23:29" pos:end="23:50">/* unix_socket_path */</comment>

                       <literal type="string" pos:start="25:24" pos:end="25:27">"m:"</literal> <comment type="block" pos:start="25:29" pos:end="25:42">/* shm_path */</comment>

                       <literal type="string" pos:start="27:24" pos:end="27:27">"l:"</literal> <comment type="block" pos:start="27:29" pos:end="27:42">/* shm_size */</comment>

                       <literal type="string" pos:start="29:24" pos:end="29:27">"n:"</literal></expr></argument> <comment type="block" pos:start="29:29" pos:end="29:43">/* n_vectors */</comment>

                      )</argument_list></call><operator pos:start="31:24" pos:end="31:24">)</operator> <operator pos:start="31:26" pos:end="31:27">!=</operator> <operator pos:start="31:29" pos:end="31:29">-</operator><literal type="number" pos:start="31:30" pos:end="31:30">1</literal></expr>)</condition> <block pos:start="31:33" pos:end="129:5">{<block_content pos:start="35:9" pos:end="127:9">



        <switch pos:start="35:9" pos:end="127:9">switch <condition pos:start="35:16" pos:end="35:18">(<expr pos:start="35:17" pos:end="35:17"><name pos:start="35:17" pos:end="35:17">c</name></expr>)</condition> <block pos:start="35:20" pos:end="127:9">{<block_content pos:start="37:9" pos:end="125:18">

        <case pos:start="37:9" pos:end="37:17">case <expr pos:start="37:14" pos:end="37:16"><literal type="char" pos:start="37:14" pos:end="37:16">'h'</literal></expr>:</case> <comment type="block" pos:start="37:19" pos:end="37:28">/* help */</comment>

            <expr_stmt pos:start="39:13" pos:end="39:45"><expr pos:start="39:13" pos:end="39:44"><call pos:start="39:13" pos:end="39:44"><name pos:start="39:13" pos:end="39:32">ivshmem_server_usage</name><argument_list pos:start="39:33" pos:end="39:44">(<argument pos:start="39:34" pos:end="39:40"><expr pos:start="39:34" pos:end="39:40"><name pos:start="39:34" pos:end="39:40"><name pos:start="39:34" pos:end="39:37">argv</name><index pos:start="39:38" pos:end="39:40">[<expr pos:start="39:39" pos:end="39:39"><literal type="number" pos:start="39:39" pos:end="39:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="39:43" pos:end="39:43"><expr pos:start="39:43" pos:end="39:43"><literal type="number" pos:start="39:43" pos:end="39:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="41:13" pos:end="41:18">break;</break>



        <case pos:start="45:9" pos:end="45:17">case <expr pos:start="45:14" pos:end="45:16"><literal type="char" pos:start="45:14" pos:end="45:16">'v'</literal></expr>:</case> <comment type="block" pos:start="45:19" pos:end="45:31">/* verbose */</comment>

            <expr_stmt pos:start="47:13" pos:end="47:30"><expr pos:start="47:13" pos:end="47:29"><name pos:start="47:13" pos:end="47:25"><name pos:start="47:13" pos:end="47:16">args</name><operator pos:start="47:17" pos:end="47:18">-&gt;</operator><name pos:start="47:19" pos:end="47:25">verbose</name></name> <operator pos:start="47:27" pos:end="47:27">=</operator> <literal type="number" pos:start="47:29" pos:end="47:29">1</literal></expr>;</expr_stmt>

            <break pos:start="49:13" pos:end="49:18">break;</break>



        <case pos:start="53:9" pos:end="53:17">case <expr pos:start="53:14" pos:end="53:16"><literal type="char" pos:start="53:14" pos:end="53:16">'F'</literal></expr>:</case> <comment type="block" pos:start="53:19" pos:end="53:34">/* foreground */</comment>

            <expr_stmt pos:start="55:13" pos:end="55:33"><expr pos:start="55:13" pos:end="55:32"><name pos:start="55:13" pos:end="55:28"><name pos:start="55:13" pos:end="55:16">args</name><operator pos:start="55:17" pos:end="55:18">-&gt;</operator><name pos:start="55:19" pos:end="55:28">foreground</name></name> <operator pos:start="55:30" pos:end="55:30">=</operator> <literal type="number" pos:start="55:32" pos:end="55:32">1</literal></expr>;</expr_stmt>

            <break pos:start="57:13" pos:end="57:18">break;</break>



        <case pos:start="61:9" pos:end="61:17">case <expr pos:start="61:14" pos:end="61:16"><literal type="char" pos:start="61:14" pos:end="61:16">'p'</literal></expr>:</case> <comment type="block" pos:start="61:19" pos:end="61:32">/* pid_file */</comment>

            <expr_stmt pos:start="63:13" pos:end="63:44"><expr pos:start="63:13" pos:end="63:43"><name pos:start="63:13" pos:end="63:26"><name pos:start="63:13" pos:end="63:16">args</name><operator pos:start="63:17" pos:end="63:18">-&gt;</operator><name pos:start="63:19" pos:end="63:26">pid_file</name></name> <operator pos:start="63:28" pos:end="63:28">=</operator> <call pos:start="63:30" pos:end="63:43"><name pos:start="63:30" pos:end="63:35">strdup</name><argument_list pos:start="63:36" pos:end="63:43">(<argument pos:start="63:37" pos:end="63:42"><expr pos:start="63:37" pos:end="63:42"><name pos:start="63:37" pos:end="63:42">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="65:13" pos:end="65:18">break;</break>



        <case pos:start="69:9" pos:end="69:17">case <expr pos:start="69:14" pos:end="69:16"><literal type="char" pos:start="69:14" pos:end="69:16">'S'</literal></expr>:</case> <comment type="block" pos:start="69:19" pos:end="69:40">/* unix_socket_path */</comment>

            <expr_stmt pos:start="71:13" pos:end="71:52"><expr pos:start="71:13" pos:end="71:51"><name pos:start="71:13" pos:end="71:34"><name pos:start="71:13" pos:end="71:16">args</name><operator pos:start="71:17" pos:end="71:18">-&gt;</operator><name pos:start="71:19" pos:end="71:34">unix_socket_path</name></name> <operator pos:start="71:36" pos:end="71:36">=</operator> <call pos:start="71:38" pos:end="71:51"><name pos:start="71:38" pos:end="71:43">strdup</name><argument_list pos:start="71:44" pos:end="71:51">(<argument pos:start="71:45" pos:end="71:50"><expr pos:start="71:45" pos:end="71:50"><name pos:start="71:45" pos:end="71:50">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="73:13" pos:end="73:18">break;</break>



        <case pos:start="77:9" pos:end="77:17">case <expr pos:start="77:14" pos:end="77:16"><literal type="char" pos:start="77:14" pos:end="77:16">'m'</literal></expr>:</case> <comment type="block" pos:start="77:19" pos:end="77:32">/* shm_path */</comment>

            <expr_stmt pos:start="79:13" pos:end="79:44"><expr pos:start="79:13" pos:end="79:43"><name pos:start="79:13" pos:end="79:26"><name pos:start="79:13" pos:end="79:16">args</name><operator pos:start="79:17" pos:end="79:18">-&gt;</operator><name pos:start="79:19" pos:end="79:26">shm_path</name></name> <operator pos:start="79:28" pos:end="79:28">=</operator> <call pos:start="79:30" pos:end="79:43"><name pos:start="79:30" pos:end="79:35">strdup</name><argument_list pos:start="79:36" pos:end="79:43">(<argument pos:start="79:37" pos:end="79:42"><expr pos:start="79:37" pos:end="79:42"><name pos:start="79:37" pos:end="79:42">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="81:13" pos:end="81:18">break;</break>



        <case pos:start="85:9" pos:end="85:17">case <expr pos:start="85:14" pos:end="85:16"><literal type="char" pos:start="85:14" pos:end="85:16">'l'</literal></expr>:</case> <comment type="block" pos:start="85:19" pos:end="85:32">/* shm_size */</comment>

            <expr_stmt pos:start="87:13" pos:end="87:74"><expr pos:start="87:13" pos:end="87:73"><call pos:start="87:13" pos:end="87:73"><name pos:start="87:13" pos:end="87:29">parse_option_size</name><argument_list pos:start="87:30" pos:end="87:73">(<argument pos:start="87:31" pos:end="87:40"><expr pos:start="87:31" pos:end="87:40"><literal type="string" pos:start="87:31" pos:end="87:40">"shm_size"</literal></expr></argument>, <argument pos:start="87:43" pos:end="87:48"><expr pos:start="87:43" pos:end="87:48"><name pos:start="87:43" pos:end="87:48">optarg</name></expr></argument>, <argument pos:start="87:51" pos:end="87:65"><expr pos:start="87:51" pos:end="87:65"><operator pos:start="87:51" pos:end="87:51">&amp;</operator><name pos:start="87:52" pos:end="87:65"><name pos:start="87:52" pos:end="87:55">args</name><operator pos:start="87:56" pos:end="87:57">-&gt;</operator><name pos:start="87:58" pos:end="87:65">shm_size</name></name></expr></argument>, <argument pos:start="87:68" pos:end="87:72"><expr pos:start="87:68" pos:end="87:72"><operator pos:start="87:68" pos:end="87:68">&amp;</operator><name pos:start="87:69" pos:end="87:72">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="89:13" pos:end="99:13"><if pos:start="89:13" pos:end="99:13">if <condition pos:start="89:16" pos:end="89:21">(<expr pos:start="89:17" pos:end="89:20"><name pos:start="89:17" pos:end="89:20">errp</name></expr>)</condition> <block pos:start="89:23" pos:end="99:13">{<block_content pos:start="91:17" pos:end="97:49">

                <expr_stmt pos:start="91:17" pos:end="93:48"><expr pos:start="91:17" pos:end="93:47"><call pos:start="91:17" pos:end="93:47"><name pos:start="91:17" pos:end="91:23">fprintf</name><argument_list pos:start="91:24" pos:end="93:47">(<argument pos:start="91:25" pos:end="91:30"><expr pos:start="91:25" pos:end="91:30"><name pos:start="91:25" pos:end="91:30">stderr</name></expr></argument>, <argument pos:start="91:33" pos:end="91:61"><expr pos:start="91:33" pos:end="91:61"><literal type="string" pos:start="91:33" pos:end="91:61">"cannot parse shm size: %s\n"</literal></expr></argument>,

                        <argument pos:start="93:25" pos:end="93:46"><expr pos:start="93:25" pos:end="93:46"><call pos:start="93:25" pos:end="93:46"><name pos:start="93:25" pos:end="93:40">error_get_pretty</name><argument_list pos:start="93:41" pos:end="93:46">(<argument pos:start="93:42" pos:end="93:45"><expr pos:start="93:42" pos:end="93:45"><name pos:start="93:42" pos:end="93:45">errp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="95:17" pos:end="95:33"><expr pos:start="95:17" pos:end="95:32"><call pos:start="95:17" pos:end="95:32"><name pos:start="95:17" pos:end="95:26">error_free</name><argument_list pos:start="95:27" pos:end="95:32">(<argument pos:start="95:28" pos:end="95:31"><expr pos:start="95:28" pos:end="95:31"><name pos:start="95:28" pos:end="95:31">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="97:17" pos:end="97:49"><expr pos:start="97:17" pos:end="97:48"><call pos:start="97:17" pos:end="97:48"><name pos:start="97:17" pos:end="97:36">ivshmem_server_usage</name><argument_list pos:start="97:37" pos:end="97:48">(<argument pos:start="97:38" pos:end="97:44"><expr pos:start="97:38" pos:end="97:44"><name pos:start="97:38" pos:end="97:44"><name pos:start="97:38" pos:end="97:41">argv</name><index pos:start="97:42" pos:end="97:44">[<expr pos:start="97:43" pos:end="97:43"><literal type="number" pos:start="97:43" pos:end="97:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="97:47" pos:end="97:47"><expr pos:start="97:47" pos:end="97:47"><literal type="number" pos:start="97:47" pos:end="97:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="101:13" pos:end="101:18">break;</break>



        <case pos:start="105:9" pos:end="105:17">case <expr pos:start="105:14" pos:end="105:16"><literal type="char" pos:start="105:14" pos:end="105:16">'n'</literal></expr>:</case> <comment type="block" pos:start="105:19" pos:end="105:33">/* n_vectors */</comment>

            <if_stmt pos:start="107:13" pos:end="113:13"><if pos:start="107:13" pos:end="113:13">if <condition pos:start="107:16" pos:end="107:51">(<expr pos:start="107:17" pos:end="107:50"><call pos:start="107:17" pos:end="107:46"><name pos:start="107:17" pos:end="107:31">parse_uint_full</name><argument_list pos:start="107:32" pos:end="107:46">(<argument pos:start="107:33" pos:end="107:38"><expr pos:start="107:33" pos:end="107:38"><name pos:start="107:33" pos:end="107:38">optarg</name></expr></argument>, <argument pos:start="107:41" pos:end="107:42"><expr pos:start="107:41" pos:end="107:42"><operator pos:start="107:41" pos:end="107:41">&amp;</operator><name pos:start="107:42" pos:end="107:42">v</name></expr></argument>, <argument pos:start="107:45" pos:end="107:45"><expr pos:start="107:45" pos:end="107:45"><literal type="number" pos:start="107:45" pos:end="107:45">0</literal></expr></argument>)</argument_list></call> <operator pos:start="107:48" pos:end="107:48">&lt;</operator> <literal type="number" pos:start="107:50" pos:end="107:50">0</literal></expr>)</condition> <block pos:start="107:53" pos:end="113:13">{<block_content pos:start="109:17" pos:end="111:49">

                <expr_stmt pos:start="109:17" pos:end="109:60"><expr pos:start="109:17" pos:end="109:59"><call pos:start="109:17" pos:end="109:59"><name pos:start="109:17" pos:end="109:23">fprintf</name><argument_list pos:start="109:24" pos:end="109:59">(<argument pos:start="109:25" pos:end="109:30"><expr pos:start="109:25" pos:end="109:30"><name pos:start="109:25" pos:end="109:30">stderr</name></expr></argument>, <argument pos:start="109:33" pos:end="109:58"><expr pos:start="109:33" pos:end="109:58"><literal type="string" pos:start="109:33" pos:end="109:58">"cannot parse n_vectors\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="111:17" pos:end="111:49"><expr pos:start="111:17" pos:end="111:48"><call pos:start="111:17" pos:end="111:48"><name pos:start="111:17" pos:end="111:36">ivshmem_server_usage</name><argument_list pos:start="111:37" pos:end="111:48">(<argument pos:start="111:38" pos:end="111:44"><expr pos:start="111:38" pos:end="111:44"><name pos:start="111:38" pos:end="111:44"><name pos:start="111:38" pos:end="111:41">argv</name><index pos:start="111:42" pos:end="111:44">[<expr pos:start="111:43" pos:end="111:43"><literal type="number" pos:start="111:43" pos:end="111:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="111:47" pos:end="111:47"><expr pos:start="111:47" pos:end="111:47"><literal type="number" pos:start="111:47" pos:end="111:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:32"><expr pos:start="115:13" pos:end="115:31"><name pos:start="115:13" pos:end="115:27"><name pos:start="115:13" pos:end="115:16">args</name><operator pos:start="115:17" pos:end="115:18">-&gt;</operator><name pos:start="115:19" pos:end="115:27">n_vectors</name></name> <operator pos:start="115:29" pos:end="115:29">=</operator> <name pos:start="115:31" pos:end="115:31">v</name></expr>;</expr_stmt>

            <break pos:start="117:13" pos:end="117:18">break;</break>



        <default pos:start="121:9" pos:end="121:16">default:</default>

            <expr_stmt pos:start="123:13" pos:end="123:45"><expr pos:start="123:13" pos:end="123:44"><call pos:start="123:13" pos:end="123:44"><name pos:start="123:13" pos:end="123:32">ivshmem_server_usage</name><argument_list pos:start="123:33" pos:end="123:44">(<argument pos:start="123:34" pos:end="123:40"><expr pos:start="123:34" pos:end="123:40"><name pos:start="123:34" pos:end="123:40"><name pos:start="123:34" pos:end="123:37">argv</name><index pos:start="123:38" pos:end="123:40">[<expr pos:start="123:39" pos:end="123:39"><literal type="number" pos:start="123:39" pos:end="123:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="123:43" pos:end="123:43"><expr pos:start="123:43" pos:end="123:43"><literal type="number" pos:start="123:43" pos:end="123:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="125:13" pos:end="125:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></while>



    <if_stmt pos:start="133:5" pos:end="141:5"><if pos:start="133:5" pos:end="141:5">if <condition pos:start="133:8" pos:end="133:53">(<expr pos:start="133:9" pos:end="133:52"><name pos:start="133:9" pos:end="133:23"><name pos:start="133:9" pos:end="133:12">args</name><operator pos:start="133:13" pos:end="133:14">-&gt;</operator><name pos:start="133:15" pos:end="133:23">n_vectors</name></name> <operator pos:start="133:25" pos:end="133:25">&gt;</operator> <name pos:start="133:27" pos:end="133:52">IVSHMEM_SERVER_MAX_VECTORS</name></expr>)</condition> <block pos:start="133:55" pos:end="141:5">{<block_content pos:start="135:9" pos:end="139:41">

        <expr_stmt pos:start="135:9" pos:end="137:44"><expr pos:start="135:9" pos:end="137:43"><call pos:start="135:9" pos:end="137:43"><name pos:start="135:9" pos:end="135:15">fprintf</name><argument_list pos:start="135:16" pos:end="137:43">(<argument pos:start="135:17" pos:end="135:22"><expr pos:start="135:17" pos:end="135:22"><name pos:start="135:17" pos:end="135:22">stderr</name></expr></argument>, <argument pos:start="135:25" pos:end="135:66"><expr pos:start="135:25" pos:end="135:66"><literal type="string" pos:start="135:25" pos:end="135:66">"too many requested vectors (max is %d)\n"</literal></expr></argument>,

                <argument pos:start="137:17" pos:end="137:42"><expr pos:start="137:17" pos:end="137:42"><name pos:start="137:17" pos:end="137:42">IVSHMEM_SERVER_MAX_VECTORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:41"><expr pos:start="139:9" pos:end="139:40"><call pos:start="139:9" pos:end="139:40"><name pos:start="139:9" pos:end="139:28">ivshmem_server_usage</name><argument_list pos:start="139:29" pos:end="139:40">(<argument pos:start="139:30" pos:end="139:36"><expr pos:start="139:30" pos:end="139:36"><name pos:start="139:30" pos:end="139:36"><name pos:start="139:30" pos:end="139:33">argv</name><index pos:start="139:34" pos:end="139:36">[<expr pos:start="139:35" pos:end="139:35"><literal type="number" pos:start="139:35" pos:end="139:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="139:39" pos:end="139:39"><expr pos:start="139:39" pos:end="139:39"><literal type="number" pos:start="139:39" pos:end="139:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="145:5" pos:end="151:5"><if pos:start="145:5" pos:end="151:5">if <condition pos:start="145:8" pos:end="145:52">(<expr pos:start="145:9" pos:end="145:51"><name pos:start="145:9" pos:end="145:21"><name pos:start="145:9" pos:end="145:12">args</name><operator pos:start="145:13" pos:end="145:14">-&gt;</operator><name pos:start="145:15" pos:end="145:21">verbose</name></name> <operator pos:start="145:23" pos:end="145:24">==</operator> <literal type="number" pos:start="145:26" pos:end="145:26">1</literal> <operator pos:start="145:28" pos:end="145:29">&amp;&amp;</operator> <name pos:start="145:31" pos:end="145:46"><name pos:start="145:31" pos:end="145:34">args</name><operator pos:start="145:35" pos:end="145:36">-&gt;</operator><name pos:start="145:37" pos:end="145:46">foreground</name></name> <operator pos:start="145:48" pos:end="145:49">==</operator> <literal type="number" pos:start="145:51" pos:end="145:51">0</literal></expr>)</condition> <block pos:start="145:54" pos:end="151:5">{<block_content pos:start="147:9" pos:end="149:41">

        <expr_stmt pos:start="147:9" pos:end="147:63"><expr pos:start="147:9" pos:end="147:62"><call pos:start="147:9" pos:end="147:62"><name pos:start="147:9" pos:end="147:15">fprintf</name><argument_list pos:start="147:16" pos:end="147:62">(<argument pos:start="147:17" pos:end="147:22"><expr pos:start="147:17" pos:end="147:22"><name pos:start="147:17" pos:end="147:22">stderr</name></expr></argument>, <argument pos:start="147:25" pos:end="147:61"><expr pos:start="147:25" pos:end="147:61"><literal type="string" pos:start="147:25" pos:end="147:61">"cannot use verbose in daemon mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:41"><expr pos:start="149:9" pos:end="149:40"><call pos:start="149:9" pos:end="149:40"><name pos:start="149:9" pos:end="149:28">ivshmem_server_usage</name><argument_list pos:start="149:29" pos:end="149:40">(<argument pos:start="149:30" pos:end="149:36"><expr pos:start="149:30" pos:end="149:36"><name pos:start="149:30" pos:end="149:36"><name pos:start="149:30" pos:end="149:33">argv</name><index pos:start="149:34" pos:end="149:36">[<expr pos:start="149:35" pos:end="149:35"><literal type="number" pos:start="149:35" pos:end="149:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="149:39" pos:end="149:39"><expr pos:start="149:39" pos:end="149:39"><literal type="number" pos:start="149:39" pos:end="149:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block>
</unit>
