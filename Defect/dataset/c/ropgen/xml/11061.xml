<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11061.c" pos:tabs="8"><function pos:start="1:1" pos:end="147:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:26">bdrv_drop_intermediate</name><parameter_list pos:start="1:27" pos:end="3:80">(<parameter pos:start="1:28" pos:end="1:51"><decl pos:start="1:28" pos:end="1:51"><type pos:start="1:28" pos:end="1:51"><name pos:start="1:28" pos:end="1:43">BlockDriverState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:51">active</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:74"><decl pos:start="1:54" pos:end="1:74"><type pos:start="1:54" pos:end="1:74"><name pos:start="1:54" pos:end="1:69">BlockDriverState</name> <modifier pos:start="1:71" pos:end="1:71">*</modifier></type><name pos:start="1:72" pos:end="1:74">top</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:49"><decl pos:start="3:28" pos:end="3:49"><type pos:start="3:28" pos:end="3:49"><name pos:start="3:28" pos:end="3:43">BlockDriverState</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:49">base</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:79"><decl pos:start="3:52" pos:end="3:79"><type pos:start="3:52" pos:end="3:79"><specifier pos:start="3:52" pos:end="3:56">const</specifier> <name pos:start="3:58" pos:end="3:61">char</name> <modifier pos:start="3:63" pos:end="3:63">*</modifier></type><name pos:start="3:64" pos:end="3:79">backing_file_str</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="147:1">{<block_content pos:start="7:5" pos:end="145:15">

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">BlockDriverState</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:34">intermediate</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">BlockDriverState</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:29">base_bs</name> <init pos:start="9:31" pos:end="9:36">= <expr pos:start="9:33" pos:end="9:36"><name pos:start="9:33" pos:end="9:36">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:40"><decl pos:start="11:5" pos:end="11:39"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">BlockDriverState</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:32">new_top_bs</name> <init pos:start="11:34" pos:end="11:39">= <expr pos:start="11:36" pos:end="11:39"><name pos:start="11:36" pos:end="11:39">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:53"><decl pos:start="13:5" pos:end="13:45"><type pos:start="13:5" pos:end="13:27"><name pos:start="13:5" pos:end="13:25">BlkIntermediateStates</name> <modifier pos:start="13:27" pos:end="13:27">*</modifier></type><name pos:start="13:28" pos:end="13:45">intermediate_state</name></decl>, <decl pos:start="13:48" pos:end="13:52"><type ref="prev" pos:start="13:5" pos:end="13:27"><modifier pos:start="13:48" pos:end="13:48">*</modifier></type><name pos:start="13:49" pos:end="13:52">next</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name> <init pos:start="15:13" pos:end="15:18">= <expr pos:start="15:15" pos:end="15:18"><operator pos:start="15:15" pos:end="15:15">-</operator><name pos:start="15:16" pos:end="15:18">EIO</name></expr></init></decl>;</decl_stmt>



    <macro pos:start="19:5" pos:end="19:58"><name pos:start="19:5" pos:end="19:17">QSIMPLEQ_HEAD</name><argument_list pos:start="19:18" pos:end="19:58">(<argument pos:start="19:19" pos:end="19:34">states_to_delete</argument>, <argument pos:start="19:37" pos:end="19:57">BlkIntermediateStates</argument>)</argument_list></macro> <expr_stmt pos:start="19:60" pos:end="19:76"><expr pos:start="19:60" pos:end="19:75"><name pos:start="19:60" pos:end="19:75">states_to_delete</name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:37"><expr pos:start="21:5" pos:end="21:36"><call pos:start="21:5" pos:end="21:36"><name pos:start="21:5" pos:end="21:17">QSIMPLEQ_INIT</name><argument_list pos:start="21:18" pos:end="21:36">(<argument pos:start="21:19" pos:end="21:35"><expr pos:start="21:19" pos:end="21:35"><operator pos:start="21:19" pos:end="21:19">&amp;</operator><name pos:start="21:20" pos:end="21:35">states_to_delete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:32">(<expr pos:start="25:9" pos:end="25:31"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:17"><name pos:start="25:10" pos:end="25:12">top</name><operator pos:start="25:13" pos:end="25:14">-&gt;</operator><name pos:start="25:15" pos:end="25:17">drv</name></name> <operator pos:start="25:19" pos:end="25:20">||</operator> <operator pos:start="25:22" pos:end="25:22">!</operator><name pos:start="25:23" pos:end="25:31"><name pos:start="25:23" pos:end="25:26">base</name><operator pos:start="25:27" pos:end="25:28">-&gt;</operator><name pos:start="25:29" pos:end="25:31">drv</name></name></expr>)</condition> <block pos:start="25:34" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:18">

        <goto pos:start="27:9" pos:end="27:18">goto <name pos:start="27:14" pos:end="27:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:48"><expr pos:start="33:5" pos:end="33:47"><name pos:start="33:5" pos:end="33:14">new_top_bs</name> <operator pos:start="33:16" pos:end="33:16">=</operator> <call pos:start="33:18" pos:end="33:47"><name pos:start="33:18" pos:end="33:34">bdrv_find_overlay</name><argument_list pos:start="33:35" pos:end="33:47">(<argument pos:start="33:36" pos:end="33:41"><expr pos:start="33:36" pos:end="33:41"><name pos:start="33:36" pos:end="33:41">active</name></expr></argument>, <argument pos:start="33:44" pos:end="33:46"><expr pos:start="33:44" pos:end="33:46"><name pos:start="33:44" pos:end="33:46">top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:27">(<expr pos:start="37:9" pos:end="37:26"><name pos:start="37:9" pos:end="37:18">new_top_bs</name> <operator pos:start="37:20" pos:end="37:21">==</operator> <name pos:start="37:23" pos:end="37:26">NULL</name></expr>)</condition> <block pos:start="37:29" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:18">

        <comment type="block" pos:start="39:9" pos:end="39:71">/* we could not find the image above 'top', this is an error */</comment>

        <goto pos:start="41:9" pos:end="41:18">goto <name pos:start="41:14" pos:end="41:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="47:5" pos:end="49:39">/* special case of new_top_bs-&gt;backing_hd already pointing to base - nothing

     * to do, no intermediate images */</comment>

    <if_stmt pos:start="51:5" pos:end="57:5"><if pos:start="51:5" pos:end="57:5">if <condition pos:start="51:8" pos:end="51:39">(<expr pos:start="51:9" pos:end="51:38"><name pos:start="51:9" pos:end="51:30"><name pos:start="51:9" pos:end="51:18">new_top_bs</name><operator pos:start="51:19" pos:end="51:20">-&gt;</operator><name pos:start="51:21" pos:end="51:30">backing_hd</name></name> <operator pos:start="51:32" pos:end="51:33">==</operator> <name pos:start="51:35" pos:end="51:38">base</name></expr>)</condition> <block pos:start="51:41" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:18">

        <expr_stmt pos:start="53:9" pos:end="53:16"><expr pos:start="53:9" pos:end="53:15"><name pos:start="53:9" pos:end="53:11">ret</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <literal type="number" pos:start="53:15" pos:end="53:15">0</literal></expr>;</expr_stmt>

        <goto pos:start="55:9" pos:end="55:18">goto <name pos:start="55:14" pos:end="55:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:23"><expr pos:start="61:5" pos:end="61:22"><name pos:start="61:5" pos:end="61:16">intermediate</name> <operator pos:start="61:18" pos:end="61:18">=</operator> <name pos:start="61:20" pos:end="61:22">top</name></expr>;</expr_stmt>



    <comment type="block" pos:start="65:5" pos:end="69:7">/* now we will go down through the list, and add each BDS we find

     * into our deletion queue, until we hit the 'base'

     */</comment>

    <while pos:start="71:5" pos:end="91:5">while <condition pos:start="71:11" pos:end="71:24">(<expr pos:start="71:12" pos:end="71:23"><name pos:start="71:12" pos:end="71:23">intermediate</name></expr>)</condition> <block pos:start="71:26" pos:end="91:5">{<block_content pos:start="73:9" pos:end="89:48">

        <expr_stmt pos:start="73:9" pos:end="73:70"><expr pos:start="73:9" pos:end="73:69"><name pos:start="73:9" pos:end="73:26">intermediate_state</name> <operator pos:start="73:28" pos:end="73:28">=</operator> <call pos:start="73:30" pos:end="73:69"><name pos:start="73:30" pos:end="73:38">g_malloc0</name><argument_list pos:start="73:39" pos:end="73:69">(<argument pos:start="73:40" pos:end="73:68"><expr pos:start="73:40" pos:end="73:68"><sizeof pos:start="73:40" pos:end="73:68">sizeof<argument_list pos:start="73:46" pos:end="73:68">(<argument pos:start="73:47" pos:end="73:67"><expr pos:start="73:47" pos:end="73:67"><name pos:start="73:47" pos:end="73:67">BlkIntermediateStates</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:46"><expr pos:start="75:9" pos:end="75:45"><name pos:start="75:9" pos:end="75:30"><name pos:start="75:9" pos:end="75:26">intermediate_state</name><operator pos:start="75:27" pos:end="75:28">-&gt;</operator><name pos:start="75:29" pos:end="75:30">bs</name></name> <operator pos:start="75:32" pos:end="75:32">=</operator> <name pos:start="75:34" pos:end="75:45">intermediate</name></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:75"><expr pos:start="77:9" pos:end="77:74"><call pos:start="77:9" pos:end="77:74"><name pos:start="77:9" pos:end="77:28">QSIMPLEQ_INSERT_TAIL</name><argument_list pos:start="77:29" pos:end="77:74">(<argument pos:start="77:30" pos:end="77:46"><expr pos:start="77:30" pos:end="77:46"><operator pos:start="77:30" pos:end="77:30">&amp;</operator><name pos:start="77:31" pos:end="77:46">states_to_delete</name></expr></argument>, <argument pos:start="77:49" pos:end="77:66"><expr pos:start="77:49" pos:end="77:66"><name pos:start="77:49" pos:end="77:66">intermediate_state</name></expr></argument>, <argument pos:start="77:69" pos:end="77:73"><expr pos:start="77:69" pos:end="77:73"><name pos:start="77:69" pos:end="77:73">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="81:9" pos:end="87:9"><if pos:start="81:9" pos:end="87:9">if <condition pos:start="81:12" pos:end="81:45">(<expr pos:start="81:13" pos:end="81:44"><name pos:start="81:13" pos:end="81:36"><name pos:start="81:13" pos:end="81:24">intermediate</name><operator pos:start="81:25" pos:end="81:26">-&gt;</operator><name pos:start="81:27" pos:end="81:36">backing_hd</name></name> <operator pos:start="81:38" pos:end="81:39">==</operator> <name pos:start="81:41" pos:end="81:44">base</name></expr>)</condition> <block pos:start="81:47" pos:end="87:9">{<block_content pos:start="83:13" pos:end="85:18">

            <expr_stmt pos:start="83:13" pos:end="83:47"><expr pos:start="83:13" pos:end="83:46"><name pos:start="83:13" pos:end="83:19">base_bs</name> <operator pos:start="83:21" pos:end="83:21">=</operator> <name pos:start="83:23" pos:end="83:46"><name pos:start="83:23" pos:end="83:34">intermediate</name><operator pos:start="83:35" pos:end="83:36">-&gt;</operator><name pos:start="83:37" pos:end="83:46">backing_hd</name></name></expr>;</expr_stmt>

            <break pos:start="85:13" pos:end="85:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:48"><expr pos:start="89:9" pos:end="89:47"><name pos:start="89:9" pos:end="89:20">intermediate</name> <operator pos:start="89:22" pos:end="89:22">=</operator> <name pos:start="89:24" pos:end="89:47"><name pos:start="89:24" pos:end="89:35">intermediate</name><operator pos:start="89:36" pos:end="89:37">-&gt;</operator><name pos:start="89:38" pos:end="89:47">backing_hd</name></name></expr>;</expr_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="93:5" pos:end="101:5"><if pos:start="93:5" pos:end="101:5">if <condition pos:start="93:8" pos:end="93:24">(<expr pos:start="93:9" pos:end="93:23"><name pos:start="93:9" pos:end="93:15">base_bs</name> <operator pos:start="93:17" pos:end="93:18">==</operator> <name pos:start="93:20" pos:end="93:23">NULL</name></expr>)</condition> <block pos:start="93:26" pos:end="101:5">{<block_content pos:start="99:9" pos:end="99:18">

        <comment type="block" pos:start="95:9" pos:end="97:53">/* something went wrong, we did not end at the base. safely

         * unravel everything, and exit with error */</comment>

        <goto pos:start="99:9" pos:end="99:18">goto <name pos:start="99:14" pos:end="99:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="105:5" pos:end="105:77">/* success - we can delete the intermediate states, and link top-&gt;base */</comment>

    <expr_stmt pos:start="107:5" pos:end="107:79"><expr pos:start="107:5" pos:end="107:78"><name pos:start="107:5" pos:end="107:20">backing_file_str</name> <operator pos:start="107:22" pos:end="107:22">=</operator> <ternary pos:start="107:24" pos:end="107:78"><condition pos:start="107:24" pos:end="107:41"><expr pos:start="107:24" pos:end="107:39"><name pos:start="107:24" pos:end="107:39">backing_file_str</name></expr> ?</condition><then pos:start="107:43" pos:end="107:58"> <expr pos:start="107:43" pos:end="107:58"><name pos:start="107:43" pos:end="107:58">backing_file_str</name></expr> </then><else pos:start="107:60" pos:end="107:78">: <expr pos:start="107:62" pos:end="107:78"><name pos:start="107:62" pos:end="107:78"><name pos:start="107:62" pos:end="107:68">base_bs</name><operator pos:start="107:69" pos:end="107:70">-&gt;</operator><name pos:start="107:71" pos:end="107:78">filename</name></name></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="111:82"><expr pos:start="109:5" pos:end="111:81"><name pos:start="109:5" pos:end="109:7">ret</name> <operator pos:start="109:9" pos:end="109:9">=</operator> <call pos:start="109:11" pos:end="111:81"><name pos:start="109:11" pos:end="109:34">bdrv_change_backing_file</name><argument_list pos:start="109:35" pos:end="111:81">(<argument pos:start="109:36" pos:end="109:45"><expr pos:start="109:36" pos:end="109:45"><name pos:start="109:36" pos:end="109:45">new_top_bs</name></expr></argument>, <argument pos:start="109:48" pos:end="109:63"><expr pos:start="109:48" pos:end="109:63"><name pos:start="109:48" pos:end="109:63">backing_file_str</name></expr></argument>,

                                   <argument pos:start="111:36" pos:end="111:80"><expr pos:start="111:36" pos:end="111:80"><ternary pos:start="111:36" pos:end="111:80"><condition pos:start="111:36" pos:end="111:49"><expr pos:start="111:36" pos:end="111:47"><name pos:start="111:36" pos:end="111:47"><name pos:start="111:36" pos:end="111:42">base_bs</name><operator pos:start="111:43" pos:end="111:44">-&gt;</operator><name pos:start="111:45" pos:end="111:47">drv</name></name></expr> ?</condition><then pos:start="111:51" pos:end="111:75"> <expr pos:start="111:51" pos:end="111:75"><name pos:start="111:51" pos:end="111:75"><name pos:start="111:51" pos:end="111:57">base_bs</name><operator pos:start="111:58" pos:end="111:59">-&gt;</operator><name pos:start="111:60" pos:end="111:62">drv</name><operator pos:start="111:63" pos:end="111:64">-&gt;</operator><name pos:start="111:65" pos:end="111:75">format_name</name></name></expr> </then><else pos:start="111:77" pos:end="111:80">: <expr pos:start="111:79" pos:end="111:80"><literal type="string" pos:start="111:79" pos:end="111:80">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="113:5" pos:end="117:5"><if pos:start="113:5" pos:end="117:5">if <condition pos:start="113:8" pos:end="113:12">(<expr pos:start="113:9" pos:end="113:11"><name pos:start="113:9" pos:end="113:11">ret</name></expr>)</condition> <block pos:start="113:14" pos:end="117:5">{<block_content pos:start="115:9" pos:end="115:18">

        <goto pos:start="115:9" pos:end="115:18">goto <name pos:start="115:14" pos:end="115:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:45"><expr pos:start="119:5" pos:end="119:44"><call pos:start="119:5" pos:end="119:44"><name pos:start="119:5" pos:end="119:23">bdrv_set_backing_hd</name><argument_list pos:start="119:24" pos:end="119:44">(<argument pos:start="119:25" pos:end="119:34"><expr pos:start="119:25" pos:end="119:34"><name pos:start="119:25" pos:end="119:34">new_top_bs</name></expr></argument>, <argument pos:start="119:37" pos:end="119:43"><expr pos:start="119:37" pos:end="119:43"><name pos:start="119:37" pos:end="119:43">base_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <macro pos:start="123:5" pos:end="123:77"><name pos:start="123:5" pos:end="123:25">QSIMPLEQ_FOREACH_SAFE</name><argument_list pos:start="123:26" pos:end="123:77">(<argument pos:start="123:27" pos:end="123:44">intermediate_state</argument>, <argument pos:start="123:47" pos:end="123:63">&amp;states_to_delete</argument>, <argument pos:start="123:66" pos:end="123:70">entry</argument>, <argument pos:start="123:73" pos:end="123:76">next</argument>)</argument_list></macro> <block pos:start="123:79" pos:end="131:5">{<block_content pos:start="127:9" pos:end="129:43">

        <comment type="block" pos:start="125:9" pos:end="125:71">/* so that bdrv_close() does not recursively close the chain */</comment>

        <expr_stmt pos:start="127:9" pos:end="127:58"><expr pos:start="127:9" pos:end="127:57"><call pos:start="127:9" pos:end="127:57"><name pos:start="127:9" pos:end="127:27">bdrv_set_backing_hd</name><argument_list pos:start="127:28" pos:end="127:57">(<argument pos:start="127:29" pos:end="127:50"><expr pos:start="127:29" pos:end="127:50"><name pos:start="127:29" pos:end="127:50"><name pos:start="127:29" pos:end="127:46">intermediate_state</name><operator pos:start="127:47" pos:end="127:48">-&gt;</operator><name pos:start="127:49" pos:end="127:50">bs</name></name></expr></argument>, <argument pos:start="127:53" pos:end="127:56"><expr pos:start="127:53" pos:end="127:56"><name pos:start="127:53" pos:end="127:56">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:43"><expr pos:start="129:9" pos:end="129:42"><call pos:start="129:9" pos:end="129:42"><name pos:start="129:9" pos:end="129:18">bdrv_unref</name><argument_list pos:start="129:19" pos:end="129:42">(<argument pos:start="129:20" pos:end="129:41"><expr pos:start="129:20" pos:end="129:41"><name pos:start="129:20" pos:end="129:41"><name pos:start="129:20" pos:end="129:37">intermediate_state</name><operator pos:start="129:38" pos:end="129:39">-&gt;</operator><name pos:start="129:40" pos:end="129:41">bs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

    <expr_stmt pos:start="133:5" pos:end="133:12"><expr pos:start="133:5" pos:end="133:11"><name pos:start="133:5" pos:end="133:7">ret</name> <operator pos:start="133:9" pos:end="133:9">=</operator> <literal type="number" pos:start="133:11" pos:end="133:11">0</literal></expr>;</expr_stmt>



<label pos:start="137:1" pos:end="137:5"><name pos:start="137:1" pos:end="137:4">exit</name>:</label>

    <macro pos:start="139:5" pos:end="139:77"><name pos:start="139:5" pos:end="139:25">QSIMPLEQ_FOREACH_SAFE</name><argument_list pos:start="139:26" pos:end="139:77">(<argument pos:start="139:27" pos:end="139:44">intermediate_state</argument>, <argument pos:start="139:47" pos:end="139:63">&amp;states_to_delete</argument>, <argument pos:start="139:66" pos:end="139:70">entry</argument>, <argument pos:start="139:73" pos:end="139:76">next</argument>)</argument_list></macro> <block pos:start="139:79" pos:end="143:5">{<block_content pos:start="141:9" pos:end="141:35">

        <expr_stmt pos:start="141:9" pos:end="141:35"><expr pos:start="141:9" pos:end="141:34"><call pos:start="141:9" pos:end="141:34"><name pos:start="141:9" pos:end="141:14">g_free</name><argument_list pos:start="141:15" pos:end="141:34">(<argument pos:start="141:16" pos:end="141:33"><expr pos:start="141:16" pos:end="141:33"><name pos:start="141:16" pos:end="141:33">intermediate_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

    <return pos:start="145:5" pos:end="145:15">return <expr pos:start="145:12" pos:end="145:14"><name pos:start="145:12" pos:end="145:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
