<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14404.c" pos:tabs="8"><function pos:start="1:1" pos:end="121:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:36">xio3130_downstream_initfn</name><parameter_list pos:start="1:37" pos:end="1:50">(<parameter pos:start="1:38" pos:end="1:49"><decl pos:start="1:38" pos:end="1:49"><type pos:start="1:38" pos:end="1:48"><name pos:start="1:38" pos:end="1:46">PCIDevice</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:49">d</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="121:1">{<block_content pos:start="5:5" pos:end="119:14">

    <decl_stmt pos:start="5:5" pos:end="5:49"><decl pos:start="5:5" pos:end="5:48"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:13">PCIBridge</name><modifier pos:start="5:14" pos:end="5:14">*</modifier></type> <name pos:start="5:16" pos:end="5:17">br</name> <init pos:start="5:19" pos:end="5:48">= <expr pos:start="5:21" pos:end="5:48"><call pos:start="5:21" pos:end="5:48"><name pos:start="5:21" pos:end="5:29">DO_UPCAST</name><argument_list pos:start="5:30" pos:end="5:48">(<argument pos:start="5:31" pos:end="5:39"><expr pos:start="5:31" pos:end="5:39"><name pos:start="5:31" pos:end="5:39">PCIBridge</name></expr></argument>, <argument pos:start="5:42" pos:end="5:44"><expr pos:start="5:42" pos:end="5:44"><name pos:start="5:42" pos:end="5:44">dev</name></expr></argument>, <argument pos:start="5:47" pos:end="5:47"><expr pos:start="5:47" pos:end="5:47"><name pos:start="5:47" pos:end="5:47">d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:46"><decl pos:start="7:5" pos:end="7:45"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">PCIEPort</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:15">p</name> <init pos:start="7:17" pos:end="7:45">= <expr pos:start="7:19" pos:end="7:45"><call pos:start="7:19" pos:end="7:45"><name pos:start="7:19" pos:end="7:27">DO_UPCAST</name><argument_list pos:start="7:28" pos:end="7:45">(<argument pos:start="7:29" pos:end="7:36"><expr pos:start="7:29" pos:end="7:36"><name pos:start="7:29" pos:end="7:36">PCIEPort</name></expr></argument>, <argument pos:start="7:39" pos:end="7:40"><expr pos:start="7:39" pos:end="7:40"><name pos:start="7:39" pos:end="7:40">br</name></expr></argument>, <argument pos:start="7:43" pos:end="7:44"><expr pos:start="7:43" pos:end="7:44"><name pos:start="7:43" pos:end="7:44">br</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:47"><decl pos:start="9:5" pos:end="9:46"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">PCIESlot</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:15">s</name> <init pos:start="9:17" pos:end="9:46">= <expr pos:start="9:19" pos:end="9:46"><call pos:start="9:19" pos:end="9:46"><name pos:start="9:19" pos:end="9:27">DO_UPCAST</name><argument_list pos:start="9:28" pos:end="9:46">(<argument pos:start="9:29" pos:end="9:36"><expr pos:start="9:29" pos:end="9:36"><name pos:start="9:29" pos:end="9:36">PCIESlot</name></expr></argument>, <argument pos:start="9:39" pos:end="9:42"><expr pos:start="9:39" pos:end="9:42"><name pos:start="9:39" pos:end="9:42">port</name></expr></argument>, <argument pos:start="9:45" pos:end="9:45"><expr pos:start="9:45" pos:end="9:45"><name pos:start="9:45" pos:end="9:45">p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:11"><decl pos:start="11:5" pos:end="11:10"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:10">rc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">tmp</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:30"><expr pos:start="17:5" pos:end="17:29"><name pos:start="17:5" pos:end="17:6">rc</name> <operator pos:start="17:8" pos:end="17:8">=</operator> <call pos:start="17:10" pos:end="17:29"><name pos:start="17:10" pos:end="17:26">pci_bridge_initfn</name><argument_list pos:start="17:27" pos:end="17:29">(<argument pos:start="17:28" pos:end="17:28"><expr pos:start="17:28" pos:end="17:28"><name pos:start="17:28" pos:end="17:28">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:15">(<expr pos:start="19:9" pos:end="19:14"><name pos:start="19:9" pos:end="19:10">rc</name> <operator pos:start="19:12" pos:end="19:12">&lt;</operator> <literal type="number" pos:start="19:14" pos:end="19:14">0</literal></expr>)</condition> <block pos:start="19:17" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:18">

        <return pos:start="21:9" pos:end="21:18">return <expr pos:start="21:16" pos:end="21:17"><name pos:start="21:16" pos:end="21:17">rc</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:26"><expr pos:start="27:5" pos:end="27:25"><call pos:start="27:5" pos:end="27:25"><name pos:start="27:5" pos:end="27:22">pcie_port_init_reg</name><argument_list pos:start="27:23" pos:end="27:25">(<argument pos:start="27:24" pos:end="27:24"><expr pos:start="27:24" pos:end="27:24"><name pos:start="27:24" pos:end="27:24">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:58"><expr pos:start="29:5" pos:end="29:57"><call pos:start="29:5" pos:end="29:57"><name pos:start="29:5" pos:end="29:28">pci_config_set_vendor_id</name><argument_list pos:start="29:29" pos:end="29:57">(<argument pos:start="29:30" pos:end="29:38"><expr pos:start="29:30" pos:end="29:38"><name pos:start="29:30" pos:end="29:38"><name pos:start="29:30" pos:end="29:30">d</name><operator pos:start="29:31" pos:end="29:32">-&gt;</operator><name pos:start="29:33" pos:end="29:38">config</name></name></expr></argument>, <argument pos:start="29:41" pos:end="29:56"><expr pos:start="29:41" pos:end="29:56"><name pos:start="29:41" pos:end="29:56">PCI_VENDOR_ID_TI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:67"><expr pos:start="31:5" pos:end="31:66"><call pos:start="31:5" pos:end="31:66"><name pos:start="31:5" pos:end="31:28">pci_config_set_device_id</name><argument_list pos:start="31:29" pos:end="31:66">(<argument pos:start="31:30" pos:end="31:38"><expr pos:start="31:30" pos:end="31:38"><name pos:start="31:30" pos:end="31:38"><name pos:start="31:30" pos:end="31:30">d</name><operator pos:start="31:31" pos:end="31:32">-&gt;</operator><name pos:start="31:33" pos:end="31:38">config</name></name></expr></argument>, <argument pos:start="31:41" pos:end="31:65"><expr pos:start="31:41" pos:end="31:65"><name pos:start="31:41" pos:end="31:65">PCI_DEVICE_ID_TI_XIO3130D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:50"><expr pos:start="33:5" pos:end="33:49"><name pos:start="33:5" pos:end="33:30"><name pos:start="33:5" pos:end="33:5">d</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:13">config</name><index pos:start="33:14" pos:end="33:30">[<expr pos:start="33:15" pos:end="33:29"><name pos:start="33:15" pos:end="33:29">PCI_REVISION_ID</name></expr>]</index></name> <operator pos:start="33:32" pos:end="33:32">=</operator> <name pos:start="33:34" pos:end="33:49">XIO3130_REVISION</name></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="41:71"><expr pos:start="37:5" pos:end="41:70"><name pos:start="37:5" pos:end="37:6">rc</name> <operator pos:start="37:8" pos:end="37:8">=</operator> <call pos:start="37:10" pos:end="41:70"><name pos:start="37:10" pos:end="37:17">msi_init</name><argument_list pos:start="37:18" pos:end="41:70">(<argument pos:start="37:19" pos:end="37:19"><expr pos:start="37:19" pos:end="37:19"><name pos:start="37:19" pos:end="37:19">d</name></expr></argument>, <argument pos:start="37:22" pos:end="37:39"><expr pos:start="37:22" pos:end="37:39"><name pos:start="37:22" pos:end="37:39">XIO3130_MSI_OFFSET</name></expr></argument>, <argument pos:start="37:42" pos:end="37:62"><expr pos:start="37:42" pos:end="37:62"><name pos:start="37:42" pos:end="37:62">XIO3130_MSI_NR_VECTOR</name></expr></argument>,

                  <argument pos:start="39:19" pos:end="39:67"><expr pos:start="39:19" pos:end="39:67"><name pos:start="39:19" pos:end="39:45">XIO3130_MSI_SUPPORTED_FLAGS</name> <operator pos:start="39:47" pos:end="39:47">&amp;</operator> <name pos:start="39:49" pos:end="39:67">PCI_MSI_FLAGS_64BIT</name></expr></argument>,

                  <argument pos:start="41:19" pos:end="41:69"><expr pos:start="41:19" pos:end="41:69"><name pos:start="41:19" pos:end="41:45">XIO3130_MSI_SUPPORTED_FLAGS</name> <operator pos:start="41:47" pos:end="41:47">&amp;</operator> <name pos:start="41:49" pos:end="41:69">PCI_MSI_FLAGS_MASKBIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="47:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:15">(<expr pos:start="43:9" pos:end="43:14"><name pos:start="43:9" pos:end="43:10">rc</name> <operator pos:start="43:12" pos:end="43:12">&lt;</operator> <literal type="number" pos:start="43:14" pos:end="43:14">0</literal></expr>)</condition> <block pos:start="43:17" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:24">

        <goto pos:start="45:9" pos:end="45:24">goto <name pos:start="45:14" pos:end="45:23">err_bridge</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="49:5" pos:end="51:71"><expr pos:start="49:5" pos:end="51:70"><name pos:start="49:5" pos:end="49:6">rc</name> <operator pos:start="49:8" pos:end="49:8">=</operator> <call pos:start="49:10" pos:end="51:70"><name pos:start="49:10" pos:end="49:30">pci_bridge_ssvid_init</name><argument_list pos:start="49:31" pos:end="51:70">(<argument pos:start="49:32" pos:end="49:32"><expr pos:start="49:32" pos:end="49:32"><name pos:start="49:32" pos:end="49:32">d</name></expr></argument>, <argument pos:start="49:35" pos:end="49:54"><expr pos:start="49:35" pos:end="49:54"><name pos:start="49:35" pos:end="49:54">XIO3130_SSVID_OFFSET</name></expr></argument>,

                               <argument pos:start="51:32" pos:end="51:49"><expr pos:start="51:32" pos:end="51:49"><name pos:start="51:32" pos:end="51:49">XIO3130_SSVID_SVID</name></expr></argument>, <argument pos:start="51:52" pos:end="51:69"><expr pos:start="51:52" pos:end="51:69"><name pos:start="51:52" pos:end="51:69">XIO3130_SSVID_SSID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="57:5"><if pos:start="53:5" pos:end="57:5">if <condition pos:start="53:8" pos:end="53:15">(<expr pos:start="53:9" pos:end="53:14"><name pos:start="53:9" pos:end="53:10">rc</name> <operator pos:start="53:12" pos:end="53:12">&lt;</operator> <literal type="number" pos:start="53:14" pos:end="53:14">0</literal></expr>)</condition> <block pos:start="53:17" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:24">

        <goto pos:start="55:9" pos:end="55:24">goto <name pos:start="55:14" pos:end="55:23">err_bridge</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="59:5" pos:end="61:32"><expr pos:start="59:5" pos:end="61:31"><name pos:start="59:5" pos:end="59:6">rc</name> <operator pos:start="59:8" pos:end="59:8">=</operator> <call pos:start="59:10" pos:end="61:31"><name pos:start="59:10" pos:end="59:22">pcie_cap_init</name><argument_list pos:start="59:23" pos:end="61:31">(<argument pos:start="59:24" pos:end="59:24"><expr pos:start="59:24" pos:end="59:24"><name pos:start="59:24" pos:end="59:24">d</name></expr></argument>, <argument pos:start="59:27" pos:end="59:44"><expr pos:start="59:27" pos:end="59:44"><name pos:start="59:27" pos:end="59:44">XIO3130_EXP_OFFSET</name></expr></argument>, <argument pos:start="59:47" pos:end="59:69"><expr pos:start="59:47" pos:end="59:69"><name pos:start="59:47" pos:end="59:69">PCI_EXP_TYPE_DOWNSTREAM</name></expr></argument>,

                       <argument pos:start="61:24" pos:end="61:30"><expr pos:start="61:24" pos:end="61:30"><name pos:start="61:24" pos:end="61:30"><name pos:start="61:24" pos:end="61:24">p</name><operator pos:start="61:25" pos:end="61:26">-&gt;</operator><name pos:start="61:27" pos:end="61:30">port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="67:5"><if pos:start="63:5" pos:end="67:5">if <condition pos:start="63:8" pos:end="63:15">(<expr pos:start="63:9" pos:end="63:14"><name pos:start="63:9" pos:end="63:10">rc</name> <operator pos:start="63:12" pos:end="63:12">&lt;</operator> <literal type="number" pos:start="63:14" pos:end="63:14">0</literal></expr>)</condition> <block pos:start="63:17" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:21">

        <goto pos:start="65:9" pos:end="65:21">goto <name pos:start="65:14" pos:end="65:20">err_msi</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:25"><expr pos:start="69:5" pos:end="69:24"><call pos:start="69:5" pos:end="69:24"><name pos:start="69:5" pos:end="69:21">pcie_cap_flr_init</name><argument_list pos:start="69:22" pos:end="69:24">(<argument pos:start="69:23" pos:end="69:23"><expr pos:start="69:23" pos:end="69:23"><name pos:start="69:23" pos:end="69:23">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:28"><expr pos:start="71:5" pos:end="71:27"><call pos:start="71:5" pos:end="71:27"><name pos:start="71:5" pos:end="71:24">pcie_cap_deverr_init</name><argument_list pos:start="71:25" pos:end="71:27">(<argument pos:start="71:26" pos:end="71:26"><expr pos:start="71:26" pos:end="71:26"><name pos:start="71:26" pos:end="71:26">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:35"><expr pos:start="73:5" pos:end="73:34"><call pos:start="73:5" pos:end="73:34"><name pos:start="73:5" pos:end="73:22">pcie_cap_slot_init</name><argument_list pos:start="73:23" pos:end="73:34">(<argument pos:start="73:24" pos:end="73:24"><expr pos:start="73:24" pos:end="73:24"><name pos:start="73:24" pos:end="73:24">d</name></expr></argument>, <argument pos:start="73:27" pos:end="73:33"><expr pos:start="73:27" pos:end="73:33"><name pos:start="73:27" pos:end="73:33"><name pos:start="73:27" pos:end="73:27">s</name><operator pos:start="73:28" pos:end="73:29">-&gt;</operator><name pos:start="73:30" pos:end="73:33">slot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:36"><expr pos:start="75:5" pos:end="75:35"><call pos:start="75:5" pos:end="75:35"><name pos:start="75:5" pos:end="75:23">pcie_chassis_create</name><argument_list pos:start="75:24" pos:end="75:35">(<argument pos:start="75:25" pos:end="75:34"><expr pos:start="75:25" pos:end="75:34"><name pos:start="75:25" pos:end="75:34"><name pos:start="75:25" pos:end="75:25">s</name><operator pos:start="75:26" pos:end="75:27">-&gt;</operator><name pos:start="75:28" pos:end="75:34">chassis</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:34"><expr pos:start="77:5" pos:end="77:33"><name pos:start="77:5" pos:end="77:6">rc</name> <operator pos:start="77:8" pos:end="77:8">=</operator> <call pos:start="77:10" pos:end="77:33"><name pos:start="77:10" pos:end="77:30">pcie_chassis_add_slot</name><argument_list pos:start="77:31" pos:end="77:33">(<argument pos:start="77:32" pos:end="77:32"><expr pos:start="77:32" pos:end="77:32"><name pos:start="77:32" pos:end="77:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="83:5"><if pos:start="79:5" pos:end="83:5">if <condition pos:start="79:8" pos:end="79:15">(<expr pos:start="79:9" pos:end="79:14"><name pos:start="79:9" pos:end="79:10">rc</name> <operator pos:start="79:12" pos:end="79:12">&lt;</operator> <literal type="number" pos:start="79:14" pos:end="79:14">0</literal></expr>)</condition> <block pos:start="79:17" pos:end="83:5">{<block_content pos:start="81:9" pos:end="81:26">

        <goto pos:start="81:9" pos:end="81:26">goto <name pos:start="81:14" pos:end="81:25">err_pcie_cap</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:25"><expr pos:start="85:5" pos:end="85:24"><call pos:start="85:5" pos:end="85:24"><name pos:start="85:5" pos:end="85:21">pcie_cap_ari_init</name><argument_list pos:start="85:22" pos:end="85:24">(<argument pos:start="85:23" pos:end="85:23"><expr pos:start="85:23" pos:end="85:23"><name pos:start="85:23" pos:end="85:23">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:46"><expr pos:start="87:5" pos:end="87:45"><name pos:start="87:5" pos:end="87:6">rc</name> <operator pos:start="87:8" pos:end="87:8">=</operator> <call pos:start="87:10" pos:end="87:45"><name pos:start="87:10" pos:end="87:22">pcie_aer_init</name><argument_list pos:start="87:23" pos:end="87:45">(<argument pos:start="87:24" pos:end="87:24"><expr pos:start="87:24" pos:end="87:24"><name pos:start="87:24" pos:end="87:24">d</name></expr></argument>, <argument pos:start="87:27" pos:end="87:44"><expr pos:start="87:27" pos:end="87:44"><name pos:start="87:27" pos:end="87:44">XIO3130_AER_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="89:5" pos:end="93:5"><if pos:start="89:5" pos:end="93:5">if <condition pos:start="89:8" pos:end="89:15">(<expr pos:start="89:9" pos:end="89:14"><name pos:start="89:9" pos:end="89:10">rc</name> <operator pos:start="89:12" pos:end="89:12">&lt;</operator> <literal type="number" pos:start="89:14" pos:end="89:14">0</literal></expr>)</condition> <block pos:start="89:17" pos:end="93:5">{<block_content pos:start="91:9" pos:end="91:17">

        <goto pos:start="91:9" pos:end="91:17">goto <name pos:start="91:14" pos:end="91:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <return pos:start="97:5" pos:end="97:13">return <expr pos:start="97:12" pos:end="97:12"><literal type="number" pos:start="97:12" pos:end="97:12">0</literal></expr>;</return>



<label pos:start="101:1" pos:end="101:4"><name pos:start="101:1" pos:end="101:3">err</name>:</label>

    <expr_stmt pos:start="103:5" pos:end="103:29"><expr pos:start="103:5" pos:end="103:28"><call pos:start="103:5" pos:end="103:28"><name pos:start="103:5" pos:end="103:25">pcie_chassis_del_slot</name><argument_list pos:start="103:26" pos:end="103:28">(<argument pos:start="103:27" pos:end="103:27"><expr pos:start="103:27" pos:end="103:27"><name pos:start="103:27" pos:end="103:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="105:1" pos:end="105:13"><name pos:start="105:1" pos:end="105:12">err_pcie_cap</name>:</label>

    <expr_stmt pos:start="107:5" pos:end="107:21"><expr pos:start="107:5" pos:end="107:20"><call pos:start="107:5" pos:end="107:20"><name pos:start="107:5" pos:end="107:17">pcie_cap_exit</name><argument_list pos:start="107:18" pos:end="107:20">(<argument pos:start="107:19" pos:end="107:19"><expr pos:start="107:19" pos:end="107:19"><name pos:start="107:19" pos:end="107:19">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="109:1" pos:end="109:8"><name pos:start="109:1" pos:end="109:7">err_msi</name>:</label>

    <expr_stmt pos:start="111:5" pos:end="111:18"><expr pos:start="111:5" pos:end="111:17"><call pos:start="111:5" pos:end="111:17"><name pos:start="111:5" pos:end="111:14">msi_uninit</name><argument_list pos:start="111:15" pos:end="111:17">(<argument pos:start="111:16" pos:end="111:16"><expr pos:start="111:16" pos:end="111:16"><name pos:start="111:16" pos:end="111:16">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="113:1" pos:end="113:11"><name pos:start="113:1" pos:end="113:10">err_bridge</name>:</label>

    <expr_stmt pos:start="115:5" pos:end="115:31"><expr pos:start="115:5" pos:end="115:30"><name pos:start="115:5" pos:end="115:7">tmp</name> <operator pos:start="115:9" pos:end="115:9">=</operator> <call pos:start="115:11" pos:end="115:30"><name pos:start="115:11" pos:end="115:27">pci_bridge_exitfn</name><argument_list pos:start="115:28" pos:end="115:30">(<argument pos:start="115:29" pos:end="115:29"><expr pos:start="115:29" pos:end="115:29"><name pos:start="115:29" pos:end="115:29">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:17"><expr pos:start="117:5" pos:end="117:16"><call pos:start="117:5" pos:end="117:16"><name pos:start="117:5" pos:end="117:10">assert</name><argument_list pos:start="117:11" pos:end="117:16">(<argument pos:start="117:12" pos:end="117:15"><expr pos:start="117:12" pos:end="117:15"><operator pos:start="117:12" pos:end="117:12">!</operator><name pos:start="117:13" pos:end="117:15">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="119:5" pos:end="119:14">return <expr pos:start="119:12" pos:end="119:13"><name pos:start="119:12" pos:end="119:13">rc</name></expr>;</return>

</block_content>}</block></function>
</unit>
