<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16447.c" pos:tabs="8"><function pos:start="1:1" pos:end="389:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">query_formats</name><parameter_list pos:start="1:25" pos:end="1:64">(<parameter pos:start="1:26" pos:end="1:45"><decl pos:start="1:26" pos:end="1:45"><type pos:start="1:26" pos:end="1:45"><name pos:start="1:26" pos:end="1:38">AVFilterGraph</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:45">graph</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:63"><decl pos:start="1:48" pos:end="1:63"><type pos:start="1:48" pos:end="1:63"><name pos:start="1:48" pos:end="1:54">AVClass</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:63">log_ctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="389:1">{<block_content pos:start="5:5" pos:end="387:13">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:12"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:12">j</name></decl>, <decl pos:start="5:15" pos:end="5:17"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:15" pos:end="5:17">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:46"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:20">scaler_count</name> <init pos:start="7:22" pos:end="7:24">= <expr pos:start="7:24" pos:end="7:24"><literal type="number" pos:start="7:24" pos:end="7:24">0</literal></expr></init></decl>, <decl pos:start="7:27" pos:end="7:45"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:27" pos:end="7:41">resampler_count</name> <init pos:start="7:43" pos:end="7:45">= <expr pos:start="7:45" pos:end="7:45"><literal type="number" pos:start="7:45" pos:end="7:45">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:21">count_queried</name> <init pos:start="9:23" pos:end="9:25">= <expr pos:start="9:25" pos:end="9:25"><literal type="number" pos:start="9:25" pos:end="9:25">0</literal></expr></init></decl>;</decl_stmt>        <comment type="block" pos:start="9:35" pos:end="9:75">/* successful calls to query_formats() */</comment>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:20">count_merged</name> <init pos:start="11:22" pos:end="11:24">= <expr pos:start="11:24" pos:end="11:24"><literal type="number" pos:start="11:24" pos:end="11:24">0</literal></expr></init></decl>;</decl_stmt>         <comment type="block" pos:start="11:35" pos:end="11:73">/* successful merge of formats lists */</comment>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:32"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:28">count_already_merged</name> <init pos:start="13:30" pos:end="13:32">= <expr pos:start="13:32" pos:end="13:32"><literal type="number" pos:start="13:32" pos:end="13:32">0</literal></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="13:35" pos:end="13:60">/* lists already merged */</comment>

    <decl_stmt pos:start="15:5" pos:end="15:26"><decl pos:start="15:5" pos:end="15:25"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:21">count_delayed</name> <init pos:start="15:23" pos:end="15:25">= <expr pos:start="15:25" pos:end="15:25"><literal type="number" pos:start="15:25" pos:end="15:25">0</literal></expr></init></decl>;</decl_stmt>        <comment type="block" pos:start="15:35" pos:end="15:74">/* lists that need to be merged later */</comment>



    <for pos:start="19:5" pos:end="43:5">for <control pos:start="19:9" pos:end="19:43">(<init pos:start="19:10" pos:end="19:15"><expr pos:start="19:10" pos:end="19:14"><name pos:start="19:10" pos:end="19:10">i</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <literal type="number" pos:start="19:14" pos:end="19:14">0</literal></expr>;</init> <condition pos:start="19:17" pos:end="19:38"><expr pos:start="19:17" pos:end="19:37"><name pos:start="19:17" pos:end="19:17">i</name> <operator pos:start="19:19" pos:end="19:19">&lt;</operator> <name pos:start="19:21" pos:end="19:37"><name pos:start="19:21" pos:end="19:25">graph</name><operator pos:start="19:26" pos:end="19:27">-&gt;</operator><name pos:start="19:28" pos:end="19:37">nb_filters</name></name></expr>;</condition> <incr pos:start="19:40" pos:end="19:42"><expr pos:start="19:40" pos:end="19:42"><name pos:start="19:40" pos:end="19:40">i</name><operator pos:start="19:41" pos:end="19:42">++</operator></expr></incr>)</control> <block pos:start="19:45" pos:end="43:5">{<block_content pos:start="21:9" pos:end="41:34">

        <decl_stmt pos:start="21:9" pos:end="21:47"><decl pos:start="21:9" pos:end="21:46"><type pos:start="21:9" pos:end="21:25"><name pos:start="21:9" pos:end="21:23">AVFilterContext</name> <modifier pos:start="21:25" pos:end="21:25">*</modifier></type><name pos:start="21:26" pos:end="21:26">f</name> <init pos:start="21:28" pos:end="21:46">= <expr pos:start="21:30" pos:end="21:46"><name pos:start="21:30" pos:end="21:46"><name pos:start="21:30" pos:end="21:34">graph</name><operator pos:start="21:35" pos:end="21:36">-&gt;</operator><name pos:start="21:37" pos:end="21:43">filters</name><index pos:start="21:44" pos:end="21:46">[<expr pos:start="21:45" pos:end="21:45"><name pos:start="21:45" pos:end="21:45">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="23:9" pos:end="25:21"><if pos:start="23:9" pos:end="25:21">if <condition pos:start="23:12" pos:end="23:32">(<expr pos:start="23:13" pos:end="23:31"><call pos:start="23:13" pos:end="23:31"><name pos:start="23:13" pos:end="23:28">formats_declared</name><argument_list pos:start="23:29" pos:end="23:31">(<argument pos:start="23:30" pos:end="23:30"><expr pos:start="23:30" pos:end="23:30"><name pos:start="23:30" pos:end="23:30">f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="25:13" pos:end="25:21"><block_content pos:start="25:13" pos:end="25:21">

            <continue pos:start="25:13" pos:end="25:21">continue;</continue></block_content></block></if></if_stmt>

        <if_stmt pos:start="27:9" pos:end="33:46"><if pos:start="27:9" pos:end="29:42">if <condition pos:start="27:12" pos:end="27:37">(<expr pos:start="27:13" pos:end="27:36"><name pos:start="27:13" pos:end="27:36"><name pos:start="27:13" pos:end="27:13">f</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:21">filter</name><operator pos:start="27:22" pos:end="27:23">-&gt;</operator><name pos:start="27:24" pos:end="27:36">query_formats</name></name></expr>)</condition><block type="pseudo" pos:start="29:13" pos:end="29:42"><block_content pos:start="29:13" pos:end="29:42">

            <expr_stmt pos:start="29:13" pos:end="29:42"><expr pos:start="29:13" pos:end="29:41"><name pos:start="29:13" pos:end="29:15">ret</name> <operator pos:start="29:17" pos:end="29:17">=</operator> <call pos:start="29:19" pos:end="29:41"><name pos:start="29:19" pos:end="29:38">filter_query_formats</name><argument_list pos:start="29:39" pos:end="29:41">(<argument pos:start="29:40" pos:end="29:40"><expr pos:start="29:40" pos:end="29:40"><name pos:start="29:40" pos:end="29:40">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="31:9" pos:end="33:46">else<block type="pseudo" pos:start="33:13" pos:end="33:46"><block_content pos:start="33:13" pos:end="33:46">

            <expr_stmt pos:start="33:13" pos:end="33:46"><expr pos:start="33:13" pos:end="33:45"><name pos:start="33:13" pos:end="33:15">ret</name> <operator pos:start="33:17" pos:end="33:17">=</operator> <call pos:start="33:19" pos:end="33:45"><name pos:start="33:19" pos:end="33:42">ff_default_query_formats</name><argument_list pos:start="33:43" pos:end="33:45">(<argument pos:start="33:44" pos:end="33:44"><expr pos:start="33:44" pos:end="33:44"><name pos:start="33:44" pos:end="33:44">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="35:9" pos:end="37:23"><if pos:start="35:9" pos:end="37:23">if <condition pos:start="35:12" pos:end="35:46">(<expr pos:start="35:13" pos:end="35:45"><name pos:start="35:13" pos:end="35:15">ret</name> <operator pos:start="35:17" pos:end="35:17">&lt;</operator> <literal type="number" pos:start="35:19" pos:end="35:19">0</literal> <operator pos:start="35:21" pos:end="35:22">&amp;&amp;</operator> <name pos:start="35:24" pos:end="35:26">ret</name> <operator pos:start="35:28" pos:end="35:29">!=</operator> <call pos:start="35:31" pos:end="35:45"><name pos:start="35:31" pos:end="35:37">AVERROR</name><argument_list pos:start="35:38" pos:end="35:45">(<argument pos:start="35:39" pos:end="35:44"><expr pos:start="35:39" pos:end="35:44"><name pos:start="35:39" pos:end="35:44">EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="37:13" pos:end="37:23"><block_content pos:start="37:13" pos:end="37:23">

            <return pos:start="37:13" pos:end="37:23">return <expr pos:start="37:20" pos:end="37:22"><name pos:start="37:20" pos:end="37:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block" pos:start="39:9" pos:end="39:76">/* note: EAGAIN could indicate a partial success, not counted yet */</comment>

        <expr_stmt pos:start="41:9" pos:end="41:34"><expr pos:start="41:9" pos:end="41:33"><name pos:start="41:9" pos:end="41:21">count_queried</name> <operator pos:start="41:23" pos:end="41:24">+=</operator> <name pos:start="41:26" pos:end="41:28">ret</name> <operator pos:start="41:30" pos:end="41:31">&gt;=</operator> <literal type="number" pos:start="41:33" pos:end="41:33">0</literal></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="47:5" pos:end="47:63">/* go through and merge as many format lists as possible */</comment>

    <for pos:start="49:5" pos:end="335:5">for <control pos:start="49:9" pos:end="49:43">(<init pos:start="49:10" pos:end="49:15"><expr pos:start="49:10" pos:end="49:14"><name pos:start="49:10" pos:end="49:10">i</name> <operator pos:start="49:12" pos:end="49:12">=</operator> <literal type="number" pos:start="49:14" pos:end="49:14">0</literal></expr>;</init> <condition pos:start="49:17" pos:end="49:38"><expr pos:start="49:17" pos:end="49:37"><name pos:start="49:17" pos:end="49:17">i</name> <operator pos:start="49:19" pos:end="49:19">&lt;</operator> <name pos:start="49:21" pos:end="49:37"><name pos:start="49:21" pos:end="49:25">graph</name><operator pos:start="49:26" pos:end="49:27">-&gt;</operator><name pos:start="49:28" pos:end="49:37">nb_filters</name></name></expr>;</condition> <incr pos:start="49:40" pos:end="49:42"><expr pos:start="49:40" pos:end="49:42"><name pos:start="49:40" pos:end="49:40">i</name><operator pos:start="49:41" pos:end="49:42">++</operator></expr></incr>)</control> <block pos:start="49:45" pos:end="335:5">{<block_content pos:start="51:9" pos:end="333:9">

        <decl_stmt pos:start="51:9" pos:end="51:52"><decl pos:start="51:9" pos:end="51:51"><type pos:start="51:9" pos:end="51:25"><name pos:start="51:9" pos:end="51:23">AVFilterContext</name> <modifier pos:start="51:25" pos:end="51:25">*</modifier></type><name pos:start="51:26" pos:end="51:31">filter</name> <init pos:start="51:33" pos:end="51:51">= <expr pos:start="51:35" pos:end="51:51"><name pos:start="51:35" pos:end="51:51"><name pos:start="51:35" pos:end="51:39">graph</name><operator pos:start="51:40" pos:end="51:41">-&gt;</operator><name pos:start="51:42" pos:end="51:48">filters</name><index pos:start="51:49" pos:end="51:51">[<expr pos:start="51:50" pos:end="51:50"><name pos:start="51:50" pos:end="51:50">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <for pos:start="55:9" pos:end="333:9">for <control pos:start="55:13" pos:end="55:47">(<init pos:start="55:14" pos:end="55:19"><expr pos:start="55:14" pos:end="55:18"><name pos:start="55:14" pos:end="55:14">j</name> <operator pos:start="55:16" pos:end="55:16">=</operator> <literal type="number" pos:start="55:18" pos:end="55:18">0</literal></expr>;</init> <condition pos:start="55:21" pos:end="55:42"><expr pos:start="55:21" pos:end="55:41"><name pos:start="55:21" pos:end="55:21">j</name> <operator pos:start="55:23" pos:end="55:23">&lt;</operator> <name pos:start="55:25" pos:end="55:41"><name pos:start="55:25" pos:end="55:30">filter</name><operator pos:start="55:31" pos:end="55:32">-&gt;</operator><name pos:start="55:33" pos:end="55:41">nb_inputs</name></name></expr>;</condition> <incr pos:start="55:44" pos:end="55:46"><expr pos:start="55:44" pos:end="55:46"><name pos:start="55:44" pos:end="55:44">j</name><operator pos:start="55:45" pos:end="55:46">++</operator></expr></incr>)</control> <block pos:start="55:49" pos:end="333:9">{<block_content pos:start="57:13" pos:end="331:13">

            <decl_stmt pos:start="57:13" pos:end="57:51"><decl pos:start="57:13" pos:end="57:50"><type pos:start="57:13" pos:end="57:26"><name pos:start="57:13" pos:end="57:24">AVFilterLink</name> <modifier pos:start="57:26" pos:end="57:26">*</modifier></type><name pos:start="57:27" pos:end="57:30">link</name> <init pos:start="57:32" pos:end="57:50">= <expr pos:start="57:34" pos:end="57:50"><name pos:start="57:34" pos:end="57:50"><name pos:start="57:34" pos:end="57:39">filter</name><operator pos:start="57:40" pos:end="57:41">-&gt;</operator><name pos:start="57:42" pos:end="57:47">inputs</name><index pos:start="57:48" pos:end="57:50">[<expr pos:start="57:49" pos:end="57:49"><name pos:start="57:49" pos:end="57:49">j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="59:13" pos:end="59:35"><decl pos:start="59:13" pos:end="59:34"><type pos:start="59:13" pos:end="59:15"><name pos:start="59:13" pos:end="59:15">int</name></type> <name pos:start="59:17" pos:end="59:30">convert_needed</name> <init pos:start="59:32" pos:end="59:34">= <expr pos:start="59:34" pos:end="59:34"><literal type="number" pos:start="59:34" pos:end="59:34">0</literal></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="63:13" pos:end="65:25"><if pos:start="63:13" pos:end="65:25">if <condition pos:start="63:16" pos:end="63:22">(<expr pos:start="63:17" pos:end="63:21"><operator pos:start="63:17" pos:end="63:17">!</operator><name pos:start="63:18" pos:end="63:21">link</name></expr>)</condition><block type="pseudo" pos:start="65:17" pos:end="65:25"><block_content pos:start="65:17" pos:end="65:25">

                <continue pos:start="65:17" pos:end="65:25">continue;</continue></block_content></block></if></if_stmt>



            <if_stmt pos:start="69:13" pos:end="77:39"><if pos:start="69:13" pos:end="77:39">if <condition pos:start="69:16" pos:end="71:57">(<expr pos:start="69:17" pos:end="71:56"><name pos:start="69:17" pos:end="69:32"><name pos:start="69:17" pos:end="69:20">link</name><operator pos:start="69:21" pos:end="69:22">-&gt;</operator><name pos:start="69:23" pos:end="69:32">in_formats</name></name> <operator pos:start="69:34" pos:end="69:35">!=</operator> <name pos:start="69:37" pos:end="69:53"><name pos:start="69:37" pos:end="69:40">link</name><operator pos:start="69:41" pos:end="69:42">-&gt;</operator><name pos:start="69:43" pos:end="69:53">out_formats</name></name>

                <operator pos:start="71:17" pos:end="71:18">&amp;&amp;</operator> <name pos:start="71:20" pos:end="71:35"><name pos:start="71:20" pos:end="71:23">link</name><operator pos:start="71:24" pos:end="71:25">-&gt;</operator><name pos:start="71:26" pos:end="71:35">in_formats</name></name> <operator pos:start="71:37" pos:end="71:38">&amp;&amp;</operator> <name pos:start="71:40" pos:end="71:56"><name pos:start="71:40" pos:end="71:43">link</name><operator pos:start="71:44" pos:end="71:45">-&gt;</operator><name pos:start="71:46" pos:end="71:56">out_formats</name></name></expr>)</condition><block type="pseudo" pos:start="73:17" pos:end="77:39"><block_content pos:start="73:17" pos:end="77:39">

                <if_stmt pos:start="73:17" pos:end="77:39"><if pos:start="73:17" pos:end="77:39">if <condition pos:start="73:20" pos:end="75:53">(<expr pos:start="73:21" pos:end="75:52"><operator pos:start="73:21" pos:end="73:21">!</operator><call pos:start="73:22" pos:end="75:52"><name pos:start="73:22" pos:end="73:38">can_merge_formats</name><argument_list pos:start="73:39" pos:end="75:52">(<argument pos:start="73:40" pos:end="73:55"><expr pos:start="73:40" pos:end="73:55"><name pos:start="73:40" pos:end="73:55"><name pos:start="73:40" pos:end="73:43">link</name><operator pos:start="73:44" pos:end="73:45">-&gt;</operator><name pos:start="73:46" pos:end="73:55">in_formats</name></name></expr></argument>, <argument pos:start="73:58" pos:end="73:74"><expr pos:start="73:58" pos:end="73:74"><name pos:start="73:58" pos:end="73:74"><name pos:start="73:58" pos:end="73:61">link</name><operator pos:start="73:62" pos:end="73:63">-&gt;</operator><name pos:start="73:64" pos:end="73:74">out_formats</name></name></expr></argument>,

                                      <argument pos:start="75:39" pos:end="75:48"><expr pos:start="75:39" pos:end="75:48"><name pos:start="75:39" pos:end="75:48"><name pos:start="75:39" pos:end="75:42">link</name><operator pos:start="75:43" pos:end="75:44">-&gt;</operator><name pos:start="75:45" pos:end="75:48">type</name></name></expr></argument>, <argument pos:start="75:51" pos:end="75:51"><expr pos:start="75:51" pos:end="75:51"><literal type="number" pos:start="75:51" pos:end="75:51">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="77:21" pos:end="77:39"><block_content pos:start="77:21" pos:end="77:39">

                    <expr_stmt pos:start="77:21" pos:end="77:39"><expr pos:start="77:21" pos:end="77:38"><name pos:start="77:21" pos:end="77:34">convert_needed</name> <operator pos:start="77:36" pos:end="77:36">=</operator> <literal type="number" pos:start="77:38" pos:end="77:38">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="79:13" pos:end="114:0"><if pos:start="79:13" pos:end="114:0">if <condition pos:start="79:16" pos:end="79:49">(<expr pos:start="79:17" pos:end="79:48"><name pos:start="79:17" pos:end="79:26"><name pos:start="79:17" pos:end="79:20">link</name><operator pos:start="79:21" pos:end="79:22">-&gt;</operator><name pos:start="79:23" pos:end="79:26">type</name></name> <operator pos:start="79:28" pos:end="79:29">==</operator> <name pos:start="79:31" pos:end="79:48">AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block pos:start="79:51" pos:end="114:0">{<block_content pos:start="81:17" pos:end="91:43">

                <if_stmt pos:start="81:17" pos:end="91:43"><if pos:start="81:17" pos:end="91:43">if <condition pos:start="81:20" pos:end="83:69">(<expr pos:start="81:21" pos:end="83:68"><name pos:start="81:21" pos:end="81:40"><name pos:start="81:21" pos:end="81:24">link</name><operator pos:start="81:25" pos:end="81:26">-&gt;</operator><name pos:start="81:27" pos:end="81:40">in_samplerates</name></name> <operator pos:start="81:42" pos:end="81:43">!=</operator> <name pos:start="81:45" pos:end="81:65"><name pos:start="81:45" pos:end="81:48">link</name><operator pos:start="81:49" pos:end="81:50">-&gt;</operator><name pos:start="81:51" pos:end="81:65">out_samplerates</name></name>

                    <operator pos:start="83:21" pos:end="83:22">&amp;&amp;</operator> <name pos:start="83:24" pos:end="83:43"><name pos:start="83:24" pos:end="83:27">link</name><operator pos:start="83:28" pos:end="83:29">-&gt;</operator><name pos:start="83:30" pos:end="83:43">in_samplerates</name></name> <operator pos:start="83:45" pos:end="83:46">&amp;&amp;</operator> <name pos:start="83:48" pos:end="83:68"><name pos:start="83:48" pos:end="83:51">link</name><operator pos:start="83:52" pos:end="83:53">-&gt;</operator><name pos:start="83:54" pos:end="83:68">out_samplerates</name></name></expr>)</condition><block type="pseudo" pos:start="85:21" pos:end="91:43"><block_content pos:start="85:21" pos:end="91:43">

                    <if_stmt pos:start="85:21" pos:end="91:43"><if pos:start="85:21" pos:end="91:43">if <condition pos:start="85:24" pos:end="89:49">(<expr pos:start="85:25" pos:end="89:48"><operator pos:start="85:25" pos:end="85:25">!</operator><call pos:start="85:26" pos:end="89:48"><name pos:start="85:26" pos:end="85:42">can_merge_formats</name><argument_list pos:start="85:43" pos:end="89:48">(<argument pos:start="85:44" pos:end="85:63"><expr pos:start="85:44" pos:end="85:63"><name pos:start="85:44" pos:end="85:63"><name pos:start="85:44" pos:end="85:47">link</name><operator pos:start="85:48" pos:end="85:49">-&gt;</operator><name pos:start="85:50" pos:end="85:63">in_samplerates</name></name></expr></argument>,

                                           <argument pos:start="87:44" pos:end="87:64"><expr pos:start="87:44" pos:end="87:64"><name pos:start="87:44" pos:end="87:64"><name pos:start="87:44" pos:end="87:47">link</name><operator pos:start="87:48" pos:end="87:49">-&gt;</operator><name pos:start="87:50" pos:end="87:64">out_samplerates</name></name></expr></argument>,

                                           <argument pos:start="89:44" pos:end="89:44"><expr pos:start="89:44" pos:end="89:44"><literal type="number" pos:start="89:44" pos:end="89:44">0</literal></expr></argument>, <argument pos:start="89:47" pos:end="89:47"><expr pos:start="89:47" pos:end="89:47"><literal type="number" pos:start="89:47" pos:end="89:47">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="91:25" pos:end="91:43"><block_content pos:start="91:25" pos:end="91:43">

                        <expr_stmt pos:start="91:25" pos:end="91:43"><expr pos:start="91:25" pos:end="91:42"><name pos:start="91:25" pos:end="91:38">convert_needed</name> <operator pos:start="91:40" pos:end="91:40">=</operator> <literal type="number" pos:start="91:42" pos:end="91:42">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



<cpp:define pos:start="97:1" pos:end="113:13">#<cpp:directive pos:start="97:2" pos:end="97:7">define</cpp:directive> <cpp:macro pos:start="97:9" pos:end="97:40"><name pos:start="97:9" pos:end="97:22">MERGE_DISPATCH</name><parameter_list pos:start="97:23" pos:end="97:40">(<parameter pos:start="97:24" pos:end="97:28"><type pos:start="97:24" pos:end="97:28"><name pos:start="97:24" pos:end="97:28">field</name></type></parameter>, <parameter pos:start="97:31" pos:end="97:39"><type pos:start="97:31" pos:end="97:39"><name pos:start="97:31" pos:end="97:39">statement</name></type></parameter>)</parameter_list></cpp:macro>                                     \

            <cpp:value pos:start="99:13" pos:end="113:13">if (!(link-&gt;in_ ## field &amp;&amp; link-&gt;out_ ## field)) {              \

                count_delayed++;                                             \

            } else if (link-&gt;in_ ## field == link-&gt;out_ ## field) {          \

                count_already_merged++;                                      \

            } else if (!convert_needed) {                                    \

                count_merged++;                                              \

                statement                                                    \

            }</cpp:value></cpp:define>



            <if_stmt pos:start="117:13" pos:end="139:13"><if pos:start="117:13" pos:end="139:13">if <condition pos:start="117:16" pos:end="117:49">(<expr pos:start="117:17" pos:end="117:48"><name pos:start="117:17" pos:end="117:26"><name pos:start="117:17" pos:end="117:20">link</name><operator pos:start="117:21" pos:end="117:22">-&gt;</operator><name pos:start="117:23" pos:end="117:26">type</name></name> <operator pos:start="117:28" pos:end="117:29">==</operator> <name pos:start="117:31" pos:end="117:48">AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block pos:start="117:51" pos:end="139:13">{<block_content pos:start="119:17" pos:end="137:17">

                <macro pos:start="119:17" pos:end="127:17"><name pos:start="119:17" pos:end="119:30">MERGE_DISPATCH</name><argument_list pos:start="119:31" pos:end="127:17">(<argument pos:start="119:32" pos:end="119:46">channel_layouts</argument>,

                    <argument pos:start="121:21" pos:end="125:43">if (!ff_merge_channel_layouts(link-&gt;in_channel_layouts,

                                                  link-&gt;out_channel_layouts))

                        convert_needed = <literal type="number" pos:start="125:42" pos:end="125:42">1</literal>;</argument>

                )</argument_list></macro>

                <macro pos:start="129:17" pos:end="137:17"><name pos:start="129:17" pos:end="129:30">MERGE_DISPATCH</name><argument_list pos:start="129:31" pos:end="137:17">(<argument pos:start="129:32" pos:end="129:42">samplerates</argument>,

                    <argument pos:start="131:21" pos:end="135:43">if (!ff_merge_samplerates(link-&gt;in_samplerates,

                                              link-&gt;out_samplerates))

                        convert_needed = <literal type="number" pos:start="135:42" pos:end="135:42">1</literal>;</argument>

                )</argument_list></macro>

            </block_content>}</block></if></if_stmt>

            <macro pos:start="141:13" pos:end="152:0"><name pos:start="141:13" pos:end="141:26">MERGE_DISPATCH</name><argument_list pos:start="141:27" pos:end="152:0">(<argument pos:start="141:28" pos:end="141:34">formats</argument>,

                <argument pos:start="143:17" pos:end="147:39">if (!ff_merge_formats(link-&gt;in_formats, link-&gt;out_formats,

                                      link-&gt;type))

                    convert_needed = <literal type="number" pos:start="147:38" pos:end="147:38">1</literal>;</argument>

            )</argument_list></macro>

<cpp:undef pos:start="151:1" pos:end="151:21">#<cpp:directive pos:start="151:2" pos:end="151:6">undef</cpp:directive> <name pos:start="151:8" pos:end="151:21">MERGE_DISPATCH</name></cpp:undef>



            <if_stmt pos:start="155:13" pos:end="331:13"><if pos:start="155:13" pos:end="331:13">if <condition pos:start="155:16" pos:end="155:31">(<expr pos:start="155:17" pos:end="155:30"><name pos:start="155:17" pos:end="155:30">convert_needed</name></expr>)</condition> <block pos:start="155:33" pos:end="331:13">{<block_content pos:start="157:17" pos:end="329:17">

                <decl_stmt pos:start="157:17" pos:end="157:41"><decl pos:start="157:17" pos:end="157:40"><type pos:start="157:17" pos:end="157:33"><name pos:start="157:17" pos:end="157:31">AVFilterContext</name> <modifier pos:start="157:33" pos:end="157:33">*</modifier></type><name pos:start="157:34" pos:end="157:40">convert</name></decl>;</decl_stmt>

                <decl_stmt pos:start="159:17" pos:end="159:33"><decl pos:start="159:17" pos:end="159:32"><type pos:start="159:17" pos:end="159:26"><name pos:start="159:17" pos:end="159:24">AVFilter</name> <modifier pos:start="159:26" pos:end="159:26">*</modifier></type><name pos:start="159:27" pos:end="159:32">filter</name></decl>;</decl_stmt>

                <decl_stmt pos:start="161:17" pos:end="161:47"><decl pos:start="161:17" pos:end="161:36"><type pos:start="161:17" pos:end="161:30"><name pos:start="161:17" pos:end="161:28">AVFilterLink</name> <modifier pos:start="161:30" pos:end="161:30">*</modifier></type><name pos:start="161:31" pos:end="161:36">inlink</name></decl>, <decl pos:start="161:39" pos:end="161:46"><type ref="prev" pos:start="161:17" pos:end="161:30"><modifier pos:start="161:39" pos:end="161:39">*</modifier></type><name pos:start="161:40" pos:end="161:46">outlink</name></decl>;</decl_stmt>

                <decl_stmt pos:start="163:17" pos:end="163:37"><decl pos:start="163:17" pos:end="163:36"><type pos:start="163:17" pos:end="163:20"><name pos:start="163:17" pos:end="163:20">char</name></type> <name pos:start="163:22" pos:end="163:36"><name pos:start="163:22" pos:end="163:31">scale_args</name><index pos:start="163:32" pos:end="163:36">[<expr pos:start="163:33" pos:end="163:35"><literal type="number" pos:start="163:33" pos:end="163:35">256</literal></expr>]</index></name></decl>;</decl_stmt>

                <decl_stmt pos:start="165:17" pos:end="165:35"><decl pos:start="165:17" pos:end="165:34"><type pos:start="165:17" pos:end="165:20"><name pos:start="165:17" pos:end="165:20">char</name></type> <name pos:start="165:22" pos:end="165:34"><name pos:start="165:22" pos:end="165:30">inst_name</name><index pos:start="165:31" pos:end="165:34">[<expr pos:start="165:32" pos:end="165:33"><literal type="number" pos:start="165:32" pos:end="165:33">30</literal></expr>]</index></name></decl>;</decl_stmt>



                <comment type="block" pos:start="169:17" pos:end="169:80">/* couldn't merge format lists. auto-insert conversion filter */</comment>

                <switch pos:start="171:17" pos:end="243:17">switch <condition pos:start="171:24" pos:end="171:35">(<expr pos:start="171:25" pos:end="171:34"><name pos:start="171:25" pos:end="171:34"><name pos:start="171:25" pos:end="171:28">link</name><operator pos:start="171:29" pos:end="171:30">-&gt;</operator><name pos:start="171:31" pos:end="171:34">type</name></name></expr>)</condition> <block pos:start="171:37" pos:end="243:17">{<block_content pos:start="173:17" pos:end="241:43">

                <case pos:start="173:17" pos:end="173:40">case <expr pos:start="173:22" pos:end="173:39"><name pos:start="173:22" pos:end="173:39">AVMEDIA_TYPE_VIDEO</name></expr>:</case>

                    <if_stmt pos:start="175:21" pos:end="183:21"><if pos:start="175:21" pos:end="183:21">if <condition pos:start="175:24" pos:end="175:66">(<expr pos:start="175:25" pos:end="175:65"><operator pos:start="175:25" pos:end="175:25">!</operator><operator pos:start="175:26" pos:end="175:26">(</operator><name pos:start="175:27" pos:end="175:32">filter</name> <operator pos:start="175:34" pos:end="175:34">=</operator> <call pos:start="175:36" pos:end="175:64"><name pos:start="175:36" pos:end="175:55">avfilter_get_by_name</name><argument_list pos:start="175:56" pos:end="175:64">(<argument pos:start="175:57" pos:end="175:63"><expr pos:start="175:57" pos:end="175:63"><literal type="string" pos:start="175:57" pos:end="175:63">"scale"</literal></expr></argument>)</argument_list></call><operator pos:start="175:65" pos:end="175:65">)</operator></expr>)</condition> <block pos:start="175:68" pos:end="183:21">{<block_content pos:start="177:25" pos:end="181:47">

                        <expr_stmt pos:start="177:25" pos:end="179:79"><expr pos:start="177:25" pos:end="179:78"><call pos:start="177:25" pos:end="179:78"><name pos:start="177:25" pos:end="177:30">av_log</name><argument_list pos:start="177:31" pos:end="179:78">(<argument pos:start="177:32" pos:end="177:38"><expr pos:start="177:32" pos:end="177:38"><name pos:start="177:32" pos:end="177:38">log_ctx</name></expr></argument>, <argument pos:start="177:41" pos:end="177:52"><expr pos:start="177:41" pos:end="177:52"><name pos:start="177:41" pos:end="177:52">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="177:55" pos:end="179:77"><expr pos:start="177:55" pos:end="179:77"><literal type="string" pos:start="177:55" pos:end="177:71">"'scale' filter "</literal>

                               <literal type="string" pos:start="179:32" pos:end="179:77">"not present, cannot convert pixel formats.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="181:25" pos:end="181:47">return <expr pos:start="181:32" pos:end="181:46"><call pos:start="181:32" pos:end="181:46"><name pos:start="181:32" pos:end="181:38">AVERROR</name><argument_list pos:start="181:39" pos:end="181:46">(<argument pos:start="181:40" pos:end="181:45"><expr pos:start="181:40" pos:end="181:45"><name pos:start="181:40" pos:end="181:45">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

                    </block_content>}</block></if></if_stmt>



                    <expr_stmt pos:start="187:21" pos:end="189:45"><expr pos:start="187:21" pos:end="189:44"><call pos:start="187:21" pos:end="189:44"><name pos:start="187:21" pos:end="187:28">snprintf</name><argument_list pos:start="187:29" pos:end="189:44">(<argument pos:start="187:30" pos:end="187:38"><expr pos:start="187:30" pos:end="187:38"><name pos:start="187:30" pos:end="187:38">inst_name</name></expr></argument>, <argument pos:start="187:41" pos:end="187:57"><expr pos:start="187:41" pos:end="187:57"><sizeof pos:start="187:41" pos:end="187:57">sizeof<argument_list pos:start="187:47" pos:end="187:57">(<argument pos:start="187:48" pos:end="187:56"><expr pos:start="187:48" pos:end="187:56"><name pos:start="187:48" pos:end="187:56">inst_name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="187:60" pos:end="187:84"><expr pos:start="187:60" pos:end="187:84"><literal type="string" pos:start="187:60" pos:end="187:84">"auto-inserted scaler %d"</literal></expr></argument>,

                             <argument pos:start="189:30" pos:end="189:43"><expr pos:start="189:30" pos:end="189:43"><name pos:start="189:30" pos:end="189:41">scaler_count</name><operator pos:start="189:42" pos:end="189:43">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <if_stmt pos:start="193:21" pos:end="199:35"><if pos:start="193:21" pos:end="199:35">if <condition pos:start="193:24" pos:end="197:72">(<expr pos:start="193:25" pos:end="197:71"><operator pos:start="193:25" pos:end="193:25">(</operator><name pos:start="193:26" pos:end="193:28">ret</name> <operator pos:start="193:30" pos:end="193:30">=</operator> <call pos:start="193:32" pos:end="197:66"><name pos:start="193:32" pos:end="193:59">avfilter_graph_create_filter</name><argument_list pos:start="193:60" pos:end="197:66">(<argument pos:start="193:61" pos:end="193:68"><expr pos:start="193:61" pos:end="193:68"><operator pos:start="193:61" pos:end="193:61">&amp;</operator><name pos:start="193:62" pos:end="193:68">convert</name></expr></argument>, <argument pos:start="193:71" pos:end="193:76"><expr pos:start="193:71" pos:end="193:76"><name pos:start="193:71" pos:end="193:76">filter</name></expr></argument>,

                                                            <argument pos:start="195:61" pos:end="195:69"><expr pos:start="195:61" pos:end="195:69"><name pos:start="195:61" pos:end="195:69">inst_name</name></expr></argument>, <argument pos:start="195:72" pos:end="195:92"><expr pos:start="195:72" pos:end="195:92"><name pos:start="195:72" pos:end="195:92"><name pos:start="195:72" pos:end="195:76">graph</name><operator pos:start="195:77" pos:end="195:78">-&gt;</operator><name pos:start="195:79" pos:end="195:92">scale_sws_opts</name></name></expr></argument>, <argument pos:start="195:95" pos:end="195:98"><expr pos:start="195:95" pos:end="195:98"><name pos:start="195:95" pos:end="195:98">NULL</name></expr></argument>,

                                                            <argument pos:start="197:61" pos:end="197:65"><expr pos:start="197:61" pos:end="197:65"><name pos:start="197:61" pos:end="197:65">graph</name></expr></argument>)</argument_list></call><operator pos:start="197:67" pos:end="197:67">)</operator> <operator pos:start="197:69" pos:end="197:69">&lt;</operator> <literal type="number" pos:start="197:71" pos:end="197:71">0</literal></expr>)</condition><block type="pseudo" pos:start="199:25" pos:end="199:35"><block_content pos:start="199:25" pos:end="199:35">

                        <return pos:start="199:25" pos:end="199:35">return <expr pos:start="199:32" pos:end="199:34"><name pos:start="199:32" pos:end="199:34">ret</name></expr>;</return></block_content></block></if></if_stmt>

                    <break pos:start="201:21" pos:end="201:26">break;</break>

                <case pos:start="203:17" pos:end="203:40">case <expr pos:start="203:22" pos:end="203:39"><name pos:start="203:22" pos:end="203:39">AVMEDIA_TYPE_AUDIO</name></expr>:</case>

                    <if_stmt pos:start="205:21" pos:end="213:21"><if pos:start="205:21" pos:end="213:21">if <condition pos:start="205:24" pos:end="205:70">(<expr pos:start="205:25" pos:end="205:69"><operator pos:start="205:25" pos:end="205:25">!</operator><operator pos:start="205:26" pos:end="205:26">(</operator><name pos:start="205:27" pos:end="205:32">filter</name> <operator pos:start="205:34" pos:end="205:34">=</operator> <call pos:start="205:36" pos:end="205:68"><name pos:start="205:36" pos:end="205:55">avfilter_get_by_name</name><argument_list pos:start="205:56" pos:end="205:68">(<argument pos:start="205:57" pos:end="205:67"><expr pos:start="205:57" pos:end="205:67"><literal type="string" pos:start="205:57" pos:end="205:67">"aresample"</literal></expr></argument>)</argument_list></call><operator pos:start="205:69" pos:end="205:69">)</operator></expr>)</condition> <block pos:start="205:72" pos:end="213:21">{<block_content pos:start="207:25" pos:end="211:47">

                        <expr_stmt pos:start="207:25" pos:end="209:79"><expr pos:start="207:25" pos:end="209:78"><call pos:start="207:25" pos:end="209:78"><name pos:start="207:25" pos:end="207:30">av_log</name><argument_list pos:start="207:31" pos:end="209:78">(<argument pos:start="207:32" pos:end="207:38"><expr pos:start="207:32" pos:end="207:38"><name pos:start="207:32" pos:end="207:38">log_ctx</name></expr></argument>, <argument pos:start="207:41" pos:end="207:52"><expr pos:start="207:41" pos:end="207:52"><name pos:start="207:41" pos:end="207:52">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="207:55" pos:end="209:77"><expr pos:start="207:55" pos:end="209:77"><literal type="string" pos:start="207:55" pos:end="207:75">"'aresample' filter "</literal>

                               <literal type="string" pos:start="209:32" pos:end="209:77">"not present, cannot convert audio formats.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="211:25" pos:end="211:47">return <expr pos:start="211:32" pos:end="211:46"><call pos:start="211:32" pos:end="211:46"><name pos:start="211:32" pos:end="211:38">AVERROR</name><argument_list pos:start="211:39" pos:end="211:46">(<argument pos:start="211:40" pos:end="211:45"><expr pos:start="211:40" pos:end="211:45"><name pos:start="211:40" pos:end="211:45">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

                    </block_content>}</block></if></if_stmt>



                    <expr_stmt pos:start="217:21" pos:end="219:48"><expr pos:start="217:21" pos:end="219:47"><call pos:start="217:21" pos:end="219:47"><name pos:start="217:21" pos:end="217:28">snprintf</name><argument_list pos:start="217:29" pos:end="219:47">(<argument pos:start="217:30" pos:end="217:38"><expr pos:start="217:30" pos:end="217:38"><name pos:start="217:30" pos:end="217:38">inst_name</name></expr></argument>, <argument pos:start="217:41" pos:end="217:57"><expr pos:start="217:41" pos:end="217:57"><sizeof pos:start="217:41" pos:end="217:57">sizeof<argument_list pos:start="217:47" pos:end="217:57">(<argument pos:start="217:48" pos:end="217:56"><expr pos:start="217:48" pos:end="217:56"><name pos:start="217:48" pos:end="217:56">inst_name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="217:60" pos:end="217:87"><expr pos:start="217:60" pos:end="217:87"><literal type="string" pos:start="217:60" pos:end="217:87">"auto-inserted resampler %d"</literal></expr></argument>,

                             <argument pos:start="219:30" pos:end="219:46"><expr pos:start="219:30" pos:end="219:46"><name pos:start="219:30" pos:end="219:44">resampler_count</name><operator pos:start="219:45" pos:end="219:46">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="221:21" pos:end="221:41"><expr pos:start="221:21" pos:end="221:40"><name pos:start="221:21" pos:end="221:33"><name pos:start="221:21" pos:end="221:30">scale_args</name><index pos:start="221:31" pos:end="221:33">[<expr pos:start="221:32" pos:end="221:32"><literal type="number" pos:start="221:32" pos:end="221:32">0</literal></expr>]</index></name> <operator pos:start="221:35" pos:end="221:35">=</operator> <literal type="char" pos:start="221:37" pos:end="221:40">'\0'</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="223:21" pos:end="227:60"><if pos:start="223:21" pos:end="227:60">if <condition pos:start="223:24" pos:end="223:50">(<expr pos:start="223:25" pos:end="223:49"><name pos:start="223:25" pos:end="223:49"><name pos:start="223:25" pos:end="223:29">graph</name><operator pos:start="223:30" pos:end="223:31">-&gt;</operator><name pos:start="223:32" pos:end="223:49">aresample_swr_opts</name></name></expr>)</condition><block type="pseudo" pos:start="225:25" pos:end="227:60"><block_content pos:start="225:25" pos:end="227:60">

                        <expr_stmt pos:start="225:25" pos:end="227:60"><expr pos:start="225:25" pos:end="227:59"><call pos:start="225:25" pos:end="227:59"><name pos:start="225:25" pos:end="225:32">snprintf</name><argument_list pos:start="225:33" pos:end="227:59">(<argument pos:start="225:34" pos:end="225:43"><expr pos:start="225:34" pos:end="225:43"><name pos:start="225:34" pos:end="225:43">scale_args</name></expr></argument>, <argument pos:start="225:46" pos:end="225:63"><expr pos:start="225:46" pos:end="225:63"><sizeof pos:start="225:46" pos:end="225:63">sizeof<argument_list pos:start="225:52" pos:end="225:63">(<argument pos:start="225:53" pos:end="225:62"><expr pos:start="225:53" pos:end="225:62"><name pos:start="225:53" pos:end="225:62">scale_args</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="225:66" pos:end="225:69"><expr pos:start="225:66" pos:end="225:69"><literal type="string" pos:start="225:66" pos:end="225:69">"%s"</literal></expr></argument>,

                                 <argument pos:start="227:34" pos:end="227:58"><expr pos:start="227:34" pos:end="227:58"><name pos:start="227:34" pos:end="227:58"><name pos:start="227:34" pos:end="227:38">graph</name><operator pos:start="227:39" pos:end="227:40">-&gt;</operator><name pos:start="227:41" pos:end="227:58">aresample_swr_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt pos:start="229:21" pos:end="235:35"><if pos:start="229:21" pos:end="235:35">if <condition pos:start="229:24" pos:end="233:78">(<expr pos:start="229:25" pos:end="233:77"><operator pos:start="229:25" pos:end="229:25">(</operator><name pos:start="229:26" pos:end="229:28">ret</name> <operator pos:start="229:30" pos:end="229:30">=</operator> <call pos:start="229:32" pos:end="233:72"><name pos:start="229:32" pos:end="229:59">avfilter_graph_create_filter</name><argument_list pos:start="229:60" pos:end="233:72">(<argument pos:start="229:61" pos:end="229:68"><expr pos:start="229:61" pos:end="229:68"><operator pos:start="229:61" pos:end="229:61">&amp;</operator><name pos:start="229:62" pos:end="229:68">convert</name></expr></argument>, <argument pos:start="229:71" pos:end="229:76"><expr pos:start="229:71" pos:end="229:76"><name pos:start="229:71" pos:end="229:76">filter</name></expr></argument>,

                                                            <argument pos:start="231:61" pos:end="231:69"><expr pos:start="231:61" pos:end="231:69"><name pos:start="231:61" pos:end="231:69">inst_name</name></expr></argument>, <argument pos:start="231:72" pos:end="231:96"><expr pos:start="231:72" pos:end="231:96"><name pos:start="231:72" pos:end="231:96"><name pos:start="231:72" pos:end="231:76">graph</name><operator pos:start="231:77" pos:end="231:78">-&gt;</operator><name pos:start="231:79" pos:end="231:96">aresample_swr_opts</name></name></expr></argument>,

                                                            <argument pos:start="233:61" pos:end="233:64"><expr pos:start="233:61" pos:end="233:64"><name pos:start="233:61" pos:end="233:64">NULL</name></expr></argument>, <argument pos:start="233:67" pos:end="233:71"><expr pos:start="233:67" pos:end="233:71"><name pos:start="233:67" pos:end="233:71">graph</name></expr></argument>)</argument_list></call><operator pos:start="233:73" pos:end="233:73">)</operator> <operator pos:start="233:75" pos:end="233:75">&lt;</operator> <literal type="number" pos:start="233:77" pos:end="233:77">0</literal></expr>)</condition><block type="pseudo" pos:start="235:25" pos:end="235:35"><block_content pos:start="235:25" pos:end="235:35">

                        <return pos:start="235:25" pos:end="235:35">return <expr pos:start="235:32" pos:end="235:34"><name pos:start="235:32" pos:end="235:34">ret</name></expr>;</return></block_content></block></if></if_stmt>

                    <break pos:start="237:21" pos:end="237:26">break;</break>

                <default pos:start="239:17" pos:end="239:24">default:</default>

                    <return pos:start="241:21" pos:end="241:43">return <expr pos:start="241:28" pos:end="241:42"><call pos:start="241:28" pos:end="241:42"><name pos:start="241:28" pos:end="241:34">AVERROR</name><argument_list pos:start="241:35" pos:end="241:42">(<argument pos:start="241:36" pos:end="241:41"><expr pos:start="241:36" pos:end="241:41"><name pos:start="241:36" pos:end="241:41">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

                </block_content>}</block></switch>



                <if_stmt pos:start="247:17" pos:end="249:31"><if pos:start="247:17" pos:end="249:31">if <condition pos:start="247:20" pos:end="247:76">(<expr pos:start="247:21" pos:end="247:75"><operator pos:start="247:21" pos:end="247:21">(</operator><name pos:start="247:22" pos:end="247:24">ret</name> <operator pos:start="247:26" pos:end="247:26">=</operator> <call pos:start="247:28" pos:end="247:70"><name pos:start="247:28" pos:end="247:49">avfilter_insert_filter</name><argument_list pos:start="247:50" pos:end="247:70">(<argument pos:start="247:51" pos:end="247:54"><expr pos:start="247:51" pos:end="247:54"><name pos:start="247:51" pos:end="247:54">link</name></expr></argument>, <argument pos:start="247:57" pos:end="247:63"><expr pos:start="247:57" pos:end="247:63"><name pos:start="247:57" pos:end="247:63">convert</name></expr></argument>, <argument pos:start="247:66" pos:end="247:66"><expr pos:start="247:66" pos:end="247:66"><literal type="number" pos:start="247:66" pos:end="247:66">0</literal></expr></argument>, <argument pos:start="247:69" pos:end="247:69"><expr pos:start="247:69" pos:end="247:69"><literal type="number" pos:start="247:69" pos:end="247:69">0</literal></expr></argument>)</argument_list></call><operator pos:start="247:71" pos:end="247:71">)</operator> <operator pos:start="247:73" pos:end="247:73">&lt;</operator> <literal type="number" pos:start="247:75" pos:end="247:75">0</literal></expr>)</condition><block type="pseudo" pos:start="249:21" pos:end="249:31"><block_content pos:start="249:21" pos:end="249:31">

                    <return pos:start="249:21" pos:end="249:31">return <expr pos:start="249:28" pos:end="249:30"><name pos:start="249:28" pos:end="249:30">ret</name></expr>;</return></block_content></block></if></if_stmt>



                <expr_stmt pos:start="253:17" pos:end="253:46"><expr pos:start="253:17" pos:end="253:45"><call pos:start="253:17" pos:end="253:45"><name pos:start="253:17" pos:end="253:36">filter_query_formats</name><argument_list pos:start="253:37" pos:end="253:45">(<argument pos:start="253:38" pos:end="253:44"><expr pos:start="253:38" pos:end="253:44"><name pos:start="253:38" pos:end="253:44">convert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="255:17" pos:end="255:45"><expr pos:start="255:17" pos:end="255:44"><name pos:start="255:17" pos:end="255:22">inlink</name>  <operator pos:start="255:25" pos:end="255:25">=</operator> <name pos:start="255:27" pos:end="255:44"><name pos:start="255:27" pos:end="255:33">convert</name><operator pos:start="255:34" pos:end="255:35">-&gt;</operator><name pos:start="255:36" pos:end="255:41">inputs</name><index pos:start="255:42" pos:end="255:44">[<expr pos:start="255:43" pos:end="255:43"><literal type="number" pos:start="255:43" pos:end="255:43">0</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="257:17" pos:end="257:46"><expr pos:start="257:17" pos:end="257:45"><name pos:start="257:17" pos:end="257:23">outlink</name> <operator pos:start="257:25" pos:end="257:25">=</operator> <name pos:start="257:27" pos:end="257:45"><name pos:start="257:27" pos:end="257:33">convert</name><operator pos:start="257:34" pos:end="257:35">-&gt;</operator><name pos:start="257:36" pos:end="257:42">outputs</name><index pos:start="257:43" pos:end="257:45">[<expr pos:start="257:44" pos:end="257:44"><literal type="number" pos:start="257:44" pos:end="257:44">0</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="259:17" pos:end="259:63"><expr pos:start="259:17" pos:end="259:62"><call pos:start="259:17" pos:end="259:62"><name pos:start="259:17" pos:end="259:26">av_assert0</name><argument_list pos:start="259:27" pos:end="259:62">( <argument pos:start="259:29" pos:end="259:61"><expr pos:start="259:29" pos:end="259:61"><name pos:start="259:29" pos:end="259:57"><name pos:start="259:29" pos:end="259:34">inlink</name><operator pos:start="259:35" pos:end="259:36">-&gt;</operator> <name pos:start="259:38" pos:end="259:47">in_formats</name><operator pos:start="259:48" pos:end="259:49">-&gt;</operator><name pos:start="259:50" pos:end="259:57">refcount</name></name> <operator pos:start="259:59" pos:end="259:59">&gt;</operator> <literal type="number" pos:start="259:61" pos:end="259:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="261:17" pos:end="261:63"><expr pos:start="261:17" pos:end="261:62"><call pos:start="261:17" pos:end="261:62"><name pos:start="261:17" pos:end="261:26">av_assert0</name><argument_list pos:start="261:27" pos:end="261:62">( <argument pos:start="261:29" pos:end="261:61"><expr pos:start="261:29" pos:end="261:61"><name pos:start="261:29" pos:end="261:57"><name pos:start="261:29" pos:end="261:34">inlink</name><operator pos:start="261:35" pos:end="261:36">-&gt;</operator><name pos:start="261:37" pos:end="261:47">out_formats</name><operator pos:start="261:48" pos:end="261:49">-&gt;</operator><name pos:start="261:50" pos:end="261:57">refcount</name></name> <operator pos:start="261:59" pos:end="261:59">&gt;</operator> <literal type="number" pos:start="261:61" pos:end="261:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="263:17" pos:end="263:63"><expr pos:start="263:17" pos:end="263:62"><call pos:start="263:17" pos:end="263:62"><name pos:start="263:17" pos:end="263:26">av_assert0</name><argument_list pos:start="263:27" pos:end="263:62">(<argument pos:start="263:28" pos:end="263:61"><expr pos:start="263:28" pos:end="263:61"><name pos:start="263:28" pos:end="263:57"><name pos:start="263:28" pos:end="263:34">outlink</name><operator pos:start="263:35" pos:end="263:36">-&gt;</operator> <name pos:start="263:38" pos:end="263:47">in_formats</name><operator pos:start="263:48" pos:end="263:49">-&gt;</operator><name pos:start="263:50" pos:end="263:57">refcount</name></name> <operator pos:start="263:59" pos:end="263:59">&gt;</operator> <literal type="number" pos:start="263:61" pos:end="263:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="265:17" pos:end="265:63"><expr pos:start="265:17" pos:end="265:62"><call pos:start="265:17" pos:end="265:62"><name pos:start="265:17" pos:end="265:26">av_assert0</name><argument_list pos:start="265:27" pos:end="265:62">(<argument pos:start="265:28" pos:end="265:61"><expr pos:start="265:28" pos:end="265:61"><name pos:start="265:28" pos:end="265:57"><name pos:start="265:28" pos:end="265:34">outlink</name><operator pos:start="265:35" pos:end="265:36">-&gt;</operator><name pos:start="265:37" pos:end="265:47">out_formats</name><operator pos:start="265:48" pos:end="265:49">-&gt;</operator><name pos:start="265:50" pos:end="265:57">refcount</name></name> <operator pos:start="265:59" pos:end="265:59">&gt;</operator> <literal type="number" pos:start="265:61" pos:end="265:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="267:17" pos:end="285:17"><if pos:start="267:17" pos:end="285:17">if <condition pos:start="267:20" pos:end="267:56">(<expr pos:start="267:21" pos:end="267:55"><name pos:start="267:21" pos:end="267:33"><name pos:start="267:21" pos:end="267:27">outlink</name><operator pos:start="267:28" pos:end="267:29">-&gt;</operator><name pos:start="267:30" pos:end="267:33">type</name></name> <operator pos:start="267:35" pos:end="267:36">==</operator> <name pos:start="267:38" pos:end="267:55">AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block pos:start="267:58" pos:end="285:17">{<block_content pos:start="269:21" pos:end="283:75">

                    <expr_stmt pos:start="269:21" pos:end="269:71"><expr pos:start="269:21" pos:end="269:70"><call pos:start="269:21" pos:end="269:70"><name pos:start="269:21" pos:end="269:30">av_assert0</name><argument_list pos:start="269:31" pos:end="269:70">( <argument pos:start="269:33" pos:end="269:69"><expr pos:start="269:33" pos:end="269:69"><name pos:start="269:33" pos:end="269:65"><name pos:start="269:33" pos:end="269:38">inlink</name><operator pos:start="269:39" pos:end="269:40">-&gt;</operator> <name pos:start="269:42" pos:end="269:55">in_samplerates</name><operator pos:start="269:56" pos:end="269:57">-&gt;</operator><name pos:start="269:58" pos:end="269:65">refcount</name></name> <operator pos:start="269:67" pos:end="269:67">&gt;</operator> <literal type="number" pos:start="269:69" pos:end="269:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="271:21" pos:end="271:71"><expr pos:start="271:21" pos:end="271:70"><call pos:start="271:21" pos:end="271:70"><name pos:start="271:21" pos:end="271:30">av_assert0</name><argument_list pos:start="271:31" pos:end="271:70">( <argument pos:start="271:33" pos:end="271:69"><expr pos:start="271:33" pos:end="271:69"><name pos:start="271:33" pos:end="271:65"><name pos:start="271:33" pos:end="271:38">inlink</name><operator pos:start="271:39" pos:end="271:40">-&gt;</operator><name pos:start="271:41" pos:end="271:55">out_samplerates</name><operator pos:start="271:56" pos:end="271:57">-&gt;</operator><name pos:start="271:58" pos:end="271:65">refcount</name></name> <operator pos:start="271:67" pos:end="271:67">&gt;</operator> <literal type="number" pos:start="271:69" pos:end="271:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="273:21" pos:end="273:71"><expr pos:start="273:21" pos:end="273:70"><call pos:start="273:21" pos:end="273:70"><name pos:start="273:21" pos:end="273:30">av_assert0</name><argument_list pos:start="273:31" pos:end="273:70">(<argument pos:start="273:32" pos:end="273:69"><expr pos:start="273:32" pos:end="273:69"><name pos:start="273:32" pos:end="273:65"><name pos:start="273:32" pos:end="273:38">outlink</name><operator pos:start="273:39" pos:end="273:40">-&gt;</operator> <name pos:start="273:42" pos:end="273:55">in_samplerates</name><operator pos:start="273:56" pos:end="273:57">-&gt;</operator><name pos:start="273:58" pos:end="273:65">refcount</name></name> <operator pos:start="273:67" pos:end="273:67">&gt;</operator> <literal type="number" pos:start="273:69" pos:end="273:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="275:21" pos:end="275:71"><expr pos:start="275:21" pos:end="275:70"><call pos:start="275:21" pos:end="275:70"><name pos:start="275:21" pos:end="275:30">av_assert0</name><argument_list pos:start="275:31" pos:end="275:70">(<argument pos:start="275:32" pos:end="275:69"><expr pos:start="275:32" pos:end="275:69"><name pos:start="275:32" pos:end="275:65"><name pos:start="275:32" pos:end="275:38">outlink</name><operator pos:start="275:39" pos:end="275:40">-&gt;</operator><name pos:start="275:41" pos:end="275:55">out_samplerates</name><operator pos:start="275:56" pos:end="275:57">-&gt;</operator><name pos:start="275:58" pos:end="275:65">refcount</name></name> <operator pos:start="275:67" pos:end="275:67">&gt;</operator> <literal type="number" pos:start="275:69" pos:end="275:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="277:21" pos:end="277:75"><expr pos:start="277:21" pos:end="277:74"><call pos:start="277:21" pos:end="277:74"><name pos:start="277:21" pos:end="277:30">av_assert0</name><argument_list pos:start="277:31" pos:end="277:74">( <argument pos:start="277:33" pos:end="277:73"><expr pos:start="277:33" pos:end="277:73"><name pos:start="277:33" pos:end="277:69"><name pos:start="277:33" pos:end="277:38">inlink</name><operator pos:start="277:39" pos:end="277:40">-&gt;</operator> <name pos:start="277:42" pos:end="277:59">in_channel_layouts</name><operator pos:start="277:60" pos:end="277:61">-&gt;</operator><name pos:start="277:62" pos:end="277:69">refcount</name></name> <operator pos:start="277:71" pos:end="277:71">&gt;</operator> <literal type="number" pos:start="277:73" pos:end="277:73">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="279:21" pos:end="279:75"><expr pos:start="279:21" pos:end="279:74"><call pos:start="279:21" pos:end="279:74"><name pos:start="279:21" pos:end="279:30">av_assert0</name><argument_list pos:start="279:31" pos:end="279:74">( <argument pos:start="279:33" pos:end="279:73"><expr pos:start="279:33" pos:end="279:73"><name pos:start="279:33" pos:end="279:69"><name pos:start="279:33" pos:end="279:38">inlink</name><operator pos:start="279:39" pos:end="279:40">-&gt;</operator><name pos:start="279:41" pos:end="279:59">out_channel_layouts</name><operator pos:start="279:60" pos:end="279:61">-&gt;</operator><name pos:start="279:62" pos:end="279:69">refcount</name></name> <operator pos:start="279:71" pos:end="279:71">&gt;</operator> <literal type="number" pos:start="279:73" pos:end="279:73">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="281:21" pos:end="281:75"><expr pos:start="281:21" pos:end="281:74"><call pos:start="281:21" pos:end="281:74"><name pos:start="281:21" pos:end="281:30">av_assert0</name><argument_list pos:start="281:31" pos:end="281:74">(<argument pos:start="281:32" pos:end="281:73"><expr pos:start="281:32" pos:end="281:73"><name pos:start="281:32" pos:end="281:69"><name pos:start="281:32" pos:end="281:38">outlink</name><operator pos:start="281:39" pos:end="281:40">-&gt;</operator> <name pos:start="281:42" pos:end="281:59">in_channel_layouts</name><operator pos:start="281:60" pos:end="281:61">-&gt;</operator><name pos:start="281:62" pos:end="281:69">refcount</name></name> <operator pos:start="281:71" pos:end="281:71">&gt;</operator> <literal type="number" pos:start="281:73" pos:end="281:73">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="283:21" pos:end="283:75"><expr pos:start="283:21" pos:end="283:74"><call pos:start="283:21" pos:end="283:74"><name pos:start="283:21" pos:end="283:30">av_assert0</name><argument_list pos:start="283:31" pos:end="283:74">(<argument pos:start="283:32" pos:end="283:73"><expr pos:start="283:32" pos:end="283:73"><name pos:start="283:32" pos:end="283:69"><name pos:start="283:32" pos:end="283:38">outlink</name><operator pos:start="283:39" pos:end="283:40">-&gt;</operator><name pos:start="283:41" pos:end="283:59">out_channel_layouts</name><operator pos:start="283:60" pos:end="283:61">-&gt;</operator><name pos:start="283:62" pos:end="283:69">refcount</name></name> <operator pos:start="283:71" pos:end="283:71">&gt;</operator> <literal type="number" pos:start="283:73" pos:end="283:73">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="287:17" pos:end="291:42"><if pos:start="287:17" pos:end="291:42">if <condition pos:start="287:20" pos:end="289:96">(<expr pos:start="287:21" pos:end="289:95"><operator pos:start="287:21" pos:end="287:21">!</operator><call pos:start="287:22" pos:end="287:95"><name pos:start="287:22" pos:end="287:37">ff_merge_formats</name><argument_list pos:start="287:38" pos:end="287:95">( <argument pos:start="287:40" pos:end="287:57"><expr pos:start="287:40" pos:end="287:57"><name pos:start="287:40" pos:end="287:57"><name pos:start="287:40" pos:end="287:45">inlink</name><operator pos:start="287:46" pos:end="287:47">-&gt;</operator><name pos:start="287:48" pos:end="287:57">in_formats</name></name></expr></argument>,  <argument pos:start="287:61" pos:end="287:79"><expr pos:start="287:61" pos:end="287:79"><name pos:start="287:61" pos:end="287:79"><name pos:start="287:61" pos:end="287:66">inlink</name><operator pos:start="287:67" pos:end="287:68">-&gt;</operator><name pos:start="287:69" pos:end="287:79">out_formats</name></name></expr></argument>,  <argument pos:start="287:83" pos:end="287:94"><expr pos:start="287:83" pos:end="287:94"><name pos:start="287:83" pos:end="287:94"><name pos:start="287:83" pos:end="287:88">inlink</name><operator pos:start="287:89" pos:end="287:90">-&gt;</operator><name pos:start="287:91" pos:end="287:94">type</name></name></expr></argument>)</argument_list></call> <operator pos:start="287:97" pos:end="287:98">||</operator>

                    <operator pos:start="289:21" pos:end="289:21">!</operator><call pos:start="289:22" pos:end="289:95"><name pos:start="289:22" pos:end="289:37">ff_merge_formats</name><argument_list pos:start="289:38" pos:end="289:95">(<argument pos:start="289:39" pos:end="289:57"><expr pos:start="289:39" pos:end="289:57"><name pos:start="289:39" pos:end="289:57"><name pos:start="289:39" pos:end="289:45">outlink</name><operator pos:start="289:46" pos:end="289:47">-&gt;</operator><name pos:start="289:48" pos:end="289:57">in_formats</name></name></expr></argument>, <argument pos:start="289:60" pos:end="289:79"><expr pos:start="289:60" pos:end="289:79"><name pos:start="289:60" pos:end="289:79"><name pos:start="289:60" pos:end="289:66">outlink</name><operator pos:start="289:67" pos:end="289:68">-&gt;</operator><name pos:start="289:69" pos:end="289:79">out_formats</name></name></expr></argument>, <argument pos:start="289:82" pos:end="289:94"><expr pos:start="289:82" pos:end="289:94"><name pos:start="289:82" pos:end="289:94"><name pos:start="289:82" pos:end="289:88">outlink</name><operator pos:start="289:89" pos:end="289:90">-&gt;</operator><name pos:start="289:91" pos:end="289:94">type</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="291:21" pos:end="291:42"><block_content pos:start="291:21" pos:end="291:42">

                    <expr_stmt pos:start="291:21" pos:end="291:42"><expr pos:start="291:21" pos:end="291:41"><name pos:start="291:21" pos:end="291:23">ret</name> <operator pos:start="291:25" pos:end="291:25">=</operator> <call pos:start="291:27" pos:end="291:41"><name pos:start="291:27" pos:end="291:33">AVERROR</name><argument_list pos:start="291:34" pos:end="291:41">(<argument pos:start="291:35" pos:end="291:40"><expr pos:start="291:35" pos:end="291:40"><name pos:start="291:35" pos:end="291:40">ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="293:17" pos:end="303:42"><if pos:start="293:17" pos:end="303:42">if <condition pos:start="293:20" pos:end="301:77">(<expr pos:start="293:21" pos:end="301:76"><name pos:start="293:21" pos:end="293:32"><name pos:start="293:21" pos:end="293:26">inlink</name><operator pos:start="293:27" pos:end="293:28">-&gt;</operator><name pos:start="293:29" pos:end="293:32">type</name></name> <operator pos:start="293:34" pos:end="293:35">==</operator> <name pos:start="293:37" pos:end="293:54">AVMEDIA_TYPE_AUDIO</name> <operator pos:start="293:56" pos:end="293:57">&amp;&amp;</operator>

                    <operator pos:start="295:21" pos:end="295:21">(</operator><operator pos:start="295:22" pos:end="295:22">!</operator><call pos:start="295:23" pos:end="297:67"><name pos:start="295:23" pos:end="295:42">ff_merge_samplerates</name><argument_list pos:start="295:43" pos:end="297:67">(<argument pos:start="295:44" pos:end="295:65"><expr pos:start="295:44" pos:end="295:65"><name pos:start="295:44" pos:end="295:65"><name pos:start="295:44" pos:end="295:49">inlink</name><operator pos:start="295:50" pos:end="295:51">-&gt;</operator><name pos:start="295:52" pos:end="295:65">in_samplerates</name></name></expr></argument>,

                                           <argument pos:start="297:44" pos:end="297:66"><expr pos:start="297:44" pos:end="297:66"><name pos:start="297:44" pos:end="297:66"><name pos:start="297:44" pos:end="297:49">inlink</name><operator pos:start="297:50" pos:end="297:51">-&gt;</operator><name pos:start="297:52" pos:end="297:66">out_samplerates</name></name></expr></argument>)</argument_list></call> <operator pos:start="297:69" pos:end="297:70">||</operator>

                     <operator pos:start="299:22" pos:end="299:22">!</operator><call pos:start="299:23" pos:end="301:75"><name pos:start="299:23" pos:end="299:46">ff_merge_channel_layouts</name><argument_list pos:start="299:47" pos:end="301:75">(<argument pos:start="299:48" pos:end="299:73"><expr pos:start="299:48" pos:end="299:73"><name pos:start="299:48" pos:end="299:73"><name pos:start="299:48" pos:end="299:53">inlink</name><operator pos:start="299:54" pos:end="299:55">-&gt;</operator><name pos:start="299:56" pos:end="299:73">in_channel_layouts</name></name></expr></argument>,

                                               <argument pos:start="301:48" pos:end="301:74"><expr pos:start="301:48" pos:end="301:74"><name pos:start="301:48" pos:end="301:74"><name pos:start="301:48" pos:end="301:53">inlink</name><operator pos:start="301:54" pos:end="301:55">-&gt;</operator><name pos:start="301:56" pos:end="301:74">out_channel_layouts</name></name></expr></argument>)</argument_list></call><operator pos:start="301:76" pos:end="301:76">)</operator></expr>)</condition><block type="pseudo" pos:start="303:21" pos:end="303:42"><block_content pos:start="303:21" pos:end="303:42">

                    <expr_stmt pos:start="303:21" pos:end="303:42"><expr pos:start="303:21" pos:end="303:41"><name pos:start="303:21" pos:end="303:23">ret</name> <operator pos:start="303:25" pos:end="303:25">=</operator> <call pos:start="303:27" pos:end="303:41"><name pos:start="303:27" pos:end="303:33">AVERROR</name><argument_list pos:start="303:34" pos:end="303:41">(<argument pos:start="303:35" pos:end="303:40"><expr pos:start="303:35" pos:end="303:40"><name pos:start="303:35" pos:end="303:40">ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="305:17" pos:end="315:42"><if pos:start="305:17" pos:end="315:42">if <condition pos:start="305:20" pos:end="313:78">(<expr pos:start="305:21" pos:end="313:77"><name pos:start="305:21" pos:end="305:33"><name pos:start="305:21" pos:end="305:27">outlink</name><operator pos:start="305:28" pos:end="305:29">-&gt;</operator><name pos:start="305:30" pos:end="305:33">type</name></name> <operator pos:start="305:35" pos:end="305:36">==</operator> <name pos:start="305:38" pos:end="305:55">AVMEDIA_TYPE_AUDIO</name> <operator pos:start="305:57" pos:end="305:58">&amp;&amp;</operator>

                    <operator pos:start="307:21" pos:end="307:21">(</operator><operator pos:start="307:22" pos:end="307:22">!</operator><call pos:start="307:23" pos:end="309:68"><name pos:start="307:23" pos:end="307:42">ff_merge_samplerates</name><argument_list pos:start="307:43" pos:end="309:68">(<argument pos:start="307:44" pos:end="307:66"><expr pos:start="307:44" pos:end="307:66"><name pos:start="307:44" pos:end="307:66"><name pos:start="307:44" pos:end="307:50">outlink</name><operator pos:start="307:51" pos:end="307:52">-&gt;</operator><name pos:start="307:53" pos:end="307:66">in_samplerates</name></name></expr></argument>,

                                           <argument pos:start="309:44" pos:end="309:67"><expr pos:start="309:44" pos:end="309:67"><name pos:start="309:44" pos:end="309:67"><name pos:start="309:44" pos:end="309:50">outlink</name><operator pos:start="309:51" pos:end="309:52">-&gt;</operator><name pos:start="309:53" pos:end="309:67">out_samplerates</name></name></expr></argument>)</argument_list></call> <operator pos:start="309:70" pos:end="309:71">||</operator>

                     <operator pos:start="311:22" pos:end="311:22">!</operator><call pos:start="311:23" pos:end="313:76"><name pos:start="311:23" pos:end="311:46">ff_merge_channel_layouts</name><argument_list pos:start="311:47" pos:end="313:76">(<argument pos:start="311:48" pos:end="311:74"><expr pos:start="311:48" pos:end="311:74"><name pos:start="311:48" pos:end="311:74"><name pos:start="311:48" pos:end="311:54">outlink</name><operator pos:start="311:55" pos:end="311:56">-&gt;</operator><name pos:start="311:57" pos:end="311:74">in_channel_layouts</name></name></expr></argument>,

                                               <argument pos:start="313:48" pos:end="313:75"><expr pos:start="313:48" pos:end="313:75"><name pos:start="313:48" pos:end="313:75"><name pos:start="313:48" pos:end="313:54">outlink</name><operator pos:start="313:55" pos:end="313:56">-&gt;</operator><name pos:start="313:57" pos:end="313:75">out_channel_layouts</name></name></expr></argument>)</argument_list></call><operator pos:start="313:77" pos:end="313:77">)</operator></expr>)</condition><block type="pseudo" pos:start="315:21" pos:end="315:42"><block_content pos:start="315:21" pos:end="315:42">

                    <expr_stmt pos:start="315:21" pos:end="315:42"><expr pos:start="315:21" pos:end="315:41"><name pos:start="315:21" pos:end="315:23">ret</name> <operator pos:start="315:25" pos:end="315:25">=</operator> <call pos:start="315:27" pos:end="315:41"><name pos:start="315:27" pos:end="315:33">AVERROR</name><argument_list pos:start="315:34" pos:end="315:41">(<argument pos:start="315:35" pos:end="315:40"><expr pos:start="315:35" pos:end="315:40"><name pos:start="315:35" pos:end="315:40">ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



                <if_stmt pos:start="319:17" pos:end="329:17"><if pos:start="319:17" pos:end="329:17">if <condition pos:start="319:20" pos:end="319:28">(<expr pos:start="319:21" pos:end="319:27"><name pos:start="319:21" pos:end="319:23">ret</name> <operator pos:start="319:25" pos:end="319:25">&lt;</operator> <literal type="number" pos:start="319:27" pos:end="319:27">0</literal></expr>)</condition> <block pos:start="319:30" pos:end="329:17">{<block_content pos:start="321:21" pos:end="327:31">

                    <expr_stmt pos:start="321:21" pos:end="325:91"><expr pos:start="321:21" pos:end="325:90"><call pos:start="321:21" pos:end="325:90"><name pos:start="321:21" pos:end="321:26">av_log</name><argument_list pos:start="321:27" pos:end="325:90">(<argument pos:start="321:28" pos:end="321:34"><expr pos:start="321:28" pos:end="321:34"><name pos:start="321:28" pos:end="321:34">log_ctx</name></expr></argument>, <argument pos:start="321:37" pos:end="321:48"><expr pos:start="321:37" pos:end="321:48"><name pos:start="321:37" pos:end="321:48">AV_LOG_ERROR</name></expr></argument>,

                           <argument pos:start="323:28" pos:end="325:55"><expr pos:start="323:28" pos:end="325:55"><literal type="string" pos:start="323:28" pos:end="323:95">"Impossible to convert between the formats supported by the filter "</literal>

                           <literal type="string" pos:start="325:28" pos:end="325:55">"'%s' and the filter '%s'\n"</literal></expr></argument>, <argument pos:start="325:58" pos:end="325:72"><expr pos:start="325:58" pos:end="325:72"><name pos:start="325:58" pos:end="325:72"><name pos:start="325:58" pos:end="325:61">link</name><operator pos:start="325:62" pos:end="325:63">-&gt;</operator><name pos:start="325:64" pos:end="325:66">src</name><operator pos:start="325:67" pos:end="325:68">-&gt;</operator><name pos:start="325:69" pos:end="325:72">name</name></name></expr></argument>, <argument pos:start="325:75" pos:end="325:89"><expr pos:start="325:75" pos:end="325:89"><name pos:start="325:75" pos:end="325:89"><name pos:start="325:75" pos:end="325:78">link</name><operator pos:start="325:79" pos:end="325:80">-&gt;</operator><name pos:start="325:81" pos:end="325:83">dst</name><operator pos:start="325:84" pos:end="325:85">-&gt;</operator><name pos:start="325:86" pos:end="325:89">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="327:21" pos:end="327:31">return <expr pos:start="327:28" pos:end="327:30"><name pos:start="327:28" pos:end="327:30">ret</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <expr_stmt pos:start="339:5" pos:end="343:77"><expr pos:start="339:5" pos:end="343:76"><call pos:start="339:5" pos:end="343:76"><name pos:start="339:5" pos:end="339:10">av_log</name><argument_list pos:start="339:11" pos:end="343:76">(<argument pos:start="339:12" pos:end="339:16"><expr pos:start="339:12" pos:end="339:16"><name pos:start="339:12" pos:end="339:16">graph</name></expr></argument>, <argument pos:start="339:19" pos:end="339:30"><expr pos:start="339:19" pos:end="339:30"><name pos:start="339:19" pos:end="339:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="339:33" pos:end="341:65"><expr pos:start="339:33" pos:end="341:65"><literal type="string" pos:start="339:33" pos:end="339:49">"query_formats: "</literal>

           <literal type="string" pos:start="341:12" pos:end="341:65">"%d queried, %d merged, %d already done, %d delayed\n"</literal></expr></argument>,

           <argument pos:start="343:12" pos:end="343:24"><expr pos:start="343:12" pos:end="343:24"><name pos:start="343:12" pos:end="343:24">count_queried</name></expr></argument>, <argument pos:start="343:27" pos:end="343:38"><expr pos:start="343:27" pos:end="343:38"><name pos:start="343:27" pos:end="343:38">count_merged</name></expr></argument>, <argument pos:start="343:41" pos:end="343:60"><expr pos:start="343:41" pos:end="343:60"><name pos:start="343:41" pos:end="343:60">count_already_merged</name></expr></argument>, <argument pos:start="343:63" pos:end="343:75"><expr pos:start="343:63" pos:end="343:75"><name pos:start="343:63" pos:end="343:75">count_delayed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="345:5" pos:end="385:5"><if pos:start="345:5" pos:end="385:5">if <condition pos:start="345:8" pos:end="345:22">(<expr pos:start="345:9" pos:end="345:21"><name pos:start="345:9" pos:end="345:21">count_delayed</name></expr>)</condition> <block pos:start="345:24" pos:end="385:5">{<block_content pos:start="347:9" pos:end="383:28">

        <decl_stmt pos:start="347:9" pos:end="347:20"><decl pos:start="347:9" pos:end="347:19"><type pos:start="347:9" pos:end="347:16"><name pos:start="347:9" pos:end="347:16">AVBPrint</name></type> <name pos:start="347:18" pos:end="347:19">bp</name></decl>;</decl_stmt>



        <comment type="block" pos:start="351:9" pos:end="359:75">/* if count_queried &gt; 0, one filter at least did set its formats,

           that will give additional information to its neighbour;

           if count_merged &gt; 0, one pair of formats lists at least was merged,

           that will give additional information to all connected filters;

           in both cases, progress was made and a new round must be done */</comment>

        <if_stmt pos:start="361:9" pos:end="363:35"><if pos:start="361:9" pos:end="363:35">if <condition pos:start="361:12" pos:end="361:42">(<expr pos:start="361:13" pos:end="361:41"><name pos:start="361:13" pos:end="361:25">count_queried</name> <operator pos:start="361:27" pos:end="361:28">||</operator> <name pos:start="361:30" pos:end="361:41">count_merged</name></expr>)</condition><block type="pseudo" pos:start="363:13" pos:end="363:35"><block_content pos:start="363:13" pos:end="363:35">

            <return pos:start="363:13" pos:end="363:35">return <expr pos:start="363:20" pos:end="363:34"><call pos:start="363:20" pos:end="363:34"><name pos:start="363:20" pos:end="363:26">AVERROR</name><argument_list pos:start="363:27" pos:end="363:34">(<argument pos:start="363:28" pos:end="363:33"><expr pos:start="363:28" pos:end="363:33"><name pos:start="363:28" pos:end="363:33">EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="365:9" pos:end="365:57"><expr pos:start="365:9" pos:end="365:56"><call pos:start="365:9" pos:end="365:56"><name pos:start="365:9" pos:end="365:22">av_bprint_init</name><argument_list pos:start="365:23" pos:end="365:56">(<argument pos:start="365:24" pos:end="365:26"><expr pos:start="365:24" pos:end="365:26"><operator pos:start="365:24" pos:end="365:24">&amp;</operator><name pos:start="365:25" pos:end="365:26">bp</name></expr></argument>, <argument pos:start="365:29" pos:end="365:29"><expr pos:start="365:29" pos:end="365:29"><literal type="number" pos:start="365:29" pos:end="365:29">0</literal></expr></argument>, <argument pos:start="365:32" pos:end="365:55"><expr pos:start="365:32" pos:end="365:55"><name pos:start="365:32" pos:end="365:55">AV_BPRINT_SIZE_AUTOMATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="367:9" pos:end="373:51">for <control pos:start="367:13" pos:end="367:47">(<init pos:start="367:14" pos:end="367:19"><expr pos:start="367:14" pos:end="367:18"><name pos:start="367:14" pos:end="367:14">i</name> <operator pos:start="367:16" pos:end="367:16">=</operator> <literal type="number" pos:start="367:18" pos:end="367:18">0</literal></expr>;</init> <condition pos:start="367:21" pos:end="367:42"><expr pos:start="367:21" pos:end="367:41"><name pos:start="367:21" pos:end="367:21">i</name> <operator pos:start="367:23" pos:end="367:23">&lt;</operator> <name pos:start="367:25" pos:end="367:41"><name pos:start="367:25" pos:end="367:29">graph</name><operator pos:start="367:30" pos:end="367:31">-&gt;</operator><name pos:start="367:32" pos:end="367:41">nb_filters</name></name></expr>;</condition> <incr pos:start="367:44" pos:end="367:46"><expr pos:start="367:44" pos:end="367:46"><name pos:start="367:44" pos:end="367:44">i</name><operator pos:start="367:45" pos:end="367:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="369:13" pos:end="373:51"><block_content pos:start="369:13" pos:end="373:51">

            <if_stmt pos:start="369:13" pos:end="373:51"><if pos:start="369:13" pos:end="373:51">if <condition pos:start="369:16" pos:end="369:53">(<expr pos:start="369:17" pos:end="369:52"><operator pos:start="369:17" pos:end="369:17">!</operator><call pos:start="369:18" pos:end="369:52"><name pos:start="369:18" pos:end="369:33">formats_declared</name><argument_list pos:start="369:34" pos:end="369:52">(<argument pos:start="369:35" pos:end="369:51"><expr pos:start="369:35" pos:end="369:51"><name pos:start="369:35" pos:end="369:51"><name pos:start="369:35" pos:end="369:39">graph</name><operator pos:start="369:40" pos:end="369:41">-&gt;</operator><name pos:start="369:42" pos:end="369:48">filters</name><index pos:start="369:49" pos:end="369:51">[<expr pos:start="369:50" pos:end="369:50"><name pos:start="369:50" pos:end="369:50">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="371:17" pos:end="373:51"><block_content pos:start="371:17" pos:end="373:51">

                <expr_stmt pos:start="371:17" pos:end="373:51"><expr pos:start="371:17" pos:end="373:50"><call pos:start="371:17" pos:end="373:50"><name pos:start="371:17" pos:end="371:26">av_bprintf</name><argument_list pos:start="371:27" pos:end="373:50">(<argument pos:start="371:28" pos:end="371:30"><expr pos:start="371:28" pos:end="371:30"><operator pos:start="371:28" pos:end="371:28">&amp;</operator><name pos:start="371:29" pos:end="371:30">bp</name></expr></argument>, <argument pos:start="371:33" pos:end="371:38"><expr pos:start="371:33" pos:end="371:38"><literal type="string" pos:start="371:33" pos:end="371:38">"%s%s"</literal></expr></argument>, <argument pos:start="371:41" pos:end="371:58"><expr pos:start="371:41" pos:end="371:58"><ternary pos:start="371:41" pos:end="371:58"><condition pos:start="371:41" pos:end="371:48"><expr pos:start="371:41" pos:end="371:46"><name pos:start="371:41" pos:end="371:46"><name pos:start="371:41" pos:end="371:42">bp</name><operator pos:start="371:43" pos:end="371:43">.</operator><name pos:start="371:44" pos:end="371:46">len</name></name></expr> ?</condition><then pos:start="371:50" pos:end="371:53"> <expr pos:start="371:50" pos:end="371:53"><literal type="string" pos:start="371:50" pos:end="371:53">", "</literal></expr> </then><else pos:start="371:55" pos:end="371:58">: <expr pos:start="371:57" pos:end="371:58"><literal type="string" pos:start="371:57" pos:end="371:58">""</literal></expr></else></ternary></expr></argument>,

                          <argument pos:start="373:27" pos:end="373:49"><expr pos:start="373:27" pos:end="373:49"><name pos:start="373:27" pos:end="373:43"><name pos:start="373:27" pos:end="373:31">graph</name><operator pos:start="373:32" pos:end="373:33">-&gt;</operator><name pos:start="373:34" pos:end="373:40">filters</name><index pos:start="373:41" pos:end="373:43">[<expr pos:start="373:42" pos:end="373:42"><name pos:start="373:42" pos:end="373:42">i</name></expr>]</index></name><operator pos:start="373:44" pos:end="373:45">-&gt;</operator><name pos:start="373:46" pos:end="373:49">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

        <expr_stmt pos:start="375:9" pos:end="381:36"><expr pos:start="375:9" pos:end="381:35"><call pos:start="375:9" pos:end="381:35"><name pos:start="375:9" pos:end="375:14">av_log</name><argument_list pos:start="375:15" pos:end="381:35">(<argument pos:start="375:16" pos:end="375:20"><expr pos:start="375:16" pos:end="375:20"><name pos:start="375:16" pos:end="375:20">graph</name></expr></argument>, <argument pos:start="375:23" pos:end="375:34"><expr pos:start="375:23" pos:end="375:34"><name pos:start="375:23" pos:end="375:34">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="377:16" pos:end="381:26"><expr pos:start="377:16" pos:end="381:26"><literal type="string" pos:start="377:16" pos:end="377:75">"The following filters could not choose their formats: %s\n"</literal>

               <literal type="string" pos:start="379:16" pos:end="379:77">"Consider inserting the (a)format filter near their input or "</literal>

               <literal type="string" pos:start="381:16" pos:end="381:26">"output.\n"</literal></expr></argument>, <argument pos:start="381:29" pos:end="381:34"><expr pos:start="381:29" pos:end="381:34"><name pos:start="381:29" pos:end="381:34"><name pos:start="381:29" pos:end="381:30">bp</name><operator pos:start="381:31" pos:end="381:31">.</operator><name pos:start="381:32" pos:end="381:34">str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="383:9" pos:end="383:28">return <expr pos:start="383:16" pos:end="383:27"><call pos:start="383:16" pos:end="383:27"><name pos:start="383:16" pos:end="383:22">AVERROR</name><argument_list pos:start="383:23" pos:end="383:27">(<argument pos:start="383:24" pos:end="383:26"><expr pos:start="383:24" pos:end="383:26"><name pos:start="383:24" pos:end="383:26">EIO</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="387:5" pos:end="387:13">return <expr pos:start="387:12" pos:end="387:12"><literal type="number" pos:start="387:12" pos:end="387:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
