<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12654.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">scsi_read_complete</name><parameter_list pos:start="1:31" pos:end="1:54">(<parameter pos:start="1:32" pos:end="1:44"><decl pos:start="1:32" pos:end="1:44"><type pos:start="1:32" pos:end="1:44"><name pos:start="1:32" pos:end="1:35">void</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type> <name pos:start="1:39" pos:end="1:44">opaque</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:53"><decl pos:start="1:47" pos:end="1:53"><type pos:start="1:47" pos:end="1:53"><name pos:start="1:47" pos:end="1:49">int</name></type> <name pos:start="1:51" pos:end="1:53">ret</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="67:1">{<block_content pos:start="5:5" pos:end="65:5">

    <decl_stmt pos:start="5:5" pos:end="5:49"><decl pos:start="5:5" pos:end="5:48"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">SCSIGenericReq</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">r</name> <init pos:start="5:23" pos:end="5:48">= <expr pos:start="5:25" pos:end="5:48"><operator pos:start="5:25" pos:end="5:25">(</operator><name pos:start="5:26" pos:end="5:39">SCSIGenericReq</name> <operator pos:start="5:41" pos:end="5:41">*</operator><operator pos:start="5:42" pos:end="5:42">)</operator><name pos:start="5:43" pos:end="5:48">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">SCSIDevice</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:17">s</name> <init pos:start="7:19" pos:end="7:30">= <expr pos:start="7:21" pos:end="7:30"><name pos:start="7:21" pos:end="7:30"><name pos:start="7:21" pos:end="7:21">r</name><operator pos:start="7:22" pos:end="7:23">-&gt;</operator><name pos:start="7:24" pos:end="7:26">req</name><operator pos:start="7:27" pos:end="7:27">.</operator><name pos:start="7:28" pos:end="7:30">dev</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">len</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:24"><expr pos:start="13:5" pos:end="13:23"><name pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:5">r</name><operator pos:start="13:6" pos:end="13:7">-&gt;</operator><name pos:start="13:8" pos:end="13:10">req</name><operator pos:start="13:11" pos:end="13:11">.</operator><name pos:start="13:12" pos:end="13:16">aiocb</name></name> <operator pos:start="13:18" pos:end="13:18">=</operator> <name pos:start="13:20" pos:end="13:23">NULL</name></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:34">(<expr pos:start="15:9" pos:end="15:33"><name pos:start="15:9" pos:end="15:11">ret</name> <operator pos:start="15:13" pos:end="15:14">||</operator> <name pos:start="15:16" pos:end="15:33"><name pos:start="15:16" pos:end="15:16">r</name><operator pos:start="15:17" pos:end="15:18">-&gt;</operator><name pos:start="15:19" pos:end="15:21">req</name><operator pos:start="15:22" pos:end="15:22">.</operator><name pos:start="15:23" pos:end="15:33">io_canceled</name></name></expr>)</condition> <block pos:start="15:36" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:15">

        <expr_stmt pos:start="17:9" pos:end="17:38"><expr pos:start="17:9" pos:end="17:37"><call pos:start="17:9" pos:end="17:37"><name pos:start="17:9" pos:end="17:29">scsi_command_complete</name><argument_list pos:start="17:30" pos:end="17:37">(<argument pos:start="17:31" pos:end="17:31"><expr pos:start="17:31" pos:end="17:31"><name pos:start="17:31" pos:end="17:31">r</name></expr></argument>, <argument pos:start="17:34" pos:end="17:36"><expr pos:start="17:34" pos:end="17:36"><name pos:start="17:34" pos:end="17:36">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:54"><expr pos:start="23:5" pos:end="23:53"><name pos:start="23:5" pos:end="23:7">len</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <name pos:start="23:11" pos:end="23:32"><name pos:start="23:11" pos:end="23:11">r</name><operator pos:start="23:12" pos:end="23:13">-&gt;</operator><name pos:start="23:14" pos:end="23:22">io_header</name><operator pos:start="23:23" pos:end="23:23">.</operator><name pos:start="23:24" pos:end="23:32">dxfer_len</name></name> <operator pos:start="23:34" pos:end="23:34">-</operator> <name pos:start="23:36" pos:end="23:53"><name pos:start="23:36" pos:end="23:36">r</name><operator pos:start="23:37" pos:end="23:38">-&gt;</operator><name pos:start="23:39" pos:end="23:47">io_header</name><operator pos:start="23:48" pos:end="23:48">.</operator><name pos:start="23:49" pos:end="23:53">resid</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:61"><expr pos:start="25:5" pos:end="25:60"><call pos:start="25:5" pos:end="25:60"><name pos:start="25:5" pos:end="25:11">DPRINTF</name><argument_list pos:start="25:12" pos:end="25:60">(<argument pos:start="25:13" pos:end="25:42"><expr pos:start="25:13" pos:end="25:42"><literal type="string" pos:start="25:13" pos:end="25:42">"Data ready tag=0x%x len=%d\n"</literal></expr></argument>, <argument pos:start="25:45" pos:end="25:54"><expr pos:start="25:45" pos:end="25:54"><name pos:start="25:45" pos:end="25:54"><name pos:start="25:45" pos:end="25:45">r</name><operator pos:start="25:46" pos:end="25:47">-&gt;</operator><name pos:start="25:48" pos:end="25:50">req</name><operator pos:start="25:51" pos:end="25:51">.</operator><name pos:start="25:52" pos:end="25:54">tag</name></name></expr></argument>, <argument pos:start="25:57" pos:end="25:59"><expr pos:start="25:57" pos:end="25:59"><name pos:start="25:57" pos:end="25:59">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:16"><expr pos:start="29:5" pos:end="29:15"><name pos:start="29:5" pos:end="29:10"><name pos:start="29:5" pos:end="29:5">r</name><operator pos:start="29:6" pos:end="29:7">-&gt;</operator><name pos:start="29:8" pos:end="29:10">len</name></name> <operator pos:start="29:12" pos:end="29:12">=</operator> <operator pos:start="29:14" pos:end="29:14">-</operator><literal type="number" pos:start="29:15" pos:end="29:15">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="65:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:17">(<expr pos:start="31:9" pos:end="31:16"><name pos:start="31:9" pos:end="31:11">len</name> <operator pos:start="31:13" pos:end="31:14">==</operator> <literal type="number" pos:start="31:16" pos:end="31:16">0</literal></expr>)</condition> <block pos:start="31:19" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:36">

        <expr_stmt pos:start="33:9" pos:end="33:36"><expr pos:start="33:9" pos:end="33:35"><call pos:start="33:9" pos:end="33:35"><name pos:start="33:9" pos:end="33:29">scsi_command_complete</name><argument_list pos:start="33:30" pos:end="33:35">(<argument pos:start="33:31" pos:end="33:31"><expr pos:start="33:31" pos:end="33:31"><name pos:start="33:31" pos:end="33:31">r</name></expr></argument>, <argument pos:start="33:34" pos:end="33:34"><expr pos:start="33:34" pos:end="33:34"><literal type="number" pos:start="33:34" pos:end="33:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="35:7" pos:end="65:5">else <block pos:start="35:12" pos:end="65:5">{<block_content pos:start="39:9" pos:end="63:32">

        <comment type="block" pos:start="37:9" pos:end="37:63">/* Snoop READ CAPACITY output to set the blocksize.  */</comment>

        <if_stmt pos:start="39:9" pos:end="55:9"><if pos:start="39:9" pos:end="47:9">if <condition pos:start="39:12" pos:end="41:69">(<expr pos:start="39:13" pos:end="41:68"><name pos:start="39:13" pos:end="39:29"><name pos:start="39:13" pos:end="39:13">r</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:18">req</name><operator pos:start="39:19" pos:end="39:19">.</operator><name pos:start="39:20" pos:end="39:22">cmd</name><operator pos:start="39:23" pos:end="39:23">.</operator><name pos:start="39:24" pos:end="39:26">buf</name><index pos:start="39:27" pos:end="39:29">[<expr pos:start="39:28" pos:end="39:28"><literal type="number" pos:start="39:28" pos:end="39:28">0</literal></expr>]</index></name> <operator pos:start="39:31" pos:end="39:32">==</operator> <name pos:start="39:34" pos:end="39:49">READ_CAPACITY_10</name> <operator pos:start="39:51" pos:end="39:52">&amp;&amp;</operator>

            <operator pos:start="41:13" pos:end="41:13">(</operator><call pos:start="41:14" pos:end="41:33"><name pos:start="41:14" pos:end="41:21">ldl_be_p</name><argument_list pos:start="41:22" pos:end="41:33">(<argument pos:start="41:23" pos:end="41:32"><expr pos:start="41:23" pos:end="41:32"><operator pos:start="41:23" pos:end="41:23">&amp;</operator><name pos:start="41:24" pos:end="41:32"><name pos:start="41:24" pos:end="41:24">r</name><operator pos:start="41:25" pos:end="41:26">-&gt;</operator><name pos:start="41:27" pos:end="41:29">buf</name><index pos:start="41:30" pos:end="41:32">[<expr pos:start="41:31" pos:end="41:31"><literal type="number" pos:start="41:31" pos:end="41:31">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="41:35" pos:end="41:36">!=</operator> <literal type="number" pos:start="41:38" pos:end="41:48">0xffffffffU</literal> <operator pos:start="41:50" pos:end="41:51">||</operator> <name pos:start="41:53" pos:end="41:62"><name pos:start="41:53" pos:end="41:53">s</name><operator pos:start="41:54" pos:end="41:55">-&gt;</operator><name pos:start="41:56" pos:end="41:62">max_lba</name></name> <operator pos:start="41:64" pos:end="41:65">==</operator> <literal type="number" pos:start="41:67" pos:end="41:67">0</literal><operator pos:start="41:68" pos:end="41:68">)</operator></expr>)</condition> <block pos:start="41:71" pos:end="47:9">{<block_content pos:start="43:13" pos:end="45:62">

            <expr_stmt pos:start="43:13" pos:end="43:48"><expr pos:start="43:13" pos:end="43:47"><name pos:start="43:13" pos:end="43:24"><name pos:start="43:13" pos:end="43:13">s</name><operator pos:start="43:14" pos:end="43:15">-&gt;</operator><name pos:start="43:16" pos:end="43:24">blocksize</name></name> <operator pos:start="43:26" pos:end="43:26">=</operator> <call pos:start="43:28" pos:end="43:47"><name pos:start="43:28" pos:end="43:35">ldl_be_p</name><argument_list pos:start="43:36" pos:end="43:47">(<argument pos:start="43:37" pos:end="43:46"><expr pos:start="43:37" pos:end="43:46"><operator pos:start="43:37" pos:end="43:37">&amp;</operator><name pos:start="43:38" pos:end="43:46"><name pos:start="43:38" pos:end="43:38">r</name><operator pos:start="43:39" pos:end="43:40">-&gt;</operator><name pos:start="43:41" pos:end="43:43">buf</name><index pos:start="43:44" pos:end="43:46">[<expr pos:start="43:45" pos:end="43:45"><literal type="number" pos:start="43:45" pos:end="43:45">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:62"><expr pos:start="45:13" pos:end="45:61"><name pos:start="45:13" pos:end="45:22"><name pos:start="45:13" pos:end="45:13">s</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:22">max_lba</name></name> <operator pos:start="45:24" pos:end="45:24">=</operator> <call pos:start="45:26" pos:end="45:45"><name pos:start="45:26" pos:end="45:33">ldl_be_p</name><argument_list pos:start="45:34" pos:end="45:45">(<argument pos:start="45:35" pos:end="45:44"><expr pos:start="45:35" pos:end="45:44"><operator pos:start="45:35" pos:end="45:35">&amp;</operator><name pos:start="45:36" pos:end="45:44"><name pos:start="45:36" pos:end="45:36">r</name><operator pos:start="45:37" pos:end="45:38">-&gt;</operator><name pos:start="45:39" pos:end="45:41">buf</name><index pos:start="45:42" pos:end="45:44">[<expr pos:start="45:43" pos:end="45:43"><literal type="number" pos:start="45:43" pos:end="45:43">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="45:47" pos:end="45:47">&amp;</operator> <literal type="number" pos:start="45:49" pos:end="45:61">0xffffffffULL</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="47:11" pos:end="55:9">else if <condition pos:start="47:19" pos:end="49:68">(<expr pos:start="47:20" pos:end="49:67"><name pos:start="47:20" pos:end="47:36"><name pos:start="47:20" pos:end="47:20">r</name><operator pos:start="47:21" pos:end="47:22">-&gt;</operator><name pos:start="47:23" pos:end="47:25">req</name><operator pos:start="47:26" pos:end="47:26">.</operator><name pos:start="47:27" pos:end="47:29">cmd</name><operator pos:start="47:30" pos:end="47:30">.</operator><name pos:start="47:31" pos:end="47:33">buf</name><index pos:start="47:34" pos:end="47:36">[<expr pos:start="47:35" pos:end="47:35"><literal type="number" pos:start="47:35" pos:end="47:35">0</literal></expr>]</index></name> <operator pos:start="47:38" pos:end="47:39">==</operator> <name pos:start="47:41" pos:end="47:60">SERVICE_ACTION_IN_16</name> <operator pos:start="47:62" pos:end="47:63">&amp;&amp;</operator>

                   <operator pos:start="49:20" pos:end="49:20">(</operator><name pos:start="49:21" pos:end="49:37"><name pos:start="49:21" pos:end="49:21">r</name><operator pos:start="49:22" pos:end="49:23">-&gt;</operator><name pos:start="49:24" pos:end="49:26">req</name><operator pos:start="49:27" pos:end="49:27">.</operator><name pos:start="49:28" pos:end="49:30">cmd</name><operator pos:start="49:31" pos:end="49:31">.</operator><name pos:start="49:32" pos:end="49:34">buf</name><index pos:start="49:35" pos:end="49:37">[<expr pos:start="49:36" pos:end="49:36"><literal type="number" pos:start="49:36" pos:end="49:36">1</literal></expr>]</index></name> <operator pos:start="49:39" pos:end="49:39">&amp;</operator> <literal type="number" pos:start="49:41" pos:end="49:42">31</literal><operator pos:start="49:43" pos:end="49:43">)</operator> <operator pos:start="49:45" pos:end="49:46">==</operator> <name pos:start="49:48" pos:end="49:67">SAI_READ_CAPACITY_16</name></expr>)</condition> <block pos:start="49:70" pos:end="55:9">{<block_content pos:start="51:13" pos:end="53:46">

            <expr_stmt pos:start="51:13" pos:end="51:48"><expr pos:start="51:13" pos:end="51:47"><name pos:start="51:13" pos:end="51:24"><name pos:start="51:13" pos:end="51:13">s</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:24">blocksize</name></name> <operator pos:start="51:26" pos:end="51:26">=</operator> <call pos:start="51:28" pos:end="51:47"><name pos:start="51:28" pos:end="51:35">ldl_be_p</name><argument_list pos:start="51:36" pos:end="51:47">(<argument pos:start="51:37" pos:end="51:46"><expr pos:start="51:37" pos:end="51:46"><operator pos:start="51:37" pos:end="51:37">&amp;</operator><name pos:start="51:38" pos:end="51:46"><name pos:start="51:38" pos:end="51:38">r</name><operator pos:start="51:39" pos:end="51:40">-&gt;</operator><name pos:start="51:41" pos:end="51:43">buf</name><index pos:start="51:44" pos:end="51:46">[<expr pos:start="51:45" pos:end="51:45"><literal type="number" pos:start="51:45" pos:end="51:45">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:46"><expr pos:start="53:13" pos:end="53:45"><name pos:start="53:13" pos:end="53:22"><name pos:start="53:13" pos:end="53:13">s</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:22">max_lba</name></name> <operator pos:start="53:24" pos:end="53:24">=</operator> <call pos:start="53:26" pos:end="53:45"><name pos:start="53:26" pos:end="53:33">ldq_be_p</name><argument_list pos:start="53:34" pos:end="53:45">(<argument pos:start="53:35" pos:end="53:44"><expr pos:start="53:35" pos:end="53:44"><operator pos:start="53:35" pos:end="53:35">&amp;</operator><name pos:start="53:36" pos:end="53:44"><name pos:start="53:36" pos:end="53:36">r</name><operator pos:start="53:37" pos:end="53:38">-&gt;</operator><name pos:start="53:39" pos:end="53:41">buf</name><index pos:start="53:42" pos:end="53:44">[<expr pos:start="53:43" pos:end="53:43"><literal type="number" pos:start="53:43" pos:end="53:43">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:60"><expr pos:start="57:9" pos:end="57:59"><call pos:start="57:9" pos:end="57:59"><name pos:start="57:9" pos:end="57:33">bdrv_set_guest_block_size</name><argument_list pos:start="57:34" pos:end="57:59">(<argument pos:start="57:35" pos:end="57:44"><expr pos:start="57:35" pos:end="57:44"><name pos:start="57:35" pos:end="57:44"><name pos:start="57:35" pos:end="57:35">s</name><operator pos:start="57:36" pos:end="57:37">-&gt;</operator><name pos:start="57:38" pos:end="57:41">conf</name><operator pos:start="57:42" pos:end="57:42">.</operator><name pos:start="57:43" pos:end="57:44">bs</name></name></expr></argument>, <argument pos:start="57:47" pos:end="57:58"><expr pos:start="57:47" pos:end="57:58"><name pos:start="57:47" pos:end="57:58"><name pos:start="57:47" pos:end="57:47">s</name><operator pos:start="57:48" pos:end="57:49">-&gt;</operator><name pos:start="57:50" pos:end="57:58">blocksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="61:9" pos:end="61:36"><expr pos:start="61:9" pos:end="61:35"><call pos:start="61:9" pos:end="61:35"><name pos:start="61:9" pos:end="61:21">scsi_req_data</name><argument_list pos:start="61:22" pos:end="61:35">(<argument pos:start="61:23" pos:end="61:29"><expr pos:start="61:23" pos:end="61:29"><operator pos:start="61:23" pos:end="61:23">&amp;</operator><name pos:start="61:24" pos:end="61:29"><name pos:start="61:24" pos:end="61:24">r</name><operator pos:start="61:25" pos:end="61:26">-&gt;</operator><name pos:start="61:27" pos:end="61:29">req</name></name></expr></argument>, <argument pos:start="61:32" pos:end="61:34"><expr pos:start="61:32" pos:end="61:34"><name pos:start="61:32" pos:end="61:34">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:32"><expr pos:start="63:9" pos:end="63:31"><call pos:start="63:9" pos:end="63:31"><name pos:start="63:9" pos:end="63:22">scsi_req_unref</name><argument_list pos:start="63:23" pos:end="63:31">(<argument pos:start="63:24" pos:end="63:30"><expr pos:start="63:24" pos:end="63:30"><operator pos:start="63:24" pos:end="63:24">&amp;</operator><name pos:start="63:25" pos:end="63:30"><name pos:start="63:25" pos:end="63:25">r</name><operator pos:start="63:26" pos:end="63:27">-&gt;</operator><name pos:start="63:28" pos:end="63:30">req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
