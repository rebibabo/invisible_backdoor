<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8265.c" pos:tabs="8"><function pos:start="1:1" pos:end="777:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:12">const</specifier> <name pos:start="1:14" pos:end="1:22">mon_cmd_t</name> <modifier pos:start="1:24" pos:end="1:24">*</modifier></type><name pos:start="1:25" pos:end="1:45">monitor_parse_command</name><parameter_list pos:start="1:46" pos:end="9:59">(<parameter pos:start="1:47" pos:end="1:58"><decl pos:start="1:47" pos:end="1:58"><type pos:start="1:47" pos:end="1:58"><name pos:start="1:47" pos:end="1:53">Monitor</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:58">mon</name></decl></parameter>,

                                              <parameter pos:start="3:47" pos:end="3:65"><decl pos:start="3:47" pos:end="3:65"><type pos:start="3:47" pos:end="3:65"><specifier pos:start="3:47" pos:end="3:51">const</specifier> <name pos:start="3:53" pos:end="3:56">char</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:65">cmdline</name></decl></parameter>,

                                              <parameter pos:start="5:47" pos:end="5:55"><decl pos:start="5:47" pos:end="5:55"><type pos:start="5:47" pos:end="5:55"><name pos:start="5:47" pos:end="5:49">int</name></type> <name pos:start="5:51" pos:end="5:55">start</name></decl></parameter>,

                                              <parameter pos:start="7:47" pos:end="7:62"><decl pos:start="7:47" pos:end="7:62"><type pos:start="7:47" pos:end="7:62"><name pos:start="7:47" pos:end="7:55">mon_cmd_t</name> <modifier pos:start="7:57" pos:end="7:57">*</modifier></type><name pos:start="7:58" pos:end="7:62">table</name></decl></parameter>,

                                              <parameter pos:start="9:47" pos:end="9:58"><decl pos:start="9:47" pos:end="9:58"><type pos:start="9:47" pos:end="9:58"><name pos:start="9:47" pos:end="9:51">QDict</name> <modifier pos:start="9:53" pos:end="9:53">*</modifier></type><name pos:start="9:54" pos:end="9:58">qdict</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="777:1">{<block_content pos:start="13:5" pos:end="775:16">

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:17">p</name></decl>, <decl pos:start="13:20" pos:end="13:27"><type ref="prev" pos:start="13:5" pos:end="13:16"><modifier pos:start="13:20" pos:end="13:20">*</modifier></type><name pos:start="13:21" pos:end="13:27">typestr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:10"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">c</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:21"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:19">mon_cmd_t</name> <modifier pos:start="17:21" pos:end="17:21">*</modifier></type><name pos:start="17:22" pos:end="17:24">cmd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:22"><decl pos:start="19:5" pos:end="19:21"><type pos:start="19:5" pos:end="19:8"><name pos:start="19:5" pos:end="19:8">char</name></type> <name pos:start="19:10" pos:end="19:21"><name pos:start="19:10" pos:end="19:16">cmdname</name><index pos:start="19:17" pos:end="19:21">[<expr pos:start="19:18" pos:end="19:20"><literal type="number" pos:start="19:18" pos:end="19:20">256</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:19"><decl pos:start="21:5" pos:end="21:18"><type pos:start="21:5" pos:end="21:8"><name pos:start="21:5" pos:end="21:8">char</name></type> <name pos:start="21:10" pos:end="21:18"><name pos:start="21:10" pos:end="21:12">buf</name><index pos:start="21:13" pos:end="21:18">[<expr pos:start="21:14" pos:end="21:17"><literal type="number" pos:start="21:14" pos:end="21:17">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:14"><decl pos:start="23:5" pos:end="23:13"><type pos:start="23:5" pos:end="23:10"><name pos:start="23:5" pos:end="23:8">char</name> <modifier pos:start="23:10" pos:end="23:10">*</modifier></type><name pos:start="23:11" pos:end="23:13">key</name></decl>;</decl_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:34">/* extract the command name */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:68"><expr pos:start="29:5" pos:end="29:67"><name pos:start="29:5" pos:end="29:5">p</name> <operator pos:start="29:7" pos:end="29:7">=</operator> <call pos:start="29:9" pos:end="29:67"><name pos:start="29:9" pos:end="29:24">get_command_name</name><argument_list pos:start="29:25" pos:end="29:67">(<argument pos:start="29:26" pos:end="29:40"><expr pos:start="29:26" pos:end="29:40"><name pos:start="29:26" pos:end="29:32">cmdline</name> <operator pos:start="29:34" pos:end="29:34">+</operator> <name pos:start="29:36" pos:end="29:40">start</name></expr></argument>, <argument pos:start="29:43" pos:end="29:49"><expr pos:start="29:43" pos:end="29:49"><name pos:start="29:43" pos:end="29:49">cmdname</name></expr></argument>, <argument pos:start="29:52" pos:end="29:66"><expr pos:start="29:52" pos:end="29:66"><sizeof pos:start="29:52" pos:end="29:66">sizeof<argument_list pos:start="29:58" pos:end="29:66">(<argument pos:start="29:59" pos:end="29:65"><expr pos:start="29:59" pos:end="29:65"><name pos:start="29:59" pos:end="29:65">cmdname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="33:20"><if pos:start="31:5" pos:end="33:20">if <condition pos:start="31:8" pos:end="31:11">(<expr pos:start="31:9" pos:end="31:10"><operator pos:start="31:9" pos:end="31:9">!</operator><name pos:start="31:10" pos:end="31:10">p</name></expr>)</condition><block type="pseudo" pos:start="33:9" pos:end="33:20"><block_content pos:start="33:9" pos:end="33:20">

        <return pos:start="33:9" pos:end="33:20">return <expr pos:start="33:16" pos:end="33:19"><name pos:start="33:16" pos:end="33:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:48"><expr pos:start="37:5" pos:end="37:47"><name pos:start="37:5" pos:end="37:7">cmd</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <call pos:start="37:11" pos:end="37:47"><name pos:start="37:11" pos:end="37:31">search_dispatch_table</name><argument_list pos:start="37:32" pos:end="37:47">(<argument pos:start="37:33" pos:end="37:37"><expr pos:start="37:33" pos:end="37:37"><name pos:start="37:33" pos:end="37:37">table</name></expr></argument>, <argument pos:start="37:40" pos:end="37:46"><expr pos:start="37:40" pos:end="37:46"><name pos:start="37:40" pos:end="37:46">cmdname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="47:5"><if pos:start="39:5" pos:end="47:5">if <condition pos:start="39:8" pos:end="39:13">(<expr pos:start="39:9" pos:end="39:12"><operator pos:start="39:9" pos:end="39:9">!</operator><name pos:start="39:10" pos:end="39:12">cmd</name></expr>)</condition> <block pos:start="39:15" pos:end="47:5">{<block_content pos:start="41:9" pos:end="45:20">

        <expr_stmt pos:start="41:9" pos:end="43:52"><expr pos:start="41:9" pos:end="43:51"><call pos:start="41:9" pos:end="43:51"><name pos:start="41:9" pos:end="41:22">monitor_printf</name><argument_list pos:start="41:23" pos:end="43:51">(<argument pos:start="41:24" pos:end="41:26"><expr pos:start="41:24" pos:end="41:26"><name pos:start="41:24" pos:end="41:26">mon</name></expr></argument>, <argument pos:start="41:29" pos:end="41:55"><expr pos:start="41:29" pos:end="41:55"><literal type="string" pos:start="41:29" pos:end="41:55">"unknown command: '%.*s'\n"</literal></expr></argument>,

                       <argument pos:start="43:24" pos:end="43:41"><expr pos:start="43:24" pos:end="43:41"><operator pos:start="43:24" pos:end="43:24">(</operator><name pos:start="43:25" pos:end="43:27">int</name><operator pos:start="43:28" pos:end="43:28">)</operator><operator pos:start="43:29" pos:end="43:29">(</operator><name pos:start="43:30" pos:end="43:30">p</name> <operator pos:start="43:32" pos:end="43:32">-</operator> <name pos:start="43:34" pos:end="43:40">cmdline</name><operator pos:start="43:41" pos:end="43:41">)</operator></expr></argument>, <argument pos:start="43:44" pos:end="43:50"><expr pos:start="43:44" pos:end="43:50"><name pos:start="43:44" pos:end="43:50">cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:20">return <expr pos:start="45:16" pos:end="45:19"><name pos:start="45:16" pos:end="45:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:44">/* filter out following useless space */</comment>

    <while pos:start="53:5" pos:end="57:5">while <condition pos:start="53:11" pos:end="53:28">(<expr pos:start="53:12" pos:end="53:27"><call pos:start="53:12" pos:end="53:27"><name pos:start="53:12" pos:end="53:23">qemu_isspace</name><argument_list pos:start="53:24" pos:end="53:27">(<argument pos:start="53:25" pos:end="53:26"><expr pos:start="53:25" pos:end="53:26"><operator pos:start="53:25" pos:end="53:25">*</operator><name pos:start="53:26" pos:end="53:26">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="53:30" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:12">

        <expr_stmt pos:start="55:9" pos:end="55:12"><expr pos:start="55:9" pos:end="55:11"><name pos:start="55:9" pos:end="55:9">p</name><operator pos:start="55:10" pos:end="55:11">++</operator></expr>;</expr_stmt>

    </block_content>}</block></while>

    <comment type="block" pos:start="59:5" pos:end="59:28">/* search sub command */</comment>

    <if_stmt pos:start="61:5" pos:end="75:5"><if pos:start="61:5" pos:end="75:5">if <condition pos:start="61:8" pos:end="61:31">(<expr pos:start="61:9" pos:end="61:30"><name pos:start="61:9" pos:end="61:22"><name pos:start="61:9" pos:end="61:11">cmd</name><operator pos:start="61:12" pos:end="61:13">-&gt;</operator><name pos:start="61:14" pos:end="61:22">sub_table</name></name> <operator pos:start="61:24" pos:end="61:25">!=</operator> <name pos:start="61:27" pos:end="61:30">NULL</name></expr>)</condition> <block pos:start="61:33" pos:end="75:5">{<block_content pos:start="65:9" pos:end="73:60">

        <comment type="block" pos:start="63:9" pos:end="63:50">/* check if user set additional command */</comment>

        <if_stmt pos:start="65:9" pos:end="69:9"><if pos:start="65:9" pos:end="69:9">if <condition pos:start="65:12" pos:end="65:23">(<expr pos:start="65:13" pos:end="65:22"><operator pos:start="65:13" pos:end="65:13">*</operator><name pos:start="65:14" pos:end="65:14">p</name> <operator pos:start="65:16" pos:end="65:17">==</operator> <literal type="char" pos:start="65:19" pos:end="65:22">'\0'</literal></expr>)</condition> <block pos:start="65:25" pos:end="69:9">{<block_content pos:start="67:13" pos:end="67:23">

            <return pos:start="67:13" pos:end="67:23">return <expr pos:start="67:20" pos:end="67:22"><name pos:start="67:20" pos:end="67:22">cmd</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <return pos:start="71:9" pos:end="73:60">return <expr pos:start="71:16" pos:end="73:59"><call pos:start="71:16" pos:end="73:59"><name pos:start="71:16" pos:end="71:36">monitor_parse_command</name><argument_list pos:start="71:37" pos:end="73:59">(<argument pos:start="71:38" pos:end="71:40"><expr pos:start="71:38" pos:end="71:40"><name pos:start="71:38" pos:end="71:40">mon</name></expr></argument>, <argument pos:start="71:43" pos:end="71:49"><expr pos:start="71:43" pos:end="71:49"><name pos:start="71:43" pos:end="71:49">cmdline</name></expr></argument>, <argument pos:start="71:52" pos:end="71:62"><expr pos:start="71:52" pos:end="71:62"><name pos:start="71:52" pos:end="71:52">p</name> <operator pos:start="71:54" pos:end="71:54">-</operator> <name pos:start="71:56" pos:end="71:62">cmdline</name></expr></argument>,

                                     <argument pos:start="73:38" pos:end="73:51"><expr pos:start="73:38" pos:end="73:51"><name pos:start="73:38" pos:end="73:51"><name pos:start="73:38" pos:end="73:40">cmd</name><operator pos:start="73:41" pos:end="73:42">-&gt;</operator><name pos:start="73:43" pos:end="73:51">sub_table</name></name></expr></argument>, <argument pos:start="73:54" pos:end="73:58"><expr pos:start="73:54" pos:end="73:58"><name pos:start="73:54" pos:end="73:58">qdict</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="79:5" pos:end="79:30">/* parse the parameters */</comment>

    <expr_stmt pos:start="81:5" pos:end="81:29"><expr pos:start="81:5" pos:end="81:28"><name pos:start="81:5" pos:end="81:11">typestr</name> <operator pos:start="81:13" pos:end="81:13">=</operator> <name pos:start="81:15" pos:end="81:28"><name pos:start="81:15" pos:end="81:17">cmd</name><operator pos:start="81:18" pos:end="81:19">-&gt;</operator><name pos:start="81:20" pos:end="81:28">args_type</name></name></expr>;</expr_stmt>

    <for pos:start="83:5" pos:end="747:5">for<control pos:start="83:8" pos:end="83:11">(<init pos:start="83:9" pos:end="83:9">;</init><condition pos:start="83:10" pos:end="83:10">;</condition><incr/>)</control> <block pos:start="83:13" pos:end="747:5">{<block_content pos:start="85:9" pos:end="745:19">

        <expr_stmt pos:start="85:9" pos:end="85:46"><expr pos:start="85:9" pos:end="85:45"><name pos:start="85:9" pos:end="85:15">typestr</name> <operator pos:start="85:17" pos:end="85:17">=</operator> <call pos:start="85:19" pos:end="85:45"><name pos:start="85:19" pos:end="85:30">key_get_info</name><argument_list pos:start="85:31" pos:end="85:45">(<argument pos:start="85:32" pos:end="85:38"><expr pos:start="85:32" pos:end="85:38"><name pos:start="85:32" pos:end="85:38">typestr</name></expr></argument>, <argument pos:start="85:41" pos:end="85:44"><expr pos:start="85:41" pos:end="85:44"><operator pos:start="85:41" pos:end="85:41">&amp;</operator><name pos:start="85:42" pos:end="85:44">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="87:9" pos:end="89:18"><if pos:start="87:9" pos:end="89:18">if <condition pos:start="87:12" pos:end="87:21">(<expr pos:start="87:13" pos:end="87:20"><operator pos:start="87:13" pos:end="87:13">!</operator><name pos:start="87:14" pos:end="87:20">typestr</name></expr>)</condition><block type="pseudo" pos:start="89:13" pos:end="89:18"><block_content pos:start="89:13" pos:end="89:18">

            <break pos:start="89:13" pos:end="89:18">break;</break></block_content></block></if></if_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:21"><expr pos:start="91:9" pos:end="91:20"><name pos:start="91:9" pos:end="91:9">c</name> <operator pos:start="91:11" pos:end="91:11">=</operator> <operator pos:start="91:13" pos:end="91:13">*</operator><name pos:start="91:14" pos:end="91:20">typestr</name></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:18"><expr pos:start="93:9" pos:end="93:17"><name pos:start="93:9" pos:end="93:15">typestr</name><operator pos:start="93:16" pos:end="93:17">++</operator></expr>;</expr_stmt>

        <switch pos:start="95:9" pos:end="741:9">switch<condition pos:start="95:15" pos:end="95:17">(<expr pos:start="95:16" pos:end="95:16"><name pos:start="95:16" pos:end="95:16">c</name></expr>)</condition> <block pos:start="95:19" pos:end="741:9">{<block_content pos:start="97:9" pos:end="739:22">

        <case pos:start="97:9" pos:end="97:17">case <expr pos:start="97:14" pos:end="97:16"><literal type="char" pos:start="97:14" pos:end="97:16">'F'</literal></expr>:</case>

        <case pos:start="99:9" pos:end="99:17">case <expr pos:start="99:14" pos:end="99:16"><literal type="char" pos:start="99:14" pos:end="99:16">'B'</literal></expr>:</case>

        <case pos:start="101:9" pos:end="101:17">case <expr pos:start="101:14" pos:end="101:16"><literal type="char" pos:start="101:14" pos:end="101:16">'s'</literal></expr>:</case>

            <block pos:start="103:13" pos:end="163:13">{<block_content pos:start="105:17" pos:end="161:61">

                <decl_stmt pos:start="105:17" pos:end="105:24"><decl pos:start="105:17" pos:end="105:23"><type pos:start="105:17" pos:end="105:19"><name pos:start="105:17" pos:end="105:19">int</name></type> <name pos:start="105:21" pos:end="105:23">ret</name></decl>;</decl_stmt>



                <while pos:start="109:17" pos:end="111:24">while <condition pos:start="109:23" pos:end="109:40">(<expr pos:start="109:24" pos:end="109:39"><call pos:start="109:24" pos:end="109:39"><name pos:start="109:24" pos:end="109:35">qemu_isspace</name><argument_list pos:start="109:36" pos:end="109:39">(<argument pos:start="109:37" pos:end="109:38"><expr pos:start="109:37" pos:end="109:38"><operator pos:start="109:37" pos:end="109:37">*</operator><name pos:start="109:38" pos:end="109:38">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="111:21" pos:end="111:24"><block_content pos:start="111:21" pos:end="111:24">

                    <expr_stmt pos:start="111:21" pos:end="111:24"><expr pos:start="111:21" pos:end="111:23"><name pos:start="111:21" pos:end="111:21">p</name><operator pos:start="111:22" pos:end="111:23">++</operator></expr>;</expr_stmt></block_content></block></while>

                <if_stmt pos:start="113:17" pos:end="125:17"><if pos:start="113:17" pos:end="125:17">if <condition pos:start="113:20" pos:end="113:36">(<expr pos:start="113:21" pos:end="113:35"><operator pos:start="113:21" pos:end="113:21">*</operator><name pos:start="113:22" pos:end="113:28">typestr</name> <operator pos:start="113:30" pos:end="113:31">==</operator> <literal type="char" pos:start="113:33" pos:end="113:35">'?'</literal></expr>)</condition> <block pos:start="113:38" pos:end="125:17">{<block_content pos:start="115:21" pos:end="123:21">

                    <expr_stmt pos:start="115:21" pos:end="115:30"><expr pos:start="115:21" pos:end="115:29"><name pos:start="115:21" pos:end="115:27">typestr</name><operator pos:start="115:28" pos:end="115:29">++</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="117:21" pos:end="123:21"><if pos:start="117:21" pos:end="123:21">if <condition pos:start="117:24" pos:end="117:35">(<expr pos:start="117:25" pos:end="117:34"><operator pos:start="117:25" pos:end="117:25">*</operator><name pos:start="117:26" pos:end="117:26">p</name> <operator pos:start="117:28" pos:end="117:29">==</operator> <literal type="char" pos:start="117:31" pos:end="117:34">'\0'</literal></expr>)</condition> <block pos:start="117:37" pos:end="123:21">{<block_content pos:start="121:25" pos:end="121:30">

                        <comment type="block" pos:start="119:25" pos:end="119:63">/* no optional string: NULL argument */</comment>

                        <break pos:start="121:25" pos:end="121:30">break;</break>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="127:17" pos:end="127:52"><expr pos:start="127:17" pos:end="127:51"><name pos:start="127:17" pos:end="127:19">ret</name> <operator pos:start="127:21" pos:end="127:21">=</operator> <call pos:start="127:23" pos:end="127:51"><name pos:start="127:23" pos:end="127:29">get_str</name><argument_list pos:start="127:30" pos:end="127:51">(<argument pos:start="127:31" pos:end="127:33"><expr pos:start="127:31" pos:end="127:33"><name pos:start="127:31" pos:end="127:33">buf</name></expr></argument>, <argument pos:start="127:36" pos:end="127:46"><expr pos:start="127:36" pos:end="127:46"><sizeof pos:start="127:36" pos:end="127:46">sizeof<argument_list pos:start="127:42" pos:end="127:46">(<argument pos:start="127:43" pos:end="127:45"><expr pos:start="127:43" pos:end="127:45"><name pos:start="127:43" pos:end="127:45">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="127:49" pos:end="127:50"><expr pos:start="127:49" pos:end="127:50"><operator pos:start="127:49" pos:end="127:49">&amp;</operator><name pos:start="127:50" pos:end="127:50">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="129:17" pos:end="159:17"><if pos:start="129:17" pos:end="159:17">if <condition pos:start="129:20" pos:end="129:28">(<expr pos:start="129:21" pos:end="129:27"><name pos:start="129:21" pos:end="129:23">ret</name> <operator pos:start="129:25" pos:end="129:25">&lt;</operator> <literal type="number" pos:start="129:27" pos:end="129:27">0</literal></expr>)</condition> <block pos:start="129:30" pos:end="159:17">{<block_content pos:start="131:21" pos:end="157:30">

                    <switch pos:start="131:21" pos:end="155:21">switch<condition pos:start="131:27" pos:end="131:29">(<expr pos:start="131:28" pos:end="131:28"><name pos:start="131:28" pos:end="131:28">c</name></expr>)</condition> <block pos:start="131:31" pos:end="155:21">{<block_content pos:start="133:21" pos:end="153:30">

                    <case pos:start="133:21" pos:end="133:29">case <expr pos:start="133:26" pos:end="133:28"><literal type="char" pos:start="133:26" pos:end="133:28">'F'</literal></expr>:</case>

                        <expr_stmt pos:start="135:25" pos:end="137:48"><expr pos:start="135:25" pos:end="137:47"><call pos:start="135:25" pos:end="137:47"><name pos:start="135:25" pos:end="135:38">monitor_printf</name><argument_list pos:start="135:39" pos:end="137:47">(<argument pos:start="135:40" pos:end="135:42"><expr pos:start="135:40" pos:end="135:42"><name pos:start="135:40" pos:end="135:42">mon</name></expr></argument>, <argument pos:start="135:45" pos:end="135:69"><expr pos:start="135:45" pos:end="135:69"><literal type="string" pos:start="135:45" pos:end="135:69">"%s: filename expected\n"</literal></expr></argument>,

                                       <argument pos:start="137:40" pos:end="137:46"><expr pos:start="137:40" pos:end="137:46"><name pos:start="137:40" pos:end="137:46">cmdname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="139:25" pos:end="139:30">break;</break>

                    <case pos:start="141:21" pos:end="141:29">case <expr pos:start="141:26" pos:end="141:28"><literal type="char" pos:start="141:26" pos:end="141:28">'B'</literal></expr>:</case>

                        <expr_stmt pos:start="143:25" pos:end="145:48"><expr pos:start="143:25" pos:end="145:47"><call pos:start="143:25" pos:end="145:47"><name pos:start="143:25" pos:end="143:38">monitor_printf</name><argument_list pos:start="143:39" pos:end="145:47">(<argument pos:start="143:40" pos:end="143:42"><expr pos:start="143:40" pos:end="143:42"><name pos:start="143:40" pos:end="143:42">mon</name></expr></argument>, <argument pos:start="143:45" pos:end="143:78"><expr pos:start="143:45" pos:end="143:78"><literal type="string" pos:start="143:45" pos:end="143:78">"%s: block device name expected\n"</literal></expr></argument>,

                                       <argument pos:start="145:40" pos:end="145:46"><expr pos:start="145:40" pos:end="145:46"><name pos:start="145:40" pos:end="145:46">cmdname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="147:25" pos:end="147:30">break;</break>

                    <default pos:start="149:21" pos:end="149:28">default:</default>

                        <expr_stmt pos:start="151:25" pos:end="151:78"><expr pos:start="151:25" pos:end="151:77"><call pos:start="151:25" pos:end="151:77"><name pos:start="151:25" pos:end="151:38">monitor_printf</name><argument_list pos:start="151:39" pos:end="151:77">(<argument pos:start="151:40" pos:end="151:42"><expr pos:start="151:40" pos:end="151:42"><name pos:start="151:40" pos:end="151:42">mon</name></expr></argument>, <argument pos:start="151:45" pos:end="151:67"><expr pos:start="151:45" pos:end="151:67"><literal type="string" pos:start="151:45" pos:end="151:67">"%s: string expected\n"</literal></expr></argument>, <argument pos:start="151:70" pos:end="151:76"><expr pos:start="151:70" pos:end="151:76"><name pos:start="151:70" pos:end="151:76">cmdname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="153:25" pos:end="153:30">break;</break>

                    </block_content>}</block></switch>

                    <goto pos:start="157:21" pos:end="157:30">goto <name pos:start="157:26" pos:end="157:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="161:17" pos:end="161:61"><expr pos:start="161:17" pos:end="161:60"><call pos:start="161:17" pos:end="161:60"><name pos:start="161:17" pos:end="161:25">qdict_put</name><argument_list pos:start="161:26" pos:end="161:60">(<argument pos:start="161:27" pos:end="161:31"><expr pos:start="161:27" pos:end="161:31"><name pos:start="161:27" pos:end="161:31">qdict</name></expr></argument>, <argument pos:start="161:34" pos:end="161:36"><expr pos:start="161:34" pos:end="161:36"><name pos:start="161:34" pos:end="161:36">key</name></expr></argument>, <argument pos:start="161:39" pos:end="161:59"><expr pos:start="161:39" pos:end="161:59"><call pos:start="161:39" pos:end="161:59"><name pos:start="161:39" pos:end="161:54">qstring_from_str</name><argument_list pos:start="161:55" pos:end="161:59">(<argument pos:start="161:56" pos:end="161:58"><expr pos:start="161:56" pos:end="161:58"><name pos:start="161:56" pos:end="161:58">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="165:13" pos:end="165:18">break;</break>

        <case pos:start="167:9" pos:end="167:17">case <expr pos:start="167:14" pos:end="167:16"><literal type="char" pos:start="167:14" pos:end="167:16">'O'</literal></expr>:</case>

            <block pos:start="169:13" pos:end="213:13">{<block_content pos:start="171:17" pos:end="211:36">

                <decl_stmt pos:start="171:17" pos:end="171:40"><decl pos:start="171:17" pos:end="171:39"><type pos:start="171:17" pos:end="171:30"><name pos:start="171:17" pos:end="171:28">QemuOptsList</name> <modifier pos:start="171:30" pos:end="171:30">*</modifier></type><name pos:start="171:31" pos:end="171:39">opts_list</name></decl>;</decl_stmt>

                <decl_stmt pos:start="173:17" pos:end="173:31"><decl pos:start="173:17" pos:end="173:30"><type pos:start="173:17" pos:end="173:26"><name pos:start="173:17" pos:end="173:24">QemuOpts</name> <modifier pos:start="173:26" pos:end="173:26">*</modifier></type><name pos:start="173:27" pos:end="173:30">opts</name></decl>;</decl_stmt>



                <expr_stmt pos:start="177:17" pos:end="177:48"><expr pos:start="177:17" pos:end="177:47"><name pos:start="177:17" pos:end="177:25">opts_list</name> <operator pos:start="177:27" pos:end="177:27">=</operator> <call pos:start="177:29" pos:end="177:47"><name pos:start="177:29" pos:end="177:42">qemu_find_opts</name><argument_list pos:start="177:43" pos:end="177:47">(<argument pos:start="177:44" pos:end="177:46"><expr pos:start="177:44" pos:end="177:46"><name pos:start="177:44" pos:end="177:46">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="179:17" pos:end="183:17"><if pos:start="179:17" pos:end="183:17">if <condition pos:start="179:20" pos:end="179:56">(<expr pos:start="179:21" pos:end="179:55"><operator pos:start="179:21" pos:end="179:21">!</operator><name pos:start="179:22" pos:end="179:30">opts_list</name> <operator pos:start="179:32" pos:end="179:33">||</operator> <name pos:start="179:35" pos:end="179:55"><name pos:start="179:35" pos:end="179:43">opts_list</name><operator pos:start="179:44" pos:end="179:45">-&gt;</operator><name pos:start="179:46" pos:end="179:49">desc</name><operator pos:start="179:50" pos:end="179:51">-&gt;</operator><name pos:start="179:52" pos:end="179:55">name</name></name></expr>)</condition> <block pos:start="179:58" pos:end="183:17">{<block_content pos:start="181:21" pos:end="181:34">

                    <goto pos:start="181:21" pos:end="181:34">goto <name pos:start="181:26" pos:end="181:33">bad_type</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <while pos:start="185:17" pos:end="189:17">while <condition pos:start="185:23" pos:end="185:40">(<expr pos:start="185:24" pos:end="185:39"><call pos:start="185:24" pos:end="185:39"><name pos:start="185:24" pos:end="185:35">qemu_isspace</name><argument_list pos:start="185:36" pos:end="185:39">(<argument pos:start="185:37" pos:end="185:38"><expr pos:start="185:37" pos:end="185:38"><operator pos:start="185:37" pos:end="185:37">*</operator><name pos:start="185:38" pos:end="185:38">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="185:42" pos:end="189:17">{<block_content pos:start="187:21" pos:end="187:24">

                    <expr_stmt pos:start="187:21" pos:end="187:24"><expr pos:start="187:21" pos:end="187:23"><name pos:start="187:21" pos:end="187:21">p</name><operator pos:start="187:22" pos:end="187:23">++</operator></expr>;</expr_stmt>

                </block_content>}</block></while>

                <if_stmt pos:start="191:17" pos:end="193:26"><if pos:start="191:17" pos:end="193:26">if <condition pos:start="191:20" pos:end="191:24">(<expr pos:start="191:21" pos:end="191:23"><operator pos:start="191:21" pos:end="191:21">!</operator><operator pos:start="191:22" pos:end="191:22">*</operator><name pos:start="191:23" pos:end="191:23">p</name></expr>)</condition><block type="pseudo" pos:start="193:21" pos:end="193:26"><block_content pos:start="193:21" pos:end="193:26">

                    <break pos:start="193:21" pos:end="193:26">break;</break></block_content></block></if></if_stmt>

                <if_stmt pos:start="195:17" pos:end="199:17"><if pos:start="195:17" pos:end="199:17">if <condition pos:start="195:20" pos:end="195:54">(<expr pos:start="195:21" pos:end="195:53"><call pos:start="195:21" pos:end="195:49"><name pos:start="195:21" pos:end="195:27">get_str</name><argument_list pos:start="195:28" pos:end="195:49">(<argument pos:start="195:29" pos:end="195:31"><expr pos:start="195:29" pos:end="195:31"><name pos:start="195:29" pos:end="195:31">buf</name></expr></argument>, <argument pos:start="195:34" pos:end="195:44"><expr pos:start="195:34" pos:end="195:44"><sizeof pos:start="195:34" pos:end="195:44">sizeof<argument_list pos:start="195:40" pos:end="195:44">(<argument pos:start="195:41" pos:end="195:43"><expr pos:start="195:41" pos:end="195:43"><name pos:start="195:41" pos:end="195:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="195:47" pos:end="195:48"><expr pos:start="195:47" pos:end="195:48"><operator pos:start="195:47" pos:end="195:47">&amp;</operator><name pos:start="195:48" pos:end="195:48">p</name></expr></argument>)</argument_list></call> <operator pos:start="195:51" pos:end="195:51">&lt;</operator> <literal type="number" pos:start="195:53" pos:end="195:53">0</literal></expr>)</condition> <block pos:start="195:56" pos:end="199:17">{<block_content pos:start="197:21" pos:end="197:30">

                    <goto pos:start="197:21" pos:end="197:30">goto <name pos:start="197:26" pos:end="197:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="201:17" pos:end="201:58"><expr pos:start="201:17" pos:end="201:57"><name pos:start="201:17" pos:end="201:20">opts</name> <operator pos:start="201:22" pos:end="201:22">=</operator> <call pos:start="201:24" pos:end="201:57"><name pos:start="201:24" pos:end="201:38">qemu_opts_parse</name><argument_list pos:start="201:39" pos:end="201:57">(<argument pos:start="201:40" pos:end="201:48"><expr pos:start="201:40" pos:end="201:48"><name pos:start="201:40" pos:end="201:48">opts_list</name></expr></argument>, <argument pos:start="201:51" pos:end="201:53"><expr pos:start="201:51" pos:end="201:53"><name pos:start="201:51" pos:end="201:53">buf</name></expr></argument>, <argument pos:start="201:56" pos:end="201:56"><expr pos:start="201:56" pos:end="201:56"><literal type="number" pos:start="201:56" pos:end="201:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="203:17" pos:end="207:17"><if pos:start="203:17" pos:end="207:17">if <condition pos:start="203:20" pos:end="203:26">(<expr pos:start="203:21" pos:end="203:25"><operator pos:start="203:21" pos:end="203:21">!</operator><name pos:start="203:22" pos:end="203:25">opts</name></expr>)</condition> <block pos:start="203:28" pos:end="207:17">{<block_content pos:start="205:21" pos:end="205:30">

                    <goto pos:start="205:21" pos:end="205:30">goto <name pos:start="205:26" pos:end="205:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="209:17" pos:end="209:48"><expr pos:start="209:17" pos:end="209:47"><call pos:start="209:17" pos:end="209:47"><name pos:start="209:17" pos:end="209:34">qemu_opts_to_qdict</name><argument_list pos:start="209:35" pos:end="209:47">(<argument pos:start="209:36" pos:end="209:39"><expr pos:start="209:36" pos:end="209:39"><name pos:start="209:36" pos:end="209:39">opts</name></expr></argument>, <argument pos:start="209:42" pos:end="209:46"><expr pos:start="209:42" pos:end="209:46"><name pos:start="209:42" pos:end="209:46">qdict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="211:17" pos:end="211:36"><expr pos:start="211:17" pos:end="211:35"><call pos:start="211:17" pos:end="211:35"><name pos:start="211:17" pos:end="211:29">qemu_opts_del</name><argument_list pos:start="211:30" pos:end="211:35">(<argument pos:start="211:31" pos:end="211:34"><expr pos:start="211:31" pos:end="211:34"><name pos:start="211:31" pos:end="211:34">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="215:13" pos:end="215:18">break;</break>

        <case pos:start="217:9" pos:end="217:17">case <expr pos:start="217:14" pos:end="217:16"><literal type="char" pos:start="217:14" pos:end="217:16">'/'</literal></expr>:</case>

            <block pos:start="219:13" pos:end="371:13">{<block_content pos:start="221:17" pos:end="369:62">

                <decl_stmt pos:start="221:17" pos:end="221:40"><decl pos:start="221:17" pos:end="221:25"><type pos:start="221:17" pos:end="221:19"><name pos:start="221:17" pos:end="221:19">int</name></type> <name pos:start="221:21" pos:end="221:25">count</name></decl>, <decl pos:start="221:28" pos:end="221:33"><type ref="prev" pos:start="221:17" pos:end="221:19"/><name pos:start="221:28" pos:end="221:33">format</name></decl>, <decl pos:start="221:36" pos:end="221:39"><type ref="prev" pos:start="221:17" pos:end="221:19"/><name pos:start="221:36" pos:end="221:39">size</name></decl>;</decl_stmt>



                <while pos:start="225:17" pos:end="227:24">while <condition pos:start="225:23" pos:end="225:40">(<expr pos:start="225:24" pos:end="225:39"><call pos:start="225:24" pos:end="225:39"><name pos:start="225:24" pos:end="225:35">qemu_isspace</name><argument_list pos:start="225:36" pos:end="225:39">(<argument pos:start="225:37" pos:end="225:38"><expr pos:start="225:37" pos:end="225:38"><operator pos:start="225:37" pos:end="225:37">*</operator><name pos:start="225:38" pos:end="225:38">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="227:21" pos:end="227:24"><block_content pos:start="227:21" pos:end="227:24">

                    <expr_stmt pos:start="227:21" pos:end="227:24"><expr pos:start="227:21" pos:end="227:23"><name pos:start="227:21" pos:end="227:21">p</name><operator pos:start="227:22" pos:end="227:23">++</operator></expr>;</expr_stmt></block_content></block></while>

                <if_stmt pos:start="229:17" pos:end="363:17"><if pos:start="229:17" pos:end="347:17">if <condition pos:start="229:20" pos:end="229:30">(<expr pos:start="229:21" pos:end="229:29"><operator pos:start="229:21" pos:end="229:21">*</operator><name pos:start="229:22" pos:end="229:22">p</name> <operator pos:start="229:24" pos:end="229:25">==</operator> <literal type="char" pos:start="229:27" pos:end="229:29">'/'</literal></expr>)</condition> <block pos:start="229:32" pos:end="347:17">{<block_content pos:start="233:21" pos:end="345:48">

                    <comment type="block" pos:start="231:21" pos:end="231:38">/* format found */</comment>

                    <expr_stmt pos:start="233:21" pos:end="233:24"><expr pos:start="233:21" pos:end="233:23"><name pos:start="233:21" pos:end="233:21">p</name><operator pos:start="233:22" pos:end="233:23">++</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="235:21" pos:end="235:30"><expr pos:start="235:21" pos:end="235:29"><name pos:start="235:21" pos:end="235:25">count</name> <operator pos:start="235:27" pos:end="235:27">=</operator> <literal type="number" pos:start="235:29" pos:end="235:29">1</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="237:21" pos:end="249:21"><if pos:start="237:21" pos:end="249:21">if <condition pos:start="237:24" pos:end="237:41">(<expr pos:start="237:25" pos:end="237:40"><call pos:start="237:25" pos:end="237:40"><name pos:start="237:25" pos:end="237:36">qemu_isdigit</name><argument_list pos:start="237:37" pos:end="237:40">(<argument pos:start="237:38" pos:end="237:39"><expr pos:start="237:38" pos:end="237:39"><operator pos:start="237:38" pos:end="237:38">*</operator><name pos:start="237:39" pos:end="237:39">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="237:43" pos:end="249:21">{<block_content pos:start="239:25" pos:end="247:25">

                        <expr_stmt pos:start="239:25" pos:end="239:34"><expr pos:start="239:25" pos:end="239:33"><name pos:start="239:25" pos:end="239:29">count</name> <operator pos:start="239:31" pos:end="239:31">=</operator> <literal type="number" pos:start="239:33" pos:end="239:33">0</literal></expr>;</expr_stmt>

                        <while pos:start="241:25" pos:end="247:25">while <condition pos:start="241:31" pos:end="241:48">(<expr pos:start="241:32" pos:end="241:47"><call pos:start="241:32" pos:end="241:47"><name pos:start="241:32" pos:end="241:43">qemu_isdigit</name><argument_list pos:start="241:44" pos:end="241:47">(<argument pos:start="241:45" pos:end="241:46"><expr pos:start="241:45" pos:end="241:46"><operator pos:start="241:45" pos:end="241:45">*</operator><name pos:start="241:46" pos:end="241:46">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="241:50" pos:end="247:25">{<block_content pos:start="243:29" pos:end="245:32">

                            <expr_stmt pos:start="243:29" pos:end="243:60"><expr pos:start="243:29" pos:end="243:59"><name pos:start="243:29" pos:end="243:33">count</name> <operator pos:start="243:35" pos:end="243:35">=</operator> <name pos:start="243:37" pos:end="243:41">count</name> <operator pos:start="243:43" pos:end="243:43">*</operator> <literal type="number" pos:start="243:45" pos:end="243:48">10</literal> <operator pos:start="243:48" pos:end="243:48">+</operator> <operator pos:start="243:50" pos:end="243:50">(</operator><operator pos:start="243:51" pos:end="243:51">*</operator><name pos:start="243:52" pos:end="243:52">p</name> <operator pos:start="243:54" pos:end="243:54">-</operator> <literal type="char" pos:start="243:56" pos:end="243:58">'0'</literal><operator pos:start="243:59" pos:end="243:59">)</operator></expr>;</expr_stmt>

                            <expr_stmt pos:start="245:29" pos:end="245:32"><expr pos:start="245:29" pos:end="245:31"><name pos:start="245:29" pos:end="245:29">p</name><operator pos:start="245:30" pos:end="245:31">++</operator></expr>;</expr_stmt>

                        </block_content>}</block></while>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="251:21" pos:end="251:30"><expr pos:start="251:21" pos:end="251:29"><name pos:start="251:21" pos:end="251:24">size</name> <operator pos:start="251:26" pos:end="251:26">=</operator> <operator pos:start="251:28" pos:end="251:28">-</operator><literal type="number" pos:start="251:29" pos:end="251:29">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="253:21" pos:end="253:32"><expr pos:start="253:21" pos:end="253:31"><name pos:start="253:21" pos:end="253:26">format</name> <operator pos:start="253:28" pos:end="253:28">=</operator> <operator pos:start="253:30" pos:end="253:30">-</operator><literal type="number" pos:start="253:31" pos:end="253:31">1</literal></expr>;</expr_stmt>

                    <for pos:start="255:21" pos:end="315:21">for<control pos:start="255:24" pos:end="255:27">(<init pos:start="255:25" pos:end="255:25">;</init><condition pos:start="255:26" pos:end="255:26">;</condition><incr/>)</control> <block pos:start="255:29" pos:end="315:21">{<block_content pos:start="257:25" pos:end="313:25">

                        <switch pos:start="257:25" pos:end="313:25">switch<condition pos:start="257:31" pos:end="257:34">(<expr pos:start="257:32" pos:end="257:33"><operator pos:start="257:32" pos:end="257:32">*</operator><name pos:start="257:33" pos:end="257:33">p</name></expr>)</condition> <block pos:start="257:36" pos:end="313:25">{<block_content pos:start="259:25" pos:end="311:38">

                        <case pos:start="259:25" pos:end="259:33">case <expr pos:start="259:30" pos:end="259:32"><literal type="char" pos:start="259:30" pos:end="259:32">'o'</literal></expr>:</case>

                        <case pos:start="261:25" pos:end="261:33">case <expr pos:start="261:30" pos:end="261:32"><literal type="char" pos:start="261:30" pos:end="261:32">'d'</literal></expr>:</case>

                        <case pos:start="263:25" pos:end="263:33">case <expr pos:start="263:30" pos:end="263:32"><literal type="char" pos:start="263:30" pos:end="263:32">'u'</literal></expr>:</case>

                        <case pos:start="265:25" pos:end="265:33">case <expr pos:start="265:30" pos:end="265:32"><literal type="char" pos:start="265:30" pos:end="265:32">'x'</literal></expr>:</case>

                        <case pos:start="267:25" pos:end="267:33">case <expr pos:start="267:30" pos:end="267:32"><literal type="char" pos:start="267:30" pos:end="267:32">'i'</literal></expr>:</case>

                        <case pos:start="269:25" pos:end="269:33">case <expr pos:start="269:30" pos:end="269:32"><literal type="char" pos:start="269:30" pos:end="269:32">'c'</literal></expr>:</case>

                            <expr_stmt pos:start="271:29" pos:end="271:42"><expr pos:start="271:29" pos:end="271:41"><name pos:start="271:29" pos:end="271:34">format</name> <operator pos:start="271:36" pos:end="271:36">=</operator> <operator pos:start="271:38" pos:end="271:38">*</operator><name pos:start="271:39" pos:end="271:39">p</name><operator pos:start="271:40" pos:end="271:41">++</operator></expr>;</expr_stmt>

                            <break pos:start="273:29" pos:end="273:34">break;</break>

                        <case pos:start="275:25" pos:end="275:33">case <expr pos:start="275:30" pos:end="275:32"><literal type="char" pos:start="275:30" pos:end="275:32">'b'</literal></expr>:</case>

                            <expr_stmt pos:start="277:29" pos:end="277:37"><expr pos:start="277:29" pos:end="277:36"><name pos:start="277:29" pos:end="277:32">size</name> <operator pos:start="277:34" pos:end="277:34">=</operator> <literal type="number" pos:start="277:36" pos:end="277:36">1</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="279:29" pos:end="279:32"><expr pos:start="279:29" pos:end="279:31"><name pos:start="279:29" pos:end="279:29">p</name><operator pos:start="279:30" pos:end="279:31">++</operator></expr>;</expr_stmt>

                            <break pos:start="281:29" pos:end="281:34">break;</break>

                        <case pos:start="283:25" pos:end="283:33">case <expr pos:start="283:30" pos:end="283:32"><literal type="char" pos:start="283:30" pos:end="283:32">'h'</literal></expr>:</case>

                            <expr_stmt pos:start="285:29" pos:end="285:37"><expr pos:start="285:29" pos:end="285:36"><name pos:start="285:29" pos:end="285:32">size</name> <operator pos:start="285:34" pos:end="285:34">=</operator> <literal type="number" pos:start="285:36" pos:end="285:36">2</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="287:29" pos:end="287:32"><expr pos:start="287:29" pos:end="287:31"><name pos:start="287:29" pos:end="287:29">p</name><operator pos:start="287:30" pos:end="287:31">++</operator></expr>;</expr_stmt>

                            <break pos:start="289:29" pos:end="289:34">break;</break>

                        <case pos:start="291:25" pos:end="291:33">case <expr pos:start="291:30" pos:end="291:32"><literal type="char" pos:start="291:30" pos:end="291:32">'w'</literal></expr>:</case>

                            <expr_stmt pos:start="293:29" pos:end="293:37"><expr pos:start="293:29" pos:end="293:36"><name pos:start="293:29" pos:end="293:32">size</name> <operator pos:start="293:34" pos:end="293:34">=</operator> <literal type="number" pos:start="293:36" pos:end="293:36">4</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="295:29" pos:end="295:32"><expr pos:start="295:29" pos:end="295:31"><name pos:start="295:29" pos:end="295:29">p</name><operator pos:start="295:30" pos:end="295:31">++</operator></expr>;</expr_stmt>

                            <break pos:start="297:29" pos:end="297:34">break;</break>

                        <case pos:start="299:25" pos:end="299:33">case <expr pos:start="299:30" pos:end="299:32"><literal type="char" pos:start="299:30" pos:end="299:32">'g'</literal></expr>:</case>

                        <case pos:start="301:25" pos:end="301:33">case <expr pos:start="301:30" pos:end="301:32"><literal type="char" pos:start="301:30" pos:end="301:32">'L'</literal></expr>:</case>

                            <expr_stmt pos:start="303:29" pos:end="303:37"><expr pos:start="303:29" pos:end="303:36"><name pos:start="303:29" pos:end="303:32">size</name> <operator pos:start="303:34" pos:end="303:34">=</operator> <literal type="number" pos:start="303:36" pos:end="303:36">8</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="305:29" pos:end="305:32"><expr pos:start="305:29" pos:end="305:31"><name pos:start="305:29" pos:end="305:29">p</name><operator pos:start="305:30" pos:end="305:31">++</operator></expr>;</expr_stmt>

                            <break pos:start="307:29" pos:end="307:34">break;</break>

                        <default pos:start="309:25" pos:end="309:32">default:</default>

                            <goto pos:start="311:29" pos:end="311:38">goto <name pos:start="311:34" pos:end="311:37">next</name>;</goto>

                        </block_content>}</block></switch>

                    </block_content>}</block></for>

                <label pos:start="317:17" pos:end="317:21"><name pos:start="317:17" pos:end="317:20">next</name>:</label>

                    <if_stmt pos:start="319:21" pos:end="327:21"><if pos:start="319:21" pos:end="327:21">if <condition pos:start="319:24" pos:end="319:56">(<expr pos:start="319:25" pos:end="319:55"><operator pos:start="319:25" pos:end="319:25">*</operator><name pos:start="319:26" pos:end="319:26">p</name> <operator pos:start="319:28" pos:end="319:29">!=</operator> <literal type="char" pos:start="319:31" pos:end="319:34">'\0'</literal> <operator pos:start="319:36" pos:end="319:37">&amp;&amp;</operator> <operator pos:start="319:39" pos:end="319:39">!</operator><call pos:start="319:40" pos:end="319:55"><name pos:start="319:40" pos:end="319:51">qemu_isspace</name><argument_list pos:start="319:52" pos:end="319:55">(<argument pos:start="319:53" pos:end="319:54"><expr pos:start="319:53" pos:end="319:54"><operator pos:start="319:53" pos:end="319:53">*</operator><name pos:start="319:54" pos:end="319:54">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="319:58" pos:end="327:21">{<block_content pos:start="321:25" pos:end="325:34">

                        <expr_stmt pos:start="321:25" pos:end="323:43"><expr pos:start="321:25" pos:end="323:42"><call pos:start="321:25" pos:end="323:42"><name pos:start="321:25" pos:end="321:38">monitor_printf</name><argument_list pos:start="321:39" pos:end="323:42">(<argument pos:start="321:40" pos:end="321:42"><expr pos:start="321:40" pos:end="321:42"><name pos:start="321:40" pos:end="321:42">mon</name></expr></argument>, <argument pos:start="321:45" pos:end="321:76"><expr pos:start="321:45" pos:end="321:76"><literal type="string" pos:start="321:45" pos:end="321:76">"invalid char in format: '%c'\n"</literal></expr></argument>,

                                       <argument pos:start="323:40" pos:end="323:41"><expr pos:start="323:40" pos:end="323:41"><operator pos:start="323:40" pos:end="323:40">*</operator><name pos:start="323:41" pos:end="323:41">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <goto pos:start="325:25" pos:end="325:34">goto <name pos:start="325:30" pos:end="325:33">fail</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <if_stmt pos:start="329:21" pos:end="331:52"><if pos:start="329:21" pos:end="331:52">if <condition pos:start="329:24" pos:end="329:35">(<expr pos:start="329:25" pos:end="329:34"><name pos:start="329:25" pos:end="329:30">format</name> <operator pos:start="329:32" pos:end="329:32">&lt;</operator> <literal type="number" pos:start="329:34" pos:end="329:34">0</literal></expr>)</condition><block type="pseudo" pos:start="331:25" pos:end="331:52"><block_content pos:start="331:25" pos:end="331:52">

                        <expr_stmt pos:start="331:25" pos:end="331:52"><expr pos:start="331:25" pos:end="331:51"><name pos:start="331:25" pos:end="331:30">format</name> <operator pos:start="331:32" pos:end="331:32">=</operator> <name pos:start="331:34" pos:end="331:51">default_fmt_format</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt pos:start="333:21" pos:end="343:21"><if pos:start="333:21" pos:end="343:21">if <condition pos:start="333:24" pos:end="333:38">(<expr pos:start="333:25" pos:end="333:37"><name pos:start="333:25" pos:end="333:30">format</name> <operator pos:start="333:32" pos:end="333:33">!=</operator> <literal type="char" pos:start="333:35" pos:end="333:37">'i'</literal></expr>)</condition> <block pos:start="333:40" pos:end="343:21">{<block_content pos:start="337:25" pos:end="341:48">

                        <comment type="block" pos:start="335:25" pos:end="335:77">/* for 'i', not specifying a size gives -1 as size */</comment>

                        <if_stmt pos:start="337:25" pos:end="339:52"><if pos:start="337:25" pos:end="339:52">if <condition pos:start="337:28" pos:end="337:37">(<expr pos:start="337:29" pos:end="337:36"><name pos:start="337:29" pos:end="337:32">size</name> <operator pos:start="337:34" pos:end="337:34">&lt;</operator> <literal type="number" pos:start="337:36" pos:end="337:36">0</literal></expr>)</condition><block type="pseudo" pos:start="339:29" pos:end="339:52"><block_content pos:start="339:29" pos:end="339:52">

                            <expr_stmt pos:start="339:29" pos:end="339:52"><expr pos:start="339:29" pos:end="339:51"><name pos:start="339:29" pos:end="339:32">size</name> <operator pos:start="339:34" pos:end="339:34">=</operator> <name pos:start="339:36" pos:end="339:51">default_fmt_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="341:25" pos:end="341:48"><expr pos:start="341:25" pos:end="341:47"><name pos:start="341:25" pos:end="341:40">default_fmt_size</name> <operator pos:start="341:42" pos:end="341:42">=</operator> <name pos:start="341:44" pos:end="341:47">size</name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="345:21" pos:end="345:48"><expr pos:start="345:21" pos:end="345:47"><name pos:start="345:21" pos:end="345:38">default_fmt_format</name> <operator pos:start="345:40" pos:end="345:40">=</operator> <name pos:start="345:42" pos:end="345:47">format</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="347:19" pos:end="363:17">else <block pos:start="347:24" pos:end="363:17">{<block_content pos:start="349:21" pos:end="361:21">

                    <expr_stmt pos:start="349:21" pos:end="349:30"><expr pos:start="349:21" pos:end="349:29"><name pos:start="349:21" pos:end="349:25">count</name> <operator pos:start="349:27" pos:end="349:27">=</operator> <literal type="number" pos:start="349:29" pos:end="349:29">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="351:21" pos:end="351:48"><expr pos:start="351:21" pos:end="351:47"><name pos:start="351:21" pos:end="351:26">format</name> <operator pos:start="351:28" pos:end="351:28">=</operator> <name pos:start="351:30" pos:end="351:47">default_fmt_format</name></expr>;</expr_stmt>

                    <if_stmt pos:start="353:21" pos:end="361:21"><if pos:start="353:21" pos:end="357:21">if <condition pos:start="353:24" pos:end="353:38">(<expr pos:start="353:25" pos:end="353:37"><name pos:start="353:25" pos:end="353:30">format</name> <operator pos:start="353:32" pos:end="353:33">!=</operator> <literal type="char" pos:start="353:35" pos:end="353:37">'i'</literal></expr>)</condition> <block pos:start="353:40" pos:end="357:21">{<block_content pos:start="355:25" pos:end="355:48">

                        <expr_stmt pos:start="355:25" pos:end="355:48"><expr pos:start="355:25" pos:end="355:47"><name pos:start="355:25" pos:end="355:28">size</name> <operator pos:start="355:30" pos:end="355:30">=</operator> <name pos:start="355:32" pos:end="355:47">default_fmt_size</name></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="357:23" pos:end="361:21">else <block pos:start="357:28" pos:end="361:21">{<block_content pos:start="359:25" pos:end="359:34">

                        <expr_stmt pos:start="359:25" pos:end="359:34"><expr pos:start="359:25" pos:end="359:33"><name pos:start="359:25" pos:end="359:28">size</name> <operator pos:start="359:30" pos:end="359:30">=</operator> <operator pos:start="359:32" pos:end="359:32">-</operator><literal type="number" pos:start="359:33" pos:end="359:33">1</literal></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="365:17" pos:end="365:64"><expr pos:start="365:17" pos:end="365:63"><call pos:start="365:17" pos:end="365:63"><name pos:start="365:17" pos:end="365:25">qdict_put</name><argument_list pos:start="365:26" pos:end="365:63">(<argument pos:start="365:27" pos:end="365:31"><expr pos:start="365:27" pos:end="365:31"><name pos:start="365:27" pos:end="365:31">qdict</name></expr></argument>, <argument pos:start="365:34" pos:end="365:40"><expr pos:start="365:34" pos:end="365:40"><literal type="string" pos:start="365:34" pos:end="365:40">"count"</literal></expr></argument>, <argument pos:start="365:43" pos:end="365:62"><expr pos:start="365:43" pos:end="365:62"><call pos:start="365:43" pos:end="365:62"><name pos:start="365:43" pos:end="365:55">qint_from_int</name><argument_list pos:start="365:56" pos:end="365:62">(<argument pos:start="365:57" pos:end="365:61"><expr pos:start="365:57" pos:end="365:61"><name pos:start="365:57" pos:end="365:61">count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="367:17" pos:end="367:66"><expr pos:start="367:17" pos:end="367:65"><call pos:start="367:17" pos:end="367:65"><name pos:start="367:17" pos:end="367:25">qdict_put</name><argument_list pos:start="367:26" pos:end="367:65">(<argument pos:start="367:27" pos:end="367:31"><expr pos:start="367:27" pos:end="367:31"><name pos:start="367:27" pos:end="367:31">qdict</name></expr></argument>, <argument pos:start="367:34" pos:end="367:41"><expr pos:start="367:34" pos:end="367:41"><literal type="string" pos:start="367:34" pos:end="367:41">"format"</literal></expr></argument>, <argument pos:start="367:44" pos:end="367:64"><expr pos:start="367:44" pos:end="367:64"><call pos:start="367:44" pos:end="367:64"><name pos:start="367:44" pos:end="367:56">qint_from_int</name><argument_list pos:start="367:57" pos:end="367:64">(<argument pos:start="367:58" pos:end="367:63"><expr pos:start="367:58" pos:end="367:63"><name pos:start="367:58" pos:end="367:63">format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="369:17" pos:end="369:62"><expr pos:start="369:17" pos:end="369:61"><call pos:start="369:17" pos:end="369:61"><name pos:start="369:17" pos:end="369:25">qdict_put</name><argument_list pos:start="369:26" pos:end="369:61">(<argument pos:start="369:27" pos:end="369:31"><expr pos:start="369:27" pos:end="369:31"><name pos:start="369:27" pos:end="369:31">qdict</name></expr></argument>, <argument pos:start="369:34" pos:end="369:39"><expr pos:start="369:34" pos:end="369:39"><literal type="string" pos:start="369:34" pos:end="369:39">"size"</literal></expr></argument>, <argument pos:start="369:42" pos:end="369:60"><expr pos:start="369:42" pos:end="369:60"><call pos:start="369:42" pos:end="369:60"><name pos:start="369:42" pos:end="369:54">qint_from_int</name><argument_list pos:start="369:55" pos:end="369:60">(<argument pos:start="369:56" pos:end="369:59"><expr pos:start="369:56" pos:end="369:59"><name pos:start="369:56" pos:end="369:59">size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="373:13" pos:end="373:18">break;</break>

        <case pos:start="375:9" pos:end="375:17">case <expr pos:start="375:14" pos:end="375:16"><literal type="char" pos:start="375:14" pos:end="375:16">'i'</literal></expr>:</case>

        <case pos:start="377:9" pos:end="377:17">case <expr pos:start="377:14" pos:end="377:16"><literal type="char" pos:start="377:14" pos:end="377:16">'l'</literal></expr>:</case>

        <case pos:start="379:9" pos:end="379:17">case <expr pos:start="379:14" pos:end="379:16"><literal type="char" pos:start="379:14" pos:end="379:16">'M'</literal></expr>:</case>

            <block pos:start="381:13" pos:end="457:13">{<block_content pos:start="383:17" pos:end="455:58">

                <decl_stmt pos:start="383:17" pos:end="383:28"><decl pos:start="383:17" pos:end="383:27"><type pos:start="383:17" pos:end="383:23"><name pos:start="383:17" pos:end="383:23">int64_t</name></type> <name pos:start="383:25" pos:end="383:27">val</name></decl>;</decl_stmt>



                <while pos:start="387:17" pos:end="389:24">while <condition pos:start="387:23" pos:end="387:40">(<expr pos:start="387:24" pos:end="387:39"><call pos:start="387:24" pos:end="387:39"><name pos:start="387:24" pos:end="387:35">qemu_isspace</name><argument_list pos:start="387:36" pos:end="387:39">(<argument pos:start="387:37" pos:end="387:38"><expr pos:start="387:37" pos:end="387:38"><operator pos:start="387:37" pos:end="387:37">*</operator><name pos:start="387:38" pos:end="387:38">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="389:21" pos:end="389:24"><block_content pos:start="389:21" pos:end="389:24">

                    <expr_stmt pos:start="389:21" pos:end="389:24"><expr pos:start="389:21" pos:end="389:23"><name pos:start="389:21" pos:end="389:21">p</name><operator pos:start="389:22" pos:end="389:23">++</operator></expr>;</expr_stmt></block_content></block></while>

                <if_stmt pos:start="391:17" pos:end="425:17"><if pos:start="391:17" pos:end="425:17">if <condition pos:start="391:20" pos:end="391:55">(<expr pos:start="391:21" pos:end="391:54"><operator pos:start="391:21" pos:end="391:21">*</operator><name pos:start="391:22" pos:end="391:28">typestr</name> <operator pos:start="391:30" pos:end="391:31">==</operator> <literal type="char" pos:start="391:33" pos:end="391:35">'?'</literal> <operator pos:start="391:37" pos:end="391:38">||</operator> <operator pos:start="391:40" pos:end="391:40">*</operator><name pos:start="391:41" pos:end="391:47">typestr</name> <operator pos:start="391:49" pos:end="391:50">==</operator> <literal type="char" pos:start="391:52" pos:end="391:54">'.'</literal></expr>)</condition> <block pos:start="391:57" pos:end="425:17">{<block_content pos:start="393:21" pos:end="423:30">

                    <if_stmt pos:start="393:21" pos:end="421:21"><if pos:start="393:21" pos:end="403:21">if <condition pos:start="393:24" pos:end="393:40">(<expr pos:start="393:25" pos:end="393:39"><operator pos:start="393:25" pos:end="393:25">*</operator><name pos:start="393:26" pos:end="393:32">typestr</name> <operator pos:start="393:34" pos:end="393:35">==</operator> <literal type="char" pos:start="393:37" pos:end="393:39">'?'</literal></expr>)</condition> <block pos:start="393:42" pos:end="403:21">{<block_content pos:start="395:25" pos:end="401:25">

                        <if_stmt pos:start="395:25" pos:end="401:25"><if pos:start="395:25" pos:end="401:25">if <condition pos:start="395:28" pos:end="395:39">(<expr pos:start="395:29" pos:end="395:38"><operator pos:start="395:29" pos:end="395:29">*</operator><name pos:start="395:30" pos:end="395:30">p</name> <operator pos:start="395:32" pos:end="395:33">==</operator> <literal type="char" pos:start="395:35" pos:end="395:38">'\0'</literal></expr>)</condition> <block pos:start="395:41" pos:end="401:25">{<block_content pos:start="397:29" pos:end="399:34">

                            <expr_stmt pos:start="397:29" pos:end="397:38"><expr pos:start="397:29" pos:end="397:37"><name pos:start="397:29" pos:end="397:35">typestr</name><operator pos:start="397:36" pos:end="397:37">++</operator></expr>;</expr_stmt>

                            <break pos:start="399:29" pos:end="399:34">break;</break>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></if> <else pos:start="403:23" pos:end="421:21">else <block pos:start="403:28" pos:end="421:21">{<block_content pos:start="405:25" pos:end="419:25">

                        <if_stmt pos:start="405:25" pos:end="419:25"><if pos:start="405:25" pos:end="413:25">if <condition pos:start="405:28" pos:end="405:38">(<expr pos:start="405:29" pos:end="405:37"><operator pos:start="405:29" pos:end="405:29">*</operator><name pos:start="405:30" pos:end="405:30">p</name> <operator pos:start="405:32" pos:end="405:33">==</operator> <literal type="char" pos:start="405:35" pos:end="405:37">'.'</literal></expr>)</condition> <block pos:start="405:40" pos:end="413:25">{<block_content pos:start="407:29" pos:end="411:36">

                            <expr_stmt pos:start="407:29" pos:end="407:32"><expr pos:start="407:29" pos:end="407:31"><name pos:start="407:29" pos:end="407:29">p</name><operator pos:start="407:30" pos:end="407:31">++</operator></expr>;</expr_stmt>

                            <while pos:start="409:29" pos:end="411:36">while <condition pos:start="409:35" pos:end="409:52">(<expr pos:start="409:36" pos:end="409:51"><call pos:start="409:36" pos:end="409:51"><name pos:start="409:36" pos:end="409:47">qemu_isspace</name><argument_list pos:start="409:48" pos:end="409:51">(<argument pos:start="409:49" pos:end="409:50"><expr pos:start="409:49" pos:end="409:50"><operator pos:start="409:49" pos:end="409:49">*</operator><name pos:start="409:50" pos:end="409:50">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="411:33" pos:end="411:36"><block_content pos:start="411:33" pos:end="411:36">

                                <expr_stmt pos:start="411:33" pos:end="411:36"><expr pos:start="411:33" pos:end="411:35"><name pos:start="411:33" pos:end="411:33">p</name><operator pos:start="411:34" pos:end="411:35">++</operator></expr>;</expr_stmt></block_content></block></while>

                        </block_content>}</block></if> <else pos:start="413:27" pos:end="419:25">else <block pos:start="413:32" pos:end="419:25">{<block_content pos:start="415:29" pos:end="417:34">

                            <expr_stmt pos:start="415:29" pos:end="415:38"><expr pos:start="415:29" pos:end="415:37"><name pos:start="415:29" pos:end="415:35">typestr</name><operator pos:start="415:36" pos:end="415:37">++</operator></expr>;</expr_stmt>

                            <break pos:start="417:29" pos:end="417:34">break;</break>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="423:21" pos:end="423:30"><expr pos:start="423:21" pos:end="423:29"><name pos:start="423:21" pos:end="423:27">typestr</name><operator pos:start="423:28" pos:end="423:29">++</operator></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="427:17" pos:end="429:30"><if pos:start="427:17" pos:end="429:30">if <condition pos:start="427:20" pos:end="427:44">(<expr pos:start="427:21" pos:end="427:43"><call pos:start="427:21" pos:end="427:43"><name pos:start="427:21" pos:end="427:28">get_expr</name><argument_list pos:start="427:29" pos:end="427:43">(<argument pos:start="427:30" pos:end="427:32"><expr pos:start="427:30" pos:end="427:32"><name pos:start="427:30" pos:end="427:32">mon</name></expr></argument>, <argument pos:start="427:35" pos:end="427:38"><expr pos:start="427:35" pos:end="427:38"><operator pos:start="427:35" pos:end="427:35">&amp;</operator><name pos:start="427:36" pos:end="427:38">val</name></expr></argument>, <argument pos:start="427:41" pos:end="427:42"><expr pos:start="427:41" pos:end="427:42"><operator pos:start="427:41" pos:end="427:41">&amp;</operator><name pos:start="427:42" pos:end="427:42">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="429:21" pos:end="429:30"><block_content pos:start="429:21" pos:end="429:30">

                    <goto pos:start="429:21" pos:end="429:30">goto <name pos:start="429:26" pos:end="429:29">fail</name>;</goto></block_content></block></if></if_stmt>

                <comment type="block" pos:start="431:17" pos:end="431:57">/* Check if 'i' is greater than 32-bit */</comment>

                <if_stmt pos:start="433:17" pos:end="453:17"><if pos:start="433:17" pos:end="441:17">if <condition pos:start="433:20" pos:end="433:61">(<expr pos:start="433:21" pos:end="433:60"><operator pos:start="433:21" pos:end="433:21">(</operator><name pos:start="433:22" pos:end="433:22">c</name> <operator pos:start="433:24" pos:end="433:25">==</operator> <literal type="char" pos:start="433:27" pos:end="433:29">'i'</literal><operator pos:start="433:30" pos:end="433:30">)</operator> <operator pos:start="433:32" pos:end="433:33">&amp;&amp;</operator> <operator pos:start="433:35" pos:end="433:35">(</operator><operator pos:start="433:36" pos:end="433:36">(</operator><name pos:start="433:37" pos:end="433:39">val</name> <operator pos:start="433:41" pos:end="433:42">&gt;&gt;</operator> <literal type="number" pos:start="433:44" pos:end="433:45">32</literal><operator pos:start="433:46" pos:end="433:46">)</operator> <operator pos:start="433:48" pos:end="433:48">&amp;</operator> <literal type="number" pos:start="433:50" pos:end="433:59">0xffffffff</literal><operator pos:start="433:60" pos:end="433:60">)</operator></expr>)</condition> <block pos:start="433:63" pos:end="441:17">{<block_content pos:start="435:21" pos:end="439:30">

                    <expr_stmt pos:start="435:21" pos:end="435:72"><expr pos:start="435:21" pos:end="435:71"><call pos:start="435:21" pos:end="435:71"><name pos:start="435:21" pos:end="435:34">monitor_printf</name><argument_list pos:start="435:35" pos:end="435:71">(<argument pos:start="435:36" pos:end="435:38"><expr pos:start="435:36" pos:end="435:38"><name pos:start="435:36" pos:end="435:38">mon</name></expr></argument>, <argument pos:start="435:41" pos:end="435:61"><expr pos:start="435:41" pos:end="435:61"><literal type="string" pos:start="435:41" pos:end="435:61">"\'%s\' has failed: "</literal></expr></argument>, <argument pos:start="435:64" pos:end="435:70"><expr pos:start="435:64" pos:end="435:70"><name pos:start="435:64" pos:end="435:70">cmdname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="437:21" pos:end="437:74"><expr pos:start="437:21" pos:end="437:73"><call pos:start="437:21" pos:end="437:73"><name pos:start="437:21" pos:end="437:34">monitor_printf</name><argument_list pos:start="437:35" pos:end="437:73">(<argument pos:start="437:36" pos:end="437:38"><expr pos:start="437:36" pos:end="437:38"><name pos:start="437:36" pos:end="437:38">mon</name></expr></argument>, <argument pos:start="437:41" pos:end="437:72"><expr pos:start="437:41" pos:end="437:72"><literal type="string" pos:start="437:41" pos:end="437:72">"integer is for 32-bit values\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="439:21" pos:end="439:30">goto <name pos:start="439:26" pos:end="439:29">fail</name>;</goto>

                </block_content>}</block></if> <if type="elseif" pos:start="441:19" pos:end="453:17">else if <condition pos:start="441:27" pos:end="441:36">(<expr pos:start="441:28" pos:end="441:35"><name pos:start="441:28" pos:end="441:28">c</name> <operator pos:start="441:30" pos:end="441:31">==</operator> <literal type="char" pos:start="441:33" pos:end="441:35">'M'</literal></expr>)</condition> <block pos:start="441:38" pos:end="453:17">{<block_content pos:start="443:21" pos:end="451:31">

                    <if_stmt pos:start="443:21" pos:end="449:21"><if pos:start="443:21" pos:end="449:21">if <condition pos:start="443:24" pos:end="443:32">(<expr pos:start="443:25" pos:end="443:31"><name pos:start="443:25" pos:end="443:27">val</name> <operator pos:start="443:29" pos:end="443:29">&lt;</operator> <literal type="number" pos:start="443:31" pos:end="443:31">0</literal></expr>)</condition> <block pos:start="443:34" pos:end="449:21">{<block_content pos:start="445:25" pos:end="447:34">

                        <expr_stmt pos:start="445:25" pos:end="445:72"><expr pos:start="445:25" pos:end="445:71"><call pos:start="445:25" pos:end="445:71"><name pos:start="445:25" pos:end="445:38">monitor_printf</name><argument_list pos:start="445:39" pos:end="445:71">(<argument pos:start="445:40" pos:end="445:42"><expr pos:start="445:40" pos:end="445:42"><name pos:start="445:40" pos:end="445:42">mon</name></expr></argument>, <argument pos:start="445:45" pos:end="445:70"><expr pos:start="445:45" pos:end="445:70"><literal type="string" pos:start="445:45" pos:end="445:70">"enter a positive value\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <goto pos:start="447:25" pos:end="447:34">goto <name pos:start="447:30" pos:end="447:33">fail</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="451:21" pos:end="451:31"><expr pos:start="451:21" pos:end="451:30"><name pos:start="451:21" pos:end="451:23">val</name> <operator pos:start="451:25" pos:end="451:27">&lt;&lt;=</operator> <literal type="number" pos:start="451:29" pos:end="451:30">20</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="455:17" pos:end="455:58"><expr pos:start="455:17" pos:end="455:57"><call pos:start="455:17" pos:end="455:57"><name pos:start="455:17" pos:end="455:25">qdict_put</name><argument_list pos:start="455:26" pos:end="455:57">(<argument pos:start="455:27" pos:end="455:31"><expr pos:start="455:27" pos:end="455:31"><name pos:start="455:27" pos:end="455:31">qdict</name></expr></argument>, <argument pos:start="455:34" pos:end="455:36"><expr pos:start="455:34" pos:end="455:36"><name pos:start="455:34" pos:end="455:36">key</name></expr></argument>, <argument pos:start="455:39" pos:end="455:56"><expr pos:start="455:39" pos:end="455:56"><call pos:start="455:39" pos:end="455:56"><name pos:start="455:39" pos:end="455:51">qint_from_int</name><argument_list pos:start="455:52" pos:end="455:56">(<argument pos:start="455:53" pos:end="455:55"><expr pos:start="455:53" pos:end="455:55"><name pos:start="455:53" pos:end="455:55">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="459:13" pos:end="459:18">break;</break>

        <case pos:start="461:9" pos:end="461:17">case <expr pos:start="461:14" pos:end="461:16"><literal type="char" pos:start="461:14" pos:end="461:16">'o'</literal></expr>:</case>

            <block pos:start="463:13" pos:end="503:13">{<block_content pos:start="465:17" pos:end="501:24">

                <decl_stmt pos:start="465:17" pos:end="465:28"><decl pos:start="465:17" pos:end="465:27"><type pos:start="465:17" pos:end="465:23"><name pos:start="465:17" pos:end="465:23">int64_t</name></type> <name pos:start="465:25" pos:end="465:27">val</name></decl>;</decl_stmt>

                <decl_stmt pos:start="467:17" pos:end="467:26"><decl pos:start="467:17" pos:end="467:25"><type pos:start="467:17" pos:end="467:22"><name pos:start="467:17" pos:end="467:20">char</name> <modifier pos:start="467:22" pos:end="467:22">*</modifier></type><name pos:start="467:23" pos:end="467:25">end</name></decl>;</decl_stmt>



                <while pos:start="471:17" pos:end="475:17">while <condition pos:start="471:23" pos:end="471:40">(<expr pos:start="471:24" pos:end="471:39"><call pos:start="471:24" pos:end="471:39"><name pos:start="471:24" pos:end="471:35">qemu_isspace</name><argument_list pos:start="471:36" pos:end="471:39">(<argument pos:start="471:37" pos:end="471:38"><expr pos:start="471:37" pos:end="471:38"><operator pos:start="471:37" pos:end="471:37">*</operator><name pos:start="471:38" pos:end="471:38">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="471:42" pos:end="475:17">{<block_content pos:start="473:21" pos:end="473:24">

                    <expr_stmt pos:start="473:21" pos:end="473:24"><expr pos:start="473:21" pos:end="473:23"><name pos:start="473:21" pos:end="473:21">p</name><operator pos:start="473:22" pos:end="473:23">++</operator></expr>;</expr_stmt>

                </block_content>}</block></while>

                <if_stmt pos:start="477:17" pos:end="487:17"><if pos:start="477:17" pos:end="487:17">if <condition pos:start="477:20" pos:end="477:36">(<expr pos:start="477:21" pos:end="477:35"><operator pos:start="477:21" pos:end="477:21">*</operator><name pos:start="477:22" pos:end="477:28">typestr</name> <operator pos:start="477:30" pos:end="477:31">==</operator> <literal type="char" pos:start="477:33" pos:end="477:35">'?'</literal></expr>)</condition> <block pos:start="477:38" pos:end="487:17">{<block_content pos:start="479:21" pos:end="485:21">

                    <expr_stmt pos:start="479:21" pos:end="479:30"><expr pos:start="479:21" pos:end="479:29"><name pos:start="479:21" pos:end="479:27">typestr</name><operator pos:start="479:28" pos:end="479:29">++</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="481:21" pos:end="485:21"><if pos:start="481:21" pos:end="485:21">if <condition pos:start="481:24" pos:end="481:35">(<expr pos:start="481:25" pos:end="481:34"><operator pos:start="481:25" pos:end="481:25">*</operator><name pos:start="481:26" pos:end="481:26">p</name> <operator pos:start="481:28" pos:end="481:29">==</operator> <literal type="char" pos:start="481:31" pos:end="481:34">'\0'</literal></expr>)</condition> <block pos:start="481:37" pos:end="485:21">{<block_content pos:start="483:25" pos:end="483:30">

                        <break pos:start="483:25" pos:end="483:30">break;</break>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="489:17" pos:end="489:39"><expr pos:start="489:17" pos:end="489:38"><name pos:start="489:17" pos:end="489:19">val</name> <operator pos:start="489:21" pos:end="489:21">=</operator> <call pos:start="489:23" pos:end="489:38"><name pos:start="489:23" pos:end="489:29">strtosz</name><argument_list pos:start="489:30" pos:end="489:38">(<argument pos:start="489:31" pos:end="489:31"><expr pos:start="489:31" pos:end="489:31"><name pos:start="489:31" pos:end="489:31">p</name></expr></argument>, <argument pos:start="489:34" pos:end="489:37"><expr pos:start="489:34" pos:end="489:37"><operator pos:start="489:34" pos:end="489:34">&amp;</operator><name pos:start="489:35" pos:end="489:37">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="491:17" pos:end="497:17"><if pos:start="491:17" pos:end="497:17">if <condition pos:start="491:20" pos:end="491:28">(<expr pos:start="491:21" pos:end="491:27"><name pos:start="491:21" pos:end="491:23">val</name> <operator pos:start="491:25" pos:end="491:25">&lt;</operator> <literal type="number" pos:start="491:27" pos:end="491:27">0</literal></expr>)</condition> <block pos:start="491:30" pos:end="497:17">{<block_content pos:start="493:21" pos:end="495:30">

                    <expr_stmt pos:start="493:21" pos:end="493:58"><expr pos:start="493:21" pos:end="493:57"><call pos:start="493:21" pos:end="493:57"><name pos:start="493:21" pos:end="493:34">monitor_printf</name><argument_list pos:start="493:35" pos:end="493:57">(<argument pos:start="493:36" pos:end="493:38"><expr pos:start="493:36" pos:end="493:38"><name pos:start="493:36" pos:end="493:38">mon</name></expr></argument>, <argument pos:start="493:41" pos:end="493:56"><expr pos:start="493:41" pos:end="493:56"><literal type="string" pos:start="493:41" pos:end="493:56">"invalid size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="495:21" pos:end="495:30">goto <name pos:start="495:26" pos:end="495:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="499:17" pos:end="499:58"><expr pos:start="499:17" pos:end="499:57"><call pos:start="499:17" pos:end="499:57"><name pos:start="499:17" pos:end="499:25">qdict_put</name><argument_list pos:start="499:26" pos:end="499:57">(<argument pos:start="499:27" pos:end="499:31"><expr pos:start="499:27" pos:end="499:31"><name pos:start="499:27" pos:end="499:31">qdict</name></expr></argument>, <argument pos:start="499:34" pos:end="499:36"><expr pos:start="499:34" pos:end="499:36"><name pos:start="499:34" pos:end="499:36">key</name></expr></argument>, <argument pos:start="499:39" pos:end="499:56"><expr pos:start="499:39" pos:end="499:56"><call pos:start="499:39" pos:end="499:56"><name pos:start="499:39" pos:end="499:51">qint_from_int</name><argument_list pos:start="499:52" pos:end="499:56">(<argument pos:start="499:53" pos:end="499:55"><expr pos:start="499:53" pos:end="499:55"><name pos:start="499:53" pos:end="499:55">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="501:17" pos:end="501:24"><expr pos:start="501:17" pos:end="501:23"><name pos:start="501:17" pos:end="501:17">p</name> <operator pos:start="501:19" pos:end="501:19">=</operator> <name pos:start="501:21" pos:end="501:23">end</name></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="505:13" pos:end="505:18">break;</break>

        <case pos:start="507:9" pos:end="507:17">case <expr pos:start="507:14" pos:end="507:16"><literal type="char" pos:start="507:14" pos:end="507:16">'T'</literal></expr>:</case>

            <block pos:start="509:13" pos:end="567:13">{<block_content pos:start="511:17" pos:end="565:63">

                <decl_stmt pos:start="511:17" pos:end="511:27"><decl pos:start="511:17" pos:end="511:26"><type pos:start="511:17" pos:end="511:22"><name pos:start="511:17" pos:end="511:22">double</name></type> <name pos:start="511:24" pos:end="511:26">val</name></decl>;</decl_stmt>



                <while pos:start="515:17" pos:end="517:24">while <condition pos:start="515:23" pos:end="515:40">(<expr pos:start="515:24" pos:end="515:39"><call pos:start="515:24" pos:end="515:39"><name pos:start="515:24" pos:end="515:35">qemu_isspace</name><argument_list pos:start="515:36" pos:end="515:39">(<argument pos:start="515:37" pos:end="515:38"><expr pos:start="515:37" pos:end="515:38"><operator pos:start="515:37" pos:end="515:37">*</operator><name pos:start="515:38" pos:end="515:38">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="517:21" pos:end="517:24"><block_content pos:start="517:21" pos:end="517:24">

                    <expr_stmt pos:start="517:21" pos:end="517:24"><expr pos:start="517:21" pos:end="517:23"><name pos:start="517:21" pos:end="517:21">p</name><operator pos:start="517:22" pos:end="517:23">++</operator></expr>;</expr_stmt></block_content></block></while>

                <if_stmt pos:start="519:17" pos:end="529:17"><if pos:start="519:17" pos:end="529:17">if <condition pos:start="519:20" pos:end="519:36">(<expr pos:start="519:21" pos:end="519:35"><operator pos:start="519:21" pos:end="519:21">*</operator><name pos:start="519:22" pos:end="519:28">typestr</name> <operator pos:start="519:30" pos:end="519:31">==</operator> <literal type="char" pos:start="519:33" pos:end="519:35">'?'</literal></expr>)</condition> <block pos:start="519:38" pos:end="529:17">{<block_content pos:start="521:21" pos:end="527:21">

                    <expr_stmt pos:start="521:21" pos:end="521:30"><expr pos:start="521:21" pos:end="521:29"><name pos:start="521:21" pos:end="521:27">typestr</name><operator pos:start="521:28" pos:end="521:29">++</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="523:21" pos:end="527:21"><if pos:start="523:21" pos:end="527:21">if <condition pos:start="523:24" pos:end="523:35">(<expr pos:start="523:25" pos:end="523:34"><operator pos:start="523:25" pos:end="523:25">*</operator><name pos:start="523:26" pos:end="523:26">p</name> <operator pos:start="523:28" pos:end="523:29">==</operator> <literal type="char" pos:start="523:31" pos:end="523:34">'\0'</literal></expr>)</condition> <block pos:start="523:37" pos:end="527:21">{<block_content pos:start="525:25" pos:end="525:30">

                        <break pos:start="525:25" pos:end="525:30">break;</break>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="531:17" pos:end="535:17"><if pos:start="531:17" pos:end="535:17">if <condition pos:start="531:20" pos:end="531:50">(<expr pos:start="531:21" pos:end="531:49"><call pos:start="531:21" pos:end="531:45"><name pos:start="531:21" pos:end="531:30">get_double</name><argument_list pos:start="531:31" pos:end="531:45">(<argument pos:start="531:32" pos:end="531:34"><expr pos:start="531:32" pos:end="531:34"><name pos:start="531:32" pos:end="531:34">mon</name></expr></argument>, <argument pos:start="531:37" pos:end="531:40"><expr pos:start="531:37" pos:end="531:40"><operator pos:start="531:37" pos:end="531:37">&amp;</operator><name pos:start="531:38" pos:end="531:40">val</name></expr></argument>, <argument pos:start="531:43" pos:end="531:44"><expr pos:start="531:43" pos:end="531:44"><operator pos:start="531:43" pos:end="531:43">&amp;</operator><name pos:start="531:44" pos:end="531:44">p</name></expr></argument>)</argument_list></call> <operator pos:start="531:47" pos:end="531:47">&lt;</operator> <literal type="number" pos:start="531:49" pos:end="531:49">0</literal></expr>)</condition> <block pos:start="531:52" pos:end="535:17">{<block_content pos:start="533:21" pos:end="533:30">

                    <goto pos:start="533:21" pos:end="533:30">goto <name pos:start="533:26" pos:end="533:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="537:17" pos:end="555:17"><if pos:start="537:17" pos:end="555:17">if <condition pos:start="537:20" pos:end="537:40">(<expr pos:start="537:21" pos:end="537:39"><name pos:start="537:21" pos:end="537:24"><name pos:start="537:21" pos:end="537:21">p</name><index pos:start="537:22" pos:end="537:24">[<expr pos:start="537:23" pos:end="537:23"><literal type="number" pos:start="537:23" pos:end="537:23">0</literal></expr>]</index></name> <operator pos:start="537:26" pos:end="537:27">&amp;&amp;</operator> <name pos:start="537:29" pos:end="537:32"><name pos:start="537:29" pos:end="537:29">p</name><index pos:start="537:30" pos:end="537:32">[<expr pos:start="537:31" pos:end="537:31"><literal type="number" pos:start="537:31" pos:end="537:31">1</literal></expr>]</index></name> <operator pos:start="537:34" pos:end="537:35">==</operator> <literal type="char" pos:start="537:37" pos:end="537:39">'s'</literal></expr>)</condition> <block pos:start="537:42" pos:end="555:17">{<block_content pos:start="539:21" pos:end="553:21">

                    <switch pos:start="539:21" pos:end="553:21">switch <condition pos:start="539:28" pos:end="539:31">(<expr pos:start="539:29" pos:end="539:30"><operator pos:start="539:29" pos:end="539:29">*</operator><name pos:start="539:30" pos:end="539:30">p</name></expr>)</condition> <block pos:start="539:33" pos:end="553:21">{<block_content pos:start="541:21" pos:end="551:50">

                    <case pos:start="541:21" pos:end="541:29">case <expr pos:start="541:26" pos:end="541:28"><literal type="char" pos:start="541:26" pos:end="541:28">'m'</literal></expr>:</case>

                        <expr_stmt pos:start="543:25" pos:end="543:35"><expr pos:start="543:25" pos:end="543:34"><name pos:start="543:25" pos:end="543:27">val</name> <operator pos:start="543:29" pos:end="543:30">/=</operator> <literal type="number" pos:start="543:32" pos:end="543:34">1e3</literal></expr>;</expr_stmt> <expr_stmt pos:start="543:37" pos:end="543:43"><expr pos:start="543:37" pos:end="543:42"><name pos:start="543:37" pos:end="543:37">p</name> <operator pos:start="543:39" pos:end="543:40">+=</operator> <literal type="number" pos:start="543:42" pos:end="543:42">2</literal></expr>;</expr_stmt> <break pos:start="543:45" pos:end="543:50">break;</break>

                    <case pos:start="545:21" pos:end="545:29">case <expr pos:start="545:26" pos:end="545:28"><literal type="char" pos:start="545:26" pos:end="545:28">'u'</literal></expr>:</case>

                        <expr_stmt pos:start="547:25" pos:end="547:35"><expr pos:start="547:25" pos:end="547:34"><name pos:start="547:25" pos:end="547:27">val</name> <operator pos:start="547:29" pos:end="547:30">/=</operator> <literal type="number" pos:start="547:32" pos:end="547:34">1e6</literal></expr>;</expr_stmt> <expr_stmt pos:start="547:37" pos:end="547:43"><expr pos:start="547:37" pos:end="547:42"><name pos:start="547:37" pos:end="547:37">p</name> <operator pos:start="547:39" pos:end="547:40">+=</operator> <literal type="number" pos:start="547:42" pos:end="547:42">2</literal></expr>;</expr_stmt> <break pos:start="547:45" pos:end="547:50">break;</break>

                    <case pos:start="549:21" pos:end="549:29">case <expr pos:start="549:26" pos:end="549:28"><literal type="char" pos:start="549:26" pos:end="549:28">'n'</literal></expr>:</case>

                        <expr_stmt pos:start="551:25" pos:end="551:35"><expr pos:start="551:25" pos:end="551:34"><name pos:start="551:25" pos:end="551:27">val</name> <operator pos:start="551:29" pos:end="551:30">/=</operator> <literal type="number" pos:start="551:32" pos:end="551:34">1e9</literal></expr>;</expr_stmt> <expr_stmt pos:start="551:37" pos:end="551:43"><expr pos:start="551:37" pos:end="551:42"><name pos:start="551:37" pos:end="551:37">p</name> <operator pos:start="551:39" pos:end="551:40">+=</operator> <literal type="number" pos:start="551:42" pos:end="551:42">2</literal></expr>;</expr_stmt> <break pos:start="551:45" pos:end="551:50">break;</break>

                    </block_content>}</block></switch>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="557:17" pos:end="563:17"><if pos:start="557:17" pos:end="563:17">if <condition pos:start="557:20" pos:end="557:44">(<expr pos:start="557:21" pos:end="557:43"><operator pos:start="557:21" pos:end="557:21">*</operator><name pos:start="557:22" pos:end="557:22">p</name> <operator pos:start="557:24" pos:end="557:25">&amp;&amp;</operator> <operator pos:start="557:27" pos:end="557:27">!</operator><call pos:start="557:28" pos:end="557:43"><name pos:start="557:28" pos:end="557:39">qemu_isspace</name><argument_list pos:start="557:40" pos:end="557:43">(<argument pos:start="557:41" pos:end="557:42"><expr pos:start="557:41" pos:end="557:42"><operator pos:start="557:41" pos:end="557:41">*</operator><name pos:start="557:42" pos:end="557:42">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="557:46" pos:end="563:17">{<block_content pos:start="559:21" pos:end="561:30">

                    <expr_stmt pos:start="559:21" pos:end="559:65"><expr pos:start="559:21" pos:end="559:64"><call pos:start="559:21" pos:end="559:64"><name pos:start="559:21" pos:end="559:34">monitor_printf</name><argument_list pos:start="559:35" pos:end="559:64">(<argument pos:start="559:36" pos:end="559:38"><expr pos:start="559:36" pos:end="559:38"><name pos:start="559:36" pos:end="559:38">mon</name></expr></argument>, <argument pos:start="559:41" pos:end="559:63"><expr pos:start="559:41" pos:end="559:63"><literal type="string" pos:start="559:41" pos:end="559:63">"Unknown unit suffix\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="561:21" pos:end="561:30">goto <name pos:start="561:26" pos:end="561:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="565:17" pos:end="565:63"><expr pos:start="565:17" pos:end="565:62"><call pos:start="565:17" pos:end="565:62"><name pos:start="565:17" pos:end="565:25">qdict_put</name><argument_list pos:start="565:26" pos:end="565:62">(<argument pos:start="565:27" pos:end="565:31"><expr pos:start="565:27" pos:end="565:31"><name pos:start="565:27" pos:end="565:31">qdict</name></expr></argument>, <argument pos:start="565:34" pos:end="565:36"><expr pos:start="565:34" pos:end="565:36"><name pos:start="565:34" pos:end="565:36">key</name></expr></argument>, <argument pos:start="565:39" pos:end="565:61"><expr pos:start="565:39" pos:end="565:61"><call pos:start="565:39" pos:end="565:61"><name pos:start="565:39" pos:end="565:56">qfloat_from_double</name><argument_list pos:start="565:57" pos:end="565:61">(<argument pos:start="565:58" pos:end="565:60"><expr pos:start="565:58" pos:end="565:60"><name pos:start="565:58" pos:end="565:60">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="569:13" pos:end="569:18">break;</break>

        <case pos:start="571:9" pos:end="571:17">case <expr pos:start="571:14" pos:end="571:16"><literal type="char" pos:start="571:14" pos:end="571:16">'b'</literal></expr>:</case>

            <block pos:start="573:13" pos:end="613:13">{<block_content pos:start="575:17" pos:end="611:60">

                <decl_stmt pos:start="575:17" pos:end="575:32"><decl pos:start="575:17" pos:end="575:31"><type pos:start="575:17" pos:end="575:28"><specifier pos:start="575:17" pos:end="575:21">const</specifier> <name pos:start="575:23" pos:end="575:26">char</name> <modifier pos:start="575:28" pos:end="575:28">*</modifier></type><name pos:start="575:29" pos:end="575:31">beg</name></decl>;</decl_stmt>

                <decl_stmt pos:start="577:17" pos:end="577:25"><decl pos:start="577:17" pos:end="577:24"><type pos:start="577:17" pos:end="577:20"><name pos:start="577:17" pos:end="577:20">bool</name></type> <name pos:start="577:22" pos:end="577:24">val</name></decl>;</decl_stmt>



                <while pos:start="581:17" pos:end="585:17">while <condition pos:start="581:23" pos:end="581:40">(<expr pos:start="581:24" pos:end="581:39"><call pos:start="581:24" pos:end="581:39"><name pos:start="581:24" pos:end="581:35">qemu_isspace</name><argument_list pos:start="581:36" pos:end="581:39">(<argument pos:start="581:37" pos:end="581:38"><expr pos:start="581:37" pos:end="581:38"><operator pos:start="581:37" pos:end="581:37">*</operator><name pos:start="581:38" pos:end="581:38">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="581:42" pos:end="585:17">{<block_content pos:start="583:21" pos:end="583:24">

                    <expr_stmt pos:start="583:21" pos:end="583:24"><expr pos:start="583:21" pos:end="583:23"><name pos:start="583:21" pos:end="583:21">p</name><operator pos:start="583:22" pos:end="583:23">++</operator></expr>;</expr_stmt>

                </block_content>}</block></while>

                <expr_stmt pos:start="587:17" pos:end="587:24"><expr pos:start="587:17" pos:end="587:23"><name pos:start="587:17" pos:end="587:19">beg</name> <operator pos:start="587:21" pos:end="587:21">=</operator> <name pos:start="587:23" pos:end="587:23">p</name></expr>;</expr_stmt>

                <while pos:start="589:17" pos:end="593:17">while <condition pos:start="589:23" pos:end="589:40">(<expr pos:start="589:24" pos:end="589:39"><call pos:start="589:24" pos:end="589:39"><name pos:start="589:24" pos:end="589:35">qemu_isgraph</name><argument_list pos:start="589:36" pos:end="589:39">(<argument pos:start="589:37" pos:end="589:38"><expr pos:start="589:37" pos:end="589:38"><operator pos:start="589:37" pos:end="589:37">*</operator><name pos:start="589:38" pos:end="589:38">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="589:42" pos:end="593:17">{<block_content pos:start="591:21" pos:end="591:24">

                    <expr_stmt pos:start="591:21" pos:end="591:24"><expr pos:start="591:21" pos:end="591:23"><name pos:start="591:21" pos:end="591:21">p</name><operator pos:start="591:22" pos:end="591:23">++</operator></expr>;</expr_stmt>

                </block_content>}</block></while>

                <if_stmt pos:start="595:17" pos:end="609:17"><if pos:start="595:17" pos:end="599:17">if <condition pos:start="595:20" pos:end="595:64">(<expr pos:start="595:21" pos:end="595:63"><name pos:start="595:21" pos:end="595:21">p</name> <operator pos:start="595:23" pos:end="595:23">-</operator> <name pos:start="595:25" pos:end="595:27">beg</name> <operator pos:start="595:29" pos:end="595:30">==</operator> <literal type="number" pos:start="595:32" pos:end="595:32">2</literal> <operator pos:start="595:34" pos:end="595:35">&amp;&amp;</operator> <operator pos:start="595:37" pos:end="595:37">!</operator><call pos:start="595:38" pos:end="595:63"><name pos:start="595:38" pos:end="595:43">memcmp</name><argument_list pos:start="595:44" pos:end="595:63">(<argument pos:start="595:45" pos:end="595:47"><expr pos:start="595:45" pos:end="595:47"><name pos:start="595:45" pos:end="595:47">beg</name></expr></argument>, <argument pos:start="595:50" pos:end="595:53"><expr pos:start="595:50" pos:end="595:53"><literal type="string" pos:start="595:50" pos:end="595:53">"on"</literal></expr></argument>, <argument pos:start="595:56" pos:end="595:62"><expr pos:start="595:56" pos:end="595:62"><name pos:start="595:56" pos:end="595:56">p</name> <operator pos:start="595:58" pos:end="595:58">-</operator> <name pos:start="595:60" pos:end="595:62">beg</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="595:66" pos:end="599:17">{<block_content pos:start="597:21" pos:end="597:31">

                    <expr_stmt pos:start="597:21" pos:end="597:31"><expr pos:start="597:21" pos:end="597:30"><name pos:start="597:21" pos:end="597:23">val</name> <operator pos:start="597:25" pos:end="597:25">=</operator> <name pos:start="597:27" pos:end="597:30">true</name></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="599:19" pos:end="603:17">else if <condition pos:start="599:27" pos:end="599:72">(<expr pos:start="599:28" pos:end="599:71"><name pos:start="599:28" pos:end="599:28">p</name> <operator pos:start="599:30" pos:end="599:30">-</operator> <name pos:start="599:32" pos:end="599:34">beg</name> <operator pos:start="599:36" pos:end="599:37">==</operator> <literal type="number" pos:start="599:39" pos:end="599:39">3</literal> <operator pos:start="599:41" pos:end="599:42">&amp;&amp;</operator> <operator pos:start="599:44" pos:end="599:44">!</operator><call pos:start="599:45" pos:end="599:71"><name pos:start="599:45" pos:end="599:50">memcmp</name><argument_list pos:start="599:51" pos:end="599:71">(<argument pos:start="599:52" pos:end="599:54"><expr pos:start="599:52" pos:end="599:54"><name pos:start="599:52" pos:end="599:54">beg</name></expr></argument>, <argument pos:start="599:57" pos:end="599:61"><expr pos:start="599:57" pos:end="599:61"><literal type="string" pos:start="599:57" pos:end="599:61">"off"</literal></expr></argument>, <argument pos:start="599:64" pos:end="599:70"><expr pos:start="599:64" pos:end="599:70"><name pos:start="599:64" pos:end="599:64">p</name> <operator pos:start="599:66" pos:end="599:66">-</operator> <name pos:start="599:68" pos:end="599:70">beg</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="599:74" pos:end="603:17">{<block_content pos:start="601:21" pos:end="601:32">

                    <expr_stmt pos:start="601:21" pos:end="601:32"><expr pos:start="601:21" pos:end="601:31"><name pos:start="601:21" pos:end="601:23">val</name> <operator pos:start="601:25" pos:end="601:25">=</operator> <name pos:start="601:27" pos:end="601:31">false</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="603:19" pos:end="609:17">else <block pos:start="603:24" pos:end="609:17">{<block_content pos:start="605:21" pos:end="607:30">

                    <expr_stmt pos:start="605:21" pos:end="605:68"><expr pos:start="605:21" pos:end="605:67"><call pos:start="605:21" pos:end="605:67"><name pos:start="605:21" pos:end="605:34">monitor_printf</name><argument_list pos:start="605:35" pos:end="605:67">(<argument pos:start="605:36" pos:end="605:38"><expr pos:start="605:36" pos:end="605:38"><name pos:start="605:36" pos:end="605:38">mon</name></expr></argument>, <argument pos:start="605:41" pos:end="605:66"><expr pos:start="605:41" pos:end="605:66"><literal type="string" pos:start="605:41" pos:end="605:66">"Expected 'on' or 'off'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="607:21" pos:end="607:30">goto <name pos:start="607:26" pos:end="607:29">fail</name>;</goto>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="611:17" pos:end="611:60"><expr pos:start="611:17" pos:end="611:59"><call pos:start="611:17" pos:end="611:59"><name pos:start="611:17" pos:end="611:25">qdict_put</name><argument_list pos:start="611:26" pos:end="611:59">(<argument pos:start="611:27" pos:end="611:31"><expr pos:start="611:27" pos:end="611:31"><name pos:start="611:27" pos:end="611:31">qdict</name></expr></argument>, <argument pos:start="611:34" pos:end="611:36"><expr pos:start="611:34" pos:end="611:36"><name pos:start="611:34" pos:end="611:36">key</name></expr></argument>, <argument pos:start="611:39" pos:end="611:58"><expr pos:start="611:39" pos:end="611:58"><call pos:start="611:39" pos:end="611:58"><name pos:start="611:39" pos:end="611:53">qbool_from_bool</name><argument_list pos:start="611:54" pos:end="611:58">(<argument pos:start="611:55" pos:end="611:57"><expr pos:start="611:55" pos:end="611:57"><name pos:start="611:55" pos:end="611:57">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="615:13" pos:end="615:18">break;</break>

        <case pos:start="617:9" pos:end="617:17">case <expr pos:start="617:14" pos:end="617:16"><literal type="char" pos:start="617:14" pos:end="617:16">'-'</literal></expr>:</case>

            <block pos:start="619:13" pos:end="679:13">{<block_content pos:start="621:17" pos:end="677:17">

                <decl_stmt pos:start="621:17" pos:end="621:36"><decl pos:start="621:17" pos:end="621:35"><type pos:start="621:17" pos:end="621:28"><specifier pos:start="621:17" pos:end="621:21">const</specifier> <name pos:start="621:23" pos:end="621:26">char</name> <modifier pos:start="621:28" pos:end="621:28">*</modifier></type><name pos:start="621:29" pos:end="621:31">tmp</name> <init pos:start="621:33" pos:end="621:35">= <expr pos:start="621:35" pos:end="621:35"><name pos:start="621:35" pos:end="621:35">p</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="623:17" pos:end="623:33"><decl pos:start="623:17" pos:end="623:32"><type pos:start="623:17" pos:end="623:19"><name pos:start="623:17" pos:end="623:19">int</name></type> <name pos:start="623:21" pos:end="623:28">skip_key</name> <init pos:start="623:30" pos:end="623:32">= <expr pos:start="623:32" pos:end="623:32"><literal type="number" pos:start="623:32" pos:end="623:32">0</literal></expr></init></decl>;</decl_stmt>

                <comment type="block" pos:start="625:17" pos:end="625:28">/* option */</comment>



                <expr_stmt pos:start="629:17" pos:end="629:31"><expr pos:start="629:17" pos:end="629:30"><name pos:start="629:17" pos:end="629:17">c</name> <operator pos:start="629:19" pos:end="629:19">=</operator> <operator pos:start="629:21" pos:end="629:21">*</operator><name pos:start="629:22" pos:end="629:28">typestr</name><operator pos:start="629:29" pos:end="629:30">++</operator></expr>;</expr_stmt>

                <if_stmt pos:start="631:17" pos:end="633:34"><if pos:start="631:17" pos:end="633:34">if <condition pos:start="631:20" pos:end="631:30">(<expr pos:start="631:21" pos:end="631:29"><name pos:start="631:21" pos:end="631:21">c</name> <operator pos:start="631:23" pos:end="631:24">==</operator> <literal type="char" pos:start="631:26" pos:end="631:29">'\0'</literal></expr>)</condition><block type="pseudo" pos:start="633:21" pos:end="633:34"><block_content pos:start="633:21" pos:end="633:34">

                    <goto pos:start="633:21" pos:end="633:34">goto <name pos:start="633:26" pos:end="633:33">bad_type</name>;</goto></block_content></block></if></if_stmt>

                <while pos:start="635:17" pos:end="637:24">while <condition pos:start="635:23" pos:end="635:40">(<expr pos:start="635:24" pos:end="635:39"><call pos:start="635:24" pos:end="635:39"><name pos:start="635:24" pos:end="635:35">qemu_isspace</name><argument_list pos:start="635:36" pos:end="635:39">(<argument pos:start="635:37" pos:end="635:38"><expr pos:start="635:37" pos:end="635:38"><operator pos:start="635:37" pos:end="635:37">*</operator><name pos:start="635:38" pos:end="635:38">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="637:21" pos:end="637:24"><block_content pos:start="637:21" pos:end="637:24">

                    <expr_stmt pos:start="637:21" pos:end="637:24"><expr pos:start="637:21" pos:end="637:23"><name pos:start="637:21" pos:end="637:21">p</name><operator pos:start="637:22" pos:end="637:23">++</operator></expr>;</expr_stmt></block_content></block></while>

                <if_stmt pos:start="639:17" pos:end="677:17"><if pos:start="639:17" pos:end="677:17">if <condition pos:start="639:20" pos:end="639:30">(<expr pos:start="639:21" pos:end="639:29"><operator pos:start="639:21" pos:end="639:21">*</operator><name pos:start="639:22" pos:end="639:22">p</name> <operator pos:start="639:24" pos:end="639:25">==</operator> <literal type="char" pos:start="639:27" pos:end="639:29">'-'</literal></expr>)</condition> <block pos:start="639:32" pos:end="677:17">{<block_content pos:start="641:21" pos:end="675:21">

                    <expr_stmt pos:start="641:21" pos:end="641:24"><expr pos:start="641:21" pos:end="641:23"><name pos:start="641:21" pos:end="641:21">p</name><operator pos:start="641:22" pos:end="641:23">++</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="643:21" pos:end="661:21"><if pos:start="643:21" pos:end="661:21">if<condition pos:start="643:23" pos:end="643:31">(<expr pos:start="643:24" pos:end="643:30"><name pos:start="643:24" pos:end="643:24">c</name> <operator pos:start="643:26" pos:end="643:27">!=</operator> <operator pos:start="643:29" pos:end="643:29">*</operator><name pos:start="643:30" pos:end="643:30">p</name></expr>)</condition> <block pos:start="643:33" pos:end="661:21">{<block_content pos:start="645:25" pos:end="659:25">

                        <if_stmt pos:start="645:25" pos:end="659:25"><if pos:start="645:25" pos:end="655:25">if<condition pos:start="645:27" pos:end="645:56">(<expr pos:start="645:28" pos:end="645:55"><operator pos:start="645:28" pos:end="645:28">!</operator><call pos:start="645:29" pos:end="645:55"><name pos:start="645:29" pos:end="645:43">is_valid_option</name><argument_list pos:start="645:44" pos:end="645:55">(<argument pos:start="645:45" pos:end="645:45"><expr pos:start="645:45" pos:end="645:45"><name pos:start="645:45" pos:end="645:45">p</name></expr></argument>, <argument pos:start="645:48" pos:end="645:54"><expr pos:start="645:48" pos:end="645:54"><name pos:start="645:48" pos:end="645:54">typestr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="645:58" pos:end="655:25">{<block_content pos:start="649:29" pos:end="653:38">

                  

                            <expr_stmt pos:start="649:29" pos:end="651:56"><expr pos:start="649:29" pos:end="651:55"><call pos:start="649:29" pos:end="651:55"><name pos:start="649:29" pos:end="649:42">monitor_printf</name><argument_list pos:start="649:43" pos:end="651:55">(<argument pos:start="649:44" pos:end="649:46"><expr pos:start="649:44" pos:end="649:46"><name pos:start="649:44" pos:end="649:46">mon</name></expr></argument>, <argument pos:start="649:49" pos:end="649:78"><expr pos:start="649:49" pos:end="649:78"><literal type="string" pos:start="649:49" pos:end="649:78">"%s: unsupported option -%c\n"</literal></expr></argument>,

                                           <argument pos:start="651:44" pos:end="651:50"><expr pos:start="651:44" pos:end="651:50"><name pos:start="651:44" pos:end="651:50">cmdname</name></expr></argument>, <argument pos:start="651:53" pos:end="651:54"><expr pos:start="651:53" pos:end="651:54"><operator pos:start="651:53" pos:end="651:53">*</operator><name pos:start="651:54" pos:end="651:54">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <goto pos:start="653:29" pos:end="653:38">goto <name pos:start="653:34" pos:end="653:37">fail</name>;</goto>

                        </block_content>}</block></if> <else pos:start="655:27" pos:end="659:25">else <block pos:start="655:32" pos:end="659:25">{<block_content pos:start="657:29" pos:end="657:41">

                            <expr_stmt pos:start="657:29" pos:end="657:41"><expr pos:start="657:29" pos:end="657:40"><name pos:start="657:29" pos:end="657:36">skip_key</name> <operator pos:start="657:38" pos:end="657:38">=</operator> <literal type="number" pos:start="657:40" pos:end="657:40">1</literal></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if></if_stmt>

                    <if_stmt pos:start="663:21" pos:end="675:21"><if pos:start="663:21" pos:end="667:21">if<condition pos:start="663:23" pos:end="663:32">(<expr pos:start="663:24" pos:end="663:31"><name pos:start="663:24" pos:end="663:31">skip_key</name></expr>)</condition> <block pos:start="663:34" pos:end="667:21">{<block_content pos:start="665:25" pos:end="665:32">

                        <expr_stmt pos:start="665:25" pos:end="665:32"><expr pos:start="665:25" pos:end="665:31"><name pos:start="665:25" pos:end="665:25">p</name> <operator pos:start="665:27" pos:end="665:27">=</operator> <name pos:start="665:29" pos:end="665:31">tmp</name></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="667:23" pos:end="675:21">else <block pos:start="667:28" pos:end="675:21">{<block_content pos:start="671:25" pos:end="673:69">

                        <comment type="block" pos:start="669:25" pos:end="669:40">/* has option */</comment>

                        <expr_stmt pos:start="671:25" pos:end="671:28"><expr pos:start="671:25" pos:end="671:27"><name pos:start="671:25" pos:end="671:25">p</name><operator pos:start="671:26" pos:end="671:27">++</operator></expr>;</expr_stmt>

                        <expr_stmt pos:start="673:25" pos:end="673:69"><expr pos:start="673:25" pos:end="673:68"><call pos:start="673:25" pos:end="673:68"><name pos:start="673:25" pos:end="673:33">qdict_put</name><argument_list pos:start="673:34" pos:end="673:68">(<argument pos:start="673:35" pos:end="673:39"><expr pos:start="673:35" pos:end="673:39"><name pos:start="673:35" pos:end="673:39">qdict</name></expr></argument>, <argument pos:start="673:42" pos:end="673:44"><expr pos:start="673:42" pos:end="673:44"><name pos:start="673:42" pos:end="673:44">key</name></expr></argument>, <argument pos:start="673:47" pos:end="673:67"><expr pos:start="673:47" pos:end="673:67"><call pos:start="673:47" pos:end="673:67"><name pos:start="673:47" pos:end="673:61">qbool_from_bool</name><argument_list pos:start="673:62" pos:end="673:67">(<argument pos:start="673:63" pos:end="673:66"><expr pos:start="673:63" pos:end="673:66"><name pos:start="673:63" pos:end="673:66">true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block>

            <break pos:start="681:13" pos:end="681:18">break;</break>

        <case pos:start="683:9" pos:end="683:17">case <expr pos:start="683:14" pos:end="683:16"><literal type="char" pos:start="683:14" pos:end="683:16">'S'</literal></expr>:</case>

            <block pos:start="685:13" pos:end="729:13">{<block_content pos:start="689:17" pos:end="727:25">

                <comment type="block" pos:start="687:17" pos:end="687:50">/* package all remaining string */</comment>

                <decl_stmt pos:start="689:17" pos:end="689:24"><decl pos:start="689:17" pos:end="689:23"><type pos:start="689:17" pos:end="689:19"><name pos:start="689:17" pos:end="689:19">int</name></type> <name pos:start="689:21" pos:end="689:23">len</name></decl>;</decl_stmt>



                <while pos:start="693:17" pos:end="697:17">while <condition pos:start="693:23" pos:end="693:40">(<expr pos:start="693:24" pos:end="693:39"><call pos:start="693:24" pos:end="693:39"><name pos:start="693:24" pos:end="693:35">qemu_isspace</name><argument_list pos:start="693:36" pos:end="693:39">(<argument pos:start="693:37" pos:end="693:38"><expr pos:start="693:37" pos:end="693:38"><operator pos:start="693:37" pos:end="693:37">*</operator><name pos:start="693:38" pos:end="693:38">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="693:42" pos:end="697:17">{<block_content pos:start="695:21" pos:end="695:24">

                    <expr_stmt pos:start="695:21" pos:end="695:24"><expr pos:start="695:21" pos:end="695:23"><name pos:start="695:21" pos:end="695:21">p</name><operator pos:start="695:22" pos:end="695:23">++</operator></expr>;</expr_stmt>

                </block_content>}</block></while>

                <if_stmt pos:start="699:17" pos:end="711:17"><if pos:start="699:17" pos:end="711:17">if <condition pos:start="699:20" pos:end="699:36">(<expr pos:start="699:21" pos:end="699:35"><operator pos:start="699:21" pos:end="699:21">*</operator><name pos:start="699:22" pos:end="699:28">typestr</name> <operator pos:start="699:30" pos:end="699:31">==</operator> <literal type="char" pos:start="699:33" pos:end="699:35">'?'</literal></expr>)</condition> <block pos:start="699:38" pos:end="711:17">{<block_content pos:start="701:21" pos:end="709:21">

                    <expr_stmt pos:start="701:21" pos:end="701:30"><expr pos:start="701:21" pos:end="701:29"><name pos:start="701:21" pos:end="701:27">typestr</name><operator pos:start="701:28" pos:end="701:29">++</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="703:21" pos:end="709:21"><if pos:start="703:21" pos:end="709:21">if <condition pos:start="703:24" pos:end="703:35">(<expr pos:start="703:25" pos:end="703:34"><operator pos:start="703:25" pos:end="703:25">*</operator><name pos:start="703:26" pos:end="703:26">p</name> <operator pos:start="703:28" pos:end="703:29">==</operator> <literal type="char" pos:start="703:31" pos:end="703:34">'\0'</literal></expr>)</condition> <block pos:start="703:37" pos:end="709:21">{<block_content pos:start="707:25" pos:end="707:30">

                        <comment type="block" pos:start="705:25" pos:end="705:64">/* no remaining string: NULL argument */</comment>

                        <break pos:start="707:25" pos:end="707:30">break;</break>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="713:17" pos:end="713:32"><expr pos:start="713:17" pos:end="713:31"><name pos:start="713:17" pos:end="713:19">len</name> <operator pos:start="713:21" pos:end="713:21">=</operator> <call pos:start="713:23" pos:end="713:31"><name pos:start="713:23" pos:end="713:28">strlen</name><argument_list pos:start="713:29" pos:end="713:31">(<argument pos:start="713:30" pos:end="713:30"><expr pos:start="713:30" pos:end="713:30"><name pos:start="713:30" pos:end="713:30">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="715:17" pos:end="723:17"><if pos:start="715:17" pos:end="723:17">if <condition pos:start="715:20" pos:end="715:29">(<expr pos:start="715:21" pos:end="715:28"><name pos:start="715:21" pos:end="715:23">len</name> <operator pos:start="715:25" pos:end="715:26">&lt;=</operator> <literal type="number" pos:start="715:28" pos:end="715:28">0</literal></expr>)</condition> <block pos:start="715:31" pos:end="723:17">{<block_content pos:start="717:21" pos:end="721:26">

                    <expr_stmt pos:start="717:21" pos:end="719:44"><expr pos:start="717:21" pos:end="719:43"><call pos:start="717:21" pos:end="719:43"><name pos:start="717:21" pos:end="717:34">monitor_printf</name><argument_list pos:start="717:35" pos:end="719:43">(<argument pos:start="717:36" pos:end="717:38"><expr pos:start="717:36" pos:end="717:38"><name pos:start="717:36" pos:end="717:38">mon</name></expr></argument>, <argument pos:start="717:41" pos:end="717:63"><expr pos:start="717:41" pos:end="717:63"><literal type="string" pos:start="717:41" pos:end="717:63">"%s: string expected\n"</literal></expr></argument>,

                                   <argument pos:start="719:36" pos:end="719:42"><expr pos:start="719:36" pos:end="719:42"><name pos:start="719:36" pos:end="719:42">cmdname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="721:21" pos:end="721:26">break;</break>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="725:17" pos:end="725:59"><expr pos:start="725:17" pos:end="725:58"><call pos:start="725:17" pos:end="725:58"><name pos:start="725:17" pos:end="725:25">qdict_put</name><argument_list pos:start="725:26" pos:end="725:58">(<argument pos:start="725:27" pos:end="725:31"><expr pos:start="725:27" pos:end="725:31"><name pos:start="725:27" pos:end="725:31">qdict</name></expr></argument>, <argument pos:start="725:34" pos:end="725:36"><expr pos:start="725:34" pos:end="725:36"><name pos:start="725:34" pos:end="725:36">key</name></expr></argument>, <argument pos:start="725:39" pos:end="725:57"><expr pos:start="725:39" pos:end="725:57"><call pos:start="725:39" pos:end="725:57"><name pos:start="725:39" pos:end="725:54">qstring_from_str</name><argument_list pos:start="725:55" pos:end="725:57">(<argument pos:start="725:56" pos:end="725:56"><expr pos:start="725:56" pos:end="725:56"><name pos:start="725:56" pos:end="725:56">p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="727:17" pos:end="727:25"><expr pos:start="727:17" pos:end="727:24"><name pos:start="727:17" pos:end="727:17">p</name> <operator pos:start="727:19" pos:end="727:20">+=</operator> <name pos:start="727:22" pos:end="727:24">len</name></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="731:13" pos:end="731:18">break;</break>

        <default pos:start="733:9" pos:end="733:16">default:</default>

        <label pos:start="735:9" pos:end="735:17"><name pos:start="735:9" pos:end="735:16">bad_type</name>:</label>

            <expr_stmt pos:start="737:13" pos:end="737:71"><expr pos:start="737:13" pos:end="737:70"><call pos:start="737:13" pos:end="737:70"><name pos:start="737:13" pos:end="737:26">monitor_printf</name><argument_list pos:start="737:27" pos:end="737:70">(<argument pos:start="737:28" pos:end="737:30"><expr pos:start="737:28" pos:end="737:30"><name pos:start="737:28" pos:end="737:30">mon</name></expr></argument>, <argument pos:start="737:33" pos:end="737:57"><expr pos:start="737:33" pos:end="737:57"><literal type="string" pos:start="737:33" pos:end="737:57">"%s: unknown type '%c'\n"</literal></expr></argument>, <argument pos:start="737:60" pos:end="737:66"><expr pos:start="737:60" pos:end="737:66"><name pos:start="737:60" pos:end="737:66">cmdname</name></expr></argument>, <argument pos:start="737:69" pos:end="737:69"><expr pos:start="737:69" pos:end="737:69"><name pos:start="737:69" pos:end="737:69">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="739:13" pos:end="739:22">goto <name pos:start="739:18" pos:end="739:21">fail</name>;</goto>

        </block_content>}</block></switch>

        <expr_stmt pos:start="743:9" pos:end="743:20"><expr pos:start="743:9" pos:end="743:19"><call pos:start="743:9" pos:end="743:19"><name pos:start="743:9" pos:end="743:14">g_free</name><argument_list pos:start="743:15" pos:end="743:19">(<argument pos:start="743:16" pos:end="743:18"><expr pos:start="743:16" pos:end="743:18"><name pos:start="743:16" pos:end="743:18">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="745:9" pos:end="745:19"><expr pos:start="745:9" pos:end="745:18"><name pos:start="745:9" pos:end="745:11">key</name> <operator pos:start="745:13" pos:end="745:13">=</operator> <name pos:start="745:15" pos:end="745:18">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <comment type="block" pos:start="749:5" pos:end="749:46">/* check that all arguments were parsed */</comment>

    <while pos:start="751:5" pos:end="753:12">while <condition pos:start="751:11" pos:end="751:28">(<expr pos:start="751:12" pos:end="751:27"><call pos:start="751:12" pos:end="751:27"><name pos:start="751:12" pos:end="751:23">qemu_isspace</name><argument_list pos:start="751:24" pos:end="751:27">(<argument pos:start="751:25" pos:end="751:26"><expr pos:start="751:25" pos:end="751:26"><operator pos:start="751:25" pos:end="751:25">*</operator><name pos:start="751:26" pos:end="751:26">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="753:9" pos:end="753:12"><block_content pos:start="753:9" pos:end="753:12">

        <expr_stmt pos:start="753:9" pos:end="753:12"><expr pos:start="753:9" pos:end="753:11"><name pos:start="753:9" pos:end="753:9">p</name><operator pos:start="753:10" pos:end="753:11">++</operator></expr>;</expr_stmt></block_content></block></while>

    <if_stmt pos:start="755:5" pos:end="763:5"><if pos:start="755:5" pos:end="763:5">if <condition pos:start="755:8" pos:end="755:19">(<expr pos:start="755:9" pos:end="755:18"><operator pos:start="755:9" pos:end="755:9">*</operator><name pos:start="755:10" pos:end="755:10">p</name> <operator pos:start="755:12" pos:end="755:13">!=</operator> <literal type="char" pos:start="755:15" pos:end="755:18">'\0'</literal></expr>)</condition> <block pos:start="755:21" pos:end="763:5">{<block_content pos:start="757:9" pos:end="761:18">

        <expr_stmt pos:start="757:9" pos:end="759:32"><expr pos:start="757:9" pos:end="759:31"><call pos:start="757:9" pos:end="759:31"><name pos:start="757:9" pos:end="757:22">monitor_printf</name><argument_list pos:start="757:23" pos:end="759:31">(<argument pos:start="757:24" pos:end="757:26"><expr pos:start="757:24" pos:end="757:26"><name pos:start="757:24" pos:end="757:26">mon</name></expr></argument>, <argument pos:start="757:29" pos:end="757:76"><expr pos:start="757:29" pos:end="757:76"><literal type="string" pos:start="757:29" pos:end="757:76">"%s: extraneous characters at the end of line\n"</literal></expr></argument>,

                       <argument pos:start="759:24" pos:end="759:30"><expr pos:start="759:24" pos:end="759:30"><name pos:start="759:24" pos:end="759:30">cmdname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="761:9" pos:end="761:18">goto <name pos:start="761:14" pos:end="761:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <return pos:start="767:5" pos:end="767:15">return <expr pos:start="767:12" pos:end="767:14"><name pos:start="767:12" pos:end="767:14">cmd</name></expr>;</return>



<label pos:start="771:1" pos:end="771:5"><name pos:start="771:1" pos:end="771:4">fail</name>:</label>

    <expr_stmt pos:start="773:5" pos:end="773:16"><expr pos:start="773:5" pos:end="773:15"><call pos:start="773:5" pos:end="773:15"><name pos:start="773:5" pos:end="773:10">g_free</name><argument_list pos:start="773:11" pos:end="773:15">(<argument pos:start="773:12" pos:end="773:14"><expr pos:start="773:12" pos:end="773:14"><name pos:start="773:12" pos:end="773:14">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="775:5" pos:end="775:16">return <expr pos:start="775:12" pos:end="775:15"><name pos:start="775:12" pos:end="775:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
