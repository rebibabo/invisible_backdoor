<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15050.c" pos:tabs="8"><function pos:start="1:1" pos:end="99:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:13">rwpipe</name> <modifier pos:start="1:15" pos:end="1:15">*</modifier></type><name pos:start="1:16" pos:end="1:26">rwpipe_open</name><parameter_list pos:start="1:27" pos:end="1:52">( <parameter pos:start="1:29" pos:end="1:36"><decl pos:start="1:29" pos:end="1:36"><type pos:start="1:29" pos:end="1:36"><name pos:start="1:29" pos:end="1:31">int</name></type> <name pos:start="1:33" pos:end="1:36">argc</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:50"><decl pos:start="1:39" pos:end="1:50"><type pos:start="1:39" pos:end="1:48"><name pos:start="1:39" pos:end="1:42">char</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:50"><name pos:start="1:45" pos:end="1:48">argv</name><index pos:start="1:49" pos:end="1:50">[]</index></name></decl></parameter> )</parameter_list>

<block pos:start="3:1" pos:end="99:1">{<block_content pos:start="5:5" pos:end="97:16">

    <decl_stmt pos:start="5:5" pos:end="5:50"><decl pos:start="5:5" pos:end="5:49"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:10">rwpipe</name> <modifier pos:start="5:12" pos:end="5:12">*</modifier></type><name pos:start="5:13" pos:end="5:16">this</name> <init pos:start="5:18" pos:end="5:49">= <expr pos:start="5:20" pos:end="5:49"><call pos:start="5:20" pos:end="5:49"><name pos:start="5:20" pos:end="5:29">av_mallocz</name><argument_list pos:start="5:30" pos:end="5:49">( <argument pos:start="5:32" pos:end="5:47"><expr pos:start="5:32" pos:end="5:47"><sizeof pos:start="5:32" pos:end="5:47">sizeof<argument_list pos:start="5:38" pos:end="5:47">( <argument pos:start="5:40" pos:end="5:45"><expr pos:start="5:40" pos:end="5:45"><name pos:start="5:40" pos:end="5:45">rwpipe</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="93:5"><if pos:start="9:5" pos:end="93:5">if <condition pos:start="9:8" pos:end="9:23">( <expr pos:start="9:10" pos:end="9:21"><name pos:start="9:10" pos:end="9:13">this</name> <operator pos:start="9:15" pos:end="9:16">!=</operator> <name pos:start="9:18" pos:end="9:21">NULL</name></expr> )</condition>

    <block pos:start="11:5" pos:end="93:5">{<block_content pos:start="13:9" pos:end="91:9">

        <decl_stmt pos:start="13:9" pos:end="13:23"><decl pos:start="13:9" pos:end="13:22"><type pos:start="13:9" pos:end="13:11"><name pos:start="13:9" pos:end="13:11">int</name></type> <name pos:start="13:13" pos:end="13:22"><name pos:start="13:13" pos:end="13:17">input</name><index pos:start="13:18" pos:end="13:22">[ <expr pos:start="13:20" pos:end="13:20"><literal type="number" pos:start="13:20" pos:end="13:20">2</literal></expr> ]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:24"><decl pos:start="15:9" pos:end="15:23"><type pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:11">int</name></type> <name pos:start="15:13" pos:end="15:23"><name pos:start="15:13" pos:end="15:18">output</name><index pos:start="15:19" pos:end="15:23">[ <expr pos:start="15:21" pos:end="15:21"><literal type="number" pos:start="15:21" pos:end="15:21">2</literal></expr> ]</index></name></decl>;</decl_stmt>



        <expr_stmt pos:start="19:9" pos:end="19:22"><expr pos:start="19:9" pos:end="19:21"><call pos:start="19:9" pos:end="19:21"><name pos:start="19:9" pos:end="19:12">pipe</name><argument_list pos:start="19:13" pos:end="19:21">( <argument pos:start="19:15" pos:end="19:19"><expr pos:start="19:15" pos:end="19:19"><name pos:start="19:15" pos:end="19:19">input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:23"><expr pos:start="21:9" pos:end="21:22"><call pos:start="21:9" pos:end="21:22"><name pos:start="21:9" pos:end="21:12">pipe</name><argument_list pos:start="21:13" pos:end="21:22">( <argument pos:start="21:15" pos:end="21:20"><expr pos:start="21:15" pos:end="21:20"><name pos:start="21:15" pos:end="21:20">output</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="25:9" pos:end="25:27"><expr pos:start="25:9" pos:end="25:26"><name pos:start="25:9" pos:end="25:17"><name pos:start="25:9" pos:end="25:12">this</name><operator pos:start="25:13" pos:end="25:14">-&gt;</operator><name pos:start="25:15" pos:end="25:17">pid</name></name> <operator pos:start="25:19" pos:end="25:19">=</operator> <call pos:start="25:21" pos:end="25:26"><name pos:start="25:21" pos:end="25:24">fork</name><argument_list pos:start="25:25" pos:end="25:26">()</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="29:9" pos:end="91:9"><if pos:start="29:9" pos:end="75:9">if <condition pos:start="29:12" pos:end="29:29">( <expr pos:start="29:14" pos:end="29:27"><name pos:start="29:14" pos:end="29:22"><name pos:start="29:14" pos:end="29:17">this</name><operator pos:start="29:18" pos:end="29:19">-&gt;</operator><name pos:start="29:20" pos:end="29:22">pid</name></name> <operator pos:start="29:24" pos:end="29:25">==</operator> <literal type="number" pos:start="29:27" pos:end="29:27">0</literal></expr> )</condition>

        <block pos:start="31:9" pos:end="75:9">{<block_content pos:start="35:13" pos:end="73:25">

<cpp:define pos:start="33:1" pos:end="33:26">#<cpp:directive pos:start="33:2" pos:end="33:7">define</cpp:directive> <cpp:macro pos:start="33:9" pos:end="33:20"><name pos:start="33:9" pos:end="33:20">COMMAND_SIZE</name></cpp:macro> <cpp:value pos:start="33:22" pos:end="33:26">10240</cpp:value></cpp:define>

            <decl_stmt pos:start="35:13" pos:end="35:55"><decl pos:start="35:13" pos:end="35:54"><type pos:start="35:13" pos:end="35:18"><name pos:start="35:13" pos:end="35:16">char</name> <modifier pos:start="35:18" pos:end="35:18">*</modifier></type><name pos:start="35:19" pos:end="35:25">command</name> <init pos:start="35:27" pos:end="35:54">= <expr pos:start="35:29" pos:end="35:54"><call pos:start="35:29" pos:end="35:54"><name pos:start="35:29" pos:end="35:38">av_mallocz</name><argument_list pos:start="35:39" pos:end="35:54">( <argument pos:start="35:41" pos:end="35:52"><expr pos:start="35:41" pos:end="35:52"><name pos:start="35:41" pos:end="35:52">COMMAND_SIZE</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="37:13" pos:end="37:18"><decl pos:start="37:13" pos:end="37:17"><type pos:start="37:13" pos:end="37:15"><name pos:start="37:13" pos:end="37:15">int</name></type> <name pos:start="37:17" pos:end="37:17">i</name></decl>;</decl_stmt>



            <expr_stmt pos:start="41:13" pos:end="41:34"><expr pos:start="41:13" pos:end="41:33"><call pos:start="41:13" pos:end="41:33"><name pos:start="41:13" pos:end="41:18">strcpy</name><argument_list pos:start="41:19" pos:end="41:33">( <argument pos:start="41:21" pos:end="41:27"><expr pos:start="41:21" pos:end="41:27"><name pos:start="41:21" pos:end="41:27">command</name></expr></argument>, <argument pos:start="41:30" pos:end="41:31"><expr pos:start="41:30" pos:end="41:31"><literal type="string" pos:start="41:30" pos:end="41:31">""</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <for pos:start="43:13" pos:end="51:13">for <control pos:start="43:17" pos:end="43:41">( <init pos:start="43:19" pos:end="43:24"><expr pos:start="43:19" pos:end="43:23"><name pos:start="43:19" pos:end="43:19">i</name> <operator pos:start="43:21" pos:end="43:21">=</operator> <literal type="number" pos:start="43:23" pos:end="43:23">0</literal></expr>;</init> <condition pos:start="43:26" pos:end="43:34"><expr pos:start="43:26" pos:end="43:33"><name pos:start="43:26" pos:end="43:26">i</name> <operator pos:start="43:28" pos:end="43:28">&lt;</operator> <name pos:start="43:30" pos:end="43:33">argc</name></expr>;</condition> <incr pos:start="43:36" pos:end="43:39"><expr pos:start="43:36" pos:end="43:39"><name pos:start="43:36" pos:end="43:36">i</name> <operator pos:start="43:38" pos:end="43:39">++</operator></expr></incr> )</control>

            <block pos:start="45:13" pos:end="51:13">{<block_content pos:start="47:17" pos:end="49:57">

                <expr_stmt pos:start="47:17" pos:end="47:63"><expr pos:start="47:17" pos:end="47:62"><call pos:start="47:17" pos:end="47:62"><name pos:start="47:17" pos:end="47:26">av_strlcat</name><argument_list pos:start="47:27" pos:end="47:62">( <argument pos:start="47:29" pos:end="47:35"><expr pos:start="47:29" pos:end="47:35"><name pos:start="47:29" pos:end="47:35">command</name></expr></argument>, <argument pos:start="47:38" pos:end="47:46"><expr pos:start="47:38" pos:end="47:46"><name pos:start="47:38" pos:end="47:46"><name pos:start="47:38" pos:end="47:41">argv</name><index pos:start="47:42" pos:end="47:46">[ <expr pos:start="47:44" pos:end="47:44"><name pos:start="47:44" pos:end="47:44">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="47:49" pos:end="47:60"><expr pos:start="47:49" pos:end="47:60"><name pos:start="47:49" pos:end="47:60">COMMAND_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="49:17" pos:end="49:57"><expr pos:start="49:17" pos:end="49:56"><call pos:start="49:17" pos:end="49:56"><name pos:start="49:17" pos:end="49:26">av_strlcat</name><argument_list pos:start="49:27" pos:end="49:56">( <argument pos:start="49:29" pos:end="49:35"><expr pos:start="49:29" pos:end="49:35"><name pos:start="49:29" pos:end="49:35">command</name></expr></argument>, <argument pos:start="49:38" pos:end="49:40"><expr pos:start="49:38" pos:end="49:40"><literal type="string" pos:start="49:38" pos:end="49:40">" "</literal></expr></argument>, <argument pos:start="49:43" pos:end="49:54"><expr pos:start="49:43" pos:end="49:54"><name pos:start="49:43" pos:end="49:54">COMMAND_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>



            <expr_stmt pos:start="55:13" pos:end="55:46"><expr pos:start="55:13" pos:end="55:45"><call pos:start="55:13" pos:end="55:45"><name pos:start="55:13" pos:end="55:16">dup2</name><argument_list pos:start="55:17" pos:end="55:45">( <argument pos:start="55:19" pos:end="55:29"><expr pos:start="55:19" pos:end="55:29"><name pos:start="55:19" pos:end="55:29"><name pos:start="55:19" pos:end="55:24">output</name><index pos:start="55:25" pos:end="55:29">[ <expr pos:start="55:27" pos:end="55:27"><literal type="number" pos:start="55:27" pos:end="55:27">0</literal></expr> ]</index></name></expr></argument>, <argument pos:start="55:32" pos:end="55:43"><expr pos:start="55:32" pos:end="55:43"><name pos:start="55:32" pos:end="55:43">STDIN_FILENO</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:46"><expr pos:start="57:13" pos:end="57:45"><call pos:start="57:13" pos:end="57:45"><name pos:start="57:13" pos:end="57:16">dup2</name><argument_list pos:start="57:17" pos:end="57:45">( <argument pos:start="57:19" pos:end="57:28"><expr pos:start="57:19" pos:end="57:28"><name pos:start="57:19" pos:end="57:28"><name pos:start="57:19" pos:end="57:23">input</name><index pos:start="57:24" pos:end="57:28">[ <expr pos:start="57:26" pos:end="57:26"><literal type="number" pos:start="57:26" pos:end="57:26">1</literal></expr> ]</index></name></expr></argument>, <argument pos:start="57:31" pos:end="57:43"><expr pos:start="57:31" pos:end="57:43"><name pos:start="57:31" pos:end="57:43">STDOUT_FILENO</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="61:13" pos:end="61:32"><expr pos:start="61:13" pos:end="61:31"><call pos:start="61:13" pos:end="61:31"><name pos:start="61:13" pos:end="61:17">close</name><argument_list pos:start="61:18" pos:end="61:31">( <argument pos:start="61:20" pos:end="61:29"><expr pos:start="61:20" pos:end="61:29"><name pos:start="61:20" pos:end="61:29"><name pos:start="61:20" pos:end="61:24">input</name><index pos:start="61:25" pos:end="61:29">[ <expr pos:start="61:27" pos:end="61:27"><literal type="number" pos:start="61:27" pos:end="61:27">0</literal></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:32"><expr pos:start="63:13" pos:end="63:31"><call pos:start="63:13" pos:end="63:31"><name pos:start="63:13" pos:end="63:17">close</name><argument_list pos:start="63:18" pos:end="63:31">( <argument pos:start="63:20" pos:end="63:29"><expr pos:start="63:20" pos:end="63:29"><name pos:start="63:20" pos:end="63:29"><name pos:start="63:20" pos:end="63:24">input</name><index pos:start="63:25" pos:end="63:29">[ <expr pos:start="63:27" pos:end="63:27"><literal type="number" pos:start="63:27" pos:end="63:27">1</literal></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:33"><expr pos:start="65:13" pos:end="65:32"><call pos:start="65:13" pos:end="65:32"><name pos:start="65:13" pos:end="65:17">close</name><argument_list pos:start="65:18" pos:end="65:32">( <argument pos:start="65:20" pos:end="65:30"><expr pos:start="65:20" pos:end="65:30"><name pos:start="65:20" pos:end="65:30"><name pos:start="65:20" pos:end="65:25">output</name><index pos:start="65:26" pos:end="65:30">[ <expr pos:start="65:28" pos:end="65:28"><literal type="number" pos:start="65:28" pos:end="65:28">0</literal></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:33"><expr pos:start="67:13" pos:end="67:32"><call pos:start="67:13" pos:end="67:32"><name pos:start="67:13" pos:end="67:17">close</name><argument_list pos:start="67:18" pos:end="67:32">( <argument pos:start="67:20" pos:end="67:30"><expr pos:start="67:20" pos:end="67:30"><name pos:start="67:20" pos:end="67:30"><name pos:start="67:20" pos:end="67:25">output</name><index pos:start="67:26" pos:end="67:30">[ <expr pos:start="67:28" pos:end="67:28"><literal type="number" pos:start="67:28" pos:end="67:28">1</literal></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="71:13" pos:end="71:64"><expr pos:start="71:13" pos:end="71:63"><call pos:start="71:13" pos:end="71:63"><name pos:start="71:13" pos:end="71:17">execl</name><argument_list pos:start="71:18" pos:end="71:63">(<argument pos:start="71:19" pos:end="71:27"><expr pos:start="71:19" pos:end="71:27"><literal type="string" pos:start="71:19" pos:end="71:27">"/bin/sh"</literal></expr></argument>, <argument pos:start="71:30" pos:end="71:33"><expr pos:start="71:30" pos:end="71:33"><literal type="string" pos:start="71:30" pos:end="71:33">"sh"</literal></expr></argument>, <argument pos:start="71:36" pos:end="71:39"><expr pos:start="71:36" pos:end="71:39"><literal type="string" pos:start="71:36" pos:end="71:39">"-c"</literal></expr></argument>, <argument pos:start="71:42" pos:end="71:48"><expr pos:start="71:42" pos:end="71:48"><name pos:start="71:42" pos:end="71:48">command</name></expr></argument>, <argument pos:start="71:51" pos:end="71:61"><expr pos:start="71:51" pos:end="71:61"><operator pos:start="71:51" pos:end="71:51">(</operator><name pos:start="71:52" pos:end="71:55">char</name><operator pos:start="71:56" pos:end="71:56">*</operator><operator pos:start="71:57" pos:end="71:57">)</operator><name pos:start="71:58" pos:end="71:61">NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:25"><expr pos:start="73:13" pos:end="73:24"><call pos:start="73:13" pos:end="73:24"><name pos:start="73:13" pos:end="73:17">_exit</name><argument_list pos:start="73:18" pos:end="73:24">( <argument pos:start="73:20" pos:end="73:22"><expr pos:start="73:20" pos:end="73:22"><literal type="number" pos:start="73:20" pos:end="73:22">255</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if>

        <else pos:start="77:9" pos:end="91:9">else

        <block pos:start="79:9" pos:end="91:9">{<block_content pos:start="81:13" pos:end="89:54">

            <expr_stmt pos:start="81:13" pos:end="81:32"><expr pos:start="81:13" pos:end="81:31"><call pos:start="81:13" pos:end="81:31"><name pos:start="81:13" pos:end="81:17">close</name><argument_list pos:start="81:18" pos:end="81:31">( <argument pos:start="81:20" pos:end="81:29"><expr pos:start="81:20" pos:end="81:29"><name pos:start="81:20" pos:end="81:29"><name pos:start="81:20" pos:end="81:24">input</name><index pos:start="81:25" pos:end="81:29">[ <expr pos:start="81:27" pos:end="81:27"><literal type="number" pos:start="81:27" pos:end="81:27">1</literal></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:33"><expr pos:start="83:13" pos:end="83:32"><call pos:start="83:13" pos:end="83:32"><name pos:start="83:13" pos:end="83:17">close</name><argument_list pos:start="83:18" pos:end="83:32">( <argument pos:start="83:20" pos:end="83:30"><expr pos:start="83:20" pos:end="83:30"><name pos:start="83:20" pos:end="83:30"><name pos:start="83:20" pos:end="83:25">output</name><index pos:start="83:26" pos:end="83:30">[ <expr pos:start="83:28" pos:end="83:28"><literal type="number" pos:start="83:28" pos:end="83:28">0</literal></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="87:13" pos:end="87:53"><expr pos:start="87:13" pos:end="87:52"><name pos:start="87:13" pos:end="87:24"><name pos:start="87:13" pos:end="87:16">this</name><operator pos:start="87:17" pos:end="87:18">-&gt;</operator><name pos:start="87:19" pos:end="87:24">reader</name></name> <operator pos:start="87:26" pos:end="87:26">=</operator> <call pos:start="87:28" pos:end="87:52"><name pos:start="87:28" pos:end="87:33">fdopen</name><argument_list pos:start="87:34" pos:end="87:52">( <argument pos:start="87:36" pos:end="87:45"><expr pos:start="87:36" pos:end="87:45"><name pos:start="87:36" pos:end="87:45"><name pos:start="87:36" pos:end="87:40">input</name><index pos:start="87:41" pos:end="87:45">[ <expr pos:start="87:43" pos:end="87:43"><literal type="number" pos:start="87:43" pos:end="87:43">0</literal></expr> ]</index></name></expr></argument>, <argument pos:start="87:48" pos:end="87:50"><expr pos:start="87:48" pos:end="87:50"><literal type="string" pos:start="87:48" pos:end="87:50">"r"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:54"><expr pos:start="89:13" pos:end="89:53"><name pos:start="89:13" pos:end="89:24"><name pos:start="89:13" pos:end="89:16">this</name><operator pos:start="89:17" pos:end="89:18">-&gt;</operator><name pos:start="89:19" pos:end="89:24">writer</name></name> <operator pos:start="89:26" pos:end="89:26">=</operator> <call pos:start="89:28" pos:end="89:53"><name pos:start="89:28" pos:end="89:33">fdopen</name><argument_list pos:start="89:34" pos:end="89:53">( <argument pos:start="89:36" pos:end="89:46"><expr pos:start="89:36" pos:end="89:46"><name pos:start="89:36" pos:end="89:46"><name pos:start="89:36" pos:end="89:41">output</name><index pos:start="89:42" pos:end="89:46">[ <expr pos:start="89:44" pos:end="89:44"><literal type="number" pos:start="89:44" pos:end="89:44">1</literal></expr> ]</index></name></expr></argument>, <argument pos:start="89:49" pos:end="89:51"><expr pos:start="89:49" pos:end="89:51"><literal type="string" pos:start="89:49" pos:end="89:51">"w"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="97:5" pos:end="97:16">return <expr pos:start="97:12" pos:end="97:15"><name pos:start="97:12" pos:end="97:15">this</name></expr>;</return>

</block_content>}</block></function>
</unit>
