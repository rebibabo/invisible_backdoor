<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4355.c" pos:tabs="8"><function pos:start="1:1" pos:end="485:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">vp9_handle_packet</name><parameter_list pos:start="1:29" pos:end="7:39">(<parameter pos:start="1:30" pos:end="1:49"><decl pos:start="1:30" pos:end="1:49"><type pos:start="1:30" pos:end="1:49"><name pos:start="1:30" pos:end="1:44">AVFormatContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">ctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:78"><decl pos:start="1:52" pos:end="1:78"><type pos:start="1:52" pos:end="1:78"><name pos:start="1:52" pos:end="1:65">PayloadContext</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:78">rtp_vp9_ctx</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:41"><decl pos:start="3:30" pos:end="3:41"><type pos:start="3:30" pos:end="3:41"><name pos:start="3:30" pos:end="3:37">AVStream</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:41">st</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:56"><decl pos:start="3:44" pos:end="3:56"><type pos:start="3:44" pos:end="3:56"><name pos:start="3:44" pos:end="3:51">AVPacket</name> <modifier pos:start="3:53" pos:end="3:53">*</modifier></type><name pos:start="3:54" pos:end="3:56">pkt</name></decl></parameter>, <parameter pos:start="3:59" pos:end="3:77"><decl pos:start="3:59" pos:end="3:77"><type pos:start="3:59" pos:end="3:77"><name pos:start="3:59" pos:end="3:66">uint32_t</name> <modifier pos:start="3:68" pos:end="3:68">*</modifier></type><name pos:start="3:69" pos:end="3:77">timestamp</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:47"><decl pos:start="5:30" pos:end="5:47"><type pos:start="5:30" pos:end="5:47"><specifier pos:start="5:30" pos:end="5:34">const</specifier> <name pos:start="5:36" pos:end="5:42">uint8_t</name> <modifier pos:start="5:44" pos:end="5:44">*</modifier></type><name pos:start="5:45" pos:end="5:47">buf</name></decl></parameter>, <parameter pos:start="5:50" pos:end="5:56"><decl pos:start="5:50" pos:end="5:56"><type pos:start="5:50" pos:end="5:56"><name pos:start="5:50" pos:end="5:52">int</name></type> <name pos:start="5:54" pos:end="5:56">len</name></decl></parameter>, <parameter pos:start="5:59" pos:end="5:70"><decl pos:start="5:59" pos:end="5:70"><type pos:start="5:59" pos:end="5:70"><name pos:start="5:59" pos:end="5:66">uint16_t</name></type> <name pos:start="5:68" pos:end="5:70">seq</name></decl></parameter>,

                             <parameter pos:start="7:30" pos:end="7:38"><decl pos:start="7:30" pos:end="7:38"><type pos:start="7:30" pos:end="7:38"><name pos:start="7:30" pos:end="7:32">int</name></type> <name pos:start="7:34" pos:end="7:38">flags</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="485:1">{<block_content pos:start="11:5" pos:end="483:13">

    <decl_stmt pos:start="11:5" pos:end="11:73"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:18">has_pic_id</name></decl>, <decl pos:start="11:21" pos:end="11:33"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:21" pos:end="11:33">has_layer_idc</name></decl>, <decl pos:start="11:36" pos:end="11:46"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:36" pos:end="11:46">has_ref_idc</name></decl>, <decl pos:start="11:49" pos:end="11:59"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:49" pos:end="11:59">has_ss_data</name></decl>, <decl pos:start="11:62" pos:end="11:72"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:62" pos:end="11:72">has_su_data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:48"><decl pos:start="13:5" pos:end="13:28"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:13">av_unused</name> <name pos:start="13:15" pos:end="13:17">int</name></type> <name pos:start="13:19" pos:end="13:24">pic_id</name> <init pos:start="13:26" pos:end="13:28">= <expr pos:start="13:28" pos:end="13:28"><literal type="number" pos:start="13:28" pos:end="13:28">0</literal></expr></init></decl>, <decl pos:start="13:31" pos:end="13:47"><type ref="prev" pos:start="13:5" pos:end="13:17"/><name pos:start="13:31" pos:end="13:43">non_key_frame</name> <init pos:start="13:45" pos:end="13:47">= <expr pos:start="13:47" pos:end="13:47"><literal type="number" pos:start="13:47" pos:end="13:47">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:78"><decl pos:start="15:5" pos:end="15:37"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:13">av_unused</name> <name pos:start="15:15" pos:end="15:17">int</name></type> <name pos:start="15:19" pos:end="15:32">layer_temporal</name> <init pos:start="15:34" pos:end="15:37">= <expr pos:start="15:36" pos:end="15:37"><operator pos:start="15:36" pos:end="15:36">-</operator><literal type="number" pos:start="15:37" pos:end="15:37">1</literal></expr></init></decl>, <decl pos:start="15:40" pos:end="15:57"><type ref="prev" pos:start="15:5" pos:end="15:17"/><name pos:start="15:40" pos:end="15:52">layer_spatial</name> <init pos:start="15:54" pos:end="15:57">= <expr pos:start="15:56" pos:end="15:57"><operator pos:start="15:56" pos:end="15:56">-</operator><literal type="number" pos:start="15:57" pos:end="15:57">1</literal></expr></init></decl>, <decl pos:start="15:60" pos:end="15:77"><type ref="prev" pos:start="15:5" pos:end="15:17"/><name pos:start="15:60" pos:end="15:72">layer_quality</name> <init pos:start="15:74" pos:end="15:77">= <expr pos:start="15:76" pos:end="15:77"><operator pos:start="15:76" pos:end="15:76">-</operator><literal type="number" pos:start="15:77" pos:end="15:77">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:53"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:18">ref_fields</name> <init pos:start="17:20" pos:end="17:22">= <expr pos:start="17:22" pos:end="17:22"><literal type="number" pos:start="17:22" pos:end="17:22">0</literal></expr></init></decl>, <decl pos:start="17:25" pos:end="17:52"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:25" pos:end="17:48">has_ref_field_ext_pic_id</name> <init pos:start="17:50" pos:end="17:52">= <expr pos:start="17:52" pos:end="17:52"><literal type="number" pos:start="17:52" pos:end="17:52">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:38"><decl pos:start="19:5" pos:end="19:22"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:22">first_fragment</name></decl>, <decl pos:start="19:25" pos:end="19:37"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:25" pos:end="19:37">last_fragment</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:14"><decl pos:start="21:5" pos:end="21:13"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:13">rtp_m</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:16"><decl pos:start="23:5" pos:end="23:15"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:11">res</name> <init pos:start="23:13" pos:end="23:15">= <expr pos:start="23:15" pos:end="23:15"><literal type="number" pos:start="23:15" pos:end="23:15">0</literal></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:87">/* drop data of previous packets in case of non-continuous (lossy) packet stream */</comment>

    <if_stmt pos:start="29:5" pos:end="31:45"><if pos:start="29:5" pos:end="31:45">if <condition pos:start="29:8" pos:end="29:65">(<expr pos:start="29:9" pos:end="29:64"><name pos:start="29:9" pos:end="29:24"><name pos:start="29:9" pos:end="29:19">rtp_vp9_ctx</name><operator pos:start="29:20" pos:end="29:21">-&gt;</operator><name pos:start="29:22" pos:end="29:24">buf</name></name> <operator pos:start="29:26" pos:end="29:27">&amp;&amp;</operator> <name pos:start="29:29" pos:end="29:50"><name pos:start="29:29" pos:end="29:39">rtp_vp9_ctx</name><operator pos:start="29:40" pos:end="29:41">-&gt;</operator><name pos:start="29:42" pos:end="29:50">timestamp</name></name> <operator pos:start="29:52" pos:end="29:53">!=</operator> <operator pos:start="29:55" pos:end="29:55">*</operator><name pos:start="29:56" pos:end="29:64">timestamp</name></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:45"><block_content pos:start="31:9" pos:end="31:45">

        <expr_stmt pos:start="31:9" pos:end="31:45"><expr pos:start="31:9" pos:end="31:44"><call pos:start="31:9" pos:end="31:44"><name pos:start="31:9" pos:end="31:25">ffio_free_dyn_buf</name><argument_list pos:start="31:26" pos:end="31:44">(<argument pos:start="31:27" pos:end="31:43"><expr pos:start="31:27" pos:end="31:43"><operator pos:start="31:27" pos:end="31:27">&amp;</operator><name pos:start="31:28" pos:end="31:43"><name pos:start="31:28" pos:end="31:38">rtp_vp9_ctx</name><operator pos:start="31:39" pos:end="31:40">-&gt;</operator><name pos:start="31:41" pos:end="31:43">buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:72">/* sanity check for size of input packet: 1 byte payload at least */</comment>

    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:45">(<expr pos:start="37:9" pos:end="37:44"><name pos:start="37:9" pos:end="37:11">len</name> <operator pos:start="37:13" pos:end="37:13">&lt;</operator> <name pos:start="37:15" pos:end="37:40">RTP_VP9_DESC_REQUIRED_SIZE</name> <operator pos:start="37:42" pos:end="37:42">+</operator> <literal type="number" pos:start="37:44" pos:end="37:44">1</literal></expr>)</condition> <block pos:start="37:47" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:35">

        <expr_stmt pos:start="39:9" pos:end="39:83"><expr pos:start="39:9" pos:end="39:82"><call pos:start="39:9" pos:end="39:82"><name pos:start="39:9" pos:end="39:14">av_log</name><argument_list pos:start="39:15" pos:end="39:82">(<argument pos:start="39:16" pos:end="39:18"><expr pos:start="39:16" pos:end="39:18"><name pos:start="39:16" pos:end="39:18">ctx</name></expr></argument>, <argument pos:start="39:21" pos:end="39:32"><expr pos:start="39:21" pos:end="39:32"><name pos:start="39:21" pos:end="39:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="39:35" pos:end="39:76"><expr pos:start="39:35" pos:end="39:76"><literal type="string" pos:start="39:35" pos:end="39:76">"Too short RTP/VP9 packet, got %d bytes\n"</literal></expr></argument>, <argument pos:start="39:79" pos:end="39:81"><expr pos:start="39:79" pos:end="39:81"><name pos:start="39:79" pos:end="39:81">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:35">return <expr pos:start="41:16" pos:end="41:34"><name pos:start="41:16" pos:end="41:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="47:5" pos:end="77:7">/*

     *     decode the required VP9 payload descriptor according to section 4.2 of the spec.:

     *

     *      0 1 2 3 4 5 6 7

     *     +-+-+-+-+-+-+-+-+

     *     |I|L|F|B|E|V|U|-| (REQUIRED)

     *     +-+-+-+-+-+-+-+-+

     *

     *     I: PictureID present

     *     L: Layer indices present

     *     F: Reference indices present

     *     B: Start of VP9 frame

     *     E: End of picture

     *     V: Scalability Structure (SS) present

     *     U: Scalability Structure Update (SU) present

     */</comment>

    <expr_stmt pos:start="79:5" pos:end="79:39"><expr pos:start="79:5" pos:end="79:38"><name pos:start="79:5" pos:end="79:14">has_pic_id</name>     <operator pos:start="79:20" pos:end="79:20">=</operator> <operator pos:start="79:22" pos:end="79:22">!</operator><operator pos:start="79:23" pos:end="79:23">!</operator><operator pos:start="79:24" pos:end="79:24">(</operator><name pos:start="79:25" pos:end="79:30"><name pos:start="79:25" pos:end="79:27">buf</name><index pos:start="79:28" pos:end="79:30">[<expr pos:start="79:29" pos:end="79:29"><literal type="number" pos:start="79:29" pos:end="79:29">0</literal></expr>]</index></name> <operator pos:start="79:32" pos:end="79:32">&amp;</operator> <literal type="number" pos:start="79:34" pos:end="79:37">0x80</literal><operator pos:start="79:38" pos:end="79:38">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:39"><expr pos:start="81:5" pos:end="81:38"><name pos:start="81:5" pos:end="81:17">has_layer_idc</name>  <operator pos:start="81:20" pos:end="81:20">=</operator> <operator pos:start="81:22" pos:end="81:22">!</operator><operator pos:start="81:23" pos:end="81:23">!</operator><operator pos:start="81:24" pos:end="81:24">(</operator><name pos:start="81:25" pos:end="81:30"><name pos:start="81:25" pos:end="81:27">buf</name><index pos:start="81:28" pos:end="81:30">[<expr pos:start="81:29" pos:end="81:29"><literal type="number" pos:start="81:29" pos:end="81:29">0</literal></expr>]</index></name> <operator pos:start="81:32" pos:end="81:32">&amp;</operator> <literal type="number" pos:start="81:34" pos:end="81:37">0x40</literal><operator pos:start="81:38" pos:end="81:38">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:39"><expr pos:start="83:5" pos:end="83:38"><name pos:start="83:5" pos:end="83:15">has_ref_idc</name>    <operator pos:start="83:20" pos:end="83:20">=</operator> <operator pos:start="83:22" pos:end="83:22">!</operator><operator pos:start="83:23" pos:end="83:23">!</operator><operator pos:start="83:24" pos:end="83:24">(</operator><name pos:start="83:25" pos:end="83:30"><name pos:start="83:25" pos:end="83:27">buf</name><index pos:start="83:28" pos:end="83:30">[<expr pos:start="83:29" pos:end="83:29"><literal type="number" pos:start="83:29" pos:end="83:29">0</literal></expr>]</index></name> <operator pos:start="83:32" pos:end="83:32">&amp;</operator> <literal type="number" pos:start="83:34" pos:end="83:37">0x20</literal><operator pos:start="83:38" pos:end="83:38">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:39"><expr pos:start="85:5" pos:end="85:38"><name pos:start="85:5" pos:end="85:18">first_fragment</name> <operator pos:start="85:20" pos:end="85:20">=</operator> <operator pos:start="85:22" pos:end="85:22">!</operator><operator pos:start="85:23" pos:end="85:23">!</operator><operator pos:start="85:24" pos:end="85:24">(</operator><name pos:start="85:25" pos:end="85:30"><name pos:start="85:25" pos:end="85:27">buf</name><index pos:start="85:28" pos:end="85:30">[<expr pos:start="85:29" pos:end="85:29"><literal type="number" pos:start="85:29" pos:end="85:29">0</literal></expr>]</index></name> <operator pos:start="85:32" pos:end="85:32">&amp;</operator> <literal type="number" pos:start="85:34" pos:end="85:37">0x10</literal><operator pos:start="85:38" pos:end="85:38">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:39"><expr pos:start="87:5" pos:end="87:38"><name pos:start="87:5" pos:end="87:17">last_fragment</name>  <operator pos:start="87:20" pos:end="87:20">=</operator> <operator pos:start="87:22" pos:end="87:22">!</operator><operator pos:start="87:23" pos:end="87:23">!</operator><operator pos:start="87:24" pos:end="87:24">(</operator><name pos:start="87:25" pos:end="87:30"><name pos:start="87:25" pos:end="87:27">buf</name><index pos:start="87:28" pos:end="87:30">[<expr pos:start="87:29" pos:end="87:29"><literal type="number" pos:start="87:29" pos:end="87:29">0</literal></expr>]</index></name> <operator pos:start="87:32" pos:end="87:32">&amp;</operator> <literal type="number" pos:start="87:34" pos:end="87:37">0x08</literal><operator pos:start="87:38" pos:end="87:38">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:39"><expr pos:start="89:5" pos:end="89:38"><name pos:start="89:5" pos:end="89:15">has_ss_data</name>    <operator pos:start="89:20" pos:end="89:20">=</operator> <operator pos:start="89:22" pos:end="89:22">!</operator><operator pos:start="89:23" pos:end="89:23">!</operator><operator pos:start="89:24" pos:end="89:24">(</operator><name pos:start="89:25" pos:end="89:30"><name pos:start="89:25" pos:end="89:27">buf</name><index pos:start="89:28" pos:end="89:30">[<expr pos:start="89:29" pos:end="89:29"><literal type="number" pos:start="89:29" pos:end="89:29">0</literal></expr>]</index></name> <operator pos:start="89:32" pos:end="89:32">&amp;</operator> <literal type="number" pos:start="89:34" pos:end="89:37">0x04</literal><operator pos:start="89:38" pos:end="89:38">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:39"><expr pos:start="91:5" pos:end="91:38"><name pos:start="91:5" pos:end="91:15">has_su_data</name>    <operator pos:start="91:20" pos:end="91:20">=</operator> <operator pos:start="91:22" pos:end="91:22">!</operator><operator pos:start="91:23" pos:end="91:23">!</operator><operator pos:start="91:24" pos:end="91:24">(</operator><name pos:start="91:25" pos:end="91:30"><name pos:start="91:25" pos:end="91:27">buf</name><index pos:start="91:28" pos:end="91:30">[<expr pos:start="91:29" pos:end="91:29"><literal type="number" pos:start="91:29" pos:end="91:29">0</literal></expr>]</index></name> <operator pos:start="91:32" pos:end="91:32">&amp;</operator> <literal type="number" pos:start="91:34" pos:end="91:37">0x02</literal><operator pos:start="91:38" pos:end="91:38">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:40"><expr pos:start="95:5" pos:end="95:39"><name pos:start="95:5" pos:end="95:9">rtp_m</name> <operator pos:start="95:11" pos:end="95:11">=</operator> <operator pos:start="95:13" pos:end="95:13">!</operator><operator pos:start="95:14" pos:end="95:14">!</operator><operator pos:start="95:15" pos:end="95:15">(</operator><name pos:start="95:16" pos:end="95:20">flags</name> <operator pos:start="95:22" pos:end="95:22">&amp;</operator> <name pos:start="95:24" pos:end="95:38">RTP_FLAG_MARKER</name><operator pos:start="95:39" pos:end="95:39">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="99:5" pos:end="99:80">/* sanity check for markers: B should always be equal to the RTP M marker */</comment>

    <if_stmt pos:start="101:5" pos:end="107:5"><if pos:start="101:5" pos:end="107:5">if <condition pos:start="101:8" pos:end="101:31">(<expr pos:start="101:9" pos:end="101:30"><name pos:start="101:9" pos:end="101:21">last_fragment</name> <operator pos:start="101:23" pos:end="101:24">!=</operator> <name pos:start="101:26" pos:end="101:30">rtp_m</name></expr>)</condition> <block pos:start="101:33" pos:end="107:5">{<block_content pos:start="103:9" pos:end="105:35">

        <expr_stmt pos:start="103:9" pos:end="103:110"><expr pos:start="103:9" pos:end="103:109"><call pos:start="103:9" pos:end="103:109"><name pos:start="103:9" pos:end="103:14">av_log</name><argument_list pos:start="103:15" pos:end="103:109">(<argument pos:start="103:16" pos:end="103:18"><expr pos:start="103:16" pos:end="103:18"><name pos:start="103:16" pos:end="103:18">ctx</name></expr></argument>, <argument pos:start="103:21" pos:end="103:32"><expr pos:start="103:21" pos:end="103:32"><name pos:start="103:21" pos:end="103:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="103:35" pos:end="103:86"><expr pos:start="103:35" pos:end="103:86"><literal type="string" pos:start="103:35" pos:end="103:86">"Invalid combination of B and M marker (%d != %d)\n"</literal></expr></argument>, <argument pos:start="103:89" pos:end="103:101"><expr pos:start="103:89" pos:end="103:101"><name pos:start="103:89" pos:end="103:101">last_fragment</name></expr></argument>, <argument pos:start="103:104" pos:end="103:108"><expr pos:start="103:104" pos:end="103:108"><name pos:start="103:104" pos:end="103:108">rtp_m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="105:9" pos:end="105:35">return <expr pos:start="105:16" pos:end="105:34"><name pos:start="105:16" pos:end="105:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="111:5" pos:end="111:35">/* pass the extensions field */</comment>

    <expr_stmt pos:start="113:5" pos:end="113:38"><expr pos:start="113:5" pos:end="113:37"><name pos:start="113:5" pos:end="113:7">buf</name> <operator pos:start="113:9" pos:end="113:10">+=</operator> <name pos:start="113:12" pos:end="113:37">RTP_VP9_DESC_REQUIRED_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:38"><expr pos:start="115:5" pos:end="115:37"><name pos:start="115:5" pos:end="115:7">len</name> <operator pos:start="115:9" pos:end="115:10">-=</operator> <name pos:start="115:12" pos:end="115:37">RTP_VP9_DESC_REQUIRED_SIZE</name></expr>;</expr_stmt>



    <comment type="block" pos:start="119:5" pos:end="143:7">/*

     *         decode the 1-byte/2-byte picture ID:

     *

     *          0 1 2 3 4 5 6 7

     *         +-+-+-+-+-+-+-+-+

     *   I:    |M|PICTURE ID   | (RECOMMENDED)

     *         +-+-+-+-+-+-+-+-+

     *   M:    | EXTENDED PID  | (RECOMMENDED)

     *         +-+-+-+-+-+-+-+-+

     *

     *   M: The most significant bit of the first octet is an extension flag.

     *   PictureID:  8 or 16 bits including the M bit.

     */</comment>

    <if_stmt pos:start="145:5" pos:end="185:5"><if pos:start="145:5" pos:end="185:5">if <condition pos:start="145:8" pos:end="145:19">(<expr pos:start="145:9" pos:end="145:18"><name pos:start="145:9" pos:end="145:18">has_pic_id</name></expr>)</condition> <block pos:start="145:21" pos:end="185:5">{<block_content pos:start="147:9" pos:end="183:9">

        <if_stmt pos:start="147:9" pos:end="153:9"><if pos:start="147:9" pos:end="153:9">if <condition pos:start="147:12" pos:end="147:20">(<expr pos:start="147:13" pos:end="147:19"><name pos:start="147:13" pos:end="147:15">len</name> <operator pos:start="147:17" pos:end="147:17">&lt;</operator> <literal type="number" pos:start="147:19" pos:end="147:19">1</literal></expr>)</condition> <block pos:start="147:22" pos:end="153:9">{<block_content pos:start="149:13" pos:end="151:39">

            <expr_stmt pos:start="149:13" pos:end="149:68"><expr pos:start="149:13" pos:end="149:67"><call pos:start="149:13" pos:end="149:67"><name pos:start="149:13" pos:end="149:18">av_log</name><argument_list pos:start="149:19" pos:end="149:67">(<argument pos:start="149:20" pos:end="149:22"><expr pos:start="149:20" pos:end="149:22"><name pos:start="149:20" pos:end="149:22">ctx</name></expr></argument>, <argument pos:start="149:25" pos:end="149:36"><expr pos:start="149:25" pos:end="149:36"><name pos:start="149:25" pos:end="149:36">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="149:39" pos:end="149:66"><expr pos:start="149:39" pos:end="149:66"><literal type="string" pos:start="149:39" pos:end="149:66">"Too short RTP/VP9 packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="151:13" pos:end="151:39">return <expr pos:start="151:20" pos:end="151:38"><name pos:start="151:20" pos:end="151:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="157:9" pos:end="157:54">/* check for 1-byte or 2-byte picture index */</comment>

        <if_stmt pos:start="159:9" pos:end="183:9"><if pos:start="159:9" pos:end="175:9">if <condition pos:start="159:12" pos:end="159:26">(<expr pos:start="159:13" pos:end="159:25"><name pos:start="159:13" pos:end="159:18"><name pos:start="159:13" pos:end="159:15">buf</name><index pos:start="159:16" pos:end="159:18">[<expr pos:start="159:17" pos:end="159:17"><literal type="number" pos:start="159:17" pos:end="159:17">0</literal></expr>]</index></name> <operator pos:start="159:20" pos:end="159:20">&amp;</operator> <literal type="number" pos:start="159:22" pos:end="159:25">0x80</literal></expr>)</condition> <block pos:start="159:28" pos:end="175:9">{<block_content pos:start="161:13" pos:end="173:21">

            <if_stmt pos:start="161:13" pos:end="167:13"><if pos:start="161:13" pos:end="167:13">if <condition pos:start="161:16" pos:end="161:24">(<expr pos:start="161:17" pos:end="161:23"><name pos:start="161:17" pos:end="161:19">len</name> <operator pos:start="161:21" pos:end="161:21">&lt;</operator> <literal type="number" pos:start="161:23" pos:end="161:23">2</literal></expr>)</condition> <block pos:start="161:26" pos:end="167:13">{<block_content pos:start="163:17" pos:end="165:43">

                <expr_stmt pos:start="163:17" pos:end="163:72"><expr pos:start="163:17" pos:end="163:71"><call pos:start="163:17" pos:end="163:71"><name pos:start="163:17" pos:end="163:22">av_log</name><argument_list pos:start="163:23" pos:end="163:71">(<argument pos:start="163:24" pos:end="163:26"><expr pos:start="163:24" pos:end="163:26"><name pos:start="163:24" pos:end="163:26">ctx</name></expr></argument>, <argument pos:start="163:29" pos:end="163:40"><expr pos:start="163:29" pos:end="163:40"><name pos:start="163:29" pos:end="163:40">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="163:43" pos:end="163:70"><expr pos:start="163:43" pos:end="163:70"><literal type="string" pos:start="163:43" pos:end="163:70">"Too short RTP/VP9 packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="165:17" pos:end="165:43">return <expr pos:start="165:24" pos:end="165:42"><name pos:start="165:24" pos:end="165:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="169:13" pos:end="169:43"><expr pos:start="169:13" pos:end="169:42"><name pos:start="169:13" pos:end="169:18">pic_id</name> <operator pos:start="169:20" pos:end="169:20">=</operator> <call pos:start="169:22" pos:end="169:33"><name pos:start="169:22" pos:end="169:28">AV_RB16</name><argument_list pos:start="169:29" pos:end="169:33">(<argument pos:start="169:30" pos:end="169:32"><expr pos:start="169:30" pos:end="169:32"><name pos:start="169:30" pos:end="169:32">buf</name></expr></argument>)</argument_list></call> <operator pos:start="169:35" pos:end="169:35">&amp;</operator> <literal type="number" pos:start="169:37" pos:end="169:42">0x7fff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:21"><expr pos:start="171:13" pos:end="171:20"><name pos:start="171:13" pos:end="171:15">buf</name> <operator pos:start="171:17" pos:end="171:18">+=</operator> <literal type="number" pos:start="171:20" pos:end="171:20">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:21"><expr pos:start="173:13" pos:end="173:20"><name pos:start="173:13" pos:end="173:15">len</name> <operator pos:start="173:17" pos:end="173:18">-=</operator> <literal type="number" pos:start="173:20" pos:end="173:20">2</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="175:11" pos:end="183:9">else <block pos:start="175:16" pos:end="183:9">{<block_content pos:start="177:13" pos:end="181:18">

            <expr_stmt pos:start="177:13" pos:end="177:35"><expr pos:start="177:13" pos:end="177:34"><name pos:start="177:13" pos:end="177:18">pic_id</name> <operator pos:start="177:20" pos:end="177:20">=</operator> <name pos:start="177:22" pos:end="177:27"><name pos:start="177:22" pos:end="177:24">buf</name><index pos:start="177:25" pos:end="177:27">[<expr pos:start="177:26" pos:end="177:26"><literal type="number" pos:start="177:26" pos:end="177:26">0</literal></expr>]</index></name> <operator pos:start="177:29" pos:end="177:29">&amp;</operator> <literal type="number" pos:start="177:31" pos:end="177:34">0x7f</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:18"><expr pos:start="179:13" pos:end="179:17"><name pos:start="179:13" pos:end="179:15">buf</name><operator pos:start="179:16" pos:end="179:17">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="181:13" pos:end="181:18"><expr pos:start="181:13" pos:end="181:17"><name pos:start="181:13" pos:end="181:15">len</name><operator pos:start="181:16" pos:end="181:17">--</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="189:5" pos:end="211:7">/*

     *         decode layer indices

     *

     *          0 1 2 3 4 5 6 7

     *         +-+-+-+-+-+-+-+-+

     *   L:    | T | S | Q | R | (CONDITIONALLY RECOMMENDED)

     *         +-+-+-+-+-+-+-+-+

     *

     *   T, S and Q are 2-bit indices for temporal, spatial, and quality layers.

     *   If "F" is set in the initial octet, R is 2 bits representing the number

     *   of reference fields this frame refers to.

     */</comment>

    <if_stmt pos:start="213:5" pos:end="243:5"><if pos:start="213:5" pos:end="243:5">if <condition pos:start="213:8" pos:end="213:22">(<expr pos:start="213:9" pos:end="213:21"><name pos:start="213:9" pos:end="213:21">has_layer_idc</name></expr>)</condition> <block pos:start="213:24" pos:end="243:5">{<block_content pos:start="215:9" pos:end="241:14">

        <if_stmt pos:start="215:9" pos:end="221:9"><if pos:start="215:9" pos:end="221:9">if <condition pos:start="215:12" pos:end="215:20">(<expr pos:start="215:13" pos:end="215:19"><name pos:start="215:13" pos:end="215:15">len</name> <operator pos:start="215:17" pos:end="215:17">&lt;</operator> <literal type="number" pos:start="215:19" pos:end="215:19">1</literal></expr>)</condition> <block pos:start="215:22" pos:end="221:9">{<block_content pos:start="217:13" pos:end="219:39">

            <expr_stmt pos:start="217:13" pos:end="217:68"><expr pos:start="217:13" pos:end="217:67"><call pos:start="217:13" pos:end="217:67"><name pos:start="217:13" pos:end="217:18">av_log</name><argument_list pos:start="217:19" pos:end="217:67">(<argument pos:start="217:20" pos:end="217:22"><expr pos:start="217:20" pos:end="217:22"><name pos:start="217:20" pos:end="217:22">ctx</name></expr></argument>, <argument pos:start="217:25" pos:end="217:36"><expr pos:start="217:25" pos:end="217:36"><name pos:start="217:25" pos:end="217:36">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="217:39" pos:end="217:66"><expr pos:start="217:39" pos:end="217:66"><literal type="string" pos:start="217:39" pos:end="217:66">"Too short RTP/VP9 packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="219:13" pos:end="219:39">return <expr pos:start="219:20" pos:end="219:38"><name pos:start="219:20" pos:end="219:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="223:9" pos:end="223:39"><expr pos:start="223:9" pos:end="223:38"><name pos:start="223:9" pos:end="223:22">layer_temporal</name> <operator pos:start="223:24" pos:end="223:24">=</operator> <name pos:start="223:26" pos:end="223:31"><name pos:start="223:26" pos:end="223:28">buf</name><index pos:start="223:29" pos:end="223:31">[<expr pos:start="223:30" pos:end="223:30"><literal type="number" pos:start="223:30" pos:end="223:30">0</literal></expr>]</index></name> <operator pos:start="223:33" pos:end="223:33">&amp;</operator> <literal type="number" pos:start="223:35" pos:end="223:38">0xC0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="225:9" pos:end="225:39"><expr pos:start="225:9" pos:end="225:38"><name pos:start="225:9" pos:end="225:21">layer_spatial</name>  <operator pos:start="225:24" pos:end="225:24">=</operator> <name pos:start="225:26" pos:end="225:31"><name pos:start="225:26" pos:end="225:28">buf</name><index pos:start="225:29" pos:end="225:31">[<expr pos:start="225:30" pos:end="225:30"><literal type="number" pos:start="225:30" pos:end="225:30">0</literal></expr>]</index></name> <operator pos:start="225:33" pos:end="225:33">&amp;</operator> <literal type="number" pos:start="225:35" pos:end="225:38">0x30</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="227:9" pos:end="227:39"><expr pos:start="227:9" pos:end="227:38"><name pos:start="227:9" pos:end="227:21">layer_quality</name>  <operator pos:start="227:24" pos:end="227:24">=</operator> <name pos:start="227:26" pos:end="227:31"><name pos:start="227:26" pos:end="227:28">buf</name><index pos:start="227:29" pos:end="227:31">[<expr pos:start="227:30" pos:end="227:30"><literal type="number" pos:start="227:30" pos:end="227:30">0</literal></expr>]</index></name> <operator pos:start="227:33" pos:end="227:33">&amp;</operator> <literal type="number" pos:start="227:35" pos:end="227:38">0x0C</literal></expr>;</expr_stmt>

        <if_stmt pos:start="229:9" pos:end="237:9"><if pos:start="229:9" pos:end="237:9">if <condition pos:start="229:12" pos:end="229:24">(<expr pos:start="229:13" pos:end="229:23"><name pos:start="229:13" pos:end="229:23">has_ref_idc</name></expr>)</condition> <block pos:start="229:26" pos:end="237:9">{<block_content pos:start="231:13" pos:end="235:34">

            <expr_stmt pos:start="231:13" pos:end="231:39"><expr pos:start="231:13" pos:end="231:38"><name pos:start="231:13" pos:end="231:22">ref_fields</name> <operator pos:start="231:24" pos:end="231:24">=</operator> <name pos:start="231:26" pos:end="231:31"><name pos:start="231:26" pos:end="231:28">buf</name><index pos:start="231:29" pos:end="231:31">[<expr pos:start="231:30" pos:end="231:30"><literal type="number" pos:start="231:30" pos:end="231:30">0</literal></expr>]</index></name> <operator pos:start="231:33" pos:end="231:33">&amp;</operator> <literal type="number" pos:start="231:35" pos:end="231:38">0x03</literal></expr>;</expr_stmt>

            <if_stmt pos:start="233:13" pos:end="235:34"><if pos:start="233:13" pos:end="235:34">if <condition pos:start="233:16" pos:end="233:27">(<expr pos:start="233:17" pos:end="233:26"><name pos:start="233:17" pos:end="233:26">ref_fields</name></expr>)</condition><block type="pseudo" pos:start="235:17" pos:end="235:34"><block_content pos:start="235:17" pos:end="235:34">

                <expr_stmt pos:start="235:17" pos:end="235:34"><expr pos:start="235:17" pos:end="235:33"><name pos:start="235:17" pos:end="235:29">non_key_frame</name> <operator pos:start="235:31" pos:end="235:31">=</operator> <literal type="number" pos:start="235:33" pos:end="235:33">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="239:9" pos:end="239:14"><expr pos:start="239:9" pos:end="239:13"><name pos:start="239:9" pos:end="239:11">buf</name><operator pos:start="239:12" pos:end="239:13">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="241:9" pos:end="241:14"><expr pos:start="241:9" pos:end="241:13"><name pos:start="241:9" pos:end="241:11">len</name><operator pos:start="241:12" pos:end="241:13">--</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="247:5" pos:end="273:7">/*

     *         decode the reference fields

     *

     *          0 1 2 3 4 5 6 7

     *         +-+-+-+-+-+-+-+-+              -\

     *   F:    | PID |X| RS| RQ| (OPTIONAL)    .

     *         +-+-+-+-+-+-+-+-+               . - R times

     *   X:    | EXTENDED PID  | (OPTIONAL)    .

     *         +-+-+-+-+-+-+-+-+              -/

     *

     *   PID:  The relative Picture ID referred to by this frame.

     *   RS and RQ:  The spatial and quality layer IDs.

     *   X: 1 if this layer index has an extended relative Picture ID.

     */</comment>

    <if_stmt pos:start="275:5" pos:end="333:5"><if pos:start="275:5" pos:end="333:5">if <condition pos:start="275:8" pos:end="275:20">(<expr pos:start="275:9" pos:end="275:19"><name pos:start="275:9" pos:end="275:19">has_ref_idc</name></expr>)</condition> <block pos:start="275:22" pos:end="333:5">{<block_content pos:start="277:9" pos:end="331:9">

        <while pos:start="277:9" pos:end="331:9">while <condition pos:start="277:15" pos:end="277:26">(<expr pos:start="277:16" pos:end="277:25"><name pos:start="277:16" pos:end="277:25">ref_fields</name></expr>)</condition> <block pos:start="277:28" pos:end="331:9">{<block_content pos:start="279:13" pos:end="329:25">

            <if_stmt pos:start="279:13" pos:end="285:13"><if pos:start="279:13" pos:end="285:13">if <condition pos:start="279:16" pos:end="279:24">(<expr pos:start="279:17" pos:end="279:23"><name pos:start="279:17" pos:end="279:19">len</name> <operator pos:start="279:21" pos:end="279:21">&lt;</operator> <literal type="number" pos:start="279:23" pos:end="279:23">1</literal></expr>)</condition> <block pos:start="279:26" pos:end="285:13">{<block_content pos:start="281:17" pos:end="283:43">

                <expr_stmt pos:start="281:17" pos:end="281:72"><expr pos:start="281:17" pos:end="281:71"><call pos:start="281:17" pos:end="281:71"><name pos:start="281:17" pos:end="281:22">av_log</name><argument_list pos:start="281:23" pos:end="281:71">(<argument pos:start="281:24" pos:end="281:26"><expr pos:start="281:24" pos:end="281:26"><name pos:start="281:24" pos:end="281:26">ctx</name></expr></argument>, <argument pos:start="281:29" pos:end="281:40"><expr pos:start="281:29" pos:end="281:40"><name pos:start="281:29" pos:end="281:40">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="281:43" pos:end="281:70"><expr pos:start="281:43" pos:end="281:70"><literal type="string" pos:start="281:43" pos:end="281:70">"Too short RTP/VP9 packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="283:17" pos:end="283:43">return <expr pos:start="283:24" pos:end="283:42"><name pos:start="283:24" pos:end="283:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="289:13" pos:end="289:53"><expr pos:start="289:13" pos:end="289:52"><name pos:start="289:13" pos:end="289:36">has_ref_field_ext_pic_id</name> <operator pos:start="289:38" pos:end="289:38">=</operator> <name pos:start="289:40" pos:end="289:45"><name pos:start="289:40" pos:end="289:42">buf</name><index pos:start="289:43" pos:end="289:45">[<expr pos:start="289:44" pos:end="289:44"><literal type="number" pos:start="289:44" pos:end="289:44">0</literal></expr>]</index></name> <operator pos:start="289:47" pos:end="289:47">&amp;</operator> <literal type="number" pos:start="289:49" pos:end="289:52">0x10</literal></expr>;</expr_stmt>



            <comment type="block" pos:start="293:13" pos:end="293:33">/* pass ref. field */</comment>

            <if_stmt pos:start="295:13" pos:end="327:13"><if pos:start="295:13" pos:end="315:13">if <condition pos:start="295:16" pos:end="295:41">(<expr pos:start="295:17" pos:end="295:40"><name pos:start="295:17" pos:end="295:40">has_ref_field_ext_pic_id</name></expr>)</condition> <block pos:start="295:43" pos:end="315:13">{<block_content pos:start="297:17" pos:end="313:25">

                <if_stmt pos:start="297:17" pos:end="303:17"><if pos:start="297:17" pos:end="303:17">if <condition pos:start="297:20" pos:end="297:28">(<expr pos:start="297:21" pos:end="297:27"><name pos:start="297:21" pos:end="297:23">len</name> <operator pos:start="297:25" pos:end="297:25">&lt;</operator> <literal type="number" pos:start="297:27" pos:end="297:27">2</literal></expr>)</condition> <block pos:start="297:30" pos:end="303:17">{<block_content pos:start="299:21" pos:end="301:47">

                    <expr_stmt pos:start="299:21" pos:end="299:76"><expr pos:start="299:21" pos:end="299:75"><call pos:start="299:21" pos:end="299:75"><name pos:start="299:21" pos:end="299:26">av_log</name><argument_list pos:start="299:27" pos:end="299:75">(<argument pos:start="299:28" pos:end="299:30"><expr pos:start="299:28" pos:end="299:30"><name pos:start="299:28" pos:end="299:30">ctx</name></expr></argument>, <argument pos:start="299:33" pos:end="299:44"><expr pos:start="299:33" pos:end="299:44"><name pos:start="299:33" pos:end="299:44">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="299:47" pos:end="299:74"><expr pos:start="299:47" pos:end="299:74"><literal type="string" pos:start="299:47" pos:end="299:74">"Too short RTP/VP9 packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="301:21" pos:end="301:47">return <expr pos:start="301:28" pos:end="301:46"><name pos:start="301:28" pos:end="301:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>



                <comment type="block" pos:start="307:17" pos:end="307:38">/* ignore ref. data */</comment>



                <expr_stmt pos:start="311:17" pos:end="311:25"><expr pos:start="311:17" pos:end="311:24"><name pos:start="311:17" pos:end="311:19">buf</name> <operator pos:start="311:21" pos:end="311:22">+=</operator> <literal type="number" pos:start="311:24" pos:end="311:24">2</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="313:17" pos:end="313:25"><expr pos:start="313:17" pos:end="313:24"><name pos:start="313:17" pos:end="313:19">len</name> <operator pos:start="313:21" pos:end="313:22">-=</operator> <literal type="number" pos:start="313:24" pos:end="313:24">2</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="315:15" pos:end="327:13">else <block pos:start="315:20" pos:end="327:13">{<block_content pos:start="323:17" pos:end="325:22">



                <comment type="block" pos:start="319:17" pos:end="319:38">/* ignore ref. data */</comment>



                <expr_stmt pos:start="323:17" pos:end="323:22"><expr pos:start="323:17" pos:end="323:21"><name pos:start="323:17" pos:end="323:19">buf</name><operator pos:start="323:20" pos:end="323:21">++</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="325:17" pos:end="325:22"><expr pos:start="325:17" pos:end="325:21"><name pos:start="325:17" pos:end="325:19">len</name><operator pos:start="325:20" pos:end="325:21">--</operator></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="329:13" pos:end="329:25"><expr pos:start="329:13" pos:end="329:24"><name pos:start="329:13" pos:end="329:22">ref_fields</name><operator pos:start="329:23" pos:end="329:24">--</operator></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="337:5" pos:end="371:7">/*

     *         decode the scalability structure (SS)

     *

     *          0 1 2 3 4 5 6 7

     *         +-+-+-+-+-+-+-+-+

     *   V:    | PATTERN LENGTH|

     *         +-+-+-+-+-+-+-+-+                           -\

     *         | T | S | Q | R | (OPTIONAL)                 .

     *         +-+-+-+-+-+-+-+-+              -\            .

     *         | PID |X| RS| RQ| (OPTIONAL)    .            . - PAT. LEN. times

     *         +-+-+-+-+-+-+-+-+               . - R times  .

     *   X:    | EXTENDED PID  | (OPTIONAL)    .            .

     *         +-+-+-+-+-+-+-+-+              -/           -/

     *

     *   PID:  The relative Picture ID referred to by this frame.

     *   RS and RQ:  The spatial and quality layer IDs.

     *   X: 1 if this layer index has an extended relative Picture ID.

     */</comment>

    <if_stmt pos:start="373:5" pos:end="379:5"><if pos:start="373:5" pos:end="379:5">if <condition pos:start="373:8" pos:end="373:20">(<expr pos:start="373:9" pos:end="373:19"><name pos:start="373:9" pos:end="373:19">has_ss_data</name></expr>)</condition> <block pos:start="373:22" pos:end="379:5">{<block_content pos:start="375:9" pos:end="377:31">

        <expr_stmt pos:start="375:9" pos:end="375:77"><expr pos:start="375:9" pos:end="375:76"><call pos:start="375:9" pos:end="375:76"><name pos:start="375:9" pos:end="375:37">avpriv_report_missing_feature</name><argument_list pos:start="375:38" pos:end="375:76">(<argument pos:start="375:39" pos:end="375:41"><expr pos:start="375:39" pos:end="375:41"><name pos:start="375:39" pos:end="375:41">ctx</name></expr></argument>, <argument pos:start="375:44" pos:end="375:75"><expr pos:start="375:44" pos:end="375:75"><literal type="string" pos:start="375:44" pos:end="375:75">"VP9 scalability structure data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="377:9" pos:end="377:31">return <expr pos:start="377:16" pos:end="377:30"><call pos:start="377:16" pos:end="377:30"><name pos:start="377:16" pos:end="377:22">AVERROR</name><argument_list pos:start="377:23" pos:end="377:30">(<argument pos:start="377:24" pos:end="377:29"><expr pos:start="377:24" pos:end="377:29"><name pos:start="377:24" pos:end="377:29">ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="383:5" pos:end="391:7">/*

     * decode the scalability update structure (SU)

     *

     *  spec. is tbd

     */</comment>

    <if_stmt pos:start="393:5" pos:end="399:5"><if pos:start="393:5" pos:end="399:5">if <condition pos:start="393:8" pos:end="393:20">(<expr pos:start="393:9" pos:end="393:19"><name pos:start="393:9" pos:end="393:19">has_su_data</name></expr>)</condition> <block pos:start="393:22" pos:end="399:5">{<block_content pos:start="395:9" pos:end="397:31">

        <expr_stmt pos:start="395:9" pos:end="395:84"><expr pos:start="395:9" pos:end="395:83"><call pos:start="395:9" pos:end="395:83"><name pos:start="395:9" pos:end="395:37">avpriv_report_missing_feature</name><argument_list pos:start="395:38" pos:end="395:83">(<argument pos:start="395:39" pos:end="395:41"><expr pos:start="395:39" pos:end="395:41"><name pos:start="395:39" pos:end="395:41">ctx</name></expr></argument>, <argument pos:start="395:44" pos:end="395:82"><expr pos:start="395:44" pos:end="395:82"><literal type="string" pos:start="395:44" pos:end="395:82">"VP9 scalability update structure data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="397:9" pos:end="397:31">return <expr pos:start="397:16" pos:end="397:30"><call pos:start="397:16" pos:end="397:30"><name pos:start="397:16" pos:end="397:22">AVERROR</name><argument_list pos:start="397:23" pos:end="397:30">(<argument pos:start="397:24" pos:end="397:29"><expr pos:start="397:24" pos:end="397:29"><name pos:start="397:24" pos:end="397:29">ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="403:5" pos:end="411:7">/*

     * decode the VP9 payload header

     *

     *  spec. is tbd

     */</comment>

    <comment type="line" pos:start="413:5" pos:end="413:35">//XXX: implement when specified</comment>



    <comment type="block" pos:start="417:5" pos:end="417:49">/* sanity check: 1 byte payload as minimum */</comment>

    <if_stmt pos:start="419:5" pos:end="425:5"><if pos:start="419:5" pos:end="425:5">if <condition pos:start="419:8" pos:end="419:16">(<expr pos:start="419:9" pos:end="419:15"><name pos:start="419:9" pos:end="419:11">len</name> <operator pos:start="419:13" pos:end="419:13">&lt;</operator> <literal type="number" pos:start="419:15" pos:end="419:15">1</literal></expr>)</condition> <block pos:start="419:18" pos:end="425:5">{<block_content pos:start="421:9" pos:end="423:35">

        <expr_stmt pos:start="421:9" pos:end="421:64"><expr pos:start="421:9" pos:end="421:63"><call pos:start="421:9" pos:end="421:63"><name pos:start="421:9" pos:end="421:14">av_log</name><argument_list pos:start="421:15" pos:end="421:63">(<argument pos:start="421:16" pos:end="421:18"><expr pos:start="421:16" pos:end="421:18"><name pos:start="421:16" pos:end="421:18">ctx</name></expr></argument>, <argument pos:start="421:21" pos:end="421:32"><expr pos:start="421:21" pos:end="421:32"><name pos:start="421:21" pos:end="421:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="421:35" pos:end="421:62"><expr pos:start="421:35" pos:end="421:62"><literal type="string" pos:start="421:35" pos:end="421:62">"Too short RTP/VP9 packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="423:9" pos:end="423:35">return <expr pos:start="423:16" pos:end="423:34"><name pos:start="423:16" pos:end="423:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="429:5" pos:end="429:55">/* start frame buffering with new dynamic buffer */</comment>

    <if_stmt pos:start="431:5" pos:end="455:5"><if pos:start="431:5" pos:end="455:5">if <condition pos:start="431:8" pos:end="431:26">(<expr pos:start="431:9" pos:end="431:25"><operator pos:start="431:9" pos:end="431:9">!</operator><name pos:start="431:10" pos:end="431:25"><name pos:start="431:10" pos:end="431:20">rtp_vp9_ctx</name><operator pos:start="431:21" pos:end="431:22">-&gt;</operator><name pos:start="431:23" pos:end="431:25">buf</name></name></expr>)</condition> <block pos:start="431:28" pos:end="455:5">{<block_content pos:start="435:9" pos:end="453:9">

        <comment type="block" pos:start="433:9" pos:end="433:59">/* sanity check: a new frame should have started */</comment>

        <if_stmt pos:start="435:9" pos:end="453:9"><if pos:start="435:9" pos:end="447:9">if <condition pos:start="435:12" pos:end="435:27">(<expr pos:start="435:13" pos:end="435:26"><name pos:start="435:13" pos:end="435:26">first_fragment</name></expr>)</condition> <block pos:start="435:29" pos:end="447:9">{<block_content pos:start="437:13" pos:end="445:48">

            <expr_stmt pos:start="437:13" pos:end="437:55"><expr pos:start="437:13" pos:end="437:54"><name pos:start="437:13" pos:end="437:15">res</name> <operator pos:start="437:17" pos:end="437:17">=</operator> <call pos:start="437:19" pos:end="437:54"><name pos:start="437:19" pos:end="437:35">avio_open_dyn_buf</name><argument_list pos:start="437:36" pos:end="437:54">(<argument pos:start="437:37" pos:end="437:53"><expr pos:start="437:37" pos:end="437:53"><operator pos:start="437:37" pos:end="437:37">&amp;</operator><name pos:start="437:38" pos:end="437:53"><name pos:start="437:38" pos:end="437:48">rtp_vp9_ctx</name><operator pos:start="437:49" pos:end="437:50">-&gt;</operator><name pos:start="437:51" pos:end="437:53">buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="439:13" pos:end="441:27"><if pos:start="439:13" pos:end="441:27">if <condition pos:start="439:16" pos:end="439:24">(<expr pos:start="439:17" pos:end="439:23"><name pos:start="439:17" pos:end="439:19">res</name> <operator pos:start="439:21" pos:end="439:21">&lt;</operator> <literal type="number" pos:start="439:23" pos:end="439:23">0</literal></expr>)</condition><block type="pseudo" pos:start="441:17" pos:end="441:27"><block_content pos:start="441:17" pos:end="441:27">

                <return pos:start="441:17" pos:end="441:27">return <expr pos:start="441:24" pos:end="441:26"><name pos:start="441:24" pos:end="441:26">res</name></expr>;</return></block_content></block></if></if_stmt>

            <comment type="block" pos:start="443:13" pos:end="443:91">/* update the timestamp in the frame packet with the one from the RTP packet */</comment>

            <expr_stmt pos:start="445:13" pos:end="445:48"><expr pos:start="445:13" pos:end="445:47"><name pos:start="445:13" pos:end="445:34"><name pos:start="445:13" pos:end="445:23">rtp_vp9_ctx</name><operator pos:start="445:24" pos:end="445:25">-&gt;</operator><name pos:start="445:26" pos:end="445:34">timestamp</name></name> <operator pos:start="445:36" pos:end="445:36">=</operator> <operator pos:start="445:38" pos:end="445:38">*</operator><name pos:start="445:39" pos:end="445:47">timestamp</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="447:11" pos:end="453:9">else <block pos:start="447:16" pos:end="453:9">{<block_content pos:start="451:13" pos:end="451:35">

            <comment type="block" pos:start="449:13" pos:end="449:58">/* frame not started yet, need more packets */</comment>

            <return pos:start="451:13" pos:end="451:35">return <expr pos:start="451:20" pos:end="451:34"><call pos:start="451:20" pos:end="451:34"><name pos:start="451:20" pos:end="451:26">AVERROR</name><argument_list pos:start="451:27" pos:end="451:34">(<argument pos:start="451:28" pos:end="451:33"><expr pos:start="451:28" pos:end="451:33"><name pos:start="451:28" pos:end="451:33">EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="459:5" pos:end="459:47">/* write the fragment to the dyn. buffer */</comment>

    <expr_stmt pos:start="461:5" pos:end="461:43"><expr pos:start="461:5" pos:end="461:42"><call pos:start="461:5" pos:end="461:42"><name pos:start="461:5" pos:end="461:14">avio_write</name><argument_list pos:start="461:15" pos:end="461:42">(<argument pos:start="461:16" pos:end="461:31"><expr pos:start="461:16" pos:end="461:31"><name pos:start="461:16" pos:end="461:31"><name pos:start="461:16" pos:end="461:26">rtp_vp9_ctx</name><operator pos:start="461:27" pos:end="461:28">-&gt;</operator><name pos:start="461:29" pos:end="461:31">buf</name></name></expr></argument>, <argument pos:start="461:34" pos:end="461:36"><expr pos:start="461:34" pos:end="461:36"><name pos:start="461:34" pos:end="461:36">buf</name></expr></argument>, <argument pos:start="461:39" pos:end="461:41"><expr pos:start="461:39" pos:end="461:41"><name pos:start="461:39" pos:end="461:41">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="465:5" pos:end="465:36">/* do we need more fragments? */</comment>

    <if_stmt pos:start="467:5" pos:end="469:31"><if pos:start="467:5" pos:end="469:31">if <condition pos:start="467:8" pos:end="467:23">(<expr pos:start="467:9" pos:end="467:22"><operator pos:start="467:9" pos:end="467:9">!</operator><name pos:start="467:10" pos:end="467:22">last_fragment</name></expr>)</condition><block type="pseudo" pos:start="469:9" pos:end="469:31"><block_content pos:start="469:9" pos:end="469:31">

        <return pos:start="469:9" pos:end="469:31">return <expr pos:start="469:16" pos:end="469:30"><call pos:start="469:16" pos:end="469:30"><name pos:start="469:16" pos:end="469:22">AVERROR</name><argument_list pos:start="469:23" pos:end="469:30">(<argument pos:start="469:24" pos:end="469:29"><expr pos:start="469:24" pos:end="469:29"><name pos:start="469:24" pos:end="469:29">EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="473:5" pos:end="473:63">/* close frame buffering and create resulting A/V packet */</comment>

    <expr_stmt pos:start="475:5" pos:end="475:68"><expr pos:start="475:5" pos:end="475:67"><name pos:start="475:5" pos:end="475:7">res</name> <operator pos:start="475:9" pos:end="475:9">=</operator> <call pos:start="475:11" pos:end="475:67"><name pos:start="475:11" pos:end="475:32">ff_rtp_finalize_packet</name><argument_list pos:start="475:33" pos:end="475:67">(<argument pos:start="475:34" pos:end="475:36"><expr pos:start="475:34" pos:end="475:36"><name pos:start="475:34" pos:end="475:36">pkt</name></expr></argument>, <argument pos:start="475:39" pos:end="475:55"><expr pos:start="475:39" pos:end="475:55"><operator pos:start="475:39" pos:end="475:39">&amp;</operator><name pos:start="475:40" pos:end="475:55"><name pos:start="475:40" pos:end="475:50">rtp_vp9_ctx</name><operator pos:start="475:51" pos:end="475:52">-&gt;</operator><name pos:start="475:53" pos:end="475:55">buf</name></name></expr></argument>, <argument pos:start="475:58" pos:end="475:66"><expr pos:start="475:58" pos:end="475:66"><name pos:start="475:58" pos:end="475:66"><name pos:start="475:58" pos:end="475:59">st</name><operator pos:start="475:60" pos:end="475:61">-&gt;</operator><name pos:start="475:62" pos:end="475:66">index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="477:5" pos:end="479:19"><if pos:start="477:5" pos:end="479:19">if <condition pos:start="477:8" pos:end="477:16">(<expr pos:start="477:9" pos:end="477:15"><name pos:start="477:9" pos:end="477:11">res</name> <operator pos:start="477:13" pos:end="477:13">&lt;</operator> <literal type="number" pos:start="477:15" pos:end="477:15">0</literal></expr>)</condition><block type="pseudo" pos:start="479:9" pos:end="479:19"><block_content pos:start="479:9" pos:end="479:19">

        <return pos:start="479:9" pos:end="479:19">return <expr pos:start="479:16" pos:end="479:18"><name pos:start="479:16" pos:end="479:18">res</name></expr>;</return></block_content></block></if></if_stmt>



    <return pos:start="483:5" pos:end="483:13">return <expr pos:start="483:12" pos:end="483:12"><literal type="number" pos:start="483:12" pos:end="483:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
