<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12570.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">rtsp_write_packet</name><parameter_list pos:start="1:29" pos:end="1:63">(<parameter pos:start="1:30" pos:end="1:47"><decl pos:start="1:30" pos:end="1:47"><type pos:start="1:30" pos:end="1:47"><name pos:start="1:30" pos:end="1:44">AVFormatContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:47">s</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:62"><decl pos:start="1:50" pos:end="1:62"><type pos:start="1:50" pos:end="1:62"><name pos:start="1:50" pos:end="1:57">AVPacket</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:62">pkt</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="103:1">{<block_content pos:start="5:5" pos:end="101:15">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">RTSPState</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:17">rt</name> <init pos:start="5:19" pos:end="5:32">= <expr pos:start="5:21" pos:end="5:32"><name pos:start="5:21" pos:end="5:32"><name pos:start="5:21" pos:end="5:21">s</name><operator pos:start="5:22" pos:end="5:23">-&gt;</operator><name pos:start="5:24" pos:end="5:32">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">RTSPStream</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:23">rtsp_st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">fd_set</name></type> <name pos:start="9:12" pos:end="9:15">rfds</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">n</name></decl>, <decl pos:start="11:12" pos:end="11:17"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:17">tcp_fd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:18">timeval</name></name></type> <name pos:start="13:20" pos:end="13:21">tv</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:21"><name pos:start="15:5" pos:end="15:19">AVFormatContext</name> <modifier pos:start="15:21" pos:end="15:21">*</modifier></type><name pos:start="15:22" pos:end="15:27">rtpctx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:12"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:46"><expr pos:start="21:5" pos:end="21:45"><name pos:start="21:5" pos:end="21:10">tcp_fd</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <call pos:start="21:14" pos:end="21:45"><name pos:start="21:14" pos:end="21:32">url_get_file_handle</name><argument_list pos:start="21:33" pos:end="21:45">(<argument pos:start="21:34" pos:end="21:44"><expr pos:start="21:34" pos:end="21:44"><name pos:start="21:34" pos:end="21:44"><name pos:start="21:34" pos:end="21:35">rt</name><operator pos:start="21:36" pos:end="21:37">-&gt;</operator><name pos:start="21:38" pos:end="21:44">rtsp_hd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="25:5" pos:end="73:5">while <condition pos:start="25:11" pos:end="25:13">(<expr pos:start="25:12" pos:end="25:12"><literal type="number" pos:start="25:12" pos:end="25:12">1</literal></expr>)</condition> <block pos:start="25:15" pos:end="73:5">{<block_content pos:start="27:9" pos:end="71:9">

        <expr_stmt pos:start="27:9" pos:end="27:23"><expr pos:start="27:9" pos:end="27:22"><call pos:start="27:9" pos:end="27:22"><name pos:start="27:9" pos:end="27:15">FD_ZERO</name><argument_list pos:start="27:16" pos:end="27:22">(<argument pos:start="27:17" pos:end="27:21"><expr pos:start="27:17" pos:end="27:21"><operator pos:start="27:17" pos:end="27:17">&amp;</operator><name pos:start="27:18" pos:end="27:21">rfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:30"><expr pos:start="29:9" pos:end="29:29"><call pos:start="29:9" pos:end="29:29"><name pos:start="29:9" pos:end="29:14">FD_SET</name><argument_list pos:start="29:15" pos:end="29:29">(<argument pos:start="29:16" pos:end="29:21"><expr pos:start="29:16" pos:end="29:21"><name pos:start="29:16" pos:end="29:21">tcp_fd</name></expr></argument>, <argument pos:start="29:24" pos:end="29:28"><expr pos:start="29:24" pos:end="29:28"><operator pos:start="29:24" pos:end="29:24">&amp;</operator><name pos:start="29:25" pos:end="29:28">rfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:22"><expr pos:start="31:9" pos:end="31:21"><name pos:start="31:9" pos:end="31:17"><name pos:start="31:9" pos:end="31:10">tv</name><operator pos:start="31:11" pos:end="31:11">.</operator><name pos:start="31:12" pos:end="31:17">tv_sec</name></name> <operator pos:start="31:19" pos:end="31:19">=</operator> <literal type="number" pos:start="31:21" pos:end="31:21">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:23"><expr pos:start="33:9" pos:end="33:22"><name pos:start="33:9" pos:end="33:18"><name pos:start="33:9" pos:end="33:10">tv</name><operator pos:start="33:11" pos:end="33:11">.</operator><name pos:start="33:12" pos:end="33:18">tv_usec</name></name> <operator pos:start="33:20" pos:end="33:20">=</operator> <literal type="number" pos:start="33:22" pos:end="33:22">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:55"><expr pos:start="35:9" pos:end="35:54"><name pos:start="35:9" pos:end="35:9">n</name> <operator pos:start="35:11" pos:end="35:11">=</operator> <call pos:start="35:13" pos:end="35:54"><name pos:start="35:13" pos:end="35:18">select</name><argument_list pos:start="35:19" pos:end="35:54">(<argument pos:start="35:20" pos:end="35:29"><expr pos:start="35:20" pos:end="35:29"><name pos:start="35:20" pos:end="35:25">tcp_fd</name> <operator pos:start="35:27" pos:end="35:27">+</operator> <literal type="number" pos:start="35:29" pos:end="35:29">1</literal></expr></argument>, <argument pos:start="35:32" pos:end="35:36"><expr pos:start="35:32" pos:end="35:36"><operator pos:start="35:32" pos:end="35:32">&amp;</operator><name pos:start="35:33" pos:end="35:36">rfds</name></expr></argument>, <argument pos:start="35:39" pos:end="35:42"><expr pos:start="35:39" pos:end="35:42"><name pos:start="35:39" pos:end="35:42">NULL</name></expr></argument>, <argument pos:start="35:45" pos:end="35:48"><expr pos:start="35:45" pos:end="35:48"><name pos:start="35:45" pos:end="35:48">NULL</name></expr></argument>, <argument pos:start="35:51" pos:end="35:53"><expr pos:start="35:51" pos:end="35:53"><operator pos:start="35:51" pos:end="35:51">&amp;</operator><name pos:start="35:52" pos:end="35:53">tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="39:18"><if pos:start="37:9" pos:end="39:18">if <condition pos:start="37:12" pos:end="37:19">(<expr pos:start="37:13" pos:end="37:18"><name pos:start="37:13" pos:end="37:13">n</name> <operator pos:start="37:15" pos:end="37:16">&lt;=</operator> <literal type="number" pos:start="37:18" pos:end="37:18">0</literal></expr>)</condition><block type="pseudo" pos:start="39:13" pos:end="39:18"><block_content pos:start="39:13" pos:end="39:18">

            <break pos:start="39:13" pos:end="39:18">break;</break></block_content></block></if></if_stmt>

        <if_stmt pos:start="41:9" pos:end="71:9"><if pos:start="41:9" pos:end="71:9">if <condition pos:start="41:12" pos:end="41:36">(<expr pos:start="41:13" pos:end="41:35"><call pos:start="41:13" pos:end="41:35"><name pos:start="41:13" pos:end="41:20">FD_ISSET</name><argument_list pos:start="41:21" pos:end="41:35">(<argument pos:start="41:22" pos:end="41:27"><expr pos:start="41:22" pos:end="41:27"><name pos:start="41:22" pos:end="41:27">tcp_fd</name></expr></argument>, <argument pos:start="41:30" pos:end="41:34"><expr pos:start="41:30" pos:end="41:34"><operator pos:start="41:30" pos:end="41:30">&amp;</operator><name pos:start="41:31" pos:end="41:34">rfds</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="41:38" pos:end="71:9">{<block_content pos:start="43:13" pos:end="69:38">

            <decl_stmt pos:start="43:13" pos:end="43:36"><decl pos:start="43:13" pos:end="43:35"><type pos:start="43:13" pos:end="43:29"><name pos:start="43:13" pos:end="43:29">RTSPMessageHeader</name></type> <name pos:start="43:31" pos:end="43:35">reply</name></decl>;</decl_stmt>



            <comment type="block" pos:start="47:13" pos:end="53:49">/* Don't let ff_rtsp_read_reply handle interleaved packets,

             * since it would block and wait for an RTSP reply on the socket

             * (which may not be coming any time soon) if it handles

             * interleaved packets internally. */</comment>

            <expr_stmt pos:start="55:13" pos:end="55:63"><expr pos:start="55:13" pos:end="55:62"><name pos:start="55:13" pos:end="55:15">ret</name> <operator pos:start="55:17" pos:end="55:17">=</operator> <call pos:start="55:19" pos:end="55:62"><name pos:start="55:19" pos:end="55:36">ff_rtsp_read_reply</name><argument_list pos:start="55:37" pos:end="55:62">(<argument pos:start="55:38" pos:end="55:38"><expr pos:start="55:38" pos:end="55:38"><name pos:start="55:38" pos:end="55:38">s</name></expr></argument>, <argument pos:start="55:41" pos:end="55:46"><expr pos:start="55:41" pos:end="55:46"><operator pos:start="55:41" pos:end="55:41">&amp;</operator><name pos:start="55:42" pos:end="55:46">reply</name></expr></argument>, <argument pos:start="55:49" pos:end="55:52"><expr pos:start="55:49" pos:end="55:52"><name pos:start="55:49" pos:end="55:52">NULL</name></expr></argument>, <argument pos:start="55:55" pos:end="55:55"><expr pos:start="55:55" pos:end="55:55"><literal type="number" pos:start="55:55" pos:end="55:55">1</literal></expr></argument>, <argument pos:start="55:58" pos:end="55:61"><expr pos:start="55:58" pos:end="55:61"><name pos:start="55:58" pos:end="55:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="57:13" pos:end="59:38"><if pos:start="57:13" pos:end="59:38">if <condition pos:start="57:16" pos:end="57:24">(<expr pos:start="57:17" pos:end="57:23"><name pos:start="57:17" pos:end="57:19">ret</name> <operator pos:start="57:21" pos:end="57:21">&lt;</operator> <literal type="number" pos:start="57:23" pos:end="57:23">0</literal></expr>)</condition><block type="pseudo" pos:start="59:17" pos:end="59:38"><block_content pos:start="59:17" pos:end="59:38">

                <return pos:start="59:17" pos:end="59:38">return <expr pos:start="59:24" pos:end="59:37"><call pos:start="59:24" pos:end="59:37"><name pos:start="59:24" pos:end="59:30">AVERROR</name><argument_list pos:start="59:31" pos:end="59:37">(<argument pos:start="59:32" pos:end="59:36"><expr pos:start="59:32" pos:end="59:36"><name pos:start="59:32" pos:end="59:36">EPIPE</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="61:13" pos:end="63:39"><if pos:start="61:13" pos:end="63:39">if <condition pos:start="61:16" pos:end="61:25">(<expr pos:start="61:17" pos:end="61:24"><name pos:start="61:17" pos:end="61:19">ret</name> <operator pos:start="61:21" pos:end="61:22">==</operator> <literal type="number" pos:start="61:24" pos:end="61:24">1</literal></expr>)</condition><block type="pseudo" pos:start="63:17" pos:end="63:39"><block_content pos:start="63:17" pos:end="63:39">

                <expr_stmt pos:start="63:17" pos:end="63:39"><expr pos:start="63:17" pos:end="63:38"><call pos:start="63:17" pos:end="63:38"><name pos:start="63:17" pos:end="63:35">ff_rtsp_skip_packet</name><argument_list pos:start="63:36" pos:end="63:38">(<argument pos:start="63:37" pos:end="63:37"><expr pos:start="63:37" pos:end="63:37"><name pos:start="63:37" pos:end="63:37">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="block" pos:start="65:13" pos:end="65:36">/* XXX: parse message */</comment>

            <if_stmt pos:start="67:13" pos:end="69:38"><if pos:start="67:13" pos:end="69:38">if <condition pos:start="67:16" pos:end="67:50">(<expr pos:start="67:17" pos:end="67:49"><name pos:start="67:17" pos:end="67:25"><name pos:start="67:17" pos:end="67:18">rt</name><operator pos:start="67:19" pos:end="67:20">-&gt;</operator><name pos:start="67:21" pos:end="67:25">state</name></name> <operator pos:start="67:27" pos:end="67:28">!=</operator> <name pos:start="67:30" pos:end="67:49">RTSP_STATE_STREAMING</name></expr>)</condition><block type="pseudo" pos:start="69:17" pos:end="69:38"><block_content pos:start="69:17" pos:end="69:38">

                <return pos:start="69:17" pos:end="69:38">return <expr pos:start="69:24" pos:end="69:37"><call pos:start="69:24" pos:end="69:37"><name pos:start="69:24" pos:end="69:30">AVERROR</name><argument_list pos:start="69:31" pos:end="69:37">(<argument pos:start="69:32" pos:end="69:36"><expr pos:start="69:32" pos:end="69:36"><name pos:start="69:32" pos:end="69:36">EPIPE</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="77:5" pos:end="79:35"><if pos:start="77:5" pos:end="79:35">if <condition pos:start="77:8" pos:end="77:74">(<expr pos:start="77:9" pos:end="77:73"><name pos:start="77:9" pos:end="77:25"><name pos:start="77:9" pos:end="77:11">pkt</name><operator pos:start="77:12" pos:end="77:13">-&gt;</operator><name pos:start="77:14" pos:end="77:25">stream_index</name></name> <operator pos:start="77:27" pos:end="77:27">&lt;</operator> <literal type="number" pos:start="77:29" pos:end="77:29">0</literal> <operator pos:start="77:31" pos:end="77:32">||</operator> <name pos:start="77:34" pos:end="77:50"><name pos:start="77:34" pos:end="77:36">pkt</name><operator pos:start="77:37" pos:end="77:38">-&gt;</operator><name pos:start="77:39" pos:end="77:50">stream_index</name></name> <operator pos:start="77:52" pos:end="77:53">&gt;=</operator> <name pos:start="77:55" pos:end="77:73"><name pos:start="77:55" pos:end="77:56">rt</name><operator pos:start="77:57" pos:end="77:58">-&gt;</operator><name pos:start="77:59" pos:end="77:73">nb_rtsp_streams</name></name></expr>)</condition><block type="pseudo" pos:start="79:9" pos:end="79:35"><block_content pos:start="79:9" pos:end="79:35">

        <return pos:start="79:9" pos:end="79:35">return <expr pos:start="79:16" pos:end="79:34"><name pos:start="79:16" pos:end="79:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:50"><expr pos:start="81:5" pos:end="81:49"><name pos:start="81:5" pos:end="81:11">rtsp_st</name> <operator pos:start="81:13" pos:end="81:13">=</operator> <name pos:start="81:15" pos:end="81:49"><name pos:start="81:15" pos:end="81:16">rt</name><operator pos:start="81:17" pos:end="81:18">-&gt;</operator><name pos:start="81:19" pos:end="81:30">rtsp_streams</name><index pos:start="81:31" pos:end="81:49">[<expr pos:start="81:32" pos:end="81:48"><name pos:start="81:32" pos:end="81:48"><name pos:start="81:32" pos:end="81:34">pkt</name><operator pos:start="81:35" pos:end="81:36">-&gt;</operator><name pos:start="81:37" pos:end="81:48">stream_index</name></name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:37"><expr pos:start="83:5" pos:end="83:36"><name pos:start="83:5" pos:end="83:10">rtpctx</name> <operator pos:start="83:12" pos:end="83:12">=</operator> <name pos:start="83:14" pos:end="83:36"><name pos:start="83:14" pos:end="83:20">rtsp_st</name><operator pos:start="83:21" pos:end="83:22">-&gt;</operator><name pos:start="83:23" pos:end="83:36">transport_priv</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:46"><expr pos:start="87:5" pos:end="87:45"><name pos:start="87:5" pos:end="87:7">ret</name> <operator pos:start="87:9" pos:end="87:9">=</operator> <call pos:start="87:11" pos:end="87:45"><name pos:start="87:11" pos:end="87:26">ff_write_chained</name><argument_list pos:start="87:27" pos:end="87:45">(<argument pos:start="87:28" pos:end="87:33"><expr pos:start="87:28" pos:end="87:33"><name pos:start="87:28" pos:end="87:33">rtpctx</name></expr></argument>, <argument pos:start="87:36" pos:end="87:36"><expr pos:start="87:36" pos:end="87:36"><literal type="number" pos:start="87:36" pos:end="87:36">0</literal></expr></argument>, <argument pos:start="87:39" pos:end="87:41"><expr pos:start="87:39" pos:end="87:41"><name pos:start="87:39" pos:end="87:41">pkt</name></expr></argument>, <argument pos:start="87:44" pos:end="87:44"><expr pos:start="87:44" pos:end="87:44"><name pos:start="87:44" pos:end="87:44">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="89:5" pos:end="95:7">/* ff_write_chained does all the RTP packetization. If using TCP as

     * transport, rtpctx-&gt;pb is only a dyn_packet_buf that queues up the

     * packets, so we need to send them out on the TCP connection separately.

     */</comment>

    <if_stmt pos:start="97:5" pos:end="99:43"><if pos:start="97:5" pos:end="99:43">if <condition pos:start="97:8" pos:end="97:64">(<expr pos:start="97:9" pos:end="97:63"><operator pos:start="97:9" pos:end="97:9">!</operator><name pos:start="97:10" pos:end="97:12">ret</name> <operator pos:start="97:14" pos:end="97:15">&amp;&amp;</operator> <name pos:start="97:17" pos:end="97:35"><name pos:start="97:17" pos:end="97:18">rt</name><operator pos:start="97:19" pos:end="97:20">-&gt;</operator><name pos:start="97:21" pos:end="97:35">lower_transport</name></name> <operator pos:start="97:37" pos:end="97:38">==</operator> <name pos:start="97:40" pos:end="97:63">RTSP_LOWER_TRANSPORT_TCP</name></expr>)</condition><block type="pseudo" pos:start="99:9" pos:end="99:43"><block_content pos:start="99:9" pos:end="99:43">

        <expr_stmt pos:start="99:9" pos:end="99:43"><expr pos:start="99:9" pos:end="99:42"><name pos:start="99:9" pos:end="99:11">ret</name> <operator pos:start="99:13" pos:end="99:13">=</operator> <call pos:start="99:15" pos:end="99:42"><name pos:start="99:15" pos:end="99:30">tcp_write_packet</name><argument_list pos:start="99:31" pos:end="99:42">(<argument pos:start="99:32" pos:end="99:32"><expr pos:start="99:32" pos:end="99:32"><name pos:start="99:32" pos:end="99:32">s</name></expr></argument>, <argument pos:start="99:35" pos:end="99:41"><expr pos:start="99:35" pos:end="99:41"><name pos:start="99:35" pos:end="99:41">rtsp_st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="101:5" pos:end="101:15">return <expr pos:start="101:12" pos:end="101:14"><name pos:start="101:12" pos:end="101:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
