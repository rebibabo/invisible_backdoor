<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13066.c" pos:tabs="8"><function pos:start="1:1" pos:end="447:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">sun4m_hw_init</name><parameter_list pos:start="1:26" pos:end="3:48">(<parameter pos:start="1:27" pos:end="1:57"><decl pos:start="1:27" pos:end="1:57"><type pos:start="1:27" pos:end="1:57"><specifier pos:start="1:27" pos:end="1:31">const</specifier> <name pos:start="1:33" pos:end="1:50"><name pos:start="1:33" pos:end="1:38">struct</name> <name pos:start="1:40" pos:end="1:50">sun4m_hwdef</name></name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:57">hwdef</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:47"><decl pos:start="3:27" pos:end="3:47"><type pos:start="3:27" pos:end="3:47"><name pos:start="3:27" pos:end="3:38">MachineState</name> <modifier pos:start="3:40" pos:end="3:40">*</modifier></type><name pos:start="3:41" pos:end="3:47">machine</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="447:1">{<block_content pos:start="7:5" pos:end="445:52">

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:25">cpu_model</name> <init pos:start="7:27" pos:end="7:46">= <expr pos:start="7:29" pos:end="7:46"><name pos:start="7:29" pos:end="7:46"><name pos:start="7:29" pos:end="7:35">machine</name><operator pos:start="7:36" pos:end="7:37">-&gt;</operator><name pos:start="7:38" pos:end="7:46">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:16">int</name></type> <name pos:start="9:18" pos:end="9:18">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:41"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">void</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:15">iommu</name></decl>, <decl pos:start="11:18" pos:end="11:24"><type ref="prev" pos:start="11:5" pos:end="11:10"><modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:24">espdma</name></decl>, <decl pos:start="11:27" pos:end="11:32"><type ref="prev" pos:start="11:5" pos:end="11:10"><modifier pos:start="11:27" pos:end="11:27">*</modifier></type><name pos:start="11:28" pos:end="11:32">ledma</name></decl>, <decl pos:start="11:35" pos:end="11:40"><type ref="prev" pos:start="11:5" pos:end="11:10"><modifier pos:start="11:35" pos:end="11:35">*</modifier></type><name pos:start="11:36" pos:end="11:40">nvram</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="15:30"><decl pos:start="13:5" pos:end="13:32"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">qemu_irq</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:32"><name pos:start="13:15" pos:end="13:22">cpu_irqs</name><index pos:start="13:23" pos:end="13:32">[<expr pos:start="13:24" pos:end="13:31"><name pos:start="13:24" pos:end="13:31">MAX_CPUS</name></expr>]</index></name></decl>, <decl pos:start="13:35" pos:end="13:48"><type ref="prev" pos:start="13:5" pos:end="13:14"/><name pos:start="13:35" pos:end="13:48"><name pos:start="13:35" pos:end="13:44">slavio_irq</name><index pos:start="13:45" pos:end="13:48">[<expr pos:start="13:46" pos:end="13:47"><literal type="number" pos:start="13:46" pos:end="13:47">32</literal></expr>]</index></name></decl>, <decl pos:start="13:51" pos:end="13:74"><type ref="prev" pos:start="13:5" pos:end="13:14"/><name pos:start="13:51" pos:end="13:74"><name pos:start="13:51" pos:end="13:64">slavio_cpu_irq</name><index pos:start="13:65" pos:end="13:74">[<expr pos:start="13:66" pos:end="13:73"><name pos:start="13:66" pos:end="13:73">MAX_CPUS</name></expr>]</index></name></decl>,

        <decl pos:start="15:9" pos:end="15:18"><type ref="prev" pos:start="13:5" pos:end="13:14"/><name pos:start="15:9" pos:end="15:18">espdma_irq</name></decl>, <decl pos:start="15:21" pos:end="15:29"><type ref="prev" pos:start="13:5" pos:end="13:14"/><name pos:start="15:21" pos:end="15:29">ledma_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:35"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">qemu_irq</name></type> <name pos:start="17:14" pos:end="17:22">esp_reset</name></decl>, <decl pos:start="17:25" pos:end="17:34"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:25" pos:end="17:34">dma_enable</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">qemu_irq</name></type> <name pos:start="19:14" pos:end="19:19">fdc_tc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:23"><decl pos:start="21:5" pos:end="21:22"><type pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:12">qemu_irq</name> <modifier pos:start="21:14" pos:end="21:14">*</modifier></type><name pos:start="21:15" pos:end="21:22">cpu_halt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:30"><decl pos:start="23:5" pos:end="23:29"><type pos:start="23:5" pos:end="23:17"><name pos:start="23:5" pos:end="23:12">unsigned</name> <name pos:start="23:14" pos:end="23:17">long</name></type> <name pos:start="23:19" pos:end="23:29">kernel_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:26"><decl pos:start="25:5" pos:end="25:25"><type pos:start="25:5" pos:end="25:15"><name pos:start="25:5" pos:end="25:13">DriveInfo</name> <modifier pos:start="25:15" pos:end="25:15">*</modifier></type><name pos:start="25:16" pos:end="25:25"><name pos:start="25:16" pos:end="25:17">fd</name><index pos:start="25:18" pos:end="25:25">[<expr pos:start="25:19" pos:end="25:24"><name pos:start="25:19" pos:end="25:24">MAX_FD</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:23"><decl pos:start="27:5" pos:end="27:22"><type pos:start="27:5" pos:end="27:16"><name pos:start="27:5" pos:end="27:14">FWCfgState</name> <modifier pos:start="27:16" pos:end="27:16">*</modifier></type><name pos:start="27:17" pos:end="27:22">fw_cfg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:28"><decl pos:start="29:5" pos:end="29:27"><type pos:start="29:5" pos:end="29:16"><name pos:start="29:5" pos:end="29:12">unsigned</name> <name pos:start="29:14" pos:end="29:16">int</name></type> <name pos:start="29:18" pos:end="29:27">num_vsimms</name></decl>;</decl_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:19">/* init CPUs */</comment>

    <if_stmt pos:start="35:5" pos:end="37:45"><if pos:start="35:5" pos:end="37:45">if <condition pos:start="35:8" pos:end="35:19">(<expr pos:start="35:9" pos:end="35:18"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:18">cpu_model</name></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:45"><block_content pos:start="37:9" pos:end="37:45">

        <expr_stmt pos:start="37:9" pos:end="37:45"><expr pos:start="37:9" pos:end="37:44"><name pos:start="37:9" pos:end="37:17">cpu_model</name> <operator pos:start="37:19" pos:end="37:19">=</operator> <name pos:start="37:21" pos:end="37:44"><name pos:start="37:21" pos:end="37:25">hwdef</name><operator pos:start="37:26" pos:end="37:27">-&gt;</operator><name pos:start="37:28" pos:end="37:44">default_cpu_model</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <for pos:start="41:5" pos:end="45:5">for<control pos:start="41:8" pos:end="41:33">(<init pos:start="41:9" pos:end="41:14"><expr pos:start="41:9" pos:end="41:13"><name pos:start="41:9" pos:end="41:9">i</name> <operator pos:start="41:11" pos:end="41:11">=</operator> <literal type="number" pos:start="41:13" pos:end="41:13">0</literal></expr>;</init> <condition pos:start="41:16" pos:end="41:28"><expr pos:start="41:16" pos:end="41:27"><name pos:start="41:16" pos:end="41:16">i</name> <operator pos:start="41:18" pos:end="41:18">&lt;</operator> <name pos:start="41:20" pos:end="41:27">smp_cpus</name></expr>;</condition> <incr pos:start="41:30" pos:end="41:32"><expr pos:start="41:30" pos:end="41:32"><name pos:start="41:30" pos:end="41:30">i</name><operator pos:start="41:31" pos:end="41:32">++</operator></expr></incr>)</control> <block pos:start="41:35" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:68">

        <expr_stmt pos:start="43:9" pos:end="43:68"><expr pos:start="43:9" pos:end="43:67"><call pos:start="43:9" pos:end="43:67"><name pos:start="43:9" pos:end="43:19">cpu_devinit</name><argument_list pos:start="43:20" pos:end="43:67">(<argument pos:start="43:21" pos:end="43:29"><expr pos:start="43:21" pos:end="43:29"><name pos:start="43:21" pos:end="43:29">cpu_model</name></expr></argument>, <argument pos:start="43:32" pos:end="43:32"><expr pos:start="43:32" pos:end="43:32"><name pos:start="43:32" pos:end="43:32">i</name></expr></argument>, <argument pos:start="43:35" pos:end="43:52"><expr pos:start="43:35" pos:end="43:52"><name pos:start="43:35" pos:end="43:52"><name pos:start="43:35" pos:end="43:39">hwdef</name><operator pos:start="43:40" pos:end="43:41">-&gt;</operator><name pos:start="43:42" pos:end="43:52">slavio_base</name></name></expr></argument>, <argument pos:start="43:55" pos:end="43:66"><expr pos:start="43:55" pos:end="43:66"><operator pos:start="43:55" pos:end="43:55">&amp;</operator><name pos:start="43:56" pos:end="43:66"><name pos:start="43:56" pos:end="43:63">cpu_irqs</name><index pos:start="43:64" pos:end="43:66">[<expr pos:start="43:65" pos:end="43:65"><name pos:start="43:65" pos:end="43:65">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <for pos:start="49:5" pos:end="51:76">for <control pos:start="49:9" pos:end="49:41">(<init pos:start="49:10" pos:end="49:22"><expr pos:start="49:10" pos:end="49:21"><name pos:start="49:10" pos:end="49:10">i</name> <operator pos:start="49:12" pos:end="49:12">=</operator> <name pos:start="49:14" pos:end="49:21">smp_cpus</name></expr>;</init> <condition pos:start="49:24" pos:end="49:36"><expr pos:start="49:24" pos:end="49:35"><name pos:start="49:24" pos:end="49:24">i</name> <operator pos:start="49:26" pos:end="49:26">&lt;</operator> <name pos:start="49:28" pos:end="49:35">MAX_CPUS</name></expr>;</condition> <incr pos:start="49:38" pos:end="49:40"><expr pos:start="49:38" pos:end="49:40"><name pos:start="49:38" pos:end="49:38">i</name><operator pos:start="49:39" pos:end="49:40">++</operator></expr></incr>)</control><block type="pseudo" pos:start="51:9" pos:end="51:76"><block_content pos:start="51:9" pos:end="51:76">

        <expr_stmt pos:start="51:9" pos:end="51:76"><expr pos:start="51:9" pos:end="51:75"><name pos:start="51:9" pos:end="51:19"><name pos:start="51:9" pos:end="51:16">cpu_irqs</name><index pos:start="51:17" pos:end="51:19">[<expr pos:start="51:18" pos:end="51:18"><name pos:start="51:18" pos:end="51:18">i</name></expr>]</index></name> <operator pos:start="51:21" pos:end="51:21">=</operator> <call pos:start="51:23" pos:end="51:75"><name pos:start="51:23" pos:end="51:40">qemu_allocate_irqs</name><argument_list pos:start="51:41" pos:end="51:75">(<argument pos:start="51:42" pos:end="51:58"><expr pos:start="51:42" pos:end="51:58"><name pos:start="51:42" pos:end="51:58">dummy_cpu_set_irq</name></expr></argument>, <argument pos:start="51:61" pos:end="51:64"><expr pos:start="51:61" pos:end="51:64"><name pos:start="51:61" pos:end="51:64">NULL</name></expr></argument>, <argument pos:start="51:67" pos:end="51:74"><expr pos:start="51:67" pos:end="51:74"><name pos:start="51:67" pos:end="51:74">MAX_PILS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>





    <comment type="block" pos:start="57:5" pos:end="57:24">/* set up devices */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:51"><expr pos:start="59:5" pos:end="59:50"><call pos:start="59:5" pos:end="59:50"><name pos:start="59:5" pos:end="59:12">ram_init</name><argument_list pos:start="59:13" pos:end="59:50">(<argument pos:start="59:14" pos:end="59:14"><expr pos:start="59:14" pos:end="59:14"><literal type="number" pos:start="59:14" pos:end="59:14">0</literal></expr></argument>, <argument pos:start="59:17" pos:end="59:33"><expr pos:start="59:17" pos:end="59:33"><name pos:start="59:17" pos:end="59:33"><name pos:start="59:17" pos:end="59:23">machine</name><operator pos:start="59:24" pos:end="59:25">-&gt;</operator><name pos:start="59:26" pos:end="59:33">ram_size</name></name></expr></argument>, <argument pos:start="59:36" pos:end="59:49"><expr pos:start="59:36" pos:end="59:49"><name pos:start="59:36" pos:end="59:49"><name pos:start="59:36" pos:end="59:40">hwdef</name><operator pos:start="59:41" pos:end="59:42">-&gt;</operator><name pos:start="59:43" pos:end="59:49">max_mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="61:5" pos:end="61:68">/* models without ECC don't trap when missing ram is accessed */</comment>

    <if_stmt pos:start="63:5" pos:end="67:5"><if pos:start="63:5" pos:end="67:5">if <condition pos:start="63:8" pos:end="63:25">(<expr pos:start="63:9" pos:end="63:24"><operator pos:start="63:9" pos:end="63:9">!</operator><name pos:start="63:10" pos:end="63:24"><name pos:start="63:10" pos:end="63:14">hwdef</name><operator pos:start="63:15" pos:end="63:16">-&gt;</operator><name pos:start="63:17" pos:end="63:24">ecc_base</name></name></expr>)</condition> <block pos:start="63:27" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:79">

        <expr_stmt pos:start="65:9" pos:end="65:79"><expr pos:start="65:9" pos:end="65:78"><call pos:start="65:9" pos:end="65:78"><name pos:start="65:9" pos:end="65:23">empty_slot_init</name><argument_list pos:start="65:24" pos:end="65:78">(<argument pos:start="65:25" pos:end="65:41"><expr pos:start="65:25" pos:end="65:41"><name pos:start="65:25" pos:end="65:41"><name pos:start="65:25" pos:end="65:31">machine</name><operator pos:start="65:32" pos:end="65:33">-&gt;</operator><name pos:start="65:34" pos:end="65:41">ram_size</name></name></expr></argument>, <argument pos:start="65:44" pos:end="65:77"><expr pos:start="65:44" pos:end="65:77"><name pos:start="65:44" pos:end="65:57"><name pos:start="65:44" pos:end="65:48">hwdef</name><operator pos:start="65:49" pos:end="65:50">-&gt;</operator><name pos:start="65:51" pos:end="65:57">max_mem</name></name> <operator pos:start="65:59" pos:end="65:59">-</operator> <name pos:start="65:61" pos:end="65:77"><name pos:start="65:61" pos:end="65:67">machine</name><operator pos:start="65:68" pos:end="65:69">-&gt;</operator><name pos:start="65:70" pos:end="65:77">ram_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:45"><expr pos:start="71:5" pos:end="71:44"><call pos:start="71:5" pos:end="71:44"><name pos:start="71:5" pos:end="71:13">prom_init</name><argument_list pos:start="71:14" pos:end="71:44">(<argument pos:start="71:15" pos:end="71:32"><expr pos:start="71:15" pos:end="71:32"><name pos:start="71:15" pos:end="71:32"><name pos:start="71:15" pos:end="71:19">hwdef</name><operator pos:start="71:20" pos:end="71:21">-&gt;</operator><name pos:start="71:22" pos:end="71:32">slavio_base</name></name></expr></argument>, <argument pos:start="71:35" pos:end="71:43"><expr pos:start="71:35" pos:end="71:43"><name pos:start="71:35" pos:end="71:43">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="75:5" pos:end="79:49"><expr pos:start="75:5" pos:end="79:48"><name pos:start="75:5" pos:end="75:17">slavio_intctl</name> <operator pos:start="75:19" pos:end="75:19">=</operator> <call pos:start="75:21" pos:end="79:48"><name pos:start="75:21" pos:end="75:38">slavio_intctl_init</name><argument_list pos:start="75:39" pos:end="79:48">(<argument pos:start="75:40" pos:end="75:57"><expr pos:start="75:40" pos:end="75:57"><name pos:start="75:40" pos:end="75:57"><name pos:start="75:40" pos:end="75:44">hwdef</name><operator pos:start="75:45" pos:end="75:46">-&gt;</operator><name pos:start="75:47" pos:end="75:57">intctl_base</name></name></expr></argument>,

                                       <argument pos:start="77:40" pos:end="77:70"><expr pos:start="77:40" pos:end="77:70"><name pos:start="77:40" pos:end="77:57"><name pos:start="77:40" pos:end="77:44">hwdef</name><operator pos:start="77:45" pos:end="77:46">-&gt;</operator><name pos:start="77:47" pos:end="77:57">intctl_base</name></name> <operator pos:start="77:59" pos:end="77:59">+</operator> <literal type="number" pos:start="77:61" pos:end="77:70">0x10000ULL</literal></expr></argument>,

                                       <argument pos:start="79:40" pos:end="79:47"><expr pos:start="79:40" pos:end="79:47"><name pos:start="79:40" pos:end="79:47">cpu_irqs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="83:5" pos:end="87:5">for <control pos:start="83:9" pos:end="83:28">(<init pos:start="83:10" pos:end="83:15"><expr pos:start="83:10" pos:end="83:14"><name pos:start="83:10" pos:end="83:10">i</name> <operator pos:start="83:12" pos:end="83:12">=</operator> <literal type="number" pos:start="83:14" pos:end="83:14">0</literal></expr>;</init> <condition pos:start="83:17" pos:end="83:23"><expr pos:start="83:17" pos:end="83:22"><name pos:start="83:17" pos:end="83:17">i</name> <operator pos:start="83:19" pos:end="83:19">&lt;</operator> <literal type="number" pos:start="83:21" pos:end="83:22">32</literal></expr>;</condition> <incr pos:start="83:25" pos:end="83:27"><expr pos:start="83:25" pos:end="83:27"><name pos:start="83:25" pos:end="83:25">i</name><operator pos:start="83:26" pos:end="83:27">++</operator></expr></incr>)</control> <block pos:start="83:30" pos:end="87:5">{<block_content pos:start="85:9" pos:end="85:59">

        <expr_stmt pos:start="85:9" pos:end="85:59"><expr pos:start="85:9" pos:end="85:58"><name pos:start="85:9" pos:end="85:21"><name pos:start="85:9" pos:end="85:18">slavio_irq</name><index pos:start="85:19" pos:end="85:21">[<expr pos:start="85:20" pos:end="85:20"><name pos:start="85:20" pos:end="85:20">i</name></expr>]</index></name> <operator pos:start="85:23" pos:end="85:23">=</operator> <call pos:start="85:25" pos:end="85:58"><name pos:start="85:25" pos:end="85:40">qdev_get_gpio_in</name><argument_list pos:start="85:41" pos:end="85:58">(<argument pos:start="85:42" pos:end="85:54"><expr pos:start="85:42" pos:end="85:54"><name pos:start="85:42" pos:end="85:54">slavio_intctl</name></expr></argument>, <argument pos:start="85:57" pos:end="85:57"><expr pos:start="85:57" pos:end="85:57"><name pos:start="85:57" pos:end="85:57">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <for pos:start="89:5" pos:end="93:5">for <control pos:start="89:9" pos:end="89:34">(<init pos:start="89:10" pos:end="89:15"><expr pos:start="89:10" pos:end="89:14"><name pos:start="89:10" pos:end="89:10">i</name> <operator pos:start="89:12" pos:end="89:12">=</operator> <literal type="number" pos:start="89:14" pos:end="89:14">0</literal></expr>;</init> <condition pos:start="89:17" pos:end="89:29"><expr pos:start="89:17" pos:end="89:28"><name pos:start="89:17" pos:end="89:17">i</name> <operator pos:start="89:19" pos:end="89:19">&lt;</operator> <name pos:start="89:21" pos:end="89:28">MAX_CPUS</name></expr>;</condition> <incr pos:start="89:31" pos:end="89:33"><expr pos:start="89:31" pos:end="89:33"><name pos:start="89:31" pos:end="89:31">i</name><operator pos:start="89:32" pos:end="89:33">++</operator></expr></incr>)</control> <block pos:start="89:36" pos:end="93:5">{<block_content pos:start="91:9" pos:end="91:68">

        <expr_stmt pos:start="91:9" pos:end="91:68"><expr pos:start="91:9" pos:end="91:67"><name pos:start="91:9" pos:end="91:25"><name pos:start="91:9" pos:end="91:22">slavio_cpu_irq</name><index pos:start="91:23" pos:end="91:25">[<expr pos:start="91:24" pos:end="91:24"><name pos:start="91:24" pos:end="91:24">i</name></expr>]</index></name> <operator pos:start="91:27" pos:end="91:27">=</operator> <call pos:start="91:29" pos:end="91:67"><name pos:start="91:29" pos:end="91:44">qdev_get_gpio_in</name><argument_list pos:start="91:45" pos:end="91:67">(<argument pos:start="91:46" pos:end="91:58"><expr pos:start="91:46" pos:end="91:58"><name pos:start="91:46" pos:end="91:58">slavio_intctl</name></expr></argument>, <argument pos:start="91:61" pos:end="91:66"><expr pos:start="91:61" pos:end="91:66"><literal type="number" pos:start="91:61" pos:end="91:64">32</literal> <operator pos:start="91:64" pos:end="91:64">+</operator> <name pos:start="91:66" pos:end="91:66">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="97:5" pos:end="101:5"><if pos:start="97:5" pos:end="101:5">if <condition pos:start="97:8" pos:end="97:26">(<expr pos:start="97:9" pos:end="97:25"><name pos:start="97:9" pos:end="97:25"><name pos:start="97:9" pos:end="97:13">hwdef</name><operator pos:start="97:14" pos:end="97:15">-&gt;</operator><name pos:start="97:16" pos:end="97:25">idreg_base</name></name></expr>)</condition> <block pos:start="97:28" pos:end="101:5">{<block_content pos:start="99:9" pos:end="99:38">

        <expr_stmt pos:start="99:9" pos:end="99:38"><expr pos:start="99:9" pos:end="99:37"><call pos:start="99:9" pos:end="99:37"><name pos:start="99:9" pos:end="99:18">idreg_init</name><argument_list pos:start="99:19" pos:end="99:37">(<argument pos:start="99:20" pos:end="99:36"><expr pos:start="99:20" pos:end="99:36"><name pos:start="99:20" pos:end="99:36"><name pos:start="99:20" pos:end="99:24">hwdef</name><operator pos:start="99:25" pos:end="99:26">-&gt;</operator><name pos:start="99:27" pos:end="99:36">idreg_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="105:5" pos:end="109:5"><if pos:start="105:5" pos:end="109:5">if <condition pos:start="105:8" pos:end="105:24">(<expr pos:start="105:9" pos:end="105:23"><name pos:start="105:9" pos:end="105:23"><name pos:start="105:9" pos:end="105:13">hwdef</name><operator pos:start="105:14" pos:end="105:15">-&gt;</operator><name pos:start="105:16" pos:end="105:23">afx_base</name></name></expr>)</condition> <block pos:start="105:26" pos:end="109:5">{<block_content pos:start="107:9" pos:end="107:34">

        <expr_stmt pos:start="107:9" pos:end="107:34"><expr pos:start="107:9" pos:end="107:33"><call pos:start="107:9" pos:end="107:33"><name pos:start="107:9" pos:end="107:16">afx_init</name><argument_list pos:start="107:17" pos:end="107:33">(<argument pos:start="107:18" pos:end="107:32"><expr pos:start="107:18" pos:end="107:32"><name pos:start="107:18" pos:end="107:32"><name pos:start="107:18" pos:end="107:22">hwdef</name><operator pos:start="107:23" pos:end="107:24">-&gt;</operator><name pos:start="107:25" pos:end="107:32">afx_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="113:5" pos:end="115:39"><expr pos:start="113:5" pos:end="115:38"><name pos:start="113:5" pos:end="113:9">iommu</name> <operator pos:start="113:11" pos:end="113:11">=</operator> <call pos:start="113:13" pos:end="115:38"><name pos:start="113:13" pos:end="113:22">iommu_init</name><argument_list pos:start="113:23" pos:end="115:38">(<argument pos:start="113:24" pos:end="113:40"><expr pos:start="113:24" pos:end="113:40"><name pos:start="113:24" pos:end="113:40"><name pos:start="113:24" pos:end="113:28">hwdef</name><operator pos:start="113:29" pos:end="113:30">-&gt;</operator><name pos:start="113:31" pos:end="113:40">iommu_base</name></name></expr></argument>, <argument pos:start="113:43" pos:end="113:62"><expr pos:start="113:43" pos:end="113:62"><name pos:start="113:43" pos:end="113:62"><name pos:start="113:43" pos:end="113:47">hwdef</name><operator pos:start="113:48" pos:end="113:49">-&gt;</operator><name pos:start="113:50" pos:end="113:62">iommu_version</name></name></expr></argument>,

                       <argument pos:start="115:24" pos:end="115:37"><expr pos:start="115:24" pos:end="115:37"><name pos:start="115:24" pos:end="115:37"><name pos:start="115:24" pos:end="115:33">slavio_irq</name><index pos:start="115:34" pos:end="115:37">[<expr pos:start="115:35" pos:end="115:36"><literal type="number" pos:start="115:35" pos:end="115:36">30</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="119:5" pos:end="131:5"><if pos:start="119:5" pos:end="131:5">if <condition pos:start="119:8" pos:end="119:30">(<expr pos:start="119:9" pos:end="119:29"><name pos:start="119:9" pos:end="119:29"><name pos:start="119:9" pos:end="119:13">hwdef</name><operator pos:start="119:14" pos:end="119:15">-&gt;</operator><name pos:start="119:16" pos:end="119:29">iommu_pad_base</name></name></expr>)</condition> <block pos:start="119:32" pos:end="131:5">{<block_content pos:start="129:9" pos:end="129:68">

        <comment type="block" pos:start="121:9" pos:end="127:37">/* On the real hardware (SS-5, LX) the MMU is not padded, but aliased.

           Software shouldn't use aliased addresses, neither should it crash

           when does. Using empty_slot instead of aliasing can help with

           debugging such accesses */</comment>

        <expr_stmt pos:start="129:9" pos:end="129:68"><expr pos:start="129:9" pos:end="129:67"><call pos:start="129:9" pos:end="129:67"><name pos:start="129:9" pos:end="129:23">empty_slot_init</name><argument_list pos:start="129:24" pos:end="129:67">(<argument pos:start="129:25" pos:end="129:45"><expr pos:start="129:25" pos:end="129:45"><name pos:start="129:25" pos:end="129:45"><name pos:start="129:25" pos:end="129:29">hwdef</name><operator pos:start="129:30" pos:end="129:31">-&gt;</operator><name pos:start="129:32" pos:end="129:45">iommu_pad_base</name></name></expr></argument>,<argument pos:start="129:47" pos:end="129:66"><expr pos:start="129:47" pos:end="129:66"><name pos:start="129:47" pos:end="129:66"><name pos:start="129:47" pos:end="129:51">hwdef</name><operator pos:start="129:52" pos:end="129:53">-&gt;</operator><name pos:start="129:54" pos:end="129:66">iommu_pad_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="135:5" pos:end="137:53"><expr pos:start="135:5" pos:end="137:52"><name pos:start="135:5" pos:end="135:10">espdma</name> <operator pos:start="135:12" pos:end="135:12">=</operator> <call pos:start="135:14" pos:end="137:52"><name pos:start="135:14" pos:end="135:29">sparc32_dma_init</name><argument_list pos:start="135:30" pos:end="137:52">(<argument pos:start="135:31" pos:end="135:45"><expr pos:start="135:31" pos:end="135:45"><name pos:start="135:31" pos:end="135:45"><name pos:start="135:31" pos:end="135:35">hwdef</name><operator pos:start="135:36" pos:end="135:37">-&gt;</operator><name pos:start="135:38" pos:end="135:45">dma_base</name></name></expr></argument>, <argument pos:start="135:48" pos:end="135:61"><expr pos:start="135:48" pos:end="135:61"><name pos:start="135:48" pos:end="135:61"><name pos:start="135:48" pos:end="135:57">slavio_irq</name><index pos:start="135:58" pos:end="135:61">[<expr pos:start="135:59" pos:end="135:60"><literal type="number" pos:start="135:59" pos:end="135:60">18</literal></expr>]</index></name></expr></argument>,

                              <argument pos:start="137:31" pos:end="137:35"><expr pos:start="137:31" pos:end="137:35"><name pos:start="137:31" pos:end="137:35">iommu</name></expr></argument>, <argument pos:start="137:38" pos:end="137:48"><expr pos:start="137:38" pos:end="137:48"><operator pos:start="137:38" pos:end="137:38">&amp;</operator><name pos:start="137:39" pos:end="137:48">espdma_irq</name></expr></argument>, <argument pos:start="137:51" pos:end="137:51"><expr pos:start="137:51" pos:end="137:51"><literal type="number" pos:start="137:51" pos:end="137:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="141:5" pos:end="143:67"><expr pos:start="141:5" pos:end="143:66"><name pos:start="141:5" pos:end="141:9">ledma</name> <operator pos:start="141:11" pos:end="141:11">=</operator> <call pos:start="141:13" pos:end="143:66"><name pos:start="141:13" pos:end="141:28">sparc32_dma_init</name><argument_list pos:start="141:29" pos:end="143:66">(<argument pos:start="141:30" pos:end="141:52"><expr pos:start="141:30" pos:end="141:52"><name pos:start="141:30" pos:end="141:44"><name pos:start="141:30" pos:end="141:34">hwdef</name><operator pos:start="141:35" pos:end="141:36">-&gt;</operator><name pos:start="141:37" pos:end="141:44">dma_base</name></name> <operator pos:start="141:46" pos:end="141:46">+</operator> <literal type="number" pos:start="141:48" pos:end="141:52">16ULL</literal></expr></argument>,

                             <argument pos:start="143:30" pos:end="143:43"><expr pos:start="143:30" pos:end="143:43"><name pos:start="143:30" pos:end="143:43"><name pos:start="143:30" pos:end="143:39">slavio_irq</name><index pos:start="143:40" pos:end="143:43">[<expr pos:start="143:41" pos:end="143:42"><literal type="number" pos:start="143:41" pos:end="143:42">16</literal></expr>]</index></name></expr></argument>, <argument pos:start="143:46" pos:end="143:50"><expr pos:start="143:46" pos:end="143:50"><name pos:start="143:46" pos:end="143:50">iommu</name></expr></argument>, <argument pos:start="143:53" pos:end="143:62"><expr pos:start="143:53" pos:end="143:62"><operator pos:start="143:53" pos:end="143:53">&amp;</operator><name pos:start="143:54" pos:end="143:62">ledma_irq</name></expr></argument>, <argument pos:start="143:65" pos:end="143:65"><expr pos:start="143:65" pos:end="143:65"><literal type="number" pos:start="143:65" pos:end="143:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="147:5" pos:end="153:5"><if pos:start="147:5" pos:end="153:5">if <condition pos:start="147:8" pos:end="147:50">(<expr pos:start="147:9" pos:end="147:49"><name pos:start="147:9" pos:end="147:21">graphic_depth</name> <operator pos:start="147:23" pos:end="147:24">!=</operator> <literal type="number" pos:start="147:26" pos:end="147:26">8</literal> <operator pos:start="147:28" pos:end="147:29">&amp;&amp;</operator> <name pos:start="147:31" pos:end="147:43">graphic_depth</name> <operator pos:start="147:45" pos:end="147:46">!=</operator> <literal type="number" pos:start="147:48" pos:end="147:49">24</literal></expr>)</condition> <block pos:start="147:52" pos:end="153:5">{<block_content pos:start="149:9" pos:end="151:17">

        <expr_stmt pos:start="149:9" pos:end="149:61"><expr pos:start="149:9" pos:end="149:60"><call pos:start="149:9" pos:end="149:60"><name pos:start="149:9" pos:end="149:20">error_report</name><argument_list pos:start="149:21" pos:end="149:60">(<argument pos:start="149:22" pos:end="149:44"><expr pos:start="149:22" pos:end="149:44"><literal type="string" pos:start="149:22" pos:end="149:44">"Unsupported depth: %d"</literal></expr></argument>, <argument pos:start="149:47" pos:end="149:59"><expr pos:start="149:47" pos:end="149:59"><name pos:start="149:47" pos:end="149:59">graphic_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:17"><expr pos:start="151:9" pos:end="151:16"><call pos:start="151:9" pos:end="151:16"><name pos:start="151:9" pos:end="151:12">exit</name> <argument_list pos:start="151:14" pos:end="151:16">(<argument pos:start="151:15" pos:end="151:15"><expr pos:start="151:15" pos:end="151:15"><literal type="number" pos:start="151:15" pos:end="151:15">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:19"><expr pos:start="155:5" pos:end="155:18"><name pos:start="155:5" pos:end="155:14">num_vsimms</name> <operator pos:start="155:16" pos:end="155:16">=</operator> <literal type="number" pos:start="155:18" pos:end="155:18">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="157:5" pos:end="223:5"><if pos:start="157:5" pos:end="223:5">if <condition pos:start="157:8" pos:end="157:24">(<expr pos:start="157:9" pos:end="157:23"><name pos:start="157:9" pos:end="157:18">num_vsimms</name> <operator pos:start="157:20" pos:end="157:21">==</operator> <literal type="number" pos:start="157:23" pos:end="157:23">0</literal></expr>)</condition> <block pos:start="157:26" pos:end="223:5">{<block_content pos:start="159:9" pos:end="221:9">

        <if_stmt pos:start="159:9" pos:end="221:9"><if pos:start="159:9" pos:end="191:9">if <condition pos:start="159:12" pos:end="159:42">(<expr pos:start="159:13" pos:end="159:41"><name pos:start="159:13" pos:end="159:30">vga_interface_type</name> <operator pos:start="159:32" pos:end="159:33">==</operator> <name pos:start="159:35" pos:end="159:41">VGA_CG3</name></expr>)</condition> <block pos:start="159:44" pos:end="191:9">{<block_content pos:start="161:13" pos:end="189:67">

            <if_stmt pos:start="161:13" pos:end="167:13"><if pos:start="161:13" pos:end="167:13">if <condition pos:start="161:16" pos:end="161:35">(<expr pos:start="161:17" pos:end="161:34"><name pos:start="161:17" pos:end="161:29">graphic_depth</name> <operator pos:start="161:31" pos:end="161:32">!=</operator> <literal type="number" pos:start="161:34" pos:end="161:34">8</literal></expr>)</condition> <block pos:start="161:37" pos:end="167:13">{<block_content pos:start="163:17" pos:end="165:24">

                <expr_stmt pos:start="163:17" pos:end="163:69"><expr pos:start="163:17" pos:end="163:68"><call pos:start="163:17" pos:end="163:68"><name pos:start="163:17" pos:end="163:28">error_report</name><argument_list pos:start="163:29" pos:end="163:68">(<argument pos:start="163:30" pos:end="163:52"><expr pos:start="163:30" pos:end="163:52"><literal type="string" pos:start="163:30" pos:end="163:52">"Unsupported depth: %d"</literal></expr></argument>, <argument pos:start="163:55" pos:end="163:67"><expr pos:start="163:55" pos:end="163:67"><name pos:start="163:55" pos:end="163:67">graphic_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="165:17" pos:end="165:24"><expr pos:start="165:17" pos:end="165:23"><call pos:start="165:17" pos:end="165:23"><name pos:start="165:17" pos:end="165:20">exit</name><argument_list pos:start="165:21" pos:end="165:23">(<argument pos:start="165:22" pos:end="165:22"><expr pos:start="165:22" pos:end="165:22"><literal type="number" pos:start="165:22" pos:end="165:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="171:13" pos:end="181:13"><if pos:start="171:13" pos:end="181:13">if <condition pos:start="171:16" pos:end="173:66">(<expr pos:start="171:17" pos:end="173:65"><operator pos:start="171:17" pos:end="171:17">!</operator><operator pos:start="171:18" pos:end="171:18">(</operator><name pos:start="171:19" pos:end="171:31">graphic_width</name> <operator pos:start="171:33" pos:end="171:34">==</operator> <literal type="number" pos:start="171:36" pos:end="171:39">1024</literal> <operator pos:start="171:41" pos:end="171:42">&amp;&amp;</operator> <name pos:start="171:44" pos:end="171:57">graphic_height</name> <operator pos:start="171:59" pos:end="171:60">==</operator> <literal type="number" pos:start="171:62" pos:end="171:64">768</literal><operator pos:start="171:65" pos:end="171:65">)</operator> <operator pos:start="171:67" pos:end="171:68">&amp;&amp;</operator>

                <operator pos:start="173:17" pos:end="173:17">!</operator><operator pos:start="173:18" pos:end="173:18">(</operator><name pos:start="173:19" pos:end="173:31">graphic_width</name> <operator pos:start="173:33" pos:end="173:34">==</operator> <literal type="number" pos:start="173:36" pos:end="173:39">1152</literal> <operator pos:start="173:41" pos:end="173:42">&amp;&amp;</operator> <name pos:start="173:44" pos:end="173:57">graphic_height</name> <operator pos:start="173:59" pos:end="173:60">==</operator> <literal type="number" pos:start="173:62" pos:end="173:64">900</literal><operator pos:start="173:65" pos:end="173:65">)</operator></expr>)</condition> <block pos:start="173:68" pos:end="181:13">{<block_content pos:start="175:17" pos:end="179:24">

                <expr_stmt pos:start="175:17" pos:end="177:45"><expr pos:start="175:17" pos:end="177:44"><call pos:start="175:17" pos:end="177:44"><name pos:start="175:17" pos:end="175:28">error_report</name><argument_list pos:start="175:29" pos:end="177:44">(<argument pos:start="175:30" pos:end="175:62"><expr pos:start="175:30" pos:end="175:62"><literal type="string" pos:start="175:30" pos:end="175:62">"Unsupported resolution: %d x %d"</literal></expr></argument>, <argument pos:start="175:65" pos:end="175:77"><expr pos:start="175:65" pos:end="175:77"><name pos:start="175:65" pos:end="175:77">graphic_width</name></expr></argument>,

                             <argument pos:start="177:30" pos:end="177:43"><expr pos:start="177:30" pos:end="177:43"><name pos:start="177:30" pos:end="177:43">graphic_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="179:17" pos:end="179:24"><expr pos:start="179:17" pos:end="179:23"><call pos:start="179:17" pos:end="179:23"><name pos:start="179:17" pos:end="179:20">exit</name><argument_list pos:start="179:21" pos:end="179:23">(<argument pos:start="179:22" pos:end="179:22"><expr pos:start="179:22" pos:end="179:22"><literal type="number" pos:start="179:22" pos:end="179:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="185:13" pos:end="185:28">/* sbus irq 5 */</comment>

            <expr_stmt pos:start="187:13" pos:end="189:67"><expr pos:start="187:13" pos:end="189:66"><call pos:start="187:13" pos:end="189:66"><name pos:start="187:13" pos:end="187:20">cg3_init</name><argument_list pos:start="187:21" pos:end="189:66">(<argument pos:start="187:22" pos:end="187:36"><expr pos:start="187:22" pos:end="187:36"><name pos:start="187:22" pos:end="187:36"><name pos:start="187:22" pos:end="187:26">hwdef</name><operator pos:start="187:27" pos:end="187:28">-&gt;</operator><name pos:start="187:29" pos:end="187:36">tcx_base</name></name></expr></argument>, <argument pos:start="187:39" pos:end="187:52"><expr pos:start="187:39" pos:end="187:52"><name pos:start="187:39" pos:end="187:52"><name pos:start="187:39" pos:end="187:48">slavio_irq</name><index pos:start="187:49" pos:end="187:52">[<expr pos:start="187:50" pos:end="187:51"><literal type="number" pos:start="187:50" pos:end="187:51">11</literal></expr>]</index></name></expr></argument>, <argument pos:start="187:55" pos:end="187:64"><expr pos:start="187:55" pos:end="187:64"><literal type="number" pos:start="187:55" pos:end="187:64">0x00100000</literal></expr></argument>,

                     <argument pos:start="189:22" pos:end="189:34"><expr pos:start="189:22" pos:end="189:34"><name pos:start="189:22" pos:end="189:34">graphic_width</name></expr></argument>, <argument pos:start="189:37" pos:end="189:50"><expr pos:start="189:37" pos:end="189:50"><name pos:start="189:37" pos:end="189:50">graphic_height</name></expr></argument>, <argument pos:start="189:53" pos:end="189:65"><expr pos:start="189:53" pos:end="189:65"><name pos:start="189:53" pos:end="189:65">graphic_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="191:11" pos:end="221:9">else <block pos:start="191:16" pos:end="221:9">{<block_content pos:start="195:13" pos:end="219:67">

            <comment type="block" pos:start="193:13" pos:end="193:57">/* If no display specified, default to TCX */</comment>

            <if_stmt pos:start="195:13" pos:end="201:13"><if pos:start="195:13" pos:end="201:13">if <condition pos:start="195:16" pos:end="195:58">(<expr pos:start="195:17" pos:end="195:57"><name pos:start="195:17" pos:end="195:29">graphic_depth</name> <operator pos:start="195:31" pos:end="195:32">!=</operator> <literal type="number" pos:start="195:34" pos:end="195:34">8</literal> <operator pos:start="195:36" pos:end="195:37">&amp;&amp;</operator> <name pos:start="195:39" pos:end="195:51">graphic_depth</name> <operator pos:start="195:53" pos:end="195:54">!=</operator> <literal type="number" pos:start="195:56" pos:end="195:57">24</literal></expr>)</condition> <block pos:start="195:60" pos:end="201:13">{<block_content pos:start="197:17" pos:end="199:24">

                <expr_stmt pos:start="197:17" pos:end="197:69"><expr pos:start="197:17" pos:end="197:68"><call pos:start="197:17" pos:end="197:68"><name pos:start="197:17" pos:end="197:28">error_report</name><argument_list pos:start="197:29" pos:end="197:68">(<argument pos:start="197:30" pos:end="197:52"><expr pos:start="197:30" pos:end="197:52"><literal type="string" pos:start="197:30" pos:end="197:52">"Unsupported depth: %d"</literal></expr></argument>, <argument pos:start="197:55" pos:end="197:67"><expr pos:start="197:55" pos:end="197:67"><name pos:start="197:55" pos:end="197:67">graphic_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="199:17" pos:end="199:24"><expr pos:start="199:17" pos:end="199:23"><call pos:start="199:17" pos:end="199:23"><name pos:start="199:17" pos:end="199:20">exit</name><argument_list pos:start="199:21" pos:end="199:23">(<argument pos:start="199:22" pos:end="199:22"><expr pos:start="199:22" pos:end="199:22"><literal type="number" pos:start="199:22" pos:end="199:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="205:13" pos:end="213:13"><if pos:start="205:13" pos:end="213:13">if <condition pos:start="205:16" pos:end="205:66">(<expr pos:start="205:17" pos:end="205:65"><operator pos:start="205:17" pos:end="205:17">!</operator><operator pos:start="205:18" pos:end="205:18">(</operator><name pos:start="205:19" pos:end="205:31">graphic_width</name> <operator pos:start="205:33" pos:end="205:34">==</operator> <literal type="number" pos:start="205:36" pos:end="205:39">1024</literal> <operator pos:start="205:41" pos:end="205:42">&amp;&amp;</operator> <name pos:start="205:44" pos:end="205:57">graphic_height</name> <operator pos:start="205:59" pos:end="205:60">==</operator> <literal type="number" pos:start="205:62" pos:end="205:64">768</literal><operator pos:start="205:65" pos:end="205:65">)</operator></expr>)</condition> <block pos:start="205:68" pos:end="213:13">{<block_content pos:start="207:17" pos:end="211:24">

                <expr_stmt pos:start="207:17" pos:end="209:60"><expr pos:start="207:17" pos:end="209:59"><call pos:start="207:17" pos:end="209:59"><name pos:start="207:17" pos:end="207:28">error_report</name><argument_list pos:start="207:29" pos:end="209:59">(<argument pos:start="207:30" pos:end="207:62"><expr pos:start="207:30" pos:end="207:62"><literal type="string" pos:start="207:30" pos:end="207:62">"Unsupported resolution: %d x %d"</literal></expr></argument>,

                             <argument pos:start="209:30" pos:end="209:42"><expr pos:start="209:30" pos:end="209:42"><name pos:start="209:30" pos:end="209:42">graphic_width</name></expr></argument>, <argument pos:start="209:45" pos:end="209:58"><expr pos:start="209:45" pos:end="209:58"><name pos:start="209:45" pos:end="209:58">graphic_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="211:17" pos:end="211:24"><expr pos:start="211:17" pos:end="211:23"><call pos:start="211:17" pos:end="211:23"><name pos:start="211:17" pos:end="211:20">exit</name><argument_list pos:start="211:21" pos:end="211:23">(<argument pos:start="211:22" pos:end="211:22"><expr pos:start="211:22" pos:end="211:22"><literal type="number" pos:start="211:22" pos:end="211:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="217:13" pos:end="219:67"><expr pos:start="217:13" pos:end="219:66"><call pos:start="217:13" pos:end="219:66"><name pos:start="217:13" pos:end="217:20">tcx_init</name><argument_list pos:start="217:21" pos:end="219:66">(<argument pos:start="217:22" pos:end="217:36"><expr pos:start="217:22" pos:end="217:36"><name pos:start="217:22" pos:end="217:36"><name pos:start="217:22" pos:end="217:26">hwdef</name><operator pos:start="217:27" pos:end="217:28">-&gt;</operator><name pos:start="217:29" pos:end="217:36">tcx_base</name></name></expr></argument>, <argument pos:start="217:39" pos:end="217:52"><expr pos:start="217:39" pos:end="217:52"><name pos:start="217:39" pos:end="217:52"><name pos:start="217:39" pos:end="217:48">slavio_irq</name><index pos:start="217:49" pos:end="217:52">[<expr pos:start="217:50" pos:end="217:51"><literal type="number" pos:start="217:50" pos:end="217:51">11</literal></expr>]</index></name></expr></argument>, <argument pos:start="217:55" pos:end="217:64"><expr pos:start="217:55" pos:end="217:64"><literal type="number" pos:start="217:55" pos:end="217:64">0x00100000</literal></expr></argument>,

                     <argument pos:start="219:22" pos:end="219:34"><expr pos:start="219:22" pos:end="219:34"><name pos:start="219:22" pos:end="219:34">graphic_width</name></expr></argument>, <argument pos:start="219:37" pos:end="219:50"><expr pos:start="219:37" pos:end="219:50"><name pos:start="219:37" pos:end="219:50">graphic_height</name></expr></argument>, <argument pos:start="219:53" pos:end="219:65"><expr pos:start="219:53" pos:end="219:65"><name pos:start="219:53" pos:end="219:65">graphic_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="227:5" pos:end="237:5">for <control pos:start="227:9" pos:end="227:45">(<init pos:start="227:10" pos:end="227:24"><expr pos:start="227:10" pos:end="227:23"><name pos:start="227:10" pos:end="227:10">i</name> <operator pos:start="227:12" pos:end="227:12">=</operator> <name pos:start="227:14" pos:end="227:23">num_vsimms</name></expr>;</init> <condition pos:start="227:26" pos:end="227:40"><expr pos:start="227:26" pos:end="227:39"><name pos:start="227:26" pos:end="227:26">i</name> <operator pos:start="227:28" pos:end="227:28">&lt;</operator> <name pos:start="227:30" pos:end="227:39">MAX_VSIMMS</name></expr>;</condition> <incr pos:start="227:42" pos:end="227:44"><expr pos:start="227:42" pos:end="227:44"><name pos:start="227:42" pos:end="227:42">i</name><operator pos:start="227:43" pos:end="227:44">++</operator></expr></incr>)</control> <block pos:start="227:47" pos:end="237:5">{<block_content pos:start="231:9" pos:end="235:9">

        <comment type="block" pos:start="229:9" pos:end="229:43">/* vsimm registers probed by OBP */</comment>

        <if_stmt pos:start="231:9" pos:end="235:9"><if pos:start="231:9" pos:end="235:9">if <condition pos:start="231:12" pos:end="231:37">(<expr pos:start="231:13" pos:end="231:36"><name pos:start="231:13" pos:end="231:27"><name pos:start="231:13" pos:end="231:17">hwdef</name><operator pos:start="231:18" pos:end="231:19">-&gt;</operator><name pos:start="231:20" pos:end="231:24">vsimm</name><index pos:start="231:25" pos:end="231:27">[<expr pos:start="231:26" pos:end="231:26"><name pos:start="231:26" pos:end="231:26">i</name></expr>]</index></name><operator pos:start="231:28" pos:end="231:28">.</operator><name pos:start="231:29" pos:end="231:36">reg_base</name></expr>)</condition> <block pos:start="231:39" pos:end="235:9">{<block_content pos:start="233:13" pos:end="233:62">

            <expr_stmt pos:start="233:13" pos:end="233:62"><expr pos:start="233:13" pos:end="233:61"><call pos:start="233:13" pos:end="233:61"><name pos:start="233:13" pos:end="233:27">empty_slot_init</name><argument_list pos:start="233:28" pos:end="233:61">(<argument pos:start="233:29" pos:end="233:52"><expr pos:start="233:29" pos:end="233:52"><name pos:start="233:29" pos:end="233:43"><name pos:start="233:29" pos:end="233:33">hwdef</name><operator pos:start="233:34" pos:end="233:35">-&gt;</operator><name pos:start="233:36" pos:end="233:40">vsimm</name><index pos:start="233:41" pos:end="233:43">[<expr pos:start="233:42" pos:end="233:42"><name pos:start="233:42" pos:end="233:42">i</name></expr>]</index></name><operator pos:start="233:44" pos:end="233:44">.</operator><name pos:start="233:45" pos:end="233:52">reg_base</name></expr></argument>, <argument pos:start="233:55" pos:end="233:60"><expr pos:start="233:55" pos:end="233:60"><literal type="number" pos:start="233:55" pos:end="233:60">0x2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="241:5" pos:end="245:5"><if pos:start="241:5" pos:end="245:5">if <condition pos:start="241:8" pos:end="241:23">(<expr pos:start="241:9" pos:end="241:22"><name pos:start="241:9" pos:end="241:22"><name pos:start="241:9" pos:end="241:13">hwdef</name><operator pos:start="241:14" pos:end="241:15">-&gt;</operator><name pos:start="241:16" pos:end="241:22">sx_base</name></name></expr>)</condition> <block pos:start="241:25" pos:end="245:5">{<block_content pos:start="243:9" pos:end="243:48">

        <expr_stmt pos:start="243:9" pos:end="243:48"><expr pos:start="243:9" pos:end="243:47"><call pos:start="243:9" pos:end="243:47"><name pos:start="243:9" pos:end="243:23">empty_slot_init</name><argument_list pos:start="243:24" pos:end="243:47">(<argument pos:start="243:25" pos:end="243:38"><expr pos:start="243:25" pos:end="243:38"><name pos:start="243:25" pos:end="243:38"><name pos:start="243:25" pos:end="243:29">hwdef</name><operator pos:start="243:30" pos:end="243:31">-&gt;</operator><name pos:start="243:32" pos:end="243:38">sx_base</name></name></expr></argument>, <argument pos:start="243:41" pos:end="243:46"><expr pos:start="243:41" pos:end="243:46"><literal type="number" pos:start="243:41" pos:end="243:46">0x2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="249:5" pos:end="249:63"><expr pos:start="249:5" pos:end="249:62"><call pos:start="249:5" pos:end="249:62"><name pos:start="249:5" pos:end="249:14">lance_init</name><argument_list pos:start="249:15" pos:end="249:62">(<argument pos:start="249:16" pos:end="249:27"><expr pos:start="249:16" pos:end="249:27"><operator pos:start="249:16" pos:end="249:16">&amp;</operator><name pos:start="249:17" pos:end="249:27"><name pos:start="249:17" pos:end="249:24">nd_table</name><index pos:start="249:25" pos:end="249:27">[<expr pos:start="249:26" pos:end="249:26"><literal type="number" pos:start="249:26" pos:end="249:26">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="249:30" pos:end="249:43"><expr pos:start="249:30" pos:end="249:43"><name pos:start="249:30" pos:end="249:43"><name pos:start="249:30" pos:end="249:34">hwdef</name><operator pos:start="249:35" pos:end="249:36">-&gt;</operator><name pos:start="249:37" pos:end="249:43">le_base</name></name></expr></argument>, <argument pos:start="249:46" pos:end="249:50"><expr pos:start="249:46" pos:end="249:50"><name pos:start="249:46" pos:end="249:50">ledma</name></expr></argument>, <argument pos:start="249:53" pos:end="249:61"><expr pos:start="249:53" pos:end="249:61"><name pos:start="249:53" pos:end="249:61">ledma_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="253:5" pos:end="253:78"><expr pos:start="253:5" pos:end="253:77"><name pos:start="253:5" pos:end="253:9">nvram</name> <operator pos:start="253:11" pos:end="253:11">=</operator> <call pos:start="253:13" pos:end="253:77"><name pos:start="253:13" pos:end="253:23">m48t59_init</name><argument_list pos:start="253:24" pos:end="253:77">(<argument pos:start="253:25" pos:end="253:37"><expr pos:start="253:25" pos:end="253:37"><name pos:start="253:25" pos:end="253:37"><name pos:start="253:25" pos:end="253:34">slavio_irq</name><index pos:start="253:35" pos:end="253:37">[<expr pos:start="253:36" pos:end="253:36"><literal type="number" pos:start="253:36" pos:end="253:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="253:40" pos:end="253:56"><expr pos:start="253:40" pos:end="253:56"><name pos:start="253:40" pos:end="253:56"><name pos:start="253:40" pos:end="253:44">hwdef</name><operator pos:start="253:45" pos:end="253:46">-&gt;</operator><name pos:start="253:47" pos:end="253:56">nvram_base</name></name></expr></argument>, <argument pos:start="253:59" pos:end="253:59"><expr pos:start="253:59" pos:end="253:59"><literal type="number" pos:start="253:59" pos:end="253:59">0</literal></expr></argument>, <argument pos:start="253:62" pos:end="253:67"><expr pos:start="253:62" pos:end="253:67"><literal type="number" pos:start="253:62" pos:end="253:67">0x2000</literal></expr></argument>, <argument pos:start="253:70" pos:end="253:73"><expr pos:start="253:70" pos:end="253:73"><literal type="number" pos:start="253:70" pos:end="253:73">1968</literal></expr></argument>, <argument pos:start="253:76" pos:end="253:76"><expr pos:start="253:76" pos:end="253:76"><literal type="number" pos:start="253:76" pos:end="253:76">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="257:5" pos:end="257:89"><expr pos:start="257:5" pos:end="257:88"><call pos:start="257:5" pos:end="257:88"><name pos:start="257:5" pos:end="257:25">slavio_timer_init_all</name><argument_list pos:start="257:26" pos:end="257:88">(<argument pos:start="257:27" pos:end="257:45"><expr pos:start="257:27" pos:end="257:45"><name pos:start="257:27" pos:end="257:45"><name pos:start="257:27" pos:end="257:31">hwdef</name><operator pos:start="257:32" pos:end="257:33">-&gt;</operator><name pos:start="257:34" pos:end="257:45">counter_base</name></name></expr></argument>, <argument pos:start="257:48" pos:end="257:61"><expr pos:start="257:48" pos:end="257:61"><name pos:start="257:48" pos:end="257:61"><name pos:start="257:48" pos:end="257:57">slavio_irq</name><index pos:start="257:58" pos:end="257:61">[<expr pos:start="257:59" pos:end="257:60"><literal type="number" pos:start="257:59" pos:end="257:60">19</literal></expr>]</index></name></expr></argument>, <argument pos:start="257:64" pos:end="257:77"><expr pos:start="257:64" pos:end="257:77"><name pos:start="257:64" pos:end="257:77">slavio_cpu_irq</name></expr></argument>, <argument pos:start="257:80" pos:end="257:87"><expr pos:start="257:80" pos:end="257:87"><name pos:start="257:80" pos:end="257:87">smp_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="261:5" pos:end="263:75"><expr pos:start="261:5" pos:end="263:74"><call pos:start="261:5" pos:end="263:74"><name pos:start="261:5" pos:end="261:29">slavio_serial_ms_kbd_init</name><argument_list pos:start="261:30" pos:end="263:74">(<argument pos:start="261:31" pos:end="261:47"><expr pos:start="261:31" pos:end="261:47"><name pos:start="261:31" pos:end="261:47"><name pos:start="261:31" pos:end="261:35">hwdef</name><operator pos:start="261:36" pos:end="261:37">-&gt;</operator><name pos:start="261:38" pos:end="261:47">ms_kb_base</name></name></expr></argument>, <argument pos:start="261:50" pos:end="261:63"><expr pos:start="261:50" pos:end="261:63"><name pos:start="261:50" pos:end="261:63"><name pos:start="261:50" pos:end="261:59">slavio_irq</name><index pos:start="261:60" pos:end="261:63">[<expr pos:start="261:61" pos:end="261:62"><literal type="number" pos:start="261:61" pos:end="261:62">14</literal></expr>]</index></name></expr></argument>,

                              <argument pos:start="263:31" pos:end="263:58"><expr pos:start="263:31" pos:end="263:58"><name pos:start="263:31" pos:end="263:42">display_type</name> <operator pos:start="263:44" pos:end="263:45">==</operator> <name pos:start="263:47" pos:end="263:58">DT_NOGRAPHIC</name></expr></argument>, <argument pos:start="263:61" pos:end="263:70"><expr pos:start="263:61" pos:end="263:70"><name pos:start="263:61" pos:end="263:70">ESCC_CLOCK</name></expr></argument>, <argument pos:start="263:73" pos:end="263:73"><expr pos:start="263:73" pos:end="263:73"><literal type="number" pos:start="263:73" pos:end="263:73">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="265:5" pos:end="267:76">/* Slavio TTYA (base+4, Linux ttyS0) is the first QEMU serial device

       Slavio TTYB (base+0, Linux ttyS1) is the second QEMU serial device */</comment>

    <expr_stmt pos:start="269:5" pos:end="271:59"><expr pos:start="269:5" pos:end="271:58"><call pos:start="269:5" pos:end="271:58"><name pos:start="269:5" pos:end="269:13">escc_init</name><argument_list pos:start="269:14" pos:end="271:58">(<argument pos:start="269:15" pos:end="269:32"><expr pos:start="269:15" pos:end="269:32"><name pos:start="269:15" pos:end="269:32"><name pos:start="269:15" pos:end="269:19">hwdef</name><operator pos:start="269:20" pos:end="269:21">-&gt;</operator><name pos:start="269:22" pos:end="269:32">serial_base</name></name></expr></argument>, <argument pos:start="269:35" pos:end="269:48"><expr pos:start="269:35" pos:end="269:48"><name pos:start="269:35" pos:end="269:48"><name pos:start="269:35" pos:end="269:44">slavio_irq</name><index pos:start="269:45" pos:end="269:48">[<expr pos:start="269:46" pos:end="269:47"><literal type="number" pos:start="269:46" pos:end="269:47">15</literal></expr>]</index></name></expr></argument>, <argument pos:start="269:51" pos:end="269:64"><expr pos:start="269:51" pos:end="269:64"><name pos:start="269:51" pos:end="269:64"><name pos:start="269:51" pos:end="269:60">slavio_irq</name><index pos:start="269:61" pos:end="269:64">[<expr pos:start="269:62" pos:end="269:63"><literal type="number" pos:start="269:62" pos:end="269:63">15</literal></expr>]</index></name></expr></argument>,

              <argument pos:start="271:15" pos:end="271:27"><expr pos:start="271:15" pos:end="271:27"><name pos:start="271:15" pos:end="271:27"><name pos:start="271:15" pos:end="271:24">serial_hds</name><index pos:start="271:25" pos:end="271:27">[<expr pos:start="271:26" pos:end="271:26"><literal type="number" pos:start="271:26" pos:end="271:26">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="271:30" pos:end="271:42"><expr pos:start="271:30" pos:end="271:42"><name pos:start="271:30" pos:end="271:42"><name pos:start="271:30" pos:end="271:39">serial_hds</name><index pos:start="271:40" pos:end="271:42">[<expr pos:start="271:41" pos:end="271:41"><literal type="number" pos:start="271:41" pos:end="271:41">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="271:45" pos:end="271:54"><expr pos:start="271:45" pos:end="271:54"><name pos:start="271:45" pos:end="271:54">ESCC_CLOCK</name></expr></argument>, <argument pos:start="271:57" pos:end="271:57"><expr pos:start="271:57" pos:end="271:57"><literal type="number" pos:start="271:57" pos:end="271:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="275:5" pos:end="275:60"><expr pos:start="275:5" pos:end="275:59"><name pos:start="275:5" pos:end="275:12">cpu_halt</name> <operator pos:start="275:14" pos:end="275:14">=</operator> <call pos:start="275:16" pos:end="275:59"><name pos:start="275:16" pos:end="275:33">qemu_allocate_irqs</name><argument_list pos:start="275:34" pos:end="275:59">(<argument pos:start="275:35" pos:end="275:49"><expr pos:start="275:35" pos:end="275:49"><name pos:start="275:35" pos:end="275:49">cpu_halt_signal</name></expr></argument>, <argument pos:start="275:52" pos:end="275:55"><expr pos:start="275:52" pos:end="275:55"><name pos:start="275:52" pos:end="275:55">NULL</name></expr></argument>, <argument pos:start="275:58" pos:end="275:58"><expr pos:start="275:58" pos:end="275:58"><literal type="number" pos:start="275:58" pos:end="275:58">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="277:5" pos:end="281:5"><if pos:start="277:5" pos:end="281:5">if <condition pos:start="277:8" pos:end="277:24">(<expr pos:start="277:9" pos:end="277:23"><name pos:start="277:9" pos:end="277:23"><name pos:start="277:9" pos:end="277:13">hwdef</name><operator pos:start="277:14" pos:end="277:15">-&gt;</operator><name pos:start="277:16" pos:end="277:23">apc_base</name></name></expr>)</condition> <block pos:start="277:26" pos:end="281:5">{<block_content pos:start="279:9" pos:end="279:47">

        <expr_stmt pos:start="279:9" pos:end="279:47"><expr pos:start="279:9" pos:end="279:46"><call pos:start="279:9" pos:end="279:46"><name pos:start="279:9" pos:end="279:16">apc_init</name><argument_list pos:start="279:17" pos:end="279:46">(<argument pos:start="279:18" pos:end="279:32"><expr pos:start="279:18" pos:end="279:32"><name pos:start="279:18" pos:end="279:32"><name pos:start="279:18" pos:end="279:22">hwdef</name><operator pos:start="279:23" pos:end="279:24">-&gt;</operator><name pos:start="279:25" pos:end="279:32">apc_base</name></name></expr></argument>, <argument pos:start="279:35" pos:end="279:45"><expr pos:start="279:35" pos:end="279:45"><name pos:start="279:35" pos:end="279:45"><name pos:start="279:35" pos:end="279:42">cpu_halt</name><index pos:start="279:43" pos:end="279:45">[<expr pos:start="279:44" pos:end="279:44"><literal type="number" pos:start="279:44" pos:end="279:44">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="285:5" pos:end="301:5"><if pos:start="285:5" pos:end="297:5">if <condition pos:start="285:8" pos:end="285:23">(<expr pos:start="285:9" pos:end="285:22"><name pos:start="285:9" pos:end="285:22"><name pos:start="285:9" pos:end="285:13">hwdef</name><operator pos:start="285:14" pos:end="285:15">-&gt;</operator><name pos:start="285:16" pos:end="285:22">fd_base</name></name></expr>)</condition> <block pos:start="285:25" pos:end="297:5">{<block_content pos:start="289:9" pos:end="295:35">

        <comment type="block" pos:start="287:9" pos:end="287:47">/* there is zero or one floppy drive */</comment>

        <expr_stmt pos:start="289:9" pos:end="289:34"><expr pos:start="289:9" pos:end="289:33"><call pos:start="289:9" pos:end="289:33"><name pos:start="289:9" pos:end="289:14">memset</name><argument_list pos:start="289:15" pos:end="289:33">(<argument pos:start="289:16" pos:end="289:17"><expr pos:start="289:16" pos:end="289:17"><name pos:start="289:16" pos:end="289:17">fd</name></expr></argument>, <argument pos:start="289:20" pos:end="289:20"><expr pos:start="289:20" pos:end="289:20"><literal type="number" pos:start="289:20" pos:end="289:20">0</literal></expr></argument>, <argument pos:start="289:23" pos:end="289:32"><expr pos:start="289:23" pos:end="289:32"><sizeof pos:start="289:23" pos:end="289:32">sizeof<argument_list pos:start="289:29" pos:end="289:32">(<argument pos:start="289:30" pos:end="289:31"><expr pos:start="289:30" pos:end="289:31"><name pos:start="289:30" pos:end="289:31">fd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="291:9" pos:end="291:43"><expr pos:start="291:9" pos:end="291:42"><name pos:start="291:9" pos:end="291:13"><name pos:start="291:9" pos:end="291:10">fd</name><index pos:start="291:11" pos:end="291:13">[<expr pos:start="291:12" pos:end="291:12"><literal type="number" pos:start="291:12" pos:end="291:12">0</literal></expr>]</index></name> <operator pos:start="291:15" pos:end="291:15">=</operator> <call pos:start="291:17" pos:end="291:42"><name pos:start="291:17" pos:end="291:25">drive_get</name><argument_list pos:start="291:26" pos:end="291:42">(<argument pos:start="291:27" pos:end="291:35"><expr pos:start="291:27" pos:end="291:35"><name pos:start="291:27" pos:end="291:35">IF_FLOPPY</name></expr></argument>, <argument pos:start="291:38" pos:end="291:38"><expr pos:start="291:38" pos:end="291:38"><literal type="number" pos:start="291:38" pos:end="291:38">0</literal></expr></argument>, <argument pos:start="291:41" pos:end="291:41"><expr pos:start="291:41" pos:end="291:41"><literal type="number" pos:start="291:41" pos:end="291:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="293:9" pos:end="295:35"><expr pos:start="293:9" pos:end="295:34"><call pos:start="293:9" pos:end="295:34"><name pos:start="293:9" pos:end="293:25">sun4m_fdctrl_init</name><argument_list pos:start="293:26" pos:end="295:34">(<argument pos:start="293:27" pos:end="293:40"><expr pos:start="293:27" pos:end="293:40"><name pos:start="293:27" pos:end="293:40"><name pos:start="293:27" pos:end="293:36">slavio_irq</name><index pos:start="293:37" pos:end="293:40">[<expr pos:start="293:38" pos:end="293:39"><literal type="number" pos:start="293:38" pos:end="293:39">22</literal></expr>]</index></name></expr></argument>, <argument pos:start="293:43" pos:end="293:56"><expr pos:start="293:43" pos:end="293:56"><name pos:start="293:43" pos:end="293:56"><name pos:start="293:43" pos:end="293:47">hwdef</name><operator pos:start="293:48" pos:end="293:49">-&gt;</operator><name pos:start="293:50" pos:end="293:56">fd_base</name></name></expr></argument>, <argument pos:start="293:59" pos:end="293:60"><expr pos:start="293:59" pos:end="293:60"><name pos:start="293:59" pos:end="293:60">fd</name></expr></argument>,

                          <argument pos:start="295:27" pos:end="295:33"><expr pos:start="295:27" pos:end="295:33"><operator pos:start="295:27" pos:end="295:27">&amp;</operator><name pos:start="295:28" pos:end="295:33">fdc_tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="297:7" pos:end="301:5">else <block pos:start="297:12" pos:end="301:5">{<block_content pos:start="299:9" pos:end="299:60">

        <expr_stmt pos:start="299:9" pos:end="299:60"><expr pos:start="299:9" pos:end="299:59"><name pos:start="299:9" pos:end="299:14">fdc_tc</name> <operator pos:start="299:16" pos:end="299:16">=</operator> <operator pos:start="299:18" pos:end="299:18">*</operator><call pos:start="299:19" pos:end="299:59"><name pos:start="299:19" pos:end="299:36">qemu_allocate_irqs</name><argument_list pos:start="299:37" pos:end="299:59">(<argument pos:start="299:38" pos:end="299:49"><expr pos:start="299:38" pos:end="299:49"><name pos:start="299:38" pos:end="299:49">dummy_fdc_tc</name></expr></argument>, <argument pos:start="299:52" pos:end="299:55"><expr pos:start="299:52" pos:end="299:55"><name pos:start="299:52" pos:end="299:55">NULL</name></expr></argument>, <argument pos:start="299:58" pos:end="299:58"><expr pos:start="299:58" pos:end="299:58"><literal type="number" pos:start="299:58" pos:end="299:58">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="305:5" pos:end="307:45"><expr pos:start="305:5" pos:end="307:44"><call pos:start="305:5" pos:end="307:44"><name pos:start="305:5" pos:end="305:20">slavio_misc_init</name><argument_list pos:start="305:21" pos:end="307:44">(<argument pos:start="305:22" pos:end="305:39"><expr pos:start="305:22" pos:end="305:39"><name pos:start="305:22" pos:end="305:39"><name pos:start="305:22" pos:end="305:26">hwdef</name><operator pos:start="305:27" pos:end="305:28">-&gt;</operator><name pos:start="305:29" pos:end="305:39">slavio_base</name></name></expr></argument>, <argument pos:start="305:42" pos:end="305:57"><expr pos:start="305:42" pos:end="305:57"><name pos:start="305:42" pos:end="305:57"><name pos:start="305:42" pos:end="305:46">hwdef</name><operator pos:start="305:47" pos:end="305:48">-&gt;</operator><name pos:start="305:49" pos:end="305:57">aux1_base</name></name></expr></argument>, <argument pos:start="305:60" pos:end="305:75"><expr pos:start="305:60" pos:end="305:75"><name pos:start="305:60" pos:end="305:75"><name pos:start="305:60" pos:end="305:64">hwdef</name><operator pos:start="305:65" pos:end="305:66">-&gt;</operator><name pos:start="305:67" pos:end="305:75">aux2_base</name></name></expr></argument>,

                     <argument pos:start="307:22" pos:end="307:35"><expr pos:start="307:22" pos:end="307:35"><name pos:start="307:22" pos:end="307:35"><name pos:start="307:22" pos:end="307:31">slavio_irq</name><index pos:start="307:32" pos:end="307:35">[<expr pos:start="307:33" pos:end="307:34"><literal type="number" pos:start="307:33" pos:end="307:34">30</literal></expr>]</index></name></expr></argument>, <argument pos:start="307:38" pos:end="307:43"><expr pos:start="307:38" pos:end="307:43"><name pos:start="307:38" pos:end="307:43">fdc_tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="311:5" pos:end="317:5"><if pos:start="311:5" pos:end="317:5">if <condition pos:start="311:8" pos:end="311:39">(<expr pos:start="311:9" pos:end="311:38"><call pos:start="311:9" pos:end="311:34"><name pos:start="311:9" pos:end="311:25">drive_get_max_bus</name><argument_list pos:start="311:26" pos:end="311:34">(<argument pos:start="311:27" pos:end="311:33"><expr pos:start="311:27" pos:end="311:33"><name pos:start="311:27" pos:end="311:33">IF_SCSI</name></expr></argument>)</argument_list></call> <operator pos:start="311:36" pos:end="311:36">&gt;</operator> <literal type="number" pos:start="311:38" pos:end="311:38">0</literal></expr>)</condition> <block pos:start="311:41" pos:end="317:5">{<block_content pos:start="313:9" pos:end="315:16">

        <expr_stmt pos:start="313:9" pos:end="313:53"><expr pos:start="313:9" pos:end="313:52"><call pos:start="313:9" pos:end="313:52"><name pos:start="313:9" pos:end="313:15">fprintf</name><argument_list pos:start="313:16" pos:end="313:52">(<argument pos:start="313:17" pos:end="313:22"><expr pos:start="313:17" pos:end="313:22"><name pos:start="313:17" pos:end="313:22">stderr</name></expr></argument>, <argument pos:start="313:25" pos:end="313:51"><expr pos:start="313:25" pos:end="313:51"><literal type="string" pos:start="313:25" pos:end="313:51">"qemu: too many SCSI bus\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="315:9" pos:end="315:16"><expr pos:start="315:9" pos:end="315:15"><call pos:start="315:9" pos:end="315:15"><name pos:start="315:9" pos:end="315:12">exit</name><argument_list pos:start="315:13" pos:end="315:15">(<argument pos:start="315:14" pos:end="315:14"><expr pos:start="315:14" pos:end="315:14"><literal type="number" pos:start="315:14" pos:end="315:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="321:5" pos:end="325:58"><expr pos:start="321:5" pos:end="325:57"><call pos:start="321:5" pos:end="325:57"><name pos:start="321:5" pos:end="321:12">esp_init</name><argument_list pos:start="321:13" pos:end="325:57">(<argument pos:start="321:14" pos:end="321:28"><expr pos:start="321:14" pos:end="321:28"><name pos:start="321:14" pos:end="321:28"><name pos:start="321:14" pos:end="321:18">hwdef</name><operator pos:start="321:19" pos:end="321:20">-&gt;</operator><name pos:start="321:21" pos:end="321:28">esp_base</name></name></expr></argument>, <argument pos:start="321:31" pos:end="321:31"><expr pos:start="321:31" pos:end="321:31"><literal type="number" pos:start="321:31" pos:end="321:31">2</literal></expr></argument>,

             <argument pos:start="323:14" pos:end="323:31"><expr pos:start="323:14" pos:end="323:31"><name pos:start="323:14" pos:end="323:31">espdma_memory_read</name></expr></argument>, <argument pos:start="323:34" pos:end="323:52"><expr pos:start="323:34" pos:end="323:52"><name pos:start="323:34" pos:end="323:52">espdma_memory_write</name></expr></argument>,

             <argument pos:start="325:14" pos:end="325:19"><expr pos:start="325:14" pos:end="325:19"><name pos:start="325:14" pos:end="325:19">espdma</name></expr></argument>, <argument pos:start="325:22" pos:end="325:31"><expr pos:start="325:22" pos:end="325:31"><name pos:start="325:22" pos:end="325:31">espdma_irq</name></expr></argument>, <argument pos:start="325:34" pos:end="325:43"><expr pos:start="325:34" pos:end="325:43"><operator pos:start="325:34" pos:end="325:34">&amp;</operator><name pos:start="325:35" pos:end="325:43">esp_reset</name></expr></argument>, <argument pos:start="325:46" pos:end="325:56"><expr pos:start="325:46" pos:end="325:56"><operator pos:start="325:46" pos:end="325:46">&amp;</operator><name pos:start="325:47" pos:end="325:56">dma_enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="329:5" pos:end="329:48"><expr pos:start="329:5" pos:end="329:47"><call pos:start="329:5" pos:end="329:47"><name pos:start="329:5" pos:end="329:25">qdev_connect_gpio_out</name><argument_list pos:start="329:26" pos:end="329:47">(<argument pos:start="329:27" pos:end="329:32"><expr pos:start="329:27" pos:end="329:32"><name pos:start="329:27" pos:end="329:32">espdma</name></expr></argument>, <argument pos:start="329:35" pos:end="329:35"><expr pos:start="329:35" pos:end="329:35"><literal type="number" pos:start="329:35" pos:end="329:35">0</literal></expr></argument>, <argument pos:start="329:38" pos:end="329:46"><expr pos:start="329:38" pos:end="329:46"><name pos:start="329:38" pos:end="329:46">esp_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="331:5" pos:end="331:49"><expr pos:start="331:5" pos:end="331:48"><call pos:start="331:5" pos:end="331:48"><name pos:start="331:5" pos:end="331:25">qdev_connect_gpio_out</name><argument_list pos:start="331:26" pos:end="331:48">(<argument pos:start="331:27" pos:end="331:32"><expr pos:start="331:27" pos:end="331:32"><name pos:start="331:27" pos:end="331:32">espdma</name></expr></argument>, <argument pos:start="331:35" pos:end="331:35"><expr pos:start="331:35" pos:end="331:35"><literal type="number" pos:start="331:35" pos:end="331:35">1</literal></expr></argument>, <argument pos:start="331:38" pos:end="331:47"><expr pos:start="331:38" pos:end="331:47"><name pos:start="331:38" pos:end="331:47">dma_enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="335:5" pos:end="341:5"><if pos:start="335:5" pos:end="341:5">if <condition pos:start="335:8" pos:end="335:23">(<expr pos:start="335:9" pos:end="335:22"><name pos:start="335:9" pos:end="335:22"><name pos:start="335:9" pos:end="335:13">hwdef</name><operator pos:start="335:14" pos:end="335:15">-&gt;</operator><name pos:start="335:16" pos:end="335:22">cs_base</name></name></expr>)</condition> <block pos:start="335:25" pos:end="341:5">{<block_content pos:start="337:9" pos:end="339:44">

        <expr_stmt pos:start="337:9" pos:end="339:44"><expr pos:start="337:9" pos:end="339:43"><call pos:start="337:9" pos:end="339:43"><name pos:start="337:9" pos:end="337:28">sysbus_create_simple</name><argument_list pos:start="337:29" pos:end="339:43">(<argument pos:start="337:30" pos:end="337:42"><expr pos:start="337:30" pos:end="337:42"><literal type="string" pos:start="337:30" pos:end="337:42">"SUNW,CS4231"</literal></expr></argument>, <argument pos:start="337:45" pos:end="337:58"><expr pos:start="337:45" pos:end="337:58"><name pos:start="337:45" pos:end="337:58"><name pos:start="337:45" pos:end="337:49">hwdef</name><operator pos:start="337:50" pos:end="337:51">-&gt;</operator><name pos:start="337:52" pos:end="337:58">cs_base</name></name></expr></argument>,

                             <argument pos:start="339:30" pos:end="339:42"><expr pos:start="339:30" pos:end="339:42"><name pos:start="339:30" pos:end="339:42"><name pos:start="339:30" pos:end="339:39">slavio_irq</name><index pos:start="339:40" pos:end="339:42">[<expr pos:start="339:41" pos:end="339:41"><literal type="number" pos:start="339:41" pos:end="339:41">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="345:5" pos:end="357:5"><if pos:start="345:5" pos:end="357:5">if <condition pos:start="345:8" pos:end="345:25">(<expr pos:start="345:9" pos:end="345:24"><name pos:start="345:9" pos:end="345:24"><name pos:start="345:9" pos:end="345:13">hwdef</name><operator pos:start="345:14" pos:end="345:15">-&gt;</operator><name pos:start="345:16" pos:end="345:24">dbri_base</name></name></expr>)</condition> <block pos:start="345:27" pos:end="357:5">{<block_content pos:start="351:9" pos:end="355:57">

        <comment type="block" pos:start="347:9" pos:end="347:56">/* ISDN chip with attached CS4215 audio codec */</comment>

        <comment type="block" pos:start="349:9" pos:end="349:24">/* prom space */</comment>

        <expr_stmt pos:start="351:9" pos:end="351:55"><expr pos:start="351:9" pos:end="351:54"><call pos:start="351:9" pos:end="351:54"><name pos:start="351:9" pos:end="351:23">empty_slot_init</name><argument_list pos:start="351:24" pos:end="351:54">(<argument pos:start="351:25" pos:end="351:47"><expr pos:start="351:25" pos:end="351:47"><name pos:start="351:25" pos:end="351:40"><name pos:start="351:25" pos:end="351:29">hwdef</name><operator pos:start="351:30" pos:end="351:31">-&gt;</operator><name pos:start="351:32" pos:end="351:40">dbri_base</name></name><operator pos:start="351:41" pos:end="351:41">+</operator><literal type="number" pos:start="351:42" pos:end="351:47">0x1000</literal></expr></argument>, <argument pos:start="351:50" pos:end="351:53"><expr pos:start="351:50" pos:end="351:53"><literal type="number" pos:start="351:50" pos:end="351:53">0x30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="353:9" pos:end="353:23">/* reg space */</comment>

        <expr_stmt pos:start="355:9" pos:end="355:57"><expr pos:start="355:9" pos:end="355:56"><call pos:start="355:9" pos:end="355:56"><name pos:start="355:9" pos:end="355:23">empty_slot_init</name><argument_list pos:start="355:24" pos:end="355:56">(<argument pos:start="355:25" pos:end="355:48"><expr pos:start="355:25" pos:end="355:48"><name pos:start="355:25" pos:end="355:40"><name pos:start="355:25" pos:end="355:29">hwdef</name><operator pos:start="355:30" pos:end="355:31">-&gt;</operator><name pos:start="355:32" pos:end="355:40">dbri_base</name></name><operator pos:start="355:41" pos:end="355:41">+</operator><literal type="number" pos:start="355:42" pos:end="355:48">0x10000</literal></expr></argument>, <argument pos:start="355:51" pos:end="355:55"><expr pos:start="355:51" pos:end="355:55"><literal type="number" pos:start="355:51" pos:end="355:55">0x100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="361:5" pos:end="367:5"><if pos:start="361:5" pos:end="367:5">if <condition pos:start="361:8" pos:end="361:24">(<expr pos:start="361:9" pos:end="361:23"><name pos:start="361:9" pos:end="361:23"><name pos:start="361:9" pos:end="361:13">hwdef</name><operator pos:start="361:14" pos:end="361:15">-&gt;</operator><name pos:start="361:16" pos:end="361:23">bpp_base</name></name></expr>)</condition> <block pos:start="361:26" pos:end="367:5">{<block_content pos:start="365:9" pos:end="365:47">

        <comment type="block" pos:start="363:9" pos:end="363:27">/* parallel port */</comment>

        <expr_stmt pos:start="365:9" pos:end="365:47"><expr pos:start="365:9" pos:end="365:46"><call pos:start="365:9" pos:end="365:46"><name pos:start="365:9" pos:end="365:23">empty_slot_init</name><argument_list pos:start="365:24" pos:end="365:46">(<argument pos:start="365:25" pos:end="365:39"><expr pos:start="365:25" pos:end="365:39"><name pos:start="365:25" pos:end="365:39"><name pos:start="365:25" pos:end="365:29">hwdef</name><operator pos:start="365:30" pos:end="365:31">-&gt;</operator><name pos:start="365:32" pos:end="365:39">bpp_base</name></name></expr></argument>, <argument pos:start="365:42" pos:end="365:45"><expr pos:start="365:42" pos:end="365:45"><literal type="number" pos:start="365:42" pos:end="365:45">0x20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="371:5" pos:end="375:55"><expr pos:start="371:5" pos:end="375:54"><name pos:start="371:5" pos:end="371:15">kernel_size</name> <operator pos:start="371:17" pos:end="371:17">=</operator> <call pos:start="371:19" pos:end="375:54"><name pos:start="371:19" pos:end="371:35">sun4m_load_kernel</name><argument_list pos:start="371:36" pos:end="375:54">(<argument pos:start="371:37" pos:end="371:60"><expr pos:start="371:37" pos:end="371:60"><name pos:start="371:37" pos:end="371:60"><name pos:start="371:37" pos:end="371:43">machine</name><operator pos:start="371:44" pos:end="371:45">-&gt;</operator><name pos:start="371:46" pos:end="371:60">kernel_filename</name></name></expr></argument>,

                                    <argument pos:start="373:37" pos:end="373:60"><expr pos:start="373:37" pos:end="373:60"><name pos:start="373:37" pos:end="373:60"><name pos:start="373:37" pos:end="373:43">machine</name><operator pos:start="373:44" pos:end="373:45">-&gt;</operator><name pos:start="373:46" pos:end="373:60">initrd_filename</name></name></expr></argument>,

                                    <argument pos:start="375:37" pos:end="375:53"><expr pos:start="375:37" pos:end="375:53"><name pos:start="375:37" pos:end="375:53"><name pos:start="375:37" pos:end="375:43">machine</name><operator pos:start="375:44" pos:end="375:45">-&gt;</operator><name pos:start="375:46" pos:end="375:53">ram_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="379:5" pos:end="385:49"><expr pos:start="379:5" pos:end="385:48"><call pos:start="379:5" pos:end="385:48"><name pos:start="379:5" pos:end="379:14">nvram_init</name><argument_list pos:start="379:15" pos:end="385:48">(<argument pos:start="379:16" pos:end="379:20"><expr pos:start="379:16" pos:end="379:20"><name pos:start="379:16" pos:end="379:20">nvram</name></expr></argument>, <argument pos:start="379:23" pos:end="379:53"><expr pos:start="379:23" pos:end="379:53"><operator pos:start="379:23" pos:end="379:23">(</operator><name pos:start="379:24" pos:end="379:30">uint8_t</name> <operator pos:start="379:32" pos:end="379:32">*</operator><operator pos:start="379:33" pos:end="379:33">)</operator><operator pos:start="379:34" pos:end="379:34">&amp;</operator><name pos:start="379:35" pos:end="379:45"><name pos:start="379:35" pos:end="379:42">nd_table</name><index pos:start="379:43" pos:end="379:45">[<expr pos:start="379:44" pos:end="379:44"><literal type="number" pos:start="379:44" pos:end="379:44">0</literal></expr>]</index></name><operator pos:start="379:46" pos:end="379:46">.</operator><name pos:start="379:47" pos:end="379:53">macaddr</name></expr></argument>, <argument pos:start="379:56" pos:end="379:78"><expr pos:start="379:56" pos:end="379:78"><name pos:start="379:56" pos:end="379:78"><name pos:start="379:56" pos:end="379:62">machine</name><operator pos:start="379:63" pos:end="379:64">-&gt;</operator><name pos:start="379:65" pos:end="379:78">kernel_cmdline</name></name></expr></argument>,

               <argument pos:start="381:16" pos:end="381:34"><expr pos:start="381:16" pos:end="381:34"><name pos:start="381:16" pos:end="381:34"><name pos:start="381:16" pos:end="381:22">machine</name><operator pos:start="381:23" pos:end="381:24">-&gt;</operator><name pos:start="381:25" pos:end="381:34">boot_order</name></name></expr></argument>, <argument pos:start="381:37" pos:end="381:53"><expr pos:start="381:37" pos:end="381:53"><name pos:start="381:37" pos:end="381:53"><name pos:start="381:37" pos:end="381:43">machine</name><operator pos:start="381:44" pos:end="381:45">-&gt;</operator><name pos:start="381:46" pos:end="381:53">ram_size</name></name></expr></argument>, <argument pos:start="381:56" pos:end="381:66"><expr pos:start="381:56" pos:end="381:66"><name pos:start="381:56" pos:end="381:66">kernel_size</name></expr></argument>,

               <argument pos:start="383:16" pos:end="383:28"><expr pos:start="383:16" pos:end="383:28"><name pos:start="383:16" pos:end="383:28">graphic_width</name></expr></argument>, <argument pos:start="383:31" pos:end="383:44"><expr pos:start="383:31" pos:end="383:44"><name pos:start="383:31" pos:end="383:44">graphic_height</name></expr></argument>, <argument pos:start="383:47" pos:end="383:59"><expr pos:start="383:47" pos:end="383:59"><name pos:start="383:47" pos:end="383:59">graphic_depth</name></expr></argument>,

               <argument pos:start="385:16" pos:end="385:38"><expr pos:start="385:16" pos:end="385:38"><name pos:start="385:16" pos:end="385:38"><name pos:start="385:16" pos:end="385:20">hwdef</name><operator pos:start="385:21" pos:end="385:22">-&gt;</operator><name pos:start="385:23" pos:end="385:38">nvram_machine_id</name></name></expr></argument>, <argument pos:start="385:41" pos:end="385:47"><expr pos:start="385:41" pos:end="385:47"><literal type="string" pos:start="385:41" pos:end="385:47">"Sun4m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="389:5" pos:end="393:37"><if pos:start="389:5" pos:end="393:37">if <condition pos:start="389:8" pos:end="389:24">(<expr pos:start="389:9" pos:end="389:23"><name pos:start="389:9" pos:end="389:23"><name pos:start="389:9" pos:end="389:13">hwdef</name><operator pos:start="389:14" pos:end="389:15">-&gt;</operator><name pos:start="389:16" pos:end="389:23">ecc_base</name></name></expr>)</condition><block type="pseudo" pos:start="391:9" pos:end="393:37"><block_content pos:start="391:9" pos:end="393:37">

        <expr_stmt pos:start="391:9" pos:end="393:37"><expr pos:start="391:9" pos:end="393:36"><call pos:start="391:9" pos:end="393:36"><name pos:start="391:9" pos:end="391:16">ecc_init</name><argument_list pos:start="391:17" pos:end="393:36">(<argument pos:start="391:18" pos:end="391:32"><expr pos:start="391:18" pos:end="391:32"><name pos:start="391:18" pos:end="391:32"><name pos:start="391:18" pos:end="391:22">hwdef</name><operator pos:start="391:23" pos:end="391:24">-&gt;</operator><name pos:start="391:25" pos:end="391:32">ecc_base</name></name></expr></argument>, <argument pos:start="391:35" pos:end="391:48"><expr pos:start="391:35" pos:end="391:48"><name pos:start="391:35" pos:end="391:48"><name pos:start="391:35" pos:end="391:44">slavio_irq</name><index pos:start="391:45" pos:end="391:48">[<expr pos:start="391:46" pos:end="391:47"><literal type="number" pos:start="391:46" pos:end="391:47">28</literal></expr>]</index></name></expr></argument>,

                 <argument pos:start="393:18" pos:end="393:35"><expr pos:start="393:18" pos:end="393:35"><name pos:start="393:18" pos:end="393:35"><name pos:start="393:18" pos:end="393:22">hwdef</name><operator pos:start="393:23" pos:end="393:24">-&gt;</operator><name pos:start="393:25" pos:end="393:35">ecc_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="397:5" pos:end="397:53"><expr pos:start="397:5" pos:end="397:52"><name pos:start="397:5" pos:end="397:10">fw_cfg</name> <operator pos:start="397:12" pos:end="397:12">=</operator> <call pos:start="397:14" pos:end="397:52"><name pos:start="397:14" pos:end="397:28">fw_cfg_init_mem</name><argument_list pos:start="397:29" pos:end="397:52">(<argument pos:start="397:30" pos:end="397:37"><expr pos:start="397:30" pos:end="397:37"><name pos:start="397:30" pos:end="397:37">CFG_ADDR</name></expr></argument>, <argument pos:start="397:40" pos:end="397:51"><expr pos:start="397:40" pos:end="397:51"><name pos:start="397:40" pos:end="397:47">CFG_ADDR</name> <operator pos:start="397:49" pos:end="397:49">+</operator> <literal type="number" pos:start="397:51" pos:end="397:51">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="399:5" pos:end="399:64"><expr pos:start="399:5" pos:end="399:63"><call pos:start="399:5" pos:end="399:63"><name pos:start="399:5" pos:end="399:18">fw_cfg_add_i16</name><argument_list pos:start="399:19" pos:end="399:63">(<argument pos:start="399:20" pos:end="399:25"><expr pos:start="399:20" pos:end="399:25"><name pos:start="399:20" pos:end="399:25">fw_cfg</name></expr></argument>, <argument pos:start="399:28" pos:end="399:42"><expr pos:start="399:28" pos:end="399:42"><name pos:start="399:28" pos:end="399:42">FW_CFG_MAX_CPUS</name></expr></argument>, <argument pos:start="399:45" pos:end="399:62"><expr pos:start="399:45" pos:end="399:62"><operator pos:start="399:45" pos:end="399:45">(</operator><name pos:start="399:46" pos:end="399:53">uint16_t</name><operator pos:start="399:54" pos:end="399:54">)</operator><name pos:start="399:55" pos:end="399:62">max_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="401:5" pos:end="401:41"><expr pos:start="401:5" pos:end="401:40"><call pos:start="401:5" pos:end="401:40"><name pos:start="401:5" pos:end="401:18">fw_cfg_add_i32</name><argument_list pos:start="401:19" pos:end="401:40">(<argument pos:start="401:20" pos:end="401:25"><expr pos:start="401:20" pos:end="401:25"><name pos:start="401:20" pos:end="401:25">fw_cfg</name></expr></argument>, <argument pos:start="401:28" pos:end="401:36"><expr pos:start="401:28" pos:end="401:36"><name pos:start="401:28" pos:end="401:36">FW_CFG_ID</name></expr></argument>, <argument pos:start="401:39" pos:end="401:39"><expr pos:start="401:39" pos:end="401:39"><literal type="number" pos:start="401:39" pos:end="401:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="403:5" pos:end="403:64"><expr pos:start="403:5" pos:end="403:63"><call pos:start="403:5" pos:end="403:63"><name pos:start="403:5" pos:end="403:18">fw_cfg_add_i64</name><argument_list pos:start="403:19" pos:end="403:63">(<argument pos:start="403:20" pos:end="403:25"><expr pos:start="403:20" pos:end="403:25"><name pos:start="403:20" pos:end="403:25">fw_cfg</name></expr></argument>, <argument pos:start="403:28" pos:end="403:42"><expr pos:start="403:28" pos:end="403:42"><name pos:start="403:28" pos:end="403:42">FW_CFG_RAM_SIZE</name></expr></argument>, <argument pos:start="403:45" pos:end="403:62"><expr pos:start="403:45" pos:end="403:62"><operator pos:start="403:45" pos:end="403:45">(</operator><name pos:start="403:46" pos:end="403:53">uint64_t</name><operator pos:start="403:54" pos:end="403:54">)</operator><name pos:start="403:55" pos:end="403:62">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="405:5" pos:end="405:65"><expr pos:start="405:5" pos:end="405:64"><call pos:start="405:5" pos:end="405:64"><name pos:start="405:5" pos:end="405:18">fw_cfg_add_i16</name><argument_list pos:start="405:19" pos:end="405:64">(<argument pos:start="405:20" pos:end="405:25"><expr pos:start="405:20" pos:end="405:25"><name pos:start="405:20" pos:end="405:25">fw_cfg</name></expr></argument>, <argument pos:start="405:28" pos:end="405:44"><expr pos:start="405:28" pos:end="405:44"><name pos:start="405:28" pos:end="405:44">FW_CFG_MACHINE_ID</name></expr></argument>, <argument pos:start="405:47" pos:end="405:63"><expr pos:start="405:47" pos:end="405:63"><name pos:start="405:47" pos:end="405:63"><name pos:start="405:47" pos:end="405:51">hwdef</name><operator pos:start="405:52" pos:end="405:53">-&gt;</operator><name pos:start="405:54" pos:end="405:63">machine_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="407:5" pos:end="407:62"><expr pos:start="407:5" pos:end="407:61"><call pos:start="407:5" pos:end="407:61"><name pos:start="407:5" pos:end="407:18">fw_cfg_add_i16</name><argument_list pos:start="407:19" pos:end="407:61">(<argument pos:start="407:20" pos:end="407:25"><expr pos:start="407:20" pos:end="407:25"><name pos:start="407:20" pos:end="407:25">fw_cfg</name></expr></argument>, <argument pos:start="407:28" pos:end="407:45"><expr pos:start="407:28" pos:end="407:45"><name pos:start="407:28" pos:end="407:45">FW_CFG_SUN4M_DEPTH</name></expr></argument>, <argument pos:start="407:48" pos:end="407:60"><expr pos:start="407:48" pos:end="407:60"><name pos:start="407:48" pos:end="407:60">graphic_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="409:5" pos:end="409:62"><expr pos:start="409:5" pos:end="409:61"><call pos:start="409:5" pos:end="409:61"><name pos:start="409:5" pos:end="409:18">fw_cfg_add_i16</name><argument_list pos:start="409:19" pos:end="409:61">(<argument pos:start="409:20" pos:end="409:25"><expr pos:start="409:20" pos:end="409:25"><name pos:start="409:20" pos:end="409:25">fw_cfg</name></expr></argument>, <argument pos:start="409:28" pos:end="409:45"><expr pos:start="409:28" pos:end="409:45"><name pos:start="409:28" pos:end="409:45">FW_CFG_SUN4M_WIDTH</name></expr></argument>, <argument pos:start="409:48" pos:end="409:60"><expr pos:start="409:48" pos:end="409:60"><name pos:start="409:48" pos:end="409:60">graphic_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="411:5" pos:end="411:64"><expr pos:start="411:5" pos:end="411:63"><call pos:start="411:5" pos:end="411:63"><name pos:start="411:5" pos:end="411:18">fw_cfg_add_i16</name><argument_list pos:start="411:19" pos:end="411:63">(<argument pos:start="411:20" pos:end="411:25"><expr pos:start="411:20" pos:end="411:25"><name pos:start="411:20" pos:end="411:25">fw_cfg</name></expr></argument>, <argument pos:start="411:28" pos:end="411:46"><expr pos:start="411:28" pos:end="411:46"><name pos:start="411:28" pos:end="411:46">FW_CFG_SUN4M_HEIGHT</name></expr></argument>, <argument pos:start="411:49" pos:end="411:62"><expr pos:start="411:49" pos:end="411:62"><name pos:start="411:49" pos:end="411:62">graphic_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="413:5" pos:end="413:65"><expr pos:start="413:5" pos:end="413:64"><call pos:start="413:5" pos:end="413:64"><name pos:start="413:5" pos:end="413:18">fw_cfg_add_i32</name><argument_list pos:start="413:19" pos:end="413:64">(<argument pos:start="413:20" pos:end="413:25"><expr pos:start="413:20" pos:end="413:25"><name pos:start="413:20" pos:end="413:25">fw_cfg</name></expr></argument>, <argument pos:start="413:28" pos:end="413:45"><expr pos:start="413:28" pos:end="413:45"><name pos:start="413:28" pos:end="413:45">FW_CFG_KERNEL_ADDR</name></expr></argument>, <argument pos:start="413:48" pos:end="413:63"><expr pos:start="413:48" pos:end="413:63"><name pos:start="413:48" pos:end="413:63">KERNEL_LOAD_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="415:5" pos:end="415:60"><expr pos:start="415:5" pos:end="415:59"><call pos:start="415:5" pos:end="415:59"><name pos:start="415:5" pos:end="415:18">fw_cfg_add_i32</name><argument_list pos:start="415:19" pos:end="415:59">(<argument pos:start="415:20" pos:end="415:25"><expr pos:start="415:20" pos:end="415:25"><name pos:start="415:20" pos:end="415:25">fw_cfg</name></expr></argument>, <argument pos:start="415:28" pos:end="415:45"><expr pos:start="415:28" pos:end="415:45"><name pos:start="415:28" pos:end="415:45">FW_CFG_KERNEL_SIZE</name></expr></argument>, <argument pos:start="415:48" pos:end="415:58"><expr pos:start="415:48" pos:end="415:58"><name pos:start="415:48" pos:end="415:58">kernel_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="417:5" pos:end="437:5"><if pos:start="417:5" pos:end="431:5">if <condition pos:start="417:8" pos:end="417:32">(<expr pos:start="417:9" pos:end="417:31"><name pos:start="417:9" pos:end="417:31"><name pos:start="417:9" pos:end="417:15">machine</name><operator pos:start="417:16" pos:end="417:17">-&gt;</operator><name pos:start="417:18" pos:end="417:31">kernel_cmdline</name></name></expr>)</condition> <block pos:start="417:34" pos:end="431:5">{<block_content pos:start="419:9" pos:end="429:60">

        <expr_stmt pos:start="419:9" pos:end="419:68"><expr pos:start="419:9" pos:end="419:67"><call pos:start="419:9" pos:end="419:67"><name pos:start="419:9" pos:end="419:22">fw_cfg_add_i32</name><argument_list pos:start="419:23" pos:end="419:67">(<argument pos:start="419:24" pos:end="419:29"><expr pos:start="419:24" pos:end="419:29"><name pos:start="419:24" pos:end="419:29">fw_cfg</name></expr></argument>, <argument pos:start="419:32" pos:end="419:52"><expr pos:start="419:32" pos:end="419:52"><name pos:start="419:32" pos:end="419:52">FW_CFG_KERNEL_CMDLINE</name></expr></argument>, <argument pos:start="419:55" pos:end="419:66"><expr pos:start="419:55" pos:end="419:66"><name pos:start="419:55" pos:end="419:66">CMDLINE_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="421:9" pos:end="423:50"><expr pos:start="421:9" pos:end="423:49"><call pos:start="421:9" pos:end="423:49"><name pos:start="421:9" pos:end="421:24">pstrcpy_targphys</name><argument_list pos:start="421:25" pos:end="423:49">(<argument pos:start="421:26" pos:end="421:34"><expr pos:start="421:26" pos:end="421:34"><literal type="string" pos:start="421:26" pos:end="421:34">"cmdline"</literal></expr></argument>, <argument pos:start="421:37" pos:end="421:48"><expr pos:start="421:37" pos:end="421:48"><name pos:start="421:37" pos:end="421:48">CMDLINE_ADDR</name></expr></argument>, <argument pos:start="421:51" pos:end="421:66"><expr pos:start="421:51" pos:end="421:66"><name pos:start="421:51" pos:end="421:66">TARGET_PAGE_SIZE</name></expr></argument>,

                         <argument pos:start="423:26" pos:end="423:48"><expr pos:start="423:26" pos:end="423:48"><name pos:start="423:26" pos:end="423:48"><name pos:start="423:26" pos:end="423:32">machine</name><operator pos:start="423:33" pos:end="423:34">-&gt;</operator><name pos:start="423:35" pos:end="423:48">kernel_cmdline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="425:9" pos:end="425:80"><expr pos:start="425:9" pos:end="425:79"><call pos:start="425:9" pos:end="425:79"><name pos:start="425:9" pos:end="425:25">fw_cfg_add_string</name><argument_list pos:start="425:26" pos:end="425:79">(<argument pos:start="425:27" pos:end="425:32"><expr pos:start="425:27" pos:end="425:32"><name pos:start="425:27" pos:end="425:32">fw_cfg</name></expr></argument>, <argument pos:start="425:35" pos:end="425:53"><expr pos:start="425:35" pos:end="425:53"><name pos:start="425:35" pos:end="425:53">FW_CFG_CMDLINE_DATA</name></expr></argument>, <argument pos:start="425:56" pos:end="425:78"><expr pos:start="425:56" pos:end="425:78"><name pos:start="425:56" pos:end="425:78"><name pos:start="425:56" pos:end="425:62">machine</name><operator pos:start="425:63" pos:end="425:64">-&gt;</operator><name pos:start="425:65" pos:end="425:78">kernel_cmdline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="427:9" pos:end="429:60"><expr pos:start="427:9" pos:end="429:59"><call pos:start="427:9" pos:end="429:59"><name pos:start="427:9" pos:end="427:22">fw_cfg_add_i32</name><argument_list pos:start="427:23" pos:end="429:59">(<argument pos:start="427:24" pos:end="427:29"><expr pos:start="427:24" pos:end="427:29"><name pos:start="427:24" pos:end="427:29">fw_cfg</name></expr></argument>, <argument pos:start="427:32" pos:end="427:50"><expr pos:start="427:32" pos:end="427:50"><name pos:start="427:32" pos:end="427:50">FW_CFG_CMDLINE_SIZE</name></expr></argument>,

                       <argument pos:start="429:24" pos:end="429:58"><expr pos:start="429:24" pos:end="429:58"><call pos:start="429:24" pos:end="429:54"><name pos:start="429:24" pos:end="429:29">strlen</name><argument_list pos:start="429:30" pos:end="429:54">(<argument pos:start="429:31" pos:end="429:53"><expr pos:start="429:31" pos:end="429:53"><name pos:start="429:31" pos:end="429:53"><name pos:start="429:31" pos:end="429:37">machine</name><operator pos:start="429:38" pos:end="429:39">-&gt;</operator><name pos:start="429:40" pos:end="429:53">kernel_cmdline</name></name></expr></argument>)</argument_list></call> <operator pos:start="429:56" pos:end="429:56">+</operator> <literal type="number" pos:start="429:58" pos:end="429:58">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="431:7" pos:end="437:5">else <block pos:start="431:12" pos:end="437:5">{<block_content pos:start="433:9" pos:end="435:55">

        <expr_stmt pos:start="433:9" pos:end="433:57"><expr pos:start="433:9" pos:end="433:56"><call pos:start="433:9" pos:end="433:56"><name pos:start="433:9" pos:end="433:22">fw_cfg_add_i32</name><argument_list pos:start="433:23" pos:end="433:56">(<argument pos:start="433:24" pos:end="433:29"><expr pos:start="433:24" pos:end="433:29"><name pos:start="433:24" pos:end="433:29">fw_cfg</name></expr></argument>, <argument pos:start="433:32" pos:end="433:52"><expr pos:start="433:32" pos:end="433:52"><name pos:start="433:32" pos:end="433:52">FW_CFG_KERNEL_CMDLINE</name></expr></argument>, <argument pos:start="433:55" pos:end="433:55"><expr pos:start="433:55" pos:end="433:55"><literal type="number" pos:start="433:55" pos:end="433:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="435:9" pos:end="435:55"><expr pos:start="435:9" pos:end="435:54"><call pos:start="435:9" pos:end="435:54"><name pos:start="435:9" pos:end="435:22">fw_cfg_add_i32</name><argument_list pos:start="435:23" pos:end="435:54">(<argument pos:start="435:24" pos:end="435:29"><expr pos:start="435:24" pos:end="435:29"><name pos:start="435:24" pos:end="435:29">fw_cfg</name></expr></argument>, <argument pos:start="435:32" pos:end="435:50"><expr pos:start="435:32" pos:end="435:50"><name pos:start="435:32" pos:end="435:50">FW_CFG_CMDLINE_SIZE</name></expr></argument>, <argument pos:start="435:53" pos:end="435:53"><expr pos:start="435:53" pos:end="435:53"><literal type="number" pos:start="435:53" pos:end="435:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="439:5" pos:end="439:65"><expr pos:start="439:5" pos:end="439:64"><call pos:start="439:5" pos:end="439:64"><name pos:start="439:5" pos:end="439:18">fw_cfg_add_i32</name><argument_list pos:start="439:19" pos:end="439:64">(<argument pos:start="439:20" pos:end="439:25"><expr pos:start="439:20" pos:end="439:25"><name pos:start="439:20" pos:end="439:25">fw_cfg</name></expr></argument>, <argument pos:start="439:28" pos:end="439:45"><expr pos:start="439:28" pos:end="439:45"><name pos:start="439:28" pos:end="439:45">FW_CFG_INITRD_ADDR</name></expr></argument>, <argument pos:start="439:48" pos:end="439:63"><expr pos:start="439:48" pos:end="439:63"><name pos:start="439:48" pos:end="439:63">INITRD_LOAD_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="441:5" pos:end="441:50"><expr pos:start="441:5" pos:end="441:49"><call pos:start="441:5" pos:end="441:49"><name pos:start="441:5" pos:end="441:18">fw_cfg_add_i32</name><argument_list pos:start="441:19" pos:end="441:49">(<argument pos:start="441:20" pos:end="441:25"><expr pos:start="441:20" pos:end="441:25"><name pos:start="441:20" pos:end="441:25">fw_cfg</name></expr></argument>, <argument pos:start="441:28" pos:end="441:45"><expr pos:start="441:28" pos:end="441:45"><name pos:start="441:28" pos:end="441:45">FW_CFG_INITRD_SIZE</name></expr></argument>, <argument pos:start="441:48" pos:end="441:48"><expr pos:start="441:48" pos:end="441:48"><literal type="number" pos:start="441:48" pos:end="441:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="441:52" pos:end="441:62">// not used</comment>

    <expr_stmt pos:start="443:5" pos:end="443:71"><expr pos:start="443:5" pos:end="443:70"><call pos:start="443:5" pos:end="443:70"><name pos:start="443:5" pos:end="443:18">fw_cfg_add_i16</name><argument_list pos:start="443:19" pos:end="443:70">(<argument pos:start="443:20" pos:end="443:25"><expr pos:start="443:20" pos:end="443:25"><name pos:start="443:20" pos:end="443:25">fw_cfg</name></expr></argument>, <argument pos:start="443:28" pos:end="443:45"><expr pos:start="443:28" pos:end="443:45"><name pos:start="443:28" pos:end="443:45">FW_CFG_BOOT_DEVICE</name></expr></argument>, <argument pos:start="443:48" pos:end="443:69"><expr pos:start="443:48" pos:end="443:69"><name pos:start="443:48" pos:end="443:69"><name pos:start="443:48" pos:end="443:54">machine</name><operator pos:start="443:55" pos:end="443:56">-&gt;</operator><name pos:start="443:57" pos:end="443:66">boot_order</name><index pos:start="443:67" pos:end="443:69">[<expr pos:start="443:68" pos:end="443:68"><literal type="number" pos:start="443:68" pos:end="443:68">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="445:5" pos:end="445:52"><expr pos:start="445:5" pos:end="445:51"><call pos:start="445:5" pos:end="445:51"><name pos:start="445:5" pos:end="445:26">qemu_register_boot_set</name><argument_list pos:start="445:27" pos:end="445:51">(<argument pos:start="445:28" pos:end="445:42"><expr pos:start="445:28" pos:end="445:42"><name pos:start="445:28" pos:end="445:42">fw_cfg_boot_set</name></expr></argument>, <argument pos:start="445:45" pos:end="445:50"><expr pos:start="445:45" pos:end="445:50"><name pos:start="445:45" pos:end="445:50">fw_cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
