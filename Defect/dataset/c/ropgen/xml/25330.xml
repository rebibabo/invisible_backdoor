<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25330.c" pos:tabs="8"><function pos:start="1:1" pos:end="139:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:38">json_message_process_token</name><parameter_list pos:start="1:39" pos:end="1:106">(<parameter pos:start="1:40" pos:end="1:55"><decl pos:start="1:40" pos:end="1:55"><type pos:start="1:40" pos:end="1:55"><name pos:start="1:40" pos:end="1:48">JSONLexer</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:55">lexer</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:71"><decl pos:start="1:58" pos:end="1:71"><type pos:start="1:58" pos:end="1:71"><name pos:start="1:58" pos:end="1:64">QString</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:71">token</name></decl></parameter>, <parameter pos:start="1:74" pos:end="1:91"><decl pos:start="1:74" pos:end="1:91"><type pos:start="1:74" pos:end="1:91"><name pos:start="1:74" pos:end="1:86">JSONTokenType</name></type> <name pos:start="1:88" pos:end="1:91">type</name></decl></parameter>, <parameter pos:start="1:94" pos:end="1:98"><decl pos:start="1:94" pos:end="1:98"><type pos:start="1:94" pos:end="1:98"><name pos:start="1:94" pos:end="1:96">int</name></type> <name pos:start="1:98" pos:end="1:98">x</name></decl></parameter>, <parameter pos:start="1:101" pos:end="1:105"><decl pos:start="1:101" pos:end="1:105"><type pos:start="1:101" pos:end="1:105"><name pos:start="1:101" pos:end="1:103">int</name></type> <name pos:start="1:105" pos:end="1:105">y</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="139:1">{<block_content pos:start="5:5" pos:end="137:27">

    <decl_stmt pos:start="5:5" pos:end="5:78"><decl pos:start="5:5" pos:end="5:77"><type pos:start="5:5" pos:end="5:23"><name pos:start="5:5" pos:end="5:21">JSONMessageParser</name> <modifier pos:start="5:23" pos:end="5:23">*</modifier></type><name pos:start="5:24" pos:end="5:29">parser</name> <init pos:start="5:31" pos:end="5:77">= <expr pos:start="5:33" pos:end="5:77"><call pos:start="5:33" pos:end="5:77"><name pos:start="5:33" pos:end="5:44">container_of</name><argument_list pos:start="5:45" pos:end="5:77">(<argument pos:start="5:46" pos:end="5:50"><expr pos:start="5:46" pos:end="5:50"><name pos:start="5:46" pos:end="5:50">lexer</name></expr></argument>, <argument pos:start="5:53" pos:end="5:69"><expr pos:start="5:53" pos:end="5:69"><name pos:start="5:53" pos:end="5:69">JSONMessageParser</name></expr></argument>, <argument pos:start="5:72" pos:end="5:76"><expr pos:start="5:72" pos:end="5:76"><name pos:start="5:72" pos:end="5:76">lexer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:9">QDict</name> <modifier pos:start="7:11" pos:end="7:11">*</modifier></type><name pos:start="7:12" pos:end="7:15">dict</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="45:5"><if pos:start="11:5" pos:end="45:5">if <condition pos:start="11:8" pos:end="11:30">(<expr pos:start="11:9" pos:end="11:29"><name pos:start="11:9" pos:end="11:12">type</name> <operator pos:start="11:14" pos:end="11:15">==</operator> <name pos:start="11:17" pos:end="11:29">JSON_OPERATOR</name></expr>)</condition> <block pos:start="11:32" pos:end="45:5">{<block_content pos:start="13:9" pos:end="43:9">

        <switch pos:start="13:9" pos:end="43:9">switch <condition pos:start="13:16" pos:end="13:42">(<expr pos:start="13:17" pos:end="13:41"><call pos:start="13:17" pos:end="13:38"><name pos:start="13:17" pos:end="13:31">qstring_get_str</name><argument_list pos:start="13:32" pos:end="13:38">(<argument pos:start="13:33" pos:end="13:37"><expr pos:start="13:33" pos:end="13:37"><name pos:start="13:33" pos:end="13:37">token</name></expr></argument>)</argument_list></call><index pos:start="13:39" pos:end="13:41">[<expr pos:start="13:40" pos:end="13:40"><literal type="number" pos:start="13:40" pos:end="13:40">0</literal></expr>]</index></expr>)</condition> <block pos:start="13:44" pos:end="43:9">{<block_content pos:start="15:9" pos:end="41:18">

        <case pos:start="15:9" pos:end="15:17">case <expr pos:start="15:14" pos:end="15:16"><literal type="char" pos:start="15:14" pos:end="15:16">'{'</literal></expr>:</case>

            <expr_stmt pos:start="17:13" pos:end="17:34"><expr pos:start="17:13" pos:end="17:33"><name pos:start="17:13" pos:end="17:31"><name pos:start="17:13" pos:end="17:18">parser</name><operator pos:start="17:19" pos:end="17:20">-&gt;</operator><name pos:start="17:21" pos:end="17:31">brace_count</name></name><operator pos:start="17:32" pos:end="17:33">++</operator></expr>;</expr_stmt>

            <break pos:start="19:13" pos:end="19:18">break;</break>

        <case pos:start="21:9" pos:end="21:17">case <expr pos:start="21:14" pos:end="21:16"><literal type="char" pos:start="21:14" pos:end="21:16">'}'</literal></expr>:</case>

            <expr_stmt pos:start="23:13" pos:end="23:34"><expr pos:start="23:13" pos:end="23:33"><name pos:start="23:13" pos:end="23:31"><name pos:start="23:13" pos:end="23:18">parser</name><operator pos:start="23:19" pos:end="23:20">-&gt;</operator><name pos:start="23:21" pos:end="23:31">brace_count</name></name><operator pos:start="23:32" pos:end="23:33">--</operator></expr>;</expr_stmt>

            <break pos:start="25:13" pos:end="25:18">break;</break>

        <case pos:start="27:9" pos:end="27:17">case <expr pos:start="27:14" pos:end="27:16"><literal type="char" pos:start="27:14" pos:end="27:16">'['</literal></expr>:</case>

            <expr_stmt pos:start="29:13" pos:end="29:36"><expr pos:start="29:13" pos:end="29:35"><name pos:start="29:13" pos:end="29:33"><name pos:start="29:13" pos:end="29:18">parser</name><operator pos:start="29:19" pos:end="29:20">-&gt;</operator><name pos:start="29:21" pos:end="29:33">bracket_count</name></name><operator pos:start="29:34" pos:end="29:35">++</operator></expr>;</expr_stmt>

            <break pos:start="31:13" pos:end="31:18">break;</break>

        <case pos:start="33:9" pos:end="33:17">case <expr pos:start="33:14" pos:end="33:16"><literal type="char" pos:start="33:14" pos:end="33:16">']'</literal></expr>:</case>

            <expr_stmt pos:start="35:13" pos:end="35:36"><expr pos:start="35:13" pos:end="35:35"><name pos:start="35:13" pos:end="35:33"><name pos:start="35:13" pos:end="35:18">parser</name><operator pos:start="35:19" pos:end="35:20">-&gt;</operator><name pos:start="35:21" pos:end="35:33">bracket_count</name></name><operator pos:start="35:34" pos:end="35:35">--</operator></expr>;</expr_stmt>

            <break pos:start="37:13" pos:end="37:18">break;</break>

        <default pos:start="39:9" pos:end="39:16">default:</default>

            <break pos:start="41:13" pos:end="41:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:23"><expr pos:start="49:5" pos:end="49:22"><name pos:start="49:5" pos:end="49:8">dict</name> <operator pos:start="49:10" pos:end="49:10">=</operator> <call pos:start="49:12" pos:end="49:22"><name pos:start="49:12" pos:end="49:20">qdict_new</name><argument_list pos:start="49:21" pos:end="49:22">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:49"><expr pos:start="51:5" pos:end="51:48"><call pos:start="51:5" pos:end="51:48"><name pos:start="51:5" pos:end="51:13">qdict_put</name><argument_list pos:start="51:14" pos:end="51:48">(<argument pos:start="51:15" pos:end="51:18"><expr pos:start="51:15" pos:end="51:18"><name pos:start="51:15" pos:end="51:18">dict</name></expr></argument>, <argument pos:start="51:21" pos:end="51:26"><expr pos:start="51:21" pos:end="51:26"><literal type="string" pos:start="51:21" pos:end="51:26">"type"</literal></expr></argument>, <argument pos:start="51:29" pos:end="51:47"><expr pos:start="51:29" pos:end="51:47"><call pos:start="51:29" pos:end="51:47"><name pos:start="51:29" pos:end="51:41">qint_from_int</name><argument_list pos:start="51:42" pos:end="51:47">(<argument pos:start="51:43" pos:end="51:46"><expr pos:start="51:43" pos:end="51:46"><name pos:start="51:43" pos:end="51:46">type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:19"><expr pos:start="53:5" pos:end="53:18"><call pos:start="53:5" pos:end="53:18"><name pos:start="53:5" pos:end="53:11">QINCREF</name><argument_list pos:start="53:12" pos:end="53:18">(<argument pos:start="53:13" pos:end="53:17"><expr pos:start="53:13" pos:end="53:17"><name pos:start="53:13" pos:end="53:17">token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:36"><expr pos:start="55:5" pos:end="55:35"><call pos:start="55:5" pos:end="55:35"><name pos:start="55:5" pos:end="55:13">qdict_put</name><argument_list pos:start="55:14" pos:end="55:35">(<argument pos:start="55:15" pos:end="55:18"><expr pos:start="55:15" pos:end="55:18"><name pos:start="55:15" pos:end="55:18">dict</name></expr></argument>, <argument pos:start="55:21" pos:end="55:27"><expr pos:start="55:21" pos:end="55:27"><literal type="string" pos:start="55:21" pos:end="55:27">"token"</literal></expr></argument>, <argument pos:start="55:30" pos:end="55:34"><expr pos:start="55:30" pos:end="55:34"><name pos:start="55:30" pos:end="55:34">token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:43"><expr pos:start="57:5" pos:end="57:42"><call pos:start="57:5" pos:end="57:42"><name pos:start="57:5" pos:end="57:13">qdict_put</name><argument_list pos:start="57:14" pos:end="57:42">(<argument pos:start="57:15" pos:end="57:18"><expr pos:start="57:15" pos:end="57:18"><name pos:start="57:15" pos:end="57:18">dict</name></expr></argument>, <argument pos:start="57:21" pos:end="57:23"><expr pos:start="57:21" pos:end="57:23"><literal type="string" pos:start="57:21" pos:end="57:23">"x"</literal></expr></argument>, <argument pos:start="57:26" pos:end="57:41"><expr pos:start="57:26" pos:end="57:41"><call pos:start="57:26" pos:end="57:41"><name pos:start="57:26" pos:end="57:38">qint_from_int</name><argument_list pos:start="57:39" pos:end="57:41">(<argument pos:start="57:40" pos:end="57:40"><expr pos:start="57:40" pos:end="57:40"><name pos:start="57:40" pos:end="57:40">x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:43"><expr pos:start="59:5" pos:end="59:42"><call pos:start="59:5" pos:end="59:42"><name pos:start="59:5" pos:end="59:13">qdict_put</name><argument_list pos:start="59:14" pos:end="59:42">(<argument pos:start="59:15" pos:end="59:18"><expr pos:start="59:15" pos:end="59:18"><name pos:start="59:15" pos:end="59:18">dict</name></expr></argument>, <argument pos:start="59:21" pos:end="59:23"><expr pos:start="59:21" pos:end="59:23"><literal type="string" pos:start="59:21" pos:end="59:23">"y"</literal></expr></argument>, <argument pos:start="59:26" pos:end="59:41"><expr pos:start="59:26" pos:end="59:41"><call pos:start="59:26" pos:end="59:41"><name pos:start="59:26" pos:end="59:38">qint_from_int</name><argument_list pos:start="59:39" pos:end="59:41">(<argument pos:start="59:40" pos:end="59:40"><expr pos:start="59:40" pos:end="59:40"><name pos:start="59:40" pos:end="59:40">y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:40"><expr pos:start="63:5" pos:end="63:39"><name pos:start="63:5" pos:end="63:22"><name pos:start="63:5" pos:end="63:10">parser</name><operator pos:start="63:11" pos:end="63:12">-&gt;</operator><name pos:start="63:13" pos:end="63:22">token_size</name></name> <operator pos:start="63:24" pos:end="63:25">+=</operator> <name pos:start="63:27" pos:end="63:39"><name pos:start="63:27" pos:end="63:31">token</name><operator pos:start="63:32" pos:end="63:33">-&gt;</operator><name pos:start="63:34" pos:end="63:39">length</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:39"><expr pos:start="67:5" pos:end="67:38"><call pos:start="67:5" pos:end="67:38"><name pos:start="67:5" pos:end="67:16">qlist_append</name><argument_list pos:start="67:17" pos:end="67:38">(<argument pos:start="67:18" pos:end="67:31"><expr pos:start="67:18" pos:end="67:31"><name pos:start="67:18" pos:end="67:31"><name pos:start="67:18" pos:end="67:23">parser</name><operator pos:start="67:24" pos:end="67:25">-&gt;</operator><name pos:start="67:26" pos:end="67:31">tokens</name></name></expr></argument>, <argument pos:start="67:34" pos:end="67:37"><expr pos:start="67:34" pos:end="67:37"><name pos:start="67:34" pos:end="67:37">dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="71:5" pos:end="99:5"><if pos:start="71:5" pos:end="75:5">if <condition pos:start="71:8" pos:end="71:27">(<expr pos:start="71:9" pos:end="71:26"><name pos:start="71:9" pos:end="71:12">type</name> <operator pos:start="71:14" pos:end="71:15">==</operator> <name pos:start="71:17" pos:end="71:26">JSON_ERROR</name></expr>)</condition> <block pos:start="71:29" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:26">

        <goto pos:start="73:9" pos:end="73:26">goto <name pos:start="73:14" pos:end="73:25">out_emit_bad</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="75:7" pos:end="85:5">else if <condition pos:start="75:15" pos:end="81:37">(<expr pos:start="75:16" pos:end="81:36"><name pos:start="75:16" pos:end="75:34"><name pos:start="75:16" pos:end="75:21">parser</name><operator pos:start="75:22" pos:end="75:23">-&gt;</operator><name pos:start="75:24" pos:end="75:34">brace_count</name></name> <operator pos:start="75:36" pos:end="75:36">&lt;</operator> <literal type="number" pos:start="75:38" pos:end="75:38">0</literal> <operator pos:start="75:40" pos:end="75:41">||</operator>

        <name pos:start="77:9" pos:end="77:29"><name pos:start="77:9" pos:end="77:14">parser</name><operator pos:start="77:15" pos:end="77:16">-&gt;</operator><name pos:start="77:17" pos:end="77:29">bracket_count</name></name> <operator pos:start="77:31" pos:end="77:31">&lt;</operator> <literal type="number" pos:start="77:33" pos:end="77:33">0</literal> <operator pos:start="77:35" pos:end="77:36">||</operator>

        <operator pos:start="79:9" pos:end="79:9">(</operator><name pos:start="79:10" pos:end="79:28"><name pos:start="79:10" pos:end="79:15">parser</name><operator pos:start="79:16" pos:end="79:17">-&gt;</operator><name pos:start="79:18" pos:end="79:28">brace_count</name></name> <operator pos:start="79:30" pos:end="79:31">==</operator> <literal type="number" pos:start="79:33" pos:end="79:33">0</literal> <operator pos:start="79:35" pos:end="79:36">&amp;&amp;</operator>

         <name pos:start="81:10" pos:end="81:30"><name pos:start="81:10" pos:end="81:15">parser</name><operator pos:start="81:16" pos:end="81:17">-&gt;</operator><name pos:start="81:18" pos:end="81:30">bracket_count</name></name> <operator pos:start="81:32" pos:end="81:33">==</operator> <literal type="number" pos:start="81:35" pos:end="81:35">0</literal><operator pos:start="81:36" pos:end="81:36">)</operator></expr>)</condition> <block pos:start="81:39" pos:end="85:5">{<block_content pos:start="83:9" pos:end="83:22">

        <goto pos:start="83:9" pos:end="83:22">goto <name pos:start="83:14" pos:end="83:21">out_emit</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="85:7" pos:end="99:5">else if <condition pos:start="85:15" pos:end="89:49">(<expr pos:start="85:16" pos:end="89:48"><name pos:start="85:16" pos:end="85:33"><name pos:start="85:16" pos:end="85:21">parser</name><operator pos:start="85:22" pos:end="85:23">-&gt;</operator><name pos:start="85:24" pos:end="85:33">token_size</name></name> <operator pos:start="85:35" pos:end="85:35">&gt;</operator> <name pos:start="85:37" pos:end="85:50">MAX_TOKEN_SIZE</name> <operator pos:start="85:52" pos:end="85:53">||</operator>

               <name pos:start="87:16" pos:end="87:36"><name pos:start="87:16" pos:end="87:21">parser</name><operator pos:start="87:22" pos:end="87:23">-&gt;</operator><name pos:start="87:24" pos:end="87:36">bracket_count</name></name> <operator pos:start="87:38" pos:end="87:38">&gt;</operator> <name pos:start="87:40" pos:end="87:50">MAX_NESTING</name> <operator pos:start="87:52" pos:end="87:53">||</operator>

               <name pos:start="89:16" pos:end="89:34"><name pos:start="89:16" pos:end="89:21">parser</name><operator pos:start="89:22" pos:end="89:23">-&gt;</operator><name pos:start="89:24" pos:end="89:34">brace_count</name></name> <operator pos:start="89:36" pos:end="89:36">&gt;</operator> <name pos:start="89:38" pos:end="89:48">MAX_NESTING</name></expr>)</condition> <block pos:start="89:51" pos:end="99:5">{<block_content pos:start="97:9" pos:end="97:22">

        <comment type="block" pos:start="91:9" pos:end="95:11">/* Security consideration, we limit total memory allocated per object

         * and the maximum recursion depth that a message can force.

         */</comment>

        <goto pos:start="97:9" pos:end="97:22">goto <name pos:start="97:14" pos:end="97:21">out_emit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <return pos:start="103:5" pos:end="103:11">return;</return>



<label pos:start="107:1" pos:end="107:13"><name pos:start="107:1" pos:end="107:12">out_emit_bad</name>:</label>

    <comment type="block" pos:start="109:5" pos:end="113:7">/* clear out token list and tell the parser to emit and error

     * indication by passing it a NULL list

     */</comment>

    <expr_stmt pos:start="115:5" pos:end="115:28"><expr pos:start="115:5" pos:end="115:27"><call pos:start="115:5" pos:end="115:27"><name pos:start="115:5" pos:end="115:11">QDECREF</name><argument_list pos:start="115:12" pos:end="115:27">(<argument pos:start="115:13" pos:end="115:26"><expr pos:start="115:13" pos:end="115:26"><name pos:start="115:13" pos:end="115:26"><name pos:start="115:13" pos:end="115:18">parser</name><operator pos:start="115:19" pos:end="115:20">-&gt;</operator><name pos:start="115:21" pos:end="115:26">tokens</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:26"><expr pos:start="117:5" pos:end="117:25"><name pos:start="117:5" pos:end="117:18"><name pos:start="117:5" pos:end="117:10">parser</name><operator pos:start="117:11" pos:end="117:12">-&gt;</operator><name pos:start="117:13" pos:end="117:18">tokens</name></name> <operator pos:start="117:20" pos:end="117:20">=</operator> <name pos:start="117:22" pos:end="117:25">NULL</name></expr>;</expr_stmt>

<label pos:start="119:1" pos:end="119:9"><name pos:start="119:1" pos:end="119:8">out_emit</name>:</label>

    <comment type="block" pos:start="121:5" pos:end="121:67">/* send current list of tokens to parser and reset tokenizer */</comment>

    <expr_stmt pos:start="123:5" pos:end="123:28"><expr pos:start="123:5" pos:end="123:27"><name pos:start="123:5" pos:end="123:23"><name pos:start="123:5" pos:end="123:10">parser</name><operator pos:start="123:11" pos:end="123:12">-&gt;</operator><name pos:start="123:13" pos:end="123:23">brace_count</name></name> <operator pos:start="123:25" pos:end="123:25">=</operator> <literal type="number" pos:start="123:27" pos:end="123:27">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:30"><expr pos:start="125:5" pos:end="125:29"><name pos:start="125:5" pos:end="125:25"><name pos:start="125:5" pos:end="125:10">parser</name><operator pos:start="125:11" pos:end="125:12">-&gt;</operator><name pos:start="125:13" pos:end="125:25">bracket_count</name></name> <operator pos:start="125:27" pos:end="125:27">=</operator> <literal type="number" pos:start="125:29" pos:end="125:29">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:41"><expr pos:start="127:5" pos:end="127:40"><call pos:start="127:5" pos:end="127:40"><name pos:start="127:5" pos:end="127:16"><name pos:start="127:5" pos:end="127:10">parser</name><operator pos:start="127:11" pos:end="127:12">-&gt;</operator><name pos:start="127:13" pos:end="127:16">emit</name></name><argument_list pos:start="127:17" pos:end="127:40">(<argument pos:start="127:18" pos:end="127:23"><expr pos:start="127:18" pos:end="127:23"><name pos:start="127:18" pos:end="127:23">parser</name></expr></argument>, <argument pos:start="127:26" pos:end="127:39"><expr pos:start="127:26" pos:end="127:39"><name pos:start="127:26" pos:end="127:39"><name pos:start="127:26" pos:end="127:31">parser</name><operator pos:start="127:32" pos:end="127:33">-&gt;</operator><name pos:start="127:34" pos:end="127:39">tokens</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="129:5" pos:end="133:5"><if pos:start="129:5" pos:end="133:5">if <condition pos:start="129:8" pos:end="129:23">(<expr pos:start="129:9" pos:end="129:22"><name pos:start="129:9" pos:end="129:22"><name pos:start="129:9" pos:end="129:14">parser</name><operator pos:start="129:15" pos:end="129:16">-&gt;</operator><name pos:start="129:17" pos:end="129:22">tokens</name></name></expr>)</condition> <block pos:start="129:25" pos:end="133:5">{<block_content pos:start="131:9" pos:end="131:32">

        <expr_stmt pos:start="131:9" pos:end="131:32"><expr pos:start="131:9" pos:end="131:31"><call pos:start="131:9" pos:end="131:31"><name pos:start="131:9" pos:end="131:15">QDECREF</name><argument_list pos:start="131:16" pos:end="131:31">(<argument pos:start="131:17" pos:end="131:30"><expr pos:start="131:17" pos:end="131:30"><name pos:start="131:17" pos:end="131:30"><name pos:start="131:17" pos:end="131:22">parser</name><operator pos:start="131:23" pos:end="131:24">-&gt;</operator><name pos:start="131:25" pos:end="131:30">tokens</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:33"><expr pos:start="135:5" pos:end="135:32"><name pos:start="135:5" pos:end="135:18"><name pos:start="135:5" pos:end="135:10">parser</name><operator pos:start="135:11" pos:end="135:12">-&gt;</operator><name pos:start="135:13" pos:end="135:18">tokens</name></name> <operator pos:start="135:20" pos:end="135:20">=</operator> <call pos:start="135:22" pos:end="135:32"><name pos:start="135:22" pos:end="135:30">qlist_new</name><argument_list pos:start="135:31" pos:end="135:32">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:27"><expr pos:start="137:5" pos:end="137:26"><name pos:start="137:5" pos:end="137:22"><name pos:start="137:5" pos:end="137:10">parser</name><operator pos:start="137:11" pos:end="137:12">-&gt;</operator><name pos:start="137:13" pos:end="137:22">token_size</name></name> <operator pos:start="137:24" pos:end="137:24">=</operator> <literal type="number" pos:start="137:26" pos:end="137:26">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
