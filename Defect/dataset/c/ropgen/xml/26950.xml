<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26950.c" pos:tabs="8"><function pos:start="1:1" pos:end="607:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">qtest_process_command</name><parameter_list pos:start="1:34" pos:end="1:70">(<parameter pos:start="1:35" pos:end="1:54"><decl pos:start="1:35" pos:end="1:54"><type pos:start="1:35" pos:end="1:54"><name pos:start="1:35" pos:end="1:49">CharDriverState</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:54">chr</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:69"><decl pos:start="1:57" pos:end="1:69"><type pos:start="1:57" pos:end="1:69"><name pos:start="1:57" pos:end="1:61">gchar</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier><modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:69">words</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="607:1">{<block_content pos:start="5:5" pos:end="605:5">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:17"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:15">gchar</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:24">command</name></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:20"><expr pos:start="9:5" pos:end="9:19"><call pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:12">g_assert</name><argument_list pos:start="9:13" pos:end="9:19">(<argument pos:start="9:14" pos:end="9:18"><expr pos:start="9:14" pos:end="9:18"><name pos:start="9:14" pos:end="9:18">words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:23"><expr pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:11">command</name> <operator pos:start="13:13" pos:end="13:13">=</operator> <name pos:start="13:15" pos:end="13:22"><name pos:start="13:15" pos:end="13:19">words</name><index pos:start="13:20" pos:end="13:22">[<expr pos:start="13:21" pos:end="13:21"><literal type="number" pos:start="13:21" pos:end="13:21">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="17:5" pos:end="39:5"><if pos:start="17:5" pos:end="39:5">if <condition pos:start="17:8" pos:end="17:21">(<expr pos:start="17:9" pos:end="17:20"><name pos:start="17:9" pos:end="17:20">qtest_log_fp</name></expr>)</condition> <block pos:start="17:23" pos:end="39:5">{<block_content pos:start="19:9" pos:end="37:36">

        <decl_stmt pos:start="19:9" pos:end="19:24"><decl pos:start="19:9" pos:end="19:23"><type pos:start="19:9" pos:end="19:20"><name pos:start="19:9" pos:end="19:20">qemu_timeval</name></type> <name pos:start="19:22" pos:end="19:23">tv</name></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:14"><decl pos:start="21:9" pos:end="21:13"><type pos:start="21:9" pos:end="21:11"><name pos:start="21:9" pos:end="21:11">int</name></type> <name pos:start="21:13" pos:end="21:13">i</name></decl>;</decl_stmt>



        <expr_stmt pos:start="25:9" pos:end="25:28"><expr pos:start="25:9" pos:end="25:27"><call pos:start="25:9" pos:end="25:27"><name pos:start="25:9" pos:end="25:22">qtest_get_time</name><argument_list pos:start="25:23" pos:end="25:27">(<argument pos:start="25:24" pos:end="25:26"><expr pos:start="25:24" pos:end="25:26"><operator pos:start="25:24" pos:end="25:24">&amp;</operator><name pos:start="25:25" pos:end="25:26">tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="29:53"><expr pos:start="27:9" pos:end="29:52"><call pos:start="27:9" pos:end="29:52"><name pos:start="27:9" pos:end="27:15">fprintf</name><argument_list pos:start="27:16" pos:end="29:52">(<argument pos:start="27:17" pos:end="27:28"><expr pos:start="27:17" pos:end="27:28"><name pos:start="27:17" pos:end="27:28">qtest_log_fp</name></expr></argument>, <argument pos:start="27:31" pos:end="27:52"><expr pos:start="27:31" pos:end="27:52"><literal type="string" pos:start="27:31" pos:end="27:36">"[R +"</literal> <name pos:start="27:38" pos:end="27:48">FMT_timeval</name> <literal type="string" pos:start="27:50" pos:end="27:52">"]"</literal></expr></argument>,

                <argument pos:start="29:17" pos:end="29:32"><expr pos:start="29:17" pos:end="29:32"><operator pos:start="29:17" pos:end="29:17">(</operator><name pos:start="29:18" pos:end="29:21">long</name><operator pos:start="29:22" pos:end="29:22">)</operator> <name pos:start="29:24" pos:end="29:32"><name pos:start="29:24" pos:end="29:25">tv</name><operator pos:start="29:26" pos:end="29:26">.</operator><name pos:start="29:27" pos:end="29:32">tv_sec</name></name></expr></argument>, <argument pos:start="29:35" pos:end="29:51"><expr pos:start="29:35" pos:end="29:51"><operator pos:start="29:35" pos:end="29:35">(</operator><name pos:start="29:36" pos:end="29:39">long</name><operator pos:start="29:40" pos:end="29:40">)</operator> <name pos:start="29:42" pos:end="29:51"><name pos:start="29:42" pos:end="29:43">tv</name><operator pos:start="29:44" pos:end="29:44">.</operator><name pos:start="29:45" pos:end="29:51">tv_usec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="31:9" pos:end="35:9">for <control pos:start="31:13" pos:end="31:34">(<init pos:start="31:14" pos:end="31:19"><expr pos:start="31:14" pos:end="31:18"><name pos:start="31:14" pos:end="31:14">i</name> <operator pos:start="31:16" pos:end="31:16">=</operator> <literal type="number" pos:start="31:18" pos:end="31:18">0</literal></expr>;</init> <condition pos:start="31:21" pos:end="31:29"><expr pos:start="31:21" pos:end="31:28"><name pos:start="31:21" pos:end="31:28"><name pos:start="31:21" pos:end="31:25">words</name><index pos:start="31:26" pos:end="31:28">[<expr pos:start="31:27" pos:end="31:27"><name pos:start="31:27" pos:end="31:27">i</name></expr>]</index></name></expr>;</condition> <incr pos:start="31:31" pos:end="31:33"><expr pos:start="31:31" pos:end="31:33"><name pos:start="31:31" pos:end="31:31">i</name><operator pos:start="31:32" pos:end="31:33">++</operator></expr></incr>)</control> <block pos:start="31:36" pos:end="35:9">{<block_content pos:start="33:13" pos:end="33:51">

            <expr_stmt pos:start="33:13" pos:end="33:51"><expr pos:start="33:13" pos:end="33:50"><call pos:start="33:13" pos:end="33:50"><name pos:start="33:13" pos:end="33:19">fprintf</name><argument_list pos:start="33:20" pos:end="33:50">(<argument pos:start="33:21" pos:end="33:32"><expr pos:start="33:21" pos:end="33:32"><name pos:start="33:21" pos:end="33:32">qtest_log_fp</name></expr></argument>, <argument pos:start="33:35" pos:end="33:39"><expr pos:start="33:35" pos:end="33:39"><literal type="string" pos:start="33:35" pos:end="33:39">" %s"</literal></expr></argument>, <argument pos:start="33:42" pos:end="33:49"><expr pos:start="33:42" pos:end="33:49"><name pos:start="33:42" pos:end="33:49"><name pos:start="33:42" pos:end="33:46">words</name><index pos:start="33:47" pos:end="33:49">[<expr pos:start="33:48" pos:end="33:48"><name pos:start="33:48" pos:end="33:48">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="37:9" pos:end="37:36"><expr pos:start="37:9" pos:end="37:35"><call pos:start="37:9" pos:end="37:35"><name pos:start="37:9" pos:end="37:15">fprintf</name><argument_list pos:start="37:16" pos:end="37:35">(<argument pos:start="37:17" pos:end="37:28"><expr pos:start="37:17" pos:end="37:28"><name pos:start="37:17" pos:end="37:28">qtest_log_fp</name></expr></argument>, <argument pos:start="37:31" pos:end="37:34"><expr pos:start="37:31" pos:end="37:34"><literal type="string" pos:start="37:31" pos:end="37:34">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:22"><expr pos:start="43:5" pos:end="43:21"><call pos:start="43:5" pos:end="43:21"><name pos:start="43:5" pos:end="43:12">g_assert</name><argument_list pos:start="43:13" pos:end="43:21">(<argument pos:start="43:14" pos:end="43:20"><expr pos:start="43:14" pos:end="43:20"><name pos:start="43:14" pos:end="43:20">command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="605:5"><if pos:start="45:5" pos:end="139:5">if <condition pos:start="45:8" pos:end="47:53">(<expr pos:start="45:9" pos:end="47:52"><call pos:start="45:9" pos:end="45:45"><name pos:start="45:9" pos:end="45:14">strcmp</name><argument_list pos:start="45:15" pos:end="45:45">(<argument pos:start="45:16" pos:end="45:23"><expr pos:start="45:16" pos:end="45:23"><name pos:start="45:16" pos:end="45:23"><name pos:start="45:16" pos:end="45:20">words</name><index pos:start="45:21" pos:end="45:23">[<expr pos:start="45:22" pos:end="45:22"><literal type="number" pos:start="45:22" pos:end="45:22">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="45:26" pos:end="45:44"><expr pos:start="45:26" pos:end="45:44"><literal type="string" pos:start="45:26" pos:end="45:44">"irq_intercept_out"</literal></expr></argument>)</argument_list></call> <operator pos:start="45:47" pos:end="45:48">==</operator> <literal type="number" pos:start="45:50" pos:end="45:50">0</literal>

        <operator pos:start="47:9" pos:end="47:10">||</operator> <call pos:start="47:12" pos:end="47:47"><name pos:start="47:12" pos:end="47:17">strcmp</name><argument_list pos:start="47:18" pos:end="47:47">(<argument pos:start="47:19" pos:end="47:26"><expr pos:start="47:19" pos:end="47:26"><name pos:start="47:19" pos:end="47:26"><name pos:start="47:19" pos:end="47:23">words</name><index pos:start="47:24" pos:end="47:26">[<expr pos:start="47:25" pos:end="47:25"><literal type="number" pos:start="47:25" pos:end="47:25">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="47:29" pos:end="47:46"><expr pos:start="47:29" pos:end="47:46"><literal type="string" pos:start="47:29" pos:end="47:46">"irq_intercept_in"</literal></expr></argument>)</argument_list></call> <operator pos:start="47:49" pos:end="47:50">==</operator> <literal type="number" pos:start="47:52" pos:end="47:52">0</literal></expr>)</condition> <block pos:start="47:55" pos:end="139:5">{<block_content pos:start="49:9" pos:end="135:32">

        <decl_stmt pos:start="49:9" pos:end="49:25"><decl pos:start="49:9" pos:end="49:24"><type pos:start="49:9" pos:end="49:21"><name pos:start="49:9" pos:end="49:19">DeviceState</name> <modifier pos:start="49:21" pos:end="49:21">*</modifier></type><name pos:start="49:22" pos:end="49:24">dev</name></decl>;</decl_stmt>

        <decl_stmt pos:start="51:9" pos:end="51:27"><decl pos:start="51:9" pos:end="51:26"><type pos:start="51:9" pos:end="51:23"><name pos:start="51:9" pos:end="51:21">NamedGPIOList</name> <modifier pos:start="51:23" pos:end="51:23">*</modifier></type><name pos:start="51:24" pos:end="51:26">ngl</name></decl>;</decl_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:27"><expr pos:start="55:9" pos:end="55:26"><call pos:start="55:9" pos:end="55:26"><name pos:start="55:9" pos:end="55:16">g_assert</name><argument_list pos:start="55:17" pos:end="55:26">(<argument pos:start="55:18" pos:end="55:25"><expr pos:start="55:18" pos:end="55:25"><name pos:start="55:18" pos:end="55:25"><name pos:start="55:18" pos:end="55:22">words</name><index pos:start="55:23" pos:end="55:25">[<expr pos:start="55:24" pos:end="55:24"><literal type="number" pos:start="55:24" pos:end="55:24">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:58"><expr pos:start="57:9" pos:end="57:57"><name pos:start="57:9" pos:end="57:11">dev</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <call pos:start="57:15" pos:end="57:57"><name pos:start="57:15" pos:end="57:20">DEVICE</name><argument_list pos:start="57:21" pos:end="57:57">(<argument pos:start="57:22" pos:end="57:56"><expr pos:start="57:22" pos:end="57:56"><call pos:start="57:22" pos:end="57:56"><name pos:start="57:22" pos:end="57:40">object_resolve_path</name><argument_list pos:start="57:41" pos:end="57:56">(<argument pos:start="57:42" pos:end="57:49"><expr pos:start="57:42" pos:end="57:49"><name pos:start="57:42" pos:end="57:49"><name pos:start="57:42" pos:end="57:46">words</name><index pos:start="57:47" pos:end="57:49">[<expr pos:start="57:48" pos:end="57:48"><literal type="number" pos:start="57:48" pos:end="57:48">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="57:52" pos:end="57:55"><expr pos:start="57:52" pos:end="57:55"><name pos:start="57:52" pos:end="57:55">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="67:9"><if pos:start="59:9" pos:end="67:9">if <condition pos:start="59:12" pos:end="59:17">(<expr pos:start="59:13" pos:end="59:16"><operator pos:start="59:13" pos:end="59:13">!</operator><name pos:start="59:14" pos:end="59:16">dev</name></expr>)</condition> <block pos:start="59:19" pos:end="67:9">{<block_content pos:start="61:13" pos:end="65:19">

            <expr_stmt pos:start="61:13" pos:end="61:35"><expr pos:start="61:13" pos:end="61:34"><call pos:start="61:13" pos:end="61:34"><name pos:start="61:13" pos:end="61:29">qtest_send_prefix</name><argument_list pos:start="61:30" pos:end="61:34">(<argument pos:start="61:31" pos:end="61:33"><expr pos:start="61:31" pos:end="61:33"><name pos:start="61:31" pos:end="61:33">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:53"><expr pos:start="63:13" pos:end="63:52"><call pos:start="63:13" pos:end="63:52"><name pos:start="63:13" pos:end="63:22">qtest_send</name><argument_list pos:start="63:23" pos:end="63:52">(<argument pos:start="63:24" pos:end="63:26"><expr pos:start="63:24" pos:end="63:26"><name pos:start="63:24" pos:end="63:26">chr</name></expr></argument>, <argument pos:start="63:29" pos:end="63:51"><expr pos:start="63:29" pos:end="63:51"><literal type="string" pos:start="63:29" pos:end="63:51">"FAIL Unknown device\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="65:13" pos:end="65:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="71:9" pos:end="87:9"><if pos:start="71:9" pos:end="87:9">if <condition pos:start="71:12" pos:end="71:30">(<expr pos:start="71:13" pos:end="71:29"><name pos:start="71:13" pos:end="71:29">irq_intercept_dev</name></expr>)</condition> <block pos:start="71:32" pos:end="87:9">{<block_content pos:start="73:13" pos:end="85:19">

            <expr_stmt pos:start="73:13" pos:end="73:35"><expr pos:start="73:13" pos:end="73:34"><call pos:start="73:13" pos:end="73:34"><name pos:start="73:13" pos:end="73:29">qtest_send_prefix</name><argument_list pos:start="73:30" pos:end="73:34">(<argument pos:start="73:31" pos:end="73:33"><expr pos:start="73:31" pos:end="73:33"><name pos:start="73:31" pos:end="73:33">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="75:13" pos:end="83:13"><if pos:start="75:13" pos:end="79:13">if <condition pos:start="75:16" pos:end="75:41">(<expr pos:start="75:17" pos:end="75:40"><name pos:start="75:17" pos:end="75:33">irq_intercept_dev</name> <operator pos:start="75:35" pos:end="75:36">!=</operator> <name pos:start="75:38" pos:end="75:40">dev</name></expr>)</condition> <block pos:start="75:43" pos:end="79:13">{<block_content pos:start="77:17" pos:end="77:72">

                <expr_stmt pos:start="77:17" pos:end="77:72"><expr pos:start="77:17" pos:end="77:71"><call pos:start="77:17" pos:end="77:71"><name pos:start="77:17" pos:end="77:26">qtest_send</name><argument_list pos:start="77:27" pos:end="77:71">(<argument pos:start="77:28" pos:end="77:30"><expr pos:start="77:28" pos:end="77:30"><name pos:start="77:28" pos:end="77:30">chr</name></expr></argument>, <argument pos:start="77:33" pos:end="77:70"><expr pos:start="77:33" pos:end="77:70"><literal type="string" pos:start="77:33" pos:end="77:70">"FAIL IRQ intercept already enabled\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="79:15" pos:end="83:13">else <block pos:start="79:20" pos:end="83:13">{<block_content pos:start="81:17" pos:end="81:40">

                <expr_stmt pos:start="81:17" pos:end="81:40"><expr pos:start="81:17" pos:end="81:39"><call pos:start="81:17" pos:end="81:39"><name pos:start="81:17" pos:end="81:26">qtest_send</name><argument_list pos:start="81:27" pos:end="81:39">(<argument pos:start="81:28" pos:end="81:30"><expr pos:start="81:28" pos:end="81:30"><name pos:start="81:28" pos:end="81:30">chr</name></expr></argument>, <argument pos:start="81:33" pos:end="81:38"><expr pos:start="81:33" pos:end="81:38"><literal type="string" pos:start="81:33" pos:end="81:38">"OK\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

	    <return pos:start="85:13" pos:end="85:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <macro pos:start="91:9" pos:end="91:45"><name pos:start="91:9" pos:end="91:21">QLIST_FOREACH</name><argument_list pos:start="91:22" pos:end="91:45">(<argument pos:start="91:23" pos:end="91:25">ngl</argument>, <argument pos:start="91:28" pos:end="91:38">&amp;dev-&gt;gpios</argument>, <argument pos:start="91:41" pos:end="91:44">node</argument>)</argument_list></macro> <block pos:start="91:47" pos:end="129:9">{<block_content pos:start="95:13" pos:end="127:13">

            <comment type="block" pos:start="93:13" pos:end="93:63">/* We don't support intercept of named GPIOs yet */</comment>

            <if_stmt pos:start="95:13" pos:end="99:13"><if pos:start="95:13" pos:end="99:13">if <condition pos:start="95:16" pos:end="95:26">(<expr pos:start="95:17" pos:end="95:25"><name pos:start="95:17" pos:end="95:25"><name pos:start="95:17" pos:end="95:19">ngl</name><operator pos:start="95:20" pos:end="95:21">-&gt;</operator><name pos:start="95:22" pos:end="95:25">name</name></name></expr>)</condition> <block pos:start="95:28" pos:end="99:13">{<block_content pos:start="97:17" pos:end="97:25">

                <continue pos:start="97:17" pos:end="97:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="101:13" pos:end="127:13"><if pos:start="101:13" pos:end="121:13">if <condition pos:start="101:16" pos:end="101:36">(<expr pos:start="101:17" pos:end="101:35"><name pos:start="101:17" pos:end="101:28"><name pos:start="101:17" pos:end="101:21">words</name><index pos:start="101:22" pos:end="101:24">[<expr pos:start="101:23" pos:end="101:23"><literal type="number" pos:start="101:23" pos:end="101:23">0</literal></expr>]</index><index pos:start="101:25" pos:end="101:28">[<expr pos:start="101:26" pos:end="101:27"><literal type="number" pos:start="101:26" pos:end="101:27">14</literal></expr>]</index></name> <operator pos:start="101:30" pos:end="101:31">==</operator> <literal type="char" pos:start="101:33" pos:end="101:35">'o'</literal></expr>)</condition> <block pos:start="101:38" pos:end="121:13">{<block_content pos:start="103:17" pos:end="119:17">

                <decl_stmt pos:start="103:17" pos:end="103:22"><decl pos:start="103:17" pos:end="103:21"><type pos:start="103:17" pos:end="103:19"><name pos:start="103:17" pos:end="103:19">int</name></type> <name pos:start="103:21" pos:end="103:21">i</name></decl>;</decl_stmt>

                <for pos:start="105:17" pos:end="119:17">for <control pos:start="105:21" pos:end="105:50">(<init pos:start="105:22" pos:end="105:27"><expr pos:start="105:22" pos:end="105:26"><name pos:start="105:22" pos:end="105:22">i</name> <operator pos:start="105:24" pos:end="105:24">=</operator> <literal type="number" pos:start="105:26" pos:end="105:26">0</literal></expr>;</init> <condition pos:start="105:29" pos:end="105:45"><expr pos:start="105:29" pos:end="105:44"><name pos:start="105:29" pos:end="105:29">i</name> <operator pos:start="105:31" pos:end="105:31">&lt;</operator> <name pos:start="105:33" pos:end="105:44"><name pos:start="105:33" pos:end="105:35">ngl</name><operator pos:start="105:36" pos:end="105:37">-&gt;</operator><name pos:start="105:38" pos:end="105:44">num_out</name></name></expr>;</condition> <incr pos:start="105:47" pos:end="105:49"><expr pos:start="105:47" pos:end="105:49"><operator pos:start="105:47" pos:end="105:48">++</operator><name pos:start="105:49" pos:end="105:49">i</name></expr></incr>)</control> <block pos:start="105:52" pos:end="119:17">{<block_content pos:start="107:21" pos:end="117:74">

                    <decl_stmt pos:start="107:21" pos:end="107:65"><decl pos:start="107:21" pos:end="107:64"><type pos:start="107:21" pos:end="107:30"><name pos:start="107:21" pos:end="107:28">qemu_irq</name> <modifier pos:start="107:30" pos:end="107:30">*</modifier></type><name pos:start="107:31" pos:end="107:42">disconnected</name> <init pos:start="107:44" pos:end="107:64">= <expr pos:start="107:46" pos:end="107:64"><call pos:start="107:46" pos:end="107:64"><name pos:start="107:46" pos:end="107:51">g_new0</name><argument_list pos:start="107:52" pos:end="107:64">(<argument pos:start="107:53" pos:end="107:60"><expr pos:start="107:53" pos:end="107:60"><name pos:start="107:53" pos:end="107:60">qemu_irq</name></expr></argument>, <argument pos:start="107:63" pos:end="107:63"><expr pos:start="107:63" pos:end="107:63"><literal type="number" pos:start="107:63" pos:end="107:63">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="109:21" pos:end="111:71"><decl pos:start="109:21" pos:end="111:70"><type pos:start="109:21" pos:end="109:28"><name pos:start="109:21" pos:end="109:28">qemu_irq</name></type> <name pos:start="109:30" pos:end="109:33">icpt</name> <init pos:start="109:35" pos:end="111:70">= <expr pos:start="109:37" pos:end="111:70"><call pos:start="109:37" pos:end="111:70"><name pos:start="109:37" pos:end="109:53">qemu_allocate_irq</name><argument_list pos:start="109:54" pos:end="111:70">(<argument pos:start="109:55" pos:end="109:71"><expr pos:start="109:55" pos:end="109:71"><name pos:start="109:55" pos:end="109:71">qtest_irq_handler</name></expr></argument>,

                                                      <argument pos:start="111:55" pos:end="111:66"><expr pos:start="111:55" pos:end="111:66"><name pos:start="111:55" pos:end="111:66">disconnected</name></expr></argument>, <argument pos:start="111:69" pos:end="111:69"><expr pos:start="111:69" pos:end="111:69"><name pos:start="111:69" pos:end="111:69">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                    <expr_stmt pos:start="115:21" pos:end="117:74"><expr pos:start="115:21" pos:end="117:73"><operator pos:start="115:21" pos:end="115:21">*</operator><name pos:start="115:22" pos:end="115:33">disconnected</name> <operator pos:start="115:35" pos:end="115:35">=</operator> <call pos:start="115:37" pos:end="117:73"><name pos:start="115:37" pos:end="115:59">qdev_intercept_gpio_out</name><argument_list pos:start="115:60" pos:end="117:73">(<argument pos:start="115:61" pos:end="115:63"><expr pos:start="115:61" pos:end="115:63"><name pos:start="115:61" pos:end="115:63">dev</name></expr></argument>, <argument pos:start="115:66" pos:end="115:69"><expr pos:start="115:66" pos:end="115:69"><name pos:start="115:66" pos:end="115:69">icpt</name></expr></argument>,

                                                            <argument pos:start="117:61" pos:end="117:69"><expr pos:start="117:61" pos:end="117:69"><name pos:start="117:61" pos:end="117:69"><name pos:start="117:61" pos:end="117:63">ngl</name><operator pos:start="117:64" pos:end="117:65">-&gt;</operator><name pos:start="117:66" pos:end="117:69">name</name></name></expr></argument>, <argument pos:start="117:72" pos:end="117:72"><expr pos:start="117:72" pos:end="117:72"><name pos:start="117:72" pos:end="117:72">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if> <else pos:start="121:15" pos:end="127:13">else <block pos:start="121:20" pos:end="127:13">{<block_content pos:start="123:17" pos:end="125:51">

                <expr_stmt pos:start="123:17" pos:end="125:51"><expr pos:start="123:17" pos:end="125:50"><call pos:start="123:17" pos:end="125:50"><name pos:start="123:17" pos:end="123:37">qemu_irq_intercept_in</name><argument_list pos:start="123:38" pos:end="125:50">(<argument pos:start="123:39" pos:end="123:45"><expr pos:start="123:39" pos:end="123:45"><name pos:start="123:39" pos:end="123:45"><name pos:start="123:39" pos:end="123:41">ngl</name><operator pos:start="123:42" pos:end="123:43">-&gt;</operator><name pos:start="123:44" pos:end="123:45">in</name></name></expr></argument>, <argument pos:start="123:48" pos:end="123:64"><expr pos:start="123:48" pos:end="123:64"><name pos:start="123:48" pos:end="123:64">qtest_irq_handler</name></expr></argument>,

                                      <argument pos:start="125:39" pos:end="125:49"><expr pos:start="125:39" pos:end="125:49"><name pos:start="125:39" pos:end="125:49"><name pos:start="125:39" pos:end="125:41">ngl</name><operator pos:start="125:42" pos:end="125:43">-&gt;</operator><name pos:start="125:44" pos:end="125:49">num_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block>

        <expr_stmt pos:start="131:9" pos:end="131:32"><expr pos:start="131:9" pos:end="131:31"><name pos:start="131:9" pos:end="131:25">irq_intercept_dev</name> <operator pos:start="131:27" pos:end="131:27">=</operator> <name pos:start="131:29" pos:end="131:31">dev</name></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:31"><expr pos:start="133:9" pos:end="133:30"><call pos:start="133:9" pos:end="133:30"><name pos:start="133:9" pos:end="133:25">qtest_send_prefix</name><argument_list pos:start="133:26" pos:end="133:30">(<argument pos:start="133:27" pos:end="133:29"><expr pos:start="133:27" pos:end="133:29"><name pos:start="133:27" pos:end="133:29">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:32"><expr pos:start="135:9" pos:end="135:31"><call pos:start="135:9" pos:end="135:31"><name pos:start="135:9" pos:end="135:18">qtest_send</name><argument_list pos:start="135:19" pos:end="135:31">(<argument pos:start="135:20" pos:end="135:22"><expr pos:start="135:20" pos:end="135:22"><name pos:start="135:20" pos:end="135:22">chr</name></expr></argument>, <argument pos:start="135:25" pos:end="135:30"><expr pos:start="135:25" pos:end="135:30"><literal type="string" pos:start="135:25" pos:end="135:30">"OK\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    </block_content>}</block></if> <if type="elseif" pos:start="139:7" pos:end="177:5">else if <condition pos:start="139:15" pos:end="143:45">(<expr pos:start="139:16" pos:end="143:44"><call pos:start="139:16" pos:end="139:39"><name pos:start="139:16" pos:end="139:21">strcmp</name><argument_list pos:start="139:22" pos:end="139:39">(<argument pos:start="139:23" pos:end="139:30"><expr pos:start="139:23" pos:end="139:30"><name pos:start="139:23" pos:end="139:30"><name pos:start="139:23" pos:end="139:27">words</name><index pos:start="139:28" pos:end="139:30">[<expr pos:start="139:29" pos:end="139:29"><literal type="number" pos:start="139:29" pos:end="139:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="139:33" pos:end="139:38"><expr pos:start="139:33" pos:end="139:38"><literal type="string" pos:start="139:33" pos:end="139:38">"outb"</literal></expr></argument>)</argument_list></call> <operator pos:start="139:41" pos:end="139:42">==</operator> <literal type="number" pos:start="139:44" pos:end="139:44">0</literal> <operator pos:start="139:46" pos:end="139:47">||</operator>

               <call pos:start="141:16" pos:end="141:39"><name pos:start="141:16" pos:end="141:21">strcmp</name><argument_list pos:start="141:22" pos:end="141:39">(<argument pos:start="141:23" pos:end="141:30"><expr pos:start="141:23" pos:end="141:30"><name pos:start="141:23" pos:end="141:30"><name pos:start="141:23" pos:end="141:27">words</name><index pos:start="141:28" pos:end="141:30">[<expr pos:start="141:29" pos:end="141:29"><literal type="number" pos:start="141:29" pos:end="141:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="141:33" pos:end="141:38"><expr pos:start="141:33" pos:end="141:38"><literal type="string" pos:start="141:33" pos:end="141:38">"outw"</literal></expr></argument>)</argument_list></call> <operator pos:start="141:41" pos:end="141:42">==</operator> <literal type="number" pos:start="141:44" pos:end="141:44">0</literal> <operator pos:start="141:46" pos:end="141:47">||</operator>

               <call pos:start="143:16" pos:end="143:39"><name pos:start="143:16" pos:end="143:21">strcmp</name><argument_list pos:start="143:22" pos:end="143:39">(<argument pos:start="143:23" pos:end="143:30"><expr pos:start="143:23" pos:end="143:30"><name pos:start="143:23" pos:end="143:30"><name pos:start="143:23" pos:end="143:27">words</name><index pos:start="143:28" pos:end="143:30">[<expr pos:start="143:29" pos:end="143:29"><literal type="number" pos:start="143:29" pos:end="143:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="143:33" pos:end="143:38"><expr pos:start="143:33" pos:end="143:38"><literal type="string" pos:start="143:33" pos:end="143:38">"outl"</literal></expr></argument>)</argument_list></call> <operator pos:start="143:41" pos:end="143:42">==</operator> <literal type="number" pos:start="143:44" pos:end="143:44">0</literal></expr>)</condition> <block pos:start="143:47" pos:end="177:5">{<block_content pos:start="145:9" pos:end="175:32">

        <decl_stmt pos:start="145:9" pos:end="145:22"><decl pos:start="145:9" pos:end="145:21"><type pos:start="145:9" pos:end="145:16"><name pos:start="145:9" pos:end="145:16">uint16_t</name></type> <name pos:start="145:18" pos:end="145:21">addr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="147:9" pos:end="147:23"><decl pos:start="147:9" pos:end="147:22"><type pos:start="147:9" pos:end="147:16"><name pos:start="147:9" pos:end="147:16">uint32_t</name></type> <name pos:start="147:18" pos:end="147:22">value</name></decl>;</decl_stmt>



        <expr_stmt pos:start="151:9" pos:end="151:39"><expr pos:start="151:9" pos:end="151:38"><call pos:start="151:9" pos:end="151:38"><name pos:start="151:9" pos:end="151:16">g_assert</name><argument_list pos:start="151:17" pos:end="151:38">(<argument pos:start="151:18" pos:end="151:37"><expr pos:start="151:18" pos:end="151:37"><name pos:start="151:18" pos:end="151:25"><name pos:start="151:18" pos:end="151:22">words</name><index pos:start="151:23" pos:end="151:25">[<expr pos:start="151:24" pos:end="151:24"><literal type="number" pos:start="151:24" pos:end="151:24">1</literal></expr>]</index></name> <operator pos:start="151:27" pos:end="151:28">&amp;&amp;</operator> <name pos:start="151:30" pos:end="151:37"><name pos:start="151:30" pos:end="151:34">words</name><index pos:start="151:35" pos:end="151:37">[<expr pos:start="151:36" pos:end="151:36"><literal type="number" pos:start="151:36" pos:end="151:36">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:42"><expr pos:start="153:9" pos:end="153:41"><name pos:start="153:9" pos:end="153:12">addr</name> <operator pos:start="153:14" pos:end="153:14">=</operator> <call pos:start="153:16" pos:end="153:41"><name pos:start="153:16" pos:end="153:22">strtoul</name><argument_list pos:start="153:23" pos:end="153:41">(<argument pos:start="153:24" pos:end="153:31"><expr pos:start="153:24" pos:end="153:31"><name pos:start="153:24" pos:end="153:31"><name pos:start="153:24" pos:end="153:28">words</name><index pos:start="153:29" pos:end="153:31">[<expr pos:start="153:30" pos:end="153:30"><literal type="number" pos:start="153:30" pos:end="153:30">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="153:34" pos:end="153:37"><expr pos:start="153:34" pos:end="153:37"><name pos:start="153:34" pos:end="153:37">NULL</name></expr></argument>, <argument pos:start="153:40" pos:end="153:40"><expr pos:start="153:40" pos:end="153:40"><literal type="number" pos:start="153:40" pos:end="153:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:43"><expr pos:start="155:9" pos:end="155:42"><name pos:start="155:9" pos:end="155:13">value</name> <operator pos:start="155:15" pos:end="155:15">=</operator> <call pos:start="155:17" pos:end="155:42"><name pos:start="155:17" pos:end="155:23">strtoul</name><argument_list pos:start="155:24" pos:end="155:42">(<argument pos:start="155:25" pos:end="155:32"><expr pos:start="155:25" pos:end="155:32"><name pos:start="155:25" pos:end="155:32"><name pos:start="155:25" pos:end="155:29">words</name><index pos:start="155:30" pos:end="155:32">[<expr pos:start="155:31" pos:end="155:31"><literal type="number" pos:start="155:31" pos:end="155:31">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="155:35" pos:end="155:38"><expr pos:start="155:35" pos:end="155:38"><name pos:start="155:35" pos:end="155:38">NULL</name></expr></argument>, <argument pos:start="155:41" pos:end="155:41"><expr pos:start="155:41" pos:end="155:41"><literal type="number" pos:start="155:41" pos:end="155:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="159:9" pos:end="171:9"><if pos:start="159:9" pos:end="163:9">if <condition pos:start="159:12" pos:end="159:31">(<expr pos:start="159:13" pos:end="159:30"><name pos:start="159:13" pos:end="159:23"><name pos:start="159:13" pos:end="159:17">words</name><index pos:start="159:18" pos:end="159:20">[<expr pos:start="159:19" pos:end="159:19"><literal type="number" pos:start="159:19" pos:end="159:19">0</literal></expr>]</index><index pos:start="159:21" pos:end="159:23">[<expr pos:start="159:22" pos:end="159:22"><literal type="number" pos:start="159:22" pos:end="159:22">3</literal></expr>]</index></name> <operator pos:start="159:25" pos:end="159:26">==</operator> <literal type="char" pos:start="159:28" pos:end="159:30">'b'</literal></expr>)</condition> <block pos:start="159:33" pos:end="163:9">{<block_content pos:start="161:13" pos:end="161:34">

            <expr_stmt pos:start="161:13" pos:end="161:34"><expr pos:start="161:13" pos:end="161:33"><call pos:start="161:13" pos:end="161:33"><name pos:start="161:13" pos:end="161:20">cpu_outb</name><argument_list pos:start="161:21" pos:end="161:33">(<argument pos:start="161:22" pos:end="161:25"><expr pos:start="161:22" pos:end="161:25"><name pos:start="161:22" pos:end="161:25">addr</name></expr></argument>, <argument pos:start="161:28" pos:end="161:32"><expr pos:start="161:28" pos:end="161:32"><name pos:start="161:28" pos:end="161:32">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="163:11" pos:end="167:9">else if <condition pos:start="163:19" pos:end="163:38">(<expr pos:start="163:20" pos:end="163:37"><name pos:start="163:20" pos:end="163:30"><name pos:start="163:20" pos:end="163:24">words</name><index pos:start="163:25" pos:end="163:27">[<expr pos:start="163:26" pos:end="163:26"><literal type="number" pos:start="163:26" pos:end="163:26">0</literal></expr>]</index><index pos:start="163:28" pos:end="163:30">[<expr pos:start="163:29" pos:end="163:29"><literal type="number" pos:start="163:29" pos:end="163:29">3</literal></expr>]</index></name> <operator pos:start="163:32" pos:end="163:33">==</operator> <literal type="char" pos:start="163:35" pos:end="163:37">'w'</literal></expr>)</condition> <block pos:start="163:40" pos:end="167:9">{<block_content pos:start="165:13" pos:end="165:34">

            <expr_stmt pos:start="165:13" pos:end="165:34"><expr pos:start="165:13" pos:end="165:33"><call pos:start="165:13" pos:end="165:33"><name pos:start="165:13" pos:end="165:20">cpu_outw</name><argument_list pos:start="165:21" pos:end="165:33">(<argument pos:start="165:22" pos:end="165:25"><expr pos:start="165:22" pos:end="165:25"><name pos:start="165:22" pos:end="165:25">addr</name></expr></argument>, <argument pos:start="165:28" pos:end="165:32"><expr pos:start="165:28" pos:end="165:32"><name pos:start="165:28" pos:end="165:32">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="167:11" pos:end="171:9">else if <condition pos:start="167:19" pos:end="167:38">(<expr pos:start="167:20" pos:end="167:37"><name pos:start="167:20" pos:end="167:30"><name pos:start="167:20" pos:end="167:24">words</name><index pos:start="167:25" pos:end="167:27">[<expr pos:start="167:26" pos:end="167:26"><literal type="number" pos:start="167:26" pos:end="167:26">0</literal></expr>]</index><index pos:start="167:28" pos:end="167:30">[<expr pos:start="167:29" pos:end="167:29"><literal type="number" pos:start="167:29" pos:end="167:29">3</literal></expr>]</index></name> <operator pos:start="167:32" pos:end="167:33">==</operator> <literal type="char" pos:start="167:35" pos:end="167:37">'l'</literal></expr>)</condition> <block pos:start="167:40" pos:end="171:9">{<block_content pos:start="169:13" pos:end="169:34">

            <expr_stmt pos:start="169:13" pos:end="169:34"><expr pos:start="169:13" pos:end="169:33"><call pos:start="169:13" pos:end="169:33"><name pos:start="169:13" pos:end="169:20">cpu_outl</name><argument_list pos:start="169:21" pos:end="169:33">(<argument pos:start="169:22" pos:end="169:25"><expr pos:start="169:22" pos:end="169:25"><name pos:start="169:22" pos:end="169:25">addr</name></expr></argument>, <argument pos:start="169:28" pos:end="169:32"><expr pos:start="169:28" pos:end="169:32"><name pos:start="169:28" pos:end="169:32">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:31"><expr pos:start="173:9" pos:end="173:30"><call pos:start="173:9" pos:end="173:30"><name pos:start="173:9" pos:end="173:25">qtest_send_prefix</name><argument_list pos:start="173:26" pos:end="173:30">(<argument pos:start="173:27" pos:end="173:29"><expr pos:start="173:27" pos:end="173:29"><name pos:start="173:27" pos:end="173:29">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:32"><expr pos:start="175:9" pos:end="175:31"><call pos:start="175:9" pos:end="175:31"><name pos:start="175:9" pos:end="175:18">qtest_send</name><argument_list pos:start="175:19" pos:end="175:31">(<argument pos:start="175:20" pos:end="175:22"><expr pos:start="175:20" pos:end="175:22"><name pos:start="175:20" pos:end="175:22">chr</name></expr></argument>, <argument pos:start="175:25" pos:end="175:30"><expr pos:start="175:25" pos:end="175:30"><literal type="string" pos:start="175:25" pos:end="175:30">"OK\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="177:7" pos:end="213:5">else if <condition pos:start="177:15" pos:end="181:37">(<expr pos:start="177:16" pos:end="181:36"><call pos:start="177:16" pos:end="177:38"><name pos:start="177:16" pos:end="177:21">strcmp</name><argument_list pos:start="177:22" pos:end="177:38">(<argument pos:start="177:23" pos:end="177:30"><expr pos:start="177:23" pos:end="177:30"><name pos:start="177:23" pos:end="177:30"><name pos:start="177:23" pos:end="177:27">words</name><index pos:start="177:28" pos:end="177:30">[<expr pos:start="177:29" pos:end="177:29"><literal type="number" pos:start="177:29" pos:end="177:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="177:33" pos:end="177:37"><expr pos:start="177:33" pos:end="177:37"><literal type="string" pos:start="177:33" pos:end="177:37">"inb"</literal></expr></argument>)</argument_list></call> <operator pos:start="177:40" pos:end="177:41">==</operator> <literal type="number" pos:start="177:43" pos:end="177:43">0</literal> <operator pos:start="177:45" pos:end="177:46">||</operator>

        <call pos:start="179:9" pos:end="179:31"><name pos:start="179:9" pos:end="179:14">strcmp</name><argument_list pos:start="179:15" pos:end="179:31">(<argument pos:start="179:16" pos:end="179:23"><expr pos:start="179:16" pos:end="179:23"><name pos:start="179:16" pos:end="179:23"><name pos:start="179:16" pos:end="179:20">words</name><index pos:start="179:21" pos:end="179:23">[<expr pos:start="179:22" pos:end="179:22"><literal type="number" pos:start="179:22" pos:end="179:22">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="179:26" pos:end="179:30"><expr pos:start="179:26" pos:end="179:30"><literal type="string" pos:start="179:26" pos:end="179:30">"inw"</literal></expr></argument>)</argument_list></call> <operator pos:start="179:33" pos:end="179:34">==</operator> <literal type="number" pos:start="179:36" pos:end="179:36">0</literal> <operator pos:start="179:38" pos:end="179:39">||</operator>

        <call pos:start="181:9" pos:end="181:31"><name pos:start="181:9" pos:end="181:14">strcmp</name><argument_list pos:start="181:15" pos:end="181:31">(<argument pos:start="181:16" pos:end="181:23"><expr pos:start="181:16" pos:end="181:23"><name pos:start="181:16" pos:end="181:23"><name pos:start="181:16" pos:end="181:20">words</name><index pos:start="181:21" pos:end="181:23">[<expr pos:start="181:22" pos:end="181:22"><literal type="number" pos:start="181:22" pos:end="181:22">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="181:26" pos:end="181:30"><expr pos:start="181:26" pos:end="181:30"><literal type="string" pos:start="181:26" pos:end="181:30">"inl"</literal></expr></argument>)</argument_list></call> <operator pos:start="181:33" pos:end="181:34">==</operator> <literal type="number" pos:start="181:36" pos:end="181:36">0</literal></expr>)</condition> <block pos:start="181:39" pos:end="213:5">{<block_content pos:start="183:9" pos:end="211:47">

        <decl_stmt pos:start="183:9" pos:end="183:22"><decl pos:start="183:9" pos:end="183:21"><type pos:start="183:9" pos:end="183:16"><name pos:start="183:9" pos:end="183:16">uint16_t</name></type> <name pos:start="183:18" pos:end="183:21">addr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="185:9" pos:end="185:29"><decl pos:start="185:9" pos:end="185:28"><type pos:start="185:9" pos:end="185:16"><name pos:start="185:9" pos:end="185:16">uint32_t</name></type> <name pos:start="185:18" pos:end="185:22">value</name> <init pos:start="185:24" pos:end="185:28">= <expr pos:start="185:26" pos:end="185:28"><operator pos:start="185:26" pos:end="185:26">-</operator><literal type="number" pos:start="185:27" pos:end="185:28">1U</literal></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="189:9" pos:end="189:27"><expr pos:start="189:9" pos:end="189:26"><call pos:start="189:9" pos:end="189:26"><name pos:start="189:9" pos:end="189:16">g_assert</name><argument_list pos:start="189:17" pos:end="189:26">(<argument pos:start="189:18" pos:end="189:25"><expr pos:start="189:18" pos:end="189:25"><name pos:start="189:18" pos:end="189:25"><name pos:start="189:18" pos:end="189:22">words</name><index pos:start="189:23" pos:end="189:25">[<expr pos:start="189:24" pos:end="189:24"><literal type="number" pos:start="189:24" pos:end="189:24">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="191:9" pos:end="191:42"><expr pos:start="191:9" pos:end="191:41"><name pos:start="191:9" pos:end="191:12">addr</name> <operator pos:start="191:14" pos:end="191:14">=</operator> <call pos:start="191:16" pos:end="191:41"><name pos:start="191:16" pos:end="191:22">strtoul</name><argument_list pos:start="191:23" pos:end="191:41">(<argument pos:start="191:24" pos:end="191:31"><expr pos:start="191:24" pos:end="191:31"><name pos:start="191:24" pos:end="191:31"><name pos:start="191:24" pos:end="191:28">words</name><index pos:start="191:29" pos:end="191:31">[<expr pos:start="191:30" pos:end="191:30"><literal type="number" pos:start="191:30" pos:end="191:30">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="191:34" pos:end="191:37"><expr pos:start="191:34" pos:end="191:37"><name pos:start="191:34" pos:end="191:37">NULL</name></expr></argument>, <argument pos:start="191:40" pos:end="191:40"><expr pos:start="191:40" pos:end="191:40"><literal type="number" pos:start="191:40" pos:end="191:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="195:9" pos:end="207:9"><if pos:start="195:9" pos:end="199:9">if <condition pos:start="195:12" pos:end="195:31">(<expr pos:start="195:13" pos:end="195:30"><name pos:start="195:13" pos:end="195:23"><name pos:start="195:13" pos:end="195:17">words</name><index pos:start="195:18" pos:end="195:20">[<expr pos:start="195:19" pos:end="195:19"><literal type="number" pos:start="195:19" pos:end="195:19">0</literal></expr>]</index><index pos:start="195:21" pos:end="195:23">[<expr pos:start="195:22" pos:end="195:22"><literal type="number" pos:start="195:22" pos:end="195:22">2</literal></expr>]</index></name> <operator pos:start="195:25" pos:end="195:26">==</operator> <literal type="char" pos:start="195:28" pos:end="195:30">'b'</literal></expr>)</condition> <block pos:start="195:33" pos:end="199:9">{<block_content pos:start="197:13" pos:end="197:34">

            <expr_stmt pos:start="197:13" pos:end="197:34"><expr pos:start="197:13" pos:end="197:33"><name pos:start="197:13" pos:end="197:17">value</name> <operator pos:start="197:19" pos:end="197:19">=</operator> <call pos:start="197:21" pos:end="197:33"><name pos:start="197:21" pos:end="197:27">cpu_inb</name><argument_list pos:start="197:28" pos:end="197:33">(<argument pos:start="197:29" pos:end="197:32"><expr pos:start="197:29" pos:end="197:32"><name pos:start="197:29" pos:end="197:32">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="199:11" pos:end="203:9">else if <condition pos:start="199:19" pos:end="199:38">(<expr pos:start="199:20" pos:end="199:37"><name pos:start="199:20" pos:end="199:30"><name pos:start="199:20" pos:end="199:24">words</name><index pos:start="199:25" pos:end="199:27">[<expr pos:start="199:26" pos:end="199:26"><literal type="number" pos:start="199:26" pos:end="199:26">0</literal></expr>]</index><index pos:start="199:28" pos:end="199:30">[<expr pos:start="199:29" pos:end="199:29"><literal type="number" pos:start="199:29" pos:end="199:29">2</literal></expr>]</index></name> <operator pos:start="199:32" pos:end="199:33">==</operator> <literal type="char" pos:start="199:35" pos:end="199:37">'w'</literal></expr>)</condition> <block pos:start="199:40" pos:end="203:9">{<block_content pos:start="201:13" pos:end="201:34">

            <expr_stmt pos:start="201:13" pos:end="201:34"><expr pos:start="201:13" pos:end="201:33"><name pos:start="201:13" pos:end="201:17">value</name> <operator pos:start="201:19" pos:end="201:19">=</operator> <call pos:start="201:21" pos:end="201:33"><name pos:start="201:21" pos:end="201:27">cpu_inw</name><argument_list pos:start="201:28" pos:end="201:33">(<argument pos:start="201:29" pos:end="201:32"><expr pos:start="201:29" pos:end="201:32"><name pos:start="201:29" pos:end="201:32">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="203:11" pos:end="207:9">else if <condition pos:start="203:19" pos:end="203:38">(<expr pos:start="203:20" pos:end="203:37"><name pos:start="203:20" pos:end="203:30"><name pos:start="203:20" pos:end="203:24">words</name><index pos:start="203:25" pos:end="203:27">[<expr pos:start="203:26" pos:end="203:26"><literal type="number" pos:start="203:26" pos:end="203:26">0</literal></expr>]</index><index pos:start="203:28" pos:end="203:30">[<expr pos:start="203:29" pos:end="203:29"><literal type="number" pos:start="203:29" pos:end="203:29">2</literal></expr>]</index></name> <operator pos:start="203:32" pos:end="203:33">==</operator> <literal type="char" pos:start="203:35" pos:end="203:37">'l'</literal></expr>)</condition> <block pos:start="203:40" pos:end="207:9">{<block_content pos:start="205:13" pos:end="205:34">

            <expr_stmt pos:start="205:13" pos:end="205:34"><expr pos:start="205:13" pos:end="205:33"><name pos:start="205:13" pos:end="205:17">value</name> <operator pos:start="205:19" pos:end="205:19">=</operator> <call pos:start="205:21" pos:end="205:33"><name pos:start="205:21" pos:end="205:27">cpu_inl</name><argument_list pos:start="205:28" pos:end="205:33">(<argument pos:start="205:29" pos:end="205:32"><expr pos:start="205:29" pos:end="205:32"><name pos:start="205:29" pos:end="205:32">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:31"><expr pos:start="209:9" pos:end="209:30"><call pos:start="209:9" pos:end="209:30"><name pos:start="209:9" pos:end="209:25">qtest_send_prefix</name><argument_list pos:start="209:26" pos:end="209:30">(<argument pos:start="209:27" pos:end="209:29"><expr pos:start="209:27" pos:end="209:29"><name pos:start="209:27" pos:end="209:29">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="211:9" pos:end="211:47"><expr pos:start="211:9" pos:end="211:46"><call pos:start="211:9" pos:end="211:46"><name pos:start="211:9" pos:end="211:19">qtest_sendf</name><argument_list pos:start="211:20" pos:end="211:46">(<argument pos:start="211:21" pos:end="211:23"><expr pos:start="211:21" pos:end="211:23"><name pos:start="211:21" pos:end="211:23">chr</name></expr></argument>, <argument pos:start="211:26" pos:end="211:38"><expr pos:start="211:26" pos:end="211:38"><literal type="string" pos:start="211:26" pos:end="211:38">"OK 0x%04x\n"</literal></expr></argument>, <argument pos:start="211:41" pos:end="211:45"><expr pos:start="211:41" pos:end="211:45"><name pos:start="211:41" pos:end="211:45">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="213:7" pos:end="271:5">else if <condition pos:start="213:15" pos:end="219:47">(<expr pos:start="213:16" pos:end="219:46"><call pos:start="213:16" pos:end="213:41"><name pos:start="213:16" pos:end="213:21">strcmp</name><argument_list pos:start="213:22" pos:end="213:41">(<argument pos:start="213:23" pos:end="213:30"><expr pos:start="213:23" pos:end="213:30"><name pos:start="213:23" pos:end="213:30"><name pos:start="213:23" pos:end="213:27">words</name><index pos:start="213:28" pos:end="213:30">[<expr pos:start="213:29" pos:end="213:29"><literal type="number" pos:start="213:29" pos:end="213:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="213:33" pos:end="213:40"><expr pos:start="213:33" pos:end="213:40"><literal type="string" pos:start="213:33" pos:end="213:40">"writeb"</literal></expr></argument>)</argument_list></call> <operator pos:start="213:43" pos:end="213:44">==</operator> <literal type="number" pos:start="213:46" pos:end="213:46">0</literal> <operator pos:start="213:48" pos:end="213:49">||</operator>

               <call pos:start="215:16" pos:end="215:41"><name pos:start="215:16" pos:end="215:21">strcmp</name><argument_list pos:start="215:22" pos:end="215:41">(<argument pos:start="215:23" pos:end="215:30"><expr pos:start="215:23" pos:end="215:30"><name pos:start="215:23" pos:end="215:30"><name pos:start="215:23" pos:end="215:27">words</name><index pos:start="215:28" pos:end="215:30">[<expr pos:start="215:29" pos:end="215:29"><literal type="number" pos:start="215:29" pos:end="215:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="215:33" pos:end="215:40"><expr pos:start="215:33" pos:end="215:40"><literal type="string" pos:start="215:33" pos:end="215:40">"writew"</literal></expr></argument>)</argument_list></call> <operator pos:start="215:43" pos:end="215:44">==</operator> <literal type="number" pos:start="215:46" pos:end="215:46">0</literal> <operator pos:start="215:48" pos:end="215:49">||</operator>

               <call pos:start="217:16" pos:end="217:41"><name pos:start="217:16" pos:end="217:21">strcmp</name><argument_list pos:start="217:22" pos:end="217:41">(<argument pos:start="217:23" pos:end="217:30"><expr pos:start="217:23" pos:end="217:30"><name pos:start="217:23" pos:end="217:30"><name pos:start="217:23" pos:end="217:27">words</name><index pos:start="217:28" pos:end="217:30">[<expr pos:start="217:29" pos:end="217:29"><literal type="number" pos:start="217:29" pos:end="217:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="217:33" pos:end="217:40"><expr pos:start="217:33" pos:end="217:40"><literal type="string" pos:start="217:33" pos:end="217:40">"writel"</literal></expr></argument>)</argument_list></call> <operator pos:start="217:43" pos:end="217:44">==</operator> <literal type="number" pos:start="217:46" pos:end="217:46">0</literal> <operator pos:start="217:48" pos:end="217:49">||</operator>

               <call pos:start="219:16" pos:end="219:41"><name pos:start="219:16" pos:end="219:21">strcmp</name><argument_list pos:start="219:22" pos:end="219:41">(<argument pos:start="219:23" pos:end="219:30"><expr pos:start="219:23" pos:end="219:30"><name pos:start="219:23" pos:end="219:30"><name pos:start="219:23" pos:end="219:27">words</name><index pos:start="219:28" pos:end="219:30">[<expr pos:start="219:29" pos:end="219:29"><literal type="number" pos:start="219:29" pos:end="219:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="219:33" pos:end="219:40"><expr pos:start="219:33" pos:end="219:40"><literal type="string" pos:start="219:33" pos:end="219:40">"writeq"</literal></expr></argument>)</argument_list></call> <operator pos:start="219:43" pos:end="219:44">==</operator> <literal type="number" pos:start="219:46" pos:end="219:46">0</literal></expr>)</condition> <block pos:start="219:49" pos:end="271:5">{<block_content pos:start="221:9" pos:end="269:32">

        <decl_stmt pos:start="221:9" pos:end="221:22"><decl pos:start="221:9" pos:end="221:21"><type pos:start="221:9" pos:end="221:16"><name pos:start="221:9" pos:end="221:16">uint64_t</name></type> <name pos:start="221:18" pos:end="221:21">addr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="223:9" pos:end="223:23"><decl pos:start="223:9" pos:end="223:22"><type pos:start="223:9" pos:end="223:16"><name pos:start="223:9" pos:end="223:16">uint64_t</name></type> <name pos:start="223:18" pos:end="223:22">value</name></decl>;</decl_stmt>



        <expr_stmt pos:start="227:9" pos:end="227:39"><expr pos:start="227:9" pos:end="227:38"><call pos:start="227:9" pos:end="227:38"><name pos:start="227:9" pos:end="227:16">g_assert</name><argument_list pos:start="227:17" pos:end="227:38">(<argument pos:start="227:18" pos:end="227:37"><expr pos:start="227:18" pos:end="227:37"><name pos:start="227:18" pos:end="227:25"><name pos:start="227:18" pos:end="227:22">words</name><index pos:start="227:23" pos:end="227:25">[<expr pos:start="227:24" pos:end="227:24"><literal type="number" pos:start="227:24" pos:end="227:24">1</literal></expr>]</index></name> <operator pos:start="227:27" pos:end="227:28">&amp;&amp;</operator> <name pos:start="227:30" pos:end="227:37"><name pos:start="227:30" pos:end="227:34">words</name><index pos:start="227:35" pos:end="227:37">[<expr pos:start="227:36" pos:end="227:36"><literal type="number" pos:start="227:36" pos:end="227:36">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:43"><expr pos:start="229:9" pos:end="229:42"><name pos:start="229:9" pos:end="229:12">addr</name> <operator pos:start="229:14" pos:end="229:14">=</operator> <call pos:start="229:16" pos:end="229:42"><name pos:start="229:16" pos:end="229:23">strtoull</name><argument_list pos:start="229:24" pos:end="229:42">(<argument pos:start="229:25" pos:end="229:32"><expr pos:start="229:25" pos:end="229:32"><name pos:start="229:25" pos:end="229:32"><name pos:start="229:25" pos:end="229:29">words</name><index pos:start="229:30" pos:end="229:32">[<expr pos:start="229:31" pos:end="229:31"><literal type="number" pos:start="229:31" pos:end="229:31">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="229:35" pos:end="229:38"><expr pos:start="229:35" pos:end="229:38"><name pos:start="229:35" pos:end="229:38">NULL</name></expr></argument>, <argument pos:start="229:41" pos:end="229:41"><expr pos:start="229:41" pos:end="229:41"><literal type="number" pos:start="229:41" pos:end="229:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="231:9" pos:end="231:44"><expr pos:start="231:9" pos:end="231:43"><name pos:start="231:9" pos:end="231:13">value</name> <operator pos:start="231:15" pos:end="231:15">=</operator> <call pos:start="231:17" pos:end="231:43"><name pos:start="231:17" pos:end="231:24">strtoull</name><argument_list pos:start="231:25" pos:end="231:43">(<argument pos:start="231:26" pos:end="231:33"><expr pos:start="231:26" pos:end="231:33"><name pos:start="231:26" pos:end="231:33"><name pos:start="231:26" pos:end="231:30">words</name><index pos:start="231:31" pos:end="231:33">[<expr pos:start="231:32" pos:end="231:32"><literal type="number" pos:start="231:32" pos:end="231:32">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="231:36" pos:end="231:39"><expr pos:start="231:36" pos:end="231:39"><name pos:start="231:36" pos:end="231:39">NULL</name></expr></argument>, <argument pos:start="231:42" pos:end="231:42"><expr pos:start="231:42" pos:end="231:42"><literal type="number" pos:start="231:42" pos:end="231:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="235:9" pos:end="265:9"><if pos:start="235:9" pos:end="241:9">if <condition pos:start="235:12" pos:end="235:31">(<expr pos:start="235:13" pos:end="235:30"><name pos:start="235:13" pos:end="235:23"><name pos:start="235:13" pos:end="235:17">words</name><index pos:start="235:18" pos:end="235:20">[<expr pos:start="235:19" pos:end="235:19"><literal type="number" pos:start="235:19" pos:end="235:19">0</literal></expr>]</index><index pos:start="235:21" pos:end="235:23">[<expr pos:start="235:22" pos:end="235:22"><literal type="number" pos:start="235:22" pos:end="235:22">5</literal></expr>]</index></name> <operator pos:start="235:25" pos:end="235:26">==</operator> <literal type="char" pos:start="235:28" pos:end="235:30">'b'</literal></expr>)</condition> <block pos:start="235:33" pos:end="241:9">{<block_content pos:start="237:13" pos:end="239:54">

            <decl_stmt pos:start="237:13" pos:end="237:33"><decl pos:start="237:13" pos:end="237:32"><type pos:start="237:13" pos:end="237:19"><name pos:start="237:13" pos:end="237:19">uint8_t</name></type> <name pos:start="237:21" pos:end="237:24">data</name> <init pos:start="237:26" pos:end="237:32">= <expr pos:start="237:28" pos:end="237:32"><name pos:start="237:28" pos:end="237:32">value</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="239:13" pos:end="239:54"><expr pos:start="239:13" pos:end="239:53"><call pos:start="239:13" pos:end="239:53"><name pos:start="239:13" pos:end="239:37">cpu_physical_memory_write</name><argument_list pos:start="239:38" pos:end="239:53">(<argument pos:start="239:39" pos:end="239:42"><expr pos:start="239:39" pos:end="239:42"><name pos:start="239:39" pos:end="239:42">addr</name></expr></argument>, <argument pos:start="239:45" pos:end="239:49"><expr pos:start="239:45" pos:end="239:49"><operator pos:start="239:45" pos:end="239:45">&amp;</operator><name pos:start="239:46" pos:end="239:49">data</name></expr></argument>, <argument pos:start="239:52" pos:end="239:52"><expr pos:start="239:52" pos:end="239:52"><literal type="number" pos:start="239:52" pos:end="239:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="241:11" pos:end="249:9">else if <condition pos:start="241:19" pos:end="241:38">(<expr pos:start="241:20" pos:end="241:37"><name pos:start="241:20" pos:end="241:30"><name pos:start="241:20" pos:end="241:24">words</name><index pos:start="241:25" pos:end="241:27">[<expr pos:start="241:26" pos:end="241:26"><literal type="number" pos:start="241:26" pos:end="241:26">0</literal></expr>]</index><index pos:start="241:28" pos:end="241:30">[<expr pos:start="241:29" pos:end="241:29"><literal type="number" pos:start="241:29" pos:end="241:29">5</literal></expr>]</index></name> <operator pos:start="241:32" pos:end="241:33">==</operator> <literal type="char" pos:start="241:35" pos:end="241:37">'w'</literal></expr>)</condition> <block pos:start="241:40" pos:end="249:9">{<block_content pos:start="243:13" pos:end="247:54">

            <decl_stmt pos:start="243:13" pos:end="243:34"><decl pos:start="243:13" pos:end="243:33"><type pos:start="243:13" pos:end="243:20"><name pos:start="243:13" pos:end="243:20">uint16_t</name></type> <name pos:start="243:22" pos:end="243:25">data</name> <init pos:start="243:27" pos:end="243:33">= <expr pos:start="243:29" pos:end="243:33"><name pos:start="243:29" pos:end="243:33">value</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="245:13" pos:end="245:28"><expr pos:start="245:13" pos:end="245:27"><call pos:start="245:13" pos:end="245:27"><name pos:start="245:13" pos:end="245:20">tswap16s</name><argument_list pos:start="245:21" pos:end="245:27">(<argument pos:start="245:22" pos:end="245:26"><expr pos:start="245:22" pos:end="245:26"><operator pos:start="245:22" pos:end="245:22">&amp;</operator><name pos:start="245:23" pos:end="245:26">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="247:13" pos:end="247:54"><expr pos:start="247:13" pos:end="247:53"><call pos:start="247:13" pos:end="247:53"><name pos:start="247:13" pos:end="247:37">cpu_physical_memory_write</name><argument_list pos:start="247:38" pos:end="247:53">(<argument pos:start="247:39" pos:end="247:42"><expr pos:start="247:39" pos:end="247:42"><name pos:start="247:39" pos:end="247:42">addr</name></expr></argument>, <argument pos:start="247:45" pos:end="247:49"><expr pos:start="247:45" pos:end="247:49"><operator pos:start="247:45" pos:end="247:45">&amp;</operator><name pos:start="247:46" pos:end="247:49">data</name></expr></argument>, <argument pos:start="247:52" pos:end="247:52"><expr pos:start="247:52" pos:end="247:52"><literal type="number" pos:start="247:52" pos:end="247:52">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="249:11" pos:end="257:9">else if <condition pos:start="249:19" pos:end="249:38">(<expr pos:start="249:20" pos:end="249:37"><name pos:start="249:20" pos:end="249:30"><name pos:start="249:20" pos:end="249:24">words</name><index pos:start="249:25" pos:end="249:27">[<expr pos:start="249:26" pos:end="249:26"><literal type="number" pos:start="249:26" pos:end="249:26">0</literal></expr>]</index><index pos:start="249:28" pos:end="249:30">[<expr pos:start="249:29" pos:end="249:29"><literal type="number" pos:start="249:29" pos:end="249:29">5</literal></expr>]</index></name> <operator pos:start="249:32" pos:end="249:33">==</operator> <literal type="char" pos:start="249:35" pos:end="249:37">'l'</literal></expr>)</condition> <block pos:start="249:40" pos:end="257:9">{<block_content pos:start="251:13" pos:end="255:54">

            <decl_stmt pos:start="251:13" pos:end="251:34"><decl pos:start="251:13" pos:end="251:33"><type pos:start="251:13" pos:end="251:20"><name pos:start="251:13" pos:end="251:20">uint32_t</name></type> <name pos:start="251:22" pos:end="251:25">data</name> <init pos:start="251:27" pos:end="251:33">= <expr pos:start="251:29" pos:end="251:33"><name pos:start="251:29" pos:end="251:33">value</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="253:13" pos:end="253:28"><expr pos:start="253:13" pos:end="253:27"><call pos:start="253:13" pos:end="253:27"><name pos:start="253:13" pos:end="253:20">tswap32s</name><argument_list pos:start="253:21" pos:end="253:27">(<argument pos:start="253:22" pos:end="253:26"><expr pos:start="253:22" pos:end="253:26"><operator pos:start="253:22" pos:end="253:22">&amp;</operator><name pos:start="253:23" pos:end="253:26">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="255:13" pos:end="255:54"><expr pos:start="255:13" pos:end="255:53"><call pos:start="255:13" pos:end="255:53"><name pos:start="255:13" pos:end="255:37">cpu_physical_memory_write</name><argument_list pos:start="255:38" pos:end="255:53">(<argument pos:start="255:39" pos:end="255:42"><expr pos:start="255:39" pos:end="255:42"><name pos:start="255:39" pos:end="255:42">addr</name></expr></argument>, <argument pos:start="255:45" pos:end="255:49"><expr pos:start="255:45" pos:end="255:49"><operator pos:start="255:45" pos:end="255:45">&amp;</operator><name pos:start="255:46" pos:end="255:49">data</name></expr></argument>, <argument pos:start="255:52" pos:end="255:52"><expr pos:start="255:52" pos:end="255:52"><literal type="number" pos:start="255:52" pos:end="255:52">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="257:11" pos:end="265:9">else if <condition pos:start="257:19" pos:end="257:38">(<expr pos:start="257:20" pos:end="257:37"><name pos:start="257:20" pos:end="257:30"><name pos:start="257:20" pos:end="257:24">words</name><index pos:start="257:25" pos:end="257:27">[<expr pos:start="257:26" pos:end="257:26"><literal type="number" pos:start="257:26" pos:end="257:26">0</literal></expr>]</index><index pos:start="257:28" pos:end="257:30">[<expr pos:start="257:29" pos:end="257:29"><literal type="number" pos:start="257:29" pos:end="257:29">5</literal></expr>]</index></name> <operator pos:start="257:32" pos:end="257:33">==</operator> <literal type="char" pos:start="257:35" pos:end="257:37">'q'</literal></expr>)</condition> <block pos:start="257:40" pos:end="265:9">{<block_content pos:start="259:13" pos:end="263:54">

            <decl_stmt pos:start="259:13" pos:end="259:34"><decl pos:start="259:13" pos:end="259:33"><type pos:start="259:13" pos:end="259:20"><name pos:start="259:13" pos:end="259:20">uint64_t</name></type> <name pos:start="259:22" pos:end="259:25">data</name> <init pos:start="259:27" pos:end="259:33">= <expr pos:start="259:29" pos:end="259:33"><name pos:start="259:29" pos:end="259:33">value</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="261:13" pos:end="261:28"><expr pos:start="261:13" pos:end="261:27"><call pos:start="261:13" pos:end="261:27"><name pos:start="261:13" pos:end="261:20">tswap64s</name><argument_list pos:start="261:21" pos:end="261:27">(<argument pos:start="261:22" pos:end="261:26"><expr pos:start="261:22" pos:end="261:26"><operator pos:start="261:22" pos:end="261:22">&amp;</operator><name pos:start="261:23" pos:end="261:26">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="263:13" pos:end="263:54"><expr pos:start="263:13" pos:end="263:53"><call pos:start="263:13" pos:end="263:53"><name pos:start="263:13" pos:end="263:37">cpu_physical_memory_write</name><argument_list pos:start="263:38" pos:end="263:53">(<argument pos:start="263:39" pos:end="263:42"><expr pos:start="263:39" pos:end="263:42"><name pos:start="263:39" pos:end="263:42">addr</name></expr></argument>, <argument pos:start="263:45" pos:end="263:49"><expr pos:start="263:45" pos:end="263:49"><operator pos:start="263:45" pos:end="263:45">&amp;</operator><name pos:start="263:46" pos:end="263:49">data</name></expr></argument>, <argument pos:start="263:52" pos:end="263:52"><expr pos:start="263:52" pos:end="263:52"><literal type="number" pos:start="263:52" pos:end="263:52">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="267:9" pos:end="267:31"><expr pos:start="267:9" pos:end="267:30"><call pos:start="267:9" pos:end="267:30"><name pos:start="267:9" pos:end="267:25">qtest_send_prefix</name><argument_list pos:start="267:26" pos:end="267:30">(<argument pos:start="267:27" pos:end="267:29"><expr pos:start="267:27" pos:end="267:29"><name pos:start="267:27" pos:end="267:29">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="269:9" pos:end="269:32"><expr pos:start="269:9" pos:end="269:31"><call pos:start="269:9" pos:end="269:31"><name pos:start="269:9" pos:end="269:18">qtest_send</name><argument_list pos:start="269:19" pos:end="269:31">(<argument pos:start="269:20" pos:end="269:22"><expr pos:start="269:20" pos:end="269:22"><name pos:start="269:20" pos:end="269:22">chr</name></expr></argument>, <argument pos:start="269:25" pos:end="269:30"><expr pos:start="269:25" pos:end="269:30"><literal type="string" pos:start="269:25" pos:end="269:30">"OK\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="271:7" pos:end="327:5">else if <condition pos:start="271:15" pos:end="277:46">(<expr pos:start="271:16" pos:end="277:45"><call pos:start="271:16" pos:end="271:40"><name pos:start="271:16" pos:end="271:21">strcmp</name><argument_list pos:start="271:22" pos:end="271:40">(<argument pos:start="271:23" pos:end="271:30"><expr pos:start="271:23" pos:end="271:30"><name pos:start="271:23" pos:end="271:30"><name pos:start="271:23" pos:end="271:27">words</name><index pos:start="271:28" pos:end="271:30">[<expr pos:start="271:29" pos:end="271:29"><literal type="number" pos:start="271:29" pos:end="271:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="271:33" pos:end="271:39"><expr pos:start="271:33" pos:end="271:39"><literal type="string" pos:start="271:33" pos:end="271:39">"readb"</literal></expr></argument>)</argument_list></call> <operator pos:start="271:42" pos:end="271:43">==</operator> <literal type="number" pos:start="271:45" pos:end="271:45">0</literal> <operator pos:start="271:47" pos:end="271:48">||</operator>

               <call pos:start="273:16" pos:end="273:40"><name pos:start="273:16" pos:end="273:21">strcmp</name><argument_list pos:start="273:22" pos:end="273:40">(<argument pos:start="273:23" pos:end="273:30"><expr pos:start="273:23" pos:end="273:30"><name pos:start="273:23" pos:end="273:30"><name pos:start="273:23" pos:end="273:27">words</name><index pos:start="273:28" pos:end="273:30">[<expr pos:start="273:29" pos:end="273:29"><literal type="number" pos:start="273:29" pos:end="273:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="273:33" pos:end="273:39"><expr pos:start="273:33" pos:end="273:39"><literal type="string" pos:start="273:33" pos:end="273:39">"readw"</literal></expr></argument>)</argument_list></call> <operator pos:start="273:42" pos:end="273:43">==</operator> <literal type="number" pos:start="273:45" pos:end="273:45">0</literal> <operator pos:start="273:47" pos:end="273:48">||</operator>

               <call pos:start="275:16" pos:end="275:40"><name pos:start="275:16" pos:end="275:21">strcmp</name><argument_list pos:start="275:22" pos:end="275:40">(<argument pos:start="275:23" pos:end="275:30"><expr pos:start="275:23" pos:end="275:30"><name pos:start="275:23" pos:end="275:30"><name pos:start="275:23" pos:end="275:27">words</name><index pos:start="275:28" pos:end="275:30">[<expr pos:start="275:29" pos:end="275:29"><literal type="number" pos:start="275:29" pos:end="275:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="275:33" pos:end="275:39"><expr pos:start="275:33" pos:end="275:39"><literal type="string" pos:start="275:33" pos:end="275:39">"readl"</literal></expr></argument>)</argument_list></call> <operator pos:start="275:42" pos:end="275:43">==</operator> <literal type="number" pos:start="275:45" pos:end="275:45">0</literal> <operator pos:start="275:47" pos:end="275:48">||</operator>

               <call pos:start="277:16" pos:end="277:40"><name pos:start="277:16" pos:end="277:21">strcmp</name><argument_list pos:start="277:22" pos:end="277:40">(<argument pos:start="277:23" pos:end="277:30"><expr pos:start="277:23" pos:end="277:30"><name pos:start="277:23" pos:end="277:30"><name pos:start="277:23" pos:end="277:27">words</name><index pos:start="277:28" pos:end="277:30">[<expr pos:start="277:29" pos:end="277:29"><literal type="number" pos:start="277:29" pos:end="277:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="277:33" pos:end="277:39"><expr pos:start="277:33" pos:end="277:39"><literal type="string" pos:start="277:33" pos:end="277:39">"readq"</literal></expr></argument>)</argument_list></call> <operator pos:start="277:42" pos:end="277:43">==</operator> <literal type="number" pos:start="277:45" pos:end="277:45">0</literal></expr>)</condition> <block pos:start="277:48" pos:end="327:5">{<block_content pos:start="279:9" pos:end="325:57">

        <decl_stmt pos:start="279:9" pos:end="279:22"><decl pos:start="279:9" pos:end="279:21"><type pos:start="279:9" pos:end="279:16"><name pos:start="279:9" pos:end="279:16">uint64_t</name></type> <name pos:start="279:18" pos:end="279:21">addr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="281:9" pos:end="281:38"><decl pos:start="281:9" pos:end="281:37"><type pos:start="281:9" pos:end="281:16"><name pos:start="281:9" pos:end="281:16">uint64_t</name></type> <name pos:start="281:18" pos:end="281:22">value</name> <init pos:start="281:24" pos:end="281:37">= <expr pos:start="281:26" pos:end="281:37"><call pos:start="281:26" pos:end="281:37"><name pos:start="281:26" pos:end="281:33">UINT64_C</name><argument_list pos:start="281:34" pos:end="281:37">(<argument pos:start="281:35" pos:end="281:36"><expr pos:start="281:35" pos:end="281:36"><operator pos:start="281:35" pos:end="281:35">-</operator><literal type="number" pos:start="281:36" pos:end="281:36">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="285:9" pos:end="285:27"><expr pos:start="285:9" pos:end="285:26"><call pos:start="285:9" pos:end="285:26"><name pos:start="285:9" pos:end="285:16">g_assert</name><argument_list pos:start="285:17" pos:end="285:26">(<argument pos:start="285:18" pos:end="285:25"><expr pos:start="285:18" pos:end="285:25"><name pos:start="285:18" pos:end="285:25"><name pos:start="285:18" pos:end="285:22">words</name><index pos:start="285:23" pos:end="285:25">[<expr pos:start="285:24" pos:end="285:24"><literal type="number" pos:start="285:24" pos:end="285:24">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="287:9" pos:end="287:43"><expr pos:start="287:9" pos:end="287:42"><name pos:start="287:9" pos:end="287:12">addr</name> <operator pos:start="287:14" pos:end="287:14">=</operator> <call pos:start="287:16" pos:end="287:42"><name pos:start="287:16" pos:end="287:23">strtoull</name><argument_list pos:start="287:24" pos:end="287:42">(<argument pos:start="287:25" pos:end="287:32"><expr pos:start="287:25" pos:end="287:32"><name pos:start="287:25" pos:end="287:32"><name pos:start="287:25" pos:end="287:29">words</name><index pos:start="287:30" pos:end="287:32">[<expr pos:start="287:31" pos:end="287:31"><literal type="number" pos:start="287:31" pos:end="287:31">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="287:35" pos:end="287:38"><expr pos:start="287:35" pos:end="287:38"><name pos:start="287:35" pos:end="287:38">NULL</name></expr></argument>, <argument pos:start="287:41" pos:end="287:41"><expr pos:start="287:41" pos:end="287:41"><literal type="number" pos:start="287:41" pos:end="287:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="291:9" pos:end="321:9"><if pos:start="291:9" pos:end="299:9">if <condition pos:start="291:12" pos:end="291:31">(<expr pos:start="291:13" pos:end="291:30"><name pos:start="291:13" pos:end="291:23"><name pos:start="291:13" pos:end="291:17">words</name><index pos:start="291:18" pos:end="291:20">[<expr pos:start="291:19" pos:end="291:19"><literal type="number" pos:start="291:19" pos:end="291:19">0</literal></expr>]</index><index pos:start="291:21" pos:end="291:23">[<expr pos:start="291:22" pos:end="291:22"><literal type="number" pos:start="291:22" pos:end="291:22">4</literal></expr>]</index></name> <operator pos:start="291:25" pos:end="291:26">==</operator> <literal type="char" pos:start="291:28" pos:end="291:30">'b'</literal></expr>)</condition> <block pos:start="291:33" pos:end="299:9">{<block_content pos:start="293:13" pos:end="297:25">

            <decl_stmt pos:start="293:13" pos:end="293:25"><decl pos:start="293:13" pos:end="293:24"><type pos:start="293:13" pos:end="293:19"><name pos:start="293:13" pos:end="293:19">uint8_t</name></type> <name pos:start="293:21" pos:end="293:24">data</name></decl>;</decl_stmt>

            <expr_stmt pos:start="295:13" pos:end="295:53"><expr pos:start="295:13" pos:end="295:52"><call pos:start="295:13" pos:end="295:52"><name pos:start="295:13" pos:end="295:36">cpu_physical_memory_read</name><argument_list pos:start="295:37" pos:end="295:52">(<argument pos:start="295:38" pos:end="295:41"><expr pos:start="295:38" pos:end="295:41"><name pos:start="295:38" pos:end="295:41">addr</name></expr></argument>, <argument pos:start="295:44" pos:end="295:48"><expr pos:start="295:44" pos:end="295:48"><operator pos:start="295:44" pos:end="295:44">&amp;</operator><name pos:start="295:45" pos:end="295:48">data</name></expr></argument>, <argument pos:start="295:51" pos:end="295:51"><expr pos:start="295:51" pos:end="295:51"><literal type="number" pos:start="295:51" pos:end="295:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="297:13" pos:end="297:25"><expr pos:start="297:13" pos:end="297:24"><name pos:start="297:13" pos:end="297:17">value</name> <operator pos:start="297:19" pos:end="297:19">=</operator> <name pos:start="297:21" pos:end="297:24">data</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="299:11" pos:end="307:9">else if <condition pos:start="299:19" pos:end="299:38">(<expr pos:start="299:20" pos:end="299:37"><name pos:start="299:20" pos:end="299:30"><name pos:start="299:20" pos:end="299:24">words</name><index pos:start="299:25" pos:end="299:27">[<expr pos:start="299:26" pos:end="299:26"><literal type="number" pos:start="299:26" pos:end="299:26">0</literal></expr>]</index><index pos:start="299:28" pos:end="299:30">[<expr pos:start="299:29" pos:end="299:29"><literal type="number" pos:start="299:29" pos:end="299:29">4</literal></expr>]</index></name> <operator pos:start="299:32" pos:end="299:33">==</operator> <literal type="char" pos:start="299:35" pos:end="299:37">'w'</literal></expr>)</condition> <block pos:start="299:40" pos:end="307:9">{<block_content pos:start="301:13" pos:end="305:34">

            <decl_stmt pos:start="301:13" pos:end="301:26"><decl pos:start="301:13" pos:end="301:25"><type pos:start="301:13" pos:end="301:20"><name pos:start="301:13" pos:end="301:20">uint16_t</name></type> <name pos:start="301:22" pos:end="301:25">data</name></decl>;</decl_stmt>

            <expr_stmt pos:start="303:13" pos:end="303:53"><expr pos:start="303:13" pos:end="303:52"><call pos:start="303:13" pos:end="303:52"><name pos:start="303:13" pos:end="303:36">cpu_physical_memory_read</name><argument_list pos:start="303:37" pos:end="303:52">(<argument pos:start="303:38" pos:end="303:41"><expr pos:start="303:38" pos:end="303:41"><name pos:start="303:38" pos:end="303:41">addr</name></expr></argument>, <argument pos:start="303:44" pos:end="303:48"><expr pos:start="303:44" pos:end="303:48"><operator pos:start="303:44" pos:end="303:44">&amp;</operator><name pos:start="303:45" pos:end="303:48">data</name></expr></argument>, <argument pos:start="303:51" pos:end="303:51"><expr pos:start="303:51" pos:end="303:51"><literal type="number" pos:start="303:51" pos:end="303:51">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="305:13" pos:end="305:34"><expr pos:start="305:13" pos:end="305:33"><name pos:start="305:13" pos:end="305:17">value</name> <operator pos:start="305:19" pos:end="305:19">=</operator> <call pos:start="305:21" pos:end="305:33"><name pos:start="305:21" pos:end="305:27">tswap16</name><argument_list pos:start="305:28" pos:end="305:33">(<argument pos:start="305:29" pos:end="305:32"><expr pos:start="305:29" pos:end="305:32"><name pos:start="305:29" pos:end="305:32">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="307:11" pos:end="315:9">else if <condition pos:start="307:19" pos:end="307:38">(<expr pos:start="307:20" pos:end="307:37"><name pos:start="307:20" pos:end="307:30"><name pos:start="307:20" pos:end="307:24">words</name><index pos:start="307:25" pos:end="307:27">[<expr pos:start="307:26" pos:end="307:26"><literal type="number" pos:start="307:26" pos:end="307:26">0</literal></expr>]</index><index pos:start="307:28" pos:end="307:30">[<expr pos:start="307:29" pos:end="307:29"><literal type="number" pos:start="307:29" pos:end="307:29">4</literal></expr>]</index></name> <operator pos:start="307:32" pos:end="307:33">==</operator> <literal type="char" pos:start="307:35" pos:end="307:37">'l'</literal></expr>)</condition> <block pos:start="307:40" pos:end="315:9">{<block_content pos:start="309:13" pos:end="313:34">

            <decl_stmt pos:start="309:13" pos:end="309:26"><decl pos:start="309:13" pos:end="309:25"><type pos:start="309:13" pos:end="309:20"><name pos:start="309:13" pos:end="309:20">uint32_t</name></type> <name pos:start="309:22" pos:end="309:25">data</name></decl>;</decl_stmt>

            <expr_stmt pos:start="311:13" pos:end="311:53"><expr pos:start="311:13" pos:end="311:52"><call pos:start="311:13" pos:end="311:52"><name pos:start="311:13" pos:end="311:36">cpu_physical_memory_read</name><argument_list pos:start="311:37" pos:end="311:52">(<argument pos:start="311:38" pos:end="311:41"><expr pos:start="311:38" pos:end="311:41"><name pos:start="311:38" pos:end="311:41">addr</name></expr></argument>, <argument pos:start="311:44" pos:end="311:48"><expr pos:start="311:44" pos:end="311:48"><operator pos:start="311:44" pos:end="311:44">&amp;</operator><name pos:start="311:45" pos:end="311:48">data</name></expr></argument>, <argument pos:start="311:51" pos:end="311:51"><expr pos:start="311:51" pos:end="311:51"><literal type="number" pos:start="311:51" pos:end="311:51">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="313:13" pos:end="313:34"><expr pos:start="313:13" pos:end="313:33"><name pos:start="313:13" pos:end="313:17">value</name> <operator pos:start="313:19" pos:end="313:19">=</operator> <call pos:start="313:21" pos:end="313:33"><name pos:start="313:21" pos:end="313:27">tswap32</name><argument_list pos:start="313:28" pos:end="313:33">(<argument pos:start="313:29" pos:end="313:32"><expr pos:start="313:29" pos:end="313:32"><name pos:start="313:29" pos:end="313:32">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="315:11" pos:end="321:9">else if <condition pos:start="315:19" pos:end="315:38">(<expr pos:start="315:20" pos:end="315:37"><name pos:start="315:20" pos:end="315:30"><name pos:start="315:20" pos:end="315:24">words</name><index pos:start="315:25" pos:end="315:27">[<expr pos:start="315:26" pos:end="315:26"><literal type="number" pos:start="315:26" pos:end="315:26">0</literal></expr>]</index><index pos:start="315:28" pos:end="315:30">[<expr pos:start="315:29" pos:end="315:29"><literal type="number" pos:start="315:29" pos:end="315:29">4</literal></expr>]</index></name> <operator pos:start="315:32" pos:end="315:33">==</operator> <literal type="char" pos:start="315:35" pos:end="315:37">'q'</literal></expr>)</condition> <block pos:start="315:40" pos:end="321:9">{<block_content pos:start="317:13" pos:end="319:29">

            <expr_stmt pos:start="317:13" pos:end="317:54"><expr pos:start="317:13" pos:end="317:53"><call pos:start="317:13" pos:end="317:53"><name pos:start="317:13" pos:end="317:36">cpu_physical_memory_read</name><argument_list pos:start="317:37" pos:end="317:53">(<argument pos:start="317:38" pos:end="317:41"><expr pos:start="317:38" pos:end="317:41"><name pos:start="317:38" pos:end="317:41">addr</name></expr></argument>, <argument pos:start="317:44" pos:end="317:49"><expr pos:start="317:44" pos:end="317:49"><operator pos:start="317:44" pos:end="317:44">&amp;</operator><name pos:start="317:45" pos:end="317:49">value</name></expr></argument>, <argument pos:start="317:52" pos:end="317:52"><expr pos:start="317:52" pos:end="317:52"><literal type="number" pos:start="317:52" pos:end="317:52">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="319:13" pos:end="319:29"><expr pos:start="319:13" pos:end="319:28"><call pos:start="319:13" pos:end="319:28"><name pos:start="319:13" pos:end="319:20">tswap64s</name><argument_list pos:start="319:21" pos:end="319:28">(<argument pos:start="319:22" pos:end="319:27"><expr pos:start="319:22" pos:end="319:27"><operator pos:start="319:22" pos:end="319:22">&amp;</operator><name pos:start="319:23" pos:end="319:27">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="323:9" pos:end="323:31"><expr pos:start="323:9" pos:end="323:30"><call pos:start="323:9" pos:end="323:30"><name pos:start="323:9" pos:end="323:25">qtest_send_prefix</name><argument_list pos:start="323:26" pos:end="323:30">(<argument pos:start="323:27" pos:end="323:29"><expr pos:start="323:27" pos:end="323:29"><name pos:start="323:27" pos:end="323:29">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="325:9" pos:end="325:57"><expr pos:start="325:9" pos:end="325:56"><call pos:start="325:9" pos:end="325:56"><name pos:start="325:9" pos:end="325:19">qtest_sendf</name><argument_list pos:start="325:20" pos:end="325:56">(<argument pos:start="325:21" pos:end="325:23"><expr pos:start="325:21" pos:end="325:23"><name pos:start="325:21" pos:end="325:23">chr</name></expr></argument>, <argument pos:start="325:26" pos:end="325:48"><expr pos:start="325:26" pos:end="325:48"><literal type="string" pos:start="325:26" pos:end="325:36">"OK 0x%016"</literal> <name pos:start="325:38" pos:end="325:43">PRIx64</name> <literal type="string" pos:start="325:45" pos:end="325:48">"\n"</literal></expr></argument>, <argument pos:start="325:51" pos:end="325:55"><expr pos:start="325:51" pos:end="325:55"><name pos:start="325:51" pos:end="325:55">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="327:7" pos:end="371:5">else if <condition pos:start="327:15" pos:end="327:45">(<expr pos:start="327:16" pos:end="327:44"><call pos:start="327:16" pos:end="327:39"><name pos:start="327:16" pos:end="327:21">strcmp</name><argument_list pos:start="327:22" pos:end="327:39">(<argument pos:start="327:23" pos:end="327:30"><expr pos:start="327:23" pos:end="327:30"><name pos:start="327:23" pos:end="327:30"><name pos:start="327:23" pos:end="327:27">words</name><index pos:start="327:28" pos:end="327:30">[<expr pos:start="327:29" pos:end="327:29"><literal type="number" pos:start="327:29" pos:end="327:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="327:33" pos:end="327:38"><expr pos:start="327:33" pos:end="327:38"><literal type="string" pos:start="327:33" pos:end="327:38">"read"</literal></expr></argument>)</argument_list></call> <operator pos:start="327:41" pos:end="327:42">==</operator> <literal type="number" pos:start="327:44" pos:end="327:44">0</literal></expr>)</condition> <block pos:start="327:47" pos:end="371:5">{<block_content pos:start="329:9" pos:end="369:20">

        <decl_stmt pos:start="329:9" pos:end="329:30"><decl pos:start="329:9" pos:end="329:21"><type pos:start="329:9" pos:end="329:16"><name pos:start="329:9" pos:end="329:16">uint64_t</name></type> <name pos:start="329:18" pos:end="329:21">addr</name></decl>, <decl pos:start="329:24" pos:end="329:26"><type ref="prev" pos:start="329:9" pos:end="329:16"/><name pos:start="329:24" pos:end="329:26">len</name></decl>, <decl pos:start="329:29" pos:end="329:29"><type ref="prev" pos:start="329:9" pos:end="329:16"/><name pos:start="329:29" pos:end="329:29">i</name></decl>;</decl_stmt>

        <decl_stmt pos:start="331:9" pos:end="331:22"><decl pos:start="331:9" pos:end="331:21"><type pos:start="331:9" pos:end="331:17"><name pos:start="331:9" pos:end="331:15">uint8_t</name> <modifier pos:start="331:17" pos:end="331:17">*</modifier></type><name pos:start="331:18" pos:end="331:21">data</name></decl>;</decl_stmt>

        <decl_stmt pos:start="333:9" pos:end="333:18"><decl pos:start="333:9" pos:end="333:17"><type pos:start="333:9" pos:end="333:14"><name pos:start="333:9" pos:end="333:12">char</name> <modifier pos:start="333:14" pos:end="333:14">*</modifier></type><name pos:start="333:15" pos:end="333:17">enc</name></decl>;</decl_stmt>



        <expr_stmt pos:start="337:9" pos:end="337:39"><expr pos:start="337:9" pos:end="337:38"><call pos:start="337:9" pos:end="337:38"><name pos:start="337:9" pos:end="337:16">g_assert</name><argument_list pos:start="337:17" pos:end="337:38">(<argument pos:start="337:18" pos:end="337:37"><expr pos:start="337:18" pos:end="337:37"><name pos:start="337:18" pos:end="337:25"><name pos:start="337:18" pos:end="337:22">words</name><index pos:start="337:23" pos:end="337:25">[<expr pos:start="337:24" pos:end="337:24"><literal type="number" pos:start="337:24" pos:end="337:24">1</literal></expr>]</index></name> <operator pos:start="337:27" pos:end="337:28">&amp;&amp;</operator> <name pos:start="337:30" pos:end="337:37"><name pos:start="337:30" pos:end="337:34">words</name><index pos:start="337:35" pos:end="337:37">[<expr pos:start="337:36" pos:end="337:36"><literal type="number" pos:start="337:36" pos:end="337:36">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="339:9" pos:end="339:43"><expr pos:start="339:9" pos:end="339:42"><name pos:start="339:9" pos:end="339:12">addr</name> <operator pos:start="339:14" pos:end="339:14">=</operator> <call pos:start="339:16" pos:end="339:42"><name pos:start="339:16" pos:end="339:23">strtoull</name><argument_list pos:start="339:24" pos:end="339:42">(<argument pos:start="339:25" pos:end="339:32"><expr pos:start="339:25" pos:end="339:32"><name pos:start="339:25" pos:end="339:32"><name pos:start="339:25" pos:end="339:29">words</name><index pos:start="339:30" pos:end="339:32">[<expr pos:start="339:31" pos:end="339:31"><literal type="number" pos:start="339:31" pos:end="339:31">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="339:35" pos:end="339:38"><expr pos:start="339:35" pos:end="339:38"><name pos:start="339:35" pos:end="339:38">NULL</name></expr></argument>, <argument pos:start="339:41" pos:end="339:41"><expr pos:start="339:41" pos:end="339:41"><literal type="number" pos:start="339:41" pos:end="339:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="341:9" pos:end="341:42"><expr pos:start="341:9" pos:end="341:41"><name pos:start="341:9" pos:end="341:11">len</name> <operator pos:start="341:13" pos:end="341:13">=</operator> <call pos:start="341:15" pos:end="341:41"><name pos:start="341:15" pos:end="341:22">strtoull</name><argument_list pos:start="341:23" pos:end="341:41">(<argument pos:start="341:24" pos:end="341:31"><expr pos:start="341:24" pos:end="341:31"><name pos:start="341:24" pos:end="341:31"><name pos:start="341:24" pos:end="341:28">words</name><index pos:start="341:29" pos:end="341:31">[<expr pos:start="341:30" pos:end="341:30"><literal type="number" pos:start="341:30" pos:end="341:30">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="341:34" pos:end="341:37"><expr pos:start="341:34" pos:end="341:37"><name pos:start="341:34" pos:end="341:37">NULL</name></expr></argument>, <argument pos:start="341:40" pos:end="341:40"><expr pos:start="341:40" pos:end="341:40"><literal type="number" pos:start="341:40" pos:end="341:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="345:9" pos:end="345:29"><expr pos:start="345:9" pos:end="345:28"><name pos:start="345:9" pos:end="345:12">data</name> <operator pos:start="345:14" pos:end="345:14">=</operator> <call pos:start="345:16" pos:end="345:28"><name pos:start="345:16" pos:end="345:23">g_malloc</name><argument_list pos:start="345:24" pos:end="345:28">(<argument pos:start="345:25" pos:end="345:27"><expr pos:start="345:25" pos:end="345:27"><name pos:start="345:25" pos:end="345:27">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="347:9" pos:end="347:50"><expr pos:start="347:9" pos:end="347:49"><call pos:start="347:9" pos:end="347:49"><name pos:start="347:9" pos:end="347:32">cpu_physical_memory_read</name><argument_list pos:start="347:33" pos:end="347:49">(<argument pos:start="347:34" pos:end="347:37"><expr pos:start="347:34" pos:end="347:37"><name pos:start="347:34" pos:end="347:37">addr</name></expr></argument>, <argument pos:start="347:40" pos:end="347:43"><expr pos:start="347:40" pos:end="347:43"><name pos:start="347:40" pos:end="347:43">data</name></expr></argument>, <argument pos:start="347:46" pos:end="347:48"><expr pos:start="347:46" pos:end="347:48"><name pos:start="347:46" pos:end="347:48">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="351:9" pos:end="351:36"><expr pos:start="351:9" pos:end="351:35"><name pos:start="351:9" pos:end="351:11">enc</name> <operator pos:start="351:13" pos:end="351:13">=</operator> <call pos:start="351:15" pos:end="351:35"><name pos:start="351:15" pos:end="351:22">g_malloc</name><argument_list pos:start="351:23" pos:end="351:35">(<argument pos:start="351:24" pos:end="351:34"><expr pos:start="351:24" pos:end="351:34"><literal type="number" pos:start="351:24" pos:end="351:24">2</literal> <operator pos:start="351:26" pos:end="351:26">*</operator> <name pos:start="351:28" pos:end="351:30">len</name> <operator pos:start="351:32" pos:end="351:32">+</operator> <literal type="number" pos:start="351:34" pos:end="351:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="353:9" pos:end="357:9">for <control pos:start="353:13" pos:end="353:33">(<init pos:start="353:14" pos:end="353:19"><expr pos:start="353:14" pos:end="353:18"><name pos:start="353:14" pos:end="353:14">i</name> <operator pos:start="353:16" pos:end="353:16">=</operator> <literal type="number" pos:start="353:18" pos:end="353:18">0</literal></expr>;</init> <condition pos:start="353:21" pos:end="353:28"><expr pos:start="353:21" pos:end="353:27"><name pos:start="353:21" pos:end="353:21">i</name> <operator pos:start="353:23" pos:end="353:23">&lt;</operator> <name pos:start="353:25" pos:end="353:27">len</name></expr>;</condition> <incr pos:start="353:30" pos:end="353:32"><expr pos:start="353:30" pos:end="353:32"><name pos:start="353:30" pos:end="353:30">i</name><operator pos:start="353:31" pos:end="353:32">++</operator></expr></incr>)</control> <block pos:start="353:35" pos:end="357:9">{<block_content pos:start="355:13" pos:end="355:50">

            <expr_stmt pos:start="355:13" pos:end="355:50"><expr pos:start="355:13" pos:end="355:49"><call pos:start="355:13" pos:end="355:49"><name pos:start="355:13" pos:end="355:19">sprintf</name><argument_list pos:start="355:20" pos:end="355:49">(<argument pos:start="355:21" pos:end="355:31"><expr pos:start="355:21" pos:end="355:31"><operator pos:start="355:21" pos:end="355:21">&amp;</operator><name pos:start="355:22" pos:end="355:31"><name pos:start="355:22" pos:end="355:24">enc</name><index pos:start="355:25" pos:end="355:31">[<expr pos:start="355:26" pos:end="355:30"><name pos:start="355:26" pos:end="355:26">i</name> <operator pos:start="355:28" pos:end="355:28">*</operator> <literal type="number" pos:start="355:30" pos:end="355:30">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="355:34" pos:end="355:39"><expr pos:start="355:34" pos:end="355:39"><literal type="string" pos:start="355:34" pos:end="355:39">"%02x"</literal></expr></argument>, <argument pos:start="355:42" pos:end="355:48"><expr pos:start="355:42" pos:end="355:48"><name pos:start="355:42" pos:end="355:48"><name pos:start="355:42" pos:end="355:45">data</name><index pos:start="355:46" pos:end="355:48">[<expr pos:start="355:47" pos:end="355:47"><name pos:start="355:47" pos:end="355:47">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="361:9" pos:end="361:31"><expr pos:start="361:9" pos:end="361:30"><call pos:start="361:9" pos:end="361:30"><name pos:start="361:9" pos:end="361:25">qtest_send_prefix</name><argument_list pos:start="361:26" pos:end="361:30">(<argument pos:start="361:27" pos:end="361:29"><expr pos:start="361:27" pos:end="361:29"><name pos:start="361:27" pos:end="361:29">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="363:9" pos:end="363:43"><expr pos:start="363:9" pos:end="363:42"><call pos:start="363:9" pos:end="363:42"><name pos:start="363:9" pos:end="363:19">qtest_sendf</name><argument_list pos:start="363:20" pos:end="363:42">(<argument pos:start="363:21" pos:end="363:23"><expr pos:start="363:21" pos:end="363:23"><name pos:start="363:21" pos:end="363:23">chr</name></expr></argument>, <argument pos:start="363:26" pos:end="363:36"><expr pos:start="363:26" pos:end="363:36"><literal type="string" pos:start="363:26" pos:end="363:36">"OK 0x%s\n"</literal></expr></argument>, <argument pos:start="363:39" pos:end="363:41"><expr pos:start="363:39" pos:end="363:41"><name pos:start="363:39" pos:end="363:41">enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="367:9" pos:end="367:21"><expr pos:start="367:9" pos:end="367:20"><call pos:start="367:9" pos:end="367:20"><name pos:start="367:9" pos:end="367:14">g_free</name><argument_list pos:start="367:15" pos:end="367:20">(<argument pos:start="367:16" pos:end="367:19"><expr pos:start="367:16" pos:end="367:19"><name pos:start="367:16" pos:end="367:19">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="369:9" pos:end="369:20"><expr pos:start="369:9" pos:end="369:19"><call pos:start="369:9" pos:end="369:19"><name pos:start="369:9" pos:end="369:14">g_free</name><argument_list pos:start="369:15" pos:end="369:19">(<argument pos:start="369:16" pos:end="369:18"><expr pos:start="369:16" pos:end="369:18"><name pos:start="369:16" pos:end="369:18">enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="371:7" pos:end="405:5">else if <condition pos:start="371:15" pos:end="371:48">(<expr pos:start="371:16" pos:end="371:47"><call pos:start="371:16" pos:end="371:42"><name pos:start="371:16" pos:end="371:21">strcmp</name><argument_list pos:start="371:22" pos:end="371:42">(<argument pos:start="371:23" pos:end="371:30"><expr pos:start="371:23" pos:end="371:30"><name pos:start="371:23" pos:end="371:30"><name pos:start="371:23" pos:end="371:27">words</name><index pos:start="371:28" pos:end="371:30">[<expr pos:start="371:29" pos:end="371:29"><literal type="number" pos:start="371:29" pos:end="371:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="371:33" pos:end="371:41"><expr pos:start="371:33" pos:end="371:41"><literal type="string" pos:start="371:33" pos:end="371:41">"b64read"</literal></expr></argument>)</argument_list></call> <operator pos:start="371:44" pos:end="371:45">==</operator> <literal type="number" pos:start="371:47" pos:end="371:47">0</literal></expr>)</condition> <block pos:start="371:50" pos:end="405:5">{<block_content pos:start="373:9" pos:end="403:25">

        <decl_stmt pos:start="373:9" pos:end="373:27"><decl pos:start="373:9" pos:end="373:21"><type pos:start="373:9" pos:end="373:16"><name pos:start="373:9" pos:end="373:16">uint64_t</name></type> <name pos:start="373:18" pos:end="373:21">addr</name></decl>, <decl pos:start="373:24" pos:end="373:26"><type ref="prev" pos:start="373:9" pos:end="373:16"/><name pos:start="373:24" pos:end="373:26">len</name></decl>;</decl_stmt>

        <decl_stmt pos:start="375:9" pos:end="375:22"><decl pos:start="375:9" pos:end="375:21"><type pos:start="375:9" pos:end="375:17"><name pos:start="375:9" pos:end="375:15">uint8_t</name> <modifier pos:start="375:17" pos:end="375:17">*</modifier></type><name pos:start="375:18" pos:end="375:21">data</name></decl>;</decl_stmt>

        <decl_stmt pos:start="377:9" pos:end="377:24"><decl pos:start="377:9" pos:end="377:23"><type pos:start="377:9" pos:end="377:15"><name pos:start="377:9" pos:end="377:13">gchar</name> <modifier pos:start="377:15" pos:end="377:15">*</modifier></type><name pos:start="377:16" pos:end="377:23">b64_data</name></decl>;</decl_stmt>



        <expr_stmt pos:start="381:9" pos:end="381:39"><expr pos:start="381:9" pos:end="381:38"><call pos:start="381:9" pos:end="381:38"><name pos:start="381:9" pos:end="381:16">g_assert</name><argument_list pos:start="381:17" pos:end="381:38">(<argument pos:start="381:18" pos:end="381:37"><expr pos:start="381:18" pos:end="381:37"><name pos:start="381:18" pos:end="381:25"><name pos:start="381:18" pos:end="381:22">words</name><index pos:start="381:23" pos:end="381:25">[<expr pos:start="381:24" pos:end="381:24"><literal type="number" pos:start="381:24" pos:end="381:24">1</literal></expr>]</index></name> <operator pos:start="381:27" pos:end="381:28">&amp;&amp;</operator> <name pos:start="381:30" pos:end="381:37"><name pos:start="381:30" pos:end="381:34">words</name><index pos:start="381:35" pos:end="381:37">[<expr pos:start="381:36" pos:end="381:36"><literal type="number" pos:start="381:36" pos:end="381:36">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="383:9" pos:end="383:43"><expr pos:start="383:9" pos:end="383:42"><name pos:start="383:9" pos:end="383:12">addr</name> <operator pos:start="383:14" pos:end="383:14">=</operator> <call pos:start="383:16" pos:end="383:42"><name pos:start="383:16" pos:end="383:23">strtoull</name><argument_list pos:start="383:24" pos:end="383:42">(<argument pos:start="383:25" pos:end="383:32"><expr pos:start="383:25" pos:end="383:32"><name pos:start="383:25" pos:end="383:32"><name pos:start="383:25" pos:end="383:29">words</name><index pos:start="383:30" pos:end="383:32">[<expr pos:start="383:31" pos:end="383:31"><literal type="number" pos:start="383:31" pos:end="383:31">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="383:35" pos:end="383:38"><expr pos:start="383:35" pos:end="383:38"><name pos:start="383:35" pos:end="383:38">NULL</name></expr></argument>, <argument pos:start="383:41" pos:end="383:41"><expr pos:start="383:41" pos:end="383:41"><literal type="number" pos:start="383:41" pos:end="383:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="385:9" pos:end="385:42"><expr pos:start="385:9" pos:end="385:41"><name pos:start="385:9" pos:end="385:11">len</name> <operator pos:start="385:13" pos:end="385:13">=</operator> <call pos:start="385:15" pos:end="385:41"><name pos:start="385:15" pos:end="385:22">strtoull</name><argument_list pos:start="385:23" pos:end="385:41">(<argument pos:start="385:24" pos:end="385:31"><expr pos:start="385:24" pos:end="385:31"><name pos:start="385:24" pos:end="385:31"><name pos:start="385:24" pos:end="385:28">words</name><index pos:start="385:29" pos:end="385:31">[<expr pos:start="385:30" pos:end="385:30"><literal type="number" pos:start="385:30" pos:end="385:30">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="385:34" pos:end="385:37"><expr pos:start="385:34" pos:end="385:37"><name pos:start="385:34" pos:end="385:37">NULL</name></expr></argument>, <argument pos:start="385:40" pos:end="385:40"><expr pos:start="385:40" pos:end="385:40"><literal type="number" pos:start="385:40" pos:end="385:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="389:9" pos:end="389:29"><expr pos:start="389:9" pos:end="389:28"><name pos:start="389:9" pos:end="389:12">data</name> <operator pos:start="389:14" pos:end="389:14">=</operator> <call pos:start="389:16" pos:end="389:28"><name pos:start="389:16" pos:end="389:23">g_malloc</name><argument_list pos:start="389:24" pos:end="389:28">(<argument pos:start="389:25" pos:end="389:27"><expr pos:start="389:25" pos:end="389:27"><name pos:start="389:25" pos:end="389:27">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="391:9" pos:end="391:50"><expr pos:start="391:9" pos:end="391:49"><call pos:start="391:9" pos:end="391:49"><name pos:start="391:9" pos:end="391:32">cpu_physical_memory_read</name><argument_list pos:start="391:33" pos:end="391:49">(<argument pos:start="391:34" pos:end="391:37"><expr pos:start="391:34" pos:end="391:37"><name pos:start="391:34" pos:end="391:37">addr</name></expr></argument>, <argument pos:start="391:40" pos:end="391:43"><expr pos:start="391:40" pos:end="391:43"><name pos:start="391:40" pos:end="391:43">data</name></expr></argument>, <argument pos:start="391:46" pos:end="391:48"><expr pos:start="391:46" pos:end="391:48"><name pos:start="391:46" pos:end="391:48">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="393:9" pos:end="393:46"><expr pos:start="393:9" pos:end="393:45"><name pos:start="393:9" pos:end="393:16">b64_data</name> <operator pos:start="393:18" pos:end="393:18">=</operator> <call pos:start="393:20" pos:end="393:45"><name pos:start="393:20" pos:end="393:34">g_base64_encode</name><argument_list pos:start="393:35" pos:end="393:45">(<argument pos:start="393:36" pos:end="393:39"><expr pos:start="393:36" pos:end="393:39"><name pos:start="393:36" pos:end="393:39">data</name></expr></argument>, <argument pos:start="393:42" pos:end="393:44"><expr pos:start="393:42" pos:end="393:44"><name pos:start="393:42" pos:end="393:44">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="395:9" pos:end="395:31"><expr pos:start="395:9" pos:end="395:30"><call pos:start="395:9" pos:end="395:30"><name pos:start="395:9" pos:end="395:25">qtest_send_prefix</name><argument_list pos:start="395:26" pos:end="395:30">(<argument pos:start="395:27" pos:end="395:29"><expr pos:start="395:27" pos:end="395:29"><name pos:start="395:27" pos:end="395:29">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="397:9" pos:end="397:46"><expr pos:start="397:9" pos:end="397:45"><call pos:start="397:9" pos:end="397:45"><name pos:start="397:9" pos:end="397:19">qtest_sendf</name><argument_list pos:start="397:20" pos:end="397:45">(<argument pos:start="397:21" pos:end="397:23"><expr pos:start="397:21" pos:end="397:23"><name pos:start="397:21" pos:end="397:23">chr</name></expr></argument>, <argument pos:start="397:26" pos:end="397:34"><expr pos:start="397:26" pos:end="397:34"><literal type="string" pos:start="397:26" pos:end="397:34">"OK %s\n"</literal></expr></argument>, <argument pos:start="397:37" pos:end="397:44"><expr pos:start="397:37" pos:end="397:44"><name pos:start="397:37" pos:end="397:44">b64_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="401:9" pos:end="401:21"><expr pos:start="401:9" pos:end="401:20"><call pos:start="401:9" pos:end="401:20"><name pos:start="401:9" pos:end="401:14">g_free</name><argument_list pos:start="401:15" pos:end="401:20">(<argument pos:start="401:16" pos:end="401:19"><expr pos:start="401:16" pos:end="401:19"><name pos:start="401:16" pos:end="401:19">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="403:9" pos:end="403:25"><expr pos:start="403:9" pos:end="403:24"><call pos:start="403:9" pos:end="403:24"><name pos:start="403:9" pos:end="403:14">g_free</name><argument_list pos:start="403:15" pos:end="403:24">(<argument pos:start="403:16" pos:end="403:23"><expr pos:start="403:16" pos:end="403:23"><name pos:start="403:16" pos:end="403:23">b64_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="405:7" pos:end="463:5">else if <condition pos:start="405:15" pos:end="405:46">(<expr pos:start="405:16" pos:end="405:45"><call pos:start="405:16" pos:end="405:40"><name pos:start="405:16" pos:end="405:21">strcmp</name><argument_list pos:start="405:22" pos:end="405:40">(<argument pos:start="405:23" pos:end="405:30"><expr pos:start="405:23" pos:end="405:30"><name pos:start="405:23" pos:end="405:30"><name pos:start="405:23" pos:end="405:27">words</name><index pos:start="405:28" pos:end="405:30">[<expr pos:start="405:29" pos:end="405:29"><literal type="number" pos:start="405:29" pos:end="405:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="405:33" pos:end="405:39"><expr pos:start="405:33" pos:end="405:39"><literal type="string" pos:start="405:33" pos:end="405:39">"write"</literal></expr></argument>)</argument_list></call> <operator pos:start="405:42" pos:end="405:43">==</operator> <literal type="number" pos:start="405:45" pos:end="405:45">0</literal></expr>)</condition> <block pos:start="405:48" pos:end="463:5">{<block_content pos:start="407:9" pos:end="461:32">

        <decl_stmt pos:start="407:9" pos:end="407:30"><decl pos:start="407:9" pos:end="407:21"><type pos:start="407:9" pos:end="407:16"><name pos:start="407:9" pos:end="407:16">uint64_t</name></type> <name pos:start="407:18" pos:end="407:21">addr</name></decl>, <decl pos:start="407:24" pos:end="407:26"><type ref="prev" pos:start="407:9" pos:end="407:16"/><name pos:start="407:24" pos:end="407:26">len</name></decl>, <decl pos:start="407:29" pos:end="407:29"><type ref="prev" pos:start="407:9" pos:end="407:16"/><name pos:start="407:29" pos:end="407:29">i</name></decl>;</decl_stmt>

        <decl_stmt pos:start="409:9" pos:end="409:22"><decl pos:start="409:9" pos:end="409:21"><type pos:start="409:9" pos:end="409:17"><name pos:start="409:9" pos:end="409:15">uint8_t</name> <modifier pos:start="409:17" pos:end="409:17">*</modifier></type><name pos:start="409:18" pos:end="409:21">data</name></decl>;</decl_stmt>

        <decl_stmt pos:start="411:9" pos:end="411:24"><decl pos:start="411:9" pos:end="411:23"><type pos:start="411:9" pos:end="411:14"><name pos:start="411:9" pos:end="411:14">size_t</name></type> <name pos:start="411:16" pos:end="411:23">data_len</name></decl>;</decl_stmt>



        <expr_stmt pos:start="415:9" pos:end="415:51"><expr pos:start="415:9" pos:end="415:50"><call pos:start="415:9" pos:end="415:50"><name pos:start="415:9" pos:end="415:16">g_assert</name><argument_list pos:start="415:17" pos:end="415:50">(<argument pos:start="415:18" pos:end="415:49"><expr pos:start="415:18" pos:end="415:49"><name pos:start="415:18" pos:end="415:25"><name pos:start="415:18" pos:end="415:22">words</name><index pos:start="415:23" pos:end="415:25">[<expr pos:start="415:24" pos:end="415:24"><literal type="number" pos:start="415:24" pos:end="415:24">1</literal></expr>]</index></name> <operator pos:start="415:27" pos:end="415:28">&amp;&amp;</operator> <name pos:start="415:30" pos:end="415:37"><name pos:start="415:30" pos:end="415:34">words</name><index pos:start="415:35" pos:end="415:37">[<expr pos:start="415:36" pos:end="415:36"><literal type="number" pos:start="415:36" pos:end="415:36">2</literal></expr>]</index></name> <operator pos:start="415:39" pos:end="415:40">&amp;&amp;</operator> <name pos:start="415:42" pos:end="415:49"><name pos:start="415:42" pos:end="415:46">words</name><index pos:start="415:47" pos:end="415:49">[<expr pos:start="415:48" pos:end="415:48"><literal type="number" pos:start="415:48" pos:end="415:48">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="417:9" pos:end="417:43"><expr pos:start="417:9" pos:end="417:42"><name pos:start="417:9" pos:end="417:12">addr</name> <operator pos:start="417:14" pos:end="417:14">=</operator> <call pos:start="417:16" pos:end="417:42"><name pos:start="417:16" pos:end="417:23">strtoull</name><argument_list pos:start="417:24" pos:end="417:42">(<argument pos:start="417:25" pos:end="417:32"><expr pos:start="417:25" pos:end="417:32"><name pos:start="417:25" pos:end="417:32"><name pos:start="417:25" pos:end="417:29">words</name><index pos:start="417:30" pos:end="417:32">[<expr pos:start="417:31" pos:end="417:31"><literal type="number" pos:start="417:31" pos:end="417:31">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="417:35" pos:end="417:38"><expr pos:start="417:35" pos:end="417:38"><name pos:start="417:35" pos:end="417:38">NULL</name></expr></argument>, <argument pos:start="417:41" pos:end="417:41"><expr pos:start="417:41" pos:end="417:41"><literal type="number" pos:start="417:41" pos:end="417:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="419:9" pos:end="419:42"><expr pos:start="419:9" pos:end="419:41"><name pos:start="419:9" pos:end="419:11">len</name> <operator pos:start="419:13" pos:end="419:13">=</operator> <call pos:start="419:15" pos:end="419:41"><name pos:start="419:15" pos:end="419:22">strtoull</name><argument_list pos:start="419:23" pos:end="419:41">(<argument pos:start="419:24" pos:end="419:31"><expr pos:start="419:24" pos:end="419:31"><name pos:start="419:24" pos:end="419:31"><name pos:start="419:24" pos:end="419:28">words</name><index pos:start="419:29" pos:end="419:31">[<expr pos:start="419:30" pos:end="419:30"><literal type="number" pos:start="419:30" pos:end="419:30">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="419:34" pos:end="419:37"><expr pos:start="419:34" pos:end="419:37"><name pos:start="419:34" pos:end="419:37">NULL</name></expr></argument>, <argument pos:start="419:40" pos:end="419:40"><expr pos:start="419:40" pos:end="419:40"><literal type="number" pos:start="419:40" pos:end="419:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="423:9" pos:end="423:36"><expr pos:start="423:9" pos:end="423:35"><name pos:start="423:9" pos:end="423:16">data_len</name> <operator pos:start="423:18" pos:end="423:18">=</operator> <call pos:start="423:20" pos:end="423:35"><name pos:start="423:20" pos:end="423:25">strlen</name><argument_list pos:start="423:26" pos:end="423:35">(<argument pos:start="423:27" pos:end="423:34"><expr pos:start="423:27" pos:end="423:34"><name pos:start="423:27" pos:end="423:34"><name pos:start="423:27" pos:end="423:31">words</name><index pos:start="423:32" pos:end="423:34">[<expr pos:start="423:33" pos:end="423:33"><literal type="number" pos:start="423:33" pos:end="423:33">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="425:9" pos:end="431:9"><if pos:start="425:9" pos:end="431:9">if <condition pos:start="425:12" pos:end="425:25">(<expr pos:start="425:13" pos:end="425:24"><name pos:start="425:13" pos:end="425:20">data_len</name> <operator pos:start="425:22" pos:end="425:22">&lt;</operator> <literal type="number" pos:start="425:24" pos:end="425:24">3</literal></expr>)</condition> <block pos:start="425:27" pos:end="431:9">{<block_content pos:start="427:13" pos:end="429:19">

            <expr_stmt pos:start="427:13" pos:end="427:59"><expr pos:start="427:13" pos:end="427:58"><call pos:start="427:13" pos:end="427:58"><name pos:start="427:13" pos:end="427:22">qtest_send</name><argument_list pos:start="427:23" pos:end="427:58">(<argument pos:start="427:24" pos:end="427:26"><expr pos:start="427:24" pos:end="427:26"><name pos:start="427:24" pos:end="427:26">chr</name></expr></argument>, <argument pos:start="427:29" pos:end="427:57"><expr pos:start="427:29" pos:end="427:57"><literal type="string" pos:start="427:29" pos:end="427:57">"ERR invalid argument size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="429:13" pos:end="429:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="435:9" pos:end="435:29"><expr pos:start="435:9" pos:end="435:28"><name pos:start="435:9" pos:end="435:12">data</name> <operator pos:start="435:14" pos:end="435:14">=</operator> <call pos:start="435:16" pos:end="435:28"><name pos:start="435:16" pos:end="435:23">g_malloc</name><argument_list pos:start="435:24" pos:end="435:28">(<argument pos:start="435:25" pos:end="435:27"><expr pos:start="435:25" pos:end="435:27"><name pos:start="435:25" pos:end="435:27">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="437:9" pos:end="451:9">for <control pos:start="437:13" pos:end="437:33">(<init pos:start="437:14" pos:end="437:19"><expr pos:start="437:14" pos:end="437:18"><name pos:start="437:14" pos:end="437:14">i</name> <operator pos:start="437:16" pos:end="437:16">=</operator> <literal type="number" pos:start="437:18" pos:end="437:18">0</literal></expr>;</init> <condition pos:start="437:21" pos:end="437:28"><expr pos:start="437:21" pos:end="437:27"><name pos:start="437:21" pos:end="437:21">i</name> <operator pos:start="437:23" pos:end="437:23">&lt;</operator> <name pos:start="437:25" pos:end="437:27">len</name></expr>;</condition> <incr pos:start="437:30" pos:end="437:32"><expr pos:start="437:30" pos:end="437:32"><name pos:start="437:30" pos:end="437:30">i</name><operator pos:start="437:31" pos:end="437:32">++</operator></expr></incr>)</control> <block pos:start="437:35" pos:end="451:9">{<block_content pos:start="439:13" pos:end="449:13">

            <if_stmt pos:start="439:13" pos:end="449:13"><if pos:start="439:13" pos:end="445:13">if <condition pos:start="439:16" pos:end="439:40">(<expr pos:start="439:17" pos:end="439:39"><operator pos:start="439:17" pos:end="439:17">(</operator><name pos:start="439:18" pos:end="439:18">i</name> <operator pos:start="439:20" pos:end="439:20">*</operator> <literal type="number" pos:start="439:22" pos:end="439:24">2</literal> <operator pos:start="439:24" pos:end="439:24">+</operator> <literal type="number" pos:start="439:26" pos:end="439:26">4</literal><operator pos:start="439:27" pos:end="439:27">)</operator> <operator pos:start="439:29" pos:end="439:30">&lt;=</operator> <name pos:start="439:32" pos:end="439:39">data_len</name></expr>)</condition> <block pos:start="439:42" pos:end="445:13">{<block_content pos:start="441:17" pos:end="443:56">

                <expr_stmt pos:start="441:17" pos:end="441:60"><expr pos:start="441:17" pos:end="441:59"><name pos:start="441:17" pos:end="441:23"><name pos:start="441:17" pos:end="441:20">data</name><index pos:start="441:21" pos:end="441:23">[<expr pos:start="441:22" pos:end="441:22"><name pos:start="441:22" pos:end="441:22">i</name></expr>]</index></name> <operator pos:start="441:25" pos:end="441:25">=</operator> <call pos:start="441:27" pos:end="441:54"><name pos:start="441:27" pos:end="441:33">hex2nib</name><argument_list pos:start="441:34" pos:end="441:54">(<argument pos:start="441:35" pos:end="441:53"><expr pos:start="441:35" pos:end="441:53"><name pos:start="441:35" pos:end="441:53"><name pos:start="441:35" pos:end="441:39">words</name><index pos:start="441:40" pos:end="441:42">[<expr pos:start="441:41" pos:end="441:41"><literal type="number" pos:start="441:41" pos:end="441:41">3</literal></expr>]</index><index pos:start="441:43" pos:end="441:53">[<expr pos:start="441:44" pos:end="441:52"><name pos:start="441:44" pos:end="441:44">i</name> <operator pos:start="441:46" pos:end="441:46">*</operator> <literal type="number" pos:start="441:48" pos:end="441:50">2</literal> <operator pos:start="441:50" pos:end="441:50">+</operator> <literal type="number" pos:start="441:52" pos:end="441:52">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="441:56" pos:end="441:57">&lt;&lt;</operator> <literal type="number" pos:start="441:59" pos:end="441:59">4</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="443:17" pos:end="443:56"><expr pos:start="443:17" pos:end="443:55"><name pos:start="443:17" pos:end="443:23"><name pos:start="443:17" pos:end="443:20">data</name><index pos:start="443:21" pos:end="443:23">[<expr pos:start="443:22" pos:end="443:22"><name pos:start="443:22" pos:end="443:22">i</name></expr>]</index></name> <operator pos:start="443:25" pos:end="443:26">|=</operator> <call pos:start="443:28" pos:end="443:55"><name pos:start="443:28" pos:end="443:34">hex2nib</name><argument_list pos:start="443:35" pos:end="443:55">(<argument pos:start="443:36" pos:end="443:54"><expr pos:start="443:36" pos:end="443:54"><name pos:start="443:36" pos:end="443:54"><name pos:start="443:36" pos:end="443:40">words</name><index pos:start="443:41" pos:end="443:43">[<expr pos:start="443:42" pos:end="443:42"><literal type="number" pos:start="443:42" pos:end="443:42">3</literal></expr>]</index><index pos:start="443:44" pos:end="443:54">[<expr pos:start="443:45" pos:end="443:53"><name pos:start="443:45" pos:end="443:45">i</name> <operator pos:start="443:47" pos:end="443:47">*</operator> <literal type="number" pos:start="443:49" pos:end="443:51">2</literal> <operator pos:start="443:51" pos:end="443:51">+</operator> <literal type="number" pos:start="443:53" pos:end="443:53">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="445:15" pos:end="449:13">else <block pos:start="445:20" pos:end="449:13">{<block_content pos:start="447:17" pos:end="447:28">

                <expr_stmt pos:start="447:17" pos:end="447:28"><expr pos:start="447:17" pos:end="447:27"><name pos:start="447:17" pos:end="447:23"><name pos:start="447:17" pos:end="447:20">data</name><index pos:start="447:21" pos:end="447:23">[<expr pos:start="447:22" pos:end="447:22"><name pos:start="447:22" pos:end="447:22">i</name></expr>]</index></name> <operator pos:start="447:25" pos:end="447:25">=</operator> <literal type="number" pos:start="447:27" pos:end="447:27">0</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="453:9" pos:end="453:51"><expr pos:start="453:9" pos:end="453:50"><call pos:start="453:9" pos:end="453:50"><name pos:start="453:9" pos:end="453:33">cpu_physical_memory_write</name><argument_list pos:start="453:34" pos:end="453:50">(<argument pos:start="453:35" pos:end="453:38"><expr pos:start="453:35" pos:end="453:38"><name pos:start="453:35" pos:end="453:38">addr</name></expr></argument>, <argument pos:start="453:41" pos:end="453:44"><expr pos:start="453:41" pos:end="453:44"><name pos:start="453:41" pos:end="453:44">data</name></expr></argument>, <argument pos:start="453:47" pos:end="453:49"><expr pos:start="453:47" pos:end="453:49"><name pos:start="453:47" pos:end="453:49">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="455:9" pos:end="455:21"><expr pos:start="455:9" pos:end="455:20"><call pos:start="455:9" pos:end="455:20"><name pos:start="455:9" pos:end="455:14">g_free</name><argument_list pos:start="455:15" pos:end="455:20">(<argument pos:start="455:16" pos:end="455:19"><expr pos:start="455:16" pos:end="455:19"><name pos:start="455:16" pos:end="455:19">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="459:9" pos:end="459:31"><expr pos:start="459:9" pos:end="459:30"><call pos:start="459:9" pos:end="459:30"><name pos:start="459:9" pos:end="459:25">qtest_send_prefix</name><argument_list pos:start="459:26" pos:end="459:30">(<argument pos:start="459:27" pos:end="459:29"><expr pos:start="459:27" pos:end="459:29"><name pos:start="459:27" pos:end="459:29">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="461:9" pos:end="461:32"><expr pos:start="461:9" pos:end="461:31"><call pos:start="461:9" pos:end="461:31"><name pos:start="461:9" pos:end="461:18">qtest_send</name><argument_list pos:start="461:19" pos:end="461:31">(<argument pos:start="461:20" pos:end="461:22"><expr pos:start="461:20" pos:end="461:22"><name pos:start="461:20" pos:end="461:22">chr</name></expr></argument>, <argument pos:start="461:25" pos:end="461:30"><expr pos:start="461:25" pos:end="461:30"><literal type="string" pos:start="461:25" pos:end="461:30">"OK\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="463:7" pos:end="501:5">else if <condition pos:start="463:15" pos:end="463:47">(<expr pos:start="463:16" pos:end="463:46"><call pos:start="463:16" pos:end="463:41"><name pos:start="463:16" pos:end="463:21">strcmp</name><argument_list pos:start="463:22" pos:end="463:41">(<argument pos:start="463:23" pos:end="463:30"><expr pos:start="463:23" pos:end="463:30"><name pos:start="463:23" pos:end="463:30"><name pos:start="463:23" pos:end="463:27">words</name><index pos:start="463:28" pos:end="463:30">[<expr pos:start="463:29" pos:end="463:29"><literal type="number" pos:start="463:29" pos:end="463:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="463:33" pos:end="463:40"><expr pos:start="463:33" pos:end="463:40"><literal type="string" pos:start="463:33" pos:end="463:40">"memset"</literal></expr></argument>)</argument_list></call> <operator pos:start="463:43" pos:end="463:44">==</operator> <literal type="number" pos:start="463:46" pos:end="463:46">0</literal></expr>)</condition> <block pos:start="463:49" pos:end="501:5">{<block_content pos:start="465:9" pos:end="499:32">

        <decl_stmt pos:start="465:9" pos:end="465:27"><decl pos:start="465:9" pos:end="465:21"><type pos:start="465:9" pos:end="465:16"><name pos:start="465:9" pos:end="465:16">uint64_t</name></type> <name pos:start="465:18" pos:end="465:21">addr</name></decl>, <decl pos:start="465:24" pos:end="465:26"><type ref="prev" pos:start="465:9" pos:end="465:16"/><name pos:start="465:24" pos:end="465:26">len</name></decl>;</decl_stmt>

        <decl_stmt pos:start="467:9" pos:end="467:22"><decl pos:start="467:9" pos:end="467:21"><type pos:start="467:9" pos:end="467:17"><name pos:start="467:9" pos:end="467:15">uint8_t</name> <modifier pos:start="467:17" pos:end="467:17">*</modifier></type><name pos:start="467:18" pos:end="467:21">data</name></decl>;</decl_stmt>

        <decl_stmt pos:start="469:9" pos:end="469:24"><decl pos:start="469:9" pos:end="469:23"><type pos:start="469:9" pos:end="469:15"><name pos:start="469:9" pos:end="469:15">uint8_t</name></type> <name pos:start="469:17" pos:end="469:23">pattern</name></decl>;</decl_stmt>



        <expr_stmt pos:start="473:9" pos:end="473:51"><expr pos:start="473:9" pos:end="473:50"><call pos:start="473:9" pos:end="473:50"><name pos:start="473:9" pos:end="473:16">g_assert</name><argument_list pos:start="473:17" pos:end="473:50">(<argument pos:start="473:18" pos:end="473:49"><expr pos:start="473:18" pos:end="473:49"><name pos:start="473:18" pos:end="473:25"><name pos:start="473:18" pos:end="473:22">words</name><index pos:start="473:23" pos:end="473:25">[<expr pos:start="473:24" pos:end="473:24"><literal type="number" pos:start="473:24" pos:end="473:24">1</literal></expr>]</index></name> <operator pos:start="473:27" pos:end="473:28">&amp;&amp;</operator> <name pos:start="473:30" pos:end="473:37"><name pos:start="473:30" pos:end="473:34">words</name><index pos:start="473:35" pos:end="473:37">[<expr pos:start="473:36" pos:end="473:36"><literal type="number" pos:start="473:36" pos:end="473:36">2</literal></expr>]</index></name> <operator pos:start="473:39" pos:end="473:40">&amp;&amp;</operator> <name pos:start="473:42" pos:end="473:49"><name pos:start="473:42" pos:end="473:46">words</name><index pos:start="473:47" pos:end="473:49">[<expr pos:start="473:48" pos:end="473:48"><literal type="number" pos:start="473:48" pos:end="473:48">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="475:9" pos:end="475:43"><expr pos:start="475:9" pos:end="475:42"><name pos:start="475:9" pos:end="475:12">addr</name> <operator pos:start="475:14" pos:end="475:14">=</operator> <call pos:start="475:16" pos:end="475:42"><name pos:start="475:16" pos:end="475:23">strtoull</name><argument_list pos:start="475:24" pos:end="475:42">(<argument pos:start="475:25" pos:end="475:32"><expr pos:start="475:25" pos:end="475:32"><name pos:start="475:25" pos:end="475:32"><name pos:start="475:25" pos:end="475:29">words</name><index pos:start="475:30" pos:end="475:32">[<expr pos:start="475:31" pos:end="475:31"><literal type="number" pos:start="475:31" pos:end="475:31">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="475:35" pos:end="475:38"><expr pos:start="475:35" pos:end="475:38"><name pos:start="475:35" pos:end="475:38">NULL</name></expr></argument>, <argument pos:start="475:41" pos:end="475:41"><expr pos:start="475:41" pos:end="475:41"><literal type="number" pos:start="475:41" pos:end="475:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="477:9" pos:end="477:42"><expr pos:start="477:9" pos:end="477:41"><name pos:start="477:9" pos:end="477:11">len</name> <operator pos:start="477:13" pos:end="477:13">=</operator> <call pos:start="477:15" pos:end="477:41"><name pos:start="477:15" pos:end="477:22">strtoull</name><argument_list pos:start="477:23" pos:end="477:41">(<argument pos:start="477:24" pos:end="477:31"><expr pos:start="477:24" pos:end="477:31"><name pos:start="477:24" pos:end="477:31"><name pos:start="477:24" pos:end="477:28">words</name><index pos:start="477:29" pos:end="477:31">[<expr pos:start="477:30" pos:end="477:30"><literal type="number" pos:start="477:30" pos:end="477:30">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="477:34" pos:end="477:37"><expr pos:start="477:34" pos:end="477:37"><name pos:start="477:34" pos:end="477:37">NULL</name></expr></argument>, <argument pos:start="477:40" pos:end="477:40"><expr pos:start="477:40" pos:end="477:40"><literal type="number" pos:start="477:40" pos:end="477:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="479:9" pos:end="479:46"><expr pos:start="479:9" pos:end="479:45"><name pos:start="479:9" pos:end="479:15">pattern</name> <operator pos:start="479:17" pos:end="479:17">=</operator> <call pos:start="479:19" pos:end="479:45"><name pos:start="479:19" pos:end="479:26">strtoull</name><argument_list pos:start="479:27" pos:end="479:45">(<argument pos:start="479:28" pos:end="479:35"><expr pos:start="479:28" pos:end="479:35"><name pos:start="479:28" pos:end="479:35"><name pos:start="479:28" pos:end="479:32">words</name><index pos:start="479:33" pos:end="479:35">[<expr pos:start="479:34" pos:end="479:34"><literal type="number" pos:start="479:34" pos:end="479:34">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="479:38" pos:end="479:41"><expr pos:start="479:38" pos:end="479:41"><name pos:start="479:38" pos:end="479:41">NULL</name></expr></argument>, <argument pos:start="479:44" pos:end="479:44"><expr pos:start="479:44" pos:end="479:44"><literal type="number" pos:start="479:44" pos:end="479:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="483:9" pos:end="493:9"><if pos:start="483:9" pos:end="493:9">if <condition pos:start="483:12" pos:end="483:16">(<expr pos:start="483:13" pos:end="483:15"><name pos:start="483:13" pos:end="483:15">len</name></expr>)</condition> <block pos:start="483:18" pos:end="493:9">{<block_content pos:start="485:13" pos:end="491:25">

            <expr_stmt pos:start="485:13" pos:end="485:33"><expr pos:start="485:13" pos:end="485:32"><name pos:start="485:13" pos:end="485:16">data</name> <operator pos:start="485:18" pos:end="485:18">=</operator> <call pos:start="485:20" pos:end="485:32"><name pos:start="485:20" pos:end="485:27">g_malloc</name><argument_list pos:start="485:28" pos:end="485:32">(<argument pos:start="485:29" pos:end="485:31"><expr pos:start="485:29" pos:end="485:31"><name pos:start="485:29" pos:end="485:31">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="487:13" pos:end="487:39"><expr pos:start="487:13" pos:end="487:38"><call pos:start="487:13" pos:end="487:38"><name pos:start="487:13" pos:end="487:18">memset</name><argument_list pos:start="487:19" pos:end="487:38">(<argument pos:start="487:20" pos:end="487:23"><expr pos:start="487:20" pos:end="487:23"><name pos:start="487:20" pos:end="487:23">data</name></expr></argument>, <argument pos:start="487:26" pos:end="487:32"><expr pos:start="487:26" pos:end="487:32"><name pos:start="487:26" pos:end="487:32">pattern</name></expr></argument>, <argument pos:start="487:35" pos:end="487:37"><expr pos:start="487:35" pos:end="487:37"><name pos:start="487:35" pos:end="487:37">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="489:13" pos:end="489:55"><expr pos:start="489:13" pos:end="489:54"><call pos:start="489:13" pos:end="489:54"><name pos:start="489:13" pos:end="489:37">cpu_physical_memory_write</name><argument_list pos:start="489:38" pos:end="489:54">(<argument pos:start="489:39" pos:end="489:42"><expr pos:start="489:39" pos:end="489:42"><name pos:start="489:39" pos:end="489:42">addr</name></expr></argument>, <argument pos:start="489:45" pos:end="489:48"><expr pos:start="489:45" pos:end="489:48"><name pos:start="489:45" pos:end="489:48">data</name></expr></argument>, <argument pos:start="489:51" pos:end="489:53"><expr pos:start="489:51" pos:end="489:53"><name pos:start="489:51" pos:end="489:53">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="491:13" pos:end="491:25"><expr pos:start="491:13" pos:end="491:24"><call pos:start="491:13" pos:end="491:24"><name pos:start="491:13" pos:end="491:18">g_free</name><argument_list pos:start="491:19" pos:end="491:24">(<argument pos:start="491:20" pos:end="491:23"><expr pos:start="491:20" pos:end="491:23"><name pos:start="491:20" pos:end="491:23">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="497:9" pos:end="497:31"><expr pos:start="497:9" pos:end="497:30"><call pos:start="497:9" pos:end="497:30"><name pos:start="497:9" pos:end="497:25">qtest_send_prefix</name><argument_list pos:start="497:26" pos:end="497:30">(<argument pos:start="497:27" pos:end="497:29"><expr pos:start="497:27" pos:end="497:29"><name pos:start="497:27" pos:end="497:29">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="499:9" pos:end="499:32"><expr pos:start="499:9" pos:end="499:31"><call pos:start="499:9" pos:end="499:31"><name pos:start="499:9" pos:end="499:18">qtest_send</name><argument_list pos:start="499:19" pos:end="499:31">(<argument pos:start="499:20" pos:end="499:22"><expr pos:start="499:20" pos:end="499:22"><name pos:start="499:20" pos:end="499:22">chr</name></expr></argument>, <argument pos:start="499:25" pos:end="499:30"><expr pos:start="499:25" pos:end="499:30"><literal type="string" pos:start="499:25" pos:end="499:30">"OK\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if>  <if type="elseif" pos:start="501:8" pos:end="557:5">else if <condition pos:start="501:16" pos:end="501:50">(<expr pos:start="501:17" pos:end="501:49"><call pos:start="501:17" pos:end="501:44"><name pos:start="501:17" pos:end="501:22">strcmp</name><argument_list pos:start="501:23" pos:end="501:44">(<argument pos:start="501:24" pos:end="501:31"><expr pos:start="501:24" pos:end="501:31"><name pos:start="501:24" pos:end="501:31"><name pos:start="501:24" pos:end="501:28">words</name><index pos:start="501:29" pos:end="501:31">[<expr pos:start="501:30" pos:end="501:30"><literal type="number" pos:start="501:30" pos:end="501:30">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="501:34" pos:end="501:43"><expr pos:start="501:34" pos:end="501:43"><literal type="string" pos:start="501:34" pos:end="501:43">"b64write"</literal></expr></argument>)</argument_list></call> <operator pos:start="501:46" pos:end="501:47">==</operator> <literal type="number" pos:start="501:49" pos:end="501:49">0</literal></expr>)</condition> <block pos:start="501:52" pos:end="557:5">{<block_content pos:start="503:9" pos:end="555:32">

        <decl_stmt pos:start="503:9" pos:end="503:27"><decl pos:start="503:9" pos:end="503:21"><type pos:start="503:9" pos:end="503:16"><name pos:start="503:9" pos:end="503:16">uint64_t</name></type> <name pos:start="503:18" pos:end="503:21">addr</name></decl>, <decl pos:start="503:24" pos:end="503:26"><type ref="prev" pos:start="503:9" pos:end="503:16"/><name pos:start="503:24" pos:end="503:26">len</name></decl>;</decl_stmt>

        <decl_stmt pos:start="505:9" pos:end="505:22"><decl pos:start="505:9" pos:end="505:21"><type pos:start="505:9" pos:end="505:17"><name pos:start="505:9" pos:end="505:15">uint8_t</name> <modifier pos:start="505:17" pos:end="505:17">*</modifier></type><name pos:start="505:18" pos:end="505:21">data</name></decl>;</decl_stmt>

        <decl_stmt pos:start="507:9" pos:end="507:24"><decl pos:start="507:9" pos:end="507:23"><type pos:start="507:9" pos:end="507:14"><name pos:start="507:9" pos:end="507:14">size_t</name></type> <name pos:start="507:16" pos:end="507:23">data_len</name></decl>;</decl_stmt>

        <decl_stmt pos:start="509:9" pos:end="509:22"><decl pos:start="509:9" pos:end="509:21"><type pos:start="509:9" pos:end="509:13"><name pos:start="509:9" pos:end="509:13">gsize</name></type> <name pos:start="509:15" pos:end="509:21">out_len</name></decl>;</decl_stmt>



        <expr_stmt pos:start="513:9" pos:end="513:51"><expr pos:start="513:9" pos:end="513:50"><call pos:start="513:9" pos:end="513:50"><name pos:start="513:9" pos:end="513:16">g_assert</name><argument_list pos:start="513:17" pos:end="513:50">(<argument pos:start="513:18" pos:end="513:49"><expr pos:start="513:18" pos:end="513:49"><name pos:start="513:18" pos:end="513:25"><name pos:start="513:18" pos:end="513:22">words</name><index pos:start="513:23" pos:end="513:25">[<expr pos:start="513:24" pos:end="513:24"><literal type="number" pos:start="513:24" pos:end="513:24">1</literal></expr>]</index></name> <operator pos:start="513:27" pos:end="513:28">&amp;&amp;</operator> <name pos:start="513:30" pos:end="513:37"><name pos:start="513:30" pos:end="513:34">words</name><index pos:start="513:35" pos:end="513:37">[<expr pos:start="513:36" pos:end="513:36"><literal type="number" pos:start="513:36" pos:end="513:36">2</literal></expr>]</index></name> <operator pos:start="513:39" pos:end="513:40">&amp;&amp;</operator> <name pos:start="513:42" pos:end="513:49"><name pos:start="513:42" pos:end="513:46">words</name><index pos:start="513:47" pos:end="513:49">[<expr pos:start="513:48" pos:end="513:48"><literal type="number" pos:start="513:48" pos:end="513:48">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="515:9" pos:end="515:43"><expr pos:start="515:9" pos:end="515:42"><name pos:start="515:9" pos:end="515:12">addr</name> <operator pos:start="515:14" pos:end="515:14">=</operator> <call pos:start="515:16" pos:end="515:42"><name pos:start="515:16" pos:end="515:23">strtoull</name><argument_list pos:start="515:24" pos:end="515:42">(<argument pos:start="515:25" pos:end="515:32"><expr pos:start="515:25" pos:end="515:32"><name pos:start="515:25" pos:end="515:32"><name pos:start="515:25" pos:end="515:29">words</name><index pos:start="515:30" pos:end="515:32">[<expr pos:start="515:31" pos:end="515:31"><literal type="number" pos:start="515:31" pos:end="515:31">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="515:35" pos:end="515:38"><expr pos:start="515:35" pos:end="515:38"><name pos:start="515:35" pos:end="515:38">NULL</name></expr></argument>, <argument pos:start="515:41" pos:end="515:41"><expr pos:start="515:41" pos:end="515:41"><literal type="number" pos:start="515:41" pos:end="515:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="517:9" pos:end="517:42"><expr pos:start="517:9" pos:end="517:41"><name pos:start="517:9" pos:end="517:11">len</name> <operator pos:start="517:13" pos:end="517:13">=</operator> <call pos:start="517:15" pos:end="517:41"><name pos:start="517:15" pos:end="517:22">strtoull</name><argument_list pos:start="517:23" pos:end="517:41">(<argument pos:start="517:24" pos:end="517:31"><expr pos:start="517:24" pos:end="517:31"><name pos:start="517:24" pos:end="517:31"><name pos:start="517:24" pos:end="517:28">words</name><index pos:start="517:29" pos:end="517:31">[<expr pos:start="517:30" pos:end="517:30"><literal type="number" pos:start="517:30" pos:end="517:30">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="517:34" pos:end="517:37"><expr pos:start="517:34" pos:end="517:37"><name pos:start="517:34" pos:end="517:37">NULL</name></expr></argument>, <argument pos:start="517:40" pos:end="517:40"><expr pos:start="517:40" pos:end="517:40"><literal type="number" pos:start="517:40" pos:end="517:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="521:9" pos:end="521:36"><expr pos:start="521:9" pos:end="521:35"><name pos:start="521:9" pos:end="521:16">data_len</name> <operator pos:start="521:18" pos:end="521:18">=</operator> <call pos:start="521:20" pos:end="521:35"><name pos:start="521:20" pos:end="521:25">strlen</name><argument_list pos:start="521:26" pos:end="521:35">(<argument pos:start="521:27" pos:end="521:34"><expr pos:start="521:27" pos:end="521:34"><name pos:start="521:27" pos:end="521:34"><name pos:start="521:27" pos:end="521:31">words</name><index pos:start="521:32" pos:end="521:34">[<expr pos:start="521:33" pos:end="521:33"><literal type="number" pos:start="521:33" pos:end="521:33">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="523:9" pos:end="529:9"><if pos:start="523:9" pos:end="529:9">if <condition pos:start="523:12" pos:end="523:25">(<expr pos:start="523:13" pos:end="523:24"><name pos:start="523:13" pos:end="523:20">data_len</name> <operator pos:start="523:22" pos:end="523:22">&lt;</operator> <literal type="number" pos:start="523:24" pos:end="523:24">3</literal></expr>)</condition> <block pos:start="523:27" pos:end="529:9">{<block_content pos:start="525:13" pos:end="527:19">

            <expr_stmt pos:start="525:13" pos:end="525:59"><expr pos:start="525:13" pos:end="525:58"><call pos:start="525:13" pos:end="525:58"><name pos:start="525:13" pos:end="525:22">qtest_send</name><argument_list pos:start="525:23" pos:end="525:58">(<argument pos:start="525:24" pos:end="525:26"><expr pos:start="525:24" pos:end="525:26"><name pos:start="525:24" pos:end="525:26">chr</name></expr></argument>, <argument pos:start="525:29" pos:end="525:57"><expr pos:start="525:29" pos:end="525:57"><literal type="string" pos:start="525:29" pos:end="525:57">"ERR invalid argument size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="527:13" pos:end="527:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="533:9" pos:end="533:59"><expr pos:start="533:9" pos:end="533:58"><name pos:start="533:9" pos:end="533:12">data</name> <operator pos:start="533:14" pos:end="533:14">=</operator> <call pos:start="533:16" pos:end="533:58"><name pos:start="533:16" pos:end="533:38">g_base64_decode_inplace</name><argument_list pos:start="533:39" pos:end="533:58">(<argument pos:start="533:40" pos:end="533:47"><expr pos:start="533:40" pos:end="533:47"><name pos:start="533:40" pos:end="533:47"><name pos:start="533:40" pos:end="533:44">words</name><index pos:start="533:45" pos:end="533:47">[<expr pos:start="533:46" pos:end="533:46"><literal type="number" pos:start="533:46" pos:end="533:46">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="533:50" pos:end="533:57"><expr pos:start="533:50" pos:end="533:57"><operator pos:start="533:50" pos:end="533:50">&amp;</operator><name pos:start="533:51" pos:end="533:57">out_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="535:9" pos:end="545:9"><if pos:start="535:9" pos:end="545:9">if <condition pos:start="535:12" pos:end="535:27">(<expr pos:start="535:13" pos:end="535:26"><name pos:start="535:13" pos:end="535:19">out_len</name> <operator pos:start="535:21" pos:end="535:22">!=</operator> <name pos:start="535:24" pos:end="535:26">len</name></expr>)</condition> <block pos:start="535:29" pos:end="545:9">{<block_content pos:start="537:13" pos:end="543:40">

            <expr_stmt pos:start="537:13" pos:end="541:41"><expr pos:start="537:13" pos:end="541:40"><call pos:start="537:13" pos:end="541:40"><name pos:start="537:13" pos:end="537:26">qtest_log_send</name><argument_list pos:start="537:27" pos:end="541:40">(<argument pos:start="537:28" pos:end="539:41"><expr pos:start="537:28" pos:end="539:41"><literal type="string" pos:start="537:28" pos:end="537:67">"b64write: data length mismatch (told %"</literal><name pos:start="537:68" pos:end="537:73">PRIu64</name><literal type="string" pos:start="537:74" pos:end="537:77">", "</literal>

                           <literal type="string" pos:start="539:28" pos:end="539:41">"found %zu)\n"</literal></expr></argument>,

                           <argument pos:start="541:28" pos:end="541:30"><expr pos:start="541:28" pos:end="541:30"><name pos:start="541:28" pos:end="541:30">len</name></expr></argument>, <argument pos:start="541:33" pos:end="541:39"><expr pos:start="541:33" pos:end="541:39"><name pos:start="541:33" pos:end="541:39">out_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="543:13" pos:end="543:40"><expr pos:start="543:13" pos:end="543:39"><name pos:start="543:13" pos:end="543:19">out_len</name> <operator pos:start="543:21" pos:end="543:21">=</operator> <call pos:start="543:23" pos:end="543:39"><name pos:start="543:23" pos:end="543:25">MIN</name><argument_list pos:start="543:26" pos:end="543:39">(<argument pos:start="543:27" pos:end="543:33"><expr pos:start="543:27" pos:end="543:33"><name pos:start="543:27" pos:end="543:33">out_len</name></expr></argument>, <argument pos:start="543:36" pos:end="543:38"><expr pos:start="543:36" pos:end="543:38"><name pos:start="543:36" pos:end="543:38">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="549:9" pos:end="549:55"><expr pos:start="549:9" pos:end="549:54"><call pos:start="549:9" pos:end="549:54"><name pos:start="549:9" pos:end="549:33">cpu_physical_memory_write</name><argument_list pos:start="549:34" pos:end="549:54">(<argument pos:start="549:35" pos:end="549:38"><expr pos:start="549:35" pos:end="549:38"><name pos:start="549:35" pos:end="549:38">addr</name></expr></argument>, <argument pos:start="549:41" pos:end="549:44"><expr pos:start="549:41" pos:end="549:44"><name pos:start="549:41" pos:end="549:44">data</name></expr></argument>, <argument pos:start="549:47" pos:end="549:53"><expr pos:start="549:47" pos:end="549:53"><name pos:start="549:47" pos:end="549:53">out_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="553:9" pos:end="553:31"><expr pos:start="553:9" pos:end="553:30"><call pos:start="553:9" pos:end="553:30"><name pos:start="553:9" pos:end="553:25">qtest_send_prefix</name><argument_list pos:start="553:26" pos:end="553:30">(<argument pos:start="553:27" pos:end="553:29"><expr pos:start="553:27" pos:end="553:29"><name pos:start="553:27" pos:end="553:29">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="555:9" pos:end="555:32"><expr pos:start="555:9" pos:end="555:31"><call pos:start="555:9" pos:end="555:31"><name pos:start="555:9" pos:end="555:18">qtest_send</name><argument_list pos:start="555:19" pos:end="555:31">(<argument pos:start="555:20" pos:end="555:22"><expr pos:start="555:20" pos:end="555:22"><name pos:start="555:20" pos:end="555:22">chr</name></expr></argument>, <argument pos:start="555:25" pos:end="555:30"><expr pos:start="555:25" pos:end="555:30"><literal type="string" pos:start="555:25" pos:end="555:30">"OK\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="557:7" pos:end="581:5">else if <condition pos:start="557:15" pos:end="557:70">(<expr pos:start="557:16" pos:end="557:69"><call pos:start="557:16" pos:end="557:30"><name pos:start="557:16" pos:end="557:28">qtest_enabled</name><argument_list pos:start="557:29" pos:end="557:30">()</argument_list></call> <operator pos:start="557:32" pos:end="557:33">&amp;&amp;</operator> <call pos:start="557:35" pos:end="557:64"><name pos:start="557:35" pos:end="557:40">strcmp</name><argument_list pos:start="557:41" pos:end="557:64">(<argument pos:start="557:42" pos:end="557:49"><expr pos:start="557:42" pos:end="557:49"><name pos:start="557:42" pos:end="557:49"><name pos:start="557:42" pos:end="557:46">words</name><index pos:start="557:47" pos:end="557:49">[<expr pos:start="557:48" pos:end="557:48"><literal type="number" pos:start="557:48" pos:end="557:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="557:52" pos:end="557:63"><expr pos:start="557:52" pos:end="557:63"><literal type="string" pos:start="557:52" pos:end="557:63">"clock_step"</literal></expr></argument>)</argument_list></call> <operator pos:start="557:66" pos:end="557:67">==</operator> <literal type="number" pos:start="557:69" pos:end="557:69">0</literal></expr>)</condition> <block pos:start="557:72" pos:end="581:5">{<block_content pos:start="559:9" pos:end="579:68">

        <decl_stmt pos:start="559:9" pos:end="559:19"><decl pos:start="559:9" pos:end="559:18"><type pos:start="559:9" pos:end="559:15"><name pos:start="559:9" pos:end="559:15">int64_t</name></type> <name pos:start="559:17" pos:end="559:18">ns</name></decl>;</decl_stmt>



        <if_stmt pos:start="563:9" pos:end="571:9"><if pos:start="563:9" pos:end="567:9">if <condition pos:start="563:12" pos:end="563:21">(<expr pos:start="563:13" pos:end="563:20"><name pos:start="563:13" pos:end="563:20"><name pos:start="563:13" pos:end="563:17">words</name><index pos:start="563:18" pos:end="563:20">[<expr pos:start="563:19" pos:end="563:19"><literal type="number" pos:start="563:19" pos:end="563:19">1</literal></expr>]</index></name></expr>)</condition> <block pos:start="563:23" pos:end="567:9">{<block_content pos:start="565:13" pos:end="565:44">

            <expr_stmt pos:start="565:13" pos:end="565:44"><expr pos:start="565:13" pos:end="565:43"><name pos:start="565:13" pos:end="565:14">ns</name> <operator pos:start="565:16" pos:end="565:16">=</operator> <call pos:start="565:18" pos:end="565:43"><name pos:start="565:18" pos:end="565:24">strtoll</name><argument_list pos:start="565:25" pos:end="565:43">(<argument pos:start="565:26" pos:end="565:33"><expr pos:start="565:26" pos:end="565:33"><name pos:start="565:26" pos:end="565:33"><name pos:start="565:26" pos:end="565:30">words</name><index pos:start="565:31" pos:end="565:33">[<expr pos:start="565:32" pos:end="565:32"><literal type="number" pos:start="565:32" pos:end="565:32">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="565:36" pos:end="565:39"><expr pos:start="565:36" pos:end="565:39"><name pos:start="565:36" pos:end="565:39">NULL</name></expr></argument>, <argument pos:start="565:42" pos:end="565:42"><expr pos:start="565:42" pos:end="565:42"><literal type="number" pos:start="565:42" pos:end="565:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="567:11" pos:end="571:9">else <block pos:start="567:16" pos:end="571:9">{<block_content pos:start="569:13" pos:end="569:64">

            <expr_stmt pos:start="569:13" pos:end="569:64"><expr pos:start="569:13" pos:end="569:63"><name pos:start="569:13" pos:end="569:14">ns</name> <operator pos:start="569:16" pos:end="569:16">=</operator> <call pos:start="569:18" pos:end="569:63"><name pos:start="569:18" pos:end="569:43">qemu_clock_deadline_ns_all</name><argument_list pos:start="569:44" pos:end="569:63">(<argument pos:start="569:45" pos:end="569:62"><expr pos:start="569:45" pos:end="569:62"><name pos:start="569:45" pos:end="569:62">QEMU_CLOCK_VIRTUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="573:9" pos:end="573:69"><expr pos:start="573:9" pos:end="573:68"><call pos:start="573:9" pos:end="573:68"><name pos:start="573:9" pos:end="573:24">qtest_clock_warp</name><argument_list pos:start="573:25" pos:end="573:68">(<argument pos:start="573:26" pos:end="573:67"><expr pos:start="573:26" pos:end="573:67"><call pos:start="573:26" pos:end="573:62"><name pos:start="573:26" pos:end="573:42">qemu_clock_get_ns</name><argument_list pos:start="573:43" pos:end="573:62">(<argument pos:start="573:44" pos:end="573:61"><expr pos:start="573:44" pos:end="573:61"><name pos:start="573:44" pos:end="573:61">QEMU_CLOCK_VIRTUAL</name></expr></argument>)</argument_list></call> <operator pos:start="573:64" pos:end="573:64">+</operator> <name pos:start="573:66" pos:end="573:67">ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="575:9" pos:end="575:31"><expr pos:start="575:9" pos:end="575:30"><call pos:start="575:9" pos:end="575:30"><name pos:start="575:9" pos:end="575:25">qtest_send_prefix</name><argument_list pos:start="575:26" pos:end="575:30">(<argument pos:start="575:27" pos:end="575:29"><expr pos:start="575:27" pos:end="575:29"><name pos:start="575:27" pos:end="575:29">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="577:9" pos:end="579:68"><expr pos:start="577:9" pos:end="579:67"><call pos:start="577:9" pos:end="579:67"><name pos:start="577:9" pos:end="577:19">qtest_sendf</name><argument_list pos:start="577:20" pos:end="579:67">(<argument pos:start="577:21" pos:end="577:23"><expr pos:start="577:21" pos:end="577:23"><name pos:start="577:21" pos:end="577:23">chr</name></expr></argument>, <argument pos:start="577:26" pos:end="577:41"><expr pos:start="577:26" pos:end="577:41"><literal type="string" pos:start="577:26" pos:end="577:31">"OK %"</literal><name pos:start="577:32" pos:end="577:37">PRIi64</name><literal type="string" pos:start="577:38" pos:end="577:41">"\n"</literal></expr></argument>,

                    <argument pos:start="579:21" pos:end="579:66"><expr pos:start="579:21" pos:end="579:66"><operator pos:start="579:21" pos:end="579:21">(</operator><name pos:start="579:22" pos:end="579:28">int64_t</name><operator pos:start="579:29" pos:end="579:29">)</operator><call pos:start="579:30" pos:end="579:66"><name pos:start="579:30" pos:end="579:46">qemu_clock_get_ns</name><argument_list pos:start="579:47" pos:end="579:66">(<argument pos:start="579:48" pos:end="579:65"><expr pos:start="579:48" pos:end="579:65"><name pos:start="579:48" pos:end="579:65">QEMU_CLOCK_VIRTUAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="581:7" pos:end="599:5">else if <condition pos:start="581:15" pos:end="581:69">(<expr pos:start="581:16" pos:end="581:68"><call pos:start="581:16" pos:end="581:30"><name pos:start="581:16" pos:end="581:28">qtest_enabled</name><argument_list pos:start="581:29" pos:end="581:30">()</argument_list></call> <operator pos:start="581:32" pos:end="581:33">&amp;&amp;</operator> <call pos:start="581:35" pos:end="581:63"><name pos:start="581:35" pos:end="581:40">strcmp</name><argument_list pos:start="581:41" pos:end="581:63">(<argument pos:start="581:42" pos:end="581:49"><expr pos:start="581:42" pos:end="581:49"><name pos:start="581:42" pos:end="581:49"><name pos:start="581:42" pos:end="581:46">words</name><index pos:start="581:47" pos:end="581:49">[<expr pos:start="581:48" pos:end="581:48"><literal type="number" pos:start="581:48" pos:end="581:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="581:52" pos:end="581:62"><expr pos:start="581:52" pos:end="581:62"><literal type="string" pos:start="581:52" pos:end="581:62">"clock_set"</literal></expr></argument>)</argument_list></call> <operator pos:start="581:65" pos:end="581:66">==</operator> <literal type="number" pos:start="581:68" pos:end="581:68">0</literal></expr>)</condition> <block pos:start="581:71" pos:end="599:5">{<block_content pos:start="583:9" pos:end="597:68">

        <decl_stmt pos:start="583:9" pos:end="583:19"><decl pos:start="583:9" pos:end="583:18"><type pos:start="583:9" pos:end="583:15"><name pos:start="583:9" pos:end="583:15">int64_t</name></type> <name pos:start="583:17" pos:end="583:18">ns</name></decl>;</decl_stmt>



        <expr_stmt pos:start="587:9" pos:end="587:27"><expr pos:start="587:9" pos:end="587:26"><call pos:start="587:9" pos:end="587:26"><name pos:start="587:9" pos:end="587:16">g_assert</name><argument_list pos:start="587:17" pos:end="587:26">(<argument pos:start="587:18" pos:end="587:25"><expr pos:start="587:18" pos:end="587:25"><name pos:start="587:18" pos:end="587:25"><name pos:start="587:18" pos:end="587:22">words</name><index pos:start="587:23" pos:end="587:25">[<expr pos:start="587:24" pos:end="587:24"><literal type="number" pos:start="587:24" pos:end="587:24">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="589:9" pos:end="589:40"><expr pos:start="589:9" pos:end="589:39"><name pos:start="589:9" pos:end="589:10">ns</name> <operator pos:start="589:12" pos:end="589:12">=</operator> <call pos:start="589:14" pos:end="589:39"><name pos:start="589:14" pos:end="589:20">strtoll</name><argument_list pos:start="589:21" pos:end="589:39">(<argument pos:start="589:22" pos:end="589:29"><expr pos:start="589:22" pos:end="589:29"><name pos:start="589:22" pos:end="589:29"><name pos:start="589:22" pos:end="589:26">words</name><index pos:start="589:27" pos:end="589:29">[<expr pos:start="589:28" pos:end="589:28"><literal type="number" pos:start="589:28" pos:end="589:28">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="589:32" pos:end="589:35"><expr pos:start="589:32" pos:end="589:35"><name pos:start="589:32" pos:end="589:35">NULL</name></expr></argument>, <argument pos:start="589:38" pos:end="589:38"><expr pos:start="589:38" pos:end="589:38"><literal type="number" pos:start="589:38" pos:end="589:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="591:9" pos:end="591:29"><expr pos:start="591:9" pos:end="591:28"><call pos:start="591:9" pos:end="591:28"><name pos:start="591:9" pos:end="591:24">qtest_clock_warp</name><argument_list pos:start="591:25" pos:end="591:28">(<argument pos:start="591:26" pos:end="591:27"><expr pos:start="591:26" pos:end="591:27"><name pos:start="591:26" pos:end="591:27">ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="593:9" pos:end="593:31"><expr pos:start="593:9" pos:end="593:30"><call pos:start="593:9" pos:end="593:30"><name pos:start="593:9" pos:end="593:25">qtest_send_prefix</name><argument_list pos:start="593:26" pos:end="593:30">(<argument pos:start="593:27" pos:end="593:29"><expr pos:start="593:27" pos:end="593:29"><name pos:start="593:27" pos:end="593:29">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="595:9" pos:end="597:68"><expr pos:start="595:9" pos:end="597:67"><call pos:start="595:9" pos:end="597:67"><name pos:start="595:9" pos:end="595:19">qtest_sendf</name><argument_list pos:start="595:20" pos:end="597:67">(<argument pos:start="595:21" pos:end="595:23"><expr pos:start="595:21" pos:end="595:23"><name pos:start="595:21" pos:end="595:23">chr</name></expr></argument>, <argument pos:start="595:26" pos:end="595:41"><expr pos:start="595:26" pos:end="595:41"><literal type="string" pos:start="595:26" pos:end="595:31">"OK %"</literal><name pos:start="595:32" pos:end="595:37">PRIi64</name><literal type="string" pos:start="595:38" pos:end="595:41">"\n"</literal></expr></argument>,

                    <argument pos:start="597:21" pos:end="597:66"><expr pos:start="597:21" pos:end="597:66"><operator pos:start="597:21" pos:end="597:21">(</operator><name pos:start="597:22" pos:end="597:28">int64_t</name><operator pos:start="597:29" pos:end="597:29">)</operator><call pos:start="597:30" pos:end="597:66"><name pos:start="597:30" pos:end="597:46">qemu_clock_get_ns</name><argument_list pos:start="597:47" pos:end="597:66">(<argument pos:start="597:48" pos:end="597:65"><expr pos:start="597:48" pos:end="597:65"><name pos:start="597:48" pos:end="597:65">QEMU_CLOCK_VIRTUAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="599:7" pos:end="605:5">else <block pos:start="599:12" pos:end="605:5">{<block_content pos:start="601:9" pos:end="603:66">

        <expr_stmt pos:start="601:9" pos:end="601:31"><expr pos:start="601:9" pos:end="601:30"><call pos:start="601:9" pos:end="601:30"><name pos:start="601:9" pos:end="601:25">qtest_send_prefix</name><argument_list pos:start="601:26" pos:end="601:30">(<argument pos:start="601:27" pos:end="601:29"><expr pos:start="601:27" pos:end="601:29"><name pos:start="601:27" pos:end="601:29">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="603:9" pos:end="603:66"><expr pos:start="603:9" pos:end="603:65"><call pos:start="603:9" pos:end="603:65"><name pos:start="603:9" pos:end="603:19">qtest_sendf</name><argument_list pos:start="603:20" pos:end="603:65">(<argument pos:start="603:21" pos:end="603:23"><expr pos:start="603:21" pos:end="603:23"><name pos:start="603:21" pos:end="603:23">chr</name></expr></argument>, <argument pos:start="603:26" pos:end="603:54"><expr pos:start="603:26" pos:end="603:54"><literal type="string" pos:start="603:26" pos:end="603:54">"FAIL Unknown command '%s'\n"</literal></expr></argument>, <argument pos:start="603:57" pos:end="603:64"><expr pos:start="603:57" pos:end="603:64"><name pos:start="603:57" pos:end="603:64"><name pos:start="603:57" pos:end="603:61">words</name><index pos:start="603:62" pos:end="603:64">[<expr pos:start="603:63" pos:end="603:63"><literal type="number" pos:start="603:63" pos:end="603:63">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
