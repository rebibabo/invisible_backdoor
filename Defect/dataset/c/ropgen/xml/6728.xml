<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6728.c" pos:tabs="8"><function pos:start="1:1" pos:end="89:33"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:24">gem_transmit</name><parameter_list pos:start="1:25" pos:end="1:44">(<parameter pos:start="1:26" pos:end="1:43"><decl pos:start="1:26" pos:end="1:43"><type pos:start="1:26" pos:end="1:42"><name pos:start="1:26" pos:end="1:40">CadenceGEMState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:43">s</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="89:33">{<block_content pos:start="3:5" pos:end="89:33">
    <decl_stmt pos:start="3:5" pos:end="3:24"><decl pos:start="3:5" pos:end="3:23"><type pos:start="3:5" pos:end="3:12"><name pos:start="3:5" pos:end="3:12">unsigned</name></type>    <name pos:start="3:17" pos:end="3:23"><name pos:start="3:17" pos:end="3:20">desc</name><index pos:start="3:21" pos:end="3:23">[<expr pos:start="3:22" pos:end="3:22"><literal type="number" pos:start="3:22" pos:end="3:22">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:28"><decl pos:start="4:5" pos:end="4:27"><type pos:start="4:5" pos:end="4:10"><name pos:start="4:5" pos:end="4:10">hwaddr</name></type> <name pos:start="4:12" pos:end="4:27">packet_desc_addr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">uint8_t</name></type>     <name pos:start="5:17" pos:end="5:31"><name pos:start="5:17" pos:end="5:25">tx_packet</name><index pos:start="5:26" pos:end="5:31">[<expr pos:start="5:27" pos:end="5:30"><literal type="number" pos:start="5:27" pos:end="5:30">2048</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:19"><decl pos:start="6:5" pos:end="6:18"><type pos:start="6:5" pos:end="6:17"><name pos:start="6:5" pos:end="6:11">uint8_t</name>     <modifier pos:start="6:17" pos:end="6:17">*</modifier></type><name pos:start="6:18" pos:end="6:18">p</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">unsigned</name></type>    <name pos:start="7:17" pos:end="7:27">total_bytes</name></decl>;</decl_stmt>
    <comment type="block" pos:start="8:5" pos:end="8:48">/* Do nothing if transmit is not enabled. */</comment>
    <if_stmt pos:start="9:5" pos:end="89:33"><if pos:start="9:5" pos:end="89:33">if <condition pos:start="9:8" pos:end="9:50">(<expr pos:start="9:9" pos:end="9:49"><operator pos:start="9:9" pos:end="9:9">!</operator><operator pos:start="9:10" pos:end="9:10">(</operator><name pos:start="9:11" pos:end="9:29"><name pos:start="9:11" pos:end="9:11">s</name><operator pos:start="9:12" pos:end="9:13">-&gt;</operator><name pos:start="9:14" pos:end="9:17">regs</name><index pos:start="9:18" pos:end="9:29">[<expr pos:start="9:19" pos:end="9:28"><name pos:start="9:19" pos:end="9:28">GEM_NWCTRL</name></expr>]</index></name> <operator pos:start="9:31" pos:end="9:31">&amp;</operator> <name pos:start="9:33" pos:end="9:48">GEM_NWCTRL_TXENA</name><operator pos:start="9:49" pos:end="9:49">)</operator></expr>)</condition> <block pos:start="9:52" pos:end="89:33">{<block_content pos:start="10:9" pos:end="89:33">
        <return pos:start="10:9" pos:end="10:15">return;</return>
    <expr_stmt pos:start="11:5" pos:end="11:19"><expr pos:start="11:5" pos:end="11:18"><call pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:12">DB_PRINT</name><argument_list pos:start="11:13" pos:end="11:18">(<argument pos:start="11:14" pos:end="11:17"><expr pos:start="11:14" pos:end="11:17"><literal type="string" pos:start="11:14" pos:end="11:17">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="12:5" pos:end="15:7">/* The packet we will hand off to QEMU.
     * Packets scattered across multiple descriptors are gathered to this
     * one contiguous buffer first.
     */</comment>
    <expr_stmt pos:start="16:5" pos:end="16:18"><expr pos:start="16:5" pos:end="16:17"><name pos:start="16:5" pos:end="16:5">p</name> <operator pos:start="16:7" pos:end="16:7">=</operator> <name pos:start="16:9" pos:end="16:17">tx_packet</name></expr>;</expr_stmt>
    <expr_stmt pos:start="17:5" pos:end="17:20"><expr pos:start="17:5" pos:end="17:19"><name pos:start="17:5" pos:end="17:15">total_bytes</name> <operator pos:start="17:17" pos:end="17:17">=</operator> <literal type="number" pos:start="17:19" pos:end="17:19">0</literal></expr>;</expr_stmt>
    <comment type="block" pos:start="18:5" pos:end="18:33">/* read current descriptor */</comment>
    <expr_stmt pos:start="19:5" pos:end="19:39"><expr pos:start="19:5" pos:end="19:38"><name pos:start="19:5" pos:end="19:20">packet_desc_addr</name> <operator pos:start="19:22" pos:end="19:22">=</operator> <name pos:start="19:24" pos:end="19:38"><name pos:start="19:24" pos:end="19:24">s</name><operator pos:start="19:25" pos:end="19:26">-&gt;</operator><name pos:start="19:27" pos:end="19:38">tx_desc_addr</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="20:5" pos:end="20:71"><expr pos:start="20:5" pos:end="20:70"><call pos:start="20:5" pos:end="20:70"><name pos:start="20:5" pos:end="20:12">DB_PRINT</name><argument_list pos:start="20:13" pos:end="20:70">(<argument pos:start="20:14" pos:end="20:51"><expr pos:start="20:14" pos:end="20:51"><literal type="string" pos:start="20:14" pos:end="20:34">"read descriptor 0x%"</literal> <name pos:start="20:36" pos:end="20:46">HWADDR_PRIx</name> <literal type="string" pos:start="20:48" pos:end="20:51">"\n"</literal></expr></argument>, <argument pos:start="20:54" pos:end="20:69"><expr pos:start="20:54" pos:end="20:69"><name pos:start="20:54" pos:end="20:69">packet_desc_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="21:5" pos:end="22:60"><expr pos:start="21:5" pos:end="22:59"><call pos:start="21:5" pos:end="22:59"><name pos:start="21:5" pos:end="21:28">cpu_physical_memory_read</name><argument_list pos:start="21:29" pos:end="22:59">(<argument pos:start="21:30" pos:end="21:45"><expr pos:start="21:30" pos:end="21:45"><name pos:start="21:30" pos:end="21:45">packet_desc_addr</name></expr></argument>,
                             <argument pos:start="22:30" pos:end="22:44"><expr pos:start="22:30" pos:end="22:44"><operator pos:start="22:30" pos:end="22:30">(</operator><name pos:start="22:31" pos:end="22:37">uint8_t</name> <operator pos:start="22:39" pos:end="22:39">*</operator><operator pos:start="22:40" pos:end="22:40">)</operator><name pos:start="22:41" pos:end="22:44">desc</name></expr></argument>, <argument pos:start="22:47" pos:end="22:58"><expr pos:start="22:47" pos:end="22:58"><sizeof pos:start="22:47" pos:end="22:58">sizeof<argument_list pos:start="22:53" pos:end="22:58">(<argument pos:start="22:54" pos:end="22:57"><expr pos:start="22:54" pos:end="22:57"><name pos:start="22:54" pos:end="22:57">desc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="23:5" pos:end="23:50">/* Handle all descriptors owned by hardware */</comment>
    <while pos:start="24:5" pos:end="89:33">while <condition pos:start="24:11" pos:end="24:39">(<expr pos:start="24:12" pos:end="24:38"><call pos:start="24:12" pos:end="24:33"><name pos:start="24:12" pos:end="24:27">tx_desc_get_used</name><argument_list pos:start="24:28" pos:end="24:33">(<argument pos:start="24:29" pos:end="24:32"><expr pos:start="24:29" pos:end="24:32"><name pos:start="24:29" pos:end="24:32">desc</name></expr></argument>)</argument_list></call> <operator pos:start="24:35" pos:end="24:36">==</operator> <literal type="number" pos:start="24:38" pos:end="24:38">0</literal></expr>)</condition> <block pos:start="24:41" pos:end="89:33">{<block_content pos:start="26:9" pos:end="89:33">
        <comment type="block" pos:start="25:9" pos:end="25:52">/* Do nothing if transmit is not enabled. */</comment>
        <if_stmt pos:start="26:9" pos:end="89:33"><if pos:start="26:9" pos:end="89:33">if <condition pos:start="26:12" pos:end="26:54">(<expr pos:start="26:13" pos:end="26:53"><operator pos:start="26:13" pos:end="26:13">!</operator><operator pos:start="26:14" pos:end="26:14">(</operator><name pos:start="26:15" pos:end="26:33"><name pos:start="26:15" pos:end="26:15">s</name><operator pos:start="26:16" pos:end="26:17">-&gt;</operator><name pos:start="26:18" pos:end="26:21">regs</name><index pos:start="26:22" pos:end="26:33">[<expr pos:start="26:23" pos:end="26:32"><name pos:start="26:23" pos:end="26:32">GEM_NWCTRL</name></expr>]</index></name> <operator pos:start="26:35" pos:end="26:35">&amp;</operator> <name pos:start="26:37" pos:end="26:52">GEM_NWCTRL_TXENA</name><operator pos:start="26:53" pos:end="26:53">)</operator></expr>)</condition> <block pos:start="26:56" pos:end="89:33">{<block_content pos:start="27:13" pos:end="89:33">
            <return pos:start="27:13" pos:end="27:19">return;</return>
        <expr_stmt pos:start="28:9" pos:end="28:32"><expr pos:start="28:9" pos:end="28:31"><call pos:start="28:9" pos:end="28:31"><name pos:start="28:9" pos:end="28:25">print_gem_tx_desc</name><argument_list pos:start="28:26" pos:end="28:31">(<argument pos:start="28:27" pos:end="28:30"><expr pos:start="28:27" pos:end="28:30"><name pos:start="28:27" pos:end="28:30">desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="29:9" pos:end="31:11">/* The real hardware would eat this (and possibly crash).
         * For QEMU let's lend a helping hand.
         */</comment>
        <if_stmt pos:start="32:9" pos:end="89:33"><if pos:start="32:9" pos:end="89:33">if <condition pos:start="32:12" pos:end="33:44">(<expr pos:start="32:13" pos:end="33:43"><operator pos:start="32:13" pos:end="32:13">(</operator><call pos:start="32:14" pos:end="32:37"><name pos:start="32:14" pos:end="32:31">tx_desc_get_buffer</name><argument_list pos:start="32:32" pos:end="32:37">(<argument pos:start="32:33" pos:end="32:36"><expr pos:start="32:33" pos:end="32:36"><name pos:start="32:33" pos:end="32:36">desc</name></expr></argument>)</argument_list></call> <operator pos:start="32:39" pos:end="32:40">==</operator> <literal type="number" pos:start="32:42" pos:end="32:42">0</literal><operator pos:start="32:43" pos:end="32:43">)</operator> <operator pos:start="32:45" pos:end="32:46">||</operator>
            <operator pos:start="33:13" pos:end="33:13">(</operator><call pos:start="33:14" pos:end="33:37"><name pos:start="33:14" pos:end="33:31">tx_desc_get_length</name><argument_list pos:start="33:32" pos:end="33:37">(<argument pos:start="33:33" pos:end="33:36"><expr pos:start="33:33" pos:end="33:36"><name pos:start="33:33" pos:end="33:36">desc</name></expr></argument>)</argument_list></call> <operator pos:start="33:39" pos:end="33:40">==</operator> <literal type="number" pos:start="33:42" pos:end="33:42">0</literal><operator pos:start="33:43" pos:end="33:43">)</operator></expr>)</condition> <block pos:start="33:46" pos:end="89:33">{<block_content pos:start="34:13" pos:end="89:33">
            <expr_stmt pos:start="34:13" pos:end="35:49"><expr pos:start="34:13" pos:end="35:48"><call pos:start="34:13" pos:end="35:48"><name pos:start="34:13" pos:end="34:20">DB_PRINT</name><argument_list pos:start="34:21" pos:end="35:48">(<argument pos:start="34:22" pos:end="34:53"><expr pos:start="34:22" pos:end="34:53"><literal type="string" pos:start="34:22" pos:end="34:53">"Invalid TX descriptor @ 0x%x\n"</literal></expr></argument>,
                     <argument pos:start="35:22" pos:end="35:47"><expr pos:start="35:22" pos:end="35:47"><operator pos:start="35:22" pos:end="35:22">(</operator><name pos:start="35:23" pos:end="35:30">unsigned</name><operator pos:start="35:31" pos:end="35:31">)</operator><name pos:start="35:32" pos:end="35:47">packet_desc_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="36:9" pos:end="38:11">/* Gather this fragment of the packet from "dma memory" to our contig.
         * buffer.
         */</comment>
        <expr_stmt pos:start="39:9" pos:end="40:59"><expr pos:start="39:9" pos:end="40:58"><call pos:start="39:9" pos:end="40:58"><name pos:start="39:9" pos:end="39:32">cpu_physical_memory_read</name><argument_list pos:start="39:33" pos:end="40:58">(<argument pos:start="39:34" pos:end="39:57"><expr pos:start="39:34" pos:end="39:57"><call pos:start="39:34" pos:end="39:57"><name pos:start="39:34" pos:end="39:51">tx_desc_get_buffer</name><argument_list pos:start="39:52" pos:end="39:57">(<argument pos:start="39:53" pos:end="39:56"><expr pos:start="39:53" pos:end="39:56"><name pos:start="39:53" pos:end="39:56">desc</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="39:60" pos:end="39:60"><expr pos:start="39:60" pos:end="39:60"><name pos:start="39:60" pos:end="39:60">p</name></expr></argument>,
                                 <argument pos:start="40:34" pos:end="40:57"><expr pos:start="40:34" pos:end="40:57"><call pos:start="40:34" pos:end="40:57"><name pos:start="40:34" pos:end="40:51">tx_desc_get_length</name><argument_list pos:start="40:52" pos:end="40:57">(<argument pos:start="40:53" pos:end="40:56"><expr pos:start="40:53" pos:end="40:56"><name pos:start="40:53" pos:end="40:56">desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="41:9" pos:end="41:38"><expr pos:start="41:9" pos:end="41:37"><name pos:start="41:9" pos:end="41:9">p</name> <operator pos:start="41:11" pos:end="41:12">+=</operator> <call pos:start="41:14" pos:end="41:37"><name pos:start="41:14" pos:end="41:31">tx_desc_get_length</name><argument_list pos:start="41:32" pos:end="41:37">(<argument pos:start="41:33" pos:end="41:36"><expr pos:start="41:33" pos:end="41:36"><name pos:start="41:33" pos:end="41:36">desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="42:9" pos:end="42:48"><expr pos:start="42:9" pos:end="42:47"><name pos:start="42:9" pos:end="42:19">total_bytes</name> <operator pos:start="42:21" pos:end="42:22">+=</operator> <call pos:start="42:24" pos:end="42:47"><name pos:start="42:24" pos:end="42:41">tx_desc_get_length</name><argument_list pos:start="42:42" pos:end="42:47">(<argument pos:start="42:43" pos:end="42:46"><expr pos:start="42:43" pos:end="42:46"><name pos:start="42:43" pos:end="42:46">desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="43:9" pos:end="43:71">/* Last descriptor for this packet; hand the whole thing off */</comment>
        <if_stmt pos:start="44:9" pos:end="89:33"><if pos:start="44:9" pos:end="89:33">if <condition pos:start="44:12" pos:end="44:35">(<expr pos:start="44:13" pos:end="44:34"><call pos:start="44:13" pos:end="44:34"><name pos:start="44:13" pos:end="44:28">tx_desc_get_last</name><argument_list pos:start="44:29" pos:end="44:34">(<argument pos:start="44:30" pos:end="44:33"><expr pos:start="44:30" pos:end="44:33"><name pos:start="44:30" pos:end="44:33">desc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="44:37" pos:end="89:33">{<block_content pos:start="45:13" pos:end="89:33">
            <decl_stmt pos:start="45:13" pos:end="45:38"><decl pos:start="45:13" pos:end="45:37"><type pos:start="45:13" pos:end="45:20"><name pos:start="45:13" pos:end="45:20">unsigned</name></type>    <name pos:start="45:25" pos:end="45:37"><name pos:start="45:25" pos:end="45:34">desc_first</name><index pos:start="45:35" pos:end="45:37">[<expr pos:start="45:36" pos:end="45:36"><literal type="number" pos:start="45:36" pos:end="45:36">2</literal></expr>]</index></name></decl>;</decl_stmt>
            <comment type="block" pos:start="46:13" pos:end="48:15">/* Modify the 1st descriptor of this packet to be owned by
             * the processor.
             */</comment>
            <expr_stmt pos:start="49:13" pos:end="50:57"><expr pos:start="49:13" pos:end="50:56"><call pos:start="49:13" pos:end="50:56"><name pos:start="49:13" pos:end="49:36">cpu_physical_memory_read</name><argument_list pos:start="49:37" pos:end="50:56">(<argument pos:start="49:38" pos:end="49:52"><expr pos:start="49:38" pos:end="49:52"><name pos:start="49:38" pos:end="49:52"><name pos:start="49:38" pos:end="49:38">s</name><operator pos:start="49:39" pos:end="49:40">-&gt;</operator><name pos:start="49:41" pos:end="49:52">tx_desc_addr</name></name></expr></argument>, <argument pos:start="49:55" pos:end="49:75"><expr pos:start="49:55" pos:end="49:75"><operator pos:start="49:55" pos:end="49:55">(</operator><name pos:start="49:56" pos:end="49:62">uint8_t</name> <operator pos:start="49:64" pos:end="49:64">*</operator><operator pos:start="49:65" pos:end="49:65">)</operator><name pos:start="49:66" pos:end="49:75">desc_first</name></expr></argument>,
                                     <argument pos:start="50:38" pos:end="50:55"><expr pos:start="50:38" pos:end="50:55"><sizeof pos:start="50:38" pos:end="50:55">sizeof<argument_list pos:start="50:44" pos:end="50:55">(<argument pos:start="50:45" pos:end="50:54"><expr pos:start="50:45" pos:end="50:54"><name pos:start="50:45" pos:end="50:54">desc_first</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="51:13" pos:end="51:41"><expr pos:start="51:13" pos:end="51:40"><call pos:start="51:13" pos:end="51:40"><name pos:start="51:13" pos:end="51:28">tx_desc_set_used</name><argument_list pos:start="51:29" pos:end="51:40">(<argument pos:start="51:30" pos:end="51:39"><expr pos:start="51:30" pos:end="51:39"><name pos:start="51:30" pos:end="51:39">desc_first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="52:13" pos:end="53:58"><expr pos:start="52:13" pos:end="53:57"><call pos:start="52:13" pos:end="53:57"><name pos:start="52:13" pos:end="52:37">cpu_physical_memory_write</name><argument_list pos:start="52:38" pos:end="53:57">(<argument pos:start="52:39" pos:end="52:53"><expr pos:start="52:39" pos:end="52:53"><name pos:start="52:39" pos:end="52:53"><name pos:start="52:39" pos:end="52:39">s</name><operator pos:start="52:40" pos:end="52:41">-&gt;</operator><name pos:start="52:42" pos:end="52:53">tx_desc_addr</name></name></expr></argument>, <argument pos:start="52:56" pos:end="52:76"><expr pos:start="52:56" pos:end="52:76"><operator pos:start="52:56" pos:end="52:56">(</operator><name pos:start="52:57" pos:end="52:63">uint8_t</name> <operator pos:start="52:65" pos:end="52:65">*</operator><operator pos:start="52:66" pos:end="52:66">)</operator><name pos:start="52:67" pos:end="52:76">desc_first</name></expr></argument>,
                                      <argument pos:start="53:39" pos:end="53:56"><expr pos:start="53:39" pos:end="53:56"><sizeof pos:start="53:39" pos:end="53:56">sizeof<argument_list pos:start="53:45" pos:end="53:56">(<argument pos:start="53:46" pos:end="53:55"><expr pos:start="53:46" pos:end="53:55"><name pos:start="53:46" pos:end="53:55">desc_first</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="54:13" pos:end="54:74">/* Advance the hardware current descriptor past this packet */</comment>
            <if_stmt pos:start="55:13" pos:end="89:33"><if pos:start="55:13" pos:end="57:13">if <condition pos:start="55:16" pos:end="55:39">(<expr pos:start="55:17" pos:end="55:38"><call pos:start="55:17" pos:end="55:38"><name pos:start="55:17" pos:end="55:32">tx_desc_get_wrap</name><argument_list pos:start="55:33" pos:end="55:38">(<argument pos:start="55:34" pos:end="55:37"><expr pos:start="55:34" pos:end="55:37"><name pos:start="55:34" pos:end="55:37">desc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:41" pos:end="57:13">{<block_content pos:start="56:17" pos:end="56:55">
                <expr_stmt pos:start="56:17" pos:end="56:55"><expr pos:start="56:17" pos:end="56:54"><name pos:start="56:17" pos:end="56:31"><name pos:start="56:17" pos:end="56:17">s</name><operator pos:start="56:18" pos:end="56:19">-&gt;</operator><name pos:start="56:20" pos:end="56:31">tx_desc_addr</name></name> <operator pos:start="56:33" pos:end="56:33">=</operator> <name pos:start="56:35" pos:end="56:54"><name pos:start="56:35" pos:end="56:35">s</name><operator pos:start="56:36" pos:end="56:37">-&gt;</operator><name pos:start="56:38" pos:end="56:41">regs</name><index pos:start="56:42" pos:end="56:54">[<expr pos:start="56:43" pos:end="56:53"><name pos:start="56:43" pos:end="56:53">GEM_TXQBASE</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="57:15" pos:end="89:33">else <block pos:start="57:20" pos:end="89:33">{<block_content pos:start="58:17" pos:end="89:33">
                <expr_stmt pos:start="58:17" pos:end="58:55"><expr pos:start="58:17" pos:end="58:54"><name pos:start="58:17" pos:end="58:31"><name pos:start="58:17" pos:end="58:17">s</name><operator pos:start="58:18" pos:end="58:19">-&gt;</operator><name pos:start="58:20" pos:end="58:31">tx_desc_addr</name></name> <operator pos:start="58:33" pos:end="58:33">=</operator> <name pos:start="58:35" pos:end="58:50">packet_desc_addr</name> <operator pos:start="58:52" pos:end="58:52">+</operator> <literal type="number" pos:start="58:54" pos:end="58:54">8</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="59:13" pos:end="59:70"><expr pos:start="59:13" pos:end="59:69"><call pos:start="59:13" pos:end="59:69"><name pos:start="59:13" pos:end="59:20">DB_PRINT</name><argument_list pos:start="59:21" pos:end="59:69">(<argument pos:start="59:22" pos:end="59:51"><expr pos:start="59:22" pos:end="59:51"><literal type="string" pos:start="59:22" pos:end="59:51">"TX descriptor next: 0x%08x\n"</literal></expr></argument>, <argument pos:start="59:54" pos:end="59:68"><expr pos:start="59:54" pos:end="59:68"><name pos:start="59:54" pos:end="59:68"><name pos:start="59:54" pos:end="59:54">s</name><operator pos:start="59:55" pos:end="59:56">-&gt;</operator><name pos:start="59:57" pos:end="59:68">tx_desc_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="60:13" pos:end="60:57"><expr pos:start="60:13" pos:end="60:56"><name pos:start="60:13" pos:end="60:33"><name pos:start="60:13" pos:end="60:13">s</name><operator pos:start="60:14" pos:end="60:15">-&gt;</operator><name pos:start="60:16" pos:end="60:19">regs</name><index pos:start="60:20" pos:end="60:33">[<expr pos:start="60:21" pos:end="60:32"><name pos:start="60:21" pos:end="60:32">GEM_TXSTATUS</name></expr>]</index></name> <operator pos:start="60:35" pos:end="60:36">|=</operator> <name pos:start="60:38" pos:end="60:56">GEM_TXSTATUS_TXCMPL</name></expr>;</expr_stmt>
            <expr_stmt pos:start="61:13" pos:end="61:69"><expr pos:start="61:13" pos:end="61:68"><name pos:start="61:13" pos:end="61:28"><name pos:start="61:13" pos:end="61:13">s</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:19">regs</name><index pos:start="61:20" pos:end="61:28">[<expr pos:start="61:21" pos:end="61:27"><name pos:start="61:21" pos:end="61:27">GEM_ISR</name></expr>]</index></name> <operator pos:start="61:30" pos:end="61:31">|=</operator> <name pos:start="61:33" pos:end="61:46">GEM_INT_TXCMPL</name> <operator pos:start="61:48" pos:end="61:48">&amp;</operator> <operator pos:start="61:50" pos:end="61:50">~</operator><operator pos:start="61:51" pos:end="61:51">(</operator><name pos:start="61:52" pos:end="61:67"><name pos:start="61:52" pos:end="61:52">s</name><operator pos:start="61:53" pos:end="61:54">-&gt;</operator><name pos:start="61:55" pos:end="61:58">regs</name><index pos:start="61:59" pos:end="61:67">[<expr pos:start="61:60" pos:end="61:66"><name pos:start="61:60" pos:end="61:66">GEM_IMR</name></expr>]</index></name><operator pos:start="61:68" pos:end="61:68">)</operator></expr>;</expr_stmt>
            <comment type="block" pos:start="62:13" pos:end="62:47">/* Handle interrupt consequences */</comment>
            <expr_stmt pos:start="63:13" pos:end="63:37"><expr pos:start="63:13" pos:end="63:36"><call pos:start="63:13" pos:end="63:36"><name pos:start="63:13" pos:end="63:33">gem_update_int_status</name><argument_list pos:start="63:34" pos:end="63:36">(<argument pos:start="63:35" pos:end="63:35"><expr pos:start="63:35" pos:end="63:35"><name pos:start="63:35" pos:end="63:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="64:13" pos:end="64:46">/* Is checksum offload enabled? */</comment>
            <if_stmt pos:start="65:13" pos:end="89:33"><if pos:start="65:13" pos:end="89:33">if <condition pos:start="65:16" pos:end="65:61">(<expr pos:start="65:17" pos:end="65:60"><name pos:start="65:17" pos:end="65:35"><name pos:start="65:17" pos:end="65:17">s</name><operator pos:start="65:18" pos:end="65:19">-&gt;</operator><name pos:start="65:20" pos:end="65:23">regs</name><index pos:start="65:24" pos:end="65:35">[<expr pos:start="65:25" pos:end="65:34"><name pos:start="65:25" pos:end="65:34">GEM_DMACFG</name></expr>]</index></name> <operator pos:start="65:37" pos:end="65:37">&amp;</operator> <name pos:start="65:39" pos:end="65:60">GEM_DMACFG_TXCSUM_OFFL</name></expr>)</condition> <block pos:start="65:63" pos:end="89:33">{<block_content pos:start="66:17" pos:end="89:33">
                <expr_stmt pos:start="66:17" pos:end="66:63"><expr pos:start="66:17" pos:end="66:62"><call pos:start="66:17" pos:end="66:62"><name pos:start="66:17" pos:end="66:38">net_checksum_calculate</name><argument_list pos:start="66:39" pos:end="66:62">(<argument pos:start="66:40" pos:end="66:48"><expr pos:start="66:40" pos:end="66:48"><name pos:start="66:40" pos:end="66:48">tx_packet</name></expr></argument>, <argument pos:start="66:51" pos:end="66:61"><expr pos:start="66:51" pos:end="66:61"><name pos:start="66:51" pos:end="66:61">total_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="67:13" pos:end="67:39">/* Update MAC statistics */</comment>
            <expr_stmt pos:start="68:13" pos:end="68:64"><expr pos:start="68:13" pos:end="68:63"><call pos:start="68:13" pos:end="68:63"><name pos:start="68:13" pos:end="68:36">gem_transmit_updatestats</name><argument_list pos:start="68:37" pos:end="68:63">(<argument pos:start="68:38" pos:end="68:38"><expr pos:start="68:38" pos:end="68:38"><name pos:start="68:38" pos:end="68:38">s</name></expr></argument>, <argument pos:start="68:41" pos:end="68:49"><expr pos:start="68:41" pos:end="68:49"><name pos:start="68:41" pos:end="68:49">tx_packet</name></expr></argument>, <argument pos:start="68:52" pos:end="68:62"><expr pos:start="68:52" pos:end="68:62"><name pos:start="68:52" pos:end="68:62">total_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="69:13" pos:end="69:43">/* Send the packet somewhere */</comment>
            <if_stmt pos:start="70:13" pos:end="89:33"><if pos:start="70:13" pos:end="72:13">if <condition pos:start="70:16" pos:end="70:76">(<expr pos:start="70:17" pos:end="70:75"><name pos:start="70:17" pos:end="70:27"><name pos:start="70:17" pos:end="70:17">s</name><operator pos:start="70:18" pos:end="70:19">-&gt;</operator><name pos:start="70:20" pos:end="70:27">phy_loop</name></name> <operator pos:start="70:29" pos:end="70:30">||</operator> <operator pos:start="70:32" pos:end="70:32">(</operator><name pos:start="70:33" pos:end="70:51"><name pos:start="70:33" pos:end="70:33">s</name><operator pos:start="70:34" pos:end="70:35">-&gt;</operator><name pos:start="70:36" pos:end="70:39">regs</name><index pos:start="70:40" pos:end="70:51">[<expr pos:start="70:41" pos:end="70:50"><name pos:start="70:41" pos:end="70:50">GEM_NWCTRL</name></expr>]</index></name> <operator pos:start="70:53" pos:end="70:53">&amp;</operator> <name pos:start="70:55" pos:end="70:74">GEM_NWCTRL_LOCALLOOP</name><operator pos:start="70:75" pos:end="70:75">)</operator></expr>)</condition> <block pos:start="70:78" pos:end="72:13">{<block_content pos:start="71:17" pos:end="71:76">
                <expr_stmt pos:start="71:17" pos:end="71:76"><expr pos:start="71:17" pos:end="71:75"><call pos:start="71:17" pos:end="71:75"><name pos:start="71:17" pos:end="71:27">gem_receive</name><argument_list pos:start="71:28" pos:end="71:75">(<argument pos:start="71:29" pos:end="71:50"><expr pos:start="71:29" pos:end="71:50"><call pos:start="71:29" pos:end="71:50"><name pos:start="71:29" pos:end="71:42">qemu_get_queue</name><argument_list pos:start="71:43" pos:end="71:50">(<argument pos:start="71:44" pos:end="71:49"><expr pos:start="71:44" pos:end="71:49"><name pos:start="71:44" pos:end="71:49"><name pos:start="71:44" pos:end="71:44">s</name><operator pos:start="71:45" pos:end="71:46">-&gt;</operator><name pos:start="71:47" pos:end="71:49">nic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="71:53" pos:end="71:61"><expr pos:start="71:53" pos:end="71:61"><name pos:start="71:53" pos:end="71:61">tx_packet</name></expr></argument>, <argument pos:start="71:64" pos:end="71:74"><expr pos:start="71:64" pos:end="71:74"><name pos:start="71:64" pos:end="71:74">total_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="72:15" pos:end="89:33">else <block pos:start="72:20" pos:end="89:33">{<block_content pos:start="73:17" pos:end="89:33">
                <expr_stmt pos:start="73:17" pos:end="74:46"><expr pos:start="73:17" pos:end="74:45"><call pos:start="73:17" pos:end="74:45"><name pos:start="73:17" pos:end="73:32">qemu_send_packet</name><argument_list pos:start="73:33" pos:end="74:45">(<argument pos:start="73:34" pos:end="73:55"><expr pos:start="73:34" pos:end="73:55"><call pos:start="73:34" pos:end="73:55"><name pos:start="73:34" pos:end="73:47">qemu_get_queue</name><argument_list pos:start="73:48" pos:end="73:55">(<argument pos:start="73:49" pos:end="73:54"><expr pos:start="73:49" pos:end="73:54"><name pos:start="73:49" pos:end="73:54"><name pos:start="73:49" pos:end="73:49">s</name><operator pos:start="73:50" pos:end="73:51">-&gt;</operator><name pos:start="73:52" pos:end="73:54">nic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="73:58" pos:end="73:66"><expr pos:start="73:58" pos:end="73:66"><name pos:start="73:58" pos:end="73:66">tx_packet</name></expr></argument>,
                                 <argument pos:start="74:34" pos:end="74:44"><expr pos:start="74:34" pos:end="74:44"><name pos:start="74:34" pos:end="74:44">total_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="75:13" pos:end="75:41">/* Prepare for next packet */</comment>
            <expr_stmt pos:start="76:13" pos:end="76:26"><expr pos:start="76:13" pos:end="76:25"><name pos:start="76:13" pos:end="76:13">p</name> <operator pos:start="76:15" pos:end="76:15">=</operator> <name pos:start="76:17" pos:end="76:25">tx_packet</name></expr>;</expr_stmt>
            <expr_stmt pos:start="77:13" pos:end="77:28"><expr pos:start="77:13" pos:end="77:27"><name pos:start="77:13" pos:end="77:23">total_bytes</name> <operator pos:start="77:25" pos:end="77:25">=</operator> <literal type="number" pos:start="77:27" pos:end="77:27">0</literal></expr>;</expr_stmt>
        <comment type="block" pos:start="78:9" pos:end="78:34">/* read next descriptor */</comment>
        <if_stmt pos:start="79:9" pos:end="89:33"><if pos:start="79:9" pos:end="81:9">if <condition pos:start="79:12" pos:end="79:35">(<expr pos:start="79:13" pos:end="79:34"><call pos:start="79:13" pos:end="79:34"><name pos:start="79:13" pos:end="79:28">tx_desc_get_wrap</name><argument_list pos:start="79:29" pos:end="79:34">(<argument pos:start="79:30" pos:end="79:33"><expr pos:start="79:30" pos:end="79:33"><name pos:start="79:30" pos:end="79:33">desc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="79:37" pos:end="81:9">{<block_content pos:start="80:13" pos:end="80:52">
            <expr_stmt pos:start="80:13" pos:end="80:52"><expr pos:start="80:13" pos:end="80:51"><name pos:start="80:13" pos:end="80:28">packet_desc_addr</name> <operator pos:start="80:30" pos:end="80:30">=</operator> <name pos:start="80:32" pos:end="80:51"><name pos:start="80:32" pos:end="80:32">s</name><operator pos:start="80:33" pos:end="80:34">-&gt;</operator><name pos:start="80:35" pos:end="80:38">regs</name><index pos:start="80:39" pos:end="80:51">[<expr pos:start="80:40" pos:end="80:50"><name pos:start="80:40" pos:end="80:50">GEM_TXQBASE</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="81:11" pos:end="89:33">else <block pos:start="81:16" pos:end="89:33">{<block_content pos:start="82:13" pos:end="89:33">
            <expr_stmt pos:start="82:13" pos:end="82:34"><expr pos:start="82:13" pos:end="82:33"><name pos:start="82:13" pos:end="82:28">packet_desc_addr</name> <operator pos:start="82:30" pos:end="82:31">+=</operator> <literal type="number" pos:start="82:33" pos:end="82:33">8</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="83:9" pos:end="83:75"><expr pos:start="83:9" pos:end="83:74"><call pos:start="83:9" pos:end="83:74"><name pos:start="83:9" pos:end="83:16">DB_PRINT</name><argument_list pos:start="83:17" pos:end="83:74">(<argument pos:start="83:18" pos:end="83:55"><expr pos:start="83:18" pos:end="83:55"><literal type="string" pos:start="83:18" pos:end="83:38">"read descriptor 0x%"</literal> <name pos:start="83:40" pos:end="83:50">HWADDR_PRIx</name> <literal type="string" pos:start="83:52" pos:end="83:55">"\n"</literal></expr></argument>, <argument pos:start="83:58" pos:end="83:73"><expr pos:start="83:58" pos:end="83:73"><name pos:start="83:58" pos:end="83:73">packet_desc_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="84:9" pos:end="85:64"><expr pos:start="84:9" pos:end="85:63"><call pos:start="84:9" pos:end="85:63"><name pos:start="84:9" pos:end="84:32">cpu_physical_memory_read</name><argument_list pos:start="84:33" pos:end="85:63">(<argument pos:start="84:34" pos:end="84:49"><expr pos:start="84:34" pos:end="84:49"><name pos:start="84:34" pos:end="84:49">packet_desc_addr</name></expr></argument>,
                                 <argument pos:start="85:34" pos:end="85:48"><expr pos:start="85:34" pos:end="85:48"><operator pos:start="85:34" pos:end="85:34">(</operator><name pos:start="85:35" pos:end="85:41">uint8_t</name> <operator pos:start="85:43" pos:end="85:43">*</operator><operator pos:start="85:44" pos:end="85:44">)</operator><name pos:start="85:45" pos:end="85:48">desc</name></expr></argument>, <argument pos:start="85:51" pos:end="85:62"><expr pos:start="85:51" pos:end="85:62"><sizeof pos:start="85:51" pos:end="85:62">sizeof<argument_list pos:start="85:57" pos:end="85:62">(<argument pos:start="85:58" pos:end="85:61"><expr pos:start="85:58" pos:end="85:61"><name pos:start="85:58" pos:end="85:61">desc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="86:5" pos:end="89:33"><if pos:start="86:5" pos:end="89:33">if <condition pos:start="86:8" pos:end="86:31">(<expr pos:start="86:9" pos:end="86:30"><call pos:start="86:9" pos:end="86:30"><name pos:start="86:9" pos:end="86:24">tx_desc_get_used</name><argument_list pos:start="86:25" pos:end="86:30">(<argument pos:start="86:26" pos:end="86:29"><expr pos:start="86:26" pos:end="86:29"><name pos:start="86:26" pos:end="86:29">desc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="86:33" pos:end="89:33">{<block_content pos:start="87:9" pos:end="89:33">
        <expr_stmt pos:start="87:9" pos:end="87:51"><expr pos:start="87:9" pos:end="87:50"><name pos:start="87:9" pos:end="87:29"><name pos:start="87:9" pos:end="87:9">s</name><operator pos:start="87:10" pos:end="87:11">-&gt;</operator><name pos:start="87:12" pos:end="87:15">regs</name><index pos:start="87:16" pos:end="87:29">[<expr pos:start="87:17" pos:end="87:28"><name pos:start="87:17" pos:end="87:28">GEM_TXSTATUS</name></expr>]</index></name> <operator pos:start="87:31" pos:end="87:32">|=</operator> <name pos:start="87:34" pos:end="87:50">GEM_TXSTATUS_USED</name></expr>;</expr_stmt>
        <expr_stmt pos:start="88:9" pos:end="88:65"><expr pos:start="88:9" pos:end="88:64"><name pos:start="88:9" pos:end="88:24"><name pos:start="88:9" pos:end="88:9">s</name><operator pos:start="88:10" pos:end="88:11">-&gt;</operator><name pos:start="88:12" pos:end="88:15">regs</name><index pos:start="88:16" pos:end="88:24">[<expr pos:start="88:17" pos:end="88:23"><name pos:start="88:17" pos:end="88:23">GEM_ISR</name></expr>]</index></name> <operator pos:start="88:26" pos:end="88:27">|=</operator> <name pos:start="88:29" pos:end="88:42">GEM_INT_TXUSED</name> <operator pos:start="88:44" pos:end="88:44">&amp;</operator> <operator pos:start="88:46" pos:end="88:46">~</operator><operator pos:start="88:47" pos:end="88:47">(</operator><name pos:start="88:48" pos:end="88:63"><name pos:start="88:48" pos:end="88:48">s</name><operator pos:start="88:49" pos:end="88:50">-&gt;</operator><name pos:start="88:51" pos:end="88:54">regs</name><index pos:start="88:55" pos:end="88:63">[<expr pos:start="88:56" pos:end="88:62"><name pos:start="88:56" pos:end="88:62">GEM_IMR</name></expr>]</index></name><operator pos:start="88:64" pos:end="88:64">)</operator></expr>;</expr_stmt>
        <expr_stmt pos:start="89:9" pos:end="89:33"><expr pos:start="89:9" pos:end="89:32"><call pos:start="89:9" pos:end="89:32"><name pos:start="89:9" pos:end="89:29">gem_update_int_status</name><argument_list pos:start="89:30" pos:end="89:32">(<argument pos:start="89:31" pos:end="89:31"><expr pos:start="89:31" pos:end="89:31"><name pos:start="89:31" pos:end="89:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></while></block_content></block></if></if_stmt></block_content></block></function></unit>
