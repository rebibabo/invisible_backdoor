<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4399.c" pos:tabs="8"><function pos:start="1:1" pos:end="1213:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:20">always_inline</name> <name pos:start="1:22" pos:end="1:25">void</name></type> <name pos:start="1:27" pos:end="1:38">powerpc_excp</name> <parameter_list pos:start="1:40" pos:end="3:65">(<parameter pos:start="1:41" pos:end="1:53"><decl pos:start="1:41" pos:end="1:53"><type pos:start="1:41" pos:end="1:53"><name pos:start="1:41" pos:end="1:48">CPUState</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:53">env</name></decl></parameter>,

                                        <parameter pos:start="3:41" pos:end="3:54"><decl pos:start="3:41" pos:end="3:54"><type pos:start="3:41" pos:end="3:54"><name pos:start="3:41" pos:end="3:43">int</name></type> <name pos:start="3:45" pos:end="3:54">excp_model</name></decl></parameter>, <parameter pos:start="3:57" pos:end="3:64"><decl pos:start="3:57" pos:end="3:64"><type pos:start="3:57" pos:end="3:64"><name pos:start="3:57" pos:end="3:59">int</name></type> <name pos:start="3:61" pos:end="3:64">excp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="1213:1">{<block_content pos:start="7:5" pos:end="1211:24">

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:16">target_ulong</name></type> <name pos:start="7:18" pos:end="7:20">msr</name></decl>, <decl pos:start="7:23" pos:end="7:28"><type ref="prev" pos:start="7:5" pos:end="7:16"/><name pos:start="7:23" pos:end="7:28">vector</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">srr0</name></decl>, <decl pos:start="9:15" pos:end="9:18"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:15" pos:end="9:18">srr1</name></decl>, <decl pos:start="9:21" pos:end="9:25"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:21" pos:end="9:25">asrr0</name></decl>, <decl pos:start="9:28" pos:end="9:32"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:28" pos:end="9:32">asrr1</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:31">(<expr pos:start="13:9" pos:end="13:30"><name pos:start="13:9" pos:end="13:16">loglevel</name> <operator pos:start="13:18" pos:end="13:18">&amp;</operator> <name pos:start="13:20" pos:end="13:30">CPU_LOG_INT</name></expr>)</condition> <block pos:start="13:33" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:49">

        <expr_stmt pos:start="15:9" pos:end="17:49"><expr pos:start="15:9" pos:end="17:48"><call pos:start="15:9" pos:end="17:48"><name pos:start="15:9" pos:end="15:15">fprintf</name><argument_list pos:start="15:16" pos:end="17:48">(<argument pos:start="15:17" pos:end="15:23"><expr pos:start="15:17" pos:end="15:23"><name pos:start="15:17" pos:end="15:23">logfile</name></expr></argument>, <argument pos:start="15:26" pos:end="15:76"><expr pos:start="15:26" pos:end="15:76"><literal type="string" pos:start="15:26" pos:end="15:48">"Raise exception at 0x"</literal> <name pos:start="15:50" pos:end="15:54">ADDRX</name> <literal type="string" pos:start="15:56" pos:end="15:76">" =&gt; 0x%08x (%02x)\n"</literal></expr></argument>,

                <argument pos:start="17:17" pos:end="17:24"><expr pos:start="17:17" pos:end="17:24"><name pos:start="17:17" pos:end="17:24"><name pos:start="17:17" pos:end="17:19">env</name><operator pos:start="17:20" pos:end="17:21">-&gt;</operator><name pos:start="17:22" pos:end="17:24">nip</name></name></expr></argument>, <argument pos:start="17:27" pos:end="17:30"><expr pos:start="17:27" pos:end="17:30"><name pos:start="17:27" pos:end="17:30">excp</name></expr></argument>, <argument pos:start="17:33" pos:end="17:47"><expr pos:start="17:33" pos:end="17:47"><name pos:start="17:33" pos:end="17:47"><name pos:start="17:33" pos:end="17:35">env</name><operator pos:start="17:36" pos:end="17:37">-&gt;</operator><name pos:start="17:38" pos:end="17:47">error_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:27"><expr pos:start="21:5" pos:end="21:26"><name pos:start="21:5" pos:end="21:7">msr</name> <operator pos:start="21:9" pos:end="21:9">=</operator> <call pos:start="21:11" pos:end="21:26"><name pos:start="21:11" pos:end="21:21">do_load_msr</name><argument_list pos:start="21:22" pos:end="21:26">(<argument pos:start="21:23" pos:end="21:25"><expr pos:start="21:23" pos:end="21:25"><name pos:start="21:23" pos:end="21:25">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:20"><expr pos:start="23:5" pos:end="23:19"><name pos:start="23:5" pos:end="23:8">srr0</name> <operator pos:start="23:10" pos:end="23:10">=</operator> <name pos:start="23:12" pos:end="23:19">SPR_SRR0</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:20"><expr pos:start="25:5" pos:end="25:19"><name pos:start="25:5" pos:end="25:8">srr1</name> <operator pos:start="25:10" pos:end="25:10">=</operator> <name pos:start="25:12" pos:end="25:19">SPR_SRR1</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:15"><expr pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:9">asrr0</name> <operator pos:start="27:11" pos:end="27:11">=</operator> <operator pos:start="27:13" pos:end="27:13">-</operator><literal type="number" pos:start="27:14" pos:end="27:14">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:15"><expr pos:start="29:5" pos:end="29:14"><name pos:start="29:5" pos:end="29:9">asrr1</name> <operator pos:start="29:11" pos:end="29:11">=</operator> <operator pos:start="29:13" pos:end="29:13">-</operator><literal type="number" pos:start="29:14" pos:end="29:14">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:39"><expr pos:start="31:5" pos:end="31:38"><name pos:start="31:5" pos:end="31:7">msr</name> <operator pos:start="31:9" pos:end="31:10">&amp;=</operator> <operator pos:start="31:12" pos:end="31:12">~</operator><operator pos:start="31:13" pos:end="31:13">(</operator><operator pos:start="31:14" pos:end="31:14">(</operator><name pos:start="31:15" pos:end="31:26">target_ulong</name><operator pos:start="31:27" pos:end="31:27">)</operator><literal type="number" pos:start="31:28" pos:end="31:37">0x783F0000</literal><operator pos:start="31:38" pos:end="31:38">)</operator></expr>;</expr_stmt>

    <switch pos:start="33:5" pos:end="1117:5">switch <condition pos:start="33:12" pos:end="33:17">(<expr pos:start="33:13" pos:end="33:16"><name pos:start="33:13" pos:end="33:16">excp</name></expr>)</condition> <block pos:start="33:19" pos:end="1117:5">{<block_content pos:start="35:5" pos:end="1115:14">

    <case pos:start="35:5" pos:end="35:27">case <expr pos:start="35:10" pos:end="35:26"><name pos:start="35:10" pos:end="35:26">POWERPC_EXCP_NONE</name></expr>:</case>

        <comment type="block" pos:start="37:9" pos:end="37:33">/* Should never happen */</comment>

        <return pos:start="39:9" pos:end="39:15">return;</return>

    <case pos:start="41:5" pos:end="41:31">case <expr pos:start="41:10" pos:end="41:30"><name pos:start="41:10" pos:end="41:30">POWERPC_EXCP_CRITICAL</name></expr>:</case>    <comment type="block" pos:start="41:36" pos:end="41:79">/* Critical input                         */</comment>

        <expr_stmt pos:start="43:9" pos:end="43:19"><expr pos:start="43:9" pos:end="43:18"><name pos:start="43:9" pos:end="43:14">msr_ri</name> <operator pos:start="43:16" pos:end="43:16">=</operator> <literal type="number" pos:start="43:18" pos:end="43:18">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="43:21" pos:end="43:41">/* XXX: check this */</comment>

        <switch pos:start="45:9" pos:end="71:9">switch <condition pos:start="45:16" pos:end="45:27">(<expr pos:start="45:17" pos:end="45:26"><name pos:start="45:17" pos:end="45:26">excp_model</name></expr>)</condition> <block pos:start="45:29" pos:end="71:9">{<block_content pos:start="47:9" pos:end="69:30">

        <case pos:start="47:9" pos:end="47:30">case <expr pos:start="47:14" pos:end="47:29"><name pos:start="47:14" pos:end="47:29">POWERPC_EXCP_40x</name></expr>:</case>

            <expr_stmt pos:start="49:13" pos:end="49:32"><expr pos:start="49:13" pos:end="49:31"><name pos:start="49:13" pos:end="49:16">srr0</name> <operator pos:start="49:18" pos:end="49:18">=</operator> <name pos:start="49:20" pos:end="49:31">SPR_40x_SRR2</name></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:32"><expr pos:start="51:13" pos:end="51:31"><name pos:start="51:13" pos:end="51:16">srr1</name> <operator pos:start="51:18" pos:end="51:18">=</operator> <name pos:start="51:20" pos:end="51:31">SPR_40x_SRR3</name></expr>;</expr_stmt>

            <break pos:start="53:13" pos:end="53:18">break;</break>

        <case pos:start="55:9" pos:end="55:32">case <expr pos:start="55:14" pos:end="55:31"><name pos:start="55:14" pos:end="55:31">POWERPC_EXCP_BOOKE</name></expr>:</case>

            <expr_stmt pos:start="57:13" pos:end="57:35"><expr pos:start="57:13" pos:end="57:34"><name pos:start="57:13" pos:end="57:16">srr0</name> <operator pos:start="57:18" pos:end="57:18">=</operator> <name pos:start="57:20" pos:end="57:34">SPR_BOOKE_CSRR0</name></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:35"><expr pos:start="59:13" pos:end="59:34"><name pos:start="59:13" pos:end="59:16">srr1</name> <operator pos:start="59:18" pos:end="59:18">=</operator> <name pos:start="59:20" pos:end="59:34">SPR_BOOKE_CSRR1</name></expr>;</expr_stmt>

            <break pos:start="61:13" pos:end="61:18">break;</break>

        <case pos:start="63:9" pos:end="63:29">case <expr pos:start="63:14" pos:end="63:28"><name pos:start="63:14" pos:end="63:28">POWERPC_EXCP_G2</name></expr>:</case>

            <break pos:start="65:13" pos:end="65:18">break;</break>

        <default pos:start="67:9" pos:end="67:16">default:</default>

            <goto pos:start="69:13" pos:end="69:30">goto <name pos:start="69:18" pos:end="69:29">excp_invalid</name>;</goto>

        </block_content>}</block></switch>

        <goto pos:start="73:9" pos:end="73:24">goto <name pos:start="73:14" pos:end="73:23">store_next</name>;</goto>

    <case pos:start="75:5" pos:end="75:29">case <expr pos:start="75:10" pos:end="75:28"><name pos:start="75:10" pos:end="75:28">POWERPC_EXCP_MCHECK</name></expr>:</case>    <comment type="block" pos:start="75:34" pos:end="75:79">/* Machine check exception                  */</comment>

        <if_stmt pos:start="77:9" pos:end="87:9"><if pos:start="77:9" pos:end="87:9">if <condition pos:start="77:12" pos:end="77:24">(<expr pos:start="77:13" pos:end="77:23"><name pos:start="77:13" pos:end="77:18">msr_me</name> <operator pos:start="77:20" pos:end="77:21">==</operator> <literal type="number" pos:start="77:23" pos:end="77:23">0</literal></expr>)</condition> <block pos:start="77:26" pos:end="87:9">{<block_content pos:start="83:13" pos:end="85:28">

            <comment type="block" pos:start="79:13" pos:end="79:56">/* Machine check exception is not enabled */</comment>

            <comment type="block" pos:start="81:13" pos:end="81:78">/* XXX: we may just stop the processor here, to allow debugging */</comment>

            <expr_stmt pos:start="83:13" pos:end="83:38"><expr pos:start="83:13" pos:end="83:37"><name pos:start="83:13" pos:end="83:16">excp</name> <operator pos:start="83:18" pos:end="83:18">=</operator> <name pos:start="83:20" pos:end="83:37">POWERPC_EXCP_RESET</name></expr>;</expr_stmt>

            <goto pos:start="85:13" pos:end="85:28">goto <name pos:start="85:18" pos:end="85:27">excp_reset</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:19"><expr pos:start="89:9" pos:end="89:18"><name pos:start="89:9" pos:end="89:14">msr_ri</name> <operator pos:start="89:16" pos:end="89:16">=</operator> <literal type="number" pos:start="89:18" pos:end="89:18">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="94:0"><expr pos:start="91:9" pos:end="91:18"><name pos:start="91:9" pos:end="91:14">msr_me</name> <operator pos:start="91:16" pos:end="91:16">=</operator> <literal type="number" pos:start="91:18" pos:end="91:18">0</literal></expr>;</expr_stmt>

<cpp:if pos:start="93:1" pos:end="93:26">#<cpp:directive pos:start="93:2" pos:end="93:3">if</cpp:directive> <expr pos:start="93:5" pos:end="93:26"><call pos:start="93:5" pos:end="93:26"><name pos:start="93:5" pos:end="93:11">defined</name><argument_list pos:start="93:12" pos:end="93:26">(<argument pos:start="93:13" pos:end="93:25"><expr pos:start="93:13" pos:end="93:25"><name pos:start="93:13" pos:end="93:25">TARGET_PPC64H</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="95:9" pos:end="98:0"><expr pos:start="95:9" pos:end="95:18"><name pos:start="95:9" pos:end="95:14">msr_hv</name> <operator pos:start="95:16" pos:end="95:16">=</operator> <literal type="number" pos:start="95:18" pos:end="95:18">1</literal></expr>;</expr_stmt>

<cpp:endif pos:start="97:1" pos:end="97:6">#<cpp:directive pos:start="97:2" pos:end="97:6">endif</cpp:directive></cpp:endif>

        <comment type="block" pos:start="99:9" pos:end="99:67">/* XXX: should also have something loaded in DAR / DSISR */</comment>

        <switch pos:start="101:9" pos:end="127:9">switch <condition pos:start="101:16" pos:end="101:27">(<expr pos:start="101:17" pos:end="101:26"><name pos:start="101:17" pos:end="101:26">excp_model</name></expr>)</condition> <block pos:start="101:29" pos:end="127:9">{<block_content pos:start="103:9" pos:end="125:18">

        <case pos:start="103:9" pos:end="103:30">case <expr pos:start="103:14" pos:end="103:29"><name pos:start="103:14" pos:end="103:29">POWERPC_EXCP_40x</name></expr>:</case>

            <expr_stmt pos:start="105:13" pos:end="105:32"><expr pos:start="105:13" pos:end="105:31"><name pos:start="105:13" pos:end="105:16">srr0</name> <operator pos:start="105:18" pos:end="105:18">=</operator> <name pos:start="105:20" pos:end="105:31">SPR_40x_SRR2</name></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:32"><expr pos:start="107:13" pos:end="107:31"><name pos:start="107:13" pos:end="107:16">srr1</name> <operator pos:start="107:18" pos:end="107:18">=</operator> <name pos:start="107:20" pos:end="107:31">SPR_40x_SRR3</name></expr>;</expr_stmt>

            <break pos:start="109:13" pos:end="109:18">break;</break>

        <case pos:start="111:9" pos:end="111:32">case <expr pos:start="111:14" pos:end="111:31"><name pos:start="111:14" pos:end="111:31">POWERPC_EXCP_BOOKE</name></expr>:</case>

            <expr_stmt pos:start="113:13" pos:end="113:36"><expr pos:start="113:13" pos:end="113:35"><name pos:start="113:13" pos:end="113:16">srr0</name> <operator pos:start="113:18" pos:end="113:18">=</operator> <name pos:start="113:20" pos:end="113:35">SPR_BOOKE_MCSRR0</name></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:36"><expr pos:start="115:13" pos:end="115:35"><name pos:start="115:13" pos:end="115:16">srr1</name> <operator pos:start="115:18" pos:end="115:18">=</operator> <name pos:start="115:20" pos:end="115:35">SPR_BOOKE_MCSRR1</name></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:36"><expr pos:start="117:13" pos:end="117:35"><name pos:start="117:13" pos:end="117:17">asrr0</name> <operator pos:start="117:19" pos:end="117:19">=</operator> <name pos:start="117:21" pos:end="117:35">SPR_BOOKE_CSRR0</name></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:36"><expr pos:start="119:13" pos:end="119:35"><name pos:start="119:13" pos:end="119:17">asrr1</name> <operator pos:start="119:19" pos:end="119:19">=</operator> <name pos:start="119:21" pos:end="119:35">SPR_BOOKE_CSRR1</name></expr>;</expr_stmt>

            <break pos:start="121:13" pos:end="121:18">break;</break>

        <default pos:start="123:9" pos:end="123:16">default:</default>

            <break pos:start="125:13" pos:end="125:18">break;</break>

        </block_content>}</block></switch>

        <goto pos:start="129:9" pos:end="129:24">goto <name pos:start="129:14" pos:end="129:23">store_next</name>;</goto>

    <case pos:start="131:5" pos:end="134:0">case <expr pos:start="131:10" pos:end="131:25"><name pos:start="131:10" pos:end="131:25">POWERPC_EXCP_DSI</name></expr>:</case>       <comment type="block" pos:start="131:34" pos:end="131:79">/* Data storage exception                   */</comment>

<cpp:if pos:start="133:1" pos:end="133:30">#<cpp:directive pos:start="133:2" pos:end="133:3">if</cpp:directive> <expr pos:start="133:5" pos:end="133:30"><call pos:start="133:5" pos:end="133:30"><name pos:start="133:5" pos:end="133:11">defined</name> <argument_list pos:start="133:13" pos:end="133:30">(<argument pos:start="133:14" pos:end="133:29"><expr pos:start="133:14" pos:end="133:29"><name pos:start="133:14" pos:end="133:29">DEBUG_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="135:9" pos:end="144:0"><if pos:start="135:9" pos:end="144:0">if <condition pos:start="135:12" pos:end="135:26">(<expr pos:start="135:13" pos:end="135:25"><name pos:start="135:13" pos:end="135:20">loglevel</name> <operator pos:start="135:22" pos:end="135:23">!=</operator> <literal type="number" pos:start="135:25" pos:end="135:25">0</literal></expr>)</condition> <block pos:start="135:28" pos:end="144:0">{<block_content pos:start="137:13" pos:end="139:66">

            <expr_stmt pos:start="137:13" pos:end="139:66"><expr pos:start="137:13" pos:end="139:65"><call pos:start="137:13" pos:end="139:65"><name pos:start="137:13" pos:end="137:19">fprintf</name><argument_list pos:start="137:20" pos:end="139:65">(<argument pos:start="137:21" pos:end="137:27"><expr pos:start="137:21" pos:end="137:27"><name pos:start="137:21" pos:end="137:27">logfile</name></expr></argument>, <argument pos:start="137:30" pos:end="139:24"><expr pos:start="137:30" pos:end="139:24"><literal type="string" pos:start="137:30" pos:end="137:54">"DSI exception: DSISR=0x"</literal> <name pos:start="137:56" pos:end="137:60">ADDRX</name><literal type="string" pos:start="137:61" pos:end="137:69">" DAR=0x"</literal> <name pos:start="137:71" pos:end="137:75">ADDRX</name>

                    <literal type="string" pos:start="139:21" pos:end="139:24">"\n"</literal></expr></argument>, <argument pos:start="139:27" pos:end="139:45"><expr pos:start="139:27" pos:end="139:45"><name pos:start="139:27" pos:end="139:45"><name pos:start="139:27" pos:end="139:29">env</name><operator pos:start="139:30" pos:end="139:31">-&gt;</operator><name pos:start="139:32" pos:end="139:34">spr</name><index pos:start="139:35" pos:end="139:45">[<expr pos:start="139:36" pos:end="139:44"><name pos:start="139:36" pos:end="139:44">SPR_DSISR</name></expr>]</index></name></expr></argument>, <argument pos:start="139:48" pos:end="139:64"><expr pos:start="139:48" pos:end="139:64"><name pos:start="139:48" pos:end="139:64"><name pos:start="139:48" pos:end="139:50">env</name><operator pos:start="139:51" pos:end="139:52">-&gt;</operator><name pos:start="139:53" pos:end="139:55">spr</name><index pos:start="139:56" pos:end="139:64">[<expr pos:start="139:57" pos:end="139:63"><name pos:start="139:57" pos:end="139:63">SPR_DAR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="143:1" pos:end="143:6">#<cpp:directive pos:start="143:2" pos:end="143:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="145:9" pos:end="148:0"><expr pos:start="145:9" pos:end="145:18"><name pos:start="145:9" pos:end="145:14">msr_ri</name> <operator pos:start="145:16" pos:end="145:16">=</operator> <literal type="number" pos:start="145:18" pos:end="145:18">0</literal></expr>;</expr_stmt>

<cpp:if pos:start="147:1" pos:end="147:26">#<cpp:directive pos:start="147:2" pos:end="147:3">if</cpp:directive> <expr pos:start="147:5" pos:end="147:26"><call pos:start="147:5" pos:end="147:26"><name pos:start="147:5" pos:end="147:11">defined</name><argument_list pos:start="147:12" pos:end="147:26">(<argument pos:start="147:13" pos:end="147:25"><expr pos:start="147:13" pos:end="147:25"><name pos:start="147:13" pos:end="147:25">TARGET_PPC64H</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="149:9" pos:end="154:0"><if pos:start="149:9" pos:end="154:0">if <condition pos:start="149:12" pos:end="149:23">(<expr pos:start="149:13" pos:end="149:22"><name pos:start="149:13" pos:end="149:17">lpes1</name> <operator pos:start="149:19" pos:end="149:20">==</operator> <literal type="number" pos:start="149:22" pos:end="149:22">0</literal></expr>)</condition><block type="pseudo" pos:start="151:13" pos:end="154:0"><block_content pos:start="151:13" pos:end="154:0">

            <expr_stmt pos:start="151:13" pos:end="154:0"><expr pos:start="151:13" pos:end="151:22"><name pos:start="151:13" pos:end="151:18">msr_hv</name> <operator pos:start="151:20" pos:end="151:20">=</operator> <literal type="number" pos:start="151:22" pos:end="151:22">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="153:1" pos:end="153:6">#<cpp:directive pos:start="153:2" pos:end="153:6">endif</cpp:directive></cpp:endif>

        <goto pos:start="155:9" pos:end="155:24">goto <name pos:start="155:14" pos:end="155:23">store_next</name>;</goto>

    <case pos:start="157:5" pos:end="160:0">case <expr pos:start="157:10" pos:end="157:25"><name pos:start="157:10" pos:end="157:25">POWERPC_EXCP_ISI</name></expr>:</case>       <comment type="block" pos:start="157:34" pos:end="157:79">/* Instruction storage exception            */</comment>

<cpp:if pos:start="159:1" pos:end="159:30">#<cpp:directive pos:start="159:2" pos:end="159:3">if</cpp:directive> <expr pos:start="159:5" pos:end="159:30"><call pos:start="159:5" pos:end="159:30"><name pos:start="159:5" pos:end="159:11">defined</name> <argument_list pos:start="159:13" pos:end="159:30">(<argument pos:start="159:14" pos:end="159:29"><expr pos:start="159:14" pos:end="159:29"><name pos:start="159:14" pos:end="159:29">DEBUG_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="161:9" pos:end="170:0"><if pos:start="161:9" pos:end="170:0">if <condition pos:start="161:12" pos:end="161:26">(<expr pos:start="161:13" pos:end="161:25"><name pos:start="161:13" pos:end="161:20">loglevel</name> <operator pos:start="161:22" pos:end="161:23">!=</operator> <literal type="number" pos:start="161:25" pos:end="161:25">0</literal></expr>)</condition> <block pos:start="161:28" pos:end="170:0">{<block_content pos:start="163:13" pos:end="165:41">

            <expr_stmt pos:start="163:13" pos:end="165:41"><expr pos:start="163:13" pos:end="165:40"><call pos:start="163:13" pos:end="165:40"><name pos:start="163:13" pos:end="163:19">fprintf</name><argument_list pos:start="163:20" pos:end="165:40">(<argument pos:start="163:21" pos:end="163:27"><expr pos:start="163:21" pos:end="163:27"><name pos:start="163:21" pos:end="163:27">logfile</name></expr></argument>, <argument pos:start="163:30" pos:end="165:24"><expr pos:start="163:30" pos:end="165:24"><literal type="string" pos:start="163:30" pos:end="163:52">"ISI exception: msr=0x"</literal> <name pos:start="163:54" pos:end="163:58">ADDRX</name> <literal type="string" pos:start="163:60" pos:end="163:69">", nip=0x"</literal> <name pos:start="163:71" pos:end="163:75">ADDRX</name>

                    <literal type="string" pos:start="165:21" pos:end="165:24">"\n"</literal></expr></argument>, <argument pos:start="165:27" pos:end="165:29"><expr pos:start="165:27" pos:end="165:29"><name pos:start="165:27" pos:end="165:29">msr</name></expr></argument>, <argument pos:start="165:32" pos:end="165:39"><expr pos:start="165:32" pos:end="165:39"><name pos:start="165:32" pos:end="165:39"><name pos:start="165:32" pos:end="165:34">env</name><operator pos:start="165:35" pos:end="165:36">-&gt;</operator><name pos:start="165:37" pos:end="165:39">nip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="169:1" pos:end="169:6">#<cpp:directive pos:start="169:2" pos:end="169:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="171:9" pos:end="174:0"><expr pos:start="171:9" pos:end="171:18"><name pos:start="171:9" pos:end="171:14">msr_ri</name> <operator pos:start="171:16" pos:end="171:16">=</operator> <literal type="number" pos:start="171:18" pos:end="171:18">0</literal></expr>;</expr_stmt>

<cpp:if pos:start="173:1" pos:end="173:26">#<cpp:directive pos:start="173:2" pos:end="173:3">if</cpp:directive> <expr pos:start="173:5" pos:end="173:26"><call pos:start="173:5" pos:end="173:26"><name pos:start="173:5" pos:end="173:11">defined</name><argument_list pos:start="173:12" pos:end="173:26">(<argument pos:start="173:13" pos:end="173:25"><expr pos:start="173:13" pos:end="173:25"><name pos:start="173:13" pos:end="173:25">TARGET_PPC64H</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="175:9" pos:end="180:0"><if pos:start="175:9" pos:end="180:0">if <condition pos:start="175:12" pos:end="175:23">(<expr pos:start="175:13" pos:end="175:22"><name pos:start="175:13" pos:end="175:17">lpes1</name> <operator pos:start="175:19" pos:end="175:20">==</operator> <literal type="number" pos:start="175:22" pos:end="175:22">0</literal></expr>)</condition><block type="pseudo" pos:start="177:13" pos:end="180:0"><block_content pos:start="177:13" pos:end="180:0">

            <expr_stmt pos:start="177:13" pos:end="180:0"><expr pos:start="177:13" pos:end="177:22"><name pos:start="177:13" pos:end="177:18">msr_hv</name> <operator pos:start="177:20" pos:end="177:20">=</operator> <literal type="number" pos:start="177:22" pos:end="177:22">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="179:1" pos:end="179:6">#<cpp:directive pos:start="179:2" pos:end="179:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="181:9" pos:end="181:31"><expr pos:start="181:9" pos:end="181:30"><name pos:start="181:9" pos:end="181:11">msr</name> <operator pos:start="181:13" pos:end="181:14">|=</operator> <name pos:start="181:16" pos:end="181:30"><name pos:start="181:16" pos:end="181:18">env</name><operator pos:start="181:19" pos:end="181:20">-&gt;</operator><name pos:start="181:21" pos:end="181:30">error_code</name></name></expr>;</expr_stmt>

        <goto pos:start="183:9" pos:end="183:24">goto <name pos:start="183:14" pos:end="183:23">store_next</name>;</goto>

    <case pos:start="185:5" pos:end="185:31">case <expr pos:start="185:10" pos:end="185:30"><name pos:start="185:10" pos:end="185:30">POWERPC_EXCP_EXTERNAL</name></expr>:</case>  <comment type="block" pos:start="185:34" pos:end="185:79">/* External input                           */</comment>

        <expr_stmt pos:start="187:9" pos:end="190:0"><expr pos:start="187:9" pos:end="187:18"><name pos:start="187:9" pos:end="187:14">msr_ri</name> <operator pos:start="187:16" pos:end="187:16">=</operator> <literal type="number" pos:start="187:18" pos:end="187:18">0</literal></expr>;</expr_stmt>

<cpp:if pos:start="189:1" pos:end="189:26">#<cpp:directive pos:start="189:2" pos:end="189:3">if</cpp:directive> <expr pos:start="189:5" pos:end="189:26"><call pos:start="189:5" pos:end="189:26"><name pos:start="189:5" pos:end="189:11">defined</name><argument_list pos:start="189:12" pos:end="189:26">(<argument pos:start="189:13" pos:end="189:25"><expr pos:start="189:13" pos:end="189:25"><name pos:start="189:13" pos:end="189:25">TARGET_PPC64H</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="191:9" pos:end="196:0"><if pos:start="191:9" pos:end="196:0">if <condition pos:start="191:12" pos:end="191:23">(<expr pos:start="191:13" pos:end="191:22"><name pos:start="191:13" pos:end="191:17">lpes0</name> <operator pos:start="191:19" pos:end="191:20">==</operator> <literal type="number" pos:start="191:22" pos:end="191:22">1</literal></expr>)</condition><block type="pseudo" pos:start="193:13" pos:end="196:0"><block_content pos:start="193:13" pos:end="196:0">

            <expr_stmt pos:start="193:13" pos:end="196:0"><expr pos:start="193:13" pos:end="193:22"><name pos:start="193:13" pos:end="193:18">msr_hv</name> <operator pos:start="193:20" pos:end="193:20">=</operator> <literal type="number" pos:start="193:22" pos:end="193:22">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="195:1" pos:end="195:6">#<cpp:directive pos:start="195:2" pos:end="195:6">endif</cpp:directive></cpp:endif>

        <goto pos:start="197:9" pos:end="197:24">goto <name pos:start="197:14" pos:end="197:23">store_next</name>;</goto>

    <case pos:start="199:5" pos:end="199:28">case <expr pos:start="199:10" pos:end="199:27"><name pos:start="199:10" pos:end="199:27">POWERPC_EXCP_ALIGN</name></expr>:</case>     <comment type="block" pos:start="199:34" pos:end="199:79">/* Alignment exception                      */</comment>

        <expr_stmt pos:start="201:9" pos:end="204:0"><expr pos:start="201:9" pos:end="201:18"><name pos:start="201:9" pos:end="201:14">msr_ri</name> <operator pos:start="201:16" pos:end="201:16">=</operator> <literal type="number" pos:start="201:18" pos:end="201:18">0</literal></expr>;</expr_stmt>

<cpp:if pos:start="203:1" pos:end="203:26">#<cpp:directive pos:start="203:2" pos:end="203:3">if</cpp:directive> <expr pos:start="203:5" pos:end="203:26"><call pos:start="203:5" pos:end="203:26"><name pos:start="203:5" pos:end="203:11">defined</name><argument_list pos:start="203:12" pos:end="203:26">(<argument pos:start="203:13" pos:end="203:25"><expr pos:start="203:13" pos:end="203:25"><name pos:start="203:13" pos:end="203:25">TARGET_PPC64H</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="205:9" pos:end="210:0"><if pos:start="205:9" pos:end="210:0">if <condition pos:start="205:12" pos:end="205:23">(<expr pos:start="205:13" pos:end="205:22"><name pos:start="205:13" pos:end="205:17">lpes1</name> <operator pos:start="205:19" pos:end="205:20">==</operator> <literal type="number" pos:start="205:22" pos:end="205:22">0</literal></expr>)</condition><block type="pseudo" pos:start="207:13" pos:end="210:0"><block_content pos:start="207:13" pos:end="210:0">

            <expr_stmt pos:start="207:13" pos:end="210:0"><expr pos:start="207:13" pos:end="207:22"><name pos:start="207:13" pos:end="207:18">msr_hv</name> <operator pos:start="207:20" pos:end="207:20">=</operator> <literal type="number" pos:start="207:22" pos:end="207:22">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="209:1" pos:end="209:6">#<cpp:directive pos:start="209:2" pos:end="209:6">endif</cpp:directive></cpp:endif>

        <comment type="block" pos:start="211:9" pos:end="211:32">/* XXX: this is false */</comment>

        <comment type="block" pos:start="213:9" pos:end="213:51">/* Get rS/rD and rA from faulting opcode */</comment>

        <expr_stmt pos:start="215:9" pos:end="215:77"><expr pos:start="215:9" pos:end="215:76"><name pos:start="215:9" pos:end="215:27"><name pos:start="215:9" pos:end="215:11">env</name><operator pos:start="215:12" pos:end="215:13">-&gt;</operator><name pos:start="215:14" pos:end="215:16">spr</name><index pos:start="215:17" pos:end="215:27">[<expr pos:start="215:18" pos:end="215:26"><name pos:start="215:18" pos:end="215:26">SPR_DSISR</name></expr>]</index></name> <operator pos:start="215:29" pos:end="215:30">|=</operator> <operator pos:start="215:32" pos:end="215:32">(</operator><call pos:start="215:33" pos:end="215:56"><name pos:start="215:33" pos:end="215:40">ldl_code</name><argument_list pos:start="215:41" pos:end="215:56">(<argument pos:start="215:42" pos:end="215:55"><expr pos:start="215:42" pos:end="215:55"><operator pos:start="215:42" pos:end="215:42">(</operator><name pos:start="215:43" pos:end="215:50"><name pos:start="215:43" pos:end="215:45">env</name><operator pos:start="215:46" pos:end="215:47">-&gt;</operator><name pos:start="215:48" pos:end="215:50">nip</name></name> <operator pos:start="215:52" pos:end="215:52">-</operator> <literal type="number" pos:start="215:54" pos:end="215:54">4</literal><operator pos:start="215:55" pos:end="215:55">)</operator></expr></argument>)</argument_list></call> <operator pos:start="215:58" pos:end="215:58">&amp;</operator> <literal type="number" pos:start="215:60" pos:end="215:69">0x03FF0000</literal><operator pos:start="215:70" pos:end="215:70">)</operator> <operator pos:start="215:72" pos:end="215:73">&gt;&gt;</operator> <literal type="number" pos:start="215:75" pos:end="215:76">16</literal></expr>;</expr_stmt>

        <goto pos:start="217:9" pos:end="217:27">goto <name pos:start="217:14" pos:end="217:26">store_current</name>;</goto>

    <case pos:start="219:5" pos:end="219:30">case <expr pos:start="219:10" pos:end="219:29"><name pos:start="219:10" pos:end="219:29">POWERPC_EXCP_PROGRAM</name></expr>:</case>   <comment type="block" pos:start="219:34" pos:end="219:79">/* Program exception                        */</comment>

        <switch pos:start="221:9" pos:end="345:9">switch <condition pos:start="221:16" pos:end="221:39">(<expr pos:start="221:17" pos:end="221:38"><name pos:start="221:17" pos:end="221:31"><name pos:start="221:17" pos:end="221:19">env</name><operator pos:start="221:20" pos:end="221:21">-&gt;</operator><name pos:start="221:22" pos:end="221:31">error_code</name></name> <operator pos:start="221:33" pos:end="221:33">&amp;</operator> <operator pos:start="221:35" pos:end="221:35">~</operator><literal type="number" pos:start="221:36" pos:end="221:38">0xF</literal></expr>)</condition> <block pos:start="221:41" pos:end="345:9">{<block_content pos:start="223:9" pos:end="343:18">

        <case pos:start="223:9" pos:end="223:29">case <expr pos:start="223:14" pos:end="223:28"><name pos:start="223:14" pos:end="223:28">POWERPC_EXCP_FP</name></expr>:</case>

            <if_stmt pos:start="225:13" pos:end="239:13"><if pos:start="225:13" pos:end="239:13">if <condition pos:start="225:16" pos:end="225:62">(<expr pos:start="225:17" pos:end="225:61"><operator pos:start="225:17" pos:end="225:17">(</operator><name pos:start="225:18" pos:end="225:24">msr_fe0</name> <operator pos:start="225:26" pos:end="225:27">==</operator> <literal type="number" pos:start="225:29" pos:end="225:29">0</literal> <operator pos:start="225:31" pos:end="225:32">&amp;&amp;</operator> <name pos:start="225:34" pos:end="225:40">msr_fe1</name> <operator pos:start="225:42" pos:end="225:43">==</operator> <literal type="number" pos:start="225:45" pos:end="225:45">0</literal><operator pos:start="225:46" pos:end="225:46">)</operator> <operator pos:start="225:48" pos:end="225:49">||</operator> <name pos:start="225:51" pos:end="225:56">msr_fp</name> <operator pos:start="225:58" pos:end="225:59">==</operator> <literal type="number" pos:start="225:61" pos:end="225:61">0</literal></expr>)</condition> <block pos:start="225:64" pos:end="239:13">{<block_content pos:start="229:17" pos:end="237:23">

<cpp:if pos:start="227:1" pos:end="227:30">#<cpp:directive pos:start="227:2" pos:end="227:3">if</cpp:directive> <expr pos:start="227:5" pos:end="227:30"><call pos:start="227:5" pos:end="227:30"><name pos:start="227:5" pos:end="227:11">defined</name> <argument_list pos:start="227:13" pos:end="227:30">(<argument pos:start="227:14" pos:end="227:29"><expr pos:start="227:14" pos:end="227:29"><name pos:start="227:14" pos:end="227:29">DEBUG_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>

                <if_stmt pos:start="229:17" pos:end="236:0"><if pos:start="229:17" pos:end="236:0">if <condition pos:start="229:20" pos:end="229:34">(<expr pos:start="229:21" pos:end="229:33"><name pos:start="229:21" pos:end="229:28">loglevel</name> <operator pos:start="229:30" pos:end="229:31">!=</operator> <literal type="number" pos:start="229:33" pos:end="229:33">0</literal></expr>)</condition> <block pos:start="229:36" pos:end="236:0">{<block_content pos:start="231:21" pos:end="231:74">

                    <expr_stmt pos:start="231:21" pos:end="231:74"><expr pos:start="231:21" pos:end="231:73"><call pos:start="231:21" pos:end="231:73"><name pos:start="231:21" pos:end="231:27">fprintf</name><argument_list pos:start="231:28" pos:end="231:73">(<argument pos:start="231:29" pos:end="231:35"><expr pos:start="231:29" pos:end="231:35"><name pos:start="231:29" pos:end="231:35">logfile</name></expr></argument>, <argument pos:start="231:38" pos:end="231:72"><expr pos:start="231:38" pos:end="231:72"><literal type="string" pos:start="231:38" pos:end="231:72">"Ignore floating point exception\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="235:1" pos:end="235:6">#<cpp:directive pos:start="235:2" pos:end="235:6">endif</cpp:directive></cpp:endif>

                <return pos:start="237:17" pos:end="237:23">return;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="241:13" pos:end="244:0"><expr pos:start="241:13" pos:end="241:22"><name pos:start="241:13" pos:end="241:18">msr_ri</name> <operator pos:start="241:20" pos:end="241:20">=</operator> <literal type="number" pos:start="241:22" pos:end="241:22">0</literal></expr>;</expr_stmt>

<cpp:if pos:start="243:1" pos:end="243:26">#<cpp:directive pos:start="243:2" pos:end="243:3">if</cpp:directive> <expr pos:start="243:5" pos:end="243:26"><call pos:start="243:5" pos:end="243:26"><name pos:start="243:5" pos:end="243:11">defined</name><argument_list pos:start="243:12" pos:end="243:26">(<argument pos:start="243:13" pos:end="243:25"><expr pos:start="243:13" pos:end="243:25"><name pos:start="243:13" pos:end="243:25">TARGET_PPC64H</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <if_stmt pos:start="245:13" pos:end="250:0"><if pos:start="245:13" pos:end="250:0">if <condition pos:start="245:16" pos:end="245:27">(<expr pos:start="245:17" pos:end="245:26"><name pos:start="245:17" pos:end="245:21">lpes1</name> <operator pos:start="245:23" pos:end="245:24">==</operator> <literal type="number" pos:start="245:26" pos:end="245:26">0</literal></expr>)</condition><block type="pseudo" pos:start="247:17" pos:end="250:0"><block_content pos:start="247:17" pos:end="250:0">

                <expr_stmt pos:start="247:17" pos:end="250:0"><expr pos:start="247:17" pos:end="247:26"><name pos:start="247:17" pos:end="247:22">msr_hv</name> <operator pos:start="247:24" pos:end="247:24">=</operator> <literal type="number" pos:start="247:26" pos:end="247:26">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="249:1" pos:end="249:6">#<cpp:directive pos:start="249:2" pos:end="249:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="251:13" pos:end="251:30"><expr pos:start="251:13" pos:end="251:29"><name pos:start="251:13" pos:end="251:15">msr</name> <operator pos:start="251:17" pos:end="251:18">|=</operator> <literal type="number" pos:start="251:20" pos:end="251:29">0x00100000</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="253:13" pos:end="253:24">/* Set FX */</comment>

            <expr_stmt pos:start="255:13" pos:end="255:33"><expr pos:start="255:13" pos:end="255:32"><name pos:start="255:13" pos:end="255:25"><name pos:start="255:13" pos:end="255:15">env</name><operator pos:start="255:16" pos:end="255:17">-&gt;</operator><name pos:start="255:18" pos:end="255:22">fpscr</name><index pos:start="255:23" pos:end="255:25">[<expr pos:start="255:24" pos:end="255:24"><literal type="number" pos:start="255:24" pos:end="255:24">7</literal></expr>]</index></name> <operator pos:start="255:27" pos:end="255:28">|=</operator> <literal type="number" pos:start="255:30" pos:end="255:32">0x8</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="257:13" pos:end="257:37">/* Finally, update FEX */</comment>

            <if_stmt pos:start="259:13" pos:end="263:37"><if pos:start="259:13" pos:end="263:37">if <condition pos:start="259:16" pos:end="261:62">(<expr pos:start="259:17" pos:end="261:61"><operator pos:start="259:17" pos:end="259:17">(</operator><operator pos:start="259:18" pos:end="259:18">(</operator><operator pos:start="259:19" pos:end="259:19">(</operator><name pos:start="259:20" pos:end="259:32"><name pos:start="259:20" pos:end="259:22">env</name><operator pos:start="259:23" pos:end="259:24">-&gt;</operator><name pos:start="259:25" pos:end="259:29">fpscr</name><index pos:start="259:30" pos:end="259:32">[<expr pos:start="259:31" pos:end="259:31"><literal type="number" pos:start="259:31" pos:end="259:31">7</literal></expr>]</index></name> <operator pos:start="259:34" pos:end="259:34">&amp;</operator> <literal type="number" pos:start="259:36" pos:end="259:38">0x3</literal><operator pos:start="259:39" pos:end="259:39">)</operator> <operator pos:start="259:41" pos:end="259:42">&lt;&lt;</operator> <literal type="number" pos:start="259:44" pos:end="259:44">3</literal><operator pos:start="259:45" pos:end="259:45">)</operator> <operator pos:start="259:47" pos:end="259:47">|</operator> <operator pos:start="259:49" pos:end="259:49">(</operator><name pos:start="259:50" pos:end="259:62"><name pos:start="259:50" pos:end="259:52">env</name><operator pos:start="259:53" pos:end="259:54">-&gt;</operator><name pos:start="259:55" pos:end="259:59">fpscr</name><index pos:start="259:60" pos:end="259:62">[<expr pos:start="259:61" pos:end="259:61"><literal type="number" pos:start="259:61" pos:end="259:61">6</literal></expr>]</index></name> <operator pos:start="259:64" pos:end="259:65">&gt;&gt;</operator> <literal type="number" pos:start="259:67" pos:end="259:67">1</literal><operator pos:start="259:68" pos:end="259:68">)</operator><operator pos:start="259:69" pos:end="259:69">)</operator> <operator pos:start="259:71" pos:end="259:71">&amp;</operator>

                <operator pos:start="261:17" pos:end="261:17">(</operator><operator pos:start="261:18" pos:end="261:18">(</operator><name pos:start="261:19" pos:end="261:31"><name pos:start="261:19" pos:end="261:21">env</name><operator pos:start="261:22" pos:end="261:23">-&gt;</operator><name pos:start="261:24" pos:end="261:28">fpscr</name><index pos:start="261:29" pos:end="261:31">[<expr pos:start="261:30" pos:end="261:30"><literal type="number" pos:start="261:30" pos:end="261:30">1</literal></expr>]</index></name> <operator pos:start="261:33" pos:end="261:34">&lt;&lt;</operator> <literal type="number" pos:start="261:36" pos:end="261:36">1</literal><operator pos:start="261:37" pos:end="261:37">)</operator> <operator pos:start="261:39" pos:end="261:39">|</operator> <operator pos:start="261:41" pos:end="261:41">(</operator><name pos:start="261:42" pos:end="261:54"><name pos:start="261:42" pos:end="261:44">env</name><operator pos:start="261:45" pos:end="261:46">-&gt;</operator><name pos:start="261:47" pos:end="261:51">fpscr</name><index pos:start="261:52" pos:end="261:54">[<expr pos:start="261:53" pos:end="261:53"><literal type="number" pos:start="261:53" pos:end="261:53">0</literal></expr>]</index></name> <operator pos:start="261:56" pos:end="261:57">&gt;&gt;</operator> <literal type="number" pos:start="261:59" pos:end="261:59">3</literal><operator pos:start="261:60" pos:end="261:60">)</operator><operator pos:start="261:61" pos:end="261:61">)</operator></expr>)</condition><block type="pseudo" pos:start="263:17" pos:end="263:37"><block_content pos:start="263:17" pos:end="263:37">

                <expr_stmt pos:start="263:17" pos:end="263:37"><expr pos:start="263:17" pos:end="263:36"><name pos:start="263:17" pos:end="263:29"><name pos:start="263:17" pos:end="263:19">env</name><operator pos:start="263:20" pos:end="263:21">-&gt;</operator><name pos:start="263:22" pos:end="263:26">fpscr</name><index pos:start="263:27" pos:end="263:29">[<expr pos:start="263:28" pos:end="263:28"><literal type="number" pos:start="263:28" pos:end="263:28">7</literal></expr>]</index></name> <operator pos:start="263:31" pos:end="263:32">|=</operator> <literal type="number" pos:start="263:34" pos:end="263:36">0x4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="265:13" pos:end="271:13"><if pos:start="265:13" pos:end="271:13">if <condition pos:start="265:16" pos:end="265:35">(<expr pos:start="265:17" pos:end="265:34"><name pos:start="265:17" pos:end="265:23">msr_fe0</name> <operator pos:start="265:25" pos:end="265:26">!=</operator> <name pos:start="265:28" pos:end="265:34">msr_fe1</name></expr>)</condition> <block pos:start="265:37" pos:end="271:13">{<block_content pos:start="267:17" pos:end="269:35">

                <expr_stmt pos:start="267:17" pos:end="267:34"><expr pos:start="267:17" pos:end="267:33"><name pos:start="267:17" pos:end="267:19">msr</name> <operator pos:start="267:21" pos:end="267:22">|=</operator> <literal type="number" pos:start="267:24" pos:end="267:33">0x00010000</literal></expr>;</expr_stmt>

                <goto pos:start="269:17" pos:end="269:35">goto <name pos:start="269:22" pos:end="269:34">store_current</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <break pos:start="273:13" pos:end="273:18">break;</break>

        <case pos:start="275:9" pos:end="278:0">case <expr pos:start="275:14" pos:end="275:31"><name pos:start="275:14" pos:end="275:31">POWERPC_EXCP_INVAL</name></expr>:</case>

<cpp:if pos:start="277:1" pos:end="277:30">#<cpp:directive pos:start="277:2" pos:end="277:3">if</cpp:directive> <expr pos:start="277:5" pos:end="277:30"><call pos:start="277:5" pos:end="277:30"><name pos:start="277:5" pos:end="277:11">defined</name> <argument_list pos:start="277:13" pos:end="277:30">(<argument pos:start="277:14" pos:end="277:29"><expr pos:start="277:14" pos:end="277:29"><name pos:start="277:14" pos:end="277:29">DEBUG_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <if_stmt pos:start="279:13" pos:end="288:0"><if pos:start="279:13" pos:end="288:0">if <condition pos:start="279:16" pos:end="279:30">(<expr pos:start="279:17" pos:end="279:29"><name pos:start="279:17" pos:end="279:24">loglevel</name> <operator pos:start="279:26" pos:end="279:27">!=</operator> <literal type="number" pos:start="279:29" pos:end="279:29">0</literal></expr>)</condition> <block pos:start="279:32" pos:end="288:0">{<block_content pos:start="281:17" pos:end="283:34">

                <expr_stmt pos:start="281:17" pos:end="283:34"><expr pos:start="281:17" pos:end="283:33"><call pos:start="281:17" pos:end="283:33"><name pos:start="281:17" pos:end="281:23">fprintf</name><argument_list pos:start="281:24" pos:end="283:33">(<argument pos:start="281:25" pos:end="281:31"><expr pos:start="281:25" pos:end="281:31"><name pos:start="281:25" pos:end="281:31">logfile</name></expr></argument>, <argument pos:start="281:34" pos:end="281:71"><expr pos:start="281:34" pos:end="281:71"><literal type="string" pos:start="281:34" pos:end="281:60">"Invalid instruction at 0x"</literal> <name pos:start="281:62" pos:end="281:66">ADDRX</name> <literal type="string" pos:start="281:68" pos:end="281:71">"\n"</literal></expr></argument>,

                        <argument pos:start="283:25" pos:end="283:32"><expr pos:start="283:25" pos:end="283:32"><name pos:start="283:25" pos:end="283:32"><name pos:start="283:25" pos:end="283:27">env</name><operator pos:start="283:28" pos:end="283:29">-&gt;</operator><name pos:start="283:30" pos:end="283:32">nip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="287:1" pos:end="287:6">#<cpp:directive pos:start="287:2" pos:end="287:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="289:13" pos:end="292:0"><expr pos:start="289:13" pos:end="289:22"><name pos:start="289:13" pos:end="289:18">msr_ri</name> <operator pos:start="289:20" pos:end="289:20">=</operator> <literal type="number" pos:start="289:22" pos:end="289:22">0</literal></expr>;</expr_stmt>

<cpp:if pos:start="291:1" pos:end="291:26">#<cpp:directive pos:start="291:2" pos:end="291:3">if</cpp:directive> <expr pos:start="291:5" pos:end="291:26"><call pos:start="291:5" pos:end="291:26"><name pos:start="291:5" pos:end="291:11">defined</name><argument_list pos:start="291:12" pos:end="291:26">(<argument pos:start="291:13" pos:end="291:25"><expr pos:start="291:13" pos:end="291:25"><name pos:start="291:13" pos:end="291:25">TARGET_PPC64H</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <if_stmt pos:start="293:13" pos:end="298:0"><if pos:start="293:13" pos:end="298:0">if <condition pos:start="293:16" pos:end="293:27">(<expr pos:start="293:17" pos:end="293:26"><name pos:start="293:17" pos:end="293:21">lpes1</name> <operator pos:start="293:23" pos:end="293:24">==</operator> <literal type="number" pos:start="293:26" pos:end="293:26">0</literal></expr>)</condition><block type="pseudo" pos:start="295:17" pos:end="298:0"><block_content pos:start="295:17" pos:end="298:0">

                <expr_stmt pos:start="295:17" pos:end="298:0"><expr pos:start="295:17" pos:end="295:26"><name pos:start="295:17" pos:end="295:22">msr_hv</name> <operator pos:start="295:24" pos:end="295:24">=</operator> <literal type="number" pos:start="295:26" pos:end="295:26">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="297:1" pos:end="297:6">#<cpp:directive pos:start="297:2" pos:end="297:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="299:13" pos:end="299:30"><expr pos:start="299:13" pos:end="299:29"><name pos:start="299:13" pos:end="299:15">msr</name> <operator pos:start="299:17" pos:end="299:18">|=</operator> <literal type="number" pos:start="299:20" pos:end="299:29">0x00080000</literal></expr>;</expr_stmt>

            <break pos:start="301:13" pos:end="301:18">break;</break>

        <case pos:start="303:9" pos:end="303:31">case <expr pos:start="303:14" pos:end="303:30"><name pos:start="303:14" pos:end="303:30">POWERPC_EXCP_PRIV</name></expr>:</case>

            <expr_stmt pos:start="305:13" pos:end="308:0"><expr pos:start="305:13" pos:end="305:22"><name pos:start="305:13" pos:end="305:18">msr_ri</name> <operator pos:start="305:20" pos:end="305:20">=</operator> <literal type="number" pos:start="305:22" pos:end="305:22">0</literal></expr>;</expr_stmt>

<cpp:if pos:start="307:1" pos:end="307:26">#<cpp:directive pos:start="307:2" pos:end="307:3">if</cpp:directive> <expr pos:start="307:5" pos:end="307:26"><call pos:start="307:5" pos:end="307:26"><name pos:start="307:5" pos:end="307:11">defined</name><argument_list pos:start="307:12" pos:end="307:26">(<argument pos:start="307:13" pos:end="307:25"><expr pos:start="307:13" pos:end="307:25"><name pos:start="307:13" pos:end="307:25">TARGET_PPC64H</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <if_stmt pos:start="309:13" pos:end="314:0"><if pos:start="309:13" pos:end="314:0">if <condition pos:start="309:16" pos:end="309:27">(<expr pos:start="309:17" pos:end="309:26"><name pos:start="309:17" pos:end="309:21">lpes1</name> <operator pos:start="309:23" pos:end="309:24">==</operator> <literal type="number" pos:start="309:26" pos:end="309:26">0</literal></expr>)</condition><block type="pseudo" pos:start="311:17" pos:end="314:0"><block_content pos:start="311:17" pos:end="314:0">

                <expr_stmt pos:start="311:17" pos:end="314:0"><expr pos:start="311:17" pos:end="311:26"><name pos:start="311:17" pos:end="311:22">msr_hv</name> <operator pos:start="311:24" pos:end="311:24">=</operator> <literal type="number" pos:start="311:26" pos:end="311:26">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="313:1" pos:end="313:6">#<cpp:directive pos:start="313:2" pos:end="313:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="315:13" pos:end="315:30"><expr pos:start="315:13" pos:end="315:29"><name pos:start="315:13" pos:end="315:15">msr</name> <operator pos:start="315:17" pos:end="315:18">|=</operator> <literal type="number" pos:start="315:20" pos:end="315:29">0x00040000</literal></expr>;</expr_stmt>

            <break pos:start="317:13" pos:end="317:18">break;</break>

        <case pos:start="319:9" pos:end="319:31">case <expr pos:start="319:14" pos:end="319:30"><name pos:start="319:14" pos:end="319:30">POWERPC_EXCP_TRAP</name></expr>:</case>

            <expr_stmt pos:start="321:13" pos:end="324:0"><expr pos:start="321:13" pos:end="321:22"><name pos:start="321:13" pos:end="321:18">msr_ri</name> <operator pos:start="321:20" pos:end="321:20">=</operator> <literal type="number" pos:start="321:22" pos:end="321:22">0</literal></expr>;</expr_stmt>

<cpp:if pos:start="323:1" pos:end="323:26">#<cpp:directive pos:start="323:2" pos:end="323:3">if</cpp:directive> <expr pos:start="323:5" pos:end="323:26"><call pos:start="323:5" pos:end="323:26"><name pos:start="323:5" pos:end="323:11">defined</name><argument_list pos:start="323:12" pos:end="323:26">(<argument pos:start="323:13" pos:end="323:25"><expr pos:start="323:13" pos:end="323:25"><name pos:start="323:13" pos:end="323:25">TARGET_PPC64H</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <if_stmt pos:start="325:13" pos:end="330:0"><if pos:start="325:13" pos:end="330:0">if <condition pos:start="325:16" pos:end="325:27">(<expr pos:start="325:17" pos:end="325:26"><name pos:start="325:17" pos:end="325:21">lpes1</name> <operator pos:start="325:23" pos:end="325:24">==</operator> <literal type="number" pos:start="325:26" pos:end="325:26">0</literal></expr>)</condition><block type="pseudo" pos:start="327:17" pos:end="330:0"><block_content pos:start="327:17" pos:end="330:0">

                <expr_stmt pos:start="327:17" pos:end="330:0"><expr pos:start="327:17" pos:end="327:26"><name pos:start="327:17" pos:end="327:22">msr_hv</name> <operator pos:start="327:24" pos:end="327:24">=</operator> <literal type="number" pos:start="327:26" pos:end="327:26">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="329:1" pos:end="329:6">#<cpp:directive pos:start="329:2" pos:end="329:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="331:13" pos:end="331:30"><expr pos:start="331:13" pos:end="331:29"><name pos:start="331:13" pos:end="331:15">msr</name> <operator pos:start="331:17" pos:end="331:18">|=</operator> <literal type="number" pos:start="331:20" pos:end="331:29">0x00020000</literal></expr>;</expr_stmt>

            <break pos:start="333:13" pos:end="333:18">break;</break>

        <default pos:start="335:9" pos:end="335:16">default:</default>

            <comment type="block" pos:start="337:13" pos:end="337:36">/* Should never occur */</comment>

            <expr_stmt pos:start="339:13" pos:end="341:39"><expr pos:start="339:13" pos:end="341:38"><call pos:start="339:13" pos:end="341:38"><name pos:start="339:13" pos:end="339:21">cpu_abort</name><argument_list pos:start="339:22" pos:end="341:38">(<argument pos:start="339:23" pos:end="339:25"><expr pos:start="339:23" pos:end="339:25"><name pos:start="339:23" pos:end="339:25">env</name></expr></argument>, <argument pos:start="339:28" pos:end="339:69"><expr pos:start="339:28" pos:end="339:69"><literal type="string" pos:start="339:28" pos:end="339:69">"Invalid program exception %d. Aborting\n"</literal></expr></argument>,

                      <argument pos:start="341:23" pos:end="341:37"><expr pos:start="341:23" pos:end="341:37"><name pos:start="341:23" pos:end="341:37"><name pos:start="341:23" pos:end="341:25">env</name><operator pos:start="341:26" pos:end="341:27">-&gt;</operator><name pos:start="341:28" pos:end="341:37">error_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="343:13" pos:end="343:18">break;</break>

        </block_content>}</block></switch>

        <goto pos:start="347:9" pos:end="347:24">goto <name pos:start="347:14" pos:end="347:23">store_next</name>;</goto>

    <case pos:start="349:5" pos:end="349:26">case <expr pos:start="349:10" pos:end="349:25"><name pos:start="349:10" pos:end="349:25">POWERPC_EXCP_FPU</name></expr>:</case>       <comment type="block" pos:start="349:34" pos:end="349:79">/* Floating-point unavailable exception     */</comment>

        <expr_stmt pos:start="351:9" pos:end="354:0"><expr pos:start="351:9" pos:end="351:18"><name pos:start="351:9" pos:end="351:14">msr_ri</name> <operator pos:start="351:16" pos:end="351:16">=</operator> <literal type="number" pos:start="351:18" pos:end="351:18">0</literal></expr>;</expr_stmt>

<cpp:if pos:start="353:1" pos:end="353:26">#<cpp:directive pos:start="353:2" pos:end="353:3">if</cpp:directive> <expr pos:start="353:5" pos:end="353:26"><call pos:start="353:5" pos:end="353:26"><name pos:start="353:5" pos:end="353:11">defined</name><argument_list pos:start="353:12" pos:end="353:26">(<argument pos:start="353:13" pos:end="353:25"><expr pos:start="353:13" pos:end="353:25"><name pos:start="353:13" pos:end="353:25">TARGET_PPC64H</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="355:9" pos:end="360:0"><if pos:start="355:9" pos:end="360:0">if <condition pos:start="355:12" pos:end="355:23">(<expr pos:start="355:13" pos:end="355:22"><name pos:start="355:13" pos:end="355:17">lpes1</name> <operator pos:start="355:19" pos:end="355:20">==</operator> <literal type="number" pos:start="355:22" pos:end="355:22">0</literal></expr>)</condition><block type="pseudo" pos:start="357:13" pos:end="360:0"><block_content pos:start="357:13" pos:end="360:0">

            <expr_stmt pos:start="357:13" pos:end="360:0"><expr pos:start="357:13" pos:end="357:22"><name pos:start="357:13" pos:end="357:18">msr_hv</name> <operator pos:start="357:20" pos:end="357:20">=</operator> <literal type="number" pos:start="357:22" pos:end="357:22">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="359:1" pos:end="359:6">#<cpp:directive pos:start="359:2" pos:end="359:6">endif</cpp:directive></cpp:endif>

        <goto pos:start="361:9" pos:end="361:27">goto <name pos:start="361:14" pos:end="361:26">store_current</name>;</goto>

    <case pos:start="363:5" pos:end="363:30">case <expr pos:start="363:10" pos:end="363:29"><name pos:start="363:10" pos:end="363:29">POWERPC_EXCP_SYSCALL</name></expr>:</case>   <comment type="block" pos:start="363:34" pos:end="363:79">/* System call exception                    */</comment>

        <comment type="block" pos:start="365:9" pos:end="367:39">/* NOTE: this is a temporary hack to support graphics OSI

           calls from the MOL driver */</comment>

        <comment type="block" pos:start="369:9" pos:end="369:32">/* XXX: To be removed */</comment>

        <if_stmt pos:start="371:9" pos:end="379:9"><if pos:start="371:9" pos:end="379:9">if <condition pos:start="371:12" pos:end="373:26">(<expr pos:start="371:13" pos:end="373:25"><name pos:start="371:13" pos:end="371:23"><name pos:start="371:13" pos:end="371:15">env</name><operator pos:start="371:16" pos:end="371:17">-&gt;</operator><name pos:start="371:18" pos:end="371:20">gpr</name><index pos:start="371:21" pos:end="371:23">[<expr pos:start="371:22" pos:end="371:22"><literal type="number" pos:start="371:22" pos:end="371:22">3</literal></expr>]</index></name> <operator pos:start="371:25" pos:end="371:26">==</operator> <literal type="number" pos:start="371:28" pos:end="371:37">0x113724fa</literal> <operator pos:start="371:39" pos:end="371:40">&amp;&amp;</operator> <name pos:start="371:42" pos:end="371:52"><name pos:start="371:42" pos:end="371:44">env</name><operator pos:start="371:45" pos:end="371:46">-&gt;</operator><name pos:start="371:47" pos:end="371:49">gpr</name><index pos:start="371:50" pos:end="371:52">[<expr pos:start="371:51" pos:end="371:51"><literal type="number" pos:start="371:51" pos:end="371:51">4</literal></expr>]</index></name> <operator pos:start="371:54" pos:end="371:55">==</operator> <literal type="number" pos:start="371:57" pos:end="371:66">0x77810f9b</literal> <operator pos:start="371:68" pos:end="371:69">&amp;&amp;</operator>

            <name pos:start="373:13" pos:end="373:25"><name pos:start="373:13" pos:end="373:15">env</name><operator pos:start="373:16" pos:end="373:17">-&gt;</operator><name pos:start="373:18" pos:end="373:25">osi_call</name></name></expr>)</condition> <block pos:start="373:28" pos:end="379:9">{<block_content pos:start="375:13" pos:end="377:23">

            <if_stmt pos:start="375:13" pos:end="377:23"><if pos:start="375:13" pos:end="377:23">if <condition pos:start="375:16" pos:end="375:40">(<expr pos:start="375:17" pos:end="375:39"><call pos:start="375:17" pos:end="375:34"><name pos:start="375:17" pos:end="375:29"><name pos:start="375:17" pos:end="375:19">env</name><operator pos:start="375:20" pos:end="375:21">-&gt;</operator><name pos:start="375:22" pos:end="375:29">osi_call</name></name><argument_list pos:start="375:30" pos:end="375:34">(<argument pos:start="375:31" pos:end="375:33"><expr pos:start="375:31" pos:end="375:33"><name pos:start="375:31" pos:end="375:33">env</name></expr></argument>)</argument_list></call> <operator pos:start="375:36" pos:end="375:37">!=</operator> <literal type="number" pos:start="375:39" pos:end="375:39">0</literal></expr>)</condition><block type="pseudo" pos:start="377:17" pos:end="377:23"><block_content pos:start="377:17" pos:end="377:23">

                <return pos:start="377:17" pos:end="377:23">return;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="381:9" pos:end="385:9"><if pos:start="381:9" pos:end="385:9">if <condition pos:start="381:12" pos:end="381:35">(<expr pos:start="381:13" pos:end="381:34"><name pos:start="381:13" pos:end="381:20">loglevel</name> <operator pos:start="381:22" pos:end="381:22">&amp;</operator> <name pos:start="381:24" pos:end="381:34">CPU_LOG_INT</name></expr>)</condition> <block pos:start="381:37" pos:end="385:9">{<block_content pos:start="383:13" pos:end="383:30">

            <expr_stmt pos:start="383:13" pos:end="383:30"><expr pos:start="383:13" pos:end="383:29"><call pos:start="383:13" pos:end="383:29"><name pos:start="383:13" pos:end="383:24">dump_syscall</name><argument_list pos:start="383:25" pos:end="383:29">(<argument pos:start="383:26" pos:end="383:28"><expr pos:start="383:26" pos:end="383:28"><name pos:start="383:26" pos:end="383:28">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="387:9" pos:end="390:0"><expr pos:start="387:9" pos:end="387:18"><name pos:start="387:9" pos:end="387:14">msr_ri</name> <operator pos:start="387:16" pos:end="387:16">=</operator> <literal type="number" pos:start="387:18" pos:end="387:18">0</literal></expr>;</expr_stmt>

<cpp:if pos:start="389:1" pos:end="389:26">#<cpp:directive pos:start="389:2" pos:end="389:3">if</cpp:directive> <expr pos:start="389:5" pos:end="389:26"><call pos:start="389:5" pos:end="389:26"><name pos:start="389:5" pos:end="389:11">defined</name><argument_list pos:start="389:12" pos:end="389:26">(<argument pos:start="389:13" pos:end="389:25"><expr pos:start="389:13" pos:end="389:25"><name pos:start="389:13" pos:end="389:25">TARGET_PPC64H</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="391:9" pos:end="396:0"><if pos:start="391:9" pos:end="396:0">if <condition pos:start="391:12" pos:end="391:51">(<expr pos:start="391:13" pos:end="391:50"><name pos:start="391:13" pos:end="391:15">lev</name> <operator pos:start="391:17" pos:end="391:18">==</operator> <literal type="number" pos:start="391:20" pos:end="391:20">1</literal> <operator pos:start="391:22" pos:end="391:23">||</operator> <operator pos:start="391:25" pos:end="391:25">(</operator><name pos:start="391:26" pos:end="391:30">lpes0</name> <operator pos:start="391:32" pos:end="391:33">==</operator> <literal type="number" pos:start="391:35" pos:end="391:35">0</literal> <operator pos:start="391:37" pos:end="391:38">&amp;&amp;</operator> <name pos:start="391:40" pos:end="391:44">lpes1</name> <operator pos:start="391:46" pos:end="391:47">==</operator> <literal type="number" pos:start="391:49" pos:end="391:49">0</literal><operator pos:start="391:50" pos:end="391:50">)</operator></expr>)</condition><block type="pseudo" pos:start="393:13" pos:end="396:0"><block_content pos:start="393:13" pos:end="396:0">

            <expr_stmt pos:start="393:13" pos:end="396:0"><expr pos:start="393:13" pos:end="393:22"><name pos:start="393:13" pos:end="393:18">msr_hv</name> <operator pos:start="393:20" pos:end="393:20">=</operator> <literal type="number" pos:start="393:22" pos:end="393:22">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="395:1" pos:end="395:6">#<cpp:directive pos:start="395:2" pos:end="395:6">endif</cpp:directive></cpp:endif>

        <goto pos:start="397:9" pos:end="397:24">goto <name pos:start="397:14" pos:end="397:23">store_next</name>;</goto>

    <case pos:start="399:5" pos:end="399:26">case <expr pos:start="399:10" pos:end="399:25"><name pos:start="399:10" pos:end="399:25">POWERPC_EXCP_APU</name></expr>:</case>       <comment type="block" pos:start="399:34" pos:end="399:79">/* Auxiliary processor unavailable          */</comment>

        <expr_stmt pos:start="401:9" pos:end="401:19"><expr pos:start="401:9" pos:end="401:18"><name pos:start="401:9" pos:end="401:14">msr_ri</name> <operator pos:start="401:16" pos:end="401:16">=</operator> <literal type="number" pos:start="401:18" pos:end="401:18">0</literal></expr>;</expr_stmt>

        <goto pos:start="403:9" pos:end="403:27">goto <name pos:start="403:14" pos:end="403:26">store_current</name>;</goto>

    <case pos:start="405:5" pos:end="405:27">case <expr pos:start="405:10" pos:end="405:26"><name pos:start="405:10" pos:end="405:26">POWERPC_EXCP_DECR</name></expr>:</case>      <comment type="block" pos:start="405:34" pos:end="405:79">/* Decrementer exception                    */</comment>

        <expr_stmt pos:start="407:9" pos:end="410:0"><expr pos:start="407:9" pos:end="407:18"><name pos:start="407:9" pos:end="407:14">msr_ri</name> <operator pos:start="407:16" pos:end="407:16">=</operator> <literal type="number" pos:start="407:18" pos:end="407:18">0</literal></expr>;</expr_stmt>

<cpp:if pos:start="409:1" pos:end="409:26">#<cpp:directive pos:start="409:2" pos:end="409:3">if</cpp:directive> <expr pos:start="409:5" pos:end="409:26"><call pos:start="409:5" pos:end="409:26"><name pos:start="409:5" pos:end="409:11">defined</name><argument_list pos:start="409:12" pos:end="409:26">(<argument pos:start="409:13" pos:end="409:25"><expr pos:start="409:13" pos:end="409:25"><name pos:start="409:13" pos:end="409:25">TARGET_PPC64H</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="411:9" pos:end="416:0"><if pos:start="411:9" pos:end="416:0">if <condition pos:start="411:12" pos:end="411:23">(<expr pos:start="411:13" pos:end="411:22"><name pos:start="411:13" pos:end="411:17">lpes1</name> <operator pos:start="411:19" pos:end="411:20">==</operator> <literal type="number" pos:start="411:22" pos:end="411:22">0</literal></expr>)</condition><block type="pseudo" pos:start="413:13" pos:end="416:0"><block_content pos:start="413:13" pos:end="416:0">

            <expr_stmt pos:start="413:13" pos:end="416:0"><expr pos:start="413:13" pos:end="413:22"><name pos:start="413:13" pos:end="413:18">msr_hv</name> <operator pos:start="413:20" pos:end="413:20">=</operator> <literal type="number" pos:start="413:22" pos:end="413:22">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="415:1" pos:end="415:6">#<cpp:directive pos:start="415:2" pos:end="415:6">endif</cpp:directive></cpp:endif>

        <goto pos:start="417:9" pos:end="417:24">goto <name pos:start="417:14" pos:end="417:23">store_next</name>;</goto>

    <case pos:start="419:5" pos:end="424:0">case <expr pos:start="419:10" pos:end="419:25"><name pos:start="419:10" pos:end="419:25">POWERPC_EXCP_FIT</name></expr>:</case>       <comment type="block" pos:start="419:34" pos:end="419:79">/* Fixed-interval timer interrupt           */</comment>

        <comment type="block" pos:start="421:9" pos:end="421:24">/* FIT on 4xx */</comment>

<cpp:if pos:start="423:1" pos:end="423:30">#<cpp:directive pos:start="423:2" pos:end="423:3">if</cpp:directive> <expr pos:start="423:5" pos:end="423:30"><call pos:start="423:5" pos:end="423:30"><name pos:start="423:5" pos:end="423:11">defined</name> <argument_list pos:start="423:13" pos:end="423:30">(<argument pos:start="423:14" pos:end="423:29"><expr pos:start="423:14" pos:end="423:29"><name pos:start="423:14" pos:end="423:29">DEBUG_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="425:9" pos:end="430:0"><if pos:start="425:9" pos:end="430:0">if <condition pos:start="425:12" pos:end="425:26">(<expr pos:start="425:13" pos:end="425:25"><name pos:start="425:13" pos:end="425:20">loglevel</name> <operator pos:start="425:22" pos:end="425:23">!=</operator> <literal type="number" pos:start="425:25" pos:end="425:25">0</literal></expr>)</condition><block type="pseudo" pos:start="427:13" pos:end="430:0"><block_content pos:start="427:13" pos:end="430:0">

            <expr_stmt pos:start="427:13" pos:end="430:0"><expr pos:start="427:13" pos:end="427:47"><call pos:start="427:13" pos:end="427:47"><name pos:start="427:13" pos:end="427:19">fprintf</name><argument_list pos:start="427:20" pos:end="427:47">(<argument pos:start="427:21" pos:end="427:27"><expr pos:start="427:21" pos:end="427:27"><name pos:start="427:21" pos:end="427:27">logfile</name></expr></argument>, <argument pos:start="427:30" pos:end="427:46"><expr pos:start="427:30" pos:end="427:46"><literal type="string" pos:start="427:30" pos:end="427:46">"FIT exception\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="429:1" pos:end="429:6">#<cpp:directive pos:start="429:2" pos:end="429:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="431:9" pos:end="431:19"><expr pos:start="431:9" pos:end="431:18"><name pos:start="431:9" pos:end="431:14">msr_ri</name> <operator pos:start="431:16" pos:end="431:16">=</operator> <literal type="number" pos:start="431:18" pos:end="431:18">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="431:21" pos:end="431:41">/* XXX: check this */</comment>

        <goto pos:start="433:9" pos:end="433:24">goto <name pos:start="433:14" pos:end="433:23">store_next</name>;</goto>

    <case pos:start="435:5" pos:end="438:0">case <expr pos:start="435:10" pos:end="435:25"><name pos:start="435:10" pos:end="435:25">POWERPC_EXCP_WDT</name></expr>:</case>       <comment type="block" pos:start="435:34" pos:end="435:79">/* Watchdog timer interrupt                 */</comment>

<cpp:if pos:start="437:1" pos:end="437:30">#<cpp:directive pos:start="437:2" pos:end="437:3">if</cpp:directive> <expr pos:start="437:5" pos:end="437:30"><call pos:start="437:5" pos:end="437:30"><name pos:start="437:5" pos:end="437:11">defined</name> <argument_list pos:start="437:13" pos:end="437:30">(<argument pos:start="437:14" pos:end="437:29"><expr pos:start="437:14" pos:end="437:29"><name pos:start="437:14" pos:end="437:29">DEBUG_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="439:9" pos:end="444:0"><if pos:start="439:9" pos:end="444:0">if <condition pos:start="439:12" pos:end="439:26">(<expr pos:start="439:13" pos:end="439:25"><name pos:start="439:13" pos:end="439:20">loglevel</name> <operator pos:start="439:22" pos:end="439:23">!=</operator> <literal type="number" pos:start="439:25" pos:end="439:25">0</literal></expr>)</condition><block type="pseudo" pos:start="441:13" pos:end="444:0"><block_content pos:start="441:13" pos:end="444:0">

            <expr_stmt pos:start="441:13" pos:end="444:0"><expr pos:start="441:13" pos:end="441:47"><call pos:start="441:13" pos:end="441:47"><name pos:start="441:13" pos:end="441:19">fprintf</name><argument_list pos:start="441:20" pos:end="441:47">(<argument pos:start="441:21" pos:end="441:27"><expr pos:start="441:21" pos:end="441:27"><name pos:start="441:21" pos:end="441:27">logfile</name></expr></argument>, <argument pos:start="441:30" pos:end="441:46"><expr pos:start="441:30" pos:end="441:46"><literal type="string" pos:start="441:30" pos:end="441:46">"WDT exception\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="443:1" pos:end="443:6">#<cpp:directive pos:start="443:2" pos:end="443:6">endif</cpp:directive></cpp:endif>

        <switch pos:start="445:9" pos:end="459:9">switch <condition pos:start="445:16" pos:end="445:27">(<expr pos:start="445:17" pos:end="445:26"><name pos:start="445:17" pos:end="445:26">excp_model</name></expr>)</condition> <block pos:start="445:29" pos:end="459:9">{<block_content pos:start="447:9" pos:end="457:18">

        <case pos:start="447:9" pos:end="447:32">case <expr pos:start="447:14" pos:end="447:31"><name pos:start="447:14" pos:end="447:31">POWERPC_EXCP_BOOKE</name></expr>:</case>

            <expr_stmt pos:start="449:13" pos:end="449:35"><expr pos:start="449:13" pos:end="449:34"><name pos:start="449:13" pos:end="449:16">srr0</name> <operator pos:start="449:18" pos:end="449:18">=</operator> <name pos:start="449:20" pos:end="449:34">SPR_BOOKE_CSRR0</name></expr>;</expr_stmt>

            <expr_stmt pos:start="451:13" pos:end="451:35"><expr pos:start="451:13" pos:end="451:34"><name pos:start="451:13" pos:end="451:16">srr1</name> <operator pos:start="451:18" pos:end="451:18">=</operator> <name pos:start="451:20" pos:end="451:34">SPR_BOOKE_CSRR1</name></expr>;</expr_stmt>

            <break pos:start="453:13" pos:end="453:18">break;</break>

        <default pos:start="455:9" pos:end="455:16">default:</default>

            <break pos:start="457:13" pos:end="457:18">break;</break>

        </block_content>}</block></switch>

        <expr_stmt pos:start="461:9" pos:end="461:19"><expr pos:start="461:9" pos:end="461:18"><name pos:start="461:9" pos:end="461:14">msr_ri</name> <operator pos:start="461:16" pos:end="461:16">=</operator> <literal type="number" pos:start="461:18" pos:end="461:18">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="461:21" pos:end="461:41">/* XXX: check this */</comment>

        <goto pos:start="463:9" pos:end="463:24">goto <name pos:start="463:14" pos:end="463:23">store_next</name>;</goto>

    <case pos:start="465:5" pos:end="465:27">case <expr pos:start="465:10" pos:end="465:26"><name pos:start="465:10" pos:end="465:26">POWERPC_EXCP_DTLB</name></expr>:</case>      <comment type="block" pos:start="465:34" pos:end="465:79">/* Data TLB error                           */</comment>

        <expr_stmt pos:start="467:9" pos:end="467:19"><expr pos:start="467:9" pos:end="467:18"><name pos:start="467:9" pos:end="467:14">msr_ri</name> <operator pos:start="467:16" pos:end="467:16">=</operator> <literal type="number" pos:start="467:18" pos:end="467:18">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="467:21" pos:end="467:41">/* XXX: check this */</comment>

        <goto pos:start="469:9" pos:end="469:24">goto <name pos:start="469:14" pos:end="469:23">store_next</name>;</goto>

    <case pos:start="471:5" pos:end="471:27">case <expr pos:start="471:10" pos:end="471:26"><name pos:start="471:10" pos:end="471:26">POWERPC_EXCP_ITLB</name></expr>:</case>      <comment type="block" pos:start="471:34" pos:end="471:79">/* Instruction TLB error                    */</comment>

        <expr_stmt pos:start="473:9" pos:end="473:19"><expr pos:start="473:9" pos:end="473:18"><name pos:start="473:9" pos:end="473:14">msr_ri</name> <operator pos:start="473:16" pos:end="473:16">=</operator> <literal type="number" pos:start="473:18" pos:end="473:18">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="473:21" pos:end="473:41">/* XXX: check this */</comment>

        <goto pos:start="475:9" pos:end="475:24">goto <name pos:start="475:14" pos:end="475:23">store_next</name>;</goto>

    <case pos:start="477:5" pos:end="477:28">case <expr pos:start="477:10" pos:end="477:27"><name pos:start="477:10" pos:end="477:27">POWERPC_EXCP_DEBUG</name></expr>:</case>     <comment type="block" pos:start="477:34" pos:end="477:79">/* Debug interrupt                          */</comment>

        <switch pos:start="479:9" pos:end="497:9">switch <condition pos:start="479:16" pos:end="479:27">(<expr pos:start="479:17" pos:end="479:26"><name pos:start="479:17" pos:end="479:26">excp_model</name></expr>)</condition> <block pos:start="479:29" pos:end="497:9">{<block_content pos:start="481:9" pos:end="495:18">

        <case pos:start="481:9" pos:end="481:32">case <expr pos:start="481:14" pos:end="481:31"><name pos:start="481:14" pos:end="481:31">POWERPC_EXCP_BOOKE</name></expr>:</case>

            <expr_stmt pos:start="483:13" pos:end="483:35"><expr pos:start="483:13" pos:end="483:34"><name pos:start="483:13" pos:end="483:16">srr0</name> <operator pos:start="483:18" pos:end="483:18">=</operator> <name pos:start="483:20" pos:end="483:34">SPR_BOOKE_DSRR0</name></expr>;</expr_stmt>

            <expr_stmt pos:start="485:13" pos:end="485:35"><expr pos:start="485:13" pos:end="485:34"><name pos:start="485:13" pos:end="485:16">srr1</name> <operator pos:start="485:18" pos:end="485:18">=</operator> <name pos:start="485:20" pos:end="485:34">SPR_BOOKE_DSRR1</name></expr>;</expr_stmt>

            <expr_stmt pos:start="487:13" pos:end="487:36"><expr pos:start="487:13" pos:end="487:35"><name pos:start="487:13" pos:end="487:17">asrr0</name> <operator pos:start="487:19" pos:end="487:19">=</operator> <name pos:start="487:21" pos:end="487:35">SPR_BOOKE_CSRR0</name></expr>;</expr_stmt>

            <expr_stmt pos:start="489:13" pos:end="489:36"><expr pos:start="489:13" pos:end="489:35"><name pos:start="489:13" pos:end="489:17">asrr1</name> <operator pos:start="489:19" pos:end="489:19">=</operator> <name pos:start="489:21" pos:end="489:35">SPR_BOOKE_CSRR1</name></expr>;</expr_stmt>

            <break pos:start="491:13" pos:end="491:18">break;</break>

        <default pos:start="493:9" pos:end="493:16">default:</default>

            <break pos:start="495:13" pos:end="495:18">break;</break>

        </block_content>}</block></switch>

        <comment type="block" pos:start="499:9" pos:end="499:23">/* XXX: TODO */</comment>

        <expr_stmt pos:start="501:9" pos:end="501:69"><expr pos:start="501:9" pos:end="501:68"><call pos:start="501:9" pos:end="501:68"><name pos:start="501:9" pos:end="501:17">cpu_abort</name><argument_list pos:start="501:18" pos:end="501:68">(<argument pos:start="501:19" pos:end="501:21"><expr pos:start="501:19" pos:end="501:21"><name pos:start="501:19" pos:end="501:21">env</name></expr></argument>, <argument pos:start="501:24" pos:end="501:67"><expr pos:start="501:24" pos:end="501:67"><literal type="string" pos:start="501:24" pos:end="501:67">"Debug exception is not implemented yet !\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="503:9" pos:end="506:0">goto <name pos:start="503:14" pos:end="503:23">store_next</name>;</goto>

<cpp:if pos:start="505:1" pos:end="505:26">#<cpp:directive pos:start="505:2" pos:end="505:3">if</cpp:directive> <expr pos:start="505:5" pos:end="505:26"><call pos:start="505:5" pos:end="505:26"><name pos:start="505:5" pos:end="505:11">defined</name><argument_list pos:start="505:12" pos:end="505:26">(<argument pos:start="505:13" pos:end="505:25"><expr pos:start="505:13" pos:end="505:25"><name pos:start="505:13" pos:end="505:25">TARGET_PPCEMB</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="507:5" pos:end="507:27">case <expr pos:start="507:10" pos:end="507:26"><name pos:start="507:10" pos:end="507:26">POWERPC_EXCP_SPEU</name></expr>:</case>      <comment type="block" pos:start="507:34" pos:end="507:79">/* SPE/embedded floating-point unavailable  */</comment>

        <expr_stmt pos:start="509:9" pos:end="509:19"><expr pos:start="509:9" pos:end="509:18"><name pos:start="509:9" pos:end="509:14">msr_ri</name> <operator pos:start="509:16" pos:end="509:16">=</operator> <literal type="number" pos:start="509:18" pos:end="509:18">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="509:21" pos:end="509:41">/* XXX: check this */</comment>

        <goto pos:start="511:9" pos:end="511:27">goto <name pos:start="511:14" pos:end="511:26">store_current</name>;</goto>

    <case pos:start="513:5" pos:end="513:28">case <expr pos:start="513:10" pos:end="513:27"><name pos:start="513:10" pos:end="513:27">POWERPC_EXCP_EFPDI</name></expr>:</case>     <comment type="block" pos:start="513:34" pos:end="513:79">/* Embedded floating-point data interrupt   */</comment>

        <comment type="block" pos:start="515:9" pos:end="515:23">/* XXX: TODO */</comment>

        <expr_stmt pos:start="517:9" pos:end="519:48"><expr pos:start="517:9" pos:end="519:47"><call pos:start="517:9" pos:end="519:47"><name pos:start="517:9" pos:end="517:17">cpu_abort</name><argument_list pos:start="517:18" pos:end="519:47">(<argument pos:start="517:19" pos:end="517:21"><expr pos:start="517:19" pos:end="517:21"><name pos:start="517:19" pos:end="517:21">env</name></expr></argument>, <argument pos:start="517:24" pos:end="519:46"><expr pos:start="517:24" pos:end="519:46"><literal type="string" pos:start="517:24" pos:end="517:64">"Embedded floating point data exception "</literal>

                  <literal type="string" pos:start="519:19" pos:end="519:46">"is not implemented yet !\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="521:9" pos:end="521:24">goto <name pos:start="521:14" pos:end="521:23">store_next</name>;</goto>

    <case pos:start="523:5" pos:end="523:28">case <expr pos:start="523:10" pos:end="523:27"><name pos:start="523:10" pos:end="523:27">POWERPC_EXCP_EFPRI</name></expr>:</case>     <comment type="block" pos:start="523:34" pos:end="523:79">/* Embedded floating-point round interrupt  */</comment>

        <comment type="block" pos:start="525:9" pos:end="525:23">/* XXX: TODO */</comment>

        <expr_stmt pos:start="527:9" pos:end="529:48"><expr pos:start="527:9" pos:end="529:47"><call pos:start="527:9" pos:end="529:47"><name pos:start="527:9" pos:end="527:17">cpu_abort</name><argument_list pos:start="527:18" pos:end="529:47">(<argument pos:start="527:19" pos:end="527:21"><expr pos:start="527:19" pos:end="527:21"><name pos:start="527:19" pos:end="527:21">env</name></expr></argument>, <argument pos:start="527:24" pos:end="529:46"><expr pos:start="527:24" pos:end="529:46"><literal type="string" pos:start="527:24" pos:end="527:65">"Embedded floating point round exception "</literal>

                  <literal type="string" pos:start="529:19" pos:end="529:46">"is not implemented yet !\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="531:9" pos:end="531:24">goto <name pos:start="531:14" pos:end="531:23">store_next</name>;</goto>

    <case pos:start="533:5" pos:end="533:29">case <expr pos:start="533:10" pos:end="533:28"><name pos:start="533:10" pos:end="533:28">POWERPC_EXCP_EPERFM</name></expr>:</case>    <comment type="block" pos:start="533:34" pos:end="533:79">/* Embedded performance monitor interrupt   */</comment>

        <expr_stmt pos:start="535:9" pos:end="535:19"><expr pos:start="535:9" pos:end="535:18"><name pos:start="535:9" pos:end="535:14">msr_ri</name> <operator pos:start="535:16" pos:end="535:16">=</operator> <literal type="number" pos:start="535:18" pos:end="535:18">0</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="537:9" pos:end="537:23">/* XXX: TODO */</comment>

        <expr_stmt pos:start="539:9" pos:end="541:78"><expr pos:start="539:9" pos:end="541:77"><call pos:start="539:9" pos:end="541:77"><name pos:start="539:9" pos:end="539:17">cpu_abort</name><argument_list pos:start="539:18" pos:end="541:77">(<argument pos:start="539:19" pos:end="539:21"><expr pos:start="539:19" pos:end="539:21"><name pos:start="539:19" pos:end="539:21">env</name></expr></argument>,

                  <argument pos:start="541:19" pos:end="541:76"><expr pos:start="541:19" pos:end="541:76"><literal type="string" pos:start="541:19" pos:end="541:76">"Performance counter exception is not implemented yet !\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="543:9" pos:end="543:24">goto <name pos:start="543:14" pos:end="543:23">store_next</name>;</goto>

    <case pos:start="545:5" pos:end="545:28">case <expr pos:start="545:10" pos:end="545:27"><name pos:start="545:10" pos:end="545:27">POWERPC_EXCP_DOORI</name></expr>:</case>     <comment type="block" pos:start="545:34" pos:end="545:79">/* Embedded doorbell interrupt              */</comment>

        <comment type="block" pos:start="547:9" pos:end="547:23">/* XXX: TODO */</comment>

        <expr_stmt pos:start="549:9" pos:end="551:76"><expr pos:start="549:9" pos:end="551:75"><call pos:start="549:9" pos:end="551:75"><name pos:start="549:9" pos:end="549:17">cpu_abort</name><argument_list pos:start="549:18" pos:end="551:75">(<argument pos:start="549:19" pos:end="549:21"><expr pos:start="549:19" pos:end="549:21"><name pos:start="549:19" pos:end="549:21">env</name></expr></argument>,

                  <argument pos:start="551:19" pos:end="551:74"><expr pos:start="551:19" pos:end="551:74"><literal type="string" pos:start="551:19" pos:end="551:74">"Embedded doorbell interrupt is not implemented yet !\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="553:9" pos:end="553:24">goto <name pos:start="553:14" pos:end="553:23">store_next</name>;</goto>

    <case pos:start="555:5" pos:end="555:29">case <expr pos:start="555:10" pos:end="555:28"><name pos:start="555:10" pos:end="555:28">POWERPC_EXCP_DOORCI</name></expr>:</case>    <comment type="block" pos:start="555:34" pos:end="555:79">/* Embedded doorbell critical interrupt     */</comment>

        <switch pos:start="557:9" pos:end="571:9">switch <condition pos:start="557:16" pos:end="557:27">(<expr pos:start="557:17" pos:end="557:26"><name pos:start="557:17" pos:end="557:26">excp_model</name></expr>)</condition> <block pos:start="557:29" pos:end="571:9">{<block_content pos:start="559:9" pos:end="569:18">

        <case pos:start="559:9" pos:end="559:32">case <expr pos:start="559:14" pos:end="559:31"><name pos:start="559:14" pos:end="559:31">POWERPC_EXCP_BOOKE</name></expr>:</case>

            <expr_stmt pos:start="561:13" pos:end="561:35"><expr pos:start="561:13" pos:end="561:34"><name pos:start="561:13" pos:end="561:16">srr0</name> <operator pos:start="561:18" pos:end="561:18">=</operator> <name pos:start="561:20" pos:end="561:34">SPR_BOOKE_CSRR0</name></expr>;</expr_stmt>

            <expr_stmt pos:start="563:13" pos:end="563:35"><expr pos:start="563:13" pos:end="563:34"><name pos:start="563:13" pos:end="563:16">srr1</name> <operator pos:start="563:18" pos:end="563:18">=</operator> <name pos:start="563:20" pos:end="563:34">SPR_BOOKE_CSRR1</name></expr>;</expr_stmt>

            <break pos:start="565:13" pos:end="565:18">break;</break>

        <default pos:start="567:9" pos:end="567:16">default:</default>

            <break pos:start="569:13" pos:end="569:18">break;</break>

        </block_content>}</block></switch>

        <comment type="block" pos:start="573:9" pos:end="573:23">/* XXX: TODO */</comment>

        <expr_stmt pos:start="575:9" pos:end="577:48"><expr pos:start="575:9" pos:end="577:47"><call pos:start="575:9" pos:end="577:47"><name pos:start="575:9" pos:end="575:17">cpu_abort</name><argument_list pos:start="575:18" pos:end="577:47">(<argument pos:start="575:19" pos:end="575:21"><expr pos:start="575:19" pos:end="575:21"><name pos:start="575:19" pos:end="575:21">env</name></expr></argument>, <argument pos:start="575:24" pos:end="577:46"><expr pos:start="575:24" pos:end="577:46"><literal type="string" pos:start="575:24" pos:end="575:62">"Embedded doorbell critical interrupt "</literal>

                  <literal type="string" pos:start="577:19" pos:end="577:46">"is not implemented yet !\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="579:9" pos:end="582:0">goto <name pos:start="579:14" pos:end="579:23">store_next</name>;</goto>

<cpp:endif pos:start="581:1" pos:end="581:6">#<cpp:directive pos:start="581:2" pos:end="581:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="581:8" pos:end="581:35">/* defined(TARGET_PPCEMB) */</comment>

    <case pos:start="583:5" pos:end="583:28">case <expr pos:start="583:10" pos:end="583:27"><name pos:start="583:10" pos:end="583:27">POWERPC_EXCP_RESET</name></expr>:</case>     <comment type="block" pos:start="583:34" pos:end="583:79">/* System reset exception                   */</comment>

        <expr_stmt pos:start="585:9" pos:end="588:0"><expr pos:start="585:9" pos:end="585:18"><name pos:start="585:9" pos:end="585:14">msr_ri</name> <operator pos:start="585:16" pos:end="585:16">=</operator> <literal type="number" pos:start="585:18" pos:end="585:18">0</literal></expr>;</expr_stmt>

<cpp:if pos:start="587:1" pos:end="587:26">#<cpp:directive pos:start="587:2" pos:end="587:3">if</cpp:directive> <expr pos:start="587:5" pos:end="587:26"><call pos:start="587:5" pos:end="587:26"><name pos:start="587:5" pos:end="587:11">defined</name><argument_list pos:start="587:12" pos:end="587:26">(<argument pos:start="587:13" pos:end="587:25"><expr pos:start="587:13" pos:end="587:25"><name pos:start="587:13" pos:end="587:25">TARGET_PPC64H</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="589:9" pos:end="592:0"><expr pos:start="589:9" pos:end="589:18"><name pos:start="589:9" pos:end="589:14">msr_hv</name> <operator pos:start="589:16" pos:end="589:16">=</operator> <literal type="number" pos:start="589:18" pos:end="589:18">1</literal></expr>;</expr_stmt>

<cpp:endif pos:start="591:1" pos:end="591:6">#<cpp:directive pos:start="591:2" pos:end="591:6">endif</cpp:directive></cpp:endif>

    <label pos:start="593:5" pos:end="593:15"><name pos:start="593:5" pos:end="593:14">excp_reset</name>:</label>

        <goto pos:start="595:9" pos:end="598:0">goto <name pos:start="595:14" pos:end="595:23">store_next</name>;</goto>

<cpp:if pos:start="597:1" pos:end="597:25">#<cpp:directive pos:start="597:2" pos:end="597:3">if</cpp:directive> <expr pos:start="597:5" pos:end="597:25"><call pos:start="597:5" pos:end="597:25"><name pos:start="597:5" pos:end="597:11">defined</name><argument_list pos:start="597:12" pos:end="597:25">(<argument pos:start="597:13" pos:end="597:24"><expr pos:start="597:13" pos:end="597:24"><name pos:start="597:13" pos:end="597:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="599:5" pos:end="599:27">case <expr pos:start="599:10" pos:end="599:26"><name pos:start="599:10" pos:end="599:26">POWERPC_EXCP_DSEG</name></expr>:</case>      <comment type="block" pos:start="599:34" pos:end="599:79">/* Data segment exception                   */</comment>

        <expr_stmt pos:start="601:9" pos:end="604:0"><expr pos:start="601:9" pos:end="601:18"><name pos:start="601:9" pos:end="601:14">msr_ri</name> <operator pos:start="601:16" pos:end="601:16">=</operator> <literal type="number" pos:start="601:18" pos:end="601:18">0</literal></expr>;</expr_stmt>

<cpp:if pos:start="603:1" pos:end="603:26">#<cpp:directive pos:start="603:2" pos:end="603:3">if</cpp:directive> <expr pos:start="603:5" pos:end="603:26"><call pos:start="603:5" pos:end="603:26"><name pos:start="603:5" pos:end="603:11">defined</name><argument_list pos:start="603:12" pos:end="603:26">(<argument pos:start="603:13" pos:end="603:25"><expr pos:start="603:13" pos:end="603:25"><name pos:start="603:13" pos:end="603:25">TARGET_PPC64H</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="605:9" pos:end="610:0"><if pos:start="605:9" pos:end="610:0">if <condition pos:start="605:12" pos:end="605:23">(<expr pos:start="605:13" pos:end="605:22"><name pos:start="605:13" pos:end="605:17">lpes1</name> <operator pos:start="605:19" pos:end="605:20">==</operator> <literal type="number" pos:start="605:22" pos:end="605:22">0</literal></expr>)</condition><block type="pseudo" pos:start="607:13" pos:end="610:0"><block_content pos:start="607:13" pos:end="610:0">

            <expr_stmt pos:start="607:13" pos:end="610:0"><expr pos:start="607:13" pos:end="607:22"><name pos:start="607:13" pos:end="607:18">msr_hv</name> <operator pos:start="607:20" pos:end="607:20">=</operator> <literal type="number" pos:start="607:22" pos:end="607:22">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="609:1" pos:end="609:6">#<cpp:directive pos:start="609:2" pos:end="609:6">endif</cpp:directive></cpp:endif>

        <goto pos:start="611:9" pos:end="611:24">goto <name pos:start="611:14" pos:end="611:23">store_next</name>;</goto>

    <case pos:start="613:5" pos:end="613:27">case <expr pos:start="613:10" pos:end="613:26"><name pos:start="613:10" pos:end="613:26">POWERPC_EXCP_ISEG</name></expr>:</case>      <comment type="block" pos:start="613:34" pos:end="613:79">/* Instruction segment exception            */</comment>

        <expr_stmt pos:start="615:9" pos:end="618:0"><expr pos:start="615:9" pos:end="615:18"><name pos:start="615:9" pos:end="615:14">msr_ri</name> <operator pos:start="615:16" pos:end="615:16">=</operator> <literal type="number" pos:start="615:18" pos:end="615:18">0</literal></expr>;</expr_stmt>

<cpp:if pos:start="617:1" pos:end="617:26">#<cpp:directive pos:start="617:2" pos:end="617:3">if</cpp:directive> <expr pos:start="617:5" pos:end="617:26"><call pos:start="617:5" pos:end="617:26"><name pos:start="617:5" pos:end="617:11">defined</name><argument_list pos:start="617:12" pos:end="617:26">(<argument pos:start="617:13" pos:end="617:25"><expr pos:start="617:13" pos:end="617:25"><name pos:start="617:13" pos:end="617:25">TARGET_PPC64H</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="619:9" pos:end="624:0"><if pos:start="619:9" pos:end="624:0">if <condition pos:start="619:12" pos:end="619:23">(<expr pos:start="619:13" pos:end="619:22"><name pos:start="619:13" pos:end="619:17">lpes1</name> <operator pos:start="619:19" pos:end="619:20">==</operator> <literal type="number" pos:start="619:22" pos:end="619:22">0</literal></expr>)</condition><block type="pseudo" pos:start="621:13" pos:end="624:0"><block_content pos:start="621:13" pos:end="624:0">

            <expr_stmt pos:start="621:13" pos:end="624:0"><expr pos:start="621:13" pos:end="621:22"><name pos:start="621:13" pos:end="621:18">msr_hv</name> <operator pos:start="621:20" pos:end="621:20">=</operator> <literal type="number" pos:start="621:22" pos:end="621:22">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="623:1" pos:end="623:6">#<cpp:directive pos:start="623:2" pos:end="623:6">endif</cpp:directive></cpp:endif>

        <goto pos:start="625:9" pos:end="630:0">goto <name pos:start="625:14" pos:end="625:23">store_next</name>;</goto>

<cpp:endif pos:start="627:1" pos:end="627:6">#<cpp:directive pos:start="627:2" pos:end="627:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="627:8" pos:end="627:34">/* defined(TARGET_PPC64) */</comment>

<cpp:if pos:start="629:1" pos:end="629:26">#<cpp:directive pos:start="629:2" pos:end="629:3">if</cpp:directive> <expr pos:start="629:5" pos:end="629:26"><call pos:start="629:5" pos:end="629:26"><name pos:start="629:5" pos:end="629:11">defined</name><argument_list pos:start="629:12" pos:end="629:26">(<argument pos:start="629:13" pos:end="629:25"><expr pos:start="629:13" pos:end="629:25"><name pos:start="629:13" pos:end="629:25">TARGET_PPC64H</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="631:5" pos:end="631:28">case <expr pos:start="631:10" pos:end="631:27"><name pos:start="631:10" pos:end="631:27">POWERPC_EXCP_HDECR</name></expr>:</case>     <comment type="block" pos:start="631:34" pos:end="631:79">/* Hypervisor decrementer exception         */</comment>

        <expr_stmt pos:start="633:9" pos:end="633:25"><expr pos:start="633:9" pos:end="633:24"><name pos:start="633:9" pos:end="633:12">srr0</name> <operator pos:start="633:14" pos:end="633:14">=</operator> <name pos:start="633:16" pos:end="633:24">SPR_HSRR0</name></expr>;</expr_stmt>

        <expr_stmt pos:start="635:9" pos:end="635:25"><expr pos:start="635:9" pos:end="635:24"><name pos:start="635:9" pos:end="635:12">srr1</name> <operator pos:start="635:14" pos:end="635:14">=</operator> <name pos:start="635:16" pos:end="635:24">SPR_HSSR1</name></expr>;</expr_stmt>

        <expr_stmt pos:start="637:9" pos:end="637:19"><expr pos:start="637:9" pos:end="637:18"><name pos:start="637:9" pos:end="637:14">msr_hv</name> <operator pos:start="637:16" pos:end="637:16">=</operator> <literal type="number" pos:start="637:18" pos:end="637:18">1</literal></expr>;</expr_stmt>

        <goto pos:start="639:9" pos:end="642:0">goto <name pos:start="639:14" pos:end="639:23">store_next</name>;</goto>

<cpp:endif pos:start="641:1" pos:end="641:6">#<cpp:directive pos:start="641:2" pos:end="641:6">endif</cpp:directive></cpp:endif>

    <case pos:start="643:5" pos:end="643:28">case <expr pos:start="643:10" pos:end="643:27"><name pos:start="643:10" pos:end="643:27">POWERPC_EXCP_TRACE</name></expr>:</case>     <comment type="block" pos:start="643:34" pos:end="643:79">/* Trace exception                          */</comment>

        <expr_stmt pos:start="645:9" pos:end="648:0"><expr pos:start="645:9" pos:end="645:18"><name pos:start="645:9" pos:end="645:14">msr_ri</name> <operator pos:start="645:16" pos:end="645:16">=</operator> <literal type="number" pos:start="645:18" pos:end="645:18">0</literal></expr>;</expr_stmt>

<cpp:if pos:start="647:1" pos:end="647:26">#<cpp:directive pos:start="647:2" pos:end="647:3">if</cpp:directive> <expr pos:start="647:5" pos:end="647:26"><call pos:start="647:5" pos:end="647:26"><name pos:start="647:5" pos:end="647:11">defined</name><argument_list pos:start="647:12" pos:end="647:26">(<argument pos:start="647:13" pos:end="647:25"><expr pos:start="647:13" pos:end="647:25"><name pos:start="647:13" pos:end="647:25">TARGET_PPC64H</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="649:9" pos:end="654:0"><if pos:start="649:9" pos:end="654:0">if <condition pos:start="649:12" pos:end="649:23">(<expr pos:start="649:13" pos:end="649:22"><name pos:start="649:13" pos:end="649:17">lpes1</name> <operator pos:start="649:19" pos:end="649:20">==</operator> <literal type="number" pos:start="649:22" pos:end="649:22">0</literal></expr>)</condition><block type="pseudo" pos:start="651:13" pos:end="654:0"><block_content pos:start="651:13" pos:end="654:0">

            <expr_stmt pos:start="651:13" pos:end="654:0"><expr pos:start="651:13" pos:end="651:22"><name pos:start="651:13" pos:end="651:18">msr_hv</name> <operator pos:start="651:20" pos:end="651:20">=</operator> <literal type="number" pos:start="651:22" pos:end="651:22">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="653:1" pos:end="653:6">#<cpp:directive pos:start="653:2" pos:end="653:6">endif</cpp:directive></cpp:endif>

        <goto pos:start="655:9" pos:end="658:0">goto <name pos:start="655:14" pos:end="655:23">store_next</name>;</goto>

<cpp:if pos:start="657:1" pos:end="657:26">#<cpp:directive pos:start="657:2" pos:end="657:3">if</cpp:directive> <expr pos:start="657:5" pos:end="657:26"><call pos:start="657:5" pos:end="657:26"><name pos:start="657:5" pos:end="657:11">defined</name><argument_list pos:start="657:12" pos:end="657:26">(<argument pos:start="657:13" pos:end="657:25"><expr pos:start="657:13" pos:end="657:25"><name pos:start="657:13" pos:end="657:25">TARGET_PPC64H</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="659:5" pos:end="659:27">case <expr pos:start="659:10" pos:end="659:26"><name pos:start="659:10" pos:end="659:26">POWERPC_EXCP_HDSI</name></expr>:</case>      <comment type="block" pos:start="659:34" pos:end="659:79">/* Hypervisor data storage exception        */</comment>

        <expr_stmt pos:start="661:9" pos:end="661:25"><expr pos:start="661:9" pos:end="661:24"><name pos:start="661:9" pos:end="661:12">srr0</name> <operator pos:start="661:14" pos:end="661:14">=</operator> <name pos:start="661:16" pos:end="661:24">SPR_HSRR0</name></expr>;</expr_stmt>

        <expr_stmt pos:start="663:9" pos:end="663:25"><expr pos:start="663:9" pos:end="663:24"><name pos:start="663:9" pos:end="663:12">srr1</name> <operator pos:start="663:14" pos:end="663:14">=</operator> <name pos:start="663:16" pos:end="663:24">SPR_HSSR1</name></expr>;</expr_stmt>

        <expr_stmt pos:start="665:9" pos:end="665:19"><expr pos:start="665:9" pos:end="665:18"><name pos:start="665:9" pos:end="665:14">msr_hv</name> <operator pos:start="665:16" pos:end="665:16">=</operator> <literal type="number" pos:start="665:18" pos:end="665:18">1</literal></expr>;</expr_stmt>

        <goto pos:start="667:9" pos:end="667:24">goto <name pos:start="667:14" pos:end="667:23">store_next</name>;</goto>

    <case pos:start="669:5" pos:end="669:27">case <expr pos:start="669:10" pos:end="669:26"><name pos:start="669:10" pos:end="669:26">POWERPC_EXCP_HISI</name></expr>:</case>      <comment type="block" pos:start="669:34" pos:end="669:79">/* Hypervisor instruction storage exception */</comment>

        <expr_stmt pos:start="671:9" pos:end="671:25"><expr pos:start="671:9" pos:end="671:24"><name pos:start="671:9" pos:end="671:12">srr0</name> <operator pos:start="671:14" pos:end="671:14">=</operator> <name pos:start="671:16" pos:end="671:24">SPR_HSRR0</name></expr>;</expr_stmt>

        <expr_stmt pos:start="673:9" pos:end="673:25"><expr pos:start="673:9" pos:end="673:24"><name pos:start="673:9" pos:end="673:12">srr1</name> <operator pos:start="673:14" pos:end="673:14">=</operator> <name pos:start="673:16" pos:end="673:24">SPR_HSSR1</name></expr>;</expr_stmt>

        <expr_stmt pos:start="675:9" pos:end="675:19"><expr pos:start="675:9" pos:end="675:18"><name pos:start="675:9" pos:end="675:14">msr_hv</name> <operator pos:start="675:16" pos:end="675:16">=</operator> <literal type="number" pos:start="675:18" pos:end="675:18">1</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="677:9" pos:end="677:23">/* XXX: TODO */</comment>

        <expr_stmt pos:start="679:9" pos:end="681:48"><expr pos:start="679:9" pos:end="681:47"><call pos:start="679:9" pos:end="681:47"><name pos:start="679:9" pos:end="679:17">cpu_abort</name><argument_list pos:start="679:18" pos:end="681:47">(<argument pos:start="679:19" pos:end="679:21"><expr pos:start="679:19" pos:end="679:21"><name pos:start="679:19" pos:end="679:21">env</name></expr></argument>, <argument pos:start="679:24" pos:end="681:46"><expr pos:start="679:24" pos:end="681:46"><literal type="string" pos:start="679:24" pos:end="679:66">"Hypervisor instruction storage exception "</literal>

                  <literal type="string" pos:start="681:19" pos:end="681:46">"is not implemented yet !\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="683:9" pos:end="683:24">goto <name pos:start="683:14" pos:end="683:23">store_next</name>;</goto>

    <case pos:start="685:5" pos:end="685:28">case <expr pos:start="685:10" pos:end="685:27"><name pos:start="685:10" pos:end="685:27">POWERPC_EXCP_HDSEG</name></expr>:</case>     <comment type="block" pos:start="685:34" pos:end="685:79">/* Hypervisor data segment exception        */</comment>

        <expr_stmt pos:start="687:9" pos:end="687:25"><expr pos:start="687:9" pos:end="687:24"><name pos:start="687:9" pos:end="687:12">srr0</name> <operator pos:start="687:14" pos:end="687:14">=</operator> <name pos:start="687:16" pos:end="687:24">SPR_HSRR0</name></expr>;</expr_stmt>

        <expr_stmt pos:start="689:9" pos:end="689:25"><expr pos:start="689:9" pos:end="689:24"><name pos:start="689:9" pos:end="689:12">srr1</name> <operator pos:start="689:14" pos:end="689:14">=</operator> <name pos:start="689:16" pos:end="689:24">SPR_HSSR1</name></expr>;</expr_stmt>

        <expr_stmt pos:start="691:9" pos:end="691:19"><expr pos:start="691:9" pos:end="691:18"><name pos:start="691:9" pos:end="691:14">msr_hv</name> <operator pos:start="691:16" pos:end="691:16">=</operator> <literal type="number" pos:start="691:18" pos:end="691:18">1</literal></expr>;</expr_stmt>

        <goto pos:start="693:9" pos:end="693:24">goto <name pos:start="693:14" pos:end="693:23">store_next</name>;</goto>

    <case pos:start="695:5" pos:end="695:28">case <expr pos:start="695:10" pos:end="695:27"><name pos:start="695:10" pos:end="695:27">POWERPC_EXCP_HISEG</name></expr>:</case>     <comment type="block" pos:start="695:34" pos:end="695:79">/* Hypervisor instruction segment exception */</comment>

        <expr_stmt pos:start="697:9" pos:end="697:25"><expr pos:start="697:9" pos:end="697:24"><name pos:start="697:9" pos:end="697:12">srr0</name> <operator pos:start="697:14" pos:end="697:14">=</operator> <name pos:start="697:16" pos:end="697:24">SPR_HSRR0</name></expr>;</expr_stmt>

        <expr_stmt pos:start="699:9" pos:end="699:25"><expr pos:start="699:9" pos:end="699:24"><name pos:start="699:9" pos:end="699:12">srr1</name> <operator pos:start="699:14" pos:end="699:14">=</operator> <name pos:start="699:16" pos:end="699:24">SPR_HSSR1</name></expr>;</expr_stmt>

        <expr_stmt pos:start="701:9" pos:end="701:19"><expr pos:start="701:9" pos:end="701:18"><name pos:start="701:9" pos:end="701:14">msr_hv</name> <operator pos:start="701:16" pos:end="701:16">=</operator> <literal type="number" pos:start="701:18" pos:end="701:18">1</literal></expr>;</expr_stmt>

        <goto pos:start="703:9" pos:end="706:0">goto <name pos:start="703:14" pos:end="703:23">store_next</name>;</goto>

<cpp:endif pos:start="705:1" pos:end="705:6">#<cpp:directive pos:start="705:2" pos:end="705:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="705:8" pos:end="705:35">/* defined(TARGET_PPC64H) */</comment>

    <case pos:start="707:5" pos:end="707:26">case <expr pos:start="707:10" pos:end="707:25"><name pos:start="707:10" pos:end="707:25">POWERPC_EXCP_VPU</name></expr>:</case>       <comment type="block" pos:start="707:34" pos:end="707:79">/* Vector unavailable exception             */</comment>

        <expr_stmt pos:start="709:9" pos:end="712:0"><expr pos:start="709:9" pos:end="709:18"><name pos:start="709:9" pos:end="709:14">msr_ri</name> <operator pos:start="709:16" pos:end="709:16">=</operator> <literal type="number" pos:start="709:18" pos:end="709:18">0</literal></expr>;</expr_stmt>

<cpp:if pos:start="711:1" pos:end="711:26">#<cpp:directive pos:start="711:2" pos:end="711:3">if</cpp:directive> <expr pos:start="711:5" pos:end="711:26"><call pos:start="711:5" pos:end="711:26"><name pos:start="711:5" pos:end="711:11">defined</name><argument_list pos:start="711:12" pos:end="711:26">(<argument pos:start="711:13" pos:end="711:25"><expr pos:start="711:13" pos:end="711:25"><name pos:start="711:13" pos:end="711:25">TARGET_PPC64H</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="713:9" pos:end="718:0"><if pos:start="713:9" pos:end="718:0">if <condition pos:start="713:12" pos:end="713:23">(<expr pos:start="713:13" pos:end="713:22"><name pos:start="713:13" pos:end="713:17">lpes1</name> <operator pos:start="713:19" pos:end="713:20">==</operator> <literal type="number" pos:start="713:22" pos:end="713:22">0</literal></expr>)</condition><block type="pseudo" pos:start="715:13" pos:end="718:0"><block_content pos:start="715:13" pos:end="718:0">

            <expr_stmt pos:start="715:13" pos:end="718:0"><expr pos:start="715:13" pos:end="715:22"><name pos:start="715:13" pos:end="715:18">msr_hv</name> <operator pos:start="715:20" pos:end="715:20">=</operator> <literal type="number" pos:start="715:22" pos:end="715:22">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="717:1" pos:end="717:6">#<cpp:directive pos:start="717:2" pos:end="717:6">endif</cpp:directive></cpp:endif>

        <goto pos:start="719:9" pos:end="719:27">goto <name pos:start="719:14" pos:end="719:26">store_current</name>;</goto>

    <case pos:start="721:5" pos:end="724:0">case <expr pos:start="721:10" pos:end="721:25"><name pos:start="721:10" pos:end="721:25">POWERPC_EXCP_PIT</name></expr>:</case>       <comment type="block" pos:start="721:34" pos:end="721:79">/* Programmable interval timer interrupt    */</comment>

<cpp:if pos:start="723:1" pos:end="723:30">#<cpp:directive pos:start="723:2" pos:end="723:3">if</cpp:directive> <expr pos:start="723:5" pos:end="723:30"><call pos:start="723:5" pos:end="723:30"><name pos:start="723:5" pos:end="723:11">defined</name> <argument_list pos:start="723:13" pos:end="723:30">(<argument pos:start="723:14" pos:end="723:29"><expr pos:start="723:14" pos:end="723:29"><name pos:start="723:14" pos:end="723:29">DEBUG_EXCEPTIONS</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="725:9" pos:end="730:0"><if pos:start="725:9" pos:end="730:0">if <condition pos:start="725:12" pos:end="725:26">(<expr pos:start="725:13" pos:end="725:25"><name pos:start="725:13" pos:end="725:20">loglevel</name> <operator pos:start="725:22" pos:end="725:23">!=</operator> <literal type="number" pos:start="725:25" pos:end="725:25">0</literal></expr>)</condition><block type="pseudo" pos:start="727:13" pos:end="730:0"><block_content pos:start="727:13" pos:end="730:0">

            <expr_stmt pos:start="727:13" pos:end="730:0"><expr pos:start="727:13" pos:end="727:47"><call pos:start="727:13" pos:end="727:47"><name pos:start="727:13" pos:end="727:19">fprintf</name><argument_list pos:start="727:20" pos:end="727:47">(<argument pos:start="727:21" pos:end="727:27"><expr pos:start="727:21" pos:end="727:27"><name pos:start="727:21" pos:end="727:27">logfile</name></expr></argument>, <argument pos:start="727:30" pos:end="727:46"><expr pos:start="727:30" pos:end="727:46"><literal type="string" pos:start="727:30" pos:end="727:46">"PIT exception\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="729:1" pos:end="729:6">#<cpp:directive pos:start="729:2" pos:end="729:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="731:9" pos:end="731:19"><expr pos:start="731:9" pos:end="731:18"><name pos:start="731:9" pos:end="731:14">msr_ri</name> <operator pos:start="731:16" pos:end="731:16">=</operator> <literal type="number" pos:start="731:18" pos:end="731:18">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="731:21" pos:end="731:41">/* XXX: check this */</comment>

        <goto pos:start="733:9" pos:end="733:24">goto <name pos:start="733:14" pos:end="733:23">store_next</name>;</goto>

    <case pos:start="735:5" pos:end="735:25">case <expr pos:start="735:10" pos:end="735:24"><name pos:start="735:10" pos:end="735:24">POWERPC_EXCP_IO</name></expr>:</case>        <comment type="block" pos:start="735:34" pos:end="735:79">/* IO error exception                       */</comment>

        <comment type="block" pos:start="737:9" pos:end="737:23">/* XXX: TODO */</comment>

        <expr_stmt pos:start="739:9" pos:end="739:76"><expr pos:start="739:9" pos:end="739:75"><call pos:start="739:9" pos:end="739:75"><name pos:start="739:9" pos:end="739:17">cpu_abort</name><argument_list pos:start="739:18" pos:end="739:75">(<argument pos:start="739:19" pos:end="739:21"><expr pos:start="739:19" pos:end="739:21"><name pos:start="739:19" pos:end="739:21">env</name></expr></argument>, <argument pos:start="739:24" pos:end="739:74"><expr pos:start="739:24" pos:end="739:74"><literal type="string" pos:start="739:24" pos:end="739:74">"601 IO error exception is not implemented yet !\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="741:9" pos:end="741:24">goto <name pos:start="741:14" pos:end="741:23">store_next</name>;</goto>

    <case pos:start="743:5" pos:end="743:27">case <expr pos:start="743:10" pos:end="743:26"><name pos:start="743:10" pos:end="743:26">POWERPC_EXCP_RUNM</name></expr>:</case>      <comment type="block" pos:start="743:34" pos:end="743:79">/* Run mode exception                       */</comment>

        <comment type="block" pos:start="745:9" pos:end="745:23">/* XXX: TODO */</comment>

        <expr_stmt pos:start="747:9" pos:end="747:76"><expr pos:start="747:9" pos:end="747:75"><call pos:start="747:9" pos:end="747:75"><name pos:start="747:9" pos:end="747:17">cpu_abort</name><argument_list pos:start="747:18" pos:end="747:75">(<argument pos:start="747:19" pos:end="747:21"><expr pos:start="747:19" pos:end="747:21"><name pos:start="747:19" pos:end="747:21">env</name></expr></argument>, <argument pos:start="747:24" pos:end="747:74"><expr pos:start="747:24" pos:end="747:74"><literal type="string" pos:start="747:24" pos:end="747:74">"601 run mode exception is not implemented yet !\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="749:9" pos:end="749:24">goto <name pos:start="749:14" pos:end="749:23">store_next</name>;</goto>

    <case pos:start="751:5" pos:end="751:27">case <expr pos:start="751:10" pos:end="751:26"><name pos:start="751:10" pos:end="751:26">POWERPC_EXCP_EMUL</name></expr>:</case>      <comment type="block" pos:start="751:34" pos:end="751:79">/* Emulation trap exception                 */</comment>

        <comment type="block" pos:start="753:9" pos:end="753:23">/* XXX: TODO */</comment>

        <expr_stmt pos:start="755:9" pos:end="757:48"><expr pos:start="755:9" pos:end="757:47"><call pos:start="755:9" pos:end="757:47"><name pos:start="755:9" pos:end="755:17">cpu_abort</name><argument_list pos:start="755:18" pos:end="757:47">(<argument pos:start="755:19" pos:end="755:21"><expr pos:start="755:19" pos:end="755:21"><name pos:start="755:19" pos:end="755:21">env</name></expr></argument>, <argument pos:start="755:24" pos:end="757:46"><expr pos:start="755:24" pos:end="757:46"><literal type="string" pos:start="755:24" pos:end="755:54">"602 emulation trap exception "</literal>

                  <literal type="string" pos:start="757:19" pos:end="757:46">"is not implemented yet !\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="759:9" pos:end="759:24">goto <name pos:start="759:14" pos:end="759:23">store_next</name>;</goto>

    <case pos:start="761:5" pos:end="761:28">case <expr pos:start="761:10" pos:end="761:27"><name pos:start="761:10" pos:end="761:27">POWERPC_EXCP_IFTLB</name></expr>:</case>     <comment type="block" pos:start="761:34" pos:end="761:79">/* Instruction fetch TLB error              */</comment>

        <expr_stmt pos:start="763:9" pos:end="766:0"><expr pos:start="763:9" pos:end="763:18"><name pos:start="763:9" pos:end="763:14">msr_ri</name> <operator pos:start="763:16" pos:end="763:16">=</operator> <literal type="number" pos:start="763:18" pos:end="763:18">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="763:21" pos:end="763:41">/* XXX: check this */</comment>

<cpp:if pos:start="765:1" pos:end="765:26">#<cpp:directive pos:start="765:2" pos:end="765:3">if</cpp:directive> <expr pos:start="765:5" pos:end="765:26"><call pos:start="765:5" pos:end="765:26"><name pos:start="765:5" pos:end="765:11">defined</name><argument_list pos:start="765:12" pos:end="765:26">(<argument pos:start="765:13" pos:end="765:25"><expr pos:start="765:13" pos:end="765:25"><name pos:start="765:13" pos:end="765:25">TARGET_PPC64H</name></expr></argument>)</argument_list></call></expr></cpp:if> <comment type="block" pos:start="765:28" pos:end="765:48">/* XXX: check this */</comment>

        <if_stmt pos:start="767:9" pos:end="772:0"><if pos:start="767:9" pos:end="772:0">if <condition pos:start="767:12" pos:end="767:23">(<expr pos:start="767:13" pos:end="767:22"><name pos:start="767:13" pos:end="767:17">lpes1</name> <operator pos:start="767:19" pos:end="767:20">==</operator> <literal type="number" pos:start="767:22" pos:end="767:22">0</literal></expr>)</condition><block type="pseudo" pos:start="769:13" pos:end="772:0"><block_content pos:start="769:13" pos:end="772:0">

            <expr_stmt pos:start="769:13" pos:end="772:0"><expr pos:start="769:13" pos:end="769:22"><name pos:start="769:13" pos:end="769:18">msr_hv</name> <operator pos:start="769:20" pos:end="769:20">=</operator> <literal type="number" pos:start="769:22" pos:end="769:22">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="771:1" pos:end="771:6">#<cpp:directive pos:start="771:2" pos:end="771:6">endif</cpp:directive></cpp:endif>

        <switch pos:start="773:9" pos:end="799:9">switch <condition pos:start="773:16" pos:end="773:27">(<expr pos:start="773:17" pos:end="773:26"><name pos:start="773:17" pos:end="773:26">excp_model</name></expr>)</condition> <block pos:start="773:29" pos:end="799:9">{<block_content pos:start="775:9" pos:end="797:18">

        <case pos:start="775:9" pos:end="775:30">case <expr pos:start="775:14" pos:end="775:29"><name pos:start="775:14" pos:end="775:29">POWERPC_EXCP_602</name></expr>:</case>

        <case pos:start="777:9" pos:end="777:30">case <expr pos:start="777:14" pos:end="777:29"><name pos:start="777:14" pos:end="777:29">POWERPC_EXCP_603</name></expr>:</case>

        <case pos:start="779:9" pos:end="779:31">case <expr pos:start="779:14" pos:end="779:30"><name pos:start="779:14" pos:end="779:30">POWERPC_EXCP_603E</name></expr>:</case>

        <case pos:start="781:9" pos:end="781:29">case <expr pos:start="781:14" pos:end="781:28"><name pos:start="781:14" pos:end="781:28">POWERPC_EXCP_G2</name></expr>:</case>

            <goto pos:start="783:13" pos:end="783:31">goto <name pos:start="783:18" pos:end="783:30">tlb_miss_tgpr</name>;</goto>

        <case pos:start="785:9" pos:end="785:30">case <expr pos:start="785:14" pos:end="785:29"><name pos:start="785:14" pos:end="785:29">POWERPC_EXCP_7x5</name></expr>:</case>

            <goto pos:start="787:13" pos:end="787:26">goto <name pos:start="787:18" pos:end="787:25">tlb_miss</name>;</goto>

        <case pos:start="789:9" pos:end="789:31">case <expr pos:start="789:14" pos:end="789:30"><name pos:start="789:14" pos:end="789:30">POWERPC_EXCP_74xx</name></expr>:</case>

            <goto pos:start="791:13" pos:end="791:31">goto <name pos:start="791:18" pos:end="791:30">tlb_miss_74xx</name>;</goto>

        <default pos:start="793:9" pos:end="793:16">default:</default>

            <expr_stmt pos:start="795:13" pos:end="795:71"><expr pos:start="795:13" pos:end="795:70"><call pos:start="795:13" pos:end="795:70"><name pos:start="795:13" pos:end="795:21">cpu_abort</name><argument_list pos:start="795:22" pos:end="795:70">(<argument pos:start="795:23" pos:end="795:25"><expr pos:start="795:23" pos:end="795:25"><name pos:start="795:23" pos:end="795:25">env</name></expr></argument>, <argument pos:start="795:28" pos:end="795:69"><expr pos:start="795:28" pos:end="795:69"><literal type="string" pos:start="795:28" pos:end="795:69">"Invalid instruction TLB miss exception\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="797:13" pos:end="797:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="801:9" pos:end="801:14">break;</break>

    <case pos:start="803:5" pos:end="803:28">case <expr pos:start="803:10" pos:end="803:27"><name pos:start="803:10" pos:end="803:27">POWERPC_EXCP_DLTLB</name></expr>:</case>     <comment type="block" pos:start="803:34" pos:end="803:79">/* Data load TLB miss                       */</comment>

        <expr_stmt pos:start="805:9" pos:end="808:0"><expr pos:start="805:9" pos:end="805:18"><name pos:start="805:9" pos:end="805:14">msr_ri</name> <operator pos:start="805:16" pos:end="805:16">=</operator> <literal type="number" pos:start="805:18" pos:end="805:18">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="805:21" pos:end="805:41">/* XXX: check this */</comment>

<cpp:if pos:start="807:1" pos:end="807:26">#<cpp:directive pos:start="807:2" pos:end="807:3">if</cpp:directive> <expr pos:start="807:5" pos:end="807:26"><call pos:start="807:5" pos:end="807:26"><name pos:start="807:5" pos:end="807:11">defined</name><argument_list pos:start="807:12" pos:end="807:26">(<argument pos:start="807:13" pos:end="807:25"><expr pos:start="807:13" pos:end="807:25"><name pos:start="807:13" pos:end="807:25">TARGET_PPC64H</name></expr></argument>)</argument_list></call></expr></cpp:if> <comment type="block" pos:start="807:28" pos:end="807:48">/* XXX: check this */</comment>

        <if_stmt pos:start="809:9" pos:end="814:0"><if pos:start="809:9" pos:end="814:0">if <condition pos:start="809:12" pos:end="809:23">(<expr pos:start="809:13" pos:end="809:22"><name pos:start="809:13" pos:end="809:17">lpes1</name> <operator pos:start="809:19" pos:end="809:20">==</operator> <literal type="number" pos:start="809:22" pos:end="809:22">0</literal></expr>)</condition><block type="pseudo" pos:start="811:13" pos:end="814:0"><block_content pos:start="811:13" pos:end="814:0">

            <expr_stmt pos:start="811:13" pos:end="814:0"><expr pos:start="811:13" pos:end="811:22"><name pos:start="811:13" pos:end="811:18">msr_hv</name> <operator pos:start="811:20" pos:end="811:20">=</operator> <literal type="number" pos:start="811:22" pos:end="811:22">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="813:1" pos:end="813:6">#<cpp:directive pos:start="813:2" pos:end="813:6">endif</cpp:directive></cpp:endif>

        <switch pos:start="815:9" pos:end="841:9">switch <condition pos:start="815:16" pos:end="815:27">(<expr pos:start="815:17" pos:end="815:26"><name pos:start="815:17" pos:end="815:26">excp_model</name></expr>)</condition> <block pos:start="815:29" pos:end="841:9">{<block_content pos:start="817:9" pos:end="839:18">

        <case pos:start="817:9" pos:end="817:30">case <expr pos:start="817:14" pos:end="817:29"><name pos:start="817:14" pos:end="817:29">POWERPC_EXCP_602</name></expr>:</case>

        <case pos:start="819:9" pos:end="819:30">case <expr pos:start="819:14" pos:end="819:29"><name pos:start="819:14" pos:end="819:29">POWERPC_EXCP_603</name></expr>:</case>

        <case pos:start="821:9" pos:end="821:31">case <expr pos:start="821:14" pos:end="821:30"><name pos:start="821:14" pos:end="821:30">POWERPC_EXCP_603E</name></expr>:</case>

        <case pos:start="823:9" pos:end="823:29">case <expr pos:start="823:14" pos:end="823:28"><name pos:start="823:14" pos:end="823:28">POWERPC_EXCP_G2</name></expr>:</case>

            <goto pos:start="825:13" pos:end="825:31">goto <name pos:start="825:18" pos:end="825:30">tlb_miss_tgpr</name>;</goto>

        <case pos:start="827:9" pos:end="827:30">case <expr pos:start="827:14" pos:end="827:29"><name pos:start="827:14" pos:end="827:29">POWERPC_EXCP_7x5</name></expr>:</case>

            <goto pos:start="829:13" pos:end="829:26">goto <name pos:start="829:18" pos:end="829:25">tlb_miss</name>;</goto>

        <case pos:start="831:9" pos:end="831:31">case <expr pos:start="831:14" pos:end="831:30"><name pos:start="831:14" pos:end="831:30">POWERPC_EXCP_74xx</name></expr>:</case>

            <goto pos:start="833:13" pos:end="833:31">goto <name pos:start="833:18" pos:end="833:30">tlb_miss_74xx</name>;</goto>

        <default pos:start="835:9" pos:end="835:16">default:</default>

            <expr_stmt pos:start="837:13" pos:end="837:69"><expr pos:start="837:13" pos:end="837:68"><call pos:start="837:13" pos:end="837:68"><name pos:start="837:13" pos:end="837:21">cpu_abort</name><argument_list pos:start="837:22" pos:end="837:68">(<argument pos:start="837:23" pos:end="837:25"><expr pos:start="837:23" pos:end="837:25"><name pos:start="837:23" pos:end="837:25">env</name></expr></argument>, <argument pos:start="837:28" pos:end="837:67"><expr pos:start="837:28" pos:end="837:67"><literal type="string" pos:start="837:28" pos:end="837:67">"Invalid data load TLB miss exception\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="839:13" pos:end="839:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="843:9" pos:end="843:14">break;</break>

    <case pos:start="845:5" pos:end="845:28">case <expr pos:start="845:10" pos:end="845:27"><name pos:start="845:10" pos:end="845:27">POWERPC_EXCP_DSTLB</name></expr>:</case>     <comment type="block" pos:start="845:34" pos:end="845:79">/* Data store TLB miss                      */</comment>

        <expr_stmt pos:start="847:9" pos:end="850:0"><expr pos:start="847:9" pos:end="847:18"><name pos:start="847:9" pos:end="847:14">msr_ri</name> <operator pos:start="847:16" pos:end="847:16">=</operator> <literal type="number" pos:start="847:18" pos:end="847:18">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="847:21" pos:end="847:41">/* XXX: check this */</comment>

<cpp:if pos:start="849:1" pos:end="849:26">#<cpp:directive pos:start="849:2" pos:end="849:3">if</cpp:directive> <expr pos:start="849:5" pos:end="849:26"><call pos:start="849:5" pos:end="849:26"><name pos:start="849:5" pos:end="849:11">defined</name><argument_list pos:start="849:12" pos:end="849:26">(<argument pos:start="849:13" pos:end="849:25"><expr pos:start="849:13" pos:end="849:25"><name pos:start="849:13" pos:end="849:25">TARGET_PPC64H</name></expr></argument>)</argument_list></call></expr></cpp:if> <comment type="block" pos:start="849:28" pos:end="849:48">/* XXX: check this */</comment>

        <if_stmt pos:start="851:9" pos:end="856:0"><if pos:start="851:9" pos:end="856:0">if <condition pos:start="851:12" pos:end="851:23">(<expr pos:start="851:13" pos:end="851:22"><name pos:start="851:13" pos:end="851:17">lpes1</name> <operator pos:start="851:19" pos:end="851:20">==</operator> <literal type="number" pos:start="851:22" pos:end="851:22">0</literal></expr>)</condition><block type="pseudo" pos:start="853:13" pos:end="856:0"><block_content pos:start="853:13" pos:end="856:0">

            <expr_stmt pos:start="853:13" pos:end="856:0"><expr pos:start="853:13" pos:end="853:22"><name pos:start="853:13" pos:end="853:18">msr_hv</name> <operator pos:start="853:20" pos:end="853:20">=</operator> <literal type="number" pos:start="853:22" pos:end="853:22">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="855:1" pos:end="855:6">#<cpp:directive pos:start="855:2" pos:end="855:6">endif</cpp:directive></cpp:endif>

        <switch pos:start="857:9" pos:end="1005:9">switch <condition pos:start="857:16" pos:end="857:27">(<expr pos:start="857:17" pos:end="857:26"><name pos:start="857:17" pos:end="857:26">excp_model</name></expr>)</condition> <block pos:start="857:29" pos:end="1005:9">{<block_content pos:start="859:9" pos:end="1003:18">

        <case pos:start="859:9" pos:end="859:30">case <expr pos:start="859:14" pos:end="859:29"><name pos:start="859:14" pos:end="859:29">POWERPC_EXCP_602</name></expr>:</case>

        <case pos:start="861:9" pos:end="861:30">case <expr pos:start="861:14" pos:end="861:29"><name pos:start="861:14" pos:end="861:29">POWERPC_EXCP_603</name></expr>:</case>

        <case pos:start="863:9" pos:end="863:31">case <expr pos:start="863:14" pos:end="863:30"><name pos:start="863:14" pos:end="863:30">POWERPC_EXCP_603E</name></expr>:</case>

        <case pos:start="865:9" pos:end="865:29">case <expr pos:start="865:14" pos:end="865:28"><name pos:start="865:14" pos:end="865:28">POWERPC_EXCP_G2</name></expr>:</case>

        <label pos:start="867:9" pos:end="867:22"><name pos:start="867:9" pos:end="867:21">tlb_miss_tgpr</name>:</label>

            <comment type="block" pos:start="869:13" pos:end="869:58">/* Swap temporary saved registers with GPRs */</comment>

            <expr_stmt pos:start="871:13" pos:end="871:31"><expr pos:start="871:13" pos:end="871:30"><call pos:start="871:13" pos:end="871:30"><name pos:start="871:13" pos:end="871:25">swap_gpr_tgpr</name><argument_list pos:start="871:26" pos:end="871:30">(<argument pos:start="871:27" pos:end="871:29"><expr pos:start="871:27" pos:end="871:29"><name pos:start="871:27" pos:end="871:29">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="873:13" pos:end="873:25"><expr pos:start="873:13" pos:end="873:24"><name pos:start="873:13" pos:end="873:20">msr_tgpr</name> <operator pos:start="873:22" pos:end="873:22">=</operator> <literal type="number" pos:start="873:24" pos:end="873:24">1</literal></expr>;</expr_stmt>

            <goto pos:start="875:13" pos:end="875:26">goto <name pos:start="875:18" pos:end="875:25">tlb_miss</name>;</goto>

        <case pos:start="877:9" pos:end="877:30">case <expr pos:start="877:14" pos:end="877:29"><name pos:start="877:14" pos:end="877:29">POWERPC_EXCP_7x5</name></expr>:</case>

        <label pos:start="879:9" pos:end="882:0"><name pos:start="879:9" pos:end="879:16">tlb_miss</name>:</label>

<cpp:if pos:start="881:1" pos:end="881:32">#<cpp:directive pos:start="881:2" pos:end="881:3">if</cpp:directive> <expr pos:start="881:5" pos:end="881:32"><call pos:start="881:5" pos:end="881:32"><name pos:start="881:5" pos:end="881:11">defined</name> <argument_list pos:start="881:13" pos:end="881:32">(<argument pos:start="881:14" pos:end="881:31"><expr pos:start="881:14" pos:end="881:31"><name pos:start="881:14" pos:end="881:31">DEBUG_SOFTWARE_TLB</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <if_stmt pos:start="883:13" pos:end="932:0"><if pos:start="883:13" pos:end="932:0">if <condition pos:start="883:16" pos:end="883:30">(<expr pos:start="883:17" pos:end="883:29"><name pos:start="883:17" pos:end="883:24">loglevel</name> <operator pos:start="883:26" pos:end="883:27">!=</operator> <literal type="number" pos:start="883:29" pos:end="883:29">0</literal></expr>)</condition> <block pos:start="883:32" pos:end="932:0">{<block_content pos:start="885:17" pos:end="927:41">

                <decl_stmt pos:start="885:17" pos:end="885:40"><decl pos:start="885:17" pos:end="885:39"><type pos:start="885:17" pos:end="885:37"><specifier pos:start="885:17" pos:end="885:21">const</specifier> <name pos:start="885:23" pos:end="885:30">unsigned</name> <name pos:start="885:32" pos:end="885:35">char</name> <modifier pos:start="885:37" pos:end="885:37">*</modifier></type><name pos:start="885:38" pos:end="885:39">es</name></decl>;</decl_stmt>

                <decl_stmt pos:start="887:17" pos:end="887:41"><decl pos:start="887:17" pos:end="887:34"><type pos:start="887:17" pos:end="887:30"><name pos:start="887:17" pos:end="887:28">target_ulong</name> <modifier pos:start="887:30" pos:end="887:30">*</modifier></type><name pos:start="887:31" pos:end="887:34">miss</name></decl>, <decl pos:start="887:37" pos:end="887:40"><type ref="prev" pos:start="887:17" pos:end="887:30"><modifier pos:start="887:37" pos:end="887:37">*</modifier></type><name pos:start="887:38" pos:end="887:40">cmp</name></decl>;</decl_stmt>

                <decl_stmt pos:start="889:17" pos:end="889:23"><decl pos:start="889:17" pos:end="889:22"><type pos:start="889:17" pos:end="889:19"><name pos:start="889:17" pos:end="889:19">int</name></type> <name pos:start="889:21" pos:end="889:22">en</name></decl>;</decl_stmt>

                <if_stmt pos:start="891:17" pos:end="917:17"><if pos:start="891:17" pos:end="901:17">if <condition pos:start="891:20" pos:end="891:47">(<expr pos:start="891:21" pos:end="891:46"><name pos:start="891:21" pos:end="891:24">excp</name> <operator pos:start="891:26" pos:end="891:27">==</operator> <name pos:start="891:29" pos:end="891:46">POWERPC_EXCP_IFTLB</name></expr>)</condition> <block pos:start="891:49" pos:end="901:17">{<block_content pos:start="893:21" pos:end="899:46">

                    <expr_stmt pos:start="893:21" pos:end="893:29"><expr pos:start="893:21" pos:end="893:28"><name pos:start="893:21" pos:end="893:22">es</name> <operator pos:start="893:24" pos:end="893:24">=</operator> <literal type="string" pos:start="893:26" pos:end="893:28">"I"</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="895:21" pos:end="895:29"><expr pos:start="895:21" pos:end="895:28"><name pos:start="895:21" pos:end="895:22">en</name> <operator pos:start="895:24" pos:end="895:24">=</operator> <literal type="char" pos:start="895:26" pos:end="895:28">'I'</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="897:21" pos:end="897:48"><expr pos:start="897:21" pos:end="897:47"><name pos:start="897:21" pos:end="897:24">miss</name> <operator pos:start="897:26" pos:end="897:26">=</operator> <operator pos:start="897:28" pos:end="897:28">&amp;</operator><name pos:start="897:29" pos:end="897:47"><name pos:start="897:29" pos:end="897:31">env</name><operator pos:start="897:32" pos:end="897:33">-&gt;</operator><name pos:start="897:34" pos:end="897:36">spr</name><index pos:start="897:37" pos:end="897:47">[<expr pos:start="897:38" pos:end="897:46"><name pos:start="897:38" pos:end="897:46">SPR_IMISS</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="899:21" pos:end="899:46"><expr pos:start="899:21" pos:end="899:45"><name pos:start="899:21" pos:end="899:23">cmp</name> <operator pos:start="899:25" pos:end="899:25">=</operator> <operator pos:start="899:27" pos:end="899:27">&amp;</operator><name pos:start="899:28" pos:end="899:45"><name pos:start="899:28" pos:end="899:30">env</name><operator pos:start="899:31" pos:end="899:32">-&gt;</operator><name pos:start="899:33" pos:end="899:35">spr</name><index pos:start="899:36" pos:end="899:45">[<expr pos:start="899:37" pos:end="899:44"><name pos:start="899:37" pos:end="899:44">SPR_ICMP</name></expr>]</index></name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="901:19" pos:end="917:17">else <block pos:start="901:24" pos:end="917:17">{<block_content pos:start="903:21" pos:end="915:46">

                    <if_stmt pos:start="903:21" pos:end="909:34"><if pos:start="903:21" pos:end="905:34">if <condition pos:start="903:24" pos:end="903:51">(<expr pos:start="903:25" pos:end="903:50"><name pos:start="903:25" pos:end="903:28">excp</name> <operator pos:start="903:30" pos:end="903:31">==</operator> <name pos:start="903:33" pos:end="903:50">POWERPC_EXCP_DLTLB</name></expr>)</condition><block type="pseudo" pos:start="905:25" pos:end="905:34"><block_content pos:start="905:25" pos:end="905:34">

                        <expr_stmt pos:start="905:25" pos:end="905:34"><expr pos:start="905:25" pos:end="905:33"><name pos:start="905:25" pos:end="905:26">es</name> <operator pos:start="905:28" pos:end="905:28">=</operator> <literal type="string" pos:start="905:30" pos:end="905:33">"DL"</literal></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="907:21" pos:end="909:34">else<block type="pseudo" pos:start="909:25" pos:end="909:34"><block_content pos:start="909:25" pos:end="909:34">

                        <expr_stmt pos:start="909:25" pos:end="909:34"><expr pos:start="909:25" pos:end="909:33"><name pos:start="909:25" pos:end="909:26">es</name> <operator pos:start="909:28" pos:end="909:28">=</operator> <literal type="string" pos:start="909:30" pos:end="909:33">"DS"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <expr_stmt pos:start="911:21" pos:end="911:29"><expr pos:start="911:21" pos:end="911:28"><name pos:start="911:21" pos:end="911:22">en</name> <operator pos:start="911:24" pos:end="911:24">=</operator> <literal type="char" pos:start="911:26" pos:end="911:28">'D'</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="913:21" pos:end="913:48"><expr pos:start="913:21" pos:end="913:47"><name pos:start="913:21" pos:end="913:24">miss</name> <operator pos:start="913:26" pos:end="913:26">=</operator> <operator pos:start="913:28" pos:end="913:28">&amp;</operator><name pos:start="913:29" pos:end="913:47"><name pos:start="913:29" pos:end="913:31">env</name><operator pos:start="913:32" pos:end="913:33">-&gt;</operator><name pos:start="913:34" pos:end="913:36">spr</name><index pos:start="913:37" pos:end="913:47">[<expr pos:start="913:38" pos:end="913:46"><name pos:start="913:38" pos:end="913:46">SPR_DMISS</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="915:21" pos:end="915:46"><expr pos:start="915:21" pos:end="915:45"><name pos:start="915:21" pos:end="915:23">cmp</name> <operator pos:start="915:25" pos:end="915:25">=</operator> <operator pos:start="915:27" pos:end="915:27">&amp;</operator><name pos:start="915:28" pos:end="915:45"><name pos:start="915:28" pos:end="915:30">env</name><operator pos:start="915:31" pos:end="915:32">-&gt;</operator><name pos:start="915:33" pos:end="915:35">spr</name><index pos:start="915:36" pos:end="915:45">[<expr pos:start="915:37" pos:end="915:44"><name pos:start="915:37" pos:end="915:44">SPR_DCMP</name></expr>]</index></name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="919:17" pos:end="927:41"><expr pos:start="919:17" pos:end="927:40"><call pos:start="919:17" pos:end="927:40"><name pos:start="919:17" pos:end="919:23">fprintf</name><argument_list pos:start="919:24" pos:end="927:40">(<argument pos:start="919:25" pos:end="919:31"><expr pos:start="919:25" pos:end="919:31"><name pos:start="919:25" pos:end="919:31">logfile</name></expr></argument>, <argument pos:start="919:34" pos:end="921:59"><expr pos:start="919:34" pos:end="921:59"><literal type="string" pos:start="919:34" pos:end="919:55">"6xx %sTLB miss: %cM "</literal> <name pos:start="919:57" pos:end="919:61">ADDRX</name> <literal type="string" pos:start="919:63" pos:end="919:69">" %cC "</literal> <name pos:start="919:71" pos:end="919:75">ADDRX</name>

                        <literal type="string" pos:start="921:25" pos:end="921:30">" H1 "</literal> <name pos:start="921:32" pos:end="921:36">ADDRX</name> <literal type="string" pos:start="921:38" pos:end="921:43">" H2 "</literal> <name pos:start="921:45" pos:end="921:49">ADDRX</name> <literal type="string" pos:start="921:51" pos:end="921:59">" %08x\n"</literal></expr></argument>,

                        <argument pos:start="923:25" pos:end="923:26"><expr pos:start="923:25" pos:end="923:26"><name pos:start="923:25" pos:end="923:26">es</name></expr></argument>, <argument pos:start="923:29" pos:end="923:30"><expr pos:start="923:29" pos:end="923:30"><name pos:start="923:29" pos:end="923:30">en</name></expr></argument>, <argument pos:start="923:33" pos:end="923:37"><expr pos:start="923:33" pos:end="923:37"><operator pos:start="923:33" pos:end="923:33">*</operator><name pos:start="923:34" pos:end="923:37">miss</name></expr></argument>, <argument pos:start="923:40" pos:end="923:41"><expr pos:start="923:40" pos:end="923:41"><name pos:start="923:40" pos:end="923:41">en</name></expr></argument>, <argument pos:start="923:44" pos:end="923:47"><expr pos:start="923:44" pos:end="923:47"><operator pos:start="923:44" pos:end="923:44">*</operator><name pos:start="923:45" pos:end="923:47">cmp</name></expr></argument>,

                        <argument pos:start="925:25" pos:end="925:43"><expr pos:start="925:25" pos:end="925:43"><name pos:start="925:25" pos:end="925:43"><name pos:start="925:25" pos:end="925:27">env</name><operator pos:start="925:28" pos:end="925:29">-&gt;</operator><name pos:start="925:30" pos:end="925:32">spr</name><index pos:start="925:33" pos:end="925:43">[<expr pos:start="925:34" pos:end="925:42"><name pos:start="925:34" pos:end="925:42">SPR_HASH1</name></expr>]</index></name></expr></argument>, <argument pos:start="925:46" pos:end="925:64"><expr pos:start="925:46" pos:end="925:64"><name pos:start="925:46" pos:end="925:64"><name pos:start="925:46" pos:end="925:48">env</name><operator pos:start="925:49" pos:end="925:50">-&gt;</operator><name pos:start="925:51" pos:end="925:53">spr</name><index pos:start="925:54" pos:end="925:64">[<expr pos:start="925:55" pos:end="925:63"><name pos:start="925:55" pos:end="925:63">SPR_HASH2</name></expr>]</index></name></expr></argument>,

                        <argument pos:start="927:25" pos:end="927:39"><expr pos:start="927:25" pos:end="927:39"><name pos:start="927:25" pos:end="927:39"><name pos:start="927:25" pos:end="927:27">env</name><operator pos:start="927:28" pos:end="927:29">-&gt;</operator><name pos:start="927:30" pos:end="927:39">error_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="931:1" pos:end="931:6">#<cpp:directive pos:start="931:2" pos:end="931:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="933:13" pos:end="933:37"><expr pos:start="933:13" pos:end="933:36"><name pos:start="933:13" pos:end="933:15">msr</name> <operator pos:start="933:17" pos:end="933:18">|=</operator> <name pos:start="933:20" pos:end="933:30"><name pos:start="933:20" pos:end="933:22">env</name><operator pos:start="933:23" pos:end="933:24">-&gt;</operator><name pos:start="933:25" pos:end="933:27">crf</name><index pos:start="933:28" pos:end="933:30">[<expr pos:start="933:29" pos:end="933:29"><literal type="number" pos:start="933:29" pos:end="933:29">0</literal></expr>]</index></name> <operator pos:start="933:32" pos:end="933:33">&lt;&lt;</operator> <literal type="number" pos:start="933:35" pos:end="933:36">28</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="935:13" pos:end="935:35"><expr pos:start="935:13" pos:end="935:34"><name pos:start="935:13" pos:end="935:15">msr</name> <operator pos:start="935:17" pos:end="935:18">|=</operator> <name pos:start="935:20" pos:end="935:34"><name pos:start="935:20" pos:end="935:22">env</name><operator pos:start="935:23" pos:end="935:24">-&gt;</operator><name pos:start="935:25" pos:end="935:34">error_code</name></name></expr>;</expr_stmt> <comment type="block" pos:start="935:37" pos:end="935:60">/* key, D/I, S/L bits */</comment>

            <comment type="block" pos:start="937:13" pos:end="937:47">/* Set way using a LRU mechanism */</comment>

            <expr_stmt pos:start="939:13" pos:end="939:68"><expr pos:start="939:13" pos:end="939:67"><name pos:start="939:13" pos:end="939:15">msr</name> <operator pos:start="939:17" pos:end="939:18">|=</operator> <operator pos:start="939:20" pos:end="939:20">(</operator><operator pos:start="939:21" pos:end="939:21">(</operator><name pos:start="939:22" pos:end="939:34"><name pos:start="939:22" pos:end="939:24">env</name><operator pos:start="939:25" pos:end="939:26">-&gt;</operator><name pos:start="939:27" pos:end="939:34">last_way</name></name> <operator pos:start="939:36" pos:end="939:36">+</operator> <literal type="number" pos:start="939:38" pos:end="939:38">1</literal><operator pos:start="939:39" pos:end="939:39">)</operator> <operator pos:start="939:41" pos:end="939:41">&amp;</operator> <operator pos:start="939:43" pos:end="939:43">(</operator><name pos:start="939:44" pos:end="939:55"><name pos:start="939:44" pos:end="939:46">env</name><operator pos:start="939:47" pos:end="939:48">-&gt;</operator><name pos:start="939:49" pos:end="939:55">nb_ways</name></name> <operator pos:start="939:57" pos:end="939:57">-</operator> <literal type="number" pos:start="939:59" pos:end="939:59">1</literal><operator pos:start="939:60" pos:end="939:60">)</operator><operator pos:start="939:61" pos:end="939:61">)</operator> <operator pos:start="939:63" pos:end="939:64">&lt;&lt;</operator> <literal type="number" pos:start="939:66" pos:end="939:67">17</literal></expr>;</expr_stmt>

            <break pos:start="941:13" pos:end="941:18">break;</break>

        <case pos:start="943:9" pos:end="943:31">case <expr pos:start="943:14" pos:end="943:30"><name pos:start="943:14" pos:end="943:30">POWERPC_EXCP_74xx</name></expr>:</case>

        <label pos:start="945:9" pos:end="948:0"><name pos:start="945:9" pos:end="945:21">tlb_miss_74xx</name>:</label>

<cpp:if pos:start="947:1" pos:end="947:32">#<cpp:directive pos:start="947:2" pos:end="947:3">if</cpp:directive> <expr pos:start="947:5" pos:end="947:32"><call pos:start="947:5" pos:end="947:32"><name pos:start="947:5" pos:end="947:11">defined</name> <argument_list pos:start="947:13" pos:end="947:32">(<argument pos:start="947:14" pos:end="947:31"><expr pos:start="947:14" pos:end="947:31"><name pos:start="947:14" pos:end="947:31">DEBUG_SOFTWARE_TLB</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <if_stmt pos:start="949:13" pos:end="994:0"><if pos:start="949:13" pos:end="994:0">if <condition pos:start="949:16" pos:end="949:30">(<expr pos:start="949:17" pos:end="949:29"><name pos:start="949:17" pos:end="949:24">loglevel</name> <operator pos:start="949:26" pos:end="949:27">!=</operator> <literal type="number" pos:start="949:29" pos:end="949:29">0</literal></expr>)</condition> <block pos:start="949:32" pos:end="994:0">{<block_content pos:start="951:17" pos:end="989:66">

                <decl_stmt pos:start="951:17" pos:end="951:40"><decl pos:start="951:17" pos:end="951:39"><type pos:start="951:17" pos:end="951:37"><specifier pos:start="951:17" pos:end="951:21">const</specifier> <name pos:start="951:23" pos:end="951:30">unsigned</name> <name pos:start="951:32" pos:end="951:35">char</name> <modifier pos:start="951:37" pos:end="951:37">*</modifier></type><name pos:start="951:38" pos:end="951:39">es</name></decl>;</decl_stmt>

                <decl_stmt pos:start="953:17" pos:end="953:41"><decl pos:start="953:17" pos:end="953:34"><type pos:start="953:17" pos:end="953:30"><name pos:start="953:17" pos:end="953:28">target_ulong</name> <modifier pos:start="953:30" pos:end="953:30">*</modifier></type><name pos:start="953:31" pos:end="953:34">miss</name></decl>, <decl pos:start="953:37" pos:end="953:40"><type ref="prev" pos:start="953:17" pos:end="953:30"><modifier pos:start="953:37" pos:end="953:37">*</modifier></type><name pos:start="953:38" pos:end="953:40">cmp</name></decl>;</decl_stmt>

                <decl_stmt pos:start="955:17" pos:end="955:23"><decl pos:start="955:17" pos:end="955:22"><type pos:start="955:17" pos:end="955:19"><name pos:start="955:17" pos:end="955:19">int</name></type> <name pos:start="955:21" pos:end="955:22">en</name></decl>;</decl_stmt>

                <if_stmt pos:start="957:17" pos:end="983:17"><if pos:start="957:17" pos:end="967:17">if <condition pos:start="957:20" pos:end="957:47">(<expr pos:start="957:21" pos:end="957:46"><name pos:start="957:21" pos:end="957:24">excp</name> <operator pos:start="957:26" pos:end="957:27">==</operator> <name pos:start="957:29" pos:end="957:46">POWERPC_EXCP_IFTLB</name></expr>)</condition> <block pos:start="957:49" pos:end="967:17">{<block_content pos:start="959:21" pos:end="965:46">

                    <expr_stmt pos:start="959:21" pos:end="959:29"><expr pos:start="959:21" pos:end="959:28"><name pos:start="959:21" pos:end="959:22">es</name> <operator pos:start="959:24" pos:end="959:24">=</operator> <literal type="string" pos:start="959:26" pos:end="959:28">"I"</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="961:21" pos:end="961:29"><expr pos:start="961:21" pos:end="961:28"><name pos:start="961:21" pos:end="961:22">en</name> <operator pos:start="961:24" pos:end="961:24">=</operator> <literal type="char" pos:start="961:26" pos:end="961:28">'I'</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="963:21" pos:end="963:48"><expr pos:start="963:21" pos:end="963:47"><name pos:start="963:21" pos:end="963:24">miss</name> <operator pos:start="963:26" pos:end="963:26">=</operator> <operator pos:start="963:28" pos:end="963:28">&amp;</operator><name pos:start="963:29" pos:end="963:47"><name pos:start="963:29" pos:end="963:31">env</name><operator pos:start="963:32" pos:end="963:33">-&gt;</operator><name pos:start="963:34" pos:end="963:36">spr</name><index pos:start="963:37" pos:end="963:47">[<expr pos:start="963:38" pos:end="963:46"><name pos:start="963:38" pos:end="963:46">SPR_IMISS</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="965:21" pos:end="965:46"><expr pos:start="965:21" pos:end="965:45"><name pos:start="965:21" pos:end="965:23">cmp</name> <operator pos:start="965:25" pos:end="965:25">=</operator> <operator pos:start="965:27" pos:end="965:27">&amp;</operator><name pos:start="965:28" pos:end="965:45"><name pos:start="965:28" pos:end="965:30">env</name><operator pos:start="965:31" pos:end="965:32">-&gt;</operator><name pos:start="965:33" pos:end="965:35">spr</name><index pos:start="965:36" pos:end="965:45">[<expr pos:start="965:37" pos:end="965:44"><name pos:start="965:37" pos:end="965:44">SPR_ICMP</name></expr>]</index></name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="967:19" pos:end="983:17">else <block pos:start="967:24" pos:end="983:17">{<block_content pos:start="969:21" pos:end="981:47">

                    <if_stmt pos:start="969:21" pos:end="975:34"><if pos:start="969:21" pos:end="971:34">if <condition pos:start="969:24" pos:end="969:51">(<expr pos:start="969:25" pos:end="969:50"><name pos:start="969:25" pos:end="969:28">excp</name> <operator pos:start="969:30" pos:end="969:31">==</operator> <name pos:start="969:33" pos:end="969:50">POWERPC_EXCP_DLTLB</name></expr>)</condition><block type="pseudo" pos:start="971:25" pos:end="971:34"><block_content pos:start="971:25" pos:end="971:34">

                        <expr_stmt pos:start="971:25" pos:end="971:34"><expr pos:start="971:25" pos:end="971:33"><name pos:start="971:25" pos:end="971:26">es</name> <operator pos:start="971:28" pos:end="971:28">=</operator> <literal type="string" pos:start="971:30" pos:end="971:33">"DL"</literal></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="973:21" pos:end="975:34">else<block type="pseudo" pos:start="975:25" pos:end="975:34"><block_content pos:start="975:25" pos:end="975:34">

                        <expr_stmt pos:start="975:25" pos:end="975:34"><expr pos:start="975:25" pos:end="975:33"><name pos:start="975:25" pos:end="975:26">es</name> <operator pos:start="975:28" pos:end="975:28">=</operator> <literal type="string" pos:start="975:30" pos:end="975:33">"DS"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <expr_stmt pos:start="977:21" pos:end="977:29"><expr pos:start="977:21" pos:end="977:28"><name pos:start="977:21" pos:end="977:22">en</name> <operator pos:start="977:24" pos:end="977:24">=</operator> <literal type="char" pos:start="977:26" pos:end="977:28">'D'</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="979:21" pos:end="979:50"><expr pos:start="979:21" pos:end="979:49"><name pos:start="979:21" pos:end="979:24">miss</name> <operator pos:start="979:26" pos:end="979:26">=</operator> <operator pos:start="979:28" pos:end="979:28">&amp;</operator><name pos:start="979:29" pos:end="979:49"><name pos:start="979:29" pos:end="979:31">env</name><operator pos:start="979:32" pos:end="979:33">-&gt;</operator><name pos:start="979:34" pos:end="979:36">spr</name><index pos:start="979:37" pos:end="979:49">[<expr pos:start="979:38" pos:end="979:48"><name pos:start="979:38" pos:end="979:48">SPR_TLBMISS</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="981:21" pos:end="981:47"><expr pos:start="981:21" pos:end="981:46"><name pos:start="981:21" pos:end="981:23">cmp</name> <operator pos:start="981:25" pos:end="981:25">=</operator> <operator pos:start="981:27" pos:end="981:27">&amp;</operator><name pos:start="981:28" pos:end="981:46"><name pos:start="981:28" pos:end="981:30">env</name><operator pos:start="981:31" pos:end="981:32">-&gt;</operator><name pos:start="981:33" pos:end="981:35">spr</name><index pos:start="981:36" pos:end="981:46">[<expr pos:start="981:37" pos:end="981:45"><name pos:start="981:37" pos:end="981:45">SPR_PTEHI</name></expr>]</index></name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="985:17" pos:end="989:66"><expr pos:start="985:17" pos:end="989:65"><call pos:start="985:17" pos:end="989:65"><name pos:start="985:17" pos:end="985:23">fprintf</name><argument_list pos:start="985:24" pos:end="989:65">(<argument pos:start="985:25" pos:end="985:31"><expr pos:start="985:25" pos:end="985:31"><name pos:start="985:25" pos:end="985:31">logfile</name></expr></argument>, <argument pos:start="985:34" pos:end="987:33"><expr pos:start="985:34" pos:end="987:33"><literal type="string" pos:start="985:34" pos:end="985:56">"74xx %sTLB miss: %cM "</literal> <name pos:start="985:58" pos:end="985:62">ADDRX</name> <literal type="string" pos:start="985:64" pos:end="985:70">" %cC "</literal> <name pos:start="985:72" pos:end="985:76">ADDRX</name>

                        <literal type="string" pos:start="987:25" pos:end="987:33">" %08x\n"</literal></expr></argument>,

                        <argument pos:start="989:25" pos:end="989:26"><expr pos:start="989:25" pos:end="989:26"><name pos:start="989:25" pos:end="989:26">es</name></expr></argument>, <argument pos:start="989:29" pos:end="989:30"><expr pos:start="989:29" pos:end="989:30"><name pos:start="989:29" pos:end="989:30">en</name></expr></argument>, <argument pos:start="989:33" pos:end="989:37"><expr pos:start="989:33" pos:end="989:37"><operator pos:start="989:33" pos:end="989:33">*</operator><name pos:start="989:34" pos:end="989:37">miss</name></expr></argument>, <argument pos:start="989:40" pos:end="989:41"><expr pos:start="989:40" pos:end="989:41"><name pos:start="989:40" pos:end="989:41">en</name></expr></argument>, <argument pos:start="989:44" pos:end="989:47"><expr pos:start="989:44" pos:end="989:47"><operator pos:start="989:44" pos:end="989:44">*</operator><name pos:start="989:45" pos:end="989:47">cmp</name></expr></argument>, <argument pos:start="989:50" pos:end="989:64"><expr pos:start="989:50" pos:end="989:64"><name pos:start="989:50" pos:end="989:64"><name pos:start="989:50" pos:end="989:52">env</name><operator pos:start="989:53" pos:end="989:54">-&gt;</operator><name pos:start="989:55" pos:end="989:64">error_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="993:1" pos:end="993:6">#<cpp:directive pos:start="993:2" pos:end="993:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="995:13" pos:end="995:35"><expr pos:start="995:13" pos:end="995:34"><name pos:start="995:13" pos:end="995:15">msr</name> <operator pos:start="995:17" pos:end="995:18">|=</operator> <name pos:start="995:20" pos:end="995:34"><name pos:start="995:20" pos:end="995:22">env</name><operator pos:start="995:23" pos:end="995:24">-&gt;</operator><name pos:start="995:25" pos:end="995:34">error_code</name></name></expr>;</expr_stmt> <comment type="block" pos:start="995:37" pos:end="995:49">/* key bit */</comment>

            <break pos:start="997:13" pos:end="997:18">break;</break>

        <default pos:start="999:9" pos:end="999:16">default:</default>

            <expr_stmt pos:start="1001:13" pos:end="1001:70"><expr pos:start="1001:13" pos:end="1001:69"><call pos:start="1001:13" pos:end="1001:69"><name pos:start="1001:13" pos:end="1001:21">cpu_abort</name><argument_list pos:start="1001:22" pos:end="1001:69">(<argument pos:start="1001:23" pos:end="1001:25"><expr pos:start="1001:23" pos:end="1001:25"><name pos:start="1001:23" pos:end="1001:25">env</name></expr></argument>, <argument pos:start="1001:28" pos:end="1001:68"><expr pos:start="1001:28" pos:end="1001:68"><literal type="string" pos:start="1001:28" pos:end="1001:68">"Invalid data store TLB miss exception\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1003:13" pos:end="1003:18">break;</break>

        </block_content>}</block></switch>

        <goto pos:start="1007:9" pos:end="1007:24">goto <name pos:start="1007:14" pos:end="1007:23">store_next</name>;</goto>

    <case pos:start="1009:5" pos:end="1009:26">case <expr pos:start="1009:10" pos:end="1009:25"><name pos:start="1009:10" pos:end="1009:25">POWERPC_EXCP_FPA</name></expr>:</case>       <comment type="block" pos:start="1009:34" pos:end="1009:79">/* Floating-point assist exception          */</comment>

        <comment type="block" pos:start="1011:9" pos:end="1011:23">/* XXX: TODO */</comment>

        <expr_stmt pos:start="1013:9" pos:end="1015:48"><expr pos:start="1013:9" pos:end="1015:47"><call pos:start="1013:9" pos:end="1015:47"><name pos:start="1013:9" pos:end="1013:17">cpu_abort</name><argument_list pos:start="1013:18" pos:end="1015:47">(<argument pos:start="1013:19" pos:end="1013:21"><expr pos:start="1013:19" pos:end="1013:21"><name pos:start="1013:19" pos:end="1013:21">env</name></expr></argument>, <argument pos:start="1013:24" pos:end="1015:46"><expr pos:start="1013:24" pos:end="1015:46"><literal type="string" pos:start="1013:24" pos:end="1013:57">"Floating point assist exception "</literal>

                  <literal type="string" pos:start="1015:19" pos:end="1015:46">"is not implemented yet !\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="1017:9" pos:end="1017:24">goto <name pos:start="1017:14" pos:end="1017:23">store_next</name>;</goto>

    <case pos:start="1019:5" pos:end="1019:27">case <expr pos:start="1019:10" pos:end="1019:26"><name pos:start="1019:10" pos:end="1019:26">POWERPC_EXCP_IABR</name></expr>:</case>      <comment type="block" pos:start="1019:34" pos:end="1019:79">/* Instruction address breakpoint           */</comment>

        <comment type="block" pos:start="1021:9" pos:end="1021:23">/* XXX: TODO */</comment>

        <expr_stmt pos:start="1023:9" pos:end="1023:68"><expr pos:start="1023:9" pos:end="1023:67"><call pos:start="1023:9" pos:end="1023:67"><name pos:start="1023:9" pos:end="1023:17">cpu_abort</name><argument_list pos:start="1023:18" pos:end="1023:67">(<argument pos:start="1023:19" pos:end="1023:21"><expr pos:start="1023:19" pos:end="1023:21"><name pos:start="1023:19" pos:end="1023:21">env</name></expr></argument>, <argument pos:start="1023:24" pos:end="1023:66"><expr pos:start="1023:24" pos:end="1023:66"><literal type="string" pos:start="1023:24" pos:end="1023:66">"IABR exception is not implemented yet !\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="1025:9" pos:end="1025:24">goto <name pos:start="1025:14" pos:end="1025:23">store_next</name>;</goto>

    <case pos:start="1027:5" pos:end="1027:26">case <expr pos:start="1027:10" pos:end="1027:25"><name pos:start="1027:10" pos:end="1027:25">POWERPC_EXCP_SMI</name></expr>:</case>       <comment type="block" pos:start="1027:34" pos:end="1027:79">/* System management interrupt              */</comment>

        <comment type="block" pos:start="1029:9" pos:end="1029:23">/* XXX: TODO */</comment>

        <expr_stmt pos:start="1031:9" pos:end="1031:67"><expr pos:start="1031:9" pos:end="1031:66"><call pos:start="1031:9" pos:end="1031:66"><name pos:start="1031:9" pos:end="1031:17">cpu_abort</name><argument_list pos:start="1031:18" pos:end="1031:66">(<argument pos:start="1031:19" pos:end="1031:21"><expr pos:start="1031:19" pos:end="1031:21"><name pos:start="1031:19" pos:end="1031:21">env</name></expr></argument>, <argument pos:start="1031:24" pos:end="1031:65"><expr pos:start="1031:24" pos:end="1031:65"><literal type="string" pos:start="1031:24" pos:end="1031:65">"SMI exception is not implemented yet !\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="1033:9" pos:end="1033:24">goto <name pos:start="1033:14" pos:end="1033:23">store_next</name>;</goto>

    <case pos:start="1035:5" pos:end="1035:28">case <expr pos:start="1035:10" pos:end="1035:27"><name pos:start="1035:10" pos:end="1035:27">POWERPC_EXCP_THERM</name></expr>:</case>     <comment type="block" pos:start="1035:34" pos:end="1035:79">/* Thermal interrupt                        */</comment>

        <comment type="block" pos:start="1037:9" pos:end="1037:23">/* XXX: TODO */</comment>

        <expr_stmt pos:start="1039:9" pos:end="1041:48"><expr pos:start="1039:9" pos:end="1041:47"><call pos:start="1039:9" pos:end="1041:47"><name pos:start="1039:9" pos:end="1039:17">cpu_abort</name><argument_list pos:start="1039:18" pos:end="1041:47">(<argument pos:start="1039:19" pos:end="1039:21"><expr pos:start="1039:19" pos:end="1039:21"><name pos:start="1039:19" pos:end="1039:21">env</name></expr></argument>, <argument pos:start="1039:24" pos:end="1041:46"><expr pos:start="1039:24" pos:end="1041:46"><literal type="string" pos:start="1039:24" pos:end="1039:54">"Thermal management exception "</literal>

                  <literal type="string" pos:start="1041:19" pos:end="1041:46">"is not implemented yet !\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="1043:9" pos:end="1043:24">goto <name pos:start="1043:14" pos:end="1043:23">store_next</name>;</goto>

    <case pos:start="1045:5" pos:end="1045:28">case <expr pos:start="1045:10" pos:end="1045:27"><name pos:start="1045:10" pos:end="1045:27">POWERPC_EXCP_PERFM</name></expr>:</case>     <comment type="block" pos:start="1045:34" pos:end="1045:79">/* Embedded performance monitor interrupt   */</comment>

        <expr_stmt pos:start="1047:9" pos:end="1050:0"><expr pos:start="1047:9" pos:end="1047:18"><name pos:start="1047:9" pos:end="1047:14">msr_ri</name> <operator pos:start="1047:16" pos:end="1047:16">=</operator> <literal type="number" pos:start="1047:18" pos:end="1047:18">0</literal></expr>;</expr_stmt>

<cpp:if pos:start="1049:1" pos:end="1049:26">#<cpp:directive pos:start="1049:2" pos:end="1049:3">if</cpp:directive> <expr pos:start="1049:5" pos:end="1049:26"><call pos:start="1049:5" pos:end="1049:26"><name pos:start="1049:5" pos:end="1049:11">defined</name><argument_list pos:start="1049:12" pos:end="1049:26">(<argument pos:start="1049:13" pos:end="1049:25"><expr pos:start="1049:13" pos:end="1049:25"><name pos:start="1049:13" pos:end="1049:25">TARGET_PPC64H</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="1051:9" pos:end="1056:0"><if pos:start="1051:9" pos:end="1056:0">if <condition pos:start="1051:12" pos:end="1051:23">(<expr pos:start="1051:13" pos:end="1051:22"><name pos:start="1051:13" pos:end="1051:17">lpes1</name> <operator pos:start="1051:19" pos:end="1051:20">==</operator> <literal type="number" pos:start="1051:22" pos:end="1051:22">0</literal></expr>)</condition><block type="pseudo" pos:start="1053:13" pos:end="1056:0"><block_content pos:start="1053:13" pos:end="1056:0">

            <expr_stmt pos:start="1053:13" pos:end="1056:0"><expr pos:start="1053:13" pos:end="1053:22"><name pos:start="1053:13" pos:end="1053:18">msr_hv</name> <operator pos:start="1053:20" pos:end="1053:20">=</operator> <literal type="number" pos:start="1053:22" pos:end="1053:22">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="1055:1" pos:end="1055:6">#<cpp:directive pos:start="1055:2" pos:end="1055:6">endif</cpp:directive></cpp:endif>

        <comment type="block" pos:start="1057:9" pos:end="1057:23">/* XXX: TODO */</comment>

        <expr_stmt pos:start="1059:9" pos:end="1061:78"><expr pos:start="1059:9" pos:end="1061:77"><call pos:start="1059:9" pos:end="1061:77"><name pos:start="1059:9" pos:end="1059:17">cpu_abort</name><argument_list pos:start="1059:18" pos:end="1061:77">(<argument pos:start="1059:19" pos:end="1059:21"><expr pos:start="1059:19" pos:end="1059:21"><name pos:start="1059:19" pos:end="1059:21">env</name></expr></argument>,

                  <argument pos:start="1061:19" pos:end="1061:76"><expr pos:start="1061:19" pos:end="1061:76"><literal type="string" pos:start="1061:19" pos:end="1061:76">"Performance counter exception is not implemented yet !\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="1063:9" pos:end="1063:24">goto <name pos:start="1063:14" pos:end="1063:23">store_next</name>;</goto>

    <case pos:start="1065:5" pos:end="1065:27">case <expr pos:start="1065:10" pos:end="1065:26"><name pos:start="1065:10" pos:end="1065:26">POWERPC_EXCP_VPUA</name></expr>:</case>      <comment type="block" pos:start="1065:34" pos:end="1065:79">/* Vector assist exception                  */</comment>

        <comment type="block" pos:start="1067:9" pos:end="1067:23">/* XXX: TODO */</comment>

        <expr_stmt pos:start="1069:9" pos:end="1069:74"><expr pos:start="1069:9" pos:end="1069:73"><call pos:start="1069:9" pos:end="1069:73"><name pos:start="1069:9" pos:end="1069:17">cpu_abort</name><argument_list pos:start="1069:18" pos:end="1069:73">(<argument pos:start="1069:19" pos:end="1069:21"><expr pos:start="1069:19" pos:end="1069:21"><name pos:start="1069:19" pos:end="1069:21">env</name></expr></argument>, <argument pos:start="1069:24" pos:end="1069:72"><expr pos:start="1069:24" pos:end="1069:72"><literal type="string" pos:start="1069:24" pos:end="1069:72">"VPU assist exception is not implemented yet !\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="1071:9" pos:end="1071:24">goto <name pos:start="1071:14" pos:end="1071:23">store_next</name>;</goto>

    <case pos:start="1073:5" pos:end="1073:28">case <expr pos:start="1073:10" pos:end="1073:27"><name pos:start="1073:10" pos:end="1073:27">POWERPC_EXCP_SOFTP</name></expr>:</case>     <comment type="block" pos:start="1073:34" pos:end="1073:79">/* Soft patch exception                     */</comment>

        <comment type="block" pos:start="1075:9" pos:end="1075:23">/* XXX: TODO */</comment>

        <expr_stmt pos:start="1077:9" pos:end="1079:73"><expr pos:start="1077:9" pos:end="1079:72"><call pos:start="1077:9" pos:end="1079:72"><name pos:start="1077:9" pos:end="1077:17">cpu_abort</name><argument_list pos:start="1077:18" pos:end="1079:72">(<argument pos:start="1077:19" pos:end="1077:21"><expr pos:start="1077:19" pos:end="1077:21"><name pos:start="1077:19" pos:end="1077:21">env</name></expr></argument>,

                  <argument pos:start="1079:19" pos:end="1079:71"><expr pos:start="1079:19" pos:end="1079:71"><literal type="string" pos:start="1079:19" pos:end="1079:71">"970 soft-patch exception is not implemented yet !\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="1081:9" pos:end="1081:24">goto <name pos:start="1081:14" pos:end="1081:23">store_next</name>;</goto>

    <case pos:start="1083:5" pos:end="1083:28">case <expr pos:start="1083:10" pos:end="1083:27"><name pos:start="1083:10" pos:end="1083:27">POWERPC_EXCP_MAINT</name></expr>:</case>     <comment type="block" pos:start="1083:34" pos:end="1083:79">/* Maintenance exception                    */</comment>

        <comment type="block" pos:start="1085:9" pos:end="1085:23">/* XXX: TODO */</comment>

        <expr_stmt pos:start="1087:9" pos:end="1089:74"><expr pos:start="1087:9" pos:end="1089:73"><call pos:start="1087:9" pos:end="1089:73"><name pos:start="1087:9" pos:end="1087:17">cpu_abort</name><argument_list pos:start="1087:18" pos:end="1089:73">(<argument pos:start="1087:19" pos:end="1087:21"><expr pos:start="1087:19" pos:end="1087:21"><name pos:start="1087:19" pos:end="1087:21">env</name></expr></argument>,

                  <argument pos:start="1089:19" pos:end="1089:72"><expr pos:start="1089:19" pos:end="1089:72"><literal type="string" pos:start="1089:19" pos:end="1089:72">"970 maintenance exception is not implemented yet !\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="1091:9" pos:end="1091:24">goto <name pos:start="1091:14" pos:end="1091:23">store_next</name>;</goto>

    <default pos:start="1093:5" pos:end="1093:12">default:</default>

    <label pos:start="1095:5" pos:end="1095:17"><name pos:start="1095:5" pos:end="1095:16">excp_invalid</name>:</label>

        <expr_stmt pos:start="1097:9" pos:end="1097:73"><expr pos:start="1097:9" pos:end="1097:72"><call pos:start="1097:9" pos:end="1097:72"><name pos:start="1097:9" pos:end="1097:17">cpu_abort</name><argument_list pos:start="1097:18" pos:end="1097:72">(<argument pos:start="1097:19" pos:end="1097:21"><expr pos:start="1097:19" pos:end="1097:21"><name pos:start="1097:19" pos:end="1097:21">env</name></expr></argument>, <argument pos:start="1097:24" pos:end="1097:65"><expr pos:start="1097:24" pos:end="1097:65"><literal type="string" pos:start="1097:24" pos:end="1097:65">"Invalid PowerPC exception %d. Aborting\n"</literal></expr></argument>, <argument pos:start="1097:68" pos:end="1097:71"><expr pos:start="1097:68" pos:end="1097:71"><name pos:start="1097:68" pos:end="1097:71">excp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1099:9" pos:end="1099:14">break;</break>

    <label pos:start="1101:5" pos:end="1101:18"><name pos:start="1101:5" pos:end="1101:17">store_current</name>:</label>

        <comment type="block" pos:start="1103:9" pos:end="1103:47">/* save current instruction location */</comment>

        <expr_stmt pos:start="1105:9" pos:end="1105:38"><expr pos:start="1105:9" pos:end="1105:37"><name pos:start="1105:9" pos:end="1105:22"><name pos:start="1105:9" pos:end="1105:11">env</name><operator pos:start="1105:12" pos:end="1105:13">-&gt;</operator><name pos:start="1105:14" pos:end="1105:16">spr</name><index pos:start="1105:17" pos:end="1105:22">[<expr pos:start="1105:18" pos:end="1105:21"><name pos:start="1105:18" pos:end="1105:21">srr0</name></expr>]</index></name> <operator pos:start="1105:24" pos:end="1105:24">=</operator> <name pos:start="1105:26" pos:end="1105:33"><name pos:start="1105:26" pos:end="1105:28">env</name><operator pos:start="1105:29" pos:end="1105:30">-&gt;</operator><name pos:start="1105:31" pos:end="1105:33">nip</name></name> <operator pos:start="1105:35" pos:end="1105:35">-</operator> <literal type="number" pos:start="1105:37" pos:end="1105:37">4</literal></expr>;</expr_stmt>

        <break pos:start="1107:9" pos:end="1107:14">break;</break>

    <label pos:start="1109:5" pos:end="1109:15"><name pos:start="1109:5" pos:end="1109:14">store_next</name>:</label>

        <comment type="block" pos:start="1111:9" pos:end="1111:44">/* save next instruction location */</comment>

        <expr_stmt pos:start="1113:9" pos:end="1113:34"><expr pos:start="1113:9" pos:end="1113:33"><name pos:start="1113:9" pos:end="1113:22"><name pos:start="1113:9" pos:end="1113:11">env</name><operator pos:start="1113:12" pos:end="1113:13">-&gt;</operator><name pos:start="1113:14" pos:end="1113:16">spr</name><index pos:start="1113:17" pos:end="1113:22">[<expr pos:start="1113:18" pos:end="1113:21"><name pos:start="1113:18" pos:end="1113:21">srr0</name></expr>]</index></name> <operator pos:start="1113:24" pos:end="1113:24">=</operator> <name pos:start="1113:26" pos:end="1113:33"><name pos:start="1113:26" pos:end="1113:28">env</name><operator pos:start="1113:29" pos:end="1113:30">-&gt;</operator><name pos:start="1113:31" pos:end="1113:33">nip</name></name></expr>;</expr_stmt>

        <break pos:start="1115:9" pos:end="1115:14">break;</break>

    </block_content>}</block></switch>

    <comment type="block" pos:start="1119:5" pos:end="1119:18">/* Save MSR */</comment>

    <expr_stmt pos:start="1121:5" pos:end="1121:25"><expr pos:start="1121:5" pos:end="1121:24"><name pos:start="1121:5" pos:end="1121:18"><name pos:start="1121:5" pos:end="1121:7">env</name><operator pos:start="1121:8" pos:end="1121:9">-&gt;</operator><name pos:start="1121:10" pos:end="1121:12">spr</name><index pos:start="1121:13" pos:end="1121:18">[<expr pos:start="1121:14" pos:end="1121:17"><name pos:start="1121:14" pos:end="1121:17">srr1</name></expr>]</index></name> <operator pos:start="1121:20" pos:end="1121:20">=</operator> <name pos:start="1121:22" pos:end="1121:24">msr</name></expr>;</expr_stmt>

    <comment type="block" pos:start="1123:5" pos:end="1123:75">/* If any alternate SRR register are defined, duplicate saved values */</comment>

    <if_stmt pos:start="1125:5" pos:end="1127:41"><if pos:start="1125:5" pos:end="1127:41">if <condition pos:start="1125:8" pos:end="1125:20">(<expr pos:start="1125:9" pos:end="1125:19"><name pos:start="1125:9" pos:end="1125:13">asrr0</name> <operator pos:start="1125:15" pos:end="1125:16">!=</operator> <operator pos:start="1125:18" pos:end="1125:18">-</operator><literal type="number" pos:start="1125:19" pos:end="1125:19">1</literal></expr>)</condition><block type="pseudo" pos:start="1127:9" pos:end="1127:41"><block_content pos:start="1127:9" pos:end="1127:41">

        <expr_stmt pos:start="1127:9" pos:end="1127:41"><expr pos:start="1127:9" pos:end="1127:40"><name pos:start="1127:9" pos:end="1127:23"><name pos:start="1127:9" pos:end="1127:11">env</name><operator pos:start="1127:12" pos:end="1127:13">-&gt;</operator><name pos:start="1127:14" pos:end="1127:16">spr</name><index pos:start="1127:17" pos:end="1127:23">[<expr pos:start="1127:18" pos:end="1127:22"><name pos:start="1127:18" pos:end="1127:22">asrr0</name></expr>]</index></name> <operator pos:start="1127:25" pos:end="1127:25">=</operator> <name pos:start="1127:27" pos:end="1127:40"><name pos:start="1127:27" pos:end="1127:29">env</name><operator pos:start="1127:30" pos:end="1127:31">-&gt;</operator><name pos:start="1127:32" pos:end="1127:34">spr</name><index pos:start="1127:35" pos:end="1127:40">[<expr pos:start="1127:36" pos:end="1127:39"><name pos:start="1127:36" pos:end="1127:39">srr0</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="1129:5" pos:end="1131:41"><if pos:start="1129:5" pos:end="1131:41">if <condition pos:start="1129:8" pos:end="1129:20">(<expr pos:start="1129:9" pos:end="1129:19"><name pos:start="1129:9" pos:end="1129:13">asrr1</name> <operator pos:start="1129:15" pos:end="1129:16">!=</operator> <operator pos:start="1129:18" pos:end="1129:18">-</operator><literal type="number" pos:start="1129:19" pos:end="1129:19">1</literal></expr>)</condition><block type="pseudo" pos:start="1131:9" pos:end="1131:41"><block_content pos:start="1131:9" pos:end="1131:41">

        <expr_stmt pos:start="1131:9" pos:end="1131:41"><expr pos:start="1131:9" pos:end="1131:40"><name pos:start="1131:9" pos:end="1131:23"><name pos:start="1131:9" pos:end="1131:11">env</name><operator pos:start="1131:12" pos:end="1131:13">-&gt;</operator><name pos:start="1131:14" pos:end="1131:16">spr</name><index pos:start="1131:17" pos:end="1131:23">[<expr pos:start="1131:18" pos:end="1131:22"><name pos:start="1131:18" pos:end="1131:22">asrr1</name></expr>]</index></name> <operator pos:start="1131:25" pos:end="1131:25">=</operator> <name pos:start="1131:27" pos:end="1131:40"><name pos:start="1131:27" pos:end="1131:29">env</name><operator pos:start="1131:30" pos:end="1131:31">-&gt;</operator><name pos:start="1131:32" pos:end="1131:34">spr</name><index pos:start="1131:35" pos:end="1131:40">[<expr pos:start="1131:36" pos:end="1131:39"><name pos:start="1131:36" pos:end="1131:39">srr1</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block" pos:start="1133:5" pos:end="1133:56">/* If we disactivated any translation, flush TLBs */</comment>

    <if_stmt pos:start="1135:5" pos:end="1137:26"><if pos:start="1135:5" pos:end="1137:26">if <condition pos:start="1135:8" pos:end="1135:25">(<expr pos:start="1135:9" pos:end="1135:24"><name pos:start="1135:9" pos:end="1135:14">msr_ir</name> <operator pos:start="1135:16" pos:end="1135:17">||</operator> <name pos:start="1135:19" pos:end="1135:24">msr_dr</name></expr>)</condition><block type="pseudo" pos:start="1137:9" pos:end="1137:26"><block_content pos:start="1137:9" pos:end="1137:26">

        <expr_stmt pos:start="1137:9" pos:end="1137:26"><expr pos:start="1137:9" pos:end="1137:25"><call pos:start="1137:9" pos:end="1137:25"><name pos:start="1137:9" pos:end="1137:17">tlb_flush</name><argument_list pos:start="1137:18" pos:end="1137:25">(<argument pos:start="1137:19" pos:end="1137:21"><expr pos:start="1137:19" pos:end="1137:21"><name pos:start="1137:19" pos:end="1137:21">env</name></expr></argument>, <argument pos:start="1137:24" pos:end="1137:24"><expr pos:start="1137:24" pos:end="1137:24"><literal type="number" pos:start="1137:24" pos:end="1137:24">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block" pos:start="1139:5" pos:end="1139:38">/* reload MSR with correct bits */</comment>

    <expr_stmt pos:start="1141:5" pos:end="1141:15"><expr pos:start="1141:5" pos:end="1141:14"><name pos:start="1141:5" pos:end="1141:10">msr_ee</name> <operator pos:start="1141:12" pos:end="1141:12">=</operator> <literal type="number" pos:start="1141:14" pos:end="1141:14">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="1143:5" pos:end="1143:15"><expr pos:start="1143:5" pos:end="1143:14"><name pos:start="1143:5" pos:end="1143:10">msr_pr</name> <operator pos:start="1143:12" pos:end="1143:12">=</operator> <literal type="number" pos:start="1143:14" pos:end="1143:14">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="1145:5" pos:end="1145:15"><expr pos:start="1145:5" pos:end="1145:14"><name pos:start="1145:5" pos:end="1145:10">msr_fp</name> <operator pos:start="1145:12" pos:end="1145:12">=</operator> <literal type="number" pos:start="1145:14" pos:end="1145:14">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="1147:5" pos:end="1147:16"><expr pos:start="1147:5" pos:end="1147:15"><name pos:start="1147:5" pos:end="1147:11">msr_fe0</name> <operator pos:start="1147:13" pos:end="1147:13">=</operator> <literal type="number" pos:start="1147:15" pos:end="1147:15">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="1149:5" pos:end="1149:15"><expr pos:start="1149:5" pos:end="1149:14"><name pos:start="1149:5" pos:end="1149:10">msr_se</name> <operator pos:start="1149:12" pos:end="1149:12">=</operator> <literal type="number" pos:start="1149:14" pos:end="1149:14">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="1151:5" pos:end="1151:15"><expr pos:start="1151:5" pos:end="1151:14"><name pos:start="1151:5" pos:end="1151:10">msr_be</name> <operator pos:start="1151:12" pos:end="1151:12">=</operator> <literal type="number" pos:start="1151:14" pos:end="1151:14">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="1153:5" pos:end="1153:16"><expr pos:start="1153:5" pos:end="1153:15"><name pos:start="1153:5" pos:end="1153:11">msr_fe1</name> <operator pos:start="1153:13" pos:end="1153:13">=</operator> <literal type="number" pos:start="1153:15" pos:end="1153:15">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="1155:5" pos:end="1155:15"><expr pos:start="1155:5" pos:end="1155:14"><name pos:start="1155:5" pos:end="1155:10">msr_ir</name> <operator pos:start="1155:12" pos:end="1155:12">=</operator> <literal type="number" pos:start="1155:14" pos:end="1155:14">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="1157:5" pos:end="1164:0"><expr pos:start="1157:5" pos:end="1157:14"><name pos:start="1157:5" pos:end="1157:10">msr_dr</name> <operator pos:start="1157:12" pos:end="1157:12">=</operator> <literal type="number" pos:start="1157:14" pos:end="1157:14">0</literal></expr>;</expr_stmt>

<cpp:if pos:start="1159:1" pos:end="1159:5">#<cpp:directive pos:start="1159:2" pos:end="1159:3">if</cpp:directive> <expr pos:start="1159:5" pos:end="1159:5"><literal type="number" pos:start="1159:5" pos:end="1159:5">0</literal></expr></cpp:if> <comment type="block" pos:start="1159:7" pos:end="1159:40">/* Fix this: not on all targets */</comment>

    msr_pmm = 0;

<cpp:endif pos:start="1163:1" pos:end="1163:6">#<cpp:directive pos:start="1163:2" pos:end="1163:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="1165:5" pos:end="1165:21"><expr pos:start="1165:5" pos:end="1165:20"><name pos:start="1165:5" pos:end="1165:10">msr_le</name> <operator pos:start="1165:12" pos:end="1165:12">=</operator> <name pos:start="1165:14" pos:end="1165:20">msr_ile</name></expr>;</expr_stmt>

    <expr_stmt pos:start="1167:5" pos:end="1167:27"><expr pos:start="1167:5" pos:end="1167:26"><call pos:start="1167:5" pos:end="1167:26"><name pos:start="1167:5" pos:end="1167:21">do_compute_hflags</name><argument_list pos:start="1167:22" pos:end="1167:26">(<argument pos:start="1167:23" pos:end="1167:25"><expr pos:start="1167:23" pos:end="1167:25"><name pos:start="1167:23" pos:end="1167:25">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="1169:5" pos:end="1169:25">/* Jump to handler */</comment>

    <expr_stmt pos:start="1171:5" pos:end="1171:37"><expr pos:start="1171:5" pos:end="1171:36"><name pos:start="1171:5" pos:end="1171:10">vector</name> <operator pos:start="1171:12" pos:end="1171:12">=</operator> <name pos:start="1171:14" pos:end="1171:36"><name pos:start="1171:14" pos:end="1171:16">env</name><operator pos:start="1171:17" pos:end="1171:18">-&gt;</operator><name pos:start="1171:19" pos:end="1171:30">excp_vectors</name><index pos:start="1171:31" pos:end="1171:36">[<expr pos:start="1171:32" pos:end="1171:35"><name pos:start="1171:32" pos:end="1171:35">excp</name></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="1173:5" pos:end="1179:5"><if pos:start="1173:5" pos:end="1179:5">if <condition pos:start="1173:8" pos:end="1173:35">(<expr pos:start="1173:9" pos:end="1173:34"><name pos:start="1173:9" pos:end="1173:14">vector</name> <operator pos:start="1173:16" pos:end="1173:17">==</operator> <operator pos:start="1173:19" pos:end="1173:19">(</operator><name pos:start="1173:20" pos:end="1173:31">target_ulong</name><operator pos:start="1173:32" pos:end="1173:32">)</operator><operator pos:start="1173:33" pos:end="1173:33">-</operator><literal type="number" pos:start="1173:34" pos:end="1173:34">1</literal></expr>)</condition> <block pos:start="1173:37" pos:end="1179:5">{<block_content pos:start="1175:9" pos:end="1177:24">

        <expr_stmt pos:start="1175:9" pos:end="1177:24"><expr pos:start="1175:9" pos:end="1177:23"><call pos:start="1175:9" pos:end="1177:23"><name pos:start="1175:9" pos:end="1175:17">cpu_abort</name><argument_list pos:start="1175:18" pos:end="1177:23">(<argument pos:start="1175:19" pos:end="1175:21"><expr pos:start="1175:19" pos:end="1175:21"><name pos:start="1175:19" pos:end="1175:21">env</name></expr></argument>, <argument pos:start="1175:24" pos:end="1175:72"><expr pos:start="1175:24" pos:end="1175:72"><literal type="string" pos:start="1175:24" pos:end="1175:72">"Raised an exception without defined vector %d\n"</literal></expr></argument>,

                  <argument pos:start="1177:19" pos:end="1177:22"><expr pos:start="1177:19" pos:end="1177:22"><name pos:start="1177:19" pos:end="1177:22">excp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="1181:5" pos:end="1184:0"><expr pos:start="1181:5" pos:end="1181:30"><name pos:start="1181:5" pos:end="1181:10">vector</name> <operator pos:start="1181:12" pos:end="1181:13">|=</operator> <name pos:start="1181:15" pos:end="1181:30"><name pos:start="1181:15" pos:end="1181:17">env</name><operator pos:start="1181:18" pos:end="1181:19">-&gt;</operator><name pos:start="1181:20" pos:end="1181:30">excp_prefix</name></name></expr>;</expr_stmt>

<cpp:if pos:start="1183:1" pos:end="1183:25">#<cpp:directive pos:start="1183:2" pos:end="1183:3">if</cpp:directive> <expr pos:start="1183:5" pos:end="1183:25"><call pos:start="1183:5" pos:end="1183:25"><name pos:start="1183:5" pos:end="1183:11">defined</name><argument_list pos:start="1183:12" pos:end="1183:25">(<argument pos:start="1183:13" pos:end="1183:24"><expr pos:start="1183:13" pos:end="1183:24"><name pos:start="1183:13" pos:end="1183:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="1185:5" pos:end="1204:0"><if pos:start="1185:5" pos:end="1193:5">if <condition pos:start="1185:8" pos:end="1185:41">(<expr pos:start="1185:9" pos:end="1185:40"><name pos:start="1185:9" pos:end="1185:18">excp_model</name> <operator pos:start="1185:20" pos:end="1185:21">==</operator> <name pos:start="1185:23" pos:end="1185:40">POWERPC_EXCP_BOOKE</name></expr>)</condition> <block pos:start="1185:43" pos:end="1193:5">{<block_content pos:start="1187:9" pos:end="1191:38">

        <expr_stmt pos:start="1187:9" pos:end="1187:25"><expr pos:start="1187:9" pos:end="1187:24"><name pos:start="1187:9" pos:end="1187:14">msr_cm</name> <operator pos:start="1187:16" pos:end="1187:16">=</operator> <name pos:start="1187:18" pos:end="1187:24">msr_icm</name></expr>;</expr_stmt>

        <if_stmt pos:start="1189:9" pos:end="1191:38"><if pos:start="1189:9" pos:end="1191:38">if <condition pos:start="1189:12" pos:end="1189:20">(<expr pos:start="1189:13" pos:end="1189:19"><operator pos:start="1189:13" pos:end="1189:13">!</operator><name pos:start="1189:14" pos:end="1189:19">msr_cm</name></expr>)</condition><block type="pseudo" pos:start="1191:13" pos:end="1191:38"><block_content pos:start="1191:13" pos:end="1191:38">

            <expr_stmt pos:start="1191:13" pos:end="1191:38"><expr pos:start="1191:13" pos:end="1191:37"><name pos:start="1191:13" pos:end="1191:18">vector</name> <operator pos:start="1191:20" pos:end="1191:20">=</operator> <operator pos:start="1191:22" pos:end="1191:22">(</operator><name pos:start="1191:23" pos:end="1191:30">uint32_t</name><operator pos:start="1191:31" pos:end="1191:31">)</operator><name pos:start="1191:32" pos:end="1191:37">vector</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="1193:7" pos:end="1204:0">else <block pos:start="1193:12" pos:end="1204:0">{<block_content pos:start="1195:9" pos:end="1199:38">

        <expr_stmt pos:start="1195:9" pos:end="1195:25"><expr pos:start="1195:9" pos:end="1195:24"><name pos:start="1195:9" pos:end="1195:14">msr_sf</name> <operator pos:start="1195:16" pos:end="1195:16">=</operator> <name pos:start="1195:18" pos:end="1195:24">msr_isf</name></expr>;</expr_stmt>

        <if_stmt pos:start="1197:9" pos:end="1199:38"><if pos:start="1197:9" pos:end="1199:38">if <condition pos:start="1197:12" pos:end="1197:20">(<expr pos:start="1197:13" pos:end="1197:19"><operator pos:start="1197:13" pos:end="1197:13">!</operator><name pos:start="1197:14" pos:end="1197:19">msr_sf</name></expr>)</condition><block type="pseudo" pos:start="1199:13" pos:end="1199:38"><block_content pos:start="1199:13" pos:end="1199:38">

            <expr_stmt pos:start="1199:13" pos:end="1199:38"><expr pos:start="1199:13" pos:end="1199:37"><name pos:start="1199:13" pos:end="1199:18">vector</name> <operator pos:start="1199:20" pos:end="1199:20">=</operator> <operator pos:start="1199:22" pos:end="1199:22">(</operator><name pos:start="1199:23" pos:end="1199:30">uint32_t</name><operator pos:start="1199:31" pos:end="1199:31">)</operator><name pos:start="1199:32" pos:end="1199:37">vector</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

<cpp:endif pos:start="1203:1" pos:end="1203:6">#<cpp:directive pos:start="1203:2" pos:end="1203:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="1205:5" pos:end="1205:22"><expr pos:start="1205:5" pos:end="1205:21"><name pos:start="1205:5" pos:end="1205:12"><name pos:start="1205:5" pos:end="1205:7">env</name><operator pos:start="1205:8" pos:end="1205:9">-&gt;</operator><name pos:start="1205:10" pos:end="1205:12">nip</name></name> <operator pos:start="1205:14" pos:end="1205:14">=</operator> <name pos:start="1205:16" pos:end="1205:21">vector</name></expr>;</expr_stmt>

    <comment type="block" pos:start="1207:5" pos:end="1207:31">/* Reset exception state */</comment>

    <expr_stmt pos:start="1209:5" pos:end="1209:45"><expr pos:start="1209:5" pos:end="1209:44"><name pos:start="1209:5" pos:end="1209:24"><name pos:start="1209:5" pos:end="1209:7">env</name><operator pos:start="1209:8" pos:end="1209:9">-&gt;</operator><name pos:start="1209:10" pos:end="1209:24">exception_index</name></name> <operator pos:start="1209:26" pos:end="1209:26">=</operator> <name pos:start="1209:28" pos:end="1209:44">POWERPC_EXCP_NONE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="1211:5" pos:end="1211:24"><expr pos:start="1211:5" pos:end="1211:23"><name pos:start="1211:5" pos:end="1211:19"><name pos:start="1211:5" pos:end="1211:7">env</name><operator pos:start="1211:8" pos:end="1211:9">-&gt;</operator><name pos:start="1211:10" pos:end="1211:19">error_code</name></name> <operator pos:start="1211:21" pos:end="1211:21">=</operator> <literal type="number" pos:start="1211:23" pos:end="1211:23">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
