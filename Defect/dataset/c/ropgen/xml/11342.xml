<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11342.c" pos:tabs="8"><macro pos:start="1:1" pos:end="3:29"><name pos:start="1:1" pos:end="1:15">bdrv_rw_vmstate</name><argument_list pos:start="1:16" pos:end="3:29">(<argument pos:start="1:17" pos:end="1:36">BlockDriverState *bs</argument>, <argument pos:start="1:39" pos:end="1:56">QEMUIOVector *qiov</argument>, <argument pos:start="1:59" pos:end="1:69">int64_t pos</argument>,

                <argument pos:start="3:17" pos:end="3:28">bool is_read</argument>)</argument_list></macro>

<block pos:start="5:1" pos:end="43:1">{<block_content pos:start="7:5" pos:end="41:5">

    <if_stmt pos:start="7:5" pos:end="41:5"><if pos:start="7:5" pos:end="11:5">if <condition pos:start="7:8" pos:end="7:28">(<expr pos:start="7:9" pos:end="7:27"><call pos:start="7:9" pos:end="7:27"><name pos:start="7:9" pos:end="7:25">qemu_in_coroutine</name><argument_list pos:start="7:26" pos:end="7:27">()</argument_list></call></expr>)</condition> <block pos:start="7:30" pos:end="11:5">{<block_content pos:start="9:9" pos:end="9:58">

        <return pos:start="9:9" pos:end="9:58">return <expr pos:start="9:16" pos:end="9:57"><call pos:start="9:16" pos:end="9:57"><name pos:start="9:16" pos:end="9:33">bdrv_co_rw_vmstate</name><argument_list pos:start="9:34" pos:end="9:57">(<argument pos:start="9:35" pos:end="9:36"><expr pos:start="9:35" pos:end="9:36"><name pos:start="9:35" pos:end="9:36">bs</name></expr></argument>, <argument pos:start="9:39" pos:end="9:42"><expr pos:start="9:39" pos:end="9:42"><name pos:start="9:39" pos:end="9:42">qiov</name></expr></argument>, <argument pos:start="9:45" pos:end="9:47"><expr pos:start="9:45" pos:end="9:47"><name pos:start="9:45" pos:end="9:47">pos</name></expr></argument>, <argument pos:start="9:50" pos:end="9:56"><expr pos:start="9:50" pos:end="9:56"><name pos:start="9:50" pos:end="9:56">is_read</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if> <else pos:start="11:7" pos:end="41:5">else <block pos:start="11:12" pos:end="41:5">{<block_content pos:start="13:9" pos:end="39:24">

        <decl_stmt pos:start="13:9" pos:end="25:10"><decl pos:start="13:9" pos:end="25:9"><type pos:start="13:9" pos:end="13:21"><name pos:start="13:9" pos:end="13:21">BdrvVmstateCo</name></type> <name pos:start="13:23" pos:end="13:26">data</name> <init pos:start="13:28" pos:end="25:9">= <expr pos:start="13:30" pos:end="25:9"><block pos:start="13:30" pos:end="25:9">{

            <expr pos:start="15:13" pos:end="15:28"><operator pos:start="15:13" pos:end="15:13">.</operator><name pos:start="15:14" pos:end="15:15">bs</name>         <operator pos:start="15:25" pos:end="15:25">=</operator> <name pos:start="15:27" pos:end="15:28">bs</name></expr>,

            <expr pos:start="17:13" pos:end="17:30"><operator pos:start="17:13" pos:end="17:13">.</operator><name pos:start="17:14" pos:end="17:17">qiov</name>       <operator pos:start="17:25" pos:end="17:25">=</operator> <name pos:start="17:27" pos:end="17:30">qiov</name></expr>,

            <expr pos:start="19:13" pos:end="19:29"><operator pos:start="19:13" pos:end="19:13">.</operator><name pos:start="19:14" pos:end="19:16">pos</name>        <operator pos:start="19:25" pos:end="19:25">=</operator> <name pos:start="19:27" pos:end="19:29">pos</name></expr>,

            <expr pos:start="21:13" pos:end="21:33"><operator pos:start="21:13" pos:end="21:13">.</operator><name pos:start="21:14" pos:end="21:20">is_read</name>    <operator pos:start="21:25" pos:end="21:25">=</operator> <name pos:start="21:27" pos:end="21:33">is_read</name></expr>,

            <expr pos:start="23:13" pos:end="23:38"><operator pos:start="23:13" pos:end="23:13">.</operator><name pos:start="23:14" pos:end="23:16">ret</name>        <operator pos:start="23:25" pos:end="23:25">=</operator> <operator pos:start="23:27" pos:end="23:27">-</operator><name pos:start="23:28" pos:end="23:38">EINPROGRESS</name></expr>,

        }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="27:9" pos:end="27:79"><decl pos:start="27:9" pos:end="27:78"><type pos:start="27:9" pos:end="27:19"><name pos:start="27:9" pos:end="27:17">Coroutine</name> <modifier pos:start="27:19" pos:end="27:19">*</modifier></type><name pos:start="27:20" pos:end="27:21">co</name> <init pos:start="27:23" pos:end="27:78">= <expr pos:start="27:25" pos:end="27:78"><call pos:start="27:25" pos:end="27:78"><name pos:start="27:25" pos:end="27:45">qemu_coroutine_create</name><argument_list pos:start="27:46" pos:end="27:78">(<argument pos:start="27:47" pos:end="27:70"><expr pos:start="27:47" pos:end="27:70"><name pos:start="27:47" pos:end="27:70">bdrv_co_rw_vmstate_entry</name></expr></argument>, <argument pos:start="27:73" pos:end="27:77"><expr pos:start="27:73" pos:end="27:77"><operator pos:start="27:73" pos:end="27:73">&amp;</operator><name pos:start="27:74" pos:end="27:77">data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="31:9" pos:end="31:33"><expr pos:start="31:9" pos:end="31:32"><call pos:start="31:9" pos:end="31:32"><name pos:start="31:9" pos:end="31:28">qemu_coroutine_enter</name><argument_list pos:start="31:29" pos:end="31:32">(<argument pos:start="31:30" pos:end="31:31"><expr pos:start="31:30" pos:end="31:31"><name pos:start="31:30" pos:end="31:31">co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <while pos:start="33:9" pos:end="37:9">while <condition pos:start="33:15" pos:end="33:40">(<expr pos:start="33:16" pos:end="33:39"><name pos:start="33:16" pos:end="33:23"><name pos:start="33:16" pos:end="33:19">data</name><operator pos:start="33:20" pos:end="33:20">.</operator><name pos:start="33:21" pos:end="33:23">ret</name></name> <operator pos:start="33:25" pos:end="33:26">==</operator> <operator pos:start="33:28" pos:end="33:28">-</operator><name pos:start="33:29" pos:end="33:39">EINPROGRESS</name></expr>)</condition> <block pos:start="33:42" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:53">

            <expr_stmt pos:start="35:13" pos:end="35:53"><expr pos:start="35:13" pos:end="35:52"><call pos:start="35:13" pos:end="35:52"><name pos:start="35:13" pos:end="35:20">aio_poll</name><argument_list pos:start="35:21" pos:end="35:52">(<argument pos:start="35:22" pos:end="35:45"><expr pos:start="35:22" pos:end="35:45"><call pos:start="35:22" pos:end="35:45"><name pos:start="35:22" pos:end="35:41">bdrv_get_aio_context</name><argument_list pos:start="35:42" pos:end="35:45">(<argument pos:start="35:43" pos:end="35:44"><expr pos:start="35:43" pos:end="35:44"><name pos:start="35:43" pos:end="35:44">bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="35:48" pos:end="35:51"><expr pos:start="35:48" pos:end="35:51"><name pos:start="35:48" pos:end="35:51">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while>

        <return pos:start="39:9" pos:end="39:24">return <expr pos:start="39:16" pos:end="39:23"><name pos:start="39:16" pos:end="39:23"><name pos:start="39:16" pos:end="39:19">data</name><operator pos:start="39:20" pos:end="39:20">.</operator><name pos:start="39:21" pos:end="39:23">ret</name></name></expr>;</return>

    </block_content>}</block></else></if_stmt>

</block_content>}</block>
</unit>
