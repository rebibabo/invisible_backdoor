<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15231.c" pos:tabs="8"><function pos:start="1:1" pos:end="409:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">inline</specifier> <specifier pos:start="1:8" pos:end="1:13">static</specifier> <name pos:start="1:15" pos:end="1:18">void</name> <name pos:start="1:20" pos:end="1:25">RENAME</name></type>(<name pos:start="1:27" pos:end="1:33">hcscale</name>)<parameter_list pos:start="1:35" pos:end="9:58">(<parameter pos:start="1:36" pos:end="1:48"><decl pos:start="1:36" pos:end="1:48"><type pos:start="1:36" pos:end="1:48"><name pos:start="1:36" pos:end="1:43">uint16_t</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">dst</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:63"><decl pos:start="1:51" pos:end="1:63"><type pos:start="1:51" pos:end="1:63"><name pos:start="1:51" pos:end="1:54">long</name></type> <name pos:start="1:56" pos:end="1:63">dstWidth</name></decl></parameter>, <parameter pos:start="1:66" pos:end="1:78"><decl pos:start="1:66" pos:end="1:78"><type pos:start="1:66" pos:end="1:78"><name pos:start="1:66" pos:end="1:72">uint8_t</name> <modifier pos:start="1:74" pos:end="1:74">*</modifier></type><name pos:start="1:75" pos:end="1:78">src1</name></decl></parameter>, <parameter pos:start="1:81" pos:end="1:93"><decl pos:start="1:81" pos:end="1:93"><type pos:start="1:81" pos:end="1:93"><name pos:start="1:81" pos:end="1:87">uint8_t</name> <modifier pos:start="1:89" pos:end="1:89">*</modifier></type><name pos:start="1:90" pos:end="1:93">src2</name></decl></parameter>,

				   <parameter pos:start="3:36" pos:end="3:43"><decl pos:start="3:36" pos:end="3:43"><type pos:start="3:36" pos:end="3:43"><name pos:start="3:36" pos:end="3:38">int</name></type> <name pos:start="3:40" pos:end="3:43">srcW</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:53"><decl pos:start="3:46" pos:end="3:53"><type pos:start="3:46" pos:end="3:53"><name pos:start="3:46" pos:end="3:48">int</name></type> <name pos:start="3:50" pos:end="3:53">xInc</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:64"><decl pos:start="3:56" pos:end="3:64"><type pos:start="3:56" pos:end="3:64"><name pos:start="3:56" pos:end="3:58">int</name></type> <name pos:start="3:60" pos:end="3:64">flags</name></decl></parameter>, <parameter pos:start="3:67" pos:end="3:83"><decl pos:start="3:67" pos:end="3:83"><type pos:start="3:67" pos:end="3:83"><name pos:start="3:67" pos:end="3:69">int</name></type> <name pos:start="3:71" pos:end="3:83">canMMX2BeUsed</name></decl></parameter>, <parameter pos:start="3:86" pos:end="3:104"><decl pos:start="3:86" pos:end="3:104"><type pos:start="3:86" pos:end="3:104"><name pos:start="3:86" pos:end="3:92">int16_t</name> <modifier pos:start="3:94" pos:end="3:94">*</modifier></type><name pos:start="3:95" pos:end="3:104">hChrFilter</name></decl></parameter>,

				   <parameter pos:start="5:36" pos:end="5:57"><decl pos:start="5:36" pos:end="5:57"><type pos:start="5:36" pos:end="5:57"><name pos:start="5:36" pos:end="5:42">int16_t</name> <modifier pos:start="5:44" pos:end="5:44">*</modifier></type><name pos:start="5:45" pos:end="5:57">hChrFilterPos</name></decl></parameter>, <parameter pos:start="5:60" pos:end="5:77"><decl pos:start="5:60" pos:end="5:77"><type pos:start="5:60" pos:end="5:77"><name pos:start="5:60" pos:end="5:62">int</name></type> <name pos:start="5:64" pos:end="5:77">hChrFilterSize</name></decl></parameter>, <parameter pos:start="5:80" pos:end="5:96"><decl pos:start="5:80" pos:end="5:96"><type pos:start="5:80" pos:end="5:96"><name pos:start="5:80" pos:end="5:83">void</name> <modifier pos:start="5:85" pos:end="5:85">*</modifier></type><name pos:start="5:86" pos:end="5:96">funnyUVCode</name></decl></parameter>,

				   <parameter pos:start="7:36" pos:end="7:48"><decl pos:start="7:36" pos:end="7:48"><type pos:start="7:36" pos:end="7:48"><name pos:start="7:36" pos:end="7:38">int</name></type> <name pos:start="7:40" pos:end="7:48">srcFormat</name></decl></parameter>, <parameter pos:start="7:51" pos:end="7:75"><decl pos:start="7:51" pos:end="7:75"><type pos:start="7:51" pos:end="7:75"><name pos:start="7:51" pos:end="7:57">uint8_t</name> <modifier pos:start="7:59" pos:end="7:59">*</modifier></type><name pos:start="7:60" pos:end="7:75">formatConvBuffer</name></decl></parameter>, <parameter pos:start="7:78" pos:end="7:96"><decl pos:start="7:78" pos:end="7:96"><type pos:start="7:78" pos:end="7:96"><name pos:start="7:78" pos:end="7:84">int16_t</name> <modifier pos:start="7:86" pos:end="7:86">*</modifier></type><name pos:start="7:87" pos:end="7:96">mmx2Filter</name></decl></parameter>,

				   <parameter pos:start="9:36" pos:end="9:57"><decl pos:start="9:36" pos:end="9:57"><type pos:start="9:36" pos:end="9:57"><name pos:start="9:36" pos:end="9:42">int32_t</name> <modifier pos:start="9:44" pos:end="9:44">*</modifier></type><name pos:start="9:45" pos:end="9:57">mmx2FilterPos</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="409:1">{<block_content pos:start="13:5" pos:end="407:4">

    <if_stmt pos:start="13:5" pos:end="120:0"><if pos:start="13:5" pos:end="23:5">if<condition pos:start="13:7" pos:end="13:30">(<expr pos:start="13:8" pos:end="13:29"><name pos:start="13:8" pos:end="13:16">srcFormat</name><operator pos:start="13:17" pos:end="13:18">==</operator><name pos:start="13:19" pos:end="13:29">IMGFMT_YUY2</name></expr>)</condition>

    <block pos:start="15:5" pos:end="23:5">{<block_content pos:start="17:9" pos:end="21:36">

	<expr_stmt pos:start="17:9" pos:end="17:84"><expr pos:start="17:9" pos:end="17:83"><call pos:start="17:9" pos:end="17:83"><call pos:start="17:9" pos:end="17:24"><name pos:start="17:9" pos:end="17:14">RENAME</name><argument_list pos:start="17:15" pos:end="17:24">(<argument pos:start="17:16" pos:end="17:23"><expr pos:start="17:16" pos:end="17:23"><name pos:start="17:16" pos:end="17:23">yuy2ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="17:25" pos:end="17:83">(<argument pos:start="17:26" pos:end="17:41"><expr pos:start="17:26" pos:end="17:41"><name pos:start="17:26" pos:end="17:41">formatConvBuffer</name></expr></argument>, <argument pos:start="17:44" pos:end="17:64"><expr pos:start="17:44" pos:end="17:64"><name pos:start="17:44" pos:end="17:59">formatConvBuffer</name><operator pos:start="17:60" pos:end="17:60">+</operator><literal type="number" pos:start="17:61" pos:end="17:64">2048</literal></expr></argument>, <argument pos:start="17:67" pos:end="17:70"><expr pos:start="17:67" pos:end="17:70"><name pos:start="17:67" pos:end="17:70">src1</name></expr></argument>, <argument pos:start="17:73" pos:end="17:76"><expr pos:start="17:73" pos:end="17:76"><name pos:start="17:73" pos:end="17:76">src2</name></expr></argument>, <argument pos:start="17:79" pos:end="17:82"><expr pos:start="17:79" pos:end="17:82"><name pos:start="17:79" pos:end="17:82">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="19:9" pos:end="19:31"><expr pos:start="19:9" pos:end="19:30"><name pos:start="19:9" pos:end="19:12">src1</name><operator pos:start="19:13" pos:end="19:13">=</operator> <name pos:start="19:15" pos:end="19:30">formatConvBuffer</name></expr>;</expr_stmt>

	<expr_stmt pos:start="21:9" pos:end="21:36"><expr pos:start="21:9" pos:end="21:35"><name pos:start="21:9" pos:end="21:12">src2</name><operator pos:start="21:13" pos:end="21:13">=</operator> <name pos:start="21:15" pos:end="21:30">formatConvBuffer</name><operator pos:start="21:31" pos:end="21:31">+</operator><literal type="number" pos:start="21:32" pos:end="21:35">2048</literal></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="25:5" pos:end="35:5">else if<condition pos:start="25:12" pos:end="25:35">(<expr pos:start="25:13" pos:end="25:34"><name pos:start="25:13" pos:end="25:21">srcFormat</name><operator pos:start="25:22" pos:end="25:23">==</operator><name pos:start="25:24" pos:end="25:34">IMGFMT_UYVY</name></expr>)</condition>

    <block pos:start="27:5" pos:end="35:5">{<block_content pos:start="29:9" pos:end="33:36">

	<expr_stmt pos:start="29:9" pos:end="29:84"><expr pos:start="29:9" pos:end="29:83"><call pos:start="29:9" pos:end="29:83"><call pos:start="29:9" pos:end="29:24"><name pos:start="29:9" pos:end="29:14">RENAME</name><argument_list pos:start="29:15" pos:end="29:24">(<argument pos:start="29:16" pos:end="29:23"><expr pos:start="29:16" pos:end="29:23"><name pos:start="29:16" pos:end="29:23">uyvyToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="29:25" pos:end="29:83">(<argument pos:start="29:26" pos:end="29:41"><expr pos:start="29:26" pos:end="29:41"><name pos:start="29:26" pos:end="29:41">formatConvBuffer</name></expr></argument>, <argument pos:start="29:44" pos:end="29:64"><expr pos:start="29:44" pos:end="29:64"><name pos:start="29:44" pos:end="29:59">formatConvBuffer</name><operator pos:start="29:60" pos:end="29:60">+</operator><literal type="number" pos:start="29:61" pos:end="29:64">2048</literal></expr></argument>, <argument pos:start="29:67" pos:end="29:70"><expr pos:start="29:67" pos:end="29:70"><name pos:start="29:67" pos:end="29:70">src1</name></expr></argument>, <argument pos:start="29:73" pos:end="29:76"><expr pos:start="29:73" pos:end="29:76"><name pos:start="29:73" pos:end="29:76">src2</name></expr></argument>, <argument pos:start="29:79" pos:end="29:82"><expr pos:start="29:79" pos:end="29:82"><name pos:start="29:79" pos:end="29:82">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="31:9" pos:end="31:31"><expr pos:start="31:9" pos:end="31:30"><name pos:start="31:9" pos:end="31:12">src1</name><operator pos:start="31:13" pos:end="31:13">=</operator> <name pos:start="31:15" pos:end="31:30">formatConvBuffer</name></expr>;</expr_stmt>

	<expr_stmt pos:start="33:9" pos:end="33:36"><expr pos:start="33:9" pos:end="33:35"><name pos:start="33:9" pos:end="33:12">src2</name><operator pos:start="33:13" pos:end="33:13">=</operator> <name pos:start="33:15" pos:end="33:30">formatConvBuffer</name><operator pos:start="33:31" pos:end="33:31">+</operator><literal type="number" pos:start="33:32" pos:end="33:35">2048</literal></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="37:5" pos:end="47:5">else if<condition pos:start="37:12" pos:end="37:36">(<expr pos:start="37:13" pos:end="37:35"><name pos:start="37:13" pos:end="37:21">srcFormat</name><operator pos:start="37:22" pos:end="37:23">==</operator><name pos:start="37:24" pos:end="37:35">IMGFMT_BGR32</name></expr>)</condition>

    <block pos:start="39:5" pos:end="47:5">{<block_content pos:start="41:9" pos:end="45:36">

	<expr_stmt pos:start="41:9" pos:end="41:85"><expr pos:start="41:9" pos:end="41:84"><call pos:start="41:9" pos:end="41:84"><call pos:start="41:9" pos:end="41:25"><name pos:start="41:9" pos:end="41:14">RENAME</name><argument_list pos:start="41:15" pos:end="41:25">(<argument pos:start="41:16" pos:end="41:24"><expr pos:start="41:16" pos:end="41:24"><name pos:start="41:16" pos:end="41:24">bgr32ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="41:26" pos:end="41:84">(<argument pos:start="41:27" pos:end="41:42"><expr pos:start="41:27" pos:end="41:42"><name pos:start="41:27" pos:end="41:42">formatConvBuffer</name></expr></argument>, <argument pos:start="41:45" pos:end="41:65"><expr pos:start="41:45" pos:end="41:65"><name pos:start="41:45" pos:end="41:60">formatConvBuffer</name><operator pos:start="41:61" pos:end="41:61">+</operator><literal type="number" pos:start="41:62" pos:end="41:65">2048</literal></expr></argument>, <argument pos:start="41:68" pos:end="41:71"><expr pos:start="41:68" pos:end="41:71"><name pos:start="41:68" pos:end="41:71">src1</name></expr></argument>, <argument pos:start="41:74" pos:end="41:77"><expr pos:start="41:74" pos:end="41:77"><name pos:start="41:74" pos:end="41:77">src2</name></expr></argument>, <argument pos:start="41:80" pos:end="41:83"><expr pos:start="41:80" pos:end="41:83"><name pos:start="41:80" pos:end="41:83">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="43:9" pos:end="43:31"><expr pos:start="43:9" pos:end="43:30"><name pos:start="43:9" pos:end="43:12">src1</name><operator pos:start="43:13" pos:end="43:13">=</operator> <name pos:start="43:15" pos:end="43:30">formatConvBuffer</name></expr>;</expr_stmt>

	<expr_stmt pos:start="45:9" pos:end="45:36"><expr pos:start="45:9" pos:end="45:35"><name pos:start="45:9" pos:end="45:12">src2</name><operator pos:start="45:13" pos:end="45:13">=</operator> <name pos:start="45:15" pos:end="45:30">formatConvBuffer</name><operator pos:start="45:31" pos:end="45:31">+</operator><literal type="number" pos:start="45:32" pos:end="45:35">2048</literal></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="49:5" pos:end="59:5">else if<condition pos:start="49:12" pos:end="49:36">(<expr pos:start="49:13" pos:end="49:35"><name pos:start="49:13" pos:end="49:21">srcFormat</name><operator pos:start="49:22" pos:end="49:23">==</operator><name pos:start="49:24" pos:end="49:35">IMGFMT_BGR24</name></expr>)</condition>

    <block pos:start="51:5" pos:end="59:5">{<block_content pos:start="53:9" pos:end="57:36">

	<expr_stmt pos:start="53:9" pos:end="53:85"><expr pos:start="53:9" pos:end="53:84"><call pos:start="53:9" pos:end="53:84"><call pos:start="53:9" pos:end="53:25"><name pos:start="53:9" pos:end="53:14">RENAME</name><argument_list pos:start="53:15" pos:end="53:25">(<argument pos:start="53:16" pos:end="53:24"><expr pos:start="53:16" pos:end="53:24"><name pos:start="53:16" pos:end="53:24">bgr24ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="53:26" pos:end="53:84">(<argument pos:start="53:27" pos:end="53:42"><expr pos:start="53:27" pos:end="53:42"><name pos:start="53:27" pos:end="53:42">formatConvBuffer</name></expr></argument>, <argument pos:start="53:45" pos:end="53:65"><expr pos:start="53:45" pos:end="53:65"><name pos:start="53:45" pos:end="53:60">formatConvBuffer</name><operator pos:start="53:61" pos:end="53:61">+</operator><literal type="number" pos:start="53:62" pos:end="53:65">2048</literal></expr></argument>, <argument pos:start="53:68" pos:end="53:71"><expr pos:start="53:68" pos:end="53:71"><name pos:start="53:68" pos:end="53:71">src1</name></expr></argument>, <argument pos:start="53:74" pos:end="53:77"><expr pos:start="53:74" pos:end="53:77"><name pos:start="53:74" pos:end="53:77">src2</name></expr></argument>, <argument pos:start="53:80" pos:end="53:83"><expr pos:start="53:80" pos:end="53:83"><name pos:start="53:80" pos:end="53:83">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="55:9" pos:end="55:31"><expr pos:start="55:9" pos:end="55:30"><name pos:start="55:9" pos:end="55:12">src1</name><operator pos:start="55:13" pos:end="55:13">=</operator> <name pos:start="55:15" pos:end="55:30">formatConvBuffer</name></expr>;</expr_stmt>

	<expr_stmt pos:start="57:9" pos:end="57:36"><expr pos:start="57:9" pos:end="57:35"><name pos:start="57:9" pos:end="57:12">src2</name><operator pos:start="57:13" pos:end="57:13">=</operator> <name pos:start="57:15" pos:end="57:30">formatConvBuffer</name><operator pos:start="57:31" pos:end="57:31">+</operator><literal type="number" pos:start="57:32" pos:end="57:35">2048</literal></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="61:5" pos:end="71:5">else if<condition pos:start="61:12" pos:end="61:36">(<expr pos:start="61:13" pos:end="61:35"><name pos:start="61:13" pos:end="61:21">srcFormat</name><operator pos:start="61:22" pos:end="61:23">==</operator><name pos:start="61:24" pos:end="61:35">IMGFMT_BGR16</name></expr>)</condition>

    <block pos:start="63:5" pos:end="71:5">{<block_content pos:start="65:9" pos:end="69:36">

	<expr_stmt pos:start="65:9" pos:end="65:85"><expr pos:start="65:9" pos:end="65:84"><call pos:start="65:9" pos:end="65:84"><call pos:start="65:9" pos:end="65:25"><name pos:start="65:9" pos:end="65:14">RENAME</name><argument_list pos:start="65:15" pos:end="65:25">(<argument pos:start="65:16" pos:end="65:24"><expr pos:start="65:16" pos:end="65:24"><name pos:start="65:16" pos:end="65:24">bgr16ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="65:26" pos:end="65:84">(<argument pos:start="65:27" pos:end="65:42"><expr pos:start="65:27" pos:end="65:42"><name pos:start="65:27" pos:end="65:42">formatConvBuffer</name></expr></argument>, <argument pos:start="65:45" pos:end="65:65"><expr pos:start="65:45" pos:end="65:65"><name pos:start="65:45" pos:end="65:60">formatConvBuffer</name><operator pos:start="65:61" pos:end="65:61">+</operator><literal type="number" pos:start="65:62" pos:end="65:65">2048</literal></expr></argument>, <argument pos:start="65:68" pos:end="65:71"><expr pos:start="65:68" pos:end="65:71"><name pos:start="65:68" pos:end="65:71">src1</name></expr></argument>, <argument pos:start="65:74" pos:end="65:77"><expr pos:start="65:74" pos:end="65:77"><name pos:start="65:74" pos:end="65:77">src2</name></expr></argument>, <argument pos:start="65:80" pos:end="65:83"><expr pos:start="65:80" pos:end="65:83"><name pos:start="65:80" pos:end="65:83">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="67:9" pos:end="67:31"><expr pos:start="67:9" pos:end="67:30"><name pos:start="67:9" pos:end="67:12">src1</name><operator pos:start="67:13" pos:end="67:13">=</operator> <name pos:start="67:15" pos:end="67:30">formatConvBuffer</name></expr>;</expr_stmt>

	<expr_stmt pos:start="69:9" pos:end="69:36"><expr pos:start="69:9" pos:end="69:35"><name pos:start="69:9" pos:end="69:12">src2</name><operator pos:start="69:13" pos:end="69:13">=</operator> <name pos:start="69:15" pos:end="69:30">formatConvBuffer</name><operator pos:start="69:31" pos:end="69:31">+</operator><literal type="number" pos:start="69:32" pos:end="69:35">2048</literal></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="73:5" pos:end="83:5">else if<condition pos:start="73:12" pos:end="73:36">(<expr pos:start="73:13" pos:end="73:35"><name pos:start="73:13" pos:end="73:21">srcFormat</name><operator pos:start="73:22" pos:end="73:23">==</operator><name pos:start="73:24" pos:end="73:35">IMGFMT_BGR15</name></expr>)</condition>

    <block pos:start="75:5" pos:end="83:5">{<block_content pos:start="77:9" pos:end="81:36">

	<expr_stmt pos:start="77:9" pos:end="77:85"><expr pos:start="77:9" pos:end="77:84"><call pos:start="77:9" pos:end="77:84"><call pos:start="77:9" pos:end="77:25"><name pos:start="77:9" pos:end="77:14">RENAME</name><argument_list pos:start="77:15" pos:end="77:25">(<argument pos:start="77:16" pos:end="77:24"><expr pos:start="77:16" pos:end="77:24"><name pos:start="77:16" pos:end="77:24">bgr15ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="77:26" pos:end="77:84">(<argument pos:start="77:27" pos:end="77:42"><expr pos:start="77:27" pos:end="77:42"><name pos:start="77:27" pos:end="77:42">formatConvBuffer</name></expr></argument>, <argument pos:start="77:45" pos:end="77:65"><expr pos:start="77:45" pos:end="77:65"><name pos:start="77:45" pos:end="77:60">formatConvBuffer</name><operator pos:start="77:61" pos:end="77:61">+</operator><literal type="number" pos:start="77:62" pos:end="77:65">2048</literal></expr></argument>, <argument pos:start="77:68" pos:end="77:71"><expr pos:start="77:68" pos:end="77:71"><name pos:start="77:68" pos:end="77:71">src1</name></expr></argument>, <argument pos:start="77:74" pos:end="77:77"><expr pos:start="77:74" pos:end="77:77"><name pos:start="77:74" pos:end="77:77">src2</name></expr></argument>, <argument pos:start="77:80" pos:end="77:83"><expr pos:start="77:80" pos:end="77:83"><name pos:start="77:80" pos:end="77:83">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="79:9" pos:end="79:31"><expr pos:start="79:9" pos:end="79:30"><name pos:start="79:9" pos:end="79:12">src1</name><operator pos:start="79:13" pos:end="79:13">=</operator> <name pos:start="79:15" pos:end="79:30">formatConvBuffer</name></expr>;</expr_stmt>

	<expr_stmt pos:start="81:9" pos:end="81:36"><expr pos:start="81:9" pos:end="81:35"><name pos:start="81:9" pos:end="81:12">src2</name><operator pos:start="81:13" pos:end="81:13">=</operator> <name pos:start="81:15" pos:end="81:30">formatConvBuffer</name><operator pos:start="81:31" pos:end="81:31">+</operator><literal type="number" pos:start="81:32" pos:end="81:35">2048</literal></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="85:5" pos:end="95:5">else if<condition pos:start="85:12" pos:end="85:36">(<expr pos:start="85:13" pos:end="85:35"><name pos:start="85:13" pos:end="85:21">srcFormat</name><operator pos:start="85:22" pos:end="85:23">==</operator><name pos:start="85:24" pos:end="85:35">IMGFMT_RGB32</name></expr>)</condition>

    <block pos:start="87:5" pos:end="95:5">{<block_content pos:start="89:9" pos:end="93:36">

	<expr_stmt pos:start="89:9" pos:end="89:85"><expr pos:start="89:9" pos:end="89:84"><call pos:start="89:9" pos:end="89:84"><call pos:start="89:9" pos:end="89:25"><name pos:start="89:9" pos:end="89:14">RENAME</name><argument_list pos:start="89:15" pos:end="89:25">(<argument pos:start="89:16" pos:end="89:24"><expr pos:start="89:16" pos:end="89:24"><name pos:start="89:16" pos:end="89:24">rgb32ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="89:26" pos:end="89:84">(<argument pos:start="89:27" pos:end="89:42"><expr pos:start="89:27" pos:end="89:42"><name pos:start="89:27" pos:end="89:42">formatConvBuffer</name></expr></argument>, <argument pos:start="89:45" pos:end="89:65"><expr pos:start="89:45" pos:end="89:65"><name pos:start="89:45" pos:end="89:60">formatConvBuffer</name><operator pos:start="89:61" pos:end="89:61">+</operator><literal type="number" pos:start="89:62" pos:end="89:65">2048</literal></expr></argument>, <argument pos:start="89:68" pos:end="89:71"><expr pos:start="89:68" pos:end="89:71"><name pos:start="89:68" pos:end="89:71">src1</name></expr></argument>, <argument pos:start="89:74" pos:end="89:77"><expr pos:start="89:74" pos:end="89:77"><name pos:start="89:74" pos:end="89:77">src2</name></expr></argument>, <argument pos:start="89:80" pos:end="89:83"><expr pos:start="89:80" pos:end="89:83"><name pos:start="89:80" pos:end="89:83">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="91:9" pos:end="91:31"><expr pos:start="91:9" pos:end="91:30"><name pos:start="91:9" pos:end="91:12">src1</name><operator pos:start="91:13" pos:end="91:13">=</operator> <name pos:start="91:15" pos:end="91:30">formatConvBuffer</name></expr>;</expr_stmt>

	<expr_stmt pos:start="93:9" pos:end="93:36"><expr pos:start="93:9" pos:end="93:35"><name pos:start="93:9" pos:end="93:12">src2</name><operator pos:start="93:13" pos:end="93:13">=</operator> <name pos:start="93:15" pos:end="93:30">formatConvBuffer</name><operator pos:start="93:31" pos:end="93:31">+</operator><literal type="number" pos:start="93:32" pos:end="93:35">2048</literal></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="97:5" pos:end="107:5">else if<condition pos:start="97:12" pos:end="97:36">(<expr pos:start="97:13" pos:end="97:35"><name pos:start="97:13" pos:end="97:21">srcFormat</name><operator pos:start="97:22" pos:end="97:23">==</operator><name pos:start="97:24" pos:end="97:35">IMGFMT_RGB24</name></expr>)</condition>

    <block pos:start="99:5" pos:end="107:5">{<block_content pos:start="101:9" pos:end="105:36">

	<expr_stmt pos:start="101:9" pos:end="101:85"><expr pos:start="101:9" pos:end="101:84"><call pos:start="101:9" pos:end="101:84"><call pos:start="101:9" pos:end="101:25"><name pos:start="101:9" pos:end="101:14">RENAME</name><argument_list pos:start="101:15" pos:end="101:25">(<argument pos:start="101:16" pos:end="101:24"><expr pos:start="101:16" pos:end="101:24"><name pos:start="101:16" pos:end="101:24">rgb24ToUV</name></expr></argument>)</argument_list></call><argument_list pos:start="101:26" pos:end="101:84">(<argument pos:start="101:27" pos:end="101:42"><expr pos:start="101:27" pos:end="101:42"><name pos:start="101:27" pos:end="101:42">formatConvBuffer</name></expr></argument>, <argument pos:start="101:45" pos:end="101:65"><expr pos:start="101:45" pos:end="101:65"><name pos:start="101:45" pos:end="101:60">formatConvBuffer</name><operator pos:start="101:61" pos:end="101:61">+</operator><literal type="number" pos:start="101:62" pos:end="101:65">2048</literal></expr></argument>, <argument pos:start="101:68" pos:end="101:71"><expr pos:start="101:68" pos:end="101:71"><name pos:start="101:68" pos:end="101:71">src1</name></expr></argument>, <argument pos:start="101:74" pos:end="101:77"><expr pos:start="101:74" pos:end="101:77"><name pos:start="101:74" pos:end="101:77">src2</name></expr></argument>, <argument pos:start="101:80" pos:end="101:83"><expr pos:start="101:80" pos:end="101:83"><name pos:start="101:80" pos:end="101:83">srcW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="103:9" pos:end="103:31"><expr pos:start="103:9" pos:end="103:30"><name pos:start="103:9" pos:end="103:12">src1</name><operator pos:start="103:13" pos:end="103:13">=</operator> <name pos:start="103:15" pos:end="103:30">formatConvBuffer</name></expr>;</expr_stmt>

	<expr_stmt pos:start="105:9" pos:end="105:36"><expr pos:start="105:9" pos:end="105:35"><name pos:start="105:9" pos:end="105:12">src2</name><operator pos:start="105:13" pos:end="105:13">=</operator> <name pos:start="105:15" pos:end="105:30">formatConvBuffer</name><operator pos:start="105:31" pos:end="105:31">+</operator><literal type="number" pos:start="105:32" pos:end="105:35">2048</literal></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="109:5" pos:end="120:0">else if<condition pos:start="109:12" pos:end="109:30">(<expr pos:start="109:13" pos:end="109:29"><call pos:start="109:13" pos:end="109:29"><name pos:start="109:13" pos:end="109:18">isGray</name><argument_list pos:start="109:19" pos:end="109:29">(<argument pos:start="109:20" pos:end="109:28"><expr pos:start="109:20" pos:end="109:28"><name pos:start="109:20" pos:end="109:28">srcFormat</name></expr></argument>)</argument_list></call></expr>)</condition>

    <block pos:start="111:5" pos:end="120:0">{<block_content pos:start="113:9" pos:end="113:15">

    	<return pos:start="113:9" pos:end="113:15">return;</return>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="119:1" pos:end="119:15">#<cpp:directive pos:start="119:2" pos:end="119:6">ifdef</cpp:directive> <name pos:start="119:8" pos:end="119:15">HAVE_MMX</name></cpp:ifdef>

	<comment type="line" pos:start="121:9" pos:end="121:92">// use the new MMX scaler if the mmx2 can't be used (its faster than the x86asm one)</comment>

    <if_stmt pos:start="123:5" pos:end="407:4"><if pos:start="123:5" pos:end="407:4">if<condition pos:start="123:7" pos:end="126:0">(<expr pos:start="123:8" pos:end="123:53"><operator pos:start="123:8" pos:end="123:8">!</operator><operator pos:start="123:9" pos:end="123:9">(</operator><name pos:start="123:10" pos:end="123:14">flags</name><operator pos:start="123:15" pos:end="123:15">&amp;</operator><name pos:start="123:16" pos:end="123:32">SWS_FAST_BILINEAR</name><operator pos:start="123:33" pos:end="123:33">)</operator> <operator pos:start="123:35" pos:end="123:36">||</operator> <operator pos:start="123:38" pos:end="123:38">(</operator><operator pos:start="123:39" pos:end="123:39">!</operator><name pos:start="123:40" pos:end="123:52">canMMX2BeUsed</name><operator pos:start="123:53" pos:end="123:53">)</operator></expr>)</condition><block type="pseudo" pos:start="127:5" pos:end="407:4"><block_content pos:start="127:5" pos:end="407:4">

<cpp:else pos:start="125:1" pos:end="125:5">#<cpp:directive pos:start="125:2" pos:end="125:5">else</cpp:directive></cpp:else>

    <if_stmt pos:start="127:5" pos:end="407:4"><if pos:start="127:5" pos:end="137:5">if<condition pos:start="127:7" pos:end="130:0">(<expr pos:start="127:8" pos:end="127:33"><operator pos:start="127:8" pos:end="127:8">!</operator><operator pos:start="127:9" pos:end="127:9">(</operator><name pos:start="127:10" pos:end="127:14">flags</name><operator pos:start="127:15" pos:end="127:15">&amp;</operator><name pos:start="127:16" pos:end="127:32">SWS_FAST_BILINEAR</name><operator pos:start="127:33" pos:end="127:33">)</operator></expr>)</condition>

<cpp:endif pos:start="129:1" pos:end="129:6">#<cpp:directive pos:start="129:2" pos:end="129:6">endif</cpp:directive></cpp:endif>

    <block pos:start="131:5" pos:end="137:5">{<block_content pos:start="133:9" pos:end="135:104">

    	<function_decl pos:start="133:9" pos:end="133:104"><type pos:start="133:9" pos:end="133:14"><name pos:start="133:9" pos:end="133:14">RENAME</name></type>(<name pos:start="133:16" pos:end="133:21">hScale</name>)<parameter_list pos:start="133:23" pos:end="133:103">(<parameter pos:start="133:24" pos:end="133:26"><decl pos:start="133:24" pos:end="133:26"><type pos:start="133:24" pos:end="133:26"><name pos:start="133:24" pos:end="133:26">dst</name></type></decl></parameter>     , <parameter pos:start="133:34" pos:end="133:41"><decl pos:start="133:34" pos:end="133:41"><type pos:start="133:34" pos:end="133:41"><name pos:start="133:34" pos:end="133:41">dstWidth</name></type></decl></parameter>, <parameter pos:start="133:44" pos:end="133:47"><decl pos:start="133:44" pos:end="133:47"><type pos:start="133:44" pos:end="133:47"><name pos:start="133:44" pos:end="133:47">src1</name></type></decl></parameter>, <parameter pos:start="133:50" pos:end="133:53"><decl pos:start="133:50" pos:end="133:53"><type pos:start="133:50" pos:end="133:53"><name pos:start="133:50" pos:end="133:53">srcW</name></type></decl></parameter>, <parameter pos:start="133:56" pos:end="133:59"><decl pos:start="133:56" pos:end="133:59"><type pos:start="133:56" pos:end="133:59"><name pos:start="133:56" pos:end="133:59">xInc</name></type></decl></parameter>, <parameter pos:start="133:62" pos:end="133:71"><decl pos:start="133:62" pos:end="133:71"><type pos:start="133:62" pos:end="133:71"><name pos:start="133:62" pos:end="133:71">hChrFilter</name></type></decl></parameter>, <parameter pos:start="133:74" pos:end="133:86"><decl pos:start="133:74" pos:end="133:86"><type pos:start="133:74" pos:end="133:86"><name pos:start="133:74" pos:end="133:86">hChrFilterPos</name></type></decl></parameter>, <parameter pos:start="133:89" pos:end="133:102"><decl pos:start="133:89" pos:end="133:102"><type pos:start="133:89" pos:end="133:102"><name pos:start="133:89" pos:end="133:102">hChrFilterSize</name></type></decl></parameter>)</parameter_list>;</function_decl>

    	<expr_stmt pos:start="135:9" pos:end="135:104"><expr pos:start="135:9" pos:end="135:103"><call pos:start="135:9" pos:end="135:103"><call pos:start="135:9" pos:end="135:22"><name pos:start="135:9" pos:end="135:14">RENAME</name><argument_list pos:start="135:15" pos:end="135:22">(<argument pos:start="135:16" pos:end="135:21"><expr pos:start="135:16" pos:end="135:21"><name pos:start="135:16" pos:end="135:21">hScale</name></expr></argument>)</argument_list></call><argument_list pos:start="135:23" pos:end="135:103">(<argument pos:start="135:24" pos:end="135:31"><expr pos:start="135:24" pos:end="135:31"><name pos:start="135:24" pos:end="135:26">dst</name><operator pos:start="135:27" pos:end="135:27">+</operator><literal type="number" pos:start="135:28" pos:end="135:31">2048</literal></expr></argument>, <argument pos:start="135:34" pos:end="135:41"><expr pos:start="135:34" pos:end="135:41"><name pos:start="135:34" pos:end="135:41">dstWidth</name></expr></argument>, <argument pos:start="135:44" pos:end="135:47"><expr pos:start="135:44" pos:end="135:47"><name pos:start="135:44" pos:end="135:47">src2</name></expr></argument>, <argument pos:start="135:50" pos:end="135:53"><expr pos:start="135:50" pos:end="135:53"><name pos:start="135:50" pos:end="135:53">srcW</name></expr></argument>, <argument pos:start="135:56" pos:end="135:59"><expr pos:start="135:56" pos:end="135:59"><name pos:start="135:56" pos:end="135:59">xInc</name></expr></argument>, <argument pos:start="135:62" pos:end="135:71"><expr pos:start="135:62" pos:end="135:71"><name pos:start="135:62" pos:end="135:71">hChrFilter</name></expr></argument>, <argument pos:start="135:74" pos:end="135:86"><expr pos:start="135:74" pos:end="135:86"><name pos:start="135:74" pos:end="135:86">hChrFilterPos</name></expr></argument>, <argument pos:start="135:89" pos:end="135:102"><expr pos:start="135:89" pos:end="135:102"><name pos:start="135:89" pos:end="135:102">hChrFilterSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if>

    <else pos:start="139:5" pos:end="407:4">else <comment type="line" pos:start="139:10" pos:end="139:50">// Fast Bilinear upscale / crap downscale</comment>

    <block pos:start="141:5" pos:end="407:4">{<block_content pos:start="147:9" pos:end="406:0">

<cpp:if pos:start="143:1" pos:end="143:45">#<cpp:directive pos:start="143:2" pos:end="143:3">if</cpp:directive> <expr pos:start="143:5" pos:end="143:45"><call pos:start="143:5" pos:end="143:21"><name pos:start="143:5" pos:end="143:11">defined</name><argument_list pos:start="143:12" pos:end="143:21">(<argument pos:start="143:13" pos:end="143:20"><expr pos:start="143:13" pos:end="143:20"><name pos:start="143:13" pos:end="143:20">ARCH_X86</name></expr></argument>)</argument_list></call> <operator pos:start="143:23" pos:end="143:24">||</operator> <call pos:start="143:26" pos:end="143:45"><name pos:start="143:26" pos:end="143:32">defined</name><argument_list pos:start="143:33" pos:end="143:45">(<argument pos:start="143:34" pos:end="143:44"><expr pos:start="143:34" pos:end="143:44"><name pos:start="143:34" pos:end="143:44">ARCH_X86_64</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:ifdef pos:start="145:1" pos:end="145:16">#<cpp:directive pos:start="145:2" pos:end="145:6">ifdef</cpp:directive> <name pos:start="145:8" pos:end="145:16">HAVE_MMX2</name></cpp:ifdef>

	<decl_stmt pos:start="147:9" pos:end="147:14"><decl pos:start="147:9" pos:end="147:13"><type pos:start="147:9" pos:end="147:11"><name pos:start="147:9" pos:end="147:11">int</name></type> <name pos:start="147:13" pos:end="147:13">i</name></decl>;</decl_stmt>

	<if_stmt pos:start="149:9" pos:end="376:0"><if pos:start="149:9" pos:end="271:9">if<condition pos:start="149:11" pos:end="149:25">(<expr pos:start="149:12" pos:end="149:24"><name pos:start="149:12" pos:end="149:24">canMMX2BeUsed</name></expr>)</condition>

	<block pos:start="151:9" pos:end="271:9">{<block_content pos:start="153:17" pos:end="269:17">

		<asm pos:start="153:17" pos:end="257:18">asm <specifier pos:start="153:21" pos:end="153:28">volatile</specifier>(

			"pxor %%mm7, %%mm7		\n\t"

			"mov %0, %%"REG_c"		\n\t"

			"mov %1, %%"REG_D"		\n\t"

			"mov %2, %%"REG_d"		\n\t"

			"mov %3, %%"REG_b"		\n\t"

			"xor %%"REG_a", %%"REG_a"	\n\t" <comment type="line" pos:start="165:63" pos:end="165:66">// i</comment>

			PREFETCH" (%%"REG_c")		\n\t"

			PREFETCH" 32(%%"REG_c")		\n\t"

			PREFETCH" 64(%%"REG_c")		\n\t"



<cpp:ifdef pos:start="175:1" pos:end="175:18">#<cpp:directive pos:start="175:2" pos:end="175:6">ifdef</cpp:directive> <name pos:start="175:8" pos:end="175:18">ARCH_X86_64</name></cpp:ifdef>



<cpp:define pos:start="179:1" pos:end="195:5">#<cpp:directive pos:start="179:2" pos:end="179:7">define</cpp:directive> <cpp:macro pos:start="179:9" pos:end="179:21"><name pos:start="179:9" pos:end="179:21">FUNNY_UV_CODE</name></cpp:macro> \

			<cpp:value pos:start="181:25" pos:end="195:5">"movl (%%"REG_b"), %%esi	\n\t"\

			"call *%4			\n\t"\

			"movl (%%"REG_b", %%"REG_a"), %%esi\n\t"\

			"add %%"REG_S", %%"REG_c"	\n\t"\

			"add %%"REG_a", %%"REG_D"	\n\t"\

			"xor %%"REG_a", %%"REG_a"	\n\t"\



#else</cpp:value></cpp:define>



<cpp:define pos:start="199:1" pos:end="213:6">#<cpp:directive pos:start="199:2" pos:end="199:7">define</cpp:directive> <cpp:macro pos:start="199:9" pos:end="199:21"><name pos:start="199:9" pos:end="199:21">FUNNY_UV_CODE</name></cpp:macro> \

			<cpp:value pos:start="201:25" pos:end="213:6">"movl (%%"REG_b"), %%esi	\n\t"\

			"call *%4			\n\t"\

			"addl (%%"REG_b", %%"REG_a"), %%"REG_c"\n\t"\

			"add %%"REG_a", %%"REG_D"	\n\t"\

			"xor %%"REG_a", %%"REG_a"	\n\t"\



#endif</cpp:value></cpp:define>



FUNNY_UV_CODE

FUNNY_UV_CODE

FUNNY_UV_CODE

FUNNY_UV_CODE

			"xor %%"REG_a", %%"REG_a"	\n\t" <comment type="line" pos:start="225:63" pos:end="225:66">// i</comment>

			"mov %5, %%"REG_c"		\n\t" <comment type="line" pos:start="227:63" pos:end="227:68">// src</comment>

			"mov %1, %%"REG_D"		\n\t" <comment type="line" pos:start="229:63" pos:end="229:69">// buf1</comment>

			"add $4096, %%"REG_D"		\n\t"

			PREFETCH" (%%"REG_c")		\n\t"

			PREFETCH" 32(%%"REG_c")		\n\t"

			PREFETCH" 64(%%"REG_c")		\n\t"



FUNNY_UV_CODE

FUNNY_UV_CODE

FUNNY_UV_CODE

FUNNY_UV_CODE



			:: "m" (src1), "m" (dst), "m" (mmx2Filter), "m" (mmx2FilterPos),

			"m" (funnyUVCode), "m" (src2)

			: "%"REG_a, "%"REG_b, "%"REG_c, "%"REG_d, "%"REG_S, "%"REG_D

		);</asm>

		<for pos:start="259:17" pos:end="269:17">for<control pos:start="259:20" pos:end="259:61">(<init pos:start="259:21" pos:end="259:33"><expr pos:start="259:21" pos:end="259:32"><name pos:start="259:21" pos:end="259:21">i</name><operator pos:start="259:22" pos:end="259:22">=</operator><name pos:start="259:23" pos:end="259:30">dstWidth</name><operator pos:start="259:31" pos:end="259:31">-</operator><literal type="number" pos:start="259:32" pos:end="259:32">1</literal></expr>;</init> <condition pos:start="259:35" pos:end="259:56"><expr pos:start="259:35" pos:end="259:55"><operator pos:start="259:35" pos:end="259:35">(</operator><name pos:start="259:36" pos:end="259:36">i</name><operator pos:start="259:37" pos:end="259:37">*</operator><name pos:start="259:38" pos:end="259:41">xInc</name><operator pos:start="259:42" pos:end="259:42">)</operator><operator pos:start="259:43" pos:end="259:44">&gt;&gt;</operator><literal type="number" pos:start="259:45" pos:end="259:46">16</literal> <operator pos:start="259:48" pos:end="259:49">&gt;=</operator><name pos:start="259:50" pos:end="259:53">srcW</name><operator pos:start="259:54" pos:end="259:54">-</operator><literal type="number" pos:start="259:55" pos:end="259:55">1</literal></expr>;</condition> <incr pos:start="259:58" pos:end="259:60"><expr pos:start="259:58" pos:end="259:60"><name pos:start="259:58" pos:end="259:58">i</name><operator pos:start="259:59" pos:end="259:60">--</operator></expr></incr>)</control>

		<block pos:start="261:17" pos:end="269:17">{<block_content pos:start="265:25" pos:end="267:55">

<comment type="line" pos:start="263:1" pos:end="263:64">//			printf("%d %d %d\n", dstWidth, i, srcW);</comment>

			<expr_stmt pos:start="265:25" pos:end="265:50"><expr pos:start="265:25" pos:end="265:49"><name pos:start="265:25" pos:end="265:30"><name pos:start="265:25" pos:end="265:27">dst</name><index pos:start="265:28" pos:end="265:30">[<expr pos:start="265:29" pos:end="265:29"><name pos:start="265:29" pos:end="265:29">i</name></expr>]</index></name> <operator pos:start="265:32" pos:end="265:32">=</operator> <name pos:start="265:34" pos:end="265:45"><name pos:start="265:34" pos:end="265:37">src1</name><index pos:start="265:38" pos:end="265:45">[<expr pos:start="265:39" pos:end="265:44"><name pos:start="265:39" pos:end="265:42">srcW</name><operator pos:start="265:43" pos:end="265:43">-</operator><literal type="number" pos:start="265:44" pos:end="265:44">1</literal></expr>]</index></name><operator pos:start="265:46" pos:end="265:46">*</operator><literal type="number" pos:start="265:47" pos:end="265:49">128</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="267:25" pos:end="267:55"><expr pos:start="267:25" pos:end="267:54"><name pos:start="267:25" pos:end="267:35"><name pos:start="267:25" pos:end="267:27">dst</name><index pos:start="267:28" pos:end="267:35">[<expr pos:start="267:29" pos:end="267:34"><name pos:start="267:29" pos:end="267:29">i</name><operator pos:start="267:30" pos:end="267:30">+</operator><literal type="number" pos:start="267:31" pos:end="267:34">2048</literal></expr>]</index></name> <operator pos:start="267:37" pos:end="267:37">=</operator> <name pos:start="267:39" pos:end="267:50"><name pos:start="267:39" pos:end="267:42">src2</name><index pos:start="267:43" pos:end="267:50">[<expr pos:start="267:44" pos:end="267:49"><name pos:start="267:44" pos:end="267:47">srcW</name><operator pos:start="267:48" pos:end="267:48">-</operator><literal type="number" pos:start="267:49" pos:end="267:49">1</literal></expr>]</index></name><operator pos:start="267:51" pos:end="267:51">*</operator><literal type="number" pos:start="267:52" pos:end="267:54">128</literal></expr>;</expr_stmt>

		</block_content>}</block></for>

	</block_content>}</block></if>

	<else pos:start="273:9" pos:end="376:0">else

	<block pos:start="275:9" pos:end="376:0">{<block_content pos:start="279:9" pos:end="370:0">

<cpp:endif pos:start="277:1" pos:end="277:6">#<cpp:directive pos:start="277:2" pos:end="277:6">endif</cpp:directive></cpp:endif>

	<decl_stmt pos:start="279:9" pos:end="279:46"><decl pos:start="279:9" pos:end="279:45"><type pos:start="279:9" pos:end="279:12"><name pos:start="279:9" pos:end="279:12">long</name></type> <name pos:start="279:14" pos:end="279:23">xInc_shr16</name> <init pos:start="279:25" pos:end="279:45">= <expr pos:start="279:27" pos:end="279:45"><operator pos:start="279:27" pos:end="279:27">(</operator><name pos:start="279:28" pos:end="279:31">long</name><operator pos:start="279:32" pos:end="279:32">)</operator> <operator pos:start="279:34" pos:end="279:34">(</operator><name pos:start="279:35" pos:end="279:38">xInc</name> <operator pos:start="279:40" pos:end="279:41">&gt;&gt;</operator> <literal type="number" pos:start="279:43" pos:end="279:44">16</literal><operator pos:start="279:45" pos:end="279:45">)</operator></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="281:9" pos:end="281:38"><decl pos:start="281:9" pos:end="281:37"><type pos:start="281:9" pos:end="281:11"><name pos:start="281:9" pos:end="281:11">int</name></type> <name pos:start="281:13" pos:end="281:21">xInc_mask</name> <init pos:start="281:23" pos:end="281:37">= <expr pos:start="281:25" pos:end="281:37"><name pos:start="281:25" pos:end="281:28">xInc</name> <operator pos:start="281:30" pos:end="281:30">&amp;</operator> <literal type="number" pos:start="281:32" pos:end="281:37">0xffff</literal></expr></init></decl>;</decl_stmt> 

	<asm pos:start="283:9" pos:end="370:0">asm <specifier pos:start="283:13" pos:end="283:20">volatile</specifier>(

		"xor %%"REG_a", %%"REG_a"	\n\t" <comment type="line" pos:start="285:55" pos:end="285:58">// i</comment>

		"xor %%"REG_b", %%"REG_b"		\n\t" <comment type="line" pos:start="287:63" pos:end="287:67">// xx</comment>

		"xorl %%ecx, %%ecx		\n\t" <comment type="line" pos:start="289:55" pos:end="289:65">// 2*xalpha</comment>

		ASMALIGN16

		"1:				\n\t"

		"mov %0, %%"REG_S"		\n\t"

		"movzbl  (%%"REG_S", %%"REG_b"), %%edi	\n\t" <comment type="line" pos:start="297:63" pos:end="297:71">//src[xx]</comment>

		"movzbl 1(%%"REG_S", %%"REG_b"), %%esi	\n\t" <comment type="line" pos:start="299:63" pos:end="299:73">//src[xx+1]</comment>

		"subl %%edi, %%esi		\n\t" <comment type="line" pos:start="301:55" pos:end="301:75">//src[xx+1] - src[xx]</comment>

		"imull %%ecx, %%esi		\n\t" <comment type="line" pos:start="303:55" pos:end="303:86">//(src[xx+1] - src[xx])*2*xalpha</comment>

		"shll $16, %%edi		\n\t"

		"addl %%edi, %%esi		\n\t" <comment type="line" pos:start="307:55" pos:end="307:97">//src[xx+1]*2*xalpha + src[xx]*(1-2*xalpha)</comment>

		"mov %1, %%"REG_D"		\n\t"

		"shrl $9, %%esi			\n\t"

		"movw %%si, (%%"REG_D", %%"REG_a", 2)\n\t"



		"movzbl  (%5, %%"REG_b"), %%edi	\n\t" <comment type="line" pos:start="317:55" pos:end="317:63">//src[xx]</comment>

		"movzbl 1(%5, %%"REG_b"), %%esi	\n\t" <comment type="line" pos:start="319:55" pos:end="319:65">//src[xx+1]</comment>

		"subl %%edi, %%esi		\n\t" <comment type="line" pos:start="321:55" pos:end="321:75">//src[xx+1] - src[xx]</comment>

		"imull %%ecx, %%esi		\n\t" <comment type="line" pos:start="323:55" pos:end="323:86">//(src[xx+1] - src[xx])*2*xalpha</comment>

		"shll $16, %%edi		\n\t"

		"addl %%edi, %%esi		\n\t" <comment type="line" pos:start="327:55" pos:end="327:97">//src[xx+1]*2*xalpha + src[xx]*(1-2*xalpha)</comment>

		"mov %1, %%"REG_D"		\n\t"

		"shrl $9, %%esi			\n\t"

		"movw %%si, 4096(%%"REG_D", %%"REG_a", 2)\n\t"



		"addw %4, %%cx			\n\t" <comment type="line" pos:start="337:55" pos:end="337:77">//2*xalpha += xInc&amp;0xFF</comment>

		"adc %3, %%"REG_b"		\n\t" <comment type="line" pos:start="339:55" pos:end="339:76">//xx+= xInc&gt;&gt;8 + carry</comment>

		"add $1, %%"REG_a"		\n\t"

		"cmp %2, %%"REG_a"		\n\t"

		" jb 1b				\n\t"



<comment type="block" pos:start="349:1" pos:end="351:40">/* GCC-3.3 makes MPlayer crash on IA-32 machines when using "g" operand here,

   which is needed to support GCC-4.0 */</comment>

<cpp:if pos:start="353:1" pos:end="353:87">#<cpp:directive pos:start="353:2" pos:end="353:3">if</cpp:directive> <expr pos:start="353:5" pos:end="353:87"><call pos:start="353:5" pos:end="353:24"><name pos:start="353:5" pos:end="353:11">defined</name><argument_list pos:start="353:12" pos:end="353:24">(<argument pos:start="353:13" pos:end="353:23"><expr pos:start="353:13" pos:end="353:23"><name pos:start="353:13" pos:end="353:23">ARCH_X86_64</name></expr></argument>)</argument_list></call> <operator pos:start="353:26" pos:end="353:27">&amp;&amp;</operator> <operator pos:start="353:29" pos:end="353:29">(</operator><operator pos:start="353:30" pos:end="353:30">(</operator><name pos:start="353:31" pos:end="353:38">__GNUC__</name> <operator pos:start="353:40" pos:end="353:40">&gt;</operator> <literal type="number" pos:start="353:42" pos:end="353:42">3</literal><operator pos:start="353:43" pos:end="353:43">)</operator> <operator pos:start="353:45" pos:end="353:46">||</operator> <operator pos:start="353:48" pos:end="353:48">(</operator> <name pos:start="353:50" pos:end="353:57">__GNUC__</name> <operator pos:start="353:59" pos:end="353:60">==</operator> <literal type="number" pos:start="353:62" pos:end="353:62">3</literal> <operator pos:start="353:64" pos:end="353:65">&amp;&amp;</operator> <name pos:start="353:67" pos:end="353:80">__GNUC_MINOR__</name> <operator pos:start="353:82" pos:end="353:83">&gt;=</operator> <literal type="number" pos:start="353:85" pos:end="353:85">4</literal><operator pos:start="353:86" pos:end="353:86">)</operator><operator pos:start="353:87" pos:end="353:87">)</operator></expr></cpp:if>

		:: "m" (src1), "m" (dst), "g" ((long)dstWidth), "m" (xInc_shr16), "m" (xInc_mask),

<cpp:else pos:start="357:1" pos:end="357:5">#<cpp:directive pos:start="357:2" pos:end="357:5">else</cpp:directive></cpp:else>

		:: "m" (src1), "m" (dst), "m" ((long)dstWidth), "m" (xInc_shr16), "m" (xInc_mask),

<cpp:endif pos:start="361:1" pos:end="361:6">#<cpp:directive pos:start="361:2" pos:end="361:6">endif</cpp:directive></cpp:endif>

		"r" (src2)

		: "%"REG_a, "%"REG_b, "%ecx", "%"REG_D, "%esi"

		);</asm>

<cpp:ifdef pos:start="369:1" pos:end="369:16">#<cpp:directive pos:start="369:2" pos:end="369:6">ifdef</cpp:directive> <name pos:start="369:8" pos:end="369:16">HAVE_MMX2</name></cpp:ifdef>

	</block_content>}</block></else></if_stmt> <comment type="line" pos:start="371:11" pos:end="371:33">//if MMX2 can't be used</comment>

<cpp:endif pos:start="373:1" pos:end="373:6">#<cpp:directive pos:start="373:2" pos:end="373:6">endif</cpp:directive></cpp:endif>

<cpp:else pos:start="375:1" pos:end="375:5">#<cpp:directive pos:start="375:2" pos:end="375:5">else</cpp:directive></cpp:else>

	<decl_stmt pos:start="377:9" pos:end="377:14"><decl pos:start="377:9" pos:end="377:13"><type pos:start="377:9" pos:end="377:11"><name pos:start="377:9" pos:end="377:11">int</name></type> <name pos:start="377:13" pos:end="377:13">i</name></decl>;</decl_stmt>

	<decl_stmt pos:start="379:9" pos:end="379:28"><decl pos:start="379:9" pos:end="379:27"><type pos:start="379:9" pos:end="379:20"><name pos:start="379:9" pos:end="379:16">unsigned</name> <name pos:start="379:18" pos:end="379:20">int</name></type> <name pos:start="379:22" pos:end="379:25">xpos</name><init pos:start="379:26" pos:end="379:27">=<expr pos:start="379:27" pos:end="379:27"><literal type="number" pos:start="379:27" pos:end="379:27">0</literal></expr></init></decl>;</decl_stmt>

	<for pos:start="381:9" pos:end="406:0">for<control pos:start="381:12" pos:end="381:31">(<init pos:start="381:13" pos:end="381:16"><expr pos:start="381:13" pos:end="381:15"><name pos:start="381:13" pos:end="381:13">i</name><operator pos:start="381:14" pos:end="381:14">=</operator><literal type="number" pos:start="381:15" pos:end="381:15">0</literal></expr>;</init><condition pos:start="381:17" pos:end="381:27"><expr pos:start="381:17" pos:end="381:26"><name pos:start="381:17" pos:end="381:17">i</name><operator pos:start="381:18" pos:end="381:18">&lt;</operator><name pos:start="381:19" pos:end="381:26">dstWidth</name></expr>;</condition><incr pos:start="381:28" pos:end="381:30"><expr pos:start="381:28" pos:end="381:30"><name pos:start="381:28" pos:end="381:28">i</name><operator pos:start="381:29" pos:end="381:30">++</operator></expr></incr>)</control>

	<block pos:start="383:9" pos:end="406:0">{<block_content pos:start="385:17" pos:end="401:27">

		<decl_stmt pos:start="385:17" pos:end="385:50"><decl pos:start="385:17" pos:end="385:49"><type pos:start="385:17" pos:end="385:37"><specifier pos:start="385:17" pos:end="385:24">register</specifier> <name pos:start="385:26" pos:end="385:33">unsigned</name> <name pos:start="385:35" pos:end="385:37">int</name></type> <name pos:start="385:39" pos:end="385:40">xx</name><init pos:start="385:41" pos:end="385:49">=<expr pos:start="385:42" pos:end="385:49"><name pos:start="385:42" pos:end="385:45">xpos</name><operator pos:start="385:46" pos:end="385:47">&gt;&gt;</operator><literal type="number" pos:start="385:48" pos:end="385:49">16</literal></expr></init></decl>;</decl_stmt>

		<decl_stmt pos:start="387:17" pos:end="387:62"><decl pos:start="387:17" pos:end="387:61"><type pos:start="387:17" pos:end="387:37"><specifier pos:start="387:17" pos:end="387:24">register</specifier> <name pos:start="387:26" pos:end="387:33">unsigned</name> <name pos:start="387:35" pos:end="387:37">int</name></type> <name pos:start="387:39" pos:end="387:44">xalpha</name><init pos:start="387:45" pos:end="387:61">=<expr pos:start="387:46" pos:end="387:61"><operator pos:start="387:46" pos:end="387:46">(</operator><name pos:start="387:47" pos:end="387:50">xpos</name><operator pos:start="387:51" pos:end="387:51">&amp;</operator><literal type="number" pos:start="387:52" pos:end="387:57">0xFFFF</literal><operator pos:start="387:58" pos:end="387:58">)</operator><operator pos:start="387:59" pos:end="387:60">&gt;&gt;</operator><literal type="number" pos:start="387:61" pos:end="387:61">9</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt pos:start="389:17" pos:end="389:65"><expr pos:start="389:17" pos:end="389:64"><name pos:start="389:17" pos:end="389:22"><name pos:start="389:17" pos:end="389:19">dst</name><index pos:start="389:20" pos:end="389:22">[<expr pos:start="389:21" pos:end="389:21"><name pos:start="389:21" pos:end="389:21">i</name></expr>]</index></name><operator pos:start="389:23" pos:end="389:23">=</operator><operator pos:start="389:24" pos:end="389:24">(</operator><name pos:start="389:25" pos:end="389:32"><name pos:start="389:25" pos:end="389:28">src1</name><index pos:start="389:29" pos:end="389:32">[<expr pos:start="389:30" pos:end="389:31"><name pos:start="389:30" pos:end="389:31">xx</name></expr>]</index></name><operator pos:start="389:33" pos:end="389:33">*</operator><operator pos:start="389:34" pos:end="389:34">(</operator><name pos:start="389:35" pos:end="389:40">xalpha</name><operator pos:start="389:41" pos:end="389:41">^</operator><literal type="number" pos:start="389:42" pos:end="389:44">127</literal><operator pos:start="389:45" pos:end="389:45">)</operator><operator pos:start="389:46" pos:end="389:46">+</operator><name pos:start="389:47" pos:end="389:56"><name pos:start="389:47" pos:end="389:50">src1</name><index pos:start="389:51" pos:end="389:56">[<expr pos:start="389:52" pos:end="389:55"><name pos:start="389:52" pos:end="389:53">xx</name><operator pos:start="389:54" pos:end="389:54">+</operator><literal type="number" pos:start="389:55" pos:end="389:55">1</literal></expr>]</index></name><operator pos:start="389:57" pos:end="389:57">*</operator><name pos:start="389:58" pos:end="389:63">xalpha</name><operator pos:start="389:64" pos:end="389:64">)</operator></expr>;</expr_stmt>

		<expr_stmt pos:start="391:17" pos:end="391:70"><expr pos:start="391:17" pos:end="391:69"><name pos:start="391:17" pos:end="391:27"><name pos:start="391:17" pos:end="391:19">dst</name><index pos:start="391:20" pos:end="391:27">[<expr pos:start="391:21" pos:end="391:26"><name pos:start="391:21" pos:end="391:21">i</name><operator pos:start="391:22" pos:end="391:22">+</operator><literal type="number" pos:start="391:23" pos:end="391:26">2048</literal></expr>]</index></name><operator pos:start="391:28" pos:end="391:28">=</operator><operator pos:start="391:29" pos:end="391:29">(</operator><name pos:start="391:30" pos:end="391:37"><name pos:start="391:30" pos:end="391:33">src2</name><index pos:start="391:34" pos:end="391:37">[<expr pos:start="391:35" pos:end="391:36"><name pos:start="391:35" pos:end="391:36">xx</name></expr>]</index></name><operator pos:start="391:38" pos:end="391:38">*</operator><operator pos:start="391:39" pos:end="391:39">(</operator><name pos:start="391:40" pos:end="391:45">xalpha</name><operator pos:start="391:46" pos:end="391:46">^</operator><literal type="number" pos:start="391:47" pos:end="391:49">127</literal><operator pos:start="391:50" pos:end="391:50">)</operator><operator pos:start="391:51" pos:end="391:51">+</operator><name pos:start="391:52" pos:end="391:61"><name pos:start="391:52" pos:end="391:55">src2</name><index pos:start="391:56" pos:end="391:61">[<expr pos:start="391:57" pos:end="391:60"><name pos:start="391:57" pos:end="391:58">xx</name><operator pos:start="391:59" pos:end="391:59">+</operator><literal type="number" pos:start="391:60" pos:end="391:60">1</literal></expr>]</index></name><operator pos:start="391:62" pos:end="391:62">*</operator><name pos:start="391:63" pos:end="391:68">xalpha</name><operator pos:start="391:69" pos:end="391:69">)</operator></expr>;</expr_stmt>

<comment type="block" pos:start="393:1" pos:end="399:2">/* slower

	  dst[i]= (src1[xx]&lt;&lt;7) + (src1[xx+1] - src1[xx])*xalpha;

	  dst[i+2048]=(src2[xx]&lt;&lt;7) + (src2[xx+1] - src2[xx])*xalpha;

*/</comment>

		<expr_stmt pos:start="401:17" pos:end="401:27"><expr pos:start="401:17" pos:end="401:26"><name pos:start="401:17" pos:end="401:20">xpos</name><operator pos:start="401:21" pos:end="401:22">+=</operator><name pos:start="401:23" pos:end="401:26">xInc</name></expr>;</expr_stmt>

	</block_content>}</block></for>

<cpp:endif pos:start="405:1" pos:end="405:6">#<cpp:directive pos:start="405:2" pos:end="405:6">endif</cpp:directive></cpp:endif>

   </block_content>}</block></else></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>
</unit>
