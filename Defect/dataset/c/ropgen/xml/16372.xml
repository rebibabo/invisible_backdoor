<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16372.c" pos:tabs="8"><function pos:start="1:1" pos:end="91:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">test_ivshmem_pair</name><parameter_list pos:start="1:30" pos:end="1:35">(<parameter pos:start="1:31" pos:end="1:34"><decl pos:start="1:31" pos:end="1:34"><type pos:start="1:31" pos:end="1:34"><name pos:start="1:31" pos:end="1:34">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="91:1">{<block_content pos:start="5:5" pos:end="89:17">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">IVState</name></type> <name pos:start="5:13" pos:end="5:18">state1</name></decl>, <decl pos:start="5:21" pos:end="5:26"><type ref="prev" pos:start="5:5" pos:end="5:11"/><name pos:start="5:21" pos:end="5:26">state2</name></decl>, <decl pos:start="5:29" pos:end="5:31"><type ref="prev" pos:start="5:5" pos:end="5:11"><modifier pos:start="5:29" pos:end="5:29">*</modifier></type><name pos:start="5:30" pos:end="5:31">s1</name></decl>, <decl pos:start="5:34" pos:end="5:36"><type ref="prev" pos:start="5:5" pos:end="5:11"><modifier pos:start="5:34" pos:end="5:34">*</modifier></type><name pos:start="5:35" pos:end="5:36">s2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:14">data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:22"><expr pos:start="13:5" pos:end="13:21"><call pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:12">setup_vm</name><argument_list pos:start="13:13" pos:end="13:21">(<argument pos:start="13:14" pos:end="13:20"><expr pos:start="13:14" pos:end="13:20"><operator pos:start="13:14" pos:end="13:14">&amp;</operator><name pos:start="13:15" pos:end="13:20">state1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:17"><expr pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:6">s1</name> <operator pos:start="15:8" pos:end="15:8">=</operator> <operator pos:start="15:10" pos:end="15:10">&amp;</operator><name pos:start="15:11" pos:end="15:16">state1</name></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:22"><expr pos:start="17:5" pos:end="17:21"><call pos:start="17:5" pos:end="17:21"><name pos:start="17:5" pos:end="17:12">setup_vm</name><argument_list pos:start="17:13" pos:end="17:21">(<argument pos:start="17:14" pos:end="17:20"><expr pos:start="17:14" pos:end="17:20"><operator pos:start="17:14" pos:end="17:14">&amp;</operator><name pos:start="17:15" pos:end="17:20">state2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:17"><expr pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:6">s2</name> <operator pos:start="19:8" pos:end="19:8">=</operator> <operator pos:start="19:10" pos:end="19:10">&amp;</operator><name pos:start="19:11" pos:end="19:16">state2</name></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:33"><expr pos:start="23:5" pos:end="23:32"><name pos:start="23:5" pos:end="23:8">data</name> <operator pos:start="23:10" pos:end="23:10">=</operator> <call pos:start="23:12" pos:end="23:32"><name pos:start="23:12" pos:end="23:20">g_malloc0</name><argument_list pos:start="23:21" pos:end="23:32">(<argument pos:start="23:22" pos:end="23:31"><expr pos:start="23:22" pos:end="23:31"><name pos:start="23:22" pos:end="23:31">TMPSHMSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:38">/* host write, guest 1 &amp; 2 read */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:39"><expr pos:start="29:5" pos:end="29:38"><call pos:start="29:5" pos:end="29:38"><name pos:start="29:5" pos:end="29:10">memset</name><argument_list pos:start="29:11" pos:end="29:38">(<argument pos:start="29:12" pos:end="29:19"><expr pos:start="29:12" pos:end="29:19"><name pos:start="29:12" pos:end="29:19">tmpshmem</name></expr></argument>, <argument pos:start="29:22" pos:end="29:25"><expr pos:start="29:22" pos:end="29:25"><literal type="number" pos:start="29:22" pos:end="29:25">0x42</literal></expr></argument>, <argument pos:start="29:28" pos:end="29:37"><expr pos:start="29:28" pos:end="29:37"><name pos:start="29:28" pos:end="29:37">TMPSHMSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:72"><expr pos:start="31:5" pos:end="31:71"><call pos:start="31:5" pos:end="31:71"><name pos:start="31:5" pos:end="31:17">qtest_memread</name><argument_list pos:start="31:18" pos:end="31:71">(<argument pos:start="31:19" pos:end="31:27"><expr pos:start="31:19" pos:end="31:27"><name pos:start="31:19" pos:end="31:27"><name pos:start="31:19" pos:end="31:20">s1</name><operator pos:start="31:21" pos:end="31:22">-&gt;</operator><name pos:start="31:23" pos:end="31:27">qtest</name></name></expr></argument>, <argument pos:start="31:30" pos:end="31:52"><expr pos:start="31:30" pos:end="31:52"><operator pos:start="31:30" pos:end="31:30">(</operator><name pos:start="31:31" pos:end="31:39">uintptr_t</name><operator pos:start="31:40" pos:end="31:40">)</operator><name pos:start="31:41" pos:end="31:52"><name pos:start="31:41" pos:end="31:42">s1</name><operator pos:start="31:43" pos:end="31:44">-&gt;</operator><name pos:start="31:45" pos:end="31:52">mem_base</name></name></expr></argument>, <argument pos:start="31:55" pos:end="31:58"><expr pos:start="31:55" pos:end="31:58"><name pos:start="31:55" pos:end="31:58">data</name></expr></argument>, <argument pos:start="31:61" pos:end="31:70"><expr pos:start="31:61" pos:end="31:70"><name pos:start="31:61" pos:end="31:70">TMPSHMSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="33:5" pos:end="37:5">for <control pos:start="33:9" pos:end="33:36">(<init pos:start="33:10" pos:end="33:15"><expr pos:start="33:10" pos:end="33:14"><name pos:start="33:10" pos:end="33:10">i</name> <operator pos:start="33:12" pos:end="33:12">=</operator> <literal type="number" pos:start="33:14" pos:end="33:14">0</literal></expr>;</init> <condition pos:start="33:17" pos:end="33:31"><expr pos:start="33:17" pos:end="33:30"><name pos:start="33:17" pos:end="33:17">i</name> <operator pos:start="33:19" pos:end="33:19">&lt;</operator> <name pos:start="33:21" pos:end="33:30">TMPSHMSIZE</name></expr>;</condition> <incr pos:start="33:33" pos:end="33:35"><expr pos:start="33:33" pos:end="33:35"><name pos:start="33:33" pos:end="33:33">i</name><operator pos:start="33:34" pos:end="33:35">++</operator></expr></incr>)</control> <block pos:start="33:38" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:44">

        <expr_stmt pos:start="35:9" pos:end="35:44"><expr pos:start="35:9" pos:end="35:43"><call pos:start="35:9" pos:end="35:43"><name pos:start="35:9" pos:end="35:24">g_assert_cmpuint</name><argument_list pos:start="35:25" pos:end="35:43">(<argument pos:start="35:26" pos:end="35:32"><expr pos:start="35:26" pos:end="35:32"><name pos:start="35:26" pos:end="35:32"><name pos:start="35:26" pos:end="35:29">data</name><index pos:start="35:30" pos:end="35:32">[<expr pos:start="35:31" pos:end="35:31"><name pos:start="35:31" pos:end="35:31">i</name></expr>]</index></name></expr></argument>, <argument pos:start="35:35" pos:end="35:36"><expr pos:start="35:35" pos:end="35:36"><operator pos:start="35:35" pos:end="35:36">==</operator></expr></argument>, <argument pos:start="35:39" pos:end="35:42"><expr pos:start="35:39" pos:end="35:42"><literal type="number" pos:start="35:39" pos:end="35:42">0x42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="39:5" pos:end="39:72"><expr pos:start="39:5" pos:end="39:71"><call pos:start="39:5" pos:end="39:71"><name pos:start="39:5" pos:end="39:17">qtest_memread</name><argument_list pos:start="39:18" pos:end="39:71">(<argument pos:start="39:19" pos:end="39:27"><expr pos:start="39:19" pos:end="39:27"><name pos:start="39:19" pos:end="39:27"><name pos:start="39:19" pos:end="39:20">s2</name><operator pos:start="39:21" pos:end="39:22">-&gt;</operator><name pos:start="39:23" pos:end="39:27">qtest</name></name></expr></argument>, <argument pos:start="39:30" pos:end="39:52"><expr pos:start="39:30" pos:end="39:52"><operator pos:start="39:30" pos:end="39:30">(</operator><name pos:start="39:31" pos:end="39:39">uintptr_t</name><operator pos:start="39:40" pos:end="39:40">)</operator><name pos:start="39:41" pos:end="39:52"><name pos:start="39:41" pos:end="39:42">s2</name><operator pos:start="39:43" pos:end="39:44">-&gt;</operator><name pos:start="39:45" pos:end="39:52">mem_base</name></name></expr></argument>, <argument pos:start="39:55" pos:end="39:58"><expr pos:start="39:55" pos:end="39:58"><name pos:start="39:55" pos:end="39:58">data</name></expr></argument>, <argument pos:start="39:61" pos:end="39:70"><expr pos:start="39:61" pos:end="39:70"><name pos:start="39:61" pos:end="39:70">TMPSHMSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="41:5" pos:end="45:5">for <control pos:start="41:9" pos:end="41:36">(<init pos:start="41:10" pos:end="41:15"><expr pos:start="41:10" pos:end="41:14"><name pos:start="41:10" pos:end="41:10">i</name> <operator pos:start="41:12" pos:end="41:12">=</operator> <literal type="number" pos:start="41:14" pos:end="41:14">0</literal></expr>;</init> <condition pos:start="41:17" pos:end="41:31"><expr pos:start="41:17" pos:end="41:30"><name pos:start="41:17" pos:end="41:17">i</name> <operator pos:start="41:19" pos:end="41:19">&lt;</operator> <name pos:start="41:21" pos:end="41:30">TMPSHMSIZE</name></expr>;</condition> <incr pos:start="41:33" pos:end="41:35"><expr pos:start="41:33" pos:end="41:35"><name pos:start="41:33" pos:end="41:33">i</name><operator pos:start="41:34" pos:end="41:35">++</operator></expr></incr>)</control> <block pos:start="41:38" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:44">

        <expr_stmt pos:start="43:9" pos:end="43:44"><expr pos:start="43:9" pos:end="43:43"><call pos:start="43:9" pos:end="43:43"><name pos:start="43:9" pos:end="43:24">g_assert_cmpuint</name><argument_list pos:start="43:25" pos:end="43:43">(<argument pos:start="43:26" pos:end="43:32"><expr pos:start="43:26" pos:end="43:32"><name pos:start="43:26" pos:end="43:32"><name pos:start="43:26" pos:end="43:29">data</name><index pos:start="43:30" pos:end="43:32">[<expr pos:start="43:31" pos:end="43:31"><name pos:start="43:31" pos:end="43:31">i</name></expr>]</index></name></expr></argument>, <argument pos:start="43:35" pos:end="43:36"><expr pos:start="43:35" pos:end="43:36"><operator pos:start="43:35" pos:end="43:36">==</operator></expr></argument>, <argument pos:start="43:39" pos:end="43:42"><expr pos:start="43:39" pos:end="43:42"><literal type="number" pos:start="43:39" pos:end="43:42">0x42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="49:5" pos:end="49:37">/* guest 1 write, guest 2 read */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:35"><expr pos:start="51:5" pos:end="51:34"><call pos:start="51:5" pos:end="51:34"><name pos:start="51:5" pos:end="51:10">memset</name><argument_list pos:start="51:11" pos:end="51:34">(<argument pos:start="51:12" pos:end="51:15"><expr pos:start="51:12" pos:end="51:15"><name pos:start="51:12" pos:end="51:15">data</name></expr></argument>, <argument pos:start="51:18" pos:end="51:21"><expr pos:start="51:18" pos:end="51:21"><literal type="number" pos:start="51:18" pos:end="51:21">0x43</literal></expr></argument>, <argument pos:start="51:24" pos:end="51:33"><expr pos:start="51:24" pos:end="51:33"><name pos:start="51:24" pos:end="51:33">TMPSHMSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:73"><expr pos:start="53:5" pos:end="53:72"><call pos:start="53:5" pos:end="53:72"><name pos:start="53:5" pos:end="53:18">qtest_memwrite</name><argument_list pos:start="53:19" pos:end="53:72">(<argument pos:start="53:20" pos:end="53:28"><expr pos:start="53:20" pos:end="53:28"><name pos:start="53:20" pos:end="53:28"><name pos:start="53:20" pos:end="53:21">s1</name><operator pos:start="53:22" pos:end="53:23">-&gt;</operator><name pos:start="53:24" pos:end="53:28">qtest</name></name></expr></argument>, <argument pos:start="53:31" pos:end="53:53"><expr pos:start="53:31" pos:end="53:53"><operator pos:start="53:31" pos:end="53:31">(</operator><name pos:start="53:32" pos:end="53:40">uintptr_t</name><operator pos:start="53:41" pos:end="53:41">)</operator><name pos:start="53:42" pos:end="53:53"><name pos:start="53:42" pos:end="53:43">s1</name><operator pos:start="53:44" pos:end="53:45">-&gt;</operator><name pos:start="53:46" pos:end="53:53">mem_base</name></name></expr></argument>, <argument pos:start="53:56" pos:end="53:59"><expr pos:start="53:56" pos:end="53:59"><name pos:start="53:56" pos:end="53:59">data</name></expr></argument>, <argument pos:start="53:62" pos:end="53:71"><expr pos:start="53:62" pos:end="53:71"><name pos:start="53:62" pos:end="53:71">TMPSHMSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:32"><expr pos:start="55:5" pos:end="55:31"><call pos:start="55:5" pos:end="55:31"><name pos:start="55:5" pos:end="55:10">memset</name><argument_list pos:start="55:11" pos:end="55:31">(<argument pos:start="55:12" pos:end="55:15"><expr pos:start="55:12" pos:end="55:15"><name pos:start="55:12" pos:end="55:15">data</name></expr></argument>, <argument pos:start="55:18" pos:end="55:18"><expr pos:start="55:18" pos:end="55:18"><literal type="number" pos:start="55:18" pos:end="55:18">0</literal></expr></argument>, <argument pos:start="55:21" pos:end="55:30"><expr pos:start="55:21" pos:end="55:30"><name pos:start="55:21" pos:end="55:30">TMPSHMSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:72"><expr pos:start="57:5" pos:end="57:71"><call pos:start="57:5" pos:end="57:71"><name pos:start="57:5" pos:end="57:17">qtest_memread</name><argument_list pos:start="57:18" pos:end="57:71">(<argument pos:start="57:19" pos:end="57:27"><expr pos:start="57:19" pos:end="57:27"><name pos:start="57:19" pos:end="57:27"><name pos:start="57:19" pos:end="57:20">s2</name><operator pos:start="57:21" pos:end="57:22">-&gt;</operator><name pos:start="57:23" pos:end="57:27">qtest</name></name></expr></argument>, <argument pos:start="57:30" pos:end="57:52"><expr pos:start="57:30" pos:end="57:52"><operator pos:start="57:30" pos:end="57:30">(</operator><name pos:start="57:31" pos:end="57:39">uintptr_t</name><operator pos:start="57:40" pos:end="57:40">)</operator><name pos:start="57:41" pos:end="57:52"><name pos:start="57:41" pos:end="57:42">s2</name><operator pos:start="57:43" pos:end="57:44">-&gt;</operator><name pos:start="57:45" pos:end="57:52">mem_base</name></name></expr></argument>, <argument pos:start="57:55" pos:end="57:58"><expr pos:start="57:55" pos:end="57:58"><name pos:start="57:55" pos:end="57:58">data</name></expr></argument>, <argument pos:start="57:61" pos:end="57:70"><expr pos:start="57:61" pos:end="57:70"><name pos:start="57:61" pos:end="57:70">TMPSHMSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="59:5" pos:end="63:5">for <control pos:start="59:9" pos:end="59:36">(<init pos:start="59:10" pos:end="59:15"><expr pos:start="59:10" pos:end="59:14"><name pos:start="59:10" pos:end="59:10">i</name> <operator pos:start="59:12" pos:end="59:12">=</operator> <literal type="number" pos:start="59:14" pos:end="59:14">0</literal></expr>;</init> <condition pos:start="59:17" pos:end="59:31"><expr pos:start="59:17" pos:end="59:30"><name pos:start="59:17" pos:end="59:17">i</name> <operator pos:start="59:19" pos:end="59:19">&lt;</operator> <name pos:start="59:21" pos:end="59:30">TMPSHMSIZE</name></expr>;</condition> <incr pos:start="59:33" pos:end="59:35"><expr pos:start="59:33" pos:end="59:35"><name pos:start="59:33" pos:end="59:33">i</name><operator pos:start="59:34" pos:end="59:35">++</operator></expr></incr>)</control> <block pos:start="59:38" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:44">

        <expr_stmt pos:start="61:9" pos:end="61:44"><expr pos:start="61:9" pos:end="61:43"><call pos:start="61:9" pos:end="61:43"><name pos:start="61:9" pos:end="61:24">g_assert_cmpuint</name><argument_list pos:start="61:25" pos:end="61:43">(<argument pos:start="61:26" pos:end="61:32"><expr pos:start="61:26" pos:end="61:32"><name pos:start="61:26" pos:end="61:32"><name pos:start="61:26" pos:end="61:29">data</name><index pos:start="61:30" pos:end="61:32">[<expr pos:start="61:31" pos:end="61:31"><name pos:start="61:31" pos:end="61:31">i</name></expr>]</index></name></expr></argument>, <argument pos:start="61:35" pos:end="61:36"><expr pos:start="61:35" pos:end="61:36"><operator pos:start="61:35" pos:end="61:36">==</operator></expr></argument>, <argument pos:start="61:39" pos:end="61:42"><expr pos:start="61:39" pos:end="61:42"><literal type="number" pos:start="61:39" pos:end="61:42">0x43</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="67:5" pos:end="67:37">/* guest 2 write, guest 1 read */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:35"><expr pos:start="69:5" pos:end="69:34"><call pos:start="69:5" pos:end="69:34"><name pos:start="69:5" pos:end="69:10">memset</name><argument_list pos:start="69:11" pos:end="69:34">(<argument pos:start="69:12" pos:end="69:15"><expr pos:start="69:12" pos:end="69:15"><name pos:start="69:12" pos:end="69:15">data</name></expr></argument>, <argument pos:start="69:18" pos:end="69:21"><expr pos:start="69:18" pos:end="69:21"><literal type="number" pos:start="69:18" pos:end="69:21">0x44</literal></expr></argument>, <argument pos:start="69:24" pos:end="69:33"><expr pos:start="69:24" pos:end="69:33"><name pos:start="69:24" pos:end="69:33">TMPSHMSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:73"><expr pos:start="71:5" pos:end="71:72"><call pos:start="71:5" pos:end="71:72"><name pos:start="71:5" pos:end="71:18">qtest_memwrite</name><argument_list pos:start="71:19" pos:end="71:72">(<argument pos:start="71:20" pos:end="71:28"><expr pos:start="71:20" pos:end="71:28"><name pos:start="71:20" pos:end="71:28"><name pos:start="71:20" pos:end="71:21">s2</name><operator pos:start="71:22" pos:end="71:23">-&gt;</operator><name pos:start="71:24" pos:end="71:28">qtest</name></name></expr></argument>, <argument pos:start="71:31" pos:end="71:53"><expr pos:start="71:31" pos:end="71:53"><operator pos:start="71:31" pos:end="71:31">(</operator><name pos:start="71:32" pos:end="71:40">uintptr_t</name><operator pos:start="71:41" pos:end="71:41">)</operator><name pos:start="71:42" pos:end="71:53"><name pos:start="71:42" pos:end="71:43">s2</name><operator pos:start="71:44" pos:end="71:45">-&gt;</operator><name pos:start="71:46" pos:end="71:53">mem_base</name></name></expr></argument>, <argument pos:start="71:56" pos:end="71:59"><expr pos:start="71:56" pos:end="71:59"><name pos:start="71:56" pos:end="71:59">data</name></expr></argument>, <argument pos:start="71:62" pos:end="71:71"><expr pos:start="71:62" pos:end="71:71"><name pos:start="71:62" pos:end="71:71">TMPSHMSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:32"><expr pos:start="73:5" pos:end="73:31"><call pos:start="73:5" pos:end="73:31"><name pos:start="73:5" pos:end="73:10">memset</name><argument_list pos:start="73:11" pos:end="73:31">(<argument pos:start="73:12" pos:end="73:15"><expr pos:start="73:12" pos:end="73:15"><name pos:start="73:12" pos:end="73:15">data</name></expr></argument>, <argument pos:start="73:18" pos:end="73:18"><expr pos:start="73:18" pos:end="73:18"><literal type="number" pos:start="73:18" pos:end="73:18">0</literal></expr></argument>, <argument pos:start="73:21" pos:end="73:30"><expr pos:start="73:21" pos:end="73:30"><name pos:start="73:21" pos:end="73:30">TMPSHMSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:72"><expr pos:start="75:5" pos:end="75:71"><call pos:start="75:5" pos:end="75:71"><name pos:start="75:5" pos:end="75:17">qtest_memread</name><argument_list pos:start="75:18" pos:end="75:71">(<argument pos:start="75:19" pos:end="75:27"><expr pos:start="75:19" pos:end="75:27"><name pos:start="75:19" pos:end="75:27"><name pos:start="75:19" pos:end="75:20">s1</name><operator pos:start="75:21" pos:end="75:22">-&gt;</operator><name pos:start="75:23" pos:end="75:27">qtest</name></name></expr></argument>, <argument pos:start="75:30" pos:end="75:52"><expr pos:start="75:30" pos:end="75:52"><operator pos:start="75:30" pos:end="75:30">(</operator><name pos:start="75:31" pos:end="75:39">uintptr_t</name><operator pos:start="75:40" pos:end="75:40">)</operator><name pos:start="75:41" pos:end="75:52"><name pos:start="75:41" pos:end="75:42">s2</name><operator pos:start="75:43" pos:end="75:44">-&gt;</operator><name pos:start="75:45" pos:end="75:52">mem_base</name></name></expr></argument>, <argument pos:start="75:55" pos:end="75:58"><expr pos:start="75:55" pos:end="75:58"><name pos:start="75:55" pos:end="75:58">data</name></expr></argument>, <argument pos:start="75:61" pos:end="75:70"><expr pos:start="75:61" pos:end="75:70"><name pos:start="75:61" pos:end="75:70">TMPSHMSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="77:5" pos:end="81:5">for <control pos:start="77:9" pos:end="77:36">(<init pos:start="77:10" pos:end="77:15"><expr pos:start="77:10" pos:end="77:14"><name pos:start="77:10" pos:end="77:10">i</name> <operator pos:start="77:12" pos:end="77:12">=</operator> <literal type="number" pos:start="77:14" pos:end="77:14">0</literal></expr>;</init> <condition pos:start="77:17" pos:end="77:31"><expr pos:start="77:17" pos:end="77:30"><name pos:start="77:17" pos:end="77:17">i</name> <operator pos:start="77:19" pos:end="77:19">&lt;</operator> <name pos:start="77:21" pos:end="77:30">TMPSHMSIZE</name></expr>;</condition> <incr pos:start="77:33" pos:end="77:35"><expr pos:start="77:33" pos:end="77:35"><name pos:start="77:33" pos:end="77:33">i</name><operator pos:start="77:34" pos:end="77:35">++</operator></expr></incr>)</control> <block pos:start="77:38" pos:end="81:5">{<block_content pos:start="79:9" pos:end="79:44">

        <expr_stmt pos:start="79:9" pos:end="79:44"><expr pos:start="79:9" pos:end="79:43"><call pos:start="79:9" pos:end="79:43"><name pos:start="79:9" pos:end="79:24">g_assert_cmpuint</name><argument_list pos:start="79:25" pos:end="79:43">(<argument pos:start="79:26" pos:end="79:32"><expr pos:start="79:26" pos:end="79:32"><name pos:start="79:26" pos:end="79:32"><name pos:start="79:26" pos:end="79:29">data</name><index pos:start="79:30" pos:end="79:32">[<expr pos:start="79:31" pos:end="79:31"><name pos:start="79:31" pos:end="79:31">i</name></expr>]</index></name></expr></argument>, <argument pos:start="79:35" pos:end="79:36"><expr pos:start="79:35" pos:end="79:36"><operator pos:start="79:35" pos:end="79:36">==</operator></expr></argument>, <argument pos:start="79:39" pos:end="79:42"><expr pos:start="79:39" pos:end="79:42"><literal type="number" pos:start="79:39" pos:end="79:42">0x44</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="85:5" pos:end="85:26"><expr pos:start="85:5" pos:end="85:25"><call pos:start="85:5" pos:end="85:25"><name pos:start="85:5" pos:end="85:14">qtest_quit</name><argument_list pos:start="85:15" pos:end="85:25">(<argument pos:start="85:16" pos:end="85:24"><expr pos:start="85:16" pos:end="85:24"><name pos:start="85:16" pos:end="85:24"><name pos:start="85:16" pos:end="85:17">s1</name><operator pos:start="85:18" pos:end="85:19">-&gt;</operator><name pos:start="85:20" pos:end="85:24">qtest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:26"><expr pos:start="87:5" pos:end="87:25"><call pos:start="87:5" pos:end="87:25"><name pos:start="87:5" pos:end="87:14">qtest_quit</name><argument_list pos:start="87:15" pos:end="87:25">(<argument pos:start="87:16" pos:end="87:24"><expr pos:start="87:16" pos:end="87:24"><name pos:start="87:16" pos:end="87:24"><name pos:start="87:16" pos:end="87:17">s2</name><operator pos:start="87:18" pos:end="87:19">-&gt;</operator><name pos:start="87:20" pos:end="87:24">qtest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:17"><expr pos:start="89:5" pos:end="89:16"><call pos:start="89:5" pos:end="89:16"><name pos:start="89:5" pos:end="89:10">g_free</name><argument_list pos:start="89:11" pos:end="89:16">(<argument pos:start="89:12" pos:end="89:15"><expr pos:start="89:12" pos:end="89:15"><name pos:start="89:12" pos:end="89:15">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
