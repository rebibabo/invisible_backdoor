<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24797.c" pos:tabs="8"><function pos:start="1:1" pos:end="297:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">dpcm_decode_frame</name><parameter_list pos:start="1:29" pos:end="3:65">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:50"><name pos:start="1:30" pos:end="1:43">AVCodecContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:62"><decl pos:start="1:53" pos:end="1:62"><type pos:start="1:53" pos:end="1:62"><name pos:start="1:53" pos:end="1:56">void</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">data</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:47"><decl pos:start="3:30" pos:end="3:47"><type pos:start="3:30" pos:end="3:47"><name pos:start="3:30" pos:end="3:32">int</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:47">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:50" pos:end="3:64"><decl pos:start="3:50" pos:end="3:64"><type pos:start="3:50" pos:end="3:64"><name pos:start="3:50" pos:end="3:57">AVPacket</name> <modifier pos:start="3:59" pos:end="3:59">*</modifier></type><name pos:start="3:60" pos:end="3:64">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="297:1">{<block_content pos:start="7:5" pos:end="295:20">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">buf</name> <init pos:start="7:24" pos:end="7:36">= <expr pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:30">avpkt</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">buf_size</name> <init pos:start="9:18" pos:end="9:30">= <expr pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:24">avpkt</name><operator pos:start="9:25" pos:end="9:26">-&gt;</operator><name pos:start="9:27" pos:end="9:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:44"><decl pos:start="11:5" pos:end="11:43"><type pos:start="11:5" pos:end="11:19"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:17">uint8_t</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:26">buf_end</name> <init pos:start="11:28" pos:end="11:43">= <expr pos:start="11:30" pos:end="11:43"><name pos:start="11:30" pos:end="11:32">buf</name> <operator pos:start="11:34" pos:end="11:34">+</operator> <name pos:start="11:36" pos:end="11:43">buf_size</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:38"><decl pos:start="13:5" pos:end="13:37"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:15">DPCMContext</name> <modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:18">s</name> <init pos:start="13:20" pos:end="13:37">= <expr pos:start="13:22" pos:end="13:37"><name pos:start="13:22" pos:end="13:37"><name pos:start="13:22" pos:end="13:26">avctx</name><operator pos:start="13:27" pos:end="13:28">-&gt;</operator><name pos:start="13:29" pos:end="13:37">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:15"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">out</name> <init pos:start="15:13" pos:end="15:15">= <expr pos:start="15:15" pos:end="15:15"><literal type="number" pos:start="15:15" pos:end="15:15">0</literal></expr></init></decl>, <decl pos:start="15:18" pos:end="15:20"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:18" pos:end="15:20">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:20"><name pos:start="17:9" pos:end="17:17">predictor</name><index pos:start="17:18" pos:end="17:20">[<expr pos:start="17:19" pos:end="17:19"><literal type="number" pos:start="17:19" pos:end="17:19">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:15"><decl pos:start="19:5" pos:end="19:14"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:10">ch</name> <init pos:start="19:12" pos:end="19:14">= <expr pos:start="19:14" pos:end="19:14"><literal type="number" pos:start="19:14" pos:end="19:14">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:33"><decl pos:start="21:5" pos:end="21:32"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:14">stereo</name> <init pos:start="21:16" pos:end="21:32">= <expr pos:start="21:18" pos:end="21:32"><name pos:start="21:18" pos:end="21:28"><name pos:start="21:18" pos:end="21:18">s</name><operator pos:start="21:19" pos:end="21:20">-&gt;</operator><name pos:start="21:21" pos:end="21:28">channels</name></name> <operator pos:start="21:30" pos:end="21:30">-</operator> <literal type="number" pos:start="21:32" pos:end="21:32">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:28"><decl pos:start="23:5" pos:end="23:27"><type pos:start="23:5" pos:end="23:13"><name pos:start="23:5" pos:end="23:11">int16_t</name> <modifier pos:start="23:13" pos:end="23:13">*</modifier></type><name pos:start="23:14" pos:end="23:27">output_samples</name></decl>;</decl_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:31">/* calculate output size */</comment>

    <switch pos:start="29:5" pos:end="61:5">switch<condition pos:start="29:11" pos:end="29:28">(<expr pos:start="29:12" pos:end="29:27"><name pos:start="29:12" pos:end="29:27"><name pos:start="29:12" pos:end="29:16">avctx</name><operator pos:start="29:17" pos:end="29:18">-&gt;</operator><name pos:start="29:19" pos:end="29:23">codec</name><operator pos:start="29:24" pos:end="29:25">-&gt;</operator><name pos:start="29:26" pos:end="29:27">id</name></name></expr>)</condition> <block pos:start="29:30" pos:end="61:5">{<block_content pos:start="31:5" pos:end="59:14">

    <case pos:start="31:5" pos:end="31:27">case <expr pos:start="31:10" pos:end="31:26"><name pos:start="31:10" pos:end="31:26">CODEC_ID_ROQ_DPCM</name></expr>:</case>

        <expr_stmt pos:start="33:9" pos:end="33:27"><expr pos:start="33:9" pos:end="33:26"><name pos:start="33:9" pos:end="33:11">out</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <name pos:start="33:15" pos:end="33:22">buf_size</name> <operator pos:start="33:24" pos:end="33:24">-</operator> <literal type="number" pos:start="33:26" pos:end="33:26">8</literal></expr>;</expr_stmt>

        <break pos:start="35:9" pos:end="35:14">break;</break>

    <case pos:start="37:5" pos:end="37:33">case <expr pos:start="37:10" pos:end="37:32"><name pos:start="37:10" pos:end="37:32">CODEC_ID_INTERPLAY_DPCM</name></expr>:</case>

        <expr_stmt pos:start="39:9" pos:end="39:41"><expr pos:start="39:9" pos:end="39:40"><name pos:start="39:9" pos:end="39:11">out</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <name pos:start="39:15" pos:end="39:22">buf_size</name> <operator pos:start="39:24" pos:end="39:24">-</operator> <literal type="number" pos:start="39:26" pos:end="39:28">6</literal> <operator pos:start="39:28" pos:end="39:28">-</operator> <name pos:start="39:30" pos:end="39:40"><name pos:start="39:30" pos:end="39:30">s</name><operator pos:start="39:31" pos:end="39:32">-&gt;</operator><name pos:start="39:33" pos:end="39:40">channels</name></name></expr>;</expr_stmt>

        <break pos:start="41:9" pos:end="41:14">break;</break>

    <case pos:start="43:5" pos:end="43:27">case <expr pos:start="43:10" pos:end="43:26"><name pos:start="43:10" pos:end="43:26">CODEC_ID_XAN_DPCM</name></expr>:</case>

        <expr_stmt pos:start="45:9" pos:end="45:41"><expr pos:start="45:9" pos:end="45:40"><name pos:start="45:9" pos:end="45:11">out</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <name pos:start="45:15" pos:end="45:22">buf_size</name> <operator pos:start="45:24" pos:end="45:24">-</operator> <literal type="number" pos:start="45:26" pos:end="45:26">2</literal> <operator pos:start="45:28" pos:end="45:28">*</operator> <name pos:start="45:30" pos:end="45:40"><name pos:start="45:30" pos:end="45:30">s</name><operator pos:start="45:31" pos:end="45:32">-&gt;</operator><name pos:start="45:33" pos:end="45:40">channels</name></name></expr>;</expr_stmt>

        <break pos:start="47:9" pos:end="47:14">break;</break>

    <case pos:start="49:5" pos:end="49:27">case <expr pos:start="49:10" pos:end="49:26"><name pos:start="49:10" pos:end="49:26">CODEC_ID_SOL_DPCM</name></expr>:</case>

        <if_stmt pos:start="51:9" pos:end="57:27"><if pos:start="51:9" pos:end="53:31">if <condition pos:start="51:12" pos:end="51:34">(<expr pos:start="51:13" pos:end="51:33"><name pos:start="51:13" pos:end="51:28"><name pos:start="51:13" pos:end="51:17">avctx</name><operator pos:start="51:18" pos:end="51:19">-&gt;</operator><name pos:start="51:20" pos:end="51:28">codec_tag</name></name> <operator pos:start="51:30" pos:end="51:31">!=</operator> <literal type="number" pos:start="51:33" pos:end="51:33">3</literal></expr>)</condition><block type="pseudo" pos:start="53:13" pos:end="53:31"><block_content pos:start="53:13" pos:end="53:31">

            <expr_stmt pos:start="53:13" pos:end="53:31"><expr pos:start="53:13" pos:end="53:30"><name pos:start="53:13" pos:end="53:15">out</name> <operator pos:start="53:17" pos:end="53:17">=</operator> <name pos:start="53:19" pos:end="53:26">buf_size</name> <operator pos:start="53:28" pos:end="53:28">*</operator> <literal type="number" pos:start="53:30" pos:end="53:30">2</literal></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="55:9" pos:end="57:27">else<block type="pseudo" pos:start="57:13" pos:end="57:27"><block_content pos:start="57:13" pos:end="57:27">

            <expr_stmt pos:start="57:13" pos:end="57:27"><expr pos:start="57:13" pos:end="57:26"><name pos:start="57:13" pos:end="57:15">out</name> <operator pos:start="57:17" pos:end="57:17">=</operator> <name pos:start="57:19" pos:end="57:26">buf_size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <break pos:start="59:9" pos:end="59:14">break;</break>

    </block_content>}</block></switch>

    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:17">(<expr pos:start="63:9" pos:end="63:16"><name pos:start="63:9" pos:end="63:11">out</name> <operator pos:start="63:13" pos:end="63:14">&lt;=</operator> <literal type="number" pos:start="63:16" pos:end="63:16">0</literal></expr>)</condition> <block pos:start="63:19" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:31">

        <expr_stmt pos:start="65:9" pos:end="65:61"><expr pos:start="65:9" pos:end="65:60"><call pos:start="65:9" pos:end="65:60"><name pos:start="65:9" pos:end="65:14">av_log</name><argument_list pos:start="65:15" pos:end="65:60">(<argument pos:start="65:16" pos:end="65:20"><expr pos:start="65:16" pos:end="65:20"><name pos:start="65:16" pos:end="65:20">avctx</name></expr></argument>, <argument pos:start="65:23" pos:end="65:34"><expr pos:start="65:23" pos:end="65:34"><name pos:start="65:23" pos:end="65:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="65:37" pos:end="65:59"><expr pos:start="65:37" pos:end="65:59"><literal type="string" pos:start="65:37" pos:end="65:59">"packet is too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:31">return <expr pos:start="67:16" pos:end="67:30"><call pos:start="67:16" pos:end="67:30"><name pos:start="67:16" pos:end="67:22">AVERROR</name><argument_list pos:start="67:23" pos:end="67:30">(<argument pos:start="67:24" pos:end="67:29"><expr pos:start="67:24" pos:end="67:29"><name pos:start="67:24" pos:end="67:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="73:5" pos:end="73:27">/* get output buffer */</comment>

    <expr_stmt pos:start="75:5" pos:end="75:44"><expr pos:start="75:5" pos:end="75:43"><name pos:start="75:5" pos:end="75:23"><name pos:start="75:5" pos:end="75:5">s</name><operator pos:start="75:6" pos:end="75:7">-&gt;</operator><name pos:start="75:8" pos:end="75:12">frame</name><operator pos:start="75:13" pos:end="75:13">.</operator><name pos:start="75:14" pos:end="75:23">nb_samples</name></name> <operator pos:start="75:25" pos:end="75:25">=</operator> <name pos:start="75:27" pos:end="75:29">out</name> <operator pos:start="75:31" pos:end="75:31">/</operator> <name pos:start="75:33" pos:end="75:43"><name pos:start="75:33" pos:end="75:33">s</name><operator pos:start="75:34" pos:end="75:35">-&gt;</operator><name pos:start="75:36" pos:end="75:43">channels</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="77:5" pos:end="83:5"><if pos:start="77:5" pos:end="83:5">if <condition pos:start="77:8" pos:end="77:56">(<expr pos:start="77:9" pos:end="77:55"><operator pos:start="77:9" pos:end="77:9">(</operator><name pos:start="77:10" pos:end="77:12">ret</name> <operator pos:start="77:14" pos:end="77:14">=</operator> <call pos:start="77:16" pos:end="77:50"><name pos:start="77:16" pos:end="77:32"><name pos:start="77:16" pos:end="77:20">avctx</name><operator pos:start="77:21" pos:end="77:22">-&gt;</operator><name pos:start="77:23" pos:end="77:32">get_buffer</name></name><argument_list pos:start="77:33" pos:end="77:50">(<argument pos:start="77:34" pos:end="77:38"><expr pos:start="77:34" pos:end="77:38"><name pos:start="77:34" pos:end="77:38">avctx</name></expr></argument>, <argument pos:start="77:41" pos:end="77:49"><expr pos:start="77:41" pos:end="77:49"><operator pos:start="77:41" pos:end="77:41">&amp;</operator><name pos:start="77:42" pos:end="77:49"><name pos:start="77:42" pos:end="77:42">s</name><operator pos:start="77:43" pos:end="77:44">-&gt;</operator><name pos:start="77:45" pos:end="77:49">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="77:51" pos:end="77:51">)</operator> <operator pos:start="77:53" pos:end="77:53">&lt;</operator> <literal type="number" pos:start="77:55" pos:end="77:55">0</literal></expr>)</condition> <block pos:start="77:58" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:19">

        <expr_stmt pos:start="79:9" pos:end="79:61"><expr pos:start="79:9" pos:end="79:60"><call pos:start="79:9" pos:end="79:60"><name pos:start="79:9" pos:end="79:14">av_log</name><argument_list pos:start="79:15" pos:end="79:60">(<argument pos:start="79:16" pos:end="79:20"><expr pos:start="79:16" pos:end="79:20"><name pos:start="79:16" pos:end="79:20">avctx</name></expr></argument>, <argument pos:start="79:23" pos:end="79:34"><expr pos:start="79:23" pos:end="79:34"><name pos:start="79:23" pos:end="79:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="79:37" pos:end="79:59"><expr pos:start="79:37" pos:end="79:59"><literal type="string" pos:start="79:37" pos:end="79:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="81:9" pos:end="81:19">return <expr pos:start="81:16" pos:end="81:18"><name pos:start="81:16" pos:end="81:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:49"><expr pos:start="85:5" pos:end="85:48"><name pos:start="85:5" pos:end="85:18">output_samples</name> <operator pos:start="85:20" pos:end="85:20">=</operator> <operator pos:start="85:22" pos:end="85:22">(</operator><name pos:start="85:23" pos:end="85:29">int16_t</name> <operator pos:start="85:31" pos:end="85:31">*</operator><operator pos:start="85:32" pos:end="85:32">)</operator><name pos:start="85:33" pos:end="85:48"><name pos:start="85:33" pos:end="85:33">s</name><operator pos:start="85:34" pos:end="85:35">-&gt;</operator><name pos:start="85:36" pos:end="85:40">frame</name><operator pos:start="85:41" pos:end="85:41">.</operator><name pos:start="85:42" pos:end="85:45">data</name><index pos:start="85:46" pos:end="85:48">[<expr pos:start="85:47" pos:end="85:47"><literal type="number" pos:start="85:47" pos:end="85:47">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <switch pos:start="89:5" pos:end="285:5">switch<condition pos:start="89:11" pos:end="89:28">(<expr pos:start="89:12" pos:end="89:27"><name pos:start="89:12" pos:end="89:27"><name pos:start="89:12" pos:end="89:16">avctx</name><operator pos:start="89:17" pos:end="89:18">-&gt;</operator><name pos:start="89:19" pos:end="89:23">codec</name><operator pos:start="89:24" pos:end="89:25">-&gt;</operator><name pos:start="89:26" pos:end="89:27">id</name></name></expr>)</condition> <block pos:start="89:30" pos:end="285:5">{<block_content pos:start="93:5" pos:end="283:14">



    <case pos:start="93:5" pos:end="93:27">case <expr pos:start="93:10" pos:end="93:26"><name pos:start="93:10" pos:end="93:26">CODEC_ID_ROQ_DPCM</name></expr>:</case>

        <expr_stmt pos:start="95:9" pos:end="95:17"><expr pos:start="95:9" pos:end="95:16"><name pos:start="95:9" pos:end="95:11">buf</name> <operator pos:start="95:13" pos:end="95:14">+=</operator> <literal type="number" pos:start="95:16" pos:end="95:16">6</literal></expr>;</expr_stmt>



        <if_stmt pos:start="99:9" pos:end="109:9"><if pos:start="99:9" pos:end="105:9">if <condition pos:start="99:12" pos:end="99:19">(<expr pos:start="99:13" pos:end="99:18"><name pos:start="99:13" pos:end="99:18">stereo</name></expr>)</condition> <block pos:start="99:21" pos:end="105:9">{<block_content pos:start="101:13" pos:end="103:69">

            <expr_stmt pos:start="101:13" pos:end="101:69"><expr pos:start="101:13" pos:end="101:68"><name pos:start="101:13" pos:end="101:24"><name pos:start="101:13" pos:end="101:21">predictor</name><index pos:start="101:22" pos:end="101:24">[<expr pos:start="101:23" pos:end="101:23"><literal type="number" pos:start="101:23" pos:end="101:23">1</literal></expr>]</index></name> <operator pos:start="101:26" pos:end="101:26">=</operator> <operator pos:start="101:28" pos:end="101:28">(</operator><name pos:start="101:29" pos:end="101:35">int16_t</name><operator pos:start="101:36" pos:end="101:36">)</operator><operator pos:start="101:37" pos:end="101:37">(</operator><call pos:start="101:38" pos:end="101:62"><name pos:start="101:38" pos:end="101:56">bytestream_get_byte</name><argument_list pos:start="101:57" pos:end="101:62">(<argument pos:start="101:58" pos:end="101:61"><expr pos:start="101:58" pos:end="101:61"><operator pos:start="101:58" pos:end="101:58">&amp;</operator><name pos:start="101:59" pos:end="101:61">buf</name></expr></argument>)</argument_list></call> <operator pos:start="101:64" pos:end="101:65">&lt;&lt;</operator> <literal type="number" pos:start="101:67" pos:end="101:67">8</literal><operator pos:start="101:68" pos:end="101:68">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:69"><expr pos:start="103:13" pos:end="103:68"><name pos:start="103:13" pos:end="103:24"><name pos:start="103:13" pos:end="103:21">predictor</name><index pos:start="103:22" pos:end="103:24">[<expr pos:start="103:23" pos:end="103:23"><literal type="number" pos:start="103:23" pos:end="103:23">0</literal></expr>]</index></name> <operator pos:start="103:26" pos:end="103:26">=</operator> <operator pos:start="103:28" pos:end="103:28">(</operator><name pos:start="103:29" pos:end="103:35">int16_t</name><operator pos:start="103:36" pos:end="103:36">)</operator><operator pos:start="103:37" pos:end="103:37">(</operator><call pos:start="103:38" pos:end="103:62"><name pos:start="103:38" pos:end="103:56">bytestream_get_byte</name><argument_list pos:start="103:57" pos:end="103:62">(<argument pos:start="103:58" pos:end="103:61"><expr pos:start="103:58" pos:end="103:61"><operator pos:start="103:58" pos:end="103:58">&amp;</operator><name pos:start="103:59" pos:end="103:61">buf</name></expr></argument>)</argument_list></call> <operator pos:start="103:64" pos:end="103:65">&lt;&lt;</operator> <literal type="number" pos:start="103:67" pos:end="103:67">8</literal><operator pos:start="103:68" pos:end="103:68">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="105:11" pos:end="109:9">else <block pos:start="105:16" pos:end="109:9">{<block_content pos:start="107:13" pos:end="107:62">

            <expr_stmt pos:start="107:13" pos:end="107:62"><expr pos:start="107:13" pos:end="107:61"><name pos:start="107:13" pos:end="107:24"><name pos:start="107:13" pos:end="107:21">predictor</name><index pos:start="107:22" pos:end="107:24">[<expr pos:start="107:23" pos:end="107:23"><literal type="number" pos:start="107:23" pos:end="107:23">0</literal></expr>]</index></name> <operator pos:start="107:26" pos:end="107:26">=</operator> <operator pos:start="107:28" pos:end="107:28">(</operator><name pos:start="107:29" pos:end="107:35">int16_t</name><operator pos:start="107:36" pos:end="107:36">)</operator><call pos:start="107:37" pos:end="107:61"><name pos:start="107:37" pos:end="107:55">bytestream_get_le16</name><argument_list pos:start="107:56" pos:end="107:61">(<argument pos:start="107:57" pos:end="107:60"><expr pos:start="107:57" pos:end="107:60"><operator pos:start="107:57" pos:end="107:57">&amp;</operator><name pos:start="107:58" pos:end="107:60">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="113:9" pos:end="113:32">/* decode the samples */</comment>

        <while pos:start="115:9" pos:end="129:9">while <condition pos:start="115:15" pos:end="115:29">(<expr pos:start="115:16" pos:end="115:28"><name pos:start="115:16" pos:end="115:18">buf</name> <operator pos:start="115:20" pos:end="115:20">&lt;</operator> <name pos:start="115:22" pos:end="115:28">buf_end</name></expr>)</condition> <block pos:start="115:31" pos:end="129:9">{<block_content pos:start="117:13" pos:end="127:25">

            <expr_stmt pos:start="117:13" pos:end="117:57"><expr pos:start="117:13" pos:end="117:56"><name pos:start="117:13" pos:end="117:25"><name pos:start="117:13" pos:end="117:21">predictor</name><index pos:start="117:22" pos:end="117:25">[<expr pos:start="117:23" pos:end="117:24"><name pos:start="117:23" pos:end="117:24">ch</name></expr>]</index></name> <operator pos:start="117:27" pos:end="117:28">+=</operator> <name pos:start="117:30" pos:end="117:56"><name pos:start="117:30" pos:end="117:30">s</name><operator pos:start="117:31" pos:end="117:32">-&gt;</operator><name pos:start="117:33" pos:end="117:48">roq_square_array</name><index pos:start="117:49" pos:end="117:56">[<expr pos:start="117:50" pos:end="117:55"><operator pos:start="117:50" pos:end="117:50">*</operator><name pos:start="117:51" pos:end="117:53">buf</name><operator pos:start="117:54" pos:end="117:55">++</operator></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:58"><expr pos:start="119:13" pos:end="119:57"><name pos:start="119:13" pos:end="119:25"><name pos:start="119:13" pos:end="119:21">predictor</name><index pos:start="119:22" pos:end="119:25">[<expr pos:start="119:23" pos:end="119:24"><name pos:start="119:23" pos:end="119:24">ch</name></expr>]</index></name>  <operator pos:start="119:28" pos:end="119:28">=</operator> <call pos:start="119:30" pos:end="119:57"><name pos:start="119:30" pos:end="119:42">av_clip_int16</name><argument_list pos:start="119:43" pos:end="119:57">(<argument pos:start="119:44" pos:end="119:56"><expr pos:start="119:44" pos:end="119:56"><name pos:start="119:44" pos:end="119:56"><name pos:start="119:44" pos:end="119:52">predictor</name><index pos:start="119:53" pos:end="119:56">[<expr pos:start="119:54" pos:end="119:55"><name pos:start="119:54" pos:end="119:55">ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:46"><expr pos:start="121:13" pos:end="121:45"><operator pos:start="121:13" pos:end="121:13">*</operator><name pos:start="121:14" pos:end="121:27">output_samples</name><operator pos:start="121:28" pos:end="121:29">++</operator> <operator pos:start="121:31" pos:end="121:31">=</operator> <name pos:start="121:33" pos:end="121:45"><name pos:start="121:33" pos:end="121:41">predictor</name><index pos:start="121:42" pos:end="121:45">[<expr pos:start="121:43" pos:end="121:44"><name pos:start="121:43" pos:end="121:44">ch</name></expr>]</index></name></expr>;</expr_stmt>



            <comment type="block" pos:start="125:13" pos:end="125:32">/* toggle channel */</comment>

            <expr_stmt pos:start="127:13" pos:end="127:25"><expr pos:start="127:13" pos:end="127:24"><name pos:start="127:13" pos:end="127:14">ch</name> <operator pos:start="127:16" pos:end="127:17">^=</operator> <name pos:start="127:19" pos:end="127:24">stereo</name></expr>;</expr_stmt>

        </block_content>}</block></while>

        <break pos:start="131:9" pos:end="131:14">break;</break>



    <case pos:start="135:5" pos:end="135:33">case <expr pos:start="135:10" pos:end="135:32"><name pos:start="135:10" pos:end="135:32">CODEC_ID_INTERPLAY_DPCM</name></expr>:</case>

        <expr_stmt pos:start="137:9" pos:end="137:17"><expr pos:start="137:9" pos:end="137:16"><name pos:start="137:9" pos:end="137:11">buf</name> <operator pos:start="137:13" pos:end="137:14">+=</operator> <literal type="number" pos:start="137:16" pos:end="137:16">6</literal></expr>;</expr_stmt>  <comment type="block" pos:start="137:20" pos:end="137:68">/* skip over the stream mask and stream length */</comment>



        <for pos:start="141:9" pos:end="147:9">for <control pos:start="141:13" pos:end="141:44">(<init pos:start="141:14" pos:end="141:20"><expr pos:start="141:14" pos:end="141:19"><name pos:start="141:14" pos:end="141:15">ch</name> <operator pos:start="141:17" pos:end="141:17">=</operator> <literal type="number" pos:start="141:19" pos:end="141:19">0</literal></expr>;</init> <condition pos:start="141:22" pos:end="141:38"><expr pos:start="141:22" pos:end="141:37"><name pos:start="141:22" pos:end="141:23">ch</name> <operator pos:start="141:25" pos:end="141:25">&lt;</operator> <name pos:start="141:27" pos:end="141:37"><name pos:start="141:27" pos:end="141:27">s</name><operator pos:start="141:28" pos:end="141:29">-&gt;</operator><name pos:start="141:30" pos:end="141:37">channels</name></name></expr>;</condition> <incr pos:start="141:40" pos:end="141:43"><expr pos:start="141:40" pos:end="141:43"><name pos:start="141:40" pos:end="141:41">ch</name><operator pos:start="141:42" pos:end="141:43">++</operator></expr></incr>)</control> <block pos:start="141:46" pos:end="147:9">{<block_content pos:start="143:13" pos:end="145:46">

            <expr_stmt pos:start="143:13" pos:end="143:63"><expr pos:start="143:13" pos:end="143:62"><name pos:start="143:13" pos:end="143:25"><name pos:start="143:13" pos:end="143:21">predictor</name><index pos:start="143:22" pos:end="143:25">[<expr pos:start="143:23" pos:end="143:24"><name pos:start="143:23" pos:end="143:24">ch</name></expr>]</index></name> <operator pos:start="143:27" pos:end="143:27">=</operator> <operator pos:start="143:29" pos:end="143:29">(</operator><name pos:start="143:30" pos:end="143:36">int16_t</name><operator pos:start="143:37" pos:end="143:37">)</operator><call pos:start="143:38" pos:end="143:62"><name pos:start="143:38" pos:end="143:56">bytestream_get_le16</name><argument_list pos:start="143:57" pos:end="143:62">(<argument pos:start="143:58" pos:end="143:61"><expr pos:start="143:58" pos:end="143:61"><operator pos:start="143:58" pos:end="143:58">&amp;</operator><name pos:start="143:59" pos:end="143:61">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:46"><expr pos:start="145:13" pos:end="145:45"><operator pos:start="145:13" pos:end="145:13">*</operator><name pos:start="145:14" pos:end="145:27">output_samples</name><operator pos:start="145:28" pos:end="145:29">++</operator> <operator pos:start="145:31" pos:end="145:31">=</operator> <name pos:start="145:33" pos:end="145:45"><name pos:start="145:33" pos:end="145:41">predictor</name><index pos:start="145:42" pos:end="145:45">[<expr pos:start="145:43" pos:end="145:44"><name pos:start="145:43" pos:end="145:44">ch</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="151:9" pos:end="151:15"><expr pos:start="151:9" pos:end="151:14"><name pos:start="151:9" pos:end="151:10">ch</name> <operator pos:start="151:12" pos:end="151:12">=</operator> <literal type="number" pos:start="151:14" pos:end="151:14">0</literal></expr>;</expr_stmt>

        <while pos:start="153:9" pos:end="167:9">while <condition pos:start="153:15" pos:end="153:29">(<expr pos:start="153:16" pos:end="153:28"><name pos:start="153:16" pos:end="153:18">buf</name> <operator pos:start="153:20" pos:end="153:20">&lt;</operator> <name pos:start="153:22" pos:end="153:28">buf_end</name></expr>)</condition> <block pos:start="153:31" pos:end="167:9">{<block_content pos:start="155:13" pos:end="165:25">

            <expr_stmt pos:start="155:13" pos:end="155:59"><expr pos:start="155:13" pos:end="155:58"><name pos:start="155:13" pos:end="155:25"><name pos:start="155:13" pos:end="155:21">predictor</name><index pos:start="155:22" pos:end="155:25">[<expr pos:start="155:23" pos:end="155:24"><name pos:start="155:23" pos:end="155:24">ch</name></expr>]</index></name> <operator pos:start="155:27" pos:end="155:28">+=</operator> <name pos:start="155:30" pos:end="155:58"><name pos:start="155:30" pos:end="155:50">interplay_delta_table</name><index pos:start="155:51" pos:end="155:58">[<expr pos:start="155:52" pos:end="155:57"><operator pos:start="155:52" pos:end="155:52">*</operator><name pos:start="155:53" pos:end="155:55">buf</name><operator pos:start="155:56" pos:end="155:57">++</operator></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="157:13" pos:end="157:58"><expr pos:start="157:13" pos:end="157:57"><name pos:start="157:13" pos:end="157:25"><name pos:start="157:13" pos:end="157:21">predictor</name><index pos:start="157:22" pos:end="157:25">[<expr pos:start="157:23" pos:end="157:24"><name pos:start="157:23" pos:end="157:24">ch</name></expr>]</index></name>  <operator pos:start="157:28" pos:end="157:28">=</operator> <call pos:start="157:30" pos:end="157:57"><name pos:start="157:30" pos:end="157:42">av_clip_int16</name><argument_list pos:start="157:43" pos:end="157:57">(<argument pos:start="157:44" pos:end="157:56"><expr pos:start="157:44" pos:end="157:56"><name pos:start="157:44" pos:end="157:56"><name pos:start="157:44" pos:end="157:52">predictor</name><index pos:start="157:53" pos:end="157:56">[<expr pos:start="157:54" pos:end="157:55"><name pos:start="157:54" pos:end="157:55">ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:46"><expr pos:start="159:13" pos:end="159:45"><operator pos:start="159:13" pos:end="159:13">*</operator><name pos:start="159:14" pos:end="159:27">output_samples</name><operator pos:start="159:28" pos:end="159:29">++</operator> <operator pos:start="159:31" pos:end="159:31">=</operator> <name pos:start="159:33" pos:end="159:45"><name pos:start="159:33" pos:end="159:41">predictor</name><index pos:start="159:42" pos:end="159:45">[<expr pos:start="159:43" pos:end="159:44"><name pos:start="159:43" pos:end="159:44">ch</name></expr>]</index></name></expr>;</expr_stmt>



            <comment type="block" pos:start="163:13" pos:end="163:32">/* toggle channel */</comment>

            <expr_stmt pos:start="165:13" pos:end="165:25"><expr pos:start="165:13" pos:end="165:24"><name pos:start="165:13" pos:end="165:14">ch</name> <operator pos:start="165:16" pos:end="165:17">^=</operator> <name pos:start="165:19" pos:end="165:24">stereo</name></expr>;</expr_stmt>

        </block_content>}</block></while>

        <break pos:start="169:9" pos:end="169:14">break;</break>



    <case pos:start="173:5" pos:end="173:27">case <expr pos:start="173:10" pos:end="173:26"><name pos:start="173:10" pos:end="173:26">CODEC_ID_XAN_DPCM</name></expr>:</case>

    <block pos:start="175:5" pos:end="231:5">{<block_content pos:start="177:9" pos:end="229:14">

        <decl_stmt pos:start="177:9" pos:end="177:32"><decl pos:start="177:9" pos:end="177:31"><type pos:start="177:9" pos:end="177:11"><name pos:start="177:9" pos:end="177:11">int</name></type> <name pos:start="177:13" pos:end="177:20"><name pos:start="177:13" pos:end="177:17">shift</name><index pos:start="177:18" pos:end="177:20">[<expr pos:start="177:19" pos:end="177:19"><literal type="number" pos:start="177:19" pos:end="177:19">2</literal></expr>]</index></name> <init pos:start="177:22" pos:end="177:31">= <expr pos:start="177:24" pos:end="177:31"><block pos:start="177:24" pos:end="177:31">{ <expr pos:start="177:26" pos:end="177:26"><literal type="number" pos:start="177:26" pos:end="177:26">4</literal></expr>, <expr pos:start="177:29" pos:end="177:29"><literal type="number" pos:start="177:29" pos:end="177:29">4</literal></expr> }</block></expr></init></decl>;</decl_stmt>



        <for pos:start="181:9" pos:end="183:63">for <control pos:start="181:13" pos:end="181:44">(<init pos:start="181:14" pos:end="181:20"><expr pos:start="181:14" pos:end="181:19"><name pos:start="181:14" pos:end="181:15">ch</name> <operator pos:start="181:17" pos:end="181:17">=</operator> <literal type="number" pos:start="181:19" pos:end="181:19">0</literal></expr>;</init> <condition pos:start="181:22" pos:end="181:38"><expr pos:start="181:22" pos:end="181:37"><name pos:start="181:22" pos:end="181:23">ch</name> <operator pos:start="181:25" pos:end="181:25">&lt;</operator> <name pos:start="181:27" pos:end="181:37"><name pos:start="181:27" pos:end="181:27">s</name><operator pos:start="181:28" pos:end="181:29">-&gt;</operator><name pos:start="181:30" pos:end="181:37">channels</name></name></expr>;</condition> <incr pos:start="181:40" pos:end="181:43"><expr pos:start="181:40" pos:end="181:43"><name pos:start="181:40" pos:end="181:41">ch</name><operator pos:start="181:42" pos:end="181:43">++</operator></expr></incr>)</control><block type="pseudo" pos:start="183:13" pos:end="183:63"><block_content pos:start="183:13" pos:end="183:63">

            <expr_stmt pos:start="183:13" pos:end="183:63"><expr pos:start="183:13" pos:end="183:62"><name pos:start="183:13" pos:end="183:25"><name pos:start="183:13" pos:end="183:21">predictor</name><index pos:start="183:22" pos:end="183:25">[<expr pos:start="183:23" pos:end="183:24"><name pos:start="183:23" pos:end="183:24">ch</name></expr>]</index></name> <operator pos:start="183:27" pos:end="183:27">=</operator> <operator pos:start="183:29" pos:end="183:29">(</operator><name pos:start="183:30" pos:end="183:36">int16_t</name><operator pos:start="183:37" pos:end="183:37">)</operator><call pos:start="183:38" pos:end="183:62"><name pos:start="183:38" pos:end="183:56">bytestream_get_le16</name><argument_list pos:start="183:57" pos:end="183:62">(<argument pos:start="183:58" pos:end="183:61"><expr pos:start="183:58" pos:end="183:61"><operator pos:start="183:58" pos:end="183:58">&amp;</operator><name pos:start="183:59" pos:end="183:61">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



        <expr_stmt pos:start="187:9" pos:end="187:15"><expr pos:start="187:9" pos:end="187:14"><name pos:start="187:9" pos:end="187:10">ch</name> <operator pos:start="187:12" pos:end="187:12">=</operator> <literal type="number" pos:start="187:14" pos:end="187:14">0</literal></expr>;</expr_stmt>

        <while pos:start="189:9" pos:end="227:9">while <condition pos:start="189:15" pos:end="189:29">(<expr pos:start="189:16" pos:end="189:28"><name pos:start="189:16" pos:end="189:18">buf</name> <operator pos:start="189:20" pos:end="189:20">&lt;</operator> <name pos:start="189:22" pos:end="189:28">buf_end</name></expr>)</condition> <block pos:start="189:31" pos:end="227:9">{<block_content pos:start="191:13" pos:end="225:25">

            <decl_stmt pos:start="191:13" pos:end="191:31"><decl pos:start="191:13" pos:end="191:30"><type pos:start="191:13" pos:end="191:19"><name pos:start="191:13" pos:end="191:19">uint8_t</name></type> <name pos:start="191:21" pos:end="191:21">n</name> <init pos:start="191:23" pos:end="191:30">= <expr pos:start="191:25" pos:end="191:30"><operator pos:start="191:25" pos:end="191:25">*</operator><name pos:start="191:26" pos:end="191:28">buf</name><operator pos:start="191:29" pos:end="191:30">++</operator></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="193:13" pos:end="193:43"><decl pos:start="193:13" pos:end="193:42"><type pos:start="193:13" pos:end="193:19"><name pos:start="193:13" pos:end="193:19">int16_t</name></type> <name pos:start="193:21" pos:end="193:24">diff</name> <init pos:start="193:26" pos:end="193:42">= <expr pos:start="193:28" pos:end="193:42"><operator pos:start="193:28" pos:end="193:28">(</operator><name pos:start="193:29" pos:end="193:29">n</name> <operator pos:start="193:31" pos:end="193:31">&amp;</operator> <literal type="number" pos:start="193:33" pos:end="193:36">0xFC</literal><operator pos:start="193:37" pos:end="193:37">)</operator> <operator pos:start="193:39" pos:end="193:40">&lt;&lt;</operator> <literal type="number" pos:start="193:42" pos:end="193:42">8</literal></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="195:13" pos:end="201:43"><if pos:start="195:13" pos:end="197:28">if <condition pos:start="195:16" pos:end="195:32">(<expr pos:start="195:17" pos:end="195:31"><operator pos:start="195:17" pos:end="195:17">(</operator><name pos:start="195:18" pos:end="195:18">n</name> <operator pos:start="195:20" pos:end="195:20">&amp;</operator> <literal type="number" pos:start="195:22" pos:end="195:25">0x03</literal><operator pos:start="195:26" pos:end="195:26">)</operator> <operator pos:start="195:28" pos:end="195:29">==</operator> <literal type="number" pos:start="195:31" pos:end="195:31">3</literal></expr>)</condition><block type="pseudo" pos:start="197:17" pos:end="197:28"><block_content pos:start="197:17" pos:end="197:28">

                <expr_stmt pos:start="197:17" pos:end="197:28"><expr pos:start="197:17" pos:end="197:27"><name pos:start="197:17" pos:end="197:25"><name pos:start="197:17" pos:end="197:21">shift</name><index pos:start="197:22" pos:end="197:25">[<expr pos:start="197:23" pos:end="197:24"><name pos:start="197:23" pos:end="197:24">ch</name></expr>]</index></name><operator pos:start="197:26" pos:end="197:27">++</operator></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="199:13" pos:end="201:43">else<block type="pseudo" pos:start="201:17" pos:end="201:43"><block_content pos:start="201:17" pos:end="201:43">

                <expr_stmt pos:start="201:17" pos:end="201:43"><expr pos:start="201:17" pos:end="201:42"><name pos:start="201:17" pos:end="201:25"><name pos:start="201:17" pos:end="201:21">shift</name><index pos:start="201:22" pos:end="201:25">[<expr pos:start="201:23" pos:end="201:24"><name pos:start="201:23" pos:end="201:24">ch</name></expr>]</index></name> <operator pos:start="201:27" pos:end="201:28">-=</operator> <operator pos:start="201:30" pos:end="201:30">(</operator><literal type="number" pos:start="201:31" pos:end="201:31">2</literal> <operator pos:start="201:33" pos:end="201:33">*</operator> <operator pos:start="201:35" pos:end="201:35">(</operator><name pos:start="201:36" pos:end="201:36">n</name> <operator pos:start="201:38" pos:end="201:38">&amp;</operator> <literal type="number" pos:start="201:40" pos:end="201:40">3</literal><operator pos:start="201:41" pos:end="201:41">)</operator><operator pos:start="201:42" pos:end="201:42">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <comment type="block" pos:start="203:13" pos:end="203:60">/* saturate the shifter to a lower limit of 0 */</comment>

            <if_stmt pos:start="205:13" pos:end="207:30"><if pos:start="205:13" pos:end="207:30">if <condition pos:start="205:16" pos:end="205:30">(<expr pos:start="205:17" pos:end="205:29"><name pos:start="205:17" pos:end="205:25"><name pos:start="205:17" pos:end="205:21">shift</name><index pos:start="205:22" pos:end="205:25">[<expr pos:start="205:23" pos:end="205:24"><name pos:start="205:23" pos:end="205:24">ch</name></expr>]</index></name> <operator pos:start="205:27" pos:end="205:27">&lt;</operator> <literal type="number" pos:start="205:29" pos:end="205:29">0</literal></expr>)</condition><block type="pseudo" pos:start="207:17" pos:end="207:30"><block_content pos:start="207:17" pos:end="207:30">

                <expr_stmt pos:start="207:17" pos:end="207:30"><expr pos:start="207:17" pos:end="207:29"><name pos:start="207:17" pos:end="207:25"><name pos:start="207:17" pos:end="207:21">shift</name><index pos:start="207:22" pos:end="207:25">[<expr pos:start="207:23" pos:end="207:24"><name pos:start="207:23" pos:end="207:24">ch</name></expr>]</index></name> <operator pos:start="207:27" pos:end="207:27">=</operator> <literal type="number" pos:start="207:29" pos:end="207:29">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="211:13" pos:end="211:31"><expr pos:start="211:13" pos:end="211:30"><name pos:start="211:13" pos:end="211:16">diff</name> <operator pos:start="211:18" pos:end="211:20">&gt;&gt;=</operator> <name pos:start="211:22" pos:end="211:30"><name pos:start="211:22" pos:end="211:26">shift</name><index pos:start="211:27" pos:end="211:30">[<expr pos:start="211:28" pos:end="211:29"><name pos:start="211:28" pos:end="211:29">ch</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="213:13" pos:end="213:34"><expr pos:start="213:13" pos:end="213:33"><name pos:start="213:13" pos:end="213:25"><name pos:start="213:13" pos:end="213:21">predictor</name><index pos:start="213:22" pos:end="213:25">[<expr pos:start="213:23" pos:end="213:24"><name pos:start="213:23" pos:end="213:24">ch</name></expr>]</index></name> <operator pos:start="213:27" pos:end="213:28">+=</operator> <name pos:start="213:30" pos:end="213:33">diff</name></expr>;</expr_stmt>



            <expr_stmt pos:start="217:13" pos:end="217:57"><expr pos:start="217:13" pos:end="217:56"><name pos:start="217:13" pos:end="217:25"><name pos:start="217:13" pos:end="217:21">predictor</name><index pos:start="217:22" pos:end="217:25">[<expr pos:start="217:23" pos:end="217:24"><name pos:start="217:23" pos:end="217:24">ch</name></expr>]</index></name> <operator pos:start="217:27" pos:end="217:27">=</operator> <call pos:start="217:29" pos:end="217:56"><name pos:start="217:29" pos:end="217:41">av_clip_int16</name><argument_list pos:start="217:42" pos:end="217:56">(<argument pos:start="217:43" pos:end="217:55"><expr pos:start="217:43" pos:end="217:55"><name pos:start="217:43" pos:end="217:55"><name pos:start="217:43" pos:end="217:51">predictor</name><index pos:start="217:52" pos:end="217:55">[<expr pos:start="217:53" pos:end="217:54"><name pos:start="217:53" pos:end="217:54">ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="219:13" pos:end="219:46"><expr pos:start="219:13" pos:end="219:45"><operator pos:start="219:13" pos:end="219:13">*</operator><name pos:start="219:14" pos:end="219:27">output_samples</name><operator pos:start="219:28" pos:end="219:29">++</operator> <operator pos:start="219:31" pos:end="219:31">=</operator> <name pos:start="219:33" pos:end="219:45"><name pos:start="219:33" pos:end="219:41">predictor</name><index pos:start="219:42" pos:end="219:45">[<expr pos:start="219:43" pos:end="219:44"><name pos:start="219:43" pos:end="219:44">ch</name></expr>]</index></name></expr>;</expr_stmt>



            <comment type="block" pos:start="223:13" pos:end="223:32">/* toggle channel */</comment>

            <expr_stmt pos:start="225:13" pos:end="225:25"><expr pos:start="225:13" pos:end="225:24"><name pos:start="225:13" pos:end="225:14">ch</name> <operator pos:start="225:16" pos:end="225:17">^=</operator> <name pos:start="225:19" pos:end="225:24">stereo</name></expr>;</expr_stmt>

        </block_content>}</block></while>

        <break pos:start="229:9" pos:end="229:14">break;</break>

    </block_content>}</block>

    <case pos:start="233:5" pos:end="233:27">case <expr pos:start="233:10" pos:end="233:26"><name pos:start="233:10" pos:end="233:26">CODEC_ID_SOL_DPCM</name></expr>:</case>

        <if_stmt pos:start="235:9" pos:end="281:9"><if pos:start="235:9" pos:end="261:9">if <condition pos:start="235:12" pos:end="235:34">(<expr pos:start="235:13" pos:end="235:33"><name pos:start="235:13" pos:end="235:28"><name pos:start="235:13" pos:end="235:17">avctx</name><operator pos:start="235:18" pos:end="235:19">-&gt;</operator><name pos:start="235:20" pos:end="235:28">codec_tag</name></name> <operator pos:start="235:30" pos:end="235:31">!=</operator> <literal type="number" pos:start="235:33" pos:end="235:33">3</literal></expr>)</condition> <block pos:start="235:36" pos:end="261:9">{<block_content pos:start="237:13" pos:end="259:13">

            <decl_stmt pos:start="237:13" pos:end="237:46"><decl pos:start="237:13" pos:end="237:45"><type pos:start="237:13" pos:end="237:21"><name pos:start="237:13" pos:end="237:19">uint8_t</name> <modifier pos:start="237:21" pos:end="237:21">*</modifier></type><name pos:start="237:22" pos:end="237:38">output_samples_u8</name> <init pos:start="237:40" pos:end="237:45">= <expr pos:start="237:42" pos:end="237:45"><name pos:start="237:42" pos:end="237:45">data</name></expr></init></decl>;</decl_stmt>

            <while pos:start="239:13" pos:end="259:13">while <condition pos:start="239:19" pos:end="239:33">(<expr pos:start="239:20" pos:end="239:32"><name pos:start="239:20" pos:end="239:22">buf</name> <operator pos:start="239:24" pos:end="239:24">&lt;</operator> <name pos:start="239:26" pos:end="239:32">buf_end</name></expr>)</condition> <block pos:start="239:35" pos:end="259:13">{<block_content pos:start="241:17" pos:end="257:57">

                <decl_stmt pos:start="241:17" pos:end="241:35"><decl pos:start="241:17" pos:end="241:34"><type pos:start="241:17" pos:end="241:23"><name pos:start="241:17" pos:end="241:23">uint8_t</name></type> <name pos:start="241:25" pos:end="241:25">n</name> <init pos:start="241:27" pos:end="241:34">= <expr pos:start="241:29" pos:end="241:34"><operator pos:start="241:29" pos:end="241:29">*</operator><name pos:start="241:30" pos:end="241:32">buf</name><operator pos:start="241:33" pos:end="241:34">++</operator></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="245:17" pos:end="245:53"><expr pos:start="245:17" pos:end="245:52"><name pos:start="245:17" pos:end="245:28"><name pos:start="245:17" pos:end="245:17">s</name><operator pos:start="245:18" pos:end="245:19">-&gt;</operator><name pos:start="245:20" pos:end="245:25">sample</name><index pos:start="245:26" pos:end="245:28">[<expr pos:start="245:27" pos:end="245:27"><literal type="number" pos:start="245:27" pos:end="245:27">0</literal></expr>]</index></name> <operator pos:start="245:30" pos:end="245:31">+=</operator> <name pos:start="245:33" pos:end="245:52"><name pos:start="245:33" pos:end="245:33">s</name><operator pos:start="245:34" pos:end="245:35">-&gt;</operator><name pos:start="245:36" pos:end="245:44">sol_table</name><index pos:start="245:45" pos:end="245:52">[<expr pos:start="245:46" pos:end="245:51"><name pos:start="245:46" pos:end="245:46">n</name> <operator pos:start="245:48" pos:end="245:49">&gt;&gt;</operator> <literal type="number" pos:start="245:51" pos:end="245:51">4</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="247:17" pos:end="247:60"><expr pos:start="247:17" pos:end="247:59"><name pos:start="247:17" pos:end="247:28"><name pos:start="247:17" pos:end="247:17">s</name><operator pos:start="247:18" pos:end="247:19">-&gt;</operator><name pos:start="247:20" pos:end="247:25">sample</name><index pos:start="247:26" pos:end="247:28">[<expr pos:start="247:27" pos:end="247:27"><literal type="number" pos:start="247:27" pos:end="247:27">0</literal></expr>]</index></name>  <operator pos:start="247:31" pos:end="247:31">=</operator> <call pos:start="247:33" pos:end="247:59"><name pos:start="247:33" pos:end="247:45">av_clip_uint8</name><argument_list pos:start="247:46" pos:end="247:59">(<argument pos:start="247:47" pos:end="247:58"><expr pos:start="247:47" pos:end="247:58"><name pos:start="247:47" pos:end="247:58"><name pos:start="247:47" pos:end="247:47">s</name><operator pos:start="247:48" pos:end="247:49">-&gt;</operator><name pos:start="247:50" pos:end="247:55">sample</name><index pos:start="247:56" pos:end="247:58">[<expr pos:start="247:57" pos:end="247:57"><literal type="number" pos:start="247:57" pos:end="247:57">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="249:17" pos:end="249:52"><expr pos:start="249:17" pos:end="249:51"><operator pos:start="249:17" pos:end="249:17">*</operator><name pos:start="249:18" pos:end="249:34">output_samples_u8</name><operator pos:start="249:35" pos:end="249:36">++</operator> <operator pos:start="249:38" pos:end="249:38">=</operator> <name pos:start="249:40" pos:end="249:51"><name pos:start="249:40" pos:end="249:40">s</name><operator pos:start="249:41" pos:end="249:42">-&gt;</operator><name pos:start="249:43" pos:end="249:48">sample</name><index pos:start="249:49" pos:end="249:51">[<expr pos:start="249:50" pos:end="249:50"><literal type="number" pos:start="249:50" pos:end="249:50">0</literal></expr>]</index></name></expr>;</expr_stmt>



                <expr_stmt pos:start="253:17" pos:end="253:60"><expr pos:start="253:17" pos:end="253:59"><name pos:start="253:17" pos:end="253:33"><name pos:start="253:17" pos:end="253:17">s</name><operator pos:start="253:18" pos:end="253:19">-&gt;</operator><name pos:start="253:20" pos:end="253:25">sample</name><index pos:start="253:26" pos:end="253:33">[<expr pos:start="253:27" pos:end="253:32"><name pos:start="253:27" pos:end="253:32">stereo</name></expr>]</index></name> <operator pos:start="253:35" pos:end="253:36">+=</operator> <name pos:start="253:38" pos:end="253:59"><name pos:start="253:38" pos:end="253:38">s</name><operator pos:start="253:39" pos:end="253:40">-&gt;</operator><name pos:start="253:41" pos:end="253:49">sol_table</name><index pos:start="253:50" pos:end="253:59">[<expr pos:start="253:51" pos:end="253:58"><name pos:start="253:51" pos:end="253:51">n</name> <operator pos:start="253:53" pos:end="253:53">&amp;</operator> <literal type="number" pos:start="253:55" pos:end="253:58">0x0F</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="255:17" pos:end="255:70"><expr pos:start="255:17" pos:end="255:69"><name pos:start="255:17" pos:end="255:33"><name pos:start="255:17" pos:end="255:17">s</name><operator pos:start="255:18" pos:end="255:19">-&gt;</operator><name pos:start="255:20" pos:end="255:25">sample</name><index pos:start="255:26" pos:end="255:33">[<expr pos:start="255:27" pos:end="255:32"><name pos:start="255:27" pos:end="255:32">stereo</name></expr>]</index></name>  <operator pos:start="255:36" pos:end="255:36">=</operator> <call pos:start="255:38" pos:end="255:69"><name pos:start="255:38" pos:end="255:50">av_clip_uint8</name><argument_list pos:start="255:51" pos:end="255:69">(<argument pos:start="255:52" pos:end="255:68"><expr pos:start="255:52" pos:end="255:68"><name pos:start="255:52" pos:end="255:68"><name pos:start="255:52" pos:end="255:52">s</name><operator pos:start="255:53" pos:end="255:54">-&gt;</operator><name pos:start="255:55" pos:end="255:60">sample</name><index pos:start="255:61" pos:end="255:68">[<expr pos:start="255:62" pos:end="255:67"><name pos:start="255:62" pos:end="255:67">stereo</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="257:17" pos:end="257:57"><expr pos:start="257:17" pos:end="257:56"><operator pos:start="257:17" pos:end="257:17">*</operator><name pos:start="257:18" pos:end="257:34">output_samples_u8</name><operator pos:start="257:35" pos:end="257:36">++</operator> <operator pos:start="257:38" pos:end="257:38">=</operator> <name pos:start="257:40" pos:end="257:56"><name pos:start="257:40" pos:end="257:40">s</name><operator pos:start="257:41" pos:end="257:42">-&gt;</operator><name pos:start="257:43" pos:end="257:48">sample</name><index pos:start="257:49" pos:end="257:56">[<expr pos:start="257:50" pos:end="257:55"><name pos:start="257:50" pos:end="257:55">stereo</name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></while>

        </block_content>}</block></if> <else pos:start="261:11" pos:end="281:9">else <block pos:start="261:16" pos:end="281:9">{<block_content pos:start="263:13" pos:end="279:13">

            <while pos:start="263:13" pos:end="279:13">while <condition pos:start="263:19" pos:end="263:33">(<expr pos:start="263:20" pos:end="263:32"><name pos:start="263:20" pos:end="263:22">buf</name> <operator pos:start="263:24" pos:end="263:24">&lt;</operator> <name pos:start="263:26" pos:end="263:32">buf_end</name></expr>)</condition> <block pos:start="263:35" pos:end="279:13">{<block_content pos:start="265:17" pos:end="277:29">

                <decl_stmt pos:start="265:17" pos:end="265:35"><decl pos:start="265:17" pos:end="265:34"><type pos:start="265:17" pos:end="265:23"><name pos:start="265:17" pos:end="265:23">uint8_t</name></type> <name pos:start="265:25" pos:end="265:25">n</name> <init pos:start="265:27" pos:end="265:34">= <expr pos:start="265:29" pos:end="265:34"><operator pos:start="265:29" pos:end="265:29">*</operator><name pos:start="265:30" pos:end="265:32">buf</name><operator pos:start="265:33" pos:end="265:34">++</operator></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="267:17" pos:end="269:70"><if pos:start="267:17" pos:end="267:70">if <condition pos:start="267:20" pos:end="267:29">(<expr pos:start="267:21" pos:end="267:28"><name pos:start="267:21" pos:end="267:21">n</name> <operator pos:start="267:23" pos:end="267:23">&amp;</operator> <literal type="number" pos:start="267:25" pos:end="267:28">0x80</literal></expr>)</condition><block type="pseudo" pos:start="267:31" pos:end="267:70"><block_content pos:start="267:31" pos:end="267:70"> <expr_stmt pos:start="267:31" pos:end="267:70"><expr pos:start="267:31" pos:end="267:69"><name pos:start="267:31" pos:end="267:43"><name pos:start="267:31" pos:end="267:31">s</name><operator pos:start="267:32" pos:end="267:33">-&gt;</operator><name pos:start="267:34" pos:end="267:39">sample</name><index pos:start="267:40" pos:end="267:43">[<expr pos:start="267:41" pos:end="267:42"><name pos:start="267:41" pos:end="267:42">ch</name></expr>]</index></name> <operator pos:start="267:45" pos:end="267:46">-=</operator> <name pos:start="267:48" pos:end="267:69"><name pos:start="267:48" pos:end="267:59">sol_table_16</name><index pos:start="267:60" pos:end="267:69">[<expr pos:start="267:61" pos:end="267:68"><name pos:start="267:61" pos:end="267:61">n</name> <operator pos:start="267:63" pos:end="267:63">&amp;</operator> <literal type="number" pos:start="267:65" pos:end="267:68">0x7F</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="269:17" pos:end="269:70">else<block type="pseudo" pos:start="269:31" pos:end="269:70"><block_content pos:start="269:31" pos:end="269:70">          <expr_stmt pos:start="269:31" pos:end="269:70"><expr pos:start="269:31" pos:end="269:69"><name pos:start="269:31" pos:end="269:43"><name pos:start="269:31" pos:end="269:31">s</name><operator pos:start="269:32" pos:end="269:33">-&gt;</operator><name pos:start="269:34" pos:end="269:39">sample</name><index pos:start="269:40" pos:end="269:43">[<expr pos:start="269:41" pos:end="269:42"><name pos:start="269:41" pos:end="269:42">ch</name></expr>]</index></name> <operator pos:start="269:45" pos:end="269:46">+=</operator> <name pos:start="269:48" pos:end="269:69"><name pos:start="269:48" pos:end="269:59">sol_table_16</name><index pos:start="269:60" pos:end="269:69">[<expr pos:start="269:61" pos:end="269:68"><name pos:start="269:61" pos:end="269:61">n</name> <operator pos:start="269:63" pos:end="269:63">&amp;</operator> <literal type="number" pos:start="269:65" pos:end="269:68">0x7F</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="271:17" pos:end="271:61"><expr pos:start="271:17" pos:end="271:60"><name pos:start="271:17" pos:end="271:29"><name pos:start="271:17" pos:end="271:17">s</name><operator pos:start="271:18" pos:end="271:19">-&gt;</operator><name pos:start="271:20" pos:end="271:25">sample</name><index pos:start="271:26" pos:end="271:29">[<expr pos:start="271:27" pos:end="271:28"><name pos:start="271:27" pos:end="271:28">ch</name></expr>]</index></name> <operator pos:start="271:31" pos:end="271:31">=</operator> <call pos:start="271:33" pos:end="271:60"><name pos:start="271:33" pos:end="271:45">av_clip_int16</name><argument_list pos:start="271:46" pos:end="271:60">(<argument pos:start="271:47" pos:end="271:59"><expr pos:start="271:47" pos:end="271:59"><name pos:start="271:47" pos:end="271:59"><name pos:start="271:47" pos:end="271:47">s</name><operator pos:start="271:48" pos:end="271:49">-&gt;</operator><name pos:start="271:50" pos:end="271:55">sample</name><index pos:start="271:56" pos:end="271:59">[<expr pos:start="271:57" pos:end="271:58"><name pos:start="271:57" pos:end="271:58">ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="273:17" pos:end="273:50"><expr pos:start="273:17" pos:end="273:49"><operator pos:start="273:17" pos:end="273:17">*</operator><name pos:start="273:18" pos:end="273:31">output_samples</name><operator pos:start="273:32" pos:end="273:33">++</operator> <operator pos:start="273:35" pos:end="273:35">=</operator> <name pos:start="273:37" pos:end="273:49"><name pos:start="273:37" pos:end="273:37">s</name><operator pos:start="273:38" pos:end="273:39">-&gt;</operator><name pos:start="273:40" pos:end="273:45">sample</name><index pos:start="273:46" pos:end="273:49">[<expr pos:start="273:47" pos:end="273:48"><name pos:start="273:47" pos:end="273:48">ch</name></expr>]</index></name></expr>;</expr_stmt>

                <comment type="block" pos:start="275:17" pos:end="275:36">/* toggle channel */</comment>

                <expr_stmt pos:start="277:17" pos:end="277:29"><expr pos:start="277:17" pos:end="277:28"><name pos:start="277:17" pos:end="277:18">ch</name> <operator pos:start="277:20" pos:end="277:21">^=</operator> <name pos:start="277:23" pos:end="277:28">stereo</name></expr>;</expr_stmt>

            </block_content>}</block></while>

        </block_content>}</block></else></if_stmt>

        <break pos:start="283:9" pos:end="283:14">break;</break>

    </block_content>}</block></switch>



    <expr_stmt pos:start="289:5" pos:end="289:25"><expr pos:start="289:5" pos:end="289:24"><operator pos:start="289:5" pos:end="289:5">*</operator><name pos:start="289:6" pos:end="289:18">got_frame_ptr</name>   <operator pos:start="289:22" pos:end="289:22">=</operator> <literal type="number" pos:start="289:24" pos:end="289:24">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="291:5" pos:end="291:32"><expr pos:start="291:5" pos:end="291:31"><operator pos:start="291:5" pos:end="291:5">*</operator><operator pos:start="291:6" pos:end="291:6">(</operator><name pos:start="291:7" pos:end="291:13">AVFrame</name> <operator pos:start="291:15" pos:end="291:15">*</operator><operator pos:start="291:16" pos:end="291:16">)</operator><name pos:start="291:17" pos:end="291:20">data</name> <operator pos:start="291:22" pos:end="291:22">=</operator> <name pos:start="291:24" pos:end="291:31"><name pos:start="291:24" pos:end="291:24">s</name><operator pos:start="291:25" pos:end="291:26">-&gt;</operator><name pos:start="291:27" pos:end="291:31">frame</name></name></expr>;</expr_stmt>



    <return pos:start="295:5" pos:end="295:20">return <expr pos:start="295:12" pos:end="295:19"><name pos:start="295:12" pos:end="295:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
