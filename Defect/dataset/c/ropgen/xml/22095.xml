<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22095.c" pos:tabs="8"><function pos:start="1:1" pos:end="215:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:46">decode_picture_parameter_set</name><parameter_list pos:start="1:47" pos:end="1:78">(<parameter pos:start="1:48" pos:end="1:61"><decl pos:start="1:48" pos:end="1:61"><type pos:start="1:48" pos:end="1:61"><name pos:start="1:48" pos:end="1:58">H264Context</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:61">h</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:77"><decl pos:start="1:64" pos:end="1:77"><type pos:start="1:64" pos:end="1:77"><name pos:start="1:64" pos:end="1:66">int</name></type> <name pos:start="1:68" pos:end="1:77">bit_length</name></decl></parameter>)</parameter_list><block pos:start="1:79" pos:end="215:1">{<block_content pos:start="3:5" pos:end="213:13">

    <decl_stmt pos:start="3:5" pos:end="3:37"><decl pos:start="3:5" pos:end="3:36"><type pos:start="3:5" pos:end="3:26"><name pos:start="3:5" pos:end="3:18">MpegEncContext</name> <modifier pos:start="3:20" pos:end="3:20">*</modifier> <specifier pos:start="3:22" pos:end="3:26">const</specifier></type> <name pos:start="3:28" pos:end="3:28">s</name> <init pos:start="3:30" pos:end="3:36">= <expr pos:start="3:32" pos:end="3:36"><operator pos:start="3:32" pos:end="3:32">&amp;</operator><name pos:start="3:33" pos:end="3:36"><name pos:start="3:33" pos:end="3:33">h</name><operator pos:start="3:34" pos:end="3:35">-&gt;</operator><name pos:start="3:36" pos:end="3:36">s</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:52"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:16">int</name></type> <name pos:start="5:18" pos:end="5:20">tmp</name></decl>, <decl pos:start="5:23" pos:end="5:51"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:23" pos:end="5:28">pps_id</name><init pos:start="5:29" pos:end="5:51">= <expr pos:start="5:31" pos:end="5:51"><call pos:start="5:31" pos:end="5:51"><name pos:start="5:31" pos:end="5:43">get_ue_golomb</name><argument_list pos:start="5:44" pos:end="5:51">(<argument pos:start="5:45" pos:end="5:50"><expr pos:start="5:45" pos:end="5:50"><operator pos:start="5:45" pos:end="5:45">&amp;</operator><name pos:start="5:46" pos:end="5:50"><name pos:start="5:46" pos:end="5:46">s</name><operator pos:start="5:47" pos:end="5:48">-&gt;</operator><name pos:start="5:49" pos:end="5:50">gb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:13"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:9"><name pos:start="7:5" pos:end="7:7">PPS</name> <modifier pos:start="7:9" pos:end="7:9">*</modifier></type><name pos:start="7:10" pos:end="7:12">pps</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:101"><expr pos:start="11:5" pos:end="11:100"><name pos:start="11:5" pos:end="11:7">pps</name> <operator pos:start="11:9" pos:end="11:9">=</operator> <call pos:start="11:11" pos:end="11:100"><name pos:start="11:11" pos:end="11:29">alloc_parameter_set</name><argument_list pos:start="11:30" pos:end="11:100">(<argument pos:start="11:31" pos:end="11:31"><expr pos:start="11:31" pos:end="11:31"><name pos:start="11:31" pos:end="11:31">h</name></expr></argument>, <argument pos:start="11:34" pos:end="11:56"><expr pos:start="11:34" pos:end="11:56"><operator pos:start="11:34" pos:end="11:34">(</operator><name pos:start="11:35" pos:end="11:38">void</name> <operator pos:start="11:40" pos:end="11:40">*</operator><operator pos:start="11:41" pos:end="11:41">*</operator><operator pos:start="11:42" pos:end="11:42">)</operator><name pos:start="11:43" pos:end="11:56"><name pos:start="11:43" pos:end="11:43">h</name><operator pos:start="11:44" pos:end="11:45">-&gt;</operator><name pos:start="11:46" pos:end="11:56">pps_buffers</name></name></expr></argument>, <argument pos:start="11:59" pos:end="11:64"><expr pos:start="11:59" pos:end="11:64"><name pos:start="11:59" pos:end="11:64">pps_id</name></expr></argument>, <argument pos:start="11:67" pos:end="11:79"><expr pos:start="11:67" pos:end="11:79"><name pos:start="11:67" pos:end="11:79">MAX_PPS_COUNT</name></expr></argument>, <argument pos:start="11:82" pos:end="11:92"><expr pos:start="11:82" pos:end="11:92"><sizeof pos:start="11:82" pos:end="11:92">sizeof<argument_list pos:start="11:88" pos:end="11:92">(<argument pos:start="11:89" pos:end="11:91"><expr pos:start="11:89" pos:end="11:91"><name pos:start="11:89" pos:end="11:91">PPS</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="11:95" pos:end="11:99"><expr pos:start="11:95" pos:end="11:99"><literal type="string" pos:start="11:95" pos:end="11:99">"pps"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="13:5" pos:end="15:18"><if pos:start="13:5" pos:end="15:18">if<condition pos:start="13:7" pos:end="13:19">(<expr pos:start="13:8" pos:end="13:18"><name pos:start="13:8" pos:end="13:10">pps</name> <operator pos:start="13:12" pos:end="13:13">==</operator> <name pos:start="13:15" pos:end="13:18">NULL</name></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:18"><block_content pos:start="15:9" pos:end="15:18">

        <return pos:start="15:9" pos:end="15:18">return <expr pos:start="15:16" pos:end="15:17"><operator pos:start="15:16" pos:end="15:16">-</operator><literal type="number" pos:start="15:17" pos:end="15:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:31"><expr pos:start="19:5" pos:end="19:30"><name pos:start="19:5" pos:end="19:7">tmp</name><operator pos:start="19:8" pos:end="19:8">=</operator> <call pos:start="19:10" pos:end="19:30"><name pos:start="19:10" pos:end="19:22">get_ue_golomb</name><argument_list pos:start="19:23" pos:end="19:30">(<argument pos:start="19:24" pos:end="19:29"><expr pos:start="19:24" pos:end="19:29"><operator pos:start="19:24" pos:end="19:24">&amp;</operator><name pos:start="19:25" pos:end="19:29"><name pos:start="19:25" pos:end="19:25">s</name><operator pos:start="19:26" pos:end="19:27">-&gt;</operator><name pos:start="19:28" pos:end="19:29">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if<condition pos:start="21:7" pos:end="21:57">(<expr pos:start="21:8" pos:end="21:56"><name pos:start="21:8" pos:end="21:10">tmp</name><operator pos:start="21:11" pos:end="21:12">&gt;=</operator><name pos:start="21:13" pos:end="21:25">MAX_SPS_COUNT</name> <operator pos:start="21:27" pos:end="21:28">||</operator> <name pos:start="21:30" pos:end="21:48"><name pos:start="21:30" pos:end="21:30">h</name><operator pos:start="21:31" pos:end="21:32">-&gt;</operator><name pos:start="21:33" pos:end="21:43">sps_buffers</name><index pos:start="21:44" pos:end="21:48">[<expr pos:start="21:45" pos:end="21:47"><name pos:start="21:45" pos:end="21:47">tmp</name></expr>]</index></name> <operator pos:start="21:50" pos:end="21:51">==</operator> <name pos:start="21:53" pos:end="21:56">NULL</name></expr>)</condition><block pos:start="21:58" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:18">

        <expr_stmt pos:start="23:9" pos:end="23:66"><expr pos:start="23:9" pos:end="23:65"><call pos:start="23:9" pos:end="23:65"><name pos:start="23:9" pos:end="23:14">av_log</name><argument_list pos:start="23:15" pos:end="23:65">(<argument pos:start="23:16" pos:end="23:25"><expr pos:start="23:16" pos:end="23:25"><name pos:start="23:16" pos:end="23:25"><name pos:start="23:16" pos:end="23:16">h</name><operator pos:start="23:17" pos:end="23:18">-&gt;</operator><name pos:start="23:19" pos:end="23:19">s</name><operator pos:start="23:20" pos:end="23:20">.</operator><name pos:start="23:21" pos:end="23:25">avctx</name></name></expr></argument>, <argument pos:start="23:28" pos:end="23:39"><expr pos:start="23:28" pos:end="23:39"><name pos:start="23:28" pos:end="23:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="23:42" pos:end="23:64"><expr pos:start="23:42" pos:end="23:64"><literal type="string" pos:start="23:42" pos:end="23:64">"sps_id out of range\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:18">return <expr pos:start="25:16" pos:end="25:17"><operator pos:start="25:16" pos:end="25:16">-</operator><literal type="number" pos:start="25:17" pos:end="25:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:21"><expr pos:start="29:5" pos:end="29:20"><name pos:start="29:5" pos:end="29:15"><name pos:start="29:5" pos:end="29:7">pps</name><operator pos:start="29:8" pos:end="29:9">-&gt;</operator><name pos:start="29:10" pos:end="29:15">sps_id</name></name><operator pos:start="29:16" pos:end="29:16">=</operator> <name pos:start="29:18" pos:end="29:20">tmp</name></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:34"><expr pos:start="33:5" pos:end="33:33"><name pos:start="33:5" pos:end="33:14"><name pos:start="33:5" pos:end="33:7">pps</name><operator pos:start="33:8" pos:end="33:9">-&gt;</operator><name pos:start="33:10" pos:end="33:14">cabac</name></name><operator pos:start="33:15" pos:end="33:15">=</operator> <call pos:start="33:17" pos:end="33:33"><name pos:start="33:17" pos:end="33:25">get_bits1</name><argument_list pos:start="33:26" pos:end="33:33">(<argument pos:start="33:27" pos:end="33:32"><expr pos:start="33:27" pos:end="33:32"><operator pos:start="33:27" pos:end="33:27">&amp;</operator><name pos:start="33:28" pos:end="33:32"><name pos:start="33:28" pos:end="33:28">s</name><operator pos:start="33:29" pos:end="33:30">-&gt;</operator><name pos:start="33:31" pos:end="33:32">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:46"><expr pos:start="35:5" pos:end="35:45"><name pos:start="35:5" pos:end="35:26"><name pos:start="35:5" pos:end="35:7">pps</name><operator pos:start="35:8" pos:end="35:9">-&gt;</operator><name pos:start="35:10" pos:end="35:26">pic_order_present</name></name><operator pos:start="35:27" pos:end="35:27">=</operator> <call pos:start="35:29" pos:end="35:45"><name pos:start="35:29" pos:end="35:37">get_bits1</name><argument_list pos:start="35:38" pos:end="35:45">(<argument pos:start="35:39" pos:end="35:44"><expr pos:start="35:39" pos:end="35:44"><operator pos:start="35:39" pos:end="35:39">&amp;</operator><name pos:start="35:40" pos:end="35:44"><name pos:start="35:40" pos:end="35:40">s</name><operator pos:start="35:41" pos:end="35:42">-&gt;</operator><name pos:start="35:43" pos:end="35:44">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:54"><expr pos:start="37:5" pos:end="37:53"><name pos:start="37:5" pos:end="37:26"><name pos:start="37:5" pos:end="37:7">pps</name><operator pos:start="37:8" pos:end="37:9">-&gt;</operator><name pos:start="37:10" pos:end="37:26">slice_group_count</name></name><operator pos:start="37:27" pos:end="37:27">=</operator> <call pos:start="37:29" pos:end="37:49"><name pos:start="37:29" pos:end="37:41">get_ue_golomb</name><argument_list pos:start="37:42" pos:end="37:49">(<argument pos:start="37:43" pos:end="37:48"><expr pos:start="37:43" pos:end="37:48"><operator pos:start="37:43" pos:end="37:43">&amp;</operator><name pos:start="37:44" pos:end="37:48"><name pos:start="37:44" pos:end="37:44">s</name><operator pos:start="37:45" pos:end="37:46">-&gt;</operator><name pos:start="37:47" pos:end="37:48">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="37:51" pos:end="37:51">+</operator> <literal type="number" pos:start="37:53" pos:end="37:53">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="111:5"><if pos:start="39:5" pos:end="111:5">if<condition pos:start="39:7" pos:end="39:35">(<expr pos:start="39:8" pos:end="39:33"><name pos:start="39:8" pos:end="39:29"><name pos:start="39:8" pos:end="39:10">pps</name><operator pos:start="39:11" pos:end="39:12">-&gt;</operator><name pos:start="39:13" pos:end="39:29">slice_group_count</name></name> <operator pos:start="39:31" pos:end="39:31">&gt;</operator> <literal type="number" pos:start="39:33" pos:end="39:33">1</literal></expr> )</condition><block pos:start="39:36" pos:end="111:5">{<block_content pos:start="41:9" pos:end="109:9">

        <expr_stmt pos:start="41:9" pos:end="41:60"><expr pos:start="41:9" pos:end="41:59"><name pos:start="41:9" pos:end="41:36"><name pos:start="41:9" pos:end="41:11">pps</name><operator pos:start="41:12" pos:end="41:13">-&gt;</operator><name pos:start="41:14" pos:end="41:36">mb_slice_group_map_type</name></name><operator pos:start="41:37" pos:end="41:37">=</operator> <call pos:start="41:39" pos:end="41:59"><name pos:start="41:39" pos:end="41:51">get_ue_golomb</name><argument_list pos:start="41:52" pos:end="41:59">(<argument pos:start="41:53" pos:end="41:58"><expr pos:start="41:53" pos:end="41:58"><operator pos:start="41:53" pos:end="41:53">&amp;</operator><name pos:start="41:54" pos:end="41:58"><name pos:start="41:54" pos:end="41:54">s</name><operator pos:start="41:55" pos:end="41:56">-&gt;</operator><name pos:start="41:57" pos:end="41:58">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:64"><expr pos:start="43:9" pos:end="43:63"><call pos:start="43:9" pos:end="43:63"><name pos:start="43:9" pos:end="43:14">av_log</name><argument_list pos:start="43:15" pos:end="43:63">(<argument pos:start="43:16" pos:end="43:25"><expr pos:start="43:16" pos:end="43:25"><name pos:start="43:16" pos:end="43:25"><name pos:start="43:16" pos:end="43:16">h</name><operator pos:start="43:17" pos:end="43:18">-&gt;</operator><name pos:start="43:19" pos:end="43:19">s</name><operator pos:start="43:20" pos:end="43:20">.</operator><name pos:start="43:21" pos:end="43:25">avctx</name></name></expr></argument>, <argument pos:start="43:28" pos:end="43:39"><expr pos:start="43:28" pos:end="43:39"><name pos:start="43:28" pos:end="43:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="43:42" pos:end="43:62"><expr pos:start="43:42" pos:end="43:62"><literal type="string" pos:start="43:42" pos:end="43:62">"FMO not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="45:9" pos:end="109:9">switch<condition pos:start="45:15" pos:end="45:44">(<expr pos:start="45:16" pos:end="45:43"><name pos:start="45:16" pos:end="45:43"><name pos:start="45:16" pos:end="45:18">pps</name><operator pos:start="45:19" pos:end="45:20">-&gt;</operator><name pos:start="45:21" pos:end="45:43">mb_slice_group_map_type</name></name></expr>)</condition><block pos:start="45:45" pos:end="109:9">{<block_content pos:start="47:9" pos:end="107:18">

        <case pos:start="47:9" pos:end="56:0">case <expr pos:start="47:14" pos:end="47:14"><literal type="number" pos:start="47:14" pos:end="47:14">0</literal></expr>:</case>

<cpp:if pos:start="49:1" pos:end="49:5">#<cpp:directive pos:start="49:2" pos:end="49:3">if</cpp:directive> <expr pos:start="49:5" pos:end="49:5"><literal type="number" pos:start="49:5" pos:end="49:5">0</literal></expr></cpp:if>

|   for( i = 0; i &lt;= num_slice_groups_minus1; i++ ) |   |        |

|    run_length[ i ]                                |1  |ue(v)   |

<cpp:endif pos:start="55:1" pos:end="55:6">#<cpp:directive pos:start="55:2" pos:end="55:6">endif</cpp:directive></cpp:endif>

            <break pos:start="57:13" pos:end="57:18">break;</break>

        <case pos:start="59:9" pos:end="74:0">case <expr pos:start="59:14" pos:end="59:14"><literal type="number" pos:start="59:14" pos:end="59:14">2</literal></expr>:</case>

<cpp:if pos:start="61:1" pos:end="61:5">#<cpp:directive pos:start="61:2" pos:end="61:3">if</cpp:directive> <expr pos:start="61:5" pos:end="61:5"><literal type="number" pos:start="61:5" pos:end="61:5">0</literal></expr></cpp:if>

|   for( i = 0; i &lt; num_slice_groups_minus1; i++ )  |   |        |

|{                                                  |   |        |

|    top_left_mb[ i ]                               |1  |ue(v)   |

|    bottom_right_mb[ i ]                           |1  |ue(v)   |

|   }                                               |   |        |

<cpp:endif pos:start="73:1" pos:end="73:6">#<cpp:directive pos:start="73:2" pos:end="73:6">endif</cpp:directive></cpp:endif>

            <break pos:start="75:13" pos:end="75:18">break;</break>

        <case pos:start="77:9" pos:end="77:15">case <expr pos:start="77:14" pos:end="77:14"><literal type="number" pos:start="77:14" pos:end="77:14">3</literal></expr>:</case>

        <case pos:start="79:9" pos:end="79:15">case <expr pos:start="79:14" pos:end="79:14"><literal type="number" pos:start="79:14" pos:end="79:14">4</literal></expr>:</case>

        <case pos:start="81:9" pos:end="90:0">case <expr pos:start="81:14" pos:end="81:14"><literal type="number" pos:start="81:14" pos:end="81:14">5</literal></expr>:</case>

<cpp:if pos:start="83:1" pos:end="83:5">#<cpp:directive pos:start="83:2" pos:end="83:3">if</cpp:directive> <expr pos:start="83:5" pos:end="83:5"><literal type="number" pos:start="83:5" pos:end="83:5">0</literal></expr></cpp:if>

|   slice_group_change_direction_flag               |1  |u(1)    |

|   slice_group_change_rate_minus1                  |1  |ue(v)   |

<cpp:endif pos:start="89:1" pos:end="89:6">#<cpp:directive pos:start="89:2" pos:end="89:6">endif</cpp:directive></cpp:endif>

            <break pos:start="91:13" pos:end="91:18">break;</break>

        <case pos:start="93:9" pos:end="106:0">case <expr pos:start="93:14" pos:end="93:14"><literal type="number" pos:start="93:14" pos:end="93:14">6</literal></expr>:</case>

<cpp:if pos:start="95:1" pos:end="95:5">#<cpp:directive pos:start="95:2" pos:end="95:3">if</cpp:directive> <expr pos:start="95:5" pos:end="95:5"><literal type="number" pos:start="95:5" pos:end="95:5">0</literal></expr></cpp:if>

|   slice_group_id_cnt_minus1                       |1  |ue(v)   |

|   for( i = 0; i &lt;= slice_group_id_cnt_minus1; i++ |   |        |

|)                                                  |   |        |

|    slice_group_id[ i ]                            |1  |u(v)    |

<cpp:endif pos:start="105:1" pos:end="105:6">#<cpp:directive pos:start="105:2" pos:end="105:6">endif</cpp:directive></cpp:endif>

            <break pos:start="107:13" pos:end="107:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:49"><expr pos:start="113:5" pos:end="113:48"><name pos:start="113:5" pos:end="113:21"><name pos:start="113:5" pos:end="113:7">pps</name><operator pos:start="113:8" pos:end="113:9">-&gt;</operator><name pos:start="113:10" pos:end="113:18">ref_count</name><index pos:start="113:19" pos:end="113:21">[<expr pos:start="113:20" pos:end="113:20"><literal type="number" pos:start="113:20" pos:end="113:20">0</literal></expr>]</index></name><operator pos:start="113:22" pos:end="113:22">=</operator> <call pos:start="113:24" pos:end="113:44"><name pos:start="113:24" pos:end="113:36">get_ue_golomb</name><argument_list pos:start="113:37" pos:end="113:44">(<argument pos:start="113:38" pos:end="113:43"><expr pos:start="113:38" pos:end="113:43"><operator pos:start="113:38" pos:end="113:38">&amp;</operator><name pos:start="113:39" pos:end="113:43"><name pos:start="113:39" pos:end="113:39">s</name><operator pos:start="113:40" pos:end="113:41">-&gt;</operator><name pos:start="113:42" pos:end="113:43">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="113:46" pos:end="113:46">+</operator> <literal type="number" pos:start="113:48" pos:end="113:48">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:49"><expr pos:start="115:5" pos:end="115:48"><name pos:start="115:5" pos:end="115:21"><name pos:start="115:5" pos:end="115:7">pps</name><operator pos:start="115:8" pos:end="115:9">-&gt;</operator><name pos:start="115:10" pos:end="115:18">ref_count</name><index pos:start="115:19" pos:end="115:21">[<expr pos:start="115:20" pos:end="115:20"><literal type="number" pos:start="115:20" pos:end="115:20">1</literal></expr>]</index></name><operator pos:start="115:22" pos:end="115:22">=</operator> <call pos:start="115:24" pos:end="115:44"><name pos:start="115:24" pos:end="115:36">get_ue_golomb</name><argument_list pos:start="115:37" pos:end="115:44">(<argument pos:start="115:38" pos:end="115:43"><expr pos:start="115:38" pos:end="115:43"><operator pos:start="115:38" pos:end="115:38">&amp;</operator><name pos:start="115:39" pos:end="115:43"><name pos:start="115:39" pos:end="115:39">s</name><operator pos:start="115:40" pos:end="115:41">-&gt;</operator><name pos:start="115:42" pos:end="115:43">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="115:46" pos:end="115:46">+</operator> <literal type="number" pos:start="115:48" pos:end="115:48">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="117:5" pos:end="125:5"><if pos:start="117:5" pos:end="125:5">if<condition pos:start="117:7" pos:end="117:64">(<expr pos:start="117:8" pos:end="117:63"><name pos:start="117:8" pos:end="117:24"><name pos:start="117:8" pos:end="117:10">pps</name><operator pos:start="117:11" pos:end="117:12">-&gt;</operator><name pos:start="117:13" pos:end="117:21">ref_count</name><index pos:start="117:22" pos:end="117:24">[<expr pos:start="117:23" pos:end="117:23"><literal type="number" pos:start="117:23" pos:end="117:23">0</literal></expr>]</index></name><operator pos:start="117:25" pos:end="117:25">-</operator><literal type="number" pos:start="117:26" pos:end="117:26">1</literal> <operator pos:start="117:28" pos:end="117:28">&gt;</operator> <literal type="number" pos:start="117:30" pos:end="117:32">32</literal><operator pos:start="117:32" pos:end="117:32">-</operator><literal type="number" pos:start="117:33" pos:end="117:33">1</literal> <operator pos:start="117:35" pos:end="117:36">||</operator> <name pos:start="117:38" pos:end="117:54"><name pos:start="117:38" pos:end="117:40">pps</name><operator pos:start="117:41" pos:end="117:42">-&gt;</operator><name pos:start="117:43" pos:end="117:51">ref_count</name><index pos:start="117:52" pos:end="117:54">[<expr pos:start="117:53" pos:end="117:53"><literal type="number" pos:start="117:53" pos:end="117:53">1</literal></expr>]</index></name><operator pos:start="117:55" pos:end="117:55">-</operator><literal type="number" pos:start="117:56" pos:end="117:56">1</literal> <operator pos:start="117:58" pos:end="117:58">&gt;</operator> <literal type="number" pos:start="117:60" pos:end="117:62">32</literal><operator pos:start="117:62" pos:end="117:62">-</operator><literal type="number" pos:start="117:63" pos:end="117:63">1</literal></expr>)</condition><block pos:start="117:65" pos:end="125:5">{<block_content pos:start="119:9" pos:end="123:18">

        <expr_stmt pos:start="119:9" pos:end="119:71"><expr pos:start="119:9" pos:end="119:70"><call pos:start="119:9" pos:end="119:70"><name pos:start="119:9" pos:end="119:14">av_log</name><argument_list pos:start="119:15" pos:end="119:70">(<argument pos:start="119:16" pos:end="119:25"><expr pos:start="119:16" pos:end="119:25"><name pos:start="119:16" pos:end="119:25"><name pos:start="119:16" pos:end="119:16">h</name><operator pos:start="119:17" pos:end="119:18">-&gt;</operator><name pos:start="119:19" pos:end="119:19">s</name><operator pos:start="119:20" pos:end="119:20">.</operator><name pos:start="119:21" pos:end="119:25">avctx</name></name></expr></argument>, <argument pos:start="119:28" pos:end="119:39"><expr pos:start="119:28" pos:end="119:39"><name pos:start="119:28" pos:end="119:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="119:42" pos:end="119:69"><expr pos:start="119:42" pos:end="119:69"><literal type="string" pos:start="119:42" pos:end="119:69">"reference overflow (pps)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:48"><expr pos:start="121:9" pos:end="121:47"><name pos:start="121:9" pos:end="121:25"><name pos:start="121:9" pos:end="121:11">pps</name><operator pos:start="121:12" pos:end="121:13">-&gt;</operator><name pos:start="121:14" pos:end="121:22">ref_count</name><index pos:start="121:23" pos:end="121:25">[<expr pos:start="121:24" pos:end="121:24"><literal type="number" pos:start="121:24" pos:end="121:24">0</literal></expr>]</index></name><operator pos:start="121:26" pos:end="121:26">=</operator> <name pos:start="121:28" pos:end="121:44"><name pos:start="121:28" pos:end="121:30">pps</name><operator pos:start="121:31" pos:end="121:32">-&gt;</operator><name pos:start="121:33" pos:end="121:41">ref_count</name><index pos:start="121:42" pos:end="121:44">[<expr pos:start="121:43" pos:end="121:43"><literal type="number" pos:start="121:43" pos:end="121:43">1</literal></expr>]</index></name><operator pos:start="121:45" pos:end="121:45">=</operator> <literal type="number" pos:start="121:47" pos:end="121:47">1</literal></expr>;</expr_stmt>

        <return pos:start="123:9" pos:end="123:18">return <expr pos:start="123:16" pos:end="123:17"><operator pos:start="123:16" pos:end="123:16">-</operator><literal type="number" pos:start="123:17" pos:end="123:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="129:5" pos:end="129:42"><expr pos:start="129:5" pos:end="129:41"><name pos:start="129:5" pos:end="129:22"><name pos:start="129:5" pos:end="129:7">pps</name><operator pos:start="129:8" pos:end="129:9">-&gt;</operator><name pos:start="129:10" pos:end="129:22">weighted_pred</name></name><operator pos:start="129:23" pos:end="129:23">=</operator> <call pos:start="129:25" pos:end="129:41"><name pos:start="129:25" pos:end="129:33">get_bits1</name><argument_list pos:start="129:34" pos:end="129:41">(<argument pos:start="129:35" pos:end="129:40"><expr pos:start="129:35" pos:end="129:40"><operator pos:start="129:35" pos:end="129:35">&amp;</operator><name pos:start="129:36" pos:end="129:40"><name pos:start="129:36" pos:end="129:36">s</name><operator pos:start="129:37" pos:end="129:38">-&gt;</operator><name pos:start="129:39" pos:end="129:40">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:50"><expr pos:start="131:5" pos:end="131:49"><name pos:start="131:5" pos:end="131:28"><name pos:start="131:5" pos:end="131:7">pps</name><operator pos:start="131:8" pos:end="131:9">-&gt;</operator><name pos:start="131:10" pos:end="131:28">weighted_bipred_idc</name></name><operator pos:start="131:29" pos:end="131:29">=</operator> <call pos:start="131:31" pos:end="131:49"><name pos:start="131:31" pos:end="131:38">get_bits</name><argument_list pos:start="131:39" pos:end="131:49">(<argument pos:start="131:40" pos:end="131:45"><expr pos:start="131:40" pos:end="131:45"><operator pos:start="131:40" pos:end="131:40">&amp;</operator><name pos:start="131:41" pos:end="131:45"><name pos:start="131:41" pos:end="131:41">s</name><operator pos:start="131:42" pos:end="131:43">-&gt;</operator><name pos:start="131:44" pos:end="131:45">gb</name></name></expr></argument>, <argument pos:start="131:48" pos:end="131:48"><expr pos:start="131:48" pos:end="131:48"><literal type="number" pos:start="131:48" pos:end="131:48">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:45"><expr pos:start="133:5" pos:end="133:44"><name pos:start="133:5" pos:end="133:16"><name pos:start="133:5" pos:end="133:7">pps</name><operator pos:start="133:8" pos:end="133:9">-&gt;</operator><name pos:start="133:10" pos:end="133:16">init_qp</name></name><operator pos:start="133:17" pos:end="133:17">=</operator> <call pos:start="133:19" pos:end="133:39"><name pos:start="133:19" pos:end="133:31">get_se_golomb</name><argument_list pos:start="133:32" pos:end="133:39">(<argument pos:start="133:33" pos:end="133:38"><expr pos:start="133:33" pos:end="133:38"><operator pos:start="133:33" pos:end="133:33">&amp;</operator><name pos:start="133:34" pos:end="133:38"><name pos:start="133:34" pos:end="133:34">s</name><operator pos:start="133:35" pos:end="133:36">-&gt;</operator><name pos:start="133:37" pos:end="133:38">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="133:41" pos:end="133:41">+</operator> <literal type="number" pos:start="133:43" pos:end="133:44">26</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:45"><expr pos:start="135:5" pos:end="135:44"><name pos:start="135:5" pos:end="135:16"><name pos:start="135:5" pos:end="135:7">pps</name><operator pos:start="135:8" pos:end="135:9">-&gt;</operator><name pos:start="135:10" pos:end="135:16">init_qs</name></name><operator pos:start="135:17" pos:end="135:17">=</operator> <call pos:start="135:19" pos:end="135:39"><name pos:start="135:19" pos:end="135:31">get_se_golomb</name><argument_list pos:start="135:32" pos:end="135:39">(<argument pos:start="135:33" pos:end="135:38"><expr pos:start="135:33" pos:end="135:38"><operator pos:start="135:33" pos:end="135:33">&amp;</operator><name pos:start="135:34" pos:end="135:38"><name pos:start="135:34" pos:end="135:34">s</name><operator pos:start="135:35" pos:end="135:36">-&gt;</operator><name pos:start="135:37" pos:end="135:38">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="135:41" pos:end="135:41">+</operator> <literal type="number" pos:start="135:43" pos:end="135:44">26</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:58"><expr pos:start="137:5" pos:end="137:57"><name pos:start="137:5" pos:end="137:34"><name pos:start="137:5" pos:end="137:7">pps</name><operator pos:start="137:8" pos:end="137:9">-&gt;</operator><name pos:start="137:10" pos:end="137:31">chroma_qp_index_offset</name><index pos:start="137:32" pos:end="137:34">[<expr pos:start="137:33" pos:end="137:33"><literal type="number" pos:start="137:33" pos:end="137:33">0</literal></expr>]</index></name><operator pos:start="137:35" pos:end="137:35">=</operator> <call pos:start="137:37" pos:end="137:57"><name pos:start="137:37" pos:end="137:49">get_se_golomb</name><argument_list pos:start="137:50" pos:end="137:57">(<argument pos:start="137:51" pos:end="137:56"><expr pos:start="137:51" pos:end="137:56"><operator pos:start="137:51" pos:end="137:51">&amp;</operator><name pos:start="137:52" pos:end="137:56"><name pos:start="137:52" pos:end="137:52">s</name><operator pos:start="137:53" pos:end="137:54">-&gt;</operator><name pos:start="137:55" pos:end="137:56">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:65"><expr pos:start="139:5" pos:end="139:64"><name pos:start="139:5" pos:end="139:45"><name pos:start="139:5" pos:end="139:7">pps</name><operator pos:start="139:8" pos:end="139:9">-&gt;</operator><name pos:start="139:10" pos:end="139:45">deblocking_filter_parameters_present</name></name><operator pos:start="139:46" pos:end="139:46">=</operator> <call pos:start="139:48" pos:end="139:64"><name pos:start="139:48" pos:end="139:56">get_bits1</name><argument_list pos:start="139:57" pos:end="139:64">(<argument pos:start="139:58" pos:end="139:63"><expr pos:start="139:58" pos:end="139:63"><operator pos:start="139:58" pos:end="139:58">&amp;</operator><name pos:start="139:59" pos:end="139:63"><name pos:start="139:59" pos:end="139:59">s</name><operator pos:start="139:60" pos:end="139:61">-&gt;</operator><name pos:start="139:62" pos:end="139:63">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:51"><expr pos:start="141:5" pos:end="141:50"><name pos:start="141:5" pos:end="141:31"><name pos:start="141:5" pos:end="141:7">pps</name><operator pos:start="141:8" pos:end="141:9">-&gt;</operator><name pos:start="141:10" pos:end="141:31">constrained_intra_pred</name></name><operator pos:start="141:32" pos:end="141:32">=</operator> <call pos:start="141:34" pos:end="141:50"><name pos:start="141:34" pos:end="141:42">get_bits1</name><argument_list pos:start="141:43" pos:end="141:50">(<argument pos:start="141:44" pos:end="141:49"><expr pos:start="141:44" pos:end="141:49"><operator pos:start="141:44" pos:end="141:44">&amp;</operator><name pos:start="141:45" pos:end="141:49"><name pos:start="141:45" pos:end="141:45">s</name><operator pos:start="141:46" pos:end="141:47">-&gt;</operator><name pos:start="141:48" pos:end="141:49">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:55"><expr pos:start="143:5" pos:end="143:54"><name pos:start="143:5" pos:end="143:34"><name pos:start="143:5" pos:end="143:7">pps</name><operator pos:start="143:8" pos:end="143:9">-&gt;</operator><name pos:start="143:10" pos:end="143:34">redundant_pic_cnt_present</name></name> <operator pos:start="143:36" pos:end="143:36">=</operator> <call pos:start="143:38" pos:end="143:54"><name pos:start="143:38" pos:end="143:46">get_bits1</name><argument_list pos:start="143:47" pos:end="143:54">(<argument pos:start="143:48" pos:end="143:53"><expr pos:start="143:48" pos:end="143:53"><operator pos:start="143:48" pos:end="143:48">&amp;</operator><name pos:start="143:49" pos:end="143:53"><name pos:start="143:49" pos:end="143:49">s</name><operator pos:start="143:50" pos:end="143:51">-&gt;</operator><name pos:start="143:52" pos:end="143:53">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="147:5" pos:end="147:31"><expr pos:start="147:5" pos:end="147:30"><name pos:start="147:5" pos:end="147:27"><name pos:start="147:5" pos:end="147:7">pps</name><operator pos:start="147:8" pos:end="147:9">-&gt;</operator><name pos:start="147:10" pos:end="147:27">transform_8x8_mode</name></name><operator pos:start="147:28" pos:end="147:28">=</operator> <literal type="number" pos:start="147:30" pos:end="147:30">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:29"><expr pos:start="149:5" pos:end="149:28"><name pos:start="149:5" pos:end="149:24"><name pos:start="149:5" pos:end="149:5">h</name><operator pos:start="149:6" pos:end="149:7">-&gt;</operator><name pos:start="149:8" pos:end="149:24">dequant_coeff_pps</name></name><operator pos:start="149:25" pos:end="149:25">=</operator> <operator pos:start="149:27" pos:end="149:27">-</operator><literal type="number" pos:start="149:28" pos:end="149:28">1</literal></expr>;</expr_stmt> <comment type="line" pos:start="149:31" pos:end="149:92">//contents of sps/pps can change even if id doesn't, so reinit</comment>

    <expr_stmt pos:start="151:5" pos:end="151:109"><expr pos:start="151:5" pos:end="151:108"><call pos:start="151:5" pos:end="151:108"><name pos:start="151:5" pos:end="151:10">memcpy</name><argument_list pos:start="151:11" pos:end="151:108">(<argument pos:start="151:12" pos:end="151:31"><expr pos:start="151:12" pos:end="151:31"><name pos:start="151:12" pos:end="151:31"><name pos:start="151:12" pos:end="151:14">pps</name><operator pos:start="151:15" pos:end="151:16">-&gt;</operator><name pos:start="151:17" pos:end="151:31">scaling_matrix4</name></name></expr></argument>, <argument pos:start="151:34" pos:end="151:77"><expr pos:start="151:34" pos:end="151:77"><name pos:start="151:34" pos:end="151:60"><name pos:start="151:34" pos:end="151:34">h</name><operator pos:start="151:35" pos:end="151:36">-&gt;</operator><name pos:start="151:37" pos:end="151:47">sps_buffers</name><index pos:start="151:48" pos:end="151:60">[<expr pos:start="151:49" pos:end="151:59"><name pos:start="151:49" pos:end="151:59"><name pos:start="151:49" pos:end="151:51">pps</name><operator pos:start="151:52" pos:end="151:53">-&gt;</operator><name pos:start="151:54" pos:end="151:59">sps_id</name></name></expr>]</index></name><operator pos:start="151:61" pos:end="151:62">-&gt;</operator><name pos:start="151:63" pos:end="151:77">scaling_matrix4</name></expr></argument>, <argument pos:start="151:80" pos:end="151:107"><expr pos:start="151:80" pos:end="151:107"><sizeof pos:start="151:80" pos:end="151:107">sizeof<argument_list pos:start="151:86" pos:end="151:107">(<argument pos:start="151:87" pos:end="151:106"><expr pos:start="151:87" pos:end="151:106"><name pos:start="151:87" pos:end="151:106"><name pos:start="151:87" pos:end="151:89">pps</name><operator pos:start="151:90" pos:end="151:91">-&gt;</operator><name pos:start="151:92" pos:end="151:106">scaling_matrix4</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:109"><expr pos:start="153:5" pos:end="153:108"><call pos:start="153:5" pos:end="153:108"><name pos:start="153:5" pos:end="153:10">memcpy</name><argument_list pos:start="153:11" pos:end="153:108">(<argument pos:start="153:12" pos:end="153:31"><expr pos:start="153:12" pos:end="153:31"><name pos:start="153:12" pos:end="153:31"><name pos:start="153:12" pos:end="153:14">pps</name><operator pos:start="153:15" pos:end="153:16">-&gt;</operator><name pos:start="153:17" pos:end="153:31">scaling_matrix8</name></name></expr></argument>, <argument pos:start="153:34" pos:end="153:77"><expr pos:start="153:34" pos:end="153:77"><name pos:start="153:34" pos:end="153:60"><name pos:start="153:34" pos:end="153:34">h</name><operator pos:start="153:35" pos:end="153:36">-&gt;</operator><name pos:start="153:37" pos:end="153:47">sps_buffers</name><index pos:start="153:48" pos:end="153:60">[<expr pos:start="153:49" pos:end="153:59"><name pos:start="153:49" pos:end="153:59"><name pos:start="153:49" pos:end="153:51">pps</name><operator pos:start="153:52" pos:end="153:53">-&gt;</operator><name pos:start="153:54" pos:end="153:59">sps_id</name></name></expr>]</index></name><operator pos:start="153:61" pos:end="153:62">-&gt;</operator><name pos:start="153:63" pos:end="153:77">scaling_matrix8</name></expr></argument>, <argument pos:start="153:80" pos:end="153:107"><expr pos:start="153:80" pos:end="153:107"><sizeof pos:start="153:80" pos:end="153:107">sizeof<argument_list pos:start="153:86" pos:end="153:107">(<argument pos:start="153:87" pos:end="153:106"><expr pos:start="153:87" pos:end="153:106"><name pos:start="153:87" pos:end="153:106"><name pos:start="153:87" pos:end="153:89">pps</name><operator pos:start="153:90" pos:end="153:91">-&gt;</operator><name pos:start="153:92" pos:end="153:106">scaling_matrix8</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="157:5" pos:end="169:5"><if pos:start="157:5" pos:end="165:5">if<condition pos:start="157:7" pos:end="157:43">(<expr pos:start="157:8" pos:end="157:42"><call pos:start="157:8" pos:end="157:29"><name pos:start="157:8" pos:end="157:21">get_bits_count</name><argument_list pos:start="157:22" pos:end="157:29">(<argument pos:start="157:23" pos:end="157:28"><expr pos:start="157:23" pos:end="157:28"><operator pos:start="157:23" pos:end="157:23">&amp;</operator><name pos:start="157:24" pos:end="157:28"><name pos:start="157:24" pos:end="157:24">s</name><operator pos:start="157:25" pos:end="157:26">-&gt;</operator><name pos:start="157:27" pos:end="157:28">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="157:31" pos:end="157:31">&lt;</operator> <name pos:start="157:33" pos:end="157:42">bit_length</name></expr>)</condition><block pos:start="157:44" pos:end="165:5">{<block_content pos:start="159:9" pos:end="163:62">

        <expr_stmt pos:start="159:9" pos:end="159:51"><expr pos:start="159:9" pos:end="159:50"><name pos:start="159:9" pos:end="159:31"><name pos:start="159:9" pos:end="159:11">pps</name><operator pos:start="159:12" pos:end="159:13">-&gt;</operator><name pos:start="159:14" pos:end="159:31">transform_8x8_mode</name></name><operator pos:start="159:32" pos:end="159:32">=</operator> <call pos:start="159:34" pos:end="159:50"><name pos:start="159:34" pos:end="159:42">get_bits1</name><argument_list pos:start="159:43" pos:end="159:50">(<argument pos:start="159:44" pos:end="159:49"><expr pos:start="159:44" pos:end="159:49"><operator pos:start="159:44" pos:end="159:44">&amp;</operator><name pos:start="159:45" pos:end="159:49"><name pos:start="159:45" pos:end="159:45">s</name><operator pos:start="159:46" pos:end="159:47">-&gt;</operator><name pos:start="159:48" pos:end="159:49">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:116"><expr pos:start="161:9" pos:end="161:115"><call pos:start="161:9" pos:end="161:115"><name pos:start="161:9" pos:end="161:31">decode_scaling_matrices</name><argument_list pos:start="161:32" pos:end="161:115">(<argument pos:start="161:33" pos:end="161:33"><expr pos:start="161:33" pos:end="161:33"><name pos:start="161:33" pos:end="161:33">h</name></expr></argument>, <argument pos:start="161:36" pos:end="161:62"><expr pos:start="161:36" pos:end="161:62"><name pos:start="161:36" pos:end="161:62"><name pos:start="161:36" pos:end="161:36">h</name><operator pos:start="161:37" pos:end="161:38">-&gt;</operator><name pos:start="161:39" pos:end="161:49">sps_buffers</name><index pos:start="161:50" pos:end="161:62">[<expr pos:start="161:51" pos:end="161:61"><name pos:start="161:51" pos:end="161:61"><name pos:start="161:51" pos:end="161:53">pps</name><operator pos:start="161:54" pos:end="161:55">-&gt;</operator><name pos:start="161:56" pos:end="161:61">sps_id</name></name></expr>]</index></name></expr></argument>, <argument pos:start="161:65" pos:end="161:67"><expr pos:start="161:65" pos:end="161:67"><name pos:start="161:65" pos:end="161:67">pps</name></expr></argument>, <argument pos:start="161:70" pos:end="161:70"><expr pos:start="161:70" pos:end="161:70"><literal type="number" pos:start="161:70" pos:end="161:70">0</literal></expr></argument>, <argument pos:start="161:73" pos:end="161:92"><expr pos:start="161:73" pos:end="161:92"><name pos:start="161:73" pos:end="161:92"><name pos:start="161:73" pos:end="161:75">pps</name><operator pos:start="161:76" pos:end="161:77">-&gt;</operator><name pos:start="161:78" pos:end="161:92">scaling_matrix4</name></name></expr></argument>, <argument pos:start="161:95" pos:end="161:114"><expr pos:start="161:95" pos:end="161:114"><name pos:start="161:95" pos:end="161:114"><name pos:start="161:95" pos:end="161:97">pps</name><operator pos:start="161:98" pos:end="161:99">-&gt;</operator><name pos:start="161:100" pos:end="161:114">scaling_matrix8</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:62"><expr pos:start="163:9" pos:end="163:61"><name pos:start="163:9" pos:end="163:38"><name pos:start="163:9" pos:end="163:11">pps</name><operator pos:start="163:12" pos:end="163:13">-&gt;</operator><name pos:start="163:14" pos:end="163:35">chroma_qp_index_offset</name><index pos:start="163:36" pos:end="163:38">[<expr pos:start="163:37" pos:end="163:37"><literal type="number" pos:start="163:37" pos:end="163:37">1</literal></expr>]</index></name><operator pos:start="163:39" pos:end="163:39">=</operator> <call pos:start="163:41" pos:end="163:61"><name pos:start="163:41" pos:end="163:53">get_se_golomb</name><argument_list pos:start="163:54" pos:end="163:61">(<argument pos:start="163:55" pos:end="163:60"><expr pos:start="163:55" pos:end="163:60"><operator pos:start="163:55" pos:end="163:55">&amp;</operator><name pos:start="163:56" pos:end="163:60"><name pos:start="163:56" pos:end="163:56">s</name><operator pos:start="163:57" pos:end="163:58">-&gt;</operator><name pos:start="163:59" pos:end="163:60">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="163:64" pos:end="163:94">//second_chroma_qp_index_offset</comment>

    </block_content>}</block></if> <else pos:start="165:7" pos:end="169:5">else <block pos:start="165:12" pos:end="169:5">{<block_content pos:start="167:9" pos:end="167:71">

        <expr_stmt pos:start="167:9" pos:end="167:71"><expr pos:start="167:9" pos:end="167:70"><name pos:start="167:9" pos:end="167:38"><name pos:start="167:9" pos:end="167:11">pps</name><operator pos:start="167:12" pos:end="167:13">-&gt;</operator><name pos:start="167:14" pos:end="167:35">chroma_qp_index_offset</name><index pos:start="167:36" pos:end="167:38">[<expr pos:start="167:37" pos:end="167:37"><literal type="number" pos:start="167:37" pos:end="167:37">1</literal></expr>]</index></name><operator pos:start="167:39" pos:end="167:39">=</operator> <name pos:start="167:41" pos:end="167:70"><name pos:start="167:41" pos:end="167:43">pps</name><operator pos:start="167:44" pos:end="167:45">-&gt;</operator><name pos:start="167:46" pos:end="167:67">chroma_qp_index_offset</name><index pos:start="167:68" pos:end="167:70">[<expr pos:start="167:69" pos:end="167:69"><literal type="number" pos:start="167:69" pos:end="167:69">0</literal></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="173:5" pos:end="173:59"><expr pos:start="173:5" pos:end="173:58"><call pos:start="173:5" pos:end="173:58"><name pos:start="173:5" pos:end="173:18">build_qp_table</name><argument_list pos:start="173:19" pos:end="173:58">(<argument pos:start="173:20" pos:end="173:22"><expr pos:start="173:20" pos:end="173:22"><name pos:start="173:20" pos:end="173:22">pps</name></expr></argument>, <argument pos:start="173:25" pos:end="173:25"><expr pos:start="173:25" pos:end="173:25"><literal type="number" pos:start="173:25" pos:end="173:25">0</literal></expr></argument>, <argument pos:start="173:28" pos:end="173:57"><expr pos:start="173:28" pos:end="173:57"><name pos:start="173:28" pos:end="173:57"><name pos:start="173:28" pos:end="173:30">pps</name><operator pos:start="173:31" pos:end="173:32">-&gt;</operator><name pos:start="173:33" pos:end="173:54">chroma_qp_index_offset</name><index pos:start="173:55" pos:end="173:57">[<expr pos:start="173:56" pos:end="173:56"><literal type="number" pos:start="173:56" pos:end="173:56">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="175:5" pos:end="175:59"><expr pos:start="175:5" pos:end="175:58"><call pos:start="175:5" pos:end="175:58"><name pos:start="175:5" pos:end="175:18">build_qp_table</name><argument_list pos:start="175:19" pos:end="175:58">(<argument pos:start="175:20" pos:end="175:22"><expr pos:start="175:20" pos:end="175:22"><name pos:start="175:20" pos:end="175:22">pps</name></expr></argument>, <argument pos:start="175:25" pos:end="175:25"><expr pos:start="175:25" pos:end="175:25"><literal type="number" pos:start="175:25" pos:end="175:25">1</literal></expr></argument>, <argument pos:start="175:28" pos:end="175:57"><expr pos:start="175:28" pos:end="175:57"><name pos:start="175:28" pos:end="175:57"><name pos:start="175:28" pos:end="175:30">pps</name><operator pos:start="175:31" pos:end="175:32">-&gt;</operator><name pos:start="175:33" pos:end="175:54">chroma_qp_index_offset</name><index pos:start="175:55" pos:end="175:57">[<expr pos:start="175:56" pos:end="175:56"><literal type="number" pos:start="175:56" pos:end="175:56">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="177:5" pos:end="179:33"><if pos:start="177:5" pos:end="179:33">if<condition pos:start="177:7" pos:end="177:72">(<expr pos:start="177:8" pos:end="177:71"><name pos:start="177:8" pos:end="177:37"><name pos:start="177:8" pos:end="177:10">pps</name><operator pos:start="177:11" pos:end="177:12">-&gt;</operator><name pos:start="177:13" pos:end="177:34">chroma_qp_index_offset</name><index pos:start="177:35" pos:end="177:37">[<expr pos:start="177:36" pos:end="177:36"><literal type="number" pos:start="177:36" pos:end="177:36">0</literal></expr>]</index></name> <operator pos:start="177:39" pos:end="177:40">!=</operator> <name pos:start="177:42" pos:end="177:71"><name pos:start="177:42" pos:end="177:44">pps</name><operator pos:start="177:45" pos:end="177:46">-&gt;</operator><name pos:start="177:47" pos:end="177:68">chroma_qp_index_offset</name><index pos:start="177:69" pos:end="177:71">[<expr pos:start="177:70" pos:end="177:70"><literal type="number" pos:start="177:70" pos:end="177:70">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="179:9" pos:end="179:33"><block_content pos:start="179:9" pos:end="179:33">

        <expr_stmt pos:start="179:9" pos:end="179:33"><expr pos:start="179:9" pos:end="179:32"><name pos:start="179:9" pos:end="179:29"><name pos:start="179:9" pos:end="179:9">h</name><operator pos:start="179:10" pos:end="179:11">-&gt;</operator><name pos:start="179:12" pos:end="179:14">pps</name><operator pos:start="179:15" pos:end="179:15">.</operator><name pos:start="179:16" pos:end="179:29">chroma_qp_diff</name></name><operator pos:start="179:30" pos:end="179:30">=</operator> <literal type="number" pos:start="179:32" pos:end="179:32">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="183:5" pos:end="209:5"><if pos:start="183:5" pos:end="209:5">if<condition pos:start="183:7" pos:end="183:42">(<expr pos:start="183:8" pos:end="183:41"><name pos:start="183:8" pos:end="183:22"><name pos:start="183:8" pos:end="183:8">s</name><operator pos:start="183:9" pos:end="183:10">-&gt;</operator><name pos:start="183:11" pos:end="183:15">avctx</name><operator pos:start="183:16" pos:end="183:17">-&gt;</operator><name pos:start="183:18" pos:end="183:22">debug</name></name><operator pos:start="183:23" pos:end="183:23">&amp;</operator><name pos:start="183:24" pos:end="183:41">FF_DEBUG_PICT_INFO</name></expr>)</condition><block pos:start="183:43" pos:end="209:5">{<block_content pos:start="185:9" pos:end="207:17">

        <expr_stmt pos:start="185:9" pos:end="207:17"><expr pos:start="185:9" pos:end="207:16"><call pos:start="185:9" pos:end="207:16"><name pos:start="185:9" pos:end="185:14">av_log</name><argument_list pos:start="185:15" pos:end="207:16">(<argument pos:start="185:16" pos:end="185:25"><expr pos:start="185:16" pos:end="185:25"><name pos:start="185:16" pos:end="185:25"><name pos:start="185:16" pos:end="185:16">h</name><operator pos:start="185:17" pos:end="185:18">-&gt;</operator><name pos:start="185:19" pos:end="185:19">s</name><operator pos:start="185:20" pos:end="185:20">.</operator><name pos:start="185:21" pos:end="185:25">avctx</name></name></expr></argument>, <argument pos:start="185:28" pos:end="185:39"><expr pos:start="185:28" pos:end="185:39"><name pos:start="185:28" pos:end="185:39">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="185:42" pos:end="185:117"><expr pos:start="185:42" pos:end="185:117"><literal type="string" pos:start="185:42" pos:end="185:117">"pps:%u sps:%u %s slice_groups:%d ref:%d/%d %s qp:%d/%d/%d/%d %s %s %s %s\n"</literal></expr></argument>,

               <argument pos:start="187:16" pos:end="187:21"><expr pos:start="187:16" pos:end="187:21"><name pos:start="187:16" pos:end="187:21">pps_id</name></expr></argument>, <argument pos:start="187:24" pos:end="187:34"><expr pos:start="187:24" pos:end="187:34"><name pos:start="187:24" pos:end="187:34"><name pos:start="187:24" pos:end="187:26">pps</name><operator pos:start="187:27" pos:end="187:28">-&gt;</operator><name pos:start="187:29" pos:end="187:34">sps_id</name></name></expr></argument>,

               <argument pos:start="189:16" pos:end="189:45"><expr pos:start="189:16" pos:end="189:45"><ternary pos:start="189:16" pos:end="189:45"><condition pos:start="189:16" pos:end="189:27"><expr pos:start="189:16" pos:end="189:25"><name pos:start="189:16" pos:end="189:25"><name pos:start="189:16" pos:end="189:18">pps</name><operator pos:start="189:19" pos:end="189:20">-&gt;</operator><name pos:start="189:21" pos:end="189:25">cabac</name></name></expr> ?</condition><then pos:start="189:29" pos:end="189:35"> <expr pos:start="189:29" pos:end="189:35"><literal type="string" pos:start="189:29" pos:end="189:35">"CABAC"</literal></expr> </then><else pos:start="189:37" pos:end="189:45">: <expr pos:start="189:39" pos:end="189:45"><literal type="string" pos:start="189:39" pos:end="189:45">"CAVLC"</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="191:16" pos:end="191:37"><expr pos:start="191:16" pos:end="191:37"><name pos:start="191:16" pos:end="191:37"><name pos:start="191:16" pos:end="191:18">pps</name><operator pos:start="191:19" pos:end="191:20">-&gt;</operator><name pos:start="191:21" pos:end="191:37">slice_group_count</name></name></expr></argument>,

               <argument pos:start="193:16" pos:end="193:32"><expr pos:start="193:16" pos:end="193:32"><name pos:start="193:16" pos:end="193:32"><name pos:start="193:16" pos:end="193:18">pps</name><operator pos:start="193:19" pos:end="193:20">-&gt;</operator><name pos:start="193:21" pos:end="193:29">ref_count</name><index pos:start="193:30" pos:end="193:32">[<expr pos:start="193:31" pos:end="193:31"><literal type="number" pos:start="193:31" pos:end="193:31">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="193:35" pos:end="193:51"><expr pos:start="193:35" pos:end="193:51"><name pos:start="193:35" pos:end="193:51"><name pos:start="193:35" pos:end="193:37">pps</name><operator pos:start="193:38" pos:end="193:39">-&gt;</operator><name pos:start="193:40" pos:end="193:48">ref_count</name><index pos:start="193:49" pos:end="193:51">[<expr pos:start="193:50" pos:end="193:50"><literal type="number" pos:start="193:50" pos:end="193:50">1</literal></expr>]</index></name></expr></argument>,

               <argument pos:start="195:16" pos:end="195:51"><expr pos:start="195:16" pos:end="195:51"><ternary pos:start="195:16" pos:end="195:51"><condition pos:start="195:16" pos:end="195:35"><expr pos:start="195:16" pos:end="195:33"><name pos:start="195:16" pos:end="195:33"><name pos:start="195:16" pos:end="195:18">pps</name><operator pos:start="195:19" pos:end="195:20">-&gt;</operator><name pos:start="195:21" pos:end="195:33">weighted_pred</name></name></expr> ?</condition><then pos:start="195:37" pos:end="195:46"> <expr pos:start="195:37" pos:end="195:46"><literal type="string" pos:start="195:37" pos:end="195:46">"weighted"</literal></expr> </then><else pos:start="195:48" pos:end="195:51">: <expr pos:start="195:50" pos:end="195:51"><literal type="string" pos:start="195:50" pos:end="195:51">""</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="197:16" pos:end="197:27"><expr pos:start="197:16" pos:end="197:27"><name pos:start="197:16" pos:end="197:27"><name pos:start="197:16" pos:end="197:18">pps</name><operator pos:start="197:19" pos:end="197:20">-&gt;</operator><name pos:start="197:21" pos:end="197:27">init_qp</name></name></expr></argument>, <argument pos:start="197:30" pos:end="197:41"><expr pos:start="197:30" pos:end="197:41"><name pos:start="197:30" pos:end="197:41"><name pos:start="197:30" pos:end="197:32">pps</name><operator pos:start="197:33" pos:end="197:34">-&gt;</operator><name pos:start="197:35" pos:end="197:41">init_qs</name></name></expr></argument>, <argument pos:start="197:44" pos:end="197:73"><expr pos:start="197:44" pos:end="197:73"><name pos:start="197:44" pos:end="197:73"><name pos:start="197:44" pos:end="197:46">pps</name><operator pos:start="197:47" pos:end="197:48">-&gt;</operator><name pos:start="197:49" pos:end="197:70">chroma_qp_index_offset</name><index pos:start="197:71" pos:end="197:73">[<expr pos:start="197:72" pos:end="197:72"><literal type="number" pos:start="197:72" pos:end="197:72">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="197:76" pos:end="197:105"><expr pos:start="197:76" pos:end="197:105"><name pos:start="197:76" pos:end="197:105"><name pos:start="197:76" pos:end="197:78">pps</name><operator pos:start="197:79" pos:end="197:80">-&gt;</operator><name pos:start="197:81" pos:end="197:102">chroma_qp_index_offset</name><index pos:start="197:103" pos:end="197:105">[<expr pos:start="197:104" pos:end="197:104"><literal type="number" pos:start="197:104" pos:end="197:104">1</literal></expr>]</index></name></expr></argument>,

               <argument pos:start="199:16" pos:end="199:70"><expr pos:start="199:16" pos:end="199:70"><ternary pos:start="199:16" pos:end="199:70"><condition pos:start="199:16" pos:end="199:58"><expr pos:start="199:16" pos:end="199:56"><name pos:start="199:16" pos:end="199:56"><name pos:start="199:16" pos:end="199:18">pps</name><operator pos:start="199:19" pos:end="199:20">-&gt;</operator><name pos:start="199:21" pos:end="199:56">deblocking_filter_parameters_present</name></name></expr> ?</condition><then pos:start="199:60" pos:end="199:65"> <expr pos:start="199:60" pos:end="199:65"><literal type="string" pos:start="199:60" pos:end="199:65">"LPAR"</literal></expr> </then><else pos:start="199:67" pos:end="199:70">: <expr pos:start="199:69" pos:end="199:70"><literal type="string" pos:start="199:69" pos:end="199:70">""</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="201:16" pos:end="201:58"><expr pos:start="201:16" pos:end="201:58"><ternary pos:start="201:16" pos:end="201:58"><condition pos:start="201:16" pos:end="201:44"><expr pos:start="201:16" pos:end="201:42"><name pos:start="201:16" pos:end="201:42"><name pos:start="201:16" pos:end="201:18">pps</name><operator pos:start="201:19" pos:end="201:20">-&gt;</operator><name pos:start="201:21" pos:end="201:42">constrained_intra_pred</name></name></expr> ?</condition><then pos:start="201:46" pos:end="201:53"> <expr pos:start="201:46" pos:end="201:53"><literal type="string" pos:start="201:46" pos:end="201:53">"CONSTR"</literal></expr> </then><else pos:start="201:55" pos:end="201:58">: <expr pos:start="201:57" pos:end="201:58"><literal type="string" pos:start="201:57" pos:end="201:58">""</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="203:16" pos:end="203:59"><expr pos:start="203:16" pos:end="203:59"><ternary pos:start="203:16" pos:end="203:59"><condition pos:start="203:16" pos:end="203:47"><expr pos:start="203:16" pos:end="203:45"><name pos:start="203:16" pos:end="203:45"><name pos:start="203:16" pos:end="203:18">pps</name><operator pos:start="203:19" pos:end="203:20">-&gt;</operator><name pos:start="203:21" pos:end="203:45">redundant_pic_cnt_present</name></name></expr> ?</condition><then pos:start="203:49" pos:end="203:54"> <expr pos:start="203:49" pos:end="203:54"><literal type="string" pos:start="203:49" pos:end="203:54">"REDU"</literal></expr> </then><else pos:start="203:56" pos:end="203:59">: <expr pos:start="203:58" pos:end="203:59"><literal type="string" pos:start="203:58" pos:end="203:59">""</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="205:16" pos:end="205:54"><expr pos:start="205:16" pos:end="205:54"><ternary pos:start="205:16" pos:end="205:54"><condition pos:start="205:16" pos:end="205:40"><expr pos:start="205:16" pos:end="205:38"><name pos:start="205:16" pos:end="205:38"><name pos:start="205:16" pos:end="205:18">pps</name><operator pos:start="205:19" pos:end="205:20">-&gt;</operator><name pos:start="205:21" pos:end="205:38">transform_8x8_mode</name></name></expr> ?</condition><then pos:start="205:42" pos:end="205:49"> <expr pos:start="205:42" pos:end="205:49"><literal type="string" pos:start="205:42" pos:end="205:49">"8x8DCT"</literal></expr> </then><else pos:start="205:51" pos:end="205:54">: <expr pos:start="205:53" pos:end="205:54"><literal type="string" pos:start="205:53" pos:end="205:54">""</literal></expr></else></ternary></expr></argument>

               )</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="213:5" pos:end="213:13">return <expr pos:start="213:12" pos:end="213:12"><literal type="number" pos:start="213:12" pos:end="213:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
