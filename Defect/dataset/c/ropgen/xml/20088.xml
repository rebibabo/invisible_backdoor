<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20088.c" pos:tabs="8"><function pos:start="1:1" pos:end="115:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:40">scsi_disk_emulate_write_same</name><parameter_list pos:start="1:41" pos:end="1:72">(<parameter pos:start="1:42" pos:end="1:55"><decl pos:start="1:42" pos:end="1:55"><type pos:start="1:42" pos:end="1:55"><name pos:start="1:42" pos:end="1:52">SCSIDiskReq</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:55">r</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:71"><decl pos:start="1:58" pos:end="1:71"><type pos:start="1:58" pos:end="1:71"><name pos:start="1:58" pos:end="1:64">uint8_t</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:71">inbuf</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="115:1">{<block_content pos:start="5:5" pos:end="113:67">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">SCSIRequest</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:20">req</name> <init pos:start="5:22" pos:end="5:30">= <expr pos:start="5:24" pos:end="5:30"><operator pos:start="5:24" pos:end="5:24">&amp;</operator><name pos:start="5:25" pos:end="5:30"><name pos:start="5:25" pos:end="5:25">r</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:30">req</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:64"><decl pos:start="7:5" pos:end="7:63"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">SCSIDiskState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:63">= <expr pos:start="7:24" pos:end="7:63"><call pos:start="7:24" pos:end="7:63"><name pos:start="7:24" pos:end="7:32">DO_UPCAST</name><argument_list pos:start="7:33" pos:end="7:63">(<argument pos:start="7:34" pos:end="7:46"><expr pos:start="7:34" pos:end="7:46"><name pos:start="7:34" pos:end="7:46">SCSIDiskState</name></expr></argument>, <argument pos:start="7:49" pos:end="7:52"><expr pos:start="7:49" pos:end="7:52"><name pos:start="7:49" pos:end="7:52">qdev</name></expr></argument>, <argument pos:start="7:55" pos:end="7:62"><expr pos:start="7:55" pos:end="7:62"><name pos:start="7:55" pos:end="7:62"><name pos:start="7:55" pos:end="7:57">req</name><operator pos:start="7:58" pos:end="7:59">-&gt;</operator><name pos:start="7:60" pos:end="7:62">dev</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:63"><decl pos:start="9:5" pos:end="9:62"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:23">nb_sectors</name> <init pos:start="9:25" pos:end="9:62">= <expr pos:start="9:27" pos:end="9:62"><call pos:start="9:27" pos:end="9:62"><name pos:start="9:27" pos:end="9:46">scsi_data_cdb_length</name><argument_list pos:start="9:47" pos:end="9:62">(<argument pos:start="9:48" pos:end="9:61"><expr pos:start="9:48" pos:end="9:61"><name pos:start="9:48" pos:end="9:61"><name pos:start="9:48" pos:end="9:48">r</name><operator pos:start="9:49" pos:end="9:50">-&gt;</operator><name pos:start="9:51" pos:end="9:53">req</name><operator pos:start="9:54" pos:end="9:54">.</operator><name pos:start="9:55" pos:end="9:57">cmd</name><operator pos:start="9:58" pos:end="9:58">.</operator><name pos:start="9:59" pos:end="9:61">buf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:21"><name pos:start="11:5" pos:end="11:19">WriteSameCBData</name> <modifier pos:start="11:21" pos:end="11:21">*</modifier></type><name pos:start="11:22" pos:end="11:25">data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:16">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:10"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:52">/* Fail if PBDATA=1 or LBDATA=1 or ANCHOR=1.  */</comment>

    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:52">(<expr pos:start="21:9" pos:end="21:51"><name pos:start="21:9" pos:end="21:18">nb_sectors</name> <operator pos:start="21:20" pos:end="21:21">==</operator> <literal type="number" pos:start="21:23" pos:end="21:23">0</literal> <operator pos:start="21:25" pos:end="21:26">||</operator> <operator pos:start="21:28" pos:end="21:28">(</operator><name pos:start="21:29" pos:end="21:43"><name pos:start="21:29" pos:end="21:31">req</name><operator pos:start="21:32" pos:end="21:33">-&gt;</operator><name pos:start="21:34" pos:end="21:36">cmd</name><operator pos:start="21:37" pos:end="21:37">.</operator><name pos:start="21:38" pos:end="21:40">buf</name><index pos:start="21:41" pos:end="21:43">[<expr pos:start="21:42" pos:end="21:42"><literal type="number" pos:start="21:42" pos:end="21:42">1</literal></expr>]</index></name> <operator pos:start="21:45" pos:end="21:45">&amp;</operator> <literal type="number" pos:start="21:47" pos:end="21:50">0x16</literal><operator pos:start="21:51" pos:end="21:51">)</operator></expr>)</condition> <block pos:start="21:54" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:15">

        <expr_stmt pos:start="23:9" pos:end="23:59"><expr pos:start="23:9" pos:end="23:58"><call pos:start="23:9" pos:end="23:58"><name pos:start="23:9" pos:end="23:28">scsi_check_condition</name><argument_list pos:start="23:29" pos:end="23:58">(<argument pos:start="23:30" pos:end="23:30"><expr pos:start="23:30" pos:end="23:30"><name pos:start="23:30" pos:end="23:30">r</name></expr></argument>, <argument pos:start="23:33" pos:end="23:57"><expr pos:start="23:33" pos:end="23:57"><call pos:start="23:33" pos:end="23:57"><name pos:start="23:33" pos:end="23:42">SENSE_CODE</name><argument_list pos:start="23:43" pos:end="23:57">(<argument pos:start="23:44" pos:end="23:56"><expr pos:start="23:44" pos:end="23:56"><name pos:start="23:44" pos:end="23:56">INVALID_FIELD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:43">(<expr pos:start="31:9" pos:end="31:42"><call pos:start="31:9" pos:end="31:42"><name pos:start="31:9" pos:end="31:25">bdrv_is_read_only</name><argument_list pos:start="31:26" pos:end="31:42">(<argument pos:start="31:27" pos:end="31:41"><expr pos:start="31:27" pos:end="31:41"><name pos:start="31:27" pos:end="31:41"><name pos:start="31:27" pos:end="31:27">s</name><operator pos:start="31:28" pos:end="31:29">-&gt;</operator><name pos:start="31:30" pos:end="31:33">qdev</name><operator pos:start="31:34" pos:end="31:34">.</operator><name pos:start="31:35" pos:end="31:38">conf</name><operator pos:start="31:39" pos:end="31:39">.</operator><name pos:start="31:40" pos:end="31:41">bs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:45" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:15">

        <expr_stmt pos:start="33:9" pos:end="33:61"><expr pos:start="33:9" pos:end="33:60"><call pos:start="33:9" pos:end="33:60"><name pos:start="33:9" pos:end="33:28">scsi_check_condition</name><argument_list pos:start="33:29" pos:end="33:60">(<argument pos:start="33:30" pos:end="33:30"><expr pos:start="33:30" pos:end="33:30"><name pos:start="33:30" pos:end="33:30">r</name></expr></argument>, <argument pos:start="33:33" pos:end="33:59"><expr pos:start="33:33" pos:end="33:59"><call pos:start="33:33" pos:end="33:59"><name pos:start="33:33" pos:end="33:42">SENSE_CODE</name><argument_list pos:start="33:43" pos:end="33:59">(<argument pos:start="33:44" pos:end="33:58"><expr pos:start="33:44" pos:end="33:58"><name pos:start="33:44" pos:end="33:58">WRITE_PROTECTED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:56">(<expr pos:start="39:9" pos:end="39:55"><operator pos:start="39:9" pos:end="39:9">!</operator><call pos:start="39:10" pos:end="39:55"><name pos:start="39:10" pos:end="39:24">check_lba_range</name><argument_list pos:start="39:25" pos:end="39:55">(<argument pos:start="39:26" pos:end="39:26"><expr pos:start="39:26" pos:end="39:26"><name pos:start="39:26" pos:end="39:26">s</name></expr></argument>, <argument pos:start="39:29" pos:end="39:42"><expr pos:start="39:29" pos:end="39:42"><name pos:start="39:29" pos:end="39:42"><name pos:start="39:29" pos:end="39:29">r</name><operator pos:start="39:30" pos:end="39:31">-&gt;</operator><name pos:start="39:32" pos:end="39:34">req</name><operator pos:start="39:35" pos:end="39:35">.</operator><name pos:start="39:36" pos:end="39:38">cmd</name><operator pos:start="39:39" pos:end="39:39">.</operator><name pos:start="39:40" pos:end="39:42">lba</name></name></expr></argument>, <argument pos:start="39:45" pos:end="39:54"><expr pos:start="39:45" pos:end="39:54"><name pos:start="39:45" pos:end="39:54">nb_sectors</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:58" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:15">

        <expr_stmt pos:start="41:9" pos:end="41:62"><expr pos:start="41:9" pos:end="41:61"><call pos:start="41:9" pos:end="41:61"><name pos:start="41:9" pos:end="41:28">scsi_check_condition</name><argument_list pos:start="41:29" pos:end="41:61">(<argument pos:start="41:30" pos:end="41:30"><expr pos:start="41:30" pos:end="41:30"><name pos:start="41:30" pos:end="41:30">r</name></expr></argument>, <argument pos:start="41:33" pos:end="41:60"><expr pos:start="41:33" pos:end="41:60"><call pos:start="41:33" pos:end="41:60"><name pos:start="41:33" pos:end="41:42">SENSE_CODE</name><argument_list pos:start="41:43" pos:end="41:60">(<argument pos:start="41:44" pos:end="41:59"><expr pos:start="41:44" pos:end="41:59"><name pos:start="41:44" pos:end="41:59">LBA_OUT_OF_RANGE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="49:5" pos:end="75:5"><if pos:start="49:5" pos:end="75:5">if <condition pos:start="49:8" pos:end="49:49">(<expr pos:start="49:9" pos:end="49:48"><call pos:start="49:9" pos:end="49:48"><name pos:start="49:9" pos:end="49:22">buffer_is_zero</name><argument_list pos:start="49:23" pos:end="49:48">(<argument pos:start="49:24" pos:end="49:28"><expr pos:start="49:24" pos:end="49:28"><name pos:start="49:24" pos:end="49:28">inbuf</name></expr></argument>, <argument pos:start="49:31" pos:end="49:47"><expr pos:start="49:31" pos:end="49:47"><name pos:start="49:31" pos:end="49:47"><name pos:start="49:31" pos:end="49:31">s</name><operator pos:start="49:32" pos:end="49:33">-&gt;</operator><name pos:start="49:34" pos:end="49:37">qdev</name><operator pos:start="49:38" pos:end="49:38">.</operator><name pos:start="49:39" pos:end="49:47">blocksize</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:51" pos:end="75:5">{<block_content pos:start="51:9" pos:end="73:15">

        <decl_stmt pos:start="51:9" pos:end="51:69"><decl pos:start="51:9" pos:end="51:68"><type pos:start="51:9" pos:end="51:11"><name pos:start="51:9" pos:end="51:11">int</name></type> <name pos:start="51:13" pos:end="51:17">flags</name> <init pos:start="51:19" pos:end="51:68">= <expr pos:start="51:21" pos:end="51:68"><ternary pos:start="51:21" pos:end="51:68"><condition pos:start="51:21" pos:end="51:45"><expr pos:start="51:21" pos:end="51:43"><operator pos:start="51:21" pos:end="51:21">(</operator><name pos:start="51:22" pos:end="51:36"><name pos:start="51:22" pos:end="51:24">req</name><operator pos:start="51:25" pos:end="51:26">-&gt;</operator><name pos:start="51:27" pos:end="51:29">cmd</name><operator pos:start="51:30" pos:end="51:30">.</operator><name pos:start="51:31" pos:end="51:33">buf</name><index pos:start="51:34" pos:end="51:36">[<expr pos:start="51:35" pos:end="51:35"><literal type="number" pos:start="51:35" pos:end="51:35">1</literal></expr>]</index></name> <operator pos:start="51:38" pos:end="51:38">&amp;</operator> <literal type="number" pos:start="51:40" pos:end="51:42">0x8</literal><operator pos:start="51:43" pos:end="51:43">)</operator></expr> ?</condition><then pos:start="51:47" pos:end="51:64"> <expr pos:start="51:47" pos:end="51:64"><name pos:start="51:47" pos:end="51:64">BDRV_REQ_MAY_UNMAP</name></expr> </then><else pos:start="51:66" pos:end="51:68">: <expr pos:start="51:68" pos:end="51:68"><literal type="number" pos:start="51:68" pos:end="51:68">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="55:9" pos:end="55:73">/* The request is used as the AIO opaque value, so add a ref.  */</comment>

        <expr_stmt pos:start="57:9" pos:end="57:30"><expr pos:start="57:9" pos:end="57:29"><call pos:start="57:9" pos:end="57:29"><name pos:start="57:9" pos:end="57:20">scsi_req_ref</name><argument_list pos:start="57:21" pos:end="57:29">(<argument pos:start="57:22" pos:end="57:28"><expr pos:start="57:22" pos:end="57:28"><operator pos:start="57:22" pos:end="57:22">&amp;</operator><name pos:start="57:23" pos:end="57:28"><name pos:start="57:23" pos:end="57:23">r</name><operator pos:start="57:24" pos:end="57:25">-&gt;</operator><name pos:start="57:26" pos:end="57:28">req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="63:42"><expr pos:start="59:9" pos:end="63:41"><call pos:start="59:9" pos:end="63:41"><name pos:start="59:9" pos:end="59:24">block_acct_start</name><argument_list pos:start="59:25" pos:end="63:41">(<argument pos:start="59:26" pos:end="59:56"><expr pos:start="59:26" pos:end="59:56"><call pos:start="59:26" pos:end="59:56"><name pos:start="59:26" pos:end="59:39">bdrv_get_stats</name><argument_list pos:start="59:40" pos:end="59:56">(<argument pos:start="59:41" pos:end="59:55"><expr pos:start="59:41" pos:end="59:55"><name pos:start="59:41" pos:end="59:55"><name pos:start="59:41" pos:end="59:41">s</name><operator pos:start="59:42" pos:end="59:43">-&gt;</operator><name pos:start="59:44" pos:end="59:47">qdev</name><operator pos:start="59:48" pos:end="59:48">.</operator><name pos:start="59:49" pos:end="59:52">conf</name><operator pos:start="59:53" pos:end="59:53">.</operator><name pos:start="59:54" pos:end="59:55">bs</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="59:59" pos:end="59:66"><expr pos:start="59:59" pos:end="59:66"><operator pos:start="59:59" pos:end="59:59">&amp;</operator><name pos:start="59:60" pos:end="59:66"><name pos:start="59:60" pos:end="59:60">r</name><operator pos:start="59:61" pos:end="59:62">-&gt;</operator><name pos:start="59:63" pos:end="59:66">acct</name></name></expr></argument>,

                         <argument pos:start="61:26" pos:end="61:55"><expr pos:start="61:26" pos:end="61:55"><name pos:start="61:26" pos:end="61:35">nb_sectors</name> <operator pos:start="61:37" pos:end="61:37">*</operator> <name pos:start="61:39" pos:end="61:55"><name pos:start="61:39" pos:end="61:39">s</name><operator pos:start="61:40" pos:end="61:41">-&gt;</operator><name pos:start="61:42" pos:end="61:45">qdev</name><operator pos:start="61:46" pos:end="61:46">.</operator><name pos:start="61:47" pos:end="61:55">blocksize</name></name></expr></argument>,

                        <argument pos:start="63:25" pos:end="63:40"><expr pos:start="63:25" pos:end="63:40"><name pos:start="63:25" pos:end="63:40">BLOCK_ACCT_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="71:74"><expr pos:start="65:9" pos:end="71:73"><name pos:start="65:9" pos:end="65:20"><name pos:start="65:9" pos:end="65:9">r</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:14">req</name><operator pos:start="65:15" pos:end="65:15">.</operator><name pos:start="65:16" pos:end="65:20">aiocb</name></name> <operator pos:start="65:22" pos:end="65:22">=</operator> <call pos:start="65:24" pos:end="71:73"><name pos:start="65:24" pos:end="65:44">bdrv_aio_write_zeroes</name><argument_list pos:start="65:45" pos:end="71:73">(<argument pos:start="65:46" pos:end="65:60"><expr pos:start="65:46" pos:end="65:60"><name pos:start="65:46" pos:end="65:60"><name pos:start="65:46" pos:end="65:46">s</name><operator pos:start="65:47" pos:end="65:48">-&gt;</operator><name pos:start="65:49" pos:end="65:52">qdev</name><operator pos:start="65:53" pos:end="65:53">.</operator><name pos:start="65:54" pos:end="65:57">conf</name><operator pos:start="65:58" pos:end="65:58">.</operator><name pos:start="65:59" pos:end="65:60">bs</name></name></expr></argument>,

                                             <argument pos:start="67:46" pos:end="67:87"><expr pos:start="67:46" pos:end="67:87"><name pos:start="67:46" pos:end="67:59"><name pos:start="67:46" pos:end="67:46">r</name><operator pos:start="67:47" pos:end="67:48">-&gt;</operator><name pos:start="67:49" pos:end="67:51">req</name><operator pos:start="67:52" pos:end="67:52">.</operator><name pos:start="67:53" pos:end="67:55">cmd</name><operator pos:start="67:56" pos:end="67:56">.</operator><name pos:start="67:57" pos:end="67:59">lba</name></name> <operator pos:start="67:61" pos:end="67:61">*</operator> <operator pos:start="67:63" pos:end="67:63">(</operator><name pos:start="67:64" pos:end="67:80"><name pos:start="67:64" pos:end="67:64">s</name><operator pos:start="67:65" pos:end="67:66">-&gt;</operator><name pos:start="67:67" pos:end="67:70">qdev</name><operator pos:start="67:71" pos:end="67:71">.</operator><name pos:start="67:72" pos:end="67:80">blocksize</name></name> <operator pos:start="67:82" pos:end="67:82">/</operator> <literal type="number" pos:start="67:84" pos:end="67:86">512</literal><operator pos:start="67:87" pos:end="67:87">)</operator></expr></argument>,

                                             <argument pos:start="69:46" pos:end="69:83"><expr pos:start="69:46" pos:end="69:83"><name pos:start="69:46" pos:end="69:55">nb_sectors</name> <operator pos:start="69:57" pos:end="69:57">*</operator> <operator pos:start="69:59" pos:end="69:59">(</operator><name pos:start="69:60" pos:end="69:76"><name pos:start="69:60" pos:end="69:60">s</name><operator pos:start="69:61" pos:end="69:62">-&gt;</operator><name pos:start="69:63" pos:end="69:66">qdev</name><operator pos:start="69:67" pos:end="69:67">.</operator><name pos:start="69:68" pos:end="69:76">blocksize</name></name> <operator pos:start="69:78" pos:end="69:78">/</operator> <literal type="number" pos:start="69:80" pos:end="69:82">512</literal><operator pos:start="69:83" pos:end="69:83">)</operator></expr></argument>,

                                             <argument pos:start="71:46" pos:end="71:50"><expr pos:start="71:46" pos:end="71:50"><name pos:start="71:46" pos:end="71:50">flags</name></expr></argument>, <argument pos:start="71:53" pos:end="71:69"><expr pos:start="71:53" pos:end="71:69"><name pos:start="71:53" pos:end="71:69">scsi_aio_complete</name></expr></argument>, <argument pos:start="71:72" pos:end="71:72"><expr pos:start="71:72" pos:end="71:72"><name pos:start="71:72" pos:end="71:72">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="73:9" pos:end="73:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:38"><expr pos:start="79:5" pos:end="79:37"><name pos:start="79:5" pos:end="79:8">data</name> <operator pos:start="79:10" pos:end="79:10">=</operator> <call pos:start="79:12" pos:end="79:37"><name pos:start="79:12" pos:end="79:17">g_new0</name><argument_list pos:start="79:18" pos:end="79:37">(<argument pos:start="79:19" pos:end="79:33"><expr pos:start="79:19" pos:end="79:33"><name pos:start="79:19" pos:end="79:33">WriteSameCBData</name></expr></argument>, <argument pos:start="79:36" pos:end="79:36"><expr pos:start="79:36" pos:end="79:36"><literal type="number" pos:start="79:36" pos:end="79:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:16"><expr pos:start="81:5" pos:end="81:15"><name pos:start="81:5" pos:end="81:11"><name pos:start="81:5" pos:end="81:8">data</name><operator pos:start="81:9" pos:end="81:10">-&gt;</operator><name pos:start="81:11" pos:end="81:11">r</name></name> <operator pos:start="81:13" pos:end="81:13">=</operator> <name pos:start="81:15" pos:end="81:15">r</name></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:62"><expr pos:start="83:5" pos:end="83:61"><name pos:start="83:5" pos:end="83:16"><name pos:start="83:5" pos:end="83:8">data</name><operator pos:start="83:9" pos:end="83:10">-&gt;</operator><name pos:start="83:11" pos:end="83:16">sector</name></name> <operator pos:start="83:18" pos:end="83:18">=</operator> <name pos:start="83:20" pos:end="83:33"><name pos:start="83:20" pos:end="83:20">r</name><operator pos:start="83:21" pos:end="83:22">-&gt;</operator><name pos:start="83:23" pos:end="83:25">req</name><operator pos:start="83:26" pos:end="83:26">.</operator><name pos:start="83:27" pos:end="83:29">cmd</name><operator pos:start="83:30" pos:end="83:30">.</operator><name pos:start="83:31" pos:end="83:33">lba</name></name> <operator pos:start="83:35" pos:end="83:35">*</operator> <operator pos:start="83:37" pos:end="83:37">(</operator><name pos:start="83:38" pos:end="83:54"><name pos:start="83:38" pos:end="83:38">s</name><operator pos:start="83:39" pos:end="83:40">-&gt;</operator><name pos:start="83:41" pos:end="83:44">qdev</name><operator pos:start="83:45" pos:end="83:45">.</operator><name pos:start="83:46" pos:end="83:54">blocksize</name></name> <operator pos:start="83:56" pos:end="83:56">/</operator> <literal type="number" pos:start="83:58" pos:end="83:60">512</literal><operator pos:start="83:61" pos:end="83:61">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:62"><expr pos:start="85:5" pos:end="85:61"><name pos:start="85:5" pos:end="85:20"><name pos:start="85:5" pos:end="85:8">data</name><operator pos:start="85:9" pos:end="85:10">-&gt;</operator><name pos:start="85:11" pos:end="85:20">nb_sectors</name></name> <operator pos:start="85:22" pos:end="85:22">=</operator> <name pos:start="85:24" pos:end="85:33">nb_sectors</name> <operator pos:start="85:35" pos:end="85:35">*</operator> <operator pos:start="85:37" pos:end="85:37">(</operator><name pos:start="85:38" pos:end="85:54"><name pos:start="85:38" pos:end="85:38">s</name><operator pos:start="85:39" pos:end="85:40">-&gt;</operator><name pos:start="85:41" pos:end="85:44">qdev</name><operator pos:start="85:45" pos:end="85:45">.</operator><name pos:start="85:46" pos:end="85:54">blocksize</name></name> <operator pos:start="85:56" pos:end="85:56">/</operator> <literal type="number" pos:start="85:58" pos:end="85:60">512</literal><operator pos:start="85:61" pos:end="85:61">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:73"><expr pos:start="87:5" pos:end="87:72"><name pos:start="87:5" pos:end="87:21"><name pos:start="87:5" pos:end="87:8">data</name><operator pos:start="87:9" pos:end="87:10">-&gt;</operator><name pos:start="87:11" pos:end="87:13">iov</name><operator pos:start="87:14" pos:end="87:14">.</operator><name pos:start="87:15" pos:end="87:21">iov_len</name></name> <operator pos:start="87:23" pos:end="87:23">=</operator> <call pos:start="87:25" pos:end="87:72"><name pos:start="87:25" pos:end="87:27">MIN</name><argument_list pos:start="87:28" pos:end="87:72">(<argument pos:start="87:29" pos:end="87:50"><expr pos:start="87:29" pos:end="87:50"><name pos:start="87:29" pos:end="87:44"><name pos:start="87:29" pos:end="87:32">data</name><operator pos:start="87:33" pos:end="87:34">-&gt;</operator><name pos:start="87:35" pos:end="87:44">nb_sectors</name></name> <operator pos:start="87:46" pos:end="87:46">*</operator> <literal type="number" pos:start="87:48" pos:end="87:50">512</literal></expr></argument>, <argument pos:start="87:53" pos:end="87:71"><expr pos:start="87:53" pos:end="87:71"><name pos:start="87:53" pos:end="87:71">SCSI_WRITE_SAME_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:83"><expr pos:start="89:5" pos:end="89:82"><name pos:start="89:5" pos:end="89:22"><name pos:start="89:5" pos:end="89:8">data</name><operator pos:start="89:9" pos:end="89:10">-&gt;</operator><name pos:start="89:11" pos:end="89:13">iov</name><operator pos:start="89:14" pos:end="89:14">.</operator><name pos:start="89:15" pos:end="89:22">iov_base</name></name> <operator pos:start="89:24" pos:end="89:24">=</operator> <name pos:start="89:26" pos:end="89:28">buf</name> <operator pos:start="89:30" pos:end="89:30">=</operator> <call pos:start="89:32" pos:end="89:82"><name pos:start="89:32" pos:end="89:46">qemu_blockalign</name><argument_list pos:start="89:47" pos:end="89:82">(<argument pos:start="89:48" pos:end="89:62"><expr pos:start="89:48" pos:end="89:62"><name pos:start="89:48" pos:end="89:62"><name pos:start="89:48" pos:end="89:48">s</name><operator pos:start="89:49" pos:end="89:50">-&gt;</operator><name pos:start="89:51" pos:end="89:54">qdev</name><operator pos:start="89:55" pos:end="89:55">.</operator><name pos:start="89:56" pos:end="89:59">conf</name><operator pos:start="89:60" pos:end="89:60">.</operator><name pos:start="89:61" pos:end="89:62">bs</name></name></expr></argument>, <argument pos:start="89:65" pos:end="89:81"><expr pos:start="89:65" pos:end="89:81"><name pos:start="89:65" pos:end="89:81"><name pos:start="89:65" pos:end="89:68">data</name><operator pos:start="89:69" pos:end="89:70">-&gt;</operator><name pos:start="89:71" pos:end="89:73">iov</name><operator pos:start="89:74" pos:end="89:74">.</operator><name pos:start="89:75" pos:end="89:81">iov_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:57"><expr pos:start="91:5" pos:end="91:56"><call pos:start="91:5" pos:end="91:56"><name pos:start="91:5" pos:end="91:28">qemu_iovec_init_external</name><argument_list pos:start="91:29" pos:end="91:56">(<argument pos:start="91:30" pos:end="91:40"><expr pos:start="91:30" pos:end="91:40"><operator pos:start="91:30" pos:end="91:30">&amp;</operator><name pos:start="91:31" pos:end="91:40"><name pos:start="91:31" pos:end="91:34">data</name><operator pos:start="91:35" pos:end="91:36">-&gt;</operator><name pos:start="91:37" pos:end="91:40">qiov</name></name></expr></argument>, <argument pos:start="91:43" pos:end="91:52"><expr pos:start="91:43" pos:end="91:52"><operator pos:start="91:43" pos:end="91:43">&amp;</operator><name pos:start="91:44" pos:end="91:52"><name pos:start="91:44" pos:end="91:47">data</name><operator pos:start="91:48" pos:end="91:49">-&gt;</operator><name pos:start="91:50" pos:end="91:52">iov</name></name></expr></argument>, <argument pos:start="91:55" pos:end="91:55"><expr pos:start="91:55" pos:end="91:55"><literal type="number" pos:start="91:55" pos:end="91:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="95:5" pos:end="99:5">for <control pos:start="95:9" pos:end="95:62">(<init pos:start="95:10" pos:end="95:15"><expr pos:start="95:10" pos:end="95:14"><name pos:start="95:10" pos:end="95:10">i</name> <operator pos:start="95:12" pos:end="95:12">=</operator> <literal type="number" pos:start="95:14" pos:end="95:14">0</literal></expr>;</init> <condition pos:start="95:17" pos:end="95:38"><expr pos:start="95:17" pos:end="95:37"><name pos:start="95:17" pos:end="95:17">i</name> <operator pos:start="95:19" pos:end="95:19">&lt;</operator> <name pos:start="95:21" pos:end="95:37"><name pos:start="95:21" pos:end="95:24">data</name><operator pos:start="95:25" pos:end="95:26">-&gt;</operator><name pos:start="95:27" pos:end="95:29">iov</name><operator pos:start="95:30" pos:end="95:30">.</operator><name pos:start="95:31" pos:end="95:37">iov_len</name></name></expr>;</condition> <incr pos:start="95:40" pos:end="95:61"><expr pos:start="95:40" pos:end="95:61"><name pos:start="95:40" pos:end="95:40">i</name> <operator pos:start="95:42" pos:end="95:43">+=</operator> <name pos:start="95:45" pos:end="95:61"><name pos:start="95:45" pos:end="95:45">s</name><operator pos:start="95:46" pos:end="95:47">-&gt;</operator><name pos:start="95:48" pos:end="95:51">qdev</name><operator pos:start="95:52" pos:end="95:52">.</operator><name pos:start="95:53" pos:end="95:61">blocksize</name></name></expr></incr>)</control> <block pos:start="95:64" pos:end="99:5">{<block_content pos:start="97:9" pos:end="97:50">

        <expr_stmt pos:start="97:9" pos:end="97:50"><expr pos:start="97:9" pos:end="97:49"><call pos:start="97:9" pos:end="97:49"><name pos:start="97:9" pos:end="97:14">memcpy</name><argument_list pos:start="97:15" pos:end="97:49">(<argument pos:start="97:16" pos:end="97:22"><expr pos:start="97:16" pos:end="97:22"><operator pos:start="97:16" pos:end="97:16">&amp;</operator><name pos:start="97:17" pos:end="97:22"><name pos:start="97:17" pos:end="97:19">buf</name><index pos:start="97:20" pos:end="97:22">[<expr pos:start="97:21" pos:end="97:21"><name pos:start="97:21" pos:end="97:21">i</name></expr>]</index></name></expr></argument>, <argument pos:start="97:25" pos:end="97:29"><expr pos:start="97:25" pos:end="97:29"><name pos:start="97:25" pos:end="97:29">inbuf</name></expr></argument>, <argument pos:start="97:32" pos:end="97:48"><expr pos:start="97:32" pos:end="97:48"><name pos:start="97:32" pos:end="97:48"><name pos:start="97:32" pos:end="97:32">s</name><operator pos:start="97:33" pos:end="97:34">-&gt;</operator><name pos:start="97:35" pos:end="97:38">qdev</name><operator pos:start="97:39" pos:end="97:39">.</operator><name pos:start="97:40" pos:end="97:48">blocksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="103:5" pos:end="103:26"><expr pos:start="103:5" pos:end="103:25"><call pos:start="103:5" pos:end="103:25"><name pos:start="103:5" pos:end="103:16">scsi_req_ref</name><argument_list pos:start="103:17" pos:end="103:25">(<argument pos:start="103:18" pos:end="103:24"><expr pos:start="103:18" pos:end="103:24"><operator pos:start="103:18" pos:end="103:18">&amp;</operator><name pos:start="103:19" pos:end="103:24"><name pos:start="103:19" pos:end="103:19">r</name><operator pos:start="103:20" pos:end="103:21">-&gt;</operator><name pos:start="103:22" pos:end="103:24">req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="107:58"><expr pos:start="105:5" pos:end="107:57"><call pos:start="105:5" pos:end="107:57"><name pos:start="105:5" pos:end="105:20">block_acct_start</name><argument_list pos:start="105:21" pos:end="107:57">(<argument pos:start="105:22" pos:end="105:52"><expr pos:start="105:22" pos:end="105:52"><call pos:start="105:22" pos:end="105:52"><name pos:start="105:22" pos:end="105:35">bdrv_get_stats</name><argument_list pos:start="105:36" pos:end="105:52">(<argument pos:start="105:37" pos:end="105:51"><expr pos:start="105:37" pos:end="105:51"><name pos:start="105:37" pos:end="105:51"><name pos:start="105:37" pos:end="105:37">s</name><operator pos:start="105:38" pos:end="105:39">-&gt;</operator><name pos:start="105:40" pos:end="105:43">qdev</name><operator pos:start="105:44" pos:end="105:44">.</operator><name pos:start="105:45" pos:end="105:48">conf</name><operator pos:start="105:49" pos:end="105:49">.</operator><name pos:start="105:50" pos:end="105:51">bs</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="105:55" pos:end="105:62"><expr pos:start="105:55" pos:end="105:62"><operator pos:start="105:55" pos:end="105:55">&amp;</operator><name pos:start="105:56" pos:end="105:62"><name pos:start="105:56" pos:end="105:56">r</name><operator pos:start="105:57" pos:end="105:58">-&gt;</operator><name pos:start="105:59" pos:end="105:62">acct</name></name></expr></argument>,

                     <argument pos:start="107:22" pos:end="107:38"><expr pos:start="107:22" pos:end="107:38"><name pos:start="107:22" pos:end="107:38"><name pos:start="107:22" pos:end="107:25">data</name><operator pos:start="107:26" pos:end="107:27">-&gt;</operator><name pos:start="107:28" pos:end="107:30">iov</name><operator pos:start="107:31" pos:end="107:31">.</operator><name pos:start="107:32" pos:end="107:38">iov_len</name></name></expr></argument>, <argument pos:start="107:41" pos:end="107:56"><expr pos:start="107:41" pos:end="107:56"><name pos:start="107:41" pos:end="107:56">BLOCK_ACCT_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="113:67"><expr pos:start="109:5" pos:end="113:66"><name pos:start="109:5" pos:end="109:16"><name pos:start="109:5" pos:end="109:5">r</name><operator pos:start="109:6" pos:end="109:7">-&gt;</operator><name pos:start="109:8" pos:end="109:10">req</name><operator pos:start="109:11" pos:end="109:11">.</operator><name pos:start="109:12" pos:end="109:16">aiocb</name></name> <operator pos:start="109:18" pos:end="109:18">=</operator> <call pos:start="109:20" pos:end="113:66"><name pos:start="109:20" pos:end="109:34">bdrv_aio_writev</name><argument_list pos:start="109:35" pos:end="113:66">(<argument pos:start="109:36" pos:end="109:50"><expr pos:start="109:36" pos:end="109:50"><name pos:start="109:36" pos:end="109:50"><name pos:start="109:36" pos:end="109:36">s</name><operator pos:start="109:37" pos:end="109:38">-&gt;</operator><name pos:start="109:39" pos:end="109:42">qdev</name><operator pos:start="109:43" pos:end="109:43">.</operator><name pos:start="109:44" pos:end="109:47">conf</name><operator pos:start="109:48" pos:end="109:48">.</operator><name pos:start="109:49" pos:end="109:50">bs</name></name></expr></argument>, <argument pos:start="109:53" pos:end="109:64"><expr pos:start="109:53" pos:end="109:64"><name pos:start="109:53" pos:end="109:64"><name pos:start="109:53" pos:end="109:56">data</name><operator pos:start="109:57" pos:end="109:58">-&gt;</operator><name pos:start="109:59" pos:end="109:64">sector</name></name></expr></argument>,

                                   <argument pos:start="111:36" pos:end="111:46"><expr pos:start="111:36" pos:end="111:46"><operator pos:start="111:36" pos:end="111:36">&amp;</operator><name pos:start="111:37" pos:end="111:46"><name pos:start="111:37" pos:end="111:40">data</name><operator pos:start="111:41" pos:end="111:42">-&gt;</operator><name pos:start="111:43" pos:end="111:46">qiov</name></name></expr></argument>, <argument pos:start="111:49" pos:end="111:71"><expr pos:start="111:49" pos:end="111:71"><name pos:start="111:49" pos:end="111:65"><name pos:start="111:49" pos:end="111:52">data</name><operator pos:start="111:53" pos:end="111:54">-&gt;</operator><name pos:start="111:55" pos:end="111:57">iov</name><operator pos:start="111:58" pos:end="111:58">.</operator><name pos:start="111:59" pos:end="111:65">iov_len</name></name> <operator pos:start="111:67" pos:end="111:67">/</operator> <literal type="number" pos:start="111:69" pos:end="111:71">512</literal></expr></argument>,

                                   <argument pos:start="113:36" pos:end="113:59"><expr pos:start="113:36" pos:end="113:59"><name pos:start="113:36" pos:end="113:59">scsi_write_same_complete</name></expr></argument>, <argument pos:start="113:62" pos:end="113:65"><expr pos:start="113:62" pos:end="113:65"><name pos:start="113:62" pos:end="113:65">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
