<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21787.c" pos:tabs="8"><function pos:start="1:1" pos:end="75:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:35">compute_antialias_fixed</name><parameter_list pos:start="1:36" pos:end="1:71">(<parameter pos:start="1:37" pos:end="1:55"><decl pos:start="1:37" pos:end="1:55"><type pos:start="1:37" pos:end="1:55"><name pos:start="1:37" pos:end="1:52">MPADecodeContext</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:55">s</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:70"><decl pos:start="1:58" pos:end="1:70"><type pos:start="1:58" pos:end="1:70"><name pos:start="1:58" pos:end="1:67">GranuleDef</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:70">g</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="75:1">{<block_content pos:start="5:5" pos:end="73:5">

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">int32_t</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:16">ptr</name></decl>, <decl pos:start="5:19" pos:end="5:22"><type ref="prev" pos:start="5:5" pos:end="5:13"><modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:22">csa</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:13"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">n</name></decl>, <decl pos:start="7:12" pos:end="7:12"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:12">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:40">/* we antialias only "long" bands */</comment>

    <if_stmt pos:start="13:5" pos:end="27:5"><if pos:start="13:5" pos:end="23:5">if <condition pos:start="13:8" pos:end="13:27">(<expr pos:start="13:9" pos:end="13:26"><name pos:start="13:9" pos:end="13:21"><name pos:start="13:9" pos:end="13:9">g</name><operator pos:start="13:10" pos:end="13:11">-&gt;</operator><name pos:start="13:12" pos:end="13:21">block_type</name></name> <operator pos:start="13:23" pos:end="13:24">==</operator> <literal type="number" pos:start="13:26" pos:end="13:26">2</literal></expr>)</condition> <block pos:start="13:29" pos:end="23:5">{<block_content pos:start="15:9" pos:end="21:14">

        <if_stmt pos:start="15:9" pos:end="17:19"><if pos:start="15:9" pos:end="17:19">if <condition pos:start="15:12" pos:end="15:29">(<expr pos:start="15:13" pos:end="15:28"><operator pos:start="15:13" pos:end="15:13">!</operator><name pos:start="15:14" pos:end="15:28"><name pos:start="15:14" pos:end="15:14">g</name><operator pos:start="15:15" pos:end="15:16">-&gt;</operator><name pos:start="15:17" pos:end="15:28">switch_point</name></name></expr>)</condition><block type="pseudo" pos:start="17:13" pos:end="17:19"><block_content pos:start="17:13" pos:end="17:19">

            <return pos:start="17:13" pos:end="17:19">return;</return></block_content></block></if></if_stmt>

        <comment type="block" pos:start="19:9" pos:end="19:45">/* XXX: check this for 8000Hz case */</comment>

        <expr_stmt pos:start="21:9" pos:end="21:14"><expr pos:start="21:9" pos:end="21:13"><name pos:start="21:9" pos:end="21:9">n</name> <operator pos:start="21:11" pos:end="21:11">=</operator> <literal type="number" pos:start="21:13" pos:end="21:13">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="23:7" pos:end="27:5">else <block pos:start="23:12" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:24">

        <expr_stmt pos:start="25:9" pos:end="25:24"><expr pos:start="25:9" pos:end="25:23"><name pos:start="25:9" pos:end="25:9">n</name> <operator pos:start="25:11" pos:end="25:11">=</operator> <name pos:start="25:13" pos:end="25:19">SBLIMIT</name> <operator pos:start="25:21" pos:end="25:21">-</operator> <literal type="number" pos:start="25:23" pos:end="25:23">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:28"><expr pos:start="31:5" pos:end="31:27"><name pos:start="31:5" pos:end="31:7">ptr</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <name pos:start="31:11" pos:end="31:22"><name pos:start="31:11" pos:end="31:11">g</name><operator pos:start="31:12" pos:end="31:13">-&gt;</operator><name pos:start="31:14" pos:end="31:22">sb_hybrid</name></name> <operator pos:start="31:24" pos:end="31:24">+</operator> <literal type="number" pos:start="31:26" pos:end="31:27">18</literal></expr>;</expr_stmt>

    <for pos:start="33:5" pos:end="73:5">for<control pos:start="33:8" pos:end="33:24">(<init pos:start="33:9" pos:end="33:14"><expr pos:start="33:9" pos:end="33:13"><name pos:start="33:9" pos:end="33:9">i</name> <operator pos:start="33:11" pos:end="33:11">=</operator> <name pos:start="33:13" pos:end="33:13">n</name></expr>;</init><condition pos:start="33:15" pos:end="33:20"><expr pos:start="33:15" pos:end="33:19"><name pos:start="33:15" pos:end="33:15">i</name> <operator pos:start="33:17" pos:end="33:17">&gt;</operator> <literal type="number" pos:start="33:19" pos:end="33:19">0</literal></expr>;</condition><incr pos:start="33:21" pos:end="33:23"><expr pos:start="33:21" pos:end="33:23"><name pos:start="33:21" pos:end="33:21">i</name><operator pos:start="33:22" pos:end="33:23">--</operator></expr></incr>)</control> <block pos:start="33:26" pos:end="73:5">{<block_content pos:start="35:9" pos:end="71:18">

        <decl_stmt pos:start="35:9" pos:end="35:29"><decl pos:start="35:9" pos:end="35:16"><type pos:start="35:9" pos:end="35:11"><name pos:start="35:9" pos:end="35:11">int</name></type> <name pos:start="35:13" pos:end="35:16">tmp0</name></decl>, <decl pos:start="35:19" pos:end="35:22"><type ref="prev" pos:start="35:9" pos:end="35:11"/><name pos:start="35:19" pos:end="35:22">tmp1</name></decl>, <decl pos:start="35:25" pos:end="35:28"><type ref="prev" pos:start="35:9" pos:end="35:11"/><name pos:start="35:25" pos:end="35:28">tmp2</name></decl>;</decl_stmt>

        <expr_stmt pos:start="37:9" pos:end="50:0"><expr pos:start="37:9" pos:end="37:30"><name pos:start="37:9" pos:end="37:11">csa</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <operator pos:start="37:15" pos:end="37:15">&amp;</operator><name pos:start="37:16" pos:end="37:30"><name pos:start="37:16" pos:end="37:24">csa_table</name><index pos:start="37:25" pos:end="37:27">[<expr pos:start="37:26" pos:end="37:26"><literal type="number" pos:start="37:26" pos:end="37:26">0</literal></expr>]</index><index pos:start="37:28" pos:end="37:30">[<expr pos:start="37:29" pos:end="37:29"><literal type="number" pos:start="37:29" pos:end="37:29">0</literal></expr>]</index></name></expr>;</expr_stmt>

<cpp:define pos:start="39:1" pos:end="49:58">#<cpp:directive pos:start="39:2" pos:end="39:7">define</cpp:directive> <cpp:macro pos:start="39:9" pos:end="39:17"><name pos:start="39:9" pos:end="39:14">INT_AA</name><parameter_list pos:start="39:15" pos:end="39:17">(<parameter pos:start="39:16" pos:end="39:16"><type pos:start="39:16" pos:end="39:16"><name pos:start="39:16" pos:end="39:16">j</name></type></parameter>)</parameter_list></cpp:macro> \

            <cpp:value pos:start="41:13" pos:end="49:58">tmp0 = ptr[-1-j];\

            tmp1 = ptr[   j];\

            tmp2= MULH(tmp0 + tmp1, csa[0+4*j]);\

            ptr[-1-j] = 4*(tmp2 - MULH(tmp1, csa[2+4*j]));\

            ptr[   j] = 4*(tmp2 + MULH(tmp0, csa[3+4*j]));</cpp:value></cpp:define>



        <macro pos:start="53:9" pos:end="53:17"><name pos:start="53:9" pos:end="53:14">INT_AA</name><argument_list pos:start="53:15" pos:end="53:17">(<argument pos:start="53:16" pos:end="53:16"><literal type="number" pos:start="53:16" pos:end="53:16">0</literal></argument>)</argument_list></macro>

        <macro pos:start="55:9" pos:end="55:17"><name pos:start="55:9" pos:end="55:14">INT_AA</name><argument_list pos:start="55:15" pos:end="55:17">(<argument pos:start="55:16" pos:end="55:16"><literal type="number" pos:start="55:16" pos:end="55:16">1</literal></argument>)</argument_list></macro>

        <macro pos:start="57:9" pos:end="57:17"><name pos:start="57:9" pos:end="57:14">INT_AA</name><argument_list pos:start="57:15" pos:end="57:17">(<argument pos:start="57:16" pos:end="57:16"><literal type="number" pos:start="57:16" pos:end="57:16">2</literal></argument>)</argument_list></macro>

        <macro pos:start="59:9" pos:end="59:17"><name pos:start="59:9" pos:end="59:14">INT_AA</name><argument_list pos:start="59:15" pos:end="59:17">(<argument pos:start="59:16" pos:end="59:16"><literal type="number" pos:start="59:16" pos:end="59:16">3</literal></argument>)</argument_list></macro>

        <macro pos:start="61:9" pos:end="61:17"><name pos:start="61:9" pos:end="61:14">INT_AA</name><argument_list pos:start="61:15" pos:end="61:17">(<argument pos:start="61:16" pos:end="61:16"><literal type="number" pos:start="61:16" pos:end="61:16">4</literal></argument>)</argument_list></macro>

        <macro pos:start="63:9" pos:end="63:17"><name pos:start="63:9" pos:end="63:14">INT_AA</name><argument_list pos:start="63:15" pos:end="63:17">(<argument pos:start="63:16" pos:end="63:16"><literal type="number" pos:start="63:16" pos:end="63:16">5</literal></argument>)</argument_list></macro>

        <macro pos:start="65:9" pos:end="65:17"><name pos:start="65:9" pos:end="65:14">INT_AA</name><argument_list pos:start="65:15" pos:end="65:17">(<argument pos:start="65:16" pos:end="65:16"><literal type="number" pos:start="65:16" pos:end="65:16">6</literal></argument>)</argument_list></macro>

        <macro pos:start="67:9" pos:end="67:17"><name pos:start="67:9" pos:end="67:14">INT_AA</name><argument_list pos:start="67:15" pos:end="67:17">(<argument pos:start="67:16" pos:end="67:16"><literal type="number" pos:start="67:16" pos:end="67:16">7</literal></argument>)</argument_list></macro>



        <expr_stmt pos:start="71:9" pos:end="71:18"><expr pos:start="71:9" pos:end="71:17"><name pos:start="71:9" pos:end="71:11">ptr</name> <operator pos:start="71:13" pos:end="71:14">+=</operator> <literal type="number" pos:start="71:16" pos:end="71:17">18</literal></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
