<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18012.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:26">ff_vorbiscomment_write</name><parameter_list pos:start="1:27" pos:end="3:53">(<parameter pos:start="1:28" pos:end="1:38"><decl pos:start="1:28" pos:end="1:38"><type pos:start="1:28" pos:end="1:38"><name pos:start="1:28" pos:end="1:34">uint8_t</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier><modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">p</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:56"><decl pos:start="1:41" pos:end="1:56"><type pos:start="1:41" pos:end="1:56"><name pos:start="1:41" pos:end="1:52">AVDictionary</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier><modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:56">m</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:52"><decl pos:start="3:28" pos:end="3:52"><type pos:start="3:28" pos:end="3:52"><specifier pos:start="3:28" pos:end="3:32">const</specifier> <name pos:start="3:34" pos:end="3:37">char</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:52">vendor_string</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="41:1">{<block_content pos:start="7:5" pos:end="39:13">

    <expr_stmt pos:start="7:5" pos:end="7:50"><expr pos:start="7:5" pos:end="7:49"><call pos:start="7:5" pos:end="7:49"><name pos:start="7:5" pos:end="7:23">bytestream_put_le32</name><argument_list pos:start="7:24" pos:end="7:49">(<argument pos:start="7:25" pos:end="7:25"><expr pos:start="7:25" pos:end="7:25"><name pos:start="7:25" pos:end="7:25">p</name></expr></argument>, <argument pos:start="7:28" pos:end="7:48"><expr pos:start="7:28" pos:end="7:48"><call pos:start="7:28" pos:end="7:48"><name pos:start="7:28" pos:end="7:33">strlen</name><argument_list pos:start="7:34" pos:end="7:48">(<argument pos:start="7:35" pos:end="7:47"><expr pos:start="7:35" pos:end="7:47"><name pos:start="7:35" pos:end="7:47">vendor_string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="9:5" pos:end="9:67"><expr pos:start="9:5" pos:end="9:66"><call pos:start="9:5" pos:end="9:66"><name pos:start="9:5" pos:end="9:25">bytestream_put_buffer</name><argument_list pos:start="9:26" pos:end="9:66">(<argument pos:start="9:27" pos:end="9:27"><expr pos:start="9:27" pos:end="9:27"><name pos:start="9:27" pos:end="9:27">p</name></expr></argument>, <argument pos:start="9:30" pos:end="9:42"><expr pos:start="9:30" pos:end="9:42"><name pos:start="9:30" pos:end="9:42">vendor_string</name></expr></argument>, <argument pos:start="9:45" pos:end="9:65"><expr pos:start="9:45" pos:end="9:65"><call pos:start="9:45" pos:end="9:65"><name pos:start="9:45" pos:end="9:50">strlen</name><argument_list pos:start="9:51" pos:end="9:65">(<argument pos:start="9:52" pos:end="9:64"><expr pos:start="9:52" pos:end="9:64"><name pos:start="9:52" pos:end="9:64">vendor_string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="11:5" pos:end="37:34"><if pos:start="11:5" pos:end="35:5">if <condition pos:start="11:8" pos:end="11:11">(<expr pos:start="11:9" pos:end="11:10"><operator pos:start="11:9" pos:end="11:9">*</operator><name pos:start="11:10" pos:end="11:10">m</name></expr>)</condition> <block pos:start="11:13" pos:end="35:5">{<block_content pos:start="13:9" pos:end="33:9">

        <decl_stmt pos:start="13:9" pos:end="13:38"><decl pos:start="13:9" pos:end="13:37"><type pos:start="13:9" pos:end="13:11"><name pos:start="13:9" pos:end="13:11">int</name></type> <name pos:start="13:13" pos:end="13:17">count</name> <init pos:start="13:19" pos:end="13:37">= <expr pos:start="13:21" pos:end="13:37"><call pos:start="13:21" pos:end="13:37"><name pos:start="13:21" pos:end="13:33">av_dict_count</name><argument_list pos:start="13:34" pos:end="13:37">(<argument pos:start="13:35" pos:end="13:36"><expr pos:start="13:35" pos:end="13:36"><operator pos:start="13:35" pos:end="13:35">*</operator><name pos:start="13:36" pos:end="13:36">m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:38"><decl pos:start="15:9" pos:end="15:37"><type pos:start="15:9" pos:end="15:27"><name pos:start="15:9" pos:end="15:25">AVDictionaryEntry</name> <modifier pos:start="15:27" pos:end="15:27">*</modifier></type><name pos:start="15:28" pos:end="15:30">tag</name> <init pos:start="15:32" pos:end="15:37">= <expr pos:start="15:34" pos:end="15:37"><name pos:start="15:34" pos:end="15:37">NULL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="17:9" pos:end="17:38"><expr pos:start="17:9" pos:end="17:37"><call pos:start="17:9" pos:end="17:37"><name pos:start="17:9" pos:end="17:27">bytestream_put_le32</name><argument_list pos:start="17:28" pos:end="17:37">(<argument pos:start="17:29" pos:end="17:29"><expr pos:start="17:29" pos:end="17:29"><name pos:start="17:29" pos:end="17:29">p</name></expr></argument>, <argument pos:start="17:32" pos:end="17:36"><expr pos:start="17:32" pos:end="17:36"><name pos:start="17:32" pos:end="17:36">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <while pos:start="19:9" pos:end="33:9">while <condition pos:start="19:15" pos:end="19:71">(<expr pos:start="19:16" pos:end="19:70"><operator pos:start="19:16" pos:end="19:16">(</operator><name pos:start="19:17" pos:end="19:19">tag</name> <operator pos:start="19:21" pos:end="19:21">=</operator> <call pos:start="19:23" pos:end="19:69"><name pos:start="19:23" pos:end="19:33">av_dict_get</name><argument_list pos:start="19:34" pos:end="19:69">(<argument pos:start="19:35" pos:end="19:36"><expr pos:start="19:35" pos:end="19:36"><operator pos:start="19:35" pos:end="19:35">*</operator><name pos:start="19:36" pos:end="19:36">m</name></expr></argument>, <argument pos:start="19:39" pos:end="19:40"><expr pos:start="19:39" pos:end="19:40"><literal type="string" pos:start="19:39" pos:end="19:40">""</literal></expr></argument>, <argument pos:start="19:43" pos:end="19:45"><expr pos:start="19:43" pos:end="19:45"><name pos:start="19:43" pos:end="19:45">tag</name></expr></argument>, <argument pos:start="19:48" pos:end="19:68"><expr pos:start="19:48" pos:end="19:68"><name pos:start="19:48" pos:end="19:68">AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator pos:start="19:70" pos:end="19:70">)</operator></expr>)</condition> <block pos:start="19:73" pos:end="33:9">{<block_content pos:start="21:13" pos:end="31:55">

            <decl_stmt pos:start="21:13" pos:end="21:49"><decl pos:start="21:13" pos:end="21:48"><type pos:start="21:13" pos:end="21:24"><name pos:start="21:13" pos:end="21:20">unsigned</name> <name pos:start="21:22" pos:end="21:24">int</name></type> <name pos:start="21:26" pos:end="21:29">len1</name> <init pos:start="21:31" pos:end="21:48">= <expr pos:start="21:33" pos:end="21:48"><call pos:start="21:33" pos:end="21:48"><name pos:start="21:33" pos:end="21:38">strlen</name><argument_list pos:start="21:39" pos:end="21:48">(<argument pos:start="21:40" pos:end="21:47"><expr pos:start="21:40" pos:end="21:47"><name pos:start="21:40" pos:end="21:47"><name pos:start="21:40" pos:end="21:42">tag</name><operator pos:start="21:43" pos:end="21:44">-&gt;</operator><name pos:start="21:45" pos:end="21:47">key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="23:13" pos:end="23:51"><decl pos:start="23:13" pos:end="23:50"><type pos:start="23:13" pos:end="23:24"><name pos:start="23:13" pos:end="23:20">unsigned</name> <name pos:start="23:22" pos:end="23:24">int</name></type> <name pos:start="23:26" pos:end="23:29">len2</name> <init pos:start="23:31" pos:end="23:50">= <expr pos:start="23:33" pos:end="23:50"><call pos:start="23:33" pos:end="23:50"><name pos:start="23:33" pos:end="23:38">strlen</name><argument_list pos:start="23:39" pos:end="23:50">(<argument pos:start="23:40" pos:end="23:49"><expr pos:start="23:40" pos:end="23:49"><name pos:start="23:40" pos:end="23:49"><name pos:start="23:40" pos:end="23:42">tag</name><operator pos:start="23:43" pos:end="23:44">-&gt;</operator><name pos:start="23:45" pos:end="23:49">value</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="25:13" pos:end="25:48"><expr pos:start="25:13" pos:end="25:47"><call pos:start="25:13" pos:end="25:47"><name pos:start="25:13" pos:end="25:31">bytestream_put_le32</name><argument_list pos:start="25:32" pos:end="25:47">(<argument pos:start="25:33" pos:end="25:33"><expr pos:start="25:33" pos:end="25:33"><name pos:start="25:33" pos:end="25:33">p</name></expr></argument>, <argument pos:start="25:36" pos:end="25:46"><expr pos:start="25:36" pos:end="25:46"><name pos:start="25:36" pos:end="25:39">len1</name><operator pos:start="25:40" pos:end="25:40">+</operator><literal type="number" pos:start="25:41" pos:end="25:42">1</literal><operator pos:start="25:42" pos:end="25:42">+</operator><name pos:start="25:43" pos:end="25:46">len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="27:13" pos:end="27:53"><expr pos:start="27:13" pos:end="27:52"><call pos:start="27:13" pos:end="27:52"><name pos:start="27:13" pos:end="27:33">bytestream_put_buffer</name><argument_list pos:start="27:34" pos:end="27:52">(<argument pos:start="27:35" pos:end="27:35"><expr pos:start="27:35" pos:end="27:35"><name pos:start="27:35" pos:end="27:35">p</name></expr></argument>, <argument pos:start="27:38" pos:end="27:45"><expr pos:start="27:38" pos:end="27:45"><name pos:start="27:38" pos:end="27:45"><name pos:start="27:38" pos:end="27:40">tag</name><operator pos:start="27:41" pos:end="27:42">-&gt;</operator><name pos:start="27:43" pos:end="27:45">key</name></name></expr></argument>, <argument pos:start="27:48" pos:end="27:51"><expr pos:start="27:48" pos:end="27:51"><name pos:start="27:48" pos:end="27:51">len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="29:13" pos:end="29:40"><expr pos:start="29:13" pos:end="29:39"><call pos:start="29:13" pos:end="29:39"><name pos:start="29:13" pos:end="29:31">bytestream_put_byte</name><argument_list pos:start="29:32" pos:end="29:39">(<argument pos:start="29:33" pos:end="29:33"><expr pos:start="29:33" pos:end="29:33"><name pos:start="29:33" pos:end="29:33">p</name></expr></argument>, <argument pos:start="29:36" pos:end="29:38"><expr pos:start="29:36" pos:end="29:38"><literal type="char" pos:start="29:36" pos:end="29:38">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="31:13" pos:end="31:55"><expr pos:start="31:13" pos:end="31:54"><call pos:start="31:13" pos:end="31:54"><name pos:start="31:13" pos:end="31:33">bytestream_put_buffer</name><argument_list pos:start="31:34" pos:end="31:54">(<argument pos:start="31:35" pos:end="31:35"><expr pos:start="31:35" pos:end="31:35"><name pos:start="31:35" pos:end="31:35">p</name></expr></argument>, <argument pos:start="31:38" pos:end="31:47"><expr pos:start="31:38" pos:end="31:47"><name pos:start="31:38" pos:end="31:47"><name pos:start="31:38" pos:end="31:40">tag</name><operator pos:start="31:41" pos:end="31:42">-&gt;</operator><name pos:start="31:43" pos:end="31:47">value</name></name></expr></argument>, <argument pos:start="31:50" pos:end="31:53"><expr pos:start="31:50" pos:end="31:53"><name pos:start="31:50" pos:end="31:53">len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></if> <else pos:start="35:7" pos:end="37:34">else<block type="pseudo" pos:start="37:9" pos:end="37:34"><block_content pos:start="37:9" pos:end="37:34">

        <expr_stmt pos:start="37:9" pos:end="37:34"><expr pos:start="37:9" pos:end="37:33"><call pos:start="37:9" pos:end="37:33"><name pos:start="37:9" pos:end="37:27">bytestream_put_le32</name><argument_list pos:start="37:28" pos:end="37:33">(<argument pos:start="37:29" pos:end="37:29"><expr pos:start="37:29" pos:end="37:29"><name pos:start="37:29" pos:end="37:29">p</name></expr></argument>, <argument pos:start="37:32" pos:end="37:32"><expr pos:start="37:32" pos:end="37:32"><literal type="number" pos:start="37:32" pos:end="37:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <return pos:start="39:5" pos:end="39:13">return <expr pos:start="39:12" pos:end="39:12"><literal type="number" pos:start="39:12" pos:end="39:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
