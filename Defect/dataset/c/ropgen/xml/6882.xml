<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6882.c" pos:tabs="8"><function pos:start="1:1" pos:end="100:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">h263_decode_gob_header</name><parameter_list pos:start="1:34" pos:end="1:52">(<parameter pos:start="1:35" pos:end="1:51"><decl pos:start="1:35" pos:end="1:51"><type pos:start="1:35" pos:end="1:50"><name pos:start="1:35" pos:end="1:48">MpegEncContext</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:51">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="100:1">{<block_content pos:start="5:5" pos:end="98:13">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:16">int</name></type> <name pos:start="5:18" pos:end="5:20">val</name></decl>, <decl pos:start="5:23" pos:end="5:32"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:23" pos:end="5:32">gob_number</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:13"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">left</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:34">/* Check for GOB Start Code */</comment>

    <expr_stmt pos:start="13:5" pos:end="13:32"><expr pos:start="13:5" pos:end="13:31"><name pos:start="13:5" pos:end="13:7">val</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <call pos:start="13:11" pos:end="13:31"><name pos:start="13:11" pos:end="13:19">show_bits</name><argument_list pos:start="13:20" pos:end="13:31">(<argument pos:start="13:21" pos:end="13:26"><expr pos:start="13:21" pos:end="13:26"><operator pos:start="13:21" pos:end="13:21">&amp;</operator><name pos:start="13:22" pos:end="13:26"><name pos:start="13:22" pos:end="13:22">s</name><operator pos:start="13:23" pos:end="13:24">-&gt;</operator><name pos:start="13:25" pos:end="13:26">gb</name></name></expr></argument>, <argument pos:start="13:29" pos:end="13:30"><expr pos:start="13:29" pos:end="13:30"><literal type="number" pos:start="13:29" pos:end="13:30">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="17:18"><if pos:start="15:5" pos:end="17:18">if<condition pos:start="15:7" pos:end="15:11">(<expr pos:start="15:8" pos:end="15:10"><name pos:start="15:8" pos:end="15:10">val</name></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:18"><block_content pos:start="17:9" pos:end="17:18">

        <return pos:start="17:9" pos:end="17:18">return <expr pos:start="17:16" pos:end="17:17"><operator pos:start="17:16" pos:end="17:16">-</operator><literal type="number" pos:start="17:17" pos:end="17:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



        <comment type="block" pos:start="21:9" pos:end="21:49">/* We have a GBSC probably with GSTUFF */</comment>

    <expr_stmt pos:start="23:5" pos:end="23:26"><expr pos:start="23:5" pos:end="23:25"><call pos:start="23:5" pos:end="23:25"><name pos:start="23:5" pos:end="23:13">skip_bits</name><argument_list pos:start="23:14" pos:end="23:25">(<argument pos:start="23:15" pos:end="23:20"><expr pos:start="23:15" pos:end="23:20"><operator pos:start="23:15" pos:end="23:15">&amp;</operator><name pos:start="23:16" pos:end="23:20"><name pos:start="23:16" pos:end="23:16">s</name><operator pos:start="23:17" pos:end="23:18">-&gt;</operator><name pos:start="23:19" pos:end="23:20">gb</name></name></expr></argument>, <argument pos:start="23:23" pos:end="23:24"><expr pos:start="23:23" pos:end="23:24"><literal type="number" pos:start="23:23" pos:end="23:24">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="23:28" pos:end="23:47">/* Drop the zeros */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:32"><expr pos:start="25:5" pos:end="25:31"><name pos:start="25:5" pos:end="25:8">left</name><operator pos:start="25:9" pos:end="25:9">=</operator> <call pos:start="25:11" pos:end="25:31"><name pos:start="25:11" pos:end="25:23">get_bits_left</name><argument_list pos:start="25:24" pos:end="25:31">(<argument pos:start="25:25" pos:end="25:30"><expr pos:start="25:25" pos:end="25:30"><operator pos:start="25:25" pos:end="25:25">&amp;</operator><name pos:start="25:26" pos:end="25:30"><name pos:start="25:26" pos:end="25:26">s</name><operator pos:start="25:27" pos:end="25:28">-&gt;</operator><name pos:start="25:29" pos:end="25:30">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <comment type="line" pos:start="28:5" pos:end="28:87">//MN: we must check the bits left or we might end in an infinite loop (or segfault)</comment>

    <for pos:start="30:5" pos:end="34:5">for<control pos:start="30:8" pos:end="30:25">(<init pos:start="30:9" pos:end="30:9">;</init><condition pos:start="30:10" pos:end="30:17"><expr pos:start="30:10" pos:end="30:16"><name pos:start="30:10" pos:end="30:13">left</name><operator pos:start="30:14" pos:end="30:14">&gt;</operator><literal type="number" pos:start="30:15" pos:end="30:16">13</literal></expr>;</condition> <incr pos:start="30:19" pos:end="30:24"><expr pos:start="30:19" pos:end="30:24"><name pos:start="30:19" pos:end="30:22">left</name><operator pos:start="30:23" pos:end="30:24">--</operator></expr></incr>)</control><block pos:start="30:26" pos:end="34:5">{<block_content pos:start="32:9" pos:end="32:36">

        <if_stmt pos:start="32:9" pos:end="32:36"><if pos:start="32:9" pos:end="32:36">if<condition pos:start="32:11" pos:end="32:29">(<expr pos:start="32:12" pos:end="32:28"><call pos:start="32:12" pos:end="32:28"><name pos:start="32:12" pos:end="32:20">get_bits1</name><argument_list pos:start="32:21" pos:end="32:28">(<argument pos:start="32:22" pos:end="32:27"><expr pos:start="32:22" pos:end="32:27"><operator pos:start="32:22" pos:end="32:22">&amp;</operator><name pos:start="32:23" pos:end="32:27"><name pos:start="32:23" pos:end="32:23">s</name><operator pos:start="32:24" pos:end="32:25">-&gt;</operator><name pos:start="32:26" pos:end="32:27">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="32:31" pos:end="32:36"><block_content pos:start="32:31" pos:end="32:36"> <break pos:start="32:31" pos:end="32:36">break;</break></block_content></block></if></if_stmt> <comment type="block" pos:start="32:38" pos:end="32:59">/* Seek the '1' bit */</comment>

    </block_content>}</block></for>

    <if_stmt pos:start="36:5" pos:end="38:18"><if pos:start="36:5" pos:end="38:18">if<condition pos:start="36:7" pos:end="36:16">(<expr pos:start="36:8" pos:end="36:15"><name pos:start="36:8" pos:end="36:11">left</name><operator pos:start="36:12" pos:end="36:13">&lt;=</operator><literal type="number" pos:start="36:14" pos:end="36:15">13</literal></expr>)</condition><block type="pseudo" pos:start="38:9" pos:end="38:18"><block_content pos:start="38:9" pos:end="38:18">

        <return pos:start="38:9" pos:end="38:18">return <expr pos:start="38:16" pos:end="38:17"><operator pos:start="38:16" pos:end="38:16">-</operator><literal type="number" pos:start="38:17" pos:end="38:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="42:5" pos:end="82:5"><if pos:start="42:5" pos:end="70:5">if<condition pos:start="42:7" pos:end="42:32">(<expr pos:start="42:8" pos:end="42:31"><name pos:start="42:8" pos:end="42:31"><name pos:start="42:8" pos:end="42:8">s</name><operator pos:start="42:9" pos:end="42:10">-&gt;</operator><name pos:start="42:11" pos:end="42:31">h263_slice_structured</name></name></expr>)</condition><block pos:start="42:33" pos:end="70:5">{<block_content pos:start="44:9" pos:end="68:29">

        <if_stmt pos:start="44:9" pos:end="46:22"><if pos:start="44:9" pos:end="46:22">if<condition pos:start="44:11" pos:end="44:59">(<expr pos:start="44:12" pos:end="44:58"><call pos:start="44:12" pos:end="44:55"><name pos:start="44:12" pos:end="44:23">check_marker</name><argument_list pos:start="44:24" pos:end="44:55">(<argument pos:start="44:25" pos:end="44:32"><expr pos:start="44:25" pos:end="44:32"><name pos:start="44:25" pos:end="44:32"><name pos:start="44:25" pos:end="44:25">s</name><operator pos:start="44:26" pos:end="44:27">-&gt;</operator><name pos:start="44:28" pos:end="44:32">avctx</name></name></expr></argument>, <argument pos:start="44:35" pos:end="44:40"><expr pos:start="44:35" pos:end="44:40"><operator pos:start="44:35" pos:end="44:35">&amp;</operator><name pos:start="44:36" pos:end="44:40"><name pos:start="44:36" pos:end="44:36">s</name><operator pos:start="44:37" pos:end="44:38">-&gt;</operator><name pos:start="44:39" pos:end="44:40">gb</name></name></expr></argument>, <argument pos:start="44:43" pos:end="44:54"><expr pos:start="44:43" pos:end="44:54"><literal type="string" pos:start="44:43" pos:end="44:54">"before MBA"</literal></expr></argument>)</argument_list></call><operator pos:start="44:56" pos:end="44:57">==</operator><literal type="number" pos:start="44:58" pos:end="44:58">0</literal></expr>)</condition><block type="pseudo" pos:start="46:13" pos:end="46:22"><block_content pos:start="46:13" pos:end="46:22">

            <return pos:start="46:13" pos:end="46:22">return <expr pos:start="46:20" pos:end="46:21"><operator pos:start="46:20" pos:end="46:20">-</operator><literal type="number" pos:start="46:21" pos:end="46:21">1</literal></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="50:9" pos:end="50:30"><expr pos:start="50:9" pos:end="50:29"><call pos:start="50:9" pos:end="50:29"><name pos:start="50:9" pos:end="50:26">ff_h263_decode_mba</name><argument_list pos:start="50:27" pos:end="50:29">(<argument pos:start="50:28" pos:end="50:28"><expr pos:start="50:28" pos:end="50:28"><name pos:start="50:28" pos:end="50:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="54:9" pos:end="58:26"><if pos:start="54:9" pos:end="58:26">if<condition pos:start="54:11" pos:end="54:28">(<expr pos:start="54:12" pos:end="54:27"><name pos:start="54:12" pos:end="54:20"><name pos:start="54:12" pos:end="54:12">s</name><operator pos:start="54:13" pos:end="54:14">-&gt;</operator><name pos:start="54:15" pos:end="54:20">mb_num</name></name> <operator pos:start="54:22" pos:end="54:22">&gt;</operator> <literal type="number" pos:start="54:24" pos:end="54:27">1583</literal></expr>)</condition><block type="pseudo" pos:start="56:13" pos:end="58:26"><block_content pos:start="56:13" pos:end="58:26">

            <if_stmt pos:start="56:13" pos:end="58:26"><if pos:start="56:13" pos:end="58:26">if<condition pos:start="56:15" pos:end="56:62">(<expr pos:start="56:16" pos:end="56:61"><call pos:start="56:16" pos:end="56:58"><name pos:start="56:16" pos:end="56:27">check_marker</name><argument_list pos:start="56:28" pos:end="56:58">(<argument pos:start="56:29" pos:end="56:36"><expr pos:start="56:29" pos:end="56:36"><name pos:start="56:29" pos:end="56:36"><name pos:start="56:29" pos:end="56:29">s</name><operator pos:start="56:30" pos:end="56:31">-&gt;</operator><name pos:start="56:32" pos:end="56:36">avctx</name></name></expr></argument>, <argument pos:start="56:39" pos:end="56:44"><expr pos:start="56:39" pos:end="56:44"><operator pos:start="56:39" pos:end="56:39">&amp;</operator><name pos:start="56:40" pos:end="56:44"><name pos:start="56:40" pos:end="56:40">s</name><operator pos:start="56:41" pos:end="56:42">-&gt;</operator><name pos:start="56:43" pos:end="56:44">gb</name></name></expr></argument>, <argument pos:start="56:47" pos:end="56:57"><expr pos:start="56:47" pos:end="56:57"><literal type="string" pos:start="56:47" pos:end="56:57">"after MBA"</literal></expr></argument>)</argument_list></call><operator pos:start="56:59" pos:end="56:60">==</operator><literal type="number" pos:start="56:61" pos:end="56:61">0</literal></expr>)</condition><block type="pseudo" pos:start="58:17" pos:end="58:26"><block_content pos:start="58:17" pos:end="58:26">

                <return pos:start="58:17" pos:end="58:26">return <expr pos:start="58:24" pos:end="58:25"><operator pos:start="58:24" pos:end="58:24">-</operator><literal type="number" pos:start="58:25" pos:end="58:25">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="62:9" pos:end="62:40"><expr pos:start="62:9" pos:end="62:39"><name pos:start="62:9" pos:end="62:17"><name pos:start="62:9" pos:end="62:9">s</name><operator pos:start="62:10" pos:end="62:11">-&gt;</operator><name pos:start="62:12" pos:end="62:17">qscale</name></name> <operator pos:start="62:19" pos:end="62:19">=</operator> <call pos:start="62:21" pos:end="62:39"><name pos:start="62:21" pos:end="62:28">get_bits</name><argument_list pos:start="62:29" pos:end="62:39">(<argument pos:start="62:30" pos:end="62:35"><expr pos:start="62:30" pos:end="62:35"><operator pos:start="62:30" pos:end="62:30">&amp;</operator><name pos:start="62:31" pos:end="62:35"><name pos:start="62:31" pos:end="62:31">s</name><operator pos:start="62:32" pos:end="62:33">-&gt;</operator><name pos:start="62:34" pos:end="62:35">gb</name></name></expr></argument>, <argument pos:start="62:38" pos:end="62:38"><expr pos:start="62:38" pos:end="62:38"><literal type="number" pos:start="62:38" pos:end="62:38">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="62:42" pos:end="62:53">/* SQUANT */</comment>

        <if_stmt pos:start="64:9" pos:end="66:22"><if pos:start="64:9" pos:end="66:22">if<condition pos:start="64:11" pos:end="64:61">(<expr pos:start="64:12" pos:end="64:60"><call pos:start="64:12" pos:end="64:57"><name pos:start="64:12" pos:end="64:23">check_marker</name><argument_list pos:start="64:24" pos:end="64:57">(<argument pos:start="64:25" pos:end="64:32"><expr pos:start="64:25" pos:end="64:32"><name pos:start="64:25" pos:end="64:32"><name pos:start="64:25" pos:end="64:25">s</name><operator pos:start="64:26" pos:end="64:27">-&gt;</operator><name pos:start="64:28" pos:end="64:32">avctx</name></name></expr></argument>, <argument pos:start="64:35" pos:end="64:40"><expr pos:start="64:35" pos:end="64:40"><operator pos:start="64:35" pos:end="64:35">&amp;</operator><name pos:start="64:36" pos:end="64:40"><name pos:start="64:36" pos:end="64:36">s</name><operator pos:start="64:37" pos:end="64:38">-&gt;</operator><name pos:start="64:39" pos:end="64:40">gb</name></name></expr></argument>, <argument pos:start="64:43" pos:end="64:56"><expr pos:start="64:43" pos:end="64:56"><literal type="string" pos:start="64:43" pos:end="64:56">"after SQUANT"</literal></expr></argument>)</argument_list></call><operator pos:start="64:58" pos:end="64:59">==</operator><literal type="number" pos:start="64:60" pos:end="64:60">0</literal></expr>)</condition><block type="pseudo" pos:start="66:13" pos:end="66:22"><block_content pos:start="66:13" pos:end="66:22">

            <return pos:start="66:13" pos:end="66:22">return <expr pos:start="66:20" pos:end="66:21"><operator pos:start="66:20" pos:end="66:20">-</operator><literal type="number" pos:start="66:21" pos:end="66:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="68:9" pos:end="68:29"><expr pos:start="68:9" pos:end="68:28"><call pos:start="68:9" pos:end="68:28"><name pos:start="68:9" pos:end="68:17">skip_bits</name><argument_list pos:start="68:18" pos:end="68:28">(<argument pos:start="68:19" pos:end="68:24"><expr pos:start="68:19" pos:end="68:24"><operator pos:start="68:19" pos:end="68:19">&amp;</operator><name pos:start="68:20" pos:end="68:24"><name pos:start="68:20" pos:end="68:20">s</name><operator pos:start="68:21" pos:end="68:22">-&gt;</operator><name pos:start="68:23" pos:end="68:24">gb</name></name></expr></argument>, <argument pos:start="68:27" pos:end="68:27"><expr pos:start="68:27" pos:end="68:27"><literal type="number" pos:start="68:27" pos:end="68:27">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="68:31" pos:end="68:40">/* GFID */</comment>

    </block_content>}</block></if><else pos:start="70:6" pos:end="82:5">else<block pos:start="70:10" pos:end="82:5">{<block_content pos:start="72:9" pos:end="80:40">

        <expr_stmt pos:start="72:9" pos:end="72:41"><expr pos:start="72:9" pos:end="72:40"><name pos:start="72:9" pos:end="72:18">gob_number</name> <operator pos:start="72:20" pos:end="72:20">=</operator> <call pos:start="72:22" pos:end="72:40"><name pos:start="72:22" pos:end="72:29">get_bits</name><argument_list pos:start="72:30" pos:end="72:40">(<argument pos:start="72:31" pos:end="72:36"><expr pos:start="72:31" pos:end="72:36"><operator pos:start="72:31" pos:end="72:31">&amp;</operator><name pos:start="72:32" pos:end="72:36"><name pos:start="72:32" pos:end="72:32">s</name><operator pos:start="72:33" pos:end="72:34">-&gt;</operator><name pos:start="72:35" pos:end="72:36">gb</name></name></expr></argument>, <argument pos:start="72:39" pos:end="72:39"><expr pos:start="72:39" pos:end="72:39"><literal type="number" pos:start="72:39" pos:end="72:39">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="72:43" pos:end="72:50">/* GN */</comment>

        <expr_stmt pos:start="74:9" pos:end="74:19"><expr pos:start="74:9" pos:end="74:18"><name pos:start="74:9" pos:end="74:15"><name pos:start="74:9" pos:end="74:9">s</name><operator pos:start="74:10" pos:end="74:11">-&gt;</operator><name pos:start="74:12" pos:end="74:15">mb_x</name></name><operator pos:start="74:16" pos:end="74:16">=</operator> <literal type="number" pos:start="74:18" pos:end="74:18">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="76:9" pos:end="76:42"><expr pos:start="76:9" pos:end="76:41"><name pos:start="76:9" pos:end="76:15"><name pos:start="76:9" pos:end="76:9">s</name><operator pos:start="76:10" pos:end="76:11">-&gt;</operator><name pos:start="76:12" pos:end="76:15">mb_y</name></name><operator pos:start="76:16" pos:end="76:16">=</operator> <name pos:start="76:18" pos:end="76:29"><name pos:start="76:18" pos:end="76:18">s</name><operator pos:start="76:19" pos:end="76:20">-&gt;</operator><name pos:start="76:21" pos:end="76:29">gob_index</name></name><operator pos:start="76:30" pos:end="76:30">*</operator> <name pos:start="76:32" pos:end="76:41">gob_number</name></expr>;</expr_stmt>

        <expr_stmt pos:start="78:9" pos:end="78:29"><expr pos:start="78:9" pos:end="78:28"><call pos:start="78:9" pos:end="78:28"><name pos:start="78:9" pos:end="78:17">skip_bits</name><argument_list pos:start="78:18" pos:end="78:28">(<argument pos:start="78:19" pos:end="78:24"><expr pos:start="78:19" pos:end="78:24"><operator pos:start="78:19" pos:end="78:19">&amp;</operator><name pos:start="78:20" pos:end="78:24"><name pos:start="78:20" pos:end="78:20">s</name><operator pos:start="78:21" pos:end="78:22">-&gt;</operator><name pos:start="78:23" pos:end="78:24">gb</name></name></expr></argument>, <argument pos:start="78:27" pos:end="78:27"><expr pos:start="78:27" pos:end="78:27"><literal type="number" pos:start="78:27" pos:end="78:27">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="78:31" pos:end="78:40">/* GFID */</comment>

        <expr_stmt pos:start="80:9" pos:end="80:40"><expr pos:start="80:9" pos:end="80:39"><name pos:start="80:9" pos:end="80:17"><name pos:start="80:9" pos:end="80:9">s</name><operator pos:start="80:10" pos:end="80:11">-&gt;</operator><name pos:start="80:12" pos:end="80:17">qscale</name></name> <operator pos:start="80:19" pos:end="80:19">=</operator> <call pos:start="80:21" pos:end="80:39"><name pos:start="80:21" pos:end="80:28">get_bits</name><argument_list pos:start="80:29" pos:end="80:39">(<argument pos:start="80:30" pos:end="80:35"><expr pos:start="80:30" pos:end="80:35"><operator pos:start="80:30" pos:end="80:30">&amp;</operator><name pos:start="80:31" pos:end="80:35"><name pos:start="80:31" pos:end="80:31">s</name><operator pos:start="80:32" pos:end="80:33">-&gt;</operator><name pos:start="80:34" pos:end="80:35">gb</name></name></expr></argument>, <argument pos:start="80:38" pos:end="80:38"><expr pos:start="80:38" pos:end="80:38"><literal type="number" pos:start="80:38" pos:end="80:38">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="80:42" pos:end="80:53">/* GQUANT */</comment>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="86:5" pos:end="88:18"><if pos:start="86:5" pos:end="88:18">if<condition pos:start="86:7" pos:end="86:31">(<expr pos:start="86:8" pos:end="86:30"><name pos:start="86:8" pos:end="86:14"><name pos:start="86:8" pos:end="86:8">s</name><operator pos:start="86:9" pos:end="86:10">-&gt;</operator><name pos:start="86:11" pos:end="86:14">mb_y</name></name> <operator pos:start="86:16" pos:end="86:17">&gt;=</operator> <name pos:start="86:19" pos:end="86:30"><name pos:start="86:19" pos:end="86:19">s</name><operator pos:start="86:20" pos:end="86:21">-&gt;</operator><name pos:start="86:22" pos:end="86:30">mb_height</name></name></expr>)</condition><block type="pseudo" pos:start="88:9" pos:end="88:18"><block_content pos:start="88:9" pos:end="88:18">

        <return pos:start="88:9" pos:end="88:18">return <expr pos:start="88:16" pos:end="88:17"><operator pos:start="88:16" pos:end="88:16">-</operator><literal type="number" pos:start="88:17" pos:end="88:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="92:5" pos:end="94:18"><if pos:start="92:5" pos:end="94:18">if<condition pos:start="92:7" pos:end="92:20">(<expr pos:start="92:8" pos:end="92:19"><name pos:start="92:8" pos:end="92:16"><name pos:start="92:8" pos:end="92:8">s</name><operator pos:start="92:9" pos:end="92:10">-&gt;</operator><name pos:start="92:11" pos:end="92:16">qscale</name></name><operator pos:start="92:17" pos:end="92:18">==</operator><literal type="number" pos:start="92:19" pos:end="92:19">0</literal></expr>)</condition><block type="pseudo" pos:start="94:9" pos:end="94:18"><block_content pos:start="94:9" pos:end="94:18">

        <return pos:start="94:9" pos:end="94:18">return <expr pos:start="94:16" pos:end="94:17"><operator pos:start="94:16" pos:end="94:16">-</operator><literal type="number" pos:start="94:17" pos:end="94:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <return pos:start="98:5" pos:end="98:13">return <expr pos:start="98:12" pos:end="98:12"><literal type="number" pos:start="98:12" pos:end="98:12">0</literal></expr>;</return>

</block_content>}</block></function></unit>
