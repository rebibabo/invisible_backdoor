<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13410.c" pos:tabs="8"><function pos:start="1:1" pos:end="161:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">cdrom_pio_impl</name><parameter_list pos:start="1:27" pos:end="1:39">(<parameter pos:start="1:28" pos:end="1:38"><decl pos:start="1:28" pos:end="1:38"><type pos:start="1:28" pos:end="1:30"><name pos:start="1:28" pos:end="1:30">int</name></type> <name pos:start="1:32" pos:end="1:38">nblocks</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="161:1">{<block_content pos:start="5:5" pos:end="159:25">

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">QPCIDevice</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">QPCIBar</name></type> <name pos:start="7:13" pos:end="7:21">bmdma_bar</name></decl>, <decl pos:start="7:24" pos:end="7:30"><type ref="prev" pos:start="7:5" pos:end="7:11"/><name pos:start="7:24" pos:end="7:30">ide_bar</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:13"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">FILE</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:12">fh</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:39"><decl pos:start="11:5" pos:end="11:38"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:19">patt_blocks</name> <init pos:start="11:21" pos:end="11:38">= <expr pos:start="11:23" pos:end="11:38"><call pos:start="11:23" pos:end="11:38"><name pos:start="11:23" pos:end="11:25">MAX</name><argument_list pos:start="11:26" pos:end="11:38">(<argument pos:start="11:27" pos:end="11:28"><expr pos:start="11:27" pos:end="11:28"><literal type="number" pos:start="11:27" pos:end="11:28">16</literal></expr></argument>, <argument pos:start="11:31" pos:end="11:37"><expr pos:start="11:31" pos:end="11:37"><name pos:start="11:31" pos:end="11:37">nblocks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:53"><decl pos:start="13:5" pos:end="13:52"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">size_t</name></type> <name pos:start="13:12" pos:end="13:19">patt_len</name> <init pos:start="13:21" pos:end="13:52">= <expr pos:start="13:23" pos:end="13:52"><name pos:start="13:23" pos:end="13:38">ATAPI_BLOCK_SIZE</name> <operator pos:start="13:40" pos:end="13:40">*</operator> <name pos:start="13:42" pos:end="13:52">patt_blocks</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:39"><decl pos:start="15:5" pos:end="15:38"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:17">pattern</name> <init pos:start="15:19" pos:end="15:38">= <expr pos:start="15:21" pos:end="15:38"><call pos:start="15:21" pos:end="15:38"><name pos:start="15:21" pos:end="15:28">g_malloc</name><argument_list pos:start="15:29" pos:end="15:38">(<argument pos:start="15:30" pos:end="15:37"><expr pos:start="15:30" pos:end="15:37"><name pos:start="15:30" pos:end="15:37">patt_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:47"><decl pos:start="17:5" pos:end="17:46"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:10">size_t</name></type> <name pos:start="17:12" pos:end="17:17">rxsize</name> <init pos:start="17:19" pos:end="17:46">= <expr pos:start="17:21" pos:end="17:46"><name pos:start="17:21" pos:end="17:36">ATAPI_BLOCK_SIZE</name> <operator pos:start="17:38" pos:end="17:38">*</operator> <name pos:start="17:40" pos:end="17:46">nblocks</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:37"><decl pos:start="19:5" pos:end="19:36"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:12">uint16_t</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:16">rx</name> <init pos:start="19:18" pos:end="19:36">= <expr pos:start="19:20" pos:end="19:36"><call pos:start="19:20" pos:end="19:36"><name pos:start="19:20" pos:end="19:28">g_malloc0</name><argument_list pos:start="19:29" pos:end="19:36">(<argument pos:start="19:30" pos:end="19:35"><expr pos:start="19:30" pos:end="19:35"><name pos:start="19:30" pos:end="19:35">rxsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:13"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">i</name></decl>, <decl pos:start="21:12" pos:end="21:12"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:12" pos:end="21:12">j</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:17"><decl pos:start="23:5" pos:end="23:16"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:11">uint8_t</name></type> <name pos:start="23:13" pos:end="23:16">data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:19"><decl pos:start="25:5" pos:end="25:18"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:12">uint16_t</name></type> <name pos:start="25:14" pos:end="25:18">limit</name></decl>;</decl_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:59">/* Prepopulate the CDROM with an interesting pattern */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:58"><expr pos:start="31:5" pos:end="31:57"><call pos:start="31:5" pos:end="31:57"><name pos:start="31:5" pos:end="31:20">generate_pattern</name><argument_list pos:start="31:21" pos:end="31:57">(<argument pos:start="31:22" pos:end="31:28"><expr pos:start="31:22" pos:end="31:28"><name pos:start="31:22" pos:end="31:28">pattern</name></expr></argument>, <argument pos:start="31:31" pos:end="31:38"><expr pos:start="31:31" pos:end="31:38"><name pos:start="31:31" pos:end="31:38">patt_len</name></expr></argument>, <argument pos:start="31:41" pos:end="31:56"><expr pos:start="31:41" pos:end="31:56"><name pos:start="31:41" pos:end="31:56">ATAPI_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:31"><expr pos:start="33:5" pos:end="33:30"><name pos:start="33:5" pos:end="33:6">fh</name> <operator pos:start="33:8" pos:end="33:8">=</operator> <call pos:start="33:10" pos:end="33:30"><name pos:start="33:10" pos:end="33:14">fopen</name><argument_list pos:start="33:15" pos:end="33:30">(<argument pos:start="33:16" pos:end="33:23"><expr pos:start="33:16" pos:end="33:23"><name pos:start="33:16" pos:end="33:23">tmp_path</name></expr></argument>, <argument pos:start="33:26" pos:end="33:29"><expr pos:start="33:26" pos:end="33:29"><literal type="string" pos:start="33:26" pos:end="33:29">"w+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:55"><expr pos:start="35:5" pos:end="35:54"><call pos:start="35:5" pos:end="35:54"><name pos:start="35:5" pos:end="35:10">fwrite</name><argument_list pos:start="35:11" pos:end="35:54">(<argument pos:start="35:12" pos:end="35:18"><expr pos:start="35:12" pos:end="35:18"><name pos:start="35:12" pos:end="35:18">pattern</name></expr></argument>, <argument pos:start="35:21" pos:end="35:36"><expr pos:start="35:21" pos:end="35:36"><name pos:start="35:21" pos:end="35:36">ATAPI_BLOCK_SIZE</name></expr></argument>, <argument pos:start="35:39" pos:end="35:49"><expr pos:start="35:39" pos:end="35:49"><name pos:start="35:39" pos:end="35:49">patt_blocks</name></expr></argument>, <argument pos:start="35:52" pos:end="35:53"><expr pos:start="35:52" pos:end="35:53"><name pos:start="35:52" pos:end="35:53">fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:15"><expr pos:start="37:5" pos:end="37:14"><call pos:start="37:5" pos:end="37:14"><name pos:start="37:5" pos:end="37:10">fclose</name><argument_list pos:start="37:11" pos:end="37:14">(<argument pos:start="37:12" pos:end="37:13"><expr pos:start="37:12" pos:end="37:13"><name pos:start="37:12" pos:end="37:13">fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="43:67"><expr pos:start="41:5" pos:end="43:66"><call pos:start="41:5" pos:end="43:66"><name pos:start="41:5" pos:end="41:18">ide_test_start</name><argument_list pos:start="41:19" pos:end="43:66">(<argument pos:start="41:20" pos:end="43:55"><expr pos:start="41:20" pos:end="43:55"><literal type="string" pos:start="41:20" pos:end="41:82">"-drive if=none,file=%s,media=cdrom,format=raw,id=sr0,index=0 "</literal>

                   <literal type="string" pos:start="43:20" pos:end="43:55">"-device ide-cd,drive=sr0,bus=ide.0"</literal></expr></argument>, <argument pos:start="43:58" pos:end="43:65"><expr pos:start="43:58" pos:end="43:65"><name pos:start="43:58" pos:end="43:65">tmp_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:47"><expr pos:start="45:5" pos:end="45:46"><name pos:start="45:5" pos:end="45:7">dev</name> <operator pos:start="45:9" pos:end="45:9">=</operator> <call pos:start="45:11" pos:end="45:46"><name pos:start="45:11" pos:end="45:24">get_pci_device</name><argument_list pos:start="45:25" pos:end="45:46">(<argument pos:start="45:26" pos:end="45:35"><expr pos:start="45:26" pos:end="45:35"><operator pos:start="45:26" pos:end="45:26">&amp;</operator><name pos:start="45:27" pos:end="45:35">bmdma_bar</name></expr></argument>, <argument pos:start="45:38" pos:end="45:45"><expr pos:start="45:38" pos:end="45:45"><operator pos:start="45:38" pos:end="45:38">&amp;</operator><name pos:start="45:39" pos:end="45:45">ide_bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:51"><expr pos:start="47:5" pos:end="47:50"><call pos:start="47:5" pos:end="47:50"><name pos:start="47:5" pos:end="47:26">qtest_irq_intercept_in</name><argument_list pos:start="47:27" pos:end="47:50">(<argument pos:start="47:28" pos:end="47:39"><expr pos:start="47:28" pos:end="47:39"><name pos:start="47:28" pos:end="47:39">global_qtest</name></expr></argument>, <argument pos:start="47:42" pos:end="47:49"><expr pos:start="47:42" pos:end="47:49"><literal type="string" pos:start="47:42" pos:end="47:49">"ioapic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:36">/* PACKET command on device 0 */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:48"><expr pos:start="53:5" pos:end="53:47"><call pos:start="53:5" pos:end="53:47"><name pos:start="53:5" pos:end="53:18">qpci_io_writeb</name><argument_list pos:start="53:19" pos:end="53:47">(<argument pos:start="53:20" pos:end="53:22"><expr pos:start="53:20" pos:end="53:22"><name pos:start="53:20" pos:end="53:22">dev</name></expr></argument>, <argument pos:start="53:25" pos:end="53:31"><expr pos:start="53:25" pos:end="53:31"><name pos:start="53:25" pos:end="53:31">ide_bar</name></expr></argument>, <argument pos:start="53:34" pos:end="53:43"><expr pos:start="53:34" pos:end="53:43"><name pos:start="53:34" pos:end="53:43">reg_device</name></expr></argument>, <argument pos:start="53:46" pos:end="53:46"><expr pos:start="53:46" pos:end="53:46"><literal type="number" pos:start="53:46" pos:end="53:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:74"><expr pos:start="55:5" pos:end="55:73"><call pos:start="55:5" pos:end="55:73"><name pos:start="55:5" pos:end="55:18">qpci_io_writeb</name><argument_list pos:start="55:19" pos:end="55:73">(<argument pos:start="55:20" pos:end="55:22"><expr pos:start="55:20" pos:end="55:22"><name pos:start="55:20" pos:end="55:22">dev</name></expr></argument>, <argument pos:start="55:25" pos:end="55:31"><expr pos:start="55:25" pos:end="55:31"><name pos:start="55:25" pos:end="55:31">ide_bar</name></expr></argument>, <argument pos:start="55:34" pos:end="55:47"><expr pos:start="55:34" pos:end="55:47"><name pos:start="55:34" pos:end="55:47">reg_lba_middle</name></expr></argument>, <argument pos:start="55:50" pos:end="55:72"><expr pos:start="55:50" pos:end="55:72"><name pos:start="55:50" pos:end="55:65">BYTE_COUNT_LIMIT</name> <operator pos:start="55:67" pos:end="55:67">&amp;</operator> <literal type="number" pos:start="55:69" pos:end="55:72">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:79"><expr pos:start="57:5" pos:end="57:78"><call pos:start="57:5" pos:end="57:78"><name pos:start="57:5" pos:end="57:18">qpci_io_writeb</name><argument_list pos:start="57:19" pos:end="57:78">(<argument pos:start="57:20" pos:end="57:22"><expr pos:start="57:20" pos:end="57:22"><name pos:start="57:20" pos:end="57:22">dev</name></expr></argument>, <argument pos:start="57:25" pos:end="57:31"><expr pos:start="57:25" pos:end="57:31"><name pos:start="57:25" pos:end="57:31">ide_bar</name></expr></argument>, <argument pos:start="57:34" pos:end="57:45"><expr pos:start="57:34" pos:end="57:45"><name pos:start="57:34" pos:end="57:45">reg_lba_high</name></expr></argument>, <argument pos:start="57:48" pos:end="57:77"><expr pos:start="57:48" pos:end="57:77"><operator pos:start="57:48" pos:end="57:48">(</operator><name pos:start="57:49" pos:end="57:64">BYTE_COUNT_LIMIT</name> <operator pos:start="57:66" pos:end="57:67">&gt;&gt;</operator> <literal type="number" pos:start="57:69" pos:end="57:69">8</literal> <operator pos:start="57:71" pos:end="57:71">&amp;</operator> <literal type="number" pos:start="57:73" pos:end="57:76">0xFF</literal><operator pos:start="57:77" pos:end="57:77">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:58"><expr pos:start="59:5" pos:end="59:57"><call pos:start="59:5" pos:end="59:57"><name pos:start="59:5" pos:end="59:18">qpci_io_writeb</name><argument_list pos:start="59:19" pos:end="59:57">(<argument pos:start="59:20" pos:end="59:22"><expr pos:start="59:20" pos:end="59:22"><name pos:start="59:20" pos:end="59:22">dev</name></expr></argument>, <argument pos:start="59:25" pos:end="59:31"><expr pos:start="59:25" pos:end="59:31"><name pos:start="59:25" pos:end="59:31">ide_bar</name></expr></argument>, <argument pos:start="59:34" pos:end="59:44"><expr pos:start="59:34" pos:end="59:44"><name pos:start="59:34" pos:end="59:44">reg_command</name></expr></argument>, <argument pos:start="59:47" pos:end="59:56"><expr pos:start="59:47" pos:end="59:56"><name pos:start="59:47" pos:end="59:56">CMD_PACKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="61:5" pos:end="61:35">/* HP0: Check_Status_A State */</comment>

    <expr_stmt pos:start="63:5" pos:end="63:16"><expr pos:start="63:5" pos:end="63:15"><call pos:start="63:5" pos:end="63:15"><name pos:start="63:5" pos:end="63:10">nsleep</name><argument_list pos:start="63:11" pos:end="63:15">(<argument pos:start="63:12" pos:end="63:14"><expr pos:start="63:12" pos:end="63:14"><literal type="number" pos:start="63:12" pos:end="63:14">400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:31"><expr pos:start="65:5" pos:end="65:30"><name pos:start="65:5" pos:end="65:8">data</name> <operator pos:start="65:10" pos:end="65:10">=</operator> <call pos:start="65:12" pos:end="65:30"><name pos:start="65:12" pos:end="65:25">ide_wait_clear</name><argument_list pos:start="65:26" pos:end="65:30">(<argument pos:start="65:27" pos:end="65:29"><expr pos:start="65:27" pos:end="65:29"><name pos:start="65:27" pos:end="65:29">BSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="67:5" pos:end="67:32">/* HP1: Send_Packet State */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:37"><expr pos:start="69:5" pos:end="69:36"><call pos:start="69:5" pos:end="69:36"><name pos:start="69:5" pos:end="69:18">assert_bit_set</name><argument_list pos:start="69:19" pos:end="69:36">(<argument pos:start="69:20" pos:end="69:23"><expr pos:start="69:20" pos:end="69:23"><name pos:start="69:20" pos:end="69:23">data</name></expr></argument>, <argument pos:start="69:26" pos:end="69:35"><expr pos:start="69:26" pos:end="69:35"><name pos:start="69:26" pos:end="69:28">DRQ</name> <operator pos:start="69:30" pos:end="69:30">|</operator> <name pos:start="69:32" pos:end="69:35">DRDY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:43"><expr pos:start="71:5" pos:end="71:42"><call pos:start="71:5" pos:end="71:42"><name pos:start="71:5" pos:end="71:20">assert_bit_clear</name><argument_list pos:start="71:21" pos:end="71:42">(<argument pos:start="71:22" pos:end="71:25"><expr pos:start="71:22" pos:end="71:25"><name pos:start="71:22" pos:end="71:25">data</name></expr></argument>, <argument pos:start="71:28" pos:end="71:41"><expr pos:start="71:28" pos:end="71:41"><name pos:start="71:28" pos:end="71:30">ERR</name> <operator pos:start="71:32" pos:end="71:32">|</operator> <name pos:start="71:34" pos:end="71:35">DF</name> <operator pos:start="71:37" pos:end="71:37">|</operator> <name pos:start="71:39" pos:end="71:41">BSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="75:5" pos:end="75:61">/* SCSI CDB (READ10) -- read n*2048 bytes from block 0 */</comment>

    <expr_stmt pos:start="77:5" pos:end="77:51"><expr pos:start="77:5" pos:end="77:50"><call pos:start="77:5" pos:end="77:50"><name pos:start="77:5" pos:end="77:24">send_scsi_cdb_read10</name><argument_list pos:start="77:25" pos:end="77:50">(<argument pos:start="77:26" pos:end="77:28"><expr pos:start="77:26" pos:end="77:28"><name pos:start="77:26" pos:end="77:28">dev</name></expr></argument>, <argument pos:start="77:31" pos:end="77:37"><expr pos:start="77:31" pos:end="77:37"><name pos:start="77:31" pos:end="77:37">ide_bar</name></expr></argument>, <argument pos:start="77:40" pos:end="77:40"><expr pos:start="77:40" pos:end="77:40"><literal type="number" pos:start="77:40" pos:end="77:40">0</literal></expr></argument>, <argument pos:start="77:43" pos:end="77:49"><expr pos:start="77:43" pos:end="77:49"><name pos:start="77:43" pos:end="77:49">nblocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="81:5" pos:end="91:76">/* Read data back: occurs in bursts of 'BYTE_COUNT_LIMIT' bytes.

     * If BYTE_COUNT_LIMIT is odd, we transfer BYTE_COUNT_LIMIT - 1 bytes.

     * We allow an odd limit only when the remaining transfer size is

     * less than BYTE_COUNT_LIMIT. However, SCSI's read10 command can only

     * request n blocks, so our request size is always even.

     * For this reason, we assume there is never a hanging byte to fetch. */</comment>

    <expr_stmt pos:start="93:5" pos:end="93:28"><expr pos:start="93:5" pos:end="93:27"><call pos:start="93:5" pos:end="93:27"><name pos:start="93:5" pos:end="93:12">g_assert</name><argument_list pos:start="93:13" pos:end="93:27">(<argument pos:start="93:14" pos:end="93:26"><expr pos:start="93:14" pos:end="93:26"><operator pos:start="93:14" pos:end="93:14">!</operator><operator pos:start="93:15" pos:end="93:15">(</operator><name pos:start="93:16" pos:end="93:21">rxsize</name> <operator pos:start="93:23" pos:end="93:23">&amp;</operator> <literal type="number" pos:start="93:25" pos:end="93:25">1</literal><operator pos:start="93:26" pos:end="93:26">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:34"><expr pos:start="95:5" pos:end="95:33"><name pos:start="95:5" pos:end="95:9">limit</name> <operator pos:start="95:11" pos:end="95:11">=</operator> <name pos:start="95:13" pos:end="95:28">BYTE_COUNT_LIMIT</name> <operator pos:start="95:30" pos:end="95:30">&amp;</operator> <operator pos:start="95:32" pos:end="95:32">~</operator><literal type="number" pos:start="95:33" pos:end="95:33">1</literal></expr>;</expr_stmt>

    <for pos:start="97:5" pos:end="131:5">for <control pos:start="97:9" pos:end="97:53">(<init pos:start="97:10" pos:end="97:15"><expr pos:start="97:10" pos:end="97:14"><name pos:start="97:10" pos:end="97:10">i</name> <operator pos:start="97:12" pos:end="97:12">=</operator> <literal type="number" pos:start="97:14" pos:end="97:14">0</literal></expr>;</init> <condition pos:start="97:17" pos:end="97:48"><expr pos:start="97:17" pos:end="97:47"><name pos:start="97:17" pos:end="97:17">i</name> <operator pos:start="97:19" pos:end="97:19">&lt;</operator> <call pos:start="97:21" pos:end="97:47"><name pos:start="97:21" pos:end="97:32">DIV_ROUND_UP</name><argument_list pos:start="97:33" pos:end="97:47">(<argument pos:start="97:34" pos:end="97:39"><expr pos:start="97:34" pos:end="97:39"><name pos:start="97:34" pos:end="97:39">rxsize</name></expr></argument>, <argument pos:start="97:42" pos:end="97:46"><expr pos:start="97:42" pos:end="97:46"><name pos:start="97:42" pos:end="97:46">limit</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="97:50" pos:end="97:52"><expr pos:start="97:50" pos:end="97:52"><name pos:start="97:50" pos:end="97:50">i</name><operator pos:start="97:51" pos:end="97:52">++</operator></expr></incr>)</control> <block pos:start="97:55" pos:end="131:5">{<block_content pos:start="99:9" pos:end="129:9">

        <decl_stmt pos:start="99:9" pos:end="99:40"><decl pos:start="99:9" pos:end="99:39"><type pos:start="99:9" pos:end="99:14"><name pos:start="99:9" pos:end="99:14">size_t</name></type> <name pos:start="99:16" pos:end="99:21">offset</name> <init pos:start="99:23" pos:end="99:39">= <expr pos:start="99:25" pos:end="99:39"><name pos:start="99:25" pos:end="99:25">i</name> <operator pos:start="99:27" pos:end="99:27">*</operator> <operator pos:start="99:29" pos:end="99:29">(</operator><name pos:start="99:30" pos:end="99:34">limit</name> <operator pos:start="99:36" pos:end="99:36">/</operator> <literal type="number" pos:start="99:38" pos:end="99:38">2</literal><operator pos:start="99:39" pos:end="99:39">)</operator></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="101:9" pos:end="101:43"><decl pos:start="101:9" pos:end="101:42"><type pos:start="101:9" pos:end="101:14"><name pos:start="101:9" pos:end="101:14">size_t</name></type> <name pos:start="101:16" pos:end="101:18">rem</name> <init pos:start="101:20" pos:end="101:42">= <expr pos:start="101:22" pos:end="101:42"><operator pos:start="101:22" pos:end="101:22">(</operator><name pos:start="101:23" pos:end="101:28">rxsize</name> <operator pos:start="101:30" pos:end="101:30">/</operator> <literal type="number" pos:start="101:32" pos:end="101:32">2</literal><operator pos:start="101:33" pos:end="101:33">)</operator> <operator pos:start="101:35" pos:end="101:35">-</operator> <name pos:start="101:37" pos:end="101:42">offset</name></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="105:9" pos:end="105:29">/* HP3: INTRQ_Wait */</comment>

        <expr_stmt pos:start="107:9" pos:end="107:39"><expr pos:start="107:9" pos:end="107:38"><call pos:start="107:9" pos:end="107:38"><name pos:start="107:9" pos:end="107:21">ide_wait_intr</name><argument_list pos:start="107:22" pos:end="107:38">(<argument pos:start="107:23" pos:end="107:37"><expr pos:start="107:23" pos:end="107:37"><name pos:start="107:23" pos:end="107:37">IDE_PRIMARY_IRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="111:9" pos:end="111:49">/* HP2: Check_Status_B (and clear IRQ) */</comment>

        <expr_stmt pos:start="113:9" pos:end="113:35"><expr pos:start="113:9" pos:end="113:34"><name pos:start="113:9" pos:end="113:12">data</name> <operator pos:start="113:14" pos:end="113:14">=</operator> <call pos:start="113:16" pos:end="113:34"><name pos:start="113:16" pos:end="113:29">ide_wait_clear</name><argument_list pos:start="113:30" pos:end="113:34">(<argument pos:start="113:31" pos:end="113:33"><expr pos:start="113:31" pos:end="113:33"><name pos:start="113:31" pos:end="113:33">BSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:41"><expr pos:start="115:9" pos:end="115:40"><call pos:start="115:9" pos:end="115:40"><name pos:start="115:9" pos:end="115:22">assert_bit_set</name><argument_list pos:start="115:23" pos:end="115:40">(<argument pos:start="115:24" pos:end="115:27"><expr pos:start="115:24" pos:end="115:27"><name pos:start="115:24" pos:end="115:27">data</name></expr></argument>, <argument pos:start="115:30" pos:end="115:39"><expr pos:start="115:30" pos:end="115:39"><name pos:start="115:30" pos:end="115:32">DRQ</name> <operator pos:start="115:34" pos:end="115:34">|</operator> <name pos:start="115:36" pos:end="115:39">DRDY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:47"><expr pos:start="117:9" pos:end="117:46"><call pos:start="117:9" pos:end="117:46"><name pos:start="117:9" pos:end="117:24">assert_bit_clear</name><argument_list pos:start="117:25" pos:end="117:46">(<argument pos:start="117:26" pos:end="117:29"><expr pos:start="117:26" pos:end="117:29"><name pos:start="117:26" pos:end="117:29">data</name></expr></argument>, <argument pos:start="117:32" pos:end="117:45"><expr pos:start="117:32" pos:end="117:45"><name pos:start="117:32" pos:end="117:34">ERR</name> <operator pos:start="117:36" pos:end="117:36">|</operator> <name pos:start="117:38" pos:end="117:39">DF</name> <operator pos:start="117:41" pos:end="117:41">|</operator> <name pos:start="117:43" pos:end="117:45">BSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="121:9" pos:end="121:32">/* HP4: Transfer_Data */</comment>

        <for pos:start="123:9" pos:end="129:9">for <control pos:start="123:13" pos:end="123:51">(<init pos:start="123:14" pos:end="123:19"><expr pos:start="123:14" pos:end="123:18"><name pos:start="123:14" pos:end="123:14">j</name> <operator pos:start="123:16" pos:end="123:16">=</operator> <literal type="number" pos:start="123:18" pos:end="123:18">0</literal></expr>;</init> <condition pos:start="123:21" pos:end="123:46"><expr pos:start="123:21" pos:end="123:45"><name pos:start="123:21" pos:end="123:21">j</name> <operator pos:start="123:23" pos:end="123:23">&lt;</operator> <call pos:start="123:25" pos:end="123:45"><name pos:start="123:25" pos:end="123:27">MIN</name><argument_list pos:start="123:28" pos:end="123:45">(<argument pos:start="123:29" pos:end="123:39"><expr pos:start="123:29" pos:end="123:39"><operator pos:start="123:29" pos:end="123:29">(</operator><name pos:start="123:30" pos:end="123:34">limit</name> <operator pos:start="123:36" pos:end="123:36">/</operator> <literal type="number" pos:start="123:38" pos:end="123:38">2</literal><operator pos:start="123:39" pos:end="123:39">)</operator></expr></argument>, <argument pos:start="123:42" pos:end="123:44"><expr pos:start="123:42" pos:end="123:44"><name pos:start="123:42" pos:end="123:44">rem</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="123:48" pos:end="123:50"><expr pos:start="123:48" pos:end="123:50"><name pos:start="123:48" pos:end="123:48">j</name><operator pos:start="123:49" pos:end="123:50">++</operator></expr></incr>)</control> <block pos:start="123:53" pos:end="129:9">{<block_content pos:start="125:13" pos:end="127:66">

            <expr_stmt pos:start="125:13" pos:end="127:66"><expr pos:start="125:13" pos:end="127:65"><name pos:start="125:13" pos:end="125:26"><name pos:start="125:13" pos:end="125:14">rx</name><index pos:start="125:15" pos:end="125:26">[<expr pos:start="125:16" pos:end="125:25"><name pos:start="125:16" pos:end="125:21">offset</name> <operator pos:start="125:23" pos:end="125:23">+</operator> <name pos:start="125:25" pos:end="125:25">j</name></expr>]</index></name> <operator pos:start="125:28" pos:end="125:28">=</operator> <call pos:start="125:30" pos:end="127:65"><name pos:start="125:30" pos:end="125:40">cpu_to_le16</name><argument_list pos:start="125:41" pos:end="127:65">(<argument pos:start="125:42" pos:end="127:64"><expr pos:start="125:42" pos:end="127:64"><call pos:start="125:42" pos:end="127:64"><name pos:start="125:42" pos:end="125:54">qpci_io_readw</name><argument_list pos:start="125:55" pos:end="127:64">(<argument pos:start="125:56" pos:end="125:58"><expr pos:start="125:56" pos:end="125:58"><name pos:start="125:56" pos:end="125:58">dev</name></expr></argument>, <argument pos:start="125:61" pos:end="125:67"><expr pos:start="125:61" pos:end="125:67"><name pos:start="125:61" pos:end="125:67">ide_bar</name></expr></argument>,

                                                       <argument pos:start="127:56" pos:end="127:63"><expr pos:start="127:56" pos:end="127:63"><name pos:start="127:56" pos:end="127:63">reg_data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <comment type="block" pos:start="135:5" pos:end="135:40">/* Check for final completion IRQ */</comment>

    <expr_stmt pos:start="137:5" pos:end="137:35"><expr pos:start="137:5" pos:end="137:34"><call pos:start="137:5" pos:end="137:34"><name pos:start="137:5" pos:end="137:17">ide_wait_intr</name><argument_list pos:start="137:18" pos:end="137:34">(<argument pos:start="137:19" pos:end="137:33"><expr pos:start="137:19" pos:end="137:33"><name pos:start="137:19" pos:end="137:33">IDE_PRIMARY_IRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="141:5" pos:end="141:34">/* Sanity check final state */</comment>

    <expr_stmt pos:start="143:5" pos:end="143:31"><expr pos:start="143:5" pos:end="143:30"><name pos:start="143:5" pos:end="143:8">data</name> <operator pos:start="143:10" pos:end="143:10">=</operator> <call pos:start="143:12" pos:end="143:30"><name pos:start="143:12" pos:end="143:25">ide_wait_clear</name><argument_list pos:start="143:26" pos:end="143:30">(<argument pos:start="143:27" pos:end="143:29"><expr pos:start="143:27" pos:end="143:29"><name pos:start="143:27" pos:end="143:29">DRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:31"><expr pos:start="145:5" pos:end="145:30"><call pos:start="145:5" pos:end="145:30"><name pos:start="145:5" pos:end="145:18">assert_bit_set</name><argument_list pos:start="145:19" pos:end="145:30">(<argument pos:start="145:20" pos:end="145:23"><expr pos:start="145:20" pos:end="145:23"><name pos:start="145:20" pos:end="145:23">data</name></expr></argument>, <argument pos:start="145:26" pos:end="145:29"><expr pos:start="145:26" pos:end="145:29"><name pos:start="145:26" pos:end="145:29">DRDY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:49"><expr pos:start="147:5" pos:end="147:48"><call pos:start="147:5" pos:end="147:48"><name pos:start="147:5" pos:end="147:20">assert_bit_clear</name><argument_list pos:start="147:21" pos:end="147:48">(<argument pos:start="147:22" pos:end="147:25"><expr pos:start="147:22" pos:end="147:25"><name pos:start="147:22" pos:end="147:25">data</name></expr></argument>, <argument pos:start="147:28" pos:end="147:47"><expr pos:start="147:28" pos:end="147:47"><name pos:start="147:28" pos:end="147:30">DRQ</name> <operator pos:start="147:32" pos:end="147:32">|</operator> <name pos:start="147:34" pos:end="147:36">ERR</name> <operator pos:start="147:38" pos:end="147:38">|</operator> <name pos:start="147:40" pos:end="147:41">DF</name> <operator pos:start="147:43" pos:end="147:43">|</operator> <name pos:start="147:45" pos:end="147:47">BSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="151:5" pos:end="151:56"><expr pos:start="151:5" pos:end="151:55"><call pos:start="151:5" pos:end="151:55"><name pos:start="151:5" pos:end="151:19">g_assert_cmpint</name><argument_list pos:start="151:20" pos:end="151:55">(<argument pos:start="151:21" pos:end="151:47"><expr pos:start="151:21" pos:end="151:47"><call pos:start="151:21" pos:end="151:47"><name pos:start="151:21" pos:end="151:26">memcmp</name><argument_list pos:start="151:27" pos:end="151:47">(<argument pos:start="151:28" pos:end="151:34"><expr pos:start="151:28" pos:end="151:34"><name pos:start="151:28" pos:end="151:34">pattern</name></expr></argument>, <argument pos:start="151:37" pos:end="151:38"><expr pos:start="151:37" pos:end="151:38"><name pos:start="151:37" pos:end="151:38">rx</name></expr></argument>, <argument pos:start="151:41" pos:end="151:46"><expr pos:start="151:41" pos:end="151:46"><name pos:start="151:41" pos:end="151:46">rxsize</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="151:50" pos:end="151:51"><expr pos:start="151:50" pos:end="151:51"><operator pos:start="151:50" pos:end="151:51">==</operator></expr></argument>, <argument pos:start="151:54" pos:end="151:54"><expr pos:start="151:54" pos:end="151:54"><literal type="number" pos:start="151:54" pos:end="151:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:20"><expr pos:start="153:5" pos:end="153:19"><call pos:start="153:5" pos:end="153:19"><name pos:start="153:5" pos:end="153:10">g_free</name><argument_list pos:start="153:11" pos:end="153:19">(<argument pos:start="153:12" pos:end="153:18"><expr pos:start="153:12" pos:end="153:18"><name pos:start="153:12" pos:end="153:18">pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:15"><expr pos:start="155:5" pos:end="155:14"><call pos:start="155:5" pos:end="155:14"><name pos:start="155:5" pos:end="155:10">g_free</name><argument_list pos:start="155:11" pos:end="155:14">(<argument pos:start="155:12" pos:end="155:13"><expr pos:start="155:12" pos:end="155:13"><name pos:start="155:12" pos:end="155:13">rx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:26"><expr pos:start="157:5" pos:end="157:25"><call pos:start="157:5" pos:end="157:25"><name pos:start="157:5" pos:end="157:23">test_bmdma_teardown</name><argument_list pos:start="157:24" pos:end="157:25">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:25"><expr pos:start="159:5" pos:end="159:24"><call pos:start="159:5" pos:end="159:24"><name pos:start="159:5" pos:end="159:19">free_pci_device</name><argument_list pos:start="159:20" pos:end="159:24">(<argument pos:start="159:21" pos:end="159:23"><expr pos:start="159:21" pos:end="159:23"><name pos:start="159:21" pos:end="159:23">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
