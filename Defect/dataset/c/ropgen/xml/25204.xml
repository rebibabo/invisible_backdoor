<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25204.c" pos:tabs="8"><function pos:start="1:1" pos:end="33:1"><type pos:start="1:1" pos:end="1:26"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:12">const</specifier> <name pos:start="1:14" pos:end="1:24">IntelHDAReg</name> <modifier pos:start="1:26" pos:end="1:26">*</modifier></type><name pos:start="1:27" pos:end="1:44">intel_hda_reg_find</name><parameter_list pos:start="1:45" pos:end="1:87">(<parameter pos:start="1:46" pos:end="1:61"><decl pos:start="1:46" pos:end="1:61"><type pos:start="1:46" pos:end="1:61"><name pos:start="1:46" pos:end="1:58">IntelHDAState</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:61">d</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:86"><decl pos:start="1:64" pos:end="1:86"><type pos:start="1:64" pos:end="1:86"><name pos:start="1:64" pos:end="1:81">target_phys_addr_t</name></type> <name pos:start="1:83" pos:end="1:86">addr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="33:1">{<block_content pos:start="5:5" pos:end="31:16">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:23"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:21">IntelHDAReg</name> <modifier pos:start="5:23" pos:end="5:23">*</modifier></type><name pos:start="5:24" pos:end="5:26">reg</name></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="13:5"><if pos:start="9:5" pos:end="13:5">if <condition pos:start="9:8" pos:end="9:49">(<expr pos:start="9:9" pos:end="9:48"><name pos:start="9:9" pos:end="9:12">addr</name> <operator pos:start="9:14" pos:end="9:15">&gt;=</operator> <sizeof pos:start="9:17" pos:end="9:30">sizeof<argument_list pos:start="9:23" pos:end="9:30">(<argument pos:start="9:24" pos:end="9:29"><expr pos:start="9:24" pos:end="9:29"><name pos:start="9:24" pos:end="9:29">regtab</name></expr></argument>)</argument_list></sizeof><operator pos:start="9:31" pos:end="9:31">/</operator><sizeof pos:start="9:32" pos:end="9:48">sizeof<argument_list pos:start="9:38" pos:end="9:48">(<argument pos:start="9:39" pos:end="9:47"><expr pos:start="9:39" pos:end="9:47"><name pos:start="9:39" pos:end="9:47"><name pos:start="9:39" pos:end="9:44">regtab</name><index pos:start="9:45" pos:end="9:47">[<expr pos:start="9:46" pos:end="9:46"><literal type="number" pos:start="9:46" pos:end="9:46">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="9:51" pos:end="13:5">{<block_content pos:start="11:9" pos:end="11:19">

        <goto pos:start="11:9" pos:end="11:19">goto <name pos:start="11:14" pos:end="11:18">noreg</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:22"><expr pos:start="15:5" pos:end="15:21"><name pos:start="15:5" pos:end="15:7">reg</name> <operator pos:start="15:9" pos:end="15:9">=</operator> <name pos:start="15:11" pos:end="15:16">regtab</name><operator pos:start="15:17" pos:end="15:17">+</operator><name pos:start="15:18" pos:end="15:21">addr</name></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="21:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:26">(<expr pos:start="17:9" pos:end="17:25"><name pos:start="17:9" pos:end="17:17"><name pos:start="17:9" pos:end="17:11">reg</name><operator pos:start="17:12" pos:end="17:13">-&gt;</operator><name pos:start="17:14" pos:end="17:17">name</name></name> <operator pos:start="17:19" pos:end="17:20">==</operator> <name pos:start="17:22" pos:end="17:25">NULL</name></expr>)</condition> <block pos:start="17:28" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:19">

        <goto pos:start="19:9" pos:end="19:19">goto <name pos:start="19:14" pos:end="19:18">noreg</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <return pos:start="23:5" pos:end="23:15">return <expr pos:start="23:12" pos:end="23:14"><name pos:start="23:12" pos:end="23:14">reg</name></expr>;</return>



<label pos:start="27:1" pos:end="27:6"><name pos:start="27:1" pos:end="27:5">noreg</name>:</label>

    <expr_stmt pos:start="29:5" pos:end="29:62"><expr pos:start="29:5" pos:end="29:61"><call pos:start="29:5" pos:end="29:61"><name pos:start="29:5" pos:end="29:10">dprint</name><argument_list pos:start="29:11" pos:end="29:61">(<argument pos:start="29:12" pos:end="29:12"><expr pos:start="29:12" pos:end="29:12"><name pos:start="29:12" pos:end="29:12">d</name></expr></argument>, <argument pos:start="29:15" pos:end="29:15"><expr pos:start="29:15" pos:end="29:15"><literal type="number" pos:start="29:15" pos:end="29:15">1</literal></expr></argument>, <argument pos:start="29:18" pos:end="29:48"><expr pos:start="29:18" pos:end="29:48"><literal type="string" pos:start="29:18" pos:end="29:48">"unknown register, addr 0x%x\n"</literal></expr></argument>, <argument pos:start="29:51" pos:end="29:60"><expr pos:start="29:51" pos:end="29:60"><operator pos:start="29:51" pos:end="29:51">(</operator><name pos:start="29:52" pos:end="29:54">int</name><operator pos:start="29:55" pos:end="29:55">)</operator> <name pos:start="29:57" pos:end="29:60">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="31:5" pos:end="31:16">return <expr pos:start="31:12" pos:end="31:15"><name pos:start="31:12" pos:end="31:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
