<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15448.c" pos:tabs="8"><function pos:start="1:1" pos:end="91:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:35">test_qemu_strtosz_units</name><parameter_list pos:start="1:36" pos:end="1:41">(<parameter pos:start="1:37" pos:end="1:40"><decl pos:start="1:37" pos:end="1:40"><type pos:start="1:37" pos:end="1:40"><name pos:start="1:37" pos:end="1:40">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="91:1">{<block_content pos:start="5:5" pos:end="89:30">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:20">none</name> <init pos:start="5:22" pos:end="5:26">= <expr pos:start="5:24" pos:end="5:26"><literal type="string" pos:start="5:24" pos:end="5:26">"1"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:17">b</name> <init pos:start="7:19" pos:end="7:24">= <expr pos:start="7:21" pos:end="7:24"><literal type="string" pos:start="7:21" pos:end="7:24">"1B"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:17">k</name> <init pos:start="9:19" pos:end="9:24">= <expr pos:start="9:21" pos:end="9:24"><literal type="string" pos:start="9:21" pos:end="9:24">"1K"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:17">m</name> <init pos:start="11:19" pos:end="11:24">= <expr pos:start="11:21" pos:end="11:24"><literal type="string" pos:start="11:21" pos:end="11:24">"1M"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:17">g</name> <init pos:start="13:19" pos:end="13:24">= <expr pos:start="13:21" pos:end="13:24"><literal type="string" pos:start="13:21" pos:end="13:24">"1G"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:17">t</name> <init pos:start="15:19" pos:end="15:24">= <expr pos:start="15:21" pos:end="15:24"><literal type="string" pos:start="15:21" pos:end="15:24">"1T"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:16"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:14">char</name> <modifier pos:start="17:16" pos:end="17:16">*</modifier></type><name pos:start="17:17" pos:end="17:17">p</name> <init pos:start="17:19" pos:end="17:24">= <expr pos:start="17:21" pos:end="17:24"><literal type="string" pos:start="17:21" pos:end="17:24">"1P"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:25"><decl pos:start="19:5" pos:end="19:24"><type pos:start="19:5" pos:end="19:16"><specifier pos:start="19:5" pos:end="19:9">const</specifier> <name pos:start="19:11" pos:end="19:14">char</name> <modifier pos:start="19:16" pos:end="19:16">*</modifier></type><name pos:start="19:17" pos:end="19:17">e</name> <init pos:start="19:19" pos:end="19:24">= <expr pos:start="19:21" pos:end="19:24"><literal type="string" pos:start="19:21" pos:end="19:24">"1E"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:24"><decl pos:start="21:5" pos:end="21:23"><type pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:8">char</name> <modifier pos:start="21:10" pos:end="21:10">*</modifier></type><name pos:start="21:11" pos:end="21:16">endptr</name> <init pos:start="21:18" pos:end="21:23">= <expr pos:start="21:20" pos:end="21:23"><name pos:start="21:20" pos:end="21:23">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:16"><decl pos:start="23:5" pos:end="23:15"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:11">int64_t</name></type> <name pos:start="23:13" pos:end="23:15">res</name></decl>;</decl_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:22">/* default is M */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:42"><expr pos:start="29:5" pos:end="29:41"><name pos:start="29:5" pos:end="29:7">res</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:41"><name pos:start="29:11" pos:end="29:26">qemu_strtosz_MiB</name><argument_list pos:start="29:27" pos:end="29:41">(<argument pos:start="29:28" pos:end="29:31"><expr pos:start="29:28" pos:end="29:31"><name pos:start="29:28" pos:end="29:31">none</name></expr></argument>, <argument pos:start="29:34" pos:end="29:40"><expr pos:start="29:34" pos:end="29:40"><operator pos:start="29:34" pos:end="29:34">&amp;</operator><name pos:start="29:35" pos:end="29:40">endptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:37"><expr pos:start="31:5" pos:end="31:36"><call pos:start="31:5" pos:end="31:36"><name pos:start="31:5" pos:end="31:19">g_assert_cmpint</name><argument_list pos:start="31:20" pos:end="31:36">(<argument pos:start="31:21" pos:end="31:23"><expr pos:start="31:21" pos:end="31:23"><name pos:start="31:21" pos:end="31:23">res</name></expr></argument>, <argument pos:start="31:26" pos:end="31:27"><expr pos:start="31:26" pos:end="31:27"><operator pos:start="31:26" pos:end="31:27">==</operator></expr></argument>, <argument pos:start="31:30" pos:end="31:35"><expr pos:start="31:30" pos:end="31:35"><name pos:start="31:30" pos:end="31:35">M_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:33"><expr pos:start="33:5" pos:end="33:32"><call pos:start="33:5" pos:end="33:32"><name pos:start="33:5" pos:end="33:12">g_assert</name><argument_list pos:start="33:13" pos:end="33:32">(<argument pos:start="33:14" pos:end="33:31"><expr pos:start="33:14" pos:end="33:31"><name pos:start="33:14" pos:end="33:19">endptr</name> <operator pos:start="33:21" pos:end="33:22">==</operator> <name pos:start="33:24" pos:end="33:27">none</name> <operator pos:start="33:29" pos:end="33:29">+</operator> <literal type="number" pos:start="33:31" pos:end="33:31">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:35"><expr pos:start="37:5" pos:end="37:34"><name pos:start="37:5" pos:end="37:7">res</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <call pos:start="37:11" pos:end="37:34"><name pos:start="37:11" pos:end="37:22">qemu_strtosz</name><argument_list pos:start="37:23" pos:end="37:34">(<argument pos:start="37:24" pos:end="37:24"><expr pos:start="37:24" pos:end="37:24"><name pos:start="37:24" pos:end="37:24">b</name></expr></argument>, <argument pos:start="37:27" pos:end="37:33"><expr pos:start="37:27" pos:end="37:33"><operator pos:start="37:27" pos:end="37:27">&amp;</operator><name pos:start="37:28" pos:end="37:33">endptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:32"><expr pos:start="39:5" pos:end="39:31"><call pos:start="39:5" pos:end="39:31"><name pos:start="39:5" pos:end="39:19">g_assert_cmpint</name><argument_list pos:start="39:20" pos:end="39:31">(<argument pos:start="39:21" pos:end="39:23"><expr pos:start="39:21" pos:end="39:23"><name pos:start="39:21" pos:end="39:23">res</name></expr></argument>, <argument pos:start="39:26" pos:end="39:27"><expr pos:start="39:26" pos:end="39:27"><operator pos:start="39:26" pos:end="39:27">==</operator></expr></argument>, <argument pos:start="39:30" pos:end="39:30"><expr pos:start="39:30" pos:end="39:30"><literal type="number" pos:start="39:30" pos:end="39:30">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:30"><expr pos:start="41:5" pos:end="41:29"><call pos:start="41:5" pos:end="41:29"><name pos:start="41:5" pos:end="41:12">g_assert</name><argument_list pos:start="41:13" pos:end="41:29">(<argument pos:start="41:14" pos:end="41:28"><expr pos:start="41:14" pos:end="41:28"><name pos:start="41:14" pos:end="41:19">endptr</name> <operator pos:start="41:21" pos:end="41:22">==</operator> <name pos:start="41:24" pos:end="41:24">b</name> <operator pos:start="41:26" pos:end="41:26">+</operator> <literal type="number" pos:start="41:28" pos:end="41:28">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:35"><expr pos:start="45:5" pos:end="45:34"><name pos:start="45:5" pos:end="45:7">res</name> <operator pos:start="45:9" pos:end="45:9">=</operator> <call pos:start="45:11" pos:end="45:34"><name pos:start="45:11" pos:end="45:22">qemu_strtosz</name><argument_list pos:start="45:23" pos:end="45:34">(<argument pos:start="45:24" pos:end="45:24"><expr pos:start="45:24" pos:end="45:24"><name pos:start="45:24" pos:end="45:24">k</name></expr></argument>, <argument pos:start="45:27" pos:end="45:33"><expr pos:start="45:27" pos:end="45:33"><operator pos:start="45:27" pos:end="45:27">&amp;</operator><name pos:start="45:28" pos:end="45:33">endptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:37"><expr pos:start="47:5" pos:end="47:36"><call pos:start="47:5" pos:end="47:36"><name pos:start="47:5" pos:end="47:19">g_assert_cmpint</name><argument_list pos:start="47:20" pos:end="47:36">(<argument pos:start="47:21" pos:end="47:23"><expr pos:start="47:21" pos:end="47:23"><name pos:start="47:21" pos:end="47:23">res</name></expr></argument>, <argument pos:start="47:26" pos:end="47:27"><expr pos:start="47:26" pos:end="47:27"><operator pos:start="47:26" pos:end="47:27">==</operator></expr></argument>, <argument pos:start="47:30" pos:end="47:35"><expr pos:start="47:30" pos:end="47:35"><name pos:start="47:30" pos:end="47:35">K_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:30"><expr pos:start="49:5" pos:end="49:29"><call pos:start="49:5" pos:end="49:29"><name pos:start="49:5" pos:end="49:12">g_assert</name><argument_list pos:start="49:13" pos:end="49:29">(<argument pos:start="49:14" pos:end="49:28"><expr pos:start="49:14" pos:end="49:28"><name pos:start="49:14" pos:end="49:19">endptr</name> <operator pos:start="49:21" pos:end="49:22">==</operator> <name pos:start="49:24" pos:end="49:24">k</name> <operator pos:start="49:26" pos:end="49:26">+</operator> <literal type="number" pos:start="49:28" pos:end="49:28">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:35"><expr pos:start="53:5" pos:end="53:34"><name pos:start="53:5" pos:end="53:7">res</name> <operator pos:start="53:9" pos:end="53:9">=</operator> <call pos:start="53:11" pos:end="53:34"><name pos:start="53:11" pos:end="53:22">qemu_strtosz</name><argument_list pos:start="53:23" pos:end="53:34">(<argument pos:start="53:24" pos:end="53:24"><expr pos:start="53:24" pos:end="53:24"><name pos:start="53:24" pos:end="53:24">m</name></expr></argument>, <argument pos:start="53:27" pos:end="53:33"><expr pos:start="53:27" pos:end="53:33"><operator pos:start="53:27" pos:end="53:27">&amp;</operator><name pos:start="53:28" pos:end="53:33">endptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:37"><expr pos:start="55:5" pos:end="55:36"><call pos:start="55:5" pos:end="55:36"><name pos:start="55:5" pos:end="55:19">g_assert_cmpint</name><argument_list pos:start="55:20" pos:end="55:36">(<argument pos:start="55:21" pos:end="55:23"><expr pos:start="55:21" pos:end="55:23"><name pos:start="55:21" pos:end="55:23">res</name></expr></argument>, <argument pos:start="55:26" pos:end="55:27"><expr pos:start="55:26" pos:end="55:27"><operator pos:start="55:26" pos:end="55:27">==</operator></expr></argument>, <argument pos:start="55:30" pos:end="55:35"><expr pos:start="55:30" pos:end="55:35"><name pos:start="55:30" pos:end="55:35">M_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:30"><expr pos:start="57:5" pos:end="57:29"><call pos:start="57:5" pos:end="57:29"><name pos:start="57:5" pos:end="57:12">g_assert</name><argument_list pos:start="57:13" pos:end="57:29">(<argument pos:start="57:14" pos:end="57:28"><expr pos:start="57:14" pos:end="57:28"><name pos:start="57:14" pos:end="57:19">endptr</name> <operator pos:start="57:21" pos:end="57:22">==</operator> <name pos:start="57:24" pos:end="57:24">m</name> <operator pos:start="57:26" pos:end="57:26">+</operator> <literal type="number" pos:start="57:28" pos:end="57:28">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:35"><expr pos:start="61:5" pos:end="61:34"><name pos:start="61:5" pos:end="61:7">res</name> <operator pos:start="61:9" pos:end="61:9">=</operator> <call pos:start="61:11" pos:end="61:34"><name pos:start="61:11" pos:end="61:22">qemu_strtosz</name><argument_list pos:start="61:23" pos:end="61:34">(<argument pos:start="61:24" pos:end="61:24"><expr pos:start="61:24" pos:end="61:24"><name pos:start="61:24" pos:end="61:24">g</name></expr></argument>, <argument pos:start="61:27" pos:end="61:33"><expr pos:start="61:27" pos:end="61:33"><operator pos:start="61:27" pos:end="61:27">&amp;</operator><name pos:start="61:28" pos:end="61:33">endptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:37"><expr pos:start="63:5" pos:end="63:36"><call pos:start="63:5" pos:end="63:36"><name pos:start="63:5" pos:end="63:19">g_assert_cmpint</name><argument_list pos:start="63:20" pos:end="63:36">(<argument pos:start="63:21" pos:end="63:23"><expr pos:start="63:21" pos:end="63:23"><name pos:start="63:21" pos:end="63:23">res</name></expr></argument>, <argument pos:start="63:26" pos:end="63:27"><expr pos:start="63:26" pos:end="63:27"><operator pos:start="63:26" pos:end="63:27">==</operator></expr></argument>, <argument pos:start="63:30" pos:end="63:35"><expr pos:start="63:30" pos:end="63:35"><name pos:start="63:30" pos:end="63:35">G_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:30"><expr pos:start="65:5" pos:end="65:29"><call pos:start="65:5" pos:end="65:29"><name pos:start="65:5" pos:end="65:12">g_assert</name><argument_list pos:start="65:13" pos:end="65:29">(<argument pos:start="65:14" pos:end="65:28"><expr pos:start="65:14" pos:end="65:28"><name pos:start="65:14" pos:end="65:19">endptr</name> <operator pos:start="65:21" pos:end="65:22">==</operator> <name pos:start="65:24" pos:end="65:24">g</name> <operator pos:start="65:26" pos:end="65:26">+</operator> <literal type="number" pos:start="65:28" pos:end="65:28">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:35"><expr pos:start="69:5" pos:end="69:34"><name pos:start="69:5" pos:end="69:7">res</name> <operator pos:start="69:9" pos:end="69:9">=</operator> <call pos:start="69:11" pos:end="69:34"><name pos:start="69:11" pos:end="69:22">qemu_strtosz</name><argument_list pos:start="69:23" pos:end="69:34">(<argument pos:start="69:24" pos:end="69:24"><expr pos:start="69:24" pos:end="69:24"><name pos:start="69:24" pos:end="69:24">t</name></expr></argument>, <argument pos:start="69:27" pos:end="69:33"><expr pos:start="69:27" pos:end="69:33"><operator pos:start="69:27" pos:end="69:27">&amp;</operator><name pos:start="69:28" pos:end="69:33">endptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:37"><expr pos:start="71:5" pos:end="71:36"><call pos:start="71:5" pos:end="71:36"><name pos:start="71:5" pos:end="71:19">g_assert_cmpint</name><argument_list pos:start="71:20" pos:end="71:36">(<argument pos:start="71:21" pos:end="71:23"><expr pos:start="71:21" pos:end="71:23"><name pos:start="71:21" pos:end="71:23">res</name></expr></argument>, <argument pos:start="71:26" pos:end="71:27"><expr pos:start="71:26" pos:end="71:27"><operator pos:start="71:26" pos:end="71:27">==</operator></expr></argument>, <argument pos:start="71:30" pos:end="71:35"><expr pos:start="71:30" pos:end="71:35"><name pos:start="71:30" pos:end="71:35">T_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:30"><expr pos:start="73:5" pos:end="73:29"><call pos:start="73:5" pos:end="73:29"><name pos:start="73:5" pos:end="73:12">g_assert</name><argument_list pos:start="73:13" pos:end="73:29">(<argument pos:start="73:14" pos:end="73:28"><expr pos:start="73:14" pos:end="73:28"><name pos:start="73:14" pos:end="73:19">endptr</name> <operator pos:start="73:21" pos:end="73:22">==</operator> <name pos:start="73:24" pos:end="73:24">t</name> <operator pos:start="73:26" pos:end="73:26">+</operator> <literal type="number" pos:start="73:28" pos:end="73:28">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:35"><expr pos:start="77:5" pos:end="77:34"><name pos:start="77:5" pos:end="77:7">res</name> <operator pos:start="77:9" pos:end="77:9">=</operator> <call pos:start="77:11" pos:end="77:34"><name pos:start="77:11" pos:end="77:22">qemu_strtosz</name><argument_list pos:start="77:23" pos:end="77:34">(<argument pos:start="77:24" pos:end="77:24"><expr pos:start="77:24" pos:end="77:24"><name pos:start="77:24" pos:end="77:24">p</name></expr></argument>, <argument pos:start="77:27" pos:end="77:33"><expr pos:start="77:27" pos:end="77:33"><operator pos:start="77:27" pos:end="77:27">&amp;</operator><name pos:start="77:28" pos:end="77:33">endptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:37"><expr pos:start="79:5" pos:end="79:36"><call pos:start="79:5" pos:end="79:36"><name pos:start="79:5" pos:end="79:19">g_assert_cmpint</name><argument_list pos:start="79:20" pos:end="79:36">(<argument pos:start="79:21" pos:end="79:23"><expr pos:start="79:21" pos:end="79:23"><name pos:start="79:21" pos:end="79:23">res</name></expr></argument>, <argument pos:start="79:26" pos:end="79:27"><expr pos:start="79:26" pos:end="79:27"><operator pos:start="79:26" pos:end="79:27">==</operator></expr></argument>, <argument pos:start="79:30" pos:end="79:35"><expr pos:start="79:30" pos:end="79:35"><name pos:start="79:30" pos:end="79:35">P_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:30"><expr pos:start="81:5" pos:end="81:29"><call pos:start="81:5" pos:end="81:29"><name pos:start="81:5" pos:end="81:12">g_assert</name><argument_list pos:start="81:13" pos:end="81:29">(<argument pos:start="81:14" pos:end="81:28"><expr pos:start="81:14" pos:end="81:28"><name pos:start="81:14" pos:end="81:19">endptr</name> <operator pos:start="81:21" pos:end="81:22">==</operator> <name pos:start="81:24" pos:end="81:24">p</name> <operator pos:start="81:26" pos:end="81:26">+</operator> <literal type="number" pos:start="81:28" pos:end="81:28">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:35"><expr pos:start="85:5" pos:end="85:34"><name pos:start="85:5" pos:end="85:7">res</name> <operator pos:start="85:9" pos:end="85:9">=</operator> <call pos:start="85:11" pos:end="85:34"><name pos:start="85:11" pos:end="85:22">qemu_strtosz</name><argument_list pos:start="85:23" pos:end="85:34">(<argument pos:start="85:24" pos:end="85:24"><expr pos:start="85:24" pos:end="85:24"><name pos:start="85:24" pos:end="85:24">e</name></expr></argument>, <argument pos:start="85:27" pos:end="85:33"><expr pos:start="85:27" pos:end="85:33"><operator pos:start="85:27" pos:end="85:27">&amp;</operator><name pos:start="85:28" pos:end="85:33">endptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:37"><expr pos:start="87:5" pos:end="87:36"><call pos:start="87:5" pos:end="87:36"><name pos:start="87:5" pos:end="87:19">g_assert_cmpint</name><argument_list pos:start="87:20" pos:end="87:36">(<argument pos:start="87:21" pos:end="87:23"><expr pos:start="87:21" pos:end="87:23"><name pos:start="87:21" pos:end="87:23">res</name></expr></argument>, <argument pos:start="87:26" pos:end="87:27"><expr pos:start="87:26" pos:end="87:27"><operator pos:start="87:26" pos:end="87:27">==</operator></expr></argument>, <argument pos:start="87:30" pos:end="87:35"><expr pos:start="87:30" pos:end="87:35"><name pos:start="87:30" pos:end="87:35">E_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:30"><expr pos:start="89:5" pos:end="89:29"><call pos:start="89:5" pos:end="89:29"><name pos:start="89:5" pos:end="89:12">g_assert</name><argument_list pos:start="89:13" pos:end="89:29">(<argument pos:start="89:14" pos:end="89:28"><expr pos:start="89:14" pos:end="89:28"><name pos:start="89:14" pos:end="89:19">endptr</name> <operator pos:start="89:21" pos:end="89:22">==</operator> <name pos:start="89:24" pos:end="89:24">e</name> <operator pos:start="89:26" pos:end="89:26">+</operator> <literal type="number" pos:start="89:28" pos:end="89:28">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
