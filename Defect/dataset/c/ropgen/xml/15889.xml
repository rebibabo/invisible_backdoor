<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15889.c" pos:tabs="8"><function pos:start="1:1" pos:end="129:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:23">coroutine_fn</name></type> <name pos:start="1:25" pos:end="1:39">iscsi_co_writev</name><parameter_list pos:start="1:40" pos:end="5:58">(<parameter pos:start="1:41" pos:end="1:60"><decl pos:start="1:41" pos:end="1:60"><type pos:start="1:41" pos:end="1:60"><name pos:start="1:41" pos:end="1:56">BlockDriverState</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:60">bs</name></decl></parameter>,

                                        <parameter pos:start="3:41" pos:end="3:58"><decl pos:start="3:41" pos:end="3:58"><type pos:start="3:41" pos:end="3:58"><name pos:start="3:41" pos:end="3:47">int64_t</name></type> <name pos:start="3:49" pos:end="3:58">sector_num</name></decl></parameter>, <parameter pos:start="3:61" pos:end="3:74"><decl pos:start="3:61" pos:end="3:74"><type pos:start="3:61" pos:end="3:74"><name pos:start="3:61" pos:end="3:63">int</name></type> <name pos:start="3:65" pos:end="3:74">nb_sectors</name></decl></parameter>,

                                        <parameter pos:start="5:41" pos:end="5:57"><decl pos:start="5:41" pos:end="5:57"><type pos:start="5:41" pos:end="5:57"><name pos:start="5:41" pos:end="5:52">QEMUIOVector</name> <modifier pos:start="5:54" pos:end="5:54">*</modifier></type><name pos:start="5:55" pos:end="5:57">iov</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="129:1">{<block_content pos:start="9:5" pos:end="127:13">

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:35"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">IscsiLun</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:22">iscsilun</name> <init pos:start="9:24" pos:end="9:35">= <expr pos:start="9:26" pos:end="9:35"><name pos:start="9:26" pos:end="9:35"><name pos:start="9:26" pos:end="9:27">bs</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:35">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:20">IscsiTask</name></name></type> <name pos:start="11:22" pos:end="11:26">iTask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:16">lba</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:24">num_sectors</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:12"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">fua</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="25:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:66">(<expr pos:start="21:9" pos:end="21:65"><operator pos:start="21:9" pos:end="21:9">!</operator><call pos:start="21:10" pos:end="21:65"><name pos:start="21:10" pos:end="21:31">is_request_lun_aligned</name><argument_list pos:start="21:32" pos:end="21:65">(<argument pos:start="21:33" pos:end="21:42"><expr pos:start="21:33" pos:end="21:42"><name pos:start="21:33" pos:end="21:42">sector_num</name></expr></argument>, <argument pos:start="21:45" pos:end="21:54"><expr pos:start="21:45" pos:end="21:54"><name pos:start="21:45" pos:end="21:54">nb_sectors</name></expr></argument>, <argument pos:start="21:57" pos:end="21:64"><expr pos:start="21:57" pos:end="21:64"><name pos:start="21:57" pos:end="21:64">iscsilun</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:68" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:23">

        <return pos:start="23:9" pos:end="23:23">return <expr pos:start="23:16" pos:end="23:22"><operator pos:start="23:16" pos:end="23:16">-</operator><name pos:start="23:17" pos:end="23:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="29:5" pos:end="37:5"><if pos:start="29:5" pos:end="37:5">if <condition pos:start="29:8" pos:end="29:78">(<expr pos:start="29:9" pos:end="29:77"><name pos:start="29:9" pos:end="29:34"><name pos:start="29:9" pos:end="29:10">bs</name><operator pos:start="29:11" pos:end="29:12">-&gt;</operator><name pos:start="29:13" pos:end="29:14">bl</name><operator pos:start="29:15" pos:end="29:15">.</operator><name pos:start="29:16" pos:end="29:34">max_transfer_length</name></name> <operator pos:start="29:36" pos:end="29:37">&amp;&amp;</operator> <name pos:start="29:39" pos:end="29:48">nb_sectors</name> <operator pos:start="29:50" pos:end="29:50">&gt;</operator> <name pos:start="29:52" pos:end="29:77"><name pos:start="29:52" pos:end="29:53">bs</name><operator pos:start="29:54" pos:end="29:55">-&gt;</operator><name pos:start="29:56" pos:end="29:57">bl</name><operator pos:start="29:58" pos:end="29:58">.</operator><name pos:start="29:59" pos:end="29:77">max_transfer_length</name></name></expr>)</condition> <block pos:start="29:80" pos:end="37:5">{<block_content pos:start="31:9" pos:end="35:23">

        <expr_stmt pos:start="31:9" pos:end="33:78"><expr pos:start="31:9" pos:end="33:77"><call pos:start="31:9" pos:end="33:77"><name pos:start="31:9" pos:end="31:20">error_report</name><argument_list pos:start="31:21" pos:end="33:77">(<argument pos:start="31:22" pos:end="33:36"><expr pos:start="31:22" pos:end="33:36"><literal type="string" pos:start="31:22" pos:end="31:77">"iSCSI Error: Write of %d sectors exceeds max_xfer_len "</literal>

                     <literal type="string" pos:start="33:22" pos:end="33:36">"of %d sectors"</literal></expr></argument>, <argument pos:start="33:39" pos:end="33:48"><expr pos:start="33:39" pos:end="33:48"><name pos:start="33:39" pos:end="33:48">nb_sectors</name></expr></argument>, <argument pos:start="33:51" pos:end="33:76"><expr pos:start="33:51" pos:end="33:76"><name pos:start="33:51" pos:end="33:76"><name pos:start="33:51" pos:end="33:52">bs</name><operator pos:start="33:53" pos:end="33:54">-&gt;</operator><name pos:start="33:55" pos:end="33:56">bl</name><operator pos:start="33:57" pos:end="33:57">.</operator><name pos:start="33:58" pos:end="33:76">max_transfer_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:23">return <expr pos:start="35:16" pos:end="35:22"><operator pos:start="35:16" pos:end="35:16">-</operator><name pos:start="35:17" pos:end="35:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:48"><expr pos:start="41:5" pos:end="41:47"><name pos:start="41:5" pos:end="41:7">lba</name> <operator pos:start="41:9" pos:end="41:9">=</operator> <call pos:start="41:11" pos:end="41:47"><name pos:start="41:11" pos:end="41:25">sector_qemu2lun</name><argument_list pos:start="41:26" pos:end="41:47">(<argument pos:start="41:27" pos:end="41:36"><expr pos:start="41:27" pos:end="41:36"><name pos:start="41:27" pos:end="41:36">sector_num</name></expr></argument>, <argument pos:start="41:39" pos:end="41:46"><expr pos:start="41:39" pos:end="41:46"><name pos:start="41:39" pos:end="41:46">iscsilun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:56"><expr pos:start="43:5" pos:end="43:55"><name pos:start="43:5" pos:end="43:15">num_sectors</name> <operator pos:start="43:17" pos:end="43:17">=</operator> <call pos:start="43:19" pos:end="43:55"><name pos:start="43:19" pos:end="43:33">sector_qemu2lun</name><argument_list pos:start="43:34" pos:end="43:55">(<argument pos:start="43:35" pos:end="43:44"><expr pos:start="43:35" pos:end="43:44"><name pos:start="43:35" pos:end="43:44">nb_sectors</name></expr></argument>, <argument pos:start="43:47" pos:end="43:54"><expr pos:start="43:47" pos:end="43:54"><name pos:start="43:47" pos:end="43:54">iscsilun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:46"><expr pos:start="45:5" pos:end="45:45"><call pos:start="45:5" pos:end="45:45"><name pos:start="45:5" pos:end="45:27">iscsi_co_init_iscsitask</name><argument_list pos:start="45:28" pos:end="45:45">(<argument pos:start="45:29" pos:end="45:36"><expr pos:start="45:29" pos:end="45:36"><name pos:start="45:29" pos:end="45:36">iscsilun</name></expr></argument>, <argument pos:start="45:39" pos:end="45:44"><expr pos:start="45:39" pos:end="45:44"><operator pos:start="45:39" pos:end="45:39">&amp;</operator><name pos:start="45:40" pos:end="45:44">iTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="47:1" pos:end="47:6"><name pos:start="47:1" pos:end="47:5">retry</name>:</label>

    <expr_stmt pos:start="49:5" pos:end="49:59"><expr pos:start="49:5" pos:end="49:58"><name pos:start="49:5" pos:end="49:7">fua</name> <operator pos:start="49:9" pos:end="49:9">=</operator> <name pos:start="49:11" pos:end="49:26"><name pos:start="49:11" pos:end="49:18">iscsilun</name><operator pos:start="49:19" pos:end="49:20">-&gt;</operator><name pos:start="49:21" pos:end="49:26">dpofua</name></name> <operator pos:start="49:28" pos:end="49:29">&amp;&amp;</operator> <operator pos:start="49:31" pos:end="49:31">!</operator><call pos:start="49:32" pos:end="49:58"><name pos:start="49:32" pos:end="49:54">bdrv_enable_write_cache</name><argument_list pos:start="49:55" pos:end="49:58">(<argument pos:start="49:56" pos:end="49:57"><expr pos:start="49:56" pos:end="49:57"><name pos:start="49:56" pos:end="49:57">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:34"><expr pos:start="51:5" pos:end="51:33"><name pos:start="51:5" pos:end="51:26"><name pos:start="51:5" pos:end="51:9">iTask</name><operator pos:start="51:10" pos:end="51:10">.</operator><name pos:start="51:11" pos:end="51:26">force_next_flush</name></name> <operator pos:start="51:28" pos:end="51:28">=</operator> <operator pos:start="51:30" pos:end="51:30">!</operator><name pos:start="51:31" pos:end="51:33">fua</name></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="73:5"><if pos:start="53:5" pos:end="63:5">if <condition pos:start="53:8" pos:end="53:32">(<expr pos:start="53:9" pos:end="53:31"><name pos:start="53:9" pos:end="53:31"><name pos:start="53:9" pos:end="53:16">iscsilun</name><operator pos:start="53:17" pos:end="53:18">-&gt;</operator><name pos:start="53:19" pos:end="53:31">use_16_for_rw</name></name></expr>)</condition> <block pos:start="53:34" pos:end="63:5">{<block_content pos:start="55:9" pos:end="61:69">

        <expr_stmt pos:start="55:9" pos:end="61:69"><expr pos:start="55:9" pos:end="61:68"><name pos:start="55:9" pos:end="55:18"><name pos:start="55:9" pos:end="55:13">iTask</name><operator pos:start="55:14" pos:end="55:14">.</operator><name pos:start="55:15" pos:end="55:18">task</name></name> <operator pos:start="55:20" pos:end="55:20">=</operator> <call pos:start="55:22" pos:end="61:68"><name pos:start="55:22" pos:end="55:39">iscsi_write16_task</name><argument_list pos:start="55:40" pos:end="61:68">(<argument pos:start="55:41" pos:end="55:55"><expr pos:start="55:41" pos:end="55:55"><name pos:start="55:41" pos:end="55:55"><name pos:start="55:41" pos:end="55:48">iscsilun</name><operator pos:start="55:49" pos:end="55:50">-&gt;</operator><name pos:start="55:51" pos:end="55:55">iscsi</name></name></expr></argument>, <argument pos:start="55:58" pos:end="55:70"><expr pos:start="55:58" pos:end="55:70"><name pos:start="55:58" pos:end="55:70"><name pos:start="55:58" pos:end="55:65">iscsilun</name><operator pos:start="55:66" pos:end="55:67">-&gt;</operator><name pos:start="55:68" pos:end="55:70">lun</name></name></expr></argument>, <argument pos:start="55:73" pos:end="55:75"><expr pos:start="55:73" pos:end="55:75"><name pos:start="55:73" pos:end="55:75">lba</name></expr></argument>,

                                        <argument pos:start="57:41" pos:end="57:44"><expr pos:start="57:41" pos:end="57:44"><name pos:start="57:41" pos:end="57:44">NULL</name></expr></argument>, <argument pos:start="57:47" pos:end="57:80"><expr pos:start="57:47" pos:end="57:80"><name pos:start="57:47" pos:end="57:57">num_sectors</name> <operator pos:start="57:59" pos:end="57:59">*</operator> <name pos:start="57:61" pos:end="57:80"><name pos:start="57:61" pos:end="57:68">iscsilun</name><operator pos:start="57:69" pos:end="57:70">-&gt;</operator><name pos:start="57:71" pos:end="57:80">block_size</name></name></expr></argument>,

                                        <argument pos:start="59:41" pos:end="59:60"><expr pos:start="59:41" pos:end="59:60"><name pos:start="59:41" pos:end="59:60"><name pos:start="59:41" pos:end="59:48">iscsilun</name><operator pos:start="59:49" pos:end="59:50">-&gt;</operator><name pos:start="59:51" pos:end="59:60">block_size</name></name></expr></argument>, <argument pos:start="59:63" pos:end="59:63"><expr pos:start="59:63" pos:end="59:63"><literal type="number" pos:start="59:63" pos:end="59:63">0</literal></expr></argument>, <argument pos:start="59:66" pos:end="59:66"><expr pos:start="59:66" pos:end="59:66"><literal type="number" pos:start="59:66" pos:end="59:66">0</literal></expr></argument>, <argument pos:start="59:69" pos:end="59:71"><expr pos:start="59:69" pos:end="59:71"><name pos:start="59:69" pos:end="59:71">fua</name></expr></argument>, <argument pos:start="59:74" pos:end="59:74"><expr pos:start="59:74" pos:end="59:74"><literal type="number" pos:start="59:74" pos:end="59:74">0</literal></expr></argument>, <argument pos:start="59:77" pos:end="59:77"><expr pos:start="59:77" pos:end="59:77"><literal type="number" pos:start="59:77" pos:end="59:77">0</literal></expr></argument>,

                                        <argument pos:start="61:41" pos:end="61:59"><expr pos:start="61:41" pos:end="61:59"><name pos:start="61:41" pos:end="61:59">iscsi_co_generic_cb</name></expr></argument>, <argument pos:start="61:62" pos:end="61:67"><expr pos:start="61:62" pos:end="61:67"><operator pos:start="61:62" pos:end="61:62">&amp;</operator><name pos:start="61:63" pos:end="61:67">iTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="63:7" pos:end="73:5">else <block pos:start="63:12" pos:end="73:5">{<block_content pos:start="65:9" pos:end="71:69">

        <expr_stmt pos:start="65:9" pos:end="71:69"><expr pos:start="65:9" pos:end="71:68"><name pos:start="65:9" pos:end="65:18"><name pos:start="65:9" pos:end="65:13">iTask</name><operator pos:start="65:14" pos:end="65:14">.</operator><name pos:start="65:15" pos:end="65:18">task</name></name> <operator pos:start="65:20" pos:end="65:20">=</operator> <call pos:start="65:22" pos:end="71:68"><name pos:start="65:22" pos:end="65:39">iscsi_write10_task</name><argument_list pos:start="65:40" pos:end="71:68">(<argument pos:start="65:41" pos:end="65:55"><expr pos:start="65:41" pos:end="65:55"><name pos:start="65:41" pos:end="65:55"><name pos:start="65:41" pos:end="65:48">iscsilun</name><operator pos:start="65:49" pos:end="65:50">-&gt;</operator><name pos:start="65:51" pos:end="65:55">iscsi</name></name></expr></argument>, <argument pos:start="65:58" pos:end="65:70"><expr pos:start="65:58" pos:end="65:70"><name pos:start="65:58" pos:end="65:70"><name pos:start="65:58" pos:end="65:65">iscsilun</name><operator pos:start="65:66" pos:end="65:67">-&gt;</operator><name pos:start="65:68" pos:end="65:70">lun</name></name></expr></argument>, <argument pos:start="65:73" pos:end="65:75"><expr pos:start="65:73" pos:end="65:75"><name pos:start="65:73" pos:end="65:75">lba</name></expr></argument>,

                                        <argument pos:start="67:41" pos:end="67:44"><expr pos:start="67:41" pos:end="67:44"><name pos:start="67:41" pos:end="67:44">NULL</name></expr></argument>, <argument pos:start="67:47" pos:end="67:80"><expr pos:start="67:47" pos:end="67:80"><name pos:start="67:47" pos:end="67:57">num_sectors</name> <operator pos:start="67:59" pos:end="67:59">*</operator> <name pos:start="67:61" pos:end="67:80"><name pos:start="67:61" pos:end="67:68">iscsilun</name><operator pos:start="67:69" pos:end="67:70">-&gt;</operator><name pos:start="67:71" pos:end="67:80">block_size</name></name></expr></argument>,

                                        <argument pos:start="69:41" pos:end="69:60"><expr pos:start="69:41" pos:end="69:60"><name pos:start="69:41" pos:end="69:60"><name pos:start="69:41" pos:end="69:48">iscsilun</name><operator pos:start="69:49" pos:end="69:50">-&gt;</operator><name pos:start="69:51" pos:end="69:60">block_size</name></name></expr></argument>, <argument pos:start="69:63" pos:end="69:63"><expr pos:start="69:63" pos:end="69:63"><literal type="number" pos:start="69:63" pos:end="69:63">0</literal></expr></argument>, <argument pos:start="69:66" pos:end="69:66"><expr pos:start="69:66" pos:end="69:66"><literal type="number" pos:start="69:66" pos:end="69:66">0</literal></expr></argument>, <argument pos:start="69:69" pos:end="69:71"><expr pos:start="69:69" pos:end="69:71"><name pos:start="69:69" pos:end="69:71">fua</name></expr></argument>, <argument pos:start="69:74" pos:end="69:74"><expr pos:start="69:74" pos:end="69:74"><literal type="number" pos:start="69:74" pos:end="69:74">0</literal></expr></argument>, <argument pos:start="69:77" pos:end="69:77"><expr pos:start="69:77" pos:end="69:77"><literal type="number" pos:start="69:77" pos:end="69:77">0</literal></expr></argument>,

                                        <argument pos:start="71:41" pos:end="71:59"><expr pos:start="71:41" pos:end="71:59"><name pos:start="71:41" pos:end="71:59">iscsi_co_generic_cb</name></expr></argument>, <argument pos:start="71:62" pos:end="71:67"><expr pos:start="71:62" pos:end="71:67"><operator pos:start="71:62" pos:end="71:62">&amp;</operator><name pos:start="71:63" pos:end="71:67">iTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="75:5" pos:end="79:5"><if pos:start="75:5" pos:end="79:5">if <condition pos:start="75:8" pos:end="75:27">(<expr pos:start="75:9" pos:end="75:26"><name pos:start="75:9" pos:end="75:18"><name pos:start="75:9" pos:end="75:13">iTask</name><operator pos:start="75:14" pos:end="75:14">.</operator><name pos:start="75:15" pos:end="75:18">task</name></name> <operator pos:start="75:20" pos:end="75:21">==</operator> <name pos:start="75:23" pos:end="75:26">NULL</name></expr>)</condition> <block pos:start="75:29" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:23">

        <return pos:start="77:9" pos:end="77:23">return <expr pos:start="77:16" pos:end="77:22"><operator pos:start="77:16" pos:end="77:16">-</operator><name pos:start="77:17" pos:end="77:22">ENOMEM</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="81:5" pos:end="83:37"><expr pos:start="81:5" pos:end="83:36"><call pos:start="81:5" pos:end="83:36"><name pos:start="81:5" pos:end="81:25">scsi_task_set_iov_out</name><argument_list pos:start="81:26" pos:end="83:36">(<argument pos:start="81:27" pos:end="81:36"><expr pos:start="81:27" pos:end="81:36"><name pos:start="81:27" pos:end="81:36"><name pos:start="81:27" pos:end="81:31">iTask</name><operator pos:start="81:32" pos:end="81:32">.</operator><name pos:start="81:33" pos:end="81:36">task</name></name></expr></argument>, <argument pos:start="81:39" pos:end="81:68"><expr pos:start="81:39" pos:end="81:68"><operator pos:start="81:39" pos:end="81:39">(</operator>struct <name pos:start="81:47" pos:end="81:56">scsi_iovec</name> <operator pos:start="81:58" pos:end="81:58">*</operator><operator pos:start="81:59" pos:end="81:59">)</operator> <name pos:start="81:61" pos:end="81:68"><name pos:start="81:61" pos:end="81:63">iov</name><operator pos:start="81:64" pos:end="81:65">-&gt;</operator><name pos:start="81:66" pos:end="81:68">iov</name></name></expr></argument>,

                          <argument pos:start="83:27" pos:end="83:35"><expr pos:start="83:27" pos:end="83:35"><name pos:start="83:27" pos:end="83:35"><name pos:start="83:27" pos:end="83:29">iov</name><operator pos:start="83:30" pos:end="83:31">-&gt;</operator><name pos:start="83:32" pos:end="83:35">niov</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="85:5" pos:end="91:5">while <condition pos:start="85:11" pos:end="85:27">(<expr pos:start="85:12" pos:end="85:26"><operator pos:start="85:12" pos:end="85:12">!</operator><name pos:start="85:13" pos:end="85:26"><name pos:start="85:13" pos:end="85:17">iTask</name><operator pos:start="85:18" pos:end="85:18">.</operator><name pos:start="85:19" pos:end="85:26">complete</name></name></expr>)</condition> <block pos:start="85:29" pos:end="91:5">{<block_content pos:start="87:9" pos:end="89:31">

        <expr_stmt pos:start="87:9" pos:end="87:35"><expr pos:start="87:9" pos:end="87:34"><call pos:start="87:9" pos:end="87:34"><name pos:start="87:9" pos:end="87:24">iscsi_set_events</name><argument_list pos:start="87:25" pos:end="87:34">(<argument pos:start="87:26" pos:end="87:33"><expr pos:start="87:26" pos:end="87:33"><name pos:start="87:26" pos:end="87:33">iscsilun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:31"><expr pos:start="89:9" pos:end="89:30"><call pos:start="89:9" pos:end="89:30"><name pos:start="89:9" pos:end="89:28">qemu_coroutine_yield</name><argument_list pos:start="89:29" pos:end="89:30">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="95:5" pos:end="101:5"><if pos:start="95:5" pos:end="101:5">if <condition pos:start="95:8" pos:end="95:27">(<expr pos:start="95:9" pos:end="95:26"><name pos:start="95:9" pos:end="95:18"><name pos:start="95:9" pos:end="95:13">iTask</name><operator pos:start="95:14" pos:end="95:14">.</operator><name pos:start="95:15" pos:end="95:18">task</name></name> <operator pos:start="95:20" pos:end="95:21">!=</operator> <name pos:start="95:23" pos:end="95:26">NULL</name></expr>)</condition> <block pos:start="95:29" pos:end="101:5">{<block_content pos:start="97:9" pos:end="99:26">

        <expr_stmt pos:start="97:9" pos:end="97:40"><expr pos:start="97:9" pos:end="97:39"><call pos:start="97:9" pos:end="97:39"><name pos:start="97:9" pos:end="97:27">scsi_free_scsi_task</name><argument_list pos:start="97:28" pos:end="97:39">(<argument pos:start="97:29" pos:end="97:38"><expr pos:start="97:29" pos:end="97:38"><name pos:start="97:29" pos:end="97:38"><name pos:start="97:29" pos:end="97:33">iTask</name><operator pos:start="97:34" pos:end="97:34">.</operator><name pos:start="97:35" pos:end="97:38">task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:26"><expr pos:start="99:9" pos:end="99:25"><name pos:start="99:9" pos:end="99:18"><name pos:start="99:9" pos:end="99:13">iTask</name><operator pos:start="99:14" pos:end="99:14">.</operator><name pos:start="99:15" pos:end="99:18">task</name></name> <operator pos:start="99:20" pos:end="99:20">=</operator> <name pos:start="99:22" pos:end="99:25">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="105:5" pos:end="111:5"><if pos:start="105:5" pos:end="111:5">if <condition pos:start="105:8" pos:end="105:23">(<expr pos:start="105:9" pos:end="105:22"><name pos:start="105:9" pos:end="105:22"><name pos:start="105:9" pos:end="105:13">iTask</name><operator pos:start="105:14" pos:end="105:14">.</operator><name pos:start="105:15" pos:end="105:22">do_retry</name></name></expr>)</condition> <block pos:start="105:25" pos:end="111:5">{<block_content pos:start="107:9" pos:end="109:19">

        <expr_stmt pos:start="107:9" pos:end="107:27"><expr pos:start="107:9" pos:end="107:26"><name pos:start="107:9" pos:end="107:22"><name pos:start="107:9" pos:end="107:13">iTask</name><operator pos:start="107:14" pos:end="107:14">.</operator><name pos:start="107:15" pos:end="107:22">complete</name></name> <operator pos:start="107:24" pos:end="107:24">=</operator> <literal type="number" pos:start="107:26" pos:end="107:26">0</literal></expr>;</expr_stmt>

        <goto pos:start="109:9" pos:end="109:19">goto <name pos:start="109:14" pos:end="109:18">retry</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="115:5" pos:end="119:5"><if pos:start="115:5" pos:end="119:5">if <condition pos:start="115:8" pos:end="115:41">(<expr pos:start="115:9" pos:end="115:40"><name pos:start="115:9" pos:end="115:20"><name pos:start="115:9" pos:end="115:13">iTask</name><operator pos:start="115:14" pos:end="115:14">.</operator><name pos:start="115:15" pos:end="115:20">status</name></name> <operator pos:start="115:22" pos:end="115:23">!=</operator> <name pos:start="115:25" pos:end="115:40">SCSI_STATUS_GOOD</name></expr>)</condition> <block pos:start="115:43" pos:end="119:5">{<block_content pos:start="117:9" pos:end="117:30">

        <return pos:start="117:9" pos:end="117:30">return <expr pos:start="117:16" pos:end="117:29"><name pos:start="117:16" pos:end="117:29"><name pos:start="117:16" pos:end="117:20">iTask</name><operator pos:start="117:21" pos:end="117:21">.</operator><name pos:start="117:22" pos:end="117:29">err_code</name></name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:62"><expr pos:start="123:5" pos:end="123:61"><call pos:start="123:5" pos:end="123:61"><name pos:start="123:5" pos:end="123:27">iscsi_allocationmap_set</name><argument_list pos:start="123:28" pos:end="123:61">(<argument pos:start="123:29" pos:end="123:36"><expr pos:start="123:29" pos:end="123:36"><name pos:start="123:29" pos:end="123:36">iscsilun</name></expr></argument>, <argument pos:start="123:39" pos:end="123:48"><expr pos:start="123:39" pos:end="123:48"><name pos:start="123:39" pos:end="123:48">sector_num</name></expr></argument>, <argument pos:start="123:51" pos:end="123:60"><expr pos:start="123:51" pos:end="123:60"><name pos:start="123:51" pos:end="123:60">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="127:5" pos:end="127:13">return <expr pos:start="127:12" pos:end="127:12"><literal type="number" pos:start="127:12" pos:end="127:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
