<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3346.c" pos:tabs="8"><function pos:start="1:1" pos:end="215:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">tak_read_header</name><parameter_list pos:start="1:27" pos:end="1:46">(<parameter pos:start="1:28" pos:end="1:45"><decl pos:start="1:28" pos:end="1:45"><type pos:start="1:28" pos:end="1:44"><name pos:start="1:28" pos:end="1:42">AVFormatContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="215:1">{<block_content pos:start="5:5" pos:end="213:23">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:38"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19">TAKDemuxContext</name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:23">tc</name> <init pos:start="5:25" pos:end="5:38">= <expr pos:start="5:27" pos:end="5:38"><name pos:start="5:27" pos:end="5:38"><name pos:start="5:27" pos:end="5:27">s</name><operator pos:start="5:28" pos:end="5:29">-&gt;</operator><name pos:start="5:30" pos:end="5:38">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:31"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">AVIOContext</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:19">pb</name>     <init pos:start="7:25" pos:end="7:31">= <expr pos:start="7:27" pos:end="7:31"><name pos:start="7:27" pos:end="7:31"><name pos:start="7:27" pos:end="7:27">s</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:31">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:17">GetBitContext</name></type> <name pos:start="9:19" pos:end="9:20">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">AVStream</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:16">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:19">buffer</name> <init pos:start="13:21" pos:end="13:26">= <expr pos:start="13:23" pos:end="13:26"><name pos:start="13:23" pos:end="13:26">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:35"><expr pos:start="19:5" pos:end="19:34"><name pos:start="19:5" pos:end="19:6">st</name> <operator pos:start="19:8" pos:end="19:8">=</operator> <call pos:start="19:10" pos:end="19:34"><name pos:start="19:10" pos:end="19:28">avformat_new_stream</name><argument_list pos:start="19:29" pos:end="19:34">(<argument pos:start="19:30" pos:end="19:30"><expr pos:start="19:30" pos:end="19:30"><name pos:start="19:30" pos:end="19:30">s</name></expr></argument>, <argument pos:start="19:33" pos:end="19:33"><expr pos:start="19:33" pos:end="19:33"><literal type="number" pos:start="19:33" pos:end="19:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="23:31"><if pos:start="21:5" pos:end="23:31">if <condition pos:start="21:8" pos:end="21:12">(<expr pos:start="21:9" pos:end="21:11"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:11">st</name></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:31"><block_content pos:start="23:9" pos:end="23:31">

        <return pos:start="23:9" pos:end="23:31">return <expr pos:start="23:16" pos:end="23:30"><call pos:start="23:16" pos:end="23:30"><name pos:start="23:16" pos:end="23:22">AVERROR</name><argument_list pos:start="23:23" pos:end="23:30">(<argument pos:start="23:24" pos:end="23:29"><expr pos:start="23:24" pos:end="23:29"><name pos:start="23:24" pos:end="23:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:47"><expr pos:start="27:5" pos:end="27:46"><name pos:start="27:5" pos:end="27:25"><name pos:start="27:5" pos:end="27:6">st</name><operator pos:start="27:7" pos:end="27:8">-&gt;</operator><name pos:start="27:9" pos:end="27:13">codec</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:25">codec_type</name></name> <operator pos:start="27:27" pos:end="27:27">=</operator> <name pos:start="27:29" pos:end="27:46">AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:44"><expr pos:start="29:5" pos:end="29:43"><name pos:start="29:5" pos:end="29:23"><name pos:start="29:5" pos:end="29:6">st</name><operator pos:start="29:7" pos:end="29:8">-&gt;</operator><name pos:start="29:9" pos:end="29:13">codec</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:23">codec_id</name></name>   <operator pos:start="29:27" pos:end="29:27">=</operator> <name pos:start="29:29" pos:end="29:43">AV_CODEC_ID_TAK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:52"><expr pos:start="31:5" pos:end="31:51"><name pos:start="31:5" pos:end="31:20"><name pos:start="31:5" pos:end="31:6">st</name><operator pos:start="31:7" pos:end="31:8">-&gt;</operator><name pos:start="31:9" pos:end="31:20">need_parsing</name></name>      <operator pos:start="31:27" pos:end="31:27">=</operator> <name pos:start="31:29" pos:end="31:51">AVSTREAM_PARSE_FULL_RAW</name></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:24"><expr pos:start="35:5" pos:end="35:23"><name pos:start="35:5" pos:end="35:19"><name pos:start="35:5" pos:end="35:6">tc</name><operator pos:start="35:7" pos:end="35:8">-&gt;</operator><name pos:start="35:9" pos:end="35:19">mlast_frame</name></name> <operator pos:start="35:21" pos:end="35:21">=</operator> <literal type="number" pos:start="35:23" pos:end="35:23">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:51">(<expr pos:start="37:9" pos:end="37:50"><call pos:start="37:9" pos:end="37:21"><name pos:start="37:9" pos:end="37:17">avio_rl32</name><argument_list pos:start="37:18" pos:end="37:21">(<argument pos:start="37:19" pos:end="37:20"><expr pos:start="37:19" pos:end="37:20"><name pos:start="37:19" pos:end="37:20">pb</name></expr></argument>)</argument_list></call> <operator pos:start="37:23" pos:end="37:24">!=</operator> <call pos:start="37:26" pos:end="37:50"><name pos:start="37:26" pos:end="37:30">MKTAG</name><argument_list pos:start="37:31" pos:end="37:50">(<argument pos:start="37:32" pos:end="37:34"><expr pos:start="37:32" pos:end="37:34"><literal type="char" pos:start="37:32" pos:end="37:34">'t'</literal></expr></argument>, <argument pos:start="37:37" pos:end="37:39"><expr pos:start="37:37" pos:end="37:39"><literal type="char" pos:start="37:37" pos:end="37:39">'B'</literal></expr></argument>, <argument pos:start="37:42" pos:end="37:44"><expr pos:start="37:42" pos:end="37:44"><literal type="char" pos:start="37:42" pos:end="37:44">'a'</literal></expr></argument>, <argument pos:start="37:47" pos:end="37:49"><expr pos:start="37:47" pos:end="37:49"><literal type="char" pos:start="37:47" pos:end="37:49">'K'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="37:53" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:17">

        <expr_stmt pos:start="39:9" pos:end="39:36"><expr pos:start="39:9" pos:end="39:35"><call pos:start="39:9" pos:end="39:35"><name pos:start="39:9" pos:end="39:17">avio_seek</name><argument_list pos:start="39:18" pos:end="39:35">(<argument pos:start="39:19" pos:end="39:20"><expr pos:start="39:19" pos:end="39:20"><name pos:start="39:19" pos:end="39:20">pb</name></expr></argument>, <argument pos:start="39:23" pos:end="39:24"><expr pos:start="39:23" pos:end="39:24"><operator pos:start="39:23" pos:end="39:23">-</operator><literal type="number" pos:start="39:24" pos:end="39:24">4</literal></expr></argument>, <argument pos:start="39:27" pos:end="39:34"><expr pos:start="39:27" pos:end="39:34"><name pos:start="39:27" pos:end="39:34">SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:17">return <expr pos:start="41:16" pos:end="41:16"><literal type="number" pos:start="41:16" pos:end="41:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <while pos:start="47:5" pos:end="209:5">while <condition pos:start="47:11" pos:end="47:25">(<expr pos:start="47:12" pos:end="47:24"><operator pos:start="47:12" pos:end="47:12">!</operator><call pos:start="47:13" pos:end="47:24"><name pos:start="47:13" pos:end="47:20">url_feof</name><argument_list pos:start="47:21" pos:end="47:24">(<argument pos:start="47:22" pos:end="47:23"><expr pos:start="47:22" pos:end="47:23"><name pos:start="47:22" pos:end="47:23">pb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="47:27" pos:end="209:5">{<block_content pos:start="49:9" pos:end="207:9">

        <decl_stmt pos:start="49:9" pos:end="49:34"><decl pos:start="49:9" pos:end="49:33"><type pos:start="49:9" pos:end="49:28"><name pos:start="49:9" pos:end="49:28"><name pos:start="49:9" pos:end="49:12">enum</name> <name pos:start="49:14" pos:end="49:28">TAKMetaDataType</name></name></type> <name pos:start="49:30" pos:end="49:33">type</name></decl>;</decl_stmt>

        <decl_stmt pos:start="51:9" pos:end="51:17"><decl pos:start="51:9" pos:end="51:16"><type pos:start="51:9" pos:end="51:11"><name pos:start="51:9" pos:end="51:11">int</name></type> <name pos:start="51:13" pos:end="51:16">size</name></decl>;</decl_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:34"><expr pos:start="55:9" pos:end="55:33"><name pos:start="55:9" pos:end="55:12">type</name> <operator pos:start="55:14" pos:end="55:14">=</operator> <call pos:start="55:16" pos:end="55:26"><name pos:start="55:16" pos:end="55:22">avio_r8</name><argument_list pos:start="55:23" pos:end="55:26">(<argument pos:start="55:24" pos:end="55:25"><expr pos:start="55:24" pos:end="55:25"><name pos:start="55:24" pos:end="55:25">pb</name></expr></argument>)</argument_list></call> <operator pos:start="55:28" pos:end="55:28">&amp;</operator> <literal type="number" pos:start="55:30" pos:end="55:33">0x7f</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:29"><expr pos:start="57:9" pos:end="57:28"><name pos:start="57:9" pos:end="57:12">size</name> <operator pos:start="57:14" pos:end="57:14">=</operator> <call pos:start="57:16" pos:end="57:28"><name pos:start="57:16" pos:end="57:24">avio_rl24</name><argument_list pos:start="57:25" pos:end="57:28">(<argument pos:start="57:26" pos:end="57:27"><expr pos:start="57:26" pos:end="57:27"><name pos:start="57:26" pos:end="57:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <switch pos:start="61:9" pos:end="149:9">switch <condition pos:start="61:16" pos:end="61:21">(<expr pos:start="61:17" pos:end="61:20"><name pos:start="61:17" pos:end="61:20">type</name></expr>)</condition> <block pos:start="61:23" pos:end="149:9">{<block_content pos:start="63:9" pos:end="147:27">

        <case pos:start="63:9" pos:end="63:37">case <expr pos:start="63:14" pos:end="63:36"><name pos:start="63:14" pos:end="63:36">TAK_METADATA_STREAMINFO</name></expr>:</case>

        <case pos:start="65:9" pos:end="65:37">case <expr pos:start="65:14" pos:end="65:36"><name pos:start="65:14" pos:end="65:36">TAK_METADATA_LAST_FRAME</name></expr>:</case>

        <case pos:start="67:9" pos:end="67:34">case <expr pos:start="67:14" pos:end="67:33"><name pos:start="67:14" pos:end="67:33">TAK_METADATA_ENCODER</name></expr>:</case>

            <expr_stmt pos:start="69:13" pos:end="69:68"><expr pos:start="69:13" pos:end="69:67"><name pos:start="69:13" pos:end="69:18">buffer</name> <operator pos:start="69:20" pos:end="69:20">=</operator> <call pos:start="69:22" pos:end="69:67"><name pos:start="69:22" pos:end="69:30">av_malloc</name><argument_list pos:start="69:31" pos:end="69:67">(<argument pos:start="69:32" pos:end="69:66"><expr pos:start="69:32" pos:end="69:66"><name pos:start="69:32" pos:end="69:35">size</name> <operator pos:start="69:37" pos:end="69:37">+</operator> <name pos:start="69:39" pos:end="69:66">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="71:13" pos:end="73:39"><if pos:start="71:13" pos:end="73:39">if <condition pos:start="71:16" pos:end="71:24">(<expr pos:start="71:17" pos:end="71:23"><operator pos:start="71:17" pos:end="71:17">!</operator><name pos:start="71:18" pos:end="71:23">buffer</name></expr>)</condition><block type="pseudo" pos:start="73:17" pos:end="73:39"><block_content pos:start="73:17" pos:end="73:39">

                <return pos:start="73:17" pos:end="73:39">return <expr pos:start="73:24" pos:end="73:38"><call pos:start="73:24" pos:end="73:38"><name pos:start="73:24" pos:end="73:30">AVERROR</name><argument_list pos:start="73:31" pos:end="73:38">(<argument pos:start="73:32" pos:end="73:37"><expr pos:start="73:32" pos:end="73:37"><name pos:start="73:32" pos:end="73:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



            <if_stmt pos:start="77:13" pos:end="83:13"><if pos:start="77:13" pos:end="83:13">if <condition pos:start="77:16" pos:end="77:52">(<expr pos:start="77:17" pos:end="77:51"><call pos:start="77:17" pos:end="77:43"><name pos:start="77:17" pos:end="77:25">avio_read</name><argument_list pos:start="77:26" pos:end="77:43">(<argument pos:start="77:27" pos:end="77:28"><expr pos:start="77:27" pos:end="77:28"><name pos:start="77:27" pos:end="77:28">pb</name></expr></argument>, <argument pos:start="77:31" pos:end="77:36"><expr pos:start="77:31" pos:end="77:36"><name pos:start="77:31" pos:end="77:36">buffer</name></expr></argument>, <argument pos:start="77:39" pos:end="77:42"><expr pos:start="77:39" pos:end="77:42"><name pos:start="77:39" pos:end="77:42">size</name></expr></argument>)</argument_list></call> <operator pos:start="77:45" pos:end="77:46">!=</operator> <name pos:start="77:48" pos:end="77:51">size</name></expr>)</condition> <block pos:start="77:54" pos:end="83:13">{<block_content pos:start="79:17" pos:end="81:36">

                <expr_stmt pos:start="79:17" pos:end="79:34"><expr pos:start="79:17" pos:end="79:33"><call pos:start="79:17" pos:end="79:33"><name pos:start="79:17" pos:end="79:24">av_freep</name><argument_list pos:start="79:25" pos:end="79:33">(<argument pos:start="79:26" pos:end="79:32"><expr pos:start="79:26" pos:end="79:32"><operator pos:start="79:26" pos:end="79:26">&amp;</operator><name pos:start="79:27" pos:end="79:32">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="81:17" pos:end="81:36">return <expr pos:start="81:24" pos:end="81:35"><call pos:start="81:24" pos:end="81:35"><name pos:start="81:24" pos:end="81:30">AVERROR</name><argument_list pos:start="81:31" pos:end="81:35">(<argument pos:start="81:32" pos:end="81:34"><expr pos:start="81:32" pos:end="81:34"><name pos:start="81:32" pos:end="81:34">EIO</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="87:13" pos:end="87:49"><expr pos:start="87:13" pos:end="87:48"><call pos:start="87:13" pos:end="87:48"><name pos:start="87:13" pos:end="87:25">init_get_bits</name><argument_list pos:start="87:26" pos:end="87:48">(<argument pos:start="87:27" pos:end="87:29"><expr pos:start="87:27" pos:end="87:29"><operator pos:start="87:27" pos:end="87:27">&amp;</operator><name pos:start="87:28" pos:end="87:29">gb</name></expr></argument>, <argument pos:start="87:32" pos:end="87:37"><expr pos:start="87:32" pos:end="87:37"><name pos:start="87:32" pos:end="87:37">buffer</name></expr></argument>, <argument pos:start="87:40" pos:end="87:47"><expr pos:start="87:40" pos:end="87:47"><name pos:start="87:40" pos:end="87:43">size</name> <operator pos:start="87:45" pos:end="87:45">*</operator> <literal type="number" pos:start="87:47" pos:end="87:47">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="89:13" pos:end="89:18">break;</break>

        <case pos:start="91:9" pos:end="91:30">case <expr pos:start="91:14" pos:end="91:29"><name pos:start="91:14" pos:end="91:29">TAK_METADATA_MD5</name></expr>:</case> <block pos:start="91:32" pos:end="117:9">{<block_content pos:start="93:13" pos:end="115:18">

            <decl_stmt pos:start="93:13" pos:end="93:28"><decl pos:start="93:13" pos:end="93:27"><type pos:start="93:13" pos:end="93:19"><name pos:start="93:13" pos:end="93:19">uint8_t</name></type> <name pos:start="93:21" pos:end="93:27"><name pos:start="93:21" pos:end="93:23">md5</name><index pos:start="93:24" pos:end="93:27">[<expr pos:start="93:25" pos:end="93:26"><literal type="number" pos:start="93:25" pos:end="93:26">16</literal></expr>]</index></name></decl>;</decl_stmt>

            <decl_stmt pos:start="95:13" pos:end="95:18"><decl pos:start="95:13" pos:end="95:17"><type pos:start="95:13" pos:end="95:15"><name pos:start="95:13" pos:end="95:15">int</name></type> <name pos:start="95:17" pos:end="95:17">i</name></decl>;</decl_stmt>



            <if_stmt pos:start="99:13" pos:end="101:43"><if pos:start="99:13" pos:end="101:43">if <condition pos:start="99:16" pos:end="99:27">(<expr pos:start="99:17" pos:end="99:26"><name pos:start="99:17" pos:end="99:20">size</name> <operator pos:start="99:22" pos:end="99:23">!=</operator> <literal type="number" pos:start="99:25" pos:end="99:26">19</literal></expr>)</condition><block type="pseudo" pos:start="101:17" pos:end="101:43"><block_content pos:start="101:17" pos:end="101:43">

                <return pos:start="101:17" pos:end="101:43">return <expr pos:start="101:24" pos:end="101:42"><name pos:start="101:24" pos:end="101:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:35"><expr pos:start="103:13" pos:end="103:34"><call pos:start="103:13" pos:end="103:34"><name pos:start="103:13" pos:end="103:21">avio_read</name><argument_list pos:start="103:22" pos:end="103:34">(<argument pos:start="103:23" pos:end="103:24"><expr pos:start="103:23" pos:end="103:24"><name pos:start="103:23" pos:end="103:24">pb</name></expr></argument>, <argument pos:start="103:27" pos:end="103:29"><expr pos:start="103:27" pos:end="103:29"><name pos:start="103:27" pos:end="103:29">md5</name></expr></argument>, <argument pos:start="103:32" pos:end="103:33"><expr pos:start="103:32" pos:end="103:33"><literal type="number" pos:start="103:32" pos:end="103:33">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:29"><expr pos:start="105:13" pos:end="105:28"><call pos:start="105:13" pos:end="105:28"><name pos:start="105:13" pos:end="105:21">avio_skip</name><argument_list pos:start="105:22" pos:end="105:28">(<argument pos:start="105:23" pos:end="105:24"><expr pos:start="105:23" pos:end="105:24"><name pos:start="105:23" pos:end="105:24">pb</name></expr></argument>, <argument pos:start="105:27" pos:end="105:27"><expr pos:start="105:27" pos:end="105:27"><literal type="number" pos:start="105:27" pos:end="105:27">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:46"><expr pos:start="107:13" pos:end="107:45"><call pos:start="107:13" pos:end="107:45"><name pos:start="107:13" pos:end="107:18">av_log</name><argument_list pos:start="107:19" pos:end="107:45">(<argument pos:start="107:20" pos:end="107:20"><expr pos:start="107:20" pos:end="107:20"><name pos:start="107:20" pos:end="107:20">s</name></expr></argument>, <argument pos:start="107:23" pos:end="107:36"><expr pos:start="107:23" pos:end="107:36"><name pos:start="107:23" pos:end="107:36">AV_LOG_VERBOSE</name></expr></argument>, <argument pos:start="107:39" pos:end="107:44"><expr pos:start="107:39" pos:end="107:44"><literal type="string" pos:start="107:39" pos:end="107:44">"MD5="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="109:13" pos:end="111:58">for <control pos:start="109:17" pos:end="109:36">(<init pos:start="109:18" pos:end="109:23"><expr pos:start="109:18" pos:end="109:22"><name pos:start="109:18" pos:end="109:18">i</name> <operator pos:start="109:20" pos:end="109:20">=</operator> <literal type="number" pos:start="109:22" pos:end="109:22">0</literal></expr>;</init> <condition pos:start="109:25" pos:end="109:31"><expr pos:start="109:25" pos:end="109:30"><name pos:start="109:25" pos:end="109:25">i</name> <operator pos:start="109:27" pos:end="109:27">&lt;</operator> <literal type="number" pos:start="109:29" pos:end="109:30">16</literal></expr>;</condition> <incr pos:start="109:33" pos:end="109:35"><expr pos:start="109:33" pos:end="109:35"><name pos:start="109:33" pos:end="109:33">i</name><operator pos:start="109:34" pos:end="109:35">++</operator></expr></incr>)</control><block type="pseudo" pos:start="111:17" pos:end="111:58"><block_content pos:start="111:17" pos:end="111:58">

                <expr_stmt pos:start="111:17" pos:end="111:58"><expr pos:start="111:17" pos:end="111:57"><call pos:start="111:17" pos:end="111:57"><name pos:start="111:17" pos:end="111:22">av_log</name><argument_list pos:start="111:23" pos:end="111:57">(<argument pos:start="111:24" pos:end="111:24"><expr pos:start="111:24" pos:end="111:24"><name pos:start="111:24" pos:end="111:24">s</name></expr></argument>, <argument pos:start="111:27" pos:end="111:40"><expr pos:start="111:27" pos:end="111:40"><name pos:start="111:27" pos:end="111:40">AV_LOG_VERBOSE</name></expr></argument>, <argument pos:start="111:43" pos:end="111:48"><expr pos:start="111:43" pos:end="111:48"><literal type="string" pos:start="111:43" pos:end="111:48">"%02x"</literal></expr></argument>, <argument pos:start="111:51" pos:end="111:56"><expr pos:start="111:51" pos:end="111:56"><name pos:start="111:51" pos:end="111:56"><name pos:start="111:51" pos:end="111:53">md5</name><index pos:start="111:54" pos:end="111:56">[<expr pos:start="111:55" pos:end="111:55"><name pos:start="111:55" pos:end="111:55">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="113:13" pos:end="113:44"><expr pos:start="113:13" pos:end="113:43"><call pos:start="113:13" pos:end="113:43"><name pos:start="113:13" pos:end="113:18">av_log</name><argument_list pos:start="113:19" pos:end="113:43">(<argument pos:start="113:20" pos:end="113:20"><expr pos:start="113:20" pos:end="113:20"><name pos:start="113:20" pos:end="113:20">s</name></expr></argument>, <argument pos:start="113:23" pos:end="113:36"><expr pos:start="113:23" pos:end="113:36"><name pos:start="113:23" pos:end="113:36">AV_LOG_VERBOSE</name></expr></argument>, <argument pos:start="113:39" pos:end="113:42"><expr pos:start="113:39" pos:end="113:42"><literal type="string" pos:start="113:39" pos:end="113:42">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="115:13" pos:end="115:18">break;</break>

        </block_content>}</block>

        <case pos:start="119:9" pos:end="119:30">case <expr pos:start="119:14" pos:end="119:29"><name pos:start="119:14" pos:end="119:29">TAK_METADATA_END</name></expr>:</case> <block pos:start="119:32" pos:end="139:9">{<block_content pos:start="121:13" pos:end="137:21">

            <decl_stmt pos:start="121:13" pos:end="121:43"><decl pos:start="121:13" pos:end="121:42"><type pos:start="121:13" pos:end="121:19"><name pos:start="121:13" pos:end="121:19">int64_t</name></type> <name pos:start="121:21" pos:end="121:26">curpos</name> <init pos:start="121:28" pos:end="121:42">= <expr pos:start="121:30" pos:end="121:42"><call pos:start="121:30" pos:end="121:42"><name pos:start="121:30" pos:end="121:38">avio_tell</name><argument_list pos:start="121:39" pos:end="121:42">(<argument pos:start="121:40" pos:end="121:41"><expr pos:start="121:40" pos:end="121:41"><name pos:start="121:40" pos:end="121:41">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="125:13" pos:end="131:13"><if pos:start="125:13" pos:end="131:13">if <condition pos:start="125:16" pos:end="125:29">(<expr pos:start="125:17" pos:end="125:28"><name pos:start="125:17" pos:end="125:28"><name pos:start="125:17" pos:end="125:18">pb</name><operator pos:start="125:19" pos:end="125:20">-&gt;</operator><name pos:start="125:21" pos:end="125:28">seekable</name></name></expr>)</condition> <block pos:start="125:31" pos:end="131:13">{<block_content pos:start="127:17" pos:end="129:48">

                <expr_stmt pos:start="127:17" pos:end="127:36"><expr pos:start="127:17" pos:end="127:35"><call pos:start="127:17" pos:end="127:35"><name pos:start="127:17" pos:end="127:32">ff_ape_parse_tag</name><argument_list pos:start="127:33" pos:end="127:35">(<argument pos:start="127:34" pos:end="127:34"><expr pos:start="127:34" pos:end="127:34"><name pos:start="127:34" pos:end="127:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="129:17" pos:end="129:48"><expr pos:start="129:17" pos:end="129:47"><call pos:start="129:17" pos:end="129:47"><name pos:start="129:17" pos:end="129:25">avio_seek</name><argument_list pos:start="129:26" pos:end="129:47">(<argument pos:start="129:27" pos:end="129:28"><expr pos:start="129:27" pos:end="129:28"><name pos:start="129:27" pos:end="129:28">pb</name></expr></argument>, <argument pos:start="129:31" pos:end="129:36"><expr pos:start="129:31" pos:end="129:36"><name pos:start="129:31" pos:end="129:36">curpos</name></expr></argument>, <argument pos:start="129:39" pos:end="129:46"><expr pos:start="129:39" pos:end="129:46"><name pos:start="129:39" pos:end="129:46">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="135:13" pos:end="135:35"><expr pos:start="135:13" pos:end="135:34"><name pos:start="135:13" pos:end="135:24"><name pos:start="135:13" pos:end="135:14">tc</name><operator pos:start="135:15" pos:end="135:16">-&gt;</operator><name pos:start="135:17" pos:end="135:24">data_end</name></name> <operator pos:start="135:26" pos:end="135:27">+=</operator> <name pos:start="135:29" pos:end="135:34">curpos</name></expr>;</expr_stmt>

            <return pos:start="137:13" pos:end="137:21">return <expr pos:start="137:20" pos:end="137:20"><literal type="number" pos:start="137:20" pos:end="137:20">0</literal></expr>;</return>

        </block_content>}</block>

        <default pos:start="141:9" pos:end="141:16">default:</default>

            <expr_stmt pos:start="143:13" pos:end="143:38"><expr pos:start="143:13" pos:end="143:37"><name pos:start="143:13" pos:end="143:15">ret</name> <operator pos:start="143:17" pos:end="143:17">=</operator> <call pos:start="143:19" pos:end="143:37"><name pos:start="143:19" pos:end="143:27">avio_skip</name><argument_list pos:start="143:28" pos:end="143:37">(<argument pos:start="143:29" pos:end="143:30"><expr pos:start="143:29" pos:end="143:30"><name pos:start="143:29" pos:end="143:30">pb</name></expr></argument>, <argument pos:start="143:33" pos:end="143:36"><expr pos:start="143:33" pos:end="143:36"><name pos:start="143:33" pos:end="143:36">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="145:13" pos:end="147:27"><if pos:start="145:13" pos:end="147:27">if <condition pos:start="145:16" pos:end="145:24">(<expr pos:start="145:17" pos:end="145:23"><name pos:start="145:17" pos:end="145:19">ret</name> <operator pos:start="145:21" pos:end="145:21">&lt;</operator> <literal type="number" pos:start="145:23" pos:end="145:23">0</literal></expr>)</condition><block type="pseudo" pos:start="147:17" pos:end="147:27"><block_content pos:start="147:17" pos:end="147:27">

                <return pos:start="147:17" pos:end="147:27">return <expr pos:start="147:24" pos:end="147:26"><name pos:start="147:24" pos:end="147:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></switch>



        <if_stmt pos:start="153:9" pos:end="207:9"><if pos:start="153:9" pos:end="185:9">if <condition pos:start="153:12" pos:end="153:44">(<expr pos:start="153:13" pos:end="153:43"><name pos:start="153:13" pos:end="153:16">type</name> <operator pos:start="153:18" pos:end="153:19">==</operator> <name pos:start="153:21" pos:end="153:43">TAK_METADATA_STREAMINFO</name></expr>)</condition> <block pos:start="153:46" pos:end="185:9">{<block_content pos:start="155:13" pos:end="183:52">

            <decl_stmt pos:start="155:13" pos:end="155:29"><decl pos:start="155:13" pos:end="155:28"><type pos:start="155:13" pos:end="155:25"><name pos:start="155:13" pos:end="155:25">TAKStreamInfo</name></type> <name pos:start="155:27" pos:end="155:28">ti</name></decl>;</decl_stmt>



            <expr_stmt pos:start="159:13" pos:end="159:50"><expr pos:start="159:13" pos:end="159:49"><call pos:start="159:13" pos:end="159:49"><name pos:start="159:13" pos:end="159:39">avpriv_tak_parse_streaminfo</name><argument_list pos:start="159:40" pos:end="159:49">(<argument pos:start="159:41" pos:end="159:43"><expr pos:start="159:41" pos:end="159:43"><operator pos:start="159:41" pos:end="159:41">&amp;</operator><name pos:start="159:42" pos:end="159:43">gb</name></expr></argument>, <argument pos:start="159:46" pos:end="159:48"><expr pos:start="159:46" pos:end="159:48"><operator pos:start="159:46" pos:end="159:46">&amp;</operator><name pos:start="159:47" pos:end="159:48">ti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="161:13" pos:end="163:42"><if pos:start="161:13" pos:end="163:42">if <condition pos:start="161:16" pos:end="161:31">(<expr pos:start="161:17" pos:end="161:30"><name pos:start="161:17" pos:end="161:26"><name pos:start="161:17" pos:end="161:18">ti</name><operator pos:start="161:19" pos:end="161:19">.</operator><name pos:start="161:20" pos:end="161:26">samples</name></name> <operator pos:start="161:28" pos:end="161:28">&gt;</operator> <literal type="number" pos:start="161:30" pos:end="161:30">0</literal></expr>)</condition><block type="pseudo" pos:start="163:17" pos:end="163:42"><block_content pos:start="163:17" pos:end="163:42">

                <expr_stmt pos:start="163:17" pos:end="163:42"><expr pos:start="163:17" pos:end="163:41"><name pos:start="163:17" pos:end="163:28"><name pos:start="163:17" pos:end="163:18">st</name><operator pos:start="163:19" pos:end="163:20">-&gt;</operator><name pos:start="163:21" pos:end="163:28">duration</name></name> <operator pos:start="163:30" pos:end="163:30">=</operator> <name pos:start="163:32" pos:end="163:41"><name pos:start="163:32" pos:end="163:33">ti</name><operator pos:start="163:34" pos:end="163:34">.</operator><name pos:start="163:35" pos:end="163:41">samples</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="165:13" pos:end="165:54"><expr pos:start="165:13" pos:end="165:53"><name pos:start="165:13" pos:end="165:44"><name pos:start="165:13" pos:end="165:14">st</name><operator pos:start="165:15" pos:end="165:16">-&gt;</operator><name pos:start="165:17" pos:end="165:21">codec</name><operator pos:start="165:22" pos:end="165:23">-&gt;</operator><name pos:start="165:24" pos:end="165:44">bits_per_coded_sample</name></name> <operator pos:start="165:46" pos:end="165:46">=</operator> <name pos:start="165:48" pos:end="165:53"><name pos:start="165:48" pos:end="165:49">ti</name><operator pos:start="165:50" pos:end="165:50">.</operator><name pos:start="165:51" pos:end="165:53">bps</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="167:13" pos:end="169:57"><if pos:start="167:13" pos:end="169:57">if <condition pos:start="167:16" pos:end="167:29">(<expr pos:start="167:17" pos:end="167:28"><name pos:start="167:17" pos:end="167:28"><name pos:start="167:17" pos:end="167:18">ti</name><operator pos:start="167:19" pos:end="167:19">.</operator><name pos:start="167:20" pos:end="167:28">ch_layout</name></name></expr>)</condition><block type="pseudo" pos:start="169:17" pos:end="169:57"><block_content pos:start="169:17" pos:end="169:57">

                <expr_stmt pos:start="169:17" pos:end="169:57"><expr pos:start="169:17" pos:end="169:56"><name pos:start="169:17" pos:end="169:41"><name pos:start="169:17" pos:end="169:18">st</name><operator pos:start="169:19" pos:end="169:20">-&gt;</operator><name pos:start="169:21" pos:end="169:25">codec</name><operator pos:start="169:26" pos:end="169:27">-&gt;</operator><name pos:start="169:28" pos:end="169:41">channel_layout</name></name> <operator pos:start="169:43" pos:end="169:43">=</operator> <name pos:start="169:45" pos:end="169:56"><name pos:start="169:45" pos:end="169:46">ti</name><operator pos:start="169:47" pos:end="169:47">.</operator><name pos:start="169:48" pos:end="169:56">ch_layout</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:62"><expr pos:start="171:13" pos:end="171:61"><name pos:start="171:13" pos:end="171:34"><name pos:start="171:13" pos:end="171:14">st</name><operator pos:start="171:15" pos:end="171:16">-&gt;</operator><name pos:start="171:17" pos:end="171:21">codec</name><operator pos:start="171:22" pos:end="171:23">-&gt;</operator><name pos:start="171:24" pos:end="171:34">sample_rate</name></name>           <operator pos:start="171:46" pos:end="171:46">=</operator> <name pos:start="171:48" pos:end="171:61"><name pos:start="171:48" pos:end="171:49">ti</name><operator pos:start="171:50" pos:end="171:50">.</operator><name pos:start="171:51" pos:end="171:61">sample_rate</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:59"><expr pos:start="173:13" pos:end="173:58"><name pos:start="173:13" pos:end="173:31"><name pos:start="173:13" pos:end="173:14">st</name><operator pos:start="173:15" pos:end="173:16">-&gt;</operator><name pos:start="173:17" pos:end="173:21">codec</name><operator pos:start="173:22" pos:end="173:23">-&gt;</operator><name pos:start="173:24" pos:end="173:31">channels</name></name>              <operator pos:start="173:46" pos:end="173:46">=</operator> <name pos:start="173:48" pos:end="173:58"><name pos:start="173:48" pos:end="173:49">ti</name><operator pos:start="173:50" pos:end="173:50">.</operator><name pos:start="173:51" pos:end="173:58">channels</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="175:13" pos:end="175:49"><expr pos:start="175:13" pos:end="175:48"><name pos:start="175:13" pos:end="175:26"><name pos:start="175:13" pos:end="175:14">st</name><operator pos:start="175:15" pos:end="175:16">-&gt;</operator><name pos:start="175:17" pos:end="175:26">start_time</name></name>                   <operator pos:start="175:46" pos:end="175:46">=</operator> <literal type="number" pos:start="175:48" pos:end="175:48">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="177:13" pos:end="177:67"><expr pos:start="177:13" pos:end="177:66"><call pos:start="177:13" pos:end="177:66"><name pos:start="177:13" pos:end="177:31">avpriv_set_pts_info</name><argument_list pos:start="177:32" pos:end="177:66">(<argument pos:start="177:33" pos:end="177:34"><expr pos:start="177:33" pos:end="177:34"><name pos:start="177:33" pos:end="177:34">st</name></expr></argument>, <argument pos:start="177:37" pos:end="177:38"><expr pos:start="177:37" pos:end="177:38"><literal type="number" pos:start="177:37" pos:end="177:38">64</literal></expr></argument>, <argument pos:start="177:41" pos:end="177:41"><expr pos:start="177:41" pos:end="177:41"><literal type="number" pos:start="177:41" pos:end="177:41">1</literal></expr></argument>, <argument pos:start="177:44" pos:end="177:65"><expr pos:start="177:44" pos:end="177:65"><name pos:start="177:44" pos:end="177:65"><name pos:start="177:44" pos:end="177:45">st</name><operator pos:start="177:46" pos:end="177:47">-&gt;</operator><name pos:start="177:48" pos:end="177:52">codec</name><operator pos:start="177:53" pos:end="177:54">-&gt;</operator><name pos:start="177:55" pos:end="177:65">sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:54"><expr pos:start="179:13" pos:end="179:53"><name pos:start="179:13" pos:end="179:32"><name pos:start="179:13" pos:end="179:14">st</name><operator pos:start="179:15" pos:end="179:16">-&gt;</operator><name pos:start="179:17" pos:end="179:21">codec</name><operator pos:start="179:22" pos:end="179:23">-&gt;</operator><name pos:start="179:24" pos:end="179:32">extradata</name></name>             <operator pos:start="179:46" pos:end="179:46">=</operator> <name pos:start="179:48" pos:end="179:53">buffer</name></expr>;</expr_stmt>

            <expr_stmt pos:start="181:13" pos:end="181:52"><expr pos:start="181:13" pos:end="181:51"><name pos:start="181:13" pos:end="181:37"><name pos:start="181:13" pos:end="181:14">st</name><operator pos:start="181:15" pos:end="181:16">-&gt;</operator><name pos:start="181:17" pos:end="181:21">codec</name><operator pos:start="181:22" pos:end="181:23">-&gt;</operator><name pos:start="181:24" pos:end="181:37">extradata_size</name></name>        <operator pos:start="181:46" pos:end="181:46">=</operator> <name pos:start="181:48" pos:end="181:51">size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="183:13" pos:end="183:52"><expr pos:start="183:13" pos:end="183:51"><name pos:start="183:13" pos:end="183:18">buffer</name>                           <operator pos:start="183:46" pos:end="183:46">=</operator> <name pos:start="183:48" pos:end="183:51">NULL</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="185:11" pos:end="199:9">else if <condition pos:start="185:19" pos:end="185:51">(<expr pos:start="185:20" pos:end="185:50"><name pos:start="185:20" pos:end="185:23">type</name> <operator pos:start="185:25" pos:end="185:26">==</operator> <name pos:start="185:28" pos:end="185:50">TAK_METADATA_LAST_FRAME</name></expr>)</condition> <block pos:start="185:53" pos:end="199:9">{<block_content pos:start="187:13" pos:end="197:30">

            <if_stmt pos:start="187:13" pos:end="189:43"><if pos:start="187:13" pos:end="189:43">if <condition pos:start="187:16" pos:end="187:27">(<expr pos:start="187:17" pos:end="187:26"><name pos:start="187:17" pos:end="187:20">size</name> <operator pos:start="187:22" pos:end="187:23">!=</operator> <literal type="number" pos:start="187:25" pos:end="187:26">11</literal></expr>)</condition><block type="pseudo" pos:start="189:17" pos:end="189:43"><block_content pos:start="189:17" pos:end="189:43">

                <return pos:start="189:17" pos:end="189:43">return <expr pos:start="189:24" pos:end="189:42"><name pos:start="189:24" pos:end="189:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="191:13" pos:end="191:32"><expr pos:start="191:13" pos:end="191:31"><name pos:start="191:13" pos:end="191:27"><name pos:start="191:13" pos:end="191:14">tc</name><operator pos:start="191:15" pos:end="191:16">-&gt;</operator><name pos:start="191:17" pos:end="191:27">mlast_frame</name></name> <operator pos:start="191:29" pos:end="191:29">=</operator> <literal type="number" pos:start="191:31" pos:end="191:31">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="193:13" pos:end="195:70"><expr pos:start="193:13" pos:end="195:69"><name pos:start="193:13" pos:end="193:24"><name pos:start="193:13" pos:end="193:14">tc</name><operator pos:start="193:15" pos:end="193:16">-&gt;</operator><name pos:start="193:17" pos:end="193:24">data_end</name></name>    <operator pos:start="193:29" pos:end="193:29">=</operator> <call pos:start="193:31" pos:end="193:70"><name pos:start="193:31" pos:end="193:40">get_bits64</name><argument_list pos:start="193:41" pos:end="193:70">(<argument pos:start="193:42" pos:end="193:44"><expr pos:start="193:42" pos:end="193:44"><operator pos:start="193:42" pos:end="193:42">&amp;</operator><name pos:start="193:43" pos:end="193:44">gb</name></expr></argument>, <argument pos:start="193:47" pos:end="193:69"><expr pos:start="193:47" pos:end="193:69"><name pos:start="193:47" pos:end="193:69">TAK_LAST_FRAME_POS_BITS</name></expr></argument>)</argument_list></call> <operator pos:start="193:72" pos:end="193:72">+</operator>

                              <call pos:start="195:31" pos:end="195:69"><name pos:start="195:31" pos:end="195:38">get_bits</name><argument_list pos:start="195:39" pos:end="195:69">(<argument pos:start="195:40" pos:end="195:42"><expr pos:start="195:40" pos:end="195:42"><operator pos:start="195:40" pos:end="195:40">&amp;</operator><name pos:start="195:41" pos:end="195:42">gb</name></expr></argument>, <argument pos:start="195:45" pos:end="195:68"><expr pos:start="195:45" pos:end="195:68"><name pos:start="195:45" pos:end="195:68">TAK_LAST_FRAME_SIZE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="197:13" pos:end="197:30"><expr pos:start="197:13" pos:end="197:29"><call pos:start="197:13" pos:end="197:29"><name pos:start="197:13" pos:end="197:20">av_freep</name><argument_list pos:start="197:21" pos:end="197:29">(<argument pos:start="197:22" pos:end="197:28"><expr pos:start="197:22" pos:end="197:28"><operator pos:start="197:22" pos:end="197:22">&amp;</operator><name pos:start="197:23" pos:end="197:28">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="199:11" pos:end="207:9">else if <condition pos:start="199:19" pos:end="199:48">(<expr pos:start="199:20" pos:end="199:47"><name pos:start="199:20" pos:end="199:23">type</name> <operator pos:start="199:25" pos:end="199:26">==</operator> <name pos:start="199:28" pos:end="199:47">TAK_METADATA_ENCODER</name></expr>)</condition> <block pos:start="199:50" pos:end="207:9">{<block_content pos:start="201:13" pos:end="205:30">

            <expr_stmt pos:start="201:13" pos:end="203:65"><expr pos:start="201:13" pos:end="203:64"><call pos:start="201:13" pos:end="203:64"><name pos:start="201:13" pos:end="201:18">av_log</name><argument_list pos:start="201:19" pos:end="203:64">(<argument pos:start="201:20" pos:end="201:20"><expr pos:start="201:20" pos:end="201:20"><name pos:start="201:20" pos:end="201:20">s</name></expr></argument>, <argument pos:start="201:23" pos:end="201:36"><expr pos:start="201:23" pos:end="201:36"><name pos:start="201:23" pos:end="201:36">AV_LOG_VERBOSE</name></expr></argument>, <argument pos:start="201:39" pos:end="201:62"><expr pos:start="201:39" pos:end="201:62"><literal type="string" pos:start="201:39" pos:end="201:62">"encoder version: %0X\n"</literal></expr></argument>,

                   <argument pos:start="203:20" pos:end="203:63"><expr pos:start="203:20" pos:end="203:63"><call pos:start="203:20" pos:end="203:63"><name pos:start="203:20" pos:end="203:32">get_bits_long</name><argument_list pos:start="203:33" pos:end="203:63">(<argument pos:start="203:34" pos:end="203:36"><expr pos:start="203:34" pos:end="203:36"><operator pos:start="203:34" pos:end="203:34">&amp;</operator><name pos:start="203:35" pos:end="203:36">gb</name></expr></argument>, <argument pos:start="203:39" pos:end="203:62"><expr pos:start="203:39" pos:end="203:62"><name pos:start="203:39" pos:end="203:62">TAK_ENCODER_VERSION_BITS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="205:13" pos:end="205:30"><expr pos:start="205:13" pos:end="205:29"><call pos:start="205:13" pos:end="205:29"><name pos:start="205:13" pos:end="205:20">av_freep</name><argument_list pos:start="205:21" pos:end="205:29">(<argument pos:start="205:22" pos:end="205:28"><expr pos:start="205:22" pos:end="205:28"><operator pos:start="205:22" pos:end="205:22">&amp;</operator><name pos:start="205:23" pos:end="205:28">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <return pos:start="213:5" pos:end="213:23">return <expr pos:start="213:12" pos:end="213:22"><name pos:start="213:12" pos:end="213:22">AVERROR_EOF</name></expr>;</return>

</block_content>}</block></function>
</unit>
