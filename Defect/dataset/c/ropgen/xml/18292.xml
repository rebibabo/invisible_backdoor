<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18292.c" pos:tabs="8"><function pos:start="1:1" pos:end="123:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">adx_decode_frame</name><parameter_list pos:start="1:28" pos:end="3:44">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:61"><decl pos:start="1:52" pos:end="1:61"><type pos:start="1:52" pos:end="1:61"><name pos:start="1:52" pos:end="1:55">void</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">data</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:77"><decl pos:start="1:64" pos:end="1:77"><type pos:start="1:64" pos:end="1:77"><name pos:start="1:64" pos:end="1:66">int</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:77">data_size</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:43"><decl pos:start="3:29" pos:end="3:43"><type pos:start="3:29" pos:end="3:43"><name pos:start="3:29" pos:end="3:36">AVPacket</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:43">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="123:1">{<block_content pos:start="7:5" pos:end="121:22">

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:23">buf0</name> <init pos:start="7:25" pos:end="7:37">= <expr pos:start="7:27" pos:end="7:37"><name pos:start="7:27" pos:end="7:37"><name pos:start="7:27" pos:end="7:31">avpkt</name><operator pos:start="7:32" pos:end="7:33">-&gt;</operator><name pos:start="7:34" pos:end="7:37">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">buf_size</name>        <init pos:start="9:25" pos:end="9:37">= <expr pos:start="9:27" pos:end="9:37"><name pos:start="9:27" pos:end="9:37"><name pos:start="9:27" pos:end="9:31">avpkt</name><operator pos:start="9:32" pos:end="9:33">-&gt;</operator><name pos:start="9:34" pos:end="9:37">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:43"><decl pos:start="11:5" pos:end="11:42"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:14">ADXContext</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:17">c</name>       <init pos:start="11:25" pos:end="11:42">= <expr pos:start="11:27" pos:end="11:42"><name pos:start="11:27" pos:end="11:42"><name pos:start="11:27" pos:end="11:31">avctx</name><operator pos:start="11:32" pos:end="11:33">-&gt;</operator><name pos:start="11:34" pos:end="11:42">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:31"><decl pos:start="13:5" pos:end="13:30"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">int16_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:20">samples</name>    <init pos:start="13:25" pos:end="13:30">= <expr pos:start="13:27" pos:end="13:30"><name pos:start="13:27" pos:end="13:30">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:31"><decl pos:start="15:5" pos:end="15:30"><type pos:start="15:5" pos:end="15:19"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:17">uint8_t</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:22">buf</name>  <init pos:start="15:25" pos:end="15:30">= <expr pos:start="15:27" pos:end="15:30"><name pos:start="15:27" pos:end="15:30">buf0</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:35"><decl pos:start="17:5" pos:end="17:34"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:12">rest</name>            <init pos:start="17:25" pos:end="17:34">= <expr pos:start="17:27" pos:end="17:34"><name pos:start="17:27" pos:end="17:34">buf_size</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="35:5"><if pos:start="21:5" pos:end="35:5">if <condition pos:start="21:8" pos:end="21:26">(<expr pos:start="21:9" pos:end="21:25"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:25"><name pos:start="21:10" pos:end="21:10">c</name><operator pos:start="21:11" pos:end="21:12">-&gt;</operator><name pos:start="21:13" pos:end="21:25">header_parsed</name></name></expr>)</condition> <block pos:start="21:28" pos:end="35:5">{<block_content pos:start="23:9" pos:end="33:24">

        <decl_stmt pos:start="23:9" pos:end="23:58"><decl pos:start="23:9" pos:end="23:57"><type pos:start="23:9" pos:end="23:11"><name pos:start="23:9" pos:end="23:11">int</name></type> <name pos:start="23:13" pos:end="23:19">hdrsize</name> <init pos:start="23:21" pos:end="23:57">= <expr pos:start="23:23" pos:end="23:57"><call pos:start="23:23" pos:end="23:57"><name pos:start="23:23" pos:end="23:39">adx_decode_header</name><argument_list pos:start="23:40" pos:end="23:57">(<argument pos:start="23:41" pos:end="23:45"><expr pos:start="23:41" pos:end="23:45"><name pos:start="23:41" pos:end="23:45">avctx</name></expr></argument>, <argument pos:start="23:48" pos:end="23:50"><expr pos:start="23:48" pos:end="23:50"><name pos:start="23:48" pos:end="23:50">buf</name></expr></argument>, <argument pos:start="23:53" pos:end="23:56"><expr pos:start="23:53" pos:end="23:56"><name pos:start="23:53" pos:end="23:56">rest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="25:9" pos:end="27:22"><if pos:start="25:9" pos:end="27:22">if <condition pos:start="25:12" pos:end="25:21">(<expr pos:start="25:13" pos:end="25:20"><operator pos:start="25:13" pos:end="25:13">!</operator><name pos:start="25:14" pos:end="25:20">hdrsize</name></expr>)</condition><block type="pseudo" pos:start="27:13" pos:end="27:22"><block_content pos:start="27:13" pos:end="27:22">

            <return pos:start="27:13" pos:end="27:22">return <expr pos:start="27:20" pos:end="27:21"><operator pos:start="27:20" pos:end="27:20">-</operator><literal type="number" pos:start="27:21" pos:end="27:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:29"><expr pos:start="29:9" pos:end="29:28"><name pos:start="29:9" pos:end="29:24"><name pos:start="29:9" pos:end="29:9">c</name><operator pos:start="29:10" pos:end="29:11">-&gt;</operator><name pos:start="29:12" pos:end="29:24">header_parsed</name></name> <operator pos:start="29:26" pos:end="29:26">=</operator> <literal type="number" pos:start="29:28" pos:end="29:28">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:24"><expr pos:start="31:9" pos:end="31:23"><name pos:start="31:9" pos:end="31:11">buf</name>  <operator pos:start="31:14" pos:end="31:15">+=</operator> <name pos:start="31:17" pos:end="31:23">hdrsize</name></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:24"><expr pos:start="33:9" pos:end="33:23"><name pos:start="33:9" pos:end="33:12">rest</name> <operator pos:start="33:14" pos:end="33:15">-=</operator> <name pos:start="33:17" pos:end="33:23">hdrsize</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="39:5" pos:end="41:43">/* 18 bytes of data are expanded into 32*2 bytes of audio,

       so guard against buffer overflows */</comment>

    <if_stmt pos:start="43:5" pos:end="45:38"><if pos:start="43:5" pos:end="45:38">if <condition pos:start="43:8" pos:end="43:36">(<expr pos:start="43:9" pos:end="43:35"><name pos:start="43:9" pos:end="43:12">rest</name> <operator pos:start="43:14" pos:end="43:14">/</operator> <literal type="number" pos:start="43:16" pos:end="43:17">18</literal> <operator pos:start="43:19" pos:end="43:19">&gt;</operator> <operator pos:start="43:21" pos:end="43:21">*</operator><name pos:start="43:22" pos:end="43:30">data_size</name> <operator pos:start="43:32" pos:end="43:32">/</operator> <literal type="number" pos:start="43:34" pos:end="43:35">64</literal></expr>)</condition><block type="pseudo" pos:start="45:9" pos:end="45:38"><block_content pos:start="45:9" pos:end="45:38">

        <expr_stmt pos:start="45:9" pos:end="45:38"><expr pos:start="45:9" pos:end="45:37"><name pos:start="45:9" pos:end="45:12">rest</name> <operator pos:start="45:14" pos:end="45:14">=</operator> <operator pos:start="45:16" pos:end="45:16">(</operator><operator pos:start="45:17" pos:end="45:17">*</operator><name pos:start="45:18" pos:end="45:26">data_size</name> <operator pos:start="45:28" pos:end="45:28">/</operator> <literal type="number" pos:start="45:30" pos:end="45:31">64</literal><operator pos:start="45:32" pos:end="45:32">)</operator> <operator pos:start="45:34" pos:end="45:34">*</operator> <literal type="number" pos:start="45:36" pos:end="45:37">18</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="49:5" pos:end="73:5"><if pos:start="49:5" pos:end="73:5">if <condition pos:start="49:8" pos:end="49:19">(<expr pos:start="49:9" pos:end="49:18"><name pos:start="49:9" pos:end="49:18"><name pos:start="49:9" pos:end="49:9">c</name><operator pos:start="49:10" pos:end="49:11">-&gt;</operator><name pos:start="49:12" pos:end="49:18">in_temp</name></name></expr>)</condition> <block pos:start="49:21" pos:end="73:5">{<block_content pos:start="51:9" pos:end="71:9">

        <decl_stmt pos:start="51:9" pos:end="51:57"><decl pos:start="51:9" pos:end="51:56"><type pos:start="51:9" pos:end="51:11"><name pos:start="51:9" pos:end="51:11">int</name></type> <name pos:start="51:13" pos:end="51:20">copysize</name> <init pos:start="51:22" pos:end="51:56">= <expr pos:start="51:24" pos:end="51:56"><literal type="number" pos:start="51:24" pos:end="51:25">18</literal> <operator pos:start="51:27" pos:end="51:27">*</operator> <name pos:start="51:29" pos:end="51:43"><name pos:start="51:29" pos:end="51:33">avctx</name><operator pos:start="51:34" pos:end="51:35">-&gt;</operator><name pos:start="51:36" pos:end="51:43">channels</name></name> <operator pos:start="51:45" pos:end="51:45">-</operator> <name pos:start="51:47" pos:end="51:56"><name pos:start="51:47" pos:end="51:47">c</name><operator pos:start="51:48" pos:end="51:49">-&gt;</operator><name pos:start="51:50" pos:end="51:56">in_temp</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:56"><expr pos:start="53:9" pos:end="53:55"><call pos:start="53:9" pos:end="53:55"><name pos:start="53:9" pos:end="53:14">memcpy</name><argument_list pos:start="53:15" pos:end="53:55">(<argument pos:start="53:16" pos:end="53:39"><expr pos:start="53:16" pos:end="53:39"><name pos:start="53:16" pos:end="53:26"><name pos:start="53:16" pos:end="53:16">c</name><operator pos:start="53:17" pos:end="53:18">-&gt;</operator><name pos:start="53:19" pos:end="53:26">dec_temp</name></name> <operator pos:start="53:28" pos:end="53:28">+</operator> <name pos:start="53:30" pos:end="53:39"><name pos:start="53:30" pos:end="53:30">c</name><operator pos:start="53:31" pos:end="53:32">-&gt;</operator><name pos:start="53:33" pos:end="53:39">in_temp</name></name></expr></argument>, <argument pos:start="53:42" pos:end="53:44"><expr pos:start="53:42" pos:end="53:44"><name pos:start="53:42" pos:end="53:44">buf</name></expr></argument>, <argument pos:start="53:47" pos:end="53:54"><expr pos:start="53:47" pos:end="53:54"><name pos:start="53:47" pos:end="53:54">copysize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:25"><expr pos:start="55:9" pos:end="55:24"><name pos:start="55:9" pos:end="55:12">rest</name> <operator pos:start="55:14" pos:end="55:15">-=</operator> <name pos:start="55:17" pos:end="55:24">copysize</name></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:25"><expr pos:start="57:9" pos:end="57:24"><name pos:start="57:9" pos:end="57:11">buf</name>  <operator pos:start="57:14" pos:end="57:15">+=</operator> <name pos:start="57:17" pos:end="57:24">copysize</name></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="71:9"><if pos:start="59:9" pos:end="65:9">if <condition pos:start="59:12" pos:end="59:33">(<expr pos:start="59:13" pos:end="59:32"><name pos:start="59:13" pos:end="59:27"><name pos:start="59:13" pos:end="59:17">avctx</name><operator pos:start="59:18" pos:end="59:19">-&gt;</operator><name pos:start="59:20" pos:end="59:27">channels</name></name> <operator pos:start="59:29" pos:end="59:30">==</operator> <literal type="number" pos:start="59:32" pos:end="59:32">1</literal></expr>)</condition> <block pos:start="59:35" pos:end="65:9">{<block_content pos:start="61:13" pos:end="63:26">

            <expr_stmt pos:start="61:13" pos:end="61:54"><expr pos:start="61:13" pos:end="61:53"><call pos:start="61:13" pos:end="61:53"><name pos:start="61:13" pos:end="61:22">adx_decode</name><argument_list pos:start="61:23" pos:end="61:53">(<argument pos:start="61:24" pos:end="61:30"><expr pos:start="61:24" pos:end="61:30"><name pos:start="61:24" pos:end="61:30">samples</name></expr></argument>, <argument pos:start="61:33" pos:end="61:43"><expr pos:start="61:33" pos:end="61:43"><name pos:start="61:33" pos:end="61:43"><name pos:start="61:33" pos:end="61:33">c</name><operator pos:start="61:34" pos:end="61:35">-&gt;</operator><name pos:start="61:36" pos:end="61:43">dec_temp</name></name></expr></argument>, <argument pos:start="61:46" pos:end="61:52"><expr pos:start="61:46" pos:end="61:52"><name pos:start="61:46" pos:end="61:52"><name pos:start="61:46" pos:end="61:46">c</name><operator pos:start="61:47" pos:end="61:48">-&gt;</operator><name pos:start="61:49" pos:end="61:52">prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:26"><expr pos:start="63:13" pos:end="63:25"><name pos:start="63:13" pos:end="63:19">samples</name> <operator pos:start="63:21" pos:end="63:22">+=</operator> <literal type="number" pos:start="63:24" pos:end="63:25">32</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="65:11" pos:end="71:9">else <block pos:start="65:16" pos:end="71:9">{<block_content pos:start="67:13" pos:end="69:28">

            <expr_stmt pos:start="67:13" pos:end="67:61"><expr pos:start="67:13" pos:end="67:60"><call pos:start="67:13" pos:end="67:60"><name pos:start="67:13" pos:end="67:29">adx_decode_stereo</name><argument_list pos:start="67:30" pos:end="67:60">(<argument pos:start="67:31" pos:end="67:37"><expr pos:start="67:31" pos:end="67:37"><name pos:start="67:31" pos:end="67:37">samples</name></expr></argument>, <argument pos:start="67:40" pos:end="67:50"><expr pos:start="67:40" pos:end="67:50"><name pos:start="67:40" pos:end="67:50"><name pos:start="67:40" pos:end="67:40">c</name><operator pos:start="67:41" pos:end="67:42">-&gt;</operator><name pos:start="67:43" pos:end="67:50">dec_temp</name></name></expr></argument>, <argument pos:start="67:53" pos:end="67:59"><expr pos:start="67:53" pos:end="67:59"><name pos:start="67:53" pos:end="67:59"><name pos:start="67:53" pos:end="67:53">c</name><operator pos:start="67:54" pos:end="67:55">-&gt;</operator><name pos:start="67:56" pos:end="67:59">prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:28"><expr pos:start="69:13" pos:end="69:27"><name pos:start="69:13" pos:end="69:19">samples</name> <operator pos:start="69:21" pos:end="69:22">+=</operator> <literal type="number" pos:start="69:24" pos:end="69:25">32</literal><operator pos:start="69:26" pos:end="69:26">*</operator><literal type="number" pos:start="69:27" pos:end="69:27">2</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="77:5" pos:end="105:5"><if pos:start="77:5" pos:end="91:5">if <condition pos:start="77:8" pos:end="77:29">(<expr pos:start="77:9" pos:end="77:28"><name pos:start="77:9" pos:end="77:23"><name pos:start="77:9" pos:end="77:13">avctx</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:23">channels</name></name> <operator pos:start="77:25" pos:end="77:26">==</operator> <literal type="number" pos:start="77:28" pos:end="77:28">1</literal></expr>)</condition> <block pos:start="77:31" pos:end="91:5">{<block_content pos:start="79:9" pos:end="89:9">

        <while pos:start="79:9" pos:end="89:9">while <condition pos:start="79:15" pos:end="79:26">(<expr pos:start="79:16" pos:end="79:25"><name pos:start="79:16" pos:end="79:19">rest</name> <operator pos:start="79:21" pos:end="79:22">&gt;=</operator> <literal type="number" pos:start="79:24" pos:end="79:25">18</literal></expr>)</condition> <block pos:start="79:28" pos:end="89:9">{<block_content pos:start="81:13" pos:end="87:26">

            <expr_stmt pos:start="81:13" pos:end="81:46"><expr pos:start="81:13" pos:end="81:45"><call pos:start="81:13" pos:end="81:45"><name pos:start="81:13" pos:end="81:22">adx_decode</name><argument_list pos:start="81:23" pos:end="81:45">(<argument pos:start="81:24" pos:end="81:30"><expr pos:start="81:24" pos:end="81:30"><name pos:start="81:24" pos:end="81:30">samples</name></expr></argument>, <argument pos:start="81:33" pos:end="81:35"><expr pos:start="81:33" pos:end="81:35"><name pos:start="81:33" pos:end="81:35">buf</name></expr></argument>, <argument pos:start="81:38" pos:end="81:44"><expr pos:start="81:38" pos:end="81:44"><name pos:start="81:38" pos:end="81:44"><name pos:start="81:38" pos:end="81:38">c</name><operator pos:start="81:39" pos:end="81:40">-&gt;</operator><name pos:start="81:41" pos:end="81:44">prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:26"><expr pos:start="83:13" pos:end="83:25"><name pos:start="83:13" pos:end="83:16">rest</name>    <operator pos:start="83:21" pos:end="83:22">-=</operator> <literal type="number" pos:start="83:24" pos:end="83:25">18</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:26"><expr pos:start="85:13" pos:end="85:25"><name pos:start="85:13" pos:end="85:15">buf</name>     <operator pos:start="85:21" pos:end="85:22">+=</operator> <literal type="number" pos:start="85:24" pos:end="85:25">18</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:26"><expr pos:start="87:13" pos:end="87:25"><name pos:start="87:13" pos:end="87:19">samples</name> <operator pos:start="87:21" pos:end="87:22">+=</operator> <literal type="number" pos:start="87:24" pos:end="87:25">32</literal></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></if> <else pos:start="91:7" pos:end="105:5">else <block pos:start="91:12" pos:end="105:5">{<block_content pos:start="93:9" pos:end="103:9">

        <while pos:start="93:9" pos:end="103:9">while <condition pos:start="93:15" pos:end="93:30">(<expr pos:start="93:16" pos:end="93:29"><name pos:start="93:16" pos:end="93:19">rest</name> <operator pos:start="93:21" pos:end="93:22">&gt;=</operator> <literal type="number" pos:start="93:24" pos:end="93:25">18</literal> <operator pos:start="93:27" pos:end="93:27">*</operator> <literal type="number" pos:start="93:29" pos:end="93:29">2</literal></expr>)</condition> <block pos:start="93:32" pos:end="103:9">{<block_content pos:start="95:13" pos:end="101:30">

            <expr_stmt pos:start="95:13" pos:end="95:53"><expr pos:start="95:13" pos:end="95:52"><call pos:start="95:13" pos:end="95:52"><name pos:start="95:13" pos:end="95:29">adx_decode_stereo</name><argument_list pos:start="95:30" pos:end="95:52">(<argument pos:start="95:31" pos:end="95:37"><expr pos:start="95:31" pos:end="95:37"><name pos:start="95:31" pos:end="95:37">samples</name></expr></argument>, <argument pos:start="95:40" pos:end="95:42"><expr pos:start="95:40" pos:end="95:42"><name pos:start="95:40" pos:end="95:42">buf</name></expr></argument>, <argument pos:start="95:45" pos:end="95:51"><expr pos:start="95:45" pos:end="95:51"><name pos:start="95:45" pos:end="95:51"><name pos:start="95:45" pos:end="95:45">c</name><operator pos:start="95:46" pos:end="95:47">-&gt;</operator><name pos:start="95:48" pos:end="95:51">prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:30"><expr pos:start="97:13" pos:end="97:29"><name pos:start="97:13" pos:end="97:16">rest</name>    <operator pos:start="97:21" pos:end="97:22">-=</operator> <literal type="number" pos:start="97:24" pos:end="97:25">18</literal> <operator pos:start="97:27" pos:end="97:27">*</operator> <literal type="number" pos:start="97:29" pos:end="97:29">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:30"><expr pos:start="99:13" pos:end="99:29"><name pos:start="99:13" pos:end="99:15">buf</name>     <operator pos:start="99:21" pos:end="99:22">+=</operator> <literal type="number" pos:start="99:24" pos:end="99:25">18</literal> <operator pos:start="99:27" pos:end="99:27">*</operator> <literal type="number" pos:start="99:29" pos:end="99:29">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:30"><expr pos:start="101:13" pos:end="101:29"><name pos:start="101:13" pos:end="101:19">samples</name> <operator pos:start="101:21" pos:end="101:22">+=</operator> <literal type="number" pos:start="101:24" pos:end="101:25">32</literal> <operator pos:start="101:27" pos:end="101:27">*</operator> <literal type="number" pos:start="101:29" pos:end="101:29">2</literal></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="109:5" pos:end="109:22"><expr pos:start="109:5" pos:end="109:21"><name pos:start="109:5" pos:end="109:14"><name pos:start="109:5" pos:end="109:5">c</name><operator pos:start="109:6" pos:end="109:7">-&gt;</operator><name pos:start="109:8" pos:end="109:14">in_temp</name></name> <operator pos:start="109:16" pos:end="109:16">=</operator> <name pos:start="109:18" pos:end="109:21">rest</name></expr>;</expr_stmt>

    <if_stmt pos:start="111:5" pos:end="117:5"><if pos:start="111:5" pos:end="117:5">if <condition pos:start="111:8" pos:end="111:13">(<expr pos:start="111:9" pos:end="111:12"><name pos:start="111:9" pos:end="111:12">rest</name></expr>)</condition> <block pos:start="111:15" pos:end="117:5">{<block_content pos:start="113:9" pos:end="115:20">

        <expr_stmt pos:start="113:9" pos:end="113:39"><expr pos:start="113:9" pos:end="113:38"><call pos:start="113:9" pos:end="113:38"><name pos:start="113:9" pos:end="113:14">memcpy</name><argument_list pos:start="113:15" pos:end="113:38">(<argument pos:start="113:16" pos:end="113:26"><expr pos:start="113:16" pos:end="113:26"><name pos:start="113:16" pos:end="113:26"><name pos:start="113:16" pos:end="113:16">c</name><operator pos:start="113:17" pos:end="113:18">-&gt;</operator><name pos:start="113:19" pos:end="113:26">dec_temp</name></name></expr></argument>, <argument pos:start="113:29" pos:end="113:31"><expr pos:start="113:29" pos:end="113:31"><name pos:start="113:29" pos:end="113:31">buf</name></expr></argument>, <argument pos:start="113:34" pos:end="113:37"><expr pos:start="113:34" pos:end="113:37"><name pos:start="113:34" pos:end="113:37">rest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:20"><expr pos:start="115:9" pos:end="115:19"><name pos:start="115:9" pos:end="115:11">buf</name> <operator pos:start="115:13" pos:end="115:14">+=</operator> <name pos:start="115:16" pos:end="115:19">rest</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:52"><expr pos:start="119:5" pos:end="119:51"><operator pos:start="119:5" pos:end="119:5">*</operator><name pos:start="119:6" pos:end="119:14">data_size</name> <operator pos:start="119:16" pos:end="119:16">=</operator> <operator pos:start="119:18" pos:end="119:18">(</operator><name pos:start="119:19" pos:end="119:25">uint8_t</name><operator pos:start="119:26" pos:end="119:26">*</operator><operator pos:start="119:27" pos:end="119:27">)</operator><name pos:start="119:28" pos:end="119:34">samples</name> <operator pos:start="119:36" pos:end="119:36">-</operator> <operator pos:start="119:38" pos:end="119:38">(</operator><name pos:start="119:39" pos:end="119:45">uint8_t</name><operator pos:start="119:46" pos:end="119:46">*</operator><operator pos:start="119:47" pos:end="119:47">)</operator><name pos:start="119:48" pos:end="119:51">data</name></expr>;</expr_stmt>

    <return pos:start="121:5" pos:end="121:22">return <expr pos:start="121:12" pos:end="121:21"><name pos:start="121:12" pos:end="121:14">buf</name> <operator pos:start="121:16" pos:end="121:16">-</operator> <name pos:start="121:18" pos:end="121:21">buf0</name></expr>;</return>

</block_content>}</block></function>
</unit>
