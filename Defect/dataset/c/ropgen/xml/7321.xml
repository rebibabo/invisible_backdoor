<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7321.c" pos:tabs="8"><function pos:start="1:1" pos:end="45:1"><type pos:start="1:1" pos:end="1:8"><name pos:start="1:1" pos:end="1:8">uint64_t</name></type> <name pos:start="1:10" pos:end="1:22">helper_fctiwz</name><parameter_list pos:start="1:23" pos:end="1:54">(<parameter pos:start="1:24" pos:end="1:39"><decl pos:start="1:24" pos:end="1:39"><type pos:start="1:24" pos:end="1:39"><name pos:start="1:24" pos:end="1:34">CPUPPCState</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">env</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:53"><decl pos:start="1:42" pos:end="1:53"><type pos:start="1:42" pos:end="1:53"><name pos:start="1:42" pos:end="1:49">uint64_t</name></type> <name pos:start="1:51" pos:end="1:53">arg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="45:1">{<block_content pos:start="5:5" pos:end="43:19">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:15">CPU_DoubleU</name></type> <name pos:start="5:17" pos:end="5:20">farg</name></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:18"><expr pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:8">farg</name><operator pos:start="9:9" pos:end="9:9">.</operator><name pos:start="9:10" pos:end="9:11">ll</name></name> <operator pos:start="9:13" pos:end="9:13">=</operator> <name pos:start="9:15" pos:end="9:17">arg</name></expr>;</expr_stmt>



    <if_stmt pos:start="13:5" pos:end="41:5"><if pos:start="13:5" pos:end="21:5">if <condition pos:start="13:8" pos:end="13:51">(<expr pos:start="13:9" pos:end="13:50"><call pos:start="13:9" pos:end="13:50"><name pos:start="13:9" pos:end="13:16">unlikely</name><argument_list pos:start="13:17" pos:end="13:50">(<argument pos:start="13:18" pos:end="13:49"><expr pos:start="13:18" pos:end="13:49"><call pos:start="13:18" pos:end="13:49"><name pos:start="13:18" pos:end="13:41">float64_is_signaling_nan</name><argument_list pos:start="13:42" pos:end="13:49">(<argument pos:start="13:43" pos:end="13:48"><expr pos:start="13:43" pos:end="13:48"><name pos:start="13:43" pos:end="13:48"><name pos:start="13:43" pos:end="13:46">farg</name><operator pos:start="13:47" pos:end="13:47">.</operator><name pos:start="13:48" pos:end="13:48">d</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="13:53" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:63">

        <comment type="block" pos:start="15:9" pos:end="15:29">/* sNaN conversion */</comment>

        <expr_stmt pos:start="17:9" pos:end="19:63"><expr pos:start="17:9" pos:end="19:62"><name pos:start="17:9" pos:end="17:15"><name pos:start="17:9" pos:end="17:12">farg</name><operator pos:start="17:13" pos:end="17:13">.</operator><name pos:start="17:14" pos:end="17:15">ll</name></name> <operator pos:start="17:17" pos:end="17:17">=</operator> <call pos:start="17:19" pos:end="19:62"><name pos:start="17:19" pos:end="17:39">fload_invalid_op_excp</name><argument_list pos:start="17:40" pos:end="19:62">(<argument pos:start="17:41" pos:end="17:43"><expr pos:start="17:41" pos:end="17:43"><name pos:start="17:41" pos:end="17:43">env</name></expr></argument>, <argument pos:start="17:46" pos:end="19:61"><expr pos:start="17:46" pos:end="19:61"><name pos:start="17:46" pos:end="17:67">POWERPC_EXCP_FP_VXSNAN</name> <operator pos:start="17:69" pos:end="17:69">|</operator>

                                        <name pos:start="19:41" pos:end="19:61">POWERPC_EXCP_FP_VXCVI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="21:7" pos:end="29:5">else if <condition pos:start="21:15" pos:end="23:53">(<expr pos:start="21:16" pos:end="23:52"><call pos:start="21:16" pos:end="23:52"><name pos:start="21:16" pos:end="21:23">unlikely</name><argument_list pos:start="21:24" pos:end="23:52">(<argument pos:start="21:25" pos:end="23:51"><expr pos:start="21:25" pos:end="23:51"><call pos:start="21:25" pos:end="21:52"><name pos:start="21:25" pos:end="21:44">float64_is_quiet_nan</name><argument_list pos:start="21:45" pos:end="21:52">(<argument pos:start="21:46" pos:end="21:51"><expr pos:start="21:46" pos:end="21:51"><name pos:start="21:46" pos:end="21:51"><name pos:start="21:46" pos:end="21:49">farg</name><operator pos:start="21:50" pos:end="21:50">.</operator><name pos:start="21:51" pos:end="21:51">d</name></name></expr></argument>)</argument_list></call> <operator pos:start="21:54" pos:end="21:55">||</operator>

                        <call pos:start="23:25" pos:end="23:51"><name pos:start="23:25" pos:end="23:43">float64_is_infinity</name><argument_list pos:start="23:44" pos:end="23:51">(<argument pos:start="23:45" pos:end="23:50"><expr pos:start="23:45" pos:end="23:50"><name pos:start="23:45" pos:end="23:50"><name pos:start="23:45" pos:end="23:48">farg</name><operator pos:start="23:49" pos:end="23:49">.</operator><name pos:start="23:50" pos:end="23:50">d</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:55" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:68">

        <comment type="block" pos:start="25:9" pos:end="25:40">/* qNan / infinity conversion */</comment>

        <expr_stmt pos:start="27:9" pos:end="27:68"><expr pos:start="27:9" pos:end="27:67"><name pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:12">farg</name><operator pos:start="27:13" pos:end="27:13">.</operator><name pos:start="27:14" pos:end="27:15">ll</name></name> <operator pos:start="27:17" pos:end="27:17">=</operator> <call pos:start="27:19" pos:end="27:67"><name pos:start="27:19" pos:end="27:39">fload_invalid_op_excp</name><argument_list pos:start="27:40" pos:end="27:67">(<argument pos:start="27:41" pos:end="27:43"><expr pos:start="27:41" pos:end="27:43"><name pos:start="27:41" pos:end="27:43">env</name></expr></argument>, <argument pos:start="27:46" pos:end="27:66"><expr pos:start="27:46" pos:end="27:66"><name pos:start="27:46" pos:end="27:66">POWERPC_EXCP_FP_VXCVI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="29:7" pos:end="41:5">else <block pos:start="29:12" pos:end="41:5">{<block_content pos:start="31:9" pos:end="39:39">

        <expr_stmt pos:start="31:9" pos:end="31:74"><expr pos:start="31:9" pos:end="31:73"><name pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:12">farg</name><operator pos:start="31:13" pos:end="31:13">.</operator><name pos:start="31:14" pos:end="31:15">ll</name></name> <operator pos:start="31:17" pos:end="31:17">=</operator> <call pos:start="31:19" pos:end="31:73"><name pos:start="31:19" pos:end="31:48">float64_to_int32_round_to_zero</name><argument_list pos:start="31:49" pos:end="31:73">(<argument pos:start="31:50" pos:end="31:55"><expr pos:start="31:50" pos:end="31:55"><name pos:start="31:50" pos:end="31:55"><name pos:start="31:50" pos:end="31:53">farg</name><operator pos:start="31:54" pos:end="31:54">.</operator><name pos:start="31:55" pos:end="31:55">d</name></name></expr></argument>, <argument pos:start="31:58" pos:end="31:72"><expr pos:start="31:58" pos:end="31:72"><operator pos:start="31:58" pos:end="31:58">&amp;</operator><name pos:start="31:59" pos:end="31:72"><name pos:start="31:59" pos:end="31:61">env</name><operator pos:start="31:62" pos:end="31:63">-&gt;</operator><name pos:start="31:64" pos:end="31:72">fp_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="33:9" pos:end="37:11">/* XXX: higher bits are not supposed to be significant.

         *     to make tests easier, return the same as a real PowerPC 750

         */</comment>

        <expr_stmt pos:start="39:9" pos:end="39:39"><expr pos:start="39:9" pos:end="39:38"><name pos:start="39:9" pos:end="39:15"><name pos:start="39:9" pos:end="39:12">farg</name><operator pos:start="39:13" pos:end="39:13">.</operator><name pos:start="39:14" pos:end="39:15">ll</name></name> <operator pos:start="39:17" pos:end="39:18">|=</operator> <literal type="number" pos:start="39:20" pos:end="39:32">0xFFF80000ULL</literal> <operator pos:start="39:34" pos:end="39:35">&lt;&lt;</operator> <literal type="number" pos:start="39:37" pos:end="39:38">32</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="43:5" pos:end="43:19">return <expr pos:start="43:12" pos:end="43:18"><name pos:start="43:12" pos:end="43:18"><name pos:start="43:12" pos:end="43:15">farg</name><operator pos:start="43:16" pos:end="43:16">.</operator><name pos:start="43:17" pos:end="43:18">ll</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
