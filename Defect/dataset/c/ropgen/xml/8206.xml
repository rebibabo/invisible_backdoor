<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8206.c" pos:tabs="8"><function pos:start="1:1" pos:end="349:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">decode_slice</name><parameter_list pos:start="1:24" pos:end="1:39">(<parameter pos:start="1:25" pos:end="1:38"><decl pos:start="1:25" pos:end="1:38"><type pos:start="1:25" pos:end="1:37"><name pos:start="1:25" pos:end="1:35">H264Context</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">h</name></decl></parameter>)</parameter_list><block pos:start="1:40" pos:end="349:1">{<block_content pos:start="3:5" pos:end="347:14">

    <decl_stmt pos:start="3:5" pos:end="3:37"><decl pos:start="3:5" pos:end="3:36"><type pos:start="3:5" pos:end="3:26"><name pos:start="3:5" pos:end="3:18">MpegEncContext</name> <modifier pos:start="3:20" pos:end="3:20">*</modifier> <specifier pos:start="3:22" pos:end="3:26">const</specifier></type> <name pos:start="3:28" pos:end="3:28">s</name> <init pos:start="3:30" pos:end="3:36">= <expr pos:start="3:32" pos:end="3:36"><operator pos:start="3:32" pos:end="3:32">&amp;</operator><name pos:start="3:33" pos:end="3:36"><name pos:start="3:33" pos:end="3:33">h</name><operator pos:start="3:34" pos:end="3:35">-&gt;</operator><name pos:start="3:36" pos:end="3:36">s</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:73"><decl pos:start="5:5" pos:end="5:72"><type pos:start="5:5" pos:end="5:13"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:13">int</name></type> <name pos:start="5:15" pos:end="5:23">part_mask</name><init pos:start="5:24" pos:end="5:72">= <expr pos:start="5:26" pos:end="5:72"><ternary pos:start="5:26" pos:end="5:72"><condition pos:start="5:26" pos:end="5:47"><expr pos:start="5:26" pos:end="5:45"><name pos:start="5:26" pos:end="5:45"><name pos:start="5:26" pos:end="5:26">s</name><operator pos:start="5:27" pos:end="5:28">-&gt;</operator><name pos:start="5:29" pos:end="5:45">partitioned_frame</name></name></expr> ?</condition><then pos:start="5:49" pos:end="5:65"> <expr pos:start="5:49" pos:end="5:65"><operator pos:start="5:49" pos:end="5:49">(</operator><name pos:start="5:50" pos:end="5:55">AC_END</name><operator pos:start="5:56" pos:end="5:56">|</operator><name pos:start="5:57" pos:end="5:64">AC_ERROR</name><operator pos:start="5:65" pos:end="5:65">)</operator></expr> </then><else pos:start="5:67" pos:end="5:72">: <expr pos:start="5:69" pos:end="5:72"><literal type="number" pos:start="5:69" pos:end="5:72">0x7F</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:23"><expr pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:5">s</name><operator pos:start="9:6" pos:end="9:7">-&gt;</operator><name pos:start="9:8" pos:end="9:18">mb_skip_run</name></name><operator pos:start="9:19" pos:end="9:19">=</operator> <operator pos:start="9:21" pos:end="9:21">-</operator><literal type="number" pos:start="9:22" pos:end="9:22">1</literal></expr>;</expr_stmt>



    <if_stmt pos:start="13:5" pos:end="346:0"><if pos:start="13:5" pos:end="141:5">if<condition pos:start="13:7" pos:end="13:22">( <expr pos:start="13:9" pos:end="13:20"><name pos:start="13:9" pos:end="13:20"><name pos:start="13:9" pos:end="13:9">h</name><operator pos:start="13:10" pos:end="13:11">-&gt;</operator><name pos:start="13:12" pos:end="13:14">pps</name><operator pos:start="13:15" pos:end="13:15">.</operator><name pos:start="13:16" pos:end="13:20">cabac</name></name></expr> )</condition> <block pos:start="13:24" pos:end="141:5">{<block_content pos:start="15:9" pos:end="137:9">

        <decl_stmt pos:start="15:9" pos:end="15:14"><decl pos:start="15:9" pos:end="15:13"><type pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:11">int</name></type> <name pos:start="15:13" pos:end="15:13">i</name></decl>;</decl_stmt>



        <comment type="block" pos:start="19:9" pos:end="19:21">/* realign */</comment>

        <expr_stmt pos:start="21:9" pos:end="21:33"><expr pos:start="21:9" pos:end="21:32"><call pos:start="21:9" pos:end="21:32"><name pos:start="21:9" pos:end="21:22">align_get_bits</name><argument_list pos:start="21:23" pos:end="21:32">( <argument pos:start="21:25" pos:end="21:30"><expr pos:start="21:25" pos:end="21:30"><operator pos:start="21:25" pos:end="21:25">&amp;</operator><name pos:start="21:26" pos:end="21:30"><name pos:start="21:26" pos:end="21:26">s</name><operator pos:start="21:27" pos:end="21:28">-&gt;</operator><name pos:start="21:29" pos:end="21:30">gb</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="25:9" pos:end="25:24">/* init cabac */</comment>

        <expr_stmt pos:start="27:9" pos:end="27:103"><expr pos:start="27:9" pos:end="27:102"><call pos:start="27:9" pos:end="27:102"><name pos:start="27:9" pos:end="27:28">ff_init_cabac_states</name><argument_list pos:start="27:29" pos:end="27:102">( <argument pos:start="27:31" pos:end="27:39"><expr pos:start="27:31" pos:end="27:39"><operator pos:start="27:31" pos:end="27:31">&amp;</operator><name pos:start="27:32" pos:end="27:39"><name pos:start="27:32" pos:end="27:32">h</name><operator pos:start="27:33" pos:end="27:34">-&gt;</operator><name pos:start="27:35" pos:end="27:39">cabac</name></name></expr></argument>, <argument pos:start="27:42" pos:end="27:58"><expr pos:start="27:42" pos:end="27:58"><name pos:start="27:42" pos:end="27:58">ff_h264_lps_range</name></expr></argument>, <argument pos:start="27:61" pos:end="27:77"><expr pos:start="27:61" pos:end="27:77"><name pos:start="27:61" pos:end="27:77">ff_h264_mps_state</name></expr></argument>, <argument pos:start="27:80" pos:end="27:96"><expr pos:start="27:80" pos:end="27:96"><name pos:start="27:80" pos:end="27:96">ff_h264_lps_state</name></expr></argument>, <argument pos:start="27:99" pos:end="27:100"><expr pos:start="27:99" pos:end="27:100"><literal type="number" pos:start="27:99" pos:end="27:100">64</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="33:85"><expr pos:start="29:9" pos:end="33:84"><call pos:start="29:9" pos:end="33:84"><name pos:start="29:9" pos:end="29:29">ff_init_cabac_decoder</name><argument_list pos:start="29:30" pos:end="33:84">( <argument pos:start="29:32" pos:end="29:40"><expr pos:start="29:32" pos:end="29:40"><operator pos:start="29:32" pos:end="29:32">&amp;</operator><name pos:start="29:33" pos:end="29:40"><name pos:start="29:33" pos:end="29:33">h</name><operator pos:start="29:34" pos:end="29:35">-&gt;</operator><name pos:start="29:36" pos:end="29:40">cabac</name></name></expr></argument>,

                               <argument pos:start="31:32" pos:end="31:70"><expr pos:start="31:32" pos:end="31:70"><name pos:start="31:32" pos:end="31:43"><name pos:start="31:32" pos:end="31:32">s</name><operator pos:start="31:33" pos:end="31:34">-&gt;</operator><name pos:start="31:35" pos:end="31:36">gb</name><operator pos:start="31:37" pos:end="31:37">.</operator><name pos:start="31:38" pos:end="31:43">buffer</name></name> <operator pos:start="31:45" pos:end="31:45">+</operator> <call pos:start="31:47" pos:end="31:68"><name pos:start="31:47" pos:end="31:60">get_bits_count</name><argument_list pos:start="31:61" pos:end="31:68">(<argument pos:start="31:62" pos:end="31:67"><expr pos:start="31:62" pos:end="31:67"><operator pos:start="31:62" pos:end="31:62">&amp;</operator><name pos:start="31:63" pos:end="31:67"><name pos:start="31:63" pos:end="31:63">s</name><operator pos:start="31:64" pos:end="31:65">-&gt;</operator><name pos:start="31:66" pos:end="31:67">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="31:69" pos:end="31:69">/</operator><literal type="number" pos:start="31:70" pos:end="31:70">8</literal></expr></argument>,

                               <argument pos:start="33:32" pos:end="33:83"><expr pos:start="33:32" pos:end="33:83"><operator pos:start="33:32" pos:end="33:32">(</operator> <name pos:start="33:34" pos:end="33:51"><name pos:start="33:34" pos:end="33:34">s</name><operator pos:start="33:35" pos:end="33:36">-&gt;</operator><name pos:start="33:37" pos:end="33:38">gb</name><operator pos:start="33:39" pos:end="33:39">.</operator><name pos:start="33:40" pos:end="33:51">size_in_bits</name></name> <operator pos:start="33:53" pos:end="33:53">-</operator> <call pos:start="33:55" pos:end="33:76"><name pos:start="33:55" pos:end="33:68">get_bits_count</name><argument_list pos:start="33:69" pos:end="33:76">(<argument pos:start="33:70" pos:end="33:75"><expr pos:start="33:70" pos:end="33:75"><operator pos:start="33:70" pos:end="33:70">&amp;</operator><name pos:start="33:71" pos:end="33:75"><name pos:start="33:71" pos:end="33:71">s</name><operator pos:start="33:72" pos:end="33:73">-&gt;</operator><name pos:start="33:74" pos:end="33:75">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="33:78" pos:end="33:78">+</operator> <literal type="number" pos:start="33:80" pos:end="33:80">7</literal><operator pos:start="33:81" pos:end="33:81">)</operator><operator pos:start="33:82" pos:end="33:82">/</operator><literal type="number" pos:start="33:83" pos:end="33:83">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="35:9" pos:end="35:33">/* calculate pre-state */</comment>

        <for pos:start="37:9" pos:end="59:9">for<control pos:start="37:12" pos:end="37:33">( <init pos:start="37:14" pos:end="37:18"><expr pos:start="37:14" pos:end="37:17"><name pos:start="37:14" pos:end="37:14">i</name><operator pos:start="37:15" pos:end="37:15">=</operator> <literal type="number" pos:start="37:17" pos:end="37:17">0</literal></expr>;</init> <condition pos:start="37:20" pos:end="37:27"><expr pos:start="37:20" pos:end="37:26"><name pos:start="37:20" pos:end="37:20">i</name> <operator pos:start="37:22" pos:end="37:22">&lt;</operator> <literal type="number" pos:start="37:24" pos:end="37:26">460</literal></expr>;</condition> <incr pos:start="37:29" pos:end="37:31"><expr pos:start="37:29" pos:end="37:31"><name pos:start="37:29" pos:end="37:29">i</name><operator pos:start="37:30" pos:end="37:31">++</operator></expr></incr> )</control> <block pos:start="37:35" pos:end="59:9">{<block_content pos:start="39:13" pos:end="57:57">

            <decl_stmt pos:start="39:13" pos:end="39:20"><decl pos:start="39:13" pos:end="39:19"><type pos:start="39:13" pos:end="39:15"><name pos:start="39:13" pos:end="39:15">int</name></type> <name pos:start="39:17" pos:end="39:19">pre</name></decl>;</decl_stmt>

            <if_stmt pos:start="41:13" pos:end="47:155"><if pos:start="41:13" pos:end="43:115">if<condition pos:start="41:15" pos:end="41:41">( <expr pos:start="41:17" pos:end="41:39"><name pos:start="41:17" pos:end="41:29"><name pos:start="41:17" pos:end="41:17">h</name><operator pos:start="41:18" pos:end="41:19">-&gt;</operator><name pos:start="41:20" pos:end="41:29">slice_type</name></name> <operator pos:start="41:31" pos:end="41:32">==</operator> <name pos:start="41:34" pos:end="41:39">I_TYPE</name></expr> )</condition><block type="pseudo" pos:start="43:17" pos:end="43:115"><block_content pos:start="43:17" pos:end="43:115">

                <expr_stmt pos:start="43:17" pos:end="43:115"><expr pos:start="43:17" pos:end="43:114"><name pos:start="43:17" pos:end="43:19">pre</name> <operator pos:start="43:21" pos:end="43:21">=</operator> <call pos:start="43:23" pos:end="43:114"><name pos:start="43:23" pos:end="43:26">clip</name><argument_list pos:start="43:27" pos:end="43:114">( <argument pos:start="43:29" pos:end="43:104"><expr pos:start="43:29" pos:end="43:104"><operator pos:start="43:29" pos:end="43:29">(</operator><operator pos:start="43:30" pos:end="43:30">(</operator><name pos:start="43:31" pos:end="43:56"><name pos:start="43:31" pos:end="43:50">cabac_context_init_I</name><index pos:start="43:51" pos:end="43:53">[<expr pos:start="43:52" pos:end="43:52"><name pos:start="43:52" pos:end="43:52">i</name></expr>]</index><index pos:start="43:54" pos:end="43:56">[<expr pos:start="43:55" pos:end="43:55"><literal type="number" pos:start="43:55" pos:end="43:55">0</literal></expr>]</index></name> <operator pos:start="43:58" pos:end="43:58">*</operator> <name pos:start="43:60" pos:end="43:68"><name pos:start="43:60" pos:end="43:60">s</name><operator pos:start="43:61" pos:end="43:62">-&gt;</operator><name pos:start="43:63" pos:end="43:68">qscale</name></name><operator pos:start="43:69" pos:end="43:69">)</operator> <operator pos:start="43:71" pos:end="43:72">&gt;&gt;</operator><literal type="number" pos:start="43:73" pos:end="43:73">4</literal> <operator pos:start="43:75" pos:end="43:75">)</operator> <operator pos:start="43:77" pos:end="43:77">+</operator> <name pos:start="43:79" pos:end="43:104"><name pos:start="43:79" pos:end="43:98">cabac_context_init_I</name><index pos:start="43:99" pos:end="43:101">[<expr pos:start="43:100" pos:end="43:100"><name pos:start="43:100" pos:end="43:100">i</name></expr>]</index><index pos:start="43:102" pos:end="43:104">[<expr pos:start="43:103" pos:end="43:103"><literal type="number" pos:start="43:103" pos:end="43:103">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="43:107" pos:end="43:107"><expr pos:start="43:107" pos:end="43:107"><literal type="number" pos:start="43:107" pos:end="43:107">1</literal></expr></argument>, <argument pos:start="43:110" pos:end="43:112"><expr pos:start="43:110" pos:end="43:112"><literal type="number" pos:start="43:110" pos:end="43:112">126</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="45:13" pos:end="47:155">else<block type="pseudo" pos:start="47:17" pos:end="47:155"><block_content pos:start="47:17" pos:end="47:155">

                <expr_stmt pos:start="47:17" pos:end="47:155"><expr pos:start="47:17" pos:end="47:154"><name pos:start="47:17" pos:end="47:19">pre</name> <operator pos:start="47:21" pos:end="47:21">=</operator> <call pos:start="47:23" pos:end="47:154"><name pos:start="47:23" pos:end="47:26">clip</name><argument_list pos:start="47:27" pos:end="47:154">( <argument pos:start="47:29" pos:end="47:144"><expr pos:start="47:29" pos:end="47:144"><operator pos:start="47:29" pos:end="47:29">(</operator><operator pos:start="47:30" pos:end="47:30">(</operator><name pos:start="47:31" pos:end="47:76"><name pos:start="47:31" pos:end="47:51">cabac_context_init_PB</name><index pos:start="47:52" pos:end="47:70">[<expr pos:start="47:53" pos:end="47:69"><name pos:start="47:53" pos:end="47:69"><name pos:start="47:53" pos:end="47:53">h</name><operator pos:start="47:54" pos:end="47:55">-&gt;</operator><name pos:start="47:56" pos:end="47:69">cabac_init_idc</name></name></expr>]</index><index pos:start="47:71" pos:end="47:73">[<expr pos:start="47:72" pos:end="47:72"><name pos:start="47:72" pos:end="47:72">i</name></expr>]</index><index pos:start="47:74" pos:end="47:76">[<expr pos:start="47:75" pos:end="47:75"><literal type="number" pos:start="47:75" pos:end="47:75">0</literal></expr>]</index></name> <operator pos:start="47:78" pos:end="47:78">*</operator> <name pos:start="47:80" pos:end="47:88"><name pos:start="47:80" pos:end="47:80">s</name><operator pos:start="47:81" pos:end="47:82">-&gt;</operator><name pos:start="47:83" pos:end="47:88">qscale</name></name><operator pos:start="47:89" pos:end="47:89">)</operator> <operator pos:start="47:91" pos:end="47:92">&gt;&gt;</operator><literal type="number" pos:start="47:93" pos:end="47:93">4</literal> <operator pos:start="47:95" pos:end="47:95">)</operator> <operator pos:start="47:97" pos:end="47:97">+</operator> <name pos:start="47:99" pos:end="47:144"><name pos:start="47:99" pos:end="47:119">cabac_context_init_PB</name><index pos:start="47:120" pos:end="47:138">[<expr pos:start="47:121" pos:end="47:137"><name pos:start="47:121" pos:end="47:137"><name pos:start="47:121" pos:end="47:121">h</name><operator pos:start="47:122" pos:end="47:123">-&gt;</operator><name pos:start="47:124" pos:end="47:137">cabac_init_idc</name></name></expr>]</index><index pos:start="47:139" pos:end="47:141">[<expr pos:start="47:140" pos:end="47:140"><name pos:start="47:140" pos:end="47:140">i</name></expr>]</index><index pos:start="47:142" pos:end="47:144">[<expr pos:start="47:143" pos:end="47:143"><literal type="number" pos:start="47:143" pos:end="47:143">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="47:147" pos:end="47:147"><expr pos:start="47:147" pos:end="47:147"><literal type="number" pos:start="47:147" pos:end="47:147">1</literal></expr></argument>, <argument pos:start="47:150" pos:end="47:152"><expr pos:start="47:150" pos:end="47:152"><literal type="number" pos:start="47:150" pos:end="47:152">126</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <if_stmt pos:start="51:13" pos:end="57:57"><if pos:start="51:13" pos:end="53:57">if<condition pos:start="51:15" pos:end="51:27">( <expr pos:start="51:17" pos:end="51:25"><name pos:start="51:17" pos:end="51:19">pre</name> <operator pos:start="51:21" pos:end="51:22">&lt;=</operator> <literal type="number" pos:start="51:24" pos:end="51:25">63</literal></expr> )</condition><block type="pseudo" pos:start="53:17" pos:end="53:57"><block_content pos:start="53:17" pos:end="53:57">

                <expr_stmt pos:start="53:17" pos:end="53:57"><expr pos:start="53:17" pos:end="53:56"><name pos:start="53:17" pos:end="53:33"><name pos:start="53:17" pos:end="53:17">h</name><operator pos:start="53:18" pos:end="53:19">-&gt;</operator><name pos:start="53:20" pos:end="53:30">cabac_state</name><index pos:start="53:31" pos:end="53:33">[<expr pos:start="53:32" pos:end="53:32"><name pos:start="53:32" pos:end="53:32">i</name></expr>]</index></name> <operator pos:start="53:35" pos:end="53:35">=</operator> <literal type="number" pos:start="53:37" pos:end="53:37">2</literal> <operator pos:start="53:39" pos:end="53:39">*</operator> <operator pos:start="53:41" pos:end="53:41">(</operator> <literal type="number" pos:start="53:43" pos:end="53:46">63</literal> <operator pos:start="53:46" pos:end="53:46">-</operator> <name pos:start="53:48" pos:end="53:50">pre</name> <operator pos:start="53:52" pos:end="53:52">)</operator> <operator pos:start="53:54" pos:end="53:54">+</operator> <literal type="number" pos:start="53:56" pos:end="53:56">0</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="55:13" pos:end="57:57">else<block type="pseudo" pos:start="57:17" pos:end="57:57"><block_content pos:start="57:17" pos:end="57:57">

                <expr_stmt pos:start="57:17" pos:end="57:57"><expr pos:start="57:17" pos:end="57:56"><name pos:start="57:17" pos:end="57:33"><name pos:start="57:17" pos:end="57:17">h</name><operator pos:start="57:18" pos:end="57:19">-&gt;</operator><name pos:start="57:20" pos:end="57:30">cabac_state</name><index pos:start="57:31" pos:end="57:33">[<expr pos:start="57:32" pos:end="57:32"><name pos:start="57:32" pos:end="57:32">i</name></expr>]</index></name> <operator pos:start="57:35" pos:end="57:35">=</operator> <literal type="number" pos:start="57:37" pos:end="57:37">2</literal> <operator pos:start="57:39" pos:end="57:39">*</operator> <operator pos:start="57:41" pos:end="57:41">(</operator> <name pos:start="57:43" pos:end="57:45">pre</name> <operator pos:start="57:47" pos:end="57:47">-</operator> <literal type="number" pos:start="57:49" pos:end="57:50">64</literal> <operator pos:start="57:52" pos:end="57:52">)</operator> <operator pos:start="57:54" pos:end="57:54">+</operator> <literal type="number" pos:start="57:56" pos:end="57:56">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></for>



        <for pos:start="63:9" pos:end="137:9">for<control pos:start="63:12" pos:end="63:15">(<init pos:start="63:13" pos:end="63:13">;</init><condition pos:start="63:14" pos:end="63:14">;</condition><incr/>)</control><block pos:start="63:16" pos:end="137:9">{<block_content pos:start="65:13" pos:end="135:13">

            <decl_stmt pos:start="65:13" pos:end="65:41"><decl pos:start="65:13" pos:end="65:40"><type pos:start="65:13" pos:end="65:15"><name pos:start="65:13" pos:end="65:15">int</name></type> <name pos:start="65:17" pos:end="65:19">ret</name> <init pos:start="65:21" pos:end="65:40">= <expr pos:start="65:23" pos:end="65:40"><call pos:start="65:23" pos:end="65:40"><name pos:start="65:23" pos:end="65:37">decode_mb_cabac</name><argument_list pos:start="65:38" pos:end="65:40">(<argument pos:start="65:39" pos:end="65:39"><expr pos:start="65:39" pos:end="65:39"><name pos:start="65:39" pos:end="65:39">h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="67:13" pos:end="67:20"><decl pos:start="67:13" pos:end="67:19"><type pos:start="67:13" pos:end="67:15"><name pos:start="67:13" pos:end="67:15">int</name></type> <name pos:start="67:17" pos:end="67:19">eos</name></decl>;</decl_stmt>



            <if_stmt pos:start="71:13" pos:end="71:39"><if pos:start="71:13" pos:end="71:39">if<condition pos:start="71:15" pos:end="71:22">(<expr pos:start="71:16" pos:end="71:21"><name pos:start="71:16" pos:end="71:18">ret</name><operator pos:start="71:19" pos:end="71:20">&gt;=</operator><literal type="number" pos:start="71:21" pos:end="71:21">0</literal></expr>)</condition><block type="pseudo" pos:start="71:24" pos:end="71:39"><block_content pos:start="71:24" pos:end="71:39"> <expr_stmt pos:start="71:24" pos:end="71:39"><expr pos:start="71:24" pos:end="71:38"><call pos:start="71:24" pos:end="71:38"><name pos:start="71:24" pos:end="71:35">hl_decode_mb</name><argument_list pos:start="71:36" pos:end="71:38">(<argument pos:start="71:37" pos:end="71:37"><expr pos:start="71:37" pos:end="71:37"><name pos:start="71:37" pos:end="71:37">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <comment type="block" pos:start="75:13" pos:end="75:77">/* XXX: useless as decode_mb_cabac it doesn't support that ... */</comment>

            <if_stmt pos:start="77:13" pos:end="91:13"><if pos:start="77:13" pos:end="91:13">if<condition pos:start="77:15" pos:end="77:45">( <expr pos:start="77:17" pos:end="77:43"><name pos:start="77:17" pos:end="77:19">ret</name> <operator pos:start="77:21" pos:end="77:22">&gt;=</operator> <literal type="number" pos:start="77:24" pos:end="77:24">0</literal> <operator pos:start="77:26" pos:end="77:27">&amp;&amp;</operator> <name pos:start="77:29" pos:end="77:43"><name pos:start="77:29" pos:end="77:29">h</name><operator pos:start="77:30" pos:end="77:31">-&gt;</operator><name pos:start="77:32" pos:end="77:43">mb_aff_frame</name></name></expr> )</condition> <block pos:start="77:47" pos:end="91:13">{<block_content pos:start="79:17" pos:end="89:26"> <comment type="line" pos:start="77:49" pos:end="77:96">//FIXME optimal? or let mb_decode decode 16x32 ?</comment>

                <expr_stmt pos:start="79:17" pos:end="79:26"><expr pos:start="79:17" pos:end="79:25"><name pos:start="79:17" pos:end="79:23"><name pos:start="79:17" pos:end="79:17">s</name><operator pos:start="79:18" pos:end="79:19">-&gt;</operator><name pos:start="79:20" pos:end="79:23">mb_y</name></name><operator pos:start="79:24" pos:end="79:25">++</operator></expr>;</expr_stmt>



                <if_stmt pos:start="83:17" pos:end="83:52"><if pos:start="83:17" pos:end="83:52">if<condition pos:start="83:19" pos:end="83:26">(<expr pos:start="83:20" pos:end="83:25"><name pos:start="83:20" pos:end="83:22">ret</name><operator pos:start="83:23" pos:end="83:24">&gt;=</operator><literal type="number" pos:start="83:25" pos:end="83:25">0</literal></expr>)</condition><block type="pseudo" pos:start="83:28" pos:end="83:52"><block_content pos:start="83:28" pos:end="83:52"> <expr_stmt pos:start="83:28" pos:end="83:52"><expr pos:start="83:28" pos:end="83:51"><name pos:start="83:28" pos:end="83:30">ret</name> <operator pos:start="83:32" pos:end="83:32">=</operator> <call pos:start="83:34" pos:end="83:51"><name pos:start="83:34" pos:end="83:48">decode_mb_cabac</name><argument_list pos:start="83:49" pos:end="83:51">(<argument pos:start="83:50" pos:end="83:50"><expr pos:start="83:50" pos:end="83:50"><name pos:start="83:50" pos:end="83:50">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



                <expr_stmt pos:start="87:17" pos:end="87:32"><expr pos:start="87:17" pos:end="87:31"><call pos:start="87:17" pos:end="87:31"><name pos:start="87:17" pos:end="87:28">hl_decode_mb</name><argument_list pos:start="87:29" pos:end="87:31">(<argument pos:start="87:30" pos:end="87:30"><expr pos:start="87:30" pos:end="87:30"><name pos:start="87:30" pos:end="87:30">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="89:17" pos:end="89:26"><expr pos:start="89:17" pos:end="89:25"><name pos:start="89:17" pos:end="89:23"><name pos:start="89:17" pos:end="89:17">s</name><operator pos:start="89:18" pos:end="89:19">-&gt;</operator><name pos:start="89:20" pos:end="89:23">mb_y</name></name><operator pos:start="89:24" pos:end="89:25">--</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:51"><expr pos:start="93:13" pos:end="93:50"><name pos:start="93:13" pos:end="93:15">eos</name> <operator pos:start="93:17" pos:end="93:17">=</operator> <call pos:start="93:19" pos:end="93:50"><name pos:start="93:19" pos:end="93:37">get_cabac_terminate</name><argument_list pos:start="93:38" pos:end="93:50">( <argument pos:start="93:40" pos:end="93:48"><expr pos:start="93:40" pos:end="93:48"><operator pos:start="93:40" pos:end="93:40">&amp;</operator><name pos:start="93:41" pos:end="93:48"><name pos:start="93:41" pos:end="93:41">h</name><operator pos:start="93:42" pos:end="93:43">-&gt;</operator><name pos:start="93:44" pos:end="93:48">cabac</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="97:13" pos:end="105:13"><if pos:start="97:13" pos:end="105:13">if<condition pos:start="97:15" pos:end="97:77">( <expr pos:start="97:17" pos:end="97:76"><name pos:start="97:17" pos:end="97:48"><name pos:start="97:17" pos:end="97:19">ret</name> <argument_list type="generic" pos:start="97:21" pos:end="97:48">&lt; <argument pos:start="97:23" pos:end="97:46"><expr pos:start="97:23" pos:end="97:46"><literal type="number" pos:start="97:23" pos:end="97:23">0</literal> <operator pos:start="97:25" pos:end="97:26">||</operator> <name pos:start="97:28" pos:end="97:46"><name pos:start="97:28" pos:end="97:28">h</name><operator pos:start="97:29" pos:end="97:30">-&gt;</operator><name pos:start="97:31" pos:end="97:35">cabac</name><operator pos:start="97:36" pos:end="97:36">.</operator><name pos:start="97:37" pos:end="97:46">bytestream</name></name></expr></argument> &gt;</argument_list></name> <name pos:start="97:50" pos:end="97:72"><name pos:start="97:50" pos:end="97:50">h</name><operator pos:start="97:51" pos:end="97:52">-&gt;</operator><name pos:start="97:53" pos:end="97:57">cabac</name><operator pos:start="97:58" pos:end="97:58">.</operator><name pos:start="97:59" pos:end="97:72">bytestream_end</name></name> <operator pos:start="97:74" pos:end="97:74">+</operator> <literal type="number" pos:start="97:76" pos:end="97:76">1</literal></expr>)</condition> <block pos:start="97:79" pos:end="105:13">{<block_content pos:start="99:17" pos:end="103:26">

                <expr_stmt pos:start="99:17" pos:end="99:102"><expr pos:start="99:17" pos:end="99:101"><call pos:start="99:17" pos:end="99:101"><name pos:start="99:17" pos:end="99:22">av_log</name><argument_list pos:start="99:23" pos:end="99:101">(<argument pos:start="99:24" pos:end="99:33"><expr pos:start="99:24" pos:end="99:33"><name pos:start="99:24" pos:end="99:33"><name pos:start="99:24" pos:end="99:24">h</name><operator pos:start="99:25" pos:end="99:26">-&gt;</operator><name pos:start="99:27" pos:end="99:27">s</name><operator pos:start="99:28" pos:end="99:28">.</operator><name pos:start="99:29" pos:end="99:33">avctx</name></name></expr></argument>, <argument pos:start="99:36" pos:end="99:47"><expr pos:start="99:36" pos:end="99:47"><name pos:start="99:36" pos:end="99:47">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="99:50" pos:end="99:82"><expr pos:start="99:50" pos:end="99:82"><literal type="string" pos:start="99:50" pos:end="99:82">"error while decoding MB %d %d\n"</literal></expr></argument>, <argument pos:start="99:85" pos:end="99:91"><expr pos:start="99:85" pos:end="99:91"><name pos:start="99:85" pos:end="99:91"><name pos:start="99:85" pos:end="99:85">s</name><operator pos:start="99:86" pos:end="99:87">-&gt;</operator><name pos:start="99:88" pos:end="99:91">mb_x</name></name></expr></argument>, <argument pos:start="99:94" pos:end="99:100"><expr pos:start="99:94" pos:end="99:100"><name pos:start="99:94" pos:end="99:100"><name pos:start="99:94" pos:end="99:94">s</name><operator pos:start="99:95" pos:end="99:96">-&gt;</operator><name pos:start="99:97" pos:end="99:100">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="101:17" pos:end="101:125"><expr pos:start="101:17" pos:end="101:124"><call pos:start="101:17" pos:end="101:124"><name pos:start="101:17" pos:end="101:31">ff_er_add_slice</name><argument_list pos:start="101:32" pos:end="101:124">(<argument pos:start="101:33" pos:end="101:33"><expr pos:start="101:33" pos:end="101:33"><name pos:start="101:33" pos:end="101:33">s</name></expr></argument>, <argument pos:start="101:36" pos:end="101:49"><expr pos:start="101:36" pos:end="101:49"><name pos:start="101:36" pos:end="101:49"><name pos:start="101:36" pos:end="101:36">s</name><operator pos:start="101:37" pos:end="101:38">-&gt;</operator><name pos:start="101:39" pos:end="101:49">resync_mb_x</name></name></expr></argument>, <argument pos:start="101:52" pos:end="101:65"><expr pos:start="101:52" pos:end="101:65"><name pos:start="101:52" pos:end="101:65"><name pos:start="101:52" pos:end="101:52">s</name><operator pos:start="101:53" pos:end="101:54">-&gt;</operator><name pos:start="101:55" pos:end="101:65">resync_mb_y</name></name></expr></argument>, <argument pos:start="101:68" pos:end="101:74"><expr pos:start="101:68" pos:end="101:74"><name pos:start="101:68" pos:end="101:74"><name pos:start="101:68" pos:end="101:68">s</name><operator pos:start="101:69" pos:end="101:70">-&gt;</operator><name pos:start="101:71" pos:end="101:74">mb_x</name></name></expr></argument>, <argument pos:start="101:77" pos:end="101:83"><expr pos:start="101:77" pos:end="101:83"><name pos:start="101:77" pos:end="101:83"><name pos:start="101:77" pos:end="101:77">s</name><operator pos:start="101:78" pos:end="101:79">-&gt;</operator><name pos:start="101:80" pos:end="101:83">mb_y</name></name></expr></argument>, <argument pos:start="101:86" pos:end="101:123"><expr pos:start="101:86" pos:end="101:123"><operator pos:start="101:86" pos:end="101:86">(</operator><name pos:start="101:87" pos:end="101:94">AC_ERROR</name><operator pos:start="101:95" pos:end="101:95">|</operator><name pos:start="101:96" pos:end="101:103">DC_ERROR</name><operator pos:start="101:104" pos:end="101:104">|</operator><name pos:start="101:105" pos:end="101:112">MV_ERROR</name><operator pos:start="101:113" pos:end="101:113">)</operator><operator pos:start="101:114" pos:end="101:114">&amp;</operator><name pos:start="101:115" pos:end="101:123">part_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="103:17" pos:end="103:26">return <expr pos:start="103:24" pos:end="103:25"><operator pos:start="103:24" pos:end="103:24">-</operator><literal type="number" pos:start="103:25" pos:end="103:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="109:13" pos:end="123:13"><if pos:start="109:13" pos:end="123:13">if<condition pos:start="109:15" pos:end="109:42">( <expr pos:start="109:17" pos:end="109:40"><operator pos:start="109:17" pos:end="109:18">++</operator><name pos:start="109:19" pos:end="109:25"><name pos:start="109:19" pos:end="109:19">s</name><operator pos:start="109:20" pos:end="109:21">-&gt;</operator><name pos:start="109:22" pos:end="109:25">mb_x</name></name> <operator pos:start="109:27" pos:end="109:28">&gt;=</operator> <name pos:start="109:30" pos:end="109:40"><name pos:start="109:30" pos:end="109:30">s</name><operator pos:start="109:31" pos:end="109:32">-&gt;</operator><name pos:start="109:33" pos:end="109:40">mb_width</name></name></expr> )</condition> <block pos:start="109:44" pos:end="123:13">{<block_content pos:start="111:17" pos:end="121:17">

                <expr_stmt pos:start="111:17" pos:end="111:28"><expr pos:start="111:17" pos:end="111:27"><name pos:start="111:17" pos:end="111:23"><name pos:start="111:17" pos:end="111:17">s</name><operator pos:start="111:18" pos:end="111:19">-&gt;</operator><name pos:start="111:20" pos:end="111:23">mb_x</name></name> <operator pos:start="111:25" pos:end="111:25">=</operator> <literal type="number" pos:start="111:27" pos:end="111:27">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="113:17" pos:end="113:54"><expr pos:start="113:17" pos:end="113:53"><call pos:start="113:17" pos:end="113:53"><name pos:start="113:17" pos:end="113:34">ff_draw_horiz_band</name><argument_list pos:start="113:35" pos:end="113:53">(<argument pos:start="113:36" pos:end="113:36"><expr pos:start="113:36" pos:end="113:36"><name pos:start="113:36" pos:end="113:36">s</name></expr></argument>, <argument pos:start="113:39" pos:end="113:48"><expr pos:start="113:39" pos:end="113:48"><literal type="number" pos:start="113:39" pos:end="113:40">16</literal><operator pos:start="113:41" pos:end="113:41">*</operator><name pos:start="113:42" pos:end="113:48"><name pos:start="113:42" pos:end="113:42">s</name><operator pos:start="113:43" pos:end="113:44">-&gt;</operator><name pos:start="113:45" pos:end="113:48">mb_y</name></name></expr></argument>, <argument pos:start="113:51" pos:end="113:52"><expr pos:start="113:51" pos:end="113:52"><literal type="number" pos:start="113:51" pos:end="113:52">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="115:17" pos:end="115:26"><expr pos:start="115:17" pos:end="115:25"><operator pos:start="115:17" pos:end="115:18">++</operator><name pos:start="115:19" pos:end="115:25"><name pos:start="115:19" pos:end="115:19">s</name><operator pos:start="115:20" pos:end="115:21">-&gt;</operator><name pos:start="115:22" pos:end="115:25">mb_y</name></name></expr>;</expr_stmt>

                <if_stmt pos:start="117:17" pos:end="121:17"><if pos:start="117:17" pos:end="121:17">if<condition pos:start="117:19" pos:end="117:35">(<expr pos:start="117:20" pos:end="117:34"><name pos:start="117:20" pos:end="117:34"><name pos:start="117:20" pos:end="117:20">h</name><operator pos:start="117:21" pos:end="117:22">-&gt;</operator><name pos:start="117:23" pos:end="117:34">mb_aff_frame</name></name></expr>)</condition> <block pos:start="117:37" pos:end="121:17">{<block_content pos:start="119:21" pos:end="119:30">

                    <expr_stmt pos:start="119:21" pos:end="119:30"><expr pos:start="119:21" pos:end="119:29"><operator pos:start="119:21" pos:end="119:22">++</operator><name pos:start="119:23" pos:end="119:29"><name pos:start="119:23" pos:end="119:23">s</name><operator pos:start="119:24" pos:end="119:25">-&gt;</operator><name pos:start="119:26" pos:end="119:29">mb_y</name></name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="127:13" pos:end="135:13"><if pos:start="127:13" pos:end="135:13">if<condition pos:start="127:15" pos:end="127:48">( <expr pos:start="127:17" pos:end="127:46"><name pos:start="127:17" pos:end="127:19">eos</name> <operator pos:start="127:21" pos:end="127:22">||</operator> <name pos:start="127:24" pos:end="127:30"><name pos:start="127:24" pos:end="127:24">s</name><operator pos:start="127:25" pos:end="127:26">-&gt;</operator><name pos:start="127:27" pos:end="127:30">mb_y</name></name> <operator pos:start="127:32" pos:end="127:33">&gt;=</operator> <name pos:start="127:35" pos:end="127:46"><name pos:start="127:35" pos:end="127:35">s</name><operator pos:start="127:36" pos:end="127:37">-&gt;</operator><name pos:start="127:38" pos:end="127:46">mb_height</name></name></expr> )</condition> <block pos:start="127:50" pos:end="135:13">{<block_content pos:start="129:17" pos:end="133:25">

                <expr_stmt pos:start="129:17" pos:end="129:89"><expr pos:start="129:17" pos:end="129:88"><call pos:start="129:17" pos:end="129:88"><name pos:start="129:17" pos:end="129:23">tprintf</name><argument_list pos:start="129:24" pos:end="129:88">(<argument pos:start="129:25" pos:end="129:43"><expr pos:start="129:25" pos:end="129:43"><literal type="string" pos:start="129:25" pos:end="129:43">"slice end %d %d\n"</literal></expr></argument>, <argument pos:start="129:46" pos:end="129:67"><expr pos:start="129:46" pos:end="129:67"><call pos:start="129:46" pos:end="129:67"><name pos:start="129:46" pos:end="129:59">get_bits_count</name><argument_list pos:start="129:60" pos:end="129:67">(<argument pos:start="129:61" pos:end="129:66"><expr pos:start="129:61" pos:end="129:66"><operator pos:start="129:61" pos:end="129:61">&amp;</operator><name pos:start="129:62" pos:end="129:66"><name pos:start="129:62" pos:end="129:62">s</name><operator pos:start="129:63" pos:end="129:64">-&gt;</operator><name pos:start="129:65" pos:end="129:66">gb</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="129:70" pos:end="129:87"><expr pos:start="129:70" pos:end="129:87"><name pos:start="129:70" pos:end="129:87"><name pos:start="129:70" pos:end="129:70">s</name><operator pos:start="129:71" pos:end="129:72">-&gt;</operator><name pos:start="129:73" pos:end="129:74">gb</name><operator pos:start="129:75" pos:end="129:75">.</operator><name pos:start="129:76" pos:end="129:87">size_in_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="131:17" pos:end="131:121"><expr pos:start="131:17" pos:end="131:120"><call pos:start="131:17" pos:end="131:120"><name pos:start="131:17" pos:end="131:31">ff_er_add_slice</name><argument_list pos:start="131:32" pos:end="131:120">(<argument pos:start="131:33" pos:end="131:33"><expr pos:start="131:33" pos:end="131:33"><name pos:start="131:33" pos:end="131:33">s</name></expr></argument>, <argument pos:start="131:36" pos:end="131:49"><expr pos:start="131:36" pos:end="131:49"><name pos:start="131:36" pos:end="131:49"><name pos:start="131:36" pos:end="131:36">s</name><operator pos:start="131:37" pos:end="131:38">-&gt;</operator><name pos:start="131:39" pos:end="131:49">resync_mb_x</name></name></expr></argument>, <argument pos:start="131:52" pos:end="131:65"><expr pos:start="131:52" pos:end="131:65"><name pos:start="131:52" pos:end="131:65"><name pos:start="131:52" pos:end="131:52">s</name><operator pos:start="131:53" pos:end="131:54">-&gt;</operator><name pos:start="131:55" pos:end="131:65">resync_mb_y</name></name></expr></argument>, <argument pos:start="131:68" pos:end="131:76"><expr pos:start="131:68" pos:end="131:76"><name pos:start="131:68" pos:end="131:74"><name pos:start="131:68" pos:end="131:68">s</name><operator pos:start="131:69" pos:end="131:70">-&gt;</operator><name pos:start="131:71" pos:end="131:74">mb_x</name></name><operator pos:start="131:75" pos:end="131:75">-</operator><literal type="number" pos:start="131:76" pos:end="131:76">1</literal></expr></argument>, <argument pos:start="131:79" pos:end="131:85"><expr pos:start="131:79" pos:end="131:85"><name pos:start="131:79" pos:end="131:85"><name pos:start="131:79" pos:end="131:79">s</name><operator pos:start="131:80" pos:end="131:81">-&gt;</operator><name pos:start="131:82" pos:end="131:85">mb_y</name></name></expr></argument>, <argument pos:start="131:88" pos:end="131:119"><expr pos:start="131:88" pos:end="131:119"><operator pos:start="131:88" pos:end="131:88">(</operator><name pos:start="131:89" pos:end="131:94">AC_END</name><operator pos:start="131:95" pos:end="131:95">|</operator><name pos:start="131:96" pos:end="131:101">DC_END</name><operator pos:start="131:102" pos:end="131:102">|</operator><name pos:start="131:103" pos:end="131:108">MV_END</name><operator pos:start="131:109" pos:end="131:109">)</operator><operator pos:start="131:110" pos:end="131:110">&amp;</operator><name pos:start="131:111" pos:end="131:119">part_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="133:17" pos:end="133:25">return <expr pos:start="133:24" pos:end="133:24"><literal type="number" pos:start="133:24" pos:end="133:24">0</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



    </block_content>}</block></if> <else pos:start="141:7" pos:end="346:0">else <block pos:start="141:12" pos:end="346:0">{<block_content pos:start="143:9" pos:end="251:9">

        <for pos:start="143:9" pos:end="251:9">for<control pos:start="143:12" pos:end="143:15">(<init pos:start="143:13" pos:end="143:13">;</init><condition pos:start="143:14" pos:end="143:14">;</condition><incr/>)</control><block pos:start="143:16" pos:end="251:9">{<block_content pos:start="145:13" pos:end="249:13">

            <decl_stmt pos:start="145:13" pos:end="145:41"><decl pos:start="145:13" pos:end="145:40"><type pos:start="145:13" pos:end="145:15"><name pos:start="145:13" pos:end="145:15">int</name></type> <name pos:start="145:17" pos:end="145:19">ret</name> <init pos:start="145:21" pos:end="145:40">= <expr pos:start="145:23" pos:end="145:40"><call pos:start="145:23" pos:end="145:40"><name pos:start="145:23" pos:end="145:37">decode_mb_cavlc</name><argument_list pos:start="145:38" pos:end="145:40">(<argument pos:start="145:39" pos:end="145:39"><expr pos:start="145:39" pos:end="145:39"><name pos:start="145:39" pos:end="145:39">h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="149:13" pos:end="149:39"><if pos:start="149:13" pos:end="149:39">if<condition pos:start="149:15" pos:end="149:22">(<expr pos:start="149:16" pos:end="149:21"><name pos:start="149:16" pos:end="149:18">ret</name><operator pos:start="149:19" pos:end="149:20">&gt;=</operator><literal type="number" pos:start="149:21" pos:end="149:21">0</literal></expr>)</condition><block type="pseudo" pos:start="149:24" pos:end="149:39"><block_content pos:start="149:24" pos:end="149:39"> <expr_stmt pos:start="149:24" pos:end="149:39"><expr pos:start="149:24" pos:end="149:38"><call pos:start="149:24" pos:end="149:38"><name pos:start="149:24" pos:end="149:35">hl_decode_mb</name><argument_list pos:start="149:36" pos:end="149:38">(<argument pos:start="149:37" pos:end="149:37"><expr pos:start="149:37" pos:end="149:37"><name pos:start="149:37" pos:end="149:37">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <if_stmt pos:start="153:13" pos:end="165:13"><if pos:start="153:13" pos:end="165:13">if<condition pos:start="153:15" pos:end="153:41">(<expr pos:start="153:16" pos:end="153:40"><name pos:start="153:16" pos:end="153:18">ret</name><operator pos:start="153:19" pos:end="153:20">&gt;=</operator><literal type="number" pos:start="153:21" pos:end="153:21">0</literal> <operator pos:start="153:23" pos:end="153:24">&amp;&amp;</operator> <name pos:start="153:26" pos:end="153:40"><name pos:start="153:26" pos:end="153:26">h</name><operator pos:start="153:27" pos:end="153:28">-&gt;</operator><name pos:start="153:29" pos:end="153:40">mb_aff_frame</name></name></expr>)</condition><block pos:start="153:42" pos:end="165:13">{<block_content pos:start="155:17" pos:end="163:26"> <comment type="line" pos:start="153:44" pos:end="153:91">//FIXME optimal? or let mb_decode decode 16x32 ?</comment>

                <expr_stmt pos:start="155:17" pos:end="155:26"><expr pos:start="155:17" pos:end="155:25"><name pos:start="155:17" pos:end="155:23"><name pos:start="155:17" pos:end="155:17">s</name><operator pos:start="155:18" pos:end="155:19">-&gt;</operator><name pos:start="155:20" pos:end="155:23">mb_y</name></name><operator pos:start="155:24" pos:end="155:25">++</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="157:17" pos:end="157:41"><expr pos:start="157:17" pos:end="157:40"><name pos:start="157:17" pos:end="157:19">ret</name> <operator pos:start="157:21" pos:end="157:21">=</operator> <call pos:start="157:23" pos:end="157:40"><name pos:start="157:23" pos:end="157:37">decode_mb_cavlc</name><argument_list pos:start="157:38" pos:end="157:40">(<argument pos:start="157:39" pos:end="157:39"><expr pos:start="157:39" pos:end="157:39"><name pos:start="157:39" pos:end="157:39">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="161:17" pos:end="161:43"><if pos:start="161:17" pos:end="161:43">if<condition pos:start="161:19" pos:end="161:26">(<expr pos:start="161:20" pos:end="161:25"><name pos:start="161:20" pos:end="161:22">ret</name><operator pos:start="161:23" pos:end="161:24">&gt;=</operator><literal type="number" pos:start="161:25" pos:end="161:25">0</literal></expr>)</condition><block type="pseudo" pos:start="161:28" pos:end="161:43"><block_content pos:start="161:28" pos:end="161:43"> <expr_stmt pos:start="161:28" pos:end="161:43"><expr pos:start="161:28" pos:end="161:42"><call pos:start="161:28" pos:end="161:42"><name pos:start="161:28" pos:end="161:39">hl_decode_mb</name><argument_list pos:start="161:40" pos:end="161:42">(<argument pos:start="161:41" pos:end="161:41"><expr pos:start="161:41" pos:end="161:41"><name pos:start="161:41" pos:end="161:41">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="163:17" pos:end="163:26"><expr pos:start="163:17" pos:end="163:25"><name pos:start="163:17" pos:end="163:23"><name pos:start="163:17" pos:end="163:17">s</name><operator pos:start="163:18" pos:end="163:19">-&gt;</operator><name pos:start="163:20" pos:end="163:23">mb_y</name></name><operator pos:start="163:24" pos:end="163:25">--</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="169:13" pos:end="179:13"><if pos:start="169:13" pos:end="179:13">if<condition pos:start="169:15" pos:end="169:21">(<expr pos:start="169:16" pos:end="169:20"><name pos:start="169:16" pos:end="169:18">ret</name><operator pos:start="169:19" pos:end="169:19">&lt;</operator><literal type="number" pos:start="169:20" pos:end="169:20">0</literal></expr>)</condition><block pos:start="169:22" pos:end="179:13">{<block_content pos:start="171:17" pos:end="177:26">

                <expr_stmt pos:start="171:17" pos:end="171:102"><expr pos:start="171:17" pos:end="171:101"><call pos:start="171:17" pos:end="171:101"><name pos:start="171:17" pos:end="171:22">av_log</name><argument_list pos:start="171:23" pos:end="171:101">(<argument pos:start="171:24" pos:end="171:33"><expr pos:start="171:24" pos:end="171:33"><name pos:start="171:24" pos:end="171:33"><name pos:start="171:24" pos:end="171:24">h</name><operator pos:start="171:25" pos:end="171:26">-&gt;</operator><name pos:start="171:27" pos:end="171:27">s</name><operator pos:start="171:28" pos:end="171:28">.</operator><name pos:start="171:29" pos:end="171:33">avctx</name></name></expr></argument>, <argument pos:start="171:36" pos:end="171:47"><expr pos:start="171:36" pos:end="171:47"><name pos:start="171:36" pos:end="171:47">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="171:50" pos:end="171:82"><expr pos:start="171:50" pos:end="171:82"><literal type="string" pos:start="171:50" pos:end="171:82">"error while decoding MB %d %d\n"</literal></expr></argument>, <argument pos:start="171:85" pos:end="171:91"><expr pos:start="171:85" pos:end="171:91"><name pos:start="171:85" pos:end="171:91"><name pos:start="171:85" pos:end="171:85">s</name><operator pos:start="171:86" pos:end="171:87">-&gt;</operator><name pos:start="171:88" pos:end="171:91">mb_x</name></name></expr></argument>, <argument pos:start="171:94" pos:end="171:100"><expr pos:start="171:94" pos:end="171:100"><name pos:start="171:94" pos:end="171:100"><name pos:start="171:94" pos:end="171:94">s</name><operator pos:start="171:95" pos:end="171:96">-&gt;</operator><name pos:start="171:97" pos:end="171:100">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="173:17" pos:end="173:125"><expr pos:start="173:17" pos:end="173:124"><call pos:start="173:17" pos:end="173:124"><name pos:start="173:17" pos:end="173:31">ff_er_add_slice</name><argument_list pos:start="173:32" pos:end="173:124">(<argument pos:start="173:33" pos:end="173:33"><expr pos:start="173:33" pos:end="173:33"><name pos:start="173:33" pos:end="173:33">s</name></expr></argument>, <argument pos:start="173:36" pos:end="173:49"><expr pos:start="173:36" pos:end="173:49"><name pos:start="173:36" pos:end="173:49"><name pos:start="173:36" pos:end="173:36">s</name><operator pos:start="173:37" pos:end="173:38">-&gt;</operator><name pos:start="173:39" pos:end="173:49">resync_mb_x</name></name></expr></argument>, <argument pos:start="173:52" pos:end="173:65"><expr pos:start="173:52" pos:end="173:65"><name pos:start="173:52" pos:end="173:65"><name pos:start="173:52" pos:end="173:52">s</name><operator pos:start="173:53" pos:end="173:54">-&gt;</operator><name pos:start="173:55" pos:end="173:65">resync_mb_y</name></name></expr></argument>, <argument pos:start="173:68" pos:end="173:74"><expr pos:start="173:68" pos:end="173:74"><name pos:start="173:68" pos:end="173:74"><name pos:start="173:68" pos:end="173:68">s</name><operator pos:start="173:69" pos:end="173:70">-&gt;</operator><name pos:start="173:71" pos:end="173:74">mb_x</name></name></expr></argument>, <argument pos:start="173:77" pos:end="173:83"><expr pos:start="173:77" pos:end="173:83"><name pos:start="173:77" pos:end="173:83"><name pos:start="173:77" pos:end="173:77">s</name><operator pos:start="173:78" pos:end="173:79">-&gt;</operator><name pos:start="173:80" pos:end="173:83">mb_y</name></name></expr></argument>, <argument pos:start="173:86" pos:end="173:123"><expr pos:start="173:86" pos:end="173:123"><operator pos:start="173:86" pos:end="173:86">(</operator><name pos:start="173:87" pos:end="173:94">AC_ERROR</name><operator pos:start="173:95" pos:end="173:95">|</operator><name pos:start="173:96" pos:end="173:103">DC_ERROR</name><operator pos:start="173:104" pos:end="173:104">|</operator><name pos:start="173:105" pos:end="173:112">MV_ERROR</name><operator pos:start="173:113" pos:end="173:113">)</operator><operator pos:start="173:114" pos:end="173:114">&amp;</operator><name pos:start="173:115" pos:end="173:123">part_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <return pos:start="177:17" pos:end="177:26">return <expr pos:start="177:24" pos:end="177:25"><operator pos:start="177:24" pos:end="177:24">-</operator><literal type="number" pos:start="177:25" pos:end="177:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="183:13" pos:end="223:13"><if pos:start="183:13" pos:end="223:13">if<condition pos:start="183:15" pos:end="183:40">(<expr pos:start="183:16" pos:end="183:39"><operator pos:start="183:16" pos:end="183:17">++</operator><name pos:start="183:18" pos:end="183:24"><name pos:start="183:18" pos:end="183:18">s</name><operator pos:start="183:19" pos:end="183:20">-&gt;</operator><name pos:start="183:21" pos:end="183:24">mb_x</name></name> <operator pos:start="183:26" pos:end="183:27">&gt;=</operator> <name pos:start="183:29" pos:end="183:39"><name pos:start="183:29" pos:end="183:29">s</name><operator pos:start="183:30" pos:end="183:31">-&gt;</operator><name pos:start="183:32" pos:end="183:39">mb_width</name></name></expr>)</condition><block pos:start="183:41" pos:end="223:13">{<block_content pos:start="185:17" pos:end="221:17">

                <expr_stmt pos:start="185:17" pos:end="185:26"><expr pos:start="185:17" pos:end="185:25"><name pos:start="185:17" pos:end="185:23"><name pos:start="185:17" pos:end="185:17">s</name><operator pos:start="185:18" pos:end="185:19">-&gt;</operator><name pos:start="185:20" pos:end="185:23">mb_x</name></name><operator pos:start="185:24" pos:end="185:24">=</operator><literal type="number" pos:start="185:25" pos:end="185:25">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="187:17" pos:end="187:54"><expr pos:start="187:17" pos:end="187:53"><call pos:start="187:17" pos:end="187:53"><name pos:start="187:17" pos:end="187:34">ff_draw_horiz_band</name><argument_list pos:start="187:35" pos:end="187:53">(<argument pos:start="187:36" pos:end="187:36"><expr pos:start="187:36" pos:end="187:36"><name pos:start="187:36" pos:end="187:36">s</name></expr></argument>, <argument pos:start="187:39" pos:end="187:48"><expr pos:start="187:39" pos:end="187:48"><literal type="number" pos:start="187:39" pos:end="187:40">16</literal><operator pos:start="187:41" pos:end="187:41">*</operator><name pos:start="187:42" pos:end="187:48"><name pos:start="187:42" pos:end="187:42">s</name><operator pos:start="187:43" pos:end="187:44">-&gt;</operator><name pos:start="187:45" pos:end="187:48">mb_y</name></name></expr></argument>, <argument pos:start="187:51" pos:end="187:52"><expr pos:start="187:51" pos:end="187:52"><literal type="number" pos:start="187:51" pos:end="187:52">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="189:17" pos:end="189:26"><expr pos:start="189:17" pos:end="189:25"><operator pos:start="189:17" pos:end="189:18">++</operator><name pos:start="189:19" pos:end="189:25"><name pos:start="189:19" pos:end="189:19">s</name><operator pos:start="189:20" pos:end="189:21">-&gt;</operator><name pos:start="189:22" pos:end="189:25">mb_y</name></name></expr>;</expr_stmt>

                <if_stmt pos:start="191:17" pos:end="195:17"><if pos:start="191:17" pos:end="195:17">if<condition pos:start="191:19" pos:end="191:35">(<expr pos:start="191:20" pos:end="191:34"><name pos:start="191:20" pos:end="191:34"><name pos:start="191:20" pos:end="191:20">h</name><operator pos:start="191:21" pos:end="191:22">-&gt;</operator><name pos:start="191:23" pos:end="191:34">mb_aff_frame</name></name></expr>)</condition> <block pos:start="191:37" pos:end="195:17">{<block_content pos:start="193:21" pos:end="193:30">

                    <expr_stmt pos:start="193:21" pos:end="193:30"><expr pos:start="193:21" pos:end="193:29"><operator pos:start="193:21" pos:end="193:22">++</operator><name pos:start="193:23" pos:end="193:29"><name pos:start="193:23" pos:end="193:23">s</name><operator pos:start="193:24" pos:end="193:25">-&gt;</operator><name pos:start="193:26" pos:end="193:29">mb_y</name></name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="197:17" pos:end="221:17"><if pos:start="197:17" pos:end="221:17">if<condition pos:start="197:19" pos:end="197:43">(<expr pos:start="197:20" pos:end="197:42"><name pos:start="197:20" pos:end="197:26"><name pos:start="197:20" pos:end="197:20">s</name><operator pos:start="197:21" pos:end="197:22">-&gt;</operator><name pos:start="197:23" pos:end="197:26">mb_y</name></name> <operator pos:start="197:28" pos:end="197:29">&gt;=</operator> <name pos:start="197:31" pos:end="197:42"><name pos:start="197:31" pos:end="197:31">s</name><operator pos:start="197:32" pos:end="197:33">-&gt;</operator><name pos:start="197:34" pos:end="197:42">mb_height</name></name></expr>)</condition><block pos:start="197:44" pos:end="221:17">{<block_content pos:start="199:21" pos:end="219:21">

                    <expr_stmt pos:start="199:21" pos:end="199:93"><expr pos:start="199:21" pos:end="199:92"><call pos:start="199:21" pos:end="199:92"><name pos:start="199:21" pos:end="199:27">tprintf</name><argument_list pos:start="199:28" pos:end="199:92">(<argument pos:start="199:29" pos:end="199:47"><expr pos:start="199:29" pos:end="199:47"><literal type="string" pos:start="199:29" pos:end="199:47">"slice end %d %d\n"</literal></expr></argument>, <argument pos:start="199:50" pos:end="199:71"><expr pos:start="199:50" pos:end="199:71"><call pos:start="199:50" pos:end="199:71"><name pos:start="199:50" pos:end="199:63">get_bits_count</name><argument_list pos:start="199:64" pos:end="199:71">(<argument pos:start="199:65" pos:end="199:70"><expr pos:start="199:65" pos:end="199:70"><operator pos:start="199:65" pos:end="199:65">&amp;</operator><name pos:start="199:66" pos:end="199:70"><name pos:start="199:66" pos:end="199:66">s</name><operator pos:start="199:67" pos:end="199:68">-&gt;</operator><name pos:start="199:69" pos:end="199:70">gb</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="199:74" pos:end="199:91"><expr pos:start="199:74" pos:end="199:91"><name pos:start="199:74" pos:end="199:91"><name pos:start="199:74" pos:end="199:74">s</name><operator pos:start="199:75" pos:end="199:76">-&gt;</operator><name pos:start="199:77" pos:end="199:78">gb</name><operator pos:start="199:79" pos:end="199:79">.</operator><name pos:start="199:80" pos:end="199:91">size_in_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <if_stmt pos:start="203:21" pos:end="219:21"><if pos:start="203:21" pos:end="211:21">if<condition pos:start="203:23" pos:end="203:69">(<expr pos:start="203:24" pos:end="203:67"><call pos:start="203:24" pos:end="203:45"><name pos:start="203:24" pos:end="203:37">get_bits_count</name><argument_list pos:start="203:38" pos:end="203:45">(<argument pos:start="203:39" pos:end="203:44"><expr pos:start="203:39" pos:end="203:44"><operator pos:start="203:39" pos:end="203:39">&amp;</operator><name pos:start="203:40" pos:end="203:44"><name pos:start="203:40" pos:end="203:40">s</name><operator pos:start="203:41" pos:end="203:42">-&gt;</operator><name pos:start="203:43" pos:end="203:44">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="203:47" pos:end="203:48">==</operator> <name pos:start="203:50" pos:end="203:67"><name pos:start="203:50" pos:end="203:50">s</name><operator pos:start="203:51" pos:end="203:52">-&gt;</operator><name pos:start="203:53" pos:end="203:54">gb</name><operator pos:start="203:55" pos:end="203:55">.</operator><name pos:start="203:56" pos:end="203:67">size_in_bits</name></name></expr> )</condition> <block pos:start="203:71" pos:end="211:21">{<block_content pos:start="205:25" pos:end="209:33">

                        <expr_stmt pos:start="205:25" pos:end="205:129"><expr pos:start="205:25" pos:end="205:128"><call pos:start="205:25" pos:end="205:128"><name pos:start="205:25" pos:end="205:39">ff_er_add_slice</name><argument_list pos:start="205:40" pos:end="205:128">(<argument pos:start="205:41" pos:end="205:41"><expr pos:start="205:41" pos:end="205:41"><name pos:start="205:41" pos:end="205:41">s</name></expr></argument>, <argument pos:start="205:44" pos:end="205:57"><expr pos:start="205:44" pos:end="205:57"><name pos:start="205:44" pos:end="205:57"><name pos:start="205:44" pos:end="205:44">s</name><operator pos:start="205:45" pos:end="205:46">-&gt;</operator><name pos:start="205:47" pos:end="205:57">resync_mb_x</name></name></expr></argument>, <argument pos:start="205:60" pos:end="205:73"><expr pos:start="205:60" pos:end="205:73"><name pos:start="205:60" pos:end="205:73"><name pos:start="205:60" pos:end="205:60">s</name><operator pos:start="205:61" pos:end="205:62">-&gt;</operator><name pos:start="205:63" pos:end="205:73">resync_mb_y</name></name></expr></argument>, <argument pos:start="205:76" pos:end="205:84"><expr pos:start="205:76" pos:end="205:84"><name pos:start="205:76" pos:end="205:82"><name pos:start="205:76" pos:end="205:76">s</name><operator pos:start="205:77" pos:end="205:78">-&gt;</operator><name pos:start="205:79" pos:end="205:82">mb_x</name></name><operator pos:start="205:83" pos:end="205:83">-</operator><literal type="number" pos:start="205:84" pos:end="205:84">1</literal></expr></argument>, <argument pos:start="205:87" pos:end="205:93"><expr pos:start="205:87" pos:end="205:93"><name pos:start="205:87" pos:end="205:93"><name pos:start="205:87" pos:end="205:87">s</name><operator pos:start="205:88" pos:end="205:89">-&gt;</operator><name pos:start="205:90" pos:end="205:93">mb_y</name></name></expr></argument>, <argument pos:start="205:96" pos:end="205:127"><expr pos:start="205:96" pos:end="205:127"><operator pos:start="205:96" pos:end="205:96">(</operator><name pos:start="205:97" pos:end="205:102">AC_END</name><operator pos:start="205:103" pos:end="205:103">|</operator><name pos:start="205:104" pos:end="205:109">DC_END</name><operator pos:start="205:110" pos:end="205:110">|</operator><name pos:start="205:111" pos:end="205:116">MV_END</name><operator pos:start="205:117" pos:end="205:117">)</operator><operator pos:start="205:118" pos:end="205:118">&amp;</operator><name pos:start="205:119" pos:end="205:127">part_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <return pos:start="209:25" pos:end="209:33">return <expr pos:start="209:32" pos:end="209:32"><literal type="number" pos:start="209:32" pos:end="209:32">0</literal></expr>;</return>

                    </block_content>}</block></if><else pos:start="211:22" pos:end="219:21">else<block pos:start="211:26" pos:end="219:21">{<block_content pos:start="213:25" pos:end="217:34">

                        <expr_stmt pos:start="213:25" pos:end="213:127"><expr pos:start="213:25" pos:end="213:126"><call pos:start="213:25" pos:end="213:126"><name pos:start="213:25" pos:end="213:39">ff_er_add_slice</name><argument_list pos:start="213:40" pos:end="213:126">(<argument pos:start="213:41" pos:end="213:41"><expr pos:start="213:41" pos:end="213:41"><name pos:start="213:41" pos:end="213:41">s</name></expr></argument>, <argument pos:start="213:44" pos:end="213:57"><expr pos:start="213:44" pos:end="213:57"><name pos:start="213:44" pos:end="213:57"><name pos:start="213:44" pos:end="213:44">s</name><operator pos:start="213:45" pos:end="213:46">-&gt;</operator><name pos:start="213:47" pos:end="213:57">resync_mb_x</name></name></expr></argument>, <argument pos:start="213:60" pos:end="213:73"><expr pos:start="213:60" pos:end="213:73"><name pos:start="213:60" pos:end="213:73"><name pos:start="213:60" pos:end="213:60">s</name><operator pos:start="213:61" pos:end="213:62">-&gt;</operator><name pos:start="213:63" pos:end="213:73">resync_mb_y</name></name></expr></argument>, <argument pos:start="213:76" pos:end="213:82"><expr pos:start="213:76" pos:end="213:82"><name pos:start="213:76" pos:end="213:82"><name pos:start="213:76" pos:end="213:76">s</name><operator pos:start="213:77" pos:end="213:78">-&gt;</operator><name pos:start="213:79" pos:end="213:82">mb_x</name></name></expr></argument>, <argument pos:start="213:85" pos:end="213:91"><expr pos:start="213:85" pos:end="213:91"><name pos:start="213:85" pos:end="213:91"><name pos:start="213:85" pos:end="213:85">s</name><operator pos:start="213:86" pos:end="213:87">-&gt;</operator><name pos:start="213:88" pos:end="213:91">mb_y</name></name></expr></argument>, <argument pos:start="213:94" pos:end="213:125"><expr pos:start="213:94" pos:end="213:125"><operator pos:start="213:94" pos:end="213:94">(</operator><name pos:start="213:95" pos:end="213:100">AC_END</name><operator pos:start="213:101" pos:end="213:101">|</operator><name pos:start="213:102" pos:end="213:107">DC_END</name><operator pos:start="213:108" pos:end="213:108">|</operator><name pos:start="213:109" pos:end="213:114">MV_END</name><operator pos:start="213:115" pos:end="213:115">)</operator><operator pos:start="213:116" pos:end="213:116">&amp;</operator><name pos:start="213:117" pos:end="213:125">part_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <return pos:start="217:25" pos:end="217:34">return <expr pos:start="217:32" pos:end="217:33"><operator pos:start="217:32" pos:end="217:32">-</operator><literal type="number" pos:start="217:33" pos:end="217:33">1</literal></expr>;</return>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="227:13" pos:end="249:13"><if pos:start="227:13" pos:end="249:13">if<condition pos:start="227:15" pos:end="227:81">(<expr pos:start="227:16" pos:end="227:80"><call pos:start="227:16" pos:end="227:37"><name pos:start="227:16" pos:end="227:29">get_bits_count</name><argument_list pos:start="227:30" pos:end="227:37">(<argument pos:start="227:31" pos:end="227:36"><expr pos:start="227:31" pos:end="227:36"><operator pos:start="227:31" pos:end="227:31">&amp;</operator><name pos:start="227:32" pos:end="227:36"><name pos:start="227:32" pos:end="227:32">s</name><operator pos:start="227:33" pos:end="227:34">-&gt;</operator><name pos:start="227:35" pos:end="227:36">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="227:39" pos:end="227:40">&gt;=</operator> <name pos:start="227:42" pos:end="227:59"><name pos:start="227:42" pos:end="227:42">s</name><operator pos:start="227:43" pos:end="227:44">-&gt;</operator><name pos:start="227:45" pos:end="227:46">gb</name><operator pos:start="227:47" pos:end="227:47">.</operator><name pos:start="227:48" pos:end="227:59">size_in_bits</name></name> <operator pos:start="227:61" pos:end="227:62">&amp;&amp;</operator> <name pos:start="227:64" pos:end="227:77"><name pos:start="227:64" pos:end="227:64">s</name><operator pos:start="227:65" pos:end="227:66">-&gt;</operator><name pos:start="227:67" pos:end="227:77">mb_skip_run</name></name><operator pos:start="227:78" pos:end="227:79">&lt;=</operator><literal type="number" pos:start="227:80" pos:end="227:80">0</literal></expr>)</condition><block pos:start="227:82" pos:end="249:13">{<block_content pos:start="229:17" pos:end="247:17">

                <expr_stmt pos:start="229:17" pos:end="229:89"><expr pos:start="229:17" pos:end="229:88"><call pos:start="229:17" pos:end="229:88"><name pos:start="229:17" pos:end="229:23">tprintf</name><argument_list pos:start="229:24" pos:end="229:88">(<argument pos:start="229:25" pos:end="229:43"><expr pos:start="229:25" pos:end="229:43"><literal type="string" pos:start="229:25" pos:end="229:43">"slice end %d %d\n"</literal></expr></argument>, <argument pos:start="229:46" pos:end="229:67"><expr pos:start="229:46" pos:end="229:67"><call pos:start="229:46" pos:end="229:67"><name pos:start="229:46" pos:end="229:59">get_bits_count</name><argument_list pos:start="229:60" pos:end="229:67">(<argument pos:start="229:61" pos:end="229:66"><expr pos:start="229:61" pos:end="229:66"><operator pos:start="229:61" pos:end="229:61">&amp;</operator><name pos:start="229:62" pos:end="229:66"><name pos:start="229:62" pos:end="229:62">s</name><operator pos:start="229:63" pos:end="229:64">-&gt;</operator><name pos:start="229:65" pos:end="229:66">gb</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="229:70" pos:end="229:87"><expr pos:start="229:70" pos:end="229:87"><name pos:start="229:70" pos:end="229:87"><name pos:start="229:70" pos:end="229:70">s</name><operator pos:start="229:71" pos:end="229:72">-&gt;</operator><name pos:start="229:73" pos:end="229:74">gb</name><operator pos:start="229:75" pos:end="229:75">.</operator><name pos:start="229:76" pos:end="229:87">size_in_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="231:17" pos:end="247:17"><if pos:start="231:17" pos:end="239:17">if<condition pos:start="231:19" pos:end="231:65">(<expr pos:start="231:20" pos:end="231:63"><call pos:start="231:20" pos:end="231:41"><name pos:start="231:20" pos:end="231:33">get_bits_count</name><argument_list pos:start="231:34" pos:end="231:41">(<argument pos:start="231:35" pos:end="231:40"><expr pos:start="231:35" pos:end="231:40"><operator pos:start="231:35" pos:end="231:35">&amp;</operator><name pos:start="231:36" pos:end="231:40"><name pos:start="231:36" pos:end="231:36">s</name><operator pos:start="231:37" pos:end="231:38">-&gt;</operator><name pos:start="231:39" pos:end="231:40">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="231:43" pos:end="231:44">==</operator> <name pos:start="231:46" pos:end="231:63"><name pos:start="231:46" pos:end="231:46">s</name><operator pos:start="231:47" pos:end="231:48">-&gt;</operator><name pos:start="231:49" pos:end="231:50">gb</name><operator pos:start="231:51" pos:end="231:51">.</operator><name pos:start="231:52" pos:end="231:63">size_in_bits</name></name></expr> )</condition><block pos:start="231:66" pos:end="239:17">{<block_content pos:start="233:21" pos:end="237:29">

                    <expr_stmt pos:start="233:21" pos:end="233:125"><expr pos:start="233:21" pos:end="233:124"><call pos:start="233:21" pos:end="233:124"><name pos:start="233:21" pos:end="233:35">ff_er_add_slice</name><argument_list pos:start="233:36" pos:end="233:124">(<argument pos:start="233:37" pos:end="233:37"><expr pos:start="233:37" pos:end="233:37"><name pos:start="233:37" pos:end="233:37">s</name></expr></argument>, <argument pos:start="233:40" pos:end="233:53"><expr pos:start="233:40" pos:end="233:53"><name pos:start="233:40" pos:end="233:53"><name pos:start="233:40" pos:end="233:40">s</name><operator pos:start="233:41" pos:end="233:42">-&gt;</operator><name pos:start="233:43" pos:end="233:53">resync_mb_x</name></name></expr></argument>, <argument pos:start="233:56" pos:end="233:69"><expr pos:start="233:56" pos:end="233:69"><name pos:start="233:56" pos:end="233:69"><name pos:start="233:56" pos:end="233:56">s</name><operator pos:start="233:57" pos:end="233:58">-&gt;</operator><name pos:start="233:59" pos:end="233:69">resync_mb_y</name></name></expr></argument>, <argument pos:start="233:72" pos:end="233:80"><expr pos:start="233:72" pos:end="233:80"><name pos:start="233:72" pos:end="233:78"><name pos:start="233:72" pos:end="233:72">s</name><operator pos:start="233:73" pos:end="233:74">-&gt;</operator><name pos:start="233:75" pos:end="233:78">mb_x</name></name><operator pos:start="233:79" pos:end="233:79">-</operator><literal type="number" pos:start="233:80" pos:end="233:80">1</literal></expr></argument>, <argument pos:start="233:83" pos:end="233:89"><expr pos:start="233:83" pos:end="233:89"><name pos:start="233:83" pos:end="233:89"><name pos:start="233:83" pos:end="233:83">s</name><operator pos:start="233:84" pos:end="233:85">-&gt;</operator><name pos:start="233:86" pos:end="233:89">mb_y</name></name></expr></argument>, <argument pos:start="233:92" pos:end="233:123"><expr pos:start="233:92" pos:end="233:123"><operator pos:start="233:92" pos:end="233:92">(</operator><name pos:start="233:93" pos:end="233:98">AC_END</name><operator pos:start="233:99" pos:end="233:99">|</operator><name pos:start="233:100" pos:end="233:105">DC_END</name><operator pos:start="233:106" pos:end="233:106">|</operator><name pos:start="233:107" pos:end="233:112">MV_END</name><operator pos:start="233:113" pos:end="233:113">)</operator><operator pos:start="233:114" pos:end="233:114">&amp;</operator><name pos:start="233:115" pos:end="233:123">part_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <return pos:start="237:21" pos:end="237:29">return <expr pos:start="237:28" pos:end="237:28"><literal type="number" pos:start="237:28" pos:end="237:28">0</literal></expr>;</return>

                </block_content>}</block></if><else pos:start="239:18" pos:end="247:17">else<block pos:start="239:22" pos:end="247:17">{<block_content pos:start="241:21" pos:end="245:30">

                    <expr_stmt pos:start="241:21" pos:end="241:129"><expr pos:start="241:21" pos:end="241:128"><call pos:start="241:21" pos:end="241:128"><name pos:start="241:21" pos:end="241:35">ff_er_add_slice</name><argument_list pos:start="241:36" pos:end="241:128">(<argument pos:start="241:37" pos:end="241:37"><expr pos:start="241:37" pos:end="241:37"><name pos:start="241:37" pos:end="241:37">s</name></expr></argument>, <argument pos:start="241:40" pos:end="241:53"><expr pos:start="241:40" pos:end="241:53"><name pos:start="241:40" pos:end="241:53"><name pos:start="241:40" pos:end="241:40">s</name><operator pos:start="241:41" pos:end="241:42">-&gt;</operator><name pos:start="241:43" pos:end="241:53">resync_mb_x</name></name></expr></argument>, <argument pos:start="241:56" pos:end="241:69"><expr pos:start="241:56" pos:end="241:69"><name pos:start="241:56" pos:end="241:69"><name pos:start="241:56" pos:end="241:56">s</name><operator pos:start="241:57" pos:end="241:58">-&gt;</operator><name pos:start="241:59" pos:end="241:69">resync_mb_y</name></name></expr></argument>, <argument pos:start="241:72" pos:end="241:78"><expr pos:start="241:72" pos:end="241:78"><name pos:start="241:72" pos:end="241:78"><name pos:start="241:72" pos:end="241:72">s</name><operator pos:start="241:73" pos:end="241:74">-&gt;</operator><name pos:start="241:75" pos:end="241:78">mb_x</name></name></expr></argument>, <argument pos:start="241:81" pos:end="241:87"><expr pos:start="241:81" pos:end="241:87"><name pos:start="241:81" pos:end="241:87"><name pos:start="241:81" pos:end="241:81">s</name><operator pos:start="241:82" pos:end="241:83">-&gt;</operator><name pos:start="241:84" pos:end="241:87">mb_y</name></name></expr></argument>, <argument pos:start="241:90" pos:end="241:127"><expr pos:start="241:90" pos:end="241:127"><operator pos:start="241:90" pos:end="241:90">(</operator><name pos:start="241:91" pos:end="241:98">AC_ERROR</name><operator pos:start="241:99" pos:end="241:99">|</operator><name pos:start="241:100" pos:end="241:107">DC_ERROR</name><operator pos:start="241:108" pos:end="241:108">|</operator><name pos:start="241:109" pos:end="241:116">MV_ERROR</name><operator pos:start="241:117" pos:end="241:117">)</operator><operator pos:start="241:118" pos:end="241:118">&amp;</operator><name pos:start="241:119" pos:end="241:127">part_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <return pos:start="245:21" pos:end="245:30">return <expr pos:start="245:28" pos:end="245:29"><operator pos:start="245:28" pos:end="245:28">-</operator><literal type="number" pos:start="245:29" pos:end="245:29">1</literal></expr>;</return>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



<cpp:if pos:start="257:1" pos:end="257:5">#<cpp:directive pos:start="257:2" pos:end="257:3">if</cpp:directive> <expr pos:start="257:5" pos:end="257:5"><literal type="number" pos:start="257:5" pos:end="257:5">0</literal></expr></cpp:if>

    for(;s-&gt;mb_y &lt; s-&gt;mb_height; s-&gt;mb_y++){

        for(;s-&gt;mb_x &lt; s-&gt;mb_width; s-&gt;mb_x++){

            int ret= decode_mb(h);

            

            hl_decode_mb(h);



            if(ret&lt;0){

                fprintf(stderr, "error while decoding MB %d %d\n", s-&gt;mb_x, s-&gt;mb_y);

                ff_er_add_slice(s, s-&gt;resync_mb_x, s-&gt;resync_mb_y, s-&gt;mb_x, s-&gt;mb_y, (AC_ERROR|DC_ERROR|MV_ERROR)&amp;part_mask);



                return -1;

            }

        

            if(++s-&gt;mb_x &gt;= s-&gt;mb_width){

                s-&gt;mb_x=0;

                if(++s-&gt;mb_y &gt;= s-&gt;mb_height){

                    if(get_bits_count(s-&gt;gb) == s-&gt;gb.size_in_bits){

                        ff_er_add_slice(s, s-&gt;resync_mb_x, s-&gt;resync_mb_y, s-&gt;mb_x-1, s-&gt;mb_y, (AC_END|DC_END|MV_END)&amp;part_mask);



                        return 0;

                    }else{

                        ff_er_add_slice(s, s-&gt;resync_mb_x, s-&gt;resync_mb_y, s-&gt;mb_x, s-&gt;mb_y, (AC_END|DC_END|MV_END)&amp;part_mask);



                        return -1;

                    }

                }

            }

        

            if(get_bits_count(s-&gt;?gb) &gt;= s-&gt;gb?.size_in_bits){

                if(get_bits_count(s-&gt;gb) == s-&gt;gb.size_in_bits){

                    ff_er_add_slice(s, s-&gt;resync_mb_x, s-&gt;resync_mb_y, s-&gt;mb_x-1, s-&gt;mb_y, (AC_END|DC_END|MV_END)&amp;part_mask);



                    return 0;

                }else{

                    ff_er_add_slice(s, s-&gt;resync_mb_x, s-&gt;resync_mb_y, s-&gt;mb_x, s-&gt;mb_y, (AC_ERROR|DC_ERROR|MV_ERROR)&amp;part_mask);



                    return -1;

                }

            }

        }

        s-&gt;mb_x=0;

        ff_draw_horiz_band(s, 16*s-&gt;mb_y, 16);

    }

<cpp:endif pos:start="345:1" pos:end="345:6">#<cpp:directive pos:start="345:2" pos:end="345:6">endif</cpp:directive></cpp:endif>

    <return pos:start="347:5" pos:end="347:14">return <expr pos:start="347:12" pos:end="347:13"><operator pos:start="347:12" pos:end="347:12">-</operator><literal type="number" pos:start="347:13" pos:end="347:13">1</literal></expr>;</return> <comment type="line" pos:start="347:16" pos:end="347:28">//not reached</comment>

</block_content>}</block></function>
</unit>
