<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15907.c" pos:tabs="8"><function pos:start="1:1" pos:end="121:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">vc9_decode_init</name><parameter_list pos:start="1:27" pos:end="1:49">(<parameter pos:start="1:28" pos:end="1:48"><decl pos:start="1:28" pos:end="1:48"><type pos:start="1:28" pos:end="1:43"><name pos:start="1:28" pos:end="1:41">AVCodecContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:48">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="121:1">{<block_content pos:start="5:5" pos:end="119:13">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">VC9Context</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">v</name> <init pos:start="5:19" pos:end="5:36">= <expr pos:start="5:21" pos:end="5:36"><name pos:start="5:21" pos:end="5:36"><name pos:start="5:21" pos:end="5:25">avctx</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:17">GetBitContext</name></type> <name pos:start="7:19" pos:end="7:20">gb</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="11:63"><if pos:start="11:5" pos:end="11:63">if <condition pos:start="11:8" pos:end="11:52">(<expr pos:start="11:9" pos:end="11:51"><operator pos:start="11:9" pos:end="11:9">!</operator><name pos:start="11:10" pos:end="11:30"><name pos:start="11:10" pos:end="11:14">avctx</name><operator pos:start="11:15" pos:end="11:16">-&gt;</operator><name pos:start="11:17" pos:end="11:30">extradata_size</name></name> <operator pos:start="11:32" pos:end="11:33">||</operator> <operator pos:start="11:35" pos:end="11:35">!</operator><name pos:start="11:36" pos:end="11:51"><name pos:start="11:36" pos:end="11:40">avctx</name><operator pos:start="11:41" pos:end="11:42">-&gt;</operator><name pos:start="11:43" pos:end="11:51">extradata</name></name></expr>)</condition><block type="pseudo" pos:start="11:54" pos:end="11:63"><block_content pos:start="11:54" pos:end="11:63"> <return pos:start="11:54" pos:end="11:63">return <expr pos:start="11:61" pos:end="11:62"><operator pos:start="11:61" pos:end="11:61">-</operator><literal type="number" pos:start="11:62" pos:end="11:62">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:37"><expr pos:start="13:5" pos:end="13:36"><name pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:9">avctx</name><operator pos:start="13:10" pos:end="13:11">-&gt;</operator><name pos:start="13:12" pos:end="13:18">pix_fmt</name></name> <operator pos:start="13:20" pos:end="13:20">=</operator> <name pos:start="13:22" pos:end="13:36">PIX_FMT_YUV420P</name></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:21"><expr pos:start="15:5" pos:end="15:20"><name pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:5">v</name><operator pos:start="15:6" pos:end="15:7">-&gt;</operator><name pos:start="15:8" pos:end="15:12">avctx</name></name> <operator pos:start="15:14" pos:end="15:14">=</operator> <name pos:start="15:16" pos:end="15:20">avctx</name></expr>;</expr_stmt>



    <if_stmt pos:start="19:5" pos:end="19:38"><if pos:start="19:5" pos:end="19:38">if <condition pos:start="19:8" pos:end="19:27">(<expr pos:start="19:9" pos:end="19:26"><call pos:start="19:9" pos:end="19:22"><name pos:start="19:9" pos:end="19:19">init_common</name><argument_list pos:start="19:20" pos:end="19:22">(<argument pos:start="19:21" pos:end="19:21"><expr pos:start="19:21" pos:end="19:21"><name pos:start="19:21" pos:end="19:21">v</name></expr></argument>)</argument_list></call> <operator pos:start="19:24" pos:end="19:24">&lt;</operator> <literal type="number" pos:start="19:26" pos:end="19:26">0</literal></expr>)</condition><block type="pseudo" pos:start="19:29" pos:end="19:38"><block_content pos:start="19:29" pos:end="19:38"> <return pos:start="19:29" pos:end="19:38">return <expr pos:start="19:36" pos:end="19:37"><operator pos:start="19:36" pos:end="19:36">-</operator><literal type="number" pos:start="19:37" pos:end="19:37">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="23:5" pos:end="69:5"><if pos:start="23:5" pos:end="69:5">if <condition pos:start="23:8" pos:end="23:41">(<expr pos:start="23:9" pos:end="23:40"><name pos:start="23:9" pos:end="23:23"><name pos:start="23:9" pos:end="23:13">avctx</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:23">codec_id</name></name> <operator pos:start="23:25" pos:end="23:26">==</operator> <name pos:start="23:28" pos:end="23:40">CODEC_ID_WMV3</name></expr>)</condition>

    <block pos:start="25:5" pos:end="69:5">{<block_content pos:start="27:9" pos:end="67:9">

        <decl_stmt pos:start="27:9" pos:end="27:22"><decl pos:start="27:9" pos:end="27:21"><type pos:start="27:9" pos:end="27:11"><name pos:start="27:9" pos:end="27:11">int</name></type> <name pos:start="27:13" pos:end="27:17">count</name> <init pos:start="27:19" pos:end="27:21">= <expr pos:start="27:21" pos:end="27:21"><literal type="number" pos:start="27:21" pos:end="27:21">0</literal></expr></init></decl>;</decl_stmt>



	<comment type="line" pos:start="31:9" pos:end="31:72">// looks like WMV3 has a sequence header stored in the extradata</comment>

	<comment type="line" pos:start="33:9" pos:end="33:65">// advanced sequence header may be before the first frame</comment>

	<comment type="line" pos:start="35:9" pos:end="35:72">// the last byte of the extradata is a version number, 1 for the</comment>

	<comment type="line" pos:start="37:9" pos:end="37:32">// samples we can decode</comment>



	<expr_stmt pos:start="41:9" pos:end="41:68"><expr pos:start="41:9" pos:end="41:67"><call pos:start="41:9" pos:end="41:67"><name pos:start="41:9" pos:end="41:21">init_get_bits</name><argument_list pos:start="41:22" pos:end="41:67">(<argument pos:start="41:23" pos:end="41:25"><expr pos:start="41:23" pos:end="41:25"><operator pos:start="41:23" pos:end="41:23">&amp;</operator><name pos:start="41:24" pos:end="41:25">gb</name></expr></argument>, <argument pos:start="41:28" pos:end="41:43"><expr pos:start="41:28" pos:end="41:43"><name pos:start="41:28" pos:end="41:43"><name pos:start="41:28" pos:end="41:32">avctx</name><operator pos:start="41:33" pos:end="41:34">-&gt;</operator><name pos:start="41:35" pos:end="41:43">extradata</name></name></expr></argument>, <argument pos:start="41:46" pos:end="41:66"><expr pos:start="41:46" pos:end="41:66"><name pos:start="41:46" pos:end="41:66"><name pos:start="41:46" pos:end="41:50">avctx</name><operator pos:start="41:51" pos:end="41:52">-&gt;</operator><name pos:start="41:53" pos:end="41:66">extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	

	<expr_stmt pos:start="45:9" pos:end="45:43"><expr pos:start="45:9" pos:end="45:42"><call pos:start="45:9" pos:end="45:42"><name pos:start="45:9" pos:end="45:30">decode_sequence_header</name><argument_list pos:start="45:31" pos:end="45:42">(<argument pos:start="45:32" pos:end="45:36"><expr pos:start="45:32" pos:end="45:36"><name pos:start="45:32" pos:end="45:36">avctx</name></expr></argument>, <argument pos:start="45:39" pos:end="45:41"><expr pos:start="45:39" pos:end="45:41"><operator pos:start="45:39" pos:end="45:39">&amp;</operator><name pos:start="45:40" pos:end="45:41">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<expr_stmt pos:start="49:9" pos:end="49:62"><expr pos:start="49:9" pos:end="49:61"><name pos:start="49:9" pos:end="49:13">count</name> <operator pos:start="49:15" pos:end="49:15">=</operator> <name pos:start="49:17" pos:end="49:37"><name pos:start="49:17" pos:end="49:21">avctx</name><operator pos:start="49:22" pos:end="49:23">-&gt;</operator><name pos:start="49:24" pos:end="49:37">extradata_size</name></name><operator pos:start="49:38" pos:end="49:38">*</operator><literal type="number" pos:start="49:39" pos:end="49:41">8</literal> <operator pos:start="49:41" pos:end="49:41">-</operator> <call pos:start="49:43" pos:end="49:61"><name pos:start="49:43" pos:end="49:56">get_bits_count</name><argument_list pos:start="49:57" pos:end="49:61">(<argument pos:start="49:58" pos:end="49:60"><expr pos:start="49:58" pos:end="49:60"><operator pos:start="49:58" pos:end="49:58">&amp;</operator><name pos:start="49:59" pos:end="49:60">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="51:9" pos:end="67:9"><if pos:start="51:9" pos:end="59:9">if <condition pos:start="51:12" pos:end="51:20">(<expr pos:start="51:13" pos:end="51:19"><name pos:start="51:13" pos:end="51:17">count</name><operator pos:start="51:18" pos:end="51:18">&gt;</operator><literal type="number" pos:start="51:19" pos:end="51:19">0</literal></expr>)</condition>

	<block pos:start="53:9" pos:end="59:9">{<block_content pos:start="55:13" pos:end="57:44">

    	    <expr_stmt pos:start="55:13" pos:end="57:44"><expr pos:start="55:13" pos:end="57:43"><call pos:start="55:13" pos:end="57:43"><name pos:start="55:13" pos:end="55:18">av_log</name><argument_list pos:start="55:19" pos:end="57:43">(<argument pos:start="55:20" pos:end="55:24"><expr pos:start="55:20" pos:end="55:24"><name pos:start="55:20" pos:end="55:24">avctx</name></expr></argument>, <argument pos:start="55:27" pos:end="55:37"><expr pos:start="55:27" pos:end="55:37"><name pos:start="55:27" pos:end="55:37">AV_LOG_INFO</name></expr></argument>, <argument pos:start="55:40" pos:end="55:78"><expr pos:start="55:40" pos:end="55:78"><literal type="string" pos:start="55:40" pos:end="55:78">"Extra data: %i bits left, value: %X\n"</literal></expr></argument>,

               <argument pos:start="57:16" pos:end="57:20"><expr pos:start="57:16" pos:end="57:20"><name pos:start="57:16" pos:end="57:20">count</name></expr></argument>, <argument pos:start="57:23" pos:end="57:42"><expr pos:start="57:23" pos:end="57:42"><call pos:start="57:23" pos:end="57:42"><name pos:start="57:23" pos:end="57:30">get_bits</name><argument_list pos:start="57:31" pos:end="57:42">(<argument pos:start="57:32" pos:end="57:34"><expr pos:start="57:32" pos:end="57:34"><operator pos:start="57:32" pos:end="57:32">&amp;</operator><name pos:start="57:33" pos:end="57:34">gb</name></expr></argument>, <argument pos:start="57:37" pos:end="57:41"><expr pos:start="57:37" pos:end="57:41"><name pos:start="57:37" pos:end="57:41">count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if>

	<else pos:start="61:9" pos:end="67:9">else

	<block pos:start="63:9" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:77">

    	    <expr_stmt pos:start="65:13" pos:end="65:77"><expr pos:start="65:13" pos:end="65:76"><call pos:start="65:13" pos:end="65:76"><name pos:start="65:13" pos:end="65:18">av_log</name><argument_list pos:start="65:19" pos:end="65:76">(<argument pos:start="65:20" pos:end="65:24"><expr pos:start="65:20" pos:end="65:24"><name pos:start="65:20" pos:end="65:24">avctx</name></expr></argument>, <argument pos:start="65:27" pos:end="65:37"><expr pos:start="65:27" pos:end="65:37"><name pos:start="65:27" pos:end="65:37">AV_LOG_INFO</name></expr></argument>, <argument pos:start="65:40" pos:end="65:67"><expr pos:start="65:40" pos:end="65:67"><literal type="string" pos:start="65:40" pos:end="65:67">"Read %i bits in overflow\n"</literal></expr></argument>, <argument pos:start="65:70" pos:end="65:75"><expr pos:start="65:70" pos:end="65:75"><operator pos:start="65:70" pos:end="65:70">-</operator><name pos:start="65:71" pos:end="65:75">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="73:5" pos:end="73:34">/* Done with header parsing */</comment>

    <comment type="line" pos:start="75:5" pos:end="75:37">//FIXME I feel like this is wrong</comment>

    <expr_stmt pos:start="77:5" pos:end="77:45"><expr pos:start="77:5" pos:end="77:44"><name pos:start="77:5" pos:end="77:15"><name pos:start="77:5" pos:end="77:5">v</name><operator pos:start="77:6" pos:end="77:7">-&gt;</operator><name pos:start="77:8" pos:end="77:15">width_mb</name></name> <operator pos:start="77:17" pos:end="77:17">=</operator> <operator pos:start="77:19" pos:end="77:19">(</operator><name pos:start="77:20" pos:end="77:37"><name pos:start="77:20" pos:end="77:24">avctx</name><operator pos:start="77:25" pos:end="77:26">-&gt;</operator><name pos:start="77:27" pos:end="77:37">coded_width</name></name><operator pos:start="77:38" pos:end="77:38">+</operator><literal type="number" pos:start="77:39" pos:end="77:40">15</literal><operator pos:start="77:41" pos:end="77:41">)</operator><operator pos:start="77:42" pos:end="77:43">&gt;&gt;</operator><literal type="number" pos:start="77:44" pos:end="77:44">4</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:47"><expr pos:start="79:5" pos:end="79:46"><name pos:start="79:5" pos:end="79:16"><name pos:start="79:5" pos:end="79:5">v</name><operator pos:start="79:6" pos:end="79:7">-&gt;</operator><name pos:start="79:8" pos:end="79:16">height_mb</name></name> <operator pos:start="79:18" pos:end="79:18">=</operator> <operator pos:start="79:20" pos:end="79:20">(</operator><name pos:start="79:21" pos:end="79:39"><name pos:start="79:21" pos:end="79:25">avctx</name><operator pos:start="79:26" pos:end="79:27">-&gt;</operator><name pos:start="79:28" pos:end="79:39">coded_height</name></name><operator pos:start="79:40" pos:end="79:40">+</operator><literal type="number" pos:start="79:41" pos:end="79:42">15</literal><operator pos:start="79:43" pos:end="79:43">)</operator><operator pos:start="79:44" pos:end="79:45">&gt;&gt;</operator><literal type="number" pos:start="79:46" pos:end="79:46">4</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="83:5" pos:end="83:31">/* Allocate mb bitplanes */</comment>

    <expr_stmt pos:start="85:5" pos:end="85:73"><expr pos:start="85:5" pos:end="85:72"><name pos:start="85:5" pos:end="85:23"><name pos:start="85:5" pos:end="85:5">v</name><operator pos:start="85:6" pos:end="85:7">-&gt;</operator><name pos:start="85:8" pos:end="85:23">mv_type_mb_plane</name></name> <operator pos:start="85:25" pos:end="85:25">=</operator> <operator pos:start="85:27" pos:end="85:27">(</operator><name pos:start="85:28" pos:end="85:34">uint8_t</name> <operator pos:start="85:36" pos:end="85:36">*</operator><operator pos:start="85:37" pos:end="85:37">)</operator><call pos:start="85:38" pos:end="85:72"><name pos:start="85:38" pos:end="85:46">av_malloc</name><argument_list pos:start="85:47" pos:end="85:72">(<argument pos:start="85:48" pos:end="85:71"><expr pos:start="85:48" pos:end="85:71"><name pos:start="85:48" pos:end="85:58"><name pos:start="85:48" pos:end="85:48">v</name><operator pos:start="85:49" pos:end="85:50">-&gt;</operator><name pos:start="85:51" pos:end="85:58">width_mb</name></name><operator pos:start="85:59" pos:end="85:59">*</operator><name pos:start="85:60" pos:end="85:71"><name pos:start="85:60" pos:end="85:60">v</name><operator pos:start="85:61" pos:end="85:62">-&gt;</operator><name pos:start="85:63" pos:end="85:71">height_mb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="87:5" pos:end="87:40"><if pos:start="87:5" pos:end="87:40">if <condition pos:start="87:8" pos:end="87:29">(<expr pos:start="87:9" pos:end="87:28"><operator pos:start="87:9" pos:end="87:9">!</operator><name pos:start="87:10" pos:end="87:28"><name pos:start="87:10" pos:end="87:10">v</name><operator pos:start="87:11" pos:end="87:12">-&gt;</operator><name pos:start="87:13" pos:end="87:28">mv_type_mb_plane</name></name></expr>)</condition><block type="pseudo" pos:start="87:31" pos:end="87:40"><block_content pos:start="87:31" pos:end="87:40"> <return pos:start="87:31" pos:end="87:40">return <expr pos:start="87:38" pos:end="87:39"><operator pos:start="87:38" pos:end="87:38">-</operator><literal type="number" pos:start="87:39" pos:end="87:39">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:70"><expr pos:start="89:5" pos:end="89:69"><name pos:start="89:5" pos:end="89:20"><name pos:start="89:5" pos:end="89:5">v</name><operator pos:start="89:6" pos:end="89:7">-&gt;</operator><name pos:start="89:8" pos:end="89:20">skip_mb_plane</name></name> <operator pos:start="89:22" pos:end="89:22">=</operator> <operator pos:start="89:24" pos:end="89:24">(</operator><name pos:start="89:25" pos:end="89:31">uint8_t</name> <operator pos:start="89:33" pos:end="89:33">*</operator><operator pos:start="89:34" pos:end="89:34">)</operator><call pos:start="89:35" pos:end="89:69"><name pos:start="89:35" pos:end="89:43">av_malloc</name><argument_list pos:start="89:44" pos:end="89:69">(<argument pos:start="89:45" pos:end="89:68"><expr pos:start="89:45" pos:end="89:68"><name pos:start="89:45" pos:end="89:55"><name pos:start="89:45" pos:end="89:45">v</name><operator pos:start="89:46" pos:end="89:47">-&gt;</operator><name pos:start="89:48" pos:end="89:55">width_mb</name></name><operator pos:start="89:56" pos:end="89:56">*</operator><name pos:start="89:57" pos:end="89:68"><name pos:start="89:57" pos:end="89:57">v</name><operator pos:start="89:58" pos:end="89:59">-&gt;</operator><name pos:start="89:60" pos:end="89:68">height_mb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="91:5" pos:end="91:37"><if pos:start="91:5" pos:end="91:37">if <condition pos:start="91:8" pos:end="91:26">(<expr pos:start="91:9" pos:end="91:25"><operator pos:start="91:9" pos:end="91:9">!</operator><name pos:start="91:10" pos:end="91:25"><name pos:start="91:10" pos:end="91:10">v</name><operator pos:start="91:11" pos:end="91:12">-&gt;</operator><name pos:start="91:13" pos:end="91:25">skip_mb_plane</name></name></expr>)</condition><block type="pseudo" pos:start="91:28" pos:end="91:37"><block_content pos:start="91:28" pos:end="91:37"> <return pos:start="91:28" pos:end="91:37">return <expr pos:start="91:35" pos:end="91:36"><operator pos:start="91:35" pos:end="91:35">-</operator><literal type="number" pos:start="91:36" pos:end="91:36">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:72"><expr pos:start="93:5" pos:end="93:71"><name pos:start="93:5" pos:end="93:22"><name pos:start="93:5" pos:end="93:5">v</name><operator pos:start="93:6" pos:end="93:7">-&gt;</operator><name pos:start="93:8" pos:end="93:22">direct_mb_plane</name></name> <operator pos:start="93:24" pos:end="93:24">=</operator> <operator pos:start="93:26" pos:end="93:26">(</operator><name pos:start="93:27" pos:end="93:33">uint8_t</name> <operator pos:start="93:35" pos:end="93:35">*</operator><operator pos:start="93:36" pos:end="93:36">)</operator><call pos:start="93:37" pos:end="93:71"><name pos:start="93:37" pos:end="93:45">av_malloc</name><argument_list pos:start="93:46" pos:end="93:71">(<argument pos:start="93:47" pos:end="93:70"><expr pos:start="93:47" pos:end="93:70"><name pos:start="93:47" pos:end="93:57"><name pos:start="93:47" pos:end="93:47">v</name><operator pos:start="93:48" pos:end="93:49">-&gt;</operator><name pos:start="93:50" pos:end="93:57">width_mb</name></name><operator pos:start="93:58" pos:end="93:58">*</operator><name pos:start="93:59" pos:end="93:70"><name pos:start="93:59" pos:end="93:59">v</name><operator pos:start="93:60" pos:end="93:61">-&gt;</operator><name pos:start="93:62" pos:end="93:70">height_mb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="95:5" pos:end="100:0"><if pos:start="95:5" pos:end="100:0">if <condition pos:start="95:8" pos:end="95:28">(<expr pos:start="95:9" pos:end="95:27"><operator pos:start="95:9" pos:end="95:9">!</operator><name pos:start="95:10" pos:end="95:27"><name pos:start="95:10" pos:end="95:10">v</name><operator pos:start="95:11" pos:end="95:12">-&gt;</operator><name pos:start="95:13" pos:end="95:27">direct_mb_plane</name></name></expr>)</condition><block type="pseudo" pos:start="95:30" pos:end="100:0"><block_content pos:start="95:30" pos:end="100:0"> <return pos:start="95:30" pos:end="100:0">return <expr pos:start="95:37" pos:end="95:38"><operator pos:start="95:37" pos:end="95:37">-</operator><literal type="number" pos:start="95:38" pos:end="95:38">1</literal></expr>;</return></block_content></block></if></if_stmt>



<cpp:if pos:start="99:1" pos:end="99:24">#<cpp:directive pos:start="99:2" pos:end="99:3">if</cpp:directive> <expr pos:start="99:5" pos:end="99:24"><name pos:start="99:5" pos:end="99:24">HAS_ADVANCED_PROFILE</name></expr></cpp:if>

    <if_stmt pos:start="101:5" pos:end="116:0"><if pos:start="101:5" pos:end="116:0">if <condition pos:start="101:8" pos:end="101:34">(<expr pos:start="101:9" pos:end="101:33"><name pos:start="101:9" pos:end="101:18"><name pos:start="101:9" pos:end="101:9">v</name><operator pos:start="101:10" pos:end="101:11">-&gt;</operator><name pos:start="101:12" pos:end="101:18">profile</name></name> <operator pos:start="101:20" pos:end="101:20">&gt;</operator> <name pos:start="101:22" pos:end="101:33">PROFILE_MAIN</name></expr>)</condition>

    <block pos:start="103:5" pos:end="116:0">{<block_content pos:start="105:9" pos:end="111:41">

        <expr_stmt pos:start="105:9" pos:end="105:77"><expr pos:start="105:9" pos:end="105:76"><name pos:start="105:9" pos:end="105:27"><name pos:start="105:9" pos:end="105:9">v</name><operator pos:start="105:10" pos:end="105:11">-&gt;</operator><name pos:start="105:12" pos:end="105:27">over_flags_plane</name></name> <operator pos:start="105:29" pos:end="105:29">=</operator> <operator pos:start="105:31" pos:end="105:31">(</operator><name pos:start="105:32" pos:end="105:38">uint8_t</name> <operator pos:start="105:40" pos:end="105:40">*</operator><operator pos:start="105:41" pos:end="105:41">)</operator><call pos:start="105:42" pos:end="105:76"><name pos:start="105:42" pos:end="105:50">av_malloc</name><argument_list pos:start="105:51" pos:end="105:76">(<argument pos:start="105:52" pos:end="105:75"><expr pos:start="105:52" pos:end="105:75"><name pos:start="105:52" pos:end="105:62"><name pos:start="105:52" pos:end="105:52">v</name><operator pos:start="105:53" pos:end="105:54">-&gt;</operator><name pos:start="105:55" pos:end="105:62">width_mb</name></name><operator pos:start="105:63" pos:end="105:63">*</operator><name pos:start="105:64" pos:end="105:75"><name pos:start="105:64" pos:end="105:64">v</name><operator pos:start="105:65" pos:end="105:66">-&gt;</operator><name pos:start="105:67" pos:end="105:75">height_mb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="107:9" pos:end="107:44"><if pos:start="107:9" pos:end="107:44">if <condition pos:start="107:12" pos:end="107:33">(<expr pos:start="107:13" pos:end="107:32"><operator pos:start="107:13" pos:end="107:13">!</operator><name pos:start="107:14" pos:end="107:32"><name pos:start="107:14" pos:end="107:14">v</name><operator pos:start="107:15" pos:end="107:16">-&gt;</operator><name pos:start="107:17" pos:end="107:32">over_flags_plane</name></name></expr>)</condition><block type="pseudo" pos:start="107:35" pos:end="107:44"><block_content pos:start="107:35" pos:end="107:44"> <return pos:start="107:35" pos:end="107:44">return <expr pos:start="107:42" pos:end="107:43"><operator pos:start="107:42" pos:end="107:42">-</operator><literal type="number" pos:start="107:43" pos:end="107:43">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:74"><expr pos:start="109:9" pos:end="109:73"><name pos:start="109:9" pos:end="109:24"><name pos:start="109:9" pos:end="109:9">v</name><operator pos:start="109:10" pos:end="109:11">-&gt;</operator><name pos:start="109:12" pos:end="109:24">ac_pred_plane</name></name> <operator pos:start="109:26" pos:end="109:26">=</operator> <operator pos:start="109:28" pos:end="109:28">(</operator><name pos:start="109:29" pos:end="109:35">uint8_t</name> <operator pos:start="109:37" pos:end="109:37">*</operator><operator pos:start="109:38" pos:end="109:38">)</operator><call pos:start="109:39" pos:end="109:73"><name pos:start="109:39" pos:end="109:47">av_malloc</name><argument_list pos:start="109:48" pos:end="109:73">(<argument pos:start="109:49" pos:end="109:72"><expr pos:start="109:49" pos:end="109:72"><name pos:start="109:49" pos:end="109:59"><name pos:start="109:49" pos:end="109:49">v</name><operator pos:start="109:50" pos:end="109:51">-&gt;</operator><name pos:start="109:52" pos:end="109:59">width_mb</name></name><operator pos:start="109:60" pos:end="109:60">*</operator><name pos:start="109:61" pos:end="109:72"><name pos:start="109:61" pos:end="109:61">v</name><operator pos:start="109:62" pos:end="109:63">-&gt;</operator><name pos:start="109:64" pos:end="109:72">height_mb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="111:9" pos:end="111:41"><if pos:start="111:9" pos:end="111:41">if <condition pos:start="111:12" pos:end="111:30">(<expr pos:start="111:13" pos:end="111:29"><operator pos:start="111:13" pos:end="111:13">!</operator><name pos:start="111:14" pos:end="111:29"><name pos:start="111:14" pos:end="111:14">v</name><operator pos:start="111:15" pos:end="111:16">-&gt;</operator><name pos:start="111:17" pos:end="111:29">ac_pred_plane</name></name></expr>)</condition><block type="pseudo" pos:start="111:32" pos:end="111:41"><block_content pos:start="111:32" pos:end="111:41"> <return pos:start="111:32" pos:end="111:41">return <expr pos:start="111:39" pos:end="111:40"><operator pos:start="111:39" pos:end="111:39">-</operator><literal type="number" pos:start="111:40" pos:end="111:40">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="115:1" pos:end="115:6">#<cpp:directive pos:start="115:2" pos:end="115:6">endif</cpp:directive></cpp:endif>



    <return pos:start="119:5" pos:end="119:13">return <expr pos:start="119:12" pos:end="119:12"><literal type="number" pos:start="119:12" pos:end="119:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
