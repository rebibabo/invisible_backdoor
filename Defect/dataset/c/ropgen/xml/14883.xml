<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14883.c" pos:tabs="8"><function pos:start="1:1" pos:end="179:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:22">write_cont</name> <parameter_list pos:start="1:24" pos:end="1:68">(<parameter pos:start="1:25" pos:end="1:36"><decl pos:start="1:25" pos:end="1:36"><type pos:start="1:25" pos:end="1:36"><name pos:start="1:25" pos:end="1:28">void</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:36">opaque</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:52"><decl pos:start="1:39" pos:end="1:52"><type pos:start="1:39" pos:end="1:52"><name pos:start="1:39" pos:end="1:46">uint32_t</name></type> <name pos:start="1:48" pos:end="1:52">nport</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:67"><decl pos:start="1:55" pos:end="1:67"><type pos:start="1:55" pos:end="1:67"><name pos:start="1:55" pos:end="1:62">uint32_t</name></type> <name pos:start="1:64" pos:end="1:67">data</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="179:1">{<block_content pos:start="5:5" pos:end="177:13">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:19">dma_cont</name></name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:22">d</name> <init pos:start="5:24" pos:end="5:31">= <expr pos:start="5:26" pos:end="5:31"><name pos:start="5:26" pos:end="5:31">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">iport</name></decl>, <decl pos:start="7:16" pos:end="7:20"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:16" pos:end="7:20">ichan</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:40"><expr pos:start="11:5" pos:end="11:39"><name pos:start="11:5" pos:end="11:9">iport</name> <operator pos:start="11:11" pos:end="11:11">=</operator> <operator pos:start="11:13" pos:end="11:13">(</operator><name pos:start="11:14" pos:end="11:18">nport</name> <operator pos:start="11:20" pos:end="11:21">&gt;&gt;</operator> <name pos:start="11:23" pos:end="11:31"><name pos:start="11:23" pos:end="11:23">d</name><operator pos:start="11:24" pos:end="11:25">-&gt;</operator><name pos:start="11:26" pos:end="11:31">dshift</name></name><operator pos:start="11:32" pos:end="11:32">)</operator> <operator pos:start="11:34" pos:end="11:34">&amp;</operator> <literal type="number" pos:start="11:36" pos:end="11:39">0x0f</literal></expr>;</expr_stmt>

    <switch pos:start="13:5" pos:end="160:0">switch <condition pos:start="13:12" pos:end="13:18">(<expr pos:start="13:13" pos:end="13:17"><name pos:start="13:13" pos:end="13:17">iport</name></expr>)</condition> <block pos:start="13:20" pos:end="160:0">{<block_content pos:start="15:5" pos:end="153:19">

    <case pos:start="15:5" pos:end="15:11">case <expr pos:start="15:10" pos:end="15:10"><literal type="number" pos:start="15:10" pos:end="15:10">8</literal></expr>:</case>                     <comment type="block" pos:start="15:33" pos:end="15:45">/* command */</comment>

        <if_stmt pos:start="17:9" pos:end="23:9"><if pos:start="17:9" pos:end="23:9">if <condition pos:start="17:12" pos:end="17:47">(<expr pos:start="17:13" pos:end="17:46"><name pos:start="17:13" pos:end="17:16">data</name> <operator pos:start="17:18" pos:end="17:19">&amp;&amp;</operator> <operator pos:start="17:21" pos:end="17:21">(</operator><name pos:start="17:22" pos:end="17:25">data</name> <operator pos:start="17:27" pos:end="17:27">|</operator> <name pos:start="17:29" pos:end="17:45">CMD_NOT_SUPPORTED</name><operator pos:start="17:46" pos:end="17:46">)</operator></expr>)</condition> <block pos:start="17:49" pos:end="23:9">{<block_content pos:start="19:13" pos:end="21:23">

            <expr_stmt pos:start="19:13" pos:end="19:54"><expr pos:start="19:13" pos:end="19:53"><call pos:start="19:13" pos:end="19:53"><name pos:start="19:13" pos:end="19:15">log</name> <argument_list pos:start="19:17" pos:end="19:53">(<argument pos:start="19:18" pos:end="19:46"><expr pos:start="19:18" pos:end="19:46"><literal type="string" pos:start="19:18" pos:end="19:46">"command %#x not supported\n"</literal></expr></argument>, <argument pos:start="19:49" pos:end="19:52"><expr pos:start="19:49" pos:end="19:52"><name pos:start="19:49" pos:end="19:52">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="21:13" pos:end="21:23">goto <name pos:start="21:18" pos:end="21:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:26"><expr pos:start="25:9" pos:end="25:25"><name pos:start="25:9" pos:end="25:18"><name pos:start="25:9" pos:end="25:9">d</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:18">command</name></name> <operator pos:start="25:20" pos:end="25:20">=</operator> <name pos:start="25:22" pos:end="25:25">data</name></expr>;</expr_stmt>

        <break pos:start="27:9" pos:end="27:14">break;</break>



    <case pos:start="31:5" pos:end="31:11">case <expr pos:start="31:10" pos:end="31:10"><literal type="number" pos:start="31:10" pos:end="31:10">9</literal></expr>:</case>

        <expr_stmt pos:start="33:9" pos:end="33:25"><expr pos:start="33:9" pos:end="33:24"><name pos:start="33:9" pos:end="33:13">ichan</name> <operator pos:start="33:15" pos:end="33:15">=</operator> <name pos:start="33:17" pos:end="33:20">data</name> <operator pos:start="33:22" pos:end="33:22">&amp;</operator> <literal type="number" pos:start="33:24" pos:end="33:24">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="35:9" pos:end="45:9"><if pos:start="35:9" pos:end="39:9">if <condition pos:start="35:12" pos:end="35:21">(<expr pos:start="35:13" pos:end="35:20"><name pos:start="35:13" pos:end="35:16">data</name> <operator pos:start="35:18" pos:end="35:18">&amp;</operator> <literal type="number" pos:start="35:20" pos:end="35:20">4</literal></expr>)</condition> <block pos:start="35:23" pos:end="39:9">{<block_content pos:start="37:13" pos:end="37:42">

            <expr_stmt pos:start="37:13" pos:end="37:42"><expr pos:start="37:13" pos:end="37:41"><name pos:start="37:13" pos:end="37:21"><name pos:start="37:13" pos:end="37:13">d</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:21">status</name></name> <operator pos:start="37:23" pos:end="37:24">|=</operator> <literal type="number" pos:start="37:26" pos:end="37:26">1</literal> <operator pos:start="37:28" pos:end="37:29">&lt;&lt;</operator> <operator pos:start="37:31" pos:end="37:31">(</operator><name pos:start="37:32" pos:end="37:36">ichan</name> <operator pos:start="37:38" pos:end="37:38">+</operator> <literal type="number" pos:start="37:40" pos:end="37:40">4</literal><operator pos:start="37:41" pos:end="37:41">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if>

        <else pos:start="41:9" pos:end="45:9">else <block pos:start="41:14" pos:end="45:9">{<block_content pos:start="43:13" pos:end="43:45">

            <expr_stmt pos:start="43:13" pos:end="43:45"><expr pos:start="43:13" pos:end="43:44"><name pos:start="43:13" pos:end="43:21"><name pos:start="43:13" pos:end="43:13">d</name><operator pos:start="43:14" pos:end="43:15">-&gt;</operator><name pos:start="43:16" pos:end="43:21">status</name></name> <operator pos:start="43:23" pos:end="43:24">&amp;=</operator> <operator pos:start="43:26" pos:end="43:26">~</operator><operator pos:start="43:27" pos:end="43:27">(</operator><literal type="number" pos:start="43:28" pos:end="43:28">1</literal> <operator pos:start="43:30" pos:end="43:31">&lt;&lt;</operator> <operator pos:start="43:33" pos:end="43:33">(</operator><name pos:start="43:34" pos:end="43:38">ichan</name> <operator pos:start="43:40" pos:end="43:40">+</operator> <literal type="number" pos:start="43:42" pos:end="43:42">4</literal><operator pos:start="43:43" pos:end="43:43">)</operator><operator pos:start="43:44" pos:end="43:44">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:35"><expr pos:start="47:9" pos:end="47:34"><name pos:start="47:9" pos:end="47:17"><name pos:start="47:9" pos:end="47:9">d</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:17">status</name></name> <operator pos:start="47:19" pos:end="47:20">&amp;=</operator> <operator pos:start="47:22" pos:end="47:22">~</operator><operator pos:start="47:23" pos:end="47:23">(</operator><literal type="number" pos:start="47:24" pos:end="47:24">1</literal> <operator pos:start="47:26" pos:end="47:27">&lt;&lt;</operator> <name pos:start="47:29" pos:end="47:33">ichan</name><operator pos:start="47:34" pos:end="47:34">)</operator></expr>;</expr_stmt>

        <break pos:start="49:9" pos:end="49:14">break;</break>



    <case pos:start="53:5" pos:end="53:13">case <expr pos:start="53:10" pos:end="53:12"><literal type="number" pos:start="53:10" pos:end="53:12">0xa</literal></expr>:</case>                   <comment type="block" pos:start="53:33" pos:end="53:49">/* single mask */</comment>

        <if_stmt pos:start="55:9" pos:end="61:42"><if pos:start="55:9" pos:end="57:39">if <condition pos:start="55:12" pos:end="55:21">(<expr pos:start="55:13" pos:end="55:20"><name pos:start="55:13" pos:end="55:16">data</name> <operator pos:start="55:18" pos:end="55:18">&amp;</operator> <literal type="number" pos:start="55:20" pos:end="55:20">4</literal></expr>)</condition><block type="pseudo" pos:start="57:13" pos:end="57:39"><block_content pos:start="57:13" pos:end="57:39">

            <expr_stmt pos:start="57:13" pos:end="57:39"><expr pos:start="57:13" pos:end="57:38"><name pos:start="57:13" pos:end="57:19"><name pos:start="57:13" pos:end="57:13">d</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:19">mask</name></name> <operator pos:start="57:21" pos:end="57:22">|=</operator> <literal type="number" pos:start="57:24" pos:end="57:24">1</literal> <operator pos:start="57:26" pos:end="57:27">&lt;&lt;</operator> <operator pos:start="57:29" pos:end="57:29">(</operator><name pos:start="57:30" pos:end="57:33">data</name> <operator pos:start="57:35" pos:end="57:35">&amp;</operator> <literal type="number" pos:start="57:37" pos:end="57:37">3</literal><operator pos:start="57:38" pos:end="57:38">)</operator></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="59:9" pos:end="61:42">else<block type="pseudo" pos:start="61:13" pos:end="61:42"><block_content pos:start="61:13" pos:end="61:42">

            <expr_stmt pos:start="61:13" pos:end="61:42"><expr pos:start="61:13" pos:end="61:41"><name pos:start="61:13" pos:end="61:19"><name pos:start="61:13" pos:end="61:13">d</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:19">mask</name></name> <operator pos:start="61:21" pos:end="61:22">&amp;=</operator> <operator pos:start="61:24" pos:end="61:24">~</operator><operator pos:start="61:25" pos:end="61:25">(</operator><literal type="number" pos:start="61:26" pos:end="61:26">1</literal> <operator pos:start="61:28" pos:end="61:29">&lt;&lt;</operator> <operator pos:start="61:31" pos:end="61:31">(</operator><name pos:start="61:32" pos:end="61:35">data</name> <operator pos:start="61:37" pos:end="61:37">&amp;</operator> <literal type="number" pos:start="61:39" pos:end="61:39">3</literal><operator pos:start="61:40" pos:end="61:40">)</operator><operator pos:start="61:41" pos:end="61:41">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <break pos:start="63:9" pos:end="63:14">break;</break>



    <case pos:start="67:5" pos:end="67:13">case <expr pos:start="67:10" pos:end="67:12"><literal type="number" pos:start="67:10" pos:end="67:12">0xb</literal></expr>:</case>                   <comment type="block" pos:start="67:33" pos:end="67:42">/* mode */</comment>

        <block pos:start="69:9" pos:end="107:9">{<block_content pos:start="71:13" pos:end="105:18">

            <expr_stmt pos:start="71:13" pos:end="74:0"><expr pos:start="71:13" pos:end="71:28"><name pos:start="71:13" pos:end="71:17">ichan</name> <operator pos:start="71:19" pos:end="71:19">=</operator> <name pos:start="71:21" pos:end="71:24">data</name> <operator pos:start="71:26" pos:end="71:26">&amp;</operator> <literal type="number" pos:start="71:28" pos:end="71:28">3</literal></expr>;</expr_stmt>

<cpp:ifdef pos:start="73:1" pos:end="73:16">#<cpp:directive pos:start="73:2" pos:end="73:6">ifdef</cpp:directive> <name pos:start="73:8" pos:end="73:16">DEBUG_DMA</name></cpp:ifdef>

            <decl_stmt pos:start="75:13" pos:end="75:19"><decl pos:start="75:13" pos:end="75:18"><type pos:start="75:13" pos:end="75:15"><name pos:start="75:13" pos:end="75:15">int</name></type> <name pos:start="75:17" pos:end="75:18">op</name></decl>;</decl_stmt>

            <decl_stmt pos:start="77:13" pos:end="77:19"><decl pos:start="77:13" pos:end="77:18"><type pos:start="77:13" pos:end="77:15"><name pos:start="77:13" pos:end="77:15">int</name></type> <name pos:start="77:17" pos:end="77:18">ai</name></decl>;</decl_stmt>

            <decl_stmt pos:start="79:13" pos:end="79:20"><decl pos:start="79:13" pos:end="79:19"><type pos:start="79:13" pos:end="79:15"><name pos:start="79:13" pos:end="79:15">int</name></type> <name pos:start="79:17" pos:end="79:19">dir</name></decl>;</decl_stmt>

            <decl_stmt pos:start="81:13" pos:end="81:23"><decl pos:start="81:13" pos:end="81:22"><type pos:start="81:13" pos:end="81:15"><name pos:start="81:13" pos:end="81:15">int</name></type> <name pos:start="81:17" pos:end="81:22">opmode</name></decl>;</decl_stmt>



            <expr_stmt pos:start="85:13" pos:end="85:33"><expr pos:start="85:13" pos:end="85:32"><name pos:start="85:13" pos:end="85:14">op</name> <operator pos:start="85:16" pos:end="85:16">=</operator> <operator pos:start="85:18" pos:end="85:18">(</operator><name pos:start="85:19" pos:end="85:22">data</name> <operator pos:start="85:24" pos:end="85:25">&gt;&gt;</operator> <literal type="number" pos:start="85:27" pos:end="85:27">2</literal><operator pos:start="85:28" pos:end="85:28">)</operator> <operator pos:start="85:30" pos:end="85:30">&amp;</operator> <literal type="number" pos:start="85:32" pos:end="85:32">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:33"><expr pos:start="87:13" pos:end="87:32"><name pos:start="87:13" pos:end="87:14">ai</name> <operator pos:start="87:16" pos:end="87:16">=</operator> <operator pos:start="87:18" pos:end="87:18">(</operator><name pos:start="87:19" pos:end="87:22">data</name> <operator pos:start="87:24" pos:end="87:25">&gt;&gt;</operator> <literal type="number" pos:start="87:27" pos:end="87:27">4</literal><operator pos:start="87:28" pos:end="87:28">)</operator> <operator pos:start="87:30" pos:end="87:30">&amp;</operator> <literal type="number" pos:start="87:32" pos:end="87:32">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:34"><expr pos:start="89:13" pos:end="89:33"><name pos:start="89:13" pos:end="89:15">dir</name> <operator pos:start="89:17" pos:end="89:17">=</operator> <operator pos:start="89:19" pos:end="89:19">(</operator><name pos:start="89:20" pos:end="89:23">data</name> <operator pos:start="89:25" pos:end="89:26">&gt;&gt;</operator> <literal type="number" pos:start="89:28" pos:end="89:28">5</literal><operator pos:start="89:29" pos:end="89:29">)</operator> <operator pos:start="89:31" pos:end="89:31">&amp;</operator> <literal type="number" pos:start="89:33" pos:end="89:33">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:37"><expr pos:start="91:13" pos:end="91:36"><name pos:start="91:13" pos:end="91:18">opmode</name> <operator pos:start="91:20" pos:end="91:20">=</operator> <operator pos:start="91:22" pos:end="91:22">(</operator><name pos:start="91:23" pos:end="91:26">data</name> <operator pos:start="91:28" pos:end="91:29">&gt;&gt;</operator> <literal type="number" pos:start="91:31" pos:end="91:31">6</literal><operator pos:start="91:32" pos:end="91:32">)</operator> <operator pos:start="91:34" pos:end="91:34">&amp;</operator> <literal type="number" pos:start="91:36" pos:end="91:36">3</literal></expr>;</expr_stmt>



            <expr_stmt pos:start="95:13" pos:end="100:0"><expr pos:start="95:13" pos:end="97:46"><call pos:start="95:13" pos:end="97:46"><name pos:start="95:13" pos:end="95:17">linfo</name> <argument_list pos:start="95:19" pos:end="97:46">(<argument pos:start="95:20" pos:end="95:64"><expr pos:start="95:20" pos:end="95:64"><literal type="string" pos:start="95:20" pos:end="95:64">"ichan %d, op %d, ai %d, dir %d, opmode %d\n"</literal></expr></argument>,

                   <argument pos:start="97:20" pos:end="97:24"><expr pos:start="97:20" pos:end="97:24"><name pos:start="97:20" pos:end="97:24">ichan</name></expr></argument>, <argument pos:start="97:27" pos:end="97:28"><expr pos:start="97:27" pos:end="97:28"><name pos:start="97:27" pos:end="97:28">op</name></expr></argument>, <argument pos:start="97:31" pos:end="97:32"><expr pos:start="97:31" pos:end="97:32"><name pos:start="97:31" pos:end="97:32">ai</name></expr></argument>, <argument pos:start="97:35" pos:end="97:37"><expr pos:start="97:35" pos:end="97:37"><name pos:start="97:35" pos:end="97:37">dir</name></expr></argument>, <argument pos:start="97:40" pos:end="97:45"><expr pos:start="97:40" pos:end="97:45"><name pos:start="97:40" pos:end="97:45">opmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="99:1" pos:end="99:6">#<cpp:directive pos:start="99:2" pos:end="99:6">endif</cpp:directive></cpp:endif>



            <expr_stmt pos:start="103:13" pos:end="103:39"><expr pos:start="103:13" pos:end="103:38"><name pos:start="103:13" pos:end="103:26"><name pos:start="103:13" pos:end="103:13">d</name><operator pos:start="103:14" pos:end="103:15">-&gt;</operator><name pos:start="103:16" pos:end="103:19">regs</name><index pos:start="103:20" pos:end="103:26">[<expr pos:start="103:21" pos:end="103:25"><name pos:start="103:21" pos:end="103:25">ichan</name></expr>]</index></name><operator pos:start="103:27" pos:end="103:27">.</operator><name pos:start="103:28" pos:end="103:31">mode</name> <operator pos:start="103:33" pos:end="103:33">=</operator> <name pos:start="103:35" pos:end="103:38">data</name></expr>;</expr_stmt>

            <break pos:start="105:13" pos:end="105:18">break;</break>

        </block_content>}</block>



    <case pos:start="111:5" pos:end="111:13">case <expr pos:start="111:10" pos:end="111:12"><literal type="number" pos:start="111:10" pos:end="111:12">0xc</literal></expr>:</case>                   <comment type="block" pos:start="111:33" pos:end="111:53">/* clear flip flop */</comment>

        <expr_stmt pos:start="113:9" pos:end="113:25"><expr pos:start="113:9" pos:end="113:24"><name pos:start="113:9" pos:end="113:20"><name pos:start="113:9" pos:end="113:9">d</name><operator pos:start="113:10" pos:end="113:11">-&gt;</operator><name pos:start="113:12" pos:end="113:20">flip_flop</name></name> <operator pos:start="113:22" pos:end="113:22">=</operator> <literal type="number" pos:start="113:24" pos:end="113:24">0</literal></expr>;</expr_stmt>

        <break pos:start="115:9" pos:end="115:14">break;</break>



    <case pos:start="119:5" pos:end="119:13">case <expr pos:start="119:10" pos:end="119:12"><literal type="number" pos:start="119:10" pos:end="119:12">0xd</literal></expr>:</case>                   <comment type="block" pos:start="119:33" pos:end="119:43">/* reset */</comment>

        <expr_stmt pos:start="121:9" pos:end="121:25"><expr pos:start="121:9" pos:end="121:24"><name pos:start="121:9" pos:end="121:20"><name pos:start="121:9" pos:end="121:9">d</name><operator pos:start="121:10" pos:end="121:11">-&gt;</operator><name pos:start="121:12" pos:end="121:20">flip_flop</name></name> <operator pos:start="121:22" pos:end="121:22">=</operator> <literal type="number" pos:start="121:24" pos:end="121:24">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:21"><expr pos:start="123:9" pos:end="123:20"><name pos:start="123:9" pos:end="123:15"><name pos:start="123:9" pos:end="123:9">d</name><operator pos:start="123:10" pos:end="123:11">-&gt;</operator><name pos:start="123:12" pos:end="123:15">mask</name></name> <operator pos:start="123:17" pos:end="123:17">=</operator> <operator pos:start="123:19" pos:end="123:19">~</operator><literal type="number" pos:start="123:20" pos:end="123:20">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:22"><expr pos:start="125:9" pos:end="125:21"><name pos:start="125:9" pos:end="125:17"><name pos:start="125:9" pos:end="125:9">d</name><operator pos:start="125:10" pos:end="125:11">-&gt;</operator><name pos:start="125:12" pos:end="125:17">status</name></name> <operator pos:start="125:19" pos:end="125:19">=</operator> <literal type="number" pos:start="125:21" pos:end="125:21">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:23"><expr pos:start="127:9" pos:end="127:22"><name pos:start="127:9" pos:end="127:18"><name pos:start="127:9" pos:end="127:9">d</name><operator pos:start="127:10" pos:end="127:11">-&gt;</operator><name pos:start="127:12" pos:end="127:18">command</name></name> <operator pos:start="127:20" pos:end="127:20">=</operator> <literal type="number" pos:start="127:22" pos:end="127:22">0</literal></expr>;</expr_stmt>

        <break pos:start="129:9" pos:end="129:14">break;</break>



    <case pos:start="133:5" pos:end="133:13">case <expr pos:start="133:10" pos:end="133:12"><literal type="number" pos:start="133:10" pos:end="133:12">0xe</literal></expr>:</case>                   <comment type="block" pos:start="133:33" pos:end="133:65">/* clear mask for all channels */</comment>

        <expr_stmt pos:start="135:9" pos:end="135:20"><expr pos:start="135:9" pos:end="135:19"><name pos:start="135:9" pos:end="135:15"><name pos:start="135:9" pos:end="135:9">d</name><operator pos:start="135:10" pos:end="135:11">-&gt;</operator><name pos:start="135:12" pos:end="135:15">mask</name></name> <operator pos:start="135:17" pos:end="135:17">=</operator> <literal type="number" pos:start="135:19" pos:end="135:19">0</literal></expr>;</expr_stmt>

        <break pos:start="137:9" pos:end="137:14">break;</break>



    <case pos:start="141:5" pos:end="141:13">case <expr pos:start="141:10" pos:end="141:12"><literal type="number" pos:start="141:10" pos:end="141:12">0xf</literal></expr>:</case>                   <comment type="block" pos:start="141:33" pos:end="141:65">/* write mask for all channels */</comment>

        <expr_stmt pos:start="143:9" pos:end="143:23"><expr pos:start="143:9" pos:end="143:22"><name pos:start="143:9" pos:end="143:15"><name pos:start="143:9" pos:end="143:9">d</name><operator pos:start="143:10" pos:end="143:11">-&gt;</operator><name pos:start="143:12" pos:end="143:15">mask</name></name> <operator pos:start="143:17" pos:end="143:17">=</operator> <name pos:start="143:19" pos:end="143:22">data</name></expr>;</expr_stmt>

        <break pos:start="145:9" pos:end="145:14">break;</break>



    <default pos:start="149:5" pos:end="149:12">default:</default>

        <expr_stmt pos:start="151:9" pos:end="151:48"><expr pos:start="151:9" pos:end="151:47"><call pos:start="151:9" pos:end="151:47"><name pos:start="151:9" pos:end="151:11">log</name> <argument_list pos:start="151:13" pos:end="151:47">(<argument pos:start="151:14" pos:end="151:39"><expr pos:start="151:14" pos:end="151:39"><literal type="string" pos:start="151:14" pos:end="151:39">"dma: unknown iport %#x\n"</literal></expr></argument>, <argument pos:start="151:42" pos:end="151:46"><expr pos:start="151:42" pos:end="151:46"><name pos:start="151:42" pos:end="151:46">iport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="153:9" pos:end="153:19">goto <name pos:start="153:14" pos:end="153:18">error</name>;</goto>

    </block_content>}</block></switch>



<cpp:ifdef pos:start="159:1" pos:end="159:16">#<cpp:directive pos:start="159:2" pos:end="159:6">ifdef</cpp:directive> <name pos:start="159:8" pos:end="159:16">DEBUG_DMA</name></cpp:ifdef>

    <if_stmt pos:start="161:5" pos:end="170:0"><if pos:start="161:5" pos:end="170:0">if <condition pos:start="161:8" pos:end="161:21">(<expr pos:start="161:9" pos:end="161:20"><literal type="number" pos:start="161:9" pos:end="161:11">0xc</literal> <operator pos:start="161:13" pos:end="161:14">!=</operator> <name pos:start="161:16" pos:end="161:20">iport</name></expr>)</condition> <block pos:start="161:23" pos:end="170:0">{<block_content pos:start="163:9" pos:end="165:35">

        <expr_stmt pos:start="163:9" pos:end="165:35"><expr pos:start="163:9" pos:end="165:34"><call pos:start="163:9" pos:end="165:34"><name pos:start="163:9" pos:end="163:13">linfo</name> <argument_list pos:start="163:15" pos:end="165:34">(<argument pos:start="163:16" pos:end="163:53"><expr pos:start="163:16" pos:end="163:53"><literal type="string" pos:start="163:16" pos:end="163:53">"nport %#06x, ichan % 2d, val %#06x\n"</literal></expr></argument>,

               <argument pos:start="165:16" pos:end="165:20"><expr pos:start="165:16" pos:end="165:20"><name pos:start="165:16" pos:end="165:20">nport</name></expr></argument>, <argument pos:start="165:23" pos:end="165:27"><expr pos:start="165:23" pos:end="165:27"><name pos:start="165:23" pos:end="165:27">ichan</name></expr></argument>, <argument pos:start="165:30" pos:end="165:33"><expr pos:start="165:30" pos:end="165:33"><name pos:start="165:30" pos:end="165:33">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="169:1" pos:end="169:6">#<cpp:directive pos:start="169:2" pos:end="169:6">endif</cpp:directive></cpp:endif>

    <return pos:start="171:5" pos:end="171:11">return;</return>



 <label pos:start="175:2" pos:end="175:7"><name pos:start="175:2" pos:end="175:6">error</name>:</label>

    <expr_stmt pos:start="177:5" pos:end="177:13"><expr pos:start="177:5" pos:end="177:12"><call pos:start="177:5" pos:end="177:12"><name pos:start="177:5" pos:end="177:9">abort</name> <argument_list pos:start="177:11" pos:end="177:12">()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
