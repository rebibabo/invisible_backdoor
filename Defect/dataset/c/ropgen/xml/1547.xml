<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1547.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">qemu_rbd_set_conf</name><parameter_list pos:start="1:29" pos:end="1:63">(<parameter pos:start="1:30" pos:end="1:44"><decl pos:start="1:30" pos:end="1:44"><type pos:start="1:30" pos:end="1:44"><name pos:start="1:30" pos:end="1:36">rados_t</name></type> <name pos:start="1:38" pos:end="1:44">cluster</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:62"><decl pos:start="1:47" pos:end="1:62"><type pos:start="1:47" pos:end="1:62"><specifier pos:start="1:47" pos:end="1:51">const</specifier> <name pos:start="1:53" pos:end="1:56">char</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">conf</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="95:1">{<block_content pos:start="5:5" pos:end="93:15">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">char</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:11">p</name></decl>, <decl pos:start="5:14" pos:end="5:17"><type ref="prev" pos:start="5:5" pos:end="5:10"><modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:17">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">char</name></type> <name pos:start="7:10" pos:end="7:37"><name pos:start="7:10" pos:end="7:13">name</name><index pos:start="7:14" pos:end="7:37">[<expr pos:start="7:15" pos:end="7:36"><name pos:start="7:15" pos:end="7:36">RBD_MAX_CONF_NAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:37"><name pos:start="9:10" pos:end="9:14">value</name><index pos:start="9:15" pos:end="9:37">[<expr pos:start="9:16" pos:end="9:36"><name pos:start="9:16" pos:end="9:36">RBD_MAX_CONF_VAL_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name> <init pos:start="11:13" pos:end="11:15">= <expr pos:start="11:15" pos:end="11:15"><literal type="number" pos:start="11:15" pos:end="11:15">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:25"><expr pos:start="15:5" pos:end="15:24"><name pos:start="15:5" pos:end="15:7">buf</name> <operator pos:start="15:9" pos:end="15:9">=</operator> <call pos:start="15:11" pos:end="15:24"><name pos:start="15:11" pos:end="15:18">g_strdup</name><argument_list pos:start="15:19" pos:end="15:24">(<argument pos:start="15:20" pos:end="15:23"><expr pos:start="15:20" pos:end="15:23"><name pos:start="15:20" pos:end="15:23">conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:12"><expr pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:5">p</name> <operator pos:start="17:7" pos:end="17:7">=</operator> <name pos:start="17:9" pos:end="17:11">buf</name></expr>;</expr_stmt>



    <while pos:start="21:5" pos:end="87:5">while <condition pos:start="21:11" pos:end="21:13">(<expr pos:start="21:12" pos:end="21:12"><name pos:start="21:12" pos:end="21:12">p</name></expr>)</condition> <block pos:start="21:15" pos:end="87:5">{<block_content pos:start="23:9" pos:end="85:9">

        <expr_stmt pos:start="23:9" pos:end="25:61"><expr pos:start="23:9" pos:end="25:60"><name pos:start="23:9" pos:end="23:11">ret</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <call pos:start="23:15" pos:end="25:60"><name pos:start="23:15" pos:end="23:31">qemu_rbd_next_tok</name><argument_list pos:start="23:32" pos:end="25:60">(<argument pos:start="23:33" pos:end="23:36"><expr pos:start="23:33" pos:end="23:36"><name pos:start="23:33" pos:end="23:36">name</name></expr></argument>, <argument pos:start="23:39" pos:end="23:50"><expr pos:start="23:39" pos:end="23:50"><sizeof pos:start="23:39" pos:end="23:50">sizeof<argument_list pos:start="23:45" pos:end="23:50">(<argument pos:start="23:46" pos:end="23:49"><expr pos:start="23:46" pos:end="23:49"><name pos:start="23:46" pos:end="23:49">name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="23:53" pos:end="23:53"><expr pos:start="23:53" pos:end="23:53"><name pos:start="23:53" pos:end="23:53">p</name></expr></argument>,

                                <argument pos:start="25:33" pos:end="25:35"><expr pos:start="25:33" pos:end="25:35"><literal type="char" pos:start="25:33" pos:end="25:35">'='</literal></expr></argument>, <argument pos:start="25:38" pos:end="25:55"><expr pos:start="25:38" pos:end="25:55"><literal type="string" pos:start="25:38" pos:end="25:55">"conf option name"</literal></expr></argument>, <argument pos:start="25:58" pos:end="25:59"><expr pos:start="25:58" pos:end="25:59"><operator pos:start="25:58" pos:end="25:58">&amp;</operator><name pos:start="25:59" pos:end="25:59">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="27:9" pos:end="31:9"><if pos:start="27:9" pos:end="31:9">if <condition pos:start="27:12" pos:end="27:20">(<expr pos:start="27:13" pos:end="27:19"><name pos:start="27:13" pos:end="27:15">ret</name> <operator pos:start="27:17" pos:end="27:17">&lt;</operator> <literal type="number" pos:start="27:19" pos:end="27:19">0</literal></expr>)</condition> <block pos:start="27:22" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:18">

            <break pos:start="29:13" pos:end="29:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="35:9" pos:end="43:9"><if pos:start="35:9" pos:end="43:9">if <condition pos:start="35:12" pos:end="35:15">(<expr pos:start="35:13" pos:end="35:14"><operator pos:start="35:13" pos:end="35:13">!</operator><name pos:start="35:14" pos:end="35:14">p</name></expr>)</condition> <block pos:start="35:17" pos:end="43:9">{<block_content pos:start="37:13" pos:end="41:18">

            <expr_stmt pos:start="37:13" pos:end="37:62"><expr pos:start="37:13" pos:end="37:61"><call pos:start="37:13" pos:end="37:61"><name pos:start="37:13" pos:end="37:24">error_report</name><argument_list pos:start="37:25" pos:end="37:61">(<argument pos:start="37:26" pos:end="37:54"><expr pos:start="37:26" pos:end="37:54"><literal type="string" pos:start="37:26" pos:end="37:54">"conf option %s has no value"</literal></expr></argument>, <argument pos:start="37:57" pos:end="37:60"><expr pos:start="37:57" pos:end="37:60"><name pos:start="37:57" pos:end="37:60">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:26"><expr pos:start="39:13" pos:end="39:25"><name pos:start="39:13" pos:end="39:15">ret</name> <operator pos:start="39:17" pos:end="39:17">=</operator> <operator pos:start="39:19" pos:end="39:19">-</operator><name pos:start="39:20" pos:end="39:25">EINVAL</name></expr>;</expr_stmt>

            <break pos:start="41:13" pos:end="41:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="47:9" pos:end="49:62"><expr pos:start="47:9" pos:end="49:61"><name pos:start="47:9" pos:end="47:11">ret</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <call pos:start="47:15" pos:end="49:61"><name pos:start="47:15" pos:end="47:31">qemu_rbd_next_tok</name><argument_list pos:start="47:32" pos:end="49:61">(<argument pos:start="47:33" pos:end="47:37"><expr pos:start="47:33" pos:end="47:37"><name pos:start="47:33" pos:end="47:37">value</name></expr></argument>, <argument pos:start="47:40" pos:end="47:52"><expr pos:start="47:40" pos:end="47:52"><sizeof pos:start="47:40" pos:end="47:52">sizeof<argument_list pos:start="47:46" pos:end="47:52">(<argument pos:start="47:47" pos:end="47:51"><expr pos:start="47:47" pos:end="47:51"><name pos:start="47:47" pos:end="47:51">value</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="47:55" pos:end="47:55"><expr pos:start="47:55" pos:end="47:55"><name pos:start="47:55" pos:end="47:55">p</name></expr></argument>,

                                <argument pos:start="49:33" pos:end="49:35"><expr pos:start="49:33" pos:end="49:35"><literal type="char" pos:start="49:33" pos:end="49:35">':'</literal></expr></argument>, <argument pos:start="49:38" pos:end="49:56"><expr pos:start="49:38" pos:end="49:56"><literal type="string" pos:start="49:38" pos:end="49:56">"conf option value"</literal></expr></argument>, <argument pos:start="49:59" pos:end="49:60"><expr pos:start="49:59" pos:end="49:60"><operator pos:start="49:59" pos:end="49:59">&amp;</operator><name pos:start="49:60" pos:end="49:60">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="51:9" pos:end="55:9"><if pos:start="51:9" pos:end="55:9">if <condition pos:start="51:12" pos:end="51:20">(<expr pos:start="51:13" pos:end="51:19"><name pos:start="51:13" pos:end="51:15">ret</name> <operator pos:start="51:17" pos:end="51:17">&lt;</operator> <literal type="number" pos:start="51:19" pos:end="51:19">0</literal></expr>)</condition> <block pos:start="51:22" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:18">

            <break pos:start="53:13" pos:end="53:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="59:9" pos:end="85:9"><if pos:start="59:9" pos:end="73:9">if <condition pos:start="59:12" pos:end="59:33">(<expr pos:start="59:13" pos:end="59:32"><call pos:start="59:13" pos:end="59:32"><name pos:start="59:13" pos:end="59:18">strcmp</name><argument_list pos:start="59:19" pos:end="59:32">(<argument pos:start="59:20" pos:end="59:23"><expr pos:start="59:20" pos:end="59:23"><name pos:start="59:20" pos:end="59:23">name</name></expr></argument>, <argument pos:start="59:26" pos:end="59:31"><expr pos:start="59:26" pos:end="59:31"><literal type="string" pos:start="59:26" pos:end="59:31">"conf"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="59:35" pos:end="73:9">{<block_content pos:start="61:13" pos:end="71:13">

            <expr_stmt pos:start="61:13" pos:end="61:55"><expr pos:start="61:13" pos:end="61:54"><name pos:start="61:13" pos:end="61:15">ret</name> <operator pos:start="61:17" pos:end="61:17">=</operator> <call pos:start="61:19" pos:end="61:54"><name pos:start="61:19" pos:end="61:32">rados_conf_set</name><argument_list pos:start="61:33" pos:end="61:54">(<argument pos:start="61:34" pos:end="61:40"><expr pos:start="61:34" pos:end="61:40"><name pos:start="61:34" pos:end="61:40">cluster</name></expr></argument>, <argument pos:start="61:43" pos:end="61:46"><expr pos:start="61:43" pos:end="61:46"><name pos:start="61:43" pos:end="61:46">name</name></expr></argument>, <argument pos:start="61:49" pos:end="61:53"><expr pos:start="61:49" pos:end="61:53"><name pos:start="61:49" pos:end="61:53">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="63:13" pos:end="71:13"><if pos:start="63:13" pos:end="71:13">if <condition pos:start="63:16" pos:end="63:24">(<expr pos:start="63:17" pos:end="63:23"><name pos:start="63:17" pos:end="63:19">ret</name> <operator pos:start="63:21" pos:end="63:21">&lt;</operator> <literal type="number" pos:start="63:23" pos:end="63:23">0</literal></expr>)</condition> <block pos:start="63:26" pos:end="71:13">{<block_content pos:start="65:17" pos:end="69:22">

                <expr_stmt pos:start="65:17" pos:end="65:61"><expr pos:start="65:17" pos:end="65:60"><call pos:start="65:17" pos:end="65:60"><name pos:start="65:17" pos:end="65:28">error_report</name><argument_list pos:start="65:29" pos:end="65:60">(<argument pos:start="65:30" pos:end="65:53"><expr pos:start="65:30" pos:end="65:53"><literal type="string" pos:start="65:30" pos:end="65:53">"invalid conf option %s"</literal></expr></argument>, <argument pos:start="65:56" pos:end="65:59"><expr pos:start="65:56" pos:end="65:59"><name pos:start="65:56" pos:end="65:59">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="67:17" pos:end="67:30"><expr pos:start="67:17" pos:end="67:29"><name pos:start="67:17" pos:end="67:19">ret</name> <operator pos:start="67:21" pos:end="67:21">=</operator> <operator pos:start="67:23" pos:end="67:23">-</operator><name pos:start="67:24" pos:end="67:29">EINVAL</name></expr>;</expr_stmt>

                <break pos:start="69:17" pos:end="69:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="73:11" pos:end="85:9">else <block pos:start="73:16" pos:end="85:9">{<block_content pos:start="75:13" pos:end="83:13">

            <expr_stmt pos:start="75:13" pos:end="75:55"><expr pos:start="75:13" pos:end="75:54"><name pos:start="75:13" pos:end="75:15">ret</name> <operator pos:start="75:17" pos:end="75:17">=</operator> <call pos:start="75:19" pos:end="75:54"><name pos:start="75:19" pos:end="75:38">rados_conf_read_file</name><argument_list pos:start="75:39" pos:end="75:54">(<argument pos:start="75:40" pos:end="75:46"><expr pos:start="75:40" pos:end="75:46"><name pos:start="75:40" pos:end="75:46">cluster</name></expr></argument>, <argument pos:start="75:49" pos:end="75:53"><expr pos:start="75:49" pos:end="75:53"><name pos:start="75:49" pos:end="75:53">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="77:13" pos:end="83:13"><if pos:start="77:13" pos:end="83:13">if <condition pos:start="77:16" pos:end="77:24">(<expr pos:start="77:17" pos:end="77:23"><name pos:start="77:17" pos:end="77:19">ret</name> <operator pos:start="77:21" pos:end="77:21">&lt;</operator> <literal type="number" pos:start="77:23" pos:end="77:23">0</literal></expr>)</condition> <block pos:start="77:26" pos:end="83:13">{<block_content pos:start="79:17" pos:end="81:22">

                <expr_stmt pos:start="79:17" pos:end="79:66"><expr pos:start="79:17" pos:end="79:65"><call pos:start="79:17" pos:end="79:65"><name pos:start="79:17" pos:end="79:28">error_report</name><argument_list pos:start="79:29" pos:end="79:65">(<argument pos:start="79:30" pos:end="79:57"><expr pos:start="79:30" pos:end="79:57"><literal type="string" pos:start="79:30" pos:end="79:57">"error reading conf file %s"</literal></expr></argument>, <argument pos:start="79:60" pos:end="79:64"><expr pos:start="79:60" pos:end="79:64"><name pos:start="79:60" pos:end="79:64">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="81:17" pos:end="81:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="91:5" pos:end="91:16"><expr pos:start="91:5" pos:end="91:15"><call pos:start="91:5" pos:end="91:15"><name pos:start="91:5" pos:end="91:10">g_free</name><argument_list pos:start="91:11" pos:end="91:15">(<argument pos:start="91:12" pos:end="91:14"><expr pos:start="91:12" pos:end="91:14"><name pos:start="91:12" pos:end="91:14">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="93:5" pos:end="93:15">return <expr pos:start="93:12" pos:end="93:14"><name pos:start="93:12" pos:end="93:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
