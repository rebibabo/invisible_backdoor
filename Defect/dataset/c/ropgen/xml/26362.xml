<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26362.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:24"><name pos:start="1:1" pos:end="1:22"><name pos:start="1:1" pos:end="1:6">struct</name> <name pos:start="1:8" pos:end="1:22">pxa2xx_pcmcia_s</name></name> <modifier pos:start="1:24" pos:end="1:24">*</modifier></type><name pos:start="1:25" pos:end="1:42">pxa2xx_pcmcia_init</name><parameter_list pos:start="1:43" pos:end="1:67">(<parameter pos:start="1:44" pos:end="1:66"><decl pos:start="1:44" pos:end="1:66"><type pos:start="1:44" pos:end="1:61"><name pos:start="1:44" pos:end="1:61">target_phys_addr_t</name></type> <name pos:start="1:63" pos:end="1:66">base</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="73:1">{<block_content pos:start="5:5" pos:end="71:13">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:17">iomemtype</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:28"><name pos:start="7:5" pos:end="7:26"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:26">pxa2xx_pcmcia_s</name></name> <modifier pos:start="7:28" pos:end="7:28">*</modifier></type><name pos:start="7:29" pos:end="7:29">s</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="13:57"><expr pos:start="11:5" pos:end="13:56"><name pos:start="11:5" pos:end="11:5">s</name> <operator pos:start="11:7" pos:end="11:7">=</operator> <operator pos:start="11:9" pos:end="11:9">(</operator>struct <name pos:start="11:17" pos:end="11:31">pxa2xx_pcmcia_s</name> <operator pos:start="11:33" pos:end="11:33">*</operator><operator pos:start="11:34" pos:end="11:34">)</operator>

            <call pos:start="13:13" pos:end="13:56"><name pos:start="13:13" pos:end="13:24">qemu_mallocz</name><argument_list pos:start="13:25" pos:end="13:56">(<argument pos:start="13:26" pos:end="13:55"><expr pos:start="13:26" pos:end="13:55"><sizeof pos:start="13:26" pos:end="13:55">sizeof<argument_list pos:start="13:32" pos:end="13:55">(<argument pos:start="13:33" pos:end="13:54"><expr pos:start="13:33" pos:end="13:54">struct <name pos:start="13:40" pos:end="13:54">pxa2xx_pcmcia_s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:33">/* Socket I/O Memory Space */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:35"><expr pos:start="19:5" pos:end="19:34"><name pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:5">s</name><operator pos:start="19:6" pos:end="19:7">-&gt;</operator><name pos:start="19:8" pos:end="19:14">io_base</name></name> <operator pos:start="19:16" pos:end="19:16">=</operator> <name pos:start="19:18" pos:end="19:21">base</name> <operator pos:start="19:23" pos:end="19:23">|</operator> <literal type="number" pos:start="19:25" pos:end="19:34">0x00000000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="23:49"><expr pos:start="21:5" pos:end="23:48"><name pos:start="21:5" pos:end="21:13">iomemtype</name> <operator pos:start="21:15" pos:end="21:15">=</operator> <call pos:start="21:17" pos:end="23:48"><name pos:start="21:17" pos:end="21:38">cpu_register_io_memory</name><argument_list pos:start="21:39" pos:end="23:48">(<argument pos:start="21:40" pos:end="21:40"><expr pos:start="21:40" pos:end="21:40"><literal type="number" pos:start="21:40" pos:end="21:40">0</literal></expr></argument>, <argument pos:start="21:43" pos:end="21:65"><expr pos:start="21:43" pos:end="21:65"><name pos:start="21:43" pos:end="21:65">pxa2xx_pcmcia_io_readfn</name></expr></argument>,

                    <argument pos:start="23:21" pos:end="23:44"><expr pos:start="23:21" pos:end="23:44"><name pos:start="23:21" pos:end="23:44">pxa2xx_pcmcia_io_writefn</name></expr></argument>, <argument pos:start="23:47" pos:end="23:47"><expr pos:start="23:47" pos:end="23:47"><name pos:start="23:47" pos:end="23:47">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:68"><expr pos:start="25:5" pos:end="25:67"><call pos:start="25:5" pos:end="25:67"><name pos:start="25:5" pos:end="25:32">cpu_register_physical_memory</name><argument_list pos:start="25:33" pos:end="25:67">(<argument pos:start="25:34" pos:end="25:43"><expr pos:start="25:34" pos:end="25:43"><name pos:start="25:34" pos:end="25:43"><name pos:start="25:34" pos:end="25:34">s</name><operator pos:start="25:35" pos:end="25:36">-&gt;</operator><name pos:start="25:37" pos:end="25:43">io_base</name></name></expr></argument>, <argument pos:start="25:46" pos:end="25:55"><expr pos:start="25:46" pos:end="25:55"><literal type="number" pos:start="25:46" pos:end="25:55">0x03ffffff</literal></expr></argument>, <argument pos:start="25:58" pos:end="25:66"><expr pos:start="25:58" pos:end="25:66"><name pos:start="25:58" pos:end="25:66">iomemtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:37">/* Then next 64 MB is reserved */</comment>



    <comment type="block" pos:start="33:5" pos:end="33:39">/* Socket Attribute Memory Space */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:37"><expr pos:start="35:5" pos:end="35:36"><name pos:start="35:5" pos:end="35:16"><name pos:start="35:5" pos:end="35:5">s</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:16">attr_base</name></name> <operator pos:start="35:18" pos:end="35:18">=</operator> <name pos:start="35:20" pos:end="35:23">base</name> <operator pos:start="35:25" pos:end="35:25">|</operator> <literal type="number" pos:start="35:27" pos:end="35:36">0x08000000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="39:51"><expr pos:start="37:5" pos:end="39:50"><name pos:start="37:5" pos:end="37:13">iomemtype</name> <operator pos:start="37:15" pos:end="37:15">=</operator> <call pos:start="37:17" pos:end="39:50"><name pos:start="37:17" pos:end="37:38">cpu_register_io_memory</name><argument_list pos:start="37:39" pos:end="39:50">(<argument pos:start="37:40" pos:end="37:40"><expr pos:start="37:40" pos:end="37:40"><literal type="number" pos:start="37:40" pos:end="37:40">0</literal></expr></argument>, <argument pos:start="37:43" pos:end="37:67"><expr pos:start="37:43" pos:end="37:67"><name pos:start="37:43" pos:end="37:67">pxa2xx_pcmcia_attr_readfn</name></expr></argument>,

                    <argument pos:start="39:21" pos:end="39:46"><expr pos:start="39:21" pos:end="39:46"><name pos:start="39:21" pos:end="39:46">pxa2xx_pcmcia_attr_writefn</name></expr></argument>, <argument pos:start="39:49" pos:end="39:49"><expr pos:start="39:49" pos:end="39:49"><name pos:start="39:49" pos:end="39:49">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:70"><expr pos:start="41:5" pos:end="41:69"><call pos:start="41:5" pos:end="41:69"><name pos:start="41:5" pos:end="41:32">cpu_register_physical_memory</name><argument_list pos:start="41:33" pos:end="41:69">(<argument pos:start="41:34" pos:end="41:45"><expr pos:start="41:34" pos:end="41:45"><name pos:start="41:34" pos:end="41:45"><name pos:start="41:34" pos:end="41:34">s</name><operator pos:start="41:35" pos:end="41:36">-&gt;</operator><name pos:start="41:37" pos:end="41:45">attr_base</name></name></expr></argument>, <argument pos:start="41:48" pos:end="41:57"><expr pos:start="41:48" pos:end="41:57"><literal type="number" pos:start="41:48" pos:end="41:57">0x03ffffff</literal></expr></argument>, <argument pos:start="41:60" pos:end="41:68"><expr pos:start="41:60" pos:end="41:68"><name pos:start="41:60" pos:end="41:68">iomemtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:36">/* Socket Common Memory Space */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:39"><expr pos:start="47:5" pos:end="47:38"><name pos:start="47:5" pos:end="47:18"><name pos:start="47:5" pos:end="47:5">s</name><operator pos:start="47:6" pos:end="47:7">-&gt;</operator><name pos:start="47:8" pos:end="47:18">common_base</name></name> <operator pos:start="47:20" pos:end="47:20">=</operator> <name pos:start="47:22" pos:end="47:25">base</name> <operator pos:start="47:27" pos:end="47:27">|</operator> <literal type="number" pos:start="47:29" pos:end="47:38">0x0c000000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="51:53"><expr pos:start="49:5" pos:end="51:52"><name pos:start="49:5" pos:end="49:13">iomemtype</name> <operator pos:start="49:15" pos:end="49:15">=</operator> <call pos:start="49:17" pos:end="51:52"><name pos:start="49:17" pos:end="49:38">cpu_register_io_memory</name><argument_list pos:start="49:39" pos:end="51:52">(<argument pos:start="49:40" pos:end="49:40"><expr pos:start="49:40" pos:end="49:40"><literal type="number" pos:start="49:40" pos:end="49:40">0</literal></expr></argument>, <argument pos:start="49:43" pos:end="49:69"><expr pos:start="49:43" pos:end="49:69"><name pos:start="49:43" pos:end="49:69">pxa2xx_pcmcia_common_readfn</name></expr></argument>,

                    <argument pos:start="51:21" pos:end="51:48"><expr pos:start="51:21" pos:end="51:48"><name pos:start="51:21" pos:end="51:48">pxa2xx_pcmcia_common_writefn</name></expr></argument>, <argument pos:start="51:51" pos:end="51:51"><expr pos:start="51:51" pos:end="51:51"><name pos:start="51:51" pos:end="51:51">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:72"><expr pos:start="53:5" pos:end="53:71"><call pos:start="53:5" pos:end="53:71"><name pos:start="53:5" pos:end="53:32">cpu_register_physical_memory</name><argument_list pos:start="53:33" pos:end="53:71">(<argument pos:start="53:34" pos:end="53:47"><expr pos:start="53:34" pos:end="53:47"><name pos:start="53:34" pos:end="53:47"><name pos:start="53:34" pos:end="53:34">s</name><operator pos:start="53:35" pos:end="53:36">-&gt;</operator><name pos:start="53:37" pos:end="53:47">common_base</name></name></expr></argument>, <argument pos:start="53:50" pos:end="53:59"><expr pos:start="53:50" pos:end="53:59"><literal type="number" pos:start="53:50" pos:end="53:59">0x03ffffff</literal></expr></argument>, <argument pos:start="53:62" pos:end="53:70"><expr pos:start="53:62" pos:end="53:70"><name pos:start="53:62" pos:end="53:70">iomemtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="57:5" pos:end="63:53"><if pos:start="57:5" pos:end="59:53">if <condition pos:start="57:8" pos:end="57:27">(<expr pos:start="57:9" pos:end="57:26"><name pos:start="57:9" pos:end="57:12">base</name> <operator pos:start="57:14" pos:end="57:15">==</operator> <literal type="number" pos:start="57:17" pos:end="57:26">0x30000000</literal></expr>)</condition><block type="pseudo" pos:start="59:9" pos:end="59:53"><block_content pos:start="59:9" pos:end="59:53">

        <expr_stmt pos:start="59:9" pos:end="59:53"><expr pos:start="59:9" pos:end="59:52"><name pos:start="59:9" pos:end="59:27"><name pos:start="59:9" pos:end="59:9">s</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:15">slot</name><operator pos:start="59:16" pos:end="59:16">.</operator><name pos:start="59:17" pos:end="59:27">slot_string</name></name> <operator pos:start="59:29" pos:end="59:29">=</operator> <literal type="string" pos:start="59:31" pos:end="59:52">"PXA PC Card Socket 1"</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="61:5" pos:end="63:53">else<block type="pseudo" pos:start="63:9" pos:end="63:53"><block_content pos:start="63:9" pos:end="63:53">

        <expr_stmt pos:start="63:9" pos:end="63:53"><expr pos:start="63:9" pos:end="63:52"><name pos:start="63:9" pos:end="63:27"><name pos:start="63:9" pos:end="63:9">s</name><operator pos:start="63:10" pos:end="63:11">-&gt;</operator><name pos:start="63:12" pos:end="63:15">slot</name><operator pos:start="63:16" pos:end="63:16">.</operator><name pos:start="63:17" pos:end="63:27">slot_string</name></name> <operator pos:start="63:29" pos:end="63:29">=</operator> <literal type="string" pos:start="63:31" pos:end="63:52">"PXA PC Card Socket 0"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:69"><expr pos:start="65:5" pos:end="65:68"><name pos:start="65:5" pos:end="65:15"><name pos:start="65:5" pos:end="65:5">s</name><operator pos:start="65:6" pos:end="65:7">-&gt;</operator><name pos:start="65:8" pos:end="65:11">slot</name><operator pos:start="65:12" pos:end="65:12">.</operator><name pos:start="65:13" pos:end="65:15">irq</name></name> <operator pos:start="65:17" pos:end="65:17">=</operator> <call pos:start="65:19" pos:end="65:65"><name pos:start="65:19" pos:end="65:36">qemu_allocate_irqs</name><argument_list pos:start="65:37" pos:end="65:65">(<argument pos:start="65:38" pos:end="65:58"><expr pos:start="65:38" pos:end="65:58"><name pos:start="65:38" pos:end="65:58">pxa2xx_pcmcia_set_irq</name></expr></argument>, <argument pos:start="65:61" pos:end="65:61"><expr pos:start="65:61" pos:end="65:61"><name pos:start="65:61" pos:end="65:61">s</name></expr></argument>, <argument pos:start="65:64" pos:end="65:64"><expr pos:start="65:64" pos:end="65:64"><literal type="number" pos:start="65:64" pos:end="65:64">1</literal></expr></argument>)</argument_list></call><index pos:start="65:66" pos:end="65:68">[<expr pos:start="65:67" pos:end="65:67"><literal type="number" pos:start="65:67" pos:end="65:67">0</literal></expr>]</index></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:37"><expr pos:start="67:5" pos:end="67:36"><call pos:start="67:5" pos:end="67:36"><name pos:start="67:5" pos:end="67:26">pcmcia_socket_register</name><argument_list pos:start="67:27" pos:end="67:36">(<argument pos:start="67:28" pos:end="67:35"><expr pos:start="67:28" pos:end="67:35"><operator pos:start="67:28" pos:end="67:28">&amp;</operator><name pos:start="67:29" pos:end="67:35"><name pos:start="67:29" pos:end="67:29">s</name><operator pos:start="67:30" pos:end="67:31">-&gt;</operator><name pos:start="67:32" pos:end="67:35">slot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="71:5" pos:end="71:13">return <expr pos:start="71:12" pos:end="71:12"><name pos:start="71:12" pos:end="71:12">s</name></expr>;</return>

</block_content>}</block></function>
</unit>
