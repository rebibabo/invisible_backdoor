<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25832.c" pos:tabs="8"><function pos:start="1:1" pos:end="991:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:27">ff_h264_decode_mb_cavlc</name><parameter_list pos:start="1:28" pos:end="1:43">(<parameter pos:start="1:29" pos:end="1:42"><decl pos:start="1:29" pos:end="1:42"><type pos:start="1:29" pos:end="1:41"><name pos:start="1:29" pos:end="1:39">H264Context</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">h</name></decl></parameter>)</parameter_list><block pos:start="1:44" pos:end="991:1">{<block_content pos:start="3:5" pos:end="989:13">

    <decl_stmt pos:start="3:5" pos:end="3:37"><decl pos:start="3:5" pos:end="3:36"><type pos:start="3:5" pos:end="3:26"><name pos:start="3:5" pos:end="3:18">MpegEncContext</name> <modifier pos:start="3:20" pos:end="3:20">*</modifier> <specifier pos:start="3:22" pos:end="3:26">const</specifier></type> <name pos:start="3:28" pos:end="3:28">s</name> <init pos:start="3:30" pos:end="3:36">= <expr pos:start="3:32" pos:end="3:36"><operator pos:start="3:32" pos:end="3:32">&amp;</operator><name pos:start="3:33" pos:end="3:36"><name pos:start="3:33" pos:end="3:33">h</name><operator pos:start="3:34" pos:end="3:35">-&gt;</operator><name pos:start="3:36" pos:end="3:36">s</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:14"><decl pos:start="5:5" pos:end="5:13"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:13">mb_xy</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:23">partition_count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:16">int</name></type> <name pos:start="9:18" pos:end="9:24">mb_type</name></decl>, <decl pos:start="9:27" pos:end="9:29"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:27" pos:end="9:29">cbp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:50"><decl pos:start="11:5" pos:end="11:49"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:22">dct8x8_allowed</name><init pos:start="11:23" pos:end="11:49">= <expr pos:start="11:25" pos:end="11:49"><name pos:start="11:25" pos:end="11:49"><name pos:start="11:25" pos:end="11:25">h</name><operator pos:start="11:26" pos:end="11:27">-&gt;</operator><name pos:start="11:28" pos:end="11:30">pps</name><operator pos:start="11:31" pos:end="11:31">.</operator><name pos:start="11:32" pos:end="11:49">transform_8x8_mode</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:87"><decl pos:start="13:5" pos:end="13:86"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:21">decode_chroma</name> <init pos:start="13:23" pos:end="13:86">= <expr pos:start="13:25" pos:end="13:86"><name pos:start="13:25" pos:end="13:48"><name pos:start="13:25" pos:end="13:25">h</name><operator pos:start="13:26" pos:end="13:27">-&gt;</operator><name pos:start="13:28" pos:end="13:30">sps</name><operator pos:start="13:31" pos:end="13:31">.</operator><name pos:start="13:32" pos:end="13:48">chroma_format_idc</name></name> <operator pos:start="13:50" pos:end="13:51">==</operator> <literal type="number" pos:start="13:53" pos:end="13:53">1</literal> <operator pos:start="13:55" pos:end="13:56">||</operator> <name pos:start="13:58" pos:end="13:81"><name pos:start="13:58" pos:end="13:58">h</name><operator pos:start="13:59" pos:end="13:60">-&gt;</operator><name pos:start="13:61" pos:end="13:63">sps</name><operator pos:start="13:64" pos:end="13:64">.</operator><name pos:start="13:65" pos:end="13:81">chroma_format_idc</name></name> <operator pos:start="13:83" pos:end="13:84">==</operator> <literal type="number" pos:start="13:86" pos:end="13:86">2</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:43"><decl pos:start="15:5" pos:end="15:42"><type pos:start="15:5" pos:end="15:13"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:13">int</name></type> <name pos:start="15:15" pos:end="15:25">pixel_shift</name> <init pos:start="15:27" pos:end="15:42">= <expr pos:start="15:29" pos:end="15:42"><name pos:start="15:29" pos:end="15:42"><name pos:start="15:29" pos:end="15:29">h</name><operator pos:start="15:30" pos:end="15:31">-&gt;</operator><name pos:start="15:32" pos:end="15:42">pixel_shift</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:54"><expr pos:start="19:5" pos:end="19:53"><name pos:start="19:5" pos:end="19:9">mb_xy</name> <operator pos:start="19:11" pos:end="19:11">=</operator> <name pos:start="19:13" pos:end="19:20"><name pos:start="19:13" pos:end="19:13">h</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:20">mb_xy</name></name> <operator pos:start="19:22" pos:end="19:22">=</operator> <name pos:start="19:24" pos:end="19:30"><name pos:start="19:24" pos:end="19:24">s</name><operator pos:start="19:25" pos:end="19:26">-&gt;</operator><name pos:start="19:27" pos:end="19:30">mb_x</name></name> <operator pos:start="19:32" pos:end="19:32">+</operator> <name pos:start="19:34" pos:end="19:40"><name pos:start="19:34" pos:end="19:34">s</name><operator pos:start="19:35" pos:end="19:36">-&gt;</operator><name pos:start="19:37" pos:end="19:40">mb_y</name></name><operator pos:start="19:41" pos:end="19:41">*</operator><name pos:start="19:42" pos:end="19:53"><name pos:start="19:42" pos:end="19:42">s</name><operator pos:start="19:43" pos:end="19:44">-&gt;</operator><name pos:start="19:45" pos:end="19:53">mb_stride</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:75"><expr pos:start="23:5" pos:end="23:74"><call pos:start="23:5" pos:end="23:74"><name pos:start="23:5" pos:end="23:11">tprintf</name><argument_list pos:start="23:12" pos:end="23:74">(<argument pos:start="23:13" pos:end="23:20"><expr pos:start="23:13" pos:end="23:20"><name pos:start="23:13" pos:end="23:20"><name pos:start="23:13" pos:end="23:13">s</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:20">avctx</name></name></expr></argument>, <argument pos:start="23:23" pos:end="23:41"><expr pos:start="23:23" pos:end="23:41"><literal type="string" pos:start="23:23" pos:end="23:41">"pic:%d mb:%d/%d\n"</literal></expr></argument>, <argument pos:start="23:44" pos:end="23:55"><expr pos:start="23:44" pos:end="23:55"><name pos:start="23:44" pos:end="23:55"><name pos:start="23:44" pos:end="23:44">h</name><operator pos:start="23:45" pos:end="23:46">-&gt;</operator><name pos:start="23:47" pos:end="23:55">frame_num</name></name></expr></argument>, <argument pos:start="23:58" pos:end="23:64"><expr pos:start="23:58" pos:end="23:64"><name pos:start="23:58" pos:end="23:64"><name pos:start="23:58" pos:end="23:58">s</name><operator pos:start="23:59" pos:end="23:60">-&gt;</operator><name pos:start="23:61" pos:end="23:64">mb_x</name></name></expr></argument>, <argument pos:start="23:67" pos:end="23:73"><expr pos:start="23:67" pos:end="23:73"><name pos:start="23:67" pos:end="23:73"><name pos:start="23:67" pos:end="23:67">s</name><operator pos:start="23:68" pos:end="23:69">-&gt;</operator><name pos:start="23:70" pos:end="23:73">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:12"><expr pos:start="25:5" pos:end="25:11"><name pos:start="25:5" pos:end="25:7">cbp</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <literal type="number" pos:start="25:11" pos:end="25:11">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="25:14" pos:end="27:32">/* avoid warning. FIXME: find a solution without slowing

                down the code */</comment>

    <if_stmt pos:start="29:5" pos:end="53:5"><if pos:start="29:5" pos:end="53:5">if<condition pos:start="29:7" pos:end="29:46">(<expr pos:start="29:8" pos:end="29:45"><name pos:start="29:8" pos:end="29:24"><name pos:start="29:8" pos:end="29:8">h</name><operator pos:start="29:9" pos:end="29:10">-&gt;</operator><name pos:start="29:11" pos:end="29:24">slice_type_nos</name></name> <operator pos:start="29:26" pos:end="29:27">!=</operator> <name pos:start="29:29" pos:end="29:45">AV_PICTURE_TYPE_I</name></expr>)</condition><block pos:start="29:47" pos:end="53:5">{<block_content pos:start="31:9" pos:end="51:9">

        <if_stmt pos:start="31:9" pos:end="33:50"><if pos:start="31:9" pos:end="33:50">if<condition pos:start="31:11" pos:end="31:30">(<expr pos:start="31:12" pos:end="31:29"><name pos:start="31:12" pos:end="31:25"><name pos:start="31:12" pos:end="31:12">s</name><operator pos:start="31:13" pos:end="31:14">-&gt;</operator><name pos:start="31:15" pos:end="31:25">mb_skip_run</name></name><operator pos:start="31:26" pos:end="31:27">==</operator><operator pos:start="31:28" pos:end="31:28">-</operator><literal type="number" pos:start="31:29" pos:end="31:29">1</literal></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:50"><block_content pos:start="33:13" pos:end="33:50">

            <expr_stmt pos:start="33:13" pos:end="33:50"><expr pos:start="33:13" pos:end="33:49"><name pos:start="33:13" pos:end="33:26"><name pos:start="33:13" pos:end="33:13">s</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:26">mb_skip_run</name></name><operator pos:start="33:27" pos:end="33:27">=</operator> <call pos:start="33:29" pos:end="33:49"><name pos:start="33:29" pos:end="33:41">get_ue_golomb</name><argument_list pos:start="33:42" pos:end="33:49">(<argument pos:start="33:43" pos:end="33:48"><expr pos:start="33:43" pos:end="33:48"><operator pos:start="33:43" pos:end="33:43">&amp;</operator><name pos:start="33:44" pos:end="33:48"><name pos:start="33:44" pos:end="33:44">s</name><operator pos:start="33:45" pos:end="33:46">-&gt;</operator><name pos:start="33:47" pos:end="33:48">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="37:9" pos:end="51:9"><if pos:start="37:9" pos:end="51:9">if <condition pos:start="37:12" pos:end="37:29">(<expr pos:start="37:13" pos:end="37:28"><name pos:start="37:13" pos:end="37:26"><name pos:start="37:13" pos:end="37:13">s</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:26">mb_skip_run</name></name><operator pos:start="37:27" pos:end="37:28">--</operator></expr>)</condition> <block pos:start="37:31" pos:end="51:9">{<block_content pos:start="39:13" pos:end="49:21">

            <if_stmt pos:start="39:13" pos:end="45:13"><if pos:start="39:13" pos:end="45:13">if<condition pos:start="39:15" pos:end="39:47">(<expr pos:start="39:16" pos:end="39:46"><name pos:start="39:16" pos:end="39:26">FRAME_MBAFF</name> <operator pos:start="39:28" pos:end="39:29">&amp;&amp;</operator> <operator pos:start="39:31" pos:end="39:31">(</operator><name pos:start="39:32" pos:end="39:38"><name pos:start="39:32" pos:end="39:32">s</name><operator pos:start="39:33" pos:end="39:34">-&gt;</operator><name pos:start="39:35" pos:end="39:38">mb_y</name></name><operator pos:start="39:39" pos:end="39:39">&amp;</operator><literal type="number" pos:start="39:40" pos:end="39:40">1</literal><operator pos:start="39:41" pos:end="39:41">)</operator> <operator pos:start="39:43" pos:end="39:44">==</operator> <literal type="number" pos:start="39:46" pos:end="39:46">0</literal></expr>)</condition><block pos:start="39:48" pos:end="45:13">{<block_content pos:start="41:17" pos:end="43:80">

                <if_stmt pos:start="41:17" pos:end="43:80"><if pos:start="41:17" pos:end="43:80">if<condition pos:start="41:19" pos:end="41:37">(<expr pos:start="41:20" pos:end="41:36"><name pos:start="41:20" pos:end="41:33"><name pos:start="41:20" pos:end="41:20">s</name><operator pos:start="41:21" pos:end="41:22">-&gt;</operator><name pos:start="41:23" pos:end="41:33">mb_skip_run</name></name><operator pos:start="41:34" pos:end="41:35">==</operator><literal type="number" pos:start="41:36" pos:end="41:36">0</literal></expr>)</condition><block type="pseudo" pos:start="43:21" pos:end="43:80"><block_content pos:start="43:21" pos:end="43:80">

                    <expr_stmt pos:start="43:21" pos:end="43:80"><expr pos:start="43:21" pos:end="43:79"><name pos:start="43:21" pos:end="43:31"><name pos:start="43:21" pos:end="43:21">h</name><operator pos:start="43:22" pos:end="43:23">-&gt;</operator><name pos:start="43:24" pos:end="43:31">mb_mbaff</name></name> <operator pos:start="43:33" pos:end="43:33">=</operator> <name pos:start="43:35" pos:end="43:59"><name pos:start="43:35" pos:end="43:35">h</name><operator pos:start="43:36" pos:end="43:37">-&gt;</operator><name pos:start="43:38" pos:end="43:59">mb_field_decoding_flag</name></name> <operator pos:start="43:61" pos:end="43:61">=</operator> <call pos:start="43:63" pos:end="43:79"><name pos:start="43:63" pos:end="43:71">get_bits1</name><argument_list pos:start="43:72" pos:end="43:79">(<argument pos:start="43:73" pos:end="43:78"><expr pos:start="43:73" pos:end="43:78"><operator pos:start="43:73" pos:end="43:73">&amp;</operator><name pos:start="43:74" pos:end="43:78"><name pos:start="43:74" pos:end="43:74">s</name><operator pos:start="43:75" pos:end="43:76">-&gt;</operator><name pos:start="43:77" pos:end="43:78">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:30"><expr pos:start="47:13" pos:end="47:29"><call pos:start="47:13" pos:end="47:29"><name pos:start="47:13" pos:end="47:26">decode_mb_skip</name><argument_list pos:start="47:27" pos:end="47:29">(<argument pos:start="47:28" pos:end="47:28"><expr pos:start="47:28" pos:end="47:28"><name pos:start="47:28" pos:end="47:28">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="49:13" pos:end="49:21">return <expr pos:start="49:20" pos:end="49:20"><literal type="number" pos:start="49:20" pos:end="49:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="55:5" pos:end="61:5"><if pos:start="55:5" pos:end="61:5">if<condition pos:start="55:7" pos:end="55:19">(<expr pos:start="55:8" pos:end="55:18"><name pos:start="55:8" pos:end="55:18">FRAME_MBAFF</name></expr>)</condition><block pos:start="55:20" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:72">

        <if_stmt pos:start="57:9" pos:end="59:72"><if pos:start="57:9" pos:end="59:72">if<condition pos:start="57:11" pos:end="57:30">( <expr pos:start="57:13" pos:end="57:28"><operator pos:start="57:13" pos:end="57:13">(</operator><name pos:start="57:14" pos:end="57:20"><name pos:start="57:14" pos:end="57:14">s</name><operator pos:start="57:15" pos:end="57:16">-&gt;</operator><name pos:start="57:17" pos:end="57:20">mb_y</name></name><operator pos:start="57:21" pos:end="57:21">&amp;</operator><literal type="number" pos:start="57:22" pos:end="57:22">1</literal><operator pos:start="57:23" pos:end="57:23">)</operator> <operator pos:start="57:25" pos:end="57:26">==</operator> <literal type="number" pos:start="57:28" pos:end="57:28">0</literal></expr> )</condition><block type="pseudo" pos:start="59:13" pos:end="59:72"><block_content pos:start="59:13" pos:end="59:72">

            <expr_stmt pos:start="59:13" pos:end="59:72"><expr pos:start="59:13" pos:end="59:71"><name pos:start="59:13" pos:end="59:23"><name pos:start="59:13" pos:end="59:13">h</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:23">mb_mbaff</name></name> <operator pos:start="59:25" pos:end="59:25">=</operator> <name pos:start="59:27" pos:end="59:51"><name pos:start="59:27" pos:end="59:27">h</name><operator pos:start="59:28" pos:end="59:29">-&gt;</operator><name pos:start="59:30" pos:end="59:51">mb_field_decoding_flag</name></name> <operator pos:start="59:53" pos:end="59:53">=</operator> <call pos:start="59:55" pos:end="59:71"><name pos:start="59:55" pos:end="59:63">get_bits1</name><argument_list pos:start="59:64" pos:end="59:71">(<argument pos:start="59:65" pos:end="59:70"><expr pos:start="59:65" pos:end="59:70"><operator pos:start="59:65" pos:end="59:65">&amp;</operator><name pos:start="59:66" pos:end="59:70"><name pos:start="59:66" pos:end="59:66">s</name><operator pos:start="59:67" pos:end="59:68">-&gt;</operator><name pos:start="59:69" pos:end="59:70">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:26"><expr pos:start="65:5" pos:end="65:25"><name pos:start="65:5" pos:end="65:22"><name pos:start="65:5" pos:end="65:5">h</name><operator pos:start="65:6" pos:end="65:7">-&gt;</operator><name pos:start="65:8" pos:end="65:22">prev_mb_skipped</name></name><operator pos:start="65:23" pos:end="65:23">=</operator> <literal type="number" pos:start="65:25" pos:end="65:25">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:35"><expr pos:start="69:5" pos:end="69:34"><name pos:start="69:5" pos:end="69:11">mb_type</name><operator pos:start="69:12" pos:end="69:12">=</operator> <call pos:start="69:14" pos:end="69:34"><name pos:start="69:14" pos:end="69:26">get_ue_golomb</name><argument_list pos:start="69:27" pos:end="69:34">(<argument pos:start="69:28" pos:end="69:33"><expr pos:start="69:28" pos:end="69:33"><operator pos:start="69:28" pos:end="69:28">&amp;</operator><name pos:start="69:29" pos:end="69:33"><name pos:start="69:29" pos:end="69:29">s</name><operator pos:start="69:30" pos:end="69:31">-&gt;</operator><name pos:start="69:32" pos:end="69:33">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="71:5" pos:end="129:5"><if pos:start="71:5" pos:end="87:5">if<condition pos:start="71:7" pos:end="71:46">(<expr pos:start="71:8" pos:end="71:45"><name pos:start="71:8" pos:end="71:24"><name pos:start="71:8" pos:end="71:8">h</name><operator pos:start="71:9" pos:end="71:10">-&gt;</operator><name pos:start="71:11" pos:end="71:24">slice_type_nos</name></name> <operator pos:start="71:26" pos:end="71:27">==</operator> <name pos:start="71:29" pos:end="71:45">AV_PICTURE_TYPE_B</name></expr>)</condition><block pos:start="71:47" pos:end="87:5">{<block_content pos:start="73:9" pos:end="85:9">

        <if_stmt pos:start="73:9" pos:end="85:9"><if pos:start="73:9" pos:end="79:9">if<condition pos:start="73:11" pos:end="73:24">(<expr pos:start="73:12" pos:end="73:23"><name pos:start="73:12" pos:end="73:18">mb_type</name> <operator pos:start="73:20" pos:end="73:20">&lt;</operator> <literal type="number" pos:start="73:22" pos:end="73:23">23</literal></expr>)</condition><block pos:start="73:25" pos:end="79:9">{<block_content pos:start="75:13" pos:end="77:58">

            <expr_stmt pos:start="75:13" pos:end="75:69"><expr pos:start="75:13" pos:end="75:68"><name pos:start="75:13" pos:end="75:27">partition_count</name><operator pos:start="75:28" pos:end="75:28">=</operator> <name pos:start="75:30" pos:end="75:52"><name pos:start="75:30" pos:end="75:43">b_mb_type_info</name><index pos:start="75:44" pos:end="75:52">[<expr pos:start="75:45" pos:end="75:51"><name pos:start="75:45" pos:end="75:51">mb_type</name></expr>]</index></name><operator pos:start="75:53" pos:end="75:53">.</operator><name pos:start="75:54" pos:end="75:68">partition_count</name></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:58"><expr pos:start="77:13" pos:end="77:57"><name pos:start="77:13" pos:end="77:19">mb_type</name><operator pos:start="77:20" pos:end="77:20">=</operator>         <name pos:start="77:30" pos:end="77:52"><name pos:start="77:30" pos:end="77:43">b_mb_type_info</name><index pos:start="77:44" pos:end="77:52">[<expr pos:start="77:45" pos:end="77:51"><name pos:start="77:45" pos:end="77:51">mb_type</name></expr>]</index></name><operator pos:start="77:53" pos:end="77:53">.</operator><name pos:start="77:54" pos:end="77:57">type</name></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="79:10" pos:end="85:9">else<block pos:start="79:14" pos:end="85:9">{<block_content pos:start="81:13" pos:end="83:33">

            <expr_stmt pos:start="81:13" pos:end="81:26"><expr pos:start="81:13" pos:end="81:25"><name pos:start="81:13" pos:end="81:19">mb_type</name> <operator pos:start="81:21" pos:end="81:22">-=</operator> <literal type="number" pos:start="81:24" pos:end="81:25">23</literal></expr>;</expr_stmt>

            <goto pos:start="83:13" pos:end="83:33">goto <name pos:start="83:18" pos:end="83:32">decode_intra_mb</name>;</goto>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if><if type="elseif" pos:start="87:6" pos:end="103:5">else if<condition pos:start="87:13" pos:end="87:52">(<expr pos:start="87:14" pos:end="87:51"><name pos:start="87:14" pos:end="87:30"><name pos:start="87:14" pos:end="87:14">h</name><operator pos:start="87:15" pos:end="87:16">-&gt;</operator><name pos:start="87:17" pos:end="87:30">slice_type_nos</name></name> <operator pos:start="87:32" pos:end="87:33">==</operator> <name pos:start="87:35" pos:end="87:51">AV_PICTURE_TYPE_P</name></expr>)</condition><block pos:start="87:53" pos:end="103:5">{<block_content pos:start="89:9" pos:end="101:9">

        <if_stmt pos:start="89:9" pos:end="101:9"><if pos:start="89:9" pos:end="95:9">if<condition pos:start="89:11" pos:end="89:23">(<expr pos:start="89:12" pos:end="89:22"><name pos:start="89:12" pos:end="89:18">mb_type</name> <operator pos:start="89:20" pos:end="89:20">&lt;</operator> <literal type="number" pos:start="89:22" pos:end="89:22">5</literal></expr>)</condition><block pos:start="89:24" pos:end="95:9">{<block_content pos:start="91:13" pos:end="93:58">

            <expr_stmt pos:start="91:13" pos:end="91:69"><expr pos:start="91:13" pos:end="91:68"><name pos:start="91:13" pos:end="91:27">partition_count</name><operator pos:start="91:28" pos:end="91:28">=</operator> <name pos:start="91:30" pos:end="91:52"><name pos:start="91:30" pos:end="91:43">p_mb_type_info</name><index pos:start="91:44" pos:end="91:52">[<expr pos:start="91:45" pos:end="91:51"><name pos:start="91:45" pos:end="91:51">mb_type</name></expr>]</index></name><operator pos:start="91:53" pos:end="91:53">.</operator><name pos:start="91:54" pos:end="91:68">partition_count</name></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:58"><expr pos:start="93:13" pos:end="93:57"><name pos:start="93:13" pos:end="93:19">mb_type</name><operator pos:start="93:20" pos:end="93:20">=</operator>         <name pos:start="93:30" pos:end="93:52"><name pos:start="93:30" pos:end="93:43">p_mb_type_info</name><index pos:start="93:44" pos:end="93:52">[<expr pos:start="93:45" pos:end="93:51"><name pos:start="93:45" pos:end="93:51">mb_type</name></expr>]</index></name><operator pos:start="93:53" pos:end="93:53">.</operator><name pos:start="93:54" pos:end="93:57">type</name></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="95:10" pos:end="101:9">else<block pos:start="95:14" pos:end="101:9">{<block_content pos:start="97:13" pos:end="99:33">

            <expr_stmt pos:start="97:13" pos:end="97:25"><expr pos:start="97:13" pos:end="97:24"><name pos:start="97:13" pos:end="97:19">mb_type</name> <operator pos:start="97:21" pos:end="97:22">-=</operator> <literal type="number" pos:start="97:24" pos:end="97:24">5</literal></expr>;</expr_stmt>

            <goto pos:start="99:13" pos:end="99:33">goto <name pos:start="99:18" pos:end="99:32">decode_intra_mb</name>;</goto>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if><else pos:start="103:6" pos:end="129:5">else<block pos:start="103:10" pos:end="129:5">{<block_content pos:start="105:8" pos:end="127:46">

       <expr_stmt pos:start="105:8" pos:end="105:54"><expr pos:start="105:8" pos:end="105:53"><call pos:start="105:8" pos:end="105:53"><name pos:start="105:8" pos:end="105:13">assert</name><argument_list pos:start="105:14" pos:end="105:53">(<argument pos:start="105:15" pos:end="105:52"><expr pos:start="105:15" pos:end="105:52"><name pos:start="105:15" pos:end="105:31"><name pos:start="105:15" pos:end="105:15">h</name><operator pos:start="105:16" pos:end="105:17">-&gt;</operator><name pos:start="105:18" pos:end="105:31">slice_type_nos</name></name> <operator pos:start="105:33" pos:end="105:34">==</operator> <name pos:start="105:36" pos:end="105:52">AV_PICTURE_TYPE_I</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="107:9" pos:end="109:22"><if pos:start="107:9" pos:end="109:22">if<condition pos:start="107:11" pos:end="107:58">(<expr pos:start="107:12" pos:end="107:57"><name pos:start="107:12" pos:end="107:24"><name pos:start="107:12" pos:end="107:12">h</name><operator pos:start="107:13" pos:end="107:14">-&gt;</operator><name pos:start="107:15" pos:end="107:24">slice_type</name></name> <operator pos:start="107:26" pos:end="107:27">==</operator> <name pos:start="107:29" pos:end="107:46">AV_PICTURE_TYPE_SI</name> <operator pos:start="107:48" pos:end="107:49">&amp;&amp;</operator> <name pos:start="107:51" pos:end="107:57">mb_type</name></expr>)</condition><block type="pseudo" pos:start="109:13" pos:end="109:22"><block_content pos:start="109:13" pos:end="109:22">

            <expr_stmt pos:start="109:13" pos:end="109:22"><expr pos:start="109:13" pos:end="109:21"><name pos:start="109:13" pos:end="109:19">mb_type</name><operator pos:start="109:20" pos:end="109:21">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label pos:start="111:1" pos:end="111:16"><name pos:start="111:1" pos:end="111:15">decode_intra_mb</name>:</label>

        <if_stmt pos:start="113:9" pos:end="119:9"><if pos:start="113:9" pos:end="119:9">if<condition pos:start="113:11" pos:end="113:24">(<expr pos:start="113:12" pos:end="113:23"><name pos:start="113:12" pos:end="113:18">mb_type</name> <operator pos:start="113:20" pos:end="113:20">&gt;</operator> <literal type="number" pos:start="113:22" pos:end="113:23">25</literal></expr>)</condition><block pos:start="113:25" pos:end="119:9">{<block_content pos:start="115:13" pos:end="117:22">

            <expr_stmt pos:start="115:13" pos:end="115:160"><expr pos:start="115:13" pos:end="115:159"><call pos:start="115:13" pos:end="115:159"><name pos:start="115:13" pos:end="115:18">av_log</name><argument_list pos:start="115:19" pos:end="115:159">(<argument pos:start="115:20" pos:end="115:29"><expr pos:start="115:20" pos:end="115:29"><name pos:start="115:20" pos:end="115:29"><name pos:start="115:20" pos:end="115:20">h</name><operator pos:start="115:21" pos:end="115:22">-&gt;</operator><name pos:start="115:23" pos:end="115:23">s</name><operator pos:start="115:24" pos:end="115:24">.</operator><name pos:start="115:25" pos:end="115:29">avctx</name></name></expr></argument>, <argument pos:start="115:32" pos:end="115:43"><expr pos:start="115:32" pos:end="115:43"><name pos:start="115:32" pos:end="115:43">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="115:46" pos:end="115:90"><expr pos:start="115:46" pos:end="115:90"><literal type="string" pos:start="115:46" pos:end="115:90">"mb_type %d in %c slice too large at %d %d\n"</literal></expr></argument>, <argument pos:start="115:93" pos:end="115:99"><expr pos:start="115:93" pos:end="115:99"><name pos:start="115:93" pos:end="115:99">mb_type</name></expr></argument>, <argument pos:start="115:102" pos:end="115:140"><expr pos:start="115:102" pos:end="115:140"><call pos:start="115:102" pos:end="115:140"><name pos:start="115:102" pos:end="115:125">av_get_picture_type_char</name><argument_list pos:start="115:126" pos:end="115:140">(<argument pos:start="115:127" pos:end="115:139"><expr pos:start="115:127" pos:end="115:139"><name pos:start="115:127" pos:end="115:139"><name pos:start="115:127" pos:end="115:127">h</name><operator pos:start="115:128" pos:end="115:129">-&gt;</operator><name pos:start="115:130" pos:end="115:139">slice_type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="115:143" pos:end="115:149"><expr pos:start="115:143" pos:end="115:149"><name pos:start="115:143" pos:end="115:149"><name pos:start="115:143" pos:end="115:143">s</name><operator pos:start="115:144" pos:end="115:145">-&gt;</operator><name pos:start="115:146" pos:end="115:149">mb_x</name></name></expr></argument>, <argument pos:start="115:152" pos:end="115:158"><expr pos:start="115:152" pos:end="115:158"><name pos:start="115:152" pos:end="115:158"><name pos:start="115:152" pos:end="115:152">s</name><operator pos:start="115:153" pos:end="115:154">-&gt;</operator><name pos:start="115:155" pos:end="115:158">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="117:13" pos:end="117:22">return <expr pos:start="117:20" pos:end="117:21"><operator pos:start="117:20" pos:end="117:20">-</operator><literal type="number" pos:start="117:21" pos:end="117:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:26"><expr pos:start="121:9" pos:end="121:25"><name pos:start="121:9" pos:end="121:23">partition_count</name><operator pos:start="121:24" pos:end="121:24">=</operator><literal type="number" pos:start="121:25" pos:end="121:25">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:41"><expr pos:start="123:9" pos:end="123:40"><name pos:start="123:9" pos:end="123:11">cbp</name><operator pos:start="123:12" pos:end="123:12">=</operator> <name pos:start="123:14" pos:end="123:36"><name pos:start="123:14" pos:end="123:27">i_mb_type_info</name><index pos:start="123:28" pos:end="123:36">[<expr pos:start="123:29" pos:end="123:35"><name pos:start="123:29" pos:end="123:35">mb_type</name></expr>]</index></name><operator pos:start="123:37" pos:end="123:37">.</operator><name pos:start="123:38" pos:end="123:40">cbp</name></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:67"><expr pos:start="125:9" pos:end="125:66"><name pos:start="125:9" pos:end="125:31"><name pos:start="125:9" pos:end="125:9">h</name><operator pos:start="125:10" pos:end="125:11">-&gt;</operator><name pos:start="125:12" pos:end="125:31">intra16x16_pred_mode</name></name><operator pos:start="125:32" pos:end="125:32">=</operator> <name pos:start="125:34" pos:end="125:56"><name pos:start="125:34" pos:end="125:47">i_mb_type_info</name><index pos:start="125:48" pos:end="125:56">[<expr pos:start="125:49" pos:end="125:55"><name pos:start="125:49" pos:end="125:55">mb_type</name></expr>]</index></name><operator pos:start="125:57" pos:end="125:57">.</operator><name pos:start="125:58" pos:end="125:66">pred_mode</name></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:46"><expr pos:start="127:9" pos:end="127:45"><name pos:start="127:9" pos:end="127:15">mb_type</name><operator pos:start="127:16" pos:end="127:16">=</operator> <name pos:start="127:18" pos:end="127:40"><name pos:start="127:18" pos:end="127:31">i_mb_type_info</name><index pos:start="127:32" pos:end="127:40">[<expr pos:start="127:33" pos:end="127:39"><name pos:start="127:33" pos:end="127:39">mb_type</name></expr>]</index></name><operator pos:start="127:41" pos:end="127:41">.</operator><name pos:start="127:42" pos:end="127:45">type</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="133:5" pos:end="135:38"><if pos:start="133:5" pos:end="135:38">if<condition pos:start="133:7" pos:end="133:16">(<expr pos:start="133:8" pos:end="133:15"><name pos:start="133:8" pos:end="133:15">MB_FIELD</name></expr>)</condition><block type="pseudo" pos:start="135:9" pos:end="135:38"><block_content pos:start="135:9" pos:end="135:38">

        <expr_stmt pos:start="135:9" pos:end="135:38"><expr pos:start="135:9" pos:end="135:37"><name pos:start="135:9" pos:end="135:15">mb_type</name> <operator pos:start="135:17" pos:end="135:18">|=</operator> <name pos:start="135:20" pos:end="135:37">MB_TYPE_INTERLACED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="139:5" pos:end="139:42"><expr pos:start="139:5" pos:end="139:41"><name pos:start="139:5" pos:end="139:27"><name pos:start="139:5" pos:end="139:5">h</name><operator pos:start="139:6" pos:end="139:7">-&gt;</operator><name pos:start="139:8" pos:end="139:18">slice_table</name><index pos:start="139:19" pos:end="139:27">[ <expr pos:start="139:21" pos:end="139:25"><name pos:start="139:21" pos:end="139:25">mb_xy</name></expr> ]</index></name><operator pos:start="139:28" pos:end="139:28">=</operator> <name pos:start="139:30" pos:end="139:41"><name pos:start="139:30" pos:end="139:30">h</name><operator pos:start="139:31" pos:end="139:32">-&gt;</operator><name pos:start="139:33" pos:end="139:41">slice_num</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="143:5" pos:end="183:5"><if pos:start="143:5" pos:end="183:5">if<condition pos:start="143:7" pos:end="143:29">(<expr pos:start="143:8" pos:end="143:28"><call pos:start="143:8" pos:end="143:28"><name pos:start="143:8" pos:end="143:19">IS_INTRA_PCM</name><argument_list pos:start="143:20" pos:end="143:28">(<argument pos:start="143:21" pos:end="143:27"><expr pos:start="143:21" pos:end="143:27"><name pos:start="143:21" pos:end="143:27">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="143:30" pos:end="183:5">{<block_content pos:start="145:9" pos:end="181:17">

        <decl_stmt pos:start="145:9" pos:end="145:23"><decl pos:start="145:9" pos:end="145:22"><type pos:start="145:9" pos:end="145:20"><name pos:start="145:9" pos:end="145:16">unsigned</name> <name pos:start="145:18" pos:end="145:20">int</name></type> <name pos:start="145:22" pos:end="145:22">x</name></decl>;</decl_stmt>

        <decl_stmt pos:start="147:9" pos:end="147:62"><decl pos:start="147:9" pos:end="147:61"><type pos:start="147:9" pos:end="147:29"><specifier pos:start="147:9" pos:end="147:14">static</specifier> <specifier pos:start="147:16" pos:end="147:20">const</specifier> <name pos:start="147:22" pos:end="147:29">uint16_t</name></type> <name pos:start="147:31" pos:end="147:41"><name pos:start="147:31" pos:end="147:38">mb_sizes</name><index pos:start="147:39" pos:end="147:41">[<expr pos:start="147:40" pos:end="147:40"><literal type="number" pos:start="147:40" pos:end="147:40">4</literal></expr>]</index></name> <init pos:start="147:43" pos:end="147:61">= <expr pos:start="147:45" pos:end="147:61"><block pos:start="147:45" pos:end="147:61">{<expr pos:start="147:46" pos:end="147:48"><literal type="number" pos:start="147:46" pos:end="147:48">256</literal></expr>,<expr pos:start="147:50" pos:end="147:52"><literal type="number" pos:start="147:50" pos:end="147:52">384</literal></expr>,<expr pos:start="147:54" pos:end="147:56"><literal type="number" pos:start="147:54" pos:end="147:56">512</literal></expr>,<expr pos:start="147:58" pos:end="147:60"><literal type="number" pos:start="147:58" pos:end="147:60">768</literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="149:9" pos:end="149:90"><decl pos:start="149:9" pos:end="149:89"><type pos:start="149:9" pos:end="149:17"><specifier pos:start="149:9" pos:end="149:13">const</specifier> <name pos:start="149:15" pos:end="149:17">int</name></type> <name pos:start="149:19" pos:end="149:25">mb_size</name> <init pos:start="149:27" pos:end="149:89">= <expr pos:start="149:29" pos:end="149:89"><name pos:start="149:29" pos:end="149:62"><name pos:start="149:29" pos:end="149:36">mb_sizes</name><index pos:start="149:37" pos:end="149:62">[<expr pos:start="149:38" pos:end="149:61"><name pos:start="149:38" pos:end="149:61"><name pos:start="149:38" pos:end="149:38">h</name><operator pos:start="149:39" pos:end="149:40">-&gt;</operator><name pos:start="149:41" pos:end="149:43">sps</name><operator pos:start="149:44" pos:end="149:44">.</operator><name pos:start="149:45" pos:end="149:61">chroma_format_idc</name></name></expr>]</index></name><operator pos:start="149:63" pos:end="149:63">*</operator><name pos:start="149:64" pos:end="149:84"><name pos:start="149:64" pos:end="149:64">h</name><operator pos:start="149:65" pos:end="149:66">-&gt;</operator><name pos:start="149:67" pos:end="149:69">sps</name><operator pos:start="149:70" pos:end="149:70">.</operator><name pos:start="149:71" pos:end="149:84">bit_depth_luma</name></name> <operator pos:start="149:86" pos:end="149:87">&gt;&gt;</operator> <literal type="number" pos:start="149:89" pos:end="149:89">3</literal></expr></init></decl>;</decl_stmt>



        <comment type="line" pos:start="153:9" pos:end="153:73">// We assume these blocks are very rare so we do not optimize it.</comment>

        <expr_stmt pos:start="155:9" pos:end="155:31"><expr pos:start="155:9" pos:end="155:30"><call pos:start="155:9" pos:end="155:30"><name pos:start="155:9" pos:end="155:22">align_get_bits</name><argument_list pos:start="155:23" pos:end="155:30">(<argument pos:start="155:24" pos:end="155:29"><expr pos:start="155:24" pos:end="155:29"><operator pos:start="155:24" pos:end="155:24">&amp;</operator><name pos:start="155:25" pos:end="155:29"><name pos:start="155:25" pos:end="155:25">s</name><operator pos:start="155:26" pos:end="155:27">-&gt;</operator><name pos:start="155:28" pos:end="155:29">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="line" pos:start="159:9" pos:end="159:76">// The pixels are stored in the same order as levels in h-&gt;mb array.</comment>

        <for pos:start="161:9" pos:end="165:9">for<control pos:start="161:12" pos:end="161:34">(<init pos:start="161:13" pos:end="161:16"><expr pos:start="161:13" pos:end="161:15"><name pos:start="161:13" pos:end="161:13">x</name><operator pos:start="161:14" pos:end="161:14">=</operator><literal type="number" pos:start="161:15" pos:end="161:15">0</literal></expr>;</init> <condition pos:start="161:18" pos:end="161:29"><expr pos:start="161:18" pos:end="161:28"><name pos:start="161:18" pos:end="161:18">x</name> <operator pos:start="161:20" pos:end="161:20">&lt;</operator> <name pos:start="161:22" pos:end="161:28">mb_size</name></expr>;</condition> <incr pos:start="161:31" pos:end="161:33"><expr pos:start="161:31" pos:end="161:33"><name pos:start="161:31" pos:end="161:31">x</name><operator pos:start="161:32" pos:end="161:33">++</operator></expr></incr>)</control><block pos:start="161:35" pos:end="165:9">{<block_content pos:start="163:13" pos:end="163:54">

            <expr_stmt pos:start="163:13" pos:end="163:54"><expr pos:start="163:13" pos:end="163:53"><operator pos:start="163:13" pos:end="163:13">(</operator><operator pos:start="163:14" pos:end="163:14">(</operator><name pos:start="163:15" pos:end="163:21">uint8_t</name><operator pos:start="163:22" pos:end="163:22">*</operator><operator pos:start="163:23" pos:end="163:23">)</operator><name pos:start="163:24" pos:end="163:28"><name pos:start="163:24" pos:end="163:24">h</name><operator pos:start="163:25" pos:end="163:26">-&gt;</operator><name pos:start="163:27" pos:end="163:28">mb</name></name><operator pos:start="163:29" pos:end="163:29">)</operator><index pos:start="163:30" pos:end="163:32">[<expr pos:start="163:31" pos:end="163:31"><name pos:start="163:31" pos:end="163:31">x</name></expr>]</index><operator pos:start="163:33" pos:end="163:33">=</operator> <call pos:start="163:35" pos:end="163:53"><name pos:start="163:35" pos:end="163:42">get_bits</name><argument_list pos:start="163:43" pos:end="163:53">(<argument pos:start="163:44" pos:end="163:49"><expr pos:start="163:44" pos:end="163:49"><operator pos:start="163:44" pos:end="163:44">&amp;</operator><name pos:start="163:45" pos:end="163:49"><name pos:start="163:45" pos:end="163:45">s</name><operator pos:start="163:46" pos:end="163:47">-&gt;</operator><name pos:start="163:48" pos:end="163:49">gb</name></name></expr></argument>, <argument pos:start="163:52" pos:end="163:52"><expr pos:start="163:52" pos:end="163:52"><literal type="number" pos:start="163:52" pos:end="163:52">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>



        <comment type="line" pos:start="169:9" pos:end="169:44">// In deblocking, the quantizer is 0</comment>

        <expr_stmt pos:start="171:9" pos:end="171:53"><expr pos:start="171:9" pos:end="171:52"><name pos:start="171:9" pos:end="171:48"><name pos:start="171:9" pos:end="171:9">s</name><operator pos:start="171:10" pos:end="171:11">-&gt;</operator><name pos:start="171:12" pos:end="171:26">current_picture</name><operator pos:start="171:27" pos:end="171:27">.</operator><name pos:start="171:28" pos:end="171:28">f</name><operator pos:start="171:29" pos:end="171:29">.</operator><name pos:start="171:30" pos:end="171:41">qscale_table</name><index pos:start="171:42" pos:end="171:48">[<expr pos:start="171:43" pos:end="171:47"><name pos:start="171:43" pos:end="171:47">mb_xy</name></expr>]</index></name> <operator pos:start="171:50" pos:end="171:50">=</operator> <literal type="number" pos:start="171:52" pos:end="171:52">0</literal></expr>;</expr_stmt>

        <comment type="line" pos:start="173:9" pos:end="173:33">// All coeffs are present</comment>

        <expr_stmt pos:start="175:9" pos:end="175:49"><expr pos:start="175:9" pos:end="175:48"><call pos:start="175:9" pos:end="175:48"><name pos:start="175:9" pos:end="175:14">memset</name><argument_list pos:start="175:15" pos:end="175:48">(<argument pos:start="175:16" pos:end="175:39"><expr pos:start="175:16" pos:end="175:39"><name pos:start="175:16" pos:end="175:39"><name pos:start="175:16" pos:end="175:16">h</name><operator pos:start="175:17" pos:end="175:18">-&gt;</operator><name pos:start="175:19" pos:end="175:32">non_zero_count</name><index pos:start="175:33" pos:end="175:39">[<expr pos:start="175:34" pos:end="175:38"><name pos:start="175:34" pos:end="175:38">mb_xy</name></expr>]</index></name></expr></argument>, <argument pos:start="175:42" pos:end="175:43"><expr pos:start="175:42" pos:end="175:43"><literal type="number" pos:start="175:42" pos:end="175:43">16</literal></expr></argument>, <argument pos:start="175:46" pos:end="175:47"><expr pos:start="175:46" pos:end="175:47"><literal type="number" pos:start="175:46" pos:end="175:47">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="179:9" pos:end="179:54"><expr pos:start="179:9" pos:end="179:53"><name pos:start="179:9" pos:end="179:43"><name pos:start="179:9" pos:end="179:9">s</name><operator pos:start="179:10" pos:end="179:11">-&gt;</operator><name pos:start="179:12" pos:end="179:26">current_picture</name><operator pos:start="179:27" pos:end="179:27">.</operator><name pos:start="179:28" pos:end="179:28">f</name><operator pos:start="179:29" pos:end="179:29">.</operator><name pos:start="179:30" pos:end="179:36">mb_type</name><index pos:start="179:37" pos:end="179:43">[<expr pos:start="179:38" pos:end="179:42"><name pos:start="179:38" pos:end="179:42">mb_xy</name></expr>]</index></name> <operator pos:start="179:45" pos:end="179:45">=</operator> <name pos:start="179:47" pos:end="179:53">mb_type</name></expr>;</expr_stmt>

        <return pos:start="181:9" pos:end="181:17">return <expr pos:start="181:16" pos:end="181:16"><literal type="number" pos:start="181:16" pos:end="181:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="187:5" pos:end="193:5"><if pos:start="187:5" pos:end="193:5">if<condition pos:start="187:7" pos:end="187:16">(<expr pos:start="187:8" pos:end="187:15"><name pos:start="187:8" pos:end="187:15">MB_MBAFF</name></expr>)</condition><block pos:start="187:17" pos:end="193:5">{<block_content pos:start="189:9" pos:end="191:30">

        <expr_stmt pos:start="189:9" pos:end="189:30"><expr pos:start="189:9" pos:end="189:29"><name pos:start="189:9" pos:end="189:23"><name pos:start="189:9" pos:end="189:9">h</name><operator pos:start="189:10" pos:end="189:11">-&gt;</operator><name pos:start="189:12" pos:end="189:20">ref_count</name><index pos:start="189:21" pos:end="189:23">[<expr pos:start="189:22" pos:end="189:22"><literal type="number" pos:start="189:22" pos:end="189:22">0</literal></expr>]</index></name> <operator pos:start="189:25" pos:end="189:27">&lt;&lt;=</operator> <literal type="number" pos:start="189:29" pos:end="189:29">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="191:9" pos:end="191:30"><expr pos:start="191:9" pos:end="191:29"><name pos:start="191:9" pos:end="191:23"><name pos:start="191:9" pos:end="191:9">h</name><operator pos:start="191:10" pos:end="191:11">-&gt;</operator><name pos:start="191:12" pos:end="191:20">ref_count</name><index pos:start="191:21" pos:end="191:23">[<expr pos:start="191:22" pos:end="191:22"><literal type="number" pos:start="191:22" pos:end="191:22">1</literal></expr>]</index></name> <operator pos:start="191:25" pos:end="191:27">&lt;&lt;=</operator> <literal type="number" pos:start="191:29" pos:end="191:29">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="197:5" pos:end="197:38"><expr pos:start="197:5" pos:end="197:37"><call pos:start="197:5" pos:end="197:37"><name pos:start="197:5" pos:end="197:25">fill_decode_neighbors</name><argument_list pos:start="197:26" pos:end="197:37">(<argument pos:start="197:27" pos:end="197:27"><expr pos:start="197:27" pos:end="197:27"><name pos:start="197:27" pos:end="197:27">h</name></expr></argument>, <argument pos:start="197:30" pos:end="197:36"><expr pos:start="197:30" pos:end="197:36"><name pos:start="197:30" pos:end="197:36">mb_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:35"><expr pos:start="199:5" pos:end="199:34"><call pos:start="199:5" pos:end="199:34"><name pos:start="199:5" pos:end="199:22">fill_decode_caches</name><argument_list pos:start="199:23" pos:end="199:34">(<argument pos:start="199:24" pos:end="199:24"><expr pos:start="199:24" pos:end="199:24"><name pos:start="199:24" pos:end="199:24">h</name></expr></argument>, <argument pos:start="199:27" pos:end="199:33"><expr pos:start="199:27" pos:end="199:33"><name pos:start="199:27" pos:end="199:33">mb_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="203:5" pos:end="203:13">//mb_pred</comment>

    <if_stmt pos:start="205:5" pos:end="713:5"><if pos:start="205:5" pos:end="287:5">if<condition pos:start="205:7" pos:end="205:25">(<expr pos:start="205:8" pos:end="205:24"><call pos:start="205:8" pos:end="205:24"><name pos:start="205:8" pos:end="205:15">IS_INTRA</name><argument_list pos:start="205:16" pos:end="205:24">(<argument pos:start="205:17" pos:end="205:23"><expr pos:start="205:17" pos:end="205:23"><name pos:start="205:17" pos:end="205:23">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="205:26" pos:end="287:5">{<block_content pos:start="207:9" pos:end="285:9">

        <decl_stmt pos:start="207:9" pos:end="207:22"><decl pos:start="207:9" pos:end="207:21"><type pos:start="207:9" pos:end="207:11"><name pos:start="207:9" pos:end="207:11">int</name></type> <name pos:start="207:13" pos:end="207:21">pred_mode</name></decl>;</decl_stmt>

<comment type="line" pos:start="209:1" pos:end="209:44">//            init_top_left_availability(h);</comment>

        <if_stmt pos:start="211:9" pos:end="269:9"><if pos:start="211:9" pos:end="261:9">if<condition pos:start="211:11" pos:end="211:32">(<expr pos:start="211:12" pos:end="211:31"><call pos:start="211:12" pos:end="211:31"><name pos:start="211:12" pos:end="211:22">IS_INTRA4x4</name><argument_list pos:start="211:23" pos:end="211:31">(<argument pos:start="211:24" pos:end="211:30"><expr pos:start="211:24" pos:end="211:30"><name pos:start="211:24" pos:end="211:30">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="211:33" pos:end="261:9">{<block_content pos:start="213:13" pos:end="259:26">

            <decl_stmt pos:start="213:13" pos:end="213:18"><decl pos:start="213:13" pos:end="213:17"><type pos:start="213:13" pos:end="213:15"><name pos:start="213:13" pos:end="213:15">int</name></type> <name pos:start="213:17" pos:end="213:17">i</name></decl>;</decl_stmt>

            <decl_stmt pos:start="215:13" pos:end="215:23"><decl pos:start="215:13" pos:end="215:22"><type pos:start="215:13" pos:end="215:15"><name pos:start="215:13" pos:end="215:15">int</name></type> <name pos:start="215:17" pos:end="215:18">di</name> <init pos:start="215:20" pos:end="215:22">= <expr pos:start="215:22" pos:end="215:22"><literal type="number" pos:start="215:22" pos:end="215:22">1</literal></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="217:13" pos:end="223:13"><if pos:start="217:13" pos:end="223:13">if<condition pos:start="217:15" pos:end="217:51">(<expr pos:start="217:16" pos:end="217:50"><name pos:start="217:16" pos:end="217:29">dct8x8_allowed</name> <operator pos:start="217:31" pos:end="217:32">&amp;&amp;</operator> <call pos:start="217:34" pos:end="217:50"><name pos:start="217:34" pos:end="217:42">get_bits1</name><argument_list pos:start="217:43" pos:end="217:50">(<argument pos:start="217:44" pos:end="217:49"><expr pos:start="217:44" pos:end="217:49"><operator pos:start="217:44" pos:end="217:44">&amp;</operator><name pos:start="217:45" pos:end="217:49"><name pos:start="217:45" pos:end="217:45">s</name><operator pos:start="217:46" pos:end="217:47">-&gt;</operator><name pos:start="217:48" pos:end="217:49">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="217:52" pos:end="223:13">{<block_content pos:start="219:17" pos:end="221:23">

                <expr_stmt pos:start="219:17" pos:end="219:42"><expr pos:start="219:17" pos:end="219:41"><name pos:start="219:17" pos:end="219:23">mb_type</name> <operator pos:start="219:25" pos:end="219:26">|=</operator> <name pos:start="219:28" pos:end="219:41">MB_TYPE_8x8DCT</name></expr>;</expr_stmt>

                <expr_stmt pos:start="221:17" pos:end="221:23"><expr pos:start="221:17" pos:end="221:22"><name pos:start="221:17" pos:end="221:18">di</name> <operator pos:start="221:20" pos:end="221:20">=</operator> <literal type="number" pos:start="221:22" pos:end="221:22">4</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



<comment type="line" pos:start="227:1" pos:end="227:46">//                fill_intra4x4_pred_table(h);</comment>

            <for pos:start="229:13" pos:end="253:13">for<control pos:start="229:16" pos:end="229:33">(<init pos:start="229:17" pos:end="229:20"><expr pos:start="229:17" pos:end="229:19"><name pos:start="229:17" pos:end="229:17">i</name><operator pos:start="229:18" pos:end="229:18">=</operator><literal type="number" pos:start="229:19" pos:end="229:19">0</literal></expr>;</init> <condition pos:start="229:22" pos:end="229:26"><expr pos:start="229:22" pos:end="229:25"><name pos:start="229:22" pos:end="229:22">i</name><operator pos:start="229:23" pos:end="229:23">&lt;</operator><literal type="number" pos:start="229:24" pos:end="229:25">16</literal></expr>;</condition> <incr pos:start="229:28" pos:end="229:32"><expr pos:start="229:28" pos:end="229:32"><name pos:start="229:28" pos:end="229:28">i</name><operator pos:start="229:29" pos:end="229:30">+=</operator><name pos:start="229:31" pos:end="229:32">di</name></expr></incr>)</control><block pos:start="229:34" pos:end="253:13">{<block_content pos:start="231:17" pos:end="251:67">

                <decl_stmt pos:start="231:17" pos:end="231:48"><decl pos:start="231:17" pos:end="231:47"><type pos:start="231:17" pos:end="231:19"><name pos:start="231:17" pos:end="231:19">int</name></type> <name pos:start="231:21" pos:end="231:24">mode</name><init pos:start="231:25" pos:end="231:47">= <expr pos:start="231:27" pos:end="231:47"><call pos:start="231:27" pos:end="231:47"><name pos:start="231:27" pos:end="231:41">pred_intra_mode</name><argument_list pos:start="231:42" pos:end="231:47">(<argument pos:start="231:43" pos:end="231:43"><expr pos:start="231:43" pos:end="231:43"><name pos:start="231:43" pos:end="231:43">h</name></expr></argument>, <argument pos:start="231:46" pos:end="231:46"><expr pos:start="231:46" pos:end="231:46"><name pos:start="231:46" pos:end="231:46">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                <if_stmt pos:start="235:17" pos:end="241:17"><if pos:start="235:17" pos:end="241:17">if<condition pos:start="235:19" pos:end="235:38">(<expr pos:start="235:20" pos:end="235:37"><operator pos:start="235:20" pos:end="235:20">!</operator><call pos:start="235:21" pos:end="235:37"><name pos:start="235:21" pos:end="235:29">get_bits1</name><argument_list pos:start="235:30" pos:end="235:37">(<argument pos:start="235:31" pos:end="235:36"><expr pos:start="235:31" pos:end="235:36"><operator pos:start="235:31" pos:end="235:31">&amp;</operator><name pos:start="235:32" pos:end="235:36"><name pos:start="235:32" pos:end="235:32">s</name><operator pos:start="235:33" pos:end="235:34">-&gt;</operator><name pos:start="235:35" pos:end="235:36">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="235:39" pos:end="241:17">{<block_content pos:start="237:21" pos:end="239:57">

                    <decl_stmt pos:start="237:21" pos:end="237:60"><decl pos:start="237:21" pos:end="237:59"><type pos:start="237:21" pos:end="237:29"><specifier pos:start="237:21" pos:end="237:25">const</specifier> <name pos:start="237:27" pos:end="237:29">int</name></type> <name pos:start="237:31" pos:end="237:38">rem_mode</name><init pos:start="237:39" pos:end="237:59">= <expr pos:start="237:41" pos:end="237:59"><call pos:start="237:41" pos:end="237:59"><name pos:start="237:41" pos:end="237:48">get_bits</name><argument_list pos:start="237:49" pos:end="237:59">(<argument pos:start="237:50" pos:end="237:55"><expr pos:start="237:50" pos:end="237:55"><operator pos:start="237:50" pos:end="237:50">&amp;</operator><name pos:start="237:51" pos:end="237:55"><name pos:start="237:51" pos:end="237:51">s</name><operator pos:start="237:52" pos:end="237:53">-&gt;</operator><name pos:start="237:54" pos:end="237:55">gb</name></name></expr></argument>, <argument pos:start="237:58" pos:end="237:58"><expr pos:start="237:58" pos:end="237:58"><literal type="number" pos:start="237:58" pos:end="237:58">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="239:21" pos:end="239:57"><expr pos:start="239:21" pos:end="239:56"><name pos:start="239:21" pos:end="239:24">mode</name> <operator pos:start="239:26" pos:end="239:26">=</operator> <name pos:start="239:28" pos:end="239:35">rem_mode</name> <operator pos:start="239:37" pos:end="239:37">+</operator> <operator pos:start="239:39" pos:end="239:39">(</operator><name pos:start="239:40" pos:end="239:47">rem_mode</name> <operator pos:start="239:49" pos:end="239:50">&gt;=</operator> <name pos:start="239:52" pos:end="239:55">mode</name><operator pos:start="239:56" pos:end="239:56">)</operator></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="245:17" pos:end="251:67"><if pos:start="245:17" pos:end="247:97">if<condition pos:start="245:19" pos:end="245:25">(<expr pos:start="245:20" pos:end="245:24"><name pos:start="245:20" pos:end="245:21">di</name><operator pos:start="245:22" pos:end="245:23">==</operator><literal type="number" pos:start="245:24" pos:end="245:24">4</literal></expr>)</condition><block type="pseudo" pos:start="247:21" pos:end="247:97"><block_content pos:start="247:21" pos:end="247:97">

                    <expr_stmt pos:start="247:21" pos:end="247:97"><expr pos:start="247:21" pos:end="247:96"><call pos:start="247:21" pos:end="247:96"><name pos:start="247:21" pos:end="247:34">fill_rectangle</name><argument_list pos:start="247:35" pos:end="247:96">( <argument pos:start="247:37" pos:end="247:76"><expr pos:start="247:37" pos:end="247:76"><operator pos:start="247:37" pos:end="247:37">&amp;</operator><name pos:start="247:38" pos:end="247:76"><name pos:start="247:38" pos:end="247:38">h</name><operator pos:start="247:39" pos:end="247:40">-&gt;</operator><name pos:start="247:41" pos:end="247:64">intra4x4_pred_mode_cache</name><index pos:start="247:65" pos:end="247:76">[ <expr pos:start="247:67" pos:end="247:74"><name pos:start="247:67" pos:end="247:74"><name pos:start="247:67" pos:end="247:71">scan8</name><index pos:start="247:72" pos:end="247:74">[<expr pos:start="247:73" pos:end="247:73"><name pos:start="247:73" pos:end="247:73">i</name></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument pos:start="247:79" pos:end="247:79"><expr pos:start="247:79" pos:end="247:79"><literal type="number" pos:start="247:79" pos:end="247:79">2</literal></expr></argument>, <argument pos:start="247:82" pos:end="247:82"><expr pos:start="247:82" pos:end="247:82"><literal type="number" pos:start="247:82" pos:end="247:82">2</literal></expr></argument>, <argument pos:start="247:85" pos:end="247:85"><expr pos:start="247:85" pos:end="247:85"><literal type="number" pos:start="247:85" pos:end="247:85">8</literal></expr></argument>, <argument pos:start="247:88" pos:end="247:91"><expr pos:start="247:88" pos:end="247:91"><name pos:start="247:88" pos:end="247:91">mode</name></expr></argument>, <argument pos:start="247:94" pos:end="247:94"><expr pos:start="247:94" pos:end="247:94"><literal type="number" pos:start="247:94" pos:end="247:94">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="249:17" pos:end="251:67">else<block type="pseudo" pos:start="251:21" pos:end="251:67"><block_content pos:start="251:21" pos:end="251:67">

                    <expr_stmt pos:start="251:21" pos:end="251:67"><expr pos:start="251:21" pos:end="251:66"><name pos:start="251:21" pos:end="251:59"><name pos:start="251:21" pos:end="251:21">h</name><operator pos:start="251:22" pos:end="251:23">-&gt;</operator><name pos:start="251:24" pos:end="251:47">intra4x4_pred_mode_cache</name><index pos:start="251:48" pos:end="251:59">[ <expr pos:start="251:50" pos:end="251:57"><name pos:start="251:50" pos:end="251:57"><name pos:start="251:50" pos:end="251:54">scan8</name><index pos:start="251:55" pos:end="251:57">[<expr pos:start="251:56" pos:end="251:56"><name pos:start="251:56" pos:end="251:56">i</name></expr>]</index></name></expr> ]</index></name> <operator pos:start="251:61" pos:end="251:61">=</operator> <name pos:start="251:63" pos:end="251:66">mode</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="255:13" pos:end="255:42"><expr pos:start="255:13" pos:end="255:41"><call pos:start="255:13" pos:end="255:41"><name pos:start="255:13" pos:end="255:38">write_back_intra_pred_mode</name><argument_list pos:start="255:39" pos:end="255:41">(<argument pos:start="255:40" pos:end="255:40"><expr pos:start="255:40" pos:end="255:40"><name pos:start="255:40" pos:end="255:40">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="257:13" pos:end="259:26"><if pos:start="257:13" pos:end="259:26">if<condition pos:start="257:15" pos:end="257:56">( <expr pos:start="257:17" pos:end="257:55"><call pos:start="257:17" pos:end="257:51"><name pos:start="257:17" pos:end="257:48">ff_h264_check_intra4x4_pred_mode</name><argument_list pos:start="257:49" pos:end="257:51">(<argument pos:start="257:50" pos:end="257:50"><expr pos:start="257:50" pos:end="257:50"><name pos:start="257:50" pos:end="257:50">h</name></expr></argument>)</argument_list></call> <operator pos:start="257:53" pos:end="257:53">&lt;</operator> <literal type="number" pos:start="257:55" pos:end="257:55">0</literal></expr>)</condition><block type="pseudo" pos:start="259:17" pos:end="259:26"><block_content pos:start="259:17" pos:end="259:26">

                <return pos:start="259:17" pos:end="259:26">return <expr pos:start="259:24" pos:end="259:25"><operator pos:start="259:24" pos:end="259:24">-</operator><literal type="number" pos:start="259:25" pos:end="259:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if><else pos:start="261:10" pos:end="269:9">else<block pos:start="261:14" pos:end="269:9">{<block_content pos:start="263:13" pos:end="267:26">

            <expr_stmt pos:start="263:13" pos:end="263:95"><expr pos:start="263:13" pos:end="263:94"><name pos:start="263:13" pos:end="263:35"><name pos:start="263:13" pos:end="263:13">h</name><operator pos:start="263:14" pos:end="263:15">-&gt;</operator><name pos:start="263:16" pos:end="263:35">intra16x16_pred_mode</name></name><operator pos:start="263:36" pos:end="263:36">=</operator> <call pos:start="263:38" pos:end="263:94"><name pos:start="263:38" pos:end="263:66">ff_h264_check_intra_pred_mode</name><argument_list pos:start="263:67" pos:end="263:94">(<argument pos:start="263:68" pos:end="263:68"><expr pos:start="263:68" pos:end="263:68"><name pos:start="263:68" pos:end="263:68">h</name></expr></argument>, <argument pos:start="263:71" pos:end="263:93"><expr pos:start="263:71" pos:end="263:93"><name pos:start="263:71" pos:end="263:93"><name pos:start="263:71" pos:end="263:71">h</name><operator pos:start="263:72" pos:end="263:73">-&gt;</operator><name pos:start="263:74" pos:end="263:93">intra16x16_pred_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="265:13" pos:end="267:26"><if pos:start="265:13" pos:end="267:26">if<condition pos:start="265:15" pos:end="265:43">(<expr pos:start="265:16" pos:end="265:42"><name pos:start="265:16" pos:end="265:38"><name pos:start="265:16" pos:end="265:16">h</name><operator pos:start="265:17" pos:end="265:18">-&gt;</operator><name pos:start="265:19" pos:end="265:38">intra16x16_pred_mode</name></name> <operator pos:start="265:40" pos:end="265:40">&lt;</operator> <literal type="number" pos:start="265:42" pos:end="265:42">0</literal></expr>)</condition><block type="pseudo" pos:start="267:17" pos:end="267:26"><block_content pos:start="267:17" pos:end="267:26">

                <return pos:start="267:17" pos:end="267:26">return <expr pos:start="267:24" pos:end="267:25"><operator pos:start="267:24" pos:end="267:24">-</operator><literal type="number" pos:start="267:25" pos:end="267:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="271:9" pos:end="285:9"><if pos:start="271:9" pos:end="281:9">if<condition pos:start="271:11" pos:end="271:25">(<expr pos:start="271:12" pos:end="271:24"><name pos:start="271:12" pos:end="271:24">decode_chroma</name></expr>)</condition><block pos:start="271:26" pos:end="281:9">{<block_content pos:start="273:13" pos:end="279:43">

            <expr_stmt pos:start="273:13" pos:end="273:82"><expr pos:start="273:13" pos:end="273:81"><name pos:start="273:13" pos:end="273:21">pred_mode</name><operator pos:start="273:22" pos:end="273:22">=</operator> <call pos:start="273:24" pos:end="273:81"><name pos:start="273:24" pos:end="273:52">ff_h264_check_intra_pred_mode</name><argument_list pos:start="273:53" pos:end="273:81">(<argument pos:start="273:54" pos:end="273:54"><expr pos:start="273:54" pos:end="273:54"><name pos:start="273:54" pos:end="273:54">h</name></expr></argument>, <argument pos:start="273:57" pos:end="273:80"><expr pos:start="273:57" pos:end="273:80"><call pos:start="273:57" pos:end="273:80"><name pos:start="273:57" pos:end="273:72">get_ue_golomb_31</name><argument_list pos:start="273:73" pos:end="273:80">(<argument pos:start="273:74" pos:end="273:79"><expr pos:start="273:74" pos:end="273:79"><operator pos:start="273:74" pos:end="273:74">&amp;</operator><name pos:start="273:75" pos:end="273:79"><name pos:start="273:75" pos:end="273:75">s</name><operator pos:start="273:76" pos:end="273:77">-&gt;</operator><name pos:start="273:78" pos:end="273:79">gb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="275:13" pos:end="277:26"><if pos:start="275:13" pos:end="277:26">if<condition pos:start="275:15" pos:end="275:29">(<expr pos:start="275:16" pos:end="275:28"><name pos:start="275:16" pos:end="275:24">pred_mode</name> <operator pos:start="275:26" pos:end="275:26">&lt;</operator> <literal type="number" pos:start="275:28" pos:end="275:28">0</literal></expr>)</condition><block type="pseudo" pos:start="277:17" pos:end="277:26"><block_content pos:start="277:17" pos:end="277:26">

                <return pos:start="277:17" pos:end="277:26">return <expr pos:start="277:24" pos:end="277:25"><operator pos:start="277:24" pos:end="277:24">-</operator><literal type="number" pos:start="277:25" pos:end="277:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="279:13" pos:end="279:43"><expr pos:start="279:13" pos:end="279:42"><name pos:start="279:13" pos:end="279:31"><name pos:start="279:13" pos:end="279:13">h</name><operator pos:start="279:14" pos:end="279:15">-&gt;</operator><name pos:start="279:16" pos:end="279:31">chroma_pred_mode</name></name><operator pos:start="279:32" pos:end="279:32">=</operator> <name pos:start="279:34" pos:end="279:42">pred_mode</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="281:11" pos:end="285:9">else <block pos:start="281:16" pos:end="285:9">{<block_content pos:start="283:13" pos:end="283:49">

            <expr_stmt pos:start="283:13" pos:end="283:49"><expr pos:start="283:13" pos:end="283:48"><name pos:start="283:13" pos:end="283:31"><name pos:start="283:13" pos:end="283:13">h</name><operator pos:start="283:14" pos:end="283:15">-&gt;</operator><name pos:start="283:16" pos:end="283:31">chroma_pred_mode</name></name> <operator pos:start="283:33" pos:end="283:33">=</operator> <name pos:start="283:35" pos:end="283:48">DC_128_PRED8x8</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if><if type="elseif" pos:start="287:6" pos:end="495:5">else if<condition pos:start="287:13" pos:end="287:32">(<expr pos:start="287:14" pos:end="287:31"><name pos:start="287:14" pos:end="287:28">partition_count</name><operator pos:start="287:29" pos:end="287:30">==</operator><literal type="number" pos:start="287:31" pos:end="287:31">4</literal></expr>)</condition><block pos:start="287:33" pos:end="495:5">{<block_content pos:start="289:9" pos:end="493:9">

        <decl_stmt pos:start="289:9" pos:end="289:58"><decl pos:start="289:9" pos:end="289:13"><type pos:start="289:9" pos:end="289:11"><name pos:start="289:9" pos:end="289:11">int</name></type> <name pos:start="289:13" pos:end="289:13">i</name></decl>, <decl pos:start="289:16" pos:end="289:16"><type ref="prev" pos:start="289:9" pos:end="289:11"/><name pos:start="289:16" pos:end="289:16">j</name></decl>, <decl pos:start="289:19" pos:end="289:40"><type ref="prev" pos:start="289:9" pos:end="289:11"/><name pos:start="289:19" pos:end="289:40"><name pos:start="289:19" pos:end="289:37">sub_partition_count</name><index pos:start="289:38" pos:end="289:40">[<expr pos:start="289:39" pos:end="289:39"><literal type="number" pos:start="289:39" pos:end="289:39">4</literal></expr>]</index></name></decl>, <decl pos:start="289:43" pos:end="289:46"><type ref="prev" pos:start="289:9" pos:end="289:11"/><name pos:start="289:43" pos:end="289:46">list</name></decl>, <decl pos:start="289:49" pos:end="289:57"><type ref="prev" pos:start="289:9" pos:end="289:11"/><name pos:start="289:49" pos:end="289:57"><name pos:start="289:49" pos:end="289:51">ref</name><index pos:start="289:52" pos:end="289:54">[<expr pos:start="289:53" pos:end="289:53"><literal type="number" pos:start="289:53" pos:end="289:53">2</literal></expr>]</index><index pos:start="289:55" pos:end="289:57">[<expr pos:start="289:56" pos:end="289:56"><literal type="number" pos:start="289:56" pos:end="289:56">4</literal></expr>]</index></name></decl>;</decl_stmt>



        <if_stmt pos:start="293:9" pos:end="349:9"><if pos:start="293:9" pos:end="327:9">if<condition pos:start="293:11" pos:end="293:50">(<expr pos:start="293:12" pos:end="293:49"><name pos:start="293:12" pos:end="293:28"><name pos:start="293:12" pos:end="293:12">h</name><operator pos:start="293:13" pos:end="293:14">-&gt;</operator><name pos:start="293:15" pos:end="293:28">slice_type_nos</name></name> <operator pos:start="293:30" pos:end="293:31">==</operator> <name pos:start="293:33" pos:end="293:49">AV_PICTURE_TYPE_B</name></expr>)</condition><block pos:start="293:51" pos:end="327:9">{<block_content pos:start="295:13" pos:end="325:13">

            <for pos:start="295:13" pos:end="311:13">for<control pos:start="295:16" pos:end="295:30">(<init pos:start="295:17" pos:end="295:20"><expr pos:start="295:17" pos:end="295:19"><name pos:start="295:17" pos:end="295:17">i</name><operator pos:start="295:18" pos:end="295:18">=</operator><literal type="number" pos:start="295:19" pos:end="295:19">0</literal></expr>;</init> <condition pos:start="295:22" pos:end="295:25"><expr pos:start="295:22" pos:end="295:24"><name pos:start="295:22" pos:end="295:22">i</name><operator pos:start="295:23" pos:end="295:23">&lt;</operator><literal type="number" pos:start="295:24" pos:end="295:24">4</literal></expr>;</condition> <incr pos:start="295:27" pos:end="295:29"><expr pos:start="295:27" pos:end="295:29"><name pos:start="295:27" pos:end="295:27">i</name><operator pos:start="295:28" pos:end="295:29">++</operator></expr></incr>)</control><block pos:start="295:31" pos:end="311:13">{<block_content pos:start="297:17" pos:end="309:85">

                <expr_stmt pos:start="297:17" pos:end="297:60"><expr pos:start="297:17" pos:end="297:59"><name pos:start="297:17" pos:end="297:33"><name pos:start="297:17" pos:end="297:17">h</name><operator pos:start="297:18" pos:end="297:19">-&gt;</operator><name pos:start="297:20" pos:end="297:30">sub_mb_type</name><index pos:start="297:31" pos:end="297:33">[<expr pos:start="297:32" pos:end="297:32"><name pos:start="297:32" pos:end="297:32">i</name></expr>]</index></name><operator pos:start="297:34" pos:end="297:34">=</operator> <call pos:start="297:36" pos:end="297:59"><name pos:start="297:36" pos:end="297:51">get_ue_golomb_31</name><argument_list pos:start="297:52" pos:end="297:59">(<argument pos:start="297:53" pos:end="297:58"><expr pos:start="297:53" pos:end="297:58"><operator pos:start="297:53" pos:end="297:53">&amp;</operator><name pos:start="297:54" pos:end="297:58"><name pos:start="297:54" pos:end="297:54">s</name><operator pos:start="297:55" pos:end="297:56">-&gt;</operator><name pos:start="297:57" pos:end="297:58">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="299:17" pos:end="305:17"><if pos:start="299:17" pos:end="305:17">if<condition pos:start="299:19" pos:end="299:42">(<expr pos:start="299:20" pos:end="299:41"><name pos:start="299:20" pos:end="299:36"><name pos:start="299:20" pos:end="299:20">h</name><operator pos:start="299:21" pos:end="299:22">-&gt;</operator><name pos:start="299:23" pos:end="299:33">sub_mb_type</name><index pos:start="299:34" pos:end="299:36">[<expr pos:start="299:35" pos:end="299:35"><name pos:start="299:35" pos:end="299:35">i</name></expr>]</index></name> <operator pos:start="299:38" pos:end="299:39">&gt;=</operator><literal type="number" pos:start="299:40" pos:end="299:41">13</literal></expr>)</condition><block pos:start="299:43" pos:end="305:17">{<block_content pos:start="301:21" pos:end="303:30">

                    <expr_stmt pos:start="301:21" pos:end="301:134"><expr pos:start="301:21" pos:end="301:133"><call pos:start="301:21" pos:end="301:133"><name pos:start="301:21" pos:end="301:26">av_log</name><argument_list pos:start="301:27" pos:end="301:133">(<argument pos:start="301:28" pos:end="301:37"><expr pos:start="301:28" pos:end="301:37"><name pos:start="301:28" pos:end="301:37"><name pos:start="301:28" pos:end="301:28">h</name><operator pos:start="301:29" pos:end="301:30">-&gt;</operator><name pos:start="301:31" pos:end="301:31">s</name><operator pos:start="301:32" pos:end="301:32">.</operator><name pos:start="301:33" pos:end="301:37">avctx</name></name></expr></argument>, <argument pos:start="301:40" pos:end="301:51"><expr pos:start="301:40" pos:end="301:51"><name pos:start="301:40" pos:end="301:51">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="301:54" pos:end="301:95"><expr pos:start="301:54" pos:end="301:95"><literal type="string" pos:start="301:54" pos:end="301:95">"B sub_mb_type %u out of range at %d %d\n"</literal></expr></argument>, <argument pos:start="301:98" pos:end="301:114"><expr pos:start="301:98" pos:end="301:114"><name pos:start="301:98" pos:end="301:114"><name pos:start="301:98" pos:end="301:98">h</name><operator pos:start="301:99" pos:end="301:100">-&gt;</operator><name pos:start="301:101" pos:end="301:111">sub_mb_type</name><index pos:start="301:112" pos:end="301:114">[<expr pos:start="301:113" pos:end="301:113"><name pos:start="301:113" pos:end="301:113">i</name></expr>]</index></name></expr></argument>, <argument pos:start="301:117" pos:end="301:123"><expr pos:start="301:117" pos:end="301:123"><name pos:start="301:117" pos:end="301:123"><name pos:start="301:117" pos:end="301:117">s</name><operator pos:start="301:118" pos:end="301:119">-&gt;</operator><name pos:start="301:120" pos:end="301:123">mb_x</name></name></expr></argument>, <argument pos:start="301:126" pos:end="301:132"><expr pos:start="301:126" pos:end="301:132"><name pos:start="301:126" pos:end="301:132"><name pos:start="301:126" pos:end="301:126">s</name><operator pos:start="301:127" pos:end="301:128">-&gt;</operator><name pos:start="301:129" pos:end="301:132">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="303:21" pos:end="303:30">return <expr pos:start="303:28" pos:end="303:29"><operator pos:start="303:28" pos:end="303:28">-</operator><literal type="number" pos:start="303:29" pos:end="303:29">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="307:17" pos:end="307:96"><expr pos:start="307:17" pos:end="307:95"><name pos:start="307:17" pos:end="307:38"><name pos:start="307:17" pos:end="307:35">sub_partition_count</name><index pos:start="307:36" pos:end="307:38">[<expr pos:start="307:37" pos:end="307:37"><name pos:start="307:37" pos:end="307:37">i</name></expr>]</index></name><operator pos:start="307:39" pos:end="307:39">=</operator> <name pos:start="307:41" pos:end="307:79"><name pos:start="307:41" pos:end="307:58">b_sub_mb_type_info</name><index pos:start="307:59" pos:end="307:79">[ <expr pos:start="307:61" pos:end="307:77"><name pos:start="307:61" pos:end="307:77"><name pos:start="307:61" pos:end="307:61">h</name><operator pos:start="307:62" pos:end="307:63">-&gt;</operator><name pos:start="307:64" pos:end="307:74">sub_mb_type</name><index pos:start="307:75" pos:end="307:77">[<expr pos:start="307:76" pos:end="307:76"><name pos:start="307:76" pos:end="307:76">i</name></expr>]</index></name></expr> ]</index></name><operator pos:start="307:80" pos:end="307:80">.</operator><name pos:start="307:81" pos:end="307:95">partition_count</name></expr>;</expr_stmt>

                <expr_stmt pos:start="309:17" pos:end="309:85"><expr pos:start="309:17" pos:end="309:84"><name pos:start="309:17" pos:end="309:33"><name pos:start="309:17" pos:end="309:17">h</name><operator pos:start="309:18" pos:end="309:19">-&gt;</operator><name pos:start="309:20" pos:end="309:30">sub_mb_type</name><index pos:start="309:31" pos:end="309:33">[<expr pos:start="309:32" pos:end="309:32"><name pos:start="309:32" pos:end="309:32">i</name></expr>]</index></name><operator pos:start="309:34" pos:end="309:34">=</operator>      <name pos:start="309:41" pos:end="309:79"><name pos:start="309:41" pos:end="309:58">b_sub_mb_type_info</name><index pos:start="309:59" pos:end="309:79">[ <expr pos:start="309:61" pos:end="309:77"><name pos:start="309:61" pos:end="309:77"><name pos:start="309:61" pos:end="309:61">h</name><operator pos:start="309:62" pos:end="309:63">-&gt;</operator><name pos:start="309:64" pos:end="309:74">sub_mb_type</name><index pos:start="309:75" pos:end="309:77">[<expr pos:start="309:76" pos:end="309:76"><name pos:start="309:76" pos:end="309:76">i</name></expr>]</index></name></expr> ]</index></name><operator pos:start="309:80" pos:end="309:80">.</operator><name pos:start="309:81" pos:end="309:84">type</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="313:13" pos:end="325:13"><if pos:start="313:13" pos:end="325:13">if<condition pos:start="313:15" pos:end="313:99">( <expr pos:start="313:17" pos:end="313:98"><call pos:start="313:17" pos:end="313:98"><name pos:start="313:17" pos:end="313:25">IS_DIRECT</name><argument_list pos:start="313:26" pos:end="313:98">(<argument pos:start="313:27" pos:end="313:97"><expr pos:start="313:27" pos:end="313:97"><name pos:start="313:27" pos:end="313:43"><name pos:start="313:27" pos:end="313:27">h</name><operator pos:start="313:28" pos:end="313:29">-&gt;</operator><name pos:start="313:30" pos:end="313:40">sub_mb_type</name><index pos:start="313:41" pos:end="313:43">[<expr pos:start="313:42" pos:end="313:42"><literal type="number" pos:start="313:42" pos:end="313:42">0</literal></expr>]</index></name><operator pos:start="313:44" pos:end="313:44">|</operator><name pos:start="313:45" pos:end="313:61"><name pos:start="313:45" pos:end="313:45">h</name><operator pos:start="313:46" pos:end="313:47">-&gt;</operator><name pos:start="313:48" pos:end="313:58">sub_mb_type</name><index pos:start="313:59" pos:end="313:61">[<expr pos:start="313:60" pos:end="313:60"><literal type="number" pos:start="313:60" pos:end="313:60">1</literal></expr>]</index></name><operator pos:start="313:62" pos:end="313:62">|</operator><name pos:start="313:63" pos:end="313:79"><name pos:start="313:63" pos:end="313:63">h</name><operator pos:start="313:64" pos:end="313:65">-&gt;</operator><name pos:start="313:66" pos:end="313:76">sub_mb_type</name><index pos:start="313:77" pos:end="313:79">[<expr pos:start="313:78" pos:end="313:78"><literal type="number" pos:start="313:78" pos:end="313:78">2</literal></expr>]</index></name><operator pos:start="313:80" pos:end="313:80">|</operator><name pos:start="313:81" pos:end="313:97"><name pos:start="313:81" pos:end="313:81">h</name><operator pos:start="313:82" pos:end="313:83">-&gt;</operator><name pos:start="313:84" pos:end="313:94">sub_mb_type</name><index pos:start="313:95" pos:end="313:97">[<expr pos:start="313:96" pos:end="313:96"><literal type="number" pos:start="313:96" pos:end="313:96">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="313:101" pos:end="325:13">{<block_content pos:start="315:17" pos:end="323:64">

                <expr_stmt pos:start="315:17" pos:end="315:56"><expr pos:start="315:17" pos:end="315:55"><call pos:start="315:17" pos:end="315:55"><name pos:start="315:17" pos:end="315:42">ff_h264_pred_direct_motion</name><argument_list pos:start="315:43" pos:end="315:55">(<argument pos:start="315:44" pos:end="315:44"><expr pos:start="315:44" pos:end="315:44"><name pos:start="315:44" pos:end="315:44">h</name></expr></argument>, <argument pos:start="315:47" pos:end="315:54"><expr pos:start="315:47" pos:end="315:54"><operator pos:start="315:47" pos:end="315:47">&amp;</operator><name pos:start="315:48" pos:end="315:54">mb_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="317:17" pos:end="323:64"><expr pos:start="317:17" pos:end="323:63"><name pos:start="317:17" pos:end="317:41"><name pos:start="317:17" pos:end="317:17">h</name><operator pos:start="317:18" pos:end="317:19">-&gt;</operator><name pos:start="317:20" pos:end="317:28">ref_cache</name><index pos:start="317:29" pos:end="317:31">[<expr pos:start="317:30" pos:end="317:30"><literal type="number" pos:start="317:30" pos:end="317:30">0</literal></expr>]</index><index pos:start="317:32" pos:end="317:41">[<expr pos:start="317:33" pos:end="317:40"><name pos:start="317:33" pos:end="317:40"><name pos:start="317:33" pos:end="317:37">scan8</name><index pos:start="317:38" pos:end="317:40">[<expr pos:start="317:39" pos:end="317:39"><literal type="number" pos:start="317:39" pos:end="317:39">4</literal></expr>]</index></name></expr>]</index></name> <operator pos:start="317:43" pos:end="317:43">=</operator>

                <name pos:start="319:17" pos:end="319:41"><name pos:start="319:17" pos:end="319:17">h</name><operator pos:start="319:18" pos:end="319:19">-&gt;</operator><name pos:start="319:20" pos:end="319:28">ref_cache</name><index pos:start="319:29" pos:end="319:31">[<expr pos:start="319:30" pos:end="319:30"><literal type="number" pos:start="319:30" pos:end="319:30">1</literal></expr>]</index><index pos:start="319:32" pos:end="319:41">[<expr pos:start="319:33" pos:end="319:40"><name pos:start="319:33" pos:end="319:40"><name pos:start="319:33" pos:end="319:37">scan8</name><index pos:start="319:38" pos:end="319:40">[<expr pos:start="319:39" pos:end="319:39"><literal type="number" pos:start="319:39" pos:end="319:39">4</literal></expr>]</index></name></expr>]</index></name> <operator pos:start="319:43" pos:end="319:43">=</operator>

                <name pos:start="321:17" pos:end="321:42"><name pos:start="321:17" pos:end="321:17">h</name><operator pos:start="321:18" pos:end="321:19">-&gt;</operator><name pos:start="321:20" pos:end="321:28">ref_cache</name><index pos:start="321:29" pos:end="321:31">[<expr pos:start="321:30" pos:end="321:30"><literal type="number" pos:start="321:30" pos:end="321:30">0</literal></expr>]</index><index pos:start="321:32" pos:end="321:42">[<expr pos:start="321:33" pos:end="321:41"><name pos:start="321:33" pos:end="321:41"><name pos:start="321:33" pos:end="321:37">scan8</name><index pos:start="321:38" pos:end="321:41">[<expr pos:start="321:39" pos:end="321:40"><literal type="number" pos:start="321:39" pos:end="321:40">12</literal></expr>]</index></name></expr>]</index></name> <operator pos:start="321:44" pos:end="321:44">=</operator>

                <name pos:start="323:17" pos:end="323:42"><name pos:start="323:17" pos:end="323:17">h</name><operator pos:start="323:18" pos:end="323:19">-&gt;</operator><name pos:start="323:20" pos:end="323:28">ref_cache</name><index pos:start="323:29" pos:end="323:31">[<expr pos:start="323:30" pos:end="323:30"><literal type="number" pos:start="323:30" pos:end="323:30">1</literal></expr>]</index><index pos:start="323:32" pos:end="323:42">[<expr pos:start="323:33" pos:end="323:41"><name pos:start="323:33" pos:end="323:41"><name pos:start="323:33" pos:end="323:37">scan8</name><index pos:start="323:38" pos:end="323:41">[<expr pos:start="323:39" pos:end="323:40"><literal type="number" pos:start="323:39" pos:end="323:40">12</literal></expr>]</index></name></expr>]</index></name> <operator pos:start="323:44" pos:end="323:44">=</operator> <name pos:start="323:46" pos:end="323:63">PART_NOT_AVAILABLE</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if><else pos:start="327:10" pos:end="349:9">else<block pos:start="327:14" pos:end="349:9">{<block_content pos:start="329:13" pos:end="347:13">

            <expr_stmt pos:start="329:13" pos:end="329:59"><expr pos:start="329:13" pos:end="329:58"><call pos:start="329:13" pos:end="329:58"><name pos:start="329:13" pos:end="329:18">assert</name><argument_list pos:start="329:19" pos:end="329:58">(<argument pos:start="329:20" pos:end="329:57"><expr pos:start="329:20" pos:end="329:57"><name pos:start="329:20" pos:end="329:36"><name pos:start="329:20" pos:end="329:20">h</name><operator pos:start="329:21" pos:end="329:22">-&gt;</operator><name pos:start="329:23" pos:end="329:36">slice_type_nos</name></name> <operator pos:start="329:38" pos:end="329:39">==</operator> <name pos:start="329:41" pos:end="329:57">AV_PICTURE_TYPE_P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="329:61" pos:end="329:80">//FIXME SP correct ?</comment>

            <for pos:start="331:13" pos:end="347:13">for<control pos:start="331:16" pos:end="331:30">(<init pos:start="331:17" pos:end="331:20"><expr pos:start="331:17" pos:end="331:19"><name pos:start="331:17" pos:end="331:17">i</name><operator pos:start="331:18" pos:end="331:18">=</operator><literal type="number" pos:start="331:19" pos:end="331:19">0</literal></expr>;</init> <condition pos:start="331:22" pos:end="331:25"><expr pos:start="331:22" pos:end="331:24"><name pos:start="331:22" pos:end="331:22">i</name><operator pos:start="331:23" pos:end="331:23">&lt;</operator><literal type="number" pos:start="331:24" pos:end="331:24">4</literal></expr>;</condition> <incr pos:start="331:27" pos:end="331:29"><expr pos:start="331:27" pos:end="331:29"><name pos:start="331:27" pos:end="331:27">i</name><operator pos:start="331:28" pos:end="331:29">++</operator></expr></incr>)</control><block pos:start="331:31" pos:end="347:13">{<block_content pos:start="333:17" pos:end="345:85">

                <expr_stmt pos:start="333:17" pos:end="333:60"><expr pos:start="333:17" pos:end="333:59"><name pos:start="333:17" pos:end="333:33"><name pos:start="333:17" pos:end="333:17">h</name><operator pos:start="333:18" pos:end="333:19">-&gt;</operator><name pos:start="333:20" pos:end="333:30">sub_mb_type</name><index pos:start="333:31" pos:end="333:33">[<expr pos:start="333:32" pos:end="333:32"><name pos:start="333:32" pos:end="333:32">i</name></expr>]</index></name><operator pos:start="333:34" pos:end="333:34">=</operator> <call pos:start="333:36" pos:end="333:59"><name pos:start="333:36" pos:end="333:51">get_ue_golomb_31</name><argument_list pos:start="333:52" pos:end="333:59">(<argument pos:start="333:53" pos:end="333:58"><expr pos:start="333:53" pos:end="333:58"><operator pos:start="333:53" pos:end="333:53">&amp;</operator><name pos:start="333:54" pos:end="333:58"><name pos:start="333:54" pos:end="333:54">s</name><operator pos:start="333:55" pos:end="333:56">-&gt;</operator><name pos:start="333:57" pos:end="333:58">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="335:17" pos:end="341:17"><if pos:start="335:17" pos:end="341:17">if<condition pos:start="335:19" pos:end="335:41">(<expr pos:start="335:20" pos:end="335:40"><name pos:start="335:20" pos:end="335:36"><name pos:start="335:20" pos:end="335:20">h</name><operator pos:start="335:21" pos:end="335:22">-&gt;</operator><name pos:start="335:23" pos:end="335:33">sub_mb_type</name><index pos:start="335:34" pos:end="335:36">[<expr pos:start="335:35" pos:end="335:35"><name pos:start="335:35" pos:end="335:35">i</name></expr>]</index></name> <operator pos:start="335:38" pos:end="335:39">&gt;=</operator><literal type="number" pos:start="335:40" pos:end="335:40">4</literal></expr>)</condition><block pos:start="335:42" pos:end="341:17">{<block_content pos:start="337:21" pos:end="339:30">

                    <expr_stmt pos:start="337:21" pos:end="337:134"><expr pos:start="337:21" pos:end="337:133"><call pos:start="337:21" pos:end="337:133"><name pos:start="337:21" pos:end="337:26">av_log</name><argument_list pos:start="337:27" pos:end="337:133">(<argument pos:start="337:28" pos:end="337:37"><expr pos:start="337:28" pos:end="337:37"><name pos:start="337:28" pos:end="337:37"><name pos:start="337:28" pos:end="337:28">h</name><operator pos:start="337:29" pos:end="337:30">-&gt;</operator><name pos:start="337:31" pos:end="337:31">s</name><operator pos:start="337:32" pos:end="337:32">.</operator><name pos:start="337:33" pos:end="337:37">avctx</name></name></expr></argument>, <argument pos:start="337:40" pos:end="337:51"><expr pos:start="337:40" pos:end="337:51"><name pos:start="337:40" pos:end="337:51">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="337:54" pos:end="337:95"><expr pos:start="337:54" pos:end="337:95"><literal type="string" pos:start="337:54" pos:end="337:95">"P sub_mb_type %u out of range at %d %d\n"</literal></expr></argument>, <argument pos:start="337:98" pos:end="337:114"><expr pos:start="337:98" pos:end="337:114"><name pos:start="337:98" pos:end="337:114"><name pos:start="337:98" pos:end="337:98">h</name><operator pos:start="337:99" pos:end="337:100">-&gt;</operator><name pos:start="337:101" pos:end="337:111">sub_mb_type</name><index pos:start="337:112" pos:end="337:114">[<expr pos:start="337:113" pos:end="337:113"><name pos:start="337:113" pos:end="337:113">i</name></expr>]</index></name></expr></argument>, <argument pos:start="337:117" pos:end="337:123"><expr pos:start="337:117" pos:end="337:123"><name pos:start="337:117" pos:end="337:123"><name pos:start="337:117" pos:end="337:117">s</name><operator pos:start="337:118" pos:end="337:119">-&gt;</operator><name pos:start="337:120" pos:end="337:123">mb_x</name></name></expr></argument>, <argument pos:start="337:126" pos:end="337:132"><expr pos:start="337:126" pos:end="337:132"><name pos:start="337:126" pos:end="337:132"><name pos:start="337:126" pos:end="337:126">s</name><operator pos:start="337:127" pos:end="337:128">-&gt;</operator><name pos:start="337:129" pos:end="337:132">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="339:21" pos:end="339:30">return <expr pos:start="339:28" pos:end="339:29"><operator pos:start="339:28" pos:end="339:28">-</operator><literal type="number" pos:start="339:29" pos:end="339:29">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="343:17" pos:end="343:96"><expr pos:start="343:17" pos:end="343:95"><name pos:start="343:17" pos:end="343:38"><name pos:start="343:17" pos:end="343:35">sub_partition_count</name><index pos:start="343:36" pos:end="343:38">[<expr pos:start="343:37" pos:end="343:37"><name pos:start="343:37" pos:end="343:37">i</name></expr>]</index></name><operator pos:start="343:39" pos:end="343:39">=</operator> <name pos:start="343:41" pos:end="343:79"><name pos:start="343:41" pos:end="343:58">p_sub_mb_type_info</name><index pos:start="343:59" pos:end="343:79">[ <expr pos:start="343:61" pos:end="343:77"><name pos:start="343:61" pos:end="343:77"><name pos:start="343:61" pos:end="343:61">h</name><operator pos:start="343:62" pos:end="343:63">-&gt;</operator><name pos:start="343:64" pos:end="343:74">sub_mb_type</name><index pos:start="343:75" pos:end="343:77">[<expr pos:start="343:76" pos:end="343:76"><name pos:start="343:76" pos:end="343:76">i</name></expr>]</index></name></expr> ]</index></name><operator pos:start="343:80" pos:end="343:80">.</operator><name pos:start="343:81" pos:end="343:95">partition_count</name></expr>;</expr_stmt>

                <expr_stmt pos:start="345:17" pos:end="345:85"><expr pos:start="345:17" pos:end="345:84"><name pos:start="345:17" pos:end="345:33"><name pos:start="345:17" pos:end="345:17">h</name><operator pos:start="345:18" pos:end="345:19">-&gt;</operator><name pos:start="345:20" pos:end="345:30">sub_mb_type</name><index pos:start="345:31" pos:end="345:33">[<expr pos:start="345:32" pos:end="345:32"><name pos:start="345:32" pos:end="345:32">i</name></expr>]</index></name><operator pos:start="345:34" pos:end="345:34">=</operator>      <name pos:start="345:41" pos:end="345:79"><name pos:start="345:41" pos:end="345:58">p_sub_mb_type_info</name><index pos:start="345:59" pos:end="345:79">[ <expr pos:start="345:61" pos:end="345:77"><name pos:start="345:61" pos:end="345:77"><name pos:start="345:61" pos:end="345:61">h</name><operator pos:start="345:62" pos:end="345:63">-&gt;</operator><name pos:start="345:64" pos:end="345:74">sub_mb_type</name><index pos:start="345:75" pos:end="345:77">[<expr pos:start="345:76" pos:end="345:76"><name pos:start="345:76" pos:end="345:76">i</name></expr>]</index></name></expr> ]</index></name><operator pos:start="345:80" pos:end="345:80">.</operator><name pos:start="345:81" pos:end="345:84">type</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>



        <for pos:start="353:9" pos:end="399:9">for<control pos:start="353:12" pos:end="353:47">(<init pos:start="353:13" pos:end="353:19"><expr pos:start="353:13" pos:end="353:18"><name pos:start="353:13" pos:end="353:16">list</name><operator pos:start="353:17" pos:end="353:17">=</operator><literal type="number" pos:start="353:18" pos:end="353:18">0</literal></expr>;</init> <condition pos:start="353:21" pos:end="353:39"><expr pos:start="353:21" pos:end="353:38"><name pos:start="353:21" pos:end="353:24">list</name><operator pos:start="353:25" pos:end="353:25">&lt;</operator><name pos:start="353:26" pos:end="353:38"><name pos:start="353:26" pos:end="353:26">h</name><operator pos:start="353:27" pos:end="353:28">-&gt;</operator><name pos:start="353:29" pos:end="353:38">list_count</name></name></expr>;</condition> <incr pos:start="353:41" pos:end="353:46"><expr pos:start="353:41" pos:end="353:46"><name pos:start="353:41" pos:end="353:44">list</name><operator pos:start="353:45" pos:end="353:46">++</operator></expr></incr>)</control><block pos:start="353:48" pos:end="399:9">{<block_content pos:start="355:13" pos:end="397:13">

            <decl_stmt pos:start="355:13" pos:end="355:69"><decl pos:start="355:13" pos:end="355:68"><type pos:start="355:13" pos:end="355:15"><name pos:start="355:13" pos:end="355:15">int</name></type> <name pos:start="355:17" pos:end="355:25">ref_count</name><init pos:start="355:26" pos:end="355:68">= <expr pos:start="355:28" pos:end="355:68"><ternary pos:start="355:28" pos:end="355:68"><condition pos:start="355:28" pos:end="355:45"><expr pos:start="355:28" pos:end="355:43"><call pos:start="355:28" pos:end="355:43"><name pos:start="355:28" pos:end="355:34">IS_REF0</name><argument_list pos:start="355:35" pos:end="355:43">(<argument pos:start="355:36" pos:end="355:42"><expr pos:start="355:36" pos:end="355:42"><name pos:start="355:36" pos:end="355:42">mb_type</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="355:47" pos:end="355:47"> <expr pos:start="355:47" pos:end="355:47"><literal type="number" pos:start="355:47" pos:end="355:47">1</literal></expr> </then><else pos:start="355:49" pos:end="355:68">: <expr pos:start="355:51" pos:end="355:68"><name pos:start="355:51" pos:end="355:68"><name pos:start="355:51" pos:end="355:51">h</name><operator pos:start="355:52" pos:end="355:53">-&gt;</operator><name pos:start="355:54" pos:end="355:62">ref_count</name><index pos:start="355:63" pos:end="355:68">[<expr pos:start="355:64" pos:end="355:67"><name pos:start="355:64" pos:end="355:67">list</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <for pos:start="357:13" pos:end="397:13">for<control pos:start="357:16" pos:end="357:30">(<init pos:start="357:17" pos:end="357:20"><expr pos:start="357:17" pos:end="357:19"><name pos:start="357:17" pos:end="357:17">i</name><operator pos:start="357:18" pos:end="357:18">=</operator><literal type="number" pos:start="357:19" pos:end="357:19">0</literal></expr>;</init> <condition pos:start="357:22" pos:end="357:25"><expr pos:start="357:22" pos:end="357:24"><name pos:start="357:22" pos:end="357:22">i</name><operator pos:start="357:23" pos:end="357:23">&lt;</operator><literal type="number" pos:start="357:24" pos:end="357:24">4</literal></expr>;</condition> <incr pos:start="357:27" pos:end="357:29"><expr pos:start="357:27" pos:end="357:29"><name pos:start="357:27" pos:end="357:27">i</name><operator pos:start="357:28" pos:end="357:29">++</operator></expr></incr>)</control><block pos:start="357:31" pos:end="397:13">{<block_content pos:start="359:17" pos:end="395:17">

                <if_stmt pos:start="359:17" pos:end="359:58"><if pos:start="359:17" pos:end="359:58">if<condition pos:start="359:19" pos:end="359:48">(<expr pos:start="359:20" pos:end="359:47"><call pos:start="359:20" pos:end="359:47"><name pos:start="359:20" pos:end="359:28">IS_DIRECT</name><argument_list pos:start="359:29" pos:end="359:47">(<argument pos:start="359:30" pos:end="359:46"><expr pos:start="359:30" pos:end="359:46"><name pos:start="359:30" pos:end="359:46"><name pos:start="359:30" pos:end="359:30">h</name><operator pos:start="359:31" pos:end="359:32">-&gt;</operator><name pos:start="359:33" pos:end="359:43">sub_mb_type</name><index pos:start="359:44" pos:end="359:46">[<expr pos:start="359:45" pos:end="359:45"><name pos:start="359:45" pos:end="359:45">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="359:50" pos:end="359:58"><block_content pos:start="359:50" pos:end="359:58"> <continue pos:start="359:50" pos:end="359:58">continue;</continue></block_content></block></if></if_stmt>

                <if_stmt pos:start="361:17" pos:end="395:17"><if pos:start="361:17" pos:end="389:17">if<condition pos:start="361:19" pos:end="361:54">(<expr pos:start="361:20" pos:end="361:53"><call pos:start="361:20" pos:end="361:53"><name pos:start="361:20" pos:end="361:25">IS_DIR</name><argument_list pos:start="361:26" pos:end="361:53">(<argument pos:start="361:27" pos:end="361:43"><expr pos:start="361:27" pos:end="361:43"><name pos:start="361:27" pos:end="361:43"><name pos:start="361:27" pos:end="361:27">h</name><operator pos:start="361:28" pos:end="361:29">-&gt;</operator><name pos:start="361:30" pos:end="361:40">sub_mb_type</name><index pos:start="361:41" pos:end="361:43">[<expr pos:start="361:42" pos:end="361:42"><name pos:start="361:42" pos:end="361:42">i</name></expr>]</index></name></expr></argument>, <argument pos:start="361:46" pos:end="361:46"><expr pos:start="361:46" pos:end="361:46"><literal type="number" pos:start="361:46" pos:end="361:46">0</literal></expr></argument>, <argument pos:start="361:49" pos:end="361:52"><expr pos:start="361:49" pos:end="361:52"><name pos:start="361:49" pos:end="361:52">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="361:55" pos:end="389:17">{<block_content pos:start="363:21" pos:end="387:38">

                    <decl_stmt pos:start="363:21" pos:end="363:37"><decl pos:start="363:21" pos:end="363:36"><type pos:start="363:21" pos:end="363:32"><name pos:start="363:21" pos:end="363:28">unsigned</name> <name pos:start="363:30" pos:end="363:32">int</name></type> <name pos:start="363:34" pos:end="363:36">tmp</name></decl>;</decl_stmt>

                    <if_stmt pos:start="365:21" pos:end="385:21"><if pos:start="365:21" pos:end="369:21">if<condition pos:start="365:23" pos:end="365:38">(<expr pos:start="365:24" pos:end="365:37"><name pos:start="365:24" pos:end="365:32">ref_count</name> <operator pos:start="365:34" pos:end="365:35">==</operator> <literal type="number" pos:start="365:37" pos:end="365:37">1</literal></expr>)</condition><block pos:start="365:39" pos:end="369:21">{<block_content pos:start="367:25" pos:end="367:31">

                        <expr_stmt pos:start="367:25" pos:end="367:31"><expr pos:start="367:25" pos:end="367:30"><name pos:start="367:25" pos:end="367:27">tmp</name><operator pos:start="367:28" pos:end="367:28">=</operator> <literal type="number" pos:start="367:30" pos:end="367:30">0</literal></expr>;</expr_stmt>

                    </block_content>}</block></if><if type="elseif" pos:start="369:22" pos:end="373:21">else if<condition pos:start="369:29" pos:end="369:44">(<expr pos:start="369:30" pos:end="369:43"><name pos:start="369:30" pos:end="369:38">ref_count</name> <operator pos:start="369:40" pos:end="369:41">==</operator> <literal type="number" pos:start="369:43" pos:end="369:43">2</literal></expr>)</condition><block pos:start="369:45" pos:end="373:21">{<block_content pos:start="371:25" pos:end="371:49">

                        <expr_stmt pos:start="371:25" pos:end="371:49"><expr pos:start="371:25" pos:end="371:48"><name pos:start="371:25" pos:end="371:27">tmp</name><operator pos:start="371:28" pos:end="371:28">=</operator> <call pos:start="371:30" pos:end="371:46"><name pos:start="371:30" pos:end="371:38">get_bits1</name><argument_list pos:start="371:39" pos:end="371:46">(<argument pos:start="371:40" pos:end="371:45"><expr pos:start="371:40" pos:end="371:45"><operator pos:start="371:40" pos:end="371:40">&amp;</operator><name pos:start="371:41" pos:end="371:45"><name pos:start="371:41" pos:end="371:41">s</name><operator pos:start="371:42" pos:end="371:43">-&gt;</operator><name pos:start="371:44" pos:end="371:45">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="371:47" pos:end="371:47">^</operator><literal type="number" pos:start="371:48" pos:end="371:48">1</literal></expr>;</expr_stmt>

                    </block_content>}</block></if><else pos:start="373:22" pos:end="385:21">else<block pos:start="373:26" pos:end="385:21">{<block_content pos:start="375:25" pos:end="383:25">

                        <expr_stmt pos:start="375:25" pos:end="375:54"><expr pos:start="375:25" pos:end="375:53"><name pos:start="375:25" pos:end="375:27">tmp</name><operator pos:start="375:28" pos:end="375:28">=</operator> <call pos:start="375:30" pos:end="375:53"><name pos:start="375:30" pos:end="375:45">get_ue_golomb_31</name><argument_list pos:start="375:46" pos:end="375:53">(<argument pos:start="375:47" pos:end="375:52"><expr pos:start="375:47" pos:end="375:52"><operator pos:start="375:47" pos:end="375:47">&amp;</operator><name pos:start="375:48" pos:end="375:52"><name pos:start="375:48" pos:end="375:48">s</name><operator pos:start="375:49" pos:end="375:50">-&gt;</operator><name pos:start="375:51" pos:end="375:52">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="377:25" pos:end="383:25"><if pos:start="377:25" pos:end="383:25">if<condition pos:start="377:27" pos:end="377:42">(<expr pos:start="377:28" pos:end="377:41"><name pos:start="377:28" pos:end="377:30">tmp</name><operator pos:start="377:31" pos:end="377:32">&gt;=</operator><name pos:start="377:33" pos:end="377:41">ref_count</name></expr>)</condition><block pos:start="377:43" pos:end="383:25">{<block_content pos:start="379:29" pos:end="381:38">

                            <expr_stmt pos:start="379:29" pos:end="379:87"><expr pos:start="379:29" pos:end="379:86"><call pos:start="379:29" pos:end="379:86"><name pos:start="379:29" pos:end="379:34">av_log</name><argument_list pos:start="379:35" pos:end="379:86">(<argument pos:start="379:36" pos:end="379:45"><expr pos:start="379:36" pos:end="379:45"><name pos:start="379:36" pos:end="379:45"><name pos:start="379:36" pos:end="379:36">h</name><operator pos:start="379:37" pos:end="379:38">-&gt;</operator><name pos:start="379:39" pos:end="379:39">s</name><operator pos:start="379:40" pos:end="379:40">.</operator><name pos:start="379:41" pos:end="379:45">avctx</name></name></expr></argument>, <argument pos:start="379:48" pos:end="379:59"><expr pos:start="379:48" pos:end="379:59"><name pos:start="379:48" pos:end="379:59">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="379:62" pos:end="379:80"><expr pos:start="379:62" pos:end="379:80"><literal type="string" pos:start="379:62" pos:end="379:80">"ref %u overflow\n"</literal></expr></argument>, <argument pos:start="379:83" pos:end="379:85"><expr pos:start="379:83" pos:end="379:85"><name pos:start="379:83" pos:end="379:85">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <return pos:start="381:29" pos:end="381:38">return <expr pos:start="381:36" pos:end="381:37"><operator pos:start="381:36" pos:end="381:36">-</operator><literal type="number" pos:start="381:37" pos:end="381:37">1</literal></expr>;</return>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="387:21" pos:end="387:38"><expr pos:start="387:21" pos:end="387:37"><name pos:start="387:21" pos:end="387:32"><name pos:start="387:21" pos:end="387:23">ref</name><index pos:start="387:24" pos:end="387:29">[<expr pos:start="387:25" pos:end="387:28"><name pos:start="387:25" pos:end="387:28">list</name></expr>]</index><index pos:start="387:30" pos:end="387:32">[<expr pos:start="387:31" pos:end="387:31"><name pos:start="387:31" pos:end="387:31">i</name></expr>]</index></name><operator pos:start="387:33" pos:end="387:33">=</operator> <name pos:start="387:35" pos:end="387:37">tmp</name></expr>;</expr_stmt>

                </block_content>}</block></if><else pos:start="389:18" pos:end="395:17">else<block pos:start="389:22" pos:end="395:17">{<block_content pos:start="393:21" pos:end="393:38">

                 <comment type="line" pos:start="391:18" pos:end="391:24">//FIXME</comment>

                    <expr_stmt pos:start="393:21" pos:end="393:38"><expr pos:start="393:21" pos:end="393:37"><name pos:start="393:21" pos:end="393:32"><name pos:start="393:21" pos:end="393:23">ref</name><index pos:start="393:24" pos:end="393:29">[<expr pos:start="393:25" pos:end="393:28"><name pos:start="393:25" pos:end="393:28">list</name></expr>]</index><index pos:start="393:30" pos:end="393:32">[<expr pos:start="393:31" pos:end="393:31"><name pos:start="393:31" pos:end="393:31">i</name></expr>]</index></name> <operator pos:start="393:34" pos:end="393:34">=</operator> <operator pos:start="393:36" pos:end="393:36">-</operator><literal type="number" pos:start="393:37" pos:end="393:37">1</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>



        <if_stmt pos:start="403:9" pos:end="405:51"><if pos:start="403:9" pos:end="405:51">if<condition pos:start="403:11" pos:end="403:26">(<expr pos:start="403:12" pos:end="403:25"><name pos:start="403:12" pos:end="403:25">dct8x8_allowed</name></expr>)</condition><block type="pseudo" pos:start="405:13" pos:end="405:51"><block_content pos:start="405:13" pos:end="405:51">

            <expr_stmt pos:start="405:13" pos:end="405:51"><expr pos:start="405:13" pos:end="405:50"><name pos:start="405:13" pos:end="405:26">dct8x8_allowed</name> <operator pos:start="405:28" pos:end="405:28">=</operator> <call pos:start="405:30" pos:end="405:50"><name pos:start="405:30" pos:end="405:47">get_dct8x8_allowed</name><argument_list pos:start="405:48" pos:end="405:50">(<argument pos:start="405:49" pos:end="405:49"><expr pos:start="405:49" pos:end="405:49"><name pos:start="405:49" pos:end="405:49">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <for pos:start="409:9" pos:end="493:9">for<control pos:start="409:12" pos:end="409:47">(<init pos:start="409:13" pos:end="409:19"><expr pos:start="409:13" pos:end="409:18"><name pos:start="409:13" pos:end="409:16">list</name><operator pos:start="409:17" pos:end="409:17">=</operator><literal type="number" pos:start="409:18" pos:end="409:18">0</literal></expr>;</init> <condition pos:start="409:21" pos:end="409:39"><expr pos:start="409:21" pos:end="409:38"><name pos:start="409:21" pos:end="409:24">list</name><operator pos:start="409:25" pos:end="409:25">&lt;</operator><name pos:start="409:26" pos:end="409:38"><name pos:start="409:26" pos:end="409:26">h</name><operator pos:start="409:27" pos:end="409:28">-&gt;</operator><name pos:start="409:29" pos:end="409:38">list_count</name></name></expr>;</condition> <incr pos:start="409:41" pos:end="409:46"><expr pos:start="409:41" pos:end="409:46"><name pos:start="409:41" pos:end="409:44">list</name><operator pos:start="409:45" pos:end="409:46">++</operator></expr></incr>)</control><block pos:start="409:48" pos:end="493:9">{<block_content pos:start="411:13" pos:end="491:13">

            <for pos:start="411:13" pos:end="491:13">for<control pos:start="411:16" pos:end="411:30">(<init pos:start="411:17" pos:end="411:20"><expr pos:start="411:17" pos:end="411:19"><name pos:start="411:17" pos:end="411:17">i</name><operator pos:start="411:18" pos:end="411:18">=</operator><literal type="number" pos:start="411:19" pos:end="411:19">0</literal></expr>;</init> <condition pos:start="411:22" pos:end="411:25"><expr pos:start="411:22" pos:end="411:24"><name pos:start="411:22" pos:end="411:22">i</name><operator pos:start="411:23" pos:end="411:23">&lt;</operator><literal type="number" pos:start="411:24" pos:end="411:24">4</literal></expr>;</condition> <incr pos:start="411:27" pos:end="411:29"><expr pos:start="411:27" pos:end="411:29"><name pos:start="411:27" pos:end="411:27">i</name><operator pos:start="411:28" pos:end="411:29">++</operator></expr></incr>)</control><block pos:start="411:31" pos:end="491:13">{<block_content pos:start="413:17" pos:end="489:17">

                <if_stmt pos:start="413:17" pos:end="419:17"><if pos:start="413:17" pos:end="419:17">if<condition pos:start="413:19" pos:end="413:48">(<expr pos:start="413:20" pos:end="413:47"><call pos:start="413:20" pos:end="413:47"><name pos:start="413:20" pos:end="413:28">IS_DIRECT</name><argument_list pos:start="413:29" pos:end="413:47">(<argument pos:start="413:30" pos:end="413:46"><expr pos:start="413:30" pos:end="413:46"><name pos:start="413:30" pos:end="413:46"><name pos:start="413:30" pos:end="413:30">h</name><operator pos:start="413:31" pos:end="413:32">-&gt;</operator><name pos:start="413:33" pos:end="413:43">sub_mb_type</name><index pos:start="413:44" pos:end="413:46">[<expr pos:start="413:45" pos:end="413:45"><name pos:start="413:45" pos:end="413:45">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="413:50" pos:end="419:17">{<block_content pos:start="415:21" pos:end="417:29">

                    <expr_stmt pos:start="415:21" pos:end="415:90"><expr pos:start="415:21" pos:end="415:89"><name pos:start="415:21" pos:end="415:52"><name pos:start="415:21" pos:end="415:21">h</name><operator pos:start="415:22" pos:end="415:23">-&gt;</operator><name pos:start="415:24" pos:end="415:32">ref_cache</name><index pos:start="415:33" pos:end="415:38">[<expr pos:start="415:34" pos:end="415:37"><name pos:start="415:34" pos:end="415:37">list</name></expr>]</index><index pos:start="415:39" pos:end="415:52">[ <expr pos:start="415:41" pos:end="415:50"><name pos:start="415:41" pos:end="415:50"><name pos:start="415:41" pos:end="415:45">scan8</name><index pos:start="415:46" pos:end="415:50">[<expr pos:start="415:47" pos:end="415:49"><literal type="number" pos:start="415:47" pos:end="415:47">4</literal><operator pos:start="415:48" pos:end="415:48">*</operator><name pos:start="415:49" pos:end="415:49">i</name></expr>]</index></name></expr> ]</index></name> <operator pos:start="415:54" pos:end="415:54">=</operator> <name pos:start="415:56" pos:end="415:89"><name pos:start="415:56" pos:end="415:56">h</name><operator pos:start="415:57" pos:end="415:58">-&gt;</operator><name pos:start="415:59" pos:end="415:67">ref_cache</name><index pos:start="415:68" pos:end="415:73">[<expr pos:start="415:69" pos:end="415:72"><name pos:start="415:69" pos:end="415:72">list</name></expr>]</index><index pos:start="415:74" pos:end="415:89">[ <expr pos:start="415:76" pos:end="415:87"><name pos:start="415:76" pos:end="415:85"><name pos:start="415:76" pos:end="415:80">scan8</name><index pos:start="415:81" pos:end="415:85">[<expr pos:start="415:82" pos:end="415:84"><literal type="number" pos:start="415:82" pos:end="415:82">4</literal><operator pos:start="415:83" pos:end="415:83">*</operator><name pos:start="415:84" pos:end="415:84">i</name></expr>]</index></name><operator pos:start="415:86" pos:end="415:86">+</operator><literal type="number" pos:start="415:87" pos:end="415:87">1</literal></expr> ]</index></name></expr>;</expr_stmt>

                    <continue pos:start="417:21" pos:end="417:29">continue;</continue>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="421:17" pos:end="423:100"><expr pos:start="421:17" pos:end="423:99"><name pos:start="421:17" pos:end="421:50"><name pos:start="421:17" pos:end="421:17">h</name><operator pos:start="421:18" pos:end="421:19">-&gt;</operator><name pos:start="421:20" pos:end="421:28">ref_cache</name><index pos:start="421:29" pos:end="421:34">[<expr pos:start="421:30" pos:end="421:33"><name pos:start="421:30" pos:end="421:33">list</name></expr>]</index><index pos:start="421:35" pos:end="421:50">[ <expr pos:start="421:37" pos:end="421:46"><name pos:start="421:37" pos:end="421:46"><name pos:start="421:37" pos:end="421:41">scan8</name><index pos:start="421:42" pos:end="421:46">[<expr pos:start="421:43" pos:end="421:45"><literal type="number" pos:start="421:43" pos:end="421:43">4</literal><operator pos:start="421:44" pos:end="421:44">*</operator><name pos:start="421:45" pos:end="421:45">i</name></expr>]</index></name></expr>   ]</index></name><operator pos:start="421:51" pos:end="421:51">=</operator><name pos:start="421:52" pos:end="421:85"><name pos:start="421:52" pos:end="421:52">h</name><operator pos:start="421:53" pos:end="421:54">-&gt;</operator><name pos:start="421:55" pos:end="421:63">ref_cache</name><index pos:start="421:64" pos:end="421:69">[<expr pos:start="421:65" pos:end="421:68"><name pos:start="421:65" pos:end="421:68">list</name></expr>]</index><index pos:start="421:70" pos:end="421:85">[ <expr pos:start="421:72" pos:end="421:83"><name pos:start="421:72" pos:end="421:81"><name pos:start="421:72" pos:end="421:76">scan8</name><index pos:start="421:77" pos:end="421:81">[<expr pos:start="421:78" pos:end="421:80"><literal type="number" pos:start="421:78" pos:end="421:78">4</literal><operator pos:start="421:79" pos:end="421:79">*</operator><name pos:start="421:80" pos:end="421:80">i</name></expr>]</index></name><operator pos:start="421:82" pos:end="421:82">+</operator><literal type="number" pos:start="421:83" pos:end="421:83">1</literal></expr> ]</index></name><operator pos:start="421:86" pos:end="421:86">=</operator>

                <name pos:start="423:17" pos:end="423:50"><name pos:start="423:17" pos:end="423:17">h</name><operator pos:start="423:18" pos:end="423:19">-&gt;</operator><name pos:start="423:20" pos:end="423:28">ref_cache</name><index pos:start="423:29" pos:end="423:34">[<expr pos:start="423:30" pos:end="423:33"><name pos:start="423:30" pos:end="423:33">list</name></expr>]</index><index pos:start="423:35" pos:end="423:50">[ <expr pos:start="423:37" pos:end="423:48"><name pos:start="423:37" pos:end="423:46"><name pos:start="423:37" pos:end="423:41">scan8</name><index pos:start="423:42" pos:end="423:46">[<expr pos:start="423:43" pos:end="423:45"><literal type="number" pos:start="423:43" pos:end="423:43">4</literal><operator pos:start="423:44" pos:end="423:44">*</operator><name pos:start="423:45" pos:end="423:45">i</name></expr>]</index></name><operator pos:start="423:47" pos:end="423:47">+</operator><literal type="number" pos:start="423:48" pos:end="423:48">8</literal></expr> ]</index></name><operator pos:start="423:51" pos:end="423:51">=</operator><name pos:start="423:52" pos:end="423:85"><name pos:start="423:52" pos:end="423:52">h</name><operator pos:start="423:53" pos:end="423:54">-&gt;</operator><name pos:start="423:55" pos:end="423:63">ref_cache</name><index pos:start="423:64" pos:end="423:69">[<expr pos:start="423:65" pos:end="423:68"><name pos:start="423:65" pos:end="423:68">list</name></expr>]</index><index pos:start="423:70" pos:end="423:85">[ <expr pos:start="423:72" pos:end="423:83"><name pos:start="423:72" pos:end="423:81"><name pos:start="423:72" pos:end="423:76">scan8</name><index pos:start="423:77" pos:end="423:81">[<expr pos:start="423:78" pos:end="423:80"><literal type="number" pos:start="423:78" pos:end="423:78">4</literal><operator pos:start="423:79" pos:end="423:79">*</operator><name pos:start="423:80" pos:end="423:80">i</name></expr>]</index></name><operator pos:start="423:82" pos:end="423:82">+</operator><literal type="number" pos:start="423:83" pos:end="423:83">9</literal></expr> ]</index></name><operator pos:start="423:86" pos:end="423:86">=</operator> <name pos:start="423:88" pos:end="423:99"><name pos:start="423:88" pos:end="423:90">ref</name><index pos:start="423:91" pos:end="423:96">[<expr pos:start="423:92" pos:end="423:95"><name pos:start="423:92" pos:end="423:95">list</name></expr>]</index><index pos:start="423:97" pos:end="423:99">[<expr pos:start="423:98" pos:end="423:98"><name pos:start="423:98" pos:end="423:98">i</name></expr>]</index></name></expr>;</expr_stmt>



                <if_stmt pos:start="427:17" pos:end="489:17"><if pos:start="427:17" pos:end="481:17">if<condition pos:start="427:19" pos:end="427:54">(<expr pos:start="427:20" pos:end="427:53"><call pos:start="427:20" pos:end="427:53"><name pos:start="427:20" pos:end="427:25">IS_DIR</name><argument_list pos:start="427:26" pos:end="427:53">(<argument pos:start="427:27" pos:end="427:43"><expr pos:start="427:27" pos:end="427:43"><name pos:start="427:27" pos:end="427:43"><name pos:start="427:27" pos:end="427:27">h</name><operator pos:start="427:28" pos:end="427:29">-&gt;</operator><name pos:start="427:30" pos:end="427:40">sub_mb_type</name><index pos:start="427:41" pos:end="427:43">[<expr pos:start="427:42" pos:end="427:42"><name pos:start="427:42" pos:end="427:42">i</name></expr>]</index></name></expr></argument>, <argument pos:start="427:46" pos:end="427:46"><expr pos:start="427:46" pos:end="427:46"><literal type="number" pos:start="427:46" pos:end="427:46">0</literal></expr></argument>, <argument pos:start="427:49" pos:end="427:52"><expr pos:start="427:49" pos:end="427:52"><name pos:start="427:49" pos:end="427:52">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="427:55" pos:end="481:17">{<block_content pos:start="429:21" pos:end="479:21">

                    <decl_stmt pos:start="429:21" pos:end="429:61"><decl pos:start="429:21" pos:end="429:60"><type pos:start="429:21" pos:end="429:29"><specifier pos:start="429:21" pos:end="429:25">const</specifier> <name pos:start="429:27" pos:end="429:29">int</name></type> <name pos:start="429:31" pos:end="429:41">sub_mb_type</name><init pos:start="429:42" pos:end="429:60">= <expr pos:start="429:44" pos:end="429:60"><name pos:start="429:44" pos:end="429:60"><name pos:start="429:44" pos:end="429:44">h</name><operator pos:start="429:45" pos:end="429:46">-&gt;</operator><name pos:start="429:47" pos:end="429:57">sub_mb_type</name><index pos:start="429:58" pos:end="429:60">[<expr pos:start="429:59" pos:end="429:59"><name pos:start="429:59" pos:end="429:59">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="431:21" pos:end="431:96"><decl pos:start="431:21" pos:end="431:95"><type pos:start="431:21" pos:end="431:29"><specifier pos:start="431:21" pos:end="431:25">const</specifier> <name pos:start="431:27" pos:end="431:29">int</name></type> <name pos:start="431:31" pos:end="431:41">block_width</name><init pos:start="431:42" pos:end="431:95">= <expr pos:start="431:44" pos:end="431:95"><ternary pos:start="431:44" pos:end="431:95"><condition pos:start="431:44" pos:end="431:89"><expr pos:start="431:44" pos:end="431:87"><operator pos:start="431:44" pos:end="431:44">(</operator><name pos:start="431:45" pos:end="431:55">sub_mb_type</name> <operator pos:start="431:57" pos:end="431:57">&amp;</operator> <operator pos:start="431:59" pos:end="431:59">(</operator><name pos:start="431:60" pos:end="431:72">MB_TYPE_16x16</name><operator pos:start="431:73" pos:end="431:73">|</operator><name pos:start="431:74" pos:end="431:85">MB_TYPE_16x8</name><operator pos:start="431:86" pos:end="431:86">)</operator><operator pos:start="431:87" pos:end="431:87">)</operator></expr> ?</condition><then pos:start="431:91" pos:end="431:91"> <expr pos:start="431:91" pos:end="431:91"><literal type="number" pos:start="431:91" pos:end="431:91">2</literal></expr> </then><else pos:start="431:93" pos:end="431:95">: <expr pos:start="431:95" pos:end="431:95"><literal type="number" pos:start="431:95" pos:end="431:95">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                    <for pos:start="433:21" pos:end="479:21">for<control pos:start="433:24" pos:end="433:59">(<init pos:start="433:25" pos:end="433:28"><expr pos:start="433:25" pos:end="433:27"><name pos:start="433:25" pos:end="433:25">j</name><operator pos:start="433:26" pos:end="433:26">=</operator><literal type="number" pos:start="433:27" pos:end="433:27">0</literal></expr>;</init> <condition pos:start="433:30" pos:end="433:54"><expr pos:start="433:30" pos:end="433:53"><name pos:start="433:30" pos:end="433:30">j</name><operator pos:start="433:31" pos:end="433:31">&lt;</operator><name pos:start="433:32" pos:end="433:53"><name pos:start="433:32" pos:end="433:50">sub_partition_count</name><index pos:start="433:51" pos:end="433:53">[<expr pos:start="433:52" pos:end="433:52"><name pos:start="433:52" pos:end="433:52">i</name></expr>]</index></name></expr>;</condition> <incr pos:start="433:56" pos:end="433:58"><expr pos:start="433:56" pos:end="433:58"><name pos:start="433:56" pos:end="433:56">j</name><operator pos:start="433:57" pos:end="433:58">++</operator></expr></incr>)</control><block pos:start="433:60" pos:end="479:21">{<block_content pos:start="435:25" pos:end="477:45">

                        <decl_stmt pos:start="435:25" pos:end="435:35"><decl pos:start="435:25" pos:end="435:30"><type pos:start="435:25" pos:end="435:27"><name pos:start="435:25" pos:end="435:27">int</name></type> <name pos:start="435:29" pos:end="435:30">mx</name></decl>, <decl pos:start="435:33" pos:end="435:34"><type ref="prev" pos:start="435:25" pos:end="435:27"/><name pos:start="435:33" pos:end="435:34">my</name></decl>;</decl_stmt>

                        <decl_stmt pos:start="437:25" pos:end="437:61"><decl pos:start="437:25" pos:end="437:60"><type pos:start="437:25" pos:end="437:33"><specifier pos:start="437:25" pos:end="437:29">const</specifier> <name pos:start="437:31" pos:end="437:33">int</name></type> <name pos:start="437:35" pos:end="437:39">index</name><init pos:start="437:40" pos:end="437:60">= <expr pos:start="437:42" pos:end="437:60"><literal type="number" pos:start="437:42" pos:end="437:42">4</literal><operator pos:start="437:43" pos:end="437:43">*</operator><name pos:start="437:44" pos:end="437:44">i</name> <operator pos:start="437:46" pos:end="437:46">+</operator> <name pos:start="437:48" pos:end="437:58">block_width</name><operator pos:start="437:59" pos:end="437:59">*</operator><name pos:start="437:60" pos:end="437:60">j</name></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="439:25" pos:end="439:84"><expr pos:start="439:25" pos:end="439:83"><call pos:start="439:25" pos:end="439:44"><name pos:start="439:25" pos:end="439:31">int16_t</name> <argument_list pos:start="439:33" pos:end="439:44">(<argument pos:start="439:34" pos:end="439:43"><expr pos:start="439:34" pos:end="439:43"><operator pos:start="439:34" pos:end="439:34">*</operator> <name pos:start="439:36" pos:end="439:43">mv_cache</name></expr></argument>)</argument_list></call><index pos:start="439:45" pos:end="439:47">[<expr pos:start="439:46" pos:end="439:46"><literal type="number" pos:start="439:46" pos:end="439:46">2</literal></expr>]</index><operator pos:start="439:48" pos:end="439:48">=</operator> <operator pos:start="439:50" pos:end="439:50">&amp;</operator><name pos:start="439:51" pos:end="439:83"><name pos:start="439:51" pos:end="439:51">h</name><operator pos:start="439:52" pos:end="439:53">-&gt;</operator><name pos:start="439:54" pos:end="439:61">mv_cache</name><index pos:start="439:62" pos:end="439:67">[<expr pos:start="439:63" pos:end="439:66"><name pos:start="439:63" pos:end="439:66">list</name></expr>]</index><index pos:start="439:68" pos:end="439:83">[ <expr pos:start="439:70" pos:end="439:81"><name pos:start="439:70" pos:end="439:81"><name pos:start="439:70" pos:end="439:74">scan8</name><index pos:start="439:75" pos:end="439:81">[<expr pos:start="439:76" pos:end="439:80"><name pos:start="439:76" pos:end="439:80">index</name></expr>]</index></name></expr> ]</index></name></expr>;</expr_stmt>

                        <expr_stmt pos:start="441:25" pos:end="441:111"><expr pos:start="441:25" pos:end="441:110"><call pos:start="441:25" pos:end="441:110"><name pos:start="441:25" pos:end="441:35">pred_motion</name><argument_list pos:start="441:36" pos:end="441:110">(<argument pos:start="441:37" pos:end="441:37"><expr pos:start="441:37" pos:end="441:37"><name pos:start="441:37" pos:end="441:37">h</name></expr></argument>, <argument pos:start="441:40" pos:end="441:44"><expr pos:start="441:40" pos:end="441:44"><name pos:start="441:40" pos:end="441:44">index</name></expr></argument>, <argument pos:start="441:47" pos:end="441:57"><expr pos:start="441:47" pos:end="441:57"><name pos:start="441:47" pos:end="441:57">block_width</name></expr></argument>, <argument pos:start="441:60" pos:end="441:63"><expr pos:start="441:60" pos:end="441:63"><name pos:start="441:60" pos:end="441:63">list</name></expr></argument>, <argument pos:start="441:66" pos:end="441:99"><expr pos:start="441:66" pos:end="441:99"><name pos:start="441:66" pos:end="441:99"><name pos:start="441:66" pos:end="441:66">h</name><operator pos:start="441:67" pos:end="441:68">-&gt;</operator><name pos:start="441:69" pos:end="441:77">ref_cache</name><index pos:start="441:78" pos:end="441:83">[<expr pos:start="441:79" pos:end="441:82"><name pos:start="441:79" pos:end="441:82">list</name></expr>]</index><index pos:start="441:84" pos:end="441:99">[ <expr pos:start="441:86" pos:end="441:97"><name pos:start="441:86" pos:end="441:97"><name pos:start="441:86" pos:end="441:90">scan8</name><index pos:start="441:91" pos:end="441:97">[<expr pos:start="441:92" pos:end="441:96"><name pos:start="441:92" pos:end="441:96">index</name></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument pos:start="441:102" pos:end="441:104"><expr pos:start="441:102" pos:end="441:104"><operator pos:start="441:102" pos:end="441:102">&amp;</operator><name pos:start="441:103" pos:end="441:104">mx</name></expr></argument>, <argument pos:start="441:107" pos:end="441:109"><expr pos:start="441:107" pos:end="441:109"><operator pos:start="441:107" pos:end="441:107">&amp;</operator><name pos:start="441:108" pos:end="441:109">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="443:25" pos:end="443:52"><expr pos:start="443:25" pos:end="443:51"><name pos:start="443:25" pos:end="443:26">mx</name> <operator pos:start="443:28" pos:end="443:29">+=</operator> <call pos:start="443:31" pos:end="443:51"><name pos:start="443:31" pos:end="443:43">get_se_golomb</name><argument_list pos:start="443:44" pos:end="443:51">(<argument pos:start="443:45" pos:end="443:50"><expr pos:start="443:45" pos:end="443:50"><operator pos:start="443:45" pos:end="443:45">&amp;</operator><name pos:start="443:46" pos:end="443:50"><name pos:start="443:46" pos:end="443:46">s</name><operator pos:start="443:47" pos:end="443:48">-&gt;</operator><name pos:start="443:49" pos:end="443:50">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="445:25" pos:end="445:52"><expr pos:start="445:25" pos:end="445:51"><name pos:start="445:25" pos:end="445:26">my</name> <operator pos:start="445:28" pos:end="445:29">+=</operator> <call pos:start="445:31" pos:end="445:51"><name pos:start="445:31" pos:end="445:43">get_se_golomb</name><argument_list pos:start="445:44" pos:end="445:51">(<argument pos:start="445:45" pos:end="445:50"><expr pos:start="445:45" pos:end="445:50"><operator pos:start="445:45" pos:end="445:45">&amp;</operator><name pos:start="445:46" pos:end="445:50"><name pos:start="445:46" pos:end="445:46">s</name><operator pos:start="445:47" pos:end="445:48">-&gt;</operator><name pos:start="445:49" pos:end="445:50">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="447:25" pos:end="447:70"><expr pos:start="447:25" pos:end="447:69"><call pos:start="447:25" pos:end="447:69"><name pos:start="447:25" pos:end="447:31">tprintf</name><argument_list pos:start="447:32" pos:end="447:69">(<argument pos:start="447:33" pos:end="447:40"><expr pos:start="447:33" pos:end="447:40"><name pos:start="447:33" pos:end="447:40"><name pos:start="447:33" pos:end="447:33">s</name><operator pos:start="447:34" pos:end="447:35">-&gt;</operator><name pos:start="447:36" pos:end="447:40">avctx</name></name></expr></argument>, <argument pos:start="447:43" pos:end="447:60"><expr pos:start="447:43" pos:end="447:60"><literal type="string" pos:start="447:43" pos:end="447:60">"final mv:%d %d\n"</literal></expr></argument>, <argument pos:start="447:63" pos:end="447:64"><expr pos:start="447:63" pos:end="447:64"><name pos:start="447:63" pos:end="447:64">mx</name></expr></argument>, <argument pos:start="447:67" pos:end="447:68"><expr pos:start="447:67" pos:end="447:68"><name pos:start="447:67" pos:end="447:68">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <if_stmt pos:start="451:25" pos:end="473:25"><if pos:start="451:25" pos:end="461:25">if<condition pos:start="451:27" pos:end="451:51">(<expr pos:start="451:28" pos:end="451:50"><call pos:start="451:28" pos:end="451:50"><name pos:start="451:28" pos:end="451:37">IS_SUB_8X8</name><argument_list pos:start="451:38" pos:end="451:50">(<argument pos:start="451:39" pos:end="451:49"><expr pos:start="451:39" pos:end="451:49"><name pos:start="451:39" pos:end="451:49">sub_mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="451:52" pos:end="461:25">{<block_content pos:start="453:29" pos:end="459:67">

                            <expr_stmt pos:start="453:29" pos:end="455:67"><expr pos:start="453:29" pos:end="455:66"><name pos:start="453:29" pos:end="453:44"><name pos:start="453:29" pos:end="453:36">mv_cache</name><index pos:start="453:37" pos:end="453:41">[ <expr pos:start="453:39" pos:end="453:39"><literal type="number" pos:start="453:39" pos:end="453:39">1</literal></expr> ]</index><index pos:start="453:42" pos:end="453:44">[<expr pos:start="453:43" pos:end="453:43"><literal type="number" pos:start="453:43" pos:end="453:43">0</literal></expr>]</index></name><operator pos:start="453:45" pos:end="453:45">=</operator>

                            <name pos:start="455:29" pos:end="455:44"><name pos:start="455:29" pos:end="455:36">mv_cache</name><index pos:start="455:37" pos:end="455:41">[ <expr pos:start="455:39" pos:end="455:39"><literal type="number" pos:start="455:39" pos:end="455:39">8</literal></expr> ]</index><index pos:start="455:42" pos:end="455:44">[<expr pos:start="455:43" pos:end="455:43"><literal type="number" pos:start="455:43" pos:end="455:43">0</literal></expr>]</index></name><operator pos:start="455:45" pos:end="455:45">=</operator> <name pos:start="455:47" pos:end="455:62"><name pos:start="455:47" pos:end="455:54">mv_cache</name><index pos:start="455:55" pos:end="455:59">[ <expr pos:start="455:57" pos:end="455:57"><literal type="number" pos:start="455:57" pos:end="455:57">9</literal></expr> ]</index><index pos:start="455:60" pos:end="455:62">[<expr pos:start="455:61" pos:end="455:61"><literal type="number" pos:start="455:61" pos:end="455:61">0</literal></expr>]</index></name><operator pos:start="455:63" pos:end="455:63">=</operator> <name pos:start="455:65" pos:end="455:66">mx</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="457:29" pos:end="459:67"><expr pos:start="457:29" pos:end="459:66"><name pos:start="457:29" pos:end="457:44"><name pos:start="457:29" pos:end="457:36">mv_cache</name><index pos:start="457:37" pos:end="457:41">[ <expr pos:start="457:39" pos:end="457:39"><literal type="number" pos:start="457:39" pos:end="457:39">1</literal></expr> ]</index><index pos:start="457:42" pos:end="457:44">[<expr pos:start="457:43" pos:end="457:43"><literal type="number" pos:start="457:43" pos:end="457:43">1</literal></expr>]</index></name><operator pos:start="457:45" pos:end="457:45">=</operator>

                            <name pos:start="459:29" pos:end="459:44"><name pos:start="459:29" pos:end="459:36">mv_cache</name><index pos:start="459:37" pos:end="459:41">[ <expr pos:start="459:39" pos:end="459:39"><literal type="number" pos:start="459:39" pos:end="459:39">8</literal></expr> ]</index><index pos:start="459:42" pos:end="459:44">[<expr pos:start="459:43" pos:end="459:43"><literal type="number" pos:start="459:43" pos:end="459:43">1</literal></expr>]</index></name><operator pos:start="459:45" pos:end="459:45">=</operator> <name pos:start="459:47" pos:end="459:62"><name pos:start="459:47" pos:end="459:54">mv_cache</name><index pos:start="459:55" pos:end="459:59">[ <expr pos:start="459:57" pos:end="459:57"><literal type="number" pos:start="459:57" pos:end="459:57">9</literal></expr> ]</index><index pos:start="459:60" pos:end="459:62">[<expr pos:start="459:61" pos:end="459:61"><literal type="number" pos:start="459:61" pos:end="459:61">1</literal></expr>]</index></name><operator pos:start="459:63" pos:end="459:63">=</operator> <name pos:start="459:65" pos:end="459:66">my</name></expr>;</expr_stmt>

                        </block_content>}</block></if><if type="elseif" pos:start="461:26" pos:end="467:25">else if<condition pos:start="461:33" pos:end="461:57">(<expr pos:start="461:34" pos:end="461:56"><call pos:start="461:34" pos:end="461:56"><name pos:start="461:34" pos:end="461:43">IS_SUB_8X4</name><argument_list pos:start="461:44" pos:end="461:56">(<argument pos:start="461:45" pos:end="461:55"><expr pos:start="461:45" pos:end="461:55"><name pos:start="461:45" pos:end="461:55">sub_mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="461:58" pos:end="467:25">{<block_content pos:start="463:29" pos:end="465:49">

                            <expr_stmt pos:start="463:29" pos:end="463:49"><expr pos:start="463:29" pos:end="463:48"><name pos:start="463:29" pos:end="463:44"><name pos:start="463:29" pos:end="463:36">mv_cache</name><index pos:start="463:37" pos:end="463:41">[ <expr pos:start="463:39" pos:end="463:39"><literal type="number" pos:start="463:39" pos:end="463:39">1</literal></expr> ]</index><index pos:start="463:42" pos:end="463:44">[<expr pos:start="463:43" pos:end="463:43"><literal type="number" pos:start="463:43" pos:end="463:43">0</literal></expr>]</index></name><operator pos:start="463:45" pos:end="463:45">=</operator> <name pos:start="463:47" pos:end="463:48">mx</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="465:29" pos:end="465:49"><expr pos:start="465:29" pos:end="465:48"><name pos:start="465:29" pos:end="465:44"><name pos:start="465:29" pos:end="465:36">mv_cache</name><index pos:start="465:37" pos:end="465:41">[ <expr pos:start="465:39" pos:end="465:39"><literal type="number" pos:start="465:39" pos:end="465:39">1</literal></expr> ]</index><index pos:start="465:42" pos:end="465:44">[<expr pos:start="465:43" pos:end="465:43"><literal type="number" pos:start="465:43" pos:end="465:43">1</literal></expr>]</index></name><operator pos:start="465:45" pos:end="465:45">=</operator> <name pos:start="465:47" pos:end="465:48">my</name></expr>;</expr_stmt>

                        </block_content>}</block></if><if type="elseif" pos:start="467:26" pos:end="473:25">else if<condition pos:start="467:33" pos:end="467:57">(<expr pos:start="467:34" pos:end="467:56"><call pos:start="467:34" pos:end="467:56"><name pos:start="467:34" pos:end="467:43">IS_SUB_4X8</name><argument_list pos:start="467:44" pos:end="467:56">(<argument pos:start="467:45" pos:end="467:55"><expr pos:start="467:45" pos:end="467:55"><name pos:start="467:45" pos:end="467:55">sub_mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="467:58" pos:end="473:25">{<block_content pos:start="469:29" pos:end="471:49">

                            <expr_stmt pos:start="469:29" pos:end="469:49"><expr pos:start="469:29" pos:end="469:48"><name pos:start="469:29" pos:end="469:44"><name pos:start="469:29" pos:end="469:36">mv_cache</name><index pos:start="469:37" pos:end="469:41">[ <expr pos:start="469:39" pos:end="469:39"><literal type="number" pos:start="469:39" pos:end="469:39">8</literal></expr> ]</index><index pos:start="469:42" pos:end="469:44">[<expr pos:start="469:43" pos:end="469:43"><literal type="number" pos:start="469:43" pos:end="469:43">0</literal></expr>]</index></name><operator pos:start="469:45" pos:end="469:45">=</operator> <name pos:start="469:47" pos:end="469:48">mx</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="471:29" pos:end="471:49"><expr pos:start="471:29" pos:end="471:48"><name pos:start="471:29" pos:end="471:44"><name pos:start="471:29" pos:end="471:36">mv_cache</name><index pos:start="471:37" pos:end="471:41">[ <expr pos:start="471:39" pos:end="471:39"><literal type="number" pos:start="471:39" pos:end="471:39">8</literal></expr> ]</index><index pos:start="471:42" pos:end="471:44">[<expr pos:start="471:43" pos:end="471:43"><literal type="number" pos:start="471:43" pos:end="471:43">1</literal></expr>]</index></name><operator pos:start="471:45" pos:end="471:45">=</operator> <name pos:start="471:47" pos:end="471:48">my</name></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="475:25" pos:end="475:45"><expr pos:start="475:25" pos:end="475:44"><name pos:start="475:25" pos:end="475:40"><name pos:start="475:25" pos:end="475:32">mv_cache</name><index pos:start="475:33" pos:end="475:37">[ <expr pos:start="475:35" pos:end="475:35"><literal type="number" pos:start="475:35" pos:end="475:35">0</literal></expr> ]</index><index pos:start="475:38" pos:end="475:40">[<expr pos:start="475:39" pos:end="475:39"><literal type="number" pos:start="475:39" pos:end="475:39">0</literal></expr>]</index></name><operator pos:start="475:41" pos:end="475:41">=</operator> <name pos:start="475:43" pos:end="475:44">mx</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="477:25" pos:end="477:45"><expr pos:start="477:25" pos:end="477:44"><name pos:start="477:25" pos:end="477:40"><name pos:start="477:25" pos:end="477:32">mv_cache</name><index pos:start="477:33" pos:end="477:37">[ <expr pos:start="477:35" pos:end="477:35"><literal type="number" pos:start="477:35" pos:end="477:35">0</literal></expr> ]</index><index pos:start="477:38" pos:end="477:40">[<expr pos:start="477:39" pos:end="477:39"><literal type="number" pos:start="477:39" pos:end="477:39">1</literal></expr>]</index></name><operator pos:start="477:41" pos:end="477:41">=</operator> <name pos:start="477:43" pos:end="477:44">my</name></expr>;</expr_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></if><else pos:start="481:18" pos:end="489:17">else<block pos:start="481:22" pos:end="489:17">{<block_content pos:start="483:21" pos:end="487:35">

                    <decl_stmt pos:start="483:21" pos:end="483:81"><decl pos:start="483:21" pos:end="483:80"><type pos:start="483:21" pos:end="483:30"><name pos:start="483:21" pos:end="483:28">uint32_t</name> <modifier pos:start="483:30" pos:end="483:30">*</modifier></type><name pos:start="483:31" pos:end="483:31">p</name><init pos:start="483:32" pos:end="483:80">= <expr pos:start="483:34" pos:end="483:80"><operator pos:start="483:34" pos:end="483:34">(</operator><name pos:start="483:35" pos:end="483:42">uint32_t</name> <operator pos:start="483:44" pos:end="483:44">*</operator><operator pos:start="483:45" pos:end="483:45">)</operator><operator pos:start="483:46" pos:end="483:46">&amp;</operator><name pos:start="483:47" pos:end="483:80"><name pos:start="483:47" pos:end="483:47">h</name><operator pos:start="483:48" pos:end="483:49">-&gt;</operator><name pos:start="483:50" pos:end="483:57">mv_cache</name><index pos:start="483:58" pos:end="483:63">[<expr pos:start="483:59" pos:end="483:62"><name pos:start="483:59" pos:end="483:62">list</name></expr>]</index><index pos:start="483:64" pos:end="483:77">[ <expr pos:start="483:66" pos:end="483:75"><name pos:start="483:66" pos:end="483:75"><name pos:start="483:66" pos:end="483:70">scan8</name><index pos:start="483:71" pos:end="483:75">[<expr pos:start="483:72" pos:end="483:74"><literal type="number" pos:start="483:72" pos:end="483:72">4</literal><operator pos:start="483:73" pos:end="483:73">*</operator><name pos:start="483:74" pos:end="483:74">i</name></expr>]</index></name></expr> ]</index><index pos:start="483:78" pos:end="483:80">[<expr pos:start="483:79" pos:end="483:79"><literal type="number" pos:start="483:79" pos:end="483:79">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="485:21" pos:end="487:35"><expr pos:start="485:21" pos:end="487:34"><name pos:start="485:21" pos:end="485:24"><name pos:start="485:21" pos:end="485:21">p</name><index pos:start="485:22" pos:end="485:24">[<expr pos:start="485:23" pos:end="485:23"><literal type="number" pos:start="485:23" pos:end="485:23">0</literal></expr>]</index></name> <operator pos:start="485:26" pos:end="485:26">=</operator> <name pos:start="485:28" pos:end="485:31"><name pos:start="485:28" pos:end="485:28">p</name><index pos:start="485:29" pos:end="485:31">[<expr pos:start="485:30" pos:end="485:30"><literal type="number" pos:start="485:30" pos:end="485:30">1</literal></expr>]</index></name><operator pos:start="485:32" pos:end="485:32">=</operator>

                    <name pos:start="487:21" pos:end="487:24"><name pos:start="487:21" pos:end="487:21">p</name><index pos:start="487:22" pos:end="487:24">[<expr pos:start="487:23" pos:end="487:23"><literal type="number" pos:start="487:23" pos:end="487:23">8</literal></expr>]</index></name> <operator pos:start="487:26" pos:end="487:26">=</operator> <name pos:start="487:28" pos:end="487:31"><name pos:start="487:28" pos:end="487:28">p</name><index pos:start="487:29" pos:end="487:31">[<expr pos:start="487:30" pos:end="487:30"><literal type="number" pos:start="487:30" pos:end="487:30">9</literal></expr>]</index></name><operator pos:start="487:32" pos:end="487:32">=</operator> <literal type="number" pos:start="487:34" pos:end="487:34">0</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

    </block_content>}</block></if><if type="elseif" pos:start="495:6" pos:end="501:5">else if<condition pos:start="495:13" pos:end="495:32">(<expr pos:start="495:14" pos:end="495:31"><call pos:start="495:14" pos:end="495:31"><name pos:start="495:14" pos:end="495:22">IS_DIRECT</name><argument_list pos:start="495:23" pos:end="495:31">(<argument pos:start="495:24" pos:end="495:30"><expr pos:start="495:24" pos:end="495:30"><name pos:start="495:24" pos:end="495:30">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="495:33" pos:end="501:5">{<block_content pos:start="497:9" pos:end="499:59">

        <expr_stmt pos:start="497:9" pos:end="497:48"><expr pos:start="497:9" pos:end="497:47"><call pos:start="497:9" pos:end="497:47"><name pos:start="497:9" pos:end="497:34">ff_h264_pred_direct_motion</name><argument_list pos:start="497:35" pos:end="497:47">(<argument pos:start="497:36" pos:end="497:36"><expr pos:start="497:36" pos:end="497:36"><name pos:start="497:36" pos:end="497:36">h</name></expr></argument>, <argument pos:start="497:39" pos:end="497:46"><expr pos:start="497:39" pos:end="497:46"><operator pos:start="497:39" pos:end="497:39">&amp;</operator><name pos:start="497:40" pos:end="497:46">mb_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="499:9" pos:end="499:59"><expr pos:start="499:9" pos:end="499:58"><name pos:start="499:9" pos:end="499:22">dct8x8_allowed</name> <operator pos:start="499:24" pos:end="499:25">&amp;=</operator> <name pos:start="499:27" pos:end="499:58"><name pos:start="499:27" pos:end="499:27">h</name><operator pos:start="499:28" pos:end="499:29">-&gt;</operator><name pos:start="499:30" pos:end="499:32">sps</name><operator pos:start="499:33" pos:end="499:33">.</operator><name pos:start="499:34" pos:end="499:58">direct_8x8_inference_flag</name></name></expr>;</expr_stmt>

    </block_content>}</block></if><else pos:start="501:6" pos:end="713:5">else<block pos:start="501:10" pos:end="713:5">{<block_content pos:start="503:9" pos:end="711:9">

        <decl_stmt pos:start="503:9" pos:end="503:28"><decl pos:start="503:9" pos:end="503:16"><type pos:start="503:9" pos:end="503:11"><name pos:start="503:9" pos:end="503:11">int</name></type> <name pos:start="503:13" pos:end="503:16">list</name></decl>, <decl pos:start="503:19" pos:end="503:20"><type ref="prev" pos:start="503:9" pos:end="503:11"/><name pos:start="503:19" pos:end="503:20">mx</name></decl>, <decl pos:start="503:23" pos:end="503:24"><type ref="prev" pos:start="503:9" pos:end="503:11"/><name pos:start="503:23" pos:end="503:24">my</name></decl>, <decl pos:start="503:27" pos:end="503:27"><type ref="prev" pos:start="503:9" pos:end="503:11"/><name pos:start="503:27" pos:end="503:27">i</name></decl>;</decl_stmt>

         <comment type="line" pos:start="505:10" pos:end="505:71">//FIXME we should set ref_idx_l? to 0 if we use that later ...</comment>

        <if_stmt pos:start="507:9" pos:end="711:9"><if pos:start="507:9" pos:end="563:9">if<condition pos:start="507:11" pos:end="507:29">(<expr pos:start="507:12" pos:end="507:28"><call pos:start="507:12" pos:end="507:28"><name pos:start="507:12" pos:end="507:19">IS_16X16</name><argument_list pos:start="507:20" pos:end="507:28">(<argument pos:start="507:21" pos:end="507:27"><expr pos:start="507:21" pos:end="507:27"><name pos:start="507:21" pos:end="507:27">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="507:30" pos:end="563:9">{<block_content pos:start="509:13" pos:end="561:13">

            <for pos:start="509:13" pos:end="541:13">for<control pos:start="509:16" pos:end="509:51">(<init pos:start="509:17" pos:end="509:23"><expr pos:start="509:17" pos:end="509:22"><name pos:start="509:17" pos:end="509:20">list</name><operator pos:start="509:21" pos:end="509:21">=</operator><literal type="number" pos:start="509:22" pos:end="509:22">0</literal></expr>;</init> <condition pos:start="509:25" pos:end="509:43"><expr pos:start="509:25" pos:end="509:42"><name pos:start="509:25" pos:end="509:28">list</name><operator pos:start="509:29" pos:end="509:29">&lt;</operator><name pos:start="509:30" pos:end="509:42"><name pos:start="509:30" pos:end="509:30">h</name><operator pos:start="509:31" pos:end="509:32">-&gt;</operator><name pos:start="509:33" pos:end="509:42">list_count</name></name></expr>;</condition> <incr pos:start="509:45" pos:end="509:50"><expr pos:start="509:45" pos:end="509:50"><name pos:start="509:45" pos:end="509:48">list</name><operator pos:start="509:49" pos:end="509:50">++</operator></expr></incr>)</control><block pos:start="509:52" pos:end="541:13">{<block_content pos:start="511:21" pos:end="539:21">

                    <decl_stmt pos:start="511:21" pos:end="511:37"><decl pos:start="511:21" pos:end="511:36"><type pos:start="511:21" pos:end="511:32"><name pos:start="511:21" pos:end="511:28">unsigned</name> <name pos:start="511:30" pos:end="511:32">int</name></type> <name pos:start="511:34" pos:end="511:36">val</name></decl>;</decl_stmt>

                    <if_stmt pos:start="513:21" pos:end="539:21"><if pos:start="513:21" pos:end="539:21">if<condition pos:start="513:23" pos:end="513:48">(<expr pos:start="513:24" pos:end="513:47"><call pos:start="513:24" pos:end="513:47"><name pos:start="513:24" pos:end="513:29">IS_DIR</name><argument_list pos:start="513:30" pos:end="513:47">(<argument pos:start="513:31" pos:end="513:37"><expr pos:start="513:31" pos:end="513:37"><name pos:start="513:31" pos:end="513:37">mb_type</name></expr></argument>, <argument pos:start="513:40" pos:end="513:40"><expr pos:start="513:40" pos:end="513:40"><literal type="number" pos:start="513:40" pos:end="513:40">0</literal></expr></argument>, <argument pos:start="513:43" pos:end="513:46"><expr pos:start="513:43" pos:end="513:46"><name pos:start="513:43" pos:end="513:46">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="513:49" pos:end="539:21">{<block_content pos:start="515:25" pos:end="537:85">

                        <if_stmt pos:start="515:25" pos:end="535:25"><if pos:start="515:25" pos:end="519:25">if<condition pos:start="515:27" pos:end="515:49">(<expr pos:start="515:28" pos:end="515:48"><name pos:start="515:28" pos:end="515:45"><name pos:start="515:28" pos:end="515:28">h</name><operator pos:start="515:29" pos:end="515:30">-&gt;</operator><name pos:start="515:31" pos:end="515:39">ref_count</name><index pos:start="515:40" pos:end="515:45">[<expr pos:start="515:41" pos:end="515:44"><name pos:start="515:41" pos:end="515:44">list</name></expr>]</index></name><operator pos:start="515:46" pos:end="515:47">==</operator><literal type="number" pos:start="515:48" pos:end="515:48">1</literal></expr>)</condition><block pos:start="515:50" pos:end="519:25">{<block_content pos:start="517:29" pos:end="517:35">

                            <expr_stmt pos:start="517:29" pos:end="517:35"><expr pos:start="517:29" pos:end="517:34"><name pos:start="517:29" pos:end="517:31">val</name><operator pos:start="517:32" pos:end="517:32">=</operator> <literal type="number" pos:start="517:34" pos:end="517:34">0</literal></expr>;</expr_stmt>

                        </block_content>}</block></if><if type="elseif" pos:start="519:26" pos:end="523:25">else if<condition pos:start="519:33" pos:end="519:55">(<expr pos:start="519:34" pos:end="519:54"><name pos:start="519:34" pos:end="519:51"><name pos:start="519:34" pos:end="519:34">h</name><operator pos:start="519:35" pos:end="519:36">-&gt;</operator><name pos:start="519:37" pos:end="519:45">ref_count</name><index pos:start="519:46" pos:end="519:51">[<expr pos:start="519:47" pos:end="519:50"><name pos:start="519:47" pos:end="519:50">list</name></expr>]</index></name><operator pos:start="519:52" pos:end="519:53">==</operator><literal type="number" pos:start="519:54" pos:end="519:54">2</literal></expr>)</condition><block pos:start="519:56" pos:end="523:25">{<block_content pos:start="521:29" pos:end="521:53">

                            <expr_stmt pos:start="521:29" pos:end="521:53"><expr pos:start="521:29" pos:end="521:52"><name pos:start="521:29" pos:end="521:31">val</name><operator pos:start="521:32" pos:end="521:32">=</operator> <call pos:start="521:34" pos:end="521:50"><name pos:start="521:34" pos:end="521:42">get_bits1</name><argument_list pos:start="521:43" pos:end="521:50">(<argument pos:start="521:44" pos:end="521:49"><expr pos:start="521:44" pos:end="521:49"><operator pos:start="521:44" pos:end="521:44">&amp;</operator><name pos:start="521:45" pos:end="521:49"><name pos:start="521:45" pos:end="521:45">s</name><operator pos:start="521:46" pos:end="521:47">-&gt;</operator><name pos:start="521:48" pos:end="521:49">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="521:51" pos:end="521:51">^</operator><literal type="number" pos:start="521:52" pos:end="521:52">1</literal></expr>;</expr_stmt>

                        </block_content>}</block></if><else pos:start="523:26" pos:end="535:25">else<block pos:start="523:30" pos:end="535:25">{<block_content pos:start="525:29" pos:end="533:29">

                            <expr_stmt pos:start="525:29" pos:end="525:58"><expr pos:start="525:29" pos:end="525:57"><name pos:start="525:29" pos:end="525:31">val</name><operator pos:start="525:32" pos:end="525:32">=</operator> <call pos:start="525:34" pos:end="525:57"><name pos:start="525:34" pos:end="525:49">get_ue_golomb_31</name><argument_list pos:start="525:50" pos:end="525:57">(<argument pos:start="525:51" pos:end="525:56"><expr pos:start="525:51" pos:end="525:56"><operator pos:start="525:51" pos:end="525:51">&amp;</operator><name pos:start="525:52" pos:end="525:56"><name pos:start="525:52" pos:end="525:52">s</name><operator pos:start="525:53" pos:end="525:54">-&gt;</operator><name pos:start="525:55" pos:end="525:56">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="527:29" pos:end="533:29"><if pos:start="527:29" pos:end="533:29">if<condition pos:start="527:31" pos:end="527:57">(<expr pos:start="527:32" pos:end="527:56"><name pos:start="527:32" pos:end="527:34">val</name> <operator pos:start="527:36" pos:end="527:37">&gt;=</operator> <name pos:start="527:39" pos:end="527:56"><name pos:start="527:39" pos:end="527:39">h</name><operator pos:start="527:40" pos:end="527:41">-&gt;</operator><name pos:start="527:42" pos:end="527:50">ref_count</name><index pos:start="527:51" pos:end="527:56">[<expr pos:start="527:52" pos:end="527:55"><name pos:start="527:52" pos:end="527:55">list</name></expr>]</index></name></expr>)</condition><block pos:start="527:58" pos:end="533:29">{<block_content pos:start="529:33" pos:end="531:42">

                                <expr_stmt pos:start="529:33" pos:end="529:91"><expr pos:start="529:33" pos:end="529:90"><call pos:start="529:33" pos:end="529:90"><name pos:start="529:33" pos:end="529:38">av_log</name><argument_list pos:start="529:39" pos:end="529:90">(<argument pos:start="529:40" pos:end="529:49"><expr pos:start="529:40" pos:end="529:49"><name pos:start="529:40" pos:end="529:49"><name pos:start="529:40" pos:end="529:40">h</name><operator pos:start="529:41" pos:end="529:42">-&gt;</operator><name pos:start="529:43" pos:end="529:43">s</name><operator pos:start="529:44" pos:end="529:44">.</operator><name pos:start="529:45" pos:end="529:49">avctx</name></name></expr></argument>, <argument pos:start="529:52" pos:end="529:63"><expr pos:start="529:52" pos:end="529:63"><name pos:start="529:52" pos:end="529:63">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="529:66" pos:end="529:84"><expr pos:start="529:66" pos:end="529:84"><literal type="string" pos:start="529:66" pos:end="529:84">"ref %u overflow\n"</literal></expr></argument>, <argument pos:start="529:87" pos:end="529:89"><expr pos:start="529:87" pos:end="529:89"><name pos:start="529:87" pos:end="529:89">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <return pos:start="531:33" pos:end="531:42">return <expr pos:start="531:40" pos:end="531:41"><operator pos:start="531:40" pos:end="531:40">-</operator><literal type="number" pos:start="531:41" pos:end="531:41">1</literal></expr>;</return>

                            </block_content>}</block></if></if_stmt>

                        </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="537:21" pos:end="537:85"><expr pos:start="537:21" pos:end="537:84"><call pos:start="537:21" pos:end="537:84"><name pos:start="537:21" pos:end="537:34">fill_rectangle</name><argument_list pos:start="537:35" pos:end="537:84">(<argument pos:start="537:36" pos:end="537:66"><expr pos:start="537:36" pos:end="537:66"><operator pos:start="537:36" pos:end="537:36">&amp;</operator><name pos:start="537:37" pos:end="537:66"><name pos:start="537:37" pos:end="537:37">h</name><operator pos:start="537:38" pos:end="537:39">-&gt;</operator><name pos:start="537:40" pos:end="537:48">ref_cache</name><index pos:start="537:49" pos:end="537:54">[<expr pos:start="537:50" pos:end="537:53"><name pos:start="537:50" pos:end="537:53">list</name></expr>]</index><index pos:start="537:55" pos:end="537:66">[ <expr pos:start="537:57" pos:end="537:64"><name pos:start="537:57" pos:end="537:64"><name pos:start="537:57" pos:end="537:61">scan8</name><index pos:start="537:62" pos:end="537:64">[<expr pos:start="537:63" pos:end="537:63"><literal type="number" pos:start="537:63" pos:end="537:63">0</literal></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument pos:start="537:69" pos:end="537:69"><expr pos:start="537:69" pos:end="537:69"><literal type="number" pos:start="537:69" pos:end="537:69">4</literal></expr></argument>, <argument pos:start="537:72" pos:end="537:72"><expr pos:start="537:72" pos:end="537:72"><literal type="number" pos:start="537:72" pos:end="537:72">4</literal></expr></argument>, <argument pos:start="537:75" pos:end="537:75"><expr pos:start="537:75" pos:end="537:75"><literal type="number" pos:start="537:75" pos:end="537:75">8</literal></expr></argument>, <argument pos:start="537:78" pos:end="537:80"><expr pos:start="537:78" pos:end="537:80"><name pos:start="537:78" pos:end="537:80">val</name></expr></argument>, <argument pos:start="537:83" pos:end="537:83"><expr pos:start="537:83" pos:end="537:83"><literal type="number" pos:start="537:83" pos:end="537:83">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

            <for pos:start="543:13" pos:end="561:13">for<control pos:start="543:16" pos:end="543:51">(<init pos:start="543:17" pos:end="543:23"><expr pos:start="543:17" pos:end="543:22"><name pos:start="543:17" pos:end="543:20">list</name><operator pos:start="543:21" pos:end="543:21">=</operator><literal type="number" pos:start="543:22" pos:end="543:22">0</literal></expr>;</init> <condition pos:start="543:25" pos:end="543:43"><expr pos:start="543:25" pos:end="543:42"><name pos:start="543:25" pos:end="543:28">list</name><operator pos:start="543:29" pos:end="543:29">&lt;</operator><name pos:start="543:30" pos:end="543:42"><name pos:start="543:30" pos:end="543:30">h</name><operator pos:start="543:31" pos:end="543:32">-&gt;</operator><name pos:start="543:33" pos:end="543:42">list_count</name></name></expr>;</condition> <incr pos:start="543:45" pos:end="543:50"><expr pos:start="543:45" pos:end="543:50"><name pos:start="543:45" pos:end="543:48">list</name><operator pos:start="543:49" pos:end="543:50">++</operator></expr></incr>)</control><block pos:start="543:52" pos:end="561:13">{<block_content pos:start="545:17" pos:end="559:17">

                <if_stmt pos:start="545:17" pos:end="559:17"><if pos:start="545:17" pos:end="559:17">if<condition pos:start="545:19" pos:end="545:44">(<expr pos:start="545:20" pos:end="545:43"><call pos:start="545:20" pos:end="545:43"><name pos:start="545:20" pos:end="545:25">IS_DIR</name><argument_list pos:start="545:26" pos:end="545:43">(<argument pos:start="545:27" pos:end="545:33"><expr pos:start="545:27" pos:end="545:33"><name pos:start="545:27" pos:end="545:33">mb_type</name></expr></argument>, <argument pos:start="545:36" pos:end="545:36"><expr pos:start="545:36" pos:end="545:36"><literal type="number" pos:start="545:36" pos:end="545:36">0</literal></expr></argument>, <argument pos:start="545:39" pos:end="545:42"><expr pos:start="545:39" pos:end="545:42"><name pos:start="545:39" pos:end="545:42">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="545:45" pos:end="559:17">{<block_content pos:start="547:21" pos:end="557:97">

                    <expr_stmt pos:start="547:21" pos:end="547:89"><expr pos:start="547:21" pos:end="547:88"><call pos:start="547:21" pos:end="547:88"><name pos:start="547:21" pos:end="547:31">pred_motion</name><argument_list pos:start="547:32" pos:end="547:88">(<argument pos:start="547:33" pos:end="547:33"><expr pos:start="547:33" pos:end="547:33"><name pos:start="547:33" pos:end="547:33">h</name></expr></argument>, <argument pos:start="547:36" pos:end="547:36"><expr pos:start="547:36" pos:end="547:36"><literal type="number" pos:start="547:36" pos:end="547:36">0</literal></expr></argument>, <argument pos:start="547:39" pos:end="547:39"><expr pos:start="547:39" pos:end="547:39"><literal type="number" pos:start="547:39" pos:end="547:39">4</literal></expr></argument>, <argument pos:start="547:42" pos:end="547:45"><expr pos:start="547:42" pos:end="547:45"><name pos:start="547:42" pos:end="547:45">list</name></expr></argument>, <argument pos:start="547:48" pos:end="547:77"><expr pos:start="547:48" pos:end="547:77"><name pos:start="547:48" pos:end="547:77"><name pos:start="547:48" pos:end="547:48">h</name><operator pos:start="547:49" pos:end="547:50">-&gt;</operator><name pos:start="547:51" pos:end="547:59">ref_cache</name><index pos:start="547:60" pos:end="547:65">[<expr pos:start="547:61" pos:end="547:64"><name pos:start="547:61" pos:end="547:64">list</name></expr>]</index><index pos:start="547:66" pos:end="547:77">[ <expr pos:start="547:68" pos:end="547:75"><name pos:start="547:68" pos:end="547:75"><name pos:start="547:68" pos:end="547:72">scan8</name><index pos:start="547:73" pos:end="547:75">[<expr pos:start="547:74" pos:end="547:74"><literal type="number" pos:start="547:74" pos:end="547:74">0</literal></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument pos:start="547:80" pos:end="547:82"><expr pos:start="547:80" pos:end="547:82"><operator pos:start="547:80" pos:end="547:80">&amp;</operator><name pos:start="547:81" pos:end="547:82">mx</name></expr></argument>, <argument pos:start="547:85" pos:end="547:87"><expr pos:start="547:85" pos:end="547:87"><operator pos:start="547:85" pos:end="547:85">&amp;</operator><name pos:start="547:86" pos:end="547:87">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="549:21" pos:end="549:48"><expr pos:start="549:21" pos:end="549:47"><name pos:start="549:21" pos:end="549:22">mx</name> <operator pos:start="549:24" pos:end="549:25">+=</operator> <call pos:start="549:27" pos:end="549:47"><name pos:start="549:27" pos:end="549:39">get_se_golomb</name><argument_list pos:start="549:40" pos:end="549:47">(<argument pos:start="549:41" pos:end="549:46"><expr pos:start="549:41" pos:end="549:46"><operator pos:start="549:41" pos:end="549:41">&amp;</operator><name pos:start="549:42" pos:end="549:46"><name pos:start="549:42" pos:end="549:42">s</name><operator pos:start="549:43" pos:end="549:44">-&gt;</operator><name pos:start="549:45" pos:end="549:46">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="551:21" pos:end="551:48"><expr pos:start="551:21" pos:end="551:47"><name pos:start="551:21" pos:end="551:22">my</name> <operator pos:start="551:24" pos:end="551:25">+=</operator> <call pos:start="551:27" pos:end="551:47"><name pos:start="551:27" pos:end="551:39">get_se_golomb</name><argument_list pos:start="551:40" pos:end="551:47">(<argument pos:start="551:41" pos:end="551:46"><expr pos:start="551:41" pos:end="551:46"><operator pos:start="551:41" pos:end="551:41">&amp;</operator><name pos:start="551:42" pos:end="551:46"><name pos:start="551:42" pos:end="551:42">s</name><operator pos:start="551:43" pos:end="551:44">-&gt;</operator><name pos:start="551:45" pos:end="551:46">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="553:21" pos:end="553:66"><expr pos:start="553:21" pos:end="553:65"><call pos:start="553:21" pos:end="553:65"><name pos:start="553:21" pos:end="553:27">tprintf</name><argument_list pos:start="553:28" pos:end="553:65">(<argument pos:start="553:29" pos:end="553:36"><expr pos:start="553:29" pos:end="553:36"><name pos:start="553:29" pos:end="553:36"><name pos:start="553:29" pos:end="553:29">s</name><operator pos:start="553:30" pos:end="553:31">-&gt;</operator><name pos:start="553:32" pos:end="553:36">avctx</name></name></expr></argument>, <argument pos:start="553:39" pos:end="553:56"><expr pos:start="553:39" pos:end="553:56"><literal type="string" pos:start="553:39" pos:end="553:56">"final mv:%d %d\n"</literal></expr></argument>, <argument pos:start="553:59" pos:end="553:60"><expr pos:start="553:59" pos:end="553:60"><name pos:start="553:59" pos:end="553:60">mx</name></expr></argument>, <argument pos:start="553:63" pos:end="553:64"><expr pos:start="553:63" pos:end="553:64"><name pos:start="553:63" pos:end="553:64">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <expr_stmt pos:start="557:21" pos:end="557:97"><expr pos:start="557:21" pos:end="557:96"><call pos:start="557:21" pos:end="557:96"><name pos:start="557:21" pos:end="557:34">fill_rectangle</name><argument_list pos:start="557:35" pos:end="557:96">(<argument pos:start="557:36" pos:end="557:64"><expr pos:start="557:36" pos:end="557:64"><name pos:start="557:36" pos:end="557:64"><name pos:start="557:36" pos:end="557:36">h</name><operator pos:start="557:37" pos:end="557:38">-&gt;</operator><name pos:start="557:39" pos:end="557:46">mv_cache</name><index pos:start="557:47" pos:end="557:52">[<expr pos:start="557:48" pos:end="557:51"><name pos:start="557:48" pos:end="557:51">list</name></expr>]</index><index pos:start="557:53" pos:end="557:64">[ <expr pos:start="557:55" pos:end="557:62"><name pos:start="557:55" pos:end="557:62"><name pos:start="557:55" pos:end="557:59">scan8</name><index pos:start="557:60" pos:end="557:62">[<expr pos:start="557:61" pos:end="557:61"><literal type="number" pos:start="557:61" pos:end="557:61">0</literal></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument pos:start="557:67" pos:end="557:67"><expr pos:start="557:67" pos:end="557:67"><literal type="number" pos:start="557:67" pos:end="557:67">4</literal></expr></argument>, <argument pos:start="557:70" pos:end="557:70"><expr pos:start="557:70" pos:end="557:70"><literal type="number" pos:start="557:70" pos:end="557:70">4</literal></expr></argument>, <argument pos:start="557:73" pos:end="557:73"><expr pos:start="557:73" pos:end="557:73"><literal type="number" pos:start="557:73" pos:end="557:73">8</literal></expr></argument>, <argument pos:start="557:76" pos:end="557:92"><expr pos:start="557:76" pos:end="557:92"><call pos:start="557:76" pos:end="557:92"><name pos:start="557:76" pos:end="557:85">pack16to32</name><argument_list pos:start="557:86" pos:end="557:92">(<argument pos:start="557:87" pos:end="557:88"><expr pos:start="557:87" pos:end="557:88"><name pos:start="557:87" pos:end="557:88">mx</name></expr></argument>,<argument pos:start="557:90" pos:end="557:91"><expr pos:start="557:90" pos:end="557:91"><name pos:start="557:90" pos:end="557:91">my</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="557:95" pos:end="557:95"><expr pos:start="557:95" pos:end="557:95"><literal type="number" pos:start="557:95" pos:end="557:95">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if>

        <if type="elseif" pos:start="565:9" pos:end="637:9">else if<condition pos:start="565:16" pos:end="565:33">(<expr pos:start="565:17" pos:end="565:32"><call pos:start="565:17" pos:end="565:32"><name pos:start="565:17" pos:end="565:23">IS_16X8</name><argument_list pos:start="565:24" pos:end="565:32">(<argument pos:start="565:25" pos:end="565:31"><expr pos:start="565:25" pos:end="565:31"><name pos:start="565:25" pos:end="565:31">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="565:34" pos:end="637:9">{<block_content pos:start="567:13" pos:end="635:13">

            <for pos:start="567:13" pos:end="605:13">for<control pos:start="567:16" pos:end="567:51">(<init pos:start="567:17" pos:end="567:23"><expr pos:start="567:17" pos:end="567:22"><name pos:start="567:17" pos:end="567:20">list</name><operator pos:start="567:21" pos:end="567:21">=</operator><literal type="number" pos:start="567:22" pos:end="567:22">0</literal></expr>;</init> <condition pos:start="567:25" pos:end="567:43"><expr pos:start="567:25" pos:end="567:42"><name pos:start="567:25" pos:end="567:28">list</name><operator pos:start="567:29" pos:end="567:29">&lt;</operator><name pos:start="567:30" pos:end="567:42"><name pos:start="567:30" pos:end="567:30">h</name><operator pos:start="567:31" pos:end="567:32">-&gt;</operator><name pos:start="567:33" pos:end="567:42">list_count</name></name></expr>;</condition> <incr pos:start="567:45" pos:end="567:50"><expr pos:start="567:45" pos:end="567:50"><name pos:start="567:45" pos:end="567:48">list</name><operator pos:start="567:49" pos:end="567:50">++</operator></expr></incr>)</control><block pos:start="567:52" pos:end="605:13">{<block_content pos:start="569:21" pos:end="603:21">

                    <for pos:start="569:21" pos:end="603:21">for<control pos:start="569:24" pos:end="569:38">(<init pos:start="569:25" pos:end="569:28"><expr pos:start="569:25" pos:end="569:27"><name pos:start="569:25" pos:end="569:25">i</name><operator pos:start="569:26" pos:end="569:26">=</operator><literal type="number" pos:start="569:27" pos:end="569:27">0</literal></expr>;</init> <condition pos:start="569:30" pos:end="569:33"><expr pos:start="569:30" pos:end="569:32"><name pos:start="569:30" pos:end="569:30">i</name><operator pos:start="569:31" pos:end="569:31">&lt;</operator><literal type="number" pos:start="569:32" pos:end="569:32">2</literal></expr>;</condition> <incr pos:start="569:35" pos:end="569:37"><expr pos:start="569:35" pos:end="569:37"><name pos:start="569:35" pos:end="569:35">i</name><operator pos:start="569:36" pos:end="569:37">++</operator></expr></incr>)</control><block pos:start="569:39" pos:end="603:21">{<block_content pos:start="571:25" pos:end="601:96">

                        <decl_stmt pos:start="571:25" pos:end="571:41"><decl pos:start="571:25" pos:end="571:40"><type pos:start="571:25" pos:end="571:36"><name pos:start="571:25" pos:end="571:32">unsigned</name> <name pos:start="571:34" pos:end="571:36">int</name></type> <name pos:start="571:38" pos:end="571:40">val</name></decl>;</decl_stmt>

                        <if_stmt pos:start="573:25" pos:end="599:52"><if pos:start="573:25" pos:end="597:25">if<condition pos:start="573:27" pos:end="573:52">(<expr pos:start="573:28" pos:end="573:51"><call pos:start="573:28" pos:end="573:51"><name pos:start="573:28" pos:end="573:33">IS_DIR</name><argument_list pos:start="573:34" pos:end="573:51">(<argument pos:start="573:35" pos:end="573:41"><expr pos:start="573:35" pos:end="573:41"><name pos:start="573:35" pos:end="573:41">mb_type</name></expr></argument>, <argument pos:start="573:44" pos:end="573:44"><expr pos:start="573:44" pos:end="573:44"><name pos:start="573:44" pos:end="573:44">i</name></expr></argument>, <argument pos:start="573:47" pos:end="573:50"><expr pos:start="573:47" pos:end="573:50"><name pos:start="573:47" pos:end="573:50">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="573:53" pos:end="597:25">{<block_content pos:start="575:29" pos:end="595:29">

                            <if_stmt pos:start="575:29" pos:end="595:29"><if pos:start="575:29" pos:end="579:29">if<condition pos:start="575:31" pos:end="575:55">(<expr pos:start="575:32" pos:end="575:54"><name pos:start="575:32" pos:end="575:49"><name pos:start="575:32" pos:end="575:32">h</name><operator pos:start="575:33" pos:end="575:34">-&gt;</operator><name pos:start="575:35" pos:end="575:43">ref_count</name><index pos:start="575:44" pos:end="575:49">[<expr pos:start="575:45" pos:end="575:48"><name pos:start="575:45" pos:end="575:48">list</name></expr>]</index></name> <operator pos:start="575:51" pos:end="575:52">==</operator> <literal type="number" pos:start="575:54" pos:end="575:54">1</literal></expr>)</condition><block pos:start="575:56" pos:end="579:29">{<block_content pos:start="577:33" pos:end="577:39">

                                <expr_stmt pos:start="577:33" pos:end="577:39"><expr pos:start="577:33" pos:end="577:38"><name pos:start="577:33" pos:end="577:35">val</name><operator pos:start="577:36" pos:end="577:36">=</operator> <literal type="number" pos:start="577:38" pos:end="577:38">0</literal></expr>;</expr_stmt>

                            </block_content>}</block></if><if type="elseif" pos:start="579:30" pos:end="583:29">else if<condition pos:start="579:37" pos:end="579:61">(<expr pos:start="579:38" pos:end="579:60"><name pos:start="579:38" pos:end="579:55"><name pos:start="579:38" pos:end="579:38">h</name><operator pos:start="579:39" pos:end="579:40">-&gt;</operator><name pos:start="579:41" pos:end="579:49">ref_count</name><index pos:start="579:50" pos:end="579:55">[<expr pos:start="579:51" pos:end="579:54"><name pos:start="579:51" pos:end="579:54">list</name></expr>]</index></name> <operator pos:start="579:57" pos:end="579:58">==</operator> <literal type="number" pos:start="579:60" pos:end="579:60">2</literal></expr>)</condition><block pos:start="579:62" pos:end="583:29">{<block_content pos:start="581:33" pos:end="581:57">

                                <expr_stmt pos:start="581:33" pos:end="581:57"><expr pos:start="581:33" pos:end="581:56"><name pos:start="581:33" pos:end="581:35">val</name><operator pos:start="581:36" pos:end="581:36">=</operator> <call pos:start="581:38" pos:end="581:54"><name pos:start="581:38" pos:end="581:46">get_bits1</name><argument_list pos:start="581:47" pos:end="581:54">(<argument pos:start="581:48" pos:end="581:53"><expr pos:start="581:48" pos:end="581:53"><operator pos:start="581:48" pos:end="581:48">&amp;</operator><name pos:start="581:49" pos:end="581:53"><name pos:start="581:49" pos:end="581:49">s</name><operator pos:start="581:50" pos:end="581:51">-&gt;</operator><name pos:start="581:52" pos:end="581:53">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="581:55" pos:end="581:55">^</operator><literal type="number" pos:start="581:56" pos:end="581:56">1</literal></expr>;</expr_stmt>

                            </block_content>}</block></if><else pos:start="583:30" pos:end="595:29">else<block pos:start="583:34" pos:end="595:29">{<block_content pos:start="585:33" pos:end="593:33">

                                <expr_stmt pos:start="585:33" pos:end="585:62"><expr pos:start="585:33" pos:end="585:61"><name pos:start="585:33" pos:end="585:35">val</name><operator pos:start="585:36" pos:end="585:36">=</operator> <call pos:start="585:38" pos:end="585:61"><name pos:start="585:38" pos:end="585:53">get_ue_golomb_31</name><argument_list pos:start="585:54" pos:end="585:61">(<argument pos:start="585:55" pos:end="585:60"><expr pos:start="585:55" pos:end="585:60"><operator pos:start="585:55" pos:end="585:55">&amp;</operator><name pos:start="585:56" pos:end="585:60"><name pos:start="585:56" pos:end="585:56">s</name><operator pos:start="585:57" pos:end="585:58">-&gt;</operator><name pos:start="585:59" pos:end="585:60">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <if_stmt pos:start="587:33" pos:end="593:33"><if pos:start="587:33" pos:end="593:33">if<condition pos:start="587:35" pos:end="587:61">(<expr pos:start="587:36" pos:end="587:60"><name pos:start="587:36" pos:end="587:38">val</name> <operator pos:start="587:40" pos:end="587:41">&gt;=</operator> <name pos:start="587:43" pos:end="587:60"><name pos:start="587:43" pos:end="587:43">h</name><operator pos:start="587:44" pos:end="587:45">-&gt;</operator><name pos:start="587:46" pos:end="587:54">ref_count</name><index pos:start="587:55" pos:end="587:60">[<expr pos:start="587:56" pos:end="587:59"><name pos:start="587:56" pos:end="587:59">list</name></expr>]</index></name></expr>)</condition><block pos:start="587:62" pos:end="593:33">{<block_content pos:start="589:37" pos:end="591:46">

                                    <expr_stmt pos:start="589:37" pos:end="589:95"><expr pos:start="589:37" pos:end="589:94"><call pos:start="589:37" pos:end="589:94"><name pos:start="589:37" pos:end="589:42">av_log</name><argument_list pos:start="589:43" pos:end="589:94">(<argument pos:start="589:44" pos:end="589:53"><expr pos:start="589:44" pos:end="589:53"><name pos:start="589:44" pos:end="589:53"><name pos:start="589:44" pos:end="589:44">h</name><operator pos:start="589:45" pos:end="589:46">-&gt;</operator><name pos:start="589:47" pos:end="589:47">s</name><operator pos:start="589:48" pos:end="589:48">.</operator><name pos:start="589:49" pos:end="589:53">avctx</name></name></expr></argument>, <argument pos:start="589:56" pos:end="589:67"><expr pos:start="589:56" pos:end="589:67"><name pos:start="589:56" pos:end="589:67">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="589:70" pos:end="589:88"><expr pos:start="589:70" pos:end="589:88"><literal type="string" pos:start="589:70" pos:end="589:88">"ref %u overflow\n"</literal></expr></argument>, <argument pos:start="589:91" pos:end="589:93"><expr pos:start="589:91" pos:end="589:93"><name pos:start="589:91" pos:end="589:93">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <return pos:start="591:37" pos:end="591:46">return <expr pos:start="591:44" pos:end="591:45"><operator pos:start="591:44" pos:end="591:44">-</operator><literal type="number" pos:start="591:45" pos:end="591:45">1</literal></expr>;</return>

                                </block_content>}</block></if></if_stmt>

                            </block_content>}</block></else></if_stmt>

                        </block_content>}</block></if><else pos:start="597:26" pos:end="599:52">else<block type="pseudo" pos:start="599:29" pos:end="599:52"><block_content pos:start="599:29" pos:end="599:52">

                            <expr_stmt pos:start="599:29" pos:end="599:52"><expr pos:start="599:29" pos:end="599:51"><name pos:start="599:29" pos:end="599:31">val</name><operator pos:start="599:32" pos:end="599:32">=</operator> <name pos:start="599:34" pos:end="599:46">LIST_NOT_USED</name><operator pos:start="599:47" pos:end="599:47">&amp;</operator><literal type="number" pos:start="599:48" pos:end="599:51">0xFF</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        <expr_stmt pos:start="601:25" pos:end="601:96"><expr pos:start="601:25" pos:end="601:95"><call pos:start="601:25" pos:end="601:95"><name pos:start="601:25" pos:end="601:38">fill_rectangle</name><argument_list pos:start="601:39" pos:end="601:95">(<argument pos:start="601:40" pos:end="601:77"><expr pos:start="601:40" pos:end="601:77"><operator pos:start="601:40" pos:end="601:40">&amp;</operator><name pos:start="601:41" pos:end="601:77"><name pos:start="601:41" pos:end="601:41">h</name><operator pos:start="601:42" pos:end="601:43">-&gt;</operator><name pos:start="601:44" pos:end="601:52">ref_cache</name><index pos:start="601:53" pos:end="601:58">[<expr pos:start="601:54" pos:end="601:57"><name pos:start="601:54" pos:end="601:57">list</name></expr>]</index><index pos:start="601:59" pos:end="601:77">[ <expr pos:start="601:61" pos:end="601:75"><name pos:start="601:61" pos:end="601:68"><name pos:start="601:61" pos:end="601:65">scan8</name><index pos:start="601:66" pos:end="601:68">[<expr pos:start="601:67" pos:end="601:67"><literal type="number" pos:start="601:67" pos:end="601:67">0</literal></expr>]</index></name> <operator pos:start="601:70" pos:end="601:70">+</operator> <literal type="number" pos:start="601:72" pos:end="601:73">16</literal><operator pos:start="601:74" pos:end="601:74">*</operator><name pos:start="601:75" pos:end="601:75">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="601:80" pos:end="601:80"><expr pos:start="601:80" pos:end="601:80"><literal type="number" pos:start="601:80" pos:end="601:80">4</literal></expr></argument>, <argument pos:start="601:83" pos:end="601:83"><expr pos:start="601:83" pos:end="601:83"><literal type="number" pos:start="601:83" pos:end="601:83">2</literal></expr></argument>, <argument pos:start="601:86" pos:end="601:86"><expr pos:start="601:86" pos:end="601:86"><literal type="number" pos:start="601:86" pos:end="601:86">8</literal></expr></argument>, <argument pos:start="601:89" pos:end="601:91"><expr pos:start="601:89" pos:end="601:91"><name pos:start="601:89" pos:end="601:91">val</name></expr></argument>, <argument pos:start="601:94" pos:end="601:94"><expr pos:start="601:94" pos:end="601:94"><literal type="number" pos:start="601:94" pos:end="601:94">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></for>

            </block_content>}</block></for>

            <for pos:start="607:13" pos:end="635:13">for<control pos:start="607:16" pos:end="607:51">(<init pos:start="607:17" pos:end="607:23"><expr pos:start="607:17" pos:end="607:22"><name pos:start="607:17" pos:end="607:20">list</name><operator pos:start="607:21" pos:end="607:21">=</operator><literal type="number" pos:start="607:22" pos:end="607:22">0</literal></expr>;</init> <condition pos:start="607:25" pos:end="607:43"><expr pos:start="607:25" pos:end="607:42"><name pos:start="607:25" pos:end="607:28">list</name><operator pos:start="607:29" pos:end="607:29">&lt;</operator><name pos:start="607:30" pos:end="607:42"><name pos:start="607:30" pos:end="607:30">h</name><operator pos:start="607:31" pos:end="607:32">-&gt;</operator><name pos:start="607:33" pos:end="607:42">list_count</name></name></expr>;</condition> <incr pos:start="607:45" pos:end="607:50"><expr pos:start="607:45" pos:end="607:50"><name pos:start="607:45" pos:end="607:48">list</name><operator pos:start="607:49" pos:end="607:50">++</operator></expr></incr>)</control><block pos:start="607:52" pos:end="635:13">{<block_content pos:start="609:17" pos:end="633:17">

                <for pos:start="609:17" pos:end="633:17">for<control pos:start="609:20" pos:end="609:34">(<init pos:start="609:21" pos:end="609:24"><expr pos:start="609:21" pos:end="609:23"><name pos:start="609:21" pos:end="609:21">i</name><operator pos:start="609:22" pos:end="609:22">=</operator><literal type="number" pos:start="609:23" pos:end="609:23">0</literal></expr>;</init> <condition pos:start="609:26" pos:end="609:29"><expr pos:start="609:26" pos:end="609:28"><name pos:start="609:26" pos:end="609:26">i</name><operator pos:start="609:27" pos:end="609:27">&lt;</operator><literal type="number" pos:start="609:28" pos:end="609:28">2</literal></expr>;</condition> <incr pos:start="609:31" pos:end="609:33"><expr pos:start="609:31" pos:end="609:33"><name pos:start="609:31" pos:end="609:31">i</name><operator pos:start="609:32" pos:end="609:33">++</operator></expr></incr>)</control><block pos:start="609:35" pos:end="633:17">{<block_content pos:start="611:21" pos:end="631:90">

                    <decl_stmt pos:start="611:21" pos:end="611:37"><decl pos:start="611:21" pos:end="611:36"><type pos:start="611:21" pos:end="611:32"><name pos:start="611:21" pos:end="611:28">unsigned</name> <name pos:start="611:30" pos:end="611:32">int</name></type> <name pos:start="611:34" pos:end="611:36">val</name></decl>;</decl_stmt>

                    <if_stmt pos:start="613:21" pos:end="629:30"><if pos:start="613:21" pos:end="627:21">if<condition pos:start="613:23" pos:end="613:48">(<expr pos:start="613:24" pos:end="613:47"><call pos:start="613:24" pos:end="613:47"><name pos:start="613:24" pos:end="613:29">IS_DIR</name><argument_list pos:start="613:30" pos:end="613:47">(<argument pos:start="613:31" pos:end="613:37"><expr pos:start="613:31" pos:end="613:37"><name pos:start="613:31" pos:end="613:37">mb_type</name></expr></argument>, <argument pos:start="613:40" pos:end="613:40"><expr pos:start="613:40" pos:end="613:40"><name pos:start="613:40" pos:end="613:40">i</name></expr></argument>, <argument pos:start="613:43" pos:end="613:46"><expr pos:start="613:43" pos:end="613:46"><name pos:start="613:43" pos:end="613:46">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="613:49" pos:end="627:21">{<block_content pos:start="615:25" pos:end="625:47">

                        <expr_stmt pos:start="615:25" pos:end="615:102"><expr pos:start="615:25" pos:end="615:101"><call pos:start="615:25" pos:end="615:101"><name pos:start="615:25" pos:end="615:40">pred_16x8_motion</name><argument_list pos:start="615:41" pos:end="615:101">(<argument pos:start="615:42" pos:end="615:42"><expr pos:start="615:42" pos:end="615:42"><name pos:start="615:42" pos:end="615:42">h</name></expr></argument>, <argument pos:start="615:45" pos:end="615:47"><expr pos:start="615:45" pos:end="615:47"><literal type="number" pos:start="615:45" pos:end="615:45">8</literal><operator pos:start="615:46" pos:end="615:46">*</operator><name pos:start="615:47" pos:end="615:47">i</name></expr></argument>, <argument pos:start="615:50" pos:end="615:53"><expr pos:start="615:50" pos:end="615:53"><name pos:start="615:50" pos:end="615:53">list</name></expr></argument>, <argument pos:start="615:56" pos:end="615:90"><expr pos:start="615:56" pos:end="615:90"><name pos:start="615:56" pos:end="615:90"><name pos:start="615:56" pos:end="615:56">h</name><operator pos:start="615:57" pos:end="615:58">-&gt;</operator><name pos:start="615:59" pos:end="615:67">ref_cache</name><index pos:start="615:68" pos:end="615:73">[<expr pos:start="615:69" pos:end="615:72"><name pos:start="615:69" pos:end="615:72">list</name></expr>]</index><index pos:start="615:74" pos:end="615:90">[<expr pos:start="615:75" pos:end="615:89"><name pos:start="615:75" pos:end="615:82"><name pos:start="615:75" pos:end="615:79">scan8</name><index pos:start="615:80" pos:end="615:82">[<expr pos:start="615:81" pos:end="615:81"><literal type="number" pos:start="615:81" pos:end="615:81">0</literal></expr>]</index></name> <operator pos:start="615:84" pos:end="615:84">+</operator> <literal type="number" pos:start="615:86" pos:end="615:87">16</literal><operator pos:start="615:88" pos:end="615:88">*</operator><name pos:start="615:89" pos:end="615:89">i</name></expr>]</index></name></expr></argument>, <argument pos:start="615:93" pos:end="615:95"><expr pos:start="615:93" pos:end="615:95"><operator pos:start="615:93" pos:end="615:93">&amp;</operator><name pos:start="615:94" pos:end="615:95">mx</name></expr></argument>, <argument pos:start="615:98" pos:end="615:100"><expr pos:start="615:98" pos:end="615:100"><operator pos:start="615:98" pos:end="615:98">&amp;</operator><name pos:start="615:99" pos:end="615:100">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="617:25" pos:end="617:52"><expr pos:start="617:25" pos:end="617:51"><name pos:start="617:25" pos:end="617:26">mx</name> <operator pos:start="617:28" pos:end="617:29">+=</operator> <call pos:start="617:31" pos:end="617:51"><name pos:start="617:31" pos:end="617:43">get_se_golomb</name><argument_list pos:start="617:44" pos:end="617:51">(<argument pos:start="617:45" pos:end="617:50"><expr pos:start="617:45" pos:end="617:50"><operator pos:start="617:45" pos:end="617:45">&amp;</operator><name pos:start="617:46" pos:end="617:50"><name pos:start="617:46" pos:end="617:46">s</name><operator pos:start="617:47" pos:end="617:48">-&gt;</operator><name pos:start="617:49" pos:end="617:50">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="619:25" pos:end="619:52"><expr pos:start="619:25" pos:end="619:51"><name pos:start="619:25" pos:end="619:26">my</name> <operator pos:start="619:28" pos:end="619:29">+=</operator> <call pos:start="619:31" pos:end="619:51"><name pos:start="619:31" pos:end="619:43">get_se_golomb</name><argument_list pos:start="619:44" pos:end="619:51">(<argument pos:start="619:45" pos:end="619:50"><expr pos:start="619:45" pos:end="619:50"><operator pos:start="619:45" pos:end="619:45">&amp;</operator><name pos:start="619:46" pos:end="619:50"><name pos:start="619:46" pos:end="619:46">s</name><operator pos:start="619:47" pos:end="619:48">-&gt;</operator><name pos:start="619:49" pos:end="619:50">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="621:25" pos:end="621:70"><expr pos:start="621:25" pos:end="621:69"><call pos:start="621:25" pos:end="621:69"><name pos:start="621:25" pos:end="621:31">tprintf</name><argument_list pos:start="621:32" pos:end="621:69">(<argument pos:start="621:33" pos:end="621:40"><expr pos:start="621:33" pos:end="621:40"><name pos:start="621:33" pos:end="621:40"><name pos:start="621:33" pos:end="621:33">s</name><operator pos:start="621:34" pos:end="621:35">-&gt;</operator><name pos:start="621:36" pos:end="621:40">avctx</name></name></expr></argument>, <argument pos:start="621:43" pos:end="621:60"><expr pos:start="621:43" pos:end="621:60"><literal type="string" pos:start="621:43" pos:end="621:60">"final mv:%d %d\n"</literal></expr></argument>, <argument pos:start="621:63" pos:end="621:64"><expr pos:start="621:63" pos:end="621:64"><name pos:start="621:63" pos:end="621:64">mx</name></expr></argument>, <argument pos:start="621:67" pos:end="621:68"><expr pos:start="621:67" pos:end="621:68"><name pos:start="621:67" pos:end="621:68">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <expr_stmt pos:start="625:25" pos:end="625:47"><expr pos:start="625:25" pos:end="625:46"><name pos:start="625:25" pos:end="625:27">val</name><operator pos:start="625:28" pos:end="625:28">=</operator> <call pos:start="625:30" pos:end="625:46"><name pos:start="625:30" pos:end="625:39">pack16to32</name><argument_list pos:start="625:40" pos:end="625:46">(<argument pos:start="625:41" pos:end="625:42"><expr pos:start="625:41" pos:end="625:42"><name pos:start="625:41" pos:end="625:42">mx</name></expr></argument>,<argument pos:start="625:44" pos:end="625:45"><expr pos:start="625:44" pos:end="625:45"><name pos:start="625:44" pos:end="625:45">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if><else pos:start="627:22" pos:end="629:30">else<block type="pseudo" pos:start="629:25" pos:end="629:30"><block_content pos:start="629:25" pos:end="629:30">

                        <expr_stmt pos:start="629:25" pos:end="629:30"><expr pos:start="629:25" pos:end="629:29"><name pos:start="629:25" pos:end="629:27">val</name><operator pos:start="629:28" pos:end="629:28">=</operator><literal type="number" pos:start="629:29" pos:end="629:29">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <expr_stmt pos:start="631:21" pos:end="631:90"><expr pos:start="631:21" pos:end="631:89"><call pos:start="631:21" pos:end="631:89"><name pos:start="631:21" pos:end="631:34">fill_rectangle</name><argument_list pos:start="631:35" pos:end="631:89">(<argument pos:start="631:36" pos:end="631:71"><expr pos:start="631:36" pos:end="631:71"><name pos:start="631:36" pos:end="631:71"><name pos:start="631:36" pos:end="631:36">h</name><operator pos:start="631:37" pos:end="631:38">-&gt;</operator><name pos:start="631:39" pos:end="631:46">mv_cache</name><index pos:start="631:47" pos:end="631:52">[<expr pos:start="631:48" pos:end="631:51"><name pos:start="631:48" pos:end="631:51">list</name></expr>]</index><index pos:start="631:53" pos:end="631:71">[ <expr pos:start="631:55" pos:end="631:69"><name pos:start="631:55" pos:end="631:62"><name pos:start="631:55" pos:end="631:59">scan8</name><index pos:start="631:60" pos:end="631:62">[<expr pos:start="631:61" pos:end="631:61"><literal type="number" pos:start="631:61" pos:end="631:61">0</literal></expr>]</index></name> <operator pos:start="631:64" pos:end="631:64">+</operator> <literal type="number" pos:start="631:66" pos:end="631:67">16</literal><operator pos:start="631:68" pos:end="631:68">*</operator><name pos:start="631:69" pos:end="631:69">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="631:74" pos:end="631:74"><expr pos:start="631:74" pos:end="631:74"><literal type="number" pos:start="631:74" pos:end="631:74">4</literal></expr></argument>, <argument pos:start="631:77" pos:end="631:77"><expr pos:start="631:77" pos:end="631:77"><literal type="number" pos:start="631:77" pos:end="631:77">2</literal></expr></argument>, <argument pos:start="631:80" pos:end="631:80"><expr pos:start="631:80" pos:end="631:80"><literal type="number" pos:start="631:80" pos:end="631:80">8</literal></expr></argument>, <argument pos:start="631:83" pos:end="631:85"><expr pos:start="631:83" pos:end="631:85"><name pos:start="631:83" pos:end="631:85">val</name></expr></argument>, <argument pos:start="631:88" pos:end="631:88"><expr pos:start="631:88" pos:end="631:88"><literal type="number" pos:start="631:88" pos:end="631:88">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></for>

        </block_content>}</block></if><else pos:start="637:10" pos:end="711:9">else<block pos:start="637:14" pos:end="711:9">{<block_content pos:start="639:13" pos:end="709:13">

            <expr_stmt pos:start="639:13" pos:end="639:37"><expr pos:start="639:13" pos:end="639:36"><call pos:start="639:13" pos:end="639:36"><name pos:start="639:13" pos:end="639:18">assert</name><argument_list pos:start="639:19" pos:end="639:36">(<argument pos:start="639:20" pos:end="639:35"><expr pos:start="639:20" pos:end="639:35"><call pos:start="639:20" pos:end="639:35"><name pos:start="639:20" pos:end="639:26">IS_8X16</name><argument_list pos:start="639:27" pos:end="639:35">(<argument pos:start="639:28" pos:end="639:34"><expr pos:start="639:28" pos:end="639:34"><name pos:start="639:28" pos:end="639:34">mb_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="641:13" pos:end="679:13">for<control pos:start="641:16" pos:end="641:51">(<init pos:start="641:17" pos:end="641:23"><expr pos:start="641:17" pos:end="641:22"><name pos:start="641:17" pos:end="641:20">list</name><operator pos:start="641:21" pos:end="641:21">=</operator><literal type="number" pos:start="641:22" pos:end="641:22">0</literal></expr>;</init> <condition pos:start="641:25" pos:end="641:43"><expr pos:start="641:25" pos:end="641:42"><name pos:start="641:25" pos:end="641:28">list</name><operator pos:start="641:29" pos:end="641:29">&lt;</operator><name pos:start="641:30" pos:end="641:42"><name pos:start="641:30" pos:end="641:30">h</name><operator pos:start="641:31" pos:end="641:32">-&gt;</operator><name pos:start="641:33" pos:end="641:42">list_count</name></name></expr>;</condition> <incr pos:start="641:45" pos:end="641:50"><expr pos:start="641:45" pos:end="641:50"><name pos:start="641:45" pos:end="641:48">list</name><operator pos:start="641:49" pos:end="641:50">++</operator></expr></incr>)</control><block pos:start="641:52" pos:end="679:13">{<block_content pos:start="643:21" pos:end="677:21">

                    <for pos:start="643:21" pos:end="677:21">for<control pos:start="643:24" pos:end="643:38">(<init pos:start="643:25" pos:end="643:28"><expr pos:start="643:25" pos:end="643:27"><name pos:start="643:25" pos:end="643:25">i</name><operator pos:start="643:26" pos:end="643:26">=</operator><literal type="number" pos:start="643:27" pos:end="643:27">0</literal></expr>;</init> <condition pos:start="643:30" pos:end="643:33"><expr pos:start="643:30" pos:end="643:32"><name pos:start="643:30" pos:end="643:30">i</name><operator pos:start="643:31" pos:end="643:31">&lt;</operator><literal type="number" pos:start="643:32" pos:end="643:32">2</literal></expr>;</condition> <incr pos:start="643:35" pos:end="643:37"><expr pos:start="643:35" pos:end="643:37"><name pos:start="643:35" pos:end="643:35">i</name><operator pos:start="643:36" pos:end="643:37">++</operator></expr></incr>)</control><block pos:start="643:39" pos:end="677:21">{<block_content pos:start="645:25" pos:end="675:95">

                        <decl_stmt pos:start="645:25" pos:end="645:41"><decl pos:start="645:25" pos:end="645:40"><type pos:start="645:25" pos:end="645:36"><name pos:start="645:25" pos:end="645:32">unsigned</name> <name pos:start="645:34" pos:end="645:36">int</name></type> <name pos:start="645:38" pos:end="645:40">val</name></decl>;</decl_stmt>

                        <if_stmt pos:start="647:25" pos:end="673:52"><if pos:start="647:25" pos:end="671:25">if<condition pos:start="647:27" pos:end="647:52">(<expr pos:start="647:28" pos:end="647:51"><call pos:start="647:28" pos:end="647:51"><name pos:start="647:28" pos:end="647:33">IS_DIR</name><argument_list pos:start="647:34" pos:end="647:51">(<argument pos:start="647:35" pos:end="647:41"><expr pos:start="647:35" pos:end="647:41"><name pos:start="647:35" pos:end="647:41">mb_type</name></expr></argument>, <argument pos:start="647:44" pos:end="647:44"><expr pos:start="647:44" pos:end="647:44"><name pos:start="647:44" pos:end="647:44">i</name></expr></argument>, <argument pos:start="647:47" pos:end="647:50"><expr pos:start="647:47" pos:end="647:50"><name pos:start="647:47" pos:end="647:50">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="647:53" pos:end="671:25">{<block_content pos:start="649:29" pos:end="669:29"> <comment type="line" pos:start="647:55" pos:end="647:70">//FIXME optimize</comment>

                            <if_stmt pos:start="649:29" pos:end="669:29"><if pos:start="649:29" pos:end="653:29">if<condition pos:start="649:31" pos:end="649:53">(<expr pos:start="649:32" pos:end="649:52"><name pos:start="649:32" pos:end="649:49"><name pos:start="649:32" pos:end="649:32">h</name><operator pos:start="649:33" pos:end="649:34">-&gt;</operator><name pos:start="649:35" pos:end="649:43">ref_count</name><index pos:start="649:44" pos:end="649:49">[<expr pos:start="649:45" pos:end="649:48"><name pos:start="649:45" pos:end="649:48">list</name></expr>]</index></name><operator pos:start="649:50" pos:end="649:51">==</operator><literal type="number" pos:start="649:52" pos:end="649:52">1</literal></expr>)</condition><block pos:start="649:54" pos:end="653:29">{<block_content pos:start="651:33" pos:end="651:39">

                                <expr_stmt pos:start="651:33" pos:end="651:39"><expr pos:start="651:33" pos:end="651:38"><name pos:start="651:33" pos:end="651:35">val</name><operator pos:start="651:36" pos:end="651:36">=</operator> <literal type="number" pos:start="651:38" pos:end="651:38">0</literal></expr>;</expr_stmt>

                            </block_content>}</block></if><if type="elseif" pos:start="653:30" pos:end="657:29">else if<condition pos:start="653:37" pos:end="653:59">(<expr pos:start="653:38" pos:end="653:58"><name pos:start="653:38" pos:end="653:55"><name pos:start="653:38" pos:end="653:38">h</name><operator pos:start="653:39" pos:end="653:40">-&gt;</operator><name pos:start="653:41" pos:end="653:49">ref_count</name><index pos:start="653:50" pos:end="653:55">[<expr pos:start="653:51" pos:end="653:54"><name pos:start="653:51" pos:end="653:54">list</name></expr>]</index></name><operator pos:start="653:56" pos:end="653:57">==</operator><literal type="number" pos:start="653:58" pos:end="653:58">2</literal></expr>)</condition><block pos:start="653:60" pos:end="657:29">{<block_content pos:start="655:33" pos:end="655:57">

                                <expr_stmt pos:start="655:33" pos:end="655:57"><expr pos:start="655:33" pos:end="655:56"><name pos:start="655:33" pos:end="655:35">val</name><operator pos:start="655:36" pos:end="655:36">=</operator> <call pos:start="655:38" pos:end="655:54"><name pos:start="655:38" pos:end="655:46">get_bits1</name><argument_list pos:start="655:47" pos:end="655:54">(<argument pos:start="655:48" pos:end="655:53"><expr pos:start="655:48" pos:end="655:53"><operator pos:start="655:48" pos:end="655:48">&amp;</operator><name pos:start="655:49" pos:end="655:53"><name pos:start="655:49" pos:end="655:49">s</name><operator pos:start="655:50" pos:end="655:51">-&gt;</operator><name pos:start="655:52" pos:end="655:53">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="655:55" pos:end="655:55">^</operator><literal type="number" pos:start="655:56" pos:end="655:56">1</literal></expr>;</expr_stmt>

                            </block_content>}</block></if><else pos:start="657:30" pos:end="669:29">else<block pos:start="657:34" pos:end="669:29">{<block_content pos:start="659:33" pos:end="667:33">

                                <expr_stmt pos:start="659:33" pos:end="659:62"><expr pos:start="659:33" pos:end="659:61"><name pos:start="659:33" pos:end="659:35">val</name><operator pos:start="659:36" pos:end="659:36">=</operator> <call pos:start="659:38" pos:end="659:61"><name pos:start="659:38" pos:end="659:53">get_ue_golomb_31</name><argument_list pos:start="659:54" pos:end="659:61">(<argument pos:start="659:55" pos:end="659:60"><expr pos:start="659:55" pos:end="659:60"><operator pos:start="659:55" pos:end="659:55">&amp;</operator><name pos:start="659:56" pos:end="659:60"><name pos:start="659:56" pos:end="659:56">s</name><operator pos:start="659:57" pos:end="659:58">-&gt;</operator><name pos:start="659:59" pos:end="659:60">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <if_stmt pos:start="661:33" pos:end="667:33"><if pos:start="661:33" pos:end="667:33">if<condition pos:start="661:35" pos:end="661:61">(<expr pos:start="661:36" pos:end="661:60"><name pos:start="661:36" pos:end="661:38">val</name> <operator pos:start="661:40" pos:end="661:41">&gt;=</operator> <name pos:start="661:43" pos:end="661:60"><name pos:start="661:43" pos:end="661:43">h</name><operator pos:start="661:44" pos:end="661:45">-&gt;</operator><name pos:start="661:46" pos:end="661:54">ref_count</name><index pos:start="661:55" pos:end="661:60">[<expr pos:start="661:56" pos:end="661:59"><name pos:start="661:56" pos:end="661:59">list</name></expr>]</index></name></expr>)</condition><block pos:start="661:62" pos:end="667:33">{<block_content pos:start="663:37" pos:end="665:46">

                                    <expr_stmt pos:start="663:37" pos:end="663:95"><expr pos:start="663:37" pos:end="663:94"><call pos:start="663:37" pos:end="663:94"><name pos:start="663:37" pos:end="663:42">av_log</name><argument_list pos:start="663:43" pos:end="663:94">(<argument pos:start="663:44" pos:end="663:53"><expr pos:start="663:44" pos:end="663:53"><name pos:start="663:44" pos:end="663:53"><name pos:start="663:44" pos:end="663:44">h</name><operator pos:start="663:45" pos:end="663:46">-&gt;</operator><name pos:start="663:47" pos:end="663:47">s</name><operator pos:start="663:48" pos:end="663:48">.</operator><name pos:start="663:49" pos:end="663:53">avctx</name></name></expr></argument>, <argument pos:start="663:56" pos:end="663:67"><expr pos:start="663:56" pos:end="663:67"><name pos:start="663:56" pos:end="663:67">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="663:70" pos:end="663:88"><expr pos:start="663:70" pos:end="663:88"><literal type="string" pos:start="663:70" pos:end="663:88">"ref %u overflow\n"</literal></expr></argument>, <argument pos:start="663:91" pos:end="663:93"><expr pos:start="663:91" pos:end="663:93"><name pos:start="663:91" pos:end="663:93">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <return pos:start="665:37" pos:end="665:46">return <expr pos:start="665:44" pos:end="665:45"><operator pos:start="665:44" pos:end="665:44">-</operator><literal type="number" pos:start="665:45" pos:end="665:45">1</literal></expr>;</return>

                                </block_content>}</block></if></if_stmt>

                            </block_content>}</block></else></if_stmt>

                        </block_content>}</block></if><else pos:start="671:26" pos:end="673:52">else<block type="pseudo" pos:start="673:29" pos:end="673:52"><block_content pos:start="673:29" pos:end="673:52">

                            <expr_stmt pos:start="673:29" pos:end="673:52"><expr pos:start="673:29" pos:end="673:51"><name pos:start="673:29" pos:end="673:31">val</name><operator pos:start="673:32" pos:end="673:32">=</operator> <name pos:start="673:34" pos:end="673:46">LIST_NOT_USED</name><operator pos:start="673:47" pos:end="673:47">&amp;</operator><literal type="number" pos:start="673:48" pos:end="673:51">0xFF</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        <expr_stmt pos:start="675:25" pos:end="675:95"><expr pos:start="675:25" pos:end="675:94"><call pos:start="675:25" pos:end="675:94"><name pos:start="675:25" pos:end="675:38">fill_rectangle</name><argument_list pos:start="675:39" pos:end="675:94">(<argument pos:start="675:40" pos:end="675:76"><expr pos:start="675:40" pos:end="675:76"><operator pos:start="675:40" pos:end="675:40">&amp;</operator><name pos:start="675:41" pos:end="675:76"><name pos:start="675:41" pos:end="675:41">h</name><operator pos:start="675:42" pos:end="675:43">-&gt;</operator><name pos:start="675:44" pos:end="675:52">ref_cache</name><index pos:start="675:53" pos:end="675:58">[<expr pos:start="675:54" pos:end="675:57"><name pos:start="675:54" pos:end="675:57">list</name></expr>]</index><index pos:start="675:59" pos:end="675:76">[ <expr pos:start="675:61" pos:end="675:74"><name pos:start="675:61" pos:end="675:68"><name pos:start="675:61" pos:end="675:65">scan8</name><index pos:start="675:66" pos:end="675:68">[<expr pos:start="675:67" pos:end="675:67"><literal type="number" pos:start="675:67" pos:end="675:67">0</literal></expr>]</index></name> <operator pos:start="675:70" pos:end="675:70">+</operator> <literal type="number" pos:start="675:72" pos:end="675:72">2</literal><operator pos:start="675:73" pos:end="675:73">*</operator><name pos:start="675:74" pos:end="675:74">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="675:79" pos:end="675:79"><expr pos:start="675:79" pos:end="675:79"><literal type="number" pos:start="675:79" pos:end="675:79">2</literal></expr></argument>, <argument pos:start="675:82" pos:end="675:82"><expr pos:start="675:82" pos:end="675:82"><literal type="number" pos:start="675:82" pos:end="675:82">4</literal></expr></argument>, <argument pos:start="675:85" pos:end="675:85"><expr pos:start="675:85" pos:end="675:85"><literal type="number" pos:start="675:85" pos:end="675:85">8</literal></expr></argument>, <argument pos:start="675:88" pos:end="675:90"><expr pos:start="675:88" pos:end="675:90"><name pos:start="675:88" pos:end="675:90">val</name></expr></argument>, <argument pos:start="675:93" pos:end="675:93"><expr pos:start="675:93" pos:end="675:93"><literal type="number" pos:start="675:93" pos:end="675:93">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></for>

            </block_content>}</block></for>

            <for pos:start="681:13" pos:end="709:13">for<control pos:start="681:16" pos:end="681:51">(<init pos:start="681:17" pos:end="681:23"><expr pos:start="681:17" pos:end="681:22"><name pos:start="681:17" pos:end="681:20">list</name><operator pos:start="681:21" pos:end="681:21">=</operator><literal type="number" pos:start="681:22" pos:end="681:22">0</literal></expr>;</init> <condition pos:start="681:25" pos:end="681:43"><expr pos:start="681:25" pos:end="681:42"><name pos:start="681:25" pos:end="681:28">list</name><operator pos:start="681:29" pos:end="681:29">&lt;</operator><name pos:start="681:30" pos:end="681:42"><name pos:start="681:30" pos:end="681:30">h</name><operator pos:start="681:31" pos:end="681:32">-&gt;</operator><name pos:start="681:33" pos:end="681:42">list_count</name></name></expr>;</condition> <incr pos:start="681:45" pos:end="681:50"><expr pos:start="681:45" pos:end="681:50"><name pos:start="681:45" pos:end="681:48">list</name><operator pos:start="681:49" pos:end="681:50">++</operator></expr></incr>)</control><block pos:start="681:52" pos:end="709:13">{<block_content pos:start="683:17" pos:end="707:17">

                <for pos:start="683:17" pos:end="707:17">for<control pos:start="683:20" pos:end="683:34">(<init pos:start="683:21" pos:end="683:24"><expr pos:start="683:21" pos:end="683:23"><name pos:start="683:21" pos:end="683:21">i</name><operator pos:start="683:22" pos:end="683:22">=</operator><literal type="number" pos:start="683:23" pos:end="683:23">0</literal></expr>;</init> <condition pos:start="683:26" pos:end="683:29"><expr pos:start="683:26" pos:end="683:28"><name pos:start="683:26" pos:end="683:26">i</name><operator pos:start="683:27" pos:end="683:27">&lt;</operator><literal type="number" pos:start="683:28" pos:end="683:28">2</literal></expr>;</condition> <incr pos:start="683:31" pos:end="683:33"><expr pos:start="683:31" pos:end="683:33"><name pos:start="683:31" pos:end="683:31">i</name><operator pos:start="683:32" pos:end="683:33">++</operator></expr></incr>)</control><block pos:start="683:35" pos:end="707:17">{<block_content pos:start="685:21" pos:end="705:89">

                    <decl_stmt pos:start="685:21" pos:end="685:37"><decl pos:start="685:21" pos:end="685:36"><type pos:start="685:21" pos:end="685:32"><name pos:start="685:21" pos:end="685:28">unsigned</name> <name pos:start="685:30" pos:end="685:32">int</name></type> <name pos:start="685:34" pos:end="685:36">val</name></decl>;</decl_stmt>

                    <if_stmt pos:start="687:21" pos:end="703:30"><if pos:start="687:21" pos:end="701:21">if<condition pos:start="687:23" pos:end="687:48">(<expr pos:start="687:24" pos:end="687:47"><call pos:start="687:24" pos:end="687:47"><name pos:start="687:24" pos:end="687:29">IS_DIR</name><argument_list pos:start="687:30" pos:end="687:47">(<argument pos:start="687:31" pos:end="687:37"><expr pos:start="687:31" pos:end="687:37"><name pos:start="687:31" pos:end="687:37">mb_type</name></expr></argument>, <argument pos:start="687:40" pos:end="687:40"><expr pos:start="687:40" pos:end="687:40"><name pos:start="687:40" pos:end="687:40">i</name></expr></argument>, <argument pos:start="687:43" pos:end="687:46"><expr pos:start="687:43" pos:end="687:46"><name pos:start="687:43" pos:end="687:46">list</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="687:49" pos:end="701:21">{<block_content pos:start="689:25" pos:end="699:47">

                        <expr_stmt pos:start="689:25" pos:end="689:103"><expr pos:start="689:25" pos:end="689:102"><call pos:start="689:25" pos:end="689:102"><name pos:start="689:25" pos:end="689:40">pred_8x16_motion</name><argument_list pos:start="689:41" pos:end="689:102">(<argument pos:start="689:42" pos:end="689:42"><expr pos:start="689:42" pos:end="689:42"><name pos:start="689:42" pos:end="689:42">h</name></expr></argument>, <argument pos:start="689:45" pos:end="689:47"><expr pos:start="689:45" pos:end="689:47"><name pos:start="689:45" pos:end="689:45">i</name><operator pos:start="689:46" pos:end="689:46">*</operator><literal type="number" pos:start="689:47" pos:end="689:47">4</literal></expr></argument>, <argument pos:start="689:50" pos:end="689:53"><expr pos:start="689:50" pos:end="689:53"><name pos:start="689:50" pos:end="689:53">list</name></expr></argument>, <argument pos:start="689:56" pos:end="689:91"><expr pos:start="689:56" pos:end="689:91"><name pos:start="689:56" pos:end="689:91"><name pos:start="689:56" pos:end="689:56">h</name><operator pos:start="689:57" pos:end="689:58">-&gt;</operator><name pos:start="689:59" pos:end="689:67">ref_cache</name><index pos:start="689:68" pos:end="689:73">[<expr pos:start="689:69" pos:end="689:72"><name pos:start="689:69" pos:end="689:72">list</name></expr>]</index><index pos:start="689:74" pos:end="689:91">[ <expr pos:start="689:76" pos:end="689:89"><name pos:start="689:76" pos:end="689:83"><name pos:start="689:76" pos:end="689:80">scan8</name><index pos:start="689:81" pos:end="689:83">[<expr pos:start="689:82" pos:end="689:82"><literal type="number" pos:start="689:82" pos:end="689:82">0</literal></expr>]</index></name> <operator pos:start="689:85" pos:end="689:85">+</operator> <literal type="number" pos:start="689:87" pos:end="689:87">2</literal><operator pos:start="689:88" pos:end="689:88">*</operator><name pos:start="689:89" pos:end="689:89">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="689:94" pos:end="689:96"><expr pos:start="689:94" pos:end="689:96"><operator pos:start="689:94" pos:end="689:94">&amp;</operator><name pos:start="689:95" pos:end="689:96">mx</name></expr></argument>, <argument pos:start="689:99" pos:end="689:101"><expr pos:start="689:99" pos:end="689:101"><operator pos:start="689:99" pos:end="689:99">&amp;</operator><name pos:start="689:100" pos:end="689:101">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="691:25" pos:end="691:52"><expr pos:start="691:25" pos:end="691:51"><name pos:start="691:25" pos:end="691:26">mx</name> <operator pos:start="691:28" pos:end="691:29">+=</operator> <call pos:start="691:31" pos:end="691:51"><name pos:start="691:31" pos:end="691:43">get_se_golomb</name><argument_list pos:start="691:44" pos:end="691:51">(<argument pos:start="691:45" pos:end="691:50"><expr pos:start="691:45" pos:end="691:50"><operator pos:start="691:45" pos:end="691:45">&amp;</operator><name pos:start="691:46" pos:end="691:50"><name pos:start="691:46" pos:end="691:46">s</name><operator pos:start="691:47" pos:end="691:48">-&gt;</operator><name pos:start="691:49" pos:end="691:50">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="693:25" pos:end="693:52"><expr pos:start="693:25" pos:end="693:51"><name pos:start="693:25" pos:end="693:26">my</name> <operator pos:start="693:28" pos:end="693:29">+=</operator> <call pos:start="693:31" pos:end="693:51"><name pos:start="693:31" pos:end="693:43">get_se_golomb</name><argument_list pos:start="693:44" pos:end="693:51">(<argument pos:start="693:45" pos:end="693:50"><expr pos:start="693:45" pos:end="693:50"><operator pos:start="693:45" pos:end="693:45">&amp;</operator><name pos:start="693:46" pos:end="693:50"><name pos:start="693:46" pos:end="693:46">s</name><operator pos:start="693:47" pos:end="693:48">-&gt;</operator><name pos:start="693:49" pos:end="693:50">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="695:25" pos:end="695:70"><expr pos:start="695:25" pos:end="695:69"><call pos:start="695:25" pos:end="695:69"><name pos:start="695:25" pos:end="695:31">tprintf</name><argument_list pos:start="695:32" pos:end="695:69">(<argument pos:start="695:33" pos:end="695:40"><expr pos:start="695:33" pos:end="695:40"><name pos:start="695:33" pos:end="695:40"><name pos:start="695:33" pos:end="695:33">s</name><operator pos:start="695:34" pos:end="695:35">-&gt;</operator><name pos:start="695:36" pos:end="695:40">avctx</name></name></expr></argument>, <argument pos:start="695:43" pos:end="695:60"><expr pos:start="695:43" pos:end="695:60"><literal type="string" pos:start="695:43" pos:end="695:60">"final mv:%d %d\n"</literal></expr></argument>, <argument pos:start="695:63" pos:end="695:64"><expr pos:start="695:63" pos:end="695:64"><name pos:start="695:63" pos:end="695:64">mx</name></expr></argument>, <argument pos:start="695:67" pos:end="695:68"><expr pos:start="695:67" pos:end="695:68"><name pos:start="695:67" pos:end="695:68">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <expr_stmt pos:start="699:25" pos:end="699:47"><expr pos:start="699:25" pos:end="699:46"><name pos:start="699:25" pos:end="699:27">val</name><operator pos:start="699:28" pos:end="699:28">=</operator> <call pos:start="699:30" pos:end="699:46"><name pos:start="699:30" pos:end="699:39">pack16to32</name><argument_list pos:start="699:40" pos:end="699:46">(<argument pos:start="699:41" pos:end="699:42"><expr pos:start="699:41" pos:end="699:42"><name pos:start="699:41" pos:end="699:42">mx</name></expr></argument>,<argument pos:start="699:44" pos:end="699:45"><expr pos:start="699:44" pos:end="699:45"><name pos:start="699:44" pos:end="699:45">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if><else pos:start="701:22" pos:end="703:30">else<block type="pseudo" pos:start="703:25" pos:end="703:30"><block_content pos:start="703:25" pos:end="703:30">

                        <expr_stmt pos:start="703:25" pos:end="703:30"><expr pos:start="703:25" pos:end="703:29"><name pos:start="703:25" pos:end="703:27">val</name><operator pos:start="703:28" pos:end="703:28">=</operator><literal type="number" pos:start="703:29" pos:end="703:29">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <expr_stmt pos:start="705:21" pos:end="705:89"><expr pos:start="705:21" pos:end="705:88"><call pos:start="705:21" pos:end="705:88"><name pos:start="705:21" pos:end="705:34">fill_rectangle</name><argument_list pos:start="705:35" pos:end="705:88">(<argument pos:start="705:36" pos:end="705:70"><expr pos:start="705:36" pos:end="705:70"><name pos:start="705:36" pos:end="705:70"><name pos:start="705:36" pos:end="705:36">h</name><operator pos:start="705:37" pos:end="705:38">-&gt;</operator><name pos:start="705:39" pos:end="705:46">mv_cache</name><index pos:start="705:47" pos:end="705:52">[<expr pos:start="705:48" pos:end="705:51"><name pos:start="705:48" pos:end="705:51">list</name></expr>]</index><index pos:start="705:53" pos:end="705:70">[ <expr pos:start="705:55" pos:end="705:68"><name pos:start="705:55" pos:end="705:62"><name pos:start="705:55" pos:end="705:59">scan8</name><index pos:start="705:60" pos:end="705:62">[<expr pos:start="705:61" pos:end="705:61"><literal type="number" pos:start="705:61" pos:end="705:61">0</literal></expr>]</index></name> <operator pos:start="705:64" pos:end="705:64">+</operator> <literal type="number" pos:start="705:66" pos:end="705:66">2</literal><operator pos:start="705:67" pos:end="705:67">*</operator><name pos:start="705:68" pos:end="705:68">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="705:73" pos:end="705:73"><expr pos:start="705:73" pos:end="705:73"><literal type="number" pos:start="705:73" pos:end="705:73">2</literal></expr></argument>, <argument pos:start="705:76" pos:end="705:76"><expr pos:start="705:76" pos:end="705:76"><literal type="number" pos:start="705:76" pos:end="705:76">4</literal></expr></argument>, <argument pos:start="705:79" pos:end="705:79"><expr pos:start="705:79" pos:end="705:79"><literal type="number" pos:start="705:79" pos:end="705:79">8</literal></expr></argument>, <argument pos:start="705:82" pos:end="705:84"><expr pos:start="705:82" pos:end="705:84"><name pos:start="705:82" pos:end="705:84">val</name></expr></argument>, <argument pos:start="705:87" pos:end="705:87"><expr pos:start="705:87" pos:end="705:87"><literal type="number" pos:start="705:87" pos:end="705:87">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="717:5" pos:end="719:38"><if pos:start="717:5" pos:end="719:38">if<condition pos:start="717:7" pos:end="717:25">(<expr pos:start="717:8" pos:end="717:24"><call pos:start="717:8" pos:end="717:24"><name pos:start="717:8" pos:end="717:15">IS_INTER</name><argument_list pos:start="717:16" pos:end="717:24">(<argument pos:start="717:17" pos:end="717:23"><expr pos:start="717:17" pos:end="717:23"><name pos:start="717:17" pos:end="717:23">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="719:9" pos:end="719:38"><block_content pos:start="719:9" pos:end="719:38">

        <expr_stmt pos:start="719:9" pos:end="719:38"><expr pos:start="719:9" pos:end="719:37"><call pos:start="719:9" pos:end="719:37"><name pos:start="719:9" pos:end="719:25">write_back_motion</name><argument_list pos:start="719:26" pos:end="719:37">(<argument pos:start="719:27" pos:end="719:27"><expr pos:start="719:27" pos:end="719:27"><name pos:start="719:27" pos:end="719:27">h</name></expr></argument>, <argument pos:start="719:30" pos:end="719:36"><expr pos:start="719:30" pos:end="719:36"><name pos:start="719:30" pos:end="719:36">mb_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="723:5" pos:end="759:5"><if pos:start="723:5" pos:end="759:5">if<condition pos:start="723:7" pos:end="723:31">(<expr pos:start="723:8" pos:end="723:30"><operator pos:start="723:8" pos:end="723:8">!</operator><call pos:start="723:9" pos:end="723:30"><name pos:start="723:9" pos:end="723:21">IS_INTRA16x16</name><argument_list pos:start="723:22" pos:end="723:30">(<argument pos:start="723:23" pos:end="723:29"><expr pos:start="723:23" pos:end="723:29"><name pos:start="723:23" pos:end="723:29">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="723:32" pos:end="759:5">{<block_content pos:start="725:9" pos:end="757:9">

        <expr_stmt pos:start="725:9" pos:end="725:35"><expr pos:start="725:9" pos:end="725:34"><name pos:start="725:9" pos:end="725:11">cbp</name><operator pos:start="725:12" pos:end="725:12">=</operator> <call pos:start="725:14" pos:end="725:34"><name pos:start="725:14" pos:end="725:26">get_ue_golomb</name><argument_list pos:start="725:27" pos:end="725:34">(<argument pos:start="725:28" pos:end="725:33"><expr pos:start="725:28" pos:end="725:33"><operator pos:start="725:28" pos:end="725:28">&amp;</operator><name pos:start="725:29" pos:end="725:33"><name pos:start="725:29" pos:end="725:29">s</name><operator pos:start="725:30" pos:end="725:31">-&gt;</operator><name pos:start="725:32" pos:end="725:33">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="729:9" pos:end="757:9"><if pos:start="729:9" pos:end="743:9">if<condition pos:start="729:11" pos:end="729:25">(<expr pos:start="729:12" pos:end="729:24"><name pos:start="729:12" pos:end="729:24">decode_chroma</name></expr>)</condition><block pos:start="729:26" pos:end="743:9">{<block_content pos:start="731:13" pos:end="741:70">

            <if_stmt pos:start="731:13" pos:end="737:13"><if pos:start="731:13" pos:end="737:13">if<condition pos:start="731:15" pos:end="731:24">(<expr pos:start="731:16" pos:end="731:23"><name pos:start="731:16" pos:end="731:18">cbp</name> <operator pos:start="731:20" pos:end="731:20">&gt;</operator> <literal type="number" pos:start="731:22" pos:end="731:23">47</literal></expr>)</condition><block pos:start="731:25" pos:end="737:13">{<block_content pos:start="733:17" pos:end="735:26">

                <expr_stmt pos:start="733:17" pos:end="733:105"><expr pos:start="733:17" pos:end="733:104"><call pos:start="733:17" pos:end="733:104"><name pos:start="733:17" pos:end="733:22">av_log</name><argument_list pos:start="733:23" pos:end="733:104">(<argument pos:start="733:24" pos:end="733:33"><expr pos:start="733:24" pos:end="733:33"><name pos:start="733:24" pos:end="733:33"><name pos:start="733:24" pos:end="733:24">h</name><operator pos:start="733:25" pos:end="733:26">-&gt;</operator><name pos:start="733:27" pos:end="733:27">s</name><operator pos:start="733:28" pos:end="733:28">.</operator><name pos:start="733:29" pos:end="733:33">avctx</name></name></expr></argument>, <argument pos:start="733:36" pos:end="733:47"><expr pos:start="733:36" pos:end="733:47"><name pos:start="733:36" pos:end="733:47">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="733:50" pos:end="733:80"><expr pos:start="733:50" pos:end="733:80"><literal type="string" pos:start="733:50" pos:end="733:80">"cbp too large (%u) at %d %d\n"</literal></expr></argument>, <argument pos:start="733:83" pos:end="733:85"><expr pos:start="733:83" pos:end="733:85"><name pos:start="733:83" pos:end="733:85">cbp</name></expr></argument>, <argument pos:start="733:88" pos:end="733:94"><expr pos:start="733:88" pos:end="733:94"><name pos:start="733:88" pos:end="733:94"><name pos:start="733:88" pos:end="733:88">s</name><operator pos:start="733:89" pos:end="733:90">-&gt;</operator><name pos:start="733:91" pos:end="733:94">mb_x</name></name></expr></argument>, <argument pos:start="733:97" pos:end="733:103"><expr pos:start="733:97" pos:end="733:103"><name pos:start="733:97" pos:end="733:103"><name pos:start="733:97" pos:end="733:97">s</name><operator pos:start="733:98" pos:end="733:99">-&gt;</operator><name pos:start="733:100" pos:end="733:103">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="735:17" pos:end="735:26">return <expr pos:start="735:24" pos:end="735:25"><operator pos:start="735:24" pos:end="735:24">-</operator><literal type="number" pos:start="735:25" pos:end="735:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="739:13" pos:end="741:70"><if pos:start="739:13" pos:end="739:70">if<condition pos:start="739:15" pos:end="739:36">(<expr pos:start="739:16" pos:end="739:35"><call pos:start="739:16" pos:end="739:35"><name pos:start="739:16" pos:end="739:26">IS_INTRA4x4</name><argument_list pos:start="739:27" pos:end="739:35">(<argument pos:start="739:28" pos:end="739:34"><expr pos:start="739:28" pos:end="739:34"><name pos:start="739:28" pos:end="739:34">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="739:38" pos:end="739:70"><block_content pos:start="739:38" pos:end="739:70"> <expr_stmt pos:start="739:38" pos:end="739:70"><expr pos:start="739:38" pos:end="739:69"><name pos:start="739:38" pos:end="739:40">cbp</name><operator pos:start="739:41" pos:end="739:41">=</operator> <name pos:start="739:43" pos:end="739:69"><name pos:start="739:43" pos:end="739:64">golomb_to_intra4x4_cbp</name><index pos:start="739:65" pos:end="739:69">[<expr pos:start="739:66" pos:end="739:68"><name pos:start="739:66" pos:end="739:68">cbp</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="741:13" pos:end="741:70">else<block type="pseudo" pos:start="741:38" pos:end="741:70"><block_content pos:start="741:38" pos:end="741:70">                     <expr_stmt pos:start="741:38" pos:end="741:70"><expr pos:start="741:38" pos:end="741:69"><name pos:start="741:38" pos:end="741:40">cbp</name><operator pos:start="741:41" pos:end="741:41">=</operator> <name pos:start="741:43" pos:end="741:69"><name pos:start="741:43" pos:end="741:61">golomb_to_inter_cbp</name>   <index pos:start="741:65" pos:end="741:69">[<expr pos:start="741:66" pos:end="741:68"><name pos:start="741:66" pos:end="741:68">cbp</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if><else pos:start="743:10" pos:end="757:9">else<block pos:start="743:14" pos:end="757:9">{<block_content pos:start="745:13" pos:end="755:72">

            <if_stmt pos:start="745:13" pos:end="751:13"><if pos:start="745:13" pos:end="751:13">if<condition pos:start="745:15" pos:end="745:24">(<expr pos:start="745:16" pos:end="745:23"><name pos:start="745:16" pos:end="745:18">cbp</name> <operator pos:start="745:20" pos:end="745:20">&gt;</operator> <literal type="number" pos:start="745:22" pos:end="745:23">15</literal></expr>)</condition><block pos:start="745:25" pos:end="751:13">{<block_content pos:start="747:17" pos:end="749:26">

                <expr_stmt pos:start="747:17" pos:end="747:105"><expr pos:start="747:17" pos:end="747:104"><call pos:start="747:17" pos:end="747:104"><name pos:start="747:17" pos:end="747:22">av_log</name><argument_list pos:start="747:23" pos:end="747:104">(<argument pos:start="747:24" pos:end="747:33"><expr pos:start="747:24" pos:end="747:33"><name pos:start="747:24" pos:end="747:33"><name pos:start="747:24" pos:end="747:24">h</name><operator pos:start="747:25" pos:end="747:26">-&gt;</operator><name pos:start="747:27" pos:end="747:27">s</name><operator pos:start="747:28" pos:end="747:28">.</operator><name pos:start="747:29" pos:end="747:33">avctx</name></name></expr></argument>, <argument pos:start="747:36" pos:end="747:47"><expr pos:start="747:36" pos:end="747:47"><name pos:start="747:36" pos:end="747:47">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="747:50" pos:end="747:80"><expr pos:start="747:50" pos:end="747:80"><literal type="string" pos:start="747:50" pos:end="747:80">"cbp too large (%u) at %d %d\n"</literal></expr></argument>, <argument pos:start="747:83" pos:end="747:85"><expr pos:start="747:83" pos:end="747:85"><name pos:start="747:83" pos:end="747:85">cbp</name></expr></argument>, <argument pos:start="747:88" pos:end="747:94"><expr pos:start="747:88" pos:end="747:94"><name pos:start="747:88" pos:end="747:94"><name pos:start="747:88" pos:end="747:88">s</name><operator pos:start="747:89" pos:end="747:90">-&gt;</operator><name pos:start="747:91" pos:end="747:94">mb_x</name></name></expr></argument>, <argument pos:start="747:97" pos:end="747:103"><expr pos:start="747:97" pos:end="747:103"><name pos:start="747:97" pos:end="747:103"><name pos:start="747:97" pos:end="747:97">s</name><operator pos:start="747:98" pos:end="747:99">-&gt;</operator><name pos:start="747:100" pos:end="747:103">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="749:17" pos:end="749:26">return <expr pos:start="749:24" pos:end="749:25"><operator pos:start="749:24" pos:end="749:24">-</operator><literal type="number" pos:start="749:25" pos:end="749:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="753:13" pos:end="755:72"><if pos:start="753:13" pos:end="753:75">if<condition pos:start="753:15" pos:end="753:36">(<expr pos:start="753:16" pos:end="753:35"><call pos:start="753:16" pos:end="753:35"><name pos:start="753:16" pos:end="753:26">IS_INTRA4x4</name><argument_list pos:start="753:27" pos:end="753:35">(<argument pos:start="753:28" pos:end="753:34"><expr pos:start="753:28" pos:end="753:34"><name pos:start="753:28" pos:end="753:34">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="753:38" pos:end="753:75"><block_content pos:start="753:38" pos:end="753:75"> <expr_stmt pos:start="753:38" pos:end="753:75"><expr pos:start="753:38" pos:end="753:74"><name pos:start="753:38" pos:end="753:40">cbp</name><operator pos:start="753:41" pos:end="753:41">=</operator> <name pos:start="753:43" pos:end="753:74"><name pos:start="753:43" pos:end="753:69">golomb_to_intra4x4_cbp_gray</name><index pos:start="753:70" pos:end="753:74">[<expr pos:start="753:71" pos:end="753:73"><name pos:start="753:71" pos:end="753:73">cbp</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="755:13" pos:end="755:72">else<block type="pseudo" pos:start="755:38" pos:end="755:72"><block_content pos:start="755:38" pos:end="755:72">                     <expr_stmt pos:start="755:38" pos:end="755:72"><expr pos:start="755:38" pos:end="755:71"><name pos:start="755:38" pos:end="755:40">cbp</name><operator pos:start="755:41" pos:end="755:41">=</operator> <name pos:start="755:43" pos:end="755:71"><name pos:start="755:43" pos:end="755:66">golomb_to_inter_cbp_gray</name><index pos:start="755:67" pos:end="755:71">[<expr pos:start="755:68" pos:end="755:70"><name pos:start="755:68" pos:end="755:70">cbp</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="763:5" pos:end="767:5"><if pos:start="763:5" pos:end="767:5">if<condition pos:start="763:7" pos:end="763:56">(<expr pos:start="763:8" pos:end="763:55"><name pos:start="763:8" pos:end="763:21">dct8x8_allowed</name> <operator pos:start="763:23" pos:end="763:24">&amp;&amp;</operator> <operator pos:start="763:26" pos:end="763:26">(</operator><name pos:start="763:27" pos:end="763:29">cbp</name><operator pos:start="763:30" pos:end="763:30">&amp;</operator><literal type="number" pos:start="763:31" pos:end="763:32">15</literal><operator pos:start="763:33" pos:end="763:33">)</operator> <operator pos:start="763:35" pos:end="763:36">&amp;&amp;</operator> <operator pos:start="763:38" pos:end="763:38">!</operator><call pos:start="763:39" pos:end="763:55"><name pos:start="763:39" pos:end="763:46">IS_INTRA</name><argument_list pos:start="763:47" pos:end="763:55">(<argument pos:start="763:48" pos:end="763:54"><expr pos:start="763:48" pos:end="763:54"><name pos:start="763:48" pos:end="763:54">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="763:57" pos:end="767:5">{<block_content pos:start="765:9" pos:end="765:52">

        <expr_stmt pos:start="765:9" pos:end="765:52"><expr pos:start="765:9" pos:end="765:51"><name pos:start="765:9" pos:end="765:15">mb_type</name> <operator pos:start="765:17" pos:end="765:18">|=</operator> <name pos:start="765:20" pos:end="765:33">MB_TYPE_8x8DCT</name><operator pos:start="765:34" pos:end="765:34">*</operator><call pos:start="765:35" pos:end="765:51"><name pos:start="765:35" pos:end="765:43">get_bits1</name><argument_list pos:start="765:44" pos:end="765:51">(<argument pos:start="765:45" pos:end="765:50"><expr pos:start="765:45" pos:end="765:50"><operator pos:start="765:45" pos:end="765:45">&amp;</operator><name pos:start="765:46" pos:end="765:50"><name pos:start="765:46" pos:end="765:46">s</name><operator pos:start="765:47" pos:end="765:48">-&gt;</operator><name pos:start="765:49" pos:end="765:50">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="769:5" pos:end="771:29"><expr pos:start="769:5" pos:end="771:28"><name pos:start="769:5" pos:end="769:10"><name pos:start="769:5" pos:end="769:5">h</name><operator pos:start="769:6" pos:end="769:7">-&gt;</operator><name pos:start="769:8" pos:end="769:10">cbp</name></name><operator pos:start="769:11" pos:end="769:11">=</operator>

    <name pos:start="771:5" pos:end="771:23"><name pos:start="771:5" pos:end="771:5">h</name><operator pos:start="771:6" pos:end="771:7">-&gt;</operator><name pos:start="771:8" pos:end="771:16">cbp_table</name><index pos:start="771:17" pos:end="771:23">[<expr pos:start="771:18" pos:end="771:22"><name pos:start="771:18" pos:end="771:22">mb_xy</name></expr>]</index></name><operator pos:start="771:24" pos:end="771:24">=</operator> <name pos:start="771:26" pos:end="771:28">cbp</name></expr>;</expr_stmt>

    <expr_stmt pos:start="773:5" pos:end="773:50"><expr pos:start="773:5" pos:end="773:49"><name pos:start="773:5" pos:end="773:39"><name pos:start="773:5" pos:end="773:5">s</name><operator pos:start="773:6" pos:end="773:7">-&gt;</operator><name pos:start="773:8" pos:end="773:22">current_picture</name><operator pos:start="773:23" pos:end="773:23">.</operator><name pos:start="773:24" pos:end="773:24">f</name><operator pos:start="773:25" pos:end="773:25">.</operator><name pos:start="773:26" pos:end="773:32">mb_type</name><index pos:start="773:33" pos:end="773:39">[<expr pos:start="773:34" pos:end="773:38"><name pos:start="773:34" pos:end="773:38">mb_xy</name></expr>]</index></name> <operator pos:start="773:41" pos:end="773:41">=</operator> <name pos:start="773:43" pos:end="773:49">mb_type</name></expr>;</expr_stmt>



    <if_stmt pos:start="777:5" pos:end="971:5"><if pos:start="777:5" pos:end="963:5">if<condition pos:start="777:7" pos:end="777:37">(<expr pos:start="777:8" pos:end="777:36"><name pos:start="777:8" pos:end="777:10">cbp</name> <operator pos:start="777:12" pos:end="777:13">||</operator> <call pos:start="777:15" pos:end="777:36"><name pos:start="777:15" pos:end="777:27">IS_INTRA16x16</name><argument_list pos:start="777:28" pos:end="777:36">(<argument pos:start="777:29" pos:end="777:35"><expr pos:start="777:29" pos:end="777:35"><name pos:start="777:29" pos:end="777:35">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="777:38" pos:end="963:5">{<block_content pos:start="779:9" pos:end="961:9">

        <decl_stmt pos:start="779:9" pos:end="779:35"><decl pos:start="779:9" pos:end="779:16"><type pos:start="779:9" pos:end="779:11"><name pos:start="779:9" pos:end="779:11">int</name></type> <name pos:start="779:13" pos:end="779:16">i4x4</name></decl>, <decl pos:start="779:19" pos:end="779:22"><type ref="prev" pos:start="779:9" pos:end="779:11"/><name pos:start="779:19" pos:end="779:22">i8x8</name></decl>, <decl pos:start="779:25" pos:end="779:34"><type ref="prev" pos:start="779:9" pos:end="779:11"/><name pos:start="779:25" pos:end="779:34">chroma_idx</name></decl>;</decl_stmt>

        <decl_stmt pos:start="781:9" pos:end="781:19"><decl pos:start="781:9" pos:end="781:18"><type pos:start="781:9" pos:end="781:11"><name pos:start="781:9" pos:end="781:11">int</name></type> <name pos:start="781:13" pos:end="781:18">dquant</name></decl>;</decl_stmt>

        <decl_stmt pos:start="783:9" pos:end="783:16"><decl pos:start="783:9" pos:end="783:15"><type pos:start="783:9" pos:end="783:11"><name pos:start="783:9" pos:end="783:11">int</name></type> <name pos:start="783:13" pos:end="783:15">ret</name></decl>;</decl_stmt>

        <decl_stmt pos:start="785:9" pos:end="785:81"><decl pos:start="785:9" pos:end="785:80"><type pos:start="785:9" pos:end="785:23"><name pos:start="785:9" pos:end="785:21">GetBitContext</name> <modifier pos:start="785:23" pos:end="785:23">*</modifier></type><name pos:start="785:24" pos:end="785:25">gb</name><init pos:start="785:26" pos:end="785:80">= <expr pos:start="785:28" pos:end="785:80"><ternary pos:start="785:28" pos:end="785:80"><condition pos:start="785:28" pos:end="785:46"><expr pos:start="785:28" pos:end="785:44"><call pos:start="785:28" pos:end="785:44"><name pos:start="785:28" pos:end="785:35">IS_INTRA</name><argument_list pos:start="785:36" pos:end="785:44">(<argument pos:start="785:37" pos:end="785:43"><expr pos:start="785:37" pos:end="785:43"><name pos:start="785:37" pos:end="785:43">mb_type</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="785:48" pos:end="785:62"> <expr pos:start="785:48" pos:end="785:62"><name pos:start="785:48" pos:end="785:62"><name pos:start="785:48" pos:end="785:48">h</name><operator pos:start="785:49" pos:end="785:50">-&gt;</operator><name pos:start="785:51" pos:end="785:62">intra_gb_ptr</name></name></expr> </then><else pos:start="785:64" pos:end="785:80">: <expr pos:start="785:66" pos:end="785:80"><name pos:start="785:66" pos:end="785:80"><name pos:start="785:66" pos:end="785:66">h</name><operator pos:start="785:67" pos:end="785:68">-&gt;</operator><name pos:start="785:69" pos:end="785:80">inter_gb_ptr</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="787:9" pos:end="787:38"><decl pos:start="787:9" pos:end="787:27"><type pos:start="787:9" pos:end="787:23"><specifier pos:start="787:9" pos:end="787:13">const</specifier> <name pos:start="787:15" pos:end="787:21">uint8_t</name> <modifier pos:start="787:23" pos:end="787:23">*</modifier></type><name pos:start="787:24" pos:end="787:27">scan</name></decl>, <decl pos:start="787:30" pos:end="787:37"><type ref="prev" pos:start="787:9" pos:end="787:23"><modifier pos:start="787:30" pos:end="787:30">*</modifier></type><name pos:start="787:31" pos:end="787:37">scan8x8</name></decl>;</decl_stmt>

        <decl_stmt pos:start="789:9" pos:end="789:60"><decl pos:start="789:9" pos:end="789:59"><type pos:start="789:9" pos:end="789:17"><specifier pos:start="789:9" pos:end="789:13">const</specifier> <name pos:start="789:15" pos:end="789:17">int</name></type> <name pos:start="789:19" pos:end="789:24">max_qp</name> <init pos:start="789:26" pos:end="789:59">= <expr pos:start="789:28" pos:end="789:59"><literal type="number" pos:start="789:28" pos:end="789:31">51</literal> <operator pos:start="789:31" pos:end="789:31">+</operator> <literal type="number" pos:start="789:33" pos:end="789:33">6</literal><operator pos:start="789:34" pos:end="789:34">*</operator><operator pos:start="789:35" pos:end="789:35">(</operator><name pos:start="789:36" pos:end="789:56"><name pos:start="789:36" pos:end="789:36">h</name><operator pos:start="789:37" pos:end="789:38">-&gt;</operator><name pos:start="789:39" pos:end="789:41">sps</name><operator pos:start="789:42" pos:end="789:42">.</operator><name pos:start="789:43" pos:end="789:56">bit_depth_luma</name></name><operator pos:start="789:57" pos:end="789:57">-</operator><literal type="number" pos:start="789:58" pos:end="789:58">8</literal><operator pos:start="789:59" pos:end="789:59">)</operator></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="793:9" pos:end="805:9"><if pos:start="793:9" pos:end="799:9">if<condition pos:start="793:11" pos:end="793:34">(<expr pos:start="793:12" pos:end="793:33"><call pos:start="793:12" pos:end="793:33"><name pos:start="793:12" pos:end="793:24">IS_INTERLACED</name><argument_list pos:start="793:25" pos:end="793:33">(<argument pos:start="793:26" pos:end="793:32"><expr pos:start="793:26" pos:end="793:32"><name pos:start="793:26" pos:end="793:32">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="793:35" pos:end="799:9">{<block_content pos:start="795:13" pos:end="797:63">

            <expr_stmt pos:start="795:13" pos:end="795:84"><expr pos:start="795:13" pos:end="795:83"><name pos:start="795:13" pos:end="795:19">scan8x8</name><operator pos:start="795:20" pos:end="795:20">=</operator> <ternary pos:start="795:22" pos:end="795:83"><condition pos:start="795:22" pos:end="795:32"><expr pos:start="795:22" pos:end="795:30"><name pos:start="795:22" pos:end="795:30"><name pos:start="795:22" pos:end="795:22">s</name><operator pos:start="795:23" pos:end="795:24">-&gt;</operator><name pos:start="795:25" pos:end="795:30">qscale</name></name></expr> ?</condition><then pos:start="795:34" pos:end="795:55"> <expr pos:start="795:34" pos:end="795:55"><name pos:start="795:34" pos:end="795:55"><name pos:start="795:34" pos:end="795:34">h</name><operator pos:start="795:35" pos:end="795:36">-&gt;</operator><name pos:start="795:37" pos:end="795:55">field_scan8x8_cavlc</name></name></expr> </then><else pos:start="795:57" pos:end="795:83">: <expr pos:start="795:59" pos:end="795:83"><name pos:start="795:59" pos:end="795:83"><name pos:start="795:59" pos:end="795:59">h</name><operator pos:start="795:60" pos:end="795:61">-&gt;</operator><name pos:start="795:62" pos:end="795:83">field_scan8x8_cavlc_q0</name></name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="797:13" pos:end="797:63"><expr pos:start="797:13" pos:end="797:62"><name pos:start="797:13" pos:end="797:16">scan</name><operator pos:start="797:17" pos:end="797:17">=</operator> <ternary pos:start="797:19" pos:end="797:62"><condition pos:start="797:19" pos:end="797:29"><expr pos:start="797:19" pos:end="797:27"><name pos:start="797:19" pos:end="797:27"><name pos:start="797:19" pos:end="797:19">s</name><operator pos:start="797:20" pos:end="797:21">-&gt;</operator><name pos:start="797:22" pos:end="797:27">qscale</name></name></expr> ?</condition><then pos:start="797:31" pos:end="797:43"> <expr pos:start="797:31" pos:end="797:43"><name pos:start="797:31" pos:end="797:43"><name pos:start="797:31" pos:end="797:31">h</name><operator pos:start="797:32" pos:end="797:33">-&gt;</operator><name pos:start="797:34" pos:end="797:43">field_scan</name></name></expr> </then><else pos:start="797:45" pos:end="797:62">: <expr pos:start="797:47" pos:end="797:62"><name pos:start="797:47" pos:end="797:62"><name pos:start="797:47" pos:end="797:47">h</name><operator pos:start="797:48" pos:end="797:49">-&gt;</operator><name pos:start="797:50" pos:end="797:62">field_scan_q0</name></name></expr></else></ternary></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="799:10" pos:end="805:9">else<block pos:start="799:14" pos:end="805:9">{<block_content pos:start="801:13" pos:end="803:65">

            <expr_stmt pos:start="801:13" pos:end="801:86"><expr pos:start="801:13" pos:end="801:85"><name pos:start="801:13" pos:end="801:19">scan8x8</name><operator pos:start="801:20" pos:end="801:20">=</operator> <ternary pos:start="801:22" pos:end="801:85"><condition pos:start="801:22" pos:end="801:32"><expr pos:start="801:22" pos:end="801:30"><name pos:start="801:22" pos:end="801:30"><name pos:start="801:22" pos:end="801:22">s</name><operator pos:start="801:23" pos:end="801:24">-&gt;</operator><name pos:start="801:25" pos:end="801:30">qscale</name></name></expr> ?</condition><then pos:start="801:34" pos:end="801:56"> <expr pos:start="801:34" pos:end="801:56"><name pos:start="801:34" pos:end="801:56"><name pos:start="801:34" pos:end="801:34">h</name><operator pos:start="801:35" pos:end="801:36">-&gt;</operator><name pos:start="801:37" pos:end="801:56">zigzag_scan8x8_cavlc</name></name></expr> </then><else pos:start="801:58" pos:end="801:85">: <expr pos:start="801:60" pos:end="801:85"><name pos:start="801:60" pos:end="801:85"><name pos:start="801:60" pos:end="801:60">h</name><operator pos:start="801:61" pos:end="801:62">-&gt;</operator><name pos:start="801:63" pos:end="801:85">zigzag_scan8x8_cavlc_q0</name></name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="803:13" pos:end="803:65"><expr pos:start="803:13" pos:end="803:64"><name pos:start="803:13" pos:end="803:16">scan</name><operator pos:start="803:17" pos:end="803:17">=</operator> <ternary pos:start="803:19" pos:end="803:64"><condition pos:start="803:19" pos:end="803:29"><expr pos:start="803:19" pos:end="803:27"><name pos:start="803:19" pos:end="803:27"><name pos:start="803:19" pos:end="803:19">s</name><operator pos:start="803:20" pos:end="803:21">-&gt;</operator><name pos:start="803:22" pos:end="803:27">qscale</name></name></expr> ?</condition><then pos:start="803:31" pos:end="803:44"> <expr pos:start="803:31" pos:end="803:44"><name pos:start="803:31" pos:end="803:44"><name pos:start="803:31" pos:end="803:31">h</name><operator pos:start="803:32" pos:end="803:33">-&gt;</operator><name pos:start="803:34" pos:end="803:44">zigzag_scan</name></name></expr> </then><else pos:start="803:46" pos:end="803:64">: <expr pos:start="803:48" pos:end="803:64"><name pos:start="803:48" pos:end="803:64"><name pos:start="803:48" pos:end="803:48">h</name><operator pos:start="803:49" pos:end="803:50">-&gt;</operator><name pos:start="803:51" pos:end="803:64">zigzag_scan_q0</name></name></expr></else></ternary></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="809:9" pos:end="809:38"><expr pos:start="809:9" pos:end="809:37"><name pos:start="809:9" pos:end="809:14">dquant</name><operator pos:start="809:15" pos:end="809:15">=</operator> <call pos:start="809:17" pos:end="809:37"><name pos:start="809:17" pos:end="809:29">get_se_golomb</name><argument_list pos:start="809:30" pos:end="809:37">(<argument pos:start="809:31" pos:end="809:36"><expr pos:start="809:31" pos:end="809:36"><operator pos:start="809:31" pos:end="809:31">&amp;</operator><name pos:start="809:32" pos:end="809:36"><name pos:start="809:32" pos:end="809:32">s</name><operator pos:start="809:33" pos:end="809:34">-&gt;</operator><name pos:start="809:35" pos:end="809:36">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="813:9" pos:end="813:28"><expr pos:start="813:9" pos:end="813:27"><name pos:start="813:9" pos:end="813:17"><name pos:start="813:9" pos:end="813:9">s</name><operator pos:start="813:10" pos:end="813:11">-&gt;</operator><name pos:start="813:12" pos:end="813:17">qscale</name></name> <operator pos:start="813:19" pos:end="813:20">+=</operator> <name pos:start="813:22" pos:end="813:27">dquant</name></expr>;</expr_stmt>



        <if_stmt pos:start="817:9" pos:end="831:9"><if pos:start="817:9" pos:end="831:9">if<condition pos:start="817:11" pos:end="817:42">(<expr pos:start="817:12" pos:end="817:41"><operator pos:start="817:12" pos:end="817:12">(</operator><operator pos:start="817:13" pos:end="817:13">(</operator><name pos:start="817:14" pos:end="817:21">unsigned</name><operator pos:start="817:22" pos:end="817:22">)</operator><name pos:start="817:23" pos:end="817:31"><name pos:start="817:23" pos:end="817:23">s</name><operator pos:start="817:24" pos:end="817:25">-&gt;</operator><name pos:start="817:26" pos:end="817:31">qscale</name></name><operator pos:start="817:32" pos:end="817:32">)</operator> <operator pos:start="817:34" pos:end="817:34">&gt;</operator> <name pos:start="817:36" pos:end="817:41">max_qp</name></expr>)</condition><block pos:start="817:43" pos:end="831:9">{<block_content pos:start="819:13" pos:end="829:13">

            <if_stmt pos:start="819:13" pos:end="821:49"><if pos:start="819:13" pos:end="819:49">if<condition pos:start="819:15" pos:end="819:27">(<expr pos:start="819:16" pos:end="819:26"><name pos:start="819:16" pos:end="819:24"><name pos:start="819:16" pos:end="819:16">s</name><operator pos:start="819:17" pos:end="819:18">-&gt;</operator><name pos:start="819:19" pos:end="819:24">qscale</name></name><operator pos:start="819:25" pos:end="819:25">&lt;</operator><literal type="number" pos:start="819:26" pos:end="819:26">0</literal></expr>)</condition><block type="pseudo" pos:start="819:29" pos:end="819:49"><block_content pos:start="819:29" pos:end="819:49"> <expr_stmt pos:start="819:29" pos:end="819:49"><expr pos:start="819:29" pos:end="819:48"><name pos:start="819:29" pos:end="819:37"><name pos:start="819:29" pos:end="819:29">s</name><operator pos:start="819:30" pos:end="819:31">-&gt;</operator><name pos:start="819:32" pos:end="819:37">qscale</name></name><operator pos:start="819:38" pos:end="819:39">+=</operator> <name pos:start="819:41" pos:end="819:46">max_qp</name><operator pos:start="819:47" pos:end="819:47">+</operator><literal type="number" pos:start="819:48" pos:end="819:48">1</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="821:13" pos:end="821:49">else<block type="pseudo" pos:start="821:29" pos:end="821:49"><block_content pos:start="821:29" pos:end="821:49">            <expr_stmt pos:start="821:29" pos:end="821:49"><expr pos:start="821:29" pos:end="821:48"><name pos:start="821:29" pos:end="821:37"><name pos:start="821:29" pos:end="821:29">s</name><operator pos:start="821:30" pos:end="821:31">-&gt;</operator><name pos:start="821:32" pos:end="821:37">qscale</name></name><operator pos:start="821:38" pos:end="821:39">-=</operator> <name pos:start="821:41" pos:end="821:46">max_qp</name><operator pos:start="821:47" pos:end="821:47">+</operator><literal type="number" pos:start="821:48" pos:end="821:48">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <if_stmt pos:start="823:13" pos:end="829:13"><if pos:start="823:13" pos:end="829:13">if<condition pos:start="823:15" pos:end="823:46">(<expr pos:start="823:16" pos:end="823:45"><operator pos:start="823:16" pos:end="823:16">(</operator><operator pos:start="823:17" pos:end="823:17">(</operator><name pos:start="823:18" pos:end="823:25">unsigned</name><operator pos:start="823:26" pos:end="823:26">)</operator><name pos:start="823:27" pos:end="823:35"><name pos:start="823:27" pos:end="823:27">s</name><operator pos:start="823:28" pos:end="823:29">-&gt;</operator><name pos:start="823:30" pos:end="823:35">qscale</name></name><operator pos:start="823:36" pos:end="823:36">)</operator> <operator pos:start="823:38" pos:end="823:38">&gt;</operator> <name pos:start="823:40" pos:end="823:45">max_qp</name></expr>)</condition><block pos:start="823:47" pos:end="829:13">{<block_content pos:start="825:17" pos:end="827:26">

                <expr_stmt pos:start="825:17" pos:end="825:114"><expr pos:start="825:17" pos:end="825:113"><call pos:start="825:17" pos:end="825:113"><name pos:start="825:17" pos:end="825:22">av_log</name><argument_list pos:start="825:23" pos:end="825:113">(<argument pos:start="825:24" pos:end="825:33"><expr pos:start="825:24" pos:end="825:33"><name pos:start="825:24" pos:end="825:33"><name pos:start="825:24" pos:end="825:24">h</name><operator pos:start="825:25" pos:end="825:26">-&gt;</operator><name pos:start="825:27" pos:end="825:27">s</name><operator pos:start="825:28" pos:end="825:28">.</operator><name pos:start="825:29" pos:end="825:33">avctx</name></name></expr></argument>, <argument pos:start="825:36" pos:end="825:47"><expr pos:start="825:36" pos:end="825:47"><name pos:start="825:36" pos:end="825:47">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="825:50" pos:end="825:86"><expr pos:start="825:50" pos:end="825:86"><literal type="string" pos:start="825:50" pos:end="825:86">"dquant out of range (%d) at %d %d\n"</literal></expr></argument>, <argument pos:start="825:89" pos:end="825:94"><expr pos:start="825:89" pos:end="825:94"><name pos:start="825:89" pos:end="825:94">dquant</name></expr></argument>, <argument pos:start="825:97" pos:end="825:103"><expr pos:start="825:97" pos:end="825:103"><name pos:start="825:97" pos:end="825:103"><name pos:start="825:97" pos:end="825:97">s</name><operator pos:start="825:98" pos:end="825:99">-&gt;</operator><name pos:start="825:100" pos:end="825:103">mb_x</name></name></expr></argument>, <argument pos:start="825:106" pos:end="825:112"><expr pos:start="825:106" pos:end="825:112"><name pos:start="825:106" pos:end="825:112"><name pos:start="825:106" pos:end="825:106">s</name><operator pos:start="825:107" pos:end="825:108">-&gt;</operator><name pos:start="825:109" pos:end="825:112">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="827:17" pos:end="827:26">return <expr pos:start="827:24" pos:end="827:25"><operator pos:start="827:24" pos:end="827:24">-</operator><literal type="number" pos:start="827:25" pos:end="827:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="835:9" pos:end="835:56"><expr pos:start="835:9" pos:end="835:55"><name pos:start="835:9" pos:end="835:23"><name pos:start="835:9" pos:end="835:9">h</name><operator pos:start="835:10" pos:end="835:11">-&gt;</operator><name pos:start="835:12" pos:end="835:20">chroma_qp</name><index pos:start="835:21" pos:end="835:23">[<expr pos:start="835:22" pos:end="835:22"><literal type="number" pos:start="835:22" pos:end="835:22">0</literal></expr>]</index></name><operator pos:start="835:24" pos:end="835:24">=</operator> <call pos:start="835:26" pos:end="835:55"><name pos:start="835:26" pos:end="835:38">get_chroma_qp</name><argument_list pos:start="835:39" pos:end="835:55">(<argument pos:start="835:40" pos:end="835:40"><expr pos:start="835:40" pos:end="835:40"><name pos:start="835:40" pos:end="835:40">h</name></expr></argument>, <argument pos:start="835:43" pos:end="835:43"><expr pos:start="835:43" pos:end="835:43"><literal type="number" pos:start="835:43" pos:end="835:43">0</literal></expr></argument>, <argument pos:start="835:46" pos:end="835:54"><expr pos:start="835:46" pos:end="835:54"><name pos:start="835:46" pos:end="835:54"><name pos:start="835:46" pos:end="835:46">s</name><operator pos:start="835:47" pos:end="835:48">-&gt;</operator><name pos:start="835:49" pos:end="835:54">qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="837:9" pos:end="837:56"><expr pos:start="837:9" pos:end="837:55"><name pos:start="837:9" pos:end="837:23"><name pos:start="837:9" pos:end="837:9">h</name><operator pos:start="837:10" pos:end="837:11">-&gt;</operator><name pos:start="837:12" pos:end="837:20">chroma_qp</name><index pos:start="837:21" pos:end="837:23">[<expr pos:start="837:22" pos:end="837:22"><literal type="number" pos:start="837:22" pos:end="837:22">1</literal></expr>]</index></name><operator pos:start="837:24" pos:end="837:24">=</operator> <call pos:start="837:26" pos:end="837:55"><name pos:start="837:26" pos:end="837:38">get_chroma_qp</name><argument_list pos:start="837:39" pos:end="837:55">(<argument pos:start="837:40" pos:end="837:40"><expr pos:start="837:40" pos:end="837:40"><name pos:start="837:40" pos:end="837:40">h</name></expr></argument>, <argument pos:start="837:43" pos:end="837:43"><expr pos:start="837:43" pos:end="837:43"><literal type="number" pos:start="837:43" pos:end="837:43">1</literal></expr></argument>, <argument pos:start="837:46" pos:end="837:54"><expr pos:start="837:46" pos:end="837:54"><name pos:start="837:46" pos:end="837:54"><name pos:start="837:46" pos:end="837:46">s</name><operator pos:start="837:47" pos:end="837:48">-&gt;</operator><name pos:start="837:49" pos:end="837:54">qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="841:9" pos:end="845:9"><if pos:start="841:9" pos:end="845:9">if<condition pos:start="841:11" pos:end="841:98">( <expr pos:start="841:13" pos:end="841:96"><operator pos:start="841:13" pos:end="841:13">(</operator><name pos:start="841:14" pos:end="841:16">ret</name> <operator pos:start="841:18" pos:end="841:18">=</operator> <call pos:start="841:20" pos:end="841:91"><name pos:start="841:20" pos:end="841:39">decode_luma_residual</name><argument_list pos:start="841:40" pos:end="841:91">(<argument pos:start="841:41" pos:end="841:41"><expr pos:start="841:41" pos:end="841:41"><name pos:start="841:41" pos:end="841:41">h</name></expr></argument>, <argument pos:start="841:44" pos:end="841:45"><expr pos:start="841:44" pos:end="841:45"><name pos:start="841:44" pos:end="841:45">gb</name></expr></argument>, <argument pos:start="841:48" pos:end="841:51"><expr pos:start="841:48" pos:end="841:51"><name pos:start="841:48" pos:end="841:51">scan</name></expr></argument>, <argument pos:start="841:54" pos:end="841:60"><expr pos:start="841:54" pos:end="841:60"><name pos:start="841:54" pos:end="841:60">scan8x8</name></expr></argument>, <argument pos:start="841:63" pos:end="841:73"><expr pos:start="841:63" pos:end="841:73"><name pos:start="841:63" pos:end="841:73">pixel_shift</name></expr></argument>, <argument pos:start="841:76" pos:end="841:82"><expr pos:start="841:76" pos:end="841:82"><name pos:start="841:76" pos:end="841:82">mb_type</name></expr></argument>, <argument pos:start="841:85" pos:end="841:87"><expr pos:start="841:85" pos:end="841:87"><name pos:start="841:85" pos:end="841:87">cbp</name></expr></argument>, <argument pos:start="841:90" pos:end="841:90"><expr pos:start="841:90" pos:end="841:90"><literal type="number" pos:start="841:90" pos:end="841:90">0</literal></expr></argument>)</argument_list></call><operator pos:start="841:92" pos:end="841:92">)</operator> <operator pos:start="841:94" pos:end="841:94">&lt;</operator> <literal type="number" pos:start="841:96" pos:end="841:96">0</literal></expr> )</condition><block pos:start="841:99" pos:end="845:9">{<block_content pos:start="843:13" pos:end="843:22">

            <return pos:start="843:13" pos:end="843:22">return <expr pos:start="843:20" pos:end="843:21"><operator pos:start="843:20" pos:end="843:20">-</operator><literal type="number" pos:start="843:21" pos:end="843:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="847:9" pos:end="847:41"><expr pos:start="847:9" pos:end="847:40"><name pos:start="847:9" pos:end="847:27"><name pos:start="847:9" pos:end="847:9">h</name><operator pos:start="847:10" pos:end="847:11">-&gt;</operator><name pos:start="847:12" pos:end="847:20">cbp_table</name><index pos:start="847:21" pos:end="847:27">[<expr pos:start="847:22" pos:end="847:26"><name pos:start="847:22" pos:end="847:26">mb_xy</name></expr>]</index></name> <operator pos:start="847:29" pos:end="847:30">|=</operator> <name pos:start="847:32" pos:end="847:34">ret</name> <operator pos:start="847:36" pos:end="847:37">&lt;&lt;</operator> <literal type="number" pos:start="847:39" pos:end="847:40">12</literal></expr>;</expr_stmt>

        <if_stmt pos:start="849:9" pos:end="961:9"><if pos:start="849:9" pos:end="863:9">if<condition pos:start="849:11" pos:end="849:21">(<expr pos:start="849:12" pos:end="849:20"><name pos:start="849:12" pos:end="849:20">CHROMA444</name></expr>)</condition><block pos:start="849:22" pos:end="863:9">{<block_content pos:start="851:13" pos:end="861:13">

            <if_stmt pos:start="851:13" pos:end="855:13"><if pos:start="851:13" pos:end="855:13">if<condition pos:start="851:15" pos:end="851:94">( <expr pos:start="851:17" pos:end="851:92"><call pos:start="851:17" pos:end="851:88"><name pos:start="851:17" pos:end="851:36">decode_luma_residual</name><argument_list pos:start="851:37" pos:end="851:88">(<argument pos:start="851:38" pos:end="851:38"><expr pos:start="851:38" pos:end="851:38"><name pos:start="851:38" pos:end="851:38">h</name></expr></argument>, <argument pos:start="851:41" pos:end="851:42"><expr pos:start="851:41" pos:end="851:42"><name pos:start="851:41" pos:end="851:42">gb</name></expr></argument>, <argument pos:start="851:45" pos:end="851:48"><expr pos:start="851:45" pos:end="851:48"><name pos:start="851:45" pos:end="851:48">scan</name></expr></argument>, <argument pos:start="851:51" pos:end="851:57"><expr pos:start="851:51" pos:end="851:57"><name pos:start="851:51" pos:end="851:57">scan8x8</name></expr></argument>, <argument pos:start="851:60" pos:end="851:70"><expr pos:start="851:60" pos:end="851:70"><name pos:start="851:60" pos:end="851:70">pixel_shift</name></expr></argument>, <argument pos:start="851:73" pos:end="851:79"><expr pos:start="851:73" pos:end="851:79"><name pos:start="851:73" pos:end="851:79">mb_type</name></expr></argument>, <argument pos:start="851:82" pos:end="851:84"><expr pos:start="851:82" pos:end="851:84"><name pos:start="851:82" pos:end="851:84">cbp</name></expr></argument>, <argument pos:start="851:87" pos:end="851:87"><expr pos:start="851:87" pos:end="851:87"><literal type="number" pos:start="851:87" pos:end="851:87">1</literal></expr></argument>)</argument_list></call> <operator pos:start="851:90" pos:end="851:90">&lt;</operator> <literal type="number" pos:start="851:92" pos:end="851:92">0</literal></expr> )</condition><block pos:start="851:95" pos:end="855:13">{<block_content pos:start="853:17" pos:end="853:26">

                <return pos:start="853:17" pos:end="853:26">return <expr pos:start="853:24" pos:end="853:25"><operator pos:start="853:24" pos:end="853:24">-</operator><literal type="number" pos:start="853:25" pos:end="853:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="857:13" pos:end="861:13"><if pos:start="857:13" pos:end="861:13">if<condition pos:start="857:15" pos:end="857:94">( <expr pos:start="857:17" pos:end="857:92"><call pos:start="857:17" pos:end="857:88"><name pos:start="857:17" pos:end="857:36">decode_luma_residual</name><argument_list pos:start="857:37" pos:end="857:88">(<argument pos:start="857:38" pos:end="857:38"><expr pos:start="857:38" pos:end="857:38"><name pos:start="857:38" pos:end="857:38">h</name></expr></argument>, <argument pos:start="857:41" pos:end="857:42"><expr pos:start="857:41" pos:end="857:42"><name pos:start="857:41" pos:end="857:42">gb</name></expr></argument>, <argument pos:start="857:45" pos:end="857:48"><expr pos:start="857:45" pos:end="857:48"><name pos:start="857:45" pos:end="857:48">scan</name></expr></argument>, <argument pos:start="857:51" pos:end="857:57"><expr pos:start="857:51" pos:end="857:57"><name pos:start="857:51" pos:end="857:57">scan8x8</name></expr></argument>, <argument pos:start="857:60" pos:end="857:70"><expr pos:start="857:60" pos:end="857:70"><name pos:start="857:60" pos:end="857:70">pixel_shift</name></expr></argument>, <argument pos:start="857:73" pos:end="857:79"><expr pos:start="857:73" pos:end="857:79"><name pos:start="857:73" pos:end="857:79">mb_type</name></expr></argument>, <argument pos:start="857:82" pos:end="857:84"><expr pos:start="857:82" pos:end="857:84"><name pos:start="857:82" pos:end="857:84">cbp</name></expr></argument>, <argument pos:start="857:87" pos:end="857:87"><expr pos:start="857:87" pos:end="857:87"><literal type="number" pos:start="857:87" pos:end="857:87">2</literal></expr></argument>)</argument_list></call> <operator pos:start="857:90" pos:end="857:90">&lt;</operator> <literal type="number" pos:start="857:92" pos:end="857:92">0</literal></expr> )</condition><block pos:start="857:95" pos:end="861:13">{<block_content pos:start="859:17" pos:end="859:26">

                <return pos:start="859:17" pos:end="859:26">return <expr pos:start="859:24" pos:end="859:25"><operator pos:start="859:24" pos:end="859:24">-</operator><literal type="number" pos:start="859:25" pos:end="859:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="863:11" pos:end="917:9">else if <condition pos:start="863:19" pos:end="863:29">(<expr pos:start="863:20" pos:end="863:28"><name pos:start="863:20" pos:end="863:28">CHROMA422</name></expr>)</condition> <block pos:start="863:31" pos:end="917:9">{<block_content pos:start="865:13" pos:end="915:13">

            <if_stmt pos:start="865:13" pos:end="879:13"><if pos:start="865:13" pos:end="879:13">if<condition pos:start="865:15" pos:end="865:24">(<expr pos:start="865:16" pos:end="865:23"><name pos:start="865:16" pos:end="865:18">cbp</name><operator pos:start="865:19" pos:end="865:19">&amp;</operator><literal type="number" pos:start="865:20" pos:end="865:23">0x30</literal></expr>)</condition><block pos:start="865:25" pos:end="879:13">{<block_content pos:start="867:17" pos:end="877:21">

                <for pos:start="867:17" pos:end="877:21">for<control pos:start="867:20" pos:end="867:61">(<init pos:start="867:21" pos:end="867:33"><expr pos:start="867:21" pos:end="867:32"><name pos:start="867:21" pos:end="867:30">chroma_idx</name><operator pos:start="867:31" pos:end="867:31">=</operator><literal type="number" pos:start="867:32" pos:end="867:32">0</literal></expr>;</init> <condition pos:start="867:35" pos:end="867:47"><expr pos:start="867:35" pos:end="867:46"><name pos:start="867:35" pos:end="867:44">chroma_idx</name><operator pos:start="867:45" pos:end="867:45">&lt;</operator><literal type="number" pos:start="867:46" pos:end="867:46">2</literal></expr>;</condition> <incr pos:start="867:49" pos:end="867:60"><expr pos:start="867:49" pos:end="867:60"><name pos:start="867:49" pos:end="867:58">chroma_idx</name><operator pos:start="867:59" pos:end="867:60">++</operator></expr></incr>)</control><block type="pseudo" pos:start="869:21" pos:end="877:21"><block_content pos:start="869:21" pos:end="877:21">

                    <if_stmt pos:start="869:21" pos:end="877:21"><if pos:start="869:21" pos:end="877:21">if <condition pos:start="869:24" pos:end="873:53">(<expr pos:start="869:25" pos:end="873:52"><call pos:start="869:25" pos:end="873:48"><name pos:start="869:25" pos:end="869:39">decode_residual</name><argument_list pos:start="869:40" pos:end="873:48">(<argument pos:start="869:41" pos:end="869:41"><expr pos:start="869:41" pos:end="869:41"><name pos:start="869:41" pos:end="869:41">h</name></expr></argument>, <argument pos:start="869:44" pos:end="869:45"><expr pos:start="869:44" pos:end="869:45"><name pos:start="869:44" pos:end="869:45">gb</name></expr></argument>, <argument pos:start="869:48" pos:end="869:96"><expr pos:start="869:48" pos:end="869:96"><name pos:start="869:48" pos:end="869:52"><name pos:start="869:48" pos:end="869:48">h</name><operator pos:start="869:49" pos:end="869:50">-&gt;</operator><name pos:start="869:51" pos:end="869:52">mb</name></name> <operator pos:start="869:54" pos:end="869:54">+</operator> <operator pos:start="869:56" pos:end="869:56">(</operator><operator pos:start="869:57" pos:end="869:57">(</operator><literal type="number" pos:start="869:58" pos:end="869:62">256</literal> <operator pos:start="869:62" pos:end="869:62">+</operator> <literal type="number" pos:start="869:64" pos:end="869:65">16</literal><operator pos:start="869:66" pos:end="869:66">*</operator><literal type="number" pos:start="869:67" pos:end="869:68">16</literal><operator pos:start="869:69" pos:end="869:69">*</operator><name pos:start="869:70" pos:end="869:79">chroma_idx</name><operator pos:start="869:80" pos:end="869:80">)</operator> <operator pos:start="869:82" pos:end="869:83">&lt;&lt;</operator> <name pos:start="869:85" pos:end="869:95">pixel_shift</name><operator pos:start="869:96" pos:end="869:96">)</operator></expr></argument>,

                                        <argument pos:start="871:41" pos:end="871:72"><expr pos:start="871:41" pos:end="871:72"><name pos:start="871:41" pos:end="871:61">CHROMA_DC_BLOCK_INDEX</name><operator pos:start="871:62" pos:end="871:62">+</operator><name pos:start="871:63" pos:end="871:72">chroma_idx</name></expr></argument>, <argument pos:start="871:75" pos:end="871:91"><expr pos:start="871:75" pos:end="871:91"><name pos:start="871:75" pos:end="871:91">chroma422_dc_scan</name></expr></argument>,

                                        <argument pos:start="873:41" pos:end="873:44"><expr pos:start="873:41" pos:end="873:44"><name pos:start="873:41" pos:end="873:44">NULL</name></expr></argument>, <argument pos:start="873:47" pos:end="873:47"><expr pos:start="873:47" pos:end="873:47"><literal type="number" pos:start="873:47" pos:end="873:47">8</literal></expr></argument>)</argument_list></call> <operator pos:start="873:50" pos:end="873:50">&lt;</operator> <literal type="number" pos:start="873:52" pos:end="873:52">0</literal></expr>)</condition> <block pos:start="873:55" pos:end="877:21">{<block_content pos:start="875:25" pos:end="875:34">

                        <return pos:start="875:25" pos:end="875:34">return <expr pos:start="875:32" pos:end="875:33"><operator pos:start="875:32" pos:end="875:32">-</operator><literal type="number" pos:start="875:33" pos:end="875:33">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt></block_content></block></for>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="883:13" pos:end="915:13"><if pos:start="883:13" pos:end="909:13">if<condition pos:start="883:15" pos:end="883:24">(<expr pos:start="883:16" pos:end="883:23"><name pos:start="883:16" pos:end="883:18">cbp</name><operator pos:start="883:19" pos:end="883:19">&amp;</operator><literal type="number" pos:start="883:20" pos:end="883:23">0x20</literal></expr>)</condition><block pos:start="883:25" pos:end="909:13">{<block_content pos:start="885:17" pos:end="907:17">

                <for pos:start="885:17" pos:end="907:17">for<control pos:start="885:20" pos:end="885:61">(<init pos:start="885:21" pos:end="885:33"><expr pos:start="885:21" pos:end="885:32"><name pos:start="885:21" pos:end="885:30">chroma_idx</name><operator pos:start="885:31" pos:end="885:31">=</operator><literal type="number" pos:start="885:32" pos:end="885:32">0</literal></expr>;</init> <condition pos:start="885:35" pos:end="885:47"><expr pos:start="885:35" pos:end="885:46"><name pos:start="885:35" pos:end="885:44">chroma_idx</name><operator pos:start="885:45" pos:end="885:45">&lt;</operator><literal type="number" pos:start="885:46" pos:end="885:46">2</literal></expr>;</condition> <incr pos:start="885:49" pos:end="885:60"><expr pos:start="885:49" pos:end="885:60"><name pos:start="885:49" pos:end="885:58">chroma_idx</name><operator pos:start="885:59" pos:end="885:60">++</operator></expr></incr>)</control><block pos:start="885:62" pos:end="907:17">{<block_content pos:start="887:21" pos:end="905:21">

                    <decl_stmt pos:start="887:21" pos:end="887:129"><decl pos:start="887:21" pos:end="887:128"><type pos:start="887:21" pos:end="887:36"><specifier pos:start="887:21" pos:end="887:25">const</specifier> <name pos:start="887:27" pos:end="887:34">uint32_t</name> <modifier pos:start="887:36" pos:end="887:36">*</modifier></type><name pos:start="887:37" pos:end="887:40">qmul</name> <init pos:start="887:42" pos:end="887:128">= <expr pos:start="887:44" pos:end="887:128"><name pos:start="887:44" pos:end="887:128"><name pos:start="887:44" pos:end="887:44">h</name><operator pos:start="887:45" pos:end="887:46">-&gt;</operator><name pos:start="887:47" pos:end="887:60">dequant4_coeff</name><index pos:start="887:61" pos:end="887:102">[<expr pos:start="887:62" pos:end="887:101"><name pos:start="887:62" pos:end="887:71">chroma_idx</name><operator pos:start="887:72" pos:end="887:72">+</operator><literal type="number" pos:start="887:73" pos:end="887:74">1</literal><operator pos:start="887:74" pos:end="887:74">+</operator><operator pos:start="887:75" pos:end="887:75">(</operator><ternary pos:start="887:76" pos:end="887:100"><condition pos:start="887:76" pos:end="887:96"><expr pos:start="887:76" pos:end="887:94"><call pos:start="887:76" pos:end="887:94"><name pos:start="887:76" pos:end="887:83">IS_INTRA</name><argument_list pos:start="887:84" pos:end="887:94">( <argument pos:start="887:86" pos:end="887:92"><expr pos:start="887:86" pos:end="887:92"><name pos:start="887:86" pos:end="887:92">mb_type</name></expr></argument> )</argument_list></call></expr> ?</condition><then pos:start="887:98" pos:end="887:98"> <expr pos:start="887:98" pos:end="887:98"><literal type="number" pos:start="887:98" pos:end="887:98">0</literal></expr></then><else pos:start="887:99" pos:end="887:100">:<expr pos:start="887:100" pos:end="887:100"><literal type="number" pos:start="887:100" pos:end="887:100">3</literal></expr></else></ternary><operator pos:start="887:101" pos:end="887:101">)</operator></expr>]</index><index pos:start="887:103" pos:end="887:128">[<expr pos:start="887:104" pos:end="887:127"><name pos:start="887:104" pos:end="887:127"><name pos:start="887:104" pos:end="887:104">h</name><operator pos:start="887:105" pos:end="887:106">-&gt;</operator><name pos:start="887:107" pos:end="887:115">chroma_qp</name><index pos:start="887:116" pos:end="887:127">[<expr pos:start="887:117" pos:end="887:126"><name pos:start="887:117" pos:end="887:126">chroma_idx</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="889:21" pos:end="889:83"><decl pos:start="889:21" pos:end="889:82"><type pos:start="889:21" pos:end="889:29"><name pos:start="889:21" pos:end="889:27">DCTELEM</name> <modifier pos:start="889:29" pos:end="889:29">*</modifier></type><name pos:start="889:30" pos:end="889:31">mb</name> <init pos:start="889:33" pos:end="889:82">= <expr pos:start="889:35" pos:end="889:82"><name pos:start="889:35" pos:end="889:39"><name pos:start="889:35" pos:end="889:35">h</name><operator pos:start="889:36" pos:end="889:37">-&gt;</operator><name pos:start="889:38" pos:end="889:39">mb</name></name> <operator pos:start="889:41" pos:end="889:41">+</operator> <operator pos:start="889:43" pos:end="889:43">(</operator><literal type="number" pos:start="889:44" pos:end="889:45">16</literal><operator pos:start="889:46" pos:end="889:46">*</operator><operator pos:start="889:47" pos:end="889:47">(</operator><literal type="number" pos:start="889:48" pos:end="889:51">16</literal> <operator pos:start="889:51" pos:end="889:51">+</operator> <literal type="number" pos:start="889:53" pos:end="889:54">16</literal><operator pos:start="889:55" pos:end="889:55">*</operator><name pos:start="889:56" pos:end="889:65">chroma_idx</name><operator pos:start="889:66" pos:end="889:66">)</operator> <operator pos:start="889:68" pos:end="889:69">&lt;&lt;</operator> <name pos:start="889:71" pos:end="889:81">pixel_shift</name><operator pos:start="889:82" pos:end="889:82">)</operator></expr></init></decl>;</decl_stmt>

                    <for pos:start="891:21" pos:end="905:21">for <control pos:start="891:25" pos:end="891:52">(<init pos:start="891:26" pos:end="891:34"><expr pos:start="891:26" pos:end="891:33"><name pos:start="891:26" pos:end="891:29">i8x8</name> <operator pos:start="891:31" pos:end="891:31">=</operator> <literal type="number" pos:start="891:33" pos:end="891:33">0</literal></expr>;</init> <condition pos:start="891:36" pos:end="891:44"><expr pos:start="891:36" pos:end="891:43"><name pos:start="891:36" pos:end="891:39">i8x8</name> <operator pos:start="891:41" pos:end="891:41">&lt;</operator> <literal type="number" pos:start="891:43" pos:end="891:43">2</literal></expr>;</condition> <incr pos:start="891:46" pos:end="891:51"><expr pos:start="891:46" pos:end="891:51"><name pos:start="891:46" pos:end="891:49">i8x8</name><operator pos:start="891:50" pos:end="891:51">++</operator></expr></incr>)</control> <block pos:start="891:54" pos:end="905:21">{<block_content pos:start="893:25" pos:end="903:25">

                        <for pos:start="893:25" pos:end="903:25">for <control pos:start="893:29" pos:end="893:56">(<init pos:start="893:30" pos:end="893:38"><expr pos:start="893:30" pos:end="893:37"><name pos:start="893:30" pos:end="893:33">i4x4</name> <operator pos:start="893:35" pos:end="893:35">=</operator> <literal type="number" pos:start="893:37" pos:end="893:37">0</literal></expr>;</init> <condition pos:start="893:40" pos:end="893:48"><expr pos:start="893:40" pos:end="893:47"><name pos:start="893:40" pos:end="893:43">i4x4</name> <operator pos:start="893:45" pos:end="893:45">&lt;</operator> <literal type="number" pos:start="893:47" pos:end="893:47">4</literal></expr>;</condition> <incr pos:start="893:50" pos:end="893:55"><expr pos:start="893:50" pos:end="893:55"><name pos:start="893:50" pos:end="893:53">i4x4</name><operator pos:start="893:54" pos:end="893:55">++</operator></expr></incr>)</control> <block pos:start="893:58" pos:end="903:25">{<block_content pos:start="895:29" pos:end="901:52">

                            <decl_stmt pos:start="895:29" pos:end="895:81"><decl pos:start="895:29" pos:end="895:80"><type pos:start="895:29" pos:end="895:37"><specifier pos:start="895:29" pos:end="895:33">const</specifier> <name pos:start="895:35" pos:end="895:37">int</name></type> <name pos:start="895:39" pos:end="895:43">index</name> <init pos:start="895:45" pos:end="895:80">= <expr pos:start="895:47" pos:end="895:80"><literal type="number" pos:start="895:47" pos:end="895:50">16</literal> <operator pos:start="895:50" pos:end="895:50">+</operator> <literal type="number" pos:start="895:52" pos:end="895:53">16</literal><operator pos:start="895:54" pos:end="895:54">*</operator><name pos:start="895:55" pos:end="895:64">chroma_idx</name> <operator pos:start="895:66" pos:end="895:66">+</operator> <literal type="number" pos:start="895:68" pos:end="895:68">8</literal><operator pos:start="895:69" pos:end="895:69">*</operator><name pos:start="895:70" pos:end="895:73">i8x8</name> <operator pos:start="895:75" pos:end="895:75">+</operator> <name pos:start="895:77" pos:end="895:80">i4x4</name></expr></init></decl>;</decl_stmt>

                            <if_stmt pos:start="897:29" pos:end="899:42"><if pos:start="897:29" pos:end="899:42">if <condition pos:start="897:32" pos:end="897:90">(<expr pos:start="897:33" pos:end="897:89"><call pos:start="897:33" pos:end="897:85"><name pos:start="897:33" pos:end="897:47">decode_residual</name><argument_list pos:start="897:48" pos:end="897:85">(<argument pos:start="897:49" pos:end="897:49"><expr pos:start="897:49" pos:end="897:49"><name pos:start="897:49" pos:end="897:49">h</name></expr></argument>, <argument pos:start="897:52" pos:end="897:53"><expr pos:start="897:52" pos:end="897:53"><name pos:start="897:52" pos:end="897:53">gb</name></expr></argument>, <argument pos:start="897:56" pos:end="897:57"><expr pos:start="897:56" pos:end="897:57"><name pos:start="897:56" pos:end="897:57">mb</name></expr></argument>, <argument pos:start="897:60" pos:end="897:64"><expr pos:start="897:60" pos:end="897:64"><name pos:start="897:60" pos:end="897:64">index</name></expr></argument>, <argument pos:start="897:67" pos:end="897:74"><expr pos:start="897:67" pos:end="897:74"><name pos:start="897:67" pos:end="897:70">scan</name> <operator pos:start="897:72" pos:end="897:72">+</operator> <literal type="number" pos:start="897:74" pos:end="897:74">1</literal></expr></argument>, <argument pos:start="897:77" pos:end="897:80"><expr pos:start="897:77" pos:end="897:80"><name pos:start="897:77" pos:end="897:80">qmul</name></expr></argument>, <argument pos:start="897:83" pos:end="897:84"><expr pos:start="897:83" pos:end="897:84"><literal type="number" pos:start="897:83" pos:end="897:84">15</literal></expr></argument>)</argument_list></call> <operator pos:start="897:87" pos:end="897:87">&lt;</operator> <literal type="number" pos:start="897:89" pos:end="897:89">0</literal></expr>)</condition><block type="pseudo" pos:start="899:33" pos:end="899:42"><block_content pos:start="899:33" pos:end="899:42">

                                <return pos:start="899:33" pos:end="899:42">return <expr pos:start="899:40" pos:end="899:41"><operator pos:start="899:40" pos:end="899:40">-</operator><literal type="number" pos:start="899:41" pos:end="899:41">1</literal></expr>;</return></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="901:29" pos:end="901:52"><expr pos:start="901:29" pos:end="901:51"><name pos:start="901:29" pos:end="901:30">mb</name> <operator pos:start="901:32" pos:end="901:33">+=</operator> <literal type="number" pos:start="901:35" pos:end="901:36">16</literal> <operator pos:start="901:38" pos:end="901:39">&lt;&lt;</operator> <name pos:start="901:41" pos:end="901:51">pixel_shift</name></expr>;</expr_stmt>

                        </block_content>}</block></for>

                    </block_content>}</block></for>

                </block_content>}</block></for>

            </block_content>}</block></if><else pos:start="909:14" pos:end="915:13">else<block pos:start="909:18" pos:end="915:13">{<block_content pos:start="911:17" pos:end="913:83">

                <expr_stmt pos:start="911:17" pos:end="911:83"><expr pos:start="911:17" pos:end="911:82"><call pos:start="911:17" pos:end="911:82"><name pos:start="911:17" pos:end="911:30">fill_rectangle</name><argument_list pos:start="911:31" pos:end="911:82">(<argument pos:start="911:32" pos:end="911:66"><expr pos:start="911:32" pos:end="911:66"><operator pos:start="911:32" pos:end="911:32">&amp;</operator><name pos:start="911:33" pos:end="911:66"><name pos:start="911:33" pos:end="911:33">h</name><operator pos:start="911:34" pos:end="911:35">-&gt;</operator><name pos:start="911:36" pos:end="911:55">non_zero_count_cache</name><index pos:start="911:56" pos:end="911:66">[<expr pos:start="911:57" pos:end="911:65"><name pos:start="911:57" pos:end="911:65"><name pos:start="911:57" pos:end="911:61">scan8</name><index pos:start="911:62" pos:end="911:65">[<expr pos:start="911:63" pos:end="911:64"><literal type="number" pos:start="911:63" pos:end="911:64">16</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="911:69" pos:end="911:69"><expr pos:start="911:69" pos:end="911:69"><literal type="number" pos:start="911:69" pos:end="911:69">4</literal></expr></argument>, <argument pos:start="911:72" pos:end="911:72"><expr pos:start="911:72" pos:end="911:72"><literal type="number" pos:start="911:72" pos:end="911:72">4</literal></expr></argument>, <argument pos:start="911:75" pos:end="911:75"><expr pos:start="911:75" pos:end="911:75"><literal type="number" pos:start="911:75" pos:end="911:75">8</literal></expr></argument>, <argument pos:start="911:78" pos:end="911:78"><expr pos:start="911:78" pos:end="911:78"><literal type="number" pos:start="911:78" pos:end="911:78">0</literal></expr></argument>, <argument pos:start="911:81" pos:end="911:81"><expr pos:start="911:81" pos:end="911:81"><literal type="number" pos:start="911:81" pos:end="911:81">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="913:17" pos:end="913:83"><expr pos:start="913:17" pos:end="913:82"><call pos:start="913:17" pos:end="913:82"><name pos:start="913:17" pos:end="913:30">fill_rectangle</name><argument_list pos:start="913:31" pos:end="913:82">(<argument pos:start="913:32" pos:end="913:66"><expr pos:start="913:32" pos:end="913:66"><operator pos:start="913:32" pos:end="913:32">&amp;</operator><name pos:start="913:33" pos:end="913:66"><name pos:start="913:33" pos:end="913:33">h</name><operator pos:start="913:34" pos:end="913:35">-&gt;</operator><name pos:start="913:36" pos:end="913:55">non_zero_count_cache</name><index pos:start="913:56" pos:end="913:66">[<expr pos:start="913:57" pos:end="913:65"><name pos:start="913:57" pos:end="913:65"><name pos:start="913:57" pos:end="913:61">scan8</name><index pos:start="913:62" pos:end="913:65">[<expr pos:start="913:63" pos:end="913:64"><literal type="number" pos:start="913:63" pos:end="913:64">32</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="913:69" pos:end="913:69"><expr pos:start="913:69" pos:end="913:69"><literal type="number" pos:start="913:69" pos:end="913:69">4</literal></expr></argument>, <argument pos:start="913:72" pos:end="913:72"><expr pos:start="913:72" pos:end="913:72"><literal type="number" pos:start="913:72" pos:end="913:72">4</literal></expr></argument>, <argument pos:start="913:75" pos:end="913:75"><expr pos:start="913:75" pos:end="913:75"><literal type="number" pos:start="913:75" pos:end="913:75">8</literal></expr></argument>, <argument pos:start="913:78" pos:end="913:78"><expr pos:start="913:78" pos:end="913:78"><literal type="number" pos:start="913:78" pos:end="913:78">0</literal></expr></argument>, <argument pos:start="913:81" pos:end="913:81"><expr pos:start="913:81" pos:end="913:81"><literal type="number" pos:start="913:81" pos:end="913:81">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="917:11" pos:end="961:9">else <comment type="block" pos:start="917:16" pos:end="917:27">/* yuv420 */</comment> <block pos:start="917:29" pos:end="961:9">{<block_content pos:start="919:13" pos:end="959:13">

            <if_stmt pos:start="919:13" pos:end="929:13"><if pos:start="919:13" pos:end="929:13">if<condition pos:start="919:15" pos:end="919:24">(<expr pos:start="919:16" pos:end="919:23"><name pos:start="919:16" pos:end="919:18">cbp</name><operator pos:start="919:19" pos:end="919:19">&amp;</operator><literal type="number" pos:start="919:20" pos:end="919:23">0x30</literal></expr>)</condition><block pos:start="919:25" pos:end="929:13">{<block_content pos:start="921:17" pos:end="927:21">

                <for pos:start="921:17" pos:end="927:21">for<control pos:start="921:20" pos:end="921:61">(<init pos:start="921:21" pos:end="921:33"><expr pos:start="921:21" pos:end="921:32"><name pos:start="921:21" pos:end="921:30">chroma_idx</name><operator pos:start="921:31" pos:end="921:31">=</operator><literal type="number" pos:start="921:32" pos:end="921:32">0</literal></expr>;</init> <condition pos:start="921:35" pos:end="921:47"><expr pos:start="921:35" pos:end="921:46"><name pos:start="921:35" pos:end="921:44">chroma_idx</name><operator pos:start="921:45" pos:end="921:45">&lt;</operator><literal type="number" pos:start="921:46" pos:end="921:46">2</literal></expr>;</condition> <incr pos:start="921:49" pos:end="921:60"><expr pos:start="921:49" pos:end="921:60"><name pos:start="921:49" pos:end="921:58">chroma_idx</name><operator pos:start="921:59" pos:end="921:60">++</operator></expr></incr>)</control><block type="pseudo" pos:start="923:21" pos:end="927:21"><block_content pos:start="923:21" pos:end="927:21">

                    <if_stmt pos:start="923:21" pos:end="927:21"><if pos:start="923:21" pos:end="927:21">if<condition pos:start="923:23" pos:end="923:161">( <expr pos:start="923:25" pos:end="923:160"><call pos:start="923:25" pos:end="923:156"><name pos:start="923:25" pos:end="923:39">decode_residual</name><argument_list pos:start="923:40" pos:end="923:156">(<argument pos:start="923:41" pos:end="923:41"><expr pos:start="923:41" pos:end="923:41"><name pos:start="923:41" pos:end="923:41">h</name></expr></argument>, <argument pos:start="923:44" pos:end="923:45"><expr pos:start="923:44" pos:end="923:45"><name pos:start="923:44" pos:end="923:45">gb</name></expr></argument>, <argument pos:start="923:48" pos:end="923:96"><expr pos:start="923:48" pos:end="923:96"><name pos:start="923:48" pos:end="923:52"><name pos:start="923:48" pos:end="923:48">h</name><operator pos:start="923:49" pos:end="923:50">-&gt;</operator><name pos:start="923:51" pos:end="923:52">mb</name></name> <operator pos:start="923:54" pos:end="923:54">+</operator> <operator pos:start="923:56" pos:end="923:56">(</operator><operator pos:start="923:57" pos:end="923:57">(</operator><literal type="number" pos:start="923:58" pos:end="923:62">256</literal> <operator pos:start="923:62" pos:end="923:62">+</operator> <literal type="number" pos:start="923:64" pos:end="923:65">16</literal><operator pos:start="923:66" pos:end="923:66">*</operator><literal type="number" pos:start="923:67" pos:end="923:68">16</literal><operator pos:start="923:69" pos:end="923:69">*</operator><name pos:start="923:70" pos:end="923:79">chroma_idx</name><operator pos:start="923:80" pos:end="923:80">)</operator> <operator pos:start="923:82" pos:end="923:83">&lt;&lt;</operator> <name pos:start="923:85" pos:end="923:95">pixel_shift</name><operator pos:start="923:96" pos:end="923:96">)</operator></expr></argument>, <argument pos:start="923:99" pos:end="923:130"><expr pos:start="923:99" pos:end="923:130"><name pos:start="923:99" pos:end="923:119">CHROMA_DC_BLOCK_INDEX</name><operator pos:start="923:120" pos:end="923:120">+</operator><name pos:start="923:121" pos:end="923:130">chroma_idx</name></expr></argument>, <argument pos:start="923:133" pos:end="923:146"><expr pos:start="923:133" pos:end="923:146"><name pos:start="923:133" pos:end="923:146">chroma_dc_scan</name></expr></argument>, <argument pos:start="923:149" pos:end="923:152"><expr pos:start="923:149" pos:end="923:152"><name pos:start="923:149" pos:end="923:152">NULL</name></expr></argument>, <argument pos:start="923:155" pos:end="923:155"><expr pos:start="923:155" pos:end="923:155"><literal type="number" pos:start="923:155" pos:end="923:155">4</literal></expr></argument>)</argument_list></call> <operator pos:start="923:158" pos:end="923:158">&lt;</operator> <literal type="number" pos:start="923:160" pos:end="923:160">0</literal></expr>)</condition><block pos:start="923:162" pos:end="927:21">{<block_content pos:start="925:25" pos:end="925:34">

                        <return pos:start="925:25" pos:end="925:34">return <expr pos:start="925:32" pos:end="925:33"><operator pos:start="925:32" pos:end="925:32">-</operator><literal type="number" pos:start="925:33" pos:end="925:33">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt></block_content></block></for>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="933:13" pos:end="959:13"><if pos:start="933:13" pos:end="953:13">if<condition pos:start="933:15" pos:end="933:24">(<expr pos:start="933:16" pos:end="933:23"><name pos:start="933:16" pos:end="933:18">cbp</name><operator pos:start="933:19" pos:end="933:19">&amp;</operator><literal type="number" pos:start="933:20" pos:end="933:23">0x20</literal></expr>)</condition><block pos:start="933:25" pos:end="953:13">{<block_content pos:start="935:17" pos:end="951:17">

                <for pos:start="935:17" pos:end="951:17">for<control pos:start="935:20" pos:end="935:61">(<init pos:start="935:21" pos:end="935:33"><expr pos:start="935:21" pos:end="935:32"><name pos:start="935:21" pos:end="935:30">chroma_idx</name><operator pos:start="935:31" pos:end="935:31">=</operator><literal type="number" pos:start="935:32" pos:end="935:32">0</literal></expr>;</init> <condition pos:start="935:35" pos:end="935:47"><expr pos:start="935:35" pos:end="935:46"><name pos:start="935:35" pos:end="935:44">chroma_idx</name><operator pos:start="935:45" pos:end="935:45">&lt;</operator><literal type="number" pos:start="935:46" pos:end="935:46">2</literal></expr>;</condition> <incr pos:start="935:49" pos:end="935:60"><expr pos:start="935:49" pos:end="935:60"><name pos:start="935:49" pos:end="935:58">chroma_idx</name><operator pos:start="935:59" pos:end="935:60">++</operator></expr></incr>)</control><block pos:start="935:62" pos:end="951:17">{<block_content pos:start="937:21" pos:end="949:21">

                    <decl_stmt pos:start="937:21" pos:end="937:129"><decl pos:start="937:21" pos:end="937:128"><type pos:start="937:21" pos:end="937:36"><specifier pos:start="937:21" pos:end="937:25">const</specifier> <name pos:start="937:27" pos:end="937:34">uint32_t</name> <modifier pos:start="937:36" pos:end="937:36">*</modifier></type><name pos:start="937:37" pos:end="937:40">qmul</name> <init pos:start="937:42" pos:end="937:128">= <expr pos:start="937:44" pos:end="937:128"><name pos:start="937:44" pos:end="937:128"><name pos:start="937:44" pos:end="937:44">h</name><operator pos:start="937:45" pos:end="937:46">-&gt;</operator><name pos:start="937:47" pos:end="937:60">dequant4_coeff</name><index pos:start="937:61" pos:end="937:102">[<expr pos:start="937:62" pos:end="937:101"><name pos:start="937:62" pos:end="937:71">chroma_idx</name><operator pos:start="937:72" pos:end="937:72">+</operator><literal type="number" pos:start="937:73" pos:end="937:74">1</literal><operator pos:start="937:74" pos:end="937:74">+</operator><operator pos:start="937:75" pos:end="937:75">(</operator><ternary pos:start="937:76" pos:end="937:100"><condition pos:start="937:76" pos:end="937:96"><expr pos:start="937:76" pos:end="937:94"><call pos:start="937:76" pos:end="937:94"><name pos:start="937:76" pos:end="937:83">IS_INTRA</name><argument_list pos:start="937:84" pos:end="937:94">( <argument pos:start="937:86" pos:end="937:92"><expr pos:start="937:86" pos:end="937:92"><name pos:start="937:86" pos:end="937:92">mb_type</name></expr></argument> )</argument_list></call></expr> ?</condition><then pos:start="937:98" pos:end="937:98"> <expr pos:start="937:98" pos:end="937:98"><literal type="number" pos:start="937:98" pos:end="937:98">0</literal></expr></then><else pos:start="937:99" pos:end="937:100">:<expr pos:start="937:100" pos:end="937:100"><literal type="number" pos:start="937:100" pos:end="937:100">3</literal></expr></else></ternary><operator pos:start="937:101" pos:end="937:101">)</operator></expr>]</index><index pos:start="937:103" pos:end="937:128">[<expr pos:start="937:104" pos:end="937:127"><name pos:start="937:104" pos:end="937:127"><name pos:start="937:104" pos:end="937:104">h</name><operator pos:start="937:105" pos:end="937:106">-&gt;</operator><name pos:start="937:107" pos:end="937:115">chroma_qp</name><index pos:start="937:116" pos:end="937:127">[<expr pos:start="937:117" pos:end="937:126"><name pos:start="937:117" pos:end="937:126">chroma_idx</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <for pos:start="939:21" pos:end="949:21">for<control pos:start="939:24" pos:end="939:47">(<init pos:start="939:25" pos:end="939:31"><expr pos:start="939:25" pos:end="939:30"><name pos:start="939:25" pos:end="939:28">i4x4</name><operator pos:start="939:29" pos:end="939:29">=</operator><literal type="number" pos:start="939:30" pos:end="939:30">0</literal></expr>;</init> <condition pos:start="939:33" pos:end="939:39"><expr pos:start="939:33" pos:end="939:38"><name pos:start="939:33" pos:end="939:36">i4x4</name><operator pos:start="939:37" pos:end="939:37">&lt;</operator><literal type="number" pos:start="939:38" pos:end="939:38">4</literal></expr>;</condition> <incr pos:start="939:41" pos:end="939:46"><expr pos:start="939:41" pos:end="939:46"><name pos:start="939:41" pos:end="939:44">i4x4</name><operator pos:start="939:45" pos:end="939:46">++</operator></expr></incr>)</control><block pos:start="939:48" pos:end="949:21">{<block_content pos:start="941:25" pos:end="947:25">

                        <decl_stmt pos:start="941:25" pos:end="941:67"><decl pos:start="941:25" pos:end="941:66"><type pos:start="941:25" pos:end="941:33"><specifier pos:start="941:25" pos:end="941:29">const</specifier> <name pos:start="941:31" pos:end="941:33">int</name></type> <name pos:start="941:35" pos:end="941:39">index</name><init pos:start="941:40" pos:end="941:66">= <expr pos:start="941:42" pos:end="941:66"><literal type="number" pos:start="941:42" pos:end="941:45">16</literal> <operator pos:start="941:45" pos:end="941:45">+</operator> <literal type="number" pos:start="941:47" pos:end="941:48">16</literal><operator pos:start="941:49" pos:end="941:49">*</operator><name pos:start="941:50" pos:end="941:59">chroma_idx</name> <operator pos:start="941:61" pos:end="941:61">+</operator> <name pos:start="941:63" pos:end="941:66">i4x4</name></expr></init></decl>;</decl_stmt>

                        <if_stmt pos:start="943:25" pos:end="947:25"><if pos:start="943:25" pos:end="947:25">if<condition pos:start="943:27" pos:end="943:117">( <expr pos:start="943:29" pos:end="943:116"><call pos:start="943:29" pos:end="943:112"><name pos:start="943:29" pos:end="943:43">decode_residual</name><argument_list pos:start="943:44" pos:end="943:112">(<argument pos:start="943:45" pos:end="943:45"><expr pos:start="943:45" pos:end="943:45"><name pos:start="943:45" pos:end="943:45">h</name></expr></argument>, <argument pos:start="943:48" pos:end="943:49"><expr pos:start="943:48" pos:end="943:49"><name pos:start="943:48" pos:end="943:49">gb</name></expr></argument>, <argument pos:start="943:52" pos:end="943:84"><expr pos:start="943:52" pos:end="943:84"><name pos:start="943:52" pos:end="943:56"><name pos:start="943:52" pos:end="943:52">h</name><operator pos:start="943:53" pos:end="943:54">-&gt;</operator><name pos:start="943:55" pos:end="943:56">mb</name></name> <operator pos:start="943:58" pos:end="943:58">+</operator> <operator pos:start="943:60" pos:end="943:60">(</operator><literal type="number" pos:start="943:61" pos:end="943:62">16</literal><operator pos:start="943:63" pos:end="943:63">*</operator><name pos:start="943:64" pos:end="943:68">index</name> <operator pos:start="943:70" pos:end="943:71">&lt;&lt;</operator> <name pos:start="943:73" pos:end="943:83">pixel_shift</name><operator pos:start="943:84" pos:end="943:84">)</operator></expr></argument>, <argument pos:start="943:87" pos:end="943:91"><expr pos:start="943:87" pos:end="943:91"><name pos:start="943:87" pos:end="943:91">index</name></expr></argument>, <argument pos:start="943:94" pos:end="943:101"><expr pos:start="943:94" pos:end="943:101"><name pos:start="943:94" pos:end="943:97">scan</name> <operator pos:start="943:99" pos:end="943:99">+</operator> <literal type="number" pos:start="943:101" pos:end="943:101">1</literal></expr></argument>, <argument pos:start="943:104" pos:end="943:107"><expr pos:start="943:104" pos:end="943:107"><name pos:start="943:104" pos:end="943:107">qmul</name></expr></argument>, <argument pos:start="943:110" pos:end="943:111"><expr pos:start="943:110" pos:end="943:111"><literal type="number" pos:start="943:110" pos:end="943:111">15</literal></expr></argument>)</argument_list></call> <operator pos:start="943:114" pos:end="943:114">&lt;</operator> <literal type="number" pos:start="943:116" pos:end="943:116">0</literal></expr>)</condition><block pos:start="943:118" pos:end="947:25">{<block_content pos:start="945:29" pos:end="945:38">

                            <return pos:start="945:29" pos:end="945:38">return <expr pos:start="945:36" pos:end="945:37"><operator pos:start="945:36" pos:end="945:36">-</operator><literal type="number" pos:start="945:37" pos:end="945:37">1</literal></expr>;</return>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></for>

            </block_content>}</block></if><else pos:start="953:14" pos:end="959:13">else<block pos:start="953:18" pos:end="959:13">{<block_content pos:start="955:17" pos:end="957:83">

                <expr_stmt pos:start="955:17" pos:end="955:83"><expr pos:start="955:17" pos:end="955:82"><call pos:start="955:17" pos:end="955:82"><name pos:start="955:17" pos:end="955:30">fill_rectangle</name><argument_list pos:start="955:31" pos:end="955:82">(<argument pos:start="955:32" pos:end="955:66"><expr pos:start="955:32" pos:end="955:66"><operator pos:start="955:32" pos:end="955:32">&amp;</operator><name pos:start="955:33" pos:end="955:66"><name pos:start="955:33" pos:end="955:33">h</name><operator pos:start="955:34" pos:end="955:35">-&gt;</operator><name pos:start="955:36" pos:end="955:55">non_zero_count_cache</name><index pos:start="955:56" pos:end="955:66">[<expr pos:start="955:57" pos:end="955:65"><name pos:start="955:57" pos:end="955:65"><name pos:start="955:57" pos:end="955:61">scan8</name><index pos:start="955:62" pos:end="955:65">[<expr pos:start="955:63" pos:end="955:64"><literal type="number" pos:start="955:63" pos:end="955:64">16</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="955:69" pos:end="955:69"><expr pos:start="955:69" pos:end="955:69"><literal type="number" pos:start="955:69" pos:end="955:69">4</literal></expr></argument>, <argument pos:start="955:72" pos:end="955:72"><expr pos:start="955:72" pos:end="955:72"><literal type="number" pos:start="955:72" pos:end="955:72">4</literal></expr></argument>, <argument pos:start="955:75" pos:end="955:75"><expr pos:start="955:75" pos:end="955:75"><literal type="number" pos:start="955:75" pos:end="955:75">8</literal></expr></argument>, <argument pos:start="955:78" pos:end="955:78"><expr pos:start="955:78" pos:end="955:78"><literal type="number" pos:start="955:78" pos:end="955:78">0</literal></expr></argument>, <argument pos:start="955:81" pos:end="955:81"><expr pos:start="955:81" pos:end="955:81"><literal type="number" pos:start="955:81" pos:end="955:81">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="957:17" pos:end="957:83"><expr pos:start="957:17" pos:end="957:82"><call pos:start="957:17" pos:end="957:82"><name pos:start="957:17" pos:end="957:30">fill_rectangle</name><argument_list pos:start="957:31" pos:end="957:82">(<argument pos:start="957:32" pos:end="957:66"><expr pos:start="957:32" pos:end="957:66"><operator pos:start="957:32" pos:end="957:32">&amp;</operator><name pos:start="957:33" pos:end="957:66"><name pos:start="957:33" pos:end="957:33">h</name><operator pos:start="957:34" pos:end="957:35">-&gt;</operator><name pos:start="957:36" pos:end="957:55">non_zero_count_cache</name><index pos:start="957:56" pos:end="957:66">[<expr pos:start="957:57" pos:end="957:65"><name pos:start="957:57" pos:end="957:65"><name pos:start="957:57" pos:end="957:61">scan8</name><index pos:start="957:62" pos:end="957:65">[<expr pos:start="957:63" pos:end="957:64"><literal type="number" pos:start="957:63" pos:end="957:64">32</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="957:69" pos:end="957:69"><expr pos:start="957:69" pos:end="957:69"><literal type="number" pos:start="957:69" pos:end="957:69">4</literal></expr></argument>, <argument pos:start="957:72" pos:end="957:72"><expr pos:start="957:72" pos:end="957:72"><literal type="number" pos:start="957:72" pos:end="957:72">4</literal></expr></argument>, <argument pos:start="957:75" pos:end="957:75"><expr pos:start="957:75" pos:end="957:75"><literal type="number" pos:start="957:75" pos:end="957:75">8</literal></expr></argument>, <argument pos:start="957:78" pos:end="957:78"><expr pos:start="957:78" pos:end="957:78"><literal type="number" pos:start="957:78" pos:end="957:78">0</literal></expr></argument>, <argument pos:start="957:81" pos:end="957:81"><expr pos:start="957:81" pos:end="957:81"><literal type="number" pos:start="957:81" pos:end="957:81">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if><else pos:start="963:6" pos:end="971:5">else<block pos:start="963:10" pos:end="971:5">{<block_content pos:start="965:9" pos:end="969:75">

        <expr_stmt pos:start="965:9" pos:end="965:75"><expr pos:start="965:9" pos:end="965:74"><call pos:start="965:9" pos:end="965:74"><name pos:start="965:9" pos:end="965:22">fill_rectangle</name><argument_list pos:start="965:23" pos:end="965:74">(<argument pos:start="965:24" pos:end="965:58"><expr pos:start="965:24" pos:end="965:58"><operator pos:start="965:24" pos:end="965:24">&amp;</operator><name pos:start="965:25" pos:end="965:58"><name pos:start="965:25" pos:end="965:25">h</name><operator pos:start="965:26" pos:end="965:27">-&gt;</operator><name pos:start="965:28" pos:end="965:47">non_zero_count_cache</name><index pos:start="965:48" pos:end="965:58">[<expr pos:start="965:49" pos:end="965:57"><name pos:start="965:49" pos:end="965:57"><name pos:start="965:49" pos:end="965:53">scan8</name><index pos:start="965:54" pos:end="965:57">[ <expr pos:start="965:56" pos:end="965:56"><literal type="number" pos:start="965:56" pos:end="965:56">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="965:61" pos:end="965:61"><expr pos:start="965:61" pos:end="965:61"><literal type="number" pos:start="965:61" pos:end="965:61">4</literal></expr></argument>, <argument pos:start="965:64" pos:end="965:64"><expr pos:start="965:64" pos:end="965:64"><literal type="number" pos:start="965:64" pos:end="965:64">4</literal></expr></argument>, <argument pos:start="965:67" pos:end="965:67"><expr pos:start="965:67" pos:end="965:67"><literal type="number" pos:start="965:67" pos:end="965:67">8</literal></expr></argument>, <argument pos:start="965:70" pos:end="965:70"><expr pos:start="965:70" pos:end="965:70"><literal type="number" pos:start="965:70" pos:end="965:70">0</literal></expr></argument>, <argument pos:start="965:73" pos:end="965:73"><expr pos:start="965:73" pos:end="965:73"><literal type="number" pos:start="965:73" pos:end="965:73">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="967:9" pos:end="967:75"><expr pos:start="967:9" pos:end="967:74"><call pos:start="967:9" pos:end="967:74"><name pos:start="967:9" pos:end="967:22">fill_rectangle</name><argument_list pos:start="967:23" pos:end="967:74">(<argument pos:start="967:24" pos:end="967:58"><expr pos:start="967:24" pos:end="967:58"><operator pos:start="967:24" pos:end="967:24">&amp;</operator><name pos:start="967:25" pos:end="967:58"><name pos:start="967:25" pos:end="967:25">h</name><operator pos:start="967:26" pos:end="967:27">-&gt;</operator><name pos:start="967:28" pos:end="967:47">non_zero_count_cache</name><index pos:start="967:48" pos:end="967:58">[<expr pos:start="967:49" pos:end="967:57"><name pos:start="967:49" pos:end="967:57"><name pos:start="967:49" pos:end="967:53">scan8</name><index pos:start="967:54" pos:end="967:57">[<expr pos:start="967:55" pos:end="967:56"><literal type="number" pos:start="967:55" pos:end="967:56">16</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="967:61" pos:end="967:61"><expr pos:start="967:61" pos:end="967:61"><literal type="number" pos:start="967:61" pos:end="967:61">4</literal></expr></argument>, <argument pos:start="967:64" pos:end="967:64"><expr pos:start="967:64" pos:end="967:64"><literal type="number" pos:start="967:64" pos:end="967:64">4</literal></expr></argument>, <argument pos:start="967:67" pos:end="967:67"><expr pos:start="967:67" pos:end="967:67"><literal type="number" pos:start="967:67" pos:end="967:67">8</literal></expr></argument>, <argument pos:start="967:70" pos:end="967:70"><expr pos:start="967:70" pos:end="967:70"><literal type="number" pos:start="967:70" pos:end="967:70">0</literal></expr></argument>, <argument pos:start="967:73" pos:end="967:73"><expr pos:start="967:73" pos:end="967:73"><literal type="number" pos:start="967:73" pos:end="967:73">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="969:9" pos:end="969:75"><expr pos:start="969:9" pos:end="969:74"><call pos:start="969:9" pos:end="969:74"><name pos:start="969:9" pos:end="969:22">fill_rectangle</name><argument_list pos:start="969:23" pos:end="969:74">(<argument pos:start="969:24" pos:end="969:58"><expr pos:start="969:24" pos:end="969:58"><operator pos:start="969:24" pos:end="969:24">&amp;</operator><name pos:start="969:25" pos:end="969:58"><name pos:start="969:25" pos:end="969:25">h</name><operator pos:start="969:26" pos:end="969:27">-&gt;</operator><name pos:start="969:28" pos:end="969:47">non_zero_count_cache</name><index pos:start="969:48" pos:end="969:58">[<expr pos:start="969:49" pos:end="969:57"><name pos:start="969:49" pos:end="969:57"><name pos:start="969:49" pos:end="969:53">scan8</name><index pos:start="969:54" pos:end="969:57">[<expr pos:start="969:55" pos:end="969:56"><literal type="number" pos:start="969:55" pos:end="969:56">32</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="969:61" pos:end="969:61"><expr pos:start="969:61" pos:end="969:61"><literal type="number" pos:start="969:61" pos:end="969:61">4</literal></expr></argument>, <argument pos:start="969:64" pos:end="969:64"><expr pos:start="969:64" pos:end="969:64"><literal type="number" pos:start="969:64" pos:end="969:64">4</literal></expr></argument>, <argument pos:start="969:67" pos:end="969:67"><expr pos:start="969:67" pos:end="969:67"><literal type="number" pos:start="969:67" pos:end="969:67">8</literal></expr></argument>, <argument pos:start="969:70" pos:end="969:70"><expr pos:start="969:70" pos:end="969:70"><literal type="number" pos:start="969:70" pos:end="969:70">0</literal></expr></argument>, <argument pos:start="969:73" pos:end="969:73"><expr pos:start="969:73" pos:end="969:73"><literal type="number" pos:start="969:73" pos:end="969:73">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="973:5" pos:end="973:57"><expr pos:start="973:5" pos:end="973:56"><name pos:start="973:5" pos:end="973:44"><name pos:start="973:5" pos:end="973:5">s</name><operator pos:start="973:6" pos:end="973:7">-&gt;</operator><name pos:start="973:8" pos:end="973:22">current_picture</name><operator pos:start="973:23" pos:end="973:23">.</operator><name pos:start="973:24" pos:end="973:24">f</name><operator pos:start="973:25" pos:end="973:25">.</operator><name pos:start="973:26" pos:end="973:37">qscale_table</name><index pos:start="973:38" pos:end="973:44">[<expr pos:start="973:39" pos:end="973:43"><name pos:start="973:39" pos:end="973:43">mb_xy</name></expr>]</index></name> <operator pos:start="973:46" pos:end="973:46">=</operator> <name pos:start="973:48" pos:end="973:56"><name pos:start="973:48" pos:end="973:48">s</name><operator pos:start="973:49" pos:end="973:50">-&gt;</operator><name pos:start="973:51" pos:end="973:56">qscale</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="975:5" pos:end="975:33"><expr pos:start="975:5" pos:end="975:32"><call pos:start="975:5" pos:end="975:32"><name pos:start="975:5" pos:end="975:29">write_back_non_zero_count</name><argument_list pos:start="975:30" pos:end="975:32">(<argument pos:start="975:31" pos:end="975:31"><expr pos:start="975:31" pos:end="975:31"><name pos:start="975:31" pos:end="975:31">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="979:5" pos:end="985:5"><if pos:start="979:5" pos:end="985:5">if<condition pos:start="979:7" pos:end="979:16">(<expr pos:start="979:8" pos:end="979:15"><name pos:start="979:8" pos:end="979:15">MB_MBAFF</name></expr>)</condition><block pos:start="979:17" pos:end="985:5">{<block_content pos:start="981:9" pos:end="983:30">

        <expr_stmt pos:start="981:9" pos:end="981:30"><expr pos:start="981:9" pos:end="981:29"><name pos:start="981:9" pos:end="981:23"><name pos:start="981:9" pos:end="981:9">h</name><operator pos:start="981:10" pos:end="981:11">-&gt;</operator><name pos:start="981:12" pos:end="981:20">ref_count</name><index pos:start="981:21" pos:end="981:23">[<expr pos:start="981:22" pos:end="981:22"><literal type="number" pos:start="981:22" pos:end="981:22">0</literal></expr>]</index></name> <operator pos:start="981:25" pos:end="981:27">&gt;&gt;=</operator> <literal type="number" pos:start="981:29" pos:end="981:29">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="983:9" pos:end="983:30"><expr pos:start="983:9" pos:end="983:29"><name pos:start="983:9" pos:end="983:23"><name pos:start="983:9" pos:end="983:9">h</name><operator pos:start="983:10" pos:end="983:11">-&gt;</operator><name pos:start="983:12" pos:end="983:20">ref_count</name><index pos:start="983:21" pos:end="983:23">[<expr pos:start="983:22" pos:end="983:22"><literal type="number" pos:start="983:22" pos:end="983:22">1</literal></expr>]</index></name> <operator pos:start="983:25" pos:end="983:27">&gt;&gt;=</operator> <literal type="number" pos:start="983:29" pos:end="983:29">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="989:5" pos:end="989:13">return <expr pos:start="989:12" pos:end="989:12"><literal type="number" pos:start="989:12" pos:end="989:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
