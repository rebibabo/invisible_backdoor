<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22243.c" pos:tabs="8"><function pos:start="1:1" pos:end="263:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">versatile_init</name><parameter_list pos:start="1:27" pos:end="9:34">(<parameter pos:start="1:28" pos:end="1:46"><decl pos:start="1:28" pos:end="1:46"><type pos:start="1:28" pos:end="1:46"><name pos:start="1:28" pos:end="1:37">ram_addr_t</name></type> <name pos:start="1:39" pos:end="1:46">ram_size</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:44"><decl pos:start="3:22" pos:end="3:44"><type pos:start="3:22" pos:end="3:44"><specifier pos:start="3:22" pos:end="3:26">const</specifier> <name pos:start="3:28" pos:end="3:31">char</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:44">boot_device</name></decl></parameter>,

                     <parameter pos:start="5:22" pos:end="5:48"><decl pos:start="5:22" pos:end="5:48"><type pos:start="5:22" pos:end="5:48"><specifier pos:start="5:22" pos:end="5:26">const</specifier> <name pos:start="5:28" pos:end="5:31">char</name> <modifier pos:start="5:33" pos:end="5:33">*</modifier></type><name pos:start="5:34" pos:end="5:48">kernel_filename</name></decl></parameter>, <parameter pos:start="5:51" pos:end="5:76"><decl pos:start="5:51" pos:end="5:76"><type pos:start="5:51" pos:end="5:76"><specifier pos:start="5:51" pos:end="5:55">const</specifier> <name pos:start="5:57" pos:end="5:60">char</name> <modifier pos:start="5:62" pos:end="5:62">*</modifier></type><name pos:start="5:63" pos:end="5:76">kernel_cmdline</name></decl></parameter>,

                     <parameter pos:start="7:22" pos:end="7:48"><decl pos:start="7:22" pos:end="7:48"><type pos:start="7:22" pos:end="7:48"><specifier pos:start="7:22" pos:end="7:26">const</specifier> <name pos:start="7:28" pos:end="7:31">char</name> <modifier pos:start="7:33" pos:end="7:33">*</modifier></type><name pos:start="7:34" pos:end="7:48">initrd_filename</name></decl></parameter>, <parameter pos:start="7:51" pos:end="7:71"><decl pos:start="7:51" pos:end="7:71"><type pos:start="7:51" pos:end="7:71"><specifier pos:start="7:51" pos:end="7:55">const</specifier> <name pos:start="7:57" pos:end="7:60">char</name> <modifier pos:start="7:62" pos:end="7:62">*</modifier></type><name pos:start="7:63" pos:end="7:71">cpu_model</name></decl></parameter>,

                     <parameter pos:start="9:22" pos:end="9:33"><decl pos:start="9:22" pos:end="9:33"><type pos:start="9:22" pos:end="9:33"><name pos:start="9:22" pos:end="9:24">int</name></type> <name pos:start="9:26" pos:end="9:33">board_id</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="263:1">{<block_content pos:start="13:5" pos:end="261:43">

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">CPUState</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:26"><decl pos:start="15:5" pos:end="15:25"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:14">ram_addr_t</name></type> <name pos:start="15:16" pos:end="15:25">ram_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:12">qemu_irq</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:21">cpu_pic</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">qemu_irq</name></type> <name pos:start="19:14" pos:end="19:20"><name pos:start="19:14" pos:end="19:16">pic</name><index pos:start="19:17" pos:end="19:20">[<expr pos:start="19:18" pos:end="19:19"><literal type="number" pos:start="19:18" pos:end="19:19">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:21"><decl pos:start="21:5" pos:end="21:20"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">qemu_irq</name></type> <name pos:start="21:14" pos:end="21:20"><name pos:start="21:14" pos:end="21:16">sic</name><index pos:start="21:17" pos:end="21:20">[<expr pos:start="21:18" pos:end="21:19"><literal type="number" pos:start="21:18" pos:end="21:19">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:21"><decl pos:start="23:5" pos:end="23:20"><type pos:start="23:5" pos:end="23:17"><name pos:start="23:5" pos:end="23:15">DeviceState</name> <modifier pos:start="23:17" pos:end="23:17">*</modifier></type><name pos:start="23:18" pos:end="23:20">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:20"><decl pos:start="25:5" pos:end="25:19"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:10">PCIBus</name> <modifier pos:start="25:12" pos:end="25:12">*</modifier></type><name pos:start="25:13" pos:end="25:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:16"><decl pos:start="27:5" pos:end="27:15"><type pos:start="27:5" pos:end="27:13"><name pos:start="27:5" pos:end="27:11">NICInfo</name> <modifier pos:start="27:13" pos:end="27:13">*</modifier></type><name pos:start="27:14" pos:end="27:15">nd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:10"><decl pos:start="29:5" pos:end="29:9"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:9">n</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:21"><decl pos:start="31:5" pos:end="31:20"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:16">done_smc</name> <init pos:start="31:18" pos:end="31:20">= <expr pos:start="31:20" pos:end="31:20"><literal type="number" pos:start="31:20" pos:end="31:20">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="35:5" pos:end="37:29"><if pos:start="35:5" pos:end="37:29">if <condition pos:start="35:8" pos:end="35:19">(<expr pos:start="35:9" pos:end="35:18"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:18">cpu_model</name></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:29"><block_content pos:start="37:9" pos:end="37:29">

        <expr_stmt pos:start="37:9" pos:end="37:29"><expr pos:start="37:9" pos:end="37:28"><name pos:start="37:9" pos:end="37:17">cpu_model</name> <operator pos:start="37:19" pos:end="37:19">=</operator> <literal type="string" pos:start="37:21" pos:end="37:28">"arm926"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:30"><expr pos:start="39:5" pos:end="39:29"><name pos:start="39:5" pos:end="39:7">env</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <call pos:start="39:11" pos:end="39:29"><name pos:start="39:11" pos:end="39:18">cpu_init</name><argument_list pos:start="39:19" pos:end="39:29">(<argument pos:start="39:20" pos:end="39:28"><expr pos:start="39:20" pos:end="39:28"><name pos:start="39:20" pos:end="39:28">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:13">(<expr pos:start="41:9" pos:end="41:12"><operator pos:start="41:9" pos:end="41:9">!</operator><name pos:start="41:10" pos:end="41:12">env</name></expr>)</condition> <block pos:start="41:15" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:16">

        <expr_stmt pos:start="43:9" pos:end="43:59"><expr pos:start="43:9" pos:end="43:58"><call pos:start="43:9" pos:end="43:58"><name pos:start="43:9" pos:end="43:15">fprintf</name><argument_list pos:start="43:16" pos:end="43:58">(<argument pos:start="43:17" pos:end="43:22"><expr pos:start="43:17" pos:end="43:22"><name pos:start="43:17" pos:end="43:22">stderr</name></expr></argument>, <argument pos:start="43:25" pos:end="43:57"><expr pos:start="43:25" pos:end="43:57"><literal type="string" pos:start="43:25" pos:end="43:57">"Unable to find CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:16"><expr pos:start="45:9" pos:end="45:15"><call pos:start="45:9" pos:end="45:15"><name pos:start="45:9" pos:end="45:12">exit</name><argument_list pos:start="45:13" pos:end="45:15">(<argument pos:start="45:14" pos:end="45:14"><expr pos:start="45:14" pos:end="45:14"><literal type="number" pos:start="45:14" pos:end="45:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:65"><expr pos:start="49:5" pos:end="49:64"><name pos:start="49:5" pos:end="49:14">ram_offset</name> <operator pos:start="49:16" pos:end="49:16">=</operator> <call pos:start="49:18" pos:end="49:64"><name pos:start="49:18" pos:end="49:31">qemu_ram_alloc</name><argument_list pos:start="49:32" pos:end="49:64">(<argument pos:start="49:33" pos:end="49:36"><expr pos:start="49:33" pos:end="49:36"><name pos:start="49:33" pos:end="49:36">NULL</name></expr></argument>, <argument pos:start="49:39" pos:end="49:53"><expr pos:start="49:39" pos:end="49:53"><literal type="string" pos:start="49:39" pos:end="49:53">"versatile.ram"</literal></expr></argument>, <argument pos:start="49:56" pos:end="49:63"><expr pos:start="49:56" pos:end="49:63"><name pos:start="49:56" pos:end="49:63">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="51:5" pos:end="51:63">/* ??? RAM should repeat to fill physical memory space.  */</comment>

    <comment type="block" pos:start="53:5" pos:end="53:33">/* SDRAM at address zero.  */</comment>

    <expr_stmt pos:start="55:5" pos:end="55:71"><expr pos:start="55:5" pos:end="55:70"><call pos:start="55:5" pos:end="55:70"><name pos:start="55:5" pos:end="55:32">cpu_register_physical_memory</name><argument_list pos:start="55:33" pos:end="55:70">(<argument pos:start="55:34" pos:end="55:34"><expr pos:start="55:34" pos:end="55:34"><literal type="number" pos:start="55:34" pos:end="55:34">0</literal></expr></argument>, <argument pos:start="55:37" pos:end="55:44"><expr pos:start="55:37" pos:end="55:44"><name pos:start="55:37" pos:end="55:44">ram_size</name></expr></argument>, <argument pos:start="55:47" pos:end="55:69"><expr pos:start="55:47" pos:end="55:69"><name pos:start="55:47" pos:end="55:56">ram_offset</name> <operator pos:start="55:58" pos:end="55:58">|</operator> <name pos:start="55:60" pos:end="55:69">IO_MEM_RAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:56"><expr pos:start="59:5" pos:end="59:55"><call pos:start="59:5" pos:end="59:55"><name pos:start="59:5" pos:end="59:19">arm_sysctl_init</name><argument_list pos:start="59:20" pos:end="59:55">(<argument pos:start="59:21" pos:end="59:30"><expr pos:start="59:21" pos:end="59:30"><literal type="number" pos:start="59:21" pos:end="59:30">0x10000000</literal></expr></argument>, <argument pos:start="59:33" pos:end="59:42"><expr pos:start="59:33" pos:end="59:42"><literal type="number" pos:start="59:33" pos:end="59:42">0x41007004</literal></expr></argument>, <argument pos:start="59:45" pos:end="59:54"><expr pos:start="59:45" pos:end="59:54"><literal type="number" pos:start="59:45" pos:end="59:54">0x02000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:36"><expr pos:start="61:5" pos:end="61:35"><name pos:start="61:5" pos:end="61:11">cpu_pic</name> <operator pos:start="61:13" pos:end="61:13">=</operator> <call pos:start="61:15" pos:end="61:35"><name pos:start="61:15" pos:end="61:30">arm_pic_init_cpu</name><argument_list pos:start="61:31" pos:end="61:35">(<argument pos:start="61:32" pos:end="61:34"><expr pos:start="61:32" pos:end="61:34"><name pos:start="61:32" pos:end="61:34">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="65:62"><expr pos:start="63:5" pos:end="65:61"><name pos:start="63:5" pos:end="63:7">dev</name> <operator pos:start="63:9" pos:end="63:9">=</operator> <call pos:start="63:11" pos:end="65:61"><name pos:start="63:11" pos:end="63:31">sysbus_create_varargs</name><argument_list pos:start="63:32" pos:end="65:61">(<argument pos:start="63:33" pos:end="63:39"><expr pos:start="63:33" pos:end="63:39"><literal type="string" pos:start="63:33" pos:end="63:39">"pl190"</literal></expr></argument>, <argument pos:start="63:42" pos:end="63:51"><expr pos:start="63:42" pos:end="63:51"><literal type="number" pos:start="63:42" pos:end="63:51">0x10140000</literal></expr></argument>,

                                <argument pos:start="65:33" pos:end="65:42"><expr pos:start="65:33" pos:end="65:42"><name pos:start="65:33" pos:end="65:42"><name pos:start="65:33" pos:end="65:39">cpu_pic</name><index pos:start="65:40" pos:end="65:42">[<expr pos:start="65:41" pos:end="65:41"><literal type="number" pos:start="65:41" pos:end="65:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="65:45" pos:end="65:54"><expr pos:start="65:45" pos:end="65:54"><name pos:start="65:45" pos:end="65:54"><name pos:start="65:45" pos:end="65:51">cpu_pic</name><index pos:start="65:52" pos:end="65:54">[<expr pos:start="65:53" pos:end="65:53"><literal type="number" pos:start="65:53" pos:end="65:53">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="65:57" pos:end="65:60"><expr pos:start="65:57" pos:end="65:60"><name pos:start="65:57" pos:end="65:60">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="67:5" pos:end="71:5">for <control pos:start="67:9" pos:end="67:28">(<init pos:start="67:10" pos:end="67:15"><expr pos:start="67:10" pos:end="67:14"><name pos:start="67:10" pos:end="67:10">n</name> <operator pos:start="67:12" pos:end="67:12">=</operator> <literal type="number" pos:start="67:14" pos:end="67:14">0</literal></expr>;</init> <condition pos:start="67:17" pos:end="67:23"><expr pos:start="67:17" pos:end="67:22"><name pos:start="67:17" pos:end="67:17">n</name> <operator pos:start="67:19" pos:end="67:19">&lt;</operator> <literal type="number" pos:start="67:21" pos:end="67:22">32</literal></expr>;</condition> <incr pos:start="67:25" pos:end="67:27"><expr pos:start="67:25" pos:end="67:27"><name pos:start="67:25" pos:end="67:25">n</name><operator pos:start="67:26" pos:end="67:27">++</operator></expr></incr>)</control> <block pos:start="67:30" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:42">

        <expr_stmt pos:start="69:9" pos:end="69:42"><expr pos:start="69:9" pos:end="69:41"><name pos:start="69:9" pos:end="69:14"><name pos:start="69:9" pos:end="69:11">pic</name><index pos:start="69:12" pos:end="69:14">[<expr pos:start="69:13" pos:end="69:13"><name pos:start="69:13" pos:end="69:13">n</name></expr>]</index></name> <operator pos:start="69:16" pos:end="69:16">=</operator> <call pos:start="69:18" pos:end="69:41"><name pos:start="69:18" pos:end="69:33">qdev_get_gpio_in</name><argument_list pos:start="69:34" pos:end="69:41">(<argument pos:start="69:35" pos:end="69:37"><expr pos:start="69:35" pos:end="69:37"><name pos:start="69:35" pos:end="69:37">dev</name></expr></argument>, <argument pos:start="69:40" pos:end="69:40"><expr pos:start="69:40" pos:end="69:40"><name pos:start="69:40" pos:end="69:40">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="73:5" pos:end="73:68"><expr pos:start="73:5" pos:end="73:67"><name pos:start="73:5" pos:end="73:7">dev</name> <operator pos:start="73:9" pos:end="73:9">=</operator> <call pos:start="73:11" pos:end="73:67"><name pos:start="73:11" pos:end="73:30">sysbus_create_simple</name><argument_list pos:start="73:31" pos:end="73:67">(<argument pos:start="73:32" pos:end="73:48"><expr pos:start="73:32" pos:end="73:48"><literal type="string" pos:start="73:32" pos:end="73:48">"versatilepb_sic"</literal></expr></argument>, <argument pos:start="73:51" pos:end="73:60"><expr pos:start="73:51" pos:end="73:60"><literal type="number" pos:start="73:51" pos:end="73:60">0x10003000</literal></expr></argument>, <argument pos:start="73:63" pos:end="73:66"><expr pos:start="73:63" pos:end="73:66"><name pos:start="73:63" pos:end="73:66">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="75:5" pos:end="81:5">for <control pos:start="75:9" pos:end="75:28">(<init pos:start="75:10" pos:end="75:15"><expr pos:start="75:10" pos:end="75:14"><name pos:start="75:10" pos:end="75:10">n</name> <operator pos:start="75:12" pos:end="75:12">=</operator> <literal type="number" pos:start="75:14" pos:end="75:14">0</literal></expr>;</init> <condition pos:start="75:17" pos:end="75:23"><expr pos:start="75:17" pos:end="75:22"><name pos:start="75:17" pos:end="75:17">n</name> <operator pos:start="75:19" pos:end="75:19">&lt;</operator> <literal type="number" pos:start="75:21" pos:end="75:22">32</literal></expr>;</condition> <incr pos:start="75:25" pos:end="75:27"><expr pos:start="75:25" pos:end="75:27"><name pos:start="75:25" pos:end="75:25">n</name><operator pos:start="75:26" pos:end="75:27">++</operator></expr></incr>)</control> <block pos:start="75:30" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:42">

        <expr_stmt pos:start="77:9" pos:end="77:61"><expr pos:start="77:9" pos:end="77:60"><call pos:start="77:9" pos:end="77:60"><name pos:start="77:9" pos:end="77:26">sysbus_connect_irq</name><argument_list pos:start="77:27" pos:end="77:60">(<argument pos:start="77:28" pos:end="77:48"><expr pos:start="77:28" pos:end="77:48"><call pos:start="77:28" pos:end="77:48"><name pos:start="77:28" pos:end="77:43">sysbus_from_qdev</name><argument_list pos:start="77:44" pos:end="77:48">(<argument pos:start="77:45" pos:end="77:47"><expr pos:start="77:45" pos:end="77:47"><name pos:start="77:45" pos:end="77:47">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="77:51" pos:end="77:51"><expr pos:start="77:51" pos:end="77:51"><name pos:start="77:51" pos:end="77:51">n</name></expr></argument>, <argument pos:start="77:54" pos:end="77:59"><expr pos:start="77:54" pos:end="77:59"><name pos:start="77:54" pos:end="77:59"><name pos:start="77:54" pos:end="77:56">pic</name><index pos:start="77:57" pos:end="77:59">[<expr pos:start="77:58" pos:end="77:58"><name pos:start="77:58" pos:end="77:58">n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:42"><expr pos:start="79:9" pos:end="79:41"><name pos:start="79:9" pos:end="79:14"><name pos:start="79:9" pos:end="79:11">sic</name><index pos:start="79:12" pos:end="79:14">[<expr pos:start="79:13" pos:end="79:13"><name pos:start="79:13" pos:end="79:13">n</name></expr>]</index></name> <operator pos:start="79:16" pos:end="79:16">=</operator> <call pos:start="79:18" pos:end="79:41"><name pos:start="79:18" pos:end="79:33">qdev_get_gpio_in</name><argument_list pos:start="79:34" pos:end="79:41">(<argument pos:start="79:35" pos:end="79:37"><expr pos:start="79:35" pos:end="79:37"><name pos:start="79:35" pos:end="79:37">dev</name></expr></argument>, <argument pos:start="79:40" pos:end="79:40"><expr pos:start="79:40" pos:end="79:40"><name pos:start="79:40" pos:end="79:40">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="85:5" pos:end="85:63"><expr pos:start="85:5" pos:end="85:62"><call pos:start="85:5" pos:end="85:62"><name pos:start="85:5" pos:end="85:24">sysbus_create_simple</name><argument_list pos:start="85:25" pos:end="85:62">(<argument pos:start="85:26" pos:end="85:41"><expr pos:start="85:26" pos:end="85:41"><literal type="string" pos:start="85:26" pos:end="85:41">"pl050_keyboard"</literal></expr></argument>, <argument pos:start="85:44" pos:end="85:53"><expr pos:start="85:44" pos:end="85:53"><literal type="number" pos:start="85:44" pos:end="85:53">0x10006000</literal></expr></argument>, <argument pos:start="85:56" pos:end="85:61"><expr pos:start="85:56" pos:end="85:61"><name pos:start="85:56" pos:end="85:61"><name pos:start="85:56" pos:end="85:58">sic</name><index pos:start="85:59" pos:end="85:61">[<expr pos:start="85:60" pos:end="85:60"><literal type="number" pos:start="85:60" pos:end="85:60">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:60"><expr pos:start="87:5" pos:end="87:59"><call pos:start="87:5" pos:end="87:59"><name pos:start="87:5" pos:end="87:24">sysbus_create_simple</name><argument_list pos:start="87:25" pos:end="87:59">(<argument pos:start="87:26" pos:end="87:38"><expr pos:start="87:26" pos:end="87:38"><literal type="string" pos:start="87:26" pos:end="87:38">"pl050_mouse"</literal></expr></argument>, <argument pos:start="87:41" pos:end="87:50"><expr pos:start="87:41" pos:end="87:50"><literal type="number" pos:start="87:41" pos:end="87:50">0x10007000</literal></expr></argument>, <argument pos:start="87:53" pos:end="87:58"><expr pos:start="87:53" pos:end="87:58"><name pos:start="87:53" pos:end="87:58"><name pos:start="87:53" pos:end="87:55">sic</name><index pos:start="87:56" pos:end="87:58">[<expr pos:start="87:57" pos:end="87:57"><literal type="number" pos:start="87:57" pos:end="87:57">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="91:5" pos:end="93:74"><expr pos:start="91:5" pos:end="93:73"><name pos:start="91:5" pos:end="91:7">dev</name> <operator pos:start="91:9" pos:end="91:9">=</operator> <call pos:start="91:11" pos:end="93:73"><name pos:start="91:11" pos:end="91:31">sysbus_create_varargs</name><argument_list pos:start="91:32" pos:end="93:73">(<argument pos:start="91:33" pos:end="91:47"><expr pos:start="91:33" pos:end="91:47"><literal type="string" pos:start="91:33" pos:end="91:47">"versatile_pci"</literal></expr></argument>, <argument pos:start="91:50" pos:end="91:59"><expr pos:start="91:50" pos:end="91:59"><literal type="number" pos:start="91:50" pos:end="91:59">0x40000000</literal></expr></argument>,

                                <argument pos:start="93:33" pos:end="93:39"><expr pos:start="93:33" pos:end="93:39"><name pos:start="93:33" pos:end="93:39"><name pos:start="93:33" pos:end="93:35">sic</name><index pos:start="93:36" pos:end="93:39">[<expr pos:start="93:37" pos:end="93:38"><literal type="number" pos:start="93:37" pos:end="93:38">27</literal></expr>]</index></name></expr></argument>, <argument pos:start="93:42" pos:end="93:48"><expr pos:start="93:42" pos:end="93:48"><name pos:start="93:42" pos:end="93:48"><name pos:start="93:42" pos:end="93:44">sic</name><index pos:start="93:45" pos:end="93:48">[<expr pos:start="93:46" pos:end="93:47"><literal type="number" pos:start="93:46" pos:end="93:47">28</literal></expr>]</index></name></expr></argument>, <argument pos:start="93:51" pos:end="93:57"><expr pos:start="93:51" pos:end="93:57"><name pos:start="93:51" pos:end="93:57"><name pos:start="93:51" pos:end="93:53">sic</name><index pos:start="93:54" pos:end="93:57">[<expr pos:start="93:55" pos:end="93:56"><literal type="number" pos:start="93:55" pos:end="93:56">29</literal></expr>]</index></name></expr></argument>, <argument pos:start="93:60" pos:end="93:66"><expr pos:start="93:60" pos:end="93:66"><name pos:start="93:60" pos:end="93:66"><name pos:start="93:60" pos:end="93:62">sic</name><index pos:start="93:63" pos:end="93:66">[<expr pos:start="93:64" pos:end="93:65"><literal type="number" pos:start="93:64" pos:end="93:65">30</literal></expr>]</index></name></expr></argument>, <argument pos:start="93:69" pos:end="93:72"><expr pos:start="93:69" pos:end="93:72"><name pos:start="93:69" pos:end="93:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:55"><expr pos:start="95:5" pos:end="95:54"><name pos:start="95:5" pos:end="95:11">pci_bus</name> <operator pos:start="95:13" pos:end="95:13">=</operator> <operator pos:start="95:15" pos:end="95:15">(</operator><name pos:start="95:16" pos:end="95:21">PCIBus</name> <operator pos:start="95:23" pos:end="95:23">*</operator><operator pos:start="95:24" pos:end="95:24">)</operator><call pos:start="95:25" pos:end="95:54"><name pos:start="95:25" pos:end="95:42">qdev_get_child_bus</name><argument_list pos:start="95:43" pos:end="95:54">(<argument pos:start="95:44" pos:end="95:46"><expr pos:start="95:44" pos:end="95:46"><name pos:start="95:44" pos:end="95:46">dev</name></expr></argument>, <argument pos:start="95:49" pos:end="95:53"><expr pos:start="95:49" pos:end="95:53"><literal type="string" pos:start="95:49" pos:end="95:53">"pci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="99:5" pos:end="101:59">/* The Versatile PCI bridge does not provide access to PCI IO space,

       so many of the qemu PCI devices are not useable.  */</comment>

    <for pos:start="103:5" pos:end="121:5">for<control pos:start="103:8" pos:end="103:32">(<init pos:start="103:9" pos:end="103:14"><expr pos:start="103:9" pos:end="103:13"><name pos:start="103:9" pos:end="103:9">n</name> <operator pos:start="103:11" pos:end="103:11">=</operator> <literal type="number" pos:start="103:13" pos:end="103:13">0</literal></expr>;</init> <condition pos:start="103:16" pos:end="103:27"><expr pos:start="103:16" pos:end="103:26"><name pos:start="103:16" pos:end="103:16">n</name> <operator pos:start="103:18" pos:end="103:18">&lt;</operator> <name pos:start="103:20" pos:end="103:26">nb_nics</name></expr>;</condition> <incr pos:start="103:29" pos:end="103:31"><expr pos:start="103:29" pos:end="103:31"><name pos:start="103:29" pos:end="103:29">n</name><operator pos:start="103:30" pos:end="103:31">++</operator></expr></incr>)</control> <block pos:start="103:34" pos:end="121:5">{<block_content pos:start="105:9" pos:end="119:9">

        <expr_stmt pos:start="105:9" pos:end="105:26"><expr pos:start="105:9" pos:end="105:25"><name pos:start="105:9" pos:end="105:10">nd</name> <operator pos:start="105:12" pos:end="105:12">=</operator> <operator pos:start="105:14" pos:end="105:14">&amp;</operator><name pos:start="105:15" pos:end="105:25"><name pos:start="105:15" pos:end="105:22">nd_table</name><index pos:start="105:23" pos:end="105:25">[<expr pos:start="105:24" pos:end="105:24"><name pos:start="105:24" pos:end="105:24">n</name></expr>]</index></name></expr>;</expr_stmt>



        <if_stmt pos:start="109:9" pos:end="119:9"><if pos:start="109:9" pos:end="115:9">if <condition pos:start="109:12" pos:end="109:77">(<expr pos:start="109:13" pos:end="109:76"><operator pos:start="109:13" pos:end="109:13">(</operator><operator pos:start="109:14" pos:end="109:14">!</operator><name pos:start="109:15" pos:end="109:23"><name pos:start="109:15" pos:end="109:16">nd</name><operator pos:start="109:17" pos:end="109:18">-&gt;</operator><name pos:start="109:19" pos:end="109:23">model</name></name> <operator pos:start="109:25" pos:end="109:26">&amp;&amp;</operator> <operator pos:start="109:28" pos:end="109:28">!</operator><name pos:start="109:29" pos:end="109:36">done_smc</name><operator pos:start="109:37" pos:end="109:37">)</operator> <operator pos:start="109:39" pos:end="109:40">||</operator> <call pos:start="109:42" pos:end="109:71"><name pos:start="109:42" pos:end="109:47">strcmp</name><argument_list pos:start="109:48" pos:end="109:71">(<argument pos:start="109:49" pos:end="109:57"><expr pos:start="109:49" pos:end="109:57"><name pos:start="109:49" pos:end="109:57"><name pos:start="109:49" pos:end="109:50">nd</name><operator pos:start="109:51" pos:end="109:52">-&gt;</operator><name pos:start="109:53" pos:end="109:57">model</name></name></expr></argument>, <argument pos:start="109:60" pos:end="109:70"><expr pos:start="109:60" pos:end="109:70"><literal type="string" pos:start="109:60" pos:end="109:70">"smc91c111"</literal></expr></argument>)</argument_list></call> <operator pos:start="109:73" pos:end="109:74">==</operator> <literal type="number" pos:start="109:76" pos:end="109:76">0</literal></expr>)</condition> <block pos:start="109:79" pos:end="115:9">{<block_content pos:start="111:13" pos:end="113:25">

            <expr_stmt pos:start="111:13" pos:end="111:52"><expr pos:start="111:13" pos:end="111:51"><call pos:start="111:13" pos:end="111:51"><name pos:start="111:13" pos:end="111:26">smc91c111_init</name><argument_list pos:start="111:27" pos:end="111:51">(<argument pos:start="111:28" pos:end="111:29"><expr pos:start="111:28" pos:end="111:29"><name pos:start="111:28" pos:end="111:29">nd</name></expr></argument>, <argument pos:start="111:32" pos:end="111:41"><expr pos:start="111:32" pos:end="111:41"><literal type="number" pos:start="111:32" pos:end="111:41">0x10010000</literal></expr></argument>, <argument pos:start="111:44" pos:end="111:50"><expr pos:start="111:44" pos:end="111:50"><name pos:start="111:44" pos:end="111:50"><name pos:start="111:44" pos:end="111:46">sic</name><index pos:start="111:47" pos:end="111:50">[<expr pos:start="111:48" pos:end="111:49"><literal type="number" pos:start="111:48" pos:end="111:49">25</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:25"><expr pos:start="113:13" pos:end="113:24"><name pos:start="113:13" pos:end="113:20">done_smc</name> <operator pos:start="113:22" pos:end="113:22">=</operator> <literal type="number" pos:start="113:24" pos:end="113:24">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="115:11" pos:end="119:9">else <block pos:start="115:16" pos:end="119:9">{<block_content pos:start="117:13" pos:end="117:53">

            <expr_stmt pos:start="117:13" pos:end="117:53"><expr pos:start="117:13" pos:end="117:52"><call pos:start="117:13" pos:end="117:52"><name pos:start="117:13" pos:end="117:31">pci_nic_init_nofail</name><argument_list pos:start="117:32" pos:end="117:52">(<argument pos:start="117:33" pos:end="117:34"><expr pos:start="117:33" pos:end="117:34"><name pos:start="117:33" pos:end="117:34">nd</name></expr></argument>, <argument pos:start="117:37" pos:end="117:45"><expr pos:start="117:37" pos:end="117:45"><literal type="string" pos:start="117:37" pos:end="117:45">"rtl8139"</literal></expr></argument>, <argument pos:start="117:48" pos:end="117:51"><expr pos:start="117:48" pos:end="117:51"><name pos:start="117:48" pos:end="117:51">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="123:5" pos:end="127:5"><if pos:start="123:5" pos:end="127:5">if <condition pos:start="123:8" pos:end="123:20">(<expr pos:start="123:9" pos:end="123:19"><name pos:start="123:9" pos:end="123:19">usb_enabled</name></expr>)</condition> <block pos:start="123:22" pos:end="127:5">{<block_content pos:start="125:9" pos:end="125:39">

        <expr_stmt pos:start="125:9" pos:end="125:39"><expr pos:start="125:9" pos:end="125:38"><call pos:start="125:9" pos:end="125:38"><name pos:start="125:9" pos:end="125:25">usb_ohci_init_pci</name><argument_list pos:start="125:26" pos:end="125:38">(<argument pos:start="125:27" pos:end="125:33"><expr pos:start="125:27" pos:end="125:33"><name pos:start="125:27" pos:end="125:33">pci_bus</name></expr></argument>, <argument pos:start="125:36" pos:end="125:37"><expr pos:start="125:36" pos:end="125:37"><operator pos:start="125:36" pos:end="125:36">-</operator><literal type="number" pos:start="125:37" pos:end="125:37">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:35"><expr pos:start="129:5" pos:end="129:34"><name pos:start="129:5" pos:end="129:5">n</name> <operator pos:start="129:7" pos:end="129:7">=</operator> <call pos:start="129:9" pos:end="129:34"><name pos:start="129:9" pos:end="129:25">drive_get_max_bus</name><argument_list pos:start="129:26" pos:end="129:34">(<argument pos:start="129:27" pos:end="129:33"><expr pos:start="129:27" pos:end="129:33"><name pos:start="129:27" pos:end="129:33">IF_SCSI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="131:5" pos:end="137:5">while <condition pos:start="131:11" pos:end="131:18">(<expr pos:start="131:12" pos:end="131:17"><name pos:start="131:12" pos:end="131:12">n</name> <operator pos:start="131:14" pos:end="131:15">&gt;=</operator> <literal type="number" pos:start="131:17" pos:end="131:17">0</literal></expr>)</condition> <block pos:start="131:20" pos:end="137:5">{<block_content pos:start="133:9" pos:end="135:12">

        <expr_stmt pos:start="133:9" pos:end="133:53"><expr pos:start="133:9" pos:end="133:52"><call pos:start="133:9" pos:end="133:52"><name pos:start="133:9" pos:end="133:25">pci_create_simple</name><argument_list pos:start="133:26" pos:end="133:52">(<argument pos:start="133:27" pos:end="133:33"><expr pos:start="133:27" pos:end="133:33"><name pos:start="133:27" pos:end="133:33">pci_bus</name></expr></argument>, <argument pos:start="133:36" pos:end="133:37"><expr pos:start="133:36" pos:end="133:37"><operator pos:start="133:36" pos:end="133:36">-</operator><literal type="number" pos:start="133:37" pos:end="133:37">1</literal></expr></argument>, <argument pos:start="133:40" pos:end="133:51"><expr pos:start="133:40" pos:end="133:51"><literal type="string" pos:start="133:40" pos:end="133:51">"lsi53c895a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:12"><expr pos:start="135:9" pos:end="135:11"><name pos:start="135:9" pos:end="135:9">n</name><operator pos:start="135:10" pos:end="135:11">--</operator></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="141:5" pos:end="141:55"><expr pos:start="141:5" pos:end="141:54"><call pos:start="141:5" pos:end="141:54"><name pos:start="141:5" pos:end="141:24">sysbus_create_simple</name><argument_list pos:start="141:25" pos:end="141:54">(<argument pos:start="141:26" pos:end="141:32"><expr pos:start="141:26" pos:end="141:32"><literal type="string" pos:start="141:26" pos:end="141:32">"pl011"</literal></expr></argument>, <argument pos:start="141:35" pos:end="141:44"><expr pos:start="141:35" pos:end="141:44"><literal type="number" pos:start="141:35" pos:end="141:44">0x101f1000</literal></expr></argument>, <argument pos:start="141:47" pos:end="141:53"><expr pos:start="141:47" pos:end="141:53"><name pos:start="141:47" pos:end="141:53"><name pos:start="141:47" pos:end="141:49">pic</name><index pos:start="141:50" pos:end="141:53">[<expr pos:start="141:51" pos:end="141:52"><literal type="number" pos:start="141:51" pos:end="141:52">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:55"><expr pos:start="143:5" pos:end="143:54"><call pos:start="143:5" pos:end="143:54"><name pos:start="143:5" pos:end="143:24">sysbus_create_simple</name><argument_list pos:start="143:25" pos:end="143:54">(<argument pos:start="143:26" pos:end="143:32"><expr pos:start="143:26" pos:end="143:32"><literal type="string" pos:start="143:26" pos:end="143:32">"pl011"</literal></expr></argument>, <argument pos:start="143:35" pos:end="143:44"><expr pos:start="143:35" pos:end="143:44"><literal type="number" pos:start="143:35" pos:end="143:44">0x101f2000</literal></expr></argument>, <argument pos:start="143:47" pos:end="143:53"><expr pos:start="143:47" pos:end="143:53"><name pos:start="143:47" pos:end="143:53"><name pos:start="143:47" pos:end="143:49">pic</name><index pos:start="143:50" pos:end="143:53">[<expr pos:start="143:51" pos:end="143:52"><literal type="number" pos:start="143:51" pos:end="143:52">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:55"><expr pos:start="145:5" pos:end="145:54"><call pos:start="145:5" pos:end="145:54"><name pos:start="145:5" pos:end="145:24">sysbus_create_simple</name><argument_list pos:start="145:25" pos:end="145:54">(<argument pos:start="145:26" pos:end="145:32"><expr pos:start="145:26" pos:end="145:32"><literal type="string" pos:start="145:26" pos:end="145:32">"pl011"</literal></expr></argument>, <argument pos:start="145:35" pos:end="145:44"><expr pos:start="145:35" pos:end="145:44"><literal type="number" pos:start="145:35" pos:end="145:44">0x101f3000</literal></expr></argument>, <argument pos:start="145:47" pos:end="145:53"><expr pos:start="145:47" pos:end="145:53"><name pos:start="145:47" pos:end="145:53"><name pos:start="145:47" pos:end="145:49">pic</name><index pos:start="145:50" pos:end="145:53">[<expr pos:start="145:51" pos:end="145:52"><literal type="number" pos:start="145:51" pos:end="145:52">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:54"><expr pos:start="147:5" pos:end="147:53"><call pos:start="147:5" pos:end="147:53"><name pos:start="147:5" pos:end="147:24">sysbus_create_simple</name><argument_list pos:start="147:25" pos:end="147:53">(<argument pos:start="147:26" pos:end="147:32"><expr pos:start="147:26" pos:end="147:32"><literal type="string" pos:start="147:26" pos:end="147:32">"pl011"</literal></expr></argument>, <argument pos:start="147:35" pos:end="147:44"><expr pos:start="147:35" pos:end="147:44"><literal type="number" pos:start="147:35" pos:end="147:44">0x10009000</literal></expr></argument>, <argument pos:start="147:47" pos:end="147:52"><expr pos:start="147:47" pos:end="147:52"><name pos:start="147:47" pos:end="147:52"><name pos:start="147:47" pos:end="147:49">sic</name><index pos:start="147:50" pos:end="147:52">[<expr pos:start="147:51" pos:end="147:51"><literal type="number" pos:start="147:51" pos:end="147:51">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="151:5" pos:end="151:55"><expr pos:start="151:5" pos:end="151:54"><call pos:start="151:5" pos:end="151:54"><name pos:start="151:5" pos:end="151:24">sysbus_create_simple</name><argument_list pos:start="151:25" pos:end="151:54">(<argument pos:start="151:26" pos:end="151:32"><expr pos:start="151:26" pos:end="151:32"><literal type="string" pos:start="151:26" pos:end="151:32">"pl080"</literal></expr></argument>, <argument pos:start="151:35" pos:end="151:44"><expr pos:start="151:35" pos:end="151:44"><literal type="number" pos:start="151:35" pos:end="151:44">0x10130000</literal></expr></argument>, <argument pos:start="151:47" pos:end="151:53"><expr pos:start="151:47" pos:end="151:53"><name pos:start="151:47" pos:end="151:53"><name pos:start="151:47" pos:end="151:49">pic</name><index pos:start="151:50" pos:end="151:53">[<expr pos:start="151:51" pos:end="151:52"><literal type="number" pos:start="151:51" pos:end="151:52">17</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:54"><expr pos:start="153:5" pos:end="153:53"><call pos:start="153:5" pos:end="153:53"><name pos:start="153:5" pos:end="153:24">sysbus_create_simple</name><argument_list pos:start="153:25" pos:end="153:53">(<argument pos:start="153:26" pos:end="153:32"><expr pos:start="153:26" pos:end="153:32"><literal type="string" pos:start="153:26" pos:end="153:32">"sp804"</literal></expr></argument>, <argument pos:start="153:35" pos:end="153:44"><expr pos:start="153:35" pos:end="153:44"><literal type="number" pos:start="153:35" pos:end="153:44">0x101e2000</literal></expr></argument>, <argument pos:start="153:47" pos:end="153:52"><expr pos:start="153:47" pos:end="153:52"><name pos:start="153:47" pos:end="153:52"><name pos:start="153:47" pos:end="153:49">pic</name><index pos:start="153:50" pos:end="153:52">[<expr pos:start="153:51" pos:end="153:51"><literal type="number" pos:start="153:51" pos:end="153:51">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:54"><expr pos:start="155:5" pos:end="155:53"><call pos:start="155:5" pos:end="155:53"><name pos:start="155:5" pos:end="155:24">sysbus_create_simple</name><argument_list pos:start="155:25" pos:end="155:53">(<argument pos:start="155:26" pos:end="155:32"><expr pos:start="155:26" pos:end="155:32"><literal type="string" pos:start="155:26" pos:end="155:32">"sp804"</literal></expr></argument>, <argument pos:start="155:35" pos:end="155:44"><expr pos:start="155:35" pos:end="155:44"><literal type="number" pos:start="155:35" pos:end="155:44">0x101e3000</literal></expr></argument>, <argument pos:start="155:47" pos:end="155:52"><expr pos:start="155:47" pos:end="155:52"><name pos:start="155:47" pos:end="155:52"><name pos:start="155:47" pos:end="155:49">pic</name><index pos:start="155:50" pos:end="155:52">[<expr pos:start="155:51" pos:end="155:51"><literal type="number" pos:start="155:51" pos:end="155:51">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="159:5" pos:end="161:64">/* The versatile/PB actually has a modified Color LCD controller

       that includes hardware cursor support from the PL111.  */</comment>

    <expr_stmt pos:start="163:5" pos:end="163:65"><expr pos:start="163:5" pos:end="163:64"><call pos:start="163:5" pos:end="163:64"><name pos:start="163:5" pos:end="163:24">sysbus_create_simple</name><argument_list pos:start="163:25" pos:end="163:64">(<argument pos:start="163:26" pos:end="163:42"><expr pos:start="163:26" pos:end="163:42"><literal type="string" pos:start="163:26" pos:end="163:42">"pl110_versatile"</literal></expr></argument>, <argument pos:start="163:45" pos:end="163:54"><expr pos:start="163:45" pos:end="163:54"><literal type="number" pos:start="163:45" pos:end="163:54">0x10120000</literal></expr></argument>, <argument pos:start="163:57" pos:end="163:63"><expr pos:start="163:57" pos:end="163:63"><name pos:start="163:57" pos:end="163:63"><name pos:start="163:57" pos:end="163:59">pic</name><index pos:start="163:60" pos:end="163:63">[<expr pos:start="163:61" pos:end="163:62"><literal type="number" pos:start="163:61" pos:end="163:62">16</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="167:5" pos:end="167:70"><expr pos:start="167:5" pos:end="167:69"><call pos:start="167:5" pos:end="167:69"><name pos:start="167:5" pos:end="167:25">sysbus_create_varargs</name><argument_list pos:start="167:26" pos:end="167:69">(<argument pos:start="167:27" pos:end="167:33"><expr pos:start="167:27" pos:end="167:33"><literal type="string" pos:start="167:27" pos:end="167:33">"pl181"</literal></expr></argument>, <argument pos:start="167:36" pos:end="167:45"><expr pos:start="167:36" pos:end="167:45"><literal type="number" pos:start="167:36" pos:end="167:45">0x10005000</literal></expr></argument>, <argument pos:start="167:48" pos:end="167:54"><expr pos:start="167:48" pos:end="167:54"><name pos:start="167:48" pos:end="167:54"><name pos:start="167:48" pos:end="167:50">sic</name><index pos:start="167:51" pos:end="167:54">[<expr pos:start="167:52" pos:end="167:53"><literal type="number" pos:start="167:52" pos:end="167:53">22</literal></expr>]</index></name></expr></argument>, <argument pos:start="167:57" pos:end="167:62"><expr pos:start="167:57" pos:end="167:62"><name pos:start="167:57" pos:end="167:62"><name pos:start="167:57" pos:end="167:59">sic</name><index pos:start="167:60" pos:end="167:62">[<expr pos:start="167:61" pos:end="167:61"><literal type="number" pos:start="167:61" pos:end="167:61">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="167:65" pos:end="167:68"><expr pos:start="167:65" pos:end="167:68"><name pos:start="167:65" pos:end="167:68">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:70"><expr pos:start="169:5" pos:end="169:69"><call pos:start="169:5" pos:end="169:69"><name pos:start="169:5" pos:end="169:25">sysbus_create_varargs</name><argument_list pos:start="169:26" pos:end="169:69">(<argument pos:start="169:27" pos:end="169:33"><expr pos:start="169:27" pos:end="169:33"><literal type="string" pos:start="169:27" pos:end="169:33">"pl181"</literal></expr></argument>, <argument pos:start="169:36" pos:end="169:45"><expr pos:start="169:36" pos:end="169:45"><literal type="number" pos:start="169:36" pos:end="169:45">0x1000b000</literal></expr></argument>, <argument pos:start="169:48" pos:end="169:54"><expr pos:start="169:48" pos:end="169:54"><name pos:start="169:48" pos:end="169:54"><name pos:start="169:48" pos:end="169:50">sic</name><index pos:start="169:51" pos:end="169:54">[<expr pos:start="169:52" pos:end="169:53"><literal type="number" pos:start="169:52" pos:end="169:53">23</literal></expr>]</index></name></expr></argument>, <argument pos:start="169:57" pos:end="169:62"><expr pos:start="169:57" pos:end="169:62"><name pos:start="169:57" pos:end="169:62"><name pos:start="169:57" pos:end="169:59">sic</name><index pos:start="169:60" pos:end="169:62">[<expr pos:start="169:61" pos:end="169:61"><literal type="number" pos:start="169:61" pos:end="169:61">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="169:65" pos:end="169:68"><expr pos:start="169:65" pos:end="169:68"><name pos:start="169:65" pos:end="169:68">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="173:5" pos:end="173:36">/* Add PL031 Real Time Clock. */</comment>

    <expr_stmt pos:start="175:5" pos:end="175:55"><expr pos:start="175:5" pos:end="175:54"><call pos:start="175:5" pos:end="175:54"><name pos:start="175:5" pos:end="175:24">sysbus_create_simple</name><argument_list pos:start="175:25" pos:end="175:54">(<argument pos:start="175:26" pos:end="175:32"><expr pos:start="175:26" pos:end="175:32"><literal type="string" pos:start="175:26" pos:end="175:32">"pl031"</literal></expr></argument>, <argument pos:start="175:35" pos:end="175:44"><expr pos:start="175:35" pos:end="175:44"><literal type="number" pos:start="175:35" pos:end="175:44">0x101e8000</literal></expr></argument>, <argument pos:start="175:47" pos:end="175:53"><expr pos:start="175:47" pos:end="175:53"><name pos:start="175:47" pos:end="175:53"><name pos:start="175:47" pos:end="175:49">pic</name><index pos:start="175:50" pos:end="175:53">[<expr pos:start="175:51" pos:end="175:52"><literal type="number" pos:start="175:51" pos:end="175:52">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="179:5" pos:end="179:39">/* Memory map for Versatile/PB:  */</comment>

    <comment type="block" pos:start="181:5" pos:end="181:39">/* 0x10000000 System registers.  */</comment>

    <comment type="block" pos:start="183:5" pos:end="183:54">/* 0x10001000 PCI controller config registers.  */</comment>

    <comment type="block" pos:start="185:5" pos:end="185:43">/* 0x10002000 Serial bus interface.  */</comment>

    <comment type="block" pos:start="187:5" pos:end="187:54">/*  0x10003000 Secondary interrupt controller.  */</comment>

    <comment type="block" pos:start="189:5" pos:end="189:35">/* 0x10004000 AACI (audio).  */</comment>

    <comment type="block" pos:start="191:5" pos:end="191:29">/*  0x10005000 MMCI0.  */</comment>

    <comment type="block" pos:start="193:5" pos:end="193:39">/*  0x10006000 KMI0 (keyboard).  */</comment>

    <comment type="block" pos:start="195:5" pos:end="195:36">/*  0x10007000 KMI1 (mouse).  */</comment>

    <comment type="block" pos:start="197:5" pos:end="197:46">/* 0x10008000 Character LCD Interface.  */</comment>

    <comment type="block" pos:start="199:5" pos:end="199:29">/*  0x10009000 UART3.  */</comment>

    <comment type="block" pos:start="201:5" pos:end="201:35">/* 0x1000a000 Smart card 1.  */</comment>

    <comment type="block" pos:start="203:5" pos:end="203:29">/*  0x1000b000 MMCI1.  */</comment>

    <comment type="block" pos:start="205:5" pos:end="205:32">/*  0x10010000 Ethernet.  */</comment>

    <comment type="block" pos:start="207:5" pos:end="207:26">/* 0x10020000 USB.  */</comment>

    <comment type="block" pos:start="209:5" pos:end="209:27">/* 0x10100000 SSMC.  */</comment>

    <comment type="block" pos:start="211:5" pos:end="211:27">/* 0x10110000 MPMC.  */</comment>

    <comment type="block" pos:start="213:5" pos:end="213:39">/*  0x10120000 CLCD Controller.  */</comment>

    <comment type="block" pos:start="215:5" pos:end="215:38">/*  0x10130000 DMA Controller.  */</comment>

    <comment type="block" pos:start="217:5" pos:end="217:53">/*  0x10140000 Vectored interrupt controller.  */</comment>

    <comment type="block" pos:start="219:5" pos:end="219:44">/* 0x101d0000 AHB Monitor Interface.  */</comment>

    <comment type="block" pos:start="221:5" pos:end="221:40">/* 0x101e0000 System Controller.  */</comment>

    <comment type="block" pos:start="223:5" pos:end="223:41">/* 0x101e1000 Watchdog Interface.  */</comment>

    <comment type="block" pos:start="225:5" pos:end="225:32">/* 0x101e2000 Timer 0/1.  */</comment>

    <comment type="block" pos:start="227:5" pos:end="227:32">/* 0x101e3000 Timer 2/3.  */</comment>

    <comment type="block" pos:start="229:5" pos:end="229:34">/* 0x101e4000 GPIO port 0.  */</comment>

    <comment type="block" pos:start="231:5" pos:end="231:34">/* 0x101e5000 GPIO port 1.  */</comment>

    <comment type="block" pos:start="233:5" pos:end="233:34">/* 0x101e6000 GPIO port 2.  */</comment>

    <comment type="block" pos:start="235:5" pos:end="235:34">/* 0x101e7000 GPIO port 3.  */</comment>

    <comment type="block" pos:start="237:5" pos:end="237:26">/* 0x101e8000 RTC.  */</comment>

    <comment type="block" pos:start="239:5" pos:end="239:35">/* 0x101f0000 Smart card 0.  */</comment>

    <comment type="block" pos:start="241:5" pos:end="241:29">/*  0x101f1000 UART0.  */</comment>

    <comment type="block" pos:start="243:5" pos:end="243:29">/*  0x101f2000 UART1.  */</comment>

    <comment type="block" pos:start="245:5" pos:end="245:29">/*  0x101f3000 UART2.  */</comment>

    <comment type="block" pos:start="247:5" pos:end="247:27">/* 0x101f4000 SSPI.  */</comment>



    <expr_stmt pos:start="251:5" pos:end="251:40"><expr pos:start="251:5" pos:end="251:39"><name pos:start="251:5" pos:end="251:28"><name pos:start="251:5" pos:end="251:19">versatile_binfo</name><operator pos:start="251:20" pos:end="251:20">.</operator><name pos:start="251:21" pos:end="251:28">ram_size</name></name> <operator pos:start="251:30" pos:end="251:30">=</operator> <name pos:start="251:32" pos:end="251:39">ram_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="253:5" pos:end="253:54"><expr pos:start="253:5" pos:end="253:53"><name pos:start="253:5" pos:end="253:35"><name pos:start="253:5" pos:end="253:19">versatile_binfo</name><operator pos:start="253:20" pos:end="253:20">.</operator><name pos:start="253:21" pos:end="253:35">kernel_filename</name></name> <operator pos:start="253:37" pos:end="253:37">=</operator> <name pos:start="253:39" pos:end="253:53">kernel_filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="255:5" pos:end="255:52"><expr pos:start="255:5" pos:end="255:51"><name pos:start="255:5" pos:end="255:34"><name pos:start="255:5" pos:end="255:19">versatile_binfo</name><operator pos:start="255:20" pos:end="255:20">.</operator><name pos:start="255:21" pos:end="255:34">kernel_cmdline</name></name> <operator pos:start="255:36" pos:end="255:36">=</operator> <name pos:start="255:38" pos:end="255:51">kernel_cmdline</name></expr>;</expr_stmt>

    <expr_stmt pos:start="257:5" pos:end="257:54"><expr pos:start="257:5" pos:end="257:53"><name pos:start="257:5" pos:end="257:35"><name pos:start="257:5" pos:end="257:19">versatile_binfo</name><operator pos:start="257:20" pos:end="257:20">.</operator><name pos:start="257:21" pos:end="257:35">initrd_filename</name></name> <operator pos:start="257:37" pos:end="257:37">=</operator> <name pos:start="257:39" pos:end="257:53">initrd_filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="259:5" pos:end="259:40"><expr pos:start="259:5" pos:end="259:39"><name pos:start="259:5" pos:end="259:28"><name pos:start="259:5" pos:end="259:19">versatile_binfo</name><operator pos:start="259:20" pos:end="259:20">.</operator><name pos:start="259:21" pos:end="259:28">board_id</name></name> <operator pos:start="259:30" pos:end="259:30">=</operator> <name pos:start="259:32" pos:end="259:39">board_id</name></expr>;</expr_stmt>

    <expr_stmt pos:start="261:5" pos:end="261:43"><expr pos:start="261:5" pos:end="261:42"><call pos:start="261:5" pos:end="261:42"><name pos:start="261:5" pos:end="261:19">arm_load_kernel</name><argument_list pos:start="261:20" pos:end="261:42">(<argument pos:start="261:21" pos:end="261:23"><expr pos:start="261:21" pos:end="261:23"><name pos:start="261:21" pos:end="261:23">env</name></expr></argument>, <argument pos:start="261:26" pos:end="261:41"><expr pos:start="261:26" pos:end="261:41"><operator pos:start="261:26" pos:end="261:26">&amp;</operator><name pos:start="261:27" pos:end="261:41">versatile_binfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
