<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2549.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:1"><type pos:start="1:1" pos:end="1:7"><name pos:start="1:1" pos:end="1:7">int64_t</name></type> <name pos:start="1:9" pos:end="1:35">bdrv_get_block_status_above</name><parameter_list pos:start="1:36" pos:end="7:62">(<parameter pos:start="1:37" pos:end="1:56"><decl pos:start="1:37" pos:end="1:56"><type pos:start="1:37" pos:end="1:56"><name pos:start="1:37" pos:end="1:52">BlockDriverState</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:56">bs</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:58"><decl pos:start="3:37" pos:end="3:58"><type pos:start="3:37" pos:end="3:58"><name pos:start="3:37" pos:end="3:52">BlockDriverState</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:58">base</name></decl></parameter>,

                                    <parameter pos:start="5:37" pos:end="5:54"><decl pos:start="5:37" pos:end="5:54"><type pos:start="5:37" pos:end="5:54"><name pos:start="5:37" pos:end="5:43">int64_t</name></type> <name pos:start="5:45" pos:end="5:54">sector_num</name></decl></parameter>,

                                    <parameter pos:start="7:37" pos:end="7:50"><decl pos:start="7:37" pos:end="7:50"><type pos:start="7:37" pos:end="7:50"><name pos:start="7:37" pos:end="7:39">int</name></type> <name pos:start="7:41" pos:end="7:50">nb_sectors</name></decl></parameter>, <parameter pos:start="7:53" pos:end="7:61"><decl pos:start="7:53" pos:end="7:61"><type pos:start="7:53" pos:end="7:61"><name pos:start="7:53" pos:end="7:55">int</name> <modifier pos:start="7:57" pos:end="7:57">*</modifier></type><name pos:start="7:58" pos:end="7:61">pnum</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="57:1">{<block_content pos:start="11:5" pos:end="55:20">

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:13">Coroutine</name> <modifier pos:start="11:15" pos:end="11:15">*</modifier></type><name pos:start="11:16" pos:end="11:17">co</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="27:6"><decl pos:start="13:5" pos:end="27:5"><type pos:start="13:5" pos:end="13:28"><name pos:start="13:5" pos:end="13:28">BdrvCoGetBlockStatusData</name></type> <name pos:start="13:30" pos:end="13:33">data</name> <init pos:start="13:35" pos:end="27:5">= <expr pos:start="13:37" pos:end="27:5"><block pos:start="13:37" pos:end="27:5">{

        <expr pos:start="15:9" pos:end="15:16"><operator pos:start="15:9" pos:end="15:9">.</operator><name pos:start="15:10" pos:end="15:11">bs</name> <operator pos:start="15:13" pos:end="15:13">=</operator> <name pos:start="15:15" pos:end="15:16">bs</name></expr>,

        <expr pos:start="17:9" pos:end="17:20"><operator pos:start="17:9" pos:end="17:9">.</operator><name pos:start="17:10" pos:end="17:13">base</name> <operator pos:start="17:15" pos:end="17:15">=</operator> <name pos:start="17:17" pos:end="17:20">base</name></expr>,

        <expr pos:start="19:9" pos:end="19:32"><operator pos:start="19:9" pos:end="19:9">.</operator><name pos:start="19:10" pos:end="19:19">sector_num</name> <operator pos:start="19:21" pos:end="19:21">=</operator> <name pos:start="19:23" pos:end="19:32">sector_num</name></expr>,

        <expr pos:start="21:9" pos:end="21:32"><operator pos:start="21:9" pos:end="21:9">.</operator><name pos:start="21:10" pos:end="21:19">nb_sectors</name> <operator pos:start="21:21" pos:end="21:21">=</operator> <name pos:start="21:23" pos:end="21:32">nb_sectors</name></expr>,

        <expr pos:start="23:9" pos:end="23:20"><operator pos:start="23:9" pos:end="23:9">.</operator><name pos:start="23:10" pos:end="23:13">pnum</name> <operator pos:start="23:15" pos:end="23:15">=</operator> <name pos:start="23:17" pos:end="23:20">pnum</name></expr>,

        <expr pos:start="25:9" pos:end="25:21"><operator pos:start="25:9" pos:end="25:9">.</operator><name pos:start="25:10" pos:end="25:13">done</name> <operator pos:start="25:15" pos:end="25:15">=</operator> <name pos:start="25:17" pos:end="25:21">false</name></expr>,

    }</block></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="31:5" pos:end="53:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:28">(<expr pos:start="31:9" pos:end="31:27"><call pos:start="31:9" pos:end="31:27"><name pos:start="31:9" pos:end="31:25">qemu_in_coroutine</name><argument_list pos:start="31:26" pos:end="31:27">()</argument_list></call></expr>)</condition> <block pos:start="31:30" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:52">

        <comment type="block" pos:start="33:9" pos:end="33:55">/* Fast-path if already in coroutine context */</comment>

        <expr_stmt pos:start="35:9" pos:end="35:52"><expr pos:start="35:9" pos:end="35:51"><call pos:start="35:9" pos:end="35:51"><name pos:start="35:9" pos:end="35:44">bdrv_get_block_status_above_co_entry</name><argument_list pos:start="35:45" pos:end="35:51">(<argument pos:start="35:46" pos:end="35:50"><expr pos:start="35:46" pos:end="35:50"><operator pos:start="35:46" pos:end="35:46">&amp;</operator><name pos:start="35:47" pos:end="35:50">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="37:7" pos:end="53:5">else <block pos:start="37:12" pos:end="53:5">{<block_content pos:start="39:9" pos:end="51:9">

        <decl_stmt pos:start="39:9" pos:end="39:59"><decl pos:start="39:9" pos:end="39:58"><type pos:start="39:9" pos:end="39:20"><name pos:start="39:9" pos:end="39:18">AioContext</name> <modifier pos:start="39:20" pos:end="39:20">*</modifier></type><name pos:start="39:21" pos:end="39:31">aio_context</name> <init pos:start="39:33" pos:end="39:58">= <expr pos:start="39:35" pos:end="39:58"><call pos:start="39:35" pos:end="39:58"><name pos:start="39:35" pos:end="39:54">bdrv_get_aio_context</name><argument_list pos:start="39:55" pos:end="39:58">(<argument pos:start="39:56" pos:end="39:57"><expr pos:start="39:56" pos:end="39:57"><name pos:start="39:56" pos:end="39:57">bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="43:9" pos:end="43:73"><expr pos:start="43:9" pos:end="43:72"><name pos:start="43:9" pos:end="43:10">co</name> <operator pos:start="43:12" pos:end="43:12">=</operator> <call pos:start="43:14" pos:end="43:72"><name pos:start="43:14" pos:end="43:34">qemu_coroutine_create</name><argument_list pos:start="43:35" pos:end="43:72">(<argument pos:start="43:36" pos:end="43:71"><expr pos:start="43:36" pos:end="43:71"><name pos:start="43:36" pos:end="43:71">bdrv_get_block_status_above_co_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:40"><expr pos:start="45:9" pos:end="45:39"><call pos:start="45:9" pos:end="45:39"><name pos:start="45:9" pos:end="45:28">qemu_coroutine_enter</name><argument_list pos:start="45:29" pos:end="45:39">(<argument pos:start="45:30" pos:end="45:31"><expr pos:start="45:30" pos:end="45:31"><name pos:start="45:30" pos:end="45:31">co</name></expr></argument>, <argument pos:start="45:34" pos:end="45:38"><expr pos:start="45:34" pos:end="45:38"><operator pos:start="45:34" pos:end="45:34">&amp;</operator><name pos:start="45:35" pos:end="45:38">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <while pos:start="47:9" pos:end="51:9">while <condition pos:start="47:15" pos:end="47:26">(<expr pos:start="47:16" pos:end="47:25"><operator pos:start="47:16" pos:end="47:16">!</operator><name pos:start="47:17" pos:end="47:25"><name pos:start="47:17" pos:end="47:20">data</name><operator pos:start="47:21" pos:end="47:21">.</operator><name pos:start="47:22" pos:end="47:25">done</name></name></expr>)</condition> <block pos:start="47:28" pos:end="51:9">{<block_content pos:start="49:13" pos:end="49:40">

            <expr_stmt pos:start="49:13" pos:end="49:40"><expr pos:start="49:13" pos:end="49:39"><call pos:start="49:13" pos:end="49:39"><name pos:start="49:13" pos:end="49:20">aio_poll</name><argument_list pos:start="49:21" pos:end="49:39">(<argument pos:start="49:22" pos:end="49:32"><expr pos:start="49:22" pos:end="49:32"><name pos:start="49:22" pos:end="49:32">aio_context</name></expr></argument>, <argument pos:start="49:35" pos:end="49:38"><expr pos:start="49:35" pos:end="49:38"><name pos:start="49:35" pos:end="49:38">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></else></if_stmt>

    <return pos:start="55:5" pos:end="55:20">return <expr pos:start="55:12" pos:end="55:19"><name pos:start="55:12" pos:end="55:19"><name pos:start="55:12" pos:end="55:15">data</name><operator pos:start="55:16" pos:end="55:16">.</operator><name pos:start="55:17" pos:end="55:19">ret</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
