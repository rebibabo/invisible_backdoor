<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25835.c" pos:tabs="8"><function pos:start="1:1" pos:end="187:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">msrle_decode_pal4</name><parameter_list pos:start="1:29" pos:end="3:48">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:50"><name pos:start="1:30" pos:end="1:43">AVCodecContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:64"><decl pos:start="1:53" pos:end="1:64"><type pos:start="1:53" pos:end="1:64"><name pos:start="1:53" pos:end="1:59">AVFrame</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:64">pic</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:47"><decl pos:start="3:30" pos:end="3:47"><type pos:start="3:30" pos:end="3:47"><name pos:start="3:30" pos:end="3:43">GetByteContext</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:47">gb</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="187:1">{<block_content pos:start="7:5" pos:end="185:13">

    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:17">char</name></type> <name pos:start="7:19" pos:end="7:26">rle_code</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:40"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:17">char</name></type> <name pos:start="9:19" pos:end="9:28">extra_byte</name></decl>, <decl pos:start="9:31" pos:end="9:39"><type ref="prev" pos:start="9:5" pos:end="9:17"/><name pos:start="9:31" pos:end="9:39">odd_pixel</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:17">char</name></type> <name pos:start="11:19" pos:end="11:29">stream_byte</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:17">pixel_ptr</name> <init pos:start="13:19" pos:end="13:21">= <expr pos:start="13:21" pos:end="13:21"><literal type="number" pos:start="13:21" pos:end="13:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:33"><decl pos:start="15:5" pos:end="15:32"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:12">line</name> <init pos:start="15:14" pos:end="15:32">= <expr pos:start="15:16" pos:end="15:32"><name pos:start="15:16" pos:end="15:28"><name pos:start="15:16" pos:end="15:20">avctx</name><operator pos:start="15:21" pos:end="15:22">-&gt;</operator><name pos:start="15:23" pos:end="15:28">height</name></name> <operator pos:start="15:30" pos:end="15:30">-</operator> <literal type="number" pos:start="15:32" pos:end="15:32">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:10"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">i</name></decl>;</decl_stmt>



    <while pos:start="21:5" pos:end="165:5">while <condition pos:start="21:11" pos:end="21:50">(<expr pos:start="21:12" pos:end="21:49"><name pos:start="21:12" pos:end="21:15">line</name> <operator pos:start="21:17" pos:end="21:18">&gt;=</operator> <literal type="number" pos:start="21:20" pos:end="21:20">0</literal> <operator pos:start="21:22" pos:end="21:23">&amp;&amp;</operator> <name pos:start="21:25" pos:end="21:33">pixel_ptr</name> <operator pos:start="21:35" pos:end="21:36">&lt;=</operator> <name pos:start="21:38" pos:end="21:49"><name pos:start="21:38" pos:end="21:42">avctx</name><operator pos:start="21:43" pos:end="21:44">-&gt;</operator><name pos:start="21:45" pos:end="21:49">width</name></name></expr>)</condition> <block pos:start="21:52" pos:end="165:5">{<block_content pos:start="23:9" pos:end="163:9">

        <if_stmt pos:start="23:9" pos:end="33:9"><if pos:start="23:9" pos:end="33:9">if <condition pos:start="23:12" pos:end="23:48">(<expr pos:start="23:13" pos:end="23:47"><call pos:start="23:13" pos:end="23:42"><name pos:start="23:13" pos:end="23:38">bytestream2_get_bytes_left</name><argument_list pos:start="23:39" pos:end="23:42">(<argument pos:start="23:40" pos:end="23:41"><expr pos:start="23:40" pos:end="23:41"><name pos:start="23:40" pos:end="23:41">gb</name></expr></argument>)</argument_list></call> <operator pos:start="23:44" pos:end="23:45">&lt;=</operator> <literal type="number" pos:start="23:47" pos:end="23:47">0</literal></expr>)</condition> <block pos:start="23:50" pos:end="33:9">{<block_content pos:start="25:13" pos:end="31:39">

            <expr_stmt pos:start="25:13" pos:end="29:51"><expr pos:start="25:13" pos:end="29:50"><call pos:start="25:13" pos:end="29:50"><name pos:start="25:13" pos:end="25:18">av_log</name><argument_list pos:start="25:19" pos:end="29:50">(<argument pos:start="25:20" pos:end="25:24"><expr pos:start="25:20" pos:end="25:24"><name pos:start="25:20" pos:end="25:24">avctx</name></expr></argument>, <argument pos:start="25:27" pos:end="25:38"><expr pos:start="25:27" pos:end="25:38"><name pos:start="25:27" pos:end="25:38">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="27:20" pos:end="27:61"><expr pos:start="27:20" pos:end="27:61"><literal type="string" pos:start="27:20" pos:end="27:61">"MS RLE: bytestream overrun, %dx%d left\n"</literal></expr></argument>,

                   <argument pos:start="29:20" pos:end="29:43"><expr pos:start="29:20" pos:end="29:43"><name pos:start="29:20" pos:end="29:31"><name pos:start="29:20" pos:end="29:24">avctx</name><operator pos:start="29:25" pos:end="29:26">-&gt;</operator><name pos:start="29:27" pos:end="29:31">width</name></name> <operator pos:start="29:33" pos:end="29:33">-</operator> <name pos:start="29:35" pos:end="29:43">pixel_ptr</name></expr></argument>, <argument pos:start="29:46" pos:end="29:49"><expr pos:start="29:46" pos:end="29:49"><name pos:start="29:46" pos:end="29:49">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="31:13" pos:end="31:39">return <expr pos:start="31:20" pos:end="31:38"><name pos:start="31:20" pos:end="31:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:59"><expr pos:start="35:9" pos:end="35:58"><name pos:start="35:9" pos:end="35:16">rle_code</name> <operator pos:start="35:18" pos:end="35:18">=</operator> <name pos:start="35:20" pos:end="35:30">stream_byte</name> <operator pos:start="35:32" pos:end="35:32">=</operator> <call pos:start="35:34" pos:end="35:58"><name pos:start="35:34" pos:end="35:54">bytestream2_get_byteu</name><argument_list pos:start="35:55" pos:end="35:58">(<argument pos:start="35:56" pos:end="35:57"><expr pos:start="35:56" pos:end="35:57"><name pos:start="35:56" pos:end="35:57">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="163:9"><if pos:start="37:9" pos:end="129:9">if <condition pos:start="37:12" pos:end="37:26">(<expr pos:start="37:13" pos:end="37:25"><name pos:start="37:13" pos:end="37:20">rle_code</name> <operator pos:start="37:22" pos:end="37:23">==</operator> <literal type="number" pos:start="37:25" pos:end="37:25">0</literal></expr>)</condition> <block pos:start="37:28" pos:end="129:9">{<block_content pos:start="41:13" pos:end="127:13">

            <comment type="block" pos:start="39:13" pos:end="39:70">/* fetch the next byte to see how to handle escape code */</comment>

            <expr_stmt pos:start="41:13" pos:end="41:51"><expr pos:start="41:13" pos:end="41:50"><name pos:start="41:13" pos:end="41:23">stream_byte</name> <operator pos:start="41:25" pos:end="41:25">=</operator> <call pos:start="41:27" pos:end="41:50"><name pos:start="41:27" pos:end="41:46">bytestream2_get_byte</name><argument_list pos:start="41:47" pos:end="41:50">(<argument pos:start="41:48" pos:end="41:49"><expr pos:start="41:48" pos:end="41:49"><name pos:start="41:48" pos:end="41:49">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="43:13" pos:end="127:13"><if pos:start="43:13" pos:end="51:13">if <condition pos:start="43:16" pos:end="43:33">(<expr pos:start="43:17" pos:end="43:32"><name pos:start="43:17" pos:end="43:27">stream_byte</name> <operator pos:start="43:29" pos:end="43:30">==</operator> <literal type="number" pos:start="43:32" pos:end="43:32">0</literal></expr>)</condition> <block pos:start="43:35" pos:end="51:13">{<block_content pos:start="47:17" pos:end="49:30">

                <comment type="block" pos:start="45:17" pos:end="45:53">/* line is done, goto the next one */</comment>

                <expr_stmt pos:start="47:17" pos:end="47:23"><expr pos:start="47:17" pos:end="47:22"><name pos:start="47:17" pos:end="47:20">line</name><operator pos:start="47:21" pos:end="47:22">--</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="49:17" pos:end="49:30"><expr pos:start="49:17" pos:end="49:29"><name pos:start="49:17" pos:end="49:25">pixel_ptr</name> <operator pos:start="49:27" pos:end="49:27">=</operator> <literal type="number" pos:start="49:29" pos:end="49:29">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="51:15" pos:end="57:13">else if <condition pos:start="51:23" pos:end="51:40">(<expr pos:start="51:24" pos:end="51:39"><name pos:start="51:24" pos:end="51:34">stream_byte</name> <operator pos:start="51:36" pos:end="51:37">==</operator> <literal type="number" pos:start="51:39" pos:end="51:39">1</literal></expr>)</condition> <block pos:start="51:42" pos:end="57:13">{<block_content pos:start="55:17" pos:end="55:25">

                <comment type="block" pos:start="53:17" pos:end="53:36">/* decode is done */</comment>

                <return pos:start="55:17" pos:end="55:25">return <expr pos:start="55:24" pos:end="55:24"><literal type="number" pos:start="55:24" pos:end="55:24">0</literal></expr>;</return>

            </block_content>}</block></if> <if type="elseif" pos:start="57:15" pos:end="69:13">else if <condition pos:start="57:23" pos:end="57:40">(<expr pos:start="57:24" pos:end="57:39"><name pos:start="57:24" pos:end="57:34">stream_byte</name> <operator pos:start="57:36" pos:end="57:37">==</operator> <literal type="number" pos:start="57:39" pos:end="57:39">2</literal></expr>)</condition> <block pos:start="57:42" pos:end="69:13">{<block_content pos:start="61:17" pos:end="67:83">

                <comment type="block" pos:start="59:17" pos:end="59:57">/* reposition frame decode coordinates */</comment>

                <expr_stmt pos:start="61:17" pos:end="61:55"><expr pos:start="61:17" pos:end="61:54"><name pos:start="61:17" pos:end="61:27">stream_byte</name> <operator pos:start="61:29" pos:end="61:29">=</operator> <call pos:start="61:31" pos:end="61:54"><name pos:start="61:31" pos:end="61:50">bytestream2_get_byte</name><argument_list pos:start="61:51" pos:end="61:54">(<argument pos:start="61:52" pos:end="61:53"><expr pos:start="61:52" pos:end="61:53"><name pos:start="61:52" pos:end="61:53">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="63:17" pos:end="63:41"><expr pos:start="63:17" pos:end="63:40"><name pos:start="63:17" pos:end="63:25">pixel_ptr</name> <operator pos:start="63:27" pos:end="63:28">+=</operator> <name pos:start="63:30" pos:end="63:40">stream_byte</name></expr>;</expr_stmt>

                <expr_stmt pos:start="65:17" pos:end="65:55"><expr pos:start="65:17" pos:end="65:54"><name pos:start="65:17" pos:end="65:27">stream_byte</name> <operator pos:start="65:29" pos:end="65:29">=</operator> <call pos:start="65:31" pos:end="65:54"><name pos:start="65:31" pos:end="65:50">bytestream2_get_byte</name><argument_list pos:start="65:51" pos:end="65:54">(<argument pos:start="65:52" pos:end="65:53"><expr pos:start="65:52" pos:end="65:53"><name pos:start="65:52" pos:end="65:53">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="67:17" pos:end="67:83"><expr pos:start="67:17" pos:end="67:82"><call pos:start="67:17" pos:end="67:82"><name pos:start="67:17" pos:end="67:37">avpriv_request_sample</name><argument_list pos:start="67:38" pos:end="67:82">(<argument pos:start="67:39" pos:end="67:43"><expr pos:start="67:39" pos:end="67:43"><name pos:start="67:39" pos:end="67:43">avctx</name></expr></argument>, <argument pos:start="67:46" pos:end="67:68"><expr pos:start="67:46" pos:end="67:68"><literal type="string" pos:start="67:46" pos:end="67:68">"Unused stream byte %X"</literal></expr></argument>, <argument pos:start="67:71" pos:end="67:81"><expr pos:start="67:71" pos:end="67:81"><name pos:start="67:71" pos:end="67:81">stream_byte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="69:15" pos:end="127:13">else <block pos:start="69:20" pos:end="127:13">{<block_content pos:start="73:17" pos:end="125:44">

                <comment type="line" pos:start="71:17" pos:end="71:50">// copy pixels from encoded stream</comment>

                <expr_stmt pos:start="73:17" pos:end="73:45"><expr pos:start="73:17" pos:end="73:44"><name pos:start="73:17" pos:end="73:25">odd_pixel</name> <operator pos:start="73:27" pos:end="73:27">=</operator>  <name pos:start="73:30" pos:end="73:40">stream_byte</name> <operator pos:start="73:42" pos:end="73:42">&amp;</operator> <literal type="number" pos:start="73:44" pos:end="73:44">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="75:17" pos:end="75:49"><expr pos:start="75:17" pos:end="75:48"><name pos:start="75:17" pos:end="75:24">rle_code</name> <operator pos:start="75:26" pos:end="75:26">=</operator> <operator pos:start="75:28" pos:end="75:28">(</operator><name pos:start="75:29" pos:end="75:39">stream_byte</name> <operator pos:start="75:41" pos:end="75:41">+</operator> <literal type="number" pos:start="75:43" pos:end="75:43">1</literal><operator pos:start="75:44" pos:end="75:44">)</operator> <operator pos:start="75:46" pos:end="75:46">/</operator> <literal type="number" pos:start="75:48" pos:end="75:48">2</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="77:17" pos:end="77:45"><expr pos:start="77:17" pos:end="77:44"><name pos:start="77:17" pos:end="77:26">extra_byte</name> <operator pos:start="77:28" pos:end="77:28">=</operator> <name pos:start="77:30" pos:end="77:37">rle_code</name> <operator pos:start="77:39" pos:end="77:39">&amp;</operator> <literal type="number" pos:start="77:41" pos:end="77:44">0x01</literal></expr>;</expr_stmt>

                <if_stmt pos:start="79:17" pos:end="89:17"><if pos:start="79:17" pos:end="89:17">if <condition pos:start="79:20" pos:end="81:62">(<expr pos:start="79:21" pos:end="81:61"><name pos:start="79:21" pos:end="79:29">pixel_ptr</name> <operator pos:start="79:31" pos:end="79:31">+</operator> <literal type="number" pos:start="79:33" pos:end="79:33">2</literal><operator pos:start="79:34" pos:end="79:34">*</operator><name pos:start="79:35" pos:end="79:42">rle_code</name> <operator pos:start="79:44" pos:end="79:44">-</operator> <name pos:start="79:46" pos:end="79:54">odd_pixel</name> <operator pos:start="79:56" pos:end="79:56">&gt;</operator> <name pos:start="79:58" pos:end="79:69"><name pos:start="79:58" pos:end="79:62">avctx</name><operator pos:start="79:63" pos:end="79:64">-&gt;</operator><name pos:start="79:65" pos:end="79:69">width</name></name> <operator pos:start="79:71" pos:end="79:72">||</operator>

                    <call pos:start="81:21" pos:end="81:50"><name pos:start="81:21" pos:end="81:46">bytestream2_get_bytes_left</name><argument_list pos:start="81:47" pos:end="81:50">(<argument pos:start="81:48" pos:end="81:49"><expr pos:start="81:48" pos:end="81:49"><name pos:start="81:48" pos:end="81:49">gb</name></expr></argument>)</argument_list></call> <operator pos:start="81:52" pos:end="81:52">&lt;</operator> <name pos:start="81:54" pos:end="81:61">rle_code</name></expr>)</condition> <block pos:start="81:64" pos:end="89:17">{<block_content pos:start="83:21" pos:end="87:47">

                    <expr_stmt pos:start="83:21" pos:end="85:88"><expr pos:start="83:21" pos:end="85:87"><call pos:start="83:21" pos:end="85:87"><name pos:start="83:21" pos:end="83:26">av_log</name><argument_list pos:start="83:27" pos:end="85:87">(<argument pos:start="83:28" pos:end="83:32"><expr pos:start="83:28" pos:end="83:32"><name pos:start="83:28" pos:end="83:32">avctx</name></expr></argument>, <argument pos:start="83:35" pos:end="83:46"><expr pos:start="83:35" pos:end="83:46"><name pos:start="83:35" pos:end="83:46">AV_LOG_ERROR</name></expr></argument>,

                           <argument pos:start="85:28" pos:end="85:86"><expr pos:start="85:28" pos:end="85:86"><literal type="string" pos:start="85:28" pos:end="85:86">"MS RLE: frame/stream ptr just went out of bounds (copy)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="87:21" pos:end="87:47">return <expr pos:start="87:28" pos:end="87:46"><name pos:start="87:28" pos:end="87:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>



                <for pos:start="93:17" pos:end="117:17">for <control pos:start="93:21" pos:end="93:46">(<init pos:start="93:22" pos:end="93:27"><expr pos:start="93:22" pos:end="93:26"><name pos:start="93:22" pos:end="93:22">i</name> <operator pos:start="93:24" pos:end="93:24">=</operator> <literal type="number" pos:start="93:26" pos:end="93:26">0</literal></expr>;</init> <condition pos:start="93:29" pos:end="93:41"><expr pos:start="93:29" pos:end="93:40"><name pos:start="93:29" pos:end="93:29">i</name> <operator pos:start="93:31" pos:end="93:31">&lt;</operator> <name pos:start="93:33" pos:end="93:40">rle_code</name></expr>;</condition> <incr pos:start="93:43" pos:end="93:45"><expr pos:start="93:43" pos:end="93:45"><name pos:start="93:43" pos:end="93:43">i</name><operator pos:start="93:44" pos:end="93:45">++</operator></expr></incr>)</control> <block pos:start="93:48" pos:end="117:17">{<block_content pos:start="95:21" pos:end="115:32">

                    <if_stmt pos:start="95:21" pos:end="97:30"><if pos:start="95:21" pos:end="97:30">if <condition pos:start="95:24" pos:end="95:50">(<expr pos:start="95:25" pos:end="95:49"><name pos:start="95:25" pos:end="95:33">pixel_ptr</name> <operator pos:start="95:35" pos:end="95:36">&gt;=</operator> <name pos:start="95:38" pos:end="95:49"><name pos:start="95:38" pos:end="95:42">avctx</name><operator pos:start="95:43" pos:end="95:44">-&gt;</operator><name pos:start="95:45" pos:end="95:49">width</name></name></expr>)</condition><block type="pseudo" pos:start="97:25" pos:end="97:30"><block_content pos:start="97:25" pos:end="97:30">

                        <break pos:start="97:25" pos:end="97:30">break;</break></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="99:21" pos:end="99:60"><expr pos:start="99:21" pos:end="99:59"><name pos:start="99:21" pos:end="99:31">stream_byte</name> <operator pos:start="99:33" pos:end="99:33">=</operator> <call pos:start="99:35" pos:end="99:59"><name pos:start="99:35" pos:end="99:55">bytestream2_get_byteu</name><argument_list pos:start="99:56" pos:end="99:59">(<argument pos:start="99:57" pos:end="99:58"><expr pos:start="99:57" pos:end="99:58"><name pos:start="99:57" pos:end="99:58">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="101:21" pos:end="101:89"><expr pos:start="101:21" pos:end="101:88"><name pos:start="101:21" pos:end="101:69"><name pos:start="101:21" pos:end="101:23">pic</name><operator pos:start="101:24" pos:end="101:25">-&gt;</operator><name pos:start="101:26" pos:end="101:29">data</name><index pos:start="101:30" pos:end="101:32">[<expr pos:start="101:31" pos:end="101:31"><literal type="number" pos:start="101:31" pos:end="101:31">0</literal></expr>]</index><index pos:start="101:33" pos:end="101:69">[<expr pos:start="101:34" pos:end="101:68"><name pos:start="101:34" pos:end="101:37">line</name> <operator pos:start="101:39" pos:end="101:39">*</operator> <name pos:start="101:41" pos:end="101:56"><name pos:start="101:41" pos:end="101:43">pic</name><operator pos:start="101:44" pos:end="101:45">-&gt;</operator><name pos:start="101:46" pos:end="101:53">linesize</name><index pos:start="101:54" pos:end="101:56">[<expr pos:start="101:55" pos:end="101:55"><literal type="number" pos:start="101:55" pos:end="101:55">0</literal></expr>]</index></name> <operator pos:start="101:58" pos:end="101:58">+</operator> <name pos:start="101:60" pos:end="101:68">pixel_ptr</name></expr>]</index></name> <operator pos:start="101:71" pos:end="101:71">=</operator> <name pos:start="101:73" pos:end="101:83">stream_byte</name> <operator pos:start="101:85" pos:end="101:86">&gt;&gt;</operator> <literal type="number" pos:start="101:88" pos:end="101:88">4</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="103:21" pos:end="103:32"><expr pos:start="103:21" pos:end="103:31"><name pos:start="103:21" pos:end="103:29">pixel_ptr</name><operator pos:start="103:30" pos:end="103:31">++</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="105:21" pos:end="107:30"><if pos:start="105:21" pos:end="107:30">if <condition pos:start="105:24" pos:end="105:55">(<expr pos:start="105:25" pos:end="105:54"><name pos:start="105:25" pos:end="105:25">i</name> <operator pos:start="105:27" pos:end="105:27">+</operator> <literal type="number" pos:start="105:29" pos:end="105:29">1</literal> <operator pos:start="105:31" pos:end="105:32">==</operator> <name pos:start="105:34" pos:end="105:41">rle_code</name> <operator pos:start="105:43" pos:end="105:44">&amp;&amp;</operator> <name pos:start="105:46" pos:end="105:54">odd_pixel</name></expr>)</condition><block type="pseudo" pos:start="107:25" pos:end="107:30"><block_content pos:start="107:25" pos:end="107:30">

                        <break pos:start="107:25" pos:end="107:30">break;</break></block_content></block></if></if_stmt>

                    <if_stmt pos:start="109:21" pos:end="111:30"><if pos:start="109:21" pos:end="111:30">if <condition pos:start="109:24" pos:end="109:50">(<expr pos:start="109:25" pos:end="109:49"><name pos:start="109:25" pos:end="109:33">pixel_ptr</name> <operator pos:start="109:35" pos:end="109:36">&gt;=</operator> <name pos:start="109:38" pos:end="109:49"><name pos:start="109:38" pos:end="109:42">avctx</name><operator pos:start="109:43" pos:end="109:44">-&gt;</operator><name pos:start="109:45" pos:end="109:49">width</name></name></expr>)</condition><block type="pseudo" pos:start="111:25" pos:end="111:30"><block_content pos:start="111:25" pos:end="111:30">

                        <break pos:start="111:25" pos:end="111:30">break;</break></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="113:21" pos:end="113:91"><expr pos:start="113:21" pos:end="113:90"><name pos:start="113:21" pos:end="113:69"><name pos:start="113:21" pos:end="113:23">pic</name><operator pos:start="113:24" pos:end="113:25">-&gt;</operator><name pos:start="113:26" pos:end="113:29">data</name><index pos:start="113:30" pos:end="113:32">[<expr pos:start="113:31" pos:end="113:31"><literal type="number" pos:start="113:31" pos:end="113:31">0</literal></expr>]</index><index pos:start="113:33" pos:end="113:69">[<expr pos:start="113:34" pos:end="113:68"><name pos:start="113:34" pos:end="113:37">line</name> <operator pos:start="113:39" pos:end="113:39">*</operator> <name pos:start="113:41" pos:end="113:56"><name pos:start="113:41" pos:end="113:43">pic</name><operator pos:start="113:44" pos:end="113:45">-&gt;</operator><name pos:start="113:46" pos:end="113:53">linesize</name><index pos:start="113:54" pos:end="113:56">[<expr pos:start="113:55" pos:end="113:55"><literal type="number" pos:start="113:55" pos:end="113:55">0</literal></expr>]</index></name> <operator pos:start="113:58" pos:end="113:58">+</operator> <name pos:start="113:60" pos:end="113:68">pixel_ptr</name></expr>]</index></name> <operator pos:start="113:71" pos:end="113:71">=</operator> <name pos:start="113:73" pos:end="113:83">stream_byte</name> <operator pos:start="113:85" pos:end="113:85">&amp;</operator> <literal type="number" pos:start="113:87" pos:end="113:90">0x0F</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="115:21" pos:end="115:32"><expr pos:start="115:21" pos:end="115:31"><name pos:start="115:21" pos:end="115:29">pixel_ptr</name><operator pos:start="115:30" pos:end="115:31">++</operator></expr>;</expr_stmt>

                </block_content>}</block></for>



                <comment type="line" pos:start="121:17" pos:end="121:68">// if the RLE code is odd, skip a byte in the stream</comment>

                <if_stmt pos:start="123:17" pos:end="125:44"><if pos:start="123:17" pos:end="125:44">if <condition pos:start="123:20" pos:end="123:31">(<expr pos:start="123:21" pos:end="123:30"><name pos:start="123:21" pos:end="123:30">extra_byte</name></expr>)</condition><block type="pseudo" pos:start="125:21" pos:end="125:44"><block_content pos:start="125:21" pos:end="125:44">

                    <expr_stmt pos:start="125:21" pos:end="125:44"><expr pos:start="125:21" pos:end="125:43"><call pos:start="125:21" pos:end="125:43"><name pos:start="125:21" pos:end="125:36">bytestream2_skip</name><argument_list pos:start="125:37" pos:end="125:43">(<argument pos:start="125:38" pos:end="125:39"><expr pos:start="125:38" pos:end="125:39"><name pos:start="125:38" pos:end="125:39">gb</name></expr></argument>, <argument pos:start="125:42" pos:end="125:42"><expr pos:start="125:42" pos:end="125:42"><literal type="number" pos:start="125:42" pos:end="125:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="129:11" pos:end="163:9">else <block pos:start="129:16" pos:end="163:9">{<block_content pos:start="133:13" pos:end="161:13">

            <comment type="line" pos:start="131:13" pos:end="131:35">// decode a run of data</comment>

            <if_stmt pos:start="133:13" pos:end="141:13"><if pos:start="133:13" pos:end="141:13">if <condition pos:start="133:16" pos:end="133:56">(<expr pos:start="133:17" pos:end="133:55"><name pos:start="133:17" pos:end="133:25">pixel_ptr</name> <operator pos:start="133:27" pos:end="133:27">+</operator> <name pos:start="133:29" pos:end="133:36">rle_code</name> <operator pos:start="133:38" pos:end="133:38">&gt;</operator> <name pos:start="133:40" pos:end="133:51"><name pos:start="133:40" pos:end="133:44">avctx</name><operator pos:start="133:45" pos:end="133:46">-&gt;</operator><name pos:start="133:47" pos:end="133:51">width</name></name> <operator pos:start="133:53" pos:end="133:53">+</operator> <literal type="number" pos:start="133:55" pos:end="133:55">1</literal></expr>)</condition> <block pos:start="133:58" pos:end="141:13">{<block_content pos:start="135:17" pos:end="139:43">

                <expr_stmt pos:start="135:17" pos:end="137:120"><expr pos:start="135:17" pos:end="137:119"><call pos:start="135:17" pos:end="137:119"><name pos:start="135:17" pos:end="135:22">av_log</name><argument_list pos:start="135:23" pos:end="137:119">(<argument pos:start="135:24" pos:end="135:28"><expr pos:start="135:24" pos:end="135:28"><name pos:start="135:24" pos:end="135:28">avctx</name></expr></argument>, <argument pos:start="135:31" pos:end="135:42"><expr pos:start="135:31" pos:end="135:42"><name pos:start="135:31" pos:end="135:42">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="137:24" pos:end="137:83"><expr pos:start="137:24" pos:end="137:83"><literal type="string" pos:start="137:24" pos:end="137:83">"MS RLE: frame ptr just went out of bounds (run) %d %d %d\n"</literal></expr></argument>, <argument pos:start="137:86" pos:end="137:94"><expr pos:start="137:86" pos:end="137:94"><name pos:start="137:86" pos:end="137:94">pixel_ptr</name></expr></argument>, <argument pos:start="137:97" pos:end="137:104"><expr pos:start="137:97" pos:end="137:104"><name pos:start="137:97" pos:end="137:104">rle_code</name></expr></argument>, <argument pos:start="137:107" pos:end="137:118"><expr pos:start="137:107" pos:end="137:118"><name pos:start="137:107" pos:end="137:118"><name pos:start="137:107" pos:end="137:111">avctx</name><operator pos:start="137:112" pos:end="137:113">-&gt;</operator><name pos:start="137:114" pos:end="137:118">width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="139:17" pos:end="139:43">return <expr pos:start="139:24" pos:end="139:42"><name pos:start="139:24" pos:end="139:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:51"><expr pos:start="143:13" pos:end="143:50"><name pos:start="143:13" pos:end="143:23">stream_byte</name> <operator pos:start="143:25" pos:end="143:25">=</operator> <call pos:start="143:27" pos:end="143:50"><name pos:start="143:27" pos:end="143:46">bytestream2_get_byte</name><argument_list pos:start="143:47" pos:end="143:50">(<argument pos:start="143:48" pos:end="143:49"><expr pos:start="143:48" pos:end="143:49"><name pos:start="143:48" pos:end="143:49">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="145:13" pos:end="161:13">for <control pos:start="145:17" pos:end="145:42">(<init pos:start="145:18" pos:end="145:23"><expr pos:start="145:18" pos:end="145:22"><name pos:start="145:18" pos:end="145:18">i</name> <operator pos:start="145:20" pos:end="145:20">=</operator> <literal type="number" pos:start="145:22" pos:end="145:22">0</literal></expr>;</init> <condition pos:start="145:25" pos:end="145:37"><expr pos:start="145:25" pos:end="145:36"><name pos:start="145:25" pos:end="145:25">i</name> <operator pos:start="145:27" pos:end="145:27">&lt;</operator> <name pos:start="145:29" pos:end="145:36">rle_code</name></expr>;</condition> <incr pos:start="145:39" pos:end="145:41"><expr pos:start="145:39" pos:end="145:41"><name pos:start="145:39" pos:end="145:39">i</name><operator pos:start="145:40" pos:end="145:41">++</operator></expr></incr>)</control> <block pos:start="145:44" pos:end="161:13">{<block_content pos:start="147:17" pos:end="159:28">

                <if_stmt pos:start="147:17" pos:end="149:26"><if pos:start="147:17" pos:end="149:26">if <condition pos:start="147:20" pos:end="147:46">(<expr pos:start="147:21" pos:end="147:45"><name pos:start="147:21" pos:end="147:29">pixel_ptr</name> <operator pos:start="147:31" pos:end="147:32">&gt;=</operator> <name pos:start="147:34" pos:end="147:45"><name pos:start="147:34" pos:end="147:38">avctx</name><operator pos:start="147:39" pos:end="147:40">-&gt;</operator><name pos:start="147:41" pos:end="147:45">width</name></name></expr>)</condition><block type="pseudo" pos:start="149:21" pos:end="149:26"><block_content pos:start="149:21" pos:end="149:26">

                    <break pos:start="149:21" pos:end="149:26">break;</break></block_content></block></if></if_stmt>

                <if_stmt pos:start="151:17" pos:end="157:91"><if pos:start="151:17" pos:end="153:89">if <condition pos:start="151:20" pos:end="151:33">(<expr pos:start="151:21" pos:end="151:32"><operator pos:start="151:21" pos:end="151:21">(</operator><name pos:start="151:22" pos:end="151:22">i</name> <operator pos:start="151:24" pos:end="151:24">&amp;</operator> <literal type="number" pos:start="151:26" pos:end="151:26">1</literal><operator pos:start="151:27" pos:end="151:27">)</operator> <operator pos:start="151:29" pos:end="151:30">==</operator> <literal type="number" pos:start="151:32" pos:end="151:32">0</literal></expr>)</condition><block type="pseudo" pos:start="153:21" pos:end="153:89"><block_content pos:start="153:21" pos:end="153:89">

                    <expr_stmt pos:start="153:21" pos:end="153:89"><expr pos:start="153:21" pos:end="153:88"><name pos:start="153:21" pos:end="153:69"><name pos:start="153:21" pos:end="153:23">pic</name><operator pos:start="153:24" pos:end="153:25">-&gt;</operator><name pos:start="153:26" pos:end="153:29">data</name><index pos:start="153:30" pos:end="153:32">[<expr pos:start="153:31" pos:end="153:31"><literal type="number" pos:start="153:31" pos:end="153:31">0</literal></expr>]</index><index pos:start="153:33" pos:end="153:69">[<expr pos:start="153:34" pos:end="153:68"><name pos:start="153:34" pos:end="153:37">line</name> <operator pos:start="153:39" pos:end="153:39">*</operator> <name pos:start="153:41" pos:end="153:56"><name pos:start="153:41" pos:end="153:43">pic</name><operator pos:start="153:44" pos:end="153:45">-&gt;</operator><name pos:start="153:46" pos:end="153:53">linesize</name><index pos:start="153:54" pos:end="153:56">[<expr pos:start="153:55" pos:end="153:55"><literal type="number" pos:start="153:55" pos:end="153:55">0</literal></expr>]</index></name> <operator pos:start="153:58" pos:end="153:58">+</operator> <name pos:start="153:60" pos:end="153:68">pixel_ptr</name></expr>]</index></name> <operator pos:start="153:71" pos:end="153:71">=</operator> <name pos:start="153:73" pos:end="153:83">stream_byte</name> <operator pos:start="153:85" pos:end="153:86">&gt;&gt;</operator> <literal type="number" pos:start="153:88" pos:end="153:88">4</literal></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="155:17" pos:end="157:91">else<block type="pseudo" pos:start="157:21" pos:end="157:91"><block_content pos:start="157:21" pos:end="157:91">

                    <expr_stmt pos:start="157:21" pos:end="157:91"><expr pos:start="157:21" pos:end="157:90"><name pos:start="157:21" pos:end="157:69"><name pos:start="157:21" pos:end="157:23">pic</name><operator pos:start="157:24" pos:end="157:25">-&gt;</operator><name pos:start="157:26" pos:end="157:29">data</name><index pos:start="157:30" pos:end="157:32">[<expr pos:start="157:31" pos:end="157:31"><literal type="number" pos:start="157:31" pos:end="157:31">0</literal></expr>]</index><index pos:start="157:33" pos:end="157:69">[<expr pos:start="157:34" pos:end="157:68"><name pos:start="157:34" pos:end="157:37">line</name> <operator pos:start="157:39" pos:end="157:39">*</operator> <name pos:start="157:41" pos:end="157:56"><name pos:start="157:41" pos:end="157:43">pic</name><operator pos:start="157:44" pos:end="157:45">-&gt;</operator><name pos:start="157:46" pos:end="157:53">linesize</name><index pos:start="157:54" pos:end="157:56">[<expr pos:start="157:55" pos:end="157:55"><literal type="number" pos:start="157:55" pos:end="157:55">0</literal></expr>]</index></name> <operator pos:start="157:58" pos:end="157:58">+</operator> <name pos:start="157:60" pos:end="157:68">pixel_ptr</name></expr>]</index></name> <operator pos:start="157:71" pos:end="157:71">=</operator> <name pos:start="157:73" pos:end="157:83">stream_byte</name> <operator pos:start="157:85" pos:end="157:85">&amp;</operator> <literal type="number" pos:start="157:87" pos:end="157:90">0x0F</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="159:17" pos:end="159:28"><expr pos:start="159:17" pos:end="159:27"><name pos:start="159:17" pos:end="159:25">pixel_ptr</name><operator pos:start="159:26" pos:end="159:27">++</operator></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="169:5" pos:end="169:46">/* one last sanity check on the way out */</comment>

    <if_stmt pos:start="171:5" pos:end="181:5"><if pos:start="171:5" pos:end="181:5">if <condition pos:start="171:8" pos:end="171:39">(<expr pos:start="171:9" pos:end="171:38"><call pos:start="171:9" pos:end="171:38"><name pos:start="171:9" pos:end="171:34">bytestream2_get_bytes_left</name><argument_list pos:start="171:35" pos:end="171:38">(<argument pos:start="171:36" pos:end="171:37"><expr pos:start="171:36" pos:end="171:37"><name pos:start="171:36" pos:end="171:37">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="171:41" pos:end="181:5">{<block_content pos:start="173:9" pos:end="179:35">

        <expr_stmt pos:start="173:9" pos:end="177:47"><expr pos:start="173:9" pos:end="177:46"><call pos:start="173:9" pos:end="177:46"><name pos:start="173:9" pos:end="173:14">av_log</name><argument_list pos:start="173:15" pos:end="177:46">(<argument pos:start="173:16" pos:end="173:20"><expr pos:start="173:16" pos:end="173:20"><name pos:start="173:16" pos:end="173:20">avctx</name></expr></argument>, <argument pos:start="173:23" pos:end="173:34"><expr pos:start="173:23" pos:end="173:34"><name pos:start="173:23" pos:end="173:34">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="175:16" pos:end="175:69"><expr pos:start="175:16" pos:end="175:69"><literal type="string" pos:start="175:16" pos:end="175:69">"MS RLE: ended frame decode with %d bytes left over\n"</literal></expr></argument>,

               <argument pos:start="177:16" pos:end="177:45"><expr pos:start="177:16" pos:end="177:45"><call pos:start="177:16" pos:end="177:45"><name pos:start="177:16" pos:end="177:41">bytestream2_get_bytes_left</name><argument_list pos:start="177:42" pos:end="177:45">(<argument pos:start="177:43" pos:end="177:44"><expr pos:start="177:43" pos:end="177:44"><name pos:start="177:43" pos:end="177:44">gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="179:9" pos:end="179:35">return <expr pos:start="179:16" pos:end="179:34"><name pos:start="179:16" pos:end="179:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="185:5" pos:end="185:13">return <expr pos:start="185:12" pos:end="185:12"><literal type="number" pos:start="185:12" pos:end="185:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
