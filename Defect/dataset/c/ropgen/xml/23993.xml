<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23993.c" pos:tabs="8"><function pos:start="1:1" pos:end="51:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">h263p_decode_umotion</name><parameter_list pos:start="1:32" pos:end="1:61">(<parameter pos:start="1:33" pos:end="1:50"><decl pos:start="1:33" pos:end="1:50"><type pos:start="1:33" pos:end="1:50"><name pos:start="1:33" pos:end="1:46">MpegEncContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type> <name pos:start="1:50" pos:end="1:50">s</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:60"><decl pos:start="1:53" pos:end="1:60"><type pos:start="1:53" pos:end="1:60"><name pos:start="1:53" pos:end="1:55">int</name></type> <name pos:start="1:57" pos:end="1:60">pred</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="51:1">{<block_content pos:start="5:4" pos:end="47:15">

   <decl_stmt pos:start="5:4" pos:end="5:22"><decl pos:start="5:4" pos:end="5:15"><type pos:start="5:4" pos:end="5:6"><name pos:start="5:4" pos:end="5:6">int</name></type> <name pos:start="5:8" pos:end="5:11">code</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">0</literal></expr></init></decl>, <decl pos:start="5:18" pos:end="5:21"><type ref="prev" pos:start="5:4" pos:end="5:6"/><name pos:start="5:18" pos:end="5:21">sign</name></decl>;</decl_stmt>



   <if_stmt pos:start="9:4" pos:end="11:18"><if pos:start="9:4" pos:end="11:18">if <condition pos:start="9:7" pos:end="9:25">(<expr pos:start="9:8" pos:end="9:24"><call pos:start="9:8" pos:end="9:24"><name pos:start="9:8" pos:end="9:16">get_bits1</name><argument_list pos:start="9:17" pos:end="9:24">(<argument pos:start="9:18" pos:end="9:23"><expr pos:start="9:18" pos:end="9:23"><operator pos:start="9:18" pos:end="9:18">&amp;</operator><name pos:start="9:19" pos:end="9:23"><name pos:start="9:19" pos:end="9:19">s</name><operator pos:start="9:20" pos:end="9:21">-&gt;</operator><name pos:start="9:22" pos:end="9:23">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="11:7" pos:end="11:18"><block_content pos:start="11:7" pos:end="11:18"> <comment type="block" pos:start="9:27" pos:end="9:53">/* Motion difference = 0 */</comment>

      <return pos:start="11:7" pos:end="11:18">return <expr pos:start="11:14" pos:end="11:17"><name pos:start="11:14" pos:end="11:17">pred</name></expr>;</return></block_content></block></if></if_stmt>



   <expr_stmt pos:start="15:4" pos:end="15:32"><expr pos:start="15:4" pos:end="15:31"><name pos:start="15:4" pos:end="15:7">code</name> <operator pos:start="15:9" pos:end="15:9">=</operator> <literal type="number" pos:start="15:11" pos:end="15:13">2</literal> <operator pos:start="15:13" pos:end="15:13">+</operator> <call pos:start="15:15" pos:end="15:31"><name pos:start="15:15" pos:end="15:23">get_bits1</name><argument_list pos:start="15:24" pos:end="15:31">(<argument pos:start="15:25" pos:end="15:30"><expr pos:start="15:25" pos:end="15:30"><operator pos:start="15:25" pos:end="15:25">&amp;</operator><name pos:start="15:26" pos:end="15:30"><name pos:start="15:26" pos:end="15:26">s</name><operator pos:start="15:27" pos:end="15:28">-&gt;</operator><name pos:start="15:29" pos:end="15:30">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



   <while pos:start="19:4" pos:end="35:4">while <condition pos:start="19:10" pos:end="19:28">(<expr pos:start="19:11" pos:end="19:27"><call pos:start="19:11" pos:end="19:27"><name pos:start="19:11" pos:end="19:19">get_bits1</name><argument_list pos:start="19:20" pos:end="19:27">(<argument pos:start="19:21" pos:end="19:26"><expr pos:start="19:21" pos:end="19:26"><operator pos:start="19:21" pos:end="19:21">&amp;</operator><name pos:start="19:22" pos:end="19:26"><name pos:start="19:22" pos:end="19:22">s</name><operator pos:start="19:23" pos:end="19:24">-&gt;</operator><name pos:start="19:25" pos:end="19:26">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition>

   <block pos:start="21:4" pos:end="35:4">{<block_content pos:start="23:7" pos:end="33:7">

      <expr_stmt pos:start="23:7" pos:end="23:17"><expr pos:start="23:7" pos:end="23:16"><name pos:start="23:7" pos:end="23:10">code</name> <operator pos:start="23:12" pos:end="23:14">&lt;&lt;=</operator> <literal type="number" pos:start="23:16" pos:end="23:16">1</literal></expr>;</expr_stmt>

      <expr_stmt pos:start="25:7" pos:end="25:32"><expr pos:start="25:7" pos:end="25:31"><name pos:start="25:7" pos:end="25:10">code</name> <operator pos:start="25:12" pos:end="25:13">+=</operator> <call pos:start="25:15" pos:end="25:31"><name pos:start="25:15" pos:end="25:23">get_bits1</name><argument_list pos:start="25:24" pos:end="25:31">(<argument pos:start="25:25" pos:end="25:30"><expr pos:start="25:25" pos:end="25:30"><operator pos:start="25:25" pos:end="25:25">&amp;</operator><name pos:start="25:26" pos:end="25:30"><name pos:start="25:26" pos:end="25:26">s</name><operator pos:start="25:27" pos:end="25:28">-&gt;</operator><name pos:start="25:29" pos:end="25:30">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt pos:start="27:7" pos:end="33:7"><if pos:start="27:7" pos:end="33:7">if <condition pos:start="27:10" pos:end="27:24">(<expr pos:start="27:11" pos:end="27:23"><name pos:start="27:11" pos:end="27:14">code</name> <operator pos:start="27:16" pos:end="27:17">&gt;=</operator> <literal type="number" pos:start="27:19" pos:end="27:23">32768</literal></expr>)</condition> <block pos:start="27:26" pos:end="33:7">{<block_content pos:start="29:11" pos:end="31:37">

          <expr_stmt pos:start="29:11" pos:end="29:54"><expr pos:start="29:11" pos:end="29:53"><call pos:start="29:11" pos:end="29:53"><name pos:start="29:11" pos:end="29:31">avpriv_request_sample</name><argument_list pos:start="29:32" pos:end="29:53">(<argument pos:start="29:33" pos:end="29:40"><expr pos:start="29:33" pos:end="29:40"><name pos:start="29:33" pos:end="29:40"><name pos:start="29:33" pos:end="29:33">s</name><operator pos:start="29:34" pos:end="29:35">-&gt;</operator><name pos:start="29:36" pos:end="29:40">avctx</name></name></expr></argument>, <argument pos:start="29:43" pos:end="29:52"><expr pos:start="29:43" pos:end="29:52"><literal type="string" pos:start="29:43" pos:end="29:52">"Huge DMV"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <return pos:start="31:11" pos:end="31:37">return <expr pos:start="31:18" pos:end="31:36"><name pos:start="31:18" pos:end="31:36">AVERROR_INVALIDDATA</name></expr>;</return>

      </block_content>}</block></if></if_stmt>

   </block_content>}</block></while>

   <expr_stmt pos:start="37:4" pos:end="37:19"><expr pos:start="37:4" pos:end="37:18"><name pos:start="37:4" pos:end="37:7">sign</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <name pos:start="37:11" pos:end="37:14">code</name> <operator pos:start="37:16" pos:end="37:16">&amp;</operator> <literal type="number" pos:start="37:18" pos:end="37:18">1</literal></expr>;</expr_stmt>

   <expr_stmt pos:start="39:4" pos:end="39:14"><expr pos:start="39:4" pos:end="39:13"><name pos:start="39:4" pos:end="39:7">code</name> <operator pos:start="39:9" pos:end="39:11">&gt;&gt;=</operator> <literal type="number" pos:start="39:13" pos:end="39:13">1</literal></expr>;</expr_stmt>



   <expr_stmt pos:start="43:4" pos:end="43:49"><expr pos:start="43:4" pos:end="43:48"><name pos:start="43:4" pos:end="43:7">code</name> <operator pos:start="43:9" pos:end="43:9">=</operator> <ternary pos:start="43:11" pos:end="43:48"><condition pos:start="43:11" pos:end="43:18"><expr pos:start="43:11" pos:end="43:16"><operator pos:start="43:11" pos:end="43:11">(</operator><name pos:start="43:12" pos:end="43:15">sign</name><operator pos:start="43:16" pos:end="43:16">)</operator></expr> ?</condition><then pos:start="43:20" pos:end="43:32"> <expr pos:start="43:20" pos:end="43:32"><operator pos:start="43:20" pos:end="43:20">(</operator><name pos:start="43:21" pos:end="43:24">pred</name> <operator pos:start="43:26" pos:end="43:26">-</operator> <name pos:start="43:28" pos:end="43:31">code</name><operator pos:start="43:32" pos:end="43:32">)</operator></expr> </then><else pos:start="43:34" pos:end="43:48">: <expr pos:start="43:36" pos:end="43:48"><operator pos:start="43:36" pos:end="43:36">(</operator><name pos:start="43:37" pos:end="43:40">pred</name> <operator pos:start="43:42" pos:end="43:42">+</operator> <name pos:start="43:44" pos:end="43:47">code</name><operator pos:start="43:48" pos:end="43:48">)</operator></expr></else></ternary></expr>;</expr_stmt>

   <expr_stmt pos:start="45:4" pos:end="45:54"><expr pos:start="45:4" pos:end="45:53"><call pos:start="45:4" pos:end="45:53"><name pos:start="45:4" pos:end="45:10">ff_tlog</name><argument_list pos:start="45:11" pos:end="45:53">(<argument pos:start="45:12" pos:end="45:19"><expr pos:start="45:12" pos:end="45:19"><name pos:start="45:12" pos:end="45:19"><name pos:start="45:12" pos:end="45:12">s</name><operator pos:start="45:13" pos:end="45:14">-&gt;</operator><name pos:start="45:15" pos:end="45:19">avctx</name></name></expr></argument>,<argument pos:start="45:21" pos:end="45:46"><expr pos:start="45:21" pos:end="45:46"><literal type="string" pos:start="45:21" pos:end="45:46">"H.263+ UMV Motion = %d\n"</literal></expr></argument>, <argument pos:start="45:49" pos:end="45:52"><expr pos:start="45:49" pos:end="45:52"><name pos:start="45:49" pos:end="45:52">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   <return pos:start="47:4" pos:end="47:15">return <expr pos:start="47:11" pos:end="47:14"><name pos:start="47:11" pos:end="47:14">code</name></expr>;</return>



</block_content>}</block></function>
</unit>
