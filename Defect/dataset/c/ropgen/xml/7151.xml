<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7151.c" pos:tabs="8"><function pos:start="1:1" pos:end="483:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:26">ff_hevc_decode_nal_pps</name><parameter_list pos:start="1:27" pos:end="3:45">(<parameter pos:start="1:28" pos:end="1:44"><decl pos:start="1:28" pos:end="1:44"><type pos:start="1:28" pos:end="1:44"><name pos:start="1:28" pos:end="1:40">GetBitContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:44">gb</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:67"><decl pos:start="1:47" pos:end="1:67"><type pos:start="1:47" pos:end="1:67"><name pos:start="1:47" pos:end="1:60">AVCodecContext</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:67">avctx</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:44"><decl pos:start="3:28" pos:end="3:44"><type pos:start="3:28" pos:end="3:44"><name pos:start="3:28" pos:end="3:40">HEVCParamSets</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:44">ps</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="483:1">{<block_content pos:start="7:5" pos:end="481:15">

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:11">HEVCSPS</name>      <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:21">sps</name> <init pos:start="7:23" pos:end="7:28">= <expr pos:start="7:25" pos:end="7:28"><name pos:start="7:25" pos:end="7:28">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:18"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:14">ret</name> <init pos:start="9:16" pos:end="9:18">= <expr pos:start="9:18" pos:end="9:18"><literal type="number" pos:start="9:18" pos:end="9:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:16">int</name></type> <name pos:start="11:18" pos:end="11:23">pps_id</name> <init pos:start="11:25" pos:end="11:27">= <expr pos:start="11:27" pos:end="11:27"><literal type="number" pos:start="11:27" pos:end="11:27">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:13">ptrdiff_t</name></type> <name pos:start="13:15" pos:end="13:22">nal_size</name></decl>;</decl_stmt>



    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:15">AVBufferRef</name> <modifier pos:start="17:17" pos:end="17:17">*</modifier></type><name pos:start="17:18" pos:end="17:24">pps_buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:44"><decl pos:start="19:5" pos:end="19:43"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:11">HEVCPPS</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:16">pps</name> <init pos:start="19:18" pos:end="19:43">= <expr pos:start="19:20" pos:end="19:43"><call pos:start="19:20" pos:end="19:43"><name pos:start="19:20" pos:end="19:29">av_mallocz</name><argument_list pos:start="19:30" pos:end="19:43">(<argument pos:start="19:31" pos:end="19:42"><expr pos:start="19:31" pos:end="19:42"><sizeof pos:start="19:31" pos:end="19:42">sizeof<argument_list pos:start="19:37" pos:end="19:42">(<argument pos:start="19:38" pos:end="19:41"><expr pos:start="19:38" pos:end="19:41"><operator pos:start="19:38" pos:end="19:38">*</operator><name pos:start="19:39" pos:end="19:41">pps</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="25:31"><if pos:start="23:5" pos:end="25:31">if <condition pos:start="23:8" pos:end="23:13">(<expr pos:start="23:9" pos:end="23:12"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:12">pps</name></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:31"><block_content pos:start="25:9" pos:end="25:31">

        <return pos:start="25:9" pos:end="25:31">return <expr pos:start="25:16" pos:end="25:30"><call pos:start="25:16" pos:end="25:30"><name pos:start="25:16" pos:end="25:22">AVERROR</name><argument_list pos:start="25:23" pos:end="25:30">(<argument pos:start="25:24" pos:end="25:29"><expr pos:start="25:24" pos:end="25:29"><name pos:start="25:24" pos:end="25:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="31:55"><expr pos:start="29:5" pos:end="31:54"><name pos:start="29:5" pos:end="29:11">pps_buf</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <call pos:start="29:15" pos:end="31:54"><name pos:start="29:15" pos:end="29:30">av_buffer_create</name><argument_list pos:start="29:31" pos:end="31:54">(<argument pos:start="29:32" pos:end="29:45"><expr pos:start="29:32" pos:end="29:45"><operator pos:start="29:32" pos:end="29:32">(</operator><name pos:start="29:33" pos:end="29:39">uint8_t</name> <operator pos:start="29:41" pos:end="29:41">*</operator><operator pos:start="29:42" pos:end="29:42">)</operator><name pos:start="29:43" pos:end="29:45">pps</name></expr></argument>, <argument pos:start="29:48" pos:end="29:59"><expr pos:start="29:48" pos:end="29:59"><sizeof pos:start="29:48" pos:end="29:59">sizeof<argument_list pos:start="29:54" pos:end="29:59">(<argument pos:start="29:55" pos:end="29:58"><expr pos:start="29:55" pos:end="29:58"><operator pos:start="29:55" pos:end="29:55">*</operator><name pos:start="29:56" pos:end="29:58">pps</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                               <argument pos:start="31:32" pos:end="31:44"><expr pos:start="31:32" pos:end="31:44"><name pos:start="31:32" pos:end="31:44">hevc_pps_free</name></expr></argument>, <argument pos:start="31:47" pos:end="31:50"><expr pos:start="31:47" pos:end="31:50"><name pos:start="31:47" pos:end="31:50">NULL</name></expr></argument>, <argument pos:start="31:53" pos:end="31:53"><expr pos:start="31:53" pos:end="31:53"><literal type="number" pos:start="31:53" pos:end="31:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:17">(<expr pos:start="33:9" pos:end="33:16"><operator pos:start="33:9" pos:end="33:9">!</operator><name pos:start="33:10" pos:end="33:16">pps_buf</name></expr>)</condition> <block pos:start="33:19" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:31">

        <expr_stmt pos:start="35:9" pos:end="35:23"><expr pos:start="35:9" pos:end="35:22"><call pos:start="35:9" pos:end="35:22"><name pos:start="35:9" pos:end="35:16">av_freep</name><argument_list pos:start="35:17" pos:end="35:22">(<argument pos:start="35:18" pos:end="35:21"><expr pos:start="35:18" pos:end="35:21"><operator pos:start="35:18" pos:end="35:18">&amp;</operator><name pos:start="35:19" pos:end="35:21">pps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:31">return <expr pos:start="37:16" pos:end="37:30"><call pos:start="37:16" pos:end="37:30"><name pos:start="37:16" pos:end="37:22">AVERROR</name><argument_list pos:start="37:23" pos:end="37:30">(<argument pos:start="37:24" pos:end="37:29"><expr pos:start="37:24" pos:end="37:29"><name pos:start="37:24" pos:end="37:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:50"><expr pos:start="43:5" pos:end="43:49"><call pos:start="43:5" pos:end="43:49"><name pos:start="43:5" pos:end="43:10">av_log</name><argument_list pos:start="43:11" pos:end="43:49">(<argument pos:start="43:12" pos:end="43:16"><expr pos:start="43:12" pos:end="43:16"><name pos:start="43:12" pos:end="43:16">avctx</name></expr></argument>, <argument pos:start="43:19" pos:end="43:30"><expr pos:start="43:19" pos:end="43:30"><name pos:start="43:19" pos:end="43:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="43:33" pos:end="43:48"><expr pos:start="43:33" pos:end="43:48"><literal type="string" pos:start="43:33" pos:end="43:48">"Decoding PPS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:43"><expr pos:start="47:5" pos:end="47:42"><name pos:start="47:5" pos:end="47:12">nal_size</name> <operator pos:start="47:14" pos:end="47:14">=</operator> <name pos:start="47:16" pos:end="47:29"><name pos:start="47:16" pos:end="47:17">gb</name><operator pos:start="47:18" pos:end="47:19">-&gt;</operator><name pos:start="47:20" pos:end="47:29">buffer_end</name></name> <operator pos:start="47:31" pos:end="47:31">-</operator> <name pos:start="47:33" pos:end="47:42"><name pos:start="47:33" pos:end="47:34">gb</name><operator pos:start="47:35" pos:end="47:36">-&gt;</operator><name pos:start="47:37" pos:end="47:42">buffer</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="63:5"><if pos:start="49:5" pos:end="59:5">if <condition pos:start="49:8" pos:end="49:37">(<expr pos:start="49:9" pos:end="49:36"><name pos:start="49:9" pos:end="49:16">nal_size</name> <operator pos:start="49:18" pos:end="49:18">&gt;</operator> <sizeof pos:start="49:20" pos:end="49:36">sizeof<argument_list pos:start="49:26" pos:end="49:36">(<argument pos:start="49:27" pos:end="49:35"><expr pos:start="49:27" pos:end="49:35"><name pos:start="49:27" pos:end="49:35"><name pos:start="49:27" pos:end="49:29">pps</name><operator pos:start="49:30" pos:end="49:31">-&gt;</operator><name pos:start="49:32" pos:end="49:35">data</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="49:39" pos:end="59:5">{<block_content pos:start="51:9" pos:end="57:43">

        <expr_stmt pos:start="51:9" pos:end="55:44"><expr pos:start="51:9" pos:end="55:43"><call pos:start="51:9" pos:end="55:43"><name pos:start="51:9" pos:end="51:14">av_log</name><argument_list pos:start="51:15" pos:end="55:43">(<argument pos:start="51:16" pos:end="51:20"><expr pos:start="51:16" pos:end="51:20"><name pos:start="51:16" pos:end="51:20">avctx</name></expr></argument>, <argument pos:start="51:23" pos:end="51:36"><expr pos:start="51:23" pos:end="51:36"><name pos:start="51:23" pos:end="51:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="51:39" pos:end="53:61"><expr pos:start="51:39" pos:end="53:61"><literal type="string" pos:start="51:39" pos:end="51:72">"Truncating likely oversized PPS "</literal>

               <literal type="string" pos:start="53:16" pos:end="53:19">"(%"</literal><name pos:start="53:20" pos:end="53:36">PTRDIFF_SPECIFIER</name><literal type="string" pos:start="53:37" pos:end="53:42">" &gt; %"</literal><name pos:start="53:43" pos:end="53:56">SIZE_SPECIFIER</name><literal type="string" pos:start="53:57" pos:end="53:61">")\n"</literal></expr></argument>,

               <argument pos:start="55:16" pos:end="55:23"><expr pos:start="55:16" pos:end="55:23"><name pos:start="55:16" pos:end="55:23">nal_size</name></expr></argument>, <argument pos:start="55:26" pos:end="55:42"><expr pos:start="55:26" pos:end="55:42"><sizeof pos:start="55:26" pos:end="55:42">sizeof<argument_list pos:start="55:32" pos:end="55:42">(<argument pos:start="55:33" pos:end="55:41"><expr pos:start="55:33" pos:end="55:41"><name pos:start="55:33" pos:end="55:41"><name pos:start="55:33" pos:end="55:35">pps</name><operator pos:start="55:36" pos:end="55:37">-&gt;</operator><name pos:start="55:38" pos:end="55:41">data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:43"><expr pos:start="57:9" pos:end="57:42"><name pos:start="57:9" pos:end="57:22"><name pos:start="57:9" pos:end="57:11">pps</name><operator pos:start="57:12" pos:end="57:13">-&gt;</operator><name pos:start="57:14" pos:end="57:22">data_size</name></name> <operator pos:start="57:24" pos:end="57:24">=</operator> <sizeof pos:start="57:26" pos:end="57:42">sizeof<argument_list pos:start="57:32" pos:end="57:42">(<argument pos:start="57:33" pos:end="57:41"><expr pos:start="57:33" pos:end="57:41"><name pos:start="57:33" pos:end="57:41"><name pos:start="57:33" pos:end="57:35">pps</name><operator pos:start="57:36" pos:end="57:37">-&gt;</operator><name pos:start="57:38" pos:end="57:41">data</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="59:7" pos:end="63:5">else <block pos:start="59:12" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:34">

        <expr_stmt pos:start="61:9" pos:end="61:34"><expr pos:start="61:9" pos:end="61:33"><name pos:start="61:9" pos:end="61:22"><name pos:start="61:9" pos:end="61:11">pps</name><operator pos:start="61:12" pos:end="61:13">-&gt;</operator><name pos:start="61:14" pos:end="61:22">data_size</name></name> <operator pos:start="61:24" pos:end="61:24">=</operator> <name pos:start="61:26" pos:end="61:33">nal_size</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:50"><expr pos:start="65:5" pos:end="65:49"><call pos:start="65:5" pos:end="65:49"><name pos:start="65:5" pos:end="65:10">memcpy</name><argument_list pos:start="65:11" pos:end="65:49">(<argument pos:start="65:12" pos:end="65:20"><expr pos:start="65:12" pos:end="65:20"><name pos:start="65:12" pos:end="65:20"><name pos:start="65:12" pos:end="65:14">pps</name><operator pos:start="65:15" pos:end="65:16">-&gt;</operator><name pos:start="65:17" pos:end="65:20">data</name></name></expr></argument>, <argument pos:start="65:23" pos:end="65:32"><expr pos:start="65:23" pos:end="65:32"><name pos:start="65:23" pos:end="65:32"><name pos:start="65:23" pos:end="65:24">gb</name><operator pos:start="65:25" pos:end="65:26">-&gt;</operator><name pos:start="65:27" pos:end="65:32">buffer</name></name></expr></argument>, <argument pos:start="65:35" pos:end="65:48"><expr pos:start="65:35" pos:end="65:48"><name pos:start="65:35" pos:end="65:48"><name pos:start="65:35" pos:end="65:37">pps</name><operator pos:start="65:38" pos:end="65:39">-&gt;</operator><name pos:start="65:40" pos:end="65:48">data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="69:5" pos:end="69:21">// Default values</comment>

    <expr_stmt pos:start="71:5" pos:end="71:51"><expr pos:start="71:5" pos:end="71:50"><name pos:start="71:5" pos:end="71:46"><name pos:start="71:5" pos:end="71:7">pps</name><operator pos:start="71:8" pos:end="71:9">-&gt;</operator><name pos:start="71:10" pos:end="71:46">loop_filter_across_tiles_enabled_flag</name></name> <operator pos:start="71:48" pos:end="71:48">=</operator> <literal type="number" pos:start="71:50" pos:end="71:50">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:51"><expr pos:start="73:5" pos:end="73:50"><name pos:start="73:5" pos:end="73:25"><name pos:start="73:5" pos:end="73:7">pps</name><operator pos:start="73:8" pos:end="73:9">-&gt;</operator><name pos:start="73:10" pos:end="73:25">num_tile_columns</name></name>                      <operator pos:start="73:48" pos:end="73:48">=</operator> <literal type="number" pos:start="73:50" pos:end="73:50">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:51"><expr pos:start="75:5" pos:end="75:50"><name pos:start="75:5" pos:end="75:22"><name pos:start="75:5" pos:end="75:7">pps</name><operator pos:start="75:8" pos:end="75:9">-&gt;</operator><name pos:start="75:10" pos:end="75:22">num_tile_rows</name></name>                         <operator pos:start="75:48" pos:end="75:48">=</operator> <literal type="number" pos:start="75:50" pos:end="75:50">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:51"><expr pos:start="77:5" pos:end="77:50"><name pos:start="77:5" pos:end="77:29"><name pos:start="77:5" pos:end="77:7">pps</name><operator pos:start="77:8" pos:end="77:9">-&gt;</operator><name pos:start="77:10" pos:end="77:29">uniform_spacing_flag</name></name>                  <operator pos:start="77:48" pos:end="77:48">=</operator> <literal type="number" pos:start="77:50" pos:end="77:50">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:51"><expr pos:start="79:5" pos:end="79:50"><name pos:start="79:5" pos:end="79:20"><name pos:start="79:5" pos:end="79:7">pps</name><operator pos:start="79:8" pos:end="79:9">-&gt;</operator><name pos:start="79:10" pos:end="79:20">disable_dbf</name></name>                           <operator pos:start="79:48" pos:end="79:48">=</operator> <literal type="number" pos:start="79:50" pos:end="79:50">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:51"><expr pos:start="81:5" pos:end="81:50"><name pos:start="81:5" pos:end="81:20"><name pos:start="81:5" pos:end="81:7">pps</name><operator pos:start="81:8" pos:end="81:9">-&gt;</operator><name pos:start="81:10" pos:end="81:20">beta_offset</name></name>                           <operator pos:start="81:48" pos:end="81:48">=</operator> <literal type="number" pos:start="81:50" pos:end="81:50">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:51"><expr pos:start="83:5" pos:end="83:50"><name pos:start="83:5" pos:end="83:18"><name pos:start="83:5" pos:end="83:7">pps</name><operator pos:start="83:8" pos:end="83:9">-&gt;</operator><name pos:start="83:10" pos:end="83:18">tc_offset</name></name>                             <operator pos:start="83:48" pos:end="83:48">=</operator> <literal type="number" pos:start="83:50" pos:end="83:50">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:51"><expr pos:start="85:5" pos:end="85:50"><name pos:start="85:5" pos:end="85:43"><name pos:start="85:5" pos:end="85:7">pps</name><operator pos:start="85:8" pos:end="85:9">-&gt;</operator><name pos:start="85:10" pos:end="85:43">log2_max_transform_skip_block_size</name></name>    <operator pos:start="85:48" pos:end="85:48">=</operator> <literal type="number" pos:start="85:50" pos:end="85:50">2</literal></expr>;</expr_stmt>



    <comment type="line" pos:start="89:5" pos:end="89:23">// Coded parameters</comment>

    <expr_stmt pos:start="91:5" pos:end="91:36"><expr pos:start="91:5" pos:end="91:35"><name pos:start="91:5" pos:end="91:10">pps_id</name> <operator pos:start="91:12" pos:end="91:12">=</operator> <call pos:start="91:14" pos:end="91:35"><name pos:start="91:14" pos:end="91:31">get_ue_golomb_long</name><argument_list pos:start="91:32" pos:end="91:35">(<argument pos:start="91:33" pos:end="91:34"><expr pos:start="91:33" pos:end="91:34"><name pos:start="91:33" pos:end="91:34">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="93:5" pos:end="101:5"><if pos:start="93:5" pos:end="101:5">if <condition pos:start="93:8" pos:end="93:37">(<expr pos:start="93:9" pos:end="93:36"><name pos:start="93:9" pos:end="93:14">pps_id</name> <operator pos:start="93:16" pos:end="93:17">&gt;=</operator> <name pos:start="93:19" pos:end="93:36">HEVC_MAX_PPS_COUNT</name></expr>)</condition> <block pos:start="93:39" pos:end="101:5">{<block_content pos:start="95:9" pos:end="99:17">

        <expr_stmt pos:start="95:9" pos:end="95:73"><expr pos:start="95:9" pos:end="95:72"><call pos:start="95:9" pos:end="95:72"><name pos:start="95:9" pos:end="95:14">av_log</name><argument_list pos:start="95:15" pos:end="95:72">(<argument pos:start="95:16" pos:end="95:20"><expr pos:start="95:16" pos:end="95:20"><name pos:start="95:16" pos:end="95:20">avctx</name></expr></argument>, <argument pos:start="95:23" pos:end="95:34"><expr pos:start="95:23" pos:end="95:34"><name pos:start="95:23" pos:end="95:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="95:37" pos:end="95:63"><expr pos:start="95:37" pos:end="95:63"><literal type="string" pos:start="95:37" pos:end="95:63">"PPS id out of range: %d\n"</literal></expr></argument>, <argument pos:start="95:66" pos:end="95:71"><expr pos:start="95:66" pos:end="95:71"><name pos:start="95:66" pos:end="95:71">pps_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:34"><expr pos:start="97:9" pos:end="97:33"><name pos:start="97:9" pos:end="97:11">ret</name> <operator pos:start="97:13" pos:end="97:13">=</operator> <name pos:start="97:15" pos:end="97:33">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

        <goto pos:start="99:9" pos:end="99:17">goto <name pos:start="99:14" pos:end="99:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:41"><expr pos:start="103:5" pos:end="103:40"><name pos:start="103:5" pos:end="103:15"><name pos:start="103:5" pos:end="103:7">pps</name><operator pos:start="103:8" pos:end="103:9">-&gt;</operator><name pos:start="103:10" pos:end="103:15">sps_id</name></name> <operator pos:start="103:17" pos:end="103:17">=</operator> <call pos:start="103:19" pos:end="103:40"><name pos:start="103:19" pos:end="103:36">get_ue_golomb_long</name><argument_list pos:start="103:37" pos:end="103:40">(<argument pos:start="103:38" pos:end="103:39"><expr pos:start="103:38" pos:end="103:39"><name pos:start="103:38" pos:end="103:39">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="105:5" pos:end="113:5"><if pos:start="105:5" pos:end="113:5">if <condition pos:start="105:8" pos:end="105:42">(<expr pos:start="105:9" pos:end="105:41"><name pos:start="105:9" pos:end="105:19"><name pos:start="105:9" pos:end="105:11">pps</name><operator pos:start="105:12" pos:end="105:13">-&gt;</operator><name pos:start="105:14" pos:end="105:19">sps_id</name></name> <operator pos:start="105:21" pos:end="105:22">&gt;=</operator> <name pos:start="105:24" pos:end="105:41">HEVC_MAX_SPS_COUNT</name></expr>)</condition> <block pos:start="105:44" pos:end="113:5">{<block_content pos:start="107:9" pos:end="111:17">

        <expr_stmt pos:start="107:9" pos:end="107:78"><expr pos:start="107:9" pos:end="107:77"><call pos:start="107:9" pos:end="107:77"><name pos:start="107:9" pos:end="107:14">av_log</name><argument_list pos:start="107:15" pos:end="107:77">(<argument pos:start="107:16" pos:end="107:20"><expr pos:start="107:16" pos:end="107:20"><name pos:start="107:16" pos:end="107:20">avctx</name></expr></argument>, <argument pos:start="107:23" pos:end="107:34"><expr pos:start="107:23" pos:end="107:34"><name pos:start="107:23" pos:end="107:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="107:37" pos:end="107:63"><expr pos:start="107:37" pos:end="107:63"><literal type="string" pos:start="107:37" pos:end="107:63">"SPS id out of range: %d\n"</literal></expr></argument>, <argument pos:start="107:66" pos:end="107:76"><expr pos:start="107:66" pos:end="107:76"><name pos:start="107:66" pos:end="107:76"><name pos:start="107:66" pos:end="107:68">pps</name><operator pos:start="107:69" pos:end="107:70">-&gt;</operator><name pos:start="107:71" pos:end="107:76">sps_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:34"><expr pos:start="109:9" pos:end="109:33"><name pos:start="109:9" pos:end="109:11">ret</name> <operator pos:start="109:13" pos:end="109:13">=</operator> <name pos:start="109:15" pos:end="109:33">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

        <goto pos:start="111:9" pos:end="111:17">goto <name pos:start="111:14" pos:end="111:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="115:5" pos:end="123:5"><if pos:start="115:5" pos:end="123:5">if <condition pos:start="115:8" pos:end="115:35">(<expr pos:start="115:9" pos:end="115:34"><operator pos:start="115:9" pos:end="115:9">!</operator><name pos:start="115:10" pos:end="115:34"><name pos:start="115:10" pos:end="115:11">ps</name><operator pos:start="115:12" pos:end="115:13">-&gt;</operator><name pos:start="115:14" pos:end="115:21">sps_list</name><index pos:start="115:22" pos:end="115:34">[<expr pos:start="115:23" pos:end="115:33"><name pos:start="115:23" pos:end="115:33"><name pos:start="115:23" pos:end="115:25">pps</name><operator pos:start="115:26" pos:end="115:27">-&gt;</operator><name pos:start="115:28" pos:end="115:33">sps_id</name></name></expr>]</index></name></expr>)</condition> <block pos:start="115:37" pos:end="123:5">{<block_content pos:start="117:9" pos:end="121:17">

        <expr_stmt pos:start="117:9" pos:end="117:77"><expr pos:start="117:9" pos:end="117:76"><call pos:start="117:9" pos:end="117:76"><name pos:start="117:9" pos:end="117:14">av_log</name><argument_list pos:start="117:15" pos:end="117:76">(<argument pos:start="117:16" pos:end="117:20"><expr pos:start="117:16" pos:end="117:20"><name pos:start="117:16" pos:end="117:20">avctx</name></expr></argument>, <argument pos:start="117:23" pos:end="117:34"><expr pos:start="117:23" pos:end="117:34"><name pos:start="117:23" pos:end="117:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="117:37" pos:end="117:62"><expr pos:start="117:37" pos:end="117:62"><literal type="string" pos:start="117:37" pos:end="117:62">"SPS %u does not exist.\n"</literal></expr></argument>, <argument pos:start="117:65" pos:end="117:75"><expr pos:start="117:65" pos:end="117:75"><name pos:start="117:65" pos:end="117:75"><name pos:start="117:65" pos:end="117:67">pps</name><operator pos:start="117:68" pos:end="117:69">-&gt;</operator><name pos:start="117:70" pos:end="117:75">sps_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:34"><expr pos:start="119:9" pos:end="119:33"><name pos:start="119:9" pos:end="119:11">ret</name> <operator pos:start="119:13" pos:end="119:13">=</operator> <name pos:start="119:15" pos:end="119:33">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

        <goto pos:start="121:9" pos:end="121:17">goto <name pos:start="121:14" pos:end="121:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:53"><expr pos:start="125:5" pos:end="125:52"><name pos:start="125:5" pos:end="125:7">sps</name> <operator pos:start="125:9" pos:end="125:9">=</operator> <operator pos:start="125:11" pos:end="125:11">(</operator><name pos:start="125:12" pos:end="125:18">HEVCSPS</name> <operator pos:start="125:20" pos:end="125:20">*</operator><operator pos:start="125:21" pos:end="125:21">)</operator><name pos:start="125:22" pos:end="125:46"><name pos:start="125:22" pos:end="125:23">ps</name><operator pos:start="125:24" pos:end="125:25">-&gt;</operator><name pos:start="125:26" pos:end="125:33">sps_list</name><index pos:start="125:34" pos:end="125:46">[<expr pos:start="125:35" pos:end="125:45"><name pos:start="125:35" pos:end="125:45"><name pos:start="125:35" pos:end="125:37">pps</name><operator pos:start="125:38" pos:end="125:39">-&gt;</operator><name pos:start="125:40" pos:end="125:45">sps_id</name></name></expr>]</index></name><operator pos:start="125:47" pos:end="125:48">-&gt;</operator><name pos:start="125:49" pos:end="125:52">data</name></expr>;</expr_stmt>



    <expr_stmt pos:start="129:5" pos:end="129:63"><expr pos:start="129:5" pos:end="129:62"><name pos:start="129:5" pos:end="129:46"><name pos:start="129:5" pos:end="129:7">pps</name><operator pos:start="129:8" pos:end="129:9">-&gt;</operator><name pos:start="129:10" pos:end="129:46">dependent_slice_segments_enabled_flag</name></name> <operator pos:start="129:48" pos:end="129:48">=</operator> <call pos:start="129:50" pos:end="129:62"><name pos:start="129:50" pos:end="129:58">get_bits1</name><argument_list pos:start="129:59" pos:end="129:62">(<argument pos:start="129:60" pos:end="129:61"><expr pos:start="129:60" pos:end="129:61"><name pos:start="129:60" pos:end="129:61">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:63"><expr pos:start="131:5" pos:end="131:62"><name pos:start="131:5" pos:end="131:33"><name pos:start="131:5" pos:end="131:7">pps</name><operator pos:start="131:8" pos:end="131:9">-&gt;</operator><name pos:start="131:10" pos:end="131:33">output_flag_present_flag</name></name>              <operator pos:start="131:48" pos:end="131:48">=</operator> <call pos:start="131:50" pos:end="131:62"><name pos:start="131:50" pos:end="131:58">get_bits1</name><argument_list pos:start="131:59" pos:end="131:62">(<argument pos:start="131:60" pos:end="131:61"><expr pos:start="131:60" pos:end="131:61"><name pos:start="131:60" pos:end="131:61">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:65"><expr pos:start="133:5" pos:end="133:64"><name pos:start="133:5" pos:end="133:36"><name pos:start="133:5" pos:end="133:7">pps</name><operator pos:start="133:8" pos:end="133:9">-&gt;</operator><name pos:start="133:10" pos:end="133:36">num_extra_slice_header_bits</name></name>           <operator pos:start="133:48" pos:end="133:48">=</operator> <call pos:start="133:50" pos:end="133:64"><name pos:start="133:50" pos:end="133:57">get_bits</name><argument_list pos:start="133:58" pos:end="133:64">(<argument pos:start="133:59" pos:end="133:60"><expr pos:start="133:59" pos:end="133:60"><name pos:start="133:59" pos:end="133:60">gb</name></expr></argument>, <argument pos:start="133:63" pos:end="133:63"><expr pos:start="133:63" pos:end="133:63"><literal type="number" pos:start="133:63" pos:end="133:63">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="137:5" pos:end="137:47"><expr pos:start="137:5" pos:end="137:46"><name pos:start="137:5" pos:end="137:30"><name pos:start="137:5" pos:end="137:7">pps</name><operator pos:start="137:8" pos:end="137:9">-&gt;</operator><name pos:start="137:10" pos:end="137:30">sign_data_hiding_flag</name></name> <operator pos:start="137:32" pos:end="137:32">=</operator> <call pos:start="137:34" pos:end="137:46"><name pos:start="137:34" pos:end="137:42">get_bits1</name><argument_list pos:start="137:43" pos:end="137:46">(<argument pos:start="137:44" pos:end="137:45"><expr pos:start="137:44" pos:end="137:45"><name pos:start="137:44" pos:end="137:45">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="141:5" pos:end="141:49"><expr pos:start="141:5" pos:end="141:48"><name pos:start="141:5" pos:end="141:32"><name pos:start="141:5" pos:end="141:7">pps</name><operator pos:start="141:8" pos:end="141:9">-&gt;</operator><name pos:start="141:10" pos:end="141:32">cabac_init_present_flag</name></name> <operator pos:start="141:34" pos:end="141:34">=</operator> <call pos:start="141:36" pos:end="141:48"><name pos:start="141:36" pos:end="141:44">get_bits1</name><argument_list pos:start="141:45" pos:end="141:48">(<argument pos:start="141:46" pos:end="141:47"><expr pos:start="141:46" pos:end="141:47"><name pos:start="141:46" pos:end="141:47">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="145:5" pos:end="145:68"><expr pos:start="145:5" pos:end="145:67"><name pos:start="145:5" pos:end="145:38"><name pos:start="145:5" pos:end="145:7">pps</name><operator pos:start="145:8" pos:end="145:9">-&gt;</operator><name pos:start="145:10" pos:end="145:38">num_ref_idx_l0_default_active</name></name> <operator pos:start="145:40" pos:end="145:40">=</operator> <call pos:start="145:42" pos:end="145:63"><name pos:start="145:42" pos:end="145:59">get_ue_golomb_long</name><argument_list pos:start="145:60" pos:end="145:63">(<argument pos:start="145:61" pos:end="145:62"><expr pos:start="145:61" pos:end="145:62"><name pos:start="145:61" pos:end="145:62">gb</name></expr></argument>)</argument_list></call> <operator pos:start="145:65" pos:end="145:65">+</operator> <literal type="number" pos:start="145:67" pos:end="145:67">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:68"><expr pos:start="147:5" pos:end="147:67"><name pos:start="147:5" pos:end="147:38"><name pos:start="147:5" pos:end="147:7">pps</name><operator pos:start="147:8" pos:end="147:9">-&gt;</operator><name pos:start="147:10" pos:end="147:38">num_ref_idx_l1_default_active</name></name> <operator pos:start="147:40" pos:end="147:40">=</operator> <call pos:start="147:42" pos:end="147:63"><name pos:start="147:42" pos:end="147:59">get_ue_golomb_long</name><argument_list pos:start="147:60" pos:end="147:63">(<argument pos:start="147:61" pos:end="147:62"><expr pos:start="147:61" pos:end="147:62"><name pos:start="147:61" pos:end="147:62">gb</name></expr></argument>)</argument_list></call> <operator pos:start="147:65" pos:end="147:65">+</operator> <literal type="number" pos:start="147:67" pos:end="147:67">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="151:5" pos:end="151:49"><expr pos:start="151:5" pos:end="151:48"><name pos:start="151:5" pos:end="151:28"><name pos:start="151:5" pos:end="151:7">pps</name><operator pos:start="151:8" pos:end="151:9">-&gt;</operator><name pos:start="151:10" pos:end="151:28">pic_init_qp_minus26</name></name> <operator pos:start="151:30" pos:end="151:30">=</operator> <call pos:start="151:32" pos:end="151:48"><name pos:start="151:32" pos:end="151:44">get_se_golomb</name><argument_list pos:start="151:45" pos:end="151:48">(<argument pos:start="151:46" pos:end="151:47"><expr pos:start="151:46" pos:end="151:47"><name pos:start="151:46" pos:end="151:47">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="155:5" pos:end="155:53"><expr pos:start="155:5" pos:end="155:52"><name pos:start="155:5" pos:end="155:36"><name pos:start="155:5" pos:end="155:7">pps</name><operator pos:start="155:8" pos:end="155:9">-&gt;</operator><name pos:start="155:10" pos:end="155:36">constrained_intra_pred_flag</name></name> <operator pos:start="155:38" pos:end="155:38">=</operator> <call pos:start="155:40" pos:end="155:52"><name pos:start="155:40" pos:end="155:48">get_bits1</name><argument_list pos:start="155:49" pos:end="155:52">(<argument pos:start="155:50" pos:end="155:51"><expr pos:start="155:50" pos:end="155:51"><name pos:start="155:50" pos:end="155:51">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:53"><expr pos:start="157:5" pos:end="157:52"><name pos:start="157:5" pos:end="157:36"><name pos:start="157:5" pos:end="157:7">pps</name><operator pos:start="157:8" pos:end="157:9">-&gt;</operator><name pos:start="157:10" pos:end="157:36">transform_skip_enabled_flag</name></name> <operator pos:start="157:38" pos:end="157:38">=</operator> <call pos:start="157:40" pos:end="157:52"><name pos:start="157:40" pos:end="157:48">get_bits1</name><argument_list pos:start="157:49" pos:end="157:52">(<argument pos:start="157:50" pos:end="157:51"><expr pos:start="157:50" pos:end="157:51"><name pos:start="157:50" pos:end="157:51">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="161:5" pos:end="161:50"><expr pos:start="161:5" pos:end="161:49"><name pos:start="161:5" pos:end="161:33"><name pos:start="161:5" pos:end="161:7">pps</name><operator pos:start="161:8" pos:end="161:9">-&gt;</operator><name pos:start="161:10" pos:end="161:33">cu_qp_delta_enabled_flag</name></name> <operator pos:start="161:35" pos:end="161:35">=</operator> <call pos:start="161:37" pos:end="161:49"><name pos:start="161:37" pos:end="161:45">get_bits1</name><argument_list pos:start="161:46" pos:end="161:49">(<argument pos:start="161:47" pos:end="161:48"><expr pos:start="161:47" pos:end="161:48"><name pos:start="161:47" pos:end="161:48">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:38"><expr pos:start="163:5" pos:end="163:37"><name pos:start="163:5" pos:end="163:31"><name pos:start="163:5" pos:end="163:7">pps</name><operator pos:start="163:8" pos:end="163:9">-&gt;</operator><name pos:start="163:10" pos:end="163:31">diff_cu_qp_delta_depth</name></name>   <operator pos:start="163:35" pos:end="163:35">=</operator> <literal type="number" pos:start="163:37" pos:end="163:37">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="165:5" pos:end="167:61"><if pos:start="165:5" pos:end="167:61">if <condition pos:start="165:8" pos:end="165:38">(<expr pos:start="165:9" pos:end="165:37"><name pos:start="165:9" pos:end="165:37"><name pos:start="165:9" pos:end="165:11">pps</name><operator pos:start="165:12" pos:end="165:13">-&gt;</operator><name pos:start="165:14" pos:end="165:37">cu_qp_delta_enabled_flag</name></name></expr>)</condition><block type="pseudo" pos:start="167:9" pos:end="167:61"><block_content pos:start="167:9" pos:end="167:61">

        <expr_stmt pos:start="167:9" pos:end="167:61"><expr pos:start="167:9" pos:end="167:60"><name pos:start="167:9" pos:end="167:35"><name pos:start="167:9" pos:end="167:11">pps</name><operator pos:start="167:12" pos:end="167:13">-&gt;</operator><name pos:start="167:14" pos:end="167:35">diff_cu_qp_delta_depth</name></name> <operator pos:start="167:37" pos:end="167:37">=</operator> <call pos:start="167:39" pos:end="167:60"><name pos:start="167:39" pos:end="167:56">get_ue_golomb_long</name><argument_list pos:start="167:57" pos:end="167:60">(<argument pos:start="167:58" pos:end="167:59"><expr pos:start="167:58" pos:end="167:59"><name pos:start="167:58" pos:end="167:59">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="171:5" pos:end="183:5"><if pos:start="171:5" pos:end="183:5">if <condition pos:start="171:8" pos:end="173:79">(<expr pos:start="171:9" pos:end="173:78"><name pos:start="171:9" pos:end="171:35"><name pos:start="171:9" pos:end="171:11">pps</name><operator pos:start="171:12" pos:end="171:13">-&gt;</operator><name pos:start="171:14" pos:end="171:35">diff_cu_qp_delta_depth</name></name> <operator pos:start="171:37" pos:end="171:37">&lt;</operator> <literal type="number" pos:start="171:39" pos:end="171:39">0</literal> <operator pos:start="171:41" pos:end="171:42">||</operator>

        <name pos:start="173:9" pos:end="173:35"><name pos:start="173:9" pos:end="173:11">pps</name><operator pos:start="173:12" pos:end="173:13">-&gt;</operator><name pos:start="173:14" pos:end="173:35">diff_cu_qp_delta_depth</name></name> <operator pos:start="173:37" pos:end="173:37">&gt;</operator> <name pos:start="173:39" pos:end="173:78"><name pos:start="173:39" pos:end="173:41">sps</name><operator pos:start="173:42" pos:end="173:43">-&gt;</operator><name pos:start="173:44" pos:end="173:78">log2_diff_max_min_coding_block_size</name></name></expr>)</condition> <block pos:start="173:81" pos:end="183:5">{<block_content pos:start="175:9" pos:end="181:17">

        <expr_stmt pos:start="175:9" pos:end="177:44"><expr pos:start="175:9" pos:end="177:43"><call pos:start="175:9" pos:end="177:43"><name pos:start="175:9" pos:end="175:14">av_log</name><argument_list pos:start="175:15" pos:end="177:43">(<argument pos:start="175:16" pos:end="175:20"><expr pos:start="175:16" pos:end="175:20"><name pos:start="175:16" pos:end="175:20">avctx</name></expr></argument>, <argument pos:start="175:23" pos:end="175:34"><expr pos:start="175:23" pos:end="175:34"><name pos:start="175:23" pos:end="175:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="175:37" pos:end="175:76"><expr pos:start="175:37" pos:end="175:76"><literal type="string" pos:start="175:37" pos:end="175:76">"diff_cu_qp_delta_depth %d is invalid\n"</literal></expr></argument>,

               <argument pos:start="177:16" pos:end="177:42"><expr pos:start="177:16" pos:end="177:42"><name pos:start="177:16" pos:end="177:42"><name pos:start="177:16" pos:end="177:18">pps</name><operator pos:start="177:19" pos:end="177:20">-&gt;</operator><name pos:start="177:21" pos:end="177:42">diff_cu_qp_delta_depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:34"><expr pos:start="179:9" pos:end="179:33"><name pos:start="179:9" pos:end="179:11">ret</name> <operator pos:start="179:13" pos:end="179:13">=</operator> <name pos:start="179:15" pos:end="179:33">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

        <goto pos:start="181:9" pos:end="181:17">goto <name pos:start="181:14" pos:end="181:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="187:5" pos:end="187:42"><expr pos:start="187:5" pos:end="187:41"><name pos:start="187:5" pos:end="187:21"><name pos:start="187:5" pos:end="187:7">pps</name><operator pos:start="187:8" pos:end="187:9">-&gt;</operator><name pos:start="187:10" pos:end="187:21">cb_qp_offset</name></name> <operator pos:start="187:23" pos:end="187:23">=</operator> <call pos:start="187:25" pos:end="187:41"><name pos:start="187:25" pos:end="187:37">get_se_golomb</name><argument_list pos:start="187:38" pos:end="187:41">(<argument pos:start="187:39" pos:end="187:40"><expr pos:start="187:39" pos:end="187:40"><name pos:start="187:39" pos:end="187:40">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="189:5" pos:end="199:5"><if pos:start="189:5" pos:end="199:5">if <condition pos:start="189:8" pos:end="189:58">(<expr pos:start="189:9" pos:end="189:57"><name pos:start="189:9" pos:end="189:25"><name pos:start="189:9" pos:end="189:11">pps</name><operator pos:start="189:12" pos:end="189:13">-&gt;</operator><name pos:start="189:14" pos:end="189:25">cb_qp_offset</name></name> <operator pos:start="189:27" pos:end="189:27">&lt;</operator> <operator pos:start="189:29" pos:end="189:29">-</operator><literal type="number" pos:start="189:30" pos:end="189:31">12</literal> <operator pos:start="189:33" pos:end="189:34">||</operator> <name pos:start="189:36" pos:end="189:52"><name pos:start="189:36" pos:end="189:38">pps</name><operator pos:start="189:39" pos:end="189:40">-&gt;</operator><name pos:start="189:41" pos:end="189:52">cb_qp_offset</name></name> <operator pos:start="189:54" pos:end="189:54">&gt;</operator> <literal type="number" pos:start="189:56" pos:end="189:57">12</literal></expr>)</condition> <block pos:start="189:60" pos:end="199:5">{<block_content pos:start="191:9" pos:end="197:17">

        <expr_stmt pos:start="191:9" pos:end="193:34"><expr pos:start="191:9" pos:end="193:33"><call pos:start="191:9" pos:end="193:33"><name pos:start="191:9" pos:end="191:14">av_log</name><argument_list pos:start="191:15" pos:end="193:33">(<argument pos:start="191:16" pos:end="191:20"><expr pos:start="191:16" pos:end="191:20"><name pos:start="191:16" pos:end="191:20">avctx</name></expr></argument>, <argument pos:start="191:23" pos:end="191:34"><expr pos:start="191:23" pos:end="191:34"><name pos:start="191:23" pos:end="191:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="191:37" pos:end="191:73"><expr pos:start="191:37" pos:end="191:73"><literal type="string" pos:start="191:37" pos:end="191:73">"pps_cb_qp_offset out of range: %d\n"</literal></expr></argument>,

               <argument pos:start="193:16" pos:end="193:32"><expr pos:start="193:16" pos:end="193:32"><name pos:start="193:16" pos:end="193:32"><name pos:start="193:16" pos:end="193:18">pps</name><operator pos:start="193:19" pos:end="193:20">-&gt;</operator><name pos:start="193:21" pos:end="193:32">cb_qp_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="195:9" pos:end="195:34"><expr pos:start="195:9" pos:end="195:33"><name pos:start="195:9" pos:end="195:11">ret</name> <operator pos:start="195:13" pos:end="195:13">=</operator> <name pos:start="195:15" pos:end="195:33">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

        <goto pos:start="197:9" pos:end="197:17">goto <name pos:start="197:14" pos:end="197:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:42"><expr pos:start="201:5" pos:end="201:41"><name pos:start="201:5" pos:end="201:21"><name pos:start="201:5" pos:end="201:7">pps</name><operator pos:start="201:8" pos:end="201:9">-&gt;</operator><name pos:start="201:10" pos:end="201:21">cr_qp_offset</name></name> <operator pos:start="201:23" pos:end="201:23">=</operator> <call pos:start="201:25" pos:end="201:41"><name pos:start="201:25" pos:end="201:37">get_se_golomb</name><argument_list pos:start="201:38" pos:end="201:41">(<argument pos:start="201:39" pos:end="201:40"><expr pos:start="201:39" pos:end="201:40"><name pos:start="201:39" pos:end="201:40">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="203:5" pos:end="213:5"><if pos:start="203:5" pos:end="213:5">if <condition pos:start="203:8" pos:end="203:58">(<expr pos:start="203:9" pos:end="203:57"><name pos:start="203:9" pos:end="203:25"><name pos:start="203:9" pos:end="203:11">pps</name><operator pos:start="203:12" pos:end="203:13">-&gt;</operator><name pos:start="203:14" pos:end="203:25">cr_qp_offset</name></name> <operator pos:start="203:27" pos:end="203:27">&lt;</operator> <operator pos:start="203:29" pos:end="203:29">-</operator><literal type="number" pos:start="203:30" pos:end="203:31">12</literal> <operator pos:start="203:33" pos:end="203:34">||</operator> <name pos:start="203:36" pos:end="203:52"><name pos:start="203:36" pos:end="203:38">pps</name><operator pos:start="203:39" pos:end="203:40">-&gt;</operator><name pos:start="203:41" pos:end="203:52">cr_qp_offset</name></name> <operator pos:start="203:54" pos:end="203:54">&gt;</operator> <literal type="number" pos:start="203:56" pos:end="203:57">12</literal></expr>)</condition> <block pos:start="203:60" pos:end="213:5">{<block_content pos:start="205:9" pos:end="211:17">

        <expr_stmt pos:start="205:9" pos:end="207:34"><expr pos:start="205:9" pos:end="207:33"><call pos:start="205:9" pos:end="207:33"><name pos:start="205:9" pos:end="205:14">av_log</name><argument_list pos:start="205:15" pos:end="207:33">(<argument pos:start="205:16" pos:end="205:20"><expr pos:start="205:16" pos:end="205:20"><name pos:start="205:16" pos:end="205:20">avctx</name></expr></argument>, <argument pos:start="205:23" pos:end="205:34"><expr pos:start="205:23" pos:end="205:34"><name pos:start="205:23" pos:end="205:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="205:37" pos:end="205:73"><expr pos:start="205:37" pos:end="205:73"><literal type="string" pos:start="205:37" pos:end="205:73">"pps_cr_qp_offset out of range: %d\n"</literal></expr></argument>,

               <argument pos:start="207:16" pos:end="207:32"><expr pos:start="207:16" pos:end="207:32"><name pos:start="207:16" pos:end="207:32"><name pos:start="207:16" pos:end="207:18">pps</name><operator pos:start="207:19" pos:end="207:20">-&gt;</operator><name pos:start="207:21" pos:end="207:32">cr_qp_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:34"><expr pos:start="209:9" pos:end="209:33"><name pos:start="209:9" pos:end="209:11">ret</name> <operator pos:start="209:13" pos:end="209:13">=</operator> <name pos:start="209:15" pos:end="209:33">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

        <goto pos:start="211:9" pos:end="211:17">goto <name pos:start="211:14" pos:end="211:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="215:5" pos:end="215:72"><expr pos:start="215:5" pos:end="215:71"><name pos:start="215:5" pos:end="215:55"><name pos:start="215:5" pos:end="215:7">pps</name><operator pos:start="215:8" pos:end="215:9">-&gt;</operator><name pos:start="215:10" pos:end="215:55">pic_slice_level_chroma_qp_offsets_present_flag</name></name> <operator pos:start="215:57" pos:end="215:57">=</operator> <call pos:start="215:59" pos:end="215:71"><name pos:start="215:59" pos:end="215:67">get_bits1</name><argument_list pos:start="215:68" pos:end="215:71">(<argument pos:start="215:69" pos:end="215:70"><expr pos:start="215:69" pos:end="215:70"><name pos:start="215:69" pos:end="215:70">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="219:5" pos:end="219:46"><expr pos:start="219:5" pos:end="219:45"><name pos:start="219:5" pos:end="219:27"><name pos:start="219:5" pos:end="219:7">pps</name><operator pos:start="219:8" pos:end="219:9">-&gt;</operator><name pos:start="219:10" pos:end="219:27">weighted_pred_flag</name></name>   <operator pos:start="219:31" pos:end="219:31">=</operator> <call pos:start="219:33" pos:end="219:45"><name pos:start="219:33" pos:end="219:41">get_bits1</name><argument_list pos:start="219:42" pos:end="219:45">(<argument pos:start="219:43" pos:end="219:44"><expr pos:start="219:43" pos:end="219:44"><name pos:start="219:43" pos:end="219:44">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:46"><expr pos:start="221:5" pos:end="221:45"><name pos:start="221:5" pos:end="221:29"><name pos:start="221:5" pos:end="221:7">pps</name><operator pos:start="221:8" pos:end="221:9">-&gt;</operator><name pos:start="221:10" pos:end="221:29">weighted_bipred_flag</name></name> <operator pos:start="221:31" pos:end="221:31">=</operator> <call pos:start="221:33" pos:end="221:45"><name pos:start="221:33" pos:end="221:41">get_bits1</name><argument_list pos:start="221:42" pos:end="221:45">(<argument pos:start="221:43" pos:end="221:44"><expr pos:start="221:43" pos:end="221:44"><name pos:start="221:43" pos:end="221:44">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="225:5" pos:end="225:58"><expr pos:start="225:5" pos:end="225:57"><name pos:start="225:5" pos:end="225:38"><name pos:start="225:5" pos:end="225:7">pps</name><operator pos:start="225:8" pos:end="225:9">-&gt;</operator><name pos:start="225:10" pos:end="225:38">transquant_bypass_enable_flag</name></name>    <operator pos:start="225:43" pos:end="225:43">=</operator> <call pos:start="225:45" pos:end="225:57"><name pos:start="225:45" pos:end="225:53">get_bits1</name><argument_list pos:start="225:54" pos:end="225:57">(<argument pos:start="225:55" pos:end="225:56"><expr pos:start="225:55" pos:end="225:56"><name pos:start="225:55" pos:end="225:56">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="227:5" pos:end="227:58"><expr pos:start="227:5" pos:end="227:57"><name pos:start="227:5" pos:end="227:27"><name pos:start="227:5" pos:end="227:7">pps</name><operator pos:start="227:8" pos:end="227:9">-&gt;</operator><name pos:start="227:10" pos:end="227:27">tiles_enabled_flag</name></name>               <operator pos:start="227:43" pos:end="227:43">=</operator> <call pos:start="227:45" pos:end="227:57"><name pos:start="227:45" pos:end="227:53">get_bits1</name><argument_list pos:start="227:54" pos:end="227:57">(<argument pos:start="227:55" pos:end="227:56"><expr pos:start="227:55" pos:end="227:56"><name pos:start="227:55" pos:end="227:56">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="229:5" pos:end="229:58"><expr pos:start="229:5" pos:end="229:57"><name pos:start="229:5" pos:end="229:41"><name pos:start="229:5" pos:end="229:7">pps</name><operator pos:start="229:8" pos:end="229:9">-&gt;</operator><name pos:start="229:10" pos:end="229:41">entropy_coding_sync_enabled_flag</name></name> <operator pos:start="229:43" pos:end="229:43">=</operator> <call pos:start="229:45" pos:end="229:57"><name pos:start="229:45" pos:end="229:53">get_bits1</name><argument_list pos:start="229:54" pos:end="229:57">(<argument pos:start="229:55" pos:end="229:56"><expr pos:start="229:55" pos:end="229:56"><name pos:start="229:55" pos:end="229:56">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="233:5" pos:end="337:5"><if pos:start="233:5" pos:end="337:5">if <condition pos:start="233:8" pos:end="233:32">(<expr pos:start="233:9" pos:end="233:31"><name pos:start="233:9" pos:end="233:31"><name pos:start="233:9" pos:end="233:11">pps</name><operator pos:start="233:12" pos:end="233:13">-&gt;</operator><name pos:start="233:14" pos:end="233:31">tiles_enabled_flag</name></name></expr>)</condition> <block pos:start="233:34" pos:end="337:5">{<block_content pos:start="235:9" pos:end="335:67">

        <expr_stmt pos:start="235:9" pos:end="235:59"><expr pos:start="235:9" pos:end="235:58"><name pos:start="235:9" pos:end="235:29"><name pos:start="235:9" pos:end="235:11">pps</name><operator pos:start="235:12" pos:end="235:13">-&gt;</operator><name pos:start="235:14" pos:end="235:29">num_tile_columns</name></name> <operator pos:start="235:31" pos:end="235:31">=</operator> <call pos:start="235:33" pos:end="235:54"><name pos:start="235:33" pos:end="235:50">get_ue_golomb_long</name><argument_list pos:start="235:51" pos:end="235:54">(<argument pos:start="235:52" pos:end="235:53"><expr pos:start="235:52" pos:end="235:53"><name pos:start="235:52" pos:end="235:53">gb</name></expr></argument>)</argument_list></call> <operator pos:start="235:56" pos:end="235:56">+</operator> <literal type="number" pos:start="235:58" pos:end="235:58">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="237:9" pos:end="237:59"><expr pos:start="237:9" pos:end="237:58"><name pos:start="237:9" pos:end="237:26"><name pos:start="237:9" pos:end="237:11">pps</name><operator pos:start="237:12" pos:end="237:13">-&gt;</operator><name pos:start="237:14" pos:end="237:26">num_tile_rows</name></name>    <operator pos:start="237:31" pos:end="237:31">=</operator> <call pos:start="237:33" pos:end="237:54"><name pos:start="237:33" pos:end="237:50">get_ue_golomb_long</name><argument_list pos:start="237:51" pos:end="237:54">(<argument pos:start="237:52" pos:end="237:53"><expr pos:start="237:52" pos:end="237:53"><name pos:start="237:52" pos:end="237:53">gb</name></expr></argument>)</argument_list></call> <operator pos:start="237:56" pos:end="237:56">+</operator> <literal type="number" pos:start="237:58" pos:end="237:58">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="239:9" pos:end="251:9"><if pos:start="239:9" pos:end="251:9">if <condition pos:start="239:12" pos:end="241:48">(<expr pos:start="239:13" pos:end="241:47"><name pos:start="239:13" pos:end="239:33"><name pos:start="239:13" pos:end="239:15">pps</name><operator pos:start="239:16" pos:end="239:17">-&gt;</operator><name pos:start="239:18" pos:end="239:33">num_tile_columns</name></name> <operator pos:start="239:35" pos:end="239:36">&lt;=</operator> <literal type="number" pos:start="239:38" pos:end="239:38">0</literal> <operator pos:start="239:40" pos:end="239:41">||</operator>

            <name pos:start="241:13" pos:end="241:33"><name pos:start="241:13" pos:end="241:15">pps</name><operator pos:start="241:16" pos:end="241:17">-&gt;</operator><name pos:start="241:18" pos:end="241:33">num_tile_columns</name></name> <operator pos:start="241:35" pos:end="241:36">&gt;=</operator> <name pos:start="241:38" pos:end="241:47"><name pos:start="241:38" pos:end="241:40">sps</name><operator pos:start="241:41" pos:end="241:42">-&gt;</operator><name pos:start="241:43" pos:end="241:47">width</name></name></expr>)</condition> <block pos:start="241:50" pos:end="251:9">{<block_content pos:start="243:13" pos:end="249:21">

            <expr_stmt pos:start="243:13" pos:end="245:46"><expr pos:start="243:13" pos:end="245:45"><call pos:start="243:13" pos:end="245:45"><name pos:start="243:13" pos:end="243:18">av_log</name><argument_list pos:start="243:19" pos:end="245:45">(<argument pos:start="243:20" pos:end="243:24"><expr pos:start="243:20" pos:end="243:24"><name pos:start="243:20" pos:end="243:24">avctx</name></expr></argument>, <argument pos:start="243:27" pos:end="243:38"><expr pos:start="243:27" pos:end="243:38"><name pos:start="243:27" pos:end="243:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="243:41" pos:end="243:84"><expr pos:start="243:41" pos:end="243:84"><literal type="string" pos:start="243:41" pos:end="243:84">"num_tile_columns_minus1 out of range: %d\n"</literal></expr></argument>,

                   <argument pos:start="245:20" pos:end="245:44"><expr pos:start="245:20" pos:end="245:44"><name pos:start="245:20" pos:end="245:40"><name pos:start="245:20" pos:end="245:22">pps</name><operator pos:start="245:23" pos:end="245:24">-&gt;</operator><name pos:start="245:25" pos:end="245:40">num_tile_columns</name></name> <operator pos:start="245:42" pos:end="245:42">-</operator> <literal type="number" pos:start="245:44" pos:end="245:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="247:13" pos:end="247:38"><expr pos:start="247:13" pos:end="247:37"><name pos:start="247:13" pos:end="247:15">ret</name> <operator pos:start="247:17" pos:end="247:17">=</operator> <name pos:start="247:19" pos:end="247:37">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

            <goto pos:start="249:13" pos:end="249:21">goto <name pos:start="249:18" pos:end="249:20">err</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="253:9" pos:end="265:9"><if pos:start="253:9" pos:end="265:9">if <condition pos:start="253:12" pos:end="255:46">(<expr pos:start="253:13" pos:end="255:45"><name pos:start="253:13" pos:end="253:30"><name pos:start="253:13" pos:end="253:15">pps</name><operator pos:start="253:16" pos:end="253:17">-&gt;</operator><name pos:start="253:18" pos:end="253:30">num_tile_rows</name></name> <operator pos:start="253:32" pos:end="253:33">&lt;=</operator> <literal type="number" pos:start="253:35" pos:end="253:35">0</literal> <operator pos:start="253:37" pos:end="253:38">||</operator>

            <name pos:start="255:13" pos:end="255:30"><name pos:start="255:13" pos:end="255:15">pps</name><operator pos:start="255:16" pos:end="255:17">-&gt;</operator><name pos:start="255:18" pos:end="255:30">num_tile_rows</name></name> <operator pos:start="255:32" pos:end="255:33">&gt;=</operator> <name pos:start="255:35" pos:end="255:45"><name pos:start="255:35" pos:end="255:37">sps</name><operator pos:start="255:38" pos:end="255:39">-&gt;</operator><name pos:start="255:40" pos:end="255:45">height</name></name></expr>)</condition> <block pos:start="255:48" pos:end="265:9">{<block_content pos:start="257:13" pos:end="263:21">

            <expr_stmt pos:start="257:13" pos:end="259:43"><expr pos:start="257:13" pos:end="259:42"><call pos:start="257:13" pos:end="259:42"><name pos:start="257:13" pos:end="257:18">av_log</name><argument_list pos:start="257:19" pos:end="259:42">(<argument pos:start="257:20" pos:end="257:24"><expr pos:start="257:20" pos:end="257:24"><name pos:start="257:20" pos:end="257:24">avctx</name></expr></argument>, <argument pos:start="257:27" pos:end="257:38"><expr pos:start="257:27" pos:end="257:38"><name pos:start="257:27" pos:end="257:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="257:41" pos:end="257:81"><expr pos:start="257:41" pos:end="257:81"><literal type="string" pos:start="257:41" pos:end="257:81">"num_tile_rows_minus1 out of range: %d\n"</literal></expr></argument>,

                   <argument pos:start="259:20" pos:end="259:41"><expr pos:start="259:20" pos:end="259:41"><name pos:start="259:20" pos:end="259:37"><name pos:start="259:20" pos:end="259:22">pps</name><operator pos:start="259:23" pos:end="259:24">-&gt;</operator><name pos:start="259:25" pos:end="259:37">num_tile_rows</name></name> <operator pos:start="259:39" pos:end="259:39">-</operator> <literal type="number" pos:start="259:41" pos:end="259:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="261:13" pos:end="261:38"><expr pos:start="261:13" pos:end="261:37"><name pos:start="261:13" pos:end="261:15">ret</name> <operator pos:start="261:17" pos:end="261:17">=</operator> <name pos:start="261:19" pos:end="261:37">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

            <goto pos:start="263:13" pos:end="263:21">goto <name pos:start="263:18" pos:end="263:20">err</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="269:9" pos:end="269:95"><expr pos:start="269:9" pos:end="269:94"><name pos:start="269:9" pos:end="269:25"><name pos:start="269:9" pos:end="269:11">pps</name><operator pos:start="269:12" pos:end="269:13">-&gt;</operator><name pos:start="269:14" pos:end="269:25">column_width</name></name> <operator pos:start="269:27" pos:end="269:27">=</operator> <call pos:start="269:29" pos:end="269:94"><name pos:start="269:29" pos:end="269:43">av_malloc_array</name><argument_list pos:start="269:44" pos:end="269:94">(<argument pos:start="269:45" pos:end="269:65"><expr pos:start="269:45" pos:end="269:65"><name pos:start="269:45" pos:end="269:65"><name pos:start="269:45" pos:end="269:47">pps</name><operator pos:start="269:48" pos:end="269:49">-&gt;</operator><name pos:start="269:50" pos:end="269:65">num_tile_columns</name></name></expr></argument>, <argument pos:start="269:68" pos:end="269:93"><expr pos:start="269:68" pos:end="269:93"><sizeof pos:start="269:68" pos:end="269:93">sizeof<argument_list pos:start="269:74" pos:end="269:93">(<argument pos:start="269:75" pos:end="269:92"><expr pos:start="269:75" pos:end="269:92"><operator pos:start="269:75" pos:end="269:75">*</operator><name pos:start="269:76" pos:end="269:92"><name pos:start="269:76" pos:end="269:78">pps</name><operator pos:start="269:79" pos:end="269:80">-&gt;</operator><name pos:start="269:81" pos:end="269:92">column_width</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="271:9" pos:end="271:93"><expr pos:start="271:9" pos:end="271:92"><name pos:start="271:9" pos:end="271:23"><name pos:start="271:9" pos:end="271:11">pps</name><operator pos:start="271:12" pos:end="271:13">-&gt;</operator><name pos:start="271:14" pos:end="271:23">row_height</name></name>   <operator pos:start="271:27" pos:end="271:27">=</operator> <call pos:start="271:29" pos:end="271:92"><name pos:start="271:29" pos:end="271:43">av_malloc_array</name><argument_list pos:start="271:44" pos:end="271:92">(<argument pos:start="271:45" pos:end="271:62"><expr pos:start="271:45" pos:end="271:62"><name pos:start="271:45" pos:end="271:62"><name pos:start="271:45" pos:end="271:47">pps</name><operator pos:start="271:48" pos:end="271:49">-&gt;</operator><name pos:start="271:50" pos:end="271:62">num_tile_rows</name></name></expr></argument>,    <argument pos:start="271:68" pos:end="271:91"><expr pos:start="271:68" pos:end="271:91"><sizeof pos:start="271:68" pos:end="271:91">sizeof<argument_list pos:start="271:74" pos:end="271:91">(<argument pos:start="271:75" pos:end="271:90"><expr pos:start="271:75" pos:end="271:90"><operator pos:start="271:75" pos:end="271:75">*</operator><name pos:start="271:76" pos:end="271:90"><name pos:start="271:76" pos:end="271:78">pps</name><operator pos:start="271:79" pos:end="271:80">-&gt;</operator><name pos:start="271:81" pos:end="271:90">row_height</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="273:9" pos:end="279:9"><if pos:start="273:9" pos:end="279:9">if <condition pos:start="273:12" pos:end="273:51">(<expr pos:start="273:13" pos:end="273:50"><operator pos:start="273:13" pos:end="273:13">!</operator><name pos:start="273:14" pos:end="273:30"><name pos:start="273:14" pos:end="273:16">pps</name><operator pos:start="273:17" pos:end="273:18">-&gt;</operator><name pos:start="273:19" pos:end="273:30">column_width</name></name> <operator pos:start="273:32" pos:end="273:33">||</operator> <operator pos:start="273:35" pos:end="273:35">!</operator><name pos:start="273:36" pos:end="273:50"><name pos:start="273:36" pos:end="273:38">pps</name><operator pos:start="273:39" pos:end="273:40">-&gt;</operator><name pos:start="273:41" pos:end="273:50">row_height</name></name></expr>)</condition> <block pos:start="273:53" pos:end="279:9">{<block_content pos:start="275:13" pos:end="277:21">

            <expr_stmt pos:start="275:13" pos:end="275:34"><expr pos:start="275:13" pos:end="275:33"><name pos:start="275:13" pos:end="275:15">ret</name> <operator pos:start="275:17" pos:end="275:17">=</operator> <call pos:start="275:19" pos:end="275:33"><name pos:start="275:19" pos:end="275:25">AVERROR</name><argument_list pos:start="275:26" pos:end="275:33">(<argument pos:start="275:27" pos:end="275:32"><expr pos:start="275:27" pos:end="275:32"><name pos:start="275:27" pos:end="275:32">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="277:13" pos:end="277:21">goto <name pos:start="277:18" pos:end="277:20">err</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="283:9" pos:end="283:50"><expr pos:start="283:9" pos:end="283:49"><name pos:start="283:9" pos:end="283:33"><name pos:start="283:9" pos:end="283:11">pps</name><operator pos:start="283:12" pos:end="283:13">-&gt;</operator><name pos:start="283:14" pos:end="283:33">uniform_spacing_flag</name></name> <operator pos:start="283:35" pos:end="283:35">=</operator> <call pos:start="283:37" pos:end="283:49"><name pos:start="283:37" pos:end="283:45">get_bits1</name><argument_list pos:start="283:46" pos:end="283:49">(<argument pos:start="283:47" pos:end="283:48"><expr pos:start="283:47" pos:end="283:48"><name pos:start="283:47" pos:end="283:48">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="285:9" pos:end="333:9"><if pos:start="285:9" pos:end="333:9">if <condition pos:start="285:12" pos:end="285:39">(<expr pos:start="285:13" pos:end="285:38"><operator pos:start="285:13" pos:end="285:13">!</operator><name pos:start="285:14" pos:end="285:38"><name pos:start="285:14" pos:end="285:16">pps</name><operator pos:start="285:17" pos:end="285:18">-&gt;</operator><name pos:start="285:19" pos:end="285:38">uniform_spacing_flag</name></name></expr>)</condition> <block pos:start="285:41" pos:end="333:9">{<block_content pos:start="287:13" pos:end="331:76">

            <decl_stmt pos:start="287:13" pos:end="287:29"><decl pos:start="287:13" pos:end="287:28"><type pos:start="287:13" pos:end="287:20"><name pos:start="287:13" pos:end="287:20">uint64_t</name></type> <name pos:start="287:22" pos:end="287:24">sum</name> <init pos:start="287:26" pos:end="287:28">= <expr pos:start="287:28" pos:end="287:28"><literal type="number" pos:start="287:28" pos:end="287:28">0</literal></expr></init></decl>;</decl_stmt>

            <for pos:start="289:13" pos:end="295:13">for <control pos:start="289:17" pos:end="289:59">(<init pos:start="289:18" pos:end="289:23"><expr pos:start="289:18" pos:end="289:22"><name pos:start="289:18" pos:end="289:18">i</name> <operator pos:start="289:20" pos:end="289:20">=</operator> <literal type="number" pos:start="289:22" pos:end="289:22">0</literal></expr>;</init> <condition pos:start="289:25" pos:end="289:54"><expr pos:start="289:25" pos:end="289:53"><name pos:start="289:25" pos:end="289:25">i</name> <operator pos:start="289:27" pos:end="289:27">&lt;</operator> <name pos:start="289:29" pos:end="289:49"><name pos:start="289:29" pos:end="289:31">pps</name><operator pos:start="289:32" pos:end="289:33">-&gt;</operator><name pos:start="289:34" pos:end="289:49">num_tile_columns</name></name> <operator pos:start="289:51" pos:end="289:51">-</operator> <literal type="number" pos:start="289:53" pos:end="289:53">1</literal></expr>;</condition> <incr pos:start="289:56" pos:end="289:58"><expr pos:start="289:56" pos:end="289:58"><name pos:start="289:56" pos:end="289:56">i</name><operator pos:start="289:57" pos:end="289:58">++</operator></expr></incr>)</control> <block pos:start="289:61" pos:end="295:13">{<block_content pos:start="291:17" pos:end="293:60">

                <expr_stmt pos:start="291:17" pos:end="291:66"><expr pos:start="291:17" pos:end="291:65"><name pos:start="291:17" pos:end="291:36"><name pos:start="291:17" pos:end="291:19">pps</name><operator pos:start="291:20" pos:end="291:21">-&gt;</operator><name pos:start="291:22" pos:end="291:33">column_width</name><index pos:start="291:34" pos:end="291:36">[<expr pos:start="291:35" pos:end="291:35"><name pos:start="291:35" pos:end="291:35">i</name></expr>]</index></name> <operator pos:start="291:38" pos:end="291:38">=</operator> <call pos:start="291:40" pos:end="291:61"><name pos:start="291:40" pos:end="291:57">get_ue_golomb_long</name><argument_list pos:start="291:58" pos:end="291:61">(<argument pos:start="291:59" pos:end="291:60"><expr pos:start="291:59" pos:end="291:60"><name pos:start="291:59" pos:end="291:60">gb</name></expr></argument>)</argument_list></call> <operator pos:start="291:63" pos:end="291:63">+</operator> <literal type="number" pos:start="291:65" pos:end="291:65">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="293:17" pos:end="293:60"><expr pos:start="293:17" pos:end="293:59"><name pos:start="293:17" pos:end="293:19">sum</name>                 <operator pos:start="293:37" pos:end="293:38">+=</operator> <name pos:start="293:40" pos:end="293:59"><name pos:start="293:40" pos:end="293:42">pps</name><operator pos:start="293:43" pos:end="293:44">-&gt;</operator><name pos:start="293:45" pos:end="293:56">column_width</name><index pos:start="293:57" pos:end="293:59">[<expr pos:start="293:58" pos:end="293:58"><name pos:start="293:58" pos:end="293:58">i</name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="297:13" pos:end="305:13"><if pos:start="297:13" pos:end="305:13">if <condition pos:start="297:16" pos:end="297:38">(<expr pos:start="297:17" pos:end="297:37"><name pos:start="297:17" pos:end="297:19">sum</name> <operator pos:start="297:21" pos:end="297:22">&gt;=</operator> <name pos:start="297:24" pos:end="297:37"><name pos:start="297:24" pos:end="297:26">sps</name><operator pos:start="297:27" pos:end="297:28">-&gt;</operator><name pos:start="297:29" pos:end="297:37">ctb_width</name></name></expr>)</condition> <block pos:start="297:40" pos:end="305:13">{<block_content pos:start="299:17" pos:end="303:25">

                <expr_stmt pos:start="299:17" pos:end="299:70"><expr pos:start="299:17" pos:end="299:69"><call pos:start="299:17" pos:end="299:69"><name pos:start="299:17" pos:end="299:22">av_log</name><argument_list pos:start="299:23" pos:end="299:69">(<argument pos:start="299:24" pos:end="299:28"><expr pos:start="299:24" pos:end="299:28"><name pos:start="299:24" pos:end="299:28">avctx</name></expr></argument>, <argument pos:start="299:31" pos:end="299:42"><expr pos:start="299:31" pos:end="299:42"><name pos:start="299:31" pos:end="299:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="299:45" pos:end="299:68"><expr pos:start="299:45" pos:end="299:68"><literal type="string" pos:start="299:45" pos:end="299:68">"Invalid tile widths.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="301:17" pos:end="301:42"><expr pos:start="301:17" pos:end="301:41"><name pos:start="301:17" pos:end="301:19">ret</name> <operator pos:start="301:21" pos:end="301:21">=</operator> <name pos:start="301:23" pos:end="301:41">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

                <goto pos:start="303:17" pos:end="303:25">goto <name pos:start="303:22" pos:end="303:24">err</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="307:13" pos:end="307:80"><expr pos:start="307:13" pos:end="307:79"><name pos:start="307:13" pos:end="307:56"><name pos:start="307:13" pos:end="307:15">pps</name><operator pos:start="307:16" pos:end="307:17">-&gt;</operator><name pos:start="307:18" pos:end="307:29">column_width</name><index pos:start="307:30" pos:end="307:56">[<expr pos:start="307:31" pos:end="307:55"><name pos:start="307:31" pos:end="307:51"><name pos:start="307:31" pos:end="307:33">pps</name><operator pos:start="307:34" pos:end="307:35">-&gt;</operator><name pos:start="307:36" pos:end="307:51">num_tile_columns</name></name> <operator pos:start="307:53" pos:end="307:53">-</operator> <literal type="number" pos:start="307:55" pos:end="307:55">1</literal></expr>]</index></name> <operator pos:start="307:58" pos:end="307:58">=</operator> <name pos:start="307:60" pos:end="307:73"><name pos:start="307:60" pos:end="307:62">sps</name><operator pos:start="307:63" pos:end="307:64">-&gt;</operator><name pos:start="307:65" pos:end="307:73">ctb_width</name></name> <operator pos:start="307:75" pos:end="307:75">-</operator> <name pos:start="307:77" pos:end="307:79">sum</name></expr>;</expr_stmt>



            <expr_stmt pos:start="311:13" pos:end="311:20"><expr pos:start="311:13" pos:end="311:19"><name pos:start="311:13" pos:end="311:15">sum</name> <operator pos:start="311:17" pos:end="311:17">=</operator> <literal type="number" pos:start="311:19" pos:end="311:19">0</literal></expr>;</expr_stmt>

            <for pos:start="313:13" pos:end="319:13">for <control pos:start="313:17" pos:end="313:56">(<init pos:start="313:18" pos:end="313:23"><expr pos:start="313:18" pos:end="313:22"><name pos:start="313:18" pos:end="313:18">i</name> <operator pos:start="313:20" pos:end="313:20">=</operator> <literal type="number" pos:start="313:22" pos:end="313:22">0</literal></expr>;</init> <condition pos:start="313:25" pos:end="313:51"><expr pos:start="313:25" pos:end="313:50"><name pos:start="313:25" pos:end="313:25">i</name> <operator pos:start="313:27" pos:end="313:27">&lt;</operator> <name pos:start="313:29" pos:end="313:46"><name pos:start="313:29" pos:end="313:31">pps</name><operator pos:start="313:32" pos:end="313:33">-&gt;</operator><name pos:start="313:34" pos:end="313:46">num_tile_rows</name></name> <operator pos:start="313:48" pos:end="313:48">-</operator> <literal type="number" pos:start="313:50" pos:end="313:50">1</literal></expr>;</condition> <incr pos:start="313:53" pos:end="313:55"><expr pos:start="313:53" pos:end="313:55"><name pos:start="313:53" pos:end="313:53">i</name><operator pos:start="313:54" pos:end="313:55">++</operator></expr></incr>)</control> <block pos:start="313:58" pos:end="319:13">{<block_content pos:start="315:17" pos:end="317:56">

                <expr_stmt pos:start="315:17" pos:end="315:64"><expr pos:start="315:17" pos:end="315:63"><name pos:start="315:17" pos:end="315:34"><name pos:start="315:17" pos:end="315:19">pps</name><operator pos:start="315:20" pos:end="315:21">-&gt;</operator><name pos:start="315:22" pos:end="315:31">row_height</name><index pos:start="315:32" pos:end="315:34">[<expr pos:start="315:33" pos:end="315:33"><name pos:start="315:33" pos:end="315:33">i</name></expr>]</index></name> <operator pos:start="315:36" pos:end="315:36">=</operator> <call pos:start="315:38" pos:end="315:59"><name pos:start="315:38" pos:end="315:55">get_ue_golomb_long</name><argument_list pos:start="315:56" pos:end="315:59">(<argument pos:start="315:57" pos:end="315:58"><expr pos:start="315:57" pos:end="315:58"><name pos:start="315:57" pos:end="315:58">gb</name></expr></argument>)</argument_list></call> <operator pos:start="315:61" pos:end="315:61">+</operator> <literal type="number" pos:start="315:63" pos:end="315:63">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="317:17" pos:end="317:56"><expr pos:start="317:17" pos:end="317:55"><name pos:start="317:17" pos:end="317:19">sum</name>               <operator pos:start="317:35" pos:end="317:36">+=</operator> <name pos:start="317:38" pos:end="317:55"><name pos:start="317:38" pos:end="317:40">pps</name><operator pos:start="317:41" pos:end="317:42">-&gt;</operator><name pos:start="317:43" pos:end="317:52">row_height</name><index pos:start="317:53" pos:end="317:55">[<expr pos:start="317:54" pos:end="317:54"><name pos:start="317:54" pos:end="317:54">i</name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="321:13" pos:end="329:13"><if pos:start="321:13" pos:end="329:13">if <condition pos:start="321:16" pos:end="321:39">(<expr pos:start="321:17" pos:end="321:38"><name pos:start="321:17" pos:end="321:19">sum</name> <operator pos:start="321:21" pos:end="321:22">&gt;=</operator> <name pos:start="321:24" pos:end="321:38"><name pos:start="321:24" pos:end="321:26">sps</name><operator pos:start="321:27" pos:end="321:28">-&gt;</operator><name pos:start="321:29" pos:end="321:38">ctb_height</name></name></expr>)</condition> <block pos:start="321:41" pos:end="329:13">{<block_content pos:start="323:17" pos:end="327:25">

                <expr_stmt pos:start="323:17" pos:end="323:71"><expr pos:start="323:17" pos:end="323:70"><call pos:start="323:17" pos:end="323:70"><name pos:start="323:17" pos:end="323:22">av_log</name><argument_list pos:start="323:23" pos:end="323:70">(<argument pos:start="323:24" pos:end="323:28"><expr pos:start="323:24" pos:end="323:28"><name pos:start="323:24" pos:end="323:28">avctx</name></expr></argument>, <argument pos:start="323:31" pos:end="323:42"><expr pos:start="323:31" pos:end="323:42"><name pos:start="323:31" pos:end="323:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="323:45" pos:end="323:69"><expr pos:start="323:45" pos:end="323:69"><literal type="string" pos:start="323:45" pos:end="323:69">"Invalid tile heights.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="325:17" pos:end="325:42"><expr pos:start="325:17" pos:end="325:41"><name pos:start="325:17" pos:end="325:19">ret</name> <operator pos:start="325:21" pos:end="325:21">=</operator> <name pos:start="325:23" pos:end="325:41">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

                <goto pos:start="327:17" pos:end="327:25">goto <name pos:start="327:22" pos:end="327:24">err</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="331:13" pos:end="331:76"><expr pos:start="331:13" pos:end="331:75"><name pos:start="331:13" pos:end="331:51"><name pos:start="331:13" pos:end="331:15">pps</name><operator pos:start="331:16" pos:end="331:17">-&gt;</operator><name pos:start="331:18" pos:end="331:27">row_height</name><index pos:start="331:28" pos:end="331:51">[<expr pos:start="331:29" pos:end="331:50"><name pos:start="331:29" pos:end="331:46"><name pos:start="331:29" pos:end="331:31">pps</name><operator pos:start="331:32" pos:end="331:33">-&gt;</operator><name pos:start="331:34" pos:end="331:46">num_tile_rows</name></name> <operator pos:start="331:48" pos:end="331:48">-</operator> <literal type="number" pos:start="331:50" pos:end="331:50">1</literal></expr>]</index></name> <operator pos:start="331:53" pos:end="331:53">=</operator> <name pos:start="331:55" pos:end="331:69"><name pos:start="331:55" pos:end="331:57">sps</name><operator pos:start="331:58" pos:end="331:59">-&gt;</operator><name pos:start="331:60" pos:end="331:69">ctb_height</name></name> <operator pos:start="331:71" pos:end="331:71">-</operator> <name pos:start="331:73" pos:end="331:75">sum</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="335:9" pos:end="335:67"><expr pos:start="335:9" pos:end="335:66"><name pos:start="335:9" pos:end="335:50"><name pos:start="335:9" pos:end="335:11">pps</name><operator pos:start="335:12" pos:end="335:13">-&gt;</operator><name pos:start="335:14" pos:end="335:50">loop_filter_across_tiles_enabled_flag</name></name> <operator pos:start="335:52" pos:end="335:52">=</operator> <call pos:start="335:54" pos:end="335:66"><name pos:start="335:54" pos:end="335:62">get_bits1</name><argument_list pos:start="335:63" pos:end="335:66">(<argument pos:start="335:64" pos:end="335:65"><expr pos:start="335:64" pos:end="335:65"><name pos:start="335:64" pos:end="335:65">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="341:5" pos:end="341:68"><expr pos:start="341:5" pos:end="341:67"><name pos:start="341:5" pos:end="341:51"><name pos:start="341:5" pos:end="341:7">pps</name><operator pos:start="341:8" pos:end="341:9">-&gt;</operator><name pos:start="341:10" pos:end="341:51">seq_loop_filter_across_slices_enabled_flag</name></name> <operator pos:start="341:53" pos:end="341:53">=</operator> <call pos:start="341:55" pos:end="341:67"><name pos:start="341:55" pos:end="341:63">get_bits1</name><argument_list pos:start="341:64" pos:end="341:67">(<argument pos:start="341:65" pos:end="341:66"><expr pos:start="341:65" pos:end="341:66"><name pos:start="341:65" pos:end="341:66">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="345:5" pos:end="345:64"><expr pos:start="345:5" pos:end="345:63"><name pos:start="345:5" pos:end="345:47"><name pos:start="345:5" pos:end="345:7">pps</name><operator pos:start="345:8" pos:end="345:9">-&gt;</operator><name pos:start="345:10" pos:end="345:47">deblocking_filter_control_present_flag</name></name> <operator pos:start="345:49" pos:end="345:49">=</operator> <call pos:start="345:51" pos:end="345:63"><name pos:start="345:51" pos:end="345:59">get_bits1</name><argument_list pos:start="345:60" pos:end="345:63">(<argument pos:start="345:61" pos:end="345:62"><expr pos:start="345:61" pos:end="345:62"><name pos:start="345:61" pos:end="345:62">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="347:5" pos:end="389:5"><if pos:start="347:5" pos:end="389:5">if <condition pos:start="347:8" pos:end="347:52">(<expr pos:start="347:9" pos:end="347:51"><name pos:start="347:9" pos:end="347:51"><name pos:start="347:9" pos:end="347:11">pps</name><operator pos:start="347:12" pos:end="347:13">-&gt;</operator><name pos:start="347:14" pos:end="347:51">deblocking_filter_control_present_flag</name></name></expr>)</condition> <block pos:start="347:54" pos:end="389:5">{<block_content pos:start="349:9" pos:end="387:9">

        <expr_stmt pos:start="349:9" pos:end="349:69"><expr pos:start="349:9" pos:end="349:68"><name pos:start="349:9" pos:end="349:52"><name pos:start="349:9" pos:end="349:11">pps</name><operator pos:start="349:12" pos:end="349:13">-&gt;</operator><name pos:start="349:14" pos:end="349:52">deblocking_filter_override_enabled_flag</name></name> <operator pos:start="349:54" pos:end="349:54">=</operator> <call pos:start="349:56" pos:end="349:68"><name pos:start="349:56" pos:end="349:64">get_bits1</name><argument_list pos:start="349:65" pos:end="349:68">(<argument pos:start="349:66" pos:end="349:67"><expr pos:start="349:66" pos:end="349:67"><name pos:start="349:66" pos:end="349:67">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="351:9" pos:end="351:69"><expr pos:start="351:9" pos:end="351:68"><name pos:start="351:9" pos:end="351:24"><name pos:start="351:9" pos:end="351:11">pps</name><operator pos:start="351:12" pos:end="351:13">-&gt;</operator><name pos:start="351:14" pos:end="351:24">disable_dbf</name></name>                             <operator pos:start="351:54" pos:end="351:54">=</operator> <call pos:start="351:56" pos:end="351:68"><name pos:start="351:56" pos:end="351:64">get_bits1</name><argument_list pos:start="351:65" pos:end="351:68">(<argument pos:start="351:66" pos:end="351:67"><expr pos:start="351:66" pos:end="351:67"><name pos:start="351:66" pos:end="351:67">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="353:9" pos:end="387:9"><if pos:start="353:9" pos:end="387:9">if <condition pos:start="353:12" pos:end="353:30">(<expr pos:start="353:13" pos:end="353:29"><operator pos:start="353:13" pos:end="353:13">!</operator><name pos:start="353:14" pos:end="353:29"><name pos:start="353:14" pos:end="353:16">pps</name><operator pos:start="353:17" pos:end="353:18">-&gt;</operator><name pos:start="353:19" pos:end="353:29">disable_dbf</name></name></expr>)</condition> <block pos:start="353:32" pos:end="387:9">{<block_content pos:start="355:13" pos:end="385:52">

            <decl_stmt pos:start="355:13" pos:end="355:53"><decl pos:start="355:13" pos:end="355:52"><type pos:start="355:13" pos:end="355:15"><name pos:start="355:13" pos:end="355:15">int</name></type> <name pos:start="355:17" pos:end="355:32">beta_offset_div2</name> <init pos:start="355:34" pos:end="355:52">= <expr pos:start="355:36" pos:end="355:52"><call pos:start="355:36" pos:end="355:52"><name pos:start="355:36" pos:end="355:48">get_se_golomb</name><argument_list pos:start="355:49" pos:end="355:52">(<argument pos:start="355:50" pos:end="355:51"><expr pos:start="355:50" pos:end="355:51"><name pos:start="355:50" pos:end="355:51">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="357:13" pos:end="357:54"><decl pos:start="357:13" pos:end="357:52"><type pos:start="357:13" pos:end="357:15"><name pos:start="357:13" pos:end="357:15">int</name></type> <name pos:start="357:17" pos:end="357:30">tc_offset_div2</name>   <init pos:start="357:34" pos:end="357:52">= <expr pos:start="357:36" pos:end="357:52"><call pos:start="357:36" pos:end="357:52"><name pos:start="357:36" pos:end="357:48">get_se_golomb</name><argument_list pos:start="357:49" pos:end="357:52">(<argument pos:start="357:50" pos:end="357:51"><expr pos:start="357:50" pos:end="357:51"><name pos:start="357:50" pos:end="357:51">gb</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

            <if_stmt pos:start="359:13" pos:end="369:13"><if pos:start="359:13" pos:end="369:13">if <condition pos:start="359:16" pos:end="359:62">(<expr pos:start="359:17" pos:end="359:61"><name pos:start="359:17" pos:end="359:59"><name pos:start="359:17" pos:end="359:32">beta_offset_div2</name> <argument_list type="generic" pos:start="359:34" pos:end="359:59">&lt; <argument pos:start="359:36" pos:end="359:57"><expr pos:start="359:36" pos:end="359:57"><operator pos:start="359:36" pos:end="359:36">-</operator><literal type="number" pos:start="359:37" pos:end="359:37">6</literal> <operator pos:start="359:39" pos:end="359:40">||</operator> <name pos:start="359:42" pos:end="359:57">beta_offset_div2</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="359:61" pos:end="359:61">6</literal></expr>)</condition> <block pos:start="359:64" pos:end="369:13">{<block_content pos:start="361:17" pos:end="367:25">

                <expr_stmt pos:start="361:17" pos:end="363:41"><expr pos:start="361:17" pos:end="363:40"><call pos:start="361:17" pos:end="363:40"><name pos:start="361:17" pos:end="361:22">av_log</name><argument_list pos:start="361:23" pos:end="363:40">(<argument pos:start="361:24" pos:end="361:28"><expr pos:start="361:24" pos:end="361:28"><name pos:start="361:24" pos:end="361:28">avctx</name></expr></argument>, <argument pos:start="361:31" pos:end="361:42"><expr pos:start="361:31" pos:end="361:42"><name pos:start="361:31" pos:end="361:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="361:45" pos:end="361:85"><expr pos:start="361:45" pos:end="361:85"><literal type="string" pos:start="361:45" pos:end="361:85">"pps_beta_offset_div2 out of range: %d\n"</literal></expr></argument>,

                       <argument pos:start="363:24" pos:end="363:39"><expr pos:start="363:24" pos:end="363:39"><name pos:start="363:24" pos:end="363:39">beta_offset_div2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="365:17" pos:end="365:42"><expr pos:start="365:17" pos:end="365:41"><name pos:start="365:17" pos:end="365:19">ret</name> <operator pos:start="365:21" pos:end="365:21">=</operator> <name pos:start="365:23" pos:end="365:41">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

                <goto pos:start="367:17" pos:end="367:25">goto <name pos:start="367:22" pos:end="367:24">err</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="371:13" pos:end="381:13"><if pos:start="371:13" pos:end="381:13">if <condition pos:start="371:16" pos:end="371:58">(<expr pos:start="371:17" pos:end="371:57"><name pos:start="371:17" pos:end="371:55"><name pos:start="371:17" pos:end="371:30">tc_offset_div2</name> <argument_list type="generic" pos:start="371:32" pos:end="371:55">&lt; <argument pos:start="371:34" pos:end="371:53"><expr pos:start="371:34" pos:end="371:53"><operator pos:start="371:34" pos:end="371:34">-</operator><literal type="number" pos:start="371:35" pos:end="371:35">6</literal> <operator pos:start="371:37" pos:end="371:38">||</operator> <name pos:start="371:40" pos:end="371:53">tc_offset_div2</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="371:57" pos:end="371:57">6</literal></expr>)</condition> <block pos:start="371:60" pos:end="381:13">{<block_content pos:start="373:17" pos:end="379:25">

                <expr_stmt pos:start="373:17" pos:end="375:39"><expr pos:start="373:17" pos:end="375:38"><call pos:start="373:17" pos:end="375:38"><name pos:start="373:17" pos:end="373:22">av_log</name><argument_list pos:start="373:23" pos:end="375:38">(<argument pos:start="373:24" pos:end="373:28"><expr pos:start="373:24" pos:end="373:28"><name pos:start="373:24" pos:end="373:28">avctx</name></expr></argument>, <argument pos:start="373:31" pos:end="373:42"><expr pos:start="373:31" pos:end="373:42"><name pos:start="373:31" pos:end="373:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="373:45" pos:end="373:83"><expr pos:start="373:45" pos:end="373:83"><literal type="string" pos:start="373:45" pos:end="373:83">"pps_tc_offset_div2 out of range: %d\n"</literal></expr></argument>,

                       <argument pos:start="375:24" pos:end="375:37"><expr pos:start="375:24" pos:end="375:37"><name pos:start="375:24" pos:end="375:37">tc_offset_div2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="377:17" pos:end="377:42"><expr pos:start="377:17" pos:end="377:41"><name pos:start="377:17" pos:end="377:19">ret</name> <operator pos:start="377:21" pos:end="377:21">=</operator> <name pos:start="377:23" pos:end="377:41">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

                <goto pos:start="379:17" pos:end="379:25">goto <name pos:start="379:22" pos:end="379:24">err</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="383:13" pos:end="383:52"><expr pos:start="383:13" pos:end="383:51"><name pos:start="383:13" pos:end="383:28"><name pos:start="383:13" pos:end="383:15">pps</name><operator pos:start="383:16" pos:end="383:17">-&gt;</operator><name pos:start="383:18" pos:end="383:28">beta_offset</name></name> <operator pos:start="383:30" pos:end="383:30">=</operator> <literal type="number" pos:start="383:32" pos:end="383:32">2</literal> <operator pos:start="383:34" pos:end="383:34">*</operator> <name pos:start="383:36" pos:end="383:51">beta_offset_div2</name></expr>;</expr_stmt>

            <expr_stmt pos:start="385:13" pos:end="385:52"><expr pos:start="385:13" pos:end="385:51"><name pos:start="385:13" pos:end="385:26"><name pos:start="385:13" pos:end="385:15">pps</name><operator pos:start="385:16" pos:end="385:17">-&gt;</operator><name pos:start="385:18" pos:end="385:26">tc_offset</name></name>   <operator pos:start="385:30" pos:end="385:30">=</operator> <literal type="number" pos:start="385:32" pos:end="385:32">2</literal> <operator pos:start="385:34" pos:end="385:34">*</operator>   <name pos:start="385:38" pos:end="385:51">tc_offset_div2</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="393:5" pos:end="393:56"><expr pos:start="393:5" pos:end="393:55"><name pos:start="393:5" pos:end="393:39"><name pos:start="393:5" pos:end="393:7">pps</name><operator pos:start="393:8" pos:end="393:9">-&gt;</operator><name pos:start="393:10" pos:end="393:39">scaling_list_data_present_flag</name></name> <operator pos:start="393:41" pos:end="393:41">=</operator> <call pos:start="393:43" pos:end="393:55"><name pos:start="393:43" pos:end="393:51">get_bits1</name><argument_list pos:start="393:52" pos:end="393:55">(<argument pos:start="393:53" pos:end="393:54"><expr pos:start="393:53" pos:end="393:54"><name pos:start="393:53" pos:end="393:54">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="395:5" pos:end="405:5"><if pos:start="395:5" pos:end="405:5">if <condition pos:start="395:8" pos:end="395:44">(<expr pos:start="395:9" pos:end="395:43"><name pos:start="395:9" pos:end="395:43"><name pos:start="395:9" pos:end="395:11">pps</name><operator pos:start="395:12" pos:end="395:13">-&gt;</operator><name pos:start="395:14" pos:end="395:43">scaling_list_data_present_flag</name></name></expr>)</condition> <block pos:start="395:46" pos:end="405:5">{<block_content pos:start="397:9" pos:end="403:21">

        <expr_stmt pos:start="397:9" pos:end="397:58"><expr pos:start="397:9" pos:end="397:57"><call pos:start="397:9" pos:end="397:57"><name pos:start="397:9" pos:end="397:37">set_default_scaling_list_data</name><argument_list pos:start="397:38" pos:end="397:57">(<argument pos:start="397:39" pos:end="397:56"><expr pos:start="397:39" pos:end="397:56"><operator pos:start="397:39" pos:end="397:39">&amp;</operator><name pos:start="397:40" pos:end="397:56"><name pos:start="397:40" pos:end="397:42">pps</name><operator pos:start="397:43" pos:end="397:44">-&gt;</operator><name pos:start="397:45" pos:end="397:56">scaling_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="399:9" pos:end="399:68"><expr pos:start="399:9" pos:end="399:67"><name pos:start="399:9" pos:end="399:11">ret</name> <operator pos:start="399:13" pos:end="399:13">=</operator> <call pos:start="399:15" pos:end="399:67"><name pos:start="399:15" pos:end="399:31">scaling_list_data</name><argument_list pos:start="399:32" pos:end="399:67">(<argument pos:start="399:33" pos:end="399:34"><expr pos:start="399:33" pos:end="399:34"><name pos:start="399:33" pos:end="399:34">gb</name></expr></argument>, <argument pos:start="399:37" pos:end="399:41"><expr pos:start="399:37" pos:end="399:41"><name pos:start="399:37" pos:end="399:41">avctx</name></expr></argument>, <argument pos:start="399:44" pos:end="399:61"><expr pos:start="399:44" pos:end="399:61"><operator pos:start="399:44" pos:end="399:44">&amp;</operator><name pos:start="399:45" pos:end="399:61"><name pos:start="399:45" pos:end="399:47">pps</name><operator pos:start="399:48" pos:end="399:49">-&gt;</operator><name pos:start="399:50" pos:end="399:61">scaling_list</name></name></expr></argument>, <argument pos:start="399:64" pos:end="399:66"><expr pos:start="399:64" pos:end="399:66"><name pos:start="399:64" pos:end="399:66">sps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="401:9" pos:end="403:21"><if pos:start="401:9" pos:end="403:21">if <condition pos:start="401:12" pos:end="401:20">(<expr pos:start="401:13" pos:end="401:19"><name pos:start="401:13" pos:end="401:15">ret</name> <operator pos:start="401:17" pos:end="401:17">&lt;</operator> <literal type="number" pos:start="401:19" pos:end="401:19">0</literal></expr>)</condition><block type="pseudo" pos:start="403:13" pos:end="403:21"><block_content pos:start="403:13" pos:end="403:21">

            <goto pos:start="403:13" pos:end="403:21">goto <name pos:start="403:18" pos:end="403:20">err</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="407:5" pos:end="407:57"><expr pos:start="407:5" pos:end="407:56"><name pos:start="407:5" pos:end="407:40"><name pos:start="407:5" pos:end="407:7">pps</name><operator pos:start="407:8" pos:end="407:9">-&gt;</operator><name pos:start="407:10" pos:end="407:40">lists_modification_present_flag</name></name> <operator pos:start="407:42" pos:end="407:42">=</operator> <call pos:start="407:44" pos:end="407:56"><name pos:start="407:44" pos:end="407:52">get_bits1</name><argument_list pos:start="407:53" pos:end="407:56">(<argument pos:start="407:54" pos:end="407:55"><expr pos:start="407:54" pos:end="407:55"><name pos:start="407:54" pos:end="407:55">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="409:5" pos:end="409:70"><expr pos:start="409:5" pos:end="409:69"><name pos:start="409:5" pos:end="409:34"><name pos:start="409:5" pos:end="409:7">pps</name><operator pos:start="409:8" pos:end="409:9">-&gt;</operator><name pos:start="409:10" pos:end="409:34">log2_parallel_merge_level</name></name>       <operator pos:start="409:42" pos:end="409:42">=</operator> <call pos:start="409:44" pos:end="409:65"><name pos:start="409:44" pos:end="409:61">get_ue_golomb_long</name><argument_list pos:start="409:62" pos:end="409:65">(<argument pos:start="409:63" pos:end="409:64"><expr pos:start="409:63" pos:end="409:64"><name pos:start="409:63" pos:end="409:64">gb</name></expr></argument>)</argument_list></call> <operator pos:start="409:67" pos:end="409:67">+</operator> <literal type="number" pos:start="409:69" pos:end="409:69">2</literal></expr>;</expr_stmt>

    <if_stmt pos:start="411:5" pos:end="421:5"><if pos:start="411:5" pos:end="421:5">if <condition pos:start="411:8" pos:end="411:60">(<expr pos:start="411:9" pos:end="411:59"><name pos:start="411:9" pos:end="411:38"><name pos:start="411:9" pos:end="411:11">pps</name><operator pos:start="411:12" pos:end="411:13">-&gt;</operator><name pos:start="411:14" pos:end="411:38">log2_parallel_merge_level</name></name> <operator pos:start="411:40" pos:end="411:40">&gt;</operator> <name pos:start="411:42" pos:end="411:59"><name pos:start="411:42" pos:end="411:44">sps</name><operator pos:start="411:45" pos:end="411:46">-&gt;</operator><name pos:start="411:47" pos:end="411:59">log2_ctb_size</name></name></expr>)</condition> <block pos:start="411:62" pos:end="421:5">{<block_content pos:start="413:9" pos:end="419:17">

        <expr_stmt pos:start="413:9" pos:end="415:51"><expr pos:start="413:9" pos:end="415:50"><call pos:start="413:9" pos:end="415:50"><name pos:start="413:9" pos:end="413:14">av_log</name><argument_list pos:start="413:15" pos:end="415:50">(<argument pos:start="413:16" pos:end="413:20"><expr pos:start="413:16" pos:end="413:20"><name pos:start="413:16" pos:end="413:20">avctx</name></expr></argument>, <argument pos:start="413:23" pos:end="413:34"><expr pos:start="413:23" pos:end="413:34"><name pos:start="413:23" pos:end="413:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="413:37" pos:end="413:89"><expr pos:start="413:37" pos:end="413:89"><literal type="string" pos:start="413:37" pos:end="413:89">"log2_parallel_merge_level_minus2 out of range: %d\n"</literal></expr></argument>,

               <argument pos:start="415:16" pos:end="415:49"><expr pos:start="415:16" pos:end="415:49"><name pos:start="415:16" pos:end="415:45"><name pos:start="415:16" pos:end="415:18">pps</name><operator pos:start="415:19" pos:end="415:20">-&gt;</operator><name pos:start="415:21" pos:end="415:45">log2_parallel_merge_level</name></name> <operator pos:start="415:47" pos:end="415:47">-</operator> <literal type="number" pos:start="415:49" pos:end="415:49">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="417:9" pos:end="417:34"><expr pos:start="417:9" pos:end="417:33"><name pos:start="417:9" pos:end="417:11">ret</name> <operator pos:start="417:13" pos:end="417:13">=</operator> <name pos:start="417:15" pos:end="417:33">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

        <goto pos:start="419:9" pos:end="419:17">goto <name pos:start="419:14" pos:end="419:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="425:5" pos:end="425:61"><expr pos:start="425:5" pos:end="425:60"><name pos:start="425:5" pos:end="425:44"><name pos:start="425:5" pos:end="425:7">pps</name><operator pos:start="425:8" pos:end="425:9">-&gt;</operator><name pos:start="425:10" pos:end="425:44">slice_header_extension_present_flag</name></name> <operator pos:start="425:46" pos:end="425:46">=</operator> <call pos:start="425:48" pos:end="425:60"><name pos:start="425:48" pos:end="425:56">get_bits1</name><argument_list pos:start="425:57" pos:end="425:60">(<argument pos:start="425:58" pos:end="425:59"><expr pos:start="425:58" pos:end="425:59"><name pos:start="425:58" pos:end="425:59">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="429:5" pos:end="443:5"><if pos:start="429:5" pos:end="443:5">if <condition pos:start="429:8" pos:end="429:22">(<expr pos:start="429:9" pos:end="429:21"><call pos:start="429:9" pos:end="429:21"><name pos:start="429:9" pos:end="429:17">get_bits1</name><argument_list pos:start="429:18" pos:end="429:21">(<argument pos:start="429:19" pos:end="429:20"><expr pos:start="429:19" pos:end="429:20"><name pos:start="429:19" pos:end="429:20">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="429:24" pos:end="443:5">{<block_content pos:start="431:9" pos:end="441:9"> <comment type="line" pos:start="429:26" pos:end="429:54">// pps_extension_present_flag</comment>

        <decl_stmt pos:start="431:9" pos:end="431:54"><decl pos:start="431:9" pos:end="431:53"><type pos:start="431:9" pos:end="431:11"><name pos:start="431:9" pos:end="431:11">int</name></type> <name pos:start="431:13" pos:end="431:37">pps_range_extensions_flag</name> <init pos:start="431:39" pos:end="431:53">= <expr pos:start="431:41" pos:end="431:53"><call pos:start="431:41" pos:end="431:53"><name pos:start="431:41" pos:end="431:49">get_bits1</name><argument_list pos:start="431:50" pos:end="431:53">(<argument pos:start="431:51" pos:end="431:52"><expr pos:start="431:51" pos:end="431:52"><name pos:start="431:51" pos:end="431:52">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" pos:start="433:9" pos:end="433:39">/* int pps_extension_7bits = */</comment> <expr_stmt pos:start="433:41" pos:end="433:56"><expr pos:start="433:41" pos:end="433:55"><call pos:start="433:41" pos:end="433:55"><name pos:start="433:41" pos:end="433:48">get_bits</name><argument_list pos:start="433:49" pos:end="433:55">(<argument pos:start="433:50" pos:end="433:51"><expr pos:start="433:50" pos:end="433:51"><name pos:start="433:50" pos:end="433:51">gb</name></expr></argument>, <argument pos:start="433:54" pos:end="433:54"><expr pos:start="433:54" pos:end="433:54"><literal type="number" pos:start="433:54" pos:end="433:54">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="435:9" pos:end="441:9"><if pos:start="435:9" pos:end="441:9">if <condition pos:start="435:12" pos:end="435:98">(<expr pos:start="435:13" pos:end="435:97"><name pos:start="435:13" pos:end="435:44"><name pos:start="435:13" pos:end="435:15">sps</name><operator pos:start="435:16" pos:end="435:17">-&gt;</operator><name pos:start="435:18" pos:end="435:20">ptl</name><operator pos:start="435:21" pos:end="435:21">.</operator><name pos:start="435:22" pos:end="435:32">general_ptl</name><operator pos:start="435:33" pos:end="435:33">.</operator><name pos:start="435:34" pos:end="435:44">profile_idc</name></name> <operator pos:start="435:46" pos:end="435:47">==</operator> <name pos:start="435:49" pos:end="435:68">FF_PROFILE_HEVC_REXT</name> <operator pos:start="435:70" pos:end="435:71">&amp;&amp;</operator> <name pos:start="435:73" pos:end="435:97">pps_range_extensions_flag</name></expr>)</condition> <block pos:start="435:100" pos:end="441:9">{<block_content pos:start="437:13" pos:end="439:25">

            <if_stmt pos:start="437:13" pos:end="439:25"><if pos:start="437:13" pos:end="439:25">if <condition pos:start="437:16" pos:end="437:70">(<expr pos:start="437:17" pos:end="437:69"><operator pos:start="437:17" pos:end="437:17">(</operator><name pos:start="437:18" pos:end="437:20">ret</name> <operator pos:start="437:22" pos:end="437:22">=</operator> <call pos:start="437:24" pos:end="437:64"><name pos:start="437:24" pos:end="437:43">pps_range_extensions</name><argument_list pos:start="437:44" pos:end="437:64">(<argument pos:start="437:45" pos:end="437:46"><expr pos:start="437:45" pos:end="437:46"><name pos:start="437:45" pos:end="437:46">gb</name></expr></argument>, <argument pos:start="437:49" pos:end="437:53"><expr pos:start="437:49" pos:end="437:53"><name pos:start="437:49" pos:end="437:53">avctx</name></expr></argument>, <argument pos:start="437:56" pos:end="437:58"><expr pos:start="437:56" pos:end="437:58"><name pos:start="437:56" pos:end="437:58">pps</name></expr></argument>, <argument pos:start="437:61" pos:end="437:63"><expr pos:start="437:61" pos:end="437:63"><name pos:start="437:61" pos:end="437:63">sps</name></expr></argument>)</argument_list></call><operator pos:start="437:65" pos:end="437:65">)</operator> <operator pos:start="437:67" pos:end="437:67">&lt;</operator> <literal type="number" pos:start="437:69" pos:end="437:69">0</literal></expr>)</condition><block type="pseudo" pos:start="439:17" pos:end="439:25"><block_content pos:start="439:17" pos:end="439:25">

                <goto pos:start="439:17" pos:end="439:25">goto <name pos:start="439:22" pos:end="439:24">err</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="447:5" pos:end="447:41"><expr pos:start="447:5" pos:end="447:40"><name pos:start="447:5" pos:end="447:7">ret</name> <operator pos:start="447:9" pos:end="447:9">=</operator> <call pos:start="447:11" pos:end="447:40"><name pos:start="447:11" pos:end="447:19">setup_pps</name><argument_list pos:start="447:20" pos:end="447:40">(<argument pos:start="447:21" pos:end="447:25"><expr pos:start="447:21" pos:end="447:25"><name pos:start="447:21" pos:end="447:25">avctx</name></expr></argument>, <argument pos:start="447:28" pos:end="447:29"><expr pos:start="447:28" pos:end="447:29"><name pos:start="447:28" pos:end="447:29">gb</name></expr></argument>, <argument pos:start="447:32" pos:end="447:34"><expr pos:start="447:32" pos:end="447:34"><name pos:start="447:32" pos:end="447:34">pps</name></expr></argument>, <argument pos:start="447:37" pos:end="447:39"><expr pos:start="447:37" pos:end="447:39"><name pos:start="447:37" pos:end="447:39">sps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="449:5" pos:end="451:17"><if pos:start="449:5" pos:end="451:17">if <condition pos:start="449:8" pos:end="449:16">(<expr pos:start="449:9" pos:end="449:15"><name pos:start="449:9" pos:end="449:11">ret</name> <operator pos:start="449:13" pos:end="449:13">&lt;</operator> <literal type="number" pos:start="449:15" pos:end="449:15">0</literal></expr>)</condition><block type="pseudo" pos:start="451:9" pos:end="451:17"><block_content pos:start="451:9" pos:end="451:17">

        <goto pos:start="451:9" pos:end="451:17">goto <name pos:start="451:14" pos:end="451:16">err</name>;</goto></block_content></block></if></if_stmt>



    <if_stmt pos:start="455:5" pos:end="463:5"><if pos:start="455:5" pos:end="463:5">if <condition pos:start="455:8" pos:end="455:30">(<expr pos:start="455:9" pos:end="455:29"><call pos:start="455:9" pos:end="455:25"><name pos:start="455:9" pos:end="455:21">get_bits_left</name><argument_list pos:start="455:22" pos:end="455:25">(<argument pos:start="455:23" pos:end="455:24"><expr pos:start="455:23" pos:end="455:24"><name pos:start="455:23" pos:end="455:24">gb</name></expr></argument>)</argument_list></call> <operator pos:start="455:27" pos:end="455:27">&lt;</operator> <literal type="number" pos:start="455:29" pos:end="455:29">0</literal></expr>)</condition> <block pos:start="455:32" pos:end="463:5">{<block_content pos:start="457:9" pos:end="461:17">

        <expr_stmt pos:start="457:9" pos:end="459:64"><expr pos:start="457:9" pos:end="459:63"><call pos:start="457:9" pos:end="459:63"><name pos:start="457:9" pos:end="457:14">av_log</name><argument_list pos:start="457:15" pos:end="459:63">(<argument pos:start="457:16" pos:end="457:20"><expr pos:start="457:16" pos:end="457:20"><name pos:start="457:16" pos:end="457:20">avctx</name></expr></argument>, <argument pos:start="457:23" pos:end="457:34"><expr pos:start="457:23" pos:end="457:34"><name pos:start="457:23" pos:end="457:34">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="459:16" pos:end="459:42"><expr pos:start="459:16" pos:end="459:42"><literal type="string" pos:start="459:16" pos:end="459:42">"Overread PPS by %d bits\n"</literal></expr></argument>, <argument pos:start="459:45" pos:end="459:62"><expr pos:start="459:45" pos:end="459:62"><operator pos:start="459:45" pos:end="459:45">-</operator><call pos:start="459:46" pos:end="459:62"><name pos:start="459:46" pos:end="459:58">get_bits_left</name><argument_list pos:start="459:59" pos:end="459:62">(<argument pos:start="459:60" pos:end="459:61"><expr pos:start="459:60" pos:end="459:61"><name pos:start="459:60" pos:end="459:61">gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="461:9" pos:end="461:17">goto <name pos:start="461:14" pos:end="461:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="467:5" pos:end="467:27"><expr pos:start="467:5" pos:end="467:26"><call pos:start="467:5" pos:end="467:26"><name pos:start="467:5" pos:end="467:14">remove_pps</name><argument_list pos:start="467:15" pos:end="467:26">(<argument pos:start="467:16" pos:end="467:17"><expr pos:start="467:16" pos:end="467:17"><name pos:start="467:16" pos:end="467:17">ps</name></expr></argument>, <argument pos:start="467:20" pos:end="467:25"><expr pos:start="467:20" pos:end="467:25"><name pos:start="467:20" pos:end="467:25">pps_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="469:5" pos:end="469:35"><expr pos:start="469:5" pos:end="469:34"><name pos:start="469:5" pos:end="469:24"><name pos:start="469:5" pos:end="469:6">ps</name><operator pos:start="469:7" pos:end="469:8">-&gt;</operator><name pos:start="469:9" pos:end="469:16">pps_list</name><index pos:start="469:17" pos:end="469:24">[<expr pos:start="469:18" pos:end="469:23"><name pos:start="469:18" pos:end="469:23">pps_id</name></expr>]</index></name> <operator pos:start="469:26" pos:end="469:26">=</operator> <name pos:start="469:28" pos:end="469:34">pps_buf</name></expr>;</expr_stmt>



    <return pos:start="473:5" pos:end="473:13">return <expr pos:start="473:12" pos:end="473:12"><literal type="number" pos:start="473:12" pos:end="473:12">0</literal></expr>;</return>



<label pos:start="477:1" pos:end="477:4"><name pos:start="477:1" pos:end="477:3">err</name>:</label>

    <expr_stmt pos:start="479:5" pos:end="479:30"><expr pos:start="479:5" pos:end="479:29"><call pos:start="479:5" pos:end="479:29"><name pos:start="479:5" pos:end="479:19">av_buffer_unref</name><argument_list pos:start="479:20" pos:end="479:29">(<argument pos:start="479:21" pos:end="479:28"><expr pos:start="479:21" pos:end="479:28"><operator pos:start="479:21" pos:end="479:21">&amp;</operator><name pos:start="479:22" pos:end="479:28">pps_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="481:5" pos:end="481:15">return <expr pos:start="481:12" pos:end="481:14"><name pos:start="481:12" pos:end="481:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
