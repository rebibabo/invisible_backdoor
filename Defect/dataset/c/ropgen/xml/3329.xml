<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3329.c" pos:tabs="8"><function pos:start="1:1" pos:end="69:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">do_bit_allocation</name><parameter_list pos:start="1:30" pos:end="1:63">(<parameter pos:start="1:31" pos:end="1:51"><decl pos:start="1:31" pos:end="1:51"><type pos:start="1:31" pos:end="1:51"><name pos:start="1:31" pos:end="1:46">AC3DecodeContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:51">ctx</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:62"><decl pos:start="1:54" pos:end="1:62"><type pos:start="1:54" pos:end="1:62"><name pos:start="1:54" pos:end="1:56">int</name></type> <name pos:start="1:58" pos:end="1:62">flags</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="69:1">{<block_content pos:start="5:5" pos:end="67:35">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19">ac3_audio_block</name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:23">ab</name> <init pos:start="5:25" pos:end="5:43">= <expr pos:start="5:27" pos:end="5:43"><operator pos:start="5:27" pos:end="5:27">&amp;</operator><name pos:start="5:28" pos:end="5:43"><name pos:start="5:28" pos:end="5:30">ctx</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:43">audio_block</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:23"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:19">snroffst</name> <init pos:start="7:21" pos:end="7:23">= <expr pos:start="7:23" pos:end="7:23"><literal type="number" pos:start="7:23" pos:end="7:23">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="13:15"><if pos:start="11:5" pos:end="13:15">if <condition pos:start="11:8" pos:end="11:15">(<expr pos:start="11:9" pos:end="11:14"><operator pos:start="11:9" pos:end="11:9">!</operator><name pos:start="11:10" pos:end="11:14">flags</name></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="13:15"><block_content pos:start="13:9" pos:end="13:15"> <comment type="block" pos:start="11:17" pos:end="11:52">/* bit allocation is not required */</comment>

        <return pos:start="13:9" pos:end="13:15">return;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="17:5" pos:end="49:5"><if pos:start="17:5" pos:end="49:5">if <condition pos:start="17:8" pos:end="17:37">(<expr pos:start="17:9" pos:end="17:36"><name pos:start="17:9" pos:end="17:17"><name pos:start="17:9" pos:end="17:10">ab</name><operator pos:start="17:11" pos:end="17:12">-&gt;</operator><name pos:start="17:13" pos:end="17:17">flags</name></name> <operator pos:start="17:19" pos:end="17:19">&amp;</operator> <name pos:start="17:21" pos:end="17:36">AC3_AB_SNROFFSTE</name></expr>)</condition> <block pos:start="17:39" pos:end="49:5">{<block_content pos:start="19:9" pos:end="47:9"> <comment type="block" pos:start="17:41" pos:end="17:78">/* check whether snroffsts are zero */</comment>

        <expr_stmt pos:start="19:9" pos:end="19:34"><expr pos:start="19:9" pos:end="19:33"><name pos:start="19:9" pos:end="19:16">snroffst</name> <operator pos:start="19:18" pos:end="19:19">+=</operator> <name pos:start="19:21" pos:end="19:33"><name pos:start="19:21" pos:end="19:22">ab</name><operator pos:start="19:23" pos:end="19:24">-&gt;</operator><name pos:start="19:25" pos:end="19:33">csnroffst</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="21:9" pos:end="23:41"><if pos:start="21:9" pos:end="23:41">if <condition pos:start="21:12" pos:end="21:38">(<expr pos:start="21:13" pos:end="21:37"><name pos:start="21:13" pos:end="21:21"><name pos:start="21:13" pos:end="21:14">ab</name><operator pos:start="21:15" pos:end="21:16">-&gt;</operator><name pos:start="21:17" pos:end="21:21">flags</name></name> <operator pos:start="21:23" pos:end="21:23">&amp;</operator> <name pos:start="21:25" pos:end="21:37">AC3_AB_CPLINU</name></expr>)</condition><block type="pseudo" pos:start="23:13" pos:end="23:41"><block_content pos:start="23:13" pos:end="23:41">

            <expr_stmt pos:start="23:13" pos:end="23:41"><expr pos:start="23:13" pos:end="23:40"><name pos:start="23:13" pos:end="23:20">snroffst</name> <operator pos:start="23:22" pos:end="23:23">+=</operator> <name pos:start="23:25" pos:end="23:40"><name pos:start="23:25" pos:end="23:26">ab</name><operator pos:start="23:27" pos:end="23:28">-&gt;</operator><name pos:start="23:29" pos:end="23:40">cplfsnroffst</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <for pos:start="25:9" pos:end="27:41">for <control pos:start="25:13" pos:end="25:46">(<init pos:start="25:14" pos:end="25:19"><expr pos:start="25:14" pos:end="25:18"><name pos:start="25:14" pos:end="25:14">i</name> <operator pos:start="25:16" pos:end="25:16">=</operator> <literal type="number" pos:start="25:18" pos:end="25:18">0</literal></expr>;</init> <condition pos:start="25:21" pos:end="25:41"><expr pos:start="25:21" pos:end="25:40"><name pos:start="25:21" pos:end="25:21">i</name> <operator pos:start="25:23" pos:end="25:23">&lt;</operator> <name pos:start="25:25" pos:end="25:40"><name pos:start="25:25" pos:end="25:27">ctx</name><operator pos:start="25:28" pos:end="25:29">-&gt;</operator><name pos:start="25:30" pos:end="25:32">bsi</name><operator pos:start="25:33" pos:end="25:33">.</operator><name pos:start="25:34" pos:end="25:40">nfchans</name></name></expr>;</condition> <incr pos:start="25:43" pos:end="25:45"><expr pos:start="25:43" pos:end="25:45"><name pos:start="25:43" pos:end="25:43">i</name><operator pos:start="25:44" pos:end="25:45">++</operator></expr></incr>)</control><block type="pseudo" pos:start="27:13" pos:end="27:41"><block_content pos:start="27:13" pos:end="27:41">

            <expr_stmt pos:start="27:13" pos:end="27:41"><expr pos:start="27:13" pos:end="27:40"><name pos:start="27:13" pos:end="27:20">snroffst</name> <operator pos:start="27:22" pos:end="27:23">+=</operator> <name pos:start="27:25" pos:end="27:40"><name pos:start="27:25" pos:end="27:26">ab</name><operator pos:start="27:27" pos:end="27:28">-&gt;</operator><name pos:start="27:29" pos:end="27:37">fsnroffst</name><index pos:start="27:38" pos:end="27:40">[<expr pos:start="27:39" pos:end="27:39"><name pos:start="27:39" pos:end="27:39">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        <if_stmt pos:start="29:9" pos:end="31:41"><if pos:start="29:9" pos:end="31:41">if <condition pos:start="29:12" pos:end="29:43">(<expr pos:start="29:13" pos:end="29:42"><name pos:start="29:13" pos:end="29:26"><name pos:start="29:13" pos:end="29:15">ctx</name><operator pos:start="29:16" pos:end="29:17">-&gt;</operator><name pos:start="29:18" pos:end="29:20">bsi</name><operator pos:start="29:21" pos:end="29:21">.</operator><name pos:start="29:22" pos:end="29:26">flags</name></name> <operator pos:start="29:28" pos:end="29:28">&amp;</operator> <name pos:start="29:30" pos:end="29:42">AC3_BSI_LFEON</name></expr>)</condition><block type="pseudo" pos:start="31:13" pos:end="31:41"><block_content pos:start="31:13" pos:end="31:41">

            <expr_stmt pos:start="31:13" pos:end="31:41"><expr pos:start="31:13" pos:end="31:40"><name pos:start="31:13" pos:end="31:20">snroffst</name> <operator pos:start="31:22" pos:end="31:23">+=</operator> <name pos:start="31:25" pos:end="31:40"><name pos:start="31:25" pos:end="31:26">ab</name><operator pos:start="31:27" pos:end="31:28">-&gt;</operator><name pos:start="31:29" pos:end="31:40">lfefsnroffst</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="33:9" pos:end="47:9"><if pos:start="33:9" pos:end="47:9">if <condition pos:start="33:12" pos:end="33:22">(<expr pos:start="33:13" pos:end="33:21"><operator pos:start="33:13" pos:end="33:13">!</operator><name pos:start="33:14" pos:end="33:21">snroffst</name></expr>)</condition> <block pos:start="33:24" pos:end="47:9">{<block_content pos:start="35:13" pos:end="45:19">

            <expr_stmt pos:start="35:13" pos:end="35:55"><expr pos:start="35:13" pos:end="35:54"><call pos:start="35:13" pos:end="35:54"><name pos:start="35:13" pos:end="35:18">memset</name><argument_list pos:start="35:19" pos:end="35:54">(<argument pos:start="35:20" pos:end="35:29"><expr pos:start="35:20" pos:end="35:29"><name pos:start="35:20" pos:end="35:29"><name pos:start="35:20" pos:end="35:21">ab</name><operator pos:start="35:22" pos:end="35:23">-&gt;</operator><name pos:start="35:24" pos:end="35:29">cplbap</name></name></expr></argument>, <argument pos:start="35:32" pos:end="35:32"><expr pos:start="35:32" pos:end="35:32"><literal type="number" pos:start="35:32" pos:end="35:32">0</literal></expr></argument>, <argument pos:start="35:35" pos:end="35:53"><expr pos:start="35:35" pos:end="35:53"><sizeof pos:start="35:35" pos:end="35:53">sizeof <argument_list pos:start="35:42" pos:end="35:53">(<argument pos:start="35:43" pos:end="35:52"><expr pos:start="35:43" pos:end="35:52"><name pos:start="35:43" pos:end="35:52"><name pos:start="35:43" pos:end="35:44">ab</name><operator pos:start="35:45" pos:end="35:46">-&gt;</operator><name pos:start="35:47" pos:end="35:52">cplbap</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="37:13" pos:end="39:59">for <control pos:start="37:17" pos:end="37:50">(<init pos:start="37:18" pos:end="37:23"><expr pos:start="37:18" pos:end="37:22"><name pos:start="37:18" pos:end="37:18">i</name> <operator pos:start="37:20" pos:end="37:20">=</operator> <literal type="number" pos:start="37:22" pos:end="37:22">0</literal></expr>;</init> <condition pos:start="37:25" pos:end="37:45"><expr pos:start="37:25" pos:end="37:44"><name pos:start="37:25" pos:end="37:25">i</name> <operator pos:start="37:27" pos:end="37:27">&lt;</operator> <name pos:start="37:29" pos:end="37:44"><name pos:start="37:29" pos:end="37:31">ctx</name><operator pos:start="37:32" pos:end="37:33">-&gt;</operator><name pos:start="37:34" pos:end="37:36">bsi</name><operator pos:start="37:37" pos:end="37:37">.</operator><name pos:start="37:38" pos:end="37:44">nfchans</name></name></expr>;</condition> <incr pos:start="37:47" pos:end="37:49"><expr pos:start="37:47" pos:end="37:49"><name pos:start="37:47" pos:end="37:47">i</name><operator pos:start="37:48" pos:end="37:49">++</operator></expr></incr>)</control><block type="pseudo" pos:start="39:17" pos:end="39:59"><block_content pos:start="39:17" pos:end="39:59">

                <expr_stmt pos:start="39:17" pos:end="39:59"><expr pos:start="39:17" pos:end="39:58"><call pos:start="39:17" pos:end="39:58"><name pos:start="39:17" pos:end="39:22">memset</name><argument_list pos:start="39:23" pos:end="39:58">(<argument pos:start="39:24" pos:end="39:33"><expr pos:start="39:24" pos:end="39:33"><name pos:start="39:24" pos:end="39:33"><name pos:start="39:24" pos:end="39:25">ab</name><operator pos:start="39:26" pos:end="39:27">-&gt;</operator><name pos:start="39:28" pos:end="39:30">bap</name><index pos:start="39:31" pos:end="39:33">[<expr pos:start="39:32" pos:end="39:32"><name pos:start="39:32" pos:end="39:32">i</name></expr>]</index></name></expr></argument>, <argument pos:start="39:36" pos:end="39:36"><expr pos:start="39:36" pos:end="39:36"><literal type="number" pos:start="39:36" pos:end="39:36">0</literal></expr></argument>, <argument pos:start="39:39" pos:end="39:57"><expr pos:start="39:39" pos:end="39:57"><sizeof pos:start="39:39" pos:end="39:57">sizeof <argument_list pos:start="39:46" pos:end="39:57">(<argument pos:start="39:47" pos:end="39:56"><expr pos:start="39:47" pos:end="39:56"><name pos:start="39:47" pos:end="39:56"><name pos:start="39:47" pos:end="39:48">ab</name><operator pos:start="39:49" pos:end="39:50">-&gt;</operator><name pos:start="39:51" pos:end="39:53">bap</name><index pos:start="39:54" pos:end="39:56">[<expr pos:start="39:55" pos:end="39:55"><name pos:start="39:55" pos:end="39:55">i</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="41:13" pos:end="41:55"><expr pos:start="41:13" pos:end="41:54"><call pos:start="41:13" pos:end="41:54"><name pos:start="41:13" pos:end="41:18">memset</name><argument_list pos:start="41:19" pos:end="41:54">(<argument pos:start="41:20" pos:end="41:29"><expr pos:start="41:20" pos:end="41:29"><name pos:start="41:20" pos:end="41:29"><name pos:start="41:20" pos:end="41:21">ab</name><operator pos:start="41:22" pos:end="41:23">-&gt;</operator><name pos:start="41:24" pos:end="41:29">lfebap</name></name></expr></argument>, <argument pos:start="41:32" pos:end="41:32"><expr pos:start="41:32" pos:end="41:32"><literal type="number" pos:start="41:32" pos:end="41:32">0</literal></expr></argument>, <argument pos:start="41:35" pos:end="41:53"><expr pos:start="41:35" pos:end="41:53"><sizeof pos:start="41:35" pos:end="41:53">sizeof <argument_list pos:start="41:42" pos:end="41:53">(<argument pos:start="41:43" pos:end="41:52"><expr pos:start="41:43" pos:end="41:52"><name pos:start="41:43" pos:end="41:52"><name pos:start="41:43" pos:end="41:44">ab</name><operator pos:start="41:45" pos:end="41:46">-&gt;</operator><name pos:start="41:47" pos:end="41:52">lfebap</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <return pos:start="45:13" pos:end="45:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:32">/* perform bit allocation */</comment>

    <if_stmt pos:start="55:5" pos:end="57:35"><if pos:start="55:5" pos:end="57:35">if <condition pos:start="55:8" pos:end="55:52">(<expr pos:start="55:9" pos:end="55:51"><operator pos:start="55:9" pos:end="55:9">(</operator><name pos:start="55:10" pos:end="55:18"><name pos:start="55:10" pos:end="55:11">ab</name><operator pos:start="55:12" pos:end="55:13">-&gt;</operator><name pos:start="55:14" pos:end="55:18">flags</name></name> <operator pos:start="55:20" pos:end="55:20">&amp;</operator> <name pos:start="55:22" pos:end="55:34">AC3_AB_CPLINU</name><operator pos:start="55:35" pos:end="55:35">)</operator> <operator pos:start="55:37" pos:end="55:38">&amp;&amp;</operator> <operator pos:start="55:40" pos:end="55:40">(</operator><name pos:start="55:41" pos:end="55:45">flags</name> <operator pos:start="55:47" pos:end="55:47">&amp;</operator> <literal type="number" pos:start="55:49" pos:end="55:50">64</literal><operator pos:start="55:51" pos:end="55:51">)</operator></expr>)</condition><block type="pseudo" pos:start="57:9" pos:end="57:35"><block_content pos:start="57:9" pos:end="57:35">

        <expr_stmt pos:start="57:9" pos:end="57:35"><expr pos:start="57:9" pos:end="57:34"><call pos:start="57:9" pos:end="57:34"><name pos:start="57:9" pos:end="57:26">do_bit_allocation1</name><argument_list pos:start="57:27" pos:end="57:34">(<argument pos:start="57:28" pos:end="57:30"><expr pos:start="57:28" pos:end="57:30"><name pos:start="57:28" pos:end="57:30">ctx</name></expr></argument>, <argument pos:start="57:33" pos:end="57:33"><expr pos:start="57:33" pos:end="57:33"><literal type="number" pos:start="57:33" pos:end="57:33">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for pos:start="59:5" pos:end="63:39">for <control pos:start="59:9" pos:end="59:42">(<init pos:start="59:10" pos:end="59:15"><expr pos:start="59:10" pos:end="59:14"><name pos:start="59:10" pos:end="59:10">i</name> <operator pos:start="59:12" pos:end="59:12">=</operator> <literal type="number" pos:start="59:14" pos:end="59:14">0</literal></expr>;</init> <condition pos:start="59:17" pos:end="59:37"><expr pos:start="59:17" pos:end="59:36"><name pos:start="59:17" pos:end="59:17">i</name> <operator pos:start="59:19" pos:end="59:19">&lt;</operator> <name pos:start="59:21" pos:end="59:36"><name pos:start="59:21" pos:end="59:23">ctx</name><operator pos:start="59:24" pos:end="59:25">-&gt;</operator><name pos:start="59:26" pos:end="59:28">bsi</name><operator pos:start="59:29" pos:end="59:29">.</operator><name pos:start="59:30" pos:end="59:36">nfchans</name></name></expr>;</condition> <incr pos:start="59:39" pos:end="59:41"><expr pos:start="59:39" pos:end="59:41"><name pos:start="59:39" pos:end="59:39">i</name><operator pos:start="59:40" pos:end="59:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="61:9" pos:end="63:39"><block_content pos:start="61:9" pos:end="63:39">

        <if_stmt pos:start="61:9" pos:end="63:39"><if pos:start="61:9" pos:end="63:39">if <condition pos:start="61:12" pos:end="61:29">(<expr pos:start="61:13" pos:end="61:28"><name pos:start="61:13" pos:end="61:17">flags</name> <operator pos:start="61:19" pos:end="61:19">&amp;</operator> <operator pos:start="61:21" pos:end="61:21">(</operator><literal type="number" pos:start="61:22" pos:end="61:22">1</literal> <operator pos:start="61:24" pos:end="61:25">&lt;&lt;</operator> <name pos:start="61:27" pos:end="61:27">i</name><operator pos:start="61:28" pos:end="61:28">)</operator></expr>)</condition><block type="pseudo" pos:start="63:13" pos:end="63:39"><block_content pos:start="63:13" pos:end="63:39">

            <expr_stmt pos:start="63:13" pos:end="63:39"><expr pos:start="63:13" pos:end="63:38"><call pos:start="63:13" pos:end="63:38"><name pos:start="63:13" pos:end="63:30">do_bit_allocation1</name><argument_list pos:start="63:31" pos:end="63:38">(<argument pos:start="63:32" pos:end="63:34"><expr pos:start="63:32" pos:end="63:34"><name pos:start="63:32" pos:end="63:34">ctx</name></expr></argument>, <argument pos:start="63:37" pos:end="63:37"><expr pos:start="63:37" pos:end="63:37"><name pos:start="63:37" pos:end="63:37">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

    <if_stmt pos:start="65:5" pos:end="67:35"><if pos:start="65:5" pos:end="67:35">if <condition pos:start="65:8" pos:end="65:57">(<expr pos:start="65:9" pos:end="65:56"><operator pos:start="65:9" pos:end="65:9">(</operator><name pos:start="65:10" pos:end="65:23"><name pos:start="65:10" pos:end="65:12">ctx</name><operator pos:start="65:13" pos:end="65:14">-&gt;</operator><name pos:start="65:15" pos:end="65:17">bsi</name><operator pos:start="65:18" pos:end="65:18">.</operator><name pos:start="65:19" pos:end="65:23">flags</name></name> <operator pos:start="65:25" pos:end="65:25">&amp;</operator> <name pos:start="65:27" pos:end="65:39">AC3_BSI_LFEON</name><operator pos:start="65:40" pos:end="65:40">)</operator> <operator pos:start="65:42" pos:end="65:43">&amp;&amp;</operator> <operator pos:start="65:45" pos:end="65:45">(</operator><name pos:start="65:46" pos:end="65:50">flags</name> <operator pos:start="65:52" pos:end="65:52">&amp;</operator> <literal type="number" pos:start="65:54" pos:end="65:55">32</literal><operator pos:start="65:56" pos:end="65:56">)</operator></expr>)</condition><block type="pseudo" pos:start="67:9" pos:end="67:35"><block_content pos:start="67:9" pos:end="67:35">

        <expr_stmt pos:start="67:9" pos:end="67:35"><expr pos:start="67:9" pos:end="67:34"><call pos:start="67:9" pos:end="67:34"><name pos:start="67:9" pos:end="67:26">do_bit_allocation1</name><argument_list pos:start="67:27" pos:end="67:34">(<argument pos:start="67:28" pos:end="67:30"><expr pos:start="67:28" pos:end="67:30"><name pos:start="67:28" pos:end="67:30">ctx</name></expr></argument>, <argument pos:start="67:33" pos:end="67:33"><expr pos:start="67:33" pos:end="67:33"><literal type="number" pos:start="67:33" pos:end="67:33">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>
</unit>
