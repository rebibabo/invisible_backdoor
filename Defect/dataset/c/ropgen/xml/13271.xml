<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13271.c" pos:tabs="8"><function pos:start="1:1" pos:end="55:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:22">CharDriverState</name> <modifier pos:start="1:24" pos:end="1:24">*</modifier></type><name pos:start="1:25" pos:end="1:43">qemu_chr_open_pp_fd</name><parameter_list pos:start="1:44" pos:end="5:57">(<parameter pos:start="1:45" pos:end="1:50"><decl pos:start="1:45" pos:end="1:50"><type pos:start="1:45" pos:end="1:50"><name pos:start="1:45" pos:end="1:47">int</name></type> <name pos:start="1:49" pos:end="1:50">fd</name></decl></parameter>,

                                            <parameter pos:start="3:45" pos:end="3:66"><decl pos:start="3:45" pos:end="3:66"><type pos:start="3:45" pos:end="3:66"><name pos:start="3:45" pos:end="3:57">ChardevCommon</name> <modifier pos:start="3:59" pos:end="3:59">*</modifier></type><name pos:start="3:60" pos:end="3:66">backend</name></decl></parameter>,

                                            <parameter pos:start="5:45" pos:end="5:56"><decl pos:start="5:45" pos:end="5:56"><type pos:start="5:45" pos:end="5:56"><name pos:start="5:45" pos:end="5:49">Error</name> <modifier pos:start="5:51" pos:end="5:51">*</modifier><modifier pos:start="5:52" pos:end="5:52">*</modifier></type><name pos:start="5:53" pos:end="5:56">errp</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="55:1">{<block_content pos:start="9:5" pos:end="53:15">

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:21"><name pos:start="9:5" pos:end="9:19">CharDriverState</name> <modifier pos:start="9:21" pos:end="9:21">*</modifier></type><name pos:start="9:22" pos:end="9:24">chr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:24"><name pos:start="11:5" pos:end="11:22">ParallelCharDriver</name> <modifier pos:start="11:24" pos:end="11:24">*</modifier></type><name pos:start="11:25" pos:end="11:27">drv</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="23:5"><if pos:start="15:5" pos:end="23:5">if <condition pos:start="15:8" pos:end="15:31">(<expr pos:start="15:9" pos:end="15:30"><call pos:start="15:9" pos:end="15:26"><name pos:start="15:9" pos:end="15:13">ioctl</name><argument_list pos:start="15:14" pos:end="15:26">(<argument pos:start="15:15" pos:end="15:16"><expr pos:start="15:15" pos:end="15:16"><name pos:start="15:15" pos:end="15:16">fd</name></expr></argument>, <argument pos:start="15:19" pos:end="15:25"><expr pos:start="15:19" pos:end="15:25"><name pos:start="15:19" pos:end="15:25">PPCLAIM</name></expr></argument>)</argument_list></call> <operator pos:start="15:28" pos:end="15:28">&lt;</operator> <literal type="number" pos:start="15:30" pos:end="15:30">0</literal></expr>)</condition> <block pos:start="15:33" pos:end="23:5">{<block_content pos:start="17:9" pos:end="21:20">

        <expr_stmt pos:start="17:9" pos:end="17:61"><expr pos:start="17:9" pos:end="17:60"><call pos:start="17:9" pos:end="17:60"><name pos:start="17:9" pos:end="17:24">error_setg_errno</name><argument_list pos:start="17:25" pos:end="17:60">(<argument pos:start="17:26" pos:end="17:29"><expr pos:start="17:26" pos:end="17:29"><name pos:start="17:26" pos:end="17:29">errp</name></expr></argument>, <argument pos:start="17:32" pos:end="17:36"><expr pos:start="17:32" pos:end="17:36"><name pos:start="17:32" pos:end="17:36">errno</name></expr></argument>, <argument pos:start="17:39" pos:end="17:59"><expr pos:start="17:39" pos:end="17:59"><literal type="string" pos:start="17:39" pos:end="17:59">"not a parallel port"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:18"><expr pos:start="19:9" pos:end="19:17"><call pos:start="19:9" pos:end="19:17"><name pos:start="19:9" pos:end="19:13">close</name><argument_list pos:start="19:14" pos:end="19:17">(<argument pos:start="19:15" pos:end="19:16"><expr pos:start="19:15" pos:end="19:16"><name pos:start="19:15" pos:end="19:16">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:20">return <expr pos:start="21:16" pos:end="21:19"><name pos:start="21:16" pos:end="21:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:40"><expr pos:start="27:5" pos:end="27:39"><name pos:start="27:5" pos:end="27:7">drv</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <call pos:start="27:11" pos:end="27:39"><name pos:start="27:11" pos:end="27:16">g_new0</name><argument_list pos:start="27:17" pos:end="27:39">(<argument pos:start="27:18" pos:end="27:35"><expr pos:start="27:18" pos:end="27:35"><name pos:start="27:18" pos:end="27:35">ParallelCharDriver</name></expr></argument>, <argument pos:start="27:38" pos:end="27:38"><expr pos:start="27:38" pos:end="27:38"><literal type="number" pos:start="27:38" pos:end="27:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:17"><expr pos:start="29:5" pos:end="29:16"><name pos:start="29:5" pos:end="29:11"><name pos:start="29:5" pos:end="29:7">drv</name><operator pos:start="29:8" pos:end="29:9">-&gt;</operator><name pos:start="29:10" pos:end="29:11">fd</name></name> <operator pos:start="29:13" pos:end="29:13">=</operator> <name pos:start="29:15" pos:end="29:16">fd</name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:37"><expr pos:start="31:5" pos:end="31:36"><name pos:start="31:5" pos:end="31:13"><name pos:start="31:5" pos:end="31:7">drv</name><operator pos:start="31:8" pos:end="31:9">-&gt;</operator><name pos:start="31:10" pos:end="31:13">mode</name></name> <operator pos:start="31:15" pos:end="31:15">=</operator> <name pos:start="31:17" pos:end="31:36">IEEE1284_MODE_COMPAT</name></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:40"><expr pos:start="35:5" pos:end="35:39"><name pos:start="35:5" pos:end="35:7">chr</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="35:39"><name pos:start="35:11" pos:end="35:24">qemu_chr_alloc</name><argument_list pos:start="35:25" pos:end="35:39">(<argument pos:start="35:26" pos:end="35:32"><expr pos:start="35:26" pos:end="35:32"><name pos:start="35:26" pos:end="35:32">backend</name></expr></argument>, <argument pos:start="35:35" pos:end="35:38"><expr pos:start="35:35" pos:end="35:38"><name pos:start="35:35" pos:end="35:38">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="41:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:13">(<expr pos:start="37:9" pos:end="37:12"><operator pos:start="37:9" pos:end="37:9">!</operator><name pos:start="37:10" pos:end="37:12">chr</name></expr>)</condition> <block pos:start="37:15" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:20">

        <return pos:start="39:9" pos:end="39:20">return <expr pos:start="39:16" pos:end="39:19"><name pos:start="39:16" pos:end="39:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:36"><expr pos:start="43:5" pos:end="43:35"><name pos:start="43:5" pos:end="43:18"><name pos:start="43:5" pos:end="43:7">chr</name><operator pos:start="43:8" pos:end="43:9">-&gt;</operator><name pos:start="43:10" pos:end="43:18">chr_write</name></name> <operator pos:start="43:20" pos:end="43:20">=</operator> <name pos:start="43:22" pos:end="43:35">null_chr_write</name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:30"><expr pos:start="45:5" pos:end="45:29"><name pos:start="45:5" pos:end="45:18"><name pos:start="45:5" pos:end="45:7">chr</name><operator pos:start="45:8" pos:end="45:9">-&gt;</operator><name pos:start="45:10" pos:end="45:18">chr_ioctl</name></name> <operator pos:start="45:20" pos:end="45:20">=</operator> <name pos:start="45:22" pos:end="45:29">pp_ioctl</name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:30"><expr pos:start="47:5" pos:end="47:29"><name pos:start="47:5" pos:end="47:18"><name pos:start="47:5" pos:end="47:7">chr</name><operator pos:start="47:8" pos:end="47:9">-&gt;</operator><name pos:start="47:10" pos:end="47:18">chr_close</name></name> <operator pos:start="47:20" pos:end="47:20">=</operator> <name pos:start="47:22" pos:end="47:29">pp_close</name></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:22"><expr pos:start="49:5" pos:end="49:21"><name pos:start="49:5" pos:end="49:15"><name pos:start="49:5" pos:end="49:7">chr</name><operator pos:start="49:8" pos:end="49:9">-&gt;</operator><name pos:start="49:10" pos:end="49:15">opaque</name></name> <operator pos:start="49:17" pos:end="49:17">=</operator> <name pos:start="49:19" pos:end="49:21">drv</name></expr>;</expr_stmt>



    <return pos:start="53:5" pos:end="53:15">return <expr pos:start="53:12" pos:end="53:14"><name pos:start="53:12" pos:end="53:14">chr</name></expr>;</return>

</block_content>}</block></function>
</unit>
