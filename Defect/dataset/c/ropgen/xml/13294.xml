<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13294.c" pos:tabs="8"><function pos:start="1:1" pos:end="152:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">aac_adtstoasc_filter</name><parameter_list pos:start="1:32" pos:end="9:45">(<parameter pos:start="1:33" pos:end="1:62"><decl pos:start="1:33" pos:end="1:62"><type pos:start="1:33" pos:end="1:62"><name pos:start="1:33" pos:end="1:56">AVBitStreamFilterContext</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">bsfc</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:53"><decl pos:start="3:33" pos:end="3:53"><type pos:start="3:33" pos:end="3:53"><name pos:start="3:33" pos:end="3:46">AVCodecContext</name> <modifier pos:start="3:48" pos:end="3:48">*</modifier></type><name pos:start="3:49" pos:end="3:53">avctx</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:71"><decl pos:start="3:56" pos:end="3:71"><type pos:start="3:56" pos:end="3:71"><specifier pos:start="3:56" pos:end="3:60">const</specifier> <name pos:start="3:62" pos:end="3:65">char</name> <modifier pos:start="3:67" pos:end="3:67">*</modifier></type><name pos:start="3:68" pos:end="3:71">args</name></decl></parameter>,

                                <parameter pos:start="5:33" pos:end="5:50"><decl pos:start="5:33" pos:end="5:50"><type pos:start="5:33" pos:end="5:50"><name pos:start="5:33" pos:end="5:39">uint8_t</name>  <modifier pos:start="5:42" pos:end="5:42">*</modifier><modifier pos:start="5:43" pos:end="5:43">*</modifier></type><name pos:start="5:44" pos:end="5:50">poutbuf</name></decl></parameter>, <parameter pos:start="5:53" pos:end="5:69"><decl pos:start="5:53" pos:end="5:69"><type pos:start="5:53" pos:end="5:69"><name pos:start="5:53" pos:end="5:55">int</name> <modifier pos:start="5:57" pos:end="5:57">*</modifier></type><name pos:start="5:58" pos:end="5:69">poutbuf_size</name></decl></parameter>,

                                <parameter pos:start="7:33" pos:end="7:50"><decl pos:start="7:33" pos:end="7:50"><type pos:start="7:33" pos:end="7:50"><specifier pos:start="7:33" pos:end="7:37">const</specifier> <name pos:start="7:39" pos:end="7:45">uint8_t</name> <modifier pos:start="7:47" pos:end="7:47">*</modifier></type><name pos:start="7:48" pos:end="7:50">buf</name></decl></parameter>, <parameter pos:start="7:53" pos:end="7:69"><decl pos:start="7:53" pos:end="7:69"><type pos:start="7:53" pos:end="7:69"><name pos:start="7:53" pos:end="7:55">int</name></type>      <name pos:start="7:62" pos:end="7:69">buf_size</name></decl></parameter>,

                                <parameter pos:start="9:33" pos:end="9:44"><decl pos:start="9:33" pos:end="9:44"><type pos:start="9:33" pos:end="9:44"><name pos:start="9:33" pos:end="9:35">int</name></type> <name pos:start="9:37" pos:end="9:44">keyframe</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="152:1">{<block_content pos:start="13:5" pos:end="150:13">

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:17">GetBitContext</name></type> <name pos:start="13:19" pos:end="13:20">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:17">PutBitContext</name></type> <name pos:start="15:19" pos:end="15:20">pb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:21"><name pos:start="17:5" pos:end="17:21">AACADTSHeaderInfo</name></type> <name pos:start="17:23" pos:end="17:25">hdr</name></decl>;</decl_stmt>



    <decl_stmt pos:start="21:5" pos:end="21:41"><decl pos:start="21:5" pos:end="21:40"><type pos:start="21:5" pos:end="21:19"><name pos:start="21:5" pos:end="21:17">AACBSFContext</name> <modifier pos:start="21:19" pos:end="21:19">*</modifier></type><name pos:start="21:20" pos:end="21:22">ctx</name> <init pos:start="21:24" pos:end="21:40">= <expr pos:start="21:26" pos:end="21:40"><name pos:start="21:26" pos:end="21:40"><name pos:start="21:26" pos:end="21:29">bsfc</name><operator pos:start="21:30" pos:end="21:31">-&gt;</operator><name pos:start="21:32" pos:end="21:40">priv_data</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:52"><expr pos:start="25:5" pos:end="25:51"><call pos:start="25:5" pos:end="25:51"><name pos:start="25:5" pos:end="25:17">init_get_bits</name><argument_list pos:start="25:18" pos:end="25:51">(<argument pos:start="25:19" pos:end="25:21"><expr pos:start="25:19" pos:end="25:21"><operator pos:start="25:19" pos:end="25:19">&amp;</operator><name pos:start="25:20" pos:end="25:21">gb</name></expr></argument>, <argument pos:start="25:24" pos:end="25:26"><expr pos:start="25:24" pos:end="25:26"><name pos:start="25:24" pos:end="25:26">buf</name></expr></argument>, <argument pos:start="25:29" pos:end="25:50"><expr pos:start="25:29" pos:end="25:50"><name pos:start="25:29" pos:end="25:48">AAC_ADTS_HEADER_SIZE</name><operator pos:start="25:49" pos:end="25:49">*</operator><literal type="number" pos:start="25:50" pos:end="25:50">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:30"><expr pos:start="29:5" pos:end="29:29"><operator pos:start="29:5" pos:end="29:5">*</operator><name pos:start="29:6" pos:end="29:12">poutbuf</name> <operator pos:start="29:14" pos:end="29:14">=</operator> <operator pos:start="29:16" pos:end="29:16">(</operator><name pos:start="29:17" pos:end="29:23">uint8_t</name><operator pos:start="29:24" pos:end="29:24">*</operator><operator pos:start="29:25" pos:end="29:25">)</operator> <name pos:start="29:27" pos:end="29:29">buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:29"><expr pos:start="31:5" pos:end="31:28"><operator pos:start="31:5" pos:end="31:5">*</operator><name pos:start="31:6" pos:end="31:17">poutbuf_size</name> <operator pos:start="31:19" pos:end="31:19">=</operator> <name pos:start="31:21" pos:end="31:28">buf_size</name></expr>;</expr_stmt>



    <if_stmt pos:start="35:5" pos:end="39:21"><if pos:start="35:5" pos:end="39:21">if <condition pos:start="35:8" pos:end="35:25">(<expr pos:start="35:9" pos:end="35:24"><name pos:start="35:9" pos:end="35:24"><name pos:start="35:9" pos:end="35:13">avctx</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:24">extradata</name></name></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="39:21"><block_content pos:start="37:9" pos:end="39:21">

        <if_stmt pos:start="37:9" pos:end="39:21"><if pos:start="37:9" pos:end="39:21">if <condition pos:start="37:12" pos:end="37:40">(<expr pos:start="37:13" pos:end="37:39"><call pos:start="37:13" pos:end="37:30"><name pos:start="37:13" pos:end="37:21">show_bits</name><argument_list pos:start="37:22" pos:end="37:30">(<argument pos:start="37:23" pos:end="37:25"><expr pos:start="37:23" pos:end="37:25"><operator pos:start="37:23" pos:end="37:23">&amp;</operator><name pos:start="37:24" pos:end="37:25">gb</name></expr></argument>, <argument pos:start="37:28" pos:end="37:29"><expr pos:start="37:28" pos:end="37:29"><literal type="number" pos:start="37:28" pos:end="37:29">12</literal></expr></argument>)</argument_list></call> <operator pos:start="37:32" pos:end="37:33">!=</operator> <literal type="number" pos:start="37:35" pos:end="37:39">0xfff</literal></expr>)</condition><block type="pseudo" pos:start="39:13" pos:end="39:21"><block_content pos:start="39:13" pos:end="39:21">

            <return pos:start="39:13" pos:end="39:21">return <expr pos:start="39:20" pos:end="39:20"><literal type="number" pos:start="39:20" pos:end="39:20">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="43:5" pos:end="49:5"><if pos:start="43:5" pos:end="49:5">if <condition pos:start="43:8" pos:end="43:47">(<expr pos:start="43:9" pos:end="43:46"><call pos:start="43:9" pos:end="43:42"><name pos:start="43:9" pos:end="43:31">avpriv_aac_parse_header</name><argument_list pos:start="43:32" pos:end="43:42">(<argument pos:start="43:33" pos:end="43:35"><expr pos:start="43:33" pos:end="43:35"><operator pos:start="43:33" pos:end="43:33">&amp;</operator><name pos:start="43:34" pos:end="43:35">gb</name></expr></argument>, <argument pos:start="43:38" pos:end="43:41"><expr pos:start="43:38" pos:end="43:41"><operator pos:start="43:38" pos:end="43:38">&amp;</operator><name pos:start="43:39" pos:end="43:41">hdr</name></expr></argument>)</argument_list></call> <operator pos:start="43:44" pos:end="43:44">&lt;</operator> <literal type="number" pos:start="43:46" pos:end="43:46">0</literal></expr>)</condition> <block pos:start="43:49" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:18">

        <expr_stmt pos:start="45:9" pos:end="45:74"><expr pos:start="45:9" pos:end="45:73"><call pos:start="45:9" pos:end="45:73"><name pos:start="45:9" pos:end="45:14">av_log</name><argument_list pos:start="45:15" pos:end="45:73">(<argument pos:start="45:16" pos:end="45:20"><expr pos:start="45:16" pos:end="45:20"><name pos:start="45:16" pos:end="45:20">avctx</name></expr></argument>, <argument pos:start="45:23" pos:end="45:34"><expr pos:start="45:23" pos:end="45:34"><name pos:start="45:23" pos:end="45:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="45:37" pos:end="45:72"><expr pos:start="45:37" pos:end="45:72"><literal type="string" pos:start="45:37" pos:end="45:72">"Error parsing ADTS frame header!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:18">return <expr pos:start="47:16" pos:end="47:17"><operator pos:start="47:16" pos:end="47:16">-</operator><literal type="number" pos:start="47:17" pos:end="47:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="53:5" pos:end="61:5"><if pos:start="53:5" pos:end="61:5">if <condition pos:start="53:8" pos:end="53:50">(<expr pos:start="53:9" pos:end="53:49"><operator pos:start="53:9" pos:end="53:9">!</operator><name pos:start="53:10" pos:end="53:23"><name pos:start="53:10" pos:end="53:12">hdr</name><operator pos:start="53:13" pos:end="53:13">.</operator><name pos:start="53:14" pos:end="53:23">crc_absent</name></name> <operator pos:start="53:25" pos:end="53:26">&amp;&amp;</operator> <name pos:start="53:28" pos:end="53:45"><name pos:start="53:28" pos:end="53:30">hdr</name><operator pos:start="53:31" pos:end="53:31">.</operator><name pos:start="53:32" pos:end="53:45">num_aac_frames</name></name> <operator pos:start="53:47" pos:end="53:47">&gt;</operator> <literal type="number" pos:start="53:49" pos:end="53:49">1</literal></expr>)</condition> <block pos:start="53:52" pos:end="61:5">{<block_content pos:start="55:9" pos:end="59:36">

        <expr_stmt pos:start="55:9" pos:end="57:74"><expr pos:start="55:9" pos:end="57:73"><call pos:start="55:9" pos:end="57:73"><name pos:start="55:9" pos:end="55:37">avpriv_report_missing_feature</name><argument_list pos:start="55:38" pos:end="57:73">(<argument pos:start="55:39" pos:end="55:43"><expr pos:start="55:39" pos:end="55:43"><name pos:start="55:39" pos:end="55:43">avctx</name></expr></argument>,

                                      <argument pos:start="57:39" pos:end="57:72"><expr pos:start="57:39" pos:end="57:72"><literal type="string" pos:start="57:39" pos:end="57:72">"Multiple RDBs per frame with CRC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:36">return <expr pos:start="59:16" pos:end="59:35"><name pos:start="59:16" pos:end="59:35">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:57"><expr pos:start="65:5" pos:end="65:56"><name pos:start="65:5" pos:end="65:7">buf</name>      <operator pos:start="65:14" pos:end="65:15">+=</operator> <name pos:start="65:17" pos:end="65:36">AAC_ADTS_HEADER_SIZE</name> <operator pos:start="65:38" pos:end="65:38">+</operator> <literal type="number" pos:start="65:40" pos:end="65:40">2</literal><operator pos:start="65:41" pos:end="65:41">*</operator><operator pos:start="65:42" pos:end="65:42">!</operator><name pos:start="65:43" pos:end="65:56"><name pos:start="65:43" pos:end="65:45">hdr</name><operator pos:start="65:46" pos:end="65:46">.</operator><name pos:start="65:47" pos:end="65:56">crc_absent</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:57"><expr pos:start="67:5" pos:end="67:56"><name pos:start="67:5" pos:end="67:12">buf_size</name> <operator pos:start="67:14" pos:end="67:15">-=</operator> <name pos:start="67:17" pos:end="67:36">AAC_ADTS_HEADER_SIZE</name> <operator pos:start="67:38" pos:end="67:38">+</operator> <literal type="number" pos:start="67:40" pos:end="67:40">2</literal><operator pos:start="67:41" pos:end="67:41">*</operator><operator pos:start="67:42" pos:end="67:42">!</operator><name pos:start="67:43" pos:end="67:56"><name pos:start="67:43" pos:end="67:45">hdr</name><operator pos:start="67:46" pos:end="67:46">.</operator><name pos:start="67:47" pos:end="67:56">crc_absent</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="71:5" pos:end="140:5"><if pos:start="71:5" pos:end="140:5">if <condition pos:start="71:8" pos:end="71:31">(<expr pos:start="71:9" pos:end="71:30"><operator pos:start="71:9" pos:end="71:9">!</operator><name pos:start="71:10" pos:end="71:30"><name pos:start="71:10" pos:end="71:12">ctx</name><operator pos:start="71:13" pos:end="71:14">-&gt;</operator><name pos:start="71:15" pos:end="71:30">first_frame_done</name></name></expr>)</condition> <block pos:start="71:33" pos:end="140:5">{<block_content pos:start="73:9" pos:end="138:34">

        <decl_stmt pos:start="73:9" pos:end="73:36"><decl pos:start="73:9" pos:end="73:35"><type pos:start="73:9" pos:end="73:11"><name pos:start="73:9" pos:end="73:11">int</name></type>            <name pos:start="73:24" pos:end="73:31">pce_size</name> <init pos:start="73:33" pos:end="73:35">= <expr pos:start="73:35" pos:end="73:35"><literal type="number" pos:start="73:35" pos:end="73:35">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="75:9" pos:end="75:46"><decl pos:start="75:9" pos:end="75:45"><type pos:start="75:9" pos:end="75:15"><name pos:start="75:9" pos:end="75:15">uint8_t</name></type>        <name pos:start="75:24" pos:end="75:45"><name pos:start="75:24" pos:end="75:31">pce_data</name><index pos:start="75:32" pos:end="75:45">[<expr pos:start="75:33" pos:end="75:44"><name pos:start="75:33" pos:end="75:44">MAX_PCE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

        <if_stmt pos:start="77:9" pos:end="105:9"><if pos:start="77:9" pos:end="105:9">if <condition pos:start="77:12" pos:end="77:29">(<expr pos:start="77:13" pos:end="77:28"><operator pos:start="77:13" pos:end="77:13">!</operator><name pos:start="77:14" pos:end="77:28"><name pos:start="77:14" pos:end="77:16">hdr</name><operator pos:start="77:17" pos:end="77:17">.</operator><name pos:start="77:18" pos:end="77:28">chan_config</name></name></expr>)</condition> <block pos:start="77:31" pos:end="105:9">{<block_content pos:start="79:13" pos:end="103:46">

            <expr_stmt pos:start="79:13" pos:end="79:50"><expr pos:start="79:13" pos:end="79:49"><call pos:start="79:13" pos:end="79:49"><name pos:start="79:13" pos:end="79:25">init_get_bits</name><argument_list pos:start="79:26" pos:end="79:49">(<argument pos:start="79:27" pos:end="79:29"><expr pos:start="79:27" pos:end="79:29"><operator pos:start="79:27" pos:end="79:27">&amp;</operator><name pos:start="79:28" pos:end="79:29">gb</name></expr></argument>, <argument pos:start="79:32" pos:end="79:34"><expr pos:start="79:32" pos:end="79:34"><name pos:start="79:32" pos:end="79:34">buf</name></expr></argument>, <argument pos:start="79:37" pos:end="79:48"><expr pos:start="79:37" pos:end="79:48"><name pos:start="79:37" pos:end="79:44">buf_size</name> <operator pos:start="79:46" pos:end="79:46">*</operator> <literal type="number" pos:start="79:48" pos:end="79:48">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="81:13" pos:end="93:13"><if pos:start="81:13" pos:end="93:13">if <condition pos:start="81:16" pos:end="81:38">(<expr pos:start="81:17" pos:end="81:37"><call pos:start="81:17" pos:end="81:32"><name pos:start="81:17" pos:end="81:24">get_bits</name><argument_list pos:start="81:25" pos:end="81:32">(<argument pos:start="81:26" pos:end="81:28"><expr pos:start="81:26" pos:end="81:28"><operator pos:start="81:26" pos:end="81:26">&amp;</operator><name pos:start="81:27" pos:end="81:28">gb</name></expr></argument>, <argument pos:start="81:31" pos:end="81:31"><expr pos:start="81:31" pos:end="81:31"><literal type="number" pos:start="81:31" pos:end="81:31">3</literal></expr></argument>)</argument_list></call> <operator pos:start="81:34" pos:end="81:35">!=</operator> <literal type="number" pos:start="81:37" pos:end="81:37">5</literal></expr>)</condition> <block pos:start="81:40" pos:end="93:13">{<block_content pos:start="83:17" pos:end="91:44">

                <expr_stmt pos:start="83:17" pos:end="89:57"><expr pos:start="83:17" pos:end="89:56"><call pos:start="83:17" pos:end="89:56"><name pos:start="83:17" pos:end="83:45">avpriv_report_missing_feature</name><argument_list pos:start="83:46" pos:end="89:56">(<argument pos:start="83:47" pos:end="83:51"><expr pos:start="83:47" pos:end="83:51"><name pos:start="83:47" pos:end="83:51">avctx</name></expr></argument>,

                                              <argument pos:start="85:47" pos:end="89:55"><expr pos:start="85:47" pos:end="89:55"><literal type="string" pos:start="85:47" pos:end="85:80">"PCE-based channel configuration "</literal>

                                              <literal type="string" pos:start="87:47" pos:end="87:76">"without PCE as first syntax "</literal>

                                              <literal type="string" pos:start="89:47" pos:end="89:55">"element"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="91:17" pos:end="91:44">return <expr pos:start="91:24" pos:end="91:43"><name pos:start="91:24" pos:end="91:43">AVERROR_PATCHWELCOME</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:55"><expr pos:start="95:13" pos:end="95:54"><call pos:start="95:13" pos:end="95:54"><name pos:start="95:13" pos:end="95:25">init_put_bits</name><argument_list pos:start="95:26" pos:end="95:54">(<argument pos:start="95:27" pos:end="95:29"><expr pos:start="95:27" pos:end="95:29"><operator pos:start="95:27" pos:end="95:27">&amp;</operator><name pos:start="95:28" pos:end="95:29">pb</name></expr></argument>, <argument pos:start="95:32" pos:end="95:39"><expr pos:start="95:32" pos:end="95:39"><name pos:start="95:32" pos:end="95:39">pce_data</name></expr></argument>, <argument pos:start="95:42" pos:end="95:53"><expr pos:start="95:42" pos:end="95:53"><name pos:start="95:42" pos:end="95:53">MAX_PCE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:56"><expr pos:start="97:13" pos:end="97:55"><name pos:start="97:13" pos:end="97:20">pce_size</name> <operator pos:start="97:22" pos:end="97:22">=</operator> <call pos:start="97:24" pos:end="97:53"><name pos:start="97:24" pos:end="97:43">avpriv_copy_pce_data</name><argument_list pos:start="97:44" pos:end="97:53">(<argument pos:start="97:45" pos:end="97:47"><expr pos:start="97:45" pos:end="97:47"><operator pos:start="97:45" pos:end="97:45">&amp;</operator><name pos:start="97:46" pos:end="97:47">pb</name></expr></argument>, <argument pos:start="97:50" pos:end="97:52"><expr pos:start="97:50" pos:end="97:52"><operator pos:start="97:50" pos:end="97:50">&amp;</operator><name pos:start="97:51" pos:end="97:52">gb</name></expr></argument>)</argument_list></call><operator pos:start="97:54" pos:end="97:54">/</operator><literal type="number" pos:start="97:55" pos:end="97:55">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:32"><expr pos:start="99:13" pos:end="99:31"><call pos:start="99:13" pos:end="99:31"><name pos:start="99:13" pos:end="99:26">flush_put_bits</name><argument_list pos:start="99:27" pos:end="99:31">(<argument pos:start="99:28" pos:end="99:30"><expr pos:start="99:28" pos:end="99:30"><operator pos:start="99:28" pos:end="99:28">&amp;</operator><name pos:start="99:29" pos:end="99:30">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:46"><expr pos:start="101:13" pos:end="101:45"><name pos:start="101:13" pos:end="101:20">buf_size</name> <operator pos:start="101:22" pos:end="101:23">-=</operator> <call pos:start="101:25" pos:end="101:43"><name pos:start="101:25" pos:end="101:38">get_bits_count</name><argument_list pos:start="101:39" pos:end="101:43">(<argument pos:start="101:40" pos:end="101:42"><expr pos:start="101:40" pos:end="101:42"><operator pos:start="101:40" pos:end="101:40">&amp;</operator><name pos:start="101:41" pos:end="101:42">gb</name></expr></argument>)</argument_list></call><operator pos:start="101:44" pos:end="101:44">/</operator><literal type="number" pos:start="101:45" pos:end="101:45">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:46"><expr pos:start="103:13" pos:end="103:45"><name pos:start="103:13" pos:end="103:15">buf</name>      <operator pos:start="103:22" pos:end="103:23">+=</operator> <call pos:start="103:25" pos:end="103:43"><name pos:start="103:25" pos:end="103:38">get_bits_count</name><argument_list pos:start="103:39" pos:end="103:43">(<argument pos:start="103:40" pos:end="103:42"><expr pos:start="103:40" pos:end="103:42"><operator pos:start="103:40" pos:end="103:40">&amp;</operator><name pos:start="103:41" pos:end="103:42">gb</name></expr></argument>)</argument_list></call><operator pos:start="103:44" pos:end="103:44">/</operator><literal type="number" pos:start="103:45" pos:end="103:45">8</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>


        <expr_stmt pos:start="108:9" pos:end="108:45"><expr pos:start="108:9" pos:end="108:44"><name pos:start="108:9" pos:end="108:29"><name pos:start="108:9" pos:end="108:13">avctx</name><operator pos:start="108:14" pos:end="108:15">-&gt;</operator><name pos:start="108:16" pos:end="108:29">extradata_size</name></name> <operator pos:start="108:31" pos:end="108:31">=</operator> <literal type="number" pos:start="108:33" pos:end="108:35">2</literal> <operator pos:start="108:35" pos:end="108:35">+</operator> <name pos:start="108:37" pos:end="108:44">pce_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="110:9" pos:end="110:92"><expr pos:start="110:9" pos:end="110:91"><name pos:start="110:9" pos:end="110:24"><name pos:start="110:9" pos:end="110:13">avctx</name><operator pos:start="110:14" pos:end="110:15">-&gt;</operator><name pos:start="110:16" pos:end="110:24">extradata</name></name> <operator pos:start="110:26" pos:end="110:26">=</operator> <call pos:start="110:28" pos:end="110:91"><name pos:start="110:28" pos:end="110:37">av_mallocz</name><argument_list pos:start="110:38" pos:end="110:91">(<argument pos:start="110:39" pos:end="110:90"><expr pos:start="110:39" pos:end="110:90"><name pos:start="110:39" pos:end="110:59"><name pos:start="110:39" pos:end="110:43">avctx</name><operator pos:start="110:44" pos:end="110:45">-&gt;</operator><name pos:start="110:46" pos:end="110:59">extradata_size</name></name> <operator pos:start="110:61" pos:end="110:61">+</operator> <name pos:start="110:63" pos:end="110:90">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="114:9" pos:end="114:68"><expr pos:start="114:9" pos:end="114:67"><call pos:start="114:9" pos:end="114:67"><name pos:start="114:9" pos:end="114:21">init_put_bits</name><argument_list pos:start="114:22" pos:end="114:67">(<argument pos:start="114:23" pos:end="114:25"><expr pos:start="114:23" pos:end="114:25"><operator pos:start="114:23" pos:end="114:23">&amp;</operator><name pos:start="114:24" pos:end="114:25">pb</name></expr></argument>, <argument pos:start="114:28" pos:end="114:43"><expr pos:start="114:28" pos:end="114:43"><name pos:start="114:28" pos:end="114:43"><name pos:start="114:28" pos:end="114:32">avctx</name><operator pos:start="114:33" pos:end="114:34">-&gt;</operator><name pos:start="114:35" pos:end="114:43">extradata</name></name></expr></argument>, <argument pos:start="114:46" pos:end="114:66"><expr pos:start="114:46" pos:end="114:66"><name pos:start="114:46" pos:end="114:66"><name pos:start="114:46" pos:end="114:50">avctx</name><operator pos:start="114:51" pos:end="114:52">-&gt;</operator><name pos:start="114:53" pos:end="114:66">extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="116:9" pos:end="116:42"><expr pos:start="116:9" pos:end="116:41"><call pos:start="116:9" pos:end="116:41"><name pos:start="116:9" pos:end="116:16">put_bits</name><argument_list pos:start="116:17" pos:end="116:41">(<argument pos:start="116:18" pos:end="116:20"><expr pos:start="116:18" pos:end="116:20"><operator pos:start="116:18" pos:end="116:18">&amp;</operator><name pos:start="116:19" pos:end="116:20">pb</name></expr></argument>, <argument pos:start="116:23" pos:end="116:23"><expr pos:start="116:23" pos:end="116:23"><literal type="number" pos:start="116:23" pos:end="116:23">5</literal></expr></argument>, <argument pos:start="116:26" pos:end="116:40"><expr pos:start="116:26" pos:end="116:40"><name pos:start="116:26" pos:end="116:40"><name pos:start="116:26" pos:end="116:28">hdr</name><operator pos:start="116:29" pos:end="116:29">.</operator><name pos:start="116:30" pos:end="116:40">object_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="118:9" pos:end="118:45"><expr pos:start="118:9" pos:end="118:44"><call pos:start="118:9" pos:end="118:44"><name pos:start="118:9" pos:end="118:16">put_bits</name><argument_list pos:start="118:17" pos:end="118:44">(<argument pos:start="118:18" pos:end="118:20"><expr pos:start="118:18" pos:end="118:20"><operator pos:start="118:18" pos:end="118:18">&amp;</operator><name pos:start="118:19" pos:end="118:20">pb</name></expr></argument>, <argument pos:start="118:23" pos:end="118:23"><expr pos:start="118:23" pos:end="118:23"><literal type="number" pos:start="118:23" pos:end="118:23">4</literal></expr></argument>, <argument pos:start="118:26" pos:end="118:43"><expr pos:start="118:26" pos:end="118:43"><name pos:start="118:26" pos:end="118:43"><name pos:start="118:26" pos:end="118:28">hdr</name><operator pos:start="118:29" pos:end="118:29">.</operator><name pos:start="118:30" pos:end="118:43">sampling_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="120:9" pos:end="120:42"><expr pos:start="120:9" pos:end="120:41"><call pos:start="120:9" pos:end="120:41"><name pos:start="120:9" pos:end="120:16">put_bits</name><argument_list pos:start="120:17" pos:end="120:41">(<argument pos:start="120:18" pos:end="120:20"><expr pos:start="120:18" pos:end="120:20"><operator pos:start="120:18" pos:end="120:18">&amp;</operator><name pos:start="120:19" pos:end="120:20">pb</name></expr></argument>, <argument pos:start="120:23" pos:end="120:23"><expr pos:start="120:23" pos:end="120:23"><literal type="number" pos:start="120:23" pos:end="120:23">4</literal></expr></argument>, <argument pos:start="120:26" pos:end="120:40"><expr pos:start="120:26" pos:end="120:40"><name pos:start="120:26" pos:end="120:40"><name pos:start="120:26" pos:end="120:28">hdr</name><operator pos:start="120:29" pos:end="120:29">.</operator><name pos:start="120:30" pos:end="120:40">chan_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="122:9" pos:end="122:28"><expr pos:start="122:9" pos:end="122:27"><call pos:start="122:9" pos:end="122:27"><name pos:start="122:9" pos:end="122:16">put_bits</name><argument_list pos:start="122:17" pos:end="122:27">(<argument pos:start="122:18" pos:end="122:20"><expr pos:start="122:18" pos:end="122:20"><operator pos:start="122:18" pos:end="122:18">&amp;</operator><name pos:start="122:19" pos:end="122:20">pb</name></expr></argument>, <argument pos:start="122:23" pos:end="122:23"><expr pos:start="122:23" pos:end="122:23"><literal type="number" pos:start="122:23" pos:end="122:23">1</literal></expr></argument>, <argument pos:start="122:26" pos:end="122:26"><expr pos:start="122:26" pos:end="122:26"><literal type="number" pos:start="122:26" pos:end="122:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="122:30" pos:end="122:58">//frame length - 1024 samples</comment>

        <expr_stmt pos:start="124:9" pos:end="124:28"><expr pos:start="124:9" pos:end="124:27"><call pos:start="124:9" pos:end="124:27"><name pos:start="124:9" pos:end="124:16">put_bits</name><argument_list pos:start="124:17" pos:end="124:27">(<argument pos:start="124:18" pos:end="124:20"><expr pos:start="124:18" pos:end="124:20"><operator pos:start="124:18" pos:end="124:18">&amp;</operator><name pos:start="124:19" pos:end="124:20">pb</name></expr></argument>, <argument pos:start="124:23" pos:end="124:23"><expr pos:start="124:23" pos:end="124:23"><literal type="number" pos:start="124:23" pos:end="124:23">1</literal></expr></argument>, <argument pos:start="124:26" pos:end="124:26"><expr pos:start="124:26" pos:end="124:26"><literal type="number" pos:start="124:26" pos:end="124:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="124:30" pos:end="124:60">//does not depend on core coder</comment>

        <expr_stmt pos:start="126:9" pos:end="126:28"><expr pos:start="126:9" pos:end="126:27"><call pos:start="126:9" pos:end="126:27"><name pos:start="126:9" pos:end="126:16">put_bits</name><argument_list pos:start="126:17" pos:end="126:27">(<argument pos:start="126:18" pos:end="126:20"><expr pos:start="126:18" pos:end="126:20"><operator pos:start="126:18" pos:end="126:18">&amp;</operator><name pos:start="126:19" pos:end="126:20">pb</name></expr></argument>, <argument pos:start="126:23" pos:end="126:23"><expr pos:start="126:23" pos:end="126:23"><literal type="number" pos:start="126:23" pos:end="126:23">1</literal></expr></argument>, <argument pos:start="126:26" pos:end="126:26"><expr pos:start="126:26" pos:end="126:26"><literal type="number" pos:start="126:26" pos:end="126:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="126:30" pos:end="126:47">//is not extension</comment>

        <expr_stmt pos:start="128:9" pos:end="128:28"><expr pos:start="128:9" pos:end="128:27"><call pos:start="128:9" pos:end="128:27"><name pos:start="128:9" pos:end="128:22">flush_put_bits</name><argument_list pos:start="128:23" pos:end="128:27">(<argument pos:start="128:24" pos:end="128:26"><expr pos:start="128:24" pos:end="128:26"><operator pos:start="128:24" pos:end="128:24">&amp;</operator><name pos:start="128:25" pos:end="128:26">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="130:9" pos:end="134:9"><if pos:start="130:9" pos:end="134:9">if <condition pos:start="130:12" pos:end="130:21">(<expr pos:start="130:13" pos:end="130:20"><name pos:start="130:13" pos:end="130:20">pce_size</name></expr>)</condition> <block pos:start="130:23" pos:end="134:9">{<block_content pos:start="132:13" pos:end="132:61">

            <expr_stmt pos:start="132:13" pos:end="132:61"><expr pos:start="132:13" pos:end="132:60"><call pos:start="132:13" pos:end="132:60"><name pos:start="132:13" pos:end="132:18">memcpy</name><argument_list pos:start="132:19" pos:end="132:60">(<argument pos:start="132:20" pos:end="132:39"><expr pos:start="132:20" pos:end="132:39"><name pos:start="132:20" pos:end="132:35"><name pos:start="132:20" pos:end="132:24">avctx</name><operator pos:start="132:25" pos:end="132:26">-&gt;</operator><name pos:start="132:27" pos:end="132:35">extradata</name></name> <operator pos:start="132:37" pos:end="132:37">+</operator> <literal type="number" pos:start="132:39" pos:end="132:39">2</literal></expr></argument>, <argument pos:start="132:42" pos:end="132:49"><expr pos:start="132:42" pos:end="132:49"><name pos:start="132:42" pos:end="132:49">pce_data</name></expr></argument>, <argument pos:start="132:52" pos:end="132:59"><expr pos:start="132:52" pos:end="132:59"><name pos:start="132:52" pos:end="132:59">pce_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="138:9" pos:end="138:34"><expr pos:start="138:9" pos:end="138:33"><name pos:start="138:9" pos:end="138:29"><name pos:start="138:9" pos:end="138:11">ctx</name><operator pos:start="138:12" pos:end="138:13">-&gt;</operator><name pos:start="138:14" pos:end="138:29">first_frame_done</name></name> <operator pos:start="138:31" pos:end="138:31">=</operator> <literal type="number" pos:start="138:33" pos:end="138:33">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="144:5" pos:end="144:30"><expr pos:start="144:5" pos:end="144:29"><operator pos:start="144:5" pos:end="144:5">*</operator><name pos:start="144:6" pos:end="144:12">poutbuf</name> <operator pos:start="144:14" pos:end="144:14">=</operator> <operator pos:start="144:16" pos:end="144:16">(</operator><name pos:start="144:17" pos:end="144:23">uint8_t</name><operator pos:start="144:24" pos:end="144:24">*</operator><operator pos:start="144:25" pos:end="144:25">)</operator> <name pos:start="144:27" pos:end="144:29">buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="146:5" pos:end="146:29"><expr pos:start="146:5" pos:end="146:28"><operator pos:start="146:5" pos:end="146:5">*</operator><name pos:start="146:6" pos:end="146:17">poutbuf_size</name> <operator pos:start="146:19" pos:end="146:19">=</operator> <name pos:start="146:21" pos:end="146:28">buf_size</name></expr>;</expr_stmt>



    <return pos:start="150:5" pos:end="150:13">return <expr pos:start="150:12" pos:end="150:12"><literal type="number" pos:start="150:12" pos:end="150:12">0</literal></expr>;</return>

</block_content>}</block></function></unit>
