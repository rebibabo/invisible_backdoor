<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4797.c" pos:tabs="8"><function pos:start="1:1" pos:end="123:15"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">raw_open_common</name><parameter_list pos:start="1:27" pos:end="2:72">(<parameter pos:start="1:28" pos:end="1:47"><decl pos:start="1:28" pos:end="1:47"><type pos:start="1:28" pos:end="1:47"><name pos:start="1:28" pos:end="1:43">BlockDriverState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:47">bs</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:63"><decl pos:start="1:50" pos:end="1:63"><type pos:start="1:50" pos:end="1:63"><name pos:start="1:50" pos:end="1:54">QDict</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:63">options</name></decl></parameter>,
                           <parameter pos:start="2:28" pos:end="2:41"><decl pos:start="2:28" pos:end="2:41"><type pos:start="2:28" pos:end="2:41"><name pos:start="2:28" pos:end="2:30">int</name></type> <name pos:start="2:32" pos:end="2:41">bdrv_flags</name></decl></parameter>, <parameter pos:start="2:44" pos:end="2:57"><decl pos:start="2:44" pos:end="2:57"><type pos:start="2:44" pos:end="2:57"><name pos:start="2:44" pos:end="2:46">int</name></type> <name pos:start="2:48" pos:end="2:57">open_flags</name></decl></parameter>, <parameter pos:start="2:60" pos:end="2:71"><decl pos:start="2:60" pos:end="2:71"><type pos:start="2:60" pos:end="2:71"><name pos:start="2:60" pos:end="2:64">Error</name> <modifier pos:start="2:66" pos:end="2:66">*</modifier><modifier pos:start="2:67" pos:end="2:67">*</modifier></type><name pos:start="2:68" pos:end="2:71">errp</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="123:15">{<block_content pos:start="4:5" pos:end="123:15">
    <decl_stmt pos:start="4:5" pos:end="4:33"><decl pos:start="4:5" pos:end="4:32"><type pos:start="4:5" pos:end="4:18"><name pos:start="4:5" pos:end="4:16">BDRVRawState</name> <modifier pos:start="4:18" pos:end="4:18">*</modifier></type><name pos:start="4:19" pos:end="4:19">s</name> <init pos:start="4:21" pos:end="4:32">= <expr pos:start="4:23" pos:end="4:32"><name pos:start="4:23" pos:end="4:32"><name pos:start="4:23" pos:end="4:24">bs</name><operator pos:start="4:25" pos:end="4:26">-&gt;</operator><name pos:start="4:27" pos:end="4:32">opaque</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">QemuOpts</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:18">opts</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:28"><decl pos:start="6:5" pos:end="6:27"><type pos:start="6:5" pos:end="6:11"><name pos:start="6:5" pos:end="6:9">Error</name> <modifier pos:start="6:11" pos:end="6:11">*</modifier></type><name pos:start="6:12" pos:end="6:20">local_err</name> <init pos:start="6:22" pos:end="6:27">= <expr pos:start="6:24" pos:end="6:27"><name pos:start="6:24" pos:end="6:27">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:31"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:24">filename</name> <init pos:start="7:26" pos:end="7:31">= <expr pos:start="7:28" pos:end="7:31"><name pos:start="7:28" pos:end="7:31">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:20"><decl pos:start="8:5" pos:end="8:19"><type pos:start="8:5" pos:end="8:16"><specifier pos:start="8:5" pos:end="8:9">const</specifier> <name pos:start="8:11" pos:end="8:14">char</name> <modifier pos:start="8:16" pos:end="8:16">*</modifier></type><name pos:start="8:17" pos:end="8:19">str</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:40"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:22">BlockdevAioOptions</name></type> <name pos:start="9:24" pos:end="9:26">aio</name></decl>, <decl pos:start="9:29" pos:end="9:39"><type ref="prev" pos:start="9:5" pos:end="9:22"/><name pos:start="9:29" pos:end="9:39">aio_default</name></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:16"><decl pos:start="10:5" pos:end="10:10"><type pos:start="10:5" pos:end="10:7"><name pos:start="10:5" pos:end="10:7">int</name></type> <name pos:start="10:9" pos:end="10:10">fd</name></decl>, <decl pos:start="10:13" pos:end="10:15"><type ref="prev" pos:start="10:5" pos:end="10:7"/><name pos:start="10:13" pos:end="10:15">ret</name></decl>;</decl_stmt>
    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:15">stat</name></name></type> <name pos:start="11:17" pos:end="11:18">st</name></decl>;</decl_stmt>
    <decl_stmt pos:start="12:5" pos:end="12:22"><decl pos:start="12:5" pos:end="12:21"><type pos:start="12:5" pos:end="12:13"><name pos:start="12:5" pos:end="12:13">OnOffAuto</name></type> <name pos:start="12:15" pos:end="12:21">locking</name></decl>;</decl_stmt>
    <expr_stmt pos:start="13:5" pos:end="13:70"><expr pos:start="13:5" pos:end="13:69"><name pos:start="13:5" pos:end="13:8">opts</name> <operator pos:start="13:10" pos:end="13:10">=</operator> <call pos:start="13:12" pos:end="13:69"><name pos:start="13:12" pos:end="13:27">qemu_opts_create</name><argument_list pos:start="13:28" pos:end="13:69">(<argument pos:start="13:29" pos:end="13:45"><expr pos:start="13:29" pos:end="13:45"><operator pos:start="13:29" pos:end="13:29">&amp;</operator><name pos:start="13:30" pos:end="13:45">raw_runtime_opts</name></expr></argument>, <argument pos:start="13:48" pos:end="13:51"><expr pos:start="13:48" pos:end="13:51"><name pos:start="13:48" pos:end="13:51">NULL</name></expr></argument>, <argument pos:start="13:54" pos:end="13:54"><expr pos:start="13:54" pos:end="13:54"><literal type="number" pos:start="13:54" pos:end="13:54">0</literal></expr></argument>, <argument pos:start="13:57" pos:end="13:68"><expr pos:start="13:57" pos:end="13:68"><operator pos:start="13:57" pos:end="13:57">&amp;</operator><name pos:start="13:58" pos:end="13:68">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="14:5" pos:end="14:54"><expr pos:start="14:5" pos:end="14:53"><call pos:start="14:5" pos:end="14:53"><name pos:start="14:5" pos:end="14:26">qemu_opts_absorb_qdict</name><argument_list pos:start="14:27" pos:end="14:53">(<argument pos:start="14:28" pos:end="14:31"><expr pos:start="14:28" pos:end="14:31"><name pos:start="14:28" pos:end="14:31">opts</name></expr></argument>, <argument pos:start="14:34" pos:end="14:40"><expr pos:start="14:34" pos:end="14:40"><name pos:start="14:34" pos:end="14:40">options</name></expr></argument>, <argument pos:start="14:43" pos:end="14:52"><expr pos:start="14:43" pos:end="14:52"><operator pos:start="14:43" pos:end="14:43">&amp;</operator><name pos:start="14:44" pos:end="14:52">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="15:5" pos:end="15:46"><expr pos:start="15:5" pos:end="15:45"><name pos:start="15:5" pos:end="15:12">filename</name> <operator pos:start="15:14" pos:end="15:14">=</operator> <call pos:start="15:16" pos:end="15:45"><name pos:start="15:16" pos:end="15:27">qemu_opt_get</name><argument_list pos:start="15:28" pos:end="15:45">(<argument pos:start="15:29" pos:end="15:32"><expr pos:start="15:29" pos:end="15:32"><name pos:start="15:29" pos:end="15:32">opts</name></expr></argument>, <argument pos:start="15:35" pos:end="15:44"><expr pos:start="15:35" pos:end="15:44"><literal type="string" pos:start="15:35" pos:end="15:44">"filename"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="16:5" pos:end="16:46"><expr pos:start="16:5" pos:end="16:45"><name pos:start="16:5" pos:end="16:7">ret</name> <operator pos:start="16:9" pos:end="16:9">=</operator> <call pos:start="16:11" pos:end="16:45"><name pos:start="16:11" pos:end="16:34">raw_normalize_devicepath</name><argument_list pos:start="16:35" pos:end="16:45">(<argument pos:start="16:36" pos:end="16:44"><expr pos:start="16:36" pos:end="16:44"><operator pos:start="16:36" pos:end="16:36">&amp;</operator><name pos:start="16:37" pos:end="16:44">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="17:5" pos:end="123:15"><if pos:start="17:5" pos:end="123:15">if <condition pos:start="17:8" pos:end="17:17">(<expr pos:start="17:9" pos:end="17:16"><name pos:start="17:9" pos:end="17:11">ret</name> <operator pos:start="17:13" pos:end="17:14">!=</operator> <literal type="number" pos:start="17:16" pos:end="17:16">0</literal></expr>)</condition> <block pos:start="17:19" pos:end="123:15">{<block_content pos:start="18:9" pos:end="123:15">
        <expr_stmt pos:start="18:9" pos:end="18:72"><expr pos:start="18:9" pos:end="18:71"><call pos:start="18:9" pos:end="18:71"><name pos:start="18:9" pos:end="18:24">error_setg_errno</name><argument_list pos:start="18:25" pos:end="18:71">(<argument pos:start="18:26" pos:end="18:29"><expr pos:start="18:26" pos:end="18:29"><name pos:start="18:26" pos:end="18:29">errp</name></expr></argument>, <argument pos:start="18:32" pos:end="18:35"><expr pos:start="18:32" pos:end="18:35"><operator pos:start="18:32" pos:end="18:32">-</operator><name pos:start="18:33" pos:end="18:35">ret</name></expr></argument>, <argument pos:start="18:38" pos:end="18:70"><expr pos:start="18:38" pos:end="18:70"><literal type="string" pos:start="18:38" pos:end="18:70">"Could not normalize device path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="19:5" pos:end="21:49"><expr pos:start="19:5" pos:end="21:48"><name pos:start="19:5" pos:end="19:15">aio_default</name> <operator pos:start="19:17" pos:end="19:17">=</operator> <ternary pos:start="19:19" pos:end="21:48"><condition pos:start="19:19" pos:end="20:19"><expr pos:start="19:19" pos:end="19:50"><operator pos:start="19:19" pos:end="19:19">(</operator><name pos:start="19:20" pos:end="19:29">bdrv_flags</name> <operator pos:start="19:31" pos:end="19:31">&amp;</operator> <name pos:start="19:33" pos:end="19:49">BDRV_O_NATIVE_AIO</name><operator pos:start="19:50" pos:end="19:50">)</operator></expr>
                  ?</condition><then pos:start="20:21" pos:end="20:47"> <expr pos:start="20:21" pos:end="20:47"><name pos:start="20:21" pos:end="20:47">BLOCKDEV_AIO_OPTIONS_NATIVE</name></expr>
                  </then><else pos:start="21:19" pos:end="21:48">: <expr pos:start="21:21" pos:end="21:48"><name pos:start="21:21" pos:end="21:48">BLOCKDEV_AIO_OPTIONS_THREADS</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt pos:start="22:5" pos:end="24:51"><expr pos:start="22:5" pos:end="24:50"><name pos:start="22:5" pos:end="22:7">aio</name> <operator pos:start="22:9" pos:end="22:9">=</operator> <call pos:start="22:11" pos:end="24:50"><name pos:start="22:11" pos:end="22:25">qapi_enum_parse</name><argument_list pos:start="22:26" pos:end="24:50">(<argument pos:start="22:27" pos:end="22:52"><expr pos:start="22:27" pos:end="22:52"><operator pos:start="22:27" pos:end="22:27">&amp;</operator><name pos:start="22:28" pos:end="22:52">BlockdevAioOptions_lookup</name></expr></argument>,
                          <argument pos:start="23:27" pos:end="23:51"><expr pos:start="23:27" pos:end="23:51"><call pos:start="23:27" pos:end="23:51"><name pos:start="23:27" pos:end="23:38">qemu_opt_get</name><argument_list pos:start="23:39" pos:end="23:51">(<argument pos:start="23:40" pos:end="23:43"><expr pos:start="23:40" pos:end="23:43"><name pos:start="23:40" pos:end="23:43">opts</name></expr></argument>, <argument pos:start="23:46" pos:end="23:50"><expr pos:start="23:46" pos:end="23:50"><literal type="string" pos:start="23:46" pos:end="23:50">"aio"</literal></expr></argument>)</argument_list></call></expr></argument>,
                          <argument pos:start="24:27" pos:end="24:37"><expr pos:start="24:27" pos:end="24:37"><name pos:start="24:27" pos:end="24:37">aio_default</name></expr></argument>, <argument pos:start="24:40" pos:end="24:49"><expr pos:start="24:40" pos:end="24:49"><operator pos:start="24:40" pos:end="24:40">&amp;</operator><name pos:start="24:41" pos:end="24:49">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="25:5" pos:end="25:60"><expr pos:start="25:5" pos:end="25:59"><name pos:start="25:5" pos:end="25:20"><name pos:start="25:5" pos:end="25:5">s</name><operator pos:start="25:6" pos:end="25:7">-&gt;</operator><name pos:start="25:8" pos:end="25:20">use_linux_aio</name></name> <operator pos:start="25:22" pos:end="25:22">=</operator> <operator pos:start="25:24" pos:end="25:24">(</operator><name pos:start="25:25" pos:end="25:27">aio</name> <operator pos:start="25:29" pos:end="25:30">==</operator> <name pos:start="25:32" pos:end="25:58">BLOCKDEV_AIO_OPTIONS_NATIVE</name><operator pos:start="25:59" pos:end="25:59">)</operator></expr>;</expr_stmt>
    <expr_stmt pos:start="26:5" pos:end="28:60"><expr pos:start="26:5" pos:end="28:59"><name pos:start="26:5" pos:end="26:11">locking</name> <operator pos:start="26:13" pos:end="26:13">=</operator> <call pos:start="26:15" pos:end="28:59"><name pos:start="26:15" pos:end="26:29">qapi_enum_parse</name><argument_list pos:start="26:30" pos:end="28:59">(<argument pos:start="26:31" pos:end="26:47"><expr pos:start="26:31" pos:end="26:47"><operator pos:start="26:31" pos:end="26:31">&amp;</operator><name pos:start="26:32" pos:end="26:47">OnOffAuto_lookup</name></expr></argument>,
                              <argument pos:start="27:31" pos:end="27:59"><expr pos:start="27:31" pos:end="27:59"><call pos:start="27:31" pos:end="27:59"><name pos:start="27:31" pos:end="27:42">qemu_opt_get</name><argument_list pos:start="27:43" pos:end="27:59">(<argument pos:start="27:44" pos:end="27:47"><expr pos:start="27:44" pos:end="27:47"><name pos:start="27:44" pos:end="27:47">opts</name></expr></argument>, <argument pos:start="27:50" pos:end="27:58"><expr pos:start="27:50" pos:end="27:58"><literal type="string" pos:start="27:50" pos:end="27:58">"locking"</literal></expr></argument>)</argument_list></call></expr></argument>,
                              <argument pos:start="28:31" pos:end="28:46"><expr pos:start="28:31" pos:end="28:46"><name pos:start="28:31" pos:end="28:46">ON_OFF_AUTO_AUTO</name></expr></argument>, <argument pos:start="28:49" pos:end="28:58"><expr pos:start="28:49" pos:end="28:58"><operator pos:start="28:49" pos:end="28:49">&amp;</operator><name pos:start="28:50" pos:end="28:58">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch pos:start="29:5" pos:end="123:15">switch <condition pos:start="29:12" pos:end="29:20">(<expr pos:start="29:13" pos:end="29:19"><name pos:start="29:13" pos:end="29:19">locking</name></expr>)</condition> <block pos:start="29:22" pos:end="123:15">{<block_content pos:start="30:5" pos:end="123:15">
    <case pos:start="30:5" pos:end="30:24">case <expr pos:start="30:10" pos:end="30:23"><name pos:start="30:10" pos:end="30:23">ON_OFF_AUTO_ON</name></expr>:</case>
        <expr_stmt pos:start="31:9" pos:end="31:27"><expr pos:start="31:9" pos:end="31:26"><name pos:start="31:9" pos:end="31:19"><name pos:start="31:9" pos:end="31:9">s</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:19">use_lock</name></name> <operator pos:start="31:21" pos:end="31:21">=</operator> <name pos:start="31:23" pos:end="31:26">true</name></expr>;</expr_stmt>
        <if_stmt pos:start="32:9" pos:end="123:15"><if pos:start="32:9" pos:end="123:15">if <condition pos:start="32:12" pos:end="32:33">(<expr pos:start="32:13" pos:end="32:32"><operator pos:start="32:13" pos:end="32:13">!</operator><call pos:start="32:14" pos:end="32:32"><name pos:start="32:14" pos:end="32:30">qemu_has_ofd_lock</name><argument_list pos:start="32:31" pos:end="32:32">()</argument_list></call></expr>)</condition> <block pos:start="32:35" pos:end="123:15">{<block_content pos:start="33:13" pos:end="123:15">
            <expr_stmt pos:start="33:13" pos:end="37:39"><expr pos:start="33:13" pos:end="37:38"><call pos:start="33:13" pos:end="37:38"><name pos:start="33:13" pos:end="33:19">fprintf</name><argument_list pos:start="33:20" pos:end="37:38">(<argument pos:start="33:21" pos:end="33:26"><expr pos:start="33:21" pos:end="33:26"><name pos:start="33:21" pos:end="33:26">stderr</name></expr></argument>,
                    <argument pos:start="34:21" pos:end="37:37"><expr pos:start="34:21" pos:end="37:37"><literal type="string" pos:start="34:21" pos:end="34:69">"File lock requested but OFD locking syscall is "</literal>
                    <literal type="string" pos:start="35:21" pos:end="35:70">"unavailable, falling back to POSIX file locks.\n"</literal>
                    <literal type="string" pos:start="36:21" pos:end="36:67">"Due to the implementation, locks can be lost "</literal>
                    <literal type="string" pos:start="37:21" pos:end="37:37">"unexpectedly.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break pos:start="38:9" pos:end="38:14">break;</break>
    <case pos:start="39:5" pos:end="39:25">case <expr pos:start="39:10" pos:end="39:24"><name pos:start="39:10" pos:end="39:24">ON_OFF_AUTO_OFF</name></expr>:</case>
        <expr_stmt pos:start="40:9" pos:end="40:28"><expr pos:start="40:9" pos:end="40:27"><name pos:start="40:9" pos:end="40:19"><name pos:start="40:9" pos:end="40:9">s</name><operator pos:start="40:10" pos:end="40:11">-&gt;</operator><name pos:start="40:12" pos:end="40:19">use_lock</name></name> <operator pos:start="40:21" pos:end="40:21">=</operator> <name pos:start="40:23" pos:end="40:27">false</name></expr>;</expr_stmt>
        <break pos:start="41:9" pos:end="41:14">break;</break>
    <case pos:start="42:5" pos:end="42:26">case <expr pos:start="42:10" pos:end="42:25"><name pos:start="42:10" pos:end="42:25">ON_OFF_AUTO_AUTO</name></expr>:</case>
        <expr_stmt pos:start="43:9" pos:end="43:42"><expr pos:start="43:9" pos:end="43:41"><name pos:start="43:9" pos:end="43:19"><name pos:start="43:9" pos:end="43:9">s</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:19">use_lock</name></name> <operator pos:start="43:21" pos:end="43:21">=</operator> <call pos:start="43:23" pos:end="43:41"><name pos:start="43:23" pos:end="43:39">qemu_has_ofd_lock</name><argument_list pos:start="43:40" pos:end="43:41">()</argument_list></call></expr>;</expr_stmt>
        <break pos:start="44:9" pos:end="44:14">break;</break>
    <default pos:start="45:5" pos:end="45:12">default:</default>
        <expr_stmt pos:start="46:9" pos:end="46:16"><expr pos:start="46:9" pos:end="46:15"><call pos:start="46:9" pos:end="46:15"><name pos:start="46:9" pos:end="46:13">abort</name><argument_list pos:start="46:14" pos:end="46:15">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="47:5" pos:end="47:31"><expr pos:start="47:5" pos:end="47:30"><name pos:start="47:5" pos:end="47:17"><name pos:start="47:5" pos:end="47:5">s</name><operator pos:start="47:6" pos:end="47:7">-&gt;</operator><name pos:start="47:8" pos:end="47:17">open_flags</name></name> <operator pos:start="47:19" pos:end="47:19">=</operator> <name pos:start="47:21" pos:end="47:30">open_flags</name></expr>;</expr_stmt>
    <expr_stmt pos:start="48:5" pos:end="48:48"><expr pos:start="48:5" pos:end="48:47"><call pos:start="48:5" pos:end="48:47"><name pos:start="48:5" pos:end="48:19">raw_parse_flags</name><argument_list pos:start="48:20" pos:end="48:47">(<argument pos:start="48:21" pos:end="48:30"><expr pos:start="48:21" pos:end="48:30"><name pos:start="48:21" pos:end="48:30">bdrv_flags</name></expr></argument>, <argument pos:start="48:33" pos:end="48:46"><expr pos:start="48:33" pos:end="48:46"><operator pos:start="48:33" pos:end="48:33">&amp;</operator><name pos:start="48:34" pos:end="48:46"><name pos:start="48:34" pos:end="48:34">s</name><operator pos:start="48:35" pos:end="48:36">-&gt;</operator><name pos:start="48:37" pos:end="48:46">open_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="49:5" pos:end="49:15"><expr pos:start="49:5" pos:end="49:14"><name pos:start="49:5" pos:end="49:9"><name pos:start="49:5" pos:end="49:5">s</name><operator pos:start="49:6" pos:end="49:7">-&gt;</operator><name pos:start="49:8" pos:end="49:9">fd</name></name> <operator pos:start="49:11" pos:end="49:11">=</operator> <operator pos:start="49:13" pos:end="49:13">-</operator><literal type="number" pos:start="49:14" pos:end="49:14">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="50:5" pos:end="50:50"><expr pos:start="50:5" pos:end="50:49"><name pos:start="50:5" pos:end="50:6">fd</name> <operator pos:start="50:8" pos:end="50:8">=</operator> <call pos:start="50:10" pos:end="50:49"><name pos:start="50:10" pos:end="50:18">qemu_open</name><argument_list pos:start="50:19" pos:end="50:49">(<argument pos:start="50:20" pos:end="50:27"><expr pos:start="50:20" pos:end="50:27"><name pos:start="50:20" pos:end="50:27">filename</name></expr></argument>, <argument pos:start="50:30" pos:end="50:42"><expr pos:start="50:30" pos:end="50:42"><name pos:start="50:30" pos:end="50:42"><name pos:start="50:30" pos:end="50:30">s</name><operator pos:start="50:31" pos:end="50:32">-&gt;</operator><name pos:start="50:33" pos:end="50:42">open_flags</name></name></expr></argument>, <argument pos:start="50:45" pos:end="50:48"><expr pos:start="50:45" pos:end="50:48"><literal type="number" pos:start="50:45" pos:end="50:48">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="51:5" pos:end="123:15"><if pos:start="51:5" pos:end="123:15">if <condition pos:start="51:8" pos:end="51:15">(<expr pos:start="51:9" pos:end="51:14"><name pos:start="51:9" pos:end="51:10">fd</name> <operator pos:start="51:12" pos:end="51:12">&lt;</operator> <literal type="number" pos:start="51:14" pos:end="51:14">0</literal></expr>)</condition> <block pos:start="51:17" pos:end="123:15">{<block_content pos:start="52:9" pos:end="123:15">
        <expr_stmt pos:start="52:9" pos:end="52:21"><expr pos:start="52:9" pos:end="52:20"><name pos:start="52:9" pos:end="52:11">ret</name> <operator pos:start="52:13" pos:end="52:13">=</operator> <operator pos:start="52:15" pos:end="52:15">-</operator><name pos:start="52:16" pos:end="52:20">errno</name></expr>;</expr_stmt>
        <expr_stmt pos:start="53:9" pos:end="53:71"><expr pos:start="53:9" pos:end="53:70"><call pos:start="53:9" pos:end="53:70"><name pos:start="53:9" pos:end="53:24">error_setg_errno</name><argument_list pos:start="53:25" pos:end="53:70">(<argument pos:start="53:26" pos:end="53:29"><expr pos:start="53:26" pos:end="53:29"><name pos:start="53:26" pos:end="53:29">errp</name></expr></argument>, <argument pos:start="53:32" pos:end="53:36"><expr pos:start="53:32" pos:end="53:36"><name pos:start="53:32" pos:end="53:36">errno</name></expr></argument>, <argument pos:start="53:39" pos:end="53:59"><expr pos:start="53:39" pos:end="53:59"><literal type="string" pos:start="53:39" pos:end="53:59">"Could not open '%s'"</literal></expr></argument>, <argument pos:start="53:62" pos:end="53:69"><expr pos:start="53:62" pos:end="53:69"><name pos:start="53:62" pos:end="53:69">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="54:9" pos:end="123:15"><if pos:start="54:9" pos:end="123:15">if <condition pos:start="54:12" pos:end="54:26">(<expr pos:start="54:13" pos:end="54:25"><name pos:start="54:13" pos:end="54:15">ret</name> <operator pos:start="54:17" pos:end="54:18">==</operator> <operator pos:start="54:20" pos:end="54:20">-</operator><name pos:start="54:21" pos:end="54:25">EROFS</name></expr>)</condition> <block pos:start="54:28" pos:end="123:15">{<block_content pos:start="55:13" pos:end="123:15">
            <expr_stmt pos:start="55:13" pos:end="55:26"><expr pos:start="55:13" pos:end="55:25"><name pos:start="55:13" pos:end="55:15">ret</name> <operator pos:start="55:17" pos:end="55:17">=</operator> <operator pos:start="55:19" pos:end="55:19">-</operator><name pos:start="55:20" pos:end="55:25">EACCES</name></expr>;</expr_stmt>
    <expr_stmt pos:start="56:5" pos:end="56:15"><expr pos:start="56:5" pos:end="56:14"><name pos:start="56:5" pos:end="56:9"><name pos:start="56:5" pos:end="56:5">s</name><operator pos:start="56:6" pos:end="56:7">-&gt;</operator><name pos:start="56:8" pos:end="56:9">fd</name></name> <operator pos:start="56:11" pos:end="56:11">=</operator> <name pos:start="56:13" pos:end="56:14">fd</name></expr>;</expr_stmt>
    <expr_stmt pos:start="57:5" pos:end="57:20"><expr pos:start="57:5" pos:end="57:19"><name pos:start="57:5" pos:end="57:14"><name pos:start="57:5" pos:end="57:5">s</name><operator pos:start="57:6" pos:end="57:7">-&gt;</operator><name pos:start="57:8" pos:end="57:14">lock_fd</name></name> <operator pos:start="57:16" pos:end="57:16">=</operator> <operator pos:start="57:18" pos:end="57:18">-</operator><literal type="number" pos:start="57:19" pos:end="57:19">1</literal></expr>;</expr_stmt>
    <if_stmt pos:start="58:5" pos:end="123:15"><if pos:start="58:5" pos:end="123:15">if <condition pos:start="58:8" pos:end="58:20">(<expr pos:start="58:9" pos:end="58:19"><name pos:start="58:9" pos:end="58:19"><name pos:start="58:9" pos:end="58:9">s</name><operator pos:start="58:10" pos:end="58:11">-&gt;</operator><name pos:start="58:12" pos:end="58:19">use_lock</name></name></expr>)</condition> <block pos:start="58:22" pos:end="123:15">{<block_content pos:start="59:9" pos:end="123:15">
        <expr_stmt pos:start="59:9" pos:end="59:48"><expr pos:start="59:9" pos:end="59:47"><name pos:start="59:9" pos:end="59:10">fd</name> <operator pos:start="59:12" pos:end="59:12">=</operator> <call pos:start="59:14" pos:end="59:47"><name pos:start="59:14" pos:end="59:22">qemu_open</name><argument_list pos:start="59:23" pos:end="59:47">(<argument pos:start="59:24" pos:end="59:31"><expr pos:start="59:24" pos:end="59:31"><name pos:start="59:24" pos:end="59:31">filename</name></expr></argument>, <argument pos:start="59:34" pos:end="59:46"><expr pos:start="59:34" pos:end="59:46"><name pos:start="59:34" pos:end="59:46"><name pos:start="59:34" pos:end="59:34">s</name><operator pos:start="59:35" pos:end="59:36">-&gt;</operator><name pos:start="59:37" pos:end="59:46">open_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="60:9" pos:end="123:15"><if pos:start="60:9" pos:end="123:15">if <condition pos:start="60:12" pos:end="60:19">(<expr pos:start="60:13" pos:end="60:18"><name pos:start="60:13" pos:end="60:14">fd</name> <operator pos:start="60:16" pos:end="60:16">&lt;</operator> <literal type="number" pos:start="60:18" pos:end="60:18">0</literal></expr>)</condition> <block pos:start="60:21" pos:end="123:15">{<block_content pos:start="61:13" pos:end="123:15">
            <expr_stmt pos:start="61:13" pos:end="61:25"><expr pos:start="61:13" pos:end="61:24"><name pos:start="61:13" pos:end="61:15">ret</name> <operator pos:start="61:17" pos:end="61:17">=</operator> <operator pos:start="61:19" pos:end="61:19">-</operator><name pos:start="61:20" pos:end="61:24">errno</name></expr>;</expr_stmt>
            <expr_stmt pos:start="62:13" pos:end="63:39"><expr pos:start="62:13" pos:end="63:38"><call pos:start="62:13" pos:end="63:38"><name pos:start="62:13" pos:end="62:28">error_setg_errno</name><argument_list pos:start="62:29" pos:end="63:38">(<argument pos:start="62:30" pos:end="62:33"><expr pos:start="62:30" pos:end="62:33"><name pos:start="62:30" pos:end="62:33">errp</name></expr></argument>, <argument pos:start="62:36" pos:end="62:40"><expr pos:start="62:36" pos:end="62:40"><name pos:start="62:36" pos:end="62:40">errno</name></expr></argument>, <argument pos:start="62:43" pos:end="62:75"><expr pos:start="62:43" pos:end="62:75"><literal type="string" pos:start="62:43" pos:end="62:75">"Could not open '%s' for locking"</literal></expr></argument>,
                             <argument pos:start="63:30" pos:end="63:37"><expr pos:start="63:30" pos:end="63:37"><name pos:start="63:30" pos:end="63:37">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="64:13" pos:end="64:30"><expr pos:start="64:13" pos:end="64:29"><call pos:start="64:13" pos:end="64:29"><name pos:start="64:13" pos:end="64:22">qemu_close</name><argument_list pos:start="64:23" pos:end="64:29">(<argument pos:start="64:24" pos:end="64:28"><expr pos:start="64:24" pos:end="64:28"><name pos:start="64:24" pos:end="64:28"><name pos:start="64:24" pos:end="64:24">s</name><operator pos:start="64:25" pos:end="64:26">-&gt;</operator><name pos:start="64:27" pos:end="64:28">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="65:9" pos:end="65:24"><expr pos:start="65:9" pos:end="65:23"><name pos:start="65:9" pos:end="65:18"><name pos:start="65:9" pos:end="65:9">s</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:18">lock_fd</name></name> <operator pos:start="65:20" pos:end="65:20">=</operator> <name pos:start="65:22" pos:end="65:23">fd</name></expr>;</expr_stmt>
    <expr_stmt pos:start="66:5" pos:end="66:16"><expr pos:start="66:5" pos:end="66:15"><name pos:start="66:5" pos:end="66:11"><name pos:start="66:5" pos:end="66:5">s</name><operator pos:start="66:6" pos:end="66:7">-&gt;</operator><name pos:start="66:8" pos:end="66:11">perm</name></name> <operator pos:start="66:13" pos:end="66:13">=</operator> <literal type="number" pos:start="66:15" pos:end="66:15">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="67:5" pos:end="69:0"><expr pos:start="67:5" pos:end="67:33"><name pos:start="67:5" pos:end="67:18"><name pos:start="67:5" pos:end="67:5">s</name><operator pos:start="67:6" pos:end="67:7">-&gt;</operator><name pos:start="67:8" pos:end="67:18">shared_perm</name></name> <operator pos:start="67:20" pos:end="67:20">=</operator> <name pos:start="67:22" pos:end="67:33">BLK_PERM_ALL</name></expr>;</expr_stmt>
<cpp:ifdef pos:start="68:1" pos:end="68:23">#<cpp:directive pos:start="68:2" pos:end="68:6">ifdef</cpp:directive> <name pos:start="68:8" pos:end="68:23">CONFIG_LINUX_AIO</name></cpp:ifdef>
     <comment type="block" pos:start="69:6" pos:end="69:71">/* Currently Linux does AIO only for files opened with O_DIRECT */</comment>
    <if_stmt pos:start="70:5" pos:end="123:15"><if pos:start="70:5" pos:end="123:15">if <condition pos:start="70:8" pos:end="70:56">(<expr pos:start="70:9" pos:end="70:55"><name pos:start="70:9" pos:end="70:24"><name pos:start="70:9" pos:end="70:9">s</name><operator pos:start="70:10" pos:end="70:11">-&gt;</operator><name pos:start="70:12" pos:end="70:24">use_linux_aio</name></name> <operator pos:start="70:26" pos:end="70:27">&amp;&amp;</operator> <operator pos:start="70:29" pos:end="70:29">!</operator><operator pos:start="70:30" pos:end="70:30">(</operator><name pos:start="70:31" pos:end="70:43"><name pos:start="70:31" pos:end="70:31">s</name><operator pos:start="70:32" pos:end="70:33">-&gt;</operator><name pos:start="70:34" pos:end="70:43">open_flags</name></name> <operator pos:start="70:45" pos:end="70:45">&amp;</operator> <name pos:start="70:47" pos:end="70:54">O_DIRECT</name><operator pos:start="70:55" pos:end="70:55">)</operator></expr>)</condition> <block pos:start="70:58" pos:end="123:15">{<block_content pos:start="71:9" pos:end="123:15">
        <expr_stmt pos:start="71:9" pos:end="74:0"><expr pos:start="71:9" pos:end="72:69"><call pos:start="71:9" pos:end="72:69"><name pos:start="71:9" pos:end="71:18">error_setg</name><argument_list pos:start="71:19" pos:end="72:69">(<argument pos:start="71:20" pos:end="71:23"><expr pos:start="71:20" pos:end="71:23"><name pos:start="71:20" pos:end="71:23">errp</name></expr></argument>, <argument pos:start="71:26" pos:end="72:68"><expr pos:start="71:26" pos:end="72:68"><literal type="string" pos:start="71:26" pos:end="71:69">"aio=native was specified, but it requires "</literal>
                         <literal type="string" pos:start="72:26" pos:end="72:68">"cache.direct=on, which was not specified."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:start="73:1" pos:end="73:5">#<cpp:directive pos:start="73:2" pos:end="73:5">else</cpp:directive></cpp:else>
    <if_stmt pos:start="74:5" pos:end="123:15"><if pos:start="74:5" pos:end="123:15">if <condition pos:start="74:8" pos:end="74:25">(<expr pos:start="74:9" pos:end="74:24"><name pos:start="74:9" pos:end="74:24"><name pos:start="74:9" pos:end="74:9">s</name><operator pos:start="74:10" pos:end="74:11">-&gt;</operator><name pos:start="74:12" pos:end="74:24">use_linux_aio</name></name></expr>)</condition> <block pos:start="74:27" pos:end="123:15">{<block_content pos:start="75:9" pos:end="123:15">
        <expr_stmt pos:start="75:9" pos:end="78:0"><expr pos:start="75:9" pos:end="76:42"><call pos:start="75:9" pos:end="76:42"><name pos:start="75:9" pos:end="75:18">error_setg</name><argument_list pos:start="75:19" pos:end="76:42">(<argument pos:start="75:20" pos:end="75:23"><expr pos:start="75:20" pos:end="75:23"><name pos:start="75:20" pos:end="75:23">errp</name></expr></argument>, <argument pos:start="75:26" pos:end="76:41"><expr pos:start="75:26" pos:end="76:41"><literal type="string" pos:start="75:26" pos:end="75:74">"aio=native was specified, but is not supported "</literal>
                         <literal type="string" pos:start="76:26" pos:end="76:41">"in this build."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="77:1" pos:end="77:6">#<cpp:directive pos:start="77:2" pos:end="77:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="77:8" pos:end="77:39">/* !defined(CONFIG_LINUX_AIO) */</comment>
    <expr_stmt pos:start="78:5" pos:end="78:26"><expr pos:start="78:5" pos:end="78:25"><name pos:start="78:5" pos:end="78:18"><name pos:start="78:5" pos:end="78:5">s</name><operator pos:start="78:6" pos:end="78:7">-&gt;</operator><name pos:start="78:8" pos:end="78:18">has_discard</name></name> <operator pos:start="78:20" pos:end="78:20">=</operator> <name pos:start="78:22" pos:end="78:25">true</name></expr>;</expr_stmt>
    <expr_stmt pos:start="79:5" pos:end="79:31"><expr pos:start="79:5" pos:end="79:30"><name pos:start="79:5" pos:end="79:23"><name pos:start="79:5" pos:end="79:5">s</name><operator pos:start="79:6" pos:end="79:7">-&gt;</operator><name pos:start="79:8" pos:end="79:23">has_write_zeroes</name></name> <operator pos:start="79:25" pos:end="79:25">=</operator> <name pos:start="79:27" pos:end="79:30">true</name></expr>;</expr_stmt>
    <expr_stmt pos:start="80:5" pos:end="80:50"><expr pos:start="80:5" pos:end="80:49"><name pos:start="80:5" pos:end="80:28"><name pos:start="80:5" pos:end="80:6">bs</name><operator pos:start="80:7" pos:end="80:8">-&gt;</operator><name pos:start="80:9" pos:end="80:28">supported_zero_flags</name></name> <operator pos:start="80:30" pos:end="80:30">=</operator> <name pos:start="80:32" pos:end="80:49">BDRV_REQ_MAY_UNMAP</name></expr>;</expr_stmt>
    <if_stmt pos:start="81:5" pos:end="123:15"><if pos:start="81:5" pos:end="123:15">if <condition pos:start="81:8" pos:end="81:47">(<expr pos:start="81:9" pos:end="81:46"><operator pos:start="81:9" pos:end="81:9">(</operator><name pos:start="81:10" pos:end="81:23"><name pos:start="81:10" pos:end="81:11">bs</name><operator pos:start="81:12" pos:end="81:13">-&gt;</operator><name pos:start="81:14" pos:end="81:23">open_flags</name></name> <operator pos:start="81:25" pos:end="81:25">&amp;</operator> <name pos:start="81:27" pos:end="81:40">BDRV_O_NOCACHE</name><operator pos:start="81:41" pos:end="81:41">)</operator> <operator pos:start="81:43" pos:end="81:44">!=</operator> <literal type="number" pos:start="81:46" pos:end="81:46">0</literal></expr>)</condition> <block pos:start="81:49" pos:end="123:15">{<block_content pos:start="82:9" pos:end="123:15">
        <expr_stmt pos:start="82:9" pos:end="82:34"><expr pos:start="82:9" pos:end="82:33"><name pos:start="82:9" pos:end="82:26"><name pos:start="82:9" pos:end="82:9">s</name><operator pos:start="82:10" pos:end="82:11">-&gt;</operator><name pos:start="82:12" pos:end="82:26">needs_alignment</name></name> <operator pos:start="82:28" pos:end="82:28">=</operator> <name pos:start="82:30" pos:end="82:33">true</name></expr>;</expr_stmt>
    <if_stmt pos:start="83:5" pos:end="123:15"><if pos:start="83:5" pos:end="123:15">if <condition pos:start="83:8" pos:end="83:30">(<expr pos:start="83:9" pos:end="83:29"><call pos:start="83:9" pos:end="83:25"><name pos:start="83:9" pos:end="83:13">fstat</name><argument_list pos:start="83:14" pos:end="83:25">(<argument pos:start="83:15" pos:end="83:19"><expr pos:start="83:15" pos:end="83:19"><name pos:start="83:15" pos:end="83:19"><name pos:start="83:15" pos:end="83:15">s</name><operator pos:start="83:16" pos:end="83:17">-&gt;</operator><name pos:start="83:18" pos:end="83:19">fd</name></name></expr></argument>, <argument pos:start="83:22" pos:end="83:24"><expr pos:start="83:22" pos:end="83:24"><operator pos:start="83:22" pos:end="83:22">&amp;</operator><name pos:start="83:23" pos:end="83:24">st</name></expr></argument>)</argument_list></call> <operator pos:start="83:27" pos:end="83:27">&lt;</operator> <literal type="number" pos:start="83:29" pos:end="83:29">0</literal></expr>)</condition> <block pos:start="83:32" pos:end="123:15">{<block_content pos:start="84:9" pos:end="123:15">
        <expr_stmt pos:start="84:9" pos:end="84:21"><expr pos:start="84:9" pos:end="84:20"><name pos:start="84:9" pos:end="84:11">ret</name> <operator pos:start="84:13" pos:end="84:13">=</operator> <operator pos:start="84:15" pos:end="84:15">-</operator><name pos:start="84:16" pos:end="84:20">errno</name></expr>;</expr_stmt>
        <expr_stmt pos:start="85:9" pos:end="85:61"><expr pos:start="85:9" pos:end="85:60"><call pos:start="85:9" pos:end="85:60"><name pos:start="85:9" pos:end="85:24">error_setg_errno</name><argument_list pos:start="85:25" pos:end="85:60">(<argument pos:start="85:26" pos:end="85:29"><expr pos:start="85:26" pos:end="85:29"><name pos:start="85:26" pos:end="85:29">errp</name></expr></argument>, <argument pos:start="85:32" pos:end="85:36"><expr pos:start="85:32" pos:end="85:36"><name pos:start="85:32" pos:end="85:36">errno</name></expr></argument>, <argument pos:start="85:39" pos:end="85:59"><expr pos:start="85:39" pos:end="85:59"><literal type="string" pos:start="85:39" pos:end="85:59">"Could not stat file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="86:5" pos:end="123:15"><if pos:start="86:5" pos:end="123:15">if <condition pos:start="86:8" pos:end="86:28">(<expr pos:start="86:9" pos:end="86:27"><call pos:start="86:9" pos:end="86:27"><name pos:start="86:9" pos:end="86:15">S_ISREG</name><argument_list pos:start="86:16" pos:end="86:27">(<argument pos:start="86:17" pos:end="86:26"><expr pos:start="86:17" pos:end="86:26"><name pos:start="86:17" pos:end="86:26"><name pos:start="86:17" pos:end="86:18">st</name><operator pos:start="86:19" pos:end="86:19">.</operator><name pos:start="86:20" pos:end="86:26">st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="86:30" pos:end="123:15">{<block_content pos:start="87:9" pos:end="123:15">
        <expr_stmt pos:start="87:9" pos:end="87:33"><expr pos:start="87:9" pos:end="87:32"><name pos:start="87:9" pos:end="87:25"><name pos:start="87:9" pos:end="87:9">s</name><operator pos:start="87:10" pos:end="87:11">-&gt;</operator><name pos:start="87:12" pos:end="87:25">discard_zeroes</name></name> <operator pos:start="87:27" pos:end="87:27">=</operator> <name pos:start="87:29" pos:end="87:32">true</name></expr>;</expr_stmt>
        <expr_stmt pos:start="88:9" pos:end="88:32"><expr pos:start="88:9" pos:end="88:31"><name pos:start="88:9" pos:end="88:24"><name pos:start="88:9" pos:end="88:9">s</name><operator pos:start="88:10" pos:end="88:11">-&gt;</operator><name pos:start="88:12" pos:end="88:24">has_fallocate</name></name> <operator pos:start="88:26" pos:end="88:26">=</operator> <name pos:start="88:28" pos:end="88:31">true</name></expr>;</expr_stmt>
    <if_stmt pos:start="89:5" pos:end="123:15"><if pos:start="89:5" pos:end="123:15">if <condition pos:start="89:8" pos:end="89:28">(<expr pos:start="89:9" pos:end="89:27"><call pos:start="89:9" pos:end="89:27"><name pos:start="89:9" pos:end="89:15">S_ISBLK</name><argument_list pos:start="89:16" pos:end="89:27">(<argument pos:start="89:17" pos:end="89:26"><expr pos:start="89:17" pos:end="89:26"><name pos:start="89:17" pos:end="89:26"><name pos:start="89:17" pos:end="89:18">st</name><operator pos:start="89:19" pos:end="89:19">.</operator><name pos:start="89:20" pos:end="89:26">st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="89:30" pos:end="123:15">{<block_content pos:start="91:9" pos:end="123:15">
<cpp:ifdef pos:start="90:1" pos:end="90:23">#<cpp:directive pos:start="90:2" pos:end="90:6">ifdef</cpp:directive> <name pos:start="90:8" pos:end="90:23">BLKDISCARDZEROES</name></cpp:ifdef>
        <decl_stmt pos:start="91:9" pos:end="91:25"><decl pos:start="91:9" pos:end="91:24"><type pos:start="91:9" pos:end="91:20"><name pos:start="91:9" pos:end="91:16">unsigned</name> <name pos:start="91:18" pos:end="91:20">int</name></type> <name pos:start="91:22" pos:end="91:24">arg</name></decl>;</decl_stmt>
        <if_stmt pos:start="92:9" pos:end="123:15"><if pos:start="92:9" pos:end="123:15">if <condition pos:start="92:12" pos:end="92:61">(<expr pos:start="92:13" pos:end="92:60"><call pos:start="92:13" pos:end="92:48"><name pos:start="92:13" pos:end="92:17">ioctl</name><argument_list pos:start="92:18" pos:end="92:48">(<argument pos:start="92:19" pos:end="92:23"><expr pos:start="92:19" pos:end="92:23"><name pos:start="92:19" pos:end="92:23"><name pos:start="92:19" pos:end="92:19">s</name><operator pos:start="92:20" pos:end="92:21">-&gt;</operator><name pos:start="92:22" pos:end="92:23">fd</name></name></expr></argument>, <argument pos:start="92:26" pos:end="92:41"><expr pos:start="92:26" pos:end="92:41"><name pos:start="92:26" pos:end="92:41">BLKDISCARDZEROES</name></expr></argument>, <argument pos:start="92:44" pos:end="92:47"><expr pos:start="92:44" pos:end="92:47"><operator pos:start="92:44" pos:end="92:44">&amp;</operator><name pos:start="92:45" pos:end="92:47">arg</name></expr></argument>)</argument_list></call> <operator pos:start="92:50" pos:end="92:51">==</operator> <literal type="number" pos:start="92:53" pos:end="92:53">0</literal> <operator pos:start="92:55" pos:end="92:56">&amp;&amp;</operator> <name pos:start="92:58" pos:end="92:60">arg</name></expr>)</condition> <block pos:start="92:63" pos:end="123:15">{<block_content pos:start="93:13" pos:end="123:15">
            <expr_stmt pos:start="93:13" pos:end="96:0"><expr pos:start="93:13" pos:end="93:36"><name pos:start="93:13" pos:end="93:29"><name pos:start="93:13" pos:end="93:13">s</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:29">discard_zeroes</name></name> <operator pos:start="93:31" pos:end="93:31">=</operator> <name pos:start="93:33" pos:end="93:36">true</name></expr>;</expr_stmt>
<cpp:endif pos:start="94:1" pos:end="94:6">#<cpp:directive pos:start="94:2" pos:end="94:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="95:1" pos:end="95:16">#<cpp:directive pos:start="95:2" pos:end="95:6">ifdef</cpp:directive> <name pos:start="95:8" pos:end="95:16">__linux__</name></cpp:ifdef>
        <comment type="block" pos:start="96:9" pos:end="99:11">/* On Linux 3.10, BLKDISCARD leaves stale data in the page cache.  Do
         * not rely on the contents of discarded blocks unless using O_DIRECT.
         * Same for BLKZEROOUT.
         */</comment>
        <if_stmt pos:start="100:9" pos:end="123:15"><if pos:start="100:9" pos:end="123:15">if <condition pos:start="100:12" pos:end="100:47">(<expr pos:start="100:13" pos:end="100:46"><operator pos:start="100:13" pos:end="100:13">!</operator><operator pos:start="100:14" pos:end="100:14">(</operator><name pos:start="100:15" pos:end="100:28"><name pos:start="100:15" pos:end="100:16">bs</name><operator pos:start="100:17" pos:end="100:18">-&gt;</operator><name pos:start="100:19" pos:end="100:28">open_flags</name></name> <operator pos:start="100:30" pos:end="100:30">&amp;</operator> <name pos:start="100:32" pos:end="100:45">BDRV_O_NOCACHE</name><operator pos:start="100:46" pos:end="100:46">)</operator></expr>)</condition> <block pos:start="100:49" pos:end="123:15">{<block_content pos:start="101:13" pos:end="123:15">
            <expr_stmt pos:start="101:13" pos:end="101:38"><expr pos:start="101:13" pos:end="101:37"><name pos:start="101:13" pos:end="101:29"><name pos:start="101:13" pos:end="101:13">s</name><operator pos:start="101:14" pos:end="101:15">-&gt;</operator><name pos:start="101:16" pos:end="101:29">discard_zeroes</name></name> <operator pos:start="101:31" pos:end="101:31">=</operator> <name pos:start="101:33" pos:end="101:37">false</name></expr>;</expr_stmt>
            <expr_stmt pos:start="102:13" pos:end="105:0"><expr pos:start="102:13" pos:end="102:39"><name pos:start="102:13" pos:end="102:31"><name pos:start="102:13" pos:end="102:13">s</name><operator pos:start="102:14" pos:end="102:15">-&gt;</operator><name pos:start="102:16" pos:end="102:31">has_write_zeroes</name></name> <operator pos:start="102:33" pos:end="102:33">=</operator> <name pos:start="102:35" pos:end="102:39">false</name></expr>;</expr_stmt>
<cpp:endif pos:start="103:1" pos:end="103:6">#<cpp:directive pos:start="103:2" pos:end="103:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="104:1" pos:end="104:18">#<cpp:directive pos:start="104:2" pos:end="104:6">ifdef</cpp:directive> <name pos:start="104:8" pos:end="104:18">__FreeBSD__</name></cpp:ifdef>
    <if_stmt pos:start="105:5" pos:end="123:15"><if pos:start="105:5" pos:end="123:15">if <condition pos:start="105:8" pos:end="105:28">(<expr pos:start="105:9" pos:end="105:27"><call pos:start="105:9" pos:end="105:27"><name pos:start="105:9" pos:end="105:15">S_ISCHR</name><argument_list pos:start="105:16" pos:end="105:27">(<argument pos:start="105:17" pos:end="105:26"><expr pos:start="105:17" pos:end="105:26"><name pos:start="105:17" pos:end="105:26"><name pos:start="105:17" pos:end="105:18">st</name><operator pos:start="105:19" pos:end="105:19">.</operator><name pos:start="105:20" pos:end="105:26">st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="105:30" pos:end="123:15">{<block_content pos:start="112:9" pos:end="123:15">
        <comment type="block" pos:start="106:9" pos:end="111:11">/*
         * The file is a char device (disk), which on FreeBSD isn't behind
         * a pager, so force all requests to be aligned. This is needed
         * so QEMU makes sure all IO operations on the device are aligned
         * to sector size, or else FreeBSD will reject them with EINVAL.
         */</comment>
        <expr_stmt pos:start="112:9" pos:end="115:0"><expr pos:start="112:9" pos:end="112:33"><name pos:start="112:9" pos:end="112:26"><name pos:start="112:9" pos:end="112:9">s</name><operator pos:start="112:10" pos:end="112:11">-&gt;</operator><name pos:start="112:12" pos:end="112:26">needs_alignment</name></name> <operator pos:start="112:28" pos:end="112:28">=</operator> <name pos:start="112:30" pos:end="112:33">true</name></expr>;</expr_stmt>
<cpp:endif pos:start="113:1" pos:end="113:6">#<cpp:directive pos:start="113:2" pos:end="113:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="114:1" pos:end="114:17">#<cpp:directive pos:start="114:2" pos:end="114:6">ifdef</cpp:directive> <name pos:start="114:8" pos:end="114:17">CONFIG_XFS</name></cpp:ifdef>
    <if_stmt pos:start="115:5" pos:end="123:15"><if pos:start="115:5" pos:end="123:15">if <condition pos:start="115:8" pos:end="115:36">(<expr pos:start="115:9" pos:end="115:35"><call pos:start="115:9" pos:end="115:35"><name pos:start="115:9" pos:end="115:28">platform_test_xfs_fd</name><argument_list pos:start="115:29" pos:end="115:35">(<argument pos:start="115:30" pos:end="115:34"><expr pos:start="115:30" pos:end="115:34"><name pos:start="115:30" pos:end="115:34"><name pos:start="115:30" pos:end="115:30">s</name><operator pos:start="115:31" pos:end="115:32">-&gt;</operator><name pos:start="115:33" pos:end="115:34">fd</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="115:38" pos:end="123:15">{<block_content pos:start="116:9" pos:end="123:15">
        <expr_stmt pos:start="116:9" pos:end="118:0"><expr pos:start="116:9" pos:end="116:24"><name pos:start="116:9" pos:end="116:17"><name pos:start="116:9" pos:end="116:9">s</name><operator pos:start="116:10" pos:end="116:11">-&gt;</operator><name pos:start="116:12" pos:end="116:17">is_xfs</name></name> <operator pos:start="116:19" pos:end="116:19">=</operator> <name pos:start="116:21" pos:end="116:24">true</name></expr>;</expr_stmt>
<cpp:endif pos:start="117:1" pos:end="117:6">#<cpp:directive pos:start="117:2" pos:end="117:6">endif</cpp:directive></cpp:endif>
    <expr_stmt pos:start="118:5" pos:end="118:12"><expr pos:start="118:5" pos:end="118:11"><name pos:start="118:5" pos:end="118:7">ret</name> <operator pos:start="118:9" pos:end="118:9">=</operator> <literal type="number" pos:start="118:11" pos:end="118:11">0</literal></expr>;</expr_stmt>
<label pos:start="119:1" pos:end="119:5"><name pos:start="119:1" pos:end="119:4">fail</name>:</label>
    <if_stmt pos:start="120:5" pos:end="123:15"><if pos:start="120:5" pos:end="123:15">if <condition pos:start="120:8" pos:end="120:52">(<expr pos:start="120:9" pos:end="120:51"><name pos:start="120:9" pos:end="120:16">filename</name> <operator pos:start="120:18" pos:end="120:19">&amp;&amp;</operator> <operator pos:start="120:21" pos:end="120:21">(</operator><name pos:start="120:22" pos:end="120:31">bdrv_flags</name> <operator pos:start="120:33" pos:end="120:33">&amp;</operator> <name pos:start="120:35" pos:end="120:50">BDRV_O_TEMPORARY</name><operator pos:start="120:51" pos:end="120:51">)</operator></expr>)</condition> <block pos:start="120:54" pos:end="123:15">{<block_content pos:start="121:9" pos:end="123:15">
        <expr_stmt pos:start="121:9" pos:end="121:25"><expr pos:start="121:9" pos:end="121:24"><call pos:start="121:9" pos:end="121:24"><name pos:start="121:9" pos:end="121:14">unlink</name><argument_list pos:start="121:15" pos:end="121:24">(<argument pos:start="121:16" pos:end="121:23"><expr pos:start="121:16" pos:end="121:23"><name pos:start="121:16" pos:end="121:23">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="122:5" pos:end="122:24"><expr pos:start="122:5" pos:end="122:23"><call pos:start="122:5" pos:end="122:23"><name pos:start="122:5" pos:end="122:17">qemu_opts_del</name><argument_list pos:start="122:18" pos:end="122:23">(<argument pos:start="122:19" pos:end="122:22"><expr pos:start="122:19" pos:end="122:22"><name pos:start="122:19" pos:end="122:22">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="123:5" pos:end="123:15">return <expr pos:start="123:12" pos:end="123:14"><name pos:start="123:12" pos:end="123:14">ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></function></unit>
