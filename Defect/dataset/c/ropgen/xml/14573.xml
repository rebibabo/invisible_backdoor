<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14573.c" pos:tabs="8"><function pos:start="1:1" pos:end="55:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:25">cpu_breakpoint_insert</name><parameter_list pos:start="1:26" pos:end="3:53">(<parameter pos:start="1:27" pos:end="1:39"><decl pos:start="1:27" pos:end="1:39"><type pos:start="1:27" pos:end="1:39"><name pos:start="1:27" pos:end="1:34">CPUState</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">cpu</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:49"><decl pos:start="1:42" pos:end="1:49"><type pos:start="1:42" pos:end="1:49"><name pos:start="1:42" pos:end="1:46">vaddr</name></type> <name pos:start="1:48" pos:end="1:49">pc</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:60"><decl pos:start="1:52" pos:end="1:60"><type pos:start="1:52" pos:end="1:60"><name pos:start="1:52" pos:end="1:54">int</name></type> <name pos:start="1:56" pos:end="1:60">flags</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:52"><decl pos:start="3:27" pos:end="3:52"><type pos:start="3:27" pos:end="3:52"><name pos:start="3:27" pos:end="3:39">CPUBreakpoint</name> <modifier pos:start="3:41" pos:end="3:41">*</modifier><modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:52">breakpoint</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="55:1">{<block_content pos:start="9:5" pos:end="54:0">

<cpp:if pos:start="7:1" pos:end="7:27">#<cpp:directive pos:start="7:2" pos:end="7:3">if</cpp:directive> <expr pos:start="7:5" pos:end="7:27"><call pos:start="7:5" pos:end="7:27"><name pos:start="7:5" pos:end="7:11">defined</name><argument_list pos:start="7:12" pos:end="7:27">(<argument pos:start="7:13" pos:end="7:26"><expr pos:start="7:13" pos:end="7:26"><name pos:start="7:13" pos:end="7:26">TARGET_HAS_ICE</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">CPUBreakpoint</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:21">bp</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:31"><expr pos:start="13:5" pos:end="13:30"><name pos:start="13:5" pos:end="13:6">bp</name> <operator pos:start="13:8" pos:end="13:8">=</operator> <call pos:start="13:10" pos:end="13:30"><name pos:start="13:10" pos:end="13:17">g_malloc</name><argument_list pos:start="13:18" pos:end="13:30">(<argument pos:start="13:19" pos:end="13:29"><expr pos:start="13:19" pos:end="13:29"><sizeof pos:start="13:19" pos:end="13:29">sizeof<argument_list pos:start="13:25" pos:end="13:29">(<argument pos:start="13:26" pos:end="13:28"><expr pos:start="13:26" pos:end="13:28"><operator pos:start="13:26" pos:end="13:26">*</operator><name pos:start="13:27" pos:end="13:28">bp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:16"><expr pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:6">bp</name><operator pos:start="17:7" pos:end="17:8">-&gt;</operator><name pos:start="17:9" pos:end="17:10">pc</name></name> <operator pos:start="17:12" pos:end="17:12">=</operator> <name pos:start="17:14" pos:end="17:15">pc</name></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:22"><expr pos:start="19:5" pos:end="19:21"><name pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:6">bp</name><operator pos:start="19:7" pos:end="19:8">-&gt;</operator><name pos:start="19:9" pos:end="19:13">flags</name></name> <operator pos:start="19:15" pos:end="19:15">=</operator> <name pos:start="19:17" pos:end="19:21">flags</name></expr>;</expr_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:52">/* keep all GDB-injected breakpoints in front */</comment>

    <if_stmt pos:start="25:5" pos:end="33:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:23">(<expr pos:start="25:9" pos:end="25:22"><name pos:start="25:9" pos:end="25:13">flags</name> <operator pos:start="25:15" pos:end="25:15">&amp;</operator> <name pos:start="25:17" pos:end="25:22">BP_GDB</name></expr>)</condition> <block pos:start="25:25" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:57">

        <expr_stmt pos:start="27:9" pos:end="27:57"><expr pos:start="27:9" pos:end="27:56"><call pos:start="27:9" pos:end="27:56"><name pos:start="27:9" pos:end="27:26">QTAILQ_INSERT_HEAD</name><argument_list pos:start="27:27" pos:end="27:56">(<argument pos:start="27:28" pos:end="27:44"><expr pos:start="27:28" pos:end="27:44"><operator pos:start="27:28" pos:end="27:28">&amp;</operator><name pos:start="27:29" pos:end="27:44"><name pos:start="27:29" pos:end="27:31">cpu</name><operator pos:start="27:32" pos:end="27:33">-&gt;</operator><name pos:start="27:34" pos:end="27:44">breakpoints</name></name></expr></argument>, <argument pos:start="27:47" pos:end="27:48"><expr pos:start="27:47" pos:end="27:48"><name pos:start="27:47" pos:end="27:48">bp</name></expr></argument>, <argument pos:start="27:51" pos:end="27:55"><expr pos:start="27:51" pos:end="27:55"><name pos:start="27:51" pos:end="27:55">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="29:7" pos:end="33:5">else <block pos:start="29:12" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:57">

        <expr_stmt pos:start="31:9" pos:end="31:57"><expr pos:start="31:9" pos:end="31:56"><call pos:start="31:9" pos:end="31:56"><name pos:start="31:9" pos:end="31:26">QTAILQ_INSERT_TAIL</name><argument_list pos:start="31:27" pos:end="31:56">(<argument pos:start="31:28" pos:end="31:44"><expr pos:start="31:28" pos:end="31:44"><operator pos:start="31:28" pos:end="31:28">&amp;</operator><name pos:start="31:29" pos:end="31:44"><name pos:start="31:29" pos:end="31:31">cpu</name><operator pos:start="31:32" pos:end="31:33">-&gt;</operator><name pos:start="31:34" pos:end="31:44">breakpoints</name></name></expr></argument>, <argument pos:start="31:47" pos:end="31:48"><expr pos:start="31:47" pos:end="31:48"><name pos:start="31:47" pos:end="31:48">bp</name></expr></argument>, <argument pos:start="31:51" pos:end="31:55"><expr pos:start="31:51" pos:end="31:55"><name pos:start="31:51" pos:end="31:55">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:35"><expr pos:start="37:5" pos:end="37:34"><call pos:start="37:5" pos:end="37:34"><name pos:start="37:5" pos:end="37:25">breakpoint_invalidate</name><argument_list pos:start="37:26" pos:end="37:34">(<argument pos:start="37:27" pos:end="37:29"><expr pos:start="37:27" pos:end="37:29"><name pos:start="37:27" pos:end="37:29">cpu</name></expr></argument>, <argument pos:start="37:32" pos:end="37:33"><expr pos:start="37:32" pos:end="37:33"><name pos:start="37:32" pos:end="37:33">pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:19">(<expr pos:start="41:9" pos:end="41:18"><name pos:start="41:9" pos:end="41:18">breakpoint</name></expr>)</condition> <block pos:start="41:21" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:25">

        <expr_stmt pos:start="43:9" pos:end="43:25"><expr pos:start="43:9" pos:end="43:24"><operator pos:start="43:9" pos:end="43:9">*</operator><name pos:start="43:10" pos:end="43:19">breakpoint</name> <operator pos:start="43:21" pos:end="43:21">=</operator> <name pos:start="43:23" pos:end="43:24">bp</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="47:5" pos:end="50:0">return <expr pos:start="47:12" pos:end="47:12"><literal type="number" pos:start="47:12" pos:end="47:12">0</literal></expr>;</return>

<cpp:else pos:start="49:1" pos:end="49:5">#<cpp:directive pos:start="49:2" pos:end="49:5">else</cpp:directive></cpp:else>

    <return pos:start="51:5" pos:end="54:0">return <expr pos:start="51:12" pos:end="51:18"><operator pos:start="51:12" pos:end="51:12">-</operator><name pos:start="51:13" pos:end="51:18">ENOSYS</name></expr>;</return>

<cpp:endif pos:start="53:1" pos:end="53:6">#<cpp:directive pos:start="53:2" pos:end="53:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
