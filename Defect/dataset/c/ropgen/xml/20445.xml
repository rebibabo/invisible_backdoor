<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20445.c" pos:tabs="8"><function pos:start="1:1" pos:end="51:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:38">test_visitor_in_union_flat</name><parameter_list pos:start="1:39" pos:end="3:58">(<parameter pos:start="1:40" pos:end="1:65"><decl pos:start="1:40" pos:end="1:65"><type pos:start="1:40" pos:end="1:65"><name pos:start="1:40" pos:end="1:59">TestInputVisitorData</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:65">data</name></decl></parameter>,

                                       <parameter pos:start="3:40" pos:end="3:57"><decl pos:start="3:40" pos:end="3:57"><type pos:start="3:40" pos:end="3:57"><specifier pos:start="3:40" pos:end="3:44">const</specifier> <name pos:start="3:46" pos:end="3:49">void</name> <modifier pos:start="3:51" pos:end="3:51">*</modifier></type><name pos:start="3:52" pos:end="3:57">unused</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="51:1">{<block_content pos:start="7:5" pos:end="49:36">

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">Visitor</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:14">v</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">Error</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:14">err</name> <init pos:start="9:16" pos:end="9:21">= <expr pos:start="9:18" pos:end="9:21"><name pos:start="9:18" pos:end="9:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">UserDefFlatUnion</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:25">tmp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:20">UserDefUnionBase</name> <modifier pos:start="13:22" pos:end="13:22">*</modifier></type><name pos:start="13:23" pos:end="13:26">base</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="25:53"><expr pos:start="17:5" pos:end="25:52"><name pos:start="17:5" pos:end="17:5">v</name> <operator pos:start="17:7" pos:end="17:7">=</operator> <call pos:start="17:9" pos:end="25:52"><name pos:start="17:9" pos:end="17:31">visitor_input_test_init</name><argument_list pos:start="17:32" pos:end="25:52">(<argument pos:start="17:33" pos:end="17:36"><expr pos:start="17:33" pos:end="17:36"><name pos:start="17:33" pos:end="17:36">data</name></expr></argument>,

                                <argument pos:start="19:33" pos:end="25:51"><expr pos:start="19:33" pos:end="25:51"><literal type="string" pos:start="19:33" pos:end="19:55">"{ 'enum1': 'value1', "</literal>

                                <literal type="string" pos:start="21:33" pos:end="21:49">"'integer': 41, "</literal>

                                <literal type="string" pos:start="23:33" pos:end="23:51">"'string': 'str', "</literal>

                                <literal type="string" pos:start="25:33" pos:end="25:51">"'boolean': true }"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:53"><expr pos:start="29:5" pos:end="29:52"><call pos:start="29:5" pos:end="29:52"><name pos:start="29:5" pos:end="29:31">visit_type_UserDefFlatUnion</name><argument_list pos:start="29:32" pos:end="29:52">(<argument pos:start="29:33" pos:end="29:33"><expr pos:start="29:33" pos:end="29:33"><name pos:start="29:33" pos:end="29:33">v</name></expr></argument>, <argument pos:start="29:36" pos:end="29:39"><expr pos:start="29:36" pos:end="29:39"><operator pos:start="29:36" pos:end="29:36">&amp;</operator><name pos:start="29:37" pos:end="29:39">tmp</name></expr></argument>, <argument pos:start="29:42" pos:end="29:45"><expr pos:start="29:42" pos:end="29:45"><name pos:start="29:42" pos:end="29:45">NULL</name></expr></argument>, <argument pos:start="29:48" pos:end="29:51"><expr pos:start="29:48" pos:end="29:51"><operator pos:start="29:48" pos:end="29:48">&amp;</operator><name pos:start="29:49" pos:end="29:51">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:26"><expr pos:start="31:5" pos:end="31:25"><call pos:start="31:5" pos:end="31:25"><name pos:start="31:5" pos:end="31:12">g_assert</name><argument_list pos:start="31:13" pos:end="31:25">(<argument pos:start="31:14" pos:end="31:24"><expr pos:start="31:14" pos:end="31:24"><name pos:start="31:14" pos:end="31:16">err</name> <operator pos:start="31:18" pos:end="31:19">==</operator> <name pos:start="31:21" pos:end="31:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:53"><expr pos:start="33:5" pos:end="33:52"><call pos:start="33:5" pos:end="33:52"><name pos:start="33:5" pos:end="33:19">g_assert_cmpint</name><argument_list pos:start="33:20" pos:end="33:52">(<argument pos:start="33:21" pos:end="33:30"><expr pos:start="33:21" pos:end="33:30"><name pos:start="33:21" pos:end="33:30"><name pos:start="33:21" pos:end="33:23">tmp</name><operator pos:start="33:24" pos:end="33:25">-&gt;</operator><name pos:start="33:26" pos:end="33:30">enum1</name></name></expr></argument>, <argument pos:start="33:33" pos:end="33:34"><expr pos:start="33:33" pos:end="33:34"><operator pos:start="33:33" pos:end="33:34">==</operator></expr></argument>, <argument pos:start="33:37" pos:end="33:51"><expr pos:start="33:37" pos:end="33:51"><name pos:start="33:37" pos:end="33:51">ENUM_ONE_VALUE1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:44"><expr pos:start="35:5" pos:end="35:43"><call pos:start="35:5" pos:end="35:43"><name pos:start="35:5" pos:end="35:19">g_assert_cmpstr</name><argument_list pos:start="35:20" pos:end="35:43">(<argument pos:start="35:21" pos:end="35:31"><expr pos:start="35:21" pos:end="35:31"><name pos:start="35:21" pos:end="35:31"><name pos:start="35:21" pos:end="35:23">tmp</name><operator pos:start="35:24" pos:end="35:25">-&gt;</operator><name pos:start="35:26" pos:end="35:31">string</name></name></expr></argument>, <argument pos:start="35:34" pos:end="35:35"><expr pos:start="35:34" pos:end="35:35"><operator pos:start="35:34" pos:end="35:35">==</operator></expr></argument>, <argument pos:start="35:38" pos:end="35:42"><expr pos:start="35:38" pos:end="35:42"><literal type="string" pos:start="35:38" pos:end="35:42">"str"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:42"><expr pos:start="37:5" pos:end="37:41"><call pos:start="37:5" pos:end="37:41"><name pos:start="37:5" pos:end="37:19">g_assert_cmpint</name><argument_list pos:start="37:20" pos:end="37:41">(<argument pos:start="37:21" pos:end="37:32"><expr pos:start="37:21" pos:end="37:32"><name pos:start="37:21" pos:end="37:32"><name pos:start="37:21" pos:end="37:23">tmp</name><operator pos:start="37:24" pos:end="37:25">-&gt;</operator><name pos:start="37:26" pos:end="37:32">integer</name></name></expr></argument>, <argument pos:start="37:35" pos:end="37:36"><expr pos:start="37:35" pos:end="37:36"><operator pos:start="37:35" pos:end="37:36">==</operator></expr></argument>, <argument pos:start="37:39" pos:end="37:40"><expr pos:start="37:39" pos:end="37:40"><literal type="number" pos:start="37:39" pos:end="37:40">41</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:54"><expr pos:start="39:5" pos:end="39:53"><call pos:start="39:5" pos:end="39:53"><name pos:start="39:5" pos:end="39:19">g_assert_cmpint</name><argument_list pos:start="39:20" pos:end="39:53">(<argument pos:start="39:21" pos:end="39:42"><expr pos:start="39:21" pos:end="39:42"><name pos:start="39:21" pos:end="39:42"><name pos:start="39:21" pos:end="39:23">tmp</name><operator pos:start="39:24" pos:end="39:25">-&gt;</operator><name pos:start="39:26" pos:end="39:26">u</name><operator pos:start="39:27" pos:end="39:27">.</operator><name pos:start="39:28" pos:end="39:33">value1</name><operator pos:start="39:34" pos:end="39:35">-&gt;</operator><name pos:start="39:36" pos:end="39:42">boolean</name></name></expr></argument>, <argument pos:start="39:45" pos:end="39:46"><expr pos:start="39:45" pos:end="39:46"><operator pos:start="39:45" pos:end="39:46">==</operator></expr></argument>, <argument pos:start="39:49" pos:end="39:52"><expr pos:start="39:49" pos:end="39:52"><name pos:start="39:49" pos:end="39:52">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:43"><expr pos:start="43:5" pos:end="43:42"><name pos:start="43:5" pos:end="43:8">base</name> <operator pos:start="43:10" pos:end="43:10">=</operator> <call pos:start="43:12" pos:end="43:42"><name pos:start="43:12" pos:end="43:37">qapi_UserDefFlatUnion_base</name><argument_list pos:start="43:38" pos:end="43:42">(<argument pos:start="43:39" pos:end="43:41"><expr pos:start="43:39" pos:end="43:41"><name pos:start="43:39" pos:end="43:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:42"><expr pos:start="45:5" pos:end="45:41"><call pos:start="45:5" pos:end="45:41"><name pos:start="45:5" pos:end="45:12">g_assert</name><argument_list pos:start="45:13" pos:end="45:41">(<argument pos:start="45:14" pos:end="45:40"><expr pos:start="45:14" pos:end="45:40"><operator pos:start="45:14" pos:end="45:14">&amp;</operator><name pos:start="45:15" pos:end="45:25"><name pos:start="45:15" pos:end="45:18">base</name><operator pos:start="45:19" pos:end="45:20">-&gt;</operator><name pos:start="45:21" pos:end="45:25">enum1</name></name> <operator pos:start="45:27" pos:end="45:28">==</operator> <operator pos:start="45:30" pos:end="45:30">&amp;</operator><name pos:start="45:31" pos:end="45:40"><name pos:start="45:31" pos:end="45:33">tmp</name><operator pos:start="45:34" pos:end="45:35">-&gt;</operator><name pos:start="45:36" pos:end="45:40">enum1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:36"><expr pos:start="49:5" pos:end="49:35"><call pos:start="49:5" pos:end="49:35"><name pos:start="49:5" pos:end="49:30">qapi_free_UserDefFlatUnion</name><argument_list pos:start="49:31" pos:end="49:35">(<argument pos:start="49:32" pos:end="49:34"><expr pos:start="49:32" pos:end="49:34"><name pos:start="49:32" pos:end="49:34">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
