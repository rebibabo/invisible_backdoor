<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8921.c" pos:tabs="8"><function pos:start="1:1" pos:end="125:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint64_t</name></type> <name pos:start="1:17" pos:end="1:32">grlib_irqmp_read</name><parameter_list pos:start="1:33" pos:end="3:47">(<parameter pos:start="1:34" pos:end="1:45"><decl pos:start="1:34" pos:end="1:45"><type pos:start="1:34" pos:end="1:45"><name pos:start="1:34" pos:end="1:37">void</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:45">opaque</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:70"><decl pos:start="1:48" pos:end="1:70"><type pos:start="1:48" pos:end="1:70"><name pos:start="1:48" pos:end="1:65">target_phys_addr_t</name></type> <name pos:start="1:67" pos:end="1:70">addr</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:46"><decl pos:start="3:34" pos:end="3:46"><type pos:start="3:34" pos:end="3:46"><name pos:start="3:34" pos:end="3:41">unsigned</name></type> <name pos:start="3:43" pos:end="3:46">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="125:1">{<block_content pos:start="7:5" pos:end="123:13">

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:9">IRQMP</name>      <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:21">irqmp</name> <init pos:start="7:23" pos:end="7:30">= <expr pos:start="7:25" pos:end="7:30"><name pos:start="7:25" pos:end="7:30">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">IRQMPState</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:21">state</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:26"><expr pos:start="13:5" pos:end="13:25"><call pos:start="13:5" pos:end="13:25"><name pos:start="13:5" pos:end="13:10">assert</name><argument_list pos:start="13:11" pos:end="13:25">(<argument pos:start="13:12" pos:end="13:24"><expr pos:start="13:12" pos:end="13:24"><name pos:start="13:12" pos:end="13:16">irqmp</name> <operator pos:start="13:18" pos:end="13:19">!=</operator> <name pos:start="13:21" pos:end="13:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:25"><expr pos:start="15:5" pos:end="15:24"><name pos:start="15:5" pos:end="15:9">state</name> <operator pos:start="15:11" pos:end="15:11">=</operator> <name pos:start="15:13" pos:end="15:24"><name pos:start="15:13" pos:end="15:17">irqmp</name><operator pos:start="15:18" pos:end="15:19">-&gt;</operator><name pos:start="15:20" pos:end="15:24">state</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:26"><expr pos:start="17:5" pos:end="17:25"><call pos:start="17:5" pos:end="17:25"><name pos:start="17:5" pos:end="17:10">assert</name><argument_list pos:start="17:11" pos:end="17:25">(<argument pos:start="17:12" pos:end="17:24"><expr pos:start="17:12" pos:end="17:24"><name pos:start="17:12" pos:end="17:16">state</name> <operator pos:start="17:18" pos:end="17:19">!=</operator> <name pos:start="17:21" pos:end="17:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:17"><expr pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:8">addr</name> <operator pos:start="21:10" pos:end="21:11">&amp;=</operator> <literal type="number" pos:start="21:13" pos:end="21:16">0xff</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:26">/* global registers */</comment>

    <switch pos:start="27:5" pos:end="69:5">switch <condition pos:start="27:12" pos:end="27:17">(<expr pos:start="27:13" pos:end="27:16"><name pos:start="27:13" pos:end="27:16">addr</name></expr>)</condition> <block pos:start="27:19" pos:end="69:5">{<block_content pos:start="29:5" pos:end="67:14">

    <case pos:start="29:5" pos:end="29:22">case <expr pos:start="29:10" pos:end="29:21"><name pos:start="29:10" pos:end="29:21">LEVEL_OFFSET</name></expr>:</case>

        <return pos:start="31:9" pos:end="31:28">return <expr pos:start="31:16" pos:end="31:27"><name pos:start="31:16" pos:end="31:27"><name pos:start="31:16" pos:end="31:20">state</name><operator pos:start="31:21" pos:end="31:22">-&gt;</operator><name pos:start="31:23" pos:end="31:27">level</name></name></expr>;</return>



    <case pos:start="35:5" pos:end="35:24">case <expr pos:start="35:10" pos:end="35:23"><name pos:start="35:10" pos:end="35:23">PENDING_OFFSET</name></expr>:</case>

        <return pos:start="37:9" pos:end="37:30">return <expr pos:start="37:16" pos:end="37:29"><name pos:start="37:16" pos:end="37:29"><name pos:start="37:16" pos:end="37:20">state</name><operator pos:start="37:21" pos:end="37:22">-&gt;</operator><name pos:start="37:23" pos:end="37:29">pending</name></name></expr>;</return>



    <case pos:start="41:5" pos:end="41:23">case <expr pos:start="41:10" pos:end="41:22"><name pos:start="41:10" pos:end="41:22">FORCE0_OFFSET</name></expr>:</case>

        <comment type="block" pos:start="43:9" pos:end="43:73">/* This register is an "alias" for the force register of CPU 0 */</comment>

        <return pos:start="45:9" pos:end="45:31">return <expr pos:start="45:16" pos:end="45:30"><name pos:start="45:16" pos:end="45:30"><name pos:start="45:16" pos:end="45:20">state</name><operator pos:start="45:21" pos:end="45:22">-&gt;</operator><name pos:start="45:23" pos:end="45:27">force</name><index pos:start="45:28" pos:end="45:30">[<expr pos:start="45:29" pos:end="45:29"><literal type="number" pos:start="45:29" pos:end="45:29">0</literal></expr>]</index></name></expr>;</return>



    <case pos:start="49:5" pos:end="49:22">case <expr pos:start="49:10" pos:end="49:21"><name pos:start="49:10" pos:end="49:21">CLEAR_OFFSET</name></expr>:</case>

    <case pos:start="51:5" pos:end="51:26">case <expr pos:start="51:10" pos:end="51:25"><name pos:start="51:10" pos:end="51:25">MP_STATUS_OFFSET</name></expr>:</case>

        <comment type="block" pos:start="53:9" pos:end="53:30">/* Always read as 0 */</comment>

        <return pos:start="55:9" pos:end="55:17">return <expr pos:start="55:16" pos:end="55:16"><literal type="number" pos:start="55:16" pos:end="55:16">0</literal></expr>;</return>



    <case pos:start="59:5" pos:end="59:26">case <expr pos:start="59:10" pos:end="59:25"><name pos:start="59:10" pos:end="59:25">BROADCAST_OFFSET</name></expr>:</case>

        <return pos:start="61:9" pos:end="61:32">return <expr pos:start="61:16" pos:end="61:31"><name pos:start="61:16" pos:end="61:31"><name pos:start="61:16" pos:end="61:20">state</name><operator pos:start="61:21" pos:end="61:22">-&gt;</operator><name pos:start="61:23" pos:end="61:31">broadcast</name></name></expr>;</return>



    <default pos:start="65:5" pos:end="65:12">default:</default>

        <break pos:start="67:9" pos:end="67:14">break;</break>

    </block_content>}</block></switch>



    <comment type="block" pos:start="73:5" pos:end="73:24">/* mask registers */</comment>

    <if_stmt pos:start="75:5" pos:end="85:5"><if pos:start="75:5" pos:end="85:5">if <condition pos:start="75:8" pos:end="75:51">(<expr pos:start="75:9" pos:end="75:50"><name pos:start="75:9" pos:end="75:12">addr</name> <operator pos:start="75:14" pos:end="75:15">&gt;=</operator> <name pos:start="75:17" pos:end="75:27">MASK_OFFSET</name> <operator pos:start="75:29" pos:end="75:30">&amp;&amp;</operator> <name pos:start="75:32" pos:end="75:35">addr</name> <operator pos:start="75:37" pos:end="75:37">&lt;</operator> <name pos:start="75:39" pos:end="75:50">FORCE_OFFSET</name></expr>)</condition> <block pos:start="75:53" pos:end="85:5">{<block_content pos:start="77:9" pos:end="83:32">

        <decl_stmt pos:start="77:9" pos:end="77:43"><decl pos:start="77:9" pos:end="77:42"><type pos:start="77:9" pos:end="77:11"><name pos:start="77:9" pos:end="77:11">int</name></type> <name pos:start="77:13" pos:end="77:15">cpu</name> <init pos:start="77:17" pos:end="77:42">= <expr pos:start="77:19" pos:end="77:42"><operator pos:start="77:19" pos:end="77:19">(</operator><name pos:start="77:20" pos:end="77:23">addr</name> <operator pos:start="77:25" pos:end="77:25">-</operator> <name pos:start="77:27" pos:end="77:37">MASK_OFFSET</name><operator pos:start="77:38" pos:end="77:38">)</operator> <operator pos:start="77:40" pos:end="77:40">/</operator> <literal type="number" pos:start="77:42" pos:end="77:42">4</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:48"><expr pos:start="79:9" pos:end="79:47"><call pos:start="79:9" pos:end="79:47"><name pos:start="79:9" pos:end="79:14">assert</name><argument_list pos:start="79:15" pos:end="79:47">(<argument pos:start="79:16" pos:end="79:46"><expr pos:start="79:16" pos:end="79:46"><name pos:start="79:16" pos:end="79:18">cpu</name> <operator pos:start="79:20" pos:end="79:21">&gt;=</operator> <literal type="number" pos:start="79:23" pos:end="79:23">0</literal> <operator pos:start="79:25" pos:end="79:26">&amp;&amp;</operator> <name pos:start="79:28" pos:end="79:30">cpu</name> <operator pos:start="79:32" pos:end="79:32">&lt;</operator> <name pos:start="79:34" pos:end="79:46">IRQMP_MAX_CPU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <return pos:start="83:9" pos:end="83:32">return <expr pos:start="83:16" pos:end="83:31"><name pos:start="83:16" pos:end="83:31"><name pos:start="83:16" pos:end="83:20">state</name><operator pos:start="83:21" pos:end="83:22">-&gt;</operator><name pos:start="83:23" pos:end="83:26">mask</name><index pos:start="83:27" pos:end="83:31">[<expr pos:start="83:28" pos:end="83:30"><name pos:start="83:28" pos:end="83:30">cpu</name></expr>]</index></name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="89:5" pos:end="89:25">/* force registers */</comment>

    <if_stmt pos:start="91:5" pos:end="101:5"><if pos:start="91:5" pos:end="101:5">if <condition pos:start="91:8" pos:end="91:55">(<expr pos:start="91:9" pos:end="91:54"><name pos:start="91:9" pos:end="91:12">addr</name> <operator pos:start="91:14" pos:end="91:15">&gt;=</operator> <name pos:start="91:17" pos:end="91:28">FORCE_OFFSET</name> <operator pos:start="91:30" pos:end="91:31">&amp;&amp;</operator> <name pos:start="91:33" pos:end="91:36">addr</name> <operator pos:start="91:38" pos:end="91:38">&lt;</operator> <name pos:start="91:40" pos:end="91:54">EXTENDED_OFFSET</name></expr>)</condition> <block pos:start="91:57" pos:end="101:5">{<block_content pos:start="93:9" pos:end="99:33">

        <decl_stmt pos:start="93:9" pos:end="93:44"><decl pos:start="93:9" pos:end="93:43"><type pos:start="93:9" pos:end="93:11"><name pos:start="93:9" pos:end="93:11">int</name></type> <name pos:start="93:13" pos:end="93:15">cpu</name> <init pos:start="93:17" pos:end="93:43">= <expr pos:start="93:19" pos:end="93:43"><operator pos:start="93:19" pos:end="93:19">(</operator><name pos:start="93:20" pos:end="93:23">addr</name> <operator pos:start="93:25" pos:end="93:25">-</operator> <name pos:start="93:27" pos:end="93:38">FORCE_OFFSET</name><operator pos:start="93:39" pos:end="93:39">)</operator> <operator pos:start="93:41" pos:end="93:41">/</operator> <literal type="number" pos:start="93:43" pos:end="93:43">4</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:48"><expr pos:start="95:9" pos:end="95:47"><call pos:start="95:9" pos:end="95:47"><name pos:start="95:9" pos:end="95:14">assert</name><argument_list pos:start="95:15" pos:end="95:47">(<argument pos:start="95:16" pos:end="95:46"><expr pos:start="95:16" pos:end="95:46"><name pos:start="95:16" pos:end="95:18">cpu</name> <operator pos:start="95:20" pos:end="95:21">&gt;=</operator> <literal type="number" pos:start="95:23" pos:end="95:23">0</literal> <operator pos:start="95:25" pos:end="95:26">&amp;&amp;</operator> <name pos:start="95:28" pos:end="95:30">cpu</name> <operator pos:start="95:32" pos:end="95:32">&lt;</operator> <name pos:start="95:34" pos:end="95:46">IRQMP_MAX_CPU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <return pos:start="99:9" pos:end="99:33">return <expr pos:start="99:16" pos:end="99:32"><name pos:start="99:16" pos:end="99:32"><name pos:start="99:16" pos:end="99:20">state</name><operator pos:start="99:21" pos:end="99:22">-&gt;</operator><name pos:start="99:23" pos:end="99:27">force</name><index pos:start="99:28" pos:end="99:32">[<expr pos:start="99:29" pos:end="99:31"><name pos:start="99:29" pos:end="99:31">cpu</name></expr>]</index></name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="105:5" pos:end="105:34">/* extended (not supported) */</comment>

    <if_stmt pos:start="107:5" pos:end="117:5"><if pos:start="107:5" pos:end="117:5">if <condition pos:start="107:8" pos:end="107:57">(<expr pos:start="107:9" pos:end="107:56"><name pos:start="107:9" pos:end="107:12">addr</name> <operator pos:start="107:14" pos:end="107:15">&gt;=</operator> <name pos:start="107:17" pos:end="107:31">EXTENDED_OFFSET</name> <operator pos:start="107:33" pos:end="107:34">&amp;&amp;</operator> <name pos:start="107:36" pos:end="107:39">addr</name> <operator pos:start="107:41" pos:end="107:41">&lt;</operator> <name pos:start="107:43" pos:end="107:56">IRQMP_REG_SIZE</name></expr>)</condition> <block pos:start="107:59" pos:end="117:5">{<block_content pos:start="109:9" pos:end="115:36">

        <decl_stmt pos:start="109:9" pos:end="109:47"><decl pos:start="109:9" pos:end="109:46"><type pos:start="109:9" pos:end="109:11"><name pos:start="109:9" pos:end="109:11">int</name></type> <name pos:start="109:13" pos:end="109:15">cpu</name> <init pos:start="109:17" pos:end="109:46">= <expr pos:start="109:19" pos:end="109:46"><operator pos:start="109:19" pos:end="109:19">(</operator><name pos:start="109:20" pos:end="109:23">addr</name> <operator pos:start="109:25" pos:end="109:25">-</operator> <name pos:start="109:27" pos:end="109:41">EXTENDED_OFFSET</name><operator pos:start="109:42" pos:end="109:42">)</operator> <operator pos:start="109:44" pos:end="109:44">/</operator> <literal type="number" pos:start="109:46" pos:end="109:46">4</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:48"><expr pos:start="111:9" pos:end="111:47"><call pos:start="111:9" pos:end="111:47"><name pos:start="111:9" pos:end="111:14">assert</name><argument_list pos:start="111:15" pos:end="111:47">(<argument pos:start="111:16" pos:end="111:46"><expr pos:start="111:16" pos:end="111:46"><name pos:start="111:16" pos:end="111:18">cpu</name> <operator pos:start="111:20" pos:end="111:21">&gt;=</operator> <literal type="number" pos:start="111:23" pos:end="111:23">0</literal> <operator pos:start="111:25" pos:end="111:26">&amp;&amp;</operator> <name pos:start="111:28" pos:end="111:30">cpu</name> <operator pos:start="111:32" pos:end="111:32">&lt;</operator> <name pos:start="111:34" pos:end="111:46">IRQMP_MAX_CPU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <return pos:start="115:9" pos:end="115:36">return <expr pos:start="115:16" pos:end="115:35"><name pos:start="115:16" pos:end="115:35"><name pos:start="115:16" pos:end="115:20">state</name><operator pos:start="115:21" pos:end="115:22">-&gt;</operator><name pos:start="115:23" pos:end="115:30">extended</name><index pos:start="115:31" pos:end="115:35">[<expr pos:start="115:32" pos:end="115:34"><name pos:start="115:32" pos:end="115:34">cpu</name></expr>]</index></name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="121:5" pos:end="121:42"><expr pos:start="121:5" pos:end="121:41"><call pos:start="121:5" pos:end="121:41"><name pos:start="121:5" pos:end="121:35">trace_grlib_irqmp_readl_unknown</name><argument_list pos:start="121:36" pos:end="121:41">(<argument pos:start="121:37" pos:end="121:40"><expr pos:start="121:37" pos:end="121:40"><name pos:start="121:37" pos:end="121:40">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="123:5" pos:end="123:13">return <expr pos:start="123:12" pos:end="123:12"><literal type="number" pos:start="123:12" pos:end="123:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
