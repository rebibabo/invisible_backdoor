<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3875.c" pos:tabs="8"><function pos:start="1:1" pos:end="313:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:29">ff_dxva2_common_end_frame</name><parameter_list pos:start="1:30" pos:end="11:78">(<parameter pos:start="1:31" pos:end="1:51"><decl pos:start="1:31" pos:end="1:51"><type pos:start="1:31" pos:end="1:51"><name pos:start="1:31" pos:end="1:44">AVCodecContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:51">avctx</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:67"><decl pos:start="1:54" pos:end="1:67"><type pos:start="1:54" pos:end="1:67"><name pos:start="1:54" pos:end="1:60">AVFrame</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:67">frame</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:44"><decl pos:start="3:31" pos:end="3:44"><type pos:start="3:31" pos:end="3:44"><specifier pos:start="3:31" pos:end="3:35">const</specifier> <name pos:start="3:37" pos:end="3:40">void</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:44">pp</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:62"><decl pos:start="3:47" pos:end="3:62"><type pos:start="3:47" pos:end="3:62"><name pos:start="3:47" pos:end="3:54">unsigned</name></type> <name pos:start="3:56" pos:end="3:62">pp_size</name></decl></parameter>,

                              <parameter pos:start="5:31" pos:end="5:44"><decl pos:start="5:31" pos:end="5:44"><type pos:start="5:31" pos:end="5:44"><specifier pos:start="5:31" pos:end="5:35">const</specifier> <name pos:start="5:37" pos:end="5:40">void</name> <modifier pos:start="5:42" pos:end="5:42">*</modifier></type><name pos:start="5:43" pos:end="5:44">qm</name></decl></parameter>, <parameter pos:start="5:47" pos:end="5:62"><decl pos:start="5:47" pos:end="5:62"><type pos:start="5:47" pos:end="5:62"><name pos:start="5:47" pos:end="5:54">unsigned</name></type> <name pos:start="5:56" pos:end="5:62">qm_size</name></decl></parameter>,

                              <parameter pos:start="7:31" pos:end="11:77"><function_decl pos:start="7:31" pos:end="11:77"><type pos:start="7:31" pos:end="7:33"><name pos:start="7:31" pos:end="7:33">int</name></type> (<modifier pos:start="7:36" pos:end="7:36">*</modifier><name pos:start="7:37" pos:end="7:48">commit_bs_si</name>)<parameter_list pos:start="7:50" pos:end="11:77">(<parameter pos:start="7:51" pos:end="7:66"><decl pos:start="7:51" pos:end="7:66"><type pos:start="7:51" pos:end="7:66"><name pos:start="7:51" pos:end="7:64">AVCodecContext</name> <modifier pos:start="7:66" pos:end="7:66">*</modifier></type></decl></parameter>,

                                                  <parameter pos:start="9:51" pos:end="9:73"><decl pos:start="9:51" pos:end="9:73"><type pos:start="9:51" pos:end="9:73"><name pos:start="9:51" pos:end="9:69">DECODER_BUFFER_DESC</name> <modifier pos:start="9:71" pos:end="9:71">*</modifier></type><name pos:start="9:72" pos:end="9:73">bs</name></decl></parameter>,

                                                  <parameter pos:start="11:51" pos:end="11:76"><decl pos:start="11:51" pos:end="11:76"><type pos:start="11:51" pos:end="11:76"><name pos:start="11:51" pos:end="11:69">DECODER_BUFFER_DESC</name> <modifier pos:start="11:71" pos:end="11:71">*</modifier></type><name pos:start="11:72" pos:end="11:76">slice</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="313:1">{<block_content pos:start="15:5" pos:end="311:18">

    <decl_stmt pos:start="15:5" pos:end="15:45"><decl pos:start="15:5" pos:end="15:44"><type pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:17">AVDXVAContext</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:22">ctx</name> <init pos:start="15:24" pos:end="15:44">= <expr pos:start="15:26" pos:end="15:44"><call pos:start="15:26" pos:end="15:44"><name pos:start="15:26" pos:end="15:37">DXVA_CONTEXT</name><argument_list pos:start="15:38" pos:end="15:44">(<argument pos:start="15:39" pos:end="15:43"><expr pos:start="15:39" pos:end="15:43"><name pos:start="15:39" pos:end="15:43">avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="20:0"><decl pos:start="17:5" pos:end="17:43"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">unsigned</name></type>               <name pos:start="17:28" pos:end="17:39">buffer_count</name> <init pos:start="17:41" pos:end="17:43">= <expr pos:start="17:43" pos:end="17:43"><literal type="number" pos:start="17:43" pos:end="17:43">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if pos:start="19:1" pos:end="19:18">#<cpp:directive pos:start="19:2" pos:end="19:3">if</cpp:directive> <expr pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:18">CONFIG_D3D11VA</name></expr></cpp:if>

    <decl_stmt pos:start="21:5" pos:end="26:0"><decl pos:start="21:5" pos:end="21:47"><type pos:start="21:5" pos:end="21:35"><name pos:start="21:5" pos:end="21:35">D3D11_VIDEO_DECODER_BUFFER_DESC</name></type> <name pos:start="21:37" pos:end="21:47"><name pos:start="21:37" pos:end="21:44">buffer11</name><index pos:start="21:45" pos:end="21:47">[<expr pos:start="21:46" pos:end="21:46"><literal type="number" pos:start="21:46" pos:end="21:46">4</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:endif pos:start="23:1" pos:end="23:6">#<cpp:directive pos:start="23:2" pos:end="23:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="25:1" pos:end="25:16">#<cpp:directive pos:start="25:2" pos:end="25:3">if</cpp:directive> <expr pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:16">CONFIG_DXVA2</name></expr></cpp:if>

    <decl_stmt pos:start="27:5" pos:end="30:0"><decl pos:start="27:5" pos:end="27:46"><type pos:start="27:5" pos:end="27:26"><name pos:start="27:5" pos:end="27:26">DXVA2_DecodeBufferDesc</name></type>          <name pos:start="27:37" pos:end="27:46"><name pos:start="27:37" pos:end="27:43">buffer2</name><index pos:start="27:44" pos:end="27:46">[<expr pos:start="27:45" pos:end="27:45"><literal type="number" pos:start="27:45" pos:end="27:45">4</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:endif pos:start="29:1" pos:end="29:6">#<cpp:directive pos:start="29:2" pos:end="29:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="31:5" pos:end="31:73"><decl pos:start="31:5" pos:end="31:50"><type pos:start="31:5" pos:end="31:37"><name pos:start="31:5" pos:end="31:23">DECODER_BUFFER_DESC</name>             <modifier pos:start="31:37" pos:end="31:37">*</modifier></type><name pos:start="31:38" pos:end="31:43">buffer</name> <init pos:start="31:45" pos:end="31:50">= <expr pos:start="31:47" pos:end="31:50"><name pos:start="31:47" pos:end="31:50">NULL</name></expr></init></decl>, <decl pos:start="31:53" pos:end="31:72"><type ref="prev" pos:start="31:5" pos:end="31:37"><modifier pos:start="31:53" pos:end="31:53">*</modifier></type><name pos:start="31:54" pos:end="31:65">buffer_slice</name> <init pos:start="31:67" pos:end="31:72">= <expr pos:start="31:69" pos:end="31:72"><name pos:start="31:69" pos:end="31:72">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:25"><decl pos:start="33:5" pos:end="33:14"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:14">result</name></decl>, <decl pos:start="33:17" pos:end="33:24"><type ref="prev" pos:start="33:5" pos:end="33:7"/><name pos:start="33:17" pos:end="33:20">runs</name> <init pos:start="33:22" pos:end="33:24">= <expr pos:start="33:24" pos:end="33:24"><literal type="number" pos:start="33:24" pos:end="33:24">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:15"><decl pos:start="35:5" pos:end="35:14"><type pos:start="35:5" pos:end="35:11"><name pos:start="35:5" pos:end="35:11">HRESULT</name></type> <name pos:start="35:13" pos:end="35:14">hr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:18"><decl pos:start="37:5" pos:end="37:17"><type pos:start="37:5" pos:end="37:12"><name pos:start="37:5" pos:end="37:12">unsigned</name></type> <name pos:start="37:14" pos:end="37:17">type</name></decl>;</decl_stmt>



    <do pos:start="41:5" pos:end="77:15">do <block pos:start="41:8" pos:end="77:5">{<block_content pos:start="43:9" pos:end="75:24">

        <expr_stmt pos:start="43:9" pos:end="46:0"><expr pos:start="43:9" pos:end="43:28"><call pos:start="43:9" pos:end="43:28"><name pos:start="43:9" pos:end="43:21">ff_dxva2_lock</name><argument_list pos:start="43:22" pos:end="43:28">(<argument pos:start="43:23" pos:end="43:27"><expr pos:start="43:23" pos:end="43:27"><name pos:start="43:23" pos:end="43:27">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="45:1" pos:end="45:18">#<cpp:directive pos:start="45:2" pos:end="45:3">if</cpp:directive> <expr pos:start="45:5" pos:end="45:18"><name pos:start="45:5" pos:end="45:18">CONFIG_D3D11VA</name></expr></cpp:if>

        <if_stmt pos:start="47:9" pos:end="58:0"><if pos:start="47:9" pos:end="58:0">if <condition pos:start="47:12" pos:end="47:37">(<expr pos:start="47:13" pos:end="47:36"><call pos:start="47:13" pos:end="47:36"><name pos:start="47:13" pos:end="47:29">ff_dxva2_is_d3d11</name><argument_list pos:start="47:30" pos:end="47:36">(<argument pos:start="47:31" pos:end="47:35"><expr pos:start="47:31" pos:end="47:35"><name pos:start="47:31" pos:end="47:35">avctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="49:13" pos:end="58:0"><block_content pos:start="49:13" pos:end="58:0">

            <expr_stmt pos:start="49:13" pos:end="58:0"><expr pos:start="49:13" pos:end="53:62"><name pos:start="49:13" pos:end="49:14">hr</name> <operator pos:start="49:16" pos:end="49:16">=</operator> <call pos:start="49:18" pos:end="53:62"><name pos:start="49:18" pos:end="49:53">ID3D11VideoContext_DecoderBeginFrame</name><argument_list pos:start="49:54" pos:end="53:62">(<argument pos:start="49:55" pos:end="49:89"><expr pos:start="49:55" pos:end="49:89"><call pos:start="49:55" pos:end="49:74"><name pos:start="49:55" pos:end="49:69">D3D11VA_CONTEXT</name><argument_list pos:start="49:70" pos:end="49:74">(<argument pos:start="49:71" pos:end="49:73"><expr pos:start="49:71" pos:end="49:73"><name pos:start="49:71" pos:end="49:73">ctx</name></expr></argument>)</argument_list></call><operator pos:start="49:75" pos:end="49:76">-&gt;</operator><name pos:start="49:77" pos:end="49:89">video_context</name></expr></argument>, <argument pos:start="49:92" pos:end="49:120"><expr pos:start="49:92" pos:end="49:120"><call pos:start="49:92" pos:end="49:111"><name pos:start="49:92" pos:end="49:106">D3D11VA_CONTEXT</name><argument_list pos:start="49:107" pos:end="49:111">(<argument pos:start="49:108" pos:end="49:110"><expr pos:start="49:108" pos:end="49:110"><name pos:start="49:108" pos:end="49:110">ctx</name></expr></argument>)</argument_list></call><operator pos:start="49:112" pos:end="49:113">-&gt;</operator><name pos:start="49:114" pos:end="49:120">decoder</name></expr></argument>,

                                                      <argument pos:start="51:55" pos:end="51:72"><expr pos:start="51:55" pos:end="51:72"><call pos:start="51:55" pos:end="51:72"><name pos:start="51:55" pos:end="51:65">get_surface</name><argument_list pos:start="51:66" pos:end="51:72">(<argument pos:start="51:67" pos:end="51:71"><expr pos:start="51:67" pos:end="51:71"><name pos:start="51:67" pos:end="51:71">frame</name></expr></argument>)</argument_list></call></expr></argument>,

                                                      <argument pos:start="53:55" pos:end="53:55"><expr pos:start="53:55" pos:end="53:55"><literal type="number" pos:start="53:55" pos:end="53:55">0</literal></expr></argument>, <argument pos:start="53:58" pos:end="53:61"><expr pos:start="53:58" pos:end="53:61"><name pos:start="53:58" pos:end="53:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="55:1" pos:end="55:6">#<cpp:directive pos:start="55:2" pos:end="55:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="57:1" pos:end="57:16">#<cpp:directive pos:start="57:2" pos:end="57:3">if</cpp:directive> <expr pos:start="57:5" pos:end="57:16"><name pos:start="57:5" pos:end="57:16">CONFIG_DXVA2</name></expr></cpp:if>

        <if_stmt pos:start="59:9" pos:end="68:0"><if pos:start="59:9" pos:end="68:0">if <condition pos:start="59:12" pos:end="59:51">(<expr pos:start="59:13" pos:end="59:50"><name pos:start="59:13" pos:end="59:26"><name pos:start="59:13" pos:end="59:17">avctx</name><operator pos:start="59:18" pos:end="59:19">-&gt;</operator><name pos:start="59:20" pos:end="59:26">pix_fmt</name></name> <operator pos:start="59:28" pos:end="59:29">==</operator> <name pos:start="59:31" pos:end="59:50">AV_PIX_FMT_DXVA2_VLD</name></expr>)</condition><block type="pseudo" pos:start="61:13" pos:end="68:0"><block_content pos:start="61:13" pos:end="68:0">

            <expr_stmt pos:start="61:13" pos:end="68:0"><expr pos:start="61:13" pos:end="65:54"><name pos:start="61:13" pos:end="61:14">hr</name> <operator pos:start="61:16" pos:end="61:16">=</operator> <call pos:start="61:18" pos:end="65:54"><name pos:start="61:18" pos:end="61:48">IDirectXVideoDecoder_BeginFrame</name><argument_list pos:start="61:49" pos:end="65:54">(<argument pos:start="61:50" pos:end="61:76"><expr pos:start="61:50" pos:end="61:76"><call pos:start="61:50" pos:end="61:67"><name pos:start="61:50" pos:end="61:62">DXVA2_CONTEXT</name><argument_list pos:start="61:63" pos:end="61:67">(<argument pos:start="61:64" pos:end="61:66"><expr pos:start="61:64" pos:end="61:66"><name pos:start="61:64" pos:end="61:66">ctx</name></expr></argument>)</argument_list></call><operator pos:start="61:68" pos:end="61:69">-&gt;</operator><name pos:start="61:70" pos:end="61:76">decoder</name></expr></argument>,

                                                 <argument pos:start="63:50" pos:end="63:67"><expr pos:start="63:50" pos:end="63:67"><call pos:start="63:50" pos:end="63:67"><name pos:start="63:50" pos:end="63:60">get_surface</name><argument_list pos:start="63:61" pos:end="63:67">(<argument pos:start="63:62" pos:end="63:66"><expr pos:start="63:62" pos:end="63:66"><name pos:start="63:62" pos:end="63:66">frame</name></expr></argument>)</argument_list></call></expr></argument>,

                                                 <argument pos:start="65:50" pos:end="65:53"><expr pos:start="65:50" pos:end="65:53"><name pos:start="65:50" pos:end="65:53">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="67:1" pos:end="67:6">#<cpp:directive pos:start="67:2" pos:end="67:6">endif</cpp:directive></cpp:endif>

        <if_stmt pos:start="69:9" pos:end="71:18"><if pos:start="69:9" pos:end="71:18">if <condition pos:start="69:12" pos:end="69:43">(<expr pos:start="69:13" pos:end="69:42"><name pos:start="69:13" pos:end="69:14">hr</name> <operator pos:start="69:16" pos:end="69:17">!=</operator> <name pos:start="69:19" pos:end="69:27">E_PENDING</name> <operator pos:start="69:29" pos:end="69:30">||</operator> <operator pos:start="69:32" pos:end="69:33">++</operator><name pos:start="69:34" pos:end="69:37">runs</name> <operator pos:start="69:39" pos:end="69:39">&gt;</operator> <literal type="number" pos:start="69:41" pos:end="69:42">50</literal></expr>)</condition><block type="pseudo" pos:start="71:13" pos:end="71:18"><block_content pos:start="71:13" pos:end="71:18">

            <break pos:start="71:13" pos:end="71:18">break;</break></block_content></block></if></if_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:31"><expr pos:start="73:9" pos:end="73:30"><call pos:start="73:9" pos:end="73:30"><name pos:start="73:9" pos:end="73:23">ff_dxva2_unlock</name><argument_list pos:start="73:24" pos:end="73:30">(<argument pos:start="73:25" pos:end="73:29"><expr pos:start="73:25" pos:end="73:29"><name pos:start="73:25" pos:end="73:29">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:24"><expr pos:start="75:9" pos:end="75:23"><call pos:start="75:9" pos:end="75:23"><name pos:start="75:9" pos:end="75:17">av_usleep</name><argument_list pos:start="75:18" pos:end="75:23">(<argument pos:start="75:19" pos:end="75:22"><expr pos:start="75:19" pos:end="75:22"><literal type="number" pos:start="75:19" pos:end="75:22">2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> while<condition pos:start="77:12" pos:end="77:14">(<expr pos:start="77:13" pos:end="77:13"><literal type="number" pos:start="77:13" pos:end="77:13">1</literal></expr>)</condition>;</do>



    <if_stmt pos:start="81:5" pos:end="94:0"><if pos:start="81:5" pos:end="94:0">if <condition pos:start="81:8" pos:end="81:19">(<expr pos:start="81:9" pos:end="81:18"><call pos:start="81:9" pos:end="81:18"><name pos:start="81:9" pos:end="81:14">FAILED</name><argument_list pos:start="81:15" pos:end="81:18">(<argument pos:start="81:16" pos:end="81:17"><expr pos:start="81:16" pos:end="81:17"><name pos:start="81:16" pos:end="81:17">hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="81:21" pos:end="94:0">{<block_content pos:start="83:9" pos:end="87:18">

        <expr_stmt pos:start="83:9" pos:end="83:73"><expr pos:start="83:9" pos:end="83:72"><call pos:start="83:9" pos:end="83:72"><name pos:start="83:9" pos:end="83:14">av_log</name><argument_list pos:start="83:15" pos:end="83:72">(<argument pos:start="83:16" pos:end="83:20"><expr pos:start="83:16" pos:end="83:20"><name pos:start="83:16" pos:end="83:20">avctx</name></expr></argument>, <argument pos:start="83:23" pos:end="83:34"><expr pos:start="83:23" pos:end="83:34"><name pos:start="83:23" pos:end="83:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="83:37" pos:end="83:67"><expr pos:start="83:37" pos:end="83:67"><literal type="string" pos:start="83:37" pos:end="83:67">"Failed to begin frame: 0x%x\n"</literal></expr></argument>, <argument pos:start="83:70" pos:end="83:71"><expr pos:start="83:70" pos:end="83:71"><name pos:start="83:70" pos:end="83:71">hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:31"><expr pos:start="85:9" pos:end="85:30"><call pos:start="85:9" pos:end="85:30"><name pos:start="85:9" pos:end="85:23">ff_dxva2_unlock</name><argument_list pos:start="85:24" pos:end="85:30">(<argument pos:start="85:25" pos:end="85:29"><expr pos:start="85:25" pos:end="85:29"><name pos:start="85:25" pos:end="85:29">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="87:9" pos:end="87:18">return <expr pos:start="87:16" pos:end="87:17"><operator pos:start="87:16" pos:end="87:16">-</operator><literal type="number" pos:start="87:17" pos:end="87:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



<cpp:if pos:start="93:1" pos:end="93:18">#<cpp:directive pos:start="93:2" pos:end="93:3">if</cpp:directive> <expr pos:start="93:5" pos:end="93:18"><name pos:start="93:5" pos:end="93:18">CONFIG_D3D11VA</name></expr></cpp:if>

    <if_stmt pos:start="95:5" pos:end="106:0"><if pos:start="95:5" pos:end="106:0">if <condition pos:start="95:8" pos:end="95:33">(<expr pos:start="95:9" pos:end="95:32"><call pos:start="95:9" pos:end="95:32"><name pos:start="95:9" pos:end="95:25">ff_dxva2_is_d3d11</name><argument_list pos:start="95:26" pos:end="95:32">(<argument pos:start="95:27" pos:end="95:31"><expr pos:start="95:27" pos:end="95:31"><name pos:start="95:27" pos:end="95:31">avctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="95:35" pos:end="106:0">{<block_content pos:start="97:9" pos:end="99:61">

        <expr_stmt pos:start="97:9" pos:end="97:41"><expr pos:start="97:9" pos:end="97:40"><name pos:start="97:9" pos:end="97:14">buffer</name> <operator pos:start="97:16" pos:end="97:16">=</operator> <operator pos:start="97:18" pos:end="97:18">&amp;</operator><name pos:start="97:19" pos:end="97:40"><name pos:start="97:19" pos:end="97:26">buffer11</name><index pos:start="97:27" pos:end="97:40">[<expr pos:start="97:28" pos:end="97:39"><name pos:start="97:28" pos:end="97:39">buffer_count</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:61"><expr pos:start="99:9" pos:end="99:60"><name pos:start="99:9" pos:end="99:12">type</name> <operator pos:start="99:14" pos:end="99:14">=</operator> <name pos:start="99:16" pos:end="99:60">D3D11_VIDEO_DECODER_BUFFER_PICTURE_PARAMETERS</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="103:1" pos:end="103:6">#<cpp:directive pos:start="103:2" pos:end="103:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="105:1" pos:end="105:16">#<cpp:directive pos:start="105:2" pos:end="105:3">if</cpp:directive> <expr pos:start="105:5" pos:end="105:16"><name pos:start="105:5" pos:end="105:16">CONFIG_DXVA2</name></expr></cpp:if>

    <if_stmt pos:start="107:5" pos:end="116:0"><if pos:start="107:5" pos:end="116:0">if <condition pos:start="107:8" pos:end="107:47">(<expr pos:start="107:9" pos:end="107:46"><name pos:start="107:9" pos:end="107:22"><name pos:start="107:9" pos:end="107:13">avctx</name><operator pos:start="107:14" pos:end="107:15">-&gt;</operator><name pos:start="107:16" pos:end="107:22">pix_fmt</name></name> <operator pos:start="107:24" pos:end="107:25">==</operator> <name pos:start="107:27" pos:end="107:46">AV_PIX_FMT_DXVA2_VLD</name></expr>)</condition> <block pos:start="107:49" pos:end="116:0">{<block_content pos:start="109:9" pos:end="111:49">

        <expr_stmt pos:start="109:9" pos:end="109:40"><expr pos:start="109:9" pos:end="109:39"><name pos:start="109:9" pos:end="109:14">buffer</name> <operator pos:start="109:16" pos:end="109:16">=</operator> <operator pos:start="109:18" pos:end="109:18">&amp;</operator><name pos:start="109:19" pos:end="109:39"><name pos:start="109:19" pos:end="109:25">buffer2</name><index pos:start="109:26" pos:end="109:39">[<expr pos:start="109:27" pos:end="109:38"><name pos:start="109:27" pos:end="109:38">buffer_count</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:49"><expr pos:start="111:9" pos:end="111:48"><name pos:start="111:9" pos:end="111:12">type</name> <operator pos:start="111:14" pos:end="111:14">=</operator> <name pos:start="111:16" pos:end="111:48">DXVA2_PictureParametersBufferType</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="115:1" pos:end="115:6">#<cpp:directive pos:start="115:2" pos:end="115:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="117:5" pos:end="121:52"><expr pos:start="117:5" pos:end="121:51"><name pos:start="117:5" pos:end="117:10">result</name> <operator pos:start="117:12" pos:end="117:12">=</operator> <call pos:start="117:14" pos:end="121:51"><name pos:start="117:14" pos:end="117:35">ff_dxva2_commit_buffer</name><argument_list pos:start="117:36" pos:end="121:51">(<argument pos:start="117:37" pos:end="117:41"><expr pos:start="117:37" pos:end="117:41"><name pos:start="117:37" pos:end="117:41">avctx</name></expr></argument>, <argument pos:start="117:44" pos:end="117:46"><expr pos:start="117:44" pos:end="117:46"><name pos:start="117:44" pos:end="117:46">ctx</name></expr></argument>, <argument pos:start="117:49" pos:end="117:54"><expr pos:start="117:49" pos:end="117:54"><name pos:start="117:49" pos:end="117:54">buffer</name></expr></argument>,

                                    <argument pos:start="119:37" pos:end="119:40"><expr pos:start="119:37" pos:end="119:40"><name pos:start="119:37" pos:end="119:40">type</name></expr></argument>,

                                    <argument pos:start="121:37" pos:end="121:38"><expr pos:start="121:37" pos:end="121:38"><name pos:start="121:37" pos:end="121:38">pp</name></expr></argument>, <argument pos:start="121:41" pos:end="121:47"><expr pos:start="121:41" pos:end="121:47"><name pos:start="121:41" pos:end="121:47">pp_size</name></expr></argument>, <argument pos:start="121:50" pos:end="121:50"><expr pos:start="121:50" pos:end="121:50"><literal type="number" pos:start="121:50" pos:end="121:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="123:5" pos:end="131:5"><if pos:start="123:5" pos:end="131:5">if <condition pos:start="123:8" pos:end="123:15">(<expr pos:start="123:9" pos:end="123:14"><name pos:start="123:9" pos:end="123:14">result</name></expr>)</condition> <block pos:start="123:17" pos:end="131:5">{<block_content pos:start="125:9" pos:end="129:17">

        <expr_stmt pos:start="125:9" pos:end="127:59"><expr pos:start="125:9" pos:end="127:58"><call pos:start="125:9" pos:end="127:58"><name pos:start="125:9" pos:end="125:14">av_log</name><argument_list pos:start="125:15" pos:end="127:58">(<argument pos:start="125:16" pos:end="125:20"><expr pos:start="125:16" pos:end="125:20"><name pos:start="125:16" pos:end="125:20">avctx</name></expr></argument>, <argument pos:start="125:23" pos:end="125:34"><expr pos:start="125:23" pos:end="125:34"><name pos:start="125:23" pos:end="125:34">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="127:16" pos:end="127:57"><expr pos:start="127:16" pos:end="127:57"><literal type="string" pos:start="127:16" pos:end="127:57">"Failed to add picture parameter buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="129:9" pos:end="129:17">goto <name pos:start="129:14" pos:end="129:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:19"><expr pos:start="133:5" pos:end="133:18"><name pos:start="133:5" pos:end="133:16">buffer_count</name><operator pos:start="133:17" pos:end="133:18">++</operator></expr>;</expr_stmt>



    <if_stmt pos:start="137:5" pos:end="186:0"><if pos:start="137:5" pos:end="186:0">if <condition pos:start="137:8" pos:end="137:20">(<expr pos:start="137:9" pos:end="137:19"><name pos:start="137:9" pos:end="137:15">qm_size</name> <operator pos:start="137:17" pos:end="137:17">&gt;</operator> <literal type="number" pos:start="137:19" pos:end="137:19">0</literal></expr>)</condition> <block pos:start="137:22" pos:end="186:0">{<block_content pos:start="141:9" pos:end="179:23">

<cpp:if pos:start="139:1" pos:end="139:18">#<cpp:directive pos:start="139:2" pos:end="139:3">if</cpp:directive> <expr pos:start="139:5" pos:end="139:18"><name pos:start="139:5" pos:end="139:18">CONFIG_D3D11VA</name></expr></cpp:if>

        <if_stmt pos:start="141:9" pos:end="152:0"><if pos:start="141:9" pos:end="152:0">if <condition pos:start="141:12" pos:end="141:37">(<expr pos:start="141:13" pos:end="141:36"><call pos:start="141:13" pos:end="141:36"><name pos:start="141:13" pos:end="141:29">ff_dxva2_is_d3d11</name><argument_list pos:start="141:30" pos:end="141:36">(<argument pos:start="141:31" pos:end="141:35"><expr pos:start="141:31" pos:end="141:35"><name pos:start="141:31" pos:end="141:35">avctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="141:39" pos:end="152:0">{<block_content pos:start="143:13" pos:end="145:74">

            <expr_stmt pos:start="143:13" pos:end="143:45"><expr pos:start="143:13" pos:end="143:44"><name pos:start="143:13" pos:end="143:18">buffer</name> <operator pos:start="143:20" pos:end="143:20">=</operator> <operator pos:start="143:22" pos:end="143:22">&amp;</operator><name pos:start="143:23" pos:end="143:44"><name pos:start="143:23" pos:end="143:30">buffer11</name><index pos:start="143:31" pos:end="143:44">[<expr pos:start="143:32" pos:end="143:43"><name pos:start="143:32" pos:end="143:43">buffer_count</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:74"><expr pos:start="145:13" pos:end="145:73"><name pos:start="145:13" pos:end="145:16">type</name> <operator pos:start="145:18" pos:end="145:18">=</operator> <name pos:start="145:20" pos:end="145:73">D3D11_VIDEO_DECODER_BUFFER_INVERSE_QUANTIZATION_MATRIX</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="149:1" pos:end="149:6">#<cpp:directive pos:start="149:2" pos:end="149:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="151:1" pos:end="151:16">#<cpp:directive pos:start="151:2" pos:end="151:3">if</cpp:directive> <expr pos:start="151:5" pos:end="151:16"><name pos:start="151:5" pos:end="151:16">CONFIG_DXVA2</name></expr></cpp:if>

        <if_stmt pos:start="153:9" pos:end="162:0"><if pos:start="153:9" pos:end="162:0">if <condition pos:start="153:12" pos:end="153:51">(<expr pos:start="153:13" pos:end="153:50"><name pos:start="153:13" pos:end="153:26"><name pos:start="153:13" pos:end="153:17">avctx</name><operator pos:start="153:18" pos:end="153:19">-&gt;</operator><name pos:start="153:20" pos:end="153:26">pix_fmt</name></name> <operator pos:start="153:28" pos:end="153:29">==</operator> <name pos:start="153:31" pos:end="153:50">AV_PIX_FMT_DXVA2_VLD</name></expr>)</condition> <block pos:start="153:53" pos:end="162:0">{<block_content pos:start="155:13" pos:end="157:61">

            <expr_stmt pos:start="155:13" pos:end="155:44"><expr pos:start="155:13" pos:end="155:43"><name pos:start="155:13" pos:end="155:18">buffer</name> <operator pos:start="155:20" pos:end="155:20">=</operator> <operator pos:start="155:22" pos:end="155:22">&amp;</operator><name pos:start="155:23" pos:end="155:43"><name pos:start="155:23" pos:end="155:29">buffer2</name><index pos:start="155:30" pos:end="155:43">[<expr pos:start="155:31" pos:end="155:42"><name pos:start="155:31" pos:end="155:42">buffer_count</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="157:13" pos:end="157:61"><expr pos:start="157:13" pos:end="157:60"><name pos:start="157:13" pos:end="157:16">type</name> <operator pos:start="157:18" pos:end="157:18">=</operator> <name pos:start="157:20" pos:end="157:60">DXVA2_InverseQuantizationMatrixBufferType</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="161:1" pos:end="161:6">#<cpp:directive pos:start="161:2" pos:end="161:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="163:9" pos:end="167:56"><expr pos:start="163:9" pos:end="167:55"><name pos:start="163:9" pos:end="163:14">result</name> <operator pos:start="163:16" pos:end="163:16">=</operator> <call pos:start="163:18" pos:end="167:55"><name pos:start="163:18" pos:end="163:39">ff_dxva2_commit_buffer</name><argument_list pos:start="163:40" pos:end="167:55">(<argument pos:start="163:41" pos:end="163:45"><expr pos:start="163:41" pos:end="163:45"><name pos:start="163:41" pos:end="163:45">avctx</name></expr></argument>, <argument pos:start="163:48" pos:end="163:50"><expr pos:start="163:48" pos:end="163:50"><name pos:start="163:48" pos:end="163:50">ctx</name></expr></argument>, <argument pos:start="163:53" pos:end="163:58"><expr pos:start="163:53" pos:end="163:58"><name pos:start="163:53" pos:end="163:58">buffer</name></expr></argument>,

                                        <argument pos:start="165:41" pos:end="165:44"><expr pos:start="165:41" pos:end="165:44"><name pos:start="165:41" pos:end="165:44">type</name></expr></argument>,

                                        <argument pos:start="167:41" pos:end="167:42"><expr pos:start="167:41" pos:end="167:42"><name pos:start="167:41" pos:end="167:42">qm</name></expr></argument>, <argument pos:start="167:45" pos:end="167:51"><expr pos:start="167:45" pos:end="167:51"><name pos:start="167:45" pos:end="167:51">qm_size</name></expr></argument>, <argument pos:start="167:54" pos:end="167:54"><expr pos:start="167:54" pos:end="167:54"><literal type="number" pos:start="167:54" pos:end="167:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="169:9" pos:end="177:9"><if pos:start="169:9" pos:end="177:9">if <condition pos:start="169:12" pos:end="169:19">(<expr pos:start="169:13" pos:end="169:18"><name pos:start="169:13" pos:end="169:18">result</name></expr>)</condition> <block pos:start="169:21" pos:end="177:9">{<block_content pos:start="171:13" pos:end="175:21">

            <expr_stmt pos:start="171:13" pos:end="173:73"><expr pos:start="171:13" pos:end="173:72"><call pos:start="171:13" pos:end="173:72"><name pos:start="171:13" pos:end="171:18">av_log</name><argument_list pos:start="171:19" pos:end="173:72">(<argument pos:start="171:20" pos:end="171:24"><expr pos:start="171:20" pos:end="171:24"><name pos:start="171:20" pos:end="171:24">avctx</name></expr></argument>, <argument pos:start="171:27" pos:end="171:38"><expr pos:start="171:27" pos:end="171:38"><name pos:start="171:27" pos:end="171:38">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="173:20" pos:end="173:71"><expr pos:start="173:20" pos:end="173:71"><literal type="string" pos:start="173:20" pos:end="173:71">"Failed to add inverse quantization matrix buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="175:13" pos:end="175:21">goto <name pos:start="175:18" pos:end="175:20">end</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:23"><expr pos:start="179:9" pos:end="179:22"><name pos:start="179:9" pos:end="179:20">buffer_count</name><operator pos:start="179:21" pos:end="179:22">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:if pos:start="185:1" pos:end="185:18">#<cpp:directive pos:start="185:2" pos:end="185:3">if</cpp:directive> <expr pos:start="185:5" pos:end="185:18"><name pos:start="185:5" pos:end="185:18">CONFIG_D3D11VA</name></expr></cpp:if>

    <if_stmt pos:start="187:5" pos:end="198:0"><if pos:start="187:5" pos:end="198:0">if <condition pos:start="187:8" pos:end="187:33">(<expr pos:start="187:9" pos:end="187:32"><call pos:start="187:9" pos:end="187:32"><name pos:start="187:9" pos:end="187:25">ff_dxva2_is_d3d11</name><argument_list pos:start="187:26" pos:end="187:32">(<argument pos:start="187:27" pos:end="187:31"><expr pos:start="187:27" pos:end="187:31"><name pos:start="187:27" pos:end="187:31">avctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="187:35" pos:end="198:0">{<block_content pos:start="189:9" pos:end="191:51">

        <expr_stmt pos:start="189:9" pos:end="189:51"><expr pos:start="189:9" pos:end="189:50"><name pos:start="189:9" pos:end="189:14">buffer</name>       <operator pos:start="189:22" pos:end="189:22">=</operator> <operator pos:start="189:24" pos:end="189:24">&amp;</operator><name pos:start="189:25" pos:end="189:50"><name pos:start="189:25" pos:end="189:32">buffer11</name><index pos:start="189:33" pos:end="189:50">[<expr pos:start="189:34" pos:end="189:49"><name pos:start="189:34" pos:end="189:45">buffer_count</name> <operator pos:start="189:47" pos:end="189:47">+</operator> <literal type="number" pos:start="189:49" pos:end="189:49">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="191:9" pos:end="191:51"><expr pos:start="191:9" pos:end="191:50"><name pos:start="191:9" pos:end="191:20">buffer_slice</name> <operator pos:start="191:22" pos:end="191:22">=</operator> <operator pos:start="191:24" pos:end="191:24">&amp;</operator><name pos:start="191:25" pos:end="191:50"><name pos:start="191:25" pos:end="191:32">buffer11</name><index pos:start="191:33" pos:end="191:50">[<expr pos:start="191:34" pos:end="191:49"><name pos:start="191:34" pos:end="191:45">buffer_count</name> <operator pos:start="191:47" pos:end="191:47">+</operator> <literal type="number" pos:start="191:49" pos:end="191:49">1</literal></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="195:1" pos:end="195:6">#<cpp:directive pos:start="195:2" pos:end="195:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="197:1" pos:end="197:16">#<cpp:directive pos:start="197:2" pos:end="197:3">if</cpp:directive> <expr pos:start="197:5" pos:end="197:16"><name pos:start="197:5" pos:end="197:16">CONFIG_DXVA2</name></expr></cpp:if>

    <if_stmt pos:start="199:5" pos:end="208:0"><if pos:start="199:5" pos:end="208:0">if <condition pos:start="199:8" pos:end="199:47">(<expr pos:start="199:9" pos:end="199:46"><name pos:start="199:9" pos:end="199:22"><name pos:start="199:9" pos:end="199:13">avctx</name><operator pos:start="199:14" pos:end="199:15">-&gt;</operator><name pos:start="199:16" pos:end="199:22">pix_fmt</name></name> <operator pos:start="199:24" pos:end="199:25">==</operator> <name pos:start="199:27" pos:end="199:46">AV_PIX_FMT_DXVA2_VLD</name></expr>)</condition> <block pos:start="199:49" pos:end="208:0">{<block_content pos:start="201:9" pos:end="203:50">

        <expr_stmt pos:start="201:9" pos:end="201:50"><expr pos:start="201:9" pos:end="201:49"><name pos:start="201:9" pos:end="201:14">buffer</name>       <operator pos:start="201:22" pos:end="201:22">=</operator> <operator pos:start="201:24" pos:end="201:24">&amp;</operator><name pos:start="201:25" pos:end="201:49"><name pos:start="201:25" pos:end="201:31">buffer2</name><index pos:start="201:32" pos:end="201:49">[<expr pos:start="201:33" pos:end="201:48"><name pos:start="201:33" pos:end="201:44">buffer_count</name> <operator pos:start="201:46" pos:end="201:46">+</operator> <literal type="number" pos:start="201:48" pos:end="201:48">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="203:9" pos:end="203:50"><expr pos:start="203:9" pos:end="203:49"><name pos:start="203:9" pos:end="203:20">buffer_slice</name> <operator pos:start="203:22" pos:end="203:22">=</operator> <operator pos:start="203:24" pos:end="203:24">&amp;</operator><name pos:start="203:25" pos:end="203:49"><name pos:start="203:25" pos:end="203:31">buffer2</name><index pos:start="203:32" pos:end="203:49">[<expr pos:start="203:33" pos:end="203:48"><name pos:start="203:33" pos:end="203:44">buffer_count</name> <operator pos:start="203:46" pos:end="203:46">+</operator> <literal type="number" pos:start="203:48" pos:end="203:48">1</literal></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="207:1" pos:end="207:6">#<cpp:directive pos:start="207:2" pos:end="207:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="211:5" pos:end="215:40"><expr pos:start="211:5" pos:end="215:39"><name pos:start="211:5" pos:end="211:10">result</name> <operator pos:start="211:12" pos:end="211:12">=</operator> <call pos:start="211:14" pos:end="215:39"><name pos:start="211:14" pos:end="211:25">commit_bs_si</name><argument_list pos:start="211:26" pos:end="215:39">(<argument pos:start="211:27" pos:end="211:31"><expr pos:start="211:27" pos:end="211:31"><name pos:start="211:27" pos:end="211:31">avctx</name></expr></argument>,

                          <argument pos:start="213:27" pos:end="213:32"><expr pos:start="213:27" pos:end="213:32"><name pos:start="213:27" pos:end="213:32">buffer</name></expr></argument>,

                          <argument pos:start="215:27" pos:end="215:38"><expr pos:start="215:27" pos:end="215:38"><name pos:start="215:27" pos:end="215:38">buffer_slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="217:5" pos:end="225:5"><if pos:start="217:5" pos:end="225:5">if <condition pos:start="217:8" pos:end="217:15">(<expr pos:start="217:9" pos:end="217:14"><name pos:start="217:9" pos:end="217:14">result</name></expr>)</condition> <block pos:start="217:17" pos:end="225:5">{<block_content pos:start="219:9" pos:end="223:17">

        <expr_stmt pos:start="219:9" pos:end="221:68"><expr pos:start="219:9" pos:end="221:67"><call pos:start="219:9" pos:end="221:67"><name pos:start="219:9" pos:end="219:14">av_log</name><argument_list pos:start="219:15" pos:end="221:67">(<argument pos:start="219:16" pos:end="219:20"><expr pos:start="219:16" pos:end="219:20"><name pos:start="219:16" pos:end="219:20">avctx</name></expr></argument>, <argument pos:start="219:23" pos:end="219:34"><expr pos:start="219:23" pos:end="219:34"><name pos:start="219:23" pos:end="219:34">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="221:16" pos:end="221:66"><expr pos:start="221:16" pos:end="221:66"><literal type="string" pos:start="221:16" pos:end="221:66">"Failed to add bitstream or slice control buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="223:9" pos:end="223:17">goto <name pos:start="223:14" pos:end="223:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="227:5" pos:end="227:22"><expr pos:start="227:5" pos:end="227:21"><name pos:start="227:5" pos:end="227:16">buffer_count</name> <operator pos:start="227:18" pos:end="227:19">+=</operator> <literal type="number" pos:start="227:21" pos:end="227:21">2</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="231:5" pos:end="231:39">/* TODO Film Grain when possible */</comment>



    <expr_stmt pos:start="235:5" pos:end="240:0"><expr pos:start="235:5" pos:end="235:49"><call pos:start="235:5" pos:end="235:49"><name pos:start="235:5" pos:end="235:10">assert</name><argument_list pos:start="235:11" pos:end="235:49">(<argument pos:start="235:12" pos:end="235:48"><expr pos:start="235:12" pos:end="235:48"><name pos:start="235:12" pos:end="235:23">buffer_count</name> <operator pos:start="235:25" pos:end="235:26">==</operator> <literal type="number" pos:start="235:28" pos:end="235:30">1</literal> <operator pos:start="235:30" pos:end="235:30">+</operator> <operator pos:start="235:32" pos:end="235:32">(</operator><name pos:start="235:33" pos:end="235:39">qm_size</name> <operator pos:start="235:41" pos:end="235:41">&gt;</operator> <literal type="number" pos:start="235:43" pos:end="235:43">0</literal><operator pos:start="235:44" pos:end="235:44">)</operator> <operator pos:start="235:46" pos:end="235:46">+</operator> <literal type="number" pos:start="235:48" pos:end="235:48">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:if pos:start="239:1" pos:end="239:18">#<cpp:directive pos:start="239:2" pos:end="239:3">if</cpp:directive> <expr pos:start="239:5" pos:end="239:18"><name pos:start="239:5" pos:end="239:18">CONFIG_D3D11VA</name></expr></cpp:if>

    <if_stmt pos:start="241:5" pos:end="252:0"><if pos:start="241:5" pos:end="252:0">if <condition pos:start="241:8" pos:end="241:33">(<expr pos:start="241:9" pos:end="241:32"><call pos:start="241:9" pos:end="241:32"><name pos:start="241:9" pos:end="241:25">ff_dxva2_is_d3d11</name><argument_list pos:start="241:26" pos:end="241:32">(<argument pos:start="241:27" pos:end="241:31"><expr pos:start="241:27" pos:end="241:31"><name pos:start="241:27" pos:end="241:31">avctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="243:9" pos:end="252:0"><block_content pos:start="243:9" pos:end="252:0">

        <expr_stmt pos:start="243:9" pos:end="252:0"><expr pos:start="243:9" pos:end="247:76"><name pos:start="243:9" pos:end="243:10">hr</name> <operator pos:start="243:12" pos:end="243:12">=</operator> <call pos:start="243:14" pos:end="247:76"><name pos:start="243:14" pos:end="243:52">ID3D11VideoContext_SubmitDecoderBuffers</name><argument_list pos:start="243:53" pos:end="247:76">(<argument pos:start="243:54" pos:end="243:88"><expr pos:start="243:54" pos:end="243:88"><call pos:start="243:54" pos:end="243:73"><name pos:start="243:54" pos:end="243:68">D3D11VA_CONTEXT</name><argument_list pos:start="243:69" pos:end="243:73">(<argument pos:start="243:70" pos:end="243:72"><expr pos:start="243:70" pos:end="243:72"><name pos:start="243:70" pos:end="243:72">ctx</name></expr></argument>)</argument_list></call><operator pos:start="243:74" pos:end="243:75">-&gt;</operator><name pos:start="243:76" pos:end="243:88">video_context</name></expr></argument>,

                                                     <argument pos:start="245:54" pos:end="245:82"><expr pos:start="245:54" pos:end="245:82"><call pos:start="245:54" pos:end="245:73"><name pos:start="245:54" pos:end="245:68">D3D11VA_CONTEXT</name><argument_list pos:start="245:69" pos:end="245:73">(<argument pos:start="245:70" pos:end="245:72"><expr pos:start="245:70" pos:end="245:72"><name pos:start="245:70" pos:end="245:72">ctx</name></expr></argument>)</argument_list></call><operator pos:start="245:74" pos:end="245:75">-&gt;</operator><name pos:start="245:76" pos:end="245:82">decoder</name></expr></argument>,

                                                     <argument pos:start="247:54" pos:end="247:65"><expr pos:start="247:54" pos:end="247:65"><name pos:start="247:54" pos:end="247:65">buffer_count</name></expr></argument>, <argument pos:start="247:68" pos:end="247:75"><expr pos:start="247:68" pos:end="247:75"><name pos:start="247:68" pos:end="247:75">buffer11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="249:1" pos:end="249:6">#<cpp:directive pos:start="249:2" pos:end="249:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="251:1" pos:end="251:16">#<cpp:directive pos:start="251:2" pos:end="251:3">if</cpp:directive> <expr pos:start="251:5" pos:end="251:16"><name pos:start="251:5" pos:end="251:16">CONFIG_DXVA2</name></expr></cpp:if>

    <if_stmt pos:start="253:5" pos:end="270:0"><if pos:start="253:5" pos:end="270:0">if <condition pos:start="253:8" pos:end="253:47">(<expr pos:start="253:9" pos:end="253:46"><name pos:start="253:9" pos:end="253:22"><name pos:start="253:9" pos:end="253:13">avctx</name><operator pos:start="253:14" pos:end="253:15">-&gt;</operator><name pos:start="253:16" pos:end="253:22">pix_fmt</name></name> <operator pos:start="253:24" pos:end="253:25">==</operator> <name pos:start="253:27" pos:end="253:46">AV_PIX_FMT_DXVA2_VLD</name></expr>)</condition> <block pos:start="253:49" pos:end="270:0">{<block_content pos:start="255:9" pos:end="265:78">

        <decl_stmt pos:start="255:9" pos:end="263:10"><decl pos:start="255:9" pos:end="263:9"><type pos:start="255:9" pos:end="255:33"><name pos:start="255:9" pos:end="255:33">DXVA2_DecodeExecuteParams</name></type> <name pos:start="255:35" pos:end="255:38">exec</name> <init pos:start="255:40" pos:end="263:9">= <expr pos:start="255:42" pos:end="263:9"><block pos:start="255:42" pos:end="263:9">{

            <expr pos:start="257:13" pos:end="257:46"><operator pos:start="257:13" pos:end="257:13">.</operator><name pos:start="257:14" pos:end="257:27">NumCompBuffers</name>     <operator pos:start="257:33" pos:end="257:33">=</operator> <name pos:start="257:35" pos:end="257:46">buffer_count</name></expr>,

            <expr pos:start="259:13" pos:end="259:41"><operator pos:start="259:13" pos:end="259:13">.</operator><name pos:start="259:14" pos:end="259:31">pCompressedBuffers</name> <operator pos:start="259:33" pos:end="259:33">=</operator> <name pos:start="259:35" pos:end="259:41">buffer2</name></expr>,

            <expr pos:start="261:13" pos:end="261:38"><operator pos:start="261:13" pos:end="261:13">.</operator><name pos:start="261:14" pos:end="261:27">pExtensionData</name>     <operator pos:start="261:33" pos:end="261:33">=</operator> <name pos:start="261:35" pos:end="261:38">NULL</name></expr>,

        }</block></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="265:9" pos:end="265:78"><expr pos:start="265:9" pos:end="265:77"><name pos:start="265:9" pos:end="265:10">hr</name> <operator pos:start="265:12" pos:end="265:12">=</operator> <call pos:start="265:14" pos:end="265:77"><name pos:start="265:14" pos:end="265:41">IDirectXVideoDecoder_Execute</name><argument_list pos:start="265:42" pos:end="265:77">(<argument pos:start="265:43" pos:end="265:69"><expr pos:start="265:43" pos:end="265:69"><call pos:start="265:43" pos:end="265:60"><name pos:start="265:43" pos:end="265:55">DXVA2_CONTEXT</name><argument_list pos:start="265:56" pos:end="265:60">(<argument pos:start="265:57" pos:end="265:59"><expr pos:start="265:57" pos:end="265:59"><name pos:start="265:57" pos:end="265:59">ctx</name></expr></argument>)</argument_list></call><operator pos:start="265:61" pos:end="265:62">-&gt;</operator><name pos:start="265:63" pos:end="265:69">decoder</name></expr></argument>, <argument pos:start="265:72" pos:end="265:76"><expr pos:start="265:72" pos:end="265:76"><operator pos:start="265:72" pos:end="265:72">&amp;</operator><name pos:start="265:73" pos:end="265:76">exec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="269:1" pos:end="269:6">#<cpp:directive pos:start="269:2" pos:end="269:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="271:5" pos:end="277:5"><if pos:start="271:5" pos:end="277:5">if <condition pos:start="271:8" pos:end="271:19">(<expr pos:start="271:9" pos:end="271:18"><call pos:start="271:9" pos:end="271:18"><name pos:start="271:9" pos:end="271:14">FAILED</name><argument_list pos:start="271:15" pos:end="271:18">(<argument pos:start="271:16" pos:end="271:17"><expr pos:start="271:16" pos:end="271:17"><name pos:start="271:16" pos:end="271:17">hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="271:21" pos:end="277:5">{<block_content pos:start="273:9" pos:end="275:20">

        <expr_stmt pos:start="273:9" pos:end="273:69"><expr pos:start="273:9" pos:end="273:68"><call pos:start="273:9" pos:end="273:68"><name pos:start="273:9" pos:end="273:14">av_log</name><argument_list pos:start="273:15" pos:end="273:68">(<argument pos:start="273:16" pos:end="273:20"><expr pos:start="273:16" pos:end="273:20"><name pos:start="273:16" pos:end="273:20">avctx</name></expr></argument>, <argument pos:start="273:23" pos:end="273:34"><expr pos:start="273:23" pos:end="273:34"><name pos:start="273:23" pos:end="273:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="273:37" pos:end="273:63"><expr pos:start="273:37" pos:end="273:63"><literal type="string" pos:start="273:37" pos:end="273:63">"Failed to execute: 0x%x\n"</literal></expr></argument>, <argument pos:start="273:66" pos:end="273:67"><expr pos:start="273:66" pos:end="273:67"><name pos:start="273:66" pos:end="273:67">hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="275:9" pos:end="275:20"><expr pos:start="275:9" pos:end="275:19"><name pos:start="275:9" pos:end="275:14">result</name> <operator pos:start="275:16" pos:end="275:16">=</operator> <operator pos:start="275:18" pos:end="275:18">-</operator><literal type="number" pos:start="275:19" pos:end="275:19">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="281:1" pos:end="284:0"><name pos:start="281:1" pos:end="281:3">end</name>:</label>

<cpp:if pos:start="283:1" pos:end="283:18">#<cpp:directive pos:start="283:2" pos:end="283:3">if</cpp:directive> <expr pos:start="283:5" pos:end="283:18"><name pos:start="283:5" pos:end="283:18">CONFIG_D3D11VA</name></expr></cpp:if>

    <if_stmt pos:start="285:5" pos:end="292:0"><if pos:start="285:5" pos:end="292:0">if <condition pos:start="285:8" pos:end="285:33">(<expr pos:start="285:9" pos:end="285:32"><call pos:start="285:9" pos:end="285:32"><name pos:start="285:9" pos:end="285:25">ff_dxva2_is_d3d11</name><argument_list pos:start="285:26" pos:end="285:32">(<argument pos:start="285:27" pos:end="285:31"><expr pos:start="285:27" pos:end="285:31"><name pos:start="285:27" pos:end="285:31">avctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="287:9" pos:end="292:0"><block_content pos:start="287:9" pos:end="292:0">

        <expr_stmt pos:start="287:9" pos:end="292:0"><expr pos:start="287:9" pos:end="287:115"><name pos:start="287:9" pos:end="287:10">hr</name> <operator pos:start="287:12" pos:end="287:12">=</operator> <call pos:start="287:14" pos:end="287:115"><name pos:start="287:14" pos:end="287:47">ID3D11VideoContext_DecoderEndFrame</name><argument_list pos:start="287:48" pos:end="287:115">(<argument pos:start="287:49" pos:end="287:83"><expr pos:start="287:49" pos:end="287:83"><call pos:start="287:49" pos:end="287:68"><name pos:start="287:49" pos:end="287:63">D3D11VA_CONTEXT</name><argument_list pos:start="287:64" pos:end="287:68">(<argument pos:start="287:65" pos:end="287:67"><expr pos:start="287:65" pos:end="287:67"><name pos:start="287:65" pos:end="287:67">ctx</name></expr></argument>)</argument_list></call><operator pos:start="287:69" pos:end="287:70">-&gt;</operator><name pos:start="287:71" pos:end="287:83">video_context</name></expr></argument>, <argument pos:start="287:86" pos:end="287:114"><expr pos:start="287:86" pos:end="287:114"><call pos:start="287:86" pos:end="287:105"><name pos:start="287:86" pos:end="287:100">D3D11VA_CONTEXT</name><argument_list pos:start="287:101" pos:end="287:105">(<argument pos:start="287:102" pos:end="287:104"><expr pos:start="287:102" pos:end="287:104"><name pos:start="287:102" pos:end="287:104">ctx</name></expr></argument>)</argument_list></call><operator pos:start="287:106" pos:end="287:107">-&gt;</operator><name pos:start="287:108" pos:end="287:114">decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="289:1" pos:end="289:6">#<cpp:directive pos:start="289:2" pos:end="289:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="291:1" pos:end="291:16">#<cpp:directive pos:start="291:2" pos:end="291:3">if</cpp:directive> <expr pos:start="291:5" pos:end="291:16"><name pos:start="291:5" pos:end="291:16">CONFIG_DXVA2</name></expr></cpp:if>

    <if_stmt pos:start="293:5" pos:end="298:0"><if pos:start="293:5" pos:end="298:0">if <condition pos:start="293:8" pos:end="293:47">(<expr pos:start="293:9" pos:end="293:46"><name pos:start="293:9" pos:end="293:22"><name pos:start="293:9" pos:end="293:13">avctx</name><operator pos:start="293:14" pos:end="293:15">-&gt;</operator><name pos:start="293:16" pos:end="293:22">pix_fmt</name></name> <operator pos:start="293:24" pos:end="293:25">==</operator> <name pos:start="293:27" pos:end="293:46">AV_PIX_FMT_DXVA2_VLD</name></expr>)</condition><block type="pseudo" pos:start="295:9" pos:end="298:0"><block_content pos:start="295:9" pos:end="298:0">

        <expr_stmt pos:start="295:9" pos:end="298:0"><expr pos:start="295:9" pos:end="295:77"><name pos:start="295:9" pos:end="295:10">hr</name> <operator pos:start="295:12" pos:end="295:12">=</operator> <call pos:start="295:14" pos:end="295:77"><name pos:start="295:14" pos:end="295:42">IDirectXVideoDecoder_EndFrame</name><argument_list pos:start="295:43" pos:end="295:77">(<argument pos:start="295:44" pos:end="295:70"><expr pos:start="295:44" pos:end="295:70"><call pos:start="295:44" pos:end="295:61"><name pos:start="295:44" pos:end="295:56">DXVA2_CONTEXT</name><argument_list pos:start="295:57" pos:end="295:61">(<argument pos:start="295:58" pos:end="295:60"><expr pos:start="295:58" pos:end="295:60"><name pos:start="295:58" pos:end="295:60">ctx</name></expr></argument>)</argument_list></call><operator pos:start="295:62" pos:end="295:63">-&gt;</operator><name pos:start="295:64" pos:end="295:70">decoder</name></expr></argument>, <argument pos:start="295:73" pos:end="295:76"><expr pos:start="295:73" pos:end="295:76"><name pos:start="295:73" pos:end="295:76">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="297:1" pos:end="297:6">#<cpp:directive pos:start="297:2" pos:end="297:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="299:5" pos:end="299:27"><expr pos:start="299:5" pos:end="299:26"><call pos:start="299:5" pos:end="299:26"><name pos:start="299:5" pos:end="299:19">ff_dxva2_unlock</name><argument_list pos:start="299:20" pos:end="299:26">(<argument pos:start="299:21" pos:end="299:25"><expr pos:start="299:21" pos:end="299:25"><name pos:start="299:21" pos:end="299:25">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="301:5" pos:end="307:5"><if pos:start="301:5" pos:end="307:5">if <condition pos:start="301:8" pos:end="301:19">(<expr pos:start="301:9" pos:end="301:18"><call pos:start="301:9" pos:end="301:18"><name pos:start="301:9" pos:end="301:14">FAILED</name><argument_list pos:start="301:15" pos:end="301:18">(<argument pos:start="301:16" pos:end="301:17"><expr pos:start="301:16" pos:end="301:17"><name pos:start="301:16" pos:end="301:17">hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="301:21" pos:end="307:5">{<block_content pos:start="303:9" pos:end="305:20">

        <expr_stmt pos:start="303:9" pos:end="303:71"><expr pos:start="303:9" pos:end="303:70"><call pos:start="303:9" pos:end="303:70"><name pos:start="303:9" pos:end="303:14">av_log</name><argument_list pos:start="303:15" pos:end="303:70">(<argument pos:start="303:16" pos:end="303:20"><expr pos:start="303:16" pos:end="303:20"><name pos:start="303:16" pos:end="303:20">avctx</name></expr></argument>, <argument pos:start="303:23" pos:end="303:34"><expr pos:start="303:23" pos:end="303:34"><name pos:start="303:23" pos:end="303:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="303:37" pos:end="303:65"><expr pos:start="303:37" pos:end="303:65"><literal type="string" pos:start="303:37" pos:end="303:65">"Failed to end frame: 0x%x\n"</literal></expr></argument>, <argument pos:start="303:68" pos:end="303:69"><expr pos:start="303:68" pos:end="303:69"><name pos:start="303:68" pos:end="303:69">hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="305:9" pos:end="305:20"><expr pos:start="305:9" pos:end="305:19"><name pos:start="305:9" pos:end="305:14">result</name> <operator pos:start="305:16" pos:end="305:16">=</operator> <operator pos:start="305:18" pos:end="305:18">-</operator><literal type="number" pos:start="305:19" pos:end="305:19">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="311:5" pos:end="311:18">return <expr pos:start="311:12" pos:end="311:17"><name pos:start="311:12" pos:end="311:17">result</name></expr>;</return>

</block_content>}</block></function>
</unit>
