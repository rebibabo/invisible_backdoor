<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17129.c" pos:tabs="8"><function pos:start="1:1" pos:end="281:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:17">ff_get_buffer</name><parameter_list pos:start="1:18" pos:end="1:67">(<parameter pos:start="1:19" pos:end="1:39"><decl pos:start="1:19" pos:end="1:39"><type pos:start="1:19" pos:end="1:39"><name pos:start="1:19" pos:end="1:32">AVCodecContext</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:39">avctx</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:55"><decl pos:start="1:42" pos:end="1:55"><type pos:start="1:42" pos:end="1:55"><name pos:start="1:42" pos:end="1:48">AVFrame</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:55">frame</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:66"><decl pos:start="1:58" pos:end="1:66"><type pos:start="1:58" pos:end="1:66"><name pos:start="1:58" pos:end="1:60">int</name></type> <name pos:start="1:62" pos:end="1:66">flags</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="281:1">{<block_content pos:start="5:5" pos:end="279:51">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>;</decl_stmt>



    <switch pos:start="9:5" pos:end="55:5">switch <condition pos:start="9:12" pos:end="9:30">(<expr pos:start="9:13" pos:end="9:29"><name pos:start="9:13" pos:end="9:29"><name pos:start="9:13" pos:end="9:17">avctx</name><operator pos:start="9:18" pos:end="9:19">-&gt;</operator><name pos:start="9:20" pos:end="9:29">codec_type</name></name></expr>)</condition> <block pos:start="9:32" pos:end="55:5">{<block_content pos:start="11:5" pos:end="53:36">

    <case pos:start="11:5" pos:end="11:28">case <expr pos:start="11:10" pos:end="11:27"><name pos:start="11:10" pos:end="11:27">AVMEDIA_TYPE_VIDEO</name></expr>:</case>

        <if_stmt pos:start="13:9" pos:end="15:54"><if pos:start="13:9" pos:end="15:54">if <condition pos:start="13:12" pos:end="13:26">(<expr pos:start="13:13" pos:end="13:25"><operator pos:start="13:13" pos:end="13:13">!</operator><name pos:start="13:14" pos:end="13:25"><name pos:start="13:14" pos:end="13:18">frame</name><operator pos:start="13:19" pos:end="13:20">-&gt;</operator><name pos:start="13:21" pos:end="13:25">width</name></name></expr>)</condition><block type="pseudo" pos:start="15:13" pos:end="15:54"><block_content pos:start="15:13" pos:end="15:54">

            <expr_stmt pos:start="15:13" pos:end="15:54"><expr pos:start="15:13" pos:end="15:53"><name pos:start="15:13" pos:end="15:24"><name pos:start="15:13" pos:end="15:17">frame</name><operator pos:start="15:18" pos:end="15:19">-&gt;</operator><name pos:start="15:20" pos:end="15:24">width</name></name>               <operator pos:start="15:40" pos:end="15:40">=</operator> <name pos:start="15:42" pos:end="15:53"><name pos:start="15:42" pos:end="15:46">avctx</name><operator pos:start="15:47" pos:end="15:48">-&gt;</operator><name pos:start="15:49" pos:end="15:53">width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="17:9" pos:end="19:55"><if pos:start="17:9" pos:end="19:55">if <condition pos:start="17:12" pos:end="17:27">(<expr pos:start="17:13" pos:end="17:26"><operator pos:start="17:13" pos:end="17:13">!</operator><name pos:start="17:14" pos:end="17:26"><name pos:start="17:14" pos:end="17:18">frame</name><operator pos:start="17:19" pos:end="17:20">-&gt;</operator><name pos:start="17:21" pos:end="17:26">height</name></name></expr>)</condition><block type="pseudo" pos:start="19:13" pos:end="19:55"><block_content pos:start="19:13" pos:end="19:55">

            <expr_stmt pos:start="19:13" pos:end="19:55"><expr pos:start="19:13" pos:end="19:54"><name pos:start="19:13" pos:end="19:25"><name pos:start="19:13" pos:end="19:17">frame</name><operator pos:start="19:18" pos:end="19:19">-&gt;</operator><name pos:start="19:20" pos:end="19:25">height</name></name>              <operator pos:start="19:40" pos:end="19:40">=</operator> <name pos:start="19:42" pos:end="19:54"><name pos:start="19:42" pos:end="19:46">avctx</name><operator pos:start="19:47" pos:end="19:48">-&gt;</operator><name pos:start="19:49" pos:end="19:54">height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="21:9" pos:end="23:56"><if pos:start="21:9" pos:end="23:56">if <condition pos:start="21:12" pos:end="21:30">(<expr pos:start="21:13" pos:end="21:29"><name pos:start="21:13" pos:end="21:25"><name pos:start="21:13" pos:end="21:17">frame</name><operator pos:start="21:18" pos:end="21:19">-&gt;</operator><name pos:start="21:20" pos:end="21:25">format</name></name> <operator pos:start="21:27" pos:end="21:27">&lt;</operator> <literal type="number" pos:start="21:29" pos:end="21:29">0</literal></expr>)</condition><block type="pseudo" pos:start="23:13" pos:end="23:56"><block_content pos:start="23:13" pos:end="23:56">

            <expr_stmt pos:start="23:13" pos:end="23:56"><expr pos:start="23:13" pos:end="23:55"><name pos:start="23:13" pos:end="23:25"><name pos:start="23:13" pos:end="23:17">frame</name><operator pos:start="23:18" pos:end="23:19">-&gt;</operator><name pos:start="23:20" pos:end="23:25">format</name></name>              <operator pos:start="23:40" pos:end="23:40">=</operator> <name pos:start="23:42" pos:end="23:55"><name pos:start="23:42" pos:end="23:46">avctx</name><operator pos:start="23:47" pos:end="23:48">-&gt;</operator><name pos:start="23:49" pos:end="23:55">pix_fmt</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="25:9" pos:end="27:68"><if pos:start="25:9" pos:end="27:68">if <condition pos:start="25:12" pos:end="25:44">(<expr pos:start="25:13" pos:end="25:43"><operator pos:start="25:13" pos:end="25:13">!</operator><name pos:start="25:14" pos:end="25:43"><name pos:start="25:14" pos:end="25:18">frame</name><operator pos:start="25:19" pos:end="25:20">-&gt;</operator><name pos:start="25:21" pos:end="25:39">sample_aspect_ratio</name><operator pos:start="25:40" pos:end="25:40">.</operator><name pos:start="25:41" pos:end="25:43">num</name></name></expr>)</condition><block type="pseudo" pos:start="27:13" pos:end="27:68"><block_content pos:start="27:13" pos:end="27:68">

            <expr_stmt pos:start="27:13" pos:end="27:68"><expr pos:start="27:13" pos:end="27:67"><name pos:start="27:13" pos:end="27:38"><name pos:start="27:13" pos:end="27:17">frame</name><operator pos:start="27:18" pos:end="27:19">-&gt;</operator><name pos:start="27:20" pos:end="27:38">sample_aspect_ratio</name></name> <operator pos:start="27:40" pos:end="27:40">=</operator> <name pos:start="27:42" pos:end="27:67"><name pos:start="27:42" pos:end="27:46">avctx</name><operator pos:start="27:47" pos:end="27:48">-&gt;</operator><name pos:start="27:49" pos:end="27:67">sample_aspect_ratio</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="31:9" pos:end="33:23"><if pos:start="31:9" pos:end="33:23">if <condition pos:start="31:12" pos:end="31:83">(<expr pos:start="31:13" pos:end="31:82"><operator pos:start="31:13" pos:end="31:13">(</operator><name pos:start="31:14" pos:end="31:16">ret</name> <operator pos:start="31:18" pos:end="31:18">=</operator> <call pos:start="31:20" pos:end="31:77"><name pos:start="31:20" pos:end="31:38">av_image_check_size</name><argument_list pos:start="31:39" pos:end="31:77">(<argument pos:start="31:40" pos:end="31:51"><expr pos:start="31:40" pos:end="31:51"><name pos:start="31:40" pos:end="31:51"><name pos:start="31:40" pos:end="31:44">avctx</name><operator pos:start="31:45" pos:end="31:46">-&gt;</operator><name pos:start="31:47" pos:end="31:51">width</name></name></expr></argument>, <argument pos:start="31:54" pos:end="31:66"><expr pos:start="31:54" pos:end="31:66"><name pos:start="31:54" pos:end="31:66"><name pos:start="31:54" pos:end="31:58">avctx</name><operator pos:start="31:59" pos:end="31:60">-&gt;</operator><name pos:start="31:61" pos:end="31:66">height</name></name></expr></argument>, <argument pos:start="31:69" pos:end="31:69"><expr pos:start="31:69" pos:end="31:69"><literal type="number" pos:start="31:69" pos:end="31:69">0</literal></expr></argument>, <argument pos:start="31:72" pos:end="31:76"><expr pos:start="31:72" pos:end="31:76"><name pos:start="31:72" pos:end="31:76">avctx</name></expr></argument>)</argument_list></call><operator pos:start="31:78" pos:end="31:78">)</operator> <operator pos:start="31:80" pos:end="31:80">&lt;</operator> <literal type="number" pos:start="31:82" pos:end="31:82">0</literal></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:23"><block_content pos:start="33:13" pos:end="33:23">

            <return pos:start="33:13" pos:end="33:23">return <expr pos:start="33:20" pos:end="33:22"><name pos:start="33:20" pos:end="33:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <break pos:start="35:9" pos:end="35:14">break;</break>

    <case pos:start="37:5" pos:end="37:28">case <expr pos:start="37:10" pos:end="37:27"><name pos:start="37:10" pos:end="37:27">AVMEDIA_TYPE_AUDIO</name></expr>:</case>

        <if_stmt pos:start="39:9" pos:end="41:55"><if pos:start="39:9" pos:end="41:55">if <condition pos:start="39:12" pos:end="39:32">(<expr pos:start="39:13" pos:end="39:31"><operator pos:start="39:13" pos:end="39:13">!</operator><name pos:start="39:14" pos:end="39:31"><name pos:start="39:14" pos:end="39:18">frame</name><operator pos:start="39:19" pos:end="39:20">-&gt;</operator><name pos:start="39:21" pos:end="39:31">sample_rate</name></name></expr>)</condition><block type="pseudo" pos:start="41:13" pos:end="41:55"><block_content pos:start="41:13" pos:end="41:55">

            <expr_stmt pos:start="41:13" pos:end="41:55"><expr pos:start="41:13" pos:end="41:54"><name pos:start="41:13" pos:end="41:30"><name pos:start="41:13" pos:end="41:17">frame</name><operator pos:start="41:18" pos:end="41:19">-&gt;</operator><name pos:start="41:20" pos:end="41:30">sample_rate</name></name>    <operator pos:start="41:35" pos:end="41:35">=</operator> <name pos:start="41:37" pos:end="41:54"><name pos:start="41:37" pos:end="41:41">avctx</name><operator pos:start="41:42" pos:end="41:43">-&gt;</operator><name pos:start="41:44" pos:end="41:54">sample_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="43:9" pos:end="45:54"><if pos:start="43:9" pos:end="45:54">if <condition pos:start="43:12" pos:end="43:30">(<expr pos:start="43:13" pos:end="43:29"><name pos:start="43:13" pos:end="43:25"><name pos:start="43:13" pos:end="43:17">frame</name><operator pos:start="43:18" pos:end="43:19">-&gt;</operator><name pos:start="43:20" pos:end="43:25">format</name></name> <operator pos:start="43:27" pos:end="43:27">&lt;</operator> <literal type="number" pos:start="43:29" pos:end="43:29">0</literal></expr>)</condition><block type="pseudo" pos:start="45:13" pos:end="45:54"><block_content pos:start="45:13" pos:end="45:54">

            <expr_stmt pos:start="45:13" pos:end="45:54"><expr pos:start="45:13" pos:end="45:53"><name pos:start="45:13" pos:end="45:25"><name pos:start="45:13" pos:end="45:17">frame</name><operator pos:start="45:18" pos:end="45:19">-&gt;</operator><name pos:start="45:20" pos:end="45:25">format</name></name>         <operator pos:start="45:35" pos:end="45:35">=</operator> <name pos:start="45:37" pos:end="45:53"><name pos:start="45:37" pos:end="45:41">avctx</name><operator pos:start="45:42" pos:end="45:43">-&gt;</operator><name pos:start="45:44" pos:end="45:53">sample_fmt</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="47:9" pos:end="49:58"><if pos:start="47:9" pos:end="49:58">if <condition pos:start="47:12" pos:end="47:35">(<expr pos:start="47:13" pos:end="47:34"><operator pos:start="47:13" pos:end="47:13">!</operator><name pos:start="47:14" pos:end="47:34"><name pos:start="47:14" pos:end="47:18">frame</name><operator pos:start="47:19" pos:end="47:20">-&gt;</operator><name pos:start="47:21" pos:end="47:34">channel_layout</name></name></expr>)</condition><block type="pseudo" pos:start="49:13" pos:end="49:58"><block_content pos:start="49:13" pos:end="49:58">

            <expr_stmt pos:start="49:13" pos:end="49:58"><expr pos:start="49:13" pos:end="49:57"><name pos:start="49:13" pos:end="49:33"><name pos:start="49:13" pos:end="49:17">frame</name><operator pos:start="49:18" pos:end="49:19">-&gt;</operator><name pos:start="49:20" pos:end="49:33">channel_layout</name></name> <operator pos:start="49:35" pos:end="49:35">=</operator> <name pos:start="49:37" pos:end="49:57"><name pos:start="49:37" pos:end="49:41">avctx</name><operator pos:start="49:42" pos:end="49:43">-&gt;</operator><name pos:start="49:44" pos:end="49:57">channel_layout</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="51:9" pos:end="51:14">break;</break>

    <default pos:start="53:5" pos:end="53:12">default:</default> <return pos:start="53:14" pos:end="53:36">return <expr pos:start="53:21" pos:end="53:35"><call pos:start="53:21" pos:end="53:35"><name pos:start="53:21" pos:end="53:27">AVERROR</name><argument_list pos:start="53:28" pos:end="53:35">(<argument pos:start="53:29" pos:end="53:34"><expr pos:start="53:29" pos:end="53:34"><name pos:start="53:29" pos:end="53:34">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></switch>



    <expr_stmt pos:start="59:5" pos:end="59:67"><expr pos:start="59:5" pos:end="59:66"><name pos:start="59:5" pos:end="59:18"><name pos:start="59:5" pos:end="59:9">frame</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:18">pkt_pts</name></name> <operator pos:start="59:20" pos:end="59:20">=</operator> <ternary pos:start="59:22" pos:end="59:66"><condition pos:start="59:22" pos:end="59:33"><expr pos:start="59:22" pos:end="59:31"><name pos:start="59:22" pos:end="59:31"><name pos:start="59:22" pos:end="59:26">avctx</name><operator pos:start="59:27" pos:end="59:28">-&gt;</operator><name pos:start="59:29" pos:end="59:31">pkt</name></name></expr> ?</condition><then pos:start="59:35" pos:end="59:49"> <expr pos:start="59:35" pos:end="59:49"><name pos:start="59:35" pos:end="59:49"><name pos:start="59:35" pos:end="59:39">avctx</name><operator pos:start="59:40" pos:end="59:41">-&gt;</operator><name pos:start="59:42" pos:end="59:44">pkt</name><operator pos:start="59:45" pos:end="59:46">-&gt;</operator><name pos:start="59:47" pos:end="59:49">pts</name></name></expr> </then><else pos:start="59:51" pos:end="59:66">: <expr pos:start="59:53" pos:end="59:66"><name pos:start="59:53" pos:end="59:66">AV_NOPTS_VALUE</name></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="66:0"><expr pos:start="61:5" pos:end="61:53"><name pos:start="61:5" pos:end="61:27"><name pos:start="61:5" pos:end="61:9">frame</name><operator pos:start="61:10" pos:end="61:11">-&gt;</operator><name pos:start="61:12" pos:end="61:27">reordered_opaque</name></name> <operator pos:start="61:29" pos:end="61:29">=</operator> <name pos:start="61:31" pos:end="61:53"><name pos:start="61:31" pos:end="61:35">avctx</name><operator pos:start="61:36" pos:end="61:37">-&gt;</operator><name pos:start="61:38" pos:end="61:53">reordered_opaque</name></name></expr>;</expr_stmt>



<cpp:if pos:start="65:1" pos:end="65:21">#<cpp:directive pos:start="65:2" pos:end="65:3">if</cpp:directive> <expr pos:start="65:5" pos:end="65:21"><name pos:start="65:5" pos:end="65:21">FF_API_GET_BUFFER</name></expr></cpp:if>

    <comment type="block" pos:start="67:5" pos:end="79:7">/*

     * Wrap an old get_buffer()-allocated buffer in an bunch of AVBuffers.

     * We wrap each plane in its own AVBuffer. Each of those has a reference to

     * a dummy AVBuffer as its private data, unreffing it on free.

     * When all the planes are freed, the dummy buffer's free callback calls

     * release_buffer().

     */</comment>

    <if_stmt pos:start="81:5" pos:end="276:0"><if pos:start="81:5" pos:end="276:0">if <condition pos:start="81:8" pos:end="81:26">(<expr pos:start="81:9" pos:end="81:25"><name pos:start="81:9" pos:end="81:25"><name pos:start="81:9" pos:end="81:13">avctx</name><operator pos:start="81:14" pos:end="81:15">-&gt;</operator><name pos:start="81:16" pos:end="81:25">get_buffer</name></name></expr>)</condition> <block pos:start="81:28" pos:end="276:0">{<block_content pos:start="83:9" pos:end="271:19">

        <decl_stmt pos:start="83:9" pos:end="83:42"><decl pos:start="83:9" pos:end="83:41"><type pos:start="83:9" pos:end="83:30"><name pos:start="83:9" pos:end="83:28">CompatReleaseBufPriv</name> <modifier pos:start="83:30" pos:end="83:30">*</modifier></type><name pos:start="83:31" pos:end="83:34">priv</name> <init pos:start="83:36" pos:end="83:41">= <expr pos:start="83:38" pos:end="83:41"><name pos:start="83:38" pos:end="83:41">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="85:9" pos:end="85:38"><decl pos:start="85:9" pos:end="85:37"><type pos:start="85:9" pos:end="85:21"><name pos:start="85:9" pos:end="85:19">AVBufferRef</name> <modifier pos:start="85:21" pos:end="85:21">*</modifier></type><name pos:start="85:22" pos:end="85:30">dummy_buf</name> <init pos:start="85:32" pos:end="85:37">= <expr pos:start="85:34" pos:end="85:37"><name pos:start="85:34" pos:end="85:37">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="87:9" pos:end="87:27"><decl pos:start="87:9" pos:end="87:18"><type pos:start="87:9" pos:end="87:11"><name pos:start="87:9" pos:end="87:11">int</name></type> <name pos:start="87:13" pos:end="87:18">planes</name></decl>, <decl pos:start="87:21" pos:end="87:21"><type ref="prev" pos:start="87:9" pos:end="87:11"/><name pos:start="87:21" pos:end="87:21">i</name></decl>, <decl pos:start="87:24" pos:end="87:26"><type ref="prev" pos:start="87:9" pos:end="87:11"/><name pos:start="87:24" pos:end="87:26">ret</name></decl>;</decl_stmt>



        <if_stmt pos:start="91:9" pos:end="93:36"><if pos:start="91:9" pos:end="93:36">if <condition pos:start="91:12" pos:end="91:43">(<expr pos:start="91:13" pos:end="91:42"><name pos:start="91:13" pos:end="91:17">flags</name> <operator pos:start="91:19" pos:end="91:19">&amp;</operator> <name pos:start="91:21" pos:end="91:42">AV_GET_BUFFER_FLAG_REF</name></expr>)</condition><block type="pseudo" pos:start="93:13" pos:end="93:36"><block_content pos:start="93:13" pos:end="93:36">

            <expr_stmt pos:start="93:13" pos:end="93:36"><expr pos:start="93:13" pos:end="93:35"><name pos:start="93:13" pos:end="93:28"><name pos:start="93:13" pos:end="93:17">frame</name><operator pos:start="93:18" pos:end="93:19">-&gt;</operator><name pos:start="93:20" pos:end="93:28">reference</name></name>    <operator pos:start="93:33" pos:end="93:33">=</operator> <literal type="number" pos:start="93:35" pos:end="93:35">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="97:9" pos:end="97:46"><expr pos:start="97:9" pos:end="97:45"><name pos:start="97:9" pos:end="97:11">ret</name> <operator pos:start="97:13" pos:end="97:13">=</operator> <call pos:start="97:15" pos:end="97:45"><name pos:start="97:15" pos:end="97:31"><name pos:start="97:15" pos:end="97:19">avctx</name><operator pos:start="97:20" pos:end="97:21">-&gt;</operator><name pos:start="97:22" pos:end="97:31">get_buffer</name></name><argument_list pos:start="97:32" pos:end="97:45">(<argument pos:start="97:33" pos:end="97:37"><expr pos:start="97:33" pos:end="97:37"><name pos:start="97:33" pos:end="97:37">avctx</name></expr></argument>, <argument pos:start="97:40" pos:end="97:44"><expr pos:start="97:40" pos:end="97:44"><name pos:start="97:40" pos:end="97:44">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="99:9" pos:end="101:23"><if pos:start="99:9" pos:end="101:23">if <condition pos:start="99:12" pos:end="99:20">(<expr pos:start="99:13" pos:end="99:19"><name pos:start="99:13" pos:end="99:15">ret</name> <operator pos:start="99:17" pos:end="99:17">&lt;</operator> <literal type="number" pos:start="99:19" pos:end="99:19">0</literal></expr>)</condition><block type="pseudo" pos:start="101:13" pos:end="101:23"><block_content pos:start="101:13" pos:end="101:23">

            <return pos:start="101:13" pos:end="101:23">return <expr pos:start="101:20" pos:end="101:22"><name pos:start="101:20" pos:end="101:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <comment type="block" pos:start="105:9" pos:end="111:11">/* return if the buffers are already set up

         * this would happen e.g. when a custom get_buffer() calls

         * avcodec_default_get_buffer

         */</comment>

        <if_stmt pos:start="113:9" pos:end="115:21"><if pos:start="113:9" pos:end="115:21">if <condition pos:start="113:12" pos:end="113:26">(<expr pos:start="113:13" pos:end="113:25"><name pos:start="113:13" pos:end="113:25"><name pos:start="113:13" pos:end="113:17">frame</name><operator pos:start="113:18" pos:end="113:19">-&gt;</operator><name pos:start="113:20" pos:end="113:22">buf</name><index pos:start="113:23" pos:end="113:25">[<expr pos:start="113:24" pos:end="113:24"><literal type="number" pos:start="113:24" pos:end="113:24">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="115:13" pos:end="115:21"><block_content pos:start="115:13" pos:end="115:21">

            <return pos:start="115:13" pos:end="115:21">return <expr pos:start="115:20" pos:end="115:20"><literal type="number" pos:start="115:20" pos:end="115:20">0</literal></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="119:9" pos:end="119:41"><expr pos:start="119:9" pos:end="119:40"><name pos:start="119:9" pos:end="119:12">priv</name> <operator pos:start="119:14" pos:end="119:14">=</operator> <call pos:start="119:16" pos:end="119:40"><name pos:start="119:16" pos:end="119:25">av_mallocz</name><argument_list pos:start="119:26" pos:end="119:40">(<argument pos:start="119:27" pos:end="119:39"><expr pos:start="119:27" pos:end="119:39"><sizeof pos:start="119:27" pos:end="119:39">sizeof<argument_list pos:start="119:33" pos:end="119:39">(<argument pos:start="119:34" pos:end="119:38"><expr pos:start="119:34" pos:end="119:38"><operator pos:start="119:34" pos:end="119:34">*</operator><name pos:start="119:35" pos:end="119:38">priv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="121:9" pos:end="127:9"><if pos:start="121:9" pos:end="127:9">if <condition pos:start="121:12" pos:end="121:18">(<expr pos:start="121:13" pos:end="121:17"><operator pos:start="121:13" pos:end="121:13">!</operator><name pos:start="121:14" pos:end="121:17">priv</name></expr>)</condition> <block pos:start="121:20" pos:end="127:9">{<block_content pos:start="123:13" pos:end="125:22">

            <expr_stmt pos:start="123:13" pos:end="123:34"><expr pos:start="123:13" pos:end="123:33"><name pos:start="123:13" pos:end="123:15">ret</name> <operator pos:start="123:17" pos:end="123:17">=</operator> <call pos:start="123:19" pos:end="123:33"><name pos:start="123:19" pos:end="123:25">AVERROR</name><argument_list pos:start="123:26" pos:end="123:33">(<argument pos:start="123:27" pos:end="123:32"><expr pos:start="123:27" pos:end="123:32"><name pos:start="123:27" pos:end="123:32">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="125:13" pos:end="125:22">goto <name pos:start="125:18" pos:end="125:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:29"><expr pos:start="129:9" pos:end="129:28"><name pos:start="129:9" pos:end="129:19"><name pos:start="129:9" pos:end="129:12">priv</name><operator pos:start="129:13" pos:end="129:14">-&gt;</operator><name pos:start="129:15" pos:end="129:19">avctx</name></name> <operator pos:start="129:21" pos:end="129:21">=</operator> <operator pos:start="129:23" pos:end="129:23">*</operator><name pos:start="129:24" pos:end="129:28">avctx</name></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:29"><expr pos:start="131:9" pos:end="131:28"><name pos:start="131:9" pos:end="131:19"><name pos:start="131:9" pos:end="131:12">priv</name><operator pos:start="131:13" pos:end="131:14">-&gt;</operator><name pos:start="131:15" pos:end="131:19">frame</name></name> <operator pos:start="131:21" pos:end="131:21">=</operator> <operator pos:start="131:23" pos:end="131:23">*</operator><name pos:start="131:24" pos:end="131:28">frame</name></expr>;</expr_stmt>



        <expr_stmt pos:start="135:9" pos:end="135:75"><expr pos:start="135:9" pos:end="135:74"><name pos:start="135:9" pos:end="135:17">dummy_buf</name> <operator pos:start="135:19" pos:end="135:19">=</operator> <call pos:start="135:21" pos:end="135:74"><name pos:start="135:21" pos:end="135:36">av_buffer_create</name><argument_list pos:start="135:37" pos:end="135:74">(<argument pos:start="135:38" pos:end="135:41"><expr pos:start="135:38" pos:end="135:41"><name pos:start="135:38" pos:end="135:41">NULL</name></expr></argument>, <argument pos:start="135:44" pos:end="135:44"><expr pos:start="135:44" pos:end="135:44"><literal type="number" pos:start="135:44" pos:end="135:44">0</literal></expr></argument>, <argument pos:start="135:47" pos:end="135:64"><expr pos:start="135:47" pos:end="135:64"><name pos:start="135:47" pos:end="135:64">compat_free_buffer</name></expr></argument>, <argument pos:start="135:67" pos:end="135:70"><expr pos:start="135:67" pos:end="135:70"><name pos:start="135:67" pos:end="135:70">priv</name></expr></argument>, <argument pos:start="135:73" pos:end="135:73"><expr pos:start="135:73" pos:end="135:73"><literal type="number" pos:start="135:73" pos:end="135:73">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="137:9" pos:end="176:0"><if pos:start="137:9" pos:end="176:0">if <condition pos:start="137:12" pos:end="137:23">(<expr pos:start="137:13" pos:end="137:22"><operator pos:start="137:13" pos:end="137:13">!</operator><name pos:start="137:14" pos:end="137:22">dummy_buf</name></expr>)</condition> <block pos:start="137:25" pos:end="176:0">{<block_content pos:start="139:13" pos:end="141:22">

            <expr_stmt pos:start="139:13" pos:end="139:34"><expr pos:start="139:13" pos:end="139:33"><name pos:start="139:13" pos:end="139:15">ret</name> <operator pos:start="139:17" pos:end="139:17">=</operator> <call pos:start="139:19" pos:end="139:33"><name pos:start="139:19" pos:end="139:25">AVERROR</name><argument_list pos:start="139:26" pos:end="139:33">(<argument pos:start="139:27" pos:end="139:32"><expr pos:start="139:27" pos:end="139:32"><name pos:start="139:27" pos:end="139:32">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="141:13" pos:end="141:22">goto <name pos:start="141:18" pos:end="141:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



<cpp:define pos:start="147:1" pos:end="175:11">#<cpp:directive pos:start="147:2" pos:end="147:7">define</cpp:directive> <cpp:macro pos:start="147:9" pos:end="147:44"><name pos:start="147:9" pos:end="147:18">WRAP_PLANE</name><parameter_list pos:start="147:19" pos:end="147:44">(<parameter pos:start="147:20" pos:end="147:26"><type pos:start="147:20" pos:end="147:26"><name pos:start="147:20" pos:end="147:26">ref_out</name></type></parameter>, <parameter pos:start="147:29" pos:end="147:32"><type pos:start="147:29" pos:end="147:32"><name pos:start="147:29" pos:end="147:32">data</name></type></parameter>, <parameter pos:start="147:35" pos:end="147:43"><type pos:start="147:35" pos:end="147:43"><name pos:start="147:35" pos:end="147:43">data_size</name></type></parameter>)</parameter_list></cpp:macro>                            \

<cpp:value pos:start="149:1" pos:end="175:11">do {                                                                    \

    AVBufferRef *dummy_ref = av_buffer_ref(dummy_buf);                  \

    if (!dummy_ref) {                                                   \

        ret = AVERROR(ENOMEM);                                          \

        goto fail;                                                      \

    }                                                                   \

    ref_out = av_buffer_create(data, data_size, compat_release_buffer,  \

                               dummy_ref, 0);                           \

    if (!ref_out) {                                                     \

        av_frame_unref(frame);                                          \

        ret = AVERROR(ENOMEM);                                          \

        goto fail;                                                      \

    }                                                                   \

} while (0)</cpp:value></cpp:define>



        <if_stmt pos:start="179:9" pos:end="251:9"><if pos:start="179:9" pos:end="209:9">if <condition pos:start="179:12" pos:end="179:52">(<expr pos:start="179:13" pos:end="179:51"><name pos:start="179:13" pos:end="179:29"><name pos:start="179:13" pos:end="179:17">avctx</name><operator pos:start="179:18" pos:end="179:19">-&gt;</operator><name pos:start="179:20" pos:end="179:29">codec_type</name></name> <operator pos:start="179:31" pos:end="179:32">==</operator> <name pos:start="179:34" pos:end="179:51">AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block pos:start="179:54" pos:end="209:9">{<block_content pos:start="181:13" pos:end="207:13">

            <decl_stmt pos:start="181:13" pos:end="181:80"><decl pos:start="181:13" pos:end="181:79"><type pos:start="181:13" pos:end="181:38"><specifier pos:start="181:13" pos:end="181:17">const</specifier> <name pos:start="181:19" pos:end="181:36">AVPixFmtDescriptor</name> <modifier pos:start="181:38" pos:end="181:38">*</modifier></type><name pos:start="181:39" pos:end="181:42">desc</name> <init pos:start="181:44" pos:end="181:79">= <expr pos:start="181:46" pos:end="181:79"><call pos:start="181:46" pos:end="181:79"><name pos:start="181:46" pos:end="181:64">av_pix_fmt_desc_get</name><argument_list pos:start="181:65" pos:end="181:79">(<argument pos:start="181:66" pos:end="181:78"><expr pos:start="181:66" pos:end="181:78"><name pos:start="181:66" pos:end="181:78"><name pos:start="181:66" pos:end="181:70">frame</name><operator pos:start="181:71" pos:end="181:72">-&gt;</operator><name pos:start="181:73" pos:end="181:78">format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="185:13" pos:end="191:13"><if pos:start="185:13" pos:end="191:13">if <condition pos:start="185:16" pos:end="185:22">(<expr pos:start="185:17" pos:end="185:21"><operator pos:start="185:17" pos:end="185:17">!</operator><name pos:start="185:18" pos:end="185:21">desc</name></expr>)</condition> <block pos:start="185:24" pos:end="191:13">{<block_content pos:start="187:17" pos:end="189:26">

                <expr_stmt pos:start="187:17" pos:end="187:38"><expr pos:start="187:17" pos:end="187:37"><name pos:start="187:17" pos:end="187:19">ret</name> <operator pos:start="187:21" pos:end="187:21">=</operator> <call pos:start="187:23" pos:end="187:37"><name pos:start="187:23" pos:end="187:29">AVERROR</name><argument_list pos:start="187:30" pos:end="187:37">(<argument pos:start="187:31" pos:end="187:36"><expr pos:start="187:31" pos:end="187:36"><name pos:start="187:31" pos:end="187:36">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="189:17" pos:end="189:26">goto <name pos:start="189:22" pos:end="189:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="193:13" pos:end="193:78"><expr pos:start="193:13" pos:end="193:77"><name pos:start="193:13" pos:end="193:18">planes</name> <operator pos:start="193:20" pos:end="193:20">=</operator> <ternary pos:start="193:22" pos:end="193:77"><condition pos:start="193:22" pos:end="193:53"><expr pos:start="193:22" pos:end="193:51"><operator pos:start="193:22" pos:end="193:22">(</operator><name pos:start="193:23" pos:end="193:33"><name pos:start="193:23" pos:end="193:26">desc</name><operator pos:start="193:27" pos:end="193:28">-&gt;</operator><name pos:start="193:29" pos:end="193:33">flags</name></name> <operator pos:start="193:35" pos:end="193:35">&amp;</operator> <name pos:start="193:37" pos:end="193:50">PIX_FMT_PLANAR</name><operator pos:start="193:51" pos:end="193:51">)</operator></expr> ?</condition><then pos:start="193:55" pos:end="193:73"> <expr pos:start="193:55" pos:end="193:73"><name pos:start="193:55" pos:end="193:73"><name pos:start="193:55" pos:end="193:58">desc</name><operator pos:start="193:59" pos:end="193:60">-&gt;</operator><name pos:start="193:61" pos:end="193:73">nb_components</name></name></expr> </then><else pos:start="193:75" pos:end="193:77">: <expr pos:start="193:77" pos:end="193:77"><literal type="number" pos:start="193:77" pos:end="193:77">1</literal></expr></else></ternary></expr>;</expr_stmt>



            <for pos:start="197:13" pos:end="207:13">for <control pos:start="197:17" pos:end="197:40">(<init pos:start="197:18" pos:end="197:23"><expr pos:start="197:18" pos:end="197:22"><name pos:start="197:18" pos:end="197:18">i</name> <operator pos:start="197:20" pos:end="197:20">=</operator> <literal type="number" pos:start="197:22" pos:end="197:22">0</literal></expr>;</init> <condition pos:start="197:25" pos:end="197:35"><expr pos:start="197:25" pos:end="197:34"><name pos:start="197:25" pos:end="197:25">i</name> <operator pos:start="197:27" pos:end="197:27">&lt;</operator> <name pos:start="197:29" pos:end="197:34">planes</name></expr>;</condition> <incr pos:start="197:37" pos:end="197:39"><expr pos:start="197:37" pos:end="197:39"><name pos:start="197:37" pos:end="197:37">i</name><operator pos:start="197:38" pos:end="197:39">++</operator></expr></incr>)</control> <block pos:start="197:42" pos:end="207:13">{<block_content pos:start="199:17" pos:end="205:70">

                <decl_stmt pos:start="199:17" pos:end="199:78"><decl pos:start="199:17" pos:end="199:77"><type pos:start="199:17" pos:end="199:19"><name pos:start="199:17" pos:end="199:19">int</name></type> <name pos:start="199:21" pos:end="199:27">h_shift</name>    <init pos:start="199:32" pos:end="199:77">= <expr pos:start="199:34" pos:end="199:77"><ternary pos:start="199:34" pos:end="199:77"><condition pos:start="199:34" pos:end="199:53"><expr pos:start="199:34" pos:end="199:51"><operator pos:start="199:34" pos:end="199:34">(</operator><name pos:start="199:35" pos:end="199:35">i</name> <operator pos:start="199:37" pos:end="199:38">==</operator> <literal type="number" pos:start="199:40" pos:end="199:40">1</literal> <operator pos:start="199:42" pos:end="199:43">||</operator> <name pos:start="199:45" pos:end="199:45">i</name> <operator pos:start="199:47" pos:end="199:48">==</operator> <literal type="number" pos:start="199:50" pos:end="199:50">2</literal><operator pos:start="199:51" pos:end="199:51">)</operator></expr> ?</condition><then pos:start="199:55" pos:end="199:73"> <expr pos:start="199:55" pos:end="199:73"><name pos:start="199:55" pos:end="199:73"><name pos:start="199:55" pos:end="199:58">desc</name><operator pos:start="199:59" pos:end="199:60">-&gt;</operator><name pos:start="199:61" pos:end="199:73">log2_chroma_h</name></name></expr> </then><else pos:start="199:75" pos:end="199:77">: <expr pos:start="199:77" pos:end="199:77"><literal type="number" pos:start="199:77" pos:end="199:77">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="201:17" pos:end="201:80"><decl pos:start="201:17" pos:end="201:79"><type pos:start="201:17" pos:end="201:19"><name pos:start="201:17" pos:end="201:19">int</name></type> <name pos:start="201:21" pos:end="201:30">plane_size</name> <init pos:start="201:32" pos:end="201:79">= <expr pos:start="201:34" pos:end="201:79"><operator pos:start="201:34" pos:end="201:34">(</operator><name pos:start="201:35" pos:end="201:46"><name pos:start="201:35" pos:end="201:39">frame</name><operator pos:start="201:40" pos:end="201:41">-&gt;</operator><name pos:start="201:42" pos:end="201:46">width</name></name> <operator pos:start="201:48" pos:end="201:49">&gt;&gt;</operator> <name pos:start="201:51" pos:end="201:57">h_shift</name><operator pos:start="201:58" pos:end="201:58">)</operator> <operator pos:start="201:60" pos:end="201:60">*</operator> <name pos:start="201:62" pos:end="201:79"><name pos:start="201:62" pos:end="201:66">frame</name><operator pos:start="201:67" pos:end="201:68">-&gt;</operator><name pos:start="201:69" pos:end="201:76">linesize</name><index pos:start="201:77" pos:end="201:79">[<expr pos:start="201:78" pos:end="201:78"><name pos:start="201:78" pos:end="201:78">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="205:17" pos:end="205:70"><expr pos:start="205:17" pos:end="205:69"><call pos:start="205:17" pos:end="205:69"><name pos:start="205:17" pos:end="205:26">WRAP_PLANE</name><argument_list pos:start="205:27" pos:end="205:69">(<argument pos:start="205:28" pos:end="205:40"><expr pos:start="205:28" pos:end="205:40"><name pos:start="205:28" pos:end="205:40"><name pos:start="205:28" pos:end="205:32">frame</name><operator pos:start="205:33" pos:end="205:34">-&gt;</operator><name pos:start="205:35" pos:end="205:37">buf</name><index pos:start="205:38" pos:end="205:40">[<expr pos:start="205:39" pos:end="205:39"><name pos:start="205:39" pos:end="205:39">i</name></expr>]</index></name></expr></argument>, <argument pos:start="205:43" pos:end="205:56"><expr pos:start="205:43" pos:end="205:56"><name pos:start="205:43" pos:end="205:56"><name pos:start="205:43" pos:end="205:47">frame</name><operator pos:start="205:48" pos:end="205:49">-&gt;</operator><name pos:start="205:50" pos:end="205:53">data</name><index pos:start="205:54" pos:end="205:56">[<expr pos:start="205:55" pos:end="205:55"><name pos:start="205:55" pos:end="205:55">i</name></expr>]</index></name></expr></argument>, <argument pos:start="205:59" pos:end="205:68"><expr pos:start="205:59" pos:end="205:68"><name pos:start="205:59" pos:end="205:68">plane_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <else pos:start="209:11" pos:end="251:9">else <block pos:start="209:16" pos:end="251:9">{<block_content pos:start="211:13" pos:end="249:47">

            <decl_stmt pos:start="211:13" pos:end="211:64"><decl pos:start="211:13" pos:end="211:63"><type pos:start="211:13" pos:end="211:15"><name pos:start="211:13" pos:end="211:15">int</name></type> <name pos:start="211:17" pos:end="211:22">planar</name> <init pos:start="211:24" pos:end="211:63">= <expr pos:start="211:26" pos:end="211:63"><call pos:start="211:26" pos:end="211:63"><name pos:start="211:26" pos:end="211:48">av_sample_fmt_is_planar</name><argument_list pos:start="211:49" pos:end="211:63">(<argument pos:start="211:50" pos:end="211:62"><expr pos:start="211:50" pos:end="211:62"><name pos:start="211:50" pos:end="211:62"><name pos:start="211:50" pos:end="211:54">frame</name><operator pos:start="211:55" pos:end="211:56">-&gt;</operator><name pos:start="211:57" pos:end="211:62">format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="213:13" pos:end="213:50"><expr pos:start="213:13" pos:end="213:49"><name pos:start="213:13" pos:end="213:18">planes</name> <operator pos:start="213:20" pos:end="213:20">=</operator> <ternary pos:start="213:22" pos:end="213:49"><condition pos:start="213:22" pos:end="213:29"><expr pos:start="213:22" pos:end="213:27"><name pos:start="213:22" pos:end="213:27">planar</name></expr> ?</condition><then pos:start="213:31" pos:end="213:45"> <expr pos:start="213:31" pos:end="213:45"><name pos:start="213:31" pos:end="213:45"><name pos:start="213:31" pos:end="213:35">avctx</name><operator pos:start="213:36" pos:end="213:37">-&gt;</operator><name pos:start="213:38" pos:end="213:45">channels</name></name></expr> </then><else pos:start="213:47" pos:end="213:49">: <expr pos:start="213:49" pos:end="213:49"><literal type="number" pos:start="213:49" pos:end="213:49">1</literal></expr></else></ternary></expr>;</expr_stmt>



            <if_stmt pos:start="217:13" pos:end="233:13"><if pos:start="217:13" pos:end="233:13">if <condition pos:start="217:16" pos:end="217:52">(<expr pos:start="217:17" pos:end="217:51"><name pos:start="217:17" pos:end="217:22">planes</name> <operator pos:start="217:24" pos:end="217:24">&gt;</operator> <call pos:start="217:26" pos:end="217:51"><name pos:start="217:26" pos:end="217:39">FF_ARRAY_ELEMS</name><argument_list pos:start="217:40" pos:end="217:51">(<argument pos:start="217:41" pos:end="217:50"><expr pos:start="217:41" pos:end="217:50"><name pos:start="217:41" pos:end="217:50"><name pos:start="217:41" pos:end="217:45">frame</name><operator pos:start="217:46" pos:end="217:47">-&gt;</operator><name pos:start="217:48" pos:end="217:50">buf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="217:54" pos:end="233:13">{<block_content pos:start="219:17" pos:end="231:17">

                <expr_stmt pos:start="219:17" pos:end="219:77"><expr pos:start="219:17" pos:end="219:76"><name pos:start="219:17" pos:end="219:38"><name pos:start="219:17" pos:end="219:21">frame</name><operator pos:start="219:22" pos:end="219:23">-&gt;</operator><name pos:start="219:24" pos:end="219:38">nb_extended_buf</name></name> <operator pos:start="219:40" pos:end="219:40">=</operator> <name pos:start="219:42" pos:end="219:47">planes</name> <operator pos:start="219:49" pos:end="219:49">-</operator> <call pos:start="219:51" pos:end="219:76"><name pos:start="219:51" pos:end="219:64">FF_ARRAY_ELEMS</name><argument_list pos:start="219:65" pos:end="219:76">(<argument pos:start="219:66" pos:end="219:75"><expr pos:start="219:66" pos:end="219:75"><name pos:start="219:66" pos:end="219:75"><name pos:start="219:66" pos:end="219:70">frame</name><operator pos:start="219:71" pos:end="219:72">-&gt;</operator><name pos:start="219:73" pos:end="219:75">buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="221:17" pos:end="223:72"><expr pos:start="221:17" pos:end="223:71"><name pos:start="221:17" pos:end="221:35"><name pos:start="221:17" pos:end="221:21">frame</name><operator pos:start="221:22" pos:end="221:23">-&gt;</operator><name pos:start="221:24" pos:end="221:35">extended_buf</name></name> <operator pos:start="221:37" pos:end="221:37">=</operator> <call pos:start="221:39" pos:end="223:71"><name pos:start="221:39" pos:end="221:47">av_malloc</name><argument_list pos:start="221:48" pos:end="223:71">(<argument pos:start="221:49" pos:end="223:70"><expr pos:start="221:49" pos:end="223:70"><sizeof pos:start="221:49" pos:end="221:76">sizeof<argument_list pos:start="221:55" pos:end="221:76">(<argument pos:start="221:56" pos:end="221:75"><expr pos:start="221:56" pos:end="221:75"><operator pos:start="221:56" pos:end="221:56">*</operator><name pos:start="221:57" pos:end="221:75"><name pos:start="221:57" pos:end="221:61">frame</name><operator pos:start="221:62" pos:end="221:63">-&gt;</operator><name pos:start="221:64" pos:end="221:75">extended_buf</name></name></expr></argument>)</argument_list></sizeof> <operator pos:start="221:78" pos:end="221:78">*</operator>

                                                <name pos:start="223:49" pos:end="223:70"><name pos:start="223:49" pos:end="223:53">frame</name><operator pos:start="223:54" pos:end="223:55">-&gt;</operator><name pos:start="223:56" pos:end="223:70">nb_extended_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="225:17" pos:end="231:17"><if pos:start="225:17" pos:end="231:17">if <condition pos:start="225:20" pos:end="225:41">(<expr pos:start="225:21" pos:end="225:40"><operator pos:start="225:21" pos:end="225:21">!</operator><name pos:start="225:22" pos:end="225:40"><name pos:start="225:22" pos:end="225:26">frame</name><operator pos:start="225:27" pos:end="225:28">-&gt;</operator><name pos:start="225:29" pos:end="225:40">extended_buf</name></name></expr>)</condition> <block pos:start="225:43" pos:end="231:17">{<block_content pos:start="227:21" pos:end="229:30">

                    <expr_stmt pos:start="227:21" pos:end="227:42"><expr pos:start="227:21" pos:end="227:41"><name pos:start="227:21" pos:end="227:23">ret</name> <operator pos:start="227:25" pos:end="227:25">=</operator> <call pos:start="227:27" pos:end="227:41"><name pos:start="227:27" pos:end="227:33">AVERROR</name><argument_list pos:start="227:34" pos:end="227:41">(<argument pos:start="227:35" pos:end="227:40"><expr pos:start="227:35" pos:end="227:40"><name pos:start="227:35" pos:end="227:40">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="229:21" pos:end="229:30">goto <name pos:start="229:26" pos:end="229:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <for pos:start="237:13" pos:end="239:87">for <control pos:start="237:17" pos:end="237:75">(<init pos:start="237:18" pos:end="237:23"><expr pos:start="237:18" pos:end="237:22"><name pos:start="237:18" pos:end="237:18">i</name> <operator pos:start="237:20" pos:end="237:20">=</operator> <literal type="number" pos:start="237:22" pos:end="237:22">0</literal></expr>;</init> <condition pos:start="237:25" pos:end="237:70"><expr pos:start="237:25" pos:end="237:69"><name pos:start="237:25" pos:end="237:25">i</name> <operator pos:start="237:27" pos:end="237:27">&lt;</operator> <call pos:start="237:29" pos:end="237:69"><name pos:start="237:29" pos:end="237:33">FFMIN</name><argument_list pos:start="237:34" pos:end="237:69">(<argument pos:start="237:35" pos:end="237:40"><expr pos:start="237:35" pos:end="237:40"><name pos:start="237:35" pos:end="237:40">planes</name></expr></argument>, <argument pos:start="237:43" pos:end="237:68"><expr pos:start="237:43" pos:end="237:68"><call pos:start="237:43" pos:end="237:68"><name pos:start="237:43" pos:end="237:56">FF_ARRAY_ELEMS</name><argument_list pos:start="237:57" pos:end="237:68">(<argument pos:start="237:58" pos:end="237:67"><expr pos:start="237:58" pos:end="237:67"><name pos:start="237:58" pos:end="237:67"><name pos:start="237:58" pos:end="237:62">frame</name><operator pos:start="237:63" pos:end="237:64">-&gt;</operator><name pos:start="237:65" pos:end="237:67">buf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="237:72" pos:end="237:74"><expr pos:start="237:72" pos:end="237:74"><name pos:start="237:72" pos:end="237:72">i</name><operator pos:start="237:73" pos:end="237:74">++</operator></expr></incr>)</control><block type="pseudo" pos:start="239:17" pos:end="239:87"><block_content pos:start="239:17" pos:end="239:87">

                <expr_stmt pos:start="239:17" pos:end="239:87"><expr pos:start="239:17" pos:end="239:86"><call pos:start="239:17" pos:end="239:86"><name pos:start="239:17" pos:end="239:26">WRAP_PLANE</name><argument_list pos:start="239:27" pos:end="239:86">(<argument pos:start="239:28" pos:end="239:40"><expr pos:start="239:28" pos:end="239:40"><name pos:start="239:28" pos:end="239:40"><name pos:start="239:28" pos:end="239:32">frame</name><operator pos:start="239:33" pos:end="239:34">-&gt;</operator><name pos:start="239:35" pos:end="239:37">buf</name><index pos:start="239:38" pos:end="239:40">[<expr pos:start="239:39" pos:end="239:39"><name pos:start="239:39" pos:end="239:39">i</name></expr>]</index></name></expr></argument>, <argument pos:start="239:43" pos:end="239:65"><expr pos:start="239:43" pos:end="239:65"><name pos:start="239:43" pos:end="239:65"><name pos:start="239:43" pos:end="239:47">frame</name><operator pos:start="239:48" pos:end="239:49">-&gt;</operator><name pos:start="239:50" pos:end="239:62">extended_data</name><index pos:start="239:63" pos:end="239:65">[<expr pos:start="239:64" pos:end="239:64"><name pos:start="239:64" pos:end="239:64">i</name></expr>]</index></name></expr></argument>, <argument pos:start="239:68" pos:end="239:85"><expr pos:start="239:68" pos:end="239:85"><name pos:start="239:68" pos:end="239:85"><name pos:start="239:68" pos:end="239:72">frame</name><operator pos:start="239:73" pos:end="239:74">-&gt;</operator><name pos:start="239:75" pos:end="239:82">linesize</name><index pos:start="239:83" pos:end="239:85">[<expr pos:start="239:84" pos:end="239:84"><literal type="number" pos:start="239:84" pos:end="239:84">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



            <for pos:start="243:13" pos:end="249:47">for <control pos:start="243:17" pos:end="243:69">(<init pos:start="243:18" pos:end="243:23"><expr pos:start="243:18" pos:end="243:22"><name pos:start="243:18" pos:end="243:18">i</name> <operator pos:start="243:20" pos:end="243:20">=</operator> <literal type="number" pos:start="243:22" pos:end="243:22">0</literal></expr>;</init> <condition pos:start="243:25" pos:end="243:64"><expr pos:start="243:25" pos:end="243:63"><name pos:start="243:25" pos:end="243:25">i</name> <operator pos:start="243:27" pos:end="243:27">&lt;</operator> <name pos:start="243:29" pos:end="243:34">planes</name> <operator pos:start="243:36" pos:end="243:36">-</operator> <call pos:start="243:38" pos:end="243:63"><name pos:start="243:38" pos:end="243:51">FF_ARRAY_ELEMS</name><argument_list pos:start="243:52" pos:end="243:63">(<argument pos:start="243:53" pos:end="243:62"><expr pos:start="243:53" pos:end="243:62"><name pos:start="243:53" pos:end="243:62"><name pos:start="243:53" pos:end="243:57">frame</name><operator pos:start="243:58" pos:end="243:59">-&gt;</operator><name pos:start="243:60" pos:end="243:62">buf</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="243:66" pos:end="243:68"><expr pos:start="243:66" pos:end="243:68"><name pos:start="243:66" pos:end="243:66">i</name><operator pos:start="243:67" pos:end="243:68">++</operator></expr></incr>)</control><block type="pseudo" pos:start="245:17" pos:end="249:47"><block_content pos:start="245:17" pos:end="249:47">

                <expr_stmt pos:start="245:17" pos:end="249:47"><expr pos:start="245:17" pos:end="249:46"><call pos:start="245:17" pos:end="249:46"><name pos:start="245:17" pos:end="245:26">WRAP_PLANE</name><argument_list pos:start="245:27" pos:end="249:46">(<argument pos:start="245:28" pos:end="245:49"><expr pos:start="245:28" pos:end="245:49"><name pos:start="245:28" pos:end="245:49"><name pos:start="245:28" pos:end="245:32">frame</name><operator pos:start="245:33" pos:end="245:34">-&gt;</operator><name pos:start="245:35" pos:end="245:46">extended_buf</name><index pos:start="245:47" pos:end="245:49">[<expr pos:start="245:48" pos:end="245:48"><name pos:start="245:48" pos:end="245:48">i</name></expr>]</index></name></expr></argument>,

                           <argument pos:start="247:28" pos:end="247:79"><expr pos:start="247:28" pos:end="247:79"><name pos:start="247:28" pos:end="247:79"><name pos:start="247:28" pos:end="247:32">frame</name><operator pos:start="247:33" pos:end="247:34">-&gt;</operator><name pos:start="247:35" pos:end="247:47">extended_data</name><index pos:start="247:48" pos:end="247:79">[<expr pos:start="247:49" pos:end="247:78"><name pos:start="247:49" pos:end="247:49">i</name> <operator pos:start="247:51" pos:end="247:51">+</operator> <call pos:start="247:53" pos:end="247:78"><name pos:start="247:53" pos:end="247:66">FF_ARRAY_ELEMS</name><argument_list pos:start="247:67" pos:end="247:78">(<argument pos:start="247:68" pos:end="247:77"><expr pos:start="247:68" pos:end="247:77"><name pos:start="247:68" pos:end="247:77"><name pos:start="247:68" pos:end="247:72">frame</name><operator pos:start="247:73" pos:end="247:74">-&gt;</operator><name pos:start="247:75" pos:end="247:77">buf</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,

                           <argument pos:start="249:28" pos:end="249:45"><expr pos:start="249:28" pos:end="249:45"><name pos:start="249:28" pos:end="249:45"><name pos:start="249:28" pos:end="249:32">frame</name><operator pos:start="249:33" pos:end="249:34">-&gt;</operator><name pos:start="249:35" pos:end="249:42">linesize</name><index pos:start="249:43" pos:end="249:45">[<expr pos:start="249:44" pos:end="249:44"><literal type="number" pos:start="249:44" pos:end="249:44">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="255:9" pos:end="255:36"><expr pos:start="255:9" pos:end="255:35"><call pos:start="255:9" pos:end="255:35"><name pos:start="255:9" pos:end="255:23">av_buffer_unref</name><argument_list pos:start="255:24" pos:end="255:35">(<argument pos:start="255:25" pos:end="255:34"><expr pos:start="255:25" pos:end="255:34"><operator pos:start="255:25" pos:end="255:25">&amp;</operator><name pos:start="255:26" pos:end="255:34">dummy_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <return pos:start="259:9" pos:end="259:17">return <expr pos:start="259:16" pos:end="259:16"><literal type="number" pos:start="259:16" pos:end="259:16">0</literal></expr>;</return>



<label pos:start="263:1" pos:end="263:5"><name pos:start="263:1" pos:end="263:4">fail</name>:</label>

        <expr_stmt pos:start="265:9" pos:end="265:44"><expr pos:start="265:9" pos:end="265:43"><call pos:start="265:9" pos:end="265:43"><name pos:start="265:9" pos:end="265:29"><name pos:start="265:9" pos:end="265:13">avctx</name><operator pos:start="265:14" pos:end="265:15">-&gt;</operator><name pos:start="265:16" pos:end="265:29">release_buffer</name></name><argument_list pos:start="265:30" pos:end="265:43">(<argument pos:start="265:31" pos:end="265:35"><expr pos:start="265:31" pos:end="265:35"><name pos:start="265:31" pos:end="265:35">avctx</name></expr></argument>, <argument pos:start="265:38" pos:end="265:42"><expr pos:start="265:38" pos:end="265:42"><name pos:start="265:38" pos:end="265:42">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="267:9" pos:end="267:24"><expr pos:start="267:9" pos:end="267:23"><call pos:start="267:9" pos:end="267:23"><name pos:start="267:9" pos:end="267:16">av_freep</name><argument_list pos:start="267:17" pos:end="267:23">(<argument pos:start="267:18" pos:end="267:22"><expr pos:start="267:18" pos:end="267:22"><operator pos:start="267:18" pos:end="267:18">&amp;</operator><name pos:start="267:19" pos:end="267:22">priv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="269:9" pos:end="269:36"><expr pos:start="269:9" pos:end="269:35"><call pos:start="269:9" pos:end="269:35"><name pos:start="269:9" pos:end="269:23">av_buffer_unref</name><argument_list pos:start="269:24" pos:end="269:35">(<argument pos:start="269:25" pos:end="269:34"><expr pos:start="269:25" pos:end="269:34"><operator pos:start="269:25" pos:end="269:25">&amp;</operator><name pos:start="269:26" pos:end="269:34">dummy_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="271:9" pos:end="271:19">return <expr pos:start="271:16" pos:end="271:18"><name pos:start="271:16" pos:end="271:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="275:1" pos:end="275:6">#<cpp:directive pos:start="275:2" pos:end="275:6">endif</cpp:directive></cpp:endif>



    <return pos:start="279:5" pos:end="279:51">return <expr pos:start="279:12" pos:end="279:50"><call pos:start="279:12" pos:end="279:50"><name pos:start="279:12" pos:end="279:29"><name pos:start="279:12" pos:end="279:16">avctx</name><operator pos:start="279:17" pos:end="279:18">-&gt;</operator><name pos:start="279:19" pos:end="279:29">get_buffer2</name></name><argument_list pos:start="279:30" pos:end="279:50">(<argument pos:start="279:31" pos:end="279:35"><expr pos:start="279:31" pos:end="279:35"><name pos:start="279:31" pos:end="279:35">avctx</name></expr></argument>, <argument pos:start="279:38" pos:end="279:42"><expr pos:start="279:38" pos:end="279:42"><name pos:start="279:38" pos:end="279:42">frame</name></expr></argument>, <argument pos:start="279:45" pos:end="279:49"><expr pos:start="279:45" pos:end="279:49"><name pos:start="279:45" pos:end="279:49">flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
