<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6928.c" pos:tabs="8"><function pos:start="1:1" pos:end="61:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">m25p80_init</name><parameter_list pos:start="1:23" pos:end="1:36">(<parameter pos:start="1:24" pos:end="1:35"><decl pos:start="1:24" pos:end="1:35"><type pos:start="1:24" pos:end="1:33"><name pos:start="1:24" pos:end="1:31">SSISlave</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:35">ss</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="61:1">{<block_content pos:start="5:5" pos:end="59:13">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">DriveInfo</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:9">Flash</name> <modifier pos:start="7:11" pos:end="7:11">*</modifier></type><name pos:start="7:12" pos:end="7:12">s</name> <init pos:start="7:14" pos:end="7:25">= <expr pos:start="7:16" pos:end="7:25"><call pos:start="7:16" pos:end="7:25"><name pos:start="7:16" pos:end="7:21">M25P80</name><argument_list pos:start="7:22" pos:end="7:25">(<argument pos:start="7:23" pos:end="7:24"><expr pos:start="7:23" pos:end="7:24"><name pos:start="7:23" pos:end="7:24">ss</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:42"><decl pos:start="9:5" pos:end="9:41"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">M25P80Class</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:19">mc</name> <init pos:start="9:21" pos:end="9:41">= <expr pos:start="9:23" pos:end="9:41"><call pos:start="9:23" pos:end="9:41"><name pos:start="9:23" pos:end="9:38">M25P80_GET_CLASS</name><argument_list pos:start="9:39" pos:end="9:41">(<argument pos:start="9:40" pos:end="9:40"><expr pos:start="9:40" pos:end="9:40"><name pos:start="9:40" pos:end="9:40">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:19"><expr pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:9"><name pos:start="13:5" pos:end="13:5">s</name><operator pos:start="13:6" pos:end="13:7">-&gt;</operator><name pos:start="13:8" pos:end="13:9">pi</name></name> <operator pos:start="13:11" pos:end="13:11">=</operator> <name pos:start="13:13" pos:end="13:18"><name pos:start="13:13" pos:end="13:14">mc</name><operator pos:start="13:15" pos:end="13:16">-&gt;</operator><name pos:start="13:17" pos:end="13:18">pi</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:52"><expr pos:start="17:5" pos:end="17:51"><name pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:5">s</name><operator pos:start="17:6" pos:end="17:7">-&gt;</operator><name pos:start="17:8" pos:end="17:11">size</name></name> <operator pos:start="17:13" pos:end="17:13">=</operator> <name pos:start="17:15" pos:end="17:32"><name pos:start="17:15" pos:end="17:15">s</name><operator pos:start="17:16" pos:end="17:17">-&gt;</operator><name pos:start="17:18" pos:end="17:19">pi</name><operator pos:start="17:20" pos:end="17:21">-&gt;</operator><name pos:start="17:22" pos:end="17:32">sector_size</name></name> <operator pos:start="17:34" pos:end="17:34">*</operator> <name pos:start="17:36" pos:end="17:51"><name pos:start="17:36" pos:end="17:36">s</name><operator pos:start="17:37" pos:end="17:38">-&gt;</operator><name pos:start="17:39" pos:end="17:40">pi</name><operator pos:start="17:41" pos:end="17:42">-&gt;</operator><name pos:start="17:43" pos:end="17:51">n_sectors</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:23"><expr pos:start="19:5" pos:end="19:22"><name pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:5">s</name><operator pos:start="19:6" pos:end="19:7">-&gt;</operator><name pos:start="19:8" pos:end="19:17">dirty_page</name></name> <operator pos:start="19:19" pos:end="19:19">=</operator> <operator pos:start="19:21" pos:end="19:21">-</operator><literal type="number" pos:start="19:22" pos:end="19:22">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:51"><expr pos:start="21:5" pos:end="21:50"><name pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:5">s</name><operator pos:start="21:6" pos:end="21:7">-&gt;</operator><name pos:start="21:8" pos:end="21:14">storage</name></name> <operator pos:start="21:16" pos:end="21:16">=</operator> <call pos:start="21:18" pos:end="21:50"><name pos:start="21:18" pos:end="21:32">qemu_blockalign</name><argument_list pos:start="21:33" pos:end="21:50">(<argument pos:start="21:34" pos:end="21:40"><expr pos:start="21:34" pos:end="21:40"><name pos:start="21:34" pos:end="21:40"><name pos:start="21:34" pos:end="21:34">s</name><operator pos:start="21:35" pos:end="21:36">-&gt;</operator><name pos:start="21:37" pos:end="21:40">bdrv</name></name></expr></argument>, <argument pos:start="21:43" pos:end="21:49"><expr pos:start="21:43" pos:end="21:49"><name pos:start="21:43" pos:end="21:49"><name pos:start="21:43" pos:end="21:43">s</name><operator pos:start="21:44" pos:end="21:45">-&gt;</operator><name pos:start="21:46" pos:end="21:49">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:35"><expr pos:start="25:5" pos:end="25:34"><name pos:start="25:5" pos:end="25:9">dinfo</name> <operator pos:start="25:11" pos:end="25:11">=</operator> <call pos:start="25:13" pos:end="25:34"><name pos:start="25:13" pos:end="25:26">drive_get_next</name><argument_list pos:start="25:27" pos:end="25:34">(<argument pos:start="25:28" pos:end="25:33"><expr pos:start="25:28" pos:end="25:33"><name pos:start="25:28" pos:end="25:33">IF_MTD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="29:5" pos:end="55:5"><if pos:start="29:5" pos:end="49:5">if <condition pos:start="29:8" pos:end="29:14">(<expr pos:start="29:9" pos:end="29:13"><name pos:start="29:9" pos:end="29:13">dinfo</name></expr>)</condition> <block pos:start="29:16" pos:end="49:5">{<block_content pos:start="31:9" pos:end="47:9">

        <expr_stmt pos:start="31:9" pos:end="31:51"><expr pos:start="31:9" pos:end="31:50"><call pos:start="31:9" pos:end="31:50"><name pos:start="31:9" pos:end="31:18">DB_PRINT_L</name><argument_list pos:start="31:19" pos:end="31:50">(<argument pos:start="31:20" pos:end="31:20"><expr pos:start="31:20" pos:end="31:20"><literal type="number" pos:start="31:20" pos:end="31:20">0</literal></expr></argument>, <argument pos:start="31:23" pos:end="31:49"><expr pos:start="31:23" pos:end="31:49"><literal type="string" pos:start="31:23" pos:end="31:49">"Binding to IF_MTD drive\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:53"><expr pos:start="33:9" pos:end="33:52"><name pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:9">s</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:15">bdrv</name></name> <operator pos:start="33:17" pos:end="33:17">=</operator> <call pos:start="33:19" pos:end="33:52"><name pos:start="33:19" pos:end="33:24">blk_bs</name><argument_list pos:start="33:25" pos:end="33:52">(<argument pos:start="33:26" pos:end="33:51"><expr pos:start="33:26" pos:end="33:51"><call pos:start="33:26" pos:end="33:51"><name pos:start="33:26" pos:end="33:44">blk_by_legacy_dinfo</name><argument_list pos:start="33:45" pos:end="33:51">(<argument pos:start="33:46" pos:end="33:50"><expr pos:start="33:46" pos:end="33:50"><name pos:start="33:46" pos:end="33:50">dinfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="37:9" pos:end="37:38">/* FIXME: Move to late init */</comment>

        <if_stmt pos:start="39:9" pos:end="47:9"><if pos:start="39:9" pos:end="47:9">if <condition pos:start="39:12" pos:end="41:71">(<expr pos:start="39:13" pos:end="41:70"><call pos:start="39:13" pos:end="41:70"><name pos:start="39:13" pos:end="39:21">bdrv_read</name><argument_list pos:start="39:22" pos:end="41:70">(<argument pos:start="39:23" pos:end="39:29"><expr pos:start="39:23" pos:end="39:29"><name pos:start="39:23" pos:end="39:29"><name pos:start="39:23" pos:end="39:23">s</name><operator pos:start="39:24" pos:end="39:25">-&gt;</operator><name pos:start="39:26" pos:end="39:29">bdrv</name></name></expr></argument>, <argument pos:start="39:32" pos:end="39:32"><expr pos:start="39:32" pos:end="39:32"><literal type="number" pos:start="39:32" pos:end="39:32">0</literal></expr></argument>, <argument pos:start="39:35" pos:end="39:44"><expr pos:start="39:35" pos:end="39:44"><name pos:start="39:35" pos:end="39:44"><name pos:start="39:35" pos:end="39:35">s</name><operator pos:start="39:36" pos:end="39:37">-&gt;</operator><name pos:start="39:38" pos:end="39:44">storage</name></name></expr></argument>, <argument pos:start="39:47" pos:end="41:69"><expr pos:start="39:47" pos:end="41:69"><call pos:start="39:47" pos:end="41:69"><name pos:start="39:47" pos:end="39:58">DIV_ROUND_UP</name><argument_list pos:start="39:59" pos:end="41:69">(<argument pos:start="39:60" pos:end="39:66"><expr pos:start="39:60" pos:end="39:66"><name pos:start="39:60" pos:end="39:66"><name pos:start="39:60" pos:end="39:60">s</name><operator pos:start="39:61" pos:end="39:62">-&gt;</operator><name pos:start="39:63" pos:end="39:66">size</name></name></expr></argument>,

                                                    <argument pos:start="41:53" pos:end="41:68"><expr pos:start="41:53" pos:end="41:68"><name pos:start="41:53" pos:end="41:68">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="41:73" pos:end="47:9">{<block_content pos:start="43:13" pos:end="45:21">

            <expr_stmt pos:start="43:13" pos:end="43:65"><expr pos:start="43:13" pos:end="43:64"><call pos:start="43:13" pos:end="43:64"><name pos:start="43:13" pos:end="43:19">fprintf</name><argument_list pos:start="43:20" pos:end="43:64">(<argument pos:start="43:21" pos:end="43:26"><expr pos:start="43:21" pos:end="43:26"><name pos:start="43:21" pos:end="43:26">stderr</name></expr></argument>, <argument pos:start="43:29" pos:end="43:63"><expr pos:start="43:29" pos:end="43:63"><literal type="string" pos:start="43:29" pos:end="43:63">"Failed to initialize SPI flash!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="45:13" pos:end="45:21">return <expr pos:start="45:20" pos:end="45:20"><literal type="number" pos:start="45:20" pos:end="45:20">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="49:7" pos:end="55:5">else <block pos:start="49:12" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:42">

        <expr_stmt pos:start="51:9" pos:end="51:52"><expr pos:start="51:9" pos:end="51:51"><call pos:start="51:9" pos:end="51:51"><name pos:start="51:9" pos:end="51:18">DB_PRINT_L</name><argument_list pos:start="51:19" pos:end="51:51">(<argument pos:start="51:20" pos:end="51:20"><expr pos:start="51:20" pos:end="51:20"><literal type="number" pos:start="51:20" pos:end="51:20">0</literal></expr></argument>, <argument pos:start="51:23" pos:end="51:50"><expr pos:start="51:23" pos:end="51:50"><literal type="string" pos:start="51:23" pos:end="51:50">"No BDRV - binding to RAM\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:42"><expr pos:start="53:9" pos:end="53:41"><call pos:start="53:9" pos:end="53:41"><name pos:start="53:9" pos:end="53:14">memset</name><argument_list pos:start="53:15" pos:end="53:41">(<argument pos:start="53:16" pos:end="53:25"><expr pos:start="53:16" pos:end="53:25"><name pos:start="53:16" pos:end="53:25"><name pos:start="53:16" pos:end="53:16">s</name><operator pos:start="53:17" pos:end="53:18">-&gt;</operator><name pos:start="53:19" pos:end="53:25">storage</name></name></expr></argument>, <argument pos:start="53:28" pos:end="53:31"><expr pos:start="53:28" pos:end="53:31"><literal type="number" pos:start="53:28" pos:end="53:31">0xFF</literal></expr></argument>, <argument pos:start="53:34" pos:end="53:40"><expr pos:start="53:34" pos:end="53:40"><name pos:start="53:34" pos:end="53:40"><name pos:start="53:34" pos:end="53:34">s</name><operator pos:start="53:35" pos:end="53:36">-&gt;</operator><name pos:start="53:37" pos:end="53:40">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="59:5" pos:end="59:13">return <expr pos:start="59:12" pos:end="59:12"><literal type="number" pos:start="59:12" pos:end="59:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
