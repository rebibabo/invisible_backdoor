<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11609.c" pos:tabs="8"><function pos:start="1:1" pos:end="51:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">x86_cpu_apic_create</name><parameter_list pos:start="1:32" pos:end="1:58">(<parameter pos:start="1:33" pos:end="1:43"><decl pos:start="1:33" pos:end="1:43"><type pos:start="1:33" pos:end="1:43"><name pos:start="1:33" pos:end="1:38">X86CPU</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">cpu</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:57"><decl pos:start="1:46" pos:end="1:57"><type pos:start="1:46" pos:end="1:57"><name pos:start="1:46" pos:end="1:50">Error</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier><modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:57">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="51:1">{<block_content pos:start="5:5" pos:end="49:69">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">DeviceState</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:20">dev</name> <init pos:start="5:22" pos:end="5:34">= <expr pos:start="5:24" pos:end="5:34"><call pos:start="5:24" pos:end="5:34"><name pos:start="5:24" pos:end="5:29">DEVICE</name><argument_list pos:start="5:30" pos:end="5:34">(<argument pos:start="5:31" pos:end="5:33"><expr pos:start="5:31" pos:end="5:33"><name pos:start="5:31" pos:end="5:33">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:19">APICCommonState</name> <modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:25">apic</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:35"><decl pos:start="9:5" pos:end="9:34"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:25">apic_type</name> <init pos:start="9:27" pos:end="9:34">= <expr pos:start="9:29" pos:end="9:34"><literal type="string" pos:start="9:29" pos:end="9:34">"apic"</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="21:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:32">(<expr pos:start="13:9" pos:end="13:31"><call pos:start="13:9" pos:end="13:31"><name pos:start="13:9" pos:end="13:29">kvm_irqchip_in_kernel</name><argument_list pos:start="13:30" pos:end="13:31">()</argument_list></call></expr>)</condition> <block pos:start="13:34" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:31">

        <expr_stmt pos:start="15:9" pos:end="15:31"><expr pos:start="15:9" pos:end="15:30"><name pos:start="15:9" pos:end="15:17">apic_type</name> <operator pos:start="15:19" pos:end="15:19">=</operator> <literal type="string" pos:start="15:21" pos:end="15:30">"kvm-apic"</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="17:7" pos:end="21:5">else if <condition pos:start="17:15" pos:end="17:29">(<expr pos:start="17:16" pos:end="17:28"><call pos:start="17:16" pos:end="17:28"><name pos:start="17:16" pos:end="17:26">xen_enabled</name><argument_list pos:start="17:27" pos:end="17:28">()</argument_list></call></expr>)</condition> <block pos:start="17:31" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:31">

        <expr_stmt pos:start="19:9" pos:end="19:31"><expr pos:start="19:9" pos:end="19:30"><name pos:start="19:9" pos:end="19:17">apic_type</name> <operator pos:start="19:19" pos:end="19:19">=</operator> <literal type="string" pos:start="19:21" pos:end="19:30">"xen-apic"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:75"><expr pos:start="25:5" pos:end="25:74"><name pos:start="25:5" pos:end="25:19"><name pos:start="25:5" pos:end="25:7">cpu</name><operator pos:start="25:8" pos:end="25:9">-&gt;</operator><name pos:start="25:10" pos:end="25:19">apic_state</name></name> <operator pos:start="25:21" pos:end="25:21">=</operator> <call pos:start="25:23" pos:end="25:74"><name pos:start="25:23" pos:end="25:37">qdev_try_create</name><argument_list pos:start="25:38" pos:end="25:74">(<argument pos:start="25:39" pos:end="25:62"><expr pos:start="25:39" pos:end="25:62"><call pos:start="25:39" pos:end="25:62"><name pos:start="25:39" pos:end="25:57">qdev_get_parent_bus</name><argument_list pos:start="25:58" pos:end="25:62">(<argument pos:start="25:59" pos:end="25:61"><expr pos:start="25:59" pos:end="25:61"><name pos:start="25:59" pos:end="25:61">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="25:65" pos:end="25:73"><expr pos:start="25:65" pos:end="25:73"><name pos:start="25:65" pos:end="25:73">apic_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:32">(<expr pos:start="27:9" pos:end="27:31"><name pos:start="27:9" pos:end="27:23"><name pos:start="27:9" pos:end="27:11">cpu</name><operator pos:start="27:12" pos:end="27:13">-&gt;</operator><name pos:start="27:14" pos:end="27:23">apic_state</name></name> <operator pos:start="27:25" pos:end="27:26">==</operator> <name pos:start="27:28" pos:end="27:31">NULL</name></expr>)</condition> <block pos:start="27:34" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:15">

        <expr_stmt pos:start="29:9" pos:end="29:77"><expr pos:start="29:9" pos:end="29:76"><call pos:start="29:9" pos:end="29:76"><name pos:start="29:9" pos:end="29:18">error_setg</name><argument_list pos:start="29:19" pos:end="29:76">(<argument pos:start="29:20" pos:end="29:23"><expr pos:start="29:20" pos:end="29:23"><name pos:start="29:20" pos:end="29:23">errp</name></expr></argument>, <argument pos:start="29:26" pos:end="29:64"><expr pos:start="29:26" pos:end="29:64"><literal type="string" pos:start="29:26" pos:end="29:64">"APIC device '%s' could not be created"</literal></expr></argument>, <argument pos:start="29:67" pos:end="29:75"><expr pos:start="29:67" pos:end="29:75"><name pos:start="29:67" pos:end="29:75">apic_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="39:61"><expr pos:start="37:5" pos:end="39:60"><call pos:start="37:5" pos:end="39:60"><name pos:start="37:5" pos:end="37:29">object_property_add_child</name><argument_list pos:start="37:30" pos:end="39:60">(<argument pos:start="37:31" pos:end="37:41"><expr pos:start="37:31" pos:end="37:41"><call pos:start="37:31" pos:end="37:41"><name pos:start="37:31" pos:end="37:36">OBJECT</name><argument_list pos:start="37:37" pos:end="37:41">(<argument pos:start="37:38" pos:end="37:40"><expr pos:start="37:38" pos:end="37:40"><name pos:start="37:38" pos:end="37:40">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="37:44" pos:end="37:49"><expr pos:start="37:44" pos:end="37:49"><literal type="string" pos:start="37:44" pos:end="37:49">"apic"</literal></expr></argument>,

                              <argument pos:start="39:31" pos:end="39:53"><expr pos:start="39:31" pos:end="39:53"><call pos:start="39:31" pos:end="39:53"><name pos:start="39:31" pos:end="39:36">OBJECT</name><argument_list pos:start="39:37" pos:end="39:53">(<argument pos:start="39:38" pos:end="39:52"><expr pos:start="39:38" pos:end="39:52"><name pos:start="39:38" pos:end="39:52"><name pos:start="39:38" pos:end="39:40">cpu</name><operator pos:start="39:41" pos:end="39:42">-&gt;</operator><name pos:start="39:43" pos:end="39:52">apic_state</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="39:56" pos:end="39:59"><expr pos:start="39:56" pos:end="39:59"><name pos:start="39:56" pos:end="39:59">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:61"><expr pos:start="41:5" pos:end="41:60"><call pos:start="41:5" pos:end="41:60"><name pos:start="41:5" pos:end="41:23">qdev_prop_set_uint8</name><argument_list pos:start="41:24" pos:end="41:60">(<argument pos:start="41:25" pos:end="41:39"><expr pos:start="41:25" pos:end="41:39"><name pos:start="41:25" pos:end="41:39"><name pos:start="41:25" pos:end="41:27">cpu</name><operator pos:start="41:28" pos:end="41:29">-&gt;</operator><name pos:start="41:30" pos:end="41:39">apic_state</name></name></expr></argument>, <argument pos:start="41:42" pos:end="41:45"><expr pos:start="41:42" pos:end="41:45"><literal type="string" pos:start="41:42" pos:end="41:45">"id"</literal></expr></argument>, <argument pos:start="41:48" pos:end="41:59"><expr pos:start="41:48" pos:end="41:59"><name pos:start="41:48" pos:end="41:59"><name pos:start="41:48" pos:end="41:50">cpu</name><operator pos:start="41:51" pos:end="41:52">-&gt;</operator><name pos:start="41:53" pos:end="41:59">apic_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="43:5" pos:end="43:33">/* TODO: convert to link&lt;&gt; */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:40"><expr pos:start="45:5" pos:end="45:39"><name pos:start="45:5" pos:end="45:8">apic</name> <operator pos:start="45:10" pos:end="45:10">=</operator> <call pos:start="45:12" pos:end="45:39"><name pos:start="45:12" pos:end="45:22">APIC_COMMON</name><argument_list pos:start="45:23" pos:end="45:39">(<argument pos:start="45:24" pos:end="45:38"><expr pos:start="45:24" pos:end="45:38"><name pos:start="45:24" pos:end="45:38"><name pos:start="45:24" pos:end="45:26">cpu</name><operator pos:start="45:27" pos:end="45:28">-&gt;</operator><name pos:start="45:29" pos:end="45:38">apic_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:20"><expr pos:start="47:5" pos:end="47:19"><name pos:start="47:5" pos:end="47:13"><name pos:start="47:5" pos:end="47:8">apic</name><operator pos:start="47:9" pos:end="47:10">-&gt;</operator><name pos:start="47:11" pos:end="47:13">cpu</name></name> <operator pos:start="47:15" pos:end="47:15">=</operator> <name pos:start="47:17" pos:end="47:19">cpu</name></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:69"><expr pos:start="49:5" pos:end="49:68"><name pos:start="49:5" pos:end="49:18"><name pos:start="49:5" pos:end="49:8">apic</name><operator pos:start="49:9" pos:end="49:10">-&gt;</operator><name pos:start="49:11" pos:end="49:18">apicbase</name></name> <operator pos:start="49:20" pos:end="49:20">=</operator> <name pos:start="49:22" pos:end="49:41">APIC_DEFAULT_ADDRESS</name> <operator pos:start="49:43" pos:end="49:43">|</operator> <name pos:start="49:45" pos:end="49:68">MSR_IA32_APICBASE_ENABLE</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
