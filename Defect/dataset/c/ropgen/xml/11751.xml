<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11751.c" pos:tabs="8"><function pos:start="1:1" pos:end="46:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">commit_complete</name><parameter_list pos:start="1:28" pos:end="1:56">(<parameter pos:start="1:29" pos:end="1:41"><decl pos:start="1:29" pos:end="1:41"><type pos:start="1:29" pos:end="1:41"><name pos:start="1:29" pos:end="1:36">BlockJob</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">job</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:55"><decl pos:start="1:44" pos:end="1:55"><type pos:start="1:44" pos:end="1:55"><name pos:start="1:44" pos:end="1:47">void</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:55">opaque</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="46:1">{<block_content pos:start="3:5" pos:end="45:5">
    <decl_stmt pos:start="3:5" pos:end="3:66"><decl pos:start="3:5" pos:end="3:65"><type pos:start="3:5" pos:end="3:20"><name pos:start="3:5" pos:end="3:18">CommitBlockJob</name> <modifier pos:start="3:20" pos:end="3:20">*</modifier></type><name pos:start="3:21" pos:end="3:21">s</name> <init pos:start="3:23" pos:end="3:65">= <expr pos:start="3:25" pos:end="3:65"><call pos:start="3:25" pos:end="3:65"><name pos:start="3:25" pos:end="3:36">container_of</name><argument_list pos:start="3:37" pos:end="3:65">(<argument pos:start="3:38" pos:end="3:40"><expr pos:start="3:38" pos:end="3:40"><name pos:start="3:38" pos:end="3:40">job</name></expr></argument>, <argument pos:start="3:43" pos:end="3:56"><expr pos:start="3:43" pos:end="3:56"><name pos:start="3:43" pos:end="3:56">CommitBlockJob</name></expr></argument>, <argument pos:start="3:59" pos:end="3:64"><expr pos:start="3:59" pos:end="3:64"><name pos:start="3:59" pos:end="3:64">common</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:38"><decl pos:start="4:5" pos:end="4:37"><type pos:start="4:5" pos:end="4:24"><name pos:start="4:5" pos:end="4:22">CommitCompleteData</name> <modifier pos:start="4:24" pos:end="4:24">*</modifier></type><name pos:start="4:25" pos:end="4:28">data</name> <init pos:start="4:30" pos:end="4:37">= <expr pos:start="4:32" pos:end="4:37"><name pos:start="4:32" pos:end="4:37">opaque</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">BlockDriverState</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:28">active</name> <init pos:start="5:30" pos:end="5:40">= <expr pos:start="5:32" pos:end="5:40"><name pos:start="5:32" pos:end="5:40"><name pos:start="5:32" pos:end="5:32">s</name><operator pos:start="5:33" pos:end="5:34">-&gt;</operator><name pos:start="5:35" pos:end="5:40">active</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:43"><decl pos:start="6:5" pos:end="6:42"><type pos:start="6:5" pos:end="6:22"><name pos:start="6:5" pos:end="6:20">BlockDriverState</name> <modifier pos:start="6:22" pos:end="6:22">*</modifier></type><name pos:start="6:23" pos:end="6:25">top</name> <init pos:start="6:27" pos:end="6:42">= <expr pos:start="6:29" pos:end="6:42"><call pos:start="6:29" pos:end="6:42"><name pos:start="6:29" pos:end="6:34">blk_bs</name><argument_list pos:start="6:35" pos:end="6:42">(<argument pos:start="6:36" pos:end="6:41"><expr pos:start="6:36" pos:end="6:41"><name pos:start="6:36" pos:end="6:41"><name pos:start="6:36" pos:end="6:36">s</name><operator pos:start="6:37" pos:end="6:38">-&gt;</operator><name pos:start="6:39" pos:end="6:41">top</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:45"><decl pos:start="7:5" pos:end="7:44"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">BlockDriverState</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:26">base</name> <init pos:start="7:28" pos:end="7:44">= <expr pos:start="7:30" pos:end="7:44"><call pos:start="7:30" pos:end="7:44"><name pos:start="7:30" pos:end="7:35">blk_bs</name><argument_list pos:start="7:36" pos:end="7:44">(<argument pos:start="7:37" pos:end="7:43"><expr pos:start="7:37" pos:end="7:43"><name pos:start="7:37" pos:end="7:43"><name pos:start="7:37" pos:end="7:37">s</name><operator pos:start="7:38" pos:end="7:39">-&gt;</operator><name pos:start="7:40" pos:end="7:43">base</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:79"><decl pos:start="8:5" pos:end="8:78"><type pos:start="8:5" pos:end="8:22"><name pos:start="8:5" pos:end="8:20">BlockDriverState</name> <modifier pos:start="8:22" pos:end="8:22">*</modifier></type><name pos:start="8:23" pos:end="8:32">overlay_bs</name> <init pos:start="8:34" pos:end="8:78">= <expr pos:start="8:36" pos:end="8:78"><call pos:start="8:36" pos:end="8:78"><name pos:start="8:36" pos:end="8:52">bdrv_find_overlay</name><argument_list pos:start="8:53" pos:end="8:78">(<argument pos:start="8:54" pos:end="8:59"><expr pos:start="8:54" pos:end="8:59"><name pos:start="8:54" pos:end="8:59">active</name></expr></argument>, <argument pos:start="8:62" pos:end="8:77"><expr pos:start="8:62" pos:end="8:77"><name pos:start="8:62" pos:end="8:77"><name pos:start="8:62" pos:end="8:62">s</name><operator pos:start="8:63" pos:end="8:64">-&gt;</operator><name pos:start="8:65" pos:end="8:77">commit_top_bs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name> <init pos:start="9:13" pos:end="9:23">= <expr pos:start="9:15" pos:end="9:23"><name pos:start="9:15" pos:end="9:23"><name pos:start="9:15" pos:end="9:18">data</name><operator pos:start="9:19" pos:end="9:20">-&gt;</operator><name pos:start="9:21" pos:end="9:23">ret</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:38"><decl pos:start="10:5" pos:end="10:37"><type pos:start="10:5" pos:end="10:8"><name pos:start="10:5" pos:end="10:8">bool</name></type> <name pos:start="10:10" pos:end="10:29">remove_commit_top_bs</name> <init pos:start="10:31" pos:end="10:37">= <expr pos:start="10:33" pos:end="10:37"><name pos:start="10:33" pos:end="10:37">false</name></expr></init></decl>;</decl_stmt>
    <comment type="block" pos:start="11:5" pos:end="11:78">/* Make sure overlay_bs and top stay around until bdrv_set_backing_hd() */</comment>
    <expr_stmt pos:start="12:5" pos:end="12:18"><expr pos:start="12:5" pos:end="12:17"><call pos:start="12:5" pos:end="12:17"><name pos:start="12:5" pos:end="12:12">bdrv_ref</name><argument_list pos:start="12:13" pos:end="12:17">(<argument pos:start="12:14" pos:end="12:16"><expr pos:start="12:14" pos:end="12:16"><name pos:start="12:14" pos:end="12:16">top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="13:5" pos:end="13:25"><expr pos:start="13:5" pos:end="13:24"><call pos:start="13:5" pos:end="13:24"><name pos:start="13:5" pos:end="13:12">bdrv_ref</name><argument_list pos:start="13:13" pos:end="13:24">(<argument pos:start="13:14" pos:end="13:23"><expr pos:start="13:14" pos:end="13:23"><name pos:start="13:14" pos:end="13:23">overlay_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="14:5" pos:end="15:51">/* Remove base node parent that still uses BLK_PERM_WRITE/RESIZE before
     * the normal backing chain can be restored. */</comment>
    <expr_stmt pos:start="16:5" pos:end="16:23"><expr pos:start="16:5" pos:end="16:22"><call pos:start="16:5" pos:end="16:22"><name pos:start="16:5" pos:end="16:13">blk_unref</name><argument_list pos:start="16:14" pos:end="16:22">(<argument pos:start="16:15" pos:end="16:21"><expr pos:start="16:15" pos:end="16:21"><name pos:start="16:15" pos:end="16:21"><name pos:start="16:15" pos:end="16:15">s</name><operator pos:start="16:16" pos:end="16:17">-&gt;</operator><name pos:start="16:18" pos:end="16:21">base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="17:5" pos:end="26:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:56">(<expr pos:start="17:9" pos:end="17:55"><operator pos:start="17:9" pos:end="17:9">!</operator><call pos:start="17:10" pos:end="17:43"><name pos:start="17:10" pos:end="17:31">block_job_is_cancelled</name><argument_list pos:start="17:32" pos:end="17:43">(<argument pos:start="17:33" pos:end="17:42"><expr pos:start="17:33" pos:end="17:42"><operator pos:start="17:33" pos:end="17:33">&amp;</operator><name pos:start="17:34" pos:end="17:42"><name pos:start="17:34" pos:end="17:34">s</name><operator pos:start="17:35" pos:end="17:36">-&gt;</operator><name pos:start="17:37" pos:end="17:42">common</name></name></expr></argument>)</argument_list></call> <operator pos:start="17:45" pos:end="17:46">&amp;&amp;</operator> <name pos:start="17:48" pos:end="17:50">ret</name> <operator pos:start="17:52" pos:end="17:53">==</operator> <literal type="number" pos:start="17:55" pos:end="17:55">0</literal></expr>)</condition> <block pos:start="17:58" pos:end="21:5">{<block_content pos:start="19:9" pos:end="20:58">
        <comment type="block" pos:start="18:9" pos:end="18:21">/* success */</comment>
        <expr_stmt pos:start="19:9" pos:end="20:58"><expr pos:start="19:9" pos:end="20:57"><name pos:start="19:9" pos:end="19:11">ret</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <call pos:start="19:15" pos:end="20:57"><name pos:start="19:15" pos:end="19:36">bdrv_drop_intermediate</name><argument_list pos:start="19:37" pos:end="20:57">(<argument pos:start="19:38" pos:end="19:43"><expr pos:start="19:38" pos:end="19:43"><name pos:start="19:38" pos:end="19:43">active</name></expr></argument>, <argument pos:start="19:46" pos:end="19:61"><expr pos:start="19:46" pos:end="19:61"><name pos:start="19:46" pos:end="19:61"><name pos:start="19:46" pos:end="19:46">s</name><operator pos:start="19:47" pos:end="19:48">-&gt;</operator><name pos:start="19:49" pos:end="19:61">commit_top_bs</name></name></expr></argument>, <argument pos:start="19:64" pos:end="19:67"><expr pos:start="19:64" pos:end="19:67"><name pos:start="19:64" pos:end="19:67">base</name></expr></argument>,
                                     <argument pos:start="20:38" pos:end="20:56"><expr pos:start="20:38" pos:end="20:56"><name pos:start="20:38" pos:end="20:56"><name pos:start="20:38" pos:end="20:38">s</name><operator pos:start="20:39" pos:end="20:40">-&gt;</operator><name pos:start="20:41" pos:end="20:56">backing_file_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="21:7" pos:end="26:5">else if <condition pos:start="21:15" pos:end="21:26">(<expr pos:start="21:16" pos:end="21:25"><name pos:start="21:16" pos:end="21:25">overlay_bs</name></expr>)</condition> <block pos:start="21:28" pos:end="26:5">{<block_content pos:start="25:9" pos:end="25:36">
        <comment type="block" pos:start="22:9" pos:end="24:79">/* XXX Can (or should) we somehow keep 'consistent read' blocked even
         * after the failed/cancelled commit job is gone? If we already wrote
         * something to base, the intermediate images aren't valid any more. */</comment>
        <expr_stmt pos:start="25:9" pos:end="25:36"><expr pos:start="25:9" pos:end="25:35"><name pos:start="25:9" pos:end="25:28">remove_commit_top_bs</name> <operator pos:start="25:30" pos:end="25:30">=</operator> <name pos:start="25:32" pos:end="25:35">true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="27:5" pos:end="29:30">/* restore base open flags here if appropriate (e.g., change the base back
     * to r/o). These reopens do not need to be atomic, since we won't abort
     * even on failure here */</comment>
    <if_stmt pos:start="30:5" pos:end="32:5"><if pos:start="30:5" pos:end="32:5">if <condition pos:start="30:8" pos:end="30:46">(<expr pos:start="30:9" pos:end="30:45"><name pos:start="30:9" pos:end="30:21"><name pos:start="30:9" pos:end="30:9">s</name><operator pos:start="30:10" pos:end="30:11">-&gt;</operator><name pos:start="30:12" pos:end="30:21">base_flags</name></name> <operator pos:start="30:23" pos:end="30:24">!=</operator> <call pos:start="30:26" pos:end="30:45"><name pos:start="30:26" pos:end="30:39">bdrv_get_flags</name><argument_list pos:start="30:40" pos:end="30:45">(<argument pos:start="30:41" pos:end="30:44"><expr pos:start="30:41" pos:end="30:44"><name pos:start="30:41" pos:end="30:44">base</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="30:48" pos:end="32:5">{<block_content pos:start="31:9" pos:end="31:47">
        <expr_stmt pos:start="31:9" pos:end="31:47"><expr pos:start="31:9" pos:end="31:46"><call pos:start="31:9" pos:end="31:46"><name pos:start="31:9" pos:end="31:19">bdrv_reopen</name><argument_list pos:start="31:20" pos:end="31:46">(<argument pos:start="31:21" pos:end="31:24"><expr pos:start="31:21" pos:end="31:24"><name pos:start="31:21" pos:end="31:24">base</name></expr></argument>, <argument pos:start="31:27" pos:end="31:39"><expr pos:start="31:27" pos:end="31:39"><name pos:start="31:27" pos:end="31:39"><name pos:start="31:27" pos:end="31:27">s</name><operator pos:start="31:28" pos:end="31:29">-&gt;</operator><name pos:start="31:30" pos:end="31:39">base_flags</name></name></expr></argument>, <argument pos:start="31:42" pos:end="31:45"><expr pos:start="31:42" pos:end="31:45"><name pos:start="31:42" pos:end="31:45">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="33:5" pos:end="35:5"><if pos:start="33:5" pos:end="35:5">if <condition pos:start="33:8" pos:end="33:74">(<expr pos:start="33:9" pos:end="33:73"><name pos:start="33:9" pos:end="33:18">overlay_bs</name> <operator pos:start="33:20" pos:end="33:21">&amp;&amp;</operator> <name pos:start="33:23" pos:end="33:43"><name pos:start="33:23" pos:end="33:23">s</name><operator pos:start="33:24" pos:end="33:25">-&gt;</operator><name pos:start="33:26" pos:end="33:43">orig_overlay_flags</name></name> <operator pos:start="33:45" pos:end="33:46">!=</operator> <call pos:start="33:48" pos:end="33:73"><name pos:start="33:48" pos:end="33:61">bdrv_get_flags</name><argument_list pos:start="33:62" pos:end="33:73">(<argument pos:start="33:63" pos:end="33:72"><expr pos:start="33:63" pos:end="33:72"><name pos:start="33:63" pos:end="33:72">overlay_bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:76" pos:end="35:5">{<block_content pos:start="34:9" pos:end="34:61">
        <expr_stmt pos:start="34:9" pos:end="34:61"><expr pos:start="34:9" pos:end="34:60"><call pos:start="34:9" pos:end="34:60"><name pos:start="34:9" pos:end="34:19">bdrv_reopen</name><argument_list pos:start="34:20" pos:end="34:60">(<argument pos:start="34:21" pos:end="34:30"><expr pos:start="34:21" pos:end="34:30"><name pos:start="34:21" pos:end="34:30">overlay_bs</name></expr></argument>, <argument pos:start="34:33" pos:end="34:53"><expr pos:start="34:33" pos:end="34:53"><name pos:start="34:33" pos:end="34:53"><name pos:start="34:33" pos:end="34:33">s</name><operator pos:start="34:34" pos:end="34:35">-&gt;</operator><name pos:start="34:36" pos:end="34:53">orig_overlay_flags</name></name></expr></argument>, <argument pos:start="34:56" pos:end="34:59"><expr pos:start="34:56" pos:end="34:59"><name pos:start="34:56" pos:end="34:59">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="36:5" pos:end="36:32"><expr pos:start="36:5" pos:end="36:31"><call pos:start="36:5" pos:end="36:31"><name pos:start="36:5" pos:end="36:10">g_free</name><argument_list pos:start="36:11" pos:end="36:31">(<argument pos:start="36:12" pos:end="36:30"><expr pos:start="36:12" pos:end="36:30"><name pos:start="36:12" pos:end="36:30"><name pos:start="36:12" pos:end="36:12">s</name><operator pos:start="36:13" pos:end="36:14">-&gt;</operator><name pos:start="36:15" pos:end="36:30">backing_file_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="37:5" pos:end="37:22"><expr pos:start="37:5" pos:end="37:21"><call pos:start="37:5" pos:end="37:21"><name pos:start="37:5" pos:end="37:13">blk_unref</name><argument_list pos:start="37:14" pos:end="37:21">(<argument pos:start="37:15" pos:end="37:20"><expr pos:start="37:15" pos:end="37:20"><name pos:start="37:15" pos:end="37:20"><name pos:start="37:15" pos:end="37:15">s</name><operator pos:start="37:16" pos:end="37:17">-&gt;</operator><name pos:start="37:18" pos:end="37:20">top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="38:5" pos:end="38:41"><expr pos:start="38:5" pos:end="38:40"><call pos:start="38:5" pos:end="38:40"><name pos:start="38:5" pos:end="38:23">block_job_completed</name><argument_list pos:start="38:24" pos:end="38:40">(<argument pos:start="38:25" pos:end="38:34"><expr pos:start="38:25" pos:end="38:34"><operator pos:start="38:25" pos:end="38:25">&amp;</operator><name pos:start="38:26" pos:end="38:34"><name pos:start="38:26" pos:end="38:26">s</name><operator pos:start="38:27" pos:end="38:28">-&gt;</operator><name pos:start="38:29" pos:end="38:34">common</name></name></expr></argument>, <argument pos:start="38:37" pos:end="38:39"><expr pos:start="38:37" pos:end="38:39"><name pos:start="38:37" pos:end="38:39">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="39:5" pos:end="39:17"><expr pos:start="39:5" pos:end="39:16"><call pos:start="39:5" pos:end="39:16"><name pos:start="39:5" pos:end="39:10">g_free</name><argument_list pos:start="39:11" pos:end="39:16">(<argument pos:start="39:12" pos:end="39:15"><expr pos:start="39:12" pos:end="39:15"><name pos:start="39:12" pos:end="39:15">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="40:5" pos:end="42:59">/* If bdrv_drop_intermediate() didn't already do that, remove the commit
     * filter driver from the backing chain. Do this as the final step so that
     * the 'consistent read' permission can be granted.  */</comment>
    <if_stmt pos:start="43:5" pos:end="45:5"><if pos:start="43:5" pos:end="45:5">if <condition pos:start="43:8" pos:end="43:29">(<expr pos:start="43:9" pos:end="43:28"><name pos:start="43:9" pos:end="43:28">remove_commit_top_bs</name></expr>)</condition> <block pos:start="43:31" pos:end="45:5">{<block_content pos:start="44:9" pos:end="44:59">
        <expr_stmt pos:start="44:9" pos:end="44:59"><expr pos:start="44:9" pos:end="44:58"><call pos:start="44:9" pos:end="44:58"><name pos:start="44:9" pos:end="44:27">bdrv_set_backing_hd</name><argument_list pos:start="44:28" pos:end="44:58">(<argument pos:start="44:29" pos:end="44:38"><expr pos:start="44:29" pos:end="44:38"><name pos:start="44:29" pos:end="44:38">overlay_bs</name></expr></argument>, <argument pos:start="44:41" pos:end="44:43"><expr pos:start="44:41" pos:end="44:43"><name pos:start="44:41" pos:end="44:43">top</name></expr></argument>, <argument pos:start="44:46" pos:end="44:57"><expr pos:start="44:46" pos:end="44:57"><operator pos:start="44:46" pos:end="44:46">&amp;</operator><name pos:start="44:47" pos:end="44:57">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function></unit>
