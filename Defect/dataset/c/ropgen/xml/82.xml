<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/82.c" pos:tabs="8"><function pos:start="1:1" pos:end="63:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:20">xics_alloc_block</name><parameter_list pos:start="1:21" pos:end="1:76">(<parameter pos:start="1:22" pos:end="1:35"><decl pos:start="1:22" pos:end="1:35"><type pos:start="1:22" pos:end="1:35"><name pos:start="1:22" pos:end="1:30">XICSState</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:35">icp</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:44"><decl pos:start="1:38" pos:end="1:44"><type pos:start="1:38" pos:end="1:44"><name pos:start="1:38" pos:end="1:40">int</name></type> <name pos:start="1:42" pos:end="1:44">src</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:53"><decl pos:start="1:47" pos:end="1:53"><type pos:start="1:47" pos:end="1:53"><name pos:start="1:47" pos:end="1:49">int</name></type> <name pos:start="1:51" pos:end="1:53">num</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:63"><decl pos:start="1:56" pos:end="1:63"><type pos:start="1:56" pos:end="1:63"><name pos:start="1:56" pos:end="1:59">bool</name></type> <name pos:start="1:61" pos:end="1:63">lsi</name></decl></parameter>, <parameter pos:start="1:66" pos:end="1:75"><decl pos:start="1:66" pos:end="1:75"><type pos:start="1:66" pos:end="1:75"><name pos:start="1:66" pos:end="1:69">bool</name></type> <name pos:start="1:71" pos:end="1:75">align</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="63:1">{<block_content pos:start="5:5" pos:end="61:17">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:21"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:16">first</name> <init pos:start="5:18" pos:end="5:21">= <expr pos:start="5:20" pos:end="5:21"><operator pos:start="5:20" pos:end="5:20">-</operator><literal type="number" pos:start="5:21" pos:end="5:21">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">ICSState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:17">ics</name> <init pos:start="7:19" pos:end="7:34">= <expr pos:start="7:21" pos:end="7:34"><operator pos:start="7:21" pos:end="7:21">&amp;</operator><name pos:start="7:22" pos:end="7:34"><name pos:start="7:22" pos:end="7:24">icp</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:29">ics</name><index pos:start="7:30" pos:end="7:34">[<expr pos:start="7:31" pos:end="7:33"><name pos:start="7:31" pos:end="7:33">src</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:21"><expr pos:start="11:5" pos:end="11:20"><call pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:10">assert</name><argument_list pos:start="11:11" pos:end="11:20">(<argument pos:start="11:12" pos:end="11:19"><expr pos:start="11:12" pos:end="11:19"><name pos:start="11:12" pos:end="11:14">src</name> <operator pos:start="11:16" pos:end="11:17">==</operator> <literal type="number" pos:start="11:19" pos:end="11:19">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="13:5" pos:end="25:7">/*

     * MSIMesage::data is used for storing VIRQ so

     * it has to be aligned to num to support multiple

     * MSI vectors. MSI-X is not affected by this.

     * The hint is used for the first IRQ, the rest should

     * be allocated continuously.

     */</comment>

    <if_stmt pos:start="27:5" pos:end="39:5"><if pos:start="27:5" pos:end="35:5">if <condition pos:start="27:8" pos:end="27:14">(<expr pos:start="27:9" pos:end="27:13"><name pos:start="27:9" pos:end="27:13">align</name></expr>)</condition> <block pos:start="27:16" pos:end="35:5">{<block_content pos:start="29:9" pos:end="33:51">

        <expr_stmt pos:start="29:9" pos:end="31:57"><expr pos:start="29:9" pos:end="31:56"><call pos:start="29:9" pos:end="31:56"><name pos:start="29:9" pos:end="29:14">assert</name><argument_list pos:start="29:15" pos:end="31:56">(<argument pos:start="29:16" pos:end="31:55"><expr pos:start="29:16" pos:end="31:55"><operator pos:start="29:16" pos:end="29:16">(</operator><name pos:start="29:17" pos:end="29:19">num</name> <operator pos:start="29:21" pos:end="29:22">==</operator> <literal type="number" pos:start="29:24" pos:end="29:24">1</literal><operator pos:start="29:25" pos:end="29:25">)</operator> <operator pos:start="29:27" pos:end="29:28">||</operator> <operator pos:start="29:30" pos:end="29:30">(</operator><name pos:start="29:31" pos:end="29:33">num</name> <operator pos:start="29:35" pos:end="29:36">==</operator> <literal type="number" pos:start="29:38" pos:end="29:38">2</literal><operator pos:start="29:39" pos:end="29:39">)</operator> <operator pos:start="29:41" pos:end="29:42">||</operator> <operator pos:start="29:44" pos:end="29:44">(</operator><name pos:start="29:45" pos:end="29:47">num</name> <operator pos:start="29:49" pos:end="29:50">==</operator> <literal type="number" pos:start="29:52" pos:end="29:52">4</literal><operator pos:start="29:53" pos:end="29:53">)</operator> <operator pos:start="29:55" pos:end="29:56">||</operator>

               <operator pos:start="31:16" pos:end="31:16">(</operator><name pos:start="31:17" pos:end="31:19">num</name> <operator pos:start="31:21" pos:end="31:22">==</operator> <literal type="number" pos:start="31:24" pos:end="31:24">8</literal><operator pos:start="31:25" pos:end="31:25">)</operator> <operator pos:start="31:27" pos:end="31:28">||</operator> <operator pos:start="31:30" pos:end="31:30">(</operator><name pos:start="31:31" pos:end="31:33">num</name> <operator pos:start="31:35" pos:end="31:36">==</operator> <literal type="number" pos:start="31:38" pos:end="31:39">16</literal><operator pos:start="31:40" pos:end="31:40">)</operator> <operator pos:start="31:42" pos:end="31:43">||</operator> <operator pos:start="31:45" pos:end="31:45">(</operator><name pos:start="31:46" pos:end="31:48">num</name> <operator pos:start="31:50" pos:end="31:51">==</operator> <literal type="number" pos:start="31:53" pos:end="31:54">32</literal><operator pos:start="31:55" pos:end="31:55">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:51"><expr pos:start="33:9" pos:end="33:50"><name pos:start="33:9" pos:end="33:13">first</name> <operator pos:start="33:15" pos:end="33:15">=</operator> <call pos:start="33:17" pos:end="33:50"><name pos:start="33:17" pos:end="33:35">ics_find_free_block</name><argument_list pos:start="33:36" pos:end="33:50">(<argument pos:start="33:37" pos:end="33:39"><expr pos:start="33:37" pos:end="33:39"><name pos:start="33:37" pos:end="33:39">ics</name></expr></argument>, <argument pos:start="33:42" pos:end="33:44"><expr pos:start="33:42" pos:end="33:44"><name pos:start="33:42" pos:end="33:44">num</name></expr></argument>, <argument pos:start="33:47" pos:end="33:49"><expr pos:start="33:47" pos:end="33:49"><name pos:start="33:47" pos:end="33:49">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="35:7" pos:end="39:5">else <block pos:start="35:12" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:49">

        <expr_stmt pos:start="37:9" pos:end="37:49"><expr pos:start="37:9" pos:end="37:48"><name pos:start="37:9" pos:end="37:13">first</name> <operator pos:start="37:15" pos:end="37:15">=</operator> <call pos:start="37:17" pos:end="37:48"><name pos:start="37:17" pos:end="37:35">ics_find_free_block</name><argument_list pos:start="37:36" pos:end="37:48">(<argument pos:start="37:37" pos:end="37:39"><expr pos:start="37:37" pos:end="37:39"><name pos:start="37:37" pos:end="37:39">ics</name></expr></argument>, <argument pos:start="37:42" pos:end="37:44"><expr pos:start="37:42" pos:end="37:44"><name pos:start="37:42" pos:end="37:44">num</name></expr></argument>, <argument pos:start="37:47" pos:end="37:47"><expr pos:start="37:47" pos:end="37:47"><literal type="number" pos:start="37:47" pos:end="37:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="43:5" pos:end="51:5"><if pos:start="43:5" pos:end="51:5">if <condition pos:start="43:8" pos:end="43:19">(<expr pos:start="43:9" pos:end="43:18"><name pos:start="43:9" pos:end="43:13">first</name> <operator pos:start="43:15" pos:end="43:16">&gt;=</operator> <literal type="number" pos:start="43:18" pos:end="43:18">0</literal></expr>)</condition> <block pos:start="43:21" pos:end="51:5">{<block_content pos:start="45:9" pos:end="49:9">

        <for pos:start="45:9" pos:end="49:9">for <control pos:start="45:13" pos:end="45:45">(<init pos:start="45:14" pos:end="45:23"><expr pos:start="45:14" pos:end="45:22"><name pos:start="45:14" pos:end="45:14">i</name> <operator pos:start="45:16" pos:end="45:16">=</operator> <name pos:start="45:18" pos:end="45:22">first</name></expr>;</init> <condition pos:start="45:25" pos:end="45:40"><expr pos:start="45:25" pos:end="45:39"><name pos:start="45:25" pos:end="45:25">i</name> <operator pos:start="45:27" pos:end="45:27">&lt;</operator> <name pos:start="45:29" pos:end="45:33">first</name> <operator pos:start="45:35" pos:end="45:35">+</operator> <name pos:start="45:37" pos:end="45:39">num</name></expr>;</condition> <incr pos:start="45:42" pos:end="45:44"><expr pos:start="45:42" pos:end="45:44"><operator pos:start="45:42" pos:end="45:43">++</operator><name pos:start="45:44" pos:end="45:44">i</name></expr></incr>)</control> <block pos:start="45:47" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:42">

            <expr_stmt pos:start="47:13" pos:end="47:42"><expr pos:start="47:13" pos:end="47:41"><call pos:start="47:13" pos:end="47:41"><name pos:start="47:13" pos:end="47:28">ics_set_irq_type</name><argument_list pos:start="47:29" pos:end="47:41">(<argument pos:start="47:30" pos:end="47:32"><expr pos:start="47:30" pos:end="47:32"><name pos:start="47:30" pos:end="47:32">ics</name></expr></argument>, <argument pos:start="47:35" pos:end="47:35"><expr pos:start="47:35" pos:end="47:35"><name pos:start="47:35" pos:end="47:35">i</name></expr></argument>, <argument pos:start="47:38" pos:end="47:40"><expr pos:start="47:38" pos:end="47:40"><name pos:start="47:38" pos:end="47:40">lsi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:25"><expr pos:start="53:5" pos:end="53:24"><name pos:start="53:5" pos:end="53:9">first</name> <operator pos:start="53:11" pos:end="53:12">+=</operator> <name pos:start="53:14" pos:end="53:24"><name pos:start="53:14" pos:end="53:16">ics</name><operator pos:start="53:17" pos:end="53:18">-&gt;</operator><name pos:start="53:19" pos:end="53:24">offset</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:56"><expr pos:start="57:5" pos:end="57:55"><call pos:start="57:5" pos:end="57:55"><name pos:start="57:5" pos:end="57:26">trace_xics_alloc_block</name><argument_list pos:start="57:27" pos:end="57:55">(<argument pos:start="57:28" pos:end="57:30"><expr pos:start="57:28" pos:end="57:30"><name pos:start="57:28" pos:end="57:30">src</name></expr></argument>, <argument pos:start="57:33" pos:end="57:37"><expr pos:start="57:33" pos:end="57:37"><name pos:start="57:33" pos:end="57:37">first</name></expr></argument>, <argument pos:start="57:40" pos:end="57:42"><expr pos:start="57:40" pos:end="57:42"><name pos:start="57:40" pos:end="57:42">num</name></expr></argument>, <argument pos:start="57:45" pos:end="57:47"><expr pos:start="57:45" pos:end="57:47"><name pos:start="57:45" pos:end="57:47">lsi</name></expr></argument>, <argument pos:start="57:50" pos:end="57:54"><expr pos:start="57:50" pos:end="57:54"><name pos:start="57:50" pos:end="57:54">align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="61:5" pos:end="61:17">return <expr pos:start="61:12" pos:end="61:16"><name pos:start="61:12" pos:end="61:16">first</name></expr>;</return>

</block_content>}</block></function>
</unit>
