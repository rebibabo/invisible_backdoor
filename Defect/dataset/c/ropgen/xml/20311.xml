<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20311.c" pos:tabs="8"><function pos:start="1:1" pos:end="271:15"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">qcow2_do_open</name><parameter_list pos:start="1:25" pos:end="2:38">(<parameter pos:start="1:26" pos:end="1:45"><decl pos:start="1:26" pos:end="1:45"><type pos:start="1:26" pos:end="1:45"><name pos:start="1:26" pos:end="1:41">BlockDriverState</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:45">bs</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:61"><decl pos:start="1:48" pos:end="1:61"><type pos:start="1:48" pos:end="1:61"><name pos:start="1:48" pos:end="1:52">QDict</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:61">options</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:72"><decl pos:start="1:64" pos:end="1:72"><type pos:start="1:64" pos:end="1:72"><name pos:start="1:64" pos:end="1:66">int</name></type> <name pos:start="1:68" pos:end="1:72">flags</name></decl></parameter>,
                         <parameter pos:start="2:26" pos:end="2:37"><decl pos:start="2:26" pos:end="2:37"><type pos:start="2:26" pos:end="2:37"><name pos:start="2:26" pos:end="2:30">Error</name> <modifier pos:start="2:32" pos:end="2:32">*</modifier><modifier pos:start="2:33" pos:end="2:33">*</modifier></type><name pos:start="2:34" pos:end="2:37">errp</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="271:15">{<block_content pos:start="4:5" pos:end="271:15">
    <decl_stmt pos:start="4:5" pos:end="4:35"><decl pos:start="4:5" pos:end="4:34"><type pos:start="4:5" pos:end="4:20"><name pos:start="4:5" pos:end="4:18">BDRVQcow2State</name> <modifier pos:start="4:20" pos:end="4:20">*</modifier></type><name pos:start="4:21" pos:end="4:21">s</name> <init pos:start="4:23" pos:end="4:34">= <expr pos:start="4:25" pos:end="4:34"><name pos:start="4:25" pos:end="4:34"><name pos:start="4:25" pos:end="4:26">bs</name><operator pos:start="4:27" pos:end="4:28">-&gt;</operator><name pos:start="4:29" pos:end="4:34">opaque</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:24"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:16">int</name></type> <name pos:start="5:18" pos:end="5:20">len</name></decl>, <decl pos:start="5:23" pos:end="5:23"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:23" pos:end="5:23">i</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:16"><decl pos:start="6:5" pos:end="6:15"><type pos:start="6:5" pos:end="6:7"><name pos:start="6:5" pos:end="6:7">int</name></type> <name pos:start="6:9" pos:end="6:11">ret</name> <init pos:start="6:13" pos:end="6:15">= <expr pos:start="6:15" pos:end="6:15"><literal type="number" pos:start="6:15" pos:end="6:15">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:14">QCowHeader</name></type> <name pos:start="7:16" pos:end="7:21">header</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:28"><decl pos:start="8:5" pos:end="8:27"><type pos:start="8:5" pos:end="8:11"><name pos:start="8:5" pos:end="8:9">Error</name> <modifier pos:start="8:11" pos:end="8:11">*</modifier></type><name pos:start="8:12" pos:end="8:20">local_err</name> <init pos:start="8:22" pos:end="8:27">= <expr pos:start="8:24" pos:end="8:27"><name pos:start="8:24" pos:end="8:27">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:20">ext_end</name></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:31"><decl pos:start="10:5" pos:end="10:30"><type pos:start="10:5" pos:end="10:12"><name pos:start="10:5" pos:end="10:12">uint64_t</name></type> <name pos:start="10:14" pos:end="10:30">l1_vm_state_index</name></decl>;</decl_stmt>
    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">bool</name></type> <name pos:start="11:10" pos:end="11:22">update_header</name> <init pos:start="11:24" pos:end="11:30">= <expr pos:start="11:26" pos:end="11:30"><name pos:start="11:26" pos:end="11:30">false</name></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="12:5" pos:end="12:59"><expr pos:start="12:5" pos:end="12:58"><name pos:start="12:5" pos:end="12:7">ret</name> <operator pos:start="12:9" pos:end="12:9">=</operator> <call pos:start="12:11" pos:end="12:58"><name pos:start="12:11" pos:end="12:20">bdrv_pread</name><argument_list pos:start="12:21" pos:end="12:58">(<argument pos:start="12:22" pos:end="12:29"><expr pos:start="12:22" pos:end="12:29"><name pos:start="12:22" pos:end="12:29"><name pos:start="12:22" pos:end="12:23">bs</name><operator pos:start="12:24" pos:end="12:25">-&gt;</operator><name pos:start="12:26" pos:end="12:29">file</name></name></expr></argument>, <argument pos:start="12:32" pos:end="12:32"><expr pos:start="12:32" pos:end="12:32"><literal type="number" pos:start="12:32" pos:end="12:32">0</literal></expr></argument>, <argument pos:start="12:35" pos:end="12:41"><expr pos:start="12:35" pos:end="12:41"><operator pos:start="12:35" pos:end="12:35">&amp;</operator><name pos:start="12:36" pos:end="12:41">header</name></expr></argument>, <argument pos:start="12:44" pos:end="12:57"><expr pos:start="12:44" pos:end="12:57"><sizeof pos:start="12:44" pos:end="12:57">sizeof<argument_list pos:start="12:50" pos:end="12:57">(<argument pos:start="12:51" pos:end="12:56"><expr pos:start="12:51" pos:end="12:56"><name pos:start="12:51" pos:end="12:56">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="13:5" pos:end="271:15"><if pos:start="13:5" pos:end="271:15">if <condition pos:start="13:8" pos:end="13:16">(<expr pos:start="13:9" pos:end="13:15"><name pos:start="13:9" pos:end="13:11">ret</name> <operator pos:start="13:13" pos:end="13:13">&lt;</operator> <literal type="number" pos:start="13:15" pos:end="13:15">0</literal></expr>)</condition> <block pos:start="13:18" pos:end="271:15">{<block_content pos:start="14:9" pos:end="271:15">
        <expr_stmt pos:start="14:9" pos:end="14:68"><expr pos:start="14:9" pos:end="14:67"><call pos:start="14:9" pos:end="14:67"><name pos:start="14:9" pos:end="14:24">error_setg_errno</name><argument_list pos:start="14:25" pos:end="14:67">(<argument pos:start="14:26" pos:end="14:29"><expr pos:start="14:26" pos:end="14:29"><name pos:start="14:26" pos:end="14:29">errp</name></expr></argument>, <argument pos:start="14:32" pos:end="14:35"><expr pos:start="14:32" pos:end="14:35"><operator pos:start="14:32" pos:end="14:32">-</operator><name pos:start="14:33" pos:end="14:35">ret</name></expr></argument>, <argument pos:start="14:38" pos:end="14:66"><expr pos:start="14:38" pos:end="14:66"><literal type="string" pos:start="14:38" pos:end="14:66">"Could not read qcow2 header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="15:5" pos:end="15:32"><expr pos:start="15:5" pos:end="15:31"><call pos:start="15:5" pos:end="15:31"><name pos:start="15:5" pos:end="15:16">be32_to_cpus</name><argument_list pos:start="15:17" pos:end="15:31">(<argument pos:start="15:18" pos:end="15:30"><expr pos:start="15:18" pos:end="15:30"><operator pos:start="15:18" pos:end="15:18">&amp;</operator><name pos:start="15:19" pos:end="15:30"><name pos:start="15:19" pos:end="15:24">header</name><operator pos:start="15:25" pos:end="15:25">.</operator><name pos:start="15:26" pos:end="15:30">magic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="16:5" pos:end="16:34"><expr pos:start="16:5" pos:end="16:33"><call pos:start="16:5" pos:end="16:33"><name pos:start="16:5" pos:end="16:16">be32_to_cpus</name><argument_list pos:start="16:17" pos:end="16:33">(<argument pos:start="16:18" pos:end="16:32"><expr pos:start="16:18" pos:end="16:32"><operator pos:start="16:18" pos:end="16:18">&amp;</operator><name pos:start="16:19" pos:end="16:32"><name pos:start="16:19" pos:end="16:24">header</name><operator pos:start="16:25" pos:end="16:25">.</operator><name pos:start="16:26" pos:end="16:32">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="17:5" pos:end="17:46"><expr pos:start="17:5" pos:end="17:45"><call pos:start="17:5" pos:end="17:45"><name pos:start="17:5" pos:end="17:16">be64_to_cpus</name><argument_list pos:start="17:17" pos:end="17:45">(<argument pos:start="17:18" pos:end="17:44"><expr pos:start="17:18" pos:end="17:44"><operator pos:start="17:18" pos:end="17:18">&amp;</operator><name pos:start="17:19" pos:end="17:44"><name pos:start="17:19" pos:end="17:24">header</name><operator pos:start="17:25" pos:end="17:25">.</operator><name pos:start="17:26" pos:end="17:44">backing_file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="18:5" pos:end="18:44"><expr pos:start="18:5" pos:end="18:43"><call pos:start="18:5" pos:end="18:43"><name pos:start="18:5" pos:end="18:16">be32_to_cpus</name><argument_list pos:start="18:17" pos:end="18:43">(<argument pos:start="18:18" pos:end="18:42"><expr pos:start="18:18" pos:end="18:42"><operator pos:start="18:18" pos:end="18:18">&amp;</operator><name pos:start="18:19" pos:end="18:42"><name pos:start="18:19" pos:end="18:24">header</name><operator pos:start="18:25" pos:end="18:25">.</operator><name pos:start="18:26" pos:end="18:42">backing_file_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="19:5" pos:end="19:31"><expr pos:start="19:5" pos:end="19:30"><call pos:start="19:5" pos:end="19:30"><name pos:start="19:5" pos:end="19:16">be64_to_cpus</name><argument_list pos:start="19:17" pos:end="19:30">(<argument pos:start="19:18" pos:end="19:29"><expr pos:start="19:18" pos:end="19:29"><operator pos:start="19:18" pos:end="19:18">&amp;</operator><name pos:start="19:19" pos:end="19:29"><name pos:start="19:19" pos:end="19:24">header</name><operator pos:start="19:25" pos:end="19:25">.</operator><name pos:start="19:26" pos:end="19:29">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="20:5" pos:end="20:39"><expr pos:start="20:5" pos:end="20:38"><call pos:start="20:5" pos:end="20:38"><name pos:start="20:5" pos:end="20:16">be32_to_cpus</name><argument_list pos:start="20:17" pos:end="20:38">(<argument pos:start="20:18" pos:end="20:37"><expr pos:start="20:18" pos:end="20:37"><operator pos:start="20:18" pos:end="20:18">&amp;</operator><name pos:start="20:19" pos:end="20:37"><name pos:start="20:19" pos:end="20:24">header</name><operator pos:start="20:25" pos:end="20:25">.</operator><name pos:start="20:26" pos:end="20:37">cluster_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="21:5" pos:end="21:39"><expr pos:start="21:5" pos:end="21:38"><call pos:start="21:5" pos:end="21:38"><name pos:start="21:5" pos:end="21:16">be32_to_cpus</name><argument_list pos:start="21:17" pos:end="21:38">(<argument pos:start="21:18" pos:end="21:37"><expr pos:start="21:18" pos:end="21:37"><operator pos:start="21:18" pos:end="21:18">&amp;</operator><name pos:start="21:19" pos:end="21:37"><name pos:start="21:19" pos:end="21:24">header</name><operator pos:start="21:25" pos:end="21:25">.</operator><name pos:start="21:26" pos:end="21:37">crypt_method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="22:5" pos:end="22:42"><expr pos:start="22:5" pos:end="22:41"><call pos:start="22:5" pos:end="22:41"><name pos:start="22:5" pos:end="22:16">be64_to_cpus</name><argument_list pos:start="22:17" pos:end="22:41">(<argument pos:start="22:18" pos:end="22:40"><expr pos:start="22:18" pos:end="22:40"><operator pos:start="22:18" pos:end="22:18">&amp;</operator><name pos:start="22:19" pos:end="22:40"><name pos:start="22:19" pos:end="22:24">header</name><operator pos:start="22:25" pos:end="22:25">.</operator><name pos:start="22:26" pos:end="22:40">l1_table_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="23:5" pos:end="23:34"><expr pos:start="23:5" pos:end="23:33"><call pos:start="23:5" pos:end="23:33"><name pos:start="23:5" pos:end="23:16">be32_to_cpus</name><argument_list pos:start="23:17" pos:end="23:33">(<argument pos:start="23:18" pos:end="23:32"><expr pos:start="23:18" pos:end="23:32"><operator pos:start="23:18" pos:end="23:18">&amp;</operator><name pos:start="23:19" pos:end="23:32"><name pos:start="23:19" pos:end="23:24">header</name><operator pos:start="23:25" pos:end="23:25">.</operator><name pos:start="23:26" pos:end="23:32">l1_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="24:5" pos:end="24:48"><expr pos:start="24:5" pos:end="24:47"><call pos:start="24:5" pos:end="24:47"><name pos:start="24:5" pos:end="24:16">be64_to_cpus</name><argument_list pos:start="24:17" pos:end="24:47">(<argument pos:start="24:18" pos:end="24:46"><expr pos:start="24:18" pos:end="24:46"><operator pos:start="24:18" pos:end="24:18">&amp;</operator><name pos:start="24:19" pos:end="24:46"><name pos:start="24:19" pos:end="24:24">header</name><operator pos:start="24:25" pos:end="24:25">.</operator><name pos:start="24:26" pos:end="24:46">refcount_table_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="25:5" pos:end="25:50"><expr pos:start="25:5" pos:end="25:49"><call pos:start="25:5" pos:end="25:49"><name pos:start="25:5" pos:end="25:16">be32_to_cpus</name><argument_list pos:start="25:17" pos:end="25:49">(<argument pos:start="25:18" pos:end="25:48"><expr pos:start="25:18" pos:end="25:48"><operator pos:start="25:18" pos:end="25:18">&amp;</operator><name pos:start="25:19" pos:end="25:48"><name pos:start="25:19" pos:end="25:24">header</name><operator pos:start="25:25" pos:end="25:25">.</operator><name pos:start="25:26" pos:end="25:48">refcount_table_clusters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="26:5" pos:end="26:43"><expr pos:start="26:5" pos:end="26:42"><call pos:start="26:5" pos:end="26:42"><name pos:start="26:5" pos:end="26:16">be64_to_cpus</name><argument_list pos:start="26:17" pos:end="26:42">(<argument pos:start="26:18" pos:end="26:41"><expr pos:start="26:18" pos:end="26:41"><operator pos:start="26:18" pos:end="26:18">&amp;</operator><name pos:start="26:19" pos:end="26:41"><name pos:start="26:19" pos:end="26:24">header</name><operator pos:start="26:25" pos:end="26:25">.</operator><name pos:start="26:26" pos:end="26:41">snapshots_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="27:5" pos:end="27:39"><expr pos:start="27:5" pos:end="27:38"><call pos:start="27:5" pos:end="27:38"><name pos:start="27:5" pos:end="27:16">be32_to_cpus</name><argument_list pos:start="27:17" pos:end="27:38">(<argument pos:start="27:18" pos:end="27:37"><expr pos:start="27:18" pos:end="27:37"><operator pos:start="27:18" pos:end="27:18">&amp;</operator><name pos:start="27:19" pos:end="27:37"><name pos:start="27:19" pos:end="27:24">header</name><operator pos:start="27:25" pos:end="27:25">.</operator><name pos:start="27:26" pos:end="27:37">nb_snapshots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="28:5" pos:end="271:15"><if pos:start="28:5" pos:end="271:15">if <condition pos:start="28:8" pos:end="28:35">(<expr pos:start="28:9" pos:end="28:34"><name pos:start="28:9" pos:end="28:20"><name pos:start="28:9" pos:end="28:14">header</name><operator pos:start="28:15" pos:end="28:15">.</operator><name pos:start="28:16" pos:end="28:20">magic</name></name> <operator pos:start="28:22" pos:end="28:23">!=</operator> <name pos:start="28:25" pos:end="28:34">QCOW_MAGIC</name></expr>)</condition> <block pos:start="28:37" pos:end="271:15">{<block_content pos:start="29:9" pos:end="271:15">
        <expr_stmt pos:start="29:9" pos:end="29:57"><expr pos:start="29:9" pos:end="29:56"><call pos:start="29:9" pos:end="29:56"><name pos:start="29:9" pos:end="29:18">error_setg</name><argument_list pos:start="29:19" pos:end="29:56">(<argument pos:start="29:20" pos:end="29:23"><expr pos:start="29:20" pos:end="29:23"><name pos:start="29:20" pos:end="29:23">errp</name></expr></argument>, <argument pos:start="29:26" pos:end="29:55"><expr pos:start="29:26" pos:end="29:55"><literal type="string" pos:start="29:26" pos:end="29:55">"Image is not in qcow2 format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="30:5" pos:end="271:15"><if pos:start="30:5" pos:end="271:15">if <condition pos:start="30:8" pos:end="30:49">(<expr pos:start="30:9" pos:end="30:48"><name pos:start="30:9" pos:end="30:22"><name pos:start="30:9" pos:end="30:14">header</name><operator pos:start="30:15" pos:end="30:15">.</operator><name pos:start="30:16" pos:end="30:22">version</name></name> <operator pos:start="30:24" pos:end="30:24">&lt;</operator> <literal type="number" pos:start="30:26" pos:end="30:26">2</literal> <operator pos:start="30:28" pos:end="30:29">||</operator> <name pos:start="30:31" pos:end="30:44"><name pos:start="30:31" pos:end="30:36">header</name><operator pos:start="30:37" pos:end="30:37">.</operator><name pos:start="30:38" pos:end="30:44">version</name></name> <operator pos:start="30:46" pos:end="30:46">&gt;</operator> <literal type="number" pos:start="30:48" pos:end="30:48">3</literal></expr>)</condition> <block pos:start="30:51" pos:end="271:15">{<block_content pos:start="31:9" pos:end="271:15">
        <expr_stmt pos:start="31:9" pos:end="31:79"><expr pos:start="31:9" pos:end="31:78"><call pos:start="31:9" pos:end="31:78"><name pos:start="31:9" pos:end="31:18">error_setg</name><argument_list pos:start="31:19" pos:end="31:78">(<argument pos:start="31:20" pos:end="31:23"><expr pos:start="31:20" pos:end="31:23"><name pos:start="31:20" pos:end="31:23">errp</name></expr></argument>, <argument pos:start="31:26" pos:end="31:61"><expr pos:start="31:26" pos:end="31:61"><literal type="string" pos:start="31:26" pos:end="31:54">"Unsupported qcow2 version %"</literal> <name pos:start="31:56" pos:end="31:61">PRIu32</name></expr></argument>, <argument pos:start="31:64" pos:end="31:77"><expr pos:start="31:64" pos:end="31:77"><name pos:start="31:64" pos:end="31:77"><name pos:start="31:64" pos:end="31:69">header</name><operator pos:start="31:70" pos:end="31:70">.</operator><name pos:start="31:71" pos:end="31:77">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="32:9" pos:end="32:23"><expr pos:start="32:9" pos:end="32:22"><name pos:start="32:9" pos:end="32:11">ret</name> <operator pos:start="32:13" pos:end="32:13">=</operator> <operator pos:start="32:15" pos:end="32:15">-</operator><name pos:start="32:16" pos:end="32:22">ENOTSUP</name></expr>;</expr_stmt>
    <expr_stmt pos:start="33:5" pos:end="33:37"><expr pos:start="33:5" pos:end="33:36"><name pos:start="33:5" pos:end="33:19"><name pos:start="33:5" pos:end="33:5">s</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:19">qcow_version</name></name> <operator pos:start="33:21" pos:end="33:21">=</operator> <name pos:start="33:23" pos:end="33:36"><name pos:start="33:23" pos:end="33:28">header</name><operator pos:start="33:29" pos:end="33:29">.</operator><name pos:start="33:30" pos:end="33:36">version</name></name></expr>;</expr_stmt>
    <comment type="block" pos:start="34:5" pos:end="34:33">/* Initialise cluster size */</comment>
    <if_stmt pos:start="35:5" pos:end="271:15"><if pos:start="35:5" pos:end="271:15">if <condition pos:start="35:8" pos:end="36:47">(<expr pos:start="35:9" pos:end="36:46"><name pos:start="35:9" pos:end="35:27"><name pos:start="35:9" pos:end="35:14">header</name><operator pos:start="35:15" pos:end="35:15">.</operator><name pos:start="35:16" pos:end="35:27">cluster_bits</name></name> <operator pos:start="35:29" pos:end="35:29">&lt;</operator> <name pos:start="35:31" pos:end="35:46">MIN_CLUSTER_BITS</name> <operator pos:start="35:48" pos:end="35:49">||</operator>
        <name pos:start="36:9" pos:end="36:27"><name pos:start="36:9" pos:end="36:14">header</name><operator pos:start="36:15" pos:end="36:15">.</operator><name pos:start="36:16" pos:end="36:27">cluster_bits</name></name> <operator pos:start="36:29" pos:end="36:29">&gt;</operator> <name pos:start="36:31" pos:end="36:46">MAX_CLUSTER_BITS</name></expr>)</condition> <block pos:start="36:49" pos:end="271:15">{<block_content pos:start="37:9" pos:end="271:15">
        <expr_stmt pos:start="37:9" pos:end="38:40"><expr pos:start="37:9" pos:end="38:39"><call pos:start="37:9" pos:end="38:39"><name pos:start="37:9" pos:end="37:18">error_setg</name><argument_list pos:start="37:19" pos:end="38:39">(<argument pos:start="37:20" pos:end="37:23"><expr pos:start="37:20" pos:end="37:23"><name pos:start="37:20" pos:end="37:23">errp</name></expr></argument>, <argument pos:start="37:26" pos:end="37:63"><expr pos:start="37:26" pos:end="37:63"><literal type="string" pos:start="37:26" pos:end="37:56">"Unsupported cluster size: 2^%"</literal> <name pos:start="37:58" pos:end="37:63">PRIu32</name></expr></argument>,
                   <argument pos:start="38:20" pos:end="38:38"><expr pos:start="38:20" pos:end="38:38"><name pos:start="38:20" pos:end="38:38"><name pos:start="38:20" pos:end="38:25">header</name><operator pos:start="38:26" pos:end="38:26">.</operator><name pos:start="38:27" pos:end="38:38">cluster_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="39:5" pos:end="39:42"><expr pos:start="39:5" pos:end="39:41"><name pos:start="39:5" pos:end="39:19"><name pos:start="39:5" pos:end="39:5">s</name><operator pos:start="39:6" pos:end="39:7">-&gt;</operator><name pos:start="39:8" pos:end="39:19">cluster_bits</name></name> <operator pos:start="39:21" pos:end="39:21">=</operator> <name pos:start="39:23" pos:end="39:41"><name pos:start="39:23" pos:end="39:28">header</name><operator pos:start="39:29" pos:end="39:29">.</operator><name pos:start="39:30" pos:end="39:41">cluster_bits</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="40:5" pos:end="40:43"><expr pos:start="40:5" pos:end="40:42"><name pos:start="40:5" pos:end="40:19"><name pos:start="40:5" pos:end="40:5">s</name><operator pos:start="40:6" pos:end="40:7">-&gt;</operator><name pos:start="40:8" pos:end="40:19">cluster_size</name></name> <operator pos:start="40:21" pos:end="40:21">=</operator> <literal type="number" pos:start="40:23" pos:end="40:23">1</literal> <operator pos:start="40:25" pos:end="40:26">&lt;&lt;</operator> <name pos:start="40:28" pos:end="40:42"><name pos:start="40:28" pos:end="40:28">s</name><operator pos:start="40:29" pos:end="40:30">-&gt;</operator><name pos:start="40:31" pos:end="40:42">cluster_bits</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="41:5" pos:end="41:67"><expr pos:start="41:5" pos:end="41:66"><name pos:start="41:5" pos:end="41:22"><name pos:start="41:5" pos:end="41:5">s</name><operator pos:start="41:6" pos:end="41:7">-&gt;</operator><name pos:start="41:8" pos:end="41:22">cluster_sectors</name></name> <operator pos:start="41:24" pos:end="41:24">=</operator> <literal type="number" pos:start="41:26" pos:end="41:26">1</literal> <operator pos:start="41:28" pos:end="41:29">&lt;&lt;</operator> <operator pos:start="41:31" pos:end="41:31">(</operator><name pos:start="41:32" pos:end="41:46"><name pos:start="41:32" pos:end="41:32">s</name><operator pos:start="41:33" pos:end="41:34">-&gt;</operator><name pos:start="41:35" pos:end="41:46">cluster_bits</name></name> <operator pos:start="41:48" pos:end="41:48">-</operator> <name pos:start="41:50" pos:end="41:65">BDRV_SECTOR_BITS</name><operator pos:start="41:66" pos:end="41:66">)</operator></expr>;</expr_stmt>
    <comment type="block" pos:start="42:5" pos:end="42:44">/* Initialise version 3 header fields */</comment>
    <if_stmt pos:start="43:5" pos:end="271:15"><if pos:start="43:5" pos:end="49:5">if <condition pos:start="43:8" pos:end="43:28">(<expr pos:start="43:9" pos:end="43:27"><name pos:start="43:9" pos:end="43:22"><name pos:start="43:9" pos:end="43:14">header</name><operator pos:start="43:15" pos:end="43:15">.</operator><name pos:start="43:16" pos:end="43:22">version</name></name> <operator pos:start="43:24" pos:end="43:25">==</operator> <literal type="number" pos:start="43:27" pos:end="43:27">2</literal></expr>)</condition> <block pos:start="43:30" pos:end="49:5">{<block_content pos:start="44:9" pos:end="48:45">
        <expr_stmt pos:start="44:9" pos:end="44:44"><expr pos:start="44:9" pos:end="44:43"><name pos:start="44:9" pos:end="44:36"><name pos:start="44:9" pos:end="44:14">header</name><operator pos:start="44:15" pos:end="44:15">.</operator><name pos:start="44:16" pos:end="44:36">incompatible_features</name></name>    <operator pos:start="44:41" pos:end="44:41">=</operator> <literal type="number" pos:start="44:43" pos:end="44:43">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="45:9" pos:end="45:44"><expr pos:start="45:9" pos:end="45:43"><name pos:start="45:9" pos:end="45:34"><name pos:start="45:9" pos:end="45:14">header</name><operator pos:start="45:15" pos:end="45:15">.</operator><name pos:start="45:16" pos:end="45:34">compatible_features</name></name>      <operator pos:start="45:41" pos:end="45:41">=</operator> <literal type="number" pos:start="45:43" pos:end="45:43">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="46:9" pos:end="46:44"><expr pos:start="46:9" pos:end="46:43"><name pos:start="46:9" pos:end="46:33"><name pos:start="46:9" pos:end="46:14">header</name><operator pos:start="46:15" pos:end="46:15">.</operator><name pos:start="46:16" pos:end="46:33">autoclear_features</name></name>       <operator pos:start="46:41" pos:end="46:41">=</operator> <literal type="number" pos:start="46:43" pos:end="46:43">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="47:9" pos:end="47:44"><expr pos:start="47:9" pos:end="47:43"><name pos:start="47:9" pos:end="47:29"><name pos:start="47:9" pos:end="47:14">header</name><operator pos:start="47:15" pos:end="47:15">.</operator><name pos:start="47:16" pos:end="47:29">refcount_order</name></name>           <operator pos:start="47:41" pos:end="47:41">=</operator> <literal type="number" pos:start="47:43" pos:end="47:43">4</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="48:9" pos:end="48:45"><expr pos:start="48:9" pos:end="48:44"><name pos:start="48:9" pos:end="48:28"><name pos:start="48:9" pos:end="48:14">header</name><operator pos:start="48:15" pos:end="48:15">.</operator><name pos:start="48:16" pos:end="48:28">header_length</name></name>            <operator pos:start="48:41" pos:end="48:41">=</operator> <literal type="number" pos:start="48:43" pos:end="48:44">72</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="49:7" pos:end="271:15">else <block pos:start="49:12" pos:end="271:15">{<block_content pos:start="50:9" pos:end="271:15">
        <expr_stmt pos:start="50:9" pos:end="50:52"><expr pos:start="50:9" pos:end="50:51"><call pos:start="50:9" pos:end="50:51"><name pos:start="50:9" pos:end="50:20">be64_to_cpus</name><argument_list pos:start="50:21" pos:end="50:51">(<argument pos:start="50:22" pos:end="50:50"><expr pos:start="50:22" pos:end="50:50"><operator pos:start="50:22" pos:end="50:22">&amp;</operator><name pos:start="50:23" pos:end="50:50"><name pos:start="50:23" pos:end="50:28">header</name><operator pos:start="50:29" pos:end="50:29">.</operator><name pos:start="50:30" pos:end="50:50">incompatible_features</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="51:9" pos:end="51:50"><expr pos:start="51:9" pos:end="51:49"><call pos:start="51:9" pos:end="51:49"><name pos:start="51:9" pos:end="51:20">be64_to_cpus</name><argument_list pos:start="51:21" pos:end="51:49">(<argument pos:start="51:22" pos:end="51:48"><expr pos:start="51:22" pos:end="51:48"><operator pos:start="51:22" pos:end="51:22">&amp;</operator><name pos:start="51:23" pos:end="51:48"><name pos:start="51:23" pos:end="51:28">header</name><operator pos:start="51:29" pos:end="51:29">.</operator><name pos:start="51:30" pos:end="51:48">compatible_features</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="52:9" pos:end="52:49"><expr pos:start="52:9" pos:end="52:48"><call pos:start="52:9" pos:end="52:48"><name pos:start="52:9" pos:end="52:20">be64_to_cpus</name><argument_list pos:start="52:21" pos:end="52:48">(<argument pos:start="52:22" pos:end="52:47"><expr pos:start="52:22" pos:end="52:47"><operator pos:start="52:22" pos:end="52:22">&amp;</operator><name pos:start="52:23" pos:end="52:47"><name pos:start="52:23" pos:end="52:28">header</name><operator pos:start="52:29" pos:end="52:29">.</operator><name pos:start="52:30" pos:end="52:47">autoclear_features</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="53:9" pos:end="53:45"><expr pos:start="53:9" pos:end="53:44"><call pos:start="53:9" pos:end="53:44"><name pos:start="53:9" pos:end="53:20">be32_to_cpus</name><argument_list pos:start="53:21" pos:end="53:44">(<argument pos:start="53:22" pos:end="53:43"><expr pos:start="53:22" pos:end="53:43"><operator pos:start="53:22" pos:end="53:22">&amp;</operator><name pos:start="53:23" pos:end="53:43"><name pos:start="53:23" pos:end="53:28">header</name><operator pos:start="53:29" pos:end="53:29">.</operator><name pos:start="53:30" pos:end="53:43">refcount_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="54:9" pos:end="54:44"><expr pos:start="54:9" pos:end="54:43"><call pos:start="54:9" pos:end="54:43"><name pos:start="54:9" pos:end="54:20">be32_to_cpus</name><argument_list pos:start="54:21" pos:end="54:43">(<argument pos:start="54:22" pos:end="54:42"><expr pos:start="54:22" pos:end="54:42"><operator pos:start="54:22" pos:end="54:22">&amp;</operator><name pos:start="54:23" pos:end="54:42"><name pos:start="54:23" pos:end="54:28">header</name><operator pos:start="54:29" pos:end="54:29">.</operator><name pos:start="54:30" pos:end="54:42">header_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="55:9" pos:end="271:15"><if pos:start="55:9" pos:end="271:15">if <condition pos:start="55:12" pos:end="55:39">(<expr pos:start="55:13" pos:end="55:38"><name pos:start="55:13" pos:end="55:32"><name pos:start="55:13" pos:end="55:18">header</name><operator pos:start="55:19" pos:end="55:19">.</operator><name pos:start="55:20" pos:end="55:32">header_length</name></name> <operator pos:start="55:34" pos:end="55:34">&lt;</operator> <literal type="number" pos:start="55:36" pos:end="55:38">104</literal></expr>)</condition> <block pos:start="55:41" pos:end="271:15">{<block_content pos:start="56:13" pos:end="271:15">
            <expr_stmt pos:start="56:13" pos:end="56:55"><expr pos:start="56:13" pos:end="56:54"><call pos:start="56:13" pos:end="56:54"><name pos:start="56:13" pos:end="56:22">error_setg</name><argument_list pos:start="56:23" pos:end="56:54">(<argument pos:start="56:24" pos:end="56:27"><expr pos:start="56:24" pos:end="56:27"><name pos:start="56:24" pos:end="56:27">errp</name></expr></argument>, <argument pos:start="56:30" pos:end="56:53"><expr pos:start="56:30" pos:end="56:53"><literal type="string" pos:start="56:30" pos:end="56:53">"qcow2 header too short"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="57:5" pos:end="271:15"><if pos:start="57:5" pos:end="271:15">if <condition pos:start="57:8" pos:end="57:47">(<expr pos:start="57:9" pos:end="57:46"><name pos:start="57:9" pos:end="57:28"><name pos:start="57:9" pos:end="57:14">header</name><operator pos:start="57:15" pos:end="57:15">.</operator><name pos:start="57:16" pos:end="57:28">header_length</name></name> <operator pos:start="57:30" pos:end="57:30">&gt;</operator> <name pos:start="57:32" pos:end="57:46"><name pos:start="57:32" pos:end="57:32">s</name><operator pos:start="57:33" pos:end="57:34">-&gt;</operator><name pos:start="57:35" pos:end="57:46">cluster_size</name></name></expr>)</condition> <block pos:start="57:49" pos:end="271:15">{<block_content pos:start="58:9" pos:end="271:15">
        <expr_stmt pos:start="58:9" pos:end="58:62"><expr pos:start="58:9" pos:end="58:61"><call pos:start="58:9" pos:end="58:61"><name pos:start="58:9" pos:end="58:18">error_setg</name><argument_list pos:start="58:19" pos:end="58:61">(<argument pos:start="58:20" pos:end="58:23"><expr pos:start="58:20" pos:end="58:23"><name pos:start="58:20" pos:end="58:23">errp</name></expr></argument>, <argument pos:start="58:26" pos:end="58:60"><expr pos:start="58:26" pos:end="58:60"><literal type="string" pos:start="58:26" pos:end="58:60">"qcow2 header exceeds cluster size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="59:5" pos:end="271:15"><if pos:start="59:5" pos:end="271:15">if <condition pos:start="59:8" pos:end="59:46">(<expr pos:start="59:9" pos:end="59:45"><name pos:start="59:9" pos:end="59:28"><name pos:start="59:9" pos:end="59:14">header</name><operator pos:start="59:15" pos:end="59:15">.</operator><name pos:start="59:16" pos:end="59:28">header_length</name></name> <operator pos:start="59:30" pos:end="59:30">&gt;</operator> <sizeof pos:start="59:32" pos:end="59:45">sizeof<argument_list pos:start="59:38" pos:end="59:45">(<argument pos:start="59:39" pos:end="59:44"><expr pos:start="59:39" pos:end="59:44"><name pos:start="59:39" pos:end="59:44">header</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="59:48" pos:end="271:15">{<block_content pos:start="60:9" pos:end="271:15">
        <expr_stmt pos:start="60:9" pos:end="60:78"><expr pos:start="60:9" pos:end="60:77"><name pos:start="60:9" pos:end="60:37"><name pos:start="60:9" pos:end="60:9">s</name><operator pos:start="60:10" pos:end="60:11">-&gt;</operator><name pos:start="60:12" pos:end="60:37">unknown_header_fields_size</name></name> <operator pos:start="60:39" pos:end="60:39">=</operator> <name pos:start="60:41" pos:end="60:60"><name pos:start="60:41" pos:end="60:46">header</name><operator pos:start="60:47" pos:end="60:47">.</operator><name pos:start="60:48" pos:end="60:60">header_length</name></name> <operator pos:start="60:62" pos:end="60:62">-</operator> <sizeof pos:start="60:64" pos:end="60:77">sizeof<argument_list pos:start="60:70" pos:end="60:77">(<argument pos:start="60:71" pos:end="60:76"><expr pos:start="60:71" pos:end="60:76"><name pos:start="60:71" pos:end="60:76">header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <expr_stmt pos:start="61:9" pos:end="61:75"><expr pos:start="61:9" pos:end="61:74"><name pos:start="61:9" pos:end="61:32"><name pos:start="61:9" pos:end="61:9">s</name><operator pos:start="61:10" pos:end="61:11">-&gt;</operator><name pos:start="61:12" pos:end="61:32">unknown_header_fields</name></name> <operator pos:start="61:34" pos:end="61:34">=</operator> <call pos:start="61:36" pos:end="61:74"><name pos:start="61:36" pos:end="61:43">g_malloc</name><argument_list pos:start="61:44" pos:end="61:74">(<argument pos:start="61:45" pos:end="61:73"><expr pos:start="61:45" pos:end="61:73"><name pos:start="61:45" pos:end="61:73"><name pos:start="61:45" pos:end="61:45">s</name><operator pos:start="61:46" pos:end="61:47">-&gt;</operator><name pos:start="61:48" pos:end="61:73">unknown_header_fields_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="62:9" pos:end="63:56"><expr pos:start="62:9" pos:end="63:55"><name pos:start="62:9" pos:end="62:11">ret</name> <operator pos:start="62:13" pos:end="62:13">=</operator> <call pos:start="62:15" pos:end="63:55"><name pos:start="62:15" pos:end="62:24">bdrv_pread</name><argument_list pos:start="62:25" pos:end="63:55">(<argument pos:start="62:26" pos:end="62:33"><expr pos:start="62:26" pos:end="62:33"><name pos:start="62:26" pos:end="62:33"><name pos:start="62:26" pos:end="62:27">bs</name><operator pos:start="62:28" pos:end="62:29">-&gt;</operator><name pos:start="62:30" pos:end="62:33">file</name></name></expr></argument>, <argument pos:start="62:36" pos:end="62:49"><expr pos:start="62:36" pos:end="62:49"><sizeof pos:start="62:36" pos:end="62:49">sizeof<argument_list pos:start="62:42" pos:end="62:49">(<argument pos:start="62:43" pos:end="62:48"><expr pos:start="62:43" pos:end="62:48"><name pos:start="62:43" pos:end="62:48">header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="62:52" pos:end="62:75"><expr pos:start="62:52" pos:end="62:75"><name pos:start="62:52" pos:end="62:75"><name pos:start="62:52" pos:end="62:52">s</name><operator pos:start="62:53" pos:end="62:54">-&gt;</operator><name pos:start="62:55" pos:end="62:75">unknown_header_fields</name></name></expr></argument>,
                         <argument pos:start="63:26" pos:end="63:54"><expr pos:start="63:26" pos:end="63:54"><name pos:start="63:26" pos:end="63:54"><name pos:start="63:26" pos:end="63:26">s</name><operator pos:start="63:27" pos:end="63:28">-&gt;</operator><name pos:start="63:29" pos:end="63:54">unknown_header_fields_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="64:9" pos:end="271:15"><if pos:start="64:9" pos:end="271:15">if <condition pos:start="64:12" pos:end="64:20">(<expr pos:start="64:13" pos:end="64:19"><name pos:start="64:13" pos:end="64:15">ret</name> <operator pos:start="64:17" pos:end="64:17">&lt;</operator> <literal type="number" pos:start="64:19" pos:end="64:19">0</literal></expr>)</condition> <block pos:start="64:22" pos:end="271:15">{<block_content pos:start="65:13" pos:end="271:15">
            <expr_stmt pos:start="65:13" pos:end="66:39"><expr pos:start="65:13" pos:end="66:38"><call pos:start="65:13" pos:end="66:38"><name pos:start="65:13" pos:end="65:28">error_setg_errno</name><argument_list pos:start="65:29" pos:end="66:38">(<argument pos:start="65:30" pos:end="65:33"><expr pos:start="65:30" pos:end="65:33"><name pos:start="65:30" pos:end="65:33">errp</name></expr></argument>, <argument pos:start="65:36" pos:end="65:39"><expr pos:start="65:36" pos:end="65:39"><operator pos:start="65:36" pos:end="65:36">-</operator><name pos:start="65:37" pos:end="65:39">ret</name></expr></argument>, <argument pos:start="65:42" pos:end="66:37"><expr pos:start="65:42" pos:end="66:37"><literal type="string" pos:start="65:42" pos:end="65:79">"Could not read unknown qcow2 header "</literal>
                             <literal type="string" pos:start="66:30" pos:end="66:37">"fields"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="67:5" pos:end="271:15"><if pos:start="67:5" pos:end="271:15">if <condition pos:start="67:8" pos:end="67:53">(<expr pos:start="67:9" pos:end="67:52"><name pos:start="67:9" pos:end="67:34"><name pos:start="67:9" pos:end="67:14">header</name><operator pos:start="67:15" pos:end="67:15">.</operator><name pos:start="67:16" pos:end="67:34">backing_file_offset</name></name> <operator pos:start="67:36" pos:end="67:36">&gt;</operator> <name pos:start="67:38" pos:end="67:52"><name pos:start="67:38" pos:end="67:38">s</name><operator pos:start="67:39" pos:end="67:40">-&gt;</operator><name pos:start="67:41" pos:end="67:52">cluster_size</name></name></expr>)</condition> <block pos:start="67:55" pos:end="271:15">{<block_content pos:start="68:9" pos:end="271:15">
        <expr_stmt pos:start="68:9" pos:end="68:56"><expr pos:start="68:9" pos:end="68:55"><call pos:start="68:9" pos:end="68:55"><name pos:start="68:9" pos:end="68:18">error_setg</name><argument_list pos:start="68:19" pos:end="68:55">(<argument pos:start="68:20" pos:end="68:23"><expr pos:start="68:20" pos:end="68:23"><name pos:start="68:20" pos:end="68:23">errp</name></expr></argument>, <argument pos:start="68:26" pos:end="68:54"><expr pos:start="68:26" pos:end="68:54"><literal type="string" pos:start="68:26" pos:end="68:54">"Invalid backing file offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="69:5" pos:end="271:15"><if pos:start="69:5" pos:end="71:5">if <condition pos:start="69:8" pos:end="69:35">(<expr pos:start="69:9" pos:end="69:34"><name pos:start="69:9" pos:end="69:34"><name pos:start="69:9" pos:end="69:14">header</name><operator pos:start="69:15" pos:end="69:15">.</operator><name pos:start="69:16" pos:end="69:34">backing_file_offset</name></name></expr>)</condition> <block pos:start="69:37" pos:end="71:5">{<block_content pos:start="70:9" pos:end="70:45">
        <expr_stmt pos:start="70:9" pos:end="70:45"><expr pos:start="70:9" pos:end="70:44"><name pos:start="70:9" pos:end="70:15">ext_end</name> <operator pos:start="70:17" pos:end="70:17">=</operator> <name pos:start="70:19" pos:end="70:44"><name pos:start="70:19" pos:end="70:24">header</name><operator pos:start="70:25" pos:end="70:25">.</operator><name pos:start="70:26" pos:end="70:44">backing_file_offset</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="71:7" pos:end="271:15">else <block pos:start="71:12" pos:end="271:15">{<block_content pos:start="72:9" pos:end="271:15">
        <expr_stmt pos:start="72:9" pos:end="72:43"><expr pos:start="72:9" pos:end="72:42"><name pos:start="72:9" pos:end="72:15">ext_end</name> <operator pos:start="72:17" pos:end="72:17">=</operator> <literal type="number" pos:start="72:19" pos:end="72:19">1</literal> <operator pos:start="72:21" pos:end="72:22">&lt;&lt;</operator> <name pos:start="72:24" pos:end="72:42"><name pos:start="72:24" pos:end="72:29">header</name><operator pos:start="72:30" pos:end="72:30">.</operator><name pos:start="72:31" pos:end="72:42">cluster_bits</name></name></expr>;</expr_stmt>
    <comment type="block" pos:start="73:5" pos:end="73:29">/* Handle feature bits */</comment>
    <expr_stmt pos:start="74:5" pos:end="74:63"><expr pos:start="74:5" pos:end="74:62"><name pos:start="74:5" pos:end="74:28"><name pos:start="74:5" pos:end="74:5">s</name><operator pos:start="74:6" pos:end="74:7">-&gt;</operator><name pos:start="74:8" pos:end="74:28">incompatible_features</name></name>    <operator pos:start="74:33" pos:end="74:33">=</operator> <name pos:start="74:35" pos:end="74:62"><name pos:start="74:35" pos:end="74:40">header</name><operator pos:start="74:41" pos:end="74:41">.</operator><name pos:start="74:42" pos:end="74:62">incompatible_features</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="75:5" pos:end="75:61"><expr pos:start="75:5" pos:end="75:60"><name pos:start="75:5" pos:end="75:26"><name pos:start="75:5" pos:end="75:5">s</name><operator pos:start="75:6" pos:end="75:7">-&gt;</operator><name pos:start="75:8" pos:end="75:26">compatible_features</name></name>      <operator pos:start="75:33" pos:end="75:33">=</operator> <name pos:start="75:35" pos:end="75:60"><name pos:start="75:35" pos:end="75:40">header</name><operator pos:start="75:41" pos:end="75:41">.</operator><name pos:start="75:42" pos:end="75:60">compatible_features</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="76:5" pos:end="76:60"><expr pos:start="76:5" pos:end="76:59"><name pos:start="76:5" pos:end="76:25"><name pos:start="76:5" pos:end="76:5">s</name><operator pos:start="76:6" pos:end="76:7">-&gt;</operator><name pos:start="76:8" pos:end="76:25">autoclear_features</name></name>       <operator pos:start="76:33" pos:end="76:33">=</operator> <name pos:start="76:35" pos:end="76:59"><name pos:start="76:35" pos:end="76:40">header</name><operator pos:start="76:41" pos:end="76:41">.</operator><name pos:start="76:42" pos:end="76:59">autoclear_features</name></name></expr>;</expr_stmt>
    <if_stmt pos:start="77:5" pos:end="271:15"><if pos:start="77:5" pos:end="271:15">if <condition pos:start="77:8" pos:end="77:56">(<expr pos:start="77:9" pos:end="77:55"><name pos:start="77:9" pos:end="77:32"><name pos:start="77:9" pos:end="77:9">s</name><operator pos:start="77:10" pos:end="77:11">-&gt;</operator><name pos:start="77:12" pos:end="77:32">incompatible_features</name></name> <operator pos:start="77:34" pos:end="77:34">&amp;</operator> <operator pos:start="77:36" pos:end="77:36">~</operator><name pos:start="77:37" pos:end="77:55">QCOW2_INCOMPAT_MASK</name></expr>)</condition> <block pos:start="77:58" pos:end="271:15">{<block_content pos:start="78:9" pos:end="271:15">
        <decl_stmt pos:start="78:9" pos:end="78:35"><decl pos:start="78:9" pos:end="78:34"><type pos:start="78:9" pos:end="78:14"><name pos:start="78:9" pos:end="78:12">void</name> <modifier pos:start="78:14" pos:end="78:14">*</modifier></type><name pos:start="78:15" pos:end="78:27">feature_table</name> <init pos:start="78:29" pos:end="78:34">= <expr pos:start="78:31" pos:end="78:34"><name pos:start="78:31" pos:end="78:34">NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="79:9" pos:end="80:65"><expr pos:start="79:9" pos:end="80:64"><call pos:start="79:9" pos:end="80:64"><name pos:start="79:9" pos:end="79:29">qcow2_read_extensions</name><argument_list pos:start="79:30" pos:end="80:64">(<argument pos:start="79:31" pos:end="79:32"><expr pos:start="79:31" pos:end="79:32"><name pos:start="79:31" pos:end="79:32">bs</name></expr></argument>, <argument pos:start="79:35" pos:end="79:54"><expr pos:start="79:35" pos:end="79:54"><name pos:start="79:35" pos:end="79:54"><name pos:start="79:35" pos:end="79:40">header</name><operator pos:start="79:41" pos:end="79:41">.</operator><name pos:start="79:42" pos:end="79:54">header_length</name></name></expr></argument>, <argument pos:start="79:57" pos:end="79:63"><expr pos:start="79:57" pos:end="79:63"><name pos:start="79:57" pos:end="79:63">ext_end</name></expr></argument>,
                              <argument pos:start="80:31" pos:end="80:44"><expr pos:start="80:31" pos:end="80:44"><operator pos:start="80:31" pos:end="80:31">&amp;</operator><name pos:start="80:32" pos:end="80:44">feature_table</name></expr></argument>, <argument pos:start="80:47" pos:end="80:51"><expr pos:start="80:47" pos:end="80:51"><name pos:start="80:47" pos:end="80:51">flags</name></expr></argument>, <argument pos:start="80:54" pos:end="80:57"><expr pos:start="80:54" pos:end="80:57"><name pos:start="80:54" pos:end="80:57">NULL</name></expr></argument>, <argument pos:start="80:60" pos:end="80:63"><expr pos:start="80:60" pos:end="80:63"><name pos:start="80:60" pos:end="80:63">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="81:9" pos:end="83:57"><expr pos:start="81:9" pos:end="83:56"><call pos:start="81:9" pos:end="83:56"><name pos:start="81:9" pos:end="81:34">report_unsupported_feature</name><argument_list pos:start="81:35" pos:end="83:56">(<argument pos:start="81:36" pos:end="81:39"><expr pos:start="81:36" pos:end="81:39"><name pos:start="81:36" pos:end="81:39">errp</name></expr></argument>, <argument pos:start="81:42" pos:end="81:54"><expr pos:start="81:42" pos:end="81:54"><name pos:start="81:42" pos:end="81:54">feature_table</name></expr></argument>,
                                   <argument pos:start="82:36" pos:end="83:55"><expr pos:start="82:36" pos:end="83:55"><name pos:start="82:36" pos:end="82:59"><name pos:start="82:36" pos:end="82:36">s</name><operator pos:start="82:37" pos:end="82:38">-&gt;</operator><name pos:start="82:39" pos:end="82:59">incompatible_features</name></name> <operator pos:start="82:61" pos:end="82:61">&amp;</operator>
                                   <operator pos:start="83:36" pos:end="83:36">~</operator><name pos:start="83:37" pos:end="83:55">QCOW2_INCOMPAT_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="84:9" pos:end="84:23"><expr pos:start="84:9" pos:end="84:22"><name pos:start="84:9" pos:end="84:11">ret</name> <operator pos:start="84:13" pos:end="84:13">=</operator> <operator pos:start="84:15" pos:end="84:15">-</operator><name pos:start="84:16" pos:end="84:22">ENOTSUP</name></expr>;</expr_stmt>
        <expr_stmt pos:start="85:9" pos:end="85:30"><expr pos:start="85:9" pos:end="85:29"><call pos:start="85:9" pos:end="85:29"><name pos:start="85:9" pos:end="85:14">g_free</name><argument_list pos:start="85:15" pos:end="85:29">(<argument pos:start="85:16" pos:end="85:28"><expr pos:start="85:16" pos:end="85:28"><name pos:start="85:16" pos:end="85:28">feature_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="86:5" pos:end="271:15"><if pos:start="86:5" pos:end="271:15">if <condition pos:start="86:8" pos:end="86:58">(<expr pos:start="86:9" pos:end="86:57"><name pos:start="86:9" pos:end="86:32"><name pos:start="86:9" pos:end="86:9">s</name><operator pos:start="86:10" pos:end="86:11">-&gt;</operator><name pos:start="86:12" pos:end="86:32">incompatible_features</name></name> <operator pos:start="86:34" pos:end="86:34">&amp;</operator> <name pos:start="86:36" pos:end="86:57">QCOW2_INCOMPAT_CORRUPT</name></expr>)</condition> <block pos:start="86:60" pos:end="271:15">{<block_content pos:start="89:9" pos:end="271:15">
        <comment type="block" pos:start="87:9" pos:end="88:11">/* Corrupt images may not be written to unless they are being repaired
         */</comment>
        <if_stmt pos:start="89:9" pos:end="271:15"><if pos:start="89:9" pos:end="271:15">if <condition pos:start="89:12" pos:end="89:61">(<expr pos:start="89:13" pos:end="89:60"><operator pos:start="89:13" pos:end="89:13">(</operator><name pos:start="89:14" pos:end="89:18">flags</name> <operator pos:start="89:20" pos:end="89:20">&amp;</operator> <name pos:start="89:22" pos:end="89:32">BDRV_O_RDWR</name><operator pos:start="89:33" pos:end="89:33">)</operator> <operator pos:start="89:35" pos:end="89:36">&amp;&amp;</operator> <operator pos:start="89:38" pos:end="89:38">!</operator><operator pos:start="89:39" pos:end="89:39">(</operator><name pos:start="89:40" pos:end="89:44">flags</name> <operator pos:start="89:46" pos:end="89:46">&amp;</operator> <name pos:start="89:48" pos:end="89:59">BDRV_O_CHECK</name><operator pos:start="89:60" pos:end="89:60">)</operator></expr>)</condition> <block pos:start="89:63" pos:end="271:15">{<block_content pos:start="90:13" pos:end="271:15">
            <expr_stmt pos:start="90:13" pos:end="91:37"><expr pos:start="90:13" pos:end="91:36"><call pos:start="90:13" pos:end="91:36"><name pos:start="90:13" pos:end="90:22">error_setg</name><argument_list pos:start="90:23" pos:end="91:36">(<argument pos:start="90:24" pos:end="90:27"><expr pos:start="90:24" pos:end="90:27"><name pos:start="90:24" pos:end="90:27">errp</name></expr></argument>, <argument pos:start="90:30" pos:end="91:35"><expr pos:start="90:30" pos:end="91:35"><literal type="string" pos:start="90:30" pos:end="90:73">"qcow2: Image is corrupt; cannot be opened "</literal>
                       <literal type="string" pos:start="91:24" pos:end="91:35">"read/write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="92:13" pos:end="92:26"><expr pos:start="92:13" pos:end="92:25"><name pos:start="92:13" pos:end="92:15">ret</name> <operator pos:start="92:17" pos:end="92:17">=</operator> <operator pos:start="92:19" pos:end="92:19">-</operator><name pos:start="92:20" pos:end="92:25">EACCES</name></expr>;</expr_stmt>
    <comment type="block" pos:start="93:5" pos:end="93:49">/* Check support for various header values */</comment>
    <if_stmt pos:start="94:5" pos:end="271:15"><if pos:start="94:5" pos:end="271:15">if <condition pos:start="94:8" pos:end="94:34">(<expr pos:start="94:9" pos:end="94:33"><name pos:start="94:9" pos:end="94:29"><name pos:start="94:9" pos:end="94:14">header</name><operator pos:start="94:15" pos:end="94:15">.</operator><name pos:start="94:16" pos:end="94:29">refcount_order</name></name> <operator pos:start="94:31" pos:end="94:31">&gt;</operator> <literal type="number" pos:start="94:33" pos:end="94:33">6</literal></expr>)</condition> <block pos:start="94:36" pos:end="271:15">{<block_content pos:start="95:9" pos:end="271:15">
        <expr_stmt pos:start="95:9" pos:end="96:37"><expr pos:start="95:9" pos:end="96:36"><call pos:start="95:9" pos:end="96:36"><name pos:start="95:9" pos:end="95:18">error_setg</name><argument_list pos:start="95:19" pos:end="96:36">(<argument pos:start="95:20" pos:end="95:23"><expr pos:start="95:20" pos:end="95:23"><name pos:start="95:20" pos:end="95:23">errp</name></expr></argument>, <argument pos:start="95:26" pos:end="96:35"><expr pos:start="95:26" pos:end="96:35"><literal type="string" pos:start="95:26" pos:end="95:74">"Reference count entry width too large; may not "</literal>
                   <literal type="string" pos:start="96:20" pos:end="96:35">"exceed 64 bits"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="97:5" pos:end="97:46"><expr pos:start="97:5" pos:end="97:45"><name pos:start="97:5" pos:end="97:21"><name pos:start="97:5" pos:end="97:5">s</name><operator pos:start="97:6" pos:end="97:7">-&gt;</operator><name pos:start="97:8" pos:end="97:21">refcount_order</name></name> <operator pos:start="97:23" pos:end="97:23">=</operator> <name pos:start="97:25" pos:end="97:45"><name pos:start="97:25" pos:end="97:30">header</name><operator pos:start="97:31" pos:end="97:31">.</operator><name pos:start="97:32" pos:end="97:45">refcount_order</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="98:5" pos:end="98:46"><expr pos:start="98:5" pos:end="98:45"><name pos:start="98:5" pos:end="98:20"><name pos:start="98:5" pos:end="98:5">s</name><operator pos:start="98:6" pos:end="98:7">-&gt;</operator><name pos:start="98:8" pos:end="98:20">refcount_bits</name></name> <operator pos:start="98:22" pos:end="98:22">=</operator> <literal type="number" pos:start="98:24" pos:end="98:24">1</literal> <operator pos:start="98:26" pos:end="98:27">&lt;&lt;</operator> <name pos:start="98:29" pos:end="98:45"><name pos:start="98:29" pos:end="98:29">s</name><operator pos:start="98:30" pos:end="98:31">-&gt;</operator><name pos:start="98:32" pos:end="98:45">refcount_order</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="99:5" pos:end="99:60"><expr pos:start="99:5" pos:end="99:59"><name pos:start="99:5" pos:end="99:19"><name pos:start="99:5" pos:end="99:5">s</name><operator pos:start="99:6" pos:end="99:7">-&gt;</operator><name pos:start="99:8" pos:end="99:19">refcount_max</name></name> <operator pos:start="99:21" pos:end="99:21">=</operator> <call pos:start="99:23" pos:end="99:33"><name pos:start="99:23" pos:end="99:30">UINT64_C</name><argument_list pos:start="99:31" pos:end="99:33">(<argument pos:start="99:32" pos:end="99:32"><expr pos:start="99:32" pos:end="99:32"><literal type="number" pos:start="99:32" pos:end="99:32">1</literal></expr></argument>)</argument_list></call> <operator pos:start="99:35" pos:end="99:36">&lt;&lt;</operator> <operator pos:start="99:38" pos:end="99:38">(</operator><name pos:start="99:39" pos:end="99:54"><name pos:start="99:39" pos:end="99:39">s</name><operator pos:start="99:40" pos:end="99:41">-&gt;</operator><name pos:start="99:42" pos:end="99:54">refcount_bits</name></name> <operator pos:start="99:56" pos:end="99:56">-</operator> <literal type="number" pos:start="99:58" pos:end="99:58">1</literal><operator pos:start="99:59" pos:end="99:59">)</operator></expr>;</expr_stmt>
    <expr_stmt pos:start="100:5" pos:end="100:43"><expr pos:start="100:5" pos:end="100:42"><name pos:start="100:5" pos:end="100:19"><name pos:start="100:5" pos:end="100:5">s</name><operator pos:start="100:6" pos:end="100:7">-&gt;</operator><name pos:start="100:8" pos:end="100:19">refcount_max</name></name> <operator pos:start="100:21" pos:end="100:22">+=</operator> <name pos:start="100:24" pos:end="100:38"><name pos:start="100:24" pos:end="100:24">s</name><operator pos:start="100:25" pos:end="100:26">-&gt;</operator><name pos:start="100:27" pos:end="100:38">refcount_max</name></name> <operator pos:start="100:40" pos:end="100:40">-</operator> <literal type="number" pos:start="100:42" pos:end="100:42">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="101:5" pos:end="101:49"><expr pos:start="101:5" pos:end="101:48"><name pos:start="101:5" pos:end="101:26"><name pos:start="101:5" pos:end="101:5">s</name><operator pos:start="101:6" pos:end="101:7">-&gt;</operator><name pos:start="101:8" pos:end="101:26">crypt_method_header</name></name> <operator pos:start="101:28" pos:end="101:28">=</operator> <name pos:start="101:30" pos:end="101:48"><name pos:start="101:30" pos:end="101:35">header</name><operator pos:start="101:36" pos:end="101:36">.</operator><name pos:start="101:37" pos:end="101:48">crypt_method</name></name></expr>;</expr_stmt>
    <if_stmt pos:start="102:5" pos:end="271:15"><if pos:start="102:5" pos:end="271:15">if <condition pos:start="102:8" pos:end="102:31">(<expr pos:start="102:9" pos:end="102:30"><name pos:start="102:9" pos:end="102:30"><name pos:start="102:9" pos:end="102:9">s</name><operator pos:start="102:10" pos:end="102:11">-&gt;</operator><name pos:start="102:12" pos:end="102:30">crypt_method_header</name></name></expr>)</condition> <block pos:start="102:33" pos:end="271:15">{<block_content pos:start="103:9" pos:end="271:15">
        <if_stmt pos:start="103:9" pos:end="271:15"><if pos:start="103:9" pos:end="271:15">if <condition pos:start="103:12" pos:end="104:53">(<expr pos:start="103:13" pos:end="104:52"><call pos:start="103:13" pos:end="103:33"><name pos:start="103:13" pos:end="103:31">bdrv_uses_whitelist</name><argument_list pos:start="103:32" pos:end="103:33">()</argument_list></call> <operator pos:start="103:35" pos:end="103:36">&amp;&amp;</operator>
            <name pos:start="104:13" pos:end="104:34"><name pos:start="104:13" pos:end="104:13">s</name><operator pos:start="104:14" pos:end="104:15">-&gt;</operator><name pos:start="104:16" pos:end="104:34">crypt_method_header</name></name> <operator pos:start="104:36" pos:end="104:37">==</operator> <name pos:start="104:39" pos:end="104:52">QCOW_CRYPT_AES</name></expr>)</condition> <block pos:start="104:55" pos:end="271:15">{<block_content pos:start="105:13" pos:end="271:15">
            <expr_stmt pos:start="105:13" pos:end="107:56"><expr pos:start="105:13" pos:end="107:55"><call pos:start="105:13" pos:end="107:55"><name pos:start="105:13" pos:end="105:22">error_setg</name><argument_list pos:start="105:23" pos:end="107:55">(<argument pos:start="105:24" pos:end="105:27"><expr pos:start="105:24" pos:end="105:27"><name pos:start="105:24" pos:end="105:27">errp</name></expr></argument>,
                       <argument pos:start="106:24" pos:end="107:54"><expr pos:start="106:24" pos:end="107:54"><literal type="string" pos:start="106:24" pos:end="106:76">"Use of AES-CBC encrypted qcow2 images is no longer "</literal>
                       <literal type="string" pos:start="107:24" pos:end="107:54">"supported in system emulators"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="108:13" pos:end="112:51"><expr pos:start="108:13" pos:end="112:50"><call pos:start="108:13" pos:end="112:50"><name pos:start="108:13" pos:end="108:29">error_append_hint</name><argument_list pos:start="108:30" pos:end="112:50">(<argument pos:start="108:31" pos:end="108:34"><expr pos:start="108:31" pos:end="108:34"><name pos:start="108:31" pos:end="108:34">errp</name></expr></argument>,
                              <argument pos:start="109:31" pos:end="112:49"><expr pos:start="109:31" pos:end="112:49"><literal type="string" pos:start="109:31" pos:end="109:79">"You can use 'qemu-img convert' to convert your "</literal>
                              <literal type="string" pos:start="110:31" pos:end="110:79">"image to an alternative supported format, such "</literal>
                              <literal type="string" pos:start="111:31" pos:end="111:75">"as unencrypted qcow2, or raw with the LUKS "</literal>
                              <literal type="string" pos:start="112:31" pos:end="112:49">"format instead.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="113:13" pos:end="113:26"><expr pos:start="113:13" pos:end="113:25"><name pos:start="113:13" pos:end="113:15">ret</name> <operator pos:start="113:17" pos:end="113:17">=</operator> <operator pos:start="113:19" pos:end="113:19">-</operator><name pos:start="113:20" pos:end="113:25">ENOSYS</name></expr>;</expr_stmt>
        <if_stmt pos:start="114:9" pos:end="271:15"><if pos:start="114:9" pos:end="116:9">if <condition pos:start="114:12" pos:end="114:53">(<expr pos:start="114:13" pos:end="114:52"><name pos:start="114:13" pos:end="114:34"><name pos:start="114:13" pos:end="114:13">s</name><operator pos:start="114:14" pos:end="114:15">-&gt;</operator><name pos:start="114:16" pos:end="114:34">crypt_method_header</name></name> <operator pos:start="114:36" pos:end="114:37">==</operator> <name pos:start="114:39" pos:end="114:52">QCOW_CRYPT_AES</name></expr>)</condition> <block pos:start="114:55" pos:end="116:9">{<block_content pos:start="115:13" pos:end="115:45">
            <expr_stmt pos:start="115:13" pos:end="115:45"><expr pos:start="115:13" pos:end="115:44"><name pos:start="115:13" pos:end="115:36"><name pos:start="115:13" pos:end="115:13">s</name><operator pos:start="115:14" pos:end="115:15">-&gt;</operator><name pos:start="115:16" pos:end="115:36">crypt_physical_offset</name></name> <operator pos:start="115:38" pos:end="115:38">=</operator> <name pos:start="115:40" pos:end="115:44">false</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="116:11" pos:end="271:15">else <block pos:start="116:16" pos:end="271:15">{<block_content pos:start="120:13" pos:end="271:15">
            <comment type="block" pos:start="117:13" pos:end="119:59">/* Assuming LUKS and any future crypt methods we
             * add will all use physical offsets, due to the
             * fact that the alternative is insecure...  */</comment>
            <expr_stmt pos:start="120:13" pos:end="120:44"><expr pos:start="120:13" pos:end="120:43"><name pos:start="120:13" pos:end="120:36"><name pos:start="120:13" pos:end="120:13">s</name><operator pos:start="120:14" pos:end="120:15">-&gt;</operator><name pos:start="120:16" pos:end="120:36">crypt_physical_offset</name></name> <operator pos:start="120:38" pos:end="120:38">=</operator> <name pos:start="120:40" pos:end="120:43">true</name></expr>;</expr_stmt>
        <expr_stmt pos:start="121:9" pos:end="121:29"><expr pos:start="121:9" pos:end="121:28"><name pos:start="121:9" pos:end="121:21"><name pos:start="121:9" pos:end="121:10">bs</name><operator pos:start="121:11" pos:end="121:12">-&gt;</operator><name pos:start="121:13" pos:end="121:21">encrypted</name></name> <operator pos:start="121:23" pos:end="121:23">=</operator> <name pos:start="121:25" pos:end="121:28">true</name></expr>;</expr_stmt>
    <expr_stmt pos:start="122:5" pos:end="122:37"><expr pos:start="122:5" pos:end="122:36"><name pos:start="122:5" pos:end="122:14"><name pos:start="122:5" pos:end="122:5">s</name><operator pos:start="122:6" pos:end="122:7">-&gt;</operator><name pos:start="122:8" pos:end="122:14">l2_bits</name></name> <operator pos:start="122:16" pos:end="122:16">=</operator> <name pos:start="122:18" pos:end="122:32"><name pos:start="122:18" pos:end="122:18">s</name><operator pos:start="122:19" pos:end="122:20">-&gt;</operator><name pos:start="122:21" pos:end="122:32">cluster_bits</name></name> <operator pos:start="122:34" pos:end="122:34">-</operator> <literal type="number" pos:start="122:36" pos:end="122:36">3</literal></expr>;</expr_stmt> <comment type="block" pos:start="122:39" pos:end="122:68">/* L2 is always one cluster */</comment>
    <expr_stmt pos:start="123:5" pos:end="123:33"><expr pos:start="123:5" pos:end="123:32"><name pos:start="123:5" pos:end="123:14"><name pos:start="123:5" pos:end="123:5">s</name><operator pos:start="123:6" pos:end="123:7">-&gt;</operator><name pos:start="123:8" pos:end="123:14">l2_size</name></name> <operator pos:start="123:16" pos:end="123:16">=</operator> <literal type="number" pos:start="123:18" pos:end="123:18">1</literal> <operator pos:start="123:20" pos:end="123:21">&lt;&lt;</operator> <name pos:start="123:23" pos:end="123:32"><name pos:start="123:23" pos:end="123:23">s</name><operator pos:start="123:24" pos:end="123:25">-&gt;</operator><name pos:start="123:26" pos:end="123:32">l2_bits</name></name></expr>;</expr_stmt>
    <comment type="block" pos:start="124:5" pos:end="124:66">/* 2^(s-&gt;refcount_order - 3) is the refcount width in bytes */</comment>
    <expr_stmt pos:start="125:5" pos:end="125:71"><expr pos:start="125:5" pos:end="125:70"><name pos:start="125:5" pos:end="125:26"><name pos:start="125:5" pos:end="125:5">s</name><operator pos:start="125:6" pos:end="125:7">-&gt;</operator><name pos:start="125:8" pos:end="125:26">refcount_block_bits</name></name> <operator pos:start="125:28" pos:end="125:28">=</operator> <name pos:start="125:30" pos:end="125:44"><name pos:start="125:30" pos:end="125:30">s</name><operator pos:start="125:31" pos:end="125:32">-&gt;</operator><name pos:start="125:33" pos:end="125:44">cluster_bits</name></name> <operator pos:start="125:46" pos:end="125:46">-</operator> <operator pos:start="125:48" pos:end="125:48">(</operator><name pos:start="125:49" pos:end="125:65"><name pos:start="125:49" pos:end="125:49">s</name><operator pos:start="125:50" pos:end="125:51">-&gt;</operator><name pos:start="125:52" pos:end="125:65">refcount_order</name></name> <operator pos:start="125:67" pos:end="125:67">-</operator> <literal type="number" pos:start="125:69" pos:end="125:69">3</literal><operator pos:start="125:70" pos:end="125:70">)</operator></expr>;</expr_stmt>
    <expr_stmt pos:start="126:5" pos:end="126:57"><expr pos:start="126:5" pos:end="126:56"><name pos:start="126:5" pos:end="126:26"><name pos:start="126:5" pos:end="126:5">s</name><operator pos:start="126:6" pos:end="126:7">-&gt;</operator><name pos:start="126:8" pos:end="126:26">refcount_block_size</name></name> <operator pos:start="126:28" pos:end="126:28">=</operator> <literal type="number" pos:start="126:30" pos:end="126:30">1</literal> <operator pos:start="126:32" pos:end="126:33">&lt;&lt;</operator> <name pos:start="126:35" pos:end="126:56"><name pos:start="126:35" pos:end="126:35">s</name><operator pos:start="126:36" pos:end="126:37">-&gt;</operator><name pos:start="126:38" pos:end="126:56">refcount_block_bits</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="127:5" pos:end="127:42"><expr pos:start="127:5" pos:end="127:41"><name pos:start="127:5" pos:end="127:21"><name pos:start="127:5" pos:end="127:6">bs</name><operator pos:start="127:7" pos:end="127:8">-&gt;</operator><name pos:start="127:9" pos:end="127:21">total_sectors</name></name> <operator pos:start="127:23" pos:end="127:23">=</operator> <name pos:start="127:25" pos:end="127:35"><name pos:start="127:25" pos:end="127:30">header</name><operator pos:start="127:31" pos:end="127:31">.</operator><name pos:start="127:32" pos:end="127:35">size</name></name> <operator pos:start="127:37" pos:end="127:37">/</operator> <literal type="number" pos:start="127:39" pos:end="127:41">512</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="128:5" pos:end="128:50"><expr pos:start="128:5" pos:end="128:49"><name pos:start="128:5" pos:end="128:18"><name pos:start="128:5" pos:end="128:5">s</name><operator pos:start="128:6" pos:end="128:7">-&gt;</operator><name pos:start="128:8" pos:end="128:18">csize_shift</name></name> <operator pos:start="128:20" pos:end="128:20">=</operator> <operator pos:start="128:22" pos:end="128:22">(</operator><literal type="number" pos:start="128:23" pos:end="128:26">62</literal> <operator pos:start="128:26" pos:end="128:26">-</operator> <operator pos:start="128:28" pos:end="128:28">(</operator><name pos:start="128:29" pos:end="128:43"><name pos:start="128:29" pos:end="128:29">s</name><operator pos:start="128:30" pos:end="128:31">-&gt;</operator><name pos:start="128:32" pos:end="128:43">cluster_bits</name></name> <operator pos:start="128:45" pos:end="128:45">-</operator> <literal type="number" pos:start="128:47" pos:end="128:47">8</literal><operator pos:start="128:48" pos:end="128:48">)</operator><operator pos:start="128:49" pos:end="128:49">)</operator></expr>;</expr_stmt>
    <expr_stmt pos:start="129:5" pos:end="129:53"><expr pos:start="129:5" pos:end="129:52"><name pos:start="129:5" pos:end="129:17"><name pos:start="129:5" pos:end="129:5">s</name><operator pos:start="129:6" pos:end="129:7">-&gt;</operator><name pos:start="129:8" pos:end="129:17">csize_mask</name></name> <operator pos:start="129:19" pos:end="129:19">=</operator> <operator pos:start="129:21" pos:end="129:21">(</operator><literal type="number" pos:start="129:22" pos:end="129:22">1</literal> <operator pos:start="129:24" pos:end="129:25">&lt;&lt;</operator> <operator pos:start="129:27" pos:end="129:27">(</operator><name pos:start="129:28" pos:end="129:42"><name pos:start="129:28" pos:end="129:28">s</name><operator pos:start="129:29" pos:end="129:30">-&gt;</operator><name pos:start="129:31" pos:end="129:42">cluster_bits</name></name> <operator pos:start="129:44" pos:end="129:44">-</operator> <literal type="number" pos:start="129:46" pos:end="129:46">8</literal><operator pos:start="129:47" pos:end="129:47">)</operator><operator pos:start="129:48" pos:end="129:48">)</operator> <operator pos:start="129:50" pos:end="129:50">-</operator> <literal type="number" pos:start="129:52" pos:end="129:52">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="130:5" pos:end="130:57"><expr pos:start="130:5" pos:end="130:56"><name pos:start="130:5" pos:end="130:26"><name pos:start="130:5" pos:end="130:5">s</name><operator pos:start="130:6" pos:end="130:7">-&gt;</operator><name pos:start="130:8" pos:end="130:26">cluster_offset_mask</name></name> <operator pos:start="130:28" pos:end="130:28">=</operator> <operator pos:start="130:30" pos:end="130:30">(</operator><literal type="number" pos:start="130:31" pos:end="130:33">1LL</literal> <operator pos:start="130:35" pos:end="130:36">&lt;&lt;</operator> <name pos:start="130:38" pos:end="130:51"><name pos:start="130:38" pos:end="130:38">s</name><operator pos:start="130:39" pos:end="130:40">-&gt;</operator><name pos:start="130:41" pos:end="130:51">csize_shift</name></name><operator pos:start="130:52" pos:end="130:52">)</operator> <operator pos:start="130:54" pos:end="130:54">-</operator> <literal type="number" pos:start="130:56" pos:end="130:56">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="131:5" pos:end="131:60"><expr pos:start="131:5" pos:end="131:59"><name pos:start="131:5" pos:end="131:28"><name pos:start="131:5" pos:end="131:5">s</name><operator pos:start="131:6" pos:end="131:7">-&gt;</operator><name pos:start="131:8" pos:end="131:28">refcount_table_offset</name></name> <operator pos:start="131:30" pos:end="131:30">=</operator> <name pos:start="131:32" pos:end="131:59"><name pos:start="131:32" pos:end="131:37">header</name><operator pos:start="131:38" pos:end="131:38">.</operator><name pos:start="131:39" pos:end="131:59">refcount_table_offset</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="132:5" pos:end="133:64"><expr pos:start="132:5" pos:end="133:63"><name pos:start="132:5" pos:end="132:26"><name pos:start="132:5" pos:end="132:5">s</name><operator pos:start="132:6" pos:end="132:7">-&gt;</operator><name pos:start="132:8" pos:end="132:26">refcount_table_size</name></name> <operator pos:start="132:28" pos:end="132:28">=</operator>
        <name pos:start="133:9" pos:end="133:38"><name pos:start="133:9" pos:end="133:14">header</name><operator pos:start="133:15" pos:end="133:15">.</operator><name pos:start="133:16" pos:end="133:38">refcount_table_clusters</name></name> <operator pos:start="133:40" pos:end="133:41">&lt;&lt;</operator> <operator pos:start="133:43" pos:end="133:43">(</operator><name pos:start="133:44" pos:end="133:58"><name pos:start="133:44" pos:end="133:44">s</name><operator pos:start="133:45" pos:end="133:46">-&gt;</operator><name pos:start="133:47" pos:end="133:58">cluster_bits</name></name> <operator pos:start="133:60" pos:end="133:60">-</operator> <literal type="number" pos:start="133:62" pos:end="133:62">3</literal><operator pos:start="133:63" pos:end="133:63">)</operator></expr>;</expr_stmt>
    <if_stmt pos:start="134:5" pos:end="271:15"><if pos:start="134:5" pos:end="271:15">if <condition pos:start="134:8" pos:end="134:72">(<expr pos:start="134:9" pos:end="134:71"><name pos:start="134:9" pos:end="134:38"><name pos:start="134:9" pos:end="134:14">header</name><operator pos:start="134:15" pos:end="134:15">.</operator><name pos:start="134:16" pos:end="134:38">refcount_table_clusters</name></name> <operator pos:start="134:40" pos:end="134:40">&gt;</operator> <call pos:start="134:42" pos:end="134:71"><name pos:start="134:42" pos:end="134:68">qcow2_max_refcount_clusters</name><argument_list pos:start="134:69" pos:end="134:71">(<argument pos:start="134:70" pos:end="134:70"><expr pos:start="134:70" pos:end="134:70"><name pos:start="134:70" pos:end="134:70">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="134:74" pos:end="271:15">{<block_content pos:start="135:9" pos:end="271:15">
        <expr_stmt pos:start="135:9" pos:end="135:60"><expr pos:start="135:9" pos:end="135:59"><call pos:start="135:9" pos:end="135:59"><name pos:start="135:9" pos:end="135:18">error_setg</name><argument_list pos:start="135:19" pos:end="135:59">(<argument pos:start="135:20" pos:end="135:23"><expr pos:start="135:20" pos:end="135:23"><name pos:start="135:20" pos:end="135:23">errp</name></expr></argument>, <argument pos:start="135:26" pos:end="135:58"><expr pos:start="135:26" pos:end="135:58"><literal type="string" pos:start="135:26" pos:end="135:58">"Reference count table too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="136:5" pos:end="137:74"><expr pos:start="136:5" pos:end="137:73"><name pos:start="136:5" pos:end="136:7">ret</name> <operator pos:start="136:9" pos:end="136:9">=</operator> <call pos:start="136:11" pos:end="137:73"><name pos:start="136:11" pos:end="136:31">validate_table_offset</name><argument_list pos:start="136:32" pos:end="137:73">(<argument pos:start="136:33" pos:end="136:34"><expr pos:start="136:33" pos:end="136:34"><name pos:start="136:33" pos:end="136:34">bs</name></expr></argument>, <argument pos:start="136:37" pos:end="136:60"><expr pos:start="136:37" pos:end="136:60"><name pos:start="136:37" pos:end="136:60"><name pos:start="136:37" pos:end="136:37">s</name><operator pos:start="136:38" pos:end="136:39">-&gt;</operator><name pos:start="136:40" pos:end="136:60">refcount_table_offset</name></name></expr></argument>,
                                <argument pos:start="137:33" pos:end="137:54"><expr pos:start="137:33" pos:end="137:54"><name pos:start="137:33" pos:end="137:54"><name pos:start="137:33" pos:end="137:33">s</name><operator pos:start="137:34" pos:end="137:35">-&gt;</operator><name pos:start="137:36" pos:end="137:54">refcount_table_size</name></name></expr></argument>, <argument pos:start="137:57" pos:end="137:72"><expr pos:start="137:57" pos:end="137:72"><sizeof pos:start="137:57" pos:end="137:72">sizeof<argument_list pos:start="137:63" pos:end="137:72">(<argument pos:start="137:64" pos:end="137:71"><expr pos:start="137:64" pos:end="137:71"><name pos:start="137:64" pos:end="137:71">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="138:5" pos:end="271:15"><if pos:start="138:5" pos:end="271:15">if <condition pos:start="138:8" pos:end="138:16">(<expr pos:start="138:9" pos:end="138:15"><name pos:start="138:9" pos:end="138:11">ret</name> <operator pos:start="138:13" pos:end="138:13">&lt;</operator> <literal type="number" pos:start="138:15" pos:end="138:15">0</literal></expr>)</condition> <block pos:start="138:18" pos:end="271:15">{<block_content pos:start="139:9" pos:end="271:15">
        <expr_stmt pos:start="139:9" pos:end="139:65"><expr pos:start="139:9" pos:end="139:64"><call pos:start="139:9" pos:end="139:64"><name pos:start="139:9" pos:end="139:18">error_setg</name><argument_list pos:start="139:19" pos:end="139:64">(<argument pos:start="139:20" pos:end="139:23"><expr pos:start="139:20" pos:end="139:23"><name pos:start="139:20" pos:end="139:23">errp</name></expr></argument>, <argument pos:start="139:26" pos:end="139:63"><expr pos:start="139:26" pos:end="139:63"><literal type="string" pos:start="139:26" pos:end="139:63">"Invalid reference count table offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="140:5" pos:end="140:38">/* Snapshot table offset/length */</comment>
    <if_stmt pos:start="141:5" pos:end="271:15"><if pos:start="141:5" pos:end="271:15">if <condition pos:start="141:8" pos:end="141:49">(<expr pos:start="141:9" pos:end="141:48"><name pos:start="141:9" pos:end="141:27"><name pos:start="141:9" pos:end="141:14">header</name><operator pos:start="141:15" pos:end="141:15">.</operator><name pos:start="141:16" pos:end="141:27">nb_snapshots</name></name> <operator pos:start="141:29" pos:end="141:29">&gt;</operator> <name pos:start="141:31" pos:end="141:48">QCOW_MAX_SNAPSHOTS</name></expr>)</condition> <block pos:start="141:51" pos:end="271:15">{<block_content pos:start="142:9" pos:end="271:15">
        <expr_stmt pos:start="142:9" pos:end="142:47"><expr pos:start="142:9" pos:end="142:46"><call pos:start="142:9" pos:end="142:46"><name pos:start="142:9" pos:end="142:18">error_setg</name><argument_list pos:start="142:19" pos:end="142:46">(<argument pos:start="142:20" pos:end="142:23"><expr pos:start="142:20" pos:end="142:23"><name pos:start="142:20" pos:end="142:23">errp</name></expr></argument>, <argument pos:start="142:26" pos:end="142:45"><expr pos:start="142:26" pos:end="142:45"><literal type="string" pos:start="142:26" pos:end="142:45">"Too many snapshots"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="143:5" pos:end="145:60"><expr pos:start="143:5" pos:end="145:59"><name pos:start="143:5" pos:end="143:7">ret</name> <operator pos:start="143:9" pos:end="143:9">=</operator> <call pos:start="143:11" pos:end="145:59"><name pos:start="143:11" pos:end="143:31">validate_table_offset</name><argument_list pos:start="143:32" pos:end="145:59">(<argument pos:start="143:33" pos:end="143:34"><expr pos:start="143:33" pos:end="143:34"><name pos:start="143:33" pos:end="143:34">bs</name></expr></argument>, <argument pos:start="143:37" pos:end="143:59"><expr pos:start="143:37" pos:end="143:59"><name pos:start="143:37" pos:end="143:59"><name pos:start="143:37" pos:end="143:42">header</name><operator pos:start="143:43" pos:end="143:43">.</operator><name pos:start="143:44" pos:end="143:59">snapshots_offset</name></name></expr></argument>,
                                <argument pos:start="144:33" pos:end="144:51"><expr pos:start="144:33" pos:end="144:51"><name pos:start="144:33" pos:end="144:51"><name pos:start="144:33" pos:end="144:38">header</name><operator pos:start="144:39" pos:end="144:39">.</operator><name pos:start="144:40" pos:end="144:51">nb_snapshots</name></name></expr></argument>,
                                <argument pos:start="145:33" pos:end="145:58"><expr pos:start="145:33" pos:end="145:58"><sizeof pos:start="145:33" pos:end="145:58">sizeof<argument_list pos:start="145:39" pos:end="145:58">(<argument pos:start="145:40" pos:end="145:57"><expr pos:start="145:40" pos:end="145:57"><name pos:start="145:40" pos:end="145:57">QCowSnapshotHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="146:5" pos:end="271:15"><if pos:start="146:5" pos:end="271:15">if <condition pos:start="146:8" pos:end="146:16">(<expr pos:start="146:9" pos:end="146:15"><name pos:start="146:9" pos:end="146:11">ret</name> <operator pos:start="146:13" pos:end="146:13">&lt;</operator> <literal type="number" pos:start="146:15" pos:end="146:15">0</literal></expr>)</condition> <block pos:start="146:18" pos:end="271:15">{<block_content pos:start="147:9" pos:end="271:15">
        <expr_stmt pos:start="147:9" pos:end="147:58"><expr pos:start="147:9" pos:end="147:57"><call pos:start="147:9" pos:end="147:57"><name pos:start="147:9" pos:end="147:18">error_setg</name><argument_list pos:start="147:19" pos:end="147:57">(<argument pos:start="147:20" pos:end="147:23"><expr pos:start="147:20" pos:end="147:23"><name pos:start="147:20" pos:end="147:23">errp</name></expr></argument>, <argument pos:start="147:26" pos:end="147:56"><expr pos:start="147:26" pos:end="147:56"><literal type="string" pos:start="147:26" pos:end="147:56">"Invalid snapshot table offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="148:5" pos:end="148:32">/* read the level 1 table */</comment>
    <if_stmt pos:start="149:5" pos:end="271:15"><if pos:start="149:5" pos:end="271:15">if <condition pos:start="149:8" pos:end="149:61">(<expr pos:start="149:9" pos:end="149:60"><name pos:start="149:9" pos:end="149:22"><name pos:start="149:9" pos:end="149:14">header</name><operator pos:start="149:15" pos:end="149:15">.</operator><name pos:start="149:16" pos:end="149:22">l1_size</name></name> <operator pos:start="149:24" pos:end="149:24">&gt;</operator> <name pos:start="149:26" pos:end="149:41">QCOW_MAX_L1_SIZE</name> <operator pos:start="149:43" pos:end="149:43">/</operator> <sizeof pos:start="149:45" pos:end="149:60">sizeof<argument_list pos:start="149:51" pos:end="149:60">(<argument pos:start="149:52" pos:end="149:59"><expr pos:start="149:52" pos:end="149:59"><name pos:start="149:52" pos:end="149:59">uint64_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="149:63" pos:end="271:15">{<block_content pos:start="150:9" pos:end="271:15">
        <expr_stmt pos:start="150:9" pos:end="150:54"><expr pos:start="150:9" pos:end="150:53"><call pos:start="150:9" pos:end="150:53"><name pos:start="150:9" pos:end="150:18">error_setg</name><argument_list pos:start="150:19" pos:end="150:53">(<argument pos:start="150:20" pos:end="150:23"><expr pos:start="150:20" pos:end="150:23"><name pos:start="150:20" pos:end="150:23">errp</name></expr></argument>, <argument pos:start="150:26" pos:end="150:52"><expr pos:start="150:26" pos:end="150:52"><literal type="string" pos:start="150:26" pos:end="150:52">"Active L1 table too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="151:9" pos:end="151:21"><expr pos:start="151:9" pos:end="151:20"><name pos:start="151:9" pos:end="151:11">ret</name> <operator pos:start="151:13" pos:end="151:13">=</operator> <operator pos:start="151:15" pos:end="151:15">-</operator><name pos:start="151:16" pos:end="151:20">EFBIG</name></expr>;</expr_stmt>
    <expr_stmt pos:start="152:5" pos:end="152:32"><expr pos:start="152:5" pos:end="152:31"><name pos:start="152:5" pos:end="152:14"><name pos:start="152:5" pos:end="152:5">s</name><operator pos:start="152:6" pos:end="152:7">-&gt;</operator><name pos:start="152:8" pos:end="152:14">l1_size</name></name> <operator pos:start="152:16" pos:end="152:16">=</operator> <name pos:start="152:18" pos:end="152:31"><name pos:start="152:18" pos:end="152:23">header</name><operator pos:start="152:24" pos:end="152:24">.</operator><name pos:start="152:25" pos:end="152:31">l1_size</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="153:5" pos:end="153:51"><expr pos:start="153:5" pos:end="153:50"><name pos:start="153:5" pos:end="153:21">l1_vm_state_index</name> <operator pos:start="153:23" pos:end="153:23">=</operator> <call pos:start="153:25" pos:end="153:50"><name pos:start="153:25" pos:end="153:34">size_to_l1</name><argument_list pos:start="153:35" pos:end="153:50">(<argument pos:start="153:36" pos:end="153:36"><expr pos:start="153:36" pos:end="153:36"><name pos:start="153:36" pos:end="153:36">s</name></expr></argument>, <argument pos:start="153:39" pos:end="153:49"><expr pos:start="153:39" pos:end="153:49"><name pos:start="153:39" pos:end="153:49"><name pos:start="153:39" pos:end="153:44">header</name><operator pos:start="153:45" pos:end="153:45">.</operator><name pos:start="153:46" pos:end="153:49">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="154:5" pos:end="271:15"><if pos:start="154:5" pos:end="271:15">if <condition pos:start="154:8" pos:end="154:36">(<expr pos:start="154:9" pos:end="154:35"><name pos:start="154:9" pos:end="154:25">l1_vm_state_index</name> <operator pos:start="154:27" pos:end="154:27">&gt;</operator> <name pos:start="154:29" pos:end="154:35">INT_MAX</name></expr>)</condition> <block pos:start="154:38" pos:end="271:15">{<block_content pos:start="155:9" pos:end="271:15">
        <expr_stmt pos:start="155:9" pos:end="155:45"><expr pos:start="155:9" pos:end="155:44"><call pos:start="155:9" pos:end="155:44"><name pos:start="155:9" pos:end="155:18">error_setg</name><argument_list pos:start="155:19" pos:end="155:44">(<argument pos:start="155:20" pos:end="155:23"><expr pos:start="155:20" pos:end="155:23"><name pos:start="155:20" pos:end="155:23">errp</name></expr></argument>, <argument pos:start="155:26" pos:end="155:43"><expr pos:start="155:26" pos:end="155:43"><literal type="string" pos:start="155:26" pos:end="155:43">"Image is too big"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="156:9" pos:end="156:21"><expr pos:start="156:9" pos:end="156:20"><name pos:start="156:9" pos:end="156:11">ret</name> <operator pos:start="156:13" pos:end="156:13">=</operator> <operator pos:start="156:15" pos:end="156:15">-</operator><name pos:start="156:16" pos:end="156:20">EFBIG</name></expr>;</expr_stmt>
    <expr_stmt pos:start="157:5" pos:end="157:45"><expr pos:start="157:5" pos:end="157:44"><name pos:start="157:5" pos:end="157:24"><name pos:start="157:5" pos:end="157:5">s</name><operator pos:start="157:6" pos:end="157:7">-&gt;</operator><name pos:start="157:8" pos:end="157:24">l1_vm_state_index</name></name> <operator pos:start="157:26" pos:end="157:26">=</operator> <name pos:start="157:28" pos:end="157:44">l1_vm_state_index</name></expr>;</expr_stmt>
    <comment type="block" pos:start="158:5" pos:end="159:27">/* the L1 table must contain at least enough entries to put
       header.size bytes */</comment>
    <if_stmt pos:start="160:5" pos:end="271:15"><if pos:start="160:5" pos:end="271:15">if <condition pos:start="160:8" pos:end="160:42">(<expr pos:start="160:9" pos:end="160:41"><name pos:start="160:9" pos:end="160:18"><name pos:start="160:9" pos:end="160:9">s</name><operator pos:start="160:10" pos:end="160:11">-&gt;</operator><name pos:start="160:12" pos:end="160:18">l1_size</name></name> <operator pos:start="160:20" pos:end="160:20">&lt;</operator> <name pos:start="160:22" pos:end="160:41"><name pos:start="160:22" pos:end="160:22">s</name><operator pos:start="160:23" pos:end="160:24">-&gt;</operator><name pos:start="160:25" pos:end="160:41">l1_vm_state_index</name></name></expr>)</condition> <block pos:start="160:44" pos:end="271:15">{<block_content pos:start="161:9" pos:end="271:15">
        <expr_stmt pos:start="161:9" pos:end="161:50"><expr pos:start="161:9" pos:end="161:49"><call pos:start="161:9" pos:end="161:49"><name pos:start="161:9" pos:end="161:18">error_setg</name><argument_list pos:start="161:19" pos:end="161:49">(<argument pos:start="161:20" pos:end="161:23"><expr pos:start="161:20" pos:end="161:23"><name pos:start="161:20" pos:end="161:23">errp</name></expr></argument>, <argument pos:start="161:26" pos:end="161:48"><expr pos:start="161:26" pos:end="161:48"><literal type="string" pos:start="161:26" pos:end="161:48">"L1 table is too small"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="162:5" pos:end="163:66"><expr pos:start="162:5" pos:end="163:65"><name pos:start="162:5" pos:end="162:7">ret</name> <operator pos:start="162:9" pos:end="162:9">=</operator> <call pos:start="162:11" pos:end="163:65"><name pos:start="162:11" pos:end="162:31">validate_table_offset</name><argument_list pos:start="162:32" pos:end="163:65">(<argument pos:start="162:33" pos:end="162:34"><expr pos:start="162:33" pos:end="162:34"><name pos:start="162:33" pos:end="162:34">bs</name></expr></argument>, <argument pos:start="162:37" pos:end="162:58"><expr pos:start="162:37" pos:end="162:58"><name pos:start="162:37" pos:end="162:58"><name pos:start="162:37" pos:end="162:42">header</name><operator pos:start="162:43" pos:end="162:43">.</operator><name pos:start="162:44" pos:end="162:58">l1_table_offset</name></name></expr></argument>,
                                <argument pos:start="163:33" pos:end="163:46"><expr pos:start="163:33" pos:end="163:46"><name pos:start="163:33" pos:end="163:46"><name pos:start="163:33" pos:end="163:38">header</name><operator pos:start="163:39" pos:end="163:39">.</operator><name pos:start="163:40" pos:end="163:46">l1_size</name></name></expr></argument>, <argument pos:start="163:49" pos:end="163:64"><expr pos:start="163:49" pos:end="163:64"><sizeof pos:start="163:49" pos:end="163:64">sizeof<argument_list pos:start="163:55" pos:end="163:64">(<argument pos:start="163:56" pos:end="163:63"><expr pos:start="163:56" pos:end="163:63"><name pos:start="163:56" pos:end="163:63">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="164:5" pos:end="271:15"><if pos:start="164:5" pos:end="271:15">if <condition pos:start="164:8" pos:end="164:16">(<expr pos:start="164:9" pos:end="164:15"><name pos:start="164:9" pos:end="164:11">ret</name> <operator pos:start="164:13" pos:end="164:13">&lt;</operator> <literal type="number" pos:start="164:15" pos:end="164:15">0</literal></expr>)</condition> <block pos:start="164:18" pos:end="271:15">{<block_content pos:start="165:9" pos:end="271:15">
        <expr_stmt pos:start="165:9" pos:end="165:52"><expr pos:start="165:9" pos:end="165:51"><call pos:start="165:9" pos:end="165:51"><name pos:start="165:9" pos:end="165:18">error_setg</name><argument_list pos:start="165:19" pos:end="165:51">(<argument pos:start="165:20" pos:end="165:23"><expr pos:start="165:20" pos:end="165:23"><name pos:start="165:20" pos:end="165:23">errp</name></expr></argument>, <argument pos:start="165:26" pos:end="165:50"><expr pos:start="165:26" pos:end="165:50"><literal type="string" pos:start="165:26" pos:end="165:50">"Invalid L1 table offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="166:5" pos:end="166:48"><expr pos:start="166:5" pos:end="166:47"><name pos:start="166:5" pos:end="166:22"><name pos:start="166:5" pos:end="166:5">s</name><operator pos:start="166:6" pos:end="166:7">-&gt;</operator><name pos:start="166:8" pos:end="166:22">l1_table_offset</name></name> <operator pos:start="166:24" pos:end="166:24">=</operator> <name pos:start="166:26" pos:end="166:47"><name pos:start="166:26" pos:end="166:31">header</name><operator pos:start="166:32" pos:end="166:32">.</operator><name pos:start="166:33" pos:end="166:47">l1_table_offset</name></name></expr>;</expr_stmt>
    <if_stmt pos:start="167:5" pos:end="271:15"><if pos:start="167:5" pos:end="271:15">if <condition pos:start="167:8" pos:end="167:23">(<expr pos:start="167:9" pos:end="167:22"><name pos:start="167:9" pos:end="167:18"><name pos:start="167:9" pos:end="167:9">s</name><operator pos:start="167:10" pos:end="167:11">-&gt;</operator><name pos:start="167:12" pos:end="167:18">l1_size</name></name> <operator pos:start="167:20" pos:end="167:20">&gt;</operator> <literal type="number" pos:start="167:22" pos:end="167:22">0</literal></expr>)</condition> <block pos:start="167:25" pos:end="271:15">{<block_content pos:start="168:9" pos:end="271:15">
        <expr_stmt pos:start="168:9" pos:end="169:62"><expr pos:start="168:9" pos:end="169:61"><name pos:start="168:9" pos:end="168:19"><name pos:start="168:9" pos:end="168:9">s</name><operator pos:start="168:10" pos:end="168:11">-&gt;</operator><name pos:start="168:12" pos:end="168:19">l1_table</name></name> <operator pos:start="168:21" pos:end="168:21">=</operator> <call pos:start="168:23" pos:end="169:61"><name pos:start="168:23" pos:end="168:41">qemu_try_blockalign</name><argument_list pos:start="168:42" pos:end="169:61">(<argument pos:start="168:43" pos:end="168:54"><expr pos:start="168:43" pos:end="168:54"><name pos:start="168:43" pos:end="168:54"><name pos:start="168:43" pos:end="168:44">bs</name><operator pos:start="168:45" pos:end="168:46">-&gt;</operator><name pos:start="168:47" pos:end="168:50">file</name><operator pos:start="168:51" pos:end="168:52">-&gt;</operator><name pos:start="168:53" pos:end="168:54">bs</name></name></expr></argument>,
            <argument pos:start="169:13" pos:end="169:60"><expr pos:start="169:13" pos:end="169:60"><call pos:start="169:13" pos:end="169:60"><name pos:start="169:13" pos:end="169:24">align_offset</name><argument_list pos:start="169:25" pos:end="169:60">(<argument pos:start="169:26" pos:end="169:54"><expr pos:start="169:26" pos:end="169:54"><name pos:start="169:26" pos:end="169:35"><name pos:start="169:26" pos:end="169:26">s</name><operator pos:start="169:27" pos:end="169:28">-&gt;</operator><name pos:start="169:29" pos:end="169:35">l1_size</name></name> <operator pos:start="169:37" pos:end="169:37">*</operator> <sizeof pos:start="169:39" pos:end="169:54">sizeof<argument_list pos:start="169:45" pos:end="169:54">(<argument pos:start="169:46" pos:end="169:53"><expr pos:start="169:46" pos:end="169:53"><name pos:start="169:46" pos:end="169:53">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="169:57" pos:end="169:59"><expr pos:start="169:57" pos:end="169:59"><literal type="number" pos:start="169:57" pos:end="169:59">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="170:9" pos:end="271:15"><if pos:start="170:9" pos:end="271:15">if <condition pos:start="170:12" pos:end="170:32">(<expr pos:start="170:13" pos:end="170:31"><name pos:start="170:13" pos:end="170:23"><name pos:start="170:13" pos:end="170:13">s</name><operator pos:start="170:14" pos:end="170:15">-&gt;</operator><name pos:start="170:16" pos:end="170:23">l1_table</name></name> <operator pos:start="170:25" pos:end="170:26">==</operator> <name pos:start="170:28" pos:end="170:31">NULL</name></expr>)</condition> <block pos:start="170:34" pos:end="271:15">{<block_content pos:start="171:13" pos:end="271:15">
            <expr_stmt pos:start="171:13" pos:end="171:60"><expr pos:start="171:13" pos:end="171:59"><call pos:start="171:13" pos:end="171:59"><name pos:start="171:13" pos:end="171:22">error_setg</name><argument_list pos:start="171:23" pos:end="171:59">(<argument pos:start="171:24" pos:end="171:27"><expr pos:start="171:24" pos:end="171:27"><name pos:start="171:24" pos:end="171:27">errp</name></expr></argument>, <argument pos:start="171:30" pos:end="171:58"><expr pos:start="171:30" pos:end="171:58"><literal type="string" pos:start="171:30" pos:end="171:58">"Could not allocate L1 table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="172:13" pos:end="172:26"><expr pos:start="172:13" pos:end="172:25"><name pos:start="172:13" pos:end="172:15">ret</name> <operator pos:start="172:17" pos:end="172:17">=</operator> <operator pos:start="172:19" pos:end="172:19">-</operator><name pos:start="172:20" pos:end="172:25">ENOMEM</name></expr>;</expr_stmt>
        <expr_stmt pos:start="173:9" pos:end="174:56"><expr pos:start="173:9" pos:end="174:55"><name pos:start="173:9" pos:end="173:11">ret</name> <operator pos:start="173:13" pos:end="173:13">=</operator> <call pos:start="173:15" pos:end="174:55"><name pos:start="173:15" pos:end="173:24">bdrv_pread</name><argument_list pos:start="173:25" pos:end="174:55">(<argument pos:start="173:26" pos:end="173:33"><expr pos:start="173:26" pos:end="173:33"><name pos:start="173:26" pos:end="173:33"><name pos:start="173:26" pos:end="173:27">bs</name><operator pos:start="173:28" pos:end="173:29">-&gt;</operator><name pos:start="173:30" pos:end="173:33">file</name></name></expr></argument>, <argument pos:start="173:36" pos:end="173:53"><expr pos:start="173:36" pos:end="173:53"><name pos:start="173:36" pos:end="173:53"><name pos:start="173:36" pos:end="173:36">s</name><operator pos:start="173:37" pos:end="173:38">-&gt;</operator><name pos:start="173:39" pos:end="173:53">l1_table_offset</name></name></expr></argument>, <argument pos:start="173:56" pos:end="173:66"><expr pos:start="173:56" pos:end="173:66"><name pos:start="173:56" pos:end="173:66"><name pos:start="173:56" pos:end="173:56">s</name><operator pos:start="173:57" pos:end="173:58">-&gt;</operator><name pos:start="173:59" pos:end="173:66">l1_table</name></name></expr></argument>,
                         <argument pos:start="174:26" pos:end="174:54"><expr pos:start="174:26" pos:end="174:54"><name pos:start="174:26" pos:end="174:35"><name pos:start="174:26" pos:end="174:26">s</name><operator pos:start="174:27" pos:end="174:28">-&gt;</operator><name pos:start="174:29" pos:end="174:35">l1_size</name></name> <operator pos:start="174:37" pos:end="174:37">*</operator> <sizeof pos:start="174:39" pos:end="174:54">sizeof<argument_list pos:start="174:45" pos:end="174:54">(<argument pos:start="174:46" pos:end="174:53"><expr pos:start="174:46" pos:end="174:53"><name pos:start="174:46" pos:end="174:53">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="175:9" pos:end="271:15"><if pos:start="175:9" pos:end="271:15">if <condition pos:start="175:12" pos:end="175:20">(<expr pos:start="175:13" pos:end="175:19"><name pos:start="175:13" pos:end="175:15">ret</name> <operator pos:start="175:17" pos:end="175:17">&lt;</operator> <literal type="number" pos:start="175:19" pos:end="175:19">0</literal></expr>)</condition> <block pos:start="175:22" pos:end="271:15">{<block_content pos:start="176:13" pos:end="271:15">
            <expr_stmt pos:start="176:13" pos:end="176:68"><expr pos:start="176:13" pos:end="176:67"><call pos:start="176:13" pos:end="176:67"><name pos:start="176:13" pos:end="176:28">error_setg_errno</name><argument_list pos:start="176:29" pos:end="176:67">(<argument pos:start="176:30" pos:end="176:33"><expr pos:start="176:30" pos:end="176:33"><name pos:start="176:30" pos:end="176:33">errp</name></expr></argument>, <argument pos:start="176:36" pos:end="176:39"><expr pos:start="176:36" pos:end="176:39"><operator pos:start="176:36" pos:end="176:36">-</operator><name pos:start="176:37" pos:end="176:39">ret</name></expr></argument>, <argument pos:start="176:42" pos:end="176:66"><expr pos:start="176:42" pos:end="176:66"><literal type="string" pos:start="176:42" pos:end="176:66">"Could not read L1 table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for pos:start="177:9" pos:end="271:15">for<control pos:start="177:12" pos:end="177:38">(<init pos:start="177:13" pos:end="177:18"><expr pos:start="177:13" pos:end="177:17"><name pos:start="177:13" pos:end="177:13">i</name> <operator pos:start="177:15" pos:end="177:15">=</operator> <literal type="number" pos:start="177:17" pos:end="177:17">0</literal></expr>;</init><condition pos:start="177:19" pos:end="177:33"><expr pos:start="177:19" pos:end="177:32"><name pos:start="177:19" pos:end="177:19">i</name> <operator pos:start="177:21" pos:end="177:21">&lt;</operator> <name pos:start="177:23" pos:end="177:32"><name pos:start="177:23" pos:end="177:23">s</name><operator pos:start="177:24" pos:end="177:25">-&gt;</operator><name pos:start="177:26" pos:end="177:32">l1_size</name></name></expr>;</condition> <incr pos:start="177:35" pos:end="177:37"><expr pos:start="177:35" pos:end="177:37"><name pos:start="177:35" pos:end="177:35">i</name><operator pos:start="177:36" pos:end="177:37">++</operator></expr></incr>)</control> <block pos:start="177:40" pos:end="271:15">{<block_content pos:start="178:13" pos:end="271:15">
            <expr_stmt pos:start="178:13" pos:end="178:42"><expr pos:start="178:13" pos:end="178:41"><call pos:start="178:13" pos:end="178:41"><name pos:start="178:13" pos:end="178:24">be64_to_cpus</name><argument_list pos:start="178:25" pos:end="178:41">(<argument pos:start="178:26" pos:end="178:40"><expr pos:start="178:26" pos:end="178:40"><operator pos:start="178:26" pos:end="178:26">&amp;</operator><name pos:start="178:27" pos:end="178:40"><name pos:start="178:27" pos:end="178:27">s</name><operator pos:start="178:28" pos:end="178:29">-&gt;</operator><name pos:start="178:30" pos:end="178:37">l1_table</name><index pos:start="178:38" pos:end="178:40">[<expr pos:start="178:39" pos:end="178:39"><name pos:start="178:39" pos:end="178:39">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="179:5" pos:end="179:39">/* Parse driver-specific options */</comment>
    <expr_stmt pos:start="180:5" pos:end="180:57"><expr pos:start="180:5" pos:end="180:56"><name pos:start="180:5" pos:end="180:7">ret</name> <operator pos:start="180:9" pos:end="180:9">=</operator> <call pos:start="180:11" pos:end="180:56"><name pos:start="180:11" pos:end="180:30">qcow2_update_options</name><argument_list pos:start="180:31" pos:end="180:56">(<argument pos:start="180:32" pos:end="180:33"><expr pos:start="180:32" pos:end="180:33"><name pos:start="180:32" pos:end="180:33">bs</name></expr></argument>, <argument pos:start="180:36" pos:end="180:42"><expr pos:start="180:36" pos:end="180:42"><name pos:start="180:36" pos:end="180:42">options</name></expr></argument>, <argument pos:start="180:45" pos:end="180:49"><expr pos:start="180:45" pos:end="180:49"><name pos:start="180:45" pos:end="180:49">flags</name></expr></argument>, <argument pos:start="180:52" pos:end="180:55"><expr pos:start="180:52" pos:end="180:55"><name pos:start="180:52" pos:end="180:55">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="181:5" pos:end="271:15"><if pos:start="181:5" pos:end="271:15">if <condition pos:start="181:8" pos:end="181:16">(<expr pos:start="181:9" pos:end="181:15"><name pos:start="181:9" pos:end="181:11">ret</name> <operator pos:start="181:13" pos:end="181:13">&lt;</operator> <literal type="number" pos:start="181:15" pos:end="181:15">0</literal></expr>)</condition> <block pos:start="181:18" pos:end="271:15">{<block_content pos:start="182:5" pos:end="271:15">
    <expr_stmt pos:start="182:5" pos:end="182:33"><expr pos:start="182:5" pos:end="182:32"><name pos:start="182:5" pos:end="182:27"><name pos:start="182:5" pos:end="182:5">s</name><operator pos:start="182:6" pos:end="182:7">-&gt;</operator><name pos:start="182:8" pos:end="182:27">cluster_cache_offset</name></name> <operator pos:start="182:29" pos:end="182:29">=</operator> <operator pos:start="182:31" pos:end="182:31">-</operator><literal type="number" pos:start="182:32" pos:end="182:32">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="183:5" pos:end="183:21"><expr pos:start="183:5" pos:end="183:20"><name pos:start="183:5" pos:end="183:12"><name pos:start="183:5" pos:end="183:5">s</name><operator pos:start="183:6" pos:end="183:7">-&gt;</operator><name pos:start="183:8" pos:end="183:12">flags</name></name> <operator pos:start="183:14" pos:end="183:14">=</operator> <name pos:start="183:16" pos:end="183:20">flags</name></expr>;</expr_stmt>
    <expr_stmt pos:start="184:5" pos:end="184:34"><expr pos:start="184:5" pos:end="184:33"><name pos:start="184:5" pos:end="184:7">ret</name> <operator pos:start="184:9" pos:end="184:9">=</operator> <call pos:start="184:11" pos:end="184:33"><name pos:start="184:11" pos:end="184:29">qcow2_refcount_init</name><argument_list pos:start="184:30" pos:end="184:33">(<argument pos:start="184:31" pos:end="184:32"><expr pos:start="184:31" pos:end="184:32"><name pos:start="184:31" pos:end="184:32">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="185:5" pos:end="271:15"><if pos:start="185:5" pos:end="271:15">if <condition pos:start="185:8" pos:end="185:17">(<expr pos:start="185:9" pos:end="185:16"><name pos:start="185:9" pos:end="185:11">ret</name> <operator pos:start="185:13" pos:end="185:14">!=</operator> <literal type="number" pos:start="185:16" pos:end="185:16">0</literal></expr>)</condition> <block pos:start="185:19" pos:end="271:15">{<block_content pos:start="186:9" pos:end="271:15">
        <expr_stmt pos:start="186:9" pos:end="186:79"><expr pos:start="186:9" pos:end="186:78"><call pos:start="186:9" pos:end="186:78"><name pos:start="186:9" pos:end="186:24">error_setg_errno</name><argument_list pos:start="186:25" pos:end="186:78">(<argument pos:start="186:26" pos:end="186:29"><expr pos:start="186:26" pos:end="186:29"><name pos:start="186:26" pos:end="186:29">errp</name></expr></argument>, <argument pos:start="186:32" pos:end="186:35"><expr pos:start="186:32" pos:end="186:35"><operator pos:start="186:32" pos:end="186:32">-</operator><name pos:start="186:33" pos:end="186:35">ret</name></expr></argument>, <argument pos:start="186:38" pos:end="186:77"><expr pos:start="186:38" pos:end="186:77"><literal type="string" pos:start="186:38" pos:end="186:77">"Could not initialize refcount handling"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="187:5" pos:end="187:35"><expr pos:start="187:5" pos:end="187:34"><call pos:start="187:5" pos:end="187:34"><name pos:start="187:5" pos:end="187:14">QLIST_INIT</name><argument_list pos:start="187:15" pos:end="187:34">(<argument pos:start="187:16" pos:end="187:33"><expr pos:start="187:16" pos:end="187:33"><operator pos:start="187:16" pos:end="187:16">&amp;</operator><name pos:start="187:17" pos:end="187:33"><name pos:start="187:17" pos:end="187:17">s</name><operator pos:start="187:18" pos:end="187:19">-&gt;</operator><name pos:start="187:20" pos:end="187:33">cluster_allocs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="188:5" pos:end="188:30"><expr pos:start="188:5" pos:end="188:29"><call pos:start="188:5" pos:end="188:29"><name pos:start="188:5" pos:end="188:15">QTAILQ_INIT</name><argument_list pos:start="188:16" pos:end="188:29">(<argument pos:start="188:17" pos:end="188:28"><expr pos:start="188:17" pos:end="188:28"><operator pos:start="188:17" pos:end="188:17">&amp;</operator><name pos:start="188:18" pos:end="188:28"><name pos:start="188:18" pos:end="188:18">s</name><operator pos:start="188:19" pos:end="188:20">-&gt;</operator><name pos:start="188:21" pos:end="188:28">discards</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="189:5" pos:end="189:31">/* read qcow2 extensions */</comment>
    <if_stmt pos:start="190:5" pos:end="271:15"><if pos:start="190:5" pos:end="271:15">if <condition pos:start="190:8" pos:end="191:65">(<expr pos:start="190:9" pos:end="191:64"><call pos:start="190:9" pos:end="191:64"><name pos:start="190:9" pos:end="190:29">qcow2_read_extensions</name><argument_list pos:start="190:30" pos:end="191:64">(<argument pos:start="190:31" pos:end="190:32"><expr pos:start="190:31" pos:end="190:32"><name pos:start="190:31" pos:end="190:32">bs</name></expr></argument>, <argument pos:start="190:35" pos:end="190:54"><expr pos:start="190:35" pos:end="190:54"><name pos:start="190:35" pos:end="190:54"><name pos:start="190:35" pos:end="190:40">header</name><operator pos:start="190:41" pos:end="190:41">.</operator><name pos:start="190:42" pos:end="190:54">header_length</name></name></expr></argument>, <argument pos:start="190:57" pos:end="190:63"><expr pos:start="190:57" pos:end="190:63"><name pos:start="190:57" pos:end="190:63">ext_end</name></expr></argument>, <argument pos:start="190:66" pos:end="190:69"><expr pos:start="190:66" pos:end="190:69"><name pos:start="190:66" pos:end="190:69">NULL</name></expr></argument>,
                              <argument pos:start="191:31" pos:end="191:35"><expr pos:start="191:31" pos:end="191:35"><name pos:start="191:31" pos:end="191:35">flags</name></expr></argument>, <argument pos:start="191:38" pos:end="191:51"><expr pos:start="191:38" pos:end="191:51"><operator pos:start="191:38" pos:end="191:38">&amp;</operator><name pos:start="191:39" pos:end="191:51">update_header</name></expr></argument>, <argument pos:start="191:54" pos:end="191:63"><expr pos:start="191:54" pos:end="191:63"><operator pos:start="191:54" pos:end="191:54">&amp;</operator><name pos:start="191:55" pos:end="191:63">local_err</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="191:67" pos:end="271:15">{<block_content pos:start="192:9" pos:end="271:15">
        <expr_stmt pos:start="192:9" pos:end="192:41"><expr pos:start="192:9" pos:end="192:40"><call pos:start="192:9" pos:end="192:40"><name pos:start="192:9" pos:end="192:23">error_propagate</name><argument_list pos:start="192:24" pos:end="192:40">(<argument pos:start="192:25" pos:end="192:28"><expr pos:start="192:25" pos:end="192:28"><name pos:start="192:25" pos:end="192:28">errp</name></expr></argument>, <argument pos:start="192:31" pos:end="192:39"><expr pos:start="192:31" pos:end="192:39"><name pos:start="192:31" pos:end="192:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="193:5" pos:end="196:7">/* qcow2_read_extension may have set up the crypto context
     * if the crypt method needs a header region, some methods
     * don't need header extensions, so must check here
     */</comment>
    <if_stmt pos:start="197:5" pos:end="271:15"><if pos:start="197:5" pos:end="271:15">if <condition pos:start="197:8" pos:end="197:45">(<expr pos:start="197:9" pos:end="197:44"><name pos:start="197:9" pos:end="197:30"><name pos:start="197:9" pos:end="197:9">s</name><operator pos:start="197:10" pos:end="197:11">-&gt;</operator><name pos:start="197:12" pos:end="197:30">crypt_method_header</name></name> <operator pos:start="197:32" pos:end="197:33">&amp;&amp;</operator> <operator pos:start="197:35" pos:end="197:35">!</operator><name pos:start="197:36" pos:end="197:44"><name pos:start="197:36" pos:end="197:36">s</name><operator pos:start="197:37" pos:end="197:38">-&gt;</operator><name pos:start="197:39" pos:end="197:44">crypto</name></name></expr>)</condition> <block pos:start="197:47" pos:end="271:15">{<block_content pos:start="198:9" pos:end="271:15">
        <if_stmt pos:start="198:9" pos:end="271:15"><if pos:start="198:9" pos:end="271:15">if <condition pos:start="198:12" pos:end="198:53">(<expr pos:start="198:13" pos:end="198:52"><name pos:start="198:13" pos:end="198:34"><name pos:start="198:13" pos:end="198:13">s</name><operator pos:start="198:14" pos:end="198:15">-&gt;</operator><name pos:start="198:16" pos:end="198:34">crypt_method_header</name></name> <operator pos:start="198:36" pos:end="198:37">==</operator> <name pos:start="198:39" pos:end="198:52">QCOW_CRYPT_AES</name></expr>)</condition> <block pos:start="198:55" pos:end="271:15">{<block_content pos:start="199:13" pos:end="271:15">
            <decl_stmt pos:start="199:13" pos:end="199:36"><decl pos:start="199:13" pos:end="199:35"><type pos:start="199:13" pos:end="199:24"><name pos:start="199:13" pos:end="199:20">unsigned</name> <name pos:start="199:22" pos:end="199:24">int</name></type> <name pos:start="199:26" pos:end="199:31">cflags</name> <init pos:start="199:33" pos:end="199:35">= <expr pos:start="199:35" pos:end="199:35"><literal type="number" pos:start="199:35" pos:end="199:35">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="200:13" pos:end="271:15"><if pos:start="200:13" pos:end="271:15">if <condition pos:start="200:16" pos:end="200:37">(<expr pos:start="200:17" pos:end="200:36"><name pos:start="200:17" pos:end="200:21">flags</name> <operator pos:start="200:23" pos:end="200:23">&amp;</operator> <name pos:start="200:25" pos:end="200:36">BDRV_O_NO_IO</name></expr>)</condition> <block pos:start="200:39" pos:end="271:15">{<block_content pos:start="201:17" pos:end="271:15">
                <expr_stmt pos:start="201:17" pos:end="201:51"><expr pos:start="201:17" pos:end="201:50"><name pos:start="201:17" pos:end="201:22">cflags</name> <operator pos:start="201:24" pos:end="201:25">|=</operator> <name pos:start="201:27" pos:end="201:50">QCRYPTO_BLOCK_OPEN_NO_IO</name></expr>;</expr_stmt>
            <expr_stmt pos:start="202:13" pos:end="203:69"><expr pos:start="202:13" pos:end="203:68"><name pos:start="202:13" pos:end="202:21"><name pos:start="202:13" pos:end="202:13">s</name><operator pos:start="202:14" pos:end="202:15">-&gt;</operator><name pos:start="202:16" pos:end="202:21">crypto</name></name> <operator pos:start="202:23" pos:end="202:23">=</operator> <call pos:start="202:25" pos:end="203:68"><name pos:start="202:25" pos:end="202:42">qcrypto_block_open</name><argument_list pos:start="202:43" pos:end="203:68">(<argument pos:start="202:44" pos:end="202:57"><expr pos:start="202:44" pos:end="202:57"><name pos:start="202:44" pos:end="202:57"><name pos:start="202:44" pos:end="202:44">s</name><operator pos:start="202:45" pos:end="202:46">-&gt;</operator><name pos:start="202:47" pos:end="202:57">crypto_opts</name></name></expr></argument>, <argument pos:start="202:60" pos:end="202:69"><expr pos:start="202:60" pos:end="202:69"><literal type="string" pos:start="202:60" pos:end="202:69">"encrypt."</literal></expr></argument>,
                                           <argument pos:start="203:44" pos:end="203:47"><expr pos:start="203:44" pos:end="203:47"><name pos:start="203:44" pos:end="203:47">NULL</name></expr></argument>, <argument pos:start="203:50" pos:end="203:53"><expr pos:start="203:50" pos:end="203:53"><name pos:start="203:50" pos:end="203:53">NULL</name></expr></argument>, <argument pos:start="203:56" pos:end="203:61"><expr pos:start="203:56" pos:end="203:61"><name pos:start="203:56" pos:end="203:61">cflags</name></expr></argument>, <argument pos:start="203:64" pos:end="203:67"><expr pos:start="203:64" pos:end="203:67"><name pos:start="203:64" pos:end="203:67">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="204:13" pos:end="271:15"><if pos:start="204:13" pos:end="205:9">if <condition pos:start="204:16" pos:end="204:27">(<expr pos:start="204:17" pos:end="204:26"><operator pos:start="204:17" pos:end="204:17">!</operator><name pos:start="204:18" pos:end="204:26"><name pos:start="204:18" pos:end="204:18">s</name><operator pos:start="204:19" pos:end="204:20">-&gt;</operator><name pos:start="204:21" pos:end="204:26">crypto</name></name></expr>)</condition> <block pos:start="204:29" pos:end="205:9">{<block_content>
        </block_content>}</block></if> <if type="elseif" pos:start="205:11" pos:end="271:15">else if <condition pos:start="205:19" pos:end="205:43">(<expr pos:start="205:20" pos:end="205:42"><operator pos:start="205:20" pos:end="205:20">!</operator><operator pos:start="205:21" pos:end="205:21">(</operator><name pos:start="205:22" pos:end="205:26">flags</name> <operator pos:start="205:28" pos:end="205:28">&amp;</operator> <name pos:start="205:30" pos:end="205:41">BDRV_O_NO_IO</name><operator pos:start="205:42" pos:end="205:42">)</operator></expr>)</condition> <block pos:start="205:45" pos:end="271:15">{<block_content pos:start="206:13" pos:end="271:15">
            <expr_stmt pos:start="206:13" pos:end="207:47"><expr pos:start="206:13" pos:end="207:46"><call pos:start="206:13" pos:end="207:46"><name pos:start="206:13" pos:end="206:22">error_setg</name><argument_list pos:start="206:23" pos:end="207:46">(<argument pos:start="206:24" pos:end="206:27"><expr pos:start="206:24" pos:end="206:27"><name pos:start="206:24" pos:end="206:27">errp</name></expr></argument>, <argument pos:start="206:30" pos:end="206:72"><expr pos:start="206:30" pos:end="206:72"><literal type="string" pos:start="206:30" pos:end="206:72">"Missing CRYPTO header for crypt method %d"</literal></expr></argument>,
                       <argument pos:start="207:24" pos:end="207:45"><expr pos:start="207:24" pos:end="207:45"><name pos:start="207:24" pos:end="207:45"><name pos:start="207:24" pos:end="207:24">s</name><operator pos:start="207:25" pos:end="207:26">-&gt;</operator><name pos:start="207:27" pos:end="207:45">crypt_method_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="208:5" pos:end="208:36">/* read the backing file name */</comment>
    <if_stmt pos:start="209:5" pos:end="271:15"><if pos:start="209:5" pos:end="271:15">if <condition pos:start="209:8" pos:end="209:40">(<expr pos:start="209:9" pos:end="209:39"><name pos:start="209:9" pos:end="209:34"><name pos:start="209:9" pos:end="209:14">header</name><operator pos:start="209:15" pos:end="209:15">.</operator><name pos:start="209:16" pos:end="209:34">backing_file_offset</name></name> <operator pos:start="209:36" pos:end="209:37">!=</operator> <literal type="number" pos:start="209:39" pos:end="209:39">0</literal></expr>)</condition> <block pos:start="209:42" pos:end="271:15">{<block_content pos:start="210:9" pos:end="271:15">
        <expr_stmt pos:start="210:9" pos:end="210:39"><expr pos:start="210:9" pos:end="210:38"><name pos:start="210:9" pos:end="210:11">len</name> <operator pos:start="210:13" pos:end="210:13">=</operator> <name pos:start="210:15" pos:end="210:38"><name pos:start="210:15" pos:end="210:20">header</name><operator pos:start="210:21" pos:end="210:21">.</operator><name pos:start="210:22" pos:end="210:38">backing_file_size</name></name></expr>;</expr_stmt>
        <if_stmt pos:start="211:9" pos:end="271:15"><if pos:start="211:9" pos:end="271:15">if <condition pos:start="211:12" pos:end="212:44">(<expr pos:start="211:13" pos:end="212:43"><name pos:start="211:13" pos:end="211:15">len</name> <operator pos:start="211:17" pos:end="211:17">&gt;</operator> <call pos:start="211:19" pos:end="211:73"><name pos:start="211:19" pos:end="211:21">MIN</name><argument_list pos:start="211:22" pos:end="211:73">(<argument pos:start="211:23" pos:end="211:26"><expr pos:start="211:23" pos:end="211:26"><literal type="number" pos:start="211:23" pos:end="211:26">1023</literal></expr></argument>, <argument pos:start="211:29" pos:end="211:72"><expr pos:start="211:29" pos:end="211:72"><name pos:start="211:29" pos:end="211:43"><name pos:start="211:29" pos:end="211:29">s</name><operator pos:start="211:30" pos:end="211:31">-&gt;</operator><name pos:start="211:32" pos:end="211:43">cluster_size</name></name> <operator pos:start="211:45" pos:end="211:45">-</operator> <name pos:start="211:47" pos:end="211:72"><name pos:start="211:47" pos:end="211:52">header</name><operator pos:start="211:53" pos:end="211:53">.</operator><name pos:start="211:54" pos:end="211:72">backing_file_offset</name></name></expr></argument>)</argument_list></call> <operator pos:start="211:75" pos:end="211:76">||</operator>
            <name pos:start="212:13" pos:end="212:15">len</name> <operator pos:start="212:17" pos:end="212:18">&gt;=</operator> <sizeof pos:start="212:20" pos:end="212:43">sizeof<argument_list pos:start="212:26" pos:end="212:43">(<argument pos:start="212:27" pos:end="212:42"><expr pos:start="212:27" pos:end="212:42"><name pos:start="212:27" pos:end="212:42"><name pos:start="212:27" pos:end="212:28">bs</name><operator pos:start="212:29" pos:end="212:30">-&gt;</operator><name pos:start="212:31" pos:end="212:42">backing_file</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="212:46" pos:end="271:15">{<block_content pos:start="213:13" pos:end="271:15">
            <expr_stmt pos:start="213:13" pos:end="213:59"><expr pos:start="213:13" pos:end="213:58"><call pos:start="213:13" pos:end="213:58"><name pos:start="213:13" pos:end="213:22">error_setg</name><argument_list pos:start="213:23" pos:end="213:58">(<argument pos:start="213:24" pos:end="213:27"><expr pos:start="213:24" pos:end="213:27"><name pos:start="213:24" pos:end="213:27">errp</name></expr></argument>, <argument pos:start="213:30" pos:end="213:57"><expr pos:start="213:30" pos:end="213:57"><literal type="string" pos:start="213:30" pos:end="213:57">"Backing file name too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="214:9" pos:end="215:48"><expr pos:start="214:9" pos:end="215:47"><name pos:start="214:9" pos:end="214:11">ret</name> <operator pos:start="214:13" pos:end="214:13">=</operator> <call pos:start="214:15" pos:end="215:47"><name pos:start="214:15" pos:end="214:24">bdrv_pread</name><argument_list pos:start="214:25" pos:end="215:47">(<argument pos:start="214:26" pos:end="214:33"><expr pos:start="214:26" pos:end="214:33"><name pos:start="214:26" pos:end="214:33"><name pos:start="214:26" pos:end="214:27">bs</name><operator pos:start="214:28" pos:end="214:29">-&gt;</operator><name pos:start="214:30" pos:end="214:33">file</name></name></expr></argument>, <argument pos:start="214:36" pos:end="214:61"><expr pos:start="214:36" pos:end="214:61"><name pos:start="214:36" pos:end="214:61"><name pos:start="214:36" pos:end="214:41">header</name><operator pos:start="214:42" pos:end="214:42">.</operator><name pos:start="214:43" pos:end="214:61">backing_file_offset</name></name></expr></argument>,
                         <argument pos:start="215:26" pos:end="215:41"><expr pos:start="215:26" pos:end="215:41"><name pos:start="215:26" pos:end="215:41"><name pos:start="215:26" pos:end="215:27">bs</name><operator pos:start="215:28" pos:end="215:29">-&gt;</operator><name pos:start="215:30" pos:end="215:41">backing_file</name></name></expr></argument>, <argument pos:start="215:44" pos:end="215:46"><expr pos:start="215:44" pos:end="215:46"><name pos:start="215:44" pos:end="215:46">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="216:9" pos:end="271:15"><if pos:start="216:9" pos:end="271:15">if <condition pos:start="216:12" pos:end="216:20">(<expr pos:start="216:13" pos:end="216:19"><name pos:start="216:13" pos:end="216:15">ret</name> <operator pos:start="216:17" pos:end="216:17">&lt;</operator> <literal type="number" pos:start="216:19" pos:end="216:19">0</literal></expr>)</condition> <block pos:start="216:22" pos:end="271:15">{<block_content pos:start="217:13" pos:end="271:15">
            <expr_stmt pos:start="217:13" pos:end="217:77"><expr pos:start="217:13" pos:end="217:76"><call pos:start="217:13" pos:end="217:76"><name pos:start="217:13" pos:end="217:28">error_setg_errno</name><argument_list pos:start="217:29" pos:end="217:76">(<argument pos:start="217:30" pos:end="217:33"><expr pos:start="217:30" pos:end="217:33"><name pos:start="217:30" pos:end="217:33">errp</name></expr></argument>, <argument pos:start="217:36" pos:end="217:39"><expr pos:start="217:36" pos:end="217:39"><operator pos:start="217:36" pos:end="217:36">-</operator><name pos:start="217:37" pos:end="217:39">ret</name></expr></argument>, <argument pos:start="217:42" pos:end="217:75"><expr pos:start="217:42" pos:end="217:75"><literal type="string" pos:start="217:42" pos:end="217:75">"Could not read backing file name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="218:9" pos:end="218:37"><expr pos:start="218:9" pos:end="218:36"><name pos:start="218:9" pos:end="218:29"><name pos:start="218:9" pos:end="218:10">bs</name><operator pos:start="218:11" pos:end="218:12">-&gt;</operator><name pos:start="218:13" pos:end="218:24">backing_file</name><index pos:start="218:25" pos:end="218:29">[<expr pos:start="218:26" pos:end="218:28"><name pos:start="218:26" pos:end="218:28">len</name></expr>]</index></name> <operator pos:start="218:31" pos:end="218:31">=</operator> <literal type="char" pos:start="218:33" pos:end="218:36">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="219:9" pos:end="219:59"><expr pos:start="219:9" pos:end="219:58"><name pos:start="219:9" pos:end="219:29"><name pos:start="219:9" pos:end="219:9">s</name><operator pos:start="219:10" pos:end="219:11">-&gt;</operator><name pos:start="219:12" pos:end="219:29">image_backing_file</name></name> <operator pos:start="219:31" pos:end="219:31">=</operator> <call pos:start="219:33" pos:end="219:58"><name pos:start="219:33" pos:end="219:40">g_strdup</name><argument_list pos:start="219:41" pos:end="219:58">(<argument pos:start="219:42" pos:end="219:57"><expr pos:start="219:42" pos:end="219:57"><name pos:start="219:42" pos:end="219:57"><name pos:start="219:42" pos:end="219:43">bs</name><operator pos:start="219:44" pos:end="219:45">-&gt;</operator><name pos:start="219:46" pos:end="219:57">backing_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="220:5" pos:end="220:28">/* Internal snapshots */</comment>
    <expr_stmt pos:start="221:5" pos:end="221:50"><expr pos:start="221:5" pos:end="221:49"><name pos:start="221:5" pos:end="221:23"><name pos:start="221:5" pos:end="221:5">s</name><operator pos:start="221:6" pos:end="221:7">-&gt;</operator><name pos:start="221:8" pos:end="221:23">snapshots_offset</name></name> <operator pos:start="221:25" pos:end="221:25">=</operator> <name pos:start="221:27" pos:end="221:49"><name pos:start="221:27" pos:end="221:32">header</name><operator pos:start="221:33" pos:end="221:33">.</operator><name pos:start="221:34" pos:end="221:49">snapshots_offset</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="222:5" pos:end="222:42"><expr pos:start="222:5" pos:end="222:41"><name pos:start="222:5" pos:end="222:19"><name pos:start="222:5" pos:end="222:5">s</name><operator pos:start="222:6" pos:end="222:7">-&gt;</operator><name pos:start="222:8" pos:end="222:19">nb_snapshots</name></name> <operator pos:start="222:21" pos:end="222:21">=</operator> <name pos:start="222:23" pos:end="222:41"><name pos:start="222:23" pos:end="222:28">header</name><operator pos:start="222:29" pos:end="222:29">.</operator><name pos:start="222:30" pos:end="222:41">nb_snapshots</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="223:5" pos:end="223:35"><expr pos:start="223:5" pos:end="223:34"><name pos:start="223:5" pos:end="223:7">ret</name> <operator pos:start="223:9" pos:end="223:9">=</operator> <call pos:start="223:11" pos:end="223:34"><name pos:start="223:11" pos:end="223:30">qcow2_read_snapshots</name><argument_list pos:start="223:31" pos:end="223:34">(<argument pos:start="223:32" pos:end="223:33"><expr pos:start="223:32" pos:end="223:33"><name pos:start="223:32" pos:end="223:33">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="224:5" pos:end="271:15"><if pos:start="224:5" pos:end="271:15">if <condition pos:start="224:8" pos:end="224:16">(<expr pos:start="224:9" pos:end="224:15"><name pos:start="224:9" pos:end="224:11">ret</name> <operator pos:start="224:13" pos:end="224:13">&lt;</operator> <literal type="number" pos:start="224:15" pos:end="224:15">0</literal></expr>)</condition> <block pos:start="224:18" pos:end="271:15">{<block_content pos:start="225:9" pos:end="271:15">
        <expr_stmt pos:start="225:9" pos:end="225:65"><expr pos:start="225:9" pos:end="225:64"><call pos:start="225:9" pos:end="225:64"><name pos:start="225:9" pos:end="225:24">error_setg_errno</name><argument_list pos:start="225:25" pos:end="225:64">(<argument pos:start="225:26" pos:end="225:29"><expr pos:start="225:26" pos:end="225:29"><name pos:start="225:26" pos:end="225:29">errp</name></expr></argument>, <argument pos:start="225:32" pos:end="225:35"><expr pos:start="225:32" pos:end="225:35"><operator pos:start="225:32" pos:end="225:32">-</operator><name pos:start="225:33" pos:end="225:35">ret</name></expr></argument>, <argument pos:start="225:38" pos:end="225:63"><expr pos:start="225:38" pos:end="225:63"><literal type="string" pos:start="225:38" pos:end="225:63">"Could not read snapshots"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="226:5" pos:end="226:46">/* Clear unknown autoclear feature bits */</comment>
    <expr_stmt pos:start="227:5" pos:end="227:67"><expr pos:start="227:5" pos:end="227:66"><name pos:start="227:5" pos:end="227:17">update_header</name> <operator pos:start="227:19" pos:end="227:20">|=</operator> <name pos:start="227:22" pos:end="227:42"><name pos:start="227:22" pos:end="227:22">s</name><operator pos:start="227:23" pos:end="227:24">-&gt;</operator><name pos:start="227:25" pos:end="227:42">autoclear_features</name></name> <operator pos:start="227:44" pos:end="227:44">&amp;</operator> <operator pos:start="227:46" pos:end="227:46">~</operator><name pos:start="227:47" pos:end="227:66">QCOW2_AUTOCLEAR_MASK</name></expr>;</expr_stmt>
    <expr_stmt pos:start="228:5" pos:end="229:70"><expr pos:start="228:5" pos:end="229:69"><name pos:start="228:5" pos:end="228:17">update_header</name> <operator pos:start="228:19" pos:end="228:19">=</operator>
        <name pos:start="229:9" pos:end="229:21">update_header</name> <operator pos:start="229:23" pos:end="229:24">&amp;&amp;</operator> <operator pos:start="229:26" pos:end="229:26">!</operator><name pos:start="229:27" pos:end="229:39"><name pos:start="229:27" pos:end="229:28">bs</name><operator pos:start="229:29" pos:end="229:30">-&gt;</operator><name pos:start="229:31" pos:end="229:39">read_only</name></name> <operator pos:start="229:41" pos:end="229:42">&amp;&amp;</operator> <operator pos:start="229:44" pos:end="229:44">!</operator><operator pos:start="229:45" pos:end="229:45">(</operator><name pos:start="229:46" pos:end="229:50">flags</name> <operator pos:start="229:52" pos:end="229:52">&amp;</operator> <name pos:start="229:54" pos:end="229:68">BDRV_O_INACTIVE</name><operator pos:start="229:69" pos:end="229:69">)</operator></expr>;</expr_stmt>
    <if_stmt pos:start="230:5" pos:end="271:15"><if pos:start="230:5" pos:end="271:15">if <condition pos:start="230:8" pos:end="230:22">(<expr pos:start="230:9" pos:end="230:21"><name pos:start="230:9" pos:end="230:21">update_header</name></expr>)</condition> <block pos:start="230:24" pos:end="271:15">{<block_content pos:start="231:9" pos:end="271:15">
        <expr_stmt pos:start="231:9" pos:end="231:54"><expr pos:start="231:9" pos:end="231:53"><name pos:start="231:9" pos:end="231:29"><name pos:start="231:9" pos:end="231:9">s</name><operator pos:start="231:10" pos:end="231:11">-&gt;</operator><name pos:start="231:12" pos:end="231:29">autoclear_features</name></name> <operator pos:start="231:31" pos:end="231:32">&amp;=</operator> <name pos:start="231:34" pos:end="231:53">QCOW2_AUTOCLEAR_MASK</name></expr>;</expr_stmt>
    <if_stmt pos:start="232:5" pos:end="271:15"><if pos:start="232:5" pos:end="271:15">if <condition pos:start="232:8" pos:end="232:61">(<expr pos:start="232:9" pos:end="232:60"><call pos:start="232:9" pos:end="232:60"><name pos:start="232:9" pos:end="232:44">qcow2_load_autoloading_dirty_bitmaps</name><argument_list pos:start="232:45" pos:end="232:60">(<argument pos:start="232:46" pos:end="232:47"><expr pos:start="232:46" pos:end="232:47"><name pos:start="232:46" pos:end="232:47">bs</name></expr></argument>, <argument pos:start="232:50" pos:end="232:59"><expr pos:start="232:50" pos:end="232:59"><operator pos:start="232:50" pos:end="232:50">&amp;</operator><name pos:start="232:51" pos:end="232:59">local_err</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="232:63" pos:end="271:15">{<block_content pos:start="233:9" pos:end="271:15">
        <expr_stmt pos:start="233:9" pos:end="233:30"><expr pos:start="233:9" pos:end="233:29"><name pos:start="233:9" pos:end="233:21">update_header</name> <operator pos:start="233:23" pos:end="233:23">=</operator> <name pos:start="233:25" pos:end="233:29">false</name></expr>;</expr_stmt>
    <if_stmt pos:start="234:5" pos:end="271:15"><if pos:start="234:5" pos:end="271:15">if <condition pos:start="234:8" pos:end="234:26">(<expr pos:start="234:9" pos:end="234:25"><name pos:start="234:9" pos:end="234:17">local_err</name> <operator pos:start="234:19" pos:end="234:20">!=</operator> <name pos:start="234:22" pos:end="234:25">NULL</name></expr>)</condition> <block pos:start="234:28" pos:end="271:15">{<block_content pos:start="235:9" pos:end="271:15">
        <expr_stmt pos:start="235:9" pos:end="235:41"><expr pos:start="235:9" pos:end="235:40"><call pos:start="235:9" pos:end="235:40"><name pos:start="235:9" pos:end="235:23">error_propagate</name><argument_list pos:start="235:24" pos:end="235:40">(<argument pos:start="235:25" pos:end="235:28"><expr pos:start="235:25" pos:end="235:28"><name pos:start="235:25" pos:end="235:28">errp</name></expr></argument>, <argument pos:start="235:31" pos:end="235:39"><expr pos:start="235:31" pos:end="235:39"><name pos:start="235:31" pos:end="235:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="236:5" pos:end="271:15"><if pos:start="236:5" pos:end="271:15">if <condition pos:start="236:8" pos:end="236:22">(<expr pos:start="236:9" pos:end="236:21"><name pos:start="236:9" pos:end="236:21">update_header</name></expr>)</condition> <block pos:start="236:24" pos:end="271:15">{<block_content pos:start="237:9" pos:end="271:15">
        <expr_stmt pos:start="237:9" pos:end="237:38"><expr pos:start="237:9" pos:end="237:37"><name pos:start="237:9" pos:end="237:11">ret</name> <operator pos:start="237:13" pos:end="237:13">=</operator> <call pos:start="237:15" pos:end="237:37"><name pos:start="237:15" pos:end="237:33">qcow2_update_header</name><argument_list pos:start="237:34" pos:end="237:37">(<argument pos:start="237:35" pos:end="237:36"><expr pos:start="237:35" pos:end="237:36"><name pos:start="237:35" pos:end="237:36">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="238:9" pos:end="271:15"><if pos:start="238:9" pos:end="271:15">if <condition pos:start="238:12" pos:end="238:20">(<expr pos:start="238:13" pos:end="238:19"><name pos:start="238:13" pos:end="238:15">ret</name> <operator pos:start="238:17" pos:end="238:17">&lt;</operator> <literal type="number" pos:start="238:19" pos:end="238:19">0</literal></expr>)</condition> <block pos:start="238:22" pos:end="271:15">{<block_content pos:start="239:13" pos:end="271:15">
            <expr_stmt pos:start="239:13" pos:end="239:74"><expr pos:start="239:13" pos:end="239:73"><call pos:start="239:13" pos:end="239:73"><name pos:start="239:13" pos:end="239:28">error_setg_errno</name><argument_list pos:start="239:29" pos:end="239:73">(<argument pos:start="239:30" pos:end="239:33"><expr pos:start="239:30" pos:end="239:33"><name pos:start="239:30" pos:end="239:33">errp</name></expr></argument>, <argument pos:start="239:36" pos:end="239:39"><expr pos:start="239:36" pos:end="239:39"><operator pos:start="239:36" pos:end="239:36">-</operator><name pos:start="239:37" pos:end="239:39">ret</name></expr></argument>, <argument pos:start="239:42" pos:end="239:72"><expr pos:start="239:42" pos:end="239:72"><literal type="string" pos:start="239:42" pos:end="239:72">"Could not update qcow2 header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="240:5" pos:end="240:26">/* Initialise locks */</comment>
    <expr_stmt pos:start="241:5" pos:end="241:33"><expr pos:start="241:5" pos:end="241:32"><call pos:start="241:5" pos:end="241:32"><name pos:start="241:5" pos:end="241:22">qemu_co_mutex_init</name><argument_list pos:start="241:23" pos:end="241:32">(<argument pos:start="241:24" pos:end="241:31"><expr pos:start="241:24" pos:end="241:31"><operator pos:start="241:24" pos:end="241:24">&amp;</operator><name pos:start="241:25" pos:end="241:31"><name pos:start="241:25" pos:end="241:25">s</name><operator pos:start="241:26" pos:end="241:27">-&gt;</operator><name pos:start="241:28" pos:end="241:31">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="242:5" pos:end="242:50"><expr pos:start="242:5" pos:end="242:49"><name pos:start="242:5" pos:end="242:28"><name pos:start="242:5" pos:end="242:6">bs</name><operator pos:start="242:7" pos:end="242:8">-&gt;</operator><name pos:start="242:9" pos:end="242:28">supported_zero_flags</name></name> <operator pos:start="242:30" pos:end="242:30">=</operator> <name pos:start="242:32" pos:end="242:49">BDRV_REQ_MAY_UNMAP</name></expr>;</expr_stmt>
    <comment type="block" pos:start="243:5" pos:end="243:31">/* Repair image if dirty */</comment>
    <if_stmt pos:start="244:5" pos:end="271:15"><if pos:start="244:5" pos:end="271:15">if <condition pos:start="244:8" pos:end="245:58">(<expr pos:start="244:9" pos:end="245:57"><operator pos:start="244:9" pos:end="244:9">!</operator><operator pos:start="244:10" pos:end="244:10">(</operator><name pos:start="244:11" pos:end="244:15">flags</name> <operator pos:start="244:17" pos:end="244:17">&amp;</operator> <operator pos:start="244:19" pos:end="244:19">(</operator><name pos:start="244:20" pos:end="244:31">BDRV_O_CHECK</name> <operator pos:start="244:33" pos:end="244:33">|</operator> <name pos:start="244:35" pos:end="244:49">BDRV_O_INACTIVE</name><operator pos:start="244:50" pos:end="244:50">)</operator><operator pos:start="244:51" pos:end="244:51">)</operator> <operator pos:start="244:53" pos:end="244:54">&amp;&amp;</operator> <operator pos:start="244:56" pos:end="244:56">!</operator><name pos:start="244:57" pos:end="244:69"><name pos:start="244:57" pos:end="244:58">bs</name><operator pos:start="244:59" pos:end="244:60">-&gt;</operator><name pos:start="244:61" pos:end="244:69">read_only</name></name> <operator pos:start="244:71" pos:end="244:72">&amp;&amp;</operator>
        <operator pos:start="245:9" pos:end="245:9">(</operator><name pos:start="245:10" pos:end="245:33"><name pos:start="245:10" pos:end="245:10">s</name><operator pos:start="245:11" pos:end="245:12">-&gt;</operator><name pos:start="245:13" pos:end="245:33">incompatible_features</name></name> <operator pos:start="245:35" pos:end="245:35">&amp;</operator> <name pos:start="245:37" pos:end="245:56">QCOW2_INCOMPAT_DIRTY</name><operator pos:start="245:57" pos:end="245:57">)</operator></expr>)</condition> <block pos:start="245:60" pos:end="271:15">{<block_content pos:start="246:9" pos:end="271:15">
        <decl_stmt pos:start="246:9" pos:end="246:37"><decl pos:start="246:9" pos:end="246:36"><type pos:start="246:9" pos:end="246:23"><name pos:start="246:9" pos:end="246:23">BdrvCheckResult</name></type> <name pos:start="246:25" pos:end="246:30">result</name> <init pos:start="246:32" pos:end="246:36">= <expr pos:start="246:34" pos:end="246:36"><block pos:start="246:34" pos:end="246:36">{<expr pos:start="246:35" pos:end="246:35"><literal type="number" pos:start="246:35" pos:end="246:35">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="247:9" pos:end="247:73"><expr pos:start="247:9" pos:end="247:72"><name pos:start="247:9" pos:end="247:11">ret</name> <operator pos:start="247:13" pos:end="247:13">=</operator> <call pos:start="247:15" pos:end="247:72"><name pos:start="247:15" pos:end="247:25">qcow2_check</name><argument_list pos:start="247:26" pos:end="247:72">(<argument pos:start="247:27" pos:end="247:28"><expr pos:start="247:27" pos:end="247:28"><name pos:start="247:27" pos:end="247:28">bs</name></expr></argument>, <argument pos:start="247:31" pos:end="247:37"><expr pos:start="247:31" pos:end="247:37"><operator pos:start="247:31" pos:end="247:31">&amp;</operator><name pos:start="247:32" pos:end="247:37">result</name></expr></argument>, <argument pos:start="247:40" pos:end="247:71"><expr pos:start="247:40" pos:end="247:71"><name pos:start="247:40" pos:end="247:54">BDRV_FIX_ERRORS</name> <operator pos:start="247:56" pos:end="247:56">|</operator> <name pos:start="247:58" pos:end="247:71">BDRV_FIX_LEAKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="248:9" pos:end="271:15"><if pos:start="248:9" pos:end="271:15">if <condition pos:start="248:12" pos:end="248:20">(<expr pos:start="248:13" pos:end="248:19"><name pos:start="248:13" pos:end="248:15">ret</name> <operator pos:start="248:17" pos:end="248:17">&lt;</operator> <literal type="number" pos:start="248:19" pos:end="248:19">0</literal></expr>)</condition> <block pos:start="248:22" pos:end="271:15">{<block_content pos:start="249:13" pos:end="271:15">
            <expr_stmt pos:start="249:13" pos:end="251:0"><expr pos:start="249:13" pos:end="249:72"><call pos:start="249:13" pos:end="249:72"><name pos:start="249:13" pos:end="249:28">error_setg_errno</name><argument_list pos:start="249:29" pos:end="249:72">(<argument pos:start="249:30" pos:end="249:33"><expr pos:start="249:30" pos:end="249:33"><name pos:start="249:30" pos:end="249:33">errp</name></expr></argument>, <argument pos:start="249:36" pos:end="249:39"><expr pos:start="249:36" pos:end="249:39"><operator pos:start="249:36" pos:end="249:36">-</operator><name pos:start="249:37" pos:end="249:39">ret</name></expr></argument>, <argument pos:start="249:42" pos:end="249:71"><expr pos:start="249:42" pos:end="249:71"><literal type="string" pos:start="249:42" pos:end="249:71">"Could not repair dirty image"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="250:1" pos:end="250:18">#<cpp:directive pos:start="250:2" pos:end="250:6">ifdef</cpp:directive> <name pos:start="250:8" pos:end="250:18">DEBUG_ALLOC</name></cpp:ifdef>
    <block pos:start="251:5" pos:end="271:15">{<block_content pos:start="252:9" pos:end="271:15">
        <decl_stmt pos:start="252:9" pos:end="252:37"><decl pos:start="252:9" pos:end="252:36"><type pos:start="252:9" pos:end="252:23"><name pos:start="252:9" pos:end="252:23">BdrvCheckResult</name></type> <name pos:start="252:25" pos:end="252:30">result</name> <init pos:start="252:32" pos:end="252:36">= <expr pos:start="252:34" pos:end="252:36"><block pos:start="252:34" pos:end="252:36">{<expr pos:start="252:35" pos:end="252:35"><literal type="number" pos:start="252:35" pos:end="252:35">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="253:9" pos:end="255:0"><expr pos:start="253:9" pos:end="253:45"><call pos:start="253:9" pos:end="253:45"><name pos:start="253:9" pos:end="253:29">qcow2_check_refcounts</name><argument_list pos:start="253:30" pos:end="253:45">(<argument pos:start="253:31" pos:end="253:32"><expr pos:start="253:31" pos:end="253:32"><name pos:start="253:31" pos:end="253:32">bs</name></expr></argument>, <argument pos:start="253:35" pos:end="253:41"><expr pos:start="253:35" pos:end="253:41"><operator pos:start="253:35" pos:end="253:35">&amp;</operator><name pos:start="253:36" pos:end="253:41">result</name></expr></argument>, <argument pos:start="253:44" pos:end="253:44"><expr pos:start="253:44" pos:end="253:44"><literal type="number" pos:start="253:44" pos:end="253:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="254:1" pos:end="254:6">#<cpp:directive pos:start="254:2" pos:end="254:6">endif</cpp:directive></cpp:endif>
    <return pos:start="255:5" pos:end="255:15">return <expr pos:start="255:12" pos:end="255:14"><name pos:start="255:12" pos:end="255:14">ret</name></expr>;</return>
 <label pos:start="256:2" pos:end="256:6"><name pos:start="256:2" pos:end="256:5">fail</name>:</label>
    <expr_stmt pos:start="257:5" pos:end="257:37"><expr pos:start="257:5" pos:end="257:36"><call pos:start="257:5" pos:end="257:36"><name pos:start="257:5" pos:end="257:10">g_free</name><argument_list pos:start="257:11" pos:end="257:36">(<argument pos:start="257:12" pos:end="257:35"><expr pos:start="257:12" pos:end="257:35"><name pos:start="257:12" pos:end="257:35"><name pos:start="257:12" pos:end="257:12">s</name><operator pos:start="257:13" pos:end="257:14">-&gt;</operator><name pos:start="257:15" pos:end="257:35">unknown_header_fields</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="258:5" pos:end="258:35"><expr pos:start="258:5" pos:end="258:34"><call pos:start="258:5" pos:end="258:34"><name pos:start="258:5" pos:end="258:30">cleanup_unknown_header_ext</name><argument_list pos:start="258:31" pos:end="258:34">(<argument pos:start="258:32" pos:end="258:33"><expr pos:start="258:32" pos:end="258:33"><name pos:start="258:32" pos:end="258:33">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="259:5" pos:end="259:29"><expr pos:start="259:5" pos:end="259:28"><call pos:start="259:5" pos:end="259:28"><name pos:start="259:5" pos:end="259:24">qcow2_free_snapshots</name><argument_list pos:start="259:25" pos:end="259:28">(<argument pos:start="259:26" pos:end="259:27"><expr pos:start="259:26" pos:end="259:27"><name pos:start="259:26" pos:end="259:27">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="260:5" pos:end="260:29"><expr pos:start="260:5" pos:end="260:28"><call pos:start="260:5" pos:end="260:28"><name pos:start="260:5" pos:end="260:24">qcow2_refcount_close</name><argument_list pos:start="260:25" pos:end="260:28">(<argument pos:start="260:26" pos:end="260:27"><expr pos:start="260:26" pos:end="260:27"><name pos:start="260:26" pos:end="260:27">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="261:5" pos:end="261:28"><expr pos:start="261:5" pos:end="261:27"><call pos:start="261:5" pos:end="261:27"><name pos:start="261:5" pos:end="261:14">qemu_vfree</name><argument_list pos:start="261:15" pos:end="261:27">(<argument pos:start="261:16" pos:end="261:26"><expr pos:start="261:16" pos:end="261:26"><name pos:start="261:16" pos:end="261:26"><name pos:start="261:16" pos:end="261:16">s</name><operator pos:start="261:17" pos:end="261:18">-&gt;</operator><name pos:start="261:19" pos:end="261:26">l1_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="262:5" pos:end="262:66">/* else pre-write overlap checks in cache_destroy may crash */</comment>
    <expr_stmt pos:start="263:5" pos:end="263:23"><expr pos:start="263:5" pos:end="263:22"><name pos:start="263:5" pos:end="263:15"><name pos:start="263:5" pos:end="263:5">s</name><operator pos:start="263:6" pos:end="263:7">-&gt;</operator><name pos:start="263:8" pos:end="263:15">l1_table</name></name> <operator pos:start="263:17" pos:end="263:17">=</operator> <name pos:start="263:19" pos:end="263:22">NULL</name></expr>;</expr_stmt>
    <expr_stmt pos:start="264:5" pos:end="264:30"><expr pos:start="264:5" pos:end="264:29"><call pos:start="264:5" pos:end="264:29"><name pos:start="264:5" pos:end="264:25">cache_clean_timer_del</name><argument_list pos:start="264:26" pos:end="264:29">(<argument pos:start="264:27" pos:end="264:28"><expr pos:start="264:27" pos:end="264:28"><name pos:start="264:27" pos:end="264:28">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="265:5" pos:end="271:15"><if pos:start="265:5" pos:end="271:15">if <condition pos:start="265:8" pos:end="265:26">(<expr pos:start="265:9" pos:end="265:25"><name pos:start="265:9" pos:end="265:25"><name pos:start="265:9" pos:end="265:9">s</name><operator pos:start="265:10" pos:end="265:11">-&gt;</operator><name pos:start="265:12" pos:end="265:25">l2_table_cache</name></name></expr>)</condition> <block pos:start="265:28" pos:end="271:15">{<block_content pos:start="266:9" pos:end="271:15">
        <expr_stmt pos:start="266:9" pos:end="266:51"><expr pos:start="266:9" pos:end="266:50"><call pos:start="266:9" pos:end="266:50"><name pos:start="266:9" pos:end="266:27">qcow2_cache_destroy</name><argument_list pos:start="266:28" pos:end="266:50">(<argument pos:start="266:29" pos:end="266:30"><expr pos:start="266:29" pos:end="266:30"><name pos:start="266:29" pos:end="266:30">bs</name></expr></argument>, <argument pos:start="266:33" pos:end="266:49"><expr pos:start="266:33" pos:end="266:49"><name pos:start="266:33" pos:end="266:49"><name pos:start="266:33" pos:end="266:33">s</name><operator pos:start="266:34" pos:end="266:35">-&gt;</operator><name pos:start="266:36" pos:end="266:49">l2_table_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="267:5" pos:end="271:15"><if pos:start="267:5" pos:end="271:15">if <condition pos:start="267:8" pos:end="267:32">(<expr pos:start="267:9" pos:end="267:31"><name pos:start="267:9" pos:end="267:31"><name pos:start="267:9" pos:end="267:9">s</name><operator pos:start="267:10" pos:end="267:11">-&gt;</operator><name pos:start="267:12" pos:end="267:31">refcount_block_cache</name></name></expr>)</condition> <block pos:start="267:34" pos:end="271:15">{<block_content pos:start="268:9" pos:end="271:15">
        <expr_stmt pos:start="268:9" pos:end="268:57"><expr pos:start="268:9" pos:end="268:56"><call pos:start="268:9" pos:end="268:56"><name pos:start="268:9" pos:end="268:27">qcow2_cache_destroy</name><argument_list pos:start="268:28" pos:end="268:56">(<argument pos:start="268:29" pos:end="268:30"><expr pos:start="268:29" pos:end="268:30"><name pos:start="268:29" pos:end="268:30">bs</name></expr></argument>, <argument pos:start="268:33" pos:end="268:55"><expr pos:start="268:33" pos:end="268:55"><name pos:start="268:33" pos:end="268:55"><name pos:start="268:33" pos:end="268:33">s</name><operator pos:start="268:34" pos:end="268:35">-&gt;</operator><name pos:start="268:36" pos:end="268:55">refcount_block_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="269:5" pos:end="269:34"><expr pos:start="269:5" pos:end="269:33"><call pos:start="269:5" pos:end="269:33"><name pos:start="269:5" pos:end="269:22">qcrypto_block_free</name><argument_list pos:start="269:23" pos:end="269:33">(<argument pos:start="269:24" pos:end="269:32"><expr pos:start="269:24" pos:end="269:32"><name pos:start="269:24" pos:end="269:32"><name pos:start="269:24" pos:end="269:24">s</name><operator pos:start="269:25" pos:end="269:26">-&gt;</operator><name pos:start="269:27" pos:end="269:32">crypto</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="270:5" pos:end="270:54"><expr pos:start="270:5" pos:end="270:53"><call pos:start="270:5" pos:end="270:53"><name pos:start="270:5" pos:end="270:37">qapi_free_QCryptoBlockOpenOptions</name><argument_list pos:start="270:38" pos:end="270:53">(<argument pos:start="270:39" pos:end="270:52"><expr pos:start="270:39" pos:end="270:52"><name pos:start="270:39" pos:end="270:52"><name pos:start="270:39" pos:end="270:39">s</name><operator pos:start="270:40" pos:end="270:41">-&gt;</operator><name pos:start="270:42" pos:end="270:52">crypto_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="271:5" pos:end="271:15">return <expr pos:start="271:12" pos:end="271:14"><name pos:start="271:12" pos:end="271:14">ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
