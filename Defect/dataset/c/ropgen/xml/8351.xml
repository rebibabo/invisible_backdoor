<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8351.c" pos:tabs="8"><function pos:start="1:1" pos:end="157:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">get_codec_data</name><parameter_list pos:start="1:26" pos:end="3:50">(<parameter pos:start="1:27" pos:end="1:41"><decl pos:start="1:27" pos:end="1:41"><type pos:start="1:27" pos:end="1:41"><name pos:start="1:27" pos:end="1:37">AVIOContext</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:41">pb</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:56"><decl pos:start="1:44" pos:end="1:56"><type pos:start="1:44" pos:end="1:56"><name pos:start="1:44" pos:end="1:51">AVStream</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:56">vst</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:39"><decl pos:start="3:27" pos:end="3:39"><type pos:start="3:27" pos:end="3:39"><name pos:start="3:27" pos:end="3:34">AVStream</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:39">ast</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:49"><decl pos:start="3:42" pos:end="3:49"><type pos:start="3:42" pos:end="3:49"><name pos:start="3:42" pos:end="3:44">int</name></type> <name pos:start="3:46" pos:end="3:49">myth</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="157:1">{<block_content pos:start="7:5" pos:end="155:13">

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:17">nuv_frametype</name></type> <name pos:start="7:19" pos:end="7:27">frametype</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="13:17"><if pos:start="11:5" pos:end="13:17">if <condition pos:start="11:8" pos:end="11:22">(<expr pos:start="11:9" pos:end="11:21"><operator pos:start="11:9" pos:end="11:9">!</operator><name pos:start="11:10" pos:end="11:12">vst</name> <operator pos:start="11:14" pos:end="11:15">&amp;&amp;</operator> <operator pos:start="11:17" pos:end="11:17">!</operator><name pos:start="11:18" pos:end="11:21">myth</name></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="13:17"><block_content pos:start="13:9" pos:end="13:17">

        <return pos:start="13:9" pos:end="13:17">return <expr pos:start="13:16" pos:end="13:16"><literal type="number" pos:start="13:16" pos:end="13:16">1</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="line" pos:start="13:19" pos:end="13:41">// no codec data needed</comment>

    <while pos:start="15:5" pos:end="151:5">while <condition pos:start="15:11" pos:end="15:28">(<expr pos:start="15:12" pos:end="15:27"><operator pos:start="15:12" pos:end="15:12">!</operator><name pos:start="15:13" pos:end="15:27"><name pos:start="15:13" pos:end="15:14">pb</name><operator pos:start="15:15" pos:end="15:16">-&gt;</operator><name pos:start="15:17" pos:end="15:27">eof_reached</name></name></expr>)</condition> <block pos:start="15:30" pos:end="151:5">{<block_content pos:start="17:9" pos:end="149:28">

        <decl_stmt pos:start="17:9" pos:end="17:26"><decl pos:start="17:9" pos:end="17:16"><type pos:start="17:9" pos:end="17:11"><name pos:start="17:9" pos:end="17:11">int</name></type> <name pos:start="17:13" pos:end="17:16">size</name></decl>, <decl pos:start="17:19" pos:end="17:25"><type ref="prev" pos:start="17:9" pos:end="17:11"/><name pos:start="17:19" pos:end="17:25">subtype</name></decl>;</decl_stmt>



        <expr_stmt pos:start="21:9" pos:end="21:32"><expr pos:start="21:9" pos:end="21:31"><name pos:start="21:9" pos:end="21:17">frametype</name> <operator pos:start="21:19" pos:end="21:19">=</operator> <call pos:start="21:21" pos:end="21:31"><name pos:start="21:21" pos:end="21:27">avio_r8</name><argument_list pos:start="21:28" pos:end="21:31">(<argument pos:start="21:29" pos:end="21:30"><expr pos:start="21:29" pos:end="21:30"><name pos:start="21:29" pos:end="21:30">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="23:9" pos:end="147:9">switch <condition pos:start="23:16" pos:end="23:26">(<expr pos:start="23:17" pos:end="23:25"><name pos:start="23:17" pos:end="23:25">frametype</name></expr>)</condition> <block pos:start="23:28" pos:end="147:9">{<block_content pos:start="25:9" pos:end="145:18">

        <case pos:start="25:9" pos:end="25:27">case <expr pos:start="25:14" pos:end="25:26"><name pos:start="25:14" pos:end="25:26">NUV_EXTRADATA</name></expr>:</case>

            <expr_stmt pos:start="27:13" pos:end="27:34"><expr pos:start="27:13" pos:end="27:33"><name pos:start="27:13" pos:end="27:19">subtype</name> <operator pos:start="27:21" pos:end="27:21">=</operator> <call pos:start="27:23" pos:end="27:33"><name pos:start="27:23" pos:end="27:29">avio_r8</name><argument_list pos:start="27:30" pos:end="27:33">(<argument pos:start="27:31" pos:end="27:32"><expr pos:start="27:31" pos:end="27:32"><name pos:start="27:31" pos:end="27:32">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="29:13" pos:end="29:29"><expr pos:start="29:13" pos:end="29:28"><call pos:start="29:13" pos:end="29:28"><name pos:start="29:13" pos:end="29:21">avio_skip</name><argument_list pos:start="29:22" pos:end="29:28">(<argument pos:start="29:23" pos:end="29:24"><expr pos:start="29:23" pos:end="29:24"><name pos:start="29:23" pos:end="29:24">pb</name></expr></argument>, <argument pos:start="29:27" pos:end="29:27"><expr pos:start="29:27" pos:end="29:27"><literal type="number" pos:start="29:27" pos:end="29:27">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="31:13" pos:end="31:42"><expr pos:start="31:13" pos:end="31:41"><name pos:start="31:13" pos:end="31:16">size</name> <operator pos:start="31:18" pos:end="31:18">=</operator> <call pos:start="31:20" pos:end="31:41"><name pos:start="31:20" pos:end="31:26">PKTSIZE</name><argument_list pos:start="31:27" pos:end="31:41">(<argument pos:start="31:28" pos:end="31:40"><expr pos:start="31:28" pos:end="31:40"><call pos:start="31:28" pos:end="31:40"><name pos:start="31:28" pos:end="31:36">avio_rl32</name><argument_list pos:start="31:37" pos:end="31:40">(<argument pos:start="31:38" pos:end="31:39"><expr pos:start="31:38" pos:end="31:39"><name pos:start="31:38" pos:end="31:39">pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="33:13" pos:end="47:13"><if pos:start="33:13" pos:end="47:13">if <condition pos:start="33:16" pos:end="33:38">(<expr pos:start="33:17" pos:end="33:37"><name pos:start="33:17" pos:end="33:19">vst</name> <operator pos:start="33:21" pos:end="33:22">&amp;&amp;</operator> <name pos:start="33:24" pos:end="33:30">subtype</name> <operator pos:start="33:32" pos:end="33:33">==</operator> <literal type="char" pos:start="33:35" pos:end="33:37">'R'</literal></expr>)</condition> <block pos:start="33:40" pos:end="47:13">{<block_content pos:start="35:17" pos:end="45:29">

                <expr_stmt pos:start="35:17" pos:end="35:50"><expr pos:start="35:17" pos:end="35:49"><name pos:start="35:17" pos:end="35:42"><name pos:start="35:17" pos:end="35:19">vst</name><operator pos:start="35:20" pos:end="35:21">-&gt;</operator><name pos:start="35:22" pos:end="35:26">codec</name><operator pos:start="35:27" pos:end="35:28">-&gt;</operator><name pos:start="35:29" pos:end="35:42">extradata_size</name></name> <operator pos:start="35:44" pos:end="35:44">=</operator> <name pos:start="35:46" pos:end="35:49">size</name></expr>;</expr_stmt>

                <expr_stmt pos:start="37:17" pos:end="37:61"><expr pos:start="37:17" pos:end="37:60"><name pos:start="37:17" pos:end="37:37"><name pos:start="37:17" pos:end="37:19">vst</name><operator pos:start="37:20" pos:end="37:21">-&gt;</operator><name pos:start="37:22" pos:end="37:26">codec</name><operator pos:start="37:27" pos:end="37:28">-&gt;</operator><name pos:start="37:29" pos:end="37:37">extradata</name></name>      <operator pos:start="37:44" pos:end="37:44">=</operator> <call pos:start="37:46" pos:end="37:60"><name pos:start="37:46" pos:end="37:54">av_malloc</name><argument_list pos:start="37:55" pos:end="37:60">(<argument pos:start="37:56" pos:end="37:59"><expr pos:start="37:56" pos:end="37:59"><name pos:start="37:56" pos:end="37:59">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="39:17" pos:end="39:59"><expr pos:start="39:17" pos:end="39:58"><call pos:start="39:17" pos:end="39:58"><name pos:start="39:17" pos:end="39:25">avio_read</name><argument_list pos:start="39:26" pos:end="39:58">(<argument pos:start="39:27" pos:end="39:28"><expr pos:start="39:27" pos:end="39:28"><name pos:start="39:27" pos:end="39:28">pb</name></expr></argument>, <argument pos:start="39:31" pos:end="39:51"><expr pos:start="39:31" pos:end="39:51"><name pos:start="39:31" pos:end="39:51"><name pos:start="39:31" pos:end="39:33">vst</name><operator pos:start="39:34" pos:end="39:35">-&gt;</operator><name pos:start="39:36" pos:end="39:40">codec</name><operator pos:start="39:41" pos:end="39:42">-&gt;</operator><name pos:start="39:43" pos:end="39:51">extradata</name></name></expr></argument>, <argument pos:start="39:54" pos:end="39:57"><expr pos:start="39:54" pos:end="39:57"><name pos:start="39:54" pos:end="39:57">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="41:17" pos:end="41:25"><expr pos:start="41:17" pos:end="41:24"><name pos:start="41:17" pos:end="41:20">size</name> <operator pos:start="41:22" pos:end="41:22">=</operator> <literal type="number" pos:start="41:24" pos:end="41:24">0</literal></expr>;</expr_stmt>

                <if_stmt pos:start="43:17" pos:end="45:29"><if pos:start="43:17" pos:end="45:29">if <condition pos:start="43:20" pos:end="43:26">(<expr pos:start="43:21" pos:end="43:25"><operator pos:start="43:21" pos:end="43:21">!</operator><name pos:start="43:22" pos:end="43:25">myth</name></expr>)</condition><block type="pseudo" pos:start="45:21" pos:end="45:29"><block_content pos:start="45:21" pos:end="45:29">

                    <return pos:start="45:21" pos:end="45:29">return <expr pos:start="45:28" pos:end="45:28"><literal type="number" pos:start="45:28" pos:end="45:28">1</literal></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="49:13" pos:end="49:18">break;</break>

        <case pos:start="51:9" pos:end="51:25">case <expr pos:start="51:14" pos:end="51:24"><name pos:start="51:14" pos:end="51:24">NUV_MYTHEXT</name></expr>:</case>

            <expr_stmt pos:start="53:13" pos:end="53:29"><expr pos:start="53:13" pos:end="53:28"><call pos:start="53:13" pos:end="53:28"><name pos:start="53:13" pos:end="53:21">avio_skip</name><argument_list pos:start="53:22" pos:end="53:28">(<argument pos:start="53:23" pos:end="53:24"><expr pos:start="53:23" pos:end="53:24"><name pos:start="53:23" pos:end="53:24">pb</name></expr></argument>, <argument pos:start="53:27" pos:end="53:27"><expr pos:start="53:27" pos:end="53:27"><literal type="number" pos:start="53:27" pos:end="53:27">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:42"><expr pos:start="55:13" pos:end="55:41"><name pos:start="55:13" pos:end="55:16">size</name> <operator pos:start="55:18" pos:end="55:18">=</operator> <call pos:start="55:20" pos:end="55:41"><name pos:start="55:20" pos:end="55:26">PKTSIZE</name><argument_list pos:start="55:27" pos:end="55:41">(<argument pos:start="55:28" pos:end="55:40"><expr pos:start="55:28" pos:end="55:40"><call pos:start="55:28" pos:end="55:40"><name pos:start="55:28" pos:end="55:36">avio_rl32</name><argument_list pos:start="55:37" pos:end="55:40">(<argument pos:start="55:38" pos:end="55:39"><expr pos:start="55:38" pos:end="55:39"><name pos:start="55:38" pos:end="55:39">pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="57:13" pos:end="59:22"><if pos:start="57:13" pos:end="59:22">if <condition pos:start="57:16" pos:end="57:32">(<expr pos:start="57:17" pos:end="57:31"><name pos:start="57:17" pos:end="57:20">size</name> <operator pos:start="57:22" pos:end="57:23">!=</operator> <literal type="number" pos:start="57:25" pos:end="57:27">128</literal> <operator pos:start="57:29" pos:end="57:29">*</operator> <literal type="number" pos:start="57:31" pos:end="57:31">4</literal></expr>)</condition><block type="pseudo" pos:start="59:17" pos:end="59:22"><block_content pos:start="59:17" pos:end="59:22">

                <break pos:start="59:17" pos:end="59:22">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:26"><expr pos:start="61:13" pos:end="61:25"><call pos:start="61:13" pos:end="61:25"><name pos:start="61:13" pos:end="61:21">avio_rl32</name><argument_list pos:start="61:22" pos:end="61:25">(<argument pos:start="61:23" pos:end="61:24"><expr pos:start="61:23" pos:end="61:24"><name pos:start="61:23" pos:end="61:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="61:28" pos:end="61:37">// version</comment>

            <if_stmt pos:start="63:13" pos:end="77:33"><if pos:start="63:13" pos:end="75:13">if <condition pos:start="63:16" pos:end="63:20">(<expr pos:start="63:17" pos:end="63:19"><name pos:start="63:17" pos:end="63:19">vst</name></expr>)</condition> <block pos:start="63:22" pos:end="75:13">{<block_content pos:start="65:17" pos:end="73:59">

                <expr_stmt pos:start="65:17" pos:end="65:54"><expr pos:start="65:17" pos:end="65:53"><name pos:start="65:17" pos:end="65:37"><name pos:start="65:17" pos:end="65:19">vst</name><operator pos:start="65:20" pos:end="65:21">-&gt;</operator><name pos:start="65:22" pos:end="65:26">codec</name><operator pos:start="65:27" pos:end="65:28">-&gt;</operator><name pos:start="65:29" pos:end="65:37">codec_tag</name></name> <operator pos:start="65:39" pos:end="65:39">=</operator> <call pos:start="65:41" pos:end="65:53"><name pos:start="65:41" pos:end="65:49">avio_rl32</name><argument_list pos:start="65:50" pos:end="65:53">(<argument pos:start="65:51" pos:end="65:52"><expr pos:start="65:51" pos:end="65:52"><name pos:start="65:51" pos:end="65:52">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="67:17" pos:end="69:78"><expr pos:start="67:17" pos:end="69:77"><name pos:start="67:17" pos:end="67:36"><name pos:start="67:17" pos:end="67:19">vst</name><operator pos:start="67:20" pos:end="67:21">-&gt;</operator><name pos:start="67:22" pos:end="67:26">codec</name><operator pos:start="67:27" pos:end="67:28">-&gt;</operator><name pos:start="67:29" pos:end="67:36">codec_id</name></name> <operator pos:start="67:38" pos:end="67:38">=</operator>

                    <call pos:start="69:21" pos:end="69:77"><name pos:start="69:21" pos:end="69:35">ff_codec_get_id</name><argument_list pos:start="69:36" pos:end="69:77">(<argument pos:start="69:37" pos:end="69:53"><expr pos:start="69:37" pos:end="69:53"><name pos:start="69:37" pos:end="69:53">ff_codec_bmp_tags</name></expr></argument>, <argument pos:start="69:56" pos:end="69:76"><expr pos:start="69:56" pos:end="69:76"><name pos:start="69:56" pos:end="69:76"><name pos:start="69:56" pos:end="69:58">vst</name><operator pos:start="69:59" pos:end="69:60">-&gt;</operator><name pos:start="69:61" pos:end="69:65">codec</name><operator pos:start="69:66" pos:end="69:67">-&gt;</operator><name pos:start="69:68" pos:end="69:76">codec_tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="71:17" pos:end="73:59"><if pos:start="71:17" pos:end="73:59">if <condition pos:start="71:20" pos:end="71:71">(<expr pos:start="71:21" pos:end="71:70"><name pos:start="71:21" pos:end="71:41"><name pos:start="71:21" pos:end="71:23">vst</name><operator pos:start="71:24" pos:end="71:25">-&gt;</operator><name pos:start="71:26" pos:end="71:30">codec</name><operator pos:start="71:31" pos:end="71:32">-&gt;</operator><name pos:start="71:33" pos:end="71:41">codec_tag</name></name> <operator pos:start="71:43" pos:end="71:44">==</operator> <call pos:start="71:46" pos:end="71:70"><name pos:start="71:46" pos:end="71:50">MKTAG</name><argument_list pos:start="71:51" pos:end="71:70">(<argument pos:start="71:52" pos:end="71:54"><expr pos:start="71:52" pos:end="71:54"><literal type="char" pos:start="71:52" pos:end="71:54">'R'</literal></expr></argument>, <argument pos:start="71:57" pos:end="71:59"><expr pos:start="71:57" pos:end="71:59"><literal type="char" pos:start="71:57" pos:end="71:59">'J'</literal></expr></argument>, <argument pos:start="71:62" pos:end="71:64"><expr pos:start="71:62" pos:end="71:64"><literal type="char" pos:start="71:62" pos:end="71:64">'P'</literal></expr></argument>, <argument pos:start="71:67" pos:end="71:69"><expr pos:start="71:67" pos:end="71:69"><literal type="char" pos:start="71:67" pos:end="71:69">'G'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="73:21" pos:end="73:59"><block_content pos:start="73:21" pos:end="73:59">

                    <expr_stmt pos:start="73:21" pos:end="73:59"><expr pos:start="73:21" pos:end="73:58"><name pos:start="73:21" pos:end="73:40"><name pos:start="73:21" pos:end="73:23">vst</name><operator pos:start="73:24" pos:end="73:25">-&gt;</operator><name pos:start="73:26" pos:end="73:30">codec</name><operator pos:start="73:31" pos:end="73:32">-&gt;</operator><name pos:start="73:33" pos:end="73:40">codec_id</name></name> <operator pos:start="73:42" pos:end="73:42">=</operator> <name pos:start="73:44" pos:end="73:58">AV_CODEC_ID_NUV</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="75:15" pos:end="77:33">else<block type="pseudo" pos:start="77:17" pos:end="77:33"><block_content pos:start="77:17" pos:end="77:33">

                <expr_stmt pos:start="77:17" pos:end="77:33"><expr pos:start="77:17" pos:end="77:32"><call pos:start="77:17" pos:end="77:32"><name pos:start="77:17" pos:end="77:25">avio_skip</name><argument_list pos:start="77:26" pos:end="77:32">(<argument pos:start="77:27" pos:end="77:28"><expr pos:start="77:27" pos:end="77:28"><name pos:start="77:27" pos:end="77:28">pb</name></expr></argument>, <argument pos:start="77:31" pos:end="77:31"><expr pos:start="77:31" pos:end="77:31"><literal type="number" pos:start="77:31" pos:end="77:31">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <if_stmt pos:start="81:13" pos:end="123:37"><if pos:start="81:13" pos:end="121:13">if <condition pos:start="81:16" pos:end="81:20">(<expr pos:start="81:17" pos:end="81:19"><name pos:start="81:17" pos:end="81:19">ast</name></expr>)</condition> <block pos:start="81:22" pos:end="121:13">{<block_content pos:start="83:17" pos:end="119:56">

                <decl_stmt pos:start="83:17" pos:end="83:23"><decl pos:start="83:17" pos:end="83:22"><type pos:start="83:17" pos:end="83:19"><name pos:start="83:17" pos:end="83:19">int</name></type> <name pos:start="83:21" pos:end="83:22">id</name></decl>;</decl_stmt>



                <expr_stmt pos:start="87:17" pos:end="87:66"><expr pos:start="87:17" pos:end="87:65"><name pos:start="87:17" pos:end="87:37"><name pos:start="87:17" pos:end="87:19">ast</name><operator pos:start="87:20" pos:end="87:21">-&gt;</operator><name pos:start="87:22" pos:end="87:26">codec</name><operator pos:start="87:27" pos:end="87:28">-&gt;</operator><name pos:start="87:29" pos:end="87:37">codec_tag</name></name>             <operator pos:start="87:51" pos:end="87:51">=</operator> <call pos:start="87:53" pos:end="87:65"><name pos:start="87:53" pos:end="87:61">avio_rl32</name><argument_list pos:start="87:62" pos:end="87:65">(<argument pos:start="87:63" pos:end="87:64"><expr pos:start="87:63" pos:end="87:64"><name pos:start="87:63" pos:end="87:64">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="89:17" pos:end="89:66"><expr pos:start="89:17" pos:end="89:65"><name pos:start="89:17" pos:end="89:39"><name pos:start="89:17" pos:end="89:19">ast</name><operator pos:start="89:20" pos:end="89:21">-&gt;</operator><name pos:start="89:22" pos:end="89:26">codec</name><operator pos:start="89:27" pos:end="89:28">-&gt;</operator><name pos:start="89:29" pos:end="89:39">sample_rate</name></name>           <operator pos:start="89:51" pos:end="89:51">=</operator> <call pos:start="89:53" pos:end="89:65"><name pos:start="89:53" pos:end="89:61">avio_rl32</name><argument_list pos:start="89:62" pos:end="89:65">(<argument pos:start="89:63" pos:end="89:64"><expr pos:start="89:63" pos:end="89:64"><name pos:start="89:63" pos:end="89:64">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="91:17" pos:end="91:66"><expr pos:start="91:17" pos:end="91:65"><name pos:start="91:17" pos:end="91:49"><name pos:start="91:17" pos:end="91:19">ast</name><operator pos:start="91:20" pos:end="91:21">-&gt;</operator><name pos:start="91:22" pos:end="91:26">codec</name><operator pos:start="91:27" pos:end="91:28">-&gt;</operator><name pos:start="91:29" pos:end="91:49">bits_per_coded_sample</name></name> <operator pos:start="91:51" pos:end="91:51">=</operator> <call pos:start="91:53" pos:end="91:65"><name pos:start="91:53" pos:end="91:61">avio_rl32</name><argument_list pos:start="91:62" pos:end="91:65">(<argument pos:start="91:63" pos:end="91:64"><expr pos:start="91:63" pos:end="91:64"><name pos:start="91:63" pos:end="91:64">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="93:17" pos:end="93:66"><expr pos:start="93:17" pos:end="93:65"><name pos:start="93:17" pos:end="93:36"><name pos:start="93:17" pos:end="93:19">ast</name><operator pos:start="93:20" pos:end="93:21">-&gt;</operator><name pos:start="93:22" pos:end="93:26">codec</name><operator pos:start="93:27" pos:end="93:28">-&gt;</operator><name pos:start="93:29" pos:end="93:36">channels</name></name>              <operator pos:start="93:51" pos:end="93:51">=</operator> <call pos:start="93:53" pos:end="93:65"><name pos:start="93:53" pos:end="93:61">avio_rl32</name><argument_list pos:start="93:62" pos:end="93:65">(<argument pos:start="93:63" pos:end="93:64"><expr pos:start="93:63" pos:end="93:64"><name pos:start="93:63" pos:end="93:64">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="95:17" pos:end="95:54"><expr pos:start="95:17" pos:end="95:53"><name pos:start="95:17" pos:end="95:42"><name pos:start="95:17" pos:end="95:19">ast</name><operator pos:start="95:20" pos:end="95:21">-&gt;</operator><name pos:start="95:22" pos:end="95:26">codec</name><operator pos:start="95:27" pos:end="95:28">-&gt;</operator><name pos:start="95:29" pos:end="95:42">channel_layout</name></name>        <operator pos:start="95:51" pos:end="95:51">=</operator> <literal type="number" pos:start="95:53" pos:end="95:53">0</literal></expr>;</expr_stmt>



                <expr_stmt pos:start="99:17" pos:end="101:76"><expr pos:start="99:17" pos:end="101:75"><name pos:start="99:17" pos:end="99:18">id</name> <operator pos:start="99:20" pos:end="99:20">=</operator> <call pos:start="99:22" pos:end="101:75"><name pos:start="99:22" pos:end="99:40">ff_wav_codec_get_id</name><argument_list pos:start="99:41" pos:end="101:75">(<argument pos:start="99:42" pos:end="99:62"><expr pos:start="99:42" pos:end="99:62"><name pos:start="99:42" pos:end="99:62"><name pos:start="99:42" pos:end="99:44">ast</name><operator pos:start="99:45" pos:end="99:46">-&gt;</operator><name pos:start="99:47" pos:end="99:51">codec</name><operator pos:start="99:52" pos:end="99:53">-&gt;</operator><name pos:start="99:54" pos:end="99:62">codec_tag</name></name></expr></argument>,

                                         <argument pos:start="101:42" pos:end="101:74"><expr pos:start="101:42" pos:end="101:74"><name pos:start="101:42" pos:end="101:74"><name pos:start="101:42" pos:end="101:44">ast</name><operator pos:start="101:45" pos:end="101:46">-&gt;</operator><name pos:start="101:47" pos:end="101:51">codec</name><operator pos:start="101:52" pos:end="101:53">-&gt;</operator><name pos:start="101:54" pos:end="101:74">bits_per_coded_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="103:17" pos:end="113:17"><if pos:start="103:17" pos:end="113:17">if <condition pos:start="103:20" pos:end="103:43">(<expr pos:start="103:21" pos:end="103:42"><name pos:start="103:21" pos:end="103:22">id</name> <operator pos:start="103:24" pos:end="103:25">==</operator> <name pos:start="103:27" pos:end="103:42">AV_CODEC_ID_NONE</name></expr>)</condition> <block pos:start="103:45" pos:end="113:17">{<block_content pos:start="105:21" pos:end="111:59">

                    <expr_stmt pos:start="105:21" pos:end="105:80"><expr pos:start="105:21" pos:end="105:79"><name pos:start="105:21" pos:end="105:22">id</name> <operator pos:start="105:24" pos:end="105:24">=</operator> <call pos:start="105:26" pos:end="105:79"><name pos:start="105:26" pos:end="105:40">ff_codec_get_id</name><argument_list pos:start="105:41" pos:end="105:79">(<argument pos:start="105:42" pos:end="105:55"><expr pos:start="105:42" pos:end="105:55"><name pos:start="105:42" pos:end="105:55">nuv_audio_tags</name></expr></argument>, <argument pos:start="105:58" pos:end="105:78"><expr pos:start="105:58" pos:end="105:78"><name pos:start="105:58" pos:end="105:78"><name pos:start="105:58" pos:end="105:60">ast</name><operator pos:start="105:61" pos:end="105:62">-&gt;</operator><name pos:start="105:63" pos:end="105:67">codec</name><operator pos:start="105:68" pos:end="105:69">-&gt;</operator><name pos:start="105:70" pos:end="105:78">codec_tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="107:21" pos:end="111:59"><if pos:start="107:21" pos:end="111:59">if <condition pos:start="107:24" pos:end="107:52">(<expr pos:start="107:25" pos:end="107:51"><name pos:start="107:25" pos:end="107:26">id</name> <operator pos:start="107:28" pos:end="107:29">==</operator> <name pos:start="107:31" pos:end="107:51">AV_CODEC_ID_PCM_S16LE</name></expr>)</condition><block type="pseudo" pos:start="109:25" pos:end="111:59"><block_content pos:start="109:25" pos:end="111:59">

                        <expr_stmt pos:start="109:25" pos:end="111:59"><expr pos:start="109:25" pos:end="111:58"><name pos:start="109:25" pos:end="109:26">id</name> <operator pos:start="109:28" pos:end="109:28">=</operator> <call pos:start="109:30" pos:end="111:58"><name pos:start="109:30" pos:end="109:48">ff_get_pcm_codec_id</name><argument_list pos:start="109:49" pos:end="111:58">(<argument pos:start="109:50" pos:end="109:82"><expr pos:start="109:50" pos:end="109:82"><name pos:start="109:50" pos:end="109:82"><name pos:start="109:50" pos:end="109:52">ast</name><operator pos:start="109:53" pos:end="109:54">-&gt;</operator><name pos:start="109:55" pos:end="109:59">codec</name><operator pos:start="109:60" pos:end="109:61">-&gt;</operator><name pos:start="109:62" pos:end="109:82">bits_per_coded_sample</name></name></expr></argument>,

                                                 <argument pos:start="111:50" pos:end="111:50"><expr pos:start="111:50" pos:end="111:50"><literal type="number" pos:start="111:50" pos:end="111:50">0</literal></expr></argument>, <argument pos:start="111:53" pos:end="111:53"><expr pos:start="111:53" pos:end="111:53"><literal type="number" pos:start="111:53" pos:end="111:53">0</literal></expr></argument>, <argument pos:start="111:56" pos:end="111:57"><expr pos:start="111:56" pos:end="111:57"><operator pos:start="111:56" pos:end="111:56">~</operator><literal type="number" pos:start="111:57" pos:end="111:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="115:17" pos:end="115:42"><expr pos:start="115:17" pos:end="115:41"><name pos:start="115:17" pos:end="115:36"><name pos:start="115:17" pos:end="115:19">ast</name><operator pos:start="115:20" pos:end="115:21">-&gt;</operator><name pos:start="115:22" pos:end="115:26">codec</name><operator pos:start="115:27" pos:end="115:28">-&gt;</operator><name pos:start="115:29" pos:end="115:36">codec_id</name></name> <operator pos:start="115:38" pos:end="115:38">=</operator> <name pos:start="115:40" pos:end="115:41">id</name></expr>;</expr_stmt>



                <expr_stmt pos:start="119:17" pos:end="119:56"><expr pos:start="119:17" pos:end="119:55"><name pos:start="119:17" pos:end="119:33"><name pos:start="119:17" pos:end="119:19">ast</name><operator pos:start="119:20" pos:end="119:21">-&gt;</operator><name pos:start="119:22" pos:end="119:33">need_parsing</name></name> <operator pos:start="119:35" pos:end="119:35">=</operator> <name pos:start="119:37" pos:end="119:55">AVSTREAM_PARSE_FULL</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="121:15" pos:end="123:37">else<block type="pseudo" pos:start="123:17" pos:end="123:37"><block_content pos:start="123:17" pos:end="123:37">

                <expr_stmt pos:start="123:17" pos:end="123:37"><expr pos:start="123:17" pos:end="123:36"><call pos:start="123:17" pos:end="123:36"><name pos:start="123:17" pos:end="123:25">avio_skip</name><argument_list pos:start="123:26" pos:end="123:36">(<argument pos:start="123:27" pos:end="123:28"><expr pos:start="123:27" pos:end="123:28"><name pos:start="123:27" pos:end="123:28">pb</name></expr></argument>, <argument pos:start="123:31" pos:end="123:35"><expr pos:start="123:31" pos:end="123:35"><literal type="number" pos:start="123:31" pos:end="123:31">4</literal> <operator pos:start="123:33" pos:end="123:33">*</operator> <literal type="number" pos:start="123:35" pos:end="123:35">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <expr_stmt pos:start="127:13" pos:end="127:26"><expr pos:start="127:13" pos:end="127:25"><name pos:start="127:13" pos:end="127:16">size</name> <operator pos:start="127:18" pos:end="127:19">-=</operator> <literal type="number" pos:start="127:21" pos:end="127:21">6</literal> <operator pos:start="127:23" pos:end="127:23">*</operator> <literal type="number" pos:start="127:25" pos:end="127:25">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:32"><expr pos:start="129:13" pos:end="129:31"><call pos:start="129:13" pos:end="129:31"><name pos:start="129:13" pos:end="129:21">avio_skip</name><argument_list pos:start="129:22" pos:end="129:31">(<argument pos:start="129:23" pos:end="129:24"><expr pos:start="129:23" pos:end="129:24"><name pos:start="129:23" pos:end="129:24">pb</name></expr></argument>, <argument pos:start="129:27" pos:end="129:30"><expr pos:start="129:27" pos:end="129:30"><name pos:start="129:27" pos:end="129:30">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="131:13" pos:end="131:21">return <expr pos:start="131:20" pos:end="131:20"><literal type="number" pos:start="131:20" pos:end="131:20">1</literal></expr>;</return>

        <case pos:start="133:9" pos:end="133:23">case <expr pos:start="133:14" pos:end="133:22"><name pos:start="133:14" pos:end="133:22">NUV_SEEKP</name></expr>:</case>

            <expr_stmt pos:start="135:13" pos:end="135:22"><expr pos:start="135:13" pos:end="135:21"><name pos:start="135:13" pos:end="135:16">size</name> <operator pos:start="135:18" pos:end="135:18">=</operator> <literal type="number" pos:start="135:20" pos:end="135:21">11</literal></expr>;</expr_stmt>

            <break pos:start="137:13" pos:end="137:18">break;</break>

        <default pos:start="139:9" pos:end="139:16">default:</default>

            <expr_stmt pos:start="141:13" pos:end="141:29"><expr pos:start="141:13" pos:end="141:28"><call pos:start="141:13" pos:end="141:28"><name pos:start="141:13" pos:end="141:21">avio_skip</name><argument_list pos:start="141:22" pos:end="141:28">(<argument pos:start="141:23" pos:end="141:24"><expr pos:start="141:23" pos:end="141:24"><name pos:start="141:23" pos:end="141:24">pb</name></expr></argument>, <argument pos:start="141:27" pos:end="141:27"><expr pos:start="141:27" pos:end="141:27"><literal type="number" pos:start="141:27" pos:end="141:27">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:42"><expr pos:start="143:13" pos:end="143:41"><name pos:start="143:13" pos:end="143:16">size</name> <operator pos:start="143:18" pos:end="143:18">=</operator> <call pos:start="143:20" pos:end="143:41"><name pos:start="143:20" pos:end="143:26">PKTSIZE</name><argument_list pos:start="143:27" pos:end="143:41">(<argument pos:start="143:28" pos:end="143:40"><expr pos:start="143:28" pos:end="143:40"><call pos:start="143:28" pos:end="143:40"><name pos:start="143:28" pos:end="143:36">avio_rl32</name><argument_list pos:start="143:37" pos:end="143:40">(<argument pos:start="143:38" pos:end="143:39"><expr pos:start="143:38" pos:end="143:39"><name pos:start="143:38" pos:end="143:39">pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="145:13" pos:end="145:18">break;</break>

        </block_content>}</block></switch>

        <expr_stmt pos:start="149:9" pos:end="149:28"><expr pos:start="149:9" pos:end="149:27"><call pos:start="149:9" pos:end="149:27"><name pos:start="149:9" pos:end="149:17">avio_skip</name><argument_list pos:start="149:18" pos:end="149:27">(<argument pos:start="149:19" pos:end="149:20"><expr pos:start="149:19" pos:end="149:20"><name pos:start="149:19" pos:end="149:20">pb</name></expr></argument>, <argument pos:start="149:23" pos:end="149:26"><expr pos:start="149:23" pos:end="149:26"><name pos:start="149:23" pos:end="149:26">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <return pos:start="155:5" pos:end="155:13">return <expr pos:start="155:12" pos:end="155:12"><literal type="number" pos:start="155:12" pos:end="155:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
