<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/27316.c" pos:tabs="8"><function pos:start="1:1" pos:end="1443:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">disas_thumb_insn</name><parameter_list pos:start="1:29" pos:end="1:63">(<parameter pos:start="1:30" pos:end="1:45"><decl pos:start="1:30" pos:end="1:45"><type pos:start="1:30" pos:end="1:45"><name pos:start="1:30" pos:end="1:40">CPUARMState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">env</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:62"><decl pos:start="1:48" pos:end="1:62"><type pos:start="1:48" pos:end="1:62"><name pos:start="1:48" pos:end="1:59">DisasContext</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:62">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="1443:1">{<block_content pos:start="5:5" pos:end="1441:40">

    <decl_stmt pos:start="5:5" pos:end="5:52"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:16">val</name></decl>, <decl pos:start="5:19" pos:end="5:22"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:19" pos:end="5:22">insn</name></decl>, <decl pos:start="5:25" pos:end="5:26"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:25" pos:end="5:26">op</name></decl>, <decl pos:start="5:29" pos:end="5:30"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:29" pos:end="5:30">rm</name></decl>, <decl pos:start="5:33" pos:end="5:34"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:33" pos:end="5:34">rn</name></decl>, <decl pos:start="5:37" pos:end="5:38"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:37" pos:end="5:38">rd</name></decl>, <decl pos:start="5:41" pos:end="5:45"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:41" pos:end="5:45">shift</name></decl>, <decl pos:start="5:48" pos:end="5:51"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:48" pos:end="5:51">cond</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">int32_t</name></type> <name pos:start="7:13" pos:end="7:18">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">TCGv_i32</name></type> <name pos:start="11:14" pos:end="11:16">tmp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">TCGv_i32</name></type> <name pos:start="13:14" pos:end="13:17">tmp2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">TCGv_i32</name></type> <name pos:start="15:14" pos:end="15:17">addr</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="33:5"><if pos:start="19:5" pos:end="33:5">if <condition pos:start="19:8" pos:end="19:25">(<expr pos:start="19:9" pos:end="19:24"><name pos:start="19:9" pos:end="19:24"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:24">condexec_mask</name></name></expr>)</condition> <block pos:start="19:27" pos:end="33:5">{<block_content pos:start="21:9" pos:end="31:9">

        <expr_stmt pos:start="21:9" pos:end="21:32"><expr pos:start="21:9" pos:end="21:31"><name pos:start="21:9" pos:end="21:12">cond</name> <operator pos:start="21:14" pos:end="21:14">=</operator> <name pos:start="21:16" pos:end="21:31"><name pos:start="21:16" pos:end="21:16">s</name><operator pos:start="21:17" pos:end="21:18">-&gt;</operator><name pos:start="21:19" pos:end="21:31">condexec_cond</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="31:9"><if pos:start="23:9" pos:end="31:9">if <condition pos:start="23:12" pos:end="23:25">(<expr pos:start="23:13" pos:end="23:24"><name pos:start="23:13" pos:end="23:16">cond</name> <operator pos:start="23:18" pos:end="23:19">!=</operator> <literal type="number" pos:start="23:21" pos:end="23:24">0x0e</literal></expr>)</condition> <block pos:start="23:27" pos:end="31:9">{<block_content pos:start="25:11" pos:end="29:25">     <comment type="block" pos:start="23:33" pos:end="23:76">/* Skip conditional when condition is AL. */</comment>

          <expr_stmt pos:start="25:11" pos:end="25:41"><expr pos:start="25:11" pos:end="25:40"><name pos:start="25:11" pos:end="25:22"><name pos:start="25:11" pos:end="25:11">s</name><operator pos:start="25:12" pos:end="25:13">-&gt;</operator><name pos:start="25:14" pos:end="25:22">condlabel</name></name> <operator pos:start="25:24" pos:end="25:24">=</operator> <call pos:start="25:26" pos:end="25:40"><name pos:start="25:26" pos:end="25:38">gen_new_label</name><argument_list pos:start="25:39" pos:end="25:40">()</argument_list></call></expr>;</expr_stmt>

          <expr_stmt pos:start="27:11" pos:end="27:46"><expr pos:start="27:11" pos:end="27:45"><call pos:start="27:11" pos:end="27:45"><name pos:start="27:11" pos:end="27:21">gen_test_cc</name><argument_list pos:start="27:22" pos:end="27:45">(<argument pos:start="27:23" pos:end="27:30"><expr pos:start="27:23" pos:end="27:30"><name pos:start="27:23" pos:end="27:26">cond</name> <operator pos:start="27:28" pos:end="27:28">^</operator> <literal type="number" pos:start="27:30" pos:end="27:30">1</literal></expr></argument>, <argument pos:start="27:33" pos:end="27:44"><expr pos:start="27:33" pos:end="27:44"><name pos:start="27:33" pos:end="27:44"><name pos:start="27:33" pos:end="27:33">s</name><operator pos:start="27:34" pos:end="27:35">-&gt;</operator><name pos:start="27:36" pos:end="27:44">condlabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt pos:start="29:11" pos:end="29:25"><expr pos:start="29:11" pos:end="29:24"><name pos:start="29:11" pos:end="29:20"><name pos:start="29:11" pos:end="29:11">s</name><operator pos:start="29:12" pos:end="29:13">-&gt;</operator><name pos:start="29:14" pos:end="29:20">condjmp</name></name> <operator pos:start="29:22" pos:end="29:22">=</operator> <literal type="number" pos:start="29:24" pos:end="29:24">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:52"><expr pos:start="37:5" pos:end="37:51"><name pos:start="37:5" pos:end="37:8">insn</name> <operator pos:start="37:10" pos:end="37:10">=</operator> <call pos:start="37:12" pos:end="37:51"><name pos:start="37:12" pos:end="37:24">arm_lduw_code</name><argument_list pos:start="37:25" pos:end="37:51">(<argument pos:start="37:26" pos:end="37:28"><expr pos:start="37:26" pos:end="37:28"><name pos:start="37:26" pos:end="37:28">env</name></expr></argument>, <argument pos:start="37:31" pos:end="37:35"><expr pos:start="37:31" pos:end="37:35"><name pos:start="37:31" pos:end="37:35"><name pos:start="37:31" pos:end="37:31">s</name><operator pos:start="37:32" pos:end="37:33">-&gt;</operator><name pos:start="37:34" pos:end="37:35">pc</name></name></expr></argument>, <argument pos:start="37:38" pos:end="37:50"><expr pos:start="37:38" pos:end="37:50"><name pos:start="37:38" pos:end="37:50"><name pos:start="37:38" pos:end="37:38">s</name><operator pos:start="37:39" pos:end="37:40">-&gt;</operator><name pos:start="37:41" pos:end="37:50">bswap_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:15"><expr pos:start="39:5" pos:end="39:14"><name pos:start="39:5" pos:end="39:9"><name pos:start="39:5" pos:end="39:5">s</name><operator pos:start="39:6" pos:end="39:7">-&gt;</operator><name pos:start="39:8" pos:end="39:9">pc</name></name> <operator pos:start="39:11" pos:end="39:12">+=</operator> <literal type="number" pos:start="39:14" pos:end="39:14">2</literal></expr>;</expr_stmt>



    <switch pos:start="43:5" pos:end="1427:5">switch <condition pos:start="43:12" pos:end="43:23">(<expr pos:start="43:13" pos:end="43:22"><name pos:start="43:13" pos:end="43:16">insn</name> <operator pos:start="43:18" pos:end="43:19">&gt;&gt;</operator> <literal type="number" pos:start="43:21" pos:end="43:22">12</literal></expr>)</condition> <block pos:start="43:25" pos:end="1427:5">{<block_content pos:start="45:5" pos:end="1425:14">

    <case pos:start="45:5" pos:end="45:11">case <expr pos:start="45:10" pos:end="45:10"><literal type="number" pos:start="45:10" pos:end="45:10">0</literal></expr>:</case> <case pos:start="45:13" pos:end="45:19">case <expr pos:start="45:18" pos:end="45:18"><literal type="number" pos:start="45:18" pos:end="45:18">1</literal></expr>:</case>



        <expr_stmt pos:start="49:9" pos:end="49:22"><expr pos:start="49:9" pos:end="49:21"><name pos:start="49:9" pos:end="49:10">rd</name> <operator pos:start="49:12" pos:end="49:12">=</operator> <name pos:start="49:14" pos:end="49:17">insn</name> <operator pos:start="49:19" pos:end="49:19">&amp;</operator> <literal type="number" pos:start="49:21" pos:end="49:21">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:30"><expr pos:start="51:9" pos:end="51:29"><name pos:start="51:9" pos:end="51:10">op</name> <operator pos:start="51:12" pos:end="51:12">=</operator> <operator pos:start="51:14" pos:end="51:14">(</operator><name pos:start="51:15" pos:end="51:18">insn</name> <operator pos:start="51:20" pos:end="51:21">&gt;&gt;</operator> <literal type="number" pos:start="51:23" pos:end="51:24">11</literal><operator pos:start="51:25" pos:end="51:25">)</operator> <operator pos:start="51:27" pos:end="51:27">&amp;</operator> <literal type="number" pos:start="51:29" pos:end="51:29">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="123:9"><if pos:start="53:9" pos:end="105:9">if <condition pos:start="53:12" pos:end="53:20">(<expr pos:start="53:13" pos:end="53:19"><name pos:start="53:13" pos:end="53:14">op</name> <operator pos:start="53:16" pos:end="53:17">==</operator> <literal type="number" pos:start="53:19" pos:end="53:19">3</literal></expr>)</condition> <block pos:start="53:22" pos:end="105:9">{<block_content pos:start="57:13" pos:end="103:34">

            <comment type="block" pos:start="55:13" pos:end="55:30">/* add/subtract */</comment>

            <expr_stmt pos:start="57:13" pos:end="57:33"><expr pos:start="57:13" pos:end="57:32"><name pos:start="57:13" pos:end="57:14">rn</name> <operator pos:start="57:16" pos:end="57:16">=</operator> <operator pos:start="57:18" pos:end="57:18">(</operator><name pos:start="57:19" pos:end="57:22">insn</name> <operator pos:start="57:24" pos:end="57:25">&gt;&gt;</operator> <literal type="number" pos:start="57:27" pos:end="57:27">3</literal><operator pos:start="57:28" pos:end="57:28">)</operator> <operator pos:start="57:30" pos:end="57:30">&amp;</operator> <literal type="number" pos:start="57:32" pos:end="57:32">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:34"><expr pos:start="59:13" pos:end="59:33"><name pos:start="59:13" pos:end="59:15">tmp</name> <operator pos:start="59:17" pos:end="59:17">=</operator> <call pos:start="59:19" pos:end="59:33"><name pos:start="59:19" pos:end="59:26">load_reg</name><argument_list pos:start="59:27" pos:end="59:33">(<argument pos:start="59:28" pos:end="59:28"><expr pos:start="59:28" pos:end="59:28"><name pos:start="59:28" pos:end="59:28">s</name></expr></argument>, <argument pos:start="59:31" pos:end="59:32"><expr pos:start="59:31" pos:end="59:32"><name pos:start="59:31" pos:end="59:32">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="61:13" pos:end="77:13"><if pos:start="61:13" pos:end="69:13">if <condition pos:start="61:16" pos:end="61:33">(<expr pos:start="61:17" pos:end="61:32"><name pos:start="61:17" pos:end="61:20">insn</name> <operator pos:start="61:22" pos:end="61:22">&amp;</operator> <operator pos:start="61:24" pos:end="61:24">(</operator><literal type="number" pos:start="61:25" pos:end="61:25">1</literal> <operator pos:start="61:27" pos:end="61:28">&lt;&lt;</operator> <literal type="number" pos:start="61:30" pos:end="61:31">10</literal><operator pos:start="61:32" pos:end="61:32">)</operator></expr>)</condition> <block pos:start="61:35" pos:end="69:13">{<block_content pos:start="65:17" pos:end="67:56">

                <comment type="block" pos:start="63:17" pos:end="63:31">/* immediate */</comment>

                <expr_stmt pos:start="65:17" pos:end="65:42"><expr pos:start="65:17" pos:end="65:41"><name pos:start="65:17" pos:end="65:20">tmp2</name> <operator pos:start="65:22" pos:end="65:22">=</operator> <call pos:start="65:24" pos:end="65:41"><name pos:start="65:24" pos:end="65:39">tcg_temp_new_i32</name><argument_list pos:start="65:40" pos:end="65:41">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="67:17" pos:end="67:56"><expr pos:start="67:17" pos:end="67:55"><call pos:start="67:17" pos:end="67:55"><name pos:start="67:17" pos:end="67:32">tcg_gen_movi_i32</name><argument_list pos:start="67:33" pos:end="67:55">(<argument pos:start="67:34" pos:end="67:37"><expr pos:start="67:34" pos:end="67:37"><name pos:start="67:34" pos:end="67:37">tmp2</name></expr></argument>, <argument pos:start="67:40" pos:end="67:54"><expr pos:start="67:40" pos:end="67:54"><operator pos:start="67:40" pos:end="67:40">(</operator><name pos:start="67:41" pos:end="67:44">insn</name> <operator pos:start="67:46" pos:end="67:47">&gt;&gt;</operator> <literal type="number" pos:start="67:49" pos:end="67:49">6</literal><operator pos:start="67:50" pos:end="67:50">)</operator> <operator pos:start="67:52" pos:end="67:52">&amp;</operator> <literal type="number" pos:start="67:54" pos:end="67:54">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="69:15" pos:end="77:13">else <block pos:start="69:20" pos:end="77:13">{<block_content pos:start="73:17" pos:end="75:39">

                <comment type="block" pos:start="71:17" pos:end="71:25">/* reg */</comment>

                <expr_stmt pos:start="73:17" pos:end="73:37"><expr pos:start="73:17" pos:end="73:36"><name pos:start="73:17" pos:end="73:18">rm</name> <operator pos:start="73:20" pos:end="73:20">=</operator> <operator pos:start="73:22" pos:end="73:22">(</operator><name pos:start="73:23" pos:end="73:26">insn</name> <operator pos:start="73:28" pos:end="73:29">&gt;&gt;</operator> <literal type="number" pos:start="73:31" pos:end="73:31">6</literal><operator pos:start="73:32" pos:end="73:32">)</operator> <operator pos:start="73:34" pos:end="73:34">&amp;</operator> <literal type="number" pos:start="73:36" pos:end="73:36">7</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="75:17" pos:end="75:39"><expr pos:start="75:17" pos:end="75:38"><name pos:start="75:17" pos:end="75:20">tmp2</name> <operator pos:start="75:22" pos:end="75:22">=</operator> <call pos:start="75:24" pos:end="75:38"><name pos:start="75:24" pos:end="75:31">load_reg</name><argument_list pos:start="75:32" pos:end="75:38">(<argument pos:start="75:33" pos:end="75:33"><expr pos:start="75:33" pos:end="75:33"><name pos:start="75:33" pos:end="75:33">s</name></expr></argument>, <argument pos:start="75:36" pos:end="75:37"><expr pos:start="75:36" pos:end="75:37"><name pos:start="75:36" pos:end="75:37">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="79:13" pos:end="99:13"><if pos:start="79:13" pos:end="89:13">if <condition pos:start="79:16" pos:end="79:32">(<expr pos:start="79:17" pos:end="79:31"><name pos:start="79:17" pos:end="79:20">insn</name> <operator pos:start="79:22" pos:end="79:22">&amp;</operator> <operator pos:start="79:24" pos:end="79:24">(</operator><literal type="number" pos:start="79:25" pos:end="79:25">1</literal> <operator pos:start="79:27" pos:end="79:28">&lt;&lt;</operator> <literal type="number" pos:start="79:30" pos:end="79:30">9</literal><operator pos:start="79:31" pos:end="79:31">)</operator></expr>)</condition> <block pos:start="79:34" pos:end="89:13">{<block_content pos:start="81:17" pos:end="87:47">

                <if_stmt pos:start="81:17" pos:end="87:47"><if pos:start="81:17" pos:end="83:52">if <condition pos:start="81:20" pos:end="81:37">(<expr pos:start="81:21" pos:end="81:36"><name pos:start="81:21" pos:end="81:36"><name pos:start="81:21" pos:end="81:21">s</name><operator pos:start="81:22" pos:end="81:23">-&gt;</operator><name pos:start="81:24" pos:end="81:36">condexec_mask</name></name></expr>)</condition><block type="pseudo" pos:start="83:21" pos:end="83:52"><block_content pos:start="83:21" pos:end="83:52">

                    <expr_stmt pos:start="83:21" pos:end="83:52"><expr pos:start="83:21" pos:end="83:51"><call pos:start="83:21" pos:end="83:51"><name pos:start="83:21" pos:end="83:35">tcg_gen_sub_i32</name><argument_list pos:start="83:36" pos:end="83:51">(<argument pos:start="83:37" pos:end="83:39"><expr pos:start="83:37" pos:end="83:39"><name pos:start="83:37" pos:end="83:39">tmp</name></expr></argument>, <argument pos:start="83:42" pos:end="83:44"><expr pos:start="83:42" pos:end="83:44"><name pos:start="83:42" pos:end="83:44">tmp</name></expr></argument>, <argument pos:start="83:47" pos:end="83:50"><expr pos:start="83:47" pos:end="83:50"><name pos:start="83:47" pos:end="83:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="85:17" pos:end="87:47">else<block type="pseudo" pos:start="87:21" pos:end="87:47"><block_content pos:start="87:21" pos:end="87:47">

                    <expr_stmt pos:start="87:21" pos:end="87:47"><expr pos:start="87:21" pos:end="87:46"><call pos:start="87:21" pos:end="87:46"><name pos:start="87:21" pos:end="87:30">gen_sub_CC</name><argument_list pos:start="87:31" pos:end="87:46">(<argument pos:start="87:32" pos:end="87:34"><expr pos:start="87:32" pos:end="87:34"><name pos:start="87:32" pos:end="87:34">tmp</name></expr></argument>, <argument pos:start="87:37" pos:end="87:39"><expr pos:start="87:37" pos:end="87:39"><name pos:start="87:37" pos:end="87:39">tmp</name></expr></argument>, <argument pos:start="87:42" pos:end="87:45"><expr pos:start="87:42" pos:end="87:45"><name pos:start="87:42" pos:end="87:45">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="89:15" pos:end="99:13">else <block pos:start="89:20" pos:end="99:13">{<block_content pos:start="91:17" pos:end="97:47">

                <if_stmt pos:start="91:17" pos:end="97:47"><if pos:start="91:17" pos:end="93:52">if <condition pos:start="91:20" pos:end="91:37">(<expr pos:start="91:21" pos:end="91:36"><name pos:start="91:21" pos:end="91:36"><name pos:start="91:21" pos:end="91:21">s</name><operator pos:start="91:22" pos:end="91:23">-&gt;</operator><name pos:start="91:24" pos:end="91:36">condexec_mask</name></name></expr>)</condition><block type="pseudo" pos:start="93:21" pos:end="93:52"><block_content pos:start="93:21" pos:end="93:52">

                    <expr_stmt pos:start="93:21" pos:end="93:52"><expr pos:start="93:21" pos:end="93:51"><call pos:start="93:21" pos:end="93:51"><name pos:start="93:21" pos:end="93:35">tcg_gen_add_i32</name><argument_list pos:start="93:36" pos:end="93:51">(<argument pos:start="93:37" pos:end="93:39"><expr pos:start="93:37" pos:end="93:39"><name pos:start="93:37" pos:end="93:39">tmp</name></expr></argument>, <argument pos:start="93:42" pos:end="93:44"><expr pos:start="93:42" pos:end="93:44"><name pos:start="93:42" pos:end="93:44">tmp</name></expr></argument>, <argument pos:start="93:47" pos:end="93:50"><expr pos:start="93:47" pos:end="93:50"><name pos:start="93:47" pos:end="93:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="95:17" pos:end="97:47">else<block type="pseudo" pos:start="97:21" pos:end="97:47"><block_content pos:start="97:21" pos:end="97:47">

                    <expr_stmt pos:start="97:21" pos:end="97:47"><expr pos:start="97:21" pos:end="97:46"><call pos:start="97:21" pos:end="97:46"><name pos:start="97:21" pos:end="97:30">gen_add_CC</name><argument_list pos:start="97:31" pos:end="97:46">(<argument pos:start="97:32" pos:end="97:34"><expr pos:start="97:32" pos:end="97:34"><name pos:start="97:32" pos:end="97:34">tmp</name></expr></argument>, <argument pos:start="97:37" pos:end="97:39"><expr pos:start="97:37" pos:end="97:39"><name pos:start="97:37" pos:end="97:39">tmp</name></expr></argument>, <argument pos:start="97:42" pos:end="97:45"><expr pos:start="97:42" pos:end="97:45"><name pos:start="97:42" pos:end="97:45">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:36"><expr pos:start="101:13" pos:end="101:35"><call pos:start="101:13" pos:end="101:35"><name pos:start="101:13" pos:end="101:29">tcg_temp_free_i32</name><argument_list pos:start="101:30" pos:end="101:35">(<argument pos:start="101:31" pos:end="101:34"><expr pos:start="101:31" pos:end="101:34"><name pos:start="101:31" pos:end="101:34">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:34"><expr pos:start="103:13" pos:end="103:33"><call pos:start="103:13" pos:end="103:33"><name pos:start="103:13" pos:end="103:21">store_reg</name><argument_list pos:start="103:22" pos:end="103:33">(<argument pos:start="103:23" pos:end="103:23"><expr pos:start="103:23" pos:end="103:23"><name pos:start="103:23" pos:end="103:23">s</name></expr></argument>, <argument pos:start="103:26" pos:end="103:27"><expr pos:start="103:26" pos:end="103:27"><name pos:start="103:26" pos:end="103:27">rd</name></expr></argument>, <argument pos:start="103:30" pos:end="103:32"><expr pos:start="103:30" pos:end="103:32"><name pos:start="103:30" pos:end="103:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="105:11" pos:end="123:9">else <block pos:start="105:16" pos:end="123:9">{<block_content pos:start="109:13" pos:end="121:34">

            <comment type="block" pos:start="107:13" pos:end="107:33">/* shift immediate */</comment>

            <expr_stmt pos:start="109:13" pos:end="109:33"><expr pos:start="109:13" pos:end="109:32"><name pos:start="109:13" pos:end="109:14">rm</name> <operator pos:start="109:16" pos:end="109:16">=</operator> <operator pos:start="109:18" pos:end="109:18">(</operator><name pos:start="109:19" pos:end="109:22">insn</name> <operator pos:start="109:24" pos:end="109:25">&gt;&gt;</operator> <literal type="number" pos:start="109:27" pos:end="109:27">3</literal><operator pos:start="109:28" pos:end="109:28">)</operator> <operator pos:start="109:30" pos:end="109:30">&amp;</operator> <literal type="number" pos:start="109:32" pos:end="109:32">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:39"><expr pos:start="111:13" pos:end="111:38"><name pos:start="111:13" pos:end="111:17">shift</name> <operator pos:start="111:19" pos:end="111:19">=</operator> <operator pos:start="111:21" pos:end="111:21">(</operator><name pos:start="111:22" pos:end="111:25">insn</name> <operator pos:start="111:27" pos:end="111:28">&gt;&gt;</operator> <literal type="number" pos:start="111:30" pos:end="111:30">6</literal><operator pos:start="111:31" pos:end="111:31">)</operator> <operator pos:start="111:33" pos:end="111:33">&amp;</operator> <literal type="number" pos:start="111:35" pos:end="111:38">0x1f</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:34"><expr pos:start="113:13" pos:end="113:33"><name pos:start="113:13" pos:end="113:15">tmp</name> <operator pos:start="113:17" pos:end="113:17">=</operator> <call pos:start="113:19" pos:end="113:33"><name pos:start="113:19" pos:end="113:26">load_reg</name><argument_list pos:start="113:27" pos:end="113:33">(<argument pos:start="113:28" pos:end="113:28"><expr pos:start="113:28" pos:end="113:28"><name pos:start="113:28" pos:end="113:28">s</name></expr></argument>, <argument pos:start="113:31" pos:end="113:32"><expr pos:start="113:31" pos:end="113:32"><name pos:start="113:31" pos:end="113:32">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:68"><expr pos:start="115:13" pos:end="115:67"><call pos:start="115:13" pos:end="115:67"><name pos:start="115:13" pos:end="115:28">gen_arm_shift_im</name><argument_list pos:start="115:29" pos:end="115:67">(<argument pos:start="115:30" pos:end="115:32"><expr pos:start="115:30" pos:end="115:32"><name pos:start="115:30" pos:end="115:32">tmp</name></expr></argument>, <argument pos:start="115:35" pos:end="115:36"><expr pos:start="115:35" pos:end="115:36"><name pos:start="115:35" pos:end="115:36">op</name></expr></argument>, <argument pos:start="115:39" pos:end="115:43"><expr pos:start="115:39" pos:end="115:43"><name pos:start="115:39" pos:end="115:43">shift</name></expr></argument>, <argument pos:start="115:46" pos:end="115:66"><expr pos:start="115:46" pos:end="115:66"><name pos:start="115:46" pos:end="115:61"><name pos:start="115:46" pos:end="115:46">s</name><operator pos:start="115:47" pos:end="115:48">-&gt;</operator><name pos:start="115:49" pos:end="115:61">condexec_mask</name></name> <operator pos:start="115:63" pos:end="115:64">==</operator> <literal type="number" pos:start="115:66" pos:end="115:66">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="117:13" pos:end="119:34"><if pos:start="117:13" pos:end="119:34">if <condition pos:start="117:16" pos:end="117:34">(<expr pos:start="117:17" pos:end="117:33"><operator pos:start="117:17" pos:end="117:17">!</operator><name pos:start="117:18" pos:end="117:33"><name pos:start="117:18" pos:end="117:18">s</name><operator pos:start="117:19" pos:end="117:20">-&gt;</operator><name pos:start="117:21" pos:end="117:33">condexec_mask</name></name></expr>)</condition><block type="pseudo" pos:start="119:17" pos:end="119:34"><block_content pos:start="119:17" pos:end="119:34">

                <expr_stmt pos:start="119:17" pos:end="119:34"><expr pos:start="119:17" pos:end="119:33"><call pos:start="119:17" pos:end="119:33"><name pos:start="119:17" pos:end="119:28">gen_logic_CC</name><argument_list pos:start="119:29" pos:end="119:33">(<argument pos:start="119:30" pos:end="119:32"><expr pos:start="119:30" pos:end="119:32"><name pos:start="119:30" pos:end="119:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:34"><expr pos:start="121:13" pos:end="121:33"><call pos:start="121:13" pos:end="121:33"><name pos:start="121:13" pos:end="121:21">store_reg</name><argument_list pos:start="121:22" pos:end="121:33">(<argument pos:start="121:23" pos:end="121:23"><expr pos:start="121:23" pos:end="121:23"><name pos:start="121:23" pos:end="121:23">s</name></expr></argument>, <argument pos:start="121:26" pos:end="121:27"><expr pos:start="121:26" pos:end="121:27"><name pos:start="121:26" pos:end="121:27">rd</name></expr></argument>, <argument pos:start="121:30" pos:end="121:32"><expr pos:start="121:30" pos:end="121:32"><name pos:start="121:30" pos:end="121:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="125:9" pos:end="125:14">break;</break>

    <case pos:start="127:5" pos:end="127:11">case <expr pos:start="127:10" pos:end="127:10"><literal type="number" pos:start="127:10" pos:end="127:10">2</literal></expr>:</case> <case pos:start="127:13" pos:end="127:19">case <expr pos:start="127:18" pos:end="127:18"><literal type="number" pos:start="127:18" pos:end="127:18">3</literal></expr>:</case>

        <comment type="block" pos:start="129:9" pos:end="129:40">/* arithmetic large immediate */</comment>

        <expr_stmt pos:start="131:9" pos:end="131:30"><expr pos:start="131:9" pos:end="131:29"><name pos:start="131:9" pos:end="131:10">op</name> <operator pos:start="131:12" pos:end="131:12">=</operator> <operator pos:start="131:14" pos:end="131:14">(</operator><name pos:start="131:15" pos:end="131:18">insn</name> <operator pos:start="131:20" pos:end="131:21">&gt;&gt;</operator> <literal type="number" pos:start="131:23" pos:end="131:24">11</literal><operator pos:start="131:25" pos:end="131:25">)</operator> <operator pos:start="131:27" pos:end="131:27">&amp;</operator> <literal type="number" pos:start="131:29" pos:end="131:29">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:31"><expr pos:start="133:9" pos:end="133:30"><name pos:start="133:9" pos:end="133:10">rd</name> <operator pos:start="133:12" pos:end="133:12">=</operator> <operator pos:start="133:14" pos:end="133:14">(</operator><name pos:start="133:15" pos:end="133:18">insn</name> <operator pos:start="133:20" pos:end="133:21">&gt;&gt;</operator> <literal type="number" pos:start="133:23" pos:end="133:23">8</literal><operator pos:start="133:24" pos:end="133:24">)</operator> <operator pos:start="133:26" pos:end="133:26">&amp;</operator> <literal type="number" pos:start="133:28" pos:end="133:30">0x7</literal></expr>;</expr_stmt>

        <if_stmt pos:start="135:9" pos:end="201:9"><if pos:start="135:9" pos:end="147:9">if <condition pos:start="135:12" pos:end="135:20">(<expr pos:start="135:13" pos:end="135:19"><name pos:start="135:13" pos:end="135:14">op</name> <operator pos:start="135:16" pos:end="135:17">==</operator> <literal type="number" pos:start="135:19" pos:end="135:19">0</literal></expr>)</condition> <block pos:start="135:22" pos:end="147:9">{<block_content pos:start="137:13" pos:end="145:34"> <comment type="block" pos:start="135:24" pos:end="135:32">/* mov */</comment>

            <expr_stmt pos:start="137:13" pos:end="137:37"><expr pos:start="137:13" pos:end="137:36"><name pos:start="137:13" pos:end="137:15">tmp</name> <operator pos:start="137:17" pos:end="137:17">=</operator> <call pos:start="137:19" pos:end="137:36"><name pos:start="137:19" pos:end="137:34">tcg_temp_new_i32</name><argument_list pos:start="137:35" pos:end="137:36">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:47"><expr pos:start="139:13" pos:end="139:46"><call pos:start="139:13" pos:end="139:46"><name pos:start="139:13" pos:end="139:28">tcg_gen_movi_i32</name><argument_list pos:start="139:29" pos:end="139:46">(<argument pos:start="139:30" pos:end="139:32"><expr pos:start="139:30" pos:end="139:32"><name pos:start="139:30" pos:end="139:32">tmp</name></expr></argument>, <argument pos:start="139:35" pos:end="139:45"><expr pos:start="139:35" pos:end="139:45"><name pos:start="139:35" pos:end="139:38">insn</name> <operator pos:start="139:40" pos:end="139:40">&amp;</operator> <literal type="number" pos:start="139:42" pos:end="139:45">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="141:13" pos:end="143:34"><if pos:start="141:13" pos:end="143:34">if <condition pos:start="141:16" pos:end="141:34">(<expr pos:start="141:17" pos:end="141:33"><operator pos:start="141:17" pos:end="141:17">!</operator><name pos:start="141:18" pos:end="141:33"><name pos:start="141:18" pos:end="141:18">s</name><operator pos:start="141:19" pos:end="141:20">-&gt;</operator><name pos:start="141:21" pos:end="141:33">condexec_mask</name></name></expr>)</condition><block type="pseudo" pos:start="143:17" pos:end="143:34"><block_content pos:start="143:17" pos:end="143:34">

                <expr_stmt pos:start="143:17" pos:end="143:34"><expr pos:start="143:17" pos:end="143:33"><call pos:start="143:17" pos:end="143:33"><name pos:start="143:17" pos:end="143:28">gen_logic_CC</name><argument_list pos:start="143:29" pos:end="143:33">(<argument pos:start="143:30" pos:end="143:32"><expr pos:start="143:30" pos:end="143:32"><name pos:start="143:30" pos:end="143:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:34"><expr pos:start="145:13" pos:end="145:33"><call pos:start="145:13" pos:end="145:33"><name pos:start="145:13" pos:end="145:21">store_reg</name><argument_list pos:start="145:22" pos:end="145:33">(<argument pos:start="145:23" pos:end="145:23"><expr pos:start="145:23" pos:end="145:23"><name pos:start="145:23" pos:end="145:23">s</name></expr></argument>, <argument pos:start="145:26" pos:end="145:27"><expr pos:start="145:26" pos:end="145:27"><name pos:start="145:26" pos:end="145:27">rd</name></expr></argument>, <argument pos:start="145:30" pos:end="145:32"><expr pos:start="145:30" pos:end="145:32"><name pos:start="145:30" pos:end="145:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="147:11" pos:end="201:9">else <block pos:start="147:16" pos:end="201:9">{<block_content pos:start="149:13" pos:end="199:13">

            <expr_stmt pos:start="149:13" pos:end="149:34"><expr pos:start="149:13" pos:end="149:33"><name pos:start="149:13" pos:end="149:15">tmp</name> <operator pos:start="149:17" pos:end="149:17">=</operator> <call pos:start="149:19" pos:end="149:33"><name pos:start="149:19" pos:end="149:26">load_reg</name><argument_list pos:start="149:27" pos:end="149:33">(<argument pos:start="149:28" pos:end="149:28"><expr pos:start="149:28" pos:end="149:28"><name pos:start="149:28" pos:end="149:28">s</name></expr></argument>, <argument pos:start="149:31" pos:end="149:32"><expr pos:start="149:31" pos:end="149:32"><name pos:start="149:31" pos:end="149:32">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:38"><expr pos:start="151:13" pos:end="151:37"><name pos:start="151:13" pos:end="151:16">tmp2</name> <operator pos:start="151:18" pos:end="151:18">=</operator> <call pos:start="151:20" pos:end="151:37"><name pos:start="151:20" pos:end="151:35">tcg_temp_new_i32</name><argument_list pos:start="151:36" pos:end="151:37">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:48"><expr pos:start="153:13" pos:end="153:47"><call pos:start="153:13" pos:end="153:47"><name pos:start="153:13" pos:end="153:28">tcg_gen_movi_i32</name><argument_list pos:start="153:29" pos:end="153:47">(<argument pos:start="153:30" pos:end="153:33"><expr pos:start="153:30" pos:end="153:33"><name pos:start="153:30" pos:end="153:33">tmp2</name></expr></argument>, <argument pos:start="153:36" pos:end="153:46"><expr pos:start="153:36" pos:end="153:46"><name pos:start="153:36" pos:end="153:39">insn</name> <operator pos:start="153:41" pos:end="153:41">&amp;</operator> <literal type="number" pos:start="153:43" pos:end="153:46">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="155:13" pos:end="199:13">switch <condition pos:start="155:20" pos:end="155:23">(<expr pos:start="155:21" pos:end="155:22"><name pos:start="155:21" pos:end="155:22">op</name></expr>)</condition> <block pos:start="155:25" pos:end="199:13">{<block_content pos:start="157:13" pos:end="197:22">

            <case pos:start="157:13" pos:end="157:19">case <expr pos:start="157:18" pos:end="157:18"><literal type="number" pos:start="157:18" pos:end="157:18">1</literal></expr>:</case> <comment type="block" pos:start="157:21" pos:end="157:29">/* cmp */</comment>

                <expr_stmt pos:start="159:17" pos:end="159:43"><expr pos:start="159:17" pos:end="159:42"><call pos:start="159:17" pos:end="159:42"><name pos:start="159:17" pos:end="159:26">gen_sub_CC</name><argument_list pos:start="159:27" pos:end="159:42">(<argument pos:start="159:28" pos:end="159:30"><expr pos:start="159:28" pos:end="159:30"><name pos:start="159:28" pos:end="159:30">tmp</name></expr></argument>, <argument pos:start="159:33" pos:end="159:35"><expr pos:start="159:33" pos:end="159:35"><name pos:start="159:33" pos:end="159:35">tmp</name></expr></argument>, <argument pos:start="159:38" pos:end="159:41"><expr pos:start="159:38" pos:end="159:41"><name pos:start="159:38" pos:end="159:41">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="161:17" pos:end="161:39"><expr pos:start="161:17" pos:end="161:38"><call pos:start="161:17" pos:end="161:38"><name pos:start="161:17" pos:end="161:33">tcg_temp_free_i32</name><argument_list pos:start="161:34" pos:end="161:38">(<argument pos:start="161:35" pos:end="161:37"><expr pos:start="161:35" pos:end="161:37"><name pos:start="161:35" pos:end="161:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="163:17" pos:end="163:40"><expr pos:start="163:17" pos:end="163:39"><call pos:start="163:17" pos:end="163:39"><name pos:start="163:17" pos:end="163:33">tcg_temp_free_i32</name><argument_list pos:start="163:34" pos:end="163:39">(<argument pos:start="163:35" pos:end="163:38"><expr pos:start="163:35" pos:end="163:38"><name pos:start="163:35" pos:end="163:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="165:17" pos:end="165:22">break;</break>

            <case pos:start="167:13" pos:end="167:19">case <expr pos:start="167:18" pos:end="167:18"><literal type="number" pos:start="167:18" pos:end="167:18">2</literal></expr>:</case> <comment type="block" pos:start="167:21" pos:end="167:29">/* add */</comment>

                <if_stmt pos:start="169:17" pos:end="175:47"><if pos:start="169:17" pos:end="171:52">if <condition pos:start="169:20" pos:end="169:37">(<expr pos:start="169:21" pos:end="169:36"><name pos:start="169:21" pos:end="169:36"><name pos:start="169:21" pos:end="169:21">s</name><operator pos:start="169:22" pos:end="169:23">-&gt;</operator><name pos:start="169:24" pos:end="169:36">condexec_mask</name></name></expr>)</condition><block type="pseudo" pos:start="171:21" pos:end="171:52"><block_content pos:start="171:21" pos:end="171:52">

                    <expr_stmt pos:start="171:21" pos:end="171:52"><expr pos:start="171:21" pos:end="171:51"><call pos:start="171:21" pos:end="171:51"><name pos:start="171:21" pos:end="171:35">tcg_gen_add_i32</name><argument_list pos:start="171:36" pos:end="171:51">(<argument pos:start="171:37" pos:end="171:39"><expr pos:start="171:37" pos:end="171:39"><name pos:start="171:37" pos:end="171:39">tmp</name></expr></argument>, <argument pos:start="171:42" pos:end="171:44"><expr pos:start="171:42" pos:end="171:44"><name pos:start="171:42" pos:end="171:44">tmp</name></expr></argument>, <argument pos:start="171:47" pos:end="171:50"><expr pos:start="171:47" pos:end="171:50"><name pos:start="171:47" pos:end="171:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="173:17" pos:end="175:47">else<block type="pseudo" pos:start="175:21" pos:end="175:47"><block_content pos:start="175:21" pos:end="175:47">

                    <expr_stmt pos:start="175:21" pos:end="175:47"><expr pos:start="175:21" pos:end="175:46"><call pos:start="175:21" pos:end="175:46"><name pos:start="175:21" pos:end="175:30">gen_add_CC</name><argument_list pos:start="175:31" pos:end="175:46">(<argument pos:start="175:32" pos:end="175:34"><expr pos:start="175:32" pos:end="175:34"><name pos:start="175:32" pos:end="175:34">tmp</name></expr></argument>, <argument pos:start="175:37" pos:end="175:39"><expr pos:start="175:37" pos:end="175:39"><name pos:start="175:37" pos:end="175:39">tmp</name></expr></argument>, <argument pos:start="175:42" pos:end="175:45"><expr pos:start="175:42" pos:end="175:45"><name pos:start="175:42" pos:end="175:45">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="177:17" pos:end="177:40"><expr pos:start="177:17" pos:end="177:39"><call pos:start="177:17" pos:end="177:39"><name pos:start="177:17" pos:end="177:33">tcg_temp_free_i32</name><argument_list pos:start="177:34" pos:end="177:39">(<argument pos:start="177:35" pos:end="177:38"><expr pos:start="177:35" pos:end="177:38"><name pos:start="177:35" pos:end="177:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="179:17" pos:end="179:38"><expr pos:start="179:17" pos:end="179:37"><call pos:start="179:17" pos:end="179:37"><name pos:start="179:17" pos:end="179:25">store_reg</name><argument_list pos:start="179:26" pos:end="179:37">(<argument pos:start="179:27" pos:end="179:27"><expr pos:start="179:27" pos:end="179:27"><name pos:start="179:27" pos:end="179:27">s</name></expr></argument>, <argument pos:start="179:30" pos:end="179:31"><expr pos:start="179:30" pos:end="179:31"><name pos:start="179:30" pos:end="179:31">rd</name></expr></argument>, <argument pos:start="179:34" pos:end="179:36"><expr pos:start="179:34" pos:end="179:36"><name pos:start="179:34" pos:end="179:36">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="181:17" pos:end="181:22">break;</break>

            <case pos:start="183:13" pos:end="183:19">case <expr pos:start="183:18" pos:end="183:18"><literal type="number" pos:start="183:18" pos:end="183:18">3</literal></expr>:</case> <comment type="block" pos:start="183:21" pos:end="183:29">/* sub */</comment>

                <if_stmt pos:start="185:17" pos:end="191:47"><if pos:start="185:17" pos:end="187:52">if <condition pos:start="185:20" pos:end="185:37">(<expr pos:start="185:21" pos:end="185:36"><name pos:start="185:21" pos:end="185:36"><name pos:start="185:21" pos:end="185:21">s</name><operator pos:start="185:22" pos:end="185:23">-&gt;</operator><name pos:start="185:24" pos:end="185:36">condexec_mask</name></name></expr>)</condition><block type="pseudo" pos:start="187:21" pos:end="187:52"><block_content pos:start="187:21" pos:end="187:52">

                    <expr_stmt pos:start="187:21" pos:end="187:52"><expr pos:start="187:21" pos:end="187:51"><call pos:start="187:21" pos:end="187:51"><name pos:start="187:21" pos:end="187:35">tcg_gen_sub_i32</name><argument_list pos:start="187:36" pos:end="187:51">(<argument pos:start="187:37" pos:end="187:39"><expr pos:start="187:37" pos:end="187:39"><name pos:start="187:37" pos:end="187:39">tmp</name></expr></argument>, <argument pos:start="187:42" pos:end="187:44"><expr pos:start="187:42" pos:end="187:44"><name pos:start="187:42" pos:end="187:44">tmp</name></expr></argument>, <argument pos:start="187:47" pos:end="187:50"><expr pos:start="187:47" pos:end="187:50"><name pos:start="187:47" pos:end="187:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="189:17" pos:end="191:47">else<block type="pseudo" pos:start="191:21" pos:end="191:47"><block_content pos:start="191:21" pos:end="191:47">

                    <expr_stmt pos:start="191:21" pos:end="191:47"><expr pos:start="191:21" pos:end="191:46"><call pos:start="191:21" pos:end="191:46"><name pos:start="191:21" pos:end="191:30">gen_sub_CC</name><argument_list pos:start="191:31" pos:end="191:46">(<argument pos:start="191:32" pos:end="191:34"><expr pos:start="191:32" pos:end="191:34"><name pos:start="191:32" pos:end="191:34">tmp</name></expr></argument>, <argument pos:start="191:37" pos:end="191:39"><expr pos:start="191:37" pos:end="191:39"><name pos:start="191:37" pos:end="191:39">tmp</name></expr></argument>, <argument pos:start="191:42" pos:end="191:45"><expr pos:start="191:42" pos:end="191:45"><name pos:start="191:42" pos:end="191:45">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="193:17" pos:end="193:40"><expr pos:start="193:17" pos:end="193:39"><call pos:start="193:17" pos:end="193:39"><name pos:start="193:17" pos:end="193:33">tcg_temp_free_i32</name><argument_list pos:start="193:34" pos:end="193:39">(<argument pos:start="193:35" pos:end="193:38"><expr pos:start="193:35" pos:end="193:38"><name pos:start="193:35" pos:end="193:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="195:17" pos:end="195:38"><expr pos:start="195:17" pos:end="195:37"><call pos:start="195:17" pos:end="195:37"><name pos:start="195:17" pos:end="195:25">store_reg</name><argument_list pos:start="195:26" pos:end="195:37">(<argument pos:start="195:27" pos:end="195:27"><expr pos:start="195:27" pos:end="195:27"><name pos:start="195:27" pos:end="195:27">s</name></expr></argument>, <argument pos:start="195:30" pos:end="195:31"><expr pos:start="195:30" pos:end="195:31"><name pos:start="195:30" pos:end="195:31">rd</name></expr></argument>, <argument pos:start="195:34" pos:end="195:36"><expr pos:start="195:34" pos:end="195:36"><name pos:start="195:34" pos:end="195:36">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="197:17" pos:end="197:22">break;</break>

            </block_content>}</block></switch>

        </block_content>}</block></else></if_stmt>

        <break pos:start="203:9" pos:end="203:14">break;</break>

    <case pos:start="205:5" pos:end="205:11">case <expr pos:start="205:10" pos:end="205:10"><literal type="number" pos:start="205:10" pos:end="205:10">4</literal></expr>:</case>

        <if_stmt pos:start="207:9" pos:end="231:9"><if pos:start="207:9" pos:end="231:9">if <condition pos:start="207:12" pos:end="207:29">(<expr pos:start="207:13" pos:end="207:28"><name pos:start="207:13" pos:end="207:16">insn</name> <operator pos:start="207:18" pos:end="207:18">&amp;</operator> <operator pos:start="207:20" pos:end="207:20">(</operator><literal type="number" pos:start="207:21" pos:end="207:21">1</literal> <operator pos:start="207:23" pos:end="207:24">&lt;&lt;</operator> <literal type="number" pos:start="207:26" pos:end="207:27">11</literal><operator pos:start="207:28" pos:end="207:28">)</operator></expr>)</condition> <block pos:start="207:31" pos:end="231:9">{<block_content pos:start="209:13" pos:end="229:18">

            <expr_stmt pos:start="209:13" pos:end="209:33"><expr pos:start="209:13" pos:end="209:32"><name pos:start="209:13" pos:end="209:14">rd</name> <operator pos:start="209:16" pos:end="209:16">=</operator> <operator pos:start="209:18" pos:end="209:18">(</operator><name pos:start="209:19" pos:end="209:22">insn</name> <operator pos:start="209:24" pos:end="209:25">&gt;&gt;</operator> <literal type="number" pos:start="209:27" pos:end="209:27">8</literal><operator pos:start="209:28" pos:end="209:28">)</operator> <operator pos:start="209:30" pos:end="209:30">&amp;</operator> <literal type="number" pos:start="209:32" pos:end="209:32">7</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="211:13" pos:end="211:61">/* load pc-relative.  Bit 1 of PC is ignored.  */</comment>

            <expr_stmt pos:start="213:13" pos:end="213:50"><expr pos:start="213:13" pos:end="213:49"><name pos:start="213:13" pos:end="213:15">val</name> <operator pos:start="213:17" pos:end="213:17">=</operator> <name pos:start="213:19" pos:end="213:23"><name pos:start="213:19" pos:end="213:19">s</name><operator pos:start="213:20" pos:end="213:21">-&gt;</operator><name pos:start="213:22" pos:end="213:23">pc</name></name> <operator pos:start="213:25" pos:end="213:25">+</operator> <literal type="number" pos:start="213:27" pos:end="213:29">2</literal> <operator pos:start="213:29" pos:end="213:29">+</operator> <operator pos:start="213:31" pos:end="213:31">(</operator><operator pos:start="213:32" pos:end="213:32">(</operator><name pos:start="213:33" pos:end="213:36">insn</name> <operator pos:start="213:38" pos:end="213:38">&amp;</operator> <literal type="number" pos:start="213:40" pos:end="213:43">0xff</literal><operator pos:start="213:44" pos:end="213:44">)</operator> <operator pos:start="213:46" pos:end="213:46">*</operator> <literal type="number" pos:start="213:48" pos:end="213:48">4</literal><operator pos:start="213:49" pos:end="213:49">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="215:13" pos:end="215:32"><expr pos:start="215:13" pos:end="215:31"><name pos:start="215:13" pos:end="215:15">val</name> <operator pos:start="215:17" pos:end="215:18">&amp;=</operator> <operator pos:start="215:20" pos:end="215:20">~</operator><operator pos:start="215:21" pos:end="215:21">(</operator><name pos:start="215:22" pos:end="215:29">uint32_t</name><operator pos:start="215:30" pos:end="215:30">)</operator><literal type="number" pos:start="215:31" pos:end="215:31">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="217:13" pos:end="217:38"><expr pos:start="217:13" pos:end="217:37"><name pos:start="217:13" pos:end="217:16">addr</name> <operator pos:start="217:18" pos:end="217:18">=</operator> <call pos:start="217:20" pos:end="217:37"><name pos:start="217:20" pos:end="217:35">tcg_temp_new_i32</name><argument_list pos:start="217:36" pos:end="217:37">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="219:13" pos:end="219:40"><expr pos:start="219:13" pos:end="219:39"><call pos:start="219:13" pos:end="219:39"><name pos:start="219:13" pos:end="219:28">tcg_gen_movi_i32</name><argument_list pos:start="219:29" pos:end="219:39">(<argument pos:start="219:30" pos:end="219:33"><expr pos:start="219:30" pos:end="219:33"><name pos:start="219:30" pos:end="219:33">addr</name></expr></argument>, <argument pos:start="219:36" pos:end="219:38"><expr pos:start="219:36" pos:end="219:38"><name pos:start="219:36" pos:end="219:38">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="221:13" pos:end="221:37"><expr pos:start="221:13" pos:end="221:36"><name pos:start="221:13" pos:end="221:15">tmp</name> <operator pos:start="221:17" pos:end="221:17">=</operator> <call pos:start="221:19" pos:end="221:36"><name pos:start="221:19" pos:end="221:34">tcg_temp_new_i32</name><argument_list pos:start="221:35" pos:end="221:36">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="223:13" pos:end="223:50"><expr pos:start="223:13" pos:end="223:49"><call pos:start="223:13" pos:end="223:49"><name pos:start="223:13" pos:end="223:26">gen_aa32_ld32u</name><argument_list pos:start="223:27" pos:end="223:49">(<argument pos:start="223:28" pos:end="223:30"><expr pos:start="223:28" pos:end="223:30"><name pos:start="223:28" pos:end="223:30">tmp</name></expr></argument>, <argument pos:start="223:33" pos:end="223:36"><expr pos:start="223:33" pos:end="223:36"><name pos:start="223:33" pos:end="223:36">addr</name></expr></argument>, <argument pos:start="223:39" pos:end="223:48"><expr pos:start="223:39" pos:end="223:48"><call pos:start="223:39" pos:end="223:48"><name pos:start="223:39" pos:end="223:45">IS_USER</name><argument_list pos:start="223:46" pos:end="223:48">(<argument pos:start="223:47" pos:end="223:47"><expr pos:start="223:47" pos:end="223:47"><name pos:start="223:47" pos:end="223:47">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="225:13" pos:end="225:36"><expr pos:start="225:13" pos:end="225:35"><call pos:start="225:13" pos:end="225:35"><name pos:start="225:13" pos:end="225:29">tcg_temp_free_i32</name><argument_list pos:start="225:30" pos:end="225:35">(<argument pos:start="225:31" pos:end="225:34"><expr pos:start="225:31" pos:end="225:34"><name pos:start="225:31" pos:end="225:34">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="227:13" pos:end="227:34"><expr pos:start="227:13" pos:end="227:33"><call pos:start="227:13" pos:end="227:33"><name pos:start="227:13" pos:end="227:21">store_reg</name><argument_list pos:start="227:22" pos:end="227:33">(<argument pos:start="227:23" pos:end="227:23"><expr pos:start="227:23" pos:end="227:23"><name pos:start="227:23" pos:end="227:23">s</name></expr></argument>, <argument pos:start="227:26" pos:end="227:27"><expr pos:start="227:26" pos:end="227:27"><name pos:start="227:26" pos:end="227:27">rd</name></expr></argument>, <argument pos:start="227:30" pos:end="227:32"><expr pos:start="227:30" pos:end="227:32"><name pos:start="227:30" pos:end="227:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="229:13" pos:end="229:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="233:9" pos:end="309:9"><if pos:start="233:9" pos:end="309:9">if <condition pos:start="233:12" pos:end="233:29">(<expr pos:start="233:13" pos:end="233:28"><name pos:start="233:13" pos:end="233:16">insn</name> <operator pos:start="233:18" pos:end="233:18">&amp;</operator> <operator pos:start="233:20" pos:end="233:20">(</operator><literal type="number" pos:start="233:21" pos:end="233:21">1</literal> <operator pos:start="233:23" pos:end="233:24">&lt;&lt;</operator> <literal type="number" pos:start="233:26" pos:end="233:27">10</literal><operator pos:start="233:28" pos:end="233:28">)</operator></expr>)</condition> <block pos:start="233:31" pos:end="309:9">{<block_content pos:start="237:13" pos:end="307:18">

            <comment type="block" pos:start="235:13" pos:end="235:49">/* data processing extended or blx */</comment>

            <expr_stmt pos:start="237:13" pos:end="237:48"><expr pos:start="237:13" pos:end="237:47"><name pos:start="237:13" pos:end="237:14">rd</name> <operator pos:start="237:16" pos:end="237:16">=</operator> <operator pos:start="237:18" pos:end="237:18">(</operator><name pos:start="237:19" pos:end="237:22">insn</name> <operator pos:start="237:24" pos:end="237:24">&amp;</operator> <literal type="number" pos:start="237:26" pos:end="237:26">7</literal><operator pos:start="237:27" pos:end="237:27">)</operator> <operator pos:start="237:29" pos:end="237:29">|</operator> <operator pos:start="237:31" pos:end="237:31">(</operator><operator pos:start="237:32" pos:end="237:32">(</operator><name pos:start="237:33" pos:end="237:36">insn</name> <operator pos:start="237:38" pos:end="237:39">&gt;&gt;</operator> <literal type="number" pos:start="237:41" pos:end="237:41">4</literal><operator pos:start="237:42" pos:end="237:42">)</operator> <operator pos:start="237:44" pos:end="237:44">&amp;</operator> <literal type="number" pos:start="237:46" pos:end="237:46">8</literal><operator pos:start="237:47" pos:end="237:47">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="239:13" pos:end="239:35"><expr pos:start="239:13" pos:end="239:34"><name pos:start="239:13" pos:end="239:14">rm</name> <operator pos:start="239:16" pos:end="239:16">=</operator> <operator pos:start="239:18" pos:end="239:18">(</operator><name pos:start="239:19" pos:end="239:22">insn</name> <operator pos:start="239:24" pos:end="239:25">&gt;&gt;</operator> <literal type="number" pos:start="239:27" pos:end="239:27">3</literal><operator pos:start="239:28" pos:end="239:28">)</operator> <operator pos:start="239:30" pos:end="239:30">&amp;</operator> <literal type="number" pos:start="239:32" pos:end="239:34">0xf</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="241:13" pos:end="241:33"><expr pos:start="241:13" pos:end="241:32"><name pos:start="241:13" pos:end="241:14">op</name> <operator pos:start="241:16" pos:end="241:16">=</operator> <operator pos:start="241:18" pos:end="241:18">(</operator><name pos:start="241:19" pos:end="241:22">insn</name> <operator pos:start="241:24" pos:end="241:25">&gt;&gt;</operator> <literal type="number" pos:start="241:27" pos:end="241:27">8</literal><operator pos:start="241:28" pos:end="241:28">)</operator> <operator pos:start="241:30" pos:end="241:30">&amp;</operator> <literal type="number" pos:start="241:32" pos:end="241:32">3</literal></expr>;</expr_stmt>

            <switch pos:start="243:13" pos:end="305:13">switch <condition pos:start="243:20" pos:end="243:23">(<expr pos:start="243:21" pos:end="243:22"><name pos:start="243:21" pos:end="243:22">op</name></expr>)</condition> <block pos:start="243:25" pos:end="305:13">{<block_content pos:start="245:13" pos:end="303:22">

            <case pos:start="245:13" pos:end="245:19">case <expr pos:start="245:18" pos:end="245:18"><literal type="number" pos:start="245:18" pos:end="245:18">0</literal></expr>:</case> <comment type="block" pos:start="245:21" pos:end="245:29">/* add */</comment>

                <expr_stmt pos:start="247:17" pos:end="247:38"><expr pos:start="247:17" pos:end="247:37"><name pos:start="247:17" pos:end="247:19">tmp</name> <operator pos:start="247:21" pos:end="247:21">=</operator> <call pos:start="247:23" pos:end="247:37"><name pos:start="247:23" pos:end="247:30">load_reg</name><argument_list pos:start="247:31" pos:end="247:37">(<argument pos:start="247:32" pos:end="247:32"><expr pos:start="247:32" pos:end="247:32"><name pos:start="247:32" pos:end="247:32">s</name></expr></argument>, <argument pos:start="247:35" pos:end="247:36"><expr pos:start="247:35" pos:end="247:36"><name pos:start="247:35" pos:end="247:36">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="249:17" pos:end="249:39"><expr pos:start="249:17" pos:end="249:38"><name pos:start="249:17" pos:end="249:20">tmp2</name> <operator pos:start="249:22" pos:end="249:22">=</operator> <call pos:start="249:24" pos:end="249:38"><name pos:start="249:24" pos:end="249:31">load_reg</name><argument_list pos:start="249:32" pos:end="249:38">(<argument pos:start="249:33" pos:end="249:33"><expr pos:start="249:33" pos:end="249:33"><name pos:start="249:33" pos:end="249:33">s</name></expr></argument>, <argument pos:start="249:36" pos:end="249:37"><expr pos:start="249:36" pos:end="249:37"><name pos:start="249:36" pos:end="249:37">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="251:17" pos:end="251:48"><expr pos:start="251:17" pos:end="251:47"><call pos:start="251:17" pos:end="251:47"><name pos:start="251:17" pos:end="251:31">tcg_gen_add_i32</name><argument_list pos:start="251:32" pos:end="251:47">(<argument pos:start="251:33" pos:end="251:35"><expr pos:start="251:33" pos:end="251:35"><name pos:start="251:33" pos:end="251:35">tmp</name></expr></argument>, <argument pos:start="251:38" pos:end="251:40"><expr pos:start="251:38" pos:end="251:40"><name pos:start="251:38" pos:end="251:40">tmp</name></expr></argument>, <argument pos:start="251:43" pos:end="251:46"><expr pos:start="251:43" pos:end="251:46"><name pos:start="251:43" pos:end="251:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="253:17" pos:end="253:40"><expr pos:start="253:17" pos:end="253:39"><call pos:start="253:17" pos:end="253:39"><name pos:start="253:17" pos:end="253:33">tcg_temp_free_i32</name><argument_list pos:start="253:34" pos:end="253:39">(<argument pos:start="253:35" pos:end="253:38"><expr pos:start="253:35" pos:end="253:38"><name pos:start="253:35" pos:end="253:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="255:17" pos:end="255:38"><expr pos:start="255:17" pos:end="255:37"><call pos:start="255:17" pos:end="255:37"><name pos:start="255:17" pos:end="255:25">store_reg</name><argument_list pos:start="255:26" pos:end="255:37">(<argument pos:start="255:27" pos:end="255:27"><expr pos:start="255:27" pos:end="255:27"><name pos:start="255:27" pos:end="255:27">s</name></expr></argument>, <argument pos:start="255:30" pos:end="255:31"><expr pos:start="255:30" pos:end="255:31"><name pos:start="255:30" pos:end="255:31">rd</name></expr></argument>, <argument pos:start="255:34" pos:end="255:36"><expr pos:start="255:34" pos:end="255:36"><name pos:start="255:34" pos:end="255:36">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="257:17" pos:end="257:22">break;</break>

            <case pos:start="259:13" pos:end="259:19">case <expr pos:start="259:18" pos:end="259:18"><literal type="number" pos:start="259:18" pos:end="259:18">1</literal></expr>:</case> <comment type="block" pos:start="259:21" pos:end="259:29">/* cmp */</comment>

                <expr_stmt pos:start="261:17" pos:end="261:38"><expr pos:start="261:17" pos:end="261:37"><name pos:start="261:17" pos:end="261:19">tmp</name> <operator pos:start="261:21" pos:end="261:21">=</operator> <call pos:start="261:23" pos:end="261:37"><name pos:start="261:23" pos:end="261:30">load_reg</name><argument_list pos:start="261:31" pos:end="261:37">(<argument pos:start="261:32" pos:end="261:32"><expr pos:start="261:32" pos:end="261:32"><name pos:start="261:32" pos:end="261:32">s</name></expr></argument>, <argument pos:start="261:35" pos:end="261:36"><expr pos:start="261:35" pos:end="261:36"><name pos:start="261:35" pos:end="261:36">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="263:17" pos:end="263:39"><expr pos:start="263:17" pos:end="263:38"><name pos:start="263:17" pos:end="263:20">tmp2</name> <operator pos:start="263:22" pos:end="263:22">=</operator> <call pos:start="263:24" pos:end="263:38"><name pos:start="263:24" pos:end="263:31">load_reg</name><argument_list pos:start="263:32" pos:end="263:38">(<argument pos:start="263:33" pos:end="263:33"><expr pos:start="263:33" pos:end="263:33"><name pos:start="263:33" pos:end="263:33">s</name></expr></argument>, <argument pos:start="263:36" pos:end="263:37"><expr pos:start="263:36" pos:end="263:37"><name pos:start="263:36" pos:end="263:37">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="265:17" pos:end="265:43"><expr pos:start="265:17" pos:end="265:42"><call pos:start="265:17" pos:end="265:42"><name pos:start="265:17" pos:end="265:26">gen_sub_CC</name><argument_list pos:start="265:27" pos:end="265:42">(<argument pos:start="265:28" pos:end="265:30"><expr pos:start="265:28" pos:end="265:30"><name pos:start="265:28" pos:end="265:30">tmp</name></expr></argument>, <argument pos:start="265:33" pos:end="265:35"><expr pos:start="265:33" pos:end="265:35"><name pos:start="265:33" pos:end="265:35">tmp</name></expr></argument>, <argument pos:start="265:38" pos:end="265:41"><expr pos:start="265:38" pos:end="265:41"><name pos:start="265:38" pos:end="265:41">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="267:17" pos:end="267:40"><expr pos:start="267:17" pos:end="267:39"><call pos:start="267:17" pos:end="267:39"><name pos:start="267:17" pos:end="267:33">tcg_temp_free_i32</name><argument_list pos:start="267:34" pos:end="267:39">(<argument pos:start="267:35" pos:end="267:38"><expr pos:start="267:35" pos:end="267:38"><name pos:start="267:35" pos:end="267:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="269:17" pos:end="269:39"><expr pos:start="269:17" pos:end="269:38"><call pos:start="269:17" pos:end="269:38"><name pos:start="269:17" pos:end="269:33">tcg_temp_free_i32</name><argument_list pos:start="269:34" pos:end="269:38">(<argument pos:start="269:35" pos:end="269:37"><expr pos:start="269:35" pos:end="269:37"><name pos:start="269:35" pos:end="269:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="271:17" pos:end="271:22">break;</break>

            <case pos:start="273:13" pos:end="273:19">case <expr pos:start="273:18" pos:end="273:18"><literal type="number" pos:start="273:18" pos:end="273:18">2</literal></expr>:</case> <comment type="block" pos:start="273:21" pos:end="273:33">/* mov/cpy */</comment>

                <expr_stmt pos:start="275:17" pos:end="275:38"><expr pos:start="275:17" pos:end="275:37"><name pos:start="275:17" pos:end="275:19">tmp</name> <operator pos:start="275:21" pos:end="275:21">=</operator> <call pos:start="275:23" pos:end="275:37"><name pos:start="275:23" pos:end="275:30">load_reg</name><argument_list pos:start="275:31" pos:end="275:37">(<argument pos:start="275:32" pos:end="275:32"><expr pos:start="275:32" pos:end="275:32"><name pos:start="275:32" pos:end="275:32">s</name></expr></argument>, <argument pos:start="275:35" pos:end="275:36"><expr pos:start="275:35" pos:end="275:36"><name pos:start="275:35" pos:end="275:36">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="277:17" pos:end="277:38"><expr pos:start="277:17" pos:end="277:37"><call pos:start="277:17" pos:end="277:37"><name pos:start="277:17" pos:end="277:25">store_reg</name><argument_list pos:start="277:26" pos:end="277:37">(<argument pos:start="277:27" pos:end="277:27"><expr pos:start="277:27" pos:end="277:27"><name pos:start="277:27" pos:end="277:27">s</name></expr></argument>, <argument pos:start="277:30" pos:end="277:31"><expr pos:start="277:30" pos:end="277:31"><name pos:start="277:30" pos:end="277:31">rd</name></expr></argument>, <argument pos:start="277:34" pos:end="277:36"><expr pos:start="277:34" pos:end="277:36"><name pos:start="277:34" pos:end="277:36">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="279:17" pos:end="279:22">break;</break>

            <case pos:start="281:13" pos:end="281:19">case <expr pos:start="281:18" pos:end="281:18"><literal type="number" pos:start="281:18" pos:end="281:18">3</literal></expr>:</case><comment type="block" pos:start="281:20" pos:end="281:66">/* branch [and link] exchange thumb register */</comment>

                <expr_stmt pos:start="283:17" pos:end="283:38"><expr pos:start="283:17" pos:end="283:37"><name pos:start="283:17" pos:end="283:19">tmp</name> <operator pos:start="283:21" pos:end="283:21">=</operator> <call pos:start="283:23" pos:end="283:37"><name pos:start="283:23" pos:end="283:30">load_reg</name><argument_list pos:start="283:31" pos:end="283:37">(<argument pos:start="283:32" pos:end="283:32"><expr pos:start="283:32" pos:end="283:32"><name pos:start="283:32" pos:end="283:32">s</name></expr></argument>, <argument pos:start="283:35" pos:end="283:36"><expr pos:start="283:35" pos:end="283:36"><name pos:start="283:35" pos:end="283:36">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="285:17" pos:end="297:17"><if pos:start="285:17" pos:end="297:17">if <condition pos:start="285:20" pos:end="285:36">(<expr pos:start="285:21" pos:end="285:35"><name pos:start="285:21" pos:end="285:24">insn</name> <operator pos:start="285:26" pos:end="285:26">&amp;</operator> <operator pos:start="285:28" pos:end="285:28">(</operator><literal type="number" pos:start="285:29" pos:end="285:29">1</literal> <operator pos:start="285:31" pos:end="285:32">&lt;&lt;</operator> <literal type="number" pos:start="285:34" pos:end="285:34">7</literal><operator pos:start="285:35" pos:end="285:35">)</operator></expr>)</condition> <block pos:start="285:38" pos:end="297:17">{<block_content pos:start="287:21" pos:end="295:43">

                    <expr_stmt pos:start="287:21" pos:end="287:28"><expr pos:start="287:21" pos:end="287:27"><call pos:start="287:21" pos:end="287:27"><name pos:start="287:21" pos:end="287:24">ARCH</name><argument_list pos:start="287:25" pos:end="287:27">(<argument pos:start="287:26" pos:end="287:26"><expr pos:start="287:26" pos:end="287:26"><literal type="number" pos:start="287:26" pos:end="287:26">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="289:21" pos:end="289:46"><expr pos:start="289:21" pos:end="289:45"><name pos:start="289:21" pos:end="289:23">val</name> <operator pos:start="289:25" pos:end="289:25">=</operator> <operator pos:start="289:27" pos:end="289:27">(</operator><name pos:start="289:28" pos:end="289:35">uint32_t</name><operator pos:start="289:36" pos:end="289:36">)</operator><name pos:start="289:37" pos:end="289:41"><name pos:start="289:37" pos:end="289:37">s</name><operator pos:start="289:38" pos:end="289:39">-&gt;</operator><name pos:start="289:40" pos:end="289:41">pc</name></name> <operator pos:start="289:43" pos:end="289:43">|</operator> <literal type="number" pos:start="289:45" pos:end="289:45">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="291:21" pos:end="291:46"><expr pos:start="291:21" pos:end="291:45"><name pos:start="291:21" pos:end="291:24">tmp2</name> <operator pos:start="291:26" pos:end="291:26">=</operator> <call pos:start="291:28" pos:end="291:45"><name pos:start="291:28" pos:end="291:43">tcg_temp_new_i32</name><argument_list pos:start="291:44" pos:end="291:45">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="293:21" pos:end="293:48"><expr pos:start="293:21" pos:end="293:47"><call pos:start="293:21" pos:end="293:47"><name pos:start="293:21" pos:end="293:36">tcg_gen_movi_i32</name><argument_list pos:start="293:37" pos:end="293:47">(<argument pos:start="293:38" pos:end="293:41"><expr pos:start="293:38" pos:end="293:41"><name pos:start="293:38" pos:end="293:41">tmp2</name></expr></argument>, <argument pos:start="293:44" pos:end="293:46"><expr pos:start="293:44" pos:end="293:46"><name pos:start="293:44" pos:end="293:46">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="295:21" pos:end="295:43"><expr pos:start="295:21" pos:end="295:42"><call pos:start="295:21" pos:end="295:42"><name pos:start="295:21" pos:end="295:29">store_reg</name><argument_list pos:start="295:30" pos:end="295:42">(<argument pos:start="295:31" pos:end="295:31"><expr pos:start="295:31" pos:end="295:31"><name pos:start="295:31" pos:end="295:31">s</name></expr></argument>, <argument pos:start="295:34" pos:end="295:35"><expr pos:start="295:34" pos:end="295:35"><literal type="number" pos:start="295:34" pos:end="295:35">14</literal></expr></argument>, <argument pos:start="295:38" pos:end="295:41"><expr pos:start="295:38" pos:end="295:41"><name pos:start="295:38" pos:end="295:41">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <comment type="block" pos:start="299:17" pos:end="299:53">/* already thumb, no need to check */</comment>

                <expr_stmt pos:start="301:17" pos:end="301:31"><expr pos:start="301:17" pos:end="301:30"><call pos:start="301:17" pos:end="301:30"><name pos:start="301:17" pos:end="301:22">gen_bx</name><argument_list pos:start="301:23" pos:end="301:30">(<argument pos:start="301:24" pos:end="301:24"><expr pos:start="301:24" pos:end="301:24"><name pos:start="301:24" pos:end="301:24">s</name></expr></argument>, <argument pos:start="301:27" pos:end="301:29"><expr pos:start="301:27" pos:end="301:29"><name pos:start="301:27" pos:end="301:29">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="303:17" pos:end="303:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="307:13" pos:end="307:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="313:9" pos:end="313:38">/* data processing register */</comment>

        <expr_stmt pos:start="315:9" pos:end="315:22"><expr pos:start="315:9" pos:end="315:21"><name pos:start="315:9" pos:end="315:10">rd</name> <operator pos:start="315:12" pos:end="315:12">=</operator> <name pos:start="315:14" pos:end="315:17">insn</name> <operator pos:start="315:19" pos:end="315:19">&amp;</operator> <literal type="number" pos:start="315:21" pos:end="315:21">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="317:9" pos:end="317:29"><expr pos:start="317:9" pos:end="317:28"><name pos:start="317:9" pos:end="317:10">rm</name> <operator pos:start="317:12" pos:end="317:12">=</operator> <operator pos:start="317:14" pos:end="317:14">(</operator><name pos:start="317:15" pos:end="317:18">insn</name> <operator pos:start="317:20" pos:end="317:21">&gt;&gt;</operator> <literal type="number" pos:start="317:23" pos:end="317:23">3</literal><operator pos:start="317:24" pos:end="317:24">)</operator> <operator pos:start="317:26" pos:end="317:26">&amp;</operator> <literal type="number" pos:start="317:28" pos:end="317:28">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="319:9" pos:end="319:31"><expr pos:start="319:9" pos:end="319:30"><name pos:start="319:9" pos:end="319:10">op</name> <operator pos:start="319:12" pos:end="319:12">=</operator> <operator pos:start="319:14" pos:end="319:14">(</operator><name pos:start="319:15" pos:end="319:18">insn</name> <operator pos:start="319:20" pos:end="319:21">&gt;&gt;</operator> <literal type="number" pos:start="319:23" pos:end="319:23">6</literal><operator pos:start="319:24" pos:end="319:24">)</operator> <operator pos:start="319:26" pos:end="319:26">&amp;</operator> <literal type="number" pos:start="319:28" pos:end="319:30">0xf</literal></expr>;</expr_stmt>

        <if_stmt pos:start="321:9" pos:end="337:9"><if pos:start="321:9" pos:end="333:9">if <condition pos:start="321:12" pos:end="321:53">(<expr pos:start="321:13" pos:end="321:52"><name pos:start="321:13" pos:end="321:14">op</name> <operator pos:start="321:16" pos:end="321:17">==</operator> <literal type="number" pos:start="321:19" pos:end="321:19">2</literal> <operator pos:start="321:21" pos:end="321:22">||</operator> <name pos:start="321:24" pos:end="321:25">op</name> <operator pos:start="321:27" pos:end="321:28">==</operator> <literal type="number" pos:start="321:30" pos:end="321:30">3</literal> <operator pos:start="321:32" pos:end="321:33">||</operator> <name pos:start="321:35" pos:end="321:36">op</name> <operator pos:start="321:38" pos:end="321:39">==</operator> <literal type="number" pos:start="321:41" pos:end="321:41">4</literal> <operator pos:start="321:43" pos:end="321:44">||</operator> <name pos:start="321:46" pos:end="321:47">op</name> <operator pos:start="321:49" pos:end="321:50">==</operator> <literal type="number" pos:start="321:52" pos:end="321:52">7</literal></expr>)</condition> <block pos:start="321:55" pos:end="333:9">{<block_content pos:start="325:13" pos:end="331:20">

            <comment type="block" pos:start="323:13" pos:end="323:66">/* the shift/rotate ops want the operands backwards */</comment>

            <expr_stmt pos:start="325:13" pos:end="325:21"><expr pos:start="325:13" pos:end="325:20"><name pos:start="325:13" pos:end="325:15">val</name> <operator pos:start="325:17" pos:end="325:17">=</operator> <name pos:start="325:19" pos:end="325:20">rm</name></expr>;</expr_stmt>

            <expr_stmt pos:start="327:13" pos:end="327:20"><expr pos:start="327:13" pos:end="327:19"><name pos:start="327:13" pos:end="327:14">rm</name> <operator pos:start="327:16" pos:end="327:16">=</operator> <name pos:start="327:18" pos:end="327:19">rd</name></expr>;</expr_stmt>

            <expr_stmt pos:start="329:13" pos:end="329:21"><expr pos:start="329:13" pos:end="329:20"><name pos:start="329:13" pos:end="329:14">rd</name> <operator pos:start="329:16" pos:end="329:16">=</operator> <name pos:start="329:18" pos:end="329:20">val</name></expr>;</expr_stmt>

            <expr_stmt pos:start="331:13" pos:end="331:20"><expr pos:start="331:13" pos:end="331:19"><name pos:start="331:13" pos:end="331:15">val</name> <operator pos:start="331:17" pos:end="331:17">=</operator> <literal type="number" pos:start="331:19" pos:end="331:19">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="333:11" pos:end="337:9">else <block pos:start="333:16" pos:end="337:9">{<block_content pos:start="335:13" pos:end="335:20">

            <expr_stmt pos:start="335:13" pos:end="335:20"><expr pos:start="335:13" pos:end="335:19"><name pos:start="335:13" pos:end="335:15">val</name> <operator pos:start="335:17" pos:end="335:17">=</operator> <literal type="number" pos:start="335:19" pos:end="335:19">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="341:9" pos:end="355:9"><if pos:start="341:9" pos:end="347:9">if <condition pos:start="341:12" pos:end="341:20">(<expr pos:start="341:13" pos:end="341:19"><name pos:start="341:13" pos:end="341:14">op</name> <operator pos:start="341:16" pos:end="341:17">==</operator> <literal type="number" pos:start="341:19" pos:end="341:19">9</literal></expr>)</condition> <block pos:start="341:22" pos:end="347:9">{<block_content pos:start="343:13" pos:end="345:37"> <comment type="block" pos:start="341:24" pos:end="341:32">/* neg */</comment>

            <expr_stmt pos:start="343:13" pos:end="343:37"><expr pos:start="343:13" pos:end="343:36"><name pos:start="343:13" pos:end="343:15">tmp</name> <operator pos:start="343:17" pos:end="343:17">=</operator> <call pos:start="343:19" pos:end="343:36"><name pos:start="343:19" pos:end="343:34">tcg_temp_new_i32</name><argument_list pos:start="343:35" pos:end="343:36">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="345:13" pos:end="345:37"><expr pos:start="345:13" pos:end="345:36"><call pos:start="345:13" pos:end="345:36"><name pos:start="345:13" pos:end="345:28">tcg_gen_movi_i32</name><argument_list pos:start="345:29" pos:end="345:36">(<argument pos:start="345:30" pos:end="345:32"><expr pos:start="345:30" pos:end="345:32"><name pos:start="345:30" pos:end="345:32">tmp</name></expr></argument>, <argument pos:start="345:35" pos:end="345:35"><expr pos:start="345:35" pos:end="345:35"><literal type="number" pos:start="345:35" pos:end="345:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="347:11" pos:end="351:9">else if <condition pos:start="347:19" pos:end="347:29">(<expr pos:start="347:20" pos:end="347:28"><name pos:start="347:20" pos:end="347:21">op</name> <operator pos:start="347:23" pos:end="347:24">!=</operator> <literal type="number" pos:start="347:26" pos:end="347:28">0xf</literal></expr>)</condition> <block pos:start="347:31" pos:end="351:9">{<block_content pos:start="349:13" pos:end="349:34"> <comment type="block" pos:start="347:33" pos:end="347:72">/* mvn doesn't read its first operand */</comment>

            <expr_stmt pos:start="349:13" pos:end="349:34"><expr pos:start="349:13" pos:end="349:33"><name pos:start="349:13" pos:end="349:15">tmp</name> <operator pos:start="349:17" pos:end="349:17">=</operator> <call pos:start="349:19" pos:end="349:33"><name pos:start="349:19" pos:end="349:26">load_reg</name><argument_list pos:start="349:27" pos:end="349:33">(<argument pos:start="349:28" pos:end="349:28"><expr pos:start="349:28" pos:end="349:28"><name pos:start="349:28" pos:end="349:28">s</name></expr></argument>, <argument pos:start="349:31" pos:end="349:32"><expr pos:start="349:31" pos:end="349:32"><name pos:start="349:31" pos:end="349:32">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="351:11" pos:end="355:9">else <block pos:start="351:16" pos:end="355:9">{<block_content pos:start="353:13" pos:end="353:33">

            <expr_stmt pos:start="353:13" pos:end="353:33"><expr pos:start="353:13" pos:end="353:32"><call pos:start="353:13" pos:end="353:32"><name pos:start="353:13" pos:end="353:27">TCGV_UNUSED_I32</name><argument_list pos:start="353:28" pos:end="353:32">(<argument pos:start="353:29" pos:end="353:31"><expr pos:start="353:29" pos:end="353:31"><name pos:start="353:29" pos:end="353:31">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="359:9" pos:end="359:31"><expr pos:start="359:9" pos:end="359:30"><name pos:start="359:9" pos:end="359:12">tmp2</name> <operator pos:start="359:14" pos:end="359:14">=</operator> <call pos:start="359:16" pos:end="359:30"><name pos:start="359:16" pos:end="359:23">load_reg</name><argument_list pos:start="359:24" pos:end="359:30">(<argument pos:start="359:25" pos:end="359:25"><expr pos:start="359:25" pos:end="359:25"><name pos:start="359:25" pos:end="359:25">s</name></expr></argument>, <argument pos:start="359:28" pos:end="359:29"><expr pos:start="359:28" pos:end="359:29"><name pos:start="359:28" pos:end="359:29">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="361:9" pos:end="559:9">switch <condition pos:start="361:16" pos:end="361:19">(<expr pos:start="361:17" pos:end="361:18"><name pos:start="361:17" pos:end="361:18">op</name></expr>)</condition> <block pos:start="361:21" pos:end="559:9">{<block_content pos:start="363:9" pos:end="557:18">

        <case pos:start="363:9" pos:end="363:17">case <expr pos:start="363:14" pos:end="363:16"><literal type="number" pos:start="363:14" pos:end="363:16">0x0</literal></expr>:</case> <comment type="block" pos:start="363:19" pos:end="363:27">/* and */</comment>

            <expr_stmt pos:start="365:13" pos:end="365:44"><expr pos:start="365:13" pos:end="365:43"><call pos:start="365:13" pos:end="365:43"><name pos:start="365:13" pos:end="365:27">tcg_gen_and_i32</name><argument_list pos:start="365:28" pos:end="365:43">(<argument pos:start="365:29" pos:end="365:31"><expr pos:start="365:29" pos:end="365:31"><name pos:start="365:29" pos:end="365:31">tmp</name></expr></argument>, <argument pos:start="365:34" pos:end="365:36"><expr pos:start="365:34" pos:end="365:36"><name pos:start="365:34" pos:end="365:36">tmp</name></expr></argument>, <argument pos:start="365:39" pos:end="365:42"><expr pos:start="365:39" pos:end="365:42"><name pos:start="365:39" pos:end="365:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="367:13" pos:end="369:34"><if pos:start="367:13" pos:end="369:34">if <condition pos:start="367:16" pos:end="367:34">(<expr pos:start="367:17" pos:end="367:33"><operator pos:start="367:17" pos:end="367:17">!</operator><name pos:start="367:18" pos:end="367:33"><name pos:start="367:18" pos:end="367:18">s</name><operator pos:start="367:19" pos:end="367:20">-&gt;</operator><name pos:start="367:21" pos:end="367:33">condexec_mask</name></name></expr>)</condition><block type="pseudo" pos:start="369:17" pos:end="369:34"><block_content pos:start="369:17" pos:end="369:34">

                <expr_stmt pos:start="369:17" pos:end="369:34"><expr pos:start="369:17" pos:end="369:33"><call pos:start="369:17" pos:end="369:33"><name pos:start="369:17" pos:end="369:28">gen_logic_CC</name><argument_list pos:start="369:29" pos:end="369:33">(<argument pos:start="369:30" pos:end="369:32"><expr pos:start="369:30" pos:end="369:32"><name pos:start="369:30" pos:end="369:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <break pos:start="371:13" pos:end="371:18">break;</break>

        <case pos:start="373:9" pos:end="373:17">case <expr pos:start="373:14" pos:end="373:16"><literal type="number" pos:start="373:14" pos:end="373:16">0x1</literal></expr>:</case> <comment type="block" pos:start="373:19" pos:end="373:27">/* eor */</comment>

            <expr_stmt pos:start="375:13" pos:end="375:44"><expr pos:start="375:13" pos:end="375:43"><call pos:start="375:13" pos:end="375:43"><name pos:start="375:13" pos:end="375:27">tcg_gen_xor_i32</name><argument_list pos:start="375:28" pos:end="375:43">(<argument pos:start="375:29" pos:end="375:31"><expr pos:start="375:29" pos:end="375:31"><name pos:start="375:29" pos:end="375:31">tmp</name></expr></argument>, <argument pos:start="375:34" pos:end="375:36"><expr pos:start="375:34" pos:end="375:36"><name pos:start="375:34" pos:end="375:36">tmp</name></expr></argument>, <argument pos:start="375:39" pos:end="375:42"><expr pos:start="375:39" pos:end="375:42"><name pos:start="375:39" pos:end="375:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="377:13" pos:end="379:34"><if pos:start="377:13" pos:end="379:34">if <condition pos:start="377:16" pos:end="377:34">(<expr pos:start="377:17" pos:end="377:33"><operator pos:start="377:17" pos:end="377:17">!</operator><name pos:start="377:18" pos:end="377:33"><name pos:start="377:18" pos:end="377:18">s</name><operator pos:start="377:19" pos:end="377:20">-&gt;</operator><name pos:start="377:21" pos:end="377:33">condexec_mask</name></name></expr>)</condition><block type="pseudo" pos:start="379:17" pos:end="379:34"><block_content pos:start="379:17" pos:end="379:34">

                <expr_stmt pos:start="379:17" pos:end="379:34"><expr pos:start="379:17" pos:end="379:33"><call pos:start="379:17" pos:end="379:33"><name pos:start="379:17" pos:end="379:28">gen_logic_CC</name><argument_list pos:start="379:29" pos:end="379:33">(<argument pos:start="379:30" pos:end="379:32"><expr pos:start="379:30" pos:end="379:32"><name pos:start="379:30" pos:end="379:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <break pos:start="381:13" pos:end="381:18">break;</break>

        <case pos:start="383:9" pos:end="383:17">case <expr pos:start="383:14" pos:end="383:16"><literal type="number" pos:start="383:14" pos:end="383:16">0x2</literal></expr>:</case> <comment type="block" pos:start="383:19" pos:end="383:27">/* lsl */</comment>

            <if_stmt pos:start="385:13" pos:end="395:13"><if pos:start="385:13" pos:end="389:13">if <condition pos:start="385:16" pos:end="385:33">(<expr pos:start="385:17" pos:end="385:32"><name pos:start="385:17" pos:end="385:32"><name pos:start="385:17" pos:end="385:17">s</name><operator pos:start="385:18" pos:end="385:19">-&gt;</operator><name pos:start="385:20" pos:end="385:32">condexec_mask</name></name></expr>)</condition> <block pos:start="385:35" pos:end="389:13">{<block_content pos:start="387:17" pos:end="387:41">

                <expr_stmt pos:start="387:17" pos:end="387:41"><expr pos:start="387:17" pos:end="387:40"><call pos:start="387:17" pos:end="387:40"><name pos:start="387:17" pos:end="387:23">gen_shl</name><argument_list pos:start="387:24" pos:end="387:40">(<argument pos:start="387:25" pos:end="387:28"><expr pos:start="387:25" pos:end="387:28"><name pos:start="387:25" pos:end="387:28">tmp2</name></expr></argument>, <argument pos:start="387:31" pos:end="387:34"><expr pos:start="387:31" pos:end="387:34"><name pos:start="387:31" pos:end="387:34">tmp2</name></expr></argument>, <argument pos:start="387:37" pos:end="387:39"><expr pos:start="387:37" pos:end="387:39"><name pos:start="387:37" pos:end="387:39">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="389:15" pos:end="395:13">else <block pos:start="389:20" pos:end="395:13">{<block_content pos:start="391:17" pos:end="393:35">

                <expr_stmt pos:start="391:17" pos:end="391:60"><expr pos:start="391:17" pos:end="391:59"><call pos:start="391:17" pos:end="391:59"><name pos:start="391:17" pos:end="391:33">gen_helper_shl_cc</name><argument_list pos:start="391:34" pos:end="391:59">(<argument pos:start="391:35" pos:end="391:38"><expr pos:start="391:35" pos:end="391:38"><name pos:start="391:35" pos:end="391:38">tmp2</name></expr></argument>, <argument pos:start="391:41" pos:end="391:47"><expr pos:start="391:41" pos:end="391:47"><name pos:start="391:41" pos:end="391:47">cpu_env</name></expr></argument>, <argument pos:start="391:50" pos:end="391:53"><expr pos:start="391:50" pos:end="391:53"><name pos:start="391:50" pos:end="391:53">tmp2</name></expr></argument>, <argument pos:start="391:56" pos:end="391:58"><expr pos:start="391:56" pos:end="391:58"><name pos:start="391:56" pos:end="391:58">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="393:17" pos:end="393:35"><expr pos:start="393:17" pos:end="393:34"><call pos:start="393:17" pos:end="393:34"><name pos:start="393:17" pos:end="393:28">gen_logic_CC</name><argument_list pos:start="393:29" pos:end="393:34">(<argument pos:start="393:30" pos:end="393:33"><expr pos:start="393:30" pos:end="393:33"><name pos:start="393:30" pos:end="393:33">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="397:13" pos:end="397:18">break;</break>

        <case pos:start="399:9" pos:end="399:17">case <expr pos:start="399:14" pos:end="399:16"><literal type="number" pos:start="399:14" pos:end="399:16">0x3</literal></expr>:</case> <comment type="block" pos:start="399:19" pos:end="399:27">/* lsr */</comment>

            <if_stmt pos:start="401:13" pos:end="411:13"><if pos:start="401:13" pos:end="405:13">if <condition pos:start="401:16" pos:end="401:33">(<expr pos:start="401:17" pos:end="401:32"><name pos:start="401:17" pos:end="401:32"><name pos:start="401:17" pos:end="401:17">s</name><operator pos:start="401:18" pos:end="401:19">-&gt;</operator><name pos:start="401:20" pos:end="401:32">condexec_mask</name></name></expr>)</condition> <block pos:start="401:35" pos:end="405:13">{<block_content pos:start="403:17" pos:end="403:41">

                <expr_stmt pos:start="403:17" pos:end="403:41"><expr pos:start="403:17" pos:end="403:40"><call pos:start="403:17" pos:end="403:40"><name pos:start="403:17" pos:end="403:23">gen_shr</name><argument_list pos:start="403:24" pos:end="403:40">(<argument pos:start="403:25" pos:end="403:28"><expr pos:start="403:25" pos:end="403:28"><name pos:start="403:25" pos:end="403:28">tmp2</name></expr></argument>, <argument pos:start="403:31" pos:end="403:34"><expr pos:start="403:31" pos:end="403:34"><name pos:start="403:31" pos:end="403:34">tmp2</name></expr></argument>, <argument pos:start="403:37" pos:end="403:39"><expr pos:start="403:37" pos:end="403:39"><name pos:start="403:37" pos:end="403:39">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="405:15" pos:end="411:13">else <block pos:start="405:20" pos:end="411:13">{<block_content pos:start="407:17" pos:end="409:35">

                <expr_stmt pos:start="407:17" pos:end="407:60"><expr pos:start="407:17" pos:end="407:59"><call pos:start="407:17" pos:end="407:59"><name pos:start="407:17" pos:end="407:33">gen_helper_shr_cc</name><argument_list pos:start="407:34" pos:end="407:59">(<argument pos:start="407:35" pos:end="407:38"><expr pos:start="407:35" pos:end="407:38"><name pos:start="407:35" pos:end="407:38">tmp2</name></expr></argument>, <argument pos:start="407:41" pos:end="407:47"><expr pos:start="407:41" pos:end="407:47"><name pos:start="407:41" pos:end="407:47">cpu_env</name></expr></argument>, <argument pos:start="407:50" pos:end="407:53"><expr pos:start="407:50" pos:end="407:53"><name pos:start="407:50" pos:end="407:53">tmp2</name></expr></argument>, <argument pos:start="407:56" pos:end="407:58"><expr pos:start="407:56" pos:end="407:58"><name pos:start="407:56" pos:end="407:58">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="409:17" pos:end="409:35"><expr pos:start="409:17" pos:end="409:34"><call pos:start="409:17" pos:end="409:34"><name pos:start="409:17" pos:end="409:28">gen_logic_CC</name><argument_list pos:start="409:29" pos:end="409:34">(<argument pos:start="409:30" pos:end="409:33"><expr pos:start="409:30" pos:end="409:33"><name pos:start="409:30" pos:end="409:33">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="413:13" pos:end="413:18">break;</break>

        <case pos:start="415:9" pos:end="415:17">case <expr pos:start="415:14" pos:end="415:16"><literal type="number" pos:start="415:14" pos:end="415:16">0x4</literal></expr>:</case> <comment type="block" pos:start="415:19" pos:end="415:27">/* asr */</comment>

            <if_stmt pos:start="417:13" pos:end="427:13"><if pos:start="417:13" pos:end="421:13">if <condition pos:start="417:16" pos:end="417:33">(<expr pos:start="417:17" pos:end="417:32"><name pos:start="417:17" pos:end="417:32"><name pos:start="417:17" pos:end="417:17">s</name><operator pos:start="417:18" pos:end="417:19">-&gt;</operator><name pos:start="417:20" pos:end="417:32">condexec_mask</name></name></expr>)</condition> <block pos:start="417:35" pos:end="421:13">{<block_content pos:start="419:17" pos:end="419:41">

                <expr_stmt pos:start="419:17" pos:end="419:41"><expr pos:start="419:17" pos:end="419:40"><call pos:start="419:17" pos:end="419:40"><name pos:start="419:17" pos:end="419:23">gen_sar</name><argument_list pos:start="419:24" pos:end="419:40">(<argument pos:start="419:25" pos:end="419:28"><expr pos:start="419:25" pos:end="419:28"><name pos:start="419:25" pos:end="419:28">tmp2</name></expr></argument>, <argument pos:start="419:31" pos:end="419:34"><expr pos:start="419:31" pos:end="419:34"><name pos:start="419:31" pos:end="419:34">tmp2</name></expr></argument>, <argument pos:start="419:37" pos:end="419:39"><expr pos:start="419:37" pos:end="419:39"><name pos:start="419:37" pos:end="419:39">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="421:15" pos:end="427:13">else <block pos:start="421:20" pos:end="427:13">{<block_content pos:start="423:17" pos:end="425:35">

                <expr_stmt pos:start="423:17" pos:end="423:60"><expr pos:start="423:17" pos:end="423:59"><call pos:start="423:17" pos:end="423:59"><name pos:start="423:17" pos:end="423:33">gen_helper_sar_cc</name><argument_list pos:start="423:34" pos:end="423:59">(<argument pos:start="423:35" pos:end="423:38"><expr pos:start="423:35" pos:end="423:38"><name pos:start="423:35" pos:end="423:38">tmp2</name></expr></argument>, <argument pos:start="423:41" pos:end="423:47"><expr pos:start="423:41" pos:end="423:47"><name pos:start="423:41" pos:end="423:47">cpu_env</name></expr></argument>, <argument pos:start="423:50" pos:end="423:53"><expr pos:start="423:50" pos:end="423:53"><name pos:start="423:50" pos:end="423:53">tmp2</name></expr></argument>, <argument pos:start="423:56" pos:end="423:58"><expr pos:start="423:56" pos:end="423:58"><name pos:start="423:56" pos:end="423:58">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="425:17" pos:end="425:35"><expr pos:start="425:17" pos:end="425:34"><call pos:start="425:17" pos:end="425:34"><name pos:start="425:17" pos:end="425:28">gen_logic_CC</name><argument_list pos:start="425:29" pos:end="425:34">(<argument pos:start="425:30" pos:end="425:33"><expr pos:start="425:30" pos:end="425:33"><name pos:start="425:30" pos:end="425:33">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="429:13" pos:end="429:18">break;</break>

        <case pos:start="431:9" pos:end="431:17">case <expr pos:start="431:14" pos:end="431:16"><literal type="number" pos:start="431:14" pos:end="431:16">0x5</literal></expr>:</case> <comment type="block" pos:start="431:19" pos:end="431:27">/* adc */</comment>

            <if_stmt pos:start="433:13" pos:end="441:13"><if pos:start="433:13" pos:end="437:13">if <condition pos:start="433:16" pos:end="433:33">(<expr pos:start="433:17" pos:end="433:32"><name pos:start="433:17" pos:end="433:32"><name pos:start="433:17" pos:end="433:17">s</name><operator pos:start="433:18" pos:end="433:19">-&gt;</operator><name pos:start="433:20" pos:end="433:32">condexec_mask</name></name></expr>)</condition> <block pos:start="433:35" pos:end="437:13">{<block_content pos:start="435:17" pos:end="435:35">

                <expr_stmt pos:start="435:17" pos:end="435:35"><expr pos:start="435:17" pos:end="435:34"><call pos:start="435:17" pos:end="435:34"><name pos:start="435:17" pos:end="435:23">gen_adc</name><argument_list pos:start="435:24" pos:end="435:34">(<argument pos:start="435:25" pos:end="435:27"><expr pos:start="435:25" pos:end="435:27"><name pos:start="435:25" pos:end="435:27">tmp</name></expr></argument>, <argument pos:start="435:30" pos:end="435:33"><expr pos:start="435:30" pos:end="435:33"><name pos:start="435:30" pos:end="435:33">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="437:15" pos:end="441:13">else <block pos:start="437:20" pos:end="441:13">{<block_content pos:start="439:17" pos:end="439:43">

                <expr_stmt pos:start="439:17" pos:end="439:43"><expr pos:start="439:17" pos:end="439:42"><call pos:start="439:17" pos:end="439:42"><name pos:start="439:17" pos:end="439:26">gen_adc_CC</name><argument_list pos:start="439:27" pos:end="439:42">(<argument pos:start="439:28" pos:end="439:30"><expr pos:start="439:28" pos:end="439:30"><name pos:start="439:28" pos:end="439:30">tmp</name></expr></argument>, <argument pos:start="439:33" pos:end="439:35"><expr pos:start="439:33" pos:end="439:35"><name pos:start="439:33" pos:end="439:35">tmp</name></expr></argument>, <argument pos:start="439:38" pos:end="439:41"><expr pos:start="439:38" pos:end="439:41"><name pos:start="439:38" pos:end="439:41">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="443:13" pos:end="443:18">break;</break>

        <case pos:start="445:9" pos:end="445:17">case <expr pos:start="445:14" pos:end="445:16"><literal type="number" pos:start="445:14" pos:end="445:16">0x6</literal></expr>:</case> <comment type="block" pos:start="445:19" pos:end="445:27">/* sbc */</comment>

            <if_stmt pos:start="447:13" pos:end="455:13"><if pos:start="447:13" pos:end="451:13">if <condition pos:start="447:16" pos:end="447:33">(<expr pos:start="447:17" pos:end="447:32"><name pos:start="447:17" pos:end="447:32"><name pos:start="447:17" pos:end="447:17">s</name><operator pos:start="447:18" pos:end="447:19">-&gt;</operator><name pos:start="447:20" pos:end="447:32">condexec_mask</name></name></expr>)</condition> <block pos:start="447:35" pos:end="451:13">{<block_content pos:start="449:17" pos:end="449:46">

                <expr_stmt pos:start="449:17" pos:end="449:46"><expr pos:start="449:17" pos:end="449:45"><call pos:start="449:17" pos:end="449:45"><name pos:start="449:17" pos:end="449:29">gen_sub_carry</name><argument_list pos:start="449:30" pos:end="449:45">(<argument pos:start="449:31" pos:end="449:33"><expr pos:start="449:31" pos:end="449:33"><name pos:start="449:31" pos:end="449:33">tmp</name></expr></argument>, <argument pos:start="449:36" pos:end="449:38"><expr pos:start="449:36" pos:end="449:38"><name pos:start="449:36" pos:end="449:38">tmp</name></expr></argument>, <argument pos:start="449:41" pos:end="449:44"><expr pos:start="449:41" pos:end="449:44"><name pos:start="449:41" pos:end="449:44">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="451:15" pos:end="455:13">else <block pos:start="451:20" pos:end="455:13">{<block_content pos:start="453:17" pos:end="453:43">

                <expr_stmt pos:start="453:17" pos:end="453:43"><expr pos:start="453:17" pos:end="453:42"><call pos:start="453:17" pos:end="453:42"><name pos:start="453:17" pos:end="453:26">gen_sbc_CC</name><argument_list pos:start="453:27" pos:end="453:42">(<argument pos:start="453:28" pos:end="453:30"><expr pos:start="453:28" pos:end="453:30"><name pos:start="453:28" pos:end="453:30">tmp</name></expr></argument>, <argument pos:start="453:33" pos:end="453:35"><expr pos:start="453:33" pos:end="453:35"><name pos:start="453:33" pos:end="453:35">tmp</name></expr></argument>, <argument pos:start="453:38" pos:end="453:41"><expr pos:start="453:38" pos:end="453:41"><name pos:start="453:38" pos:end="453:41">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="457:13" pos:end="457:18">break;</break>

        <case pos:start="459:9" pos:end="459:17">case <expr pos:start="459:14" pos:end="459:16"><literal type="number" pos:start="459:14" pos:end="459:16">0x7</literal></expr>:</case> <comment type="block" pos:start="459:19" pos:end="459:27">/* ror */</comment>

            <if_stmt pos:start="461:13" pos:end="473:13"><if pos:start="461:13" pos:end="467:13">if <condition pos:start="461:16" pos:end="461:33">(<expr pos:start="461:17" pos:end="461:32"><name pos:start="461:17" pos:end="461:32"><name pos:start="461:17" pos:end="461:17">s</name><operator pos:start="461:18" pos:end="461:19">-&gt;</operator><name pos:start="461:20" pos:end="461:32">condexec_mask</name></name></expr>)</condition> <block pos:start="461:35" pos:end="467:13">{<block_content pos:start="463:17" pos:end="465:50">

                <expr_stmt pos:start="463:17" pos:end="463:49"><expr pos:start="463:17" pos:end="463:48"><call pos:start="463:17" pos:end="463:48"><name pos:start="463:17" pos:end="463:32">tcg_gen_andi_i32</name><argument_list pos:start="463:33" pos:end="463:48">(<argument pos:start="463:34" pos:end="463:36"><expr pos:start="463:34" pos:end="463:36"><name pos:start="463:34" pos:end="463:36">tmp</name></expr></argument>, <argument pos:start="463:39" pos:end="463:41"><expr pos:start="463:39" pos:end="463:41"><name pos:start="463:39" pos:end="463:41">tmp</name></expr></argument>, <argument pos:start="463:44" pos:end="463:47"><expr pos:start="463:44" pos:end="463:47"><literal type="number" pos:start="463:44" pos:end="463:47">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="465:17" pos:end="465:50"><expr pos:start="465:17" pos:end="465:49"><call pos:start="465:17" pos:end="465:49"><name pos:start="465:17" pos:end="465:32">tcg_gen_rotr_i32</name><argument_list pos:start="465:33" pos:end="465:49">(<argument pos:start="465:34" pos:end="465:37"><expr pos:start="465:34" pos:end="465:37"><name pos:start="465:34" pos:end="465:37">tmp2</name></expr></argument>, <argument pos:start="465:40" pos:end="465:43"><expr pos:start="465:40" pos:end="465:43"><name pos:start="465:40" pos:end="465:43">tmp2</name></expr></argument>, <argument pos:start="465:46" pos:end="465:48"><expr pos:start="465:46" pos:end="465:48"><name pos:start="465:46" pos:end="465:48">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="467:15" pos:end="473:13">else <block pos:start="467:20" pos:end="473:13">{<block_content pos:start="469:17" pos:end="471:35">

                <expr_stmt pos:start="469:17" pos:end="469:60"><expr pos:start="469:17" pos:end="469:59"><call pos:start="469:17" pos:end="469:59"><name pos:start="469:17" pos:end="469:33">gen_helper_ror_cc</name><argument_list pos:start="469:34" pos:end="469:59">(<argument pos:start="469:35" pos:end="469:38"><expr pos:start="469:35" pos:end="469:38"><name pos:start="469:35" pos:end="469:38">tmp2</name></expr></argument>, <argument pos:start="469:41" pos:end="469:47"><expr pos:start="469:41" pos:end="469:47"><name pos:start="469:41" pos:end="469:47">cpu_env</name></expr></argument>, <argument pos:start="469:50" pos:end="469:53"><expr pos:start="469:50" pos:end="469:53"><name pos:start="469:50" pos:end="469:53">tmp2</name></expr></argument>, <argument pos:start="469:56" pos:end="469:58"><expr pos:start="469:56" pos:end="469:58"><name pos:start="469:56" pos:end="469:58">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="471:17" pos:end="471:35"><expr pos:start="471:17" pos:end="471:34"><call pos:start="471:17" pos:end="471:34"><name pos:start="471:17" pos:end="471:28">gen_logic_CC</name><argument_list pos:start="471:29" pos:end="471:34">(<argument pos:start="471:30" pos:end="471:33"><expr pos:start="471:30" pos:end="471:33"><name pos:start="471:30" pos:end="471:33">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="475:13" pos:end="475:18">break;</break>

        <case pos:start="477:9" pos:end="477:17">case <expr pos:start="477:14" pos:end="477:16"><literal type="number" pos:start="477:14" pos:end="477:16">0x8</literal></expr>:</case> <comment type="block" pos:start="477:19" pos:end="477:27">/* tst */</comment>

            <expr_stmt pos:start="479:13" pos:end="479:44"><expr pos:start="479:13" pos:end="479:43"><call pos:start="479:13" pos:end="479:43"><name pos:start="479:13" pos:end="479:27">tcg_gen_and_i32</name><argument_list pos:start="479:28" pos:end="479:43">(<argument pos:start="479:29" pos:end="479:31"><expr pos:start="479:29" pos:end="479:31"><name pos:start="479:29" pos:end="479:31">tmp</name></expr></argument>, <argument pos:start="479:34" pos:end="479:36"><expr pos:start="479:34" pos:end="479:36"><name pos:start="479:34" pos:end="479:36">tmp</name></expr></argument>, <argument pos:start="479:39" pos:end="479:42"><expr pos:start="479:39" pos:end="479:42"><name pos:start="479:39" pos:end="479:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="481:13" pos:end="481:30"><expr pos:start="481:13" pos:end="481:29"><call pos:start="481:13" pos:end="481:29"><name pos:start="481:13" pos:end="481:24">gen_logic_CC</name><argument_list pos:start="481:25" pos:end="481:29">(<argument pos:start="481:26" pos:end="481:28"><expr pos:start="481:26" pos:end="481:28"><name pos:start="481:26" pos:end="481:28">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="483:13" pos:end="483:20"><expr pos:start="483:13" pos:end="483:19"><name pos:start="483:13" pos:end="483:14">rd</name> <operator pos:start="483:16" pos:end="483:16">=</operator> <literal type="number" pos:start="483:18" pos:end="483:19">16</literal></expr>;</expr_stmt>

            <break pos:start="485:13" pos:end="485:18">break;</break>

        <case pos:start="487:9" pos:end="487:17">case <expr pos:start="487:14" pos:end="487:16"><literal type="number" pos:start="487:14" pos:end="487:16">0x9</literal></expr>:</case> <comment type="block" pos:start="487:19" pos:end="487:27">/* neg */</comment>

            <if_stmt pos:start="489:13" pos:end="495:43"><if pos:start="489:13" pos:end="491:43">if <condition pos:start="489:16" pos:end="489:33">(<expr pos:start="489:17" pos:end="489:32"><name pos:start="489:17" pos:end="489:32"><name pos:start="489:17" pos:end="489:17">s</name><operator pos:start="489:18" pos:end="489:19">-&gt;</operator><name pos:start="489:20" pos:end="489:32">condexec_mask</name></name></expr>)</condition><block type="pseudo" pos:start="491:17" pos:end="491:43"><block_content pos:start="491:17" pos:end="491:43">

                <expr_stmt pos:start="491:17" pos:end="491:43"><expr pos:start="491:17" pos:end="491:42"><call pos:start="491:17" pos:end="491:42"><name pos:start="491:17" pos:end="491:31">tcg_gen_neg_i32</name><argument_list pos:start="491:32" pos:end="491:42">(<argument pos:start="491:33" pos:end="491:35"><expr pos:start="491:33" pos:end="491:35"><name pos:start="491:33" pos:end="491:35">tmp</name></expr></argument>, <argument pos:start="491:38" pos:end="491:41"><expr pos:start="491:38" pos:end="491:41"><name pos:start="491:38" pos:end="491:41">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="493:13" pos:end="495:43">else<block type="pseudo" pos:start="495:17" pos:end="495:43"><block_content pos:start="495:17" pos:end="495:43">

                <expr_stmt pos:start="495:17" pos:end="495:43"><expr pos:start="495:17" pos:end="495:42"><call pos:start="495:17" pos:end="495:42"><name pos:start="495:17" pos:end="495:26">gen_sub_CC</name><argument_list pos:start="495:27" pos:end="495:42">(<argument pos:start="495:28" pos:end="495:30"><expr pos:start="495:28" pos:end="495:30"><name pos:start="495:28" pos:end="495:30">tmp</name></expr></argument>, <argument pos:start="495:33" pos:end="495:35"><expr pos:start="495:33" pos:end="495:35"><name pos:start="495:33" pos:end="495:35">tmp</name></expr></argument>, <argument pos:start="495:38" pos:end="495:41"><expr pos:start="495:38" pos:end="495:41"><name pos:start="495:38" pos:end="495:41">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <break pos:start="497:13" pos:end="497:18">break;</break>

        <case pos:start="499:9" pos:end="499:17">case <expr pos:start="499:14" pos:end="499:16"><literal type="number" pos:start="499:14" pos:end="499:16">0xa</literal></expr>:</case> <comment type="block" pos:start="499:19" pos:end="499:27">/* cmp */</comment>

            <expr_stmt pos:start="501:13" pos:end="501:39"><expr pos:start="501:13" pos:end="501:38"><call pos:start="501:13" pos:end="501:38"><name pos:start="501:13" pos:end="501:22">gen_sub_CC</name><argument_list pos:start="501:23" pos:end="501:38">(<argument pos:start="501:24" pos:end="501:26"><expr pos:start="501:24" pos:end="501:26"><name pos:start="501:24" pos:end="501:26">tmp</name></expr></argument>, <argument pos:start="501:29" pos:end="501:31"><expr pos:start="501:29" pos:end="501:31"><name pos:start="501:29" pos:end="501:31">tmp</name></expr></argument>, <argument pos:start="501:34" pos:end="501:37"><expr pos:start="501:34" pos:end="501:37"><name pos:start="501:34" pos:end="501:37">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="503:13" pos:end="503:20"><expr pos:start="503:13" pos:end="503:19"><name pos:start="503:13" pos:end="503:14">rd</name> <operator pos:start="503:16" pos:end="503:16">=</operator> <literal type="number" pos:start="503:18" pos:end="503:19">16</literal></expr>;</expr_stmt>

            <break pos:start="505:13" pos:end="505:18">break;</break>

        <case pos:start="507:9" pos:end="507:17">case <expr pos:start="507:14" pos:end="507:16"><literal type="number" pos:start="507:14" pos:end="507:16">0xb</literal></expr>:</case> <comment type="block" pos:start="507:19" pos:end="507:27">/* cmn */</comment>

            <expr_stmt pos:start="509:13" pos:end="509:39"><expr pos:start="509:13" pos:end="509:38"><call pos:start="509:13" pos:end="509:38"><name pos:start="509:13" pos:end="509:22">gen_add_CC</name><argument_list pos:start="509:23" pos:end="509:38">(<argument pos:start="509:24" pos:end="509:26"><expr pos:start="509:24" pos:end="509:26"><name pos:start="509:24" pos:end="509:26">tmp</name></expr></argument>, <argument pos:start="509:29" pos:end="509:31"><expr pos:start="509:29" pos:end="509:31"><name pos:start="509:29" pos:end="509:31">tmp</name></expr></argument>, <argument pos:start="509:34" pos:end="509:37"><expr pos:start="509:34" pos:end="509:37"><name pos:start="509:34" pos:end="509:37">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="511:13" pos:end="511:20"><expr pos:start="511:13" pos:end="511:19"><name pos:start="511:13" pos:end="511:14">rd</name> <operator pos:start="511:16" pos:end="511:16">=</operator> <literal type="number" pos:start="511:18" pos:end="511:19">16</literal></expr>;</expr_stmt>

            <break pos:start="513:13" pos:end="513:18">break;</break>

        <case pos:start="515:9" pos:end="515:17">case <expr pos:start="515:14" pos:end="515:16"><literal type="number" pos:start="515:14" pos:end="515:16">0xc</literal></expr>:</case> <comment type="block" pos:start="515:19" pos:end="515:27">/* orr */</comment>

            <expr_stmt pos:start="517:13" pos:end="517:43"><expr pos:start="517:13" pos:end="517:42"><call pos:start="517:13" pos:end="517:42"><name pos:start="517:13" pos:end="517:26">tcg_gen_or_i32</name><argument_list pos:start="517:27" pos:end="517:42">(<argument pos:start="517:28" pos:end="517:30"><expr pos:start="517:28" pos:end="517:30"><name pos:start="517:28" pos:end="517:30">tmp</name></expr></argument>, <argument pos:start="517:33" pos:end="517:35"><expr pos:start="517:33" pos:end="517:35"><name pos:start="517:33" pos:end="517:35">tmp</name></expr></argument>, <argument pos:start="517:38" pos:end="517:41"><expr pos:start="517:38" pos:end="517:41"><name pos:start="517:38" pos:end="517:41">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="519:13" pos:end="521:34"><if pos:start="519:13" pos:end="521:34">if <condition pos:start="519:16" pos:end="519:34">(<expr pos:start="519:17" pos:end="519:33"><operator pos:start="519:17" pos:end="519:17">!</operator><name pos:start="519:18" pos:end="519:33"><name pos:start="519:18" pos:end="519:18">s</name><operator pos:start="519:19" pos:end="519:20">-&gt;</operator><name pos:start="519:21" pos:end="519:33">condexec_mask</name></name></expr>)</condition><block type="pseudo" pos:start="521:17" pos:end="521:34"><block_content pos:start="521:17" pos:end="521:34">

                <expr_stmt pos:start="521:17" pos:end="521:34"><expr pos:start="521:17" pos:end="521:33"><call pos:start="521:17" pos:end="521:33"><name pos:start="521:17" pos:end="521:28">gen_logic_CC</name><argument_list pos:start="521:29" pos:end="521:33">(<argument pos:start="521:30" pos:end="521:32"><expr pos:start="521:30" pos:end="521:32"><name pos:start="521:30" pos:end="521:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <break pos:start="523:13" pos:end="523:18">break;</break>

        <case pos:start="525:9" pos:end="525:17">case <expr pos:start="525:14" pos:end="525:16"><literal type="number" pos:start="525:14" pos:end="525:16">0xd</literal></expr>:</case> <comment type="block" pos:start="525:19" pos:end="525:27">/* mul */</comment>

            <expr_stmt pos:start="527:13" pos:end="527:44"><expr pos:start="527:13" pos:end="527:43"><call pos:start="527:13" pos:end="527:43"><name pos:start="527:13" pos:end="527:27">tcg_gen_mul_i32</name><argument_list pos:start="527:28" pos:end="527:43">(<argument pos:start="527:29" pos:end="527:31"><expr pos:start="527:29" pos:end="527:31"><name pos:start="527:29" pos:end="527:31">tmp</name></expr></argument>, <argument pos:start="527:34" pos:end="527:36"><expr pos:start="527:34" pos:end="527:36"><name pos:start="527:34" pos:end="527:36">tmp</name></expr></argument>, <argument pos:start="527:39" pos:end="527:42"><expr pos:start="527:39" pos:end="527:42"><name pos:start="527:39" pos:end="527:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="529:13" pos:end="531:34"><if pos:start="529:13" pos:end="531:34">if <condition pos:start="529:16" pos:end="529:34">(<expr pos:start="529:17" pos:end="529:33"><operator pos:start="529:17" pos:end="529:17">!</operator><name pos:start="529:18" pos:end="529:33"><name pos:start="529:18" pos:end="529:18">s</name><operator pos:start="529:19" pos:end="529:20">-&gt;</operator><name pos:start="529:21" pos:end="529:33">condexec_mask</name></name></expr>)</condition><block type="pseudo" pos:start="531:17" pos:end="531:34"><block_content pos:start="531:17" pos:end="531:34">

                <expr_stmt pos:start="531:17" pos:end="531:34"><expr pos:start="531:17" pos:end="531:33"><call pos:start="531:17" pos:end="531:33"><name pos:start="531:17" pos:end="531:28">gen_logic_CC</name><argument_list pos:start="531:29" pos:end="531:33">(<argument pos:start="531:30" pos:end="531:32"><expr pos:start="531:30" pos:end="531:32"><name pos:start="531:30" pos:end="531:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <break pos:start="533:13" pos:end="533:18">break;</break>

        <case pos:start="535:9" pos:end="535:17">case <expr pos:start="535:14" pos:end="535:16"><literal type="number" pos:start="535:14" pos:end="535:16">0xe</literal></expr>:</case> <comment type="block" pos:start="535:19" pos:end="535:27">/* bic */</comment>

            <expr_stmt pos:start="537:13" pos:end="537:45"><expr pos:start="537:13" pos:end="537:44"><call pos:start="537:13" pos:end="537:44"><name pos:start="537:13" pos:end="537:28">tcg_gen_andc_i32</name><argument_list pos:start="537:29" pos:end="537:44">(<argument pos:start="537:30" pos:end="537:32"><expr pos:start="537:30" pos:end="537:32"><name pos:start="537:30" pos:end="537:32">tmp</name></expr></argument>, <argument pos:start="537:35" pos:end="537:37"><expr pos:start="537:35" pos:end="537:37"><name pos:start="537:35" pos:end="537:37">tmp</name></expr></argument>, <argument pos:start="537:40" pos:end="537:43"><expr pos:start="537:40" pos:end="537:43"><name pos:start="537:40" pos:end="537:43">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="539:13" pos:end="541:34"><if pos:start="539:13" pos:end="541:34">if <condition pos:start="539:16" pos:end="539:34">(<expr pos:start="539:17" pos:end="539:33"><operator pos:start="539:17" pos:end="539:17">!</operator><name pos:start="539:18" pos:end="539:33"><name pos:start="539:18" pos:end="539:18">s</name><operator pos:start="539:19" pos:end="539:20">-&gt;</operator><name pos:start="539:21" pos:end="539:33">condexec_mask</name></name></expr>)</condition><block type="pseudo" pos:start="541:17" pos:end="541:34"><block_content pos:start="541:17" pos:end="541:34">

                <expr_stmt pos:start="541:17" pos:end="541:34"><expr pos:start="541:17" pos:end="541:33"><call pos:start="541:17" pos:end="541:33"><name pos:start="541:17" pos:end="541:28">gen_logic_CC</name><argument_list pos:start="541:29" pos:end="541:33">(<argument pos:start="541:30" pos:end="541:32"><expr pos:start="541:30" pos:end="541:32"><name pos:start="541:30" pos:end="541:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <break pos:start="543:13" pos:end="543:18">break;</break>

        <case pos:start="545:9" pos:end="545:17">case <expr pos:start="545:14" pos:end="545:16"><literal type="number" pos:start="545:14" pos:end="545:16">0xf</literal></expr>:</case> <comment type="block" pos:start="545:19" pos:end="545:27">/* mvn */</comment>

            <expr_stmt pos:start="547:13" pos:end="547:40"><expr pos:start="547:13" pos:end="547:39"><call pos:start="547:13" pos:end="547:39"><name pos:start="547:13" pos:end="547:27">tcg_gen_not_i32</name><argument_list pos:start="547:28" pos:end="547:39">(<argument pos:start="547:29" pos:end="547:32"><expr pos:start="547:29" pos:end="547:32"><name pos:start="547:29" pos:end="547:32">tmp2</name></expr></argument>, <argument pos:start="547:35" pos:end="547:38"><expr pos:start="547:35" pos:end="547:38"><name pos:start="547:35" pos:end="547:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="549:13" pos:end="551:35"><if pos:start="549:13" pos:end="551:35">if <condition pos:start="549:16" pos:end="549:34">(<expr pos:start="549:17" pos:end="549:33"><operator pos:start="549:17" pos:end="549:17">!</operator><name pos:start="549:18" pos:end="549:33"><name pos:start="549:18" pos:end="549:18">s</name><operator pos:start="549:19" pos:end="549:20">-&gt;</operator><name pos:start="549:21" pos:end="549:33">condexec_mask</name></name></expr>)</condition><block type="pseudo" pos:start="551:17" pos:end="551:35"><block_content pos:start="551:17" pos:end="551:35">

                <expr_stmt pos:start="551:17" pos:end="551:35"><expr pos:start="551:17" pos:end="551:34"><call pos:start="551:17" pos:end="551:34"><name pos:start="551:17" pos:end="551:28">gen_logic_CC</name><argument_list pos:start="551:29" pos:end="551:34">(<argument pos:start="551:30" pos:end="551:33"><expr pos:start="551:30" pos:end="551:33"><name pos:start="551:30" pos:end="551:33">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="553:13" pos:end="553:20"><expr pos:start="553:13" pos:end="553:19"><name pos:start="553:13" pos:end="553:15">val</name> <operator pos:start="553:17" pos:end="553:17">=</operator> <literal type="number" pos:start="553:19" pos:end="553:19">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="555:13" pos:end="555:20"><expr pos:start="555:13" pos:end="555:19"><name pos:start="555:13" pos:end="555:14">rm</name> <operator pos:start="555:16" pos:end="555:16">=</operator> <name pos:start="555:18" pos:end="555:19">rd</name></expr>;</expr_stmt>

            <break pos:start="557:13" pos:end="557:18">break;</break>

        </block_content>}</block></switch>

        <if_stmt pos:start="561:9" pos:end="585:9"><if pos:start="561:9" pos:end="579:9">if <condition pos:start="561:12" pos:end="561:21">(<expr pos:start="561:13" pos:end="561:20"><name pos:start="561:13" pos:end="561:14">rd</name> <operator pos:start="561:16" pos:end="561:17">!=</operator> <literal type="number" pos:start="561:19" pos:end="561:20">16</literal></expr>)</condition> <block pos:start="561:23" pos:end="579:9">{<block_content pos:start="563:13" pos:end="577:13">

            <if_stmt pos:start="563:13" pos:end="577:13"><if pos:start="563:13" pos:end="571:13">if <condition pos:start="563:16" pos:end="563:20">(<expr pos:start="563:17" pos:end="563:19"><name pos:start="563:17" pos:end="563:19">val</name></expr>)</condition> <block pos:start="563:22" pos:end="571:13">{<block_content pos:start="565:17" pos:end="569:43">

                <expr_stmt pos:start="565:17" pos:end="565:39"><expr pos:start="565:17" pos:end="565:38"><call pos:start="565:17" pos:end="565:38"><name pos:start="565:17" pos:end="565:25">store_reg</name><argument_list pos:start="565:26" pos:end="565:38">(<argument pos:start="565:27" pos:end="565:27"><expr pos:start="565:27" pos:end="565:27"><name pos:start="565:27" pos:end="565:27">s</name></expr></argument>, <argument pos:start="565:30" pos:end="565:31"><expr pos:start="565:30" pos:end="565:31"><name pos:start="565:30" pos:end="565:31">rm</name></expr></argument>, <argument pos:start="565:34" pos:end="565:37"><expr pos:start="565:34" pos:end="565:37"><name pos:start="565:34" pos:end="565:37">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="567:17" pos:end="569:43"><if pos:start="567:17" pos:end="569:43">if <condition pos:start="567:20" pos:end="567:30">(<expr pos:start="567:21" pos:end="567:29"><name pos:start="567:21" pos:end="567:22">op</name> <operator pos:start="567:24" pos:end="567:25">!=</operator> <literal type="number" pos:start="567:27" pos:end="567:29">0xf</literal></expr>)</condition><block type="pseudo" pos:start="569:21" pos:end="569:43"><block_content pos:start="569:21" pos:end="569:43">

                    <expr_stmt pos:start="569:21" pos:end="569:43"><expr pos:start="569:21" pos:end="569:42"><call pos:start="569:21" pos:end="569:42"><name pos:start="569:21" pos:end="569:37">tcg_temp_free_i32</name><argument_list pos:start="569:38" pos:end="569:42">(<argument pos:start="569:39" pos:end="569:41"><expr pos:start="569:39" pos:end="569:41"><name pos:start="569:39" pos:end="569:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="571:15" pos:end="577:13">else <block pos:start="571:20" pos:end="577:13">{<block_content pos:start="573:17" pos:end="575:40">

                <expr_stmt pos:start="573:17" pos:end="573:38"><expr pos:start="573:17" pos:end="573:37"><call pos:start="573:17" pos:end="573:37"><name pos:start="573:17" pos:end="573:25">store_reg</name><argument_list pos:start="573:26" pos:end="573:37">(<argument pos:start="573:27" pos:end="573:27"><expr pos:start="573:27" pos:end="573:27"><name pos:start="573:27" pos:end="573:27">s</name></expr></argument>, <argument pos:start="573:30" pos:end="573:31"><expr pos:start="573:30" pos:end="573:31"><name pos:start="573:30" pos:end="573:31">rd</name></expr></argument>, <argument pos:start="573:34" pos:end="573:36"><expr pos:start="573:34" pos:end="573:36"><name pos:start="573:34" pos:end="573:36">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="575:17" pos:end="575:40"><expr pos:start="575:17" pos:end="575:39"><call pos:start="575:17" pos:end="575:39"><name pos:start="575:17" pos:end="575:33">tcg_temp_free_i32</name><argument_list pos:start="575:34" pos:end="575:39">(<argument pos:start="575:35" pos:end="575:38"><expr pos:start="575:35" pos:end="575:38"><name pos:start="575:35" pos:end="575:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="579:11" pos:end="585:9">else <block pos:start="579:16" pos:end="585:9">{<block_content pos:start="581:13" pos:end="583:36">

            <expr_stmt pos:start="581:13" pos:end="581:35"><expr pos:start="581:13" pos:end="581:34"><call pos:start="581:13" pos:end="581:34"><name pos:start="581:13" pos:end="581:29">tcg_temp_free_i32</name><argument_list pos:start="581:30" pos:end="581:34">(<argument pos:start="581:31" pos:end="581:33"><expr pos:start="581:31" pos:end="581:33"><name pos:start="581:31" pos:end="581:33">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="583:13" pos:end="583:36"><expr pos:start="583:13" pos:end="583:35"><call pos:start="583:13" pos:end="583:35"><name pos:start="583:13" pos:end="583:29">tcg_temp_free_i32</name><argument_list pos:start="583:30" pos:end="583:35">(<argument pos:start="583:31" pos:end="583:34"><expr pos:start="583:31" pos:end="583:34"><name pos:start="583:31" pos:end="583:34">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="587:9" pos:end="587:14">break;</break>



    <case pos:start="591:5" pos:end="591:11">case <expr pos:start="591:10" pos:end="591:10"><literal type="number" pos:start="591:10" pos:end="591:10">5</literal></expr>:</case>

        <comment type="block" pos:start="593:9" pos:end="593:42">/* load/store register offset.  */</comment>

        <expr_stmt pos:start="595:9" pos:end="595:22"><expr pos:start="595:9" pos:end="595:21"><name pos:start="595:9" pos:end="595:10">rd</name> <operator pos:start="595:12" pos:end="595:12">=</operator> <name pos:start="595:14" pos:end="595:17">insn</name> <operator pos:start="595:19" pos:end="595:19">&amp;</operator> <literal type="number" pos:start="595:21" pos:end="595:21">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="597:9" pos:end="597:29"><expr pos:start="597:9" pos:end="597:28"><name pos:start="597:9" pos:end="597:10">rn</name> <operator pos:start="597:12" pos:end="597:12">=</operator> <operator pos:start="597:14" pos:end="597:14">(</operator><name pos:start="597:15" pos:end="597:18">insn</name> <operator pos:start="597:20" pos:end="597:21">&gt;&gt;</operator> <literal type="number" pos:start="597:23" pos:end="597:23">3</literal><operator pos:start="597:24" pos:end="597:24">)</operator> <operator pos:start="597:26" pos:end="597:26">&amp;</operator> <literal type="number" pos:start="597:28" pos:end="597:28">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="599:9" pos:end="599:29"><expr pos:start="599:9" pos:end="599:28"><name pos:start="599:9" pos:end="599:10">rm</name> <operator pos:start="599:12" pos:end="599:12">=</operator> <operator pos:start="599:14" pos:end="599:14">(</operator><name pos:start="599:15" pos:end="599:18">insn</name> <operator pos:start="599:20" pos:end="599:21">&gt;&gt;</operator> <literal type="number" pos:start="599:23" pos:end="599:23">6</literal><operator pos:start="599:24" pos:end="599:24">)</operator> <operator pos:start="599:26" pos:end="599:26">&amp;</operator> <literal type="number" pos:start="599:28" pos:end="599:28">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="601:9" pos:end="601:29"><expr pos:start="601:9" pos:end="601:28"><name pos:start="601:9" pos:end="601:10">op</name> <operator pos:start="601:12" pos:end="601:12">=</operator> <operator pos:start="601:14" pos:end="601:14">(</operator><name pos:start="601:15" pos:end="601:18">insn</name> <operator pos:start="601:20" pos:end="601:21">&gt;&gt;</operator> <literal type="number" pos:start="601:23" pos:end="601:23">9</literal><operator pos:start="601:24" pos:end="601:24">)</operator> <operator pos:start="601:26" pos:end="601:26">&amp;</operator> <literal type="number" pos:start="601:28" pos:end="601:28">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="603:9" pos:end="603:31"><expr pos:start="603:9" pos:end="603:30"><name pos:start="603:9" pos:end="603:12">addr</name> <operator pos:start="603:14" pos:end="603:14">=</operator> <call pos:start="603:16" pos:end="603:30"><name pos:start="603:16" pos:end="603:23">load_reg</name><argument_list pos:start="603:24" pos:end="603:30">(<argument pos:start="603:25" pos:end="603:25"><expr pos:start="603:25" pos:end="603:25"><name pos:start="603:25" pos:end="603:25">s</name></expr></argument>, <argument pos:start="603:28" pos:end="603:29"><expr pos:start="603:28" pos:end="603:29"><name pos:start="603:28" pos:end="603:29">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="605:9" pos:end="605:30"><expr pos:start="605:9" pos:end="605:29"><name pos:start="605:9" pos:end="605:11">tmp</name> <operator pos:start="605:13" pos:end="605:13">=</operator> <call pos:start="605:15" pos:end="605:29"><name pos:start="605:15" pos:end="605:22">load_reg</name><argument_list pos:start="605:23" pos:end="605:29">(<argument pos:start="605:24" pos:end="605:24"><expr pos:start="605:24" pos:end="605:24"><name pos:start="605:24" pos:end="605:24">s</name></expr></argument>, <argument pos:start="605:27" pos:end="605:28"><expr pos:start="605:27" pos:end="605:28"><name pos:start="605:27" pos:end="605:28">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="607:9" pos:end="607:41"><expr pos:start="607:9" pos:end="607:40"><call pos:start="607:9" pos:end="607:40"><name pos:start="607:9" pos:end="607:23">tcg_gen_add_i32</name><argument_list pos:start="607:24" pos:end="607:40">(<argument pos:start="607:25" pos:end="607:28"><expr pos:start="607:25" pos:end="607:28"><name pos:start="607:25" pos:end="607:28">addr</name></expr></argument>, <argument pos:start="607:31" pos:end="607:34"><expr pos:start="607:31" pos:end="607:34"><name pos:start="607:31" pos:end="607:34">addr</name></expr></argument>, <argument pos:start="607:37" pos:end="607:39"><expr pos:start="607:37" pos:end="607:39"><name pos:start="607:37" pos:end="607:39">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="609:9" pos:end="609:31"><expr pos:start="609:9" pos:end="609:30"><call pos:start="609:9" pos:end="609:30"><name pos:start="609:9" pos:end="609:25">tcg_temp_free_i32</name><argument_list pos:start="609:26" pos:end="609:30">(<argument pos:start="609:27" pos:end="609:29"><expr pos:start="609:27" pos:end="609:29"><name pos:start="609:27" pos:end="609:29">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="613:9" pos:end="621:9"><if pos:start="613:9" pos:end="617:9">if <condition pos:start="613:12" pos:end="613:19">(<expr pos:start="613:13" pos:end="613:18"><name pos:start="613:13" pos:end="613:14">op</name> <operator pos:start="613:16" pos:end="613:16">&lt;</operator> <literal type="number" pos:start="613:18" pos:end="613:18">3</literal></expr>)</condition> <block pos:start="613:21" pos:end="617:9">{<block_content pos:start="615:13" pos:end="615:34"> <comment type="block" pos:start="613:23" pos:end="613:33">/* store */</comment>

            <expr_stmt pos:start="615:13" pos:end="615:34"><expr pos:start="615:13" pos:end="615:33"><name pos:start="615:13" pos:end="615:15">tmp</name> <operator pos:start="615:17" pos:end="615:17">=</operator> <call pos:start="615:19" pos:end="615:33"><name pos:start="615:19" pos:end="615:26">load_reg</name><argument_list pos:start="615:27" pos:end="615:33">(<argument pos:start="615:28" pos:end="615:28"><expr pos:start="615:28" pos:end="615:28"><name pos:start="615:28" pos:end="615:28">s</name></expr></argument>, <argument pos:start="615:31" pos:end="615:32"><expr pos:start="615:31" pos:end="615:32"><name pos:start="615:31" pos:end="615:32">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="617:11" pos:end="621:9">else <block pos:start="617:16" pos:end="621:9">{<block_content pos:start="619:13" pos:end="619:37">

            <expr_stmt pos:start="619:13" pos:end="619:37"><expr pos:start="619:13" pos:end="619:36"><name pos:start="619:13" pos:end="619:15">tmp</name> <operator pos:start="619:17" pos:end="619:17">=</operator> <call pos:start="619:19" pos:end="619:36"><name pos:start="619:19" pos:end="619:34">tcg_temp_new_i32</name><argument_list pos:start="619:35" pos:end="619:36">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <switch pos:start="625:9" pos:end="675:9">switch <condition pos:start="625:16" pos:end="625:19">(<expr pos:start="625:17" pos:end="625:18"><name pos:start="625:17" pos:end="625:18">op</name></expr>)</condition> <block pos:start="625:21" pos:end="675:9">{<block_content pos:start="627:9" pos:end="673:18">

        <case pos:start="627:9" pos:end="627:15">case <expr pos:start="627:14" pos:end="627:14"><literal type="number" pos:start="627:14" pos:end="627:14">0</literal></expr>:</case> <comment type="block" pos:start="627:17" pos:end="627:25">/* str */</comment>

            <expr_stmt pos:start="629:13" pos:end="629:49"><expr pos:start="629:13" pos:end="629:48"><call pos:start="629:13" pos:end="629:48"><name pos:start="629:13" pos:end="629:25">gen_aa32_st32</name><argument_list pos:start="629:26" pos:end="629:48">(<argument pos:start="629:27" pos:end="629:29"><expr pos:start="629:27" pos:end="629:29"><name pos:start="629:27" pos:end="629:29">tmp</name></expr></argument>, <argument pos:start="629:32" pos:end="629:35"><expr pos:start="629:32" pos:end="629:35"><name pos:start="629:32" pos:end="629:35">addr</name></expr></argument>, <argument pos:start="629:38" pos:end="629:47"><expr pos:start="629:38" pos:end="629:47"><call pos:start="629:38" pos:end="629:47"><name pos:start="629:38" pos:end="629:44">IS_USER</name><argument_list pos:start="629:45" pos:end="629:47">(<argument pos:start="629:46" pos:end="629:46"><expr pos:start="629:46" pos:end="629:46"><name pos:start="629:46" pos:end="629:46">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="631:13" pos:end="631:18">break;</break>

        <case pos:start="633:9" pos:end="633:15">case <expr pos:start="633:14" pos:end="633:14"><literal type="number" pos:start="633:14" pos:end="633:14">1</literal></expr>:</case> <comment type="block" pos:start="633:17" pos:end="633:26">/* strh */</comment>

            <expr_stmt pos:start="635:13" pos:end="635:49"><expr pos:start="635:13" pos:end="635:48"><call pos:start="635:13" pos:end="635:48"><name pos:start="635:13" pos:end="635:25">gen_aa32_st16</name><argument_list pos:start="635:26" pos:end="635:48">(<argument pos:start="635:27" pos:end="635:29"><expr pos:start="635:27" pos:end="635:29"><name pos:start="635:27" pos:end="635:29">tmp</name></expr></argument>, <argument pos:start="635:32" pos:end="635:35"><expr pos:start="635:32" pos:end="635:35"><name pos:start="635:32" pos:end="635:35">addr</name></expr></argument>, <argument pos:start="635:38" pos:end="635:47"><expr pos:start="635:38" pos:end="635:47"><call pos:start="635:38" pos:end="635:47"><name pos:start="635:38" pos:end="635:44">IS_USER</name><argument_list pos:start="635:45" pos:end="635:47">(<argument pos:start="635:46" pos:end="635:46"><expr pos:start="635:46" pos:end="635:46"><name pos:start="635:46" pos:end="635:46">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="637:13" pos:end="637:18">break;</break>

        <case pos:start="639:9" pos:end="639:15">case <expr pos:start="639:14" pos:end="639:14"><literal type="number" pos:start="639:14" pos:end="639:14">2</literal></expr>:</case> <comment type="block" pos:start="639:17" pos:end="639:26">/* strb */</comment>

            <expr_stmt pos:start="641:13" pos:end="641:48"><expr pos:start="641:13" pos:end="641:47"><call pos:start="641:13" pos:end="641:47"><name pos:start="641:13" pos:end="641:24">gen_aa32_st8</name><argument_list pos:start="641:25" pos:end="641:47">(<argument pos:start="641:26" pos:end="641:28"><expr pos:start="641:26" pos:end="641:28"><name pos:start="641:26" pos:end="641:28">tmp</name></expr></argument>, <argument pos:start="641:31" pos:end="641:34"><expr pos:start="641:31" pos:end="641:34"><name pos:start="641:31" pos:end="641:34">addr</name></expr></argument>, <argument pos:start="641:37" pos:end="641:46"><expr pos:start="641:37" pos:end="641:46"><call pos:start="641:37" pos:end="641:46"><name pos:start="641:37" pos:end="641:43">IS_USER</name><argument_list pos:start="641:44" pos:end="641:46">(<argument pos:start="641:45" pos:end="641:45"><expr pos:start="641:45" pos:end="641:45"><name pos:start="641:45" pos:end="641:45">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="643:13" pos:end="643:18">break;</break>

        <case pos:start="645:9" pos:end="645:15">case <expr pos:start="645:14" pos:end="645:14"><literal type="number" pos:start="645:14" pos:end="645:14">3</literal></expr>:</case> <comment type="block" pos:start="645:17" pos:end="645:27">/* ldrsb */</comment>

            <expr_stmt pos:start="647:13" pos:end="647:49"><expr pos:start="647:13" pos:end="647:48"><call pos:start="647:13" pos:end="647:48"><name pos:start="647:13" pos:end="647:25">gen_aa32_ld8s</name><argument_list pos:start="647:26" pos:end="647:48">(<argument pos:start="647:27" pos:end="647:29"><expr pos:start="647:27" pos:end="647:29"><name pos:start="647:27" pos:end="647:29">tmp</name></expr></argument>, <argument pos:start="647:32" pos:end="647:35"><expr pos:start="647:32" pos:end="647:35"><name pos:start="647:32" pos:end="647:35">addr</name></expr></argument>, <argument pos:start="647:38" pos:end="647:47"><expr pos:start="647:38" pos:end="647:47"><call pos:start="647:38" pos:end="647:47"><name pos:start="647:38" pos:end="647:44">IS_USER</name><argument_list pos:start="647:45" pos:end="647:47">(<argument pos:start="647:46" pos:end="647:46"><expr pos:start="647:46" pos:end="647:46"><name pos:start="647:46" pos:end="647:46">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="649:13" pos:end="649:18">break;</break>

        <case pos:start="651:9" pos:end="651:15">case <expr pos:start="651:14" pos:end="651:14"><literal type="number" pos:start="651:14" pos:end="651:14">4</literal></expr>:</case> <comment type="block" pos:start="651:17" pos:end="651:25">/* ldr */</comment>

            <expr_stmt pos:start="653:13" pos:end="653:50"><expr pos:start="653:13" pos:end="653:49"><call pos:start="653:13" pos:end="653:49"><name pos:start="653:13" pos:end="653:26">gen_aa32_ld32u</name><argument_list pos:start="653:27" pos:end="653:49">(<argument pos:start="653:28" pos:end="653:30"><expr pos:start="653:28" pos:end="653:30"><name pos:start="653:28" pos:end="653:30">tmp</name></expr></argument>, <argument pos:start="653:33" pos:end="653:36"><expr pos:start="653:33" pos:end="653:36"><name pos:start="653:33" pos:end="653:36">addr</name></expr></argument>, <argument pos:start="653:39" pos:end="653:48"><expr pos:start="653:39" pos:end="653:48"><call pos:start="653:39" pos:end="653:48"><name pos:start="653:39" pos:end="653:45">IS_USER</name><argument_list pos:start="653:46" pos:end="653:48">(<argument pos:start="653:47" pos:end="653:47"><expr pos:start="653:47" pos:end="653:47"><name pos:start="653:47" pos:end="653:47">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="655:13" pos:end="655:18">break;</break>

        <case pos:start="657:9" pos:end="657:15">case <expr pos:start="657:14" pos:end="657:14"><literal type="number" pos:start="657:14" pos:end="657:14">5</literal></expr>:</case> <comment type="block" pos:start="657:17" pos:end="657:26">/* ldrh */</comment>

            <expr_stmt pos:start="659:13" pos:end="659:50"><expr pos:start="659:13" pos:end="659:49"><call pos:start="659:13" pos:end="659:49"><name pos:start="659:13" pos:end="659:26">gen_aa32_ld16u</name><argument_list pos:start="659:27" pos:end="659:49">(<argument pos:start="659:28" pos:end="659:30"><expr pos:start="659:28" pos:end="659:30"><name pos:start="659:28" pos:end="659:30">tmp</name></expr></argument>, <argument pos:start="659:33" pos:end="659:36"><expr pos:start="659:33" pos:end="659:36"><name pos:start="659:33" pos:end="659:36">addr</name></expr></argument>, <argument pos:start="659:39" pos:end="659:48"><expr pos:start="659:39" pos:end="659:48"><call pos:start="659:39" pos:end="659:48"><name pos:start="659:39" pos:end="659:45">IS_USER</name><argument_list pos:start="659:46" pos:end="659:48">(<argument pos:start="659:47" pos:end="659:47"><expr pos:start="659:47" pos:end="659:47"><name pos:start="659:47" pos:end="659:47">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="661:13" pos:end="661:18">break;</break>

        <case pos:start="663:9" pos:end="663:15">case <expr pos:start="663:14" pos:end="663:14"><literal type="number" pos:start="663:14" pos:end="663:14">6</literal></expr>:</case> <comment type="block" pos:start="663:17" pos:end="663:26">/* ldrb */</comment>

            <expr_stmt pos:start="665:13" pos:end="665:49"><expr pos:start="665:13" pos:end="665:48"><call pos:start="665:13" pos:end="665:48"><name pos:start="665:13" pos:end="665:25">gen_aa32_ld8u</name><argument_list pos:start="665:26" pos:end="665:48">(<argument pos:start="665:27" pos:end="665:29"><expr pos:start="665:27" pos:end="665:29"><name pos:start="665:27" pos:end="665:29">tmp</name></expr></argument>, <argument pos:start="665:32" pos:end="665:35"><expr pos:start="665:32" pos:end="665:35"><name pos:start="665:32" pos:end="665:35">addr</name></expr></argument>, <argument pos:start="665:38" pos:end="665:47"><expr pos:start="665:38" pos:end="665:47"><call pos:start="665:38" pos:end="665:47"><name pos:start="665:38" pos:end="665:44">IS_USER</name><argument_list pos:start="665:45" pos:end="665:47">(<argument pos:start="665:46" pos:end="665:46"><expr pos:start="665:46" pos:end="665:46"><name pos:start="665:46" pos:end="665:46">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="667:13" pos:end="667:18">break;</break>

        <case pos:start="669:9" pos:end="669:15">case <expr pos:start="669:14" pos:end="669:14"><literal type="number" pos:start="669:14" pos:end="669:14">7</literal></expr>:</case> <comment type="block" pos:start="669:17" pos:end="669:27">/* ldrsh */</comment>

            <expr_stmt pos:start="671:13" pos:end="671:50"><expr pos:start="671:13" pos:end="671:49"><call pos:start="671:13" pos:end="671:49"><name pos:start="671:13" pos:end="671:26">gen_aa32_ld16s</name><argument_list pos:start="671:27" pos:end="671:49">(<argument pos:start="671:28" pos:end="671:30"><expr pos:start="671:28" pos:end="671:30"><name pos:start="671:28" pos:end="671:30">tmp</name></expr></argument>, <argument pos:start="671:33" pos:end="671:36"><expr pos:start="671:33" pos:end="671:36"><name pos:start="671:33" pos:end="671:36">addr</name></expr></argument>, <argument pos:start="671:39" pos:end="671:48"><expr pos:start="671:39" pos:end="671:48"><call pos:start="671:39" pos:end="671:48"><name pos:start="671:39" pos:end="671:45">IS_USER</name><argument_list pos:start="671:46" pos:end="671:48">(<argument pos:start="671:47" pos:end="671:47"><expr pos:start="671:47" pos:end="671:47"><name pos:start="671:47" pos:end="671:47">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="673:13" pos:end="673:18">break;</break>

        </block_content>}</block></switch>

        <if_stmt pos:start="677:9" pos:end="685:9"><if pos:start="677:9" pos:end="681:9">if <condition pos:start="677:12" pos:end="677:20">(<expr pos:start="677:13" pos:end="677:19"><name pos:start="677:13" pos:end="677:14">op</name> <operator pos:start="677:16" pos:end="677:17">&gt;=</operator> <literal type="number" pos:start="677:19" pos:end="677:19">3</literal></expr>)</condition> <block pos:start="677:22" pos:end="681:9">{<block_content pos:start="679:13" pos:end="679:34"> <comment type="block" pos:start="677:24" pos:end="677:33">/* load */</comment>

            <expr_stmt pos:start="679:13" pos:end="679:34"><expr pos:start="679:13" pos:end="679:33"><call pos:start="679:13" pos:end="679:33"><name pos:start="679:13" pos:end="679:21">store_reg</name><argument_list pos:start="679:22" pos:end="679:33">(<argument pos:start="679:23" pos:end="679:23"><expr pos:start="679:23" pos:end="679:23"><name pos:start="679:23" pos:end="679:23">s</name></expr></argument>, <argument pos:start="679:26" pos:end="679:27"><expr pos:start="679:26" pos:end="679:27"><name pos:start="679:26" pos:end="679:27">rd</name></expr></argument>, <argument pos:start="679:30" pos:end="679:32"><expr pos:start="679:30" pos:end="679:32"><name pos:start="679:30" pos:end="679:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="681:11" pos:end="685:9">else <block pos:start="681:16" pos:end="685:9">{<block_content pos:start="683:13" pos:end="683:35">

            <expr_stmt pos:start="683:13" pos:end="683:35"><expr pos:start="683:13" pos:end="683:34"><call pos:start="683:13" pos:end="683:34"><name pos:start="683:13" pos:end="683:29">tcg_temp_free_i32</name><argument_list pos:start="683:30" pos:end="683:34">(<argument pos:start="683:31" pos:end="683:33"><expr pos:start="683:31" pos:end="683:33"><name pos:start="683:31" pos:end="683:33">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="687:9" pos:end="687:32"><expr pos:start="687:9" pos:end="687:31"><call pos:start="687:9" pos:end="687:31"><name pos:start="687:9" pos:end="687:25">tcg_temp_free_i32</name><argument_list pos:start="687:26" pos:end="687:31">(<argument pos:start="687:27" pos:end="687:30"><expr pos:start="687:27" pos:end="687:30"><name pos:start="687:27" pos:end="687:30">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="689:9" pos:end="689:14">break;</break>



    <case pos:start="693:5" pos:end="693:11">case <expr pos:start="693:10" pos:end="693:10"><literal type="number" pos:start="693:10" pos:end="693:10">6</literal></expr>:</case>

        <comment type="block" pos:start="695:9" pos:end="695:46">/* load/store word immediate offset */</comment>

        <expr_stmt pos:start="697:9" pos:end="697:22"><expr pos:start="697:9" pos:end="697:21"><name pos:start="697:9" pos:end="697:10">rd</name> <operator pos:start="697:12" pos:end="697:12">=</operator> <name pos:start="697:14" pos:end="697:17">insn</name> <operator pos:start="697:19" pos:end="697:19">&amp;</operator> <literal type="number" pos:start="697:21" pos:end="697:21">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="699:9" pos:end="699:29"><expr pos:start="699:9" pos:end="699:28"><name pos:start="699:9" pos:end="699:10">rn</name> <operator pos:start="699:12" pos:end="699:12">=</operator> <operator pos:start="699:14" pos:end="699:14">(</operator><name pos:start="699:15" pos:end="699:18">insn</name> <operator pos:start="699:20" pos:end="699:21">&gt;&gt;</operator> <literal type="number" pos:start="699:23" pos:end="699:23">3</literal><operator pos:start="699:24" pos:end="699:24">)</operator> <operator pos:start="699:26" pos:end="699:26">&amp;</operator> <literal type="number" pos:start="699:28" pos:end="699:28">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="701:9" pos:end="701:31"><expr pos:start="701:9" pos:end="701:30"><name pos:start="701:9" pos:end="701:12">addr</name> <operator pos:start="701:14" pos:end="701:14">=</operator> <call pos:start="701:16" pos:end="701:30"><name pos:start="701:16" pos:end="701:23">load_reg</name><argument_list pos:start="701:24" pos:end="701:30">(<argument pos:start="701:25" pos:end="701:25"><expr pos:start="701:25" pos:end="701:25"><name pos:start="701:25" pos:end="701:25">s</name></expr></argument>, <argument pos:start="701:28" pos:end="701:29"><expr pos:start="701:28" pos:end="701:29"><name pos:start="701:28" pos:end="701:29">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="703:9" pos:end="703:33"><expr pos:start="703:9" pos:end="703:32"><name pos:start="703:9" pos:end="703:11">val</name> <operator pos:start="703:13" pos:end="703:13">=</operator> <operator pos:start="703:15" pos:end="703:15">(</operator><name pos:start="703:16" pos:end="703:19">insn</name> <operator pos:start="703:21" pos:end="703:22">&gt;&gt;</operator> <literal type="number" pos:start="703:24" pos:end="703:24">4</literal><operator pos:start="703:25" pos:end="703:25">)</operator> <operator pos:start="703:27" pos:end="703:27">&amp;</operator> <literal type="number" pos:start="703:29" pos:end="703:32">0x7c</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="705:9" pos:end="705:42"><expr pos:start="705:9" pos:end="705:41"><call pos:start="705:9" pos:end="705:41"><name pos:start="705:9" pos:end="705:24">tcg_gen_addi_i32</name><argument_list pos:start="705:25" pos:end="705:41">(<argument pos:start="705:26" pos:end="705:29"><expr pos:start="705:26" pos:end="705:29"><name pos:start="705:26" pos:end="705:29">addr</name></expr></argument>, <argument pos:start="705:32" pos:end="705:35"><expr pos:start="705:32" pos:end="705:35"><name pos:start="705:32" pos:end="705:35">addr</name></expr></argument>, <argument pos:start="705:38" pos:end="705:40"><expr pos:start="705:38" pos:end="705:40"><name pos:start="705:38" pos:end="705:40">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="709:9" pos:end="729:9"><if pos:start="709:9" pos:end="719:9">if <condition pos:start="709:12" pos:end="709:29">(<expr pos:start="709:13" pos:end="709:28"><name pos:start="709:13" pos:end="709:16">insn</name> <operator pos:start="709:18" pos:end="709:18">&amp;</operator> <operator pos:start="709:20" pos:end="709:20">(</operator><literal type="number" pos:start="709:21" pos:end="709:21">1</literal> <operator pos:start="709:23" pos:end="709:24">&lt;&lt;</operator> <literal type="number" pos:start="709:26" pos:end="709:27">11</literal><operator pos:start="709:28" pos:end="709:28">)</operator></expr>)</condition> <block pos:start="709:31" pos:end="719:9">{<block_content pos:start="713:13" pos:end="717:34">

            <comment type="block" pos:start="711:13" pos:end="711:22">/* load */</comment>

            <expr_stmt pos:start="713:13" pos:end="713:37"><expr pos:start="713:13" pos:end="713:36"><name pos:start="713:13" pos:end="713:15">tmp</name> <operator pos:start="713:17" pos:end="713:17">=</operator> <call pos:start="713:19" pos:end="713:36"><name pos:start="713:19" pos:end="713:34">tcg_temp_new_i32</name><argument_list pos:start="713:35" pos:end="713:36">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="715:13" pos:end="715:50"><expr pos:start="715:13" pos:end="715:49"><call pos:start="715:13" pos:end="715:49"><name pos:start="715:13" pos:end="715:26">gen_aa32_ld32u</name><argument_list pos:start="715:27" pos:end="715:49">(<argument pos:start="715:28" pos:end="715:30"><expr pos:start="715:28" pos:end="715:30"><name pos:start="715:28" pos:end="715:30">tmp</name></expr></argument>, <argument pos:start="715:33" pos:end="715:36"><expr pos:start="715:33" pos:end="715:36"><name pos:start="715:33" pos:end="715:36">addr</name></expr></argument>, <argument pos:start="715:39" pos:end="715:48"><expr pos:start="715:39" pos:end="715:48"><call pos:start="715:39" pos:end="715:48"><name pos:start="715:39" pos:end="715:45">IS_USER</name><argument_list pos:start="715:46" pos:end="715:48">(<argument pos:start="715:47" pos:end="715:47"><expr pos:start="715:47" pos:end="715:47"><name pos:start="715:47" pos:end="715:47">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="717:13" pos:end="717:34"><expr pos:start="717:13" pos:end="717:33"><call pos:start="717:13" pos:end="717:33"><name pos:start="717:13" pos:end="717:21">store_reg</name><argument_list pos:start="717:22" pos:end="717:33">(<argument pos:start="717:23" pos:end="717:23"><expr pos:start="717:23" pos:end="717:23"><name pos:start="717:23" pos:end="717:23">s</name></expr></argument>, <argument pos:start="717:26" pos:end="717:27"><expr pos:start="717:26" pos:end="717:27"><name pos:start="717:26" pos:end="717:27">rd</name></expr></argument>, <argument pos:start="717:30" pos:end="717:32"><expr pos:start="717:30" pos:end="717:32"><name pos:start="717:30" pos:end="717:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="719:11" pos:end="729:9">else <block pos:start="719:16" pos:end="729:9">{<block_content pos:start="723:13" pos:end="727:35">

            <comment type="block" pos:start="721:13" pos:end="721:23">/* store */</comment>

            <expr_stmt pos:start="723:13" pos:end="723:34"><expr pos:start="723:13" pos:end="723:33"><name pos:start="723:13" pos:end="723:15">tmp</name> <operator pos:start="723:17" pos:end="723:17">=</operator> <call pos:start="723:19" pos:end="723:33"><name pos:start="723:19" pos:end="723:26">load_reg</name><argument_list pos:start="723:27" pos:end="723:33">(<argument pos:start="723:28" pos:end="723:28"><expr pos:start="723:28" pos:end="723:28"><name pos:start="723:28" pos:end="723:28">s</name></expr></argument>, <argument pos:start="723:31" pos:end="723:32"><expr pos:start="723:31" pos:end="723:32"><name pos:start="723:31" pos:end="723:32">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="725:13" pos:end="725:49"><expr pos:start="725:13" pos:end="725:48"><call pos:start="725:13" pos:end="725:48"><name pos:start="725:13" pos:end="725:25">gen_aa32_st32</name><argument_list pos:start="725:26" pos:end="725:48">(<argument pos:start="725:27" pos:end="725:29"><expr pos:start="725:27" pos:end="725:29"><name pos:start="725:27" pos:end="725:29">tmp</name></expr></argument>, <argument pos:start="725:32" pos:end="725:35"><expr pos:start="725:32" pos:end="725:35"><name pos:start="725:32" pos:end="725:35">addr</name></expr></argument>, <argument pos:start="725:38" pos:end="725:47"><expr pos:start="725:38" pos:end="725:47"><call pos:start="725:38" pos:end="725:47"><name pos:start="725:38" pos:end="725:44">IS_USER</name><argument_list pos:start="725:45" pos:end="725:47">(<argument pos:start="725:46" pos:end="725:46"><expr pos:start="725:46" pos:end="725:46"><name pos:start="725:46" pos:end="725:46">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="727:13" pos:end="727:35"><expr pos:start="727:13" pos:end="727:34"><call pos:start="727:13" pos:end="727:34"><name pos:start="727:13" pos:end="727:29">tcg_temp_free_i32</name><argument_list pos:start="727:30" pos:end="727:34">(<argument pos:start="727:31" pos:end="727:33"><expr pos:start="727:31" pos:end="727:33"><name pos:start="727:31" pos:end="727:33">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="731:9" pos:end="731:32"><expr pos:start="731:9" pos:end="731:31"><call pos:start="731:9" pos:end="731:31"><name pos:start="731:9" pos:end="731:25">tcg_temp_free_i32</name><argument_list pos:start="731:26" pos:end="731:31">(<argument pos:start="731:27" pos:end="731:30"><expr pos:start="731:27" pos:end="731:30"><name pos:start="731:27" pos:end="731:30">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="733:9" pos:end="733:14">break;</break>



    <case pos:start="737:5" pos:end="737:11">case <expr pos:start="737:10" pos:end="737:10"><literal type="number" pos:start="737:10" pos:end="737:10">7</literal></expr>:</case>

        <comment type="block" pos:start="739:9" pos:end="739:46">/* load/store byte immediate offset */</comment>

        <expr_stmt pos:start="741:9" pos:end="741:22"><expr pos:start="741:9" pos:end="741:21"><name pos:start="741:9" pos:end="741:10">rd</name> <operator pos:start="741:12" pos:end="741:12">=</operator> <name pos:start="741:14" pos:end="741:17">insn</name> <operator pos:start="741:19" pos:end="741:19">&amp;</operator> <literal type="number" pos:start="741:21" pos:end="741:21">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="743:9" pos:end="743:29"><expr pos:start="743:9" pos:end="743:28"><name pos:start="743:9" pos:end="743:10">rn</name> <operator pos:start="743:12" pos:end="743:12">=</operator> <operator pos:start="743:14" pos:end="743:14">(</operator><name pos:start="743:15" pos:end="743:18">insn</name> <operator pos:start="743:20" pos:end="743:21">&gt;&gt;</operator> <literal type="number" pos:start="743:23" pos:end="743:23">3</literal><operator pos:start="743:24" pos:end="743:24">)</operator> <operator pos:start="743:26" pos:end="743:26">&amp;</operator> <literal type="number" pos:start="743:28" pos:end="743:28">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="745:9" pos:end="745:31"><expr pos:start="745:9" pos:end="745:30"><name pos:start="745:9" pos:end="745:12">addr</name> <operator pos:start="745:14" pos:end="745:14">=</operator> <call pos:start="745:16" pos:end="745:30"><name pos:start="745:16" pos:end="745:23">load_reg</name><argument_list pos:start="745:24" pos:end="745:30">(<argument pos:start="745:25" pos:end="745:25"><expr pos:start="745:25" pos:end="745:25"><name pos:start="745:25" pos:end="745:25">s</name></expr></argument>, <argument pos:start="745:28" pos:end="745:29"><expr pos:start="745:28" pos:end="745:29"><name pos:start="745:28" pos:end="745:29">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="747:9" pos:end="747:33"><expr pos:start="747:9" pos:end="747:32"><name pos:start="747:9" pos:end="747:11">val</name> <operator pos:start="747:13" pos:end="747:13">=</operator> <operator pos:start="747:15" pos:end="747:15">(</operator><name pos:start="747:16" pos:end="747:19">insn</name> <operator pos:start="747:21" pos:end="747:22">&gt;&gt;</operator> <literal type="number" pos:start="747:24" pos:end="747:24">6</literal><operator pos:start="747:25" pos:end="747:25">)</operator> <operator pos:start="747:27" pos:end="747:27">&amp;</operator> <literal type="number" pos:start="747:29" pos:end="747:32">0x1f</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="749:9" pos:end="749:42"><expr pos:start="749:9" pos:end="749:41"><call pos:start="749:9" pos:end="749:41"><name pos:start="749:9" pos:end="749:24">tcg_gen_addi_i32</name><argument_list pos:start="749:25" pos:end="749:41">(<argument pos:start="749:26" pos:end="749:29"><expr pos:start="749:26" pos:end="749:29"><name pos:start="749:26" pos:end="749:29">addr</name></expr></argument>, <argument pos:start="749:32" pos:end="749:35"><expr pos:start="749:32" pos:end="749:35"><name pos:start="749:32" pos:end="749:35">addr</name></expr></argument>, <argument pos:start="749:38" pos:end="749:40"><expr pos:start="749:38" pos:end="749:40"><name pos:start="749:38" pos:end="749:40">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="753:9" pos:end="773:9"><if pos:start="753:9" pos:end="763:9">if <condition pos:start="753:12" pos:end="753:29">(<expr pos:start="753:13" pos:end="753:28"><name pos:start="753:13" pos:end="753:16">insn</name> <operator pos:start="753:18" pos:end="753:18">&amp;</operator> <operator pos:start="753:20" pos:end="753:20">(</operator><literal type="number" pos:start="753:21" pos:end="753:21">1</literal> <operator pos:start="753:23" pos:end="753:24">&lt;&lt;</operator> <literal type="number" pos:start="753:26" pos:end="753:27">11</literal><operator pos:start="753:28" pos:end="753:28">)</operator></expr>)</condition> <block pos:start="753:31" pos:end="763:9">{<block_content pos:start="757:13" pos:end="761:34">

            <comment type="block" pos:start="755:13" pos:end="755:22">/* load */</comment>

            <expr_stmt pos:start="757:13" pos:end="757:37"><expr pos:start="757:13" pos:end="757:36"><name pos:start="757:13" pos:end="757:15">tmp</name> <operator pos:start="757:17" pos:end="757:17">=</operator> <call pos:start="757:19" pos:end="757:36"><name pos:start="757:19" pos:end="757:34">tcg_temp_new_i32</name><argument_list pos:start="757:35" pos:end="757:36">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="759:13" pos:end="759:49"><expr pos:start="759:13" pos:end="759:48"><call pos:start="759:13" pos:end="759:48"><name pos:start="759:13" pos:end="759:25">gen_aa32_ld8u</name><argument_list pos:start="759:26" pos:end="759:48">(<argument pos:start="759:27" pos:end="759:29"><expr pos:start="759:27" pos:end="759:29"><name pos:start="759:27" pos:end="759:29">tmp</name></expr></argument>, <argument pos:start="759:32" pos:end="759:35"><expr pos:start="759:32" pos:end="759:35"><name pos:start="759:32" pos:end="759:35">addr</name></expr></argument>, <argument pos:start="759:38" pos:end="759:47"><expr pos:start="759:38" pos:end="759:47"><call pos:start="759:38" pos:end="759:47"><name pos:start="759:38" pos:end="759:44">IS_USER</name><argument_list pos:start="759:45" pos:end="759:47">(<argument pos:start="759:46" pos:end="759:46"><expr pos:start="759:46" pos:end="759:46"><name pos:start="759:46" pos:end="759:46">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="761:13" pos:end="761:34"><expr pos:start="761:13" pos:end="761:33"><call pos:start="761:13" pos:end="761:33"><name pos:start="761:13" pos:end="761:21">store_reg</name><argument_list pos:start="761:22" pos:end="761:33">(<argument pos:start="761:23" pos:end="761:23"><expr pos:start="761:23" pos:end="761:23"><name pos:start="761:23" pos:end="761:23">s</name></expr></argument>, <argument pos:start="761:26" pos:end="761:27"><expr pos:start="761:26" pos:end="761:27"><name pos:start="761:26" pos:end="761:27">rd</name></expr></argument>, <argument pos:start="761:30" pos:end="761:32"><expr pos:start="761:30" pos:end="761:32"><name pos:start="761:30" pos:end="761:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="763:11" pos:end="773:9">else <block pos:start="763:16" pos:end="773:9">{<block_content pos:start="767:13" pos:end="771:35">

            <comment type="block" pos:start="765:13" pos:end="765:23">/* store */</comment>

            <expr_stmt pos:start="767:13" pos:end="767:34"><expr pos:start="767:13" pos:end="767:33"><name pos:start="767:13" pos:end="767:15">tmp</name> <operator pos:start="767:17" pos:end="767:17">=</operator> <call pos:start="767:19" pos:end="767:33"><name pos:start="767:19" pos:end="767:26">load_reg</name><argument_list pos:start="767:27" pos:end="767:33">(<argument pos:start="767:28" pos:end="767:28"><expr pos:start="767:28" pos:end="767:28"><name pos:start="767:28" pos:end="767:28">s</name></expr></argument>, <argument pos:start="767:31" pos:end="767:32"><expr pos:start="767:31" pos:end="767:32"><name pos:start="767:31" pos:end="767:32">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="769:13" pos:end="769:48"><expr pos:start="769:13" pos:end="769:47"><call pos:start="769:13" pos:end="769:47"><name pos:start="769:13" pos:end="769:24">gen_aa32_st8</name><argument_list pos:start="769:25" pos:end="769:47">(<argument pos:start="769:26" pos:end="769:28"><expr pos:start="769:26" pos:end="769:28"><name pos:start="769:26" pos:end="769:28">tmp</name></expr></argument>, <argument pos:start="769:31" pos:end="769:34"><expr pos:start="769:31" pos:end="769:34"><name pos:start="769:31" pos:end="769:34">addr</name></expr></argument>, <argument pos:start="769:37" pos:end="769:46"><expr pos:start="769:37" pos:end="769:46"><call pos:start="769:37" pos:end="769:46"><name pos:start="769:37" pos:end="769:43">IS_USER</name><argument_list pos:start="769:44" pos:end="769:46">(<argument pos:start="769:45" pos:end="769:45"><expr pos:start="769:45" pos:end="769:45"><name pos:start="769:45" pos:end="769:45">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="771:13" pos:end="771:35"><expr pos:start="771:13" pos:end="771:34"><call pos:start="771:13" pos:end="771:34"><name pos:start="771:13" pos:end="771:29">tcg_temp_free_i32</name><argument_list pos:start="771:30" pos:end="771:34">(<argument pos:start="771:31" pos:end="771:33"><expr pos:start="771:31" pos:end="771:33"><name pos:start="771:31" pos:end="771:33">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="775:9" pos:end="775:32"><expr pos:start="775:9" pos:end="775:31"><call pos:start="775:9" pos:end="775:31"><name pos:start="775:9" pos:end="775:25">tcg_temp_free_i32</name><argument_list pos:start="775:26" pos:end="775:31">(<argument pos:start="775:27" pos:end="775:30"><expr pos:start="775:27" pos:end="775:30"><name pos:start="775:27" pos:end="775:30">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="777:9" pos:end="777:14">break;</break>



    <case pos:start="781:5" pos:end="781:11">case <expr pos:start="781:10" pos:end="781:10"><literal type="number" pos:start="781:10" pos:end="781:10">8</literal></expr>:</case>

        <comment type="block" pos:start="783:9" pos:end="783:50">/* load/store halfword immediate offset */</comment>

        <expr_stmt pos:start="785:9" pos:end="785:22"><expr pos:start="785:9" pos:end="785:21"><name pos:start="785:9" pos:end="785:10">rd</name> <operator pos:start="785:12" pos:end="785:12">=</operator> <name pos:start="785:14" pos:end="785:17">insn</name> <operator pos:start="785:19" pos:end="785:19">&amp;</operator> <literal type="number" pos:start="785:21" pos:end="785:21">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="787:9" pos:end="787:29"><expr pos:start="787:9" pos:end="787:28"><name pos:start="787:9" pos:end="787:10">rn</name> <operator pos:start="787:12" pos:end="787:12">=</operator> <operator pos:start="787:14" pos:end="787:14">(</operator><name pos:start="787:15" pos:end="787:18">insn</name> <operator pos:start="787:20" pos:end="787:21">&gt;&gt;</operator> <literal type="number" pos:start="787:23" pos:end="787:23">3</literal><operator pos:start="787:24" pos:end="787:24">)</operator> <operator pos:start="787:26" pos:end="787:26">&amp;</operator> <literal type="number" pos:start="787:28" pos:end="787:28">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="789:9" pos:end="789:31"><expr pos:start="789:9" pos:end="789:30"><name pos:start="789:9" pos:end="789:12">addr</name> <operator pos:start="789:14" pos:end="789:14">=</operator> <call pos:start="789:16" pos:end="789:30"><name pos:start="789:16" pos:end="789:23">load_reg</name><argument_list pos:start="789:24" pos:end="789:30">(<argument pos:start="789:25" pos:end="789:25"><expr pos:start="789:25" pos:end="789:25"><name pos:start="789:25" pos:end="789:25">s</name></expr></argument>, <argument pos:start="789:28" pos:end="789:29"><expr pos:start="789:28" pos:end="789:29"><name pos:start="789:28" pos:end="789:29">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="791:9" pos:end="791:33"><expr pos:start="791:9" pos:end="791:32"><name pos:start="791:9" pos:end="791:11">val</name> <operator pos:start="791:13" pos:end="791:13">=</operator> <operator pos:start="791:15" pos:end="791:15">(</operator><name pos:start="791:16" pos:end="791:19">insn</name> <operator pos:start="791:21" pos:end="791:22">&gt;&gt;</operator> <literal type="number" pos:start="791:24" pos:end="791:24">5</literal><operator pos:start="791:25" pos:end="791:25">)</operator> <operator pos:start="791:27" pos:end="791:27">&amp;</operator> <literal type="number" pos:start="791:29" pos:end="791:32">0x3e</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="793:9" pos:end="793:42"><expr pos:start="793:9" pos:end="793:41"><call pos:start="793:9" pos:end="793:41"><name pos:start="793:9" pos:end="793:24">tcg_gen_addi_i32</name><argument_list pos:start="793:25" pos:end="793:41">(<argument pos:start="793:26" pos:end="793:29"><expr pos:start="793:26" pos:end="793:29"><name pos:start="793:26" pos:end="793:29">addr</name></expr></argument>, <argument pos:start="793:32" pos:end="793:35"><expr pos:start="793:32" pos:end="793:35"><name pos:start="793:32" pos:end="793:35">addr</name></expr></argument>, <argument pos:start="793:38" pos:end="793:40"><expr pos:start="793:38" pos:end="793:40"><name pos:start="793:38" pos:end="793:40">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="797:9" pos:end="817:9"><if pos:start="797:9" pos:end="807:9">if <condition pos:start="797:12" pos:end="797:29">(<expr pos:start="797:13" pos:end="797:28"><name pos:start="797:13" pos:end="797:16">insn</name> <operator pos:start="797:18" pos:end="797:18">&amp;</operator> <operator pos:start="797:20" pos:end="797:20">(</operator><literal type="number" pos:start="797:21" pos:end="797:21">1</literal> <operator pos:start="797:23" pos:end="797:24">&lt;&lt;</operator> <literal type="number" pos:start="797:26" pos:end="797:27">11</literal><operator pos:start="797:28" pos:end="797:28">)</operator></expr>)</condition> <block pos:start="797:31" pos:end="807:9">{<block_content pos:start="801:13" pos:end="805:34">

            <comment type="block" pos:start="799:13" pos:end="799:22">/* load */</comment>

            <expr_stmt pos:start="801:13" pos:end="801:37"><expr pos:start="801:13" pos:end="801:36"><name pos:start="801:13" pos:end="801:15">tmp</name> <operator pos:start="801:17" pos:end="801:17">=</operator> <call pos:start="801:19" pos:end="801:36"><name pos:start="801:19" pos:end="801:34">tcg_temp_new_i32</name><argument_list pos:start="801:35" pos:end="801:36">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="803:13" pos:end="803:50"><expr pos:start="803:13" pos:end="803:49"><call pos:start="803:13" pos:end="803:49"><name pos:start="803:13" pos:end="803:26">gen_aa32_ld16u</name><argument_list pos:start="803:27" pos:end="803:49">(<argument pos:start="803:28" pos:end="803:30"><expr pos:start="803:28" pos:end="803:30"><name pos:start="803:28" pos:end="803:30">tmp</name></expr></argument>, <argument pos:start="803:33" pos:end="803:36"><expr pos:start="803:33" pos:end="803:36"><name pos:start="803:33" pos:end="803:36">addr</name></expr></argument>, <argument pos:start="803:39" pos:end="803:48"><expr pos:start="803:39" pos:end="803:48"><call pos:start="803:39" pos:end="803:48"><name pos:start="803:39" pos:end="803:45">IS_USER</name><argument_list pos:start="803:46" pos:end="803:48">(<argument pos:start="803:47" pos:end="803:47"><expr pos:start="803:47" pos:end="803:47"><name pos:start="803:47" pos:end="803:47">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="805:13" pos:end="805:34"><expr pos:start="805:13" pos:end="805:33"><call pos:start="805:13" pos:end="805:33"><name pos:start="805:13" pos:end="805:21">store_reg</name><argument_list pos:start="805:22" pos:end="805:33">(<argument pos:start="805:23" pos:end="805:23"><expr pos:start="805:23" pos:end="805:23"><name pos:start="805:23" pos:end="805:23">s</name></expr></argument>, <argument pos:start="805:26" pos:end="805:27"><expr pos:start="805:26" pos:end="805:27"><name pos:start="805:26" pos:end="805:27">rd</name></expr></argument>, <argument pos:start="805:30" pos:end="805:32"><expr pos:start="805:30" pos:end="805:32"><name pos:start="805:30" pos:end="805:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="807:11" pos:end="817:9">else <block pos:start="807:16" pos:end="817:9">{<block_content pos:start="811:13" pos:end="815:35">

            <comment type="block" pos:start="809:13" pos:end="809:23">/* store */</comment>

            <expr_stmt pos:start="811:13" pos:end="811:34"><expr pos:start="811:13" pos:end="811:33"><name pos:start="811:13" pos:end="811:15">tmp</name> <operator pos:start="811:17" pos:end="811:17">=</operator> <call pos:start="811:19" pos:end="811:33"><name pos:start="811:19" pos:end="811:26">load_reg</name><argument_list pos:start="811:27" pos:end="811:33">(<argument pos:start="811:28" pos:end="811:28"><expr pos:start="811:28" pos:end="811:28"><name pos:start="811:28" pos:end="811:28">s</name></expr></argument>, <argument pos:start="811:31" pos:end="811:32"><expr pos:start="811:31" pos:end="811:32"><name pos:start="811:31" pos:end="811:32">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="813:13" pos:end="813:49"><expr pos:start="813:13" pos:end="813:48"><call pos:start="813:13" pos:end="813:48"><name pos:start="813:13" pos:end="813:25">gen_aa32_st16</name><argument_list pos:start="813:26" pos:end="813:48">(<argument pos:start="813:27" pos:end="813:29"><expr pos:start="813:27" pos:end="813:29"><name pos:start="813:27" pos:end="813:29">tmp</name></expr></argument>, <argument pos:start="813:32" pos:end="813:35"><expr pos:start="813:32" pos:end="813:35"><name pos:start="813:32" pos:end="813:35">addr</name></expr></argument>, <argument pos:start="813:38" pos:end="813:47"><expr pos:start="813:38" pos:end="813:47"><call pos:start="813:38" pos:end="813:47"><name pos:start="813:38" pos:end="813:44">IS_USER</name><argument_list pos:start="813:45" pos:end="813:47">(<argument pos:start="813:46" pos:end="813:46"><expr pos:start="813:46" pos:end="813:46"><name pos:start="813:46" pos:end="813:46">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="815:13" pos:end="815:35"><expr pos:start="815:13" pos:end="815:34"><call pos:start="815:13" pos:end="815:34"><name pos:start="815:13" pos:end="815:29">tcg_temp_free_i32</name><argument_list pos:start="815:30" pos:end="815:34">(<argument pos:start="815:31" pos:end="815:33"><expr pos:start="815:31" pos:end="815:33"><name pos:start="815:31" pos:end="815:33">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="819:9" pos:end="819:32"><expr pos:start="819:9" pos:end="819:31"><call pos:start="819:9" pos:end="819:31"><name pos:start="819:9" pos:end="819:25">tcg_temp_free_i32</name><argument_list pos:start="819:26" pos:end="819:31">(<argument pos:start="819:27" pos:end="819:30"><expr pos:start="819:27" pos:end="819:30"><name pos:start="819:27" pos:end="819:30">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="821:9" pos:end="821:14">break;</break>



    <case pos:start="825:5" pos:end="825:11">case <expr pos:start="825:10" pos:end="825:10"><literal type="number" pos:start="825:10" pos:end="825:10">9</literal></expr>:</case>

        <comment type="block" pos:start="827:9" pos:end="827:35">/* load/store from stack */</comment>

        <expr_stmt pos:start="829:9" pos:end="829:29"><expr pos:start="829:9" pos:end="829:28"><name pos:start="829:9" pos:end="829:10">rd</name> <operator pos:start="829:12" pos:end="829:12">=</operator> <operator pos:start="829:14" pos:end="829:14">(</operator><name pos:start="829:15" pos:end="829:18">insn</name> <operator pos:start="829:20" pos:end="829:21">&gt;&gt;</operator> <literal type="number" pos:start="829:23" pos:end="829:23">8</literal><operator pos:start="829:24" pos:end="829:24">)</operator> <operator pos:start="829:26" pos:end="829:26">&amp;</operator> <literal type="number" pos:start="829:28" pos:end="829:28">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="831:9" pos:end="831:31"><expr pos:start="831:9" pos:end="831:30"><name pos:start="831:9" pos:end="831:12">addr</name> <operator pos:start="831:14" pos:end="831:14">=</operator> <call pos:start="831:16" pos:end="831:30"><name pos:start="831:16" pos:end="831:23">load_reg</name><argument_list pos:start="831:24" pos:end="831:30">(<argument pos:start="831:25" pos:end="831:25"><expr pos:start="831:25" pos:end="831:25"><name pos:start="831:25" pos:end="831:25">s</name></expr></argument>, <argument pos:start="831:28" pos:end="831:29"><expr pos:start="831:28" pos:end="831:29"><literal type="number" pos:start="831:28" pos:end="831:29">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="833:9" pos:end="833:32"><expr pos:start="833:9" pos:end="833:31"><name pos:start="833:9" pos:end="833:11">val</name> <operator pos:start="833:13" pos:end="833:13">=</operator> <operator pos:start="833:15" pos:end="833:15">(</operator><name pos:start="833:16" pos:end="833:19">insn</name> <operator pos:start="833:21" pos:end="833:21">&amp;</operator> <literal type="number" pos:start="833:23" pos:end="833:26">0xff</literal><operator pos:start="833:27" pos:end="833:27">)</operator> <operator pos:start="833:29" pos:end="833:29">*</operator> <literal type="number" pos:start="833:31" pos:end="833:31">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="835:9" pos:end="835:42"><expr pos:start="835:9" pos:end="835:41"><call pos:start="835:9" pos:end="835:41"><name pos:start="835:9" pos:end="835:24">tcg_gen_addi_i32</name><argument_list pos:start="835:25" pos:end="835:41">(<argument pos:start="835:26" pos:end="835:29"><expr pos:start="835:26" pos:end="835:29"><name pos:start="835:26" pos:end="835:29">addr</name></expr></argument>, <argument pos:start="835:32" pos:end="835:35"><expr pos:start="835:32" pos:end="835:35"><name pos:start="835:32" pos:end="835:35">addr</name></expr></argument>, <argument pos:start="835:38" pos:end="835:40"><expr pos:start="835:38" pos:end="835:40"><name pos:start="835:38" pos:end="835:40">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="839:9" pos:end="859:9"><if pos:start="839:9" pos:end="849:9">if <condition pos:start="839:12" pos:end="839:29">(<expr pos:start="839:13" pos:end="839:28"><name pos:start="839:13" pos:end="839:16">insn</name> <operator pos:start="839:18" pos:end="839:18">&amp;</operator> <operator pos:start="839:20" pos:end="839:20">(</operator><literal type="number" pos:start="839:21" pos:end="839:21">1</literal> <operator pos:start="839:23" pos:end="839:24">&lt;&lt;</operator> <literal type="number" pos:start="839:26" pos:end="839:27">11</literal><operator pos:start="839:28" pos:end="839:28">)</operator></expr>)</condition> <block pos:start="839:31" pos:end="849:9">{<block_content pos:start="843:13" pos:end="847:34">

            <comment type="block" pos:start="841:13" pos:end="841:22">/* load */</comment>

            <expr_stmt pos:start="843:13" pos:end="843:37"><expr pos:start="843:13" pos:end="843:36"><name pos:start="843:13" pos:end="843:15">tmp</name> <operator pos:start="843:17" pos:end="843:17">=</operator> <call pos:start="843:19" pos:end="843:36"><name pos:start="843:19" pos:end="843:34">tcg_temp_new_i32</name><argument_list pos:start="843:35" pos:end="843:36">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="845:13" pos:end="845:50"><expr pos:start="845:13" pos:end="845:49"><call pos:start="845:13" pos:end="845:49"><name pos:start="845:13" pos:end="845:26">gen_aa32_ld32u</name><argument_list pos:start="845:27" pos:end="845:49">(<argument pos:start="845:28" pos:end="845:30"><expr pos:start="845:28" pos:end="845:30"><name pos:start="845:28" pos:end="845:30">tmp</name></expr></argument>, <argument pos:start="845:33" pos:end="845:36"><expr pos:start="845:33" pos:end="845:36"><name pos:start="845:33" pos:end="845:36">addr</name></expr></argument>, <argument pos:start="845:39" pos:end="845:48"><expr pos:start="845:39" pos:end="845:48"><call pos:start="845:39" pos:end="845:48"><name pos:start="845:39" pos:end="845:45">IS_USER</name><argument_list pos:start="845:46" pos:end="845:48">(<argument pos:start="845:47" pos:end="845:47"><expr pos:start="845:47" pos:end="845:47"><name pos:start="845:47" pos:end="845:47">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="847:13" pos:end="847:34"><expr pos:start="847:13" pos:end="847:33"><call pos:start="847:13" pos:end="847:33"><name pos:start="847:13" pos:end="847:21">store_reg</name><argument_list pos:start="847:22" pos:end="847:33">(<argument pos:start="847:23" pos:end="847:23"><expr pos:start="847:23" pos:end="847:23"><name pos:start="847:23" pos:end="847:23">s</name></expr></argument>, <argument pos:start="847:26" pos:end="847:27"><expr pos:start="847:26" pos:end="847:27"><name pos:start="847:26" pos:end="847:27">rd</name></expr></argument>, <argument pos:start="847:30" pos:end="847:32"><expr pos:start="847:30" pos:end="847:32"><name pos:start="847:30" pos:end="847:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="849:11" pos:end="859:9">else <block pos:start="849:16" pos:end="859:9">{<block_content pos:start="853:13" pos:end="857:35">

            <comment type="block" pos:start="851:13" pos:end="851:23">/* store */</comment>

            <expr_stmt pos:start="853:13" pos:end="853:34"><expr pos:start="853:13" pos:end="853:33"><name pos:start="853:13" pos:end="853:15">tmp</name> <operator pos:start="853:17" pos:end="853:17">=</operator> <call pos:start="853:19" pos:end="853:33"><name pos:start="853:19" pos:end="853:26">load_reg</name><argument_list pos:start="853:27" pos:end="853:33">(<argument pos:start="853:28" pos:end="853:28"><expr pos:start="853:28" pos:end="853:28"><name pos:start="853:28" pos:end="853:28">s</name></expr></argument>, <argument pos:start="853:31" pos:end="853:32"><expr pos:start="853:31" pos:end="853:32"><name pos:start="853:31" pos:end="853:32">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="855:13" pos:end="855:49"><expr pos:start="855:13" pos:end="855:48"><call pos:start="855:13" pos:end="855:48"><name pos:start="855:13" pos:end="855:25">gen_aa32_st32</name><argument_list pos:start="855:26" pos:end="855:48">(<argument pos:start="855:27" pos:end="855:29"><expr pos:start="855:27" pos:end="855:29"><name pos:start="855:27" pos:end="855:29">tmp</name></expr></argument>, <argument pos:start="855:32" pos:end="855:35"><expr pos:start="855:32" pos:end="855:35"><name pos:start="855:32" pos:end="855:35">addr</name></expr></argument>, <argument pos:start="855:38" pos:end="855:47"><expr pos:start="855:38" pos:end="855:47"><call pos:start="855:38" pos:end="855:47"><name pos:start="855:38" pos:end="855:44">IS_USER</name><argument_list pos:start="855:45" pos:end="855:47">(<argument pos:start="855:46" pos:end="855:46"><expr pos:start="855:46" pos:end="855:46"><name pos:start="855:46" pos:end="855:46">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="857:13" pos:end="857:35"><expr pos:start="857:13" pos:end="857:34"><call pos:start="857:13" pos:end="857:34"><name pos:start="857:13" pos:end="857:29">tcg_temp_free_i32</name><argument_list pos:start="857:30" pos:end="857:34">(<argument pos:start="857:31" pos:end="857:33"><expr pos:start="857:31" pos:end="857:33"><name pos:start="857:31" pos:end="857:33">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="861:9" pos:end="861:32"><expr pos:start="861:9" pos:end="861:31"><call pos:start="861:9" pos:end="861:31"><name pos:start="861:9" pos:end="861:25">tcg_temp_free_i32</name><argument_list pos:start="861:26" pos:end="861:31">(<argument pos:start="861:27" pos:end="861:30"><expr pos:start="861:27" pos:end="861:30"><name pos:start="861:27" pos:end="861:30">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="863:9" pos:end="863:14">break;</break>



    <case pos:start="867:5" pos:end="867:12">case <expr pos:start="867:10" pos:end="867:11"><literal type="number" pos:start="867:10" pos:end="867:11">10</literal></expr>:</case>

        <comment type="block" pos:start="869:9" pos:end="869:29">/* add to high reg */</comment>

        <expr_stmt pos:start="871:9" pos:end="871:29"><expr pos:start="871:9" pos:end="871:28"><name pos:start="871:9" pos:end="871:10">rd</name> <operator pos:start="871:12" pos:end="871:12">=</operator> <operator pos:start="871:14" pos:end="871:14">(</operator><name pos:start="871:15" pos:end="871:18">insn</name> <operator pos:start="871:20" pos:end="871:21">&gt;&gt;</operator> <literal type="number" pos:start="871:23" pos:end="871:23">8</literal><operator pos:start="871:24" pos:end="871:24">)</operator> <operator pos:start="871:26" pos:end="871:26">&amp;</operator> <literal type="number" pos:start="871:28" pos:end="871:28">7</literal></expr>;</expr_stmt>

        <if_stmt pos:start="873:9" pos:end="887:9"><if pos:start="873:9" pos:end="879:9">if <condition pos:start="873:12" pos:end="873:29">(<expr pos:start="873:13" pos:end="873:28"><name pos:start="873:13" pos:end="873:16">insn</name> <operator pos:start="873:18" pos:end="873:18">&amp;</operator> <operator pos:start="873:20" pos:end="873:20">(</operator><literal type="number" pos:start="873:21" pos:end="873:21">1</literal> <operator pos:start="873:23" pos:end="873:24">&lt;&lt;</operator> <literal type="number" pos:start="873:26" pos:end="873:27">11</literal><operator pos:start="873:28" pos:end="873:28">)</operator></expr>)</condition> <block pos:start="873:31" pos:end="879:9">{<block_content pos:start="877:13" pos:end="877:34">

            <comment type="block" pos:start="875:13" pos:end="875:20">/* SP */</comment>

            <expr_stmt pos:start="877:13" pos:end="877:34"><expr pos:start="877:13" pos:end="877:33"><name pos:start="877:13" pos:end="877:15">tmp</name> <operator pos:start="877:17" pos:end="877:17">=</operator> <call pos:start="877:19" pos:end="877:33"><name pos:start="877:19" pos:end="877:26">load_reg</name><argument_list pos:start="877:27" pos:end="877:33">(<argument pos:start="877:28" pos:end="877:28"><expr pos:start="877:28" pos:end="877:28"><name pos:start="877:28" pos:end="877:28">s</name></expr></argument>, <argument pos:start="877:31" pos:end="877:32"><expr pos:start="877:31" pos:end="877:32"><literal type="number" pos:start="877:31" pos:end="877:32">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="879:11" pos:end="887:9">else <block pos:start="879:16" pos:end="887:9">{<block_content pos:start="883:13" pos:end="885:62">

            <comment type="block" pos:start="881:13" pos:end="881:40">/* PC. bit 1 is ignored.  */</comment>

            <expr_stmt pos:start="883:13" pos:end="883:37"><expr pos:start="883:13" pos:end="883:36"><name pos:start="883:13" pos:end="883:15">tmp</name> <operator pos:start="883:17" pos:end="883:17">=</operator> <call pos:start="883:19" pos:end="883:36"><name pos:start="883:19" pos:end="883:34">tcg_temp_new_i32</name><argument_list pos:start="883:35" pos:end="883:36">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="885:13" pos:end="885:62"><expr pos:start="885:13" pos:end="885:61"><call pos:start="885:13" pos:end="885:61"><name pos:start="885:13" pos:end="885:28">tcg_gen_movi_i32</name><argument_list pos:start="885:29" pos:end="885:61">(<argument pos:start="885:30" pos:end="885:32"><expr pos:start="885:30" pos:end="885:32"><name pos:start="885:30" pos:end="885:32">tmp</name></expr></argument>, <argument pos:start="885:35" pos:end="885:60"><expr pos:start="885:35" pos:end="885:60"><operator pos:start="885:35" pos:end="885:35">(</operator><name pos:start="885:36" pos:end="885:40"><name pos:start="885:36" pos:end="885:36">s</name><operator pos:start="885:37" pos:end="885:38">-&gt;</operator><name pos:start="885:39" pos:end="885:40">pc</name></name> <operator pos:start="885:42" pos:end="885:42">+</operator> <literal type="number" pos:start="885:44" pos:end="885:44">2</literal><operator pos:start="885:45" pos:end="885:45">)</operator> <operator pos:start="885:47" pos:end="885:47">&amp;</operator> <operator pos:start="885:49" pos:end="885:49">~</operator><operator pos:start="885:50" pos:end="885:50">(</operator><name pos:start="885:51" pos:end="885:58">uint32_t</name><operator pos:start="885:59" pos:end="885:59">)</operator><literal type="number" pos:start="885:60" pos:end="885:60">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="889:9" pos:end="889:32"><expr pos:start="889:9" pos:end="889:31"><name pos:start="889:9" pos:end="889:11">val</name> <operator pos:start="889:13" pos:end="889:13">=</operator> <operator pos:start="889:15" pos:end="889:15">(</operator><name pos:start="889:16" pos:end="889:19">insn</name> <operator pos:start="889:21" pos:end="889:21">&amp;</operator> <literal type="number" pos:start="889:23" pos:end="889:26">0xff</literal><operator pos:start="889:27" pos:end="889:27">)</operator> <operator pos:start="889:29" pos:end="889:29">*</operator> <literal type="number" pos:start="889:31" pos:end="889:31">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="891:9" pos:end="891:40"><expr pos:start="891:9" pos:end="891:39"><call pos:start="891:9" pos:end="891:39"><name pos:start="891:9" pos:end="891:24">tcg_gen_addi_i32</name><argument_list pos:start="891:25" pos:end="891:39">(<argument pos:start="891:26" pos:end="891:28"><expr pos:start="891:26" pos:end="891:28"><name pos:start="891:26" pos:end="891:28">tmp</name></expr></argument>, <argument pos:start="891:31" pos:end="891:33"><expr pos:start="891:31" pos:end="891:33"><name pos:start="891:31" pos:end="891:33">tmp</name></expr></argument>, <argument pos:start="891:36" pos:end="891:38"><expr pos:start="891:36" pos:end="891:38"><name pos:start="891:36" pos:end="891:38">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="893:9" pos:end="893:30"><expr pos:start="893:9" pos:end="893:29"><call pos:start="893:9" pos:end="893:29"><name pos:start="893:9" pos:end="893:17">store_reg</name><argument_list pos:start="893:18" pos:end="893:29">(<argument pos:start="893:19" pos:end="893:19"><expr pos:start="893:19" pos:end="893:19"><name pos:start="893:19" pos:end="893:19">s</name></expr></argument>, <argument pos:start="893:22" pos:end="893:23"><expr pos:start="893:22" pos:end="893:23"><name pos:start="893:22" pos:end="893:23">rd</name></expr></argument>, <argument pos:start="893:26" pos:end="893:28"><expr pos:start="893:26" pos:end="893:28"><name pos:start="893:26" pos:end="893:28">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="895:9" pos:end="895:14">break;</break>



    <case pos:start="899:5" pos:end="899:12">case <expr pos:start="899:10" pos:end="899:11"><literal type="number" pos:start="899:10" pos:end="899:11">11</literal></expr>:</case>

        <comment type="block" pos:start="901:9" pos:end="901:18">/* misc */</comment>

        <expr_stmt pos:start="903:9" pos:end="903:31"><expr pos:start="903:9" pos:end="903:30"><name pos:start="903:9" pos:end="903:10">op</name> <operator pos:start="903:12" pos:end="903:12">=</operator> <operator pos:start="903:14" pos:end="903:14">(</operator><name pos:start="903:15" pos:end="903:18">insn</name> <operator pos:start="903:20" pos:end="903:21">&gt;&gt;</operator> <literal type="number" pos:start="903:23" pos:end="903:23">8</literal><operator pos:start="903:24" pos:end="903:24">)</operator> <operator pos:start="903:26" pos:end="903:26">&amp;</operator> <literal type="number" pos:start="903:28" pos:end="903:30">0xf</literal></expr>;</expr_stmt>

        <switch pos:start="905:9" pos:end="1259:9">switch <condition pos:start="905:16" pos:end="905:19">(<expr pos:start="905:17" pos:end="905:18"><name pos:start="905:17" pos:end="905:18">op</name></expr>)</condition> <block pos:start="905:21" pos:end="1259:9">{<block_content pos:start="907:9" pos:end="1257:23">

        <case pos:start="907:9" pos:end="907:15">case <expr pos:start="907:14" pos:end="907:14"><literal type="number" pos:start="907:14" pos:end="907:14">0</literal></expr>:</case>

            <comment type="block" pos:start="909:13" pos:end="909:38">/* adjust stack pointer */</comment>

            <expr_stmt pos:start="911:13" pos:end="911:34"><expr pos:start="911:13" pos:end="911:33"><name pos:start="911:13" pos:end="911:15">tmp</name> <operator pos:start="911:17" pos:end="911:17">=</operator> <call pos:start="911:19" pos:end="911:33"><name pos:start="911:19" pos:end="911:26">load_reg</name><argument_list pos:start="911:27" pos:end="911:33">(<argument pos:start="911:28" pos:end="911:28"><expr pos:start="911:28" pos:end="911:28"><name pos:start="911:28" pos:end="911:28">s</name></expr></argument>, <argument pos:start="911:31" pos:end="911:32"><expr pos:start="911:31" pos:end="911:32"><literal type="number" pos:start="911:31" pos:end="911:32">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="913:13" pos:end="913:36"><expr pos:start="913:13" pos:end="913:35"><name pos:start="913:13" pos:end="913:15">val</name> <operator pos:start="913:17" pos:end="913:17">=</operator> <operator pos:start="913:19" pos:end="913:19">(</operator><name pos:start="913:20" pos:end="913:23">insn</name> <operator pos:start="913:25" pos:end="913:25">&amp;</operator> <literal type="number" pos:start="913:27" pos:end="913:30">0x7f</literal><operator pos:start="913:31" pos:end="913:31">)</operator> <operator pos:start="913:33" pos:end="913:33">*</operator> <literal type="number" pos:start="913:35" pos:end="913:35">4</literal></expr>;</expr_stmt>

            <if_stmt pos:start="915:13" pos:end="917:36"><if pos:start="915:13" pos:end="917:36">if <condition pos:start="915:16" pos:end="915:32">(<expr pos:start="915:17" pos:end="915:31"><name pos:start="915:17" pos:end="915:20">insn</name> <operator pos:start="915:22" pos:end="915:22">&amp;</operator> <operator pos:start="915:24" pos:end="915:24">(</operator><literal type="number" pos:start="915:25" pos:end="915:25">1</literal> <operator pos:start="915:27" pos:end="915:28">&lt;&lt;</operator> <literal type="number" pos:start="915:30" pos:end="915:30">7</literal><operator pos:start="915:31" pos:end="915:31">)</operator></expr>)</condition><block type="pseudo" pos:start="917:17" pos:end="917:36"><block_content pos:start="917:17" pos:end="917:36">

                <expr_stmt pos:start="917:17" pos:end="917:36"><expr pos:start="917:17" pos:end="917:35"><name pos:start="917:17" pos:end="917:19">val</name> <operator pos:start="917:21" pos:end="917:21">=</operator> <operator pos:start="917:23" pos:end="917:23">-</operator><operator pos:start="917:24" pos:end="917:24">(</operator><name pos:start="917:25" pos:end="917:31">int32_t</name><operator pos:start="917:32" pos:end="917:32">)</operator><name pos:start="917:33" pos:end="917:35">val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="919:13" pos:end="919:44"><expr pos:start="919:13" pos:end="919:43"><call pos:start="919:13" pos:end="919:43"><name pos:start="919:13" pos:end="919:28">tcg_gen_addi_i32</name><argument_list pos:start="919:29" pos:end="919:43">(<argument pos:start="919:30" pos:end="919:32"><expr pos:start="919:30" pos:end="919:32"><name pos:start="919:30" pos:end="919:32">tmp</name></expr></argument>, <argument pos:start="919:35" pos:end="919:37"><expr pos:start="919:35" pos:end="919:37"><name pos:start="919:35" pos:end="919:37">tmp</name></expr></argument>, <argument pos:start="919:40" pos:end="919:42"><expr pos:start="919:40" pos:end="919:42"><name pos:start="919:40" pos:end="919:42">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="921:13" pos:end="921:34"><expr pos:start="921:13" pos:end="921:33"><call pos:start="921:13" pos:end="921:33"><name pos:start="921:13" pos:end="921:21">store_reg</name><argument_list pos:start="921:22" pos:end="921:33">(<argument pos:start="921:23" pos:end="921:23"><expr pos:start="921:23" pos:end="921:23"><name pos:start="921:23" pos:end="921:23">s</name></expr></argument>, <argument pos:start="921:26" pos:end="921:27"><expr pos:start="921:26" pos:end="921:27"><literal type="number" pos:start="921:26" pos:end="921:27">13</literal></expr></argument>, <argument pos:start="921:30" pos:end="921:32"><expr pos:start="921:30" pos:end="921:32"><name pos:start="921:30" pos:end="921:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="923:13" pos:end="923:18">break;</break>



        <case pos:start="927:9" pos:end="927:15">case <expr pos:start="927:14" pos:end="927:14"><literal type="number" pos:start="927:14" pos:end="927:14">2</literal></expr>:</case> <comment type="block" pos:start="927:17" pos:end="927:40">/* sign/zero extend.  */</comment>

            <expr_stmt pos:start="929:13" pos:end="929:20"><expr pos:start="929:13" pos:end="929:19"><call pos:start="929:13" pos:end="929:19"><name pos:start="929:13" pos:end="929:16">ARCH</name><argument_list pos:start="929:17" pos:end="929:19">(<argument pos:start="929:18" pos:end="929:18"><expr pos:start="929:18" pos:end="929:18"><literal type="number" pos:start="929:18" pos:end="929:18">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="931:13" pos:end="931:26"><expr pos:start="931:13" pos:end="931:25"><name pos:start="931:13" pos:end="931:14">rd</name> <operator pos:start="931:16" pos:end="931:16">=</operator> <name pos:start="931:18" pos:end="931:21">insn</name> <operator pos:start="931:23" pos:end="931:23">&amp;</operator> <literal type="number" pos:start="931:25" pos:end="931:25">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="933:13" pos:end="933:33"><expr pos:start="933:13" pos:end="933:32"><name pos:start="933:13" pos:end="933:14">rm</name> <operator pos:start="933:16" pos:end="933:16">=</operator> <operator pos:start="933:18" pos:end="933:18">(</operator><name pos:start="933:19" pos:end="933:22">insn</name> <operator pos:start="933:24" pos:end="933:25">&gt;&gt;</operator> <literal type="number" pos:start="933:27" pos:end="933:27">3</literal><operator pos:start="933:28" pos:end="933:28">)</operator> <operator pos:start="933:30" pos:end="933:30">&amp;</operator> <literal type="number" pos:start="933:32" pos:end="933:32">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="935:13" pos:end="935:34"><expr pos:start="935:13" pos:end="935:33"><name pos:start="935:13" pos:end="935:15">tmp</name> <operator pos:start="935:17" pos:end="935:17">=</operator> <call pos:start="935:19" pos:end="935:33"><name pos:start="935:19" pos:end="935:26">load_reg</name><argument_list pos:start="935:27" pos:end="935:33">(<argument pos:start="935:28" pos:end="935:28"><expr pos:start="935:28" pos:end="935:28"><name pos:start="935:28" pos:end="935:28">s</name></expr></argument>, <argument pos:start="935:31" pos:end="935:32"><expr pos:start="935:31" pos:end="935:32"><name pos:start="935:31" pos:end="935:32">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="937:13" pos:end="947:13">switch <condition pos:start="937:20" pos:end="937:36">(<expr pos:start="937:21" pos:end="937:35"><operator pos:start="937:21" pos:end="937:21">(</operator><name pos:start="937:22" pos:end="937:25">insn</name> <operator pos:start="937:27" pos:end="937:28">&gt;&gt;</operator> <literal type="number" pos:start="937:30" pos:end="937:30">6</literal><operator pos:start="937:31" pos:end="937:31">)</operator> <operator pos:start="937:33" pos:end="937:33">&amp;</operator> <literal type="number" pos:start="937:35" pos:end="937:35">3</literal></expr>)</condition> <block pos:start="937:38" pos:end="947:13">{<block_content pos:start="939:13" pos:end="945:41">

            <case pos:start="939:13" pos:end="939:19">case <expr pos:start="939:18" pos:end="939:18"><literal type="number" pos:start="939:18" pos:end="939:18">0</literal></expr>:</case> <expr_stmt pos:start="939:21" pos:end="939:34"><expr pos:start="939:21" pos:end="939:33"><call pos:start="939:21" pos:end="939:33"><name pos:start="939:21" pos:end="939:28">gen_sxth</name><argument_list pos:start="939:29" pos:end="939:33">(<argument pos:start="939:30" pos:end="939:32"><expr pos:start="939:30" pos:end="939:32"><name pos:start="939:30" pos:end="939:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="939:36" pos:end="939:41">break;</break>

            <case pos:start="941:13" pos:end="941:19">case <expr pos:start="941:18" pos:end="941:18"><literal type="number" pos:start="941:18" pos:end="941:18">1</literal></expr>:</case> <expr_stmt pos:start="941:21" pos:end="941:34"><expr pos:start="941:21" pos:end="941:33"><call pos:start="941:21" pos:end="941:33"><name pos:start="941:21" pos:end="941:28">gen_sxtb</name><argument_list pos:start="941:29" pos:end="941:33">(<argument pos:start="941:30" pos:end="941:32"><expr pos:start="941:30" pos:end="941:32"><name pos:start="941:30" pos:end="941:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="941:36" pos:end="941:41">break;</break>

            <case pos:start="943:13" pos:end="943:19">case <expr pos:start="943:18" pos:end="943:18"><literal type="number" pos:start="943:18" pos:end="943:18">2</literal></expr>:</case> <expr_stmt pos:start="943:21" pos:end="943:34"><expr pos:start="943:21" pos:end="943:33"><call pos:start="943:21" pos:end="943:33"><name pos:start="943:21" pos:end="943:28">gen_uxth</name><argument_list pos:start="943:29" pos:end="943:33">(<argument pos:start="943:30" pos:end="943:32"><expr pos:start="943:30" pos:end="943:32"><name pos:start="943:30" pos:end="943:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="943:36" pos:end="943:41">break;</break>

            <case pos:start="945:13" pos:end="945:19">case <expr pos:start="945:18" pos:end="945:18"><literal type="number" pos:start="945:18" pos:end="945:18">3</literal></expr>:</case> <expr_stmt pos:start="945:21" pos:end="945:34"><expr pos:start="945:21" pos:end="945:33"><call pos:start="945:21" pos:end="945:33"><name pos:start="945:21" pos:end="945:28">gen_uxtb</name><argument_list pos:start="945:29" pos:end="945:33">(<argument pos:start="945:30" pos:end="945:32"><expr pos:start="945:30" pos:end="945:32"><name pos:start="945:30" pos:end="945:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="945:36" pos:end="945:41">break;</break>

            </block_content>}</block></switch>

            <expr_stmt pos:start="949:13" pos:end="949:34"><expr pos:start="949:13" pos:end="949:33"><call pos:start="949:13" pos:end="949:33"><name pos:start="949:13" pos:end="949:21">store_reg</name><argument_list pos:start="949:22" pos:end="949:33">(<argument pos:start="949:23" pos:end="949:23"><expr pos:start="949:23" pos:end="949:23"><name pos:start="949:23" pos:end="949:23">s</name></expr></argument>, <argument pos:start="949:26" pos:end="949:27"><expr pos:start="949:26" pos:end="949:27"><name pos:start="949:26" pos:end="949:27">rd</name></expr></argument>, <argument pos:start="949:30" pos:end="949:32"><expr pos:start="949:30" pos:end="949:32"><name pos:start="949:30" pos:end="949:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="951:13" pos:end="951:18">break;</break>

        <case pos:start="953:9" pos:end="953:15">case <expr pos:start="953:14" pos:end="953:14"><literal type="number" pos:start="953:14" pos:end="953:14">4</literal></expr>:</case> <case pos:start="953:17" pos:end="953:23">case <expr pos:start="953:22" pos:end="953:22"><literal type="number" pos:start="953:22" pos:end="953:22">5</literal></expr>:</case> <case pos:start="953:25" pos:end="953:33">case <expr pos:start="953:30" pos:end="953:32"><literal type="number" pos:start="953:30" pos:end="953:32">0xc</literal></expr>:</case> <case pos:start="953:35" pos:end="953:43">case <expr pos:start="953:40" pos:end="953:42"><literal type="number" pos:start="953:40" pos:end="953:42">0xd</literal></expr>:</case>

            <comment type="block" pos:start="955:13" pos:end="955:26">/* push/pop */</comment>

            <expr_stmt pos:start="957:13" pos:end="957:35"><expr pos:start="957:13" pos:end="957:34"><name pos:start="957:13" pos:end="957:16">addr</name> <operator pos:start="957:18" pos:end="957:18">=</operator> <call pos:start="957:20" pos:end="957:34"><name pos:start="957:20" pos:end="957:27">load_reg</name><argument_list pos:start="957:28" pos:end="957:34">(<argument pos:start="957:29" pos:end="957:29"><expr pos:start="957:29" pos:end="957:29"><name pos:start="957:29" pos:end="957:29">s</name></expr></argument>, <argument pos:start="957:32" pos:end="957:33"><expr pos:start="957:32" pos:end="957:33"><literal type="number" pos:start="957:32" pos:end="957:33">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="959:13" pos:end="965:27"><if pos:start="959:13" pos:end="961:27">if <condition pos:start="959:16" pos:end="959:32">(<expr pos:start="959:17" pos:end="959:31"><name pos:start="959:17" pos:end="959:20">insn</name> <operator pos:start="959:22" pos:end="959:22">&amp;</operator> <operator pos:start="959:24" pos:end="959:24">(</operator><literal type="number" pos:start="959:25" pos:end="959:25">1</literal> <operator pos:start="959:27" pos:end="959:28">&lt;&lt;</operator> <literal type="number" pos:start="959:30" pos:end="959:30">8</literal><operator pos:start="959:31" pos:end="959:31">)</operator></expr>)</condition><block type="pseudo" pos:start="961:17" pos:end="961:27"><block_content pos:start="961:17" pos:end="961:27">

                <expr_stmt pos:start="961:17" pos:end="961:27"><expr pos:start="961:17" pos:end="961:26"><name pos:start="961:17" pos:end="961:22">offset</name> <operator pos:start="961:24" pos:end="961:24">=</operator> <literal type="number" pos:start="961:26" pos:end="961:26">4</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="963:13" pos:end="965:27">else<block type="pseudo" pos:start="965:17" pos:end="965:27"><block_content pos:start="965:17" pos:end="965:27">

                <expr_stmt pos:start="965:17" pos:end="965:27"><expr pos:start="965:17" pos:end="965:26"><name pos:start="965:17" pos:end="965:22">offset</name> <operator pos:start="965:24" pos:end="965:24">=</operator> <literal type="number" pos:start="965:26" pos:end="965:26">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <for pos:start="967:13" pos:end="973:13">for <control pos:start="967:17" pos:end="967:35">(<init pos:start="967:18" pos:end="967:23"><expr pos:start="967:18" pos:end="967:22"><name pos:start="967:18" pos:end="967:18">i</name> <operator pos:start="967:20" pos:end="967:20">=</operator> <literal type="number" pos:start="967:22" pos:end="967:22">0</literal></expr>;</init> <condition pos:start="967:25" pos:end="967:30"><expr pos:start="967:25" pos:end="967:29"><name pos:start="967:25" pos:end="967:25">i</name> <operator pos:start="967:27" pos:end="967:27">&lt;</operator> <literal type="number" pos:start="967:29" pos:end="967:29">8</literal></expr>;</condition> <incr pos:start="967:32" pos:end="967:34"><expr pos:start="967:32" pos:end="967:34"><name pos:start="967:32" pos:end="967:32">i</name><operator pos:start="967:33" pos:end="967:34">++</operator></expr></incr>)</control> <block pos:start="967:37" pos:end="973:13">{<block_content pos:start="969:17" pos:end="971:32">

                <if_stmt pos:start="969:17" pos:end="971:32"><if pos:start="969:17" pos:end="971:32">if <condition pos:start="969:20" pos:end="969:36">(<expr pos:start="969:21" pos:end="969:35"><name pos:start="969:21" pos:end="969:24">insn</name> <operator pos:start="969:26" pos:end="969:26">&amp;</operator> <operator pos:start="969:28" pos:end="969:28">(</operator><literal type="number" pos:start="969:29" pos:end="969:29">1</literal> <operator pos:start="969:31" pos:end="969:32">&lt;&lt;</operator> <name pos:start="969:34" pos:end="969:34">i</name><operator pos:start="969:35" pos:end="969:35">)</operator></expr>)</condition><block type="pseudo" pos:start="971:21" pos:end="971:32"><block_content pos:start="971:21" pos:end="971:32">

                    <expr_stmt pos:start="971:21" pos:end="971:32"><expr pos:start="971:21" pos:end="971:31"><name pos:start="971:21" pos:end="971:26">offset</name> <operator pos:start="971:28" pos:end="971:29">+=</operator> <literal type="number" pos:start="971:31" pos:end="971:31">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="975:13" pos:end="979:13"><if pos:start="975:13" pos:end="979:13">if <condition pos:start="975:16" pos:end="975:40">(<expr pos:start="975:17" pos:end="975:39"><operator pos:start="975:17" pos:end="975:17">(</operator><name pos:start="975:18" pos:end="975:21">insn</name> <operator pos:start="975:23" pos:end="975:23">&amp;</operator> <operator pos:start="975:25" pos:end="975:25">(</operator><literal type="number" pos:start="975:26" pos:end="975:26">1</literal> <operator pos:start="975:28" pos:end="975:29">&lt;&lt;</operator> <literal type="number" pos:start="975:31" pos:end="975:32">11</literal><operator pos:start="975:33" pos:end="975:33">)</operator><operator pos:start="975:34" pos:end="975:34">)</operator> <operator pos:start="975:36" pos:end="975:37">==</operator> <literal type="number" pos:start="975:39" pos:end="975:39">0</literal></expr>)</condition> <block pos:start="975:42" pos:end="979:13">{<block_content pos:start="977:17" pos:end="977:54">

                <expr_stmt pos:start="977:17" pos:end="977:54"><expr pos:start="977:17" pos:end="977:53"><call pos:start="977:17" pos:end="977:53"><name pos:start="977:17" pos:end="977:32">tcg_gen_addi_i32</name><argument_list pos:start="977:33" pos:end="977:53">(<argument pos:start="977:34" pos:end="977:37"><expr pos:start="977:34" pos:end="977:37"><name pos:start="977:34" pos:end="977:37">addr</name></expr></argument>, <argument pos:start="977:40" pos:end="977:43"><expr pos:start="977:40" pos:end="977:43"><name pos:start="977:40" pos:end="977:43">addr</name></expr></argument>, <argument pos:start="977:46" pos:end="977:52"><expr pos:start="977:46" pos:end="977:52"><operator pos:start="977:46" pos:end="977:46">-</operator><name pos:start="977:47" pos:end="977:52">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <for pos:start="981:13" pos:end="1013:13">for <control pos:start="981:17" pos:end="981:35">(<init pos:start="981:18" pos:end="981:23"><expr pos:start="981:18" pos:end="981:22"><name pos:start="981:18" pos:end="981:18">i</name> <operator pos:start="981:20" pos:end="981:20">=</operator> <literal type="number" pos:start="981:22" pos:end="981:22">0</literal></expr>;</init> <condition pos:start="981:25" pos:end="981:30"><expr pos:start="981:25" pos:end="981:29"><name pos:start="981:25" pos:end="981:25">i</name> <operator pos:start="981:27" pos:end="981:27">&lt;</operator> <literal type="number" pos:start="981:29" pos:end="981:29">8</literal></expr>;</condition> <incr pos:start="981:32" pos:end="981:34"><expr pos:start="981:32" pos:end="981:34"><name pos:start="981:32" pos:end="981:32">i</name><operator pos:start="981:33" pos:end="981:34">++</operator></expr></incr>)</control> <block pos:start="981:37" pos:end="1013:13">{<block_content pos:start="983:17" pos:end="1011:17">

                <if_stmt pos:start="983:17" pos:end="1011:17"><if pos:start="983:17" pos:end="1011:17">if <condition pos:start="983:20" pos:end="983:36">(<expr pos:start="983:21" pos:end="983:35"><name pos:start="983:21" pos:end="983:24">insn</name> <operator pos:start="983:26" pos:end="983:26">&amp;</operator> <operator pos:start="983:28" pos:end="983:28">(</operator><literal type="number" pos:start="983:29" pos:end="983:29">1</literal> <operator pos:start="983:31" pos:end="983:32">&lt;&lt;</operator> <name pos:start="983:34" pos:end="983:34">i</name><operator pos:start="983:35" pos:end="983:35">)</operator></expr>)</condition> <block pos:start="983:38" pos:end="1011:17">{<block_content pos:start="985:21" pos:end="1009:52">

                    <if_stmt pos:start="985:21" pos:end="1005:21"><if pos:start="985:21" pos:end="995:21">if <condition pos:start="985:24" pos:end="985:41">(<expr pos:start="985:25" pos:end="985:40"><name pos:start="985:25" pos:end="985:28">insn</name> <operator pos:start="985:30" pos:end="985:30">&amp;</operator> <operator pos:start="985:32" pos:end="985:32">(</operator><literal type="number" pos:start="985:33" pos:end="985:33">1</literal> <operator pos:start="985:35" pos:end="985:36">&lt;&lt;</operator> <literal type="number" pos:start="985:38" pos:end="985:39">11</literal><operator pos:start="985:40" pos:end="985:40">)</operator></expr>)</condition> <block pos:start="985:43" pos:end="995:21">{<block_content pos:start="989:25" pos:end="993:45">

                        <comment type="block" pos:start="987:25" pos:end="987:33">/* pop */</comment>

                        <expr_stmt pos:start="989:25" pos:end="989:49"><expr pos:start="989:25" pos:end="989:48"><name pos:start="989:25" pos:end="989:27">tmp</name> <operator pos:start="989:29" pos:end="989:29">=</operator> <call pos:start="989:31" pos:end="989:48"><name pos:start="989:31" pos:end="989:46">tcg_temp_new_i32</name><argument_list pos:start="989:47" pos:end="989:48">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="991:25" pos:end="991:62"><expr pos:start="991:25" pos:end="991:61"><call pos:start="991:25" pos:end="991:61"><name pos:start="991:25" pos:end="991:38">gen_aa32_ld32u</name><argument_list pos:start="991:39" pos:end="991:61">(<argument pos:start="991:40" pos:end="991:42"><expr pos:start="991:40" pos:end="991:42"><name pos:start="991:40" pos:end="991:42">tmp</name></expr></argument>, <argument pos:start="991:45" pos:end="991:48"><expr pos:start="991:45" pos:end="991:48"><name pos:start="991:45" pos:end="991:48">addr</name></expr></argument>, <argument pos:start="991:51" pos:end="991:60"><expr pos:start="991:51" pos:end="991:60"><call pos:start="991:51" pos:end="991:60"><name pos:start="991:51" pos:end="991:57">IS_USER</name><argument_list pos:start="991:58" pos:end="991:60">(<argument pos:start="991:59" pos:end="991:59"><expr pos:start="991:59" pos:end="991:59"><name pos:start="991:59" pos:end="991:59">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="993:25" pos:end="993:45"><expr pos:start="993:25" pos:end="993:44"><call pos:start="993:25" pos:end="993:44"><name pos:start="993:25" pos:end="993:33">store_reg</name><argument_list pos:start="993:34" pos:end="993:44">(<argument pos:start="993:35" pos:end="993:35"><expr pos:start="993:35" pos:end="993:35"><name pos:start="993:35" pos:end="993:35">s</name></expr></argument>, <argument pos:start="993:38" pos:end="993:38"><expr pos:start="993:38" pos:end="993:38"><name pos:start="993:38" pos:end="993:38">i</name></expr></argument>, <argument pos:start="993:41" pos:end="993:43"><expr pos:start="993:41" pos:end="993:43"><name pos:start="993:41" pos:end="993:43">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="995:23" pos:end="1005:21">else <block pos:start="995:28" pos:end="1005:21">{<block_content pos:start="999:25" pos:end="1003:47">

                        <comment type="block" pos:start="997:25" pos:end="997:34">/* push */</comment>

                        <expr_stmt pos:start="999:25" pos:end="999:45"><expr pos:start="999:25" pos:end="999:44"><name pos:start="999:25" pos:end="999:27">tmp</name> <operator pos:start="999:29" pos:end="999:29">=</operator> <call pos:start="999:31" pos:end="999:44"><name pos:start="999:31" pos:end="999:38">load_reg</name><argument_list pos:start="999:39" pos:end="999:44">(<argument pos:start="999:40" pos:end="999:40"><expr pos:start="999:40" pos:end="999:40"><name pos:start="999:40" pos:end="999:40">s</name></expr></argument>, <argument pos:start="999:43" pos:end="999:43"><expr pos:start="999:43" pos:end="999:43"><name pos:start="999:43" pos:end="999:43">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1001:25" pos:end="1001:61"><expr pos:start="1001:25" pos:end="1001:60"><call pos:start="1001:25" pos:end="1001:60"><name pos:start="1001:25" pos:end="1001:37">gen_aa32_st32</name><argument_list pos:start="1001:38" pos:end="1001:60">(<argument pos:start="1001:39" pos:end="1001:41"><expr pos:start="1001:39" pos:end="1001:41"><name pos:start="1001:39" pos:end="1001:41">tmp</name></expr></argument>, <argument pos:start="1001:44" pos:end="1001:47"><expr pos:start="1001:44" pos:end="1001:47"><name pos:start="1001:44" pos:end="1001:47">addr</name></expr></argument>, <argument pos:start="1001:50" pos:end="1001:59"><expr pos:start="1001:50" pos:end="1001:59"><call pos:start="1001:50" pos:end="1001:59"><name pos:start="1001:50" pos:end="1001:56">IS_USER</name><argument_list pos:start="1001:57" pos:end="1001:59">(<argument pos:start="1001:58" pos:end="1001:58"><expr pos:start="1001:58" pos:end="1001:58"><name pos:start="1001:58" pos:end="1001:58">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1003:25" pos:end="1003:47"><expr pos:start="1003:25" pos:end="1003:46"><call pos:start="1003:25" pos:end="1003:46"><name pos:start="1003:25" pos:end="1003:41">tcg_temp_free_i32</name><argument_list pos:start="1003:42" pos:end="1003:46">(<argument pos:start="1003:43" pos:end="1003:45"><expr pos:start="1003:43" pos:end="1003:45"><name pos:start="1003:43" pos:end="1003:45">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <comment type="block" pos:start="1007:21" pos:end="1007:55">/* advance to the next address.  */</comment>

                    <expr_stmt pos:start="1009:21" pos:end="1009:52"><expr pos:start="1009:21" pos:end="1009:51"><call pos:start="1009:21" pos:end="1009:51"><name pos:start="1009:21" pos:end="1009:36">tcg_gen_addi_i32</name><argument_list pos:start="1009:37" pos:end="1009:51">(<argument pos:start="1009:38" pos:end="1009:41"><expr pos:start="1009:38" pos:end="1009:41"><name pos:start="1009:38" pos:end="1009:41">addr</name></expr></argument>, <argument pos:start="1009:44" pos:end="1009:47"><expr pos:start="1009:44" pos:end="1009:47"><name pos:start="1009:44" pos:end="1009:47">addr</name></expr></argument>, <argument pos:start="1009:50" pos:end="1009:50"><expr pos:start="1009:50" pos:end="1009:50"><literal type="number" pos:start="1009:50" pos:end="1009:50">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="1015:13" pos:end="1015:33"><expr pos:start="1015:13" pos:end="1015:32"><call pos:start="1015:13" pos:end="1015:32"><name pos:start="1015:13" pos:end="1015:27">TCGV_UNUSED_I32</name><argument_list pos:start="1015:28" pos:end="1015:32">(<argument pos:start="1015:29" pos:end="1015:31"><expr pos:start="1015:29" pos:end="1015:31"><name pos:start="1015:29" pos:end="1015:31">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1017:13" pos:end="1045:13"><if pos:start="1017:13" pos:end="1045:13">if <condition pos:start="1017:16" pos:end="1017:32">(<expr pos:start="1017:17" pos:end="1017:31"><name pos:start="1017:17" pos:end="1017:20">insn</name> <operator pos:start="1017:22" pos:end="1017:22">&amp;</operator> <operator pos:start="1017:24" pos:end="1017:24">(</operator><literal type="number" pos:start="1017:25" pos:end="1017:25">1</literal> <operator pos:start="1017:27" pos:end="1017:28">&lt;&lt;</operator> <literal type="number" pos:start="1017:30" pos:end="1017:30">8</literal><operator pos:start="1017:31" pos:end="1017:31">)</operator></expr>)</condition> <block pos:start="1017:34" pos:end="1045:13">{<block_content pos:start="1019:17" pos:end="1043:48">

                <if_stmt pos:start="1019:17" pos:end="1041:17"><if pos:start="1019:17" pos:end="1031:17">if <condition pos:start="1019:20" pos:end="1019:37">(<expr pos:start="1019:21" pos:end="1019:36"><name pos:start="1019:21" pos:end="1019:24">insn</name> <operator pos:start="1019:26" pos:end="1019:26">&amp;</operator> <operator pos:start="1019:28" pos:end="1019:28">(</operator><literal type="number" pos:start="1019:29" pos:end="1019:29">1</literal> <operator pos:start="1019:31" pos:end="1019:32">&lt;&lt;</operator> <literal type="number" pos:start="1019:34" pos:end="1019:35">11</literal><operator pos:start="1019:36" pos:end="1019:36">)</operator></expr>)</condition> <block pos:start="1019:39" pos:end="1031:17">{<block_content pos:start="1023:21" pos:end="1025:58">

                    <comment type="block" pos:start="1021:21" pos:end="1021:32">/* pop pc */</comment>

                    <expr_stmt pos:start="1023:21" pos:end="1023:45"><expr pos:start="1023:21" pos:end="1023:44"><name pos:start="1023:21" pos:end="1023:23">tmp</name> <operator pos:start="1023:25" pos:end="1023:25">=</operator> <call pos:start="1023:27" pos:end="1023:44"><name pos:start="1023:27" pos:end="1023:42">tcg_temp_new_i32</name><argument_list pos:start="1023:43" pos:end="1023:44">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1025:21" pos:end="1025:58"><expr pos:start="1025:21" pos:end="1025:57"><call pos:start="1025:21" pos:end="1025:57"><name pos:start="1025:21" pos:end="1025:34">gen_aa32_ld32u</name><argument_list pos:start="1025:35" pos:end="1025:57">(<argument pos:start="1025:36" pos:end="1025:38"><expr pos:start="1025:36" pos:end="1025:38"><name pos:start="1025:36" pos:end="1025:38">tmp</name></expr></argument>, <argument pos:start="1025:41" pos:end="1025:44"><expr pos:start="1025:41" pos:end="1025:44"><name pos:start="1025:41" pos:end="1025:44">addr</name></expr></argument>, <argument pos:start="1025:47" pos:end="1025:56"><expr pos:start="1025:47" pos:end="1025:56"><call pos:start="1025:47" pos:end="1025:56"><name pos:start="1025:47" pos:end="1025:53">IS_USER</name><argument_list pos:start="1025:54" pos:end="1025:56">(<argument pos:start="1025:55" pos:end="1025:55"><expr pos:start="1025:55" pos:end="1025:55"><name pos:start="1025:55" pos:end="1025:55">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block" pos:start="1027:21" pos:end="1029:39">/* don't set the pc until the rest of the instruction

                       has completed */</comment>

                </block_content>}</block></if> <else pos:start="1031:19" pos:end="1041:17">else <block pos:start="1031:24" pos:end="1041:17">{<block_content pos:start="1035:21" pos:end="1039:43">

                    <comment type="block" pos:start="1033:21" pos:end="1033:33">/* push lr */</comment>

                    <expr_stmt pos:start="1035:21" pos:end="1035:42"><expr pos:start="1035:21" pos:end="1035:41"><name pos:start="1035:21" pos:end="1035:23">tmp</name> <operator pos:start="1035:25" pos:end="1035:25">=</operator> <call pos:start="1035:27" pos:end="1035:41"><name pos:start="1035:27" pos:end="1035:34">load_reg</name><argument_list pos:start="1035:35" pos:end="1035:41">(<argument pos:start="1035:36" pos:end="1035:36"><expr pos:start="1035:36" pos:end="1035:36"><name pos:start="1035:36" pos:end="1035:36">s</name></expr></argument>, <argument pos:start="1035:39" pos:end="1035:40"><expr pos:start="1035:39" pos:end="1035:40"><literal type="number" pos:start="1035:39" pos:end="1035:40">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1037:21" pos:end="1037:57"><expr pos:start="1037:21" pos:end="1037:56"><call pos:start="1037:21" pos:end="1037:56"><name pos:start="1037:21" pos:end="1037:33">gen_aa32_st32</name><argument_list pos:start="1037:34" pos:end="1037:56">(<argument pos:start="1037:35" pos:end="1037:37"><expr pos:start="1037:35" pos:end="1037:37"><name pos:start="1037:35" pos:end="1037:37">tmp</name></expr></argument>, <argument pos:start="1037:40" pos:end="1037:43"><expr pos:start="1037:40" pos:end="1037:43"><name pos:start="1037:40" pos:end="1037:43">addr</name></expr></argument>, <argument pos:start="1037:46" pos:end="1037:55"><expr pos:start="1037:46" pos:end="1037:55"><call pos:start="1037:46" pos:end="1037:55"><name pos:start="1037:46" pos:end="1037:52">IS_USER</name><argument_list pos:start="1037:53" pos:end="1037:55">(<argument pos:start="1037:54" pos:end="1037:54"><expr pos:start="1037:54" pos:end="1037:54"><name pos:start="1037:54" pos:end="1037:54">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1039:21" pos:end="1039:43"><expr pos:start="1039:21" pos:end="1039:42"><call pos:start="1039:21" pos:end="1039:42"><name pos:start="1039:21" pos:end="1039:37">tcg_temp_free_i32</name><argument_list pos:start="1039:38" pos:end="1039:42">(<argument pos:start="1039:39" pos:end="1039:41"><expr pos:start="1039:39" pos:end="1039:41"><name pos:start="1039:39" pos:end="1039:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="1043:17" pos:end="1043:48"><expr pos:start="1043:17" pos:end="1043:47"><call pos:start="1043:17" pos:end="1043:47"><name pos:start="1043:17" pos:end="1043:32">tcg_gen_addi_i32</name><argument_list pos:start="1043:33" pos:end="1043:47">(<argument pos:start="1043:34" pos:end="1043:37"><expr pos:start="1043:34" pos:end="1043:37"><name pos:start="1043:34" pos:end="1043:37">addr</name></expr></argument>, <argument pos:start="1043:40" pos:end="1043:43"><expr pos:start="1043:40" pos:end="1043:43"><name pos:start="1043:40" pos:end="1043:43">addr</name></expr></argument>, <argument pos:start="1043:46" pos:end="1043:46"><expr pos:start="1043:46" pos:end="1043:46"><literal type="number" pos:start="1043:46" pos:end="1043:46">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="1047:13" pos:end="1051:13"><if pos:start="1047:13" pos:end="1051:13">if <condition pos:start="1047:16" pos:end="1047:40">(<expr pos:start="1047:17" pos:end="1047:39"><operator pos:start="1047:17" pos:end="1047:17">(</operator><name pos:start="1047:18" pos:end="1047:21">insn</name> <operator pos:start="1047:23" pos:end="1047:23">&amp;</operator> <operator pos:start="1047:25" pos:end="1047:25">(</operator><literal type="number" pos:start="1047:26" pos:end="1047:26">1</literal> <operator pos:start="1047:28" pos:end="1047:29">&lt;&lt;</operator> <literal type="number" pos:start="1047:31" pos:end="1047:32">11</literal><operator pos:start="1047:33" pos:end="1047:33">)</operator><operator pos:start="1047:34" pos:end="1047:34">)</operator> <operator pos:start="1047:36" pos:end="1047:37">==</operator> <literal type="number" pos:start="1047:39" pos:end="1047:39">0</literal></expr>)</condition> <block pos:start="1047:42" pos:end="1051:13">{<block_content pos:start="1049:17" pos:end="1049:54">

                <expr_stmt pos:start="1049:17" pos:end="1049:54"><expr pos:start="1049:17" pos:end="1049:53"><call pos:start="1049:17" pos:end="1049:53"><name pos:start="1049:17" pos:end="1049:32">tcg_gen_addi_i32</name><argument_list pos:start="1049:33" pos:end="1049:53">(<argument pos:start="1049:34" pos:end="1049:37"><expr pos:start="1049:34" pos:end="1049:37"><name pos:start="1049:34" pos:end="1049:37">addr</name></expr></argument>, <argument pos:start="1049:40" pos:end="1049:43"><expr pos:start="1049:40" pos:end="1049:43"><name pos:start="1049:40" pos:end="1049:43">addr</name></expr></argument>, <argument pos:start="1049:46" pos:end="1049:52"><expr pos:start="1049:46" pos:end="1049:52"><operator pos:start="1049:46" pos:end="1049:46">-</operator><name pos:start="1049:47" pos:end="1049:52">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="1053:13" pos:end="1053:50">/* write back the new stack pointer */</comment>

            <expr_stmt pos:start="1055:13" pos:end="1055:35"><expr pos:start="1055:13" pos:end="1055:34"><call pos:start="1055:13" pos:end="1055:34"><name pos:start="1055:13" pos:end="1055:21">store_reg</name><argument_list pos:start="1055:22" pos:end="1055:34">(<argument pos:start="1055:23" pos:end="1055:23"><expr pos:start="1055:23" pos:end="1055:23"><name pos:start="1055:23" pos:end="1055:23">s</name></expr></argument>, <argument pos:start="1055:26" pos:end="1055:27"><expr pos:start="1055:26" pos:end="1055:27"><literal type="number" pos:start="1055:26" pos:end="1055:27">13</literal></expr></argument>, <argument pos:start="1055:30" pos:end="1055:33"><expr pos:start="1055:30" pos:end="1055:33"><name pos:start="1055:30" pos:end="1055:33">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="1057:13" pos:end="1057:38">/* set the new PC value */</comment>

            <if_stmt pos:start="1059:13" pos:end="1063:13"><if pos:start="1059:13" pos:end="1063:13">if <condition pos:start="1059:16" pos:end="1059:42">(<expr pos:start="1059:17" pos:end="1059:41"><operator pos:start="1059:17" pos:end="1059:17">(</operator><name pos:start="1059:18" pos:end="1059:21">insn</name> <operator pos:start="1059:23" pos:end="1059:23">&amp;</operator> <literal type="number" pos:start="1059:25" pos:end="1059:30">0x0900</literal><operator pos:start="1059:31" pos:end="1059:31">)</operator> <operator pos:start="1059:33" pos:end="1059:34">==</operator> <literal type="number" pos:start="1059:36" pos:end="1059:41">0x0900</literal></expr>)</condition> <block pos:start="1059:44" pos:end="1063:13">{<block_content pos:start="1061:17" pos:end="1061:53">

                <expr_stmt pos:start="1061:17" pos:end="1061:53"><expr pos:start="1061:17" pos:end="1061:52"><call pos:start="1061:17" pos:end="1061:52"><name pos:start="1061:17" pos:end="1061:35">store_reg_from_load</name><argument_list pos:start="1061:36" pos:end="1061:52">(<argument pos:start="1061:37" pos:end="1061:39"><expr pos:start="1061:37" pos:end="1061:39"><name pos:start="1061:37" pos:end="1061:39">env</name></expr></argument>, <argument pos:start="1061:42" pos:end="1061:42"><expr pos:start="1061:42" pos:end="1061:42"><name pos:start="1061:42" pos:end="1061:42">s</name></expr></argument>, <argument pos:start="1061:45" pos:end="1061:46"><expr pos:start="1061:45" pos:end="1061:46"><literal type="number" pos:start="1061:45" pos:end="1061:46">15</literal></expr></argument>, <argument pos:start="1061:49" pos:end="1061:51"><expr pos:start="1061:49" pos:end="1061:51"><name pos:start="1061:49" pos:end="1061:51">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="1065:13" pos:end="1065:18">break;</break>



        <case pos:start="1069:9" pos:end="1069:15">case <expr pos:start="1069:14" pos:end="1069:14"><literal type="number" pos:start="1069:14" pos:end="1069:14">1</literal></expr>:</case> <case pos:start="1069:17" pos:end="1069:23">case <expr pos:start="1069:22" pos:end="1069:22"><literal type="number" pos:start="1069:22" pos:end="1069:22">3</literal></expr>:</case> <case pos:start="1069:25" pos:end="1069:31">case <expr pos:start="1069:30" pos:end="1069:30"><literal type="number" pos:start="1069:30" pos:end="1069:30">9</literal></expr>:</case> <case pos:start="1069:33" pos:end="1069:40">case <expr pos:start="1069:38" pos:end="1069:39"><literal type="number" pos:start="1069:38" pos:end="1069:39">11</literal></expr>:</case> <comment type="block" pos:start="1069:42" pos:end="1069:50">/* czb */</comment>

            <expr_stmt pos:start="1071:13" pos:end="1071:26"><expr pos:start="1071:13" pos:end="1071:25"><name pos:start="1071:13" pos:end="1071:14">rm</name> <operator pos:start="1071:16" pos:end="1071:16">=</operator> <name pos:start="1071:18" pos:end="1071:21">insn</name> <operator pos:start="1071:23" pos:end="1071:23">&amp;</operator> <literal type="number" pos:start="1071:25" pos:end="1071:25">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1073:13" pos:end="1073:34"><expr pos:start="1073:13" pos:end="1073:33"><name pos:start="1073:13" pos:end="1073:15">tmp</name> <operator pos:start="1073:17" pos:end="1073:17">=</operator> <call pos:start="1073:19" pos:end="1073:33"><name pos:start="1073:19" pos:end="1073:26">load_reg</name><argument_list pos:start="1073:27" pos:end="1073:33">(<argument pos:start="1073:28" pos:end="1073:28"><expr pos:start="1073:28" pos:end="1073:28"><name pos:start="1073:28" pos:end="1073:28">s</name></expr></argument>, <argument pos:start="1073:31" pos:end="1073:32"><expr pos:start="1073:31" pos:end="1073:32"><name pos:start="1073:31" pos:end="1073:32">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1075:13" pos:end="1075:43"><expr pos:start="1075:13" pos:end="1075:42"><name pos:start="1075:13" pos:end="1075:24"><name pos:start="1075:13" pos:end="1075:13">s</name><operator pos:start="1075:14" pos:end="1075:15">-&gt;</operator><name pos:start="1075:16" pos:end="1075:24">condlabel</name></name> <operator pos:start="1075:26" pos:end="1075:26">=</operator> <call pos:start="1075:28" pos:end="1075:42"><name pos:start="1075:28" pos:end="1075:40">gen_new_label</name><argument_list pos:start="1075:41" pos:end="1075:42">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1077:13" pos:end="1077:27"><expr pos:start="1077:13" pos:end="1077:26"><name pos:start="1077:13" pos:end="1077:22"><name pos:start="1077:13" pos:end="1077:13">s</name><operator pos:start="1077:14" pos:end="1077:15">-&gt;</operator><name pos:start="1077:16" pos:end="1077:22">condjmp</name></name> <operator pos:start="1077:24" pos:end="1077:24">=</operator> <literal type="number" pos:start="1077:26" pos:end="1077:26">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="1079:13" pos:end="1085:71"><if pos:start="1079:13" pos:end="1081:71">if <condition pos:start="1079:16" pos:end="1079:33">(<expr pos:start="1079:17" pos:end="1079:32"><name pos:start="1079:17" pos:end="1079:20">insn</name> <operator pos:start="1079:22" pos:end="1079:22">&amp;</operator> <operator pos:start="1079:24" pos:end="1079:24">(</operator><literal type="number" pos:start="1079:25" pos:end="1079:25">1</literal> <operator pos:start="1079:27" pos:end="1079:28">&lt;&lt;</operator> <literal type="number" pos:start="1079:30" pos:end="1079:31">11</literal><operator pos:start="1079:32" pos:end="1079:32">)</operator></expr>)</condition><block type="pseudo" pos:start="1081:17" pos:end="1081:71"><block_content pos:start="1081:17" pos:end="1081:71">

                <expr_stmt pos:start="1081:17" pos:end="1081:71"><expr pos:start="1081:17" pos:end="1081:70"><call pos:start="1081:17" pos:end="1081:70"><name pos:start="1081:17" pos:end="1081:35">tcg_gen_brcondi_i32</name><argument_list pos:start="1081:36" pos:end="1081:70">(<argument pos:start="1081:37" pos:end="1081:47"><expr pos:start="1081:37" pos:end="1081:47"><name pos:start="1081:37" pos:end="1081:47">TCG_COND_EQ</name></expr></argument>, <argument pos:start="1081:50" pos:end="1081:52"><expr pos:start="1081:50" pos:end="1081:52"><name pos:start="1081:50" pos:end="1081:52">tmp</name></expr></argument>, <argument pos:start="1081:55" pos:end="1081:55"><expr pos:start="1081:55" pos:end="1081:55"><literal type="number" pos:start="1081:55" pos:end="1081:55">0</literal></expr></argument>, <argument pos:start="1081:58" pos:end="1081:69"><expr pos:start="1081:58" pos:end="1081:69"><name pos:start="1081:58" pos:end="1081:69"><name pos:start="1081:58" pos:end="1081:58">s</name><operator pos:start="1081:59" pos:end="1081:60">-&gt;</operator><name pos:start="1081:61" pos:end="1081:69">condlabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="1083:13" pos:end="1085:71">else<block type="pseudo" pos:start="1085:17" pos:end="1085:71"><block_content pos:start="1085:17" pos:end="1085:71">

                <expr_stmt pos:start="1085:17" pos:end="1085:71"><expr pos:start="1085:17" pos:end="1085:70"><call pos:start="1085:17" pos:end="1085:70"><name pos:start="1085:17" pos:end="1085:35">tcg_gen_brcondi_i32</name><argument_list pos:start="1085:36" pos:end="1085:70">(<argument pos:start="1085:37" pos:end="1085:47"><expr pos:start="1085:37" pos:end="1085:47"><name pos:start="1085:37" pos:end="1085:47">TCG_COND_NE</name></expr></argument>, <argument pos:start="1085:50" pos:end="1085:52"><expr pos:start="1085:50" pos:end="1085:52"><name pos:start="1085:50" pos:end="1085:52">tmp</name></expr></argument>, <argument pos:start="1085:55" pos:end="1085:55"><expr pos:start="1085:55" pos:end="1085:55"><literal type="number" pos:start="1085:55" pos:end="1085:55">0</literal></expr></argument>, <argument pos:start="1085:58" pos:end="1085:69"><expr pos:start="1085:58" pos:end="1085:69"><name pos:start="1085:58" pos:end="1085:69"><name pos:start="1085:58" pos:end="1085:58">s</name><operator pos:start="1085:59" pos:end="1085:60">-&gt;</operator><name pos:start="1085:61" pos:end="1085:69">condlabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="1087:13" pos:end="1087:35"><expr pos:start="1087:13" pos:end="1087:34"><call pos:start="1087:13" pos:end="1087:34"><name pos:start="1087:13" pos:end="1087:29">tcg_temp_free_i32</name><argument_list pos:start="1087:30" pos:end="1087:34">(<argument pos:start="1087:31" pos:end="1087:33"><expr pos:start="1087:31" pos:end="1087:33"><name pos:start="1087:31" pos:end="1087:33">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1089:13" pos:end="1089:64"><expr pos:start="1089:13" pos:end="1089:63"><name pos:start="1089:13" pos:end="1089:18">offset</name> <operator pos:start="1089:20" pos:end="1089:20">=</operator> <operator pos:start="1089:22" pos:end="1089:22">(</operator><operator pos:start="1089:23" pos:end="1089:23">(</operator><name pos:start="1089:24" pos:end="1089:27">insn</name> <operator pos:start="1089:29" pos:end="1089:29">&amp;</operator> <literal type="number" pos:start="1089:31" pos:end="1089:34">0xf8</literal><operator pos:start="1089:35" pos:end="1089:35">)</operator> <operator pos:start="1089:37" pos:end="1089:38">&gt;&gt;</operator> <literal type="number" pos:start="1089:40" pos:end="1089:40">2</literal><operator pos:start="1089:41" pos:end="1089:41">)</operator> <operator pos:start="1089:43" pos:end="1089:43">|</operator> <operator pos:start="1089:45" pos:end="1089:45">(</operator><name pos:start="1089:46" pos:end="1089:49">insn</name> <operator pos:start="1089:51" pos:end="1089:51">&amp;</operator> <literal type="number" pos:start="1089:53" pos:end="1089:57">0x200</literal><operator pos:start="1089:58" pos:end="1089:58">)</operator> <operator pos:start="1089:60" pos:end="1089:61">&gt;&gt;</operator> <literal type="number" pos:start="1089:63" pos:end="1089:63">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1091:13" pos:end="1091:38"><expr pos:start="1091:13" pos:end="1091:37"><name pos:start="1091:13" pos:end="1091:15">val</name> <operator pos:start="1091:17" pos:end="1091:17">=</operator> <operator pos:start="1091:19" pos:end="1091:19">(</operator><name pos:start="1091:20" pos:end="1091:27">uint32_t</name><operator pos:start="1091:28" pos:end="1091:28">)</operator><name pos:start="1091:29" pos:end="1091:33"><name pos:start="1091:29" pos:end="1091:29">s</name><operator pos:start="1091:30" pos:end="1091:31">-&gt;</operator><name pos:start="1091:32" pos:end="1091:33">pc</name></name> <operator pos:start="1091:35" pos:end="1091:35">+</operator> <literal type="number" pos:start="1091:37" pos:end="1091:37">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1093:13" pos:end="1093:26"><expr pos:start="1093:13" pos:end="1093:25"><name pos:start="1093:13" pos:end="1093:15">val</name> <operator pos:start="1093:17" pos:end="1093:18">+=</operator> <name pos:start="1093:20" pos:end="1093:25">offset</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1095:13" pos:end="1095:28"><expr pos:start="1095:13" pos:end="1095:27"><call pos:start="1095:13" pos:end="1095:27"><name pos:start="1095:13" pos:end="1095:19">gen_jmp</name><argument_list pos:start="1095:20" pos:end="1095:27">(<argument pos:start="1095:21" pos:end="1095:21"><expr pos:start="1095:21" pos:end="1095:21"><name pos:start="1095:21" pos:end="1095:21">s</name></expr></argument>, <argument pos:start="1095:24" pos:end="1095:26"><expr pos:start="1095:24" pos:end="1095:26"><name pos:start="1095:24" pos:end="1095:26">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1097:13" pos:end="1097:18">break;</break>



        <case pos:start="1101:9" pos:end="1101:16">case <expr pos:start="1101:14" pos:end="1101:15"><literal type="number" pos:start="1101:14" pos:end="1101:15">15</literal></expr>:</case> <comment type="block" pos:start="1101:18" pos:end="1101:37">/* IT, nop-hint.  */</comment>

            <if_stmt pos:start="1103:13" pos:end="1109:13"><if pos:start="1103:13" pos:end="1109:13">if <condition pos:start="1103:16" pos:end="1103:34">(<expr pos:start="1103:17" pos:end="1103:33"><operator pos:start="1103:17" pos:end="1103:17">(</operator><name pos:start="1103:18" pos:end="1103:21">insn</name> <operator pos:start="1103:23" pos:end="1103:23">&amp;</operator> <literal type="number" pos:start="1103:25" pos:end="1103:27">0xf</literal><operator pos:start="1103:28" pos:end="1103:28">)</operator> <operator pos:start="1103:30" pos:end="1103:31">==</operator> <literal type="number" pos:start="1103:33" pos:end="1103:33">0</literal></expr>)</condition> <block pos:start="1103:36" pos:end="1109:13">{<block_content pos:start="1105:17" pos:end="1107:22">

                <expr_stmt pos:start="1105:17" pos:end="1105:51"><expr pos:start="1105:17" pos:end="1105:50"><call pos:start="1105:17" pos:end="1105:50"><name pos:start="1105:17" pos:end="1105:28">gen_nop_hint</name><argument_list pos:start="1105:29" pos:end="1105:50">(<argument pos:start="1105:30" pos:end="1105:30"><expr pos:start="1105:30" pos:end="1105:30"><name pos:start="1105:30" pos:end="1105:30">s</name></expr></argument>, <argument pos:start="1105:33" pos:end="1105:49"><expr pos:start="1105:33" pos:end="1105:49"><operator pos:start="1105:33" pos:end="1105:33">(</operator><name pos:start="1105:34" pos:end="1105:37">insn</name> <operator pos:start="1105:39" pos:end="1105:40">&gt;&gt;</operator> <literal type="number" pos:start="1105:42" pos:end="1105:42">4</literal><operator pos:start="1105:43" pos:end="1105:43">)</operator> <operator pos:start="1105:45" pos:end="1105:45">&amp;</operator> <literal type="number" pos:start="1105:47" pos:end="1105:49">0xf</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1107:17" pos:end="1107:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="1111:13" pos:end="1111:27">/* If Then.  */</comment>

            <expr_stmt pos:start="1113:13" pos:end="1113:49"><expr pos:start="1113:13" pos:end="1113:48"><name pos:start="1113:13" pos:end="1113:28"><name pos:start="1113:13" pos:end="1113:13">s</name><operator pos:start="1113:14" pos:end="1113:15">-&gt;</operator><name pos:start="1113:16" pos:end="1113:28">condexec_cond</name></name> <operator pos:start="1113:30" pos:end="1113:30">=</operator> <operator pos:start="1113:32" pos:end="1113:32">(</operator><name pos:start="1113:33" pos:end="1113:36">insn</name> <operator pos:start="1113:38" pos:end="1113:39">&gt;&gt;</operator> <literal type="number" pos:start="1113:41" pos:end="1113:41">4</literal><operator pos:start="1113:42" pos:end="1113:42">)</operator> <operator pos:start="1113:44" pos:end="1113:44">&amp;</operator> <literal type="number" pos:start="1113:46" pos:end="1113:48">0xe</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1115:13" pos:end="1115:43"><expr pos:start="1115:13" pos:end="1115:42"><name pos:start="1115:13" pos:end="1115:28"><name pos:start="1115:13" pos:end="1115:13">s</name><operator pos:start="1115:14" pos:end="1115:15">-&gt;</operator><name pos:start="1115:16" pos:end="1115:28">condexec_mask</name></name> <operator pos:start="1115:30" pos:end="1115:30">=</operator> <name pos:start="1115:32" pos:end="1115:35">insn</name> <operator pos:start="1115:37" pos:end="1115:37">&amp;</operator> <literal type="number" pos:start="1115:39" pos:end="1115:42">0x1f</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="1117:13" pos:end="1117:76">/* No actual code generated for this insn, just setup state.  */</comment>

            <break pos:start="1119:13" pos:end="1119:18">break;</break>



        <case pos:start="1123:9" pos:end="1123:17">case <expr pos:start="1123:14" pos:end="1123:16"><literal type="number" pos:start="1123:14" pos:end="1123:16">0xe</literal></expr>:</case> <comment type="block" pos:start="1123:19" pos:end="1123:28">/* bkpt */</comment>

            <expr_stmt pos:start="1125:13" pos:end="1125:20"><expr pos:start="1125:13" pos:end="1125:19"><call pos:start="1125:13" pos:end="1125:19"><name pos:start="1125:13" pos:end="1125:16">ARCH</name><argument_list pos:start="1125:17" pos:end="1125:19">(<argument pos:start="1125:18" pos:end="1125:18"><expr pos:start="1125:18" pos:end="1125:18"><literal type="number" pos:start="1125:18" pos:end="1125:18">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1127:13" pos:end="1127:48"><expr pos:start="1127:13" pos:end="1127:47"><call pos:start="1127:13" pos:end="1127:47"><name pos:start="1127:13" pos:end="1127:30">gen_exception_insn</name><argument_list pos:start="1127:31" pos:end="1127:47">(<argument pos:start="1127:32" pos:end="1127:32"><expr pos:start="1127:32" pos:end="1127:32"><name pos:start="1127:32" pos:end="1127:32">s</name></expr></argument>, <argument pos:start="1127:35" pos:end="1127:35"><expr pos:start="1127:35" pos:end="1127:35"><literal type="number" pos:start="1127:35" pos:end="1127:35">2</literal></expr></argument>, <argument pos:start="1127:38" pos:end="1127:46"><expr pos:start="1127:38" pos:end="1127:46"><name pos:start="1127:38" pos:end="1127:46">EXCP_BKPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1129:13" pos:end="1129:18">break;</break>



        <case pos:start="1133:9" pos:end="1133:17">case <expr pos:start="1133:14" pos:end="1133:16"><literal type="number" pos:start="1133:14" pos:end="1133:16">0xa</literal></expr>:</case> <comment type="block" pos:start="1133:19" pos:end="1133:27">/* rev */</comment>

            <expr_stmt pos:start="1135:13" pos:end="1135:20"><expr pos:start="1135:13" pos:end="1135:19"><call pos:start="1135:13" pos:end="1135:19"><name pos:start="1135:13" pos:end="1135:16">ARCH</name><argument_list pos:start="1135:17" pos:end="1135:19">(<argument pos:start="1135:18" pos:end="1135:18"><expr pos:start="1135:18" pos:end="1135:18"><literal type="number" pos:start="1135:18" pos:end="1135:18">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1137:13" pos:end="1137:35"><expr pos:start="1137:13" pos:end="1137:34"><name pos:start="1137:13" pos:end="1137:14">rn</name> <operator pos:start="1137:16" pos:end="1137:16">=</operator> <operator pos:start="1137:18" pos:end="1137:18">(</operator><name pos:start="1137:19" pos:end="1137:22">insn</name> <operator pos:start="1137:24" pos:end="1137:25">&gt;&gt;</operator> <literal type="number" pos:start="1137:27" pos:end="1137:27">3</literal><operator pos:start="1137:28" pos:end="1137:28">)</operator> <operator pos:start="1137:30" pos:end="1137:30">&amp;</operator> <literal type="number" pos:start="1137:32" pos:end="1137:34">0x7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1139:13" pos:end="1139:28"><expr pos:start="1139:13" pos:end="1139:27"><name pos:start="1139:13" pos:end="1139:14">rd</name> <operator pos:start="1139:16" pos:end="1139:16">=</operator> <name pos:start="1139:18" pos:end="1139:21">insn</name> <operator pos:start="1139:23" pos:end="1139:23">&amp;</operator> <literal type="number" pos:start="1139:25" pos:end="1139:27">0x7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1141:13" pos:end="1141:34"><expr pos:start="1141:13" pos:end="1141:33"><name pos:start="1141:13" pos:end="1141:15">tmp</name> <operator pos:start="1141:17" pos:end="1141:17">=</operator> <call pos:start="1141:19" pos:end="1141:33"><name pos:start="1141:19" pos:end="1141:26">load_reg</name><argument_list pos:start="1141:27" pos:end="1141:33">(<argument pos:start="1141:28" pos:end="1141:28"><expr pos:start="1141:28" pos:end="1141:28"><name pos:start="1141:28" pos:end="1141:28">s</name></expr></argument>, <argument pos:start="1141:31" pos:end="1141:32"><expr pos:start="1141:31" pos:end="1141:32"><name pos:start="1141:31" pos:end="1141:32">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="1143:13" pos:end="1153:13">switch <condition pos:start="1143:20" pos:end="1143:36">(<expr pos:start="1143:21" pos:end="1143:35"><operator pos:start="1143:21" pos:end="1143:21">(</operator><name pos:start="1143:22" pos:end="1143:25">insn</name> <operator pos:start="1143:27" pos:end="1143:28">&gt;&gt;</operator> <literal type="number" pos:start="1143:30" pos:end="1143:30">6</literal><operator pos:start="1143:31" pos:end="1143:31">)</operator> <operator pos:start="1143:33" pos:end="1143:33">&amp;</operator> <literal type="number" pos:start="1143:35" pos:end="1143:35">3</literal></expr>)</condition> <block pos:start="1143:38" pos:end="1153:13">{<block_content pos:start="1145:13" pos:end="1151:37">

            <case pos:start="1145:13" pos:end="1145:19">case <expr pos:start="1145:18" pos:end="1145:18"><literal type="number" pos:start="1145:18" pos:end="1145:18">0</literal></expr>:</case> <expr_stmt pos:start="1145:21" pos:end="1145:50"><expr pos:start="1145:21" pos:end="1145:49"><call pos:start="1145:21" pos:end="1145:49"><name pos:start="1145:21" pos:end="1145:39">tcg_gen_bswap32_i32</name><argument_list pos:start="1145:40" pos:end="1145:49">(<argument pos:start="1145:41" pos:end="1145:43"><expr pos:start="1145:41" pos:end="1145:43"><name pos:start="1145:41" pos:end="1145:43">tmp</name></expr></argument>, <argument pos:start="1145:46" pos:end="1145:48"><expr pos:start="1145:46" pos:end="1145:48"><name pos:start="1145:46" pos:end="1145:48">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="1145:52" pos:end="1145:57">break;</break>

            <case pos:start="1147:13" pos:end="1147:19">case <expr pos:start="1147:18" pos:end="1147:18"><literal type="number" pos:start="1147:18" pos:end="1147:18">1</literal></expr>:</case> <expr_stmt pos:start="1147:21" pos:end="1147:35"><expr pos:start="1147:21" pos:end="1147:34"><call pos:start="1147:21" pos:end="1147:34"><name pos:start="1147:21" pos:end="1147:29">gen_rev16</name><argument_list pos:start="1147:30" pos:end="1147:34">(<argument pos:start="1147:31" pos:end="1147:33"><expr pos:start="1147:31" pos:end="1147:33"><name pos:start="1147:31" pos:end="1147:33">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="1147:37" pos:end="1147:42">break;</break>

            <case pos:start="1149:13" pos:end="1149:19">case <expr pos:start="1149:18" pos:end="1149:18"><literal type="number" pos:start="1149:18" pos:end="1149:18">3</literal></expr>:</case> <expr_stmt pos:start="1149:21" pos:end="1149:35"><expr pos:start="1149:21" pos:end="1149:34"><call pos:start="1149:21" pos:end="1149:34"><name pos:start="1149:21" pos:end="1149:29">gen_revsh</name><argument_list pos:start="1149:30" pos:end="1149:34">(<argument pos:start="1149:31" pos:end="1149:33"><expr pos:start="1149:31" pos:end="1149:33"><name pos:start="1149:31" pos:end="1149:33">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="1149:37" pos:end="1149:42">break;</break>

            <default pos:start="1151:13" pos:end="1151:20">default:</default> <goto pos:start="1151:22" pos:end="1151:37">goto <name pos:start="1151:27" pos:end="1151:36">illegal_op</name>;</goto>

            </block_content>}</block></switch>

            <expr_stmt pos:start="1155:13" pos:end="1155:34"><expr pos:start="1155:13" pos:end="1155:33"><call pos:start="1155:13" pos:end="1155:33"><name pos:start="1155:13" pos:end="1155:21">store_reg</name><argument_list pos:start="1155:22" pos:end="1155:33">(<argument pos:start="1155:23" pos:end="1155:23"><expr pos:start="1155:23" pos:end="1155:23"><name pos:start="1155:23" pos:end="1155:23">s</name></expr></argument>, <argument pos:start="1155:26" pos:end="1155:27"><expr pos:start="1155:26" pos:end="1155:27"><name pos:start="1155:26" pos:end="1155:27">rd</name></expr></argument>, <argument pos:start="1155:30" pos:end="1155:32"><expr pos:start="1155:30" pos:end="1155:32"><name pos:start="1155:30" pos:end="1155:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1157:13" pos:end="1157:18">break;</break>



        <case pos:start="1161:9" pos:end="1161:15">case <expr pos:start="1161:14" pos:end="1161:14"><literal type="number" pos:start="1161:14" pos:end="1161:14">6</literal></expr>:</case>

            <switch pos:start="1163:13" pos:end="1249:13">switch <condition pos:start="1163:20" pos:end="1163:36">(<expr pos:start="1163:21" pos:end="1163:35"><operator pos:start="1163:21" pos:end="1163:21">(</operator><name pos:start="1163:22" pos:end="1163:25">insn</name> <operator pos:start="1163:27" pos:end="1163:28">&gt;&gt;</operator> <literal type="number" pos:start="1163:30" pos:end="1163:30">5</literal><operator pos:start="1163:31" pos:end="1163:31">)</operator> <operator pos:start="1163:33" pos:end="1163:33">&amp;</operator> <literal type="number" pos:start="1163:35" pos:end="1163:35">7</literal></expr>)</condition> <block pos:start="1163:38" pos:end="1249:13">{<block_content pos:start="1165:13" pos:end="1247:27">

            <case pos:start="1165:13" pos:end="1165:19">case <expr pos:start="1165:18" pos:end="1165:18"><literal type="number" pos:start="1165:18" pos:end="1165:18">2</literal></expr>:</case>

                <comment type="block" pos:start="1167:17" pos:end="1167:28">/* setend */</comment>

                <expr_stmt pos:start="1169:17" pos:end="1169:24"><expr pos:start="1169:17" pos:end="1169:23"><call pos:start="1169:17" pos:end="1169:23"><name pos:start="1169:17" pos:end="1169:20">ARCH</name><argument_list pos:start="1169:21" pos:end="1169:23">(<argument pos:start="1169:22" pos:end="1169:22"><expr pos:start="1169:22" pos:end="1169:22"><literal type="number" pos:start="1169:22" pos:end="1169:22">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1171:17" pos:end="1179:17"><if pos:start="1171:17" pos:end="1179:17">if <condition pos:start="1171:20" pos:end="1171:55">(<expr pos:start="1171:21" pos:end="1171:54"><operator pos:start="1171:21" pos:end="1171:21">(</operator><operator pos:start="1171:22" pos:end="1171:22">(</operator><name pos:start="1171:23" pos:end="1171:26">insn</name> <operator pos:start="1171:28" pos:end="1171:29">&gt;&gt;</operator> <literal type="number" pos:start="1171:31" pos:end="1171:31">3</literal><operator pos:start="1171:32" pos:end="1171:32">)</operator> <operator pos:start="1171:34" pos:end="1171:34">&amp;</operator> <literal type="number" pos:start="1171:36" pos:end="1171:36">1</literal><operator pos:start="1171:37" pos:end="1171:37">)</operator> <operator pos:start="1171:39" pos:end="1171:40">!=</operator> <name pos:start="1171:42" pos:end="1171:54"><name pos:start="1171:42" pos:end="1171:42">s</name><operator pos:start="1171:43" pos:end="1171:44">-&gt;</operator><name pos:start="1171:45" pos:end="1171:54">bswap_code</name></name></expr>)</condition> <block pos:start="1171:57" pos:end="1179:17">{<block_content pos:start="1175:21" pos:end="1177:36">

                    <comment type="block" pos:start="1173:21" pos:end="1173:71">/* Dynamic endianness switching not implemented. */</comment>

                    <expr_stmt pos:start="1175:21" pos:end="1175:76"><expr pos:start="1175:21" pos:end="1175:75"><call pos:start="1175:21" pos:end="1175:75"><name pos:start="1175:21" pos:end="1175:33">qemu_log_mask</name><argument_list pos:start="1175:34" pos:end="1175:75">(<argument pos:start="1175:35" pos:end="1175:43"><expr pos:start="1175:35" pos:end="1175:43"><name pos:start="1175:35" pos:end="1175:43">LOG_UNIMP</name></expr></argument>, <argument pos:start="1175:46" pos:end="1175:74"><expr pos:start="1175:46" pos:end="1175:74"><literal type="string" pos:start="1175:46" pos:end="1175:74">"arm: unimplemented setend\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="1177:21" pos:end="1177:36">goto <name pos:start="1177:26" pos:end="1177:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <break pos:start="1181:17" pos:end="1181:22">break;</break>

            <case pos:start="1183:13" pos:end="1183:19">case <expr pos:start="1183:18" pos:end="1183:18"><literal type="number" pos:start="1183:18" pos:end="1183:18">3</literal></expr>:</case>

                <comment type="block" pos:start="1185:17" pos:end="1185:25">/* cps */</comment>

                <expr_stmt pos:start="1187:17" pos:end="1187:24"><expr pos:start="1187:17" pos:end="1187:23"><call pos:start="1187:17" pos:end="1187:23"><name pos:start="1187:17" pos:end="1187:20">ARCH</name><argument_list pos:start="1187:21" pos:end="1187:23">(<argument pos:start="1187:22" pos:end="1187:22"><expr pos:start="1187:22" pos:end="1187:22"><literal type="number" pos:start="1187:22" pos:end="1187:22">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1189:17" pos:end="1193:17"><if pos:start="1189:17" pos:end="1193:17">if <condition pos:start="1189:20" pos:end="1189:31">(<expr pos:start="1189:21" pos:end="1189:30"><call pos:start="1189:21" pos:end="1189:30"><name pos:start="1189:21" pos:end="1189:27">IS_USER</name><argument_list pos:start="1189:28" pos:end="1189:30">(<argument pos:start="1189:29" pos:end="1189:29"><expr pos:start="1189:29" pos:end="1189:29"><name pos:start="1189:29" pos:end="1189:29">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1189:33" pos:end="1193:17">{<block_content pos:start="1191:21" pos:end="1191:26">

                    <break pos:start="1191:21" pos:end="1191:26">break;</break>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="1195:17" pos:end="1241:17"><if pos:start="1195:17" pos:end="1227:17">if <condition pos:start="1195:20" pos:end="1195:30">(<expr pos:start="1195:21" pos:end="1195:29"><call pos:start="1195:21" pos:end="1195:29"><name pos:start="1195:21" pos:end="1195:24">IS_M</name><argument_list pos:start="1195:25" pos:end="1195:29">(<argument pos:start="1195:26" pos:end="1195:28"><expr pos:start="1195:26" pos:end="1195:28"><name pos:start="1195:26" pos:end="1195:28">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1195:32" pos:end="1227:17">{<block_content pos:start="1197:21" pos:end="1225:37">

                    <expr_stmt pos:start="1197:21" pos:end="1197:64"><expr pos:start="1197:21" pos:end="1197:63"><name pos:start="1197:21" pos:end="1197:23">tmp</name> <operator pos:start="1197:25" pos:end="1197:25">=</operator> <call pos:start="1197:27" pos:end="1197:63"><name pos:start="1197:27" pos:end="1197:39">tcg_const_i32</name><argument_list pos:start="1197:40" pos:end="1197:63">(<argument pos:start="1197:41" pos:end="1197:62"><expr pos:start="1197:41" pos:end="1197:62"><operator pos:start="1197:41" pos:end="1197:41">(</operator><name pos:start="1197:42" pos:end="1197:45">insn</name> <operator pos:start="1197:47" pos:end="1197:47">&amp;</operator> <operator pos:start="1197:49" pos:end="1197:49">(</operator><literal type="number" pos:start="1197:50" pos:end="1197:50">1</literal> <operator pos:start="1197:52" pos:end="1197:53">&lt;&lt;</operator> <literal type="number" pos:start="1197:55" pos:end="1197:55">4</literal><operator pos:start="1197:56" pos:end="1197:56">)</operator><operator pos:start="1197:57" pos:end="1197:57">)</operator> <operator pos:start="1197:59" pos:end="1197:60">!=</operator> <literal type="number" pos:start="1197:62" pos:end="1197:62">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block" pos:start="1199:21" pos:end="1199:35">/* FAULTMASK */</comment>

                    <if_stmt pos:start="1201:21" pos:end="1209:21"><if pos:start="1201:21" pos:end="1209:21">if <condition pos:start="1201:24" pos:end="1201:33">(<expr pos:start="1201:25" pos:end="1201:32"><name pos:start="1201:25" pos:end="1201:28">insn</name> <operator pos:start="1201:30" pos:end="1201:30">&amp;</operator> <literal type="number" pos:start="1201:32" pos:end="1201:32">1</literal></expr>)</condition> <block pos:start="1201:35" pos:end="1209:21">{<block_content pos:start="1203:25" pos:end="1207:48">

                        <expr_stmt pos:start="1203:25" pos:end="1203:49"><expr pos:start="1203:25" pos:end="1203:48"><name pos:start="1203:25" pos:end="1203:28">addr</name> <operator pos:start="1203:30" pos:end="1203:30">=</operator> <call pos:start="1203:32" pos:end="1203:48"><name pos:start="1203:32" pos:end="1203:44">tcg_const_i32</name><argument_list pos:start="1203:45" pos:end="1203:48">(<argument pos:start="1203:46" pos:end="1203:47"><expr pos:start="1203:46" pos:end="1203:47"><literal type="number" pos:start="1203:46" pos:end="1203:47">19</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1205:25" pos:end="1205:63"><expr pos:start="1205:25" pos:end="1205:62"><call pos:start="1205:25" pos:end="1205:62"><name pos:start="1205:25" pos:end="1205:42">gen_helper_v7m_msr</name><argument_list pos:start="1205:43" pos:end="1205:62">(<argument pos:start="1205:44" pos:end="1205:50"><expr pos:start="1205:44" pos:end="1205:50"><name pos:start="1205:44" pos:end="1205:50">cpu_env</name></expr></argument>, <argument pos:start="1205:53" pos:end="1205:56"><expr pos:start="1205:53" pos:end="1205:56"><name pos:start="1205:53" pos:end="1205:56">addr</name></expr></argument>, <argument pos:start="1205:59" pos:end="1205:61"><expr pos:start="1205:59" pos:end="1205:61"><name pos:start="1205:59" pos:end="1205:61">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1207:25" pos:end="1207:48"><expr pos:start="1207:25" pos:end="1207:47"><call pos:start="1207:25" pos:end="1207:47"><name pos:start="1207:25" pos:end="1207:41">tcg_temp_free_i32</name><argument_list pos:start="1207:42" pos:end="1207:47">(<argument pos:start="1207:43" pos:end="1207:46"><expr pos:start="1207:43" pos:end="1207:46"><name pos:start="1207:43" pos:end="1207:46">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <comment type="block" pos:start="1211:21" pos:end="1211:33">/* PRIMASK */</comment>

                    <if_stmt pos:start="1213:21" pos:end="1221:21"><if pos:start="1213:21" pos:end="1221:21">if <condition pos:start="1213:24" pos:end="1213:33">(<expr pos:start="1213:25" pos:end="1213:32"><name pos:start="1213:25" pos:end="1213:28">insn</name> <operator pos:start="1213:30" pos:end="1213:30">&amp;</operator> <literal type="number" pos:start="1213:32" pos:end="1213:32">2</literal></expr>)</condition> <block pos:start="1213:35" pos:end="1221:21">{<block_content pos:start="1215:25" pos:end="1219:48">

                        <expr_stmt pos:start="1215:25" pos:end="1215:49"><expr pos:start="1215:25" pos:end="1215:48"><name pos:start="1215:25" pos:end="1215:28">addr</name> <operator pos:start="1215:30" pos:end="1215:30">=</operator> <call pos:start="1215:32" pos:end="1215:48"><name pos:start="1215:32" pos:end="1215:44">tcg_const_i32</name><argument_list pos:start="1215:45" pos:end="1215:48">(<argument pos:start="1215:46" pos:end="1215:47"><expr pos:start="1215:46" pos:end="1215:47"><literal type="number" pos:start="1215:46" pos:end="1215:47">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1217:25" pos:end="1217:63"><expr pos:start="1217:25" pos:end="1217:62"><call pos:start="1217:25" pos:end="1217:62"><name pos:start="1217:25" pos:end="1217:42">gen_helper_v7m_msr</name><argument_list pos:start="1217:43" pos:end="1217:62">(<argument pos:start="1217:44" pos:end="1217:50"><expr pos:start="1217:44" pos:end="1217:50"><name pos:start="1217:44" pos:end="1217:50">cpu_env</name></expr></argument>, <argument pos:start="1217:53" pos:end="1217:56"><expr pos:start="1217:53" pos:end="1217:56"><name pos:start="1217:53" pos:end="1217:56">addr</name></expr></argument>, <argument pos:start="1217:59" pos:end="1217:61"><expr pos:start="1217:59" pos:end="1217:61"><name pos:start="1217:59" pos:end="1217:61">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1219:25" pos:end="1219:48"><expr pos:start="1219:25" pos:end="1219:47"><call pos:start="1219:25" pos:end="1219:47"><name pos:start="1219:25" pos:end="1219:41">tcg_temp_free_i32</name><argument_list pos:start="1219:42" pos:end="1219:47">(<argument pos:start="1219:43" pos:end="1219:46"><expr pos:start="1219:43" pos:end="1219:46"><name pos:start="1219:43" pos:end="1219:46">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="1223:21" pos:end="1223:43"><expr pos:start="1223:21" pos:end="1223:42"><call pos:start="1223:21" pos:end="1223:42"><name pos:start="1223:21" pos:end="1223:37">tcg_temp_free_i32</name><argument_list pos:start="1223:38" pos:end="1223:42">(<argument pos:start="1223:39" pos:end="1223:41"><expr pos:start="1223:39" pos:end="1223:41"><name pos:start="1223:39" pos:end="1223:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1225:21" pos:end="1225:37"><expr pos:start="1225:21" pos:end="1225:36"><call pos:start="1225:21" pos:end="1225:36"><name pos:start="1225:21" pos:end="1225:33">gen_lookup_tb</name><argument_list pos:start="1225:34" pos:end="1225:36">(<argument pos:start="1225:35" pos:end="1225:35"><expr pos:start="1225:35" pos:end="1225:35"><name pos:start="1225:35" pos:end="1225:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1227:19" pos:end="1241:17">else <block pos:start="1227:24" pos:end="1241:17">{<block_content pos:start="1229:21" pos:end="1239:67">

                    <if_stmt pos:start="1229:21" pos:end="1237:21"><if pos:start="1229:21" pos:end="1233:21">if <condition pos:start="1229:24" pos:end="1229:40">(<expr pos:start="1229:25" pos:end="1229:39"><name pos:start="1229:25" pos:end="1229:28">insn</name> <operator pos:start="1229:30" pos:end="1229:30">&amp;</operator> <operator pos:start="1229:32" pos:end="1229:32">(</operator><literal type="number" pos:start="1229:33" pos:end="1229:33">1</literal> <operator pos:start="1229:35" pos:end="1229:36">&lt;&lt;</operator> <literal type="number" pos:start="1229:38" pos:end="1229:38">4</literal><operator pos:start="1229:39" pos:end="1229:39">)</operator></expr>)</condition> <block pos:start="1229:42" pos:end="1233:21">{<block_content pos:start="1231:25" pos:end="1231:57">

                        <expr_stmt pos:start="1231:25" pos:end="1231:57"><expr pos:start="1231:25" pos:end="1231:56"><name pos:start="1231:25" pos:end="1231:29">shift</name> <operator pos:start="1231:31" pos:end="1231:31">=</operator> <name pos:start="1231:33" pos:end="1231:38">CPSR_A</name> <operator pos:start="1231:40" pos:end="1231:40">|</operator> <name pos:start="1231:42" pos:end="1231:47">CPSR_I</name> <operator pos:start="1231:49" pos:end="1231:49">|</operator> <name pos:start="1231:51" pos:end="1231:56">CPSR_F</name></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1233:23" pos:end="1237:21">else <block pos:start="1233:28" pos:end="1237:21">{<block_content pos:start="1235:25" pos:end="1235:34">

                        <expr_stmt pos:start="1235:25" pos:end="1235:34"><expr pos:start="1235:25" pos:end="1235:33"><name pos:start="1235:25" pos:end="1235:29">shift</name> <operator pos:start="1235:31" pos:end="1235:31">=</operator> <literal type="number" pos:start="1235:33" pos:end="1235:33">0</literal></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="1239:21" pos:end="1239:67"><expr pos:start="1239:21" pos:end="1239:66"><call pos:start="1239:21" pos:end="1239:66"><name pos:start="1239:21" pos:end="1239:34">gen_set_psr_im</name><argument_list pos:start="1239:35" pos:end="1239:66">(<argument pos:start="1239:36" pos:end="1239:36"><expr pos:start="1239:36" pos:end="1239:36"><name pos:start="1239:36" pos:end="1239:36">s</name></expr></argument>, <argument pos:start="1239:39" pos:end="1239:55"><expr pos:start="1239:39" pos:end="1239:55"><operator pos:start="1239:39" pos:end="1239:39">(</operator><operator pos:start="1239:40" pos:end="1239:40">(</operator><name pos:start="1239:41" pos:end="1239:44">insn</name> <operator pos:start="1239:46" pos:end="1239:46">&amp;</operator> <literal type="number" pos:start="1239:48" pos:end="1239:48">7</literal><operator pos:start="1239:49" pos:end="1239:49">)</operator> <operator pos:start="1239:51" pos:end="1239:52">&lt;&lt;</operator> <literal type="number" pos:start="1239:54" pos:end="1239:54">6</literal><operator pos:start="1239:55" pos:end="1239:55">)</operator></expr></argument>, <argument pos:start="1239:58" pos:end="1239:58"><expr pos:start="1239:58" pos:end="1239:58"><literal type="number" pos:start="1239:58" pos:end="1239:58">0</literal></expr></argument>, <argument pos:start="1239:61" pos:end="1239:65"><expr pos:start="1239:61" pos:end="1239:65"><name pos:start="1239:61" pos:end="1239:65">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <break pos:start="1243:17" pos:end="1243:22">break;</break>

            <default pos:start="1245:13" pos:end="1245:20">default:</default>

                <goto pos:start="1247:17" pos:end="1247:27">goto <name pos:start="1247:22" pos:end="1247:26">undef</name>;</goto>

            </block_content>}</block></switch>

            <break pos:start="1251:13" pos:end="1251:18">break;</break>



        <default pos:start="1255:9" pos:end="1255:16">default:</default>

            <goto pos:start="1257:13" pos:end="1257:23">goto <name pos:start="1257:18" pos:end="1257:22">undef</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="1261:9" pos:end="1261:14">break;</break>



    <case pos:start="1265:5" pos:end="1265:12">case <expr pos:start="1265:10" pos:end="1265:11"><literal type="number" pos:start="1265:10" pos:end="1265:11">12</literal></expr>:</case>

    <block pos:start="1267:5" pos:end="1343:5">{<block_content pos:start="1271:9" pos:end="1341:14">

        <comment type="block" pos:start="1269:9" pos:end="1269:33">/* load/store multiple */</comment>

        <decl_stmt pos:start="1271:9" pos:end="1271:28"><decl pos:start="1271:9" pos:end="1271:27"><type pos:start="1271:9" pos:end="1271:16"><name pos:start="1271:9" pos:end="1271:16">TCGv_i32</name></type> <name pos:start="1271:18" pos:end="1271:27">loaded_var</name></decl>;</decl_stmt>

        <expr_stmt pos:start="1273:9" pos:end="1273:36"><expr pos:start="1273:9" pos:end="1273:35"><call pos:start="1273:9" pos:end="1273:35"><name pos:start="1273:9" pos:end="1273:23">TCGV_UNUSED_I32</name><argument_list pos:start="1273:24" pos:end="1273:35">(<argument pos:start="1273:25" pos:end="1273:34"><expr pos:start="1273:25" pos:end="1273:34"><name pos:start="1273:25" pos:end="1273:34">loaded_var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1275:9" pos:end="1275:31"><expr pos:start="1275:9" pos:end="1275:30"><name pos:start="1275:9" pos:end="1275:10">rn</name> <operator pos:start="1275:12" pos:end="1275:12">=</operator> <operator pos:start="1275:14" pos:end="1275:14">(</operator><name pos:start="1275:15" pos:end="1275:18">insn</name> <operator pos:start="1275:20" pos:end="1275:21">&gt;&gt;</operator> <literal type="number" pos:start="1275:23" pos:end="1275:23">8</literal><operator pos:start="1275:24" pos:end="1275:24">)</operator> <operator pos:start="1275:26" pos:end="1275:26">&amp;</operator> <literal type="number" pos:start="1275:28" pos:end="1275:30">0x7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1277:9" pos:end="1277:31"><expr pos:start="1277:9" pos:end="1277:30"><name pos:start="1277:9" pos:end="1277:12">addr</name> <operator pos:start="1277:14" pos:end="1277:14">=</operator> <call pos:start="1277:16" pos:end="1277:30"><name pos:start="1277:16" pos:end="1277:23">load_reg</name><argument_list pos:start="1277:24" pos:end="1277:30">(<argument pos:start="1277:25" pos:end="1277:25"><expr pos:start="1277:25" pos:end="1277:25"><name pos:start="1277:25" pos:end="1277:25">s</name></expr></argument>, <argument pos:start="1277:28" pos:end="1277:29"><expr pos:start="1277:28" pos:end="1277:29"><name pos:start="1277:28" pos:end="1277:29">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="1279:9" pos:end="1319:9">for <control pos:start="1279:13" pos:end="1279:31">(<init pos:start="1279:14" pos:end="1279:19"><expr pos:start="1279:14" pos:end="1279:18"><name pos:start="1279:14" pos:end="1279:14">i</name> <operator pos:start="1279:16" pos:end="1279:16">=</operator> <literal type="number" pos:start="1279:18" pos:end="1279:18">0</literal></expr>;</init> <condition pos:start="1279:21" pos:end="1279:26"><expr pos:start="1279:21" pos:end="1279:25"><name pos:start="1279:21" pos:end="1279:21">i</name> <operator pos:start="1279:23" pos:end="1279:23">&lt;</operator> <literal type="number" pos:start="1279:25" pos:end="1279:25">8</literal></expr>;</condition> <incr pos:start="1279:28" pos:end="1279:30"><expr pos:start="1279:28" pos:end="1279:30"><name pos:start="1279:28" pos:end="1279:28">i</name><operator pos:start="1279:29" pos:end="1279:30">++</operator></expr></incr>)</control> <block pos:start="1279:33" pos:end="1319:9">{<block_content pos:start="1281:13" pos:end="1317:13">

            <if_stmt pos:start="1281:13" pos:end="1317:13"><if pos:start="1281:13" pos:end="1317:13">if <condition pos:start="1281:16" pos:end="1281:32">(<expr pos:start="1281:17" pos:end="1281:31"><name pos:start="1281:17" pos:end="1281:20">insn</name> <operator pos:start="1281:22" pos:end="1281:22">&amp;</operator> <operator pos:start="1281:24" pos:end="1281:24">(</operator><literal type="number" pos:start="1281:25" pos:end="1281:25">1</literal> <operator pos:start="1281:27" pos:end="1281:28">&lt;&lt;</operator> <name pos:start="1281:30" pos:end="1281:30">i</name><operator pos:start="1281:31" pos:end="1281:31">)</operator></expr>)</condition> <block pos:start="1281:34" pos:end="1317:13">{<block_content pos:start="1283:17" pos:end="1315:48">

                <if_stmt pos:start="1283:17" pos:end="1311:17"><if pos:start="1283:17" pos:end="1301:17">if <condition pos:start="1283:20" pos:end="1283:37">(<expr pos:start="1283:21" pos:end="1283:36"><name pos:start="1283:21" pos:end="1283:24">insn</name> <operator pos:start="1283:26" pos:end="1283:26">&amp;</operator> <operator pos:start="1283:28" pos:end="1283:28">(</operator><literal type="number" pos:start="1283:29" pos:end="1283:29">1</literal> <operator pos:start="1283:31" pos:end="1283:32">&lt;&lt;</operator> <literal type="number" pos:start="1283:34" pos:end="1283:35">11</literal><operator pos:start="1283:36" pos:end="1283:36">)</operator></expr>)</condition> <block pos:start="1283:39" pos:end="1301:17">{<block_content pos:start="1287:21" pos:end="1299:21">

                    <comment type="block" pos:start="1285:21" pos:end="1285:30">/* load */</comment>

                    <expr_stmt pos:start="1287:21" pos:end="1287:45"><expr pos:start="1287:21" pos:end="1287:44"><name pos:start="1287:21" pos:end="1287:23">tmp</name> <operator pos:start="1287:25" pos:end="1287:25">=</operator> <call pos:start="1287:27" pos:end="1287:44"><name pos:start="1287:27" pos:end="1287:42">tcg_temp_new_i32</name><argument_list pos:start="1287:43" pos:end="1287:44">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1289:21" pos:end="1289:58"><expr pos:start="1289:21" pos:end="1289:57"><call pos:start="1289:21" pos:end="1289:57"><name pos:start="1289:21" pos:end="1289:34">gen_aa32_ld32u</name><argument_list pos:start="1289:35" pos:end="1289:57">(<argument pos:start="1289:36" pos:end="1289:38"><expr pos:start="1289:36" pos:end="1289:38"><name pos:start="1289:36" pos:end="1289:38">tmp</name></expr></argument>, <argument pos:start="1289:41" pos:end="1289:44"><expr pos:start="1289:41" pos:end="1289:44"><name pos:start="1289:41" pos:end="1289:44">addr</name></expr></argument>, <argument pos:start="1289:47" pos:end="1289:56"><expr pos:start="1289:47" pos:end="1289:56"><call pos:start="1289:47" pos:end="1289:56"><name pos:start="1289:47" pos:end="1289:53">IS_USER</name><argument_list pos:start="1289:54" pos:end="1289:56">(<argument pos:start="1289:55" pos:end="1289:55"><expr pos:start="1289:55" pos:end="1289:55"><name pos:start="1289:55" pos:end="1289:55">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1291:21" pos:end="1299:21"><if pos:start="1291:21" pos:end="1295:21">if <condition pos:start="1291:24" pos:end="1291:32">(<expr pos:start="1291:25" pos:end="1291:31"><name pos:start="1291:25" pos:end="1291:25">i</name> <operator pos:start="1291:27" pos:end="1291:28">==</operator> <name pos:start="1291:30" pos:end="1291:31">rn</name></expr>)</condition> <block pos:start="1291:34" pos:end="1295:21">{<block_content pos:start="1293:25" pos:end="1293:41">

                        <expr_stmt pos:start="1293:25" pos:end="1293:41"><expr pos:start="1293:25" pos:end="1293:40"><name pos:start="1293:25" pos:end="1293:34">loaded_var</name> <operator pos:start="1293:36" pos:end="1293:36">=</operator> <name pos:start="1293:38" pos:end="1293:40">tmp</name></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1295:23" pos:end="1299:21">else <block pos:start="1295:28" pos:end="1299:21">{<block_content pos:start="1297:25" pos:end="1297:45">

                        <expr_stmt pos:start="1297:25" pos:end="1297:45"><expr pos:start="1297:25" pos:end="1297:44"><call pos:start="1297:25" pos:end="1297:44"><name pos:start="1297:25" pos:end="1297:33">store_reg</name><argument_list pos:start="1297:34" pos:end="1297:44">(<argument pos:start="1297:35" pos:end="1297:35"><expr pos:start="1297:35" pos:end="1297:35"><name pos:start="1297:35" pos:end="1297:35">s</name></expr></argument>, <argument pos:start="1297:38" pos:end="1297:38"><expr pos:start="1297:38" pos:end="1297:38"><name pos:start="1297:38" pos:end="1297:38">i</name></expr></argument>, <argument pos:start="1297:41" pos:end="1297:43"><expr pos:start="1297:41" pos:end="1297:43"><name pos:start="1297:41" pos:end="1297:43">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="1301:19" pos:end="1311:17">else <block pos:start="1301:24" pos:end="1311:17">{<block_content pos:start="1305:21" pos:end="1309:43">

                    <comment type="block" pos:start="1303:21" pos:end="1303:31">/* store */</comment>

                    <expr_stmt pos:start="1305:21" pos:end="1305:41"><expr pos:start="1305:21" pos:end="1305:40"><name pos:start="1305:21" pos:end="1305:23">tmp</name> <operator pos:start="1305:25" pos:end="1305:25">=</operator> <call pos:start="1305:27" pos:end="1305:40"><name pos:start="1305:27" pos:end="1305:34">load_reg</name><argument_list pos:start="1305:35" pos:end="1305:40">(<argument pos:start="1305:36" pos:end="1305:36"><expr pos:start="1305:36" pos:end="1305:36"><name pos:start="1305:36" pos:end="1305:36">s</name></expr></argument>, <argument pos:start="1305:39" pos:end="1305:39"><expr pos:start="1305:39" pos:end="1305:39"><name pos:start="1305:39" pos:end="1305:39">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1307:21" pos:end="1307:57"><expr pos:start="1307:21" pos:end="1307:56"><call pos:start="1307:21" pos:end="1307:56"><name pos:start="1307:21" pos:end="1307:33">gen_aa32_st32</name><argument_list pos:start="1307:34" pos:end="1307:56">(<argument pos:start="1307:35" pos:end="1307:37"><expr pos:start="1307:35" pos:end="1307:37"><name pos:start="1307:35" pos:end="1307:37">tmp</name></expr></argument>, <argument pos:start="1307:40" pos:end="1307:43"><expr pos:start="1307:40" pos:end="1307:43"><name pos:start="1307:40" pos:end="1307:43">addr</name></expr></argument>, <argument pos:start="1307:46" pos:end="1307:55"><expr pos:start="1307:46" pos:end="1307:55"><call pos:start="1307:46" pos:end="1307:55"><name pos:start="1307:46" pos:end="1307:52">IS_USER</name><argument_list pos:start="1307:53" pos:end="1307:55">(<argument pos:start="1307:54" pos:end="1307:54"><expr pos:start="1307:54" pos:end="1307:54"><name pos:start="1307:54" pos:end="1307:54">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1309:21" pos:end="1309:43"><expr pos:start="1309:21" pos:end="1309:42"><call pos:start="1309:21" pos:end="1309:42"><name pos:start="1309:21" pos:end="1309:37">tcg_temp_free_i32</name><argument_list pos:start="1309:38" pos:end="1309:42">(<argument pos:start="1309:39" pos:end="1309:41"><expr pos:start="1309:39" pos:end="1309:41"><name pos:start="1309:39" pos:end="1309:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <comment type="block" pos:start="1313:17" pos:end="1313:49">/* advance to the next address */</comment>

                <expr_stmt pos:start="1315:17" pos:end="1315:48"><expr pos:start="1315:17" pos:end="1315:47"><call pos:start="1315:17" pos:end="1315:47"><name pos:start="1315:17" pos:end="1315:32">tcg_gen_addi_i32</name><argument_list pos:start="1315:33" pos:end="1315:47">(<argument pos:start="1315:34" pos:end="1315:37"><expr pos:start="1315:34" pos:end="1315:37"><name pos:start="1315:34" pos:end="1315:37">addr</name></expr></argument>, <argument pos:start="1315:40" pos:end="1315:43"><expr pos:start="1315:40" pos:end="1315:43"><name pos:start="1315:40" pos:end="1315:43">addr</name></expr></argument>, <argument pos:start="1315:46" pos:end="1315:46"><expr pos:start="1315:46" pos:end="1315:46"><literal type="number" pos:start="1315:46" pos:end="1315:46">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="1321:9" pos:end="1339:9"><if pos:start="1321:9" pos:end="1327:9">if <condition pos:start="1321:12" pos:end="1321:36">(<expr pos:start="1321:13" pos:end="1321:35"><operator pos:start="1321:13" pos:end="1321:13">(</operator><name pos:start="1321:14" pos:end="1321:17">insn</name> <operator pos:start="1321:19" pos:end="1321:19">&amp;</operator> <operator pos:start="1321:21" pos:end="1321:21">(</operator><literal type="number" pos:start="1321:22" pos:end="1321:22">1</literal> <operator pos:start="1321:24" pos:end="1321:25">&lt;&lt;</operator> <name pos:start="1321:27" pos:end="1321:28">rn</name><operator pos:start="1321:29" pos:end="1321:29">)</operator><operator pos:start="1321:30" pos:end="1321:30">)</operator> <operator pos:start="1321:32" pos:end="1321:33">==</operator> <literal type="number" pos:start="1321:35" pos:end="1321:35">0</literal></expr>)</condition> <block pos:start="1321:38" pos:end="1327:9">{<block_content pos:start="1325:13" pos:end="1325:35">

            <comment type="block" pos:start="1323:13" pos:end="1323:63">/* base reg not in list: base register writeback */</comment>

            <expr_stmt pos:start="1325:13" pos:end="1325:35"><expr pos:start="1325:13" pos:end="1325:34"><call pos:start="1325:13" pos:end="1325:34"><name pos:start="1325:13" pos:end="1325:21">store_reg</name><argument_list pos:start="1325:22" pos:end="1325:34">(<argument pos:start="1325:23" pos:end="1325:23"><expr pos:start="1325:23" pos:end="1325:23"><name pos:start="1325:23" pos:end="1325:23">s</name></expr></argument>, <argument pos:start="1325:26" pos:end="1325:27"><expr pos:start="1325:26" pos:end="1325:27"><name pos:start="1325:26" pos:end="1325:27">rn</name></expr></argument>, <argument pos:start="1325:30" pos:end="1325:33"><expr pos:start="1325:30" pos:end="1325:33"><name pos:start="1325:30" pos:end="1325:33">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1327:11" pos:end="1339:9">else <block pos:start="1327:16" pos:end="1339:9">{<block_content pos:start="1331:13" pos:end="1337:36">

            <comment type="block" pos:start="1329:13" pos:end="1329:60">/* base reg in list: if load, complete it now */</comment>

            <if_stmt pos:start="1331:13" pos:end="1335:13"><if pos:start="1331:13" pos:end="1335:13">if <condition pos:start="1331:16" pos:end="1331:33">(<expr pos:start="1331:17" pos:end="1331:32"><name pos:start="1331:17" pos:end="1331:20">insn</name> <operator pos:start="1331:22" pos:end="1331:22">&amp;</operator> <operator pos:start="1331:24" pos:end="1331:24">(</operator><literal type="number" pos:start="1331:25" pos:end="1331:25">1</literal> <operator pos:start="1331:27" pos:end="1331:28">&lt;&lt;</operator> <literal type="number" pos:start="1331:30" pos:end="1331:31">11</literal><operator pos:start="1331:32" pos:end="1331:32">)</operator></expr>)</condition> <block pos:start="1331:35" pos:end="1335:13">{<block_content pos:start="1333:17" pos:end="1333:45">

                <expr_stmt pos:start="1333:17" pos:end="1333:45"><expr pos:start="1333:17" pos:end="1333:44"><call pos:start="1333:17" pos:end="1333:44"><name pos:start="1333:17" pos:end="1333:25">store_reg</name><argument_list pos:start="1333:26" pos:end="1333:44">(<argument pos:start="1333:27" pos:end="1333:27"><expr pos:start="1333:27" pos:end="1333:27"><name pos:start="1333:27" pos:end="1333:27">s</name></expr></argument>, <argument pos:start="1333:30" pos:end="1333:31"><expr pos:start="1333:30" pos:end="1333:31"><name pos:start="1333:30" pos:end="1333:31">rn</name></expr></argument>, <argument pos:start="1333:34" pos:end="1333:43"><expr pos:start="1333:34" pos:end="1333:43"><name pos:start="1333:34" pos:end="1333:43">loaded_var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="1337:13" pos:end="1337:36"><expr pos:start="1337:13" pos:end="1337:35"><call pos:start="1337:13" pos:end="1337:35"><name pos:start="1337:13" pos:end="1337:29">tcg_temp_free_i32</name><argument_list pos:start="1337:30" pos:end="1337:35">(<argument pos:start="1337:31" pos:end="1337:34"><expr pos:start="1337:31" pos:end="1337:34"><name pos:start="1337:31" pos:end="1337:34">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1341:9" pos:end="1341:14">break;</break>

    </block_content>}</block>

    <case pos:start="1345:5" pos:end="1345:12">case <expr pos:start="1345:10" pos:end="1345:11"><literal type="number" pos:start="1345:10" pos:end="1345:11">13</literal></expr>:</case>

        <comment type="block" pos:start="1347:9" pos:end="1347:39">/* conditional branch or swi */</comment>

        <expr_stmt pos:start="1349:9" pos:end="1349:33"><expr pos:start="1349:9" pos:end="1349:32"><name pos:start="1349:9" pos:end="1349:12">cond</name> <operator pos:start="1349:14" pos:end="1349:14">=</operator> <operator pos:start="1349:16" pos:end="1349:16">(</operator><name pos:start="1349:17" pos:end="1349:20">insn</name> <operator pos:start="1349:22" pos:end="1349:23">&gt;&gt;</operator> <literal type="number" pos:start="1349:25" pos:end="1349:25">8</literal><operator pos:start="1349:26" pos:end="1349:26">)</operator> <operator pos:start="1349:28" pos:end="1349:28">&amp;</operator> <literal type="number" pos:start="1349:30" pos:end="1349:32">0xf</literal></expr>;</expr_stmt>

        <if_stmt pos:start="1351:9" pos:end="1353:23"><if pos:start="1351:9" pos:end="1353:23">if <condition pos:start="1351:12" pos:end="1351:24">(<expr pos:start="1351:13" pos:end="1351:23"><name pos:start="1351:13" pos:end="1351:16">cond</name> <operator pos:start="1351:18" pos:end="1351:19">==</operator> <literal type="number" pos:start="1351:21" pos:end="1351:23">0xe</literal></expr>)</condition><block type="pseudo" pos:start="1353:13" pos:end="1353:23"><block_content pos:start="1353:13" pos:end="1353:23">

            <goto pos:start="1353:13" pos:end="1353:23">goto <name pos:start="1353:18" pos:end="1353:22">undef</name>;</goto></block_content></block></if></if_stmt>



        <if_stmt pos:start="1357:9" pos:end="1367:9"><if pos:start="1357:9" pos:end="1367:9">if <condition pos:start="1357:12" pos:end="1357:24">(<expr pos:start="1357:13" pos:end="1357:23"><name pos:start="1357:13" pos:end="1357:16">cond</name> <operator pos:start="1357:18" pos:end="1357:19">==</operator> <literal type="number" pos:start="1357:21" pos:end="1357:23">0xf</literal></expr>)</condition> <block pos:start="1357:26" pos:end="1367:9">{<block_content pos:start="1361:13" pos:end="1365:18">

            <comment type="block" pos:start="1359:13" pos:end="1359:21">/* swi */</comment>

            <expr_stmt pos:start="1361:13" pos:end="1361:36"><expr pos:start="1361:13" pos:end="1361:35"><call pos:start="1361:13" pos:end="1361:35"><name pos:start="1361:13" pos:end="1361:25">gen_set_pc_im</name><argument_list pos:start="1361:26" pos:end="1361:35">(<argument pos:start="1361:27" pos:end="1361:27"><expr pos:start="1361:27" pos:end="1361:27"><name pos:start="1361:27" pos:end="1361:27">s</name></expr></argument>, <argument pos:start="1361:30" pos:end="1361:34"><expr pos:start="1361:30" pos:end="1361:34"><name pos:start="1361:30" pos:end="1361:34"><name pos:start="1361:30" pos:end="1361:30">s</name><operator pos:start="1361:31" pos:end="1361:32">-&gt;</operator><name pos:start="1361:33" pos:end="1361:34">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1363:13" pos:end="1363:34"><expr pos:start="1363:13" pos:end="1363:33"><name pos:start="1363:13" pos:end="1363:21"><name pos:start="1363:13" pos:end="1363:13">s</name><operator pos:start="1363:14" pos:end="1363:15">-&gt;</operator><name pos:start="1363:16" pos:end="1363:21">is_jmp</name></name> <operator pos:start="1363:23" pos:end="1363:23">=</operator> <name pos:start="1363:25" pos:end="1363:33">DISAS_SWI</name></expr>;</expr_stmt>

            <break pos:start="1365:13" pos:end="1365:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="1369:9" pos:end="1369:61">/* generate a conditional jump to next instruction */</comment>

        <expr_stmt pos:start="1371:9" pos:end="1371:39"><expr pos:start="1371:9" pos:end="1371:38"><name pos:start="1371:9" pos:end="1371:20"><name pos:start="1371:9" pos:end="1371:9">s</name><operator pos:start="1371:10" pos:end="1371:11">-&gt;</operator><name pos:start="1371:12" pos:end="1371:20">condlabel</name></name> <operator pos:start="1371:22" pos:end="1371:22">=</operator> <call pos:start="1371:24" pos:end="1371:38"><name pos:start="1371:24" pos:end="1371:36">gen_new_label</name><argument_list pos:start="1371:37" pos:end="1371:38">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1373:9" pos:end="1373:44"><expr pos:start="1373:9" pos:end="1373:43"><call pos:start="1373:9" pos:end="1373:43"><name pos:start="1373:9" pos:end="1373:19">gen_test_cc</name><argument_list pos:start="1373:20" pos:end="1373:43">(<argument pos:start="1373:21" pos:end="1373:28"><expr pos:start="1373:21" pos:end="1373:28"><name pos:start="1373:21" pos:end="1373:24">cond</name> <operator pos:start="1373:26" pos:end="1373:26">^</operator> <literal type="number" pos:start="1373:28" pos:end="1373:28">1</literal></expr></argument>, <argument pos:start="1373:31" pos:end="1373:42"><expr pos:start="1373:31" pos:end="1373:42"><name pos:start="1373:31" pos:end="1373:42"><name pos:start="1373:31" pos:end="1373:31">s</name><operator pos:start="1373:32" pos:end="1373:33">-&gt;</operator><name pos:start="1373:34" pos:end="1373:42">condlabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1375:9" pos:end="1375:23"><expr pos:start="1375:9" pos:end="1375:22"><name pos:start="1375:9" pos:end="1375:18"><name pos:start="1375:9" pos:end="1375:9">s</name><operator pos:start="1375:10" pos:end="1375:11">-&gt;</operator><name pos:start="1375:12" pos:end="1375:18">condjmp</name></name> <operator pos:start="1375:20" pos:end="1375:20">=</operator> <literal type="number" pos:start="1375:22" pos:end="1375:22">1</literal></expr>;</expr_stmt>



        <comment type="block" pos:start="1379:9" pos:end="1379:32">/* jump to the offset */</comment>

        <expr_stmt pos:start="1381:9" pos:end="1381:34"><expr pos:start="1381:9" pos:end="1381:33"><name pos:start="1381:9" pos:end="1381:11">val</name> <operator pos:start="1381:13" pos:end="1381:13">=</operator> <operator pos:start="1381:15" pos:end="1381:15">(</operator><name pos:start="1381:16" pos:end="1381:23">uint32_t</name><operator pos:start="1381:24" pos:end="1381:24">)</operator><name pos:start="1381:25" pos:end="1381:29"><name pos:start="1381:25" pos:end="1381:25">s</name><operator pos:start="1381:26" pos:end="1381:27">-&gt;</operator><name pos:start="1381:28" pos:end="1381:29">pc</name></name> <operator pos:start="1381:31" pos:end="1381:31">+</operator> <literal type="number" pos:start="1381:33" pos:end="1381:33">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1383:9" pos:end="1383:45"><expr pos:start="1383:9" pos:end="1383:44"><name pos:start="1383:9" pos:end="1383:14">offset</name> <operator pos:start="1383:16" pos:end="1383:16">=</operator> <operator pos:start="1383:18" pos:end="1383:18">(</operator><operator pos:start="1383:19" pos:end="1383:19">(</operator><name pos:start="1383:20" pos:end="1383:26">int32_t</name><operator pos:start="1383:27" pos:end="1383:27">)</operator><name pos:start="1383:28" pos:end="1383:31">insn</name> <operator pos:start="1383:33" pos:end="1383:34">&lt;&lt;</operator> <literal type="number" pos:start="1383:36" pos:end="1383:37">24</literal><operator pos:start="1383:38" pos:end="1383:38">)</operator> <operator pos:start="1383:40" pos:end="1383:41">&gt;&gt;</operator> <literal type="number" pos:start="1383:43" pos:end="1383:44">24</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1385:9" pos:end="1385:27"><expr pos:start="1385:9" pos:end="1385:26"><name pos:start="1385:9" pos:end="1385:11">val</name> <operator pos:start="1385:13" pos:end="1385:14">+=</operator> <name pos:start="1385:16" pos:end="1385:21">offset</name> <operator pos:start="1385:23" pos:end="1385:24">&lt;&lt;</operator> <literal type="number" pos:start="1385:26" pos:end="1385:26">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1387:9" pos:end="1387:24"><expr pos:start="1387:9" pos:end="1387:23"><call pos:start="1387:9" pos:end="1387:23"><name pos:start="1387:9" pos:end="1387:15">gen_jmp</name><argument_list pos:start="1387:16" pos:end="1387:23">(<argument pos:start="1387:17" pos:end="1387:17"><expr pos:start="1387:17" pos:end="1387:17"><name pos:start="1387:17" pos:end="1387:17">s</name></expr></argument>, <argument pos:start="1387:20" pos:end="1387:22"><expr pos:start="1387:20" pos:end="1387:22"><name pos:start="1387:20" pos:end="1387:22">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1389:9" pos:end="1389:14">break;</break>



    <case pos:start="1393:5" pos:end="1393:12">case <expr pos:start="1393:10" pos:end="1393:11"><literal type="number" pos:start="1393:10" pos:end="1393:11">14</literal></expr>:</case>

        <if_stmt pos:start="1395:9" pos:end="1403:9"><if pos:start="1395:9" pos:end="1403:9">if <condition pos:start="1395:12" pos:end="1395:29">(<expr pos:start="1395:13" pos:end="1395:28"><name pos:start="1395:13" pos:end="1395:16">insn</name> <operator pos:start="1395:18" pos:end="1395:18">&amp;</operator> <operator pos:start="1395:20" pos:end="1395:20">(</operator><literal type="number" pos:start="1395:21" pos:end="1395:21">1</literal> <operator pos:start="1395:23" pos:end="1395:24">&lt;&lt;</operator> <literal type="number" pos:start="1395:26" pos:end="1395:27">11</literal><operator pos:start="1395:28" pos:end="1395:28">)</operator></expr>)</condition> <block pos:start="1395:31" pos:end="1403:9">{<block_content pos:start="1397:13" pos:end="1401:18">

            <if_stmt pos:start="1397:13" pos:end="1399:27"><if pos:start="1397:13" pos:end="1399:27">if <condition pos:start="1397:16" pos:end="1397:48">(<expr pos:start="1397:17" pos:end="1397:47"><call pos:start="1397:17" pos:end="1397:47"><name pos:start="1397:17" pos:end="1397:33">disas_thumb2_insn</name><argument_list pos:start="1397:34" pos:end="1397:47">(<argument pos:start="1397:35" pos:end="1397:37"><expr pos:start="1397:35" pos:end="1397:37"><name pos:start="1397:35" pos:end="1397:37">env</name></expr></argument>, <argument pos:start="1397:40" pos:end="1397:40"><expr pos:start="1397:40" pos:end="1397:40"><name pos:start="1397:40" pos:end="1397:40">s</name></expr></argument>, <argument pos:start="1397:43" pos:end="1397:46"><expr pos:start="1397:43" pos:end="1397:46"><name pos:start="1397:43" pos:end="1397:46">insn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1399:15" pos:end="1399:27"><block_content pos:start="1399:15" pos:end="1399:27">

              <goto pos:start="1399:15" pos:end="1399:27">goto <name pos:start="1399:20" pos:end="1399:26">undef32</name>;</goto></block_content></block></if></if_stmt>

            <break pos:start="1401:13" pos:end="1401:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="1405:9" pos:end="1405:34">/* unconditional branch */</comment>

        <expr_stmt pos:start="1407:9" pos:end="1407:30"><expr pos:start="1407:9" pos:end="1407:29"><name pos:start="1407:9" pos:end="1407:11">val</name> <operator pos:start="1407:13" pos:end="1407:13">=</operator> <operator pos:start="1407:15" pos:end="1407:15">(</operator><name pos:start="1407:16" pos:end="1407:23">uint32_t</name><operator pos:start="1407:24" pos:end="1407:24">)</operator><name pos:start="1407:25" pos:end="1407:29"><name pos:start="1407:25" pos:end="1407:25">s</name><operator pos:start="1407:26" pos:end="1407:27">-&gt;</operator><name pos:start="1407:28" pos:end="1407:29">pc</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="1409:9" pos:end="1409:45"><expr pos:start="1409:9" pos:end="1409:44"><name pos:start="1409:9" pos:end="1409:14">offset</name> <operator pos:start="1409:16" pos:end="1409:16">=</operator> <operator pos:start="1409:18" pos:end="1409:18">(</operator><operator pos:start="1409:19" pos:end="1409:19">(</operator><name pos:start="1409:20" pos:end="1409:26">int32_t</name><operator pos:start="1409:27" pos:end="1409:27">)</operator><name pos:start="1409:28" pos:end="1409:31">insn</name> <operator pos:start="1409:33" pos:end="1409:34">&lt;&lt;</operator> <literal type="number" pos:start="1409:36" pos:end="1409:37">21</literal><operator pos:start="1409:38" pos:end="1409:38">)</operator> <operator pos:start="1409:40" pos:end="1409:41">&gt;&gt;</operator> <literal type="number" pos:start="1409:43" pos:end="1409:44">21</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1411:9" pos:end="1411:33"><expr pos:start="1411:9" pos:end="1411:32"><name pos:start="1411:9" pos:end="1411:11">val</name> <operator pos:start="1411:13" pos:end="1411:14">+=</operator> <operator pos:start="1411:16" pos:end="1411:16">(</operator><name pos:start="1411:17" pos:end="1411:22">offset</name> <operator pos:start="1411:24" pos:end="1411:25">&lt;&lt;</operator> <literal type="number" pos:start="1411:27" pos:end="1411:27">1</literal><operator pos:start="1411:28" pos:end="1411:28">)</operator> <operator pos:start="1411:30" pos:end="1411:30">+</operator> <literal type="number" pos:start="1411:32" pos:end="1411:32">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1413:9" pos:end="1413:24"><expr pos:start="1413:9" pos:end="1413:23"><call pos:start="1413:9" pos:end="1413:23"><name pos:start="1413:9" pos:end="1413:15">gen_jmp</name><argument_list pos:start="1413:16" pos:end="1413:23">(<argument pos:start="1413:17" pos:end="1413:17"><expr pos:start="1413:17" pos:end="1413:17"><name pos:start="1413:17" pos:end="1413:17">s</name></expr></argument>, <argument pos:start="1413:20" pos:end="1413:22"><expr pos:start="1413:20" pos:end="1413:22"><name pos:start="1413:20" pos:end="1413:22">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1415:9" pos:end="1415:14">break;</break>



    <case pos:start="1419:5" pos:end="1419:12">case <expr pos:start="1419:10" pos:end="1419:11"><literal type="number" pos:start="1419:10" pos:end="1419:11">15</literal></expr>:</case>

        <if_stmt pos:start="1421:9" pos:end="1423:25"><if pos:start="1421:9" pos:end="1423:25">if <condition pos:start="1421:12" pos:end="1421:44">(<expr pos:start="1421:13" pos:end="1421:43"><call pos:start="1421:13" pos:end="1421:43"><name pos:start="1421:13" pos:end="1421:29">disas_thumb2_insn</name><argument_list pos:start="1421:30" pos:end="1421:43">(<argument pos:start="1421:31" pos:end="1421:33"><expr pos:start="1421:31" pos:end="1421:33"><name pos:start="1421:31" pos:end="1421:33">env</name></expr></argument>, <argument pos:start="1421:36" pos:end="1421:36"><expr pos:start="1421:36" pos:end="1421:36"><name pos:start="1421:36" pos:end="1421:36">s</name></expr></argument>, <argument pos:start="1421:39" pos:end="1421:42"><expr pos:start="1421:39" pos:end="1421:42"><name pos:start="1421:39" pos:end="1421:42">insn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1423:13" pos:end="1423:25"><block_content pos:start="1423:13" pos:end="1423:25">

            <goto pos:start="1423:13" pos:end="1423:25">goto <name pos:start="1423:18" pos:end="1423:24">undef32</name>;</goto></block_content></block></if></if_stmt>

        <break pos:start="1425:9" pos:end="1425:14">break;</break>

    </block_content>}</block></switch>

    <return pos:start="1429:5" pos:end="1429:11">return;</return>

<label pos:start="1431:1" pos:end="1431:8"><name pos:start="1431:1" pos:end="1431:7">undef32</name>:</label>

    <expr_stmt pos:start="1433:5" pos:end="1433:40"><expr pos:start="1433:5" pos:end="1433:39"><call pos:start="1433:5" pos:end="1433:39"><name pos:start="1433:5" pos:end="1433:22">gen_exception_insn</name><argument_list pos:start="1433:23" pos:end="1433:39">(<argument pos:start="1433:24" pos:end="1433:24"><expr pos:start="1433:24" pos:end="1433:24"><name pos:start="1433:24" pos:end="1433:24">s</name></expr></argument>, <argument pos:start="1433:27" pos:end="1433:27"><expr pos:start="1433:27" pos:end="1433:27"><literal type="number" pos:start="1433:27" pos:end="1433:27">4</literal></expr></argument>, <argument pos:start="1433:30" pos:end="1433:38"><expr pos:start="1433:30" pos:end="1433:38"><name pos:start="1433:30" pos:end="1433:38">EXCP_UDEF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="1435:5" pos:end="1435:11">return;</return>

<label pos:start="1437:1" pos:end="1437:11"><name pos:start="1437:1" pos:end="1437:10">illegal_op</name>:</label>

<label pos:start="1439:1" pos:end="1439:6"><name pos:start="1439:1" pos:end="1439:5">undef</name>:</label>

    <expr_stmt pos:start="1441:5" pos:end="1441:40"><expr pos:start="1441:5" pos:end="1441:39"><call pos:start="1441:5" pos:end="1441:39"><name pos:start="1441:5" pos:end="1441:22">gen_exception_insn</name><argument_list pos:start="1441:23" pos:end="1441:39">(<argument pos:start="1441:24" pos:end="1441:24"><expr pos:start="1441:24" pos:end="1441:24"><name pos:start="1441:24" pos:end="1441:24">s</name></expr></argument>, <argument pos:start="1441:27" pos:end="1441:27"><expr pos:start="1441:27" pos:end="1441:27"><literal type="number" pos:start="1441:27" pos:end="1441:27">2</literal></expr></argument>, <argument pos:start="1441:30" pos:end="1441:38"><expr pos:start="1441:30" pos:end="1441:38"><name pos:start="1441:30" pos:end="1441:38">EXCP_UDEF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
