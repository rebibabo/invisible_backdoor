<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3029.c" pos:tabs="8"><function pos:start="1:1" pos:end="365:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:22">load_linux</name><parameter_list pos:start="1:23" pos:end="9:43">(<parameter pos:start="1:24" pos:end="1:41"><decl pos:start="1:24" pos:end="1:41"><type pos:start="1:24" pos:end="1:41"><name pos:start="1:24" pos:end="1:33">FWCfgState</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:41">fw_cfg</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:50"><decl pos:start="3:24" pos:end="3:50"><type pos:start="3:24" pos:end="3:50"><specifier pos:start="3:24" pos:end="3:28">const</specifier> <name pos:start="3:30" pos:end="3:33">char</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:50">kernel_filename</name></decl></parameter>,

                       <parameter pos:start="5:24" pos:end="5:50"><decl pos:start="5:24" pos:end="5:50"><type pos:start="5:24" pos:end="5:50"><specifier pos:start="5:24" pos:end="5:28">const</specifier> <name pos:start="5:30" pos:end="5:33">char</name> <modifier pos:start="5:35" pos:end="5:35">*</modifier></type><name pos:start="5:36" pos:end="5:50">initrd_filename</name></decl></parameter>,

                       <parameter pos:start="7:24" pos:end="7:49"><decl pos:start="7:24" pos:end="7:49"><type pos:start="7:24" pos:end="7:49"><specifier pos:start="7:24" pos:end="7:28">const</specifier> <name pos:start="7:30" pos:end="7:33">char</name> <modifier pos:start="7:35" pos:end="7:35">*</modifier></type><name pos:start="7:36" pos:end="7:49">kernel_cmdline</name></decl></parameter>,

                       <parameter pos:start="9:24" pos:end="9:42"><decl pos:start="9:24" pos:end="9:42"><type pos:start="9:24" pos:end="9:42"><name pos:start="9:24" pos:end="9:29">hwaddr</name></type> <name pos:start="9:31" pos:end="9:42">max_ram_size</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="365:1">{<block_content pos:start="13:5" pos:end="363:21">

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint16_t</name></type> <name pos:start="13:14" pos:end="13:21">protocol</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:63"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:18">setup_size</name></decl>, <decl pos:start="15:21" pos:end="15:31"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:21" pos:end="15:31">kernel_size</name></decl>, <decl pos:start="15:34" pos:end="15:48"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:34" pos:end="15:44">initrd_size</name> <init pos:start="15:46" pos:end="15:48">= <expr pos:start="15:48" pos:end="15:48"><literal type="number" pos:start="15:48" pos:end="15:48">0</literal></expr></init></decl>, <decl pos:start="15:51" pos:end="15:62"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:51" pos:end="15:62">cmdline_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:23">initrd_max</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:56"><decl pos:start="19:5" pos:end="19:24"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">uint8_t</name></type> <name pos:start="19:13" pos:end="19:24"><name pos:start="19:13" pos:end="19:18">header</name><index pos:start="19:19" pos:end="19:24">[<expr pos:start="19:20" pos:end="19:23"><literal type="number" pos:start="19:20" pos:end="19:23">8192</literal></expr>]</index></name></decl>, <decl pos:start="19:27" pos:end="19:32"><type ref="prev" pos:start="19:5" pos:end="19:11"><modifier pos:start="19:27" pos:end="19:27">*</modifier></type><name pos:start="19:28" pos:end="19:32">setup</name></decl>, <decl pos:start="19:35" pos:end="19:41"><type ref="prev" pos:start="19:5" pos:end="19:11"><modifier pos:start="19:35" pos:end="19:35">*</modifier></type><name pos:start="19:36" pos:end="19:41">kernel</name></decl>, <decl pos:start="19:44" pos:end="19:55"><type ref="prev" pos:start="19:5" pos:end="19:11"><modifier pos:start="19:44" pos:end="19:44">*</modifier></type><name pos:start="19:45" pos:end="19:55">initrd_data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:63"><decl pos:start="21:5" pos:end="21:20"><type pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:10">hwaddr</name></type> <name pos:start="21:12" pos:end="21:20">real_addr</name></decl>, <decl pos:start="21:23" pos:end="21:31"><type ref="prev" pos:start="21:5" pos:end="21:10"/><name pos:start="21:23" pos:end="21:31">prot_addr</name></decl>, <decl pos:start="21:34" pos:end="21:45"><type ref="prev" pos:start="21:5" pos:end="21:10"/><name pos:start="21:34" pos:end="21:45">cmdline_addr</name></decl>, <decl pos:start="21:48" pos:end="21:62"><type ref="prev" pos:start="21:5" pos:end="21:10"/><name pos:start="21:48" pos:end="21:58">initrd_addr</name> <init pos:start="21:60" pos:end="21:62">= <expr pos:start="21:62" pos:end="21:62"><literal type="number" pos:start="21:62" pos:end="21:62">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:12"><decl pos:start="23:5" pos:end="23:11"><type pos:start="23:5" pos:end="23:10"><name pos:start="23:5" pos:end="23:8">FILE</name> <modifier pos:start="23:10" pos:end="23:10">*</modifier></type><name pos:start="23:11" pos:end="23:11">f</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:16"><decl pos:start="25:5" pos:end="25:15"><type pos:start="25:5" pos:end="25:10"><name pos:start="25:5" pos:end="25:8">char</name> <modifier pos:start="25:10" pos:end="25:10">*</modifier></type><name pos:start="25:11" pos:end="25:15">vmode</name></decl>;</decl_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:49">/* Align to 16 bytes as a paranoia measure */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:53"><expr pos:start="31:5" pos:end="31:52"><name pos:start="31:5" pos:end="31:16">cmdline_size</name> <operator pos:start="31:18" pos:end="31:18">=</operator> <operator pos:start="31:20" pos:end="31:20">(</operator><call pos:start="31:21" pos:end="31:42"><name pos:start="31:21" pos:end="31:26">strlen</name><argument_list pos:start="31:27" pos:end="31:42">(<argument pos:start="31:28" pos:end="31:41"><expr pos:start="31:28" pos:end="31:41"><name pos:start="31:28" pos:end="31:41">kernel_cmdline</name></expr></argument>)</argument_list></call><operator pos:start="31:43" pos:end="31:43">+</operator><literal type="number" pos:start="31:44" pos:end="31:45">16</literal><operator pos:start="31:46" pos:end="31:46">)</operator> <operator pos:start="31:48" pos:end="31:48">&amp;</operator> <operator pos:start="31:50" pos:end="31:50">~</operator><literal type="number" pos:start="31:51" pos:end="31:52">15</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:32">/* load the kernel header */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:37"><expr pos:start="37:5" pos:end="37:36"><name pos:start="37:5" pos:end="37:5">f</name> <operator pos:start="37:7" pos:end="37:7">=</operator> <call pos:start="37:9" pos:end="37:36"><name pos:start="37:9" pos:end="37:13">fopen</name><argument_list pos:start="37:14" pos:end="37:36">(<argument pos:start="37:15" pos:end="37:29"><expr pos:start="37:15" pos:end="37:29"><name pos:start="37:15" pos:end="37:29">kernel_filename</name></expr></argument>, <argument pos:start="37:32" pos:end="37:35"><expr pos:start="37:32" pos:end="37:35"><literal type="string" pos:start="37:32" pos:end="37:35">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="62:0"><if pos:start="39:5" pos:end="62:0">if <condition pos:start="39:8" pos:end="43:45">(<expr pos:start="39:9" pos:end="43:44"><operator pos:start="39:9" pos:end="39:9">!</operator><name pos:start="39:10" pos:end="39:10">f</name> <operator pos:start="39:12" pos:end="39:13">||</operator> <operator pos:start="39:15" pos:end="39:15">!</operator><operator pos:start="39:16" pos:end="39:16">(</operator><name pos:start="39:17" pos:end="39:27">kernel_size</name> <operator pos:start="39:29" pos:end="39:29">=</operator> <call pos:start="39:31" pos:end="39:46"><name pos:start="39:31" pos:end="39:43">get_file_size</name><argument_list pos:start="39:44" pos:end="39:46">(<argument pos:start="39:45" pos:end="39:45"><expr pos:start="39:45" pos:end="39:45"><name pos:start="39:45" pos:end="39:45">f</name></expr></argument>)</argument_list></call><operator pos:start="39:47" pos:end="39:47">)</operator> <operator pos:start="39:49" pos:end="39:50">||</operator>

        <call pos:start="41:9" pos:end="41:65"><name pos:start="41:9" pos:end="41:13">fread</name><argument_list pos:start="41:14" pos:end="41:65">(<argument pos:start="41:15" pos:end="41:20"><expr pos:start="41:15" pos:end="41:20"><name pos:start="41:15" pos:end="41:20">header</name></expr></argument>, <argument pos:start="41:23" pos:end="41:23"><expr pos:start="41:23" pos:end="41:23"><literal type="number" pos:start="41:23" pos:end="41:23">1</literal></expr></argument>, <argument pos:start="41:26" pos:end="41:61"><expr pos:start="41:26" pos:end="41:61"><call pos:start="41:26" pos:end="41:61"><name pos:start="41:26" pos:end="41:28">MIN</name><argument_list pos:start="41:29" pos:end="41:61">(<argument pos:start="41:30" pos:end="41:47"><expr pos:start="41:30" pos:end="41:47"><call pos:start="41:30" pos:end="41:47"><name pos:start="41:30" pos:end="41:39">ARRAY_SIZE</name><argument_list pos:start="41:40" pos:end="41:47">(<argument pos:start="41:41" pos:end="41:46"><expr pos:start="41:41" pos:end="41:46"><name pos:start="41:41" pos:end="41:46">header</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="41:50" pos:end="41:60"><expr pos:start="41:50" pos:end="41:60"><name pos:start="41:50" pos:end="41:60">kernel_size</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="41:64" pos:end="41:64"><expr pos:start="41:64" pos:end="41:64"><name pos:start="41:64" pos:end="41:64">f</name></expr></argument>)</argument_list></call> <operator pos:start="41:67" pos:end="41:68">!=</operator>

        <call pos:start="43:9" pos:end="43:44"><name pos:start="43:9" pos:end="43:11">MIN</name><argument_list pos:start="43:12" pos:end="43:44">(<argument pos:start="43:13" pos:end="43:30"><expr pos:start="43:13" pos:end="43:30"><call pos:start="43:13" pos:end="43:30"><name pos:start="43:13" pos:end="43:22">ARRAY_SIZE</name><argument_list pos:start="43:23" pos:end="43:30">(<argument pos:start="43:24" pos:end="43:29"><expr pos:start="43:24" pos:end="43:29"><name pos:start="43:24" pos:end="43:29">header</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="43:33" pos:end="43:43"><expr pos:start="43:33" pos:end="43:43"><name pos:start="43:33" pos:end="43:43">kernel_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:47" pos:end="62:0">{<block_content pos:start="45:9" pos:end="49:16">

        <expr_stmt pos:start="45:9" pos:end="47:50"><expr pos:start="45:9" pos:end="47:49"><call pos:start="45:9" pos:end="47:49"><name pos:start="45:9" pos:end="45:15">fprintf</name><argument_list pos:start="45:16" pos:end="47:49">(<argument pos:start="45:17" pos:end="45:22"><expr pos:start="45:17" pos:end="45:22"><name pos:start="45:17" pos:end="45:22">stderr</name></expr></argument>, <argument pos:start="45:25" pos:end="45:64"><expr pos:start="45:25" pos:end="45:64"><literal type="string" pos:start="45:25" pos:end="45:64">"qemu: could not load kernel '%s': %s\n"</literal></expr></argument>,

                <argument pos:start="47:17" pos:end="47:31"><expr pos:start="47:17" pos:end="47:31"><name pos:start="47:17" pos:end="47:31">kernel_filename</name></expr></argument>, <argument pos:start="47:34" pos:end="47:48"><expr pos:start="47:34" pos:end="47:48"><call pos:start="47:34" pos:end="47:48"><name pos:start="47:34" pos:end="47:41">strerror</name><argument_list pos:start="47:42" pos:end="47:48">(<argument pos:start="47:43" pos:end="47:47"><expr pos:start="47:43" pos:end="47:47"><name pos:start="47:43" pos:end="47:47">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:16"><expr pos:start="49:9" pos:end="49:15"><call pos:start="49:9" pos:end="49:15"><name pos:start="49:9" pos:end="49:12">exit</name><argument_list pos:start="49:13" pos:end="49:15">(<argument pos:start="49:14" pos:end="49:14"><expr pos:start="49:14" pos:end="49:14"><literal type="number" pos:start="49:14" pos:end="49:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:33">/* kernel protocol version */</comment>

<cpp:if pos:start="57:1" pos:end="57:5">#<cpp:directive pos:start="57:2" pos:end="57:3">if</cpp:directive> <expr pos:start="57:5" pos:end="57:5"><literal type="number" pos:start="57:5" pos:end="57:5">0</literal></expr></cpp:if>

    fprintf(stderr, "header magic: %#x\n", ldl_p(header+0x202));

<cpp:endif pos:start="61:1" pos:end="61:6">#<cpp:directive pos:start="61:2" pos:end="61:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="63:5" pos:end="83:5"><if pos:start="63:5" pos:end="67:5">if <condition pos:start="63:8" pos:end="63:42">(<expr pos:start="63:9" pos:end="63:41"><call pos:start="63:9" pos:end="63:27"><name pos:start="63:9" pos:end="63:13">ldl_p</name><argument_list pos:start="63:14" pos:end="63:27">(<argument pos:start="63:15" pos:end="63:26"><expr pos:start="63:15" pos:end="63:26"><name pos:start="63:15" pos:end="63:20">header</name><operator pos:start="63:21" pos:end="63:21">+</operator><literal type="number" pos:start="63:22" pos:end="63:26">0x202</literal></expr></argument>)</argument_list></call> <operator pos:start="63:29" pos:end="63:30">==</operator> <literal type="number" pos:start="63:32" pos:end="63:41">0x53726448</literal></expr>)</condition> <block pos:start="63:44" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:40">

        <expr_stmt pos:start="65:9" pos:end="65:40"><expr pos:start="65:9" pos:end="65:39"><name pos:start="65:9" pos:end="65:16">protocol</name> <operator pos:start="65:18" pos:end="65:18">=</operator> <call pos:start="65:20" pos:end="65:39"><name pos:start="65:20" pos:end="65:25">lduw_p</name><argument_list pos:start="65:26" pos:end="65:39">(<argument pos:start="65:27" pos:end="65:38"><expr pos:start="65:27" pos:end="65:38"><name pos:start="65:27" pos:end="65:32">header</name><operator pos:start="65:33" pos:end="65:33">+</operator><literal type="number" pos:start="65:34" pos:end="65:38">0x206</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="67:7" pos:end="83:5">else <block pos:start="67:12" pos:end="83:5">{<block_content pos:start="73:9" pos:end="81:21">

        <comment type="block" pos:start="69:9" pos:end="71:46">/* This looks like a multiboot kernel. If it is, let's stop

           treating it like a Linux kernel. */</comment>

        <if_stmt pos:start="73:9" pos:end="79:9"><if pos:start="73:9" pos:end="79:9">if <condition pos:start="73:12" pos:end="75:64">(<expr pos:start="73:13" pos:end="75:63"><call pos:start="73:13" pos:end="75:63"><name pos:start="73:13" pos:end="73:26">load_multiboot</name><argument_list pos:start="73:27" pos:end="75:63">(<argument pos:start="73:28" pos:end="73:33"><expr pos:start="73:28" pos:end="73:33"><name pos:start="73:28" pos:end="73:33">fw_cfg</name></expr></argument>, <argument pos:start="73:36" pos:end="73:36"><expr pos:start="73:36" pos:end="73:36"><name pos:start="73:36" pos:end="73:36">f</name></expr></argument>, <argument pos:start="73:39" pos:end="73:53"><expr pos:start="73:39" pos:end="73:53"><name pos:start="73:39" pos:end="73:53">kernel_filename</name></expr></argument>, <argument pos:start="73:56" pos:end="73:70"><expr pos:start="73:56" pos:end="73:70"><name pos:start="73:56" pos:end="73:70">initrd_filename</name></expr></argument>,

                           <argument pos:start="75:28" pos:end="75:41"><expr pos:start="75:28" pos:end="75:41"><name pos:start="75:28" pos:end="75:41">kernel_cmdline</name></expr></argument>, <argument pos:start="75:44" pos:end="75:54"><expr pos:start="75:44" pos:end="75:54"><name pos:start="75:44" pos:end="75:54">kernel_size</name></expr></argument>, <argument pos:start="75:57" pos:end="75:62"><expr pos:start="75:57" pos:end="75:62"><name pos:start="75:57" pos:end="75:62">header</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="75:66" pos:end="79:9">{<block_content pos:start="77:13" pos:end="77:19">

            <return pos:start="77:13" pos:end="77:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:21"><expr pos:start="81:9" pos:end="81:20"><name pos:start="81:9" pos:end="81:16">protocol</name> <operator pos:start="81:18" pos:end="81:18">=</operator> <literal type="number" pos:start="81:20" pos:end="81:20">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="87:5" pos:end="138:0"><if pos:start="87:5" pos:end="97:5">if <condition pos:start="87:8" pos:end="87:52">(<expr pos:start="87:9" pos:end="87:51"><name pos:start="87:9" pos:end="87:16">protocol</name> <operator pos:start="87:18" pos:end="87:18">&lt;</operator> <literal type="number" pos:start="87:20" pos:end="87:24">0x200</literal> <operator pos:start="87:26" pos:end="87:27">||</operator> <operator pos:start="87:29" pos:end="87:29">!</operator><operator pos:start="87:30" pos:end="87:30">(</operator><name pos:start="87:31" pos:end="87:43"><name pos:start="87:31" pos:end="87:36">header</name><index pos:start="87:37" pos:end="87:43">[<expr pos:start="87:38" pos:end="87:42"><literal type="number" pos:start="87:38" pos:end="87:42">0x211</literal></expr>]</index></name> <operator pos:start="87:45" pos:end="87:45">&amp;</operator> <literal type="number" pos:start="87:47" pos:end="87:50">0x01</literal><operator pos:start="87:51" pos:end="87:51">)</operator></expr>)</condition> <block pos:start="87:54" pos:end="97:5">{<block_content pos:start="91:9" pos:end="95:31">

        <comment type="block" pos:start="89:9" pos:end="89:24">/* Low kernel */</comment>

        <expr_stmt pos:start="91:9" pos:end="91:31"><expr pos:start="91:9" pos:end="91:30"><name pos:start="91:9" pos:end="91:17">real_addr</name>    <operator pos:start="91:22" pos:end="91:22">=</operator> <literal type="number" pos:start="91:24" pos:end="91:30">0x90000</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:46"><expr pos:start="93:9" pos:end="93:45"><name pos:start="93:9" pos:end="93:20">cmdline_addr</name> <operator pos:start="93:22" pos:end="93:22">=</operator> <literal type="number" pos:start="93:24" pos:end="93:32">0x9a000</literal> <operator pos:start="93:32" pos:end="93:32">-</operator> <name pos:start="93:34" pos:end="93:45">cmdline_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:31"><expr pos:start="95:9" pos:end="95:30"><name pos:start="95:9" pos:end="95:17">prot_addr</name>    <operator pos:start="95:22" pos:end="95:22">=</operator> <literal type="number" pos:start="95:24" pos:end="95:30">0x10000</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="97:7" pos:end="107:5">else if <condition pos:start="97:15" pos:end="97:32">(<expr pos:start="97:16" pos:end="97:31"><name pos:start="97:16" pos:end="97:23">protocol</name> <operator pos:start="97:25" pos:end="97:25">&lt;</operator> <literal type="number" pos:start="97:27" pos:end="97:31">0x202</literal></expr>)</condition> <block pos:start="97:34" pos:end="107:5">{<block_content pos:start="101:9" pos:end="105:32">

        <comment type="block" pos:start="99:9" pos:end="99:37">/* High but ancient kernel */</comment>

        <expr_stmt pos:start="101:9" pos:end="101:31"><expr pos:start="101:9" pos:end="101:30"><name pos:start="101:9" pos:end="101:17">real_addr</name>    <operator pos:start="101:22" pos:end="101:22">=</operator> <literal type="number" pos:start="101:24" pos:end="101:30">0x90000</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:46"><expr pos:start="103:9" pos:end="103:45"><name pos:start="103:9" pos:end="103:20">cmdline_addr</name> <operator pos:start="103:22" pos:end="103:22">=</operator> <literal type="number" pos:start="103:24" pos:end="103:32">0x9a000</literal> <operator pos:start="103:32" pos:end="103:32">-</operator> <name pos:start="103:34" pos:end="103:45">cmdline_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:32"><expr pos:start="105:9" pos:end="105:31"><name pos:start="105:9" pos:end="105:17">prot_addr</name>    <operator pos:start="105:22" pos:end="105:22">=</operator> <literal type="number" pos:start="105:24" pos:end="105:31">0x100000</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="107:7" pos:end="138:0">else <block pos:start="107:12" pos:end="138:0">{<block_content pos:start="111:9" pos:end="115:32">

        <comment type="block" pos:start="109:9" pos:end="109:36">/* High and recent kernel */</comment>

        <expr_stmt pos:start="111:9" pos:end="111:31"><expr pos:start="111:9" pos:end="111:30"><name pos:start="111:9" pos:end="111:17">real_addr</name>    <operator pos:start="111:22" pos:end="111:22">=</operator> <literal type="number" pos:start="111:24" pos:end="111:30">0x10000</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:31"><expr pos:start="113:9" pos:end="113:30"><name pos:start="113:9" pos:end="113:20">cmdline_addr</name> <operator pos:start="113:22" pos:end="113:22">=</operator> <literal type="number" pos:start="113:24" pos:end="113:30">0x20000</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:32"><expr pos:start="115:9" pos:end="115:31"><name pos:start="115:9" pos:end="115:17">prot_addr</name>    <operator pos:start="115:22" pos:end="115:22">=</operator> <literal type="number" pos:start="115:24" pos:end="115:31">0x100000</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



<cpp:if pos:start="121:1" pos:end="121:5">#<cpp:directive pos:start="121:2" pos:end="121:3">if</cpp:directive> <expr pos:start="121:5" pos:end="121:5"><literal type="number" pos:start="121:5" pos:end="121:5">0</literal></expr></cpp:if>

    fprintf(stderr,

            "qemu: real_addr     = 0x" TARGET_FMT_plx "\n"

            "qemu: cmdline_addr  = 0x" TARGET_FMT_plx "\n"

            "qemu: prot_addr     = 0x" TARGET_FMT_plx "\n",

            real_addr,

            cmdline_addr,

            prot_addr);

<cpp:endif pos:start="137:1" pos:end="137:6">#<cpp:directive pos:start="137:2" pos:end="137:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="141:5" pos:end="141:48">/* highest address for loading the initrd */</comment>

    <if_stmt pos:start="143:5" pos:end="151:5"><if pos:start="143:5" pos:end="147:5">if <condition pos:start="143:8" pos:end="143:26">(<expr pos:start="143:9" pos:end="143:25"><name pos:start="143:9" pos:end="143:16">protocol</name> <operator pos:start="143:18" pos:end="143:19">&gt;=</operator> <literal type="number" pos:start="143:21" pos:end="143:25">0x203</literal></expr>)</condition> <block pos:start="143:28" pos:end="147:5">{<block_content pos:start="145:9" pos:end="145:41">

        <expr_stmt pos:start="145:9" pos:end="145:41"><expr pos:start="145:9" pos:end="145:40"><name pos:start="145:9" pos:end="145:18">initrd_max</name> <operator pos:start="145:20" pos:end="145:20">=</operator> <call pos:start="145:22" pos:end="145:40"><name pos:start="145:22" pos:end="145:26">ldl_p</name><argument_list pos:start="145:27" pos:end="145:40">(<argument pos:start="145:28" pos:end="145:39"><expr pos:start="145:28" pos:end="145:39"><name pos:start="145:28" pos:end="145:33">header</name><operator pos:start="145:34" pos:end="145:34">+</operator><literal type="number" pos:start="145:35" pos:end="145:39">0x22c</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="147:7" pos:end="151:5">else <block pos:start="147:12" pos:end="151:5">{<block_content pos:start="149:9" pos:end="149:32">

        <expr_stmt pos:start="149:9" pos:end="149:32"><expr pos:start="149:9" pos:end="149:31"><name pos:start="149:9" pos:end="149:18">initrd_max</name> <operator pos:start="149:20" pos:end="149:20">=</operator> <literal type="number" pos:start="149:22" pos:end="149:31">0x37ffffff</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="155:5" pos:end="157:51"><if pos:start="155:5" pos:end="157:51">if <condition pos:start="155:8" pos:end="155:50">(<expr pos:start="155:9" pos:end="155:49"><name pos:start="155:9" pos:end="155:18">initrd_max</name> <operator pos:start="155:20" pos:end="155:21">&gt;=</operator> <name pos:start="155:23" pos:end="155:34">max_ram_size</name><operator pos:start="155:35" pos:end="155:35">-</operator><name pos:start="155:36" pos:end="155:49">ACPI_DATA_SIZE</name></expr>)</condition><block type="pseudo" pos:start="157:9" pos:end="157:51"><block_content pos:start="157:9" pos:end="157:51">

    	<expr_stmt pos:start="157:9" pos:end="157:51"><expr pos:start="157:9" pos:end="157:50"><name pos:start="157:9" pos:end="157:18">initrd_max</name> <operator pos:start="157:20" pos:end="157:20">=</operator> <name pos:start="157:22" pos:end="157:33">max_ram_size</name><operator pos:start="157:34" pos:end="157:34">-</operator><name pos:start="157:35" pos:end="157:48">ACPI_DATA_SIZE</name><operator pos:start="157:49" pos:end="157:49">-</operator><literal type="number" pos:start="157:50" pos:end="157:50">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="161:5" pos:end="161:62"><expr pos:start="161:5" pos:end="161:61"><call pos:start="161:5" pos:end="161:61"><name pos:start="161:5" pos:end="161:18">fw_cfg_add_i32</name><argument_list pos:start="161:19" pos:end="161:61">(<argument pos:start="161:20" pos:end="161:25"><expr pos:start="161:20" pos:end="161:25"><name pos:start="161:20" pos:end="161:25">fw_cfg</name></expr></argument>, <argument pos:start="161:28" pos:end="161:46"><expr pos:start="161:28" pos:end="161:46"><name pos:start="161:28" pos:end="161:46">FW_CFG_CMDLINE_ADDR</name></expr></argument>, <argument pos:start="161:49" pos:end="161:60"><expr pos:start="161:49" pos:end="161:60"><name pos:start="161:49" pos:end="161:60">cmdline_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:74"><expr pos:start="163:5" pos:end="163:73"><call pos:start="163:5" pos:end="163:73"><name pos:start="163:5" pos:end="163:18">fw_cfg_add_i32</name><argument_list pos:start="163:19" pos:end="163:73">(<argument pos:start="163:20" pos:end="163:25"><expr pos:start="163:20" pos:end="163:25"><name pos:start="163:20" pos:end="163:25">fw_cfg</name></expr></argument>, <argument pos:start="163:28" pos:end="163:46"><expr pos:start="163:28" pos:end="163:46"><name pos:start="163:28" pos:end="163:46">FW_CFG_CMDLINE_SIZE</name></expr></argument>, <argument pos:start="163:49" pos:end="163:72"><expr pos:start="163:49" pos:end="163:72"><call pos:start="163:49" pos:end="163:70"><name pos:start="163:49" pos:end="163:54">strlen</name><argument_list pos:start="163:55" pos:end="163:70">(<argument pos:start="163:56" pos:end="163:69"><expr pos:start="163:56" pos:end="163:69"><name pos:start="163:56" pos:end="163:69">kernel_cmdline</name></expr></argument>)</argument_list></call><operator pos:start="163:71" pos:end="163:71">+</operator><literal type="number" pos:start="163:72" pos:end="163:72">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:67"><expr pos:start="165:5" pos:end="165:66"><call pos:start="165:5" pos:end="165:66"><name pos:start="165:5" pos:end="165:21">fw_cfg_add_string</name><argument_list pos:start="165:22" pos:end="165:66">(<argument pos:start="165:23" pos:end="165:28"><expr pos:start="165:23" pos:end="165:28"><name pos:start="165:23" pos:end="165:28">fw_cfg</name></expr></argument>, <argument pos:start="165:31" pos:end="165:49"><expr pos:start="165:31" pos:end="165:49"><name pos:start="165:31" pos:end="165:49">FW_CFG_CMDLINE_DATA</name></expr></argument>, <argument pos:start="165:52" pos:end="165:65"><expr pos:start="165:52" pos:end="165:65"><name pos:start="165:52" pos:end="165:65">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="169:5" pos:end="179:5"><if pos:start="169:5" pos:end="173:5">if <condition pos:start="169:8" pos:end="169:26">(<expr pos:start="169:9" pos:end="169:25"><name pos:start="169:9" pos:end="169:16">protocol</name> <operator pos:start="169:18" pos:end="169:19">&gt;=</operator> <literal type="number" pos:start="169:21" pos:end="169:25">0x202</literal></expr>)</condition> <block pos:start="169:28" pos:end="173:5">{<block_content pos:start="171:9" pos:end="171:42">

        <expr_stmt pos:start="171:9" pos:end="171:42"><expr pos:start="171:9" pos:end="171:41"><call pos:start="171:9" pos:end="171:41"><name pos:start="171:9" pos:end="171:13">stl_p</name><argument_list pos:start="171:14" pos:end="171:41">(<argument pos:start="171:15" pos:end="171:26"><expr pos:start="171:15" pos:end="171:26"><name pos:start="171:15" pos:end="171:20">header</name><operator pos:start="171:21" pos:end="171:21">+</operator><literal type="number" pos:start="171:22" pos:end="171:26">0x228</literal></expr></argument>, <argument pos:start="171:29" pos:end="171:40"><expr pos:start="171:29" pos:end="171:40"><name pos:start="171:29" pos:end="171:40">cmdline_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="173:7" pos:end="179:5">else <block pos:start="173:12" pos:end="179:5">{<block_content pos:start="175:9" pos:end="177:51">

        <expr_stmt pos:start="175:9" pos:end="175:35"><expr pos:start="175:9" pos:end="175:34"><call pos:start="175:9" pos:end="175:34"><name pos:start="175:9" pos:end="175:13">stw_p</name><argument_list pos:start="175:14" pos:end="175:34">(<argument pos:start="175:15" pos:end="175:25"><expr pos:start="175:15" pos:end="175:25"><name pos:start="175:15" pos:end="175:20">header</name><operator pos:start="175:21" pos:end="175:21">+</operator><literal type="number" pos:start="175:22" pos:end="175:25">0x20</literal></expr></argument>, <argument pos:start="175:28" pos:end="175:33"><expr pos:start="175:28" pos:end="175:33"><literal type="number" pos:start="175:28" pos:end="175:33">0xA33F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:51"><expr pos:start="177:9" pos:end="177:50"><call pos:start="177:9" pos:end="177:50"><name pos:start="177:9" pos:end="177:13">stw_p</name><argument_list pos:start="177:14" pos:end="177:50">(<argument pos:start="177:15" pos:end="177:25"><expr pos:start="177:15" pos:end="177:25"><name pos:start="177:15" pos:end="177:20">header</name><operator pos:start="177:21" pos:end="177:21">+</operator><literal type="number" pos:start="177:22" pos:end="177:25">0x22</literal></expr></argument>, <argument pos:start="177:28" pos:end="177:49"><expr pos:start="177:28" pos:end="177:49"><name pos:start="177:28" pos:end="177:39">cmdline_addr</name><operator pos:start="177:40" pos:end="177:40">-</operator><name pos:start="177:41" pos:end="177:49">real_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="183:5" pos:end="183:31">/* handle vga= parameter */</comment>

    <expr_stmt pos:start="185:5" pos:end="185:43"><expr pos:start="185:5" pos:end="185:42"><name pos:start="185:5" pos:end="185:9">vmode</name> <operator pos:start="185:11" pos:end="185:11">=</operator> <call pos:start="185:13" pos:end="185:42"><name pos:start="185:13" pos:end="185:18">strstr</name><argument_list pos:start="185:19" pos:end="185:42">(<argument pos:start="185:20" pos:end="185:33"><expr pos:start="185:20" pos:end="185:33"><name pos:start="185:20" pos:end="185:33">kernel_cmdline</name></expr></argument>, <argument pos:start="185:36" pos:end="185:41"><expr pos:start="185:36" pos:end="185:41"><literal type="string" pos:start="185:36" pos:end="185:41">"vga="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="187:5" pos:end="215:5"><if pos:start="187:5" pos:end="215:5">if <condition pos:start="187:8" pos:end="187:14">(<expr pos:start="187:9" pos:end="187:13"><name pos:start="187:9" pos:end="187:13">vmode</name></expr>)</condition> <block pos:start="187:16" pos:end="215:5">{<block_content pos:start="189:9" pos:end="213:40">

        <decl_stmt pos:start="189:9" pos:end="189:32"><decl pos:start="189:9" pos:end="189:31"><type pos:start="189:9" pos:end="189:20"><name pos:start="189:9" pos:end="189:16">unsigned</name> <name pos:start="189:18" pos:end="189:20">int</name></type> <name pos:start="189:22" pos:end="189:31">video_mode</name></decl>;</decl_stmt>

        <comment type="block" pos:start="191:9" pos:end="191:25">/* skip "vga=" */</comment>

        <expr_stmt pos:start="193:9" pos:end="193:19"><expr pos:start="193:9" pos:end="193:18"><name pos:start="193:9" pos:end="193:13">vmode</name> <operator pos:start="193:15" pos:end="193:16">+=</operator> <literal type="number" pos:start="193:18" pos:end="193:18">4</literal></expr>;</expr_stmt>

        <if_stmt pos:start="195:9" pos:end="211:9"><if pos:start="195:9" pos:end="199:9">if <condition pos:start="195:12" pos:end="195:41">(<expr pos:start="195:13" pos:end="195:40"><operator pos:start="195:13" pos:end="195:13">!</operator><call pos:start="195:14" pos:end="195:40"><name pos:start="195:14" pos:end="195:20">strncmp</name><argument_list pos:start="195:21" pos:end="195:40">(<argument pos:start="195:22" pos:end="195:26"><expr pos:start="195:22" pos:end="195:26"><name pos:start="195:22" pos:end="195:26">vmode</name></expr></argument>, <argument pos:start="195:29" pos:end="195:36"><expr pos:start="195:29" pos:end="195:36"><literal type="string" pos:start="195:29" pos:end="195:36">"normal"</literal></expr></argument>, <argument pos:start="195:39" pos:end="195:39"><expr pos:start="195:39" pos:end="195:39"><literal type="number" pos:start="195:39" pos:end="195:39">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="195:43" pos:end="199:9">{<block_content pos:start="197:13" pos:end="197:32">

            <expr_stmt pos:start="197:13" pos:end="197:32"><expr pos:start="197:13" pos:end="197:31"><name pos:start="197:13" pos:end="197:22">video_mode</name> <operator pos:start="197:24" pos:end="197:24">=</operator> <literal type="number" pos:start="197:26" pos:end="197:31">0xffff</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="199:11" pos:end="203:9">else if <condition pos:start="199:19" pos:end="199:45">(<expr pos:start="199:20" pos:end="199:44"><operator pos:start="199:20" pos:end="199:20">!</operator><call pos:start="199:21" pos:end="199:44"><name pos:start="199:21" pos:end="199:27">strncmp</name><argument_list pos:start="199:28" pos:end="199:44">(<argument pos:start="199:29" pos:end="199:33"><expr pos:start="199:29" pos:end="199:33"><name pos:start="199:29" pos:end="199:33">vmode</name></expr></argument>, <argument pos:start="199:36" pos:end="199:40"><expr pos:start="199:36" pos:end="199:40"><literal type="string" pos:start="199:36" pos:end="199:40">"ext"</literal></expr></argument>, <argument pos:start="199:43" pos:end="199:43"><expr pos:start="199:43" pos:end="199:43"><literal type="number" pos:start="199:43" pos:end="199:43">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="199:47" pos:end="203:9">{<block_content pos:start="201:13" pos:end="201:32">

            <expr_stmt pos:start="201:13" pos:end="201:32"><expr pos:start="201:13" pos:end="201:31"><name pos:start="201:13" pos:end="201:22">video_mode</name> <operator pos:start="201:24" pos:end="201:24">=</operator> <literal type="number" pos:start="201:26" pos:end="201:31">0xfffe</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="203:11" pos:end="207:9">else if <condition pos:start="203:19" pos:end="203:45">(<expr pos:start="203:20" pos:end="203:44"><operator pos:start="203:20" pos:end="203:20">!</operator><call pos:start="203:21" pos:end="203:44"><name pos:start="203:21" pos:end="203:27">strncmp</name><argument_list pos:start="203:28" pos:end="203:44">(<argument pos:start="203:29" pos:end="203:33"><expr pos:start="203:29" pos:end="203:33"><name pos:start="203:29" pos:end="203:33">vmode</name></expr></argument>, <argument pos:start="203:36" pos:end="203:40"><expr pos:start="203:36" pos:end="203:40"><literal type="string" pos:start="203:36" pos:end="203:40">"ask"</literal></expr></argument>, <argument pos:start="203:43" pos:end="203:43"><expr pos:start="203:43" pos:end="203:43"><literal type="number" pos:start="203:43" pos:end="203:43">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="203:47" pos:end="207:9">{<block_content pos:start="205:13" pos:end="205:32">

            <expr_stmt pos:start="205:13" pos:end="205:32"><expr pos:start="205:13" pos:end="205:31"><name pos:start="205:13" pos:end="205:22">video_mode</name> <operator pos:start="205:24" pos:end="205:24">=</operator> <literal type="number" pos:start="205:26" pos:end="205:31">0xfffd</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="207:11" pos:end="211:9">else <block pos:start="207:16" pos:end="211:9">{<block_content pos:start="209:13" pos:end="209:48">

            <expr_stmt pos:start="209:13" pos:end="209:48"><expr pos:start="209:13" pos:end="209:47"><name pos:start="209:13" pos:end="209:22">video_mode</name> <operator pos:start="209:24" pos:end="209:24">=</operator> <call pos:start="209:26" pos:end="209:47"><name pos:start="209:26" pos:end="209:31">strtol</name><argument_list pos:start="209:32" pos:end="209:47">(<argument pos:start="209:33" pos:end="209:37"><expr pos:start="209:33" pos:end="209:37"><name pos:start="209:33" pos:end="209:37">vmode</name></expr></argument>, <argument pos:start="209:40" pos:end="209:43"><expr pos:start="209:40" pos:end="209:43"><name pos:start="209:40" pos:end="209:43">NULL</name></expr></argument>, <argument pos:start="209:46" pos:end="209:46"><expr pos:start="209:46" pos:end="209:46"><literal type="number" pos:start="209:46" pos:end="209:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="213:9" pos:end="213:40"><expr pos:start="213:9" pos:end="213:39"><call pos:start="213:9" pos:end="213:39"><name pos:start="213:9" pos:end="213:13">stw_p</name><argument_list pos:start="213:14" pos:end="213:39">(<argument pos:start="213:15" pos:end="213:26"><expr pos:start="213:15" pos:end="213:26"><name pos:start="213:15" pos:end="213:20">header</name><operator pos:start="213:21" pos:end="213:21">+</operator><literal type="number" pos:start="213:22" pos:end="213:26">0x1fa</literal></expr></argument>, <argument pos:start="213:29" pos:end="213:38"><expr pos:start="213:29" pos:end="213:38"><name pos:start="213:29" pos:end="213:38">video_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="219:5" pos:end="219:21">/* loader type */</comment>

    <comment type="block" pos:start="221:5" pos:end="225:36">/* High nybble = B reserved for QEMU; low nybble is revision number.

       If this code is substantially changed, you may want to consider

       incrementing the revision. */</comment>

    <if_stmt pos:start="227:5" pos:end="231:5"><if pos:start="227:5" pos:end="231:5">if <condition pos:start="227:8" pos:end="227:26">(<expr pos:start="227:9" pos:end="227:25"><name pos:start="227:9" pos:end="227:16">protocol</name> <operator pos:start="227:18" pos:end="227:19">&gt;=</operator> <literal type="number" pos:start="227:21" pos:end="227:25">0x200</literal></expr>)</condition> <block pos:start="227:28" pos:end="231:5">{<block_content pos:start="229:9" pos:end="229:29">

        <expr_stmt pos:start="229:9" pos:end="229:29"><expr pos:start="229:9" pos:end="229:28"><name pos:start="229:9" pos:end="229:21"><name pos:start="229:9" pos:end="229:14">header</name><index pos:start="229:15" pos:end="229:21">[<expr pos:start="229:16" pos:end="229:20"><literal type="number" pos:start="229:16" pos:end="229:20">0x210</literal></expr>]</index></name> <operator pos:start="229:23" pos:end="229:23">=</operator> <literal type="number" pos:start="229:25" pos:end="229:28">0xB0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="233:5" pos:end="233:14">/* heap */</comment>

    <if_stmt pos:start="235:5" pos:end="241:5"><if pos:start="235:5" pos:end="241:5">if <condition pos:start="235:8" pos:end="235:26">(<expr pos:start="235:9" pos:end="235:25"><name pos:start="235:9" pos:end="235:16">protocol</name> <operator pos:start="235:18" pos:end="235:19">&gt;=</operator> <literal type="number" pos:start="235:21" pos:end="235:25">0x201</literal></expr>)</condition> <block pos:start="235:28" pos:end="241:5">{<block_content pos:start="237:9" pos:end="239:58">

        <expr_stmt pos:start="237:9" pos:end="237:30"><expr pos:start="237:9" pos:end="237:29"><name pos:start="237:9" pos:end="237:21"><name pos:start="237:9" pos:end="237:14">header</name><index pos:start="237:15" pos:end="237:21">[<expr pos:start="237:16" pos:end="237:20"><literal type="number" pos:start="237:16" pos:end="237:20">0x211</literal></expr>]</index></name> <operator pos:start="237:23" pos:end="237:24">|=</operator> <literal type="number" pos:start="237:26" pos:end="237:29">0x80</literal></expr>;</expr_stmt>	<comment type="block" pos:start="237:33" pos:end="237:50">/* CAN_USE_HEAP */</comment>

        <expr_stmt pos:start="239:9" pos:end="239:58"><expr pos:start="239:9" pos:end="239:57"><call pos:start="239:9" pos:end="239:57"><name pos:start="239:9" pos:end="239:13">stw_p</name><argument_list pos:start="239:14" pos:end="239:57">(<argument pos:start="239:15" pos:end="239:26"><expr pos:start="239:15" pos:end="239:26"><name pos:start="239:15" pos:end="239:20">header</name><operator pos:start="239:21" pos:end="239:21">+</operator><literal type="number" pos:start="239:22" pos:end="239:26">0x224</literal></expr></argument>, <argument pos:start="239:29" pos:end="239:56"><expr pos:start="239:29" pos:end="239:56"><name pos:start="239:29" pos:end="239:40">cmdline_addr</name><operator pos:start="239:41" pos:end="239:41">-</operator><name pos:start="239:42" pos:end="239:50">real_addr</name><operator pos:start="239:51" pos:end="239:51">-</operator><literal type="number" pos:start="239:52" pos:end="239:56">0x200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="245:5" pos:end="245:21">/* load initrd */</comment>

    <if_stmt pos:start="247:5" pos:end="295:5"><if pos:start="247:5" pos:end="295:5">if <condition pos:start="247:8" pos:end="247:24">(<expr pos:start="247:9" pos:end="247:23"><name pos:start="247:9" pos:end="247:23">initrd_filename</name></expr>)</condition> <block pos:start="247:26" pos:end="295:5">{<block_content pos:start="249:9" pos:end="293:41">

        <if_stmt pos:start="249:9" pos:end="255:9"><if pos:start="249:9" pos:end="255:9">if <condition pos:start="249:12" pos:end="249:29">(<expr pos:start="249:13" pos:end="249:28"><name pos:start="249:13" pos:end="249:20">protocol</name> <operator pos:start="249:22" pos:end="249:22">&lt;</operator> <literal type="number" pos:start="249:24" pos:end="249:28">0x200</literal></expr>)</condition> <block pos:start="249:31" pos:end="255:9">{<block_content pos:start="251:13" pos:end="253:20">

            <expr_stmt pos:start="251:13" pos:end="251:79"><expr pos:start="251:13" pos:end="251:78"><call pos:start="251:13" pos:end="251:78"><name pos:start="251:13" pos:end="251:19">fprintf</name><argument_list pos:start="251:20" pos:end="251:78">(<argument pos:start="251:21" pos:end="251:26"><expr pos:start="251:21" pos:end="251:26"><name pos:start="251:21" pos:end="251:26">stderr</name></expr></argument>, <argument pos:start="251:29" pos:end="251:77"><expr pos:start="251:29" pos:end="251:77"><literal type="string" pos:start="251:29" pos:end="251:77">"qemu: linux kernel too old to load a ram disk\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="253:13" pos:end="253:20"><expr pos:start="253:13" pos:end="253:19"><call pos:start="253:13" pos:end="253:19"><name pos:start="253:13" pos:end="253:16">exit</name><argument_list pos:start="253:17" pos:end="253:19">(<argument pos:start="253:18" pos:end="253:18"><expr pos:start="253:18" pos:end="253:18"><literal type="number" pos:start="253:18" pos:end="253:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="259:9" pos:end="259:54"><expr pos:start="259:9" pos:end="259:53"><name pos:start="259:9" pos:end="259:19">initrd_size</name> <operator pos:start="259:21" pos:end="259:21">=</operator> <call pos:start="259:23" pos:end="259:53"><name pos:start="259:23" pos:end="259:36">get_image_size</name><argument_list pos:start="259:37" pos:end="259:53">(<argument pos:start="259:38" pos:end="259:52"><expr pos:start="259:38" pos:end="259:52"><name pos:start="259:38" pos:end="259:52">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="261:9" pos:end="269:9"><if pos:start="261:9" pos:end="269:9">if <condition pos:start="261:12" pos:end="261:28">(<expr pos:start="261:13" pos:end="261:27"><name pos:start="261:13" pos:end="261:23">initrd_size</name> <operator pos:start="261:25" pos:end="261:25">&lt;</operator> <literal type="number" pos:start="261:27" pos:end="261:27">0</literal></expr>)</condition> <block pos:start="261:30" pos:end="269:9">{<block_content pos:start="263:13" pos:end="267:20">

            <expr_stmt pos:start="263:13" pos:end="265:54"><expr pos:start="263:13" pos:end="265:53"><call pos:start="263:13" pos:end="265:53"><name pos:start="263:13" pos:end="263:19">fprintf</name><argument_list pos:start="263:20" pos:end="265:53">(<argument pos:start="263:21" pos:end="263:26"><expr pos:start="263:21" pos:end="263:26"><name pos:start="263:21" pos:end="263:26">stderr</name></expr></argument>, <argument pos:start="263:29" pos:end="263:65"><expr pos:start="263:29" pos:end="263:65"><literal type="string" pos:start="263:29" pos:end="263:65">"qemu: error reading initrd %s: %s\n"</literal></expr></argument>,

                    <argument pos:start="265:21" pos:end="265:35"><expr pos:start="265:21" pos:end="265:35"><name pos:start="265:21" pos:end="265:35">initrd_filename</name></expr></argument>, <argument pos:start="265:38" pos:end="265:52"><expr pos:start="265:38" pos:end="265:52"><call pos:start="265:38" pos:end="265:52"><name pos:start="265:38" pos:end="265:45">strerror</name><argument_list pos:start="265:46" pos:end="265:52">(<argument pos:start="265:47" pos:end="265:51"><expr pos:start="265:47" pos:end="265:51"><name pos:start="265:47" pos:end="265:51">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="267:13" pos:end="267:20"><expr pos:start="267:13" pos:end="267:19"><call pos:start="267:13" pos:end="267:19"><name pos:start="267:13" pos:end="267:16">exit</name><argument_list pos:start="267:17" pos:end="267:19">(<argument pos:start="267:18" pos:end="267:18"><expr pos:start="267:18" pos:end="267:18"><literal type="number" pos:start="267:18" pos:end="267:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="273:9" pos:end="273:55"><expr pos:start="273:9" pos:end="273:54"><name pos:start="273:9" pos:end="273:19">initrd_addr</name> <operator pos:start="273:21" pos:end="273:21">=</operator> <operator pos:start="273:23" pos:end="273:23">(</operator><name pos:start="273:24" pos:end="273:33">initrd_max</name><operator pos:start="273:34" pos:end="273:34">-</operator><name pos:start="273:35" pos:end="273:45">initrd_size</name><operator pos:start="273:46" pos:end="273:46">)</operator> <operator pos:start="273:48" pos:end="273:48">&amp;</operator> <operator pos:start="273:50" pos:end="273:50">~</operator><literal type="number" pos:start="273:51" pos:end="273:54">4095</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="277:9" pos:end="277:44"><expr pos:start="277:9" pos:end="277:43"><name pos:start="277:9" pos:end="277:19">initrd_data</name> <operator pos:start="277:21" pos:end="277:21">=</operator> <call pos:start="277:23" pos:end="277:43"><name pos:start="277:23" pos:end="277:30">g_malloc</name><argument_list pos:start="277:31" pos:end="277:43">(<argument pos:start="277:32" pos:end="277:42"><expr pos:start="277:32" pos:end="277:42"><name pos:start="277:32" pos:end="277:42">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="279:9" pos:end="279:49"><expr pos:start="279:9" pos:end="279:48"><call pos:start="279:9" pos:end="279:48"><name pos:start="279:9" pos:end="279:18">load_image</name><argument_list pos:start="279:19" pos:end="279:48">(<argument pos:start="279:20" pos:end="279:34"><expr pos:start="279:20" pos:end="279:34"><name pos:start="279:20" pos:end="279:34">initrd_filename</name></expr></argument>, <argument pos:start="279:37" pos:end="279:47"><expr pos:start="279:37" pos:end="279:47"><name pos:start="279:37" pos:end="279:47">initrd_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="283:9" pos:end="283:64"><expr pos:start="283:9" pos:end="283:63"><call pos:start="283:9" pos:end="283:63"><name pos:start="283:9" pos:end="283:22">fw_cfg_add_i32</name><argument_list pos:start="283:23" pos:end="283:63">(<argument pos:start="283:24" pos:end="283:29"><expr pos:start="283:24" pos:end="283:29"><name pos:start="283:24" pos:end="283:29">fw_cfg</name></expr></argument>, <argument pos:start="283:32" pos:end="283:49"><expr pos:start="283:32" pos:end="283:49"><name pos:start="283:32" pos:end="283:49">FW_CFG_INITRD_ADDR</name></expr></argument>, <argument pos:start="283:52" pos:end="283:62"><expr pos:start="283:52" pos:end="283:62"><name pos:start="283:52" pos:end="283:62">initrd_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="285:9" pos:end="285:64"><expr pos:start="285:9" pos:end="285:63"><call pos:start="285:9" pos:end="285:63"><name pos:start="285:9" pos:end="285:22">fw_cfg_add_i32</name><argument_list pos:start="285:23" pos:end="285:63">(<argument pos:start="285:24" pos:end="285:29"><expr pos:start="285:24" pos:end="285:29"><name pos:start="285:24" pos:end="285:29">fw_cfg</name></expr></argument>, <argument pos:start="285:32" pos:end="285:49"><expr pos:start="285:32" pos:end="285:49"><name pos:start="285:32" pos:end="285:49">FW_CFG_INITRD_SIZE</name></expr></argument>, <argument pos:start="285:52" pos:end="285:62"><expr pos:start="285:52" pos:end="285:62"><name pos:start="285:52" pos:end="285:62">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="287:9" pos:end="287:79"><expr pos:start="287:9" pos:end="287:78"><call pos:start="287:9" pos:end="287:78"><name pos:start="287:9" pos:end="287:24">fw_cfg_add_bytes</name><argument_list pos:start="287:25" pos:end="287:78">(<argument pos:start="287:26" pos:end="287:31"><expr pos:start="287:26" pos:end="287:31"><name pos:start="287:26" pos:end="287:31">fw_cfg</name></expr></argument>, <argument pos:start="287:34" pos:end="287:51"><expr pos:start="287:34" pos:end="287:51"><name pos:start="287:34" pos:end="287:51">FW_CFG_INITRD_DATA</name></expr></argument>, <argument pos:start="287:54" pos:end="287:64"><expr pos:start="287:54" pos:end="287:64"><name pos:start="287:54" pos:end="287:64">initrd_data</name></expr></argument>, <argument pos:start="287:67" pos:end="287:77"><expr pos:start="287:67" pos:end="287:77"><name pos:start="287:67" pos:end="287:77">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="291:9" pos:end="291:41"><expr pos:start="291:9" pos:end="291:40"><call pos:start="291:9" pos:end="291:40"><name pos:start="291:9" pos:end="291:13">stl_p</name><argument_list pos:start="291:14" pos:end="291:40">(<argument pos:start="291:15" pos:end="291:26"><expr pos:start="291:15" pos:end="291:26"><name pos:start="291:15" pos:end="291:20">header</name><operator pos:start="291:21" pos:end="291:21">+</operator><literal type="number" pos:start="291:22" pos:end="291:26">0x218</literal></expr></argument>, <argument pos:start="291:29" pos:end="291:39"><expr pos:start="291:29" pos:end="291:39"><name pos:start="291:29" pos:end="291:39">initrd_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="293:9" pos:end="293:41"><expr pos:start="293:9" pos:end="293:40"><call pos:start="293:9" pos:end="293:40"><name pos:start="293:9" pos:end="293:13">stl_p</name><argument_list pos:start="293:14" pos:end="293:40">(<argument pos:start="293:15" pos:end="293:26"><expr pos:start="293:15" pos:end="293:26"><name pos:start="293:15" pos:end="293:20">header</name><operator pos:start="293:21" pos:end="293:21">+</operator><literal type="number" pos:start="293:22" pos:end="293:26">0x21c</literal></expr></argument>, <argument pos:start="293:29" pos:end="293:39"><expr pos:start="293:29" pos:end="293:39"><name pos:start="293:29" pos:end="293:39">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="299:5" pos:end="299:31">/* load kernel and setup */</comment>

    <expr_stmt pos:start="301:5" pos:end="301:31"><expr pos:start="301:5" pos:end="301:30"><name pos:start="301:5" pos:end="301:14">setup_size</name> <operator pos:start="301:16" pos:end="301:16">=</operator> <name pos:start="301:18" pos:end="301:30"><name pos:start="301:18" pos:end="301:23">header</name><index pos:start="301:24" pos:end="301:30">[<expr pos:start="301:25" pos:end="301:29"><literal type="number" pos:start="301:25" pos:end="301:29">0x1f1</literal></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="303:5" pos:end="307:5"><if pos:start="303:5" pos:end="307:5">if <condition pos:start="303:8" pos:end="303:24">(<expr pos:start="303:9" pos:end="303:23"><name pos:start="303:9" pos:end="303:18">setup_size</name> <operator pos:start="303:20" pos:end="303:21">==</operator> <literal type="number" pos:start="303:23" pos:end="303:23">0</literal></expr>)</condition> <block pos:start="303:26" pos:end="307:5">{<block_content pos:start="305:9" pos:end="305:23">

        <expr_stmt pos:start="305:9" pos:end="305:23"><expr pos:start="305:9" pos:end="305:22"><name pos:start="305:9" pos:end="305:18">setup_size</name> <operator pos:start="305:20" pos:end="305:20">=</operator> <literal type="number" pos:start="305:22" pos:end="305:22">4</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="309:5" pos:end="309:36"><expr pos:start="309:5" pos:end="309:35"><name pos:start="309:5" pos:end="309:14">setup_size</name> <operator pos:start="309:16" pos:end="309:16">=</operator> <operator pos:start="309:18" pos:end="309:18">(</operator><name pos:start="309:19" pos:end="309:28">setup_size</name><operator pos:start="309:29" pos:end="309:29">+</operator><literal type="number" pos:start="309:30" pos:end="309:30">1</literal><operator pos:start="309:31" pos:end="309:31">)</operator><operator pos:start="309:32" pos:end="309:32">*</operator><literal type="number" pos:start="309:33" pos:end="309:35">512</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="311:5" pos:end="311:30"><expr pos:start="311:5" pos:end="311:29"><name pos:start="311:5" pos:end="311:15">kernel_size</name> <operator pos:start="311:17" pos:end="311:18">-=</operator> <name pos:start="311:20" pos:end="311:29">setup_size</name></expr>;</expr_stmt>



    <expr_stmt pos:start="315:5" pos:end="315:34"><expr pos:start="315:5" pos:end="315:33"><name pos:start="315:5" pos:end="315:9">setup</name>  <operator pos:start="315:12" pos:end="315:12">=</operator> <call pos:start="315:14" pos:end="315:33"><name pos:start="315:14" pos:end="315:21">g_malloc</name><argument_list pos:start="315:22" pos:end="315:33">(<argument pos:start="315:23" pos:end="315:32"><expr pos:start="315:23" pos:end="315:32"><name pos:start="315:23" pos:end="315:32">setup_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="317:5" pos:end="317:35"><expr pos:start="317:5" pos:end="317:34"><name pos:start="317:5" pos:end="317:10">kernel</name> <operator pos:start="317:12" pos:end="317:12">=</operator> <call pos:start="317:14" pos:end="317:34"><name pos:start="317:14" pos:end="317:21">g_malloc</name><argument_list pos:start="317:22" pos:end="317:34">(<argument pos:start="317:23" pos:end="317:33"><expr pos:start="317:23" pos:end="317:33"><name pos:start="317:23" pos:end="317:33">kernel_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="319:5" pos:end="319:26"><expr pos:start="319:5" pos:end="319:25"><call pos:start="319:5" pos:end="319:25"><name pos:start="319:5" pos:end="319:9">fseek</name><argument_list pos:start="319:10" pos:end="319:25">(<argument pos:start="319:11" pos:end="319:11"><expr pos:start="319:11" pos:end="319:11"><name pos:start="319:11" pos:end="319:11">f</name></expr></argument>, <argument pos:start="319:14" pos:end="319:14"><expr pos:start="319:14" pos:end="319:14"><literal type="number" pos:start="319:14" pos:end="319:14">0</literal></expr></argument>, <argument pos:start="319:17" pos:end="319:24"><expr pos:start="319:17" pos:end="319:24"><name pos:start="319:17" pos:end="319:24">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="321:5" pos:end="327:5"><if pos:start="321:5" pos:end="327:5">if <condition pos:start="321:8" pos:end="321:53">(<expr pos:start="321:9" pos:end="321:52"><call pos:start="321:9" pos:end="321:38"><name pos:start="321:9" pos:end="321:13">fread</name><argument_list pos:start="321:14" pos:end="321:38">(<argument pos:start="321:15" pos:end="321:19"><expr pos:start="321:15" pos:end="321:19"><name pos:start="321:15" pos:end="321:19">setup</name></expr></argument>, <argument pos:start="321:22" pos:end="321:22"><expr pos:start="321:22" pos:end="321:22"><literal type="number" pos:start="321:22" pos:end="321:22">1</literal></expr></argument>, <argument pos:start="321:25" pos:end="321:34"><expr pos:start="321:25" pos:end="321:34"><name pos:start="321:25" pos:end="321:34">setup_size</name></expr></argument>, <argument pos:start="321:37" pos:end="321:37"><expr pos:start="321:37" pos:end="321:37"><name pos:start="321:37" pos:end="321:37">f</name></expr></argument>)</argument_list></call> <operator pos:start="321:40" pos:end="321:41">!=</operator> <name pos:start="321:43" pos:end="321:52">setup_size</name></expr>)</condition> <block pos:start="321:55" pos:end="327:5">{<block_content pos:start="323:9" pos:end="325:16">

        <expr_stmt pos:start="323:9" pos:end="323:44"><expr pos:start="323:9" pos:end="323:43"><call pos:start="323:9" pos:end="323:43"><name pos:start="323:9" pos:end="323:15">fprintf</name><argument_list pos:start="323:16" pos:end="323:43">(<argument pos:start="323:17" pos:end="323:22"><expr pos:start="323:17" pos:end="323:22"><name pos:start="323:17" pos:end="323:22">stderr</name></expr></argument>, <argument pos:start="323:25" pos:end="323:42"><expr pos:start="323:25" pos:end="323:42"><literal type="string" pos:start="323:25" pos:end="323:42">"fread() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="325:9" pos:end="325:16"><expr pos:start="325:9" pos:end="325:15"><call pos:start="325:9" pos:end="325:15"><name pos:start="325:9" pos:end="325:12">exit</name><argument_list pos:start="325:13" pos:end="325:15">(<argument pos:start="325:14" pos:end="325:14"><expr pos:start="325:14" pos:end="325:14"><literal type="number" pos:start="325:14" pos:end="325:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="329:5" pos:end="335:5"><if pos:start="329:5" pos:end="335:5">if <condition pos:start="329:8" pos:end="329:56">(<expr pos:start="329:9" pos:end="329:55"><call pos:start="329:9" pos:end="329:40"><name pos:start="329:9" pos:end="329:13">fread</name><argument_list pos:start="329:14" pos:end="329:40">(<argument pos:start="329:15" pos:end="329:20"><expr pos:start="329:15" pos:end="329:20"><name pos:start="329:15" pos:end="329:20">kernel</name></expr></argument>, <argument pos:start="329:23" pos:end="329:23"><expr pos:start="329:23" pos:end="329:23"><literal type="number" pos:start="329:23" pos:end="329:23">1</literal></expr></argument>, <argument pos:start="329:26" pos:end="329:36"><expr pos:start="329:26" pos:end="329:36"><name pos:start="329:26" pos:end="329:36">kernel_size</name></expr></argument>, <argument pos:start="329:39" pos:end="329:39"><expr pos:start="329:39" pos:end="329:39"><name pos:start="329:39" pos:end="329:39">f</name></expr></argument>)</argument_list></call> <operator pos:start="329:42" pos:end="329:43">!=</operator> <name pos:start="329:45" pos:end="329:55">kernel_size</name></expr>)</condition> <block pos:start="329:58" pos:end="335:5">{<block_content pos:start="331:9" pos:end="333:16">

        <expr_stmt pos:start="331:9" pos:end="331:44"><expr pos:start="331:9" pos:end="331:43"><call pos:start="331:9" pos:end="331:43"><name pos:start="331:9" pos:end="331:15">fprintf</name><argument_list pos:start="331:16" pos:end="331:43">(<argument pos:start="331:17" pos:end="331:22"><expr pos:start="331:17" pos:end="331:22"><name pos:start="331:17" pos:end="331:22">stderr</name></expr></argument>, <argument pos:start="331:25" pos:end="331:42"><expr pos:start="331:25" pos:end="331:42"><literal type="string" pos:start="331:25" pos:end="331:42">"fread() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="333:9" pos:end="333:16"><expr pos:start="333:9" pos:end="333:15"><call pos:start="333:9" pos:end="333:15"><name pos:start="333:9" pos:end="333:12">exit</name><argument_list pos:start="333:13" pos:end="333:15">(<argument pos:start="333:14" pos:end="333:14"><expr pos:start="333:14" pos:end="333:14"><literal type="number" pos:start="333:14" pos:end="333:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="337:5" pos:end="337:14"><expr pos:start="337:5" pos:end="337:13"><call pos:start="337:5" pos:end="337:13"><name pos:start="337:5" pos:end="337:10">fclose</name><argument_list pos:start="337:11" pos:end="337:13">(<argument pos:start="337:12" pos:end="337:12"><expr pos:start="337:12" pos:end="337:12"><name pos:start="337:12" pos:end="337:12">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="339:5" pos:end="339:59"><expr pos:start="339:5" pos:end="339:58"><call pos:start="339:5" pos:end="339:58"><name pos:start="339:5" pos:end="339:10">memcpy</name><argument_list pos:start="339:11" pos:end="339:58">(<argument pos:start="339:12" pos:end="339:16"><expr pos:start="339:12" pos:end="339:16"><name pos:start="339:12" pos:end="339:16">setup</name></expr></argument>, <argument pos:start="339:19" pos:end="339:24"><expr pos:start="339:19" pos:end="339:24"><name pos:start="339:19" pos:end="339:24">header</name></expr></argument>, <argument pos:start="339:27" pos:end="339:57"><expr pos:start="339:27" pos:end="339:57"><call pos:start="339:27" pos:end="339:57"><name pos:start="339:27" pos:end="339:29">MIN</name><argument_list pos:start="339:30" pos:end="339:57">(<argument pos:start="339:31" pos:end="339:44"><expr pos:start="339:31" pos:end="339:44"><sizeof pos:start="339:31" pos:end="339:44">sizeof<argument_list pos:start="339:37" pos:end="339:44">(<argument pos:start="339:38" pos:end="339:43"><expr pos:start="339:38" pos:end="339:43"><name pos:start="339:38" pos:end="339:43">header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="339:47" pos:end="339:56"><expr pos:start="339:47" pos:end="339:56"><name pos:start="339:47" pos:end="339:56">setup_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="343:5" pos:end="343:58"><expr pos:start="343:5" pos:end="343:57"><call pos:start="343:5" pos:end="343:57"><name pos:start="343:5" pos:end="343:18">fw_cfg_add_i32</name><argument_list pos:start="343:19" pos:end="343:57">(<argument pos:start="343:20" pos:end="343:25"><expr pos:start="343:20" pos:end="343:25"><name pos:start="343:20" pos:end="343:25">fw_cfg</name></expr></argument>, <argument pos:start="343:28" pos:end="343:45"><expr pos:start="343:28" pos:end="343:45"><name pos:start="343:28" pos:end="343:45">FW_CFG_KERNEL_ADDR</name></expr></argument>, <argument pos:start="343:48" pos:end="343:56"><expr pos:start="343:48" pos:end="343:56"><name pos:start="343:48" pos:end="343:56">prot_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="345:5" pos:end="345:60"><expr pos:start="345:5" pos:end="345:59"><call pos:start="345:5" pos:end="345:59"><name pos:start="345:5" pos:end="345:18">fw_cfg_add_i32</name><argument_list pos:start="345:19" pos:end="345:59">(<argument pos:start="345:20" pos:end="345:25"><expr pos:start="345:20" pos:end="345:25"><name pos:start="345:20" pos:end="345:25">fw_cfg</name></expr></argument>, <argument pos:start="345:28" pos:end="345:45"><expr pos:start="345:28" pos:end="345:45"><name pos:start="345:28" pos:end="345:45">FW_CFG_KERNEL_SIZE</name></expr></argument>, <argument pos:start="345:48" pos:end="345:58"><expr pos:start="345:48" pos:end="345:58"><name pos:start="345:48" pos:end="345:58">kernel_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="347:5" pos:end="347:70"><expr pos:start="347:5" pos:end="347:69"><call pos:start="347:5" pos:end="347:69"><name pos:start="347:5" pos:end="347:20">fw_cfg_add_bytes</name><argument_list pos:start="347:21" pos:end="347:69">(<argument pos:start="347:22" pos:end="347:27"><expr pos:start="347:22" pos:end="347:27"><name pos:start="347:22" pos:end="347:27">fw_cfg</name></expr></argument>, <argument pos:start="347:30" pos:end="347:47"><expr pos:start="347:30" pos:end="347:47"><name pos:start="347:30" pos:end="347:47">FW_CFG_KERNEL_DATA</name></expr></argument>, <argument pos:start="347:50" pos:end="347:55"><expr pos:start="347:50" pos:end="347:55"><name pos:start="347:50" pos:end="347:55">kernel</name></expr></argument>, <argument pos:start="347:58" pos:end="347:68"><expr pos:start="347:58" pos:end="347:68"><name pos:start="347:58" pos:end="347:68">kernel_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="351:5" pos:end="351:57"><expr pos:start="351:5" pos:end="351:56"><call pos:start="351:5" pos:end="351:56"><name pos:start="351:5" pos:end="351:18">fw_cfg_add_i32</name><argument_list pos:start="351:19" pos:end="351:56">(<argument pos:start="351:20" pos:end="351:25"><expr pos:start="351:20" pos:end="351:25"><name pos:start="351:20" pos:end="351:25">fw_cfg</name></expr></argument>, <argument pos:start="351:28" pos:end="351:44"><expr pos:start="351:28" pos:end="351:44"><name pos:start="351:28" pos:end="351:44">FW_CFG_SETUP_ADDR</name></expr></argument>, <argument pos:start="351:47" pos:end="351:55"><expr pos:start="351:47" pos:end="351:55"><name pos:start="351:47" pos:end="351:55">real_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="353:5" pos:end="353:58"><expr pos:start="353:5" pos:end="353:57"><call pos:start="353:5" pos:end="353:57"><name pos:start="353:5" pos:end="353:18">fw_cfg_add_i32</name><argument_list pos:start="353:19" pos:end="353:57">(<argument pos:start="353:20" pos:end="353:25"><expr pos:start="353:20" pos:end="353:25"><name pos:start="353:20" pos:end="353:25">fw_cfg</name></expr></argument>, <argument pos:start="353:28" pos:end="353:44"><expr pos:start="353:28" pos:end="353:44"><name pos:start="353:28" pos:end="353:44">FW_CFG_SETUP_SIZE</name></expr></argument>, <argument pos:start="353:47" pos:end="353:56"><expr pos:start="353:47" pos:end="353:56"><name pos:start="353:47" pos:end="353:56">setup_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="355:5" pos:end="355:67"><expr pos:start="355:5" pos:end="355:66"><call pos:start="355:5" pos:end="355:66"><name pos:start="355:5" pos:end="355:20">fw_cfg_add_bytes</name><argument_list pos:start="355:21" pos:end="355:66">(<argument pos:start="355:22" pos:end="355:27"><expr pos:start="355:22" pos:end="355:27"><name pos:start="355:22" pos:end="355:27">fw_cfg</name></expr></argument>, <argument pos:start="355:30" pos:end="355:46"><expr pos:start="355:30" pos:end="355:46"><name pos:start="355:30" pos:end="355:46">FW_CFG_SETUP_DATA</name></expr></argument>, <argument pos:start="355:49" pos:end="355:53"><expr pos:start="355:49" pos:end="355:53"><name pos:start="355:49" pos:end="355:53">setup</name></expr></argument>, <argument pos:start="355:56" pos:end="355:65"><expr pos:start="355:56" pos:end="355:65"><name pos:start="355:56" pos:end="355:65">setup_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="359:5" pos:end="359:54"><expr pos:start="359:5" pos:end="359:53"><name pos:start="359:5" pos:end="359:30"><name pos:start="359:5" pos:end="359:14">option_rom</name><index pos:start="359:15" pos:end="359:30">[<expr pos:start="359:16" pos:end="359:29"><name pos:start="359:16" pos:end="359:29">nb_option_roms</name></expr>]</index></name><operator pos:start="359:31" pos:end="359:31">.</operator><name pos:start="359:32" pos:end="359:35">name</name> <operator pos:start="359:37" pos:end="359:37">=</operator> <literal type="string" pos:start="359:39" pos:end="359:53">"linuxboot.bin"</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="361:5" pos:end="361:45"><expr pos:start="361:5" pos:end="361:44"><name pos:start="361:5" pos:end="361:30"><name pos:start="361:5" pos:end="361:14">option_rom</name><index pos:start="361:15" pos:end="361:30">[<expr pos:start="361:16" pos:end="361:29"><name pos:start="361:16" pos:end="361:29">nb_option_roms</name></expr>]</index></name><operator pos:start="361:31" pos:end="361:31">.</operator><name pos:start="361:32" pos:end="361:40">bootindex</name> <operator pos:start="361:42" pos:end="361:42">=</operator> <literal type="number" pos:start="361:44" pos:end="361:44">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="363:5" pos:end="363:21"><expr pos:start="363:5" pos:end="363:20"><name pos:start="363:5" pos:end="363:18">nb_option_roms</name><operator pos:start="363:19" pos:end="363:20">++</operator></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
