<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16125.c" pos:tabs="8"><function pos:start="1:1" pos:end="89:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">hdev_open</name><parameter_list pos:start="1:21" pos:end="1:75">(<parameter pos:start="1:22" pos:end="1:41"><decl pos:start="1:22" pos:end="1:41"><type pos:start="1:22" pos:end="1:41"><name pos:start="1:22" pos:end="1:37">BlockDriverState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:41">bs</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:63"><decl pos:start="1:44" pos:end="1:63"><type pos:start="1:44" pos:end="1:63"><specifier pos:start="1:44" pos:end="1:48">const</specifier> <name pos:start="1:50" pos:end="1:53">char</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:63">filename</name></decl></parameter>, <parameter pos:start="1:66" pos:end="1:74"><decl pos:start="1:66" pos:end="1:74"><type pos:start="1:66" pos:end="1:74"><name pos:start="1:66" pos:end="1:68">int</name></type> <name pos:start="1:70" pos:end="1:74">flags</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="89:1">{<block_content pos:start="5:5" pos:end="87:51">

    <decl_stmt pos:start="5:5" pos:end="10:0"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">BDRVRawState</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:19">s</name> <init pos:start="5:21" pos:end="5:32">= <expr pos:start="5:23" pos:end="5:32"><name pos:start="5:23" pos:end="5:32"><name pos:start="5:23" pos:end="5:24">bs</name><operator pos:start="5:25" pos:end="5:26">-&gt;</operator><name pos:start="5:27" pos:end="5:32">opaque</name></name></expr></init></decl>;</decl_stmt>



<cpp:if pos:start="9:1" pos:end="9:43">#<cpp:directive pos:start="9:2" pos:end="9:3">if</cpp:directive> <expr pos:start="9:5" pos:end="9:43"><call pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:11">defined</name><argument_list pos:start="9:12" pos:end="9:22">(<argument pos:start="9:13" pos:end="9:21"><expr pos:start="9:13" pos:end="9:21"><name pos:start="9:13" pos:end="9:21">__APPLE__</name></expr></argument>)</argument_list></call> <operator pos:start="9:24" pos:end="9:25">&amp;&amp;</operator> <call pos:start="9:27" pos:end="9:43"><name pos:start="9:27" pos:end="9:33">defined</name><argument_list pos:start="9:34" pos:end="9:43">(<argument pos:start="9:35" pos:end="9:42"><expr pos:start="9:35" pos:end="9:42"><name pos:start="9:35" pos:end="9:42">__MACH__</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="11:5" pos:end="60:0"><if pos:start="11:5" pos:end="60:0">if <condition pos:start="11:8" pos:end="11:47">(<expr pos:start="11:9" pos:end="11:46"><call pos:start="11:9" pos:end="11:46"><name pos:start="11:9" pos:end="11:16">strstart</name><argument_list pos:start="11:17" pos:end="11:46">(<argument pos:start="11:18" pos:end="11:25"><expr pos:start="11:18" pos:end="11:25"><name pos:start="11:18" pos:end="11:25">filename</name></expr></argument>, <argument pos:start="11:28" pos:end="11:39"><expr pos:start="11:28" pos:end="11:39"><literal type="string" pos:start="11:28" pos:end="11:39">"/dev/cdrom"</literal></expr></argument>, <argument pos:start="11:42" pos:end="11:45"><expr pos:start="11:42" pos:end="11:45"><name pos:start="11:42" pos:end="11:45">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="11:49" pos:end="60:0">{<block_content pos:start="13:9" pos:end="55:45">

        <decl_stmt pos:start="13:9" pos:end="13:33"><decl pos:start="13:9" pos:end="13:32"><type pos:start="13:9" pos:end="13:21"><name pos:start="13:9" pos:end="13:21">kern_return_t</name></type> <name pos:start="13:23" pos:end="13:32">kernResult</name></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:36"><decl pos:start="15:9" pos:end="15:35"><type pos:start="15:9" pos:end="15:21"><name pos:start="15:9" pos:end="15:21">io_iterator_t</name></type> <name pos:start="15:23" pos:end="15:35">mediaIterator</name></decl>;</decl_stmt>

        <decl_stmt pos:start="17:9" pos:end="17:35"><decl pos:start="17:9" pos:end="17:34"><type pos:start="17:9" pos:end="17:12"><name pos:start="17:9" pos:end="17:12">char</name></type> <name pos:start="17:14" pos:end="17:34"><name pos:start="17:14" pos:end="17:20">bsdPath</name><index pos:start="17:21" pos:end="17:34">[ <expr pos:start="17:23" pos:end="17:32"><name pos:start="17:23" pos:end="17:32">MAXPATHLEN</name></expr> ]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="19:9" pos:end="19:15"><decl pos:start="19:9" pos:end="19:14"><type pos:start="19:9" pos:end="19:11"><name pos:start="19:9" pos:end="19:11">int</name></type> <name pos:start="19:13" pos:end="19:14">fd</name></decl>;</decl_stmt>



        <expr_stmt pos:start="23:9" pos:end="23:60"><expr pos:start="23:9" pos:end="23:59"><name pos:start="23:9" pos:end="23:18">kernResult</name> <operator pos:start="23:20" pos:end="23:20">=</operator> <call pos:start="23:22" pos:end="23:59"><name pos:start="23:22" pos:end="23:41">FindEjectableCDMedia</name><argument_list pos:start="23:42" pos:end="23:59">( <argument pos:start="23:44" pos:end="23:57"><expr pos:start="23:44" pos:end="23:57"><operator pos:start="23:44" pos:end="23:44">&amp;</operator><name pos:start="23:45" pos:end="23:57">mediaIterator</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:77"><expr pos:start="25:9" pos:end="25:76"><name pos:start="25:9" pos:end="25:18">kernResult</name> <operator pos:start="25:20" pos:end="25:20">=</operator> <call pos:start="25:22" pos:end="25:76"><name pos:start="25:22" pos:end="25:31">GetBSDPath</name><argument_list pos:start="25:32" pos:end="25:76">( <argument pos:start="25:34" pos:end="25:46"><expr pos:start="25:34" pos:end="25:46"><name pos:start="25:34" pos:end="25:46">mediaIterator</name></expr></argument>, <argument pos:start="25:49" pos:end="25:55"><expr pos:start="25:49" pos:end="25:55"><name pos:start="25:49" pos:end="25:55">bsdPath</name></expr></argument>, <argument pos:start="25:58" pos:end="25:74"><expr pos:start="25:58" pos:end="25:74"><sizeof pos:start="25:58" pos:end="25:74">sizeof<argument_list pos:start="25:64" pos:end="25:74">( <argument pos:start="25:66" pos:end="25:72"><expr pos:start="25:66" pos:end="25:72"><name pos:start="25:66" pos:end="25:72">bsdPath</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="29:9" pos:end="49:9"><if pos:start="29:9" pos:end="49:9">if <condition pos:start="29:12" pos:end="29:35">( <expr pos:start="29:14" pos:end="29:33"><name pos:start="29:14" pos:end="29:25"><name pos:start="29:14" pos:end="29:20">bsdPath</name><index pos:start="29:21" pos:end="29:25">[ <expr pos:start="29:23" pos:end="29:23"><literal type="number" pos:start="29:23" pos:end="29:23">0</literal></expr> ]</index></name> <operator pos:start="29:27" pos:end="29:28">!=</operator> <literal type="char" pos:start="29:30" pos:end="29:33">'\0'</literal></expr> )</condition> <block pos:start="29:37" pos:end="49:9">{<block_content pos:start="31:13" pos:end="47:31">

            <expr_stmt pos:start="31:13" pos:end="31:33"><expr pos:start="31:13" pos:end="31:32"><call pos:start="31:13" pos:end="31:32"><name pos:start="31:13" pos:end="31:18">strcat</name><argument_list pos:start="31:19" pos:end="31:32">(<argument pos:start="31:20" pos:end="31:26"><expr pos:start="31:20" pos:end="31:26"><name pos:start="31:20" pos:end="31:26">bsdPath</name></expr></argument>,<argument pos:start="31:28" pos:end="31:31"><expr pos:start="31:28" pos:end="31:31"><literal type="string" pos:start="31:28" pos:end="31:31">"s0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="33:13" pos:end="33:51">/* some CDs don't have a partition 0 */</comment>

            <expr_stmt pos:start="35:13" pos:end="35:71"><expr pos:start="35:13" pos:end="35:70"><name pos:start="35:13" pos:end="35:14">fd</name> <operator pos:start="35:16" pos:end="35:16">=</operator> <call pos:start="35:18" pos:end="35:70"><name pos:start="35:18" pos:end="35:26">qemu_open</name><argument_list pos:start="35:27" pos:end="35:70">(<argument pos:start="35:28" pos:end="35:34"><expr pos:start="35:28" pos:end="35:34"><name pos:start="35:28" pos:end="35:34">bsdPath</name></expr></argument>, <argument pos:start="35:37" pos:end="35:69"><expr pos:start="35:37" pos:end="35:69"><name pos:start="35:37" pos:end="35:44">O_RDONLY</name> <operator pos:start="35:46" pos:end="35:46">|</operator> <name pos:start="35:48" pos:end="35:55">O_BINARY</name> <operator pos:start="35:57" pos:end="35:57">|</operator> <name pos:start="35:59" pos:end="35:69">O_LARGEFILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="37:13" pos:end="45:13"><if pos:start="37:13" pos:end="41:13">if <condition pos:start="37:16" pos:end="37:23">(<expr pos:start="37:17" pos:end="37:22"><name pos:start="37:17" pos:end="37:18">fd</name> <operator pos:start="37:20" pos:end="37:20">&lt;</operator> <literal type="number" pos:start="37:22" pos:end="37:22">0</literal></expr>)</condition> <block pos:start="37:25" pos:end="41:13">{<block_content pos:start="39:17" pos:end="39:49">

                <expr_stmt pos:start="39:17" pos:end="39:49"><expr pos:start="39:17" pos:end="39:48"><name pos:start="39:17" pos:end="39:42"><name pos:start="39:17" pos:end="39:23">bsdPath</name><index pos:start="39:24" pos:end="39:42">[<expr pos:start="39:25" pos:end="39:41"><call pos:start="39:25" pos:end="39:39"><name pos:start="39:25" pos:end="39:30">strlen</name><argument_list pos:start="39:31" pos:end="39:39">(<argument pos:start="39:32" pos:end="39:38"><expr pos:start="39:32" pos:end="39:38"><name pos:start="39:32" pos:end="39:38">bsdPath</name></expr></argument>)</argument_list></call><operator pos:start="39:40" pos:end="39:40">-</operator><literal type="number" pos:start="39:41" pos:end="39:41">1</literal></expr>]</index></name> <operator pos:start="39:44" pos:end="39:44">=</operator> <literal type="char" pos:start="39:46" pos:end="39:48">'1'</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="41:15" pos:end="45:13">else <block pos:start="41:20" pos:end="45:13">{<block_content pos:start="43:17" pos:end="43:31">

                <expr_stmt pos:start="43:17" pos:end="43:31"><expr pos:start="43:17" pos:end="43:30"><call pos:start="43:17" pos:end="43:30"><name pos:start="43:17" pos:end="43:26">qemu_close</name><argument_list pos:start="43:27" pos:end="43:30">(<argument pos:start="43:28" pos:end="43:29"><expr pos:start="43:28" pos:end="43:29"><name pos:start="43:28" pos:end="43:29">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:31"><expr pos:start="47:13" pos:end="47:30"><name pos:start="47:13" pos:end="47:20">filename</name> <operator pos:start="47:22" pos:end="47:22">=</operator> <name pos:start="47:24" pos:end="47:30">bsdPath</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="53:9" pos:end="55:45"><if pos:start="53:9" pos:end="55:45">if <condition pos:start="53:12" pos:end="53:28">( <expr pos:start="53:14" pos:end="53:26"><name pos:start="53:14" pos:end="53:26">mediaIterator</name></expr> )</condition><block type="pseudo" pos:start="55:13" pos:end="55:45"><block_content pos:start="55:13" pos:end="55:45">

            <expr_stmt pos:start="55:13" pos:end="55:45"><expr pos:start="55:13" pos:end="55:44"><call pos:start="55:13" pos:end="55:44"><name pos:start="55:13" pos:end="55:27">IOObjectRelease</name><argument_list pos:start="55:28" pos:end="55:44">( <argument pos:start="55:30" pos:end="55:42"><expr pos:start="55:30" pos:end="55:42"><name pos:start="55:30" pos:end="55:42">mediaIterator</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="59:1" pos:end="59:6">#<cpp:directive pos:start="59:2" pos:end="59:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="63:5" pos:end="66:0"><expr pos:start="63:5" pos:end="63:24"><name pos:start="63:5" pos:end="63:11"><name pos:start="63:5" pos:end="63:5">s</name><operator pos:start="63:6" pos:end="63:7">-&gt;</operator><name pos:start="63:8" pos:end="63:11">type</name></name> <operator pos:start="63:13" pos:end="63:13">=</operator> <name pos:start="63:15" pos:end="63:24">FTYPE_FILE</name></expr>;</expr_stmt>

<cpp:if pos:start="65:1" pos:end="65:22">#<cpp:directive pos:start="65:2" pos:end="65:3">if</cpp:directive> <expr pos:start="65:5" pos:end="65:22"><call pos:start="65:5" pos:end="65:22"><name pos:start="65:5" pos:end="65:11">defined</name><argument_list pos:start="65:12" pos:end="65:22">(<argument pos:start="65:13" pos:end="65:21"><expr pos:start="65:13" pos:end="65:21"><name pos:start="65:13" pos:end="65:21">__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <block pos:start="67:5" pos:end="84:0">{<block_content pos:start="69:9" pos:end="79:9">

        <decl_stmt pos:start="69:9" pos:end="69:48"><decl pos:start="69:9" pos:end="69:40"><type pos:start="69:9" pos:end="69:12"><name pos:start="69:9" pos:end="69:12">char</name></type> <name pos:start="69:14" pos:end="69:40"><name pos:start="69:14" pos:end="69:26">resolved_path</name><index pos:start="69:27" pos:end="69:40">[ <expr pos:start="69:29" pos:end="69:38"><name pos:start="69:29" pos:end="69:38">MAXPATHLEN</name></expr> ]</index></name></decl>, <decl pos:start="69:43" pos:end="69:47"><type ref="prev" pos:start="69:9" pos:end="69:12"><modifier pos:start="69:43" pos:end="69:43">*</modifier></type><name pos:start="69:44" pos:end="69:47">temp</name></decl>;</decl_stmt>



        <expr_stmt pos:start="73:9" pos:end="73:49"><expr pos:start="73:9" pos:end="73:48"><name pos:start="73:9" pos:end="73:12">temp</name> <operator pos:start="73:14" pos:end="73:14">=</operator> <call pos:start="73:16" pos:end="73:48"><name pos:start="73:16" pos:end="73:23">realpath</name><argument_list pos:start="73:24" pos:end="73:48">(<argument pos:start="73:25" pos:end="73:32"><expr pos:start="73:25" pos:end="73:32"><name pos:start="73:25" pos:end="73:32">filename</name></expr></argument>, <argument pos:start="73:35" pos:end="73:47"><expr pos:start="73:35" pos:end="73:47"><name pos:start="73:35" pos:end="73:47">resolved_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="75:9" pos:end="79:9"><if pos:start="75:9" pos:end="79:9">if <condition pos:start="75:12" pos:end="75:52">(<expr pos:start="75:13" pos:end="75:51"><name pos:start="75:13" pos:end="75:16">temp</name> <operator pos:start="75:18" pos:end="75:19">&amp;&amp;</operator> <call pos:start="75:21" pos:end="75:51"><name pos:start="75:21" pos:end="75:28">strstart</name><argument_list pos:start="75:29" pos:end="75:51">(<argument pos:start="75:30" pos:end="75:33"><expr pos:start="75:30" pos:end="75:33"><name pos:start="75:30" pos:end="75:33">temp</name></expr></argument>, <argument pos:start="75:36" pos:end="75:44"><expr pos:start="75:36" pos:end="75:44"><literal type="string" pos:start="75:36" pos:end="75:44">"/dev/sg"</literal></expr></argument>, <argument pos:start="75:47" pos:end="75:50"><expr pos:start="75:47" pos:end="75:50"><name pos:start="75:47" pos:end="75:50">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="75:54" pos:end="79:9">{<block_content pos:start="77:13" pos:end="77:23">

            <expr_stmt pos:start="77:13" pos:end="77:23"><expr pos:start="77:13" pos:end="77:22"><name pos:start="77:13" pos:end="77:18"><name pos:start="77:13" pos:end="77:14">bs</name><operator pos:start="77:15" pos:end="77:16">-&gt;</operator><name pos:start="77:17" pos:end="77:18">sg</name></name> <operator pos:start="77:20" pos:end="77:20">=</operator> <literal type="number" pos:start="77:22" pos:end="77:22">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>

<cpp:endif pos:start="83:1" pos:end="83:6">#<cpp:directive pos:start="83:2" pos:end="83:6">endif</cpp:directive></cpp:endif>



    <return pos:start="87:5" pos:end="87:51">return <expr pos:start="87:12" pos:end="87:50"><call pos:start="87:12" pos:end="87:50"><name pos:start="87:12" pos:end="87:26">raw_open_common</name><argument_list pos:start="87:27" pos:end="87:50">(<argument pos:start="87:28" pos:end="87:29"><expr pos:start="87:28" pos:end="87:29"><name pos:start="87:28" pos:end="87:29">bs</name></expr></argument>, <argument pos:start="87:32" pos:end="87:39"><expr pos:start="87:32" pos:end="87:39"><name pos:start="87:32" pos:end="87:39">filename</name></expr></argument>, <argument pos:start="87:42" pos:end="87:46"><expr pos:start="87:42" pos:end="87:46"><name pos:start="87:42" pos:end="87:46">flags</name></expr></argument>, <argument pos:start="87:49" pos:end="87:49"><expr pos:start="87:49" pos:end="87:49"><literal type="number" pos:start="87:49" pos:end="87:49">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
