<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22411.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">realloc_refcount_array</name><parameter_list pos:start="1:34" pos:end="3:66">(<parameter pos:start="1:35" pos:end="1:51"><decl pos:start="1:35" pos:end="1:51"><type pos:start="1:35" pos:end="1:51"><name pos:start="1:35" pos:end="1:48">BDRVQcow2State</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:51">s</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:65"><decl pos:start="1:54" pos:end="1:65"><type pos:start="1:54" pos:end="1:65"><name pos:start="1:54" pos:end="1:57">void</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier><modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:65">array</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:47"><decl pos:start="3:35" pos:end="3:47"><type pos:start="3:35" pos:end="3:47"><name pos:start="3:35" pos:end="3:41">int64_t</name> <modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:47">size</name></decl></parameter>, <parameter pos:start="3:50" pos:end="3:65"><decl pos:start="3:50" pos:end="3:65"><type pos:start="3:50" pos:end="3:65"><name pos:start="3:50" pos:end="3:56">int64_t</name></type> <name pos:start="3:58" pos:end="3:65">new_size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="67:1">{<block_content pos:start="7:5" pos:end="65:13">

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:10">size_t</name></type> <name pos:start="7:12" pos:end="7:24">old_byte_size</name></decl>, <decl pos:start="7:27" pos:end="7:39"><type ref="prev" pos:start="7:5" pos:end="7:10"/><name pos:start="7:27" pos:end="7:39">new_byte_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">void</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:17">new_ptr</name></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="13:72">/* Round to clusters so the array can be directly written to disk */</comment>

    <expr_stmt pos:start="15:5" pos:end="17:38"><expr pos:start="15:5" pos:end="17:37"><name pos:start="15:5" pos:end="15:17">old_byte_size</name> <operator pos:start="15:19" pos:end="15:19">=</operator> <call pos:start="15:21" pos:end="15:75"><name pos:start="15:21" pos:end="15:36">size_to_clusters</name><argument_list pos:start="15:37" pos:end="15:75">(<argument pos:start="15:38" pos:end="15:38"><expr pos:start="15:38" pos:end="15:38"><name pos:start="15:38" pos:end="15:38">s</name></expr></argument>, <argument pos:start="15:41" pos:end="15:74"><expr pos:start="15:41" pos:end="15:74"><call pos:start="15:41" pos:end="15:74"><name pos:start="15:41" pos:end="15:64">refcount_array_byte_size</name><argument_list pos:start="15:65" pos:end="15:74">(<argument pos:start="15:66" pos:end="15:66"><expr pos:start="15:66" pos:end="15:66"><name pos:start="15:66" pos:end="15:66">s</name></expr></argument>, <argument pos:start="15:69" pos:end="15:73"><expr pos:start="15:69" pos:end="15:73"><operator pos:start="15:69" pos:end="15:69">*</operator><name pos:start="15:70" pos:end="15:73">size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>

                    <operator pos:start="17:21" pos:end="17:21">*</operator> <name pos:start="17:23" pos:end="17:37"><name pos:start="17:23" pos:end="17:23">s</name><operator pos:start="17:24" pos:end="17:25">-&gt;</operator><name pos:start="17:26" pos:end="17:37">cluster_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="21:38"><expr pos:start="19:5" pos:end="21:37"><name pos:start="19:5" pos:end="19:17">new_byte_size</name> <operator pos:start="19:19" pos:end="19:19">=</operator> <call pos:start="19:21" pos:end="19:78"><name pos:start="19:21" pos:end="19:36">size_to_clusters</name><argument_list pos:start="19:37" pos:end="19:78">(<argument pos:start="19:38" pos:end="19:38"><expr pos:start="19:38" pos:end="19:38"><name pos:start="19:38" pos:end="19:38">s</name></expr></argument>, <argument pos:start="19:41" pos:end="19:77"><expr pos:start="19:41" pos:end="19:77"><call pos:start="19:41" pos:end="19:77"><name pos:start="19:41" pos:end="19:64">refcount_array_byte_size</name><argument_list pos:start="19:65" pos:end="19:77">(<argument pos:start="19:66" pos:end="19:66"><expr pos:start="19:66" pos:end="19:66"><name pos:start="19:66" pos:end="19:66">s</name></expr></argument>, <argument pos:start="19:69" pos:end="19:76"><expr pos:start="19:69" pos:end="19:76"><name pos:start="19:69" pos:end="19:76">new_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>

                    <operator pos:start="21:21" pos:end="21:21">*</operator> <name pos:start="21:23" pos:end="21:37"><name pos:start="21:23" pos:end="21:23">s</name><operator pos:start="21:24" pos:end="21:25">-&gt;</operator><name pos:start="21:26" pos:end="21:37">cluster_size</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:39">(<expr pos:start="25:9" pos:end="25:38"><name pos:start="25:9" pos:end="25:21">new_byte_size</name> <operator pos:start="25:23" pos:end="25:24">==</operator> <name pos:start="25:26" pos:end="25:38">old_byte_size</name></expr>)</condition> <block pos:start="25:41" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:17">

        <expr_stmt pos:start="27:9" pos:end="27:25"><expr pos:start="27:9" pos:end="27:24"><operator pos:start="27:9" pos:end="27:9">*</operator><name pos:start="27:10" pos:end="27:13">size</name> <operator pos:start="27:15" pos:end="27:15">=</operator> <name pos:start="27:17" pos:end="27:24">new_size</name></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:17">return <expr pos:start="29:16" pos:end="29:16"><literal type="number" pos:start="29:16" pos:end="29:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:30"><expr pos:start="35:5" pos:end="35:29"><call pos:start="35:5" pos:end="35:29"><name pos:start="35:5" pos:end="35:10">assert</name><argument_list pos:start="35:11" pos:end="35:29">(<argument pos:start="35:12" pos:end="35:28"><expr pos:start="35:12" pos:end="35:28"><name pos:start="35:12" pos:end="35:24">new_byte_size</name> <operator pos:start="35:26" pos:end="35:26">&gt;</operator> <literal type="number" pos:start="35:28" pos:end="35:28">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:51"><expr pos:start="39:5" pos:end="39:50"><name pos:start="39:5" pos:end="39:11">new_ptr</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <call pos:start="39:15" pos:end="39:50"><name pos:start="39:15" pos:end="39:27">g_try_realloc</name><argument_list pos:start="39:28" pos:end="39:50">(<argument pos:start="39:29" pos:end="39:34"><expr pos:start="39:29" pos:end="39:34"><operator pos:start="39:29" pos:end="39:29">*</operator><name pos:start="39:30" pos:end="39:34">array</name></expr></argument>, <argument pos:start="39:37" pos:end="39:49"><expr pos:start="39:37" pos:end="39:49"><name pos:start="39:37" pos:end="39:49">new_byte_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:17">(<expr pos:start="41:9" pos:end="41:16"><operator pos:start="41:9" pos:end="41:9">!</operator><name pos:start="41:10" pos:end="41:16">new_ptr</name></expr>)</condition> <block pos:start="41:19" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:23">

        <return pos:start="43:9" pos:end="43:23">return <expr pos:start="43:16" pos:end="43:22"><operator pos:start="43:16" pos:end="43:16">-</operator><name pos:start="43:17" pos:end="43:22">ENOMEM</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:38">(<expr pos:start="49:9" pos:end="49:37"><name pos:start="49:9" pos:end="49:21">new_byte_size</name> <operator pos:start="49:23" pos:end="49:23">&gt;</operator> <name pos:start="49:25" pos:end="49:37">old_byte_size</name></expr>)</condition> <block pos:start="49:40" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:46">

        <expr_stmt pos:start="51:9" pos:end="53:46"><expr pos:start="51:9" pos:end="53:45"><call pos:start="51:9" pos:end="53:45"><name pos:start="51:9" pos:end="51:14">memset</name><argument_list pos:start="51:15" pos:end="53:45">(<argument pos:start="51:16" pos:end="51:59"><expr pos:start="51:16" pos:end="51:59"><operator pos:start="51:16" pos:end="51:16">(</operator><name pos:start="51:17" pos:end="51:20">void</name> <operator pos:start="51:22" pos:end="51:22">*</operator><operator pos:start="51:23" pos:end="51:23">)</operator><operator pos:start="51:24" pos:end="51:24">(</operator><operator pos:start="51:25" pos:end="51:25">(</operator><name pos:start="51:26" pos:end="51:34">uintptr_t</name><operator pos:start="51:35" pos:end="51:35">)</operator><name pos:start="51:36" pos:end="51:42">new_ptr</name> <operator pos:start="51:44" pos:end="51:44">+</operator> <name pos:start="51:46" pos:end="51:58">old_byte_size</name><operator pos:start="51:59" pos:end="51:59">)</operator></expr></argument>, <argument pos:start="51:62" pos:end="51:62"><expr pos:start="51:62" pos:end="51:62"><literal type="number" pos:start="51:62" pos:end="51:62">0</literal></expr></argument>,

               <argument pos:start="53:16" pos:end="53:44"><expr pos:start="53:16" pos:end="53:44"><name pos:start="53:16" pos:end="53:28">new_byte_size</name> <operator pos:start="53:30" pos:end="53:30">-</operator> <name pos:start="53:32" pos:end="53:44">old_byte_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:21"><expr pos:start="59:5" pos:end="59:20"><operator pos:start="59:5" pos:end="59:5">*</operator><name pos:start="59:6" pos:end="59:10">array</name> <operator pos:start="59:12" pos:end="59:12">=</operator> <name pos:start="59:14" pos:end="59:20">new_ptr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:22"><expr pos:start="61:5" pos:end="61:21"><operator pos:start="61:5" pos:end="61:5">*</operator><name pos:start="61:6" pos:end="61:9">size</name>  <operator pos:start="61:12" pos:end="61:12">=</operator> <name pos:start="61:14" pos:end="61:21">new_size</name></expr>;</expr_stmt>



    <return pos:start="65:5" pos:end="65:13">return <expr pos:start="65:12" pos:end="65:12"><literal type="number" pos:start="65:12" pos:end="65:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
