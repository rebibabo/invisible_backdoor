<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26328.c" pos:tabs="8"><function pos:start="1:1" pos:end="68:14"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">pci_cirrus_vga_initfn</name><parameter_list pos:start="1:33" pos:end="1:48">(<parameter pos:start="1:34" pos:end="1:47"><decl pos:start="1:34" pos:end="1:47"><type pos:start="1:34" pos:end="1:44"><name pos:start="1:34" pos:end="1:42">PCIDevice</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:47">dev</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="68:14">{<block_content pos:start="5:6" pos:end="68:14">

     <decl_stmt pos:start="5:6" pos:end="5:67"><decl pos:start="5:6" pos:end="5:66"><type pos:start="5:6" pos:end="5:24"><name pos:start="5:6" pos:end="5:22">PCICirrusVGAState</name> <modifier pos:start="5:24" pos:end="5:24">*</modifier></type><name pos:start="5:25" pos:end="5:25">d</name> <init pos:start="5:27" pos:end="5:66">= <expr pos:start="5:29" pos:end="5:66"><call pos:start="5:29" pos:end="5:66"><name pos:start="5:29" pos:end="5:37">DO_UPCAST</name><argument_list pos:start="5:38" pos:end="5:66">(<argument pos:start="5:39" pos:end="5:55"><expr pos:start="5:39" pos:end="5:55"><name pos:start="5:39" pos:end="5:55">PCICirrusVGAState</name></expr></argument>, <argument pos:start="5:58" pos:end="5:60"><expr pos:start="5:58" pos:end="5:60"><name pos:start="5:58" pos:end="5:60">dev</name></expr></argument>, <argument pos:start="5:63" pos:end="5:65"><expr pos:start="5:63" pos:end="5:65"><name pos:start="5:63" pos:end="5:65">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

     <decl_stmt pos:start="7:6" pos:end="7:40"><decl pos:start="7:6" pos:end="7:39"><type pos:start="7:6" pos:end="7:21"><name pos:start="7:6" pos:end="7:19">CirrusVGAState</name> <modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:22">s</name> <init pos:start="7:24" pos:end="7:39">= <expr pos:start="7:26" pos:end="7:39"><operator pos:start="7:26" pos:end="7:26">&amp;</operator><name pos:start="7:27" pos:end="7:39"><name pos:start="7:27" pos:end="7:27">d</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:39">cirrus_vga</name></name></expr></init></decl>;</decl_stmt>

     <decl_stmt pos:start="9:6" pos:end="9:52"><decl pos:start="9:6" pos:end="9:51"><type pos:start="9:6" pos:end="9:21"><name pos:start="9:6" pos:end="9:19">PCIDeviceClass</name> <modifier pos:start="9:21" pos:end="9:21">*</modifier></type><name pos:start="9:22" pos:end="9:23">pc</name> <init pos:start="9:25" pos:end="9:51">= <expr pos:start="9:27" pos:end="9:51"><call pos:start="9:27" pos:end="9:51"><name pos:start="9:27" pos:end="9:46">PCI_DEVICE_GET_CLASS</name><argument_list pos:start="9:47" pos:end="9:51">(<argument pos:start="9:48" pos:end="9:50"><expr pos:start="9:48" pos:end="9:50"><name pos:start="9:48" pos:end="9:50">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

     <decl_stmt pos:start="11:6" pos:end="11:39"><decl pos:start="11:6" pos:end="11:38"><type pos:start="11:6" pos:end="11:12"><name pos:start="11:6" pos:end="11:12">int16_t</name></type> <name pos:start="11:14" pos:end="11:22">device_id</name> <init pos:start="11:24" pos:end="11:38">= <expr pos:start="11:26" pos:end="11:38"><name pos:start="11:26" pos:end="11:38"><name pos:start="11:26" pos:end="11:27">pc</name><operator pos:start="11:28" pos:end="11:29">-&gt;</operator><name pos:start="11:30" pos:end="11:38">device_id</name></name></expr></init></decl>;</decl_stmt>











     <comment type="block" pos:start="23:6" pos:end="23:20">/* setup VGA */</comment>

     <expr_stmt pos:start="25:6" pos:end="25:49"><expr pos:start="25:6" pos:end="25:48"><call pos:start="25:6" pos:end="25:48"><name pos:start="25:6" pos:end="25:20">vga_common_init</name><argument_list pos:start="25:21" pos:end="25:48">(<argument pos:start="25:22" pos:end="25:28"><expr pos:start="25:22" pos:end="25:28"><operator pos:start="25:22" pos:end="25:22">&amp;</operator><name pos:start="25:23" pos:end="25:28"><name pos:start="25:23" pos:end="25:23">s</name><operator pos:start="25:24" pos:end="25:25">-&gt;</operator><name pos:start="25:26" pos:end="25:28">vga</name></name></expr></argument>, <argument pos:start="25:31" pos:end="25:41"><expr pos:start="25:31" pos:end="25:41"><call pos:start="25:31" pos:end="25:41"><name pos:start="25:31" pos:end="25:36">OBJECT</name><argument_list pos:start="25:37" pos:end="25:41">(<argument pos:start="25:38" pos:end="25:40"><expr pos:start="25:38" pos:end="25:40"><name pos:start="25:38" pos:end="25:40">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="25:44" pos:end="25:47"><expr pos:start="25:44" pos:end="25:47"><name pos:start="25:44" pos:end="25:47">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

     <expr_stmt pos:start="27:6" pos:end="29:51"><expr pos:start="27:6" pos:end="29:50"><call pos:start="27:6" pos:end="29:50"><name pos:start="27:6" pos:end="27:23">cirrus_init_common</name><argument_list pos:start="27:24" pos:end="29:50">(<argument pos:start="27:25" pos:end="27:25"><expr pos:start="27:25" pos:end="27:25"><name pos:start="27:25" pos:end="27:25">s</name></expr></argument>, <argument pos:start="27:28" pos:end="27:38"><expr pos:start="27:28" pos:end="27:38"><call pos:start="27:28" pos:end="27:38"><name pos:start="27:28" pos:end="27:33">OBJECT</name><argument_list pos:start="27:34" pos:end="27:38">(<argument pos:start="27:35" pos:end="27:37"><expr pos:start="27:35" pos:end="27:37"><name pos:start="27:35" pos:end="27:37">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="27:41" pos:end="27:49"><expr pos:start="27:41" pos:end="27:49"><name pos:start="27:41" pos:end="27:49">device_id</name></expr></argument>, <argument pos:start="27:52" pos:end="27:52"><expr pos:start="27:52" pos:end="27:52"><literal type="number" pos:start="27:52" pos:end="27:52">1</literal></expr></argument>, <argument pos:start="27:55" pos:end="27:76"><expr pos:start="27:55" pos:end="27:76"><call pos:start="27:55" pos:end="27:76"><name pos:start="27:55" pos:end="27:71">pci_address_space</name><argument_list pos:start="27:72" pos:end="27:76">(<argument pos:start="27:73" pos:end="27:75"><expr pos:start="27:73" pos:end="27:75"><name pos:start="27:73" pos:end="27:75">dev</name></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="29:25" pos:end="29:49"><expr pos:start="29:25" pos:end="29:49"><call pos:start="29:25" pos:end="29:49"><name pos:start="29:25" pos:end="29:44">pci_address_space_io</name><argument_list pos:start="29:45" pos:end="29:49">(<argument pos:start="29:46" pos:end="29:48"><expr pos:start="29:46" pos:end="29:48"><name pos:start="29:46" pos:end="29:48">dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

     <expr_stmt pos:start="31:6" pos:end="31:79"><expr pos:start="31:6" pos:end="31:78"><name pos:start="31:6" pos:end="31:15"><name pos:start="31:6" pos:end="31:6">s</name><operator pos:start="31:7" pos:end="31:8">-&gt;</operator><name pos:start="31:9" pos:end="31:11">vga</name><operator pos:start="31:12" pos:end="31:12">.</operator><name pos:start="31:13" pos:end="31:15">con</name></name> <operator pos:start="31:17" pos:end="31:17">=</operator> <call pos:start="31:19" pos:end="31:78"><name pos:start="31:19" pos:end="31:38">graphic_console_init</name><argument_list pos:start="31:39" pos:end="31:78">(<argument pos:start="31:40" pos:end="31:50"><expr pos:start="31:40" pos:end="31:50"><call pos:start="31:40" pos:end="31:50"><name pos:start="31:40" pos:end="31:45">DEVICE</name><argument_list pos:start="31:46" pos:end="31:50">(<argument pos:start="31:47" pos:end="31:49"><expr pos:start="31:47" pos:end="31:49"><name pos:start="31:47" pos:end="31:49">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="31:53" pos:end="31:53"><expr pos:start="31:53" pos:end="31:53"><literal type="number" pos:start="31:53" pos:end="31:53">0</literal></expr></argument>, <argument pos:start="31:56" pos:end="31:68"><expr pos:start="31:56" pos:end="31:68"><name pos:start="31:56" pos:end="31:68"><name pos:start="31:56" pos:end="31:56">s</name><operator pos:start="31:57" pos:end="31:58">-&gt;</operator><name pos:start="31:59" pos:end="31:61">vga</name><operator pos:start="31:62" pos:end="31:62">.</operator><name pos:start="31:63" pos:end="31:68">hw_ops</name></name></expr></argument>, <argument pos:start="31:71" pos:end="31:77"><expr pos:start="31:71" pos:end="31:77"><operator pos:start="31:71" pos:end="31:71">&amp;</operator><name pos:start="31:72" pos:end="31:77"><name pos:start="31:72" pos:end="31:72">s</name><operator pos:start="31:73" pos:end="31:74">-&gt;</operator><name pos:start="31:75" pos:end="31:77">vga</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



     <comment type="block" pos:start="35:6" pos:end="35:20">/* setup PCI */</comment>



    <expr_stmt pos:start="39:5" pos:end="39:79"><expr pos:start="39:5" pos:end="39:78"><call pos:start="39:5" pos:end="39:78"><name pos:start="39:5" pos:end="39:22">memory_region_init</name><argument_list pos:start="39:23" pos:end="39:78">(<argument pos:start="39:24" pos:end="39:34"><expr pos:start="39:24" pos:end="39:34"><operator pos:start="39:24" pos:end="39:24">&amp;</operator><name pos:start="39:25" pos:end="39:34"><name pos:start="39:25" pos:end="39:25">s</name><operator pos:start="39:26" pos:end="39:27">-&gt;</operator><name pos:start="39:28" pos:end="39:34">pci_bar</name></name></expr></argument>, <argument pos:start="39:37" pos:end="39:47"><expr pos:start="39:37" pos:end="39:47"><call pos:start="39:37" pos:end="39:47"><name pos:start="39:37" pos:end="39:42">OBJECT</name><argument_list pos:start="39:43" pos:end="39:47">(<argument pos:start="39:44" pos:end="39:46"><expr pos:start="39:44" pos:end="39:46"><name pos:start="39:44" pos:end="39:46">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="39:50" pos:end="39:66"><expr pos:start="39:50" pos:end="39:66"><literal type="string" pos:start="39:50" pos:end="39:66">"cirrus-pci-bar0"</literal></expr></argument>, <argument pos:start="39:69" pos:end="39:77"><expr pos:start="39:69" pos:end="39:77"><literal type="number" pos:start="39:69" pos:end="39:77">0x2000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:42">/* XXX: add byte swapping apertures */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:70"><expr pos:start="45:5" pos:end="45:69"><call pos:start="45:5" pos:end="45:69"><name pos:start="45:5" pos:end="45:31">memory_region_add_subregion</name><argument_list pos:start="45:32" pos:end="45:69">(<argument pos:start="45:33" pos:end="45:43"><expr pos:start="45:33" pos:end="45:43"><operator pos:start="45:33" pos:end="45:33">&amp;</operator><name pos:start="45:34" pos:end="45:43"><name pos:start="45:34" pos:end="45:34">s</name><operator pos:start="45:35" pos:end="45:36">-&gt;</operator><name pos:start="45:37" pos:end="45:43">pci_bar</name></name></expr></argument>, <argument pos:start="45:46" pos:end="45:46"><expr pos:start="45:46" pos:end="45:46"><literal type="number" pos:start="45:46" pos:end="45:46">0</literal></expr></argument>, <argument pos:start="45:49" pos:end="45:68"><expr pos:start="45:49" pos:end="45:68"><operator pos:start="45:49" pos:end="45:49">&amp;</operator><name pos:start="45:50" pos:end="45:68"><name pos:start="45:50" pos:end="45:50">s</name><operator pos:start="45:51" pos:end="45:52">-&gt;</operator><name pos:start="45:53" pos:end="45:68">cirrus_linear_io</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="49:61"><expr pos:start="47:5" pos:end="49:60"><call pos:start="47:5" pos:end="49:60"><name pos:start="47:5" pos:end="47:31">memory_region_add_subregion</name><argument_list pos:start="47:32" pos:end="49:60">(<argument pos:start="47:33" pos:end="47:43"><expr pos:start="47:33" pos:end="47:43"><operator pos:start="47:33" pos:end="47:33">&amp;</operator><name pos:start="47:34" pos:end="47:43"><name pos:start="47:34" pos:end="47:34">s</name><operator pos:start="47:35" pos:end="47:36">-&gt;</operator><name pos:start="47:37" pos:end="47:43">pci_bar</name></name></expr></argument>, <argument pos:start="47:46" pos:end="47:54"><expr pos:start="47:46" pos:end="47:54"><literal type="number" pos:start="47:46" pos:end="47:54">0x1000000</literal></expr></argument>,

                                <argument pos:start="49:33" pos:end="49:59"><expr pos:start="49:33" pos:end="49:59"><operator pos:start="49:33" pos:end="49:33">&amp;</operator><name pos:start="49:34" pos:end="49:59"><name pos:start="49:34" pos:end="49:34">s</name><operator pos:start="49:35" pos:end="49:36">-&gt;</operator><name pos:start="49:37" pos:end="49:59">cirrus_linear_bitblt_io</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



     <comment type="block" pos:start="53:6" pos:end="53:29">/* setup memory space */</comment>

     <comment type="block" pos:start="55:6" pos:end="55:24">/* memory #0 LFB */</comment>

     <comment type="block" pos:start="57:6" pos:end="57:38">/* memory #1 memory-mapped I/O */</comment>

     <comment type="block" pos:start="59:6" pos:end="59:55">/* XXX: s-&gt;vga.vram_size must be a power of two */</comment>

     <expr_stmt pos:start="61:6" pos:end="61:78"><expr pos:start="61:6" pos:end="61:77"><call pos:start="61:6" pos:end="61:77"><name pos:start="61:6" pos:end="61:21">pci_register_bar</name><argument_list pos:start="61:22" pos:end="61:77">(<argument pos:start="61:23" pos:end="61:29"><expr pos:start="61:23" pos:end="61:29"><operator pos:start="61:23" pos:end="61:23">&amp;</operator><name pos:start="61:24" pos:end="61:29"><name pos:start="61:24" pos:end="61:24">d</name><operator pos:start="61:25" pos:end="61:26">-&gt;</operator><name pos:start="61:27" pos:end="61:29">dev</name></name></expr></argument>, <argument pos:start="61:32" pos:end="61:32"><expr pos:start="61:32" pos:end="61:32"><literal type="number" pos:start="61:32" pos:end="61:32">0</literal></expr></argument>, <argument pos:start="61:35" pos:end="61:63"><expr pos:start="61:35" pos:end="61:63"><name pos:start="61:35" pos:end="61:63">PCI_BASE_ADDRESS_MEM_PREFETCH</name></expr></argument>, <argument pos:start="61:66" pos:end="61:76"><expr pos:start="61:66" pos:end="61:76"><operator pos:start="61:66" pos:end="61:66">&amp;</operator><name pos:start="61:67" pos:end="61:76"><name pos:start="61:67" pos:end="61:67">s</name><operator pos:start="61:68" pos:end="61:69">-&gt;</operator><name pos:start="61:70" pos:end="61:76">pci_bar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

     <if_stmt pos:start="63:6" pos:end="68:14"><if pos:start="63:6" pos:end="68:14">if <condition pos:start="63:9" pos:end="63:41">(<expr pos:start="63:10" pos:end="63:40"><name pos:start="63:10" pos:end="63:18">device_id</name> <operator pos:start="63:20" pos:end="63:21">==</operator> <name pos:start="63:23" pos:end="63:40">CIRRUS_ID_CLGD5446</name></expr>)</condition> <block pos:start="63:43" pos:end="68:14">{<block_content pos:start="65:10" pos:end="68:14">

         <expr_stmt pos:start="65:10" pos:end="65:61"><expr pos:start="65:10" pos:end="65:60"><call pos:start="65:10" pos:end="65:60"><name pos:start="65:10" pos:end="65:25">pci_register_bar</name><argument_list pos:start="65:26" pos:end="65:60">(<argument pos:start="65:27" pos:end="65:33"><expr pos:start="65:27" pos:end="65:33"><operator pos:start="65:27" pos:end="65:27">&amp;</operator><name pos:start="65:28" pos:end="65:33"><name pos:start="65:28" pos:end="65:28">d</name><operator pos:start="65:29" pos:end="65:30">-&gt;</operator><name pos:start="65:31" pos:end="65:33">dev</name></name></expr></argument>, <argument pos:start="65:36" pos:end="65:36"><expr pos:start="65:36" pos:end="65:36"><literal type="number" pos:start="65:36" pos:end="65:36">1</literal></expr></argument>, <argument pos:start="65:39" pos:end="65:39"><expr pos:start="65:39" pos:end="65:39"><literal type="number" pos:start="65:39" pos:end="65:39">0</literal></expr></argument>, <argument pos:start="65:42" pos:end="65:59"><expr pos:start="65:42" pos:end="65:59"><operator pos:start="65:42" pos:end="65:42">&amp;</operator><name pos:start="65:43" pos:end="65:59"><name pos:start="65:43" pos:end="65:43">s</name><operator pos:start="65:44" pos:end="65:45">-&gt;</operator><name pos:start="65:46" pos:end="65:59">cirrus_mmio_io</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


     <return pos:start="68:6" pos:end="68:14">return <expr pos:start="68:13" pos:end="68:13"><literal type="number" pos:start="68:13" pos:end="68:13">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></function>
</unit>
