<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8051.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint64_t</name></type> <name pos:start="1:17" pos:end="1:31">pxa2xx_i2c_read</name><parameter_list pos:start="1:32" pos:end="3:46">(<parameter pos:start="1:33" pos:end="1:44"><decl pos:start="1:33" pos:end="1:44"><type pos:start="1:33" pos:end="1:44"><name pos:start="1:33" pos:end="1:36">void</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:44">opaque</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:57"><decl pos:start="1:47" pos:end="1:57"><type pos:start="1:47" pos:end="1:57"><name pos:start="1:47" pos:end="1:52">hwaddr</name></type> <name pos:start="1:54" pos:end="1:57">addr</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:45"><decl pos:start="3:33" pos:end="3:45"><type pos:start="3:33" pos:end="3:45"><name pos:start="3:33" pos:end="3:40">unsigned</name></type> <name pos:start="3:42" pos:end="3:45">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="57:1">{<block_content pos:start="7:5" pos:end="55:13">

    <decl_stmt pos:start="7:5" pos:end="7:50"><decl pos:start="7:5" pos:end="7:49"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">PXA2xxI2CState</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:49">= <expr pos:start="7:25" pos:end="7:49"><operator pos:start="7:25" pos:end="7:25">(</operator><name pos:start="7:26" pos:end="7:39">PXA2xxI2CState</name> <operator pos:start="7:41" pos:end="7:41">*</operator><operator pos:start="7:42" pos:end="7:42">)</operator> <name pos:start="7:44" pos:end="7:49">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">I2CSlave</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:19">slave</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:22"><expr pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:8">addr</name> <operator pos:start="13:10" pos:end="13:11">-=</operator> <name pos:start="13:13" pos:end="13:21"><name pos:start="13:13" pos:end="13:13">s</name><operator pos:start="13:14" pos:end="13:15">-&gt;</operator><name pos:start="13:16" pos:end="13:21">offset</name></name></expr>;</expr_stmt>

    <switch pos:start="15:5" pos:end="53:5">switch <condition pos:start="15:12" pos:end="15:17">(<expr pos:start="15:13" pos:end="15:16"><name pos:start="15:13" pos:end="15:16">addr</name></expr>)</condition> <block pos:start="15:19" pos:end="53:5">{<block_content pos:start="17:5" pos:end="51:14">

    <case pos:start="17:5" pos:end="17:13">case <expr pos:start="17:10" pos:end="17:12"><name pos:start="17:10" pos:end="17:12">ICR</name></expr>:</case>

        <return pos:start="19:9" pos:end="19:26">return <expr pos:start="19:16" pos:end="19:25"><name pos:start="19:16" pos:end="19:25"><name pos:start="19:16" pos:end="19:16">s</name><operator pos:start="19:17" pos:end="19:18">-&gt;</operator><name pos:start="19:19" pos:end="19:25">control</name></name></expr>;</return>

    <case pos:start="21:5" pos:end="21:13">case <expr pos:start="21:10" pos:end="21:12"><name pos:start="21:10" pos:end="21:12">ISR</name></expr>:</case>

        <return pos:start="23:9" pos:end="23:55">return <expr pos:start="23:16" pos:end="23:54"><name pos:start="23:16" pos:end="23:24"><name pos:start="23:16" pos:end="23:16">s</name><operator pos:start="23:17" pos:end="23:18">-&gt;</operator><name pos:start="23:19" pos:end="23:24">status</name></name> <operator pos:start="23:26" pos:end="23:26">|</operator> <operator pos:start="23:28" pos:end="23:28">(</operator><call pos:start="23:29" pos:end="23:48"><name pos:start="23:29" pos:end="23:40">i2c_bus_busy</name><argument_list pos:start="23:41" pos:end="23:48">(<argument pos:start="23:42" pos:end="23:47"><expr pos:start="23:42" pos:end="23:47"><name pos:start="23:42" pos:end="23:47"><name pos:start="23:42" pos:end="23:42">s</name><operator pos:start="23:43" pos:end="23:44">-&gt;</operator><name pos:start="23:45" pos:end="23:47">bus</name></name></expr></argument>)</argument_list></call> <operator pos:start="23:50" pos:end="23:51">&lt;&lt;</operator> <literal type="number" pos:start="23:53" pos:end="23:53">2</literal><operator pos:start="23:54" pos:end="23:54">)</operator></expr>;</return>

    <case pos:start="25:5" pos:end="25:14">case <expr pos:start="25:10" pos:end="25:13"><name pos:start="25:10" pos:end="25:13">ISAR</name></expr>:</case>

        <expr_stmt pos:start="27:9" pos:end="27:36"><expr pos:start="27:9" pos:end="27:35"><name pos:start="27:9" pos:end="27:13">slave</name> <operator pos:start="27:15" pos:end="27:15">=</operator> <call pos:start="27:17" pos:end="27:35"><name pos:start="27:17" pos:end="27:25">I2C_SLAVE</name><argument_list pos:start="27:26" pos:end="27:35">(<argument pos:start="27:27" pos:end="27:34"><expr pos:start="27:27" pos:end="27:34"><name pos:start="27:27" pos:end="27:34"><name pos:start="27:27" pos:end="27:27">s</name><operator pos:start="27:28" pos:end="27:29">-&gt;</operator><name pos:start="27:30" pos:end="27:34">slave</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:30">return <expr pos:start="29:16" pos:end="29:29"><name pos:start="29:16" pos:end="29:29"><name pos:start="29:16" pos:end="29:20">slave</name><operator pos:start="29:21" pos:end="29:22">-&gt;</operator><name pos:start="29:23" pos:end="29:29">address</name></name></expr>;</return>

    <case pos:start="31:5" pos:end="31:14">case <expr pos:start="31:10" pos:end="31:13"><name pos:start="31:10" pos:end="31:13">IDBR</name></expr>:</case>

        <return pos:start="33:9" pos:end="33:23">return <expr pos:start="33:16" pos:end="33:22"><name pos:start="33:16" pos:end="33:22"><name pos:start="33:16" pos:end="33:16">s</name><operator pos:start="33:17" pos:end="33:18">-&gt;</operator><name pos:start="33:19" pos:end="33:22">data</name></name></expr>;</return>

    <case pos:start="35:5" pos:end="35:14">case <expr pos:start="35:10" pos:end="35:13"><name pos:start="35:10" pos:end="35:13">IBMR</name></expr>:</case>

        <if_stmt pos:start="37:9" pos:end="43:24"><if pos:start="37:9" pos:end="39:25">if <condition pos:start="37:12" pos:end="37:33">(<expr pos:start="37:13" pos:end="37:32"><name pos:start="37:13" pos:end="37:21"><name pos:start="37:13" pos:end="37:13">s</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:21">status</name></name> <operator pos:start="37:23" pos:end="37:23">&amp;</operator> <operator pos:start="37:25" pos:end="37:25">(</operator><literal type="number" pos:start="37:26" pos:end="37:26">1</literal> <operator pos:start="37:28" pos:end="37:29">&lt;&lt;</operator> <literal type="number" pos:start="37:31" pos:end="37:31">2</literal><operator pos:start="37:32" pos:end="37:32">)</operator></expr>)</condition><block type="pseudo" pos:start="39:13" pos:end="39:25"><block_content pos:start="39:13" pos:end="39:25">

            <expr_stmt pos:start="39:13" pos:end="39:25"><expr pos:start="39:13" pos:end="39:24"><name pos:start="39:13" pos:end="39:19"><name pos:start="39:13" pos:end="39:13">s</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:19">ibmr</name></name> <operator pos:start="39:21" pos:end="39:22">^=</operator> <literal type="number" pos:start="39:24" pos:end="39:24">3</literal></expr>;</expr_stmt></block_content></block></if>	<comment type="block" pos:start="39:33" pos:end="39:66">/* Fake SCL and SDA pin changes */</comment>

        <else pos:start="41:9" pos:end="43:24">else<block type="pseudo" pos:start="43:13" pos:end="43:24"><block_content pos:start="43:13" pos:end="43:24">

            <expr_stmt pos:start="43:13" pos:end="43:24"><expr pos:start="43:13" pos:end="43:23"><name pos:start="43:13" pos:end="43:19"><name pos:start="43:13" pos:end="43:13">s</name><operator pos:start="43:14" pos:end="43:15">-&gt;</operator><name pos:start="43:16" pos:end="43:19">ibmr</name></name> <operator pos:start="43:21" pos:end="43:21">=</operator> <literal type="number" pos:start="43:23" pos:end="43:23">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <return pos:start="45:9" pos:end="45:23">return <expr pos:start="45:16" pos:end="45:22"><name pos:start="45:16" pos:end="45:22"><name pos:start="45:16" pos:end="45:16">s</name><operator pos:start="45:17" pos:end="45:18">-&gt;</operator><name pos:start="45:19" pos:end="45:22">ibmr</name></name></expr>;</return>

    <default pos:start="47:5" pos:end="47:12">default:</default>

        <expr_stmt pos:start="49:9" pos:end="49:69"><expr pos:start="49:9" pos:end="49:68"><call pos:start="49:9" pos:end="49:68"><name pos:start="49:9" pos:end="49:14">printf</name><argument_list pos:start="49:15" pos:end="49:68">(<argument pos:start="49:16" pos:end="49:47"><expr pos:start="49:16" pos:end="49:47"><literal type="string" pos:start="49:16" pos:end="49:34">"%s: Bad register "</literal> <name pos:start="49:36" pos:end="49:42">REG_FMT</name> <literal type="string" pos:start="49:44" pos:end="49:47">"\n"</literal></expr></argument>, <argument pos:start="49:50" pos:end="49:61"><expr pos:start="49:50" pos:end="49:61"><name pos:start="49:50" pos:end="49:61">__FUNCTION__</name></expr></argument>, <argument pos:start="49:64" pos:end="49:67"><expr pos:start="49:64" pos:end="49:67"><name pos:start="49:64" pos:end="49:67">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="51:9" pos:end="51:14">break;</break>

    </block_content>}</block></switch>

    <return pos:start="55:5" pos:end="55:13">return <expr pos:start="55:12" pos:end="55:12"><literal type="number" pos:start="55:12" pos:end="55:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
