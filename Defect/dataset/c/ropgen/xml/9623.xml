<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9623.c" pos:tabs="8"><function pos:start="1:1" pos:end="111:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">posix_aio_read</name><parameter_list pos:start="1:27" pos:end="1:40">(<parameter pos:start="1:28" pos:end="1:39"><decl pos:start="1:28" pos:end="1:39"><type pos:start="1:28" pos:end="1:33"><name pos:start="1:28" pos:end="1:31">void</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:39">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="111:1">{<block_content pos:start="5:5" pos:end="109:11">

    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:29"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">PosixAioState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">s</name> <init pos:start="5:22" pos:end="5:29">= <expr pos:start="5:24" pos:end="5:29"><name pos:start="5:24" pos:end="5:29">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">RawAIOCB</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:17">acb</name></decl>, <decl pos:start="7:20" pos:end="7:25"><type ref="prev" pos:start="7:5" pos:end="7:14"><modifier pos:start="7:20" pos:end="7:20">*</modifier><modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:25">pacb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">ssize_t</name></type> <name pos:start="11:13" pos:end="11:15">len</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:41">/* read all bytes from signal pipe */</comment>

    <for pos:start="17:5" pos:end="35:5">for <control pos:start="17:9" pos:end="17:12">(<init pos:start="17:10" pos:end="17:10">;</init><condition pos:start="17:11" pos:end="17:11">;</condition><incr/>)</control> <block pos:start="17:14" pos:end="35:5">{<block_content pos:start="19:9" pos:end="33:14">

        <decl_stmt pos:start="19:9" pos:end="19:23"><decl pos:start="19:9" pos:end="19:22"><type pos:start="19:9" pos:end="19:12"><name pos:start="19:9" pos:end="19:12">char</name></type> <name pos:start="19:14" pos:end="19:22"><name pos:start="19:14" pos:end="19:18">bytes</name><index pos:start="19:19" pos:end="19:22">[<expr pos:start="19:20" pos:end="19:21"><literal type="number" pos:start="19:20" pos:end="19:21">16</literal></expr>]</index></name></decl>;</decl_stmt>



        <expr_stmt pos:start="23:9" pos:end="23:49"><expr pos:start="23:9" pos:end="23:48"><name pos:start="23:9" pos:end="23:11">len</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <call pos:start="23:15" pos:end="23:48"><name pos:start="23:15" pos:end="23:18">read</name><argument_list pos:start="23:19" pos:end="23:48">(<argument pos:start="23:20" pos:end="23:25"><expr pos:start="23:20" pos:end="23:25"><name pos:start="23:20" pos:end="23:25"><name pos:start="23:20" pos:end="23:20">s</name><operator pos:start="23:21" pos:end="23:22">-&gt;</operator><name pos:start="23:23" pos:end="23:25">rfd</name></name></expr></argument>, <argument pos:start="23:28" pos:end="23:32"><expr pos:start="23:28" pos:end="23:32"><name pos:start="23:28" pos:end="23:32">bytes</name></expr></argument>, <argument pos:start="23:35" pos:end="23:47"><expr pos:start="23:35" pos:end="23:47"><sizeof pos:start="23:35" pos:end="23:47">sizeof<argument_list pos:start="23:41" pos:end="23:47">(<argument pos:start="23:42" pos:end="23:46"><expr pos:start="23:42" pos:end="23:46"><name pos:start="23:42" pos:end="23:46">bytes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="27:21"><if pos:start="25:9" pos:end="27:21">if <condition pos:start="25:12" pos:end="25:40">(<expr pos:start="25:13" pos:end="25:39"><name pos:start="25:13" pos:end="25:15">len</name> <operator pos:start="25:17" pos:end="25:18">==</operator> <operator pos:start="25:20" pos:end="25:20">-</operator><literal type="number" pos:start="25:21" pos:end="25:21">1</literal> <operator pos:start="25:23" pos:end="25:24">&amp;&amp;</operator> <name pos:start="25:26" pos:end="25:30">errno</name> <operator pos:start="25:32" pos:end="25:33">==</operator> <name pos:start="25:35" pos:end="25:39">EINTR</name></expr>)</condition><block type="pseudo" pos:start="27:13" pos:end="27:21"><block_content pos:start="27:13" pos:end="27:21">

            <continue pos:start="27:13" pos:end="27:21">continue;</continue></block_content></block></if></if_stmt> <comment type="block" pos:start="27:23" pos:end="27:37">/* try again */</comment>

        <if_stmt pos:start="29:9" pos:end="31:21"><if pos:start="29:9" pos:end="31:21">if <condition pos:start="29:12" pos:end="29:33">(<expr pos:start="29:13" pos:end="29:32"><name pos:start="29:13" pos:end="29:15">len</name> <operator pos:start="29:17" pos:end="29:18">==</operator> <sizeof pos:start="29:20" pos:end="29:32">sizeof<argument_list pos:start="29:26" pos:end="29:32">(<argument pos:start="29:27" pos:end="29:31"><expr pos:start="29:27" pos:end="29:31"><name pos:start="29:27" pos:end="29:31">bytes</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo" pos:start="31:13" pos:end="31:21"><block_content pos:start="31:13" pos:end="31:21">

            <continue pos:start="31:13" pos:end="31:21">continue;</continue></block_content></block></if></if_stmt> <comment type="block" pos:start="31:23" pos:end="31:40">/* more to read */</comment>

        <break pos:start="33:9" pos:end="33:14">break;</break>

    </block_content>}</block></for>



    <for pos:start="39:5" pos:end="107:5">for<control pos:start="39:8" pos:end="39:11">(<init pos:start="39:9" pos:end="39:9">;</init><condition pos:start="39:10" pos:end="39:10">;</condition><incr/>)</control> <block pos:start="39:13" pos:end="107:5">{<block_content pos:start="41:9" pos:end="105:9">

        <expr_stmt pos:start="41:9" pos:end="41:29"><expr pos:start="41:9" pos:end="41:28"><name pos:start="41:9" pos:end="41:12">pacb</name> <operator pos:start="41:14" pos:end="41:14">=</operator> <operator pos:start="41:16" pos:end="41:16">&amp;</operator><name pos:start="41:17" pos:end="41:28"><name pos:start="41:17" pos:end="41:17">s</name><operator pos:start="41:18" pos:end="41:19">-&gt;</operator><name pos:start="41:20" pos:end="41:28">first_aio</name></name></expr>;</expr_stmt>

        <for pos:start="43:9" pos:end="105:9">for<control pos:start="43:12" pos:end="43:15">(<init pos:start="43:13" pos:end="43:13">;</init><condition pos:start="43:14" pos:end="43:14">;</condition><incr/>)</control> <block pos:start="43:17" pos:end="105:9">{<block_content pos:start="45:13" pos:end="103:13">

            <expr_stmt pos:start="45:13" pos:end="45:24"><expr pos:start="45:13" pos:end="45:23"><name pos:start="45:13" pos:end="45:15">acb</name> <operator pos:start="45:17" pos:end="45:17">=</operator> <operator pos:start="45:19" pos:end="45:19">*</operator><name pos:start="45:20" pos:end="45:23">pacb</name></expr>;</expr_stmt>

            <if_stmt pos:start="47:13" pos:end="49:29"><if pos:start="47:13" pos:end="49:29">if <condition pos:start="47:16" pos:end="47:21">(<expr pos:start="47:17" pos:end="47:20"><operator pos:start="47:17" pos:end="47:17">!</operator><name pos:start="47:18" pos:end="47:20">acb</name></expr>)</condition><block type="pseudo" pos:start="49:17" pos:end="49:29"><block_content pos:start="49:17" pos:end="49:29">

                <goto pos:start="49:17" pos:end="49:29">goto <name pos:start="49:22" pos:end="49:28">the_end</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:41"><expr pos:start="51:13" pos:end="51:40"><name pos:start="51:13" pos:end="51:15">ret</name> <operator pos:start="51:17" pos:end="51:17">=</operator> <call pos:start="51:19" pos:end="51:40"><name pos:start="51:19" pos:end="51:27">aio_error</name><argument_list pos:start="51:28" pos:end="51:40">(<argument pos:start="51:29" pos:end="51:39"><expr pos:start="51:29" pos:end="51:39"><operator pos:start="51:29" pos:end="51:29">&amp;</operator><name pos:start="51:30" pos:end="51:39"><name pos:start="51:30" pos:end="51:32">acb</name><operator pos:start="51:33" pos:end="51:34">-&gt;</operator><name pos:start="51:35" pos:end="51:39">aiocb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="53:13" pos:end="103:13"><if pos:start="53:13" pos:end="63:13">if <condition pos:start="53:16" pos:end="53:33">(<expr pos:start="53:17" pos:end="53:32"><name pos:start="53:17" pos:end="53:19">ret</name> <operator pos:start="53:21" pos:end="53:22">==</operator> <name pos:start="53:24" pos:end="53:32">ECANCELED</name></expr>)</condition> <block pos:start="53:35" pos:end="63:13">{<block_content pos:start="57:17" pos:end="61:38">

                <comment type="block" pos:start="55:17" pos:end="55:40">/* remove the request */</comment>

                <expr_stmt pos:start="57:17" pos:end="57:34"><expr pos:start="57:17" pos:end="57:33"><operator pos:start="57:17" pos:end="57:17">*</operator><name pos:start="57:18" pos:end="57:21">pacb</name> <operator pos:start="57:23" pos:end="57:23">=</operator> <name pos:start="57:25" pos:end="57:33"><name pos:start="57:25" pos:end="57:27">acb</name><operator pos:start="57:28" pos:end="57:29">-&gt;</operator><name pos:start="57:30" pos:end="57:33">next</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="59:17" pos:end="59:37"><expr pos:start="59:17" pos:end="59:36"><call pos:start="59:17" pos:end="59:36"><name pos:start="59:17" pos:end="59:31">raw_fd_pool_put</name><argument_list pos:start="59:32" pos:end="59:36">(<argument pos:start="59:33" pos:end="59:35"><expr pos:start="59:33" pos:end="59:35"><name pos:start="59:33" pos:end="59:35">acb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="61:17" pos:end="61:38"><expr pos:start="61:17" pos:end="61:37"><call pos:start="61:17" pos:end="61:37"><name pos:start="61:17" pos:end="61:32">qemu_aio_release</name><argument_list pos:start="61:33" pos:end="61:37">(<argument pos:start="61:34" pos:end="61:36"><expr pos:start="61:34" pos:end="61:36"><name pos:start="61:34" pos:end="61:36">acb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="63:15" pos:end="99:13">else if <condition pos:start="63:23" pos:end="63:42">(<expr pos:start="63:24" pos:end="63:41"><name pos:start="63:24" pos:end="63:26">ret</name> <operator pos:start="63:28" pos:end="63:29">!=</operator> <name pos:start="63:31" pos:end="63:41">EINPROGRESS</name></expr>)</condition> <block pos:start="63:44" pos:end="99:13">{<block_content pos:start="67:17" pos:end="97:22">

                <comment type="block" pos:start="65:17" pos:end="65:32">/* end of aio */</comment>

                <if_stmt pos:start="67:17" pos:end="83:17"><if pos:start="67:17" pos:end="79:17">if <condition pos:start="67:20" pos:end="67:29">(<expr pos:start="67:21" pos:end="67:28"><name pos:start="67:21" pos:end="67:23">ret</name> <operator pos:start="67:25" pos:end="67:26">==</operator> <literal type="number" pos:start="67:28" pos:end="67:28">0</literal></expr>)</condition> <block pos:start="67:31" pos:end="79:17">{<block_content pos:start="69:21" pos:end="77:38">

                    <expr_stmt pos:start="69:21" pos:end="69:50"><expr pos:start="69:21" pos:end="69:49"><name pos:start="69:21" pos:end="69:23">ret</name> <operator pos:start="69:25" pos:end="69:25">=</operator> <call pos:start="69:27" pos:end="69:49"><name pos:start="69:27" pos:end="69:36">aio_return</name><argument_list pos:start="69:37" pos:end="69:49">(<argument pos:start="69:38" pos:end="69:48"><expr pos:start="69:38" pos:end="69:48"><operator pos:start="69:38" pos:end="69:38">&amp;</operator><name pos:start="69:39" pos:end="69:48"><name pos:start="69:39" pos:end="69:41">acb</name><operator pos:start="69:42" pos:end="69:43">-&gt;</operator><name pos:start="69:44" pos:end="69:48">aiocb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="71:21" pos:end="77:38"><if pos:start="71:21" pos:end="73:32">if <condition pos:start="71:24" pos:end="71:53">(<expr pos:start="71:25" pos:end="71:52"><name pos:start="71:25" pos:end="71:27">ret</name> <operator pos:start="71:29" pos:end="71:30">==</operator> <name pos:start="71:32" pos:end="71:52"><name pos:start="71:32" pos:end="71:34">acb</name><operator pos:start="71:35" pos:end="71:36">-&gt;</operator><name pos:start="71:37" pos:end="71:41">aiocb</name><operator pos:start="71:42" pos:end="71:42">.</operator><name pos:start="71:43" pos:end="71:52">aio_nbytes</name></name></expr>)</condition><block type="pseudo" pos:start="73:25" pos:end="73:32"><block_content pos:start="73:25" pos:end="73:32">

                        <expr_stmt pos:start="73:25" pos:end="73:32"><expr pos:start="73:25" pos:end="73:31"><name pos:start="73:25" pos:end="73:27">ret</name> <operator pos:start="73:29" pos:end="73:29">=</operator> <literal type="number" pos:start="73:31" pos:end="73:31">0</literal></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="75:21" pos:end="77:38">else<block type="pseudo" pos:start="77:25" pos:end="77:38"><block_content pos:start="77:25" pos:end="77:38">

                        <expr_stmt pos:start="77:25" pos:end="77:38"><expr pos:start="77:25" pos:end="77:37"><name pos:start="77:25" pos:end="77:27">ret</name> <operator pos:start="77:29" pos:end="77:29">=</operator> <operator pos:start="77:31" pos:end="77:31">-</operator><name pos:start="77:32" pos:end="77:37">EINVAL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="79:19" pos:end="83:17">else <block pos:start="79:24" pos:end="83:17">{<block_content pos:start="81:21" pos:end="81:31">

                    <expr_stmt pos:start="81:21" pos:end="81:31"><expr pos:start="81:21" pos:end="81:30"><name pos:start="81:21" pos:end="81:23">ret</name> <operator pos:start="81:25" pos:end="81:25">=</operator> <operator pos:start="81:27" pos:end="81:27">-</operator><name pos:start="81:28" pos:end="81:30">ret</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <comment type="block" pos:start="85:17" pos:end="85:40">/* remove the request */</comment>

                <expr_stmt pos:start="87:17" pos:end="87:34"><expr pos:start="87:17" pos:end="87:33"><operator pos:start="87:17" pos:end="87:17">*</operator><name pos:start="87:18" pos:end="87:21">pacb</name> <operator pos:start="87:23" pos:end="87:23">=</operator> <name pos:start="87:25" pos:end="87:33"><name pos:start="87:25" pos:end="87:27">acb</name><operator pos:start="87:28" pos:end="87:29">-&gt;</operator><name pos:start="87:30" pos:end="87:33">next</name></name></expr>;</expr_stmt>

                <comment type="block" pos:start="89:17" pos:end="89:39">/* call the callback */</comment>

                <expr_stmt pos:start="91:17" pos:end="91:56"><expr pos:start="91:17" pos:end="91:55"><call pos:start="91:17" pos:end="91:55"><name pos:start="91:17" pos:end="91:30"><name pos:start="91:17" pos:end="91:19">acb</name><operator pos:start="91:20" pos:end="91:21">-&gt;</operator><name pos:start="91:22" pos:end="91:27">common</name><operator pos:start="91:28" pos:end="91:28">.</operator><name pos:start="91:29" pos:end="91:30">cb</name></name><argument_list pos:start="91:31" pos:end="91:55">(<argument pos:start="91:32" pos:end="91:49"><expr pos:start="91:32" pos:end="91:49"><name pos:start="91:32" pos:end="91:49"><name pos:start="91:32" pos:end="91:34">acb</name><operator pos:start="91:35" pos:end="91:36">-&gt;</operator><name pos:start="91:37" pos:end="91:42">common</name><operator pos:start="91:43" pos:end="91:43">.</operator><name pos:start="91:44" pos:end="91:49">opaque</name></name></expr></argument>, <argument pos:start="91:52" pos:end="91:54"><expr pos:start="91:52" pos:end="91:54"><name pos:start="91:52" pos:end="91:54">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="93:17" pos:end="93:37"><expr pos:start="93:17" pos:end="93:36"><call pos:start="93:17" pos:end="93:36"><name pos:start="93:17" pos:end="93:31">raw_fd_pool_put</name><argument_list pos:start="93:32" pos:end="93:36">(<argument pos:start="93:33" pos:end="93:35"><expr pos:start="93:33" pos:end="93:35"><name pos:start="93:33" pos:end="93:35">acb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="95:17" pos:end="95:38"><expr pos:start="95:17" pos:end="95:37"><call pos:start="95:17" pos:end="95:37"><name pos:start="95:17" pos:end="95:32">qemu_aio_release</name><argument_list pos:start="95:33" pos:end="95:37">(<argument pos:start="95:34" pos:end="95:36"><expr pos:start="95:34" pos:end="95:36"><name pos:start="95:34" pos:end="95:36">acb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="97:17" pos:end="97:22">break;</break>

            </block_content>}</block></if> <else pos:start="99:15" pos:end="103:13">else <block pos:start="99:20" pos:end="103:13">{<block_content pos:start="101:17" pos:end="101:34">

                <expr_stmt pos:start="101:17" pos:end="101:34"><expr pos:start="101:17" pos:end="101:33"><name pos:start="101:17" pos:end="101:20">pacb</name> <operator pos:start="101:22" pos:end="101:22">=</operator> <operator pos:start="101:24" pos:end="101:24">&amp;</operator><name pos:start="101:25" pos:end="101:33"><name pos:start="101:25" pos:end="101:27">acb</name><operator pos:start="101:28" pos:end="101:29">-&gt;</operator><name pos:start="101:30" pos:end="101:33">next</name></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>

 <label pos:start="109:2" pos:end="109:9"><name pos:start="109:2" pos:end="109:8">the_end</name>:</label> <empty_stmt pos:start="109:11" pos:end="109:11">;</empty_stmt>

</block_content>}</block></function>
</unit>
