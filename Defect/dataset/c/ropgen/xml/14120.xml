<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14120.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:19"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:19"><name pos:start="1:8" pos:end="1:11">enum</name> <name pos:start="1:13" pos:end="1:19">CodecID</name></name></type> <name pos:start="1:21" pos:end="1:37">find_codec_or_die</name><parameter_list pos:start="1:38" pos:end="1:90">(<parameter pos:start="1:39" pos:end="1:54"><decl pos:start="1:39" pos:end="1:54"><type pos:start="1:39" pos:end="1:54"><specifier pos:start="1:39" pos:end="1:43">const</specifier> <name pos:start="1:45" pos:end="1:48">char</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:54">name</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:64"><decl pos:start="1:57" pos:end="1:64"><type pos:start="1:57" pos:end="1:64"><name pos:start="1:57" pos:end="1:59">int</name></type> <name pos:start="1:61" pos:end="1:64">type</name></decl></parameter>, <parameter pos:start="1:67" pos:end="1:77"><decl pos:start="1:67" pos:end="1:77"><type pos:start="1:67" pos:end="1:77"><name pos:start="1:67" pos:end="1:69">int</name></type> <name pos:start="1:71" pos:end="1:77">encoder</name></decl></parameter>, <parameter pos:start="1:80" pos:end="1:89"><decl pos:start="1:80" pos:end="1:89"><type pos:start="1:80" pos:end="1:89"><name pos:start="1:80" pos:end="1:82">int</name></type> <name pos:start="1:84" pos:end="1:89">strict</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="65:1">{<block_content pos:start="5:5" pos:end="63:21">

    <decl_stmt pos:start="5:5" pos:end="5:63"><decl pos:start="5:5" pos:end="5:62"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:28">codec_string</name> <init pos:start="5:30" pos:end="5:62">= <expr pos:start="5:32" pos:end="5:62"><ternary pos:start="5:32" pos:end="5:62"><condition pos:start="5:32" pos:end="5:40"><expr pos:start="5:32" pos:end="5:38"><name pos:start="5:32" pos:end="5:38">encoder</name></expr> ?</condition><then pos:start="5:42" pos:end="5:50"> <expr pos:start="5:42" pos:end="5:50"><literal type="string" pos:start="5:42" pos:end="5:50">"encoder"</literal></expr> </then><else pos:start="5:52" pos:end="5:62">: <expr pos:start="5:54" pos:end="5:62"><literal type="string" pos:start="5:54" pos:end="5:62">"decoder"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">AVCodec</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:18">codec</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="13:29"><if pos:start="11:5" pos:end="13:29">if<condition pos:start="11:7" pos:end="11:13">(<expr pos:start="11:8" pos:end="11:12"><operator pos:start="11:8" pos:end="11:8">!</operator><name pos:start="11:9" pos:end="11:12">name</name></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="13:29"><block_content pos:start="13:9" pos:end="13:29">

        <return pos:start="13:9" pos:end="13:29">return <expr pos:start="13:16" pos:end="13:28"><name pos:start="13:16" pos:end="13:28">CODEC_ID_NONE</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="15:5" pos:end="19:43"><expr pos:start="15:5" pos:end="19:42"><name pos:start="15:5" pos:end="15:9">codec</name> <operator pos:start="15:11" pos:end="15:11">=</operator> <ternary pos:start="15:13" pos:end="19:42"><condition pos:start="15:13" pos:end="15:21"><expr pos:start="15:13" pos:end="15:19"><name pos:start="15:13" pos:end="15:19">encoder</name></expr> ?</condition><then pos:start="17:9" pos:end="17:42">

        <expr pos:start="17:9" pos:end="17:42"><call pos:start="17:9" pos:end="17:42"><name pos:start="17:9" pos:end="17:36">avcodec_find_encoder_by_name</name><argument_list pos:start="17:37" pos:end="17:42">(<argument pos:start="17:38" pos:end="17:41"><expr pos:start="17:38" pos:end="17:41"><name pos:start="17:38" pos:end="17:41">name</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="17:44" pos:end="19:42">:

        <expr pos:start="19:9" pos:end="19:42"><call pos:start="19:9" pos:end="19:42"><name pos:start="19:9" pos:end="19:36">avcodec_find_decoder_by_name</name><argument_list pos:start="19:37" pos:end="19:42">(<argument pos:start="19:38" pos:end="19:41"><expr pos:start="19:38" pos:end="19:41"><name pos:start="19:38" pos:end="19:41">name</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if<condition pos:start="21:7" pos:end="21:14">(<expr pos:start="21:8" pos:end="21:13"><operator pos:start="21:8" pos:end="21:8">!</operator><name pos:start="21:9" pos:end="21:13">codec</name></expr>)</condition> <block pos:start="21:16" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:23">

        <expr_stmt pos:start="23:9" pos:end="23:65"><expr pos:start="23:9" pos:end="23:64"><call pos:start="23:9" pos:end="23:64"><name pos:start="23:9" pos:end="23:15">fprintf</name><argument_list pos:start="23:16" pos:end="23:64">(<argument pos:start="23:17" pos:end="23:22"><expr pos:start="23:17" pos:end="23:22"><name pos:start="23:17" pos:end="23:22">stderr</name></expr></argument>, <argument pos:start="23:25" pos:end="23:43"><expr pos:start="23:25" pos:end="23:43"><literal type="string" pos:start="23:25" pos:end="23:43">"Unknown %s '%s'\n"</literal></expr></argument>, <argument pos:start="23:46" pos:end="23:57"><expr pos:start="23:46" pos:end="23:57"><name pos:start="23:46" pos:end="23:57">codec_string</name></expr></argument>, <argument pos:start="23:60" pos:end="23:63"><expr pos:start="23:60" pos:end="23:63"><name pos:start="23:60" pos:end="23:63">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:23"><expr pos:start="25:9" pos:end="25:22"><call pos:start="25:9" pos:end="25:22"><name pos:start="25:9" pos:end="25:19">ffmpeg_exit</name><argument_list pos:start="25:20" pos:end="25:22">(<argument pos:start="25:21" pos:end="25:21"><expr pos:start="25:21" pos:end="25:21"><literal type="number" pos:start="25:21" pos:end="25:21">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if<condition pos:start="29:7" pos:end="29:27">(<expr pos:start="29:8" pos:end="29:26"><name pos:start="29:8" pos:end="29:18"><name pos:start="29:8" pos:end="29:12">codec</name><operator pos:start="29:13" pos:end="29:14">-&gt;</operator><name pos:start="29:15" pos:end="29:18">type</name></name> <operator pos:start="29:20" pos:end="29:21">!=</operator> <name pos:start="29:23" pos:end="29:26">type</name></expr>)</condition> <block pos:start="29:29" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:23">

        <expr_stmt pos:start="31:9" pos:end="31:70"><expr pos:start="31:9" pos:end="31:69"><call pos:start="31:9" pos:end="31:69"><name pos:start="31:9" pos:end="31:15">fprintf</name><argument_list pos:start="31:16" pos:end="31:69">(<argument pos:start="31:17" pos:end="31:22"><expr pos:start="31:17" pos:end="31:22"><name pos:start="31:17" pos:end="31:22">stderr</name></expr></argument>, <argument pos:start="31:25" pos:end="31:48"><expr pos:start="31:25" pos:end="31:48"><literal type="string" pos:start="31:25" pos:end="31:48">"Invalid %s type '%s'\n"</literal></expr></argument>, <argument pos:start="31:51" pos:end="31:62"><expr pos:start="31:51" pos:end="31:62"><name pos:start="31:51" pos:end="31:62">codec_string</name></expr></argument>, <argument pos:start="31:65" pos:end="31:68"><expr pos:start="31:65" pos:end="31:68"><name pos:start="31:65" pos:end="31:68">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:23"><expr pos:start="33:9" pos:end="33:22"><call pos:start="33:9" pos:end="33:22"><name pos:start="33:9" pos:end="33:19">ffmpeg_exit</name><argument_list pos:start="33:20" pos:end="33:22">(<argument pos:start="33:21" pos:end="33:21"><expr pos:start="33:21" pos:end="33:21"><literal type="number" pos:start="33:21" pos:end="33:21">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="37:5" pos:end="61:5"><if pos:start="37:5" pos:end="61:5">if<condition pos:start="37:7" pos:end="39:43">(<expr pos:start="37:8" pos:end="39:42"><name pos:start="37:8" pos:end="37:26"><name pos:start="37:8" pos:end="37:12">codec</name><operator pos:start="37:13" pos:end="37:14">-&gt;</operator><name pos:start="37:15" pos:end="37:26">capabilities</name></name> <operator pos:start="37:28" pos:end="37:28">&amp;</operator> <name pos:start="37:30" pos:end="37:51">CODEC_CAP_EXPERIMENTAL</name> <operator pos:start="37:53" pos:end="37:54">&amp;&amp;</operator>

       <name pos:start="39:8" pos:end="39:13">strict</name> <operator pos:start="39:15" pos:end="39:15">&gt;</operator> <name pos:start="39:17" pos:end="39:42">FF_COMPLIANCE_EXPERIMENTAL</name></expr>)</condition> <block pos:start="39:45" pos:end="61:5">{<block_content pos:start="41:9" pos:end="59:23">

        <expr_stmt pos:start="41:9" pos:end="45:43"><expr pos:start="41:9" pos:end="45:42"><call pos:start="41:9" pos:end="45:42"><name pos:start="41:9" pos:end="41:15">fprintf</name><argument_list pos:start="41:16" pos:end="45:42">(<argument pos:start="41:17" pos:end="41:22"><expr pos:start="41:17" pos:end="41:22"><name pos:start="41:17" pos:end="41:22">stderr</name></expr></argument>, <argument pos:start="41:25" pos:end="43:79"><expr pos:start="41:25" pos:end="43:79"><literal type="string" pos:start="41:25" pos:end="41:72">"%s '%s' is experimental and might produce bad "</literal>

                <literal type="string" pos:start="43:17" pos:end="43:79">"results.\nAdd '-strict experimental' if you want to use it.\n"</literal></expr></argument>,

                <argument pos:start="45:17" pos:end="45:28"><expr pos:start="45:17" pos:end="45:28"><name pos:start="45:17" pos:end="45:28">codec_string</name></expr></argument>, <argument pos:start="45:31" pos:end="45:41"><expr pos:start="45:31" pos:end="45:41"><name pos:start="45:31" pos:end="45:41"><name pos:start="45:31" pos:end="45:35">codec</name><operator pos:start="45:36" pos:end="45:37">-&gt;</operator><name pos:start="45:38" pos:end="45:41">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="51:44"><expr pos:start="47:9" pos:end="51:43"><name pos:start="47:9" pos:end="47:13">codec</name> <operator pos:start="47:15" pos:end="47:15">=</operator> <ternary pos:start="47:17" pos:end="51:43"><condition pos:start="47:17" pos:end="47:25"><expr pos:start="47:17" pos:end="47:23"><name pos:start="47:17" pos:end="47:23">encoder</name></expr> ?</condition><then pos:start="49:13" pos:end="49:43">

            <expr pos:start="49:13" pos:end="49:43"><call pos:start="49:13" pos:end="49:43"><name pos:start="49:13" pos:end="49:32">avcodec_find_encoder</name><argument_list pos:start="49:33" pos:end="49:43">(<argument pos:start="49:34" pos:end="49:42"><expr pos:start="49:34" pos:end="49:42"><name pos:start="49:34" pos:end="49:42"><name pos:start="49:34" pos:end="49:38">codec</name><operator pos:start="49:39" pos:end="49:40">-&gt;</operator><name pos:start="49:41" pos:end="49:42">id</name></name></expr></argument>)</argument_list></call></expr> </then><else pos:start="49:45" pos:end="51:43">:

            <expr pos:start="51:13" pos:end="51:43"><call pos:start="51:13" pos:end="51:43"><name pos:start="51:13" pos:end="51:32">avcodec_find_decoder</name><argument_list pos:start="51:33" pos:end="51:43">(<argument pos:start="51:34" pos:end="51:42"><expr pos:start="51:34" pos:end="51:42"><name pos:start="51:34" pos:end="51:42"><name pos:start="51:34" pos:end="51:38">codec</name><operator pos:start="51:39" pos:end="51:40">-&gt;</operator><name pos:start="51:41" pos:end="51:42">id</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="57:47"><if pos:start="53:9" pos:end="57:47">if <condition pos:start="53:12" pos:end="53:60">(<expr pos:start="53:13" pos:end="53:59"><operator pos:start="53:13" pos:end="53:13">!</operator><operator pos:start="53:14" pos:end="53:14">(</operator><name pos:start="53:15" pos:end="53:33"><name pos:start="53:15" pos:end="53:19">codec</name><operator pos:start="53:20" pos:end="53:21">-&gt;</operator><name pos:start="53:22" pos:end="53:33">capabilities</name></name> <operator pos:start="53:35" pos:end="53:35">&amp;</operator> <name pos:start="53:37" pos:end="53:58">CODEC_CAP_EXPERIMENTAL</name><operator pos:start="53:59" pos:end="53:59">)</operator></expr>)</condition><block type="pseudo" pos:start="55:13" pos:end="57:47"><block_content pos:start="55:13" pos:end="57:47">

            <expr_stmt pos:start="55:13" pos:end="57:47"><expr pos:start="55:13" pos:end="57:46"><call pos:start="55:13" pos:end="57:46"><name pos:start="55:13" pos:end="55:19">fprintf</name><argument_list pos:start="55:20" pos:end="57:46">(<argument pos:start="55:21" pos:end="55:26"><expr pos:start="55:21" pos:end="55:26"><name pos:start="55:21" pos:end="55:26">stderr</name></expr></argument>, <argument pos:start="55:29" pos:end="55:68"><expr pos:start="55:29" pos:end="55:68"><literal type="string" pos:start="55:29" pos:end="55:68">"Or use the non experimental %s '%s'.\n"</literal></expr></argument>,

                    <argument pos:start="57:21" pos:end="57:32"><expr pos:start="57:21" pos:end="57:32"><name pos:start="57:21" pos:end="57:32">codec_string</name></expr></argument>, <argument pos:start="57:35" pos:end="57:45"><expr pos:start="57:35" pos:end="57:45"><name pos:start="57:35" pos:end="57:45"><name pos:start="57:35" pos:end="57:39">codec</name><operator pos:start="57:40" pos:end="57:41">-&gt;</operator><name pos:start="57:42" pos:end="57:45">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:23"><expr pos:start="59:9" pos:end="59:22"><call pos:start="59:9" pos:end="59:22"><name pos:start="59:9" pos:end="59:19">ffmpeg_exit</name><argument_list pos:start="59:20" pos:end="59:22">(<argument pos:start="59:21" pos:end="59:21"><expr pos:start="59:21" pos:end="59:21"><literal type="number" pos:start="59:21" pos:end="59:21">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="63:5" pos:end="63:21">return <expr pos:start="63:12" pos:end="63:20"><name pos:start="63:12" pos:end="63:20"><name pos:start="63:12" pos:end="63:16">codec</name><operator pos:start="63:17" pos:end="63:18">-&gt;</operator><name pos:start="63:19" pos:end="63:20">id</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
