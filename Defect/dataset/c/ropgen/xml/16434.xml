<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16434.c" pos:tabs="8"><function pos:start="1:1" pos:end="60:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:28">bdrv_all_create_snapshot</name><parameter_list pos:start="1:29" pos:end="7:61">(<parameter pos:start="1:30" pos:end="1:49"><decl pos:start="1:30" pos:end="1:49"><type pos:start="1:30" pos:end="1:49"><name pos:start="1:30" pos:end="1:45">QEMUSnapshotInfo</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:49">sn</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:58"><decl pos:start="3:30" pos:end="3:58"><type pos:start="3:30" pos:end="3:58"><name pos:start="3:30" pos:end="3:45">BlockDriverState</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:58">vm_state_bs</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:51"><decl pos:start="5:30" pos:end="5:51"><type pos:start="5:30" pos:end="5:51"><name pos:start="5:30" pos:end="5:37">uint64_t</name></type> <name pos:start="5:39" pos:end="5:51">vm_state_size</name></decl></parameter>,

                             <parameter pos:start="7:30" pos:end="7:60"><decl pos:start="7:30" pos:end="7:60"><type pos:start="7:30" pos:end="7:60"><name pos:start="7:30" pos:end="7:45">BlockDriverState</name> <modifier pos:start="7:47" pos:end="7:47">*</modifier><modifier pos:start="7:48" pos:end="7:48">*</modifier></type><name pos:start="7:49" pos:end="7:60">first_bad_bs</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="60:1">{<block_content pos:start="11:5" pos:end="58:15">

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">err</name> <init pos:start="11:13" pos:end="11:15">= <expr pos:start="11:15" pos:end="11:15"><literal type="number" pos:start="11:15" pos:end="11:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:20">BlockDriverState</name> <modifier pos:start="13:22" pos:end="13:22">*</modifier></type><name pos:start="13:23" pos:end="13:24">bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:20"><name pos:start="15:5" pos:end="15:20">BdrvNextIterator</name></type> <name pos:start="15:22" pos:end="15:23">it</name></decl>;</decl_stmt>



    <for pos:start="19:5" pos:end="50:5">for <control pos:start="19:9" pos:end="19:55">(<init pos:start="19:10" pos:end="19:30"><expr pos:start="19:10" pos:end="19:29"><name pos:start="19:10" pos:end="19:11">bs</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <call pos:start="19:15" pos:end="19:29"><name pos:start="19:15" pos:end="19:24">bdrv_first</name><argument_list pos:start="19:25" pos:end="19:29">(<argument pos:start="19:26" pos:end="19:28"><expr pos:start="19:26" pos:end="19:28"><operator pos:start="19:26" pos:end="19:26">&amp;</operator><name pos:start="19:27" pos:end="19:28">it</name></expr></argument>)</argument_list></call></expr>;</init> <condition pos:start="19:32" pos:end="19:34"><expr pos:start="19:32" pos:end="19:33"><name pos:start="19:32" pos:end="19:33">bs</name></expr>;</condition> <incr pos:start="19:36" pos:end="19:54"><expr pos:start="19:36" pos:end="19:54"><name pos:start="19:36" pos:end="19:37">bs</name> <operator pos:start="19:39" pos:end="19:39">=</operator> <call pos:start="19:41" pos:end="19:54"><name pos:start="19:41" pos:end="19:49">bdrv_next</name><argument_list pos:start="19:50" pos:end="19:54">(<argument pos:start="19:51" pos:end="19:53"><expr pos:start="19:51" pos:end="19:53"><operator pos:start="19:51" pos:end="19:51">&amp;</operator><name pos:start="19:52" pos:end="19:53">it</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block pos:start="19:57" pos:end="50:5">{<block_content pos:start="21:9" pos:end="48:9">

        <decl_stmt pos:start="21:9" pos:end="21:51"><decl pos:start="21:9" pos:end="21:50"><type pos:start="21:9" pos:end="21:20"><name pos:start="21:9" pos:end="21:18">AioContext</name> <modifier pos:start="21:20" pos:end="21:20">*</modifier></type><name pos:start="21:21" pos:end="21:23">ctx</name> <init pos:start="21:25" pos:end="21:50">= <expr pos:start="21:27" pos:end="21:50"><call pos:start="21:27" pos:end="21:50"><name pos:start="21:27" pos:end="21:46">bdrv_get_aio_context</name><argument_list pos:start="21:47" pos:end="21:50">(<argument pos:start="21:48" pos:end="21:49"><expr pos:start="21:48" pos:end="21:49"><name pos:start="21:48" pos:end="21:49">bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="25:9" pos:end="25:33"><expr pos:start="25:9" pos:end="25:32"><call pos:start="25:9" pos:end="25:32"><name pos:start="25:9" pos:end="25:27">aio_context_acquire</name><argument_list pos:start="25:28" pos:end="25:32">(<argument pos:start="25:29" pos:end="25:31"><expr pos:start="25:29" pos:end="25:31"><name pos:start="25:29" pos:end="25:31">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="27:9" pos:end="39:9"><if pos:start="27:9" pos:end="33:9">if <condition pos:start="27:12" pos:end="27:30">(<expr pos:start="27:13" pos:end="27:29"><name pos:start="27:13" pos:end="27:14">bs</name> <operator pos:start="27:16" pos:end="27:17">==</operator> <name pos:start="27:19" pos:end="27:29">vm_state_bs</name></expr>)</condition> <block pos:start="27:32" pos:end="33:9">{<block_content pos:start="29:13" pos:end="31:47">

            <expr_stmt pos:start="29:13" pos:end="29:46"><expr pos:start="29:13" pos:end="29:45"><name pos:start="29:13" pos:end="29:29"><name pos:start="29:13" pos:end="29:14">sn</name><operator pos:start="29:15" pos:end="29:16">-&gt;</operator><name pos:start="29:17" pos:end="29:29">vm_state_size</name></name> <operator pos:start="29:31" pos:end="29:31">=</operator> <name pos:start="29:33" pos:end="29:45">vm_state_size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="31:13" pos:end="31:47"><expr pos:start="31:13" pos:end="31:46"><name pos:start="31:13" pos:end="31:15">err</name> <operator pos:start="31:17" pos:end="31:17">=</operator> <call pos:start="31:19" pos:end="31:46"><name pos:start="31:19" pos:end="31:38">bdrv_snapshot_create</name><argument_list pos:start="31:39" pos:end="31:46">(<argument pos:start="31:40" pos:end="31:41"><expr pos:start="31:40" pos:end="31:41"><name pos:start="31:40" pos:end="31:41">bs</name></expr></argument>, <argument pos:start="31:44" pos:end="31:45"><expr pos:start="31:44" pos:end="31:45"><name pos:start="31:44" pos:end="31:45">sn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="33:11" pos:end="39:9">else if <condition pos:start="33:19" pos:end="33:41">(<expr pos:start="33:20" pos:end="33:40"><call pos:start="33:20" pos:end="33:40"><name pos:start="33:20" pos:end="33:36">bdrv_can_snapshot</name><argument_list pos:start="33:37" pos:end="33:40">(<argument pos:start="33:38" pos:end="33:39"><expr pos:start="33:38" pos:end="33:39"><name pos:start="33:38" pos:end="33:39">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:43" pos:end="39:9">{<block_content pos:start="35:13" pos:end="37:47">

            <expr_stmt pos:start="35:13" pos:end="35:34"><expr pos:start="35:13" pos:end="35:33"><name pos:start="35:13" pos:end="35:29"><name pos:start="35:13" pos:end="35:14">sn</name><operator pos:start="35:15" pos:end="35:16">-&gt;</operator><name pos:start="35:17" pos:end="35:29">vm_state_size</name></name> <operator pos:start="35:31" pos:end="35:31">=</operator> <literal type="number" pos:start="35:33" pos:end="35:33">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:47"><expr pos:start="37:13" pos:end="37:46"><name pos:start="37:13" pos:end="37:15">err</name> <operator pos:start="37:17" pos:end="37:17">=</operator> <call pos:start="37:19" pos:end="37:46"><name pos:start="37:19" pos:end="37:38">bdrv_snapshot_create</name><argument_list pos:start="37:39" pos:end="37:46">(<argument pos:start="37:40" pos:end="37:41"><expr pos:start="37:40" pos:end="37:41"><name pos:start="37:40" pos:end="37:41">bs</name></expr></argument>, <argument pos:start="37:44" pos:end="37:45"><expr pos:start="37:44" pos:end="37:45"><name pos:start="37:44" pos:end="37:45">sn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:33"><expr pos:start="41:9" pos:end="41:32"><call pos:start="41:9" pos:end="41:32"><name pos:start="41:9" pos:end="41:27">aio_context_release</name><argument_list pos:start="41:28" pos:end="41:32">(<argument pos:start="41:29" pos:end="41:31"><expr pos:start="41:29" pos:end="41:31"><name pos:start="41:29" pos:end="41:31">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="48:9"><if pos:start="43:9" pos:end="48:9">if <condition pos:start="43:12" pos:end="43:20">(<expr pos:start="43:13" pos:end="43:19"><name pos:start="43:13" pos:end="43:15">err</name> <operator pos:start="43:17" pos:end="43:17">&lt;</operator> <literal type="number" pos:start="43:19" pos:end="43:19">0</literal></expr>)</condition> <block pos:start="43:22" pos:end="48:9">{<block_content pos:start="46:13" pos:end="46:22">


            <goto pos:start="46:13" pos:end="46:22">goto <name pos:start="46:18" pos:end="46:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



<label pos:start="54:1" pos:end="54:5"><name pos:start="54:1" pos:end="54:4">fail</name>:</label>

    <expr_stmt pos:start="56:5" pos:end="56:23"><expr pos:start="56:5" pos:end="56:22"><operator pos:start="56:5" pos:end="56:5">*</operator><name pos:start="56:6" pos:end="56:17">first_bad_bs</name> <operator pos:start="56:19" pos:end="56:19">=</operator> <name pos:start="56:21" pos:end="56:22">bs</name></expr>;</expr_stmt>

    <return pos:start="58:5" pos:end="58:15">return <expr pos:start="58:12" pos:end="58:14"><name pos:start="58:12" pos:end="58:14">err</name></expr>;</return>

</block_content>}</block></function></unit>
