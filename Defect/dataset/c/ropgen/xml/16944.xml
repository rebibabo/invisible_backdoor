<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16944.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:1"><type pos:start="1:1" pos:end="1:14"><name pos:start="1:1" pos:end="1:14">tb_page_addr_t</name></type> <name pos:start="1:16" pos:end="1:33">get_page_addr_code</name><parameter_list pos:start="1:34" pos:end="1:72">(<parameter pos:start="1:35" pos:end="1:52"><decl pos:start="1:35" pos:end="1:52"><type pos:start="1:35" pos:end="1:52"><name pos:start="1:35" pos:end="1:46">CPUArchState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:52">env1</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:71"><decl pos:start="1:55" pos:end="1:71"><type pos:start="1:55" pos:end="1:71"><name pos:start="1:55" pos:end="1:66">target_ulong</name></type> <name pos:start="1:68" pos:end="1:71">addr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="57:1">{<block_content pos:start="5:5" pos:end="55:45">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:15">mmu_idx</name></decl>, <decl pos:start="5:18" pos:end="5:27"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:18" pos:end="5:27">page_index</name></decl>, <decl pos:start="5:30" pos:end="5:31"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:30" pos:end="5:31">pd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">void</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:11">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">MemoryRegion</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:20">mr</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:65"><expr pos:start="13:5" pos:end="13:64"><name pos:start="13:5" pos:end="13:14">page_index</name> <operator pos:start="13:16" pos:end="13:16">=</operator> <operator pos:start="13:18" pos:end="13:18">(</operator><name pos:start="13:19" pos:end="13:22">addr</name> <operator pos:start="13:24" pos:end="13:25">&gt;&gt;</operator> <name pos:start="13:27" pos:end="13:42">TARGET_PAGE_BITS</name><operator pos:start="13:43" pos:end="13:43">)</operator> <operator pos:start="13:45" pos:end="13:45">&amp;</operator> <operator pos:start="13:47" pos:end="13:47">(</operator><name pos:start="13:48" pos:end="13:59">CPU_TLB_SIZE</name> <operator pos:start="13:61" pos:end="13:61">-</operator> <literal type="number" pos:start="13:63" pos:end="13:63">1</literal><operator pos:start="13:64" pos:end="13:64">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:34"><expr pos:start="15:5" pos:end="15:33"><name pos:start="15:5" pos:end="15:11">mmu_idx</name> <operator pos:start="15:13" pos:end="15:13">=</operator> <call pos:start="15:15" pos:end="15:33"><name pos:start="15:15" pos:end="15:27">cpu_mmu_index</name><argument_list pos:start="15:28" pos:end="15:33">(<argument pos:start="15:29" pos:end="15:32"><expr pos:start="15:29" pos:end="15:32"><name pos:start="15:29" pos:end="15:32">env1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="31:5"><if pos:start="17:5" pos:end="31:5">if <condition pos:start="17:8" pos:end="19:44">(<expr pos:start="17:9" pos:end="19:43"><call pos:start="17:9" pos:end="19:43"><name pos:start="17:9" pos:end="17:16">unlikely</name><argument_list pos:start="17:17" pos:end="19:43">(<argument pos:start="17:18" pos:end="19:42"><expr pos:start="17:18" pos:end="19:42"><name pos:start="17:18" pos:end="17:53"><name pos:start="17:18" pos:end="17:21">env1</name><operator pos:start="17:22" pos:end="17:23">-&gt;</operator><name pos:start="17:24" pos:end="17:32">tlb_table</name><index pos:start="17:33" pos:end="17:41">[<expr pos:start="17:34" pos:end="17:40"><name pos:start="17:34" pos:end="17:40">mmu_idx</name></expr>]</index><index pos:start="17:42" pos:end="17:53">[<expr pos:start="17:43" pos:end="17:52"><name pos:start="17:43" pos:end="17:52">page_index</name></expr>]</index></name><operator pos:start="17:54" pos:end="17:54">.</operator><name pos:start="17:55" pos:end="17:63">addr_code</name> <operator pos:start="17:65" pos:end="17:66">!=</operator>

                 <operator pos:start="19:18" pos:end="19:18">(</operator><name pos:start="19:19" pos:end="19:22">addr</name> <operator pos:start="19:24" pos:end="19:24">&amp;</operator> <name pos:start="19:26" pos:end="19:41">TARGET_PAGE_MASK</name><operator pos:start="19:42" pos:end="19:42">)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="19:46" pos:end="31:5">{<block_content pos:start="23:9" pos:end="30:0">

<cpp:ifdef pos:start="21:1" pos:end="21:28">#<cpp:directive pos:start="21:2" pos:end="21:6">ifdef</cpp:directive> <name pos:start="21:8" pos:end="21:28">CONFIG_TCG_PASS_AREG0</name></cpp:ifdef>

        <expr_stmt pos:start="23:9" pos:end="26:0"><expr pos:start="23:9" pos:end="23:33"><call pos:start="23:9" pos:end="23:33"><name pos:start="23:9" pos:end="23:21">cpu_ldub_code</name><argument_list pos:start="23:22" pos:end="23:33">(<argument pos:start="23:23" pos:end="23:26"><expr pos:start="23:23" pos:end="23:26"><name pos:start="23:23" pos:end="23:26">env1</name></expr></argument>, <argument pos:start="23:29" pos:end="23:32"><expr pos:start="23:29" pos:end="23:32"><name pos:start="23:29" pos:end="23:32">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="25:1" pos:end="25:5">#<cpp:directive pos:start="25:2" pos:end="25:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="27:9" pos:end="30:0"><expr pos:start="27:9" pos:end="27:23"><call pos:start="27:9" pos:end="27:23"><name pos:start="27:9" pos:end="27:17">ldub_code</name><argument_list pos:start="27:18" pos:end="27:23">(<argument pos:start="27:19" pos:end="27:22"><expr pos:start="27:19" pos:end="27:22"><name pos:start="27:19" pos:end="27:22">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="29:1" pos:end="29:6">#<cpp:directive pos:start="29:2" pos:end="29:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:62"><expr pos:start="33:5" pos:end="33:61"><name pos:start="33:5" pos:end="33:6">pd</name> <operator pos:start="33:8" pos:end="33:8">=</operator> <name pos:start="33:10" pos:end="33:41"><name pos:start="33:10" pos:end="33:13">env1</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:20">iotlb</name><index pos:start="33:21" pos:end="33:29">[<expr pos:start="33:22" pos:end="33:28"><name pos:start="33:22" pos:end="33:28">mmu_idx</name></expr>]</index><index pos:start="33:30" pos:end="33:41">[<expr pos:start="33:31" pos:end="33:40"><name pos:start="33:31" pos:end="33:40">page_index</name></expr>]</index></name> <operator pos:start="33:43" pos:end="33:43">&amp;</operator> <operator pos:start="33:45" pos:end="33:45">~</operator><name pos:start="33:46" pos:end="33:61">TARGET_PAGE_MASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:29"><expr pos:start="35:5" pos:end="35:28"><name pos:start="35:5" pos:end="35:6">mr</name> <operator pos:start="35:8" pos:end="35:8">=</operator> <call pos:start="35:10" pos:end="35:28"><name pos:start="35:10" pos:end="35:24">iotlb_to_region</name><argument_list pos:start="35:25" pos:end="35:28">(<argument pos:start="35:26" pos:end="35:27"><expr pos:start="35:26" pos:end="35:27"><name pos:start="35:26" pos:end="35:27">pd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="51:5"><if pos:start="37:5" pos:end="51:5">if <condition pos:start="37:8" pos:end="39:53">(<expr pos:start="37:9" pos:end="39:52"><name pos:start="37:9" pos:end="37:10">mr</name> <operator pos:start="37:12" pos:end="37:13">!=</operator> <operator pos:start="37:15" pos:end="37:15">&amp;</operator><name pos:start="37:16" pos:end="37:25">io_mem_ram</name> <operator pos:start="37:27" pos:end="37:28">&amp;&amp;</operator> <name pos:start="37:30" pos:end="37:31">mr</name> <operator pos:start="37:33" pos:end="37:34">!=</operator> <operator pos:start="37:36" pos:end="37:36">&amp;</operator><name pos:start="37:37" pos:end="37:46">io_mem_rom</name>

        <operator pos:start="39:9" pos:end="39:10">&amp;&amp;</operator> <name pos:start="39:12" pos:end="39:13">mr</name> <operator pos:start="39:15" pos:end="39:16">!=</operator> <operator pos:start="39:18" pos:end="39:18">&amp;</operator><name pos:start="39:19" pos:end="39:33">io_mem_notdirty</name> <operator pos:start="39:35" pos:end="39:36">&amp;&amp;</operator> <operator pos:start="39:38" pos:end="39:38">!</operator><name pos:start="39:39" pos:end="39:52"><name pos:start="39:39" pos:end="39:40">mr</name><operator pos:start="39:41" pos:end="39:42">-&gt;</operator><name pos:start="39:43" pos:end="39:52">rom_device</name></name></expr>)</condition> <block pos:start="39:55" pos:end="51:5">{<block_content pos:start="43:9" pos:end="50:0">

<cpp:if pos:start="41:1" pos:end="41:74">#<cpp:directive pos:start="41:2" pos:end="41:3">if</cpp:directive> <expr pos:start="41:5" pos:end="41:74"><call pos:start="41:5" pos:end="41:25"><name pos:start="41:5" pos:end="41:11">defined</name><argument_list pos:start="41:12" pos:end="41:25">(<argument pos:start="41:13" pos:end="41:24"><expr pos:start="41:13" pos:end="41:24"><name pos:start="41:13" pos:end="41:24">TARGET_ALPHA</name></expr></argument>)</argument_list></call> <operator pos:start="41:27" pos:end="41:28">||</operator> <call pos:start="41:30" pos:end="41:49"><name pos:start="41:30" pos:end="41:36">defined</name><argument_list pos:start="41:37" pos:end="41:49">(<argument pos:start="41:38" pos:end="41:48"><expr pos:start="41:38" pos:end="41:48"><name pos:start="41:38" pos:end="41:48">TARGET_MIPS</name></expr></argument>)</argument_list></call> <operator pos:start="41:51" pos:end="41:52">||</operator> <call pos:start="41:54" pos:end="41:74"><name pos:start="41:54" pos:end="41:60">defined</name><argument_list pos:start="41:61" pos:end="41:74">(<argument pos:start="41:62" pos:end="41:73"><expr pos:start="41:62" pos:end="41:73"><name pos:start="41:62" pos:end="41:73">TARGET_SPARC</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="43:9" pos:end="46:0"><expr pos:start="43:9" pos:end="43:53"><call pos:start="43:9" pos:end="43:53"><name pos:start="43:9" pos:end="43:29">cpu_unassigned_access</name><argument_list pos:start="43:30" pos:end="43:53">(<argument pos:start="43:31" pos:end="43:34"><expr pos:start="43:31" pos:end="43:34"><name pos:start="43:31" pos:end="43:34">env1</name></expr></argument>, <argument pos:start="43:37" pos:end="43:40"><expr pos:start="43:37" pos:end="43:40"><name pos:start="43:37" pos:end="43:40">addr</name></expr></argument>, <argument pos:start="43:43" pos:end="43:43"><expr pos:start="43:43" pos:end="43:43"><literal type="number" pos:start="43:43" pos:end="43:43">0</literal></expr></argument>, <argument pos:start="43:46" pos:end="43:46"><expr pos:start="43:46" pos:end="43:46"><literal type="number" pos:start="43:46" pos:end="43:46">1</literal></expr></argument>, <argument pos:start="43:49" pos:end="43:49"><expr pos:start="43:49" pos:end="43:49"><literal type="number" pos:start="43:49" pos:end="43:49">0</literal></expr></argument>, <argument pos:start="43:52" pos:end="43:52"><expr pos:start="43:52" pos:end="43:52"><literal type="number" pos:start="43:52" pos:end="43:52">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="45:1" pos:end="45:5">#<cpp:directive pos:start="45:2" pos:end="45:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="47:9" pos:end="50:0"><expr pos:start="47:9" pos:end="47:99"><call pos:start="47:9" pos:end="47:99"><name pos:start="47:9" pos:end="47:17">cpu_abort</name><argument_list pos:start="47:18" pos:end="47:99">(<argument pos:start="47:19" pos:end="47:22"><expr pos:start="47:19" pos:end="47:22"><name pos:start="47:19" pos:end="47:22">env1</name></expr></argument>, <argument pos:start="47:25" pos:end="47:92"><expr pos:start="47:25" pos:end="47:92"><literal type="string" pos:start="47:25" pos:end="47:73">"Trying to execute code outside RAM or ROM at 0x"</literal> <name pos:start="47:75" pos:end="47:87">TARGET_FMT_lx</name> <literal type="string" pos:start="47:89" pos:end="47:92">"\n"</literal></expr></argument>, <argument pos:start="47:95" pos:end="47:98"><expr pos:start="47:95" pos:end="47:98"><name pos:start="47:95" pos:end="47:98">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="49:1" pos:end="49:6">#<cpp:directive pos:start="49:2" pos:end="49:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:80"><expr pos:start="53:5" pos:end="53:79"><name pos:start="53:5" pos:end="53:5">p</name> <operator pos:start="53:7" pos:end="53:7">=</operator> <operator pos:start="53:9" pos:end="53:9">(</operator><name pos:start="53:10" pos:end="53:13">void</name> <operator pos:start="53:15" pos:end="53:15">*</operator><operator pos:start="53:16" pos:end="53:16">)</operator><operator pos:start="53:17" pos:end="53:17">(</operator><operator pos:start="53:18" pos:end="53:18">(</operator><name pos:start="53:19" pos:end="53:27">uintptr_t</name><operator pos:start="53:28" pos:end="53:28">)</operator><name pos:start="53:29" pos:end="53:32">addr</name> <operator pos:start="53:34" pos:end="53:34">+</operator> <name pos:start="53:36" pos:end="53:71"><name pos:start="53:36" pos:end="53:39">env1</name><operator pos:start="53:40" pos:end="53:41">-&gt;</operator><name pos:start="53:42" pos:end="53:50">tlb_table</name><index pos:start="53:51" pos:end="53:59">[<expr pos:start="53:52" pos:end="53:58"><name pos:start="53:52" pos:end="53:58">mmu_idx</name></expr>]</index><index pos:start="53:60" pos:end="53:71">[<expr pos:start="53:61" pos:end="53:70"><name pos:start="53:61" pos:end="53:70">page_index</name></expr>]</index></name><operator pos:start="53:72" pos:end="53:72">.</operator><name pos:start="53:73" pos:end="53:78">addend</name><operator pos:start="53:79" pos:end="53:79">)</operator></expr>;</expr_stmt>

    <return pos:start="55:5" pos:end="55:45">return <expr pos:start="55:12" pos:end="55:44"><call pos:start="55:12" pos:end="55:44"><name pos:start="55:12" pos:end="55:41">qemu_ram_addr_from_host_nofail</name><argument_list pos:start="55:42" pos:end="55:44">(<argument pos:start="55:43" pos:end="55:43"><expr pos:start="55:43" pos:end="55:43"><name pos:start="55:43" pos:end="55:43">p</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
