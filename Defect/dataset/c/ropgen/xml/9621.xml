<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9621.c" pos:tabs="8"><function pos:start="1:1" pos:end="283:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">taihu_405ep_init</name><parameter_list pos:start="1:29" pos:end="11:51">(<parameter pos:start="1:30" pos:end="1:48"><decl pos:start="1:30" pos:end="1:48"><type pos:start="1:30" pos:end="1:48"><name pos:start="1:30" pos:end="1:39">ram_addr_t</name></type> <name pos:start="1:41" pos:end="1:48">ram_size</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:52"><decl pos:start="3:30" pos:end="3:52"><type pos:start="3:30" pos:end="3:52"><specifier pos:start="3:30" pos:end="3:34">const</specifier> <name pos:start="3:36" pos:end="3:39">char</name> <modifier pos:start="3:41" pos:end="3:41">*</modifier></type><name pos:start="3:42" pos:end="3:52">boot_device</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:56"><decl pos:start="5:30" pos:end="5:56"><type pos:start="5:30" pos:end="5:56"><specifier pos:start="5:30" pos:end="5:34">const</specifier> <name pos:start="5:36" pos:end="5:39">char</name> <modifier pos:start="5:41" pos:end="5:41">*</modifier></type><name pos:start="5:42" pos:end="5:56">kernel_filename</name></decl></parameter>,

                             <parameter pos:start="7:30" pos:end="7:55"><decl pos:start="7:30" pos:end="7:55"><type pos:start="7:30" pos:end="7:55"><specifier pos:start="7:30" pos:end="7:34">const</specifier> <name pos:start="7:36" pos:end="7:39">char</name> <modifier pos:start="7:41" pos:end="7:41">*</modifier></type><name pos:start="7:42" pos:end="7:55">kernel_cmdline</name></decl></parameter>,

                             <parameter pos:start="9:30" pos:end="9:56"><decl pos:start="9:30" pos:end="9:56"><type pos:start="9:30" pos:end="9:56"><specifier pos:start="9:30" pos:end="9:34">const</specifier> <name pos:start="9:36" pos:end="9:39">char</name> <modifier pos:start="9:41" pos:end="9:41">*</modifier></type><name pos:start="9:42" pos:end="9:56">initrd_filename</name></decl></parameter>,

                             <parameter pos:start="11:30" pos:end="11:50"><decl pos:start="11:30" pos:end="11:50"><type pos:start="11:30" pos:end="11:50"><specifier pos:start="11:30" pos:end="11:34">const</specifier> <name pos:start="11:36" pos:end="11:39">char</name> <modifier pos:start="11:41" pos:end="11:41">*</modifier></type><name pos:start="11:42" pos:end="11:50">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="283:1">{<block_content pos:start="15:5" pos:end="282:0">

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:18">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:15">CPUPPCState</name> <modifier pos:start="17:17" pos:end="17:17">*</modifier></type><name pos:start="17:18" pos:end="17:20">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:18"><decl pos:start="19:5" pos:end="19:17"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:12">qemu_irq</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:17">pic</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:27"><decl pos:start="21:5" pos:end="21:26"><type pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:14">ram_addr_t</name></type> <name pos:start="21:16" pos:end="21:26">bios_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:50"><decl pos:start="23:5" pos:end="23:35"><type pos:start="23:5" pos:end="23:22"><name pos:start="23:5" pos:end="23:22">target_phys_addr_t</name></type> <name pos:start="23:24" pos:end="23:35"><name pos:start="23:24" pos:end="23:32">ram_bases</name><index pos:start="23:33" pos:end="23:35">[<expr pos:start="23:34" pos:end="23:34"><literal type="number" pos:start="23:34" pos:end="23:34">2</literal></expr>]</index></name></decl>, <decl pos:start="23:38" pos:end="23:49"><type ref="prev" pos:start="23:5" pos:end="23:22"/><name pos:start="23:38" pos:end="23:49"><name pos:start="23:38" pos:end="23:46">ram_sizes</name><index pos:start="23:47" pos:end="23:49">[<expr pos:start="23:48" pos:end="23:48"><literal type="number" pos:start="23:48" pos:end="23:48">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:27"><decl pos:start="25:5" pos:end="25:26"><type pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:16">target_ulong</name></type> <name pos:start="25:18" pos:end="25:26">bios_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:68"><decl pos:start="27:5" pos:end="27:28"><type pos:start="27:5" pos:end="27:16"><name pos:start="27:5" pos:end="27:16">target_ulong</name></type> <name pos:start="27:18" pos:end="27:28">kernel_base</name></decl>, <decl pos:start="27:31" pos:end="27:41"><type ref="prev" pos:start="27:5" pos:end="27:16"/><name pos:start="27:31" pos:end="27:41">kernel_size</name></decl>, <decl pos:start="27:44" pos:end="27:54"><type ref="prev" pos:start="27:5" pos:end="27:16"/><name pos:start="27:44" pos:end="27:54">initrd_base</name></decl>, <decl pos:start="27:57" pos:end="27:67"><type ref="prev" pos:start="27:5" pos:end="27:16"/><name pos:start="27:57" pos:end="27:67">initrd_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:19"><decl pos:start="29:5" pos:end="29:18"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:18">linux_boot</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:27"><decl pos:start="31:5" pos:end="31:14"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:14">fl_idx</name></decl>, <decl pos:start="31:17" pos:end="31:26"><type ref="prev" pos:start="31:5" pos:end="31:7"/><name pos:start="31:17" pos:end="31:26">fl_sectors</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:21"><decl pos:start="33:5" pos:end="33:20"><type pos:start="33:5" pos:end="33:15"><name pos:start="33:5" pos:end="33:13">DriveInfo</name> <modifier pos:start="33:15" pos:end="33:15">*</modifier></type><name pos:start="33:16" pos:end="33:20">dinfo</name></decl>;</decl_stmt>



    <comment type="block" pos:start="37:5" pos:end="37:68">/* RAM is soldered to the board so the size cannot be changed */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:73"><expr pos:start="39:5" pos:end="39:72"><name pos:start="39:5" pos:end="39:16"><name pos:start="39:5" pos:end="39:13">ram_bases</name><index pos:start="39:14" pos:end="39:16">[<expr pos:start="39:15" pos:end="39:15"><literal type="number" pos:start="39:15" pos:end="39:15">0</literal></expr>]</index></name> <operator pos:start="39:18" pos:end="39:18">=</operator> <call pos:start="39:20" pos:end="39:72"><name pos:start="39:20" pos:end="39:33">qemu_ram_alloc</name><argument_list pos:start="39:34" pos:end="39:72">(<argument pos:start="39:35" pos:end="39:38"><expr pos:start="39:35" pos:end="39:38"><name pos:start="39:35" pos:end="39:38">NULL</name></expr></argument>, <argument pos:start="39:41" pos:end="39:59"><expr pos:start="39:41" pos:end="39:59"><literal type="string" pos:start="39:41" pos:end="39:59">"taihu_405ep.ram-0"</literal></expr></argument>, <argument pos:start="39:62" pos:end="39:71"><expr pos:start="39:62" pos:end="39:71"><literal type="number" pos:start="39:62" pos:end="39:71">0x04000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:30"><expr pos:start="41:5" pos:end="41:29"><name pos:start="41:5" pos:end="41:16"><name pos:start="41:5" pos:end="41:13">ram_sizes</name><index pos:start="41:14" pos:end="41:16">[<expr pos:start="41:15" pos:end="41:15"><literal type="number" pos:start="41:15" pos:end="41:15">0</literal></expr>]</index></name> <operator pos:start="41:18" pos:end="41:18">=</operator> <literal type="number" pos:start="41:20" pos:end="41:29">0x04000000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:73"><expr pos:start="43:5" pos:end="43:72"><name pos:start="43:5" pos:end="43:16"><name pos:start="43:5" pos:end="43:13">ram_bases</name><index pos:start="43:14" pos:end="43:16">[<expr pos:start="43:15" pos:end="43:15"><literal type="number" pos:start="43:15" pos:end="43:15">1</literal></expr>]</index></name> <operator pos:start="43:18" pos:end="43:18">=</operator> <call pos:start="43:20" pos:end="43:72"><name pos:start="43:20" pos:end="43:33">qemu_ram_alloc</name><argument_list pos:start="43:34" pos:end="43:72">(<argument pos:start="43:35" pos:end="43:38"><expr pos:start="43:35" pos:end="43:38"><name pos:start="43:35" pos:end="43:38">NULL</name></expr></argument>, <argument pos:start="43:41" pos:end="43:59"><expr pos:start="43:41" pos:end="43:59"><literal type="string" pos:start="43:41" pos:end="43:59">"taihu_405ep.ram-1"</literal></expr></argument>, <argument pos:start="43:62" pos:end="43:71"><expr pos:start="43:62" pos:end="43:71"><literal type="number" pos:start="43:62" pos:end="43:71">0x04000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:30"><expr pos:start="45:5" pos:end="45:29"><name pos:start="45:5" pos:end="45:16"><name pos:start="45:5" pos:end="45:13">ram_sizes</name><index pos:start="45:14" pos:end="45:16">[<expr pos:start="45:15" pos:end="45:15"><literal type="number" pos:start="45:15" pos:end="45:15">1</literal></expr>]</index></name> <operator pos:start="45:18" pos:end="45:18">=</operator> <literal type="number" pos:start="45:20" pos:end="45:29">0x04000000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="50:0"><expr pos:start="47:5" pos:end="47:25"><name pos:start="47:5" pos:end="47:12">ram_size</name> <operator pos:start="47:14" pos:end="47:14">=</operator> <literal type="number" pos:start="47:16" pos:end="47:25">0x08000000</literal></expr>;</expr_stmt>

<cpp:ifdef pos:start="49:1" pos:end="49:23">#<cpp:directive pos:start="49:2" pos:end="49:6">ifdef</cpp:directive> <name pos:start="49:8" pos:end="49:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

    <expr_stmt pos:start="51:5" pos:end="54:0"><expr pos:start="51:5" pos:end="51:42"><call pos:start="51:5" pos:end="51:42"><name pos:start="51:5" pos:end="51:10">printf</name><argument_list pos:start="51:11" pos:end="51:42">(<argument pos:start="51:12" pos:end="51:31"><expr pos:start="51:12" pos:end="51:31"><literal type="string" pos:start="51:12" pos:end="51:31">"%s: register cpu\n"</literal></expr></argument>, <argument pos:start="51:34" pos:end="51:41"><expr pos:start="51:34" pos:end="51:41"><name pos:start="51:34" pos:end="51:41">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="53:1" pos:end="53:6">#<cpp:directive pos:start="53:2" pos:end="53:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="55:5" pos:end="62:0"><expr pos:start="55:5" pos:end="57:56"><name pos:start="55:5" pos:end="55:7">env</name> <operator pos:start="55:9" pos:end="55:9">=</operator> <call pos:start="55:11" pos:end="57:56"><name pos:start="55:11" pos:end="55:23">ppc405ep_init</name><argument_list pos:start="55:24" pos:end="57:56">(<argument pos:start="55:25" pos:end="55:33"><expr pos:start="55:25" pos:end="55:33"><name pos:start="55:25" pos:end="55:33">ram_bases</name></expr></argument>, <argument pos:start="55:36" pos:end="55:44"><expr pos:start="55:36" pos:end="55:44"><name pos:start="55:36" pos:end="55:44">ram_sizes</name></expr></argument>, <argument pos:start="55:47" pos:end="55:54"><expr pos:start="55:47" pos:end="55:54"><literal type="number" pos:start="55:47" pos:end="55:54">33333333</literal></expr></argument>, <argument pos:start="55:57" pos:end="55:60"><expr pos:start="55:57" pos:end="55:60"><operator pos:start="55:57" pos:end="55:57">&amp;</operator><name pos:start="55:58" pos:end="55:60">pic</name></expr></argument>,

                        <argument pos:start="57:25" pos:end="57:55"><expr pos:start="57:25" pos:end="57:55"><ternary pos:start="57:25" pos:end="57:55"><condition pos:start="57:25" pos:end="57:49"><expr pos:start="57:25" pos:end="57:47"><name pos:start="57:25" pos:end="57:39">kernel_filename</name> <operator pos:start="57:41" pos:end="57:42">==</operator> <name pos:start="57:44" pos:end="57:47">NULL</name></expr> ?</condition><then pos:start="57:51" pos:end="57:51"> <expr pos:start="57:51" pos:end="57:51"><literal type="number" pos:start="57:51" pos:end="57:51">0</literal></expr> </then><else pos:start="57:53" pos:end="57:55">: <expr pos:start="57:55" pos:end="57:55"><literal type="number" pos:start="57:55" pos:end="57:55">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="59:5" pos:end="59:32">/* allocate and load BIOS */</comment>

<cpp:ifdef pos:start="61:1" pos:end="61:23">#<cpp:directive pos:start="61:2" pos:end="61:6">ifdef</cpp:directive> <name pos:start="61:8" pos:end="61:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

    <expr_stmt pos:start="63:5" pos:end="66:0"><expr pos:start="63:5" pos:end="63:43"><call pos:start="63:5" pos:end="63:43"><name pos:start="63:5" pos:end="63:10">printf</name><argument_list pos:start="63:11" pos:end="63:43">(<argument pos:start="63:12" pos:end="63:32"><expr pos:start="63:12" pos:end="63:32"><literal type="string" pos:start="63:12" pos:end="63:32">"%s: register BIOS\n"</literal></expr></argument>, <argument pos:start="63:35" pos:end="63:42"><expr pos:start="63:35" pos:end="63:42"><name pos:start="63:35" pos:end="63:42">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="65:1" pos:end="65:6">#<cpp:directive pos:start="65:2" pos:end="65:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="67:5" pos:end="70:0"><expr pos:start="67:5" pos:end="67:14"><name pos:start="67:5" pos:end="67:10">fl_idx</name> <operator pos:start="67:12" pos:end="67:12">=</operator> <literal type="number" pos:start="67:14" pos:end="67:14">0</literal></expr>;</expr_stmt>

<cpp:if pos:start="69:1" pos:end="69:27">#<cpp:directive pos:start="69:2" pos:end="69:3">if</cpp:directive> <expr pos:start="69:5" pos:end="69:27"><call pos:start="69:5" pos:end="69:27"><name pos:start="69:5" pos:end="69:11">defined</name><argument_list pos:start="69:12" pos:end="69:27">(<argument pos:start="69:13" pos:end="69:26"><expr pos:start="69:13" pos:end="69:26"><name pos:start="69:13" pos:end="69:26">USE_FLASH_BIOS</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="71:5" pos:end="71:44"><expr pos:start="71:5" pos:end="71:43"><name pos:start="71:5" pos:end="71:9">dinfo</name> <operator pos:start="71:11" pos:end="71:11">=</operator> <call pos:start="71:13" pos:end="71:43"><name pos:start="71:13" pos:end="71:21">drive_get</name><argument_list pos:start="71:22" pos:end="71:43">(<argument pos:start="71:23" pos:end="71:31"><expr pos:start="71:23" pos:end="71:31"><name pos:start="71:23" pos:end="71:31">IF_PFLASH</name></expr></argument>, <argument pos:start="71:34" pos:end="71:34"><expr pos:start="71:34" pos:end="71:34"><literal type="number" pos:start="71:34" pos:end="71:34">0</literal></expr></argument>, <argument pos:start="71:37" pos:end="71:42"><expr pos:start="71:37" pos:end="71:42"><name pos:start="71:37" pos:end="71:42">fl_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="153:5"><if pos:start="73:5" pos:end="107:5">if <condition pos:start="73:8" pos:end="73:14">(<expr pos:start="73:9" pos:end="73:13"><name pos:start="73:9" pos:end="73:13">dinfo</name></expr>)</condition> <block pos:start="73:16" pos:end="107:5">{<block_content pos:start="75:9" pos:end="105:17">

        <expr_stmt pos:start="75:9" pos:end="75:48"><expr pos:start="75:9" pos:end="75:47"><name pos:start="75:9" pos:end="75:17">bios_size</name> <operator pos:start="75:19" pos:end="75:19">=</operator> <call pos:start="75:21" pos:end="75:47"><name pos:start="75:21" pos:end="75:34">bdrv_getlength</name><argument_list pos:start="75:35" pos:end="75:47">(<argument pos:start="75:36" pos:end="75:46"><expr pos:start="75:36" pos:end="75:46"><name pos:start="75:36" pos:end="75:46"><name pos:start="75:36" pos:end="75:40">dinfo</name><operator pos:start="75:41" pos:end="75:42">-&gt;</operator><name pos:start="75:43" pos:end="75:46">bdrv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="77:9" pos:end="77:48">/* XXX: should check that size is 2MB */</comment>

        <comment type="line" pos:start="79:9" pos:end="79:46">//        bios_size = 2 * 1024 * 1024;</comment>

        <expr_stmt pos:start="81:9" pos:end="81:47"><expr pos:start="81:9" pos:end="81:46"><name pos:start="81:9" pos:end="81:18">fl_sectors</name> <operator pos:start="81:20" pos:end="81:20">=</operator> <operator pos:start="81:22" pos:end="81:22">(</operator><name pos:start="81:23" pos:end="81:31">bios_size</name> <operator pos:start="81:33" pos:end="81:33">+</operator> <literal type="number" pos:start="81:35" pos:end="81:39">65535</literal><operator pos:start="81:40" pos:end="81:40">)</operator> <operator pos:start="81:42" pos:end="81:43">&gt;&gt;</operator> <literal type="number" pos:start="81:45" pos:end="81:46">16</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="86:0"><expr pos:start="83:9" pos:end="83:73"><name pos:start="83:9" pos:end="83:19">bios_offset</name> <operator pos:start="83:21" pos:end="83:21">=</operator> <call pos:start="83:23" pos:end="83:73"><name pos:start="83:23" pos:end="83:36">qemu_ram_alloc</name><argument_list pos:start="83:37" pos:end="83:73">(<argument pos:start="83:38" pos:end="83:41"><expr pos:start="83:38" pos:end="83:41"><name pos:start="83:38" pos:end="83:41">NULL</name></expr></argument>, <argument pos:start="83:44" pos:end="83:61"><expr pos:start="83:44" pos:end="83:61"><literal type="string" pos:start="83:44" pos:end="83:61">"taihu_405ep.bios"</literal></expr></argument>, <argument pos:start="83:64" pos:end="83:72"><expr pos:start="83:64" pos:end="83:72"><name pos:start="83:64" pos:end="83:72">bios_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="85:1" pos:end="85:23">#<cpp:directive pos:start="85:2" pos:end="85:6">ifdef</cpp:directive> <name pos:start="85:8" pos:end="85:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

        <expr_stmt pos:start="87:9" pos:end="96:0"><expr pos:start="87:9" pos:end="93:61"><call pos:start="87:9" pos:end="93:61"><name pos:start="87:9" pos:end="87:14">printf</name><argument_list pos:start="87:15" pos:end="93:61">(<argument pos:start="87:16" pos:end="89:66"><expr pos:start="87:16" pos:end="89:66"><literal type="string" pos:start="87:16" pos:end="87:49">"Register parallel flash %d size "</literal> <name pos:start="87:51" pos:end="87:63">TARGET_FMT_lx</name>

               <literal type="string" pos:start="89:16" pos:end="89:39">" at offset %08lx addr "</literal> <name pos:start="89:41" pos:end="89:53">TARGET_FMT_lx</name> <literal type="string" pos:start="89:55" pos:end="89:66">" '%s' %d\n"</literal></expr></argument>,

               <argument pos:start="91:16" pos:end="91:21"><expr pos:start="91:16" pos:end="91:21"><name pos:start="91:16" pos:end="91:21">fl_idx</name></expr></argument>, <argument pos:start="91:24" pos:end="91:32"><expr pos:start="91:24" pos:end="91:32"><name pos:start="91:24" pos:end="91:32">bios_size</name></expr></argument>, <argument pos:start="91:35" pos:end="91:45"><expr pos:start="91:35" pos:end="91:45"><name pos:start="91:35" pos:end="91:45">bios_offset</name></expr></argument>, <argument pos:start="91:48" pos:end="91:57"><expr pos:start="91:48" pos:end="91:57"><operator pos:start="91:48" pos:end="91:48">-</operator><name pos:start="91:49" pos:end="91:57">bios_size</name></expr></argument>,

               <argument pos:start="93:16" pos:end="93:48"><expr pos:start="93:16" pos:end="93:48"><call pos:start="93:16" pos:end="93:48"><name pos:start="93:16" pos:end="93:35">bdrv_get_device_name</name><argument_list pos:start="93:36" pos:end="93:48">(<argument pos:start="93:37" pos:end="93:47"><expr pos:start="93:37" pos:end="93:47"><name pos:start="93:37" pos:end="93:47"><name pos:start="93:37" pos:end="93:41">dinfo</name><operator pos:start="93:42" pos:end="93:43">-&gt;</operator><name pos:start="93:44" pos:end="93:47">bdrv</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="93:51" pos:end="93:60"><expr pos:start="93:51" pos:end="93:60"><name pos:start="93:51" pos:end="93:60">fl_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="95:1" pos:end="95:6">#<cpp:directive pos:start="95:2" pos:end="95:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="97:9" pos:end="103:33"><expr pos:start="97:9" pos:end="103:32"><call pos:start="97:9" pos:end="103:32"><name pos:start="97:9" pos:end="97:29">pflash_cfi02_register</name><argument_list pos:start="97:30" pos:end="103:32">(<argument pos:start="97:31" pos:end="97:52"><expr pos:start="97:31" pos:end="97:52"><operator pos:start="97:31" pos:end="97:31">(</operator><name pos:start="97:32" pos:end="97:39">uint32_t</name><operator pos:start="97:40" pos:end="97:40">)</operator><operator pos:start="97:41" pos:end="97:41">(</operator><operator pos:start="97:42" pos:end="97:42">-</operator><name pos:start="97:43" pos:end="97:51">bios_size</name><operator pos:start="97:52" pos:end="97:52">)</operator></expr></argument>, <argument pos:start="97:55" pos:end="97:65"><expr pos:start="97:55" pos:end="97:65"><name pos:start="97:55" pos:end="97:65">bios_offset</name></expr></argument>,

                              <argument pos:start="99:31" pos:end="99:41"><expr pos:start="99:31" pos:end="99:41"><name pos:start="99:31" pos:end="99:41"><name pos:start="99:31" pos:end="99:35">dinfo</name><operator pos:start="99:36" pos:end="99:37">-&gt;</operator><name pos:start="99:38" pos:end="99:41">bdrv</name></name></expr></argument>, <argument pos:start="99:44" pos:end="99:48"><expr pos:start="99:44" pos:end="99:48"><literal type="number" pos:start="99:44" pos:end="99:48">65536</literal></expr></argument>, <argument pos:start="99:51" pos:end="99:60"><expr pos:start="99:51" pos:end="99:60"><name pos:start="99:51" pos:end="99:60">fl_sectors</name></expr></argument>, <argument pos:start="99:63" pos:end="99:63"><expr pos:start="99:63" pos:end="99:63"><literal type="number" pos:start="99:63" pos:end="99:63">1</literal></expr></argument>,

                              <argument pos:start="101:31" pos:end="101:31"><expr pos:start="101:31" pos:end="101:31"><literal type="number" pos:start="101:31" pos:end="101:31">4</literal></expr></argument>, <argument pos:start="101:34" pos:end="101:39"><expr pos:start="101:34" pos:end="101:39"><literal type="number" pos:start="101:34" pos:end="101:39">0x0001</literal></expr></argument>, <argument pos:start="101:42" pos:end="101:47"><expr pos:start="101:42" pos:end="101:47"><literal type="number" pos:start="101:42" pos:end="101:47">0x22DA</literal></expr></argument>, <argument pos:start="101:50" pos:end="101:55"><expr pos:start="101:50" pos:end="101:55"><literal type="number" pos:start="101:50" pos:end="101:55">0x0000</literal></expr></argument>, <argument pos:start="101:58" pos:end="101:63"><expr pos:start="101:58" pos:end="101:63"><literal type="number" pos:start="101:58" pos:end="101:63">0x0000</literal></expr></argument>, <argument pos:start="101:66" pos:end="101:70"><expr pos:start="101:66" pos:end="101:70"><literal type="number" pos:start="101:66" pos:end="101:70">0x555</literal></expr></argument>, <argument pos:start="101:73" pos:end="101:77"><expr pos:start="101:73" pos:end="101:77"><literal type="number" pos:start="101:73" pos:end="101:77">0x2AA</literal></expr></argument>,

                              <argument pos:start="103:31" pos:end="103:31"><expr pos:start="103:31" pos:end="103:31"><literal type="number" pos:start="103:31" pos:end="103:31">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:17"><expr pos:start="105:9" pos:end="105:16"><name pos:start="105:9" pos:end="105:14">fl_idx</name><operator pos:start="105:15" pos:end="105:16">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="107:7" pos:end="153:5">else

<cpp:endif pos:start="109:1" pos:end="109:6">#<cpp:directive pos:start="109:2" pos:end="109:6">endif</cpp:directive></cpp:endif>

    <block pos:start="111:5" pos:end="153:5">{<block_content pos:start="115:9" pos:end="151:74">

<cpp:ifdef pos:start="113:1" pos:end="113:23">#<cpp:directive pos:start="113:2" pos:end="113:6">ifdef</cpp:directive> <name pos:start="113:8" pos:end="113:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

        <expr_stmt pos:start="115:9" pos:end="118:0"><expr pos:start="115:9" pos:end="115:39"><call pos:start="115:9" pos:end="115:39"><name pos:start="115:9" pos:end="115:14">printf</name><argument_list pos:start="115:15" pos:end="115:39">(<argument pos:start="115:16" pos:end="115:38"><expr pos:start="115:16" pos:end="115:38"><literal type="string" pos:start="115:16" pos:end="115:38">"Load BIOS from file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="117:1" pos:end="117:6">#<cpp:directive pos:start="117:2" pos:end="117:6">endif</cpp:directive></cpp:endif>

        <if_stmt pos:start="119:9" pos:end="121:38"><if pos:start="119:9" pos:end="121:38">if <condition pos:start="119:12" pos:end="119:30">(<expr pos:start="119:13" pos:end="119:29"><name pos:start="119:13" pos:end="119:21">bios_name</name> <operator pos:start="119:23" pos:end="119:24">==</operator> <name pos:start="119:26" pos:end="119:29">NULL</name></expr>)</condition><block type="pseudo" pos:start="121:13" pos:end="121:38"><block_content pos:start="121:13" pos:end="121:38">

            <expr_stmt pos:start="121:13" pos:end="121:38"><expr pos:start="121:13" pos:end="121:37"><name pos:start="121:13" pos:end="121:21">bios_name</name> <operator pos:start="121:23" pos:end="121:23">=</operator> <name pos:start="121:25" pos:end="121:37">BIOS_FILENAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:74"><expr pos:start="123:9" pos:end="123:73"><name pos:start="123:9" pos:end="123:19">bios_offset</name> <operator pos:start="123:21" pos:end="123:21">=</operator> <call pos:start="123:23" pos:end="123:73"><name pos:start="123:23" pos:end="123:36">qemu_ram_alloc</name><argument_list pos:start="123:37" pos:end="123:73">(<argument pos:start="123:38" pos:end="123:41"><expr pos:start="123:38" pos:end="123:41"><name pos:start="123:38" pos:end="123:41">NULL</name></expr></argument>, <argument pos:start="123:44" pos:end="123:61"><expr pos:start="123:44" pos:end="123:61"><literal type="string" pos:start="123:44" pos:end="123:61">"taihu_405ep.bios"</literal></expr></argument>, <argument pos:start="123:64" pos:end="123:72"><expr pos:start="123:64" pos:end="123:72"><name pos:start="123:64" pos:end="123:72">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:66"><expr pos:start="125:9" pos:end="125:65"><name pos:start="125:9" pos:end="125:16">filename</name> <operator pos:start="125:18" pos:end="125:18">=</operator> <call pos:start="125:20" pos:end="125:65"><name pos:start="125:20" pos:end="125:33">qemu_find_file</name><argument_list pos:start="125:34" pos:end="125:65">(<argument pos:start="125:35" pos:end="125:53"><expr pos:start="125:35" pos:end="125:53"><name pos:start="125:35" pos:end="125:53">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="125:56" pos:end="125:64"><expr pos:start="125:56" pos:end="125:64"><name pos:start="125:56" pos:end="125:64">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="127:9" pos:end="135:9"><if pos:start="127:9" pos:end="131:9">if <condition pos:start="127:12" pos:end="127:21">(<expr pos:start="127:13" pos:end="127:20"><name pos:start="127:13" pos:end="127:20">filename</name></expr>)</condition> <block pos:start="127:23" pos:end="131:9">{<block_content pos:start="129:13" pos:end="129:76">

            <expr_stmt pos:start="129:13" pos:end="129:76"><expr pos:start="129:13" pos:end="129:75"><name pos:start="129:13" pos:end="129:21">bios_size</name> <operator pos:start="129:23" pos:end="129:23">=</operator> <call pos:start="129:25" pos:end="129:75"><name pos:start="129:25" pos:end="129:34">load_image</name><argument_list pos:start="129:35" pos:end="129:75">(<argument pos:start="129:36" pos:end="129:43"><expr pos:start="129:36" pos:end="129:43"><name pos:start="129:36" pos:end="129:43">filename</name></expr></argument>, <argument pos:start="129:46" pos:end="129:74"><expr pos:start="129:46" pos:end="129:74"><call pos:start="129:46" pos:end="129:74"><name pos:start="129:46" pos:end="129:61">qemu_get_ram_ptr</name><argument_list pos:start="129:62" pos:end="129:74">(<argument pos:start="129:63" pos:end="129:73"><expr pos:start="129:63" pos:end="129:73"><name pos:start="129:63" pos:end="129:73">bios_offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="131:11" pos:end="135:9">else <block pos:start="131:16" pos:end="135:9">{<block_content pos:start="133:13" pos:end="133:27">

            <expr_stmt pos:start="133:13" pos:end="133:27"><expr pos:start="133:13" pos:end="133:26"><name pos:start="133:13" pos:end="133:21">bios_size</name> <operator pos:start="133:23" pos:end="133:23">=</operator> <operator pos:start="133:25" pos:end="133:25">-</operator><literal type="number" pos:start="133:26" pos:end="133:26">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="137:9" pos:end="145:9"><if pos:start="137:9" pos:end="145:9">if <condition pos:start="137:12" pos:end="137:51">(<expr pos:start="137:13" pos:end="137:50"><name pos:start="137:13" pos:end="137:40"><name pos:start="137:13" pos:end="137:21">bios_size</name> <argument_list type="generic" pos:start="137:23" pos:end="137:40">&lt; <argument pos:start="137:25" pos:end="137:38"><expr pos:start="137:25" pos:end="137:38"><literal type="number" pos:start="137:25" pos:end="137:25">0</literal> <operator pos:start="137:27" pos:end="137:28">||</operator> <name pos:start="137:30" pos:end="137:38">bios_size</name></expr></argument> &gt;</argument_list></name> <name pos:start="137:42" pos:end="137:50">BIOS_SIZE</name></expr>)</condition> <block pos:start="137:53" pos:end="145:9">{<block_content pos:start="139:13" pos:end="143:20">

            <expr_stmt pos:start="139:13" pos:end="141:31"><expr pos:start="139:13" pos:end="141:30"><call pos:start="139:13" pos:end="141:30"><name pos:start="139:13" pos:end="139:19">fprintf</name><argument_list pos:start="139:20" pos:end="141:30">(<argument pos:start="139:21" pos:end="139:26"><expr pos:start="139:21" pos:end="139:26"><name pos:start="139:21" pos:end="139:26">stderr</name></expr></argument>, <argument pos:start="139:29" pos:end="139:70"><expr pos:start="139:29" pos:end="139:70"><literal type="string" pos:start="139:29" pos:end="139:70">"qemu: could not load PowerPC bios '%s'\n"</literal></expr></argument>,

                    <argument pos:start="141:21" pos:end="141:29"><expr pos:start="141:21" pos:end="141:29"><name pos:start="141:21" pos:end="141:29">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:20"><expr pos:start="143:13" pos:end="143:19"><call pos:start="143:13" pos:end="143:19"><name pos:start="143:13" pos:end="143:16">exit</name><argument_list pos:start="143:17" pos:end="143:19">(<argument pos:start="143:18" pos:end="143:18"><expr pos:start="143:18" pos:end="143:18"><literal type="number" pos:start="143:18" pos:end="143:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:49"><expr pos:start="147:9" pos:end="147:48"><name pos:start="147:9" pos:end="147:17">bios_size</name> <operator pos:start="147:19" pos:end="147:19">=</operator> <operator pos:start="147:21" pos:end="147:21">(</operator><name pos:start="147:22" pos:end="147:30">bios_size</name> <operator pos:start="147:32" pos:end="147:32">+</operator> <literal type="number" pos:start="147:34" pos:end="147:38">0xfff</literal><operator pos:start="147:39" pos:end="147:39">)</operator> <operator pos:start="147:41" pos:end="147:41">&amp;</operator> <operator pos:start="147:43" pos:end="147:43">~</operator><literal type="number" pos:start="147:44" pos:end="147:48">0xfff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="151:74"><expr pos:start="149:9" pos:end="151:73"><call pos:start="149:9" pos:end="151:73"><name pos:start="149:9" pos:end="149:36">cpu_register_physical_memory</name><argument_list pos:start="149:37" pos:end="151:73">(<argument pos:start="149:38" pos:end="149:59"><expr pos:start="149:38" pos:end="149:59"><operator pos:start="149:38" pos:end="149:38">(</operator><name pos:start="149:39" pos:end="149:46">uint32_t</name><operator pos:start="149:47" pos:end="149:47">)</operator><operator pos:start="149:48" pos:end="149:48">(</operator><operator pos:start="149:49" pos:end="149:49">-</operator><name pos:start="149:50" pos:end="149:58">bios_size</name><operator pos:start="149:59" pos:end="149:59">)</operator></expr></argument>,

                                     <argument pos:start="151:38" pos:end="151:46"><expr pos:start="151:38" pos:end="151:46"><name pos:start="151:38" pos:end="151:46">bios_size</name></expr></argument>, <argument pos:start="151:49" pos:end="151:72"><expr pos:start="151:49" pos:end="151:72"><name pos:start="151:49" pos:end="151:59">bios_offset</name> <operator pos:start="151:61" pos:end="151:61">|</operator> <name pos:start="151:63" pos:end="151:72">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <comment type="block" pos:start="155:5" pos:end="155:30">/* Register Linux flash */</comment>

    <expr_stmt pos:start="157:5" pos:end="157:44"><expr pos:start="157:5" pos:end="157:43"><name pos:start="157:5" pos:end="157:9">dinfo</name> <operator pos:start="157:11" pos:end="157:11">=</operator> <call pos:start="157:13" pos:end="157:43"><name pos:start="157:13" pos:end="157:21">drive_get</name><argument_list pos:start="157:22" pos:end="157:43">(<argument pos:start="157:23" pos:end="157:31"><expr pos:start="157:23" pos:end="157:31"><name pos:start="157:23" pos:end="157:31">IF_PFLASH</name></expr></argument>, <argument pos:start="157:34" pos:end="157:34"><expr pos:start="157:34" pos:end="157:34"><literal type="number" pos:start="157:34" pos:end="157:34">0</literal></expr></argument>, <argument pos:start="157:37" pos:end="157:42"><expr pos:start="157:37" pos:end="157:42"><name pos:start="157:37" pos:end="157:42">fl_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="159:5" pos:end="198:0"><if pos:start="159:5" pos:end="198:0">if <condition pos:start="159:8" pos:end="159:14">(<expr pos:start="159:9" pos:end="159:13"><name pos:start="159:9" pos:end="159:13">dinfo</name></expr>)</condition> <block pos:start="159:16" pos:end="198:0">{<block_content pos:start="161:9" pos:end="191:17">

        <expr_stmt pos:start="161:9" pos:end="161:48"><expr pos:start="161:9" pos:end="161:47"><name pos:start="161:9" pos:end="161:17">bios_size</name> <operator pos:start="161:19" pos:end="161:19">=</operator> <call pos:start="161:21" pos:end="161:47"><name pos:start="161:21" pos:end="161:34">bdrv_getlength</name><argument_list pos:start="161:35" pos:end="161:47">(<argument pos:start="161:36" pos:end="161:46"><expr pos:start="161:36" pos:end="161:46"><name pos:start="161:36" pos:end="161:46"><name pos:start="161:36" pos:end="161:40">dinfo</name><operator pos:start="161:41" pos:end="161:42">-&gt;</operator><name pos:start="161:43" pos:end="161:46">bdrv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="163:9" pos:end="163:49">/* XXX: should check that size is 32MB */</comment>

        <expr_stmt pos:start="165:9" pos:end="165:37"><expr pos:start="165:9" pos:end="165:36"><name pos:start="165:9" pos:end="165:17">bios_size</name> <operator pos:start="165:19" pos:end="165:19">=</operator> <literal type="number" pos:start="165:21" pos:end="165:22">32</literal> <operator pos:start="165:24" pos:end="165:24">*</operator> <literal type="number" pos:start="165:26" pos:end="165:29">1024</literal> <operator pos:start="165:31" pos:end="165:31">*</operator> <literal type="number" pos:start="165:33" pos:end="165:36">1024</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="167:9" pos:end="170:0"><expr pos:start="167:9" pos:end="167:46"><name pos:start="167:9" pos:end="167:18">fl_sectors</name> <operator pos:start="167:20" pos:end="167:20">=</operator> <operator pos:start="167:22" pos:end="167:22">(</operator><name pos:start="167:23" pos:end="167:31">bios_size</name> <operator pos:start="167:33" pos:end="167:33">+</operator> <literal type="number" pos:start="167:35" pos:end="167:39">65535</literal><operator pos:start="167:40" pos:end="167:40">)</operator> <operator pos:start="167:42" pos:end="167:43">&gt;&gt;</operator> <literal type="number" pos:start="167:45" pos:end="167:46">16</literal></expr>;</expr_stmt>

<cpp:ifdef pos:start="169:1" pos:end="169:23">#<cpp:directive pos:start="169:2" pos:end="169:6">ifdef</cpp:directive> <name pos:start="169:8" pos:end="169:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

        <expr_stmt pos:start="171:9" pos:end="180:0"><expr pos:start="171:9" pos:end="177:49"><call pos:start="171:9" pos:end="177:49"><name pos:start="171:9" pos:end="171:14">printf</name><argument_list pos:start="171:15" pos:end="177:49">(<argument pos:start="171:16" pos:end="173:64"><expr pos:start="171:16" pos:end="173:64"><literal type="string" pos:start="171:16" pos:end="171:49">"Register parallel flash %d size "</literal> <name pos:start="171:51" pos:end="171:63">TARGET_FMT_lx</name>

               <literal type="string" pos:start="173:16" pos:end="173:40">" at offset %08lx  addr "</literal> <name pos:start="173:42" pos:end="173:54">TARGET_FMT_lx</name> <literal type="string" pos:start="173:56" pos:end="173:64">" '%s'\n"</literal></expr></argument>,

               <argument pos:start="175:16" pos:end="175:21"><expr pos:start="175:16" pos:end="175:21"><name pos:start="175:16" pos:end="175:21">fl_idx</name></expr></argument>, <argument pos:start="175:24" pos:end="175:32"><expr pos:start="175:24" pos:end="175:32"><name pos:start="175:24" pos:end="175:32">bios_size</name></expr></argument>, <argument pos:start="175:35" pos:end="175:45"><expr pos:start="175:35" pos:end="175:45"><name pos:start="175:35" pos:end="175:45">bios_offset</name></expr></argument>, <argument pos:start="175:48" pos:end="175:71"><expr pos:start="175:48" pos:end="175:71"><operator pos:start="175:48" pos:end="175:48">(</operator><name pos:start="175:49" pos:end="175:60">target_ulong</name><operator pos:start="175:61" pos:end="175:61">)</operator><literal type="number" pos:start="175:62" pos:end="175:71">0xfc000000</literal></expr></argument>,

               <argument pos:start="177:16" pos:end="177:48"><expr pos:start="177:16" pos:end="177:48"><call pos:start="177:16" pos:end="177:48"><name pos:start="177:16" pos:end="177:35">bdrv_get_device_name</name><argument_list pos:start="177:36" pos:end="177:48">(<argument pos:start="177:37" pos:end="177:47"><expr pos:start="177:37" pos:end="177:47"><name pos:start="177:37" pos:end="177:47"><name pos:start="177:37" pos:end="177:41">dinfo</name><operator pos:start="177:42" pos:end="177:43">-&gt;</operator><name pos:start="177:44" pos:end="177:47">bdrv</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="179:1" pos:end="179:6">#<cpp:directive pos:start="179:2" pos:end="179:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="181:9" pos:end="181:75"><expr pos:start="181:9" pos:end="181:74"><name pos:start="181:9" pos:end="181:19">bios_offset</name> <operator pos:start="181:21" pos:end="181:21">=</operator> <call pos:start="181:23" pos:end="181:74"><name pos:start="181:23" pos:end="181:36">qemu_ram_alloc</name><argument_list pos:start="181:37" pos:end="181:74">(<argument pos:start="181:38" pos:end="181:41"><expr pos:start="181:38" pos:end="181:41"><name pos:start="181:38" pos:end="181:41">NULL</name></expr></argument>, <argument pos:start="181:44" pos:end="181:62"><expr pos:start="181:44" pos:end="181:62"><literal type="string" pos:start="181:44" pos:end="181:62">"taihu_405ep.flash"</literal></expr></argument>, <argument pos:start="181:65" pos:end="181:73"><expr pos:start="181:65" pos:end="181:73"><name pos:start="181:65" pos:end="181:73">bios_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="183:9" pos:end="189:33"><expr pos:start="183:9" pos:end="189:32"><call pos:start="183:9" pos:end="189:32"><name pos:start="183:9" pos:end="183:29">pflash_cfi02_register</name><argument_list pos:start="183:30" pos:end="189:32">(<argument pos:start="183:31" pos:end="183:40"><expr pos:start="183:31" pos:end="183:40"><literal type="number" pos:start="183:31" pos:end="183:40">0xfc000000</literal></expr></argument>, <argument pos:start="183:43" pos:end="183:53"><expr pos:start="183:43" pos:end="183:53"><name pos:start="183:43" pos:end="183:53">bios_offset</name></expr></argument>,

                              <argument pos:start="185:31" pos:end="185:41"><expr pos:start="185:31" pos:end="185:41"><name pos:start="185:31" pos:end="185:41"><name pos:start="185:31" pos:end="185:35">dinfo</name><operator pos:start="185:36" pos:end="185:37">-&gt;</operator><name pos:start="185:38" pos:end="185:41">bdrv</name></name></expr></argument>, <argument pos:start="185:44" pos:end="185:48"><expr pos:start="185:44" pos:end="185:48"><literal type="number" pos:start="185:44" pos:end="185:48">65536</literal></expr></argument>, <argument pos:start="185:51" pos:end="185:60"><expr pos:start="185:51" pos:end="185:60"><name pos:start="185:51" pos:end="185:60">fl_sectors</name></expr></argument>, <argument pos:start="185:63" pos:end="185:63"><expr pos:start="185:63" pos:end="185:63"><literal type="number" pos:start="185:63" pos:end="185:63">1</literal></expr></argument>,

                              <argument pos:start="187:31" pos:end="187:31"><expr pos:start="187:31" pos:end="187:31"><literal type="number" pos:start="187:31" pos:end="187:31">4</literal></expr></argument>, <argument pos:start="187:34" pos:end="187:39"><expr pos:start="187:34" pos:end="187:39"><literal type="number" pos:start="187:34" pos:end="187:39">0x0001</literal></expr></argument>, <argument pos:start="187:42" pos:end="187:47"><expr pos:start="187:42" pos:end="187:47"><literal type="number" pos:start="187:42" pos:end="187:47">0x22DA</literal></expr></argument>, <argument pos:start="187:50" pos:end="187:55"><expr pos:start="187:50" pos:end="187:55"><literal type="number" pos:start="187:50" pos:end="187:55">0x0000</literal></expr></argument>, <argument pos:start="187:58" pos:end="187:63"><expr pos:start="187:58" pos:end="187:63"><literal type="number" pos:start="187:58" pos:end="187:63">0x0000</literal></expr></argument>, <argument pos:start="187:66" pos:end="187:70"><expr pos:start="187:66" pos:end="187:70"><literal type="number" pos:start="187:66" pos:end="187:70">0x555</literal></expr></argument>, <argument pos:start="187:73" pos:end="187:77"><expr pos:start="187:73" pos:end="187:77"><literal type="number" pos:start="187:73" pos:end="187:77">0x2AA</literal></expr></argument>,

                              <argument pos:start="189:31" pos:end="189:31"><expr pos:start="189:31" pos:end="189:31"><literal type="number" pos:start="189:31" pos:end="189:31">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="191:9" pos:end="191:17"><expr pos:start="191:9" pos:end="191:16"><name pos:start="191:9" pos:end="191:14">fl_idx</name><operator pos:start="191:15" pos:end="191:16">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="195:5" pos:end="195:37">/* Register CLPD &amp; LCD display */</comment>

<cpp:ifdef pos:start="197:1" pos:end="197:23">#<cpp:directive pos:start="197:2" pos:end="197:6">ifdef</cpp:directive> <name pos:start="197:8" pos:end="197:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

    <expr_stmt pos:start="199:5" pos:end="202:0"><expr pos:start="199:5" pos:end="199:43"><call pos:start="199:5" pos:end="199:43"><name pos:start="199:5" pos:end="199:10">printf</name><argument_list pos:start="199:11" pos:end="199:43">(<argument pos:start="199:12" pos:end="199:32"><expr pos:start="199:12" pos:end="199:32"><literal type="string" pos:start="199:12" pos:end="199:32">"%s: register CPLD\n"</literal></expr></argument>, <argument pos:start="199:35" pos:end="199:42"><expr pos:start="199:35" pos:end="199:42"><name pos:start="199:35" pos:end="199:42">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="201:1" pos:end="201:6">#<cpp:directive pos:start="201:2" pos:end="201:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="203:5" pos:end="203:32"><expr pos:start="203:5" pos:end="203:31"><call pos:start="203:5" pos:end="203:31"><name pos:start="203:5" pos:end="203:19">taihu_cpld_init</name><argument_list pos:start="203:20" pos:end="203:31">(<argument pos:start="203:21" pos:end="203:30"><expr pos:start="203:21" pos:end="203:30"><literal type="number" pos:start="203:21" pos:end="203:30">0x50100000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="205:5" pos:end="205:21">/* Load kernel */</comment>

    <expr_stmt pos:start="207:5" pos:end="207:43"><expr pos:start="207:5" pos:end="207:42"><name pos:start="207:5" pos:end="207:14">linux_boot</name> <operator pos:start="207:16" pos:end="207:16">=</operator> <operator pos:start="207:18" pos:end="207:18">(</operator><name pos:start="207:19" pos:end="207:33">kernel_filename</name> <operator pos:start="207:35" pos:end="207:36">!=</operator> <name pos:start="207:38" pos:end="207:41">NULL</name><operator pos:start="207:42" pos:end="207:42">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="209:5" pos:end="278:0"><if pos:start="209:5" pos:end="265:5">if <condition pos:start="209:8" pos:end="209:19">(<expr pos:start="209:9" pos:end="209:18"><name pos:start="209:9" pos:end="209:18">linux_boot</name></expr>)</condition> <block pos:start="209:21" pos:end="265:5">{<block_content pos:start="213:9" pos:end="263:9">

<cpp:ifdef pos:start="211:1" pos:end="211:23">#<cpp:directive pos:start="211:2" pos:end="211:6">ifdef</cpp:directive> <name pos:start="211:8" pos:end="211:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

        <expr_stmt pos:start="213:9" pos:end="216:0"><expr pos:start="213:9" pos:end="213:45"><call pos:start="213:9" pos:end="213:45"><name pos:start="213:9" pos:end="213:14">printf</name><argument_list pos:start="213:15" pos:end="213:45">(<argument pos:start="213:16" pos:end="213:34"><expr pos:start="213:16" pos:end="213:34"><literal type="string" pos:start="213:16" pos:end="213:34">"%s: load kernel\n"</literal></expr></argument>, <argument pos:start="213:37" pos:end="213:44"><expr pos:start="213:37" pos:end="213:44"><name pos:start="213:37" pos:end="213:44">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="215:1" pos:end="215:6">#<cpp:directive pos:start="215:2" pos:end="215:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="217:9" pos:end="217:39"><expr pos:start="217:9" pos:end="217:38"><name pos:start="217:9" pos:end="217:19">kernel_base</name> <operator pos:start="217:21" pos:end="217:21">=</operator> <name pos:start="217:23" pos:end="217:38">KERNEL_LOAD_ADDR</name></expr>;</expr_stmt>

        <comment type="block" pos:start="219:9" pos:end="219:40">/* now we can load the kernel */</comment>

        <expr_stmt pos:start="221:9" pos:end="223:66"><expr pos:start="221:9" pos:end="223:65"><name pos:start="221:9" pos:end="221:19">kernel_size</name> <operator pos:start="221:21" pos:end="221:21">=</operator> <call pos:start="221:23" pos:end="223:65"><name pos:start="221:23" pos:end="221:41">load_image_targphys</name><argument_list pos:start="221:42" pos:end="223:65">(<argument pos:start="221:43" pos:end="221:57"><expr pos:start="221:43" pos:end="221:57"><name pos:start="221:43" pos:end="221:57">kernel_filename</name></expr></argument>, <argument pos:start="221:60" pos:end="221:70"><expr pos:start="221:60" pos:end="221:70"><name pos:start="221:60" pos:end="221:70">kernel_base</name></expr></argument>,

                                          <argument pos:start="223:43" pos:end="223:64"><expr pos:start="223:43" pos:end="223:64"><name pos:start="223:43" pos:end="223:50">ram_size</name> <operator pos:start="223:52" pos:end="223:52">-</operator> <name pos:start="223:54" pos:end="223:64">kernel_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="225:9" pos:end="233:9"><if pos:start="225:9" pos:end="233:9">if <condition pos:start="225:12" pos:end="225:28">(<expr pos:start="225:13" pos:end="225:27"><name pos:start="225:13" pos:end="225:23">kernel_size</name> <operator pos:start="225:25" pos:end="225:25">&lt;</operator> <literal type="number" pos:start="225:27" pos:end="225:27">0</literal></expr>)</condition> <block pos:start="225:30" pos:end="233:9">{<block_content pos:start="227:13" pos:end="231:20">

            <expr_stmt pos:start="227:13" pos:end="229:37"><expr pos:start="227:13" pos:end="229:36"><call pos:start="227:13" pos:end="229:36"><name pos:start="227:13" pos:end="227:19">fprintf</name><argument_list pos:start="227:20" pos:end="229:36">(<argument pos:start="227:21" pos:end="227:26"><expr pos:start="227:21" pos:end="227:26"><name pos:start="227:21" pos:end="227:26">stderr</name></expr></argument>, <argument pos:start="227:29" pos:end="227:64"><expr pos:start="227:29" pos:end="227:64"><literal type="string" pos:start="227:29" pos:end="227:64">"qemu: could not load kernel '%s'\n"</literal></expr></argument>,

                    <argument pos:start="229:21" pos:end="229:35"><expr pos:start="229:21" pos:end="229:35"><name pos:start="229:21" pos:end="229:35">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="231:13" pos:end="231:20"><expr pos:start="231:13" pos:end="231:19"><call pos:start="231:13" pos:end="231:19"><name pos:start="231:13" pos:end="231:16">exit</name><argument_list pos:start="231:17" pos:end="231:19">(<argument pos:start="231:18" pos:end="231:18"><expr pos:start="231:18" pos:end="231:18"><literal type="number" pos:start="231:18" pos:end="231:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="235:9" pos:end="235:25">/* load initrd */</comment>

        <if_stmt pos:start="237:9" pos:end="263:9"><if pos:start="237:9" pos:end="257:9">if <condition pos:start="237:12" pos:end="237:28">(<expr pos:start="237:13" pos:end="237:27"><name pos:start="237:13" pos:end="237:27">initrd_filename</name></expr>)</condition> <block pos:start="237:30" pos:end="257:9">{<block_content pos:start="239:13" pos:end="255:13">

            <expr_stmt pos:start="239:13" pos:end="239:43"><expr pos:start="239:13" pos:end="239:42"><name pos:start="239:13" pos:end="239:23">initrd_base</name> <operator pos:start="239:25" pos:end="239:25">=</operator> <name pos:start="239:27" pos:end="239:42">INITRD_LOAD_ADDR</name></expr>;</expr_stmt>

            <expr_stmt pos:start="241:13" pos:end="243:70"><expr pos:start="241:13" pos:end="243:69"><name pos:start="241:13" pos:end="241:23">initrd_size</name> <operator pos:start="241:25" pos:end="241:25">=</operator> <call pos:start="241:27" pos:end="243:69"><name pos:start="241:27" pos:end="241:45">load_image_targphys</name><argument_list pos:start="241:46" pos:end="243:69">(<argument pos:start="241:47" pos:end="241:61"><expr pos:start="241:47" pos:end="241:61"><name pos:start="241:47" pos:end="241:61">initrd_filename</name></expr></argument>, <argument pos:start="241:64" pos:end="241:74"><expr pos:start="241:64" pos:end="241:74"><name pos:start="241:64" pos:end="241:74">initrd_base</name></expr></argument>,

                                              <argument pos:start="243:47" pos:end="243:68"><expr pos:start="243:47" pos:end="243:68"><name pos:start="243:47" pos:end="243:54">ram_size</name> <operator pos:start="243:56" pos:end="243:56">-</operator> <name pos:start="243:58" pos:end="243:68">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="245:13" pos:end="255:13"><if pos:start="245:13" pos:end="255:13">if <condition pos:start="245:16" pos:end="245:32">(<expr pos:start="245:17" pos:end="245:31"><name pos:start="245:17" pos:end="245:27">initrd_size</name> <operator pos:start="245:29" pos:end="245:29">&lt;</operator> <literal type="number" pos:start="245:31" pos:end="245:31">0</literal></expr>)</condition> <block pos:start="245:34" pos:end="255:13">{<block_content pos:start="247:17" pos:end="253:24">

                <expr_stmt pos:start="247:17" pos:end="251:41"><expr pos:start="247:17" pos:end="251:40"><call pos:start="247:17" pos:end="251:40"><name pos:start="247:17" pos:end="247:23">fprintf</name><argument_list pos:start="247:24" pos:end="251:40">(<argument pos:start="247:25" pos:end="247:30"><expr pos:start="247:25" pos:end="247:30"><name pos:start="247:25" pos:end="247:30">stderr</name></expr></argument>,

                        <argument pos:start="249:25" pos:end="249:70"><expr pos:start="249:25" pos:end="249:70"><literal type="string" pos:start="249:25" pos:end="249:70">"qemu: could not load initial ram disk '%s'\n"</literal></expr></argument>,

                        <argument pos:start="251:25" pos:end="251:39"><expr pos:start="251:25" pos:end="251:39"><name pos:start="251:25" pos:end="251:39">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="253:17" pos:end="253:24"><expr pos:start="253:17" pos:end="253:23"><call pos:start="253:17" pos:end="253:23"><name pos:start="253:17" pos:end="253:20">exit</name><argument_list pos:start="253:21" pos:end="253:23">(<argument pos:start="253:22" pos:end="253:22"><expr pos:start="253:22" pos:end="253:22"><literal type="number" pos:start="253:22" pos:end="253:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="257:11" pos:end="263:9">else <block pos:start="257:16" pos:end="263:9">{<block_content pos:start="259:13" pos:end="261:28">

            <expr_stmt pos:start="259:13" pos:end="259:28"><expr pos:start="259:13" pos:end="259:27"><name pos:start="259:13" pos:end="259:23">initrd_base</name> <operator pos:start="259:25" pos:end="259:25">=</operator> <literal type="number" pos:start="259:27" pos:end="259:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="261:13" pos:end="261:28"><expr pos:start="261:13" pos:end="261:27"><name pos:start="261:13" pos:end="261:23">initrd_size</name> <operator pos:start="261:25" pos:end="261:25">=</operator> <literal type="number" pos:start="261:27" pos:end="261:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="265:7" pos:end="278:0">else <block pos:start="265:12" pos:end="278:0">{<block_content pos:start="267:9" pos:end="273:24">

        <expr_stmt pos:start="267:9" pos:end="267:24"><expr pos:start="267:9" pos:end="267:23"><name pos:start="267:9" pos:end="267:19">kernel_base</name> <operator pos:start="267:21" pos:end="267:21">=</operator> <literal type="number" pos:start="267:23" pos:end="267:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="269:9" pos:end="269:24"><expr pos:start="269:9" pos:end="269:23"><name pos:start="269:9" pos:end="269:19">kernel_size</name> <operator pos:start="269:21" pos:end="269:21">=</operator> <literal type="number" pos:start="269:23" pos:end="269:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="271:9" pos:end="271:24"><expr pos:start="271:9" pos:end="271:23"><name pos:start="271:9" pos:end="271:19">initrd_base</name> <operator pos:start="271:21" pos:end="271:21">=</operator> <literal type="number" pos:start="271:23" pos:end="271:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="273:9" pos:end="273:24"><expr pos:start="273:9" pos:end="273:23"><name pos:start="273:9" pos:end="273:19">initrd_size</name> <operator pos:start="273:21" pos:end="273:21">=</operator> <literal type="number" pos:start="273:23" pos:end="273:23">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

<cpp:ifdef pos:start="277:1" pos:end="277:23">#<cpp:directive pos:start="277:2" pos:end="277:6">ifdef</cpp:directive> <name pos:start="277:8" pos:end="277:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

    <expr_stmt pos:start="279:5" pos:end="282:0"><expr pos:start="279:5" pos:end="279:34"><call pos:start="279:5" pos:end="279:34"><name pos:start="279:5" pos:end="279:10">printf</name><argument_list pos:start="279:11" pos:end="279:34">(<argument pos:start="279:12" pos:end="279:23"><expr pos:start="279:12" pos:end="279:23"><literal type="string" pos:start="279:12" pos:end="279:23">"%s: Done\n"</literal></expr></argument>, <argument pos:start="279:26" pos:end="279:33"><expr pos:start="279:26" pos:end="279:33"><name pos:start="279:26" pos:end="279:33">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="281:1" pos:end="281:6">#<cpp:directive pos:start="281:2" pos:end="281:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
