<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24317.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:14">bdrv_pread</name><parameter_list pos:start="1:15" pos:end="1:74">(<parameter pos:start="1:16" pos:end="1:35"><decl pos:start="1:16" pos:end="1:35"><type pos:start="1:16" pos:end="1:35"><name pos:start="1:16" pos:end="1:31">BlockDriverState</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:35">bs</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:51"><decl pos:start="1:38" pos:end="1:51"><type pos:start="1:38" pos:end="1:51"><name pos:start="1:38" pos:end="1:44">int64_t</name></type> <name pos:start="1:46" pos:end="1:51">offset</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:62"><decl pos:start="1:54" pos:end="1:62"><type pos:start="1:54" pos:end="1:62"><name pos:start="1:54" pos:end="1:57">void</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:62">buf</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:73"><decl pos:start="1:65" pos:end="1:73"><type pos:start="1:65" pos:end="1:73"><name pos:start="1:65" pos:end="1:67">int</name></type> <name pos:start="1:69" pos:end="1:73">bytes</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="41:1">{<block_content pos:start="5:5" pos:end="39:17">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:16">QEMUIOVector</name></type> <name pos:start="5:18" pos:end="5:21">qiov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="13:6"><decl pos:start="7:5" pos:end="13:5"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:16">iovec</name></name></type> <name pos:start="7:18" pos:end="7:20">iov</name> <init pos:start="7:22" pos:end="13:5">= <expr pos:start="7:24" pos:end="13:5"><block pos:start="7:24" pos:end="13:5">{

        <expr pos:start="9:9" pos:end="9:31"><operator pos:start="9:9" pos:end="9:9">.</operator><name pos:start="9:10" pos:end="9:17">iov_base</name> <operator pos:start="9:19" pos:end="9:19">=</operator> <operator pos:start="9:21" pos:end="9:21">(</operator><name pos:start="9:22" pos:end="9:25">void</name> <operator pos:start="9:27" pos:end="9:27">*</operator><operator pos:start="9:28" pos:end="9:28">)</operator><name pos:start="9:29" pos:end="9:31">buf</name></expr>,

        <expr pos:start="11:9" pos:end="11:24"><operator pos:start="11:9" pos:end="11:9">.</operator><name pos:start="11:10" pos:end="11:16">iov_len</name> <operator pos:start="11:18" pos:end="11:18">=</operator> <name pos:start="11:20" pos:end="11:24">bytes</name></expr>,

    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:18">(<expr pos:start="19:9" pos:end="19:17"><name pos:start="19:9" pos:end="19:13">bytes</name> <operator pos:start="19:15" pos:end="19:15">&lt;</operator> <literal type="number" pos:start="19:17" pos:end="19:17">0</literal></expr>)</condition> <block pos:start="19:20" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:23">

        <return pos:start="21:9" pos:end="21:23">return <expr pos:start="21:16" pos:end="21:22"><operator pos:start="21:16" pos:end="21:16">-</operator><name pos:start="21:17" pos:end="21:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:45"><expr pos:start="27:5" pos:end="27:44"><call pos:start="27:5" pos:end="27:44"><name pos:start="27:5" pos:end="27:28">qemu_iovec_init_external</name><argument_list pos:start="27:29" pos:end="27:44">(<argument pos:start="27:30" pos:end="27:34"><expr pos:start="27:30" pos:end="27:34"><operator pos:start="27:30" pos:end="27:30">&amp;</operator><name pos:start="27:31" pos:end="27:34">qiov</name></expr></argument>, <argument pos:start="27:37" pos:end="27:40"><expr pos:start="27:37" pos:end="27:40"><operator pos:start="27:37" pos:end="27:37">&amp;</operator><name pos:start="27:38" pos:end="27:40">iov</name></expr></argument>, <argument pos:start="27:43" pos:end="27:43"><expr pos:start="27:43" pos:end="27:43"><literal type="number" pos:start="27:43" pos:end="27:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:52"><expr pos:start="29:5" pos:end="29:51"><name pos:start="29:5" pos:end="29:7">ret</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:51"><name pos:start="29:11" pos:end="29:22">bdrv_prwv_co</name><argument_list pos:start="29:23" pos:end="29:51">(<argument pos:start="29:24" pos:end="29:25"><expr pos:start="29:24" pos:end="29:25"><name pos:start="29:24" pos:end="29:25">bs</name></expr></argument>, <argument pos:start="29:28" pos:end="29:33"><expr pos:start="29:28" pos:end="29:33"><name pos:start="29:28" pos:end="29:33">offset</name></expr></argument>, <argument pos:start="29:36" pos:end="29:40"><expr pos:start="29:36" pos:end="29:40"><operator pos:start="29:36" pos:end="29:36">&amp;</operator><name pos:start="29:37" pos:end="29:40">qiov</name></expr></argument>, <argument pos:start="29:43" pos:end="29:47"><expr pos:start="29:43" pos:end="29:47"><name pos:start="29:43" pos:end="29:47">false</name></expr></argument>, <argument pos:start="29:50" pos:end="29:50"><expr pos:start="29:50" pos:end="29:50"><literal type="number" pos:start="29:50" pos:end="29:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:16">(<expr pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:11">ret</name> <operator pos:start="31:13" pos:end="31:13">&lt;</operator> <literal type="number" pos:start="31:15" pos:end="31:15">0</literal></expr>)</condition> <block pos:start="31:18" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:19">

        <return pos:start="33:9" pos:end="33:19">return <expr pos:start="33:16" pos:end="33:18"><name pos:start="33:16" pos:end="33:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="39:5" pos:end="39:17">return <expr pos:start="39:12" pos:end="39:16"><name pos:start="39:12" pos:end="39:16">bytes</name></expr>;</return>

</block_content>}</block></function>
</unit>
