<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8929.c" pos:tabs="8"><function pos:start="1:1" pos:end="237:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">img_resize</name><parameter_list pos:start="1:22" pos:end="1:44">(<parameter pos:start="1:23" pos:end="1:30"><decl pos:start="1:23" pos:end="1:30"><type pos:start="1:23" pos:end="1:30"><name pos:start="1:23" pos:end="1:25">int</name></type> <name pos:start="1:27" pos:end="1:30">argc</name></decl></parameter>, <parameter pos:start="1:33" pos:end="1:43"><decl pos:start="1:33" pos:end="1:43"><type pos:start="1:33" pos:end="1:43"><name pos:start="1:33" pos:end="1:36">char</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier><modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:43">argv</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="237:1">{<block_content pos:start="5:5" pos:end="235:13">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">c</name></decl>, <decl pos:start="5:12" pos:end="5:14"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:14">ret</name></decl>, <decl pos:start="5:17" pos:end="5:24"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:17" pos:end="5:24">relative</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:24">filename</name></decl>, <decl pos:start="7:27" pos:end="7:30"><type ref="prev" pos:start="7:5" pos:end="7:16"><modifier pos:start="7:27" pos:end="7:27">*</modifier></type><name pos:start="7:28" pos:end="7:30">fmt</name></decl>, <decl pos:start="7:33" pos:end="7:37"><type ref="prev" pos:start="7:5" pos:end="7:16"><modifier pos:start="7:33" pos:end="7:33">*</modifier></type><name pos:start="7:34" pos:end="7:37">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int64_t</name></type> <name pos:start="9:13" pos:end="9:13">n</name></decl>, <decl pos:start="9:16" pos:end="9:25"><type ref="prev" pos:start="9:5" pos:end="9:11"/><name pos:start="9:16" pos:end="9:25">total_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:32"><decl pos:start="11:5" pos:end="11:31"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">BlockDriverState</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:24">bs</name> <init pos:start="11:26" pos:end="11:31">= <expr pos:start="11:28" pos:end="11:31"><name pos:start="11:28" pos:end="11:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">QemuOpts</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:19">param</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="39:6"><decl pos:start="15:5" pos:end="39:5"><type pos:start="15:5" pos:end="15:23"><specifier pos:start="15:5" pos:end="15:10">static</specifier> <name pos:start="15:12" pos:end="15:23">QemuOptsList</name></type> <name pos:start="15:25" pos:end="15:38">resize_options</name> <init pos:start="15:40" pos:end="39:5">= <expr pos:start="15:42" pos:end="39:5"><block pos:start="15:42" pos:end="39:5">{

        <expr pos:start="17:9" pos:end="17:32"><operator pos:start="17:9" pos:end="17:9">.</operator><name pos:start="17:10" pos:end="17:13">name</name> <operator pos:start="17:15" pos:end="17:15">=</operator> <literal type="string" pos:start="17:17" pos:end="17:32">"resize_options"</literal></expr>,

        <expr pos:start="19:9" pos:end="19:60"><operator pos:start="19:9" pos:end="19:9">.</operator><name pos:start="19:10" pos:end="19:13">head</name> <operator pos:start="19:15" pos:end="19:15">=</operator> <call pos:start="19:17" pos:end="19:60"><name pos:start="19:17" pos:end="19:39">QTAILQ_HEAD_INITIALIZER</name><argument_list pos:start="19:40" pos:end="19:60">(<argument pos:start="19:41" pos:end="19:59"><expr pos:start="19:41" pos:end="19:59"><name pos:start="19:41" pos:end="19:59"><name pos:start="19:41" pos:end="19:54">resize_options</name><operator pos:start="19:55" pos:end="19:55">.</operator><name pos:start="19:56" pos:end="19:59">head</name></name></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="21:9" pos:end="37:9"><operator pos:start="21:9" pos:end="21:9">.</operator><name pos:start="21:10" pos:end="21:13">desc</name> <operator pos:start="21:15" pos:end="21:15">=</operator> <block pos:start="21:17" pos:end="37:9">{

            <expr pos:start="23:13" pos:end="31:13"><block pos:start="23:13" pos:end="31:13">{

                <expr pos:start="25:17" pos:end="25:38"><operator pos:start="25:17" pos:end="25:17">.</operator><name pos:start="25:18" pos:end="25:21">name</name> <operator pos:start="25:23" pos:end="25:23">=</operator> <name pos:start="25:25" pos:end="25:38">BLOCK_OPT_SIZE</name></expr>,

                <expr pos:start="27:17" pos:end="27:37"><operator pos:start="27:17" pos:end="27:17">.</operator><name pos:start="27:18" pos:end="27:21">type</name> <operator pos:start="27:23" pos:end="27:23">=</operator> <name pos:start="27:25" pos:end="27:37">QEMU_OPT_SIZE</name></expr>,

                <expr pos:start="29:17" pos:end="29:43"><operator pos:start="29:17" pos:end="29:17">.</operator><name pos:start="29:18" pos:end="29:21">help</name> <operator pos:start="29:23" pos:end="29:23">=</operator> <literal type="string" pos:start="29:25" pos:end="29:43">"Virtual disk size"</literal></expr>

            }</block></expr>, <expr pos:start="31:16" pos:end="35:13"><block pos:start="31:16" pos:end="35:13">{

                <comment type="block" pos:start="33:17" pos:end="33:33">/* end of list */</comment>

            }</block></expr>

        }</block></expr>,

    }</block></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="43:5" pos:end="45:31">/* Remove size from argv manually so that negative numbers are not treated

     * as options by getopt. */</comment>

    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:17">(<expr pos:start="47:9" pos:end="47:16"><name pos:start="47:9" pos:end="47:12">argc</name> <operator pos:start="47:14" pos:end="47:14">&lt;</operator> <literal type="number" pos:start="47:16" pos:end="47:16">3</literal></expr>)</condition> <block pos:start="47:19" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:17">

        <expr_stmt pos:start="49:9" pos:end="49:15"><expr pos:start="49:9" pos:end="49:14"><call pos:start="49:9" pos:end="49:14"><name pos:start="49:9" pos:end="49:12">help</name><argument_list pos:start="49:13" pos:end="49:14">()</argument_list></call></expr>;</expr_stmt>

        <return pos:start="51:9" pos:end="51:17">return <expr pos:start="51:16" pos:end="51:16"><literal type="number" pos:start="51:16" pos:end="51:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:24"><expr pos:start="57:5" pos:end="57:23"><name pos:start="57:5" pos:end="57:8">size</name> <operator pos:start="57:10" pos:end="57:10">=</operator> <name pos:start="57:12" pos:end="57:23"><name pos:start="57:12" pos:end="57:15">argv</name><index pos:start="57:16" pos:end="57:23">[<expr pos:start="57:17" pos:end="57:22"><operator pos:start="57:17" pos:end="57:18">--</operator><name pos:start="57:19" pos:end="57:22">argc</name></expr>]</index></name></expr>;</expr_stmt>



    <comment type="block" pos:start="61:5" pos:end="61:32">/* Parse getopt arguments */</comment>

    <expr_stmt pos:start="63:5" pos:end="63:15"><expr pos:start="63:5" pos:end="63:14"><name pos:start="63:5" pos:end="63:7">fmt</name> <operator pos:start="63:9" pos:end="63:9">=</operator> <name pos:start="63:11" pos:end="63:14">NULL</name></expr>;</expr_stmt>

    <for pos:start="65:5" pos:end="93:5">for<control pos:start="65:8" pos:end="65:11">(<init pos:start="65:9" pos:end="65:9">;</init><condition pos:start="65:10" pos:end="65:10">;</condition><incr/>)</control> <block pos:start="65:13" pos:end="93:5">{<block_content pos:start="67:9" pos:end="91:9">

        <expr_stmt pos:start="67:9" pos:end="67:38"><expr pos:start="67:9" pos:end="67:37"><name pos:start="67:9" pos:end="67:9">c</name> <operator pos:start="67:11" pos:end="67:11">=</operator> <call pos:start="67:13" pos:end="67:37"><name pos:start="67:13" pos:end="67:18">getopt</name><argument_list pos:start="67:19" pos:end="67:37">(<argument pos:start="67:20" pos:end="67:23"><expr pos:start="67:20" pos:end="67:23"><name pos:start="67:20" pos:end="67:23">argc</name></expr></argument>, <argument pos:start="67:26" pos:end="67:29"><expr pos:start="67:26" pos:end="67:29"><name pos:start="67:26" pos:end="67:29">argv</name></expr></argument>, <argument pos:start="67:32" pos:end="67:36"><expr pos:start="67:32" pos:end="67:36"><literal type="string" pos:start="67:32" pos:end="67:36">"f:h"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="69:9" pos:end="73:9"><if pos:start="69:9" pos:end="73:9">if <condition pos:start="69:12" pos:end="69:20">(<expr pos:start="69:13" pos:end="69:19"><name pos:start="69:13" pos:end="69:13">c</name> <operator pos:start="69:15" pos:end="69:16">==</operator> <operator pos:start="69:18" pos:end="69:18">-</operator><literal type="number" pos:start="69:19" pos:end="69:19">1</literal></expr>)</condition> <block pos:start="69:22" pos:end="73:9">{<block_content pos:start="71:13" pos:end="71:18">

            <break pos:start="71:13" pos:end="71:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <switch pos:start="75:9" pos:end="91:9">switch<condition pos:start="75:15" pos:end="75:17">(<expr pos:start="75:16" pos:end="75:16"><name pos:start="75:16" pos:end="75:16">c</name></expr>)</condition> <block pos:start="75:19" pos:end="91:9">{<block_content pos:start="77:9" pos:end="89:18">

        <case pos:start="77:9" pos:end="77:17">case <expr pos:start="77:14" pos:end="77:16"><literal type="char" pos:start="77:14" pos:end="77:16">'?'</literal></expr>:</case>

        <case pos:start="79:9" pos:end="79:17">case <expr pos:start="79:14" pos:end="79:16"><literal type="char" pos:start="79:14" pos:end="79:16">'h'</literal></expr>:</case>

            <expr_stmt pos:start="81:13" pos:end="81:19"><expr pos:start="81:13" pos:end="81:18"><call pos:start="81:13" pos:end="81:18"><name pos:start="81:13" pos:end="81:16">help</name><argument_list pos:start="81:17" pos:end="81:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="83:13" pos:end="83:18">break;</break>

        <case pos:start="85:9" pos:end="85:17">case <expr pos:start="85:14" pos:end="85:16"><literal type="char" pos:start="85:14" pos:end="85:16">'f'</literal></expr>:</case>

            <expr_stmt pos:start="87:13" pos:end="87:25"><expr pos:start="87:13" pos:end="87:24"><name pos:start="87:13" pos:end="87:15">fmt</name> <operator pos:start="87:17" pos:end="87:17">=</operator> <name pos:start="87:19" pos:end="87:24">optarg</name></expr>;</expr_stmt>

            <break pos:start="89:13" pos:end="89:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></for>

    <if_stmt pos:start="95:5" pos:end="99:5"><if pos:start="95:5" pos:end="99:5">if <condition pos:start="95:8" pos:end="95:23">(<expr pos:start="95:9" pos:end="95:22"><name pos:start="95:9" pos:end="95:14">optind</name> <operator pos:start="95:16" pos:end="95:17">&gt;=</operator> <name pos:start="95:19" pos:end="95:22">argc</name></expr>)</condition> <block pos:start="95:25" pos:end="99:5">{<block_content pos:start="97:9" pos:end="97:15">

        <expr_stmt pos:start="97:9" pos:end="97:15"><expr pos:start="97:9" pos:end="97:14"><call pos:start="97:9" pos:end="97:14"><name pos:start="97:9" pos:end="97:12">help</name><argument_list pos:start="97:13" pos:end="97:14">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:30"><expr pos:start="101:5" pos:end="101:29"><name pos:start="101:5" pos:end="101:12">filename</name> <operator pos:start="101:14" pos:end="101:14">=</operator> <name pos:start="101:16" pos:end="101:29"><name pos:start="101:16" pos:end="101:19">argv</name><index pos:start="101:20" pos:end="101:29">[<expr pos:start="101:21" pos:end="101:28"><name pos:start="101:21" pos:end="101:26">optind</name><operator pos:start="101:27" pos:end="101:28">++</operator></expr>]</index></name></expr>;</expr_stmt>



    <comment type="block" pos:start="105:5" pos:end="105:54">/* Choose grow, shrink, or absolute resize mode */</comment>

    <switch pos:start="107:5" pos:end="131:5">switch <condition pos:start="107:12" pos:end="107:20">(<expr pos:start="107:13" pos:end="107:19"><name pos:start="107:13" pos:end="107:19"><name pos:start="107:13" pos:end="107:16">size</name><index pos:start="107:17" pos:end="107:19">[<expr pos:start="107:18" pos:end="107:18"><literal type="number" pos:start="107:18" pos:end="107:18">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="107:22" pos:end="131:5">{<block_content pos:start="109:5" pos:end="129:14">

    <case pos:start="109:5" pos:end="109:13">case <expr pos:start="109:10" pos:end="109:12"><literal type="char" pos:start="109:10" pos:end="109:12">'+'</literal></expr>:</case>

        <expr_stmt pos:start="111:9" pos:end="111:21"><expr pos:start="111:9" pos:end="111:20"><name pos:start="111:9" pos:end="111:16">relative</name> <operator pos:start="111:18" pos:end="111:18">=</operator> <literal type="number" pos:start="111:20" pos:end="111:20">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:15"><expr pos:start="113:9" pos:end="113:14"><name pos:start="113:9" pos:end="113:12">size</name><operator pos:start="113:13" pos:end="113:14">++</operator></expr>;</expr_stmt>

        <break pos:start="115:9" pos:end="115:14">break;</break>

    <case pos:start="117:5" pos:end="117:13">case <expr pos:start="117:10" pos:end="117:12"><literal type="char" pos:start="117:10" pos:end="117:12">'-'</literal></expr>:</case>

        <expr_stmt pos:start="119:9" pos:end="119:22"><expr pos:start="119:9" pos:end="119:21"><name pos:start="119:9" pos:end="119:16">relative</name> <operator pos:start="119:18" pos:end="119:18">=</operator> <operator pos:start="119:20" pos:end="119:20">-</operator><literal type="number" pos:start="119:21" pos:end="119:21">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:15"><expr pos:start="121:9" pos:end="121:14"><name pos:start="121:9" pos:end="121:12">size</name><operator pos:start="121:13" pos:end="121:14">++</operator></expr>;</expr_stmt>

        <break pos:start="123:9" pos:end="123:14">break;</break>

    <default pos:start="125:5" pos:end="125:12">default:</default>

        <expr_stmt pos:start="127:9" pos:end="127:21"><expr pos:start="127:9" pos:end="127:20"><name pos:start="127:9" pos:end="127:16">relative</name> <operator pos:start="127:18" pos:end="127:18">=</operator> <literal type="number" pos:start="127:20" pos:end="127:20">0</literal></expr>;</expr_stmt>

        <break pos:start="129:9" pos:end="129:14">break;</break>

    </block_content>}</block></switch>



    <comment type="block" pos:start="135:5" pos:end="135:20">/* Parse size */</comment>

    <expr_stmt pos:start="137:5" pos:end="137:61"><expr pos:start="137:5" pos:end="137:60"><name pos:start="137:5" pos:end="137:9">param</name> <operator pos:start="137:11" pos:end="137:11">=</operator> <call pos:start="137:13" pos:end="137:60"><name pos:start="137:13" pos:end="137:28">qemu_opts_create</name><argument_list pos:start="137:29" pos:end="137:60">(<argument pos:start="137:30" pos:end="137:44"><expr pos:start="137:30" pos:end="137:44"><operator pos:start="137:30" pos:end="137:30">&amp;</operator><name pos:start="137:31" pos:end="137:44">resize_options</name></expr></argument>, <argument pos:start="137:47" pos:end="137:50"><expr pos:start="137:47" pos:end="137:50"><name pos:start="137:47" pos:end="137:50">NULL</name></expr></argument>, <argument pos:start="137:53" pos:end="137:53"><expr pos:start="137:53" pos:end="137:53"><literal type="number" pos:start="137:53" pos:end="137:53">0</literal></expr></argument>, <argument pos:start="137:56" pos:end="137:59"><expr pos:start="137:56" pos:end="137:59"><name pos:start="137:56" pos:end="137:59">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="139:5" pos:end="149:5"><if pos:start="139:5" pos:end="149:5">if <condition pos:start="139:8" pos:end="139:50">(<expr pos:start="139:9" pos:end="139:49"><call pos:start="139:9" pos:end="139:49"><name pos:start="139:9" pos:end="139:20">qemu_opt_set</name><argument_list pos:start="139:21" pos:end="139:49">(<argument pos:start="139:22" pos:end="139:26"><expr pos:start="139:22" pos:end="139:26"><name pos:start="139:22" pos:end="139:26">param</name></expr></argument>, <argument pos:start="139:29" pos:end="139:42"><expr pos:start="139:29" pos:end="139:42"><name pos:start="139:29" pos:end="139:42">BLOCK_OPT_SIZE</name></expr></argument>, <argument pos:start="139:45" pos:end="139:48"><expr pos:start="139:45" pos:end="139:48"><name pos:start="139:45" pos:end="139:48">size</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="139:52" pos:end="149:5">{<block_content pos:start="143:9" pos:end="147:17">

        <comment type="block" pos:start="141:9" pos:end="141:67">/* Error message already printed when size parsing fails */</comment>

        <expr_stmt pos:start="143:9" pos:end="143:17"><expr pos:start="143:9" pos:end="143:16"><name pos:start="143:9" pos:end="143:11">ret</name> <operator pos:start="143:13" pos:end="143:13">=</operator> <operator pos:start="143:15" pos:end="143:15">-</operator><literal type="number" pos:start="143:16" pos:end="143:16">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:29"><expr pos:start="145:9" pos:end="145:28"><call pos:start="145:9" pos:end="145:28"><name pos:start="145:9" pos:end="145:21">qemu_opts_del</name><argument_list pos:start="145:22" pos:end="145:28">(<argument pos:start="145:23" pos:end="145:27"><expr pos:start="145:23" pos:end="145:27"><name pos:start="145:23" pos:end="145:27">param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="147:9" pos:end="147:17">goto <name pos:start="147:14" pos:end="147:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:52"><expr pos:start="151:5" pos:end="151:51"><name pos:start="151:5" pos:end="151:5">n</name> <operator pos:start="151:7" pos:end="151:7">=</operator> <call pos:start="151:9" pos:end="151:51"><name pos:start="151:9" pos:end="151:25">qemu_opt_get_size</name><argument_list pos:start="151:26" pos:end="151:51">(<argument pos:start="151:27" pos:end="151:31"><expr pos:start="151:27" pos:end="151:31"><name pos:start="151:27" pos:end="151:31">param</name></expr></argument>, <argument pos:start="151:34" pos:end="151:47"><expr pos:start="151:34" pos:end="151:47"><name pos:start="151:34" pos:end="151:47">BLOCK_OPT_SIZE</name></expr></argument>, <argument pos:start="151:50" pos:end="151:50"><expr pos:start="151:50" pos:end="151:50"><literal type="number" pos:start="151:50" pos:end="151:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:25"><expr pos:start="153:5" pos:end="153:24"><call pos:start="153:5" pos:end="153:24"><name pos:start="153:5" pos:end="153:17">qemu_opts_del</name><argument_list pos:start="153:18" pos:end="153:24">(<argument pos:start="153:19" pos:end="153:23"><expr pos:start="153:19" pos:end="153:23"><name pos:start="153:19" pos:end="153:23">param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="157:5" pos:end="157:66"><expr pos:start="157:5" pos:end="157:65"><name pos:start="157:5" pos:end="157:6">bs</name> <operator pos:start="157:8" pos:end="157:8">=</operator> <call pos:start="157:10" pos:end="157:65"><name pos:start="157:10" pos:end="157:22">bdrv_new_open</name><argument_list pos:start="157:23" pos:end="157:65">(<argument pos:start="157:24" pos:end="157:31"><expr pos:start="157:24" pos:end="157:31"><name pos:start="157:24" pos:end="157:31">filename</name></expr></argument>, <argument pos:start="157:34" pos:end="157:36"><expr pos:start="157:34" pos:end="157:36"><name pos:start="157:34" pos:end="157:36">fmt</name></expr></argument>, <argument pos:start="157:39" pos:end="157:64"><expr pos:start="157:39" pos:end="157:64"><name pos:start="157:39" pos:end="157:50">BDRV_O_FLAGS</name> <operator pos:start="157:52" pos:end="157:52">|</operator> <name pos:start="157:54" pos:end="157:64">BDRV_O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="159:5" pos:end="165:5"><if pos:start="159:5" pos:end="165:5">if <condition pos:start="159:8" pos:end="159:12">(<expr pos:start="159:9" pos:end="159:11"><operator pos:start="159:9" pos:end="159:9">!</operator><name pos:start="159:10" pos:end="159:11">bs</name></expr>)</condition> <block pos:start="159:14" pos:end="165:5">{<block_content pos:start="161:9" pos:end="163:17">

        <expr_stmt pos:start="161:9" pos:end="161:17"><expr pos:start="161:9" pos:end="161:16"><name pos:start="161:9" pos:end="161:11">ret</name> <operator pos:start="161:13" pos:end="161:13">=</operator> <operator pos:start="161:15" pos:end="161:15">-</operator><literal type="number" pos:start="161:16" pos:end="161:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="163:9" pos:end="163:17">goto <name pos:start="163:14" pos:end="163:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="169:5" pos:end="177:5"><if pos:start="169:5" pos:end="173:5">if <condition pos:start="169:8" pos:end="169:17">(<expr pos:start="169:9" pos:end="169:16"><name pos:start="169:9" pos:end="169:16">relative</name></expr>)</condition> <block pos:start="169:19" pos:end="173:5">{<block_content pos:start="171:9" pos:end="171:55">

        <expr_stmt pos:start="171:9" pos:end="171:55"><expr pos:start="171:9" pos:end="171:54"><name pos:start="171:9" pos:end="171:18">total_size</name> <operator pos:start="171:20" pos:end="171:20">=</operator> <call pos:start="171:22" pos:end="171:39"><name pos:start="171:22" pos:end="171:35">bdrv_getlength</name><argument_list pos:start="171:36" pos:end="171:39">(<argument pos:start="171:37" pos:end="171:38"><expr pos:start="171:37" pos:end="171:38"><name pos:start="171:37" pos:end="171:38">bs</name></expr></argument>)</argument_list></call> <operator pos:start="171:41" pos:end="171:41">+</operator> <name pos:start="171:43" pos:end="171:43">n</name> <operator pos:start="171:45" pos:end="171:45">*</operator> <name pos:start="171:47" pos:end="171:54">relative</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="173:7" pos:end="177:5">else <block pos:start="173:12" pos:end="177:5">{<block_content pos:start="175:9" pos:end="175:23">

        <expr_stmt pos:start="175:9" pos:end="175:23"><expr pos:start="175:9" pos:end="175:22"><name pos:start="175:9" pos:end="175:18">total_size</name> <operator pos:start="175:20" pos:end="175:20">=</operator> <name pos:start="175:22" pos:end="175:22">n</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="179:5" pos:end="187:5"><if pos:start="179:5" pos:end="187:5">if <condition pos:start="179:8" pos:end="179:24">(<expr pos:start="179:9" pos:end="179:23"><name pos:start="179:9" pos:end="179:18">total_size</name> <operator pos:start="179:20" pos:end="179:21">&lt;=</operator> <literal type="number" pos:start="179:23" pos:end="179:23">0</literal></expr>)</condition> <block pos:start="179:26" pos:end="187:5">{<block_content pos:start="181:9" pos:end="185:17">

        <expr_stmt pos:start="181:9" pos:end="181:56"><expr pos:start="181:9" pos:end="181:55"><call pos:start="181:9" pos:end="181:55"><name pos:start="181:9" pos:end="181:20">error_report</name><argument_list pos:start="181:21" pos:end="181:55">(<argument pos:start="181:22" pos:end="181:54"><expr pos:start="181:22" pos:end="181:54"><literal type="string" pos:start="181:22" pos:end="181:54">"New image size must be positive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="183:9" pos:end="183:17"><expr pos:start="183:9" pos:end="183:16"><name pos:start="183:9" pos:end="183:11">ret</name> <operator pos:start="183:13" pos:end="183:13">=</operator> <operator pos:start="183:15" pos:end="183:15">-</operator><literal type="number" pos:start="183:16" pos:end="183:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="185:9" pos:end="185:17">goto <name pos:start="185:14" pos:end="185:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="191:5" pos:end="191:40"><expr pos:start="191:5" pos:end="191:39"><name pos:start="191:5" pos:end="191:7">ret</name> <operator pos:start="191:9" pos:end="191:9">=</operator> <call pos:start="191:11" pos:end="191:39"><name pos:start="191:11" pos:end="191:23">bdrv_truncate</name><argument_list pos:start="191:24" pos:end="191:39">(<argument pos:start="191:25" pos:end="191:26"><expr pos:start="191:25" pos:end="191:26"><name pos:start="191:25" pos:end="191:26">bs</name></expr></argument>, <argument pos:start="191:29" pos:end="191:38"><expr pos:start="191:29" pos:end="191:38"><name pos:start="191:29" pos:end="191:38">total_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="193:5" pos:end="219:5">switch <condition pos:start="193:12" pos:end="193:16">(<expr pos:start="193:13" pos:end="193:15"><name pos:start="193:13" pos:end="193:15">ret</name></expr>)</condition> <block pos:start="193:18" pos:end="219:5">{<block_content pos:start="195:5" pos:end="217:14">

    <case pos:start="195:5" pos:end="195:11">case <expr pos:start="195:10" pos:end="195:10"><literal type="number" pos:start="195:10" pos:end="195:10">0</literal></expr>:</case>

        <expr_stmt pos:start="197:9" pos:end="197:35"><expr pos:start="197:9" pos:end="197:34"><call pos:start="197:9" pos:end="197:34"><name pos:start="197:9" pos:end="197:14">printf</name><argument_list pos:start="197:15" pos:end="197:34">(<argument pos:start="197:16" pos:end="197:33"><expr pos:start="197:16" pos:end="197:33"><literal type="string" pos:start="197:16" pos:end="197:33">"Image resized.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="199:9" pos:end="199:14">break;</break>

    <case pos:start="201:5" pos:end="201:18">case <expr pos:start="201:10" pos:end="201:17"><operator pos:start="201:10" pos:end="201:10">-</operator><name pos:start="201:11" pos:end="201:17">ENOTSUP</name></expr>:</case>

        <expr_stmt pos:start="203:9" pos:end="203:59"><expr pos:start="203:9" pos:end="203:58"><call pos:start="203:9" pos:end="203:58"><name pos:start="203:9" pos:end="203:20">error_report</name><argument_list pos:start="203:21" pos:end="203:58">(<argument pos:start="203:22" pos:end="203:57"><expr pos:start="203:22" pos:end="203:57"><literal type="string" pos:start="203:22" pos:end="203:57">"This image does not support resize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="205:9" pos:end="205:14">break;</break>

    <case pos:start="207:5" pos:end="207:17">case <expr pos:start="207:10" pos:end="207:16"><operator pos:start="207:10" pos:end="207:10">-</operator><name pos:start="207:11" pos:end="207:16">EACCES</name></expr>:</case>

        <expr_stmt pos:start="209:9" pos:end="209:43"><expr pos:start="209:9" pos:end="209:42"><call pos:start="209:9" pos:end="209:42"><name pos:start="209:9" pos:end="209:20">error_report</name><argument_list pos:start="209:21" pos:end="209:42">(<argument pos:start="209:22" pos:end="209:41"><expr pos:start="209:22" pos:end="209:41"><literal type="string" pos:start="209:22" pos:end="209:41">"Image is read-only"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="211:9" pos:end="211:14">break;</break>

    <default pos:start="213:5" pos:end="213:12">default:</default>

        <expr_stmt pos:start="215:9" pos:end="215:56"><expr pos:start="215:9" pos:end="215:55"><call pos:start="215:9" pos:end="215:55"><name pos:start="215:9" pos:end="215:20">error_report</name><argument_list pos:start="215:21" pos:end="215:55">(<argument pos:start="215:22" pos:end="215:48"><expr pos:start="215:22" pos:end="215:48"><literal type="string" pos:start="215:22" pos:end="215:48">"Error resizing image (%d)"</literal></expr></argument>, <argument pos:start="215:51" pos:end="215:54"><expr pos:start="215:51" pos:end="215:54"><operator pos:start="215:51" pos:end="215:51">-</operator><name pos:start="215:52" pos:end="215:54">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="217:9" pos:end="217:14">break;</break>

    </block_content>}</block></switch>

<label pos:start="221:1" pos:end="221:4"><name pos:start="221:1" pos:end="221:3">out</name>:</label>

    <if_stmt pos:start="223:5" pos:end="227:5"><if pos:start="223:5" pos:end="227:5">if <condition pos:start="223:8" pos:end="223:11">(<expr pos:start="223:9" pos:end="223:10"><name pos:start="223:9" pos:end="223:10">bs</name></expr>)</condition> <block pos:start="223:13" pos:end="227:5">{<block_content pos:start="225:9" pos:end="225:24">

        <expr_stmt pos:start="225:9" pos:end="225:24"><expr pos:start="225:9" pos:end="225:23"><call pos:start="225:9" pos:end="225:23"><name pos:start="225:9" pos:end="225:19">bdrv_delete</name><argument_list pos:start="225:20" pos:end="225:23">(<argument pos:start="225:21" pos:end="225:22"><expr pos:start="225:21" pos:end="225:22"><name pos:start="225:21" pos:end="225:22">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="229:5" pos:end="233:5"><if pos:start="229:5" pos:end="233:5">if <condition pos:start="229:8" pos:end="229:12">(<expr pos:start="229:9" pos:end="229:11"><name pos:start="229:9" pos:end="229:11">ret</name></expr>)</condition> <block pos:start="229:14" pos:end="233:5">{<block_content pos:start="231:9" pos:end="231:17">

        <return pos:start="231:9" pos:end="231:17">return <expr pos:start="231:16" pos:end="231:16"><literal type="number" pos:start="231:16" pos:end="231:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="235:5" pos:end="235:13">return <expr pos:start="235:12" pos:end="235:12"><literal type="number" pos:start="235:12" pos:end="235:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
