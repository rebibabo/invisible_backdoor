<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15868.c" pos:tabs="8"><function pos:start="1:1" pos:end="125:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">apb_config_writel</name> <parameter_list pos:start="1:31" pos:end="3:59">(<parameter pos:start="1:32" pos:end="1:43"><decl pos:start="1:32" pos:end="1:43"><type pos:start="1:32" pos:end="1:43"><name pos:start="1:32" pos:end="1:35">void</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:43">opaque</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:68"><decl pos:start="1:46" pos:end="1:68"><type pos:start="1:46" pos:end="1:68"><name pos:start="1:46" pos:end="1:63">target_phys_addr_t</name></type> <name pos:start="1:65" pos:end="1:68">addr</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:43"><decl pos:start="3:32" pos:end="3:43"><type pos:start="3:32" pos:end="3:43"><name pos:start="3:32" pos:end="3:39">uint64_t</name></type> <name pos:start="3:41" pos:end="3:43">val</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:58"><decl pos:start="3:46" pos:end="3:58"><type pos:start="3:46" pos:end="3:58"><name pos:start="3:46" pos:end="3:53">unsigned</name></type> <name pos:start="3:55" pos:end="3:58">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="125:1">{<block_content pos:start="7:5" pos:end="123:5">

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">APBState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:15">s</name> <init pos:start="7:17" pos:end="7:24">= <expr pos:start="7:19" pos:end="7:24"><name pos:start="7:19" pos:end="7:24">opaque</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:85"><expr pos:start="11:5" pos:end="11:84"><call pos:start="11:5" pos:end="11:84"><name pos:start="11:5" pos:end="11:15">APB_DPRINTF</name><argument_list pos:start="11:16" pos:end="11:84">(<argument pos:start="11:17" pos:end="11:62"><expr pos:start="11:17" pos:end="11:62"><literal type="string" pos:start="11:17" pos:end="11:27">"%s: addr "</literal> <name pos:start="11:29" pos:end="11:41">TARGET_FMT_lx</name> <literal type="string" pos:start="11:43" pos:end="11:50">" val %"</literal> <name pos:start="11:52" pos:end="11:57">PRIx64</name> <literal type="string" pos:start="11:59" pos:end="11:62">"\n"</literal></expr></argument>, <argument pos:start="11:65" pos:end="11:72"><expr pos:start="11:65" pos:end="11:72"><name pos:start="11:65" pos:end="11:72">__func__</name></expr></argument>, <argument pos:start="11:75" pos:end="11:78"><expr pos:start="11:75" pos:end="11:78"><name pos:start="11:75" pos:end="11:78">addr</name></expr></argument>, <argument pos:start="11:81" pos:end="11:83"><expr pos:start="11:81" pos:end="11:83"><name pos:start="11:81" pos:end="11:83">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="15:5" pos:end="123:5">switch <condition pos:start="15:12" pos:end="15:26">(<expr pos:start="15:13" pos:end="15:25"><name pos:start="15:13" pos:end="15:16">addr</name> <operator pos:start="15:18" pos:end="15:18">&amp;</operator> <literal type="number" pos:start="15:20" pos:end="15:25">0xffff</literal></expr>)</condition> <block pos:start="15:28" pos:end="123:5">{<block_content pos:start="17:5" pos:end="121:14">

    <case pos:start="17:5" pos:end="17:23">case <expr pos:start="17:10" pos:end="17:22"><literal type="number" pos:start="17:10" pos:end="17:13">0x30</literal> <operator pos:start="17:15" pos:end="17:17">...</operator> <literal type="number" pos:start="17:19" pos:end="17:22">0x4f</literal></expr>:</case> <comment type="block" pos:start="17:25" pos:end="17:49">/* DMA error registers */</comment>

        <comment type="block" pos:start="19:9" pos:end="19:38">/* XXX: not implemented yet */</comment>

        <break pos:start="21:9" pos:end="21:14">break;</break>

    <case pos:start="23:5" pos:end="23:25">case <expr pos:start="23:10" pos:end="23:24"><literal type="number" pos:start="23:10" pos:end="23:14">0x200</literal> <operator pos:start="23:16" pos:end="23:18">...</operator> <literal type="number" pos:start="23:20" pos:end="23:24">0x20b</literal></expr>:</case> <comment type="block" pos:start="23:27" pos:end="23:37">/* IOMMU */</comment>

        <expr_stmt pos:start="25:9" pos:end="25:42"><expr pos:start="25:9" pos:end="25:41"><name pos:start="25:9" pos:end="25:35"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:16">iommu</name><index pos:start="25:17" pos:end="25:35">[<expr pos:start="25:18" pos:end="25:34"><operator pos:start="25:18" pos:end="25:18">(</operator><name pos:start="25:19" pos:end="25:22">addr</name> <operator pos:start="25:24" pos:end="25:24">&amp;</operator> <literal type="number" pos:start="25:26" pos:end="25:28">0xf</literal><operator pos:start="25:29" pos:end="25:29">)</operator> <operator pos:start="25:31" pos:end="25:32">&gt;&gt;</operator> <literal type="number" pos:start="25:34" pos:end="25:34">2</literal></expr>]</index></name> <operator pos:start="25:37" pos:end="25:37">=</operator> <name pos:start="25:39" pos:end="25:41">val</name></expr>;</expr_stmt>

        <break pos:start="27:9" pos:end="27:14">break;</break>

    <case pos:start="29:5" pos:end="29:25">case <expr pos:start="29:10" pos:end="29:24"><literal type="number" pos:start="29:10" pos:end="29:14">0x20c</literal> <operator pos:start="29:16" pos:end="29:18">...</operator> <literal type="number" pos:start="29:20" pos:end="29:24">0x3ff</literal></expr>:</case> <comment type="block" pos:start="29:27" pos:end="29:43">/* IOMMU flush */</comment>

        <break pos:start="31:9" pos:end="31:14">break;</break>

    <case pos:start="33:5" pos:end="33:25">case <expr pos:start="33:10" pos:end="33:24"><literal type="number" pos:start="33:10" pos:end="33:14">0xc00</literal> <operator pos:start="33:16" pos:end="33:18">...</operator> <literal type="number" pos:start="33:20" pos:end="33:24">0xc3f</literal></expr>:</case> <comment type="block" pos:start="33:27" pos:end="33:53">/* PCI interrupt control */</comment>

        <if_stmt pos:start="35:9" pos:end="41:9"><if pos:start="35:9" pos:end="41:9">if <condition pos:start="35:12" pos:end="35:21">(<expr pos:start="35:13" pos:end="35:20"><name pos:start="35:13" pos:end="35:16">addr</name> <operator pos:start="35:18" pos:end="35:18">&amp;</operator> <literal type="number" pos:start="35:20" pos:end="35:20">4</literal></expr>)</condition> <block pos:start="35:23" pos:end="41:9">{<block_content pos:start="37:13" pos:end="39:74">

            <expr_stmt pos:start="37:13" pos:end="37:67"><expr pos:start="37:13" pos:end="37:66"><name pos:start="37:13" pos:end="37:46"><name pos:start="37:13" pos:end="37:13">s</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:26">pci_irq_map</name><index pos:start="37:27" pos:end="37:46">[<expr pos:start="37:28" pos:end="37:45"><operator pos:start="37:28" pos:end="37:28">(</operator><name pos:start="37:29" pos:end="37:32">addr</name> <operator pos:start="37:34" pos:end="37:34">&amp;</operator> <literal type="number" pos:start="37:36" pos:end="37:39">0x3f</literal><operator pos:start="37:40" pos:end="37:40">)</operator> <operator pos:start="37:42" pos:end="37:43">&gt;&gt;</operator> <literal type="number" pos:start="37:45" pos:end="37:45">3</literal></expr>]</index></name> <operator pos:start="37:48" pos:end="37:49">&amp;=</operator> <name pos:start="37:51" pos:end="37:66">PBM_PCI_IMR_MASK</name></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:74"><expr pos:start="39:13" pos:end="39:73"><name pos:start="39:13" pos:end="39:46"><name pos:start="39:13" pos:end="39:13">s</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:26">pci_irq_map</name><index pos:start="39:27" pos:end="39:46">[<expr pos:start="39:28" pos:end="39:45"><operator pos:start="39:28" pos:end="39:28">(</operator><name pos:start="39:29" pos:end="39:32">addr</name> <operator pos:start="39:34" pos:end="39:34">&amp;</operator> <literal type="number" pos:start="39:36" pos:end="39:39">0x3f</literal><operator pos:start="39:40" pos:end="39:40">)</operator> <operator pos:start="39:42" pos:end="39:43">&gt;&gt;</operator> <literal type="number" pos:start="39:45" pos:end="39:45">3</literal></expr>]</index></name> <operator pos:start="39:48" pos:end="39:49">|=</operator> <name pos:start="39:51" pos:end="39:53">val</name> <operator pos:start="39:55" pos:end="39:55">&amp;</operator> <operator pos:start="39:57" pos:end="39:57">~</operator><name pos:start="39:58" pos:end="39:73">PBM_PCI_IMR_MASK</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="43:9" pos:end="43:14">break;</break>

    <case pos:start="45:5" pos:end="45:27">case <expr pos:start="45:10" pos:end="45:26"><literal type="number" pos:start="45:10" pos:end="45:15">0x1000</literal> <operator pos:start="45:17" pos:end="45:19">...</operator> <literal type="number" pos:start="45:21" pos:end="45:26">0x1080</literal></expr>:</case> <comment type="block" pos:start="45:29" pos:end="45:56">/* OBIO interrupt control */</comment>

        <if_stmt pos:start="47:9" pos:end="53:9"><if pos:start="47:9" pos:end="53:9">if <condition pos:start="47:12" pos:end="47:21">(<expr pos:start="47:13" pos:end="47:20"><name pos:start="47:13" pos:end="47:16">addr</name> <operator pos:start="47:18" pos:end="47:18">&amp;</operator> <literal type="number" pos:start="47:20" pos:end="47:20">4</literal></expr>)</condition> <block pos:start="47:23" pos:end="53:9">{<block_content pos:start="49:13" pos:end="51:75">

            <expr_stmt pos:start="49:13" pos:end="49:68"><expr pos:start="49:13" pos:end="49:67"><name pos:start="49:13" pos:end="49:47"><name pos:start="49:13" pos:end="49:13">s</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:27">obio_irq_map</name><index pos:start="49:28" pos:end="49:47">[<expr pos:start="49:29" pos:end="49:46"><operator pos:start="49:29" pos:end="49:29">(</operator><name pos:start="49:30" pos:end="49:33">addr</name> <operator pos:start="49:35" pos:end="49:35">&amp;</operator> <literal type="number" pos:start="49:37" pos:end="49:40">0xff</literal><operator pos:start="49:41" pos:end="49:41">)</operator> <operator pos:start="49:43" pos:end="49:44">&gt;&gt;</operator> <literal type="number" pos:start="49:46" pos:end="49:46">3</literal></expr>]</index></name> <operator pos:start="49:49" pos:end="49:50">&amp;=</operator> <name pos:start="49:52" pos:end="49:67">PBM_PCI_IMR_MASK</name></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:75"><expr pos:start="51:13" pos:end="51:74"><name pos:start="51:13" pos:end="51:47"><name pos:start="51:13" pos:end="51:13">s</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:27">obio_irq_map</name><index pos:start="51:28" pos:end="51:47">[<expr pos:start="51:29" pos:end="51:46"><operator pos:start="51:29" pos:end="51:29">(</operator><name pos:start="51:30" pos:end="51:33">addr</name> <operator pos:start="51:35" pos:end="51:35">&amp;</operator> <literal type="number" pos:start="51:37" pos:end="51:40">0xff</literal><operator pos:start="51:41" pos:end="51:41">)</operator> <operator pos:start="51:43" pos:end="51:44">&gt;&gt;</operator> <literal type="number" pos:start="51:46" pos:end="51:46">3</literal></expr>]</index></name> <operator pos:start="51:49" pos:end="51:50">|=</operator> <name pos:start="51:52" pos:end="51:54">val</name> <operator pos:start="51:56" pos:end="51:56">&amp;</operator> <operator pos:start="51:58" pos:end="51:58">~</operator><name pos:start="51:59" pos:end="51:74">PBM_PCI_IMR_MASK</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="55:9" pos:end="55:14">break;</break>

    <case pos:start="57:5" pos:end="57:27">case <expr pos:start="57:10" pos:end="57:26"><literal type="number" pos:start="57:10" pos:end="57:15">0x1400</literal> <operator pos:start="57:17" pos:end="57:19">...</operator> <literal type="number" pos:start="57:21" pos:end="57:26">0x143f</literal></expr>:</case> <comment type="block" pos:start="57:29" pos:end="57:53">/* PCI interrupt clear */</comment>

        <if_stmt pos:start="59:9" pos:end="63:9"><if pos:start="59:9" pos:end="63:9">if <condition pos:start="59:12" pos:end="59:21">(<expr pos:start="59:13" pos:end="59:20"><name pos:start="59:13" pos:end="59:16">addr</name> <operator pos:start="59:18" pos:end="59:18">&amp;</operator> <literal type="number" pos:start="59:20" pos:end="59:20">4</literal></expr>)</condition> <block pos:start="59:23" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:54">

            <expr_stmt pos:start="61:13" pos:end="61:54"><expr pos:start="61:13" pos:end="61:53"><call pos:start="61:13" pos:end="61:53"><name pos:start="61:13" pos:end="61:27">pci_apb_set_irq</name><argument_list pos:start="61:28" pos:end="61:53">(<argument pos:start="61:29" pos:end="61:29"><expr pos:start="61:29" pos:end="61:29"><name pos:start="61:29" pos:end="61:29">s</name></expr></argument>, <argument pos:start="61:32" pos:end="61:49"><expr pos:start="61:32" pos:end="61:49"><operator pos:start="61:32" pos:end="61:32">(</operator><name pos:start="61:33" pos:end="61:36">addr</name> <operator pos:start="61:38" pos:end="61:38">&amp;</operator> <literal type="number" pos:start="61:40" pos:end="61:43">0x3f</literal><operator pos:start="61:44" pos:end="61:44">)</operator> <operator pos:start="61:46" pos:end="61:47">&gt;&gt;</operator> <literal type="number" pos:start="61:49" pos:end="61:49">3</literal></expr></argument>, <argument pos:start="61:52" pos:end="61:52"><expr pos:start="61:52" pos:end="61:52"><literal type="number" pos:start="61:52" pos:end="61:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="65:9" pos:end="65:14">break;</break>

    <case pos:start="67:5" pos:end="67:27">case <expr pos:start="67:10" pos:end="67:26"><literal type="number" pos:start="67:10" pos:end="67:15">0x1800</literal> <operator pos:start="67:17" pos:end="67:19">...</operator> <literal type="number" pos:start="67:21" pos:end="67:26">0x1860</literal></expr>:</case> <comment type="block" pos:start="67:29" pos:end="67:54">/* OBIO interrupt clear */</comment>

        <if_stmt pos:start="69:9" pos:end="73:9"><if pos:start="69:9" pos:end="73:9">if <condition pos:start="69:12" pos:end="69:21">(<expr pos:start="69:13" pos:end="69:20"><name pos:start="69:13" pos:end="69:16">addr</name> <operator pos:start="69:18" pos:end="69:18">&amp;</operator> <literal type="number" pos:start="69:20" pos:end="69:20">4</literal></expr>)</condition> <block pos:start="69:23" pos:end="73:9">{<block_content pos:start="71:13" pos:end="71:63">

            <expr_stmt pos:start="71:13" pos:end="71:63"><expr pos:start="71:13" pos:end="71:62"><call pos:start="71:13" pos:end="71:62"><name pos:start="71:13" pos:end="71:27">pci_apb_set_irq</name><argument_list pos:start="71:28" pos:end="71:62">(<argument pos:start="71:29" pos:end="71:29"><expr pos:start="71:29" pos:end="71:29"><name pos:start="71:29" pos:end="71:29">s</name></expr></argument>, <argument pos:start="71:32" pos:end="71:58"><expr pos:start="71:32" pos:end="71:58"><literal type="number" pos:start="71:32" pos:end="71:35">0x20</literal> <operator pos:start="71:37" pos:end="71:37">|</operator> <operator pos:start="71:39" pos:end="71:39">(</operator><operator pos:start="71:40" pos:end="71:40">(</operator><name pos:start="71:41" pos:end="71:44">addr</name> <operator pos:start="71:46" pos:end="71:46">&amp;</operator> <literal type="number" pos:start="71:48" pos:end="71:51">0xff</literal><operator pos:start="71:52" pos:end="71:52">)</operator> <operator pos:start="71:54" pos:end="71:55">&gt;&gt;</operator> <literal type="number" pos:start="71:57" pos:end="71:57">3</literal><operator pos:start="71:58" pos:end="71:58">)</operator></expr></argument>, <argument pos:start="71:61" pos:end="71:61"><expr pos:start="71:61" pos:end="71:61"><literal type="number" pos:start="71:61" pos:end="71:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="75:9" pos:end="75:14">break;</break>

    <case pos:start="77:5" pos:end="77:27">case <expr pos:start="77:10" pos:end="77:26"><literal type="number" pos:start="77:10" pos:end="77:15">0x2000</literal> <operator pos:start="77:17" pos:end="77:19">...</operator> <literal type="number" pos:start="77:21" pos:end="77:26">0x202f</literal></expr>:</case> <comment type="block" pos:start="77:29" pos:end="77:45">/* PCI control */</comment>

        <expr_stmt pos:start="79:9" pos:end="79:49"><expr pos:start="79:9" pos:end="79:48"><name pos:start="79:9" pos:end="79:42"><name pos:start="79:9" pos:end="79:9">s</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:22">pci_control</name><index pos:start="79:23" pos:end="79:42">[<expr pos:start="79:24" pos:end="79:41"><operator pos:start="79:24" pos:end="79:24">(</operator><name pos:start="79:25" pos:end="79:28">addr</name> <operator pos:start="79:30" pos:end="79:30">&amp;</operator> <literal type="number" pos:start="79:32" pos:end="79:35">0x3f</literal><operator pos:start="79:36" pos:end="79:36">)</operator> <operator pos:start="79:38" pos:end="79:39">&gt;&gt;</operator> <literal type="number" pos:start="79:41" pos:end="79:41">2</literal></expr>]</index></name> <operator pos:start="79:44" pos:end="79:44">=</operator> <name pos:start="79:46" pos:end="79:48">val</name></expr>;</expr_stmt>

        <break pos:start="81:9" pos:end="81:14">break;</break>

    <case pos:start="83:5" pos:end="83:27">case <expr pos:start="83:10" pos:end="83:26"><literal type="number" pos:start="83:10" pos:end="83:15">0xf020</literal> <operator pos:start="83:17" pos:end="83:19">...</operator> <literal type="number" pos:start="83:21" pos:end="83:26">0xf027</literal></expr>:</case> <comment type="block" pos:start="83:29" pos:end="83:47">/* Reset control */</comment>

        <if_stmt pos:start="85:9" pos:end="105:9"><if pos:start="85:9" pos:end="105:9">if <condition pos:start="85:12" pos:end="85:21">(<expr pos:start="85:13" pos:end="85:20"><name pos:start="85:13" pos:end="85:16">addr</name> <operator pos:start="85:18" pos:end="85:18">&amp;</operator> <literal type="number" pos:start="85:20" pos:end="85:20">4</literal></expr>)</condition> <block pos:start="85:23" pos:end="105:9">{<block_content pos:start="87:13" pos:end="103:13">

            <expr_stmt pos:start="87:13" pos:end="87:30"><expr pos:start="87:13" pos:end="87:29"><name pos:start="87:13" pos:end="87:15">val</name> <operator pos:start="87:17" pos:end="87:18">&amp;=</operator> <name pos:start="87:20" pos:end="87:29">RESET_MASK</name></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:54"><expr pos:start="89:13" pos:end="89:53"><name pos:start="89:13" pos:end="89:28"><name pos:start="89:13" pos:end="89:13">s</name><operator pos:start="89:14" pos:end="89:15">-&gt;</operator><name pos:start="89:16" pos:end="89:28">reset_control</name></name> <operator pos:start="89:30" pos:end="89:31">&amp;=</operator> <operator pos:start="89:33" pos:end="89:33">~</operator><operator pos:start="89:34" pos:end="89:34">(</operator><name pos:start="89:35" pos:end="89:37">val</name> <operator pos:start="89:39" pos:end="89:39">&amp;</operator> <name pos:start="89:41" pos:end="89:52">RESET_WCMASK</name><operator pos:start="89:53" pos:end="89:53">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:50"><expr pos:start="91:13" pos:end="91:49"><name pos:start="91:13" pos:end="91:28"><name pos:start="91:13" pos:end="91:13">s</name><operator pos:start="91:14" pos:end="91:15">-&gt;</operator><name pos:start="91:16" pos:end="91:28">reset_control</name></name> <operator pos:start="91:30" pos:end="91:31">|=</operator> <name pos:start="91:33" pos:end="91:35">val</name> <operator pos:start="91:37" pos:end="91:37">&amp;</operator> <name pos:start="91:39" pos:end="91:49">RESET_WMASK</name></expr>;</expr_stmt>

            <if_stmt pos:start="93:13" pos:end="103:13"><if pos:start="93:13" pos:end="99:13">if <condition pos:start="93:16" pos:end="93:31">(<expr pos:start="93:17" pos:end="93:30"><name pos:start="93:17" pos:end="93:19">val</name> <operator pos:start="93:21" pos:end="93:21">&amp;</operator> <name pos:start="93:23" pos:end="93:30">SOFT_POR</name></expr>)</condition> <block pos:start="93:33" pos:end="99:13">{<block_content pos:start="95:17" pos:end="97:44">

                <expr_stmt pos:start="95:17" pos:end="95:33"><expr pos:start="95:17" pos:end="95:32"><name pos:start="95:17" pos:end="95:28"><name pos:start="95:17" pos:end="95:17">s</name><operator pos:start="95:18" pos:end="95:19">-&gt;</operator><name pos:start="95:20" pos:end="95:28">nr_resets</name></name> <operator pos:start="95:30" pos:end="95:30">=</operator> <literal type="number" pos:start="95:32" pos:end="95:32">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="97:17" pos:end="97:44"><expr pos:start="97:17" pos:end="97:43"><call pos:start="97:17" pos:end="97:43"><name pos:start="97:17" pos:end="97:41">qemu_system_reset_request</name><argument_list pos:start="97:42" pos:end="97:43">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="99:15" pos:end="103:13">else if <condition pos:start="99:23" pos:end="99:38">(<expr pos:start="99:24" pos:end="99:37"><name pos:start="99:24" pos:end="99:26">val</name> <operator pos:start="99:28" pos:end="99:28">&amp;</operator> <name pos:start="99:30" pos:end="99:37">SOFT_XIR</name></expr>)</condition> <block pos:start="99:40" pos:end="103:13">{<block_content pos:start="101:17" pos:end="101:44">

                <expr_stmt pos:start="101:17" pos:end="101:44"><expr pos:start="101:17" pos:end="101:43"><call pos:start="101:17" pos:end="101:43"><name pos:start="101:17" pos:end="101:41">qemu_system_reset_request</name><argument_list pos:start="101:42" pos:end="101:43">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="107:9" pos:end="107:14">break;</break>

    <case pos:start="109:5" pos:end="109:27">case <expr pos:start="109:10" pos:end="109:26"><literal type="number" pos:start="109:10" pos:end="109:15">0x5000</literal> <operator pos:start="109:17" pos:end="109:19">...</operator> <literal type="number" pos:start="109:21" pos:end="109:26">0x51cf</literal></expr>:</case> <comment type="block" pos:start="109:29" pos:end="109:53">/* PIO/DMA diagnostics */</comment>

    <case pos:start="111:5" pos:end="111:27">case <expr pos:start="111:10" pos:end="111:26"><literal type="number" pos:start="111:10" pos:end="111:15">0xa400</literal> <operator pos:start="111:17" pos:end="111:19">...</operator> <literal type="number" pos:start="111:21" pos:end="111:26">0xa67f</literal></expr>:</case> <comment type="block" pos:start="111:29" pos:end="111:51">/* IOMMU diagnostics */</comment>

    <case pos:start="113:5" pos:end="113:27">case <expr pos:start="113:10" pos:end="113:26"><literal type="number" pos:start="113:10" pos:end="113:15">0xa800</literal> <operator pos:start="113:17" pos:end="113:19">...</operator> <literal type="number" pos:start="113:21" pos:end="113:26">0xa80f</literal></expr>:</case> <comment type="block" pos:start="113:29" pos:end="113:55">/* Interrupt diagnostics */</comment>

    <case pos:start="115:5" pos:end="115:27">case <expr pos:start="115:10" pos:end="115:26"><literal type="number" pos:start="115:10" pos:end="115:15">0xf000</literal> <operator pos:start="115:17" pos:end="115:19">...</operator> <literal type="number" pos:start="115:21" pos:end="115:26">0xf01f</literal></expr>:</case> <comment type="block" pos:start="115:29" pos:end="115:60">/* FFB config, memory control */</comment>

        <comment type="block" pos:start="117:9" pos:end="117:27">/* we don't care */</comment>

    <default pos:start="119:5" pos:end="119:12">default:</default>

        <break pos:start="121:9" pos:end="121:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
