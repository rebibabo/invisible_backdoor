<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15451.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">os_host_main_loop_wait</name><parameter_list pos:start="1:34" pos:end="1:46">(<parameter pos:start="1:35" pos:end="1:45"><decl pos:start="1:35" pos:end="1:45"><type pos:start="1:35" pos:end="1:37"><name pos:start="1:35" pos:end="1:37">int</name></type> <name pos:start="1:39" pos:end="1:45">timeout</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="97:1">{<block_content pos:start="5:5" pos:end="95:15">

    <decl_stmt pos:start="5:5" pos:end="5:15"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>, <decl pos:start="5:14" pos:end="5:14"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:14" pos:end="5:14">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">PollingEntry</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:20">pe</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:35"><decl pos:start="9:5" pos:end="9:34"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">WaitObjects</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:18">w</name> <init pos:start="9:20" pos:end="9:34">= <expr pos:start="9:22" pos:end="9:34"><operator pos:start="9:22" pos:end="9:22">&amp;</operator><name pos:start="9:23" pos:end="9:34">wait_objects</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:25"><specifier pos:start="11:5" pos:end="11:10">static</specifier> <name pos:start="11:12" pos:end="11:25"><name pos:start="11:12" pos:end="11:17">struct</name> <name pos:start="11:19" pos:end="11:25">timeval</name></name></type> <name pos:start="11:27" pos:end="11:29">tv0</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:68">/* XXX: need to suppress polling by better using win32 events */</comment>

    <expr_stmt pos:start="17:5" pos:end="17:12"><expr pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:7">ret</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <literal type="number" pos:start="17:11" pos:end="17:11">0</literal></expr>;</expr_stmt>

    <for pos:start="19:5" pos:end="23:5">for <control pos:start="19:9" pos:end="19:61">(<init pos:start="19:10" pos:end="19:34"><expr pos:start="19:10" pos:end="19:33"><name pos:start="19:10" pos:end="19:11">pe</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <name pos:start="19:15" pos:end="19:33">first_polling_entry</name></expr>;</init> <condition pos:start="19:36" pos:end="19:46"><expr pos:start="19:36" pos:end="19:45"><name pos:start="19:36" pos:end="19:37">pe</name> <operator pos:start="19:39" pos:end="19:40">!=</operator> <name pos:start="19:42" pos:end="19:45">NULL</name></expr>;</condition> <incr pos:start="19:48" pos:end="19:60"><expr pos:start="19:48" pos:end="19:60"><name pos:start="19:48" pos:end="19:49">pe</name> <operator pos:start="19:51" pos:end="19:51">=</operator> <name pos:start="19:53" pos:end="19:60"><name pos:start="19:53" pos:end="19:54">pe</name><operator pos:start="19:55" pos:end="19:56">-&gt;</operator><name pos:start="19:57" pos:end="19:60">next</name></name></expr></incr>)</control> <block pos:start="19:63" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:36">

        <expr_stmt pos:start="21:9" pos:end="21:36"><expr pos:start="21:9" pos:end="21:35"><name pos:start="21:9" pos:end="21:11">ret</name> <operator pos:start="21:13" pos:end="21:14">|=</operator> <call pos:start="21:16" pos:end="21:35"><name pos:start="21:16" pos:end="21:23"><name pos:start="21:16" pos:end="21:17">pe</name><operator pos:start="21:18" pos:end="21:19">-&gt;</operator><name pos:start="21:20" pos:end="21:23">func</name></name><argument_list pos:start="21:24" pos:end="21:35">(<argument pos:start="21:25" pos:end="21:34"><expr pos:start="21:25" pos:end="21:34"><name pos:start="21:25" pos:end="21:34"><name pos:start="21:25" pos:end="21:26">pe</name><operator pos:start="21:27" pos:end="21:28">-&gt;</operator><name pos:start="21:29" pos:end="21:34">opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:17">(<expr pos:start="25:9" pos:end="25:16"><name pos:start="25:9" pos:end="25:11">ret</name> <operator pos:start="25:13" pos:end="25:14">!=</operator> <literal type="number" pos:start="25:16" pos:end="25:16">0</literal></expr>)</condition> <block pos:start="25:19" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:19">

        <return pos:start="27:9" pos:end="27:19">return <expr pos:start="27:16" pos:end="27:18"><name pos:start="27:16" pos:end="27:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="33:5" pos:end="43:5"><if pos:start="33:5" pos:end="43:5">if <condition pos:start="33:8" pos:end="33:18">(<expr pos:start="33:9" pos:end="33:17"><name pos:start="33:9" pos:end="33:12">nfds</name> <operator pos:start="33:14" pos:end="33:15">&gt;=</operator> <literal type="number" pos:start="33:17" pos:end="33:17">0</literal></expr>)</condition> <block pos:start="33:20" pos:end="43:5">{<block_content pos:start="35:9" pos:end="41:9">

        <expr_stmt pos:start="35:9" pos:end="35:58"><expr pos:start="35:9" pos:end="35:57"><name pos:start="35:9" pos:end="35:11">ret</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <call pos:start="35:15" pos:end="35:57"><name pos:start="35:15" pos:end="35:20">select</name><argument_list pos:start="35:21" pos:end="35:57">(<argument pos:start="35:22" pos:end="35:29"><expr pos:start="35:22" pos:end="35:29"><name pos:start="35:22" pos:end="35:25">nfds</name> <operator pos:start="35:27" pos:end="35:27">+</operator> <literal type="number" pos:start="35:29" pos:end="35:29">1</literal></expr></argument>, <argument pos:start="35:32" pos:end="35:36"><expr pos:start="35:32" pos:end="35:36"><operator pos:start="35:32" pos:end="35:32">&amp;</operator><name pos:start="35:33" pos:end="35:36">rfds</name></expr></argument>, <argument pos:start="35:39" pos:end="35:43"><expr pos:start="35:39" pos:end="35:43"><operator pos:start="35:39" pos:end="35:39">&amp;</operator><name pos:start="35:40" pos:end="35:43">wfds</name></expr></argument>, <argument pos:start="35:46" pos:end="35:50"><expr pos:start="35:46" pos:end="35:50"><operator pos:start="35:46" pos:end="35:46">&amp;</operator><name pos:start="35:47" pos:end="35:50">xfds</name></expr></argument>, <argument pos:start="35:53" pos:end="35:56"><expr pos:start="35:53" pos:end="35:56"><operator pos:start="35:53" pos:end="35:53">&amp;</operator><name pos:start="35:54" pos:end="35:56">tv0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="41:9"><if pos:start="37:9" pos:end="41:9">if <condition pos:start="37:12" pos:end="37:21">(<expr pos:start="37:13" pos:end="37:20"><name pos:start="37:13" pos:end="37:15">ret</name> <operator pos:start="37:17" pos:end="37:18">!=</operator> <literal type="number" pos:start="37:20" pos:end="37:20">0</literal></expr>)</condition> <block pos:start="37:23" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:24">

            <expr_stmt pos:start="39:13" pos:end="39:24"><expr pos:start="39:13" pos:end="39:23"><name pos:start="39:13" pos:end="39:19">timeout</name> <operator pos:start="39:21" pos:end="39:21">=</operator> <literal type="number" pos:start="39:23" pos:end="39:23">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="47:5" pos:end="53:5">for <control pos:start="47:9" pos:end="47:32">(<init pos:start="47:10" pos:end="47:15"><expr pos:start="47:10" pos:end="47:14"><name pos:start="47:10" pos:end="47:10">i</name> <operator pos:start="47:12" pos:end="47:12">=</operator> <literal type="number" pos:start="47:14" pos:end="47:14">0</literal></expr>;</init> <condition pos:start="47:17" pos:end="47:27"><expr pos:start="47:17" pos:end="47:26"><name pos:start="47:17" pos:end="47:17">i</name> <operator pos:start="47:19" pos:end="47:19">&lt;</operator> <name pos:start="47:21" pos:end="47:26"><name pos:start="47:21" pos:end="47:21">w</name><operator pos:start="47:22" pos:end="47:23">-&gt;</operator><name pos:start="47:24" pos:end="47:26">num</name></name></expr>;</condition> <incr pos:start="47:29" pos:end="47:31"><expr pos:start="47:29" pos:end="47:31"><name pos:start="47:29" pos:end="47:29">i</name><operator pos:start="47:30" pos:end="47:31">++</operator></expr></incr>)</control> <block pos:start="47:34" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:37">

        <expr_stmt pos:start="49:9" pos:end="49:46"><expr pos:start="49:9" pos:end="49:45"><name pos:start="49:9" pos:end="49:19"><name pos:start="49:9" pos:end="49:16">poll_fds</name><index pos:start="49:17" pos:end="49:19">[<expr pos:start="49:18" pos:end="49:18"><name pos:start="49:18" pos:end="49:18">i</name></expr>]</index></name><operator pos:start="49:20" pos:end="49:20">.</operator><name pos:start="49:21" pos:end="49:22">fd</name> <operator pos:start="49:24" pos:end="49:24">=</operator> <operator pos:start="49:26" pos:end="49:26">(</operator><name pos:start="49:27" pos:end="49:31">DWORD</name><operator pos:start="49:32" pos:end="49:32">)</operator> <name pos:start="49:34" pos:end="49:45"><name pos:start="49:34" pos:end="49:34">w</name><operator pos:start="49:35" pos:end="49:36">-&gt;</operator><name pos:start="49:37" pos:end="49:42">events</name><index pos:start="49:43" pos:end="49:45">[<expr pos:start="49:44" pos:end="49:44"><name pos:start="49:44" pos:end="49:44">i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:37"><expr pos:start="51:9" pos:end="51:36"><name pos:start="51:9" pos:end="51:19"><name pos:start="51:9" pos:end="51:16">poll_fds</name><index pos:start="51:17" pos:end="51:19">[<expr pos:start="51:18" pos:end="51:18"><name pos:start="51:18" pos:end="51:18">i</name></expr>]</index></name><operator pos:start="51:20" pos:end="51:20">.</operator><name pos:start="51:21" pos:end="51:26">events</name> <operator pos:start="51:28" pos:end="51:28">=</operator> <name pos:start="51:30" pos:end="51:36">G_IO_IN</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="57:5" pos:end="57:33"><expr pos:start="57:5" pos:end="57:32"><call pos:start="57:5" pos:end="57:32"><name pos:start="57:5" pos:end="57:30">qemu_mutex_unlock_iothread</name><argument_list pos:start="57:31" pos:end="57:32">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:44"><expr pos:start="59:5" pos:end="59:43"><name pos:start="59:5" pos:end="59:7">ret</name> <operator pos:start="59:9" pos:end="59:9">=</operator> <call pos:start="59:11" pos:end="59:43"><name pos:start="59:11" pos:end="59:16">g_poll</name><argument_list pos:start="59:17" pos:end="59:43">(<argument pos:start="59:18" pos:end="59:25"><expr pos:start="59:18" pos:end="59:25"><name pos:start="59:18" pos:end="59:25">poll_fds</name></expr></argument>, <argument pos:start="59:28" pos:end="59:33"><expr pos:start="59:28" pos:end="59:33"><name pos:start="59:28" pos:end="59:33"><name pos:start="59:28" pos:end="59:28">w</name><operator pos:start="59:29" pos:end="59:30">-&gt;</operator><name pos:start="59:31" pos:end="59:33">num</name></name></expr></argument>, <argument pos:start="59:36" pos:end="59:42"><expr pos:start="59:36" pos:end="59:42"><name pos:start="59:36" pos:end="59:42">timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:31"><expr pos:start="61:5" pos:end="61:30"><call pos:start="61:5" pos:end="61:30"><name pos:start="61:5" pos:end="61:28">qemu_mutex_lock_iothread</name><argument_list pos:start="61:29" pos:end="61:30">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="81:5"><if pos:start="63:5" pos:end="81:5">if <condition pos:start="63:8" pos:end="63:16">(<expr pos:start="63:9" pos:end="63:15"><name pos:start="63:9" pos:end="63:11">ret</name> <operator pos:start="63:13" pos:end="63:13">&gt;</operator> <literal type="number" pos:start="63:15" pos:end="63:15">0</literal></expr>)</condition> <block pos:start="63:18" pos:end="81:5">{<block_content pos:start="65:9" pos:end="79:9">

        <for pos:start="65:9" pos:end="69:9">for <control pos:start="65:13" pos:end="65:36">(<init pos:start="65:14" pos:end="65:19"><expr pos:start="65:14" pos:end="65:18"><name pos:start="65:14" pos:end="65:14">i</name> <operator pos:start="65:16" pos:end="65:16">=</operator> <literal type="number" pos:start="65:18" pos:end="65:18">0</literal></expr>;</init> <condition pos:start="65:21" pos:end="65:31"><expr pos:start="65:21" pos:end="65:30"><name pos:start="65:21" pos:end="65:21">i</name> <operator pos:start="65:23" pos:end="65:23">&lt;</operator> <name pos:start="65:25" pos:end="65:30"><name pos:start="65:25" pos:end="65:25">w</name><operator pos:start="65:26" pos:end="65:27">-&gt;</operator><name pos:start="65:28" pos:end="65:30">num</name></name></expr>;</condition> <incr pos:start="65:33" pos:end="65:35"><expr pos:start="65:33" pos:end="65:35"><name pos:start="65:33" pos:end="65:33">i</name><operator pos:start="65:34" pos:end="65:35">++</operator></expr></incr>)</control> <block pos:start="65:38" pos:end="69:9">{<block_content pos:start="67:13" pos:end="67:48">

            <expr_stmt pos:start="67:13" pos:end="67:48"><expr pos:start="67:13" pos:end="67:47"><name pos:start="67:13" pos:end="67:25"><name pos:start="67:13" pos:end="67:13">w</name><operator pos:start="67:14" pos:end="67:15">-&gt;</operator><name pos:start="67:16" pos:end="67:22">revents</name><index pos:start="67:23" pos:end="67:25">[<expr pos:start="67:24" pos:end="67:24"><name pos:start="67:24" pos:end="67:24">i</name></expr>]</index></name> <operator pos:start="67:27" pos:end="67:27">=</operator> <name pos:start="67:29" pos:end="67:39"><name pos:start="67:29" pos:end="67:36">poll_fds</name><index pos:start="67:37" pos:end="67:39">[<expr pos:start="67:38" pos:end="67:38"><name pos:start="67:38" pos:end="67:38">i</name></expr>]</index></name><operator pos:start="67:40" pos:end="67:40">.</operator><name pos:start="67:41" pos:end="67:47">revents</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <for pos:start="71:9" pos:end="79:9">for <control pos:start="71:13" pos:end="71:36">(<init pos:start="71:14" pos:end="71:19"><expr pos:start="71:14" pos:end="71:18"><name pos:start="71:14" pos:end="71:14">i</name> <operator pos:start="71:16" pos:end="71:16">=</operator> <literal type="number" pos:start="71:18" pos:end="71:18">0</literal></expr>;</init> <condition pos:start="71:21" pos:end="71:31"><expr pos:start="71:21" pos:end="71:30"><name pos:start="71:21" pos:end="71:21">i</name> <operator pos:start="71:23" pos:end="71:23">&lt;</operator> <name pos:start="71:25" pos:end="71:30"><name pos:start="71:25" pos:end="71:25">w</name><operator pos:start="71:26" pos:end="71:27">-&gt;</operator><name pos:start="71:28" pos:end="71:30">num</name></name></expr>;</condition> <incr pos:start="71:33" pos:end="71:35"><expr pos:start="71:33" pos:end="71:35"><name pos:start="71:33" pos:end="71:33">i</name><operator pos:start="71:34" pos:end="71:35">++</operator></expr></incr>)</control> <block pos:start="71:38" pos:end="79:9">{<block_content pos:start="73:13" pos:end="77:13">

            <if_stmt pos:start="73:13" pos:end="77:13"><if pos:start="73:13" pos:end="77:13">if <condition pos:start="73:16" pos:end="73:44">(<expr pos:start="73:17" pos:end="73:43"><name pos:start="73:17" pos:end="73:29"><name pos:start="73:17" pos:end="73:17">w</name><operator pos:start="73:18" pos:end="73:19">-&gt;</operator><name pos:start="73:20" pos:end="73:26">revents</name><index pos:start="73:27" pos:end="73:29">[<expr pos:start="73:28" pos:end="73:28"><name pos:start="73:28" pos:end="73:28">i</name></expr>]</index></name> <operator pos:start="73:31" pos:end="73:32">&amp;&amp;</operator> <name pos:start="73:34" pos:end="73:43"><name pos:start="73:34" pos:end="73:34">w</name><operator pos:start="73:35" pos:end="73:36">-&gt;</operator><name pos:start="73:37" pos:end="73:40">func</name><index pos:start="73:41" pos:end="73:43">[<expr pos:start="73:42" pos:end="73:42"><name pos:start="73:42" pos:end="73:42">i</name></expr>]</index></name></expr>)</condition> <block pos:start="73:46" pos:end="77:13">{<block_content pos:start="75:17" pos:end="75:41">

                <expr_stmt pos:start="75:17" pos:end="75:41"><expr pos:start="75:17" pos:end="75:40"><name pos:start="75:17" pos:end="75:26"><name pos:start="75:17" pos:end="75:17">w</name><operator pos:start="75:18" pos:end="75:19">-&gt;</operator><name pos:start="75:20" pos:end="75:23">func</name><index pos:start="75:24" pos:end="75:26">[<expr pos:start="75:25" pos:end="75:25"><name pos:start="75:25" pos:end="75:25">i</name></expr>]</index></name><operator pos:start="75:27" pos:end="75:27">(</operator><name pos:start="75:28" pos:end="75:39"><name pos:start="75:28" pos:end="75:28">w</name><operator pos:start="75:29" pos:end="75:30">-&gt;</operator><name pos:start="75:31" pos:end="75:36">opaque</name><index pos:start="75:37" pos:end="75:39">[<expr pos:start="75:38" pos:end="75:38"><name pos:start="75:38" pos:end="75:38">i</name></expr>]</index></name><operator pos:start="75:40" pos:end="75:40">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="85:5" pos:end="91:7">/* If an edge-triggered socket event occurred, select will return a

     * positive result on the next iteration.  We do not need to do anything

     * here.

     */</comment>



    <return pos:start="95:5" pos:end="95:15">return <expr pos:start="95:12" pos:end="95:14"><name pos:start="95:12" pos:end="95:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
