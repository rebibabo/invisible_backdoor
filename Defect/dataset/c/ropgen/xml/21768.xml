<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21768.c" pos:tabs="8"><function pos:start="1:1" pos:end="225:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">qcow_open</name><parameter_list pos:start="1:21" pos:end="1:75">(<parameter pos:start="1:22" pos:end="1:41"><decl pos:start="1:22" pos:end="1:41"><type pos:start="1:22" pos:end="1:41"><name pos:start="1:22" pos:end="1:37">BlockDriverState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:41">bs</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:63"><decl pos:start="1:44" pos:end="1:63"><type pos:start="1:44" pos:end="1:63"><specifier pos:start="1:44" pos:end="1:48">const</specifier> <name pos:start="1:50" pos:end="1:53">char</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:63">filename</name></decl></parameter>, <parameter pos:start="1:66" pos:end="1:74"><decl pos:start="1:66" pos:end="1:74"><type pos:start="1:66" pos:end="1:74"><name pos:start="1:66" pos:end="1:68">int</name></type> <name pos:start="1:70" pos:end="1:74">flags</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="225:1">{<block_content pos:start="5:5" pos:end="223:14">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">BDRVQcowState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">s</name> <init pos:start="5:22" pos:end="5:33">= <expr pos:start="5:24" pos:end="5:33"><name pos:start="5:24" pos:end="5:33"><name pos:start="5:24" pos:end="5:25">bs</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">len</name></decl>, <decl pos:start="7:14" pos:end="7:14"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:14" pos:end="7:14">i</name></decl>, <decl pos:start="7:17" pos:end="7:21"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:17" pos:end="7:21">shift</name></decl>, <decl pos:start="7:24" pos:end="7:26"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:24" pos:end="7:26">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:14">QCowHeader</name></type> <name pos:start="9:16" pos:end="9:21">header</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:68"><expr pos:start="13:5" pos:end="13:67"><name pos:start="13:5" pos:end="13:7">ret</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <call pos:start="13:11" pos:end="13:67"><name pos:start="13:11" pos:end="13:24">bdrv_file_open</name><argument_list pos:start="13:25" pos:end="13:67">(<argument pos:start="13:26" pos:end="13:31"><expr pos:start="13:26" pos:end="13:31"><operator pos:start="13:26" pos:end="13:26">&amp;</operator><name pos:start="13:27" pos:end="13:31"><name pos:start="13:27" pos:end="13:27">s</name><operator pos:start="13:28" pos:end="13:29">-&gt;</operator><name pos:start="13:30" pos:end="13:31">hd</name></name></expr></argument>, <argument pos:start="13:34" pos:end="13:41"><expr pos:start="13:34" pos:end="13:41"><name pos:start="13:34" pos:end="13:41">filename</name></expr></argument>, <argument pos:start="13:44" pos:end="13:66"><expr pos:start="13:44" pos:end="13:66"><name pos:start="13:44" pos:end="13:48">flags</name> <operator pos:start="13:50" pos:end="13:50">|</operator> <name pos:start="13:52" pos:end="13:66">BDRV_O_AUTOGROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="17:19"><if pos:start="15:5" pos:end="17:19">if <condition pos:start="15:8" pos:end="15:16">(<expr pos:start="15:9" pos:end="15:15"><name pos:start="15:9" pos:end="15:11">ret</name> <operator pos:start="15:13" pos:end="15:13">&lt;</operator> <literal type="number" pos:start="15:15" pos:end="15:15">0</literal></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:19"><block_content pos:start="17:9" pos:end="17:19">

        <return pos:start="17:9" pos:end="17:19">return <expr pos:start="17:16" pos:end="17:18"><name pos:start="17:16" pos:end="17:18">ret</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="19:5" pos:end="21:18"><if pos:start="19:5" pos:end="21:18">if <condition pos:start="19:8" pos:end="19:72">(<expr pos:start="19:9" pos:end="19:71"><call pos:start="19:9" pos:end="19:53"><name pos:start="19:9" pos:end="19:18">bdrv_pread</name><argument_list pos:start="19:19" pos:end="19:53">(<argument pos:start="19:20" pos:end="19:24"><expr pos:start="19:20" pos:end="19:24"><name pos:start="19:20" pos:end="19:24"><name pos:start="19:20" pos:end="19:20">s</name><operator pos:start="19:21" pos:end="19:22">-&gt;</operator><name pos:start="19:23" pos:end="19:24">hd</name></name></expr></argument>, <argument pos:start="19:27" pos:end="19:27"><expr pos:start="19:27" pos:end="19:27"><literal type="number" pos:start="19:27" pos:end="19:27">0</literal></expr></argument>, <argument pos:start="19:30" pos:end="19:36"><expr pos:start="19:30" pos:end="19:36"><operator pos:start="19:30" pos:end="19:30">&amp;</operator><name pos:start="19:31" pos:end="19:36">header</name></expr></argument>, <argument pos:start="19:39" pos:end="19:52"><expr pos:start="19:39" pos:end="19:52"><sizeof pos:start="19:39" pos:end="19:52">sizeof<argument_list pos:start="19:45" pos:end="19:52">(<argument pos:start="19:46" pos:end="19:51"><expr pos:start="19:46" pos:end="19:51"><name pos:start="19:46" pos:end="19:51">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="19:55" pos:end="19:56">!=</operator> <sizeof pos:start="19:58" pos:end="19:71">sizeof<argument_list pos:start="19:64" pos:end="19:71">(<argument pos:start="19:65" pos:end="19:70"><expr pos:start="19:65" pos:end="19:70"><name pos:start="19:65" pos:end="19:70">header</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:18"><block_content pos:start="21:9" pos:end="21:18">

        <goto pos:start="21:9" pos:end="21:18">goto <name pos:start="21:14" pos:end="21:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:32"><expr pos:start="23:5" pos:end="23:31"><call pos:start="23:5" pos:end="23:31"><name pos:start="23:5" pos:end="23:16">be32_to_cpus</name><argument_list pos:start="23:17" pos:end="23:31">(<argument pos:start="23:18" pos:end="23:30"><expr pos:start="23:18" pos:end="23:30"><operator pos:start="23:18" pos:end="23:18">&amp;</operator><name pos:start="23:19" pos:end="23:30"><name pos:start="23:19" pos:end="23:24">header</name><operator pos:start="23:25" pos:end="23:25">.</operator><name pos:start="23:26" pos:end="23:30">magic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:34"><expr pos:start="25:5" pos:end="25:33"><call pos:start="25:5" pos:end="25:33"><name pos:start="25:5" pos:end="25:16">be32_to_cpus</name><argument_list pos:start="25:17" pos:end="25:33">(<argument pos:start="25:18" pos:end="25:32"><expr pos:start="25:18" pos:end="25:32"><operator pos:start="25:18" pos:end="25:18">&amp;</operator><name pos:start="25:19" pos:end="25:32"><name pos:start="25:19" pos:end="25:24">header</name><operator pos:start="25:25" pos:end="25:25">.</operator><name pos:start="25:26" pos:end="25:32">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:46"><expr pos:start="27:5" pos:end="27:45"><call pos:start="27:5" pos:end="27:45"><name pos:start="27:5" pos:end="27:16">be64_to_cpus</name><argument_list pos:start="27:17" pos:end="27:45">(<argument pos:start="27:18" pos:end="27:44"><expr pos:start="27:18" pos:end="27:44"><operator pos:start="27:18" pos:end="27:18">&amp;</operator><name pos:start="27:19" pos:end="27:44"><name pos:start="27:19" pos:end="27:24">header</name><operator pos:start="27:25" pos:end="27:25">.</operator><name pos:start="27:26" pos:end="27:44">backing_file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:44"><expr pos:start="29:5" pos:end="29:43"><call pos:start="29:5" pos:end="29:43"><name pos:start="29:5" pos:end="29:16">be32_to_cpus</name><argument_list pos:start="29:17" pos:end="29:43">(<argument pos:start="29:18" pos:end="29:42"><expr pos:start="29:18" pos:end="29:42"><operator pos:start="29:18" pos:end="29:18">&amp;</operator><name pos:start="29:19" pos:end="29:42"><name pos:start="29:19" pos:end="29:24">header</name><operator pos:start="29:25" pos:end="29:25">.</operator><name pos:start="29:26" pos:end="29:42">backing_file_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:31"><expr pos:start="31:5" pos:end="31:30"><call pos:start="31:5" pos:end="31:30"><name pos:start="31:5" pos:end="31:16">be64_to_cpus</name><argument_list pos:start="31:17" pos:end="31:30">(<argument pos:start="31:18" pos:end="31:29"><expr pos:start="31:18" pos:end="31:29"><operator pos:start="31:18" pos:end="31:18">&amp;</operator><name pos:start="31:19" pos:end="31:29"><name pos:start="31:19" pos:end="31:24">header</name><operator pos:start="31:25" pos:end="31:25">.</operator><name pos:start="31:26" pos:end="31:29">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:39"><expr pos:start="33:5" pos:end="33:38"><call pos:start="33:5" pos:end="33:38"><name pos:start="33:5" pos:end="33:16">be32_to_cpus</name><argument_list pos:start="33:17" pos:end="33:38">(<argument pos:start="33:18" pos:end="33:37"><expr pos:start="33:18" pos:end="33:37"><operator pos:start="33:18" pos:end="33:18">&amp;</operator><name pos:start="33:19" pos:end="33:37"><name pos:start="33:19" pos:end="33:24">header</name><operator pos:start="33:25" pos:end="33:25">.</operator><name pos:start="33:26" pos:end="33:37">cluster_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:39"><expr pos:start="35:5" pos:end="35:38"><call pos:start="35:5" pos:end="35:38"><name pos:start="35:5" pos:end="35:16">be32_to_cpus</name><argument_list pos:start="35:17" pos:end="35:38">(<argument pos:start="35:18" pos:end="35:37"><expr pos:start="35:18" pos:end="35:37"><operator pos:start="35:18" pos:end="35:18">&amp;</operator><name pos:start="35:19" pos:end="35:37"><name pos:start="35:19" pos:end="35:24">header</name><operator pos:start="35:25" pos:end="35:25">.</operator><name pos:start="35:26" pos:end="35:37">crypt_method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:42"><expr pos:start="37:5" pos:end="37:41"><call pos:start="37:5" pos:end="37:41"><name pos:start="37:5" pos:end="37:16">be64_to_cpus</name><argument_list pos:start="37:17" pos:end="37:41">(<argument pos:start="37:18" pos:end="37:40"><expr pos:start="37:18" pos:end="37:40"><operator pos:start="37:18" pos:end="37:18">&amp;</operator><name pos:start="37:19" pos:end="37:40"><name pos:start="37:19" pos:end="37:24">header</name><operator pos:start="37:25" pos:end="37:25">.</operator><name pos:start="37:26" pos:end="37:40">l1_table_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:34"><expr pos:start="39:5" pos:end="39:33"><call pos:start="39:5" pos:end="39:33"><name pos:start="39:5" pos:end="39:16">be32_to_cpus</name><argument_list pos:start="39:17" pos:end="39:33">(<argument pos:start="39:18" pos:end="39:32"><expr pos:start="39:18" pos:end="39:32"><operator pos:start="39:18" pos:end="39:18">&amp;</operator><name pos:start="39:19" pos:end="39:32"><name pos:start="39:19" pos:end="39:24">header</name><operator pos:start="39:25" pos:end="39:25">.</operator><name pos:start="39:26" pos:end="39:32">l1_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:48"><expr pos:start="41:5" pos:end="41:47"><call pos:start="41:5" pos:end="41:47"><name pos:start="41:5" pos:end="41:16">be64_to_cpus</name><argument_list pos:start="41:17" pos:end="41:47">(<argument pos:start="41:18" pos:end="41:46"><expr pos:start="41:18" pos:end="41:46"><operator pos:start="41:18" pos:end="41:18">&amp;</operator><name pos:start="41:19" pos:end="41:46"><name pos:start="41:19" pos:end="41:24">header</name><operator pos:start="41:25" pos:end="41:25">.</operator><name pos:start="41:26" pos:end="41:46">refcount_table_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:50"><expr pos:start="43:5" pos:end="43:49"><call pos:start="43:5" pos:end="43:49"><name pos:start="43:5" pos:end="43:16">be32_to_cpus</name><argument_list pos:start="43:17" pos:end="43:49">(<argument pos:start="43:18" pos:end="43:48"><expr pos:start="43:18" pos:end="43:48"><operator pos:start="43:18" pos:end="43:18">&amp;</operator><name pos:start="43:19" pos:end="43:48"><name pos:start="43:19" pos:end="43:24">header</name><operator pos:start="43:25" pos:end="43:25">.</operator><name pos:start="43:26" pos:end="43:48">refcount_table_clusters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:43"><expr pos:start="45:5" pos:end="45:42"><call pos:start="45:5" pos:end="45:42"><name pos:start="45:5" pos:end="45:16">be64_to_cpus</name><argument_list pos:start="45:17" pos:end="45:42">(<argument pos:start="45:18" pos:end="45:41"><expr pos:start="45:18" pos:end="45:41"><operator pos:start="45:18" pos:end="45:18">&amp;</operator><name pos:start="45:19" pos:end="45:41"><name pos:start="45:19" pos:end="45:24">header</name><operator pos:start="45:25" pos:end="45:25">.</operator><name pos:start="45:26" pos:end="45:41">snapshots_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:39"><expr pos:start="47:5" pos:end="47:38"><call pos:start="47:5" pos:end="47:38"><name pos:start="47:5" pos:end="47:16">be32_to_cpus</name><argument_list pos:start="47:17" pos:end="47:38">(<argument pos:start="47:18" pos:end="47:37"><expr pos:start="47:18" pos:end="47:37"><operator pos:start="47:18" pos:end="47:18">&amp;</operator><name pos:start="47:19" pos:end="47:37"><name pos:start="47:19" pos:end="47:24">header</name><operator pos:start="47:25" pos:end="47:25">.</operator><name pos:start="47:26" pos:end="47:37">nb_snapshots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="51:5" pos:end="53:18"><if pos:start="51:5" pos:end="53:18">if <condition pos:start="51:8" pos:end="51:69">(<expr pos:start="51:9" pos:end="51:68"><name pos:start="51:9" pos:end="51:20"><name pos:start="51:9" pos:end="51:14">header</name><operator pos:start="51:15" pos:end="51:15">.</operator><name pos:start="51:16" pos:end="51:20">magic</name></name> <operator pos:start="51:22" pos:end="51:23">!=</operator> <name pos:start="51:25" pos:end="51:34">QCOW_MAGIC</name> <operator pos:start="51:36" pos:end="51:37">||</operator> <name pos:start="51:39" pos:end="51:52"><name pos:start="51:39" pos:end="51:44">header</name><operator pos:start="51:45" pos:end="51:45">.</operator><name pos:start="51:46" pos:end="51:52">version</name></name> <operator pos:start="51:54" pos:end="51:55">!=</operator> <name pos:start="51:57" pos:end="51:68">QCOW_VERSION</name></expr>)</condition><block type="pseudo" pos:start="53:9" pos:end="53:18"><block_content pos:start="53:9" pos:end="53:18">

        <goto pos:start="53:9" pos:end="53:18">goto <name pos:start="53:14" pos:end="53:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt pos:start="55:5" pos:end="61:18"><if pos:start="55:5" pos:end="61:18">if <condition pos:start="55:8" pos:end="59:33">(<expr pos:start="55:9" pos:end="59:32"><name pos:start="55:9" pos:end="55:19"><name pos:start="55:9" pos:end="55:14">header</name><operator pos:start="55:15" pos:end="55:15">.</operator><name pos:start="55:16" pos:end="55:19">size</name></name> <operator pos:start="55:21" pos:end="55:22">&lt;=</operator> <literal type="number" pos:start="55:24" pos:end="55:24">1</literal> <operator pos:start="55:26" pos:end="55:27">||</operator>

        <name pos:start="57:9" pos:end="57:27"><name pos:start="57:9" pos:end="57:14">header</name><operator pos:start="57:15" pos:end="57:15">.</operator><name pos:start="57:16" pos:end="57:27">cluster_bits</name></name> <operator pos:start="57:29" pos:end="57:29">&lt;</operator> <literal type="number" pos:start="57:31" pos:end="57:31">9</literal> <operator pos:start="57:33" pos:end="57:34">||</operator>

        <name pos:start="59:9" pos:end="59:27"><name pos:start="59:9" pos:end="59:14">header</name><operator pos:start="59:15" pos:end="59:15">.</operator><name pos:start="59:16" pos:end="59:27">cluster_bits</name></name> <operator pos:start="59:29" pos:end="59:29">&gt;</operator> <literal type="number" pos:start="59:31" pos:end="59:32">16</literal></expr>)</condition><block type="pseudo" pos:start="61:9" pos:end="61:18"><block_content pos:start="61:9" pos:end="61:18">

        <goto pos:start="61:9" pos:end="61:18">goto <name pos:start="61:14" pos:end="61:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt pos:start="63:5" pos:end="65:18"><if pos:start="63:5" pos:end="65:18">if <condition pos:start="63:8" pos:end="63:45">(<expr pos:start="63:9" pos:end="63:44"><name pos:start="63:9" pos:end="63:27"><name pos:start="63:9" pos:end="63:14">header</name><operator pos:start="63:15" pos:end="63:15">.</operator><name pos:start="63:16" pos:end="63:27">crypt_method</name></name> <operator pos:start="63:29" pos:end="63:29">&gt;</operator> <name pos:start="63:31" pos:end="63:44">QCOW_CRYPT_AES</name></expr>)</condition><block type="pseudo" pos:start="65:9" pos:end="65:18"><block_content pos:start="65:9" pos:end="65:18">

        <goto pos:start="65:9" pos:end="65:18">goto <name pos:start="65:14" pos:end="65:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:49"><expr pos:start="67:5" pos:end="67:48"><name pos:start="67:5" pos:end="67:26"><name pos:start="67:5" pos:end="67:5">s</name><operator pos:start="67:6" pos:end="67:7">-&gt;</operator><name pos:start="67:8" pos:end="67:26">crypt_method_header</name></name> <operator pos:start="67:28" pos:end="67:28">=</operator> <name pos:start="67:30" pos:end="67:48"><name pos:start="67:30" pos:end="67:35">header</name><operator pos:start="67:36" pos:end="67:36">.</operator><name pos:start="67:37" pos:end="67:48">crypt_method</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="69:5" pos:end="71:26"><if pos:start="69:5" pos:end="71:26">if <condition pos:start="69:8" pos:end="69:31">(<expr pos:start="69:9" pos:end="69:30"><name pos:start="69:9" pos:end="69:30"><name pos:start="69:9" pos:end="69:9">s</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:30">crypt_method_header</name></name></expr>)</condition><block type="pseudo" pos:start="71:9" pos:end="71:26"><block_content pos:start="71:9" pos:end="71:26">

        <expr_stmt pos:start="71:9" pos:end="71:26"><expr pos:start="71:9" pos:end="71:25"><name pos:start="71:9" pos:end="71:21"><name pos:start="71:9" pos:end="71:10">bs</name><operator pos:start="71:11" pos:end="71:12">-&gt;</operator><name pos:start="71:13" pos:end="71:21">encrypted</name></name> <operator pos:start="71:23" pos:end="71:23">=</operator> <literal type="number" pos:start="71:25" pos:end="71:25">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:42"><expr pos:start="73:5" pos:end="73:41"><name pos:start="73:5" pos:end="73:19"><name pos:start="73:5" pos:end="73:5">s</name><operator pos:start="73:6" pos:end="73:7">-&gt;</operator><name pos:start="73:8" pos:end="73:19">cluster_bits</name></name> <operator pos:start="73:21" pos:end="73:21">=</operator> <name pos:start="73:23" pos:end="73:41"><name pos:start="73:23" pos:end="73:28">header</name><operator pos:start="73:29" pos:end="73:29">.</operator><name pos:start="73:30" pos:end="73:41">cluster_bits</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:43"><expr pos:start="75:5" pos:end="75:42"><name pos:start="75:5" pos:end="75:19"><name pos:start="75:5" pos:end="75:5">s</name><operator pos:start="75:6" pos:end="75:7">-&gt;</operator><name pos:start="75:8" pos:end="75:19">cluster_size</name></name> <operator pos:start="75:21" pos:end="75:21">=</operator> <literal type="number" pos:start="75:23" pos:end="75:23">1</literal> <operator pos:start="75:25" pos:end="75:26">&lt;&lt;</operator> <name pos:start="75:28" pos:end="75:42"><name pos:start="75:28" pos:end="75:28">s</name><operator pos:start="75:29" pos:end="75:30">-&gt;</operator><name pos:start="75:31" pos:end="75:42">cluster_bits</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:52"><expr pos:start="77:5" pos:end="77:51"><name pos:start="77:5" pos:end="77:22"><name pos:start="77:5" pos:end="77:5">s</name><operator pos:start="77:6" pos:end="77:7">-&gt;</operator><name pos:start="77:8" pos:end="77:22">cluster_sectors</name></name> <operator pos:start="77:24" pos:end="77:24">=</operator> <literal type="number" pos:start="77:26" pos:end="77:26">1</literal> <operator pos:start="77:28" pos:end="77:29">&lt;&lt;</operator> <operator pos:start="77:31" pos:end="77:31">(</operator><name pos:start="77:32" pos:end="77:46"><name pos:start="77:32" pos:end="77:32">s</name><operator pos:start="77:33" pos:end="77:34">-&gt;</operator><name pos:start="77:35" pos:end="77:46">cluster_bits</name></name> <operator pos:start="77:48" pos:end="77:48">-</operator> <literal type="number" pos:start="77:50" pos:end="77:50">9</literal><operator pos:start="77:51" pos:end="77:51">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:37"><expr pos:start="79:5" pos:end="79:36"><name pos:start="79:5" pos:end="79:14"><name pos:start="79:5" pos:end="79:5">s</name><operator pos:start="79:6" pos:end="79:7">-&gt;</operator><name pos:start="79:8" pos:end="79:14">l2_bits</name></name> <operator pos:start="79:16" pos:end="79:16">=</operator> <name pos:start="79:18" pos:end="79:32"><name pos:start="79:18" pos:end="79:18">s</name><operator pos:start="79:19" pos:end="79:20">-&gt;</operator><name pos:start="79:21" pos:end="79:32">cluster_bits</name></name> <operator pos:start="79:34" pos:end="79:34">-</operator> <literal type="number" pos:start="79:36" pos:end="79:36">3</literal></expr>;</expr_stmt> <comment type="block" pos:start="79:39" pos:end="79:68">/* L2 is always one cluster */</comment>

    <expr_stmt pos:start="81:5" pos:end="81:33"><expr pos:start="81:5" pos:end="81:32"><name pos:start="81:5" pos:end="81:14"><name pos:start="81:5" pos:end="81:5">s</name><operator pos:start="81:6" pos:end="81:7">-&gt;</operator><name pos:start="81:8" pos:end="81:14">l2_size</name></name> <operator pos:start="81:16" pos:end="81:16">=</operator> <literal type="number" pos:start="81:18" pos:end="81:18">1</literal> <operator pos:start="81:20" pos:end="81:21">&lt;&lt;</operator> <name pos:start="81:23" pos:end="81:32"><name pos:start="81:23" pos:end="81:23">s</name><operator pos:start="81:24" pos:end="81:25">-&gt;</operator><name pos:start="81:26" pos:end="81:32">l2_bits</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:42"><expr pos:start="83:5" pos:end="83:41"><name pos:start="83:5" pos:end="83:21"><name pos:start="83:5" pos:end="83:6">bs</name><operator pos:start="83:7" pos:end="83:8">-&gt;</operator><name pos:start="83:9" pos:end="83:21">total_sectors</name></name> <operator pos:start="83:23" pos:end="83:23">=</operator> <name pos:start="83:25" pos:end="83:35"><name pos:start="83:25" pos:end="83:30">header</name><operator pos:start="83:31" pos:end="83:31">.</operator><name pos:start="83:32" pos:end="83:35">size</name></name> <operator pos:start="83:37" pos:end="83:37">/</operator> <literal type="number" pos:start="83:39" pos:end="83:41">512</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:50"><expr pos:start="85:5" pos:end="85:49"><name pos:start="85:5" pos:end="85:18"><name pos:start="85:5" pos:end="85:5">s</name><operator pos:start="85:6" pos:end="85:7">-&gt;</operator><name pos:start="85:8" pos:end="85:18">csize_shift</name></name> <operator pos:start="85:20" pos:end="85:20">=</operator> <operator pos:start="85:22" pos:end="85:22">(</operator><literal type="number" pos:start="85:23" pos:end="85:26">62</literal> <operator pos:start="85:26" pos:end="85:26">-</operator> <operator pos:start="85:28" pos:end="85:28">(</operator><name pos:start="85:29" pos:end="85:43"><name pos:start="85:29" pos:end="85:29">s</name><operator pos:start="85:30" pos:end="85:31">-&gt;</operator><name pos:start="85:32" pos:end="85:43">cluster_bits</name></name> <operator pos:start="85:45" pos:end="85:45">-</operator> <literal type="number" pos:start="85:47" pos:end="85:47">8</literal><operator pos:start="85:48" pos:end="85:48">)</operator><operator pos:start="85:49" pos:end="85:49">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:53"><expr pos:start="87:5" pos:end="87:52"><name pos:start="87:5" pos:end="87:17"><name pos:start="87:5" pos:end="87:5">s</name><operator pos:start="87:6" pos:end="87:7">-&gt;</operator><name pos:start="87:8" pos:end="87:17">csize_mask</name></name> <operator pos:start="87:19" pos:end="87:19">=</operator> <operator pos:start="87:21" pos:end="87:21">(</operator><literal type="number" pos:start="87:22" pos:end="87:22">1</literal> <operator pos:start="87:24" pos:end="87:25">&lt;&lt;</operator> <operator pos:start="87:27" pos:end="87:27">(</operator><name pos:start="87:28" pos:end="87:42"><name pos:start="87:28" pos:end="87:28">s</name><operator pos:start="87:29" pos:end="87:30">-&gt;</operator><name pos:start="87:31" pos:end="87:42">cluster_bits</name></name> <operator pos:start="87:44" pos:end="87:44">-</operator> <literal type="number" pos:start="87:46" pos:end="87:46">8</literal><operator pos:start="87:47" pos:end="87:47">)</operator><operator pos:start="87:48" pos:end="87:48">)</operator> <operator pos:start="87:50" pos:end="87:50">-</operator> <literal type="number" pos:start="87:52" pos:end="87:52">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:57"><expr pos:start="89:5" pos:end="89:56"><name pos:start="89:5" pos:end="89:26"><name pos:start="89:5" pos:end="89:5">s</name><operator pos:start="89:6" pos:end="89:7">-&gt;</operator><name pos:start="89:8" pos:end="89:26">cluster_offset_mask</name></name> <operator pos:start="89:28" pos:end="89:28">=</operator> <operator pos:start="89:30" pos:end="89:30">(</operator><literal type="number" pos:start="89:31" pos:end="89:33">1LL</literal> <operator pos:start="89:35" pos:end="89:36">&lt;&lt;</operator> <name pos:start="89:38" pos:end="89:51"><name pos:start="89:38" pos:end="89:38">s</name><operator pos:start="89:39" pos:end="89:40">-&gt;</operator><name pos:start="89:41" pos:end="89:51">csize_shift</name></name><operator pos:start="89:52" pos:end="89:52">)</operator> <operator pos:start="89:54" pos:end="89:54">-</operator> <literal type="number" pos:start="89:56" pos:end="89:56">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:60"><expr pos:start="91:5" pos:end="91:59"><name pos:start="91:5" pos:end="91:28"><name pos:start="91:5" pos:end="91:5">s</name><operator pos:start="91:6" pos:end="91:7">-&gt;</operator><name pos:start="91:8" pos:end="91:28">refcount_table_offset</name></name> <operator pos:start="91:30" pos:end="91:30">=</operator> <name pos:start="91:32" pos:end="91:59"><name pos:start="91:32" pos:end="91:37">header</name><operator pos:start="91:38" pos:end="91:38">.</operator><name pos:start="91:39" pos:end="91:59">refcount_table_offset</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="95:64"><expr pos:start="93:5" pos:end="95:63"><name pos:start="93:5" pos:end="93:26"><name pos:start="93:5" pos:end="93:5">s</name><operator pos:start="93:6" pos:end="93:7">-&gt;</operator><name pos:start="93:8" pos:end="93:26">refcount_table_size</name></name> <operator pos:start="93:28" pos:end="93:28">=</operator>

        <name pos:start="95:9" pos:end="95:38"><name pos:start="95:9" pos:end="95:14">header</name><operator pos:start="95:15" pos:end="95:15">.</operator><name pos:start="95:16" pos:end="95:38">refcount_table_clusters</name></name> <operator pos:start="95:40" pos:end="95:41">&lt;&lt;</operator> <operator pos:start="95:43" pos:end="95:43">(</operator><name pos:start="95:44" pos:end="95:58"><name pos:start="95:44" pos:end="95:44">s</name><operator pos:start="95:45" pos:end="95:46">-&gt;</operator><name pos:start="95:47" pos:end="95:58">cluster_bits</name></name> <operator pos:start="95:60" pos:end="95:60">-</operator> <literal type="number" pos:start="95:62" pos:end="95:62">3</literal><operator pos:start="95:63" pos:end="95:63">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="99:5" pos:end="99:50"><expr pos:start="99:5" pos:end="99:49"><name pos:start="99:5" pos:end="99:23"><name pos:start="99:5" pos:end="99:5">s</name><operator pos:start="99:6" pos:end="99:7">-&gt;</operator><name pos:start="99:8" pos:end="99:23">snapshots_offset</name></name> <operator pos:start="99:25" pos:end="99:25">=</operator> <name pos:start="99:27" pos:end="99:49"><name pos:start="99:27" pos:end="99:32">header</name><operator pos:start="99:33" pos:end="99:33">.</operator><name pos:start="99:34" pos:end="99:49">snapshots_offset</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:42"><expr pos:start="101:5" pos:end="101:41"><name pos:start="101:5" pos:end="101:19"><name pos:start="101:5" pos:end="101:5">s</name><operator pos:start="101:6" pos:end="101:7">-&gt;</operator><name pos:start="101:8" pos:end="101:19">nb_snapshots</name></name> <operator pos:start="101:21" pos:end="101:21">=</operator> <name pos:start="101:23" pos:end="101:41"><name pos:start="101:23" pos:end="101:28">header</name><operator pos:start="101:29" pos:end="101:29">.</operator><name pos:start="101:30" pos:end="101:41">nb_snapshots</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="105:5" pos:end="105:32">/* read the level 1 table */</comment>

    <expr_stmt pos:start="107:5" pos:end="107:32"><expr pos:start="107:5" pos:end="107:31"><name pos:start="107:5" pos:end="107:14"><name pos:start="107:5" pos:end="107:5">s</name><operator pos:start="107:6" pos:end="107:7">-&gt;</operator><name pos:start="107:8" pos:end="107:14">l1_size</name></name> <operator pos:start="107:16" pos:end="107:16">=</operator> <name pos:start="107:18" pos:end="107:31"><name pos:start="107:18" pos:end="107:23">header</name><operator pos:start="107:24" pos:end="107:24">.</operator><name pos:start="107:25" pos:end="107:31">l1_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:41"><expr pos:start="109:5" pos:end="109:40"><name pos:start="109:5" pos:end="109:9">shift</name> <operator pos:start="109:11" pos:end="109:11">=</operator> <name pos:start="109:13" pos:end="109:27"><name pos:start="109:13" pos:end="109:13">s</name><operator pos:start="109:14" pos:end="109:15">-&gt;</operator><name pos:start="109:16" pos:end="109:27">cluster_bits</name></name> <operator pos:start="109:29" pos:end="109:29">+</operator> <name pos:start="109:31" pos:end="109:40"><name pos:start="109:31" pos:end="109:31">s</name><operator pos:start="109:32" pos:end="109:33">-&gt;</operator><name pos:start="109:34" pos:end="109:40">l2_bits</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:71"><expr pos:start="111:5" pos:end="111:70"><name pos:start="111:5" pos:end="111:24"><name pos:start="111:5" pos:end="111:5">s</name><operator pos:start="111:6" pos:end="111:7">-&gt;</operator><name pos:start="111:8" pos:end="111:24">l1_vm_state_index</name></name> <operator pos:start="111:26" pos:end="111:26">=</operator> <operator pos:start="111:28" pos:end="111:28">(</operator><name pos:start="111:29" pos:end="111:39"><name pos:start="111:29" pos:end="111:34">header</name><operator pos:start="111:35" pos:end="111:35">.</operator><name pos:start="111:36" pos:end="111:39">size</name></name> <operator pos:start="111:41" pos:end="111:41">+</operator> <operator pos:start="111:43" pos:end="111:43">(</operator><literal type="number" pos:start="111:44" pos:end="111:46">1LL</literal> <operator pos:start="111:48" pos:end="111:49">&lt;&lt;</operator> <name pos:start="111:51" pos:end="111:55">shift</name><operator pos:start="111:56" pos:end="111:56">)</operator> <operator pos:start="111:58" pos:end="111:58">-</operator> <literal type="number" pos:start="111:60" pos:end="111:60">1</literal><operator pos:start="111:61" pos:end="111:61">)</operator> <operator pos:start="111:63" pos:end="111:64">&gt;&gt;</operator> <name pos:start="111:66" pos:end="111:70">shift</name></expr>;</expr_stmt>

    <comment type="block" pos:start="113:5" pos:end="115:27">/* the L1 table must contain at least enough entries to put

       header.size bytes */</comment>

    <if_stmt pos:start="117:5" pos:end="119:18"><if pos:start="117:5" pos:end="119:18">if <condition pos:start="117:8" pos:end="117:42">(<expr pos:start="117:9" pos:end="117:41"><name pos:start="117:9" pos:end="117:18"><name pos:start="117:9" pos:end="117:9">s</name><operator pos:start="117:10" pos:end="117:11">-&gt;</operator><name pos:start="117:12" pos:end="117:18">l1_size</name></name> <operator pos:start="117:20" pos:end="117:20">&lt;</operator> <name pos:start="117:22" pos:end="117:41"><name pos:start="117:22" pos:end="117:22">s</name><operator pos:start="117:23" pos:end="117:24">-&gt;</operator><name pos:start="117:25" pos:end="117:41">l1_vm_state_index</name></name></expr>)</condition><block type="pseudo" pos:start="119:9" pos:end="119:18"><block_content pos:start="119:9" pos:end="119:18">

        <goto pos:start="119:9" pos:end="119:18">goto <name pos:start="119:14" pos:end="119:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:48"><expr pos:start="121:5" pos:end="121:47"><name pos:start="121:5" pos:end="121:22"><name pos:start="121:5" pos:end="121:5">s</name><operator pos:start="121:6" pos:end="121:7">-&gt;</operator><name pos:start="121:8" pos:end="121:22">l1_table_offset</name></name> <operator pos:start="121:24" pos:end="121:24">=</operator> <name pos:start="121:26" pos:end="121:47"><name pos:start="121:26" pos:end="121:31">header</name><operator pos:start="121:32" pos:end="121:32">.</operator><name pos:start="121:33" pos:end="121:47">l1_table_offset</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:61"><expr pos:start="123:5" pos:end="123:60"><name pos:start="123:5" pos:end="123:15"><name pos:start="123:5" pos:end="123:5">s</name><operator pos:start="123:6" pos:end="123:7">-&gt;</operator><name pos:start="123:8" pos:end="123:15">l1_table</name></name> <operator pos:start="123:17" pos:end="123:17">=</operator> <call pos:start="123:19" pos:end="123:60"><name pos:start="123:19" pos:end="123:29">qemu_malloc</name><argument_list pos:start="123:30" pos:end="123:60">(<argument pos:start="123:31" pos:end="123:59"><expr pos:start="123:31" pos:end="123:59"><name pos:start="123:31" pos:end="123:40"><name pos:start="123:31" pos:end="123:31">s</name><operator pos:start="123:32" pos:end="123:33">-&gt;</operator><name pos:start="123:34" pos:end="123:40">l1_size</name></name> <operator pos:start="123:42" pos:end="123:42">*</operator> <sizeof pos:start="123:44" pos:end="123:59">sizeof<argument_list pos:start="123:50" pos:end="123:59">(<argument pos:start="123:51" pos:end="123:58"><expr pos:start="123:51" pos:end="123:58"><name pos:start="123:51" pos:end="123:58">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="125:5" pos:end="127:18"><if pos:start="125:5" pos:end="127:18">if <condition pos:start="125:8" pos:end="125:21">(<expr pos:start="125:9" pos:end="125:20"><operator pos:start="125:9" pos:end="125:9">!</operator><name pos:start="125:10" pos:end="125:20"><name pos:start="125:10" pos:end="125:10">s</name><operator pos:start="125:11" pos:end="125:12">-&gt;</operator><name pos:start="125:13" pos:end="125:20">l1_table</name></name></expr>)</condition><block type="pseudo" pos:start="127:9" pos:end="127:18"><block_content pos:start="127:9" pos:end="127:18">

        <goto pos:start="127:9" pos:end="127:18">goto <name pos:start="127:14" pos:end="127:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt pos:start="129:5" pos:end="133:18"><if pos:start="129:5" pos:end="133:18">if <condition pos:start="129:8" pos:end="131:38">(<expr pos:start="129:9" pos:end="131:37"><call pos:start="129:9" pos:end="129:89"><name pos:start="129:9" pos:end="129:18">bdrv_pread</name><argument_list pos:start="129:19" pos:end="129:89">(<argument pos:start="129:20" pos:end="129:24"><expr pos:start="129:20" pos:end="129:24"><name pos:start="129:20" pos:end="129:24"><name pos:start="129:20" pos:end="129:20">s</name><operator pos:start="129:21" pos:end="129:22">-&gt;</operator><name pos:start="129:23" pos:end="129:24">hd</name></name></expr></argument>, <argument pos:start="129:27" pos:end="129:44"><expr pos:start="129:27" pos:end="129:44"><name pos:start="129:27" pos:end="129:44"><name pos:start="129:27" pos:end="129:27">s</name><operator pos:start="129:28" pos:end="129:29">-&gt;</operator><name pos:start="129:30" pos:end="129:44">l1_table_offset</name></name></expr></argument>, <argument pos:start="129:47" pos:end="129:57"><expr pos:start="129:47" pos:end="129:57"><name pos:start="129:47" pos:end="129:57"><name pos:start="129:47" pos:end="129:47">s</name><operator pos:start="129:48" pos:end="129:49">-&gt;</operator><name pos:start="129:50" pos:end="129:57">l1_table</name></name></expr></argument>, <argument pos:start="129:60" pos:end="129:88"><expr pos:start="129:60" pos:end="129:88"><name pos:start="129:60" pos:end="129:69"><name pos:start="129:60" pos:end="129:60">s</name><operator pos:start="129:61" pos:end="129:62">-&gt;</operator><name pos:start="129:63" pos:end="129:69">l1_size</name></name> <operator pos:start="129:71" pos:end="129:71">*</operator> <sizeof pos:start="129:73" pos:end="129:88">sizeof<argument_list pos:start="129:79" pos:end="129:88">(<argument pos:start="129:80" pos:end="129:87"><expr pos:start="129:80" pos:end="129:87"><name pos:start="129:80" pos:end="129:87">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="129:91" pos:end="129:92">!=</operator>

        <name pos:start="131:9" pos:end="131:18"><name pos:start="131:9" pos:end="131:9">s</name><operator pos:start="131:10" pos:end="131:11">-&gt;</operator><name pos:start="131:12" pos:end="131:18">l1_size</name></name> <operator pos:start="131:20" pos:end="131:20">*</operator> <sizeof pos:start="131:22" pos:end="131:37">sizeof<argument_list pos:start="131:28" pos:end="131:37">(<argument pos:start="131:29" pos:end="131:36"><expr pos:start="131:29" pos:end="131:36"><name pos:start="131:29" pos:end="131:36">uint64_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo" pos:start="133:9" pos:end="133:18"><block_content pos:start="133:9" pos:end="133:18">

        <goto pos:start="133:9" pos:end="133:18">goto <name pos:start="133:14" pos:end="133:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <for pos:start="135:5" pos:end="139:5">for<control pos:start="135:8" pos:end="135:34">(<init pos:start="135:9" pos:end="135:14"><expr pos:start="135:9" pos:end="135:13"><name pos:start="135:9" pos:end="135:9">i</name> <operator pos:start="135:11" pos:end="135:11">=</operator> <literal type="number" pos:start="135:13" pos:end="135:13">0</literal></expr>;</init><condition pos:start="135:15" pos:end="135:29"><expr pos:start="135:15" pos:end="135:28"><name pos:start="135:15" pos:end="135:15">i</name> <operator pos:start="135:17" pos:end="135:17">&lt;</operator> <name pos:start="135:19" pos:end="135:28"><name pos:start="135:19" pos:end="135:19">s</name><operator pos:start="135:20" pos:end="135:21">-&gt;</operator><name pos:start="135:22" pos:end="135:28">l1_size</name></name></expr>;</condition> <incr pos:start="135:31" pos:end="135:33"><expr pos:start="135:31" pos:end="135:33"><name pos:start="135:31" pos:end="135:31">i</name><operator pos:start="135:32" pos:end="135:33">++</operator></expr></incr>)</control> <block pos:start="135:36" pos:end="139:5">{<block_content pos:start="137:9" pos:end="137:38">

        <expr_stmt pos:start="137:9" pos:end="137:38"><expr pos:start="137:9" pos:end="137:37"><call pos:start="137:9" pos:end="137:37"><name pos:start="137:9" pos:end="137:20">be64_to_cpus</name><argument_list pos:start="137:21" pos:end="137:37">(<argument pos:start="137:22" pos:end="137:36"><expr pos:start="137:22" pos:end="137:36"><operator pos:start="137:22" pos:end="137:22">&amp;</operator><name pos:start="137:23" pos:end="137:36"><name pos:start="137:23" pos:end="137:23">s</name><operator pos:start="137:24" pos:end="137:25">-&gt;</operator><name pos:start="137:26" pos:end="137:33">l1_table</name><index pos:start="137:34" pos:end="137:36">[<expr pos:start="137:35" pos:end="137:35"><name pos:start="137:35" pos:end="137:35">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <comment type="block" pos:start="141:5" pos:end="141:24">/* alloc L2 cache */</comment>

    <expr_stmt pos:start="143:5" pos:end="143:77"><expr pos:start="143:5" pos:end="143:76"><name pos:start="143:5" pos:end="143:15"><name pos:start="143:5" pos:end="143:5">s</name><operator pos:start="143:6" pos:end="143:7">-&gt;</operator><name pos:start="143:8" pos:end="143:15">l2_cache</name></name> <operator pos:start="143:17" pos:end="143:17">=</operator> <call pos:start="143:19" pos:end="143:76"><name pos:start="143:19" pos:end="143:29">qemu_malloc</name><argument_list pos:start="143:30" pos:end="143:76">(<argument pos:start="143:31" pos:end="143:75"><expr pos:start="143:31" pos:end="143:75"><name pos:start="143:31" pos:end="143:40"><name pos:start="143:31" pos:end="143:31">s</name><operator pos:start="143:32" pos:end="143:33">-&gt;</operator><name pos:start="143:34" pos:end="143:40">l2_size</name></name> <operator pos:start="143:42" pos:end="143:42">*</operator> <name pos:start="143:44" pos:end="143:56">L2_CACHE_SIZE</name> <operator pos:start="143:58" pos:end="143:58">*</operator> <sizeof pos:start="143:60" pos:end="143:75">sizeof<argument_list pos:start="143:66" pos:end="143:75">(<argument pos:start="143:67" pos:end="143:74"><expr pos:start="143:67" pos:end="143:74"><name pos:start="143:67" pos:end="143:74">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="145:5" pos:end="147:18"><if pos:start="145:5" pos:end="147:18">if <condition pos:start="145:8" pos:end="145:21">(<expr pos:start="145:9" pos:end="145:20"><operator pos:start="145:9" pos:end="145:9">!</operator><name pos:start="145:10" pos:end="145:20"><name pos:start="145:10" pos:end="145:10">s</name><operator pos:start="145:11" pos:end="145:12">-&gt;</operator><name pos:start="145:13" pos:end="145:20">l2_cache</name></name></expr>)</condition><block type="pseudo" pos:start="147:9" pos:end="147:18"><block_content pos:start="147:9" pos:end="147:18">

        <goto pos:start="147:9" pos:end="147:18">goto <name pos:start="147:14" pos:end="147:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:52"><expr pos:start="149:5" pos:end="149:51"><name pos:start="149:5" pos:end="149:20"><name pos:start="149:5" pos:end="149:5">s</name><operator pos:start="149:6" pos:end="149:7">-&gt;</operator><name pos:start="149:8" pos:end="149:20">cluster_cache</name></name> <operator pos:start="149:22" pos:end="149:22">=</operator> <call pos:start="149:24" pos:end="149:51"><name pos:start="149:24" pos:end="149:34">qemu_malloc</name><argument_list pos:start="149:35" pos:end="149:51">(<argument pos:start="149:36" pos:end="149:50"><expr pos:start="149:36" pos:end="149:50"><name pos:start="149:36" pos:end="149:50"><name pos:start="149:36" pos:end="149:36">s</name><operator pos:start="149:37" pos:end="149:38">-&gt;</operator><name pos:start="149:39" pos:end="149:50">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="151:5" pos:end="153:18"><if pos:start="151:5" pos:end="153:18">if <condition pos:start="151:8" pos:end="151:26">(<expr pos:start="151:9" pos:end="151:25"><operator pos:start="151:9" pos:end="151:9">!</operator><name pos:start="151:10" pos:end="151:25"><name pos:start="151:10" pos:end="151:10">s</name><operator pos:start="151:11" pos:end="151:12">-&gt;</operator><name pos:start="151:13" pos:end="151:25">cluster_cache</name></name></expr>)</condition><block type="pseudo" pos:start="153:9" pos:end="153:18"><block_content pos:start="153:9" pos:end="153:18">

        <goto pos:start="153:9" pos:end="153:18">goto <name pos:start="153:14" pos:end="153:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block" pos:start="155:5" pos:end="155:57">/* one more sector for decompressed data alignment */</comment>

    <expr_stmt pos:start="157:5" pos:end="157:57"><expr pos:start="157:5" pos:end="157:56"><name pos:start="157:5" pos:end="157:19"><name pos:start="157:5" pos:end="157:5">s</name><operator pos:start="157:6" pos:end="157:7">-&gt;</operator><name pos:start="157:8" pos:end="157:19">cluster_data</name></name> <operator pos:start="157:21" pos:end="157:21">=</operator> <call pos:start="157:23" pos:end="157:56"><name pos:start="157:23" pos:end="157:33">qemu_malloc</name><argument_list pos:start="157:34" pos:end="157:56">(<argument pos:start="157:35" pos:end="157:55"><expr pos:start="157:35" pos:end="157:55"><name pos:start="157:35" pos:end="157:49"><name pos:start="157:35" pos:end="157:35">s</name><operator pos:start="157:36" pos:end="157:37">-&gt;</operator><name pos:start="157:38" pos:end="157:49">cluster_size</name></name> <operator pos:start="157:51" pos:end="157:51">+</operator> <literal type="number" pos:start="157:53" pos:end="157:55">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="159:5" pos:end="161:18"><if pos:start="159:5" pos:end="161:18">if <condition pos:start="159:8" pos:end="159:25">(<expr pos:start="159:9" pos:end="159:24"><operator pos:start="159:9" pos:end="159:9">!</operator><name pos:start="159:10" pos:end="159:24"><name pos:start="159:10" pos:end="159:10">s</name><operator pos:start="159:11" pos:end="159:12">-&gt;</operator><name pos:start="159:13" pos:end="159:24">cluster_data</name></name></expr>)</condition><block type="pseudo" pos:start="161:9" pos:end="161:18"><block_content pos:start="161:9" pos:end="161:18">

        <goto pos:start="161:9" pos:end="161:18">goto <name pos:start="161:14" pos:end="161:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:33"><expr pos:start="163:5" pos:end="163:32"><name pos:start="163:5" pos:end="163:27"><name pos:start="163:5" pos:end="163:5">s</name><operator pos:start="163:6" pos:end="163:7">-&gt;</operator><name pos:start="163:8" pos:end="163:27">cluster_cache_offset</name></name> <operator pos:start="163:29" pos:end="163:29">=</operator> <operator pos:start="163:31" pos:end="163:31">-</operator><literal type="number" pos:start="163:32" pos:end="163:32">1</literal></expr>;</expr_stmt>



    <if_stmt pos:start="167:5" pos:end="169:18"><if pos:start="167:5" pos:end="169:18">if <condition pos:start="167:8" pos:end="167:30">(<expr pos:start="167:9" pos:end="167:29"><call pos:start="167:9" pos:end="167:25"><name pos:start="167:9" pos:end="167:21">refcount_init</name><argument_list pos:start="167:22" pos:end="167:25">(<argument pos:start="167:23" pos:end="167:24"><expr pos:start="167:23" pos:end="167:24"><name pos:start="167:23" pos:end="167:24">bs</name></expr></argument>)</argument_list></call> <operator pos:start="167:27" pos:end="167:27">&lt;</operator> <literal type="number" pos:start="167:29" pos:end="167:29">0</literal></expr>)</condition><block type="pseudo" pos:start="169:9" pos:end="169:18"><block_content pos:start="169:9" pos:end="169:18">

        <goto pos:start="169:9" pos:end="169:18">goto <name pos:start="169:14" pos:end="169:17">fail</name>;</goto></block_content></block></if></if_stmt>



    <comment type="block" pos:start="173:5" pos:end="173:36">/* read the backing file name */</comment>

    <if_stmt pos:start="175:5" pos:end="189:5"><if pos:start="175:5" pos:end="189:5">if <condition pos:start="175:8" pos:end="175:40">(<expr pos:start="175:9" pos:end="175:39"><name pos:start="175:9" pos:end="175:34"><name pos:start="175:9" pos:end="175:14">header</name><operator pos:start="175:15" pos:end="175:15">.</operator><name pos:start="175:16" pos:end="175:34">backing_file_offset</name></name> <operator pos:start="175:36" pos:end="175:37">!=</operator> <literal type="number" pos:start="175:39" pos:end="175:39">0</literal></expr>)</condition> <block pos:start="175:42" pos:end="189:5">{<block_content pos:start="177:9" pos:end="187:37">

        <expr_stmt pos:start="177:9" pos:end="177:39"><expr pos:start="177:9" pos:end="177:38"><name pos:start="177:9" pos:end="177:11">len</name> <operator pos:start="177:13" pos:end="177:13">=</operator> <name pos:start="177:15" pos:end="177:38"><name pos:start="177:15" pos:end="177:20">header</name><operator pos:start="177:21" pos:end="177:21">.</operator><name pos:start="177:22" pos:end="177:38">backing_file_size</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="179:9" pos:end="181:23"><if pos:start="179:9" pos:end="181:23">if <condition pos:start="179:12" pos:end="179:23">(<expr pos:start="179:13" pos:end="179:22"><name pos:start="179:13" pos:end="179:15">len</name> <operator pos:start="179:17" pos:end="179:17">&gt;</operator> <literal type="number" pos:start="179:19" pos:end="179:22">1023</literal></expr>)</condition><block type="pseudo" pos:start="181:13" pos:end="181:23"><block_content pos:start="181:13" pos:end="181:23">

            <expr_stmt pos:start="181:13" pos:end="181:23"><expr pos:start="181:13" pos:end="181:22"><name pos:start="181:13" pos:end="181:15">len</name> <operator pos:start="181:17" pos:end="181:17">=</operator> <literal type="number" pos:start="181:19" pos:end="181:22">1023</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="183:9" pos:end="185:22"><if pos:start="183:9" pos:end="185:22">if <condition pos:start="183:12" pos:end="183:88">(<expr pos:start="183:13" pos:end="183:87"><call pos:start="183:13" pos:end="183:80"><name pos:start="183:13" pos:end="183:22">bdrv_pread</name><argument_list pos:start="183:23" pos:end="183:80">(<argument pos:start="183:24" pos:end="183:28"><expr pos:start="183:24" pos:end="183:28"><name pos:start="183:24" pos:end="183:28"><name pos:start="183:24" pos:end="183:24">s</name><operator pos:start="183:25" pos:end="183:26">-&gt;</operator><name pos:start="183:27" pos:end="183:28">hd</name></name></expr></argument>, <argument pos:start="183:31" pos:end="183:56"><expr pos:start="183:31" pos:end="183:56"><name pos:start="183:31" pos:end="183:56"><name pos:start="183:31" pos:end="183:36">header</name><operator pos:start="183:37" pos:end="183:37">.</operator><name pos:start="183:38" pos:end="183:56">backing_file_offset</name></name></expr></argument>, <argument pos:start="183:59" pos:end="183:74"><expr pos:start="183:59" pos:end="183:74"><name pos:start="183:59" pos:end="183:74"><name pos:start="183:59" pos:end="183:60">bs</name><operator pos:start="183:61" pos:end="183:62">-&gt;</operator><name pos:start="183:63" pos:end="183:74">backing_file</name></name></expr></argument>, <argument pos:start="183:77" pos:end="183:79"><expr pos:start="183:77" pos:end="183:79"><name pos:start="183:77" pos:end="183:79">len</name></expr></argument>)</argument_list></call> <operator pos:start="183:82" pos:end="183:83">!=</operator> <name pos:start="183:85" pos:end="183:87">len</name></expr>)</condition><block type="pseudo" pos:start="185:13" pos:end="185:22"><block_content pos:start="185:13" pos:end="185:22">

            <goto pos:start="185:13" pos:end="185:22">goto <name pos:start="185:18" pos:end="185:21">fail</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:37"><expr pos:start="187:9" pos:end="187:36"><name pos:start="187:9" pos:end="187:29"><name pos:start="187:9" pos:end="187:10">bs</name><operator pos:start="187:11" pos:end="187:12">-&gt;</operator><name pos:start="187:13" pos:end="187:24">backing_file</name><index pos:start="187:25" pos:end="187:29">[<expr pos:start="187:26" pos:end="187:28"><name pos:start="187:26" pos:end="187:28">len</name></expr>]</index></name> <operator pos:start="187:31" pos:end="187:31">=</operator> <literal type="char" pos:start="187:33" pos:end="187:36">'\0'</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="191:5" pos:end="198:0"><if pos:start="191:5" pos:end="198:0">if <condition pos:start="191:8" pos:end="191:36">(<expr pos:start="191:9" pos:end="191:35"><call pos:start="191:9" pos:end="191:31"><name pos:start="191:9" pos:end="191:27">qcow_read_snapshots</name><argument_list pos:start="191:28" pos:end="191:31">(<argument pos:start="191:29" pos:end="191:30"><expr pos:start="191:29" pos:end="191:30"><name pos:start="191:29" pos:end="191:30">bs</name></expr></argument>)</argument_list></call> <operator pos:start="191:33" pos:end="191:33">&lt;</operator> <literal type="number" pos:start="191:35" pos:end="191:35">0</literal></expr>)</condition><block type="pseudo" pos:start="193:9" pos:end="198:0"><block_content pos:start="193:9" pos:end="198:0">

        <goto pos:start="193:9" pos:end="198:0">goto <name pos:start="193:14" pos:end="193:17">fail</name>;</goto></block_content></block></if></if_stmt>



<cpp:ifdef pos:start="197:1" pos:end="197:18">#<cpp:directive pos:start="197:2" pos:end="197:6">ifdef</cpp:directive> <name pos:start="197:8" pos:end="197:18">DEBUG_ALLOC</name></cpp:ifdef>

    <expr_stmt pos:start="199:5" pos:end="202:0"><expr pos:start="199:5" pos:end="199:23"><call pos:start="199:5" pos:end="199:23"><name pos:start="199:5" pos:end="199:19">check_refcounts</name><argument_list pos:start="199:20" pos:end="199:23">(<argument pos:start="199:21" pos:end="199:22"><expr pos:start="199:21" pos:end="199:22"><name pos:start="199:21" pos:end="199:22">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="201:1" pos:end="201:6">#<cpp:directive pos:start="201:2" pos:end="201:6">endif</cpp:directive></cpp:endif>

    <return pos:start="203:5" pos:end="203:13">return <expr pos:start="203:12" pos:end="203:12"><literal type="number" pos:start="203:12" pos:end="203:12">0</literal></expr>;</return>



 <label pos:start="207:2" pos:end="207:6"><name pos:start="207:2" pos:end="207:5">fail</name>:</label>

    <expr_stmt pos:start="209:5" pos:end="209:28"><expr pos:start="209:5" pos:end="209:27"><call pos:start="209:5" pos:end="209:27"><name pos:start="209:5" pos:end="209:23">qcow_free_snapshots</name><argument_list pos:start="209:24" pos:end="209:27">(<argument pos:start="209:25" pos:end="209:26"><expr pos:start="209:25" pos:end="209:26"><name pos:start="209:25" pos:end="209:26">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="211:5" pos:end="211:23"><expr pos:start="211:5" pos:end="211:22"><call pos:start="211:5" pos:end="211:22"><name pos:start="211:5" pos:end="211:18">refcount_close</name><argument_list pos:start="211:19" pos:end="211:22">(<argument pos:start="211:20" pos:end="211:21"><expr pos:start="211:20" pos:end="211:21"><name pos:start="211:20" pos:end="211:21">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="213:5" pos:end="213:27"><expr pos:start="213:5" pos:end="213:26"><call pos:start="213:5" pos:end="213:26"><name pos:start="213:5" pos:end="213:13">qemu_free</name><argument_list pos:start="213:14" pos:end="213:26">(<argument pos:start="213:15" pos:end="213:25"><expr pos:start="213:15" pos:end="213:25"><name pos:start="213:15" pos:end="213:25"><name pos:start="213:15" pos:end="213:15">s</name><operator pos:start="213:16" pos:end="213:17">-&gt;</operator><name pos:start="213:18" pos:end="213:25">l1_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="215:5" pos:end="215:27"><expr pos:start="215:5" pos:end="215:26"><call pos:start="215:5" pos:end="215:26"><name pos:start="215:5" pos:end="215:13">qemu_free</name><argument_list pos:start="215:14" pos:end="215:26">(<argument pos:start="215:15" pos:end="215:25"><expr pos:start="215:15" pos:end="215:25"><name pos:start="215:15" pos:end="215:25"><name pos:start="215:15" pos:end="215:15">s</name><operator pos:start="215:16" pos:end="215:17">-&gt;</operator><name pos:start="215:18" pos:end="215:25">l2_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="217:5" pos:end="217:32"><expr pos:start="217:5" pos:end="217:31"><call pos:start="217:5" pos:end="217:31"><name pos:start="217:5" pos:end="217:13">qemu_free</name><argument_list pos:start="217:14" pos:end="217:31">(<argument pos:start="217:15" pos:end="217:30"><expr pos:start="217:15" pos:end="217:30"><name pos:start="217:15" pos:end="217:30"><name pos:start="217:15" pos:end="217:15">s</name><operator pos:start="217:16" pos:end="217:17">-&gt;</operator><name pos:start="217:18" pos:end="217:30">cluster_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="219:5" pos:end="219:31"><expr pos:start="219:5" pos:end="219:30"><call pos:start="219:5" pos:end="219:30"><name pos:start="219:5" pos:end="219:13">qemu_free</name><argument_list pos:start="219:14" pos:end="219:30">(<argument pos:start="219:15" pos:end="219:29"><expr pos:start="219:15" pos:end="219:29"><name pos:start="219:15" pos:end="219:29"><name pos:start="219:15" pos:end="219:15">s</name><operator pos:start="219:16" pos:end="219:17">-&gt;</operator><name pos:start="219:18" pos:end="219:29">cluster_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:23"><expr pos:start="221:5" pos:end="221:22"><call pos:start="221:5" pos:end="221:22"><name pos:start="221:5" pos:end="221:15">bdrv_delete</name><argument_list pos:start="221:16" pos:end="221:22">(<argument pos:start="221:17" pos:end="221:21"><expr pos:start="221:17" pos:end="221:21"><name pos:start="221:17" pos:end="221:21"><name pos:start="221:17" pos:end="221:17">s</name><operator pos:start="221:18" pos:end="221:19">-&gt;</operator><name pos:start="221:20" pos:end="221:21">hd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="223:5" pos:end="223:14">return <expr pos:start="223:12" pos:end="223:13"><operator pos:start="223:12" pos:end="223:12">-</operator><literal type="number" pos:start="223:13" pos:end="223:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
