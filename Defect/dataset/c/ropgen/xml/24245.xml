<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24245.c" pos:tabs="8"><function pos:start="1:1" pos:end="279:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:19">vga_mem_writeb</name><parameter_list pos:start="1:20" pos:end="1:65">(<parameter pos:start="1:21" pos:end="1:37"><decl pos:start="1:21" pos:end="1:37"><type pos:start="1:21" pos:end="1:37"><name pos:start="1:21" pos:end="1:34">VGACommonState</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:37">s</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:50"><decl pos:start="1:40" pos:end="1:50"><type pos:start="1:40" pos:end="1:50"><name pos:start="1:40" pos:end="1:45">hwaddr</name></type> <name pos:start="1:47" pos:end="1:50">addr</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:64"><decl pos:start="1:53" pos:end="1:64"><type pos:start="1:53" pos:end="1:64"><name pos:start="1:53" pos:end="1:60">uint32_t</name></type> <name pos:start="1:62" pos:end="1:64">val</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="279:1">{<block_content pos:start="5:5" pos:end="277:5">

    <decl_stmt pos:start="5:5" pos:end="5:65"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:23">memory_map_mode</name></decl>, <decl pos:start="5:26" pos:end="5:30"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:26" pos:end="5:30">plane</name></decl>, <decl pos:start="5:33" pos:end="5:42"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:33" pos:end="5:42">write_mode</name></decl>, <decl pos:start="5:45" pos:end="5:45"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:45" pos:end="5:45">b</name></decl>, <decl pos:start="5:48" pos:end="5:58"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:48" pos:end="5:58">func_select</name></decl>, <decl pos:start="5:61" pos:end="5:64"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:61" pos:end="5:64">mask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="12:0"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:23">write_mask</name></decl>, <decl pos:start="7:26" pos:end="7:33"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:26" pos:end="7:33">bit_mask</name></decl>, <decl pos:start="7:36" pos:end="7:43"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:36" pos:end="7:43">set_mask</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="11:1" pos:end="11:20">#<cpp:directive pos:start="11:2" pos:end="11:6">ifdef</cpp:directive> <name pos:start="11:8" pos:end="11:20">DEBUG_VGA_MEM</name></cpp:ifdef>

    <expr_stmt pos:start="13:5" pos:end="16:0"><expr pos:start="13:5" pos:end="13:63"><call pos:start="13:5" pos:end="13:63"><name pos:start="13:5" pos:end="13:10">printf</name><argument_list pos:start="13:11" pos:end="13:63">(<argument pos:start="13:12" pos:end="13:51"><expr pos:start="13:12" pos:end="13:51"><literal type="string" pos:start="13:12" pos:end="13:21">"vga: [0x"</literal> <name pos:start="13:23" pos:end="13:36">TARGET_FMT_plx</name> <literal type="string" pos:start="13:38" pos:end="13:51">"] = 0x%02x\n"</literal></expr></argument>, <argument pos:start="13:54" pos:end="13:57"><expr pos:start="13:54" pos:end="13:57"><name pos:start="13:54" pos:end="13:57">addr</name></expr></argument>, <argument pos:start="13:60" pos:end="13:62"><expr pos:start="13:60" pos:end="13:62"><name pos:start="13:60" pos:end="13:62">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="15:1" pos:end="15:6">#<cpp:directive pos:start="15:2" pos:end="15:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="17:5" pos:end="17:38">/* convert to VGA memory offset */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:53"><expr pos:start="19:5" pos:end="19:52"><name pos:start="19:5" pos:end="19:19">memory_map_mode</name> <operator pos:start="19:21" pos:end="19:21">=</operator> <operator pos:start="19:23" pos:end="19:23">(</operator><name pos:start="19:24" pos:end="19:42"><name pos:start="19:24" pos:end="19:24">s</name><operator pos:start="19:25" pos:end="19:26">-&gt;</operator><name pos:start="19:27" pos:end="19:28">gr</name><index pos:start="19:29" pos:end="19:42">[<expr pos:start="19:30" pos:end="19:41"><name pos:start="19:30" pos:end="19:41">VGA_GFX_MISC</name></expr>]</index></name> <operator pos:start="19:44" pos:end="19:45">&gt;&gt;</operator> <literal type="number" pos:start="19:47" pos:end="19:47">2</literal><operator pos:start="19:48" pos:end="19:48">)</operator> <operator pos:start="19:50" pos:end="19:50">&amp;</operator> <literal type="number" pos:start="19:52" pos:end="19:52">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:20"><expr pos:start="21:5" pos:end="21:19"><name pos:start="21:5" pos:end="21:8">addr</name> <operator pos:start="21:10" pos:end="21:11">&amp;=</operator> <literal type="number" pos:start="21:13" pos:end="21:19">0x1ffff</literal></expr>;</expr_stmt>

    <switch pos:start="23:5" pos:end="61:5">switch<condition pos:start="23:11" pos:end="23:27">(<expr pos:start="23:12" pos:end="23:26"><name pos:start="23:12" pos:end="23:26">memory_map_mode</name></expr>)</condition> <block pos:start="23:29" pos:end="61:5">{<block_content pos:start="25:5" pos:end="59:14">

    <case pos:start="25:5" pos:end="25:11">case <expr pos:start="25:10" pos:end="25:10"><literal type="number" pos:start="25:10" pos:end="25:10">0</literal></expr>:</case>

        <break pos:start="27:9" pos:end="27:14">break;</break>

    <case pos:start="29:5" pos:end="29:11">case <expr pos:start="29:10" pos:end="29:10"><literal type="number" pos:start="29:10" pos:end="29:10">1</literal></expr>:</case>

        <if_stmt pos:start="31:9" pos:end="33:19"><if pos:start="31:9" pos:end="33:19">if <condition pos:start="31:12" pos:end="31:28">(<expr pos:start="31:13" pos:end="31:27"><name pos:start="31:13" pos:end="31:16">addr</name> <operator pos:start="31:18" pos:end="31:19">&gt;=</operator> <literal type="number" pos:start="31:21" pos:end="31:27">0x10000</literal></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:19"><block_content pos:start="33:13" pos:end="33:19">

            <return pos:start="33:13" pos:end="33:19">return;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:31"><expr pos:start="35:9" pos:end="35:30"><name pos:start="35:9" pos:end="35:12">addr</name> <operator pos:start="35:14" pos:end="35:15">+=</operator> <name pos:start="35:17" pos:end="35:30"><name pos:start="35:17" pos:end="35:17">s</name><operator pos:start="35:18" pos:end="35:19">-&gt;</operator><name pos:start="35:20" pos:end="35:30">bank_offset</name></name></expr>;</expr_stmt>

        <break pos:start="37:9" pos:end="37:14">break;</break>

    <case pos:start="39:5" pos:end="39:11">case <expr pos:start="39:10" pos:end="39:10"><literal type="number" pos:start="39:10" pos:end="39:10">2</literal></expr>:</case>

        <expr_stmt pos:start="41:9" pos:end="41:24"><expr pos:start="41:9" pos:end="41:23"><name pos:start="41:9" pos:end="41:12">addr</name> <operator pos:start="41:14" pos:end="41:15">-=</operator> <literal type="number" pos:start="41:17" pos:end="41:23">0x10000</literal></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="45:19"><if pos:start="43:9" pos:end="45:19">if <condition pos:start="43:12" pos:end="43:27">(<expr pos:start="43:13" pos:end="43:26"><name pos:start="43:13" pos:end="43:16">addr</name> <operator pos:start="43:18" pos:end="43:19">&gt;=</operator> <literal type="number" pos:start="43:21" pos:end="43:26">0x8000</literal></expr>)</condition><block type="pseudo" pos:start="45:13" pos:end="45:19"><block_content pos:start="45:13" pos:end="45:19">

            <return pos:start="45:13" pos:end="45:19">return;</return></block_content></block></if></if_stmt>

        <break pos:start="47:9" pos:end="47:14">break;</break>

    <default pos:start="49:5" pos:end="49:12">default:</default>

    <case pos:start="51:5" pos:end="51:11">case <expr pos:start="51:10" pos:end="51:10"><literal type="number" pos:start="51:10" pos:end="51:10">3</literal></expr>:</case>

        <expr_stmt pos:start="53:9" pos:end="53:24"><expr pos:start="53:9" pos:end="53:23"><name pos:start="53:9" pos:end="53:12">addr</name> <operator pos:start="53:14" pos:end="53:15">-=</operator> <literal type="number" pos:start="53:17" pos:end="53:23">0x18000</literal></expr>;</expr_stmt>

        <if_stmt pos:start="55:9" pos:end="57:19"><if pos:start="55:9" pos:end="57:19">if <condition pos:start="55:12" pos:end="55:27">(<expr pos:start="55:13" pos:end="55:26"><name pos:start="55:13" pos:end="55:16">addr</name> <operator pos:start="55:18" pos:end="55:19">&gt;=</operator> <literal type="number" pos:start="55:21" pos:end="55:26">0x8000</literal></expr>)</condition><block type="pseudo" pos:start="57:13" pos:end="57:19"><block_content pos:start="57:13" pos:end="57:19">

            <return pos:start="57:13" pos:end="57:19">return;</return></block_content></block></if></if_stmt>

        <break pos:start="59:9" pos:end="59:14">break;</break>

    </block_content>}</block></switch>



    <if_stmt pos:start="65:5" pos:end="277:5"><if pos:start="65:5" pos:end="91:5">if <condition pos:start="65:8" pos:end="65:53">(<expr pos:start="65:9" pos:end="65:52"><name pos:start="65:9" pos:end="65:34"><name pos:start="65:9" pos:end="65:9">s</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:13">sr</name><index pos:start="65:14" pos:end="65:34">[<expr pos:start="65:15" pos:end="65:33"><name pos:start="65:15" pos:end="65:33">VGA_SEQ_MEMORY_MODE</name></expr>]</index></name> <operator pos:start="65:36" pos:end="65:36">&amp;</operator> <name pos:start="65:38" pos:end="65:52">VGA_SR04_CHN_4M</name></expr>)</condition> <block pos:start="65:55" pos:end="91:5">{<block_content pos:start="69:9" pos:end="89:9">

        <comment type="block" pos:start="67:9" pos:end="67:44">/* chain 4 mode : simplest access */</comment>

        <expr_stmt pos:start="69:9" pos:end="69:25"><expr pos:start="69:9" pos:end="69:24"><name pos:start="69:9" pos:end="69:13">plane</name> <operator pos:start="69:15" pos:end="69:15">=</operator> <name pos:start="69:17" pos:end="69:20">addr</name> <operator pos:start="69:22" pos:end="69:22">&amp;</operator> <literal type="number" pos:start="69:24" pos:end="69:24">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:28"><expr pos:start="71:9" pos:end="71:27"><name pos:start="71:9" pos:end="71:12">mask</name> <operator pos:start="71:14" pos:end="71:14">=</operator> <operator pos:start="71:16" pos:end="71:16">(</operator><literal type="number" pos:start="71:17" pos:end="71:17">1</literal> <operator pos:start="71:19" pos:end="71:20">&lt;&lt;</operator> <name pos:start="71:22" pos:end="71:26">plane</name><operator pos:start="71:27" pos:end="71:27">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="73:9" pos:end="89:9"><if pos:start="73:9" pos:end="89:9">if <condition pos:start="73:12" pos:end="73:46">(<expr pos:start="73:13" pos:end="73:45"><name pos:start="73:13" pos:end="73:38"><name pos:start="73:13" pos:end="73:13">s</name><operator pos:start="73:14" pos:end="73:15">-&gt;</operator><name pos:start="73:16" pos:end="73:17">sr</name><index pos:start="73:18" pos:end="73:38">[<expr pos:start="73:19" pos:end="73:37"><name pos:start="73:19" pos:end="73:37">VGA_SEQ_PLANE_WRITE</name></expr>]</index></name> <operator pos:start="73:40" pos:end="73:40">&amp;</operator> <name pos:start="73:42" pos:end="73:45">mask</name></expr>)</condition> <block pos:start="73:48" pos:end="89:9">{<block_content pos:start="75:13" pos:end="87:55">

            <expr_stmt pos:start="75:13" pos:end="75:40"><expr pos:start="75:13" pos:end="75:39"><call pos:start="75:13" pos:end="75:39"><name pos:start="75:13" pos:end="75:18">assert</name><argument_list pos:start="75:19" pos:end="75:39">(<argument pos:start="75:20" pos:end="75:38"><expr pos:start="75:20" pos:end="75:38"><name pos:start="75:20" pos:end="75:23">addr</name> <operator pos:start="75:25" pos:end="75:25">&lt;</operator> <name pos:start="75:27" pos:end="75:38"><name pos:start="75:27" pos:end="75:27">s</name><operator pos:start="75:28" pos:end="75:29">-&gt;</operator><name pos:start="75:30" pos:end="75:38">vram_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="80:0"><expr pos:start="77:13" pos:end="77:35"><name pos:start="77:13" pos:end="77:29"><name pos:start="77:13" pos:end="77:13">s</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:23">vram_ptr</name><index pos:start="77:24" pos:end="77:29">[<expr pos:start="77:25" pos:end="77:28"><name pos:start="77:25" pos:end="77:28">addr</name></expr>]</index></name> <operator pos:start="77:31" pos:end="77:31">=</operator> <name pos:start="77:33" pos:end="77:35">val</name></expr>;</expr_stmt>

<cpp:ifdef pos:start="79:1" pos:end="79:20">#<cpp:directive pos:start="79:2" pos:end="79:6">ifdef</cpp:directive> <name pos:start="79:8" pos:end="79:20">DEBUG_VGA_MEM</name></cpp:ifdef>

            <expr_stmt pos:start="81:13" pos:end="84:0"><expr pos:start="81:13" pos:end="81:65"><call pos:start="81:13" pos:end="81:65"><name pos:start="81:13" pos:end="81:18">printf</name><argument_list pos:start="81:19" pos:end="81:65">(<argument pos:start="81:20" pos:end="81:58"><expr pos:start="81:20" pos:end="81:58"><literal type="string" pos:start="81:20" pos:end="81:37">"vga: chain4: [0x"</literal> <name pos:start="81:39" pos:end="81:52">TARGET_FMT_plx</name> <literal type="string" pos:start="81:54" pos:end="81:58">"]\n"</literal></expr></argument>, <argument pos:start="81:61" pos:end="81:64"><expr pos:start="81:61" pos:end="81:64"><name pos:start="81:61" pos:end="81:64">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="83:1" pos:end="83:6">#<cpp:directive pos:start="83:2" pos:end="83:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="85:13" pos:end="85:37"><expr pos:start="85:13" pos:end="85:36"><name pos:start="85:13" pos:end="85:28"><name pos:start="85:13" pos:end="85:13">s</name><operator pos:start="85:14" pos:end="85:15">-&gt;</operator><name pos:start="85:16" pos:end="85:28">plane_updated</name></name> <operator pos:start="85:30" pos:end="85:31">|=</operator> <name pos:start="85:33" pos:end="85:36">mask</name></expr>;</expr_stmt> <comment type="block" pos:start="85:39" pos:end="85:75">/* only used to detect font change */</comment>

            <expr_stmt pos:start="87:13" pos:end="87:55"><expr pos:start="87:13" pos:end="87:54"><call pos:start="87:13" pos:end="87:54"><name pos:start="87:13" pos:end="87:35">memory_region_set_dirty</name><argument_list pos:start="87:36" pos:end="87:54">(<argument pos:start="87:37" pos:end="87:44"><expr pos:start="87:37" pos:end="87:44"><operator pos:start="87:37" pos:end="87:37">&amp;</operator><name pos:start="87:38" pos:end="87:44"><name pos:start="87:38" pos:end="87:38">s</name><operator pos:start="87:39" pos:end="87:40">-&gt;</operator><name pos:start="87:41" pos:end="87:44">vram</name></name></expr></argument>, <argument pos:start="87:47" pos:end="87:50"><expr pos:start="87:47" pos:end="87:50"><name pos:start="87:47" pos:end="87:50">addr</name></expr></argument>, <argument pos:start="87:53" pos:end="87:53"><expr pos:start="87:53" pos:end="87:53"><literal type="number" pos:start="87:53" pos:end="87:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="91:7" pos:end="123:5">else if <condition pos:start="91:15" pos:end="91:42">(<expr pos:start="91:16" pos:end="91:41"><name pos:start="91:16" pos:end="91:34"><name pos:start="91:16" pos:end="91:16">s</name><operator pos:start="91:17" pos:end="91:18">-&gt;</operator><name pos:start="91:19" pos:end="91:20">gr</name><index pos:start="91:21" pos:end="91:34">[<expr pos:start="91:22" pos:end="91:33"><name pos:start="91:22" pos:end="91:33">VGA_GFX_MODE</name></expr>]</index></name> <operator pos:start="91:36" pos:end="91:36">&amp;</operator> <literal type="number" pos:start="91:38" pos:end="91:41">0x10</literal></expr>)</condition> <block pos:start="91:44" pos:end="123:5">{<block_content pos:start="95:9" pos:end="121:9">

        <comment type="block" pos:start="93:9" pos:end="93:51">/* odd/even mode (aka text mode mapping) */</comment>

        <expr_stmt pos:start="95:9" pos:end="95:61"><expr pos:start="95:9" pos:end="95:60"><name pos:start="95:9" pos:end="95:13">plane</name> <operator pos:start="95:15" pos:end="95:15">=</operator> <operator pos:start="95:17" pos:end="95:17">(</operator><name pos:start="95:18" pos:end="95:42"><name pos:start="95:18" pos:end="95:18">s</name><operator pos:start="95:19" pos:end="95:20">-&gt;</operator><name pos:start="95:21" pos:end="95:22">gr</name><index pos:start="95:23" pos:end="95:42">[<expr pos:start="95:24" pos:end="95:41"><name pos:start="95:24" pos:end="95:41">VGA_GFX_PLANE_READ</name></expr>]</index></name> <operator pos:start="95:44" pos:end="95:44">&amp;</operator> <literal type="number" pos:start="95:46" pos:end="95:46">2</literal><operator pos:start="95:47" pos:end="95:47">)</operator> <operator pos:start="95:49" pos:end="95:49">|</operator> <operator pos:start="95:51" pos:end="95:51">(</operator><name pos:start="95:52" pos:end="95:55">addr</name> <operator pos:start="95:57" pos:end="95:57">&amp;</operator> <literal type="number" pos:start="95:59" pos:end="95:59">1</literal><operator pos:start="95:60" pos:end="95:60">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:28"><expr pos:start="97:9" pos:end="97:27"><name pos:start="97:9" pos:end="97:12">mask</name> <operator pos:start="97:14" pos:end="97:14">=</operator> <operator pos:start="97:16" pos:end="97:16">(</operator><literal type="number" pos:start="97:17" pos:end="97:17">1</literal> <operator pos:start="97:19" pos:end="97:20">&lt;&lt;</operator> <name pos:start="97:22" pos:end="97:26">plane</name><operator pos:start="97:27" pos:end="97:27">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="99:9" pos:end="121:9"><if pos:start="99:9" pos:end="121:9">if <condition pos:start="99:12" pos:end="99:46">(<expr pos:start="99:13" pos:end="99:45"><name pos:start="99:13" pos:end="99:38"><name pos:start="99:13" pos:end="99:13">s</name><operator pos:start="99:14" pos:end="99:15">-&gt;</operator><name pos:start="99:16" pos:end="99:17">sr</name><index pos:start="99:18" pos:end="99:38">[<expr pos:start="99:19" pos:end="99:37"><name pos:start="99:19" pos:end="99:37">VGA_SEQ_PLANE_WRITE</name></expr>]</index></name> <operator pos:start="99:40" pos:end="99:40">&amp;</operator> <name pos:start="99:42" pos:end="99:45">mask</name></expr>)</condition> <block pos:start="99:48" pos:end="121:9">{<block_content pos:start="101:13" pos:end="119:55">

            <expr_stmt pos:start="101:13" pos:end="101:46"><expr pos:start="101:13" pos:end="101:45"><name pos:start="101:13" pos:end="101:16">addr</name> <operator pos:start="101:18" pos:end="101:18">=</operator> <operator pos:start="101:20" pos:end="101:20">(</operator><operator pos:start="101:21" pos:end="101:21">(</operator><name pos:start="101:22" pos:end="101:25">addr</name> <operator pos:start="101:27" pos:end="101:27">&amp;</operator> <operator pos:start="101:29" pos:end="101:29">~</operator><literal type="number" pos:start="101:30" pos:end="101:30">1</literal><operator pos:start="101:31" pos:end="101:31">)</operator> <operator pos:start="101:33" pos:end="101:34">&lt;&lt;</operator> <literal type="number" pos:start="101:36" pos:end="101:36">1</literal><operator pos:start="101:37" pos:end="101:37">)</operator> <operator pos:start="101:39" pos:end="101:39">|</operator> <name pos:start="101:41" pos:end="101:45">plane</name></expr>;</expr_stmt>

            <if_stmt pos:start="103:13" pos:end="107:13"><if pos:start="103:13" pos:end="107:13">if <condition pos:start="103:16" pos:end="103:37">(<expr pos:start="103:17" pos:end="103:36"><name pos:start="103:17" pos:end="103:20">addr</name> <operator pos:start="103:22" pos:end="103:23">&gt;=</operator> <name pos:start="103:25" pos:end="103:36"><name pos:start="103:25" pos:end="103:25">s</name><operator pos:start="103:26" pos:end="103:27">-&gt;</operator><name pos:start="103:28" pos:end="103:36">vram_size</name></name></expr>)</condition> <block pos:start="103:39" pos:end="107:13">{<block_content pos:start="105:17" pos:end="105:23">

                <return pos:start="105:17" pos:end="105:23">return;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="109:13" pos:end="112:0"><expr pos:start="109:13" pos:end="109:35"><name pos:start="109:13" pos:end="109:29"><name pos:start="109:13" pos:end="109:13">s</name><operator pos:start="109:14" pos:end="109:15">-&gt;</operator><name pos:start="109:16" pos:end="109:23">vram_ptr</name><index pos:start="109:24" pos:end="109:29">[<expr pos:start="109:25" pos:end="109:28"><name pos:start="109:25" pos:end="109:28">addr</name></expr>]</index></name> <operator pos:start="109:31" pos:end="109:31">=</operator> <name pos:start="109:33" pos:end="109:35">val</name></expr>;</expr_stmt>

<cpp:ifdef pos:start="111:1" pos:end="111:20">#<cpp:directive pos:start="111:2" pos:end="111:6">ifdef</cpp:directive> <name pos:start="111:8" pos:end="111:20">DEBUG_VGA_MEM</name></cpp:ifdef>

            <expr_stmt pos:start="113:13" pos:end="116:0"><expr pos:start="113:13" pos:end="113:67"><call pos:start="113:13" pos:end="113:67"><name pos:start="113:13" pos:end="113:18">printf</name><argument_list pos:start="113:19" pos:end="113:67">(<argument pos:start="113:20" pos:end="113:60"><expr pos:start="113:20" pos:end="113:60"><literal type="string" pos:start="113:20" pos:end="113:39">"vga: odd/even: [0x"</literal> <name pos:start="113:41" pos:end="113:54">TARGET_FMT_plx</name> <literal type="string" pos:start="113:56" pos:end="113:60">"]\n"</literal></expr></argument>, <argument pos:start="113:63" pos:end="113:66"><expr pos:start="113:63" pos:end="113:66"><name pos:start="113:63" pos:end="113:66">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="115:1" pos:end="115:6">#<cpp:directive pos:start="115:2" pos:end="115:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="117:13" pos:end="117:37"><expr pos:start="117:13" pos:end="117:36"><name pos:start="117:13" pos:end="117:28"><name pos:start="117:13" pos:end="117:13">s</name><operator pos:start="117:14" pos:end="117:15">-&gt;</operator><name pos:start="117:16" pos:end="117:28">plane_updated</name></name> <operator pos:start="117:30" pos:end="117:31">|=</operator> <name pos:start="117:33" pos:end="117:36">mask</name></expr>;</expr_stmt> <comment type="block" pos:start="117:39" pos:end="117:75">/* only used to detect font change */</comment>

            <expr_stmt pos:start="119:13" pos:end="119:55"><expr pos:start="119:13" pos:end="119:54"><call pos:start="119:13" pos:end="119:54"><name pos:start="119:13" pos:end="119:35">memory_region_set_dirty</name><argument_list pos:start="119:36" pos:end="119:54">(<argument pos:start="119:37" pos:end="119:44"><expr pos:start="119:37" pos:end="119:44"><operator pos:start="119:37" pos:end="119:37">&amp;</operator><name pos:start="119:38" pos:end="119:44"><name pos:start="119:38" pos:end="119:38">s</name><operator pos:start="119:39" pos:end="119:40">-&gt;</operator><name pos:start="119:41" pos:end="119:44">vram</name></name></expr></argument>, <argument pos:start="119:47" pos:end="119:50"><expr pos:start="119:47" pos:end="119:50"><name pos:start="119:47" pos:end="119:50">addr</name></expr></argument>, <argument pos:start="119:53" pos:end="119:53"><expr pos:start="119:53" pos:end="119:53"><literal type="number" pos:start="119:53" pos:end="119:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="123:7" pos:end="277:5">else <block pos:start="123:12" pos:end="277:5">{<block_content pos:start="127:9" pos:end="275:71">

        <comment type="block" pos:start="125:9" pos:end="125:41">/* standard VGA latched access */</comment>

        <expr_stmt pos:start="127:9" pos:end="127:45"><expr pos:start="127:9" pos:end="127:44"><name pos:start="127:9" pos:end="127:18">write_mode</name> <operator pos:start="127:20" pos:end="127:20">=</operator> <name pos:start="127:22" pos:end="127:40"><name pos:start="127:22" pos:end="127:22">s</name><operator pos:start="127:23" pos:end="127:24">-&gt;</operator><name pos:start="127:25" pos:end="127:26">gr</name><index pos:start="127:27" pos:end="127:40">[<expr pos:start="127:28" pos:end="127:39"><name pos:start="127:28" pos:end="127:39">VGA_GFX_MODE</name></expr>]</index></name> <operator pos:start="127:42" pos:end="127:42">&amp;</operator> <literal type="number" pos:start="127:44" pos:end="127:44">3</literal></expr>;</expr_stmt>

        <switch pos:start="129:9" pos:end="189:9">switch<condition pos:start="129:15" pos:end="129:26">(<expr pos:start="129:16" pos:end="129:25"><name pos:start="129:16" pos:end="129:25">write_mode</name></expr>)</condition> <block pos:start="129:28" pos:end="189:9">{<block_content pos:start="131:9" pos:end="187:18">

        <default pos:start="131:9" pos:end="131:16">default:</default>

        <case pos:start="133:9" pos:end="133:15">case <expr pos:start="133:14" pos:end="133:14"><literal type="number" pos:start="133:14" pos:end="133:14">0</literal></expr>:</case>

            <comment type="block" pos:start="135:13" pos:end="135:24">/* rotate */</comment>

            <expr_stmt pos:start="137:13" pos:end="137:47"><expr pos:start="137:13" pos:end="137:46"><name pos:start="137:13" pos:end="137:13">b</name> <operator pos:start="137:15" pos:end="137:15">=</operator> <name pos:start="137:17" pos:end="137:42"><name pos:start="137:17" pos:end="137:17">s</name><operator pos:start="137:18" pos:end="137:19">-&gt;</operator><name pos:start="137:20" pos:end="137:21">gr</name><index pos:start="137:22" pos:end="137:42">[<expr pos:start="137:23" pos:end="137:41"><name pos:start="137:23" pos:end="137:41">VGA_GFX_DATA_ROTATE</name></expr>]</index></name> <operator pos:start="137:44" pos:end="137:44">&amp;</operator> <literal type="number" pos:start="137:46" pos:end="137:46">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:57"><expr pos:start="139:13" pos:end="139:56"><name pos:start="139:13" pos:end="139:15">val</name> <operator pos:start="139:17" pos:end="139:17">=</operator> <operator pos:start="139:19" pos:end="139:19">(</operator><operator pos:start="139:20" pos:end="139:20">(</operator><name pos:start="139:21" pos:end="139:23">val</name> <operator pos:start="139:25" pos:end="139:26">&gt;&gt;</operator> <name pos:start="139:28" pos:end="139:28">b</name><operator pos:start="139:29" pos:end="139:29">)</operator> <operator pos:start="139:31" pos:end="139:31">|</operator> <operator pos:start="139:33" pos:end="139:33">(</operator><name pos:start="139:34" pos:end="139:36">val</name> <operator pos:start="139:38" pos:end="139:39">&lt;&lt;</operator> <operator pos:start="139:41" pos:end="139:41">(</operator><literal type="number" pos:start="139:42" pos:end="139:44">8</literal> <operator pos:start="139:44" pos:end="139:44">-</operator> <name pos:start="139:46" pos:end="139:46">b</name><operator pos:start="139:47" pos:end="139:47">)</operator><operator pos:start="139:48" pos:end="139:48">)</operator><operator pos:start="139:49" pos:end="139:49">)</operator> <operator pos:start="139:51" pos:end="139:51">&amp;</operator> <literal type="number" pos:start="139:53" pos:end="139:56">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:28"><expr pos:start="141:13" pos:end="141:27"><name pos:start="141:13" pos:end="141:15">val</name> <operator pos:start="141:17" pos:end="141:18">|=</operator> <name pos:start="141:20" pos:end="141:22">val</name> <operator pos:start="141:24" pos:end="141:25">&lt;&lt;</operator> <literal type="number" pos:start="141:27" pos:end="141:27">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:29"><expr pos:start="143:13" pos:end="143:28"><name pos:start="143:13" pos:end="143:15">val</name> <operator pos:start="143:17" pos:end="143:18">|=</operator> <name pos:start="143:20" pos:end="143:22">val</name> <operator pos:start="143:24" pos:end="143:25">&lt;&lt;</operator> <literal type="number" pos:start="143:27" pos:end="143:28">16</literal></expr>;</expr_stmt>



            <comment type="block" pos:start="147:13" pos:end="147:38">/* apply set/reset mask */</comment>

            <expr_stmt pos:start="149:13" pos:end="149:56"><expr pos:start="149:13" pos:end="149:55"><name pos:start="149:13" pos:end="149:20">set_mask</name> <operator pos:start="149:22" pos:end="149:22">=</operator> <name pos:start="149:24" pos:end="149:55"><name pos:start="149:24" pos:end="149:29">mask16</name><index pos:start="149:30" pos:end="149:55">[<expr pos:start="149:31" pos:end="149:54"><name pos:start="149:31" pos:end="149:54"><name pos:start="149:31" pos:end="149:31">s</name><operator pos:start="149:32" pos:end="149:33">-&gt;</operator><name pos:start="149:34" pos:end="149:35">gr</name><index pos:start="149:36" pos:end="149:54">[<expr pos:start="149:37" pos:end="149:53"><name pos:start="149:37" pos:end="149:53">VGA_GFX_SR_ENABLE</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="153:61"><expr pos:start="151:13" pos:end="153:60"><name pos:start="151:13" pos:end="151:15">val</name> <operator pos:start="151:17" pos:end="151:17">=</operator> <operator pos:start="151:19" pos:end="151:19">(</operator><name pos:start="151:20" pos:end="151:22">val</name> <operator pos:start="151:24" pos:end="151:24">&amp;</operator> <operator pos:start="151:26" pos:end="151:26">~</operator><name pos:start="151:27" pos:end="151:34">set_mask</name><operator pos:start="151:35" pos:end="151:35">)</operator> <operator pos:start="151:37" pos:end="151:37">|</operator>

                <operator pos:start="153:17" pos:end="153:17">(</operator><name pos:start="153:18" pos:end="153:48"><name pos:start="153:18" pos:end="153:23">mask16</name><index pos:start="153:24" pos:end="153:48">[<expr pos:start="153:25" pos:end="153:47"><name pos:start="153:25" pos:end="153:47"><name pos:start="153:25" pos:end="153:25">s</name><operator pos:start="153:26" pos:end="153:27">-&gt;</operator><name pos:start="153:28" pos:end="153:29">gr</name><index pos:start="153:30" pos:end="153:47">[<expr pos:start="153:31" pos:end="153:46"><name pos:start="153:31" pos:end="153:46">VGA_GFX_SR_VALUE</name></expr>]</index></name></expr>]</index></name> <operator pos:start="153:50" pos:end="153:50">&amp;</operator> <name pos:start="153:52" pos:end="153:59">set_mask</name><operator pos:start="153:60" pos:end="153:60">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:47"><expr pos:start="155:13" pos:end="155:46"><name pos:start="155:13" pos:end="155:20">bit_mask</name> <operator pos:start="155:22" pos:end="155:22">=</operator> <name pos:start="155:24" pos:end="155:46"><name pos:start="155:24" pos:end="155:24">s</name><operator pos:start="155:25" pos:end="155:26">-&gt;</operator><name pos:start="155:27" pos:end="155:28">gr</name><index pos:start="155:29" pos:end="155:46">[<expr pos:start="155:30" pos:end="155:45"><name pos:start="155:30" pos:end="155:45">VGA_GFX_BIT_MASK</name></expr>]</index></name></expr>;</expr_stmt>

            <break pos:start="157:13" pos:end="157:18">break;</break>

        <case pos:start="159:9" pos:end="159:15">case <expr pos:start="159:14" pos:end="159:14"><literal type="number" pos:start="159:14" pos:end="159:14">1</literal></expr>:</case>

            <expr_stmt pos:start="161:13" pos:end="161:27"><expr pos:start="161:13" pos:end="161:26"><name pos:start="161:13" pos:end="161:15">val</name> <operator pos:start="161:17" pos:end="161:17">=</operator> <name pos:start="161:19" pos:end="161:26"><name pos:start="161:19" pos:end="161:19">s</name><operator pos:start="161:20" pos:end="161:21">-&gt;</operator><name pos:start="161:22" pos:end="161:26">latch</name></name></expr>;</expr_stmt>

            <goto pos:start="163:13" pos:end="163:26">goto <name pos:start="163:18" pos:end="163:25">do_write</name>;</goto>

        <case pos:start="165:9" pos:end="165:15">case <expr pos:start="165:14" pos:end="165:14"><literal type="number" pos:start="165:14" pos:end="165:14">2</literal></expr>:</case>

            <expr_stmt pos:start="167:13" pos:end="167:37"><expr pos:start="167:13" pos:end="167:36"><name pos:start="167:13" pos:end="167:15">val</name> <operator pos:start="167:17" pos:end="167:17">=</operator> <name pos:start="167:19" pos:end="167:36"><name pos:start="167:19" pos:end="167:24">mask16</name><index pos:start="167:25" pos:end="167:36">[<expr pos:start="167:26" pos:end="167:35"><name pos:start="167:26" pos:end="167:28">val</name> <operator pos:start="167:30" pos:end="167:30">&amp;</operator> <literal type="number" pos:start="167:32" pos:end="167:35">0x0f</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="169:13" pos:end="169:47"><expr pos:start="169:13" pos:end="169:46"><name pos:start="169:13" pos:end="169:20">bit_mask</name> <operator pos:start="169:22" pos:end="169:22">=</operator> <name pos:start="169:24" pos:end="169:46"><name pos:start="169:24" pos:end="169:24">s</name><operator pos:start="169:25" pos:end="169:26">-&gt;</operator><name pos:start="169:27" pos:end="169:28">gr</name><index pos:start="169:29" pos:end="169:46">[<expr pos:start="169:30" pos:end="169:45"><name pos:start="169:30" pos:end="169:45">VGA_GFX_BIT_MASK</name></expr>]</index></name></expr>;</expr_stmt>

            <break pos:start="171:13" pos:end="171:18">break;</break>

        <case pos:start="173:9" pos:end="173:15">case <expr pos:start="173:14" pos:end="173:14"><literal type="number" pos:start="173:14" pos:end="173:14">3</literal></expr>:</case>

            <comment type="block" pos:start="175:13" pos:end="175:24">/* rotate */</comment>

            <expr_stmt pos:start="177:13" pos:end="177:47"><expr pos:start="177:13" pos:end="177:46"><name pos:start="177:13" pos:end="177:13">b</name> <operator pos:start="177:15" pos:end="177:15">=</operator> <name pos:start="177:17" pos:end="177:42"><name pos:start="177:17" pos:end="177:17">s</name><operator pos:start="177:18" pos:end="177:19">-&gt;</operator><name pos:start="177:20" pos:end="177:21">gr</name><index pos:start="177:22" pos:end="177:42">[<expr pos:start="177:23" pos:end="177:41"><name pos:start="177:23" pos:end="177:41">VGA_GFX_DATA_ROTATE</name></expr>]</index></name> <operator pos:start="177:44" pos:end="177:44">&amp;</operator> <literal type="number" pos:start="177:46" pos:end="177:46">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:48"><expr pos:start="179:13" pos:end="179:47"><name pos:start="179:13" pos:end="179:15">val</name> <operator pos:start="179:17" pos:end="179:17">=</operator> <operator pos:start="179:19" pos:end="179:19">(</operator><name pos:start="179:20" pos:end="179:22">val</name> <operator pos:start="179:24" pos:end="179:25">&gt;&gt;</operator> <name pos:start="179:27" pos:end="179:27">b</name><operator pos:start="179:28" pos:end="179:28">)</operator> <operator pos:start="179:30" pos:end="179:30">|</operator> <operator pos:start="179:32" pos:end="179:32">(</operator><name pos:start="179:33" pos:end="179:35">val</name> <operator pos:start="179:37" pos:end="179:38">&lt;&lt;</operator> <operator pos:start="179:40" pos:end="179:40">(</operator><literal type="number" pos:start="179:41" pos:end="179:43">8</literal> <operator pos:start="179:43" pos:end="179:43">-</operator> <name pos:start="179:45" pos:end="179:45">b</name><operator pos:start="179:46" pos:end="179:46">)</operator><operator pos:start="179:47" pos:end="179:47">)</operator></expr>;</expr_stmt>



            <expr_stmt pos:start="183:13" pos:end="183:53"><expr pos:start="183:13" pos:end="183:52"><name pos:start="183:13" pos:end="183:20">bit_mask</name> <operator pos:start="183:22" pos:end="183:22">=</operator> <name pos:start="183:24" pos:end="183:46"><name pos:start="183:24" pos:end="183:24">s</name><operator pos:start="183:25" pos:end="183:26">-&gt;</operator><name pos:start="183:27" pos:end="183:28">gr</name><index pos:start="183:29" pos:end="183:46">[<expr pos:start="183:30" pos:end="183:45"><name pos:start="183:30" pos:end="183:45">VGA_GFX_BIT_MASK</name></expr>]</index></name> <operator pos:start="183:48" pos:end="183:48">&amp;</operator> <name pos:start="183:50" pos:end="183:52">val</name></expr>;</expr_stmt>

            <expr_stmt pos:start="185:13" pos:end="185:50"><expr pos:start="185:13" pos:end="185:49"><name pos:start="185:13" pos:end="185:15">val</name> <operator pos:start="185:17" pos:end="185:17">=</operator> <name pos:start="185:19" pos:end="185:49"><name pos:start="185:19" pos:end="185:24">mask16</name><index pos:start="185:25" pos:end="185:49">[<expr pos:start="185:26" pos:end="185:48"><name pos:start="185:26" pos:end="185:48"><name pos:start="185:26" pos:end="185:26">s</name><operator pos:start="185:27" pos:end="185:28">-&gt;</operator><name pos:start="185:29" pos:end="185:30">gr</name><index pos:start="185:31" pos:end="185:48">[<expr pos:start="185:32" pos:end="185:47"><name pos:start="185:32" pos:end="185:47">VGA_GFX_SR_VALUE</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

            <break pos:start="187:13" pos:end="187:18">break;</break>

        </block_content>}</block></switch>



        <comment type="block" pos:start="193:9" pos:end="193:37">/* apply logical operation */</comment>

        <expr_stmt pos:start="195:9" pos:end="195:54"><expr pos:start="195:9" pos:end="195:53"><name pos:start="195:9" pos:end="195:19">func_select</name> <operator pos:start="195:21" pos:end="195:21">=</operator> <name pos:start="195:23" pos:end="195:48"><name pos:start="195:23" pos:end="195:23">s</name><operator pos:start="195:24" pos:end="195:25">-&gt;</operator><name pos:start="195:26" pos:end="195:27">gr</name><index pos:start="195:28" pos:end="195:48">[<expr pos:start="195:29" pos:end="195:47"><name pos:start="195:29" pos:end="195:47">VGA_GFX_DATA_ROTATE</name></expr>]</index></name> <operator pos:start="195:50" pos:end="195:51">&gt;&gt;</operator> <literal type="number" pos:start="195:53" pos:end="195:53">3</literal></expr>;</expr_stmt>

        <switch pos:start="197:9" pos:end="231:9">switch<condition pos:start="197:15" pos:end="197:27">(<expr pos:start="197:16" pos:end="197:26"><name pos:start="197:16" pos:end="197:26">func_select</name></expr>)</condition> <block pos:start="197:29" pos:end="231:9">{<block_content pos:start="199:9" pos:end="229:18">

        <case pos:start="199:9" pos:end="199:15">case <expr pos:start="199:14" pos:end="199:14"><literal type="number" pos:start="199:14" pos:end="199:14">0</literal></expr>:</case>

        <default pos:start="201:9" pos:end="201:16">default:</default>

            <comment type="block" pos:start="203:13" pos:end="203:31">/* nothing to do */</comment>

            <break pos:start="205:13" pos:end="205:18">break;</break>

        <case pos:start="207:9" pos:end="207:15">case <expr pos:start="207:14" pos:end="207:14"><literal type="number" pos:start="207:14" pos:end="207:14">1</literal></expr>:</case>

            <comment type="block" pos:start="209:13" pos:end="209:21">/* and */</comment>

            <expr_stmt pos:start="211:13" pos:end="211:28"><expr pos:start="211:13" pos:end="211:27"><name pos:start="211:13" pos:end="211:15">val</name> <operator pos:start="211:17" pos:end="211:18">&amp;=</operator> <name pos:start="211:20" pos:end="211:27"><name pos:start="211:20" pos:end="211:20">s</name><operator pos:start="211:21" pos:end="211:22">-&gt;</operator><name pos:start="211:23" pos:end="211:27">latch</name></name></expr>;</expr_stmt>

            <break pos:start="213:13" pos:end="213:18">break;</break>

        <case pos:start="215:9" pos:end="215:15">case <expr pos:start="215:14" pos:end="215:14"><literal type="number" pos:start="215:14" pos:end="215:14">2</literal></expr>:</case>

            <comment type="block" pos:start="217:13" pos:end="217:20">/* or */</comment>

            <expr_stmt pos:start="219:13" pos:end="219:28"><expr pos:start="219:13" pos:end="219:27"><name pos:start="219:13" pos:end="219:15">val</name> <operator pos:start="219:17" pos:end="219:18">|=</operator> <name pos:start="219:20" pos:end="219:27"><name pos:start="219:20" pos:end="219:20">s</name><operator pos:start="219:21" pos:end="219:22">-&gt;</operator><name pos:start="219:23" pos:end="219:27">latch</name></name></expr>;</expr_stmt>

            <break pos:start="221:13" pos:end="221:18">break;</break>

        <case pos:start="223:9" pos:end="223:15">case <expr pos:start="223:14" pos:end="223:14"><literal type="number" pos:start="223:14" pos:end="223:14">3</literal></expr>:</case>

            <comment type="block" pos:start="225:13" pos:end="225:21">/* xor */</comment>

            <expr_stmt pos:start="227:13" pos:end="227:28"><expr pos:start="227:13" pos:end="227:27"><name pos:start="227:13" pos:end="227:15">val</name> <operator pos:start="227:17" pos:end="227:18">^=</operator> <name pos:start="227:20" pos:end="227:27"><name pos:start="227:20" pos:end="227:20">s</name><operator pos:start="227:21" pos:end="227:22">-&gt;</operator><name pos:start="227:23" pos:end="227:27">latch</name></name></expr>;</expr_stmt>

            <break pos:start="229:13" pos:end="229:18">break;</break>

        </block_content>}</block></switch>



        <comment type="block" pos:start="235:9" pos:end="235:28">/* apply bit mask */</comment>

        <expr_stmt pos:start="237:9" pos:end="237:34"><expr pos:start="237:9" pos:end="237:33"><name pos:start="237:9" pos:end="237:16">bit_mask</name> <operator pos:start="237:18" pos:end="237:19">|=</operator> <name pos:start="237:21" pos:end="237:28">bit_mask</name> <operator pos:start="237:30" pos:end="237:31">&lt;&lt;</operator> <literal type="number" pos:start="237:33" pos:end="237:33">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="239:9" pos:end="239:35"><expr pos:start="239:9" pos:end="239:34"><name pos:start="239:9" pos:end="239:16">bit_mask</name> <operator pos:start="239:18" pos:end="239:19">|=</operator> <name pos:start="239:21" pos:end="239:28">bit_mask</name> <operator pos:start="239:30" pos:end="239:31">&lt;&lt;</operator> <literal type="number" pos:start="239:33" pos:end="239:34">16</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="241:9" pos:end="241:56"><expr pos:start="241:9" pos:end="241:55"><name pos:start="241:9" pos:end="241:11">val</name> <operator pos:start="241:13" pos:end="241:13">=</operator> <operator pos:start="241:15" pos:end="241:15">(</operator><name pos:start="241:16" pos:end="241:18">val</name> <operator pos:start="241:20" pos:end="241:20">&amp;</operator> <name pos:start="241:22" pos:end="241:29">bit_mask</name><operator pos:start="241:30" pos:end="241:30">)</operator> <operator pos:start="241:32" pos:end="241:32">|</operator> <operator pos:start="241:34" pos:end="241:34">(</operator><name pos:start="241:35" pos:end="241:42"><name pos:start="241:35" pos:end="241:35">s</name><operator pos:start="241:36" pos:end="241:37">-&gt;</operator><name pos:start="241:38" pos:end="241:42">latch</name></name> <operator pos:start="241:44" pos:end="241:44">&amp;</operator> <operator pos:start="241:46" pos:end="241:46">~</operator><name pos:start="241:47" pos:end="241:54">bit_mask</name><operator pos:start="241:55" pos:end="241:55">)</operator></expr>;</expr_stmt>



    <label pos:start="245:5" pos:end="245:13"><name pos:start="245:5" pos:end="245:12">do_write</name>:</label>

        <comment type="block" pos:start="247:9" pos:end="247:42">/* mask data according to sr[2] */</comment>

        <expr_stmt pos:start="249:9" pos:end="249:42"><expr pos:start="249:9" pos:end="249:41"><name pos:start="249:9" pos:end="249:12">mask</name> <operator pos:start="249:14" pos:end="249:14">=</operator> <name pos:start="249:16" pos:end="249:41"><name pos:start="249:16" pos:end="249:16">s</name><operator pos:start="249:17" pos:end="249:18">-&gt;</operator><name pos:start="249:19" pos:end="249:20">sr</name><index pos:start="249:21" pos:end="249:41">[<expr pos:start="249:22" pos:end="249:40"><name pos:start="249:22" pos:end="249:40">VGA_SEQ_PLANE_WRITE</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="251:9" pos:end="251:33"><expr pos:start="251:9" pos:end="251:32"><name pos:start="251:9" pos:end="251:24"><name pos:start="251:9" pos:end="251:9">s</name><operator pos:start="251:10" pos:end="251:11">-&gt;</operator><name pos:start="251:12" pos:end="251:24">plane_updated</name></name> <operator pos:start="251:26" pos:end="251:27">|=</operator> <name pos:start="251:29" pos:end="251:32">mask</name></expr>;</expr_stmt> <comment type="block" pos:start="251:35" pos:end="251:71">/* only used to detect font change */</comment>

        <expr_stmt pos:start="253:9" pos:end="253:34"><expr pos:start="253:9" pos:end="253:33"><name pos:start="253:9" pos:end="253:18">write_mask</name> <operator pos:start="253:20" pos:end="253:20">=</operator> <name pos:start="253:22" pos:end="253:33"><name pos:start="253:22" pos:end="253:27">mask16</name><index pos:start="253:28" pos:end="253:33">[<expr pos:start="253:29" pos:end="253:32"><name pos:start="253:29" pos:end="253:32">mask</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="255:9" pos:end="259:9"><if pos:start="255:9" pos:end="259:9">if <condition pos:start="255:12" pos:end="255:52">(<expr pos:start="255:13" pos:end="255:51"><name pos:start="255:13" pos:end="255:16">addr</name> <operator pos:start="255:18" pos:end="255:18">*</operator> <sizeof pos:start="255:20" pos:end="255:35">sizeof<argument_list pos:start="255:26" pos:end="255:35">(<argument pos:start="255:27" pos:end="255:34"><expr pos:start="255:27" pos:end="255:34"><name pos:start="255:27" pos:end="255:34">uint32_t</name></expr></argument>)</argument_list></sizeof> <operator pos:start="255:37" pos:end="255:38">&gt;=</operator> <name pos:start="255:40" pos:end="255:51"><name pos:start="255:40" pos:end="255:40">s</name><operator pos:start="255:41" pos:end="255:42">-&gt;</operator><name pos:start="255:43" pos:end="255:51">vram_size</name></name></expr>)</condition> <block pos:start="255:54" pos:end="259:9">{<block_content pos:start="257:13" pos:end="257:19">

            <return pos:start="257:13" pos:end="257:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="261:9" pos:end="268:0"><expr pos:start="261:9" pos:end="265:30"><operator pos:start="261:9" pos:end="261:9">(</operator><operator pos:start="261:10" pos:end="261:10">(</operator><name pos:start="261:11" pos:end="261:18">uint32_t</name> <operator pos:start="261:20" pos:end="261:20">*</operator><operator pos:start="261:21" pos:end="261:21">)</operator><name pos:start="261:22" pos:end="261:32"><name pos:start="261:22" pos:end="261:22">s</name><operator pos:start="261:23" pos:end="261:24">-&gt;</operator><name pos:start="261:25" pos:end="261:32">vram_ptr</name></name><operator pos:start="261:33" pos:end="261:33">)</operator><index pos:start="261:34" pos:end="261:39">[<expr pos:start="261:35" pos:end="261:38"><name pos:start="261:35" pos:end="261:38">addr</name></expr>]</index> <operator pos:start="261:41" pos:end="261:41">=</operator>

            <operator pos:start="263:13" pos:end="263:13">(</operator><operator pos:start="263:14" pos:end="263:14">(</operator><operator pos:start="263:15" pos:end="263:15">(</operator><name pos:start="263:16" pos:end="263:23">uint32_t</name> <operator pos:start="263:25" pos:end="263:25">*</operator><operator pos:start="263:26" pos:end="263:26">)</operator><name pos:start="263:27" pos:end="263:37"><name pos:start="263:27" pos:end="263:27">s</name><operator pos:start="263:28" pos:end="263:29">-&gt;</operator><name pos:start="263:30" pos:end="263:37">vram_ptr</name></name><operator pos:start="263:38" pos:end="263:38">)</operator><index pos:start="263:39" pos:end="263:44">[<expr pos:start="263:40" pos:end="263:43"><name pos:start="263:40" pos:end="263:43">addr</name></expr>]</index> <operator pos:start="263:46" pos:end="263:46">&amp;</operator> <operator pos:start="263:48" pos:end="263:48">~</operator><name pos:start="263:49" pos:end="263:58">write_mask</name><operator pos:start="263:59" pos:end="263:59">)</operator> <operator pos:start="263:61" pos:end="263:61">|</operator>

            <operator pos:start="265:13" pos:end="265:13">(</operator><name pos:start="265:14" pos:end="265:16">val</name> <operator pos:start="265:18" pos:end="265:18">&amp;</operator> <name pos:start="265:20" pos:end="265:29">write_mask</name><operator pos:start="265:30" pos:end="265:30">)</operator></expr>;</expr_stmt>

<cpp:ifdef pos:start="267:1" pos:end="267:20">#<cpp:directive pos:start="267:2" pos:end="267:6">ifdef</cpp:directive> <name pos:start="267:8" pos:end="267:20">DEBUG_VGA_MEM</name></cpp:ifdef>

        <expr_stmt pos:start="269:9" pos:end="274:0"><expr pos:start="269:9" pos:end="271:41"><call pos:start="269:9" pos:end="271:41"><name pos:start="269:9" pos:end="269:14">printf</name><argument_list pos:start="269:15" pos:end="271:41">(<argument pos:start="269:16" pos:end="269:76"><expr pos:start="269:16" pos:end="269:76"><literal type="string" pos:start="269:16" pos:end="269:32">"vga: latch: [0x"</literal> <name pos:start="269:34" pos:end="269:47">TARGET_FMT_plx</name> <literal type="string" pos:start="269:49" pos:end="269:76">"] mask=0x%08x val=0x%08x\n"</literal></expr></argument>,

               <argument pos:start="271:16" pos:end="271:23"><expr pos:start="271:16" pos:end="271:23"><name pos:start="271:16" pos:end="271:19">addr</name> <operator pos:start="271:21" pos:end="271:21">*</operator> <literal type="number" pos:start="271:23" pos:end="271:23">4</literal></expr></argument>, <argument pos:start="271:26" pos:end="271:35"><expr pos:start="271:26" pos:end="271:35"><name pos:start="271:26" pos:end="271:35">write_mask</name></expr></argument>, <argument pos:start="271:38" pos:end="271:40"><expr pos:start="271:38" pos:end="271:40"><name pos:start="271:38" pos:end="271:40">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="273:1" pos:end="273:6">#<cpp:directive pos:start="273:2" pos:end="273:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="275:9" pos:end="275:71"><expr pos:start="275:9" pos:end="275:70"><call pos:start="275:9" pos:end="275:70"><name pos:start="275:9" pos:end="275:31">memory_region_set_dirty</name><argument_list pos:start="275:32" pos:end="275:70">(<argument pos:start="275:33" pos:end="275:40"><expr pos:start="275:33" pos:end="275:40"><operator pos:start="275:33" pos:end="275:33">&amp;</operator><name pos:start="275:34" pos:end="275:40"><name pos:start="275:34" pos:end="275:34">s</name><operator pos:start="275:35" pos:end="275:36">-&gt;</operator><name pos:start="275:37" pos:end="275:40">vram</name></name></expr></argument>, <argument pos:start="275:43" pos:end="275:51"><expr pos:start="275:43" pos:end="275:51"><name pos:start="275:43" pos:end="275:46">addr</name> <operator pos:start="275:48" pos:end="275:49">&lt;&lt;</operator> <literal type="number" pos:start="275:51" pos:end="275:51">2</literal></expr></argument>, <argument pos:start="275:54" pos:end="275:69"><expr pos:start="275:54" pos:end="275:69"><sizeof pos:start="275:54" pos:end="275:69">sizeof<argument_list pos:start="275:60" pos:end="275:69">(<argument pos:start="275:61" pos:end="275:68"><expr pos:start="275:61" pos:end="275:68"><name pos:start="275:61" pos:end="275:68">uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
