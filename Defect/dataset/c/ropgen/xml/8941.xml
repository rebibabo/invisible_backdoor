<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8941.c" pos:tabs="8"><function pos:start="1:1" pos:end="87:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">mov_write_stts_tag</name><parameter_list pos:start="1:30" pos:end="1:63">(<parameter pos:start="1:31" pos:end="1:45"><decl pos:start="1:31" pos:end="1:45"><type pos:start="1:31" pos:end="1:45"><name pos:start="1:31" pos:end="1:41">AVIOContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:45">pb</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:62"><decl pos:start="1:48" pos:end="1:62"><type pos:start="1:48" pos:end="1:62"><name pos:start="1:48" pos:end="1:55">MOVTrack</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:62">track</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="87:1">{<block_content pos:start="5:5" pos:end="85:21">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">MOVStts</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:25">stts_entries</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:20">entries</name> <init pos:start="7:22" pos:end="7:25">= <expr pos:start="7:24" pos:end="7:25"><operator pos:start="7:24" pos:end="7:24">-</operator><literal type="number" pos:start="7:25" pos:end="7:25">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:22">atom_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="63:5"><if pos:start="15:5" pos:end="29:5">if <condition pos:start="15:8" pos:end="15:74">(<expr pos:start="15:9" pos:end="15:73"><name pos:start="15:9" pos:end="15:30"><name pos:start="15:9" pos:end="15:13">track</name><operator pos:start="15:14" pos:end="15:15">-&gt;</operator><name pos:start="15:16" pos:end="15:18">enc</name><operator pos:start="15:19" pos:end="15:20">-&gt;</operator><name pos:start="15:21" pos:end="15:30">codec_type</name></name> <operator pos:start="15:32" pos:end="15:33">==</operator> <name pos:start="15:35" pos:end="15:52">AVMEDIA_TYPE_AUDIO</name> <operator pos:start="15:54" pos:end="15:55">&amp;&amp;</operator> <operator pos:start="15:57" pos:end="15:57">!</operator><name pos:start="15:58" pos:end="15:73"><name pos:start="15:58" pos:end="15:62">track</name><operator pos:start="15:63" pos:end="15:64">-&gt;</operator><name pos:start="15:65" pos:end="15:73">audio_vbr</name></name></expr>)</condition> <block pos:start="15:76" pos:end="29:5">{<block_content pos:start="17:9" pos:end="27:20">

        <expr_stmt pos:start="17:9" pos:end="17:56"><expr pos:start="17:9" pos:end="17:55"><name pos:start="17:9" pos:end="17:20">stts_entries</name> <operator pos:start="17:22" pos:end="17:22">=</operator> <call pos:start="17:24" pos:end="17:55"><name pos:start="17:24" pos:end="17:32">av_malloc</name><argument_list pos:start="17:33" pos:end="17:55">(<argument pos:start="17:34" pos:end="17:54"><expr pos:start="17:34" pos:end="17:54"><sizeof pos:start="17:34" pos:end="17:54">sizeof<argument_list pos:start="17:40" pos:end="17:54">(<argument pos:start="17:41" pos:end="17:53"><expr pos:start="17:41" pos:end="17:53"><operator pos:start="17:41" pos:end="17:41">*</operator><name pos:start="17:42" pos:end="17:53">stts_entries</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="17:58" pos:end="17:72">/* one entry */</comment>

        <if_stmt pos:start="19:9" pos:end="21:35"><if pos:start="19:9" pos:end="21:35">if <condition pos:start="19:12" pos:end="19:26">(<expr pos:start="19:13" pos:end="19:25"><operator pos:start="19:13" pos:end="19:13">!</operator><name pos:start="19:14" pos:end="19:25">stts_entries</name></expr>)</condition><block type="pseudo" pos:start="21:13" pos:end="21:35"><block_content pos:start="21:13" pos:end="21:35">

            <return pos:start="21:13" pos:end="21:35">return <expr pos:start="21:20" pos:end="21:34"><call pos:start="21:20" pos:end="21:34"><name pos:start="21:20" pos:end="21:26">AVERROR</name><argument_list pos:start="21:27" pos:end="21:34">(<argument pos:start="21:28" pos:end="21:33"><expr pos:start="21:28" pos:end="21:33"><name pos:start="21:28" pos:end="21:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:52"><expr pos:start="23:9" pos:end="23:51"><name pos:start="23:9" pos:end="23:23"><name pos:start="23:9" pos:end="23:20">stts_entries</name><index pos:start="23:21" pos:end="23:23">[<expr pos:start="23:22" pos:end="23:22"><literal type="number" pos:start="23:22" pos:end="23:22">0</literal></expr>]</index></name><operator pos:start="23:24" pos:end="23:24">.</operator><name pos:start="23:25" pos:end="23:29">count</name> <operator pos:start="23:31" pos:end="23:31">=</operator> <name pos:start="23:33" pos:end="23:51"><name pos:start="23:33" pos:end="23:37">track</name><operator pos:start="23:38" pos:end="23:39">-&gt;</operator><name pos:start="23:40" pos:end="23:51">sample_count</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:37"><expr pos:start="25:9" pos:end="25:36"><name pos:start="25:9" pos:end="25:23"><name pos:start="25:9" pos:end="25:20">stts_entries</name><index pos:start="25:21" pos:end="25:23">[<expr pos:start="25:22" pos:end="25:22"><literal type="number" pos:start="25:22" pos:end="25:22">0</literal></expr>]</index></name><operator pos:start="25:24" pos:end="25:24">.</operator><name pos:start="25:25" pos:end="25:32">duration</name> <operator pos:start="25:34" pos:end="25:34">=</operator> <literal type="number" pos:start="25:36" pos:end="25:36">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:20"><expr pos:start="27:9" pos:end="27:19"><name pos:start="27:9" pos:end="27:15">entries</name> <operator pos:start="27:17" pos:end="27:17">=</operator> <literal type="number" pos:start="27:19" pos:end="27:19">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="29:7" pos:end="63:5">else <block pos:start="29:12" pos:end="63:5">{<block_content pos:start="31:9" pos:end="61:18">

        <expr_stmt pos:start="31:9" pos:end="35:28"><expr pos:start="31:9" pos:end="35:27"><name pos:start="31:9" pos:end="31:20">stts_entries</name> <operator pos:start="31:22" pos:end="31:22">=</operator> <ternary pos:start="31:24" pos:end="35:27"><condition pos:start="31:24" pos:end="31:37"><expr pos:start="31:24" pos:end="31:35"><name pos:start="31:24" pos:end="31:35"><name pos:start="31:24" pos:end="31:28">track</name><operator pos:start="31:29" pos:end="31:30">-&gt;</operator><name pos:start="31:31" pos:end="31:35">entry</name></name></expr> ?</condition><then pos:start="33:24" pos:end="33:75">

                       <expr pos:start="33:24" pos:end="33:75"><call pos:start="33:24" pos:end="33:75"><name pos:start="33:24" pos:end="33:38">av_malloc_array</name><argument_list pos:start="33:39" pos:end="33:75">(<argument pos:start="33:40" pos:end="33:51"><expr pos:start="33:40" pos:end="33:51"><name pos:start="33:40" pos:end="33:51"><name pos:start="33:40" pos:end="33:44">track</name><operator pos:start="33:45" pos:end="33:46">-&gt;</operator><name pos:start="33:47" pos:end="33:51">entry</name></name></expr></argument>, <argument pos:start="33:54" pos:end="33:74"><expr pos:start="33:54" pos:end="33:74"><sizeof pos:start="33:54" pos:end="33:74">sizeof<argument_list pos:start="33:60" pos:end="33:74">(<argument pos:start="33:61" pos:end="33:73"><expr pos:start="33:61" pos:end="33:73"><operator pos:start="33:61" pos:end="33:61">*</operator><name pos:start="33:62" pos:end="33:73">stts_entries</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> </then><else pos:start="33:77" pos:end="35:27">: <comment type="block" pos:start="33:79" pos:end="33:94">/* worst case */</comment>

                       <expr pos:start="35:24" pos:end="35:27"><name pos:start="35:24" pos:end="35:27">NULL</name></expr></else></ternary></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="39:35"><if pos:start="37:9" pos:end="39:35">if <condition pos:start="37:12" pos:end="37:26">(<expr pos:start="37:13" pos:end="37:25"><operator pos:start="37:13" pos:end="37:13">!</operator><name pos:start="37:14" pos:end="37:25">stts_entries</name></expr>)</condition><block type="pseudo" pos:start="39:13" pos:end="39:35"><block_content pos:start="39:13" pos:end="39:35">

            <return pos:start="39:13" pos:end="39:35">return <expr pos:start="39:20" pos:end="39:34"><call pos:start="39:20" pos:end="39:34"><name pos:start="39:20" pos:end="39:26">AVERROR</name><argument_list pos:start="39:27" pos:end="39:34">(<argument pos:start="39:28" pos:end="39:33"><expr pos:start="39:28" pos:end="39:33"><name pos:start="39:28" pos:end="39:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <for pos:start="41:9" pos:end="59:9">for <control pos:start="41:13" pos:end="41:42">(<init pos:start="41:14" pos:end="41:19"><expr pos:start="41:14" pos:end="41:18"><name pos:start="41:14" pos:end="41:14">i</name> <operator pos:start="41:16" pos:end="41:16">=</operator> <literal type="number" pos:start="41:18" pos:end="41:18">0</literal></expr>;</init> <condition pos:start="41:21" pos:end="41:37"><expr pos:start="41:21" pos:end="41:36"><name pos:start="41:21" pos:end="41:21">i</name> <operator pos:start="41:23" pos:end="41:23">&lt;</operator> <name pos:start="41:25" pos:end="41:36"><name pos:start="41:25" pos:end="41:29">track</name><operator pos:start="41:30" pos:end="41:31">-&gt;</operator><name pos:start="41:32" pos:end="41:36">entry</name></name></expr>;</condition> <incr pos:start="41:39" pos:end="41:41"><expr pos:start="41:39" pos:end="41:41"><name pos:start="41:39" pos:end="41:39">i</name><operator pos:start="41:40" pos:end="41:41">++</operator></expr></incr>)</control> <block pos:start="41:44" pos:end="59:9">{<block_content pos:start="43:13" pos:end="57:13">

            <decl_stmt pos:start="43:13" pos:end="43:58"><decl pos:start="43:13" pos:end="43:57"><type pos:start="43:13" pos:end="43:15"><name pos:start="43:13" pos:end="43:15">int</name></type> <name pos:start="43:17" pos:end="43:24">duration</name> <init pos:start="43:26" pos:end="43:57">= <expr pos:start="43:28" pos:end="43:57"><call pos:start="43:28" pos:end="43:57"><name pos:start="43:28" pos:end="43:47">get_cluster_duration</name><argument_list pos:start="43:48" pos:end="43:57">(<argument pos:start="43:49" pos:end="43:53"><expr pos:start="43:49" pos:end="43:53"><name pos:start="43:49" pos:end="43:53">track</name></expr></argument>, <argument pos:start="43:56" pos:end="43:56"><expr pos:start="43:56" pos:end="43:56"><name pos:start="43:56" pos:end="43:56">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="45:13" pos:end="57:13"><if pos:start="45:13" pos:end="49:13">if <condition pos:start="45:16" pos:end="45:64">(<expr pos:start="45:17" pos:end="45:63"><name pos:start="45:17" pos:end="45:17">i</name> <operator pos:start="45:19" pos:end="45:20">&amp;&amp;</operator> <name pos:start="45:22" pos:end="45:29">duration</name> <operator pos:start="45:31" pos:end="45:32">==</operator> <name pos:start="45:34" pos:end="45:54"><name pos:start="45:34" pos:end="45:45">stts_entries</name><index pos:start="45:46" pos:end="45:54">[<expr pos:start="45:47" pos:end="45:53"><name pos:start="45:47" pos:end="45:53">entries</name></expr>]</index></name><operator pos:start="45:55" pos:end="45:55">.</operator><name pos:start="45:56" pos:end="45:63">duration</name></expr>)</condition> <block pos:start="45:66" pos:end="49:13">{<block_content pos:start="47:17" pos:end="47:46">

                <expr_stmt pos:start="47:17" pos:end="47:46"><expr pos:start="47:17" pos:end="47:45"><name pos:start="47:17" pos:end="47:37"><name pos:start="47:17" pos:end="47:28">stts_entries</name><index pos:start="47:29" pos:end="47:37">[<expr pos:start="47:30" pos:end="47:36"><name pos:start="47:30" pos:end="47:36">entries</name></expr>]</index></name><operator pos:start="47:38" pos:end="47:38">.</operator><name pos:start="47:39" pos:end="47:43">count</name><operator pos:start="47:44" pos:end="47:45">++</operator></expr>;</expr_stmt> <comment type="block" pos:start="47:48" pos:end="47:61">/* compress */</comment>

            </block_content>}</block></if> <else pos:start="49:15" pos:end="57:13">else <block pos:start="49:20" pos:end="57:13">{<block_content pos:start="51:17" pos:end="55:48">

                <expr_stmt pos:start="51:17" pos:end="51:26"><expr pos:start="51:17" pos:end="51:25"><name pos:start="51:17" pos:end="51:23">entries</name><operator pos:start="51:24" pos:end="51:25">++</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="53:17" pos:end="53:58"><expr pos:start="53:17" pos:end="53:57"><name pos:start="53:17" pos:end="53:37"><name pos:start="53:17" pos:end="53:28">stts_entries</name><index pos:start="53:29" pos:end="53:37">[<expr pos:start="53:30" pos:end="53:36"><name pos:start="53:30" pos:end="53:36">entries</name></expr>]</index></name><operator pos:start="53:38" pos:end="53:38">.</operator><name pos:start="53:39" pos:end="53:46">duration</name> <operator pos:start="53:48" pos:end="53:48">=</operator> <name pos:start="53:50" pos:end="53:57">duration</name></expr>;</expr_stmt>

                <expr_stmt pos:start="55:17" pos:end="55:48"><expr pos:start="55:17" pos:end="55:47"><name pos:start="55:17" pos:end="55:37"><name pos:start="55:17" pos:end="55:28">stts_entries</name><index pos:start="55:29" pos:end="55:37">[<expr pos:start="55:30" pos:end="55:36"><name pos:start="55:30" pos:end="55:36">entries</name></expr>]</index></name><operator pos:start="55:38" pos:end="55:38">.</operator><name pos:start="55:39" pos:end="55:43">count</name> <operator pos:start="55:45" pos:end="55:45">=</operator> <literal type="number" pos:start="55:47" pos:end="55:47">1</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="61:9" pos:end="61:18"><expr pos:start="61:9" pos:end="61:17"><name pos:start="61:9" pos:end="61:15">entries</name><operator pos:start="61:16" pos:end="61:17">++</operator></expr>;</expr_stmt> <comment type="block" pos:start="61:20" pos:end="61:33">/* last one */</comment>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:35"><expr pos:start="65:5" pos:end="65:34"><name pos:start="65:5" pos:end="65:13">atom_size</name> <operator pos:start="65:15" pos:end="65:15">=</operator> <literal type="number" pos:start="65:17" pos:end="65:20">16</literal> <operator pos:start="65:20" pos:end="65:20">+</operator> <operator pos:start="65:22" pos:end="65:22">(</operator><name pos:start="65:23" pos:end="65:29">entries</name> <operator pos:start="65:31" pos:end="65:31">*</operator> <literal type="number" pos:start="65:33" pos:end="65:33">8</literal><operator pos:start="65:34" pos:end="65:34">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:29"><expr pos:start="67:5" pos:end="67:28"><call pos:start="67:5" pos:end="67:28"><name pos:start="67:5" pos:end="67:13">avio_wb32</name><argument_list pos:start="67:14" pos:end="67:28">(<argument pos:start="67:15" pos:end="67:16"><expr pos:start="67:15" pos:end="67:16"><name pos:start="67:15" pos:end="67:16">pb</name></expr></argument>, <argument pos:start="67:19" pos:end="67:27"><expr pos:start="67:19" pos:end="67:27"><name pos:start="67:19" pos:end="67:27">atom_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="67:31" pos:end="67:40">/* size */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:29"><expr pos:start="69:5" pos:end="69:28"><call pos:start="69:5" pos:end="69:28"><name pos:start="69:5" pos:end="69:16">ffio_wfourcc</name><argument_list pos:start="69:17" pos:end="69:28">(<argument pos:start="69:18" pos:end="69:19"><expr pos:start="69:18" pos:end="69:19"><name pos:start="69:18" pos:end="69:19">pb</name></expr></argument>, <argument pos:start="69:22" pos:end="69:27"><expr pos:start="69:22" pos:end="69:27"><literal type="string" pos:start="69:22" pos:end="69:27">"stts"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:21"><expr pos:start="71:5" pos:end="71:20"><call pos:start="71:5" pos:end="71:20"><name pos:start="71:5" pos:end="71:13">avio_wb32</name><argument_list pos:start="71:14" pos:end="71:20">(<argument pos:start="71:15" pos:end="71:16"><expr pos:start="71:15" pos:end="71:16"><name pos:start="71:15" pos:end="71:16">pb</name></expr></argument>, <argument pos:start="71:19" pos:end="71:19"><expr pos:start="71:19" pos:end="71:19"><literal type="number" pos:start="71:19" pos:end="71:19">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="71:23" pos:end="71:43">/* version &amp; flags */</comment>

    <expr_stmt pos:start="73:5" pos:end="73:27"><expr pos:start="73:5" pos:end="73:26"><call pos:start="73:5" pos:end="73:26"><name pos:start="73:5" pos:end="73:13">avio_wb32</name><argument_list pos:start="73:14" pos:end="73:26">(<argument pos:start="73:15" pos:end="73:16"><expr pos:start="73:15" pos:end="73:16"><name pos:start="73:15" pos:end="73:16">pb</name></expr></argument>, <argument pos:start="73:19" pos:end="73:25"><expr pos:start="73:19" pos:end="73:25"><name pos:start="73:19" pos:end="73:25">entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="73:29" pos:end="73:45">/* entry count */</comment>

    <for pos:start="75:5" pos:end="81:5">for <control pos:start="75:9" pos:end="75:33">(<init pos:start="75:10" pos:end="75:15"><expr pos:start="75:10" pos:end="75:14"><name pos:start="75:10" pos:end="75:10">i</name> <operator pos:start="75:12" pos:end="75:12">=</operator> <literal type="number" pos:start="75:14" pos:end="75:14">0</literal></expr>;</init> <condition pos:start="75:17" pos:end="75:28"><expr pos:start="75:17" pos:end="75:27"><name pos:start="75:17" pos:end="75:17">i</name> <operator pos:start="75:19" pos:end="75:19">&lt;</operator> <name pos:start="75:21" pos:end="75:27">entries</name></expr>;</condition> <incr pos:start="75:30" pos:end="75:32"><expr pos:start="75:30" pos:end="75:32"><name pos:start="75:30" pos:end="75:30">i</name><operator pos:start="75:31" pos:end="75:32">++</operator></expr></incr>)</control> <block pos:start="75:35" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:48">

        <expr_stmt pos:start="77:9" pos:end="77:45"><expr pos:start="77:9" pos:end="77:44"><call pos:start="77:9" pos:end="77:44"><name pos:start="77:9" pos:end="77:17">avio_wb32</name><argument_list pos:start="77:18" pos:end="77:44">(<argument pos:start="77:19" pos:end="77:20"><expr pos:start="77:19" pos:end="77:20"><name pos:start="77:19" pos:end="77:20">pb</name></expr></argument>, <argument pos:start="77:23" pos:end="77:43"><expr pos:start="77:23" pos:end="77:43"><name pos:start="77:23" pos:end="77:37"><name pos:start="77:23" pos:end="77:34">stts_entries</name><index pos:start="77:35" pos:end="77:37">[<expr pos:start="77:36" pos:end="77:36"><name pos:start="77:36" pos:end="77:36">i</name></expr>]</index></name><operator pos:start="77:38" pos:end="77:38">.</operator><name pos:start="77:39" pos:end="77:43">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:48"><expr pos:start="79:9" pos:end="79:47"><call pos:start="79:9" pos:end="79:47"><name pos:start="79:9" pos:end="79:17">avio_wb32</name><argument_list pos:start="79:18" pos:end="79:47">(<argument pos:start="79:19" pos:end="79:20"><expr pos:start="79:19" pos:end="79:20"><name pos:start="79:19" pos:end="79:20">pb</name></expr></argument>, <argument pos:start="79:23" pos:end="79:46"><expr pos:start="79:23" pos:end="79:46"><name pos:start="79:23" pos:end="79:37"><name pos:start="79:23" pos:end="79:34">stts_entries</name><index pos:start="79:35" pos:end="79:37">[<expr pos:start="79:36" pos:end="79:36"><name pos:start="79:36" pos:end="79:36">i</name></expr>]</index></name><operator pos:start="79:38" pos:end="79:38">.</operator><name pos:start="79:39" pos:end="79:46">duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="83:5" pos:end="83:26"><expr pos:start="83:5" pos:end="83:25"><call pos:start="83:5" pos:end="83:25"><name pos:start="83:5" pos:end="83:11">av_free</name><argument_list pos:start="83:12" pos:end="83:25">(<argument pos:start="83:13" pos:end="83:24"><expr pos:start="83:13" pos:end="83:24"><name pos:start="83:13" pos:end="83:24">stts_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="85:5" pos:end="85:21">return <expr pos:start="85:12" pos:end="85:20"><name pos:start="85:12" pos:end="85:20">atom_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
