<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9002.c" pos:tabs="8"><function pos:start="1:1" pos:end="43:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:23">qemu_thread_create</name><parameter_list pos:start="1:24" pos:end="5:43">(<parameter pos:start="1:25" pos:end="1:42"><decl pos:start="1:25" pos:end="1:42"><type pos:start="1:25" pos:end="1:42"><name pos:start="1:25" pos:end="1:34">QemuThread</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:42">thread</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:53"><function_decl pos:start="3:24" pos:end="3:53"><type pos:start="3:24" pos:end="3:29"><name pos:start="3:24" pos:end="3:27">void</name> <modifier pos:start="3:29" pos:end="3:29">*</modifier></type>(<modifier pos:start="3:31" pos:end="3:31">*</modifier><name pos:start="3:32" pos:end="3:44">start_routine</name>)<parameter_list pos:start="3:46" pos:end="3:53">(<parameter pos:start="3:47" pos:end="3:52"><decl pos:start="3:47" pos:end="3:52"><type pos:start="3:47" pos:end="3:52"><name pos:start="3:47" pos:end="3:50">void</name> <modifier pos:start="3:52" pos:end="3:52">*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,

                       <parameter pos:start="5:24" pos:end="5:32"><decl pos:start="5:24" pos:end="5:32"><type pos:start="5:24" pos:end="5:32"><name pos:start="5:24" pos:end="5:27">void</name> <modifier pos:start="5:29" pos:end="5:29">*</modifier></type><name pos:start="5:30" pos:end="5:32">arg</name></decl></parameter>, <parameter pos:start="5:35" pos:end="5:42"><decl pos:start="5:35" pos:end="5:42"><type pos:start="5:35" pos:end="5:42"><name pos:start="5:35" pos:end="5:37">int</name></type> <name pos:start="5:39" pos:end="5:42">mode</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="43:1">{<block_content pos:start="9:5" pos:end="41:25">

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">HANDLE</name></type> <name pos:start="9:12" pos:end="9:18">hThread</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:41"><expr pos:start="13:5" pos:end="13:40"><call pos:start="13:5" pos:end="13:40"><name pos:start="13:5" pos:end="13:10">assert</name><argument_list pos:start="13:11" pos:end="13:40">(<argument pos:start="13:12" pos:end="13:39"><expr pos:start="13:12" pos:end="13:39"><name pos:start="13:12" pos:end="13:15">mode</name> <operator pos:start="13:17" pos:end="13:18">==</operator> <name pos:start="13:20" pos:end="13:39">QEMU_THREAD_DETACHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <decl_stmt pos:start="17:5" pos:end="17:32"><decl pos:start="17:5" pos:end="17:31"><type pos:start="17:5" pos:end="17:27"><name pos:start="17:5" pos:end="17:25"><name pos:start="17:5" pos:end="17:10">struct</name> <name pos:start="17:12" pos:end="17:25">QemuThreadData</name></name> <modifier pos:start="17:27" pos:end="17:27">*</modifier></type><name pos:start="17:28" pos:end="17:31">data</name></decl>;</decl_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:23"><expr pos:start="19:5" pos:end="19:22"><call pos:start="19:5" pos:end="19:22"><name pos:start="19:5" pos:end="19:20">qemu_thread_init</name><argument_list pos:start="19:21" pos:end="19:22">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:34"><expr pos:start="21:5" pos:end="21:33"><name pos:start="21:5" pos:end="21:8">data</name> <operator pos:start="21:10" pos:end="21:10">=</operator> <call pos:start="21:12" pos:end="21:33"><name pos:start="21:12" pos:end="21:19">g_malloc</name><argument_list pos:start="21:20" pos:end="21:33">(<argument pos:start="21:21" pos:end="21:32"><expr pos:start="21:21" pos:end="21:32"><sizeof pos:start="21:21" pos:end="21:26">sizeof <name/></sizeof>*<name pos:start="21:29" pos:end="21:32">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:26"><expr pos:start="23:5" pos:end="23:25"><name pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:8">data</name><operator pos:start="23:9" pos:end="23:10">-&gt;</operator><name pos:start="23:11" pos:end="23:16">thread</name></name> <operator pos:start="23:18" pos:end="23:18">=</operator> <name pos:start="23:20" pos:end="23:25">thread</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:40"><expr pos:start="25:5" pos:end="25:39"><name pos:start="25:5" pos:end="25:23"><name pos:start="25:5" pos:end="25:8">data</name><operator pos:start="25:9" pos:end="25:10">-&gt;</operator><name pos:start="25:11" pos:end="25:23">start_routine</name></name> <operator pos:start="25:25" pos:end="25:25">=</operator> <name pos:start="25:27" pos:end="25:39">start_routine</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:20"><expr pos:start="27:5" pos:end="27:19"><name pos:start="27:5" pos:end="27:13"><name pos:start="27:5" pos:end="27:8">data</name><operator pos:start="27:9" pos:end="27:10">-&gt;</operator><name pos:start="27:11" pos:end="27:13">arg</name></name> <operator pos:start="27:15" pos:end="27:15">=</operator> <name pos:start="27:17" pos:end="27:19">arg</name></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="33:53"><expr pos:start="31:5" pos:end="33:52"><name pos:start="31:5" pos:end="31:11">hThread</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <operator pos:start="31:15" pos:end="31:15">(</operator><name pos:start="31:16" pos:end="31:21">HANDLE</name><operator pos:start="31:22" pos:end="31:22">)</operator> <call pos:start="31:24" pos:end="33:52"><name pos:start="31:24" pos:end="31:37">_beginthreadex</name><argument_list pos:start="31:38" pos:end="33:52">(<argument pos:start="31:39" pos:end="31:42"><expr pos:start="31:39" pos:end="31:42"><name pos:start="31:39" pos:end="31:42">NULL</name></expr></argument>, <argument pos:start="31:45" pos:end="31:45"><expr pos:start="31:45" pos:end="31:45"><literal type="number" pos:start="31:45" pos:end="31:45">0</literal></expr></argument>, <argument pos:start="31:48" pos:end="31:66"><expr pos:start="31:48" pos:end="31:66"><name pos:start="31:48" pos:end="31:66">win32_start_routine</name></expr></argument>,

                                      <argument pos:start="33:39" pos:end="33:42"><expr pos:start="33:39" pos:end="33:42"><name pos:start="33:39" pos:end="33:42">data</name></expr></argument>, <argument pos:start="33:45" pos:end="33:45"><expr pos:start="33:45" pos:end="33:45"><literal type="number" pos:start="33:45" pos:end="33:45">0</literal></expr></argument>, <argument pos:start="33:48" pos:end="33:51"><expr pos:start="33:48" pos:end="33:51"><name pos:start="33:48" pos:end="33:51">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="39:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:17">(<expr pos:start="35:9" pos:end="35:16"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:16">hThread</name></expr>)</condition> <block pos:start="35:19" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:45">

        <expr_stmt pos:start="37:9" pos:end="37:45"><expr pos:start="37:9" pos:end="37:44"><call pos:start="37:9" pos:end="37:44"><name pos:start="37:9" pos:end="37:18">error_exit</name><argument_list pos:start="37:19" pos:end="37:44">(<argument pos:start="37:20" pos:end="37:33"><expr pos:start="37:20" pos:end="37:33"><call pos:start="37:20" pos:end="37:33"><name pos:start="37:20" pos:end="37:31">GetLastError</name><argument_list pos:start="37:32" pos:end="37:33">()</argument_list></call></expr></argument>, <argument pos:start="37:36" pos:end="37:43"><expr pos:start="37:36" pos:end="37:43"><name pos:start="37:36" pos:end="37:43">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:25"><expr pos:start="41:5" pos:end="41:24"><call pos:start="41:5" pos:end="41:24"><name pos:start="41:5" pos:end="41:15">CloseHandle</name><argument_list pos:start="41:16" pos:end="41:24">(<argument pos:start="41:17" pos:end="41:23"><expr pos:start="41:17" pos:end="41:23"><name pos:start="41:17" pos:end="41:23">hThread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
