<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3493.c" pos:tabs="8"><function pos:start="1:1" pos:end="117:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">ff_h264_idct8_add_mmx</name><parameter_list pos:start="1:34" pos:end="1:75">(<parameter pos:start="1:35" pos:end="1:46"><decl pos:start="1:35" pos:end="1:46"><type pos:start="1:35" pos:end="1:46"><name pos:start="1:35" pos:end="1:41">uint8_t</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:46">dst</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:62"><decl pos:start="1:49" pos:end="1:62"><type pos:start="1:49" pos:end="1:62"><name pos:start="1:49" pos:end="1:55">int16_t</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:62">block</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:74"><decl pos:start="1:65" pos:end="1:74"><type pos:start="1:65" pos:end="1:74"><name pos:start="1:65" pos:end="1:67">int</name></type> <name pos:start="1:69" pos:end="1:74">stride</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="117:1">{<block_content pos:start="5:5" pos:end="115:47">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>

    <expr_stmt pos:start="7:5" pos:end="7:40"><expr pos:start="7:5" pos:end="7:39"><call pos:start="7:5" pos:end="7:35"><name pos:start="7:5" pos:end="7:19">DECLARE_ALIGNED</name><argument_list pos:start="7:20" pos:end="7:35">(<argument pos:start="7:21" pos:end="7:21"><expr pos:start="7:21" pos:end="7:21"><literal type="number" pos:start="7:21" pos:end="7:21">8</literal></expr></argument>, <argument pos:start="7:24" pos:end="7:30"><expr pos:start="7:24" pos:end="7:30"><name pos:start="7:24" pos:end="7:30">int16_t</name></expr></argument>, <argument pos:start="7:33" pos:end="7:34"><expr pos:start="7:33" pos:end="7:34"><name pos:start="7:33" pos:end="7:34">b2</name></expr></argument>)</argument_list></call><index pos:start="7:36" pos:end="7:39">[<expr pos:start="7:37" pos:end="7:38"><literal type="number" pos:start="7:37" pos:end="7:38">64</literal></expr>]</index></expr>;</expr_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:19"><expr pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:9">block</name><index pos:start="11:10" pos:end="11:12">[<expr pos:start="11:11" pos:end="11:11"><literal type="number" pos:start="11:11" pos:end="11:11">0</literal></expr>]</index></name> <operator pos:start="11:14" pos:end="11:15">+=</operator> <literal type="number" pos:start="11:17" pos:end="11:18">32</literal></expr>;</expr_stmt>



    <for pos:start="15:5" pos:end="59:5">for<control pos:start="15:8" pos:end="15:22">(<init pos:start="15:9" pos:end="15:12"><expr pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:9">i</name><operator pos:start="15:10" pos:end="15:10">=</operator><literal type="number" pos:start="15:11" pos:end="15:11">0</literal></expr>;</init> <condition pos:start="15:14" pos:end="15:17"><expr pos:start="15:14" pos:end="15:16"><name pos:start="15:14" pos:end="15:14">i</name><operator pos:start="15:15" pos:end="15:15">&lt;</operator><literal type="number" pos:start="15:16" pos:end="15:16">2</literal></expr>;</condition> <incr pos:start="15:19" pos:end="15:21"><expr pos:start="15:19" pos:end="15:21"><name pos:start="15:19" pos:end="15:19">i</name><operator pos:start="15:20" pos:end="15:21">++</operator></expr></incr>)</control><block pos:start="15:23" pos:end="59:5">{<block_content pos:start="17:9" pos:end="57:10">

        <expr_stmt pos:start="17:9" pos:end="17:42"><expr pos:start="17:9" pos:end="17:41"><call pos:start="17:9" pos:end="17:41"><name pos:start="17:9" pos:end="17:23">DECLARE_ALIGNED</name><argument_list pos:start="17:24" pos:end="17:41">(<argument pos:start="17:25" pos:end="17:25"><expr pos:start="17:25" pos:end="17:25"><literal type="number" pos:start="17:25" pos:end="17:25">8</literal></expr></argument>, <argument pos:start="17:28" pos:end="17:35"><expr pos:start="17:28" pos:end="17:35"><name pos:start="17:28" pos:end="17:35">uint64_t</name></expr></argument>, <argument pos:start="17:38" pos:end="17:40"><expr pos:start="17:38" pos:end="17:40"><name pos:start="17:38" pos:end="17:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="21:9" pos:end="21:33"><expr pos:start="21:9" pos:end="21:32"><call pos:start="21:9" pos:end="21:32"><name pos:start="21:9" pos:end="21:21">h264_idct8_1d</name><argument_list pos:start="21:22" pos:end="21:32">(<argument pos:start="21:23" pos:end="21:31"><expr pos:start="21:23" pos:end="21:31"><name pos:start="21:23" pos:end="21:27">block</name><operator pos:start="21:28" pos:end="21:28">+</operator><literal type="number" pos:start="21:29" pos:end="21:29">4</literal><operator pos:start="21:30" pos:end="21:30">*</operator><name pos:start="21:31" pos:end="21:31">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <asm pos:start="25:9" pos:end="57:10">__asm__ <specifier pos:start="25:17" pos:end="25:24">volatile</specifier>(

            "movq   %%mm7,    %0   \n\t"

            TRANSPOSE4( %%mm0, %%mm2, %%mm4, %%mm6, %%mm7 )

            "movq   %%mm0,  8(%1)  \n\t"

            "movq   %%mm6, 24(%1)  \n\t"

            "movq   %%mm7, 40(%1)  \n\t"

            "movq   %%mm4, 56(%1)  \n\t"

            "movq    %0,    %%mm7  \n\t"

            TRANSPOSE4( %%mm7, %%mm5, %%mm3, %%mm1, %%mm0 )

            "movq   %%mm7,   (%1)  \n\t"

            "movq   %%mm1, 16(%1)  \n\t"

            "movq   %%mm0, 32(%1)  \n\t"

            "movq   %%mm3, 48(%1)  \n\t"

            : "=m"(tmp)

            : "r"(b2+32*i)

            : "memory"

        );</asm>

    </block_content>}</block></for>



    <for pos:start="63:5" pos:end="111:5">for<control pos:start="63:8" pos:end="63:22">(<init pos:start="63:9" pos:end="63:12"><expr pos:start="63:9" pos:end="63:11"><name pos:start="63:9" pos:end="63:9">i</name><operator pos:start="63:10" pos:end="63:10">=</operator><literal type="number" pos:start="63:11" pos:end="63:11">0</literal></expr>;</init> <condition pos:start="63:14" pos:end="63:17"><expr pos:start="63:14" pos:end="63:16"><name pos:start="63:14" pos:end="63:14">i</name><operator pos:start="63:15" pos:end="63:15">&lt;</operator><literal type="number" pos:start="63:16" pos:end="63:16">2</literal></expr>;</condition> <incr pos:start="63:19" pos:end="63:21"><expr pos:start="63:19" pos:end="63:21"><name pos:start="63:19" pos:end="63:19">i</name><operator pos:start="63:20" pos:end="63:21">++</operator></expr></incr>)</control><block pos:start="63:23" pos:end="111:5">{<block_content pos:start="65:9" pos:end="109:10">

        <expr_stmt pos:start="65:9" pos:end="65:30"><expr pos:start="65:9" pos:end="65:29"><call pos:start="65:9" pos:end="65:29"><name pos:start="65:9" pos:end="65:21">h264_idct8_1d</name><argument_list pos:start="65:22" pos:end="65:29">(<argument pos:start="65:23" pos:end="65:28"><expr pos:start="65:23" pos:end="65:28"><name pos:start="65:23" pos:end="65:24">b2</name><operator pos:start="65:25" pos:end="65:25">+</operator><literal type="number" pos:start="65:26" pos:end="65:26">4</literal><operator pos:start="65:27" pos:end="65:27">*</operator><name pos:start="65:28" pos:end="65:28">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <asm pos:start="69:9" pos:end="109:10">__asm__ <specifier pos:start="69:17" pos:end="69:24">volatile</specifier>(

            "psraw     $6, %%mm7  \n\t"

            "psraw     $6, %%mm6  \n\t"

            "psraw     $6, %%mm5  \n\t"

            "psraw     $6, %%mm4  \n\t"

            "psraw     $6, %%mm3  \n\t"

            "psraw     $6, %%mm2  \n\t"

            "psraw     $6, %%mm1  \n\t"

            "psraw     $6, %%mm0  \n\t"



            "movq   %%mm7,    (%0)  \n\t"

            "movq   %%mm5,  16(%0)  \n\t"

            "movq   %%mm3,  32(%0)  \n\t"

            "movq   %%mm1,  48(%0)  \n\t"

            "movq   %%mm0,  64(%0)  \n\t"

            "movq   %%mm2,  80(%0)  \n\t"

            "movq   %%mm4,  96(%0)  \n\t"

            "movq   %%mm6, 112(%0)  \n\t"

            :: "r"(b2+4*i)

            : "memory"

        );</asm>

    </block_content>}</block></for>



    <expr_stmt pos:start="115:5" pos:end="115:47"><expr pos:start="115:5" pos:end="115:46"><call pos:start="115:5" pos:end="115:46"><name pos:start="115:5" pos:end="115:29">ff_add_pixels_clamped_mmx</name><argument_list pos:start="115:30" pos:end="115:46">(<argument pos:start="115:31" pos:end="115:32"><expr pos:start="115:31" pos:end="115:32"><name pos:start="115:31" pos:end="115:32">b2</name></expr></argument>, <argument pos:start="115:35" pos:end="115:37"><expr pos:start="115:35" pos:end="115:37"><name pos:start="115:35" pos:end="115:37">dst</name></expr></argument>, <argument pos:start="115:40" pos:end="115:45"><expr pos:start="115:40" pos:end="115:45"><name pos:start="115:40" pos:end="115:45">stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
