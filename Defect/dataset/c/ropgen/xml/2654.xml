<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2654.c" pos:tabs="8"><function pos:start="1:1" pos:end="243:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">compute_bit_allocation</name><parameter_list pos:start="1:34" pos:end="9:49">(<parameter pos:start="1:35" pos:end="1:53"><decl pos:start="1:35" pos:end="1:53"><type pos:start="1:35" pos:end="1:53"><name pos:start="1:35" pos:end="1:50">AC3EncodeContext</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:53">s</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:79"><decl pos:start="3:35" pos:end="3:79"><type pos:start="3:35" pos:end="3:45"><name pos:start="3:35" pos:end="3:41">uint8_t</name></type> <name pos:start="3:43" pos:end="3:79"><name pos:start="3:43" pos:end="3:45">bap</name><index pos:start="3:46" pos:end="3:56">[<expr pos:start="3:47" pos:end="3:55"><name pos:start="3:47" pos:end="3:55">NB_BLOCKS</name></expr>]</index><index pos:start="3:57" pos:end="3:74">[<expr pos:start="3:58" pos:end="3:73"><name pos:start="3:58" pos:end="3:73">AC3_MAX_CHANNELS</name></expr>]</index><index pos:start="3:75" pos:end="3:79">[<expr pos:start="3:76" pos:end="3:78"><name pos:start="3:76" pos:end="3:76">N</name><operator pos:start="3:77" pos:end="3:77">/</operator><literal type="number" pos:start="3:78" pos:end="3:78">2</literal></expr>]</index></name></decl></parameter>,

                                  <parameter pos:start="5:35" pos:end="5:87"><decl pos:start="5:35" pos:end="5:87"><type pos:start="5:35" pos:end="5:53"><name pos:start="5:35" pos:end="5:41">uint8_t</name></type> <name pos:start="5:43" pos:end="5:87"><name pos:start="5:43" pos:end="5:53">encoded_exp</name><index pos:start="5:54" pos:end="5:64">[<expr pos:start="5:55" pos:end="5:63"><name pos:start="5:55" pos:end="5:63">NB_BLOCKS</name></expr>]</index><index pos:start="5:65" pos:end="5:82">[<expr pos:start="5:66" pos:end="5:81"><name pos:start="5:66" pos:end="5:81">AC3_MAX_CHANNELS</name></expr>]</index><index pos:start="5:83" pos:end="5:87">[<expr pos:start="5:84" pos:end="5:86"><name pos:start="5:84" pos:end="5:84">N</name><operator pos:start="5:85" pos:end="5:85">/</operator><literal type="number" pos:start="5:86" pos:end="5:86">2</literal></expr>]</index></name></decl></parameter>,

                                  <parameter pos:start="7:35" pos:end="7:83"><decl pos:start="7:35" pos:end="7:83"><type pos:start="7:35" pos:end="7:54"><name pos:start="7:35" pos:end="7:41">uint8_t</name></type> <name pos:start="7:43" pos:end="7:83"><name pos:start="7:43" pos:end="7:54">exp_strategy</name><index pos:start="7:55" pos:end="7:65">[<expr pos:start="7:56" pos:end="7:64"><name pos:start="7:56" pos:end="7:64">NB_BLOCKS</name></expr>]</index><index pos:start="7:66" pos:end="7:83">[<expr pos:start="7:67" pos:end="7:82"><name pos:start="7:67" pos:end="7:82">AC3_MAX_CHANNELS</name></expr>]</index></name></decl></parameter>,

                                  <parameter pos:start="9:35" pos:end="9:48"><decl pos:start="9:35" pos:end="9:48"><type pos:start="9:35" pos:end="9:48"><name pos:start="9:35" pos:end="9:37">int</name></type> <name pos:start="9:39" pos:end="9:48">frame_bits</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="243:1">{<block_content pos:start="13:5" pos:end="241:13">

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>, <decl pos:start="13:12" pos:end="13:13"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:13">ch</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:29"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:17">csnroffst</name></decl>, <decl pos:start="15:20" pos:end="15:28"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:20" pos:end="15:28">fsnroffst</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:51"><decl pos:start="17:5" pos:end="17:50"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">uint8_t</name></type> <name pos:start="17:13" pos:end="17:50"><name pos:start="17:13" pos:end="17:16">bap1</name><index pos:start="17:17" pos:end="17:27">[<expr pos:start="17:18" pos:end="17:26"><name pos:start="17:18" pos:end="17:26">NB_BLOCKS</name></expr>]</index><index pos:start="17:28" pos:end="17:45">[<expr pos:start="17:29" pos:end="17:44"><name pos:start="17:29" pos:end="17:44">AC3_MAX_CHANNELS</name></expr>]</index><index pos:start="17:46" pos:end="17:50">[<expr pos:start="17:47" pos:end="17:49"><name pos:start="17:47" pos:end="17:47">N</name><operator pos:start="17:48" pos:end="17:48">/</operator><literal type="number" pos:start="17:49" pos:end="17:49">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:62"><decl pos:start="19:5" pos:end="19:61"><type pos:start="19:5" pos:end="19:14"><specifier pos:start="19:5" pos:end="19:10">static</specifier> <name pos:start="19:12" pos:end="19:14">int</name></type> <name pos:start="19:16" pos:end="19:32"><name pos:start="19:16" pos:end="19:29">frame_bits_inc</name><index pos:start="19:30" pos:end="19:32">[<expr pos:start="19:31" pos:end="19:31"><literal type="number" pos:start="19:31" pos:end="19:31">8</literal></expr>]</index></name> <init pos:start="19:34" pos:end="19:61">= <expr pos:start="19:36" pos:end="19:61"><block pos:start="19:36" pos:end="19:61">{ <expr pos:start="19:38" pos:end="19:38"><literal type="number" pos:start="19:38" pos:end="19:38">0</literal></expr>, <expr pos:start="19:41" pos:end="19:41"><literal type="number" pos:start="19:41" pos:end="19:41">0</literal></expr>, <expr pos:start="19:44" pos:end="19:44"><literal type="number" pos:start="19:44" pos:end="19:44">2</literal></expr>, <expr pos:start="19:47" pos:end="19:47"><literal type="number" pos:start="19:47" pos:end="19:47">2</literal></expr>, <expr pos:start="19:50" pos:end="19:50"><literal type="number" pos:start="19:50" pos:end="19:50">2</literal></expr>, <expr pos:start="19:53" pos:end="19:53"><literal type="number" pos:start="19:53" pos:end="19:53">4</literal></expr>, <expr pos:start="19:56" pos:end="19:56"><literal type="number" pos:start="19:56" pos:end="19:56">2</literal></expr>, <expr pos:start="19:59" pos:end="19:59"><literal type="number" pos:start="19:59" pos:end="19:59">4</literal></expr> }</block></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:33">/* init default parameters */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:21"><expr pos:start="25:5" pos:end="25:20"><name pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:5">s</name><operator pos:start="25:6" pos:end="25:7">-&gt;</operator><name pos:start="25:8" pos:end="25:16">sdecaycod</name></name> <operator pos:start="25:18" pos:end="25:18">=</operator> <literal type="number" pos:start="25:20" pos:end="25:20">2</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:21"><expr pos:start="27:5" pos:end="27:20"><name pos:start="27:5" pos:end="27:16"><name pos:start="27:5" pos:end="27:5">s</name><operator pos:start="27:6" pos:end="27:7">-&gt;</operator><name pos:start="27:8" pos:end="27:16">fdecaycod</name></name> <operator pos:start="27:18" pos:end="27:18">=</operator> <literal type="number" pos:start="27:20" pos:end="27:20">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:20"><expr pos:start="29:5" pos:end="29:19"><name pos:start="29:5" pos:end="29:15"><name pos:start="29:5" pos:end="29:5">s</name><operator pos:start="29:6" pos:end="29:7">-&gt;</operator><name pos:start="29:8" pos:end="29:15">sgaincod</name></name> <operator pos:start="29:17" pos:end="29:17">=</operator> <literal type="number" pos:start="29:19" pos:end="29:19">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:21"><expr pos:start="31:5" pos:end="31:20"><name pos:start="31:5" pos:end="31:16"><name pos:start="31:5" pos:end="31:5">s</name><operator pos:start="31:6" pos:end="31:7">-&gt;</operator><name pos:start="31:8" pos:end="31:16">dbkneecod</name></name> <operator pos:start="31:18" pos:end="31:18">=</operator> <literal type="number" pos:start="31:20" pos:end="31:20">2</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:20"><expr pos:start="33:5" pos:end="33:19"><name pos:start="33:5" pos:end="33:15"><name pos:start="33:5" pos:end="33:5">s</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:15">floorcod</name></name> <operator pos:start="33:17" pos:end="33:17">=</operator> <literal type="number" pos:start="33:19" pos:end="33:19">4</literal></expr>;</expr_stmt>

    <for pos:start="35:5" pos:end="37:28">for<control pos:start="35:8" pos:end="35:40">(<init pos:start="35:9" pos:end="35:13"><expr pos:start="35:9" pos:end="35:12"><name pos:start="35:9" pos:end="35:10">ch</name><operator pos:start="35:11" pos:end="35:11">=</operator><literal type="number" pos:start="35:12" pos:end="35:12">0</literal></expr>;</init><condition pos:start="35:14" pos:end="35:35"><expr pos:start="35:14" pos:end="35:34"><name pos:start="35:14" pos:end="35:15">ch</name><operator pos:start="35:16" pos:end="35:16">&lt;</operator><name pos:start="35:17" pos:end="35:34"><name pos:start="35:17" pos:end="35:17">s</name><operator pos:start="35:18" pos:end="35:19">-&gt;</operator><name pos:start="35:20" pos:end="35:34">nb_all_channels</name></name></expr>;</condition><incr pos:start="35:36" pos:end="35:39"><expr pos:start="35:36" pos:end="35:39"><name pos:start="35:36" pos:end="35:37">ch</name><operator pos:start="35:38" pos:end="35:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="37:9" pos:end="37:28"><block_content pos:start="37:9" pos:end="37:28"> 

        <expr_stmt pos:start="37:9" pos:end="37:28"><expr pos:start="37:9" pos:end="37:27"><name pos:start="37:9" pos:end="37:23"><name pos:start="37:9" pos:end="37:9">s</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:19">fgaincod</name><index pos:start="37:20" pos:end="37:23">[<expr pos:start="37:21" pos:end="37:22"><name pos:start="37:21" pos:end="37:22">ch</name></expr>]</index></name> <operator pos:start="37:25" pos:end="37:25">=</operator> <literal type="number" pos:start="37:27" pos:end="37:27">4</literal></expr>;</expr_stmt></block_content></block></for>

    

    <comment type="block" pos:start="41:5" pos:end="41:29">/* compute real values */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:34"><expr pos:start="43:5" pos:end="43:33"><name pos:start="43:5" pos:end="43:22"><name pos:start="43:5" pos:end="43:5">s</name><operator pos:start="43:6" pos:end="43:7">-&gt;</operator><name pos:start="43:8" pos:end="43:16">bit_alloc</name><operator pos:start="43:17" pos:end="43:17">.</operator><name pos:start="43:18" pos:end="43:22">fscod</name></name> <operator pos:start="43:24" pos:end="43:24">=</operator> <name pos:start="43:26" pos:end="43:33"><name pos:start="43:26" pos:end="43:26">s</name><operator pos:start="43:27" pos:end="43:28">-&gt;</operator><name pos:start="43:29" pos:end="43:33">fscod</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:46"><expr pos:start="45:5" pos:end="45:45"><name pos:start="45:5" pos:end="45:28"><name pos:start="45:5" pos:end="45:5">s</name><operator pos:start="45:6" pos:end="45:7">-&gt;</operator><name pos:start="45:8" pos:end="45:16">bit_alloc</name><operator pos:start="45:17" pos:end="45:17">.</operator><name pos:start="45:18" pos:end="45:28">halfratecod</name></name> <operator pos:start="45:30" pos:end="45:30">=</operator> <name pos:start="45:32" pos:end="45:45"><name pos:start="45:32" pos:end="45:32">s</name><operator pos:start="45:33" pos:end="45:34">-&gt;</operator><name pos:start="45:35" pos:end="45:45">halfratecod</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:68"><expr pos:start="47:5" pos:end="47:67"><name pos:start="47:5" pos:end="47:23"><name pos:start="47:5" pos:end="47:5">s</name><operator pos:start="47:6" pos:end="47:7">-&gt;</operator><name pos:start="47:8" pos:end="47:16">bit_alloc</name><operator pos:start="47:17" pos:end="47:17">.</operator><name pos:start="47:18" pos:end="47:23">sdecay</name></name> <operator pos:start="47:25" pos:end="47:25">=</operator> <name pos:start="47:27" pos:end="47:49"><name pos:start="47:27" pos:end="47:35">sdecaytab</name><index pos:start="47:36" pos:end="47:49">[<expr pos:start="47:37" pos:end="47:48"><name pos:start="47:37" pos:end="47:48"><name pos:start="47:37" pos:end="47:37">s</name><operator pos:start="47:38" pos:end="47:39">-&gt;</operator><name pos:start="47:40" pos:end="47:48">sdecaycod</name></name></expr>]</index></name> <operator pos:start="47:51" pos:end="47:52">&gt;&gt;</operator> <name pos:start="47:54" pos:end="47:67"><name pos:start="47:54" pos:end="47:54">s</name><operator pos:start="47:55" pos:end="47:56">-&gt;</operator><name pos:start="47:57" pos:end="47:67">halfratecod</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:68"><expr pos:start="49:5" pos:end="49:67"><name pos:start="49:5" pos:end="49:23"><name pos:start="49:5" pos:end="49:5">s</name><operator pos:start="49:6" pos:end="49:7">-&gt;</operator><name pos:start="49:8" pos:end="49:16">bit_alloc</name><operator pos:start="49:17" pos:end="49:17">.</operator><name pos:start="49:18" pos:end="49:23">fdecay</name></name> <operator pos:start="49:25" pos:end="49:25">=</operator> <name pos:start="49:27" pos:end="49:49"><name pos:start="49:27" pos:end="49:35">fdecaytab</name><index pos:start="49:36" pos:end="49:49">[<expr pos:start="49:37" pos:end="49:48"><name pos:start="49:37" pos:end="49:48"><name pos:start="49:37" pos:end="49:37">s</name><operator pos:start="49:38" pos:end="49:39">-&gt;</operator><name pos:start="49:40" pos:end="49:48">fdecaycod</name></name></expr>]</index></name> <operator pos:start="49:51" pos:end="49:52">&gt;&gt;</operator> <name pos:start="49:54" pos:end="49:67"><name pos:start="49:54" pos:end="49:54">s</name><operator pos:start="49:55" pos:end="49:56">-&gt;</operator><name pos:start="49:57" pos:end="49:67">halfratecod</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:47"><expr pos:start="51:5" pos:end="51:46"><name pos:start="51:5" pos:end="51:22"><name pos:start="51:5" pos:end="51:5">s</name><operator pos:start="51:6" pos:end="51:7">-&gt;</operator><name pos:start="51:8" pos:end="51:16">bit_alloc</name><operator pos:start="51:17" pos:end="51:17">.</operator><name pos:start="51:18" pos:end="51:22">sgain</name></name> <operator pos:start="51:24" pos:end="51:24">=</operator> <name pos:start="51:26" pos:end="51:46"><name pos:start="51:26" pos:end="51:33">sgaintab</name><index pos:start="51:34" pos:end="51:46">[<expr pos:start="51:35" pos:end="51:45"><name pos:start="51:35" pos:end="51:45"><name pos:start="51:35" pos:end="51:35">s</name><operator pos:start="51:36" pos:end="51:37">-&gt;</operator><name pos:start="51:38" pos:end="51:45">sgaincod</name></name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:50"><expr pos:start="53:5" pos:end="53:49"><name pos:start="53:5" pos:end="53:23"><name pos:start="53:5" pos:end="53:5">s</name><operator pos:start="53:6" pos:end="53:7">-&gt;</operator><name pos:start="53:8" pos:end="53:16">bit_alloc</name><operator pos:start="53:17" pos:end="53:17">.</operator><name pos:start="53:18" pos:end="53:23">dbknee</name></name> <operator pos:start="53:25" pos:end="53:25">=</operator> <name pos:start="53:27" pos:end="53:49"><name pos:start="53:27" pos:end="53:35">dbkneetab</name><index pos:start="53:36" pos:end="53:49">[<expr pos:start="53:37" pos:end="53:48"><name pos:start="53:37" pos:end="53:48"><name pos:start="53:37" pos:end="53:37">s</name><operator pos:start="53:38" pos:end="53:39">-&gt;</operator><name pos:start="53:40" pos:end="53:48">dbkneecod</name></name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:47"><expr pos:start="55:5" pos:end="55:46"><name pos:start="55:5" pos:end="55:22"><name pos:start="55:5" pos:end="55:5">s</name><operator pos:start="55:6" pos:end="55:7">-&gt;</operator><name pos:start="55:8" pos:end="55:16">bit_alloc</name><operator pos:start="55:17" pos:end="55:17">.</operator><name pos:start="55:18" pos:end="55:22">floor</name></name> <operator pos:start="55:24" pos:end="55:24">=</operator> <name pos:start="55:26" pos:end="55:46"><name pos:start="55:26" pos:end="55:33">floortab</name><index pos:start="55:34" pos:end="55:46">[<expr pos:start="55:35" pos:end="55:45"><name pos:start="55:35" pos:end="55:45"><name pos:start="55:35" pos:end="55:35">s</name><operator pos:start="55:36" pos:end="55:37">-&gt;</operator><name pos:start="55:38" pos:end="55:45">floorcod</name></name></expr>]</index></name></expr>;</expr_stmt>

    

    <comment type="block" pos:start="59:5" pos:end="59:21">/* header size */</comment>

    <expr_stmt pos:start="61:5" pos:end="61:21"><expr pos:start="61:5" pos:end="61:20"><name pos:start="61:5" pos:end="61:14">frame_bits</name> <operator pos:start="61:16" pos:end="61:17">+=</operator> <literal type="number" pos:start="61:19" pos:end="61:20">65</literal></expr>;</expr_stmt>

    <comment type="line" pos:start="63:5" pos:end="63:25">// if (s-&gt;acmod == 2)</comment>

    <comment type="line" pos:start="65:5" pos:end="65:26">//    frame_bits += 2;</comment>

    <expr_stmt pos:start="67:5" pos:end="67:43"><expr pos:start="67:5" pos:end="67:42"><name pos:start="67:5" pos:end="67:14">frame_bits</name> <operator pos:start="67:16" pos:end="67:17">+=</operator> <name pos:start="67:19" pos:end="67:42"><name pos:start="67:19" pos:end="67:32">frame_bits_inc</name><index pos:start="67:33" pos:end="67:42">[<expr pos:start="67:34" pos:end="67:41"><name pos:start="67:34" pos:end="67:41"><name pos:start="67:34" pos:end="67:34">s</name><operator pos:start="67:35" pos:end="67:36">-&gt;</operator><name pos:start="67:37" pos:end="67:41">acmod</name></name></expr>]</index></name></expr>;</expr_stmt>



    <comment type="block" pos:start="71:5" pos:end="71:22">/* audio blocks */</comment>

    <for pos:start="73:5" pos:end="101:5">for<control pos:start="73:8" pos:end="73:28">(<init pos:start="73:9" pos:end="73:12"><expr pos:start="73:9" pos:end="73:11"><name pos:start="73:9" pos:end="73:9">i</name><operator pos:start="73:10" pos:end="73:10">=</operator><literal type="number" pos:start="73:11" pos:end="73:11">0</literal></expr>;</init><condition pos:start="73:13" pos:end="73:24"><expr pos:start="73:13" pos:end="73:23"><name pos:start="73:13" pos:end="73:13">i</name><operator pos:start="73:14" pos:end="73:14">&lt;</operator><name pos:start="73:15" pos:end="73:23">NB_BLOCKS</name></expr>;</condition><incr pos:start="73:25" pos:end="73:27"><expr pos:start="73:25" pos:end="73:27"><name pos:start="73:25" pos:end="73:25">i</name><operator pos:start="73:26" pos:end="73:27">++</operator></expr></incr>)</control> <block pos:start="73:30" pos:end="101:5">{<block_content pos:start="75:9" pos:end="99:24">

        <expr_stmt pos:start="75:9" pos:end="75:45"><expr pos:start="75:9" pos:end="75:44"><name pos:start="75:9" pos:end="75:18">frame_bits</name> <operator pos:start="75:20" pos:end="75:21">+=</operator> <name pos:start="75:23" pos:end="75:36"><name pos:start="75:23" pos:end="75:23">s</name><operator pos:start="75:24" pos:end="75:25">-&gt;</operator><name pos:start="75:26" pos:end="75:36">nb_channels</name></name> <operator pos:start="75:38" pos:end="75:38">*</operator> <literal type="number" pos:start="75:40" pos:end="75:42">2</literal> <operator pos:start="75:42" pos:end="75:42">+</operator> <literal type="number" pos:start="75:44" pos:end="75:44">2</literal></expr>;</expr_stmt> <comment type="block" pos:start="75:47" pos:end="75:93">/* blksw * c, dithflag * c, dynrnge, cplstre */</comment>

        <if_stmt pos:start="77:9" pos:end="79:25"><if pos:start="77:9" pos:end="79:25">if <condition pos:start="77:12" pos:end="77:26">(<expr pos:start="77:13" pos:end="77:25"><name pos:start="77:13" pos:end="77:20"><name pos:start="77:13" pos:end="77:13">s</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:20">acmod</name></name> <operator pos:start="77:22" pos:end="77:23">==</operator> <literal type="number" pos:start="77:25" pos:end="77:25">2</literal></expr>)</condition><block type="pseudo" pos:start="79:13" pos:end="79:25"><block_content pos:start="79:13" pos:end="79:25">

            <expr_stmt pos:start="79:13" pos:end="79:25"><expr pos:start="79:13" pos:end="79:24"><name pos:start="79:13" pos:end="79:22">frame_bits</name><operator pos:start="79:23" pos:end="79:24">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block" pos:start="79:27" pos:end="79:40">/* rematstr */</comment>

        <expr_stmt pos:start="81:9" pos:end="81:41"><expr pos:start="81:9" pos:end="81:40"><name pos:start="81:9" pos:end="81:18">frame_bits</name> <operator pos:start="81:20" pos:end="81:21">+=</operator> <literal type="number" pos:start="81:23" pos:end="81:23">2</literal> <operator pos:start="81:25" pos:end="81:25">*</operator> <name pos:start="81:27" pos:end="81:40"><name pos:start="81:27" pos:end="81:27">s</name><operator pos:start="81:28" pos:end="81:29">-&gt;</operator><name pos:start="81:30" pos:end="81:40">nb_channels</name></name></expr>;</expr_stmt> <comment type="block" pos:start="81:43" pos:end="81:63">/* chexpstr[2] * c */</comment>

	<if_stmt pos:start="83:9" pos:end="85:25"><if pos:start="83:9" pos:end="85:25">if <condition pos:start="83:12" pos:end="83:19">(<expr pos:start="83:13" pos:end="83:18"><name pos:start="83:13" pos:end="83:18"><name pos:start="83:13" pos:end="83:13">s</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:18">lfe</name></name></expr>)</condition><block type="pseudo" pos:start="85:13" pos:end="85:25"><block_content pos:start="85:13" pos:end="85:25">

	    <expr_stmt pos:start="85:13" pos:end="85:25"><expr pos:start="85:13" pos:end="85:24"><name pos:start="85:13" pos:end="85:22">frame_bits</name><operator pos:start="85:23" pos:end="85:24">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block" pos:start="85:27" pos:end="85:41">/* lfeexpstr */</comment>

        <for pos:start="87:9" pos:end="93:9">for<control pos:start="87:12" pos:end="87:40">(<init pos:start="87:13" pos:end="87:17"><expr pos:start="87:13" pos:end="87:16"><name pos:start="87:13" pos:end="87:14">ch</name><operator pos:start="87:15" pos:end="87:15">=</operator><literal type="number" pos:start="87:16" pos:end="87:16">0</literal></expr>;</init><condition pos:start="87:18" pos:end="87:35"><expr pos:start="87:18" pos:end="87:34"><name pos:start="87:18" pos:end="87:19">ch</name><operator pos:start="87:20" pos:end="87:20">&lt;</operator><name pos:start="87:21" pos:end="87:34"><name pos:start="87:21" pos:end="87:21">s</name><operator pos:start="87:22" pos:end="87:23">-&gt;</operator><name pos:start="87:24" pos:end="87:34">nb_channels</name></name></expr>;</condition><incr pos:start="87:36" pos:end="87:39"><expr pos:start="87:36" pos:end="87:39"><name pos:start="87:36" pos:end="87:37">ch</name><operator pos:start="87:38" pos:end="87:39">++</operator></expr></incr>)</control> <block pos:start="87:42" pos:end="93:9">{<block_content pos:start="89:13" pos:end="91:36">

            <if_stmt pos:start="89:13" pos:end="91:36"><if pos:start="89:13" pos:end="91:36">if <condition pos:start="89:16" pos:end="89:49">(<expr pos:start="89:17" pos:end="89:48"><name pos:start="89:17" pos:end="89:35"><name pos:start="89:17" pos:end="89:28">exp_strategy</name><index pos:start="89:29" pos:end="89:31">[<expr pos:start="89:30" pos:end="89:30"><name pos:start="89:30" pos:end="89:30">i</name></expr>]</index><index pos:start="89:32" pos:end="89:35">[<expr pos:start="89:33" pos:end="89:34"><name pos:start="89:33" pos:end="89:34">ch</name></expr>]</index></name> <operator pos:start="89:37" pos:end="89:38">!=</operator> <name pos:start="89:40" pos:end="89:48">EXP_REUSE</name></expr>)</condition><block type="pseudo" pos:start="91:17" pos:end="91:36"><block_content pos:start="91:17" pos:end="91:36">

                <expr_stmt pos:start="91:17" pos:end="91:36"><expr pos:start="91:17" pos:end="91:35"><name pos:start="91:17" pos:end="91:26">frame_bits</name> <operator pos:start="91:28" pos:end="91:29">+=</operator> <literal type="number" pos:start="91:31" pos:end="91:33">6</literal> <operator pos:start="91:33" pos:end="91:33">+</operator> <literal type="number" pos:start="91:35" pos:end="91:35">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block" pos:start="91:38" pos:end="91:65">/* chbwcod[6], gainrng[2] */</comment>

        </block_content>}</block></for>

        <expr_stmt pos:start="95:9" pos:end="95:21"><expr pos:start="95:9" pos:end="95:20"><name pos:start="95:9" pos:end="95:18">frame_bits</name><operator pos:start="95:19" pos:end="95:20">++</operator></expr>;</expr_stmt> <comment type="block" pos:start="95:23" pos:end="95:32">/* baie */</comment>

        <expr_stmt pos:start="97:9" pos:end="97:21"><expr pos:start="97:9" pos:end="97:20"><name pos:start="97:9" pos:end="97:18">frame_bits</name><operator pos:start="97:19" pos:end="97:20">++</operator></expr>;</expr_stmt> <comment type="block" pos:start="97:23" pos:end="97:31">/* snr */</comment>

        <expr_stmt pos:start="99:9" pos:end="99:24"><expr pos:start="99:9" pos:end="99:23"><name pos:start="99:9" pos:end="99:18">frame_bits</name> <operator pos:start="99:20" pos:end="99:21">+=</operator> <literal type="number" pos:start="99:23" pos:end="99:23">2</literal></expr>;</expr_stmt> <comment type="block" pos:start="99:26" pos:end="99:43">/* delta / skip */</comment>

    </block_content>}</block></for>

    <expr_stmt pos:start="103:5" pos:end="103:17"><expr pos:start="103:5" pos:end="103:16"><name pos:start="103:5" pos:end="103:14">frame_bits</name><operator pos:start="103:15" pos:end="103:16">++</operator></expr>;</expr_stmt> <comment type="block" pos:start="103:19" pos:end="103:42">/* cplinu for block 0 */</comment>

    <comment type="block" pos:start="105:5" pos:end="105:24">/* bit alloc info */</comment>

    <comment type="block" pos:start="107:5" pos:end="107:70">/* sdcycod[2], fdcycod[2], sgaincod[2], dbpbcod[2], floorcod[3] */</comment>

    <comment type="block" pos:start="109:5" pos:end="109:23">/* csnroffset[6] */</comment>

    <comment type="block" pos:start="111:5" pos:end="111:42">/* (fsnoffset[4] + fgaincod[4]) * c */</comment>

    <expr_stmt pos:start="113:5" pos:end="113:61"><expr pos:start="113:5" pos:end="113:60"><name pos:start="113:5" pos:end="113:14">frame_bits</name> <operator pos:start="113:16" pos:end="113:17">+=</operator> <literal type="number" pos:start="113:19" pos:end="113:19">2</literal><operator pos:start="113:20" pos:end="113:20">*</operator><literal type="number" pos:start="113:21" pos:end="113:23">4</literal> <operator pos:start="113:23" pos:end="113:23">+</operator> <literal type="number" pos:start="113:25" pos:end="113:27">3</literal> <operator pos:start="113:27" pos:end="113:27">+</operator> <literal type="number" pos:start="113:29" pos:end="113:31">6</literal> <operator pos:start="113:31" pos:end="113:31">+</operator> <name pos:start="113:33" pos:end="113:50"><name pos:start="113:33" pos:end="113:33">s</name><operator pos:start="113:34" pos:end="113:35">-&gt;</operator><name pos:start="113:36" pos:end="113:50">nb_all_channels</name></name> <operator pos:start="113:52" pos:end="113:52">*</operator> <operator pos:start="113:54" pos:end="113:54">(</operator><literal type="number" pos:start="113:55" pos:end="113:57">4</literal> <operator pos:start="113:57" pos:end="113:57">+</operator> <literal type="number" pos:start="113:59" pos:end="113:59">3</literal><operator pos:start="113:60" pos:end="113:60">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="117:5" pos:end="117:26">/* auxdatae, crcrsv */</comment>

    <expr_stmt pos:start="119:5" pos:end="119:20"><expr pos:start="119:5" pos:end="119:19"><name pos:start="119:5" pos:end="119:14">frame_bits</name> <operator pos:start="119:16" pos:end="119:17">+=</operator> <literal type="number" pos:start="119:19" pos:end="119:19">2</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="123:5" pos:end="123:13">/* CRC */</comment>

    <expr_stmt pos:start="125:5" pos:end="125:21"><expr pos:start="125:5" pos:end="125:20"><name pos:start="125:5" pos:end="125:14">frame_bits</name> <operator pos:start="125:16" pos:end="125:17">+=</operator> <literal type="number" pos:start="125:19" pos:end="125:20">16</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="129:5" pos:end="131:73">/* now the big work begins : do the bit allocation. Modify the snr

       offset until we can pack everything in the requested frame size */</comment>



    <expr_stmt pos:start="135:5" pos:end="135:29"><expr pos:start="135:5" pos:end="135:28"><name pos:start="135:5" pos:end="135:13">csnroffst</name> <operator pos:start="135:15" pos:end="135:15">=</operator> <name pos:start="135:17" pos:end="135:28"><name pos:start="135:17" pos:end="135:17">s</name><operator pos:start="135:18" pos:end="135:19">-&gt;</operator><name pos:start="135:20" pos:end="135:28">csnroffst</name></name></expr>;</expr_stmt>

    <while pos:start="137:5" pos:end="141:30">while <condition pos:start="137:11" pos:end="139:86">(<expr pos:start="137:12" pos:end="139:85"><name pos:start="137:12" pos:end="137:20">csnroffst</name> <operator pos:start="137:22" pos:end="137:23">&gt;=</operator> <literal type="number" pos:start="137:25" pos:end="137:25">0</literal> <operator pos:start="137:27" pos:end="137:28">&amp;&amp;</operator> 

	   <call pos:start="139:12" pos:end="139:81"><name pos:start="139:12" pos:end="139:20">bit_alloc</name><argument_list pos:start="139:21" pos:end="139:81">(<argument pos:start="139:22" pos:end="139:22"><expr pos:start="139:22" pos:end="139:22"><name pos:start="139:22" pos:end="139:22">s</name></expr></argument>, <argument pos:start="139:25" pos:end="139:27"><expr pos:start="139:25" pos:end="139:27"><name pos:start="139:25" pos:end="139:27">bap</name></expr></argument>, <argument pos:start="139:30" pos:end="139:40"><expr pos:start="139:30" pos:end="139:40"><name pos:start="139:30" pos:end="139:40">encoded_exp</name></expr></argument>, <argument pos:start="139:43" pos:end="139:54"><expr pos:start="139:43" pos:end="139:54"><name pos:start="139:43" pos:end="139:54">exp_strategy</name></expr></argument>, <argument pos:start="139:57" pos:end="139:66"><expr pos:start="139:57" pos:end="139:66"><name pos:start="139:57" pos:end="139:66">frame_bits</name></expr></argument>, <argument pos:start="139:69" pos:end="139:77"><expr pos:start="139:69" pos:end="139:77"><name pos:start="139:69" pos:end="139:77">csnroffst</name></expr></argument>, <argument pos:start="139:80" pos:end="139:80"><expr pos:start="139:80" pos:end="139:80"><literal type="number" pos:start="139:80" pos:end="139:80">0</literal></expr></argument>)</argument_list></call> <operator pos:start="139:83" pos:end="139:83">&lt;</operator> <literal type="number" pos:start="139:85" pos:end="139:85">0</literal></expr>)</condition><block type="pseudo" pos:start="141:9" pos:end="141:30"><block_content pos:start="141:9" pos:end="141:30">

	<expr_stmt pos:start="141:9" pos:end="141:30"><expr pos:start="141:9" pos:end="141:29"><name pos:start="141:9" pos:end="141:17">csnroffst</name> <operator pos:start="141:19" pos:end="141:20">-=</operator> <name pos:start="141:22" pos:end="141:29">SNR_INC1</name></expr>;</expr_stmt></block_content></block></while>

    <if_stmt pos:start="143:5" pos:end="149:5"><if pos:start="143:5" pos:end="149:5">if <condition pos:start="143:8" pos:end="143:22">(<expr pos:start="143:9" pos:end="143:21"><name pos:start="143:9" pos:end="143:17">csnroffst</name> <operator pos:start="143:19" pos:end="143:19">&lt;</operator> <literal type="number" pos:start="143:21" pos:end="143:21">0</literal></expr>)</condition> <block pos:start="143:24" pos:end="149:5">{<block_content pos:start="145:9" pos:end="147:18">

	<expr_stmt pos:start="145:9" pos:end="145:56"><expr pos:start="145:9" pos:end="145:55"><call pos:start="145:9" pos:end="145:55"><name pos:start="145:9" pos:end="145:14">av_log</name><argument_list pos:start="145:15" pos:end="145:55">(<argument pos:start="145:16" pos:end="145:19"><expr pos:start="145:16" pos:end="145:19"><name pos:start="145:16" pos:end="145:19">NULL</name></expr></argument>, <argument pos:start="145:22" pos:end="145:33"><expr pos:start="145:22" pos:end="145:33"><name pos:start="145:22" pos:end="145:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="145:36" pos:end="145:54"><expr pos:start="145:36" pos:end="145:54"><literal type="string" pos:start="145:36" pos:end="145:54">"Yack, Error !!!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return pos:start="147:9" pos:end="147:18">return <expr pos:start="147:16" pos:end="147:17"><operator pos:start="147:16" pos:end="147:16">-</operator><literal type="number" pos:start="147:17" pos:end="147:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <while pos:start="151:5" pos:end="161:5">while <condition pos:start="151:11" pos:end="155:51">(<expr pos:start="151:12" pos:end="155:50"><operator pos:start="151:12" pos:end="151:12">(</operator><name pos:start="151:13" pos:end="151:21">csnroffst</name> <operator pos:start="151:23" pos:end="151:23">+</operator> <name pos:start="151:25" pos:end="151:32">SNR_INC1</name><operator pos:start="151:33" pos:end="151:33">)</operator> <operator pos:start="151:35" pos:end="151:36">&lt;=</operator> <literal type="number" pos:start="151:38" pos:end="151:39">63</literal> <operator pos:start="151:41" pos:end="151:42">&amp;&amp;</operator> 

           <call pos:start="153:12" pos:end="155:45"><name pos:start="153:12" pos:end="153:20">bit_alloc</name><argument_list pos:start="153:21" pos:end="155:45">(<argument pos:start="153:22" pos:end="153:22"><expr pos:start="153:22" pos:end="153:22"><name pos:start="153:22" pos:end="153:22">s</name></expr></argument>, <argument pos:start="153:25" pos:end="153:28"><expr pos:start="153:25" pos:end="153:28"><name pos:start="153:25" pos:end="153:28">bap1</name></expr></argument>, <argument pos:start="153:31" pos:end="153:41"><expr pos:start="153:31" pos:end="153:41"><name pos:start="153:31" pos:end="153:41">encoded_exp</name></expr></argument>, <argument pos:start="153:44" pos:end="153:55"><expr pos:start="153:44" pos:end="153:55"><name pos:start="153:44" pos:end="153:55">exp_strategy</name></expr></argument>, <argument pos:start="153:58" pos:end="153:67"><expr pos:start="153:58" pos:end="153:67"><name pos:start="153:58" pos:end="153:67">frame_bits</name></expr></argument>, 

                     <argument pos:start="155:22" pos:end="155:41"><expr pos:start="155:22" pos:end="155:41"><name pos:start="155:22" pos:end="155:30">csnroffst</name> <operator pos:start="155:32" pos:end="155:32">+</operator> <name pos:start="155:34" pos:end="155:41">SNR_INC1</name></expr></argument>, <argument pos:start="155:44" pos:end="155:44"><expr pos:start="155:44" pos:end="155:44"><literal type="number" pos:start="155:44" pos:end="155:44">0</literal></expr></argument>)</argument_list></call> <operator pos:start="155:47" pos:end="155:48">&gt;=</operator> <literal type="number" pos:start="155:50" pos:end="155:50">0</literal></expr>)</condition> <block pos:start="155:53" pos:end="161:5">{<block_content pos:start="157:9" pos:end="159:40">

        <expr_stmt pos:start="157:9" pos:end="157:30"><expr pos:start="157:9" pos:end="157:29"><name pos:start="157:9" pos:end="157:17">csnroffst</name> <operator pos:start="157:19" pos:end="157:20">+=</operator> <name pos:start="157:22" pos:end="157:29">SNR_INC1</name></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:40"><expr pos:start="159:9" pos:end="159:39"><call pos:start="159:9" pos:end="159:39"><name pos:start="159:9" pos:end="159:14">memcpy</name><argument_list pos:start="159:15" pos:end="159:39">(<argument pos:start="159:16" pos:end="159:18"><expr pos:start="159:16" pos:end="159:18"><name pos:start="159:16" pos:end="159:18">bap</name></expr></argument>, <argument pos:start="159:21" pos:end="159:24"><expr pos:start="159:21" pos:end="159:24"><name pos:start="159:21" pos:end="159:24">bap1</name></expr></argument>, <argument pos:start="159:27" pos:end="159:38"><expr pos:start="159:27" pos:end="159:38"><sizeof pos:start="159:27" pos:end="159:38">sizeof<argument_list pos:start="159:33" pos:end="159:38">(<argument pos:start="159:34" pos:end="159:37"><expr pos:start="159:34" pos:end="159:37"><name pos:start="159:34" pos:end="159:37">bap1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>

    <while pos:start="163:5" pos:end="171:5">while <condition pos:start="163:11" pos:end="165:92">(<expr pos:start="163:12" pos:end="165:91"><operator pos:start="163:12" pos:end="163:12">(</operator><name pos:start="163:13" pos:end="163:21">csnroffst</name> <operator pos:start="163:23" pos:end="163:23">+</operator> <literal type="number" pos:start="163:25" pos:end="163:25">1</literal><operator pos:start="163:26" pos:end="163:26">)</operator> <operator pos:start="163:28" pos:end="163:29">&lt;=</operator> <literal type="number" pos:start="163:31" pos:end="163:32">63</literal> <operator pos:start="163:34" pos:end="163:35">&amp;&amp;</operator> 

           <call pos:start="165:12" pos:end="165:86"><name pos:start="165:12" pos:end="165:20">bit_alloc</name><argument_list pos:start="165:21" pos:end="165:86">(<argument pos:start="165:22" pos:end="165:22"><expr pos:start="165:22" pos:end="165:22"><name pos:start="165:22" pos:end="165:22">s</name></expr></argument>, <argument pos:start="165:25" pos:end="165:28"><expr pos:start="165:25" pos:end="165:28"><name pos:start="165:25" pos:end="165:28">bap1</name></expr></argument>, <argument pos:start="165:31" pos:end="165:41"><expr pos:start="165:31" pos:end="165:41"><name pos:start="165:31" pos:end="165:41">encoded_exp</name></expr></argument>, <argument pos:start="165:44" pos:end="165:55"><expr pos:start="165:44" pos:end="165:55"><name pos:start="165:44" pos:end="165:55">exp_strategy</name></expr></argument>, <argument pos:start="165:58" pos:end="165:67"><expr pos:start="165:58" pos:end="165:67"><name pos:start="165:58" pos:end="165:67">frame_bits</name></expr></argument>, <argument pos:start="165:70" pos:end="165:82"><expr pos:start="165:70" pos:end="165:82"><name pos:start="165:70" pos:end="165:78">csnroffst</name> <operator pos:start="165:80" pos:end="165:80">+</operator> <literal type="number" pos:start="165:82" pos:end="165:82">1</literal></expr></argument>, <argument pos:start="165:85" pos:end="165:85"><expr pos:start="165:85" pos:end="165:85"><literal type="number" pos:start="165:85" pos:end="165:85">0</literal></expr></argument>)</argument_list></call> <operator pos:start="165:88" pos:end="165:89">&gt;=</operator> <literal type="number" pos:start="165:91" pos:end="165:91">0</literal></expr>)</condition> <block pos:start="165:94" pos:end="171:5">{<block_content pos:start="167:9" pos:end="169:40">

        <expr_stmt pos:start="167:9" pos:end="167:20"><expr pos:start="167:9" pos:end="167:19"><name pos:start="167:9" pos:end="167:17">csnroffst</name><operator pos:start="167:18" pos:end="167:19">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:40"><expr pos:start="169:9" pos:end="169:39"><call pos:start="169:9" pos:end="169:39"><name pos:start="169:9" pos:end="169:14">memcpy</name><argument_list pos:start="169:15" pos:end="169:39">(<argument pos:start="169:16" pos:end="169:18"><expr pos:start="169:16" pos:end="169:18"><name pos:start="169:16" pos:end="169:18">bap</name></expr></argument>, <argument pos:start="169:21" pos:end="169:24"><expr pos:start="169:21" pos:end="169:24"><name pos:start="169:21" pos:end="169:24">bap1</name></expr></argument>, <argument pos:start="169:27" pos:end="169:38"><expr pos:start="169:27" pos:end="169:38"><sizeof pos:start="169:27" pos:end="169:38">sizeof<argument_list pos:start="169:33" pos:end="169:38">(<argument pos:start="169:34" pos:end="169:37"><expr pos:start="169:34" pos:end="169:37"><name pos:start="169:34" pos:end="169:37">bap1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="175:5" pos:end="175:18"><expr pos:start="175:5" pos:end="175:17"><name pos:start="175:5" pos:end="175:13">fsnroffst</name> <operator pos:start="175:15" pos:end="175:15">=</operator> <literal type="number" pos:start="175:17" pos:end="175:17">0</literal></expr>;</expr_stmt>

    <while pos:start="177:5" pos:end="187:5">while <condition pos:start="177:11" pos:end="181:59">(<expr pos:start="177:12" pos:end="181:58"><operator pos:start="177:12" pos:end="177:12">(</operator><name pos:start="177:13" pos:end="177:21">fsnroffst</name> <operator pos:start="177:23" pos:end="177:23">+</operator> <name pos:start="177:25" pos:end="177:32">SNR_INC1</name><operator pos:start="177:33" pos:end="177:33">)</operator> <operator pos:start="177:35" pos:end="177:36">&lt;=</operator> <literal type="number" pos:start="177:38" pos:end="177:39">15</literal> <operator pos:start="177:41" pos:end="177:42">&amp;&amp;</operator> 

           <call pos:start="179:12" pos:end="181:53"><name pos:start="179:12" pos:end="179:20">bit_alloc</name><argument_list pos:start="179:21" pos:end="181:53">(<argument pos:start="179:22" pos:end="179:22"><expr pos:start="179:22" pos:end="179:22"><name pos:start="179:22" pos:end="179:22">s</name></expr></argument>, <argument pos:start="179:25" pos:end="179:28"><expr pos:start="179:25" pos:end="179:28"><name pos:start="179:25" pos:end="179:28">bap1</name></expr></argument>, <argument pos:start="179:31" pos:end="179:41"><expr pos:start="179:31" pos:end="179:41"><name pos:start="179:31" pos:end="179:41">encoded_exp</name></expr></argument>, <argument pos:start="179:44" pos:end="179:55"><expr pos:start="179:44" pos:end="179:55"><name pos:start="179:44" pos:end="179:55">exp_strategy</name></expr></argument>, <argument pos:start="179:58" pos:end="179:67"><expr pos:start="179:58" pos:end="179:67"><name pos:start="179:58" pos:end="179:67">frame_bits</name></expr></argument>, 

                     <argument pos:start="181:22" pos:end="181:30"><expr pos:start="181:22" pos:end="181:30"><name pos:start="181:22" pos:end="181:30">csnroffst</name></expr></argument>, <argument pos:start="181:33" pos:end="181:52"><expr pos:start="181:33" pos:end="181:52"><name pos:start="181:33" pos:end="181:41">fsnroffst</name> <operator pos:start="181:43" pos:end="181:43">+</operator> <name pos:start="181:45" pos:end="181:52">SNR_INC1</name></expr></argument>)</argument_list></call> <operator pos:start="181:55" pos:end="181:56">&gt;=</operator> <literal type="number" pos:start="181:58" pos:end="181:58">0</literal></expr>)</condition> <block pos:start="181:61" pos:end="187:5">{<block_content pos:start="183:9" pos:end="185:40">

        <expr_stmt pos:start="183:9" pos:end="183:30"><expr pos:start="183:9" pos:end="183:29"><name pos:start="183:9" pos:end="183:17">fsnroffst</name> <operator pos:start="183:19" pos:end="183:20">+=</operator> <name pos:start="183:22" pos:end="183:29">SNR_INC1</name></expr>;</expr_stmt>

        <expr_stmt pos:start="185:9" pos:end="185:40"><expr pos:start="185:9" pos:end="185:39"><call pos:start="185:9" pos:end="185:39"><name pos:start="185:9" pos:end="185:14">memcpy</name><argument_list pos:start="185:15" pos:end="185:39">(<argument pos:start="185:16" pos:end="185:18"><expr pos:start="185:16" pos:end="185:18"><name pos:start="185:16" pos:end="185:18">bap</name></expr></argument>, <argument pos:start="185:21" pos:end="185:24"><expr pos:start="185:21" pos:end="185:24"><name pos:start="185:21" pos:end="185:24">bap1</name></expr></argument>, <argument pos:start="185:27" pos:end="185:38"><expr pos:start="185:27" pos:end="185:38"><sizeof pos:start="185:27" pos:end="185:38">sizeof<argument_list pos:start="185:33" pos:end="185:38">(<argument pos:start="185:34" pos:end="185:37"><expr pos:start="185:34" pos:end="185:37"><name pos:start="185:34" pos:end="185:37">bap1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>

    <while pos:start="189:5" pos:end="199:5">while <condition pos:start="189:11" pos:end="193:52">(<expr pos:start="189:12" pos:end="193:51"><operator pos:start="189:12" pos:end="189:12">(</operator><name pos:start="189:13" pos:end="189:21">fsnroffst</name> <operator pos:start="189:23" pos:end="189:23">+</operator> <literal type="number" pos:start="189:25" pos:end="189:25">1</literal><operator pos:start="189:26" pos:end="189:26">)</operator> <operator pos:start="189:28" pos:end="189:29">&lt;=</operator> <literal type="number" pos:start="189:31" pos:end="189:32">15</literal> <operator pos:start="189:34" pos:end="189:35">&amp;&amp;</operator> 

           <call pos:start="191:12" pos:end="193:46"><name pos:start="191:12" pos:end="191:20">bit_alloc</name><argument_list pos:start="191:21" pos:end="193:46">(<argument pos:start="191:22" pos:end="191:22"><expr pos:start="191:22" pos:end="191:22"><name pos:start="191:22" pos:end="191:22">s</name></expr></argument>, <argument pos:start="191:25" pos:end="191:28"><expr pos:start="191:25" pos:end="191:28"><name pos:start="191:25" pos:end="191:28">bap1</name></expr></argument>, <argument pos:start="191:31" pos:end="191:41"><expr pos:start="191:31" pos:end="191:41"><name pos:start="191:31" pos:end="191:41">encoded_exp</name></expr></argument>, <argument pos:start="191:44" pos:end="191:55"><expr pos:start="191:44" pos:end="191:55"><name pos:start="191:44" pos:end="191:55">exp_strategy</name></expr></argument>, <argument pos:start="191:58" pos:end="191:67"><expr pos:start="191:58" pos:end="191:67"><name pos:start="191:58" pos:end="191:67">frame_bits</name></expr></argument>, 

                     <argument pos:start="193:22" pos:end="193:30"><expr pos:start="193:22" pos:end="193:30"><name pos:start="193:22" pos:end="193:30">csnroffst</name></expr></argument>, <argument pos:start="193:33" pos:end="193:45"><expr pos:start="193:33" pos:end="193:45"><name pos:start="193:33" pos:end="193:41">fsnroffst</name> <operator pos:start="193:43" pos:end="193:43">+</operator> <literal type="number" pos:start="193:45" pos:end="193:45">1</literal></expr></argument>)</argument_list></call> <operator pos:start="193:48" pos:end="193:49">&gt;=</operator> <literal type="number" pos:start="193:51" pos:end="193:51">0</literal></expr>)</condition> <block pos:start="193:54" pos:end="199:5">{<block_content pos:start="195:9" pos:end="197:40">

        <expr_stmt pos:start="195:9" pos:end="195:20"><expr pos:start="195:9" pos:end="195:19"><name pos:start="195:9" pos:end="195:17">fsnroffst</name><operator pos:start="195:18" pos:end="195:19">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="197:9" pos:end="197:40"><expr pos:start="197:9" pos:end="197:39"><call pos:start="197:9" pos:end="197:39"><name pos:start="197:9" pos:end="197:14">memcpy</name><argument_list pos:start="197:15" pos:end="197:39">(<argument pos:start="197:16" pos:end="197:18"><expr pos:start="197:16" pos:end="197:18"><name pos:start="197:16" pos:end="197:18">bap</name></expr></argument>, <argument pos:start="197:21" pos:end="197:24"><expr pos:start="197:21" pos:end="197:24"><name pos:start="197:21" pos:end="197:24">bap1</name></expr></argument>, <argument pos:start="197:27" pos:end="197:38"><expr pos:start="197:27" pos:end="197:38"><sizeof pos:start="197:27" pos:end="197:38">sizeof<argument_list pos:start="197:33" pos:end="197:38">(<argument pos:start="197:34" pos:end="197:37"><expr pos:start="197:34" pos:end="197:37"><name pos:start="197:34" pos:end="197:37">bap1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>

    

    <expr_stmt pos:start="203:5" pos:end="203:29"><expr pos:start="203:5" pos:end="203:28"><name pos:start="203:5" pos:end="203:16"><name pos:start="203:5" pos:end="203:5">s</name><operator pos:start="203:6" pos:end="203:7">-&gt;</operator><name pos:start="203:8" pos:end="203:16">csnroffst</name></name> <operator pos:start="203:18" pos:end="203:18">=</operator> <name pos:start="203:20" pos:end="203:28">csnroffst</name></expr>;</expr_stmt>

    <for pos:start="205:5" pos:end="210:0">for<control pos:start="205:8" pos:end="205:40">(<init pos:start="205:9" pos:end="205:13"><expr pos:start="205:9" pos:end="205:12"><name pos:start="205:9" pos:end="205:10">ch</name><operator pos:start="205:11" pos:end="205:11">=</operator><literal type="number" pos:start="205:12" pos:end="205:12">0</literal></expr>;</init><condition pos:start="205:14" pos:end="205:35"><expr pos:start="205:14" pos:end="205:34"><name pos:start="205:14" pos:end="205:15">ch</name><operator pos:start="205:16" pos:end="205:16">&lt;</operator><name pos:start="205:17" pos:end="205:34"><name pos:start="205:17" pos:end="205:17">s</name><operator pos:start="205:18" pos:end="205:19">-&gt;</operator><name pos:start="205:20" pos:end="205:34">nb_all_channels</name></name></expr>;</condition><incr pos:start="205:36" pos:end="205:39"><expr pos:start="205:36" pos:end="205:39"><name pos:start="205:36" pos:end="205:37">ch</name><operator pos:start="205:38" pos:end="205:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="207:9" pos:end="210:0"><block_content pos:start="207:9" pos:end="210:0">

        <expr_stmt pos:start="207:9" pos:end="210:0"><expr pos:start="207:9" pos:end="207:36"><name pos:start="207:9" pos:end="207:24"><name pos:start="207:9" pos:end="207:9">s</name><operator pos:start="207:10" pos:end="207:11">-&gt;</operator><name pos:start="207:12" pos:end="207:20">fsnroffst</name><index pos:start="207:21" pos:end="207:24">[<expr pos:start="207:22" pos:end="207:23"><name pos:start="207:22" pos:end="207:23">ch</name></expr>]</index></name> <operator pos:start="207:26" pos:end="207:26">=</operator> <name pos:start="207:28" pos:end="207:36">fsnroffst</name></expr>;</expr_stmt></block_content></block></for>

<cpp:if pos:start="209:1" pos:end="209:27">#<cpp:directive pos:start="209:2" pos:end="209:3">if</cpp:directive> <expr pos:start="209:5" pos:end="209:27"><call pos:start="209:5" pos:end="209:27"><name pos:start="209:5" pos:end="209:11">defined</name><argument_list pos:start="209:12" pos:end="209:27">(<argument pos:start="209:13" pos:end="209:26"><expr pos:start="209:13" pos:end="209:26"><name pos:start="209:13" pos:end="209:26">DEBUG_BITALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <block pos:start="211:5" pos:end="240:0">{<block_content pos:start="213:9" pos:end="235:9">

        <decl_stmt pos:start="213:9" pos:end="213:14"><decl pos:start="213:9" pos:end="213:13"><type pos:start="213:9" pos:end="213:11"><name pos:start="213:9" pos:end="213:11">int</name></type> <name pos:start="213:13" pos:end="213:13">j</name></decl>;</decl_stmt>



        <for pos:start="217:9" pos:end="235:9">for<control pos:start="217:12" pos:end="217:24">(<init pos:start="217:13" pos:end="217:16"><expr pos:start="217:13" pos:end="217:15"><name pos:start="217:13" pos:end="217:13">i</name><operator pos:start="217:14" pos:end="217:14">=</operator><literal type="number" pos:start="217:15" pos:end="217:15">0</literal></expr>;</init><condition pos:start="217:17" pos:end="217:20"><expr pos:start="217:17" pos:end="217:19"><name pos:start="217:17" pos:end="217:17">i</name><operator pos:start="217:18" pos:end="217:18">&lt;</operator><literal type="number" pos:start="217:19" pos:end="217:19">6</literal></expr>;</condition><incr pos:start="217:21" pos:end="217:23"><expr pos:start="217:21" pos:end="217:23"><name pos:start="217:21" pos:end="217:21">i</name><operator pos:start="217:22" pos:end="217:23">++</operator></expr></incr>)</control> <block pos:start="217:26" pos:end="235:9">{<block_content pos:start="219:13" pos:end="233:13">

            <for pos:start="219:13" pos:end="233:13">for<control pos:start="219:16" pos:end="219:48">(<init pos:start="219:17" pos:end="219:21"><expr pos:start="219:17" pos:end="219:20"><name pos:start="219:17" pos:end="219:18">ch</name><operator pos:start="219:19" pos:end="219:19">=</operator><literal type="number" pos:start="219:20" pos:end="219:20">0</literal></expr>;</init><condition pos:start="219:22" pos:end="219:43"><expr pos:start="219:22" pos:end="219:42"><name pos:start="219:22" pos:end="219:23">ch</name><operator pos:start="219:24" pos:end="219:24">&lt;</operator><name pos:start="219:25" pos:end="219:42"><name pos:start="219:25" pos:end="219:25">s</name><operator pos:start="219:26" pos:end="219:27">-&gt;</operator><name pos:start="219:28" pos:end="219:42">nb_all_channels</name></name></expr>;</condition><incr pos:start="219:44" pos:end="219:47"><expr pos:start="219:44" pos:end="219:47"><name pos:start="219:44" pos:end="219:45">ch</name><operator pos:start="219:46" pos:end="219:47">++</operator></expr></incr>)</control> <block pos:start="219:50" pos:end="233:13">{<block_content pos:start="221:17" pos:end="231:29">

                <expr_stmt pos:start="221:17" pos:end="221:51"><expr pos:start="221:17" pos:end="221:50"><call pos:start="221:17" pos:end="221:50"><name pos:start="221:17" pos:end="221:22">printf</name><argument_list pos:start="221:23" pos:end="221:50">(<argument pos:start="221:24" pos:end="221:42"><expr pos:start="221:24" pos:end="221:42"><literal type="string" pos:start="221:24" pos:end="221:42">"Block #%d Ch%d:\n"</literal></expr></argument>, <argument pos:start="221:45" pos:end="221:45"><expr pos:start="221:45" pos:end="221:45"><name pos:start="221:45" pos:end="221:45">i</name></expr></argument>, <argument pos:start="221:48" pos:end="221:49"><expr pos:start="221:48" pos:end="221:49"><name pos:start="221:48" pos:end="221:49">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="223:17" pos:end="223:31"><expr pos:start="223:17" pos:end="223:30"><call pos:start="223:17" pos:end="223:30"><name pos:start="223:17" pos:end="223:22">printf</name><argument_list pos:start="223:23" pos:end="223:30">(<argument pos:start="223:24" pos:end="223:29"><expr pos:start="223:24" pos:end="223:29"><literal type="string" pos:start="223:24" pos:end="223:29">"bap="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="225:17" pos:end="229:17">for<control pos:start="225:20" pos:end="225:46">(<init pos:start="225:21" pos:end="225:24"><expr pos:start="225:21" pos:end="225:23"><name pos:start="225:21" pos:end="225:21">j</name><operator pos:start="225:22" pos:end="225:22">=</operator><literal type="number" pos:start="225:23" pos:end="225:23">0</literal></expr>;</init><condition pos:start="225:25" pos:end="225:42"><expr pos:start="225:25" pos:end="225:41"><name pos:start="225:25" pos:end="225:25">j</name><operator pos:start="225:26" pos:end="225:26">&lt;</operator><name pos:start="225:27" pos:end="225:41"><name pos:start="225:27" pos:end="225:27">s</name><operator pos:start="225:28" pos:end="225:29">-&gt;</operator><name pos:start="225:30" pos:end="225:37">nb_coefs</name><index pos:start="225:38" pos:end="225:41">[<expr pos:start="225:39" pos:end="225:40"><name pos:start="225:39" pos:end="225:40">ch</name></expr>]</index></name></expr>;</condition><incr pos:start="225:43" pos:end="225:45"><expr pos:start="225:43" pos:end="225:45"><name pos:start="225:43" pos:end="225:43">j</name><operator pos:start="225:44" pos:end="225:45">++</operator></expr></incr>)</control> <block pos:start="225:48" pos:end="229:17">{<block_content pos:start="227:21" pos:end="227:48">

                    <expr_stmt pos:start="227:21" pos:end="227:48"><expr pos:start="227:21" pos:end="227:47"><call pos:start="227:21" pos:end="227:47"><name pos:start="227:21" pos:end="227:26">printf</name><argument_list pos:start="227:27" pos:end="227:47">(<argument pos:start="227:28" pos:end="227:32"><expr pos:start="227:28" pos:end="227:32"><literal type="string" pos:start="227:28" pos:end="227:32">"%d "</literal></expr></argument>,<argument pos:start="227:34" pos:end="227:46"><expr pos:start="227:34" pos:end="227:46"><name pos:start="227:34" pos:end="227:46"><name pos:start="227:34" pos:end="227:36">bap</name><index pos:start="227:37" pos:end="227:39">[<expr pos:start="227:38" pos:end="227:38"><name pos:start="227:38" pos:end="227:38">i</name></expr>]</index><index pos:start="227:40" pos:end="227:43">[<expr pos:start="227:41" pos:end="227:42"><name pos:start="227:41" pos:end="227:42">ch</name></expr>]</index><index pos:start="227:44" pos:end="227:46">[<expr pos:start="227:45" pos:end="227:45"><name pos:start="227:45" pos:end="227:45">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="231:17" pos:end="231:29"><expr pos:start="231:17" pos:end="231:28"><call pos:start="231:17" pos:end="231:28"><name pos:start="231:17" pos:end="231:22">printf</name><argument_list pos:start="231:23" pos:end="231:28">(<argument pos:start="231:24" pos:end="231:27"><expr pos:start="231:24" pos:end="231:27"><literal type="string" pos:start="231:24" pos:end="231:27">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

    </block_content>}</block>

<cpp:endif pos:start="239:1" pos:end="239:6">#<cpp:directive pos:start="239:2" pos:end="239:6">endif</cpp:directive></cpp:endif>

    <return pos:start="241:5" pos:end="241:13">return <expr pos:start="241:12" pos:end="241:12"><literal type="number" pos:start="241:12" pos:end="241:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
