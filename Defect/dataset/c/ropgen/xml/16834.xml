<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16834.c" pos:tabs="8"><function pos:start="1:1" pos:end="123:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:33">virtio_blk_data_plane_create</name><parameter_list pos:start="1:34" pos:end="5:47">(<parameter pos:start="1:35" pos:end="1:52"><decl pos:start="1:35" pos:end="1:52"><type pos:start="1:35" pos:end="1:52"><name pos:start="1:35" pos:end="1:46">VirtIODevice</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:52">vdev</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:73"><decl pos:start="1:55" pos:end="1:73"><type pos:start="1:55" pos:end="1:73"><name pos:start="1:55" pos:end="1:67">VirtIOBlkConf</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:73">conf</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:66"><decl pos:start="3:35" pos:end="3:66"><type pos:start="3:35" pos:end="3:66"><name pos:start="3:35" pos:end="3:54">VirtIOBlockDataPlane</name> <modifier pos:start="3:56" pos:end="3:56">*</modifier><modifier pos:start="3:57" pos:end="3:57">*</modifier></type><name pos:start="3:58" pos:end="3:66">dataplane</name></decl></parameter>,

                                  <parameter pos:start="5:35" pos:end="5:46"><decl pos:start="5:35" pos:end="5:46"><type pos:start="5:35" pos:end="5:46"><name pos:start="5:35" pos:end="5:39">Error</name> <modifier pos:start="5:41" pos:end="5:41">*</modifier><modifier pos:start="5:42" pos:end="5:42">*</modifier></type><name pos:start="5:43" pos:end="5:46">errp</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="123:1">{<block_content pos:start="9:5" pos:end="121:19">

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:26"><name pos:start="9:5" pos:end="9:24">VirtIOBlockDataPlane</name> <modifier pos:start="9:26" pos:end="9:26">*</modifier></type><name pos:start="9:27" pos:end="9:27">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">Error</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:20">local_err</name> <init pos:start="11:22" pos:end="11:27">= <expr pos:start="11:24" pos:end="11:27"><name pos:start="11:24" pos:end="11:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:60"><decl pos:start="13:5" pos:end="13:59"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">BusState</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:18">qbus</name> <init pos:start="13:20" pos:end="13:59">= <expr pos:start="13:22" pos:end="13:59"><call pos:start="13:22" pos:end="13:59"><name pos:start="13:22" pos:end="13:24">BUS</name><argument_list pos:start="13:25" pos:end="13:59">(<argument pos:start="13:26" pos:end="13:58"><expr pos:start="13:26" pos:end="13:58"><call pos:start="13:26" pos:end="13:58"><name pos:start="13:26" pos:end="13:44">qdev_get_parent_bus</name><argument_list pos:start="13:45" pos:end="13:58">(<argument pos:start="13:46" pos:end="13:57"><expr pos:start="13:46" pos:end="13:57"><call pos:start="13:46" pos:end="13:57"><name pos:start="13:46" pos:end="13:51">DEVICE</name><argument_list pos:start="13:52" pos:end="13:57">(<argument pos:start="13:53" pos:end="13:56"><expr pos:start="13:53" pos:end="13:56"><name pos:start="13:53" pos:end="13:56">vdev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:51"><decl pos:start="15:5" pos:end="15:50"><type pos:start="15:5" pos:end="15:20"><name pos:start="15:5" pos:end="15:18">VirtioBusClass</name> <modifier pos:start="15:20" pos:end="15:20">*</modifier></type><name pos:start="15:21" pos:end="15:21">k</name> <init pos:start="15:23" pos:end="15:50">= <expr pos:start="15:25" pos:end="15:50"><call pos:start="15:25" pos:end="15:50"><name pos:start="15:25" pos:end="15:44">VIRTIO_BUS_GET_CLASS</name><argument_list pos:start="15:45" pos:end="15:50">(<argument pos:start="15:46" pos:end="15:49"><expr pos:start="15:46" pos:end="15:49"><name pos:start="15:46" pos:end="15:49">qbus</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:22"><expr pos:start="19:5" pos:end="19:21"><operator pos:start="19:5" pos:end="19:5">*</operator><name pos:start="19:6" pos:end="19:14">dataplane</name> <operator pos:start="19:16" pos:end="19:16">=</operator> <name pos:start="19:18" pos:end="19:21">NULL</name></expr>;</expr_stmt>



    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:45">(<expr pos:start="23:9" pos:end="23:44"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:25"><name pos:start="23:10" pos:end="23:13">conf</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:25">data_plane</name></name> <operator pos:start="23:27" pos:end="23:28">&amp;&amp;</operator> <operator pos:start="23:30" pos:end="23:30">!</operator><name pos:start="23:31" pos:end="23:44"><name pos:start="23:31" pos:end="23:34">conf</name><operator pos:start="23:35" pos:end="23:36">-&gt;</operator><name pos:start="23:37" pos:end="23:44">iothread</name></name></expr>)</condition> <block pos:start="23:47" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:15">

        <return pos:start="25:9" pos:end="25:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:60">/* Don't try if transport does not support notifiers. */</comment>

    <if_stmt pos:start="33:5" pos:end="43:5"><if pos:start="33:5" pos:end="43:5">if <condition pos:start="33:8" pos:end="33:57">(<expr pos:start="33:9" pos:end="33:56"><operator pos:start="33:9" pos:end="33:9">!</operator><name pos:start="33:10" pos:end="33:31"><name pos:start="33:10" pos:end="33:10">k</name><operator pos:start="33:11" pos:end="33:12">-&gt;</operator><name pos:start="33:13" pos:end="33:31">set_guest_notifiers</name></name> <operator pos:start="33:33" pos:end="33:34">||</operator> <operator pos:start="33:36" pos:end="33:36">!</operator><name pos:start="33:37" pos:end="33:56"><name pos:start="33:37" pos:end="33:37">k</name><operator pos:start="33:38" pos:end="33:39">-&gt;</operator><name pos:start="33:40" pos:end="33:56">set_host_notifier</name></name></expr>)</condition> <block pos:start="33:59" pos:end="43:5">{<block_content pos:start="35:9" pos:end="41:15">

        <expr_stmt pos:start="35:9" pos:end="39:61"><expr pos:start="35:9" pos:end="39:60"><call pos:start="35:9" pos:end="39:60"><name pos:start="35:9" pos:end="35:18">error_setg</name><argument_list pos:start="35:19" pos:end="39:60">(<argument pos:start="35:20" pos:end="35:23"><expr pos:start="35:20" pos:end="35:23"><name pos:start="35:20" pos:end="35:23">errp</name></expr></argument>,

                   <argument pos:start="37:20" pos:end="39:59"><expr pos:start="37:20" pos:end="39:59"><literal type="string" pos:start="37:20" pos:end="37:62">"device is incompatible with x-data-plane "</literal>

                   <literal type="string" pos:start="39:20" pos:end="39:59">"(transport does not support notifiers)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="47:5" pos:end="51:7">/* If dataplane is (re-)enabled while the guest is running there could be

     * block jobs that can conflict.

     */</comment>

    <if_stmt pos:start="53:5" pos:end="65:5"><if pos:start="53:5" pos:end="65:5">if <condition pos:start="53:8" pos:end="55:39">(<expr pos:start="53:9" pos:end="55:38"><call pos:start="53:9" pos:end="55:38"><name pos:start="53:9" pos:end="53:26">bdrv_op_is_blocked</name><argument_list pos:start="53:27" pos:end="55:38">(<argument pos:start="53:28" pos:end="53:40"><expr pos:start="53:28" pos:end="53:40"><name pos:start="53:28" pos:end="53:40"><name pos:start="53:28" pos:end="53:31">conf</name><operator pos:start="53:32" pos:end="53:33">-&gt;</operator><name pos:start="53:34" pos:end="53:37">conf</name><operator pos:start="53:38" pos:end="53:38">.</operator><name pos:start="53:39" pos:end="53:40">bs</name></name></expr></argument>, <argument pos:start="53:43" pos:end="53:65"><expr pos:start="53:43" pos:end="53:65"><name pos:start="53:43" pos:end="53:65">BLOCK_OP_TYPE_DATAPLANE</name></expr></argument>,

                           <argument pos:start="55:28" pos:end="55:37"><expr pos:start="55:28" pos:end="55:37"><operator pos:start="55:28" pos:end="55:28">&amp;</operator><name pos:start="55:29" pos:end="55:37">local_err</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:41" pos:end="65:5">{<block_content pos:start="57:9" pos:end="63:15">

        <expr_stmt pos:start="57:9" pos:end="59:48"><expr pos:start="57:9" pos:end="59:47"><call pos:start="57:9" pos:end="59:47"><name pos:start="57:9" pos:end="57:18">error_setg</name><argument_list pos:start="57:19" pos:end="59:47">(<argument pos:start="57:20" pos:end="57:23"><expr pos:start="57:20" pos:end="57:23"><name pos:start="57:20" pos:end="57:23">errp</name></expr></argument>, <argument pos:start="57:26" pos:end="57:60"><expr pos:start="57:26" pos:end="57:60"><literal type="string" pos:start="57:26" pos:end="57:60">"cannot start dataplane thread: %s"</literal></expr></argument>,

                   <argument pos:start="59:20" pos:end="59:46"><expr pos:start="59:20" pos:end="59:46"><call pos:start="59:20" pos:end="59:46"><name pos:start="59:20" pos:end="59:35">error_get_pretty</name><argument_list pos:start="59:36" pos:end="59:46">(<argument pos:start="59:37" pos:end="59:45"><expr pos:start="59:37" pos:end="59:45"><name pos:start="59:37" pos:end="59:45">local_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:30"><expr pos:start="61:9" pos:end="61:29"><call pos:start="61:9" pos:end="61:29"><name pos:start="61:9" pos:end="61:18">error_free</name><argument_list pos:start="61:19" pos:end="61:29">(<argument pos:start="61:20" pos:end="61:28"><expr pos:start="61:20" pos:end="61:28"><name pos:start="61:20" pos:end="61:28">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="63:9" pos:end="63:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:40"><expr pos:start="69:5" pos:end="69:39"><name pos:start="69:5" pos:end="69:5">s</name> <operator pos:start="69:7" pos:end="69:7">=</operator> <call pos:start="69:9" pos:end="69:39"><name pos:start="69:9" pos:end="69:14">g_new0</name><argument_list pos:start="69:15" pos:end="69:39">(<argument pos:start="69:16" pos:end="69:35"><expr pos:start="69:16" pos:end="69:35"><name pos:start="69:16" pos:end="69:35">VirtIOBlockDataPlane</name></expr></argument>, <argument pos:start="69:38" pos:end="69:38"><expr pos:start="69:38" pos:end="69:38"><literal type="number" pos:start="69:38" pos:end="69:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:19"><expr pos:start="71:5" pos:end="71:18"><name pos:start="71:5" pos:end="71:11"><name pos:start="71:5" pos:end="71:5">s</name><operator pos:start="71:6" pos:end="71:7">-&gt;</operator><name pos:start="71:8" pos:end="71:11">vdev</name></name> <operator pos:start="71:13" pos:end="71:13">=</operator> <name pos:start="71:15" pos:end="71:18">vdev</name></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:19"><expr pos:start="73:5" pos:end="73:18"><name pos:start="73:5" pos:end="73:11"><name pos:start="73:5" pos:end="73:5">s</name><operator pos:start="73:6" pos:end="73:7">-&gt;</operator><name pos:start="73:8" pos:end="73:11">conf</name></name> <operator pos:start="73:13" pos:end="73:13">=</operator> <name pos:start="73:15" pos:end="73:18">conf</name></expr>;</expr_stmt>



    <if_stmt pos:start="77:5" pos:end="103:5"><if pos:start="77:5" pos:end="83:5">if <condition pos:start="77:8" pos:end="77:23">(<expr pos:start="77:9" pos:end="77:22"><name pos:start="77:9" pos:end="77:22"><name pos:start="77:9" pos:end="77:12">conf</name><operator pos:start="77:13" pos:end="77:14">-&gt;</operator><name pos:start="77:15" pos:end="77:22">iothread</name></name></expr>)</condition> <block pos:start="77:25" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:40">

        <expr_stmt pos:start="79:9" pos:end="79:37"><expr pos:start="79:9" pos:end="79:36"><name pos:start="79:9" pos:end="79:19"><name pos:start="79:9" pos:end="79:9">s</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:19">iothread</name></name> <operator pos:start="79:21" pos:end="79:21">=</operator> <name pos:start="79:23" pos:end="79:36"><name pos:start="79:23" pos:end="79:26">conf</name><operator pos:start="79:27" pos:end="79:28">-&gt;</operator><name pos:start="79:29" pos:end="79:36">iothread</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:40"><expr pos:start="81:9" pos:end="81:39"><call pos:start="81:9" pos:end="81:39"><name pos:start="81:9" pos:end="81:18">object_ref</name><argument_list pos:start="81:19" pos:end="81:39">(<argument pos:start="81:20" pos:end="81:38"><expr pos:start="81:20" pos:end="81:38"><call pos:start="81:20" pos:end="81:38"><name pos:start="81:20" pos:end="81:25">OBJECT</name><argument_list pos:start="81:26" pos:end="81:38">(<argument pos:start="81:27" pos:end="81:37"><expr pos:start="81:27" pos:end="81:37"><name pos:start="81:27" pos:end="81:37"><name pos:start="81:27" pos:end="81:27">s</name><operator pos:start="81:28" pos:end="81:29">-&gt;</operator><name pos:start="81:30" pos:end="81:37">iothread</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="83:7" pos:end="103:5">else <block pos:start="83:12" pos:end="103:5">{<block_content pos:start="93:9" pos:end="101:48">

        <comment type="block" pos:start="85:9" pos:end="91:11">/* Create per-device IOThread if none specified.  This is for

         * x-data-plane option compatibility.  If x-data-plane is removed we

         * can drop this.

         */</comment>

        <expr_stmt pos:start="93:9" pos:end="97:41"><expr pos:start="93:9" pos:end="97:40"><call pos:start="93:9" pos:end="97:40"><name pos:start="93:9" pos:end="93:25">object_initialize</name><argument_list pos:start="93:26" pos:end="97:40">(<argument pos:start="93:27" pos:end="93:51"><expr pos:start="93:27" pos:end="93:51"><operator pos:start="93:27" pos:end="93:27">&amp;</operator><name pos:start="93:28" pos:end="93:51"><name pos:start="93:28" pos:end="93:28">s</name><operator pos:start="93:29" pos:end="93:30">-&gt;</operator><name pos:start="93:31" pos:end="93:51">internal_iothread_obj</name></name></expr></argument>,

                          <argument pos:start="95:27" pos:end="95:58"><expr pos:start="95:27" pos:end="95:58"><sizeof pos:start="95:27" pos:end="95:58">sizeof<argument_list pos:start="95:33" pos:end="95:58">(<argument pos:start="95:34" pos:end="95:57"><expr pos:start="95:34" pos:end="95:57"><name pos:start="95:34" pos:end="95:57"><name pos:start="95:34" pos:end="95:34">s</name><operator pos:start="95:35" pos:end="95:36">-&gt;</operator><name pos:start="95:37" pos:end="95:57">internal_iothread_obj</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

                          <argument pos:start="97:27" pos:end="97:39"><expr pos:start="97:27" pos:end="97:39"><name pos:start="97:27" pos:end="97:39">TYPE_IOTHREAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:81"><expr pos:start="99:9" pos:end="99:80"><call pos:start="99:9" pos:end="99:80"><name pos:start="99:9" pos:end="99:31">user_creatable_complete</name><argument_list pos:start="99:32" pos:end="99:80">(<argument pos:start="99:33" pos:end="99:65"><expr pos:start="99:33" pos:end="99:65"><call pos:start="99:33" pos:end="99:65"><name pos:start="99:33" pos:end="99:38">OBJECT</name><argument_list pos:start="99:39" pos:end="99:65">(<argument pos:start="99:40" pos:end="99:64"><expr pos:start="99:40" pos:end="99:64"><operator pos:start="99:40" pos:end="99:40">&amp;</operator><name pos:start="99:41" pos:end="99:64"><name pos:start="99:41" pos:end="99:41">s</name><operator pos:start="99:42" pos:end="99:43">-&gt;</operator><name pos:start="99:44" pos:end="99:64">internal_iothread_obj</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="99:68" pos:end="99:79"><expr pos:start="99:68" pos:end="99:79"><operator pos:start="99:68" pos:end="99:68">&amp;</operator><name pos:start="99:69" pos:end="99:79">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:48"><expr pos:start="101:9" pos:end="101:47"><name pos:start="101:9" pos:end="101:19"><name pos:start="101:9" pos:end="101:9">s</name><operator pos:start="101:10" pos:end="101:11">-&gt;</operator><name pos:start="101:12" pos:end="101:19">iothread</name></name> <operator pos:start="101:21" pos:end="101:21">=</operator> <operator pos:start="101:23" pos:end="101:23">&amp;</operator><name pos:start="101:24" pos:end="101:47"><name pos:start="101:24" pos:end="101:24">s</name><operator pos:start="101:25" pos:end="101:26">-&gt;</operator><name pos:start="101:27" pos:end="101:47">internal_iothread_obj</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:51"><expr pos:start="105:5" pos:end="105:50"><name pos:start="105:5" pos:end="105:10"><name pos:start="105:5" pos:end="105:5">s</name><operator pos:start="105:6" pos:end="105:7">-&gt;</operator><name pos:start="105:8" pos:end="105:10">ctx</name></name> <operator pos:start="105:12" pos:end="105:12">=</operator> <call pos:start="105:14" pos:end="105:50"><name pos:start="105:14" pos:end="105:37">iothread_get_aio_context</name><argument_list pos:start="105:38" pos:end="105:50">(<argument pos:start="105:39" pos:end="105:49"><expr pos:start="105:39" pos:end="105:49"><name pos:start="105:39" pos:end="105:49"><name pos:start="105:39" pos:end="105:39">s</name><operator pos:start="105:40" pos:end="105:41">-&gt;</operator><name pos:start="105:42" pos:end="105:49">iothread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:51"><expr pos:start="107:5" pos:end="107:50"><name pos:start="107:5" pos:end="107:9"><name pos:start="107:5" pos:end="107:5">s</name><operator pos:start="107:6" pos:end="107:7">-&gt;</operator><name pos:start="107:8" pos:end="107:9">bh</name></name> <operator pos:start="107:11" pos:end="107:11">=</operator> <call pos:start="107:13" pos:end="107:50"><name pos:start="107:13" pos:end="107:22">aio_bh_new</name><argument_list pos:start="107:23" pos:end="107:50">(<argument pos:start="107:24" pos:end="107:29"><expr pos:start="107:24" pos:end="107:29"><name pos:start="107:24" pos:end="107:29"><name pos:start="107:24" pos:end="107:24">s</name><operator pos:start="107:25" pos:end="107:26">-&gt;</operator><name pos:start="107:27" pos:end="107:29">ctx</name></name></expr></argument>, <argument pos:start="107:32" pos:end="107:46"><expr pos:start="107:32" pos:end="107:46"><name pos:start="107:32" pos:end="107:46">notify_guest_bh</name></expr></argument>, <argument pos:start="107:49" pos:end="107:49"><expr pos:start="107:49" pos:end="107:49"><name pos:start="107:49" pos:end="107:49">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:68"><expr pos:start="111:5" pos:end="111:67"><call pos:start="111:5" pos:end="111:67"><name pos:start="111:5" pos:end="111:14">error_setg</name><argument_list pos:start="111:15" pos:end="111:67">(<argument pos:start="111:16" pos:end="111:26"><expr pos:start="111:16" pos:end="111:26"><operator pos:start="111:16" pos:end="111:16">&amp;</operator><name pos:start="111:17" pos:end="111:26"><name pos:start="111:17" pos:end="111:17">s</name><operator pos:start="111:18" pos:end="111:19">-&gt;</operator><name pos:start="111:20" pos:end="111:26">blocker</name></name></expr></argument>, <argument pos:start="111:29" pos:end="111:66"><expr pos:start="111:29" pos:end="111:66"><literal type="string" pos:start="111:29" pos:end="111:66">"block device is in use by data plane"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:49"><expr pos:start="113:5" pos:end="113:48"><call pos:start="113:5" pos:end="113:48"><name pos:start="113:5" pos:end="113:21">bdrv_op_block_all</name><argument_list pos:start="113:22" pos:end="113:48">(<argument pos:start="113:23" pos:end="113:35"><expr pos:start="113:23" pos:end="113:35"><name pos:start="113:23" pos:end="113:35"><name pos:start="113:23" pos:end="113:26">conf</name><operator pos:start="113:27" pos:end="113:28">-&gt;</operator><name pos:start="113:29" pos:end="113:32">conf</name><operator pos:start="113:33" pos:end="113:33">.</operator><name pos:start="113:34" pos:end="113:35">bs</name></name></expr></argument>, <argument pos:start="113:38" pos:end="113:47"><expr pos:start="113:38" pos:end="113:47"><name pos:start="113:38" pos:end="113:47"><name pos:start="113:38" pos:end="113:38">s</name><operator pos:start="113:39" pos:end="113:40">-&gt;</operator><name pos:start="113:41" pos:end="113:47">blocker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:69"><expr pos:start="115:5" pos:end="115:68"><call pos:start="115:5" pos:end="115:68"><name pos:start="115:5" pos:end="115:19">bdrv_op_unblock</name><argument_list pos:start="115:20" pos:end="115:68">(<argument pos:start="115:21" pos:end="115:33"><expr pos:start="115:21" pos:end="115:33"><name pos:start="115:21" pos:end="115:33"><name pos:start="115:21" pos:end="115:24">conf</name><operator pos:start="115:25" pos:end="115:26">-&gt;</operator><name pos:start="115:27" pos:end="115:30">conf</name><operator pos:start="115:31" pos:end="115:31">.</operator><name pos:start="115:32" pos:end="115:33">bs</name></name></expr></argument>, <argument pos:start="115:36" pos:end="115:55"><expr pos:start="115:36" pos:end="115:55"><name pos:start="115:36" pos:end="115:55">BLOCK_OP_TYPE_RESIZE</name></expr></argument>, <argument pos:start="115:58" pos:end="115:67"><expr pos:start="115:58" pos:end="115:67"><name pos:start="115:58" pos:end="115:67"><name pos:start="115:58" pos:end="115:58">s</name><operator pos:start="115:59" pos:end="115:60">-&gt;</operator><name pos:start="115:61" pos:end="115:67">blocker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:72"><expr pos:start="117:5" pos:end="117:71"><call pos:start="117:5" pos:end="117:71"><name pos:start="117:5" pos:end="117:19">bdrv_op_unblock</name><argument_list pos:start="117:20" pos:end="117:71">(<argument pos:start="117:21" pos:end="117:33"><expr pos:start="117:21" pos:end="117:33"><name pos:start="117:21" pos:end="117:33"><name pos:start="117:21" pos:end="117:24">conf</name><operator pos:start="117:25" pos:end="117:26">-&gt;</operator><name pos:start="117:27" pos:end="117:30">conf</name><operator pos:start="117:31" pos:end="117:31">.</operator><name pos:start="117:32" pos:end="117:33">bs</name></name></expr></argument>, <argument pos:start="117:36" pos:end="117:58"><expr pos:start="117:36" pos:end="117:58"><name pos:start="117:36" pos:end="117:58">BLOCK_OP_TYPE_DRIVE_DEL</name></expr></argument>, <argument pos:start="117:61" pos:end="117:70"><expr pos:start="117:61" pos:end="117:70"><name pos:start="117:61" pos:end="117:70"><name pos:start="117:61" pos:end="117:61">s</name><operator pos:start="117:62" pos:end="117:63">-&gt;</operator><name pos:start="117:64" pos:end="117:70">blocker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="121:5" pos:end="121:19"><expr pos:start="121:5" pos:end="121:18"><operator pos:start="121:5" pos:end="121:5">*</operator><name pos:start="121:6" pos:end="121:14">dataplane</name> <operator pos:start="121:16" pos:end="121:16">=</operator> <name pos:start="121:18" pos:end="121:18">s</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
