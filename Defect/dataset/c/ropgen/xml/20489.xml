<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20489.c" pos:tabs="8"><function pos:start="1:1" pos:end="35:1"><type pos:start="1:1" pos:end="1:16"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">ioreq_t</name> <modifier pos:start="1:16" pos:end="1:16">*</modifier></type><name pos:start="1:17" pos:end="1:48">cpu_get_ioreq_from_shared_memory</name><parameter_list pos:start="1:49" pos:end="1:77">(<parameter pos:start="1:50" pos:end="1:66"><decl pos:start="1:50" pos:end="1:66"><type pos:start="1:50" pos:end="1:66"><name pos:start="1:50" pos:end="1:59">XenIOState</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:66">state</name></decl></parameter>, <parameter pos:start="1:69" pos:end="1:76"><decl pos:start="1:69" pos:end="1:76"><type pos:start="1:69" pos:end="1:76"><name pos:start="1:69" pos:end="1:71">int</name></type> <name pos:start="1:73" pos:end="1:76">vcpu</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="35:1">{<block_content pos:start="5:5" pos:end="33:15">

    <decl_stmt pos:start="5:5" pos:end="5:60"><decl pos:start="5:5" pos:end="5:59"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">ioreq_t</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:16">req</name> <init pos:start="5:18" pos:end="5:59">= <expr pos:start="5:20" pos:end="5:59"><call pos:start="5:20" pos:end="5:59"><name pos:start="5:20" pos:end="5:33">xen_vcpu_ioreq</name><argument_list pos:start="5:34" pos:end="5:59">(<argument pos:start="5:35" pos:end="5:52"><expr pos:start="5:35" pos:end="5:52"><name pos:start="5:35" pos:end="5:52"><name pos:start="5:35" pos:end="5:39">state</name><operator pos:start="5:40" pos:end="5:41">-&gt;</operator><name pos:start="5:42" pos:end="5:52">shared_page</name></name></expr></argument>, <argument pos:start="5:55" pos:end="5:58"><expr pos:start="5:55" pos:end="5:58"><name pos:start="5:55" pos:end="5:58">vcpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="23:5"><if pos:start="9:5" pos:end="23:5">if <condition pos:start="9:8" pos:end="9:40">(<expr pos:start="9:9" pos:end="9:39"><name pos:start="9:9" pos:end="9:18"><name pos:start="9:9" pos:end="9:11">req</name><operator pos:start="9:12" pos:end="9:13">-&gt;</operator><name pos:start="9:14" pos:end="9:18">state</name></name> <operator pos:start="9:20" pos:end="9:21">!=</operator> <name pos:start="9:23" pos:end="9:39">STATE_IOREQ_READY</name></expr>)</condition> <block pos:start="9:42" pos:end="23:5">{<block_content pos:start="11:9" pos:end="21:20">

        <expr_stmt pos:start="11:9" pos:end="19:50"><expr pos:start="11:9" pos:end="19:49"><call pos:start="11:9" pos:end="19:49"><name pos:start="11:9" pos:end="11:15">DPRINTF</name><argument_list pos:start="11:16" pos:end="19:49">(<argument pos:start="11:17" pos:end="15:90"><expr pos:start="11:17" pos:end="15:90"><literal type="string" pos:start="11:17" pos:end="11:41">"I/O request not ready: "</literal>

                <literal type="string" pos:start="13:17" pos:end="13:38">"%x, ptr: %x, port: %"</literal><name pos:start="13:39" pos:end="13:44">PRIx64</name><literal type="string" pos:start="13:45" pos:end="13:48">", "</literal>

                <literal type="string" pos:start="15:17" pos:end="15:25">"data: %"</literal><name pos:start="15:26" pos:end="15:31">PRIx64</name><literal type="string" pos:start="15:32" pos:end="15:43">", count: %"</literal> <name pos:start="15:45" pos:end="15:58">FMT_ioreq_size</name> <literal type="string" pos:start="15:60" pos:end="15:70">", size: %"</literal> <name pos:start="15:72" pos:end="15:85">FMT_ioreq_size</name> <literal type="string" pos:start="15:87" pos:end="15:90">"\n"</literal></expr></argument>,

                <argument pos:start="17:17" pos:end="17:26"><expr pos:start="17:17" pos:end="17:26"><name pos:start="17:17" pos:end="17:26"><name pos:start="17:17" pos:end="17:19">req</name><operator pos:start="17:20" pos:end="17:21">-&gt;</operator><name pos:start="17:22" pos:end="17:26">state</name></name></expr></argument>, <argument pos:start="17:29" pos:end="17:44"><expr pos:start="17:29" pos:end="17:44"><name pos:start="17:29" pos:end="17:44"><name pos:start="17:29" pos:end="17:31">req</name><operator pos:start="17:32" pos:end="17:33">-&gt;</operator><name pos:start="17:34" pos:end="17:44">data_is_ptr</name></name></expr></argument>, <argument pos:start="17:47" pos:end="17:55"><expr pos:start="17:47" pos:end="17:55"><name pos:start="17:47" pos:end="17:55"><name pos:start="17:47" pos:end="17:49">req</name><operator pos:start="17:50" pos:end="17:51">-&gt;</operator><name pos:start="17:52" pos:end="17:55">addr</name></name></expr></argument>,

                <argument pos:start="19:17" pos:end="19:25"><expr pos:start="19:17" pos:end="19:25"><name pos:start="19:17" pos:end="19:25"><name pos:start="19:17" pos:end="19:19">req</name><operator pos:start="19:20" pos:end="19:21">-&gt;</operator><name pos:start="19:22" pos:end="19:25">data</name></name></expr></argument>, <argument pos:start="19:28" pos:end="19:37"><expr pos:start="19:28" pos:end="19:37"><name pos:start="19:28" pos:end="19:37"><name pos:start="19:28" pos:end="19:30">req</name><operator pos:start="19:31" pos:end="19:32">-&gt;</operator><name pos:start="19:33" pos:end="19:37">count</name></name></expr></argument>, <argument pos:start="19:40" pos:end="19:48"><expr pos:start="19:40" pos:end="19:48"><name pos:start="19:40" pos:end="19:48"><name pos:start="19:40" pos:end="19:42">req</name><operator pos:start="19:43" pos:end="19:44">-&gt;</operator><name pos:start="19:45" pos:end="19:48">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:20">return <expr pos:start="21:16" pos:end="21:19"><name pos:start="21:16" pos:end="21:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:14"><expr pos:start="27:5" pos:end="27:13"><call pos:start="27:5" pos:end="27:13"><name pos:start="27:5" pos:end="27:11">xen_rmb</name><argument_list pos:start="27:12" pos:end="27:13">()</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="27:16" pos:end="27:66">/* see IOREQ_READY /then/ read contents of ioreq */</comment>



    <expr_stmt pos:start="31:5" pos:end="31:39"><expr pos:start="31:5" pos:end="31:38"><name pos:start="31:5" pos:end="31:14"><name pos:start="31:5" pos:end="31:7">req</name><operator pos:start="31:8" pos:end="31:9">-&gt;</operator><name pos:start="31:10" pos:end="31:14">state</name></name> <operator pos:start="31:16" pos:end="31:16">=</operator> <name pos:start="31:18" pos:end="31:38">STATE_IOREQ_INPROCESS</name></expr>;</expr_stmt>

    <return pos:start="33:5" pos:end="33:15">return <expr pos:start="33:12" pos:end="33:14"><name pos:start="33:12" pos:end="33:14">req</name></expr>;</return>

</block_content>}</block></function>
</unit>
