<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7131.c" pos:tabs="8"><function pos:start="1:1" pos:end="244:49"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">amrnb_decode_frame</name><parameter_list pos:start="1:30" pos:end="3:66">(<parameter pos:start="1:31" pos:end="1:51"><decl pos:start="1:31" pos:end="1:51"><type pos:start="1:31" pos:end="1:51"><name pos:start="1:31" pos:end="1:44">AVCodecContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:51">avctx</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:63"><decl pos:start="1:54" pos:end="1:63"><type pos:start="1:54" pos:end="1:63"><name pos:start="1:54" pos:end="1:57">void</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:63">data</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:48"><decl pos:start="3:31" pos:end="3:48"><type pos:start="3:31" pos:end="3:48"><name pos:start="3:31" pos:end="3:33">int</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:48">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:65"><decl pos:start="3:51" pos:end="3:65"><type pos:start="3:51" pos:end="3:65"><name pos:start="3:51" pos:end="3:58">AVPacket</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:65">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="244:49">{<block_content pos:start="9:5" pos:end="244:49">



    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">AMRContext</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:17">p</name> <init pos:start="9:19" pos:end="9:36">= <expr pos:start="9:21" pos:end="9:36"><name pos:start="9:21" pos:end="9:36"><name pos:start="9:21" pos:end="9:25">avctx</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:36">priv_data</name></name></expr></init></decl>;</decl_stmt>        <comment type="line" pos:start="9:46" pos:end="9:71">// pointer to private data</comment>

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:19"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:17">uint8_t</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:22">buf</name> <init pos:start="11:24" pos:end="11:36">= <expr pos:start="11:26" pos:end="11:36"><name pos:start="11:26" pos:end="11:36"><name pos:start="11:26" pos:end="11:30">avpkt</name><operator pos:start="11:31" pos:end="11:32">-&gt;</operator><name pos:start="11:33" pos:end="11:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:37"><decl pos:start="13:5" pos:end="13:36"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:16">buf_size</name>       <init pos:start="13:24" pos:end="13:36">= <expr pos:start="13:26" pos:end="13:36"><name pos:start="13:26" pos:end="13:36"><name pos:start="13:26" pos:end="13:30">avpkt</name><operator pos:start="13:31" pos:end="13:32">-&gt;</operator><name pos:start="13:33" pos:end="13:36">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:9">float</name> <modifier pos:start="15:11" pos:end="15:11">*</modifier></type><name pos:start="15:12" pos:end="15:18">buf_out</name></decl>;</decl_stmt>                          <comment type="line" pos:start="15:46" pos:end="15:81">// pointer to the output data buffer</comment>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">i</name></decl>, <decl pos:start="17:12" pos:end="17:19"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:12" pos:end="17:19">subframe</name></decl>, <decl pos:start="17:22" pos:end="17:24"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:22" pos:end="17:24">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:28"><decl pos:start="19:5" pos:end="19:27"><type pos:start="19:5" pos:end="19:9"><name pos:start="19:5" pos:end="19:9">float</name></type> <name pos:start="19:11" pos:end="19:27">fixed_gain_factor</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:32"><decl pos:start="21:5" pos:end="21:31"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">AMRFixed</name></type> <name pos:start="21:14" pos:end="21:25">fixed_sparse</name> <init pos:start="21:27" pos:end="21:31">= <expr pos:start="21:29" pos:end="21:31"><block pos:start="21:29" pos:end="21:31">{<expr pos:start="21:30" pos:end="21:30"><literal type="number" pos:start="21:30" pos:end="21:30">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>             <comment type="line" pos:start="21:46" pos:end="21:93">// fixed vector up to anti-sparseness processing</comment>

    <decl_stmt pos:start="23:5" pos:end="23:42"><decl pos:start="23:5" pos:end="23:41"><type pos:start="23:5" pos:end="23:9"><name pos:start="23:5" pos:end="23:9">float</name></type> <name pos:start="23:11" pos:end="23:41"><name pos:start="23:11" pos:end="23:22">spare_vector</name><index pos:start="23:23" pos:end="23:41">[<expr pos:start="23:24" pos:end="23:40"><name pos:start="23:24" pos:end="23:40">AMR_SUBFRAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt>   <comment type="line" pos:start="23:46" pos:end="23:112">// extra stack space to hold result from anti-sparseness processing</comment>

    <decl_stmt pos:start="25:5" pos:end="25:27"><decl pos:start="25:5" pos:end="25:26"><type pos:start="25:5" pos:end="25:9"><name pos:start="25:5" pos:end="25:9">float</name></type> <name pos:start="25:11" pos:end="25:26">synth_fixed_gain</name></decl>;</decl_stmt>                  <comment type="line" pos:start="25:46" pos:end="25:88">// the fixed gain that synthesis should use</comment>

    <decl_stmt pos:start="27:5" pos:end="27:36"><decl pos:start="27:5" pos:end="27:35"><type pos:start="27:5" pos:end="27:17"><specifier pos:start="27:5" pos:end="27:9">const</specifier> <name pos:start="27:11" pos:end="27:15">float</name> <modifier pos:start="27:17" pos:end="27:17">*</modifier></type><name pos:start="27:18" pos:end="27:35">synth_fixed_vector</name></decl>;</decl_stmt>         <comment type="line" pos:start="27:46" pos:end="27:101">// pointer to the fixed vector that synthesis should use</comment>



    <comment type="block" pos:start="31:5" pos:end="31:27">/* get output buffer */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:43"><expr pos:start="33:5" pos:end="33:42"><name pos:start="33:5" pos:end="33:25"><name pos:start="33:5" pos:end="33:5">p</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:14">avframe</name><operator pos:start="33:15" pos:end="33:15">.</operator><name pos:start="33:16" pos:end="33:25">nb_samples</name></name> <operator pos:start="33:27" pos:end="33:27">=</operator> <name pos:start="33:29" pos:end="33:42">AMR_BLOCK_SIZE</name></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="244:49"><if pos:start="35:5" pos:end="244:49">if <condition pos:start="35:8" pos:end="35:58">(<expr pos:start="35:9" pos:end="35:57"><operator pos:start="35:9" pos:end="35:9">(</operator><name pos:start="35:10" pos:end="35:12">ret</name> <operator pos:start="35:14" pos:end="35:14">=</operator> <call pos:start="35:16" pos:end="35:52"><name pos:start="35:16" pos:end="35:32"><name pos:start="35:16" pos:end="35:20">avctx</name><operator pos:start="35:21" pos:end="35:22">-&gt;</operator><name pos:start="35:23" pos:end="35:32">get_buffer</name></name><argument_list pos:start="35:33" pos:end="35:52">(<argument pos:start="35:34" pos:end="35:38"><expr pos:start="35:34" pos:end="35:38"><name pos:start="35:34" pos:end="35:38">avctx</name></expr></argument>, <argument pos:start="35:41" pos:end="35:51"><expr pos:start="35:41" pos:end="35:51"><operator pos:start="35:41" pos:end="35:41">&amp;</operator><name pos:start="35:42" pos:end="35:51"><name pos:start="35:42" pos:end="35:42">p</name><operator pos:start="35:43" pos:end="35:44">-&gt;</operator><name pos:start="35:45" pos:end="35:51">avframe</name></name></expr></argument>)</argument_list></call><operator pos:start="35:53" pos:end="35:53">)</operator> <operator pos:start="35:55" pos:end="35:55">&lt;</operator> <literal type="number" pos:start="35:57" pos:end="35:57">0</literal></expr>)</condition> <block pos:start="35:60" pos:end="244:49">{<block_content pos:start="37:9" pos:end="244:49">

        <expr_stmt pos:start="37:9" pos:end="37:61"><expr pos:start="37:9" pos:end="37:60"><call pos:start="37:9" pos:end="37:60"><name pos:start="37:9" pos:end="37:14">av_log</name><argument_list pos:start="37:15" pos:end="37:60">(<argument pos:start="37:16" pos:end="37:20"><expr pos:start="37:16" pos:end="37:20"><name pos:start="37:16" pos:end="37:20">avctx</name></expr></argument>, <argument pos:start="37:23" pos:end="37:34"><expr pos:start="37:23" pos:end="37:34"><name pos:start="37:23" pos:end="37:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="37:37" pos:end="37:59"><expr pos:start="37:37" pos:end="37:59"><literal type="string" pos:start="37:37" pos:end="37:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:19">return <expr pos:start="39:16" pos:end="39:18"><name pos:start="39:16" pos:end="39:18">ret</name></expr>;</return>


    <expr_stmt pos:start="42:5" pos:end="42:42"><expr pos:start="42:5" pos:end="42:41"><name pos:start="42:5" pos:end="42:11">buf_out</name> <operator pos:start="42:13" pos:end="42:13">=</operator> <operator pos:start="42:15" pos:end="42:15">(</operator><name pos:start="42:16" pos:end="42:20">float</name> <operator pos:start="42:22" pos:end="42:22">*</operator><operator pos:start="42:23" pos:end="42:23">)</operator><name pos:start="42:24" pos:end="42:41"><name pos:start="42:24" pos:end="42:24">p</name><operator pos:start="42:25" pos:end="42:26">-&gt;</operator><name pos:start="42:27" pos:end="42:33">avframe</name><operator pos:start="42:34" pos:end="42:34">.</operator><name pos:start="42:35" pos:end="42:38">data</name><index pos:start="42:39" pos:end="42:41">[<expr pos:start="42:40" pos:end="42:40"><literal type="number" pos:start="42:40" pos:end="42:40">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="46:5" pos:end="46:59"><expr pos:start="46:5" pos:end="46:58"><name pos:start="46:5" pos:end="46:21"><name pos:start="46:5" pos:end="46:5">p</name><operator pos:start="46:6" pos:end="46:7">-&gt;</operator><name pos:start="46:8" pos:end="46:21">cur_frame_mode</name></name> <operator pos:start="46:23" pos:end="46:23">=</operator> <call pos:start="46:25" pos:end="46:58"><name pos:start="46:25" pos:end="46:40">unpack_bitstream</name><argument_list pos:start="46:41" pos:end="46:58">(<argument pos:start="46:42" pos:end="46:42"><expr pos:start="46:42" pos:end="46:42"><name pos:start="46:42" pos:end="46:42">p</name></expr></argument>, <argument pos:start="46:45" pos:end="46:47"><expr pos:start="46:45" pos:end="46:47"><name pos:start="46:45" pos:end="46:47">buf</name></expr></argument>, <argument pos:start="46:50" pos:end="46:57"><expr pos:start="46:50" pos:end="46:57"><name pos:start="46:50" pos:end="46:57">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="48:5" pos:end="244:49"><if pos:start="48:5" pos:end="244:49">if <condition pos:start="48:8" pos:end="48:38">(<expr pos:start="48:9" pos:end="48:37"><name pos:start="48:9" pos:end="48:25"><name pos:start="48:9" pos:end="48:9">p</name><operator pos:start="48:10" pos:end="48:11">-&gt;</operator><name pos:start="48:12" pos:end="48:25">cur_frame_mode</name></name> <operator pos:start="48:27" pos:end="48:28">==</operator> <name pos:start="48:30" pos:end="48:37">MODE_DTX</name></expr>)</condition> <block pos:start="48:40" pos:end="244:49">{<block_content pos:start="50:9" pos:end="244:49">

        <expr_stmt pos:start="50:9" pos:end="50:53"><expr pos:start="50:9" pos:end="50:52"><call pos:start="50:9" pos:end="50:52"><name pos:start="50:9" pos:end="50:30">av_log_missing_feature</name><argument_list pos:start="50:31" pos:end="50:52">(<argument pos:start="50:32" pos:end="50:36"><expr pos:start="50:32" pos:end="50:36"><name pos:start="50:32" pos:end="50:36">avctx</name></expr></argument>, <argument pos:start="50:39" pos:end="50:48"><expr pos:start="50:39" pos:end="50:48"><literal type="string" pos:start="50:39" pos:end="50:48">"dtx mode"</literal></expr></argument>, <argument pos:start="50:51" pos:end="50:51"><expr pos:start="50:51" pos:end="50:51"><literal type="number" pos:start="50:51" pos:end="50:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="52:9" pos:end="52:18">return <expr pos:start="52:16" pos:end="52:17"><operator pos:start="52:16" pos:end="52:16">-</operator><literal type="number" pos:start="52:17" pos:end="52:17">1</literal></expr>;</return>




    <if_stmt pos:start="57:5" pos:end="63:21"><if pos:start="57:5" pos:end="61:5">if <condition pos:start="57:8" pos:end="57:39">(<expr pos:start="57:9" pos:end="57:38"><name pos:start="57:9" pos:end="57:25"><name pos:start="57:9" pos:end="57:9">p</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:25">cur_frame_mode</name></name> <operator pos:start="57:27" pos:end="57:28">==</operator> <name pos:start="57:30" pos:end="57:38">MODE_12k2</name></expr>)</condition> <block pos:start="57:41" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:21">

        <expr_stmt pos:start="59:9" pos:end="59:21"><expr pos:start="59:9" pos:end="59:20"><call pos:start="59:9" pos:end="59:20"><name pos:start="59:9" pos:end="59:17">lsf2lsp_5</name><argument_list pos:start="59:18" pos:end="59:20">(<argument pos:start="59:19" pos:end="59:19"><expr pos:start="59:19" pos:end="59:19"><name pos:start="59:19" pos:end="59:19">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="61:7" pos:end="63:21">else<block type="pseudo" pos:start="63:9" pos:end="63:21"><block_content pos:start="63:9" pos:end="63:21">

        <expr_stmt pos:start="63:9" pos:end="63:21"><expr pos:start="63:9" pos:end="63:20"><call pos:start="63:9" pos:end="63:20"><name pos:start="63:9" pos:end="63:17">lsf2lsp_3</name><argument_list pos:start="63:18" pos:end="63:20">(<argument pos:start="63:19" pos:end="63:19"><expr pos:start="63:19" pos:end="63:19"><name pos:start="63:19" pos:end="63:19">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <for pos:start="67:5" pos:end="69:51">for <control pos:start="67:9" pos:end="67:27">(<init pos:start="67:10" pos:end="67:15"><expr pos:start="67:10" pos:end="67:14"><name pos:start="67:10" pos:end="67:10">i</name> <operator pos:start="67:12" pos:end="67:12">=</operator> <literal type="number" pos:start="67:14" pos:end="67:14">0</literal></expr>;</init> <condition pos:start="67:17" pos:end="67:22"><expr pos:start="67:17" pos:end="67:21"><name pos:start="67:17" pos:end="67:17">i</name> <operator pos:start="67:19" pos:end="67:19">&lt;</operator> <literal type="number" pos:start="67:21" pos:end="67:21">4</literal></expr>;</condition> <incr pos:start="67:24" pos:end="67:26"><expr pos:start="67:24" pos:end="67:26"><name pos:start="67:24" pos:end="67:24">i</name><operator pos:start="67:25" pos:end="67:26">++</operator></expr></incr>)</control><block type="pseudo" pos:start="69:9" pos:end="69:51"><block_content pos:start="69:9" pos:end="69:51">

        <expr_stmt pos:start="69:9" pos:end="69:51"><expr pos:start="69:9" pos:end="69:50"><call pos:start="69:9" pos:end="69:50"><name pos:start="69:9" pos:end="69:25">ff_acelp_lspd2lpc</name><argument_list pos:start="69:26" pos:end="69:50">(<argument pos:start="69:27" pos:end="69:35"><expr pos:start="69:27" pos:end="69:35"><name pos:start="69:27" pos:end="69:35"><name pos:start="69:27" pos:end="69:27">p</name><operator pos:start="69:28" pos:end="69:29">-&gt;</operator><name pos:start="69:30" pos:end="69:32">lsp</name><index pos:start="69:33" pos:end="69:35">[<expr pos:start="69:34" pos:end="69:34"><name pos:start="69:34" pos:end="69:34">i</name></expr>]</index></name></expr></argument>, <argument pos:start="69:38" pos:end="69:46"><expr pos:start="69:38" pos:end="69:46"><name pos:start="69:38" pos:end="69:46"><name pos:start="69:38" pos:end="69:38">p</name><operator pos:start="69:39" pos:end="69:40">-&gt;</operator><name pos:start="69:41" pos:end="69:43">lpc</name><index pos:start="69:44" pos:end="69:46">[<expr pos:start="69:45" pos:end="69:45"><name pos:start="69:45" pos:end="69:45">i</name></expr>]</index></name></expr></argument>, <argument pos:start="69:49" pos:end="69:49"><expr pos:start="69:49" pos:end="69:49"><literal type="number" pos:start="69:49" pos:end="69:49">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <for pos:start="73:5" pos:end="244:49">for <control pos:start="73:9" pos:end="73:48">(<init pos:start="73:10" pos:end="73:22"><expr pos:start="73:10" pos:end="73:21"><name pos:start="73:10" pos:end="73:17">subframe</name> <operator pos:start="73:19" pos:end="73:19">=</operator> <literal type="number" pos:start="73:21" pos:end="73:21">0</literal></expr>;</init> <condition pos:start="73:24" pos:end="73:36"><expr pos:start="73:24" pos:end="73:35"><name pos:start="73:24" pos:end="73:31">subframe</name> <operator pos:start="73:33" pos:end="73:33">&lt;</operator> <literal type="number" pos:start="73:35" pos:end="73:35">4</literal></expr>;</condition> <incr pos:start="73:38" pos:end="73:47"><expr pos:start="73:38" pos:end="73:47"><name pos:start="73:38" pos:end="73:45">subframe</name><operator pos:start="73:46" pos:end="73:47">++</operator></expr></incr>)</control> <block pos:start="73:50" pos:end="244:49">{<block_content pos:start="75:9" pos:end="244:49">

        <decl_stmt pos:start="75:9" pos:end="75:73"><decl pos:start="75:9" pos:end="75:72"><type pos:start="75:9" pos:end="75:29"><specifier pos:start="75:9" pos:end="75:13">const</specifier> <name pos:start="75:15" pos:end="75:27">AMRNBSubframe</name> <modifier pos:start="75:29" pos:end="75:29">*</modifier></type><name pos:start="75:30" pos:end="75:41">amr_subframe</name> <init pos:start="75:43" pos:end="75:72">= <expr pos:start="75:45" pos:end="75:72"><operator pos:start="75:45" pos:end="75:45">&amp;</operator><name pos:start="75:46" pos:end="75:72"><name pos:start="75:46" pos:end="75:46">p</name><operator pos:start="75:47" pos:end="75:48">-&gt;</operator><name pos:start="75:49" pos:end="75:53">frame</name><operator pos:start="75:54" pos:end="75:54">.</operator><name pos:start="75:55" pos:end="75:62">subframe</name><index pos:start="75:63" pos:end="75:72">[<expr pos:start="75:64" pos:end="75:71"><name pos:start="75:64" pos:end="75:71">subframe</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="79:9" pos:end="79:55"><expr pos:start="79:9" pos:end="79:54"><call pos:start="79:9" pos:end="79:54"><name pos:start="79:9" pos:end="79:27">decode_pitch_vector</name><argument_list pos:start="79:28" pos:end="79:54">(<argument pos:start="79:29" pos:end="79:29"><expr pos:start="79:29" pos:end="79:29"><name pos:start="79:29" pos:end="79:29">p</name></expr></argument>, <argument pos:start="79:32" pos:end="79:43"><expr pos:start="79:32" pos:end="79:43"><name pos:start="79:32" pos:end="79:43">amr_subframe</name></expr></argument>, <argument pos:start="79:46" pos:end="79:53"><expr pos:start="79:46" pos:end="79:53"><name pos:start="79:46" pos:end="79:53">subframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="83:9" pos:end="85:57"><expr pos:start="83:9" pos:end="85:56"><call pos:start="83:9" pos:end="85:56"><name pos:start="83:9" pos:end="83:27">decode_fixed_sparse</name><argument_list pos:start="83:28" pos:end="85:56">(<argument pos:start="83:29" pos:end="83:41"><expr pos:start="83:29" pos:end="83:41"><operator pos:start="83:29" pos:end="83:29">&amp;</operator><name pos:start="83:30" pos:end="83:41">fixed_sparse</name></expr></argument>, <argument pos:start="83:44" pos:end="83:63"><expr pos:start="83:44" pos:end="83:63"><name pos:start="83:44" pos:end="83:63"><name pos:start="83:44" pos:end="83:55">amr_subframe</name><operator pos:start="83:56" pos:end="83:57">-&gt;</operator><name pos:start="83:58" pos:end="83:63">pulses</name></name></expr></argument>,

                            <argument pos:start="85:29" pos:end="85:45"><expr pos:start="85:29" pos:end="85:45"><name pos:start="85:29" pos:end="85:45"><name pos:start="85:29" pos:end="85:29">p</name><operator pos:start="85:30" pos:end="85:31">-&gt;</operator><name pos:start="85:32" pos:end="85:45">cur_frame_mode</name></name></expr></argument>, <argument pos:start="85:48" pos:end="85:55"><expr pos:start="85:48" pos:end="85:55"><name pos:start="85:48" pos:end="85:55">subframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="line" pos:start="89:9" pos:end="89:69">// The fixed gain (section 6.1.3) depends on the fixed vector</comment>

        <comment type="line" pos:start="91:9" pos:end="91:65">// (section 6.1.2), but the fixed vector calculation uses</comment>

        <comment type="line" pos:start="93:9" pos:end="93:75">// pitch sharpening based on the on the pitch gain (section 6.1.3).</comment>

        <comment type="line" pos:start="95:9" pos:end="95:77">// So the correct order is: pitch gain, pitch sharpening, fixed gain.</comment>

        <expr_stmt pos:start="97:9" pos:end="99:41"><expr pos:start="97:9" pos:end="99:40"><call pos:start="97:9" pos:end="99:40"><name pos:start="97:9" pos:end="97:20">decode_gains</name><argument_list pos:start="97:21" pos:end="99:40">(<argument pos:start="97:22" pos:end="97:22"><expr pos:start="97:22" pos:end="97:22"><name pos:start="97:22" pos:end="97:22">p</name></expr></argument>, <argument pos:start="97:25" pos:end="97:36"><expr pos:start="97:25" pos:end="97:36"><name pos:start="97:25" pos:end="97:36">amr_subframe</name></expr></argument>, <argument pos:start="97:39" pos:end="97:55"><expr pos:start="97:39" pos:end="97:55"><name pos:start="97:39" pos:end="97:55"><name pos:start="97:39" pos:end="97:39">p</name><operator pos:start="97:40" pos:end="97:41">-&gt;</operator><name pos:start="97:42" pos:end="97:55">cur_frame_mode</name></name></expr></argument>, <argument pos:start="97:58" pos:end="97:65"><expr pos:start="97:58" pos:end="97:65"><name pos:start="97:58" pos:end="97:65">subframe</name></expr></argument>,

                     <argument pos:start="99:22" pos:end="99:39"><expr pos:start="99:22" pos:end="99:39"><operator pos:start="99:22" pos:end="99:22">&amp;</operator><name pos:start="99:23" pos:end="99:39">fixed_gain_factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="103:9" pos:end="103:72"><expr pos:start="103:9" pos:end="103:71"><call pos:start="103:9" pos:end="103:71"><name pos:start="103:9" pos:end="103:24">pitch_sharpening</name><argument_list pos:start="103:25" pos:end="103:71">(<argument pos:start="103:26" pos:end="103:26"><expr pos:start="103:26" pos:end="103:26"><name pos:start="103:26" pos:end="103:26">p</name></expr></argument>, <argument pos:start="103:29" pos:end="103:36"><expr pos:start="103:29" pos:end="103:36"><name pos:start="103:29" pos:end="103:36">subframe</name></expr></argument>, <argument pos:start="103:39" pos:end="103:55"><expr pos:start="103:39" pos:end="103:55"><name pos:start="103:39" pos:end="103:55"><name pos:start="103:39" pos:end="103:39">p</name><operator pos:start="103:40" pos:end="103:41">-&gt;</operator><name pos:start="103:42" pos:end="103:55">cur_frame_mode</name></name></expr></argument>, <argument pos:start="103:58" pos:end="103:70"><expr pos:start="103:58" pos:end="103:70"><operator pos:start="103:58" pos:end="103:58">&amp;</operator><name pos:start="103:59" pos:end="103:70">fixed_sparse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







        <expr_stmt pos:start="111:9" pos:end="113:47"><expr pos:start="111:9" pos:end="113:46"><call pos:start="111:9" pos:end="113:46"><name pos:start="111:9" pos:end="111:27">ff_set_fixed_vector</name><argument_list pos:start="111:28" pos:end="113:46">(<argument pos:start="111:29" pos:end="111:43"><expr pos:start="111:29" pos:end="111:43"><name pos:start="111:29" pos:end="111:43"><name pos:start="111:29" pos:end="111:29">p</name><operator pos:start="111:30" pos:end="111:31">-&gt;</operator><name pos:start="111:32" pos:end="111:43">fixed_vector</name></name></expr></argument>, <argument pos:start="111:46" pos:end="111:58"><expr pos:start="111:46" pos:end="111:58"><operator pos:start="111:46" pos:end="111:46">&amp;</operator><name pos:start="111:47" pos:end="111:58">fixed_sparse</name></expr></argument>, <argument pos:start="111:61" pos:end="111:63"><expr pos:start="111:61" pos:end="111:63"><literal type="number" pos:start="111:61" pos:end="111:63">1.0</literal></expr></argument>,

                            <argument pos:start="113:29" pos:end="113:45"><expr pos:start="113:29" pos:end="113:45"><name pos:start="113:29" pos:end="113:45">AMR_SUBFRAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="117:9" pos:end="127:72"><expr pos:start="117:9" pos:end="127:71"><name pos:start="117:9" pos:end="117:24"><name pos:start="117:9" pos:end="117:9">p</name><operator pos:start="117:10" pos:end="117:11">-&gt;</operator><name pos:start="117:12" pos:end="117:21">fixed_gain</name><index pos:start="117:22" pos:end="117:24">[<expr pos:start="117:23" pos:end="117:23"><literal type="number" pos:start="117:23" pos:end="117:23">4</literal></expr>]</index></name> <operator pos:start="117:26" pos:end="117:26">=</operator>

            <call pos:start="119:13" pos:end="127:71"><name pos:start="119:13" pos:end="119:33">ff_amr_set_fixed_gain</name><argument_list pos:start="119:34" pos:end="127:71">(<argument pos:start="119:35" pos:end="119:51"><expr pos:start="119:35" pos:end="119:51"><name pos:start="119:35" pos:end="119:51">fixed_gain_factor</name></expr></argument>,

                       <argument pos:start="121:24" pos:end="123:75"><expr pos:start="121:24" pos:end="123:75"><call pos:start="121:24" pos:end="123:57"><name pos:start="121:24" pos:end="121:38">ff_dot_productf</name><argument_list pos:start="121:39" pos:end="123:57">(<argument pos:start="121:40" pos:end="121:54"><expr pos:start="121:40" pos:end="121:54"><name pos:start="121:40" pos:end="121:54"><name pos:start="121:40" pos:end="121:40">p</name><operator pos:start="121:41" pos:end="121:42">-&gt;</operator><name pos:start="121:43" pos:end="121:54">fixed_vector</name></name></expr></argument>, <argument pos:start="121:57" pos:end="121:71"><expr pos:start="121:57" pos:end="121:71"><name pos:start="121:57" pos:end="121:71"><name pos:start="121:57" pos:end="121:57">p</name><operator pos:start="121:58" pos:end="121:59">-&gt;</operator><name pos:start="121:60" pos:end="121:71">fixed_vector</name></name></expr></argument>,

                                       <argument pos:start="123:40" pos:end="123:56"><expr pos:start="123:40" pos:end="123:56"><name pos:start="123:40" pos:end="123:56">AMR_SUBFRAME_SIZE</name></expr></argument>)</argument_list></call><operator pos:start="123:58" pos:end="123:58">/</operator><name pos:start="123:59" pos:end="123:75">AMR_SUBFRAME_SIZE</name></expr></argument>,

                       <argument pos:start="125:24" pos:end="125:42"><expr pos:start="125:24" pos:end="125:42"><name pos:start="125:24" pos:end="125:42"><name pos:start="125:24" pos:end="125:24">p</name><operator pos:start="125:25" pos:end="125:26">-&gt;</operator><name pos:start="125:27" pos:end="125:42">prediction_error</name></name></expr></argument>,

                       <argument pos:start="127:24" pos:end="127:53"><expr pos:start="127:24" pos:end="127:53"><name pos:start="127:24" pos:end="127:53"><name pos:start="127:24" pos:end="127:34">energy_mean</name><index pos:start="127:35" pos:end="127:53">[<expr pos:start="127:36" pos:end="127:52"><name pos:start="127:36" pos:end="127:52"><name pos:start="127:36" pos:end="127:36">p</name><operator pos:start="127:37" pos:end="127:38">-&gt;</operator><name pos:start="127:39" pos:end="127:52">cur_frame_mode</name></name></expr>]</index></name></expr></argument>, <argument pos:start="127:56" pos:end="127:70"><expr pos:start="127:56" pos:end="127:70"><name pos:start="127:56" pos:end="127:70">energy_pred_fac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="line" pos:start="131:9" pos:end="131:76">// The excitation feedback is calculated without any processing such</comment>

        <comment type="line" pos:start="133:9" pos:end="133:78">// as fixed gain smoothing. This isn't mentioned in the specification.</comment>

        <for pos:start="135:9" pos:end="137:49">for <control pos:start="135:13" pos:end="135:47">(<init pos:start="135:14" pos:end="135:19"><expr pos:start="135:14" pos:end="135:18"><name pos:start="135:14" pos:end="135:14">i</name> <operator pos:start="135:16" pos:end="135:16">=</operator> <literal type="number" pos:start="135:18" pos:end="135:18">0</literal></expr>;</init> <condition pos:start="135:21" pos:end="135:42"><expr pos:start="135:21" pos:end="135:41"><name pos:start="135:21" pos:end="135:21">i</name> <operator pos:start="135:23" pos:end="135:23">&lt;</operator> <name pos:start="135:25" pos:end="135:41">AMR_SUBFRAME_SIZE</name></expr>;</condition> <incr pos:start="135:44" pos:end="135:46"><expr pos:start="135:44" pos:end="135:46"><name pos:start="135:44" pos:end="135:44">i</name><operator pos:start="135:45" pos:end="135:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="137:13" pos:end="137:49"><block_content pos:start="137:13" pos:end="137:49">

            <expr_stmt pos:start="137:13" pos:end="137:49"><expr pos:start="137:13" pos:end="137:48"><name pos:start="137:13" pos:end="137:28"><name pos:start="137:13" pos:end="137:13">p</name><operator pos:start="137:14" pos:end="137:15">-&gt;</operator><name pos:start="137:16" pos:end="137:25">excitation</name><index pos:start="137:26" pos:end="137:28">[<expr pos:start="137:27" pos:end="137:27"><name pos:start="137:27" pos:end="137:27">i</name></expr>]</index></name> <operator pos:start="137:30" pos:end="137:31">*=</operator> <name pos:start="137:33" pos:end="137:48"><name pos:start="137:33" pos:end="137:33">p</name><operator pos:start="137:34" pos:end="137:35">-&gt;</operator><name pos:start="137:36" pos:end="137:45">pitch_gain</name><index pos:start="137:46" pos:end="137:48">[<expr pos:start="137:47" pos:end="137:47"><literal type="number" pos:start="137:47" pos:end="137:47">4</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt pos:start="139:9" pos:end="141:47"><expr pos:start="139:9" pos:end="141:46"><call pos:start="139:9" pos:end="141:46"><name pos:start="139:9" pos:end="139:27">ff_set_fixed_vector</name><argument_list pos:start="139:28" pos:end="141:46">(<argument pos:start="139:29" pos:end="139:41"><expr pos:start="139:29" pos:end="139:41"><name pos:start="139:29" pos:end="139:41"><name pos:start="139:29" pos:end="139:29">p</name><operator pos:start="139:30" pos:end="139:31">-&gt;</operator><name pos:start="139:32" pos:end="139:41">excitation</name></name></expr></argument>, <argument pos:start="139:44" pos:end="139:56"><expr pos:start="139:44" pos:end="139:56"><operator pos:start="139:44" pos:end="139:44">&amp;</operator><name pos:start="139:45" pos:end="139:56">fixed_sparse</name></expr></argument>, <argument pos:start="139:59" pos:end="139:74"><expr pos:start="139:59" pos:end="139:74"><name pos:start="139:59" pos:end="139:74"><name pos:start="139:59" pos:end="139:59">p</name><operator pos:start="139:60" pos:end="139:61">-&gt;</operator><name pos:start="139:62" pos:end="139:71">fixed_gain</name><index pos:start="139:72" pos:end="139:74">[<expr pos:start="139:73" pos:end="139:73"><literal type="number" pos:start="139:73" pos:end="139:73">4</literal></expr>]</index></name></expr></argument>,

                            <argument pos:start="141:29" pos:end="141:45"><expr pos:start="141:29" pos:end="141:45"><name pos:start="141:29" pos:end="141:45">AMR_SUBFRAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="line" pos:start="145:9" pos:end="145:76">// In the ref decoder, excitation is stored with no fractional bits.</comment>

        <comment type="line" pos:start="147:9" pos:end="147:73">// This step prevents buzz in silent periods. The ref encoder can</comment>

        <comment type="line" pos:start="149:9" pos:end="149:71">// emit long sequences with pitch factor greater than one. This</comment>

        <comment type="line" pos:start="151:9" pos:end="151:73">// creates unwanted feedback if the excitation vector is nonzero.</comment>

        <comment type="line" pos:start="153:9" pos:end="153:61">// (e.g. test sequence T19_795.COD in 3GPP TS 26.074)</comment>

        <for pos:start="155:9" pos:end="157:56">for <control pos:start="155:13" pos:end="155:47">(<init pos:start="155:14" pos:end="155:19"><expr pos:start="155:14" pos:end="155:18"><name pos:start="155:14" pos:end="155:14">i</name> <operator pos:start="155:16" pos:end="155:16">=</operator> <literal type="number" pos:start="155:18" pos:end="155:18">0</literal></expr>;</init> <condition pos:start="155:21" pos:end="155:42"><expr pos:start="155:21" pos:end="155:41"><name pos:start="155:21" pos:end="155:21">i</name> <operator pos:start="155:23" pos:end="155:23">&lt;</operator> <name pos:start="155:25" pos:end="155:41">AMR_SUBFRAME_SIZE</name></expr>;</condition> <incr pos:start="155:44" pos:end="155:46"><expr pos:start="155:44" pos:end="155:46"><name pos:start="155:44" pos:end="155:44">i</name><operator pos:start="155:45" pos:end="155:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="157:13" pos:end="157:56"><block_content pos:start="157:13" pos:end="157:56">

            <expr_stmt pos:start="157:13" pos:end="157:56"><expr pos:start="157:13" pos:end="157:55"><name pos:start="157:13" pos:end="157:28"><name pos:start="157:13" pos:end="157:13">p</name><operator pos:start="157:14" pos:end="157:15">-&gt;</operator><name pos:start="157:16" pos:end="157:25">excitation</name><index pos:start="157:26" pos:end="157:28">[<expr pos:start="157:27" pos:end="157:27"><name pos:start="157:27" pos:end="157:27">i</name></expr>]</index></name> <operator pos:start="157:30" pos:end="157:30">=</operator> <call pos:start="157:32" pos:end="157:55"><name pos:start="157:32" pos:end="157:37">truncf</name><argument_list pos:start="157:38" pos:end="157:55">(<argument pos:start="157:39" pos:end="157:54"><expr pos:start="157:39" pos:end="157:54"><name pos:start="157:39" pos:end="157:54"><name pos:start="157:39" pos:end="157:39">p</name><operator pos:start="157:40" pos:end="157:41">-&gt;</operator><name pos:start="157:42" pos:end="157:51">excitation</name><index pos:start="157:52" pos:end="157:54">[<expr pos:start="157:53" pos:end="157:53"><name pos:start="157:53" pos:end="157:53">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



        <comment type="line" pos:start="161:9" pos:end="161:29">// Smooth fixed gain.</comment>

        <comment type="line" pos:start="163:9" pos:end="163:75">// The specification is ambiguous, but in the reference source, the</comment>

        <comment type="line" pos:start="165:9" pos:end="165:74">// smoothed value is NOT fed back into later fixed gain smoothing.</comment>

        <expr_stmt pos:start="167:9" pos:end="169:76"><expr pos:start="167:9" pos:end="169:75"><name pos:start="167:9" pos:end="167:24">synth_fixed_gain</name> <operator pos:start="167:26" pos:end="167:26">=</operator> <call pos:start="167:28" pos:end="169:75"><name pos:start="167:28" pos:end="167:44">fixed_gain_smooth</name><argument_list pos:start="167:45" pos:end="169:75">(<argument pos:start="167:46" pos:end="167:46"><expr pos:start="167:46" pos:end="167:46"><name pos:start="167:46" pos:end="167:46">p</name></expr></argument>, <argument pos:start="167:49" pos:end="167:66"><expr pos:start="167:49" pos:end="167:66"><name pos:start="167:49" pos:end="167:66"><name pos:start="167:49" pos:end="167:49">p</name><operator pos:start="167:50" pos:end="167:51">-&gt;</operator><name pos:start="167:52" pos:end="167:56">lsf_q</name><index pos:start="167:57" pos:end="167:66">[<expr pos:start="167:58" pos:end="167:65"><name pos:start="167:58" pos:end="167:65">subframe</name></expr>]</index></name></expr></argument>,

                                             <argument pos:start="169:46" pos:end="169:55"><expr pos:start="169:46" pos:end="169:55"><name pos:start="169:46" pos:end="169:55"><name pos:start="169:46" pos:end="169:46">p</name><operator pos:start="169:47" pos:end="169:48">-&gt;</operator><name pos:start="169:49" pos:end="169:55">lsf_avg</name></name></expr></argument>, <argument pos:start="169:58" pos:end="169:74"><expr pos:start="169:58" pos:end="169:74"><name pos:start="169:58" pos:end="169:74"><name pos:start="169:58" pos:end="169:58">p</name><operator pos:start="169:59" pos:end="169:60">-&gt;</operator><name pos:start="169:61" pos:end="169:74">cur_frame_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="173:9" pos:end="175:77"><expr pos:start="173:9" pos:end="175:76"><name pos:start="173:9" pos:end="173:26">synth_fixed_vector</name> <operator pos:start="173:28" pos:end="173:28">=</operator> <call pos:start="173:30" pos:end="175:76"><name pos:start="173:30" pos:end="173:44">anti_sparseness</name><argument_list pos:start="173:45" pos:end="175:76">(<argument pos:start="173:46" pos:end="173:46"><expr pos:start="173:46" pos:end="173:46"><name pos:start="173:46" pos:end="173:46">p</name></expr></argument>, <argument pos:start="173:49" pos:end="173:61"><expr pos:start="173:49" pos:end="173:61"><operator pos:start="173:49" pos:end="173:49">&amp;</operator><name pos:start="173:50" pos:end="173:61">fixed_sparse</name></expr></argument>, <argument pos:start="173:64" pos:end="173:78"><expr pos:start="173:64" pos:end="173:78"><name pos:start="173:64" pos:end="173:78"><name pos:start="173:64" pos:end="173:64">p</name><operator pos:start="173:65" pos:end="173:66">-&gt;</operator><name pos:start="173:67" pos:end="173:78">fixed_vector</name></name></expr></argument>,

                                             <argument pos:start="175:46" pos:end="175:61"><expr pos:start="175:46" pos:end="175:61"><name pos:start="175:46" pos:end="175:61">synth_fixed_gain</name></expr></argument>, <argument pos:start="175:64" pos:end="175:75"><expr pos:start="175:64" pos:end="175:75"><name pos:start="175:64" pos:end="175:75">spare_vector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="179:9" pos:end="191:78"><if pos:start="179:9" pos:end="191:78">if <condition pos:start="179:12" pos:end="181:78">(<expr pos:start="179:13" pos:end="181:77"><call pos:start="179:13" pos:end="181:77"><name pos:start="179:13" pos:end="179:21">synthesis</name><argument_list pos:start="179:22" pos:end="181:77">(<argument pos:start="179:23" pos:end="179:23"><expr pos:start="179:23" pos:end="179:23"><name pos:start="179:23" pos:end="179:23">p</name></expr></argument>, <argument pos:start="179:26" pos:end="179:41"><expr pos:start="179:26" pos:end="179:41"><name pos:start="179:26" pos:end="179:41"><name pos:start="179:26" pos:end="179:26">p</name><operator pos:start="179:27" pos:end="179:28">-&gt;</operator><name pos:start="179:29" pos:end="179:31">lpc</name><index pos:start="179:32" pos:end="179:41">[<expr pos:start="179:33" pos:end="179:40"><name pos:start="179:33" pos:end="179:40">subframe</name></expr>]</index></name></expr></argument>, <argument pos:start="179:44" pos:end="179:59"><expr pos:start="179:44" pos:end="179:59"><name pos:start="179:44" pos:end="179:59">synth_fixed_gain</name></expr></argument>,

                      <argument pos:start="181:23" pos:end="181:40"><expr pos:start="181:23" pos:end="181:40"><name pos:start="181:23" pos:end="181:40">synth_fixed_vector</name></expr></argument>, <argument pos:start="181:43" pos:end="181:73"><expr pos:start="181:43" pos:end="181:73"><operator pos:start="181:43" pos:end="181:43">&amp;</operator><name pos:start="181:44" pos:end="181:73"><name pos:start="181:44" pos:end="181:44">p</name><operator pos:start="181:45" pos:end="181:46">-&gt;</operator><name pos:start="181:47" pos:end="181:56">samples_in</name><index pos:start="181:57" pos:end="181:73">[<expr pos:start="181:58" pos:end="181:72"><name pos:start="181:58" pos:end="181:72">LP_FILTER_ORDER</name></expr>]</index></name></expr></argument>, <argument pos:start="181:76" pos:end="181:76"><expr pos:start="181:76" pos:end="181:76"><literal type="number" pos:start="181:76" pos:end="181:76">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="189:13" pos:end="191:78"><block_content pos:start="189:13" pos:end="191:78">

            <comment type="line" pos:start="183:13" pos:end="183:77">// overflow detected -&gt; rerun synthesis scaling pitch vector down</comment>

            <comment type="line" pos:start="185:13" pos:end="185:76">// by a factor of 4, skipping pitch vector contribution emphasis</comment>

            <comment type="line" pos:start="187:13" pos:end="187:40">// and adaptive gain control</comment>

            <expr_stmt pos:start="189:13" pos:end="191:78"><expr pos:start="189:13" pos:end="191:77"><call pos:start="189:13" pos:end="191:77"><name pos:start="189:13" pos:end="189:21">synthesis</name><argument_list pos:start="189:22" pos:end="191:77">(<argument pos:start="189:23" pos:end="189:23"><expr pos:start="189:23" pos:end="189:23"><name pos:start="189:23" pos:end="189:23">p</name></expr></argument>, <argument pos:start="189:26" pos:end="189:41"><expr pos:start="189:26" pos:end="189:41"><name pos:start="189:26" pos:end="189:41"><name pos:start="189:26" pos:end="189:26">p</name><operator pos:start="189:27" pos:end="189:28">-&gt;</operator><name pos:start="189:29" pos:end="189:31">lpc</name><index pos:start="189:32" pos:end="189:41">[<expr pos:start="189:33" pos:end="189:40"><name pos:start="189:33" pos:end="189:40">subframe</name></expr>]</index></name></expr></argument>, <argument pos:start="189:44" pos:end="189:59"><expr pos:start="189:44" pos:end="189:59"><name pos:start="189:44" pos:end="189:59">synth_fixed_gain</name></expr></argument>,

                      <argument pos:start="191:23" pos:end="191:40"><expr pos:start="191:23" pos:end="191:40"><name pos:start="191:23" pos:end="191:40">synth_fixed_vector</name></expr></argument>, <argument pos:start="191:43" pos:end="191:73"><expr pos:start="191:43" pos:end="191:73"><operator pos:start="191:43" pos:end="191:43">&amp;</operator><name pos:start="191:44" pos:end="191:73"><name pos:start="191:44" pos:end="191:44">p</name><operator pos:start="191:45" pos:end="191:46">-&gt;</operator><name pos:start="191:47" pos:end="191:56">samples_in</name><index pos:start="191:57" pos:end="191:73">[<expr pos:start="191:58" pos:end="191:72"><name pos:start="191:58" pos:end="191:72">LP_FILTER_ORDER</name></expr>]</index></name></expr></argument>, <argument pos:start="191:76" pos:end="191:76"><expr pos:start="191:76" pos:end="191:76"><literal type="number" pos:start="191:76" pos:end="191:76">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="195:9" pos:end="195:80"><expr pos:start="195:9" pos:end="195:79"><call pos:start="195:9" pos:end="195:79"><name pos:start="195:9" pos:end="195:18">postfilter</name><argument_list pos:start="195:19" pos:end="195:79">(<argument pos:start="195:20" pos:end="195:20"><expr pos:start="195:20" pos:end="195:20"><name pos:start="195:20" pos:end="195:20">p</name></expr></argument>, <argument pos:start="195:23" pos:end="195:38"><expr pos:start="195:23" pos:end="195:38"><name pos:start="195:23" pos:end="195:38"><name pos:start="195:23" pos:end="195:23">p</name><operator pos:start="195:24" pos:end="195:25">-&gt;</operator><name pos:start="195:26" pos:end="195:28">lpc</name><index pos:start="195:29" pos:end="195:38">[<expr pos:start="195:30" pos:end="195:37"><name pos:start="195:30" pos:end="195:37">subframe</name></expr>]</index></name></expr></argument>, <argument pos:start="195:41" pos:end="195:78"><expr pos:start="195:41" pos:end="195:78"><name pos:start="195:41" pos:end="195:47">buf_out</name> <operator pos:start="195:49" pos:end="195:49">+</operator> <name pos:start="195:51" pos:end="195:58">subframe</name> <operator pos:start="195:60" pos:end="195:60">*</operator> <name pos:start="195:62" pos:end="195:78">AMR_SUBFRAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="line" pos:start="199:9" pos:end="199:37">// update buffers and history</comment>

        <expr_stmt pos:start="201:9" pos:end="201:81"><expr pos:start="201:9" pos:end="201:80"><call pos:start="201:9" pos:end="201:80"><name pos:start="201:9" pos:end="201:29">ff_clear_fixed_vector</name><argument_list pos:start="201:30" pos:end="201:80">(<argument pos:start="201:31" pos:end="201:45"><expr pos:start="201:31" pos:end="201:45"><name pos:start="201:31" pos:end="201:45"><name pos:start="201:31" pos:end="201:31">p</name><operator pos:start="201:32" pos:end="201:33">-&gt;</operator><name pos:start="201:34" pos:end="201:45">fixed_vector</name></name></expr></argument>, <argument pos:start="201:48" pos:end="201:60"><expr pos:start="201:48" pos:end="201:60"><operator pos:start="201:48" pos:end="201:48">&amp;</operator><name pos:start="201:49" pos:end="201:60">fixed_sparse</name></expr></argument>, <argument pos:start="201:63" pos:end="201:79"><expr pos:start="201:63" pos:end="201:79"><name pos:start="201:63" pos:end="201:79">AMR_SUBFRAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="203:9" pos:end="203:24"><expr pos:start="203:9" pos:end="203:23"><call pos:start="203:9" pos:end="203:23"><name pos:start="203:9" pos:end="203:20">update_state</name><argument_list pos:start="203:21" pos:end="203:23">(<argument pos:start="203:22" pos:end="203:22"><expr pos:start="203:22" pos:end="203:22"><name pos:start="203:22" pos:end="203:22">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




    <expr_stmt pos:start="208:5" pos:end="214:79"><expr pos:start="208:5" pos:end="214:78"><call pos:start="208:5" pos:end="214:78"><name pos:start="208:5" pos:end="208:44">ff_acelp_apply_order_2_transfer_function</name><argument_list pos:start="208:45" pos:end="214:78">(<argument pos:start="208:46" pos:end="208:52"><expr pos:start="208:46" pos:end="208:52"><name pos:start="208:46" pos:end="208:52">buf_out</name></expr></argument>, <argument pos:start="208:55" pos:end="208:61"><expr pos:start="208:55" pos:end="208:61"><name pos:start="208:55" pos:end="208:61">buf_out</name></expr></argument>, <argument pos:start="208:64" pos:end="208:77"><expr pos:start="208:64" pos:end="208:77"><name pos:start="208:64" pos:end="208:77">highpass_zeros</name></expr></argument>,

                                             <argument pos:start="210:46" pos:end="210:59"><expr pos:start="210:46" pos:end="210:59"><name pos:start="210:46" pos:end="210:59">highpass_poles</name></expr></argument>,

                                             <argument pos:start="212:46" pos:end="212:77"><expr pos:start="212:46" pos:end="212:77"><name pos:start="212:46" pos:end="212:58">highpass_gain</name> <operator pos:start="212:60" pos:end="212:60">*</operator> <name pos:start="212:62" pos:end="212:77">AMR_SAMPLE_SCALE</name></expr></argument>,

                                             <argument pos:start="214:46" pos:end="214:61"><expr pos:start="214:46" pos:end="214:61"><name pos:start="214:46" pos:end="214:61"><name pos:start="214:46" pos:end="214:46">p</name><operator pos:start="214:47" pos:end="214:48">-&gt;</operator><name pos:start="214:49" pos:end="214:61">high_pass_mem</name></name></expr></argument>, <argument pos:start="214:64" pos:end="214:77"><expr pos:start="214:64" pos:end="214:77"><name pos:start="214:64" pos:end="214:77">AMR_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="218:5" pos:end="228:70">/* Update averaged lsf vector (used for fixed gain smoothing).

     *

     * Note that lsf_avg should not incorporate the current frame's LSFs

     * for fixed_gain_smooth.

     * The specification has an incorrect formula: the reference decoder uses

     * qbar(n-1) rather than qbar(n) in section 6.1(4) equation 71. */</comment>

    <expr_stmt pos:start="230:5" pos:end="232:57"><expr pos:start="230:5" pos:end="232:56"><call pos:start="230:5" pos:end="232:56"><name pos:start="230:5" pos:end="230:27">ff_weighted_vector_sumf</name><argument_list pos:start="230:28" pos:end="232:56">(<argument pos:start="230:29" pos:end="230:38"><expr pos:start="230:29" pos:end="230:38"><name pos:start="230:29" pos:end="230:38"><name pos:start="230:29" pos:end="230:29">p</name><operator pos:start="230:30" pos:end="230:31">-&gt;</operator><name pos:start="230:32" pos:end="230:38">lsf_avg</name></name></expr></argument>, <argument pos:start="230:41" pos:end="230:50"><expr pos:start="230:41" pos:end="230:50"><name pos:start="230:41" pos:end="230:50"><name pos:start="230:41" pos:end="230:41">p</name><operator pos:start="230:42" pos:end="230:43">-&gt;</operator><name pos:start="230:44" pos:end="230:50">lsf_avg</name></name></expr></argument>, <argument pos:start="230:53" pos:end="230:63"><expr pos:start="230:53" pos:end="230:63"><name pos:start="230:53" pos:end="230:63"><name pos:start="230:53" pos:end="230:53">p</name><operator pos:start="230:54" pos:end="230:55">-&gt;</operator><name pos:start="230:56" pos:end="230:60">lsf_q</name><index pos:start="230:61" pos:end="230:63">[<expr pos:start="230:62" pos:end="230:62"><literal type="number" pos:start="230:62" pos:end="230:62">3</literal></expr>]</index></name></expr></argument>,

                            <argument pos:start="232:29" pos:end="232:32"><expr pos:start="232:29" pos:end="232:32"><literal type="number" pos:start="232:29" pos:end="232:32">0.84</literal></expr></argument>, <argument pos:start="232:35" pos:end="232:38"><expr pos:start="232:35" pos:end="232:38"><literal type="number" pos:start="232:35" pos:end="232:38">0.16</literal></expr></argument>, <argument pos:start="232:41" pos:end="232:55"><expr pos:start="232:41" pos:end="232:55"><name pos:start="232:41" pos:end="232:55">LP_FILTER_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="236:5" pos:end="236:25"><expr pos:start="236:5" pos:end="236:24"><operator pos:start="236:5" pos:end="236:5">*</operator><name pos:start="236:6" pos:end="236:18">got_frame_ptr</name>   <operator pos:start="236:22" pos:end="236:22">=</operator> <literal type="number" pos:start="236:24" pos:end="236:24">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="238:5" pos:end="238:34"><expr pos:start="238:5" pos:end="238:33"><operator pos:start="238:5" pos:end="238:5">*</operator><operator pos:start="238:6" pos:end="238:6">(</operator><name pos:start="238:7" pos:end="238:13">AVFrame</name> <operator pos:start="238:15" pos:end="238:15">*</operator><operator pos:start="238:16" pos:end="238:16">)</operator><name pos:start="238:17" pos:end="238:20">data</name> <operator pos:start="238:22" pos:end="238:22">=</operator> <name pos:start="238:24" pos:end="238:33"><name pos:start="238:24" pos:end="238:24">p</name><operator pos:start="238:25" pos:end="238:26">-&gt;</operator><name pos:start="238:27" pos:end="238:33">avframe</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="242:5" pos:end="242:66">/* return the amount of bytes consumed if everything was OK */</comment>

    <return pos:start="244:5" pos:end="244:49">return <expr pos:start="244:12" pos:end="244:48"><name pos:start="244:12" pos:end="244:44"><name pos:start="244:12" pos:end="244:25">frame_sizes_nb</name><index pos:start="244:26" pos:end="244:44">[<expr pos:start="244:27" pos:end="244:43"><name pos:start="244:27" pos:end="244:43"><name pos:start="244:27" pos:end="244:27">p</name><operator pos:start="244:28" pos:end="244:29">-&gt;</operator><name pos:start="244:30" pos:end="244:43">cur_frame_mode</name></name></expr>]</index></name> <operator pos:start="244:46" pos:end="244:46">+</operator> <literal type="number" pos:start="244:48" pos:end="244:48">1</literal></expr>;</return></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function> <comment type="line" pos:start="244:51" pos:end="244:83">// +7 for rounding and +8 for TOC</comment>
</unit>
