<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24848.c" pos:tabs="8"><function pos:start="1:1" pos:end="121:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">faac_decode_frame</name><parameter_list pos:start="1:29" pos:end="5:56">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:50"><name pos:start="1:30" pos:end="1:43">AVCodecContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:39"><decl pos:start="3:30" pos:end="3:39"><type pos:start="3:30" pos:end="3:39"><name pos:start="3:30" pos:end="3:33">void</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:39">data</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:55"><decl pos:start="3:42" pos:end="3:55"><type pos:start="3:42" pos:end="3:55"><name pos:start="3:42" pos:end="3:44">int</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:55">data_size</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:41"><decl pos:start="5:30" pos:end="5:41"><type pos:start="5:30" pos:end="5:41"><name pos:start="5:30" pos:end="5:36">uint8_t</name> <modifier pos:start="5:38" pos:end="5:38">*</modifier></type><name pos:start="5:39" pos:end="5:41">buf</name></decl></parameter>, <parameter pos:start="5:44" pos:end="5:55"><decl pos:start="5:44" pos:end="5:55"><type pos:start="5:44" pos:end="5:55"><name pos:start="5:44" pos:end="5:46">int</name></type> <name pos:start="5:48" pos:end="5:55">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="121:1">{<block_content pos:start="9:5" pos:end="120:0">

    <decl_stmt pos:start="9:5" pos:end="12:0"><decl pos:start="9:5" pos:end="9:53"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">FAACContext</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:18">s</name> <init pos:start="9:20" pos:end="9:53">= <expr pos:start="9:22" pos:end="9:53"><operator pos:start="9:22" pos:end="9:22">(</operator><name pos:start="9:23" pos:end="9:33">FAACContext</name> <operator pos:start="9:35" pos:end="9:35">*</operator><operator pos:start="9:36" pos:end="9:36">)</operator> <name pos:start="9:38" pos:end="9:53"><name pos:start="9:38" pos:end="9:42">avctx</name><operator pos:start="9:43" pos:end="9:44">-&gt;</operator><name pos:start="9:45" pos:end="9:53">priv_data</name></name></expr></init></decl>;</decl_stmt>

<cpp:ifndef pos:start="11:1" pos:end="11:21">#<cpp:directive pos:start="11:2" pos:end="11:7">ifndef</cpp:directive> <name pos:start="11:9" pos:end="11:21">FAAD2_VERSION</name></cpp:ifndef>

    <decl_stmt pos:start="13:5" pos:end="13:32"><decl pos:start="13:5" pos:end="13:31"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:17">long</name></type> <name pos:start="13:19" pos:end="13:31">bytesconsumed</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:32"><decl pos:start="15:5" pos:end="15:31"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:9">short</name> <modifier pos:start="15:11" pos:end="15:11">*</modifier></type><name pos:start="15:12" pos:end="15:24">sample_buffer</name> <init pos:start="15:26" pos:end="15:31">= <expr pos:start="15:28" pos:end="15:31"><name pos:start="15:28" pos:end="15:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:12">unsigned</name> <name pos:start="17:14" pos:end="17:17">long</name></type> <name pos:start="17:19" pos:end="17:25">samples</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="22:0"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">out</name></decl>;</decl_stmt>

<cpp:else pos:start="21:1" pos:end="21:5">#<cpp:directive pos:start="21:2" pos:end="21:5">else</cpp:directive></cpp:else>

    <decl_stmt pos:start="23:5" pos:end="23:32"><decl pos:start="23:5" pos:end="23:31"><type pos:start="23:5" pos:end="23:20"><name pos:start="23:5" pos:end="23:20">faacDecFrameInfo</name></type> <name pos:start="23:22" pos:end="23:31">frame_info</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="28:0"><decl pos:start="25:5" pos:end="25:13"><type pos:start="25:5" pos:end="25:10"><name pos:start="25:5" pos:end="25:8">void</name> <modifier pos:start="25:10" pos:end="25:10">*</modifier></type><name pos:start="25:11" pos:end="25:13">out</name></decl>;</decl_stmt>

<cpp:endif pos:start="27:1" pos:end="27:6">#<cpp:directive pos:start="27:2" pos:end="27:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="29:5" pos:end="34:0"><if pos:start="29:5" pos:end="34:0">if<condition pos:start="29:7" pos:end="29:21">(<expr pos:start="29:8" pos:end="29:20"><name pos:start="29:8" pos:end="29:15">buf_size</name> <operator pos:start="29:17" pos:end="29:18">==</operator> <literal type="number" pos:start="29:20" pos:end="29:20">0</literal></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="34:0"><block_content pos:start="31:9" pos:end="34:0">

        <return pos:start="31:9" pos:end="34:0">return <expr pos:start="31:16" pos:end="31:16"><literal type="number" pos:start="31:16" pos:end="31:16">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:ifndef pos:start="33:1" pos:end="33:21">#<cpp:directive pos:start="33:2" pos:end="33:7">ifndef</cpp:directive> <name pos:start="33:9" pos:end="33:21">FAAD2_VERSION</name></cpp:ifndef>

    <expr_stmt pos:start="35:5" pos:end="43:37"><expr pos:start="35:5" pos:end="43:36"><name pos:start="35:5" pos:end="35:7">out</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="43:36"><name pos:start="35:11" pos:end="35:26"><name pos:start="35:11" pos:end="35:11">s</name><operator pos:start="35:12" pos:end="35:13">-&gt;</operator><name pos:start="35:14" pos:end="35:26">faacDecDecode</name></name><argument_list pos:start="35:27" pos:end="43:36">(<argument pos:start="35:28" pos:end="35:41"><expr pos:start="35:28" pos:end="35:41"><name pos:start="35:28" pos:end="35:41"><name pos:start="35:28" pos:end="35:28">s</name><operator pos:start="35:29" pos:end="35:30">-&gt;</operator><name pos:start="35:31" pos:end="35:41">faac_handle</name></name></expr></argument>,

                           <argument pos:start="37:28" pos:end="37:46"><expr pos:start="37:28" pos:end="37:46"><operator pos:start="37:28" pos:end="37:28">(</operator><name pos:start="37:29" pos:end="37:36">unsigned</name> <name pos:start="37:38" pos:end="37:41">char</name><operator pos:start="37:42" pos:end="37:42">*</operator><operator pos:start="37:43" pos:end="37:43">)</operator><name pos:start="37:44" pos:end="37:46">buf</name></expr></argument>,

                           <argument pos:start="39:28" pos:end="39:41"><expr pos:start="39:28" pos:end="39:41"><operator pos:start="39:28" pos:end="39:28">&amp;</operator><name pos:start="39:29" pos:end="39:41">bytesconsumed</name></expr></argument>,

                           <argument pos:start="41:28" pos:end="41:31"><expr pos:start="41:28" pos:end="41:31"><name pos:start="41:28" pos:end="41:31">data</name></expr></argument>,

                           <argument pos:start="43:28" pos:end="43:35"><expr pos:start="43:28" pos:end="43:35"><operator pos:start="43:28" pos:end="43:28">&amp;</operator><name pos:start="43:29" pos:end="43:35">samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:30"><expr pos:start="45:5" pos:end="45:29"><name pos:start="45:5" pos:end="45:11">samples</name> <operator pos:start="45:13" pos:end="45:14">*=</operator> <name pos:start="45:16" pos:end="45:29"><name pos:start="45:16" pos:end="45:16">s</name><operator pos:start="45:17" pos:end="45:18">-&gt;</operator><name pos:start="45:19" pos:end="45:29">sample_size</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="49:29"><if pos:start="47:5" pos:end="49:29">if <condition pos:start="47:8" pos:end="47:18">(<expr pos:start="47:9" pos:end="47:17"><name pos:start="47:9" pos:end="47:17">data_size</name></expr>)</condition><block type="pseudo" pos:start="49:9" pos:end="49:29"><block_content pos:start="49:9" pos:end="49:29">

        <expr_stmt pos:start="49:9" pos:end="49:29"><expr pos:start="49:9" pos:end="49:28"><operator pos:start="49:9" pos:end="49:9">*</operator><name pos:start="49:10" pos:end="49:18">data_size</name> <operator pos:start="49:20" pos:end="49:20">=</operator> <name pos:start="49:22" pos:end="49:28">samples</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="51:5" pos:end="56:0">return <expr pos:start="51:12" pos:end="53:39"><ternary pos:start="51:12" pos:end="53:39"><condition pos:start="51:12" pos:end="53:9"><expr pos:start="51:12" pos:end="51:42"><operator pos:start="51:12" pos:end="51:12">(</operator><name pos:start="51:13" pos:end="51:20">buf_size</name> <operator pos:start="51:22" pos:end="51:22">&lt;</operator> <operator pos:start="51:24" pos:end="51:24">(</operator><name pos:start="51:25" pos:end="51:27">int</name><operator pos:start="51:28" pos:end="51:28">)</operator><name pos:start="51:29" pos:end="51:41">bytesconsumed</name><operator pos:start="51:42" pos:end="51:42">)</operator></expr>

        ?</condition><then pos:start="53:11" pos:end="53:18"> <expr pos:start="53:11" pos:end="53:18"><name pos:start="53:11" pos:end="53:18">buf_size</name></expr> </then><else pos:start="53:20" pos:end="53:39">: <expr pos:start="53:22" pos:end="53:39"><operator pos:start="53:22" pos:end="53:22">(</operator><name pos:start="53:23" pos:end="53:25">int</name><operator pos:start="53:26" pos:end="53:26">)</operator><name pos:start="53:27" pos:end="53:39">bytesconsumed</name></expr></else></ternary></expr>;</return>

<cpp:else pos:start="55:1" pos:end="55:5">#<cpp:directive pos:start="55:2" pos:end="55:5">else</cpp:directive></cpp:else>



    <if_stmt pos:start="59:5" pos:end="83:5"><if pos:start="59:5" pos:end="83:5">if<condition pos:start="59:7" pos:end="59:16">(<expr pos:start="59:8" pos:end="59:15"><operator pos:start="59:8" pos:end="59:8">!</operator><name pos:start="59:9" pos:end="59:15"><name pos:start="59:9" pos:end="59:9">s</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:15">init</name></name></expr>)</condition><block pos:start="59:17" pos:end="83:5">{<block_content pos:start="61:9" pos:end="81:20">

        <decl_stmt pos:start="61:9" pos:end="61:28"><decl pos:start="61:9" pos:end="61:27"><type pos:start="61:9" pos:end="61:21"><name pos:start="61:9" pos:end="61:16">unsigned</name> <name pos:start="61:18" pos:end="61:21">long</name></type> <name pos:start="61:23" pos:end="61:27">srate</name></decl>;</decl_stmt>

        <decl_stmt pos:start="63:9" pos:end="63:31"><decl pos:start="63:9" pos:end="63:30"><type pos:start="63:9" pos:end="63:21"><name pos:start="63:9" pos:end="63:16">unsigned</name> <name pos:start="63:18" pos:end="63:21">char</name></type> <name pos:start="63:23" pos:end="63:30">channels</name></decl>;</decl_stmt>

        <decl_stmt pos:start="65:9" pos:end="65:81"><decl pos:start="65:9" pos:end="65:80"><type pos:start="65:9" pos:end="65:11"><name pos:start="65:9" pos:end="65:11">int</name></type> <name pos:start="65:13" pos:end="65:13">r</name> <init pos:start="65:15" pos:end="65:80">= <expr pos:start="65:17" pos:end="65:80"><call pos:start="65:17" pos:end="65:80"><name pos:start="65:17" pos:end="65:30"><name pos:start="65:17" pos:end="65:17">s</name><operator pos:start="65:18" pos:end="65:19">-&gt;</operator><name pos:start="65:20" pos:end="65:30">faacDecInit</name></name><argument_list pos:start="65:31" pos:end="65:80">(<argument pos:start="65:32" pos:end="65:45"><expr pos:start="65:32" pos:end="65:45"><name pos:start="65:32" pos:end="65:45"><name pos:start="65:32" pos:end="65:32">s</name><operator pos:start="65:33" pos:end="65:34">-&gt;</operator><name pos:start="65:35" pos:end="65:45">faac_handle</name></name></expr></argument>, <argument pos:start="65:48" pos:end="65:50"><expr pos:start="65:48" pos:end="65:50"><name pos:start="65:48" pos:end="65:50">buf</name></expr></argument>, <argument pos:start="65:53" pos:end="65:60"><expr pos:start="65:53" pos:end="65:60"><name pos:start="65:53" pos:end="65:60">buf_size</name></expr></argument>, <argument pos:start="65:63" pos:end="65:68"><expr pos:start="65:63" pos:end="65:68"><operator pos:start="65:63" pos:end="65:63">&amp;</operator><name pos:start="65:64" pos:end="65:68">srate</name></expr></argument>, <argument pos:start="65:71" pos:end="65:79"><expr pos:start="65:71" pos:end="65:79"><operator pos:start="65:71" pos:end="65:71">&amp;</operator><name pos:start="65:72" pos:end="65:79">channels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="67:9" pos:end="75:9"><if pos:start="67:9" pos:end="75:9">if<condition pos:start="67:11" pos:end="67:17">(<expr pos:start="67:12" pos:end="67:16"><name pos:start="67:12" pos:end="67:12">r</name> <operator pos:start="67:14" pos:end="67:14">&lt;</operator> <literal type="number" pos:start="67:16" pos:end="67:16">0</literal></expr>)</condition><block pos:start="67:18" pos:end="75:9">{<block_content pos:start="69:13" pos:end="73:21">

            <expr_stmt pos:start="69:13" pos:end="71:64"><expr pos:start="69:13" pos:end="71:63"><call pos:start="69:13" pos:end="71:63"><name pos:start="69:13" pos:end="69:18">av_log</name><argument_list pos:start="69:19" pos:end="71:63">(<argument pos:start="69:20" pos:end="69:24"><expr pos:start="69:20" pos:end="69:24"><name pos:start="69:20" pos:end="69:24">avctx</name></expr></argument>, <argument pos:start="69:27" pos:end="69:38"><expr pos:start="69:27" pos:end="69:38"><name pos:start="69:27" pos:end="69:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="69:41" pos:end="69:71"><expr pos:start="69:41" pos:end="69:71"><literal type="string" pos:start="69:41" pos:end="69:71">"faac: codec init failed: %s\n"</literal></expr></argument>,

                   <argument pos:start="71:20" pos:end="71:62"><expr pos:start="71:20" pos:end="71:62"><call pos:start="71:20" pos:end="71:62"><name pos:start="71:20" pos:end="71:44"><name pos:start="71:20" pos:end="71:20">s</name><operator pos:start="71:21" pos:end="71:22">-&gt;</operator><name pos:start="71:23" pos:end="71:44">faacDecGetErrorMessage</name></name><argument_list pos:start="71:45" pos:end="71:62">(<argument pos:start="71:46" pos:end="71:61"><expr pos:start="71:46" pos:end="71:61"><name pos:start="71:46" pos:end="71:61"><name pos:start="71:46" pos:end="71:55">frame_info</name><operator pos:start="71:56" pos:end="71:56">.</operator><name pos:start="71:57" pos:end="71:61">error</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="73:13" pos:end="73:21">return <expr pos:start="73:20" pos:end="73:20"><literal type="number" pos:start="73:20" pos:end="73:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:35"><expr pos:start="77:9" pos:end="77:34"><name pos:start="77:9" pos:end="77:26"><name pos:start="77:9" pos:end="77:13">avctx</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:26">sample_rate</name></name> <operator pos:start="77:28" pos:end="77:28">=</operator> <name pos:start="77:30" pos:end="77:34">srate</name></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:35"><expr pos:start="79:9" pos:end="79:34"><name pos:start="79:9" pos:end="79:23"><name pos:start="79:9" pos:end="79:13">avctx</name><operator pos:start="79:14" pos:end="79:15">-&gt;</operator><name pos:start="79:16" pos:end="79:23">channels</name></name> <operator pos:start="79:25" pos:end="79:25">=</operator> <name pos:start="79:27" pos:end="79:34">channels</name></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:20"><expr pos:start="81:9" pos:end="81:19"><name pos:start="81:9" pos:end="81:15"><name pos:start="81:9" pos:end="81:9">s</name><operator pos:start="81:10" pos:end="81:11">-&gt;</operator><name pos:start="81:12" pos:end="81:15">init</name></name> <operator pos:start="81:17" pos:end="81:17">=</operator> <literal type="number" pos:start="81:19" pos:end="81:19">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:102"><expr pos:start="87:5" pos:end="87:101"><name pos:start="87:5" pos:end="87:7">out</name> <operator pos:start="87:9" pos:end="87:9">=</operator> <call pos:start="87:11" pos:end="87:101"><name pos:start="87:11" pos:end="87:26"><name pos:start="87:11" pos:end="87:11">s</name><operator pos:start="87:12" pos:end="87:13">-&gt;</operator><name pos:start="87:14" pos:end="87:26">faacDecDecode</name></name><argument_list pos:start="87:27" pos:end="87:101">(<argument pos:start="87:28" pos:end="87:41"><expr pos:start="87:28" pos:end="87:41"><name pos:start="87:28" pos:end="87:41"><name pos:start="87:28" pos:end="87:28">s</name><operator pos:start="87:29" pos:end="87:30">-&gt;</operator><name pos:start="87:31" pos:end="87:41">faac_handle</name></name></expr></argument>, <argument pos:start="87:44" pos:end="87:54"><expr pos:start="87:44" pos:end="87:54"><operator pos:start="87:44" pos:end="87:44">&amp;</operator><name pos:start="87:45" pos:end="87:54">frame_info</name></expr></argument>, <argument pos:start="87:57" pos:end="87:75"><expr pos:start="87:57" pos:end="87:75"><operator pos:start="87:57" pos:end="87:57">(</operator><name pos:start="87:58" pos:end="87:65">unsigned</name> <name pos:start="87:67" pos:end="87:70">char</name><operator pos:start="87:71" pos:end="87:71">*</operator><operator pos:start="87:72" pos:end="87:72">)</operator><name pos:start="87:73" pos:end="87:75">buf</name></expr></argument>, <argument pos:start="87:78" pos:end="87:100"><expr pos:start="87:78" pos:end="87:100"><operator pos:start="87:78" pos:end="87:78">(</operator><name pos:start="87:79" pos:end="87:86">unsigned</name> <name pos:start="87:88" pos:end="87:91">long</name><operator pos:start="87:92" pos:end="87:92">)</operator><name pos:start="87:93" pos:end="87:100">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="91:5" pos:end="99:5"><if pos:start="91:5" pos:end="99:5">if <condition pos:start="91:8" pos:end="91:29">(<expr pos:start="91:9" pos:end="91:28"><name pos:start="91:9" pos:end="91:24"><name pos:start="91:9" pos:end="91:18">frame_info</name><operator pos:start="91:19" pos:end="91:19">.</operator><name pos:start="91:20" pos:end="91:24">error</name></name> <operator pos:start="91:26" pos:end="91:26">&gt;</operator> <literal type="number" pos:start="91:28" pos:end="91:28">0</literal></expr>)</condition> <block pos:start="91:31" pos:end="99:5">{<block_content pos:start="93:9" pos:end="97:17">

        <expr_stmt pos:start="93:9" pos:end="95:61"><expr pos:start="93:9" pos:end="95:60"><call pos:start="93:9" pos:end="95:60"><name pos:start="93:9" pos:end="93:14">av_log</name><argument_list pos:start="93:15" pos:end="95:60">(<argument pos:start="93:16" pos:end="93:20"><expr pos:start="93:16" pos:end="93:20"><name pos:start="93:16" pos:end="93:20">avctx</name></expr></argument>, <argument pos:start="93:23" pos:end="93:34"><expr pos:start="93:23" pos:end="93:34"><name pos:start="93:23" pos:end="93:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="93:37" pos:end="93:71"><expr pos:start="93:37" pos:end="93:71"><literal type="string" pos:start="93:37" pos:end="93:71">"faac: frame decoding failed: %s\n"</literal></expr></argument>,

                <argument pos:start="95:17" pos:end="95:59"><expr pos:start="95:17" pos:end="95:59"><call pos:start="95:17" pos:end="95:59"><name pos:start="95:17" pos:end="95:41"><name pos:start="95:17" pos:end="95:17">s</name><operator pos:start="95:18" pos:end="95:19">-&gt;</operator><name pos:start="95:20" pos:end="95:41">faacDecGetErrorMessage</name></name><argument_list pos:start="95:42" pos:end="95:59">(<argument pos:start="95:43" pos:end="95:58"><expr pos:start="95:43" pos:end="95:58"><name pos:start="95:43" pos:end="95:58"><name pos:start="95:43" pos:end="95:52">frame_info</name><operator pos:start="95:53" pos:end="95:53">.</operator><name pos:start="95:54" pos:end="95:58">error</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="97:9" pos:end="97:17">return <expr pos:start="97:16" pos:end="97:16"><literal type="number" pos:start="97:16" pos:end="97:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:41"><expr pos:start="103:5" pos:end="103:40"><name pos:start="103:5" pos:end="103:22"><name pos:start="103:5" pos:end="103:14">frame_info</name><operator pos:start="103:15" pos:end="103:15">.</operator><name pos:start="103:16" pos:end="103:22">samples</name></name> <operator pos:start="103:24" pos:end="103:25">*=</operator> <name pos:start="103:27" pos:end="103:40"><name pos:start="103:27" pos:end="103:27">s</name><operator pos:start="103:28" pos:end="103:29">-&gt;</operator><name pos:start="103:30" pos:end="103:40">sample_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:42"><expr pos:start="105:5" pos:end="105:41"><call pos:start="105:5" pos:end="105:41"><name pos:start="105:5" pos:end="105:10">memcpy</name><argument_list pos:start="105:11" pos:end="105:41">(<argument pos:start="105:12" pos:end="105:15"><expr pos:start="105:12" pos:end="105:15"><name pos:start="105:12" pos:end="105:15">data</name></expr></argument>, <argument pos:start="105:18" pos:end="105:20"><expr pos:start="105:18" pos:end="105:20"><name pos:start="105:18" pos:end="105:20">out</name></expr></argument>, <argument pos:start="105:23" pos:end="105:40"><expr pos:start="105:23" pos:end="105:40"><name pos:start="105:23" pos:end="105:40"><name pos:start="105:23" pos:end="105:32">frame_info</name><operator pos:start="105:33" pos:end="105:33">.</operator><name pos:start="105:34" pos:end="105:40">samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="105:44" pos:end="105:77">// CHECKME - can we cheat this one</comment>



    <if_stmt pos:start="109:5" pos:end="111:40"><if pos:start="109:5" pos:end="111:40">if <condition pos:start="109:8" pos:end="109:18">(<expr pos:start="109:9" pos:end="109:17"><name pos:start="109:9" pos:end="109:17">data_size</name></expr>)</condition><block type="pseudo" pos:start="111:9" pos:end="111:40"><block_content pos:start="111:9" pos:end="111:40">

        <expr_stmt pos:start="111:9" pos:end="111:40"><expr pos:start="111:9" pos:end="111:39"><operator pos:start="111:9" pos:end="111:9">*</operator><name pos:start="111:10" pos:end="111:18">data_size</name> <operator pos:start="111:20" pos:end="111:20">=</operator> <name pos:start="111:22" pos:end="111:39"><name pos:start="111:22" pos:end="111:31">frame_info</name><operator pos:start="111:32" pos:end="111:32">.</operator><name pos:start="111:33" pos:end="111:39">samples</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="115:5" pos:end="120:0">return <expr pos:start="115:12" pos:end="117:50"><ternary pos:start="115:12" pos:end="117:50"><condition pos:start="115:12" pos:end="117:9"><expr pos:start="115:12" pos:end="115:53"><operator pos:start="115:12" pos:end="115:12">(</operator><name pos:start="115:13" pos:end="115:20">buf_size</name> <operator pos:start="115:22" pos:end="115:22">&lt;</operator> <operator pos:start="115:24" pos:end="115:24">(</operator><name pos:start="115:25" pos:end="115:27">int</name><operator pos:start="115:28" pos:end="115:28">)</operator><name pos:start="115:29" pos:end="115:52"><name pos:start="115:29" pos:end="115:38">frame_info</name><operator pos:start="115:39" pos:end="115:39">.</operator><name pos:start="115:40" pos:end="115:52">bytesconsumed</name></name><operator pos:start="115:53" pos:end="115:53">)</operator></expr>

        ?</condition><then pos:start="117:11" pos:end="117:18"> <expr pos:start="117:11" pos:end="117:18"><name pos:start="117:11" pos:end="117:18">buf_size</name></expr> </then><else pos:start="117:20" pos:end="117:50">: <expr pos:start="117:22" pos:end="117:50"><operator pos:start="117:22" pos:end="117:22">(</operator><name pos:start="117:23" pos:end="117:25">int</name><operator pos:start="117:26" pos:end="117:26">)</operator><name pos:start="117:27" pos:end="117:50"><name pos:start="117:27" pos:end="117:36">frame_info</name><operator pos:start="117:37" pos:end="117:37">.</operator><name pos:start="117:38" pos:end="117:50">bytesconsumed</name></name></expr></else></ternary></expr>;</return>

<cpp:endif pos:start="119:1" pos:end="119:6">#<cpp:directive pos:start="119:2" pos:end="119:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
