<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4690.c" pos:tabs="8"><function pos:start="1:1" pos:end="644:1"><type pos:start="1:1" pos:end="1:11"><name pos:start="1:1" pos:end="1:9">DriveInfo</name> <modifier pos:start="1:11" pos:end="1:11">*</modifier></type><name pos:start="1:12" pos:end="1:21">drive_init</name><parameter_list pos:start="1:22" pos:end="1:80">(<parameter pos:start="1:23" pos:end="1:40"><decl pos:start="1:23" pos:end="1:40"><type pos:start="1:23" pos:end="1:40"><name pos:start="1:23" pos:end="1:30">QemuOpts</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:40">all_opts</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:79"><decl pos:start="1:43" pos:end="1:79"><type pos:start="1:43" pos:end="1:79"><name pos:start="1:43" pos:end="1:60">BlockInterfaceType</name></type> <name pos:start="1:62" pos:end="1:79">block_default_type</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="644:1">{<block_content pos:start="5:5" pos:end="642:17">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:21">value</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">DriveInfo</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:20">dinfo</name> <init pos:start="7:22" pos:end="7:27">= <expr pos:start="7:24" pos:end="7:27"><name pos:start="7:24" pos:end="7:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">QDict</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:18">bs_opts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">QemuOpts</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:25">legacy_opts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:38"><decl pos:start="13:5" pos:end="13:37"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:18">DriveMediaType</name></type> <name pos:start="13:20" pos:end="13:24">media</name> <init pos:start="13:26" pos:end="13:37">= <expr pos:start="13:28" pos:end="13:37"><name pos:start="13:28" pos:end="13:37">MEDIA_DISK</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:22">BlockInterfaceType</name></type> <name pos:start="15:24" pos:end="15:27">type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:39"><decl pos:start="17:5" pos:end="17:12"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:12">cyls</name></decl>, <decl pos:start="17:15" pos:end="17:19"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:15" pos:end="17:19">heads</name></decl>, <decl pos:start="17:22" pos:end="17:25"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:22" pos:end="17:25">secs</name></decl>, <decl pos:start="17:28" pos:end="17:38"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:28" pos:end="17:38">translation</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:41"><decl pos:start="19:5" pos:end="19:16"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:16">max_devs</name></decl>, <decl pos:start="19:19" pos:end="19:24"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:19" pos:end="19:24">bus_id</name></decl>, <decl pos:start="19:27" pos:end="19:33"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:27" pos:end="19:33">unit_id</name></decl>, <decl pos:start="19:36" pos:end="19:40"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:36" pos:end="19:40">index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:24"><decl pos:start="21:5" pos:end="21:23"><type pos:start="21:5" pos:end="21:16"><specifier pos:start="21:5" pos:end="21:9">const</specifier> <name pos:start="21:11" pos:end="21:14">char</name> <modifier pos:start="21:16" pos:end="21:16">*</modifier></type><name pos:start="21:17" pos:end="21:23">devaddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:32"><decl pos:start="23:5" pos:end="23:22"><type pos:start="23:5" pos:end="23:16"><specifier pos:start="23:5" pos:end="23:9">const</specifier> <name pos:start="23:11" pos:end="23:14">char</name> <modifier pos:start="23:16" pos:end="23:16">*</modifier></type><name pos:start="23:17" pos:end="23:22">werror</name></decl>, <decl pos:start="23:25" pos:end="23:31"><type ref="prev" pos:start="23:5" pos:end="23:16"><modifier pos:start="23:25" pos:end="23:25">*</modifier></type><name pos:start="23:26" pos:end="23:31">rerror</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:27"><decl pos:start="25:5" pos:end="25:26"><type pos:start="25:5" pos:end="25:8"><name pos:start="25:5" pos:end="25:8">bool</name></type> <name pos:start="25:10" pos:end="25:18">read_only</name> <init pos:start="25:20" pos:end="25:26">= <expr pos:start="25:22" pos:end="25:26"><name pos:start="25:22" pos:end="25:26">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:22"><decl pos:start="27:5" pos:end="27:21"><type pos:start="27:5" pos:end="27:8"><name pos:start="27:5" pos:end="27:8">bool</name></type> <name pos:start="27:10" pos:end="27:21">copy_on_read</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:25"><decl pos:start="29:5" pos:end="29:24"><type pos:start="29:5" pos:end="29:16"><specifier pos:start="29:5" pos:end="29:9">const</specifier> <name pos:start="29:11" pos:end="29:14">char</name> <modifier pos:start="29:16" pos:end="29:16">*</modifier></type><name pos:start="29:17" pos:end="29:24">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:28"><decl pos:start="31:5" pos:end="31:27"><type pos:start="31:5" pos:end="31:11"><name pos:start="31:5" pos:end="31:9">Error</name> <modifier pos:start="31:11" pos:end="31:11">*</modifier></type><name pos:start="31:12" pos:end="31:20">local_err</name> <init pos:start="31:22" pos:end="31:27">= <expr pos:start="31:24" pos:end="31:27"><name pos:start="31:24" pos:end="31:27">NULL</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:58">/* Change legacy command line options into QMP ones */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:63"><expr pos:start="37:5" pos:end="37:62"><call pos:start="37:5" pos:end="37:62"><name pos:start="37:5" pos:end="37:19">qemu_opt_rename</name><argument_list pos:start="37:20" pos:end="37:62">(<argument pos:start="37:21" pos:end="37:28"><expr pos:start="37:21" pos:end="37:28"><name pos:start="37:21" pos:end="37:28">all_opts</name></expr></argument>, <argument pos:start="37:31" pos:end="37:36"><expr pos:start="37:31" pos:end="37:36"><literal type="string" pos:start="37:31" pos:end="37:36">"iops"</literal></expr></argument>, <argument pos:start="37:39" pos:end="37:61"><expr pos:start="37:39" pos:end="37:61"><literal type="string" pos:start="37:39" pos:end="37:61">"throttling.iops-total"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:65"><expr pos:start="39:5" pos:end="39:64"><call pos:start="39:5" pos:end="39:64"><name pos:start="39:5" pos:end="39:19">qemu_opt_rename</name><argument_list pos:start="39:20" pos:end="39:64">(<argument pos:start="39:21" pos:end="39:28"><expr pos:start="39:21" pos:end="39:28"><name pos:start="39:21" pos:end="39:28">all_opts</name></expr></argument>, <argument pos:start="39:31" pos:end="39:39"><expr pos:start="39:31" pos:end="39:39"><literal type="string" pos:start="39:31" pos:end="39:39">"iops_rd"</literal></expr></argument>, <argument pos:start="39:42" pos:end="39:63"><expr pos:start="39:42" pos:end="39:63"><literal type="string" pos:start="39:42" pos:end="39:63">"throttling.iops-read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:66"><expr pos:start="41:5" pos:end="41:65"><call pos:start="41:5" pos:end="41:65"><name pos:start="41:5" pos:end="41:19">qemu_opt_rename</name><argument_list pos:start="41:20" pos:end="41:65">(<argument pos:start="41:21" pos:end="41:28"><expr pos:start="41:21" pos:end="41:28"><name pos:start="41:21" pos:end="41:28">all_opts</name></expr></argument>, <argument pos:start="41:31" pos:end="41:39"><expr pos:start="41:31" pos:end="41:39"><literal type="string" pos:start="41:31" pos:end="41:39">"iops_wr"</literal></expr></argument>, <argument pos:start="41:42" pos:end="41:64"><expr pos:start="41:42" pos:end="41:64"><literal type="string" pos:start="41:42" pos:end="41:64">"throttling.iops-write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:61"><expr pos:start="45:5" pos:end="45:60"><call pos:start="45:5" pos:end="45:60"><name pos:start="45:5" pos:end="45:19">qemu_opt_rename</name><argument_list pos:start="45:20" pos:end="45:60">(<argument pos:start="45:21" pos:end="45:28"><expr pos:start="45:21" pos:end="45:28"><name pos:start="45:21" pos:end="45:28">all_opts</name></expr></argument>, <argument pos:start="45:31" pos:end="45:35"><expr pos:start="45:31" pos:end="45:35"><literal type="string" pos:start="45:31" pos:end="45:35">"bps"</literal></expr></argument>, <argument pos:start="45:38" pos:end="45:59"><expr pos:start="45:38" pos:end="45:59"><literal type="string" pos:start="45:38" pos:end="45:59">"throttling.bps-total"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:63"><expr pos:start="47:5" pos:end="47:62"><call pos:start="47:5" pos:end="47:62"><name pos:start="47:5" pos:end="47:19">qemu_opt_rename</name><argument_list pos:start="47:20" pos:end="47:62">(<argument pos:start="47:21" pos:end="47:28"><expr pos:start="47:21" pos:end="47:28"><name pos:start="47:21" pos:end="47:28">all_opts</name></expr></argument>, <argument pos:start="47:31" pos:end="47:38"><expr pos:start="47:31" pos:end="47:38"><literal type="string" pos:start="47:31" pos:end="47:38">"bps_rd"</literal></expr></argument>, <argument pos:start="47:41" pos:end="47:61"><expr pos:start="47:41" pos:end="47:61"><literal type="string" pos:start="47:41" pos:end="47:61">"throttling.bps-read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:64"><expr pos:start="49:5" pos:end="49:63"><call pos:start="49:5" pos:end="49:63"><name pos:start="49:5" pos:end="49:19">qemu_opt_rename</name><argument_list pos:start="49:20" pos:end="49:63">(<argument pos:start="49:21" pos:end="49:28"><expr pos:start="49:21" pos:end="49:28"><name pos:start="49:21" pos:end="49:28">all_opts</name></expr></argument>, <argument pos:start="49:31" pos:end="49:38"><expr pos:start="49:31" pos:end="49:38"><literal type="string" pos:start="49:31" pos:end="49:38">"bps_wr"</literal></expr></argument>, <argument pos:start="49:41" pos:end="49:62"><expr pos:start="49:41" pos:end="49:62"><literal type="string" pos:start="49:41" pos:end="49:62">"throttling.bps-write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:71"><expr pos:start="53:5" pos:end="53:70"><call pos:start="53:5" pos:end="53:70"><name pos:start="53:5" pos:end="53:19">qemu_opt_rename</name><argument_list pos:start="53:20" pos:end="53:70">(<argument pos:start="53:21" pos:end="53:28"><expr pos:start="53:21" pos:end="53:28"><name pos:start="53:21" pos:end="53:28">all_opts</name></expr></argument>, <argument pos:start="53:31" pos:end="53:40"><expr pos:start="53:31" pos:end="53:40"><literal type="string" pos:start="53:31" pos:end="53:40">"iops_max"</literal></expr></argument>, <argument pos:start="53:43" pos:end="53:69"><expr pos:start="53:43" pos:end="53:69"><literal type="string" pos:start="53:43" pos:end="53:69">"throttling.iops-total-max"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:73"><expr pos:start="55:5" pos:end="55:72"><call pos:start="55:5" pos:end="55:72"><name pos:start="55:5" pos:end="55:19">qemu_opt_rename</name><argument_list pos:start="55:20" pos:end="55:72">(<argument pos:start="55:21" pos:end="55:28"><expr pos:start="55:21" pos:end="55:28"><name pos:start="55:21" pos:end="55:28">all_opts</name></expr></argument>, <argument pos:start="55:31" pos:end="55:43"><expr pos:start="55:31" pos:end="55:43"><literal type="string" pos:start="55:31" pos:end="55:43">"iops_rd_max"</literal></expr></argument>, <argument pos:start="55:46" pos:end="55:71"><expr pos:start="55:46" pos:end="55:71"><literal type="string" pos:start="55:46" pos:end="55:71">"throttling.iops-read-max"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:74"><expr pos:start="57:5" pos:end="57:73"><call pos:start="57:5" pos:end="57:73"><name pos:start="57:5" pos:end="57:19">qemu_opt_rename</name><argument_list pos:start="57:20" pos:end="57:73">(<argument pos:start="57:21" pos:end="57:28"><expr pos:start="57:21" pos:end="57:28"><name pos:start="57:21" pos:end="57:28">all_opts</name></expr></argument>, <argument pos:start="57:31" pos:end="57:43"><expr pos:start="57:31" pos:end="57:43"><literal type="string" pos:start="57:31" pos:end="57:43">"iops_wr_max"</literal></expr></argument>, <argument pos:start="57:46" pos:end="57:72"><expr pos:start="57:46" pos:end="57:72"><literal type="string" pos:start="57:46" pos:end="57:72">"throttling.iops-write-max"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:69"><expr pos:start="61:5" pos:end="61:68"><call pos:start="61:5" pos:end="61:68"><name pos:start="61:5" pos:end="61:19">qemu_opt_rename</name><argument_list pos:start="61:20" pos:end="61:68">(<argument pos:start="61:21" pos:end="61:28"><expr pos:start="61:21" pos:end="61:28"><name pos:start="61:21" pos:end="61:28">all_opts</name></expr></argument>, <argument pos:start="61:31" pos:end="61:39"><expr pos:start="61:31" pos:end="61:39"><literal type="string" pos:start="61:31" pos:end="61:39">"bps_max"</literal></expr></argument>, <argument pos:start="61:42" pos:end="61:67"><expr pos:start="61:42" pos:end="61:67"><literal type="string" pos:start="61:42" pos:end="61:67">"throttling.bps-total-max"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:71"><expr pos:start="63:5" pos:end="63:70"><call pos:start="63:5" pos:end="63:70"><name pos:start="63:5" pos:end="63:19">qemu_opt_rename</name><argument_list pos:start="63:20" pos:end="63:70">(<argument pos:start="63:21" pos:end="63:28"><expr pos:start="63:21" pos:end="63:28"><name pos:start="63:21" pos:end="63:28">all_opts</name></expr></argument>, <argument pos:start="63:31" pos:end="63:42"><expr pos:start="63:31" pos:end="63:42"><literal type="string" pos:start="63:31" pos:end="63:42">"bps_rd_max"</literal></expr></argument>, <argument pos:start="63:45" pos:end="63:69"><expr pos:start="63:45" pos:end="63:69"><literal type="string" pos:start="63:45" pos:end="63:69">"throttling.bps-read-max"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:72"><expr pos:start="65:5" pos:end="65:71"><call pos:start="65:5" pos:end="65:71"><name pos:start="65:5" pos:end="65:19">qemu_opt_rename</name><argument_list pos:start="65:20" pos:end="65:71">(<argument pos:start="65:21" pos:end="65:28"><expr pos:start="65:21" pos:end="65:28"><name pos:start="65:21" pos:end="65:28">all_opts</name></expr></argument>, <argument pos:start="65:31" pos:end="65:42"><expr pos:start="65:31" pos:end="65:42"><literal type="string" pos:start="65:31" pos:end="65:42">"bps_wr_max"</literal></expr></argument>, <argument pos:start="65:45" pos:end="65:70"><expr pos:start="65:45" pos:end="65:70"><literal type="string" pos:start="65:45" pos:end="65:70">"throttling.bps-write-max"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="69:5" pos:end="71:57"><expr pos:start="69:5" pos:end="71:56"><call pos:start="69:5" pos:end="71:56"><name pos:start="69:5" pos:end="69:19">qemu_opt_rename</name><argument_list pos:start="69:20" pos:end="71:56">(<argument pos:start="69:21" pos:end="69:28"><expr pos:start="69:21" pos:end="69:28"><name pos:start="69:21" pos:end="69:28">all_opts</name></expr></argument>,

                    <argument pos:start="71:21" pos:end="71:31"><expr pos:start="71:21" pos:end="71:31"><literal type="string" pos:start="71:21" pos:end="71:31">"iops_size"</literal></expr></argument>, <argument pos:start="71:34" pos:end="71:55"><expr pos:start="71:34" pos:end="71:55"><literal type="string" pos:start="71:34" pos:end="71:55">"throttling.iops-size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:55"><expr pos:start="75:5" pos:end="75:54"><call pos:start="75:5" pos:end="75:54"><name pos:start="75:5" pos:end="75:19">qemu_opt_rename</name><argument_list pos:start="75:20" pos:end="75:54">(<argument pos:start="75:21" pos:end="75:28"><expr pos:start="75:21" pos:end="75:28"><name pos:start="75:21" pos:end="75:28">all_opts</name></expr></argument>, <argument pos:start="75:31" pos:end="75:40"><expr pos:start="75:31" pos:end="75:40"><literal type="string" pos:start="75:31" pos:end="75:40">"readonly"</literal></expr></argument>, <argument pos:start="75:43" pos:end="75:53"><expr pos:start="75:43" pos:end="75:53"><literal type="string" pos:start="75:43" pos:end="75:53">"read-only"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:44"><expr pos:start="79:5" pos:end="79:43"><name pos:start="79:5" pos:end="79:9">value</name> <operator pos:start="79:11" pos:end="79:11">=</operator> <call pos:start="79:13" pos:end="79:43"><name pos:start="79:13" pos:end="79:24">qemu_opt_get</name><argument_list pos:start="79:25" pos:end="79:43">(<argument pos:start="79:26" pos:end="79:33"><expr pos:start="79:26" pos:end="79:33"><name pos:start="79:26" pos:end="79:33">all_opts</name></expr></argument>, <argument pos:start="79:36" pos:end="79:42"><expr pos:start="79:36" pos:end="79:42"><literal type="string" pos:start="79:36" pos:end="79:42">"cache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="81:5" pos:end="125:5"><if pos:start="81:5" pos:end="125:5">if <condition pos:start="81:8" pos:end="81:14">(<expr pos:start="81:9" pos:end="81:13"><name pos:start="81:9" pos:end="81:13">value</name></expr>)</condition> <block pos:start="81:16" pos:end="125:5">{<block_content pos:start="83:9" pos:end="123:42">

        <decl_stmt pos:start="83:9" pos:end="83:22"><decl pos:start="83:9" pos:end="83:21"><type pos:start="83:9" pos:end="83:11"><name pos:start="83:9" pos:end="83:11">int</name></type> <name pos:start="83:13" pos:end="83:17">flags</name> <init pos:start="83:19" pos:end="83:21">= <expr pos:start="83:21" pos:end="83:21"><literal type="number" pos:start="83:21" pos:end="83:21">0</literal></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="87:9" pos:end="93:9"><if pos:start="87:9" pos:end="93:9">if <condition pos:start="87:12" pos:end="87:55">(<expr pos:start="87:13" pos:end="87:54"><call pos:start="87:13" pos:end="87:49"><name pos:start="87:13" pos:end="87:34">bdrv_parse_cache_flags</name><argument_list pos:start="87:35" pos:end="87:49">(<argument pos:start="87:36" pos:end="87:40"><expr pos:start="87:36" pos:end="87:40"><name pos:start="87:36" pos:end="87:40">value</name></expr></argument>, <argument pos:start="87:43" pos:end="87:48"><expr pos:start="87:43" pos:end="87:48"><operator pos:start="87:43" pos:end="87:43">&amp;</operator><name pos:start="87:44" pos:end="87:48">flags</name></expr></argument>)</argument_list></call> <operator pos:start="87:51" pos:end="87:52">!=</operator> <literal type="number" pos:start="87:54" pos:end="87:54">0</literal></expr>)</condition> <block pos:start="87:57" pos:end="93:9">{<block_content pos:start="89:13" pos:end="91:24">

            <expr_stmt pos:start="89:13" pos:end="89:49"><expr pos:start="89:13" pos:end="89:48"><call pos:start="89:13" pos:end="89:48"><name pos:start="89:13" pos:end="89:24">error_report</name><argument_list pos:start="89:25" pos:end="89:48">(<argument pos:start="89:26" pos:end="89:47"><expr pos:start="89:26" pos:end="89:47"><literal type="string" pos:start="89:26" pos:end="89:47">"invalid cache option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="91:13" pos:end="91:24">return <expr pos:start="91:20" pos:end="91:23"><name pos:start="91:20" pos:end="91:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="97:9" pos:end="97:46">/* Specific options take precedence */</comment>

        <if_stmt pos:start="99:9" pos:end="105:9"><if pos:start="99:9" pos:end="105:9">if <condition pos:start="99:12" pos:end="99:55">(<expr pos:start="99:13" pos:end="99:54"><operator pos:start="99:13" pos:end="99:13">!</operator><call pos:start="99:14" pos:end="99:54"><name pos:start="99:14" pos:end="99:25">qemu_opt_get</name><argument_list pos:start="99:26" pos:end="99:54">(<argument pos:start="99:27" pos:end="99:34"><expr pos:start="99:27" pos:end="99:34"><name pos:start="99:27" pos:end="99:34">all_opts</name></expr></argument>, <argument pos:start="99:37" pos:end="99:53"><expr pos:start="99:37" pos:end="99:53"><literal type="string" pos:start="99:37" pos:end="99:53">"cache.writeback"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="99:57" pos:end="105:9">{<block_content pos:start="101:13" pos:end="103:59">

            <expr_stmt pos:start="101:13" pos:end="103:59"><expr pos:start="101:13" pos:end="103:58"><call pos:start="101:13" pos:end="103:58"><name pos:start="101:13" pos:end="101:29">qemu_opt_set_bool</name><argument_list pos:start="101:30" pos:end="103:58">(<argument pos:start="101:31" pos:end="101:38"><expr pos:start="101:31" pos:end="101:38"><name pos:start="101:31" pos:end="101:38">all_opts</name></expr></argument>, <argument pos:start="101:41" pos:end="101:57"><expr pos:start="101:41" pos:end="101:57"><literal type="string" pos:start="101:41" pos:end="101:57">"cache.writeback"</literal></expr></argument>,

                              <argument pos:start="103:31" pos:end="103:57"><expr pos:start="103:31" pos:end="103:57"><operator pos:start="103:31" pos:end="103:31">!</operator><operator pos:start="103:32" pos:end="103:32">!</operator><operator pos:start="103:33" pos:end="103:33">(</operator><name pos:start="103:34" pos:end="103:38">flags</name> <operator pos:start="103:40" pos:end="103:40">&amp;</operator> <name pos:start="103:42" pos:end="103:56">BDRV_O_CACHE_WB</name><operator pos:start="103:57" pos:end="103:57">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="107:9" pos:end="113:9"><if pos:start="107:9" pos:end="113:9">if <condition pos:start="107:12" pos:end="107:52">(<expr pos:start="107:13" pos:end="107:51"><operator pos:start="107:13" pos:end="107:13">!</operator><call pos:start="107:14" pos:end="107:51"><name pos:start="107:14" pos:end="107:25">qemu_opt_get</name><argument_list pos:start="107:26" pos:end="107:51">(<argument pos:start="107:27" pos:end="107:34"><expr pos:start="107:27" pos:end="107:34"><name pos:start="107:27" pos:end="107:34">all_opts</name></expr></argument>, <argument pos:start="107:37" pos:end="107:50"><expr pos:start="107:37" pos:end="107:50"><literal type="string" pos:start="107:37" pos:end="107:50">"cache.direct"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="107:54" pos:end="113:9">{<block_content pos:start="109:13" pos:end="111:58">

            <expr_stmt pos:start="109:13" pos:end="111:58"><expr pos:start="109:13" pos:end="111:57"><call pos:start="109:13" pos:end="111:57"><name pos:start="109:13" pos:end="109:29">qemu_opt_set_bool</name><argument_list pos:start="109:30" pos:end="111:57">(<argument pos:start="109:31" pos:end="109:38"><expr pos:start="109:31" pos:end="109:38"><name pos:start="109:31" pos:end="109:38">all_opts</name></expr></argument>, <argument pos:start="109:41" pos:end="109:54"><expr pos:start="109:41" pos:end="109:54"><literal type="string" pos:start="109:41" pos:end="109:54">"cache.direct"</literal></expr></argument>,

                              <argument pos:start="111:31" pos:end="111:56"><expr pos:start="111:31" pos:end="111:56"><operator pos:start="111:31" pos:end="111:31">!</operator><operator pos:start="111:32" pos:end="111:32">!</operator><operator pos:start="111:33" pos:end="111:33">(</operator><name pos:start="111:34" pos:end="111:38">flags</name> <operator pos:start="111:40" pos:end="111:40">&amp;</operator> <name pos:start="111:42" pos:end="111:55">BDRV_O_NOCACHE</name><operator pos:start="111:56" pos:end="111:56">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="115:9" pos:end="121:9"><if pos:start="115:9" pos:end="121:9">if <condition pos:start="115:12" pos:end="115:54">(<expr pos:start="115:13" pos:end="115:53"><operator pos:start="115:13" pos:end="115:13">!</operator><call pos:start="115:14" pos:end="115:53"><name pos:start="115:14" pos:end="115:25">qemu_opt_get</name><argument_list pos:start="115:26" pos:end="115:53">(<argument pos:start="115:27" pos:end="115:34"><expr pos:start="115:27" pos:end="115:34"><name pos:start="115:27" pos:end="115:34">all_opts</name></expr></argument>, <argument pos:start="115:37" pos:end="115:52"><expr pos:start="115:37" pos:end="115:52"><literal type="string" pos:start="115:37" pos:end="115:52">"cache.no-flush"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="115:56" pos:end="121:9">{<block_content pos:start="117:13" pos:end="119:59">

            <expr_stmt pos:start="117:13" pos:end="119:59"><expr pos:start="117:13" pos:end="119:58"><call pos:start="117:13" pos:end="119:58"><name pos:start="117:13" pos:end="117:29">qemu_opt_set_bool</name><argument_list pos:start="117:30" pos:end="119:58">(<argument pos:start="117:31" pos:end="117:38"><expr pos:start="117:31" pos:end="117:38"><name pos:start="117:31" pos:end="117:38">all_opts</name></expr></argument>, <argument pos:start="117:41" pos:end="117:56"><expr pos:start="117:41" pos:end="117:56"><literal type="string" pos:start="117:41" pos:end="117:56">"cache.no-flush"</literal></expr></argument>,

                              <argument pos:start="119:31" pos:end="119:57"><expr pos:start="119:31" pos:end="119:57"><operator pos:start="119:31" pos:end="119:31">!</operator><operator pos:start="119:32" pos:end="119:32">!</operator><operator pos:start="119:33" pos:end="119:33">(</operator><name pos:start="119:34" pos:end="119:38">flags</name> <operator pos:start="119:40" pos:end="119:40">&amp;</operator> <name pos:start="119:42" pos:end="119:56">BDRV_O_NO_FLUSH</name><operator pos:start="119:57" pos:end="119:57">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:42"><expr pos:start="123:9" pos:end="123:41"><call pos:start="123:9" pos:end="123:41"><name pos:start="123:9" pos:end="123:22">qemu_opt_unset</name><argument_list pos:start="123:23" pos:end="123:41">(<argument pos:start="123:24" pos:end="123:31"><expr pos:start="123:24" pos:end="123:31"><name pos:start="123:24" pos:end="123:31">all_opts</name></expr></argument>, <argument pos:start="123:34" pos:end="123:40"><expr pos:start="123:34" pos:end="123:40"><literal type="string" pos:start="123:34" pos:end="123:40">"cache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="129:5" pos:end="129:48">/* Get a QDict for processing the options */</comment>

    <expr_stmt pos:start="131:5" pos:end="131:26"><expr pos:start="131:5" pos:end="131:25"><name pos:start="131:5" pos:end="131:11">bs_opts</name> <operator pos:start="131:13" pos:end="131:13">=</operator> <call pos:start="131:15" pos:end="131:25"><name pos:start="131:15" pos:end="131:23">qdict_new</name><argument_list pos:start="131:24" pos:end="131:25">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:42"><expr pos:start="133:5" pos:end="133:41"><call pos:start="133:5" pos:end="133:41"><name pos:start="133:5" pos:end="133:22">qemu_opts_to_qdict</name><argument_list pos:start="133:23" pos:end="133:41">(<argument pos:start="133:24" pos:end="133:31"><expr pos:start="133:24" pos:end="133:31"><name pos:start="133:24" pos:end="133:31">all_opts</name></expr></argument>, <argument pos:start="133:34" pos:end="133:40"><expr pos:start="133:34" pos:end="133:40"><name pos:start="133:34" pos:end="133:40">bs_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="137:5" pos:end="139:49"><expr pos:start="137:5" pos:end="139:48"><name pos:start="137:5" pos:end="137:15">legacy_opts</name> <operator pos:start="137:17" pos:end="137:17">=</operator> <call pos:start="137:19" pos:end="139:48"><name pos:start="137:19" pos:end="137:34">qemu_opts_create</name><argument_list pos:start="137:35" pos:end="139:48">(<argument pos:start="137:36" pos:end="137:58"><expr pos:start="137:36" pos:end="137:58"><operator pos:start="137:36" pos:end="137:36">&amp;</operator><name pos:start="137:37" pos:end="137:58">qemu_legacy_drive_opts</name></expr></argument>, <argument pos:start="137:61" pos:end="137:64"><expr pos:start="137:61" pos:end="137:64"><name pos:start="137:61" pos:end="137:64">NULL</name></expr></argument>, <argument pos:start="137:67" pos:end="137:67"><expr pos:start="137:67" pos:end="137:67"><literal type="number" pos:start="137:67" pos:end="137:67">0</literal></expr></argument>,

                                   <argument pos:start="139:36" pos:end="139:47"><expr pos:start="139:36" pos:end="139:47"><operator pos:start="139:36" pos:end="139:36">&amp;</operator><name pos:start="139:37" pos:end="139:47">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:61"><expr pos:start="141:5" pos:end="141:60"><call pos:start="141:5" pos:end="141:60"><name pos:start="141:5" pos:end="141:26">qemu_opts_absorb_qdict</name><argument_list pos:start="141:27" pos:end="141:60">(<argument pos:start="141:28" pos:end="141:38"><expr pos:start="141:28" pos:end="141:38"><name pos:start="141:28" pos:end="141:38">legacy_opts</name></expr></argument>, <argument pos:start="141:41" pos:end="141:47"><expr pos:start="141:41" pos:end="141:47"><name pos:start="141:41" pos:end="141:47">bs_opts</name></expr></argument>, <argument pos:start="141:50" pos:end="141:59"><expr pos:start="141:50" pos:end="141:59"><operator pos:start="141:50" pos:end="141:50">&amp;</operator><name pos:start="141:51" pos:end="141:59">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="143:5" pos:end="151:5"><if pos:start="143:5" pos:end="151:5">if <condition pos:start="143:8" pos:end="143:18">(<expr pos:start="143:9" pos:end="143:17"><name pos:start="143:9" pos:end="143:17">local_err</name></expr>)</condition> <block pos:start="143:20" pos:end="151:5">{<block_content pos:start="145:9" pos:end="149:18">

        <expr_stmt pos:start="145:9" pos:end="145:56"><expr pos:start="145:9" pos:end="145:55"><call pos:start="145:9" pos:end="145:55"><name pos:start="145:9" pos:end="145:20">error_report</name><argument_list pos:start="145:21" pos:end="145:55">(<argument pos:start="145:22" pos:end="145:25"><expr pos:start="145:22" pos:end="145:25"><literal type="string" pos:start="145:22" pos:end="145:25">"%s"</literal></expr></argument>, <argument pos:start="145:28" pos:end="145:54"><expr pos:start="145:28" pos:end="145:54"><call pos:start="145:28" pos:end="145:54"><name pos:start="145:28" pos:end="145:43">error_get_pretty</name><argument_list pos:start="145:44" pos:end="145:54">(<argument pos:start="145:45" pos:end="145:53"><expr pos:start="145:45" pos:end="145:53"><name pos:start="145:45" pos:end="145:53">local_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:30"><expr pos:start="147:9" pos:end="147:29"><call pos:start="147:9" pos:end="147:29"><name pos:start="147:9" pos:end="147:18">error_free</name><argument_list pos:start="147:19" pos:end="147:29">(<argument pos:start="147:20" pos:end="147:28"><expr pos:start="147:20" pos:end="147:28"><name pos:start="147:20" pos:end="147:28">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="149:9" pos:end="149:18">goto <name pos:start="149:14" pos:end="149:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="155:5" pos:end="155:41">/* Deprecated option boot=[on|off] */</comment>

    <if_stmt pos:start="157:5" pos:end="165:5"><if pos:start="157:5" pos:end="165:5">if <condition pos:start="157:8" pos:end="157:50">(<expr pos:start="157:9" pos:end="157:49"><call pos:start="157:9" pos:end="157:41"><name pos:start="157:9" pos:end="157:20">qemu_opt_get</name><argument_list pos:start="157:21" pos:end="157:41">(<argument pos:start="157:22" pos:end="157:32"><expr pos:start="157:22" pos:end="157:32"><name pos:start="157:22" pos:end="157:32">legacy_opts</name></expr></argument>, <argument pos:start="157:35" pos:end="157:40"><expr pos:start="157:35" pos:end="157:40"><literal type="string" pos:start="157:35" pos:end="157:40">"boot"</literal></expr></argument>)</argument_list></call> <operator pos:start="157:43" pos:end="157:44">!=</operator> <name pos:start="157:46" pos:end="157:49">NULL</name></expr>)</condition> <block pos:start="157:52" pos:end="165:5">{<block_content pos:start="159:9" pos:end="163:42">

        <expr_stmt pos:start="159:9" pos:end="163:42"><expr pos:start="159:9" pos:end="163:41"><call pos:start="159:9" pos:end="163:41"><name pos:start="159:9" pos:end="159:15">fprintf</name><argument_list pos:start="159:16" pos:end="163:41">(<argument pos:start="159:17" pos:end="159:22"><expr pos:start="159:17" pos:end="159:22"><name pos:start="159:17" pos:end="159:22">stderr</name></expr></argument>, <argument pos:start="159:25" pos:end="163:40"><expr pos:start="159:25" pos:end="163:40"><literal type="string" pos:start="159:25" pos:end="159:74">"qemu-kvm: boot=on|off is deprecated and will be "</literal>

                <literal type="string" pos:start="161:17" pos:end="161:78">"ignored. Future versions will reject this parameter. Please "</literal>

                <literal type="string" pos:start="163:17" pos:end="163:40">"update your scripts.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="169:5" pos:end="169:20">/* Media type */</comment>

    <expr_stmt pos:start="171:5" pos:end="171:47"><expr pos:start="171:5" pos:end="171:46"><name pos:start="171:5" pos:end="171:9">value</name> <operator pos:start="171:11" pos:end="171:11">=</operator> <call pos:start="171:13" pos:end="171:46"><name pos:start="171:13" pos:end="171:24">qemu_opt_get</name><argument_list pos:start="171:25" pos:end="171:46">(<argument pos:start="171:26" pos:end="171:36"><expr pos:start="171:26" pos:end="171:36"><name pos:start="171:26" pos:end="171:36">legacy_opts</name></expr></argument>, <argument pos:start="171:39" pos:end="171:45"><expr pos:start="171:39" pos:end="171:45"><literal type="string" pos:start="171:39" pos:end="171:45">"media"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="173:5" pos:end="193:5"><if pos:start="173:5" pos:end="193:5">if <condition pos:start="173:8" pos:end="173:14">(<expr pos:start="173:9" pos:end="173:13"><name pos:start="173:9" pos:end="173:13">value</name></expr>)</condition> <block pos:start="173:16" pos:end="193:5">{<block_content pos:start="175:9" pos:end="191:9">

        <if_stmt pos:start="175:9" pos:end="191:9"><if pos:start="175:9" pos:end="179:9">if <condition pos:start="175:12" pos:end="175:35">(<expr pos:start="175:13" pos:end="175:34"><operator pos:start="175:13" pos:end="175:13">!</operator><call pos:start="175:14" pos:end="175:34"><name pos:start="175:14" pos:end="175:19">strcmp</name><argument_list pos:start="175:20" pos:end="175:34">(<argument pos:start="175:21" pos:end="175:25"><expr pos:start="175:21" pos:end="175:25"><name pos:start="175:21" pos:end="175:25">value</name></expr></argument>, <argument pos:start="175:28" pos:end="175:33"><expr pos:start="175:28" pos:end="175:33"><literal type="string" pos:start="175:28" pos:end="175:33">"disk"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="175:37" pos:end="179:9">{<block_content pos:start="177:13" pos:end="177:31">

            <expr_stmt pos:start="177:13" pos:end="177:31"><expr pos:start="177:13" pos:end="177:30"><name pos:start="177:13" pos:end="177:17">media</name> <operator pos:start="177:19" pos:end="177:19">=</operator> <name pos:start="177:21" pos:end="177:30">MEDIA_DISK</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="179:11" pos:end="185:9">else if <condition pos:start="179:19" pos:end="179:43">(<expr pos:start="179:20" pos:end="179:42"><operator pos:start="179:20" pos:end="179:20">!</operator><call pos:start="179:21" pos:end="179:42"><name pos:start="179:21" pos:end="179:26">strcmp</name><argument_list pos:start="179:27" pos:end="179:42">(<argument pos:start="179:28" pos:end="179:32"><expr pos:start="179:28" pos:end="179:32"><name pos:start="179:28" pos:end="179:32">value</name></expr></argument>, <argument pos:start="179:35" pos:end="179:41"><expr pos:start="179:35" pos:end="179:41"><literal type="string" pos:start="179:35" pos:end="179:41">"cdrom"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="179:45" pos:end="185:9">{<block_content pos:start="181:13" pos:end="183:29">

            <expr_stmt pos:start="181:13" pos:end="181:32"><expr pos:start="181:13" pos:end="181:31"><name pos:start="181:13" pos:end="181:17">media</name> <operator pos:start="181:19" pos:end="181:19">=</operator> <name pos:start="181:21" pos:end="181:31">MEDIA_CDROM</name></expr>;</expr_stmt>

            <expr_stmt pos:start="183:13" pos:end="183:29"><expr pos:start="183:13" pos:end="183:28"><name pos:start="183:13" pos:end="183:21">read_only</name> <operator pos:start="183:23" pos:end="183:23">=</operator> <name pos:start="183:25" pos:end="183:28">true</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="185:11" pos:end="191:9">else <block pos:start="185:16" pos:end="191:9">{<block_content pos:start="187:13" pos:end="189:22">

            <expr_stmt pos:start="187:13" pos:end="187:54"><expr pos:start="187:13" pos:end="187:53"><call pos:start="187:13" pos:end="187:53"><name pos:start="187:13" pos:end="187:24">error_report</name><argument_list pos:start="187:25" pos:end="187:53">(<argument pos:start="187:26" pos:end="187:45"><expr pos:start="187:26" pos:end="187:45"><literal type="string" pos:start="187:26" pos:end="187:45">"'%s' invalid media"</literal></expr></argument>, <argument pos:start="187:48" pos:end="187:52"><expr pos:start="187:48" pos:end="187:52"><name pos:start="187:48" pos:end="187:52">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="189:13" pos:end="189:22">goto <name pos:start="189:18" pos:end="189:21">fail</name>;</goto>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="197:5" pos:end="197:71">/* copy-on-read is disabled with a warning for read-only devices */</comment>

    <expr_stmt pos:start="199:5" pos:end="199:68"><expr pos:start="199:5" pos:end="199:67"><name pos:start="199:5" pos:end="199:13">read_only</name> <operator pos:start="199:15" pos:end="199:16">|=</operator> <call pos:start="199:18" pos:end="199:67"><name pos:start="199:18" pos:end="199:34">qemu_opt_get_bool</name><argument_list pos:start="199:35" pos:end="199:67">(<argument pos:start="199:36" pos:end="199:46"><expr pos:start="199:36" pos:end="199:46"><name pos:start="199:36" pos:end="199:46">legacy_opts</name></expr></argument>, <argument pos:start="199:49" pos:end="199:59"><expr pos:start="199:49" pos:end="199:59"><literal type="string" pos:start="199:49" pos:end="199:59">"read-only"</literal></expr></argument>, <argument pos:start="199:62" pos:end="199:66"><expr pos:start="199:62" pos:end="199:66"><name pos:start="199:62" pos:end="199:66">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:73"><expr pos:start="201:5" pos:end="201:72"><name pos:start="201:5" pos:end="201:16">copy_on_read</name> <operator pos:start="201:18" pos:end="201:18">=</operator> <call pos:start="201:20" pos:end="201:72"><name pos:start="201:20" pos:end="201:36">qemu_opt_get_bool</name><argument_list pos:start="201:37" pos:end="201:72">(<argument pos:start="201:38" pos:end="201:48"><expr pos:start="201:38" pos:end="201:48"><name pos:start="201:38" pos:end="201:48">legacy_opts</name></expr></argument>, <argument pos:start="201:51" pos:end="201:64"><expr pos:start="201:51" pos:end="201:64"><literal type="string" pos:start="201:51" pos:end="201:64">"copy-on-read"</literal></expr></argument>, <argument pos:start="201:67" pos:end="201:71"><expr pos:start="201:67" pos:end="201:71"><name pos:start="201:67" pos:end="201:71">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="205:5" pos:end="211:5"><if pos:start="205:5" pos:end="211:5">if <condition pos:start="205:8" pos:end="205:34">(<expr pos:start="205:9" pos:end="205:33"><name pos:start="205:9" pos:end="205:17">read_only</name> <operator pos:start="205:19" pos:end="205:20">&amp;&amp;</operator> <name pos:start="205:22" pos:end="205:33">copy_on_read</name></expr>)</condition> <block pos:start="205:36" pos:end="211:5">{<block_content pos:start="207:9" pos:end="209:29">

        <expr_stmt pos:start="207:9" pos:end="207:75"><expr pos:start="207:9" pos:end="207:74"><call pos:start="207:9" pos:end="207:74"><name pos:start="207:9" pos:end="207:20">error_report</name><argument_list pos:start="207:21" pos:end="207:74">(<argument pos:start="207:22" pos:end="207:73"><expr pos:start="207:22" pos:end="207:73"><literal type="string" pos:start="207:22" pos:end="207:73">"warning: disabling copy-on-read on read-only drive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:29"><expr pos:start="209:9" pos:end="209:28"><name pos:start="209:9" pos:end="209:20">copy_on_read</name> <operator pos:start="209:22" pos:end="209:22">=</operator> <name pos:start="209:24" pos:end="209:28">false</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="215:5" pos:end="217:58"><expr pos:start="215:5" pos:end="217:57"><call pos:start="215:5" pos:end="217:57"><name pos:start="215:5" pos:end="215:13">qdict_put</name><argument_list pos:start="215:14" pos:end="217:57">(<argument pos:start="215:15" pos:end="215:21"><expr pos:start="215:15" pos:end="215:21"><name pos:start="215:15" pos:end="215:21">bs_opts</name></expr></argument>, <argument pos:start="215:24" pos:end="215:34"><expr pos:start="215:24" pos:end="215:34"><literal type="string" pos:start="215:24" pos:end="215:34">"read-only"</literal></expr></argument>,

              <argument pos:start="217:15" pos:end="217:56"><expr pos:start="217:15" pos:end="217:56"><call pos:start="217:15" pos:end="217:56"><name pos:start="217:15" pos:end="217:30">qstring_from_str</name><argument_list pos:start="217:31" pos:end="217:56">(<argument pos:start="217:32" pos:end="217:55"><expr pos:start="217:32" pos:end="217:55"><ternary pos:start="217:32" pos:end="217:55"><condition pos:start="217:32" pos:end="217:42"><expr pos:start="217:32" pos:end="217:40"><name pos:start="217:32" pos:end="217:40">read_only</name></expr> ?</condition><then pos:start="217:44" pos:end="217:47"> <expr pos:start="217:44" pos:end="217:47"><literal type="string" pos:start="217:44" pos:end="217:47">"on"</literal></expr> </then><else pos:start="217:49" pos:end="217:55">: <expr pos:start="217:51" pos:end="217:55"><literal type="string" pos:start="217:51" pos:end="217:55">"off"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="219:5" pos:end="221:60"><expr pos:start="219:5" pos:end="221:59"><call pos:start="219:5" pos:end="221:59"><name pos:start="219:5" pos:end="219:13">qdict_put</name><argument_list pos:start="219:14" pos:end="221:59">(<argument pos:start="219:15" pos:end="219:21"><expr pos:start="219:15" pos:end="219:21"><name pos:start="219:15" pos:end="219:21">bs_opts</name></expr></argument>, <argument pos:start="219:24" pos:end="219:37"><expr pos:start="219:24" pos:end="219:37"><literal type="string" pos:start="219:24" pos:end="219:37">"copy-on-read"</literal></expr></argument>,

              <argument pos:start="221:15" pos:end="221:58"><expr pos:start="221:15" pos:end="221:58"><call pos:start="221:15" pos:end="221:58"><name pos:start="221:15" pos:end="221:30">qstring_from_str</name><argument_list pos:start="221:31" pos:end="221:58">(<argument pos:start="221:32" pos:end="221:57"><expr pos:start="221:32" pos:end="221:57"><ternary pos:start="221:32" pos:end="221:57"><condition pos:start="221:32" pos:end="221:45"><expr pos:start="221:32" pos:end="221:43"><name pos:start="221:32" pos:end="221:43">copy_on_read</name></expr> ?</condition><then pos:start="221:47" pos:end="221:50"> <expr pos:start="221:47" pos:end="221:50"><literal type="string" pos:start="221:47" pos:end="221:50">"on"</literal></expr> </then><else pos:start="221:52" pos:end="221:57">:<expr pos:start="221:53" pos:end="221:57"><literal type="string" pos:start="221:53" pos:end="221:57">"off"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="225:5" pos:end="225:25">/* Controller type */</comment>

    <expr_stmt pos:start="227:5" pos:end="227:44"><expr pos:start="227:5" pos:end="227:43"><name pos:start="227:5" pos:end="227:9">value</name> <operator pos:start="227:11" pos:end="227:11">=</operator> <call pos:start="227:13" pos:end="227:43"><name pos:start="227:13" pos:end="227:24">qemu_opt_get</name><argument_list pos:start="227:25" pos:end="227:43">(<argument pos:start="227:26" pos:end="227:36"><expr pos:start="227:26" pos:end="227:36"><name pos:start="227:26" pos:end="227:36">legacy_opts</name></expr></argument>, <argument pos:start="227:39" pos:end="227:42"><expr pos:start="227:39" pos:end="227:42"><literal type="string" pos:start="227:39" pos:end="227:42">"if"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="229:5" pos:end="251:5"><if pos:start="229:5" pos:end="247:5">if <condition pos:start="229:8" pos:end="229:14">(<expr pos:start="229:9" pos:end="229:13"><name pos:start="229:9" pos:end="229:13">value</name></expr>)</condition> <block pos:start="229:16" pos:end="247:5">{<block_content pos:start="231:9" pos:end="245:9">

        <for pos:start="231:9" pos:end="237:9">for <control pos:start="231:13" pos:end="235:20">(<init pos:start="231:14" pos:end="231:22"><expr pos:start="231:14" pos:end="231:21"><name pos:start="231:14" pos:end="231:17">type</name> <operator pos:start="231:19" pos:end="231:19">=</operator> <literal type="number" pos:start="231:21" pos:end="231:21">0</literal></expr>;</init>

             <condition pos:start="233:14" pos:end="233:61"><expr pos:start="233:14" pos:end="233:60"><name pos:start="233:14" pos:end="233:17">type</name> <operator pos:start="233:19" pos:end="233:19">&lt;</operator> <name pos:start="233:21" pos:end="233:28">IF_COUNT</name> <operator pos:start="233:30" pos:end="233:31">&amp;&amp;</operator> <call pos:start="233:33" pos:end="233:60"><name pos:start="233:33" pos:end="233:38">strcmp</name><argument_list pos:start="233:39" pos:end="233:60">(<argument pos:start="233:40" pos:end="233:44"><expr pos:start="233:40" pos:end="233:44"><name pos:start="233:40" pos:end="233:44">value</name></expr></argument>, <argument pos:start="233:47" pos:end="233:59"><expr pos:start="233:47" pos:end="233:59"><name pos:start="233:47" pos:end="233:59"><name pos:start="233:47" pos:end="233:53">if_name</name><index pos:start="233:54" pos:end="233:59">[<expr pos:start="233:55" pos:end="233:58"><name pos:start="233:55" pos:end="233:58">type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition>

             <incr pos:start="235:14" pos:end="235:19"><expr pos:start="235:14" pos:end="235:19"><name pos:start="235:14" pos:end="235:17">type</name><operator pos:start="235:18" pos:end="235:19">++</operator></expr></incr>)</control> <block pos:start="235:22" pos:end="237:9">{<block_content>

        </block_content>}</block></for>

        <if_stmt pos:start="239:9" pos:end="245:9"><if pos:start="239:9" pos:end="245:9">if <condition pos:start="239:12" pos:end="239:29">(<expr pos:start="239:13" pos:end="239:28"><name pos:start="239:13" pos:end="239:16">type</name> <operator pos:start="239:18" pos:end="239:19">==</operator> <name pos:start="239:21" pos:end="239:28">IF_COUNT</name></expr>)</condition> <block pos:start="239:31" pos:end="245:9">{<block_content pos:start="241:13" pos:end="243:22">

            <expr_stmt pos:start="241:13" pos:end="241:61"><expr pos:start="241:13" pos:end="241:60"><call pos:start="241:13" pos:end="241:60"><name pos:start="241:13" pos:end="241:24">error_report</name><argument_list pos:start="241:25" pos:end="241:60">(<argument pos:start="241:26" pos:end="241:52"><expr pos:start="241:26" pos:end="241:52"><literal type="string" pos:start="241:26" pos:end="241:52">"unsupported bus type '%s'"</literal></expr></argument>, <argument pos:start="241:55" pos:end="241:59"><expr pos:start="241:55" pos:end="241:59"><name pos:start="241:55" pos:end="241:59">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="243:13" pos:end="243:22">goto <name pos:start="243:18" pos:end="243:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="247:7" pos:end="251:5">else <block pos:start="247:12" pos:end="251:5">{<block_content pos:start="249:9" pos:end="249:34">

        <expr_stmt pos:start="249:9" pos:end="249:34"><expr pos:start="249:9" pos:end="249:33"><name pos:start="249:9" pos:end="249:12">type</name> <operator pos:start="249:14" pos:end="249:14">=</operator> <name pos:start="249:16" pos:end="249:33">block_default_type</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="255:5" pos:end="255:18">/* Geometry */</comment>

    <expr_stmt pos:start="257:5" pos:end="257:56"><expr pos:start="257:5" pos:end="257:55"><name pos:start="257:5" pos:end="257:8">cyls</name>  <operator pos:start="257:11" pos:end="257:11">=</operator> <call pos:start="257:13" pos:end="257:55"><name pos:start="257:13" pos:end="257:31">qemu_opt_get_number</name><argument_list pos:start="257:32" pos:end="257:55">(<argument pos:start="257:33" pos:end="257:43"><expr pos:start="257:33" pos:end="257:43"><name pos:start="257:33" pos:end="257:43">legacy_opts</name></expr></argument>, <argument pos:start="257:46" pos:end="257:51"><expr pos:start="257:46" pos:end="257:51"><literal type="string" pos:start="257:46" pos:end="257:51">"cyls"</literal></expr></argument>, <argument pos:start="257:54" pos:end="257:54"><expr pos:start="257:54" pos:end="257:54"><literal type="number" pos:start="257:54" pos:end="257:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="259:5" pos:end="259:57"><expr pos:start="259:5" pos:end="259:56"><name pos:start="259:5" pos:end="259:9">heads</name> <operator pos:start="259:11" pos:end="259:11">=</operator> <call pos:start="259:13" pos:end="259:56"><name pos:start="259:13" pos:end="259:31">qemu_opt_get_number</name><argument_list pos:start="259:32" pos:end="259:56">(<argument pos:start="259:33" pos:end="259:43"><expr pos:start="259:33" pos:end="259:43"><name pos:start="259:33" pos:end="259:43">legacy_opts</name></expr></argument>, <argument pos:start="259:46" pos:end="259:52"><expr pos:start="259:46" pos:end="259:52"><literal type="string" pos:start="259:46" pos:end="259:52">"heads"</literal></expr></argument>, <argument pos:start="259:55" pos:end="259:55"><expr pos:start="259:55" pos:end="259:55"><literal type="number" pos:start="259:55" pos:end="259:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="261:5" pos:end="261:56"><expr pos:start="261:5" pos:end="261:55"><name pos:start="261:5" pos:end="261:8">secs</name>  <operator pos:start="261:11" pos:end="261:11">=</operator> <call pos:start="261:13" pos:end="261:55"><name pos:start="261:13" pos:end="261:31">qemu_opt_get_number</name><argument_list pos:start="261:32" pos:end="261:55">(<argument pos:start="261:33" pos:end="261:43"><expr pos:start="261:33" pos:end="261:43"><name pos:start="261:33" pos:end="261:43">legacy_opts</name></expr></argument>, <argument pos:start="261:46" pos:end="261:51"><expr pos:start="261:46" pos:end="261:51"><literal type="string" pos:start="261:46" pos:end="261:51">"secs"</literal></expr></argument>, <argument pos:start="261:54" pos:end="261:54"><expr pos:start="261:54" pos:end="261:54"><literal type="number" pos:start="261:54" pos:end="261:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="265:5" pos:end="291:5"><if pos:start="265:5" pos:end="291:5">if <condition pos:start="265:8" pos:end="265:30">(<expr pos:start="265:9" pos:end="265:29"><name pos:start="265:9" pos:end="265:12">cyls</name> <operator pos:start="265:14" pos:end="265:15">||</operator> <name pos:start="265:17" pos:end="265:21">heads</name> <operator pos:start="265:23" pos:end="265:24">||</operator> <name pos:start="265:26" pos:end="265:29">secs</name></expr>)</condition> <block pos:start="265:32" pos:end="291:5">{<block_content pos:start="267:9" pos:end="289:9">

        <if_stmt pos:start="267:9" pos:end="273:9"><if pos:start="267:9" pos:end="273:9">if <condition pos:start="267:12" pos:end="267:21">(<expr pos:start="267:13" pos:end="267:20"><name pos:start="267:13" pos:end="267:16">cyls</name> <operator pos:start="267:18" pos:end="267:18">&lt;</operator> <literal type="number" pos:start="267:20" pos:end="267:20">1</literal></expr>)</condition> <block pos:start="267:23" pos:end="273:9">{<block_content pos:start="269:13" pos:end="271:22">

            <expr_stmt pos:start="269:13" pos:end="269:57"><expr pos:start="269:13" pos:end="269:56"><call pos:start="269:13" pos:end="269:56"><name pos:start="269:13" pos:end="269:24">error_report</name><argument_list pos:start="269:25" pos:end="269:56">(<argument pos:start="269:26" pos:end="269:55"><expr pos:start="269:26" pos:end="269:55"><literal type="string" pos:start="269:26" pos:end="269:55">"invalid physical cyls number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="271:13" pos:end="271:22">goto <name pos:start="271:18" pos:end="271:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="275:9" pos:end="281:9"><if pos:start="275:9" pos:end="281:9">if <condition pos:start="275:12" pos:end="275:22">(<expr pos:start="275:13" pos:end="275:21"><name pos:start="275:13" pos:end="275:17">heads</name> <operator pos:start="275:19" pos:end="275:19">&lt;</operator> <literal type="number" pos:start="275:21" pos:end="275:21">1</literal></expr>)</condition> <block pos:start="275:24" pos:end="281:9">{<block_content pos:start="277:13" pos:end="279:22">

            <expr_stmt pos:start="277:13" pos:end="277:58"><expr pos:start="277:13" pos:end="277:57"><call pos:start="277:13" pos:end="277:57"><name pos:start="277:13" pos:end="277:24">error_report</name><argument_list pos:start="277:25" pos:end="277:57">(<argument pos:start="277:26" pos:end="277:56"><expr pos:start="277:26" pos:end="277:56"><literal type="string" pos:start="277:26" pos:end="277:56">"invalid physical heads number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="279:13" pos:end="279:22">goto <name pos:start="279:18" pos:end="279:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="283:9" pos:end="289:9"><if pos:start="283:9" pos:end="289:9">if <condition pos:start="283:12" pos:end="283:21">(<expr pos:start="283:13" pos:end="283:20"><name pos:start="283:13" pos:end="283:16">secs</name> <operator pos:start="283:18" pos:end="283:18">&lt;</operator> <literal type="number" pos:start="283:20" pos:end="283:20">1</literal></expr>)</condition> <block pos:start="283:23" pos:end="289:9">{<block_content pos:start="285:13" pos:end="287:22">

            <expr_stmt pos:start="285:13" pos:end="285:57"><expr pos:start="285:13" pos:end="285:56"><call pos:start="285:13" pos:end="285:56"><name pos:start="285:13" pos:end="285:24">error_report</name><argument_list pos:start="285:25" pos:end="285:56">(<argument pos:start="285:26" pos:end="285:55"><expr pos:start="285:26" pos:end="285:55"><literal type="string" pos:start="285:26" pos:end="285:55">"invalid physical secs number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="287:13" pos:end="287:22">goto <name pos:start="287:18" pos:end="287:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="295:5" pos:end="295:44"><expr pos:start="295:5" pos:end="295:43"><name pos:start="295:5" pos:end="295:15">translation</name> <operator pos:start="295:17" pos:end="295:17">=</operator> <name pos:start="295:19" pos:end="295:43">BIOS_ATA_TRANSLATION_AUTO</name></expr>;</expr_stmt>

    <expr_stmt pos:start="297:5" pos:end="297:47"><expr pos:start="297:5" pos:end="297:46"><name pos:start="297:5" pos:end="297:9">value</name> <operator pos:start="297:11" pos:end="297:11">=</operator> <call pos:start="297:13" pos:end="297:46"><name pos:start="297:13" pos:end="297:24">qemu_opt_get</name><argument_list pos:start="297:25" pos:end="297:46">(<argument pos:start="297:26" pos:end="297:36"><expr pos:start="297:26" pos:end="297:36"><name pos:start="297:26" pos:end="297:36">legacy_opts</name></expr></argument>, <argument pos:start="297:39" pos:end="297:45"><expr pos:start="297:39" pos:end="297:45"><literal type="string" pos:start="297:39" pos:end="297:45">"trans"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="299:5" pos:end="339:5"><if pos:start="299:5" pos:end="339:5">if <condition pos:start="299:8" pos:end="299:22">(<expr pos:start="299:9" pos:end="299:21"><name pos:start="299:9" pos:end="299:13">value</name> <operator pos:start="299:15" pos:end="299:16">!=</operator> <name pos:start="299:18" pos:end="299:21">NULL</name></expr>)</condition> <block pos:start="299:24" pos:end="339:5">{<block_content pos:start="301:9" pos:end="337:9">

        <if_stmt pos:start="301:9" pos:end="309:9"><if pos:start="301:9" pos:end="309:9">if <condition pos:start="301:12" pos:end="301:18">(<expr pos:start="301:13" pos:end="301:17"><operator pos:start="301:13" pos:end="301:13">!</operator><name pos:start="301:14" pos:end="301:17">cyls</name></expr>)</condition> <block pos:start="301:20" pos:end="309:9">{<block_content pos:start="303:13" pos:end="307:22">

            <expr_stmt pos:start="303:13" pos:end="305:32"><expr pos:start="303:13" pos:end="305:31"><call pos:start="303:13" pos:end="305:31"><name pos:start="303:13" pos:end="303:24">error_report</name><argument_list pos:start="303:25" pos:end="305:31">(<argument pos:start="303:26" pos:end="303:76"><expr pos:start="303:26" pos:end="303:76"><literal type="string" pos:start="303:26" pos:end="303:76">"'%s' trans must be used with cyls, heads and secs"</literal></expr></argument>,

                         <argument pos:start="305:26" pos:end="305:30"><expr pos:start="305:26" pos:end="305:30"><name pos:start="305:26" pos:end="305:30">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="307:13" pos:end="307:22">goto <name pos:start="307:18" pos:end="307:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="311:9" pos:end="337:9"><if pos:start="311:9" pos:end="315:9">if <condition pos:start="311:12" pos:end="311:35">(<expr pos:start="311:13" pos:end="311:34"><operator pos:start="311:13" pos:end="311:13">!</operator><call pos:start="311:14" pos:end="311:34"><name pos:start="311:14" pos:end="311:19">strcmp</name><argument_list pos:start="311:20" pos:end="311:34">(<argument pos:start="311:21" pos:end="311:25"><expr pos:start="311:21" pos:end="311:25"><name pos:start="311:21" pos:end="311:25">value</name></expr></argument>, <argument pos:start="311:28" pos:end="311:33"><expr pos:start="311:28" pos:end="311:33"><literal type="string" pos:start="311:28" pos:end="311:33">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="311:37" pos:end="315:9">{<block_content pos:start="313:13" pos:end="313:52">

            <expr_stmt pos:start="313:13" pos:end="313:52"><expr pos:start="313:13" pos:end="313:51"><name pos:start="313:13" pos:end="313:23">translation</name> <operator pos:start="313:25" pos:end="313:25">=</operator> <name pos:start="313:27" pos:end="313:51">BIOS_ATA_TRANSLATION_NONE</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="315:11" pos:end="319:9">else if <condition pos:start="315:19" pos:end="315:41">(<expr pos:start="315:20" pos:end="315:40"><operator pos:start="315:20" pos:end="315:20">!</operator><call pos:start="315:21" pos:end="315:40"><name pos:start="315:21" pos:end="315:26">strcmp</name><argument_list pos:start="315:27" pos:end="315:40">(<argument pos:start="315:28" pos:end="315:32"><expr pos:start="315:28" pos:end="315:32"><name pos:start="315:28" pos:end="315:32">value</name></expr></argument>, <argument pos:start="315:35" pos:end="315:39"><expr pos:start="315:35" pos:end="315:39"><literal type="string" pos:start="315:35" pos:end="315:39">"lba"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="315:43" pos:end="319:9">{<block_content pos:start="317:13" pos:end="317:51">

            <expr_stmt pos:start="317:13" pos:end="317:51"><expr pos:start="317:13" pos:end="317:50"><name pos:start="317:13" pos:end="317:23">translation</name> <operator pos:start="317:25" pos:end="317:25">=</operator> <name pos:start="317:27" pos:end="317:50">BIOS_ATA_TRANSLATION_LBA</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="319:11" pos:end="323:9">else if <condition pos:start="319:19" pos:end="319:43">(<expr pos:start="319:20" pos:end="319:42"><operator pos:start="319:20" pos:end="319:20">!</operator><call pos:start="319:21" pos:end="319:42"><name pos:start="319:21" pos:end="319:26">strcmp</name><argument_list pos:start="319:27" pos:end="319:42">(<argument pos:start="319:28" pos:end="319:32"><expr pos:start="319:28" pos:end="319:32"><name pos:start="319:28" pos:end="319:32">value</name></expr></argument>, <argument pos:start="319:35" pos:end="319:41"><expr pos:start="319:35" pos:end="319:41"><literal type="string" pos:start="319:35" pos:end="319:41">"large"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="319:45" pos:end="323:9">{<block_content pos:start="321:13" pos:end="321:53">

            <expr_stmt pos:start="321:13" pos:end="321:53"><expr pos:start="321:13" pos:end="321:52"><name pos:start="321:13" pos:end="321:23">translation</name> <operator pos:start="321:25" pos:end="321:25">=</operator> <name pos:start="321:27" pos:end="321:52">BIOS_ATA_TRANSLATION_LARGE</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="323:11" pos:end="327:9">else if <condition pos:start="323:19" pos:end="323:43">(<expr pos:start="323:20" pos:end="323:42"><operator pos:start="323:20" pos:end="323:20">!</operator><call pos:start="323:21" pos:end="323:42"><name pos:start="323:21" pos:end="323:26">strcmp</name><argument_list pos:start="323:27" pos:end="323:42">(<argument pos:start="323:28" pos:end="323:32"><expr pos:start="323:28" pos:end="323:32"><name pos:start="323:28" pos:end="323:32">value</name></expr></argument>, <argument pos:start="323:35" pos:end="323:41"><expr pos:start="323:35" pos:end="323:41"><literal type="string" pos:start="323:35" pos:end="323:41">"rechs"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="323:45" pos:end="327:9">{<block_content pos:start="325:13" pos:end="325:53">

            <expr_stmt pos:start="325:13" pos:end="325:53"><expr pos:start="325:13" pos:end="325:52"><name pos:start="325:13" pos:end="325:23">translation</name> <operator pos:start="325:25" pos:end="325:25">=</operator> <name pos:start="325:27" pos:end="325:52">BIOS_ATA_TRANSLATION_RECHS</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="327:11" pos:end="331:9">else if <condition pos:start="327:19" pos:end="327:42">(<expr pos:start="327:20" pos:end="327:41"><operator pos:start="327:20" pos:end="327:20">!</operator><call pos:start="327:21" pos:end="327:41"><name pos:start="327:21" pos:end="327:26">strcmp</name><argument_list pos:start="327:27" pos:end="327:41">(<argument pos:start="327:28" pos:end="327:32"><expr pos:start="327:28" pos:end="327:32"><name pos:start="327:28" pos:end="327:32">value</name></expr></argument>, <argument pos:start="327:35" pos:end="327:40"><expr pos:start="327:35" pos:end="327:40"><literal type="string" pos:start="327:35" pos:end="327:40">"auto"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="327:44" pos:end="331:9">{<block_content pos:start="329:13" pos:end="329:52">

            <expr_stmt pos:start="329:13" pos:end="329:52"><expr pos:start="329:13" pos:end="329:51"><name pos:start="329:13" pos:end="329:23">translation</name> <operator pos:start="329:25" pos:end="329:25">=</operator> <name pos:start="329:27" pos:end="329:51">BIOS_ATA_TRANSLATION_AUTO</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="331:11" pos:end="337:9">else <block pos:start="331:16" pos:end="337:9">{<block_content pos:start="333:13" pos:end="335:22">

            <expr_stmt pos:start="333:13" pos:end="333:65"><expr pos:start="333:13" pos:end="333:64"><call pos:start="333:13" pos:end="333:64"><name pos:start="333:13" pos:end="333:24">error_report</name><argument_list pos:start="333:25" pos:end="333:64">(<argument pos:start="333:26" pos:end="333:56"><expr pos:start="333:26" pos:end="333:56"><literal type="string" pos:start="333:26" pos:end="333:56">"'%s' invalid translation type"</literal></expr></argument>, <argument pos:start="333:59" pos:end="333:63"><expr pos:start="333:59" pos:end="333:63"><name pos:start="333:59" pos:end="333:63">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="335:13" pos:end="335:22">goto <name pos:start="335:18" pos:end="335:21">fail</name>;</goto>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="343:5" pos:end="353:5"><if pos:start="343:5" pos:end="353:5">if <condition pos:start="343:8" pos:end="343:29">(<expr pos:start="343:9" pos:end="343:28"><name pos:start="343:9" pos:end="343:13">media</name> <operator pos:start="343:15" pos:end="343:16">==</operator> <name pos:start="343:18" pos:end="343:28">MEDIA_CDROM</name></expr>)</condition> <block pos:start="343:31" pos:end="353:5">{<block_content pos:start="345:9" pos:end="351:9">

        <if_stmt pos:start="345:9" pos:end="351:9"><if pos:start="345:9" pos:end="351:9">if <condition pos:start="345:12" pos:end="345:34">(<expr pos:start="345:13" pos:end="345:33"><name pos:start="345:13" pos:end="345:16">cyls</name> <operator pos:start="345:18" pos:end="345:19">||</operator> <name pos:start="345:21" pos:end="345:24">secs</name> <operator pos:start="345:26" pos:end="345:27">||</operator> <name pos:start="345:29" pos:end="345:33">heads</name></expr>)</condition> <block pos:start="345:36" pos:end="351:9">{<block_content pos:start="347:13" pos:end="349:22">

            <expr_stmt pos:start="347:13" pos:end="347:62"><expr pos:start="347:13" pos:end="347:61"><call pos:start="347:13" pos:end="347:61"><name pos:start="347:13" pos:end="347:24">error_report</name><argument_list pos:start="347:25" pos:end="347:61">(<argument pos:start="347:26" pos:end="347:60"><expr pos:start="347:26" pos:end="347:60"><literal type="string" pos:start="347:26" pos:end="347:60">"CHS can't be set with media=cdrom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="349:13" pos:end="349:22">goto <name pos:start="349:18" pos:end="349:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="357:5" pos:end="359:64">/* Device address specified by bus/unit or index.

     * If none was specified, try to find the first free one. */</comment>

    <expr_stmt pos:start="361:5" pos:end="361:57"><expr pos:start="361:5" pos:end="361:56"><name pos:start="361:5" pos:end="361:10">bus_id</name>  <operator pos:start="361:13" pos:end="361:13">=</operator> <call pos:start="361:15" pos:end="361:56"><name pos:start="361:15" pos:end="361:33">qemu_opt_get_number</name><argument_list pos:start="361:34" pos:end="361:56">(<argument pos:start="361:35" pos:end="361:45"><expr pos:start="361:35" pos:end="361:45"><name pos:start="361:35" pos:end="361:45">legacy_opts</name></expr></argument>, <argument pos:start="361:48" pos:end="361:52"><expr pos:start="361:48" pos:end="361:52"><literal type="string" pos:start="361:48" pos:end="361:52">"bus"</literal></expr></argument>, <argument pos:start="361:55" pos:end="361:55"><expr pos:start="361:55" pos:end="361:55"><literal type="number" pos:start="361:55" pos:end="361:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="363:5" pos:end="363:59"><expr pos:start="363:5" pos:end="363:58"><name pos:start="363:5" pos:end="363:11">unit_id</name> <operator pos:start="363:13" pos:end="363:13">=</operator> <call pos:start="363:15" pos:end="363:58"><name pos:start="363:15" pos:end="363:33">qemu_opt_get_number</name><argument_list pos:start="363:34" pos:end="363:58">(<argument pos:start="363:35" pos:end="363:45"><expr pos:start="363:35" pos:end="363:45"><name pos:start="363:35" pos:end="363:45">legacy_opts</name></expr></argument>, <argument pos:start="363:48" pos:end="363:53"><expr pos:start="363:48" pos:end="363:53"><literal type="string" pos:start="363:48" pos:end="363:53">"unit"</literal></expr></argument>, <argument pos:start="363:56" pos:end="363:57"><expr pos:start="363:56" pos:end="363:57"><operator pos:start="363:56" pos:end="363:56">-</operator><literal type="number" pos:start="363:57" pos:end="363:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="365:5" pos:end="365:60"><expr pos:start="365:5" pos:end="365:59"><name pos:start="365:5" pos:end="365:9">index</name>   <operator pos:start="365:13" pos:end="365:13">=</operator> <call pos:start="365:15" pos:end="365:59"><name pos:start="365:15" pos:end="365:33">qemu_opt_get_number</name><argument_list pos:start="365:34" pos:end="365:59">(<argument pos:start="365:35" pos:end="365:45"><expr pos:start="365:35" pos:end="365:45"><name pos:start="365:35" pos:end="365:45">legacy_opts</name></expr></argument>, <argument pos:start="365:48" pos:end="365:54"><expr pos:start="365:48" pos:end="365:54"><literal type="string" pos:start="365:48" pos:end="365:54">"index"</literal></expr></argument>, <argument pos:start="365:57" pos:end="365:58"><expr pos:start="365:57" pos:end="365:58"><operator pos:start="365:57" pos:end="365:57">-</operator><literal type="number" pos:start="365:58" pos:end="365:58">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="369:5" pos:end="369:33"><expr pos:start="369:5" pos:end="369:32"><name pos:start="369:5" pos:end="369:12">max_devs</name> <operator pos:start="369:14" pos:end="369:14">=</operator> <name pos:start="369:16" pos:end="369:32"><name pos:start="369:16" pos:end="369:26">if_max_devs</name><index pos:start="369:27" pos:end="369:32">[<expr pos:start="369:28" pos:end="369:31"><name pos:start="369:28" pos:end="369:31">type</name></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="373:5" pos:end="387:5"><if pos:start="373:5" pos:end="387:5">if <condition pos:start="373:8" pos:end="373:20">(<expr pos:start="373:9" pos:end="373:19"><name pos:start="373:9" pos:end="373:13">index</name> <operator pos:start="373:15" pos:end="373:16">!=</operator> <operator pos:start="373:18" pos:end="373:18">-</operator><literal type="number" pos:start="373:19" pos:end="373:19">1</literal></expr>)</condition> <block pos:start="373:22" pos:end="387:5">{<block_content pos:start="375:9" pos:end="385:54">

        <if_stmt pos:start="375:9" pos:end="381:9"><if pos:start="375:9" pos:end="381:9">if <condition pos:start="375:12" pos:end="375:41">(<expr pos:start="375:13" pos:end="375:40"><name pos:start="375:13" pos:end="375:18">bus_id</name> <operator pos:start="375:20" pos:end="375:21">!=</operator> <literal type="number" pos:start="375:23" pos:end="375:23">0</literal> <operator pos:start="375:25" pos:end="375:26">||</operator> <name pos:start="375:28" pos:end="375:34">unit_id</name> <operator pos:start="375:36" pos:end="375:37">!=</operator> <operator pos:start="375:39" pos:end="375:39">-</operator><literal type="number" pos:start="375:40" pos:end="375:40">1</literal></expr>)</condition> <block pos:start="375:43" pos:end="381:9">{<block_content pos:start="377:13" pos:end="379:22">

            <expr_stmt pos:start="377:13" pos:end="377:67"><expr pos:start="377:13" pos:end="377:66"><call pos:start="377:13" pos:end="377:66"><name pos:start="377:13" pos:end="377:24">error_report</name><argument_list pos:start="377:25" pos:end="377:66">(<argument pos:start="377:26" pos:end="377:65"><expr pos:start="377:26" pos:end="377:65"><literal type="string" pos:start="377:26" pos:end="377:65">"index cannot be used with bus and unit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="379:13" pos:end="379:22">goto <name pos:start="379:18" pos:end="379:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="383:9" pos:end="383:52"><expr pos:start="383:9" pos:end="383:51"><name pos:start="383:9" pos:end="383:14">bus_id</name> <operator pos:start="383:16" pos:end="383:16">=</operator> <call pos:start="383:18" pos:end="383:51"><name pos:start="383:18" pos:end="383:38">drive_index_to_bus_id</name><argument_list pos:start="383:39" pos:end="383:51">(<argument pos:start="383:40" pos:end="383:43"><expr pos:start="383:40" pos:end="383:43"><name pos:start="383:40" pos:end="383:43">type</name></expr></argument>, <argument pos:start="383:46" pos:end="383:50"><expr pos:start="383:46" pos:end="383:50"><name pos:start="383:46" pos:end="383:50">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="385:9" pos:end="385:54"><expr pos:start="385:9" pos:end="385:53"><name pos:start="385:9" pos:end="385:15">unit_id</name> <operator pos:start="385:17" pos:end="385:17">=</operator> <call pos:start="385:19" pos:end="385:53"><name pos:start="385:19" pos:end="385:40">drive_index_to_unit_id</name><argument_list pos:start="385:41" pos:end="385:53">(<argument pos:start="385:42" pos:end="385:45"><expr pos:start="385:42" pos:end="385:45"><name pos:start="385:42" pos:end="385:45">type</name></expr></argument>, <argument pos:start="385:48" pos:end="385:52"><expr pos:start="385:48" pos:end="385:52"><name pos:start="385:48" pos:end="385:52">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="391:5" pos:end="409:5"><if pos:start="391:5" pos:end="409:5">if <condition pos:start="391:8" pos:end="391:22">(<expr pos:start="391:9" pos:end="391:21"><name pos:start="391:9" pos:end="391:15">unit_id</name> <operator pos:start="391:17" pos:end="391:18">==</operator> <operator pos:start="391:20" pos:end="391:20">-</operator><literal type="number" pos:start="391:21" pos:end="391:21">1</literal></expr>)</condition> <block pos:start="391:24" pos:end="409:5">{<block_content pos:start="393:8" pos:end="407:8">

       <expr_stmt pos:start="393:8" pos:end="393:19"><expr pos:start="393:8" pos:end="393:18"><name pos:start="393:8" pos:end="393:14">unit_id</name> <operator pos:start="393:16" pos:end="393:16">=</operator> <literal type="number" pos:start="393:18" pos:end="393:18">0</literal></expr>;</expr_stmt>

       <while pos:start="395:8" pos:end="407:8">while <condition pos:start="395:14" pos:end="395:55">(<expr pos:start="395:15" pos:end="395:54"><call pos:start="395:15" pos:end="395:46"><name pos:start="395:15" pos:end="395:23">drive_get</name><argument_list pos:start="395:24" pos:end="395:46">(<argument pos:start="395:25" pos:end="395:28"><expr pos:start="395:25" pos:end="395:28"><name pos:start="395:25" pos:end="395:28">type</name></expr></argument>, <argument pos:start="395:31" pos:end="395:36"><expr pos:start="395:31" pos:end="395:36"><name pos:start="395:31" pos:end="395:36">bus_id</name></expr></argument>, <argument pos:start="395:39" pos:end="395:45"><expr pos:start="395:39" pos:end="395:45"><name pos:start="395:39" pos:end="395:45">unit_id</name></expr></argument>)</argument_list></call> <operator pos:start="395:48" pos:end="395:49">!=</operator> <name pos:start="395:51" pos:end="395:54">NULL</name></expr>)</condition> <block pos:start="395:57" pos:end="407:8">{<block_content pos:start="397:12" pos:end="405:12">

           <expr_stmt pos:start="397:12" pos:end="397:21"><expr pos:start="397:12" pos:end="397:20"><name pos:start="397:12" pos:end="397:18">unit_id</name><operator pos:start="397:19" pos:end="397:20">++</operator></expr>;</expr_stmt>

           <if_stmt pos:start="399:12" pos:end="405:12"><if pos:start="399:12" pos:end="405:12">if <condition pos:start="399:15" pos:end="399:47">(<expr pos:start="399:16" pos:end="399:46"><name pos:start="399:16" pos:end="399:23">max_devs</name> <operator pos:start="399:25" pos:end="399:26">&amp;&amp;</operator> <name pos:start="399:28" pos:end="399:34">unit_id</name> <operator pos:start="399:36" pos:end="399:37">&gt;=</operator> <name pos:start="399:39" pos:end="399:46">max_devs</name></expr>)</condition> <block pos:start="399:49" pos:end="405:12">{<block_content pos:start="401:16" pos:end="403:24">

               <expr_stmt pos:start="401:16" pos:end="401:35"><expr pos:start="401:16" pos:end="401:34"><name pos:start="401:16" pos:end="401:22">unit_id</name> <operator pos:start="401:24" pos:end="401:25">-=</operator> <name pos:start="401:27" pos:end="401:34">max_devs</name></expr>;</expr_stmt>

               <expr_stmt pos:start="403:16" pos:end="403:24"><expr pos:start="403:16" pos:end="403:23"><name pos:start="403:16" pos:end="403:21">bus_id</name><operator pos:start="403:22" pos:end="403:23">++</operator></expr>;</expr_stmt>

           </block_content>}</block></if></if_stmt>

       </block_content>}</block></while>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="413:5" pos:end="419:5"><if pos:start="413:5" pos:end="419:5">if <condition pos:start="413:8" pos:end="413:40">(<expr pos:start="413:9" pos:end="413:39"><name pos:start="413:9" pos:end="413:16">max_devs</name> <operator pos:start="413:18" pos:end="413:19">&amp;&amp;</operator> <name pos:start="413:21" pos:end="413:27">unit_id</name> <operator pos:start="413:29" pos:end="413:30">&gt;=</operator> <name pos:start="413:32" pos:end="413:39">max_devs</name></expr>)</condition> <block pos:start="413:42" pos:end="419:5">{<block_content pos:start="415:9" pos:end="417:18">

        <expr_stmt pos:start="415:9" pos:end="415:75"><expr pos:start="415:9" pos:end="415:74"><call pos:start="415:9" pos:end="415:74"><name pos:start="415:9" pos:end="415:20">error_report</name><argument_list pos:start="415:21" pos:end="415:74">(<argument pos:start="415:22" pos:end="415:50"><expr pos:start="415:22" pos:end="415:50"><literal type="string" pos:start="415:22" pos:end="415:50">"unit %d too big (max is %d)"</literal></expr></argument>, <argument pos:start="415:53" pos:end="415:59"><expr pos:start="415:53" pos:end="415:59"><name pos:start="415:53" pos:end="415:59">unit_id</name></expr></argument>, <argument pos:start="415:62" pos:end="415:73"><expr pos:start="415:62" pos:end="415:73"><name pos:start="415:62" pos:end="415:69">max_devs</name> <operator pos:start="415:71" pos:end="415:71">-</operator> <literal type="number" pos:start="415:73" pos:end="415:73">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="417:9" pos:end="417:18">goto <name pos:start="417:14" pos:end="417:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="423:5" pos:end="431:5"><if pos:start="423:5" pos:end="431:5">if <condition pos:start="423:8" pos:end="423:49">(<expr pos:start="423:9" pos:end="423:48"><call pos:start="423:9" pos:end="423:40"><name pos:start="423:9" pos:end="423:17">drive_get</name><argument_list pos:start="423:18" pos:end="423:40">(<argument pos:start="423:19" pos:end="423:22"><expr pos:start="423:19" pos:end="423:22"><name pos:start="423:19" pos:end="423:22">type</name></expr></argument>, <argument pos:start="423:25" pos:end="423:30"><expr pos:start="423:25" pos:end="423:30"><name pos:start="423:25" pos:end="423:30">bus_id</name></expr></argument>, <argument pos:start="423:33" pos:end="423:39"><expr pos:start="423:33" pos:end="423:39"><name pos:start="423:33" pos:end="423:39">unit_id</name></expr></argument>)</argument_list></call> <operator pos:start="423:42" pos:end="423:43">!=</operator> <name pos:start="423:45" pos:end="423:48">NULL</name></expr>)</condition> <block pos:start="423:51" pos:end="431:5">{<block_content pos:start="425:9" pos:end="429:18">

        <expr_stmt pos:start="425:9" pos:end="427:45"><expr pos:start="425:9" pos:end="427:44"><call pos:start="425:9" pos:end="427:44"><name pos:start="425:9" pos:end="425:20">error_report</name><argument_list pos:start="425:21" pos:end="427:44">(<argument pos:start="425:22" pos:end="425:67"><expr pos:start="425:22" pos:end="425:67"><literal type="string" pos:start="425:22" pos:end="425:67">"drive with bus=%d, unit=%d (index=%d) exists"</literal></expr></argument>,

                     <argument pos:start="427:22" pos:end="427:27"><expr pos:start="427:22" pos:end="427:27"><name pos:start="427:22" pos:end="427:27">bus_id</name></expr></argument>, <argument pos:start="427:30" pos:end="427:36"><expr pos:start="427:30" pos:end="427:36"><name pos:start="427:30" pos:end="427:36">unit_id</name></expr></argument>, <argument pos:start="427:39" pos:end="427:43"><expr pos:start="427:39" pos:end="427:43"><name pos:start="427:39" pos:end="427:43">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="429:9" pos:end="429:18">goto <name pos:start="429:14" pos:end="429:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="435:5" pos:end="435:38">/* no id supplied -&gt; create one */</comment>

    <if_stmt pos:start="437:5" pos:end="467:5"><if pos:start="437:5" pos:end="467:5">if <condition pos:start="437:8" pos:end="437:39">(<expr pos:start="437:9" pos:end="437:38"><call pos:start="437:9" pos:end="437:30"><name pos:start="437:9" pos:end="437:20">qemu_opts_id</name><argument_list pos:start="437:21" pos:end="437:30">(<argument pos:start="437:22" pos:end="437:29"><expr pos:start="437:22" pos:end="437:29"><name pos:start="437:22" pos:end="437:29">all_opts</name></expr></argument>)</argument_list></call> <operator pos:start="437:32" pos:end="437:33">==</operator> <name pos:start="437:35" pos:end="437:38">NULL</name></expr>)</condition> <block pos:start="437:41" pos:end="467:5">{<block_content pos:start="439:9" pos:end="465:23">

        <decl_stmt pos:start="439:9" pos:end="439:21"><decl pos:start="439:9" pos:end="439:20"><type pos:start="439:9" pos:end="439:14"><name pos:start="439:9" pos:end="439:12">char</name> <modifier pos:start="439:14" pos:end="439:14">*</modifier></type><name pos:start="439:15" pos:end="439:20">new_id</name></decl>;</decl_stmt>

        <decl_stmt pos:start="441:9" pos:end="441:34"><decl pos:start="441:9" pos:end="441:33"><type pos:start="441:9" pos:end="441:20"><specifier pos:start="441:9" pos:end="441:13">const</specifier> <name pos:start="441:15" pos:end="441:18">char</name> <modifier pos:start="441:20" pos:end="441:20">*</modifier></type><name pos:start="441:21" pos:end="441:28">mediastr</name> <init pos:start="441:30" pos:end="441:33">= <expr pos:start="441:32" pos:end="441:33"><literal type="string" pos:start="441:32" pos:end="441:33">""</literal></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="443:9" pos:end="447:9"><if pos:start="443:9" pos:end="447:9">if <condition pos:start="443:12" pos:end="443:46">(<expr pos:start="443:13" pos:end="443:45"><name pos:start="443:13" pos:end="443:16">type</name> <operator pos:start="443:18" pos:end="443:19">==</operator> <name pos:start="443:21" pos:end="443:26">IF_IDE</name> <operator pos:start="443:28" pos:end="443:29">||</operator> <name pos:start="443:31" pos:end="443:34">type</name> <operator pos:start="443:36" pos:end="443:37">==</operator> <name pos:start="443:39" pos:end="443:45">IF_SCSI</name></expr>)</condition> <block pos:start="443:48" pos:end="447:9">{<block_content pos:start="445:13" pos:end="445:62">

            <expr_stmt pos:start="445:13" pos:end="445:62"><expr pos:start="445:13" pos:end="445:61"><name pos:start="445:13" pos:end="445:20">mediastr</name> <operator pos:start="445:22" pos:end="445:22">=</operator> <ternary pos:start="445:24" pos:end="445:61"><condition pos:start="445:24" pos:end="445:47"><expr pos:start="445:24" pos:end="445:45"><operator pos:start="445:24" pos:end="445:24">(</operator><name pos:start="445:25" pos:end="445:29">media</name> <operator pos:start="445:31" pos:end="445:32">==</operator> <name pos:start="445:34" pos:end="445:44">MEDIA_CDROM</name><operator pos:start="445:45" pos:end="445:45">)</operator></expr> ?</condition><then pos:start="445:49" pos:end="445:53"> <expr pos:start="445:49" pos:end="445:53"><literal type="string" pos:start="445:49" pos:end="445:53">"-cd"</literal></expr> </then><else pos:start="445:55" pos:end="445:61">: <expr pos:start="445:57" pos:end="445:61"><literal type="string" pos:start="445:57" pos:end="445:61">"-hd"</literal></expr></else></ternary></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="449:9" pos:end="461:9"><if pos:start="449:9" pos:end="455:9">if <condition pos:start="449:12" pos:end="449:21">(<expr pos:start="449:13" pos:end="449:20"><name pos:start="449:13" pos:end="449:20">max_devs</name></expr>)</condition> <block pos:start="449:23" pos:end="455:9">{<block_content pos:start="451:13" pos:end="453:56">

            <expr_stmt pos:start="451:13" pos:end="453:56"><expr pos:start="451:13" pos:end="453:55"><name pos:start="451:13" pos:end="451:18">new_id</name> <operator pos:start="451:20" pos:end="451:20">=</operator> <call pos:start="451:22" pos:end="453:55"><name pos:start="451:22" pos:end="451:36">g_strdup_printf</name><argument_list pos:start="451:37" pos:end="453:55">(<argument pos:start="451:38" pos:end="451:47"><expr pos:start="451:38" pos:end="451:47"><literal type="string" pos:start="451:38" pos:end="451:47">"%s%i%s%i"</literal></expr></argument>, <argument pos:start="451:50" pos:end="451:62"><expr pos:start="451:50" pos:end="451:62"><name pos:start="451:50" pos:end="451:62"><name pos:start="451:50" pos:end="451:56">if_name</name><index pos:start="451:57" pos:end="451:62">[<expr pos:start="451:58" pos:end="451:61"><name pos:start="451:58" pos:end="451:61">type</name></expr>]</index></name></expr></argument>, <argument pos:start="451:65" pos:end="451:70"><expr pos:start="451:65" pos:end="451:70"><name pos:start="451:65" pos:end="451:70">bus_id</name></expr></argument>,

                                     <argument pos:start="453:38" pos:end="453:45"><expr pos:start="453:38" pos:end="453:45"><name pos:start="453:38" pos:end="453:45">mediastr</name></expr></argument>, <argument pos:start="453:48" pos:end="453:54"><expr pos:start="453:48" pos:end="453:54"><name pos:start="453:48" pos:end="453:54">unit_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="455:11" pos:end="461:9">else <block pos:start="455:16" pos:end="461:9">{<block_content pos:start="457:13" pos:end="459:56">

            <expr_stmt pos:start="457:13" pos:end="459:56"><expr pos:start="457:13" pos:end="459:55"><name pos:start="457:13" pos:end="457:18">new_id</name> <operator pos:start="457:20" pos:end="457:20">=</operator> <call pos:start="457:22" pos:end="459:55"><name pos:start="457:22" pos:end="457:36">g_strdup_printf</name><argument_list pos:start="457:37" pos:end="459:55">(<argument pos:start="457:38" pos:end="457:45"><expr pos:start="457:38" pos:end="457:45"><literal type="string" pos:start="457:38" pos:end="457:45">"%s%s%i"</literal></expr></argument>, <argument pos:start="457:48" pos:end="457:60"><expr pos:start="457:48" pos:end="457:60"><name pos:start="457:48" pos:end="457:60"><name pos:start="457:48" pos:end="457:54">if_name</name><index pos:start="457:55" pos:end="457:60">[<expr pos:start="457:56" pos:end="457:59"><name pos:start="457:56" pos:end="457:59">type</name></expr>]</index></name></expr></argument>,

                                     <argument pos:start="459:38" pos:end="459:45"><expr pos:start="459:38" pos:end="459:45"><name pos:start="459:38" pos:end="459:45">mediastr</name></expr></argument>, <argument pos:start="459:48" pos:end="459:54"><expr pos:start="459:48" pos:end="459:54"><name pos:start="459:48" pos:end="459:54">unit_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="463:9" pos:end="463:59"><expr pos:start="463:9" pos:end="463:58"><call pos:start="463:9" pos:end="463:58"><name pos:start="463:9" pos:end="463:17">qdict_put</name><argument_list pos:start="463:18" pos:end="463:58">(<argument pos:start="463:19" pos:end="463:25"><expr pos:start="463:19" pos:end="463:25"><name pos:start="463:19" pos:end="463:25">bs_opts</name></expr></argument>, <argument pos:start="463:28" pos:end="463:31"><expr pos:start="463:28" pos:end="463:31"><literal type="string" pos:start="463:28" pos:end="463:31">"id"</literal></expr></argument>, <argument pos:start="463:34" pos:end="463:57"><expr pos:start="463:34" pos:end="463:57"><call pos:start="463:34" pos:end="463:57"><name pos:start="463:34" pos:end="463:49">qstring_from_str</name><argument_list pos:start="463:50" pos:end="463:57">(<argument pos:start="463:51" pos:end="463:56"><expr pos:start="463:51" pos:end="463:56"><name pos:start="463:51" pos:end="463:56">new_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="465:9" pos:end="465:23"><expr pos:start="465:9" pos:end="465:22"><call pos:start="465:9" pos:end="465:22"><name pos:start="465:9" pos:end="465:14">g_free</name><argument_list pos:start="465:15" pos:end="465:22">(<argument pos:start="465:16" pos:end="465:21"><expr pos:start="465:16" pos:end="465:21"><name pos:start="465:16" pos:end="465:21">new_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="471:5" pos:end="471:33">/* Add virtio block device */</comment>

    <expr_stmt pos:start="473:5" pos:end="473:48"><expr pos:start="473:5" pos:end="473:47"><name pos:start="473:5" pos:end="473:11">devaddr</name> <operator pos:start="473:13" pos:end="473:13">=</operator> <call pos:start="473:15" pos:end="473:47"><name pos:start="473:15" pos:end="473:26">qemu_opt_get</name><argument_list pos:start="473:27" pos:end="473:47">(<argument pos:start="473:28" pos:end="473:38"><expr pos:start="473:28" pos:end="473:38"><name pos:start="473:28" pos:end="473:38">legacy_opts</name></expr></argument>, <argument pos:start="473:41" pos:end="473:46"><expr pos:start="473:41" pos:end="473:46"><literal type="string" pos:start="473:41" pos:end="473:46">"addr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="475:5" pos:end="481:5"><if pos:start="475:5" pos:end="481:5">if <condition pos:start="475:8" pos:end="475:37">(<expr pos:start="475:9" pos:end="475:36"><name pos:start="475:9" pos:end="475:15">devaddr</name> <operator pos:start="475:17" pos:end="475:18">&amp;&amp;</operator> <name pos:start="475:20" pos:end="475:23">type</name> <operator pos:start="475:25" pos:end="475:26">!=</operator> <name pos:start="475:28" pos:end="475:36">IF_VIRTIO</name></expr>)</condition> <block pos:start="475:39" pos:end="481:5">{<block_content pos:start="477:9" pos:end="479:18">

        <expr_stmt pos:start="477:9" pos:end="477:63"><expr pos:start="477:9" pos:end="477:62"><call pos:start="477:9" pos:end="477:62"><name pos:start="477:9" pos:end="477:20">error_report</name><argument_list pos:start="477:21" pos:end="477:62">(<argument pos:start="477:22" pos:end="477:61"><expr pos:start="477:22" pos:end="477:61"><literal type="string" pos:start="477:22" pos:end="477:61">"addr is not supported by this bus type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="479:9" pos:end="479:18">goto <name pos:start="479:14" pos:end="479:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="485:5" pos:end="511:5"><if pos:start="485:5" pos:end="511:5">if <condition pos:start="485:8" pos:end="485:26">(<expr pos:start="485:9" pos:end="485:25"><name pos:start="485:9" pos:end="485:12">type</name> <operator pos:start="485:14" pos:end="485:15">==</operator> <name pos:start="485:17" pos:end="485:25">IF_VIRTIO</name></expr>)</condition> <block pos:start="485:28" pos:end="511:5">{<block_content pos:start="487:9" pos:end="509:9">

        <decl_stmt pos:start="487:9" pos:end="487:26"><decl pos:start="487:9" pos:end="487:25"><type pos:start="487:9" pos:end="487:18"><name pos:start="487:9" pos:end="487:16">QemuOpts</name> <modifier pos:start="487:18" pos:end="487:18">*</modifier></type><name pos:start="487:19" pos:end="487:25">devopts</name></decl>;</decl_stmt>

        <expr_stmt pos:start="489:9" pos:end="491:49"><expr pos:start="489:9" pos:end="491:48"><name pos:start="489:9" pos:end="489:15">devopts</name> <operator pos:start="489:17" pos:end="489:17">=</operator> <call pos:start="489:19" pos:end="491:48"><name pos:start="489:19" pos:end="489:34">qemu_opts_create</name><argument_list pos:start="489:35" pos:end="491:48">(<argument pos:start="489:36" pos:end="489:59"><expr pos:start="489:36" pos:end="489:59"><call pos:start="489:36" pos:end="489:59"><name pos:start="489:36" pos:end="489:49">qemu_find_opts</name><argument_list pos:start="489:50" pos:end="489:59">(<argument pos:start="489:51" pos:end="489:58"><expr pos:start="489:51" pos:end="489:58"><literal type="string" pos:start="489:51" pos:end="489:58">"device"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="489:62" pos:end="489:65"><expr pos:start="489:62" pos:end="489:65"><name pos:start="489:62" pos:end="489:65">NULL</name></expr></argument>, <argument pos:start="489:68" pos:end="489:68"><expr pos:start="489:68" pos:end="489:68"><literal type="number" pos:start="489:68" pos:end="489:68">0</literal></expr></argument>,

                                   <argument pos:start="491:36" pos:end="491:47"><expr pos:start="491:36" pos:end="491:47"><operator pos:start="491:36" pos:end="491:36">&amp;</operator><name pos:start="491:37" pos:end="491:47">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="493:9" pos:end="501:9"><if pos:start="493:9" pos:end="497:9">if <condition pos:start="493:12" pos:end="493:41">(<expr pos:start="493:13" pos:end="493:40"><name pos:start="493:13" pos:end="493:21">arch_type</name> <operator pos:start="493:23" pos:end="493:24">==</operator> <name pos:start="493:26" pos:end="493:40">QEMU_ARCH_S390X</name></expr>)</condition> <block pos:start="493:43" pos:end="497:9">{<block_content pos:start="495:13" pos:end="495:63">

            <expr_stmt pos:start="495:13" pos:end="495:63"><expr pos:start="495:13" pos:end="495:62"><call pos:start="495:13" pos:end="495:62"><name pos:start="495:13" pos:end="495:24">qemu_opt_set</name><argument_list pos:start="495:25" pos:end="495:62">(<argument pos:start="495:26" pos:end="495:32"><expr pos:start="495:26" pos:end="495:32"><name pos:start="495:26" pos:end="495:32">devopts</name></expr></argument>, <argument pos:start="495:35" pos:end="495:42"><expr pos:start="495:35" pos:end="495:42"><literal type="string" pos:start="495:35" pos:end="495:42">"driver"</literal></expr></argument>, <argument pos:start="495:45" pos:end="495:61"><expr pos:start="495:45" pos:end="495:61"><literal type="string" pos:start="495:45" pos:end="495:61">"virtio-blk-s390"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="497:11" pos:end="501:9">else <block pos:start="497:16" pos:end="501:9">{<block_content pos:start="499:13" pos:end="499:62">

            <expr_stmt pos:start="499:13" pos:end="499:62"><expr pos:start="499:13" pos:end="499:61"><call pos:start="499:13" pos:end="499:61"><name pos:start="499:13" pos:end="499:24">qemu_opt_set</name><argument_list pos:start="499:25" pos:end="499:61">(<argument pos:start="499:26" pos:end="499:32"><expr pos:start="499:26" pos:end="499:32"><name pos:start="499:26" pos:end="499:32">devopts</name></expr></argument>, <argument pos:start="499:35" pos:end="499:42"><expr pos:start="499:35" pos:end="499:42"><literal type="string" pos:start="499:35" pos:end="499:42">"driver"</literal></expr></argument>, <argument pos:start="499:45" pos:end="499:60"><expr pos:start="499:45" pos:end="499:60"><literal type="string" pos:start="499:45" pos:end="499:60">"virtio-blk-pci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="503:9" pos:end="503:69"><expr pos:start="503:9" pos:end="503:68"><call pos:start="503:9" pos:end="503:68"><name pos:start="503:9" pos:end="503:20">qemu_opt_set</name><argument_list pos:start="503:21" pos:end="503:68">(<argument pos:start="503:22" pos:end="503:28"><expr pos:start="503:22" pos:end="503:28"><name pos:start="503:22" pos:end="503:28">devopts</name></expr></argument>, <argument pos:start="503:31" pos:end="503:37"><expr pos:start="503:31" pos:end="503:37"><literal type="string" pos:start="503:31" pos:end="503:37">"drive"</literal></expr></argument>, <argument pos:start="503:40" pos:end="503:67"><expr pos:start="503:40" pos:end="503:67"><call pos:start="503:40" pos:end="503:67"><name pos:start="503:40" pos:end="503:52">qdict_get_str</name><argument_list pos:start="503:53" pos:end="503:67">(<argument pos:start="503:54" pos:end="503:60"><expr pos:start="503:54" pos:end="503:60"><name pos:start="503:54" pos:end="503:60">bs_opts</name></expr></argument>, <argument pos:start="503:63" pos:end="503:66"><expr pos:start="503:63" pos:end="503:66"><literal type="string" pos:start="503:63" pos:end="503:66">"id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="505:9" pos:end="509:9"><if pos:start="505:9" pos:end="509:9">if <condition pos:start="505:12" pos:end="505:20">(<expr pos:start="505:13" pos:end="505:19"><name pos:start="505:13" pos:end="505:19">devaddr</name></expr>)</condition> <block pos:start="505:22" pos:end="509:9">{<block_content pos:start="507:13" pos:end="507:51">

            <expr_stmt pos:start="507:13" pos:end="507:51"><expr pos:start="507:13" pos:end="507:50"><call pos:start="507:13" pos:end="507:50"><name pos:start="507:13" pos:end="507:24">qemu_opt_set</name><argument_list pos:start="507:25" pos:end="507:50">(<argument pos:start="507:26" pos:end="507:32"><expr pos:start="507:26" pos:end="507:32"><name pos:start="507:26" pos:end="507:32">devopts</name></expr></argument>, <argument pos:start="507:35" pos:end="507:40"><expr pos:start="507:35" pos:end="507:40"><literal type="string" pos:start="507:35" pos:end="507:40">"addr"</literal></expr></argument>, <argument pos:start="507:43" pos:end="507:49"><expr pos:start="507:43" pos:end="507:49"><name pos:start="507:43" pos:end="507:49">devaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="515:5" pos:end="515:49"><expr pos:start="515:5" pos:end="515:48"><name pos:start="515:5" pos:end="515:12">filename</name> <operator pos:start="515:14" pos:end="515:14">=</operator> <call pos:start="515:16" pos:end="515:48"><name pos:start="515:16" pos:end="515:27">qemu_opt_get</name><argument_list pos:start="515:28" pos:end="515:48">(<argument pos:start="515:29" pos:end="515:39"><expr pos:start="515:29" pos:end="515:39"><name pos:start="515:29" pos:end="515:39">legacy_opts</name></expr></argument>, <argument pos:start="515:42" pos:end="515:47"><expr pos:start="515:42" pos:end="515:47"><literal type="string" pos:start="515:42" pos:end="515:47">"file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="519:5" pos:end="519:55">/* Check werror/rerror compatibility with if=... */</comment>

    <expr_stmt pos:start="521:5" pos:end="521:49"><expr pos:start="521:5" pos:end="521:48"><name pos:start="521:5" pos:end="521:10">werror</name> <operator pos:start="521:12" pos:end="521:12">=</operator> <call pos:start="521:14" pos:end="521:48"><name pos:start="521:14" pos:end="521:25">qemu_opt_get</name><argument_list pos:start="521:26" pos:end="521:48">(<argument pos:start="521:27" pos:end="521:37"><expr pos:start="521:27" pos:end="521:37"><name pos:start="521:27" pos:end="521:37">legacy_opts</name></expr></argument>, <argument pos:start="521:40" pos:end="521:47"><expr pos:start="521:40" pos:end="521:47"><literal type="string" pos:start="521:40" pos:end="521:47">"werror"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="523:5" pos:end="537:5"><if pos:start="523:5" pos:end="537:5">if <condition pos:start="523:8" pos:end="523:23">(<expr pos:start="523:9" pos:end="523:22"><name pos:start="523:9" pos:end="523:14">werror</name> <operator pos:start="523:16" pos:end="523:17">!=</operator> <name pos:start="523:19" pos:end="523:22">NULL</name></expr>)</condition> <block pos:start="523:25" pos:end="537:5">{<block_content pos:start="525:9" pos:end="535:63">

        <if_stmt pos:start="525:9" pos:end="533:9"><if pos:start="525:9" pos:end="533:9">if <condition pos:start="525:12" pos:end="527:28">(<expr pos:start="525:13" pos:end="527:27"><name pos:start="525:13" pos:end="525:16">type</name> <operator pos:start="525:18" pos:end="525:19">!=</operator> <name pos:start="525:21" pos:end="525:26">IF_IDE</name> <operator pos:start="525:28" pos:end="525:29">&amp;&amp;</operator> <name pos:start="525:31" pos:end="525:34">type</name> <operator pos:start="525:36" pos:end="525:37">!=</operator> <name pos:start="525:39" pos:end="525:45">IF_SCSI</name> <operator pos:start="525:47" pos:end="525:48">&amp;&amp;</operator> <name pos:start="525:50" pos:end="525:53">type</name> <operator pos:start="525:55" pos:end="525:56">!=</operator> <name pos:start="525:58" pos:end="525:66">IF_VIRTIO</name> <operator pos:start="525:68" pos:end="525:69">&amp;&amp;</operator>

            <name pos:start="527:13" pos:end="527:16">type</name> <operator pos:start="527:18" pos:end="527:19">!=</operator> <name pos:start="527:21" pos:end="527:27">IF_NONE</name></expr>)</condition> <block pos:start="527:30" pos:end="533:9">{<block_content pos:start="529:13" pos:end="531:22">

            <expr_stmt pos:start="529:13" pos:end="529:69"><expr pos:start="529:13" pos:end="529:68"><call pos:start="529:13" pos:end="529:68"><name pos:start="529:13" pos:end="529:24">error_report</name><argument_list pos:start="529:25" pos:end="529:68">(<argument pos:start="529:26" pos:end="529:67"><expr pos:start="529:26" pos:end="529:67"><literal type="string" pos:start="529:26" pos:end="529:67">"werror is not supported by this bus type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="531:13" pos:end="531:22">goto <name pos:start="531:18" pos:end="531:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="535:9" pos:end="535:63"><expr pos:start="535:9" pos:end="535:62"><call pos:start="535:9" pos:end="535:62"><name pos:start="535:9" pos:end="535:17">qdict_put</name><argument_list pos:start="535:18" pos:end="535:62">(<argument pos:start="535:19" pos:end="535:25"><expr pos:start="535:19" pos:end="535:25"><name pos:start="535:19" pos:end="535:25">bs_opts</name></expr></argument>, <argument pos:start="535:28" pos:end="535:35"><expr pos:start="535:28" pos:end="535:35"><literal type="string" pos:start="535:28" pos:end="535:35">"werror"</literal></expr></argument>, <argument pos:start="535:38" pos:end="535:61"><expr pos:start="535:38" pos:end="535:61"><call pos:start="535:38" pos:end="535:61"><name pos:start="535:38" pos:end="535:53">qstring_from_str</name><argument_list pos:start="535:54" pos:end="535:61">(<argument pos:start="535:55" pos:end="535:60"><expr pos:start="535:55" pos:end="535:60"><name pos:start="535:55" pos:end="535:60">werror</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="541:5" pos:end="541:49"><expr pos:start="541:5" pos:end="541:48"><name pos:start="541:5" pos:end="541:10">rerror</name> <operator pos:start="541:12" pos:end="541:12">=</operator> <call pos:start="541:14" pos:end="541:48"><name pos:start="541:14" pos:end="541:25">qemu_opt_get</name><argument_list pos:start="541:26" pos:end="541:48">(<argument pos:start="541:27" pos:end="541:37"><expr pos:start="541:27" pos:end="541:37"><name pos:start="541:27" pos:end="541:37">legacy_opts</name></expr></argument>, <argument pos:start="541:40" pos:end="541:47"><expr pos:start="541:40" pos:end="541:47"><literal type="string" pos:start="541:40" pos:end="541:47">"rerror"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="543:5" pos:end="557:5"><if pos:start="543:5" pos:end="557:5">if <condition pos:start="543:8" pos:end="543:23">(<expr pos:start="543:9" pos:end="543:22"><name pos:start="543:9" pos:end="543:14">rerror</name> <operator pos:start="543:16" pos:end="543:17">!=</operator> <name pos:start="543:19" pos:end="543:22">NULL</name></expr>)</condition> <block pos:start="543:25" pos:end="557:5">{<block_content pos:start="545:9" pos:end="555:63">

        <if_stmt pos:start="545:9" pos:end="553:9"><if pos:start="545:9" pos:end="553:9">if <condition pos:start="545:12" pos:end="547:28">(<expr pos:start="545:13" pos:end="547:27"><name pos:start="545:13" pos:end="545:16">type</name> <operator pos:start="545:18" pos:end="545:19">!=</operator> <name pos:start="545:21" pos:end="545:26">IF_IDE</name> <operator pos:start="545:28" pos:end="545:29">&amp;&amp;</operator> <name pos:start="545:31" pos:end="545:34">type</name> <operator pos:start="545:36" pos:end="545:37">!=</operator> <name pos:start="545:39" pos:end="545:47">IF_VIRTIO</name> <operator pos:start="545:49" pos:end="545:50">&amp;&amp;</operator> <name pos:start="545:52" pos:end="545:55">type</name> <operator pos:start="545:57" pos:end="545:58">!=</operator> <name pos:start="545:60" pos:end="545:66">IF_SCSI</name> <operator pos:start="545:68" pos:end="545:69">&amp;&amp;</operator>

            <name pos:start="547:13" pos:end="547:16">type</name> <operator pos:start="547:18" pos:end="547:19">!=</operator> <name pos:start="547:21" pos:end="547:27">IF_NONE</name></expr>)</condition> <block pos:start="547:30" pos:end="553:9">{<block_content pos:start="549:13" pos:end="551:22">

            <expr_stmt pos:start="549:13" pos:end="549:69"><expr pos:start="549:13" pos:end="549:68"><call pos:start="549:13" pos:end="549:68"><name pos:start="549:13" pos:end="549:24">error_report</name><argument_list pos:start="549:25" pos:end="549:68">(<argument pos:start="549:26" pos:end="549:67"><expr pos:start="549:26" pos:end="549:67"><literal type="string" pos:start="549:26" pos:end="549:67">"rerror is not supported by this bus type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="551:13" pos:end="551:22">goto <name pos:start="551:18" pos:end="551:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="555:9" pos:end="555:63"><expr pos:start="555:9" pos:end="555:62"><call pos:start="555:9" pos:end="555:62"><name pos:start="555:9" pos:end="555:17">qdict_put</name><argument_list pos:start="555:18" pos:end="555:62">(<argument pos:start="555:19" pos:end="555:25"><expr pos:start="555:19" pos:end="555:25"><name pos:start="555:19" pos:end="555:25">bs_opts</name></expr></argument>, <argument pos:start="555:28" pos:end="555:35"><expr pos:start="555:28" pos:end="555:35"><literal type="string" pos:start="555:28" pos:end="555:35">"rerror"</literal></expr></argument>, <argument pos:start="555:38" pos:end="555:61"><expr pos:start="555:38" pos:end="555:61"><call pos:start="555:38" pos:end="555:61"><name pos:start="555:38" pos:end="555:53">qstring_from_str</name><argument_list pos:start="555:54" pos:end="555:61">(<argument pos:start="555:55" pos:end="555:60"><expr pos:start="555:55" pos:end="555:60"><name pos:start="555:55" pos:end="555:60">rerror</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="561:5" pos:end="561:74">/* Actual block device init: Functionality shared with blockdev-add */</comment>

    <expr_stmt pos:start="563:5" pos:end="563:57"><expr pos:start="563:5" pos:end="563:56"><name pos:start="563:5" pos:end="563:9">dinfo</name> <operator pos:start="563:11" pos:end="563:11">=</operator> <call pos:start="563:13" pos:end="563:56"><name pos:start="563:13" pos:end="563:25">blockdev_init</name><argument_list pos:start="563:26" pos:end="563:56">(<argument pos:start="563:27" pos:end="563:34"><expr pos:start="563:27" pos:end="563:34"><name pos:start="563:27" pos:end="563:34">filename</name></expr></argument>, <argument pos:start="563:37" pos:end="563:43"><expr pos:start="563:37" pos:end="563:43"><name pos:start="563:37" pos:end="563:43">bs_opts</name></expr></argument>, <argument pos:start="563:46" pos:end="563:55"><expr pos:start="563:46" pos:end="563:55"><operator pos:start="563:46" pos:end="563:46">&amp;</operator><name pos:start="563:47" pos:end="563:55">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <if_stmt pos:start="566:5" pos:end="582:5"><if pos:start="566:5" pos:end="578:5">if <condition pos:start="566:8" pos:end="566:22">(<expr pos:start="566:9" pos:end="566:21"><name pos:start="566:9" pos:end="566:13">dinfo</name> <operator pos:start="566:15" pos:end="566:16">==</operator> <name pos:start="566:18" pos:end="566:21">NULL</name></expr>)</condition> <block pos:start="566:24" pos:end="578:5">{<block_content pos:start="568:9" pos:end="576:18">

        <if_stmt pos:start="568:9" pos:end="574:9"><if pos:start="568:9" pos:end="574:9">if <condition pos:start="568:12" pos:end="568:22">(<expr pos:start="568:13" pos:end="568:21"><name pos:start="568:13" pos:end="568:21">local_err</name></expr>)</condition> <block pos:start="568:24" pos:end="574:9">{<block_content pos:start="570:13" pos:end="572:34">

            <expr_stmt pos:start="570:13" pos:end="570:60"><expr pos:start="570:13" pos:end="570:59"><call pos:start="570:13" pos:end="570:59"><name pos:start="570:13" pos:end="570:24">error_report</name><argument_list pos:start="570:25" pos:end="570:59">(<argument pos:start="570:26" pos:end="570:29"><expr pos:start="570:26" pos:end="570:29"><literal type="string" pos:start="570:26" pos:end="570:29">"%s"</literal></expr></argument>, <argument pos:start="570:32" pos:end="570:58"><expr pos:start="570:32" pos:end="570:58"><call pos:start="570:32" pos:end="570:58"><name pos:start="570:32" pos:end="570:47">error_get_pretty</name><argument_list pos:start="570:48" pos:end="570:58">(<argument pos:start="570:49" pos:end="570:57"><expr pos:start="570:49" pos:end="570:57"><name pos:start="570:49" pos:end="570:57">local_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="572:13" pos:end="572:34"><expr pos:start="572:13" pos:end="572:33"><call pos:start="572:13" pos:end="572:33"><name pos:start="572:13" pos:end="572:22">error_free</name><argument_list pos:start="572:23" pos:end="572:33">(<argument pos:start="572:24" pos:end="572:32"><expr pos:start="572:24" pos:end="572:32"><name pos:start="572:24" pos:end="572:32">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <goto pos:start="576:9" pos:end="576:18">goto <name pos:start="576:14" pos:end="576:17">fail</name>;</goto>

    </block_content>}</block></if> <else pos:start="578:7" pos:end="582:5">else <block pos:start="578:12" pos:end="582:5">{<block_content pos:start="580:9" pos:end="580:27">

        <expr_stmt pos:start="580:9" pos:end="580:27"><expr pos:start="580:9" pos:end="580:26"><call pos:start="580:9" pos:end="580:26"><name pos:start="580:9" pos:end="580:14">assert</name><argument_list pos:start="580:15" pos:end="580:26">(<argument pos:start="580:16" pos:end="580:25"><expr pos:start="580:16" pos:end="580:25"><operator pos:start="580:16" pos:end="580:16">!</operator><name pos:start="580:17" pos:end="580:25">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="586:5" pos:end="586:37">/* Set legacy DriveInfo fields */</comment>

    <expr_stmt pos:start="588:5" pos:end="588:34"><expr pos:start="588:5" pos:end="588:33"><name pos:start="588:5" pos:end="588:26"><name pos:start="588:5" pos:end="588:9">dinfo</name><operator pos:start="588:10" pos:end="588:11">-&gt;</operator><name pos:start="588:12" pos:end="588:26">enable_auto_del</name></name> <operator pos:start="588:28" pos:end="588:28">=</operator> <name pos:start="588:30" pos:end="588:33">true</name></expr>;</expr_stmt>

    <expr_stmt pos:start="590:5" pos:end="590:27"><expr pos:start="590:5" pos:end="590:26"><name pos:start="590:5" pos:end="590:15"><name pos:start="590:5" pos:end="590:9">dinfo</name><operator pos:start="590:10" pos:end="590:11">-&gt;</operator><name pos:start="590:12" pos:end="590:15">opts</name></name> <operator pos:start="590:17" pos:end="590:17">=</operator> <name pos:start="590:19" pos:end="590:26">all_opts</name></expr>;</expr_stmt>



    <expr_stmt pos:start="594:5" pos:end="594:23"><expr pos:start="594:5" pos:end="594:22"><name pos:start="594:5" pos:end="594:15"><name pos:start="594:5" pos:end="594:9">dinfo</name><operator pos:start="594:10" pos:end="594:11">-&gt;</operator><name pos:start="594:12" pos:end="594:15">cyls</name></name> <operator pos:start="594:17" pos:end="594:17">=</operator> <name pos:start="594:19" pos:end="594:22">cyls</name></expr>;</expr_stmt>

    <expr_stmt pos:start="596:5" pos:end="596:25"><expr pos:start="596:5" pos:end="596:24"><name pos:start="596:5" pos:end="596:16"><name pos:start="596:5" pos:end="596:9">dinfo</name><operator pos:start="596:10" pos:end="596:11">-&gt;</operator><name pos:start="596:12" pos:end="596:16">heads</name></name> <operator pos:start="596:18" pos:end="596:18">=</operator> <name pos:start="596:20" pos:end="596:24">heads</name></expr>;</expr_stmt>

    <expr_stmt pos:start="598:5" pos:end="598:23"><expr pos:start="598:5" pos:end="598:22"><name pos:start="598:5" pos:end="598:15"><name pos:start="598:5" pos:end="598:9">dinfo</name><operator pos:start="598:10" pos:end="598:11">-&gt;</operator><name pos:start="598:12" pos:end="598:15">secs</name></name> <operator pos:start="598:17" pos:end="598:17">=</operator> <name pos:start="598:19" pos:end="598:22">secs</name></expr>;</expr_stmt>

    <expr_stmt pos:start="600:5" pos:end="600:31"><expr pos:start="600:5" pos:end="600:30"><name pos:start="600:5" pos:end="600:16"><name pos:start="600:5" pos:end="600:9">dinfo</name><operator pos:start="600:10" pos:end="600:11">-&gt;</operator><name pos:start="600:12" pos:end="600:16">trans</name></name> <operator pos:start="600:18" pos:end="600:18">=</operator> <name pos:start="600:20" pos:end="600:30">translation</name></expr>;</expr_stmt>



    <expr_stmt pos:start="604:5" pos:end="604:23"><expr pos:start="604:5" pos:end="604:22"><name pos:start="604:5" pos:end="604:15"><name pos:start="604:5" pos:end="604:9">dinfo</name><operator pos:start="604:10" pos:end="604:11">-&gt;</operator><name pos:start="604:12" pos:end="604:15">type</name></name> <operator pos:start="604:17" pos:end="604:17">=</operator> <name pos:start="604:19" pos:end="604:22">type</name></expr>;</expr_stmt>

    <expr_stmt pos:start="606:5" pos:end="606:24"><expr pos:start="606:5" pos:end="606:23"><name pos:start="606:5" pos:end="606:14"><name pos:start="606:5" pos:end="606:9">dinfo</name><operator pos:start="606:10" pos:end="606:11">-&gt;</operator><name pos:start="606:12" pos:end="606:14">bus</name></name> <operator pos:start="606:16" pos:end="606:16">=</operator> <name pos:start="606:18" pos:end="606:23">bus_id</name></expr>;</expr_stmt>

    <expr_stmt pos:start="608:5" pos:end="608:26"><expr pos:start="608:5" pos:end="608:25"><name pos:start="608:5" pos:end="608:15"><name pos:start="608:5" pos:end="608:9">dinfo</name><operator pos:start="608:10" pos:end="608:11">-&gt;</operator><name pos:start="608:12" pos:end="608:15">unit</name></name> <operator pos:start="608:17" pos:end="608:17">=</operator> <name pos:start="608:19" pos:end="608:25">unit_id</name></expr>;</expr_stmt>

    <expr_stmt pos:start="610:5" pos:end="610:29"><expr pos:start="610:5" pos:end="610:28"><name pos:start="610:5" pos:end="610:18"><name pos:start="610:5" pos:end="610:9">dinfo</name><operator pos:start="610:10" pos:end="610:11">-&gt;</operator><name pos:start="610:12" pos:end="610:18">devaddr</name></name> <operator pos:start="610:20" pos:end="610:20">=</operator> <name pos:start="610:22" pos:end="610:28">devaddr</name></expr>;</expr_stmt>



    <switch pos:start="614:5" pos:end="632:5">switch<condition pos:start="614:11" pos:end="614:16">(<expr pos:start="614:12" pos:end="614:15"><name pos:start="614:12" pos:end="614:15">type</name></expr>)</condition> <block pos:start="614:18" pos:end="632:5">{<block_content pos:start="616:5" pos:end="630:14">

    <case pos:start="616:5" pos:end="616:16">case <expr pos:start="616:10" pos:end="616:15"><name pos:start="616:10" pos:end="616:15">IF_IDE</name></expr>:</case>

    <case pos:start="618:5" pos:end="618:17">case <expr pos:start="618:10" pos:end="618:16"><name pos:start="618:10" pos:end="618:16">IF_SCSI</name></expr>:</case>

    <case pos:start="620:5" pos:end="620:16">case <expr pos:start="620:10" pos:end="620:15"><name pos:start="620:10" pos:end="620:15">IF_XEN</name></expr>:</case>

    <case pos:start="622:5" pos:end="622:17">case <expr pos:start="622:10" pos:end="622:16"><name pos:start="622:10" pos:end="622:16">IF_NONE</name></expr>:</case>

        <expr_stmt pos:start="624:9" pos:end="624:47"><expr pos:start="624:9" pos:end="624:46"><name pos:start="624:9" pos:end="624:23"><name pos:start="624:9" pos:end="624:13">dinfo</name><operator pos:start="624:14" pos:end="624:15">-&gt;</operator><name pos:start="624:16" pos:end="624:23">media_cd</name></name> <operator pos:start="624:25" pos:end="624:25">=</operator> <name pos:start="624:27" pos:end="624:31">media</name> <operator pos:start="624:33" pos:end="624:34">==</operator> <name pos:start="624:36" pos:end="624:46">MEDIA_CDROM</name></expr>;</expr_stmt>

        <break pos:start="626:9" pos:end="626:14">break;</break>

    <default pos:start="628:5" pos:end="628:12">default:</default>

        <break pos:start="630:9" pos:end="630:14">break;</break>

    </block_content>}</block></switch>



<label pos:start="636:1" pos:end="636:5"><name pos:start="636:1" pos:end="636:4">fail</name>:</label>

    <expr_stmt pos:start="638:5" pos:end="638:31"><expr pos:start="638:5" pos:end="638:30"><call pos:start="638:5" pos:end="638:30"><name pos:start="638:5" pos:end="638:17">qemu_opts_del</name><argument_list pos:start="638:18" pos:end="638:30">(<argument pos:start="638:19" pos:end="638:29"><expr pos:start="638:19" pos:end="638:29"><name pos:start="638:19" pos:end="638:29">legacy_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="640:5" pos:end="640:21"><expr pos:start="640:5" pos:end="640:20"><call pos:start="640:5" pos:end="640:20"><name pos:start="640:5" pos:end="640:11">QDECREF</name><argument_list pos:start="640:12" pos:end="640:20">(<argument pos:start="640:13" pos:end="640:19"><expr pos:start="640:13" pos:end="640:19"><name pos:start="640:13" pos:end="640:19">bs_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="642:5" pos:end="642:17">return <expr pos:start="642:12" pos:end="642:16"><name pos:start="642:12" pos:end="642:16">dinfo</name></expr>;</return>

</block_content>}</block></function></unit>
