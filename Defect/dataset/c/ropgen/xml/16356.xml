<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16356.c" pos:tabs="8"><macro pos:start="1:1" pos:end="3:44"><name pos:start="1:1" pos:end="1:9">ser_write</name><argument_list pos:start="1:10" pos:end="3:44">(<argument pos:start="1:11" pos:end="1:22">void *opaque</argument>, <argument pos:start="1:25" pos:end="1:35">hwaddr addr</argument>,

          <argument pos:start="3:11" pos:end="3:24">uint64_t val64</argument>, <argument pos:start="3:27" pos:end="3:43">unsigned int size</argument>)</argument_list></macro>

<block pos:start="5:1" pos:end="67:1">{<block_content pos:start="7:5" pos:end="65:22">

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">ETRAXSerial</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:18">s</name> <init pos:start="7:20" pos:end="7:27">= <expr pos:start="7:22" pos:end="7:27"><name pos:start="7:22" pos:end="7:27">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:18">value</name> <init pos:start="9:20" pos:end="9:26">= <expr pos:start="9:22" pos:end="9:26"><name pos:start="9:22" pos:end="9:26">val64</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:17">char</name></type> <name pos:start="11:19" pos:end="11:20">ch</name> <init pos:start="11:22" pos:end="11:28">= <expr pos:start="11:24" pos:end="11:28"><name pos:start="11:24" pos:end="11:28">val64</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:70"><expr pos:start="15:5" pos:end="15:69"><call pos:start="15:5" pos:end="15:69"><name pos:start="15:5" pos:end="15:5">D</name><argument_list pos:start="15:6" pos:end="15:69">(<argument pos:start="15:7" pos:end="15:68"><expr pos:start="15:7" pos:end="15:68"><call pos:start="15:7" pos:end="15:68"><name pos:start="15:7" pos:end="15:14">qemu_log</name><argument_list pos:start="15:15" pos:end="15:68">(<argument pos:start="15:16" pos:end="15:43"><expr pos:start="15:16" pos:end="15:43"><literal type="string" pos:start="15:16" pos:end="15:20">"%s "</literal> <name pos:start="15:22" pos:end="15:35">TARGET_FMT_plx</name> <literal type="string" pos:start="15:37" pos:end="15:43">"=%x\n"</literal></expr></argument>,  <argument pos:start="15:47" pos:end="15:54"><expr pos:start="15:47" pos:end="15:54"><name pos:start="15:47" pos:end="15:54">__func__</name></expr></argument>, <argument pos:start="15:57" pos:end="15:60"><expr pos:start="15:57" pos:end="15:60"><name pos:start="15:57" pos:end="15:60">addr</name></expr></argument>, <argument pos:start="15:63" pos:end="15:67"><expr pos:start="15:63" pos:end="15:67"><name pos:start="15:63" pos:end="15:67">value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:15"><expr pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:8">addr</name> <operator pos:start="17:10" pos:end="17:12">&gt;&gt;=</operator> <literal type="number" pos:start="17:14" pos:end="17:14">2</literal></expr>;</expr_stmt>

    <switch pos:start="19:5" pos:end="63:5">switch <condition pos:start="19:12" pos:end="19:17">(<expr pos:start="19:13" pos:end="19:16"><name pos:start="19:13" pos:end="19:16">addr</name></expr>)</condition>

    <block pos:start="21:5" pos:end="63:5">{<block_content pos:start="23:9" pos:end="61:18">

        <case pos:start="23:9" pos:end="23:21">case <expr pos:start="23:14" pos:end="23:20"><name pos:start="23:14" pos:end="23:20">RW_DOUT</name></expr>:</case>

            <expr_stmt pos:start="25:13" pos:end="25:46"><expr pos:start="25:13" pos:end="25:45"><call pos:start="25:13" pos:end="25:45"><name pos:start="25:13" pos:end="25:29">qemu_chr_fe_write</name><argument_list pos:start="25:30" pos:end="25:45">(<argument pos:start="25:31" pos:end="25:36"><expr pos:start="25:31" pos:end="25:36"><name pos:start="25:31" pos:end="25:36"><name pos:start="25:31" pos:end="25:31">s</name><operator pos:start="25:32" pos:end="25:33">-&gt;</operator><name pos:start="25:34" pos:end="25:36">chr</name></name></expr></argument>, <argument pos:start="25:39" pos:end="25:41"><expr pos:start="25:39" pos:end="25:41"><operator pos:start="25:39" pos:end="25:39">&amp;</operator><name pos:start="25:40" pos:end="25:41">ch</name></expr></argument>, <argument pos:start="25:44" pos:end="25:44"><expr pos:start="25:44" pos:end="25:44"><literal type="number" pos:start="25:44" pos:end="25:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="27:13" pos:end="27:33"><expr pos:start="27:13" pos:end="27:32"><name pos:start="27:13" pos:end="27:27"><name pos:start="27:13" pos:end="27:13">s</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:19">regs</name><index pos:start="27:20" pos:end="27:27">[<expr pos:start="27:21" pos:end="27:26"><name pos:start="27:21" pos:end="27:26">R_INTR</name></expr>]</index></name> <operator pos:start="27:29" pos:end="27:30">|=</operator> <literal type="number" pos:start="27:32" pos:end="27:32">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="29:13" pos:end="29:30"><expr pos:start="29:13" pos:end="29:29"><name pos:start="29:13" pos:end="29:25"><name pos:start="29:13" pos:end="29:13">s</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:25">pending_tx</name></name> <operator pos:start="29:27" pos:end="29:27">=</operator> <literal type="number" pos:start="29:29" pos:end="29:29">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="31:13" pos:end="31:34"><expr pos:start="31:13" pos:end="31:33"><name pos:start="31:13" pos:end="31:25"><name pos:start="31:13" pos:end="31:13">s</name><operator pos:start="31:14" pos:end="31:15">-&gt;</operator><name pos:start="31:16" pos:end="31:19">regs</name><index pos:start="31:20" pos:end="31:25">[<expr pos:start="31:21" pos:end="31:24"><name pos:start="31:21" pos:end="31:24">addr</name></expr>]</index></name> <operator pos:start="31:27" pos:end="31:27">=</operator> <name pos:start="31:29" pos:end="31:33">value</name></expr>;</expr_stmt>

            <break pos:start="33:13" pos:end="33:18">break;</break>

        <case pos:start="35:9" pos:end="35:25">case <expr pos:start="35:14" pos:end="35:24"><name pos:start="35:14" pos:end="35:24">RW_ACK_INTR</name></expr>:</case>

            <if_stmt pos:start="37:13" pos:end="47:13"><if pos:start="37:13" pos:end="47:13">if <condition pos:start="37:16" pos:end="37:30">(<expr pos:start="37:17" pos:end="37:29"><name pos:start="37:17" pos:end="37:29"><name pos:start="37:17" pos:end="37:17">s</name><operator pos:start="37:18" pos:end="37:19">-&gt;</operator><name pos:start="37:20" pos:end="37:29">pending_tx</name></name></expr>)</condition> <block pos:start="37:32" pos:end="47:13">{<block_content pos:start="39:17" pos:end="45:52">

                <expr_stmt pos:start="39:17" pos:end="39:28"><expr pos:start="39:17" pos:end="39:27"><name pos:start="39:17" pos:end="39:21">value</name> <operator pos:start="39:23" pos:end="39:24">&amp;=</operator> <operator pos:start="39:26" pos:end="39:26">~</operator><literal type="number" pos:start="39:27" pos:end="39:27">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="41:17" pos:end="41:34"><expr pos:start="41:17" pos:end="41:33"><name pos:start="41:17" pos:end="41:29"><name pos:start="41:17" pos:end="41:17">s</name><operator pos:start="41:18" pos:end="41:19">-&gt;</operator><name pos:start="41:20" pos:end="41:29">pending_tx</name></name> <operator pos:start="41:31" pos:end="41:31">=</operator> <literal type="number" pos:start="41:33" pos:end="41:33">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="43:17" pos:end="45:52"><expr pos:start="43:17" pos:end="45:51"><call pos:start="43:17" pos:end="45:51"><name pos:start="43:17" pos:end="43:17">D</name><argument_list pos:start="43:18" pos:end="45:51">(<argument pos:start="43:19" pos:end="45:50"><expr pos:start="43:19" pos:end="45:50"><call pos:start="43:19" pos:end="45:50"><name pos:start="43:19" pos:end="43:26">qemu_log</name><argument_list pos:start="43:27" pos:end="45:50">(<argument pos:start="43:28" pos:end="43:57"><expr pos:start="43:28" pos:end="43:57"><literal type="string" pos:start="43:28" pos:end="43:57">"fixedup value=%x r_intr=%x\n"</literal></expr></argument>,

                           <argument pos:start="45:28" pos:end="45:32"><expr pos:start="45:28" pos:end="45:32"><name pos:start="45:28" pos:end="45:32">value</name></expr></argument>, <argument pos:start="45:35" pos:end="45:49"><expr pos:start="45:35" pos:end="45:49"><name pos:start="45:35" pos:end="45:49"><name pos:start="45:35" pos:end="45:35">s</name><operator pos:start="45:36" pos:end="45:37">-&gt;</operator><name pos:start="45:38" pos:end="45:41">regs</name><index pos:start="45:42" pos:end="45:49">[<expr pos:start="45:43" pos:end="45:48"><name pos:start="45:43" pos:end="45:48">R_INTR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:34"><expr pos:start="49:13" pos:end="49:33"><name pos:start="49:13" pos:end="49:25"><name pos:start="49:13" pos:end="49:13">s</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:19">regs</name><index pos:start="49:20" pos:end="49:25">[<expr pos:start="49:21" pos:end="49:24"><name pos:start="49:21" pos:end="49:24">addr</name></expr>]</index></name> <operator pos:start="49:27" pos:end="49:27">=</operator> <name pos:start="49:29" pos:end="49:33">value</name></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:38"><expr pos:start="51:13" pos:end="51:37"><name pos:start="51:13" pos:end="51:27"><name pos:start="51:13" pos:end="51:13">s</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:19">regs</name><index pos:start="51:20" pos:end="51:27">[<expr pos:start="51:21" pos:end="51:26"><name pos:start="51:21" pos:end="51:26">R_INTR</name></expr>]</index></name> <operator pos:start="51:29" pos:end="51:30">&amp;=</operator> <operator pos:start="51:32" pos:end="51:32">~</operator><name pos:start="51:33" pos:end="51:37">value</name></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:54"><expr pos:start="53:13" pos:end="53:53"><call pos:start="53:13" pos:end="53:53"><name pos:start="53:13" pos:end="53:13">D</name><argument_list pos:start="53:14" pos:end="53:53">(<argument pos:start="53:15" pos:end="53:52"><expr pos:start="53:15" pos:end="53:52"><call pos:start="53:15" pos:end="53:52"><name pos:start="53:15" pos:end="53:20">printf</name><argument_list pos:start="53:21" pos:end="53:52">(<argument pos:start="53:22" pos:end="53:34"><expr pos:start="53:22" pos:end="53:34"><literal type="string" pos:start="53:22" pos:end="53:34">"r_intr=%x\n"</literal></expr></argument>, <argument pos:start="53:37" pos:end="53:51"><expr pos:start="53:37" pos:end="53:51"><name pos:start="53:37" pos:end="53:51"><name pos:start="53:37" pos:end="53:37">s</name><operator pos:start="53:38" pos:end="53:39">-&gt;</operator><name pos:start="53:40" pos:end="53:43">regs</name><index pos:start="53:44" pos:end="53:51">[<expr pos:start="53:45" pos:end="53:50"><name pos:start="53:45" pos:end="53:50">R_INTR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="55:13" pos:end="55:18">break;</break>

        <default pos:start="57:9" pos:end="57:16">default:</default>

            <expr_stmt pos:start="59:13" pos:end="59:34"><expr pos:start="59:13" pos:end="59:33"><name pos:start="59:13" pos:end="59:25"><name pos:start="59:13" pos:end="59:13">s</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:19">regs</name><index pos:start="59:20" pos:end="59:25">[<expr pos:start="59:21" pos:end="59:24"><name pos:start="59:21" pos:end="59:24">addr</name></expr>]</index></name> <operator pos:start="59:27" pos:end="59:27">=</operator> <name pos:start="59:29" pos:end="59:33">value</name></expr>;</expr_stmt>

            <break pos:start="61:13" pos:end="61:18">break;</break>

    </block_content>}</block></switch>

    <expr_stmt pos:start="65:5" pos:end="65:22"><expr pos:start="65:5" pos:end="65:21"><call pos:start="65:5" pos:end="65:21"><name pos:start="65:5" pos:end="65:18">ser_update_irq</name><argument_list pos:start="65:19" pos:end="65:21">(<argument pos:start="65:20" pos:end="65:20"><expr pos:start="65:20" pos:end="65:20"><name pos:start="65:20" pos:end="65:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>
</unit>
