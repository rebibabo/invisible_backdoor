<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5483.c" pos:tabs="8"><function pos:start="1:1" pos:end="125:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">ram_save_iterate</name><parameter_list pos:start="1:28" pos:end="1:54">(<parameter pos:start="1:29" pos:end="1:39"><decl pos:start="1:29" pos:end="1:39"><type pos:start="1:29" pos:end="1:39"><name pos:start="1:29" pos:end="1:36">QEMUFile</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:39">f</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:53"><decl pos:start="1:42" pos:end="1:53"><type pos:start="1:42" pos:end="1:53"><name pos:start="1:42" pos:end="1:45">void</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:53">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="125:1">{<block_content pos:start="5:5" pos:end="123:22">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int64_t</name></type> <name pos:start="9:13" pos:end="9:14">t0</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:18">total_sent</name> <init pos:start="11:20" pos:end="11:22">= <expr pos:start="11:22" pos:end="11:22"><literal type="number" pos:start="11:22" pos:end="11:22">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:30"><expr pos:start="15:5" pos:end="15:29"><call pos:start="15:5" pos:end="15:29"><name pos:start="15:5" pos:end="15:27">qemu_mutex_lock_ramlist</name><argument_list pos:start="15:28" pos:end="15:29">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:41">(<expr pos:start="19:9" pos:end="19:40"><name pos:start="19:9" pos:end="19:24"><name pos:start="19:9" pos:end="19:16">ram_list</name><operator pos:start="19:17" pos:end="19:17">.</operator><name pos:start="19:18" pos:end="19:24">version</name></name> <operator pos:start="19:26" pos:end="19:27">!=</operator> <name pos:start="19:29" pos:end="19:40">last_version</name></expr>)</condition> <block pos:start="19:43" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:28">

        <expr_stmt pos:start="21:9" pos:end="21:28"><expr pos:start="21:9" pos:end="21:27"><call pos:start="21:9" pos:end="21:27"><name pos:start="21:9" pos:end="21:25">reset_ram_globals</name><argument_list pos:start="21:26" pos:end="21:27">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:53"><expr pos:start="27:5" pos:end="27:52"><call pos:start="27:5" pos:end="27:52"><name pos:start="27:5" pos:end="27:30">ram_control_before_iterate</name><argument_list pos:start="27:31" pos:end="27:52">(<argument pos:start="27:32" pos:end="27:32"><expr pos:start="27:32" pos:end="27:32"><name pos:start="27:32" pos:end="27:32">f</name></expr></argument>, <argument pos:start="27:35" pos:end="27:51"><expr pos:start="27:35" pos:end="27:51"><name pos:start="27:35" pos:end="27:51">RAM_CONTROL_ROUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:48"><expr pos:start="31:5" pos:end="31:47"><name pos:start="31:5" pos:end="31:6">t0</name> <operator pos:start="31:8" pos:end="31:8">=</operator> <call pos:start="31:10" pos:end="31:47"><name pos:start="31:10" pos:end="31:26">qemu_clock_get_ns</name><argument_list pos:start="31:27" pos:end="31:47">(<argument pos:start="31:28" pos:end="31:46"><expr pos:start="31:28" pos:end="31:46"><name pos:start="31:28" pos:end="31:46">QEMU_CLOCK_REALTIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:10"><expr pos:start="33:5" pos:end="33:9"><name pos:start="33:5" pos:end="33:5">i</name> <operator pos:start="33:7" pos:end="33:7">=</operator> <literal type="number" pos:start="33:9" pos:end="33:9">0</literal></expr>;</expr_stmt>

    <while pos:start="35:5" pos:end="85:5">while <condition pos:start="35:11" pos:end="35:48">(<expr pos:start="35:12" pos:end="35:47"><operator pos:start="35:12" pos:end="35:12">(</operator><name pos:start="35:13" pos:end="35:15">ret</name> <operator pos:start="35:17" pos:end="35:17">=</operator> <call pos:start="35:19" pos:end="35:41"><name pos:start="35:19" pos:end="35:38">qemu_file_rate_limit</name><argument_list pos:start="35:39" pos:end="35:41">(<argument pos:start="35:40" pos:end="35:40"><expr pos:start="35:40" pos:end="35:40"><name pos:start="35:40" pos:end="35:40">f</name></expr></argument>)</argument_list></call><operator pos:start="35:42" pos:end="35:42">)</operator> <operator pos:start="35:44" pos:end="35:45">==</operator> <literal type="number" pos:start="35:47" pos:end="35:47">0</literal></expr>)</condition> <block pos:start="35:50" pos:end="85:5">{<block_content pos:start="37:9" pos:end="83:12">

        <decl_stmt pos:start="37:9" pos:end="37:23"><decl pos:start="37:9" pos:end="37:22"><type pos:start="37:9" pos:end="37:11"><name pos:start="37:9" pos:end="37:11">int</name></type> <name pos:start="37:13" pos:end="37:22">bytes_sent</name></decl>;</decl_stmt>



        <expr_stmt pos:start="41:9" pos:end="41:46"><expr pos:start="41:9" pos:end="41:45"><name pos:start="41:9" pos:end="41:18">bytes_sent</name> <operator pos:start="41:20" pos:end="41:20">=</operator> <call pos:start="41:22" pos:end="41:45"><name pos:start="41:22" pos:end="41:35">ram_save_block</name><argument_list pos:start="41:36" pos:end="41:45">(<argument pos:start="41:37" pos:end="41:37"><expr pos:start="41:37" pos:end="41:37"><name pos:start="41:37" pos:end="41:37">f</name></expr></argument>, <argument pos:start="41:40" pos:end="41:44"><expr pos:start="41:40" pos:end="41:44"><name pos:start="41:40" pos:end="41:44">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="43:9" pos:end="43:36">/* no more blocks to sent */</comment>

        <if_stmt pos:start="45:9" pos:end="49:9"><if pos:start="45:9" pos:end="49:9">if <condition pos:start="45:12" pos:end="45:28">(<expr pos:start="45:13" pos:end="45:27"><name pos:start="45:13" pos:end="45:22">bytes_sent</name> <operator pos:start="45:24" pos:end="45:25">==</operator> <literal type="number" pos:start="45:27" pos:end="45:27">0</literal></expr>)</condition> <block pos:start="45:30" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:18">

            <break pos:start="47:13" pos:end="47:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:33"><expr pos:start="51:9" pos:end="51:32"><name pos:start="51:9" pos:end="51:18">total_sent</name> <operator pos:start="51:20" pos:end="51:21">+=</operator> <name pos:start="51:23" pos:end="51:32">bytes_sent</name></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:31"><expr pos:start="53:9" pos:end="53:30"><name pos:start="53:9" pos:end="53:28"><name pos:start="53:9" pos:end="53:17">acct_info</name><operator pos:start="53:18" pos:end="53:18">.</operator><name pos:start="53:19" pos:end="53:28">iterations</name></name><operator pos:start="53:29" pos:end="53:30">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:33"><expr pos:start="55:9" pos:end="55:32"><call pos:start="55:9" pos:end="55:32"><name pos:start="55:9" pos:end="55:30">check_guest_throttling</name><argument_list pos:start="55:31" pos:end="55:32">()</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="57:9" pos:end="65:10">/* we want to check in the 1st loop, just in case it was the 1st time

           and we had to sync the dirty bitmap.

           qemu_get_clock_ns() is a bit expensive, so we only check each some

           iterations

        */</comment>

        <if_stmt pos:start="67:9" pos:end="81:9"><if pos:start="67:9" pos:end="81:9">if <condition pos:start="67:12" pos:end="67:26">(<expr pos:start="67:13" pos:end="67:25"><operator pos:start="67:13" pos:end="67:13">(</operator><name pos:start="67:14" pos:end="67:14">i</name> <operator pos:start="67:16" pos:end="67:16">&amp;</operator> <literal type="number" pos:start="67:18" pos:end="67:19">63</literal><operator pos:start="67:20" pos:end="67:20">)</operator> <operator pos:start="67:22" pos:end="67:23">==</operator> <literal type="number" pos:start="67:25" pos:end="67:25">0</literal></expr>)</condition> <block pos:start="67:28" pos:end="81:9">{<block_content pos:start="69:13" pos:end="79:13">

            <decl_stmt pos:start="69:13" pos:end="69:82"><decl pos:start="69:13" pos:end="69:81"><type pos:start="69:13" pos:end="69:20"><name pos:start="69:13" pos:end="69:20">uint64_t</name></type> <name pos:start="69:22" pos:end="69:23">t1</name> <init pos:start="69:25" pos:end="69:81">= <expr pos:start="69:27" pos:end="69:81"><operator pos:start="69:27" pos:end="69:27">(</operator><call pos:start="69:28" pos:end="69:65"><name pos:start="69:28" pos:end="69:44">qemu_clock_get_ns</name><argument_list pos:start="69:45" pos:end="69:65">(<argument pos:start="69:46" pos:end="69:64"><expr pos:start="69:46" pos:end="69:64"><name pos:start="69:46" pos:end="69:64">QEMU_CLOCK_REALTIME</name></expr></argument>)</argument_list></call> <operator pos:start="69:67" pos:end="69:67">-</operator> <name pos:start="69:69" pos:end="69:70">t0</name><operator pos:start="69:71" pos:end="69:71">)</operator> <operator pos:start="69:73" pos:end="69:73">/</operator> <literal type="number" pos:start="69:75" pos:end="69:81">1000000</literal></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="71:13" pos:end="79:13"><if pos:start="71:13" pos:end="79:13">if <condition pos:start="71:16" pos:end="71:30">(<expr pos:start="71:17" pos:end="71:29"><name pos:start="71:17" pos:end="71:18">t1</name> <operator pos:start="71:20" pos:end="71:20">&gt;</operator> <name pos:start="71:22" pos:end="71:29">MAX_WAIT</name></expr>)</condition> <block pos:start="71:32" pos:end="79:13">{<block_content pos:start="73:17" pos:end="77:22">

                <expr_stmt pos:start="73:17" pos:end="75:31"><expr pos:start="73:17" pos:end="75:30"><call pos:start="73:17" pos:end="75:30"><name pos:start="73:17" pos:end="73:23">DPRINTF</name><argument_list pos:start="73:24" pos:end="75:30">(<argument pos:start="73:25" pos:end="73:77"><expr pos:start="73:25" pos:end="73:77"><literal type="string" pos:start="73:25" pos:end="73:37">"big wait: %"</literal> <name pos:start="73:39" pos:end="73:44">PRIu64</name> <literal type="string" pos:start="73:46" pos:end="73:77">" milliseconds, %d iterations\n"</literal></expr></argument>,

                        <argument pos:start="75:25" pos:end="75:26"><expr pos:start="75:25" pos:end="75:26"><name pos:start="75:25" pos:end="75:26">t1</name></expr></argument>, <argument pos:start="75:29" pos:end="75:29"><expr pos:start="75:29" pos:end="75:29"><name pos:start="75:29" pos:end="75:29">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="77:17" pos:end="77:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:12"><expr pos:start="83:9" pos:end="83:11"><name pos:start="83:9" pos:end="83:9">i</name><operator pos:start="83:10" pos:end="83:11">++</operator></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="89:5" pos:end="89:32"><expr pos:start="89:5" pos:end="89:31"><call pos:start="89:5" pos:end="89:31"><name pos:start="89:5" pos:end="89:29">qemu_mutex_unlock_ramlist</name><argument_list pos:start="89:30" pos:end="89:31">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="93:5" pos:end="99:7">/*

     * Must occur before EOS (or any QEMUFile operation)

     * because of RDMA protocol.

     */</comment>

    <expr_stmt pos:start="101:5" pos:end="101:52"><expr pos:start="101:5" pos:end="101:51"><call pos:start="101:5" pos:end="101:51"><name pos:start="101:5" pos:end="101:29">ram_control_after_iterate</name><argument_list pos:start="101:30" pos:end="101:51">(<argument pos:start="101:31" pos:end="101:31"><expr pos:start="101:31" pos:end="101:31"><name pos:start="101:31" pos:end="101:31">f</name></expr></argument>, <argument pos:start="101:34" pos:end="101:50"><expr pos:start="101:34" pos:end="101:50"><name pos:start="101:34" pos:end="101:50">RAM_CONTROL_ROUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="105:5" pos:end="111:5"><if pos:start="105:5" pos:end="111:5">if <condition pos:start="105:8" pos:end="105:16">(<expr pos:start="105:9" pos:end="105:15"><name pos:start="105:9" pos:end="105:11">ret</name> <operator pos:start="105:13" pos:end="105:13">&lt;</operator> <literal type="number" pos:start="105:15" pos:end="105:15">0</literal></expr>)</condition> <block pos:start="105:18" pos:end="111:5">{<block_content pos:start="107:9" pos:end="109:19">

        <expr_stmt pos:start="107:9" pos:end="107:40"><expr pos:start="107:9" pos:end="107:39"><name pos:start="107:9" pos:end="107:25">bytes_transferred</name> <operator pos:start="107:27" pos:end="107:28">+=</operator> <name pos:start="107:30" pos:end="107:39">total_sent</name></expr>;</expr_stmt>

        <return pos:start="109:9" pos:end="109:19">return <expr pos:start="109:16" pos:end="109:18"><name pos:start="109:16" pos:end="109:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="115:5" pos:end="115:40"><expr pos:start="115:5" pos:end="115:39"><call pos:start="115:5" pos:end="115:39"><name pos:start="115:5" pos:end="115:17">qemu_put_be64</name><argument_list pos:start="115:18" pos:end="115:39">(<argument pos:start="115:19" pos:end="115:19"><expr pos:start="115:19" pos:end="115:19"><name pos:start="115:19" pos:end="115:19">f</name></expr></argument>, <argument pos:start="115:22" pos:end="115:38"><expr pos:start="115:22" pos:end="115:38"><name pos:start="115:22" pos:end="115:38">RAM_SAVE_FLAG_EOS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:20"><expr pos:start="117:5" pos:end="117:19"><name pos:start="117:5" pos:end="117:14">total_sent</name> <operator pos:start="117:16" pos:end="117:17">+=</operator> <literal type="number" pos:start="117:19" pos:end="117:19">8</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:36"><expr pos:start="119:5" pos:end="119:35"><name pos:start="119:5" pos:end="119:21">bytes_transferred</name> <operator pos:start="119:23" pos:end="119:24">+=</operator> <name pos:start="119:26" pos:end="119:35">total_sent</name></expr>;</expr_stmt>



    <return pos:start="123:5" pos:end="123:22">return <expr pos:start="123:12" pos:end="123:21"><name pos:start="123:12" pos:end="123:21">total_sent</name></expr>;</return>

</block_content>}</block></function>
</unit>
