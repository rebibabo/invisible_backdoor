<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12879.c" pos:tabs="8"><function pos:start="1:1" pos:end="111:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">update_rom_mapping</name><parameter_list pos:start="1:30" pos:end="1:82">(<parameter pos:start="1:31" pos:end="1:46"><decl pos:start="1:31" pos:end="1:46"><type pos:start="1:31" pos:end="1:46"><name pos:start="1:31" pos:end="1:43">VAPICROMState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:64"><decl pos:start="1:49" pos:end="1:64"><type pos:start="1:49" pos:end="1:64"><name pos:start="1:49" pos:end="1:59">CPUX86State</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:64">env</name></decl></parameter>, <parameter pos:start="1:67" pos:end="1:81"><decl pos:start="1:67" pos:end="1:81"><type pos:start="1:67" pos:end="1:81"><name pos:start="1:67" pos:end="1:78">target_ulong</name></type> <name pos:start="1:80" pos:end="1:81">ip</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="111:1">{<block_content pos:start="5:5" pos:end="109:13">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:28"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:22">target_phys_addr_t</name></type> <name pos:start="5:24" pos:end="5:28">paddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:28">rom_state_vaddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:32"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:16">pos</name></decl>, <decl pos:start="9:19" pos:end="9:23"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:19" pos:end="9:23">patch</name></decl>, <decl pos:start="9:26" pos:end="9:31"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:26" pos:end="9:31">offset</name></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="13:44">/* nothing to do if already activated */</comment>

    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:33">(<expr pos:start="15:9" pos:end="15:32"><name pos:start="15:9" pos:end="15:16"><name pos:start="15:9" pos:end="15:9">s</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:16">state</name></name> <operator pos:start="15:18" pos:end="15:19">==</operator> <name pos:start="15:21" pos:end="15:32">VAPIC_ACTIVE</name></expr>)</condition> <block pos:start="15:35" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:17">

        <return pos:start="17:9" pos:end="17:17">return <expr pos:start="17:16" pos:end="17:16"><literal type="number" pos:start="17:16" pos:end="17:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:67">/* bail out if ROM init code was not executed (missing ROM?) */</comment>

    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:35">(<expr pos:start="25:9" pos:end="25:34"><name pos:start="25:9" pos:end="25:16"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:16">state</name></name> <operator pos:start="25:18" pos:end="25:19">==</operator> <name pos:start="25:21" pos:end="25:34">VAPIC_INACTIVE</name></expr>)</condition> <block pos:start="25:37" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:18">

        <return pos:start="27:9" pos:end="27:18">return <expr pos:start="27:16" pos:end="27:17"><operator pos:start="27:16" pos:end="27:16">-</operator><literal type="number" pos:start="27:17" pos:end="27:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:45">/* find out virtual address of the ROM */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:61"><expr pos:start="35:5" pos:end="35:60"><name pos:start="35:5" pos:end="35:19">rom_state_vaddr</name> <operator pos:start="35:21" pos:end="35:21">=</operator> <name pos:start="35:23" pos:end="35:40"><name pos:start="35:23" pos:end="35:23">s</name><operator pos:start="35:24" pos:end="35:25">-&gt;</operator><name pos:start="35:26" pos:end="35:40">rom_state_paddr</name></name> <operator pos:start="35:42" pos:end="35:42">+</operator> <operator pos:start="35:44" pos:end="35:44">(</operator><name pos:start="35:45" pos:end="35:46">ip</name> <operator pos:start="35:48" pos:end="35:48">&amp;</operator> <literal type="number" pos:start="35:50" pos:end="35:59">0xf0000000</literal><operator pos:start="35:60" pos:end="35:60">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:58"><expr pos:start="37:5" pos:end="37:57"><name pos:start="37:5" pos:end="37:9">paddr</name> <operator pos:start="37:11" pos:end="37:11">=</operator> <call pos:start="37:13" pos:end="37:57"><name pos:start="37:13" pos:end="37:35">cpu_get_phys_page_debug</name><argument_list pos:start="37:36" pos:end="37:57">(<argument pos:start="37:37" pos:end="37:39"><expr pos:start="37:37" pos:end="37:39"><name pos:start="37:37" pos:end="37:39">env</name></expr></argument>, <argument pos:start="37:42" pos:end="37:56"><expr pos:start="37:42" pos:end="37:56"><name pos:start="37:42" pos:end="37:56">rom_state_vaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="43:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:20">(<expr pos:start="39:9" pos:end="39:19"><name pos:start="39:9" pos:end="39:13">paddr</name> <operator pos:start="39:15" pos:end="39:16">==</operator> <operator pos:start="39:18" pos:end="39:18">-</operator><literal type="number" pos:start="39:19" pos:end="39:19">1</literal></expr>)</condition> <block pos:start="39:22" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:18">

        <return pos:start="41:9" pos:end="41:18">return <expr pos:start="41:16" pos:end="41:17"><operator pos:start="41:16" pos:end="41:16">-</operator><literal type="number" pos:start="41:17" pos:end="41:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:49"><expr pos:start="45:5" pos:end="45:48"><name pos:start="45:5" pos:end="45:9">paddr</name> <operator pos:start="45:11" pos:end="45:12">+=</operator> <name pos:start="45:14" pos:end="45:28">rom_state_vaddr</name> <operator pos:start="45:30" pos:end="45:30">&amp;</operator> <operator pos:start="45:32" pos:end="45:32">~</operator><name pos:start="45:33" pos:end="45:48">TARGET_PAGE_MASK</name></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="51:5"><if pos:start="47:5" pos:end="51:5">if <condition pos:start="47:8" pos:end="47:36">(<expr pos:start="47:9" pos:end="47:35"><name pos:start="47:9" pos:end="47:13">paddr</name> <operator pos:start="47:15" pos:end="47:16">!=</operator> <name pos:start="47:18" pos:end="47:35"><name pos:start="47:18" pos:end="47:18">s</name><operator pos:start="47:19" pos:end="47:20">-&gt;</operator><name pos:start="47:21" pos:end="47:35">rom_state_paddr</name></name></expr>)</condition> <block pos:start="47:38" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:18">

        <return pos:start="49:9" pos:end="49:18">return <expr pos:start="49:16" pos:end="49:17"><operator pos:start="49:16" pos:end="49:16">-</operator><literal type="number" pos:start="49:17" pos:end="49:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:28"><expr pos:start="53:5" pos:end="53:27"><call pos:start="53:5" pos:end="53:27"><name pos:start="53:5" pos:end="53:24">read_guest_rom_state</name><argument_list pos:start="53:25" pos:end="53:27">(<argument pos:start="53:26" pos:end="53:26"><expr pos:start="53:26" pos:end="53:26"><name pos:start="53:26" pos:end="53:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="59:5"><if pos:start="55:5" pos:end="59:5">if <condition pos:start="55:8" pos:end="55:59">(<expr pos:start="55:9" pos:end="55:58"><call pos:start="55:9" pos:end="55:53"><name pos:start="55:9" pos:end="55:14">memcmp</name><argument_list pos:start="55:15" pos:end="55:53">(<argument pos:start="55:16" pos:end="55:37"><expr pos:start="55:16" pos:end="55:37"><name pos:start="55:16" pos:end="55:37"><name pos:start="55:16" pos:end="55:16">s</name><operator pos:start="55:17" pos:end="55:18">-&gt;</operator><name pos:start="55:19" pos:end="55:27">rom_state</name><operator pos:start="55:28" pos:end="55:28">.</operator><name pos:start="55:29" pos:end="55:37">signature</name></name></expr></argument>, <argument pos:start="55:40" pos:end="55:49"><expr pos:start="55:40" pos:end="55:49"><literal type="string" pos:start="55:40" pos:end="55:49">"kvm aPiC"</literal></expr></argument>, <argument pos:start="55:52" pos:end="55:52"><expr pos:start="55:52" pos:end="55:52"><literal type="number" pos:start="55:52" pos:end="55:52">8</literal></expr></argument>)</argument_list></call> <operator pos:start="55:55" pos:end="55:56">!=</operator> <literal type="number" pos:start="55:58" pos:end="55:58">0</literal></expr>)</condition> <block pos:start="55:61" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:18">

        <return pos:start="57:9" pos:end="57:18">return <expr pos:start="57:16" pos:end="57:17"><operator pos:start="57:16" pos:end="57:16">-</operator><literal type="number" pos:start="57:17" pos:end="57:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:41"><expr pos:start="61:5" pos:end="61:40"><name pos:start="61:5" pos:end="61:22"><name pos:start="61:5" pos:end="61:5">s</name><operator pos:start="61:6" pos:end="61:7">-&gt;</operator><name pos:start="61:8" pos:end="61:22">rom_state_vaddr</name></name> <operator pos:start="61:24" pos:end="61:24">=</operator> <name pos:start="61:26" pos:end="61:40">rom_state_vaddr</name></expr>;</expr_stmt>



    <comment type="block" pos:start="65:5" pos:end="65:42">/* fixup addresses in ROM if needed */</comment>

    <if_stmt pos:start="67:5" pos:end="71:5"><if pos:start="67:5" pos:end="71:5">if <condition pos:start="67:8" pos:end="67:59">(<expr pos:start="67:9" pos:end="67:58"><name pos:start="67:9" pos:end="67:23">rom_state_vaddr</name> <operator pos:start="67:25" pos:end="67:26">==</operator> <call pos:start="67:28" pos:end="67:58"><name pos:start="67:28" pos:end="67:38">le32_to_cpu</name><argument_list pos:start="67:39" pos:end="67:58">(<argument pos:start="67:40" pos:end="67:57"><expr pos:start="67:40" pos:end="67:57"><name pos:start="67:40" pos:end="67:57"><name pos:start="67:40" pos:end="67:40">s</name><operator pos:start="67:41" pos:end="67:42">-&gt;</operator><name pos:start="67:43" pos:end="67:51">rom_state</name><operator pos:start="67:52" pos:end="67:52">.</operator><name pos:start="67:53" pos:end="67:57">vaddr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="67:61" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:17">

        <return pos:start="69:9" pos:end="69:17">return <expr pos:start="69:16" pos:end="69:16"><literal type="number" pos:start="69:16" pos:end="69:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <for pos:start="73:5" pos:end="99:5">for <control pos:start="73:9" pos:end="77:18">(<init pos:start="73:10" pos:end="73:53"><expr pos:start="73:10" pos:end="73:52"><name pos:start="73:10" pos:end="73:12">pos</name> <operator pos:start="73:14" pos:end="73:14">=</operator> <call pos:start="73:16" pos:end="73:52"><name pos:start="73:16" pos:end="73:26">le32_to_cpu</name><argument_list pos:start="73:27" pos:end="73:52">(<argument pos:start="73:28" pos:end="73:51"><expr pos:start="73:28" pos:end="73:51"><name pos:start="73:28" pos:end="73:51"><name pos:start="73:28" pos:end="73:28">s</name><operator pos:start="73:29" pos:end="73:30">-&gt;</operator><name pos:start="73:31" pos:end="73:39">rom_state</name><operator pos:start="73:40" pos:end="73:40">.</operator><name pos:start="73:41" pos:end="73:51">fixup_start</name></name></expr></argument>)</argument_list></call></expr>;</init>

         <condition pos:start="75:10" pos:end="75:51"><expr pos:start="75:10" pos:end="75:50"><name pos:start="75:10" pos:end="75:12">pos</name> <operator pos:start="75:14" pos:end="75:14">&lt;</operator> <call pos:start="75:16" pos:end="75:50"><name pos:start="75:16" pos:end="75:26">le32_to_cpu</name><argument_list pos:start="75:27" pos:end="75:50">(<argument pos:start="75:28" pos:end="75:49"><expr pos:start="75:28" pos:end="75:49"><name pos:start="75:28" pos:end="75:49"><name pos:start="75:28" pos:end="75:28">s</name><operator pos:start="75:29" pos:end="75:30">-&gt;</operator><name pos:start="75:31" pos:end="75:39">rom_state</name><operator pos:start="75:40" pos:end="75:40">.</operator><name pos:start="75:41" pos:end="75:49">fixup_end</name></name></expr></argument>)</argument_list></call></expr>;</condition>

         <incr pos:start="77:10" pos:end="77:17"><expr pos:start="77:10" pos:end="77:17"><name pos:start="77:10" pos:end="77:12">pos</name> <operator pos:start="77:14" pos:end="77:15">+=</operator> <literal type="number" pos:start="77:17" pos:end="77:17">4</literal></expr></incr>)</control> <block pos:start="77:20" pos:end="99:5">{<block_content pos:start="79:9" pos:end="97:49">

        <expr_stmt pos:start="79:9" pos:end="81:67"><expr pos:start="79:9" pos:end="81:66"><call pos:start="79:9" pos:end="81:66"><name pos:start="79:9" pos:end="79:30">cpu_physical_memory_rw</name><argument_list pos:start="79:31" pos:end="81:66">(<argument pos:start="79:32" pos:end="79:63"><expr pos:start="79:32" pos:end="79:63"><name pos:start="79:32" pos:end="79:36">paddr</name> <operator pos:start="79:38" pos:end="79:38">+</operator> <name pos:start="79:40" pos:end="79:42">pos</name> <operator pos:start="79:44" pos:end="79:44">-</operator> <name pos:start="79:46" pos:end="79:63"><name pos:start="79:46" pos:end="79:46">s</name><operator pos:start="79:47" pos:end="79:48">-&gt;</operator><name pos:start="79:49" pos:end="79:57">rom_state</name><operator pos:start="79:58" pos:end="79:58">.</operator><name pos:start="79:59" pos:end="79:63">vaddr</name></name></expr></argument>,

                               <argument pos:start="81:32" pos:end="81:46"><expr pos:start="81:32" pos:end="81:46"><operator pos:start="81:32" pos:end="81:32">(</operator><name pos:start="81:33" pos:end="81:36">void</name> <operator pos:start="81:38" pos:end="81:38">*</operator><operator pos:start="81:39" pos:end="81:39">)</operator><operator pos:start="81:40" pos:end="81:40">&amp;</operator><name pos:start="81:41" pos:end="81:46">offset</name></expr></argument>, <argument pos:start="81:49" pos:end="81:62"><expr pos:start="81:49" pos:end="81:62"><sizeof pos:start="81:49" pos:end="81:62">sizeof<argument_list pos:start="81:55" pos:end="81:62">(<argument pos:start="81:56" pos:end="81:61"><expr pos:start="81:56" pos:end="81:61"><name pos:start="81:56" pos:end="81:61">offset</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="81:65" pos:end="81:65"><expr pos:start="81:65" pos:end="81:65"><literal type="number" pos:start="81:65" pos:end="81:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:37"><expr pos:start="83:9" pos:end="83:36"><name pos:start="83:9" pos:end="83:14">offset</name> <operator pos:start="83:16" pos:end="83:16">=</operator> <call pos:start="83:18" pos:end="83:36"><name pos:start="83:18" pos:end="83:28">le32_to_cpu</name><argument_list pos:start="83:29" pos:end="83:36">(<argument pos:start="83:30" pos:end="83:35"><expr pos:start="83:30" pos:end="83:35"><name pos:start="83:30" pos:end="83:35">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="87:49"><expr pos:start="85:9" pos:end="87:48"><call pos:start="85:9" pos:end="87:48"><name pos:start="85:9" pos:end="85:30">cpu_physical_memory_rw</name><argument_list pos:start="85:31" pos:end="87:48">(<argument pos:start="85:32" pos:end="85:45"><expr pos:start="85:32" pos:end="85:45"><name pos:start="85:32" pos:end="85:36">paddr</name> <operator pos:start="85:38" pos:end="85:38">+</operator> <name pos:start="85:40" pos:end="85:45">offset</name></expr></argument>, <argument pos:start="85:48" pos:end="85:61"><expr pos:start="85:48" pos:end="85:61"><operator pos:start="85:48" pos:end="85:48">(</operator><name pos:start="85:49" pos:end="85:52">void</name> <operator pos:start="85:54" pos:end="85:54">*</operator><operator pos:start="85:55" pos:end="85:55">)</operator><operator pos:start="85:56" pos:end="85:56">&amp;</operator><name pos:start="85:57" pos:end="85:61">patch</name></expr></argument>,

                               <argument pos:start="87:32" pos:end="87:44"><expr pos:start="87:32" pos:end="87:44"><sizeof pos:start="87:32" pos:end="87:44">sizeof<argument_list pos:start="87:38" pos:end="87:44">(<argument pos:start="87:39" pos:end="87:43"><expr pos:start="87:39" pos:end="87:43"><name pos:start="87:39" pos:end="87:43">patch</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="87:47" pos:end="87:47"><expr pos:start="87:47" pos:end="87:47"><literal type="number" pos:start="87:47" pos:end="87:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:35"><expr pos:start="89:9" pos:end="89:34"><name pos:start="89:9" pos:end="89:13">patch</name> <operator pos:start="89:15" pos:end="89:15">=</operator> <call pos:start="89:17" pos:end="89:34"><name pos:start="89:17" pos:end="89:27">le32_to_cpu</name><argument_list pos:start="89:28" pos:end="89:34">(<argument pos:start="89:29" pos:end="89:33"><expr pos:start="89:29" pos:end="89:33"><name pos:start="89:29" pos:end="89:33">patch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:67"><expr pos:start="91:9" pos:end="91:66"><name pos:start="91:9" pos:end="91:13">patch</name> <operator pos:start="91:15" pos:end="91:16">+=</operator> <name pos:start="91:18" pos:end="91:32">rom_state_vaddr</name> <operator pos:start="91:34" pos:end="91:34">-</operator> <call pos:start="91:36" pos:end="91:66"><name pos:start="91:36" pos:end="91:46">le32_to_cpu</name><argument_list pos:start="91:47" pos:end="91:66">(<argument pos:start="91:48" pos:end="91:65"><expr pos:start="91:48" pos:end="91:65"><name pos:start="91:48" pos:end="91:65"><name pos:start="91:48" pos:end="91:48">s</name><operator pos:start="91:49" pos:end="91:50">-&gt;</operator><name pos:start="91:51" pos:end="91:59">rom_state</name><operator pos:start="91:60" pos:end="91:60">.</operator><name pos:start="91:61" pos:end="91:65">vaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:35"><expr pos:start="93:9" pos:end="93:34"><name pos:start="93:9" pos:end="93:13">patch</name> <operator pos:start="93:15" pos:end="93:15">=</operator> <call pos:start="93:17" pos:end="93:34"><name pos:start="93:17" pos:end="93:27">cpu_to_le32</name><argument_list pos:start="93:28" pos:end="93:34">(<argument pos:start="93:29" pos:end="93:33"><expr pos:start="93:29" pos:end="93:33"><name pos:start="93:29" pos:end="93:33">patch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="97:49"><expr pos:start="95:9" pos:end="97:48"><call pos:start="95:9" pos:end="97:48"><name pos:start="95:9" pos:end="95:30">cpu_physical_memory_rw</name><argument_list pos:start="95:31" pos:end="97:48">(<argument pos:start="95:32" pos:end="95:45"><expr pos:start="95:32" pos:end="95:45"><name pos:start="95:32" pos:end="95:36">paddr</name> <operator pos:start="95:38" pos:end="95:38">+</operator> <name pos:start="95:40" pos:end="95:45">offset</name></expr></argument>, <argument pos:start="95:48" pos:end="95:61"><expr pos:start="95:48" pos:end="95:61"><operator pos:start="95:48" pos:end="95:48">(</operator><name pos:start="95:49" pos:end="95:52">void</name> <operator pos:start="95:54" pos:end="95:54">*</operator><operator pos:start="95:55" pos:end="95:55">)</operator><operator pos:start="95:56" pos:end="95:56">&amp;</operator><name pos:start="95:57" pos:end="95:61">patch</name></expr></argument>,

                               <argument pos:start="97:32" pos:end="97:44"><expr pos:start="97:32" pos:end="97:44"><sizeof pos:start="97:32" pos:end="97:44">sizeof<argument_list pos:start="97:38" pos:end="97:44">(<argument pos:start="97:39" pos:end="97:43"><expr pos:start="97:39" pos:end="97:43"><name pos:start="97:39" pos:end="97:43">patch</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="97:47" pos:end="97:47"><expr pos:start="97:47" pos:end="97:47"><literal type="number" pos:start="97:47" pos:end="97:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="101:5" pos:end="101:28"><expr pos:start="101:5" pos:end="101:27"><call pos:start="101:5" pos:end="101:27"><name pos:start="101:5" pos:end="101:24">read_guest_rom_state</name><argument_list pos:start="101:25" pos:end="101:27">(<argument pos:start="101:26" pos:end="101:26"><expr pos:start="101:26" pos:end="101:26"><name pos:start="101:26" pos:end="101:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="105:40"><expr pos:start="103:5" pos:end="105:39"><name pos:start="103:5" pos:end="103:18"><name pos:start="103:5" pos:end="103:5">s</name><operator pos:start="103:6" pos:end="103:7">-&gt;</operator><name pos:start="103:8" pos:end="103:18">vapic_paddr</name></name> <operator pos:start="103:20" pos:end="103:20">=</operator> <name pos:start="103:22" pos:end="103:26">paddr</name> <operator pos:start="103:28" pos:end="103:28">+</operator> <call pos:start="103:30" pos:end="103:66"><name pos:start="103:30" pos:end="103:40">le32_to_cpu</name><argument_list pos:start="103:41" pos:end="103:66">(<argument pos:start="103:42" pos:end="103:65"><expr pos:start="103:42" pos:end="103:65"><name pos:start="103:42" pos:end="103:65"><name pos:start="103:42" pos:end="103:42">s</name><operator pos:start="103:43" pos:end="103:44">-&gt;</operator><name pos:start="103:45" pos:end="103:53">rom_state</name><operator pos:start="103:54" pos:end="103:54">.</operator><name pos:start="103:55" pos:end="103:65">vapic_vaddr</name></name></expr></argument>)</argument_list></call> <operator pos:start="103:68" pos:end="103:68">-</operator>

        <call pos:start="105:9" pos:end="105:39"><name pos:start="105:9" pos:end="105:19">le32_to_cpu</name><argument_list pos:start="105:20" pos:end="105:39">(<argument pos:start="105:21" pos:end="105:38"><expr pos:start="105:21" pos:end="105:38"><name pos:start="105:21" pos:end="105:38"><name pos:start="105:21" pos:end="105:21">s</name><operator pos:start="105:22" pos:end="105:23">-&gt;</operator><name pos:start="105:24" pos:end="105:32">rom_state</name><operator pos:start="105:33" pos:end="105:33">.</operator><name pos:start="105:34" pos:end="105:38">vaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="109:5" pos:end="109:13">return <expr pos:start="109:12" pos:end="109:12"><literal type="number" pos:start="109:12" pos:end="109:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
