<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/27127.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:28"><name pos:start="1:1" pos:end="1:9">sorecvoob</name><argument_list pos:start="1:10" pos:end="1:28">(<argument pos:start="1:11" pos:end="1:27">struct socket *so</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="41:1">{<block_content pos:start="5:9" pos:end="39:24">

	<decl_stmt pos:start="5:9" pos:end="5:41"><decl pos:start="5:9" pos:end="5:40"><type pos:start="5:9" pos:end="5:22"><name pos:start="5:9" pos:end="5:20"><name pos:start="5:9" pos:end="5:14">struct</name> <name pos:start="5:16" pos:end="5:20">tcpcb</name></name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:24">tp</name> <init pos:start="5:26" pos:end="5:40">= <expr pos:start="5:28" pos:end="5:40"><call pos:start="5:28" pos:end="5:40"><name pos:start="5:28" pos:end="5:36">sototcpcb</name><argument_list pos:start="5:37" pos:end="5:40">(<argument pos:start="5:38" pos:end="5:39"><expr pos:start="5:38" pos:end="5:39"><name pos:start="5:38" pos:end="5:39">so</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



	<expr_stmt pos:start="9:9" pos:end="9:32"><expr pos:start="9:9" pos:end="9:31"><call pos:start="9:9" pos:end="9:31"><name pos:start="9:9" pos:end="9:18">DEBUG_CALL</name><argument_list pos:start="9:19" pos:end="9:31">(<argument pos:start="9:20" pos:end="9:30"><expr pos:start="9:20" pos:end="9:30"><literal type="string" pos:start="9:20" pos:end="9:30">"sorecvoob"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="11:9" pos:end="11:33"><expr pos:start="11:9" pos:end="11:32"><call pos:start="11:9" pos:end="11:32"><name pos:start="11:9" pos:end="11:17">DEBUG_ARG</name><argument_list pos:start="11:18" pos:end="11:32">(<argument pos:start="11:19" pos:end="11:27"><expr pos:start="11:19" pos:end="11:27"><literal type="string" pos:start="11:19" pos:end="11:27">"so = %p"</literal></expr></argument>, <argument pos:start="11:30" pos:end="11:31"><expr pos:start="11:30" pos:end="11:31"><name pos:start="11:30" pos:end="11:31">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<comment type="block" pos:start="15:9" pos:end="29:11">/*

	 * We take a guess at how much urgent data has arrived.

	 * In most situations, when urgent data arrives, the next

	 * read() should get all the urgent data.  This guess will

	 * be wrong however if more data arrives just after the

	 * urgent data, or the read() doesn't return all the

	 * urgent data.

	 */</comment>

	<expr_stmt pos:start="31:9" pos:end="31:19"><expr pos:start="31:9" pos:end="31:18"><call pos:start="31:9" pos:end="31:18"><name pos:start="31:9" pos:end="31:14">soread</name><argument_list pos:start="31:15" pos:end="31:18">(<argument pos:start="31:16" pos:end="31:17"><expr pos:start="31:16" pos:end="31:17"><name pos:start="31:16" pos:end="31:17">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="33:9" pos:end="33:52"><expr pos:start="33:9" pos:end="33:51"><name pos:start="33:9" pos:end="33:18"><name pos:start="33:9" pos:end="33:10">tp</name><operator pos:start="33:11" pos:end="33:12">-&gt;</operator><name pos:start="33:13" pos:end="33:18">snd_up</name></name> <operator pos:start="33:20" pos:end="33:20">=</operator> <name pos:start="33:22" pos:end="33:32"><name pos:start="33:22" pos:end="33:23">tp</name><operator pos:start="33:24" pos:end="33:25">-&gt;</operator><name pos:start="33:26" pos:end="33:32">snd_una</name></name> <operator pos:start="33:34" pos:end="33:34">+</operator> <name pos:start="33:36" pos:end="33:51"><name pos:start="33:36" pos:end="33:37">so</name><operator pos:start="33:38" pos:end="33:39">-&gt;</operator><name pos:start="33:40" pos:end="33:45">so_snd</name><operator pos:start="33:46" pos:end="33:46">.</operator><name pos:start="33:47" pos:end="33:51">sb_cc</name></name></expr>;</expr_stmt>

	<expr_stmt pos:start="35:9" pos:end="35:24"><expr pos:start="35:9" pos:end="35:23"><name pos:start="35:9" pos:end="35:19"><name pos:start="35:9" pos:end="35:10">tp</name><operator pos:start="35:11" pos:end="35:12">-&gt;</operator><name pos:start="35:13" pos:end="35:19">t_force</name></name> <operator pos:start="35:21" pos:end="35:21">=</operator> <literal type="number" pos:start="35:23" pos:end="35:23">1</literal></expr>;</expr_stmt>

	<expr_stmt pos:start="37:9" pos:end="37:23"><expr pos:start="37:9" pos:end="37:22"><call pos:start="37:9" pos:end="37:22"><name pos:start="37:9" pos:end="37:18">tcp_output</name><argument_list pos:start="37:19" pos:end="37:22">(<argument pos:start="37:20" pos:end="37:21"><expr pos:start="37:20" pos:end="37:21"><name pos:start="37:20" pos:end="37:21">tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="39:9" pos:end="39:24"><expr pos:start="39:9" pos:end="39:23"><name pos:start="39:9" pos:end="39:19"><name pos:start="39:9" pos:end="39:10">tp</name><operator pos:start="39:11" pos:end="39:12">-&gt;</operator><name pos:start="39:13" pos:end="39:19">t_force</name></name> <operator pos:start="39:21" pos:end="39:21">=</operator> <literal type="number" pos:start="39:23" pos:end="39:23">0</literal></expr>;</expr_stmt>

</block_content>}</block>
</unit>
