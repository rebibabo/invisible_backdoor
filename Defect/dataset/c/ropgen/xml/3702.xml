<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3702.c" pos:tabs="8"><function pos:start="1:1" pos:end="33:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:22">bitmap_set_atomic</name><parameter_list pos:start="1:23" pos:end="1:63">(<parameter pos:start="1:24" pos:end="1:41"><decl pos:start="1:24" pos:end="1:41"><type pos:start="1:24" pos:end="1:41"><name pos:start="1:24" pos:end="1:31">unsigned</name> <name pos:start="1:33" pos:end="1:36">long</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">map</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:53"><decl pos:start="1:44" pos:end="1:53"><type pos:start="1:44" pos:end="1:53"><name pos:start="1:44" pos:end="1:47">long</name></type> <name pos:start="1:49" pos:end="1:53">start</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:62"><decl pos:start="1:56" pos:end="1:62"><type pos:start="1:56" pos:end="1:62"><name pos:start="1:56" pos:end="1:59">long</name></type> <name pos:start="1:61" pos:end="1:62">nr</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="33:1">{<block_content pos:start="3:5" pos:end="32:5">
    <decl_stmt pos:start="3:5" pos:end="3:45"><decl pos:start="3:5" pos:end="3:44"><type pos:start="3:5" pos:end="3:19"><name pos:start="3:5" pos:end="3:12">unsigned</name> <name pos:start="3:14" pos:end="3:17">long</name> <modifier pos:start="3:19" pos:end="3:19">*</modifier></type><name pos:start="3:20" pos:end="3:20">p</name> <init pos:start="3:22" pos:end="3:44">= <expr pos:start="3:24" pos:end="3:44"><name pos:start="3:24" pos:end="3:26">map</name> <operator pos:start="3:28" pos:end="3:28">+</operator> <call pos:start="3:30" pos:end="3:44"><name pos:start="3:30" pos:end="3:37">BIT_WORD</name><argument_list pos:start="3:38" pos:end="3:44">(<argument pos:start="3:39" pos:end="3:43"><expr pos:start="3:39" pos:end="3:43"><name pos:start="3:39" pos:end="3:43">start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:33"><decl pos:start="4:5" pos:end="4:32"><type pos:start="4:5" pos:end="4:14"><specifier pos:start="4:5" pos:end="4:9">const</specifier> <name pos:start="4:11" pos:end="4:14">long</name></type> <name pos:start="4:16" pos:end="4:19">size</name> <init pos:start="4:21" pos:end="4:32">= <expr pos:start="4:23" pos:end="4:32"><name pos:start="4:23" pos:end="4:27">start</name> <operator pos:start="4:29" pos:end="4:29">+</operator> <name pos:start="4:31" pos:end="4:32">nr</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:62"><decl pos:start="5:5" pos:end="5:61"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:19">bits_to_set</name> <init pos:start="5:21" pos:end="5:61">= <expr pos:start="5:23" pos:end="5:61"><name pos:start="5:23" pos:end="5:35">BITS_PER_LONG</name> <operator pos:start="5:37" pos:end="5:37">-</operator> <operator pos:start="5:39" pos:end="5:39">(</operator><name pos:start="5:40" pos:end="5:44">start</name> <operator pos:start="5:46" pos:end="5:46">%</operator> <name pos:start="5:48" pos:end="5:60">BITS_PER_LONG</name><operator pos:start="5:61" pos:end="5:61">)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:62"><decl pos:start="6:5" pos:end="6:61"><type pos:start="6:5" pos:end="6:17"><name pos:start="6:5" pos:end="6:12">unsigned</name> <name pos:start="6:14" pos:end="6:17">long</name></type> <name pos:start="6:19" pos:end="6:29">mask_to_set</name> <init pos:start="6:31" pos:end="6:61">= <expr pos:start="6:33" pos:end="6:61"><call pos:start="6:33" pos:end="6:61"><name pos:start="6:33" pos:end="6:54">BITMAP_FIRST_WORD_MASK</name><argument_list pos:start="6:55" pos:end="6:61">(<argument pos:start="6:56" pos:end="6:60"><expr pos:start="6:56" pos:end="6:60"><name pos:start="6:56" pos:end="6:60">start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="block" pos:start="7:5" pos:end="7:20">/* First word */</comment>
    <if_stmt pos:start="8:5" pos:end="14:5"><if pos:start="8:5" pos:end="14:5">if <condition pos:start="8:8" pos:end="8:29">(<expr pos:start="8:9" pos:end="8:28"><name pos:start="8:9" pos:end="8:10">nr</name> <operator pos:start="8:12" pos:end="8:12">-</operator> <name pos:start="8:14" pos:end="8:24">bits_to_set</name> <operator pos:start="8:26" pos:end="8:26">&gt;</operator> <literal type="number" pos:start="8:28" pos:end="8:28">0</literal></expr>)</condition> <block pos:start="8:31" pos:end="14:5">{<block_content pos:start="9:9" pos:end="13:12">
        <expr_stmt pos:start="9:9" pos:end="9:34"><expr pos:start="9:9" pos:end="9:33"><call pos:start="9:9" pos:end="9:33"><name pos:start="9:9" pos:end="9:17">atomic_or</name><argument_list pos:start="9:18" pos:end="9:33">(<argument pos:start="9:19" pos:end="9:19"><expr pos:start="9:19" pos:end="9:19"><name pos:start="9:19" pos:end="9:19">p</name></expr></argument>, <argument pos:start="9:22" pos:end="9:32"><expr pos:start="9:22" pos:end="9:32"><name pos:start="9:22" pos:end="9:32">mask_to_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="10:9" pos:end="10:26"><expr pos:start="10:9" pos:end="10:25"><name pos:start="10:9" pos:end="10:10">nr</name> <operator pos:start="10:12" pos:end="10:13">-=</operator> <name pos:start="10:15" pos:end="10:25">bits_to_set</name></expr>;</expr_stmt>
        <expr_stmt pos:start="11:9" pos:end="11:36"><expr pos:start="11:9" pos:end="11:35"><name pos:start="11:9" pos:end="11:19">bits_to_set</name> <operator pos:start="11:21" pos:end="11:21">=</operator> <name pos:start="11:23" pos:end="11:35">BITS_PER_LONG</name></expr>;</expr_stmt>
        <expr_stmt pos:start="12:9" pos:end="12:27"><expr pos:start="12:9" pos:end="12:26"><name pos:start="12:9" pos:end="12:19">mask_to_set</name> <operator pos:start="12:21" pos:end="12:21">=</operator> <operator pos:start="12:23" pos:end="12:23">~</operator><literal type="number" pos:start="12:24" pos:end="12:26">0UL</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="13:9" pos:end="13:12"><expr pos:start="13:9" pos:end="13:11"><name pos:start="13:9" pos:end="13:9">p</name><operator pos:start="13:10" pos:end="13:11">++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="15:5" pos:end="15:20">/* Full words */</comment>
    <if_stmt pos:start="16:5" pos:end="22:5"><if pos:start="16:5" pos:end="22:5">if <condition pos:start="16:8" pos:end="16:37">(<expr pos:start="16:9" pos:end="16:36"><name pos:start="16:9" pos:end="16:19">bits_to_set</name> <operator pos:start="16:21" pos:end="16:22">==</operator> <name pos:start="16:24" pos:end="16:36">BITS_PER_LONG</name></expr>)</condition> <block pos:start="16:39" pos:end="22:5">{<block_content pos:start="17:9" pos:end="21:9">
        <while pos:start="17:9" pos:end="21:9">while <condition pos:start="17:15" pos:end="17:35">(<expr pos:start="17:16" pos:end="17:34"><name pos:start="17:16" pos:end="17:17">nr</name> <operator pos:start="17:19" pos:end="17:20">&gt;=</operator> <name pos:start="17:22" pos:end="17:34">BITS_PER_LONG</name></expr>)</condition> <block pos:start="17:37" pos:end="21:9">{<block_content pos:start="18:13" pos:end="20:16">
            <expr_stmt pos:start="18:13" pos:end="18:22"><expr pos:start="18:13" pos:end="18:21"><operator pos:start="18:13" pos:end="18:13">*</operator><name pos:start="18:14" pos:end="18:14">p</name> <operator pos:start="18:16" pos:end="18:16">=</operator> <operator pos:start="18:18" pos:end="18:18">~</operator><literal type="number" pos:start="18:19" pos:end="18:21">0UL</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="19:13" pos:end="19:32"><expr pos:start="19:13" pos:end="19:31"><name pos:start="19:13" pos:end="19:14">nr</name> <operator pos:start="19:16" pos:end="19:17">-=</operator> <name pos:start="19:19" pos:end="19:31">BITS_PER_LONG</name></expr>;</expr_stmt>
            <expr_stmt pos:start="20:13" pos:end="20:16"><expr pos:start="20:13" pos:end="20:15"><name pos:start="20:13" pos:end="20:13">p</name><operator pos:start="20:14" pos:end="20:15">++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="23:5" pos:end="23:19">/* Last word */</comment>
    <if_stmt pos:start="24:5" pos:end="32:5"><if pos:start="24:5" pos:end="27:5">if <condition pos:start="24:8" pos:end="24:11">(<expr pos:start="24:9" pos:end="24:10"><name pos:start="24:9" pos:end="24:10">nr</name></expr>)</condition> <block pos:start="24:13" pos:end="27:5">{<block_content pos:start="25:9" pos:end="26:34">
        <expr_stmt pos:start="25:9" pos:end="25:51"><expr pos:start="25:9" pos:end="25:50"><name pos:start="25:9" pos:end="25:19">mask_to_set</name> <operator pos:start="25:21" pos:end="25:22">&amp;=</operator> <call pos:start="25:24" pos:end="25:50"><name pos:start="25:24" pos:end="25:44">BITMAP_LAST_WORD_MASK</name><argument_list pos:start="25:45" pos:end="25:50">(<argument pos:start="25:46" pos:end="25:49"><expr pos:start="25:46" pos:end="25:49"><name pos:start="25:46" pos:end="25:49">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="26:9" pos:end="26:34"><expr pos:start="26:9" pos:end="26:33"><call pos:start="26:9" pos:end="26:33"><name pos:start="26:9" pos:end="26:17">atomic_or</name><argument_list pos:start="26:18" pos:end="26:33">(<argument pos:start="26:19" pos:end="26:19"><expr pos:start="26:19" pos:end="26:19"><name pos:start="26:19" pos:end="26:19">p</name></expr></argument>, <argument pos:start="26:22" pos:end="26:32"><expr pos:start="26:22" pos:end="26:32"><name pos:start="26:22" pos:end="26:32">mask_to_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="27:7" pos:end="32:5">else <block pos:start="27:12" pos:end="32:5">{<block_content pos:start="31:9" pos:end="31:17">
        <comment type="block" pos:start="28:9" pos:end="30:11">/* If we avoided the full barrier in atomic_or(), issue a
         * barrier to account for the assignments in the while loop.
         */</comment>
        <expr_stmt pos:start="31:9" pos:end="31:17"><expr pos:start="31:9" pos:end="31:16"><call pos:start="31:9" pos:end="31:16"><name pos:start="31:9" pos:end="31:14">smp_mb</name><argument_list pos:start="31:15" pos:end="31:16">()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function></unit>
