<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18504.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">decode_frame_adu</name><parameter_list pos:start="1:28" pos:end="3:64">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:61"><decl pos:start="1:52" pos:end="1:61"><type pos:start="1:52" pos:end="1:61"><name pos:start="1:52" pos:end="1:55">void</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">data</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:46"><decl pos:start="3:29" pos:end="3:46"><type pos:start="3:29" pos:end="3:46"><name pos:start="3:29" pos:end="3:31">int</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:46">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:63"><decl pos:start="3:49" pos:end="3:63"><type pos:start="3:49" pos:end="3:63"><name pos:start="3:49" pos:end="3:56">AVPacket</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:63">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="101:1">{<block_content pos:start="7:5" pos:end="99:20">

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">buf</name>  <init pos:start="7:25" pos:end="7:37">= <expr pos:start="7:27" pos:end="7:37"><name pos:start="7:27" pos:end="7:37"><name pos:start="7:27" pos:end="7:31">avpkt</name><operator pos:start="7:32" pos:end="7:33">-&gt;</operator><name pos:start="7:34" pos:end="7:37">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">buf_size</name>        <init pos:start="9:25" pos:end="9:37">= <expr pos:start="9:27" pos:end="9:37"><name pos:start="9:27" pos:end="9:37"><name pos:start="9:27" pos:end="9:31">avpkt</name><operator pos:start="9:32" pos:end="9:33">-&gt;</operator><name pos:start="9:34" pos:end="9:37">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:43"><decl pos:start="11:5" pos:end="11:42"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">MPADecodeContext</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:23">s</name> <init pos:start="11:25" pos:end="11:42">= <expr pos:start="11:27" pos:end="11:42"><name pos:start="11:27" pos:end="11:42"><name pos:start="11:27" pos:end="11:31">avctx</name><operator pos:start="11:32" pos:end="11:33">-&gt;</operator><name pos:start="11:34" pos:end="11:42">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:19">header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:17"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">len</name></decl>, <decl pos:start="15:14" pos:end="15:16"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:14" pos:end="15:16">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:19"><expr pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:7">len</name> <operator pos:start="19:9" pos:end="19:9">=</operator> <name pos:start="19:11" pos:end="19:18">buf_size</name></expr>;</expr_stmt>



    <comment type="line" pos:start="23:5" pos:end="23:31">// Discard too short frames</comment>

    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:31">(<expr pos:start="25:9" pos:end="25:30"><name pos:start="25:9" pos:end="25:16">buf_size</name> <operator pos:start="25:18" pos:end="25:18">&lt;</operator> <name pos:start="25:20" pos:end="25:30">HEADER_SIZE</name></expr>)</condition> <block pos:start="25:33" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:35">

        <expr_stmt pos:start="27:9" pos:end="27:61"><expr pos:start="27:9" pos:end="27:60"><call pos:start="27:9" pos:end="27:60"><name pos:start="27:9" pos:end="27:14">av_log</name><argument_list pos:start="27:15" pos:end="27:60">(<argument pos:start="27:16" pos:end="27:20"><expr pos:start="27:16" pos:end="27:20"><name pos:start="27:16" pos:end="27:20">avctx</name></expr></argument>, <argument pos:start="27:23" pos:end="27:34"><expr pos:start="27:23" pos:end="27:34"><name pos:start="27:23" pos:end="27:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="27:37" pos:end="27:59"><expr pos:start="27:37" pos:end="27:59"><literal type="string" pos:start="27:37" pos:end="27:59">"Packet is too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:35">return <expr pos:start="29:16" pos:end="29:34"><name pos:start="29:16" pos:end="29:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>





    <if_stmt pos:start="37:5" pos:end="39:39"><if pos:start="37:5" pos:end="39:39">if <condition pos:start="37:8" pos:end="37:39">(<expr pos:start="37:9" pos:end="37:38"><name pos:start="37:9" pos:end="37:11">len</name> <operator pos:start="37:13" pos:end="37:13">&gt;</operator> <name pos:start="37:15" pos:end="37:38">MPA_MAX_CODED_FRAME_SIZE</name></expr>)</condition><block type="pseudo" pos:start="39:9" pos:end="39:39"><block_content pos:start="39:9" pos:end="39:39">

        <expr_stmt pos:start="39:9" pos:end="39:39"><expr pos:start="39:9" pos:end="39:38"><name pos:start="39:9" pos:end="39:11">len</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <name pos:start="39:15" pos:end="39:38">MPA_MAX_CODED_FRAME_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="line" pos:start="43:5" pos:end="43:39">// Get header and restore sync word</comment>

    <expr_stmt pos:start="45:5" pos:end="45:39"><expr pos:start="45:5" pos:end="45:38"><name pos:start="45:5" pos:end="45:10">header</name> <operator pos:start="45:12" pos:end="45:12">=</operator> <call pos:start="45:14" pos:end="45:25"><name pos:start="45:14" pos:end="45:20">AV_RB32</name><argument_list pos:start="45:21" pos:end="45:25">(<argument pos:start="45:22" pos:end="45:24"><expr pos:start="45:22" pos:end="45:24"><name pos:start="45:22" pos:end="45:24">buf</name></expr></argument>)</argument_list></call> <operator pos:start="45:27" pos:end="45:27">|</operator> <literal type="number" pos:start="45:29" pos:end="45:38">0xffe00000</literal></expr>;</expr_stmt>



    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:40">(<expr pos:start="49:9" pos:end="49:39"><call pos:start="49:9" pos:end="49:35"><name pos:start="49:9" pos:end="49:27">ff_mpa_check_header</name><argument_list pos:start="49:28" pos:end="49:35">(<argument pos:start="49:29" pos:end="49:34"><expr pos:start="49:29" pos:end="49:34"><name pos:start="49:29" pos:end="49:34">header</name></expr></argument>)</argument_list></call> <operator pos:start="49:37" pos:end="49:37">&lt;</operator> <literal type="number" pos:start="49:39" pos:end="49:39">0</literal></expr>)</condition> <block pos:start="49:42" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:35"> <comment type="line" pos:start="49:44" pos:end="49:71">// Bad header, discard frame</comment>

        <expr_stmt pos:start="51:9" pos:end="51:62"><expr pos:start="51:9" pos:end="51:61"><call pos:start="51:9" pos:end="51:61"><name pos:start="51:9" pos:end="51:14">av_log</name><argument_list pos:start="51:15" pos:end="51:61">(<argument pos:start="51:16" pos:end="51:20"><expr pos:start="51:16" pos:end="51:20"><name pos:start="51:16" pos:end="51:20">avctx</name></expr></argument>, <argument pos:start="51:23" pos:end="51:34"><expr pos:start="51:23" pos:end="51:34"><name pos:start="51:23" pos:end="51:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="51:37" pos:end="51:60"><expr pos:start="51:37" pos:end="51:60"><literal type="string" pos:start="51:37" pos:end="51:60">"Invalid frame header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:35">return <expr pos:start="53:16" pos:end="53:34"><name pos:start="53:16" pos:end="53:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:65"><expr pos:start="59:5" pos:end="59:64"><call pos:start="59:5" pos:end="59:64"><name pos:start="59:5" pos:end="59:34">avpriv_mpegaudio_decode_header</name><argument_list pos:start="59:35" pos:end="59:64">(<argument pos:start="59:36" pos:end="59:55"><expr pos:start="59:36" pos:end="59:55"><operator pos:start="59:36" pos:end="59:36">(</operator><name pos:start="59:37" pos:end="59:51">MPADecodeHeader</name> <operator pos:start="59:53" pos:end="59:53">*</operator><operator pos:start="59:54" pos:end="59:54">)</operator><name pos:start="59:55" pos:end="59:55">s</name></expr></argument>, <argument pos:start="59:58" pos:end="59:63"><expr pos:start="59:58" pos:end="59:63"><name pos:start="59:58" pos:end="59:63">header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="61:5" pos:end="61:27">/* update codec info */</comment>

    <expr_stmt pos:start="63:5" pos:end="63:40"><expr pos:start="63:5" pos:end="63:39"><name pos:start="63:5" pos:end="63:22"><name pos:start="63:5" pos:end="63:9">avctx</name><operator pos:start="63:10" pos:end="63:11">-&gt;</operator><name pos:start="63:12" pos:end="63:22">sample_rate</name></name> <operator pos:start="63:24" pos:end="63:24">=</operator> <name pos:start="63:26" pos:end="63:39"><name pos:start="63:26" pos:end="63:26">s</name><operator pos:start="63:27" pos:end="63:28">-&gt;</operator><name pos:start="63:29" pos:end="63:39">sample_rate</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:40"><expr pos:start="65:5" pos:end="65:39"><name pos:start="65:5" pos:end="65:19"><name pos:start="65:5" pos:end="65:9">avctx</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:19">channels</name></name>    <operator pos:start="65:24" pos:end="65:24">=</operator> <name pos:start="65:26" pos:end="65:39"><name pos:start="65:26" pos:end="65:26">s</name><operator pos:start="65:27" pos:end="65:28">-&gt;</operator><name pos:start="65:29" pos:end="65:39">nb_channels</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:90"><expr pos:start="67:5" pos:end="67:89"><name pos:start="67:5" pos:end="67:25"><name pos:start="67:5" pos:end="67:9">avctx</name><operator pos:start="67:10" pos:end="67:11">-&gt;</operator><name pos:start="67:12" pos:end="67:25">channel_layout</name></name> <operator pos:start="67:27" pos:end="67:27">=</operator> <ternary pos:start="67:29" pos:end="67:89"><condition pos:start="67:29" pos:end="67:49"><expr pos:start="67:29" pos:end="67:47"><name pos:start="67:29" pos:end="67:42"><name pos:start="67:29" pos:end="67:29">s</name><operator pos:start="67:30" pos:end="67:31">-&gt;</operator><name pos:start="67:32" pos:end="67:42">nb_channels</name></name> <operator pos:start="67:44" pos:end="67:45">==</operator> <literal type="number" pos:start="67:47" pos:end="67:47">1</literal></expr> ?</condition><then pos:start="67:51" pos:end="67:67"> <expr pos:start="67:51" pos:end="67:67"><name pos:start="67:51" pos:end="67:67">AV_CH_LAYOUT_MONO</name></expr> </then><else pos:start="67:69" pos:end="67:89">: <expr pos:start="67:71" pos:end="67:89"><name pos:start="67:71" pos:end="67:89">AV_CH_LAYOUT_STEREO</name></expr></else></ternary></expr>;</expr_stmt>

    <if_stmt pos:start="69:5" pos:end="71:38"><if pos:start="69:5" pos:end="71:38">if <condition pos:start="69:8" pos:end="69:25">(<expr pos:start="69:9" pos:end="69:24"><operator pos:start="69:9" pos:end="69:9">!</operator><name pos:start="69:10" pos:end="69:24"><name pos:start="69:10" pos:end="69:14">avctx</name><operator pos:start="69:15" pos:end="69:16">-&gt;</operator><name pos:start="69:17" pos:end="69:24">bit_rate</name></name></expr>)</condition><block type="pseudo" pos:start="71:9" pos:end="71:38"><block_content pos:start="71:9" pos:end="71:38">

        <expr_stmt pos:start="71:9" pos:end="71:38"><expr pos:start="71:9" pos:end="71:37"><name pos:start="71:9" pos:end="71:23"><name pos:start="71:9" pos:end="71:13">avctx</name><operator pos:start="71:14" pos:end="71:15">-&gt;</operator><name pos:start="71:16" pos:end="71:23">bit_rate</name></name> <operator pos:start="71:25" pos:end="71:25">=</operator> <name pos:start="71:27" pos:end="71:37"><name pos:start="71:27" pos:end="71:27">s</name><operator pos:start="71:28" pos:end="71:29">-&gt;</operator><name pos:start="71:30" pos:end="71:37">bit_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:24"><expr pos:start="75:5" pos:end="75:23"><name pos:start="75:5" pos:end="75:17"><name pos:start="75:5" pos:end="75:5">s</name><operator pos:start="75:6" pos:end="75:7">-&gt;</operator><name pos:start="75:8" pos:end="75:17">frame_size</name></name> <operator pos:start="75:19" pos:end="75:19">=</operator> <name pos:start="75:21" pos:end="75:23">len</name></expr>;</expr_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:20"><expr pos:start="79:5" pos:end="79:19"><name pos:start="79:5" pos:end="79:12"><name pos:start="79:5" pos:end="79:5">s</name><operator pos:start="79:6" pos:end="79:7">-&gt;</operator><name pos:start="79:8" pos:end="79:12">frame</name></name> <operator pos:start="79:14" pos:end="79:14">=</operator> <name pos:start="79:16" pos:end="79:19">data</name></expr>;</expr_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:50"><expr pos:start="83:5" pos:end="83:49"><name pos:start="83:5" pos:end="83:7">ret</name> <operator pos:start="83:9" pos:end="83:9">=</operator> <call pos:start="83:11" pos:end="83:49"><name pos:start="83:11" pos:end="83:25">mp_decode_frame</name><argument_list pos:start="83:26" pos:end="83:49">(<argument pos:start="83:27" pos:end="83:27"><expr pos:start="83:27" pos:end="83:27"><name pos:start="83:27" pos:end="83:27">s</name></expr></argument>, <argument pos:start="83:30" pos:end="83:33"><expr pos:start="83:30" pos:end="83:33"><name pos:start="83:30" pos:end="83:33">NULL</name></expr></argument>, <argument pos:start="83:36" pos:end="83:38"><expr pos:start="83:36" pos:end="83:38"><name pos:start="83:36" pos:end="83:38">buf</name></expr></argument>, <argument pos:start="83:41" pos:end="83:48"><expr pos:start="83:41" pos:end="83:48"><name pos:start="83:41" pos:end="83:48">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="85:5" pos:end="91:5"><if pos:start="85:5" pos:end="91:5">if <condition pos:start="85:8" pos:end="85:16">(<expr pos:start="85:9" pos:end="85:15"><name pos:start="85:9" pos:end="85:11">ret</name> <operator pos:start="85:13" pos:end="85:13">&lt;</operator> <literal type="number" pos:start="85:15" pos:end="85:15">0</literal></expr>)</condition> <block pos:start="85:18" pos:end="91:5">{<block_content pos:start="87:9" pos:end="89:19">

        <expr_stmt pos:start="87:9" pos:end="87:80"><expr pos:start="87:9" pos:end="87:79"><call pos:start="87:9" pos:end="87:79"><name pos:start="87:9" pos:end="87:14">av_log</name><argument_list pos:start="87:15" pos:end="87:79">(<argument pos:start="87:16" pos:end="87:20"><expr pos:start="87:16" pos:end="87:20"><name pos:start="87:16" pos:end="87:20">avctx</name></expr></argument>, <argument pos:start="87:23" pos:end="87:34"><expr pos:start="87:23" pos:end="87:34"><name pos:start="87:23" pos:end="87:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="87:37" pos:end="87:78"><expr pos:start="87:37" pos:end="87:78"><literal type="string" pos:start="87:37" pos:end="87:78">"Error while decoding MPEG audio frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="89:9" pos:end="89:19">return <expr pos:start="89:16" pos:end="89:18"><name pos:start="89:16" pos:end="89:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:23"><expr pos:start="95:5" pos:end="95:22"><operator pos:start="95:5" pos:end="95:5">*</operator><name pos:start="95:6" pos:end="95:18">got_frame_ptr</name> <operator pos:start="95:20" pos:end="95:20">=</operator> <literal type="number" pos:start="95:22" pos:end="95:22">1</literal></expr>;</expr_stmt>



    <return pos:start="99:5" pos:end="99:20">return <expr pos:start="99:12" pos:end="99:19"><name pos:start="99:12" pos:end="99:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
