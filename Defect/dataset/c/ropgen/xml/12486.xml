<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12486.c" pos:tabs="8"><function pos:start="1:1" pos:end="265:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">webp_decode_frame</name><parameter_list pos:start="1:29" pos:end="3:45">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:50"><name pos:start="1:30" pos:end="1:43">AVCodecContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:62"><decl pos:start="1:53" pos:end="1:62"><type pos:start="1:53" pos:end="1:62"><name pos:start="1:53" pos:end="1:56">void</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">data</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:78"><decl pos:start="1:65" pos:end="1:78"><type pos:start="1:65" pos:end="1:78"><name pos:start="1:65" pos:end="1:67">int</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:78">got_frame</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:44"><decl pos:start="3:30" pos:end="3:44"><type pos:start="3:30" pos:end="3:44"><name pos:start="3:30" pos:end="3:37">AVPacket</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:44">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="265:1">{<block_content pos:start="7:5" pos:end="263:23">

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:11">AVFrame</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier> <specifier pos:start="7:15" pos:end="7:19">const</specifier></type> <name pos:start="7:21" pos:end="7:21">p</name> <init pos:start="7:23" pos:end="7:28">= <expr pos:start="7:25" pos:end="7:28"><name pos:start="7:25" pos:end="7:28">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">WebPContext</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:18">s</name> <init pos:start="9:20" pos:end="9:37">= <expr pos:start="9:22" pos:end="9:37"><name pos:start="9:22" pos:end="9:37"><name pos:start="9:22" pos:end="9:26">avctx</name><operator pos:start="9:27" pos:end="9:28">-&gt;</operator><name pos:start="9:29" pos:end="9:37">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:18">GetByteContext</name></type> <name pos:start="11:20" pos:end="11:21">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:36"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:23">chunk_type</name></decl>, <decl pos:start="15:26" pos:end="15:35"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:26" pos:end="15:35">chunk_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:18">vp8x_flags</name> <init pos:start="17:20" pos:end="17:22">= <expr pos:start="17:22" pos:end="17:22"><literal type="number" pos:start="17:22" pos:end="17:22">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:25"><expr pos:start="21:5" pos:end="21:24"><name pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:5">s</name><operator pos:start="21:6" pos:end="21:7">-&gt;</operator><name pos:start="21:8" pos:end="21:12">avctx</name></name>     <operator pos:start="21:18" pos:end="21:18">=</operator> <name pos:start="21:20" pos:end="21:24">avctx</name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:21"><expr pos:start="23:5" pos:end="23:20"><name pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:5">s</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:12">width</name></name>     <operator pos:start="23:18" pos:end="23:18">=</operator> <literal type="number" pos:start="23:20" pos:end="23:20">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:21"><expr pos:start="25:5" pos:end="25:20"><name pos:start="25:5" pos:end="25:13"><name pos:start="25:5" pos:end="25:5">s</name><operator pos:start="25:6" pos:end="25:7">-&gt;</operator><name pos:start="25:8" pos:end="25:13">height</name></name>    <operator pos:start="25:18" pos:end="25:18">=</operator> <literal type="number" pos:start="25:20" pos:end="25:20">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:21"><expr pos:start="27:5" pos:end="27:20"><operator pos:start="27:5" pos:end="27:5">*</operator><name pos:start="27:6" pos:end="27:14">got_frame</name>   <operator pos:start="27:18" pos:end="27:18">=</operator> <literal type="number" pos:start="27:20" pos:end="27:20">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:21"><expr pos:start="29:5" pos:end="29:20"><name pos:start="29:5" pos:end="29:16"><name pos:start="29:5" pos:end="29:5">s</name><operator pos:start="29:6" pos:end="29:7">-&gt;</operator><name pos:start="29:8" pos:end="29:16">has_alpha</name></name> <operator pos:start="29:18" pos:end="29:18">=</operator> <literal type="number" pos:start="29:20" pos:end="29:20">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:52"><expr pos:start="31:5" pos:end="31:51"><call pos:start="31:5" pos:end="31:51"><name pos:start="31:5" pos:end="31:20">bytestream2_init</name><argument_list pos:start="31:21" pos:end="31:51">(<argument pos:start="31:22" pos:end="31:24"><expr pos:start="31:22" pos:end="31:24"><operator pos:start="31:22" pos:end="31:22">&amp;</operator><name pos:start="31:23" pos:end="31:24">gb</name></expr></argument>, <argument pos:start="31:27" pos:end="31:37"><expr pos:start="31:27" pos:end="31:37"><name pos:start="31:27" pos:end="31:37"><name pos:start="31:27" pos:end="31:31">avpkt</name><operator pos:start="31:32" pos:end="31:33">-&gt;</operator><name pos:start="31:34" pos:end="31:37">data</name></name></expr></argument>, <argument pos:start="31:40" pos:end="31:50"><expr pos:start="31:40" pos:end="31:50"><name pos:start="31:40" pos:end="31:50"><name pos:start="31:40" pos:end="31:44">avpkt</name><operator pos:start="31:45" pos:end="31:46">-&gt;</operator><name pos:start="31:47" pos:end="31:50">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="35:5" pos:end="37:35"><if pos:start="35:5" pos:end="37:35">if <condition pos:start="35:8" pos:end="35:45">(<expr pos:start="35:9" pos:end="35:44"><call pos:start="35:9" pos:end="35:39"><name pos:start="35:9" pos:end="35:34">bytestream2_get_bytes_left</name><argument_list pos:start="35:35" pos:end="35:39">(<argument pos:start="35:36" pos:end="35:38"><expr pos:start="35:36" pos:end="35:38"><operator pos:start="35:36" pos:end="35:36">&amp;</operator><name pos:start="35:37" pos:end="35:38">gb</name></expr></argument>)</argument_list></call> <operator pos:start="35:41" pos:end="35:41">&lt;</operator> <literal type="number" pos:start="35:43" pos:end="35:44">12</literal></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:35"><block_content pos:start="37:9" pos:end="37:35">

        <return pos:start="37:9" pos:end="37:35">return <expr pos:start="37:16" pos:end="37:34"><name pos:start="37:16" pos:end="37:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:63">(<expr pos:start="41:9" pos:end="41:62"><call pos:start="41:9" pos:end="41:33"><name pos:start="41:9" pos:end="41:28">bytestream2_get_le32</name><argument_list pos:start="41:29" pos:end="41:33">(<argument pos:start="41:30" pos:end="41:32"><expr pos:start="41:30" pos:end="41:32"><operator pos:start="41:30" pos:end="41:30">&amp;</operator><name pos:start="41:31" pos:end="41:32">gb</name></expr></argument>)</argument_list></call> <operator pos:start="41:35" pos:end="41:36">!=</operator> <call pos:start="41:38" pos:end="41:62"><name pos:start="41:38" pos:end="41:42">MKTAG</name><argument_list pos:start="41:43" pos:end="41:62">(<argument pos:start="41:44" pos:end="41:46"><expr pos:start="41:44" pos:end="41:46"><literal type="char" pos:start="41:44" pos:end="41:46">'R'</literal></expr></argument>, <argument pos:start="41:49" pos:end="41:51"><expr pos:start="41:49" pos:end="41:51"><literal type="char" pos:start="41:49" pos:end="41:51">'I'</literal></expr></argument>, <argument pos:start="41:54" pos:end="41:56"><expr pos:start="41:54" pos:end="41:56"><literal type="char" pos:start="41:54" pos:end="41:56">'F'</literal></expr></argument>, <argument pos:start="41:59" pos:end="41:61"><expr pos:start="41:59" pos:end="41:61"><literal type="char" pos:start="41:59" pos:end="41:61">'F'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="41:65" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:35">

        <expr_stmt pos:start="43:9" pos:end="43:58"><expr pos:start="43:9" pos:end="43:57"><call pos:start="43:9" pos:end="43:57"><name pos:start="43:9" pos:end="43:14">av_log</name><argument_list pos:start="43:15" pos:end="43:57">(<argument pos:start="43:16" pos:end="43:20"><expr pos:start="43:16" pos:end="43:20"><name pos:start="43:16" pos:end="43:20">avctx</name></expr></argument>, <argument pos:start="43:23" pos:end="43:34"><expr pos:start="43:23" pos:end="43:34"><name pos:start="43:23" pos:end="43:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="43:37" pos:end="43:56"><expr pos:start="43:37" pos:end="43:56"><literal type="string" pos:start="43:37" pos:end="43:56">"missing RIFF tag\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:35">return <expr pos:start="45:16" pos:end="45:34"><name pos:start="45:16" pos:end="45:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:43"><expr pos:start="51:5" pos:end="51:42"><name pos:start="51:5" pos:end="51:14">chunk_size</name> <operator pos:start="51:16" pos:end="51:16">=</operator> <call pos:start="51:18" pos:end="51:42"><name pos:start="51:18" pos:end="51:37">bytestream2_get_le32</name><argument_list pos:start="51:38" pos:end="51:42">(<argument pos:start="51:39" pos:end="51:41"><expr pos:start="51:39" pos:end="51:41"><operator pos:start="51:39" pos:end="51:39">&amp;</operator><name pos:start="51:40" pos:end="51:41">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="55:35"><if pos:start="53:5" pos:end="55:35">if <condition pos:start="53:8" pos:end="53:53">(<expr pos:start="53:9" pos:end="53:52"><call pos:start="53:9" pos:end="53:39"><name pos:start="53:9" pos:end="53:34">bytestream2_get_bytes_left</name><argument_list pos:start="53:35" pos:end="53:39">(<argument pos:start="53:36" pos:end="53:38"><expr pos:start="53:36" pos:end="53:38"><operator pos:start="53:36" pos:end="53:36">&amp;</operator><name pos:start="53:37" pos:end="53:38">gb</name></expr></argument>)</argument_list></call> <operator pos:start="53:41" pos:end="53:41">&lt;</operator> <name pos:start="53:43" pos:end="53:52">chunk_size</name></expr>)</condition><block type="pseudo" pos:start="55:9" pos:end="55:35"><block_content pos:start="55:9" pos:end="55:35">

        <return pos:start="55:9" pos:end="55:35">return <expr pos:start="55:16" pos:end="55:34"><name pos:start="55:16" pos:end="55:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="59:5" pos:end="65:5"><if pos:start="59:5" pos:end="65:5">if <condition pos:start="59:8" pos:end="59:63">(<expr pos:start="59:9" pos:end="59:62"><call pos:start="59:9" pos:end="59:33"><name pos:start="59:9" pos:end="59:28">bytestream2_get_le32</name><argument_list pos:start="59:29" pos:end="59:33">(<argument pos:start="59:30" pos:end="59:32"><expr pos:start="59:30" pos:end="59:32"><operator pos:start="59:30" pos:end="59:30">&amp;</operator><name pos:start="59:31" pos:end="59:32">gb</name></expr></argument>)</argument_list></call> <operator pos:start="59:35" pos:end="59:36">!=</operator> <call pos:start="59:38" pos:end="59:62"><name pos:start="59:38" pos:end="59:42">MKTAG</name><argument_list pos:start="59:43" pos:end="59:62">(<argument pos:start="59:44" pos:end="59:46"><expr pos:start="59:44" pos:end="59:46"><literal type="char" pos:start="59:44" pos:end="59:46">'W'</literal></expr></argument>, <argument pos:start="59:49" pos:end="59:51"><expr pos:start="59:49" pos:end="59:51"><literal type="char" pos:start="59:49" pos:end="59:51">'E'</literal></expr></argument>, <argument pos:start="59:54" pos:end="59:56"><expr pos:start="59:54" pos:end="59:56"><literal type="char" pos:start="59:54" pos:end="59:56">'B'</literal></expr></argument>, <argument pos:start="59:59" pos:end="59:61"><expr pos:start="59:59" pos:end="59:61"><literal type="char" pos:start="59:59" pos:end="59:61">'P'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="59:65" pos:end="65:5">{<block_content pos:start="61:9" pos:end="63:35">

        <expr_stmt pos:start="61:9" pos:end="61:58"><expr pos:start="61:9" pos:end="61:57"><call pos:start="61:9" pos:end="61:57"><name pos:start="61:9" pos:end="61:14">av_log</name><argument_list pos:start="61:15" pos:end="61:57">(<argument pos:start="61:16" pos:end="61:20"><expr pos:start="61:16" pos:end="61:20"><name pos:start="61:16" pos:end="61:20">avctx</name></expr></argument>, <argument pos:start="61:23" pos:end="61:34"><expr pos:start="61:23" pos:end="61:34"><name pos:start="61:23" pos:end="61:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="61:37" pos:end="61:56"><expr pos:start="61:37" pos:end="61:56"><literal type="string" pos:start="61:37" pos:end="61:56">"missing WEBP tag\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="63:9" pos:end="63:35">return <expr pos:start="63:16" pos:end="63:34"><name pos:start="63:16" pos:end="63:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <while pos:start="69:5" pos:end="249:5">while <condition pos:start="69:11" pos:end="69:47">(<expr pos:start="69:12" pos:end="69:46"><call pos:start="69:12" pos:end="69:42"><name pos:start="69:12" pos:end="69:37">bytestream2_get_bytes_left</name><argument_list pos:start="69:38" pos:end="69:42">(<argument pos:start="69:39" pos:end="69:41"><expr pos:start="69:39" pos:end="69:41"><operator pos:start="69:39" pos:end="69:39">&amp;</operator><name pos:start="69:40" pos:end="69:41">gb</name></expr></argument>)</argument_list></call> <operator pos:start="69:44" pos:end="69:44">&gt;</operator> <literal type="number" pos:start="69:46" pos:end="69:46">0</literal></expr>)</condition> <block pos:start="69:49" pos:end="249:5">{<block_content pos:start="71:9" pos:end="247:9">

        <decl_stmt pos:start="71:9" pos:end="71:34"><decl pos:start="71:9" pos:end="71:33"><type pos:start="71:9" pos:end="71:12"><name pos:start="71:9" pos:end="71:12">char</name></type> <name pos:start="71:14" pos:end="71:25"><name pos:start="71:14" pos:end="71:22">chunk_str</name><index pos:start="71:23" pos:end="71:25">[<expr pos:start="71:24" pos:end="71:24"><literal type="number" pos:start="71:24" pos:end="71:24">5</literal></expr>]</index></name> <init pos:start="71:27" pos:end="71:33">= <expr pos:start="71:29" pos:end="71:33"><block pos:start="71:29" pos:end="71:33">{ <expr pos:start="71:31" pos:end="71:31"><literal type="number" pos:start="71:31" pos:end="71:31">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="75:9" pos:end="75:47"><expr pos:start="75:9" pos:end="75:46"><name pos:start="75:9" pos:end="75:18">chunk_type</name> <operator pos:start="75:20" pos:end="75:20">=</operator> <call pos:start="75:22" pos:end="75:46"><name pos:start="75:22" pos:end="75:41">bytestream2_get_le32</name><argument_list pos:start="75:42" pos:end="75:46">(<argument pos:start="75:43" pos:end="75:45"><expr pos:start="75:43" pos:end="75:45"><operator pos:start="75:43" pos:end="75:43">&amp;</operator><name pos:start="75:44" pos:end="75:45">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:47"><expr pos:start="77:9" pos:end="77:46"><name pos:start="77:9" pos:end="77:18">chunk_size</name> <operator pos:start="77:20" pos:end="77:20">=</operator> <call pos:start="77:22" pos:end="77:46"><name pos:start="77:22" pos:end="77:41">bytestream2_get_le32</name><argument_list pos:start="77:42" pos:end="77:46">(<argument pos:start="77:43" pos:end="77:45"><expr pos:start="77:43" pos:end="77:45"><operator pos:start="77:43" pos:end="77:43">&amp;</operator><name pos:start="77:44" pos:end="77:45">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="79:9" pos:end="81:39"><if pos:start="79:9" pos:end="81:39">if <condition pos:start="79:12" pos:end="79:37">(<expr pos:start="79:13" pos:end="79:36"><name pos:start="79:13" pos:end="79:22">chunk_size</name> <operator pos:start="79:24" pos:end="79:25">==</operator> <name pos:start="79:27" pos:end="79:36">UINT32_MAX</name></expr>)</condition><block type="pseudo" pos:start="81:13" pos:end="81:39"><block_content pos:start="81:13" pos:end="81:39">

            <return pos:start="81:13" pos:end="81:39">return <expr pos:start="81:20" pos:end="81:38"><name pos:start="81:20" pos:end="81:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:37"><expr pos:start="83:9" pos:end="83:36"><name pos:start="83:9" pos:end="83:18">chunk_size</name> <operator pos:start="83:20" pos:end="83:21">+=</operator> <name pos:start="83:23" pos:end="83:32">chunk_size</name> <operator pos:start="83:34" pos:end="83:34">&amp;</operator> <literal type="number" pos:start="83:36" pos:end="83:36">1</literal></expr>;</expr_stmt>



        <if_stmt pos:start="87:9" pos:end="89:39"><if pos:start="87:9" pos:end="89:39">if <condition pos:start="87:12" pos:end="87:57">(<expr pos:start="87:13" pos:end="87:56"><call pos:start="87:13" pos:end="87:43"><name pos:start="87:13" pos:end="87:38">bytestream2_get_bytes_left</name><argument_list pos:start="87:39" pos:end="87:43">(<argument pos:start="87:40" pos:end="87:42"><expr pos:start="87:40" pos:end="87:42"><operator pos:start="87:40" pos:end="87:40">&amp;</operator><name pos:start="87:41" pos:end="87:42">gb</name></expr></argument>)</argument_list></call> <operator pos:start="87:45" pos:end="87:45">&lt;</operator> <name pos:start="87:47" pos:end="87:56">chunk_size</name></expr>)</condition><block type="pseudo" pos:start="89:13" pos:end="89:39"><block_content pos:start="89:13" pos:end="89:39">

            <return pos:start="89:13" pos:end="89:39">return <expr pos:start="89:20" pos:end="89:38"><name pos:start="89:20" pos:end="89:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



        <switch pos:start="93:9" pos:end="247:9">switch <condition pos:start="93:16" pos:end="93:27">(<expr pos:start="93:17" pos:end="93:26"><name pos:start="93:17" pos:end="93:26">chunk_type</name></expr>)</condition> <block pos:start="93:29" pos:end="247:9">{<block_content pos:start="95:9" pos:end="245:18">

        <case pos:start="95:9" pos:end="95:39">case <expr pos:start="95:14" pos:end="95:38"><call pos:start="95:14" pos:end="95:38"><name pos:start="95:14" pos:end="95:18">MKTAG</name><argument_list pos:start="95:19" pos:end="95:38">(<argument pos:start="95:20" pos:end="95:22"><expr pos:start="95:20" pos:end="95:22"><literal type="char" pos:start="95:20" pos:end="95:22">'V'</literal></expr></argument>, <argument pos:start="95:25" pos:end="95:27"><expr pos:start="95:25" pos:end="95:27"><literal type="char" pos:start="95:25" pos:end="95:27">'P'</literal></expr></argument>, <argument pos:start="95:30" pos:end="95:32"><expr pos:start="95:30" pos:end="95:32"><literal type="char" pos:start="95:30" pos:end="95:32">'8'</literal></expr></argument>, <argument pos:start="95:35" pos:end="95:37"><expr pos:start="95:35" pos:end="95:37"><literal type="char" pos:start="95:35" pos:end="95:37">' '</literal></expr></argument>)</argument_list></call></expr>:</case>

            <if_stmt pos:start="97:13" pos:end="109:13"><if pos:start="97:13" pos:end="109:13">if <condition pos:start="97:16" pos:end="97:28">(<expr pos:start="97:17" pos:end="97:27"><operator pos:start="97:17" pos:end="97:17">!</operator><operator pos:start="97:18" pos:end="97:18">*</operator><name pos:start="97:19" pos:end="97:27">got_frame</name></expr>)</condition> <block pos:start="97:30" pos:end="109:13">{<block_content pos:start="99:17" pos:end="107:31">

                <expr_stmt pos:start="99:17" pos:end="103:57"><expr pos:start="99:17" pos:end="103:56"><name pos:start="99:17" pos:end="99:19">ret</name> <operator pos:start="99:21" pos:end="99:21">=</operator> <call pos:start="99:23" pos:end="103:56"><name pos:start="99:23" pos:end="99:44">vp8_lossy_decode_frame</name><argument_list pos:start="99:45" pos:end="103:56">(<argument pos:start="99:46" pos:end="99:50"><expr pos:start="99:46" pos:end="99:50"><name pos:start="99:46" pos:end="99:50">avctx</name></expr></argument>, <argument pos:start="99:53" pos:end="99:53"><expr pos:start="99:53" pos:end="99:53"><name pos:start="99:53" pos:end="99:53">p</name></expr></argument>, <argument pos:start="99:56" pos:end="99:64"><expr pos:start="99:56" pos:end="99:64"><name pos:start="99:56" pos:end="99:64">got_frame</name></expr></argument>,

                                             <argument pos:start="101:46" pos:end="101:80"><expr pos:start="101:46" pos:end="101:80"><name pos:start="101:46" pos:end="101:56"><name pos:start="101:46" pos:end="101:50">avpkt</name><operator pos:start="101:51" pos:end="101:52">-&gt;</operator><name pos:start="101:53" pos:end="101:56">data</name></name> <operator pos:start="101:58" pos:end="101:58">+</operator> <call pos:start="101:60" pos:end="101:80"><name pos:start="101:60" pos:end="101:75">bytestream2_tell</name><argument_list pos:start="101:76" pos:end="101:80">(<argument pos:start="101:77" pos:end="101:79"><expr pos:start="101:77" pos:end="101:79"><operator pos:start="101:77" pos:end="101:77">&amp;</operator><name pos:start="101:78" pos:end="101:79">gb</name></expr></argument>)</argument_list></call></expr></argument>,

                                             <argument pos:start="103:46" pos:end="103:55"><expr pos:start="103:46" pos:end="103:55"><name pos:start="103:46" pos:end="103:55">chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="105:17" pos:end="107:31"><if pos:start="105:17" pos:end="107:31">if <condition pos:start="105:20" pos:end="105:28">(<expr pos:start="105:21" pos:end="105:27"><name pos:start="105:21" pos:end="105:23">ret</name> <operator pos:start="105:25" pos:end="105:25">&lt;</operator> <literal type="number" pos:start="105:27" pos:end="105:27">0</literal></expr>)</condition><block type="pseudo" pos:start="107:21" pos:end="107:31"><block_content pos:start="107:21" pos:end="107:31">

                    <return pos:start="107:21" pos:end="107:31">return <expr pos:start="107:28" pos:end="107:30"><name pos:start="107:28" pos:end="107:30">ret</name></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:46"><expr pos:start="111:13" pos:end="111:45"><call pos:start="111:13" pos:end="111:45"><name pos:start="111:13" pos:end="111:28">bytestream2_skip</name><argument_list pos:start="111:29" pos:end="111:45">(<argument pos:start="111:30" pos:end="111:32"><expr pos:start="111:30" pos:end="111:32"><operator pos:start="111:30" pos:end="111:30">&amp;</operator><name pos:start="111:31" pos:end="111:32">gb</name></expr></argument>, <argument pos:start="111:35" pos:end="111:44"><expr pos:start="111:35" pos:end="111:44"><name pos:start="111:35" pos:end="111:44">chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="113:13" pos:end="113:18">break;</break>

        <case pos:start="115:9" pos:end="115:39">case <expr pos:start="115:14" pos:end="115:38"><call pos:start="115:14" pos:end="115:38"><name pos:start="115:14" pos:end="115:18">MKTAG</name><argument_list pos:start="115:19" pos:end="115:38">(<argument pos:start="115:20" pos:end="115:22"><expr pos:start="115:20" pos:end="115:22"><literal type="char" pos:start="115:20" pos:end="115:22">'V'</literal></expr></argument>, <argument pos:start="115:25" pos:end="115:27"><expr pos:start="115:25" pos:end="115:27"><literal type="char" pos:start="115:25" pos:end="115:27">'P'</literal></expr></argument>, <argument pos:start="115:30" pos:end="115:32"><expr pos:start="115:30" pos:end="115:32"><literal type="char" pos:start="115:30" pos:end="115:32">'8'</literal></expr></argument>, <argument pos:start="115:35" pos:end="115:37"><expr pos:start="115:35" pos:end="115:37"><literal type="char" pos:start="115:35" pos:end="115:37">'L'</literal></expr></argument>)</argument_list></call></expr>:</case>

            <if_stmt pos:start="117:13" pos:end="129:13"><if pos:start="117:13" pos:end="129:13">if <condition pos:start="117:16" pos:end="117:28">(<expr pos:start="117:17" pos:end="117:27"><operator pos:start="117:17" pos:end="117:17">!</operator><operator pos:start="117:18" pos:end="117:18">*</operator><name pos:start="117:19" pos:end="117:27">got_frame</name></expr>)</condition> <block pos:start="117:30" pos:end="129:13">{<block_content pos:start="119:17" pos:end="127:31">

                <expr_stmt pos:start="119:17" pos:end="123:63"><expr pos:start="119:17" pos:end="123:62"><name pos:start="119:17" pos:end="119:19">ret</name> <operator pos:start="119:21" pos:end="119:21">=</operator> <call pos:start="119:23" pos:end="123:62"><name pos:start="119:23" pos:end="119:47">vp8_lossless_decode_frame</name><argument_list pos:start="119:48" pos:end="123:62">(<argument pos:start="119:49" pos:end="119:53"><expr pos:start="119:49" pos:end="119:53"><name pos:start="119:49" pos:end="119:53">avctx</name></expr></argument>, <argument pos:start="119:56" pos:end="119:56"><expr pos:start="119:56" pos:end="119:56"><name pos:start="119:56" pos:end="119:56">p</name></expr></argument>, <argument pos:start="119:59" pos:end="119:67"><expr pos:start="119:59" pos:end="119:67"><name pos:start="119:59" pos:end="119:67">got_frame</name></expr></argument>,

                                                <argument pos:start="121:49" pos:end="121:83"><expr pos:start="121:49" pos:end="121:83"><name pos:start="121:49" pos:end="121:59"><name pos:start="121:49" pos:end="121:53">avpkt</name><operator pos:start="121:54" pos:end="121:55">-&gt;</operator><name pos:start="121:56" pos:end="121:59">data</name></name> <operator pos:start="121:61" pos:end="121:61">+</operator> <call pos:start="121:63" pos:end="121:83"><name pos:start="121:63" pos:end="121:78">bytestream2_tell</name><argument_list pos:start="121:79" pos:end="121:83">(<argument pos:start="121:80" pos:end="121:82"><expr pos:start="121:80" pos:end="121:82"><operator pos:start="121:80" pos:end="121:80">&amp;</operator><name pos:start="121:81" pos:end="121:82">gb</name></expr></argument>)</argument_list></call></expr></argument>,

                                                <argument pos:start="123:49" pos:end="123:58"><expr pos:start="123:49" pos:end="123:58"><name pos:start="123:49" pos:end="123:58">chunk_size</name></expr></argument>, <argument pos:start="123:61" pos:end="123:61"><expr pos:start="123:61" pos:end="123:61"><literal type="number" pos:start="123:61" pos:end="123:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="125:17" pos:end="127:31"><if pos:start="125:17" pos:end="127:31">if <condition pos:start="125:20" pos:end="125:28">(<expr pos:start="125:21" pos:end="125:27"><name pos:start="125:21" pos:end="125:23">ret</name> <operator pos:start="125:25" pos:end="125:25">&lt;</operator> <literal type="number" pos:start="125:27" pos:end="125:27">0</literal></expr>)</condition><block type="pseudo" pos:start="127:21" pos:end="127:31"><block_content pos:start="127:21" pos:end="127:31">

                    <return pos:start="127:21" pos:end="127:31">return <expr pos:start="127:28" pos:end="127:30"><name pos:start="127:28" pos:end="127:30">ret</name></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:46"><expr pos:start="131:13" pos:end="131:45"><call pos:start="131:13" pos:end="131:45"><name pos:start="131:13" pos:end="131:28">bytestream2_skip</name><argument_list pos:start="131:29" pos:end="131:45">(<argument pos:start="131:30" pos:end="131:32"><expr pos:start="131:30" pos:end="131:32"><operator pos:start="131:30" pos:end="131:30">&amp;</operator><name pos:start="131:31" pos:end="131:32">gb</name></expr></argument>, <argument pos:start="131:35" pos:end="131:44"><expr pos:start="131:35" pos:end="131:44"><name pos:start="131:35" pos:end="131:44">chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="133:13" pos:end="133:18">break;</break>

        <case pos:start="135:9" pos:end="135:39">case <expr pos:start="135:14" pos:end="135:38"><call pos:start="135:14" pos:end="135:38"><name pos:start="135:14" pos:end="135:18">MKTAG</name><argument_list pos:start="135:19" pos:end="135:38">(<argument pos:start="135:20" pos:end="135:22"><expr pos:start="135:20" pos:end="135:22"><literal type="char" pos:start="135:20" pos:end="135:22">'V'</literal></expr></argument>, <argument pos:start="135:25" pos:end="135:27"><expr pos:start="135:25" pos:end="135:27"><literal type="char" pos:start="135:25" pos:end="135:27">'P'</literal></expr></argument>, <argument pos:start="135:30" pos:end="135:32"><expr pos:start="135:30" pos:end="135:32"><literal type="char" pos:start="135:30" pos:end="135:32">'8'</literal></expr></argument>, <argument pos:start="135:35" pos:end="135:37"><expr pos:start="135:35" pos:end="135:37"><literal type="char" pos:start="135:35" pos:end="135:37">'X'</literal></expr></argument>)</argument_list></call></expr>:</case>

            <expr_stmt pos:start="137:13" pos:end="137:51"><expr pos:start="137:13" pos:end="137:50"><name pos:start="137:13" pos:end="137:22">vp8x_flags</name> <operator pos:start="137:24" pos:end="137:24">=</operator> <call pos:start="137:26" pos:end="137:50"><name pos:start="137:26" pos:end="137:45">bytestream2_get_byte</name><argument_list pos:start="137:46" pos:end="137:50">(<argument pos:start="137:47" pos:end="137:49"><expr pos:start="137:47" pos:end="137:49"><operator pos:start="137:47" pos:end="137:47">&amp;</operator><name pos:start="137:48" pos:end="137:49">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:37"><expr pos:start="139:13" pos:end="139:36"><call pos:start="139:13" pos:end="139:36"><name pos:start="139:13" pos:end="139:28">bytestream2_skip</name><argument_list pos:start="139:29" pos:end="139:36">(<argument pos:start="139:30" pos:end="139:32"><expr pos:start="139:30" pos:end="139:32"><operator pos:start="139:30" pos:end="139:30">&amp;</operator><name pos:start="139:31" pos:end="139:32">gb</name></expr></argument>, <argument pos:start="139:35" pos:end="139:35"><expr pos:start="139:35" pos:end="139:35"><literal type="number" pos:start="139:35" pos:end="139:35">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:54"><expr pos:start="141:13" pos:end="141:53"><name pos:start="141:13" pos:end="141:20"><name pos:start="141:13" pos:end="141:13">s</name><operator pos:start="141:14" pos:end="141:15">-&gt;</operator><name pos:start="141:16" pos:end="141:20">width</name></name>  <operator pos:start="141:23" pos:end="141:23">=</operator> <call pos:start="141:25" pos:end="141:49"><name pos:start="141:25" pos:end="141:44">bytestream2_get_le24</name><argument_list pos:start="141:45" pos:end="141:49">(<argument pos:start="141:46" pos:end="141:48"><expr pos:start="141:46" pos:end="141:48"><operator pos:start="141:46" pos:end="141:46">&amp;</operator><name pos:start="141:47" pos:end="141:48">gb</name></expr></argument>)</argument_list></call> <operator pos:start="141:51" pos:end="141:51">+</operator> <literal type="number" pos:start="141:53" pos:end="141:53">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:54"><expr pos:start="143:13" pos:end="143:53"><name pos:start="143:13" pos:end="143:21"><name pos:start="143:13" pos:end="143:13">s</name><operator pos:start="143:14" pos:end="143:15">-&gt;</operator><name pos:start="143:16" pos:end="143:21">height</name></name> <operator pos:start="143:23" pos:end="143:23">=</operator> <call pos:start="143:25" pos:end="143:49"><name pos:start="143:25" pos:end="143:44">bytestream2_get_le24</name><argument_list pos:start="143:45" pos:end="143:49">(<argument pos:start="143:46" pos:end="143:48"><expr pos:start="143:46" pos:end="143:48"><operator pos:start="143:46" pos:end="143:46">&amp;</operator><name pos:start="143:47" pos:end="143:48">gb</name></expr></argument>)</argument_list></call> <operator pos:start="143:51" pos:end="143:51">+</operator> <literal type="number" pos:start="143:53" pos:end="143:53">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:69"><expr pos:start="145:13" pos:end="145:68"><name pos:start="145:13" pos:end="145:15">ret</name> <operator pos:start="145:17" pos:end="145:17">=</operator> <call pos:start="145:19" pos:end="145:68"><name pos:start="145:19" pos:end="145:37">av_image_check_size</name><argument_list pos:start="145:38" pos:end="145:68">(<argument pos:start="145:39" pos:end="145:46"><expr pos:start="145:39" pos:end="145:46"><name pos:start="145:39" pos:end="145:46"><name pos:start="145:39" pos:end="145:39">s</name><operator pos:start="145:40" pos:end="145:41">-&gt;</operator><name pos:start="145:42" pos:end="145:46">width</name></name></expr></argument>, <argument pos:start="145:49" pos:end="145:57"><expr pos:start="145:49" pos:end="145:57"><name pos:start="145:49" pos:end="145:57"><name pos:start="145:49" pos:end="145:49">s</name><operator pos:start="145:50" pos:end="145:51">-&gt;</operator><name pos:start="145:52" pos:end="145:57">height</name></name></expr></argument>, <argument pos:start="145:60" pos:end="145:60"><expr pos:start="145:60" pos:end="145:60"><literal type="number" pos:start="145:60" pos:end="145:60">0</literal></expr></argument>, <argument pos:start="145:63" pos:end="145:67"><expr pos:start="145:63" pos:end="145:67"><name pos:start="145:63" pos:end="145:67">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="147:13" pos:end="149:27"><if pos:start="147:13" pos:end="149:27">if <condition pos:start="147:16" pos:end="147:24">(<expr pos:start="147:17" pos:end="147:23"><name pos:start="147:17" pos:end="147:19">ret</name> <operator pos:start="147:21" pos:end="147:21">&lt;</operator> <literal type="number" pos:start="147:23" pos:end="147:23">0</literal></expr>)</condition><block type="pseudo" pos:start="149:17" pos:end="149:27"><block_content pos:start="149:17" pos:end="149:27">

                <return pos:start="149:17" pos:end="149:27">return <expr pos:start="149:24" pos:end="149:26"><name pos:start="149:24" pos:end="149:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

            <break pos:start="151:13" pos:end="151:18">break;</break>

        <case pos:start="153:9" pos:end="153:39">case <expr pos:start="153:14" pos:end="153:38"><call pos:start="153:14" pos:end="153:38"><name pos:start="153:14" pos:end="153:18">MKTAG</name><argument_list pos:start="153:19" pos:end="153:38">(<argument pos:start="153:20" pos:end="153:22"><expr pos:start="153:20" pos:end="153:22"><literal type="char" pos:start="153:20" pos:end="153:22">'A'</literal></expr></argument>, <argument pos:start="153:25" pos:end="153:27"><expr pos:start="153:25" pos:end="153:27"><literal type="char" pos:start="153:25" pos:end="153:27">'L'</literal></expr></argument>, <argument pos:start="153:30" pos:end="153:32"><expr pos:start="153:30" pos:end="153:32"><literal type="char" pos:start="153:30" pos:end="153:32">'P'</literal></expr></argument>, <argument pos:start="153:35" pos:end="153:37"><expr pos:start="153:35" pos:end="153:37"><literal type="char" pos:start="153:35" pos:end="153:37">'H'</literal></expr></argument>)</argument_list></call></expr>:</case> <block pos:start="153:41" pos:end="213:9">{<block_content pos:start="155:13" pos:end="211:18">

            <decl_stmt pos:start="155:13" pos:end="155:52"><decl pos:start="155:13" pos:end="155:28"><type pos:start="155:13" pos:end="155:15"><name pos:start="155:13" pos:end="155:15">int</name></type> <name pos:start="155:17" pos:end="155:28">alpha_header</name></decl>, <decl pos:start="155:31" pos:end="155:38"><type ref="prev" pos:start="155:13" pos:end="155:15"/><name pos:start="155:31" pos:end="155:38">filter_m</name></decl>, <decl pos:start="155:41" pos:end="155:51"><type ref="prev" pos:start="155:13" pos:end="155:15"/><name pos:start="155:41" pos:end="155:51">compression</name></decl>;</decl_stmt>



            <if_stmt pos:start="159:13" pos:end="167:13"><if pos:start="159:13" pos:end="167:13">if <condition pos:start="159:16" pos:end="159:48">(<expr pos:start="159:17" pos:end="159:47"><operator pos:start="159:17" pos:end="159:17">!</operator><operator pos:start="159:18" pos:end="159:18">(</operator><name pos:start="159:19" pos:end="159:28">vp8x_flags</name> <operator pos:start="159:30" pos:end="159:30">&amp;</operator> <name pos:start="159:32" pos:end="159:46">VP8X_FLAG_ALPHA</name><operator pos:start="159:47" pos:end="159:47">)</operator></expr>)</condition> <block pos:start="159:50" pos:end="167:13">{<block_content pos:start="161:17" pos:end="165:40">

                <expr_stmt pos:start="161:17" pos:end="165:40"><expr pos:start="161:17" pos:end="165:39"><call pos:start="161:17" pos:end="165:39"><name pos:start="161:17" pos:end="161:22">av_log</name><argument_list pos:start="161:23" pos:end="165:39">(<argument pos:start="161:24" pos:end="161:28"><expr pos:start="161:24" pos:end="161:28"><name pos:start="161:24" pos:end="161:28">avctx</name></expr></argument>, <argument pos:start="161:31" pos:end="161:44"><expr pos:start="161:31" pos:end="161:44"><name pos:start="161:31" pos:end="161:44">AV_LOG_WARNING</name></expr></argument>,

                       <argument pos:start="163:24" pos:end="165:38"><expr pos:start="163:24" pos:end="165:38"><literal type="string" pos:start="163:24" pos:end="163:75">"ALPHA chunk present, but alpha bit not set in the "</literal>

                       <literal type="string" pos:start="165:24" pos:end="165:38">"VP8X header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="169:13" pos:end="175:13"><if pos:start="169:13" pos:end="175:13">if <condition pos:start="169:16" pos:end="169:32">(<expr pos:start="169:17" pos:end="169:31"><name pos:start="169:17" pos:end="169:26">chunk_size</name> <operator pos:start="169:28" pos:end="169:29">==</operator> <literal type="number" pos:start="169:31" pos:end="169:31">0</literal></expr>)</condition> <block pos:start="169:34" pos:end="175:13">{<block_content pos:start="171:17" pos:end="173:43">

                <expr_stmt pos:start="171:17" pos:end="171:74"><expr pos:start="171:17" pos:end="171:73"><call pos:start="171:17" pos:end="171:73"><name pos:start="171:17" pos:end="171:22">av_log</name><argument_list pos:start="171:23" pos:end="171:73">(<argument pos:start="171:24" pos:end="171:28"><expr pos:start="171:24" pos:end="171:28"><name pos:start="171:24" pos:end="171:28">avctx</name></expr></argument>, <argument pos:start="171:31" pos:end="171:42"><expr pos:start="171:31" pos:end="171:42"><name pos:start="171:31" pos:end="171:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="171:45" pos:end="171:72"><expr pos:start="171:45" pos:end="171:72"><literal type="string" pos:start="171:45" pos:end="171:72">"invalid ALPHA chunk size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="173:17" pos:end="173:43">return <expr pos:start="173:24" pos:end="173:42"><name pos:start="173:24" pos:end="173:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="177:13" pos:end="177:59"><expr pos:start="177:13" pos:end="177:58"><name pos:start="177:13" pos:end="177:24">alpha_header</name>       <operator pos:start="177:32" pos:end="177:32">=</operator> <call pos:start="177:34" pos:end="177:58"><name pos:start="177:34" pos:end="177:53">bytestream2_get_byte</name><argument_list pos:start="177:54" pos:end="177:58">(<argument pos:start="177:55" pos:end="177:57"><expr pos:start="177:55" pos:end="177:57"><operator pos:start="177:55" pos:end="177:55">&amp;</operator><name pos:start="177:56" pos:end="177:57">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:69"><expr pos:start="179:13" pos:end="179:68"><name pos:start="179:13" pos:end="179:25"><name pos:start="179:13" pos:end="179:13">s</name><operator pos:start="179:14" pos:end="179:15">-&gt;</operator><name pos:start="179:16" pos:end="179:25">alpha_data</name></name>      <operator pos:start="179:32" pos:end="179:32">=</operator> <name pos:start="179:34" pos:end="179:44"><name pos:start="179:34" pos:end="179:38">avpkt</name><operator pos:start="179:39" pos:end="179:40">-&gt;</operator><name pos:start="179:41" pos:end="179:44">data</name></name> <operator pos:start="179:46" pos:end="179:46">+</operator> <call pos:start="179:48" pos:end="179:68"><name pos:start="179:48" pos:end="179:63">bytestream2_tell</name><argument_list pos:start="179:64" pos:end="179:68">(<argument pos:start="179:65" pos:end="179:67"><expr pos:start="179:65" pos:end="179:67"><operator pos:start="179:65" pos:end="179:65">&amp;</operator><name pos:start="179:66" pos:end="179:67">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="181:13" pos:end="181:48"><expr pos:start="181:13" pos:end="181:47"><name pos:start="181:13" pos:end="181:30"><name pos:start="181:13" pos:end="181:13">s</name><operator pos:start="181:14" pos:end="181:15">-&gt;</operator><name pos:start="181:16" pos:end="181:30">alpha_data_size</name></name> <operator pos:start="181:32" pos:end="181:32">=</operator> <name pos:start="181:34" pos:end="181:43">chunk_size</name> <operator pos:start="181:45" pos:end="181:45">-</operator> <literal type="number" pos:start="181:47" pos:end="181:47">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="183:13" pos:end="183:54"><expr pos:start="183:13" pos:end="183:53"><call pos:start="183:13" pos:end="183:53"><name pos:start="183:13" pos:end="183:28">bytestream2_skip</name><argument_list pos:start="183:29" pos:end="183:53">(<argument pos:start="183:30" pos:end="183:32"><expr pos:start="183:30" pos:end="183:32"><operator pos:start="183:30" pos:end="183:30">&amp;</operator><name pos:start="183:31" pos:end="183:32">gb</name></expr></argument>, <argument pos:start="183:35" pos:end="183:52"><expr pos:start="183:35" pos:end="183:52"><name pos:start="183:35" pos:end="183:52"><name pos:start="183:35" pos:end="183:35">s</name><operator pos:start="183:36" pos:end="183:37">-&gt;</operator><name pos:start="183:38" pos:end="183:52">alpha_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="187:13" pos:end="187:53"><expr pos:start="187:13" pos:end="187:52"><name pos:start="187:13" pos:end="187:20">filter_m</name>    <operator pos:start="187:25" pos:end="187:25">=</operator> <operator pos:start="187:27" pos:end="187:27">(</operator><name pos:start="187:28" pos:end="187:39">alpha_header</name> <operator pos:start="187:41" pos:end="187:42">&gt;&gt;</operator> <literal type="number" pos:start="187:44" pos:end="187:44">2</literal><operator pos:start="187:45" pos:end="187:45">)</operator> <operator pos:start="187:47" pos:end="187:47">&amp;</operator> <literal type="number" pos:start="187:49" pos:end="187:52">0x03</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="189:13" pos:end="189:53"><expr pos:start="189:13" pos:end="189:52"><name pos:start="189:13" pos:end="189:23">compression</name> <operator pos:start="189:25" pos:end="189:25">=</operator>  <name pos:start="189:28" pos:end="189:39">alpha_header</name>       <operator pos:start="189:47" pos:end="189:47">&amp;</operator> <literal type="number" pos:start="189:49" pos:end="189:52">0x03</literal></expr>;</expr_stmt>



            <if_stmt pos:start="193:13" pos:end="207:13"><if pos:start="193:13" pos:end="199:13">if <condition pos:start="193:16" pos:end="193:53">(<expr pos:start="193:17" pos:end="193:52"><name pos:start="193:17" pos:end="193:27">compression</name> <operator pos:start="193:29" pos:end="193:29">&gt;</operator> <name pos:start="193:31" pos:end="193:52">ALPHA_COMPRESSION_VP8L</name></expr>)</condition> <block pos:start="193:55" pos:end="199:13">{<block_content pos:start="195:17" pos:end="197:61">

                <expr_stmt pos:start="195:17" pos:end="197:61"><expr pos:start="195:17" pos:end="197:60"><call pos:start="195:17" pos:end="197:60"><name pos:start="195:17" pos:end="195:22">av_log</name><argument_list pos:start="195:23" pos:end="197:60">(<argument pos:start="195:24" pos:end="195:28"><expr pos:start="195:24" pos:end="195:28"><name pos:start="195:24" pos:end="195:28">avctx</name></expr></argument>, <argument pos:start="195:31" pos:end="195:44"><expr pos:start="195:31" pos:end="195:44"><name pos:start="195:31" pos:end="195:44">AV_LOG_VERBOSE</name></expr></argument>,

                       <argument pos:start="197:24" pos:end="197:59"><expr pos:start="197:24" pos:end="197:59"><literal type="string" pos:start="197:24" pos:end="197:59">"skipping unsupported ALPHA chunk\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="199:15" pos:end="207:13">else <block pos:start="199:20" pos:end="207:13">{<block_content pos:start="201:17" pos:end="205:48">

                <expr_stmt pos:start="201:17" pos:end="201:41"><expr pos:start="201:17" pos:end="201:40"><name pos:start="201:17" pos:end="201:28"><name pos:start="201:17" pos:end="201:17">s</name><operator pos:start="201:18" pos:end="201:19">-&gt;</operator><name pos:start="201:20" pos:end="201:28">has_alpha</name></name>         <operator pos:start="201:38" pos:end="201:38">=</operator> <literal type="number" pos:start="201:40" pos:end="201:40">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="203:17" pos:end="203:51"><expr pos:start="203:17" pos:end="203:50"><name pos:start="203:17" pos:end="203:36"><name pos:start="203:17" pos:end="203:17">s</name><operator pos:start="203:18" pos:end="203:19">-&gt;</operator><name pos:start="203:20" pos:end="203:36">alpha_compression</name></name> <operator pos:start="203:38" pos:end="203:38">=</operator> <name pos:start="203:40" pos:end="203:50">compression</name></expr>;</expr_stmt>

                <expr_stmt pos:start="205:17" pos:end="205:48"><expr pos:start="205:17" pos:end="205:47"><name pos:start="205:17" pos:end="205:31"><name pos:start="205:17" pos:end="205:17">s</name><operator pos:start="205:18" pos:end="205:19">-&gt;</operator><name pos:start="205:20" pos:end="205:31">alpha_filter</name></name>      <operator pos:start="205:38" pos:end="205:38">=</operator> <name pos:start="205:40" pos:end="205:47">filter_m</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <break pos:start="211:13" pos:end="211:18">break;</break>

        </block_content>}</block>

        <case pos:start="215:9" pos:end="215:39">case <expr pos:start="215:14" pos:end="215:38"><call pos:start="215:14" pos:end="215:38"><name pos:start="215:14" pos:end="215:18">MKTAG</name><argument_list pos:start="215:19" pos:end="215:38">(<argument pos:start="215:20" pos:end="215:22"><expr pos:start="215:20" pos:end="215:22"><literal type="char" pos:start="215:20" pos:end="215:22">'I'</literal></expr></argument>, <argument pos:start="215:25" pos:end="215:27"><expr pos:start="215:25" pos:end="215:27"><literal type="char" pos:start="215:25" pos:end="215:27">'C'</literal></expr></argument>, <argument pos:start="215:30" pos:end="215:32"><expr pos:start="215:30" pos:end="215:32"><literal type="char" pos:start="215:30" pos:end="215:32">'C'</literal></expr></argument>, <argument pos:start="215:35" pos:end="215:37"><expr pos:start="215:35" pos:end="215:37"><literal type="char" pos:start="215:35" pos:end="215:37">'P'</literal></expr></argument>)</argument_list></call></expr>:</case>

        <case pos:start="217:9" pos:end="217:39">case <expr pos:start="217:14" pos:end="217:38"><call pos:start="217:14" pos:end="217:38"><name pos:start="217:14" pos:end="217:18">MKTAG</name><argument_list pos:start="217:19" pos:end="217:38">(<argument pos:start="217:20" pos:end="217:22"><expr pos:start="217:20" pos:end="217:22"><literal type="char" pos:start="217:20" pos:end="217:22">'A'</literal></expr></argument>, <argument pos:start="217:25" pos:end="217:27"><expr pos:start="217:25" pos:end="217:27"><literal type="char" pos:start="217:25" pos:end="217:27">'N'</literal></expr></argument>, <argument pos:start="217:30" pos:end="217:32"><expr pos:start="217:30" pos:end="217:32"><literal type="char" pos:start="217:30" pos:end="217:32">'I'</literal></expr></argument>, <argument pos:start="217:35" pos:end="217:37"><expr pos:start="217:35" pos:end="217:37"><literal type="char" pos:start="217:35" pos:end="217:37">'M'</literal></expr></argument>)</argument_list></call></expr>:</case>

        <case pos:start="219:9" pos:end="219:39">case <expr pos:start="219:14" pos:end="219:38"><call pos:start="219:14" pos:end="219:38"><name pos:start="219:14" pos:end="219:18">MKTAG</name><argument_list pos:start="219:19" pos:end="219:38">(<argument pos:start="219:20" pos:end="219:22"><expr pos:start="219:20" pos:end="219:22"><literal type="char" pos:start="219:20" pos:end="219:22">'A'</literal></expr></argument>, <argument pos:start="219:25" pos:end="219:27"><expr pos:start="219:25" pos:end="219:27"><literal type="char" pos:start="219:25" pos:end="219:27">'N'</literal></expr></argument>, <argument pos:start="219:30" pos:end="219:32"><expr pos:start="219:30" pos:end="219:32"><literal type="char" pos:start="219:30" pos:end="219:32">'M'</literal></expr></argument>, <argument pos:start="219:35" pos:end="219:37"><expr pos:start="219:35" pos:end="219:37"><literal type="char" pos:start="219:35" pos:end="219:37">'F'</literal></expr></argument>)</argument_list></call></expr>:</case>

        <case pos:start="221:9" pos:end="221:39">case <expr pos:start="221:14" pos:end="221:38"><call pos:start="221:14" pos:end="221:38"><name pos:start="221:14" pos:end="221:18">MKTAG</name><argument_list pos:start="221:19" pos:end="221:38">(<argument pos:start="221:20" pos:end="221:22"><expr pos:start="221:20" pos:end="221:22"><literal type="char" pos:start="221:20" pos:end="221:22">'E'</literal></expr></argument>, <argument pos:start="221:25" pos:end="221:27"><expr pos:start="221:25" pos:end="221:27"><literal type="char" pos:start="221:25" pos:end="221:27">'X'</literal></expr></argument>, <argument pos:start="221:30" pos:end="221:32"><expr pos:start="221:30" pos:end="221:32"><literal type="char" pos:start="221:30" pos:end="221:32">'I'</literal></expr></argument>, <argument pos:start="221:35" pos:end="221:37"><expr pos:start="221:35" pos:end="221:37"><literal type="char" pos:start="221:35" pos:end="221:37">'F'</literal></expr></argument>)</argument_list></call></expr>:</case>

        <case pos:start="223:9" pos:end="223:39">case <expr pos:start="223:14" pos:end="223:38"><call pos:start="223:14" pos:end="223:38"><name pos:start="223:14" pos:end="223:18">MKTAG</name><argument_list pos:start="223:19" pos:end="223:38">(<argument pos:start="223:20" pos:end="223:22"><expr pos:start="223:20" pos:end="223:22"><literal type="char" pos:start="223:20" pos:end="223:22">'X'</literal></expr></argument>, <argument pos:start="223:25" pos:end="223:27"><expr pos:start="223:25" pos:end="223:27"><literal type="char" pos:start="223:25" pos:end="223:27">'M'</literal></expr></argument>, <argument pos:start="223:30" pos:end="223:32"><expr pos:start="223:30" pos:end="223:32"><literal type="char" pos:start="223:30" pos:end="223:32">'P'</literal></expr></argument>, <argument pos:start="223:35" pos:end="223:37"><expr pos:start="223:35" pos:end="223:37"><literal type="char" pos:start="223:35" pos:end="223:37">' '</literal></expr></argument>)</argument_list></call></expr>:</case>

            <expr_stmt pos:start="225:13" pos:end="225:43"><expr pos:start="225:13" pos:end="225:42"><call pos:start="225:13" pos:end="225:42"><name pos:start="225:13" pos:end="225:19">AV_WL32</name><argument_list pos:start="225:20" pos:end="225:42">(<argument pos:start="225:21" pos:end="225:29"><expr pos:start="225:21" pos:end="225:29"><name pos:start="225:21" pos:end="225:29">chunk_str</name></expr></argument>, <argument pos:start="225:32" pos:end="225:41"><expr pos:start="225:32" pos:end="225:41"><name pos:start="225:32" pos:end="225:41">chunk_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="227:13" pos:end="229:30"><expr pos:start="227:13" pos:end="229:29"><call pos:start="227:13" pos:end="229:29"><name pos:start="227:13" pos:end="227:18">av_log</name><argument_list pos:start="227:19" pos:end="229:29">(<argument pos:start="227:20" pos:end="227:24"><expr pos:start="227:20" pos:end="227:24"><name pos:start="227:20" pos:end="227:24">avctx</name></expr></argument>, <argument pos:start="227:27" pos:end="227:40"><expr pos:start="227:27" pos:end="227:40"><name pos:start="227:27" pos:end="227:40">AV_LOG_VERBOSE</name></expr></argument>, <argument pos:start="227:43" pos:end="227:76"><expr pos:start="227:43" pos:end="227:76"><literal type="string" pos:start="227:43" pos:end="227:76">"skipping unsupported chunk: %s\n"</literal></expr></argument>,

                   <argument pos:start="229:20" pos:end="229:28"><expr pos:start="229:20" pos:end="229:28"><name pos:start="229:20" pos:end="229:28">chunk_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="231:13" pos:end="231:46"><expr pos:start="231:13" pos:end="231:45"><call pos:start="231:13" pos:end="231:45"><name pos:start="231:13" pos:end="231:28">bytestream2_skip</name><argument_list pos:start="231:29" pos:end="231:45">(<argument pos:start="231:30" pos:end="231:32"><expr pos:start="231:30" pos:end="231:32"><operator pos:start="231:30" pos:end="231:30">&amp;</operator><name pos:start="231:31" pos:end="231:32">gb</name></expr></argument>, <argument pos:start="231:35" pos:end="231:44"><expr pos:start="231:35" pos:end="231:44"><name pos:start="231:35" pos:end="231:44">chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="233:13" pos:end="233:18">break;</break>

        <default pos:start="235:9" pos:end="235:16">default:</default>

            <expr_stmt pos:start="237:13" pos:end="237:43"><expr pos:start="237:13" pos:end="237:42"><call pos:start="237:13" pos:end="237:42"><name pos:start="237:13" pos:end="237:19">AV_WL32</name><argument_list pos:start="237:20" pos:end="237:42">(<argument pos:start="237:21" pos:end="237:29"><expr pos:start="237:21" pos:end="237:29"><name pos:start="237:21" pos:end="237:29">chunk_str</name></expr></argument>, <argument pos:start="237:32" pos:end="237:41"><expr pos:start="237:32" pos:end="237:41"><name pos:start="237:32" pos:end="237:41">chunk_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="239:13" pos:end="241:30"><expr pos:start="239:13" pos:end="241:29"><call pos:start="239:13" pos:end="241:29"><name pos:start="239:13" pos:end="239:18">av_log</name><argument_list pos:start="239:19" pos:end="241:29">(<argument pos:start="239:20" pos:end="239:24"><expr pos:start="239:20" pos:end="239:24"><name pos:start="239:20" pos:end="239:24">avctx</name></expr></argument>, <argument pos:start="239:27" pos:end="239:40"><expr pos:start="239:27" pos:end="239:40"><name pos:start="239:27" pos:end="239:40">AV_LOG_VERBOSE</name></expr></argument>, <argument pos:start="239:43" pos:end="239:72"><expr pos:start="239:43" pos:end="239:72"><literal type="string" pos:start="239:43" pos:end="239:72">"skipping unknown chunk: %s\n"</literal></expr></argument>,

                   <argument pos:start="241:20" pos:end="241:28"><expr pos:start="241:20" pos:end="241:28"><name pos:start="241:20" pos:end="241:28">chunk_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="243:13" pos:end="243:46"><expr pos:start="243:13" pos:end="243:45"><call pos:start="243:13" pos:end="243:45"><name pos:start="243:13" pos:end="243:28">bytestream2_skip</name><argument_list pos:start="243:29" pos:end="243:45">(<argument pos:start="243:30" pos:end="243:32"><expr pos:start="243:30" pos:end="243:32"><operator pos:start="243:30" pos:end="243:30">&amp;</operator><name pos:start="243:31" pos:end="243:32">gb</name></expr></argument>, <argument pos:start="243:35" pos:end="243:44"><expr pos:start="243:35" pos:end="243:44"><name pos:start="243:35" pos:end="243:44">chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="245:13" pos:end="245:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></while>



    <if_stmt pos:start="253:5" pos:end="259:5"><if pos:start="253:5" pos:end="259:5">if <condition pos:start="253:8" pos:end="253:20">(<expr pos:start="253:9" pos:end="253:19"><operator pos:start="253:9" pos:end="253:9">!</operator><operator pos:start="253:10" pos:end="253:10">*</operator><name pos:start="253:11" pos:end="253:19">got_frame</name></expr>)</condition> <block pos:start="253:22" pos:end="259:5">{<block_content pos:start="255:9" pos:end="257:35">

        <expr_stmt pos:start="255:9" pos:end="255:62"><expr pos:start="255:9" pos:end="255:61"><call pos:start="255:9" pos:end="255:61"><name pos:start="255:9" pos:end="255:14">av_log</name><argument_list pos:start="255:15" pos:end="255:61">(<argument pos:start="255:16" pos:end="255:20"><expr pos:start="255:16" pos:end="255:20"><name pos:start="255:16" pos:end="255:20">avctx</name></expr></argument>, <argument pos:start="255:23" pos:end="255:34"><expr pos:start="255:23" pos:end="255:34"><name pos:start="255:23" pos:end="255:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="255:37" pos:end="255:60"><expr pos:start="255:37" pos:end="255:60"><literal type="string" pos:start="255:37" pos:end="255:60">"image data not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="257:9" pos:end="257:35">return <expr pos:start="257:16" pos:end="257:34"><name pos:start="257:16" pos:end="257:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="263:5" pos:end="263:23">return <expr pos:start="263:12" pos:end="263:22"><name pos:start="263:12" pos:end="263:22"><name pos:start="263:12" pos:end="263:16">avpkt</name><operator pos:start="263:17" pos:end="263:18">-&gt;</operator><name pos:start="263:19" pos:end="263:22">size</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
