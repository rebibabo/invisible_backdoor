<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7329.c" pos:tabs="8"><function pos:start="1:1" pos:end="115:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:13">tlb_fill</name><parameter_list pos:start="1:14" pos:end="1:75">(<parameter pos:start="1:15" pos:end="1:32"><decl pos:start="1:15" pos:end="1:32"><type pos:start="1:15" pos:end="1:32"><name pos:start="1:15" pos:end="1:22">unsigned</name> <name pos:start="1:24" pos:end="1:27">long</name></type> <name pos:start="1:29" pos:end="1:32">addr</name></decl></parameter>, <parameter pos:start="1:35" pos:end="1:46"><decl pos:start="1:35" pos:end="1:46"><type pos:start="1:35" pos:end="1:46"><name pos:start="1:35" pos:end="1:37">int</name></type> <name pos:start="1:39" pos:end="1:46">is_write</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:59"><decl pos:start="1:49" pos:end="1:59"><type pos:start="1:49" pos:end="1:59"><name pos:start="1:49" pos:end="1:51">int</name></type> <name pos:start="1:53" pos:end="1:59">is_user</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:74"><decl pos:start="1:62" pos:end="1:74"><type pos:start="1:62" pos:end="1:74"><name pos:start="1:62" pos:end="1:65">void</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:74">retaddr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="115:1">{<block_content pos:start="5:5" pos:end="113:20">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">TranslationBlock</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:24">tb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">CPUState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:23">saved_env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:17">long</name></type> <name pos:start="9:19" pos:end="9:20">pc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="17:24">/* XXX: hack to restore env in all cases, even if not called from

       generated code */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:20"><expr pos:start="19:5" pos:end="19:19"><name pos:start="19:5" pos:end="19:13">saved_env</name> <operator pos:start="19:15" pos:end="19:15">=</operator> <name pos:start="19:17" pos:end="19:19">env</name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:25"><expr pos:start="21:5" pos:end="21:24"><name pos:start="21:5" pos:end="21:7">env</name> <operator pos:start="21:9" pos:end="21:9">=</operator> <name pos:start="21:11" pos:end="21:24">cpu_single_env</name></expr>;</expr_stmt>

    <block pos:start="23:5" pos:end="55:5">{<block_content pos:start="25:9" pos:end="54:0">

        <decl_stmt pos:start="25:9" pos:end="25:43"><decl pos:start="25:9" pos:end="25:31"><type pos:start="25:9" pos:end="25:21"><name pos:start="25:9" pos:end="25:16">unsigned</name> <name pos:start="25:18" pos:end="25:21">long</name></type> <name pos:start="25:23" pos:end="25:31">tlb_addrr</name></decl>, <decl pos:start="25:34" pos:end="25:42"><type ref="prev" pos:start="25:9" pos:end="25:21"/><name pos:start="25:34" pos:end="25:42">tlb_addrw</name></decl>;</decl_stmt>

        <decl_stmt pos:start="27:9" pos:end="27:18"><decl pos:start="27:9" pos:end="27:17"><type pos:start="27:9" pos:end="27:11"><name pos:start="27:9" pos:end="27:11">int</name></type> <name pos:start="27:13" pos:end="27:17">index</name></decl>;</decl_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:64"><expr pos:start="29:9" pos:end="29:63"><name pos:start="29:9" pos:end="29:13">index</name> <operator pos:start="29:15" pos:end="29:15">=</operator> <operator pos:start="29:17" pos:end="29:17">(</operator><name pos:start="29:18" pos:end="29:21">addr</name> <operator pos:start="29:23" pos:end="29:24">&gt;&gt;</operator> <name pos:start="29:26" pos:end="29:41">TARGET_PAGE_BITS</name><operator pos:start="29:42" pos:end="29:42">)</operator> <operator pos:start="29:44" pos:end="29:44">&amp;</operator> <operator pos:start="29:46" pos:end="29:46">(</operator><name pos:start="29:47" pos:end="29:58">CPU_TLB_SIZE</name> <operator pos:start="29:60" pos:end="29:60">-</operator> <literal type="number" pos:start="29:62" pos:end="29:62">1</literal><operator pos:start="29:63" pos:end="29:63">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:58"><expr pos:start="31:9" pos:end="31:57"><name pos:start="31:9" pos:end="31:17">tlb_addrr</name> <operator pos:start="31:19" pos:end="31:19">=</operator> <name pos:start="31:21" pos:end="31:49"><name pos:start="31:21" pos:end="31:23">env</name><operator pos:start="31:24" pos:end="31:25">-&gt;</operator><name pos:start="31:26" pos:end="31:33">tlb_read</name><index pos:start="31:34" pos:end="31:42">[<expr pos:start="31:35" pos:end="31:41"><name pos:start="31:35" pos:end="31:41">is_user</name></expr>]</index><index pos:start="31:43" pos:end="31:49">[<expr pos:start="31:44" pos:end="31:48"><name pos:start="31:44" pos:end="31:48">index</name></expr>]</index></name><operator pos:start="31:50" pos:end="31:50">.</operator><name pos:start="31:51" pos:end="31:57">address</name></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="54:0"><expr pos:start="33:9" pos:end="33:58"><name pos:start="33:9" pos:end="33:17">tlb_addrw</name> <operator pos:start="33:19" pos:end="33:19">=</operator> <name pos:start="33:21" pos:end="33:50"><name pos:start="33:21" pos:end="33:23">env</name><operator pos:start="33:24" pos:end="33:25">-&gt;</operator><name pos:start="33:26" pos:end="33:34">tlb_write</name><index pos:start="33:35" pos:end="33:43">[<expr pos:start="33:36" pos:end="33:42"><name pos:start="33:36" pos:end="33:42">is_user</name></expr>]</index><index pos:start="33:44" pos:end="33:50">[<expr pos:start="33:45" pos:end="33:49"><name pos:start="33:45" pos:end="33:49">index</name></expr>]</index></name><operator pos:start="33:51" pos:end="33:51">.</operator><name pos:start="33:52" pos:end="33:58">address</name></expr>;</expr_stmt>

<cpp:if pos:start="35:1" pos:end="35:5">#<cpp:directive pos:start="35:2" pos:end="35:3">if</cpp:directive> <expr pos:start="35:5" pos:end="35:5"><literal type="number" pos:start="35:5" pos:end="35:5">0</literal></expr></cpp:if>

        if (loglevel) {

            fprintf(logfile,

                    "%s 1 %p %p idx=%d addr=0x%08lx tbl_addr=0x%08lx 0x%08lx "

               "(0x%08lx 0x%08lx)\n", __func__, env,

               &amp;env-&gt;tlb_read[is_user][index], index, addr,

               tlb_addrr, tlb_addrw, addr &amp; TARGET_PAGE_MASK,

               tlb_addrr &amp; (TARGET_PAGE_MASK | TLB_INVALID_MASK));

        }

<cpp:endif pos:start="53:1" pos:end="53:6">#<cpp:directive pos:start="53:2" pos:end="53:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block>

    <expr_stmt pos:start="57:5" pos:end="57:68"><expr pos:start="57:5" pos:end="57:67"><name pos:start="57:5" pos:end="57:7">ret</name> <operator pos:start="57:9" pos:end="57:9">=</operator> <call pos:start="57:11" pos:end="57:67"><name pos:start="57:11" pos:end="57:34">cpu_ppc_handle_mmu_fault</name><argument_list pos:start="57:35" pos:end="57:67">(<argument pos:start="57:36" pos:end="57:38"><expr pos:start="57:36" pos:end="57:38"><name pos:start="57:36" pos:end="57:38">env</name></expr></argument>, <argument pos:start="57:41" pos:end="57:44"><expr pos:start="57:41" pos:end="57:44"><name pos:start="57:41" pos:end="57:44">addr</name></expr></argument>, <argument pos:start="57:47" pos:end="57:54"><expr pos:start="57:47" pos:end="57:54"><name pos:start="57:47" pos:end="57:54">is_write</name></expr></argument>, <argument pos:start="57:57" pos:end="57:63"><expr pos:start="57:57" pos:end="57:63"><name pos:start="57:57" pos:end="57:63">is_user</name></expr></argument>, <argument pos:start="57:66" pos:end="57:66"><expr pos:start="57:66" pos:end="57:66"><literal type="number" pos:start="57:66" pos:end="57:66">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="83:5"><if pos:start="59:5" pos:end="83:5">if <condition pos:start="59:8" pos:end="59:12">(<expr pos:start="59:9" pos:end="59:11"><name pos:start="59:9" pos:end="59:11">ret</name></expr>)</condition> <block pos:start="59:14" pos:end="83:5">{<block_content pos:start="61:9" pos:end="81:70">

        <if_stmt pos:start="61:9" pos:end="79:9"><if pos:start="61:9" pos:end="79:9">if <condition pos:start="61:12" pos:end="61:20">(<expr pos:start="61:13" pos:end="61:19"><name pos:start="61:13" pos:end="61:19">retaddr</name></expr>)</condition> <block pos:start="61:22" pos:end="79:9">{<block_content pos:start="65:13" pos:end="77:13">

            <comment type="block" pos:start="63:13" pos:end="63:46">/* now we have a real cpu fault */</comment>

            <expr_stmt pos:start="65:13" pos:end="65:40"><expr pos:start="65:13" pos:end="65:39"><name pos:start="65:13" pos:end="65:14">pc</name> <operator pos:start="65:16" pos:end="65:16">=</operator> <operator pos:start="65:18" pos:end="65:18">(</operator><name pos:start="65:19" pos:end="65:26">unsigned</name> <name pos:start="65:28" pos:end="65:31">long</name><operator pos:start="65:32" pos:end="65:32">)</operator><name pos:start="65:33" pos:end="65:39">retaddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:32"><expr pos:start="67:13" pos:end="67:31"><name pos:start="67:13" pos:end="67:14">tb</name> <operator pos:start="67:16" pos:end="67:16">=</operator> <call pos:start="67:18" pos:end="67:31"><name pos:start="67:18" pos:end="67:27">tb_find_pc</name><argument_list pos:start="67:28" pos:end="67:31">(<argument pos:start="67:29" pos:end="67:30"><expr pos:start="67:29" pos:end="67:30"><name pos:start="67:29" pos:end="67:30">pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="69:13" pos:end="77:13"><if pos:start="69:13" pos:end="77:13">if <condition pos:start="69:16" pos:end="69:19">(<expr pos:start="69:17" pos:end="69:18"><name pos:start="69:17" pos:end="69:18">tb</name></expr>)</condition> <block pos:start="69:21" pos:end="77:13">{<block_content pos:start="75:17" pos:end="75:53">

                <comment type="block" pos:start="71:17" pos:end="73:41">/* the PC is inside the translated code. It means that we have

                   a virtual CPU fault */</comment>

                <expr_stmt pos:start="75:17" pos:end="75:53"><expr pos:start="75:17" pos:end="75:52"><call pos:start="75:17" pos:end="75:52"><name pos:start="75:17" pos:end="75:33">cpu_restore_state</name><argument_list pos:start="75:34" pos:end="75:52">(<argument pos:start="75:35" pos:end="75:36"><expr pos:start="75:35" pos:end="75:36"><name pos:start="75:35" pos:end="75:36">tb</name></expr></argument>, <argument pos:start="75:39" pos:end="75:41"><expr pos:start="75:39" pos:end="75:41"><name pos:start="75:39" pos:end="75:41">env</name></expr></argument>, <argument pos:start="75:44" pos:end="75:45"><expr pos:start="75:44" pos:end="75:45"><name pos:start="75:44" pos:end="75:45">pc</name></expr></argument>, <argument pos:start="75:48" pos:end="75:51"><expr pos:start="75:48" pos:end="75:51"><name pos:start="75:48" pos:end="75:51">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:70"><expr pos:start="81:9" pos:end="81:69"><call pos:start="81:9" pos:end="81:69"><name pos:start="81:9" pos:end="81:30">do_raise_exception_err</name><argument_list pos:start="81:31" pos:end="81:69">(<argument pos:start="81:32" pos:end="81:51"><expr pos:start="81:32" pos:end="81:51"><name pos:start="81:32" pos:end="81:51"><name pos:start="81:32" pos:end="81:34">env</name><operator pos:start="81:35" pos:end="81:36">-&gt;</operator><name pos:start="81:37" pos:end="81:51">exception_index</name></name></expr></argument>, <argument pos:start="81:54" pos:end="81:68"><expr pos:start="81:54" pos:end="81:68"><name pos:start="81:54" pos:end="81:68"><name pos:start="81:54" pos:end="81:56">env</name><operator pos:start="81:57" pos:end="81:58">-&gt;</operator><name pos:start="81:59" pos:end="81:68">error_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <block pos:start="85:5" pos:end="111:5">{<block_content pos:start="87:9" pos:end="110:0">

        <decl_stmt pos:start="87:9" pos:end="87:43"><decl pos:start="87:9" pos:end="87:31"><type pos:start="87:9" pos:end="87:21"><name pos:start="87:9" pos:end="87:16">unsigned</name> <name pos:start="87:18" pos:end="87:21">long</name></type> <name pos:start="87:23" pos:end="87:31">tlb_addrr</name></decl>, <decl pos:start="87:34" pos:end="87:42"><type ref="prev" pos:start="87:9" pos:end="87:21"/><name pos:start="87:34" pos:end="87:42">tlb_addrw</name></decl>;</decl_stmt>

        <decl_stmt pos:start="89:9" pos:end="89:18"><decl pos:start="89:9" pos:end="89:17"><type pos:start="89:9" pos:end="89:11"><name pos:start="89:9" pos:end="89:11">int</name></type> <name pos:start="89:13" pos:end="89:17">index</name></decl>;</decl_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:64"><expr pos:start="91:9" pos:end="91:63"><name pos:start="91:9" pos:end="91:13">index</name> <operator pos:start="91:15" pos:end="91:15">=</operator> <operator pos:start="91:17" pos:end="91:17">(</operator><name pos:start="91:18" pos:end="91:21">addr</name> <operator pos:start="91:23" pos:end="91:24">&gt;&gt;</operator> <name pos:start="91:26" pos:end="91:41">TARGET_PAGE_BITS</name><operator pos:start="91:42" pos:end="91:42">)</operator> <operator pos:start="91:44" pos:end="91:44">&amp;</operator> <operator pos:start="91:46" pos:end="91:46">(</operator><name pos:start="91:47" pos:end="91:58">CPU_TLB_SIZE</name> <operator pos:start="91:60" pos:end="91:60">-</operator> <literal type="number" pos:start="91:62" pos:end="91:62">1</literal><operator pos:start="91:63" pos:end="91:63">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:58"><expr pos:start="93:9" pos:end="93:57"><name pos:start="93:9" pos:end="93:17">tlb_addrr</name> <operator pos:start="93:19" pos:end="93:19">=</operator> <name pos:start="93:21" pos:end="93:49"><name pos:start="93:21" pos:end="93:23">env</name><operator pos:start="93:24" pos:end="93:25">-&gt;</operator><name pos:start="93:26" pos:end="93:33">tlb_read</name><index pos:start="93:34" pos:end="93:42">[<expr pos:start="93:35" pos:end="93:41"><name pos:start="93:35" pos:end="93:41">is_user</name></expr>]</index><index pos:start="93:43" pos:end="93:49">[<expr pos:start="93:44" pos:end="93:48"><name pos:start="93:44" pos:end="93:48">index</name></expr>]</index></name><operator pos:start="93:50" pos:end="93:50">.</operator><name pos:start="93:51" pos:end="93:57">address</name></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="110:0"><expr pos:start="95:9" pos:end="95:58"><name pos:start="95:9" pos:end="95:17">tlb_addrw</name> <operator pos:start="95:19" pos:end="95:19">=</operator> <name pos:start="95:21" pos:end="95:50"><name pos:start="95:21" pos:end="95:23">env</name><operator pos:start="95:24" pos:end="95:25">-&gt;</operator><name pos:start="95:26" pos:end="95:34">tlb_write</name><index pos:start="95:35" pos:end="95:43">[<expr pos:start="95:36" pos:end="95:42"><name pos:start="95:36" pos:end="95:42">is_user</name></expr>]</index><index pos:start="95:44" pos:end="95:50">[<expr pos:start="95:45" pos:end="95:49"><name pos:start="95:45" pos:end="95:49">index</name></expr>]</index></name><operator pos:start="95:51" pos:end="95:51">.</operator><name pos:start="95:52" pos:end="95:58">address</name></expr>;</expr_stmt>

<cpp:if pos:start="97:1" pos:end="97:5">#<cpp:directive pos:start="97:2" pos:end="97:3">if</cpp:directive> <expr pos:start="97:5" pos:end="97:5"><literal type="number" pos:start="97:5" pos:end="97:5">0</literal></expr></cpp:if>

        printf("%s 2 %p %p idx=%d addr=0x%08lx tbl_addr=0x%08lx 0x%08lx "

               "(0x%08lx 0x%08lx)\n", __func__, env,

               &amp;env-&gt;tlb_read[is_user][index], index, addr,

               tlb_addrr, tlb_addrw, addr &amp; TARGET_PAGE_MASK,

               tlb_addrr &amp; (TARGET_PAGE_MASK | TLB_INVALID_MASK));

<cpp:endif pos:start="109:1" pos:end="109:6">#<cpp:directive pos:start="109:2" pos:end="109:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block>

    <expr_stmt pos:start="113:5" pos:end="113:20"><expr pos:start="113:5" pos:end="113:19"><name pos:start="113:5" pos:end="113:7">env</name> <operator pos:start="113:9" pos:end="113:9">=</operator> <name pos:start="113:11" pos:end="113:19">saved_env</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
