<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/215.c" pos:tabs="8"><function pos:start="1:1" pos:end="215:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:34">handle_2misc_fcmp_zero</name><parameter_list pos:start="1:35" pos:end="5:60">(<parameter pos:start="1:36" pos:end="1:50"><decl pos:start="1:36" pos:end="1:50"><type pos:start="1:36" pos:end="1:50"><name pos:start="1:36" pos:end="1:47">DisasContext</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:50">s</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:62"><decl pos:start="1:53" pos:end="1:62"><type pos:start="1:53" pos:end="1:62"><name pos:start="1:53" pos:end="1:55">int</name></type> <name pos:start="1:57" pos:end="1:62">opcode</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:49"><decl pos:start="3:36" pos:end="3:49"><type pos:start="3:36" pos:end="3:49"><name pos:start="3:36" pos:end="3:39">bool</name></type> <name pos:start="3:41" pos:end="3:49">is_scalar</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:60"><decl pos:start="3:52" pos:end="3:60"><type pos:start="3:52" pos:end="3:60"><name pos:start="3:52" pos:end="3:55">bool</name></type> <name pos:start="3:57" pos:end="3:60">is_u</name></decl></parameter>, <parameter pos:start="3:63" pos:end="3:71"><decl pos:start="3:63" pos:end="3:71"><type pos:start="3:63" pos:end="3:71"><name pos:start="3:63" pos:end="3:66">bool</name></type> <name pos:start="3:68" pos:end="3:71">is_q</name></decl></parameter>,

                                   <parameter pos:start="5:36" pos:end="5:43"><decl pos:start="5:36" pos:end="5:43"><type pos:start="5:36" pos:end="5:43"><name pos:start="5:36" pos:end="5:38">int</name></type> <name pos:start="5:40" pos:end="5:43">size</name></decl></parameter>, <parameter pos:start="5:46" pos:end="5:51"><decl pos:start="5:46" pos:end="5:51"><type pos:start="5:46" pos:end="5:51"><name pos:start="5:46" pos:end="5:48">int</name></type> <name pos:start="5:50" pos:end="5:51">rn</name></decl></parameter>, <parameter pos:start="5:54" pos:end="5:59"><decl pos:start="5:54" pos:end="5:59"><type pos:start="5:54" pos:end="5:59"><name pos:start="5:54" pos:end="5:56">int</name></type> <name pos:start="5:58" pos:end="5:59">rd</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="215:1">{<block_content pos:start="9:5" pos:end="213:28">

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">bool</name></type> <name pos:start="9:10" pos:end="9:18">is_double</name> <init pos:start="9:20" pos:end="9:32">= <expr pos:start="9:22" pos:end="9:32"><operator pos:start="9:22" pos:end="9:22">(</operator><name pos:start="9:23" pos:end="9:26">size</name> <operator pos:start="9:28" pos:end="9:29">==</operator> <literal type="number" pos:start="9:31" pos:end="9:31">3</literal><operator pos:start="9:32" pos:end="9:32">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:39"><decl pos:start="11:5" pos:end="11:38"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">TCGv_ptr</name></type> <name pos:start="11:14" pos:end="11:17">fpst</name> <init pos:start="11:19" pos:end="11:38">= <expr pos:start="11:21" pos:end="11:38"><call pos:start="11:21" pos:end="11:38"><name pos:start="11:21" pos:end="11:36">get_fpstatus_ptr</name><argument_list pos:start="11:37" pos:end="11:38">()</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="209:5"><if pos:start="15:5" pos:end="103:5">if <condition pos:start="15:8" pos:end="15:18">(<expr pos:start="15:9" pos:end="15:17"><name pos:start="15:9" pos:end="15:17">is_double</name></expr>)</condition> <block pos:start="15:20" pos:end="103:5">{<block_content pos:start="17:9" pos:end="101:34">

        <decl_stmt pos:start="17:9" pos:end="17:45"><decl pos:start="17:9" pos:end="17:44"><type pos:start="17:9" pos:end="17:16"><name pos:start="17:9" pos:end="17:16">TCGv_i64</name></type> <name pos:start="17:18" pos:end="17:23">tcg_op</name> <init pos:start="17:25" pos:end="17:44">= <expr pos:start="17:27" pos:end="17:44"><call pos:start="17:27" pos:end="17:44"><name pos:start="17:27" pos:end="17:42">tcg_temp_new_i64</name><argument_list pos:start="17:43" pos:end="17:44">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="19:9" pos:end="19:45"><decl pos:start="19:9" pos:end="19:44"><type pos:start="19:9" pos:end="19:16"><name pos:start="19:9" pos:end="19:16">TCGv_i64</name></type> <name pos:start="19:18" pos:end="19:25">tcg_zero</name> <init pos:start="19:27" pos:end="19:44">= <expr pos:start="19:29" pos:end="19:44"><call pos:start="19:29" pos:end="19:44"><name pos:start="19:29" pos:end="19:41">tcg_const_i64</name><argument_list pos:start="19:42" pos:end="19:44">(<argument pos:start="19:43" pos:end="19:43"><expr pos:start="19:43" pos:end="19:43"><literal type="number" pos:start="19:43" pos:end="19:43">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:46"><decl pos:start="21:9" pos:end="21:45"><type pos:start="21:9" pos:end="21:16"><name pos:start="21:9" pos:end="21:16">TCGv_i64</name></type> <name pos:start="21:18" pos:end="21:24">tcg_res</name> <init pos:start="21:26" pos:end="21:45">= <expr pos:start="21:28" pos:end="21:45"><call pos:start="21:28" pos:end="21:45"><name pos:start="21:28" pos:end="21:43">tcg_temp_new_i64</name><argument_list pos:start="21:44" pos:end="21:45">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="23:9" pos:end="23:36"><decl pos:start="23:9" pos:end="23:35"><type pos:start="23:9" pos:end="23:30"><name pos:start="23:9" pos:end="23:28">NeonGenTwoDoubleOPFn</name> <modifier pos:start="23:30" pos:end="23:30">*</modifier></type><name pos:start="23:31" pos:end="23:35">genfn</name></decl>;</decl_stmt>

        <decl_stmt pos:start="25:9" pos:end="25:26"><decl pos:start="25:9" pos:end="25:25"><type pos:start="25:9" pos:end="25:12"><name pos:start="25:9" pos:end="25:12">bool</name></type> <name pos:start="25:14" pos:end="25:17">swap</name> <init pos:start="25:19" pos:end="25:25">= <expr pos:start="25:21" pos:end="25:25"><name pos:start="25:21" pos:end="25:25">false</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="27:9" pos:end="27:17"><decl pos:start="27:9" pos:end="27:16"><type pos:start="27:9" pos:end="27:11"><name pos:start="27:9" pos:end="27:11">int</name></type> <name pos:start="27:13" pos:end="27:16">pass</name></decl>;</decl_stmt>



        <switch pos:start="31:9" pos:end="67:9">switch <condition pos:start="31:16" pos:end="31:23">(<expr pos:start="31:17" pos:end="31:22"><name pos:start="31:17" pos:end="31:22">opcode</name></expr>)</condition> <block pos:start="31:25" pos:end="67:9">{<block_content pos:start="33:9" pos:end="65:35">

        <case pos:start="33:9" pos:end="33:18">case <expr pos:start="33:14" pos:end="33:17"><literal type="number" pos:start="33:14" pos:end="33:17">0x2e</literal></expr>:</case> <comment type="block" pos:start="33:20" pos:end="33:37">/* FCMLT (zero) */</comment>

            <expr_stmt pos:start="35:13" pos:end="35:24"><expr pos:start="35:13" pos:end="35:23"><name pos:start="35:13" pos:end="35:16">swap</name> <operator pos:start="35:18" pos:end="35:18">=</operator> <name pos:start="35:20" pos:end="35:23">true</name></expr>;</expr_stmt>

            <comment type="block" pos:start="37:13" pos:end="37:29">/* fallthrough */</comment>

        <case pos:start="39:9" pos:end="39:18">case <expr pos:start="39:14" pos:end="39:17"><literal type="number" pos:start="39:14" pos:end="39:17">0x2c</literal></expr>:</case> <comment type="block" pos:start="39:20" pos:end="39:37">/* FCMGT (zero) */</comment>

            <expr_stmt pos:start="41:13" pos:end="41:44"><expr pos:start="41:13" pos:end="41:43"><name pos:start="41:13" pos:end="41:17">genfn</name> <operator pos:start="41:19" pos:end="41:19">=</operator> <name pos:start="41:21" pos:end="41:43">gen_helper_neon_cgt_f64</name></expr>;</expr_stmt>

            <break pos:start="43:13" pos:end="43:18">break;</break>

        <case pos:start="45:9" pos:end="45:18">case <expr pos:start="45:14" pos:end="45:17"><literal type="number" pos:start="45:14" pos:end="45:17">0x2d</literal></expr>:</case> <comment type="block" pos:start="45:20" pos:end="45:37">/* FCMEQ (zero) */</comment>

            <expr_stmt pos:start="47:13" pos:end="47:44"><expr pos:start="47:13" pos:end="47:43"><name pos:start="47:13" pos:end="47:17">genfn</name> <operator pos:start="47:19" pos:end="47:19">=</operator> <name pos:start="47:21" pos:end="47:43">gen_helper_neon_ceq_f64</name></expr>;</expr_stmt>

            <break pos:start="49:13" pos:end="49:18">break;</break>

        <case pos:start="51:9" pos:end="51:18">case <expr pos:start="51:14" pos:end="51:17"><literal type="number" pos:start="51:14" pos:end="51:17">0x6d</literal></expr>:</case> <comment type="block" pos:start="51:20" pos:end="51:37">/* FCMLE (zero) */</comment>

            <expr_stmt pos:start="53:13" pos:end="53:24"><expr pos:start="53:13" pos:end="53:23"><name pos:start="53:13" pos:end="53:16">swap</name> <operator pos:start="53:18" pos:end="53:18">=</operator> <name pos:start="53:20" pos:end="53:23">true</name></expr>;</expr_stmt>

            <comment type="block" pos:start="55:13" pos:end="55:30">/* fall through */</comment>

        <case pos:start="57:9" pos:end="57:18">case <expr pos:start="57:14" pos:end="57:17"><literal type="number" pos:start="57:14" pos:end="57:17">0x6c</literal></expr>:</case> <comment type="block" pos:start="57:20" pos:end="57:37">/* FCMGE (zero) */</comment>

            <expr_stmt pos:start="59:13" pos:end="59:44"><expr pos:start="59:13" pos:end="59:43"><name pos:start="59:13" pos:end="59:17">genfn</name> <operator pos:start="59:19" pos:end="59:19">=</operator> <name pos:start="59:21" pos:end="59:43">gen_helper_neon_cge_f64</name></expr>;</expr_stmt>

            <break pos:start="61:13" pos:end="61:18">break;</break>

        <default pos:start="63:9" pos:end="63:16">default:</default>

            <expr_stmt pos:start="65:13" pos:end="65:35"><expr pos:start="65:13" pos:end="65:34"><call pos:start="65:13" pos:end="65:34"><name pos:start="65:13" pos:end="65:32">g_assert_not_reached</name><argument_list pos:start="65:33" pos:end="65:34">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>



        <for pos:start="71:9" pos:end="87:9">for <control pos:start="71:13" pos:end="71:58">(<init pos:start="71:14" pos:end="71:22"><expr pos:start="71:14" pos:end="71:21"><name pos:start="71:14" pos:end="71:17">pass</name> <operator pos:start="71:19" pos:end="71:19">=</operator> <literal type="number" pos:start="71:21" pos:end="71:21">0</literal></expr>;</init> <condition pos:start="71:24" pos:end="71:50"><expr pos:start="71:24" pos:end="71:49"><name pos:start="71:24" pos:end="71:27">pass</name> <operator pos:start="71:29" pos:end="71:29">&lt;</operator> <operator pos:start="71:31" pos:end="71:31">(</operator><ternary pos:start="71:32" pos:end="71:48"><condition pos:start="71:32" pos:end="71:42"><expr pos:start="71:32" pos:end="71:40"><name pos:start="71:32" pos:end="71:40">is_scalar</name></expr> ?</condition><then pos:start="71:44" pos:end="71:44"> <expr pos:start="71:44" pos:end="71:44"><literal type="number" pos:start="71:44" pos:end="71:44">1</literal></expr> </then><else pos:start="71:46" pos:end="71:48">: <expr pos:start="71:48" pos:end="71:48"><literal type="number" pos:start="71:48" pos:end="71:48">2</literal></expr></else></ternary><operator pos:start="71:49" pos:end="71:49">)</operator></expr>;</condition> <incr pos:start="71:52" pos:end="71:57"><expr pos:start="71:52" pos:end="71:57"><name pos:start="71:52" pos:end="71:55">pass</name><operator pos:start="71:56" pos:end="71:57">++</operator></expr></incr>)</control> <block pos:start="71:60" pos:end="87:9">{<block_content pos:start="73:13" pos:end="85:59">

            <expr_stmt pos:start="73:13" pos:end="73:57"><expr pos:start="73:13" pos:end="73:56"><call pos:start="73:13" pos:end="73:56"><name pos:start="73:13" pos:end="73:28">read_vec_element</name><argument_list pos:start="73:29" pos:end="73:56">(<argument pos:start="73:30" pos:end="73:30"><expr pos:start="73:30" pos:end="73:30"><name pos:start="73:30" pos:end="73:30">s</name></expr></argument>, <argument pos:start="73:33" pos:end="73:38"><expr pos:start="73:33" pos:end="73:38"><name pos:start="73:33" pos:end="73:38">tcg_op</name></expr></argument>, <argument pos:start="73:41" pos:end="73:42"><expr pos:start="73:41" pos:end="73:42"><name pos:start="73:41" pos:end="73:42">rn</name></expr></argument>, <argument pos:start="73:45" pos:end="73:48"><expr pos:start="73:45" pos:end="73:48"><name pos:start="73:45" pos:end="73:48">pass</name></expr></argument>, <argument pos:start="73:51" pos:end="73:55"><expr pos:start="73:51" pos:end="73:55"><name pos:start="73:51" pos:end="73:55">MO_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="75:13" pos:end="83:13"><if pos:start="75:13" pos:end="79:13">if <condition pos:start="75:16" pos:end="75:21">(<expr pos:start="75:17" pos:end="75:20"><name pos:start="75:17" pos:end="75:20">swap</name></expr>)</condition> <block pos:start="75:23" pos:end="79:13">{<block_content pos:start="77:17" pos:end="77:55">

                <expr_stmt pos:start="77:17" pos:end="77:55"><expr pos:start="77:17" pos:end="77:54"><call pos:start="77:17" pos:end="77:54"><name pos:start="77:17" pos:end="77:21">genfn</name><argument_list pos:start="77:22" pos:end="77:54">(<argument pos:start="77:23" pos:end="77:29"><expr pos:start="77:23" pos:end="77:29"><name pos:start="77:23" pos:end="77:29">tcg_res</name></expr></argument>, <argument pos:start="77:32" pos:end="77:39"><expr pos:start="77:32" pos:end="77:39"><name pos:start="77:32" pos:end="77:39">tcg_zero</name></expr></argument>, <argument pos:start="77:42" pos:end="77:47"><expr pos:start="77:42" pos:end="77:47"><name pos:start="77:42" pos:end="77:47">tcg_op</name></expr></argument>, <argument pos:start="77:50" pos:end="77:53"><expr pos:start="77:50" pos:end="77:53"><name pos:start="77:50" pos:end="77:53">fpst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="79:15" pos:end="83:13">else <block pos:start="79:20" pos:end="83:13">{<block_content pos:start="81:17" pos:end="81:55">

                <expr_stmt pos:start="81:17" pos:end="81:55"><expr pos:start="81:17" pos:end="81:54"><call pos:start="81:17" pos:end="81:54"><name pos:start="81:17" pos:end="81:21">genfn</name><argument_list pos:start="81:22" pos:end="81:54">(<argument pos:start="81:23" pos:end="81:29"><expr pos:start="81:23" pos:end="81:29"><name pos:start="81:23" pos:end="81:29">tcg_res</name></expr></argument>, <argument pos:start="81:32" pos:end="81:37"><expr pos:start="81:32" pos:end="81:37"><name pos:start="81:32" pos:end="81:37">tcg_op</name></expr></argument>, <argument pos:start="81:40" pos:end="81:47"><expr pos:start="81:40" pos:end="81:47"><name pos:start="81:40" pos:end="81:47">tcg_zero</name></expr></argument>, <argument pos:start="81:50" pos:end="81:53"><expr pos:start="81:50" pos:end="81:53"><name pos:start="81:50" pos:end="81:53">fpst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:59"><expr pos:start="85:13" pos:end="85:58"><call pos:start="85:13" pos:end="85:58"><name pos:start="85:13" pos:end="85:29">write_vec_element</name><argument_list pos:start="85:30" pos:end="85:58">(<argument pos:start="85:31" pos:end="85:31"><expr pos:start="85:31" pos:end="85:31"><name pos:start="85:31" pos:end="85:31">s</name></expr></argument>, <argument pos:start="85:34" pos:end="85:40"><expr pos:start="85:34" pos:end="85:40"><name pos:start="85:34" pos:end="85:40">tcg_res</name></expr></argument>, <argument pos:start="85:43" pos:end="85:44"><expr pos:start="85:43" pos:end="85:44"><name pos:start="85:43" pos:end="85:44">rd</name></expr></argument>, <argument pos:start="85:47" pos:end="85:50"><expr pos:start="85:47" pos:end="85:50"><name pos:start="85:47" pos:end="85:50">pass</name></expr></argument>, <argument pos:start="85:53" pos:end="85:57"><expr pos:start="85:53" pos:end="85:57"><name pos:start="85:53" pos:end="85:57">MO_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="89:9" pos:end="93:9"><if pos:start="89:9" pos:end="93:9">if <condition pos:start="89:12" pos:end="89:22">(<expr pos:start="89:13" pos:end="89:21"><name pos:start="89:13" pos:end="89:21">is_scalar</name></expr>)</condition> <block pos:start="89:24" pos:end="93:9">{<block_content pos:start="91:13" pos:end="91:34">

            <expr_stmt pos:start="91:13" pos:end="91:34"><expr pos:start="91:13" pos:end="91:33"><call pos:start="91:13" pos:end="91:33"><name pos:start="91:13" pos:end="91:26">clear_vec_high</name><argument_list pos:start="91:27" pos:end="91:33">(<argument pos:start="91:28" pos:end="91:28"><expr pos:start="91:28" pos:end="91:28"><name pos:start="91:28" pos:end="91:28">s</name></expr></argument>, <argument pos:start="91:31" pos:end="91:32"><expr pos:start="91:31" pos:end="91:32"><name pos:start="91:31" pos:end="91:32">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="97:9" pos:end="97:35"><expr pos:start="97:9" pos:end="97:34"><call pos:start="97:9" pos:end="97:34"><name pos:start="97:9" pos:end="97:25">tcg_temp_free_i64</name><argument_list pos:start="97:26" pos:end="97:34">(<argument pos:start="97:27" pos:end="97:33"><expr pos:start="97:27" pos:end="97:33"><name pos:start="97:27" pos:end="97:33">tcg_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:36"><expr pos:start="99:9" pos:end="99:35"><call pos:start="99:9" pos:end="99:35"><name pos:start="99:9" pos:end="99:25">tcg_temp_free_i64</name><argument_list pos:start="99:26" pos:end="99:35">(<argument pos:start="99:27" pos:end="99:34"><expr pos:start="99:27" pos:end="99:34"><name pos:start="99:27" pos:end="99:34">tcg_zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:34"><expr pos:start="101:9" pos:end="101:33"><call pos:start="101:9" pos:end="101:33"><name pos:start="101:9" pos:end="101:25">tcg_temp_free_i64</name><argument_list pos:start="101:26" pos:end="101:33">(<argument pos:start="101:27" pos:end="101:32"><expr pos:start="101:27" pos:end="101:32"><name pos:start="101:27" pos:end="101:32">tcg_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="103:7" pos:end="209:5">else <block pos:start="103:12" pos:end="209:5">{<block_content pos:start="105:9" pos:end="207:9">

        <decl_stmt pos:start="105:9" pos:end="105:45"><decl pos:start="105:9" pos:end="105:44"><type pos:start="105:9" pos:end="105:16"><name pos:start="105:9" pos:end="105:16">TCGv_i32</name></type> <name pos:start="105:18" pos:end="105:23">tcg_op</name> <init pos:start="105:25" pos:end="105:44">= <expr pos:start="105:27" pos:end="105:44"><call pos:start="105:27" pos:end="105:44"><name pos:start="105:27" pos:end="105:42">tcg_temp_new_i32</name><argument_list pos:start="105:43" pos:end="105:44">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="107:9" pos:end="107:45"><decl pos:start="107:9" pos:end="107:44"><type pos:start="107:9" pos:end="107:16"><name pos:start="107:9" pos:end="107:16">TCGv_i32</name></type> <name pos:start="107:18" pos:end="107:25">tcg_zero</name> <init pos:start="107:27" pos:end="107:44">= <expr pos:start="107:29" pos:end="107:44"><call pos:start="107:29" pos:end="107:44"><name pos:start="107:29" pos:end="107:41">tcg_const_i32</name><argument_list pos:start="107:42" pos:end="107:44">(<argument pos:start="107:43" pos:end="107:43"><expr pos:start="107:43" pos:end="107:43"><literal type="number" pos:start="107:43" pos:end="107:43">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="109:9" pos:end="109:46"><decl pos:start="109:9" pos:end="109:45"><type pos:start="109:9" pos:end="109:16"><name pos:start="109:9" pos:end="109:16">TCGv_i32</name></type> <name pos:start="109:18" pos:end="109:24">tcg_res</name> <init pos:start="109:26" pos:end="109:45">= <expr pos:start="109:28" pos:end="109:45"><call pos:start="109:28" pos:end="109:45"><name pos:start="109:28" pos:end="109:43">tcg_temp_new_i32</name><argument_list pos:start="109:44" pos:end="109:45">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="111:9" pos:end="111:36"><decl pos:start="111:9" pos:end="111:35"><type pos:start="111:9" pos:end="111:30"><name pos:start="111:9" pos:end="111:28">NeonGenTwoSingleOPFn</name> <modifier pos:start="111:30" pos:end="111:30">*</modifier></type><name pos:start="111:31" pos:end="111:35">genfn</name></decl>;</decl_stmt>

        <decl_stmt pos:start="113:9" pos:end="113:26"><decl pos:start="113:9" pos:end="113:25"><type pos:start="113:9" pos:end="113:12"><name pos:start="113:9" pos:end="113:12">bool</name></type> <name pos:start="113:14" pos:end="113:17">swap</name> <init pos:start="113:19" pos:end="113:25">= <expr pos:start="113:21" pos:end="113:25"><name pos:start="113:21" pos:end="113:25">false</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="115:9" pos:end="115:28"><decl pos:start="115:9" pos:end="115:16"><type pos:start="115:9" pos:end="115:11"><name pos:start="115:9" pos:end="115:11">int</name></type> <name pos:start="115:13" pos:end="115:16">pass</name></decl>, <decl pos:start="115:19" pos:end="115:27"><type ref="prev" pos:start="115:9" pos:end="115:11"/><name pos:start="115:19" pos:end="115:27">maxpasses</name></decl>;</decl_stmt>



        <switch pos:start="119:9" pos:end="155:9">switch <condition pos:start="119:16" pos:end="119:23">(<expr pos:start="119:17" pos:end="119:22"><name pos:start="119:17" pos:end="119:22">opcode</name></expr>)</condition> <block pos:start="119:25" pos:end="155:9">{<block_content pos:start="121:9" pos:end="153:35">

        <case pos:start="121:9" pos:end="121:18">case <expr pos:start="121:14" pos:end="121:17"><literal type="number" pos:start="121:14" pos:end="121:17">0x2e</literal></expr>:</case> <comment type="block" pos:start="121:20" pos:end="121:37">/* FCMLT (zero) */</comment>

            <expr_stmt pos:start="123:13" pos:end="123:24"><expr pos:start="123:13" pos:end="123:23"><name pos:start="123:13" pos:end="123:16">swap</name> <operator pos:start="123:18" pos:end="123:18">=</operator> <name pos:start="123:20" pos:end="123:23">true</name></expr>;</expr_stmt>

            <comment type="block" pos:start="125:13" pos:end="125:30">/* fall through */</comment>

        <case pos:start="127:9" pos:end="127:18">case <expr pos:start="127:14" pos:end="127:17"><literal type="number" pos:start="127:14" pos:end="127:17">0x2c</literal></expr>:</case> <comment type="block" pos:start="127:20" pos:end="127:37">/* FCMGT (zero) */</comment>

            <expr_stmt pos:start="129:13" pos:end="129:44"><expr pos:start="129:13" pos:end="129:43"><name pos:start="129:13" pos:end="129:17">genfn</name> <operator pos:start="129:19" pos:end="129:19">=</operator> <name pos:start="129:21" pos:end="129:43">gen_helper_neon_cgt_f32</name></expr>;</expr_stmt>

            <break pos:start="131:13" pos:end="131:18">break;</break>

        <case pos:start="133:9" pos:end="133:18">case <expr pos:start="133:14" pos:end="133:17"><literal type="number" pos:start="133:14" pos:end="133:17">0x2d</literal></expr>:</case> <comment type="block" pos:start="133:20" pos:end="133:37">/* FCMEQ (zero) */</comment>

            <expr_stmt pos:start="135:13" pos:end="135:44"><expr pos:start="135:13" pos:end="135:43"><name pos:start="135:13" pos:end="135:17">genfn</name> <operator pos:start="135:19" pos:end="135:19">=</operator> <name pos:start="135:21" pos:end="135:43">gen_helper_neon_ceq_f32</name></expr>;</expr_stmt>

            <break pos:start="137:13" pos:end="137:18">break;</break>

        <case pos:start="139:9" pos:end="139:18">case <expr pos:start="139:14" pos:end="139:17"><literal type="number" pos:start="139:14" pos:end="139:17">0x6d</literal></expr>:</case> <comment type="block" pos:start="139:20" pos:end="139:37">/* FCMLE (zero) */</comment>

            <expr_stmt pos:start="141:13" pos:end="141:24"><expr pos:start="141:13" pos:end="141:23"><name pos:start="141:13" pos:end="141:16">swap</name> <operator pos:start="141:18" pos:end="141:18">=</operator> <name pos:start="141:20" pos:end="141:23">true</name></expr>;</expr_stmt>

            <comment type="block" pos:start="143:13" pos:end="143:30">/* fall through */</comment>

        <case pos:start="145:9" pos:end="145:18">case <expr pos:start="145:14" pos:end="145:17"><literal type="number" pos:start="145:14" pos:end="145:17">0x6c</literal></expr>:</case> <comment type="block" pos:start="145:20" pos:end="145:37">/* FCMGE (zero) */</comment>

            <expr_stmt pos:start="147:13" pos:end="147:44"><expr pos:start="147:13" pos:end="147:43"><name pos:start="147:13" pos:end="147:17">genfn</name> <operator pos:start="147:19" pos:end="147:19">=</operator> <name pos:start="147:21" pos:end="147:43">gen_helper_neon_cge_f32</name></expr>;</expr_stmt>

            <break pos:start="149:13" pos:end="149:18">break;</break>

        <default pos:start="151:9" pos:end="151:16">default:</default>

            <expr_stmt pos:start="153:13" pos:end="153:35"><expr pos:start="153:13" pos:end="153:34"><call pos:start="153:13" pos:end="153:34"><name pos:start="153:13" pos:end="153:32">g_assert_not_reached</name><argument_list pos:start="153:33" pos:end="153:34">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>



        <if_stmt pos:start="159:9" pos:end="167:9"><if pos:start="159:9" pos:end="163:9">if <condition pos:start="159:12" pos:end="159:22">(<expr pos:start="159:13" pos:end="159:21"><name pos:start="159:13" pos:end="159:21">is_scalar</name></expr>)</condition> <block pos:start="159:24" pos:end="163:9">{<block_content pos:start="161:13" pos:end="161:26">

            <expr_stmt pos:start="161:13" pos:end="161:26"><expr pos:start="161:13" pos:end="161:25"><name pos:start="161:13" pos:end="161:21">maxpasses</name> <operator pos:start="161:23" pos:end="161:23">=</operator> <literal type="number" pos:start="161:25" pos:end="161:25">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="163:11" pos:end="167:9">else <block pos:start="163:16" pos:end="167:9">{<block_content pos:start="165:13" pos:end="165:37">

            <expr_stmt pos:start="165:13" pos:end="165:37"><expr pos:start="165:13" pos:end="165:36"><name pos:start="165:13" pos:end="165:21">maxpasses</name> <operator pos:start="165:23" pos:end="165:23">=</operator> <ternary pos:start="165:25" pos:end="165:36"><condition pos:start="165:25" pos:end="165:30"><expr pos:start="165:25" pos:end="165:28"><name pos:start="165:25" pos:end="165:28">is_q</name></expr> ?</condition><then pos:start="165:32" pos:end="165:32"> <expr pos:start="165:32" pos:end="165:32"><literal type="number" pos:start="165:32" pos:end="165:32">4</literal></expr> </then><else pos:start="165:34" pos:end="165:36">: <expr pos:start="165:36" pos:end="165:36"><literal type="number" pos:start="165:36" pos:end="165:36">2</literal></expr></else></ternary></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <for pos:start="171:9" pos:end="195:9">for <control pos:start="171:13" pos:end="171:48">(<init pos:start="171:14" pos:end="171:22"><expr pos:start="171:14" pos:end="171:21"><name pos:start="171:14" pos:end="171:17">pass</name> <operator pos:start="171:19" pos:end="171:19">=</operator> <literal type="number" pos:start="171:21" pos:end="171:21">0</literal></expr>;</init> <condition pos:start="171:24" pos:end="171:40"><expr pos:start="171:24" pos:end="171:39"><name pos:start="171:24" pos:end="171:27">pass</name> <operator pos:start="171:29" pos:end="171:29">&lt;</operator> <name pos:start="171:31" pos:end="171:39">maxpasses</name></expr>;</condition> <incr pos:start="171:42" pos:end="171:47"><expr pos:start="171:42" pos:end="171:47"><name pos:start="171:42" pos:end="171:45">pass</name><operator pos:start="171:46" pos:end="171:47">++</operator></expr></incr>)</control> <block pos:start="171:50" pos:end="195:9">{<block_content pos:start="173:13" pos:end="193:13">

            <expr_stmt pos:start="173:13" pos:end="173:61"><expr pos:start="173:13" pos:end="173:60"><call pos:start="173:13" pos:end="173:60"><name pos:start="173:13" pos:end="173:32">read_vec_element_i32</name><argument_list pos:start="173:33" pos:end="173:60">(<argument pos:start="173:34" pos:end="173:34"><expr pos:start="173:34" pos:end="173:34"><name pos:start="173:34" pos:end="173:34">s</name></expr></argument>, <argument pos:start="173:37" pos:end="173:42"><expr pos:start="173:37" pos:end="173:42"><name pos:start="173:37" pos:end="173:42">tcg_op</name></expr></argument>, <argument pos:start="173:45" pos:end="173:46"><expr pos:start="173:45" pos:end="173:46"><name pos:start="173:45" pos:end="173:46">rn</name></expr></argument>, <argument pos:start="173:49" pos:end="173:52"><expr pos:start="173:49" pos:end="173:52"><name pos:start="173:49" pos:end="173:52">pass</name></expr></argument>, <argument pos:start="173:55" pos:end="173:59"><expr pos:start="173:55" pos:end="173:59"><name pos:start="173:55" pos:end="173:59">MO_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="175:13" pos:end="183:13"><if pos:start="175:13" pos:end="179:13">if <condition pos:start="175:16" pos:end="175:21">(<expr pos:start="175:17" pos:end="175:20"><name pos:start="175:17" pos:end="175:20">swap</name></expr>)</condition> <block pos:start="175:23" pos:end="179:13">{<block_content pos:start="177:17" pos:end="177:55">

                <expr_stmt pos:start="177:17" pos:end="177:55"><expr pos:start="177:17" pos:end="177:54"><call pos:start="177:17" pos:end="177:54"><name pos:start="177:17" pos:end="177:21">genfn</name><argument_list pos:start="177:22" pos:end="177:54">(<argument pos:start="177:23" pos:end="177:29"><expr pos:start="177:23" pos:end="177:29"><name pos:start="177:23" pos:end="177:29">tcg_res</name></expr></argument>, <argument pos:start="177:32" pos:end="177:39"><expr pos:start="177:32" pos:end="177:39"><name pos:start="177:32" pos:end="177:39">tcg_zero</name></expr></argument>, <argument pos:start="177:42" pos:end="177:47"><expr pos:start="177:42" pos:end="177:47"><name pos:start="177:42" pos:end="177:47">tcg_op</name></expr></argument>, <argument pos:start="177:50" pos:end="177:53"><expr pos:start="177:50" pos:end="177:53"><name pos:start="177:50" pos:end="177:53">fpst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="179:15" pos:end="183:13">else <block pos:start="179:20" pos:end="183:13">{<block_content pos:start="181:17" pos:end="181:55">

                <expr_stmt pos:start="181:17" pos:end="181:55"><expr pos:start="181:17" pos:end="181:54"><call pos:start="181:17" pos:end="181:54"><name pos:start="181:17" pos:end="181:21">genfn</name><argument_list pos:start="181:22" pos:end="181:54">(<argument pos:start="181:23" pos:end="181:29"><expr pos:start="181:23" pos:end="181:29"><name pos:start="181:23" pos:end="181:29">tcg_res</name></expr></argument>, <argument pos:start="181:32" pos:end="181:37"><expr pos:start="181:32" pos:end="181:37"><name pos:start="181:32" pos:end="181:37">tcg_op</name></expr></argument>, <argument pos:start="181:40" pos:end="181:47"><expr pos:start="181:40" pos:end="181:47"><name pos:start="181:40" pos:end="181:47">tcg_zero</name></expr></argument>, <argument pos:start="181:50" pos:end="181:53"><expr pos:start="181:50" pos:end="181:53"><name pos:start="181:50" pos:end="181:53">fpst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="185:13" pos:end="193:13"><if pos:start="185:13" pos:end="189:13">if <condition pos:start="185:16" pos:end="185:26">(<expr pos:start="185:17" pos:end="185:25"><name pos:start="185:17" pos:end="185:25">is_scalar</name></expr>)</condition> <block pos:start="185:28" pos:end="189:13">{<block_content pos:start="187:17" pos:end="187:46">

                <expr_stmt pos:start="187:17" pos:end="187:46"><expr pos:start="187:17" pos:end="187:45"><call pos:start="187:17" pos:end="187:45"><name pos:start="187:17" pos:end="187:29">write_fp_sreg</name><argument_list pos:start="187:30" pos:end="187:45">(<argument pos:start="187:31" pos:end="187:31"><expr pos:start="187:31" pos:end="187:31"><name pos:start="187:31" pos:end="187:31">s</name></expr></argument>, <argument pos:start="187:34" pos:end="187:35"><expr pos:start="187:34" pos:end="187:35"><name pos:start="187:34" pos:end="187:35">rd</name></expr></argument>, <argument pos:start="187:38" pos:end="187:44"><expr pos:start="187:38" pos:end="187:44"><name pos:start="187:38" pos:end="187:44">tcg_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="189:15" pos:end="193:13">else <block pos:start="189:20" pos:end="193:13">{<block_content pos:start="191:17" pos:end="191:67">

                <expr_stmt pos:start="191:17" pos:end="191:67"><expr pos:start="191:17" pos:end="191:66"><call pos:start="191:17" pos:end="191:66"><name pos:start="191:17" pos:end="191:37">write_vec_element_i32</name><argument_list pos:start="191:38" pos:end="191:66">(<argument pos:start="191:39" pos:end="191:39"><expr pos:start="191:39" pos:end="191:39"><name pos:start="191:39" pos:end="191:39">s</name></expr></argument>, <argument pos:start="191:42" pos:end="191:48"><expr pos:start="191:42" pos:end="191:48"><name pos:start="191:42" pos:end="191:48">tcg_res</name></expr></argument>, <argument pos:start="191:51" pos:end="191:52"><expr pos:start="191:51" pos:end="191:52"><name pos:start="191:51" pos:end="191:52">rd</name></expr></argument>, <argument pos:start="191:55" pos:end="191:58"><expr pos:start="191:55" pos:end="191:58"><name pos:start="191:55" pos:end="191:58">pass</name></expr></argument>, <argument pos:start="191:61" pos:end="191:65"><expr pos:start="191:61" pos:end="191:65"><name pos:start="191:61" pos:end="191:65">MO_32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="197:9" pos:end="197:35"><expr pos:start="197:9" pos:end="197:34"><call pos:start="197:9" pos:end="197:34"><name pos:start="197:9" pos:end="197:25">tcg_temp_free_i32</name><argument_list pos:start="197:26" pos:end="197:34">(<argument pos:start="197:27" pos:end="197:33"><expr pos:start="197:27" pos:end="197:33"><name pos:start="197:27" pos:end="197:33">tcg_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:36"><expr pos:start="199:9" pos:end="199:35"><call pos:start="199:9" pos:end="199:35"><name pos:start="199:9" pos:end="199:25">tcg_temp_free_i32</name><argument_list pos:start="199:26" pos:end="199:35">(<argument pos:start="199:27" pos:end="199:34"><expr pos:start="199:27" pos:end="199:34"><name pos:start="199:27" pos:end="199:34">tcg_zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="201:9" pos:end="201:34"><expr pos:start="201:9" pos:end="201:33"><call pos:start="201:9" pos:end="201:33"><name pos:start="201:9" pos:end="201:25">tcg_temp_free_i32</name><argument_list pos:start="201:26" pos:end="201:33">(<argument pos:start="201:27" pos:end="201:32"><expr pos:start="201:27" pos:end="201:32"><name pos:start="201:27" pos:end="201:32">tcg_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="203:9" pos:end="207:9"><if pos:start="203:9" pos:end="207:9">if <condition pos:start="203:12" pos:end="203:32">(<expr pos:start="203:13" pos:end="203:31"><operator pos:start="203:13" pos:end="203:13">!</operator><name pos:start="203:14" pos:end="203:17">is_q</name> <operator pos:start="203:19" pos:end="203:20">&amp;&amp;</operator> <operator pos:start="203:22" pos:end="203:22">!</operator><name pos:start="203:23" pos:end="203:31">is_scalar</name></expr>)</condition> <block pos:start="203:34" pos:end="207:9">{<block_content pos:start="205:13" pos:end="205:34">

            <expr_stmt pos:start="205:13" pos:end="205:34"><expr pos:start="205:13" pos:end="205:33"><call pos:start="205:13" pos:end="205:33"><name pos:start="205:13" pos:end="205:26">clear_vec_high</name><argument_list pos:start="205:27" pos:end="205:33">(<argument pos:start="205:28" pos:end="205:28"><expr pos:start="205:28" pos:end="205:28"><name pos:start="205:28" pos:end="205:28">s</name></expr></argument>, <argument pos:start="205:31" pos:end="205:32"><expr pos:start="205:31" pos:end="205:32"><name pos:start="205:31" pos:end="205:32">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="213:5" pos:end="213:28"><expr pos:start="213:5" pos:end="213:27"><call pos:start="213:5" pos:end="213:27"><name pos:start="213:5" pos:end="213:21">tcg_temp_free_ptr</name><argument_list pos:start="213:22" pos:end="213:27">(<argument pos:start="213:23" pos:end="213:26"><expr pos:start="213:23" pos:end="213:26"><name pos:start="213:23" pos:end="213:26">fpst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
