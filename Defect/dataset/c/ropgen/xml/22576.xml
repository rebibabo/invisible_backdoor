<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22576.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">load_module</name><parameter_list pos:start="1:24" pos:end="1:45">(<parameter pos:start="1:25" pos:end="1:44"><decl pos:start="1:25" pos:end="1:44"><type pos:start="1:25" pos:end="1:36"><specifier pos:start="1:25" pos:end="1:29">const</specifier> <name pos:start="1:31" pos:end="1:34">char</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:44">filename</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="41:1">{<block_content pos:start="5:5" pos:end="39:16">

    <decl_stmt pos:start="5:5" pos:end="5:14"><decl pos:start="5:5" pos:end="5:13"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">void</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:13">dll</name></decl>;</decl_stmt>

    <function_decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">void</name></type> (<modifier pos:start="7:11" pos:end="7:11">*</modifier><name pos:start="7:12" pos:end="7:20">init_func</name>)<parameter_list pos:start="7:22" pos:end="7:27">(<parameter pos:start="7:23" pos:end="7:26"><decl pos:start="7:23" pos:end="7:26"><type pos:start="7:23" pos:end="7:26"><name pos:start="7:23" pos:end="7:26">void</name></type></decl></parameter>)</parameter_list>;</function_decl>

    <expr_stmt pos:start="9:5" pos:end="9:37"><expr pos:start="9:5" pos:end="9:36"><name pos:start="9:5" pos:end="9:7">dll</name> <operator pos:start="9:9" pos:end="9:9">=</operator> <call pos:start="9:11" pos:end="9:36"><name pos:start="9:11" pos:end="9:16">dlopen</name><argument_list pos:start="9:17" pos:end="9:36">(<argument pos:start="9:18" pos:end="9:25"><expr pos:start="9:18" pos:end="9:25"><name pos:start="9:18" pos:end="9:25">filename</name></expr></argument>, <argument pos:start="9:28" pos:end="9:35"><expr pos:start="9:28" pos:end="9:35"><name pos:start="9:28" pos:end="9:35">RTLD_NOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="11:5" pos:end="18:5"><if pos:start="11:5" pos:end="18:5">if <condition pos:start="11:8" pos:end="11:13">(<expr pos:start="11:9" pos:end="11:12"><operator pos:start="11:9" pos:end="11:9">!</operator><name pos:start="11:10" pos:end="11:12">dll</name></expr>)</condition> <block pos:start="11:15" pos:end="18:5">{<block_content pos:start="13:9" pos:end="15:37">

        <expr_stmt pos:start="13:9" pos:end="15:37"><expr pos:start="13:9" pos:end="15:36"><call pos:start="13:9" pos:end="15:36"><name pos:start="13:9" pos:end="13:15">fprintf</name><argument_list pos:start="13:16" pos:end="15:36">(<argument pos:start="13:17" pos:end="13:22"><expr pos:start="13:17" pos:end="13:22"><name pos:start="13:17" pos:end="13:22">stderr</name></expr></argument>, <argument pos:start="13:25" pos:end="13:59"><expr pos:start="13:25" pos:end="13:59"><literal type="string" pos:start="13:25" pos:end="13:59">"Could not load module '%s' - %s\n"</literal></expr></argument>,

                <argument pos:start="15:17" pos:end="15:24"><expr pos:start="15:17" pos:end="15:24"><name pos:start="15:17" pos:end="15:24">filename</name></expr></argument>, <argument pos:start="15:27" pos:end="15:35"><expr pos:start="15:27" pos:end="15:35"><call pos:start="15:27" pos:end="15:35"><name pos:start="15:27" pos:end="15:33">dlerror</name><argument_list pos:start="15:34" pos:end="15:35">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="22:5" pos:end="22:51"><expr pos:start="22:5" pos:end="22:50"><name pos:start="22:5" pos:end="22:13">init_func</name> <operator pos:start="22:15" pos:end="22:15">=</operator> <call pos:start="22:17" pos:end="22:50"><name pos:start="22:17" pos:end="22:21">dlsym</name><argument_list pos:start="22:22" pos:end="22:50">(<argument pos:start="22:23" pos:end="22:25"><expr pos:start="22:23" pos:end="22:25"><name pos:start="22:23" pos:end="22:25">dll</name></expr></argument>, <argument pos:start="22:28" pos:end="22:49"><expr pos:start="22:28" pos:end="22:49"><literal type="string" pos:start="22:28" pos:end="22:49">"ffserver_module_init"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="24:5" pos:end="35:5"><if pos:start="24:5" pos:end="35:5">if <condition pos:start="24:8" pos:end="24:19">(<expr pos:start="24:9" pos:end="24:18"><operator pos:start="24:9" pos:end="24:9">!</operator><name pos:start="24:10" pos:end="24:18">init_func</name></expr>)</condition> <block pos:start="24:21" pos:end="35:5">{<block_content pos:start="26:9" pos:end="32:21">

        <expr_stmt pos:start="26:9" pos:end="30:26"><expr pos:start="26:9" pos:end="30:25"><call pos:start="26:9" pos:end="30:25"><name pos:start="26:9" pos:end="26:15">fprintf</name><argument_list pos:start="26:16" pos:end="30:25">(<argument pos:start="26:17" pos:end="26:22"><expr pos:start="26:17" pos:end="26:22"><name pos:start="26:17" pos:end="26:22">stderr</name></expr></argument>,

                <argument pos:start="28:17" pos:end="28:72"><expr pos:start="28:17" pos:end="28:72"><literal type="string" pos:start="28:17" pos:end="28:72">"%s: init function 'ffserver_module_init()' not found\n"</literal></expr></argument>,

                <argument pos:start="30:17" pos:end="30:24"><expr pos:start="30:17" pos:end="30:24"><name pos:start="30:17" pos:end="30:24">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="32:9" pos:end="32:21"><expr pos:start="32:9" pos:end="32:20"><call pos:start="32:9" pos:end="32:20"><name pos:start="32:9" pos:end="32:15">dlclose</name><argument_list pos:start="32:16" pos:end="32:20">(<argument pos:start="32:17" pos:end="32:19"><expr pos:start="32:17" pos:end="32:19"><name pos:start="32:17" pos:end="32:19">dll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:16"><expr pos:start="39:5" pos:end="39:15"><call pos:start="39:5" pos:end="39:15"><name pos:start="39:5" pos:end="39:13">init_func</name><argument_list pos:start="39:14" pos:end="39:15">()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function></unit>
