<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15071.c" pos:tabs="8"><function pos:start="1:1" pos:end="129:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">check_oflag_copied</name><parameter_list pos:start="1:30" pos:end="1:73">(<parameter pos:start="1:31" pos:end="1:50"><decl pos:start="1:31" pos:end="1:50"><type pos:start="1:31" pos:end="1:50"><name pos:start="1:31" pos:end="1:46">BlockDriverState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:50">bs</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:72"><decl pos:start="1:53" pos:end="1:72"><type pos:start="1:53" pos:end="1:72"><name pos:start="1:53" pos:end="1:67">BdrvCheckResult</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:72">res</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="129:1">{<block_content pos:start="5:5" pos:end="127:15">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">BDRVQcowState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">s</name> <init pos:start="5:22" pos:end="5:33">= <expr pos:start="5:24" pos:end="5:33"><name pos:start="5:24" pos:end="5:33"><name pos:start="5:24" pos:end="5:25">bs</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:62"><decl pos:start="7:5" pos:end="7:61"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">uint64_t</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:22">l2_table</name> <init pos:start="7:24" pos:end="7:61">= <expr pos:start="7:26" pos:end="7:61"><call pos:start="7:26" pos:end="7:61"><name pos:start="7:26" pos:end="7:40">qemu_blockalign</name><argument_list pos:start="7:41" pos:end="7:61">(<argument pos:start="7:42" pos:end="7:43"><expr pos:start="7:42" pos:end="7:43"><name pos:start="7:42" pos:end="7:43">bs</name></expr></argument>, <argument pos:start="7:46" pos:end="7:60"><expr pos:start="7:46" pos:end="7:60"><name pos:start="7:46" pos:end="7:60"><name pos:start="7:46" pos:end="7:46">s</name><operator pos:start="7:47" pos:end="7:48">-&gt;</operator><name pos:start="7:49" pos:end="7:60">cluster_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">refcount</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:13"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>, <decl pos:start="13:12" pos:end="13:12"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:12">j</name></decl>;</decl_stmt>



    <for pos:start="17:5" pos:end="115:5">for <control pos:start="17:9" pos:end="17:36">(<init pos:start="17:10" pos:end="17:15"><expr pos:start="17:10" pos:end="17:14"><name pos:start="17:10" pos:end="17:10">i</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <literal type="number" pos:start="17:14" pos:end="17:14">0</literal></expr>;</init> <condition pos:start="17:17" pos:end="17:31"><expr pos:start="17:17" pos:end="17:30"><name pos:start="17:17" pos:end="17:17">i</name> <operator pos:start="17:19" pos:end="17:19">&lt;</operator> <name pos:start="17:21" pos:end="17:30"><name pos:start="17:21" pos:end="17:21">s</name><operator pos:start="17:22" pos:end="17:23">-&gt;</operator><name pos:start="17:24" pos:end="17:30">l1_size</name></name></expr>;</condition> <incr pos:start="17:33" pos:end="17:35"><expr pos:start="17:33" pos:end="17:35"><name pos:start="17:33" pos:end="17:33">i</name><operator pos:start="17:34" pos:end="17:35">++</operator></expr></incr>)</control> <block pos:start="17:38" pos:end="115:5">{<block_content pos:start="19:9" pos:end="113:9">

        <decl_stmt pos:start="19:9" pos:end="19:43"><decl pos:start="19:9" pos:end="19:42"><type pos:start="19:9" pos:end="19:16"><name pos:start="19:9" pos:end="19:16">uint64_t</name></type> <name pos:start="19:18" pos:end="19:25">l1_entry</name> <init pos:start="19:27" pos:end="19:42">= <expr pos:start="19:29" pos:end="19:42"><name pos:start="19:29" pos:end="19:42"><name pos:start="19:29" pos:end="19:29">s</name><operator pos:start="19:30" pos:end="19:31">-&gt;</operator><name pos:start="19:32" pos:end="19:39">l1_table</name><index pos:start="19:40" pos:end="19:42">[<expr pos:start="19:41" pos:end="19:41"><name pos:start="19:41" pos:end="19:41">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:56"><decl pos:start="21:9" pos:end="21:55"><type pos:start="21:9" pos:end="21:16"><name pos:start="21:9" pos:end="21:16">uint64_t</name></type> <name pos:start="21:18" pos:end="21:26">l2_offset</name> <init pos:start="21:28" pos:end="21:55">= <expr pos:start="21:30" pos:end="21:55"><name pos:start="21:30" pos:end="21:37">l1_entry</name> <operator pos:start="21:39" pos:end="21:39">&amp;</operator> <name pos:start="21:41" pos:end="21:55">L1E_OFFSET_MASK</name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="25:9" pos:end="29:9"><if pos:start="25:9" pos:end="29:9">if <condition pos:start="25:12" pos:end="25:23">(<expr pos:start="25:13" pos:end="25:22"><operator pos:start="25:13" pos:end="25:13">!</operator><name pos:start="25:14" pos:end="25:22">l2_offset</name></expr>)</condition> <block pos:start="25:25" pos:end="29:9">{<block_content pos:start="27:13" pos:end="27:21">

            <continue pos:start="27:13" pos:end="27:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="33:9" pos:end="33:66"><expr pos:start="33:9" pos:end="33:65"><name pos:start="33:9" pos:end="33:16">refcount</name> <operator pos:start="33:18" pos:end="33:18">=</operator> <call pos:start="33:20" pos:end="33:65"><name pos:start="33:20" pos:end="33:31">get_refcount</name><argument_list pos:start="33:32" pos:end="33:65">(<argument pos:start="33:33" pos:end="33:34"><expr pos:start="33:33" pos:end="33:34"><name pos:start="33:33" pos:end="33:34">bs</name></expr></argument>, <argument pos:start="33:37" pos:end="33:64"><expr pos:start="33:37" pos:end="33:64"><name pos:start="33:37" pos:end="33:45">l2_offset</name> <operator pos:start="33:47" pos:end="33:48">&gt;&gt;</operator> <name pos:start="33:50" pos:end="33:64"><name pos:start="33:50" pos:end="33:50">s</name><operator pos:start="33:51" pos:end="33:52">-&gt;</operator><name pos:start="33:53" pos:end="33:64">cluster_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="35:9" pos:end="41:9"><if pos:start="35:9" pos:end="41:9">if <condition pos:start="35:12" pos:end="35:25">(<expr pos:start="35:13" pos:end="35:24"><name pos:start="35:13" pos:end="35:20">refcount</name> <operator pos:start="35:22" pos:end="35:22">&lt;</operator> <literal type="number" pos:start="35:24" pos:end="35:24">0</literal></expr>)</condition> <block pos:start="35:27" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:21">

            <comment type="block" pos:start="37:13" pos:end="37:64">/* don't print message nor increment check_errors */</comment>

            <continue pos:start="39:13" pos:end="39:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="43:9" pos:end="53:9"><if pos:start="43:9" pos:end="53:9">if <condition pos:start="43:12" pos:end="43:69">(<expr pos:start="43:13" pos:end="43:68"><operator pos:start="43:13" pos:end="43:13">(</operator><name pos:start="43:14" pos:end="43:21">refcount</name> <operator pos:start="43:23" pos:end="43:24">==</operator> <literal type="number" pos:start="43:26" pos:end="43:26">1</literal><operator pos:start="43:27" pos:end="43:27">)</operator> <operator pos:start="43:29" pos:end="43:30">!=</operator> <operator pos:start="43:32" pos:end="43:32">(</operator><operator pos:start="43:33" pos:end="43:33">(</operator><name pos:start="43:34" pos:end="43:41">l1_entry</name> <operator pos:start="43:43" pos:end="43:43">&amp;</operator> <name pos:start="43:45" pos:end="43:61">QCOW_OFLAG_COPIED</name><operator pos:start="43:62" pos:end="43:62">)</operator> <operator pos:start="43:64" pos:end="43:65">!=</operator> <literal type="number" pos:start="43:67" pos:end="43:67">0</literal><operator pos:start="43:68" pos:end="43:68">)</operator></expr>)</condition> <block pos:start="43:71" pos:end="53:9">{<block_content pos:start="45:13" pos:end="51:31">

            <expr_stmt pos:start="45:13" pos:end="49:43"><expr pos:start="45:13" pos:end="49:42"><call pos:start="45:13" pos:end="49:42"><name pos:start="45:13" pos:end="45:19">fprintf</name><argument_list pos:start="45:20" pos:end="49:42">(<argument pos:start="45:21" pos:end="45:26"><expr pos:start="45:21" pos:end="45:26"><name pos:start="45:21" pos:end="45:26">stderr</name></expr></argument>, <argument pos:start="45:29" pos:end="47:56"><expr pos:start="45:29" pos:end="47:56"><literal type="string" pos:start="45:29" pos:end="45:73">"ERROR OFLAG_COPIED L2 cluster: l1_index=%d "</literal>

                    <literal type="string" pos:start="47:21" pos:end="47:32">"l1_entry=%"</literal> <name pos:start="47:34" pos:end="47:39">PRIx64</name> <literal type="string" pos:start="47:41" pos:end="47:56">" refcount=%d\n"</literal></expr></argument>,

                    <argument pos:start="49:21" pos:end="49:21"><expr pos:start="49:21" pos:end="49:21"><name pos:start="49:21" pos:end="49:21">i</name></expr></argument>, <argument pos:start="49:24" pos:end="49:31"><expr pos:start="49:24" pos:end="49:31"><name pos:start="49:24" pos:end="49:31">l1_entry</name></expr></argument>, <argument pos:start="49:34" pos:end="49:41"><expr pos:start="49:34" pos:end="49:41"><name pos:start="49:34" pos:end="49:41">refcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:31"><expr pos:start="51:13" pos:end="51:30"><name pos:start="51:13" pos:end="51:28"><name pos:start="51:13" pos:end="51:15">res</name><operator pos:start="51:16" pos:end="51:17">-&gt;</operator><name pos:start="51:18" pos:end="51:28">corruptions</name></name><operator pos:start="51:29" pos:end="51:30">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="57:9" pos:end="59:56"><expr pos:start="57:9" pos:end="59:55"><name pos:start="57:9" pos:end="57:11">ret</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <call pos:start="57:15" pos:end="59:55"><name pos:start="57:15" pos:end="57:24">bdrv_pread</name><argument_list pos:start="57:25" pos:end="59:55">(<argument pos:start="57:26" pos:end="57:33"><expr pos:start="57:26" pos:end="57:33"><name pos:start="57:26" pos:end="57:33"><name pos:start="57:26" pos:end="57:27">bs</name><operator pos:start="57:28" pos:end="57:29">-&gt;</operator><name pos:start="57:30" pos:end="57:33">file</name></name></expr></argument>, <argument pos:start="57:36" pos:end="57:44"><expr pos:start="57:36" pos:end="57:44"><name pos:start="57:36" pos:end="57:44">l2_offset</name></expr></argument>, <argument pos:start="57:47" pos:end="57:54"><expr pos:start="57:47" pos:end="57:54"><name pos:start="57:47" pos:end="57:54">l2_table</name></expr></argument>,

                         <argument pos:start="59:26" pos:end="59:54"><expr pos:start="59:26" pos:end="59:54"><name pos:start="59:26" pos:end="59:35"><name pos:start="59:26" pos:end="59:26">s</name><operator pos:start="59:27" pos:end="59:28">-&gt;</operator><name pos:start="59:29" pos:end="59:35">l2_size</name></name> <operator pos:start="59:37" pos:end="59:37">*</operator> <sizeof pos:start="59:39" pos:end="59:54">sizeof<argument_list pos:start="59:45" pos:end="59:54">(<argument pos:start="59:46" pos:end="59:53"><expr pos:start="59:46" pos:end="59:53"><name pos:start="59:46" pos:end="59:53">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="71:9"><if pos:start="61:9" pos:end="71:9">if <condition pos:start="61:12" pos:end="61:20">(<expr pos:start="61:13" pos:end="61:19"><name pos:start="61:13" pos:end="61:15">ret</name> <operator pos:start="61:17" pos:end="61:17">&lt;</operator> <literal type="number" pos:start="61:19" pos:end="61:19">0</literal></expr>)</condition> <block pos:start="61:22" pos:end="71:9">{<block_content pos:start="63:13" pos:end="69:22">

            <expr_stmt pos:start="63:13" pos:end="65:36"><expr pos:start="63:13" pos:end="65:35"><call pos:start="63:13" pos:end="65:35"><name pos:start="63:13" pos:end="63:19">fprintf</name><argument_list pos:start="63:20" pos:end="65:35">(<argument pos:start="63:21" pos:end="63:26"><expr pos:start="63:21" pos:end="63:26"><name pos:start="63:21" pos:end="63:26">stderr</name></expr></argument>, <argument pos:start="63:29" pos:end="63:66"><expr pos:start="63:29" pos:end="63:66"><literal type="string" pos:start="63:29" pos:end="63:66">"ERROR: Could not read L2 table: %s\n"</literal></expr></argument>,

                    <argument pos:start="65:21" pos:end="65:34"><expr pos:start="65:21" pos:end="65:34"><call pos:start="65:21" pos:end="65:34"><name pos:start="65:21" pos:end="65:28">strerror</name><argument_list pos:start="65:29" pos:end="65:34">(<argument pos:start="65:30" pos:end="65:33"><expr pos:start="65:30" pos:end="65:33"><operator pos:start="65:30" pos:end="65:30">-</operator><name pos:start="65:31" pos:end="65:33">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:32"><expr pos:start="67:13" pos:end="67:31"><name pos:start="67:13" pos:end="67:29"><name pos:start="67:13" pos:end="67:15">res</name><operator pos:start="67:16" pos:end="67:17">-&gt;</operator><name pos:start="67:18" pos:end="67:29">check_errors</name></name><operator pos:start="67:30" pos:end="67:31">++</operator></expr>;</expr_stmt>

            <goto pos:start="69:13" pos:end="69:22">goto <name pos:start="69:18" pos:end="69:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <for pos:start="75:9" pos:end="113:9">for <control pos:start="75:13" pos:end="75:40">(<init pos:start="75:14" pos:end="75:19"><expr pos:start="75:14" pos:end="75:18"><name pos:start="75:14" pos:end="75:14">j</name> <operator pos:start="75:16" pos:end="75:16">=</operator> <literal type="number" pos:start="75:18" pos:end="75:18">0</literal></expr>;</init> <condition pos:start="75:21" pos:end="75:35"><expr pos:start="75:21" pos:end="75:34"><name pos:start="75:21" pos:end="75:21">j</name> <operator pos:start="75:23" pos:end="75:23">&lt;</operator> <name pos:start="75:25" pos:end="75:34"><name pos:start="75:25" pos:end="75:25">s</name><operator pos:start="75:26" pos:end="75:27">-&gt;</operator><name pos:start="75:28" pos:end="75:34">l2_size</name></name></expr>;</condition> <incr pos:start="75:37" pos:end="75:39"><expr pos:start="75:37" pos:end="75:39"><name pos:start="75:37" pos:end="75:37">j</name><operator pos:start="75:38" pos:end="75:39">++</operator></expr></incr>)</control> <block pos:start="75:42" pos:end="113:9">{<block_content pos:start="77:13" pos:end="111:13">

            <decl_stmt pos:start="77:13" pos:end="77:57"><decl pos:start="77:13" pos:end="77:56"><type pos:start="77:13" pos:end="77:20"><name pos:start="77:13" pos:end="77:20">uint64_t</name></type> <name pos:start="77:22" pos:end="77:29">l2_entry</name> <init pos:start="77:31" pos:end="77:56">= <expr pos:start="77:33" pos:end="77:56"><call pos:start="77:33" pos:end="77:56"><name pos:start="77:33" pos:end="77:43">be64_to_cpu</name><argument_list pos:start="77:44" pos:end="77:56">(<argument pos:start="77:45" pos:end="77:55"><expr pos:start="77:45" pos:end="77:55"><name pos:start="77:45" pos:end="77:55"><name pos:start="77:45" pos:end="77:52">l2_table</name><index pos:start="77:53" pos:end="77:55">[<expr pos:start="77:54" pos:end="77:54"><name pos:start="77:54" pos:end="77:54">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="79:13" pos:end="79:62"><decl pos:start="79:13" pos:end="79:61"><type pos:start="79:13" pos:end="79:20"><name pos:start="79:13" pos:end="79:20">uint64_t</name></type> <name pos:start="79:22" pos:end="79:32">data_offset</name> <init pos:start="79:34" pos:end="79:61">= <expr pos:start="79:36" pos:end="79:61"><name pos:start="79:36" pos:end="79:43">l2_entry</name> <operator pos:start="79:45" pos:end="79:45">&amp;</operator> <name pos:start="79:47" pos:end="79:61">L2E_OFFSET_MASK</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="81:13" pos:end="81:64"><decl pos:start="81:13" pos:end="81:63"><type pos:start="81:13" pos:end="81:15"><name pos:start="81:13" pos:end="81:15">int</name></type> <name pos:start="81:17" pos:end="81:28">cluster_type</name> <init pos:start="81:30" pos:end="81:63">= <expr pos:start="81:32" pos:end="81:63"><call pos:start="81:32" pos:end="81:63"><name pos:start="81:32" pos:end="81:53">qcow2_get_cluster_type</name><argument_list pos:start="81:54" pos:end="81:63">(<argument pos:start="81:55" pos:end="81:62"><expr pos:start="81:55" pos:end="81:62"><name pos:start="81:55" pos:end="81:62">l2_entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="85:13" pos:end="111:13"><if pos:start="85:13" pos:end="111:13">if <condition pos:start="85:16" pos:end="87:77">(<expr pos:start="85:17" pos:end="87:76"><operator pos:start="85:17" pos:end="85:17">(</operator><name pos:start="85:18" pos:end="85:29">cluster_type</name> <operator pos:start="85:31" pos:end="85:32">==</operator> <name pos:start="85:34" pos:end="85:53">QCOW2_CLUSTER_NORMAL</name><operator pos:start="85:54" pos:end="85:54">)</operator> <operator pos:start="85:56" pos:end="85:57">||</operator>

                <operator pos:start="87:17" pos:end="87:17">(</operator><operator pos:start="87:18" pos:end="87:18">(</operator><name pos:start="87:19" pos:end="87:30">cluster_type</name> <operator pos:start="87:32" pos:end="87:33">==</operator> <name pos:start="87:35" pos:end="87:52">QCOW2_CLUSTER_ZERO</name><operator pos:start="87:53" pos:end="87:53">)</operator> <operator pos:start="87:55" pos:end="87:56">&amp;&amp;</operator> <operator pos:start="87:58" pos:end="87:58">(</operator><name pos:start="87:59" pos:end="87:69">data_offset</name> <operator pos:start="87:71" pos:end="87:72">!=</operator> <literal type="number" pos:start="87:74" pos:end="87:74">0</literal><operator pos:start="87:75" pos:end="87:75">)</operator><operator pos:start="87:76" pos:end="87:76">)</operator></expr>)</condition> <block pos:start="87:79" pos:end="111:13">{<block_content pos:start="89:17" pos:end="109:17">

                <expr_stmt pos:start="89:17" pos:end="89:76"><expr pos:start="89:17" pos:end="89:75"><name pos:start="89:17" pos:end="89:24">refcount</name> <operator pos:start="89:26" pos:end="89:26">=</operator> <call pos:start="89:28" pos:end="89:75"><name pos:start="89:28" pos:end="89:39">get_refcount</name><argument_list pos:start="89:40" pos:end="89:75">(<argument pos:start="89:41" pos:end="89:42"><expr pos:start="89:41" pos:end="89:42"><name pos:start="89:41" pos:end="89:42">bs</name></expr></argument>, <argument pos:start="89:45" pos:end="89:74"><expr pos:start="89:45" pos:end="89:74"><name pos:start="89:45" pos:end="89:55">data_offset</name> <operator pos:start="89:57" pos:end="89:58">&gt;&gt;</operator> <name pos:start="89:60" pos:end="89:74"><name pos:start="89:60" pos:end="89:60">s</name><operator pos:start="89:61" pos:end="89:62">-&gt;</operator><name pos:start="89:63" pos:end="89:74">cluster_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="91:17" pos:end="97:17"><if pos:start="91:17" pos:end="97:17">if <condition pos:start="91:20" pos:end="91:33">(<expr pos:start="91:21" pos:end="91:32"><name pos:start="91:21" pos:end="91:28">refcount</name> <operator pos:start="91:30" pos:end="91:30">&lt;</operator> <literal type="number" pos:start="91:32" pos:end="91:32">0</literal></expr>)</condition> <block pos:start="91:35" pos:end="97:17">{<block_content pos:start="95:21" pos:end="95:29">

                    <comment type="block" pos:start="93:21" pos:end="93:72">/* don't print message nor increment check_errors */</comment>

                    <continue pos:start="95:21" pos:end="95:29">continue;</continue>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="99:17" pos:end="109:17"><if pos:start="99:17" pos:end="109:17">if <condition pos:start="99:20" pos:end="99:77">(<expr pos:start="99:21" pos:end="99:76"><operator pos:start="99:21" pos:end="99:21">(</operator><name pos:start="99:22" pos:end="99:29">refcount</name> <operator pos:start="99:31" pos:end="99:32">==</operator> <literal type="number" pos:start="99:34" pos:end="99:34">1</literal><operator pos:start="99:35" pos:end="99:35">)</operator> <operator pos:start="99:37" pos:end="99:38">!=</operator> <operator pos:start="99:40" pos:end="99:40">(</operator><operator pos:start="99:41" pos:end="99:41">(</operator><name pos:start="99:42" pos:end="99:49">l2_entry</name> <operator pos:start="99:51" pos:end="99:51">&amp;</operator> <name pos:start="99:53" pos:end="99:69">QCOW_OFLAG_COPIED</name><operator pos:start="99:70" pos:end="99:70">)</operator> <operator pos:start="99:72" pos:end="99:73">!=</operator> <literal type="number" pos:start="99:75" pos:end="99:75">0</literal><operator pos:start="99:76" pos:end="99:76">)</operator></expr>)</condition> <block pos:start="99:79" pos:end="109:17">{<block_content pos:start="101:21" pos:end="107:39">

                    <expr_stmt pos:start="101:21" pos:end="105:48"><expr pos:start="101:21" pos:end="105:47"><call pos:start="101:21" pos:end="105:47"><name pos:start="101:21" pos:end="101:27">fprintf</name><argument_list pos:start="101:28" pos:end="105:47">(<argument pos:start="101:29" pos:end="101:34"><expr pos:start="101:29" pos:end="101:34"><name pos:start="101:29" pos:end="101:34">stderr</name></expr></argument>, <argument pos:start="101:37" pos:end="103:64"><expr pos:start="101:37" pos:end="103:64"><literal type="string" pos:start="101:37" pos:end="101:71">"ERROR OFLAG_COPIED data cluster: "</literal>

                            <literal type="string" pos:start="103:29" pos:end="103:40">"l2_entry=%"</literal> <name pos:start="103:42" pos:end="103:47">PRIx64</name> <literal type="string" pos:start="103:49" pos:end="103:64">" refcount=%d\n"</literal></expr></argument>,

                            <argument pos:start="105:29" pos:end="105:36"><expr pos:start="105:29" pos:end="105:36"><name pos:start="105:29" pos:end="105:36">l2_entry</name></expr></argument>, <argument pos:start="105:39" pos:end="105:46"><expr pos:start="105:39" pos:end="105:46"><name pos:start="105:39" pos:end="105:46">refcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="107:21" pos:end="107:39"><expr pos:start="107:21" pos:end="107:38"><name pos:start="107:21" pos:end="107:36"><name pos:start="107:21" pos:end="107:23">res</name><operator pos:start="107:24" pos:end="107:25">-&gt;</operator><name pos:start="107:26" pos:end="107:36">corruptions</name></name><operator pos:start="107:37" pos:end="107:38">++</operator></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <expr_stmt pos:start="119:5" pos:end="119:12"><expr pos:start="119:5" pos:end="119:11"><name pos:start="119:5" pos:end="119:7">ret</name> <operator pos:start="119:9" pos:end="119:9">=</operator> <literal type="number" pos:start="119:11" pos:end="119:11">0</literal></expr>;</expr_stmt>



<label pos:start="123:1" pos:end="123:5"><name pos:start="123:1" pos:end="123:4">fail</name>:</label>

    <expr_stmt pos:start="125:5" pos:end="125:25"><expr pos:start="125:5" pos:end="125:24"><call pos:start="125:5" pos:end="125:24"><name pos:start="125:5" pos:end="125:14">qemu_vfree</name><argument_list pos:start="125:15" pos:end="125:24">(<argument pos:start="125:16" pos:end="125:23"><expr pos:start="125:16" pos:end="125:23"><name pos:start="125:16" pos:end="125:23">l2_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="127:5" pos:end="127:15">return <expr pos:start="127:12" pos:end="127:14"><name pos:start="127:12" pos:end="127:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
