<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7445.c" pos:tabs="8"><function pos:start="1:1" pos:end="39:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:31">kvm_remove_all_breakpoints</name><parameter_list pos:start="1:32" pos:end="1:54">(<parameter pos:start="1:33" pos:end="1:53"><decl pos:start="1:33" pos:end="1:53"><type pos:start="1:33" pos:end="1:42"><name pos:start="1:33" pos:end="1:40">CPUState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:53">current_env</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="39:1">{<block_content pos:start="5:5" pos:end="37:39">

    <decl_stmt pos:start="5:5" pos:end="5:40"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:30"><name pos:start="5:5" pos:end="5:28"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:28">kvm_sw_breakpoint</name></name> <modifier pos:start="5:30" pos:end="5:30">*</modifier></type><name pos:start="5:31" pos:end="5:32">bp</name></decl>, <decl pos:start="5:35" pos:end="5:39"><type ref="prev" pos:start="5:5" pos:end="5:30"><modifier pos:start="5:35" pos:end="5:35">*</modifier></type><name pos:start="5:36" pos:end="5:39">next</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">KVMState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:15">s</name> <init pos:start="7:17" pos:end="7:40">= <expr pos:start="7:19" pos:end="7:40"><name pos:start="7:19" pos:end="7:40"><name pos:start="7:19" pos:end="7:29">current_env</name><operator pos:start="7:30" pos:end="7:31">-&gt;</operator><name pos:start="7:32" pos:end="7:40">kvm_state</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">CPUState</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:17">env</name></decl>;</decl_stmt>



    <macro pos:start="13:5" pos:end="13:64"><name pos:start="13:5" pos:end="13:23">QTAILQ_FOREACH_SAFE</name><argument_list pos:start="13:24" pos:end="13:64">(<argument pos:start="13:25" pos:end="13:26">bp</argument>, <argument pos:start="13:29" pos:end="13:50">&amp;s-&gt;kvm_sw_breakpoints</argument>, <argument pos:start="13:53" pos:end="13:57">entry</argument>, <argument pos:start="13:60" pos:end="13:63">next</argument>)</argument_list></macro> <block pos:start="13:66" pos:end="29:5">{<block_content pos:start="15:9" pos:end="27:9">

        <if_stmt pos:start="15:9" pos:end="27:9"><if pos:start="15:9" pos:end="27:9">if <condition pos:start="15:12" pos:end="15:64">(<expr pos:start="15:13" pos:end="15:63"><call pos:start="15:13" pos:end="15:58"><name pos:start="15:13" pos:end="15:41">kvm_arch_remove_sw_breakpoint</name><argument_list pos:start="15:42" pos:end="15:58">(<argument pos:start="15:43" pos:end="15:53"><expr pos:start="15:43" pos:end="15:53"><name pos:start="15:43" pos:end="15:53">current_env</name></expr></argument>, <argument pos:start="15:56" pos:end="15:57"><expr pos:start="15:56" pos:end="15:57"><name pos:start="15:56" pos:end="15:57">bp</name></expr></argument>)</argument_list></call> <operator pos:start="15:60" pos:end="15:61">!=</operator> <literal type="number" pos:start="15:63" pos:end="15:63">0</literal></expr>)</condition> <block pos:start="15:66" pos:end="27:9">{<block_content pos:start="19:13" pos:end="25:13">

            <comment type="block" pos:start="17:13" pos:end="17:78">/* Try harder to find a CPU that currently sees the breakpoint. */</comment>

            <for pos:start="19:13" pos:end="25:13">for <control pos:start="19:17" pos:end="19:67">(<init pos:start="19:18" pos:end="19:33"><expr pos:start="19:18" pos:end="19:32"><name pos:start="19:18" pos:end="19:20">env</name> <operator pos:start="19:22" pos:end="19:22">=</operator> <name pos:start="19:24" pos:end="19:32">first_cpu</name></expr>;</init> <condition pos:start="19:35" pos:end="19:46"><expr pos:start="19:35" pos:end="19:45"><name pos:start="19:35" pos:end="19:37">env</name> <operator pos:start="19:39" pos:end="19:40">!=</operator> <name pos:start="19:42" pos:end="19:45">NULL</name></expr>;</condition> <incr pos:start="19:48" pos:end="19:66"><expr pos:start="19:48" pos:end="19:66"><name pos:start="19:48" pos:end="19:50">env</name> <operator pos:start="19:52" pos:end="19:52">=</operator> <name pos:start="19:54" pos:end="19:66"><name pos:start="19:54" pos:end="19:56">env</name><operator pos:start="19:57" pos:end="19:58">-&gt;</operator><name pos:start="19:59" pos:end="19:66">next_cpu</name></name></expr></incr>)</control> <block pos:start="19:69" pos:end="25:13">{<block_content pos:start="21:17" pos:end="23:26">

                <if_stmt pos:start="21:17" pos:end="23:26"><if pos:start="21:17" pos:end="23:26">if <condition pos:start="21:20" pos:end="21:64">(<expr pos:start="21:21" pos:end="21:63"><call pos:start="21:21" pos:end="21:58"><name pos:start="21:21" pos:end="21:49">kvm_arch_remove_sw_breakpoint</name><argument_list pos:start="21:50" pos:end="21:58">(<argument pos:start="21:51" pos:end="21:53"><expr pos:start="21:51" pos:end="21:53"><name pos:start="21:51" pos:end="21:53">env</name></expr></argument>, <argument pos:start="21:56" pos:end="21:57"><expr pos:start="21:56" pos:end="21:57"><name pos:start="21:56" pos:end="21:57">bp</name></expr></argument>)</argument_list></call> <operator pos:start="21:60" pos:end="21:61">==</operator> <literal type="number" pos:start="21:63" pos:end="21:63">0</literal></expr>)</condition><block type="pseudo" pos:start="23:21" pos:end="23:26"><block_content pos:start="23:21" pos:end="23:26">

                    <break pos:start="23:21" pos:end="23:26">break;</break></block_content></block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>

    <expr_stmt pos:start="31:5" pos:end="31:41"><expr pos:start="31:5" pos:end="31:40"><call pos:start="31:5" pos:end="31:40"><name pos:start="31:5" pos:end="31:38">kvm_arch_remove_all_hw_breakpoints</name><argument_list pos:start="31:39" pos:end="31:40">()</argument_list></call></expr>;</expr_stmt>



    <for pos:start="35:5" pos:end="37:39">for <control pos:start="35:9" pos:end="35:59">(<init pos:start="35:10" pos:end="35:25"><expr pos:start="35:10" pos:end="35:24"><name pos:start="35:10" pos:end="35:12">env</name> <operator pos:start="35:14" pos:end="35:14">=</operator> <name pos:start="35:16" pos:end="35:24">first_cpu</name></expr>;</init> <condition pos:start="35:27" pos:end="35:38"><expr pos:start="35:27" pos:end="35:37"><name pos:start="35:27" pos:end="35:29">env</name> <operator pos:start="35:31" pos:end="35:32">!=</operator> <name pos:start="35:34" pos:end="35:37">NULL</name></expr>;</condition> <incr pos:start="35:40" pos:end="35:58"><expr pos:start="35:40" pos:end="35:58"><name pos:start="35:40" pos:end="35:42">env</name> <operator pos:start="35:44" pos:end="35:44">=</operator> <name pos:start="35:46" pos:end="35:58"><name pos:start="35:46" pos:end="35:48">env</name><operator pos:start="35:49" pos:end="35:50">-&gt;</operator><name pos:start="35:51" pos:end="35:58">next_cpu</name></name></expr></incr>)</control><block type="pseudo" pos:start="37:9" pos:end="37:39"><block_content pos:start="37:9" pos:end="37:39">

        <expr_stmt pos:start="37:9" pos:end="37:39"><expr pos:start="37:9" pos:end="37:38"><call pos:start="37:9" pos:end="37:38"><name pos:start="37:9" pos:end="37:30">kvm_update_guest_debug</name><argument_list pos:start="37:31" pos:end="37:38">(<argument pos:start="37:32" pos:end="37:34"><expr pos:start="37:32" pos:end="37:34"><name pos:start="37:32" pos:end="37:34">env</name></expr></argument>, <argument pos:start="37:37" pos:end="37:37"><expr pos:start="37:37" pos:end="37:37"><literal type="number" pos:start="37:37" pos:end="37:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>
</unit>
