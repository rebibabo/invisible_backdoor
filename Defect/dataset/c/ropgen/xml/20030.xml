<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20030.c" pos:tabs="8"><function pos:start="1:1" pos:end="273:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:25">arm_handle_psci_call</name><parameter_list pos:start="1:26" pos:end="1:38">(<parameter pos:start="1:27" pos:end="1:37"><decl pos:start="1:27" pos:end="1:37"><type pos:start="1:27" pos:end="1:34"><name pos:start="1:27" pos:end="1:32">ARMCPU</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:37">cpu</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="273:1">{<block_content pos:start="21:5" pos:end="271:49">

    <comment type="block" pos:start="5:5" pos:end="19:7">/*

     * This function partially implements the logic for dispatching Power State

     * Coordination Interface (PSCI) calls (as described in ARM DEN 0022B.b),

     * to the extent required for bringing up and taking down secondary cores,

     * and for handling reset and poweroff requests.

     * Additional information about the calling convention used is available in

     * the document 'SMC Calling Convention' (ARM DEN 0028)

     */</comment>

    <decl_stmt pos:start="21:5" pos:end="21:33"><decl pos:start="21:5" pos:end="21:32"><type pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:15">CPUARMState</name> <modifier pos:start="21:17" pos:end="21:17">*</modifier></type><name pos:start="21:18" pos:end="21:20">env</name> <init pos:start="21:22" pos:end="21:32">= <expr pos:start="21:24" pos:end="21:32"><operator pos:start="21:24" pos:end="21:24">&amp;</operator><name pos:start="21:25" pos:end="21:32"><name pos:start="21:25" pos:end="21:27">cpu</name><operator pos:start="21:28" pos:end="21:29">-&gt;</operator><name pos:start="21:30" pos:end="21:32">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:22"><decl pos:start="23:5" pos:end="23:21"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:12">uint64_t</name></type> <name pos:start="23:14" pos:end="23:21"><name pos:start="23:14" pos:end="23:18">param</name><index pos:start="23:19" pos:end="23:21">[<expr pos:start="23:20" pos:end="23:20"><literal type="number" pos:start="23:20" pos:end="23:20">4</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:31"><decl pos:start="25:5" pos:end="25:23"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:12">uint64_t</name></type> <name pos:start="25:14" pos:end="25:23">context_id</name></decl>, <decl pos:start="25:26" pos:end="25:30"><type ref="prev" pos:start="25:5" pos:end="25:12"/><name pos:start="25:26" pos:end="25:30">mpidr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:23"><decl pos:start="27:5" pos:end="27:22"><type pos:start="27:5" pos:end="27:16"><name pos:start="27:5" pos:end="27:16">target_ulong</name></type> <name pos:start="27:18" pos:end="27:22">entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:20"><decl pos:start="29:5" pos:end="29:19"><type pos:start="29:5" pos:end="29:11"><name pos:start="29:5" pos:end="29:11">int32_t</name></type> <name pos:start="29:13" pos:end="29:15">ret</name> <init pos:start="29:17" pos:end="29:19">= <expr pos:start="29:19" pos:end="29:19"><literal type="number" pos:start="29:19" pos:end="29:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:10"><decl pos:start="31:5" pos:end="31:9"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:9">i</name></decl>;</decl_stmt>



    <for pos:start="35:5" pos:end="49:5">for <control pos:start="35:9" pos:end="35:27">(<init pos:start="35:10" pos:end="35:15"><expr pos:start="35:10" pos:end="35:14"><name pos:start="35:10" pos:end="35:10">i</name> <operator pos:start="35:12" pos:end="35:12">=</operator> <literal type="number" pos:start="35:14" pos:end="35:14">0</literal></expr>;</init> <condition pos:start="35:17" pos:end="35:22"><expr pos:start="35:17" pos:end="35:21"><name pos:start="35:17" pos:end="35:17">i</name> <operator pos:start="35:19" pos:end="35:19">&lt;</operator> <literal type="number" pos:start="35:21" pos:end="35:21">4</literal></expr>;</condition> <incr pos:start="35:24" pos:end="35:26"><expr pos:start="35:24" pos:end="35:26"><name pos:start="35:24" pos:end="35:24">i</name><operator pos:start="35:25" pos:end="35:26">++</operator></expr></incr>)</control> <block pos:start="35:29" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:62">

        <comment type="block" pos:start="37:9" pos:end="45:11">/*

         * All PSCI functions take explicit 32-bit or native int sized

         * arguments so we can simply zero-extend all arguments regardless

         * of which exact function we are about to call.

         */</comment>

        <expr_stmt pos:start="47:9" pos:end="47:62"><expr pos:start="47:9" pos:end="47:61"><name pos:start="47:9" pos:end="47:16"><name pos:start="47:9" pos:end="47:13">param</name><index pos:start="47:14" pos:end="47:16">[<expr pos:start="47:15" pos:end="47:15"><name pos:start="47:15" pos:end="47:15">i</name></expr>]</index></name> <operator pos:start="47:18" pos:end="47:18">=</operator> <ternary pos:start="47:20" pos:end="47:61"><condition pos:start="47:20" pos:end="47:32"><expr pos:start="47:20" pos:end="47:30"><call pos:start="47:20" pos:end="47:30"><name pos:start="47:20" pos:end="47:25">is_a64</name><argument_list pos:start="47:26" pos:end="47:30">(<argument pos:start="47:27" pos:end="47:29"><expr pos:start="47:27" pos:end="47:29"><name pos:start="47:27" pos:end="47:29">env</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="47:34" pos:end="47:46"> <expr pos:start="47:34" pos:end="47:46"><name pos:start="47:34" pos:end="47:46"><name pos:start="47:34" pos:end="47:36">env</name><operator pos:start="47:37" pos:end="47:38">-&gt;</operator><name pos:start="47:39" pos:end="47:43">xregs</name><index pos:start="47:44" pos:end="47:46">[<expr pos:start="47:45" pos:end="47:45"><name pos:start="47:45" pos:end="47:45">i</name></expr>]</index></name></expr> </then><else pos:start="47:48" pos:end="47:61">: <expr pos:start="47:50" pos:end="47:61"><name pos:start="47:50" pos:end="47:61"><name pos:start="47:50" pos:end="47:52">env</name><operator pos:start="47:53" pos:end="47:54">-&gt;</operator><name pos:start="47:55" pos:end="47:58">regs</name><index pos:start="47:59" pos:end="47:61">[<expr pos:start="47:60" pos:end="47:60"><name pos:start="47:60" pos:end="47:60">i</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:57">(<expr pos:start="53:9" pos:end="53:56"><operator pos:start="53:9" pos:end="53:9">(</operator><name pos:start="53:10" pos:end="53:17"><name pos:start="53:10" pos:end="53:14">param</name><index pos:start="53:15" pos:end="53:17">[<expr pos:start="53:16" pos:end="53:16"><literal type="number" pos:start="53:16" pos:end="53:16">0</literal></expr>]</index></name> <operator pos:start="53:19" pos:end="53:19">&amp;</operator> <name pos:start="53:21" pos:end="53:39">QEMU_PSCI_0_2_64BIT</name><operator pos:start="53:40" pos:end="53:40">)</operator> <operator pos:start="53:42" pos:end="53:43">&amp;&amp;</operator> <operator pos:start="53:45" pos:end="53:45">!</operator><call pos:start="53:46" pos:end="53:56"><name pos:start="53:46" pos:end="53:51">is_a64</name><argument_list pos:start="53:52" pos:end="53:56">(<argument pos:start="53:53" pos:end="53:55"><expr pos:start="53:53" pos:end="53:55"><name pos:start="53:53" pos:end="53:55">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="53:59" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:17">

        <expr_stmt pos:start="55:9" pos:end="55:43"><expr pos:start="55:9" pos:end="55:42"><name pos:start="55:9" pos:end="55:11">ret</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <name pos:start="55:15" pos:end="55:42">QEMU_PSCI_RET_INVALID_PARAMS</name></expr>;</expr_stmt>

        <goto pos:start="57:9" pos:end="57:17">goto <name pos:start="57:14" pos:end="57:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="63:5" pos:end="243:5">switch <condition pos:start="63:12" pos:end="63:21">(<expr pos:start="63:13" pos:end="63:20"><name pos:start="63:13" pos:end="63:20"><name pos:start="63:13" pos:end="63:17">param</name><index pos:start="63:18" pos:end="63:20">[<expr pos:start="63:19" pos:end="63:19"><literal type="number" pos:start="63:19" pos:end="63:19">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="63:23" pos:end="243:5">{<block_content pos:start="65:9" pos:end="241:31">

        <decl_stmt pos:start="65:9" pos:end="65:35"><decl pos:start="65:9" pos:end="65:34"><type pos:start="65:9" pos:end="65:18"><name pos:start="65:9" pos:end="65:16">CPUState</name> <modifier pos:start="65:18" pos:end="65:18">*</modifier></type><name pos:start="65:19" pos:end="65:34">target_cpu_state</name></decl>;</decl_stmt>

        <decl_stmt pos:start="67:9" pos:end="67:27"><decl pos:start="67:9" pos:end="67:26"><type pos:start="67:9" pos:end="67:16"><name pos:start="67:9" pos:end="67:14">ARMCPU</name> <modifier pos:start="67:16" pos:end="67:16">*</modifier></type><name pos:start="67:17" pos:end="67:26">target_cpu</name></decl>;</decl_stmt>



    <case pos:start="71:5" pos:end="71:39">case <expr pos:start="71:10" pos:end="71:38"><name pos:start="71:10" pos:end="71:38">QEMU_PSCI_0_2_FN_PSCI_VERSION</name></expr>:</case>

        <expr_stmt pos:start="73:9" pos:end="73:44"><expr pos:start="73:9" pos:end="73:43"><name pos:start="73:9" pos:end="73:11">ret</name> <operator pos:start="73:13" pos:end="73:13">=</operator> <name pos:start="73:15" pos:end="73:43">QEMU_PSCI_0_2_RET_VERSION_0_2</name></expr>;</expr_stmt>

        <break pos:start="75:9" pos:end="75:14">break;</break>

    <case pos:start="77:5" pos:end="77:44">case <expr pos:start="77:10" pos:end="77:43"><name pos:start="77:10" pos:end="77:43">QEMU_PSCI_0_2_FN_MIGRATE_INFO_TYPE</name></expr>:</case>

        <expr_stmt pos:start="79:9" pos:end="79:59"><expr pos:start="79:9" pos:end="79:58"><name pos:start="79:9" pos:end="79:11">ret</name> <operator pos:start="79:13" pos:end="79:13">=</operator> <name pos:start="79:15" pos:end="79:58">QEMU_PSCI_0_2_RET_TOS_MIGRATION_NOT_REQUIRED</name></expr>;</expr_stmt> <comment type="block" pos:start="79:61" pos:end="79:79">/* No trusted OS */</comment>

        <break pos:start="81:9" pos:end="81:14">break;</break>

    <case pos:start="83:5" pos:end="83:40">case <expr pos:start="83:10" pos:end="83:39"><name pos:start="83:10" pos:end="83:39">QEMU_PSCI_0_2_FN_AFFINITY_INFO</name></expr>:</case>

    <case pos:start="85:5" pos:end="85:42">case <expr pos:start="85:10" pos:end="85:41"><name pos:start="85:10" pos:end="85:41">QEMU_PSCI_0_2_FN64_AFFINITY_INFO</name></expr>:</case>

        <expr_stmt pos:start="87:9" pos:end="87:25"><expr pos:start="87:9" pos:end="87:24"><name pos:start="87:9" pos:end="87:13">mpidr</name> <operator pos:start="87:15" pos:end="87:15">=</operator> <name pos:start="87:17" pos:end="87:24"><name pos:start="87:17" pos:end="87:21">param</name><index pos:start="87:22" pos:end="87:24">[<expr pos:start="87:23" pos:end="87:23"><literal type="number" pos:start="87:23" pos:end="87:23">1</literal></expr>]</index></name></expr>;</expr_stmt>



        <switch pos:start="91:9" pos:end="117:9">switch <condition pos:start="91:16" pos:end="91:25">(<expr pos:start="91:17" pos:end="91:24"><name pos:start="91:17" pos:end="91:24"><name pos:start="91:17" pos:end="91:21">param</name><index pos:start="91:22" pos:end="91:24">[<expr pos:start="91:23" pos:end="91:23"><literal type="number" pos:start="91:23" pos:end="91:23">2</literal></expr>]</index></name></expr>)</condition> <block pos:start="91:27" pos:end="117:9">{<block_content pos:start="93:9" pos:end="115:20">

        <case pos:start="93:9" pos:end="93:15">case <expr pos:start="93:14" pos:end="93:14"><literal type="number" pos:start="93:14" pos:end="93:14">0</literal></expr>:</case>

            <expr_stmt pos:start="95:13" pos:end="95:56"><expr pos:start="95:13" pos:end="95:55"><name pos:start="95:13" pos:end="95:28">target_cpu_state</name> <operator pos:start="95:30" pos:end="95:30">=</operator> <call pos:start="95:32" pos:end="95:55"><name pos:start="95:32" pos:end="95:48">arm_get_cpu_by_id</name><argument_list pos:start="95:49" pos:end="95:55">(<argument pos:start="95:50" pos:end="95:54"><expr pos:start="95:50" pos:end="95:54"><name pos:start="95:50" pos:end="95:54">mpidr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="97:13" pos:end="103:13"><if pos:start="97:13" pos:end="103:13">if <condition pos:start="97:16" pos:end="97:34">(<expr pos:start="97:17" pos:end="97:33"><operator pos:start="97:17" pos:end="97:17">!</operator><name pos:start="97:18" pos:end="97:33">target_cpu_state</name></expr>)</condition> <block pos:start="97:36" pos:end="103:13">{<block_content pos:start="99:17" pos:end="101:22">

                <expr_stmt pos:start="99:17" pos:end="99:51"><expr pos:start="99:17" pos:end="99:50"><name pos:start="99:17" pos:end="99:19">ret</name> <operator pos:start="99:21" pos:end="99:21">=</operator> <name pos:start="99:23" pos:end="99:50">QEMU_PSCI_RET_INVALID_PARAMS</name></expr>;</expr_stmt>

                <break pos:start="101:17" pos:end="101:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:51"><expr pos:start="105:13" pos:end="105:50"><name pos:start="105:13" pos:end="105:22">target_cpu</name> <operator pos:start="105:24" pos:end="105:24">=</operator> <call pos:start="105:26" pos:end="105:50"><name pos:start="105:26" pos:end="105:32">ARM_CPU</name><argument_list pos:start="105:33" pos:end="105:50">(<argument pos:start="105:34" pos:end="105:49"><expr pos:start="105:34" pos:end="105:49"><name pos:start="105:34" pos:end="105:49">target_cpu_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:50"><expr pos:start="107:13" pos:end="107:49"><name pos:start="107:13" pos:end="107:15">ret</name> <operator pos:start="107:17" pos:end="107:17">=</operator> <ternary pos:start="107:19" pos:end="107:49"><condition pos:start="107:19" pos:end="107:43"><expr pos:start="107:19" pos:end="107:41"><name pos:start="107:19" pos:end="107:41"><name pos:start="107:19" pos:end="107:28">target_cpu</name><operator pos:start="107:29" pos:end="107:30">-&gt;</operator><name pos:start="107:31" pos:end="107:41">powered_off</name></name></expr> ?</condition><then pos:start="107:45" pos:end="107:45"> <expr pos:start="107:45" pos:end="107:45"><literal type="number" pos:start="107:45" pos:end="107:45">1</literal></expr> </then><else pos:start="107:47" pos:end="107:49">: <expr pos:start="107:49" pos:end="107:49"><literal type="number" pos:start="107:49" pos:end="107:49">0</literal></expr></else></ternary></expr>;</expr_stmt>

            <break pos:start="109:13" pos:end="109:18">break;</break>

        <default pos:start="111:9" pos:end="111:16">default:</default>

            <comment type="block" pos:start="113:13" pos:end="113:65">/* Everything above affinity level 0 is always on. */</comment>

            <expr_stmt pos:start="115:13" pos:end="115:20"><expr pos:start="115:13" pos:end="115:19"><name pos:start="115:13" pos:end="115:15">ret</name> <operator pos:start="115:17" pos:end="115:17">=</operator> <literal type="number" pos:start="115:19" pos:end="115:19">0</literal></expr>;</expr_stmt>

        </block_content>}</block></switch>

        <break pos:start="119:9" pos:end="119:14">break;</break>

    <case pos:start="121:5" pos:end="121:39">case <expr pos:start="121:10" pos:end="121:38"><name pos:start="121:10" pos:end="121:38">QEMU_PSCI_0_2_FN_SYSTEM_RESET</name></expr>:</case>

        <expr_stmt pos:start="123:9" pos:end="123:36"><expr pos:start="123:9" pos:end="123:35"><call pos:start="123:9" pos:end="123:35"><name pos:start="123:9" pos:end="123:33">qemu_system_reset_request</name><argument_list pos:start="123:34" pos:end="123:35">()</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="125:9" pos:end="133:11">/* QEMU reset and shutdown are async requests, but PSCI

         * mandates that we never return from the reset/shutdown

         * call, so power the CPU off now so it doesn't execute

         * anything further.

         */</comment>

        <goto pos:start="135:9" pos:end="135:21">goto <name pos:start="135:14" pos:end="135:20">cpu_off</name>;</goto>

    <case pos:start="137:5" pos:end="137:37">case <expr pos:start="137:10" pos:end="137:36"><name pos:start="137:10" pos:end="137:36">QEMU_PSCI_0_2_FN_SYSTEM_OFF</name></expr>:</case>

        <expr_stmt pos:start="139:9" pos:end="139:39"><expr pos:start="139:9" pos:end="139:38"><call pos:start="139:9" pos:end="139:38"><name pos:start="139:9" pos:end="139:36">qemu_system_shutdown_request</name><argument_list pos:start="139:37" pos:end="139:38">()</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="141:9" pos:end="141:21">goto <name pos:start="141:14" pos:end="141:20">cpu_off</name>;</goto>

    <case pos:start="143:5" pos:end="143:33">case <expr pos:start="143:10" pos:end="143:32"><name pos:start="143:10" pos:end="143:32">QEMU_PSCI_0_1_FN_CPU_ON</name></expr>:</case>

    <case pos:start="145:5" pos:end="145:33">case <expr pos:start="145:10" pos:end="145:32"><name pos:start="145:10" pos:end="145:32">QEMU_PSCI_0_2_FN_CPU_ON</name></expr>:</case>

    <case pos:start="147:5" pos:end="147:35">case <expr pos:start="147:10" pos:end="147:34"><name pos:start="147:10" pos:end="147:34">QEMU_PSCI_0_2_FN64_CPU_ON</name></expr>:</case>

    <block pos:start="149:5" pos:end="191:5">{<block_content pos:start="173:9" pos:end="189:14">

        <comment type="block" pos:start="151:9" pos:end="171:11">/* The PSCI spec mandates that newly brought up CPUs start

         * in the highest exception level which exists and is enabled

         * on the calling CPU. Since the QEMU PSCI implementation is

         * acting as a "fake EL3" or "fake EL2" firmware, this for us

         * means that we want to start at the highest NS exception level

         * that we are providing to the guest.

         * The execution mode should be that which is currently in use

         * by the same exception level on the calling CPU.

         * The CPU should be started with the context_id value

         * in x0 (if AArch64) or r0 (if AArch32).

         */</comment>

        <decl_stmt pos:start="173:9" pos:end="173:66"><decl pos:start="173:9" pos:end="173:65"><type pos:start="173:9" pos:end="173:11"><name pos:start="173:9" pos:end="173:11">int</name></type> <name pos:start="173:13" pos:end="173:21">target_el</name> <init pos:start="173:23" pos:end="173:65">= <expr pos:start="173:25" pos:end="173:65"><ternary pos:start="173:25" pos:end="173:65"><condition pos:start="173:25" pos:end="173:59"><expr pos:start="173:25" pos:end="173:57"><call pos:start="173:25" pos:end="173:57"><name pos:start="173:25" pos:end="173:35">arm_feature</name><argument_list pos:start="173:36" pos:end="173:57">(<argument pos:start="173:37" pos:end="173:39"><expr pos:start="173:37" pos:end="173:39"><name pos:start="173:37" pos:end="173:39">env</name></expr></argument>, <argument pos:start="173:42" pos:end="173:56"><expr pos:start="173:42" pos:end="173:56"><name pos:start="173:42" pos:end="173:56">ARM_FEATURE_EL2</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="173:61" pos:end="173:61"> <expr pos:start="173:61" pos:end="173:61"><literal type="number" pos:start="173:61" pos:end="173:61">2</literal></expr> </then><else pos:start="173:63" pos:end="173:65">: <expr pos:start="173:65" pos:end="173:65"><literal type="number" pos:start="173:65" pos:end="173:65">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="175:9" pos:end="175:61"><decl pos:start="175:9" pos:end="175:60"><type pos:start="175:9" pos:end="175:12"><name pos:start="175:9" pos:end="175:12">bool</name></type> <name pos:start="175:14" pos:end="175:27">target_aarch64</name> <init pos:start="175:29" pos:end="175:60">= <expr pos:start="175:31" pos:end="175:60"><call pos:start="175:31" pos:end="175:60"><name pos:start="175:31" pos:end="175:44">arm_el_is_aa64</name><argument_list pos:start="175:45" pos:end="175:60">(<argument pos:start="175:46" pos:end="175:48"><expr pos:start="175:46" pos:end="175:48"><name pos:start="175:46" pos:end="175:48">env</name></expr></argument>, <argument pos:start="175:51" pos:end="175:59"><expr pos:start="175:51" pos:end="175:59"><name pos:start="175:51" pos:end="175:59">target_el</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="179:9" pos:end="179:25"><expr pos:start="179:9" pos:end="179:24"><name pos:start="179:9" pos:end="179:13">mpidr</name> <operator pos:start="179:15" pos:end="179:15">=</operator> <name pos:start="179:17" pos:end="179:24"><name pos:start="179:17" pos:end="179:21">param</name><index pos:start="179:22" pos:end="179:24">[<expr pos:start="179:23" pos:end="179:23"><literal type="number" pos:start="179:23" pos:end="179:23">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="181:9" pos:end="181:25"><expr pos:start="181:9" pos:end="181:24"><name pos:start="181:9" pos:end="181:13">entry</name> <operator pos:start="181:15" pos:end="181:15">=</operator> <name pos:start="181:17" pos:end="181:24"><name pos:start="181:17" pos:end="181:21">param</name><index pos:start="181:22" pos:end="181:24">[<expr pos:start="181:23" pos:end="181:23"><literal type="number" pos:start="181:23" pos:end="181:23">2</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="183:9" pos:end="183:30"><expr pos:start="183:9" pos:end="183:29"><name pos:start="183:9" pos:end="183:18">context_id</name> <operator pos:start="183:20" pos:end="183:20">=</operator> <name pos:start="183:22" pos:end="183:29"><name pos:start="183:22" pos:end="183:26">param</name><index pos:start="183:27" pos:end="183:29">[<expr pos:start="183:28" pos:end="183:28"><literal type="number" pos:start="183:28" pos:end="183:28">3</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="185:9" pos:end="187:56"><expr pos:start="185:9" pos:end="187:55"><name pos:start="185:9" pos:end="185:11">ret</name> <operator pos:start="185:13" pos:end="185:13">=</operator> <call pos:start="185:15" pos:end="187:55"><name pos:start="185:15" pos:end="185:28">arm_set_cpu_on</name><argument_list pos:start="185:29" pos:end="187:55">(<argument pos:start="185:30" pos:end="185:34"><expr pos:start="185:30" pos:end="185:34"><name pos:start="185:30" pos:end="185:34">mpidr</name></expr></argument>, <argument pos:start="185:37" pos:end="185:41"><expr pos:start="185:37" pos:end="185:41"><name pos:start="185:37" pos:end="185:41">entry</name></expr></argument>, <argument pos:start="185:44" pos:end="185:53"><expr pos:start="185:44" pos:end="185:53"><name pos:start="185:44" pos:end="185:53">context_id</name></expr></argument>,

                             <argument pos:start="187:30" pos:end="187:38"><expr pos:start="187:30" pos:end="187:38"><name pos:start="187:30" pos:end="187:38">target_el</name></expr></argument>, <argument pos:start="187:41" pos:end="187:54"><expr pos:start="187:41" pos:end="187:54"><name pos:start="187:41" pos:end="187:54">target_aarch64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="189:9" pos:end="189:14">break;</break>

    </block_content>}</block>

    <case pos:start="193:5" pos:end="193:34">case <expr pos:start="193:10" pos:end="193:33"><name pos:start="193:10" pos:end="193:33">QEMU_PSCI_0_1_FN_CPU_OFF</name></expr>:</case>

    <case pos:start="195:5" pos:end="195:34">case <expr pos:start="195:10" pos:end="195:33"><name pos:start="195:10" pos:end="195:33">QEMU_PSCI_0_2_FN_CPU_OFF</name></expr>:</case>

        <goto pos:start="197:9" pos:end="197:21">goto <name pos:start="197:14" pos:end="197:20">cpu_off</name>;</goto>

    <case pos:start="199:5" pos:end="199:38">case <expr pos:start="199:10" pos:end="199:37"><name pos:start="199:10" pos:end="199:37">QEMU_PSCI_0_1_FN_CPU_SUSPEND</name></expr>:</case>

    <case pos:start="201:5" pos:end="201:38">case <expr pos:start="201:10" pos:end="201:37"><name pos:start="201:10" pos:end="201:37">QEMU_PSCI_0_2_FN_CPU_SUSPEND</name></expr>:</case>

    <case pos:start="203:5" pos:end="203:40">case <expr pos:start="203:10" pos:end="203:39"><name pos:start="203:10" pos:end="203:39">QEMU_PSCI_0_2_FN64_CPU_SUSPEND</name></expr>:</case>

        <comment type="block" pos:start="205:9" pos:end="205:55">/* Affinity levels are not supported in QEMU */</comment>

        <if_stmt pos:start="207:9" pos:end="213:9"><if pos:start="207:9" pos:end="213:9">if <condition pos:start="207:12" pos:end="207:34">(<expr pos:start="207:13" pos:end="207:33"><name pos:start="207:13" pos:end="207:20"><name pos:start="207:13" pos:end="207:17">param</name><index pos:start="207:18" pos:end="207:20">[<expr pos:start="207:19" pos:end="207:19"><literal type="number" pos:start="207:19" pos:end="207:19">1</literal></expr>]</index></name> <operator pos:start="207:22" pos:end="207:22">&amp;</operator> <literal type="number" pos:start="207:24" pos:end="207:33">0xfffe0000</literal></expr>)</condition> <block pos:start="207:36" pos:end="213:9">{<block_content pos:start="209:13" pos:end="211:18">

            <expr_stmt pos:start="209:13" pos:end="209:47"><expr pos:start="209:13" pos:end="209:46"><name pos:start="209:13" pos:end="209:15">ret</name> <operator pos:start="209:17" pos:end="209:17">=</operator> <name pos:start="209:19" pos:end="209:46">QEMU_PSCI_RET_INVALID_PARAMS</name></expr>;</expr_stmt>

            <break pos:start="211:13" pos:end="211:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="215:9" pos:end="215:63">/* Powerdown is not supported, we always go into WFI */</comment>

        <if_stmt pos:start="217:9" pos:end="225:9"><if pos:start="217:9" pos:end="221:9">if <condition pos:start="217:12" pos:end="217:24">(<expr pos:start="217:13" pos:end="217:23"><call pos:start="217:13" pos:end="217:23"><name pos:start="217:13" pos:end="217:18">is_a64</name><argument_list pos:start="217:19" pos:end="217:23">(<argument pos:start="217:20" pos:end="217:22"><expr pos:start="217:20" pos:end="217:22"><name pos:start="217:20" pos:end="217:22">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="217:26" pos:end="221:9">{<block_content pos:start="219:13" pos:end="219:30">

            <expr_stmt pos:start="219:13" pos:end="219:30"><expr pos:start="219:13" pos:end="219:29"><name pos:start="219:13" pos:end="219:25"><name pos:start="219:13" pos:end="219:15">env</name><operator pos:start="219:16" pos:end="219:17">-&gt;</operator><name pos:start="219:18" pos:end="219:22">xregs</name><index pos:start="219:23" pos:end="219:25">[<expr pos:start="219:24" pos:end="219:24"><literal type="number" pos:start="219:24" pos:end="219:24">0</literal></expr>]</index></name> <operator pos:start="219:27" pos:end="219:27">=</operator> <literal type="number" pos:start="219:29" pos:end="219:29">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="221:11" pos:end="225:9">else <block pos:start="221:16" pos:end="225:9">{<block_content pos:start="223:13" pos:end="223:29">

            <expr_stmt pos:start="223:13" pos:end="223:29"><expr pos:start="223:13" pos:end="223:28"><name pos:start="223:13" pos:end="223:24"><name pos:start="223:13" pos:end="223:15">env</name><operator pos:start="223:16" pos:end="223:17">-&gt;</operator><name pos:start="223:18" pos:end="223:21">regs</name><index pos:start="223:22" pos:end="223:24">[<expr pos:start="223:23" pos:end="223:23"><literal type="number" pos:start="223:23" pos:end="223:23">0</literal></expr>]</index></name> <operator pos:start="223:26" pos:end="223:26">=</operator> <literal type="number" pos:start="223:28" pos:end="223:28">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="227:9" pos:end="227:24"><expr pos:start="227:9" pos:end="227:23"><call pos:start="227:9" pos:end="227:23"><name pos:start="227:9" pos:end="227:18">helper_wfi</name><argument_list pos:start="227:19" pos:end="227:23">(<argument pos:start="227:20" pos:end="227:22"><expr pos:start="227:20" pos:end="227:22"><name pos:start="227:20" pos:end="227:22">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="229:9" pos:end="229:14">break;</break>

    <case pos:start="231:5" pos:end="231:34">case <expr pos:start="231:10" pos:end="231:33"><name pos:start="231:10" pos:end="231:33">QEMU_PSCI_0_1_FN_MIGRATE</name></expr>:</case>

    <case pos:start="233:5" pos:end="233:34">case <expr pos:start="233:10" pos:end="233:33"><name pos:start="233:10" pos:end="233:33">QEMU_PSCI_0_2_FN_MIGRATE</name></expr>:</case>

        <expr_stmt pos:start="235:9" pos:end="235:42"><expr pos:start="235:9" pos:end="235:41"><name pos:start="235:9" pos:end="235:11">ret</name> <operator pos:start="235:13" pos:end="235:13">=</operator> <name pos:start="235:15" pos:end="235:41">QEMU_PSCI_RET_NOT_SUPPORTED</name></expr>;</expr_stmt>

        <break pos:start="237:9" pos:end="237:14">break;</break>

    <default pos:start="239:5" pos:end="239:12">default:</default>

        <expr_stmt pos:start="241:9" pos:end="241:31"><expr pos:start="241:9" pos:end="241:30"><call pos:start="241:9" pos:end="241:30"><name pos:start="241:9" pos:end="241:28">g_assert_not_reached</name><argument_list pos:start="241:29" pos:end="241:30">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>



<label pos:start="247:1" pos:end="247:4"><name pos:start="247:1" pos:end="247:3">err</name>:</label>

    <if_stmt pos:start="249:5" pos:end="257:5"><if pos:start="249:5" pos:end="253:5">if <condition pos:start="249:8" pos:end="249:20">(<expr pos:start="249:9" pos:end="249:19"><call pos:start="249:9" pos:end="249:19"><name pos:start="249:9" pos:end="249:14">is_a64</name><argument_list pos:start="249:15" pos:end="249:19">(<argument pos:start="249:16" pos:end="249:18"><expr pos:start="249:16" pos:end="249:18"><name pos:start="249:16" pos:end="249:18">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="249:22" pos:end="253:5">{<block_content pos:start="251:9" pos:end="251:28">

        <expr_stmt pos:start="251:9" pos:end="251:28"><expr pos:start="251:9" pos:end="251:27"><name pos:start="251:9" pos:end="251:21"><name pos:start="251:9" pos:end="251:11">env</name><operator pos:start="251:12" pos:end="251:13">-&gt;</operator><name pos:start="251:14" pos:end="251:18">xregs</name><index pos:start="251:19" pos:end="251:21">[<expr pos:start="251:20" pos:end="251:20"><literal type="number" pos:start="251:20" pos:end="251:20">0</literal></expr>]</index></name> <operator pos:start="251:23" pos:end="251:23">=</operator> <name pos:start="251:25" pos:end="251:27">ret</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="253:7" pos:end="257:5">else <block pos:start="253:12" pos:end="257:5">{<block_content pos:start="255:9" pos:end="255:27">

        <expr_stmt pos:start="255:9" pos:end="255:27"><expr pos:start="255:9" pos:end="255:26"><name pos:start="255:9" pos:end="255:20"><name pos:start="255:9" pos:end="255:11">env</name><operator pos:start="255:12" pos:end="255:13">-&gt;</operator><name pos:start="255:14" pos:end="255:17">regs</name><index pos:start="255:18" pos:end="255:20">[<expr pos:start="255:19" pos:end="255:19"><literal type="number" pos:start="255:19" pos:end="255:19">0</literal></expr>]</index></name> <operator pos:start="255:22" pos:end="255:22">=</operator> <name pos:start="255:24" pos:end="255:26">ret</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="259:5" pos:end="259:11">return;</return>



<label pos:start="263:1" pos:end="263:8"><name pos:start="263:1" pos:end="263:7">cpu_off</name>:</label>

    <expr_stmt pos:start="265:5" pos:end="265:44"><expr pos:start="265:5" pos:end="265:43"><name pos:start="265:5" pos:end="265:7">ret</name> <operator pos:start="265:9" pos:end="265:9">=</operator> <call pos:start="265:11" pos:end="265:43"><name pos:start="265:11" pos:end="265:25">arm_set_cpu_off</name><argument_list pos:start="265:26" pos:end="265:43">(<argument pos:start="265:27" pos:end="265:42"><expr pos:start="265:27" pos:end="265:42"><name pos:start="265:27" pos:end="265:42"><name pos:start="265:27" pos:end="265:29">cpu</name><operator pos:start="265:30" pos:end="265:31">-&gt;</operator><name pos:start="265:32" pos:end="265:42">mp_affinity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="267:5" pos:end="267:20">/* notreached */</comment>

    <comment type="block" pos:start="269:5" pos:end="269:47">/* sanity check in case something failed */</comment>

    <expr_stmt pos:start="271:5" pos:end="271:49"><expr pos:start="271:5" pos:end="271:48"><call pos:start="271:5" pos:end="271:48"><name pos:start="271:5" pos:end="271:10">assert</name><argument_list pos:start="271:11" pos:end="271:48">(<argument pos:start="271:12" pos:end="271:47"><expr pos:start="271:12" pos:end="271:47"><name pos:start="271:12" pos:end="271:14">ret</name> <operator pos:start="271:16" pos:end="271:17">==</operator> <name pos:start="271:19" pos:end="271:47">QEMU_ARM_POWERCTL_RET_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
