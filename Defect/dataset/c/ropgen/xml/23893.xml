<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23893.c" pos:tabs="8"><function pos:start="1:1" pos:end="145:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">test_redirector_rx</name><parameter_list pos:start="1:31" pos:end="1:36">(<parameter pos:start="1:32" pos:end="1:35"><decl pos:start="1:32" pos:end="1:35"><type pos:start="1:32" pos:end="1:35"><name pos:start="1:32" pos:end="1:35">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="145:1">{<block_content pos:start="11:5" pos:end="144:0">

<cpp:ifndef pos:start="5:1" pos:end="5:14">#<cpp:directive pos:start="5:2" pos:end="5:7">ifndef</cpp:directive> <name pos:start="5:9" pos:end="5:14">_WIN32</name></cpp:ifndef>

<comment type="block" pos:start="7:1" pos:end="7:57">/* socketpair(PF_UNIX) which does not exist on windows */</comment>



    <decl_stmt pos:start="11:5" pos:end="11:35"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:23"><name pos:start="11:9" pos:end="11:20">backend_sock</name><index pos:start="11:21" pos:end="11:23">[<expr pos:start="11:22" pos:end="11:22"><literal type="number" pos:start="11:22" pos:end="11:22">2</literal></expr>]</index></name></decl>, <decl pos:start="11:26" pos:end="11:34"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:26" pos:end="11:34">send_sock</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">char</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:17">cmdline</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:16">ret</name> <init pos:start="15:18" pos:end="15:20">= <expr pos:start="15:20" pos:end="15:20"><literal type="number" pos:start="15:20" pos:end="15:20">0</literal></expr></init></decl>, <decl pos:start="15:23" pos:end="15:29"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:23" pos:end="15:25">len</name> <init pos:start="15:27" pos:end="15:29">= <expr pos:start="15:29" pos:end="15:29"><literal type="number" pos:start="15:29" pos:end="15:29">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:32"><decl pos:start="17:5" pos:end="17:31"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">char</name></type> <name pos:start="17:10" pos:end="17:19"><name pos:start="17:10" pos:end="17:17">send_buf</name><index pos:start="17:18" pos:end="17:19">[]</index></name> <init pos:start="17:21" pos:end="17:31">= <expr pos:start="17:23" pos:end="17:31"><literal type="string" pos:start="17:23" pos:end="17:31">"Hello!!"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:52"><decl pos:start="19:5" pos:end="19:51"><type pos:start="19:5" pos:end="19:8"><name pos:start="19:5" pos:end="19:8">char</name></type> <name pos:start="19:10" pos:end="19:21"><name pos:start="19:10" pos:end="19:19">sock_path0</name><index pos:start="19:20" pos:end="19:21">[]</index></name> <init pos:start="19:23" pos:end="19:51">= <expr pos:start="19:25" pos:end="19:51"><literal type="string" pos:start="19:25" pos:end="19:51">"filter-redirector0.XXXXXX"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:52"><decl pos:start="21:5" pos:end="21:51"><type pos:start="21:5" pos:end="21:8"><name pos:start="21:5" pos:end="21:8">char</name></type> <name pos:start="21:10" pos:end="21:21"><name pos:start="21:10" pos:end="21:19">sock_path1</name><index pos:start="21:20" pos:end="21:21">[]</index></name> <init pos:start="21:23" pos:end="21:51">= <expr pos:start="21:25" pos:end="21:51"><literal type="string" pos:start="21:25" pos:end="21:51">"filter-redirector1.XXXXXX"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:19"><decl pos:start="23:5" pos:end="23:18"><type pos:start="23:5" pos:end="23:10"><name pos:start="23:5" pos:end="23:8">char</name> <modifier pos:start="23:10" pos:end="23:10">*</modifier></type><name pos:start="23:11" pos:end="23:18">recv_buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:37"><decl pos:start="25:5" pos:end="25:36"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:12">uint32_t</name></type> <name pos:start="25:14" pos:end="25:17">size</name> <init pos:start="25:19" pos:end="25:36">= <expr pos:start="25:21" pos:end="25:36"><sizeof pos:start="25:21" pos:end="25:36">sizeof<argument_list pos:start="25:27" pos:end="25:36">(<argument pos:start="25:28" pos:end="25:35"><expr pos:start="25:28" pos:end="25:35"><name pos:start="25:28" pos:end="25:35">send_buf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:23"><expr pos:start="27:5" pos:end="27:22"><name pos:start="27:5" pos:end="27:8">size</name> <operator pos:start="27:10" pos:end="27:10">=</operator> <call pos:start="27:12" pos:end="27:22"><name pos:start="27:12" pos:end="27:16">htonl</name><argument_list pos:start="27:17" pos:end="27:22">(<argument pos:start="27:18" pos:end="27:21"><expr pos:start="27:18" pos:end="27:21"><name pos:start="27:18" pos:end="27:21">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:60"><expr pos:start="31:5" pos:end="31:59"><name pos:start="31:5" pos:end="31:7">ret</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="31:59"><name pos:start="31:11" pos:end="31:20">socketpair</name><argument_list pos:start="31:21" pos:end="31:59">(<argument pos:start="31:22" pos:end="31:28"><expr pos:start="31:22" pos:end="31:28"><name pos:start="31:22" pos:end="31:28">PF_UNIX</name></expr></argument>, <argument pos:start="31:31" pos:end="31:41"><expr pos:start="31:31" pos:end="31:41"><name pos:start="31:31" pos:end="31:41">SOCK_STREAM</name></expr></argument>, <argument pos:start="31:44" pos:end="31:44"><expr pos:start="31:44" pos:end="31:44"><literal type="number" pos:start="31:44" pos:end="31:44">0</literal></expr></argument>, <argument pos:start="31:47" pos:end="31:58"><expr pos:start="31:47" pos:end="31:58"><name pos:start="31:47" pos:end="31:58">backend_sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:33"><expr pos:start="33:5" pos:end="33:32"><call pos:start="33:5" pos:end="33:32"><name pos:start="33:5" pos:end="33:19">g_assert_cmpint</name><argument_list pos:start="33:20" pos:end="33:32">(<argument pos:start="33:21" pos:end="33:23"><expr pos:start="33:21" pos:end="33:23"><name pos:start="33:21" pos:end="33:23">ret</name></expr></argument>, <argument pos:start="33:26" pos:end="33:27"><expr pos:start="33:26" pos:end="33:27"><operator pos:start="33:26" pos:end="33:27">!=</operator></expr></argument>, <argument pos:start="33:30" pos:end="33:31"><expr pos:start="33:30" pos:end="33:31"><operator pos:start="33:30" pos:end="33:30">-</operator><literal type="number" pos:start="33:31" pos:end="33:31">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:30"><expr pos:start="37:5" pos:end="37:29"><name pos:start="37:5" pos:end="37:7">ret</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <call pos:start="37:11" pos:end="37:29"><name pos:start="37:11" pos:end="37:17">mkstemp</name><argument_list pos:start="37:18" pos:end="37:29">(<argument pos:start="37:19" pos:end="37:28"><expr pos:start="37:19" pos:end="37:28"><name pos:start="37:19" pos:end="37:28">sock_path0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:33"><expr pos:start="39:5" pos:end="39:32"><call pos:start="39:5" pos:end="39:32"><name pos:start="39:5" pos:end="39:19">g_assert_cmpint</name><argument_list pos:start="39:20" pos:end="39:32">(<argument pos:start="39:21" pos:end="39:23"><expr pos:start="39:21" pos:end="39:23"><name pos:start="39:21" pos:end="39:23">ret</name></expr></argument>, <argument pos:start="39:26" pos:end="39:27"><expr pos:start="39:26" pos:end="39:27"><operator pos:start="39:26" pos:end="39:27">!=</operator></expr></argument>, <argument pos:start="39:30" pos:end="39:31"><expr pos:start="39:30" pos:end="39:31"><operator pos:start="39:30" pos:end="39:30">-</operator><literal type="number" pos:start="39:31" pos:end="39:31">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:30"><expr pos:start="41:5" pos:end="41:29"><name pos:start="41:5" pos:end="41:7">ret</name> <operator pos:start="41:9" pos:end="41:9">=</operator> <call pos:start="41:11" pos:end="41:29"><name pos:start="41:11" pos:end="41:17">mkstemp</name><argument_list pos:start="41:18" pos:end="41:29">(<argument pos:start="41:19" pos:end="41:28"><expr pos:start="41:19" pos:end="41:28"><name pos:start="41:19" pos:end="41:28">sock_path1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:33"><expr pos:start="43:5" pos:end="43:32"><call pos:start="43:5" pos:end="43:32"><name pos:start="43:5" pos:end="43:19">g_assert_cmpint</name><argument_list pos:start="43:20" pos:end="43:32">(<argument pos:start="43:21" pos:end="43:23"><expr pos:start="43:21" pos:end="43:23"><name pos:start="43:21" pos:end="43:23">ret</name></expr></argument>, <argument pos:start="43:26" pos:end="43:27"><expr pos:start="43:26" pos:end="43:27"><operator pos:start="43:26" pos:end="43:27">!=</operator></expr></argument>, <argument pos:start="43:30" pos:end="43:31"><expr pos:start="43:30" pos:end="43:31"><operator pos:start="43:30" pos:end="43:30">-</operator><literal type="number" pos:start="43:31" pos:end="43:31">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="69:71"><expr pos:start="47:5" pos:end="69:70"><name pos:start="47:5" pos:end="47:11">cmdline</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <call pos:start="47:15" pos:end="69:70"><name pos:start="47:15" pos:end="47:29">g_strdup_printf</name><argument_list pos:start="47:30" pos:end="69:70">(<argument pos:start="47:31" pos:end="67:45"><expr pos:start="47:31" pos:end="67:45"><literal type="string" pos:start="47:31" pos:end="47:66">"-netdev socket,id=qtest-bn0,fd=%d "</literal>

                <literal type="string" pos:start="49:17" pos:end="49:63">"-device rtl8139,netdev=qtest-bn0,id=qtest-e0 "</literal>

                <literal type="string" pos:start="51:17" pos:end="51:71">"-chardev socket,id=redirector0,path=%s,server,nowait "</literal>

                <literal type="string" pos:start="53:17" pos:end="53:71">"-chardev socket,id=redirector1,path=%s,server,nowait "</literal>

                <literal type="string" pos:start="55:17" pos:end="55:64">"-chardev socket,id=redirector2,path=%s,nowait "</literal>

                <literal type="string" pos:start="57:17" pos:end="57:73">"-object filter-redirector,id=qtest-f0,netdev=qtest-bn0,"</literal>

                <literal type="string" pos:start="59:17" pos:end="59:45">"queue=rx,indev=redirector0 "</literal>

                <literal type="string" pos:start="61:17" pos:end="61:73">"-object filter-redirector,id=qtest-f1,netdev=qtest-bn0,"</literal>

                <literal type="string" pos:start="63:17" pos:end="63:46">"queue=rx,outdev=redirector2 "</literal>

                <literal type="string" pos:start="65:17" pos:end="65:73">"-object filter-redirector,id=qtest-f2,netdev=qtest-bn0,"</literal>

                <literal type="string" pos:start="67:17" pos:end="67:45">"queue=rx,indev=redirector1 "</literal></expr></argument>

                , <argument pos:start="69:19" pos:end="69:33"><expr pos:start="69:19" pos:end="69:33"><name pos:start="69:19" pos:end="69:33"><name pos:start="69:19" pos:end="69:30">backend_sock</name><index pos:start="69:31" pos:end="69:33">[<expr pos:start="69:32" pos:end="69:32"><literal type="number" pos:start="69:32" pos:end="69:32">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="69:36" pos:end="69:45"><expr pos:start="69:36" pos:end="69:45"><name pos:start="69:36" pos:end="69:45">sock_path0</name></expr></argument>, <argument pos:start="69:48" pos:end="69:57"><expr pos:start="69:48" pos:end="69:57"><name pos:start="69:48" pos:end="69:57">sock_path1</name></expr></argument>, <argument pos:start="69:60" pos:end="69:69"><expr pos:start="69:60" pos:end="69:69"><name pos:start="69:60" pos:end="69:69">sock_path0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:25"><expr pos:start="71:5" pos:end="71:24"><call pos:start="71:5" pos:end="71:24"><name pos:start="71:5" pos:end="71:15">qtest_start</name><argument_list pos:start="71:16" pos:end="71:24">(<argument pos:start="71:17" pos:end="71:23"><expr pos:start="71:17" pos:end="71:23"><name pos:start="71:17" pos:end="71:23">cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:20"><expr pos:start="73:5" pos:end="73:19"><call pos:start="73:5" pos:end="73:19"><name pos:start="73:5" pos:end="73:10">g_free</name><argument_list pos:start="73:11" pos:end="73:19">(<argument pos:start="73:12" pos:end="73:18"><expr pos:start="73:12" pos:end="73:18"><name pos:start="73:12" pos:end="73:18">cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <decl_stmt pos:start="77:5" pos:end="93:6"><decl pos:start="77:5" pos:end="93:5"><type pos:start="77:5" pos:end="77:16"><name pos:start="77:5" pos:end="77:16"><name pos:start="77:5" pos:end="77:10">struct</name> <name pos:start="77:12" pos:end="77:16">iovec</name></name></type> <name pos:start="77:18" pos:end="77:22"><name pos:start="77:18" pos:end="77:20">iov</name><index pos:start="77:21" pos:end="77:22">[]</index></name> <init pos:start="77:24" pos:end="93:5">= <expr pos:start="77:26" pos:end="93:5"><block pos:start="77:26" pos:end="93:5">{

        <expr pos:start="79:9" pos:end="85:9"><block pos:start="79:9" pos:end="85:9">{

            <expr pos:start="81:13" pos:end="81:29"><operator pos:start="81:13" pos:end="81:13">.</operator><name pos:start="81:14" pos:end="81:21">iov_base</name> <operator pos:start="81:23" pos:end="81:23">=</operator> <operator pos:start="81:25" pos:end="81:25">&amp;</operator><name pos:start="81:26" pos:end="81:29">size</name></expr>,

            <expr pos:start="83:13" pos:end="83:35"><operator pos:start="83:13" pos:end="83:13">.</operator><name pos:start="83:14" pos:end="83:20">iov_len</name> <operator pos:start="83:22" pos:end="83:22">=</operator> <sizeof pos:start="83:24" pos:end="83:35">sizeof<argument_list pos:start="83:30" pos:end="83:35">(<argument pos:start="83:31" pos:end="83:34"><expr pos:start="83:31" pos:end="83:34"><name pos:start="83:31" pos:end="83:34">size</name></expr></argument>)</argument_list></sizeof></expr>,

        }</block></expr>, <expr pos:start="85:12" pos:end="91:9"><block pos:start="85:12" pos:end="91:9">{

            <expr pos:start="87:13" pos:end="87:32"><operator pos:start="87:13" pos:end="87:13">.</operator><name pos:start="87:14" pos:end="87:21">iov_base</name> <operator pos:start="87:23" pos:end="87:23">=</operator> <name pos:start="87:25" pos:end="87:32">send_buf</name></expr>,

            <expr pos:start="89:13" pos:end="89:39"><operator pos:start="89:13" pos:end="89:13">.</operator><name pos:start="89:14" pos:end="89:20">iov_len</name> <operator pos:start="89:22" pos:end="89:22">=</operator> <sizeof pos:start="89:24" pos:end="89:39">sizeof<argument_list pos:start="89:30" pos:end="89:39">(<argument pos:start="89:31" pos:end="89:38"><expr pos:start="89:31" pos:end="89:38"><name pos:start="89:31" pos:end="89:38">send_buf</name></expr></argument>)</argument_list></sizeof></expr>,

        }</block></expr>,

    }</block></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:47"><expr pos:start="97:5" pos:end="97:46"><name pos:start="97:5" pos:end="97:13">send_sock</name> <operator pos:start="97:15" pos:end="97:15">=</operator> <call pos:start="97:17" pos:end="97:46"><name pos:start="97:17" pos:end="97:28">unix_connect</name><argument_list pos:start="97:29" pos:end="97:46">(<argument pos:start="97:30" pos:end="97:39"><expr pos:start="97:30" pos:end="97:39"><name pos:start="97:30" pos:end="97:39">sock_path1</name></expr></argument>, <argument pos:start="97:42" pos:end="97:45"><expr pos:start="97:42" pos:end="97:45"><name pos:start="97:42" pos:end="97:45">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:39"><expr pos:start="99:5" pos:end="99:38"><call pos:start="99:5" pos:end="99:38"><name pos:start="99:5" pos:end="99:19">g_assert_cmpint</name><argument_list pos:start="99:20" pos:end="99:38">(<argument pos:start="99:21" pos:end="99:29"><expr pos:start="99:21" pos:end="99:29"><name pos:start="99:21" pos:end="99:29">send_sock</name></expr></argument>, <argument pos:start="99:32" pos:end="99:33"><expr pos:start="99:32" pos:end="99:33"><operator pos:start="99:32" pos:end="99:33">!=</operator></expr></argument>, <argument pos:start="99:36" pos:end="99:37"><expr pos:start="99:36" pos:end="99:37"><operator pos:start="99:36" pos:end="99:36">-</operator><literal type="number" pos:start="99:37" pos:end="99:37">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="101:5" pos:end="101:78">/* send a qmp command to guarantee that 'connected' is setting to true. */</comment>

    <expr_stmt pos:start="103:5" pos:end="103:41"><expr pos:start="103:5" pos:end="103:40"><call pos:start="103:5" pos:end="103:40"><name pos:start="103:5" pos:end="103:7">qmp</name><argument_list pos:start="103:8" pos:end="103:40">(<argument pos:start="103:9" pos:end="103:39"><expr pos:start="103:9" pos:end="103:39"><literal type="string" pos:start="103:9" pos:end="103:39">"{ 'execute' : 'query-status'}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="107:5" pos:end="107:74"><expr pos:start="107:5" pos:end="107:73"><name pos:start="107:5" pos:end="107:7">ret</name> <operator pos:start="107:9" pos:end="107:9">=</operator> <call pos:start="107:11" pos:end="107:73"><name pos:start="107:11" pos:end="107:18">iov_send</name><argument_list pos:start="107:19" pos:end="107:73">(<argument pos:start="107:20" pos:end="107:28"><expr pos:start="107:20" pos:end="107:28"><name pos:start="107:20" pos:end="107:28">send_sock</name></expr></argument>, <argument pos:start="107:31" pos:end="107:33"><expr pos:start="107:31" pos:end="107:33"><name pos:start="107:31" pos:end="107:33">iov</name></expr></argument>, <argument pos:start="107:36" pos:end="107:36"><expr pos:start="107:36" pos:end="107:36"><literal type="number" pos:start="107:36" pos:end="107:36">2</literal></expr></argument>, <argument pos:start="107:39" pos:end="107:39"><expr pos:start="107:39" pos:end="107:39"><literal type="number" pos:start="107:39" pos:end="107:39">0</literal></expr></argument>, <argument pos:start="107:42" pos:end="107:72"><expr pos:start="107:42" pos:end="107:72"><sizeof pos:start="107:42" pos:end="107:53">sizeof<argument_list pos:start="107:48" pos:end="107:53">(<argument pos:start="107:49" pos:end="107:52"><expr pos:start="107:49" pos:end="107:52"><name pos:start="107:49" pos:end="107:52">size</name></expr></argument>)</argument_list></sizeof> <operator pos:start="107:55" pos:end="107:55">+</operator> <sizeof pos:start="107:57" pos:end="107:72">sizeof<argument_list pos:start="107:63" pos:end="107:72">(<argument pos:start="107:64" pos:end="107:71"><expr pos:start="107:64" pos:end="107:71"><name pos:start="107:64" pos:end="107:71">send_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:62"><expr pos:start="109:5" pos:end="109:61"><call pos:start="109:5" pos:end="109:61"><name pos:start="109:5" pos:end="109:19">g_assert_cmpint</name><argument_list pos:start="109:20" pos:end="109:61">(<argument pos:start="109:21" pos:end="109:23"><expr pos:start="109:21" pos:end="109:23"><name pos:start="109:21" pos:end="109:23">ret</name></expr></argument>, <argument pos:start="109:26" pos:end="109:27"><expr pos:start="109:26" pos:end="109:27"><operator pos:start="109:26" pos:end="109:27">==</operator></expr></argument>, <argument pos:start="109:30" pos:end="109:60"><expr pos:start="109:30" pos:end="109:60"><sizeof pos:start="109:30" pos:end="109:45">sizeof<argument_list pos:start="109:36" pos:end="109:45">(<argument pos:start="109:37" pos:end="109:44"><expr pos:start="109:37" pos:end="109:44"><name pos:start="109:37" pos:end="109:44">send_buf</name></expr></argument>)</argument_list></sizeof> <operator pos:start="109:47" pos:end="109:47">+</operator> <sizeof pos:start="109:49" pos:end="109:60">sizeof<argument_list pos:start="109:55" pos:end="109:60">(<argument pos:start="109:56" pos:end="109:59"><expr pos:start="109:56" pos:end="109:59"><name pos:start="109:56" pos:end="109:59">size</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:21"><expr pos:start="111:5" pos:end="111:20"><call pos:start="111:5" pos:end="111:20"><name pos:start="111:5" pos:end="111:9">close</name><argument_list pos:start="111:10" pos:end="111:20">(<argument pos:start="111:11" pos:end="111:19"><expr pos:start="111:11" pos:end="111:19"><name pos:start="111:11" pos:end="111:19">send_sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="115:5" pos:end="115:59"><expr pos:start="115:5" pos:end="115:58"><name pos:start="115:5" pos:end="115:7">ret</name> <operator pos:start="115:9" pos:end="115:9">=</operator> <call pos:start="115:11" pos:end="115:58"><name pos:start="115:11" pos:end="115:19">qemu_recv</name><argument_list pos:start="115:20" pos:end="115:58">(<argument pos:start="115:21" pos:end="115:35"><expr pos:start="115:21" pos:end="115:35"><name pos:start="115:21" pos:end="115:35"><name pos:start="115:21" pos:end="115:32">backend_sock</name><index pos:start="115:33" pos:end="115:35">[<expr pos:start="115:34" pos:end="115:34"><literal type="number" pos:start="115:34" pos:end="115:34">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="115:38" pos:end="115:41"><expr pos:start="115:38" pos:end="115:41"><operator pos:start="115:38" pos:end="115:38">&amp;</operator><name pos:start="115:39" pos:end="115:41">len</name></expr></argument>, <argument pos:start="115:44" pos:end="115:54"><expr pos:start="115:44" pos:end="115:54"><sizeof pos:start="115:44" pos:end="115:54">sizeof<argument_list pos:start="115:50" pos:end="115:54">(<argument pos:start="115:51" pos:end="115:53"><expr pos:start="115:51" pos:end="115:53"><name pos:start="115:51" pos:end="115:53">len</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="115:57" pos:end="115:57"><expr pos:start="115:57" pos:end="115:57"><literal type="number" pos:start="115:57" pos:end="115:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:42"><expr pos:start="117:5" pos:end="117:41"><call pos:start="117:5" pos:end="117:41"><name pos:start="117:5" pos:end="117:19">g_assert_cmpint</name><argument_list pos:start="117:20" pos:end="117:41">(<argument pos:start="117:21" pos:end="117:23"><expr pos:start="117:21" pos:end="117:23"><name pos:start="117:21" pos:end="117:23">ret</name></expr></argument>, <argument pos:start="117:26" pos:end="117:27"><expr pos:start="117:26" pos:end="117:27"><operator pos:start="117:26" pos:end="117:27">==</operator></expr></argument>, <argument pos:start="117:30" pos:end="117:40"><expr pos:start="117:30" pos:end="117:40"><sizeof pos:start="117:30" pos:end="117:40">sizeof<argument_list pos:start="117:36" pos:end="117:40">(<argument pos:start="117:37" pos:end="117:39"><expr pos:start="117:37" pos:end="117:39"><name pos:start="117:37" pos:end="117:39">len</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:21"><expr pos:start="119:5" pos:end="119:20"><name pos:start="119:5" pos:end="119:7">len</name> <operator pos:start="119:9" pos:end="119:9">=</operator> <call pos:start="119:11" pos:end="119:20"><name pos:start="119:11" pos:end="119:15">ntohl</name><argument_list pos:start="119:16" pos:end="119:20">(<argument pos:start="119:17" pos:end="119:19"><expr pos:start="119:17" pos:end="119:19"><name pos:start="119:17" pos:end="119:19">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:47"><expr pos:start="123:5" pos:end="123:46"><call pos:start="123:5" pos:end="123:46"><name pos:start="123:5" pos:end="123:19">g_assert_cmpint</name><argument_list pos:start="123:20" pos:end="123:46">(<argument pos:start="123:21" pos:end="123:23"><expr pos:start="123:21" pos:end="123:23"><name pos:start="123:21" pos:end="123:23">len</name></expr></argument>, <argument pos:start="123:26" pos:end="123:27"><expr pos:start="123:26" pos:end="123:27"><operator pos:start="123:26" pos:end="123:27">==</operator></expr></argument>, <argument pos:start="123:30" pos:end="123:45"><expr pos:start="123:30" pos:end="123:45"><sizeof pos:start="123:30" pos:end="123:45">sizeof<argument_list pos:start="123:36" pos:end="123:45">(<argument pos:start="123:37" pos:end="123:44"><expr pos:start="123:37" pos:end="123:44"><name pos:start="123:37" pos:end="123:44">send_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:29"><expr pos:start="125:5" pos:end="125:28"><name pos:start="125:5" pos:end="125:12">recv_buf</name> <operator pos:start="125:14" pos:end="125:14">=</operator> <call pos:start="125:16" pos:end="125:28"><name pos:start="125:16" pos:end="125:23">g_malloc</name><argument_list pos:start="125:24" pos:end="125:28">(<argument pos:start="125:25" pos:end="125:27"><expr pos:start="125:25" pos:end="125:27"><name pos:start="125:25" pos:end="125:27">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:55"><expr pos:start="127:5" pos:end="127:54"><name pos:start="127:5" pos:end="127:7">ret</name> <operator pos:start="127:9" pos:end="127:9">=</operator> <call pos:start="127:11" pos:end="127:54"><name pos:start="127:11" pos:end="127:19">qemu_recv</name><argument_list pos:start="127:20" pos:end="127:54">(<argument pos:start="127:21" pos:end="127:35"><expr pos:start="127:21" pos:end="127:35"><name pos:start="127:21" pos:end="127:35"><name pos:start="127:21" pos:end="127:32">backend_sock</name><index pos:start="127:33" pos:end="127:35">[<expr pos:start="127:34" pos:end="127:34"><literal type="number" pos:start="127:34" pos:end="127:34">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="127:38" pos:end="127:45"><expr pos:start="127:38" pos:end="127:45"><name pos:start="127:38" pos:end="127:45">recv_buf</name></expr></argument>, <argument pos:start="127:48" pos:end="127:50"><expr pos:start="127:48" pos:end="127:50"><name pos:start="127:48" pos:end="127:50">len</name></expr></argument>, <argument pos:start="127:53" pos:end="127:53"><expr pos:start="127:53" pos:end="127:53"><literal type="number" pos:start="127:53" pos:end="127:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:44"><expr pos:start="129:5" pos:end="129:43"><call pos:start="129:5" pos:end="129:43"><name pos:start="129:5" pos:end="129:19">g_assert_cmpstr</name><argument_list pos:start="129:20" pos:end="129:43">(<argument pos:start="129:21" pos:end="129:28"><expr pos:start="129:21" pos:end="129:28"><name pos:start="129:21" pos:end="129:28">recv_buf</name></expr></argument>, <argument pos:start="129:31" pos:end="129:32"><expr pos:start="129:31" pos:end="129:32"><operator pos:start="129:31" pos:end="129:32">==</operator></expr></argument>, <argument pos:start="129:35" pos:end="129:42"><expr pos:start="129:35" pos:end="129:42"><name pos:start="129:35" pos:end="129:42">send_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="133:5" pos:end="133:21"><expr pos:start="133:5" pos:end="133:20"><call pos:start="133:5" pos:end="133:20"><name pos:start="133:5" pos:end="133:10">g_free</name><argument_list pos:start="133:11" pos:end="133:20">(<argument pos:start="133:12" pos:end="133:19"><expr pos:start="133:12" pos:end="133:19"><name pos:start="133:12" pos:end="133:19">recv_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:23"><expr pos:start="135:5" pos:end="135:22"><call pos:start="135:5" pos:end="135:22"><name pos:start="135:5" pos:end="135:10">unlink</name><argument_list pos:start="135:11" pos:end="135:22">(<argument pos:start="135:12" pos:end="135:21"><expr pos:start="135:12" pos:end="135:21"><name pos:start="135:12" pos:end="135:21">sock_path0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:23"><expr pos:start="137:5" pos:end="137:22"><call pos:start="137:5" pos:end="137:22"><name pos:start="137:5" pos:end="137:10">unlink</name><argument_list pos:start="137:11" pos:end="137:22">(<argument pos:start="137:12" pos:end="137:21"><expr pos:start="137:12" pos:end="137:21"><name pos:start="137:12" pos:end="137:21">sock_path1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="144:0"><expr pos:start="139:5" pos:end="139:15"><call pos:start="139:5" pos:end="139:15"><name pos:start="139:5" pos:end="139:13">qtest_end</name><argument_list pos:start="139:14" pos:end="139:15">()</argument_list></call></expr>;</expr_stmt>



<cpp:endif pos:start="143:1" pos:end="143:6">#<cpp:directive pos:start="143:2" pos:end="143:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
