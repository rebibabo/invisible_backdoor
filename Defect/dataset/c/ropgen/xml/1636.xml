<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1636.c" pos:tabs="8"><function pos:start="1:1" pos:end="43:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">decode_pivot</name><parameter_list pos:start="1:24" pos:end="1:71">(<parameter pos:start="1:25" pos:end="1:40"><decl pos:start="1:25" pos:end="1:40"><type pos:start="1:25" pos:end="1:40"><name pos:start="1:25" pos:end="1:35">MSS1Context</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:40">ctx</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:60"><decl pos:start="1:43" pos:end="1:60"><type pos:start="1:43" pos:end="1:60"><name pos:start="1:43" pos:end="1:52">ArithCoder</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:60">acoder</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:70"><decl pos:start="1:63" pos:end="1:70"><type pos:start="1:63" pos:end="1:70"><name pos:start="1:63" pos:end="1:65">int</name></type> <name pos:start="1:67" pos:end="1:70">base</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="43:1">{<block_content pos:start="5:5" pos:end="41:34">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">val</name></decl>, <decl pos:start="5:14" pos:end="5:16"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:14" pos:end="5:16">inv</name></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:55"><expr pos:start="9:5" pos:end="9:54"><name pos:start="9:5" pos:end="9:7">inv</name> <operator pos:start="9:9" pos:end="9:9">=</operator> <call pos:start="9:11" pos:end="9:54"><name pos:start="9:11" pos:end="9:29">arith_get_model_sym</name><argument_list pos:start="9:30" pos:end="9:54">(<argument pos:start="9:31" pos:end="9:36"><expr pos:start="9:31" pos:end="9:36"><name pos:start="9:31" pos:end="9:36">acoder</name></expr></argument>, <argument pos:start="9:39" pos:end="9:53"><expr pos:start="9:39" pos:end="9:53"><operator pos:start="9:39" pos:end="9:39">&amp;</operator><name pos:start="9:40" pos:end="9:53"><name pos:start="9:40" pos:end="9:42">ctx</name><operator pos:start="9:43" pos:end="9:44">-&gt;</operator><name pos:start="9:45" pos:end="9:53">edge_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="11:5" pos:end="11:55"><expr pos:start="11:5" pos:end="11:54"><name pos:start="11:5" pos:end="11:7">val</name> <operator pos:start="11:9" pos:end="11:9">=</operator> <call pos:start="11:11" pos:end="11:50"><name pos:start="11:11" pos:end="11:29">arith_get_model_sym</name><argument_list pos:start="11:30" pos:end="11:50">(<argument pos:start="11:31" pos:end="11:36"><expr pos:start="11:31" pos:end="11:36"><name pos:start="11:31" pos:end="11:36">acoder</name></expr></argument>, <argument pos:start="11:39" pos:end="11:49"><expr pos:start="11:39" pos:end="11:49"><operator pos:start="11:39" pos:end="11:39">&amp;</operator><name pos:start="11:40" pos:end="11:49"><name pos:start="11:40" pos:end="11:42">ctx</name><operator pos:start="11:43" pos:end="11:44">-&gt;</operator><name pos:start="11:45" pos:end="11:49">pivot</name></name></expr></argument>)</argument_list></call> <operator pos:start="11:52" pos:end="11:52">+</operator> <literal type="number" pos:start="11:54" pos:end="11:54">1</literal></expr>;</expr_stmt>



    <if_stmt pos:start="15:5" pos:end="27:5"><if pos:start="15:5" pos:end="27:5">if <condition pos:start="15:8" pos:end="15:16">(<expr pos:start="15:9" pos:end="15:15"><name pos:start="15:9" pos:end="15:11">val</name> <operator pos:start="15:13" pos:end="15:13">&gt;</operator> <literal type="number" pos:start="15:15" pos:end="15:15">2</literal></expr>)</condition> <block pos:start="15:18" pos:end="27:5">{<block_content pos:start="17:9" pos:end="25:63">

        <if_stmt pos:start="17:9" pos:end="23:9"><if pos:start="17:9" pos:end="23:9">if <condition pos:start="17:12" pos:end="17:36">(<expr pos:start="17:13" pos:end="17:35"><operator pos:start="17:13" pos:end="17:13">(</operator><name pos:start="17:14" pos:end="17:17">base</name> <operator pos:start="17:19" pos:end="17:19">+</operator> <literal type="number" pos:start="17:21" pos:end="17:21">1</literal><operator pos:start="17:22" pos:end="17:22">)</operator> <operator pos:start="17:24" pos:end="17:24">/</operator> <literal type="number" pos:start="17:26" pos:end="17:28">2</literal> <operator pos:start="17:28" pos:end="17:28">-</operator> <literal type="number" pos:start="17:30" pos:end="17:30">2</literal> <operator pos:start="17:32" pos:end="17:33">&lt;=</operator> <literal type="number" pos:start="17:35" pos:end="17:35">0</literal></expr>)</condition> <block pos:start="17:38" pos:end="23:9">{<block_content pos:start="19:13" pos:end="21:21">

            <expr_stmt pos:start="19:13" pos:end="19:31"><expr pos:start="19:13" pos:end="19:30"><name pos:start="19:13" pos:end="19:26"><name pos:start="19:13" pos:end="19:15">ctx</name><operator pos:start="19:16" pos:end="19:17">-&gt;</operator><name pos:start="19:18" pos:end="19:26">corrupted</name></name> <operator pos:start="19:28" pos:end="19:28">=</operator> <literal type="number" pos:start="19:30" pos:end="19:30">1</literal></expr>;</expr_stmt>

            <return pos:start="21:13" pos:end="21:21">return <expr pos:start="21:20" pos:end="21:20"><literal type="number" pos:start="21:20" pos:end="21:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:63"><expr pos:start="25:9" pos:end="25:62"><name pos:start="25:9" pos:end="25:11">val</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <call pos:start="25:15" pos:end="25:58"><name pos:start="25:15" pos:end="25:30">arith_get_number</name><argument_list pos:start="25:31" pos:end="25:58">(<argument pos:start="25:32" pos:end="25:37"><expr pos:start="25:32" pos:end="25:37"><name pos:start="25:32" pos:end="25:37">acoder</name></expr></argument>, <argument pos:start="25:40" pos:end="25:57"><expr pos:start="25:40" pos:end="25:57"><operator pos:start="25:40" pos:end="25:40">(</operator><name pos:start="25:41" pos:end="25:44">base</name> <operator pos:start="25:46" pos:end="25:46">+</operator> <literal type="number" pos:start="25:48" pos:end="25:48">1</literal><operator pos:start="25:49" pos:end="25:49">)</operator> <operator pos:start="25:51" pos:end="25:51">/</operator> <literal type="number" pos:start="25:53" pos:end="25:55">2</literal> <operator pos:start="25:55" pos:end="25:55">-</operator> <literal type="number" pos:start="25:57" pos:end="25:57">2</literal></expr></argument>)</argument_list></call> <operator pos:start="25:60" pos:end="25:60">+</operator> <literal type="number" pos:start="25:62" pos:end="25:62">3</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:20">(<expr pos:start="31:9" pos:end="31:19"><name pos:start="31:9" pos:end="31:11">val</name> <operator pos:start="31:13" pos:end="31:14">==</operator> <name pos:start="31:16" pos:end="31:19">base</name></expr>)</condition> <block pos:start="31:22" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:17">

        <expr_stmt pos:start="33:9" pos:end="33:27"><expr pos:start="33:9" pos:end="33:26"><name pos:start="33:9" pos:end="33:22"><name pos:start="33:9" pos:end="33:11">ctx</name><operator pos:start="33:12" pos:end="33:13">-&gt;</operator><name pos:start="33:14" pos:end="33:22">corrupted</name></name> <operator pos:start="33:24" pos:end="33:24">=</operator> <literal type="number" pos:start="33:26" pos:end="33:26">1</literal></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:17">return <expr pos:start="35:16" pos:end="35:16"><literal type="number" pos:start="35:16" pos:end="35:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="41:5" pos:end="41:34">return <expr pos:start="41:12" pos:end="41:33"><ternary pos:start="41:12" pos:end="41:33"><condition pos:start="41:12" pos:end="41:16"><expr pos:start="41:12" pos:end="41:14"><name pos:start="41:12" pos:end="41:14">inv</name></expr> ?</condition><then pos:start="41:18" pos:end="41:27"> <expr pos:start="41:18" pos:end="41:27"><name pos:start="41:18" pos:end="41:21">base</name> <operator pos:start="41:23" pos:end="41:23">-</operator> <name pos:start="41:25" pos:end="41:27">val</name></expr> </then><else pos:start="41:29" pos:end="41:33">: <expr pos:start="41:31" pos:end="41:33"><name pos:start="41:31" pos:end="41:33">val</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>
</unit>
