<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24838.c" pos:tabs="8"><function pos:start="1:1" pos:end="83:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">x86_cpu_apic_init</name><parameter_list pos:start="1:30" pos:end="1:56">(<parameter pos:start="1:31" pos:end="1:41"><decl pos:start="1:31" pos:end="1:41"><type pos:start="1:31" pos:end="1:41"><name pos:start="1:31" pos:end="1:36">X86CPU</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">cpu</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:55"><decl pos:start="1:44" pos:end="1:55"><type pos:start="1:44" pos:end="1:55"><name pos:start="1:44" pos:end="1:48">Error</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier><modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:55">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="83:1">{<block_content pos:start="5:5" pos:end="81:5">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:14"><specifier pos:start="5:5" pos:end="5:10">static</specifier> <name pos:start="5:12" pos:end="5:14">int</name></type> <name pos:start="5:16" pos:end="5:26">apic_mapped</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">CPUX86State</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">env</name> <init pos:start="7:22" pos:end="7:32">= <expr pos:start="7:24" pos:end="7:32"><operator pos:start="7:24" pos:end="7:24">&amp;</operator><name pos:start="7:25" pos:end="7:32"><name pos:start="7:25" pos:end="7:27">cpu</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:32">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:21"><name pos:start="9:5" pos:end="9:19">APICCommonState</name> <modifier pos:start="9:21" pos:end="9:21">*</modifier></type><name pos:start="9:22" pos:end="9:25">apic</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:35"><decl pos:start="11:5" pos:end="11:34"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:25">apic_type</name> <init pos:start="11:27" pos:end="11:34">= <expr pos:start="11:29" pos:end="11:34"><literal type="string" pos:start="11:29" pos:end="11:34">"apic"</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="23:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:32">(<expr pos:start="15:9" pos:end="15:31"><call pos:start="15:9" pos:end="15:31"><name pos:start="15:9" pos:end="15:29">kvm_irqchip_in_kernel</name><argument_list pos:start="15:30" pos:end="15:31">()</argument_list></call></expr>)</condition> <block pos:start="15:34" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:31">

        <expr_stmt pos:start="17:9" pos:end="17:31"><expr pos:start="17:9" pos:end="17:30"><name pos:start="17:9" pos:end="17:17">apic_type</name> <operator pos:start="17:19" pos:end="17:19">=</operator> <literal type="string" pos:start="17:21" pos:end="17:30">"kvm-apic"</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="19:7" pos:end="23:5">else if <condition pos:start="19:15" pos:end="19:29">(<expr pos:start="19:16" pos:end="19:28"><call pos:start="19:16" pos:end="19:28"><name pos:start="19:16" pos:end="19:26">xen_enabled</name><argument_list pos:start="19:27" pos:end="19:28">()</argument_list></call></expr>)</condition> <block pos:start="19:31" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:31">

        <expr_stmt pos:start="21:9" pos:end="21:31"><expr pos:start="21:9" pos:end="21:30"><name pos:start="21:9" pos:end="21:17">apic_type</name> <operator pos:start="21:19" pos:end="21:19">=</operator> <literal type="string" pos:start="21:21" pos:end="21:30">"xen-apic"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:55"><expr pos:start="27:5" pos:end="27:54"><name pos:start="27:5" pos:end="27:19"><name pos:start="27:5" pos:end="27:7">env</name><operator pos:start="27:8" pos:end="27:9">-&gt;</operator><name pos:start="27:10" pos:end="27:19">apic_state</name></name> <operator pos:start="27:21" pos:end="27:21">=</operator> <call pos:start="27:23" pos:end="27:54"><name pos:start="27:23" pos:end="27:37">qdev_try_create</name><argument_list pos:start="27:38" pos:end="27:54">(<argument pos:start="27:39" pos:end="27:42"><expr pos:start="27:39" pos:end="27:42"><name pos:start="27:39" pos:end="27:42">NULL</name></expr></argument>, <argument pos:start="27:45" pos:end="27:53"><expr pos:start="27:45" pos:end="27:53"><name pos:start="27:45" pos:end="27:53">apic_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:32">(<expr pos:start="29:9" pos:end="29:31"><name pos:start="29:9" pos:end="29:23"><name pos:start="29:9" pos:end="29:11">env</name><operator pos:start="29:12" pos:end="29:13">-&gt;</operator><name pos:start="29:14" pos:end="29:23">apic_state</name></name> <operator pos:start="29:25" pos:end="29:26">==</operator> <name pos:start="29:28" pos:end="29:31">NULL</name></expr>)</condition> <block pos:start="29:34" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:15">

        <expr_stmt pos:start="31:9" pos:end="31:77"><expr pos:start="31:9" pos:end="31:76"><call pos:start="31:9" pos:end="31:76"><name pos:start="31:9" pos:end="31:18">error_setg</name><argument_list pos:start="31:19" pos:end="31:76">(<argument pos:start="31:20" pos:end="31:23"><expr pos:start="31:20" pos:end="31:23"><name pos:start="31:20" pos:end="31:23">errp</name></expr></argument>, <argument pos:start="31:26" pos:end="31:64"><expr pos:start="31:26" pos:end="31:64"><literal type="string" pos:start="31:26" pos:end="31:64">"APIC device '%s' could not be created"</literal></expr></argument>, <argument pos:start="31:67" pos:end="31:75"><expr pos:start="31:67" pos:end="31:75"><name pos:start="31:67" pos:end="31:75">apic_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="41:61"><expr pos:start="39:5" pos:end="41:60"><call pos:start="39:5" pos:end="41:60"><name pos:start="39:5" pos:end="39:29">object_property_add_child</name><argument_list pos:start="39:30" pos:end="41:60">(<argument pos:start="39:31" pos:end="39:41"><expr pos:start="39:31" pos:end="39:41"><call pos:start="39:31" pos:end="39:41"><name pos:start="39:31" pos:end="39:36">OBJECT</name><argument_list pos:start="39:37" pos:end="39:41">(<argument pos:start="39:38" pos:end="39:40"><expr pos:start="39:38" pos:end="39:40"><name pos:start="39:38" pos:end="39:40">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="39:44" pos:end="39:49"><expr pos:start="39:44" pos:end="39:49"><literal type="string" pos:start="39:44" pos:end="39:49">"apic"</literal></expr></argument>,

                              <argument pos:start="41:31" pos:end="41:53"><expr pos:start="41:31" pos:end="41:53"><call pos:start="41:31" pos:end="41:53"><name pos:start="41:31" pos:end="41:36">OBJECT</name><argument_list pos:start="41:37" pos:end="41:53">(<argument pos:start="41:38" pos:end="41:52"><expr pos:start="41:38" pos:end="41:52"><name pos:start="41:38" pos:end="41:52"><name pos:start="41:38" pos:end="41:40">env</name><operator pos:start="41:41" pos:end="41:42">-&gt;</operator><name pos:start="41:43" pos:end="41:52">apic_state</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="41:56" pos:end="41:59"><expr pos:start="41:56" pos:end="41:59"><name pos:start="41:56" pos:end="41:59">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:67"><expr pos:start="43:5" pos:end="43:66"><call pos:start="43:5" pos:end="43:66"><name pos:start="43:5" pos:end="43:23">qdev_prop_set_uint8</name><argument_list pos:start="43:24" pos:end="43:66">(<argument pos:start="43:25" pos:end="43:39"><expr pos:start="43:25" pos:end="43:39"><name pos:start="43:25" pos:end="43:39"><name pos:start="43:25" pos:end="43:27">env</name><operator pos:start="43:28" pos:end="43:29">-&gt;</operator><name pos:start="43:30" pos:end="43:39">apic_state</name></name></expr></argument>, <argument pos:start="43:42" pos:end="43:45"><expr pos:start="43:42" pos:end="43:45"><literal type="string" pos:start="43:42" pos:end="43:45">"id"</literal></expr></argument>, <argument pos:start="43:48" pos:end="43:65"><expr pos:start="43:48" pos:end="43:65"><name pos:start="43:48" pos:end="43:65"><name pos:start="43:48" pos:end="43:50">env</name><operator pos:start="43:51" pos:end="43:52">-&gt;</operator><name pos:start="43:53" pos:end="43:65">cpuid_apic_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="45:5" pos:end="45:33">/* TODO: convert to link&lt;&gt; */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:40"><expr pos:start="47:5" pos:end="47:39"><name pos:start="47:5" pos:end="47:8">apic</name> <operator pos:start="47:10" pos:end="47:10">=</operator> <call pos:start="47:12" pos:end="47:39"><name pos:start="47:12" pos:end="47:22">APIC_COMMON</name><argument_list pos:start="47:23" pos:end="47:39">(<argument pos:start="47:24" pos:end="47:38"><expr pos:start="47:24" pos:end="47:38"><name pos:start="47:24" pos:end="47:38"><name pos:start="47:24" pos:end="47:26">env</name><operator pos:start="47:27" pos:end="47:28">-&gt;</operator><name pos:start="47:29" pos:end="47:38">apic_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:20"><expr pos:start="49:5" pos:end="49:19"><name pos:start="49:5" pos:end="49:13"><name pos:start="49:5" pos:end="49:8">apic</name><operator pos:start="49:9" pos:end="49:10">-&gt;</operator><name pos:start="49:11" pos:end="49:13">cpu</name></name> <operator pos:start="49:15" pos:end="49:15">=</operator> <name pos:start="49:17" pos:end="49:19">cpu</name></expr>;</expr_stmt>



    <if_stmt pos:start="53:5" pos:end="61:5"><if pos:start="53:5" pos:end="61:5">if <condition pos:start="53:8" pos:end="53:35">(<expr pos:start="53:9" pos:end="53:34"><call pos:start="53:9" pos:end="53:34"><name pos:start="53:9" pos:end="53:17">qdev_init</name><argument_list pos:start="53:18" pos:end="53:34">(<argument pos:start="53:19" pos:end="53:33"><expr pos:start="53:19" pos:end="53:33"><name pos:start="53:19" pos:end="53:33"><name pos:start="53:19" pos:end="53:21">env</name><operator pos:start="53:22" pos:end="53:23">-&gt;</operator><name pos:start="53:24" pos:end="53:33">apic_state</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="53:37" pos:end="61:5">{<block_content pos:start="55:9" pos:end="59:15">

        <expr_stmt pos:start="55:9" pos:end="57:65"><expr pos:start="55:9" pos:end="57:64"><call pos:start="55:9" pos:end="57:64"><name pos:start="55:9" pos:end="55:18">error_setg</name><argument_list pos:start="55:19" pos:end="57:64">(<argument pos:start="55:20" pos:end="55:23"><expr pos:start="55:20" pos:end="55:23"><name pos:start="55:20" pos:end="55:23">errp</name></expr></argument>, <argument pos:start="55:26" pos:end="55:68"><expr pos:start="55:26" pos:end="55:68"><literal type="string" pos:start="55:26" pos:end="55:68">"APIC device '%s' could not be initialized"</literal></expr></argument>,

                   <argument pos:start="57:20" pos:end="57:63"><expr pos:start="57:20" pos:end="57:63"><call pos:start="57:20" pos:end="57:63"><name pos:start="57:20" pos:end="57:38">object_get_typename</name><argument_list pos:start="57:39" pos:end="57:63">(<argument pos:start="57:40" pos:end="57:62"><expr pos:start="57:40" pos:end="57:62"><call pos:start="57:40" pos:end="57:62"><name pos:start="57:40" pos:end="57:45">OBJECT</name><argument_list pos:start="57:46" pos:end="57:62">(<argument pos:start="57:47" pos:end="57:61"><expr pos:start="57:47" pos:end="57:61"><name pos:start="57:47" pos:end="57:61"><name pos:start="57:47" pos:end="57:49">env</name><operator pos:start="57:50" pos:end="57:51">-&gt;</operator><name pos:start="57:52" pos:end="57:61">apic_state</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="65:5" pos:end="65:61">/* XXX: mapping more APICs at the same memory location */</comment>

    <if_stmt pos:start="67:5" pos:end="81:5"><if pos:start="67:5" pos:end="81:5">if <condition pos:start="67:8" pos:end="67:25">(<expr pos:start="67:9" pos:end="67:24"><name pos:start="67:9" pos:end="67:19">apic_mapped</name> <operator pos:start="67:21" pos:end="67:22">==</operator> <literal type="number" pos:start="67:24" pos:end="67:24">0</literal></expr>)</condition> <block pos:start="67:27" pos:end="81:5">{<block_content pos:start="75:9" pos:end="79:24">

        <comment type="block" pos:start="69:9" pos:end="71:39">/* NOTE: the APIC is directly connected to the CPU - it is not

           on the global memory bus. */</comment>

        <comment type="block" pos:start="73:9" pos:end="73:44">/* XXX: what if the base changes? */</comment>

        <expr_stmt pos:start="75:9" pos:end="77:62"><expr pos:start="75:9" pos:end="77:61"><call pos:start="75:9" pos:end="77:61"><name pos:start="75:9" pos:end="75:31">sysbus_mmio_map_overlap</name><argument_list pos:start="75:32" pos:end="77:61">(<argument pos:start="75:33" pos:end="75:63"><expr pos:start="75:33" pos:end="75:63"><call pos:start="75:33" pos:end="75:63"><name pos:start="75:33" pos:end="75:46">SYS_BUS_DEVICE</name><argument_list pos:start="75:47" pos:end="75:63">(<argument pos:start="75:48" pos:end="75:62"><expr pos:start="75:48" pos:end="75:62"><name pos:start="75:48" pos:end="75:62"><name pos:start="75:48" pos:end="75:50">env</name><operator pos:start="75:51" pos:end="75:52">-&gt;</operator><name pos:start="75:53" pos:end="75:62">apic_state</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="75:66" pos:end="75:66"><expr pos:start="75:66" pos:end="75:66"><literal type="number" pos:start="75:66" pos:end="75:66">0</literal></expr></argument>,

                                <argument pos:start="77:33" pos:end="77:52"><expr pos:start="77:33" pos:end="77:52"><name pos:start="77:33" pos:end="77:52">APIC_DEFAULT_ADDRESS</name></expr></argument>, <argument pos:start="77:55" pos:end="77:60"><expr pos:start="77:55" pos:end="77:60"><literal type="number" pos:start="77:55" pos:end="77:60">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:24"><expr pos:start="79:9" pos:end="79:23"><name pos:start="79:9" pos:end="79:19">apic_mapped</name> <operator pos:start="79:21" pos:end="79:21">=</operator> <literal type="number" pos:start="79:23" pos:end="79:23">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
