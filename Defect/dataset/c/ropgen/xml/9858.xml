<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9858.c" pos:tabs="8"><function pos:start="1:1" pos:end="199:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">vpc_create</name><parameter_list pos:start="1:22" pos:end="1:73">(<parameter pos:start="1:23" pos:end="1:42"><decl pos:start="1:23" pos:end="1:42"><type pos:start="1:23" pos:end="1:42"><specifier pos:start="1:23" pos:end="1:27">const</specifier> <name pos:start="1:29" pos:end="1:32">char</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:42">filename</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:72"><decl pos:start="1:45" pos:end="1:72"><type pos:start="1:45" pos:end="1:72"><name pos:start="1:45" pos:end="1:63">QEMUOptionParameter</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:72">options</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="199:1">{<block_content pos:start="5:5" pos:end="197:15">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">uint8_t</name></type> <name pos:start="5:13" pos:end="5:21"><name pos:start="5:13" pos:end="5:15">buf</name><index pos:start="5:16" pos:end="5:21">[<expr pos:start="5:17" pos:end="5:20"><literal type="number" pos:start="5:17" pos:end="5:20">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:58"><decl pos:start="7:5" pos:end="7:57"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:21">vhd_footer</name></name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:29">footer</name> <init pos:start="7:31" pos:end="7:57">= <expr pos:start="7:33" pos:end="7:57"><operator pos:start="7:33" pos:end="7:33">(</operator>struct <name pos:start="7:41" pos:end="7:50">vhd_footer</name> <operator pos:start="7:52" pos:end="7:52">*</operator><operator pos:start="7:53" pos:end="7:53">)</operator> <name pos:start="7:55" pos:end="7:57">buf</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:41"><decl pos:start="9:5" pos:end="9:40"><type pos:start="9:5" pos:end="9:25"><name pos:start="9:5" pos:end="9:23">QEMUOptionParameter</name> <modifier pos:start="9:25" pos:end="9:25">*</modifier></type><name pos:start="9:26" pos:end="9:40">disk_type_param</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:14"><decl pos:start="11:5" pos:end="11:10"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:10">fd</name></decl>, <decl pos:start="11:13" pos:end="11:13"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:13" pos:end="11:13">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint16_t</name></type> <name pos:start="13:14" pos:end="13:17">cyls</name> <init pos:start="13:19" pos:end="13:21">= <expr pos:start="13:21" pos:end="13:21"><literal type="number" pos:start="13:21" pos:end="13:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">uint8_t</name></type> <name pos:start="15:13" pos:end="15:17">heads</name> <init pos:start="15:19" pos:end="15:21">= <expr pos:start="15:21" pos:end="15:21"><literal type="number" pos:start="15:21" pos:end="15:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:29"><decl pos:start="17:5" pos:end="17:28"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">uint8_t</name></type> <name pos:start="17:13" pos:end="17:24">secs_per_cyl</name> <init pos:start="17:26" pos:end="17:28">= <expr pos:start="17:28" pos:end="17:28"><literal type="number" pos:start="17:28" pos:end="17:28">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:26"><decl pos:start="19:5" pos:end="19:25"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">int64_t</name></type> <name pos:start="19:13" pos:end="19:25">total_sectors</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:23"><decl pos:start="21:5" pos:end="21:22"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">int64_t</name></type> <name pos:start="21:13" pos:end="21:22">total_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:18"><decl pos:start="23:5" pos:end="23:17"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:17">disk_type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:19"><decl pos:start="25:5" pos:end="25:18"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:11">ret</name> <init pos:start="25:13" pos:end="25:18">= <expr pos:start="25:15" pos:end="25:18"><operator pos:start="25:15" pos:end="25:15">-</operator><name pos:start="25:16" pos:end="25:18">EIO</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:26">/* Read out options */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:72"><expr pos:start="31:5" pos:end="31:71"><name pos:start="31:5" pos:end="31:14">total_size</name> <operator pos:start="31:16" pos:end="31:16">=</operator> <call pos:start="31:18" pos:end="31:62"><name pos:start="31:18" pos:end="31:37">get_option_parameter</name><argument_list pos:start="31:38" pos:end="31:62">(<argument pos:start="31:39" pos:end="31:45"><expr pos:start="31:39" pos:end="31:45"><name pos:start="31:39" pos:end="31:45">options</name></expr></argument>, <argument pos:start="31:48" pos:end="31:61"><expr pos:start="31:48" pos:end="31:61"><name pos:start="31:48" pos:end="31:61">BLOCK_OPT_SIZE</name></expr></argument>)</argument_list></call><operator pos:start="31:63" pos:end="31:64">-&gt;</operator><name pos:start="31:65" pos:end="31:71"><name pos:start="31:65" pos:end="31:69">value</name><operator pos:start="31:70" pos:end="31:70">.</operator><name pos:start="31:71" pos:end="31:71">n</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:70"><expr pos:start="35:5" pos:end="35:69"><name pos:start="35:5" pos:end="35:19">disk_type_param</name> <operator pos:start="35:21" pos:end="35:21">=</operator> <call pos:start="35:23" pos:end="35:69"><name pos:start="35:23" pos:end="35:42">get_option_parameter</name><argument_list pos:start="35:43" pos:end="35:69">(<argument pos:start="35:44" pos:end="35:50"><expr pos:start="35:44" pos:end="35:50"><name pos:start="35:44" pos:end="35:50">options</name></expr></argument>, <argument pos:start="35:53" pos:end="35:68"><expr pos:start="35:53" pos:end="35:68"><name pos:start="35:53" pos:end="35:68">BLOCK_OPT_SUBFMT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="57:5"><if pos:start="37:5" pos:end="53:5">if <condition pos:start="37:8" pos:end="37:52">(<expr pos:start="37:9" pos:end="37:51"><name pos:start="37:9" pos:end="37:23">disk_type_param</name> <operator pos:start="37:25" pos:end="37:26">&amp;&amp;</operator> <name pos:start="37:28" pos:end="37:51"><name pos:start="37:28" pos:end="37:42">disk_type_param</name><operator pos:start="37:43" pos:end="37:44">-&gt;</operator><name pos:start="37:45" pos:end="37:49">value</name><operator pos:start="37:50" pos:end="37:50">.</operator><name pos:start="37:51" pos:end="37:51">s</name></name></expr>)</condition> <block pos:start="37:54" pos:end="53:5">{<block_content pos:start="39:9" pos:end="51:9">

        <if_stmt pos:start="39:9" pos:end="51:9"><if pos:start="39:9" pos:end="43:9">if <condition pos:start="39:12" pos:end="39:57">(<expr pos:start="39:13" pos:end="39:56"><operator pos:start="39:13" pos:end="39:13">!</operator><call pos:start="39:14" pos:end="39:56"><name pos:start="39:14" pos:end="39:19">strcmp</name><argument_list pos:start="39:20" pos:end="39:56">(<argument pos:start="39:21" pos:end="39:44"><expr pos:start="39:21" pos:end="39:44"><name pos:start="39:21" pos:end="39:44"><name pos:start="39:21" pos:end="39:35">disk_type_param</name><operator pos:start="39:36" pos:end="39:37">-&gt;</operator><name pos:start="39:38" pos:end="39:42">value</name><operator pos:start="39:43" pos:end="39:43">.</operator><name pos:start="39:44" pos:end="39:44">s</name></name></expr></argument>, <argument pos:start="39:47" pos:end="39:55"><expr pos:start="39:47" pos:end="39:55"><literal type="string" pos:start="39:47" pos:end="39:55">"dynamic"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:59" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:36">

            <expr_stmt pos:start="41:13" pos:end="41:36"><expr pos:start="41:13" pos:end="41:35"><name pos:start="41:13" pos:end="41:21">disk_type</name> <operator pos:start="41:23" pos:end="41:23">=</operator> <name pos:start="41:25" pos:end="41:35">VHD_DYNAMIC</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="43:11" pos:end="47:9">else if <condition pos:start="43:19" pos:end="43:62">(<expr pos:start="43:20" pos:end="43:61"><operator pos:start="43:20" pos:end="43:20">!</operator><call pos:start="43:21" pos:end="43:61"><name pos:start="43:21" pos:end="43:26">strcmp</name><argument_list pos:start="43:27" pos:end="43:61">(<argument pos:start="43:28" pos:end="43:51"><expr pos:start="43:28" pos:end="43:51"><name pos:start="43:28" pos:end="43:51"><name pos:start="43:28" pos:end="43:42">disk_type_param</name><operator pos:start="43:43" pos:end="43:44">-&gt;</operator><name pos:start="43:45" pos:end="43:49">value</name><operator pos:start="43:50" pos:end="43:50">.</operator><name pos:start="43:51" pos:end="43:51">s</name></name></expr></argument>, <argument pos:start="43:54" pos:end="43:60"><expr pos:start="43:54" pos:end="43:60"><literal type="string" pos:start="43:54" pos:end="43:60">"fixed"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:64" pos:end="47:9">{<block_content pos:start="45:13" pos:end="45:34">

            <expr_stmt pos:start="45:13" pos:end="45:34"><expr pos:start="45:13" pos:end="45:33"><name pos:start="45:13" pos:end="45:21">disk_type</name> <operator pos:start="45:23" pos:end="45:23">=</operator> <name pos:start="45:25" pos:end="45:33">VHD_FIXED</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="47:11" pos:end="51:9">else <block pos:start="47:16" pos:end="51:9">{<block_content pos:start="49:13" pos:end="49:27">

            <return pos:start="49:13" pos:end="49:27">return <expr pos:start="49:20" pos:end="49:26"><operator pos:start="49:20" pos:end="49:20">-</operator><name pos:start="49:21" pos:end="49:26">EINVAL</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="53:7" pos:end="57:5">else <block pos:start="53:12" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:32">

        <expr_stmt pos:start="55:9" pos:end="55:32"><expr pos:start="55:9" pos:end="55:31"><name pos:start="55:9" pos:end="55:17">disk_type</name> <operator pos:start="55:19" pos:end="55:19">=</operator> <name pos:start="55:21" pos:end="55:31">VHD_DYNAMIC</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="61:5" pos:end="61:25">/* Create the file */</comment>

    <expr_stmt pos:start="63:5" pos:end="63:76"><expr pos:start="63:5" pos:end="63:75"><name pos:start="63:5" pos:end="63:6">fd</name> <operator pos:start="63:8" pos:end="63:8">=</operator> <call pos:start="63:10" pos:end="63:75"><name pos:start="63:10" pos:end="63:18">qemu_open</name><argument_list pos:start="63:19" pos:end="63:75">(<argument pos:start="63:20" pos:end="63:27"><expr pos:start="63:20" pos:end="63:27"><name pos:start="63:20" pos:end="63:27">filename</name></expr></argument>, <argument pos:start="63:30" pos:end="63:68"><expr pos:start="63:30" pos:end="63:68"><name pos:start="63:30" pos:end="63:37">O_WRONLY</name> <operator pos:start="63:39" pos:end="63:39">|</operator> <name pos:start="63:41" pos:end="63:47">O_CREAT</name> <operator pos:start="63:49" pos:end="63:49">|</operator> <name pos:start="63:51" pos:end="63:57">O_TRUNC</name> <operator pos:start="63:59" pos:end="63:59">|</operator> <name pos:start="63:61" pos:end="63:68">O_BINARY</name></expr></argument>, <argument pos:start="63:71" pos:end="63:74"><expr pos:start="63:71" pos:end="63:74"><literal type="number" pos:start="63:71" pos:end="63:74">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="69:5"><if pos:start="65:5" pos:end="69:5">if <condition pos:start="65:8" pos:end="65:15">(<expr pos:start="65:9" pos:end="65:14"><name pos:start="65:9" pos:end="65:10">fd</name> <operator pos:start="65:12" pos:end="65:12">&lt;</operator> <literal type="number" pos:start="65:14" pos:end="65:14">0</literal></expr>)</condition> <block pos:start="65:17" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:20">

        <return pos:start="67:9" pos:end="67:20">return <expr pos:start="67:16" pos:end="67:19"><operator pos:start="67:16" pos:end="67:16">-</operator><name pos:start="67:17" pos:end="67:19">EIO</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="73:5" pos:end="81:7">/*

     * Calculate matching total_size and geometry. Increase the number of

     * sectors requested until we get enough (or fail). This ensures that

     * qemu-img convert doesn't truncate images, but rather rounds up.

     */</comment>

    <expr_stmt pos:start="83:5" pos:end="83:50"><expr pos:start="83:5" pos:end="83:49"><name pos:start="83:5" pos:end="83:17">total_sectors</name> <operator pos:start="83:19" pos:end="83:19">=</operator> <name pos:start="83:21" pos:end="83:30">total_size</name> <operator pos:start="83:32" pos:end="83:32">/</operator> <name pos:start="83:34" pos:end="83:49">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>

    <for pos:start="85:5" pos:end="99:5">for <control pos:start="85:9" pos:end="85:74">(<init pos:start="85:10" pos:end="85:15"><expr pos:start="85:10" pos:end="85:14"><name pos:start="85:10" pos:end="85:10">i</name> <operator pos:start="85:12" pos:end="85:12">=</operator> <literal type="number" pos:start="85:14" pos:end="85:14">0</literal></expr>;</init> <condition pos:start="85:17" pos:end="85:69"><expr pos:start="85:17" pos:end="85:68"><name pos:start="85:17" pos:end="85:29">total_sectors</name> <operator pos:start="85:31" pos:end="85:31">&gt;</operator> <operator pos:start="85:33" pos:end="85:33">(</operator><name pos:start="85:34" pos:end="85:40">int64_t</name><operator pos:start="85:41" pos:end="85:41">)</operator><name pos:start="85:42" pos:end="85:45">cyls</name> <operator pos:start="85:47" pos:end="85:47">*</operator> <name pos:start="85:49" pos:end="85:53">heads</name> <operator pos:start="85:55" pos:end="85:55">*</operator> <name pos:start="85:57" pos:end="85:68">secs_per_cyl</name></expr>;</condition> <incr pos:start="85:71" pos:end="85:73"><expr pos:start="85:71" pos:end="85:73"><name pos:start="85:71" pos:end="85:71">i</name><operator pos:start="85:72" pos:end="85:73">++</operator></expr></incr>)</control> <block pos:start="85:76" pos:end="99:5">{<block_content pos:start="87:9" pos:end="97:9">

        <if_stmt pos:start="87:9" pos:end="97:9"><if pos:start="87:9" pos:end="97:9">if <condition pos:start="87:12" pos:end="89:46">(<expr pos:start="87:13" pos:end="89:45"><call pos:start="87:13" pos:end="89:45"><name pos:start="87:13" pos:end="87:30">calculate_geometry</name><argument_list pos:start="87:31" pos:end="89:45">(<argument pos:start="87:32" pos:end="87:48"><expr pos:start="87:32" pos:end="87:48"><name pos:start="87:32" pos:end="87:44">total_sectors</name> <operator pos:start="87:46" pos:end="87:46">+</operator> <name pos:start="87:48" pos:end="87:48">i</name></expr></argument>, <argument pos:start="87:51" pos:end="87:55"><expr pos:start="87:51" pos:end="87:55"><operator pos:start="87:51" pos:end="87:51">&amp;</operator><name pos:start="87:52" pos:end="87:55">cyls</name></expr></argument>, <argument pos:start="87:58" pos:end="87:63"><expr pos:start="87:58" pos:end="87:63"><operator pos:start="87:58" pos:end="87:58">&amp;</operator><name pos:start="87:59" pos:end="87:63">heads</name></expr></argument>,

                               <argument pos:start="89:32" pos:end="89:44"><expr pos:start="89:32" pos:end="89:44"><operator pos:start="89:32" pos:end="89:32">&amp;</operator><name pos:start="89:33" pos:end="89:44">secs_per_cyl</name></expr></argument>)</argument_list></call></expr>)</condition>

        <block pos:start="91:9" pos:end="97:9">{<block_content pos:start="93:13" pos:end="95:22">

            <expr_stmt pos:start="93:13" pos:end="93:25"><expr pos:start="93:13" pos:end="93:24"><name pos:start="93:13" pos:end="93:15">ret</name> <operator pos:start="93:17" pos:end="93:17">=</operator> <operator pos:start="93:19" pos:end="93:19">-</operator><name pos:start="93:20" pos:end="93:24">EFBIG</name></expr>;</expr_stmt>

            <goto pos:start="95:13" pos:end="95:22">goto <name pos:start="95:18" pos:end="95:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="103:5" pos:end="103:58"><expr pos:start="103:5" pos:end="103:57"><name pos:start="103:5" pos:end="103:17">total_sectors</name> <operator pos:start="103:19" pos:end="103:19">=</operator> <operator pos:start="103:21" pos:end="103:21">(</operator><name pos:start="103:22" pos:end="103:28">int64_t</name><operator pos:start="103:29" pos:end="103:29">)</operator> <name pos:start="103:31" pos:end="103:34">cyls</name> <operator pos:start="103:36" pos:end="103:36">*</operator> <name pos:start="103:38" pos:end="103:42">heads</name> <operator pos:start="103:44" pos:end="103:44">*</operator> <name pos:start="103:46" pos:end="103:57">secs_per_cyl</name></expr>;</expr_stmt>



    <comment type="block" pos:start="107:5" pos:end="107:38">/* Prepare the Hard Disk Footer */</comment>

    <expr_stmt pos:start="109:5" pos:end="109:25"><expr pos:start="109:5" pos:end="109:24"><call pos:start="109:5" pos:end="109:24"><name pos:start="109:5" pos:end="109:10">memset</name><argument_list pos:start="109:11" pos:end="109:24">(<argument pos:start="109:12" pos:end="109:14"><expr pos:start="109:12" pos:end="109:14"><name pos:start="109:12" pos:end="109:14">buf</name></expr></argument>, <argument pos:start="109:17" pos:end="109:17"><expr pos:start="109:17" pos:end="109:17"><literal type="number" pos:start="109:17" pos:end="109:17">0</literal></expr></argument>, <argument pos:start="109:20" pos:end="109:23"><expr pos:start="109:20" pos:end="109:23"><literal type="number" pos:start="109:20" pos:end="109:23">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:43"><expr pos:start="113:5" pos:end="113:42"><call pos:start="113:5" pos:end="113:42"><name pos:start="113:5" pos:end="113:10">memcpy</name><argument_list pos:start="113:11" pos:end="113:42">(<argument pos:start="113:12" pos:end="113:26"><expr pos:start="113:12" pos:end="113:26"><name pos:start="113:12" pos:end="113:26"><name pos:start="113:12" pos:end="113:17">footer</name><operator pos:start="113:18" pos:end="113:19">-&gt;</operator><name pos:start="113:20" pos:end="113:26">creator</name></name></expr></argument>, <argument pos:start="113:29" pos:end="113:38"><expr pos:start="113:29" pos:end="113:38"><literal type="string" pos:start="113:29" pos:end="113:38">"conectix"</literal></expr></argument>, <argument pos:start="113:41" pos:end="113:41"><expr pos:start="113:41" pos:end="113:41"><literal type="number" pos:start="113:41" pos:end="113:41">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="115:5" pos:end="115:56">/* TODO Check if "qemu" creator_app is ok for VPC */</comment>

    <expr_stmt pos:start="117:5" pos:end="117:43"><expr pos:start="117:5" pos:end="117:42"><call pos:start="117:5" pos:end="117:42"><name pos:start="117:5" pos:end="117:10">memcpy</name><argument_list pos:start="117:11" pos:end="117:42">(<argument pos:start="117:12" pos:end="117:30"><expr pos:start="117:12" pos:end="117:30"><name pos:start="117:12" pos:end="117:30"><name pos:start="117:12" pos:end="117:17">footer</name><operator pos:start="117:18" pos:end="117:19">-&gt;</operator><name pos:start="117:20" pos:end="117:30">creator_app</name></name></expr></argument>, <argument pos:start="117:33" pos:end="117:38"><expr pos:start="117:33" pos:end="117:38"><literal type="string" pos:start="117:33" pos:end="117:38">"qemu"</literal></expr></argument>, <argument pos:start="117:41" pos:end="117:41"><expr pos:start="117:41" pos:end="117:41"><literal type="number" pos:start="117:41" pos:end="117:41">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:42"><expr pos:start="119:5" pos:end="119:41"><call pos:start="119:5" pos:end="119:41"><name pos:start="119:5" pos:end="119:10">memcpy</name><argument_list pos:start="119:11" pos:end="119:41">(<argument pos:start="119:12" pos:end="119:29"><expr pos:start="119:12" pos:end="119:29"><name pos:start="119:12" pos:end="119:29"><name pos:start="119:12" pos:end="119:17">footer</name><operator pos:start="119:18" pos:end="119:19">-&gt;</operator><name pos:start="119:20" pos:end="119:29">creator_os</name></name></expr></argument>, <argument pos:start="119:32" pos:end="119:37"><expr pos:start="119:32" pos:end="119:37"><literal type="string" pos:start="119:32" pos:end="119:37">"Wi2k"</literal></expr></argument>, <argument pos:start="119:40" pos:end="119:40"><expr pos:start="119:40" pos:end="119:40"><literal type="number" pos:start="119:40" pos:end="119:40">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:41"><expr pos:start="123:5" pos:end="123:40"><name pos:start="123:5" pos:end="123:20"><name pos:start="123:5" pos:end="123:10">footer</name><operator pos:start="123:11" pos:end="123:12">-&gt;</operator><name pos:start="123:13" pos:end="123:20">features</name></name> <operator pos:start="123:22" pos:end="123:22">=</operator> <call pos:start="123:24" pos:end="123:40"><name pos:start="123:24" pos:end="123:34">be32_to_cpu</name><argument_list pos:start="123:35" pos:end="123:40">(<argument pos:start="123:36" pos:end="123:39"><expr pos:start="123:36" pos:end="123:39"><literal type="number" pos:start="123:36" pos:end="123:39">0x02</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:46"><expr pos:start="125:5" pos:end="125:45"><name pos:start="125:5" pos:end="125:19"><name pos:start="125:5" pos:end="125:10">footer</name><operator pos:start="125:11" pos:end="125:12">-&gt;</operator><name pos:start="125:13" pos:end="125:19">version</name></name> <operator pos:start="125:21" pos:end="125:21">=</operator> <call pos:start="125:23" pos:end="125:45"><name pos:start="125:23" pos:end="125:33">be32_to_cpu</name><argument_list pos:start="125:34" pos:end="125:45">(<argument pos:start="125:35" pos:end="125:44"><expr pos:start="125:35" pos:end="125:44"><literal type="number" pos:start="125:35" pos:end="125:44">0x00010000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="127:5" pos:end="135:5"><if pos:start="127:5" pos:end="131:5">if <condition pos:start="127:8" pos:end="127:33">(<expr pos:start="127:9" pos:end="127:32"><name pos:start="127:9" pos:end="127:17">disk_type</name> <operator pos:start="127:19" pos:end="127:20">==</operator> <name pos:start="127:22" pos:end="127:32">VHD_DYNAMIC</name></expr>)</condition> <block pos:start="127:35" pos:end="131:5">{<block_content pos:start="129:9" pos:end="129:55">

        <expr_stmt pos:start="129:9" pos:end="129:55"><expr pos:start="129:9" pos:end="129:54"><name pos:start="129:9" pos:end="129:27"><name pos:start="129:9" pos:end="129:14">footer</name><operator pos:start="129:15" pos:end="129:16">-&gt;</operator><name pos:start="129:17" pos:end="129:27">data_offset</name></name> <operator pos:start="129:29" pos:end="129:29">=</operator> <call pos:start="129:31" pos:end="129:54"><name pos:start="129:31" pos:end="129:41">be64_to_cpu</name><argument_list pos:start="129:42" pos:end="129:54">(<argument pos:start="129:43" pos:end="129:53"><expr pos:start="129:43" pos:end="129:53"><name pos:start="129:43" pos:end="129:53">HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="131:7" pos:end="135:5">else <block pos:start="131:12" pos:end="135:5">{<block_content pos:start="133:9" pos:end="133:65">

        <expr_stmt pos:start="133:9" pos:end="133:65"><expr pos:start="133:9" pos:end="133:64"><name pos:start="133:9" pos:end="133:27"><name pos:start="133:9" pos:end="133:14">footer</name><operator pos:start="133:15" pos:end="133:16">-&gt;</operator><name pos:start="133:17" pos:end="133:27">data_offset</name></name> <operator pos:start="133:29" pos:end="133:29">=</operator> <call pos:start="133:31" pos:end="133:64"><name pos:start="133:31" pos:end="133:41">be64_to_cpu</name><argument_list pos:start="133:42" pos:end="133:64">(<argument pos:start="133:43" pos:end="133:63"><expr pos:start="133:43" pos:end="133:63"><literal type="number" pos:start="133:43" pos:end="133:63">0xFFFFFFFFFFFFFFFFULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:69"><expr pos:start="137:5" pos:end="137:68"><name pos:start="137:5" pos:end="137:21"><name pos:start="137:5" pos:end="137:10">footer</name><operator pos:start="137:11" pos:end="137:12">-&gt;</operator><name pos:start="137:13" pos:end="137:21">timestamp</name></name> <operator pos:start="137:23" pos:end="137:23">=</operator> <call pos:start="137:25" pos:end="137:68"><name pos:start="137:25" pos:end="137:35">be32_to_cpu</name><argument_list pos:start="137:36" pos:end="137:68">(<argument pos:start="137:37" pos:end="137:67"><expr pos:start="137:37" pos:end="137:67"><call pos:start="137:37" pos:end="137:46"><name pos:start="137:37" pos:end="137:40">time</name><argument_list pos:start="137:41" pos:end="137:46">(<argument pos:start="137:42" pos:end="137:45"><expr pos:start="137:42" pos:end="137:45"><name pos:start="137:42" pos:end="137:45">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="137:48" pos:end="137:48">-</operator> <name pos:start="137:50" pos:end="137:67">VHD_TIMESTAMP_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="141:5" pos:end="141:36">/* Version of Virtual PC 2007 */</comment>

    <expr_stmt pos:start="143:5" pos:end="143:40"><expr pos:start="143:5" pos:end="143:39"><name pos:start="143:5" pos:end="143:17"><name pos:start="143:5" pos:end="143:10">footer</name><operator pos:start="143:11" pos:end="143:12">-&gt;</operator><name pos:start="143:13" pos:end="143:17">major</name></name> <operator pos:start="143:19" pos:end="143:19">=</operator> <call pos:start="143:21" pos:end="143:39"><name pos:start="143:21" pos:end="143:31">be16_to_cpu</name><argument_list pos:start="143:32" pos:end="143:39">(<argument pos:start="143:33" pos:end="143:38"><expr pos:start="143:33" pos:end="143:38"><literal type="number" pos:start="143:33" pos:end="143:38">0x0005</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:40"><expr pos:start="145:5" pos:end="145:39"><name pos:start="145:5" pos:end="145:17"><name pos:start="145:5" pos:end="145:10">footer</name><operator pos:start="145:11" pos:end="145:12">-&gt;</operator><name pos:start="145:13" pos:end="145:17">minor</name></name> <operator pos:start="145:19" pos:end="145:19">=</operator> <call pos:start="145:21" pos:end="145:39"><name pos:start="145:21" pos:end="145:31">be16_to_cpu</name><argument_list pos:start="145:32" pos:end="145:39">(<argument pos:start="145:33" pos:end="145:38"><expr pos:start="145:33" pos:end="145:38"><literal type="number" pos:start="145:33" pos:end="145:38">0x0003</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="147:5" pos:end="159:5"><if pos:start="147:5" pos:end="153:5">if <condition pos:start="147:8" pos:end="147:33">(<expr pos:start="147:9" pos:end="147:32"><name pos:start="147:9" pos:end="147:17">disk_type</name> <operator pos:start="147:19" pos:end="147:20">==</operator> <name pos:start="147:22" pos:end="147:32">VHD_DYNAMIC</name></expr>)</condition> <block pos:start="147:35" pos:end="153:5">{<block_content pos:start="149:9" pos:end="151:56">

        <expr_stmt pos:start="149:9" pos:end="149:61"><expr pos:start="149:9" pos:end="149:60"><name pos:start="149:9" pos:end="149:25"><name pos:start="149:9" pos:end="149:14">footer</name><operator pos:start="149:15" pos:end="149:16">-&gt;</operator><name pos:start="149:17" pos:end="149:25">orig_size</name></name> <operator pos:start="149:27" pos:end="149:27">=</operator> <call pos:start="149:29" pos:end="149:60"><name pos:start="149:29" pos:end="149:39">be64_to_cpu</name><argument_list pos:start="149:40" pos:end="149:60">(<argument pos:start="149:41" pos:end="149:59"><expr pos:start="149:41" pos:end="149:59"><name pos:start="149:41" pos:end="149:53">total_sectors</name> <operator pos:start="149:55" pos:end="149:55">*</operator> <literal type="number" pos:start="149:57" pos:end="149:59">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:56"><expr pos:start="151:9" pos:end="151:55"><name pos:start="151:9" pos:end="151:20"><name pos:start="151:9" pos:end="151:14">footer</name><operator pos:start="151:15" pos:end="151:16">-&gt;</operator><name pos:start="151:17" pos:end="151:20">size</name></name> <operator pos:start="151:22" pos:end="151:22">=</operator> <call pos:start="151:24" pos:end="151:55"><name pos:start="151:24" pos:end="151:34">be64_to_cpu</name><argument_list pos:start="151:35" pos:end="151:55">(<argument pos:start="151:36" pos:end="151:54"><expr pos:start="151:36" pos:end="151:54"><name pos:start="151:36" pos:end="151:48">total_sectors</name> <operator pos:start="151:50" pos:end="151:50">*</operator> <literal type="number" pos:start="151:52" pos:end="151:54">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="153:7" pos:end="159:5">else <block pos:start="153:12" pos:end="159:5">{<block_content pos:start="155:9" pos:end="157:47">

        <expr_stmt pos:start="155:9" pos:end="155:52"><expr pos:start="155:9" pos:end="155:51"><name pos:start="155:9" pos:end="155:25"><name pos:start="155:9" pos:end="155:14">footer</name><operator pos:start="155:15" pos:end="155:16">-&gt;</operator><name pos:start="155:17" pos:end="155:25">orig_size</name></name> <operator pos:start="155:27" pos:end="155:27">=</operator> <call pos:start="155:29" pos:end="155:51"><name pos:start="155:29" pos:end="155:39">be64_to_cpu</name><argument_list pos:start="155:40" pos:end="155:51">(<argument pos:start="155:41" pos:end="155:50"><expr pos:start="155:41" pos:end="155:50"><name pos:start="155:41" pos:end="155:50">total_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:47"><expr pos:start="157:9" pos:end="157:46"><name pos:start="157:9" pos:end="157:20"><name pos:start="157:9" pos:end="157:14">footer</name><operator pos:start="157:15" pos:end="157:16">-&gt;</operator><name pos:start="157:17" pos:end="157:20">size</name></name> <operator pos:start="157:22" pos:end="157:22">=</operator> <call pos:start="157:24" pos:end="157:46"><name pos:start="157:24" pos:end="157:34">be64_to_cpu</name><argument_list pos:start="157:35" pos:end="157:46">(<argument pos:start="157:36" pos:end="157:45"><expr pos:start="157:36" pos:end="157:45"><name pos:start="157:36" pos:end="157:45">total_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="161:5" pos:end="161:37"><expr pos:start="161:5" pos:end="161:36"><name pos:start="161:5" pos:end="161:16"><name pos:start="161:5" pos:end="161:10">footer</name><operator pos:start="161:11" pos:end="161:12">-&gt;</operator><name pos:start="161:13" pos:end="161:16">cyls</name></name> <operator pos:start="161:18" pos:end="161:18">=</operator> <call pos:start="161:20" pos:end="161:36"><name pos:start="161:20" pos:end="161:30">be16_to_cpu</name><argument_list pos:start="161:31" pos:end="161:36">(<argument pos:start="161:32" pos:end="161:35"><expr pos:start="161:32" pos:end="161:35"><name pos:start="161:32" pos:end="161:35">cyls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:26"><expr pos:start="163:5" pos:end="163:25"><name pos:start="163:5" pos:end="163:17"><name pos:start="163:5" pos:end="163:10">footer</name><operator pos:start="163:11" pos:end="163:12">-&gt;</operator><name pos:start="163:13" pos:end="163:17">heads</name></name> <operator pos:start="163:19" pos:end="163:19">=</operator> <name pos:start="163:21" pos:end="163:25">heads</name></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:40"><expr pos:start="165:5" pos:end="165:39"><name pos:start="165:5" pos:end="165:24"><name pos:start="165:5" pos:end="165:10">footer</name><operator pos:start="165:11" pos:end="165:12">-&gt;</operator><name pos:start="165:13" pos:end="165:24">secs_per_cyl</name></name> <operator pos:start="165:26" pos:end="165:26">=</operator> <name pos:start="165:28" pos:end="165:39">secs_per_cyl</name></expr>;</expr_stmt>



    <expr_stmt pos:start="169:5" pos:end="169:42"><expr pos:start="169:5" pos:end="169:41"><name pos:start="169:5" pos:end="169:16"><name pos:start="169:5" pos:end="169:10">footer</name><operator pos:start="169:11" pos:end="169:12">-&gt;</operator><name pos:start="169:13" pos:end="169:16">type</name></name> <operator pos:start="169:18" pos:end="169:18">=</operator> <call pos:start="169:20" pos:end="169:41"><name pos:start="169:20" pos:end="169:30">be32_to_cpu</name><argument_list pos:start="169:31" pos:end="169:41">(<argument pos:start="169:32" pos:end="169:40"><expr pos:start="169:32" pos:end="169:40"><name pos:start="169:32" pos:end="169:40">disk_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="173:5" pos:end="173:30">/* TODO uuid is missing */</comment>



    <expr_stmt pos:start="177:5" pos:end="177:67"><expr pos:start="177:5" pos:end="177:66"><name pos:start="177:5" pos:end="177:20"><name pos:start="177:5" pos:end="177:10">footer</name><operator pos:start="177:11" pos:end="177:12">-&gt;</operator><name pos:start="177:13" pos:end="177:20">checksum</name></name> <operator pos:start="177:22" pos:end="177:22">=</operator> <call pos:start="177:24" pos:end="177:66"><name pos:start="177:24" pos:end="177:34">be32_to_cpu</name><argument_list pos:start="177:35" pos:end="177:66">(<argument pos:start="177:36" pos:end="177:65"><expr pos:start="177:36" pos:end="177:65"><call pos:start="177:36" pos:end="177:65"><name pos:start="177:36" pos:end="177:47">vpc_checksum</name><argument_list pos:start="177:48" pos:end="177:65">(<argument pos:start="177:49" pos:end="177:51"><expr pos:start="177:49" pos:end="177:51"><name pos:start="177:49" pos:end="177:51">buf</name></expr></argument>, <argument pos:start="177:54" pos:end="177:64"><expr pos:start="177:54" pos:end="177:64"><name pos:start="177:54" pos:end="177:64">HEADER_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="181:5" pos:end="189:5"><if pos:start="181:5" pos:end="185:5">if <condition pos:start="181:8" pos:end="181:33">(<expr pos:start="181:9" pos:end="181:32"><name pos:start="181:9" pos:end="181:17">disk_type</name> <operator pos:start="181:19" pos:end="181:20">==</operator> <name pos:start="181:22" pos:end="181:32">VHD_DYNAMIC</name></expr>)</condition> <block pos:start="181:35" pos:end="185:5">{<block_content pos:start="183:9" pos:end="183:58">

        <expr_stmt pos:start="183:9" pos:end="183:58"><expr pos:start="183:9" pos:end="183:57"><name pos:start="183:9" pos:end="183:11">ret</name> <operator pos:start="183:13" pos:end="183:13">=</operator> <call pos:start="183:15" pos:end="183:57"><name pos:start="183:15" pos:end="183:33">create_dynamic_disk</name><argument_list pos:start="183:34" pos:end="183:57">(<argument pos:start="183:35" pos:end="183:36"><expr pos:start="183:35" pos:end="183:36"><name pos:start="183:35" pos:end="183:36">fd</name></expr></argument>, <argument pos:start="183:39" pos:end="183:41"><expr pos:start="183:39" pos:end="183:41"><name pos:start="183:39" pos:end="183:41">buf</name></expr></argument>, <argument pos:start="183:44" pos:end="183:56"><expr pos:start="183:44" pos:end="183:56"><name pos:start="183:44" pos:end="183:56">total_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="185:7" pos:end="189:5">else <block pos:start="185:12" pos:end="189:5">{<block_content pos:start="187:9" pos:end="187:53">

        <expr_stmt pos:start="187:9" pos:end="187:53"><expr pos:start="187:9" pos:end="187:52"><name pos:start="187:9" pos:end="187:11">ret</name> <operator pos:start="187:13" pos:end="187:13">=</operator> <call pos:start="187:15" pos:end="187:52"><name pos:start="187:15" pos:end="187:31">create_fixed_disk</name><argument_list pos:start="187:32" pos:end="187:52">(<argument pos:start="187:33" pos:end="187:34"><expr pos:start="187:33" pos:end="187:34"><name pos:start="187:33" pos:end="187:34">fd</name></expr></argument>, <argument pos:start="187:37" pos:end="187:39"><expr pos:start="187:37" pos:end="187:39"><name pos:start="187:37" pos:end="187:39">buf</name></expr></argument>, <argument pos:start="187:42" pos:end="187:51"><expr pos:start="187:42" pos:end="187:51"><name pos:start="187:42" pos:end="187:51">total_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



 <label pos:start="193:2" pos:end="193:6"><name pos:start="193:2" pos:end="193:5">fail</name>:</label>

    <expr_stmt pos:start="195:5" pos:end="195:19"><expr pos:start="195:5" pos:end="195:18"><call pos:start="195:5" pos:end="195:18"><name pos:start="195:5" pos:end="195:14">qemu_close</name><argument_list pos:start="195:15" pos:end="195:18">(<argument pos:start="195:16" pos:end="195:17"><expr pos:start="195:16" pos:end="195:17"><name pos:start="195:16" pos:end="195:17">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="197:5" pos:end="197:15">return <expr pos:start="197:12" pos:end="197:14"><name pos:start="197:12" pos:end="197:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
