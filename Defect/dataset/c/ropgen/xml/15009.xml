<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15009.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">mov_read_stco</name><parameter_list pos:start="1:25" pos:end="1:72">(<parameter pos:start="1:26" pos:end="1:38"><decl pos:start="1:26" pos:end="1:38"><type pos:start="1:26" pos:end="1:38"><name pos:start="1:26" pos:end="1:35">MOVContext</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">c</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:57"><decl pos:start="1:41" pos:end="1:57"><type pos:start="1:41" pos:end="1:57"><name pos:start="1:41" pos:end="1:53">ByteIOContext</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:57">pb</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:71"><decl pos:start="1:60" pos:end="1:71"><type pos:start="1:60" pos:end="1:71"><name pos:start="1:60" pos:end="1:66">MOVAtom</name></type> <name pos:start="1:68" pos:end="1:71">atom</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="59:1">{<block_content pos:start="5:5" pos:end="57:13">

    <decl_stmt pos:start="5:5" pos:end="5:55"><decl pos:start="5:5" pos:end="5:54"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">AVStream</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">st</name> <init pos:start="5:18" pos:end="5:54">= <expr pos:start="5:20" pos:end="5:54"><name pos:start="5:20" pos:end="5:54"><name pos:start="5:20" pos:end="5:20">c</name><operator pos:start="5:21" pos:end="5:22">-&gt;</operator><name pos:start="5:23" pos:end="5:24">fc</name><operator pos:start="5:25" pos:end="5:26">-&gt;</operator><name pos:start="5:27" pos:end="5:33">streams</name><index pos:start="5:34" pos:end="5:54">[<expr pos:start="5:35" pos:end="5:53"><name pos:start="5:35" pos:end="5:51"><name pos:start="5:35" pos:end="5:35">c</name><operator pos:start="5:36" pos:end="5:37">-&gt;</operator><name pos:start="5:38" pos:end="5:39">fc</name><operator pos:start="5:40" pos:end="5:41">-&gt;</operator><name pos:start="5:42" pos:end="5:51">nb_streams</name></name><operator pos:start="5:52" pos:end="5:52">-</operator><literal type="number" pos:start="5:53" pos:end="5:53">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">MOVStreamContext</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:24">sc</name> <init pos:start="7:26" pos:end="7:40">= <expr pos:start="7:28" pos:end="7:40"><name pos:start="7:28" pos:end="7:40"><name pos:start="7:28" pos:end="7:29">st</name><operator pos:start="7:30" pos:end="7:31">-&gt;</operator><name pos:start="7:32" pos:end="7:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:16">int</name></type> <name pos:start="9:18" pos:end="9:18">i</name></decl>, <decl pos:start="9:21" pos:end="9:27"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:21" pos:end="9:27">entries</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:17"><expr pos:start="13:5" pos:end="13:16"><call pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:12">get_byte</name><argument_list pos:start="13:13" pos:end="13:16">(<argument pos:start="13:14" pos:end="13:15"><expr pos:start="13:14" pos:end="13:15"><name pos:start="13:14" pos:end="13:15">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="13:19" pos:end="13:31">/* version */</comment>

    <expr_stmt pos:start="15:5" pos:end="15:17"><expr pos:start="15:5" pos:end="15:16"><call pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:12">get_be24</name><argument_list pos:start="15:13" pos:end="15:16">(<argument pos:start="15:14" pos:end="15:15"><expr pos:start="15:14" pos:end="15:15"><name pos:start="15:14" pos:end="15:15">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="15:19" pos:end="15:29">/* flags */</comment>



    <expr_stmt pos:start="19:5" pos:end="19:27"><expr pos:start="19:5" pos:end="19:26"><name pos:start="19:5" pos:end="19:11">entries</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <call pos:start="19:15" pos:end="19:26"><name pos:start="19:15" pos:end="19:22">get_be32</name><argument_list pos:start="19:23" pos:end="19:26">(<argument pos:start="19:24" pos:end="19:25"><expr pos:start="19:24" pos:end="19:25"><name pos:start="19:24" pos:end="19:25">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="23:5" pos:end="25:18"><if pos:start="23:5" pos:end="25:18">if<condition pos:start="23:7" pos:end="23:43">(<expr pos:start="23:8" pos:end="23:42"><name pos:start="23:8" pos:end="23:14">entries</name> <operator pos:start="23:16" pos:end="23:17">&gt;=</operator> <name pos:start="23:19" pos:end="23:26">UINT_MAX</name><operator pos:start="23:27" pos:end="23:27">/</operator><sizeof pos:start="23:28" pos:end="23:42">sizeof<argument_list pos:start="23:34" pos:end="23:42">(<argument pos:start="23:35" pos:end="23:41"><expr pos:start="23:35" pos:end="23:41"><name pos:start="23:35" pos:end="23:41">int64_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:18"><block_content pos:start="25:9" pos:end="25:18">

        <return pos:start="25:9" pos:end="25:18">return <expr pos:start="25:16" pos:end="25:17"><operator pos:start="25:16" pos:end="25:16">-</operator><literal type="number" pos:start="25:17" pos:end="25:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:61"><expr pos:start="29:5" pos:end="29:60"><name pos:start="29:5" pos:end="29:21"><name pos:start="29:5" pos:end="29:6">sc</name><operator pos:start="29:7" pos:end="29:8">-&gt;</operator><name pos:start="29:9" pos:end="29:21">chunk_offsets</name></name> <operator pos:start="29:23" pos:end="29:23">=</operator> <call pos:start="29:25" pos:end="29:60"><name pos:start="29:25" pos:end="29:33">av_malloc</name><argument_list pos:start="29:34" pos:end="29:60">(<argument pos:start="29:35" pos:end="29:59"><expr pos:start="29:35" pos:end="29:59"><name pos:start="29:35" pos:end="29:41">entries</name> <operator pos:start="29:43" pos:end="29:43">*</operator> <sizeof pos:start="29:45" pos:end="29:59">sizeof<argument_list pos:start="29:51" pos:end="29:59">(<argument pos:start="29:52" pos:end="29:58"><expr pos:start="29:52" pos:end="29:58"><name pos:start="29:52" pos:end="29:58">int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="33:31"><if pos:start="31:5" pos:end="33:31">if <condition pos:start="31:8" pos:end="31:27">(<expr pos:start="31:9" pos:end="31:26"><operator pos:start="31:9" pos:end="31:9">!</operator><name pos:start="31:10" pos:end="31:26"><name pos:start="31:10" pos:end="31:11">sc</name><operator pos:start="31:12" pos:end="31:13">-&gt;</operator><name pos:start="31:14" pos:end="31:26">chunk_offsets</name></name></expr>)</condition><block type="pseudo" pos:start="33:9" pos:end="33:31"><block_content pos:start="33:9" pos:end="33:31">

        <return pos:start="33:9" pos:end="33:31">return <expr pos:start="33:16" pos:end="33:30"><call pos:start="33:16" pos:end="33:30"><name pos:start="33:16" pos:end="33:22">AVERROR</name><argument_list pos:start="33:23" pos:end="33:30">(<argument pos:start="33:24" pos:end="33:29"><expr pos:start="33:24" pos:end="33:29"><name pos:start="33:24" pos:end="33:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:30"><expr pos:start="35:5" pos:end="35:29"><name pos:start="35:5" pos:end="35:19"><name pos:start="35:5" pos:end="35:6">sc</name><operator pos:start="35:7" pos:end="35:8">-&gt;</operator><name pos:start="35:9" pos:end="35:19">chunk_count</name></name> <operator pos:start="35:21" pos:end="35:21">=</operator> <name pos:start="35:23" pos:end="35:29">entries</name></expr>;</expr_stmt>



    <if_stmt pos:start="39:5" pos:end="53:18"><if pos:start="39:5" pos:end="43:48">if      <condition pos:start="39:13" pos:end="39:49">(<expr pos:start="39:14" pos:end="39:48"><name pos:start="39:14" pos:end="39:22"><name pos:start="39:14" pos:end="39:17">atom</name><operator pos:start="39:18" pos:end="39:18">.</operator><name pos:start="39:19" pos:end="39:22">type</name></name> <operator pos:start="39:24" pos:end="39:25">==</operator> <call pos:start="39:27" pos:end="39:48"><name pos:start="39:27" pos:end="39:31">MKTAG</name><argument_list pos:start="39:32" pos:end="39:48">(<argument pos:start="39:33" pos:end="39:35"><expr pos:start="39:33" pos:end="39:35"><literal type="char" pos:start="39:33" pos:end="39:35">'s'</literal></expr></argument>,<argument pos:start="39:37" pos:end="39:39"><expr pos:start="39:37" pos:end="39:39"><literal type="char" pos:start="39:37" pos:end="39:39">'t'</literal></expr></argument>,<argument pos:start="39:41" pos:end="39:43"><expr pos:start="39:41" pos:end="39:43"><literal type="char" pos:start="39:41" pos:end="39:43">'c'</literal></expr></argument>,<argument pos:start="39:45" pos:end="39:47"><expr pos:start="39:45" pos:end="39:47"><literal type="char" pos:start="39:45" pos:end="39:47">'o'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="41:9" pos:end="43:48"><block_content pos:start="41:9" pos:end="43:48">

        <for pos:start="41:9" pos:end="43:48">for<control pos:start="41:12" pos:end="41:32">(<init pos:start="41:13" pos:end="41:16"><expr pos:start="41:13" pos:end="41:15"><name pos:start="41:13" pos:end="41:13">i</name><operator pos:start="41:14" pos:end="41:14">=</operator><literal type="number" pos:start="41:15" pos:end="41:15">0</literal></expr>;</init> <condition pos:start="41:18" pos:end="41:27"><expr pos:start="41:18" pos:end="41:26"><name pos:start="41:18" pos:end="41:18">i</name><operator pos:start="41:19" pos:end="41:19">&lt;</operator><name pos:start="41:20" pos:end="41:26">entries</name></expr>;</condition> <incr pos:start="41:29" pos:end="41:31"><expr pos:start="41:29" pos:end="41:31"><name pos:start="41:29" pos:end="41:29">i</name><operator pos:start="41:30" pos:end="41:31">++</operator></expr></incr>)</control><block type="pseudo" pos:start="43:13" pos:end="43:48"><block_content pos:start="43:13" pos:end="43:48">

            <expr_stmt pos:start="43:13" pos:end="43:48"><expr pos:start="43:13" pos:end="43:47"><name pos:start="43:13" pos:end="43:32"><name pos:start="43:13" pos:end="43:14">sc</name><operator pos:start="43:15" pos:end="43:16">-&gt;</operator><name pos:start="43:17" pos:end="43:29">chunk_offsets</name><index pos:start="43:30" pos:end="43:32">[<expr pos:start="43:31" pos:end="43:31"><name pos:start="43:31" pos:end="43:31">i</name></expr>]</index></name> <operator pos:start="43:34" pos:end="43:34">=</operator> <call pos:start="43:36" pos:end="43:47"><name pos:start="43:36" pos:end="43:43">get_be32</name><argument_list pos:start="43:44" pos:end="43:47">(<argument pos:start="43:45" pos:end="43:46"><expr pos:start="43:45" pos:end="43:46"><name pos:start="43:45" pos:end="43:46">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if>

    <if type="elseif" pos:start="45:5" pos:end="49:48">else if <condition pos:start="45:13" pos:end="45:49">(<expr pos:start="45:14" pos:end="45:48"><name pos:start="45:14" pos:end="45:22"><name pos:start="45:14" pos:end="45:17">atom</name><operator pos:start="45:18" pos:end="45:18">.</operator><name pos:start="45:19" pos:end="45:22">type</name></name> <operator pos:start="45:24" pos:end="45:25">==</operator> <call pos:start="45:27" pos:end="45:48"><name pos:start="45:27" pos:end="45:31">MKTAG</name><argument_list pos:start="45:32" pos:end="45:48">(<argument pos:start="45:33" pos:end="45:35"><expr pos:start="45:33" pos:end="45:35"><literal type="char" pos:start="45:33" pos:end="45:35">'c'</literal></expr></argument>,<argument pos:start="45:37" pos:end="45:39"><expr pos:start="45:37" pos:end="45:39"><literal type="char" pos:start="45:37" pos:end="45:39">'o'</literal></expr></argument>,<argument pos:start="45:41" pos:end="45:43"><expr pos:start="45:41" pos:end="45:43"><literal type="char" pos:start="45:41" pos:end="45:43">'6'</literal></expr></argument>,<argument pos:start="45:45" pos:end="45:47"><expr pos:start="45:45" pos:end="45:47"><literal type="char" pos:start="45:45" pos:end="45:47">'4'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="47:9" pos:end="49:48"><block_content pos:start="47:9" pos:end="49:48">

        <for pos:start="47:9" pos:end="49:48">for<control pos:start="47:12" pos:end="47:32">(<init pos:start="47:13" pos:end="47:16"><expr pos:start="47:13" pos:end="47:15"><name pos:start="47:13" pos:end="47:13">i</name><operator pos:start="47:14" pos:end="47:14">=</operator><literal type="number" pos:start="47:15" pos:end="47:15">0</literal></expr>;</init> <condition pos:start="47:18" pos:end="47:27"><expr pos:start="47:18" pos:end="47:26"><name pos:start="47:18" pos:end="47:18">i</name><operator pos:start="47:19" pos:end="47:19">&lt;</operator><name pos:start="47:20" pos:end="47:26">entries</name></expr>;</condition> <incr pos:start="47:29" pos:end="47:31"><expr pos:start="47:29" pos:end="47:31"><name pos:start="47:29" pos:end="47:29">i</name><operator pos:start="47:30" pos:end="47:31">++</operator></expr></incr>)</control><block type="pseudo" pos:start="49:13" pos:end="49:48"><block_content pos:start="49:13" pos:end="49:48">

            <expr_stmt pos:start="49:13" pos:end="49:48"><expr pos:start="49:13" pos:end="49:47"><name pos:start="49:13" pos:end="49:32"><name pos:start="49:13" pos:end="49:14">sc</name><operator pos:start="49:15" pos:end="49:16">-&gt;</operator><name pos:start="49:17" pos:end="49:29">chunk_offsets</name><index pos:start="49:30" pos:end="49:32">[<expr pos:start="49:31" pos:end="49:31"><name pos:start="49:31" pos:end="49:31">i</name></expr>]</index></name> <operator pos:start="49:34" pos:end="49:34">=</operator> <call pos:start="49:36" pos:end="49:47"><name pos:start="49:36" pos:end="49:43">get_be64</name><argument_list pos:start="49:44" pos:end="49:47">(<argument pos:start="49:45" pos:end="49:46"><expr pos:start="49:45" pos:end="49:46"><name pos:start="49:45" pos:end="49:46">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if>

    <else pos:start="51:5" pos:end="53:18">else<block type="pseudo" pos:start="53:9" pos:end="53:18"><block_content pos:start="53:9" pos:end="53:18">

        <return pos:start="53:9" pos:end="53:18">return <expr pos:start="53:16" pos:end="53:17"><operator pos:start="53:16" pos:end="53:16">-</operator><literal type="number" pos:start="53:17" pos:end="53:17">1</literal></expr>;</return></block_content></block></else></if_stmt>



    <return pos:start="57:5" pos:end="57:13">return <expr pos:start="57:12" pos:end="57:12"><literal type="number" pos:start="57:12" pos:end="57:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
