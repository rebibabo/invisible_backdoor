<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15900.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">ahci_start_transfer</name><parameter_list pos:start="1:32" pos:end="1:44">(<parameter pos:start="1:33" pos:end="1:43"><decl pos:start="1:33" pos:end="1:43"><type pos:start="1:33" pos:end="1:40"><name pos:start="1:33" pos:end="1:38">IDEDMA</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">dma</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="95:1">{<block_content pos:start="5:5" pos:end="93:5">

    <decl_stmt pos:start="5:5" pos:end="5:53"><decl pos:start="5:5" pos:end="5:52"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">AHCIDevice</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:18">ad</name> <init pos:start="5:20" pos:end="5:52">= <expr pos:start="5:22" pos:end="5:52"><call pos:start="5:22" pos:end="5:52"><name pos:start="5:22" pos:end="5:30">DO_UPCAST</name><argument_list pos:start="5:31" pos:end="5:52">(<argument pos:start="5:32" pos:end="5:41"><expr pos:start="5:32" pos:end="5:41"><name pos:start="5:32" pos:end="5:41">AHCIDevice</name></expr></argument>, <argument pos:start="5:44" pos:end="5:46"><expr pos:start="5:44" pos:end="5:46"><name pos:start="5:44" pos:end="5:46">dma</name></expr></argument>, <argument pos:start="5:49" pos:end="5:51"><expr pos:start="5:49" pos:end="5:51"><name pos:start="5:49" pos:end="5:51">dma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">IDEState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:15">s</name> <init pos:start="7:17" pos:end="7:34">= <expr pos:start="7:19" pos:end="7:34"><operator pos:start="7:19" pos:end="7:19">&amp;</operator><name pos:start="7:20" pos:end="7:34"><name pos:start="7:20" pos:end="7:21">ad</name><operator pos:start="7:22" pos:end="7:23">-&gt;</operator><name pos:start="7:24" pos:end="7:27">port</name><operator pos:start="7:28" pos:end="7:28">.</operator><name pos:start="7:29" pos:end="7:31">ifs</name><index pos:start="7:32" pos:end="7:34">[<expr pos:start="7:33" pos:end="7:33"><literal type="number" pos:start="7:33" pos:end="7:33">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:58"><decl pos:start="9:5" pos:end="9:57"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:17">size</name> <init pos:start="9:19" pos:end="9:57">= <expr pos:start="9:21" pos:end="9:57"><operator pos:start="9:21" pos:end="9:21">(</operator><name pos:start="9:22" pos:end="9:29">uint32_t</name><operator pos:start="9:30" pos:end="9:30">)</operator><operator pos:start="9:31" pos:end="9:31">(</operator><name pos:start="9:32" pos:end="9:42"><name pos:start="9:32" pos:end="9:32">s</name><operator pos:start="9:33" pos:end="9:34">-&gt;</operator><name pos:start="9:35" pos:end="9:42">data_end</name></name> <operator pos:start="9:44" pos:end="9:44">-</operator> <name pos:start="9:46" pos:end="9:56"><name pos:start="9:46" pos:end="9:46">s</name><operator pos:start="9:47" pos:end="9:48">-&gt;</operator><name pos:start="9:49" pos:end="9:56">data_ptr</name></name><operator pos:start="9:57" pos:end="9:57">)</operator></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="11:5" pos:end="11:32">/* write == ram -&gt; device */</comment>

    <decl_stmt pos:start="13:5" pos:end="13:51"><decl pos:start="13:5" pos:end="13:50"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:17">opts</name> <init pos:start="13:19" pos:end="13:50">= <expr pos:start="13:21" pos:end="13:50"><call pos:start="13:21" pos:end="13:50"><name pos:start="13:21" pos:end="13:31">le32_to_cpu</name><argument_list pos:start="13:32" pos:end="13:50">(<argument pos:start="13:33" pos:end="13:49"><expr pos:start="13:33" pos:end="13:49"><name pos:start="13:33" pos:end="13:49"><name pos:start="13:33" pos:end="13:34">ad</name><operator pos:start="13:35" pos:end="13:36">-&gt;</operator><name pos:start="13:37" pos:end="13:43">cur_cmd</name><operator pos:start="13:44" pos:end="13:45">-&gt;</operator><name pos:start="13:46" pos:end="13:49">opts</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:41"><decl pos:start="15:5" pos:end="15:40"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:16">is_write</name> <init pos:start="15:18" pos:end="15:40">= <expr pos:start="15:20" pos:end="15:40"><name pos:start="15:20" pos:end="15:23">opts</name> <operator pos:start="15:25" pos:end="15:25">&amp;</operator> <name pos:start="15:27" pos:end="15:40">AHCI_CMD_WRITE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:41"><decl pos:start="17:5" pos:end="17:40"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:16">is_atapi</name> <init pos:start="17:18" pos:end="17:40">= <expr pos:start="17:20" pos:end="17:40"><name pos:start="17:20" pos:end="17:23">opts</name> <operator pos:start="17:25" pos:end="17:25">&amp;</operator> <name pos:start="17:27" pos:end="17:40">AHCI_CMD_ATAPI</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:23"><decl pos:start="19:5" pos:end="19:22"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:18">has_sglist</name> <init pos:start="19:20" pos:end="19:22">= <expr pos:start="19:22" pos:end="19:22"><literal type="number" pos:start="19:22" pos:end="19:22">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="33:5"><if pos:start="23:5" pos:end="33:5">if <condition pos:start="23:8" pos:end="23:43">(<expr pos:start="23:9" pos:end="23:42"><name pos:start="23:9" pos:end="23:16">is_atapi</name> <operator pos:start="23:18" pos:end="23:19">&amp;&amp;</operator> <operator pos:start="23:21" pos:end="23:21">!</operator><name pos:start="23:22" pos:end="23:42"><name pos:start="23:22" pos:end="23:23">ad</name><operator pos:start="23:24" pos:end="23:25">-&gt;</operator><name pos:start="23:26" pos:end="23:42">done_atapi_packet</name></name></expr>)</condition> <block pos:start="23:45" pos:end="33:5">{<block_content pos:start="27:9" pos:end="31:17">

        <comment type="block" pos:start="25:9" pos:end="25:43">/* already prepopulated iobuffer */</comment>

        <expr_stmt pos:start="27:9" pos:end="27:37"><expr pos:start="27:9" pos:end="27:36"><name pos:start="27:9" pos:end="27:29"><name pos:start="27:9" pos:end="27:10">ad</name><operator pos:start="27:11" pos:end="27:12">-&gt;</operator><name pos:start="27:13" pos:end="27:29">done_atapi_packet</name></name> <operator pos:start="27:31" pos:end="27:31">=</operator> <name pos:start="27:33" pos:end="27:36">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:17"><expr pos:start="29:9" pos:end="29:16"><name pos:start="29:9" pos:end="29:12">size</name> <operator pos:start="29:14" pos:end="29:14">=</operator> <literal type="number" pos:start="29:16" pos:end="29:16">0</literal></expr>;</expr_stmt>

        <goto pos:start="31:9" pos:end="31:17">goto <name pos:start="31:14" pos:end="31:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="41:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:63">(<expr pos:start="37:9" pos:end="37:62"><operator pos:start="37:9" pos:end="37:9">!</operator><call pos:start="37:10" pos:end="37:62"><name pos:start="37:10" pos:end="37:29">ahci_populate_sglist</name><argument_list pos:start="37:30" pos:end="37:62">(<argument pos:start="37:31" pos:end="37:32"><expr pos:start="37:31" pos:end="37:32"><name pos:start="37:31" pos:end="37:32">ad</name></expr></argument>, <argument pos:start="37:35" pos:end="37:40"><expr pos:start="37:35" pos:end="37:40"><operator pos:start="37:35" pos:end="37:35">&amp;</operator><name pos:start="37:36" pos:end="37:40"><name pos:start="37:36" pos:end="37:36">s</name><operator pos:start="37:37" pos:end="37:38">-&gt;</operator><name pos:start="37:39" pos:end="37:40">sg</name></name></expr></argument>, <argument pos:start="37:43" pos:end="37:61"><expr pos:start="37:43" pos:end="37:61"><name pos:start="37:43" pos:end="37:61"><name pos:start="37:43" pos:end="37:43">s</name><operator pos:start="37:44" pos:end="37:45">-&gt;</operator><name pos:start="37:46" pos:end="37:61">io_buffer_offset</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="37:65" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:23">

        <expr_stmt pos:start="39:9" pos:end="39:23"><expr pos:start="39:9" pos:end="39:22"><name pos:start="39:9" pos:end="39:18">has_sglist</name> <operator pos:start="39:20" pos:end="39:20">=</operator> <literal type="number" pos:start="39:22" pos:end="39:22">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="49:35"><expr pos:start="45:5" pos:end="49:34"><call pos:start="45:5" pos:end="49:34"><name pos:start="45:5" pos:end="45:11">DPRINTF</name><argument_list pos:start="45:12" pos:end="49:34">(<argument pos:start="45:13" pos:end="45:23"><expr pos:start="45:13" pos:end="45:23"><name pos:start="45:13" pos:end="45:23"><name pos:start="45:13" pos:end="45:14">ad</name><operator pos:start="45:15" pos:end="45:16">-&gt;</operator><name pos:start="45:17" pos:end="45:23">port_no</name></name></expr></argument>, <argument pos:start="45:26" pos:end="45:61"><expr pos:start="45:26" pos:end="45:61"><literal type="string" pos:start="45:26" pos:end="45:61">"%sing %d bytes on %s w/%s sglist\n"</literal></expr></argument>,

            <argument pos:start="47:13" pos:end="47:38"><expr pos:start="47:13" pos:end="47:38"><ternary pos:start="47:13" pos:end="47:38"><condition pos:start="47:13" pos:end="47:22"><expr pos:start="47:13" pos:end="47:20"><name pos:start="47:13" pos:end="47:20">is_write</name></expr> ?</condition><then pos:start="47:24" pos:end="47:29"> <expr pos:start="47:24" pos:end="47:29"><literal type="string" pos:start="47:24" pos:end="47:29">"writ"</literal></expr> </then><else pos:start="47:31" pos:end="47:38">: <expr pos:start="47:33" pos:end="47:38"><literal type="string" pos:start="47:33" pos:end="47:38">"read"</literal></expr></else></ternary></expr></argument>, <argument pos:start="47:41" pos:end="47:44"><expr pos:start="47:41" pos:end="47:44"><name pos:start="47:41" pos:end="47:44">size</name></expr></argument>, <argument pos:start="47:47" pos:end="47:72"><expr pos:start="47:47" pos:end="47:72"><ternary pos:start="47:47" pos:end="47:72"><condition pos:start="47:47" pos:end="47:56"><expr pos:start="47:47" pos:end="47:54"><name pos:start="47:47" pos:end="47:54">is_atapi</name></expr> ?</condition><then pos:start="47:58" pos:end="47:64"> <expr pos:start="47:58" pos:end="47:64"><literal type="string" pos:start="47:58" pos:end="47:64">"atapi"</literal></expr> </then><else pos:start="47:66" pos:end="47:72">: <expr pos:start="47:68" pos:end="47:72"><literal type="string" pos:start="47:68" pos:end="47:72">"ata"</literal></expr></else></ternary></expr></argument>,

            <argument pos:start="49:13" pos:end="49:33"><expr pos:start="49:13" pos:end="49:33"><ternary pos:start="49:13" pos:end="49:33"><condition pos:start="49:13" pos:end="49:24"><expr pos:start="49:13" pos:end="49:22"><name pos:start="49:13" pos:end="49:22">has_sglist</name></expr> ?</condition><then pos:start="49:26" pos:end="49:27"> <expr pos:start="49:26" pos:end="49:27"><literal type="string" pos:start="49:26" pos:end="49:27">""</literal></expr> </then><else pos:start="49:29" pos:end="49:33">: <expr pos:start="49:31" pos:end="49:33"><literal type="string" pos:start="49:31" pos:end="49:33">"o"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="53:5" pos:end="65:5"><if pos:start="53:5" pos:end="65:5">if <condition pos:start="53:8" pos:end="53:27">(<expr pos:start="53:9" pos:end="53:26"><name pos:start="53:9" pos:end="53:18">has_sglist</name> <operator pos:start="53:20" pos:end="53:21">&amp;&amp;</operator> <name pos:start="53:23" pos:end="53:26">size</name></expr>)</condition> <block pos:start="53:29" pos:end="65:5">{<block_content pos:start="55:9" pos:end="63:9">

        <if_stmt pos:start="55:9" pos:end="63:9"><if pos:start="55:9" pos:end="59:9">if <condition pos:start="55:12" pos:end="55:21">(<expr pos:start="55:13" pos:end="55:20"><name pos:start="55:13" pos:end="55:20">is_write</name></expr>)</condition> <block pos:start="55:23" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:53">

            <expr_stmt pos:start="57:13" pos:end="57:53"><expr pos:start="57:13" pos:end="57:52"><call pos:start="57:13" pos:end="57:52"><name pos:start="57:13" pos:end="57:25">dma_buf_write</name><argument_list pos:start="57:26" pos:end="57:52">(<argument pos:start="57:27" pos:end="57:37"><expr pos:start="57:27" pos:end="57:37"><name pos:start="57:27" pos:end="57:37"><name pos:start="57:27" pos:end="57:27">s</name><operator pos:start="57:28" pos:end="57:29">-&gt;</operator><name pos:start="57:30" pos:end="57:37">data_ptr</name></name></expr></argument>, <argument pos:start="57:40" pos:end="57:43"><expr pos:start="57:40" pos:end="57:43"><name pos:start="57:40" pos:end="57:43">size</name></expr></argument>, <argument pos:start="57:46" pos:end="57:51"><expr pos:start="57:46" pos:end="57:51"><operator pos:start="57:46" pos:end="57:46">&amp;</operator><name pos:start="57:47" pos:end="57:51"><name pos:start="57:47" pos:end="57:47">s</name><operator pos:start="57:48" pos:end="57:49">-&gt;</operator><name pos:start="57:50" pos:end="57:51">sg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="59:11" pos:end="63:9">else <block pos:start="59:16" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:52">

            <expr_stmt pos:start="61:13" pos:end="61:52"><expr pos:start="61:13" pos:end="61:51"><call pos:start="61:13" pos:end="61:51"><name pos:start="61:13" pos:end="61:24">dma_buf_read</name><argument_list pos:start="61:25" pos:end="61:51">(<argument pos:start="61:26" pos:end="61:36"><expr pos:start="61:26" pos:end="61:36"><name pos:start="61:26" pos:end="61:36"><name pos:start="61:26" pos:end="61:26">s</name><operator pos:start="61:27" pos:end="61:28">-&gt;</operator><name pos:start="61:29" pos:end="61:36">data_ptr</name></name></expr></argument>, <argument pos:start="61:39" pos:end="61:42"><expr pos:start="61:39" pos:end="61:42"><name pos:start="61:39" pos:end="61:42">size</name></expr></argument>, <argument pos:start="61:45" pos:end="61:50"><expr pos:start="61:45" pos:end="61:50"><operator pos:start="61:45" pos:end="61:45">&amp;</operator><name pos:start="61:46" pos:end="61:50"><name pos:start="61:46" pos:end="61:46">s</name><operator pos:start="61:47" pos:end="61:48">-&gt;</operator><name pos:start="61:49" pos:end="61:50">sg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="69:1" pos:end="69:4"><name pos:start="69:1" pos:end="69:3">out</name>:</label>

    <comment type="block" pos:start="71:5" pos:end="71:46">/* declare that we processed everything */</comment>

    <expr_stmt pos:start="73:5" pos:end="73:30"><expr pos:start="73:5" pos:end="73:29"><name pos:start="73:5" pos:end="73:15"><name pos:start="73:5" pos:end="73:5">s</name><operator pos:start="73:6" pos:end="73:7">-&gt;</operator><name pos:start="73:8" pos:end="73:15">data_ptr</name></name> <operator pos:start="73:17" pos:end="73:17">=</operator> <name pos:start="73:19" pos:end="73:29"><name pos:start="73:19" pos:end="73:19">s</name><operator pos:start="73:20" pos:end="73:21">-&gt;</operator><name pos:start="73:22" pos:end="73:29">data_end</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="77:5" pos:end="77:60">/* Update number of transferred bytes, destroy sglist */</comment>

    <expr_stmt pos:start="79:5" pos:end="79:31"><expr pos:start="79:5" pos:end="79:30"><call pos:start="79:5" pos:end="79:30"><name pos:start="79:5" pos:end="79:19">ahci_commit_buf</name><argument_list pos:start="79:20" pos:end="79:30">(<argument pos:start="79:21" pos:end="79:23"><expr pos:start="79:21" pos:end="79:23"><name pos:start="79:21" pos:end="79:23">dma</name></expr></argument>, <argument pos:start="79:26" pos:end="79:29"><expr pos:start="79:26" pos:end="79:29"><name pos:start="79:26" pos:end="79:29">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:28"><expr pos:start="83:5" pos:end="83:27"><call pos:start="83:5" pos:end="83:27"><name pos:start="83:5" pos:end="83:24"><name pos:start="83:5" pos:end="83:5">s</name><operator pos:start="83:6" pos:end="83:7">-&gt;</operator><name pos:start="83:8" pos:end="83:24">end_transfer_func</name></name><argument_list pos:start="83:25" pos:end="83:27">(<argument pos:start="83:26" pos:end="83:26"><expr pos:start="83:26" pos:end="83:26"><name pos:start="83:26" pos:end="83:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="87:5" pos:end="93:5"><if pos:start="87:5" pos:end="93:5">if <condition pos:start="87:8" pos:end="87:32">(<expr pos:start="87:9" pos:end="87:31"><operator pos:start="87:9" pos:end="87:9">!</operator><operator pos:start="87:10" pos:end="87:10">(</operator><name pos:start="87:11" pos:end="87:19"><name pos:start="87:11" pos:end="87:11">s</name><operator pos:start="87:12" pos:end="87:13">-&gt;</operator><name pos:start="87:14" pos:end="87:19">status</name></name> <operator pos:start="87:21" pos:end="87:21">&amp;</operator> <name pos:start="87:23" pos:end="87:30">DRQ_STAT</name><operator pos:start="87:31" pos:end="87:31">)</operator></expr>)</condition> <block pos:start="87:34" pos:end="93:5">{<block_content pos:start="91:9" pos:end="91:65">

        <comment type="block" pos:start="89:9" pos:end="89:40">/* done with PIO send/receive */</comment>

        <expr_stmt pos:start="91:9" pos:end="91:65"><expr pos:start="91:9" pos:end="91:64"><call pos:start="91:9" pos:end="91:64"><name pos:start="91:9" pos:end="91:26">ahci_write_fis_pio</name><argument_list pos:start="91:27" pos:end="91:64">(<argument pos:start="91:28" pos:end="91:29"><expr pos:start="91:28" pos:end="91:29"><name pos:start="91:28" pos:end="91:29">ad</name></expr></argument>, <argument pos:start="91:32" pos:end="91:63"><expr pos:start="91:32" pos:end="91:63"><call pos:start="91:32" pos:end="91:63"><name pos:start="91:32" pos:end="91:42">le32_to_cpu</name><argument_list pos:start="91:43" pos:end="91:63">(<argument pos:start="91:44" pos:end="91:62"><expr pos:start="91:44" pos:end="91:62"><name pos:start="91:44" pos:end="91:62"><name pos:start="91:44" pos:end="91:45">ad</name><operator pos:start="91:46" pos:end="91:47">-&gt;</operator><name pos:start="91:48" pos:end="91:54">cur_cmd</name><operator pos:start="91:55" pos:end="91:56">-&gt;</operator><name pos:start="91:57" pos:end="91:62">status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
