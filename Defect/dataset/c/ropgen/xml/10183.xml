<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10183.c" pos:tabs="8"><function pos:start="1:1" pos:end="481:13"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">read_var_block_data</name><parameter_list pos:start="1:31" pos:end="1:68">(<parameter pos:start="1:32" pos:end="1:49"><decl pos:start="1:32" pos:end="1:49"><type pos:start="1:32" pos:end="1:49"><name pos:start="1:32" pos:end="1:44">ALSDecContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">ctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:67"><decl pos:start="1:52" pos:end="1:67"><type pos:start="1:52" pos:end="1:67"><name pos:start="1:52" pos:end="1:63">ALSBlockData</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:67">bd</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="481:13">{<block_content pos:start="5:5" pos:end="481:13">

    <decl_stmt pos:start="5:5" pos:end="5:43"><decl pos:start="5:5" pos:end="5:42"><type pos:start="5:5" pos:end="5:23"><name pos:start="5:5" pos:end="5:21">ALSSpecificConfig</name> <modifier pos:start="5:23" pos:end="5:23">*</modifier></type><name pos:start="5:24" pos:end="5:28">sconf</name> <init pos:start="5:30" pos:end="5:42">= <expr pos:start="5:32" pos:end="5:42"><operator pos:start="5:32" pos:end="5:32">&amp;</operator><name pos:start="5:33" pos:end="5:42"><name pos:start="5:33" pos:end="5:35">ctx</name><operator pos:start="5:36" pos:end="5:37">-&gt;</operator><name pos:start="5:38" pos:end="5:42">sconf</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:42"><decl pos:start="7:5" pos:end="7:41"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">AVCodecContext</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:25">avctx</name>    <init pos:start="7:30" pos:end="7:41">= <expr pos:start="7:32" pos:end="7:41"><name pos:start="7:32" pos:end="7:41"><name pos:start="7:32" pos:end="7:34">ctx</name><operator pos:start="7:35" pos:end="7:36">-&gt;</operator><name pos:start="7:37" pos:end="7:41">avctx</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:40"><decl pos:start="9:5" pos:end="9:39"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">GetBitContext</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:21">gb</name>        <init pos:start="9:30" pos:end="9:39">= <expr pos:start="9:32" pos:end="9:39"><operator pos:start="9:32" pos:end="9:32">&amp;</operator><name pos:start="9:33" pos:end="9:39"><name pos:start="9:33" pos:end="9:35">ctx</name><operator pos:start="9:36" pos:end="9:37">-&gt;</operator><name pos:start="9:38" pos:end="9:39">gb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:16">int</name></type> <name pos:start="11:18" pos:end="11:18">k</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:16">int</name></type> <name pos:start="13:18" pos:end="13:21"><name pos:start="13:18" pos:end="13:18">s</name><index pos:start="13:19" pos:end="13:21">[<expr pos:start="13:20" pos:end="13:20"><literal type="number" pos:start="13:20" pos:end="13:20">8</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:16">int</name></type> <name pos:start="15:18" pos:end="15:22"><name pos:start="15:18" pos:end="15:19">sx</name><index pos:start="15:20" pos:end="15:22">[<expr pos:start="15:21" pos:end="15:21"><literal type="number" pos:start="15:21" pos:end="15:21">8</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:56"><decl pos:start="17:5" pos:end="17:27"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:12">unsigned</name> <name pos:start="17:14" pos:end="17:16">int</name></type> <name pos:start="17:18" pos:end="17:27">sub_blocks</name></decl>, <decl pos:start="17:30" pos:end="17:44"><type ref="prev" pos:start="17:5" pos:end="17:16"/><name pos:start="17:30" pos:end="17:44">log2_sub_blocks</name></decl>, <decl pos:start="17:47" pos:end="17:55"><type ref="prev" pos:start="17:5" pos:end="17:16"/><name pos:start="17:47" pos:end="17:55">sb_length</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:32"><decl pos:start="19:5" pos:end="19:31"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:12">unsigned</name> <name pos:start="19:14" pos:end="19:16">int</name></type> <name pos:start="19:18" pos:end="19:22">start</name>      <init pos:start="19:29" pos:end="19:31">= <expr pos:start="19:31" pos:end="19:31"><literal type="number" pos:start="19:31" pos:end="19:31">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:27"><decl pos:start="21:5" pos:end="21:26"><type pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:12">unsigned</name> <name pos:start="21:14" pos:end="21:16">int</name></type> <name pos:start="21:18" pos:end="21:26">opt_order</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:20"><decl pos:start="23:5" pos:end="23:19"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type>          <name pos:start="23:18" pos:end="23:19">sb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:44"><decl pos:start="25:5" pos:end="25:43"><type pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:11">int32_t</name>      <modifier pos:start="25:18" pos:end="25:18">*</modifier></type><name pos:start="25:19" pos:end="25:27">quant_cof</name> <init pos:start="25:29" pos:end="25:43">= <expr pos:start="25:31" pos:end="25:43"><name pos:start="25:31" pos:end="25:43"><name pos:start="25:31" pos:end="25:32">bd</name><operator pos:start="25:33" pos:end="25:34">-&gt;</operator><name pos:start="25:35" pos:end="25:43">quant_cof</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:30"><decl pos:start="27:5" pos:end="27:29"><type pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:11">int32_t</name>      <modifier pos:start="27:18" pos:end="27:18">*</modifier></type><name pos:start="27:19" pos:end="27:29">current_res</name></decl>;</decl_stmt>





    <comment type="line" pos:start="33:5" pos:end="33:59">// ensure variable block decoding by reusing this field</comment>

    <expr_stmt pos:start="35:5" pos:end="35:25"><expr pos:start="35:5" pos:end="35:24"><operator pos:start="35:5" pos:end="35:5">*</operator><name pos:start="35:6" pos:end="35:20"><name pos:start="35:6" pos:end="35:7">bd</name><operator pos:start="35:8" pos:end="35:9">-&gt;</operator><name pos:start="35:10" pos:end="35:20">const_block</name></name> <operator pos:start="35:22" pos:end="35:22">=</operator> <literal type="number" pos:start="35:24" pos:end="35:24">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:24"><expr pos:start="39:5" pos:end="39:23"><operator pos:start="39:5" pos:end="39:5">*</operator><name pos:start="39:6" pos:end="39:18"><name pos:start="39:6" pos:end="39:7">bd</name><operator pos:start="39:8" pos:end="39:9">-&gt;</operator><name pos:start="39:10" pos:end="39:18">opt_order</name></name>  <operator pos:start="39:21" pos:end="39:21">=</operator> <literal type="number" pos:start="39:23" pos:end="39:23">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:36"><expr pos:start="41:5" pos:end="41:35"><name pos:start="41:5" pos:end="41:17"><name pos:start="41:5" pos:end="41:6">bd</name><operator pos:start="41:7" pos:end="41:8">-&gt;</operator><name pos:start="41:9" pos:end="41:17">js_blocks</name></name>   <operator pos:start="41:21" pos:end="41:21">=</operator> <call pos:start="41:23" pos:end="41:35"><name pos:start="41:23" pos:end="41:31">get_bits1</name><argument_list pos:start="41:32" pos:end="41:35">(<argument pos:start="41:33" pos:end="41:34"><expr pos:start="41:33" pos:end="41:34"><name pos:start="41:33" pos:end="41:34">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:37"><expr pos:start="45:5" pos:end="45:36"><name pos:start="45:5" pos:end="45:13">opt_order</name>       <operator pos:start="45:21" pos:end="45:21">=</operator> <operator pos:start="45:23" pos:end="45:23">*</operator><name pos:start="45:24" pos:end="45:36"><name pos:start="45:24" pos:end="45:25">bd</name><operator pos:start="45:26" pos:end="45:27">-&gt;</operator><name pos:start="45:28" pos:end="45:36">opt_order</name></name></expr>;</expr_stmt>



    <comment type="line" pos:start="49:5" pos:end="49:61">// determine the number of subblocks for entropy decoding</comment>

    <if_stmt pos:start="51:5" pos:end="481:13"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:40">(<expr pos:start="51:9" pos:end="51:39"><operator pos:start="51:9" pos:end="51:9">!</operator><name pos:start="51:10" pos:end="51:20"><name pos:start="51:10" pos:end="51:14">sconf</name><operator pos:start="51:15" pos:end="51:16">-&gt;</operator><name pos:start="51:17" pos:end="51:20">bgmc</name></name> <operator pos:start="51:22" pos:end="51:23">&amp;&amp;</operator> <operator pos:start="51:25" pos:end="51:25">!</operator><name pos:start="51:26" pos:end="51:39"><name pos:start="51:26" pos:end="51:30">sconf</name><operator pos:start="51:31" pos:end="51:32">-&gt;</operator><name pos:start="51:33" pos:end="51:39">sb_part</name></name></expr>)</condition> <block pos:start="51:42" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:28">

        <expr_stmt pos:start="53:9" pos:end="53:28"><expr pos:start="53:9" pos:end="53:27"><name pos:start="53:9" pos:end="53:23">log2_sub_blocks</name> <operator pos:start="53:25" pos:end="53:25">=</operator> <literal type="number" pos:start="53:27" pos:end="53:27">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="55:7" pos:end="481:13">else <block pos:start="55:12" pos:end="481:13">{<block_content pos:start="57:9" pos:end="481:13">

        <if_stmt pos:start="57:9" pos:end="63:48"><if pos:start="57:9" pos:end="59:46">if <condition pos:start="57:12" pos:end="57:42">(<expr pos:start="57:13" pos:end="57:41"><name pos:start="57:13" pos:end="57:23"><name pos:start="57:13" pos:end="57:17">sconf</name><operator pos:start="57:18" pos:end="57:19">-&gt;</operator><name pos:start="57:20" pos:end="57:23">bgmc</name></name> <operator pos:start="57:25" pos:end="57:26">&amp;&amp;</operator> <name pos:start="57:28" pos:end="57:41"><name pos:start="57:28" pos:end="57:32">sconf</name><operator pos:start="57:33" pos:end="57:34">-&gt;</operator><name pos:start="57:35" pos:end="57:41">sb_part</name></name></expr>)</condition><block type="pseudo" pos:start="59:13" pos:end="59:46"><block_content pos:start="59:13" pos:end="59:46">

            <expr_stmt pos:start="59:13" pos:end="59:46"><expr pos:start="59:13" pos:end="59:45"><name pos:start="59:13" pos:end="59:27">log2_sub_blocks</name> <operator pos:start="59:29" pos:end="59:29">=</operator> <call pos:start="59:31" pos:end="59:45"><name pos:start="59:31" pos:end="59:38">get_bits</name><argument_list pos:start="59:39" pos:end="59:45">(<argument pos:start="59:40" pos:end="59:41"><expr pos:start="59:40" pos:end="59:41"><name pos:start="59:40" pos:end="59:41">gb</name></expr></argument>, <argument pos:start="59:44" pos:end="59:44"><expr pos:start="59:44" pos:end="59:44"><literal type="number" pos:start="59:44" pos:end="59:44">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="61:9" pos:end="63:48">else<block type="pseudo" pos:start="63:13" pos:end="63:48"><block_content pos:start="63:13" pos:end="63:48">

            <expr_stmt pos:start="63:13" pos:end="63:48"><expr pos:start="63:13" pos:end="63:47"><name pos:start="63:13" pos:end="63:27">log2_sub_blocks</name> <operator pos:start="63:29" pos:end="63:29">=</operator> <literal type="number" pos:start="63:31" pos:end="63:31">2</literal> <operator pos:start="63:33" pos:end="63:33">*</operator> <call pos:start="63:35" pos:end="63:47"><name pos:start="63:35" pos:end="63:43">get_bits1</name><argument_list pos:start="63:44" pos:end="63:47">(<argument pos:start="63:45" pos:end="63:46"><expr pos:start="63:45" pos:end="63:46"><name pos:start="63:45" pos:end="63:46">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>




    <expr_stmt pos:start="68:5" pos:end="68:38"><expr pos:start="68:5" pos:end="68:37"><name pos:start="68:5" pos:end="68:14">sub_blocks</name> <operator pos:start="68:16" pos:end="68:16">=</operator> <literal type="number" pos:start="68:18" pos:end="68:18">1</literal> <operator pos:start="68:20" pos:end="68:21">&lt;&lt;</operator> <name pos:start="68:23" pos:end="68:37">log2_sub_blocks</name></expr>;</expr_stmt>



    <comment type="line" pos:start="72:5" pos:end="72:56">// do not continue in case of a damaged stream since</comment>

    <comment type="line" pos:start="74:5" pos:end="74:58">// block_length must be evenly divisible by sub_blocks</comment>

    <if_stmt pos:start="76:5" pos:end="481:13"><if pos:start="76:5" pos:end="481:13">if <condition pos:start="76:8" pos:end="76:44">(<expr pos:start="76:9" pos:end="76:43"><name pos:start="76:9" pos:end="76:24"><name pos:start="76:9" pos:end="76:10">bd</name><operator pos:start="76:11" pos:end="76:12">-&gt;</operator><name pos:start="76:13" pos:end="76:24">block_length</name></name> <operator pos:start="76:26" pos:end="76:26">&amp;</operator> <operator pos:start="76:28" pos:end="76:28">(</operator><name pos:start="76:29" pos:end="76:38">sub_blocks</name> <operator pos:start="76:40" pos:end="76:40">-</operator> <literal type="number" pos:start="76:42" pos:end="76:42">1</literal><operator pos:start="76:43" pos:end="76:43">)</operator></expr>)</condition> <block pos:start="76:46" pos:end="481:13">{<block_content pos:start="78:9" pos:end="481:13">

        <expr_stmt pos:start="78:9" pos:end="80:85"><expr pos:start="78:9" pos:end="80:84"><call pos:start="78:9" pos:end="80:84"><name pos:start="78:9" pos:end="78:14">av_log</name><argument_list pos:start="78:15" pos:end="80:84">(<argument pos:start="78:16" pos:end="78:20"><expr pos:start="78:16" pos:end="78:20"><name pos:start="78:16" pos:end="78:20">avctx</name></expr></argument>, <argument pos:start="78:23" pos:end="78:36"><expr pos:start="78:23" pos:end="78:36"><name pos:start="78:23" pos:end="78:36">AV_LOG_WARNING</name></expr></argument>,

               <argument pos:start="80:16" pos:end="80:83"><expr pos:start="80:16" pos:end="80:83"><literal type="string" pos:start="80:16" pos:end="80:83">"Block length is not evenly divisible by the number of subblocks.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <expr_stmt pos:start="86:5" pos:end="86:52"><expr pos:start="86:5" pos:end="86:51"><name pos:start="86:5" pos:end="86:13">sb_length</name> <operator pos:start="86:15" pos:end="86:15">=</operator> <name pos:start="86:17" pos:end="86:32"><name pos:start="86:17" pos:end="86:18">bd</name><operator pos:start="86:19" pos:end="86:20">-&gt;</operator><name pos:start="86:21" pos:end="86:32">block_length</name></name> <operator pos:start="86:34" pos:end="86:35">&gt;&gt;</operator> <name pos:start="86:37" pos:end="86:51">log2_sub_blocks</name></expr>;</expr_stmt>



    <if_stmt pos:start="90:5" pos:end="481:13"><if pos:start="90:5" pos:end="481:13">if <condition pos:start="90:8" pos:end="90:20">(<expr pos:start="90:9" pos:end="90:19"><name pos:start="90:9" pos:end="90:19"><name pos:start="90:9" pos:end="90:13">sconf</name><operator pos:start="90:14" pos:end="90:15">-&gt;</operator><name pos:start="90:16" pos:end="90:19">bgmc</name></name></expr>)</condition> <block pos:start="90:22" pos:end="481:13">{<block_content pos:start="92:9" pos:end="481:13">

        <expr_stmt pos:start="92:9" pos:end="92:57"><expr pos:start="92:9" pos:end="92:56"><name pos:start="92:9" pos:end="92:12"><name pos:start="92:9" pos:end="92:9">s</name><index pos:start="92:10" pos:end="92:12">[<expr pos:start="92:11" pos:end="92:11"><literal type="number" pos:start="92:11" pos:end="92:11">0</literal></expr>]</index></name> <operator pos:start="92:14" pos:end="92:14">=</operator> <call pos:start="92:16" pos:end="92:56"><name pos:start="92:16" pos:end="92:23">get_bits</name><argument_list pos:start="92:24" pos:end="92:56">(<argument pos:start="92:25" pos:end="92:26"><expr pos:start="92:25" pos:end="92:26"><name pos:start="92:25" pos:end="92:26">gb</name></expr></argument>, <argument pos:start="92:29" pos:end="92:55"><expr pos:start="92:29" pos:end="92:55"><literal type="number" pos:start="92:29" pos:end="92:31">8</literal> <operator pos:start="92:31" pos:end="92:31">+</operator> <operator pos:start="92:33" pos:end="92:33">(</operator><name pos:start="92:34" pos:end="92:50"><name pos:start="92:34" pos:end="92:38">sconf</name><operator pos:start="92:39" pos:end="92:40">-&gt;</operator><name pos:start="92:41" pos:end="92:50">resolution</name></name> <operator pos:start="92:52" pos:end="92:52">&gt;</operator> <literal type="number" pos:start="92:54" pos:end="92:54">1</literal><operator pos:start="92:55" pos:end="92:55">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


            <expr_stmt pos:start="95:13" pos:end="95:49"><expr pos:start="95:13" pos:end="95:48"><name pos:start="95:13" pos:end="95:16"><name pos:start="95:13" pos:end="95:13">s</name><index pos:start="95:14" pos:end="95:16">[<expr pos:start="95:15" pos:end="95:15"><name pos:start="95:15" pos:end="95:15">k</name></expr>]</index></name> <operator pos:start="95:18" pos:end="95:18">=</operator> <name pos:start="95:20" pos:end="95:27"><name pos:start="95:20" pos:end="95:20">s</name><index pos:start="95:21" pos:end="95:27">[<expr pos:start="95:22" pos:end="95:26"><name pos:start="95:22" pos:end="95:22">k</name> <operator pos:start="95:24" pos:end="95:24">-</operator> <literal type="number" pos:start="95:26" pos:end="95:26">1</literal></expr>]</index></name> <operator pos:start="95:29" pos:end="95:29">+</operator> <call pos:start="95:31" pos:end="95:48"><name pos:start="95:31" pos:end="95:41">decode_rice</name><argument_list pos:start="95:42" pos:end="95:48">(<argument pos:start="95:43" pos:end="95:44"><expr pos:start="95:43" pos:end="95:44"><name pos:start="95:43" pos:end="95:44">gb</name></expr></argument>, <argument pos:start="95:47" pos:end="95:47"><expr pos:start="95:47" pos:end="95:47"><literal type="number" pos:start="95:47" pos:end="95:47">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="99:9" pos:end="106:5">for <control pos:start="99:13" pos:end="99:40">(<init pos:start="99:14" pos:end="99:19"><expr pos:start="99:14" pos:end="99:18"><name pos:start="99:14" pos:end="99:14">k</name> <operator pos:start="99:16" pos:end="99:16">=</operator> <literal type="number" pos:start="99:18" pos:end="99:18">0</literal></expr>;</init> <condition pos:start="99:21" pos:end="99:35"><expr pos:start="99:21" pos:end="99:34"><name pos:start="99:21" pos:end="99:21">k</name> <operator pos:start="99:23" pos:end="99:23">&lt;</operator> <name pos:start="99:25" pos:end="99:34">sub_blocks</name></expr>;</condition> <incr pos:start="99:37" pos:end="99:39"><expr pos:start="99:37" pos:end="99:39"><name pos:start="99:37" pos:end="99:37">k</name><operator pos:start="99:38" pos:end="99:39">++</operator></expr></incr>)</control> <block pos:start="99:42" pos:end="106:5">{<block_content pos:start="101:13" pos:end="103:24">

            <expr_stmt pos:start="101:13" pos:end="101:34"><expr pos:start="101:13" pos:end="101:33"><name pos:start="101:13" pos:end="101:17"><name pos:start="101:13" pos:end="101:14">sx</name><index pos:start="101:15" pos:end="101:17">[<expr pos:start="101:16" pos:end="101:16"><name pos:start="101:16" pos:end="101:16">k</name></expr>]</index></name>   <operator pos:start="101:21" pos:end="101:21">=</operator> <name pos:start="101:23" pos:end="101:26"><name pos:start="101:23" pos:end="101:23">s</name><index pos:start="101:24" pos:end="101:26">[<expr pos:start="101:25" pos:end="101:25"><name pos:start="101:25" pos:end="101:25">k</name></expr>]</index></name> <operator pos:start="101:28" pos:end="101:28">&amp;</operator> <literal type="number" pos:start="101:30" pos:end="101:33">0x0F</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:24"><expr pos:start="103:13" pos:end="103:23"><name pos:start="103:13" pos:end="103:17"><name pos:start="103:13" pos:end="103:13">s</name> <index pos:start="103:15" pos:end="103:17">[<expr pos:start="103:16" pos:end="103:16"><name pos:start="103:16" pos:end="103:16">k</name></expr>]</index></name> <operator pos:start="103:19" pos:end="103:21">&gt;&gt;=</operator> <literal type="number" pos:start="103:23" pos:end="103:23">4</literal></expr>;</expr_stmt>


    </block_content>}</block></for> <if_stmt pos:start="106:7" pos:end="481:13"><else pos:start="106:7" pos:end="481:13">else <block pos:start="106:12" pos:end="481:13">{<block_content pos:start="108:9" pos:end="481:13">

        <expr_stmt pos:start="108:9" pos:end="108:57"><expr pos:start="108:9" pos:end="108:56"><name pos:start="108:9" pos:end="108:12"><name pos:start="108:9" pos:end="108:9">s</name><index pos:start="108:10" pos:end="108:12">[<expr pos:start="108:11" pos:end="108:11"><literal type="number" pos:start="108:11" pos:end="108:11">0</literal></expr>]</index></name> <operator pos:start="108:14" pos:end="108:14">=</operator> <call pos:start="108:16" pos:end="108:56"><name pos:start="108:16" pos:end="108:23">get_bits</name><argument_list pos:start="108:24" pos:end="108:56">(<argument pos:start="108:25" pos:end="108:26"><expr pos:start="108:25" pos:end="108:26"><name pos:start="108:25" pos:end="108:26">gb</name></expr></argument>, <argument pos:start="108:29" pos:end="108:55"><expr pos:start="108:29" pos:end="108:55"><literal type="number" pos:start="108:29" pos:end="108:31">4</literal> <operator pos:start="108:31" pos:end="108:31">+</operator> <operator pos:start="108:33" pos:end="108:33">(</operator><name pos:start="108:34" pos:end="108:50"><name pos:start="108:34" pos:end="108:38">sconf</name><operator pos:start="108:39" pos:end="108:40">-&gt;</operator><name pos:start="108:41" pos:end="108:50">resolution</name></name> <operator pos:start="108:52" pos:end="108:52">&gt;</operator> <literal type="number" pos:start="108:54" pos:end="108:54">1</literal><operator pos:start="108:55" pos:end="108:55">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


            <expr_stmt pos:start="111:13" pos:end="111:49"><expr pos:start="111:13" pos:end="111:48"><name pos:start="111:13" pos:end="111:16"><name pos:start="111:13" pos:end="111:13">s</name><index pos:start="111:14" pos:end="111:16">[<expr pos:start="111:15" pos:end="111:15"><name pos:start="111:15" pos:end="111:15">k</name></expr>]</index></name> <operator pos:start="111:18" pos:end="111:18">=</operator> <name pos:start="111:20" pos:end="111:27"><name pos:start="111:20" pos:end="111:20">s</name><index pos:start="111:21" pos:end="111:27">[<expr pos:start="111:22" pos:end="111:26"><name pos:start="111:22" pos:end="111:22">k</name> <operator pos:start="111:24" pos:end="111:24">-</operator> <literal type="number" pos:start="111:26" pos:end="111:26">1</literal></expr>]</index></name> <operator pos:start="111:29" pos:end="111:29">+</operator> <call pos:start="111:31" pos:end="111:48"><name pos:start="111:31" pos:end="111:41">decode_rice</name><argument_list pos:start="111:42" pos:end="111:48">(<argument pos:start="111:43" pos:end="111:44"><expr pos:start="111:43" pos:end="111:44"><name pos:start="111:43" pos:end="111:44">gb</name></expr></argument>, <argument pos:start="111:47" pos:end="111:47"><expr pos:start="111:47" pos:end="111:47"><literal type="number" pos:start="111:47" pos:end="111:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>









    <if_stmt pos:start="121:5" pos:end="123:46"><if pos:start="121:5" pos:end="123:46">if <condition pos:start="121:8" pos:end="121:22">(<expr pos:start="121:9" pos:end="121:21"><call pos:start="121:9" pos:end="121:21"><name pos:start="121:9" pos:end="121:17">get_bits1</name><argument_list pos:start="121:18" pos:end="121:21">(<argument pos:start="121:19" pos:end="121:20"><expr pos:start="121:19" pos:end="121:20"><name pos:start="121:19" pos:end="121:20">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="123:9" pos:end="123:46"><block_content pos:start="123:9" pos:end="123:46">

        <expr_stmt pos:start="123:9" pos:end="123:46"><expr pos:start="123:9" pos:end="123:45"><operator pos:start="123:9" pos:end="123:9">*</operator><name pos:start="123:10" pos:end="123:23"><name pos:start="123:10" pos:end="123:11">bd</name><operator pos:start="123:12" pos:end="123:13">-&gt;</operator><name pos:start="123:14" pos:end="123:23">shift_lsbs</name></name> <operator pos:start="123:25" pos:end="123:25">=</operator> <call pos:start="123:27" pos:end="123:41"><name pos:start="123:27" pos:end="123:34">get_bits</name><argument_list pos:start="123:35" pos:end="123:41">(<argument pos:start="123:36" pos:end="123:37"><expr pos:start="123:36" pos:end="123:37"><name pos:start="123:36" pos:end="123:37">gb</name></expr></argument>, <argument pos:start="123:40" pos:end="123:40"><expr pos:start="123:40" pos:end="123:40"><literal type="number" pos:start="123:40" pos:end="123:40">4</literal></expr></argument>)</argument_list></call> <operator pos:start="123:43" pos:end="123:43">+</operator> <literal type="number" pos:start="123:45" pos:end="123:45">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="127:5" pos:end="127:82"><expr pos:start="127:5" pos:end="127:81"><operator pos:start="127:5" pos:end="127:5">*</operator><name pos:start="127:6" pos:end="127:27"><name pos:start="127:6" pos:end="127:7">bd</name><operator pos:start="127:8" pos:end="127:9">-&gt;</operator><name pos:start="127:10" pos:end="127:27">store_prev_samples</name></name> <operator pos:start="127:29" pos:end="127:29">=</operator> <operator pos:start="127:31" pos:end="127:31">(</operator><name pos:start="127:32" pos:end="127:44"><name pos:start="127:32" pos:end="127:33">bd</name><operator pos:start="127:34" pos:end="127:35">-&gt;</operator><name pos:start="127:36" pos:end="127:44">js_blocks</name></name> <operator pos:start="127:46" pos:end="127:47">&amp;&amp;</operator> <name pos:start="127:49" pos:end="127:61"><name pos:start="127:49" pos:end="127:50">bd</name><operator pos:start="127:51" pos:end="127:52">-&gt;</operator><name pos:start="127:53" pos:end="127:61">raw_other</name></name><operator pos:start="127:62" pos:end="127:62">)</operator> <operator pos:start="127:64" pos:end="127:65">||</operator> <operator pos:start="127:67" pos:end="127:67">*</operator><name pos:start="127:68" pos:end="127:81"><name pos:start="127:68" pos:end="127:69">bd</name><operator pos:start="127:70" pos:end="127:71">-&gt;</operator><name pos:start="127:72" pos:end="127:81">shift_lsbs</name></name></expr>;</expr_stmt>





    <if_stmt pos:start="133:5" pos:end="481:13"><if pos:start="133:5" pos:end="481:13">if <condition pos:start="133:8" pos:end="133:23">(<expr pos:start="133:9" pos:end="133:22"><operator pos:start="133:9" pos:end="133:9">!</operator><name pos:start="133:10" pos:end="133:22"><name pos:start="133:10" pos:end="133:14">sconf</name><operator pos:start="133:15" pos:end="133:16">-&gt;</operator><name pos:start="133:17" pos:end="133:22">rlslms</name></name></expr>)</condition> <block pos:start="133:25" pos:end="481:13">{<block_content pos:start="135:9" pos:end="481:13">

        <if_stmt pos:start="135:9" pos:end="481:13"><if pos:start="135:9" pos:end="481:13">if <condition pos:start="135:12" pos:end="135:31">(<expr pos:start="135:13" pos:end="135:30"><name pos:start="135:13" pos:end="135:30"><name pos:start="135:13" pos:end="135:17">sconf</name><operator pos:start="135:18" pos:end="135:19">-&gt;</operator><name pos:start="135:20" pos:end="135:30">adapt_order</name></name></expr>)</condition> <block pos:start="135:33" pos:end="481:13">{<block_content pos:start="137:13" pos:end="481:13">

            <decl_stmt pos:start="137:13" pos:end="139:74"><decl pos:start="137:13" pos:end="139:73"><type pos:start="137:13" pos:end="137:15"><name pos:start="137:13" pos:end="137:15">int</name></type> <name pos:start="137:17" pos:end="137:32">opt_order_length</name> <init pos:start="137:34" pos:end="139:73">= <expr pos:start="137:36" pos:end="139:73"><call pos:start="137:36" pos:end="139:73"><name pos:start="137:36" pos:end="137:47">av_ceil_log2</name><argument_list pos:start="137:48" pos:end="139:73">(<argument pos:start="137:49" pos:end="139:72"><expr pos:start="137:49" pos:end="139:72"><call pos:start="137:49" pos:end="139:72"><name pos:start="137:49" pos:end="137:55">av_clip</name><argument_list pos:start="137:56" pos:end="139:72">(<argument pos:start="137:57" pos:end="137:83"><expr pos:start="137:57" pos:end="137:83"><operator pos:start="137:57" pos:end="137:57">(</operator><name pos:start="137:58" pos:end="137:73"><name pos:start="137:58" pos:end="137:59">bd</name><operator pos:start="137:60" pos:end="137:61">-&gt;</operator><name pos:start="137:62" pos:end="137:73">block_length</name></name> <operator pos:start="137:75" pos:end="137:76">&gt;&gt;</operator> <literal type="number" pos:start="137:78" pos:end="137:78">3</literal><operator pos:start="137:79" pos:end="137:79">)</operator> <operator pos:start="137:81" pos:end="137:81">-</operator> <literal type="number" pos:start="137:83" pos:end="137:83">1</literal></expr></argument>,

                                                <argument pos:start="139:49" pos:end="139:49"><expr pos:start="139:49" pos:end="139:49"><literal type="number" pos:start="139:49" pos:end="139:49">2</literal></expr></argument>, <argument pos:start="139:52" pos:end="139:71"><expr pos:start="139:52" pos:end="139:71"><name pos:start="139:52" pos:end="139:67"><name pos:start="139:52" pos:end="139:56">sconf</name><operator pos:start="139:57" pos:end="139:58">-&gt;</operator><name pos:start="139:59" pos:end="139:67">max_order</name></name> <operator pos:start="139:69" pos:end="139:69">+</operator> <literal type="number" pos:start="139:71" pos:end="139:71">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:66"><expr pos:start="141:13" pos:end="141:65"><operator pos:start="141:13" pos:end="141:13">*</operator><name pos:start="141:14" pos:end="141:26"><name pos:start="141:14" pos:end="141:15">bd</name><operator pos:start="141:16" pos:end="141:17">-&gt;</operator><name pos:start="141:18" pos:end="141:26">opt_order</name></name>       <operator pos:start="141:34" pos:end="141:34">=</operator> <call pos:start="141:36" pos:end="141:65"><name pos:start="141:36" pos:end="141:43">get_bits</name><argument_list pos:start="141:44" pos:end="141:65">(<argument pos:start="141:45" pos:end="141:46"><expr pos:start="141:45" pos:end="141:46"><name pos:start="141:45" pos:end="141:46">gb</name></expr></argument>, <argument pos:start="141:49" pos:end="141:64"><expr pos:start="141:49" pos:end="141:64"><name pos:start="141:49" pos:end="141:64">opt_order_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="143:13" pos:end="481:13"><if pos:start="143:13" pos:end="151:9">if <condition pos:start="143:16" pos:end="143:50">(<expr pos:start="143:17" pos:end="143:49"><operator pos:start="143:17" pos:end="143:17">*</operator><name pos:start="143:18" pos:end="143:30"><name pos:start="143:18" pos:end="143:19">bd</name><operator pos:start="143:20" pos:end="143:21">-&gt;</operator><name pos:start="143:22" pos:end="143:30">opt_order</name></name> <operator pos:start="143:32" pos:end="143:32">&gt;</operator> <name pos:start="143:34" pos:end="143:49"><name pos:start="143:34" pos:end="143:38">sconf</name><operator pos:start="143:39" pos:end="143:40">-&gt;</operator><name pos:start="143:41" pos:end="143:49">max_order</name></name></expr>)</condition> <block pos:start="143:52" pos:end="151:9">{<block_content pos:start="145:17" pos:end="147:76">

                <expr_stmt pos:start="145:17" pos:end="145:50"><expr pos:start="145:17" pos:end="145:49"><operator pos:start="145:17" pos:end="145:17">*</operator><name pos:start="145:18" pos:end="145:30"><name pos:start="145:18" pos:end="145:19">bd</name><operator pos:start="145:20" pos:end="145:21">-&gt;</operator><name pos:start="145:22" pos:end="145:30">opt_order</name></name> <operator pos:start="145:32" pos:end="145:32">=</operator> <name pos:start="145:34" pos:end="145:49"><name pos:start="145:34" pos:end="145:38">sconf</name><operator pos:start="145:39" pos:end="145:40">-&gt;</operator><name pos:start="145:41" pos:end="145:49">max_order</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="147:17" pos:end="147:76"><expr pos:start="147:17" pos:end="147:75"><call pos:start="147:17" pos:end="147:75"><name pos:start="147:17" pos:end="147:22">av_log</name><argument_list pos:start="147:23" pos:end="147:75">(<argument pos:start="147:24" pos:end="147:28"><expr pos:start="147:24" pos:end="147:28"><name pos:start="147:24" pos:end="147:28">avctx</name></expr></argument>, <argument pos:start="147:31" pos:end="147:42"><expr pos:start="147:31" pos:end="147:42"><name pos:start="147:31" pos:end="147:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="147:45" pos:end="147:74"><expr pos:start="147:45" pos:end="147:74"><literal type="string" pos:start="147:45" pos:end="147:74">"Predictor order too large!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        </block_content>}</block></if> <else pos:start="151:11" pos:end="481:13">else <block pos:start="151:16" pos:end="481:13">{<block_content pos:start="153:13" pos:end="481:13">

            <expr_stmt pos:start="153:13" pos:end="153:46"><expr pos:start="153:13" pos:end="153:45"><operator pos:start="153:13" pos:end="153:13">*</operator><name pos:start="153:14" pos:end="153:26"><name pos:start="153:14" pos:end="153:15">bd</name><operator pos:start="153:16" pos:end="153:17">-&gt;</operator><name pos:start="153:18" pos:end="153:26">opt_order</name></name> <operator pos:start="153:28" pos:end="153:28">=</operator> <name pos:start="153:30" pos:end="153:45"><name pos:start="153:30" pos:end="153:34">sconf</name><operator pos:start="153:35" pos:end="153:36">-&gt;</operator><name pos:start="153:37" pos:end="153:45">max_order</name></name></expr>;</expr_stmt>




        <expr_stmt pos:start="158:9" pos:end="158:35"><expr pos:start="158:9" pos:end="158:34"><name pos:start="158:9" pos:end="158:17">opt_order</name> <operator pos:start="158:19" pos:end="158:19">=</operator> <operator pos:start="158:21" pos:end="158:21">*</operator><name pos:start="158:22" pos:end="158:34"><name pos:start="158:22" pos:end="158:23">bd</name><operator pos:start="158:24" pos:end="158:25">-&gt;</operator><name pos:start="158:26" pos:end="158:34">opt_order</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="162:9" pos:end="481:13"><if pos:start="162:9" pos:end="481:13">if <condition pos:start="162:12" pos:end="162:22">(<expr pos:start="162:13" pos:end="162:21"><name pos:start="162:13" pos:end="162:21">opt_order</name></expr>)</condition> <block pos:start="162:24" pos:end="481:13">{<block_content pos:start="164:13" pos:end="481:13">

            <decl_stmt pos:start="164:13" pos:end="164:25"><decl pos:start="164:13" pos:end="164:24"><type pos:start="164:13" pos:end="164:15"><name pos:start="164:13" pos:end="164:15">int</name></type> <name pos:start="164:17" pos:end="164:24">add_base</name></decl>;</decl_stmt>



            <if_stmt pos:start="168:13" pos:end="481:13"><if pos:start="168:13" pos:end="194:13">if <condition pos:start="168:16" pos:end="168:39">(<expr pos:start="168:17" pos:end="168:38"><name pos:start="168:17" pos:end="168:33"><name pos:start="168:17" pos:end="168:21">sconf</name><operator pos:start="168:22" pos:end="168:23">-&gt;</operator><name pos:start="168:24" pos:end="168:33">coef_table</name></name> <operator pos:start="168:35" pos:end="168:36">==</operator> <literal type="number" pos:start="168:38" pos:end="168:38">3</literal></expr>)</condition> <block pos:start="168:41" pos:end="194:13">{<block_content pos:start="170:17" pos:end="192:51">

                <expr_stmt pos:start="170:17" pos:end="170:32"><expr pos:start="170:17" pos:end="170:31"><name pos:start="170:17" pos:end="170:24">add_base</name> <operator pos:start="170:26" pos:end="170:26">=</operator> <literal type="number" pos:start="170:28" pos:end="170:31">0x7F</literal></expr>;</expr_stmt>



                <comment type="line" pos:start="174:17" pos:end="174:37">// read coefficient 0</comment>

                <expr_stmt pos:start="176:17" pos:end="176:74"><expr pos:start="176:17" pos:end="176:73"><name pos:start="176:17" pos:end="176:28"><name pos:start="176:17" pos:end="176:25">quant_cof</name><index pos:start="176:26" pos:end="176:28">[<expr pos:start="176:27" pos:end="176:27"><literal type="number" pos:start="176:27" pos:end="176:27">0</literal></expr>]</index></name> <operator pos:start="176:30" pos:end="176:30">=</operator> <literal type="number" pos:start="176:32" pos:end="176:33">32</literal> <operator pos:start="176:35" pos:end="176:35">*</operator> <name pos:start="176:37" pos:end="176:73"><name pos:start="176:37" pos:end="176:56">parcor_scaled_values</name><index pos:start="176:57" pos:end="176:73">[<expr pos:start="176:58" pos:end="176:72"><call pos:start="176:58" pos:end="176:72"><name pos:start="176:58" pos:end="176:65">get_bits</name><argument_list pos:start="176:66" pos:end="176:72">(<argument pos:start="176:67" pos:end="176:68"><expr pos:start="176:67" pos:end="176:68"><name pos:start="176:67" pos:end="176:68">gb</name></expr></argument>, <argument pos:start="176:71" pos:end="176:71"><expr pos:start="176:71" pos:end="176:71"><literal type="number" pos:start="176:71" pos:end="176:71">7</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>



                <comment type="line" pos:start="180:17" pos:end="180:37">// read coefficient 1</comment>

                <if_stmt pos:start="182:17" pos:end="184:79"><if pos:start="182:17" pos:end="184:79">if <condition pos:start="182:20" pos:end="182:34">(<expr pos:start="182:21" pos:end="182:33"><name pos:start="182:21" pos:end="182:29">opt_order</name> <operator pos:start="182:31" pos:end="182:31">&gt;</operator> <literal type="number" pos:start="182:33" pos:end="182:33">1</literal></expr>)</condition><block type="pseudo" pos:start="184:21" pos:end="184:79"><block_content pos:start="184:21" pos:end="184:79">

                    <expr_stmt pos:start="184:21" pos:end="184:79"><expr pos:start="184:21" pos:end="184:78"><name pos:start="184:21" pos:end="184:32"><name pos:start="184:21" pos:end="184:29">quant_cof</name><index pos:start="184:30" pos:end="184:32">[<expr pos:start="184:31" pos:end="184:31"><literal type="number" pos:start="184:31" pos:end="184:31">1</literal></expr>]</index></name> <operator pos:start="184:34" pos:end="184:34">=</operator> <operator pos:start="184:36" pos:end="184:36">-</operator><literal type="number" pos:start="184:37" pos:end="184:38">32</literal> <operator pos:start="184:40" pos:end="184:40">*</operator> <name pos:start="184:42" pos:end="184:78"><name pos:start="184:42" pos:end="184:61">parcor_scaled_values</name><index pos:start="184:62" pos:end="184:78">[<expr pos:start="184:63" pos:end="184:77"><call pos:start="184:63" pos:end="184:77"><name pos:start="184:63" pos:end="184:70">get_bits</name><argument_list pos:start="184:71" pos:end="184:77">(<argument pos:start="184:72" pos:end="184:73"><expr pos:start="184:72" pos:end="184:73"><name pos:start="184:72" pos:end="184:73">gb</name></expr></argument>, <argument pos:start="184:76" pos:end="184:76"><expr pos:start="184:76" pos:end="184:76"><literal type="number" pos:start="184:76" pos:end="184:76">7</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



                <comment type="line" pos:start="188:17" pos:end="188:51">// read coefficients 2 to opt_order</comment>

                <for pos:start="190:17" pos:end="192:51">for <control pos:start="190:21" pos:end="190:47">(<init pos:start="190:22" pos:end="190:27"><expr pos:start="190:22" pos:end="190:26"><name pos:start="190:22" pos:end="190:22">k</name> <operator pos:start="190:24" pos:end="190:24">=</operator> <literal type="number" pos:start="190:26" pos:end="190:26">2</literal></expr>;</init> <condition pos:start="190:29" pos:end="190:42"><expr pos:start="190:29" pos:end="190:41"><name pos:start="190:29" pos:end="190:29">k</name> <operator pos:start="190:31" pos:end="190:31">&lt;</operator> <name pos:start="190:33" pos:end="190:41">opt_order</name></expr>;</condition> <incr pos:start="190:44" pos:end="190:46"><expr pos:start="190:44" pos:end="190:46"><name pos:start="190:44" pos:end="190:44">k</name><operator pos:start="190:45" pos:end="190:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="192:21" pos:end="192:51"><block_content pos:start="192:21" pos:end="192:51">

                    <expr_stmt pos:start="192:21" pos:end="192:51"><expr pos:start="192:21" pos:end="192:50"><name pos:start="192:21" pos:end="192:32"><name pos:start="192:21" pos:end="192:29">quant_cof</name><index pos:start="192:30" pos:end="192:32">[<expr pos:start="192:31" pos:end="192:31"><name pos:start="192:31" pos:end="192:31">k</name></expr>]</index></name> <operator pos:start="192:34" pos:end="192:34">=</operator> <call pos:start="192:36" pos:end="192:50"><name pos:start="192:36" pos:end="192:43">get_bits</name><argument_list pos:start="192:44" pos:end="192:50">(<argument pos:start="192:45" pos:end="192:46"><expr pos:start="192:45" pos:end="192:46"><name pos:start="192:45" pos:end="192:46">gb</name></expr></argument>, <argument pos:start="192:49" pos:end="192:49"><expr pos:start="192:49" pos:end="192:49"><literal type="number" pos:start="192:49" pos:end="192:49">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></if> <else pos:start="194:15" pos:end="481:13">else <block pos:start="194:20" pos:end="481:13">{<block_content pos:start="196:17" pos:end="481:13">

                <decl_stmt pos:start="196:17" pos:end="196:26"><decl pos:start="196:17" pos:end="196:25"><type pos:start="196:17" pos:end="196:19"><name pos:start="196:17" pos:end="196:19">int</name></type> <name pos:start="196:21" pos:end="196:25">k_max</name></decl>;</decl_stmt>

                <expr_stmt pos:start="198:17" pos:end="198:29"><expr pos:start="198:17" pos:end="198:28"><name pos:start="198:17" pos:end="198:24">add_base</name> <operator pos:start="198:26" pos:end="198:26">=</operator> <literal type="number" pos:start="198:28" pos:end="198:28">1</literal></expr>;</expr_stmt>



                <comment type="line" pos:start="202:17" pos:end="202:43">// read coefficient 0 to 19</comment>

                <expr_stmt pos:start="204:17" pos:end="204:45"><expr pos:start="204:17" pos:end="204:44"><name pos:start="204:17" pos:end="204:21">k_max</name> <operator pos:start="204:23" pos:end="204:23">=</operator> <call pos:start="204:25" pos:end="204:44"><name pos:start="204:25" pos:end="204:29">FFMIN</name><argument_list pos:start="204:30" pos:end="204:44">(<argument pos:start="204:31" pos:end="204:39"><expr pos:start="204:31" pos:end="204:39"><name pos:start="204:31" pos:end="204:39">opt_order</name></expr></argument>, <argument pos:start="204:42" pos:end="204:43"><expr pos:start="204:42" pos:end="204:43"><literal type="number" pos:start="204:42" pos:end="204:43">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="206:17" pos:end="481:13">for <control pos:start="206:21" pos:end="206:43">(<init pos:start="206:22" pos:end="206:27"><expr pos:start="206:22" pos:end="206:26"><name pos:start="206:22" pos:end="206:22">k</name> <operator pos:start="206:24" pos:end="206:24">=</operator> <literal type="number" pos:start="206:26" pos:end="206:26">0</literal></expr>;</init> <condition pos:start="206:29" pos:end="206:38"><expr pos:start="206:29" pos:end="206:37"><name pos:start="206:29" pos:end="206:29">k</name> <operator pos:start="206:31" pos:end="206:31">&lt;</operator> <name pos:start="206:33" pos:end="206:37">k_max</name></expr>;</condition> <incr pos:start="206:40" pos:end="206:42"><expr pos:start="206:40" pos:end="206:42"><name pos:start="206:40" pos:end="206:40">k</name><operator pos:start="206:41" pos:end="206:42">++</operator></expr></incr>)</control> <block pos:start="206:45" pos:end="481:13">{<block_content pos:start="208:21" pos:end="481:13">

                    <decl_stmt pos:start="208:21" pos:end="208:80"><decl pos:start="208:21" pos:end="208:79"><type pos:start="208:21" pos:end="208:23"><name pos:start="208:21" pos:end="208:23">int</name></type> <name pos:start="208:25" pos:end="208:34">rice_param</name> <init pos:start="208:36" pos:end="208:79">= <expr pos:start="208:38" pos:end="208:79"><name pos:start="208:38" pos:end="208:79"><name pos:start="208:38" pos:end="208:54">parcor_rice_table</name><index pos:start="208:55" pos:end="208:73">[<expr pos:start="208:56" pos:end="208:72"><name pos:start="208:56" pos:end="208:72"><name pos:start="208:56" pos:end="208:60">sconf</name><operator pos:start="208:61" pos:end="208:62">-&gt;</operator><name pos:start="208:63" pos:end="208:72">coef_table</name></name></expr>]</index><index pos:start="208:74" pos:end="208:76">[<expr pos:start="208:75" pos:end="208:75"><name pos:start="208:75" pos:end="208:75">k</name></expr>]</index><index pos:start="208:77" pos:end="208:79">[<expr pos:start="208:78" pos:end="208:78"><literal type="number" pos:start="208:78" pos:end="208:78">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="210:21" pos:end="210:80"><decl pos:start="210:21" pos:end="210:79"><type pos:start="210:21" pos:end="210:23"><name pos:start="210:21" pos:end="210:23">int</name></type> <name pos:start="210:25" pos:end="210:30">offset</name>     <init pos:start="210:36" pos:end="210:79">= <expr pos:start="210:38" pos:end="210:79"><name pos:start="210:38" pos:end="210:79"><name pos:start="210:38" pos:end="210:54">parcor_rice_table</name><index pos:start="210:55" pos:end="210:73">[<expr pos:start="210:56" pos:end="210:72"><name pos:start="210:56" pos:end="210:72"><name pos:start="210:56" pos:end="210:60">sconf</name><operator pos:start="210:61" pos:end="210:62">-&gt;</operator><name pos:start="210:63" pos:end="210:72">coef_table</name></name></expr>]</index><index pos:start="210:74" pos:end="210:76">[<expr pos:start="210:75" pos:end="210:75"><name pos:start="210:75" pos:end="210:75">k</name></expr>]</index><index pos:start="210:77" pos:end="210:79">[<expr pos:start="210:78" pos:end="210:78"><literal type="number" pos:start="210:78" pos:end="210:78">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="212:21" pos:end="212:72"><expr pos:start="212:21" pos:end="212:71"><name pos:start="212:21" pos:end="212:32"><name pos:start="212:21" pos:end="212:29">quant_cof</name><index pos:start="212:30" pos:end="212:32">[<expr pos:start="212:31" pos:end="212:31"><name pos:start="212:31" pos:end="212:31">k</name></expr>]</index></name> <operator pos:start="212:34" pos:end="212:34">=</operator> <call pos:start="212:36" pos:end="212:62"><name pos:start="212:36" pos:end="212:46">decode_rice</name><argument_list pos:start="212:47" pos:end="212:62">(<argument pos:start="212:48" pos:end="212:49"><expr pos:start="212:48" pos:end="212:49"><name pos:start="212:48" pos:end="212:49">gb</name></expr></argument>, <argument pos:start="212:52" pos:end="212:61"><expr pos:start="212:52" pos:end="212:61"><name pos:start="212:52" pos:end="212:61">rice_param</name></expr></argument>)</argument_list></call> <operator pos:start="212:64" pos:end="212:64">+</operator> <name pos:start="212:66" pos:end="212:71">offset</name></expr>;</expr_stmt>

                    <if_stmt pos:start="214:21" pos:end="481:13"><if pos:start="214:21" pos:end="481:13">if <condition pos:start="214:24" pos:end="214:64">(<expr pos:start="214:25" pos:end="214:63"><name pos:start="214:25" pos:end="214:36"><name pos:start="214:25" pos:end="214:33">quant_cof</name><index pos:start="214:34" pos:end="214:36">[<expr pos:start="214:35" pos:end="214:35"><name pos:start="214:35" pos:end="214:35">k</name></expr>]</index></name> <operator pos:start="214:38" pos:end="214:38">&lt;</operator> <operator pos:start="214:40" pos:end="214:40">-</operator><literal type="number" pos:start="214:41" pos:end="214:42">64</literal> <operator pos:start="214:44" pos:end="214:45">||</operator> <name pos:start="214:47" pos:end="214:58"><name pos:start="214:47" pos:end="214:55">quant_cof</name><index pos:start="214:56" pos:end="214:58">[<expr pos:start="214:57" pos:end="214:57"><name pos:start="214:57" pos:end="214:57">k</name></expr>]</index></name> <operator pos:start="214:60" pos:end="214:60">&gt;</operator> <literal type="number" pos:start="214:62" pos:end="214:63">63</literal></expr>)</condition> <block pos:start="214:66" pos:end="481:13">{<block_content pos:start="216:25" pos:end="481:13">

                        <expr_stmt pos:start="216:25" pos:end="216:116"><expr pos:start="216:25" pos:end="216:115"><call pos:start="216:25" pos:end="216:115"><name pos:start="216:25" pos:end="216:30">av_log</name><argument_list pos:start="216:31" pos:end="216:115">(<argument pos:start="216:32" pos:end="216:36"><expr pos:start="216:32" pos:end="216:36"><name pos:start="216:32" pos:end="216:36">avctx</name></expr></argument>, <argument pos:start="216:39" pos:end="216:50"><expr pos:start="216:39" pos:end="216:50"><name pos:start="216:39" pos:end="216:50">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="216:53" pos:end="216:100"><expr pos:start="216:53" pos:end="216:100"><literal type="string" pos:start="216:53" pos:end="216:100">"Quantization coefficient %d is out of range!\n"</literal></expr></argument>, <argument pos:start="216:103" pos:end="216:114"><expr pos:start="216:103" pos:end="216:114"><name pos:start="216:103" pos:end="216:114"><name pos:start="216:103" pos:end="216:111">quant_cof</name><index pos:start="216:112" pos:end="216:114">[<expr pos:start="216:113" pos:end="216:113"><name pos:start="216:113" pos:end="216:113">k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="218:25" pos:end="218:51">return <expr pos:start="218:32" pos:end="218:50"><name pos:start="218:32" pos:end="218:50">AVERROR_INVALIDDATA</name></expr>;</return>





                <comment type="line" pos:start="224:17" pos:end="224:46">// read coefficients 20 to 126</comment>

                <expr_stmt pos:start="226:17" pos:end="226:46"><expr pos:start="226:17" pos:end="226:45"><name pos:start="226:17" pos:end="226:21">k_max</name> <operator pos:start="226:23" pos:end="226:23">=</operator> <call pos:start="226:25" pos:end="226:45"><name pos:start="226:25" pos:end="226:29">FFMIN</name><argument_list pos:start="226:30" pos:end="226:45">(<argument pos:start="226:31" pos:end="226:39"><expr pos:start="226:31" pos:end="226:39"><name pos:start="226:31" pos:end="226:39">opt_order</name></expr></argument>, <argument pos:start="226:42" pos:end="226:44"><expr pos:start="226:42" pos:end="226:44"><literal type="number" pos:start="226:42" pos:end="226:44">127</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="228:17" pos:end="230:64">for <control pos:start="228:21" pos:end="228:38">(<init pos:start="228:22" pos:end="228:22">;</init> <condition pos:start="228:24" pos:end="228:33"><expr pos:start="228:24" pos:end="228:32"><name pos:start="228:24" pos:end="228:24">k</name> <operator pos:start="228:26" pos:end="228:26">&lt;</operator> <name pos:start="228:28" pos:end="228:32">k_max</name></expr>;</condition> <incr pos:start="228:35" pos:end="228:37"><expr pos:start="228:35" pos:end="228:37"><name pos:start="228:35" pos:end="228:35">k</name><operator pos:start="228:36" pos:end="228:37">++</operator></expr></incr>)</control><block type="pseudo" pos:start="230:21" pos:end="230:64"><block_content pos:start="230:21" pos:end="230:64">

                    <expr_stmt pos:start="230:21" pos:end="230:64"><expr pos:start="230:21" pos:end="230:63"><name pos:start="230:21" pos:end="230:32"><name pos:start="230:21" pos:end="230:29">quant_cof</name><index pos:start="230:30" pos:end="230:32">[<expr pos:start="230:31" pos:end="230:31"><name pos:start="230:31" pos:end="230:31">k</name></expr>]</index></name> <operator pos:start="230:34" pos:end="230:34">=</operator> <call pos:start="230:36" pos:end="230:53"><name pos:start="230:36" pos:end="230:46">decode_rice</name><argument_list pos:start="230:47" pos:end="230:53">(<argument pos:start="230:48" pos:end="230:49"><expr pos:start="230:48" pos:end="230:49"><name pos:start="230:48" pos:end="230:49">gb</name></expr></argument>, <argument pos:start="230:52" pos:end="230:52"><expr pos:start="230:52" pos:end="230:52"><literal type="number" pos:start="230:52" pos:end="230:52">2</literal></expr></argument>)</argument_list></call> <operator pos:start="230:55" pos:end="230:55">+</operator> <operator pos:start="230:57" pos:end="230:57">(</operator><name pos:start="230:58" pos:end="230:58">k</name> <operator pos:start="230:60" pos:end="230:60">&amp;</operator> <literal type="number" pos:start="230:62" pos:end="230:62">1</literal><operator pos:start="230:63" pos:end="230:63">)</operator></expr>;</expr_stmt></block_content></block></for>



                <comment type="line" pos:start="234:17" pos:end="234:53">// read coefficients 127 to opt_order</comment>

                <for pos:start="236:17" pos:end="238:54">for <control pos:start="236:21" pos:end="236:42">(<init pos:start="236:22" pos:end="236:22">;</init> <condition pos:start="236:24" pos:end="236:37"><expr pos:start="236:24" pos:end="236:36"><name pos:start="236:24" pos:end="236:24">k</name> <operator pos:start="236:26" pos:end="236:26">&lt;</operator> <name pos:start="236:28" pos:end="236:36">opt_order</name></expr>;</condition> <incr pos:start="236:39" pos:end="236:41"><expr pos:start="236:39" pos:end="236:41"><name pos:start="236:39" pos:end="236:39">k</name><operator pos:start="236:40" pos:end="236:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="238:21" pos:end="238:54"><block_content pos:start="238:21" pos:end="238:54">

                    <expr_stmt pos:start="238:21" pos:end="238:54"><expr pos:start="238:21" pos:end="238:53"><name pos:start="238:21" pos:end="238:32"><name pos:start="238:21" pos:end="238:29">quant_cof</name><index pos:start="238:30" pos:end="238:32">[<expr pos:start="238:31" pos:end="238:31"><name pos:start="238:31" pos:end="238:31">k</name></expr>]</index></name> <operator pos:start="238:34" pos:end="238:34">=</operator> <call pos:start="238:36" pos:end="238:53"><name pos:start="238:36" pos:end="238:46">decode_rice</name><argument_list pos:start="238:47" pos:end="238:53">(<argument pos:start="238:48" pos:end="238:49"><expr pos:start="238:48" pos:end="238:49"><name pos:start="238:48" pos:end="238:49">gb</name></expr></argument>, <argument pos:start="238:52" pos:end="238:52"><expr pos:start="238:52" pos:end="238:52"><literal type="number" pos:start="238:52" pos:end="238:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



                <expr_stmt pos:start="242:17" pos:end="242:76"><expr pos:start="242:17" pos:end="242:75"><name pos:start="242:17" pos:end="242:28"><name pos:start="242:17" pos:end="242:25">quant_cof</name><index pos:start="242:26" pos:end="242:28">[<expr pos:start="242:27" pos:end="242:27"><literal type="number" pos:start="242:27" pos:end="242:27">0</literal></expr>]</index></name> <operator pos:start="242:30" pos:end="242:30">=</operator> <literal type="number" pos:start="242:32" pos:end="242:33">32</literal> <operator pos:start="242:35" pos:end="242:35">*</operator> <name pos:start="242:37" pos:end="242:75"><name pos:start="242:37" pos:end="242:56">parcor_scaled_values</name><index pos:start="242:57" pos:end="242:75">[<expr pos:start="242:58" pos:end="242:74"><name pos:start="242:58" pos:end="242:69"><name pos:start="242:58" pos:end="242:66">quant_cof</name><index pos:start="242:67" pos:end="242:69">[<expr pos:start="242:68" pos:end="242:68"><literal type="number" pos:start="242:68" pos:end="242:68">0</literal></expr>]</index></name> <operator pos:start="242:71" pos:end="242:71">+</operator> <literal type="number" pos:start="242:73" pos:end="242:74">64</literal></expr>]</index></name></expr>;</expr_stmt>



                <if_stmt pos:start="246:17" pos:end="248:81"><if pos:start="246:17" pos:end="248:81">if <condition pos:start="246:20" pos:end="246:34">(<expr pos:start="246:21" pos:end="246:33"><name pos:start="246:21" pos:end="246:29">opt_order</name> <operator pos:start="246:31" pos:end="246:31">&gt;</operator> <literal type="number" pos:start="246:33" pos:end="246:33">1</literal></expr>)</condition><block type="pseudo" pos:start="248:21" pos:end="248:81"><block_content pos:start="248:21" pos:end="248:81">

                    <expr_stmt pos:start="248:21" pos:end="248:81"><expr pos:start="248:21" pos:end="248:80"><name pos:start="248:21" pos:end="248:32"><name pos:start="248:21" pos:end="248:29">quant_cof</name><index pos:start="248:30" pos:end="248:32">[<expr pos:start="248:31" pos:end="248:31"><literal type="number" pos:start="248:31" pos:end="248:31">1</literal></expr>]</index></name> <operator pos:start="248:34" pos:end="248:34">=</operator> <operator pos:start="248:36" pos:end="248:36">-</operator><literal type="number" pos:start="248:37" pos:end="248:38">32</literal> <operator pos:start="248:40" pos:end="248:40">*</operator> <name pos:start="248:42" pos:end="248:80"><name pos:start="248:42" pos:end="248:61">parcor_scaled_values</name><index pos:start="248:62" pos:end="248:80">[<expr pos:start="248:63" pos:end="248:79"><name pos:start="248:63" pos:end="248:74"><name pos:start="248:63" pos:end="248:71">quant_cof</name><index pos:start="248:72" pos:end="248:74">[<expr pos:start="248:73" pos:end="248:73"><literal type="number" pos:start="248:73" pos:end="248:73">1</literal></expr>]</index></name> <operator pos:start="248:76" pos:end="248:76">+</operator> <literal type="number" pos:start="248:78" pos:end="248:79">64</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>




            <for pos:start="253:13" pos:end="255:71">for <control pos:start="253:17" pos:end="253:43">(<init pos:start="253:18" pos:end="253:23"><expr pos:start="253:18" pos:end="253:22"><name pos:start="253:18" pos:end="253:18">k</name> <operator pos:start="253:20" pos:end="253:20">=</operator> <literal type="number" pos:start="253:22" pos:end="253:22">2</literal></expr>;</init> <condition pos:start="253:25" pos:end="253:38"><expr pos:start="253:25" pos:end="253:37"><name pos:start="253:25" pos:end="253:25">k</name> <operator pos:start="253:27" pos:end="253:27">&lt;</operator> <name pos:start="253:29" pos:end="253:37">opt_order</name></expr>;</condition> <incr pos:start="253:40" pos:end="253:42"><expr pos:start="253:40" pos:end="253:42"><name pos:start="253:40" pos:end="253:40">k</name><operator pos:start="253:41" pos:end="253:42">++</operator></expr></incr>)</control><block type="pseudo" pos:start="255:17" pos:end="255:71"><block_content pos:start="255:17" pos:end="255:71">

                <expr_stmt pos:start="255:17" pos:end="255:71"><expr pos:start="255:17" pos:end="255:70"><name pos:start="255:17" pos:end="255:28"><name pos:start="255:17" pos:end="255:25">quant_cof</name><index pos:start="255:26" pos:end="255:28">[<expr pos:start="255:27" pos:end="255:27"><name pos:start="255:27" pos:end="255:27">k</name></expr>]</index></name> <operator pos:start="255:30" pos:end="255:30">=</operator> <operator pos:start="255:32" pos:end="255:32">(</operator><name pos:start="255:33" pos:end="255:44"><name pos:start="255:33" pos:end="255:41">quant_cof</name><index pos:start="255:42" pos:end="255:44">[<expr pos:start="255:43" pos:end="255:43"><name pos:start="255:43" pos:end="255:43">k</name></expr>]</index></name> <operator pos:start="255:46" pos:end="255:47">&lt;&lt;</operator> <literal type="number" pos:start="255:49" pos:end="255:50">14</literal><operator pos:start="255:51" pos:end="255:51">)</operator> <operator pos:start="255:53" pos:end="255:53">+</operator> <operator pos:start="255:55" pos:end="255:55">(</operator><name pos:start="255:56" pos:end="255:63">add_base</name> <operator pos:start="255:65" pos:end="255:66">&lt;&lt;</operator> <literal type="number" pos:start="255:68" pos:end="255:69">13</literal><operator pos:start="255:70" pos:end="255:70">)</operator></expr>;</expr_stmt></block_content></block></for>





    <comment type="line" pos:start="261:5" pos:end="261:35">// read LTP gain and lag values</comment>

    <if_stmt pos:start="263:5" pos:end="481:13"><if pos:start="263:5" pos:end="481:13">if <condition pos:start="263:8" pos:end="263:36">(<expr pos:start="263:9" pos:end="263:35"><name pos:start="263:9" pos:end="263:35"><name pos:start="263:9" pos:end="263:13">sconf</name><operator pos:start="263:14" pos:end="263:15">-&gt;</operator><name pos:start="263:16" pos:end="263:35">long_term_prediction</name></name></expr>)</condition> <block pos:start="263:38" pos:end="481:13">{<block_content pos:start="265:9" pos:end="481:13">

        <expr_stmt pos:start="265:9" pos:end="265:37"><expr pos:start="265:9" pos:end="265:36"><operator pos:start="265:9" pos:end="265:9">*</operator><name pos:start="265:10" pos:end="265:20"><name pos:start="265:10" pos:end="265:11">bd</name><operator pos:start="265:12" pos:end="265:13">-&gt;</operator><name pos:start="265:14" pos:end="265:20">use_ltp</name></name> <operator pos:start="265:22" pos:end="265:22">=</operator> <call pos:start="265:24" pos:end="265:36"><name pos:start="265:24" pos:end="265:32">get_bits1</name><argument_list pos:start="265:33" pos:end="265:36">(<argument pos:start="265:34" pos:end="265:35"><expr pos:start="265:34" pos:end="265:35"><name pos:start="265:34" pos:end="265:35">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="269:9" pos:end="481:13"><if pos:start="269:9" pos:end="481:13">if <condition pos:start="269:12" pos:end="269:25">(<expr pos:start="269:13" pos:end="269:24"><operator pos:start="269:13" pos:end="269:13">*</operator><name pos:start="269:14" pos:end="269:24"><name pos:start="269:14" pos:end="269:15">bd</name><operator pos:start="269:16" pos:end="269:17">-&gt;</operator><name pos:start="269:18" pos:end="269:24">use_ltp</name></name></expr>)</condition> <block pos:start="269:27" pos:end="481:13">{<block_content pos:start="271:13" pos:end="481:13">

            <decl_stmt pos:start="271:13" pos:end="271:21"><decl pos:start="271:13" pos:end="271:17"><type pos:start="271:13" pos:end="271:15"><name pos:start="271:13" pos:end="271:15">int</name></type> <name pos:start="271:17" pos:end="271:17">r</name></decl>, <decl pos:start="271:20" pos:end="271:20"><type ref="prev" pos:start="271:13" pos:end="271:15"/><name pos:start="271:20" pos:end="271:20">c</name></decl>;</decl_stmt>



            <expr_stmt pos:start="275:13" pos:end="275:56"><expr pos:start="275:13" pos:end="275:55"><name pos:start="275:13" pos:end="275:27"><name pos:start="275:13" pos:end="275:14">bd</name><operator pos:start="275:15" pos:end="275:16">-&gt;</operator><name pos:start="275:17" pos:end="275:24">ltp_gain</name><index pos:start="275:25" pos:end="275:27">[<expr pos:start="275:26" pos:end="275:26"><literal type="number" pos:start="275:26" pos:end="275:26">0</literal></expr>]</index></name>   <operator pos:start="275:31" pos:end="275:31">=</operator> <call pos:start="275:33" pos:end="275:50"><name pos:start="275:33" pos:end="275:43">decode_rice</name><argument_list pos:start="275:44" pos:end="275:50">(<argument pos:start="275:45" pos:end="275:46"><expr pos:start="275:45" pos:end="275:46"><name pos:start="275:45" pos:end="275:46">gb</name></expr></argument>, <argument pos:start="275:49" pos:end="275:49"><expr pos:start="275:49" pos:end="275:49"><literal type="number" pos:start="275:49" pos:end="275:49">1</literal></expr></argument>)</argument_list></call> <operator pos:start="275:52" pos:end="275:53">&lt;&lt;</operator> <literal type="number" pos:start="275:55" pos:end="275:55">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="277:13" pos:end="277:56"><expr pos:start="277:13" pos:end="277:55"><name pos:start="277:13" pos:end="277:27"><name pos:start="277:13" pos:end="277:14">bd</name><operator pos:start="277:15" pos:end="277:16">-&gt;</operator><name pos:start="277:17" pos:end="277:24">ltp_gain</name><index pos:start="277:25" pos:end="277:27">[<expr pos:start="277:26" pos:end="277:26"><literal type="number" pos:start="277:26" pos:end="277:26">1</literal></expr>]</index></name>   <operator pos:start="277:31" pos:end="277:31">=</operator> <call pos:start="277:33" pos:end="277:50"><name pos:start="277:33" pos:end="277:43">decode_rice</name><argument_list pos:start="277:44" pos:end="277:50">(<argument pos:start="277:45" pos:end="277:46"><expr pos:start="277:45" pos:end="277:46"><name pos:start="277:45" pos:end="277:46">gb</name></expr></argument>, <argument pos:start="277:49" pos:end="277:49"><expr pos:start="277:49" pos:end="277:49"><literal type="number" pos:start="277:49" pos:end="277:49">2</literal></expr></argument>)</argument_list></call> <operator pos:start="277:52" pos:end="277:53">&lt;&lt;</operator> <literal type="number" pos:start="277:55" pos:end="277:55">3</literal></expr>;</expr_stmt>



            <expr_stmt pos:start="281:13" pos:end="281:52"><expr pos:start="281:13" pos:end="281:51"><name pos:start="281:13" pos:end="281:13">r</name>                 <operator pos:start="281:31" pos:end="281:31">=</operator> <call pos:start="281:33" pos:end="281:51"><name pos:start="281:33" pos:end="281:41">get_unary</name><argument_list pos:start="281:42" pos:end="281:51">(<argument pos:start="281:43" pos:end="281:44"><expr pos:start="281:43" pos:end="281:44"><name pos:start="281:43" pos:end="281:44">gb</name></expr></argument>, <argument pos:start="281:47" pos:end="281:47"><expr pos:start="281:47" pos:end="281:47"><literal type="number" pos:start="281:47" pos:end="281:47">0</literal></expr></argument>, <argument pos:start="281:50" pos:end="281:50"><expr pos:start="281:50" pos:end="281:50"><literal type="number" pos:start="281:50" pos:end="281:50">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="283:13" pos:end="283:48"><expr pos:start="283:13" pos:end="283:47"><name pos:start="283:13" pos:end="283:13">c</name>                 <operator pos:start="283:31" pos:end="283:31">=</operator> <call pos:start="283:33" pos:end="283:47"><name pos:start="283:33" pos:end="283:40">get_bits</name><argument_list pos:start="283:41" pos:end="283:47">(<argument pos:start="283:42" pos:end="283:43"><expr pos:start="283:42" pos:end="283:43"><name pos:start="283:42" pos:end="283:43">gb</name></expr></argument>, <argument pos:start="283:46" pos:end="283:46"><expr pos:start="283:46" pos:end="283:46"><literal type="number" pos:start="283:46" pos:end="283:46">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="285:13" pos:end="285:54"><expr pos:start="285:13" pos:end="285:53"><name pos:start="285:13" pos:end="285:27"><name pos:start="285:13" pos:end="285:14">bd</name><operator pos:start="285:15" pos:end="285:16">-&gt;</operator><name pos:start="285:17" pos:end="285:24">ltp_gain</name><index pos:start="285:25" pos:end="285:27">[<expr pos:start="285:26" pos:end="285:26"><literal type="number" pos:start="285:26" pos:end="285:26">2</literal></expr>]</index></name>   <operator pos:start="285:31" pos:end="285:31">=</operator> <name pos:start="285:33" pos:end="285:53"><name pos:start="285:33" pos:end="285:47">ltp_gain_values</name><index pos:start="285:48" pos:end="285:50">[<expr pos:start="285:49" pos:end="285:49"><name pos:start="285:49" pos:end="285:49">r</name></expr>]</index><index pos:start="285:51" pos:end="285:53">[<expr pos:start="285:52" pos:end="285:52"><name pos:start="285:52" pos:end="285:52">c</name></expr>]</index></name></expr>;</expr_stmt>



            <expr_stmt pos:start="289:13" pos:end="289:56"><expr pos:start="289:13" pos:end="289:55"><name pos:start="289:13" pos:end="289:27"><name pos:start="289:13" pos:end="289:14">bd</name><operator pos:start="289:15" pos:end="289:16">-&gt;</operator><name pos:start="289:17" pos:end="289:24">ltp_gain</name><index pos:start="289:25" pos:end="289:27">[<expr pos:start="289:26" pos:end="289:26"><literal type="number" pos:start="289:26" pos:end="289:26">3</literal></expr>]</index></name>   <operator pos:start="289:31" pos:end="289:31">=</operator> <call pos:start="289:33" pos:end="289:50"><name pos:start="289:33" pos:end="289:43">decode_rice</name><argument_list pos:start="289:44" pos:end="289:50">(<argument pos:start="289:45" pos:end="289:46"><expr pos:start="289:45" pos:end="289:46"><name pos:start="289:45" pos:end="289:46">gb</name></expr></argument>, <argument pos:start="289:49" pos:end="289:49"><expr pos:start="289:49" pos:end="289:49"><literal type="number" pos:start="289:49" pos:end="289:49">2</literal></expr></argument>)</argument_list></call> <operator pos:start="289:52" pos:end="289:53">&lt;&lt;</operator> <literal type="number" pos:start="289:55" pos:end="289:55">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="291:13" pos:end="291:56"><expr pos:start="291:13" pos:end="291:55"><name pos:start="291:13" pos:end="291:27"><name pos:start="291:13" pos:end="291:14">bd</name><operator pos:start="291:15" pos:end="291:16">-&gt;</operator><name pos:start="291:17" pos:end="291:24">ltp_gain</name><index pos:start="291:25" pos:end="291:27">[<expr pos:start="291:26" pos:end="291:26"><literal type="number" pos:start="291:26" pos:end="291:26">4</literal></expr>]</index></name>   <operator pos:start="291:31" pos:end="291:31">=</operator> <call pos:start="291:33" pos:end="291:50"><name pos:start="291:33" pos:end="291:43">decode_rice</name><argument_list pos:start="291:44" pos:end="291:50">(<argument pos:start="291:45" pos:end="291:46"><expr pos:start="291:45" pos:end="291:46"><name pos:start="291:45" pos:end="291:46">gb</name></expr></argument>, <argument pos:start="291:49" pos:end="291:49"><expr pos:start="291:49" pos:end="291:49"><literal type="number" pos:start="291:49" pos:end="291:49">1</literal></expr></argument>)</argument_list></call> <operator pos:start="291:52" pos:end="291:53">&lt;&lt;</operator> <literal type="number" pos:start="291:55" pos:end="291:55">3</literal></expr>;</expr_stmt>



            <expr_stmt pos:start="295:13" pos:end="295:66"><expr pos:start="295:13" pos:end="295:65"><operator pos:start="295:13" pos:end="295:13">*</operator><name pos:start="295:14" pos:end="295:24"><name pos:start="295:14" pos:end="295:15">bd</name><operator pos:start="295:16" pos:end="295:17">-&gt;</operator><name pos:start="295:18" pos:end="295:24">ltp_lag</name></name>      <operator pos:start="295:31" pos:end="295:31">=</operator> <call pos:start="295:33" pos:end="295:65"><name pos:start="295:33" pos:end="295:40">get_bits</name><argument_list pos:start="295:41" pos:end="295:65">(<argument pos:start="295:42" pos:end="295:43"><expr pos:start="295:42" pos:end="295:43"><name pos:start="295:42" pos:end="295:43">gb</name></expr></argument>, <argument pos:start="295:46" pos:end="295:64"><expr pos:start="295:46" pos:end="295:64"><name pos:start="295:46" pos:end="295:64"><name pos:start="295:46" pos:end="295:48">ctx</name><operator pos:start="295:49" pos:end="295:50">-&gt;</operator><name pos:start="295:51" pos:end="295:64">ltp_lag_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="297:13" pos:end="297:56"><expr pos:start="297:13" pos:end="297:55"><operator pos:start="297:13" pos:end="297:13">*</operator><name pos:start="297:14" pos:end="297:24"><name pos:start="297:14" pos:end="297:15">bd</name><operator pos:start="297:16" pos:end="297:17">-&gt;</operator><name pos:start="297:18" pos:end="297:24">ltp_lag</name></name>     <operator pos:start="297:30" pos:end="297:31">+=</operator> <call pos:start="297:33" pos:end="297:55"><name pos:start="297:33" pos:end="297:37">FFMAX</name><argument_list pos:start="297:38" pos:end="297:55">(<argument pos:start="297:39" pos:end="297:39"><expr pos:start="297:39" pos:end="297:39"><literal type="number" pos:start="297:39" pos:end="297:39">4</literal></expr></argument>, <argument pos:start="297:42" pos:end="297:54"><expr pos:start="297:42" pos:end="297:54"><name pos:start="297:42" pos:end="297:50">opt_order</name> <operator pos:start="297:52" pos:end="297:52">+</operator> <literal type="number" pos:start="297:54" pos:end="297:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <comment type="line" pos:start="303:5" pos:end="303:70">// read first value and residuals in case of a random access block</comment>

    <if_stmt pos:start="305:5" pos:end="481:13"><if pos:start="305:5" pos:end="481:13">if <condition pos:start="305:8" pos:end="305:21">(<expr pos:start="305:9" pos:end="305:20"><name pos:start="305:9" pos:end="305:20"><name pos:start="305:9" pos:end="305:10">bd</name><operator pos:start="305:11" pos:end="305:12">-&gt;</operator><name pos:start="305:13" pos:end="305:20">ra_block</name></name></expr>)</condition> <block pos:start="305:23" pos:end="481:13">{<block_content pos:start="307:9" pos:end="481:13">

        <if_stmt pos:start="307:9" pos:end="309:81"><if pos:start="307:9" pos:end="309:81">if <condition pos:start="307:12" pos:end="307:22">(<expr pos:start="307:13" pos:end="307:21"><name pos:start="307:13" pos:end="307:21">opt_order</name></expr>)</condition><block type="pseudo" pos:start="309:13" pos:end="309:81"><block_content pos:start="309:13" pos:end="309:81">

            <expr_stmt pos:start="309:13" pos:end="309:81"><expr pos:start="309:13" pos:end="309:80"><name pos:start="309:13" pos:end="309:30"><name pos:start="309:13" pos:end="309:14">bd</name><operator pos:start="309:15" pos:end="309:16">-&gt;</operator><name pos:start="309:17" pos:end="309:27">raw_samples</name><index pos:start="309:28" pos:end="309:30">[<expr pos:start="309:29" pos:end="309:29"><literal type="number" pos:start="309:29" pos:end="309:29">0</literal></expr>]</index></name> <operator pos:start="309:32" pos:end="309:32">=</operator> <call pos:start="309:34" pos:end="309:80"><name pos:start="309:34" pos:end="309:44">decode_rice</name><argument_list pos:start="309:45" pos:end="309:80">(<argument pos:start="309:46" pos:end="309:47"><expr pos:start="309:46" pos:end="309:47"><name pos:start="309:46" pos:end="309:47">gb</name></expr></argument>, <argument pos:start="309:50" pos:end="309:79"><expr pos:start="309:50" pos:end="309:79"><name pos:start="309:50" pos:end="309:75"><name pos:start="309:50" pos:end="309:54">avctx</name><operator pos:start="309:55" pos:end="309:56">-&gt;</operator><name pos:start="309:57" pos:end="309:75">bits_per_raw_sample</name></name> <operator pos:start="309:77" pos:end="309:77">-</operator> <literal type="number" pos:start="309:79" pos:end="309:79">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="311:9" pos:end="313:78"><if pos:start="311:9" pos:end="313:78">if <condition pos:start="311:12" pos:end="311:26">(<expr pos:start="311:13" pos:end="311:25"><name pos:start="311:13" pos:end="311:21">opt_order</name> <operator pos:start="311:23" pos:end="311:23">&gt;</operator> <literal type="number" pos:start="311:25" pos:end="311:25">1</literal></expr>)</condition><block type="pseudo" pos:start="313:13" pos:end="313:78"><block_content pos:start="313:13" pos:end="313:78">

            <expr_stmt pos:start="313:13" pos:end="313:78"><expr pos:start="313:13" pos:end="313:77"><name pos:start="313:13" pos:end="313:30"><name pos:start="313:13" pos:end="313:14">bd</name><operator pos:start="313:15" pos:end="313:16">-&gt;</operator><name pos:start="313:17" pos:end="313:27">raw_samples</name><index pos:start="313:28" pos:end="313:30">[<expr pos:start="313:29" pos:end="313:29"><literal type="number" pos:start="313:29" pos:end="313:29">1</literal></expr>]</index></name> <operator pos:start="313:32" pos:end="313:32">=</operator> <call pos:start="313:34" pos:end="313:77"><name pos:start="313:34" pos:end="313:44">decode_rice</name><argument_list pos:start="313:45" pos:end="313:77">(<argument pos:start="313:46" pos:end="313:47"><expr pos:start="313:46" pos:end="313:47"><name pos:start="313:46" pos:end="313:47">gb</name></expr></argument>, <argument pos:start="313:50" pos:end="313:76"><expr pos:start="313:50" pos:end="313:76"><call pos:start="313:50" pos:end="313:76"><name pos:start="313:50" pos:end="313:54">FFMIN</name><argument_list pos:start="313:55" pos:end="313:76">(<argument pos:start="313:56" pos:end="313:63"><expr pos:start="313:56" pos:end="313:63"><name pos:start="313:56" pos:end="313:59"><name pos:start="313:56" pos:end="313:56">s</name><index pos:start="313:57" pos:end="313:59">[<expr pos:start="313:58" pos:end="313:58"><literal type="number" pos:start="313:58" pos:end="313:58">0</literal></expr>]</index></name> <operator pos:start="313:61" pos:end="313:61">+</operator> <literal type="number" pos:start="313:63" pos:end="313:63">3</literal></expr></argument>, <argument pos:start="313:66" pos:end="313:75"><expr pos:start="313:66" pos:end="313:75"><name pos:start="313:66" pos:end="313:75"><name pos:start="313:66" pos:end="313:68">ctx</name><operator pos:start="313:69" pos:end="313:70">-&gt;</operator><name pos:start="313:71" pos:end="313:75">s_max</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="315:9" pos:end="317:78"><if pos:start="315:9" pos:end="317:78">if <condition pos:start="315:12" pos:end="315:26">(<expr pos:start="315:13" pos:end="315:25"><name pos:start="315:13" pos:end="315:21">opt_order</name> <operator pos:start="315:23" pos:end="315:23">&gt;</operator> <literal type="number" pos:start="315:25" pos:end="315:25">2</literal></expr>)</condition><block type="pseudo" pos:start="317:13" pos:end="317:78"><block_content pos:start="317:13" pos:end="317:78">

            <expr_stmt pos:start="317:13" pos:end="317:78"><expr pos:start="317:13" pos:end="317:77"><name pos:start="317:13" pos:end="317:30"><name pos:start="317:13" pos:end="317:14">bd</name><operator pos:start="317:15" pos:end="317:16">-&gt;</operator><name pos:start="317:17" pos:end="317:27">raw_samples</name><index pos:start="317:28" pos:end="317:30">[<expr pos:start="317:29" pos:end="317:29"><literal type="number" pos:start="317:29" pos:end="317:29">2</literal></expr>]</index></name> <operator pos:start="317:32" pos:end="317:32">=</operator> <call pos:start="317:34" pos:end="317:77"><name pos:start="317:34" pos:end="317:44">decode_rice</name><argument_list pos:start="317:45" pos:end="317:77">(<argument pos:start="317:46" pos:end="317:47"><expr pos:start="317:46" pos:end="317:47"><name pos:start="317:46" pos:end="317:47">gb</name></expr></argument>, <argument pos:start="317:50" pos:end="317:76"><expr pos:start="317:50" pos:end="317:76"><call pos:start="317:50" pos:end="317:76"><name pos:start="317:50" pos:end="317:54">FFMIN</name><argument_list pos:start="317:55" pos:end="317:76">(<argument pos:start="317:56" pos:end="317:63"><expr pos:start="317:56" pos:end="317:63"><name pos:start="317:56" pos:end="317:59"><name pos:start="317:56" pos:end="317:56">s</name><index pos:start="317:57" pos:end="317:59">[<expr pos:start="317:58" pos:end="317:58"><literal type="number" pos:start="317:58" pos:end="317:58">0</literal></expr>]</index></name> <operator pos:start="317:61" pos:end="317:61">+</operator> <literal type="number" pos:start="317:63" pos:end="317:63">1</literal></expr></argument>, <argument pos:start="317:66" pos:end="317:75"><expr pos:start="317:66" pos:end="317:75"><name pos:start="317:66" pos:end="317:75"><name pos:start="317:66" pos:end="317:68">ctx</name><operator pos:start="317:69" pos:end="317:70">-&gt;</operator><name pos:start="317:71" pos:end="317:75">s_max</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="321:9" pos:end="321:36"><expr pos:start="321:9" pos:end="321:35"><name pos:start="321:9" pos:end="321:13">start</name> <operator pos:start="321:15" pos:end="321:15">=</operator> <call pos:start="321:17" pos:end="321:35"><name pos:start="321:17" pos:end="321:21">FFMIN</name><argument_list pos:start="321:22" pos:end="321:35">(<argument pos:start="321:23" pos:end="321:31"><expr pos:start="321:23" pos:end="321:31"><name pos:start="321:23" pos:end="321:31">opt_order</name></expr></argument>, <argument pos:start="321:34" pos:end="321:34"><expr pos:start="321:34" pos:end="321:34"><literal type="number" pos:start="321:34" pos:end="321:34">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




    <comment type="line" pos:start="326:5" pos:end="326:25">// read all residuals</comment>

    <if_stmt pos:start="328:5" pos:end="481:13"><if pos:start="328:5" pos:end="481:13">if <condition pos:start="328:8" pos:end="328:20">(<expr pos:start="328:9" pos:end="328:19"><name pos:start="328:9" pos:end="328:19"><name pos:start="328:9" pos:end="328:13">sconf</name><operator pos:start="328:14" pos:end="328:15">-&gt;</operator><name pos:start="328:16" pos:end="328:19">bgmc</name></name></expr>)</condition> <block pos:start="328:22" pos:end="481:13">{<block_content pos:start="330:9" pos:end="481:13">

        <decl_stmt pos:start="330:9" pos:end="330:30"><decl pos:start="330:9" pos:end="330:29"><type pos:start="330:9" pos:end="330:11"><name pos:start="330:9" pos:end="330:11">int</name></type>          <name pos:start="330:22" pos:end="330:29"><name pos:start="330:22" pos:end="330:26">delta</name><index pos:start="330:27" pos:end="330:29">[<expr pos:start="330:28" pos:end="330:28"><literal type="number" pos:start="330:28" pos:end="330:28">8</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="332:9" pos:end="332:30"><decl pos:start="332:9" pos:end="332:29"><type pos:start="332:9" pos:end="332:20"><name pos:start="332:9" pos:end="332:16">unsigned</name> <name pos:start="332:18" pos:end="332:20">int</name></type> <name pos:start="332:22" pos:end="332:29"><name pos:start="332:22" pos:end="332:22">k</name>    <index pos:start="332:27" pos:end="332:29">[<expr pos:start="332:28" pos:end="332:28"><literal type="number" pos:start="332:28" pos:end="332:28">8</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="334:9" pos:end="334:82"><decl pos:start="334:9" pos:end="334:81"><type pos:start="334:9" pos:end="334:20"><name pos:start="334:9" pos:end="334:16">unsigned</name> <name pos:start="334:18" pos:end="334:20">int</name></type> <name pos:start="334:22" pos:end="334:22">b</name> <init pos:start="334:24" pos:end="334:81">= <expr pos:start="334:26" pos:end="334:81"><call pos:start="334:26" pos:end="334:81"><name pos:start="334:26" pos:end="334:32">av_clip</name><argument_list pos:start="334:33" pos:end="334:81">(<argument pos:start="334:34" pos:end="334:74"><expr pos:start="334:34" pos:end="334:74"><operator pos:start="334:34" pos:end="334:34">(</operator><call pos:start="334:35" pos:end="334:64"><name pos:start="334:35" pos:end="334:46">av_ceil_log2</name><argument_list pos:start="334:47" pos:end="334:64">(<argument pos:start="334:48" pos:end="334:63"><expr pos:start="334:48" pos:end="334:63"><name pos:start="334:48" pos:end="334:63"><name pos:start="334:48" pos:end="334:49">bd</name><operator pos:start="334:50" pos:end="334:51">-&gt;</operator><name pos:start="334:52" pos:end="334:63">block_length</name></name></expr></argument>)</argument_list></call> <operator pos:start="334:66" pos:end="334:66">-</operator> <literal type="number" pos:start="334:68" pos:end="334:68">3</literal><operator pos:start="334:69" pos:end="334:69">)</operator> <operator pos:start="334:71" pos:end="334:72">&gt;&gt;</operator> <literal type="number" pos:start="334:74" pos:end="334:74">1</literal></expr></argument>, <argument pos:start="334:77" pos:end="334:77"><expr pos:start="334:77" pos:end="334:77"><literal type="number" pos:start="334:77" pos:end="334:77">0</literal></expr></argument>, <argument pos:start="334:80" pos:end="334:80"><expr pos:start="334:80" pos:end="334:80"><literal type="number" pos:start="334:80" pos:end="334:80">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="336:9" pos:end="336:31"><decl pos:start="336:9" pos:end="336:30"><type pos:start="336:9" pos:end="336:20"><name pos:start="336:9" pos:end="336:16">unsigned</name> <name pos:start="336:18" pos:end="336:20">int</name></type> <name pos:start="336:22" pos:end="336:22">i</name> <init pos:start="336:24" pos:end="336:30">= <expr pos:start="336:26" pos:end="336:30"><name pos:start="336:26" pos:end="336:30">start</name></expr></init></decl>;</decl_stmt>



        <comment type="line" pos:start="340:9" pos:end="340:37">// read most significant bits</comment>

        <decl_stmt pos:start="342:9" pos:end="342:26"><decl pos:start="342:9" pos:end="342:25"><type pos:start="342:9" pos:end="342:20"><name pos:start="342:9" pos:end="342:16">unsigned</name> <name pos:start="342:18" pos:end="342:20">int</name></type> <name pos:start="342:22" pos:end="342:25">high</name></decl>;</decl_stmt>

        <decl_stmt pos:start="344:9" pos:end="344:25"><decl pos:start="344:9" pos:end="344:24"><type pos:start="344:9" pos:end="344:20"><name pos:start="344:9" pos:end="344:16">unsigned</name> <name pos:start="344:18" pos:end="344:20">int</name></type> <name pos:start="344:22" pos:end="344:24">low</name></decl>;</decl_stmt>

        <decl_stmt pos:start="346:9" pos:end="346:27"><decl pos:start="346:9" pos:end="346:26"><type pos:start="346:9" pos:end="346:20"><name pos:start="346:9" pos:end="346:16">unsigned</name> <name pos:start="346:18" pos:end="346:20">int</name></type> <name pos:start="346:22" pos:end="346:26">value</name></decl>;</decl_stmt>



        <expr_stmt pos:start="350:9" pos:end="350:53"><expr pos:start="350:9" pos:end="350:52"><call pos:start="350:9" pos:end="350:52"><name pos:start="350:9" pos:end="350:27">ff_bgmc_decode_init</name><argument_list pos:start="350:28" pos:end="350:52">(<argument pos:start="350:29" pos:end="350:30"><expr pos:start="350:29" pos:end="350:30"><name pos:start="350:29" pos:end="350:30">gb</name></expr></argument>, <argument pos:start="350:33" pos:end="350:37"><expr pos:start="350:33" pos:end="350:37"><operator pos:start="350:33" pos:end="350:33">&amp;</operator><name pos:start="350:34" pos:end="350:37">high</name></expr></argument>, <argument pos:start="350:40" pos:end="350:43"><expr pos:start="350:40" pos:end="350:43"><operator pos:start="350:40" pos:end="350:40">&amp;</operator><name pos:start="350:41" pos:end="350:43">low</name></expr></argument>, <argument pos:start="350:46" pos:end="350:51"><expr pos:start="350:46" pos:end="350:51"><operator pos:start="350:46" pos:end="350:46">&amp;</operator><name pos:start="350:47" pos:end="350:51">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="354:9" pos:end="354:46"><expr pos:start="354:9" pos:end="354:45"><name pos:start="354:9" pos:end="354:19">current_res</name> <operator pos:start="354:21" pos:end="354:21">=</operator> <name pos:start="354:23" pos:end="354:37"><name pos:start="354:23" pos:end="354:24">bd</name><operator pos:start="354:25" pos:end="354:26">-&gt;</operator><name pos:start="354:27" pos:end="354:37">raw_samples</name></name> <operator pos:start="354:39" pos:end="354:39">+</operator> <name pos:start="354:41" pos:end="354:45">start</name></expr>;</expr_stmt>



        <for pos:start="358:9" pos:end="481:13">for <control pos:start="358:13" pos:end="358:50">(<init pos:start="358:14" pos:end="358:20"><expr pos:start="358:14" pos:end="358:19"><name pos:start="358:14" pos:end="358:15">sb</name> <operator pos:start="358:17" pos:end="358:17">=</operator> <literal type="number" pos:start="358:19" pos:end="358:19">0</literal></expr>;</init> <condition pos:start="358:22" pos:end="358:37"><expr pos:start="358:22" pos:end="358:36"><name pos:start="358:22" pos:end="358:23">sb</name> <operator pos:start="358:25" pos:end="358:25">&lt;</operator> <name pos:start="358:27" pos:end="358:36">sub_blocks</name></expr>;</condition> <incr pos:start="358:39" pos:end="358:49"><expr pos:start="358:39" pos:end="358:42"><name pos:start="358:39" pos:end="358:40">sb</name><operator pos:start="358:41" pos:end="358:42">++</operator></expr><operator pos:start="358:43" pos:end="358:43">,</operator> <expr pos:start="358:45" pos:end="358:49"><name pos:start="358:45" pos:end="358:45">i</name> <operator pos:start="358:47" pos:end="358:47">=</operator> <literal type="number" pos:start="358:49" pos:end="358:49">0</literal></expr></incr>)</control> <block pos:start="358:52" pos:end="481:13">{<block_content pos:start="360:13" pos:end="481:13">

            <expr_stmt pos:start="360:13" pos:end="360:50"><expr pos:start="360:13" pos:end="360:49"><name pos:start="360:13" pos:end="360:21"><name pos:start="360:13" pos:end="360:13">k</name>    <index pos:start="360:18" pos:end="360:21">[<expr pos:start="360:19" pos:end="360:20"><name pos:start="360:19" pos:end="360:20">sb</name></expr>]</index></name> <operator pos:start="360:23" pos:end="360:23">=</operator> <ternary pos:start="360:25" pos:end="360:49"><condition pos:start="360:25" pos:end="360:35"><expr pos:start="360:25" pos:end="360:33"><name pos:start="360:25" pos:end="360:29"><name pos:start="360:25" pos:end="360:25">s</name><index pos:start="360:26" pos:end="360:29">[<expr pos:start="360:27" pos:end="360:28"><name pos:start="360:27" pos:end="360:28">sb</name></expr>]</index></name> <operator pos:start="360:31" pos:end="360:31">&gt;</operator> <name pos:start="360:33" pos:end="360:33">b</name></expr> ?</condition><then pos:start="360:37" pos:end="360:45"> <expr pos:start="360:37" pos:end="360:45"><name pos:start="360:37" pos:end="360:41"><name pos:start="360:37" pos:end="360:37">s</name><index pos:start="360:38" pos:end="360:41">[<expr pos:start="360:39" pos:end="360:40"><name pos:start="360:39" pos:end="360:40">sb</name></expr>]</index></name> <operator pos:start="360:43" pos:end="360:43">-</operator> <name pos:start="360:45" pos:end="360:45">b</name></expr> </then><else pos:start="360:47" pos:end="360:49">: <expr pos:start="360:49" pos:end="360:49"><literal type="number" pos:start="360:49" pos:end="360:49">0</literal></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="362:13" pos:end="362:42"><expr pos:start="362:13" pos:end="362:41"><name pos:start="362:13" pos:end="362:21"><name pos:start="362:13" pos:end="362:17">delta</name><index pos:start="362:18" pos:end="362:21">[<expr pos:start="362:19" pos:end="362:20"><name pos:start="362:19" pos:end="362:20">sb</name></expr>]</index></name> <operator pos:start="362:23" pos:end="362:23">=</operator> <literal type="number" pos:start="362:25" pos:end="362:27">5</literal> <operator pos:start="362:27" pos:end="362:27">-</operator> <name pos:start="362:29" pos:end="362:33"><name pos:start="362:29" pos:end="362:29">s</name><index pos:start="362:30" pos:end="362:33">[<expr pos:start="362:31" pos:end="362:32"><name pos:start="362:31" pos:end="362:32">sb</name></expr>]</index></name> <operator pos:start="362:35" pos:end="362:35">+</operator> <name pos:start="362:37" pos:end="362:41"><name pos:start="362:37" pos:end="362:37">k</name><index pos:start="362:38" pos:end="362:41">[<expr pos:start="362:39" pos:end="362:40"><name pos:start="362:39" pos:end="362:40">sb</name></expr>]</index></name></expr>;</expr_stmt>



            <expr_stmt pos:start="366:13" pos:end="368:101"><expr pos:start="366:13" pos:end="368:100"><call pos:start="366:13" pos:end="368:100"><name pos:start="366:13" pos:end="366:26">ff_bgmc_decode</name><argument_list pos:start="366:27" pos:end="368:100">(<argument pos:start="366:28" pos:end="366:29"><expr pos:start="366:28" pos:end="366:29"><name pos:start="366:28" pos:end="366:29">gb</name></expr></argument>, <argument pos:start="366:32" pos:end="366:40"><expr pos:start="366:32" pos:end="366:40"><name pos:start="366:32" pos:end="366:40">sb_length</name></expr></argument>, <argument pos:start="366:43" pos:end="366:53"><expr pos:start="366:43" pos:end="366:53"><name pos:start="366:43" pos:end="366:53">current_res</name></expr></argument>,

                        <argument pos:start="368:25" pos:end="368:33"><expr pos:start="368:25" pos:end="368:33"><name pos:start="368:25" pos:end="368:33"><name pos:start="368:25" pos:end="368:29">delta</name><index pos:start="368:30" pos:end="368:33">[<expr pos:start="368:31" pos:end="368:32"><name pos:start="368:31" pos:end="368:32">sb</name></expr>]</index></name></expr></argument>, <argument pos:start="368:36" pos:end="368:41"><expr pos:start="368:36" pos:end="368:41"><name pos:start="368:36" pos:end="368:41"><name pos:start="368:36" pos:end="368:37">sx</name><index pos:start="368:38" pos:end="368:41">[<expr pos:start="368:39" pos:end="368:40"><name pos:start="368:39" pos:end="368:40">sb</name></expr>]</index></name></expr></argument>, <argument pos:start="368:44" pos:end="368:48"><expr pos:start="368:44" pos:end="368:48"><operator pos:start="368:44" pos:end="368:44">&amp;</operator><name pos:start="368:45" pos:end="368:48">high</name></expr></argument>, <argument pos:start="368:51" pos:end="368:54"><expr pos:start="368:51" pos:end="368:54"><operator pos:start="368:51" pos:end="368:51">&amp;</operator><name pos:start="368:52" pos:end="368:54">low</name></expr></argument>, <argument pos:start="368:57" pos:end="368:62"><expr pos:start="368:57" pos:end="368:62"><operator pos:start="368:57" pos:end="368:57">&amp;</operator><name pos:start="368:58" pos:end="368:62">value</name></expr></argument>, <argument pos:start="368:65" pos:end="368:77"><expr pos:start="368:65" pos:end="368:77"><name pos:start="368:65" pos:end="368:77"><name pos:start="368:65" pos:end="368:67">ctx</name><operator pos:start="368:68" pos:end="368:69">-&gt;</operator><name pos:start="368:70" pos:end="368:77">bgmc_lut</name></name></expr></argument>, <argument pos:start="368:80" pos:end="368:99"><expr pos:start="368:80" pos:end="368:99"><name pos:start="368:80" pos:end="368:99"><name pos:start="368:80" pos:end="368:82">ctx</name><operator pos:start="368:83" pos:end="368:84">-&gt;</operator><name pos:start="368:85" pos:end="368:99">bgmc_lut_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="372:13" pos:end="372:37"><expr pos:start="372:13" pos:end="372:36"><name pos:start="372:13" pos:end="372:23">current_res</name> <operator pos:start="372:25" pos:end="372:26">+=</operator> <name pos:start="372:28" pos:end="372:36">sb_length</name></expr>;</expr_stmt>




        <expr_stmt pos:start="377:9" pos:end="377:31"><expr pos:start="377:9" pos:end="377:30"><call pos:start="377:9" pos:end="377:30"><name pos:start="377:9" pos:end="377:26">ff_bgmc_decode_end</name><argument_list pos:start="377:27" pos:end="377:30">(<argument pos:start="377:28" pos:end="377:29"><expr pos:start="377:28" pos:end="377:29"><name pos:start="377:28" pos:end="377:29">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





        <comment type="line" pos:start="383:9" pos:end="383:48">// read least significant bits and tails</comment>

        <expr_stmt pos:start="385:9" pos:end="385:18"><expr pos:start="385:9" pos:end="385:17"><name pos:start="385:9" pos:end="385:9">i</name> <operator pos:start="385:11" pos:end="385:11">=</operator> <name pos:start="385:13" pos:end="385:17">start</name></expr>;</expr_stmt>

        <expr_stmt pos:start="387:9" pos:end="387:46"><expr pos:start="387:9" pos:end="387:45"><name pos:start="387:9" pos:end="387:19">current_res</name> <operator pos:start="387:21" pos:end="387:21">=</operator> <name pos:start="387:23" pos:end="387:37"><name pos:start="387:23" pos:end="387:24">bd</name><operator pos:start="387:25" pos:end="387:26">-&gt;</operator><name pos:start="387:27" pos:end="387:37">raw_samples</name></name> <operator pos:start="387:39" pos:end="387:39">+</operator> <name pos:start="387:41" pos:end="387:45">start</name></expr>;</expr_stmt>



        <for pos:start="391:9" pos:end="481:13">for <control pos:start="391:13" pos:end="391:50">(<init pos:start="391:14" pos:end="391:20"><expr pos:start="391:14" pos:end="391:19"><name pos:start="391:14" pos:end="391:15">sb</name> <operator pos:start="391:17" pos:end="391:17">=</operator> <literal type="number" pos:start="391:19" pos:end="391:19">0</literal></expr>;</init> <condition pos:start="391:22" pos:end="391:37"><expr pos:start="391:22" pos:end="391:36"><name pos:start="391:22" pos:end="391:23">sb</name> <operator pos:start="391:25" pos:end="391:25">&lt;</operator> <name pos:start="391:27" pos:end="391:36">sub_blocks</name></expr>;</condition> <incr pos:start="391:39" pos:end="391:49"><expr pos:start="391:39" pos:end="391:42"><name pos:start="391:39" pos:end="391:40">sb</name><operator pos:start="391:41" pos:end="391:42">++</operator></expr><operator pos:start="391:43" pos:end="391:43">,</operator> <expr pos:start="391:45" pos:end="391:49"><name pos:start="391:45" pos:end="391:45">i</name> <operator pos:start="391:47" pos:end="391:47">=</operator> <literal type="number" pos:start="391:49" pos:end="391:49">0</literal></expr></incr>)</control> <block pos:start="391:52" pos:end="481:13">{<block_content pos:start="393:13" pos:end="481:13">

            <decl_stmt pos:start="393:13" pos:end="393:70"><decl pos:start="393:13" pos:end="393:69"><type pos:start="393:13" pos:end="393:24"><name pos:start="393:13" pos:end="393:20">unsigned</name> <name pos:start="393:22" pos:end="393:24">int</name></type> <name pos:start="393:26" pos:end="393:38">cur_tail_code</name> <init pos:start="393:40" pos:end="393:69">= <expr pos:start="393:42" pos:end="393:69"><name pos:start="393:42" pos:end="393:69"><name pos:start="393:42" pos:end="393:50">tail_code</name><index pos:start="393:51" pos:end="393:58">[<expr pos:start="393:52" pos:end="393:57"><name pos:start="393:52" pos:end="393:57"><name pos:start="393:52" pos:end="393:53">sx</name><index pos:start="393:54" pos:end="393:57">[<expr pos:start="393:55" pos:end="393:56"><name pos:start="393:55" pos:end="393:56">sb</name></expr>]</index></name></expr>]</index><index pos:start="393:59" pos:end="393:69">[<expr pos:start="393:60" pos:end="393:68"><name pos:start="393:60" pos:end="393:68"><name pos:start="393:60" pos:end="393:64">delta</name><index pos:start="393:65" pos:end="393:68">[<expr pos:start="393:66" pos:end="393:67"><name pos:start="393:66" pos:end="393:67">sb</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="395:13" pos:end="395:47"><decl pos:start="395:13" pos:end="395:46"><type pos:start="395:13" pos:end="395:24"><name pos:start="395:13" pos:end="395:20">unsigned</name> <name pos:start="395:22" pos:end="395:24">int</name></type> <name pos:start="395:26" pos:end="395:30">cur_k</name>         <init pos:start="395:40" pos:end="395:46">= <expr pos:start="395:42" pos:end="395:46"><name pos:start="395:42" pos:end="395:46"><name pos:start="395:42" pos:end="395:42">k</name><index pos:start="395:43" pos:end="395:46">[<expr pos:start="395:44" pos:end="395:45"><name pos:start="395:44" pos:end="395:45">sb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="397:13" pos:end="397:47"><decl pos:start="397:13" pos:end="397:46"><type pos:start="397:13" pos:end="397:24"><name pos:start="397:13" pos:end="397:20">unsigned</name> <name pos:start="397:22" pos:end="397:24">int</name></type> <name pos:start="397:26" pos:end="397:30">cur_s</name>         <init pos:start="397:40" pos:end="397:46">= <expr pos:start="397:42" pos:end="397:46"><name pos:start="397:42" pos:end="397:46"><name pos:start="397:42" pos:end="397:42">s</name><index pos:start="397:43" pos:end="397:46">[<expr pos:start="397:44" pos:end="397:45"><name pos:start="397:44" pos:end="397:45">sb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



            <for pos:start="401:13" pos:end="481:13">for <control pos:start="401:17" pos:end="401:38">(<init pos:start="401:18" pos:end="401:18">;</init> <condition pos:start="401:20" pos:end="401:33"><expr pos:start="401:20" pos:end="401:32"><name pos:start="401:20" pos:end="401:20">i</name> <operator pos:start="401:22" pos:end="401:22">&lt;</operator> <name pos:start="401:24" pos:end="401:32">sb_length</name></expr>;</condition> <incr pos:start="401:35" pos:end="401:37"><expr pos:start="401:35" pos:end="401:37"><name pos:start="401:35" pos:end="401:35">i</name><operator pos:start="401:36" pos:end="401:37">++</operator></expr></incr>)</control> <block pos:start="401:40" pos:end="481:13">{<block_content pos:start="403:17" pos:end="481:13">

                <decl_stmt pos:start="403:17" pos:end="403:43"><decl pos:start="403:17" pos:end="403:42"><type pos:start="403:17" pos:end="403:23"><name pos:start="403:17" pos:end="403:23">int32_t</name></type> <name pos:start="403:25" pos:end="403:27">res</name> <init pos:start="403:29" pos:end="403:42">= <expr pos:start="403:31" pos:end="403:42"><operator pos:start="403:31" pos:end="403:31">*</operator><name pos:start="403:32" pos:end="403:42">current_res</name></expr></init></decl>;</decl_stmt>



                <if_stmt pos:start="407:17" pos:end="481:13"><if pos:start="407:17" pos:end="481:13">if <condition pos:start="407:20" pos:end="407:41">(<expr pos:start="407:21" pos:end="407:40"><name pos:start="407:21" pos:end="407:23">res</name> <operator pos:start="407:25" pos:end="407:26">==</operator> <name pos:start="407:28" pos:end="407:40">cur_tail_code</name></expr>)</condition> <block pos:start="407:43" pos:end="481:13">{<block_content pos:start="409:21" pos:end="481:13">

                    <decl_stmt pos:start="409:21" pos:end="411:61"><decl pos:start="409:21" pos:end="411:60"><type pos:start="409:21" pos:end="409:32"><name pos:start="409:21" pos:end="409:28">unsigned</name> <name pos:start="409:30" pos:end="409:32">int</name></type> <name pos:start="409:34" pos:end="409:40">max_msb</name> <init pos:start="409:42" pos:end="411:60">=   <expr pos:start="409:46" pos:end="411:60"><operator pos:start="409:46" pos:end="409:46">(</operator><literal type="number" pos:start="409:47" pos:end="409:49">2</literal> <operator pos:start="409:49" pos:end="409:49">+</operator> <operator pos:start="409:51" pos:end="409:51">(</operator><name pos:start="409:52" pos:end="409:57"><name pos:start="409:52" pos:end="409:53">sx</name><index pos:start="409:54" pos:end="409:57">[<expr pos:start="409:55" pos:end="409:56"><name pos:start="409:55" pos:end="409:56">sb</name></expr>]</index></name> <operator pos:start="409:59" pos:end="409:59">&gt;</operator> <literal type="number" pos:start="409:61" pos:end="409:61">2</literal><operator pos:start="409:62" pos:end="409:62">)</operator> <operator pos:start="409:64" pos:end="409:64">+</operator> <operator pos:start="409:66" pos:end="409:66">(</operator><name pos:start="409:67" pos:end="409:72"><name pos:start="409:67" pos:end="409:68">sx</name><index pos:start="409:69" pos:end="409:72">[<expr pos:start="409:70" pos:end="409:71"><name pos:start="409:70" pos:end="409:71">sb</name></expr>]</index></name> <operator pos:start="409:74" pos:end="409:74">&gt;</operator> <literal type="number" pos:start="409:76" pos:end="409:77">10</literal><operator pos:start="409:78" pos:end="409:78">)</operator><operator pos:start="409:79" pos:end="409:79">)</operator>

                                          <operator pos:start="411:43" pos:end="411:44">&lt;&lt;</operator> <operator pos:start="411:46" pos:end="411:46">(</operator><literal type="number" pos:start="411:47" pos:end="411:49">5</literal> <operator pos:start="411:49" pos:end="411:49">-</operator> <name pos:start="411:51" pos:end="411:59"><name pos:start="411:51" pos:end="411:55">delta</name><index pos:start="411:56" pos:end="411:59">[<expr pos:start="411:57" pos:end="411:58"><name pos:start="411:57" pos:end="411:58">sb</name></expr>]</index></name><operator pos:start="411:60" pos:end="411:60">)</operator></expr></init></decl>;</decl_stmt>



                    <expr_stmt pos:start="415:21" pos:end="415:49"><expr pos:start="415:21" pos:end="415:48"><name pos:start="415:21" pos:end="415:23">res</name> <operator pos:start="415:25" pos:end="415:25">=</operator> <call pos:start="415:27" pos:end="415:48"><name pos:start="415:27" pos:end="415:37">decode_rice</name><argument_list pos:start="415:38" pos:end="415:48">(<argument pos:start="415:39" pos:end="415:40"><expr pos:start="415:39" pos:end="415:40"><name pos:start="415:39" pos:end="415:40">gb</name></expr></argument>, <argument pos:start="415:43" pos:end="415:47"><expr pos:start="415:43" pos:end="415:47"><name pos:start="415:43" pos:end="415:47">cur_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <if_stmt pos:start="419:21" pos:end="428:17"><if pos:start="419:21" pos:end="423:21">if <condition pos:start="419:24" pos:end="419:33">(<expr pos:start="419:25" pos:end="419:32"><name pos:start="419:25" pos:end="419:27">res</name> <operator pos:start="419:29" pos:end="419:30">&gt;=</operator> <literal type="number" pos:start="419:32" pos:end="419:32">0</literal></expr>)</condition> <block pos:start="419:35" pos:end="423:21">{<block_content pos:start="421:25" pos:end="421:54">

                        <expr_stmt pos:start="421:25" pos:end="421:54"><expr pos:start="421:25" pos:end="421:53"><name pos:start="421:25" pos:end="421:27">res</name> <operator pos:start="421:29" pos:end="421:30">+=</operator> <operator pos:start="421:32" pos:end="421:32">(</operator><name pos:start="421:33" pos:end="421:39">max_msb</name>    <operator pos:start="421:44" pos:end="421:44">)</operator> <operator pos:start="421:46" pos:end="421:47">&lt;&lt;</operator> <name pos:start="421:49" pos:end="421:53">cur_k</name></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="423:23" pos:end="428:17">else <block pos:start="423:28" pos:end="428:17">{<block_content pos:start="425:25" pos:end="425:54">

                        <expr_stmt pos:start="425:25" pos:end="425:54"><expr pos:start="425:25" pos:end="425:53"><name pos:start="425:25" pos:end="425:27">res</name> <operator pos:start="425:29" pos:end="425:30">-=</operator> <operator pos:start="425:32" pos:end="425:32">(</operator><name pos:start="425:33" pos:end="425:39">max_msb</name> <operator pos:start="425:41" pos:end="425:41">-</operator> <literal type="number" pos:start="425:43" pos:end="425:43">1</literal><operator pos:start="425:44" pos:end="425:44">)</operator> <operator pos:start="425:46" pos:end="425:47">&lt;&lt;</operator> <name pos:start="425:49" pos:end="425:53">cur_k</name></expr>;</expr_stmt>


                </block_content>}</block></else></if_stmt> <if_stmt pos:start="428:19" pos:end="481:13"><else pos:start="428:19" pos:end="481:13">else <block pos:start="428:24" pos:end="481:13">{<block_content pos:start="430:21" pos:end="481:13">

                    <if_stmt pos:start="430:21" pos:end="432:30"><if pos:start="430:21" pos:end="432:30">if <condition pos:start="430:24" pos:end="430:44">(<expr pos:start="430:25" pos:end="430:43"><name pos:start="430:25" pos:end="430:27">res</name> <operator pos:start="430:29" pos:end="430:29">&gt;</operator> <name pos:start="430:31" pos:end="430:43">cur_tail_code</name></expr>)</condition><block type="pseudo" pos:start="432:25" pos:end="432:30"><block_content pos:start="432:25" pos:end="432:30">

                        <expr_stmt pos:start="432:25" pos:end="432:30"><expr pos:start="432:25" pos:end="432:29"><name pos:start="432:25" pos:end="432:27">res</name><operator pos:start="432:28" pos:end="432:29">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>



                    <if_stmt pos:start="436:21" pos:end="438:35"><if pos:start="436:21" pos:end="438:35">if <condition pos:start="436:24" pos:end="436:32">(<expr pos:start="436:25" pos:end="436:31"><name pos:start="436:25" pos:end="436:27">res</name> <operator pos:start="436:29" pos:end="436:29">&amp;</operator> <literal type="number" pos:start="436:31" pos:end="436:31">1</literal></expr>)</condition><block type="pseudo" pos:start="438:25" pos:end="438:35"><block_content pos:start="438:25" pos:end="438:35">

                        <expr_stmt pos:start="438:25" pos:end="438:35"><expr pos:start="438:25" pos:end="438:34"><name pos:start="438:25" pos:end="438:27">res</name> <operator pos:start="438:29" pos:end="438:29">=</operator> <operator pos:start="438:31" pos:end="438:31">-</operator><name pos:start="438:32" pos:end="438:34">res</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



                    <expr_stmt pos:start="442:21" pos:end="442:30"><expr pos:start="442:21" pos:end="442:29"><name pos:start="442:21" pos:end="442:23">res</name> <operator pos:start="442:25" pos:end="442:27">&gt;&gt;=</operator> <literal type="number" pos:start="442:29" pos:end="442:29">1</literal></expr>;</expr_stmt>



                    <if_stmt pos:start="446:21" pos:end="481:13"><if pos:start="446:21" pos:end="460:5">if <condition pos:start="446:24" pos:end="446:30">(<expr pos:start="446:25" pos:end="446:29"><name pos:start="446:25" pos:end="446:29">cur_k</name></expr>)</condition> <block pos:start="446:32" pos:end="460:5">{<block_content pos:start="448:25" pos:end="456:37">

                        <expr_stmt pos:start="448:25" pos:end="448:38"><expr pos:start="448:25" pos:end="448:37"><name pos:start="448:25" pos:end="448:27">res</name> <operator pos:start="448:29" pos:end="448:31">&lt;&lt;=</operator> <name pos:start="448:33" pos:end="448:37">cur_k</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="450:25" pos:end="450:57"><expr pos:start="450:25" pos:end="450:56"><name pos:start="450:25" pos:end="450:27">res</name>  <operator pos:start="450:30" pos:end="450:31">|=</operator> <call pos:start="450:33" pos:end="450:56"><name pos:start="450:33" pos:end="450:45">get_bits_long</name><argument_list pos:start="450:46" pos:end="450:56">(<argument pos:start="450:47" pos:end="450:48"><expr pos:start="450:47" pos:end="450:48"><name pos:start="450:47" pos:end="450:48">gb</name></expr></argument>, <argument pos:start="450:51" pos:end="450:55"><expr pos:start="450:51" pos:end="450:55"><name pos:start="450:51" pos:end="450:55">cur_k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





                <expr_stmt pos:start="456:17" pos:end="456:37"><expr pos:start="456:17" pos:end="456:36"><operator pos:start="456:17" pos:end="456:17">*</operator><name pos:start="456:18" pos:end="456:28">current_res</name><operator pos:start="456:29" pos:end="456:30">++</operator> <operator pos:start="456:32" pos:end="456:32">=</operator> <name pos:start="456:34" pos:end="456:36">res</name></expr>;</expr_stmt>



    </block_content>}</block></if> <else pos:start="460:7" pos:end="481:13">else <block pos:start="460:12" pos:end="481:13">{<block_content pos:start="462:9" pos:end="481:13">

        <expr_stmt pos:start="462:9" pos:end="462:46"><expr pos:start="462:9" pos:end="462:45"><name pos:start="462:9" pos:end="462:19">current_res</name> <operator pos:start="462:21" pos:end="462:21">=</operator> <name pos:start="462:23" pos:end="462:37"><name pos:start="462:23" pos:end="462:24">bd</name><operator pos:start="462:25" pos:end="462:26">-&gt;</operator><name pos:start="462:27" pos:end="462:37">raw_samples</name></name> <operator pos:start="462:39" pos:end="462:39">+</operator> <name pos:start="462:41" pos:end="462:45">start</name></expr>;</expr_stmt>



        <for pos:start="466:9" pos:end="470:56">for <control pos:start="466:13" pos:end="466:54">(<init pos:start="466:14" pos:end="466:20"><expr pos:start="466:14" pos:end="466:19"><name pos:start="466:14" pos:end="466:15">sb</name> <operator pos:start="466:17" pos:end="466:17">=</operator> <literal type="number" pos:start="466:19" pos:end="466:19">0</literal></expr>;</init> <condition pos:start="466:22" pos:end="466:37"><expr pos:start="466:22" pos:end="466:36"><name pos:start="466:22" pos:end="466:23">sb</name> <operator pos:start="466:25" pos:end="466:25">&lt;</operator> <name pos:start="466:27" pos:end="466:36">sub_blocks</name></expr>;</condition> <incr pos:start="466:39" pos:end="466:53"><expr pos:start="466:39" pos:end="466:42"><name pos:start="466:39" pos:end="466:40">sb</name><operator pos:start="466:41" pos:end="466:42">++</operator></expr><operator pos:start="466:43" pos:end="466:43">,</operator> <expr pos:start="466:45" pos:end="466:53"><name pos:start="466:45" pos:end="466:49">start</name> <operator pos:start="466:51" pos:end="466:51">=</operator> <literal type="number" pos:start="466:53" pos:end="466:53">0</literal></expr></incr>)</control><block type="pseudo" pos:start="468:13" pos:end="470:56"><block_content pos:start="468:13" pos:end="470:56">

            <for pos:start="468:13" pos:end="470:56">for <control pos:start="468:17" pos:end="468:46">(<init pos:start="468:18" pos:end="468:18">;</init> <condition pos:start="468:20" pos:end="468:37"><expr pos:start="468:20" pos:end="468:36"><name pos:start="468:20" pos:end="468:24">start</name> <operator pos:start="468:26" pos:end="468:26">&lt;</operator> <name pos:start="468:28" pos:end="468:36">sb_length</name></expr>;</condition> <incr pos:start="468:39" pos:end="468:45"><expr pos:start="468:39" pos:end="468:45"><name pos:start="468:39" pos:end="468:43">start</name><operator pos:start="468:44" pos:end="468:45">++</operator></expr></incr>)</control><block type="pseudo" pos:start="470:17" pos:end="470:56"><block_content pos:start="470:17" pos:end="470:56">

                <expr_stmt pos:start="470:17" pos:end="470:56"><expr pos:start="470:17" pos:end="470:55"><operator pos:start="470:17" pos:end="470:17">*</operator><name pos:start="470:18" pos:end="470:28">current_res</name><operator pos:start="470:29" pos:end="470:30">++</operator> <operator pos:start="470:32" pos:end="470:32">=</operator> <call pos:start="470:34" pos:end="470:55"><name pos:start="470:34" pos:end="470:44">decode_rice</name><argument_list pos:start="470:45" pos:end="470:55">(<argument pos:start="470:46" pos:end="470:47"><expr pos:start="470:46" pos:end="470:47"><name pos:start="470:46" pos:end="470:47">gb</name></expr></argument>, <argument pos:start="470:50" pos:end="470:54"><expr pos:start="470:50" pos:end="470:54"><name pos:start="470:50" pos:end="470:54"><name pos:start="470:50" pos:end="470:50">s</name><index pos:start="470:51" pos:end="470:54">[<expr pos:start="470:52" pos:end="470:53"><name pos:start="470:52" pos:end="470:53">sb</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>




    <if_stmt pos:start="475:5" pos:end="477:27"><if pos:start="475:5" pos:end="477:27">if <condition pos:start="475:8" pos:end="475:44">(<expr pos:start="475:9" pos:end="475:43"><operator pos:start="475:9" pos:end="475:9">!</operator><name pos:start="475:10" pos:end="475:25"><name pos:start="475:10" pos:end="475:14">sconf</name><operator pos:start="475:15" pos:end="475:16">-&gt;</operator><name pos:start="475:17" pos:end="475:25">mc_coding</name></name> <operator pos:start="475:27" pos:end="475:28">||</operator> <name pos:start="475:30" pos:end="475:43"><name pos:start="475:30" pos:end="475:32">ctx</name><operator pos:start="475:33" pos:end="475:34">-&gt;</operator><name pos:start="475:35" pos:end="475:43">js_switch</name></name></expr>)</condition><block type="pseudo" pos:start="477:9" pos:end="477:27"><block_content pos:start="477:9" pos:end="477:27">

        <expr_stmt pos:start="477:9" pos:end="477:27"><expr pos:start="477:9" pos:end="477:26"><call pos:start="477:9" pos:end="477:26"><name pos:start="477:9" pos:end="477:22">align_get_bits</name><argument_list pos:start="477:23" pos:end="477:26">(<argument pos:start="477:24" pos:end="477:25"><expr pos:start="477:24" pos:end="477:25"><name pos:start="477:24" pos:end="477:25">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="481:5" pos:end="481:13">return <expr pos:start="481:12" pos:end="481:12"><literal type="number" pos:start="481:12" pos:end="481:12">0</literal></expr>;</return></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></function>
</unit>
