<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14708.c" pos:tabs="8"><function pos:start="1:1" pos:end="233:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:22">kvm_arch_init_vcpu</name><parameter_list pos:start="1:23" pos:end="1:36">(<parameter pos:start="1:24" pos:end="1:35"><decl pos:start="1:24" pos:end="1:35"><type pos:start="1:24" pos:end="1:33"><name pos:start="1:24" pos:end="1:31">CPUState</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:35">cs</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="233:1">{<block_content pos:start="5:5" pos:end="231:15">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:14"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:14">ret</name></decl>, <decl pos:start="5:17" pos:end="5:24"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:17" pos:end="5:24">arraylen</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:14">v</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:22">kvm_one_reg</name></name></type> <name pos:start="9:24" pos:end="9:24">r</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:23"><name pos:start="11:5" pos:end="11:23"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:23">kvm_reg_list</name></name></type> <name pos:start="11:25" pos:end="11:26">rl</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:29"><decl pos:start="13:5" pos:end="13:28"><type pos:start="13:5" pos:end="13:25"><name pos:start="13:5" pos:end="13:23"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:23">kvm_reg_list</name></name> <modifier pos:start="13:25" pos:end="13:25">*</modifier></type><name pos:start="13:26" pos:end="13:28">rlp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:29"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:10">ARMCPU</name> <modifier pos:start="15:12" pos:end="15:12">*</modifier></type><name pos:start="15:13" pos:end="15:15">cpu</name> <init pos:start="15:17" pos:end="15:29">= <expr pos:start="15:19" pos:end="15:29"><call pos:start="15:19" pos:end="15:29"><name pos:start="15:19" pos:end="15:25">ARM_CPU</name><argument_list pos:start="15:26" pos:end="15:29">(<argument pos:start="15:27" pos:end="15:28"><expr pos:start="15:27" pos:end="15:28"><name pos:start="15:27" pos:end="15:28">cs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:52">(<expr pos:start="19:9" pos:end="19:51"><name pos:start="19:9" pos:end="19:23"><name pos:start="19:9" pos:end="19:11">cpu</name><operator pos:start="19:12" pos:end="19:13">-&gt;</operator><name pos:start="19:14" pos:end="19:23">kvm_target</name></name> <operator pos:start="19:25" pos:end="19:26">==</operator> <name pos:start="19:28" pos:end="19:51">QEMU_KVM_ARM_TARGET_NONE</name></expr>)</condition> <block pos:start="19:54" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:23">

        <expr_stmt pos:start="21:9" pos:end="21:74"><expr pos:start="21:9" pos:end="21:73"><call pos:start="21:9" pos:end="21:73"><name pos:start="21:9" pos:end="21:15">fprintf</name><argument_list pos:start="21:16" pos:end="21:73">(<argument pos:start="21:17" pos:end="21:22"><expr pos:start="21:17" pos:end="21:22"><name pos:start="21:17" pos:end="21:22">stderr</name></expr></argument>, <argument pos:start="21:25" pos:end="21:72"><expr pos:start="21:25" pos:end="21:72"><literal type="string" pos:start="21:25" pos:end="21:72">"KVM is not supported for this guest CPU type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:23">return <expr pos:start="23:16" pos:end="23:22"><operator pos:start="23:16" pos:end="23:16">-</operator><name pos:start="23:17" pos:end="23:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:46">/* Determine init features for this CPU */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:70"><expr pos:start="31:5" pos:end="31:69"><call pos:start="31:5" pos:end="31:69"><name pos:start="31:5" pos:end="31:10">memset</name><argument_list pos:start="31:11" pos:end="31:69">(<argument pos:start="31:12" pos:end="31:33"><expr pos:start="31:12" pos:end="31:33"><name pos:start="31:12" pos:end="31:33"><name pos:start="31:12" pos:end="31:14">cpu</name><operator pos:start="31:15" pos:end="31:16">-&gt;</operator><name pos:start="31:17" pos:end="31:33">kvm_init_features</name></name></expr></argument>, <argument pos:start="31:36" pos:end="31:36"><expr pos:start="31:36" pos:end="31:36"><literal type="number" pos:start="31:36" pos:end="31:36">0</literal></expr></argument>, <argument pos:start="31:39" pos:end="31:68"><expr pos:start="31:39" pos:end="31:68"><sizeof pos:start="31:39" pos:end="31:68">sizeof<argument_list pos:start="31:45" pos:end="31:68">(<argument pos:start="31:46" pos:end="31:67"><expr pos:start="31:46" pos:end="31:67"><name pos:start="31:46" pos:end="31:67"><name pos:start="31:46" pos:end="31:48">cpu</name><operator pos:start="31:49" pos:end="31:50">-&gt;</operator><name pos:start="31:51" pos:end="31:67">kvm_init_features</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:31">(<expr pos:start="33:9" pos:end="33:30"><name pos:start="33:9" pos:end="33:30"><name pos:start="33:9" pos:end="33:11">cpu</name><operator pos:start="33:12" pos:end="33:13">-&gt;</operator><name pos:start="33:14" pos:end="33:30">start_powered_off</name></name></expr>)</condition> <block pos:start="33:33" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:65">

        <expr_stmt pos:start="35:9" pos:end="35:65"><expr pos:start="35:9" pos:end="35:64"><name pos:start="35:9" pos:end="35:33"><name pos:start="35:9" pos:end="35:11">cpu</name><operator pos:start="35:12" pos:end="35:13">-&gt;</operator><name pos:start="35:14" pos:end="35:30">kvm_init_features</name><index pos:start="35:31" pos:end="35:33">[<expr pos:start="35:32" pos:end="35:32"><literal type="number" pos:start="35:32" pos:end="35:32">0</literal></expr>]</index></name> <operator pos:start="35:35" pos:end="35:36">|=</operator> <literal type="number" pos:start="35:38" pos:end="35:38">1</literal> <operator pos:start="35:40" pos:end="35:41">&lt;&lt;</operator> <name pos:start="35:43" pos:end="35:64">KVM_ARM_VCPU_POWER_OFF</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:65">(<expr pos:start="39:9" pos:end="39:64"><call pos:start="39:9" pos:end="39:64"><name pos:start="39:9" pos:end="39:27">kvm_check_extension</name><argument_list pos:start="39:28" pos:end="39:64">(<argument pos:start="39:29" pos:end="39:41"><expr pos:start="39:29" pos:end="39:41"><name pos:start="39:29" pos:end="39:41"><name pos:start="39:29" pos:end="39:30">cs</name><operator pos:start="39:31" pos:end="39:32">-&gt;</operator><name pos:start="39:33" pos:end="39:41">kvm_state</name></name></expr></argument>, <argument pos:start="39:44" pos:end="39:63"><expr pos:start="39:44" pos:end="39:63"><name pos:start="39:44" pos:end="39:63">KVM_CAP_ARM_PSCI_0_2</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:67" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:64">

        <expr_stmt pos:start="41:9" pos:end="41:30"><expr pos:start="41:9" pos:end="41:29"><name pos:start="41:9" pos:end="41:25"><name pos:start="41:9" pos:end="41:11">cpu</name><operator pos:start="41:12" pos:end="41:13">-&gt;</operator><name pos:start="41:14" pos:end="41:25">psci_version</name></name> <operator pos:start="41:27" pos:end="41:27">=</operator> <literal type="number" pos:start="41:29" pos:end="41:29">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:64"><expr pos:start="43:9" pos:end="43:63"><name pos:start="43:9" pos:end="43:33"><name pos:start="43:9" pos:end="43:11">cpu</name><operator pos:start="43:12" pos:end="43:13">-&gt;</operator><name pos:start="43:14" pos:end="43:30">kvm_init_features</name><index pos:start="43:31" pos:end="43:33">[<expr pos:start="43:32" pos:end="43:32"><literal type="number" pos:start="43:32" pos:end="43:32">0</literal></expr>]</index></name> <operator pos:start="43:35" pos:end="43:36">|=</operator> <literal type="number" pos:start="43:38" pos:end="43:38">1</literal> <operator pos:start="43:40" pos:end="43:41">&lt;&lt;</operator> <name pos:start="43:43" pos:end="43:63">KVM_ARM_VCPU_PSCI_0_2</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:36">/* Do KVM_ARM_VCPU_INIT ioctl */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:32"><expr pos:start="51:5" pos:end="51:31"><name pos:start="51:5" pos:end="51:7">ret</name> <operator pos:start="51:9" pos:end="51:9">=</operator> <call pos:start="51:11" pos:end="51:31"><name pos:start="51:11" pos:end="51:27">kvm_arm_vcpu_init</name><argument_list pos:start="51:28" pos:end="51:31">(<argument pos:start="51:29" pos:end="51:30"><expr pos:start="51:29" pos:end="51:30"><name pos:start="51:29" pos:end="51:30">cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="57:5"><if pos:start="53:5" pos:end="57:5">if <condition pos:start="53:8" pos:end="53:12">(<expr pos:start="53:9" pos:end="53:11"><name pos:start="53:9" pos:end="53:11">ret</name></expr>)</condition> <block pos:start="53:14" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:19">

        <return pos:start="55:9" pos:end="55:19">return <expr pos:start="55:16" pos:end="55:18"><name pos:start="55:16" pos:end="55:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="61:5" pos:end="69:7">/* Query the kernel to make sure it supports 32 VFP

     * registers: QEMU's "cortex-a15" CPU is always a

     * VFP-D32 core. The simplest way to do this is just

     * to attempt to read register d31.

     */</comment>

    <expr_stmt pos:start="71:5" pos:end="71:65"><expr pos:start="71:5" pos:end="71:64"><name pos:start="71:5" pos:end="71:8"><name pos:start="71:5" pos:end="71:5">r</name><operator pos:start="71:6" pos:end="71:6">.</operator><name pos:start="71:7" pos:end="71:8">id</name></name> <operator pos:start="71:10" pos:end="71:10">=</operator> <name pos:start="71:12" pos:end="71:22">KVM_REG_ARM</name> <operator pos:start="71:24" pos:end="71:24">|</operator> <name pos:start="71:26" pos:end="71:41">KVM_REG_SIZE_U64</name> <operator pos:start="71:43" pos:end="71:43">|</operator> <name pos:start="71:45" pos:end="71:59">KVM_REG_ARM_VFP</name> <operator pos:start="71:61" pos:end="71:61">|</operator> <literal type="number" pos:start="71:63" pos:end="71:64">31</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:29"><expr pos:start="73:5" pos:end="73:28"><name pos:start="73:5" pos:end="73:10"><name pos:start="73:5" pos:end="73:5">r</name><operator pos:start="73:6" pos:end="73:6">.</operator><name pos:start="73:7" pos:end="73:10">addr</name></name> <operator pos:start="73:12" pos:end="73:12">=</operator> <operator pos:start="73:14" pos:end="73:14">(</operator><name pos:start="73:15" pos:end="73:23">uintptr_t</name><operator pos:start="73:24" pos:end="73:24">)</operator><operator pos:start="73:25" pos:end="73:25">(</operator><operator pos:start="73:26" pos:end="73:26">&amp;</operator><name pos:start="73:27" pos:end="73:27">v</name><operator pos:start="73:28" pos:end="73:28">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:50"><expr pos:start="75:5" pos:end="75:49"><name pos:start="75:5" pos:end="75:7">ret</name> <operator pos:start="75:9" pos:end="75:9">=</operator> <call pos:start="75:11" pos:end="75:49"><name pos:start="75:11" pos:end="75:24">kvm_vcpu_ioctl</name><argument_list pos:start="75:25" pos:end="75:49">(<argument pos:start="75:26" pos:end="75:27"><expr pos:start="75:26" pos:end="75:27"><name pos:start="75:26" pos:end="75:27">cs</name></expr></argument>, <argument pos:start="75:30" pos:end="75:44"><expr pos:start="75:30" pos:end="75:44"><name pos:start="75:30" pos:end="75:44">KVM_GET_ONE_REG</name></expr></argument>, <argument pos:start="75:47" pos:end="75:48"><expr pos:start="75:47" pos:end="75:48"><operator pos:start="75:47" pos:end="75:47">&amp;</operator><name pos:start="75:48" pos:end="75:48">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="77:5" pos:end="81:5"><if pos:start="77:5" pos:end="81:5">if <condition pos:start="77:8" pos:end="77:23">(<expr pos:start="77:9" pos:end="77:22"><name pos:start="77:9" pos:end="77:11">ret</name> <operator pos:start="77:13" pos:end="77:14">==</operator> <operator pos:start="77:16" pos:end="77:16">-</operator><name pos:start="77:17" pos:end="77:22">ENOENT</name></expr>)</condition> <block pos:start="77:25" pos:end="81:5">{<block_content pos:start="79:9" pos:end="79:23">

        <return pos:start="79:9" pos:end="79:23">return <expr pos:start="79:16" pos:end="79:22"><operator pos:start="79:16" pos:end="79:16">-</operator><name pos:start="79:17" pos:end="79:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="85:5" pos:end="89:7">/* Populate the cpreg list based on the kernel's idea

     * of what registers exist (and throw away the TCG-created list).

     */</comment>

    <expr_stmt pos:start="91:5" pos:end="91:13"><expr pos:start="91:5" pos:end="91:12"><name pos:start="91:5" pos:end="91:8"><name pos:start="91:5" pos:end="91:6">rl</name><operator pos:start="91:7" pos:end="91:7">.</operator><name pos:start="91:8" pos:end="91:8">n</name></name> <operator pos:start="91:10" pos:end="91:10">=</operator> <literal type="number" pos:start="91:12" pos:end="91:12">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:52"><expr pos:start="93:5" pos:end="93:51"><name pos:start="93:5" pos:end="93:7">ret</name> <operator pos:start="93:9" pos:end="93:9">=</operator> <call pos:start="93:11" pos:end="93:51"><name pos:start="93:11" pos:end="93:24">kvm_vcpu_ioctl</name><argument_list pos:start="93:25" pos:end="93:51">(<argument pos:start="93:26" pos:end="93:27"><expr pos:start="93:26" pos:end="93:27"><name pos:start="93:26" pos:end="93:27">cs</name></expr></argument>, <argument pos:start="93:30" pos:end="93:45"><expr pos:start="93:30" pos:end="93:45"><name pos:start="93:30" pos:end="93:45">KVM_GET_REG_LIST</name></expr></argument>, <argument pos:start="93:48" pos:end="93:50"><expr pos:start="93:48" pos:end="93:50"><operator pos:start="93:48" pos:end="93:48">&amp;</operator><name pos:start="93:49" pos:end="93:50">rl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="95:5" pos:end="99:5"><if pos:start="95:5" pos:end="99:5">if <condition pos:start="95:8" pos:end="95:22">(<expr pos:start="95:9" pos:end="95:21"><name pos:start="95:9" pos:end="95:11">ret</name> <operator pos:start="95:13" pos:end="95:14">!=</operator> <operator pos:start="95:16" pos:end="95:16">-</operator><name pos:start="95:17" pos:end="95:21">E2BIG</name></expr>)</condition> <block pos:start="95:24" pos:end="99:5">{<block_content pos:start="97:9" pos:end="97:19">

        <return pos:start="97:9" pos:end="97:19">return <expr pos:start="97:16" pos:end="97:18"><name pos:start="97:16" pos:end="97:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:74"><expr pos:start="101:5" pos:end="101:73"><name pos:start="101:5" pos:end="101:7">rlp</name> <operator pos:start="101:9" pos:end="101:9">=</operator> <call pos:start="101:11" pos:end="101:73"><name pos:start="101:11" pos:end="101:18">g_malloc</name><argument_list pos:start="101:19" pos:end="101:73">(<argument pos:start="101:20" pos:end="101:72"><expr pos:start="101:20" pos:end="101:72"><sizeof pos:start="101:20" pos:end="101:46">sizeof<argument_list pos:start="101:26" pos:end="101:46">(<argument pos:start="101:27" pos:end="101:45"><expr pos:start="101:27" pos:end="101:45">struct <name pos:start="101:34" pos:end="101:45">kvm_reg_list</name></expr></argument>)</argument_list></sizeof> <operator pos:start="101:48" pos:end="101:48">+</operator> <name pos:start="101:50" pos:end="101:53"><name pos:start="101:50" pos:end="101:51">rl</name><operator pos:start="101:52" pos:end="101:52">.</operator><name pos:start="101:53" pos:end="101:53">n</name></name> <operator pos:start="101:55" pos:end="101:55">*</operator> <sizeof pos:start="101:57" pos:end="101:72">sizeof<argument_list pos:start="101:63" pos:end="101:72">(<argument pos:start="101:64" pos:end="101:71"><expr pos:start="101:64" pos:end="101:71"><name pos:start="101:64" pos:end="101:71">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:18"><expr pos:start="103:5" pos:end="103:17"><name pos:start="103:5" pos:end="103:10"><name pos:start="103:5" pos:end="103:7">rlp</name><operator pos:start="103:8" pos:end="103:9">-&gt;</operator><name pos:start="103:10" pos:end="103:10">n</name></name> <operator pos:start="103:12" pos:end="103:12">=</operator> <name pos:start="103:14" pos:end="103:17"><name pos:start="103:14" pos:end="103:15">rl</name><operator pos:start="103:16" pos:end="103:16">.</operator><name pos:start="103:17" pos:end="103:17">n</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:52"><expr pos:start="105:5" pos:end="105:51"><name pos:start="105:5" pos:end="105:7">ret</name> <operator pos:start="105:9" pos:end="105:9">=</operator> <call pos:start="105:11" pos:end="105:51"><name pos:start="105:11" pos:end="105:24">kvm_vcpu_ioctl</name><argument_list pos:start="105:25" pos:end="105:51">(<argument pos:start="105:26" pos:end="105:27"><expr pos:start="105:26" pos:end="105:27"><name pos:start="105:26" pos:end="105:27">cs</name></expr></argument>, <argument pos:start="105:30" pos:end="105:45"><expr pos:start="105:30" pos:end="105:45"><name pos:start="105:30" pos:end="105:45">KVM_GET_REG_LIST</name></expr></argument>, <argument pos:start="105:48" pos:end="105:50"><expr pos:start="105:48" pos:end="105:50"><name pos:start="105:48" pos:end="105:50">rlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="107:5" pos:end="111:5"><if pos:start="107:5" pos:end="111:5">if <condition pos:start="107:8" pos:end="107:12">(<expr pos:start="107:9" pos:end="107:11"><name pos:start="107:9" pos:end="107:11">ret</name></expr>)</condition> <block pos:start="107:14" pos:end="111:5">{<block_content pos:start="109:9" pos:end="109:17">

        <goto pos:start="109:9" pos:end="109:17">goto <name pos:start="109:14" pos:end="109:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="113:5" pos:end="117:7">/* Sort the list we get back from the kernel, since cpreg_tuples

     * must be in strictly ascending order.

     */</comment>

    <expr_stmt pos:start="119:5" pos:end="119:63"><expr pos:start="119:5" pos:end="119:62"><call pos:start="119:5" pos:end="119:62"><name pos:start="119:5" pos:end="119:9">qsort</name><argument_list pos:start="119:10" pos:end="119:62">(<argument pos:start="119:11" pos:end="119:19"><expr pos:start="119:11" pos:end="119:19"><operator pos:start="119:11" pos:end="119:11">&amp;</operator><name pos:start="119:12" pos:end="119:19"><name pos:start="119:12" pos:end="119:14">rlp</name><operator pos:start="119:15" pos:end="119:16">-&gt;</operator><name pos:start="119:17" pos:end="119:19">reg</name></name></expr></argument>, <argument pos:start="119:22" pos:end="119:27"><expr pos:start="119:22" pos:end="119:27"><name pos:start="119:22" pos:end="119:27"><name pos:start="119:22" pos:end="119:24">rlp</name><operator pos:start="119:25" pos:end="119:26">-&gt;</operator><name pos:start="119:27" pos:end="119:27">n</name></name></expr></argument>, <argument pos:start="119:30" pos:end="119:48"><expr pos:start="119:30" pos:end="119:48"><sizeof pos:start="119:30" pos:end="119:48">sizeof<argument_list pos:start="119:36" pos:end="119:48">(<argument pos:start="119:37" pos:end="119:47"><expr pos:start="119:37" pos:end="119:47"><name pos:start="119:37" pos:end="119:47"><name pos:start="119:37" pos:end="119:39">rlp</name><operator pos:start="119:40" pos:end="119:41">-&gt;</operator><name pos:start="119:42" pos:end="119:44">reg</name><index pos:start="119:45" pos:end="119:47">[<expr pos:start="119:46" pos:end="119:46"><literal type="number" pos:start="119:46" pos:end="119:46">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="119:51" pos:end="119:61"><expr pos:start="119:51" pos:end="119:61"><name pos:start="119:51" pos:end="119:61">compare_u64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="123:5" pos:end="153:5">for <control pos:start="123:9" pos:end="123:46">(<init pos:start="123:10" pos:end="123:29"><expr pos:start="123:10" pos:end="123:14"><name pos:start="123:10" pos:end="123:10">i</name> <operator pos:start="123:12" pos:end="123:12">=</operator> <literal type="number" pos:start="123:14" pos:end="123:14">0</literal></expr><operator pos:start="123:15" pos:end="123:15">,</operator> <expr pos:start="123:17" pos:end="123:28"><name pos:start="123:17" pos:end="123:24">arraylen</name> <operator pos:start="123:26" pos:end="123:26">=</operator> <literal type="number" pos:start="123:28" pos:end="123:28">0</literal></expr>;</init> <condition pos:start="123:31" pos:end="123:41"><expr pos:start="123:31" pos:end="123:40"><name pos:start="123:31" pos:end="123:31">i</name> <operator pos:start="123:33" pos:end="123:33">&lt;</operator> <name pos:start="123:35" pos:end="123:40"><name pos:start="123:35" pos:end="123:37">rlp</name><operator pos:start="123:38" pos:end="123:39">-&gt;</operator><name pos:start="123:40" pos:end="123:40">n</name></name></expr>;</condition> <incr pos:start="123:43" pos:end="123:45"><expr pos:start="123:43" pos:end="123:45"><name pos:start="123:43" pos:end="123:43">i</name><operator pos:start="123:44" pos:end="123:45">++</operator></expr></incr>)</control> <block pos:start="123:48" pos:end="153:5">{<block_content pos:start="125:9" pos:end="151:19">

        <if_stmt pos:start="125:9" pos:end="129:9"><if pos:start="125:9" pos:end="129:9">if <condition pos:start="125:12" pos:end="125:51">(<expr pos:start="125:13" pos:end="125:50"><operator pos:start="125:13" pos:end="125:13">!</operator><call pos:start="125:14" pos:end="125:50"><name pos:start="125:14" pos:end="125:37">reg_syncs_via_tuple_list</name><argument_list pos:start="125:38" pos:end="125:50">(<argument pos:start="125:39" pos:end="125:49"><expr pos:start="125:39" pos:end="125:49"><name pos:start="125:39" pos:end="125:49"><name pos:start="125:39" pos:end="125:41">rlp</name><operator pos:start="125:42" pos:end="125:43">-&gt;</operator><name pos:start="125:44" pos:end="125:46">reg</name><index pos:start="125:47" pos:end="125:49">[<expr pos:start="125:48" pos:end="125:48"><name pos:start="125:48" pos:end="125:48">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="125:53" pos:end="129:9">{<block_content pos:start="127:13" pos:end="127:21">

            <continue pos:start="127:13" pos:end="127:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <switch pos:start="131:9" pos:end="147:9">switch <condition pos:start="131:16" pos:end="131:48">(<expr pos:start="131:17" pos:end="131:47"><name pos:start="131:17" pos:end="131:27"><name pos:start="131:17" pos:end="131:19">rlp</name><operator pos:start="131:20" pos:end="131:21">-&gt;</operator><name pos:start="131:22" pos:end="131:24">reg</name><index pos:start="131:25" pos:end="131:27">[<expr pos:start="131:26" pos:end="131:26"><name pos:start="131:26" pos:end="131:26">i</name></expr>]</index></name> <operator pos:start="131:29" pos:end="131:29">&amp;</operator> <name pos:start="131:31" pos:end="131:47">KVM_REG_SIZE_MASK</name></expr>)</condition> <block pos:start="131:50" pos:end="147:9">{<block_content pos:start="133:9" pos:end="145:21">

        <case pos:start="133:9" pos:end="133:30">case <expr pos:start="133:14" pos:end="133:29"><name pos:start="133:14" pos:end="133:29">KVM_REG_SIZE_U32</name></expr>:</case>

        <case pos:start="135:9" pos:end="135:30">case <expr pos:start="135:14" pos:end="135:29"><name pos:start="135:14" pos:end="135:29">KVM_REG_SIZE_U64</name></expr>:</case>

            <break pos:start="137:13" pos:end="137:18">break;</break>

        <default pos:start="139:9" pos:end="139:16">default:</default>

            <expr_stmt pos:start="141:13" pos:end="141:78"><expr pos:start="141:13" pos:end="141:77"><call pos:start="141:13" pos:end="141:77"><name pos:start="141:13" pos:end="141:19">fprintf</name><argument_list pos:start="141:20" pos:end="141:77">(<argument pos:start="141:21" pos:end="141:26"><expr pos:start="141:21" pos:end="141:26"><name pos:start="141:21" pos:end="141:26">stderr</name></expr></argument>, <argument pos:start="141:29" pos:end="141:76"><expr pos:start="141:29" pos:end="141:76"><literal type="string" pos:start="141:29" pos:end="141:76">"Can't handle size of register in kernel list\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:26"><expr pos:start="143:13" pos:end="143:25"><name pos:start="143:13" pos:end="143:15">ret</name> <operator pos:start="143:17" pos:end="143:17">=</operator> <operator pos:start="143:19" pos:end="143:19">-</operator><name pos:start="143:20" pos:end="143:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="145:13" pos:end="145:21">goto <name pos:start="145:18" pos:end="145:20">out</name>;</goto>

        </block_content>}</block></switch>



        <expr_stmt pos:start="151:9" pos:end="151:19"><expr pos:start="151:9" pos:end="151:18"><name pos:start="151:9" pos:end="151:16">arraylen</name><operator pos:start="151:17" pos:end="151:18">++</operator></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="157:5" pos:end="157:73"><expr pos:start="157:5" pos:end="157:72"><name pos:start="157:5" pos:end="157:22"><name pos:start="157:5" pos:end="157:7">cpu</name><operator pos:start="157:8" pos:end="157:9">-&gt;</operator><name pos:start="157:10" pos:end="157:22">cpreg_indexes</name></name> <operator pos:start="157:24" pos:end="157:24">=</operator> <call pos:start="157:26" pos:end="157:72"><name pos:start="157:26" pos:end="157:32">g_renew</name><argument_list pos:start="157:33" pos:end="157:72">(<argument pos:start="157:34" pos:end="157:41"><expr pos:start="157:34" pos:end="157:41"><name pos:start="157:34" pos:end="157:41">uint64_t</name></expr></argument>, <argument pos:start="157:44" pos:end="157:61"><expr pos:start="157:44" pos:end="157:61"><name pos:start="157:44" pos:end="157:61"><name pos:start="157:44" pos:end="157:46">cpu</name><operator pos:start="157:47" pos:end="157:48">-&gt;</operator><name pos:start="157:49" pos:end="157:61">cpreg_indexes</name></name></expr></argument>, <argument pos:start="157:64" pos:end="157:71"><expr pos:start="157:64" pos:end="157:71"><name pos:start="157:64" pos:end="157:71">arraylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:71"><expr pos:start="159:5" pos:end="159:70"><name pos:start="159:5" pos:end="159:21"><name pos:start="159:5" pos:end="159:7">cpu</name><operator pos:start="159:8" pos:end="159:9">-&gt;</operator><name pos:start="159:10" pos:end="159:21">cpreg_values</name></name> <operator pos:start="159:23" pos:end="159:23">=</operator> <call pos:start="159:25" pos:end="159:70"><name pos:start="159:25" pos:end="159:31">g_renew</name><argument_list pos:start="159:32" pos:end="159:70">(<argument pos:start="159:33" pos:end="159:40"><expr pos:start="159:33" pos:end="159:40"><name pos:start="159:33" pos:end="159:40">uint64_t</name></expr></argument>, <argument pos:start="159:43" pos:end="159:59"><expr pos:start="159:43" pos:end="159:59"><name pos:start="159:43" pos:end="159:59"><name pos:start="159:43" pos:end="159:45">cpu</name><operator pos:start="159:46" pos:end="159:47">-&gt;</operator><name pos:start="159:48" pos:end="159:59">cpreg_values</name></name></expr></argument>, <argument pos:start="159:62" pos:end="159:69"><expr pos:start="159:62" pos:end="159:69"><name pos:start="159:62" pos:end="159:69">arraylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="161:5" pos:end="163:51"><expr pos:start="161:5" pos:end="163:50"><name pos:start="161:5" pos:end="161:30"><name pos:start="161:5" pos:end="161:7">cpu</name><operator pos:start="161:8" pos:end="161:9">-&gt;</operator><name pos:start="161:10" pos:end="161:30">cpreg_vmstate_indexes</name></name> <operator pos:start="161:32" pos:end="161:32">=</operator> <call pos:start="161:34" pos:end="163:50"><name pos:start="161:34" pos:end="161:40">g_renew</name><argument_list pos:start="161:41" pos:end="163:50">(<argument pos:start="161:42" pos:end="161:49"><expr pos:start="161:42" pos:end="161:49"><name pos:start="161:42" pos:end="161:49">uint64_t</name></expr></argument>, <argument pos:start="161:52" pos:end="161:77"><expr pos:start="161:52" pos:end="161:77"><name pos:start="161:52" pos:end="161:77"><name pos:start="161:52" pos:end="161:54">cpu</name><operator pos:start="161:55" pos:end="161:56">-&gt;</operator><name pos:start="161:57" pos:end="161:77">cpreg_vmstate_indexes</name></name></expr></argument>,

                                         <argument pos:start="163:42" pos:end="163:49"><expr pos:start="163:42" pos:end="163:49"><name pos:start="163:42" pos:end="163:49">arraylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="167:50"><expr pos:start="165:5" pos:end="167:49"><name pos:start="165:5" pos:end="165:29"><name pos:start="165:5" pos:end="165:7">cpu</name><operator pos:start="165:8" pos:end="165:9">-&gt;</operator><name pos:start="165:10" pos:end="165:29">cpreg_vmstate_values</name></name> <operator pos:start="165:31" pos:end="165:31">=</operator> <call pos:start="165:33" pos:end="167:49"><name pos:start="165:33" pos:end="165:39">g_renew</name><argument_list pos:start="165:40" pos:end="167:49">(<argument pos:start="165:41" pos:end="165:48"><expr pos:start="165:41" pos:end="165:48"><name pos:start="165:41" pos:end="165:48">uint64_t</name></expr></argument>, <argument pos:start="165:51" pos:end="165:75"><expr pos:start="165:51" pos:end="165:75"><name pos:start="165:51" pos:end="165:75"><name pos:start="165:51" pos:end="165:53">cpu</name><operator pos:start="165:54" pos:end="165:55">-&gt;</operator><name pos:start="165:56" pos:end="165:75">cpreg_vmstate_values</name></name></expr></argument>,

                                        <argument pos:start="167:41" pos:end="167:48"><expr pos:start="167:41" pos:end="167:48"><name pos:start="167:41" pos:end="167:48">arraylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:36"><expr pos:start="169:5" pos:end="169:35"><name pos:start="169:5" pos:end="169:24"><name pos:start="169:5" pos:end="169:7">cpu</name><operator pos:start="169:8" pos:end="169:9">-&gt;</operator><name pos:start="169:10" pos:end="169:24">cpreg_array_len</name></name> <operator pos:start="169:26" pos:end="169:26">=</operator> <name pos:start="169:28" pos:end="169:35">arraylen</name></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="171:44"><expr pos:start="171:5" pos:end="171:43"><name pos:start="171:5" pos:end="171:32"><name pos:start="171:5" pos:end="171:7">cpu</name><operator pos:start="171:8" pos:end="171:9">-&gt;</operator><name pos:start="171:10" pos:end="171:32">cpreg_vmstate_array_len</name></name> <operator pos:start="171:34" pos:end="171:34">=</operator> <name pos:start="171:36" pos:end="171:43">arraylen</name></expr>;</expr_stmt>



    <for pos:start="175:5" pos:end="189:5">for <control pos:start="175:9" pos:end="175:46">(<init pos:start="175:10" pos:end="175:29"><expr pos:start="175:10" pos:end="175:14"><name pos:start="175:10" pos:end="175:10">i</name> <operator pos:start="175:12" pos:end="175:12">=</operator> <literal type="number" pos:start="175:14" pos:end="175:14">0</literal></expr><operator pos:start="175:15" pos:end="175:15">,</operator> <expr pos:start="175:17" pos:end="175:28"><name pos:start="175:17" pos:end="175:24">arraylen</name> <operator pos:start="175:26" pos:end="175:26">=</operator> <literal type="number" pos:start="175:28" pos:end="175:28">0</literal></expr>;</init> <condition pos:start="175:31" pos:end="175:41"><expr pos:start="175:31" pos:end="175:40"><name pos:start="175:31" pos:end="175:31">i</name> <operator pos:start="175:33" pos:end="175:33">&lt;</operator> <name pos:start="175:35" pos:end="175:40"><name pos:start="175:35" pos:end="175:37">rlp</name><operator pos:start="175:38" pos:end="175:39">-&gt;</operator><name pos:start="175:40" pos:end="175:40">n</name></name></expr>;</condition> <incr pos:start="175:43" pos:end="175:45"><expr pos:start="175:43" pos:end="175:45"><name pos:start="175:43" pos:end="175:43">i</name><operator pos:start="175:44" pos:end="175:45">++</operator></expr></incr>)</control> <block pos:start="175:48" pos:end="189:5">{<block_content pos:start="177:9" pos:end="187:19">

        <decl_stmt pos:start="177:9" pos:end="177:38"><decl pos:start="177:9" pos:end="177:37"><type pos:start="177:9" pos:end="177:16"><name pos:start="177:9" pos:end="177:16">uint64_t</name></type> <name pos:start="177:18" pos:end="177:23">regidx</name> <init pos:start="177:25" pos:end="177:37">= <expr pos:start="177:27" pos:end="177:37"><name pos:start="177:27" pos:end="177:37"><name pos:start="177:27" pos:end="177:29">rlp</name><operator pos:start="177:30" pos:end="177:31">-&gt;</operator><name pos:start="177:32" pos:end="177:34">reg</name><index pos:start="177:35" pos:end="177:37">[<expr pos:start="177:36" pos:end="177:36"><name pos:start="177:36" pos:end="177:36">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="179:9" pos:end="183:9"><if pos:start="179:9" pos:end="183:9">if <condition pos:start="179:12" pos:end="179:46">(<expr pos:start="179:13" pos:end="179:45"><operator pos:start="179:13" pos:end="179:13">!</operator><call pos:start="179:14" pos:end="179:45"><name pos:start="179:14" pos:end="179:37">reg_syncs_via_tuple_list</name><argument_list pos:start="179:38" pos:end="179:45">(<argument pos:start="179:39" pos:end="179:44"><expr pos:start="179:39" pos:end="179:44"><name pos:start="179:39" pos:end="179:44">regidx</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="179:48" pos:end="183:9">{<block_content pos:start="181:13" pos:end="181:21">

            <continue pos:start="181:13" pos:end="181:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="185:9" pos:end="185:46"><expr pos:start="185:9" pos:end="185:45"><name pos:start="185:9" pos:end="185:36"><name pos:start="185:9" pos:end="185:11">cpu</name><operator pos:start="185:12" pos:end="185:13">-&gt;</operator><name pos:start="185:14" pos:end="185:26">cpreg_indexes</name><index pos:start="185:27" pos:end="185:36">[<expr pos:start="185:28" pos:end="185:35"><name pos:start="185:28" pos:end="185:35">arraylen</name></expr>]</index></name> <operator pos:start="185:38" pos:end="185:38">=</operator> <name pos:start="185:40" pos:end="185:45">regidx</name></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:19"><expr pos:start="187:9" pos:end="187:18"><name pos:start="187:9" pos:end="187:16">arraylen</name><operator pos:start="187:17" pos:end="187:18">++</operator></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="191:5" pos:end="191:45"><expr pos:start="191:5" pos:end="191:44"><call pos:start="191:5" pos:end="191:44"><name pos:start="191:5" pos:end="191:10">assert</name><argument_list pos:start="191:11" pos:end="191:44">(<argument pos:start="191:12" pos:end="191:43"><expr pos:start="191:12" pos:end="191:43"><name pos:start="191:12" pos:end="191:31"><name pos:start="191:12" pos:end="191:14">cpu</name><operator pos:start="191:15" pos:end="191:16">-&gt;</operator><name pos:start="191:17" pos:end="191:31">cpreg_array_len</name></name> <operator pos:start="191:33" pos:end="191:34">==</operator> <name pos:start="191:36" pos:end="191:43">arraylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="195:5" pos:end="209:5"><if pos:start="195:5" pos:end="209:5">if <condition pos:start="195:8" pos:end="195:37">(<expr pos:start="195:9" pos:end="195:36"><operator pos:start="195:9" pos:end="195:9">!</operator><call pos:start="195:10" pos:end="195:36"><name pos:start="195:10" pos:end="195:31">write_kvmstate_to_list</name><argument_list pos:start="195:32" pos:end="195:36">(<argument pos:start="195:33" pos:end="195:35"><expr pos:start="195:33" pos:end="195:35"><name pos:start="195:33" pos:end="195:35">cpu</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="195:39" pos:end="209:5">{<block_content pos:start="203:9" pos:end="207:17">

        <comment type="block" pos:start="197:9" pos:end="201:11">/* Shouldn't happen unless kernel is inconsistent about

         * what registers exist.

         */</comment>

        <expr_stmt pos:start="203:9" pos:end="203:74"><expr pos:start="203:9" pos:end="203:73"><call pos:start="203:9" pos:end="203:73"><name pos:start="203:9" pos:end="203:15">fprintf</name><argument_list pos:start="203:16" pos:end="203:73">(<argument pos:start="203:17" pos:end="203:22"><expr pos:start="203:17" pos:end="203:22"><name pos:start="203:17" pos:end="203:22">stderr</name></expr></argument>, <argument pos:start="203:25" pos:end="203:72"><expr pos:start="203:25" pos:end="203:72"><literal type="string" pos:start="203:25" pos:end="203:72">"Initial read of kernel register state failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="205:9" pos:end="205:22"><expr pos:start="205:9" pos:end="205:21"><name pos:start="205:9" pos:end="205:11">ret</name> <operator pos:start="205:13" pos:end="205:13">=</operator> <operator pos:start="205:15" pos:end="205:15">-</operator><name pos:start="205:16" pos:end="205:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="207:9" pos:end="207:17">goto <name pos:start="207:14" pos:end="207:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="213:5" pos:end="217:7">/* Save a copy of the initial register values so that we can

     * feed it back to the kernel on VCPU reset.

     */</comment>

    <expr_stmt pos:start="219:5" pos:end="223:69"><expr pos:start="219:5" pos:end="223:68"><name pos:start="219:5" pos:end="219:27"><name pos:start="219:5" pos:end="219:7">cpu</name><operator pos:start="219:8" pos:end="219:9">-&gt;</operator><name pos:start="219:10" pos:end="219:27">cpreg_reset_values</name></name> <operator pos:start="219:29" pos:end="219:29">=</operator> <call pos:start="219:31" pos:end="223:68"><name pos:start="219:31" pos:end="219:38">g_memdup</name><argument_list pos:start="219:39" pos:end="223:68">(<argument pos:start="219:40" pos:end="219:56"><expr pos:start="219:40" pos:end="219:56"><name pos:start="219:40" pos:end="219:56"><name pos:start="219:40" pos:end="219:42">cpu</name><operator pos:start="219:43" pos:end="219:44">-&gt;</operator><name pos:start="219:45" pos:end="219:56">cpreg_values</name></name></expr></argument>,

                                       <argument pos:start="221:40" pos:end="223:67"><expr pos:start="221:40" pos:end="223:67"><name pos:start="221:40" pos:end="221:59"><name pos:start="221:40" pos:end="221:42">cpu</name><operator pos:start="221:43" pos:end="221:44">-&gt;</operator><name pos:start="221:45" pos:end="221:59">cpreg_array_len</name></name> <operator pos:start="221:61" pos:end="221:61">*</operator>

                                       <sizeof pos:start="223:40" pos:end="223:67">sizeof<argument_list pos:start="223:46" pos:end="223:67">(<argument pos:start="223:47" pos:end="223:66"><expr pos:start="223:47" pos:end="223:66"><name pos:start="223:47" pos:end="223:66"><name pos:start="223:47" pos:end="223:49">cpu</name><operator pos:start="223:50" pos:end="223:51">-&gt;</operator><name pos:start="223:52" pos:end="223:63">cpreg_values</name><index pos:start="223:64" pos:end="223:66">[<expr pos:start="223:65" pos:end="223:65"><literal type="number" pos:start="223:65" pos:end="223:65">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="227:1" pos:end="227:4"><name pos:start="227:1" pos:end="227:3">out</name>:</label>

    <expr_stmt pos:start="229:5" pos:end="229:16"><expr pos:start="229:5" pos:end="229:15"><call pos:start="229:5" pos:end="229:15"><name pos:start="229:5" pos:end="229:10">g_free</name><argument_list pos:start="229:11" pos:end="229:15">(<argument pos:start="229:12" pos:end="229:14"><expr pos:start="229:12" pos:end="229:14"><name pos:start="229:12" pos:end="229:14">rlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="231:5" pos:end="231:15">return <expr pos:start="231:12" pos:end="231:14"><name pos:start="231:12" pos:end="231:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
