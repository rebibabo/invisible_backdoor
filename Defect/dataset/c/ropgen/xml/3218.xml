<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3218.c" pos:tabs="8"><function pos:start="1:1" pos:end="675:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">qcow2_open</name><parameter_list pos:start="1:22" pos:end="3:35">(<parameter pos:start="1:23" pos:end="1:42"><decl pos:start="1:23" pos:end="1:42"><type pos:start="1:23" pos:end="1:42"><name pos:start="1:23" pos:end="1:38">BlockDriverState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:42">bs</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:58"><decl pos:start="1:45" pos:end="1:58"><type pos:start="1:45" pos:end="1:58"><name pos:start="1:45" pos:end="1:49">QDict</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:58">options</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:69"><decl pos:start="1:61" pos:end="1:69"><type pos:start="1:61" pos:end="1:69"><name pos:start="1:61" pos:end="1:63">int</name></type> <name pos:start="1:65" pos:end="1:69">flags</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:34"><decl pos:start="3:23" pos:end="3:34"><type pos:start="3:23" pos:end="3:34"><name pos:start="3:23" pos:end="3:27">Error</name> <modifier pos:start="3:29" pos:end="3:29">*</modifier><modifier pos:start="3:30" pos:end="3:30">*</modifier></type><name pos:start="3:31" pos:end="3:34">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="675:1">{<block_content pos:start="7:5" pos:end="673:15">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">BDRVQcowState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:33">= <expr pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:25">bs</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">len</name></decl>, <decl pos:start="9:14" pos:end="9:14"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:14">i</name></decl>, <decl pos:start="9:17" pos:end="9:23"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:17" pos:end="9:19">ret</name> <init pos:start="9:21" pos:end="9:23">= <expr pos:start="9:23" pos:end="9:23"><literal type="number" pos:start="9:23" pos:end="9:23">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:14">QCowHeader</name></type> <name pos:start="11:16" pos:end="11:21">header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">QemuOpts</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:18">opts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:9">Error</name> <modifier pos:start="15:11" pos:end="15:11">*</modifier></type><name pos:start="15:12" pos:end="15:20">local_err</name> <init pos:start="15:22" pos:end="15:27">= <expr pos:start="15:24" pos:end="15:27"><name pos:start="15:24" pos:end="15:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:20">ext_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:31"><decl pos:start="19:5" pos:end="19:30"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint64_t</name></type> <name pos:start="19:14" pos:end="19:30">l1_vm_state_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:34"><decl pos:start="21:5" pos:end="21:33"><type pos:start="21:5" pos:end="21:16"><specifier pos:start="21:5" pos:end="21:9">const</specifier> <name pos:start="21:11" pos:end="21:14">char</name> <modifier pos:start="21:16" pos:end="21:16">*</modifier></type><name pos:start="21:17" pos:end="21:33">opt_overlap_check</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:35"><decl pos:start="23:5" pos:end="23:34"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:30">overlap_check_template</name> <init pos:start="23:32" pos:end="23:34">= <expr pos:start="23:34" pos:end="23:34"><literal type="number" pos:start="23:34" pos:end="23:34">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:59"><expr pos:start="27:5" pos:end="27:58"><name pos:start="27:5" pos:end="27:7">ret</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <call pos:start="27:11" pos:end="27:58"><name pos:start="27:11" pos:end="27:20">bdrv_pread</name><argument_list pos:start="27:21" pos:end="27:58">(<argument pos:start="27:22" pos:end="27:29"><expr pos:start="27:22" pos:end="27:29"><name pos:start="27:22" pos:end="27:29"><name pos:start="27:22" pos:end="27:23">bs</name><operator pos:start="27:24" pos:end="27:25">-&gt;</operator><name pos:start="27:26" pos:end="27:29">file</name></name></expr></argument>, <argument pos:start="27:32" pos:end="27:32"><expr pos:start="27:32" pos:end="27:32"><literal type="number" pos:start="27:32" pos:end="27:32">0</literal></expr></argument>, <argument pos:start="27:35" pos:end="27:41"><expr pos:start="27:35" pos:end="27:41"><operator pos:start="27:35" pos:end="27:35">&amp;</operator><name pos:start="27:36" pos:end="27:41">header</name></expr></argument>, <argument pos:start="27:44" pos:end="27:57"><expr pos:start="27:44" pos:end="27:57"><sizeof pos:start="27:44" pos:end="27:57">sizeof<argument_list pos:start="27:50" pos:end="27:57">(<argument pos:start="27:51" pos:end="27:56"><expr pos:start="27:51" pos:end="27:56"><name pos:start="27:51" pos:end="27:56">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:16">(<expr pos:start="29:9" pos:end="29:15"><name pos:start="29:9" pos:end="29:11">ret</name> <operator pos:start="29:13" pos:end="29:13">&lt;</operator> <literal type="number" pos:start="29:15" pos:end="29:15">0</literal></expr>)</condition> <block pos:start="29:18" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:18">

        <expr_stmt pos:start="31:9" pos:end="31:68"><expr pos:start="31:9" pos:end="31:67"><call pos:start="31:9" pos:end="31:67"><name pos:start="31:9" pos:end="31:24">error_setg_errno</name><argument_list pos:start="31:25" pos:end="31:67">(<argument pos:start="31:26" pos:end="31:29"><expr pos:start="31:26" pos:end="31:29"><name pos:start="31:26" pos:end="31:29">errp</name></expr></argument>, <argument pos:start="31:32" pos:end="31:35"><expr pos:start="31:32" pos:end="31:35"><operator pos:start="31:32" pos:end="31:32">-</operator><name pos:start="31:33" pos:end="31:35">ret</name></expr></argument>, <argument pos:start="31:38" pos:end="31:66"><expr pos:start="31:38" pos:end="31:66"><literal type="string" pos:start="31:38" pos:end="31:66">"Could not read qcow2 header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="33:9" pos:end="33:18">goto <name pos:start="33:14" pos:end="33:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:32"><expr pos:start="37:5" pos:end="37:31"><call pos:start="37:5" pos:end="37:31"><name pos:start="37:5" pos:end="37:16">be32_to_cpus</name><argument_list pos:start="37:17" pos:end="37:31">(<argument pos:start="37:18" pos:end="37:30"><expr pos:start="37:18" pos:end="37:30"><operator pos:start="37:18" pos:end="37:18">&amp;</operator><name pos:start="37:19" pos:end="37:30"><name pos:start="37:19" pos:end="37:24">header</name><operator pos:start="37:25" pos:end="37:25">.</operator><name pos:start="37:26" pos:end="37:30">magic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:34"><expr pos:start="39:5" pos:end="39:33"><call pos:start="39:5" pos:end="39:33"><name pos:start="39:5" pos:end="39:16">be32_to_cpus</name><argument_list pos:start="39:17" pos:end="39:33">(<argument pos:start="39:18" pos:end="39:32"><expr pos:start="39:18" pos:end="39:32"><operator pos:start="39:18" pos:end="39:18">&amp;</operator><name pos:start="39:19" pos:end="39:32"><name pos:start="39:19" pos:end="39:24">header</name><operator pos:start="39:25" pos:end="39:25">.</operator><name pos:start="39:26" pos:end="39:32">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:46"><expr pos:start="41:5" pos:end="41:45"><call pos:start="41:5" pos:end="41:45"><name pos:start="41:5" pos:end="41:16">be64_to_cpus</name><argument_list pos:start="41:17" pos:end="41:45">(<argument pos:start="41:18" pos:end="41:44"><expr pos:start="41:18" pos:end="41:44"><operator pos:start="41:18" pos:end="41:18">&amp;</operator><name pos:start="41:19" pos:end="41:44"><name pos:start="41:19" pos:end="41:24">header</name><operator pos:start="41:25" pos:end="41:25">.</operator><name pos:start="41:26" pos:end="41:44">backing_file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:44"><expr pos:start="43:5" pos:end="43:43"><call pos:start="43:5" pos:end="43:43"><name pos:start="43:5" pos:end="43:16">be32_to_cpus</name><argument_list pos:start="43:17" pos:end="43:43">(<argument pos:start="43:18" pos:end="43:42"><expr pos:start="43:18" pos:end="43:42"><operator pos:start="43:18" pos:end="43:18">&amp;</operator><name pos:start="43:19" pos:end="43:42"><name pos:start="43:19" pos:end="43:24">header</name><operator pos:start="43:25" pos:end="43:25">.</operator><name pos:start="43:26" pos:end="43:42">backing_file_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:31"><expr pos:start="45:5" pos:end="45:30"><call pos:start="45:5" pos:end="45:30"><name pos:start="45:5" pos:end="45:16">be64_to_cpus</name><argument_list pos:start="45:17" pos:end="45:30">(<argument pos:start="45:18" pos:end="45:29"><expr pos:start="45:18" pos:end="45:29"><operator pos:start="45:18" pos:end="45:18">&amp;</operator><name pos:start="45:19" pos:end="45:29"><name pos:start="45:19" pos:end="45:24">header</name><operator pos:start="45:25" pos:end="45:25">.</operator><name pos:start="45:26" pos:end="45:29">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:39"><expr pos:start="47:5" pos:end="47:38"><call pos:start="47:5" pos:end="47:38"><name pos:start="47:5" pos:end="47:16">be32_to_cpus</name><argument_list pos:start="47:17" pos:end="47:38">(<argument pos:start="47:18" pos:end="47:37"><expr pos:start="47:18" pos:end="47:37"><operator pos:start="47:18" pos:end="47:18">&amp;</operator><name pos:start="47:19" pos:end="47:37"><name pos:start="47:19" pos:end="47:24">header</name><operator pos:start="47:25" pos:end="47:25">.</operator><name pos:start="47:26" pos:end="47:37">cluster_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:39"><expr pos:start="49:5" pos:end="49:38"><call pos:start="49:5" pos:end="49:38"><name pos:start="49:5" pos:end="49:16">be32_to_cpus</name><argument_list pos:start="49:17" pos:end="49:38">(<argument pos:start="49:18" pos:end="49:37"><expr pos:start="49:18" pos:end="49:37"><operator pos:start="49:18" pos:end="49:18">&amp;</operator><name pos:start="49:19" pos:end="49:37"><name pos:start="49:19" pos:end="49:24">header</name><operator pos:start="49:25" pos:end="49:25">.</operator><name pos:start="49:26" pos:end="49:37">crypt_method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:42"><expr pos:start="51:5" pos:end="51:41"><call pos:start="51:5" pos:end="51:41"><name pos:start="51:5" pos:end="51:16">be64_to_cpus</name><argument_list pos:start="51:17" pos:end="51:41">(<argument pos:start="51:18" pos:end="51:40"><expr pos:start="51:18" pos:end="51:40"><operator pos:start="51:18" pos:end="51:18">&amp;</operator><name pos:start="51:19" pos:end="51:40"><name pos:start="51:19" pos:end="51:24">header</name><operator pos:start="51:25" pos:end="51:25">.</operator><name pos:start="51:26" pos:end="51:40">l1_table_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:34"><expr pos:start="53:5" pos:end="53:33"><call pos:start="53:5" pos:end="53:33"><name pos:start="53:5" pos:end="53:16">be32_to_cpus</name><argument_list pos:start="53:17" pos:end="53:33">(<argument pos:start="53:18" pos:end="53:32"><expr pos:start="53:18" pos:end="53:32"><operator pos:start="53:18" pos:end="53:18">&amp;</operator><name pos:start="53:19" pos:end="53:32"><name pos:start="53:19" pos:end="53:24">header</name><operator pos:start="53:25" pos:end="53:25">.</operator><name pos:start="53:26" pos:end="53:32">l1_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:48"><expr pos:start="55:5" pos:end="55:47"><call pos:start="55:5" pos:end="55:47"><name pos:start="55:5" pos:end="55:16">be64_to_cpus</name><argument_list pos:start="55:17" pos:end="55:47">(<argument pos:start="55:18" pos:end="55:46"><expr pos:start="55:18" pos:end="55:46"><operator pos:start="55:18" pos:end="55:18">&amp;</operator><name pos:start="55:19" pos:end="55:46"><name pos:start="55:19" pos:end="55:24">header</name><operator pos:start="55:25" pos:end="55:25">.</operator><name pos:start="55:26" pos:end="55:46">refcount_table_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:50"><expr pos:start="57:5" pos:end="57:49"><call pos:start="57:5" pos:end="57:49"><name pos:start="57:5" pos:end="57:16">be32_to_cpus</name><argument_list pos:start="57:17" pos:end="57:49">(<argument pos:start="57:18" pos:end="57:48"><expr pos:start="57:18" pos:end="57:48"><operator pos:start="57:18" pos:end="57:18">&amp;</operator><name pos:start="57:19" pos:end="57:48"><name pos:start="57:19" pos:end="57:24">header</name><operator pos:start="57:25" pos:end="57:25">.</operator><name pos:start="57:26" pos:end="57:48">refcount_table_clusters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:43"><expr pos:start="59:5" pos:end="59:42"><call pos:start="59:5" pos:end="59:42"><name pos:start="59:5" pos:end="59:16">be64_to_cpus</name><argument_list pos:start="59:17" pos:end="59:42">(<argument pos:start="59:18" pos:end="59:41"><expr pos:start="59:18" pos:end="59:41"><operator pos:start="59:18" pos:end="59:18">&amp;</operator><name pos:start="59:19" pos:end="59:41"><name pos:start="59:19" pos:end="59:24">header</name><operator pos:start="59:25" pos:end="59:25">.</operator><name pos:start="59:26" pos:end="59:41">snapshots_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:39"><expr pos:start="61:5" pos:end="61:38"><call pos:start="61:5" pos:end="61:38"><name pos:start="61:5" pos:end="61:16">be32_to_cpus</name><argument_list pos:start="61:17" pos:end="61:38">(<argument pos:start="61:18" pos:end="61:37"><expr pos:start="61:18" pos:end="61:37"><operator pos:start="61:18" pos:end="61:18">&amp;</operator><name pos:start="61:19" pos:end="61:37"><name pos:start="61:19" pos:end="61:24">header</name><operator pos:start="61:25" pos:end="61:25">.</operator><name pos:start="61:26" pos:end="61:37">nb_snapshots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="65:5" pos:end="73:5"><if pos:start="65:5" pos:end="73:5">if <condition pos:start="65:8" pos:end="65:35">(<expr pos:start="65:9" pos:end="65:34"><name pos:start="65:9" pos:end="65:20"><name pos:start="65:9" pos:end="65:14">header</name><operator pos:start="65:15" pos:end="65:15">.</operator><name pos:start="65:16" pos:end="65:20">magic</name></name> <operator pos:start="65:22" pos:end="65:23">!=</operator> <name pos:start="65:25" pos:end="65:34">QCOW_MAGIC</name></expr>)</condition> <block pos:start="65:37" pos:end="73:5">{<block_content pos:start="67:9" pos:end="71:18">

        <expr_stmt pos:start="67:9" pos:end="67:57"><expr pos:start="67:9" pos:end="67:56"><call pos:start="67:9" pos:end="67:56"><name pos:start="67:9" pos:end="67:18">error_setg</name><argument_list pos:start="67:19" pos:end="67:56">(<argument pos:start="67:20" pos:end="67:23"><expr pos:start="67:20" pos:end="67:23"><name pos:start="67:20" pos:end="67:23">errp</name></expr></argument>, <argument pos:start="67:26" pos:end="67:55"><expr pos:start="67:26" pos:end="67:55"><literal type="string" pos:start="67:26" pos:end="67:55">"Image is not in qcow2 format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:22"><expr pos:start="69:9" pos:end="69:21"><name pos:start="69:9" pos:end="69:11">ret</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <operator pos:start="69:15" pos:end="69:15">-</operator><name pos:start="69:16" pos:end="69:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="71:9" pos:end="71:18">goto <name pos:start="71:14" pos:end="71:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="75:5" pos:end="83:5"><if pos:start="75:5" pos:end="83:5">if <condition pos:start="75:8" pos:end="75:49">(<expr pos:start="75:9" pos:end="75:48"><name pos:start="75:9" pos:end="75:22"><name pos:start="75:9" pos:end="75:14">header</name><operator pos:start="75:15" pos:end="75:15">.</operator><name pos:start="75:16" pos:end="75:22">version</name></name> <operator pos:start="75:24" pos:end="75:24">&lt;</operator> <literal type="number" pos:start="75:26" pos:end="75:26">2</literal> <operator pos:start="75:28" pos:end="75:29">||</operator> <name pos:start="75:31" pos:end="75:44"><name pos:start="75:31" pos:end="75:36">header</name><operator pos:start="75:37" pos:end="75:37">.</operator><name pos:start="75:38" pos:end="75:44">version</name></name> <operator pos:start="75:46" pos:end="75:46">&gt;</operator> <literal type="number" pos:start="75:48" pos:end="75:48">3</literal></expr>)</condition> <block pos:start="75:51" pos:end="83:5">{<block_content pos:start="77:9" pos:end="81:18">

        <expr_stmt pos:start="77:9" pos:end="77:72"><expr pos:start="77:9" pos:end="77:71"><call pos:start="77:9" pos:end="77:71"><name pos:start="77:9" pos:end="77:26">report_unsupported</name><argument_list pos:start="77:27" pos:end="77:71">(<argument pos:start="77:28" pos:end="77:29"><expr pos:start="77:28" pos:end="77:29"><name pos:start="77:28" pos:end="77:29">bs</name></expr></argument>, <argument pos:start="77:32" pos:end="77:35"><expr pos:start="77:32" pos:end="77:35"><name pos:start="77:32" pos:end="77:35">errp</name></expr></argument>, <argument pos:start="77:38" pos:end="77:54"><expr pos:start="77:38" pos:end="77:54"><literal type="string" pos:start="77:38" pos:end="77:54">"QCOW version %d"</literal></expr></argument>, <argument pos:start="77:57" pos:end="77:70"><expr pos:start="77:57" pos:end="77:70"><name pos:start="77:57" pos:end="77:70"><name pos:start="77:57" pos:end="77:62">header</name><operator pos:start="77:63" pos:end="77:63">.</operator><name pos:start="77:64" pos:end="77:70">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:23"><expr pos:start="79:9" pos:end="79:22"><name pos:start="79:9" pos:end="79:11">ret</name> <operator pos:start="79:13" pos:end="79:13">=</operator> <operator pos:start="79:15" pos:end="79:15">-</operator><name pos:start="79:16" pos:end="79:22">ENOTSUP</name></expr>;</expr_stmt>

        <goto pos:start="81:9" pos:end="81:18">goto <name pos:start="81:14" pos:end="81:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:37"><expr pos:start="87:5" pos:end="87:36"><name pos:start="87:5" pos:end="87:19"><name pos:start="87:5" pos:end="87:5">s</name><operator pos:start="87:6" pos:end="87:7">-&gt;</operator><name pos:start="87:8" pos:end="87:19">qcow_version</name></name> <operator pos:start="87:21" pos:end="87:21">=</operator> <name pos:start="87:23" pos:end="87:36"><name pos:start="87:23" pos:end="87:28">header</name><operator pos:start="87:29" pos:end="87:29">.</operator><name pos:start="87:30" pos:end="87:36">version</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="91:5" pos:end="91:44">/* Initialise version 3 header fields */</comment>

    <if_stmt pos:start="93:5" pos:end="117:5"><if pos:start="93:5" pos:end="105:5">if <condition pos:start="93:8" pos:end="93:28">(<expr pos:start="93:9" pos:end="93:27"><name pos:start="93:9" pos:end="93:22"><name pos:start="93:9" pos:end="93:14">header</name><operator pos:start="93:15" pos:end="93:15">.</operator><name pos:start="93:16" pos:end="93:22">version</name></name> <operator pos:start="93:24" pos:end="93:25">==</operator> <literal type="number" pos:start="93:27" pos:end="93:27">2</literal></expr>)</condition> <block pos:start="93:30" pos:end="105:5">{<block_content pos:start="95:9" pos:end="103:45">

        <expr_stmt pos:start="95:9" pos:end="95:44"><expr pos:start="95:9" pos:end="95:43"><name pos:start="95:9" pos:end="95:36"><name pos:start="95:9" pos:end="95:14">header</name><operator pos:start="95:15" pos:end="95:15">.</operator><name pos:start="95:16" pos:end="95:36">incompatible_features</name></name>    <operator pos:start="95:41" pos:end="95:41">=</operator> <literal type="number" pos:start="95:43" pos:end="95:43">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:44"><expr pos:start="97:9" pos:end="97:43"><name pos:start="97:9" pos:end="97:34"><name pos:start="97:9" pos:end="97:14">header</name><operator pos:start="97:15" pos:end="97:15">.</operator><name pos:start="97:16" pos:end="97:34">compatible_features</name></name>      <operator pos:start="97:41" pos:end="97:41">=</operator> <literal type="number" pos:start="97:43" pos:end="97:43">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:44"><expr pos:start="99:9" pos:end="99:43"><name pos:start="99:9" pos:end="99:33"><name pos:start="99:9" pos:end="99:14">header</name><operator pos:start="99:15" pos:end="99:15">.</operator><name pos:start="99:16" pos:end="99:33">autoclear_features</name></name>       <operator pos:start="99:41" pos:end="99:41">=</operator> <literal type="number" pos:start="99:43" pos:end="99:43">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:44"><expr pos:start="101:9" pos:end="101:43"><name pos:start="101:9" pos:end="101:29"><name pos:start="101:9" pos:end="101:14">header</name><operator pos:start="101:15" pos:end="101:15">.</operator><name pos:start="101:16" pos:end="101:29">refcount_order</name></name>           <operator pos:start="101:41" pos:end="101:41">=</operator> <literal type="number" pos:start="101:43" pos:end="101:43">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:45"><expr pos:start="103:9" pos:end="103:44"><name pos:start="103:9" pos:end="103:28"><name pos:start="103:9" pos:end="103:14">header</name><operator pos:start="103:15" pos:end="103:15">.</operator><name pos:start="103:16" pos:end="103:28">header_length</name></name>            <operator pos:start="103:41" pos:end="103:41">=</operator> <literal type="number" pos:start="103:43" pos:end="103:44">72</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="105:7" pos:end="117:5">else <block pos:start="105:12" pos:end="117:5">{<block_content pos:start="107:9" pos:end="115:44">

        <expr_stmt pos:start="107:9" pos:end="107:52"><expr pos:start="107:9" pos:end="107:51"><call pos:start="107:9" pos:end="107:51"><name pos:start="107:9" pos:end="107:20">be64_to_cpus</name><argument_list pos:start="107:21" pos:end="107:51">(<argument pos:start="107:22" pos:end="107:50"><expr pos:start="107:22" pos:end="107:50"><operator pos:start="107:22" pos:end="107:22">&amp;</operator><name pos:start="107:23" pos:end="107:50"><name pos:start="107:23" pos:end="107:28">header</name><operator pos:start="107:29" pos:end="107:29">.</operator><name pos:start="107:30" pos:end="107:50">incompatible_features</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:50"><expr pos:start="109:9" pos:end="109:49"><call pos:start="109:9" pos:end="109:49"><name pos:start="109:9" pos:end="109:20">be64_to_cpus</name><argument_list pos:start="109:21" pos:end="109:49">(<argument pos:start="109:22" pos:end="109:48"><expr pos:start="109:22" pos:end="109:48"><operator pos:start="109:22" pos:end="109:22">&amp;</operator><name pos:start="109:23" pos:end="109:48"><name pos:start="109:23" pos:end="109:28">header</name><operator pos:start="109:29" pos:end="109:29">.</operator><name pos:start="109:30" pos:end="109:48">compatible_features</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:49"><expr pos:start="111:9" pos:end="111:48"><call pos:start="111:9" pos:end="111:48"><name pos:start="111:9" pos:end="111:20">be64_to_cpus</name><argument_list pos:start="111:21" pos:end="111:48">(<argument pos:start="111:22" pos:end="111:47"><expr pos:start="111:22" pos:end="111:47"><operator pos:start="111:22" pos:end="111:22">&amp;</operator><name pos:start="111:23" pos:end="111:47"><name pos:start="111:23" pos:end="111:28">header</name><operator pos:start="111:29" pos:end="111:29">.</operator><name pos:start="111:30" pos:end="111:47">autoclear_features</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:45"><expr pos:start="113:9" pos:end="113:44"><call pos:start="113:9" pos:end="113:44"><name pos:start="113:9" pos:end="113:20">be32_to_cpus</name><argument_list pos:start="113:21" pos:end="113:44">(<argument pos:start="113:22" pos:end="113:43"><expr pos:start="113:22" pos:end="113:43"><operator pos:start="113:22" pos:end="113:22">&amp;</operator><name pos:start="113:23" pos:end="113:43"><name pos:start="113:23" pos:end="113:28">header</name><operator pos:start="113:29" pos:end="113:29">.</operator><name pos:start="113:30" pos:end="113:43">refcount_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:44"><expr pos:start="115:9" pos:end="115:43"><call pos:start="115:9" pos:end="115:43"><name pos:start="115:9" pos:end="115:20">be32_to_cpus</name><argument_list pos:start="115:21" pos:end="115:43">(<argument pos:start="115:22" pos:end="115:42"><expr pos:start="115:22" pos:end="115:42"><operator pos:start="115:22" pos:end="115:22">&amp;</operator><name pos:start="115:23" pos:end="115:42"><name pos:start="115:23" pos:end="115:28">header</name><operator pos:start="115:29" pos:end="115:29">.</operator><name pos:start="115:30" pos:end="115:42">header_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="121:5" pos:end="141:5"><if pos:start="121:5" pos:end="141:5">if <condition pos:start="121:8" pos:end="121:46">(<expr pos:start="121:9" pos:end="121:45"><name pos:start="121:9" pos:end="121:28"><name pos:start="121:9" pos:end="121:14">header</name><operator pos:start="121:15" pos:end="121:15">.</operator><name pos:start="121:16" pos:end="121:28">header_length</name></name> <operator pos:start="121:30" pos:end="121:30">&gt;</operator> <sizeof pos:start="121:32" pos:end="121:45">sizeof<argument_list pos:start="121:38" pos:end="121:45">(<argument pos:start="121:39" pos:end="121:44"><expr pos:start="121:39" pos:end="121:44"><name pos:start="121:39" pos:end="121:44">header</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="121:48" pos:end="141:5">{<block_content pos:start="123:9" pos:end="139:9">

        <expr_stmt pos:start="123:9" pos:end="123:78"><expr pos:start="123:9" pos:end="123:77"><name pos:start="123:9" pos:end="123:37"><name pos:start="123:9" pos:end="123:9">s</name><operator pos:start="123:10" pos:end="123:11">-&gt;</operator><name pos:start="123:12" pos:end="123:37">unknown_header_fields_size</name></name> <operator pos:start="123:39" pos:end="123:39">=</operator> <name pos:start="123:41" pos:end="123:60"><name pos:start="123:41" pos:end="123:46">header</name><operator pos:start="123:47" pos:end="123:47">.</operator><name pos:start="123:48" pos:end="123:60">header_length</name></name> <operator pos:start="123:62" pos:end="123:62">-</operator> <sizeof pos:start="123:64" pos:end="123:77">sizeof<argument_list pos:start="123:70" pos:end="123:77">(<argument pos:start="123:71" pos:end="123:76"><expr pos:start="123:71" pos:end="123:76"><name pos:start="123:71" pos:end="123:76">header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:75"><expr pos:start="125:9" pos:end="125:74"><name pos:start="125:9" pos:end="125:32"><name pos:start="125:9" pos:end="125:9">s</name><operator pos:start="125:10" pos:end="125:11">-&gt;</operator><name pos:start="125:12" pos:end="125:32">unknown_header_fields</name></name> <operator pos:start="125:34" pos:end="125:34">=</operator> <call pos:start="125:36" pos:end="125:74"><name pos:start="125:36" pos:end="125:43">g_malloc</name><argument_list pos:start="125:44" pos:end="125:74">(<argument pos:start="125:45" pos:end="125:73"><expr pos:start="125:45" pos:end="125:73"><name pos:start="125:45" pos:end="125:73"><name pos:start="125:45" pos:end="125:45">s</name><operator pos:start="125:46" pos:end="125:47">-&gt;</operator><name pos:start="125:48" pos:end="125:73">unknown_header_fields_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="129:56"><expr pos:start="127:9" pos:end="129:55"><name pos:start="127:9" pos:end="127:11">ret</name> <operator pos:start="127:13" pos:end="127:13">=</operator> <call pos:start="127:15" pos:end="129:55"><name pos:start="127:15" pos:end="127:24">bdrv_pread</name><argument_list pos:start="127:25" pos:end="129:55">(<argument pos:start="127:26" pos:end="127:33"><expr pos:start="127:26" pos:end="127:33"><name pos:start="127:26" pos:end="127:33"><name pos:start="127:26" pos:end="127:27">bs</name><operator pos:start="127:28" pos:end="127:29">-&gt;</operator><name pos:start="127:30" pos:end="127:33">file</name></name></expr></argument>, <argument pos:start="127:36" pos:end="127:49"><expr pos:start="127:36" pos:end="127:49"><sizeof pos:start="127:36" pos:end="127:49">sizeof<argument_list pos:start="127:42" pos:end="127:49">(<argument pos:start="127:43" pos:end="127:48"><expr pos:start="127:43" pos:end="127:48"><name pos:start="127:43" pos:end="127:48">header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="127:52" pos:end="127:75"><expr pos:start="127:52" pos:end="127:75"><name pos:start="127:52" pos:end="127:75"><name pos:start="127:52" pos:end="127:52">s</name><operator pos:start="127:53" pos:end="127:54">-&gt;</operator><name pos:start="127:55" pos:end="127:75">unknown_header_fields</name></name></expr></argument>,

                         <argument pos:start="129:26" pos:end="129:54"><expr pos:start="129:26" pos:end="129:54"><name pos:start="129:26" pos:end="129:54"><name pos:start="129:26" pos:end="129:26">s</name><operator pos:start="129:27" pos:end="129:28">-&gt;</operator><name pos:start="129:29" pos:end="129:54">unknown_header_fields_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="131:9" pos:end="139:9"><if pos:start="131:9" pos:end="139:9">if <condition pos:start="131:12" pos:end="131:20">(<expr pos:start="131:13" pos:end="131:19"><name pos:start="131:13" pos:end="131:15">ret</name> <operator pos:start="131:17" pos:end="131:17">&lt;</operator> <literal type="number" pos:start="131:19" pos:end="131:19">0</literal></expr>)</condition> <block pos:start="131:22" pos:end="139:9">{<block_content pos:start="133:13" pos:end="137:22">

            <expr_stmt pos:start="133:13" pos:end="135:39"><expr pos:start="133:13" pos:end="135:38"><call pos:start="133:13" pos:end="135:38"><name pos:start="133:13" pos:end="133:28">error_setg_errno</name><argument_list pos:start="133:29" pos:end="135:38">(<argument pos:start="133:30" pos:end="133:33"><expr pos:start="133:30" pos:end="133:33"><name pos:start="133:30" pos:end="133:33">errp</name></expr></argument>, <argument pos:start="133:36" pos:end="133:39"><expr pos:start="133:36" pos:end="133:39"><operator pos:start="133:36" pos:end="133:36">-</operator><name pos:start="133:37" pos:end="133:39">ret</name></expr></argument>, <argument pos:start="133:42" pos:end="135:37"><expr pos:start="133:42" pos:end="135:37"><literal type="string" pos:start="133:42" pos:end="133:79">"Could not read unknown qcow2 header "</literal>

                             <literal type="string" pos:start="135:30" pos:end="135:37">"fields"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="137:13" pos:end="137:22">goto <name pos:start="137:18" pos:end="137:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="145:5" pos:end="153:5"><if pos:start="145:5" pos:end="149:5">if <condition pos:start="145:8" pos:end="145:35">(<expr pos:start="145:9" pos:end="145:34"><name pos:start="145:9" pos:end="145:34"><name pos:start="145:9" pos:end="145:14">header</name><operator pos:start="145:15" pos:end="145:15">.</operator><name pos:start="145:16" pos:end="145:34">backing_file_offset</name></name></expr>)</condition> <block pos:start="145:37" pos:end="149:5">{<block_content pos:start="147:9" pos:end="147:45">

        <expr_stmt pos:start="147:9" pos:end="147:45"><expr pos:start="147:9" pos:end="147:44"><name pos:start="147:9" pos:end="147:15">ext_end</name> <operator pos:start="147:17" pos:end="147:17">=</operator> <name pos:start="147:19" pos:end="147:44"><name pos:start="147:19" pos:end="147:24">header</name><operator pos:start="147:25" pos:end="147:25">.</operator><name pos:start="147:26" pos:end="147:44">backing_file_offset</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="149:7" pos:end="153:5">else <block pos:start="149:12" pos:end="153:5">{<block_content pos:start="151:9" pos:end="151:43">

        <expr_stmt pos:start="151:9" pos:end="151:43"><expr pos:start="151:9" pos:end="151:42"><name pos:start="151:9" pos:end="151:15">ext_end</name> <operator pos:start="151:17" pos:end="151:17">=</operator> <literal type="number" pos:start="151:19" pos:end="151:19">1</literal> <operator pos:start="151:21" pos:end="151:22">&lt;&lt;</operator> <name pos:start="151:24" pos:end="151:42"><name pos:start="151:24" pos:end="151:29">header</name><operator pos:start="151:30" pos:end="151:30">.</operator><name pos:start="151:31" pos:end="151:42">cluster_bits</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="157:5" pos:end="157:29">/* Handle feature bits */</comment>

    <expr_stmt pos:start="159:5" pos:end="159:63"><expr pos:start="159:5" pos:end="159:62"><name pos:start="159:5" pos:end="159:28"><name pos:start="159:5" pos:end="159:5">s</name><operator pos:start="159:6" pos:end="159:7">-&gt;</operator><name pos:start="159:8" pos:end="159:28">incompatible_features</name></name>    <operator pos:start="159:33" pos:end="159:33">=</operator> <name pos:start="159:35" pos:end="159:62"><name pos:start="159:35" pos:end="159:40">header</name><operator pos:start="159:41" pos:end="159:41">.</operator><name pos:start="159:42" pos:end="159:62">incompatible_features</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="161:5" pos:end="161:61"><expr pos:start="161:5" pos:end="161:60"><name pos:start="161:5" pos:end="161:26"><name pos:start="161:5" pos:end="161:5">s</name><operator pos:start="161:6" pos:end="161:7">-&gt;</operator><name pos:start="161:8" pos:end="161:26">compatible_features</name></name>      <operator pos:start="161:33" pos:end="161:33">=</operator> <name pos:start="161:35" pos:end="161:60"><name pos:start="161:35" pos:end="161:40">header</name><operator pos:start="161:41" pos:end="161:41">.</operator><name pos:start="161:42" pos:end="161:60">compatible_features</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:60"><expr pos:start="163:5" pos:end="163:59"><name pos:start="163:5" pos:end="163:25"><name pos:start="163:5" pos:end="163:5">s</name><operator pos:start="163:6" pos:end="163:7">-&gt;</operator><name pos:start="163:8" pos:end="163:25">autoclear_features</name></name>       <operator pos:start="163:33" pos:end="163:33">=</operator> <name pos:start="163:35" pos:end="163:59"><name pos:start="163:35" pos:end="163:40">header</name><operator pos:start="163:41" pos:end="163:41">.</operator><name pos:start="163:42" pos:end="163:59">autoclear_features</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="167:5" pos:end="187:5"><if pos:start="167:5" pos:end="187:5">if <condition pos:start="167:8" pos:end="167:56">(<expr pos:start="167:9" pos:end="167:55"><name pos:start="167:9" pos:end="167:32"><name pos:start="167:9" pos:end="167:9">s</name><operator pos:start="167:10" pos:end="167:11">-&gt;</operator><name pos:start="167:12" pos:end="167:32">incompatible_features</name></name> <operator pos:start="167:34" pos:end="167:34">&amp;</operator> <operator pos:start="167:36" pos:end="167:36">~</operator><name pos:start="167:37" pos:end="167:55">QCOW2_INCOMPAT_MASK</name></expr>)</condition> <block pos:start="167:58" pos:end="187:5">{<block_content pos:start="169:9" pos:end="185:18">

        <decl_stmt pos:start="169:9" pos:end="169:35"><decl pos:start="169:9" pos:end="169:34"><type pos:start="169:9" pos:end="169:14"><name pos:start="169:9" pos:end="169:12">void</name> <modifier pos:start="169:14" pos:end="169:14">*</modifier></type><name pos:start="169:15" pos:end="169:27">feature_table</name> <init pos:start="169:29" pos:end="169:34">= <expr pos:start="169:31" pos:end="169:34"><name pos:start="169:31" pos:end="169:34">NULL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="171:9" pos:end="173:52"><expr pos:start="171:9" pos:end="173:51"><call pos:start="171:9" pos:end="173:51"><name pos:start="171:9" pos:end="171:29">qcow2_read_extensions</name><argument_list pos:start="171:30" pos:end="173:51">(<argument pos:start="171:31" pos:end="171:32"><expr pos:start="171:31" pos:end="171:32"><name pos:start="171:31" pos:end="171:32">bs</name></expr></argument>, <argument pos:start="171:35" pos:end="171:54"><expr pos:start="171:35" pos:end="171:54"><name pos:start="171:35" pos:end="171:54"><name pos:start="171:35" pos:end="171:40">header</name><operator pos:start="171:41" pos:end="171:41">.</operator><name pos:start="171:42" pos:end="171:54">header_length</name></name></expr></argument>, <argument pos:start="171:57" pos:end="171:63"><expr pos:start="171:57" pos:end="171:63"><name pos:start="171:57" pos:end="171:63">ext_end</name></expr></argument>,

                              <argument pos:start="173:31" pos:end="173:44"><expr pos:start="173:31" pos:end="173:44"><operator pos:start="173:31" pos:end="173:31">&amp;</operator><name pos:start="173:32" pos:end="173:44">feature_table</name></expr></argument>, <argument pos:start="173:47" pos:end="173:50"><expr pos:start="173:47" pos:end="173:50"><name pos:start="173:47" pos:end="173:50">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="179:57"><expr pos:start="175:9" pos:end="179:56"><call pos:start="175:9" pos:end="179:56"><name pos:start="175:9" pos:end="175:34">report_unsupported_feature</name><argument_list pos:start="175:35" pos:end="179:56">(<argument pos:start="175:36" pos:end="175:37"><expr pos:start="175:36" pos:end="175:37"><name pos:start="175:36" pos:end="175:37">bs</name></expr></argument>, <argument pos:start="175:40" pos:end="175:43"><expr pos:start="175:40" pos:end="175:43"><name pos:start="175:40" pos:end="175:43">errp</name></expr></argument>, <argument pos:start="175:46" pos:end="175:58"><expr pos:start="175:46" pos:end="175:58"><name pos:start="175:46" pos:end="175:58">feature_table</name></expr></argument>,

                                   <argument pos:start="177:36" pos:end="179:55"><expr pos:start="177:36" pos:end="179:55"><name pos:start="177:36" pos:end="177:59"><name pos:start="177:36" pos:end="177:36">s</name><operator pos:start="177:37" pos:end="177:38">-&gt;</operator><name pos:start="177:39" pos:end="177:59">incompatible_features</name></name> <operator pos:start="177:61" pos:end="177:61">&amp;</operator>

                                   <operator pos:start="179:36" pos:end="179:36">~</operator><name pos:start="179:37" pos:end="179:55">QCOW2_INCOMPAT_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="181:9" pos:end="181:23"><expr pos:start="181:9" pos:end="181:22"><name pos:start="181:9" pos:end="181:11">ret</name> <operator pos:start="181:13" pos:end="181:13">=</operator> <operator pos:start="181:15" pos:end="181:15">-</operator><name pos:start="181:16" pos:end="181:22">ENOTSUP</name></expr>;</expr_stmt>

        <expr_stmt pos:start="183:9" pos:end="183:30"><expr pos:start="183:9" pos:end="183:29"><call pos:start="183:9" pos:end="183:29"><name pos:start="183:9" pos:end="183:14">g_free</name><argument_list pos:start="183:15" pos:end="183:29">(<argument pos:start="183:16" pos:end="183:28"><expr pos:start="183:16" pos:end="183:28"><name pos:start="183:16" pos:end="183:28">feature_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="185:9" pos:end="185:18">goto <name pos:start="185:14" pos:end="185:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="191:5" pos:end="209:5"><if pos:start="191:5" pos:end="209:5">if <condition pos:start="191:8" pos:end="191:58">(<expr pos:start="191:9" pos:end="191:57"><name pos:start="191:9" pos:end="191:32"><name pos:start="191:9" pos:end="191:9">s</name><operator pos:start="191:10" pos:end="191:11">-&gt;</operator><name pos:start="191:12" pos:end="191:32">incompatible_features</name></name> <operator pos:start="191:34" pos:end="191:34">&amp;</operator> <name pos:start="191:36" pos:end="191:57">QCOW2_INCOMPAT_CORRUPT</name></expr>)</condition> <block pos:start="191:60" pos:end="209:5">{<block_content pos:start="197:9" pos:end="207:9">

        <comment type="block" pos:start="193:9" pos:end="195:11">/* Corrupt images may not be written to unless they are being repaired

         */</comment>

        <if_stmt pos:start="197:9" pos:end="207:9"><if pos:start="197:9" pos:end="207:9">if <condition pos:start="197:12" pos:end="197:61">(<expr pos:start="197:13" pos:end="197:60"><operator pos:start="197:13" pos:end="197:13">(</operator><name pos:start="197:14" pos:end="197:18">flags</name> <operator pos:start="197:20" pos:end="197:20">&amp;</operator> <name pos:start="197:22" pos:end="197:32">BDRV_O_RDWR</name><operator pos:start="197:33" pos:end="197:33">)</operator> <operator pos:start="197:35" pos:end="197:36">&amp;&amp;</operator> <operator pos:start="197:38" pos:end="197:38">!</operator><operator pos:start="197:39" pos:end="197:39">(</operator><name pos:start="197:40" pos:end="197:44">flags</name> <operator pos:start="197:46" pos:end="197:46">&amp;</operator> <name pos:start="197:48" pos:end="197:59">BDRV_O_CHECK</name><operator pos:start="197:60" pos:end="197:60">)</operator></expr>)</condition> <block pos:start="197:63" pos:end="207:9">{<block_content pos:start="199:13" pos:end="205:22">

            <expr_stmt pos:start="199:13" pos:end="201:37"><expr pos:start="199:13" pos:end="201:36"><call pos:start="199:13" pos:end="201:36"><name pos:start="199:13" pos:end="199:22">error_setg</name><argument_list pos:start="199:23" pos:end="201:36">(<argument pos:start="199:24" pos:end="199:27"><expr pos:start="199:24" pos:end="199:27"><name pos:start="199:24" pos:end="199:27">errp</name></expr></argument>, <argument pos:start="199:30" pos:end="201:35"><expr pos:start="199:30" pos:end="201:35"><literal type="string" pos:start="199:30" pos:end="199:73">"qcow2: Image is corrupt; cannot be opened "</literal>

                       <literal type="string" pos:start="201:24" pos:end="201:35">"read/write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="203:13" pos:end="203:26"><expr pos:start="203:13" pos:end="203:25"><name pos:start="203:13" pos:end="203:15">ret</name> <operator pos:start="203:17" pos:end="203:17">=</operator> <operator pos:start="203:19" pos:end="203:19">-</operator><name pos:start="203:20" pos:end="203:25">EACCES</name></expr>;</expr_stmt>

            <goto pos:start="205:13" pos:end="205:22">goto <name pos:start="205:18" pos:end="205:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="213:5" pos:end="213:49">/* Check support for various header values */</comment>

    <if_stmt pos:start="215:5" pos:end="225:5"><if pos:start="215:5" pos:end="225:5">if <condition pos:start="215:8" pos:end="215:35">(<expr pos:start="215:9" pos:end="215:34"><name pos:start="215:9" pos:end="215:29"><name pos:start="215:9" pos:end="215:14">header</name><operator pos:start="215:15" pos:end="215:15">.</operator><name pos:start="215:16" pos:end="215:29">refcount_order</name></name> <operator pos:start="215:31" pos:end="215:32">!=</operator> <literal type="number" pos:start="215:34" pos:end="215:34">4</literal></expr>)</condition> <block pos:start="215:37" pos:end="225:5">{<block_content pos:start="217:9" pos:end="223:18">

        <expr_stmt pos:start="217:9" pos:end="219:55"><expr pos:start="217:9" pos:end="219:54"><call pos:start="217:9" pos:end="219:54"><name pos:start="217:9" pos:end="217:26">report_unsupported</name><argument_list pos:start="217:27" pos:end="219:54">(<argument pos:start="217:28" pos:end="217:29"><expr pos:start="217:28" pos:end="217:29"><name pos:start="217:28" pos:end="217:29">bs</name></expr></argument>, <argument pos:start="217:32" pos:end="217:35"><expr pos:start="217:32" pos:end="217:35"><name pos:start="217:32" pos:end="217:35">errp</name></expr></argument>, <argument pos:start="217:38" pos:end="217:62"><expr pos:start="217:38" pos:end="217:62"><literal type="string" pos:start="217:38" pos:end="217:62">"%d bit reference counts"</literal></expr></argument>,

                           <argument pos:start="219:28" pos:end="219:53"><expr pos:start="219:28" pos:end="219:53"><literal type="number" pos:start="219:28" pos:end="219:28">1</literal> <operator pos:start="219:30" pos:end="219:31">&lt;&lt;</operator> <name pos:start="219:33" pos:end="219:53"><name pos:start="219:33" pos:end="219:38">header</name><operator pos:start="219:39" pos:end="219:39">.</operator><name pos:start="219:40" pos:end="219:53">refcount_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="221:9" pos:end="221:23"><expr pos:start="221:9" pos:end="221:22"><name pos:start="221:9" pos:end="221:11">ret</name> <operator pos:start="221:13" pos:end="221:13">=</operator> <operator pos:start="221:15" pos:end="221:15">-</operator><name pos:start="221:16" pos:end="221:22">ENOTSUP</name></expr>;</expr_stmt>

        <goto pos:start="223:9" pos:end="223:18">goto <name pos:start="223:14" pos:end="223:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="227:5" pos:end="227:46"><expr pos:start="227:5" pos:end="227:45"><name pos:start="227:5" pos:end="227:21"><name pos:start="227:5" pos:end="227:5">s</name><operator pos:start="227:6" pos:end="227:7">-&gt;</operator><name pos:start="227:8" pos:end="227:21">refcount_order</name></name> <operator pos:start="227:23" pos:end="227:23">=</operator> <name pos:start="227:25" pos:end="227:45"><name pos:start="227:25" pos:end="227:30">header</name><operator pos:start="227:31" pos:end="227:31">.</operator><name pos:start="227:32" pos:end="227:45">refcount_order</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="231:5" pos:end="241:5"><if pos:start="231:5" pos:end="241:5">if <condition pos:start="231:8" pos:end="233:47">(<expr pos:start="231:9" pos:end="233:46"><name pos:start="231:9" pos:end="231:27"><name pos:start="231:9" pos:end="231:14">header</name><operator pos:start="231:15" pos:end="231:15">.</operator><name pos:start="231:16" pos:end="231:27">cluster_bits</name></name> <operator pos:start="231:29" pos:end="231:29">&lt;</operator> <name pos:start="231:31" pos:end="231:46">MIN_CLUSTER_BITS</name> <operator pos:start="231:48" pos:end="231:49">||</operator>

        <name pos:start="233:9" pos:end="233:27"><name pos:start="233:9" pos:end="233:14">header</name><operator pos:start="233:15" pos:end="233:15">.</operator><name pos:start="233:16" pos:end="233:27">cluster_bits</name></name> <operator pos:start="233:29" pos:end="233:29">&gt;</operator> <name pos:start="233:31" pos:end="233:46">MAX_CLUSTER_BITS</name></expr>)</condition> <block pos:start="233:49" pos:end="241:5">{<block_content pos:start="235:9" pos:end="239:18">

        <expr_stmt pos:start="235:9" pos:end="235:80"><expr pos:start="235:9" pos:end="235:79"><call pos:start="235:9" pos:end="235:79"><name pos:start="235:9" pos:end="235:18">error_setg</name><argument_list pos:start="235:19" pos:end="235:79">(<argument pos:start="235:20" pos:end="235:23"><expr pos:start="235:20" pos:end="235:23"><name pos:start="235:20" pos:end="235:23">errp</name></expr></argument>, <argument pos:start="235:26" pos:end="235:57"><expr pos:start="235:26" pos:end="235:57"><literal type="string" pos:start="235:26" pos:end="235:57">"Unsupported cluster size: 2^%i"</literal></expr></argument>, <argument pos:start="235:60" pos:end="235:78"><expr pos:start="235:60" pos:end="235:78"><name pos:start="235:60" pos:end="235:78"><name pos:start="235:60" pos:end="235:65">header</name><operator pos:start="235:66" pos:end="235:66">.</operator><name pos:start="235:67" pos:end="235:78">cluster_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="237:9" pos:end="237:22"><expr pos:start="237:9" pos:end="237:21"><name pos:start="237:9" pos:end="237:11">ret</name> <operator pos:start="237:13" pos:end="237:13">=</operator> <operator pos:start="237:15" pos:end="237:15">-</operator><name pos:start="237:16" pos:end="237:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="239:9" pos:end="239:18">goto <name pos:start="239:14" pos:end="239:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="243:5" pos:end="253:5"><if pos:start="243:5" pos:end="253:5">if <condition pos:start="243:8" pos:end="243:45">(<expr pos:start="243:9" pos:end="243:44"><name pos:start="243:9" pos:end="243:27"><name pos:start="243:9" pos:end="243:14">header</name><operator pos:start="243:15" pos:end="243:15">.</operator><name pos:start="243:16" pos:end="243:27">crypt_method</name></name> <operator pos:start="243:29" pos:end="243:29">&gt;</operator> <name pos:start="243:31" pos:end="243:44">QCOW_CRYPT_AES</name></expr>)</condition> <block pos:start="243:47" pos:end="253:5">{<block_content pos:start="245:9" pos:end="251:18">

        <expr_stmt pos:start="245:9" pos:end="247:40"><expr pos:start="245:9" pos:end="247:39"><call pos:start="245:9" pos:end="247:39"><name pos:start="245:9" pos:end="245:18">error_setg</name><argument_list pos:start="245:19" pos:end="247:39">(<argument pos:start="245:20" pos:end="245:23"><expr pos:start="245:20" pos:end="245:23"><name pos:start="245:20" pos:end="245:23">errp</name></expr></argument>, <argument pos:start="245:26" pos:end="245:60"><expr pos:start="245:26" pos:end="245:60"><literal type="string" pos:start="245:26" pos:end="245:60">"Unsupported encryption method: %i"</literal></expr></argument>,

                   <argument pos:start="247:20" pos:end="247:38"><expr pos:start="247:20" pos:end="247:38"><name pos:start="247:20" pos:end="247:38"><name pos:start="247:20" pos:end="247:25">header</name><operator pos:start="247:26" pos:end="247:26">.</operator><name pos:start="247:27" pos:end="247:38">crypt_method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="249:9" pos:end="249:22"><expr pos:start="249:9" pos:end="249:21"><name pos:start="249:9" pos:end="249:11">ret</name> <operator pos:start="249:13" pos:end="249:13">=</operator> <operator pos:start="249:15" pos:end="249:15">-</operator><name pos:start="249:16" pos:end="249:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="251:9" pos:end="251:18">goto <name pos:start="251:14" pos:end="251:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="255:5" pos:end="255:49"><expr pos:start="255:5" pos:end="255:48"><name pos:start="255:5" pos:end="255:26"><name pos:start="255:5" pos:end="255:5">s</name><operator pos:start="255:6" pos:end="255:7">-&gt;</operator><name pos:start="255:8" pos:end="255:26">crypt_method_header</name></name> <operator pos:start="255:28" pos:end="255:28">=</operator> <name pos:start="255:30" pos:end="255:48"><name pos:start="255:30" pos:end="255:35">header</name><operator pos:start="255:36" pos:end="255:36">.</operator><name pos:start="255:37" pos:end="255:48">crypt_method</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="257:5" pos:end="261:5"><if pos:start="257:5" pos:end="261:5">if <condition pos:start="257:8" pos:end="257:31">(<expr pos:start="257:9" pos:end="257:30"><name pos:start="257:9" pos:end="257:30"><name pos:start="257:9" pos:end="257:9">s</name><operator pos:start="257:10" pos:end="257:11">-&gt;</operator><name pos:start="257:12" pos:end="257:30">crypt_method_header</name></name></expr>)</condition> <block pos:start="257:33" pos:end="261:5">{<block_content pos:start="259:9" pos:end="259:26">

        <expr_stmt pos:start="259:9" pos:end="259:26"><expr pos:start="259:9" pos:end="259:25"><name pos:start="259:9" pos:end="259:21"><name pos:start="259:9" pos:end="259:10">bs</name><operator pos:start="259:11" pos:end="259:12">-&gt;</operator><name pos:start="259:13" pos:end="259:21">encrypted</name></name> <operator pos:start="259:23" pos:end="259:23">=</operator> <literal type="number" pos:start="259:25" pos:end="259:25">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="263:5" pos:end="263:42"><expr pos:start="263:5" pos:end="263:41"><name pos:start="263:5" pos:end="263:19"><name pos:start="263:5" pos:end="263:5">s</name><operator pos:start="263:6" pos:end="263:7">-&gt;</operator><name pos:start="263:8" pos:end="263:19">cluster_bits</name></name> <operator pos:start="263:21" pos:end="263:21">=</operator> <name pos:start="263:23" pos:end="263:41"><name pos:start="263:23" pos:end="263:28">header</name><operator pos:start="263:29" pos:end="263:29">.</operator><name pos:start="263:30" pos:end="263:41">cluster_bits</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="265:5" pos:end="265:43"><expr pos:start="265:5" pos:end="265:42"><name pos:start="265:5" pos:end="265:19"><name pos:start="265:5" pos:end="265:5">s</name><operator pos:start="265:6" pos:end="265:7">-&gt;</operator><name pos:start="265:8" pos:end="265:19">cluster_size</name></name> <operator pos:start="265:21" pos:end="265:21">=</operator> <literal type="number" pos:start="265:23" pos:end="265:23">1</literal> <operator pos:start="265:25" pos:end="265:26">&lt;&lt;</operator> <name pos:start="265:28" pos:end="265:42"><name pos:start="265:28" pos:end="265:28">s</name><operator pos:start="265:29" pos:end="265:30">-&gt;</operator><name pos:start="265:31" pos:end="265:42">cluster_bits</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="267:5" pos:end="267:52"><expr pos:start="267:5" pos:end="267:51"><name pos:start="267:5" pos:end="267:22"><name pos:start="267:5" pos:end="267:5">s</name><operator pos:start="267:6" pos:end="267:7">-&gt;</operator><name pos:start="267:8" pos:end="267:22">cluster_sectors</name></name> <operator pos:start="267:24" pos:end="267:24">=</operator> <literal type="number" pos:start="267:26" pos:end="267:26">1</literal> <operator pos:start="267:28" pos:end="267:29">&lt;&lt;</operator> <operator pos:start="267:31" pos:end="267:31">(</operator><name pos:start="267:32" pos:end="267:46"><name pos:start="267:32" pos:end="267:32">s</name><operator pos:start="267:33" pos:end="267:34">-&gt;</operator><name pos:start="267:35" pos:end="267:46">cluster_bits</name></name> <operator pos:start="267:48" pos:end="267:48">-</operator> <literal type="number" pos:start="267:50" pos:end="267:50">9</literal><operator pos:start="267:51" pos:end="267:51">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="269:5" pos:end="269:37"><expr pos:start="269:5" pos:end="269:36"><name pos:start="269:5" pos:end="269:14"><name pos:start="269:5" pos:end="269:5">s</name><operator pos:start="269:6" pos:end="269:7">-&gt;</operator><name pos:start="269:8" pos:end="269:14">l2_bits</name></name> <operator pos:start="269:16" pos:end="269:16">=</operator> <name pos:start="269:18" pos:end="269:32"><name pos:start="269:18" pos:end="269:18">s</name><operator pos:start="269:19" pos:end="269:20">-&gt;</operator><name pos:start="269:21" pos:end="269:32">cluster_bits</name></name> <operator pos:start="269:34" pos:end="269:34">-</operator> <literal type="number" pos:start="269:36" pos:end="269:36">3</literal></expr>;</expr_stmt> <comment type="block" pos:start="269:39" pos:end="269:68">/* L2 is always one cluster */</comment>

    <expr_stmt pos:start="271:5" pos:end="271:33"><expr pos:start="271:5" pos:end="271:32"><name pos:start="271:5" pos:end="271:14"><name pos:start="271:5" pos:end="271:5">s</name><operator pos:start="271:6" pos:end="271:7">-&gt;</operator><name pos:start="271:8" pos:end="271:14">l2_size</name></name> <operator pos:start="271:16" pos:end="271:16">=</operator> <literal type="number" pos:start="271:18" pos:end="271:18">1</literal> <operator pos:start="271:20" pos:end="271:21">&lt;&lt;</operator> <name pos:start="271:23" pos:end="271:32"><name pos:start="271:23" pos:end="271:23">s</name><operator pos:start="271:24" pos:end="271:25">-&gt;</operator><name pos:start="271:26" pos:end="271:32">l2_bits</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="273:5" pos:end="273:42"><expr pos:start="273:5" pos:end="273:41"><name pos:start="273:5" pos:end="273:21"><name pos:start="273:5" pos:end="273:6">bs</name><operator pos:start="273:7" pos:end="273:8">-&gt;</operator><name pos:start="273:9" pos:end="273:21">total_sectors</name></name> <operator pos:start="273:23" pos:end="273:23">=</operator> <name pos:start="273:25" pos:end="273:35"><name pos:start="273:25" pos:end="273:30">header</name><operator pos:start="273:31" pos:end="273:31">.</operator><name pos:start="273:32" pos:end="273:35">size</name></name> <operator pos:start="273:37" pos:end="273:37">/</operator> <literal type="number" pos:start="273:39" pos:end="273:41">512</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="275:5" pos:end="275:50"><expr pos:start="275:5" pos:end="275:49"><name pos:start="275:5" pos:end="275:18"><name pos:start="275:5" pos:end="275:5">s</name><operator pos:start="275:6" pos:end="275:7">-&gt;</operator><name pos:start="275:8" pos:end="275:18">csize_shift</name></name> <operator pos:start="275:20" pos:end="275:20">=</operator> <operator pos:start="275:22" pos:end="275:22">(</operator><literal type="number" pos:start="275:23" pos:end="275:26">62</literal> <operator pos:start="275:26" pos:end="275:26">-</operator> <operator pos:start="275:28" pos:end="275:28">(</operator><name pos:start="275:29" pos:end="275:43"><name pos:start="275:29" pos:end="275:29">s</name><operator pos:start="275:30" pos:end="275:31">-&gt;</operator><name pos:start="275:32" pos:end="275:43">cluster_bits</name></name> <operator pos:start="275:45" pos:end="275:45">-</operator> <literal type="number" pos:start="275:47" pos:end="275:47">8</literal><operator pos:start="275:48" pos:end="275:48">)</operator><operator pos:start="275:49" pos:end="275:49">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="277:5" pos:end="277:53"><expr pos:start="277:5" pos:end="277:52"><name pos:start="277:5" pos:end="277:17"><name pos:start="277:5" pos:end="277:5">s</name><operator pos:start="277:6" pos:end="277:7">-&gt;</operator><name pos:start="277:8" pos:end="277:17">csize_mask</name></name> <operator pos:start="277:19" pos:end="277:19">=</operator> <operator pos:start="277:21" pos:end="277:21">(</operator><literal type="number" pos:start="277:22" pos:end="277:22">1</literal> <operator pos:start="277:24" pos:end="277:25">&lt;&lt;</operator> <operator pos:start="277:27" pos:end="277:27">(</operator><name pos:start="277:28" pos:end="277:42"><name pos:start="277:28" pos:end="277:28">s</name><operator pos:start="277:29" pos:end="277:30">-&gt;</operator><name pos:start="277:31" pos:end="277:42">cluster_bits</name></name> <operator pos:start="277:44" pos:end="277:44">-</operator> <literal type="number" pos:start="277:46" pos:end="277:46">8</literal><operator pos:start="277:47" pos:end="277:47">)</operator><operator pos:start="277:48" pos:end="277:48">)</operator> <operator pos:start="277:50" pos:end="277:50">-</operator> <literal type="number" pos:start="277:52" pos:end="277:52">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="279:5" pos:end="279:57"><expr pos:start="279:5" pos:end="279:56"><name pos:start="279:5" pos:end="279:26"><name pos:start="279:5" pos:end="279:5">s</name><operator pos:start="279:6" pos:end="279:7">-&gt;</operator><name pos:start="279:8" pos:end="279:26">cluster_offset_mask</name></name> <operator pos:start="279:28" pos:end="279:28">=</operator> <operator pos:start="279:30" pos:end="279:30">(</operator><literal type="number" pos:start="279:31" pos:end="279:33">1LL</literal> <operator pos:start="279:35" pos:end="279:36">&lt;&lt;</operator> <name pos:start="279:38" pos:end="279:51"><name pos:start="279:38" pos:end="279:38">s</name><operator pos:start="279:39" pos:end="279:40">-&gt;</operator><name pos:start="279:41" pos:end="279:51">csize_shift</name></name><operator pos:start="279:52" pos:end="279:52">)</operator> <operator pos:start="279:54" pos:end="279:54">-</operator> <literal type="number" pos:start="279:56" pos:end="279:56">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="281:5" pos:end="281:60"><expr pos:start="281:5" pos:end="281:59"><name pos:start="281:5" pos:end="281:28"><name pos:start="281:5" pos:end="281:5">s</name><operator pos:start="281:6" pos:end="281:7">-&gt;</operator><name pos:start="281:8" pos:end="281:28">refcount_table_offset</name></name> <operator pos:start="281:30" pos:end="281:30">=</operator> <name pos:start="281:32" pos:end="281:59"><name pos:start="281:32" pos:end="281:37">header</name><operator pos:start="281:38" pos:end="281:38">.</operator><name pos:start="281:39" pos:end="281:59">refcount_table_offset</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="283:5" pos:end="285:64"><expr pos:start="283:5" pos:end="285:63"><name pos:start="283:5" pos:end="283:26"><name pos:start="283:5" pos:end="283:5">s</name><operator pos:start="283:6" pos:end="283:7">-&gt;</operator><name pos:start="283:8" pos:end="283:26">refcount_table_size</name></name> <operator pos:start="283:28" pos:end="283:28">=</operator>

        <name pos:start="285:9" pos:end="285:38"><name pos:start="285:9" pos:end="285:14">header</name><operator pos:start="285:15" pos:end="285:15">.</operator><name pos:start="285:16" pos:end="285:38">refcount_table_clusters</name></name> <operator pos:start="285:40" pos:end="285:41">&lt;&lt;</operator> <operator pos:start="285:43" pos:end="285:43">(</operator><name pos:start="285:44" pos:end="285:58"><name pos:start="285:44" pos:end="285:44">s</name><operator pos:start="285:45" pos:end="285:46">-&gt;</operator><name pos:start="285:47" pos:end="285:58">cluster_bits</name></name> <operator pos:start="285:60" pos:end="285:60">-</operator> <literal type="number" pos:start="285:62" pos:end="285:62">3</literal><operator pos:start="285:63" pos:end="285:63">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="289:5" pos:end="289:50"><expr pos:start="289:5" pos:end="289:49"><name pos:start="289:5" pos:end="289:23"><name pos:start="289:5" pos:end="289:5">s</name><operator pos:start="289:6" pos:end="289:7">-&gt;</operator><name pos:start="289:8" pos:end="289:23">snapshots_offset</name></name> <operator pos:start="289:25" pos:end="289:25">=</operator> <name pos:start="289:27" pos:end="289:49"><name pos:start="289:27" pos:end="289:32">header</name><operator pos:start="289:33" pos:end="289:33">.</operator><name pos:start="289:34" pos:end="289:49">snapshots_offset</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="291:5" pos:end="291:42"><expr pos:start="291:5" pos:end="291:41"><name pos:start="291:5" pos:end="291:19"><name pos:start="291:5" pos:end="291:5">s</name><operator pos:start="291:6" pos:end="291:7">-&gt;</operator><name pos:start="291:8" pos:end="291:19">nb_snapshots</name></name> <operator pos:start="291:21" pos:end="291:21">=</operator> <name pos:start="291:23" pos:end="291:41"><name pos:start="291:23" pos:end="291:28">header</name><operator pos:start="291:29" pos:end="291:29">.</operator><name pos:start="291:30" pos:end="291:41">nb_snapshots</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="295:5" pos:end="295:32">/* read the level 1 table */</comment>

    <expr_stmt pos:start="297:5" pos:end="297:32"><expr pos:start="297:5" pos:end="297:31"><name pos:start="297:5" pos:end="297:14"><name pos:start="297:5" pos:end="297:5">s</name><operator pos:start="297:6" pos:end="297:7">-&gt;</operator><name pos:start="297:8" pos:end="297:14">l1_size</name></name> <operator pos:start="297:16" pos:end="297:16">=</operator> <name pos:start="297:18" pos:end="297:31"><name pos:start="297:18" pos:end="297:23">header</name><operator pos:start="297:24" pos:end="297:24">.</operator><name pos:start="297:25" pos:end="297:31">l1_size</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="301:5" pos:end="301:51"><expr pos:start="301:5" pos:end="301:50"><name pos:start="301:5" pos:end="301:21">l1_vm_state_index</name> <operator pos:start="301:23" pos:end="301:23">=</operator> <call pos:start="301:25" pos:end="301:50"><name pos:start="301:25" pos:end="301:34">size_to_l1</name><argument_list pos:start="301:35" pos:end="301:50">(<argument pos:start="301:36" pos:end="301:36"><expr pos:start="301:36" pos:end="301:36"><name pos:start="301:36" pos:end="301:36">s</name></expr></argument>, <argument pos:start="301:39" pos:end="301:49"><expr pos:start="301:39" pos:end="301:49"><name pos:start="301:39" pos:end="301:49"><name pos:start="301:39" pos:end="301:44">header</name><operator pos:start="301:45" pos:end="301:45">.</operator><name pos:start="301:46" pos:end="301:49">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="303:5" pos:end="311:5"><if pos:start="303:5" pos:end="311:5">if <condition pos:start="303:8" pos:end="303:36">(<expr pos:start="303:9" pos:end="303:35"><name pos:start="303:9" pos:end="303:25">l1_vm_state_index</name> <operator pos:start="303:27" pos:end="303:27">&gt;</operator> <name pos:start="303:29" pos:end="303:35">INT_MAX</name></expr>)</condition> <block pos:start="303:38" pos:end="311:5">{<block_content pos:start="305:9" pos:end="309:18">

        <expr_stmt pos:start="305:9" pos:end="305:45"><expr pos:start="305:9" pos:end="305:44"><call pos:start="305:9" pos:end="305:44"><name pos:start="305:9" pos:end="305:18">error_setg</name><argument_list pos:start="305:19" pos:end="305:44">(<argument pos:start="305:20" pos:end="305:23"><expr pos:start="305:20" pos:end="305:23"><name pos:start="305:20" pos:end="305:23">errp</name></expr></argument>, <argument pos:start="305:26" pos:end="305:43"><expr pos:start="305:26" pos:end="305:43"><literal type="string" pos:start="305:26" pos:end="305:43">"Image is too big"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="307:9" pos:end="307:21"><expr pos:start="307:9" pos:end="307:20"><name pos:start="307:9" pos:end="307:11">ret</name> <operator pos:start="307:13" pos:end="307:13">=</operator> <operator pos:start="307:15" pos:end="307:15">-</operator><name pos:start="307:16" pos:end="307:20">EFBIG</name></expr>;</expr_stmt>

        <goto pos:start="309:9" pos:end="309:18">goto <name pos:start="309:14" pos:end="309:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="313:5" pos:end="313:45"><expr pos:start="313:5" pos:end="313:44"><name pos:start="313:5" pos:end="313:24"><name pos:start="313:5" pos:end="313:5">s</name><operator pos:start="313:6" pos:end="313:7">-&gt;</operator><name pos:start="313:8" pos:end="313:24">l1_vm_state_index</name></name> <operator pos:start="313:26" pos:end="313:26">=</operator> <name pos:start="313:28" pos:end="313:44">l1_vm_state_index</name></expr>;</expr_stmt>



    <comment type="block" pos:start="317:5" pos:end="319:27">/* the L1 table must contain at least enough entries to put

       header.size bytes */</comment>

    <if_stmt pos:start="321:5" pos:end="329:5"><if pos:start="321:5" pos:end="329:5">if <condition pos:start="321:8" pos:end="321:42">(<expr pos:start="321:9" pos:end="321:41"><name pos:start="321:9" pos:end="321:18"><name pos:start="321:9" pos:end="321:9">s</name><operator pos:start="321:10" pos:end="321:11">-&gt;</operator><name pos:start="321:12" pos:end="321:18">l1_size</name></name> <operator pos:start="321:20" pos:end="321:20">&lt;</operator> <name pos:start="321:22" pos:end="321:41"><name pos:start="321:22" pos:end="321:22">s</name><operator pos:start="321:23" pos:end="321:24">-&gt;</operator><name pos:start="321:25" pos:end="321:41">l1_vm_state_index</name></name></expr>)</condition> <block pos:start="321:44" pos:end="329:5">{<block_content pos:start="323:9" pos:end="327:18">

        <expr_stmt pos:start="323:9" pos:end="323:50"><expr pos:start="323:9" pos:end="323:49"><call pos:start="323:9" pos:end="323:49"><name pos:start="323:9" pos:end="323:18">error_setg</name><argument_list pos:start="323:19" pos:end="323:49">(<argument pos:start="323:20" pos:end="323:23"><expr pos:start="323:20" pos:end="323:23"><name pos:start="323:20" pos:end="323:23">errp</name></expr></argument>, <argument pos:start="323:26" pos:end="323:48"><expr pos:start="323:26" pos:end="323:48"><literal type="string" pos:start="323:26" pos:end="323:48">"L1 table is too small"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="325:9" pos:end="325:22"><expr pos:start="325:9" pos:end="325:21"><name pos:start="325:9" pos:end="325:11">ret</name> <operator pos:start="325:13" pos:end="325:13">=</operator> <operator pos:start="325:15" pos:end="325:15">-</operator><name pos:start="325:16" pos:end="325:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="327:9" pos:end="327:18">goto <name pos:start="327:14" pos:end="327:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="331:5" pos:end="331:48"><expr pos:start="331:5" pos:end="331:47"><name pos:start="331:5" pos:end="331:22"><name pos:start="331:5" pos:end="331:5">s</name><operator pos:start="331:6" pos:end="331:7">-&gt;</operator><name pos:start="331:8" pos:end="331:22">l1_table_offset</name></name> <operator pos:start="331:24" pos:end="331:24">=</operator> <name pos:start="331:26" pos:end="331:47"><name pos:start="331:26" pos:end="331:31">header</name><operator pos:start="331:32" pos:end="331:32">.</operator><name pos:start="331:33" pos:end="331:47">l1_table_offset</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="333:5" pos:end="357:5"><if pos:start="333:5" pos:end="357:5">if <condition pos:start="333:8" pos:end="333:23">(<expr pos:start="333:9" pos:end="333:22"><name pos:start="333:9" pos:end="333:18"><name pos:start="333:9" pos:end="333:9">s</name><operator pos:start="333:10" pos:end="333:11">-&gt;</operator><name pos:start="333:12" pos:end="333:18">l1_size</name></name> <operator pos:start="333:20" pos:end="333:20">&gt;</operator> <literal type="number" pos:start="333:22" pos:end="333:22">0</literal></expr>)</condition> <block pos:start="333:25" pos:end="357:5">{<block_content pos:start="335:9" pos:end="355:9">

        <expr_stmt pos:start="335:9" pos:end="337:62"><expr pos:start="335:9" pos:end="337:61"><name pos:start="335:9" pos:end="335:19"><name pos:start="335:9" pos:end="335:9">s</name><operator pos:start="335:10" pos:end="335:11">-&gt;</operator><name pos:start="335:12" pos:end="335:19">l1_table</name></name> <operator pos:start="335:21" pos:end="335:21">=</operator> <call pos:start="335:23" pos:end="337:61"><name pos:start="335:23" pos:end="335:31">g_malloc0</name><argument_list pos:start="335:32" pos:end="337:61">(

            <argument pos:start="337:13" pos:end="337:60"><expr pos:start="337:13" pos:end="337:60"><call pos:start="337:13" pos:end="337:60"><name pos:start="337:13" pos:end="337:24">align_offset</name><argument_list pos:start="337:25" pos:end="337:60">(<argument pos:start="337:26" pos:end="337:54"><expr pos:start="337:26" pos:end="337:54"><name pos:start="337:26" pos:end="337:35"><name pos:start="337:26" pos:end="337:26">s</name><operator pos:start="337:27" pos:end="337:28">-&gt;</operator><name pos:start="337:29" pos:end="337:35">l1_size</name></name> <operator pos:start="337:37" pos:end="337:37">*</operator> <sizeof pos:start="337:39" pos:end="337:54">sizeof<argument_list pos:start="337:45" pos:end="337:54">(<argument pos:start="337:46" pos:end="337:53"><expr pos:start="337:46" pos:end="337:53"><name pos:start="337:46" pos:end="337:53">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="337:57" pos:end="337:59"><expr pos:start="337:57" pos:end="337:59"><literal type="number" pos:start="337:57" pos:end="337:59">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="339:9" pos:end="341:56"><expr pos:start="339:9" pos:end="341:55"><name pos:start="339:9" pos:end="339:11">ret</name> <operator pos:start="339:13" pos:end="339:13">=</operator> <call pos:start="339:15" pos:end="341:55"><name pos:start="339:15" pos:end="339:24">bdrv_pread</name><argument_list pos:start="339:25" pos:end="341:55">(<argument pos:start="339:26" pos:end="339:33"><expr pos:start="339:26" pos:end="339:33"><name pos:start="339:26" pos:end="339:33"><name pos:start="339:26" pos:end="339:27">bs</name><operator pos:start="339:28" pos:end="339:29">-&gt;</operator><name pos:start="339:30" pos:end="339:33">file</name></name></expr></argument>, <argument pos:start="339:36" pos:end="339:53"><expr pos:start="339:36" pos:end="339:53"><name pos:start="339:36" pos:end="339:53"><name pos:start="339:36" pos:end="339:36">s</name><operator pos:start="339:37" pos:end="339:38">-&gt;</operator><name pos:start="339:39" pos:end="339:53">l1_table_offset</name></name></expr></argument>, <argument pos:start="339:56" pos:end="339:66"><expr pos:start="339:56" pos:end="339:66"><name pos:start="339:56" pos:end="339:66"><name pos:start="339:56" pos:end="339:56">s</name><operator pos:start="339:57" pos:end="339:58">-&gt;</operator><name pos:start="339:59" pos:end="339:66">l1_table</name></name></expr></argument>,

                         <argument pos:start="341:26" pos:end="341:54"><expr pos:start="341:26" pos:end="341:54"><name pos:start="341:26" pos:end="341:35"><name pos:start="341:26" pos:end="341:26">s</name><operator pos:start="341:27" pos:end="341:28">-&gt;</operator><name pos:start="341:29" pos:end="341:35">l1_size</name></name> <operator pos:start="341:37" pos:end="341:37">*</operator> <sizeof pos:start="341:39" pos:end="341:54">sizeof<argument_list pos:start="341:45" pos:end="341:54">(<argument pos:start="341:46" pos:end="341:53"><expr pos:start="341:46" pos:end="341:53"><name pos:start="341:46" pos:end="341:53">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="343:9" pos:end="349:9"><if pos:start="343:9" pos:end="349:9">if <condition pos:start="343:12" pos:end="343:20">(<expr pos:start="343:13" pos:end="343:19"><name pos:start="343:13" pos:end="343:15">ret</name> <operator pos:start="343:17" pos:end="343:17">&lt;</operator> <literal type="number" pos:start="343:19" pos:end="343:19">0</literal></expr>)</condition> <block pos:start="343:22" pos:end="349:9">{<block_content pos:start="345:13" pos:end="347:22">

            <expr_stmt pos:start="345:13" pos:end="345:68"><expr pos:start="345:13" pos:end="345:67"><call pos:start="345:13" pos:end="345:67"><name pos:start="345:13" pos:end="345:28">error_setg_errno</name><argument_list pos:start="345:29" pos:end="345:67">(<argument pos:start="345:30" pos:end="345:33"><expr pos:start="345:30" pos:end="345:33"><name pos:start="345:30" pos:end="345:33">errp</name></expr></argument>, <argument pos:start="345:36" pos:end="345:39"><expr pos:start="345:36" pos:end="345:39"><operator pos:start="345:36" pos:end="345:36">-</operator><name pos:start="345:37" pos:end="345:39">ret</name></expr></argument>, <argument pos:start="345:42" pos:end="345:66"><expr pos:start="345:42" pos:end="345:66"><literal type="string" pos:start="345:42" pos:end="345:66">"Could not read L1 table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="347:13" pos:end="347:22">goto <name pos:start="347:18" pos:end="347:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <for pos:start="351:9" pos:end="355:9">for<control pos:start="351:12" pos:end="351:38">(<init pos:start="351:13" pos:end="351:18"><expr pos:start="351:13" pos:end="351:17"><name pos:start="351:13" pos:end="351:13">i</name> <operator pos:start="351:15" pos:end="351:15">=</operator> <literal type="number" pos:start="351:17" pos:end="351:17">0</literal></expr>;</init><condition pos:start="351:19" pos:end="351:33"><expr pos:start="351:19" pos:end="351:32"><name pos:start="351:19" pos:end="351:19">i</name> <operator pos:start="351:21" pos:end="351:21">&lt;</operator> <name pos:start="351:23" pos:end="351:32"><name pos:start="351:23" pos:end="351:23">s</name><operator pos:start="351:24" pos:end="351:25">-&gt;</operator><name pos:start="351:26" pos:end="351:32">l1_size</name></name></expr>;</condition> <incr pos:start="351:35" pos:end="351:37"><expr pos:start="351:35" pos:end="351:37"><name pos:start="351:35" pos:end="351:35">i</name><operator pos:start="351:36" pos:end="351:37">++</operator></expr></incr>)</control> <block pos:start="351:40" pos:end="355:9">{<block_content pos:start="353:13" pos:end="353:42">

            <expr_stmt pos:start="353:13" pos:end="353:42"><expr pos:start="353:13" pos:end="353:41"><call pos:start="353:13" pos:end="353:41"><name pos:start="353:13" pos:end="353:24">be64_to_cpus</name><argument_list pos:start="353:25" pos:end="353:41">(<argument pos:start="353:26" pos:end="353:40"><expr pos:start="353:26" pos:end="353:40"><operator pos:start="353:26" pos:end="353:26">&amp;</operator><name pos:start="353:27" pos:end="353:40"><name pos:start="353:27" pos:end="353:27">s</name><operator pos:start="353:28" pos:end="353:29">-&gt;</operator><name pos:start="353:30" pos:end="353:37">l1_table</name><index pos:start="353:38" pos:end="353:40">[<expr pos:start="353:39" pos:end="353:39"><name pos:start="353:39" pos:end="353:39">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="361:5" pos:end="361:45">/* alloc L2 table/refcount block cache */</comment>

    <expr_stmt pos:start="363:5" pos:end="363:62"><expr pos:start="363:5" pos:end="363:61"><name pos:start="363:5" pos:end="363:21"><name pos:start="363:5" pos:end="363:5">s</name><operator pos:start="363:6" pos:end="363:7">-&gt;</operator><name pos:start="363:8" pos:end="363:21">l2_table_cache</name></name> <operator pos:start="363:23" pos:end="363:23">=</operator> <call pos:start="363:25" pos:end="363:61"><name pos:start="363:25" pos:end="363:42">qcow2_cache_create</name><argument_list pos:start="363:43" pos:end="363:61">(<argument pos:start="363:44" pos:end="363:45"><expr pos:start="363:44" pos:end="363:45"><name pos:start="363:44" pos:end="363:45">bs</name></expr></argument>, <argument pos:start="363:48" pos:end="363:60"><expr pos:start="363:48" pos:end="363:60"><name pos:start="363:48" pos:end="363:60">L2_CACHE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="365:5" pos:end="365:74"><expr pos:start="365:5" pos:end="365:73"><name pos:start="365:5" pos:end="365:27"><name pos:start="365:5" pos:end="365:5">s</name><operator pos:start="365:6" pos:end="365:7">-&gt;</operator><name pos:start="365:8" pos:end="365:27">refcount_block_cache</name></name> <operator pos:start="365:29" pos:end="365:29">=</operator> <call pos:start="365:31" pos:end="365:73"><name pos:start="365:31" pos:end="365:48">qcow2_cache_create</name><argument_list pos:start="365:49" pos:end="365:73">(<argument pos:start="365:50" pos:end="365:51"><expr pos:start="365:50" pos:end="365:51"><name pos:start="365:50" pos:end="365:51">bs</name></expr></argument>, <argument pos:start="365:54" pos:end="365:72"><expr pos:start="365:54" pos:end="365:72"><name pos:start="365:54" pos:end="365:72">REFCOUNT_CACHE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="369:5" pos:end="369:49"><expr pos:start="369:5" pos:end="369:48"><name pos:start="369:5" pos:end="369:20"><name pos:start="369:5" pos:end="369:5">s</name><operator pos:start="369:6" pos:end="369:7">-&gt;</operator><name pos:start="369:8" pos:end="369:20">cluster_cache</name></name> <operator pos:start="369:22" pos:end="369:22">=</operator> <call pos:start="369:24" pos:end="369:48"><name pos:start="369:24" pos:end="369:31">g_malloc</name><argument_list pos:start="369:32" pos:end="369:48">(<argument pos:start="369:33" pos:end="369:47"><expr pos:start="369:33" pos:end="369:47"><name pos:start="369:33" pos:end="369:47"><name pos:start="369:33" pos:end="369:33">s</name><operator pos:start="369:34" pos:end="369:35">-&gt;</operator><name pos:start="369:36" pos:end="369:47">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="371:5" pos:end="371:57">/* one more sector for decompressed data alignment */</comment>

    <expr_stmt pos:start="373:5" pos:end="375:41"><expr pos:start="373:5" pos:end="375:40"><name pos:start="373:5" pos:end="373:19"><name pos:start="373:5" pos:end="373:5">s</name><operator pos:start="373:6" pos:end="373:7">-&gt;</operator><name pos:start="373:8" pos:end="373:19">cluster_data</name></name> <operator pos:start="373:21" pos:end="373:21">=</operator> <call pos:start="373:23" pos:end="375:40"><name pos:start="373:23" pos:end="373:37">qemu_blockalign</name><argument_list pos:start="373:38" pos:end="375:40">(<argument pos:start="373:39" pos:end="373:40"><expr pos:start="373:39" pos:end="373:40"><name pos:start="373:39" pos:end="373:40">bs</name></expr></argument>, <argument pos:start="373:43" pos:end="375:39"><expr pos:start="373:43" pos:end="375:39"><name pos:start="373:43" pos:end="373:65">QCOW_MAX_CRYPT_CLUSTERS</name> <operator pos:start="373:67" pos:end="373:67">*</operator> <name pos:start="373:69" pos:end="373:83"><name pos:start="373:69" pos:end="373:69">s</name><operator pos:start="373:70" pos:end="373:71">-&gt;</operator><name pos:start="373:72" pos:end="373:83">cluster_size</name></name>

                                  <operator pos:start="375:35" pos:end="375:35">+</operator> <literal type="number" pos:start="375:37" pos:end="375:39">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="377:5" pos:end="377:33"><expr pos:start="377:5" pos:end="377:32"><name pos:start="377:5" pos:end="377:27"><name pos:start="377:5" pos:end="377:5">s</name><operator pos:start="377:6" pos:end="377:7">-&gt;</operator><name pos:start="377:8" pos:end="377:27">cluster_cache_offset</name></name> <operator pos:start="377:29" pos:end="377:29">=</operator> <operator pos:start="377:31" pos:end="377:31">-</operator><literal type="number" pos:start="377:32" pos:end="377:32">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="379:5" pos:end="379:21"><expr pos:start="379:5" pos:end="379:20"><name pos:start="379:5" pos:end="379:12"><name pos:start="379:5" pos:end="379:5">s</name><operator pos:start="379:6" pos:end="379:7">-&gt;</operator><name pos:start="379:8" pos:end="379:12">flags</name></name> <operator pos:start="379:14" pos:end="379:14">=</operator> <name pos:start="379:16" pos:end="379:20">flags</name></expr>;</expr_stmt>



    <expr_stmt pos:start="383:5" pos:end="383:34"><expr pos:start="383:5" pos:end="383:33"><name pos:start="383:5" pos:end="383:7">ret</name> <operator pos:start="383:9" pos:end="383:9">=</operator> <call pos:start="383:11" pos:end="383:33"><name pos:start="383:11" pos:end="383:29">qcow2_refcount_init</name><argument_list pos:start="383:30" pos:end="383:33">(<argument pos:start="383:31" pos:end="383:32"><expr pos:start="383:31" pos:end="383:32"><name pos:start="383:31" pos:end="383:32">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="385:5" pos:end="391:5"><if pos:start="385:5" pos:end="391:5">if <condition pos:start="385:8" pos:end="385:17">(<expr pos:start="385:9" pos:end="385:16"><name pos:start="385:9" pos:end="385:11">ret</name> <operator pos:start="385:13" pos:end="385:14">!=</operator> <literal type="number" pos:start="385:16" pos:end="385:16">0</literal></expr>)</condition> <block pos:start="385:19" pos:end="391:5">{<block_content pos:start="387:9" pos:end="389:18">

        <expr_stmt pos:start="387:9" pos:end="387:79"><expr pos:start="387:9" pos:end="387:78"><call pos:start="387:9" pos:end="387:78"><name pos:start="387:9" pos:end="387:24">error_setg_errno</name><argument_list pos:start="387:25" pos:end="387:78">(<argument pos:start="387:26" pos:end="387:29"><expr pos:start="387:26" pos:end="387:29"><name pos:start="387:26" pos:end="387:29">errp</name></expr></argument>, <argument pos:start="387:32" pos:end="387:35"><expr pos:start="387:32" pos:end="387:35"><operator pos:start="387:32" pos:end="387:32">-</operator><name pos:start="387:33" pos:end="387:35">ret</name></expr></argument>, <argument pos:start="387:38" pos:end="387:77"><expr pos:start="387:38" pos:end="387:77"><literal type="string" pos:start="387:38" pos:end="387:77">"Could not initialize refcount handling"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="389:9" pos:end="389:18">goto <name pos:start="389:14" pos:end="389:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="395:5" pos:end="395:35"><expr pos:start="395:5" pos:end="395:34"><call pos:start="395:5" pos:end="395:34"><name pos:start="395:5" pos:end="395:14">QLIST_INIT</name><argument_list pos:start="395:15" pos:end="395:34">(<argument pos:start="395:16" pos:end="395:33"><expr pos:start="395:16" pos:end="395:33"><operator pos:start="395:16" pos:end="395:16">&amp;</operator><name pos:start="395:17" pos:end="395:33"><name pos:start="395:17" pos:end="395:17">s</name><operator pos:start="395:18" pos:end="395:19">-&gt;</operator><name pos:start="395:20" pos:end="395:33">cluster_allocs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="397:5" pos:end="397:30"><expr pos:start="397:5" pos:end="397:29"><call pos:start="397:5" pos:end="397:29"><name pos:start="397:5" pos:end="397:15">QTAILQ_INIT</name><argument_list pos:start="397:16" pos:end="397:29">(<argument pos:start="397:17" pos:end="397:28"><expr pos:start="397:17" pos:end="397:28"><operator pos:start="397:17" pos:end="397:17">&amp;</operator><name pos:start="397:18" pos:end="397:28"><name pos:start="397:18" pos:end="397:18">s</name><operator pos:start="397:19" pos:end="397:20">-&gt;</operator><name pos:start="397:21" pos:end="397:28">discards</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="401:5" pos:end="401:31">/* read qcow2 extensions */</comment>

    <if_stmt pos:start="403:5" pos:end="413:5"><if pos:start="403:5" pos:end="413:5">if <condition pos:start="403:8" pos:end="405:20">(<expr pos:start="403:9" pos:end="405:19"><call pos:start="403:9" pos:end="405:19"><name pos:start="403:9" pos:end="403:29">qcow2_read_extensions</name><argument_list pos:start="403:30" pos:end="405:19">(<argument pos:start="403:31" pos:end="403:32"><expr pos:start="403:31" pos:end="403:32"><name pos:start="403:31" pos:end="403:32">bs</name></expr></argument>, <argument pos:start="403:35" pos:end="403:54"><expr pos:start="403:35" pos:end="403:54"><name pos:start="403:35" pos:end="403:54"><name pos:start="403:35" pos:end="403:40">header</name><operator pos:start="403:41" pos:end="403:41">.</operator><name pos:start="403:42" pos:end="403:54">header_length</name></name></expr></argument>, <argument pos:start="403:57" pos:end="403:63"><expr pos:start="403:57" pos:end="403:63"><name pos:start="403:57" pos:end="403:63">ext_end</name></expr></argument>, <argument pos:start="403:66" pos:end="403:69"><expr pos:start="403:66" pos:end="403:69"><name pos:start="403:66" pos:end="403:69">NULL</name></expr></argument>,

        <argument pos:start="405:9" pos:end="405:18"><expr pos:start="405:9" pos:end="405:18"><operator pos:start="405:9" pos:end="405:9">&amp;</operator><name pos:start="405:10" pos:end="405:18">local_err</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="405:22" pos:end="413:5">{<block_content pos:start="407:9" pos:end="411:18">

        <expr_stmt pos:start="407:9" pos:end="407:41"><expr pos:start="407:9" pos:end="407:40"><call pos:start="407:9" pos:end="407:40"><name pos:start="407:9" pos:end="407:23">error_propagate</name><argument_list pos:start="407:24" pos:end="407:40">(<argument pos:start="407:25" pos:end="407:28"><expr pos:start="407:25" pos:end="407:28"><name pos:start="407:25" pos:end="407:28">errp</name></expr></argument>, <argument pos:start="407:31" pos:end="407:39"><expr pos:start="407:31" pos:end="407:39"><name pos:start="407:31" pos:end="407:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="409:9" pos:end="409:22"><expr pos:start="409:9" pos:end="409:21"><name pos:start="409:9" pos:end="409:11">ret</name> <operator pos:start="409:13" pos:end="409:13">=</operator> <operator pos:start="409:15" pos:end="409:15">-</operator><name pos:start="409:16" pos:end="409:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="411:9" pos:end="411:18">goto <name pos:start="411:14" pos:end="411:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="417:5" pos:end="417:36">/* read the backing file name */</comment>

    <if_stmt pos:start="419:5" pos:end="443:5"><if pos:start="419:5" pos:end="443:5">if <condition pos:start="419:8" pos:end="419:40">(<expr pos:start="419:9" pos:end="419:39"><name pos:start="419:9" pos:end="419:34"><name pos:start="419:9" pos:end="419:14">header</name><operator pos:start="419:15" pos:end="419:15">.</operator><name pos:start="419:16" pos:end="419:34">backing_file_offset</name></name> <operator pos:start="419:36" pos:end="419:37">!=</operator> <literal type="number" pos:start="419:39" pos:end="419:39">0</literal></expr>)</condition> <block pos:start="419:42" pos:end="443:5">{<block_content pos:start="421:9" pos:end="441:37">

        <expr_stmt pos:start="421:9" pos:end="421:39"><expr pos:start="421:9" pos:end="421:38"><name pos:start="421:9" pos:end="421:11">len</name> <operator pos:start="421:13" pos:end="421:13">=</operator> <name pos:start="421:15" pos:end="421:38"><name pos:start="421:15" pos:end="421:20">header</name><operator pos:start="421:21" pos:end="421:21">.</operator><name pos:start="421:22" pos:end="421:38">backing_file_size</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="423:9" pos:end="427:9"><if pos:start="423:9" pos:end="427:9">if <condition pos:start="423:12" pos:end="423:23">(<expr pos:start="423:13" pos:end="423:22"><name pos:start="423:13" pos:end="423:15">len</name> <operator pos:start="423:17" pos:end="423:17">&gt;</operator> <literal type="number" pos:start="423:19" pos:end="423:22">1023</literal></expr>)</condition> <block pos:start="423:25" pos:end="427:9">{<block_content pos:start="425:13" pos:end="425:23">

            <expr_stmt pos:start="425:13" pos:end="425:23"><expr pos:start="425:13" pos:end="425:22"><name pos:start="425:13" pos:end="425:15">len</name> <operator pos:start="425:17" pos:end="425:17">=</operator> <literal type="number" pos:start="425:19" pos:end="425:22">1023</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="429:9" pos:end="431:48"><expr pos:start="429:9" pos:end="431:47"><name pos:start="429:9" pos:end="429:11">ret</name> <operator pos:start="429:13" pos:end="429:13">=</operator> <call pos:start="429:15" pos:end="431:47"><name pos:start="429:15" pos:end="429:24">bdrv_pread</name><argument_list pos:start="429:25" pos:end="431:47">(<argument pos:start="429:26" pos:end="429:33"><expr pos:start="429:26" pos:end="429:33"><name pos:start="429:26" pos:end="429:33"><name pos:start="429:26" pos:end="429:27">bs</name><operator pos:start="429:28" pos:end="429:29">-&gt;</operator><name pos:start="429:30" pos:end="429:33">file</name></name></expr></argument>, <argument pos:start="429:36" pos:end="429:61"><expr pos:start="429:36" pos:end="429:61"><name pos:start="429:36" pos:end="429:61"><name pos:start="429:36" pos:end="429:41">header</name><operator pos:start="429:42" pos:end="429:42">.</operator><name pos:start="429:43" pos:end="429:61">backing_file_offset</name></name></expr></argument>,

                         <argument pos:start="431:26" pos:end="431:41"><expr pos:start="431:26" pos:end="431:41"><name pos:start="431:26" pos:end="431:41"><name pos:start="431:26" pos:end="431:27">bs</name><operator pos:start="431:28" pos:end="431:29">-&gt;</operator><name pos:start="431:30" pos:end="431:41">backing_file</name></name></expr></argument>, <argument pos:start="431:44" pos:end="431:46"><expr pos:start="431:44" pos:end="431:46"><name pos:start="431:44" pos:end="431:46">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="433:9" pos:end="439:9"><if pos:start="433:9" pos:end="439:9">if <condition pos:start="433:12" pos:end="433:20">(<expr pos:start="433:13" pos:end="433:19"><name pos:start="433:13" pos:end="433:15">ret</name> <operator pos:start="433:17" pos:end="433:17">&lt;</operator> <literal type="number" pos:start="433:19" pos:end="433:19">0</literal></expr>)</condition> <block pos:start="433:22" pos:end="439:9">{<block_content pos:start="435:13" pos:end="437:22">

            <expr_stmt pos:start="435:13" pos:end="435:77"><expr pos:start="435:13" pos:end="435:76"><call pos:start="435:13" pos:end="435:76"><name pos:start="435:13" pos:end="435:28">error_setg_errno</name><argument_list pos:start="435:29" pos:end="435:76">(<argument pos:start="435:30" pos:end="435:33"><expr pos:start="435:30" pos:end="435:33"><name pos:start="435:30" pos:end="435:33">errp</name></expr></argument>, <argument pos:start="435:36" pos:end="435:39"><expr pos:start="435:36" pos:end="435:39"><operator pos:start="435:36" pos:end="435:36">-</operator><name pos:start="435:37" pos:end="435:39">ret</name></expr></argument>, <argument pos:start="435:42" pos:end="435:75"><expr pos:start="435:42" pos:end="435:75"><literal type="string" pos:start="435:42" pos:end="435:75">"Could not read backing file name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="437:13" pos:end="437:22">goto <name pos:start="437:18" pos:end="437:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="441:9" pos:end="441:37"><expr pos:start="441:9" pos:end="441:36"><name pos:start="441:9" pos:end="441:29"><name pos:start="441:9" pos:end="441:10">bs</name><operator pos:start="441:11" pos:end="441:12">-&gt;</operator><name pos:start="441:13" pos:end="441:24">backing_file</name><index pos:start="441:25" pos:end="441:29">[<expr pos:start="441:26" pos:end="441:28"><name pos:start="441:26" pos:end="441:28">len</name></expr>]</index></name> <operator pos:start="441:31" pos:end="441:31">=</operator> <literal type="char" pos:start="441:33" pos:end="441:36">'\0'</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="447:5" pos:end="447:35"><expr pos:start="447:5" pos:end="447:34"><name pos:start="447:5" pos:end="447:7">ret</name> <operator pos:start="447:9" pos:end="447:9">=</operator> <call pos:start="447:11" pos:end="447:34"><name pos:start="447:11" pos:end="447:30">qcow2_read_snapshots</name><argument_list pos:start="447:31" pos:end="447:34">(<argument pos:start="447:32" pos:end="447:33"><expr pos:start="447:32" pos:end="447:33"><name pos:start="447:32" pos:end="447:33">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="449:5" pos:end="455:5"><if pos:start="449:5" pos:end="455:5">if <condition pos:start="449:8" pos:end="449:16">(<expr pos:start="449:9" pos:end="449:15"><name pos:start="449:9" pos:end="449:11">ret</name> <operator pos:start="449:13" pos:end="449:13">&lt;</operator> <literal type="number" pos:start="449:15" pos:end="449:15">0</literal></expr>)</condition> <block pos:start="449:18" pos:end="455:5">{<block_content pos:start="451:9" pos:end="453:18">

        <expr_stmt pos:start="451:9" pos:end="451:65"><expr pos:start="451:9" pos:end="451:64"><call pos:start="451:9" pos:end="451:64"><name pos:start="451:9" pos:end="451:24">error_setg_errno</name><argument_list pos:start="451:25" pos:end="451:64">(<argument pos:start="451:26" pos:end="451:29"><expr pos:start="451:26" pos:end="451:29"><name pos:start="451:26" pos:end="451:29">errp</name></expr></argument>, <argument pos:start="451:32" pos:end="451:35"><expr pos:start="451:32" pos:end="451:35"><operator pos:start="451:32" pos:end="451:32">-</operator><name pos:start="451:33" pos:end="451:35">ret</name></expr></argument>, <argument pos:start="451:38" pos:end="451:63"><expr pos:start="451:38" pos:end="451:63"><literal type="string" pos:start="451:38" pos:end="451:63">"Could not read snapshots"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="453:9" pos:end="453:18">goto <name pos:start="453:14" pos:end="453:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="459:5" pos:end="459:46">/* Clear unknown autoclear feature bits */</comment>

    <if_stmt pos:start="461:5" pos:end="475:5"><if pos:start="461:5" pos:end="475:5">if <condition pos:start="461:8" pos:end="461:78">(<expr pos:start="461:9" pos:end="461:77"><operator pos:start="461:9" pos:end="461:9">!</operator><name pos:start="461:10" pos:end="461:22"><name pos:start="461:10" pos:end="461:11">bs</name><operator pos:start="461:12" pos:end="461:13">-&gt;</operator><name pos:start="461:14" pos:end="461:22">read_only</name></name> <operator pos:start="461:24" pos:end="461:25">&amp;&amp;</operator> <operator pos:start="461:27" pos:end="461:27">!</operator><operator pos:start="461:28" pos:end="461:28">(</operator><name pos:start="461:29" pos:end="461:33">flags</name> <operator pos:start="461:35" pos:end="461:35">&amp;</operator> <name pos:start="461:37" pos:end="461:51">BDRV_O_INCOMING</name><operator pos:start="461:52" pos:end="461:52">)</operator> <operator pos:start="461:54" pos:end="461:55">&amp;&amp;</operator> <name pos:start="461:57" pos:end="461:77"><name pos:start="461:57" pos:end="461:57">s</name><operator pos:start="461:58" pos:end="461:59">-&gt;</operator><name pos:start="461:60" pos:end="461:77">autoclear_features</name></name></expr>)</condition> <block pos:start="461:80" pos:end="475:5">{<block_content pos:start="463:9" pos:end="473:9">

        <expr_stmt pos:start="463:9" pos:end="463:34"><expr pos:start="463:9" pos:end="463:33"><name pos:start="463:9" pos:end="463:29"><name pos:start="463:9" pos:end="463:9">s</name><operator pos:start="463:10" pos:end="463:11">-&gt;</operator><name pos:start="463:12" pos:end="463:29">autoclear_features</name></name> <operator pos:start="463:31" pos:end="463:31">=</operator> <literal type="number" pos:start="463:33" pos:end="463:33">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="465:9" pos:end="465:38"><expr pos:start="465:9" pos:end="465:37"><name pos:start="465:9" pos:end="465:11">ret</name> <operator pos:start="465:13" pos:end="465:13">=</operator> <call pos:start="465:15" pos:end="465:37"><name pos:start="465:15" pos:end="465:33">qcow2_update_header</name><argument_list pos:start="465:34" pos:end="465:37">(<argument pos:start="465:35" pos:end="465:36"><expr pos:start="465:35" pos:end="465:36"><name pos:start="465:35" pos:end="465:36">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="467:9" pos:end="473:9"><if pos:start="467:9" pos:end="473:9">if <condition pos:start="467:12" pos:end="467:20">(<expr pos:start="467:13" pos:end="467:19"><name pos:start="467:13" pos:end="467:15">ret</name> <operator pos:start="467:17" pos:end="467:17">&lt;</operator> <literal type="number" pos:start="467:19" pos:end="467:19">0</literal></expr>)</condition> <block pos:start="467:22" pos:end="473:9">{<block_content pos:start="469:13" pos:end="471:22">

            <expr_stmt pos:start="469:13" pos:end="469:74"><expr pos:start="469:13" pos:end="469:73"><call pos:start="469:13" pos:end="469:73"><name pos:start="469:13" pos:end="469:28">error_setg_errno</name><argument_list pos:start="469:29" pos:end="469:73">(<argument pos:start="469:30" pos:end="469:33"><expr pos:start="469:30" pos:end="469:33"><name pos:start="469:30" pos:end="469:33">errp</name></expr></argument>, <argument pos:start="469:36" pos:end="469:39"><expr pos:start="469:36" pos:end="469:39"><operator pos:start="469:36" pos:end="469:36">-</operator><name pos:start="469:37" pos:end="469:39">ret</name></expr></argument>, <argument pos:start="469:42" pos:end="469:72"><expr pos:start="469:42" pos:end="469:72"><literal type="string" pos:start="469:42" pos:end="469:72">"Could not update qcow2 header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="471:13" pos:end="471:22">goto <name pos:start="471:18" pos:end="471:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="479:5" pos:end="479:26">/* Initialise locks */</comment>

    <expr_stmt pos:start="481:5" pos:end="481:33"><expr pos:start="481:5" pos:end="481:32"><call pos:start="481:5" pos:end="481:32"><name pos:start="481:5" pos:end="481:22">qemu_co_mutex_init</name><argument_list pos:start="481:23" pos:end="481:32">(<argument pos:start="481:24" pos:end="481:31"><expr pos:start="481:24" pos:end="481:31"><operator pos:start="481:24" pos:end="481:24">&amp;</operator><name pos:start="481:25" pos:end="481:31"><name pos:start="481:25" pos:end="481:25">s</name><operator pos:start="481:26" pos:end="481:27">-&gt;</operator><name pos:start="481:28" pos:end="481:31">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="485:5" pos:end="485:31">/* Repair image if dirty */</comment>

    <if_stmt pos:start="487:5" pos:end="505:5"><if pos:start="487:5" pos:end="505:5">if <condition pos:start="487:8" pos:end="489:58">(<expr pos:start="487:9" pos:end="489:57"><operator pos:start="487:9" pos:end="487:9">!</operator><operator pos:start="487:10" pos:end="487:10">(</operator><name pos:start="487:11" pos:end="487:15">flags</name> <operator pos:start="487:17" pos:end="487:17">&amp;</operator> <operator pos:start="487:19" pos:end="487:19">(</operator><name pos:start="487:20" pos:end="487:31">BDRV_O_CHECK</name> <operator pos:start="487:33" pos:end="487:33">|</operator> <name pos:start="487:35" pos:end="487:49">BDRV_O_INCOMING</name><operator pos:start="487:50" pos:end="487:50">)</operator><operator pos:start="487:51" pos:end="487:51">)</operator> <operator pos:start="487:53" pos:end="487:54">&amp;&amp;</operator> <operator pos:start="487:56" pos:end="487:56">!</operator><name pos:start="487:57" pos:end="487:69"><name pos:start="487:57" pos:end="487:58">bs</name><operator pos:start="487:59" pos:end="487:60">-&gt;</operator><name pos:start="487:61" pos:end="487:69">read_only</name></name> <operator pos:start="487:71" pos:end="487:72">&amp;&amp;</operator>

        <operator pos:start="489:9" pos:end="489:9">(</operator><name pos:start="489:10" pos:end="489:33"><name pos:start="489:10" pos:end="489:10">s</name><operator pos:start="489:11" pos:end="489:12">-&gt;</operator><name pos:start="489:13" pos:end="489:33">incompatible_features</name></name> <operator pos:start="489:35" pos:end="489:35">&amp;</operator> <name pos:start="489:37" pos:end="489:56">QCOW2_INCOMPAT_DIRTY</name><operator pos:start="489:57" pos:end="489:57">)</operator></expr>)</condition> <block pos:start="489:60" pos:end="505:5">{<block_content pos:start="491:9" pos:end="503:9">

        <decl_stmt pos:start="491:9" pos:end="491:37"><decl pos:start="491:9" pos:end="491:36"><type pos:start="491:9" pos:end="491:23"><name pos:start="491:9" pos:end="491:23">BdrvCheckResult</name></type> <name pos:start="491:25" pos:end="491:30">result</name> <init pos:start="491:32" pos:end="491:36">= <expr pos:start="491:34" pos:end="491:36"><block pos:start="491:34" pos:end="491:36">{<expr pos:start="491:35" pos:end="491:35"><literal type="number" pos:start="491:35" pos:end="491:35">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="495:9" pos:end="495:56"><expr pos:start="495:9" pos:end="495:55"><name pos:start="495:9" pos:end="495:11">ret</name> <operator pos:start="495:13" pos:end="495:13">=</operator> <call pos:start="495:15" pos:end="495:55"><name pos:start="495:15" pos:end="495:25">qcow2_check</name><argument_list pos:start="495:26" pos:end="495:55">(<argument pos:start="495:27" pos:end="495:28"><expr pos:start="495:27" pos:end="495:28"><name pos:start="495:27" pos:end="495:28">bs</name></expr></argument>, <argument pos:start="495:31" pos:end="495:37"><expr pos:start="495:31" pos:end="495:37"><operator pos:start="495:31" pos:end="495:31">&amp;</operator><name pos:start="495:32" pos:end="495:37">result</name></expr></argument>, <argument pos:start="495:40" pos:end="495:54"><expr pos:start="495:40" pos:end="495:54"><name pos:start="495:40" pos:end="495:54">BDRV_FIX_ERRORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="497:9" pos:end="503:9"><if pos:start="497:9" pos:end="503:9">if <condition pos:start="497:12" pos:end="497:20">(<expr pos:start="497:13" pos:end="497:19"><name pos:start="497:13" pos:end="497:15">ret</name> <operator pos:start="497:17" pos:end="497:17">&lt;</operator> <literal type="number" pos:start="497:19" pos:end="497:19">0</literal></expr>)</condition> <block pos:start="497:22" pos:end="503:9">{<block_content pos:start="499:13" pos:end="501:22">

            <expr_stmt pos:start="499:13" pos:end="499:73"><expr pos:start="499:13" pos:end="499:72"><call pos:start="499:13" pos:end="499:72"><name pos:start="499:13" pos:end="499:28">error_setg_errno</name><argument_list pos:start="499:29" pos:end="499:72">(<argument pos:start="499:30" pos:end="499:33"><expr pos:start="499:30" pos:end="499:33"><name pos:start="499:30" pos:end="499:33">errp</name></expr></argument>, <argument pos:start="499:36" pos:end="499:39"><expr pos:start="499:36" pos:end="499:39"><operator pos:start="499:36" pos:end="499:36">-</operator><name pos:start="499:37" pos:end="499:39">ret</name></expr></argument>, <argument pos:start="499:42" pos:end="499:71"><expr pos:start="499:42" pos:end="499:71"><literal type="string" pos:start="499:42" pos:end="499:71">"Could not repair dirty image"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="501:13" pos:end="501:22">goto <name pos:start="501:18" pos:end="501:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="509:5" pos:end="509:75">/* Enable lazy_refcounts according to image and command line options */</comment>

    <expr_stmt pos:start="511:5" pos:end="511:72"><expr pos:start="511:5" pos:end="511:71"><name pos:start="511:5" pos:end="511:8">opts</name> <operator pos:start="511:10" pos:end="511:10">=</operator> <call pos:start="511:12" pos:end="511:71"><name pos:start="511:12" pos:end="511:27">qemu_opts_create</name><argument_list pos:start="511:28" pos:end="511:71">(<argument pos:start="511:29" pos:end="511:47"><expr pos:start="511:29" pos:end="511:47"><operator pos:start="511:29" pos:end="511:29">&amp;</operator><name pos:start="511:30" pos:end="511:47">qcow2_runtime_opts</name></expr></argument>, <argument pos:start="511:50" pos:end="511:53"><expr pos:start="511:50" pos:end="511:53"><name pos:start="511:50" pos:end="511:53">NULL</name></expr></argument>, <argument pos:start="511:56" pos:end="511:56"><expr pos:start="511:56" pos:end="511:56"><literal type="number" pos:start="511:56" pos:end="511:56">0</literal></expr></argument>, <argument pos:start="511:59" pos:end="511:70"><expr pos:start="511:59" pos:end="511:70"><operator pos:start="511:59" pos:end="511:59">&amp;</operator><name pos:start="511:60" pos:end="511:70">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="513:5" pos:end="513:54"><expr pos:start="513:5" pos:end="513:53"><call pos:start="513:5" pos:end="513:53"><name pos:start="513:5" pos:end="513:26">qemu_opts_absorb_qdict</name><argument_list pos:start="513:27" pos:end="513:53">(<argument pos:start="513:28" pos:end="513:31"><expr pos:start="513:28" pos:end="513:31"><name pos:start="513:28" pos:end="513:31">opts</name></expr></argument>, <argument pos:start="513:34" pos:end="513:40"><expr pos:start="513:34" pos:end="513:40"><name pos:start="513:34" pos:end="513:40">options</name></expr></argument>, <argument pos:start="513:43" pos:end="513:52"><expr pos:start="513:43" pos:end="513:52"><operator pos:start="513:43" pos:end="513:43">&amp;</operator><name pos:start="513:44" pos:end="513:52">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="515:5" pos:end="523:5"><if pos:start="515:5" pos:end="523:5">if <condition pos:start="515:8" pos:end="515:18">(<expr pos:start="515:9" pos:end="515:17"><name pos:start="515:9" pos:end="515:17">local_err</name></expr>)</condition> <block pos:start="515:20" pos:end="523:5">{<block_content pos:start="517:9" pos:end="521:18">

        <expr_stmt pos:start="517:9" pos:end="517:41"><expr pos:start="517:9" pos:end="517:40"><call pos:start="517:9" pos:end="517:40"><name pos:start="517:9" pos:end="517:23">error_propagate</name><argument_list pos:start="517:24" pos:end="517:40">(<argument pos:start="517:25" pos:end="517:28"><expr pos:start="517:25" pos:end="517:28"><name pos:start="517:25" pos:end="517:28">errp</name></expr></argument>, <argument pos:start="517:31" pos:end="517:39"><expr pos:start="517:31" pos:end="517:39"><name pos:start="517:31" pos:end="517:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="519:9" pos:end="519:22"><expr pos:start="519:9" pos:end="519:21"><name pos:start="519:9" pos:end="519:11">ret</name> <operator pos:start="519:13" pos:end="519:13">=</operator> <operator pos:start="519:15" pos:end="519:15">-</operator><name pos:start="519:16" pos:end="519:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="521:9" pos:end="521:18">goto <name pos:start="521:14" pos:end="521:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="527:5" pos:end="529:64"><expr pos:start="527:5" pos:end="529:63"><name pos:start="527:5" pos:end="527:25"><name pos:start="527:5" pos:end="527:5">s</name><operator pos:start="527:6" pos:end="527:7">-&gt;</operator><name pos:start="527:8" pos:end="527:25">use_lazy_refcounts</name></name> <operator pos:start="527:27" pos:end="527:27">=</operator> <call pos:start="527:29" pos:end="529:63"><name pos:start="527:29" pos:end="527:45">qemu_opt_get_bool</name><argument_list pos:start="527:46" pos:end="529:63">(<argument pos:start="527:47" pos:end="527:50"><expr pos:start="527:47" pos:end="527:50"><name pos:start="527:47" pos:end="527:50">opts</name></expr></argument>, <argument pos:start="527:53" pos:end="527:76"><expr pos:start="527:53" pos:end="527:76"><name pos:start="527:53" pos:end="527:76">QCOW2_OPT_LAZY_REFCOUNTS</name></expr></argument>,

        <argument pos:start="529:9" pos:end="529:62"><expr pos:start="529:9" pos:end="529:62"><operator pos:start="529:9" pos:end="529:9">(</operator><name pos:start="529:10" pos:end="529:31"><name pos:start="529:10" pos:end="529:10">s</name><operator pos:start="529:11" pos:end="529:12">-&gt;</operator><name pos:start="529:13" pos:end="529:31">compatible_features</name></name> <operator pos:start="529:33" pos:end="529:33">&amp;</operator> <name pos:start="529:35" pos:end="529:61">QCOW2_COMPAT_LAZY_REFCOUNTS</name><operator pos:start="529:62" pos:end="529:62">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="533:5" pos:end="533:56"><expr pos:start="533:5" pos:end="533:55"><name pos:start="533:5" pos:end="533:47"><name pos:start="533:5" pos:end="533:5">s</name><operator pos:start="533:6" pos:end="533:7">-&gt;</operator><name pos:start="533:8" pos:end="533:26">discard_passthrough</name><index pos:start="533:27" pos:end="533:47">[<expr pos:start="533:28" pos:end="533:46"><name pos:start="533:28" pos:end="533:46">QCOW2_DISCARD_NEVER</name></expr>]</index></name> <operator pos:start="533:49" pos:end="533:49">=</operator> <name pos:start="533:51" pos:end="533:55">false</name></expr>;</expr_stmt>

    <expr_stmt pos:start="535:5" pos:end="535:56"><expr pos:start="535:5" pos:end="535:55"><name pos:start="535:5" pos:end="535:48"><name pos:start="535:5" pos:end="535:5">s</name><operator pos:start="535:6" pos:end="535:7">-&gt;</operator><name pos:start="535:8" pos:end="535:26">discard_passthrough</name><index pos:start="535:27" pos:end="535:48">[<expr pos:start="535:28" pos:end="535:47"><name pos:start="535:28" pos:end="535:47">QCOW2_DISCARD_ALWAYS</name></expr>]</index></name> <operator pos:start="535:50" pos:end="535:50">=</operator> <name pos:start="535:52" pos:end="535:55">true</name></expr>;</expr_stmt>

    <expr_stmt pos:start="537:5" pos:end="541:48"><expr pos:start="537:5" pos:end="541:47"><name pos:start="537:5" pos:end="537:49"><name pos:start="537:5" pos:end="537:5">s</name><operator pos:start="537:6" pos:end="537:7">-&gt;</operator><name pos:start="537:8" pos:end="537:26">discard_passthrough</name><index pos:start="537:27" pos:end="537:49">[<expr pos:start="537:28" pos:end="537:48"><name pos:start="537:28" pos:end="537:48">QCOW2_DISCARD_REQUEST</name></expr>]</index></name> <operator pos:start="537:51" pos:end="537:51">=</operator>

        <call pos:start="539:9" pos:end="541:47"><name pos:start="539:9" pos:end="539:25">qemu_opt_get_bool</name><argument_list pos:start="539:26" pos:end="541:47">(<argument pos:start="539:27" pos:end="539:30"><expr pos:start="539:27" pos:end="539:30"><name pos:start="539:27" pos:end="539:30">opts</name></expr></argument>, <argument pos:start="539:33" pos:end="539:57"><expr pos:start="539:33" pos:end="539:57"><name pos:start="539:33" pos:end="539:57">QCOW2_OPT_DISCARD_REQUEST</name></expr></argument>,

                          <argument pos:start="541:27" pos:end="541:46"><expr pos:start="541:27" pos:end="541:46"><name pos:start="541:27" pos:end="541:31">flags</name> <operator pos:start="541:33" pos:end="541:33">&amp;</operator> <name pos:start="541:35" pos:end="541:46">BDRV_O_UNMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="543:5" pos:end="545:66"><expr pos:start="543:5" pos:end="545:65"><name pos:start="543:5" pos:end="543:50"><name pos:start="543:5" pos:end="543:5">s</name><operator pos:start="543:6" pos:end="543:7">-&gt;</operator><name pos:start="543:8" pos:end="543:26">discard_passthrough</name><index pos:start="543:27" pos:end="543:50">[<expr pos:start="543:28" pos:end="543:49"><name pos:start="543:28" pos:end="543:49">QCOW2_DISCARD_SNAPSHOT</name></expr>]</index></name> <operator pos:start="543:52" pos:end="543:52">=</operator>

        <call pos:start="545:9" pos:end="545:65"><name pos:start="545:9" pos:end="545:25">qemu_opt_get_bool</name><argument_list pos:start="545:26" pos:end="545:65">(<argument pos:start="545:27" pos:end="545:30"><expr pos:start="545:27" pos:end="545:30"><name pos:start="545:27" pos:end="545:30">opts</name></expr></argument>, <argument pos:start="545:33" pos:end="545:58"><expr pos:start="545:33" pos:end="545:58"><name pos:start="545:33" pos:end="545:58">QCOW2_OPT_DISCARD_SNAPSHOT</name></expr></argument>, <argument pos:start="545:61" pos:end="545:64"><expr pos:start="545:61" pos:end="545:64"><name pos:start="545:61" pos:end="545:64">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="547:5" pos:end="549:64"><expr pos:start="547:5" pos:end="549:63"><name pos:start="547:5" pos:end="547:47"><name pos:start="547:5" pos:end="547:5">s</name><operator pos:start="547:6" pos:end="547:7">-&gt;</operator><name pos:start="547:8" pos:end="547:26">discard_passthrough</name><index pos:start="547:27" pos:end="547:47">[<expr pos:start="547:28" pos:end="547:46"><name pos:start="547:28" pos:end="547:46">QCOW2_DISCARD_OTHER</name></expr>]</index></name> <operator pos:start="547:49" pos:end="547:49">=</operator>

        <call pos:start="549:9" pos:end="549:63"><name pos:start="549:9" pos:end="549:25">qemu_opt_get_bool</name><argument_list pos:start="549:26" pos:end="549:63">(<argument pos:start="549:27" pos:end="549:30"><expr pos:start="549:27" pos:end="549:30"><name pos:start="549:27" pos:end="549:30">opts</name></expr></argument>, <argument pos:start="549:33" pos:end="549:55"><expr pos:start="549:33" pos:end="549:55"><name pos:start="549:33" pos:end="549:55">QCOW2_OPT_DISCARD_OTHER</name></expr></argument>, <argument pos:start="549:58" pos:end="549:62"><expr pos:start="549:58" pos:end="549:62"><name pos:start="549:58" pos:end="549:62">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="553:5" pos:end="553:72"><expr pos:start="553:5" pos:end="553:71"><name pos:start="553:5" pos:end="553:21">opt_overlap_check</name> <operator pos:start="553:23" pos:end="553:23">=</operator> <ternary pos:start="553:25" pos:end="553:71"><condition pos:start="553:25" pos:end="553:61"><expr pos:start="553:25" pos:end="553:59"><call pos:start="553:25" pos:end="553:59"><name pos:start="553:25" pos:end="553:36">qemu_opt_get</name><argument_list pos:start="553:37" pos:end="553:59">(<argument pos:start="553:38" pos:end="553:41"><expr pos:start="553:38" pos:end="553:41"><name pos:start="553:38" pos:end="553:41">opts</name></expr></argument>, <argument pos:start="553:44" pos:end="553:58"><expr pos:start="553:44" pos:end="553:58"><literal type="string" pos:start="553:44" pos:end="553:58">"overlap-check"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then/><else pos:start="553:62" pos:end="553:71">: <expr pos:start="553:64" pos:end="553:71"><literal type="string" pos:start="553:64" pos:end="553:71">"cached"</literal></expr></else></ternary></expr>;</expr_stmt>

    <if_stmt pos:start="555:5" pos:end="585:5"><if pos:start="555:5" pos:end="559:5">if <condition pos:start="555:8" pos:end="555:43">(<expr pos:start="555:9" pos:end="555:42"><operator pos:start="555:9" pos:end="555:9">!</operator><call pos:start="555:10" pos:end="555:42"><name pos:start="555:10" pos:end="555:15">strcmp</name><argument_list pos:start="555:16" pos:end="555:42">(<argument pos:start="555:17" pos:end="555:33"><expr pos:start="555:17" pos:end="555:33"><name pos:start="555:17" pos:end="555:33">opt_overlap_check</name></expr></argument>, <argument pos:start="555:36" pos:end="555:41"><expr pos:start="555:36" pos:end="555:41"><literal type="string" pos:start="555:36" pos:end="555:41">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="555:45" pos:end="559:5">{<block_content pos:start="557:9" pos:end="557:35">

        <expr_stmt pos:start="557:9" pos:end="557:35"><expr pos:start="557:9" pos:end="557:34"><name pos:start="557:9" pos:end="557:30">overlap_check_template</name> <operator pos:start="557:32" pos:end="557:32">=</operator> <literal type="number" pos:start="557:34" pos:end="557:34">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="559:7" pos:end="563:5">else if <condition pos:start="559:15" pos:end="559:54">(<expr pos:start="559:16" pos:end="559:53"><operator pos:start="559:16" pos:end="559:16">!</operator><call pos:start="559:17" pos:end="559:53"><name pos:start="559:17" pos:end="559:22">strcmp</name><argument_list pos:start="559:23" pos:end="559:53">(<argument pos:start="559:24" pos:end="559:40"><expr pos:start="559:24" pos:end="559:40"><name pos:start="559:24" pos:end="559:40">opt_overlap_check</name></expr></argument>, <argument pos:start="559:43" pos:end="559:52"><expr pos:start="559:43" pos:end="559:52"><literal type="string" pos:start="559:43" pos:end="559:52">"constant"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="559:56" pos:end="563:5">{<block_content pos:start="561:9" pos:end="561:51">

        <expr_stmt pos:start="561:9" pos:end="561:51"><expr pos:start="561:9" pos:end="561:50"><name pos:start="561:9" pos:end="561:30">overlap_check_template</name> <operator pos:start="561:32" pos:end="561:32">=</operator> <name pos:start="561:34" pos:end="561:50">QCOW2_OL_CONSTANT</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="563:7" pos:end="567:5">else if <condition pos:start="563:15" pos:end="563:52">(<expr pos:start="563:16" pos:end="563:51"><operator pos:start="563:16" pos:end="563:16">!</operator><call pos:start="563:17" pos:end="563:51"><name pos:start="563:17" pos:end="563:22">strcmp</name><argument_list pos:start="563:23" pos:end="563:51">(<argument pos:start="563:24" pos:end="563:40"><expr pos:start="563:24" pos:end="563:40"><name pos:start="563:24" pos:end="563:40">opt_overlap_check</name></expr></argument>, <argument pos:start="563:43" pos:end="563:50"><expr pos:start="563:43" pos:end="563:50"><literal type="string" pos:start="563:43" pos:end="563:50">"cached"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="563:54" pos:end="567:5">{<block_content pos:start="565:9" pos:end="565:49">

        <expr_stmt pos:start="565:9" pos:end="565:49"><expr pos:start="565:9" pos:end="565:48"><name pos:start="565:9" pos:end="565:30">overlap_check_template</name> <operator pos:start="565:32" pos:end="565:32">=</operator> <name pos:start="565:34" pos:end="565:48">QCOW2_OL_CACHED</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="567:7" pos:end="571:5">else if <condition pos:start="567:15" pos:end="567:49">(<expr pos:start="567:16" pos:end="567:48"><operator pos:start="567:16" pos:end="567:16">!</operator><call pos:start="567:17" pos:end="567:48"><name pos:start="567:17" pos:end="567:22">strcmp</name><argument_list pos:start="567:23" pos:end="567:48">(<argument pos:start="567:24" pos:end="567:40"><expr pos:start="567:24" pos:end="567:40"><name pos:start="567:24" pos:end="567:40">opt_overlap_check</name></expr></argument>, <argument pos:start="567:43" pos:end="567:47"><expr pos:start="567:43" pos:end="567:47"><literal type="string" pos:start="567:43" pos:end="567:47">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="567:51" pos:end="571:5">{<block_content pos:start="569:9" pos:end="569:46">

        <expr_stmt pos:start="569:9" pos:end="569:46"><expr pos:start="569:9" pos:end="569:45"><name pos:start="569:9" pos:end="569:30">overlap_check_template</name> <operator pos:start="569:32" pos:end="569:32">=</operator> <name pos:start="569:34" pos:end="569:45">QCOW2_OL_ALL</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="571:7" pos:end="585:5">else <block pos:start="571:12" pos:end="585:5">{<block_content pos:start="573:9" pos:end="583:18">

        <expr_stmt pos:start="573:9" pos:end="577:69"><expr pos:start="573:9" pos:end="577:68"><call pos:start="573:9" pos:end="577:68"><name pos:start="573:9" pos:end="573:18">error_setg</name><argument_list pos:start="573:19" pos:end="577:68">(<argument pos:start="573:20" pos:end="573:23"><expr pos:start="573:20" pos:end="573:23"><name pos:start="573:20" pos:end="573:23">errp</name></expr></argument>, <argument pos:start="573:26" pos:end="577:48"><expr pos:start="573:26" pos:end="577:48"><literal type="string" pos:start="573:26" pos:end="573:67">"Unsupported value '%s' for qcow2 option "</literal>

                   <literal type="string" pos:start="575:20" pos:end="575:75">"'overlap-check'. Allowed are either of the following: "</literal>

                   <literal type="string" pos:start="577:20" pos:end="577:48">"none, constant, cached, all"</literal></expr></argument>, <argument pos:start="577:51" pos:end="577:67"><expr pos:start="577:51" pos:end="577:67"><name pos:start="577:51" pos:end="577:67">opt_overlap_check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="579:9" pos:end="579:28"><expr pos:start="579:9" pos:end="579:27"><call pos:start="579:9" pos:end="579:27"><name pos:start="579:9" pos:end="579:21">qemu_opts_del</name><argument_list pos:start="579:22" pos:end="579:27">(<argument pos:start="579:23" pos:end="579:26"><expr pos:start="579:23" pos:end="579:26"><name pos:start="579:23" pos:end="579:26">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="581:9" pos:end="581:22"><expr pos:start="581:9" pos:end="581:21"><name pos:start="581:9" pos:end="581:11">ret</name> <operator pos:start="581:13" pos:end="581:13">=</operator> <operator pos:start="581:15" pos:end="581:15">-</operator><name pos:start="581:16" pos:end="581:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="583:9" pos:end="583:18">goto <name pos:start="583:14" pos:end="583:17">fail</name>;</goto>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="589:5" pos:end="589:25"><expr pos:start="589:5" pos:end="589:24"><name pos:start="589:5" pos:end="589:20"><name pos:start="589:5" pos:end="589:5">s</name><operator pos:start="589:6" pos:end="589:7">-&gt;</operator><name pos:start="589:8" pos:end="589:20">overlap_check</name></name> <operator pos:start="589:22" pos:end="589:22">=</operator> <literal type="number" pos:start="589:24" pos:end="589:24">0</literal></expr>;</expr_stmt>

    <for pos:start="591:5" pos:end="603:5">for <control pos:start="591:9" pos:end="591:44">(<init pos:start="591:10" pos:end="591:15"><expr pos:start="591:10" pos:end="591:14"><name pos:start="591:10" pos:end="591:10">i</name> <operator pos:start="591:12" pos:end="591:12">=</operator> <literal type="number" pos:start="591:14" pos:end="591:14">0</literal></expr>;</init> <condition pos:start="591:17" pos:end="591:39"><expr pos:start="591:17" pos:end="591:38"><name pos:start="591:17" pos:end="591:17">i</name> <operator pos:start="591:19" pos:end="591:19">&lt;</operator> <name pos:start="591:21" pos:end="591:38">QCOW2_OL_MAX_BITNR</name></expr>;</condition> <incr pos:start="591:41" pos:end="591:43"><expr pos:start="591:41" pos:end="591:43"><name pos:start="591:41" pos:end="591:41">i</name><operator pos:start="591:42" pos:end="591:43">++</operator></expr></incr>)</control> <block pos:start="591:46" pos:end="603:5">{<block_content pos:start="597:9" pos:end="601:70">

        <comment type="block" pos:start="593:9" pos:end="595:63">/* overlap-check defines a template bitmask, but every flag may be

         * overwritten through the associated boolean option */</comment>

        <expr_stmt pos:start="597:9" pos:end="601:70"><expr pos:start="597:9" pos:end="601:69"><name pos:start="597:9" pos:end="597:24"><name pos:start="597:9" pos:end="597:9">s</name><operator pos:start="597:10" pos:end="597:11">-&gt;</operator><name pos:start="597:12" pos:end="597:24">overlap_check</name></name> <operator pos:start="597:26" pos:end="597:27">|=</operator>

            <call pos:start="599:13" pos:end="601:64"><name pos:start="599:13" pos:end="599:29">qemu_opt_get_bool</name><argument_list pos:start="599:30" pos:end="601:64">(<argument pos:start="599:31" pos:end="599:34"><expr pos:start="599:31" pos:end="599:34"><name pos:start="599:31" pos:end="599:34">opts</name></expr></argument>, <argument pos:start="599:37" pos:end="599:64"><expr pos:start="599:37" pos:end="599:64"><name pos:start="599:37" pos:end="599:64"><name pos:start="599:37" pos:end="599:61">overlap_bool_option_names</name><index pos:start="599:62" pos:end="599:64">[<expr pos:start="599:63" pos:end="599:63"><name pos:start="599:63" pos:end="599:63">i</name></expr>]</index></name></expr></argument>,

                              <argument pos:start="601:31" pos:end="601:63"><expr pos:start="601:31" pos:end="601:63"><name pos:start="601:31" pos:end="601:52">overlap_check_template</name> <operator pos:start="601:54" pos:end="601:54">&amp;</operator> <operator pos:start="601:56" pos:end="601:56">(</operator><literal type="number" pos:start="601:57" pos:end="601:57">1</literal> <operator pos:start="601:59" pos:end="601:60">&lt;&lt;</operator> <name pos:start="601:62" pos:end="601:62">i</name><operator pos:start="601:63" pos:end="601:63">)</operator></expr></argument>)</argument_list></call> <operator pos:start="601:66" pos:end="601:67">&lt;&lt;</operator> <name pos:start="601:69" pos:end="601:69">i</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="607:5" pos:end="607:24"><expr pos:start="607:5" pos:end="607:23"><call pos:start="607:5" pos:end="607:23"><name pos:start="607:5" pos:end="607:17">qemu_opts_del</name><argument_list pos:start="607:18" pos:end="607:23">(<argument pos:start="607:19" pos:end="607:22"><expr pos:start="607:19" pos:end="607:22"><name pos:start="607:19" pos:end="607:22">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="611:5" pos:end="626:0"><if pos:start="611:5" pos:end="626:0">if <condition pos:start="611:8" pos:end="611:53">(<expr pos:start="611:9" pos:end="611:52"><name pos:start="611:9" pos:end="611:29"><name pos:start="611:9" pos:end="611:9">s</name><operator pos:start="611:10" pos:end="611:11">-&gt;</operator><name pos:start="611:12" pos:end="611:29">use_lazy_refcounts</name></name> <operator pos:start="611:31" pos:end="611:32">&amp;&amp;</operator> <name pos:start="611:34" pos:end="611:48"><name pos:start="611:34" pos:end="611:34">s</name><operator pos:start="611:35" pos:end="611:36">-&gt;</operator><name pos:start="611:37" pos:end="611:48">qcow_version</name></name> <operator pos:start="611:50" pos:end="611:50">&lt;</operator> <literal type="number" pos:start="611:52" pos:end="611:52">3</literal></expr>)</condition> <block pos:start="611:55" pos:end="626:0">{<block_content pos:start="613:9" pos:end="619:18">

        <expr_stmt pos:start="613:9" pos:end="615:51"><expr pos:start="613:9" pos:end="615:50"><call pos:start="613:9" pos:end="615:50"><name pos:start="613:9" pos:end="613:18">error_setg</name><argument_list pos:start="613:19" pos:end="615:50">(<argument pos:start="613:20" pos:end="613:23"><expr pos:start="613:20" pos:end="613:23"><name pos:start="613:20" pos:end="613:23">errp</name></expr></argument>, <argument pos:start="613:26" pos:end="615:49"><expr pos:start="613:26" pos:end="615:49"><literal type="string" pos:start="613:26" pos:end="613:78">"Lazy refcounts require a qcow2 image with at least "</literal>

                   <literal type="string" pos:start="615:20" pos:end="615:49">"qemu 1.1 compatibility level"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="617:9" pos:end="617:22"><expr pos:start="617:9" pos:end="617:21"><name pos:start="617:9" pos:end="617:11">ret</name> <operator pos:start="617:13" pos:end="617:13">=</operator> <operator pos:start="617:15" pos:end="617:15">-</operator><name pos:start="617:16" pos:end="617:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="619:9" pos:end="619:18">goto <name pos:start="619:14" pos:end="619:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="625:1" pos:end="625:18">#<cpp:directive pos:start="625:2" pos:end="625:6">ifdef</cpp:directive> <name pos:start="625:8" pos:end="625:18">DEBUG_ALLOC</name></cpp:ifdef>

    <block pos:start="627:5" pos:end="636:0">{<block_content pos:start="629:9" pos:end="631:46">

        <decl_stmt pos:start="629:9" pos:end="629:37"><decl pos:start="629:9" pos:end="629:36"><type pos:start="629:9" pos:end="629:23"><name pos:start="629:9" pos:end="629:23">BdrvCheckResult</name></type> <name pos:start="629:25" pos:end="629:30">result</name> <init pos:start="629:32" pos:end="629:36">= <expr pos:start="629:34" pos:end="629:36"><block pos:start="629:34" pos:end="629:36">{<expr pos:start="629:35" pos:end="629:35"><literal type="number" pos:start="629:35" pos:end="629:35">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="631:9" pos:end="631:46"><expr pos:start="631:9" pos:end="631:45"><call pos:start="631:9" pos:end="631:45"><name pos:start="631:9" pos:end="631:29">qcow2_check_refcounts</name><argument_list pos:start="631:30" pos:end="631:45">(<argument pos:start="631:31" pos:end="631:32"><expr pos:start="631:31" pos:end="631:32"><name pos:start="631:31" pos:end="631:32">bs</name></expr></argument>, <argument pos:start="631:35" pos:end="631:41"><expr pos:start="631:35" pos:end="631:41"><operator pos:start="631:35" pos:end="631:35">&amp;</operator><name pos:start="631:36" pos:end="631:41">result</name></expr></argument>, <argument pos:start="631:44" pos:end="631:44"><expr pos:start="631:44" pos:end="631:44"><literal type="number" pos:start="631:44" pos:end="631:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

<cpp:endif pos:start="635:1" pos:end="635:6">#<cpp:directive pos:start="635:2" pos:end="635:6">endif</cpp:directive></cpp:endif>

    <return pos:start="637:5" pos:end="637:15">return <expr pos:start="637:12" pos:end="637:14"><name pos:start="637:12" pos:end="637:14">ret</name></expr>;</return>



 <label pos:start="641:2" pos:end="641:6"><name pos:start="641:2" pos:end="641:5">fail</name>:</label>

    <expr_stmt pos:start="643:5" pos:end="643:37"><expr pos:start="643:5" pos:end="643:36"><call pos:start="643:5" pos:end="643:36"><name pos:start="643:5" pos:end="643:10">g_free</name><argument_list pos:start="643:11" pos:end="643:36">(<argument pos:start="643:12" pos:end="643:35"><expr pos:start="643:12" pos:end="643:35"><name pos:start="643:12" pos:end="643:35"><name pos:start="643:12" pos:end="643:12">s</name><operator pos:start="643:13" pos:end="643:14">-&gt;</operator><name pos:start="643:15" pos:end="643:35">unknown_header_fields</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="645:5" pos:end="645:35"><expr pos:start="645:5" pos:end="645:34"><call pos:start="645:5" pos:end="645:34"><name pos:start="645:5" pos:end="645:30">cleanup_unknown_header_ext</name><argument_list pos:start="645:31" pos:end="645:34">(<argument pos:start="645:32" pos:end="645:33"><expr pos:start="645:32" pos:end="645:33"><name pos:start="645:32" pos:end="645:33">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="647:5" pos:end="647:29"><expr pos:start="647:5" pos:end="647:28"><call pos:start="647:5" pos:end="647:28"><name pos:start="647:5" pos:end="647:24">qcow2_free_snapshots</name><argument_list pos:start="647:25" pos:end="647:28">(<argument pos:start="647:26" pos:end="647:27"><expr pos:start="647:26" pos:end="647:27"><name pos:start="647:26" pos:end="647:27">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="649:5" pos:end="649:29"><expr pos:start="649:5" pos:end="649:28"><call pos:start="649:5" pos:end="649:28"><name pos:start="649:5" pos:end="649:24">qcow2_refcount_close</name><argument_list pos:start="649:25" pos:end="649:28">(<argument pos:start="649:26" pos:end="649:27"><expr pos:start="649:26" pos:end="649:27"><name pos:start="649:26" pos:end="649:27">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="651:5" pos:end="651:24"><expr pos:start="651:5" pos:end="651:23"><call pos:start="651:5" pos:end="651:23"><name pos:start="651:5" pos:end="651:10">g_free</name><argument_list pos:start="651:11" pos:end="651:23">(<argument pos:start="651:12" pos:end="651:22"><expr pos:start="651:12" pos:end="651:22"><name pos:start="651:12" pos:end="651:22"><name pos:start="651:12" pos:end="651:12">s</name><operator pos:start="651:13" pos:end="651:14">-&gt;</operator><name pos:start="651:15" pos:end="651:22">l1_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="653:5" pos:end="653:66">/* else pre-write overlap checks in cache_destroy may crash */</comment>

    <expr_stmt pos:start="655:5" pos:end="655:23"><expr pos:start="655:5" pos:end="655:22"><name pos:start="655:5" pos:end="655:15"><name pos:start="655:5" pos:end="655:5">s</name><operator pos:start="655:6" pos:end="655:7">-&gt;</operator><name pos:start="655:8" pos:end="655:15">l1_table</name></name> <operator pos:start="655:17" pos:end="655:17">=</operator> <name pos:start="655:19" pos:end="655:22">NULL</name></expr>;</expr_stmt>

    <if_stmt pos:start="657:5" pos:end="661:5"><if pos:start="657:5" pos:end="661:5">if <condition pos:start="657:8" pos:end="657:26">(<expr pos:start="657:9" pos:end="657:25"><name pos:start="657:9" pos:end="657:25"><name pos:start="657:9" pos:end="657:9">s</name><operator pos:start="657:10" pos:end="657:11">-&gt;</operator><name pos:start="657:12" pos:end="657:25">l2_table_cache</name></name></expr>)</condition> <block pos:start="657:28" pos:end="661:5">{<block_content pos:start="659:9" pos:end="659:51">

        <expr_stmt pos:start="659:9" pos:end="659:51"><expr pos:start="659:9" pos:end="659:50"><call pos:start="659:9" pos:end="659:50"><name pos:start="659:9" pos:end="659:27">qcow2_cache_destroy</name><argument_list pos:start="659:28" pos:end="659:50">(<argument pos:start="659:29" pos:end="659:30"><expr pos:start="659:29" pos:end="659:30"><name pos:start="659:29" pos:end="659:30">bs</name></expr></argument>, <argument pos:start="659:33" pos:end="659:49"><expr pos:start="659:33" pos:end="659:49"><name pos:start="659:33" pos:end="659:49"><name pos:start="659:33" pos:end="659:33">s</name><operator pos:start="659:34" pos:end="659:35">-&gt;</operator><name pos:start="659:36" pos:end="659:49">l2_table_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="663:5" pos:end="667:5"><if pos:start="663:5" pos:end="667:5">if <condition pos:start="663:8" pos:end="663:32">(<expr pos:start="663:9" pos:end="663:31"><name pos:start="663:9" pos:end="663:31"><name pos:start="663:9" pos:end="663:9">s</name><operator pos:start="663:10" pos:end="663:11">-&gt;</operator><name pos:start="663:12" pos:end="663:31">refcount_block_cache</name></name></expr>)</condition> <block pos:start="663:34" pos:end="667:5">{<block_content pos:start="665:9" pos:end="665:57">

        <expr_stmt pos:start="665:9" pos:end="665:57"><expr pos:start="665:9" pos:end="665:56"><call pos:start="665:9" pos:end="665:56"><name pos:start="665:9" pos:end="665:27">qcow2_cache_destroy</name><argument_list pos:start="665:28" pos:end="665:56">(<argument pos:start="665:29" pos:end="665:30"><expr pos:start="665:29" pos:end="665:30"><name pos:start="665:29" pos:end="665:30">bs</name></expr></argument>, <argument pos:start="665:33" pos:end="665:55"><expr pos:start="665:33" pos:end="665:55"><name pos:start="665:33" pos:end="665:55"><name pos:start="665:33" pos:end="665:33">s</name><operator pos:start="665:34" pos:end="665:35">-&gt;</operator><name pos:start="665:36" pos:end="665:55">refcount_block_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="669:5" pos:end="669:29"><expr pos:start="669:5" pos:end="669:28"><call pos:start="669:5" pos:end="669:28"><name pos:start="669:5" pos:end="669:10">g_free</name><argument_list pos:start="669:11" pos:end="669:28">(<argument pos:start="669:12" pos:end="669:27"><expr pos:start="669:12" pos:end="669:27"><name pos:start="669:12" pos:end="669:27"><name pos:start="669:12" pos:end="669:12">s</name><operator pos:start="669:13" pos:end="669:14">-&gt;</operator><name pos:start="669:15" pos:end="669:27">cluster_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="671:5" pos:end="671:32"><expr pos:start="671:5" pos:end="671:31"><call pos:start="671:5" pos:end="671:31"><name pos:start="671:5" pos:end="671:14">qemu_vfree</name><argument_list pos:start="671:15" pos:end="671:31">(<argument pos:start="671:16" pos:end="671:30"><expr pos:start="671:16" pos:end="671:30"><name pos:start="671:16" pos:end="671:30"><name pos:start="671:16" pos:end="671:16">s</name><operator pos:start="671:17" pos:end="671:18">-&gt;</operator><name pos:start="671:19" pos:end="671:30">cluster_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="673:5" pos:end="673:15">return <expr pos:start="673:12" pos:end="673:14"><name pos:start="673:12" pos:end="673:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
