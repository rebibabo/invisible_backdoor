<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8569.c" pos:tabs="8"><function pos:start="1:1" pos:end="61:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">scsi_handle_rw_error</name><parameter_list pos:start="1:32" pos:end="1:58">(<parameter pos:start="1:33" pos:end="1:46"><decl pos:start="1:33" pos:end="1:46"><type pos:start="1:33" pos:end="1:46"><name pos:start="1:33" pos:end="1:43">SCSIDiskReq</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">r</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:57"><decl pos:start="1:49" pos:end="1:57"><type pos:start="1:49" pos:end="1:57"><name pos:start="1:49" pos:end="1:51">int</name></type> <name pos:start="1:53" pos:end="1:57">error</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="61:1">{<block_content pos:start="5:5" pos:end="59:47">

    <decl_stmt pos:start="5:5" pos:end="5:59"><decl pos:start="5:5" pos:end="5:58"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">bool</name></type> <name pos:start="5:10" pos:end="5:16">is_read</name> <init pos:start="5:18" pos:end="5:58">= <expr pos:start="5:20" pos:end="5:58"><operator pos:start="5:20" pos:end="5:20">(</operator><name pos:start="5:21" pos:end="5:35"><name pos:start="5:21" pos:end="5:21">r</name><operator pos:start="5:22" pos:end="5:23">-&gt;</operator><name pos:start="5:24" pos:end="5:26">req</name><operator pos:start="5:27" pos:end="5:27">.</operator><name pos:start="5:28" pos:end="5:30">cmd</name><operator pos:start="5:31" pos:end="5:31">.</operator><name pos:start="5:32" pos:end="5:35">xfer</name></name> <operator pos:start="5:37" pos:end="5:38">==</operator> <name pos:start="5:40" pos:end="5:57">SCSI_XFER_FROM_DEV</name><operator pos:start="5:58" pos:end="5:58">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:66"><decl pos:start="7:5" pos:end="7:65"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">SCSIDiskState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:65">= <expr pos:start="7:24" pos:end="7:65"><call pos:start="7:24" pos:end="7:65"><name pos:start="7:24" pos:end="7:32">DO_UPCAST</name><argument_list pos:start="7:33" pos:end="7:65">(<argument pos:start="7:34" pos:end="7:46"><expr pos:start="7:34" pos:end="7:46"><name pos:start="7:34" pos:end="7:46">SCSIDiskState</name></expr></argument>, <argument pos:start="7:49" pos:end="7:52"><expr pos:start="7:49" pos:end="7:52"><name pos:start="7:49" pos:end="7:52">qdev</name></expr></argument>, <argument pos:start="7:55" pos:end="7:64"><expr pos:start="7:55" pos:end="7:64"><name pos:start="7:55" pos:end="7:64"><name pos:start="7:55" pos:end="7:55">r</name><operator pos:start="7:56" pos:end="7:57">-&gt;</operator><name pos:start="7:58" pos:end="7:60">req</name><operator pos:start="7:61" pos:end="7:61">.</operator><name pos:start="7:62" pos:end="7:64">dev</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:85"><decl pos:start="9:5" pos:end="9:84"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:20">BlockErrorAction</name></type> <name pos:start="9:22" pos:end="9:27">action</name> <init pos:start="9:29" pos:end="9:84">= <expr pos:start="9:31" pos:end="9:84"><call pos:start="9:31" pos:end="9:84"><name pos:start="9:31" pos:end="9:51">bdrv_get_error_action</name><argument_list pos:start="9:52" pos:end="9:84">(<argument pos:start="9:53" pos:end="9:67"><expr pos:start="9:53" pos:end="9:67"><name pos:start="9:53" pos:end="9:67"><name pos:start="9:53" pos:end="9:53">s</name><operator pos:start="9:54" pos:end="9:55">-&gt;</operator><name pos:start="9:56" pos:end="9:59">qdev</name><operator pos:start="9:60" pos:end="9:60">.</operator><name pos:start="9:61" pos:end="9:64">conf</name><operator pos:start="9:65" pos:end="9:65">.</operator><name pos:start="9:66" pos:end="9:67">bs</name></name></expr></argument>, <argument pos:start="9:70" pos:end="9:76"><expr pos:start="9:70" pos:end="9:76"><name pos:start="9:70" pos:end="9:76">is_read</name></expr></argument>, <argument pos:start="9:79" pos:end="9:83"><expr pos:start="9:79" pos:end="9:83"><name pos:start="9:79" pos:end="9:83">error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="49:5"><if pos:start="13:5" pos:end="49:5">if <condition pos:start="13:8" pos:end="13:44">(<expr pos:start="13:9" pos:end="13:43"><name pos:start="13:9" pos:end="13:14">action</name> <operator pos:start="13:16" pos:end="13:17">==</operator> <name pos:start="13:19" pos:end="13:43">BLOCK_ERROR_ACTION_REPORT</name></expr>)</condition> <block pos:start="13:46" pos:end="49:5">{<block_content pos:start="15:9" pos:end="47:9">

        <switch pos:start="15:9" pos:end="47:9">switch <condition pos:start="15:16" pos:end="15:22">(<expr pos:start="15:17" pos:end="15:21"><name pos:start="15:17" pos:end="15:21">error</name></expr>)</condition> <block pos:start="15:24" pos:end="47:9">{<block_content pos:start="17:9" pos:end="45:18">

        <case pos:start="17:9" pos:end="17:23">case <expr pos:start="17:14" pos:end="17:22"><name pos:start="17:14" pos:end="17:22">ENOMEDIUM</name></expr>:</case>

            <expr_stmt pos:start="19:13" pos:end="19:59"><expr pos:start="19:13" pos:end="19:58"><call pos:start="19:13" pos:end="19:58"><name pos:start="19:13" pos:end="19:32">scsi_check_condition</name><argument_list pos:start="19:33" pos:end="19:58">(<argument pos:start="19:34" pos:end="19:34"><expr pos:start="19:34" pos:end="19:34"><name pos:start="19:34" pos:end="19:34">r</name></expr></argument>, <argument pos:start="19:37" pos:end="19:57"><expr pos:start="19:37" pos:end="19:57"><call pos:start="19:37" pos:end="19:57"><name pos:start="19:37" pos:end="19:46">SENSE_CODE</name><argument_list pos:start="19:47" pos:end="19:57">(<argument pos:start="19:48" pos:end="19:56"><expr pos:start="19:48" pos:end="19:56"><name pos:start="19:48" pos:end="19:56">NO_MEDIUM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="21:13" pos:end="21:18">break;</break>

        <case pos:start="23:9" pos:end="23:20">case <expr pos:start="23:14" pos:end="23:19"><name pos:start="23:14" pos:end="23:19">ENOMEM</name></expr>:</case>

            <expr_stmt pos:start="25:13" pos:end="25:64"><expr pos:start="25:13" pos:end="25:63"><call pos:start="25:13" pos:end="25:63"><name pos:start="25:13" pos:end="25:32">scsi_check_condition</name><argument_list pos:start="25:33" pos:end="25:63">(<argument pos:start="25:34" pos:end="25:34"><expr pos:start="25:34" pos:end="25:34"><name pos:start="25:34" pos:end="25:34">r</name></expr></argument>, <argument pos:start="25:37" pos:end="25:62"><expr pos:start="25:37" pos:end="25:62"><call pos:start="25:37" pos:end="25:62"><name pos:start="25:37" pos:end="25:46">SENSE_CODE</name><argument_list pos:start="25:47" pos:end="25:62">(<argument pos:start="25:48" pos:end="25:61"><expr pos:start="25:48" pos:end="25:61"><name pos:start="25:48" pos:end="25:61">TARGET_FAILURE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="27:13" pos:end="27:18">break;</break>

        <case pos:start="29:9" pos:end="29:20">case <expr pos:start="29:14" pos:end="29:19"><name pos:start="29:14" pos:end="29:19">EINVAL</name></expr>:</case>

            <expr_stmt pos:start="31:13" pos:end="31:63"><expr pos:start="31:13" pos:end="31:62"><call pos:start="31:13" pos:end="31:62"><name pos:start="31:13" pos:end="31:32">scsi_check_condition</name><argument_list pos:start="31:33" pos:end="31:62">(<argument pos:start="31:34" pos:end="31:34"><expr pos:start="31:34" pos:end="31:34"><name pos:start="31:34" pos:end="31:34">r</name></expr></argument>, <argument pos:start="31:37" pos:end="31:61"><expr pos:start="31:37" pos:end="31:61"><call pos:start="31:37" pos:end="31:61"><name pos:start="31:37" pos:end="31:46">SENSE_CODE</name><argument_list pos:start="31:47" pos:end="31:61">(<argument pos:start="31:48" pos:end="31:60"><expr pos:start="31:48" pos:end="31:60"><name pos:start="31:48" pos:end="31:60">INVALID_FIELD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="33:13" pos:end="33:18">break;</break>

        <case pos:start="35:9" pos:end="35:20">case <expr pos:start="35:14" pos:end="35:19"><name pos:start="35:14" pos:end="35:19">ENOSPC</name></expr>:</case>

            <expr_stmt pos:start="37:13" pos:end="37:68"><expr pos:start="37:13" pos:end="37:67"><call pos:start="37:13" pos:end="37:67"><name pos:start="37:13" pos:end="37:32">scsi_check_condition</name><argument_list pos:start="37:33" pos:end="37:67">(<argument pos:start="37:34" pos:end="37:34"><expr pos:start="37:34" pos:end="37:34"><name pos:start="37:34" pos:end="37:34">r</name></expr></argument>, <argument pos:start="37:37" pos:end="37:66"><expr pos:start="37:37" pos:end="37:66"><call pos:start="37:37" pos:end="37:66"><name pos:start="37:37" pos:end="37:46">SENSE_CODE</name><argument_list pos:start="37:47" pos:end="37:66">(<argument pos:start="37:48" pos:end="37:65"><expr pos:start="37:48" pos:end="37:65"><name pos:start="37:48" pos:end="37:65">SPACE_ALLOC_FAILED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="39:13" pos:end="39:18">break;</break>

        <default pos:start="41:9" pos:end="41:16">default:</default>

            <expr_stmt pos:start="43:13" pos:end="43:58"><expr pos:start="43:13" pos:end="43:57"><call pos:start="43:13" pos:end="43:57"><name pos:start="43:13" pos:end="43:32">scsi_check_condition</name><argument_list pos:start="43:33" pos:end="43:57">(<argument pos:start="43:34" pos:end="43:34"><expr pos:start="43:34" pos:end="43:34"><name pos:start="43:34" pos:end="43:34">r</name></expr></argument>, <argument pos:start="43:37" pos:end="43:56"><expr pos:start="43:37" pos:end="43:56"><call pos:start="43:37" pos:end="43:56"><name pos:start="43:37" pos:end="43:46">SENSE_CODE</name><argument_list pos:start="43:47" pos:end="43:56">(<argument pos:start="43:48" pos:end="43:55"><expr pos:start="43:48" pos:end="43:55"><name pos:start="43:48" pos:end="43:55">IO_ERROR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="45:13" pos:end="45:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:63"><expr pos:start="51:5" pos:end="51:62"><call pos:start="51:5" pos:end="51:62"><name pos:start="51:5" pos:end="51:21">bdrv_error_action</name><argument_list pos:start="51:22" pos:end="51:62">(<argument pos:start="51:23" pos:end="51:37"><expr pos:start="51:23" pos:end="51:37"><name pos:start="51:23" pos:end="51:37"><name pos:start="51:23" pos:end="51:23">s</name><operator pos:start="51:24" pos:end="51:25">-&gt;</operator><name pos:start="51:26" pos:end="51:29">qdev</name><operator pos:start="51:30" pos:end="51:30">.</operator><name pos:start="51:31" pos:end="51:34">conf</name><operator pos:start="51:35" pos:end="51:35">.</operator><name pos:start="51:36" pos:end="51:37">bs</name></name></expr></argument>, <argument pos:start="51:40" pos:end="51:45"><expr pos:start="51:40" pos:end="51:45"><name pos:start="51:40" pos:end="51:45">action</name></expr></argument>, <argument pos:start="51:48" pos:end="51:54"><expr pos:start="51:48" pos:end="51:54"><name pos:start="51:48" pos:end="51:54">is_read</name></expr></argument>, <argument pos:start="51:57" pos:end="51:61"><expr pos:start="51:57" pos:end="51:61"><name pos:start="51:57" pos:end="51:61">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="57:5"><if pos:start="53:5" pos:end="57:5">if <condition pos:start="53:8" pos:end="53:42">(<expr pos:start="53:9" pos:end="53:41"><name pos:start="53:9" pos:end="53:14">action</name> <operator pos:start="53:16" pos:end="53:17">==</operator> <name pos:start="53:19" pos:end="53:41">BLOCK_ERROR_ACTION_STOP</name></expr>)</condition> <block pos:start="53:44" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:32">

        <expr_stmt pos:start="55:9" pos:end="55:32"><expr pos:start="55:9" pos:end="55:31"><call pos:start="55:9" pos:end="55:31"><name pos:start="55:9" pos:end="55:22">scsi_req_retry</name><argument_list pos:start="55:23" pos:end="55:31">(<argument pos:start="55:24" pos:end="55:30"><expr pos:start="55:24" pos:end="55:30"><operator pos:start="55:24" pos:end="55:24">&amp;</operator><name pos:start="55:25" pos:end="55:30"><name pos:start="55:25" pos:end="55:25">r</name><operator pos:start="55:26" pos:end="55:27">-&gt;</operator><name pos:start="55:28" pos:end="55:30">req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="59:5" pos:end="59:47">return <expr pos:start="59:12" pos:end="59:46"><name pos:start="59:12" pos:end="59:17">action</name> <operator pos:start="59:19" pos:end="59:20">!=</operator> <name pos:start="59:22" pos:end="59:46">BLOCK_ERROR_ACTION_IGNORE</name></expr>;</return>

</block_content>}</block></function>
</unit>
