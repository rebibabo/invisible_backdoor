<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11174.c" pos:tabs="8"><function pos:start="1:1" pos:end="195:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:37">internal_snapshot_prepare</name><parameter_list pos:start="1:38" pos:end="3:51">(<parameter pos:start="1:39" pos:end="1:65"><decl pos:start="1:39" pos:end="1:65"><type pos:start="1:39" pos:end="1:65"><name pos:start="1:39" pos:end="1:57">BlkTransactionState</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:65">common</name></decl></parameter>,

                                      <parameter pos:start="3:39" pos:end="3:50"><decl pos:start="3:39" pos:end="3:50"><type pos:start="3:39" pos:end="3:50"><name pos:start="3:39" pos:end="3:43">Error</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier><modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:50">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="195:1">{<block_content pos:start="7:5" pos:end="193:26">

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:9">Error</name> <modifier pos:start="7:11" pos:end="7:11">*</modifier></type><name pos:start="7:12" pos:end="7:20">local_err</name> <init pos:start="7:22" pos:end="7:27">= <expr pos:start="7:24" pos:end="7:27"><name pos:start="7:24" pos:end="7:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:22">device</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:20">name</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">BlockBackend</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:21">blk</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:20">BlockDriverState</name> <modifier pos:start="15:22" pos:end="15:22">*</modifier></type><name pos:start="15:23" pos:end="15:24">bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:33"><decl pos:start="17:5" pos:end="17:27"><type pos:start="17:5" pos:end="17:20"><name pos:start="17:5" pos:end="17:20">QEMUSnapshotInfo</name></type> <name pos:start="17:22" pos:end="17:27">old_sn</name></decl>, <decl pos:start="17:30" pos:end="17:32"><type ref="prev" pos:start="17:5" pos:end="17:20"><modifier pos:start="17:30" pos:end="17:30">*</modifier></type><name pos:start="17:31" pos:end="17:32">sn</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:13"><decl pos:start="19:5" pos:end="19:12"><type pos:start="19:5" pos:end="19:8"><name pos:start="19:5" pos:end="19:8">bool</name></type> <name pos:start="19:10" pos:end="19:12">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:20"><decl pos:start="21:5" pos:end="21:19"><type pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:16">qemu_timeval</name></type> <name pos:start="21:18" pos:end="21:19">tv</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:39"><decl pos:start="23:5" pos:end="23:38"><type pos:start="23:5" pos:end="23:30"><name pos:start="23:5" pos:end="23:28">BlockdevSnapshotInternal</name> <modifier pos:start="23:30" pos:end="23:30">*</modifier></type><name pos:start="23:31" pos:end="23:38">internal</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:33"><decl pos:start="25:5" pos:end="25:32"><type pos:start="25:5" pos:end="25:27"><name pos:start="25:5" pos:end="25:25">InternalSnapshotState</name> <modifier pos:start="25:27" pos:end="25:27">*</modifier></type><name pos:start="25:28" pos:end="25:32">state</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:13"><decl pos:start="27:5" pos:end="27:12"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:12">ret1</name></decl>;</decl_stmt>



    <expr_stmt pos:start="31:5" pos:end="33:70"><expr pos:start="31:5" pos:end="33:69"><call pos:start="31:5" pos:end="33:69"><name pos:start="31:5" pos:end="31:12">g_assert</name><argument_list pos:start="31:13" pos:end="33:69">(<argument pos:start="31:14" pos:end="33:68"><expr pos:start="31:14" pos:end="33:68"><name pos:start="31:14" pos:end="31:33"><name pos:start="31:14" pos:end="31:19">common</name><operator pos:start="31:20" pos:end="31:21">-&gt;</operator><name pos:start="31:22" pos:end="31:27">action</name><operator pos:start="31:28" pos:end="31:29">-&gt;</operator><name pos:start="31:30" pos:end="31:33">kind</name></name> <operator pos:start="31:35" pos:end="31:36">==</operator>

             <name pos:start="33:14" pos:end="33:68">TRANSACTION_ACTION_KIND_BLOCKDEV_SNAPSHOT_INTERNAL_SYNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:63"><expr pos:start="35:5" pos:end="35:62"><name pos:start="35:5" pos:end="35:12">internal</name> <operator pos:start="35:14" pos:end="35:14">=</operator> <name pos:start="35:16" pos:end="35:62"><name pos:start="35:16" pos:end="35:21">common</name><operator pos:start="35:22" pos:end="35:23">-&gt;</operator><name pos:start="35:24" pos:end="35:29">action</name><operator pos:start="35:30" pos:end="35:31">-&gt;</operator><name pos:start="35:32" pos:end="35:62">blockdev_snapshot_internal_sync</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:61"><expr pos:start="37:5" pos:end="37:60"><name pos:start="37:5" pos:end="37:9">state</name> <operator pos:start="37:11" pos:end="37:11">=</operator> <call pos:start="37:13" pos:end="37:60"><name pos:start="37:13" pos:end="37:21">DO_UPCAST</name><argument_list pos:start="37:22" pos:end="37:60">(<argument pos:start="37:23" pos:end="37:43"><expr pos:start="37:23" pos:end="37:43"><name pos:start="37:23" pos:end="37:43">InternalSnapshotState</name></expr></argument>, <argument pos:start="37:46" pos:end="37:51"><expr pos:start="37:46" pos:end="37:51"><name pos:start="37:46" pos:end="37:51">common</name></expr></argument>, <argument pos:start="37:54" pos:end="37:59"><expr pos:start="37:54" pos:end="37:59"><name pos:start="37:54" pos:end="37:59">common</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:24">/* 1. parse input */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:30"><expr pos:start="43:5" pos:end="43:29"><name pos:start="43:5" pos:end="43:10">device</name> <operator pos:start="43:12" pos:end="43:12">=</operator> <name pos:start="43:14" pos:end="43:29"><name pos:start="43:14" pos:end="43:21">internal</name><operator pos:start="43:22" pos:end="43:23">-&gt;</operator><name pos:start="43:24" pos:end="43:29">device</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:26"><expr pos:start="45:5" pos:end="45:25"><name pos:start="45:5" pos:end="45:8">name</name> <operator pos:start="45:10" pos:end="45:10">=</operator> <name pos:start="45:12" pos:end="45:25"><name pos:start="45:12" pos:end="45:19">internal</name><operator pos:start="45:20" pos:end="45:21">-&gt;</operator><name pos:start="45:22" pos:end="45:25">name</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:33">/* 2. check for validation */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:30"><expr pos:start="51:5" pos:end="51:29"><name pos:start="51:5" pos:end="51:7">blk</name> <operator pos:start="51:9" pos:end="51:9">=</operator> <call pos:start="51:11" pos:end="51:29"><name pos:start="51:11" pos:end="51:21">blk_by_name</name><argument_list pos:start="51:22" pos:end="51:29">(<argument pos:start="51:23" pos:end="51:28"><expr pos:start="51:23" pos:end="51:28"><name pos:start="51:23" pos:end="51:28">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="61:5"><if pos:start="53:5" pos:end="61:5">if <condition pos:start="53:8" pos:end="53:13">(<expr pos:start="53:9" pos:end="53:12"><operator pos:start="53:9" pos:end="53:9">!</operator><name pos:start="53:10" pos:end="53:12">blk</name></expr>)</condition> <block pos:start="53:15" pos:end="61:5">{<block_content pos:start="55:9" pos:end="59:15">

        <expr_stmt pos:start="55:9" pos:end="57:51"><expr pos:start="55:9" pos:end="57:50"><call pos:start="55:9" pos:end="57:50"><name pos:start="55:9" pos:end="55:17">error_set</name><argument_list pos:start="55:18" pos:end="57:50">(<argument pos:start="55:19" pos:end="55:22"><expr pos:start="55:19" pos:end="55:22"><name pos:start="55:19" pos:end="55:22">errp</name></expr></argument>, <argument pos:start="55:25" pos:end="55:52"><expr pos:start="55:25" pos:end="55:52"><name pos:start="55:25" pos:end="55:52">ERROR_CLASS_DEVICE_NOT_FOUND</name></expr></argument>,

                  <argument pos:start="57:19" pos:end="57:41"><expr pos:start="57:19" pos:end="57:41"><literal type="string" pos:start="57:19" pos:end="57:41">"Device '%s' not found"</literal></expr></argument>, <argument pos:start="57:44" pos:end="57:49"><expr pos:start="57:44" pos:end="57:49"><name pos:start="57:44" pos:end="57:49">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="65:5" pos:end="65:44">/* AioContext is released in .clean() */</comment>

    <expr_stmt pos:start="67:5" pos:end="67:50"><expr pos:start="67:5" pos:end="67:49"><name pos:start="67:5" pos:end="67:22"><name pos:start="67:5" pos:end="67:9">state</name><operator pos:start="67:10" pos:end="67:11">-&gt;</operator><name pos:start="67:12" pos:end="67:22">aio_context</name></name> <operator pos:start="67:24" pos:end="67:24">=</operator> <call pos:start="67:26" pos:end="67:49"><name pos:start="67:26" pos:end="67:44">blk_get_aio_context</name><argument_list pos:start="67:45" pos:end="67:49">(<argument pos:start="67:46" pos:end="67:48"><expr pos:start="67:46" pos:end="67:48"><name pos:start="67:46" pos:end="67:48">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:44"><expr pos:start="69:5" pos:end="69:43"><call pos:start="69:5" pos:end="69:43"><name pos:start="69:5" pos:end="69:23">aio_context_acquire</name><argument_list pos:start="69:24" pos:end="69:43">(<argument pos:start="69:25" pos:end="69:42"><expr pos:start="69:25" pos:end="69:42"><name pos:start="69:25" pos:end="69:42"><name pos:start="69:25" pos:end="69:29">state</name><operator pos:start="69:30" pos:end="69:31">-&gt;</operator><name pos:start="69:32" pos:end="69:42">aio_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="73:5" pos:end="79:5"><if pos:start="73:5" pos:end="79:5">if <condition pos:start="73:8" pos:end="73:31">(<expr pos:start="73:9" pos:end="73:30"><operator pos:start="73:9" pos:end="73:9">!</operator><call pos:start="73:10" pos:end="73:30"><name pos:start="73:10" pos:end="73:25">blk_is_available</name><argument_list pos:start="73:26" pos:end="73:30">(<argument pos:start="73:27" pos:end="73:29"><expr pos:start="73:27" pos:end="73:29"><name pos:start="73:27" pos:end="73:29">blk</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="73:33" pos:end="79:5">{<block_content pos:start="75:9" pos:end="77:15">

        <expr_stmt pos:start="75:9" pos:end="75:60"><expr pos:start="75:9" pos:end="75:59"><call pos:start="75:9" pos:end="75:59"><name pos:start="75:9" pos:end="75:18">error_setg</name><argument_list pos:start="75:19" pos:end="75:59">(<argument pos:start="75:20" pos:end="75:23"><expr pos:start="75:20" pos:end="75:23"><name pos:start="75:20" pos:end="75:23">errp</name></expr></argument>, <argument pos:start="75:26" pos:end="75:50"><expr pos:start="75:26" pos:end="75:50"><name pos:start="75:26" pos:end="75:50">QERR_DEVICE_HAS_NO_MEDIUM</name></expr></argument>, <argument pos:start="75:53" pos:end="75:58"><expr pos:start="75:53" pos:end="75:58"><name pos:start="75:53" pos:end="75:58">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="77:9" pos:end="77:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:21"><expr pos:start="81:5" pos:end="81:20"><name pos:start="81:5" pos:end="81:6">bs</name> <operator pos:start="81:8" pos:end="81:8">=</operator> <call pos:start="81:10" pos:end="81:20"><name pos:start="81:10" pos:end="81:15">blk_bs</name><argument_list pos:start="81:16" pos:end="81:20">(<argument pos:start="81:17" pos:end="81:19"><expr pos:start="81:17" pos:end="81:19"><name pos:start="81:17" pos:end="81:19">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:19"><expr pos:start="85:5" pos:end="85:18"><name pos:start="85:5" pos:end="85:13"><name pos:start="85:5" pos:end="85:9">state</name><operator pos:start="85:10" pos:end="85:11">-&gt;</operator><name pos:start="85:12" pos:end="85:13">bs</name></name> <operator pos:start="85:15" pos:end="85:15">=</operator> <name pos:start="85:17" pos:end="85:18">bs</name></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:27"><expr pos:start="87:5" pos:end="87:26"><call pos:start="87:5" pos:end="87:26"><name pos:start="87:5" pos:end="87:22">bdrv_drained_begin</name><argument_list pos:start="87:23" pos:end="87:26">(<argument pos:start="87:24" pos:end="87:25"><expr pos:start="87:24" pos:end="87:25"><name pos:start="87:24" pos:end="87:25">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="91:5" pos:end="95:5"><if pos:start="91:5" pos:end="95:5">if <condition pos:start="91:8" pos:end="91:70">(<expr pos:start="91:9" pos:end="91:69"><call pos:start="91:9" pos:end="91:69"><name pos:start="91:9" pos:end="91:26">bdrv_op_is_blocked</name><argument_list pos:start="91:27" pos:end="91:69">(<argument pos:start="91:28" pos:end="91:29"><expr pos:start="91:28" pos:end="91:29"><name pos:start="91:28" pos:end="91:29">bs</name></expr></argument>, <argument pos:start="91:32" pos:end="91:62"><expr pos:start="91:32" pos:end="91:62"><name pos:start="91:32" pos:end="91:62">BLOCK_OP_TYPE_INTERNAL_SNAPSHOT</name></expr></argument>, <argument pos:start="91:65" pos:end="91:68"><expr pos:start="91:65" pos:end="91:68"><name pos:start="91:65" pos:end="91:68">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="91:72" pos:end="95:5">{<block_content pos:start="93:9" pos:end="93:15">

        <return pos:start="93:9" pos:end="93:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="99:5" pos:end="105:5"><if pos:start="99:5" pos:end="105:5">if <condition pos:start="99:8" pos:end="99:30">(<expr pos:start="99:9" pos:end="99:29"><call pos:start="99:9" pos:end="99:29"><name pos:start="99:9" pos:end="99:25">bdrv_is_read_only</name><argument_list pos:start="99:26" pos:end="99:29">(<argument pos:start="99:27" pos:end="99:28"><expr pos:start="99:27" pos:end="99:28"><name pos:start="99:27" pos:end="99:28">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="99:32" pos:end="105:5">{<block_content pos:start="101:9" pos:end="103:15">

        <expr_stmt pos:start="101:9" pos:end="101:61"><expr pos:start="101:9" pos:end="101:60"><call pos:start="101:9" pos:end="101:60"><name pos:start="101:9" pos:end="101:18">error_setg</name><argument_list pos:start="101:19" pos:end="101:60">(<argument pos:start="101:20" pos:end="101:23"><expr pos:start="101:20" pos:end="101:23"><name pos:start="101:20" pos:end="101:23">errp</name></expr></argument>, <argument pos:start="101:26" pos:end="101:51"><expr pos:start="101:26" pos:end="101:51"><literal type="string" pos:start="101:26" pos:end="101:51">"Device '%s' is read only"</literal></expr></argument>, <argument pos:start="101:54" pos:end="101:59"><expr pos:start="101:54" pos:end="101:59"><name pos:start="101:54" pos:end="101:59">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="103:9" pos:end="103:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="109:5" pos:end="119:5"><if pos:start="109:5" pos:end="119:5">if <condition pos:start="109:8" pos:end="109:31">(<expr pos:start="109:9" pos:end="109:30"><operator pos:start="109:9" pos:end="109:9">!</operator><call pos:start="109:10" pos:end="109:30"><name pos:start="109:10" pos:end="109:26">bdrv_can_snapshot</name><argument_list pos:start="109:27" pos:end="109:30">(<argument pos:start="109:28" pos:end="109:29"><expr pos:start="109:28" pos:end="109:29"><name pos:start="109:28" pos:end="109:29">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="109:33" pos:end="119:5">{<block_content pos:start="111:9" pos:end="117:15">

        <expr_stmt pos:start="111:9" pos:end="115:49"><expr pos:start="111:9" pos:end="115:48"><call pos:start="111:9" pos:end="115:48"><name pos:start="111:9" pos:end="111:18">error_setg</name><argument_list pos:start="111:19" pos:end="115:48">(<argument pos:start="111:20" pos:end="111:23"><expr pos:start="111:20" pos:end="111:23"><name pos:start="111:20" pos:end="111:23">errp</name></expr></argument>, <argument pos:start="111:26" pos:end="113:56"><expr pos:start="111:26" pos:end="113:56"><literal type="string" pos:start="111:26" pos:end="111:65">"Block format '%s' used by device '%s' "</literal>

                   <literal type="string" pos:start="113:20" pos:end="113:56">"does not support internal snapshots"</literal></expr></argument>,

                   <argument pos:start="115:20" pos:end="115:39"><expr pos:start="115:20" pos:end="115:39"><name pos:start="115:20" pos:end="115:39"><name pos:start="115:20" pos:end="115:21">bs</name><operator pos:start="115:22" pos:end="115:23">-&gt;</operator><name pos:start="115:24" pos:end="115:26">drv</name><operator pos:start="115:27" pos:end="115:28">-&gt;</operator><name pos:start="115:29" pos:end="115:39">format_name</name></name></expr></argument>, <argument pos:start="115:42" pos:end="115:47"><expr pos:start="115:42" pos:end="115:47"><name pos:start="115:42" pos:end="115:47">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="117:9" pos:end="117:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="123:5" pos:end="129:5"><if pos:start="123:5" pos:end="129:5">if <condition pos:start="123:8" pos:end="123:22">(<expr pos:start="123:9" pos:end="123:21"><operator pos:start="123:9" pos:end="123:9">!</operator><call pos:start="123:10" pos:end="123:21"><name pos:start="123:10" pos:end="123:15">strlen</name><argument_list pos:start="123:16" pos:end="123:21">(<argument pos:start="123:17" pos:end="123:20"><expr pos:start="123:17" pos:end="123:20"><name pos:start="123:17" pos:end="123:20">name</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="123:24" pos:end="129:5">{<block_content pos:start="125:9" pos:end="127:15">

        <expr_stmt pos:start="125:9" pos:end="125:42"><expr pos:start="125:9" pos:end="125:41"><call pos:start="125:9" pos:end="125:41"><name pos:start="125:9" pos:end="125:18">error_setg</name><argument_list pos:start="125:19" pos:end="125:41">(<argument pos:start="125:20" pos:end="125:23"><expr pos:start="125:20" pos:end="125:23"><name pos:start="125:20" pos:end="125:23">errp</name></expr></argument>, <argument pos:start="125:26" pos:end="125:40"><expr pos:start="125:26" pos:end="125:40"><literal type="string" pos:start="125:26" pos:end="125:40">"Name is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="127:9" pos:end="127:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="133:5" pos:end="133:50">/* check whether a snapshot with name exist */</comment>

    <expr_stmt pos:start="135:5" pos:end="137:56"><expr pos:start="135:5" pos:end="137:55"><name pos:start="135:5" pos:end="135:7">ret</name> <operator pos:start="135:9" pos:end="135:9">=</operator> <call pos:start="135:11" pos:end="137:55"><name pos:start="135:11" pos:end="135:43">bdrv_snapshot_find_by_id_and_name</name><argument_list pos:start="135:44" pos:end="137:55">(<argument pos:start="135:45" pos:end="135:46"><expr pos:start="135:45" pos:end="135:46"><name pos:start="135:45" pos:end="135:46">bs</name></expr></argument>, <argument pos:start="135:49" pos:end="135:52"><expr pos:start="135:49" pos:end="135:52"><name pos:start="135:49" pos:end="135:52">NULL</name></expr></argument>, <argument pos:start="135:55" pos:end="135:58"><expr pos:start="135:55" pos:end="135:58"><name pos:start="135:55" pos:end="135:58">name</name></expr></argument>, <argument pos:start="135:61" pos:end="135:67"><expr pos:start="135:61" pos:end="135:67"><operator pos:start="135:61" pos:end="135:61">&amp;</operator><name pos:start="135:62" pos:end="135:67">old_sn</name></expr></argument>,

                                            <argument pos:start="137:45" pos:end="137:54"><expr pos:start="137:45" pos:end="137:54"><operator pos:start="137:45" pos:end="137:45">&amp;</operator><name pos:start="137:46" pos:end="137:54">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="139:5" pos:end="155:5"><if pos:start="139:5" pos:end="145:5">if <condition pos:start="139:8" pos:end="139:18">(<expr pos:start="139:9" pos:end="139:17"><name pos:start="139:9" pos:end="139:17">local_err</name></expr>)</condition> <block pos:start="139:20" pos:end="145:5">{<block_content pos:start="141:9" pos:end="143:15">

        <expr_stmt pos:start="141:9" pos:end="141:41"><expr pos:start="141:9" pos:end="141:40"><call pos:start="141:9" pos:end="141:40"><name pos:start="141:9" pos:end="141:23">error_propagate</name><argument_list pos:start="141:24" pos:end="141:40">(<argument pos:start="141:25" pos:end="141:28"><expr pos:start="141:25" pos:end="141:28"><name pos:start="141:25" pos:end="141:28">errp</name></expr></argument>, <argument pos:start="141:31" pos:end="141:39"><expr pos:start="141:31" pos:end="141:39"><name pos:start="141:31" pos:end="141:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="143:9" pos:end="143:15">return;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="145:7" pos:end="155:5">else if <condition pos:start="145:15" pos:end="145:19">(<expr pos:start="145:16" pos:end="145:18"><name pos:start="145:16" pos:end="145:18">ret</name></expr>)</condition> <block pos:start="145:21" pos:end="155:5">{<block_content pos:start="147:9" pos:end="153:15">

        <expr_stmt pos:start="147:9" pos:end="151:33"><expr pos:start="147:9" pos:end="151:32"><call pos:start="147:9" pos:end="151:32"><name pos:start="147:9" pos:end="147:18">error_setg</name><argument_list pos:start="147:19" pos:end="151:32">(<argument pos:start="147:20" pos:end="147:23"><expr pos:start="147:20" pos:end="147:23"><name pos:start="147:20" pos:end="147:23">errp</name></expr></argument>,

                   <argument pos:start="149:20" pos:end="149:74"><expr pos:start="149:20" pos:end="149:74"><literal type="string" pos:start="149:20" pos:end="149:74">"Snapshot with name '%s' already exists on device '%s'"</literal></expr></argument>,

                   <argument pos:start="151:20" pos:end="151:23"><expr pos:start="151:20" pos:end="151:23"><name pos:start="151:20" pos:end="151:23">name</name></expr></argument>, <argument pos:start="151:26" pos:end="151:31"><expr pos:start="151:26" pos:end="151:31"><name pos:start="151:26" pos:end="151:31">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="153:9" pos:end="153:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="159:5" pos:end="159:30">/* 3. take the snapshot */</comment>

    <expr_stmt pos:start="161:5" pos:end="161:20"><expr pos:start="161:5" pos:end="161:19"><name pos:start="161:5" pos:end="161:6">sn</name> <operator pos:start="161:8" pos:end="161:8">=</operator> <operator pos:start="161:10" pos:end="161:10">&amp;</operator><name pos:start="161:11" pos:end="161:19"><name pos:start="161:11" pos:end="161:15">state</name><operator pos:start="161:16" pos:end="161:17">-&gt;</operator><name pos:start="161:18" pos:end="161:19">sn</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:46"><expr pos:start="163:5" pos:end="163:45"><call pos:start="163:5" pos:end="163:45"><name pos:start="163:5" pos:end="163:11">pstrcpy</name><argument_list pos:start="163:12" pos:end="163:45">(<argument pos:start="163:13" pos:end="163:20"><expr pos:start="163:13" pos:end="163:20"><name pos:start="163:13" pos:end="163:20"><name pos:start="163:13" pos:end="163:14">sn</name><operator pos:start="163:15" pos:end="163:16">-&gt;</operator><name pos:start="163:17" pos:end="163:20">name</name></name></expr></argument>, <argument pos:start="163:23" pos:end="163:38"><expr pos:start="163:23" pos:end="163:38"><sizeof pos:start="163:23" pos:end="163:38">sizeof<argument_list pos:start="163:29" pos:end="163:38">(<argument pos:start="163:30" pos:end="163:37"><expr pos:start="163:30" pos:end="163:37"><name pos:start="163:30" pos:end="163:37"><name pos:start="163:30" pos:end="163:31">sn</name><operator pos:start="163:32" pos:end="163:33">-&gt;</operator><name pos:start="163:34" pos:end="163:37">name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="163:41" pos:end="163:44"><expr pos:start="163:41" pos:end="163:44"><name pos:start="163:41" pos:end="163:44">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:27"><expr pos:start="165:5" pos:end="165:26"><call pos:start="165:5" pos:end="165:26"><name pos:start="165:5" pos:end="165:21">qemu_gettimeofday</name><argument_list pos:start="165:22" pos:end="165:26">(<argument pos:start="165:23" pos:end="165:25"><expr pos:start="165:23" pos:end="165:25"><operator pos:start="165:23" pos:end="165:23">&amp;</operator><name pos:start="165:24" pos:end="165:25">tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:29"><expr pos:start="167:5" pos:end="167:28"><name pos:start="167:5" pos:end="167:16"><name pos:start="167:5" pos:end="167:6">sn</name><operator pos:start="167:7" pos:end="167:8">-&gt;</operator><name pos:start="167:9" pos:end="167:16">date_sec</name></name> <operator pos:start="167:18" pos:end="167:18">=</operator> <name pos:start="167:20" pos:end="167:28"><name pos:start="167:20" pos:end="167:21">tv</name><operator pos:start="167:22" pos:end="167:22">.</operator><name pos:start="167:23" pos:end="167:28">tv_sec</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:38"><expr pos:start="169:5" pos:end="169:37"><name pos:start="169:5" pos:end="169:17"><name pos:start="169:5" pos:end="169:6">sn</name><operator pos:start="169:7" pos:end="169:8">-&gt;</operator><name pos:start="169:9" pos:end="169:17">date_nsec</name></name> <operator pos:start="169:19" pos:end="169:19">=</operator> <name pos:start="169:21" pos:end="169:30"><name pos:start="169:21" pos:end="169:22">tv</name><operator pos:start="169:23" pos:end="169:23">.</operator><name pos:start="169:24" pos:end="169:30">tv_usec</name></name> <operator pos:start="169:32" pos:end="169:32">*</operator> <literal type="number" pos:start="169:34" pos:end="169:37">1000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="171:62"><expr pos:start="171:5" pos:end="171:61"><name pos:start="171:5" pos:end="171:21"><name pos:start="171:5" pos:end="171:6">sn</name><operator pos:start="171:7" pos:end="171:8">-&gt;</operator><name pos:start="171:9" pos:end="171:21">vm_clock_nsec</name></name> <operator pos:start="171:23" pos:end="171:23">=</operator> <call pos:start="171:25" pos:end="171:61"><name pos:start="171:25" pos:end="171:41">qemu_clock_get_ns</name><argument_list pos:start="171:42" pos:end="171:61">(<argument pos:start="171:43" pos:end="171:60"><expr pos:start="171:43" pos:end="171:60"><name pos:start="171:43" pos:end="171:60">QEMU_CLOCK_VIRTUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="175:5" pos:end="175:40"><expr pos:start="175:5" pos:end="175:39"><name pos:start="175:5" pos:end="175:8">ret1</name> <operator pos:start="175:10" pos:end="175:10">=</operator> <call pos:start="175:12" pos:end="175:39"><name pos:start="175:12" pos:end="175:31">bdrv_snapshot_create</name><argument_list pos:start="175:32" pos:end="175:39">(<argument pos:start="175:33" pos:end="175:34"><expr pos:start="175:33" pos:end="175:34"><name pos:start="175:33" pos:end="175:34">bs</name></expr></argument>, <argument pos:start="175:37" pos:end="175:38"><expr pos:start="175:37" pos:end="175:38"><name pos:start="175:37" pos:end="175:38">sn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="177:5" pos:end="187:5"><if pos:start="177:5" pos:end="187:5">if <condition pos:start="177:8" pos:end="177:17">(<expr pos:start="177:9" pos:end="177:16"><name pos:start="177:9" pos:end="177:12">ret1</name> <operator pos:start="177:14" pos:end="177:14">&lt;</operator> <literal type="number" pos:start="177:16" pos:end="177:16">0</literal></expr>)</condition> <block pos:start="177:19" pos:end="187:5">{<block_content pos:start="179:9" pos:end="185:15">

        <expr_stmt pos:start="179:9" pos:end="183:39"><expr pos:start="179:9" pos:end="183:38"><call pos:start="179:9" pos:end="183:38"><name pos:start="179:9" pos:end="179:24">error_setg_errno</name><argument_list pos:start="179:25" pos:end="183:38">(<argument pos:start="179:26" pos:end="179:29"><expr pos:start="179:26" pos:end="179:29"><name pos:start="179:26" pos:end="179:29">errp</name></expr></argument>, <argument pos:start="179:32" pos:end="179:36"><expr pos:start="179:32" pos:end="179:36"><operator pos:start="179:32" pos:end="179:32">-</operator><name pos:start="179:33" pos:end="179:36">ret1</name></expr></argument>,

                         <argument pos:start="181:26" pos:end="181:72"><expr pos:start="181:26" pos:end="181:72"><literal type="string" pos:start="181:26" pos:end="181:72">"Failed to create snapshot '%s' on device '%s'"</literal></expr></argument>,

                         <argument pos:start="183:26" pos:end="183:29"><expr pos:start="183:26" pos:end="183:29"><name pos:start="183:26" pos:end="183:29">name</name></expr></argument>, <argument pos:start="183:32" pos:end="183:37"><expr pos:start="183:32" pos:end="183:37"><name pos:start="183:32" pos:end="183:37">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="185:9" pos:end="185:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="191:5" pos:end="191:48">/* 4. succeed, mark a snapshot is created */</comment>

    <expr_stmt pos:start="193:5" pos:end="193:26"><expr pos:start="193:5" pos:end="193:25"><name pos:start="193:5" pos:end="193:18"><name pos:start="193:5" pos:end="193:9">state</name><operator pos:start="193:10" pos:end="193:11">-&gt;</operator><name pos:start="193:12" pos:end="193:18">created</name></name> <operator pos:start="193:20" pos:end="193:20">=</operator> <name pos:start="193:22" pos:end="193:25">true</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
