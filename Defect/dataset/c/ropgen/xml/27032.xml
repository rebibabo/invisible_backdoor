<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/27032.c" pos:tabs="8"><function pos:start="1:1" pos:end="457:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">shorten_decode_frame</name><parameter_list pos:start="1:32" pos:end="3:68">(<parameter pos:start="1:33" pos:end="1:53"><decl pos:start="1:33" pos:end="1:53"><type pos:start="1:33" pos:end="1:53"><name pos:start="1:33" pos:end="1:46">AVCodecContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:53">avctx</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:65"><decl pos:start="1:56" pos:end="1:65"><type pos:start="1:56" pos:end="1:65"><name pos:start="1:56" pos:end="1:59">void</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:65">data</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:50"><decl pos:start="3:33" pos:end="3:50"><type pos:start="3:33" pos:end="3:50"><name pos:start="3:33" pos:end="3:35">int</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier></type><name pos:start="3:38" pos:end="3:50">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:53" pos:end="3:67"><decl pos:start="3:53" pos:end="3:67"><type pos:start="3:53" pos:end="3:67"><name pos:start="3:53" pos:end="3:60">AVPacket</name> <modifier pos:start="3:62" pos:end="3:62">*</modifier></type><name pos:start="3:63" pos:end="3:67">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="457:1">{<block_content pos:start="7:5" pos:end="455:17">

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">AVFrame</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:18">frame</name>     <init pos:start="7:24" pos:end="7:29">= <expr pos:start="7:26" pos:end="7:29"><name pos:start="7:26" pos:end="7:29">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name>       <init pos:start="11:24" pos:end="11:36">= <expr pos:start="11:26" pos:end="11:36"><name pos:start="11:26" pos:end="11:36"><name pos:start="11:26" pos:end="11:30">avpkt</name><operator pos:start="11:31" pos:end="11:32">-&gt;</operator><name pos:start="11:33" pos:end="11:36">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:42"><decl pos:start="13:5" pos:end="13:41"><type pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:18">ShortenContext</name> <modifier pos:start="13:20" pos:end="13:20">*</modifier></type><name pos:start="13:21" pos:end="13:21">s</name>  <init pos:start="13:24" pos:end="13:41">= <expr pos:start="13:26" pos:end="13:41"><name pos:start="13:26" pos:end="13:41"><name pos:start="13:26" pos:end="13:30">avctx</name><operator pos:start="13:31" pos:end="13:32">-&gt;</operator><name pos:start="13:33" pos:end="13:41">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>, <decl pos:start="15:12" pos:end="15:29"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:12" pos:end="15:25">input_buf_size</name> <init pos:start="15:27" pos:end="15:29">= <expr pos:start="15:29" pos:end="15:29"><literal type="number" pos:start="15:29" pos:end="15:29">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:12"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name></decl>;</decl_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:44">/* allocate internal bitstream buffer */</comment>

    <if_stmt pos:start="23:5" pos:end="43:5"><if pos:start="23:5" pos:end="43:5">if <condition pos:start="23:8" pos:end="23:30">(<expr pos:start="23:9" pos:end="23:29"><name pos:start="23:9" pos:end="23:24"><name pos:start="23:9" pos:end="23:9">s</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:24">max_framesize</name></name> <operator pos:start="23:26" pos:end="23:27">==</operator> <literal type="number" pos:start="23:29" pos:end="23:29">0</literal></expr>)</condition> <block pos:start="23:32" pos:end="43:5">{<block_content pos:start="25:9" pos:end="41:31">

        <decl_stmt pos:start="25:9" pos:end="25:22"><decl pos:start="25:9" pos:end="25:21"><type pos:start="25:9" pos:end="25:14"><name pos:start="25:9" pos:end="25:12">void</name> <modifier pos:start="25:14" pos:end="25:14">*</modifier></type><name pos:start="25:15" pos:end="25:21">tmp_ptr</name></decl>;</decl_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:32"><expr pos:start="27:9" pos:end="27:31"><name pos:start="27:9" pos:end="27:24"><name pos:start="27:9" pos:end="27:9">s</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:24">max_framesize</name></name> <operator pos:start="27:26" pos:end="27:26">=</operator> <literal type="number" pos:start="27:28" pos:end="27:31">8192</literal></expr>;</expr_stmt> <comment type="line" pos:start="27:34" pos:end="27:83">// should hopefully be enough for the first header</comment>

        <expr_stmt pos:start="29:9" pos:end="31:83"><expr pos:start="29:9" pos:end="31:82"><name pos:start="29:9" pos:end="29:15">tmp_ptr</name> <operator pos:start="29:17" pos:end="29:17">=</operator> <call pos:start="29:19" pos:end="31:82"><name pos:start="29:19" pos:end="29:33">av_fast_realloc</name><argument_list pos:start="29:34" pos:end="31:82">(<argument pos:start="29:35" pos:end="29:46"><expr pos:start="29:35" pos:end="29:46"><name pos:start="29:35" pos:end="29:46"><name pos:start="29:35" pos:end="29:35">s</name><operator pos:start="29:36" pos:end="29:37">-&gt;</operator><name pos:start="29:38" pos:end="29:46">bitstream</name></name></expr></argument>, <argument pos:start="29:49" pos:end="29:76"><expr pos:start="29:49" pos:end="29:76"><operator pos:start="29:49" pos:end="29:49">&amp;</operator><name pos:start="29:50" pos:end="29:76"><name pos:start="29:50" pos:end="29:50">s</name><operator pos:start="29:51" pos:end="29:52">-&gt;</operator><name pos:start="29:53" pos:end="29:76">allocated_bitstream_size</name></name></expr></argument>,

                                  <argument pos:start="31:35" pos:end="31:81"><expr pos:start="31:35" pos:end="31:81"><name pos:start="31:35" pos:end="31:50"><name pos:start="31:35" pos:end="31:35">s</name><operator pos:start="31:36" pos:end="31:37">-&gt;</operator><name pos:start="31:38" pos:end="31:50">max_framesize</name></name> <operator pos:start="31:52" pos:end="31:52">+</operator> <name pos:start="31:54" pos:end="31:81">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="39:9"><if pos:start="33:9" pos:end="39:9">if <condition pos:start="33:12" pos:end="33:21">(<expr pos:start="33:13" pos:end="33:20"><operator pos:start="33:13" pos:end="33:13">!</operator><name pos:start="33:14" pos:end="33:20">tmp_ptr</name></expr>)</condition> <block pos:start="33:23" pos:end="39:9">{<block_content pos:start="35:13" pos:end="37:35">

            <expr_stmt pos:start="35:13" pos:end="35:79"><expr pos:start="35:13" pos:end="35:78"><call pos:start="35:13" pos:end="35:78"><name pos:start="35:13" pos:end="35:18">av_log</name><argument_list pos:start="35:19" pos:end="35:78">(<argument pos:start="35:20" pos:end="35:24"><expr pos:start="35:20" pos:end="35:24"><name pos:start="35:20" pos:end="35:24">avctx</name></expr></argument>, <argument pos:start="35:27" pos:end="35:38"><expr pos:start="35:27" pos:end="35:38"><name pos:start="35:27" pos:end="35:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="35:41" pos:end="35:77"><expr pos:start="35:41" pos:end="35:77"><literal type="string" pos:start="35:41" pos:end="35:77">"error allocating bitstream buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="37:13" pos:end="37:35">return <expr pos:start="37:20" pos:end="37:34"><call pos:start="37:20" pos:end="37:34"><name pos:start="37:20" pos:end="37:26">AVERROR</name><argument_list pos:start="37:27" pos:end="37:34">(<argument pos:start="37:28" pos:end="37:33"><expr pos:start="37:28" pos:end="37:33"><name pos:start="37:28" pos:end="37:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:31"><expr pos:start="41:9" pos:end="41:30"><name pos:start="41:9" pos:end="41:20"><name pos:start="41:9" pos:end="41:9">s</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:20">bitstream</name></name> <operator pos:start="41:22" pos:end="41:22">=</operator> <name pos:start="41:24" pos:end="41:30">tmp_ptr</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="47:5" pos:end="47:56">/* append current packet data to bitstream buffer */</comment>

    <if_stmt pos:start="49:5" pos:end="95:5"><if pos:start="49:5" pos:end="95:5">if <condition pos:start="49:8" pos:end="49:30">(<expr pos:start="49:9" pos:end="49:29"><literal type="number" pos:start="49:9" pos:end="49:9">1</literal> <operator pos:start="49:11" pos:end="49:12">&amp;&amp;</operator> <name pos:start="49:14" pos:end="49:29"><name pos:start="49:14" pos:end="49:14">s</name><operator pos:start="49:15" pos:end="49:16">-&gt;</operator><name pos:start="49:17" pos:end="49:29">max_framesize</name></name></expr>)</condition> <block pos:start="49:32" pos:end="95:5">{<block_content pos:start="51:9" pos:end="93:9"> <comment type="line" pos:start="49:34" pos:end="49:50">//FIXME truncated</comment>

        <expr_stmt pos:start="51:9" pos:end="51:79"><expr pos:start="51:9" pos:end="51:78"><name pos:start="51:9" pos:end="51:16">buf_size</name>       <operator pos:start="51:24" pos:end="51:24">=</operator> <call pos:start="51:26" pos:end="51:78"><name pos:start="51:26" pos:end="51:30">FFMIN</name><argument_list pos:start="51:31" pos:end="51:78">(<argument pos:start="51:32" pos:end="51:39"><expr pos:start="51:32" pos:end="51:39"><name pos:start="51:32" pos:end="51:39">buf_size</name></expr></argument>, <argument pos:start="51:42" pos:end="51:77"><expr pos:start="51:42" pos:end="51:77"><name pos:start="51:42" pos:end="51:57"><name pos:start="51:42" pos:end="51:42">s</name><operator pos:start="51:43" pos:end="51:44">-&gt;</operator><name pos:start="51:45" pos:end="51:57">max_framesize</name></name> <operator pos:start="51:59" pos:end="51:59">-</operator> <name pos:start="51:61" pos:end="51:77"><name pos:start="51:61" pos:end="51:61">s</name><operator pos:start="51:62" pos:end="51:63">-&gt;</operator><name pos:start="51:64" pos:end="51:77">bitstream_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:34"><expr pos:start="53:9" pos:end="53:33"><name pos:start="53:9" pos:end="53:22">input_buf_size</name> <operator pos:start="53:24" pos:end="53:24">=</operator> <name pos:start="53:26" pos:end="53:33">buf_size</name></expr>;</expr_stmt>



        <if_stmt pos:start="57:9" pos:end="67:9"><if pos:start="57:9" pos:end="67:9">if <condition pos:start="57:12" pos:end="59:40">(<expr pos:start="57:13" pos:end="59:39"><name pos:start="57:13" pos:end="57:30"><name pos:start="57:13" pos:end="57:13">s</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:30">bitstream_index</name></name> <operator pos:start="57:32" pos:end="57:32">+</operator> <name pos:start="57:34" pos:end="57:50"><name pos:start="57:34" pos:end="57:34">s</name><operator pos:start="57:35" pos:end="57:36">-&gt;</operator><name pos:start="57:37" pos:end="57:50">bitstream_size</name></name> <operator pos:start="57:52" pos:end="57:52">+</operator> <name pos:start="57:54" pos:end="57:61">buf_size</name> <operator pos:start="57:63" pos:end="57:63">&gt;</operator>

            <name pos:start="59:13" pos:end="59:39"><name pos:start="59:13" pos:end="59:13">s</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:39">allocated_bitstream_size</name></name></expr>)</condition> <block pos:start="59:42" pos:end="67:9">{<block_content pos:start="61:13" pos:end="65:35">

            <expr_stmt pos:start="61:13" pos:end="63:39"><expr pos:start="61:13" pos:end="63:38"><call pos:start="61:13" pos:end="63:38"><name pos:start="61:13" pos:end="61:19">memmove</name><argument_list pos:start="61:20" pos:end="63:38">(<argument pos:start="61:21" pos:end="61:32"><expr pos:start="61:21" pos:end="61:32"><name pos:start="61:21" pos:end="61:32"><name pos:start="61:21" pos:end="61:21">s</name><operator pos:start="61:22" pos:end="61:23">-&gt;</operator><name pos:start="61:24" pos:end="61:32">bitstream</name></name></expr></argument>, <argument pos:start="61:35" pos:end="61:67"><expr pos:start="61:35" pos:end="61:67"><operator pos:start="61:35" pos:end="61:35">&amp;</operator><name pos:start="61:36" pos:end="61:67"><name pos:start="61:36" pos:end="61:36">s</name><operator pos:start="61:37" pos:end="61:38">-&gt;</operator><name pos:start="61:39" pos:end="61:47">bitstream</name><index pos:start="61:48" pos:end="61:67">[<expr pos:start="61:49" pos:end="61:66"><name pos:start="61:49" pos:end="61:66"><name pos:start="61:49" pos:end="61:49">s</name><operator pos:start="61:50" pos:end="61:51">-&gt;</operator><name pos:start="61:52" pos:end="61:66">bitstream_index</name></name></expr>]</index></name></expr></argument>,

                    <argument pos:start="63:21" pos:end="63:37"><expr pos:start="63:21" pos:end="63:37"><name pos:start="63:21" pos:end="63:37"><name pos:start="63:21" pos:end="63:21">s</name><operator pos:start="63:22" pos:end="63:23">-&gt;</operator><name pos:start="63:24" pos:end="63:37">bitstream_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:35"><expr pos:start="65:13" pos:end="65:34"><name pos:start="65:13" pos:end="65:30"><name pos:start="65:13" pos:end="65:13">s</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:30">bitstream_index</name></name> <operator pos:start="65:32" pos:end="65:32">=</operator> <literal type="number" pos:start="65:34" pos:end="65:34">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="69:9" pos:end="73:29"><if pos:start="69:9" pos:end="73:29">if <condition pos:start="69:12" pos:end="69:16">(<expr pos:start="69:13" pos:end="69:15"><name pos:start="69:13" pos:end="69:15">buf</name></expr>)</condition><block type="pseudo" pos:start="71:13" pos:end="73:29"><block_content pos:start="71:13" pos:end="73:29">

            <expr_stmt pos:start="71:13" pos:end="73:29"><expr pos:start="71:13" pos:end="73:28"><call pos:start="71:13" pos:end="73:28"><name pos:start="71:13" pos:end="71:18">memcpy</name><argument_list pos:start="71:19" pos:end="73:28">(<argument pos:start="71:20" pos:end="71:72"><expr pos:start="71:20" pos:end="71:72"><operator pos:start="71:20" pos:end="71:20">&amp;</operator><name pos:start="71:21" pos:end="71:72"><name pos:start="71:21" pos:end="71:21">s</name><operator pos:start="71:22" pos:end="71:23">-&gt;</operator><name pos:start="71:24" pos:end="71:32">bitstream</name><index pos:start="71:33" pos:end="71:72">[<expr pos:start="71:34" pos:end="71:71"><name pos:start="71:34" pos:end="71:51"><name pos:start="71:34" pos:end="71:34">s</name><operator pos:start="71:35" pos:end="71:36">-&gt;</operator><name pos:start="71:37" pos:end="71:51">bitstream_index</name></name> <operator pos:start="71:53" pos:end="71:53">+</operator> <name pos:start="71:55" pos:end="71:71"><name pos:start="71:55" pos:end="71:55">s</name><operator pos:start="71:56" pos:end="71:57">-&gt;</operator><name pos:start="71:58" pos:end="71:71">bitstream_size</name></name></expr>]</index></name></expr></argument>, <argument pos:start="71:75" pos:end="71:77"><expr pos:start="71:75" pos:end="71:77"><name pos:start="71:75" pos:end="71:77">buf</name></expr></argument>,

                   <argument pos:start="73:20" pos:end="73:27"><expr pos:start="73:20" pos:end="73:27"><name pos:start="73:20" pos:end="73:27">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:62"><expr pos:start="75:9" pos:end="75:61"><name pos:start="75:9" pos:end="75:11">buf</name>               <operator pos:start="75:27" pos:end="75:27">=</operator> <operator pos:start="75:29" pos:end="75:29">&amp;</operator><name pos:start="75:30" pos:end="75:61"><name pos:start="75:30" pos:end="75:30">s</name><operator pos:start="75:31" pos:end="75:32">-&gt;</operator><name pos:start="75:33" pos:end="75:41">bitstream</name><index pos:start="75:42" pos:end="75:61">[<expr pos:start="75:43" pos:end="75:60"><name pos:start="75:43" pos:end="75:60"><name pos:start="75:43" pos:end="75:43">s</name><operator pos:start="75:44" pos:end="75:45">-&gt;</operator><name pos:start="75:46" pos:end="75:60">bitstream_index</name></name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:46"><expr pos:start="77:9" pos:end="77:45"><name pos:start="77:9" pos:end="77:16">buf_size</name>         <operator pos:start="77:26" pos:end="77:27">+=</operator> <name pos:start="77:29" pos:end="77:45"><name pos:start="77:29" pos:end="77:29">s</name><operator pos:start="77:30" pos:end="77:31">-&gt;</operator><name pos:start="77:32" pos:end="77:45">bitstream_size</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:37"><expr pos:start="79:9" pos:end="79:36"><name pos:start="79:9" pos:end="79:25"><name pos:start="79:9" pos:end="79:9">s</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:25">bitstream_size</name></name> <operator pos:start="79:27" pos:end="79:27">=</operator> <name pos:start="79:29" pos:end="79:36">buf_size</name></expr>;</expr_stmt>



        <comment type="block" pos:start="83:9" pos:end="85:50">/* do not decode until buffer has at least max_framesize bytes or

         * the end of the file has been reached */</comment>

        <if_stmt pos:start="87:9" pos:end="93:9"><if pos:start="87:9" pos:end="93:9">if <condition pos:start="87:12" pos:end="87:55">(<expr pos:start="87:13" pos:end="87:54"><name pos:start="87:13" pos:end="87:20">buf_size</name> <operator pos:start="87:22" pos:end="87:22">&lt;</operator> <name pos:start="87:24" pos:end="87:39"><name pos:start="87:24" pos:end="87:24">s</name><operator pos:start="87:25" pos:end="87:26">-&gt;</operator><name pos:start="87:27" pos:end="87:39">max_framesize</name></name> <operator pos:start="87:41" pos:end="87:42">&amp;&amp;</operator> <name pos:start="87:44" pos:end="87:54"><name pos:start="87:44" pos:end="87:48">avpkt</name><operator pos:start="87:49" pos:end="87:50">-&gt;</operator><name pos:start="87:51" pos:end="87:54">data</name></name></expr>)</condition> <block pos:start="87:57" pos:end="93:9">{<block_content pos:start="89:13" pos:end="91:34">

            <expr_stmt pos:start="89:13" pos:end="89:31"><expr pos:start="89:13" pos:end="89:30"><operator pos:start="89:13" pos:end="89:13">*</operator><name pos:start="89:14" pos:end="89:26">got_frame_ptr</name> <operator pos:start="89:28" pos:end="89:28">=</operator> <literal type="number" pos:start="89:30" pos:end="89:30">0</literal></expr>;</expr_stmt>

            <return pos:start="91:13" pos:end="91:34">return <expr pos:start="91:20" pos:end="91:33"><name pos:start="91:20" pos:end="91:33">input_buf_size</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="97:5" pos:end="97:44">/* init and position bitstream reader */</comment>

    <expr_stmt pos:start="99:5" pos:end="99:45"><expr pos:start="99:5" pos:end="99:44"><call pos:start="99:5" pos:end="99:44"><name pos:start="99:5" pos:end="99:17">init_get_bits</name><argument_list pos:start="99:18" pos:end="99:44">(<argument pos:start="99:19" pos:end="99:24"><expr pos:start="99:19" pos:end="99:24"><operator pos:start="99:19" pos:end="99:19">&amp;</operator><name pos:start="99:20" pos:end="99:24"><name pos:start="99:20" pos:end="99:20">s</name><operator pos:start="99:21" pos:end="99:22">-&gt;</operator><name pos:start="99:23" pos:end="99:24">gb</name></name></expr></argument>, <argument pos:start="99:27" pos:end="99:29"><expr pos:start="99:27" pos:end="99:29"><name pos:start="99:27" pos:end="99:29">buf</name></expr></argument>, <argument pos:start="99:32" pos:end="99:43"><expr pos:start="99:32" pos:end="99:43"><name pos:start="99:32" pos:end="99:39">buf_size</name> <operator pos:start="99:41" pos:end="99:41">*</operator> <literal type="number" pos:start="99:43" pos:end="99:43">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:35"><expr pos:start="101:5" pos:end="101:34"><call pos:start="101:5" pos:end="101:34"><name pos:start="101:5" pos:end="101:13">skip_bits</name><argument_list pos:start="101:14" pos:end="101:34">(<argument pos:start="101:15" pos:end="101:20"><expr pos:start="101:15" pos:end="101:20"><operator pos:start="101:15" pos:end="101:15">&amp;</operator><name pos:start="101:16" pos:end="101:20"><name pos:start="101:16" pos:end="101:16">s</name><operator pos:start="101:17" pos:end="101:18">-&gt;</operator><name pos:start="101:19" pos:end="101:20">gb</name></name></expr></argument>, <argument pos:start="101:23" pos:end="101:33"><expr pos:start="101:23" pos:end="101:33"><name pos:start="101:23" pos:end="101:33"><name pos:start="101:23" pos:end="101:23">s</name><operator pos:start="101:24" pos:end="101:25">-&gt;</operator><name pos:start="101:26" pos:end="101:33">bitindex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="105:5" pos:end="105:41">/* process header or next subblock */</comment>

    <if_stmt pos:start="107:5" pos:end="117:5"><if pos:start="107:5" pos:end="117:5">if <condition pos:start="107:8" pos:end="107:23">(<expr pos:start="107:9" pos:end="107:22"><operator pos:start="107:9" pos:end="107:9">!</operator><name pos:start="107:10" pos:end="107:22"><name pos:start="107:10" pos:end="107:10">s</name><operator pos:start="107:11" pos:end="107:12">-&gt;</operator><name pos:start="107:13" pos:end="107:22">got_header</name></name></expr>)</condition> <block pos:start="107:25" pos:end="117:5">{<block_content pos:start="109:9" pos:end="115:26">

        <if_stmt pos:start="109:9" pos:end="111:23"><if pos:start="109:9" pos:end="111:23">if <condition pos:start="109:12" pos:end="109:39">(<expr pos:start="109:13" pos:end="109:38"><operator pos:start="109:13" pos:end="109:13">(</operator><name pos:start="109:14" pos:end="109:16">ret</name> <operator pos:start="109:18" pos:end="109:18">=</operator> <call pos:start="109:20" pos:end="109:33"><name pos:start="109:20" pos:end="109:30">read_header</name><argument_list pos:start="109:31" pos:end="109:33">(<argument pos:start="109:32" pos:end="109:32"><expr pos:start="109:32" pos:end="109:32"><name pos:start="109:32" pos:end="109:32">s</name></expr></argument>)</argument_list></call><operator pos:start="109:34" pos:end="109:34">)</operator> <operator pos:start="109:36" pos:end="109:36">&lt;</operator> <literal type="number" pos:start="109:38" pos:end="109:38">0</literal></expr>)</condition><block type="pseudo" pos:start="111:13" pos:end="111:23"><block_content pos:start="111:13" pos:end="111:23">

            <return pos:start="111:13" pos:end="111:23">return <expr pos:start="111:20" pos:end="111:22"><name pos:start="111:20" pos:end="111:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:27"><expr pos:start="113:9" pos:end="113:26"><operator pos:start="113:9" pos:end="113:9">*</operator><name pos:start="113:10" pos:end="113:22">got_frame_ptr</name> <operator pos:start="113:24" pos:end="113:24">=</operator> <literal type="number" pos:start="113:26" pos:end="113:26">0</literal></expr>;</expr_stmt>

        <goto pos:start="115:9" pos:end="115:26">goto <name pos:start="115:14" pos:end="115:25">finish_frame</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="121:5" pos:end="121:68">/* if quit command was read previously, don't decode anything */</comment>

    <if_stmt pos:start="123:5" pos:end="129:5"><if pos:start="123:5" pos:end="129:5">if <condition pos:start="123:8" pos:end="123:28">(<expr pos:start="123:9" pos:end="123:27"><name pos:start="123:9" pos:end="123:27"><name pos:start="123:9" pos:end="123:9">s</name><operator pos:start="123:10" pos:end="123:11">-&gt;</operator><name pos:start="123:12" pos:end="123:27">got_quit_command</name></name></expr>)</condition> <block pos:start="123:30" pos:end="129:5">{<block_content pos:start="125:9" pos:end="127:27">

        <expr_stmt pos:start="125:9" pos:end="125:27"><expr pos:start="125:9" pos:end="125:26"><operator pos:start="125:9" pos:end="125:9">*</operator><name pos:start="125:10" pos:end="125:22">got_frame_ptr</name> <operator pos:start="125:24" pos:end="125:24">=</operator> <literal type="number" pos:start="125:26" pos:end="125:26">0</literal></expr>;</expr_stmt>

        <return pos:start="127:9" pos:end="127:27">return <expr pos:start="127:16" pos:end="127:26"><name pos:start="127:16" pos:end="127:26"><name pos:start="127:16" pos:end="127:20">avpkt</name><operator pos:start="127:21" pos:end="127:22">-&gt;</operator><name pos:start="127:23" pos:end="127:26">size</name></name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="133:5" pos:end="133:20"><expr pos:start="133:5" pos:end="133:19"><name pos:start="133:5" pos:end="133:15"><name pos:start="133:5" pos:end="133:5">s</name><operator pos:start="133:6" pos:end="133:7">-&gt;</operator><name pos:start="133:8" pos:end="133:15">cur_chan</name></name> <operator pos:start="133:17" pos:end="133:17">=</operator> <literal type="number" pos:start="133:19" pos:end="133:19">0</literal></expr>;</expr_stmt>

    <while pos:start="135:5" pos:end="419:5">while <condition pos:start="135:11" pos:end="135:37">(<expr pos:start="135:12" pos:end="135:36"><name pos:start="135:12" pos:end="135:22"><name pos:start="135:12" pos:end="135:12">s</name><operator pos:start="135:13" pos:end="135:14">-&gt;</operator><name pos:start="135:15" pos:end="135:22">cur_chan</name></name> <operator pos:start="135:24" pos:end="135:24">&lt;</operator> <name pos:start="135:26" pos:end="135:36"><name pos:start="135:26" pos:end="135:26">s</name><operator pos:start="135:27" pos:end="135:28">-&gt;</operator><name pos:start="135:29" pos:end="135:36">channels</name></name></expr>)</condition> <block pos:start="135:39" pos:end="419:5">{<block_content pos:start="137:9" pos:end="417:9">

        <decl_stmt pos:start="137:9" pos:end="137:21"><decl pos:start="137:9" pos:end="137:20"><type pos:start="137:9" pos:end="137:16"><name pos:start="137:9" pos:end="137:16">unsigned</name></type> <name pos:start="137:18" pos:end="137:20">cmd</name></decl>;</decl_stmt>

        <decl_stmt pos:start="139:9" pos:end="139:16"><decl pos:start="139:9" pos:end="139:15"><type pos:start="139:9" pos:end="139:11"><name pos:start="139:9" pos:end="139:11">int</name></type> <name pos:start="139:13" pos:end="139:15">len</name></decl>;</decl_stmt>



        <if_stmt pos:start="143:9" pos:end="149:9"><if pos:start="143:9" pos:end="149:9">if <condition pos:start="143:12" pos:end="143:47">(<expr pos:start="143:13" pos:end="143:46"><call pos:start="143:13" pos:end="143:33"><name pos:start="143:13" pos:end="143:25">get_bits_left</name><argument_list pos:start="143:26" pos:end="143:33">(<argument pos:start="143:27" pos:end="143:32"><expr pos:start="143:27" pos:end="143:32"><operator pos:start="143:27" pos:end="143:27">&amp;</operator><name pos:start="143:28" pos:end="143:32"><name pos:start="143:28" pos:end="143:28">s</name><operator pos:start="143:29" pos:end="143:30">-&gt;</operator><name pos:start="143:31" pos:end="143:32">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="143:35" pos:end="143:35">&lt;</operator> <literal type="number" pos:start="143:37" pos:end="143:39">3</literal> <operator pos:start="143:39" pos:end="143:39">+</operator> <name pos:start="143:41" pos:end="143:46">FNSIZE</name></expr>)</condition> <block pos:start="143:49" pos:end="149:9">{<block_content pos:start="145:13" pos:end="147:18">

            <expr_stmt pos:start="145:13" pos:end="145:31"><expr pos:start="145:13" pos:end="145:30"><operator pos:start="145:13" pos:end="145:13">*</operator><name pos:start="145:14" pos:end="145:26">got_frame_ptr</name> <operator pos:start="145:28" pos:end="145:28">=</operator> <literal type="number" pos:start="145:30" pos:end="145:30">0</literal></expr>;</expr_stmt>

            <break pos:start="147:13" pos:end="147:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="153:9" pos:end="153:52"><expr pos:start="153:9" pos:end="153:51"><name pos:start="153:9" pos:end="153:11">cmd</name> <operator pos:start="153:13" pos:end="153:13">=</operator> <call pos:start="153:15" pos:end="153:51"><name pos:start="153:15" pos:end="153:35">get_ur_golomb_shorten</name><argument_list pos:start="153:36" pos:end="153:51">(<argument pos:start="153:37" pos:end="153:42"><expr pos:start="153:37" pos:end="153:42"><operator pos:start="153:37" pos:end="153:37">&amp;</operator><name pos:start="153:38" pos:end="153:42"><name pos:start="153:38" pos:end="153:38">s</name><operator pos:start="153:39" pos:end="153:40">-&gt;</operator><name pos:start="153:41" pos:end="153:42">gb</name></name></expr></argument>, <argument pos:start="153:45" pos:end="153:50"><expr pos:start="153:45" pos:end="153:50"><name pos:start="153:45" pos:end="153:50">FNSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="157:9" pos:end="165:9"><if pos:start="157:9" pos:end="165:9">if <condition pos:start="157:12" pos:end="157:30">(<expr pos:start="157:13" pos:end="157:29"><name pos:start="157:13" pos:end="157:15">cmd</name> <operator pos:start="157:17" pos:end="157:17">&gt;</operator> <name pos:start="157:19" pos:end="157:29">FN_VERBATIM</name></expr>)</condition> <block pos:start="157:32" pos:end="165:9">{<block_content pos:start="159:13" pos:end="163:18">

            <expr_stmt pos:start="159:13" pos:end="159:78"><expr pos:start="159:13" pos:end="159:77"><call pos:start="159:13" pos:end="159:77"><name pos:start="159:13" pos:end="159:18">av_log</name><argument_list pos:start="159:19" pos:end="159:77">(<argument pos:start="159:20" pos:end="159:24"><expr pos:start="159:20" pos:end="159:24"><name pos:start="159:20" pos:end="159:24">avctx</name></expr></argument>, <argument pos:start="159:27" pos:end="159:38"><expr pos:start="159:27" pos:end="159:38"><name pos:start="159:27" pos:end="159:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="159:41" pos:end="159:71"><expr pos:start="159:41" pos:end="159:71"><literal type="string" pos:start="159:41" pos:end="159:71">"unknown shorten function %d\n"</literal></expr></argument>, <argument pos:start="159:74" pos:end="159:76"><expr pos:start="159:74" pos:end="159:76"><name pos:start="159:74" pos:end="159:76">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:31"><expr pos:start="161:13" pos:end="161:30"><operator pos:start="161:13" pos:end="161:13">*</operator><name pos:start="161:14" pos:end="161:26">got_frame_ptr</name> <operator pos:start="161:28" pos:end="161:28">=</operator> <literal type="number" pos:start="161:30" pos:end="161:30">0</literal></expr>;</expr_stmt>

            <break pos:start="163:13" pos:end="163:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="169:9" pos:end="417:9"><if pos:start="169:9" pos:end="237:9">if <condition pos:start="169:12" pos:end="169:35">(<expr pos:start="169:13" pos:end="169:34"><operator pos:start="169:13" pos:end="169:13">!</operator><name pos:start="169:14" pos:end="169:34"><name pos:start="169:14" pos:end="169:29">is_audio_command</name><index pos:start="169:30" pos:end="169:34">[<expr pos:start="169:31" pos:end="169:33"><name pos:start="169:31" pos:end="169:33">cmd</name></expr>]</index></name></expr>)</condition> <block pos:start="169:37" pos:end="237:9">{<block_content pos:start="173:13" pos:end="235:13">

            <comment type="block" pos:start="171:13" pos:end="171:43">/* process non-audio command */</comment>

            <switch pos:start="173:13" pos:end="227:13">switch <condition pos:start="173:20" pos:end="173:24">(<expr pos:start="173:21" pos:end="173:23"><name pos:start="173:21" pos:end="173:23">cmd</name></expr>)</condition> <block pos:start="173:26" pos:end="227:13">{<block_content pos:start="175:13" pos:end="225:22">

            <case pos:start="175:13" pos:end="175:29">case <expr pos:start="175:18" pos:end="175:28"><name pos:start="175:18" pos:end="175:28">FN_VERBATIM</name></expr>:</case>

                <expr_stmt pos:start="177:17" pos:end="177:74"><expr pos:start="177:17" pos:end="177:73"><name pos:start="177:17" pos:end="177:19">len</name> <operator pos:start="177:21" pos:end="177:21">=</operator> <call pos:start="177:23" pos:end="177:73"><name pos:start="177:23" pos:end="177:43">get_ur_golomb_shorten</name><argument_list pos:start="177:44" pos:end="177:73">(<argument pos:start="177:45" pos:end="177:50"><expr pos:start="177:45" pos:end="177:50"><operator pos:start="177:45" pos:end="177:45">&amp;</operator><name pos:start="177:46" pos:end="177:50"><name pos:start="177:46" pos:end="177:46">s</name><operator pos:start="177:47" pos:end="177:48">-&gt;</operator><name pos:start="177:49" pos:end="177:50">gb</name></name></expr></argument>, <argument pos:start="177:53" pos:end="177:72"><expr pos:start="177:53" pos:end="177:72"><name pos:start="177:53" pos:end="177:72">VERBATIM_CKSIZE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <while pos:start="179:17" pos:end="181:70">while <condition pos:start="179:23" pos:end="179:29">(<expr pos:start="179:24" pos:end="179:28"><name pos:start="179:24" pos:end="179:26">len</name><operator pos:start="179:27" pos:end="179:28">--</operator></expr>)</condition><block type="pseudo" pos:start="181:21" pos:end="181:70"><block_content pos:start="181:21" pos:end="181:70">

                    <expr_stmt pos:start="181:21" pos:end="181:70"><expr pos:start="181:21" pos:end="181:69"><call pos:start="181:21" pos:end="181:69"><name pos:start="181:21" pos:end="181:41">get_ur_golomb_shorten</name><argument_list pos:start="181:42" pos:end="181:69">(<argument pos:start="181:43" pos:end="181:48"><expr pos:start="181:43" pos:end="181:48"><operator pos:start="181:43" pos:end="181:43">&amp;</operator><name pos:start="181:44" pos:end="181:48"><name pos:start="181:44" pos:end="181:44">s</name><operator pos:start="181:45" pos:end="181:46">-&gt;</operator><name pos:start="181:47" pos:end="181:48">gb</name></name></expr></argument>, <argument pos:start="181:51" pos:end="181:68"><expr pos:start="181:51" pos:end="181:68"><name pos:start="181:51" pos:end="181:68">VERBATIM_BYTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

                <break pos:start="183:17" pos:end="183:22">break;</break>

            <case pos:start="185:13" pos:end="185:29">case <expr pos:start="185:18" pos:end="185:28"><name pos:start="185:18" pos:end="185:28">FN_BITSHIFT</name></expr>:</case>

                <expr_stmt pos:start="187:17" pos:end="187:74"><expr pos:start="187:17" pos:end="187:73"><name pos:start="187:17" pos:end="187:27"><name pos:start="187:17" pos:end="187:17">s</name><operator pos:start="187:18" pos:end="187:19">-&gt;</operator><name pos:start="187:20" pos:end="187:27">bitshift</name></name> <operator pos:start="187:29" pos:end="187:29">=</operator> <call pos:start="187:31" pos:end="187:73"><name pos:start="187:31" pos:end="187:51">get_ur_golomb_shorten</name><argument_list pos:start="187:52" pos:end="187:73">(<argument pos:start="187:53" pos:end="187:58"><expr pos:start="187:53" pos:end="187:58"><operator pos:start="187:53" pos:end="187:53">&amp;</operator><name pos:start="187:54" pos:end="187:58"><name pos:start="187:54" pos:end="187:54">s</name><operator pos:start="187:55" pos:end="187:56">-&gt;</operator><name pos:start="187:57" pos:end="187:58">gb</name></name></expr></argument>, <argument pos:start="187:61" pos:end="187:72"><expr pos:start="187:61" pos:end="187:72"><name pos:start="187:61" pos:end="187:72">BITSHIFTSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="189:17" pos:end="189:22">break;</break>

            <case pos:start="191:13" pos:end="191:30">case <expr pos:start="191:18" pos:end="191:29"><name pos:start="191:18" pos:end="191:29">FN_BLOCKSIZE</name></expr>:</case> <block pos:start="191:32" pos:end="219:13">{<block_content pos:start="193:17" pos:end="217:22">

                <decl_stmt pos:start="193:17" pos:end="193:72"><decl pos:start="193:17" pos:end="193:71"><type pos:start="193:17" pos:end="193:24"><name pos:start="193:17" pos:end="193:24">unsigned</name></type> <name pos:start="193:26" pos:end="193:34">blocksize</name> <init pos:start="193:36" pos:end="193:71">= <expr pos:start="193:38" pos:end="193:71"><call pos:start="193:38" pos:end="193:71"><name pos:start="193:38" pos:end="193:45">get_uint</name><argument_list pos:start="193:46" pos:end="193:71">(<argument pos:start="193:47" pos:end="193:47"><expr pos:start="193:47" pos:end="193:47"><name pos:start="193:47" pos:end="193:47">s</name></expr></argument>, <argument pos:start="193:50" pos:end="193:70"><expr pos:start="193:50" pos:end="193:70"><call pos:start="193:50" pos:end="193:70"><name pos:start="193:50" pos:end="193:56">av_log2</name><argument_list pos:start="193:57" pos:end="193:70">(<argument pos:start="193:58" pos:end="193:69"><expr pos:start="193:58" pos:end="193:69"><name pos:start="193:58" pos:end="193:69"><name pos:start="193:58" pos:end="193:58">s</name><operator pos:start="193:59" pos:end="193:60">-&gt;</operator><name pos:start="193:61" pos:end="193:69">blocksize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="195:17" pos:end="203:17"><if pos:start="195:17" pos:end="203:17">if <condition pos:start="195:20" pos:end="195:45">(<expr pos:start="195:21" pos:end="195:44"><name pos:start="195:21" pos:end="195:29">blocksize</name> <operator pos:start="195:31" pos:end="195:31">&gt;</operator> <name pos:start="195:33" pos:end="195:44"><name pos:start="195:33" pos:end="195:33">s</name><operator pos:start="195:34" pos:end="195:35">-&gt;</operator><name pos:start="195:36" pos:end="195:44">blocksize</name></name></expr>)</condition> <block pos:start="195:47" pos:end="203:17">{<block_content pos:start="197:21" pos:end="201:48">

                    <expr_stmt pos:start="197:21" pos:end="199:71"><expr pos:start="197:21" pos:end="199:70"><call pos:start="197:21" pos:end="199:70"><name pos:start="197:21" pos:end="197:26">av_log</name><argument_list pos:start="197:27" pos:end="199:70">(<argument pos:start="197:28" pos:end="197:32"><expr pos:start="197:28" pos:end="197:32"><name pos:start="197:28" pos:end="197:32">avctx</name></expr></argument>, <argument pos:start="197:35" pos:end="197:46"><expr pos:start="197:35" pos:end="197:46"><name pos:start="197:35" pos:end="197:46">AV_LOG_ERROR</name></expr></argument>,

                           <argument pos:start="199:28" pos:end="199:69"><expr pos:start="199:28" pos:end="199:69"><literal type="string" pos:start="199:28" pos:end="199:69">"Increasing block size is not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="201:21" pos:end="201:48">return <expr pos:start="201:28" pos:end="201:47"><name pos:start="201:28" pos:end="201:47">AVERROR_PATCHWELCOME</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="205:17" pos:end="213:17"><if pos:start="205:17" pos:end="213:17">if <condition pos:start="205:20" pos:end="205:60">(<expr pos:start="205:21" pos:end="205:59"><operator pos:start="205:21" pos:end="205:21">!</operator><name pos:start="205:22" pos:end="205:30">blocksize</name> <operator pos:start="205:32" pos:end="205:33">||</operator> <name pos:start="205:35" pos:end="205:43">blocksize</name> <operator pos:start="205:45" pos:end="205:45">&gt;</operator> <name pos:start="205:47" pos:end="205:59">MAX_BLOCKSIZE</name></expr>)</condition> <block pos:start="205:62" pos:end="213:17">{<block_content pos:start="207:21" pos:end="211:43">

                    <expr_stmt pos:start="207:21" pos:end="209:79"><expr pos:start="207:21" pos:end="209:78"><call pos:start="207:21" pos:end="209:78"><name pos:start="207:21" pos:end="207:26">av_log</name><argument_list pos:start="207:27" pos:end="209:78">(<argument pos:start="207:28" pos:end="207:32"><expr pos:start="207:28" pos:end="207:32"><name pos:start="207:28" pos:end="207:32">avctx</name></expr></argument>, <argument pos:start="207:35" pos:end="207:46"><expr pos:start="207:35" pos:end="207:46"><name pos:start="207:35" pos:end="207:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="207:49" pos:end="209:66"><expr pos:start="207:49" pos:end="209:66"><literal type="string" pos:start="207:49" pos:end="207:73">"invalid or unsupported "</literal>

                                                <literal type="string" pos:start="209:49" pos:end="209:66">"block size: %d\n"</literal></expr></argument>, <argument pos:start="209:69" pos:end="209:77"><expr pos:start="209:69" pos:end="209:77"><name pos:start="209:69" pos:end="209:77">blocksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="211:21" pos:end="211:43">return <expr pos:start="211:28" pos:end="211:42"><call pos:start="211:28" pos:end="211:42"><name pos:start="211:28" pos:end="211:34">AVERROR</name><argument_list pos:start="211:35" pos:end="211:42">(<argument pos:start="211:36" pos:end="211:41"><expr pos:start="211:36" pos:end="211:41"><name pos:start="211:36" pos:end="211:41">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="215:17" pos:end="215:41"><expr pos:start="215:17" pos:end="215:40"><name pos:start="215:17" pos:end="215:28"><name pos:start="215:17" pos:end="215:17">s</name><operator pos:start="215:18" pos:end="215:19">-&gt;</operator><name pos:start="215:20" pos:end="215:28">blocksize</name></name> <operator pos:start="215:30" pos:end="215:30">=</operator> <name pos:start="215:32" pos:end="215:40">blocksize</name></expr>;</expr_stmt>

                <break pos:start="217:17" pos:end="217:22">break;</break>

            </block_content>}</block>

            <case pos:start="221:13" pos:end="221:25">case <expr pos:start="221:18" pos:end="221:24"><name pos:start="221:18" pos:end="221:24">FN_QUIT</name></expr>:</case>

                <expr_stmt pos:start="223:17" pos:end="223:40"><expr pos:start="223:17" pos:end="223:39"><name pos:start="223:17" pos:end="223:35"><name pos:start="223:17" pos:end="223:17">s</name><operator pos:start="223:18" pos:end="223:19">-&gt;</operator><name pos:start="223:20" pos:end="223:35">got_quit_command</name></name> <operator pos:start="223:37" pos:end="223:37">=</operator> <literal type="number" pos:start="223:39" pos:end="223:39">1</literal></expr>;</expr_stmt>

                <break pos:start="225:17" pos:end="225:22">break;</break>

            </block_content>}</block></switch>

            <if_stmt pos:start="229:13" pos:end="235:13"><if pos:start="229:13" pos:end="235:13">if <condition pos:start="229:16" pos:end="229:54">(<expr pos:start="229:17" pos:end="229:53"><name pos:start="229:17" pos:end="229:19">cmd</name> <operator pos:start="229:21" pos:end="229:22">==</operator> <name pos:start="229:24" pos:end="229:35">FN_BLOCKSIZE</name> <operator pos:start="229:37" pos:end="229:38">||</operator> <name pos:start="229:40" pos:end="229:42">cmd</name> <operator pos:start="229:44" pos:end="229:45">==</operator> <name pos:start="229:47" pos:end="229:53">FN_QUIT</name></expr>)</condition> <block pos:start="229:56" pos:end="235:13">{<block_content pos:start="231:17" pos:end="233:22">

                <expr_stmt pos:start="231:17" pos:end="231:35"><expr pos:start="231:17" pos:end="231:34"><operator pos:start="231:17" pos:end="231:17">*</operator><name pos:start="231:18" pos:end="231:30">got_frame_ptr</name> <operator pos:start="231:32" pos:end="231:32">=</operator> <literal type="number" pos:start="231:34" pos:end="231:34">0</literal></expr>;</expr_stmt>

                <break pos:start="233:17" pos:end="233:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="237:11" pos:end="417:9">else <block pos:start="237:16" pos:end="417:9">{<block_content pos:start="241:13" pos:end="415:13">

            <comment type="block" pos:start="239:13" pos:end="239:39">/* process audio command */</comment>

            <decl_stmt pos:start="241:13" pos:end="241:34"><decl pos:start="241:13" pos:end="241:33"><type pos:start="241:13" pos:end="241:15"><name pos:start="241:13" pos:end="241:15">int</name></type> <name pos:start="241:17" pos:end="241:29">residual_size</name> <init pos:start="241:31" pos:end="241:33">= <expr pos:start="241:33" pos:end="241:33"><literal type="number" pos:start="241:33" pos:end="241:33">0</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="243:13" pos:end="243:38"><decl pos:start="243:13" pos:end="243:37"><type pos:start="243:13" pos:end="243:15"><name pos:start="243:13" pos:end="243:15">int</name></type> <name pos:start="243:17" pos:end="243:23">channel</name> <init pos:start="243:25" pos:end="243:37">= <expr pos:start="243:27" pos:end="243:37"><name pos:start="243:27" pos:end="243:37"><name pos:start="243:27" pos:end="243:27">s</name><operator pos:start="243:28" pos:end="243:29">-&gt;</operator><name pos:start="243:30" pos:end="243:37">cur_chan</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="245:13" pos:end="245:28"><decl pos:start="245:13" pos:end="245:27"><type pos:start="245:13" pos:end="245:19"><name pos:start="245:13" pos:end="245:19">int32_t</name></type> <name pos:start="245:21" pos:end="245:27">coffset</name></decl>;</decl_stmt>



            <comment type="block" pos:start="249:13" pos:end="249:53">/* get Rice code for residual decoding */</comment>

            <if_stmt pos:start="251:13" pos:end="263:13"><if pos:start="251:13" pos:end="263:13">if <condition pos:start="251:16" pos:end="251:31">(<expr pos:start="251:17" pos:end="251:30"><name pos:start="251:17" pos:end="251:19">cmd</name> <operator pos:start="251:21" pos:end="251:22">!=</operator> <name pos:start="251:24" pos:end="251:30">FN_ZERO</name></expr>)</condition> <block pos:start="251:33" pos:end="263:13">{<block_content pos:start="253:17" pos:end="261:36">

                <expr_stmt pos:start="253:17" pos:end="253:74"><expr pos:start="253:17" pos:end="253:73"><name pos:start="253:17" pos:end="253:29">residual_size</name> <operator pos:start="253:31" pos:end="253:31">=</operator> <call pos:start="253:33" pos:end="253:73"><name pos:start="253:33" pos:end="253:53">get_ur_golomb_shorten</name><argument_list pos:start="253:54" pos:end="253:73">(<argument pos:start="253:55" pos:end="253:60"><expr pos:start="253:55" pos:end="253:60"><operator pos:start="253:55" pos:end="253:55">&amp;</operator><name pos:start="253:56" pos:end="253:60"><name pos:start="253:56" pos:end="253:56">s</name><operator pos:start="253:57" pos:end="253:58">-&gt;</operator><name pos:start="253:59" pos:end="253:60">gb</name></name></expr></argument>, <argument pos:start="253:63" pos:end="253:72"><expr pos:start="253:63" pos:end="253:72"><name pos:start="253:63" pos:end="253:72">ENERGYSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="255:17" pos:end="257:49">/* This is a hack as version 0 differed in the definition

                 * of get_sr_golomb_shorten(). */</comment>

                <if_stmt pos:start="259:17" pos:end="261:36"><if pos:start="259:17" pos:end="261:36">if <condition pos:start="259:20" pos:end="259:36">(<expr pos:start="259:21" pos:end="259:35"><name pos:start="259:21" pos:end="259:30"><name pos:start="259:21" pos:end="259:21">s</name><operator pos:start="259:22" pos:end="259:23">-&gt;</operator><name pos:start="259:24" pos:end="259:30">version</name></name> <operator pos:start="259:32" pos:end="259:33">==</operator> <literal type="number" pos:start="259:35" pos:end="259:35">0</literal></expr>)</condition><block type="pseudo" pos:start="261:21" pos:end="261:36"><block_content pos:start="261:21" pos:end="261:36">

                    <expr_stmt pos:start="261:21" pos:end="261:36"><expr pos:start="261:21" pos:end="261:35"><name pos:start="261:21" pos:end="261:33">residual_size</name><operator pos:start="261:34" pos:end="261:35">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="267:13" pos:end="267:74">/* calculate sample offset using means from previous blocks */</comment>

            <if_stmt pos:start="269:13" pos:end="287:13"><if pos:start="269:13" pos:end="271:48">if <condition pos:start="269:16" pos:end="269:30">(<expr pos:start="269:17" pos:end="269:29"><name pos:start="269:17" pos:end="269:24"><name pos:start="269:17" pos:end="269:17">s</name><operator pos:start="269:18" pos:end="269:19">-&gt;</operator><name pos:start="269:20" pos:end="269:24">nmean</name></name> <operator pos:start="269:26" pos:end="269:27">==</operator> <literal type="number" pos:start="269:29" pos:end="269:29">0</literal></expr>)</condition><block type="pseudo" pos:start="271:17" pos:end="271:48"><block_content pos:start="271:17" pos:end="271:48">

                <expr_stmt pos:start="271:17" pos:end="271:48"><expr pos:start="271:17" pos:end="271:47"><name pos:start="271:17" pos:end="271:23">coffset</name> <operator pos:start="271:25" pos:end="271:25">=</operator> <name pos:start="271:27" pos:end="271:47"><name pos:start="271:27" pos:end="271:27">s</name><operator pos:start="271:28" pos:end="271:29">-&gt;</operator><name pos:start="271:30" pos:end="271:35">offset</name><index pos:start="271:36" pos:end="271:44">[<expr pos:start="271:37" pos:end="271:43"><name pos:start="271:37" pos:end="271:43">channel</name></expr>]</index><index pos:start="271:45" pos:end="271:47">[<expr pos:start="271:46" pos:end="271:46"><literal type="number" pos:start="271:46" pos:end="271:46">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="273:13" pos:end="287:13">else <block pos:start="273:18" pos:end="287:13">{<block_content pos:start="275:17" pos:end="285:91">

                <decl_stmt pos:start="275:17" pos:end="275:66"><decl pos:start="275:17" pos:end="275:65"><type pos:start="275:17" pos:end="275:23"><name pos:start="275:17" pos:end="275:23">int32_t</name></type> <name pos:start="275:25" pos:end="275:27">sum</name> <init pos:start="275:29" pos:end="275:65">= <expr pos:start="275:31" pos:end="275:65"><ternary pos:start="275:31" pos:end="275:65"><condition pos:start="275:31" pos:end="275:48"><expr pos:start="275:31" pos:end="275:46"><operator pos:start="275:31" pos:end="275:31">(</operator><name pos:start="275:32" pos:end="275:41"><name pos:start="275:32" pos:end="275:32">s</name><operator pos:start="275:33" pos:end="275:34">-&gt;</operator><name pos:start="275:35" pos:end="275:41">version</name></name> <operator pos:start="275:43" pos:end="275:43">&lt;</operator> <literal type="number" pos:start="275:45" pos:end="275:45">2</literal><operator pos:start="275:46" pos:end="275:46">)</operator></expr> ?</condition><then pos:start="275:50" pos:end="275:50"> <expr pos:start="275:50" pos:end="275:50"><literal type="number" pos:start="275:50" pos:end="275:50">0</literal></expr> </then><else pos:start="275:52" pos:end="275:65">: <expr pos:start="275:54" pos:end="275:65"><name pos:start="275:54" pos:end="275:61"><name pos:start="275:54" pos:end="275:54">s</name><operator pos:start="275:55" pos:end="275:56">-&gt;</operator><name pos:start="275:57" pos:end="275:61">nmean</name></name> <operator pos:start="275:63" pos:end="275:63">/</operator> <literal type="number" pos:start="275:65" pos:end="275:65">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                <for pos:start="277:17" pos:end="279:49">for <control pos:start="277:21" pos:end="277:46">(<init pos:start="277:22" pos:end="277:27"><expr pos:start="277:22" pos:end="277:26"><name pos:start="277:22" pos:end="277:22">i</name> <operator pos:start="277:24" pos:end="277:24">=</operator> <literal type="number" pos:start="277:26" pos:end="277:26">0</literal></expr>;</init> <condition pos:start="277:29" pos:end="277:41"><expr pos:start="277:29" pos:end="277:40"><name pos:start="277:29" pos:end="277:29">i</name> <operator pos:start="277:31" pos:end="277:31">&lt;</operator> <name pos:start="277:33" pos:end="277:40"><name pos:start="277:33" pos:end="277:33">s</name><operator pos:start="277:34" pos:end="277:35">-&gt;</operator><name pos:start="277:36" pos:end="277:40">nmean</name></name></expr>;</condition> <incr pos:start="277:43" pos:end="277:45"><expr pos:start="277:43" pos:end="277:45"><name pos:start="277:43" pos:end="277:43">i</name><operator pos:start="277:44" pos:end="277:45">++</operator></expr></incr>)</control><block type="pseudo" pos:start="279:21" pos:end="279:49"><block_content pos:start="279:21" pos:end="279:49">

                    <expr_stmt pos:start="279:21" pos:end="279:49"><expr pos:start="279:21" pos:end="279:48"><name pos:start="279:21" pos:end="279:23">sum</name> <operator pos:start="279:25" pos:end="279:26">+=</operator> <name pos:start="279:28" pos:end="279:48"><name pos:start="279:28" pos:end="279:28">s</name><operator pos:start="279:29" pos:end="279:30">-&gt;</operator><name pos:start="279:31" pos:end="279:36">offset</name><index pos:start="279:37" pos:end="279:45">[<expr pos:start="279:38" pos:end="279:44"><name pos:start="279:38" pos:end="279:44">channel</name></expr>]</index><index pos:start="279:46" pos:end="279:48">[<expr pos:start="279:47" pos:end="279:47"><name pos:start="279:47" pos:end="279:47">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

                <expr_stmt pos:start="281:17" pos:end="281:41"><expr pos:start="281:17" pos:end="281:40"><name pos:start="281:17" pos:end="281:23">coffset</name> <operator pos:start="281:25" pos:end="281:25">=</operator> <name pos:start="281:27" pos:end="281:29">sum</name> <operator pos:start="281:31" pos:end="281:31">/</operator> <name pos:start="281:33" pos:end="281:40"><name pos:start="281:33" pos:end="281:33">s</name><operator pos:start="281:34" pos:end="281:35">-&gt;</operator><name pos:start="281:36" pos:end="281:40">nmean</name></name></expr>;</expr_stmt>

                <if_stmt pos:start="283:17" pos:end="285:91"><if pos:start="283:17" pos:end="285:91">if <condition pos:start="283:20" pos:end="283:36">(<expr pos:start="283:21" pos:end="283:35"><name pos:start="283:21" pos:end="283:30"><name pos:start="283:21" pos:end="283:21">s</name><operator pos:start="283:22" pos:end="283:23">-&gt;</operator><name pos:start="283:24" pos:end="283:30">version</name></name> <operator pos:start="283:32" pos:end="283:33">&gt;=</operator> <literal type="number" pos:start="283:35" pos:end="283:35">2</literal></expr>)</condition><block type="pseudo" pos:start="285:21" pos:end="285:91"><block_content pos:start="285:21" pos:end="285:91">

                    <expr_stmt pos:start="285:21" pos:end="285:91"><expr pos:start="285:21" pos:end="285:90"><name pos:start="285:21" pos:end="285:27">coffset</name> <operator pos:start="285:29" pos:end="285:29">=</operator> <ternary pos:start="285:31" pos:end="285:90"><condition pos:start="285:31" pos:end="285:48"><expr pos:start="285:31" pos:end="285:46"><name pos:start="285:31" pos:end="285:41"><name pos:start="285:31" pos:end="285:31">s</name><operator pos:start="285:32" pos:end="285:33">-&gt;</operator><name pos:start="285:34" pos:end="285:41">bitshift</name></name> <operator pos:start="285:43" pos:end="285:44">==</operator> <literal type="number" pos:start="285:46" pos:end="285:46">0</literal></expr> ?</condition><then pos:start="285:50" pos:end="285:56"> <expr pos:start="285:50" pos:end="285:56"><name pos:start="285:50" pos:end="285:56">coffset</name></expr> </then><else pos:start="285:58" pos:end="285:90">: <expr pos:start="285:60" pos:end="285:90"><name pos:start="285:60" pos:end="285:66">coffset</name> <operator pos:start="285:68" pos:end="285:69">&gt;&gt;</operator> <name pos:start="285:71" pos:end="285:81"><name pos:start="285:71" pos:end="285:71">s</name><operator pos:start="285:72" pos:end="285:73">-&gt;</operator><name pos:start="285:74" pos:end="285:81">bitshift</name></name> <operator pos:start="285:83" pos:end="285:83">-</operator> <literal type="number" pos:start="285:85" pos:end="285:85">1</literal> <operator pos:start="285:87" pos:end="285:88">&gt;&gt;</operator> <literal type="number" pos:start="285:90" pos:end="285:90">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></else></if_stmt>



            <comment type="block" pos:start="291:13" pos:end="291:49">/* decode samples for this channel */</comment>

            <if_stmt pos:start="293:13" pos:end="307:13"><if pos:start="293:13" pos:end="299:13">if <condition pos:start="293:16" pos:end="293:31">(<expr pos:start="293:17" pos:end="293:30"><name pos:start="293:17" pos:end="293:19">cmd</name> <operator pos:start="293:21" pos:end="293:22">==</operator> <name pos:start="293:24" pos:end="293:30">FN_ZERO</name></expr>)</condition> <block pos:start="293:33" pos:end="299:13">{<block_content pos:start="295:17" pos:end="297:47">

                <for pos:start="295:17" pos:end="297:47">for <control pos:start="295:21" pos:end="295:50">(<init pos:start="295:22" pos:end="295:27"><expr pos:start="295:22" pos:end="295:26"><name pos:start="295:22" pos:end="295:22">i</name> <operator pos:start="295:24" pos:end="295:24">=</operator> <literal type="number" pos:start="295:26" pos:end="295:26">0</literal></expr>;</init> <condition pos:start="295:29" pos:end="295:45"><expr pos:start="295:29" pos:end="295:44"><name pos:start="295:29" pos:end="295:29">i</name> <operator pos:start="295:31" pos:end="295:31">&lt;</operator> <name pos:start="295:33" pos:end="295:44"><name pos:start="295:33" pos:end="295:33">s</name><operator pos:start="295:34" pos:end="295:35">-&gt;</operator><name pos:start="295:36" pos:end="295:44">blocksize</name></name></expr>;</condition> <incr pos:start="295:47" pos:end="295:49"><expr pos:start="295:47" pos:end="295:49"><name pos:start="295:47" pos:end="295:47">i</name><operator pos:start="295:48" pos:end="295:49">++</operator></expr></incr>)</control><block type="pseudo" pos:start="297:21" pos:end="297:47"><block_content pos:start="297:21" pos:end="297:47">

                    <expr_stmt pos:start="297:21" pos:end="297:47"><expr pos:start="297:21" pos:end="297:46"><name pos:start="297:21" pos:end="297:42"><name pos:start="297:21" pos:end="297:21">s</name><operator pos:start="297:22" pos:end="297:23">-&gt;</operator><name pos:start="297:24" pos:end="297:30">decoded</name><index pos:start="297:31" pos:end="297:39">[<expr pos:start="297:32" pos:end="297:38"><name pos:start="297:32" pos:end="297:38">channel</name></expr>]</index><index pos:start="297:40" pos:end="297:42">[<expr pos:start="297:41" pos:end="297:41"><name pos:start="297:41" pos:end="297:41">i</name></expr>]</index></name> <operator pos:start="297:44" pos:end="297:44">=</operator> <literal type="number" pos:start="297:46" pos:end="297:46">0</literal></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></if> <else pos:start="299:15" pos:end="307:13">else <block pos:start="299:20" pos:end="307:13">{<block_content pos:start="301:17" pos:end="305:31">

                <if_stmt pos:start="301:17" pos:end="305:31"><if pos:start="301:17" pos:end="305:31">if <condition pos:start="301:20" pos:end="303:76">(<expr pos:start="301:21" pos:end="303:75"><operator pos:start="301:21" pos:end="301:21">(</operator><name pos:start="301:22" pos:end="301:24">ret</name> <operator pos:start="301:26" pos:end="301:26">=</operator> <call pos:start="301:28" pos:end="303:70"><name pos:start="301:28" pos:end="301:46">decode_subframe_lpc</name><argument_list pos:start="301:47" pos:end="303:70">(<argument pos:start="301:48" pos:end="301:48"><expr pos:start="301:48" pos:end="301:48"><name pos:start="301:48" pos:end="301:48">s</name></expr></argument>, <argument pos:start="301:51" pos:end="301:53"><expr pos:start="301:51" pos:end="301:53"><name pos:start="301:51" pos:end="301:53">cmd</name></expr></argument>, <argument pos:start="301:56" pos:end="301:62"><expr pos:start="301:56" pos:end="301:62"><name pos:start="301:56" pos:end="301:62">channel</name></expr></argument>,

                                               <argument pos:start="303:48" pos:end="303:60"><expr pos:start="303:48" pos:end="303:60"><name pos:start="303:48" pos:end="303:60">residual_size</name></expr></argument>, <argument pos:start="303:63" pos:end="303:69"><expr pos:start="303:63" pos:end="303:69"><name pos:start="303:63" pos:end="303:69">coffset</name></expr></argument>)</argument_list></call><operator pos:start="303:71" pos:end="303:71">)</operator> <operator pos:start="303:73" pos:end="303:73">&lt;</operator> <literal type="number" pos:start="303:75" pos:end="303:75">0</literal></expr>)</condition><block type="pseudo" pos:start="305:21" pos:end="305:31"><block_content pos:start="305:21" pos:end="305:31">

                    <return pos:start="305:21" pos:end="305:31">return <expr pos:start="305:28" pos:end="305:30"><name pos:start="305:28" pos:end="305:30">ret</name></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></else></if_stmt>



            <comment type="block" pos:start="311:13" pos:end="311:63">/* update means with info from the current block */</comment>

            <if_stmt pos:start="313:13" pos:end="337:13"><if pos:start="313:13" pos:end="337:13">if <condition pos:start="313:16" pos:end="313:29">(<expr pos:start="313:17" pos:end="313:28"><name pos:start="313:17" pos:end="313:24"><name pos:start="313:17" pos:end="313:17">s</name><operator pos:start="313:18" pos:end="313:19">-&gt;</operator><name pos:start="313:20" pos:end="313:24">nmean</name></name> <operator pos:start="313:26" pos:end="313:26">&gt;</operator> <literal type="number" pos:start="313:28" pos:end="313:28">0</literal></expr>)</condition> <block pos:start="313:31" pos:end="337:13">{<block_content pos:start="315:17" pos:end="335:91">

                <decl_stmt pos:start="315:17" pos:end="315:70"><decl pos:start="315:17" pos:end="315:69"><type pos:start="315:17" pos:end="315:23"><name pos:start="315:17" pos:end="315:23">int32_t</name></type> <name pos:start="315:25" pos:end="315:27">sum</name> <init pos:start="315:29" pos:end="315:69">= <expr pos:start="315:31" pos:end="315:69"><ternary pos:start="315:31" pos:end="315:69"><condition pos:start="315:31" pos:end="315:48"><expr pos:start="315:31" pos:end="315:46"><operator pos:start="315:31" pos:end="315:31">(</operator><name pos:start="315:32" pos:end="315:41"><name pos:start="315:32" pos:end="315:32">s</name><operator pos:start="315:33" pos:end="315:34">-&gt;</operator><name pos:start="315:35" pos:end="315:41">version</name></name> <operator pos:start="315:43" pos:end="315:43">&lt;</operator> <literal type="number" pos:start="315:45" pos:end="315:45">2</literal><operator pos:start="315:46" pos:end="315:46">)</operator></expr> ?</condition><then pos:start="315:50" pos:end="315:50"> <expr pos:start="315:50" pos:end="315:50"><literal type="number" pos:start="315:50" pos:end="315:50">0</literal></expr> </then><else pos:start="315:52" pos:end="315:69">: <expr pos:start="315:54" pos:end="315:69"><name pos:start="315:54" pos:end="315:65"><name pos:start="315:54" pos:end="315:54">s</name><operator pos:start="315:55" pos:end="315:56">-&gt;</operator><name pos:start="315:57" pos:end="315:65">blocksize</name></name> <operator pos:start="315:67" pos:end="315:67">/</operator> <literal type="number" pos:start="315:69" pos:end="315:69">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                <for pos:start="317:17" pos:end="319:50">for <control pos:start="317:21" pos:end="317:50">(<init pos:start="317:22" pos:end="317:27"><expr pos:start="317:22" pos:end="317:26"><name pos:start="317:22" pos:end="317:22">i</name> <operator pos:start="317:24" pos:end="317:24">=</operator> <literal type="number" pos:start="317:26" pos:end="317:26">0</literal></expr>;</init> <condition pos:start="317:29" pos:end="317:45"><expr pos:start="317:29" pos:end="317:44"><name pos:start="317:29" pos:end="317:29">i</name> <operator pos:start="317:31" pos:end="317:31">&lt;</operator> <name pos:start="317:33" pos:end="317:44"><name pos:start="317:33" pos:end="317:33">s</name><operator pos:start="317:34" pos:end="317:35">-&gt;</operator><name pos:start="317:36" pos:end="317:44">blocksize</name></name></expr>;</condition> <incr pos:start="317:47" pos:end="317:49"><expr pos:start="317:47" pos:end="317:49"><name pos:start="317:47" pos:end="317:47">i</name><operator pos:start="317:48" pos:end="317:49">++</operator></expr></incr>)</control><block type="pseudo" pos:start="319:21" pos:end="319:50"><block_content pos:start="319:21" pos:end="319:50">

                    <expr_stmt pos:start="319:21" pos:end="319:50"><expr pos:start="319:21" pos:end="319:49"><name pos:start="319:21" pos:end="319:23">sum</name> <operator pos:start="319:25" pos:end="319:26">+=</operator> <name pos:start="319:28" pos:end="319:49"><name pos:start="319:28" pos:end="319:28">s</name><operator pos:start="319:29" pos:end="319:30">-&gt;</operator><name pos:start="319:31" pos:end="319:37">decoded</name><index pos:start="319:38" pos:end="319:46">[<expr pos:start="319:39" pos:end="319:45"><name pos:start="319:39" pos:end="319:45">channel</name></expr>]</index><index pos:start="319:47" pos:end="319:49">[<expr pos:start="319:48" pos:end="319:48"><name pos:start="319:48" pos:end="319:48">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>



                <for pos:start="323:17" pos:end="325:70">for <control pos:start="323:21" pos:end="323:46">(<init pos:start="323:22" pos:end="323:27"><expr pos:start="323:22" pos:end="323:26"><name pos:start="323:22" pos:end="323:22">i</name> <operator pos:start="323:24" pos:end="323:24">=</operator> <literal type="number" pos:start="323:26" pos:end="323:26">1</literal></expr>;</init> <condition pos:start="323:29" pos:end="323:41"><expr pos:start="323:29" pos:end="323:40"><name pos:start="323:29" pos:end="323:29">i</name> <operator pos:start="323:31" pos:end="323:31">&lt;</operator> <name pos:start="323:33" pos:end="323:40"><name pos:start="323:33" pos:end="323:33">s</name><operator pos:start="323:34" pos:end="323:35">-&gt;</operator><name pos:start="323:36" pos:end="323:40">nmean</name></name></expr>;</condition> <incr pos:start="323:43" pos:end="323:45"><expr pos:start="323:43" pos:end="323:45"><name pos:start="323:43" pos:end="323:43">i</name><operator pos:start="323:44" pos:end="323:45">++</operator></expr></incr>)</control><block type="pseudo" pos:start="325:21" pos:end="325:70"><block_content pos:start="325:21" pos:end="325:70">

                    <expr_stmt pos:start="325:21" pos:end="325:70"><expr pos:start="325:21" pos:end="325:69"><name pos:start="325:21" pos:end="325:45"><name pos:start="325:21" pos:end="325:21">s</name><operator pos:start="325:22" pos:end="325:23">-&gt;</operator><name pos:start="325:24" pos:end="325:29">offset</name><index pos:start="325:30" pos:end="325:38">[<expr pos:start="325:31" pos:end="325:37"><name pos:start="325:31" pos:end="325:37">channel</name></expr>]</index><index pos:start="325:39" pos:end="325:45">[<expr pos:start="325:40" pos:end="325:44"><name pos:start="325:40" pos:end="325:40">i</name> <operator pos:start="325:42" pos:end="325:42">-</operator> <literal type="number" pos:start="325:44" pos:end="325:44">1</literal></expr>]</index></name> <operator pos:start="325:47" pos:end="325:47">=</operator> <name pos:start="325:49" pos:end="325:69"><name pos:start="325:49" pos:end="325:49">s</name><operator pos:start="325:50" pos:end="325:51">-&gt;</operator><name pos:start="325:52" pos:end="325:57">offset</name><index pos:start="325:58" pos:end="325:66">[<expr pos:start="325:59" pos:end="325:65"><name pos:start="325:59" pos:end="325:65">channel</name></expr>]</index><index pos:start="325:67" pos:end="325:69">[<expr pos:start="325:68" pos:end="325:68"><name pos:start="325:68" pos:end="325:68">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>



                <if_stmt pos:start="329:17" pos:end="335:91"><if pos:start="329:17" pos:end="331:74">if <condition pos:start="329:20" pos:end="329:35">(<expr pos:start="329:21" pos:end="329:34"><name pos:start="329:21" pos:end="329:30"><name pos:start="329:21" pos:end="329:21">s</name><operator pos:start="329:22" pos:end="329:23">-&gt;</operator><name pos:start="329:24" pos:end="329:30">version</name></name> <operator pos:start="329:32" pos:end="329:32">&lt;</operator> <literal type="number" pos:start="329:34" pos:end="329:34">2</literal></expr>)</condition><block type="pseudo" pos:start="331:21" pos:end="331:74"><block_content pos:start="331:21" pos:end="331:74">

                    <expr_stmt pos:start="331:21" pos:end="331:74"><expr pos:start="331:21" pos:end="331:73"><name pos:start="331:21" pos:end="331:52"><name pos:start="331:21" pos:end="331:21">s</name><operator pos:start="331:22" pos:end="331:23">-&gt;</operator><name pos:start="331:24" pos:end="331:29">offset</name><index pos:start="331:30" pos:end="331:38">[<expr pos:start="331:31" pos:end="331:37"><name pos:start="331:31" pos:end="331:37">channel</name></expr>]</index><index pos:start="331:39" pos:end="331:52">[<expr pos:start="331:40" pos:end="331:51"><name pos:start="331:40" pos:end="331:47"><name pos:start="331:40" pos:end="331:40">s</name><operator pos:start="331:41" pos:end="331:42">-&gt;</operator><name pos:start="331:43" pos:end="331:47">nmean</name></name> <operator pos:start="331:49" pos:end="331:49">-</operator> <literal type="number" pos:start="331:51" pos:end="331:51">1</literal></expr>]</index></name> <operator pos:start="331:54" pos:end="331:54">=</operator> <name pos:start="331:56" pos:end="331:58">sum</name> <operator pos:start="331:60" pos:end="331:60">/</operator> <name pos:start="331:62" pos:end="331:73"><name pos:start="331:62" pos:end="331:62">s</name><operator pos:start="331:63" pos:end="331:64">-&gt;</operator><name pos:start="331:65" pos:end="331:73">blocksize</name></name></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="333:17" pos:end="335:91">else<block type="pseudo" pos:start="335:21" pos:end="335:91"><block_content pos:start="335:21" pos:end="335:91">

                    <expr_stmt pos:start="335:21" pos:end="335:91"><expr pos:start="335:21" pos:end="335:90"><name pos:start="335:21" pos:end="335:52"><name pos:start="335:21" pos:end="335:21">s</name><operator pos:start="335:22" pos:end="335:23">-&gt;</operator><name pos:start="335:24" pos:end="335:29">offset</name><index pos:start="335:30" pos:end="335:38">[<expr pos:start="335:31" pos:end="335:37"><name pos:start="335:31" pos:end="335:37">channel</name></expr>]</index><index pos:start="335:39" pos:end="335:52">[<expr pos:start="335:40" pos:end="335:51"><name pos:start="335:40" pos:end="335:47"><name pos:start="335:40" pos:end="335:40">s</name><operator pos:start="335:41" pos:end="335:42">-&gt;</operator><name pos:start="335:43" pos:end="335:47">nmean</name></name> <operator pos:start="335:49" pos:end="335:49">-</operator> <literal type="number" pos:start="335:51" pos:end="335:51">1</literal></expr>]</index></name> <operator pos:start="335:54" pos:end="335:54">=</operator> <operator pos:start="335:56" pos:end="335:56">(</operator><name pos:start="335:57" pos:end="335:59">sum</name> <operator pos:start="335:61" pos:end="335:61">/</operator> <name pos:start="335:63" pos:end="335:74"><name pos:start="335:63" pos:end="335:63">s</name><operator pos:start="335:64" pos:end="335:65">-&gt;</operator><name pos:start="335:66" pos:end="335:74">blocksize</name></name><operator pos:start="335:75" pos:end="335:75">)</operator> <operator pos:start="335:77" pos:end="335:78">&lt;&lt;</operator> <name pos:start="335:80" pos:end="335:90"><name pos:start="335:80" pos:end="335:80">s</name><operator pos:start="335:81" pos:end="335:82">-&gt;</operator><name pos:start="335:83" pos:end="335:90">bitshift</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="341:13" pos:end="341:59">/* copy wrap samples for use with next block */</comment>

            <for pos:start="343:13" pos:end="345:79">for <control pos:start="343:17" pos:end="343:43">(<init pos:start="343:18" pos:end="343:31"><expr pos:start="343:18" pos:end="343:30"><name pos:start="343:18" pos:end="343:18">i</name> <operator pos:start="343:20" pos:end="343:20">=</operator> <operator pos:start="343:22" pos:end="343:22">-</operator><name pos:start="343:23" pos:end="343:30"><name pos:start="343:23" pos:end="343:23">s</name><operator pos:start="343:24" pos:end="343:25">-&gt;</operator><name pos:start="343:26" pos:end="343:30">nwrap</name></name></expr>;</init> <condition pos:start="343:33" pos:end="343:38"><expr pos:start="343:33" pos:end="343:37"><name pos:start="343:33" pos:end="343:33">i</name> <operator pos:start="343:35" pos:end="343:35">&lt;</operator> <literal type="number" pos:start="343:37" pos:end="343:37">0</literal></expr>;</condition> <incr pos:start="343:40" pos:end="343:42"><expr pos:start="343:40" pos:end="343:42"><name pos:start="343:40" pos:end="343:40">i</name><operator pos:start="343:41" pos:end="343:42">++</operator></expr></incr>)</control><block type="pseudo" pos:start="345:17" pos:end="345:79"><block_content pos:start="345:17" pos:end="345:79">

                <expr_stmt pos:start="345:17" pos:end="345:79"><expr pos:start="345:17" pos:end="345:78"><name pos:start="345:17" pos:end="345:38"><name pos:start="345:17" pos:end="345:17">s</name><operator pos:start="345:18" pos:end="345:19">-&gt;</operator><name pos:start="345:20" pos:end="345:26">decoded</name><index pos:start="345:27" pos:end="345:35">[<expr pos:start="345:28" pos:end="345:34"><name pos:start="345:28" pos:end="345:34">channel</name></expr>]</index><index pos:start="345:36" pos:end="345:38">[<expr pos:start="345:37" pos:end="345:37"><name pos:start="345:37" pos:end="345:37">i</name></expr>]</index></name> <operator pos:start="345:40" pos:end="345:40">=</operator> <name pos:start="345:42" pos:end="345:78"><name pos:start="345:42" pos:end="345:42">s</name><operator pos:start="345:43" pos:end="345:44">-&gt;</operator><name pos:start="345:45" pos:end="345:51">decoded</name><index pos:start="345:52" pos:end="345:60">[<expr pos:start="345:53" pos:end="345:59"><name pos:start="345:53" pos:end="345:59">channel</name></expr>]</index><index pos:start="345:61" pos:end="345:78">[<expr pos:start="345:62" pos:end="345:77"><name pos:start="345:62" pos:end="345:62">i</name> <operator pos:start="345:64" pos:end="345:64">+</operator> <name pos:start="345:66" pos:end="345:77"><name pos:start="345:66" pos:end="345:66">s</name><operator pos:start="345:67" pos:end="345:68">-&gt;</operator><name pos:start="345:69" pos:end="345:77">blocksize</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>



            <comment type="block" pos:start="349:13" pos:end="351:33">/* shift samples to add in unused zero bits which were removed

             * during encoding */</comment>

            <expr_stmt pos:start="353:13" pos:end="353:49"><expr pos:start="353:13" pos:end="353:48"><call pos:start="353:13" pos:end="353:48"><name pos:start="353:13" pos:end="353:24">fix_bitshift</name><argument_list pos:start="353:25" pos:end="353:48">(<argument pos:start="353:26" pos:end="353:26"><expr pos:start="353:26" pos:end="353:26"><name pos:start="353:26" pos:end="353:26">s</name></expr></argument>, <argument pos:start="353:29" pos:end="353:47"><expr pos:start="353:29" pos:end="353:47"><name pos:start="353:29" pos:end="353:47"><name pos:start="353:29" pos:end="353:29">s</name><operator pos:start="353:30" pos:end="353:31">-&gt;</operator><name pos:start="353:32" pos:end="353:38">decoded</name><index pos:start="353:39" pos:end="353:47">[<expr pos:start="353:40" pos:end="353:46"><name pos:start="353:40" pos:end="353:46">channel</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="357:13" pos:end="357:78">/* if this is the last channel in the block, output the samples */</comment>

            <expr_stmt pos:start="359:13" pos:end="359:26"><expr pos:start="359:13" pos:end="359:25"><name pos:start="359:13" pos:end="359:23"><name pos:start="359:13" pos:end="359:13">s</name><operator pos:start="359:14" pos:end="359:15">-&gt;</operator><name pos:start="359:16" pos:end="359:23">cur_chan</name></name><operator pos:start="359:24" pos:end="359:25">++</operator></expr>;</expr_stmt>

            <if_stmt pos:start="361:13" pos:end="415:13"><if pos:start="361:13" pos:end="415:13">if <condition pos:start="361:16" pos:end="361:43">(<expr pos:start="361:17" pos:end="361:42"><name pos:start="361:17" pos:end="361:27"><name pos:start="361:17" pos:end="361:17">s</name><operator pos:start="361:18" pos:end="361:19">-&gt;</operator><name pos:start="361:20" pos:end="361:27">cur_chan</name></name> <operator pos:start="361:29" pos:end="361:30">==</operator> <name pos:start="361:32" pos:end="361:42"><name pos:start="361:32" pos:end="361:32">s</name><operator pos:start="361:33" pos:end="361:34">-&gt;</operator><name pos:start="361:35" pos:end="361:42">channels</name></name></expr>)</condition> <block pos:start="361:45" pos:end="415:13">{<block_content pos:start="363:17" pos:end="413:35">

                <decl_stmt pos:start="363:17" pos:end="363:36"><decl pos:start="363:17" pos:end="363:35"><type pos:start="363:17" pos:end="363:25"><name pos:start="363:17" pos:end="363:23">uint8_t</name> <modifier pos:start="363:25" pos:end="363:25">*</modifier></type><name pos:start="363:26" pos:end="363:35">samples_u8</name></decl>;</decl_stmt>

                <decl_stmt pos:start="365:17" pos:end="365:37"><decl pos:start="365:17" pos:end="365:36"><type pos:start="365:17" pos:end="365:25"><name pos:start="365:17" pos:end="365:23">int16_t</name> <modifier pos:start="365:25" pos:end="365:25">*</modifier></type><name pos:start="365:26" pos:end="365:36">samples_s16</name></decl>;</decl_stmt>

                <decl_stmt pos:start="367:17" pos:end="367:25"><decl pos:start="367:17" pos:end="367:24"><type pos:start="367:17" pos:end="367:19"><name pos:start="367:17" pos:end="367:19">int</name></type> <name pos:start="367:21" pos:end="367:24">chan</name></decl>;</decl_stmt>



                <comment type="block" pos:start="371:17" pos:end="371:39">/* get output buffer */</comment>

                <expr_stmt pos:start="373:17" pos:end="373:49"><expr pos:start="373:17" pos:end="373:48"><name pos:start="373:17" pos:end="373:33"><name pos:start="373:17" pos:end="373:21">frame</name><operator pos:start="373:22" pos:end="373:23">-&gt;</operator><name pos:start="373:24" pos:end="373:33">nb_samples</name></name> <operator pos:start="373:35" pos:end="373:35">=</operator> <name pos:start="373:37" pos:end="373:48"><name pos:start="373:37" pos:end="373:37">s</name><operator pos:start="373:38" pos:end="373:39">-&gt;</operator><name pos:start="373:40" pos:end="373:48">blocksize</name></name></expr>;</expr_stmt>

                <if_stmt pos:start="375:17" pos:end="377:31"><if pos:start="375:17" pos:end="377:31">if <condition pos:start="375:20" pos:end="375:63">(<expr pos:start="375:21" pos:end="375:62"><operator pos:start="375:21" pos:end="375:21">(</operator><name pos:start="375:22" pos:end="375:24">ret</name> <operator pos:start="375:26" pos:end="375:26">=</operator> <call pos:start="375:28" pos:end="375:57"><name pos:start="375:28" pos:end="375:40">ff_get_buffer</name><argument_list pos:start="375:41" pos:end="375:57">(<argument pos:start="375:42" pos:end="375:46"><expr pos:start="375:42" pos:end="375:46"><name pos:start="375:42" pos:end="375:46">avctx</name></expr></argument>, <argument pos:start="375:49" pos:end="375:53"><expr pos:start="375:49" pos:end="375:53"><name pos:start="375:49" pos:end="375:53">frame</name></expr></argument>, <argument pos:start="375:56" pos:end="375:56"><expr pos:start="375:56" pos:end="375:56"><literal type="number" pos:start="375:56" pos:end="375:56">0</literal></expr></argument>)</argument_list></call><operator pos:start="375:58" pos:end="375:58">)</operator> <operator pos:start="375:60" pos:end="375:60">&lt;</operator> <literal type="number" pos:start="375:62" pos:end="375:62">0</literal></expr>)</condition><block type="pseudo" pos:start="377:21" pos:end="377:31"><block_content pos:start="377:21" pos:end="377:31">

                    <return pos:start="377:21" pos:end="377:31">return <expr pos:start="377:28" pos:end="377:30"><name pos:start="377:28" pos:end="377:30">ret</name></expr>;</return></block_content></block></if></if_stmt>



                <for pos:start="381:17" pos:end="409:17">for <control pos:start="381:21" pos:end="381:58">(<init pos:start="381:22" pos:end="381:30"><expr pos:start="381:22" pos:end="381:29"><name pos:start="381:22" pos:end="381:25">chan</name> <operator pos:start="381:27" pos:end="381:27">=</operator> <literal type="number" pos:start="381:29" pos:end="381:29">0</literal></expr>;</init> <condition pos:start="381:32" pos:end="381:50"><expr pos:start="381:32" pos:end="381:49"><name pos:start="381:32" pos:end="381:35">chan</name> <operator pos:start="381:37" pos:end="381:37">&lt;</operator> <name pos:start="381:39" pos:end="381:49"><name pos:start="381:39" pos:end="381:39">s</name><operator pos:start="381:40" pos:end="381:41">-&gt;</operator><name pos:start="381:42" pos:end="381:49">channels</name></name></expr>;</condition> <incr pos:start="381:52" pos:end="381:57"><expr pos:start="381:52" pos:end="381:57"><name pos:start="381:52" pos:end="381:55">chan</name><operator pos:start="381:56" pos:end="381:57">++</operator></expr></incr>)</control> <block pos:start="381:60" pos:end="409:17">{<block_content pos:start="383:21" pos:end="407:21">

                    <expr_stmt pos:start="383:21" pos:end="383:75"><expr pos:start="383:21" pos:end="383:74"><name pos:start="383:21" pos:end="383:30">samples_u8</name>  <operator pos:start="383:33" pos:end="383:33">=</operator> <operator pos:start="383:35" pos:end="383:35">(</operator><operator pos:start="383:36" pos:end="383:36">(</operator><name pos:start="383:37" pos:end="383:43">uint8_t</name> <operator pos:start="383:45" pos:end="383:45">*</operator><operator pos:start="383:46" pos:end="383:46">*</operator><operator pos:start="383:47" pos:end="383:47">)</operator><name pos:start="383:48" pos:end="383:67"><name pos:start="383:48" pos:end="383:52">frame</name><operator pos:start="383:53" pos:end="383:54">-&gt;</operator><name pos:start="383:55" pos:end="383:67">extended_data</name></name><operator pos:start="383:68" pos:end="383:68">)</operator><index pos:start="383:69" pos:end="383:74">[<expr pos:start="383:70" pos:end="383:73"><name pos:start="383:70" pos:end="383:73">chan</name></expr>]</index></expr>;</expr_stmt>

                    <expr_stmt pos:start="385:21" pos:end="385:75"><expr pos:start="385:21" pos:end="385:74"><name pos:start="385:21" pos:end="385:31">samples_s16</name> <operator pos:start="385:33" pos:end="385:33">=</operator> <operator pos:start="385:35" pos:end="385:35">(</operator><operator pos:start="385:36" pos:end="385:36">(</operator><name pos:start="385:37" pos:end="385:43">int16_t</name> <operator pos:start="385:45" pos:end="385:45">*</operator><operator pos:start="385:46" pos:end="385:46">*</operator><operator pos:start="385:47" pos:end="385:47">)</operator><name pos:start="385:48" pos:end="385:67"><name pos:start="385:48" pos:end="385:52">frame</name><operator pos:start="385:53" pos:end="385:54">-&gt;</operator><name pos:start="385:55" pos:end="385:67">extended_data</name></name><operator pos:start="385:68" pos:end="385:68">)</operator><index pos:start="385:69" pos:end="385:74">[<expr pos:start="385:70" pos:end="385:73"><name pos:start="385:70" pos:end="385:73">chan</name></expr>]</index></expr>;</expr_stmt>

                    <for pos:start="387:21" pos:end="407:21">for <control pos:start="387:25" pos:end="387:54">(<init pos:start="387:26" pos:end="387:31"><expr pos:start="387:26" pos:end="387:30"><name pos:start="387:26" pos:end="387:26">i</name> <operator pos:start="387:28" pos:end="387:28">=</operator> <literal type="number" pos:start="387:30" pos:end="387:30">0</literal></expr>;</init> <condition pos:start="387:33" pos:end="387:49"><expr pos:start="387:33" pos:end="387:48"><name pos:start="387:33" pos:end="387:33">i</name> <operator pos:start="387:35" pos:end="387:35">&lt;</operator> <name pos:start="387:37" pos:end="387:48"><name pos:start="387:37" pos:end="387:37">s</name><operator pos:start="387:38" pos:end="387:39">-&gt;</operator><name pos:start="387:40" pos:end="387:48">blocksize</name></name></expr>;</condition> <incr pos:start="387:51" pos:end="387:53"><expr pos:start="387:51" pos:end="387:53"><name pos:start="387:51" pos:end="387:51">i</name><operator pos:start="387:52" pos:end="387:53">++</operator></expr></incr>)</control> <block pos:start="387:56" pos:end="407:21">{<block_content pos:start="389:25" pos:end="405:25">

                        <switch pos:start="389:25" pos:end="405:25">switch <condition pos:start="389:32" pos:end="389:50">(<expr pos:start="389:33" pos:end="389:49"><name pos:start="389:33" pos:end="389:49"><name pos:start="389:33" pos:end="389:33">s</name><operator pos:start="389:34" pos:end="389:35">-&gt;</operator><name pos:start="389:36" pos:end="389:49">internal_ftype</name></name></expr>)</condition> <block pos:start="389:52" pos:end="405:25">{<block_content pos:start="391:25" pos:end="403:34">

                        <case pos:start="391:25" pos:end="391:37">case <expr pos:start="391:30" pos:end="391:36"><name pos:start="391:30" pos:end="391:36">TYPE_U8</name></expr>:</case>

                            <expr_stmt pos:start="393:29" pos:end="393:79"><expr pos:start="393:29" pos:end="393:78"><operator pos:start="393:29" pos:end="393:29">*</operator><name pos:start="393:30" pos:end="393:39">samples_u8</name><operator pos:start="393:40" pos:end="393:41">++</operator> <operator pos:start="393:43" pos:end="393:43">=</operator> <call pos:start="393:45" pos:end="393:78"><name pos:start="393:45" pos:end="393:57">av_clip_uint8</name><argument_list pos:start="393:58" pos:end="393:78">(<argument pos:start="393:59" pos:end="393:77"><expr pos:start="393:59" pos:end="393:77"><name pos:start="393:59" pos:end="393:77"><name pos:start="393:59" pos:end="393:59">s</name><operator pos:start="393:60" pos:end="393:61">-&gt;</operator><name pos:start="393:62" pos:end="393:68">decoded</name><index pos:start="393:69" pos:end="393:74">[<expr pos:start="393:70" pos:end="393:73"><name pos:start="393:70" pos:end="393:73">chan</name></expr>]</index><index pos:start="393:75" pos:end="393:77">[<expr pos:start="393:76" pos:end="393:76"><name pos:start="393:76" pos:end="393:76">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="395:29" pos:end="395:34">break;</break>

                        <case pos:start="397:25" pos:end="397:40">case <expr pos:start="397:30" pos:end="397:39"><name pos:start="397:30" pos:end="397:39">TYPE_S16HL</name></expr>:</case>

                        <case pos:start="399:25" pos:end="399:40">case <expr pos:start="399:30" pos:end="399:39"><name pos:start="399:30" pos:end="399:39">TYPE_S16LH</name></expr>:</case>

                            <expr_stmt pos:start="401:29" pos:end="401:80"><expr pos:start="401:29" pos:end="401:79"><operator pos:start="401:29" pos:end="401:29">*</operator><name pos:start="401:30" pos:end="401:40">samples_s16</name><operator pos:start="401:41" pos:end="401:42">++</operator> <operator pos:start="401:44" pos:end="401:44">=</operator> <call pos:start="401:46" pos:end="401:79"><name pos:start="401:46" pos:end="401:58">av_clip_int16</name><argument_list pos:start="401:59" pos:end="401:79">(<argument pos:start="401:60" pos:end="401:78"><expr pos:start="401:60" pos:end="401:78"><name pos:start="401:60" pos:end="401:78"><name pos:start="401:60" pos:end="401:60">s</name><operator pos:start="401:61" pos:end="401:62">-&gt;</operator><name pos:start="401:63" pos:end="401:69">decoded</name><index pos:start="401:70" pos:end="401:75">[<expr pos:start="401:71" pos:end="401:74"><name pos:start="401:71" pos:end="401:74">chan</name></expr>]</index><index pos:start="401:76" pos:end="401:78">[<expr pos:start="401:77" pos:end="401:77"><name pos:start="401:77" pos:end="401:77">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="403:29" pos:end="403:34">break;</break>

                        </block_content>}</block></switch>

                    </block_content>}</block></for>

                </block_content>}</block></for>



                <expr_stmt pos:start="413:17" pos:end="413:35"><expr pos:start="413:17" pos:end="413:34"><operator pos:start="413:17" pos:end="413:17">*</operator><name pos:start="413:18" pos:end="413:30">got_frame_ptr</name> <operator pos:start="413:32" pos:end="413:32">=</operator> <literal type="number" pos:start="413:34" pos:end="413:34">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="421:5" pos:end="423:27"><if pos:start="421:5" pos:end="423:27">if <condition pos:start="421:8" pos:end="421:34">(<expr pos:start="421:9" pos:end="421:33"><name pos:start="421:9" pos:end="421:19"><name pos:start="421:9" pos:end="421:9">s</name><operator pos:start="421:10" pos:end="421:11">-&gt;</operator><name pos:start="421:12" pos:end="421:19">cur_chan</name></name> <operator pos:start="421:21" pos:end="421:21">&lt;</operator> <name pos:start="421:23" pos:end="421:33"><name pos:start="421:23" pos:end="421:23">s</name><operator pos:start="421:24" pos:end="421:25">-&gt;</operator><name pos:start="421:26" pos:end="421:33">channels</name></name></expr>)</condition><block type="pseudo" pos:start="423:9" pos:end="423:27"><block_content pos:start="423:9" pos:end="423:27">

        <expr_stmt pos:start="423:9" pos:end="423:27"><expr pos:start="423:9" pos:end="423:26"><operator pos:start="423:9" pos:end="423:9">*</operator><name pos:start="423:10" pos:end="423:22">got_frame_ptr</name> <operator pos:start="423:24" pos:end="423:24">=</operator> <literal type="number" pos:start="423:26" pos:end="423:26">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



<label pos:start="427:1" pos:end="427:13"><name pos:start="427:1" pos:end="427:12">finish_frame</name>:</label>

    <expr_stmt pos:start="429:5" pos:end="429:76"><expr pos:start="429:5" pos:end="429:75"><name pos:start="429:5" pos:end="429:15"><name pos:start="429:5" pos:end="429:5">s</name><operator pos:start="429:6" pos:end="429:7">-&gt;</operator><name pos:start="429:8" pos:end="429:15">bitindex</name></name> <operator pos:start="429:17" pos:end="429:17">=</operator> <call pos:start="429:19" pos:end="429:40"><name pos:start="429:19" pos:end="429:32">get_bits_count</name><argument_list pos:start="429:33" pos:end="429:40">(<argument pos:start="429:34" pos:end="429:39"><expr pos:start="429:34" pos:end="429:39"><operator pos:start="429:34" pos:end="429:34">&amp;</operator><name pos:start="429:35" pos:end="429:39"><name pos:start="429:35" pos:end="429:35">s</name><operator pos:start="429:36" pos:end="429:37">-&gt;</operator><name pos:start="429:38" pos:end="429:39">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="429:42" pos:end="429:42">-</operator> <literal type="number" pos:start="429:44" pos:end="429:44">8</literal> <operator pos:start="429:46" pos:end="429:46">*</operator> <operator pos:start="429:48" pos:end="429:48">(</operator><call pos:start="429:49" pos:end="429:70"><name pos:start="429:49" pos:end="429:62">get_bits_count</name><argument_list pos:start="429:63" pos:end="429:70">(<argument pos:start="429:64" pos:end="429:69"><expr pos:start="429:64" pos:end="429:69"><operator pos:start="429:64" pos:end="429:64">&amp;</operator><name pos:start="429:65" pos:end="429:69"><name pos:start="429:65" pos:end="429:65">s</name><operator pos:start="429:66" pos:end="429:67">-&gt;</operator><name pos:start="429:68" pos:end="429:69">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="429:72" pos:end="429:72">/</operator> <literal type="number" pos:start="429:74" pos:end="429:74">8</literal><operator pos:start="429:75" pos:end="429:75">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="431:5" pos:end="431:45"><expr pos:start="431:5" pos:end="431:44"><name pos:start="431:5" pos:end="431:5">i</name>           <operator pos:start="431:17" pos:end="431:17">=</operator> <call pos:start="431:19" pos:end="431:40"><name pos:start="431:19" pos:end="431:32">get_bits_count</name><argument_list pos:start="431:33" pos:end="431:40">(<argument pos:start="431:34" pos:end="431:39"><expr pos:start="431:34" pos:end="431:39"><operator pos:start="431:34" pos:end="431:34">&amp;</operator><name pos:start="431:35" pos:end="431:39"><name pos:start="431:35" pos:end="431:35">s</name><operator pos:start="431:36" pos:end="431:37">-&gt;</operator><name pos:start="431:38" pos:end="431:39">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="431:42" pos:end="431:42">/</operator> <literal type="number" pos:start="431:44" pos:end="431:44">8</literal></expr>;</expr_stmt>

    <if_stmt pos:start="433:5" pos:end="443:5"><if pos:start="433:5" pos:end="443:5">if <condition pos:start="433:8" pos:end="433:21">(<expr pos:start="433:9" pos:end="433:20"><name pos:start="433:9" pos:end="433:9">i</name> <operator pos:start="433:11" pos:end="433:11">&gt;</operator> <name pos:start="433:13" pos:end="433:20">buf_size</name></expr>)</condition> <block pos:start="433:23" pos:end="443:5">{<block_content pos:start="435:9" pos:end="441:35">

        <expr_stmt pos:start="435:9" pos:end="435:71"><expr pos:start="435:9" pos:end="435:70"><call pos:start="435:9" pos:end="435:70"><name pos:start="435:9" pos:end="435:14">av_log</name><argument_list pos:start="435:15" pos:end="435:70">(<argument pos:start="435:16" pos:end="435:23"><expr pos:start="435:16" pos:end="435:23"><name pos:start="435:16" pos:end="435:23"><name pos:start="435:16" pos:end="435:16">s</name><operator pos:start="435:17" pos:end="435:18">-&gt;</operator><name pos:start="435:19" pos:end="435:23">avctx</name></name></expr></argument>, <argument pos:start="435:26" pos:end="435:37"><expr pos:start="435:26" pos:end="435:37"><name pos:start="435:26" pos:end="435:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="435:40" pos:end="435:55"><expr pos:start="435:40" pos:end="435:55"><literal type="string" pos:start="435:40" pos:end="435:55">"overread: %d\n"</literal></expr></argument>, <argument pos:start="435:58" pos:end="435:69"><expr pos:start="435:58" pos:end="435:69"><name pos:start="435:58" pos:end="435:58">i</name> <operator pos:start="435:60" pos:end="435:60">-</operator> <name pos:start="435:62" pos:end="435:69">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="437:9" pos:end="437:31"><expr pos:start="437:9" pos:end="437:30"><name pos:start="437:9" pos:end="437:25"><name pos:start="437:9" pos:end="437:9">s</name><operator pos:start="437:10" pos:end="437:11">-&gt;</operator><name pos:start="437:12" pos:end="437:25">bitstream_size</name></name>  <operator pos:start="437:28" pos:end="437:28">=</operator> <literal type="number" pos:start="437:30" pos:end="437:30">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="439:9" pos:end="439:31"><expr pos:start="439:9" pos:end="439:30"><name pos:start="439:9" pos:end="439:26"><name pos:start="439:9" pos:end="439:9">s</name><operator pos:start="439:10" pos:end="439:11">-&gt;</operator><name pos:start="439:12" pos:end="439:26">bitstream_index</name></name> <operator pos:start="439:28" pos:end="439:28">=</operator> <literal type="number" pos:start="439:30" pos:end="439:30">0</literal></expr>;</expr_stmt>

        <return pos:start="441:9" pos:end="441:35">return <expr pos:start="441:16" pos:end="441:34"><name pos:start="441:16" pos:end="441:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="445:5" pos:end="455:17"><if pos:start="445:5" pos:end="453:5">if <condition pos:start="445:8" pos:end="445:26">(<expr pos:start="445:9" pos:end="445:25"><name pos:start="445:9" pos:end="445:25"><name pos:start="445:9" pos:end="445:9">s</name><operator pos:start="445:10" pos:end="445:11">-&gt;</operator><name pos:start="445:12" pos:end="445:25">bitstream_size</name></name></expr>)</condition> <block pos:start="445:28" pos:end="453:5">{<block_content pos:start="447:9" pos:end="451:30">

        <expr_stmt pos:start="447:9" pos:end="447:32"><expr pos:start="447:9" pos:end="447:31"><name pos:start="447:9" pos:end="447:26"><name pos:start="447:9" pos:end="447:9">s</name><operator pos:start="447:10" pos:end="447:11">-&gt;</operator><name pos:start="447:12" pos:end="447:26">bitstream_index</name></name> <operator pos:start="447:28" pos:end="447:29">+=</operator> <name pos:start="447:31" pos:end="447:31">i</name></expr>;</expr_stmt>

        <expr_stmt pos:start="449:9" pos:end="449:32"><expr pos:start="449:9" pos:end="449:31"><name pos:start="449:9" pos:end="449:25"><name pos:start="449:9" pos:end="449:9">s</name><operator pos:start="449:10" pos:end="449:11">-&gt;</operator><name pos:start="449:12" pos:end="449:25">bitstream_size</name></name>  <operator pos:start="449:28" pos:end="449:29">-=</operator> <name pos:start="449:31" pos:end="449:31">i</name></expr>;</expr_stmt>

        <return pos:start="451:9" pos:end="451:30">return <expr pos:start="451:16" pos:end="451:29"><name pos:start="451:16" pos:end="451:29">input_buf_size</name></expr>;</return>

    </block_content>}</block></if> <else pos:start="453:7" pos:end="455:17">else<block type="pseudo" pos:start="455:9" pos:end="455:17"><block_content pos:start="455:9" pos:end="455:17">

        <return pos:start="455:9" pos:end="455:17">return <expr pos:start="455:16" pos:end="455:16"><name pos:start="455:16" pos:end="455:16">i</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>
</unit>
