<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22454.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">set_string_number</name><parameter_list pos:start="1:29" pos:end="1:86">(<parameter pos:start="1:30" pos:end="1:38"><decl pos:start="1:30" pos:end="1:38"><type pos:start="1:30" pos:end="1:38"><name pos:start="1:30" pos:end="1:33">void</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:38">obj</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:57"><decl pos:start="1:41" pos:end="1:57"><type pos:start="1:41" pos:end="1:57"><specifier pos:start="1:41" pos:end="1:45">const</specifier> <name pos:start="1:47" pos:end="1:54">AVOption</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:57">o</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:74"><decl pos:start="1:60" pos:end="1:74"><type pos:start="1:60" pos:end="1:74"><specifier pos:start="1:60" pos:end="1:64">const</specifier> <name pos:start="1:66" pos:end="1:69">char</name> <modifier pos:start="1:71" pos:end="1:71">*</modifier></type><name pos:start="1:72" pos:end="1:74">val</name></decl></parameter>, <parameter pos:start="1:77" pos:end="1:85"><decl pos:start="1:77" pos:end="1:85"><type pos:start="1:77" pos:end="1:85"><name pos:start="1:77" pos:end="1:80">void</name> <modifier pos:start="1:82" pos:end="1:82">*</modifier></type><name pos:start="1:83" pos:end="1:85">dst</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="107:1">{<block_content pos:start="5:5" pos:end="105:13">

    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">0</literal></expr></init></decl>, <decl pos:start="5:18" pos:end="5:29"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:18" pos:end="5:25">notfirst</name> <init pos:start="5:27" pos:end="5:29">= <expr pos:start="5:29" pos:end="5:29"><literal type="number" pos:start="5:29" pos:end="5:29">0</literal></expr></init></decl>;</decl_stmt>

    <for pos:start="7:5" pos:end="101:5">for <control pos:start="7:9" pos:end="7:12">(<init pos:start="7:10" pos:end="7:10">;</init><condition pos:start="7:11" pos:end="7:11">;</condition><incr/>)</control> <block pos:start="7:14" pos:end="101:5">{<block_content pos:start="9:9" pos:end="99:21">

        <decl_stmt pos:start="9:9" pos:end="9:23"><decl pos:start="9:9" pos:end="9:13"><type pos:start="9:9" pos:end="9:11"><name pos:start="9:9" pos:end="9:11">int</name></type> <name pos:start="9:13" pos:end="9:13">i</name></decl>, <decl pos:start="9:16" pos:end="9:22"><type ref="prev" pos:start="9:9" pos:end="9:11"/><name pos:start="9:16" pos:end="9:18">den</name> <init pos:start="9:20" pos:end="9:22">= <expr pos:start="9:22" pos:end="9:22"><literal type="number" pos:start="9:22" pos:end="9:22">1</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="11:9" pos:end="11:22"><decl pos:start="11:9" pos:end="11:21"><type pos:start="11:9" pos:end="11:12"><name pos:start="11:9" pos:end="11:12">char</name></type> <name pos:start="11:14" pos:end="11:21"><name pos:start="11:14" pos:end="11:16">buf</name><index pos:start="11:17" pos:end="11:21">[<expr pos:start="11:18" pos:end="11:20"><literal type="number" pos:start="11:18" pos:end="11:20">256</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="13:9" pos:end="13:20"><decl pos:start="13:9" pos:end="13:19"><type pos:start="13:9" pos:end="13:11"><name pos:start="13:9" pos:end="13:11">int</name></type> <name pos:start="13:13" pos:end="13:15">cmd</name> <init pos:start="13:17" pos:end="13:19">= <expr pos:start="13:19" pos:end="13:19"><literal type="number" pos:start="13:19" pos:end="13:19">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:26"><decl pos:start="15:9" pos:end="15:16"><type pos:start="15:9" pos:end="15:14"><name pos:start="15:9" pos:end="15:14">double</name></type> <name pos:start="15:16" pos:end="15:16">d</name></decl>, <decl pos:start="15:19" pos:end="15:25"><type ref="prev" pos:start="15:9" pos:end="15:14"/><name pos:start="15:19" pos:end="15:21">num</name> <init pos:start="15:23" pos:end="15:25">= <expr pos:start="15:25" pos:end="15:25"><literal type="number" pos:start="15:25" pos:end="15:25">1</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="17:9" pos:end="17:27"><decl pos:start="17:9" pos:end="17:26"><type pos:start="17:9" pos:end="17:15"><name pos:start="17:9" pos:end="17:15">int64_t</name></type> <name pos:start="17:17" pos:end="17:22">intnum</name> <init pos:start="17:24" pos:end="17:26">= <expr pos:start="17:26" pos:end="17:26"><literal type="number" pos:start="17:26" pos:end="17:26">1</literal></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="21:9" pos:end="23:27"><if pos:start="21:9" pos:end="23:27">if <condition pos:start="21:12" pos:end="21:39">(<expr pos:start="21:13" pos:end="21:38"><operator pos:start="21:13" pos:end="21:13">*</operator><name pos:start="21:14" pos:end="21:16">val</name> <operator pos:start="21:18" pos:end="21:19">==</operator> <literal type="char" pos:start="21:21" pos:end="21:23">'+'</literal> <operator pos:start="21:25" pos:end="21:26">||</operator> <operator pos:start="21:28" pos:end="21:28">*</operator><name pos:start="21:29" pos:end="21:31">val</name> <operator pos:start="21:33" pos:end="21:34">==</operator> <literal type="char" pos:start="21:36" pos:end="21:38">'-'</literal></expr>)</condition><block type="pseudo" pos:start="23:13" pos:end="23:27"><block_content pos:start="23:13" pos:end="23:27">

            <expr_stmt pos:start="23:13" pos:end="23:27"><expr pos:start="23:13" pos:end="23:26"><name pos:start="23:13" pos:end="23:15">cmd</name> <operator pos:start="23:17" pos:end="23:17">=</operator> <operator pos:start="23:19" pos:end="23:19">*</operator><operator pos:start="23:20" pos:end="23:20">(</operator><name pos:start="23:21" pos:end="23:23">val</name><operator pos:start="23:24" pos:end="23:25">++</operator><operator pos:start="23:26" pos:end="23:26">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <for pos:start="27:9" pos:end="29:28">for <control pos:start="27:13" pos:end="27:89">(<init pos:start="27:14" pos:end="27:19"><expr pos:start="27:14" pos:end="27:18"><name pos:start="27:14" pos:end="27:14">i</name> <operator pos:start="27:16" pos:end="27:16">=</operator> <literal type="number" pos:start="27:18" pos:end="27:18">0</literal></expr>;</init> <condition pos:start="27:21" pos:end="27:84"><expr pos:start="27:21" pos:end="27:83"><name pos:start="27:21" pos:end="27:21">i</name> <operator pos:start="27:23" pos:end="27:23">&lt;</operator> <sizeof pos:start="27:25" pos:end="27:35">sizeof<argument_list pos:start="27:31" pos:end="27:35">(<argument pos:start="27:32" pos:end="27:34"><expr pos:start="27:32" pos:end="27:34"><name pos:start="27:32" pos:end="27:34">buf</name></expr></argument>)</argument_list></sizeof> <operator pos:start="27:37" pos:end="27:37">-</operator> <literal type="number" pos:start="27:39" pos:end="27:39">1</literal> <operator pos:start="27:41" pos:end="27:42">&amp;&amp;</operator> <name pos:start="27:44" pos:end="27:49"><name pos:start="27:44" pos:end="27:46">val</name><index pos:start="27:47" pos:end="27:49">[<expr pos:start="27:48" pos:end="27:48"><name pos:start="27:48" pos:end="27:48">i</name></expr>]</index></name> <operator pos:start="27:51" pos:end="27:52">&amp;&amp;</operator> <name pos:start="27:54" pos:end="27:59"><name pos:start="27:54" pos:end="27:56">val</name><index pos:start="27:57" pos:end="27:59">[<expr pos:start="27:58" pos:end="27:58"><name pos:start="27:58" pos:end="27:58">i</name></expr>]</index></name> <operator pos:start="27:61" pos:end="27:62">!=</operator> <literal type="char" pos:start="27:64" pos:end="27:66">'+'</literal> <operator pos:start="27:68" pos:end="27:69">&amp;&amp;</operator> <name pos:start="27:71" pos:end="27:76"><name pos:start="27:71" pos:end="27:73">val</name><index pos:start="27:74" pos:end="27:76">[<expr pos:start="27:75" pos:end="27:75"><name pos:start="27:75" pos:end="27:75">i</name></expr>]</index></name> <operator pos:start="27:78" pos:end="27:79">!=</operator> <literal type="char" pos:start="27:81" pos:end="27:83">'-'</literal></expr>;</condition> <incr pos:start="27:86" pos:end="27:88"><expr pos:start="27:86" pos:end="27:88"><name pos:start="27:86" pos:end="27:86">i</name><operator pos:start="27:87" pos:end="27:88">++</operator></expr></incr>)</control><block type="pseudo" pos:start="29:13" pos:end="29:28"><block_content pos:start="29:13" pos:end="29:28">

            <expr_stmt pos:start="29:13" pos:end="29:28"><expr pos:start="29:13" pos:end="29:27"><name pos:start="29:13" pos:end="29:18"><name pos:start="29:13" pos:end="29:15">buf</name><index pos:start="29:16" pos:end="29:18">[<expr pos:start="29:17" pos:end="29:17"><name pos:start="29:17" pos:end="29:17">i</name></expr>]</index></name> <operator pos:start="29:20" pos:end="29:20">=</operator> <name pos:start="29:22" pos:end="29:27"><name pos:start="29:22" pos:end="29:24">val</name><index pos:start="29:25" pos:end="29:27">[<expr pos:start="29:26" pos:end="29:26"><name pos:start="29:26" pos:end="29:26">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt pos:start="31:9" pos:end="31:19"><expr pos:start="31:9" pos:end="31:18"><name pos:start="31:9" pos:end="31:14"><name pos:start="31:9" pos:end="31:11">buf</name><index pos:start="31:12" pos:end="31:14">[<expr pos:start="31:13" pos:end="31:13"><name pos:start="31:13" pos:end="31:13">i</name></expr>]</index></name> <operator pos:start="31:16" pos:end="31:16">=</operator> <literal type="number" pos:start="31:18" pos:end="31:18">0</literal></expr>;</expr_stmt>



        <block pos:start="35:9" pos:end="67:9">{<block_content pos:start="37:13" pos:end="65:13">

            <decl_stmt pos:start="37:13" pos:end="37:75"><decl pos:start="37:13" pos:end="37:74"><type pos:start="37:13" pos:end="37:28"><specifier pos:start="37:13" pos:end="37:17">const</specifier> <name pos:start="37:19" pos:end="37:26">AVOption</name> <modifier pos:start="37:28" pos:end="37:28">*</modifier></type><name pos:start="37:29" pos:end="37:35">o_named</name> <init pos:start="37:37" pos:end="37:74">= <expr pos:start="37:39" pos:end="37:74"><call pos:start="37:39" pos:end="37:74"><name pos:start="37:39" pos:end="37:49">av_opt_find</name><argument_list pos:start="37:50" pos:end="37:74">(<argument pos:start="37:51" pos:end="37:53"><expr pos:start="37:51" pos:end="37:53"><name pos:start="37:51" pos:end="37:53">obj</name></expr></argument>, <argument pos:start="37:56" pos:end="37:58"><expr pos:start="37:56" pos:end="37:58"><name pos:start="37:56" pos:end="37:58">buf</name></expr></argument>, <argument pos:start="37:61" pos:end="37:67"><expr pos:start="37:61" pos:end="37:67"><name pos:start="37:61" pos:end="37:67"><name pos:start="37:61" pos:end="37:61">o</name><operator pos:start="37:62" pos:end="37:63">-&gt;</operator><name pos:start="37:64" pos:end="37:67">unit</name></name></expr></argument>, <argument pos:start="37:70" pos:end="37:70"><expr pos:start="37:70" pos:end="37:70"><literal type="number" pos:start="37:70" pos:end="37:70">0</literal></expr></argument>, <argument pos:start="37:73" pos:end="37:73"><expr pos:start="37:73" pos:end="37:73"><literal type="number" pos:start="37:73" pos:end="37:73">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="39:13" pos:end="65:13"><if pos:start="39:13" pos:end="41:44">if <condition pos:start="39:16" pos:end="39:62">(<expr pos:start="39:17" pos:end="39:61"><name pos:start="39:17" pos:end="39:23">o_named</name> <operator pos:start="39:25" pos:end="39:26">&amp;&amp;</operator> <name pos:start="39:28" pos:end="39:40"><name pos:start="39:28" pos:end="39:34">o_named</name><operator pos:start="39:35" pos:end="39:36">-&gt;</operator><name pos:start="39:37" pos:end="39:40">type</name></name> <operator pos:start="39:42" pos:end="39:43">==</operator> <name pos:start="39:45" pos:end="39:61">AV_OPT_TYPE_CONST</name></expr>)</condition><block type="pseudo" pos:start="41:17" pos:end="41:44"><block_content pos:start="41:17" pos:end="41:44">

                <expr_stmt pos:start="41:17" pos:end="41:44"><expr pos:start="41:17" pos:end="41:43"><name pos:start="41:17" pos:end="41:17">d</name> <operator pos:start="41:19" pos:end="41:19">=</operator> <call pos:start="41:21" pos:end="41:43"><name pos:start="41:21" pos:end="41:34">DEFAULT_NUMVAL</name><argument_list pos:start="41:35" pos:end="41:43">(<argument pos:start="41:36" pos:end="41:42"><expr pos:start="41:36" pos:end="41:42"><name pos:start="41:36" pos:end="41:42">o_named</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="43:13" pos:end="43:68">else if <condition pos:start="43:21" pos:end="43:45">(<expr pos:start="43:22" pos:end="43:44"><operator pos:start="43:22" pos:end="43:22">!</operator><call pos:start="43:23" pos:end="43:44"><name pos:start="43:23" pos:end="43:28">strcmp</name><argument_list pos:start="43:29" pos:end="43:44">(<argument pos:start="43:30" pos:end="43:32"><expr pos:start="43:30" pos:end="43:32"><name pos:start="43:30" pos:end="43:32">buf</name></expr></argument>, <argument pos:start="43:35" pos:end="43:43"><expr pos:start="43:35" pos:end="43:43"><literal type="string" pos:start="43:35" pos:end="43:43">"default"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="43:47" pos:end="43:68"><block_content pos:start="43:47" pos:end="43:68"> <expr_stmt pos:start="43:47" pos:end="43:68"><expr pos:start="43:47" pos:end="43:67"><name pos:start="43:47" pos:end="43:47">d</name> <operator pos:start="43:49" pos:end="43:49">=</operator> <call pos:start="43:51" pos:end="43:67"><name pos:start="43:51" pos:end="43:64">DEFAULT_NUMVAL</name><argument_list pos:start="43:65" pos:end="43:67">(<argument pos:start="43:66" pos:end="43:66"><expr pos:start="43:66" pos:end="43:66"><name pos:start="43:66" pos:end="43:66">o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="45:13" pos:end="45:57">else if <condition pos:start="45:21" pos:end="45:45">(<expr pos:start="45:22" pos:end="45:44"><operator pos:start="45:22" pos:end="45:22">!</operator><call pos:start="45:23" pos:end="45:44"><name pos:start="45:23" pos:end="45:28">strcmp</name><argument_list pos:start="45:29" pos:end="45:44">(<argument pos:start="45:30" pos:end="45:32"><expr pos:start="45:30" pos:end="45:32"><name pos:start="45:30" pos:end="45:32">buf</name></expr></argument>, <argument pos:start="45:35" pos:end="45:39"><expr pos:start="45:35" pos:end="45:39"><literal type="string" pos:start="45:35" pos:end="45:39">"max"</literal></expr></argument>    )</argument_list></call></expr>)</condition><block type="pseudo" pos:start="45:47" pos:end="45:57"><block_content pos:start="45:47" pos:end="45:57"> <expr_stmt pos:start="45:47" pos:end="45:57"><expr pos:start="45:47" pos:end="45:56"><name pos:start="45:47" pos:end="45:47">d</name> <operator pos:start="45:49" pos:end="45:49">=</operator> <name pos:start="45:51" pos:end="45:56"><name pos:start="45:51" pos:end="45:51">o</name><operator pos:start="45:52" pos:end="45:53">-&gt;</operator><name pos:start="45:54" pos:end="45:56">max</name></name></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="47:13" pos:end="47:57">else if <condition pos:start="47:21" pos:end="47:45">(<expr pos:start="47:22" pos:end="47:44"><operator pos:start="47:22" pos:end="47:22">!</operator><call pos:start="47:23" pos:end="47:44"><name pos:start="47:23" pos:end="47:28">strcmp</name><argument_list pos:start="47:29" pos:end="47:44">(<argument pos:start="47:30" pos:end="47:32"><expr pos:start="47:30" pos:end="47:32"><name pos:start="47:30" pos:end="47:32">buf</name></expr></argument>, <argument pos:start="47:35" pos:end="47:39"><expr pos:start="47:35" pos:end="47:39"><literal type="string" pos:start="47:35" pos:end="47:39">"min"</literal></expr></argument>    )</argument_list></call></expr>)</condition><block type="pseudo" pos:start="47:47" pos:end="47:57"><block_content pos:start="47:47" pos:end="47:57"> <expr_stmt pos:start="47:47" pos:end="47:57"><expr pos:start="47:47" pos:end="47:56"><name pos:start="47:47" pos:end="47:47">d</name> <operator pos:start="47:49" pos:end="47:49">=</operator> <name pos:start="47:51" pos:end="47:56"><name pos:start="47:51" pos:end="47:51">o</name><operator pos:start="47:52" pos:end="47:53">-&gt;</operator><name pos:start="47:54" pos:end="47:56">min</name></name></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="49:13" pos:end="49:52">else if <condition pos:start="49:21" pos:end="49:45">(<expr pos:start="49:22" pos:end="49:44"><operator pos:start="49:22" pos:end="49:22">!</operator><call pos:start="49:23" pos:end="49:44"><name pos:start="49:23" pos:end="49:28">strcmp</name><argument_list pos:start="49:29" pos:end="49:44">(<argument pos:start="49:30" pos:end="49:32"><expr pos:start="49:30" pos:end="49:32"><name pos:start="49:30" pos:end="49:32">buf</name></expr></argument>, <argument pos:start="49:35" pos:end="49:40"><expr pos:start="49:35" pos:end="49:40"><literal type="string" pos:start="49:35" pos:end="49:40">"none"</literal></expr></argument>   )</argument_list></call></expr>)</condition><block type="pseudo" pos:start="49:47" pos:end="49:52"><block_content pos:start="49:47" pos:end="49:52"> <expr_stmt pos:start="49:47" pos:end="49:52"><expr pos:start="49:47" pos:end="49:51"><name pos:start="49:47" pos:end="49:47">d</name> <operator pos:start="49:49" pos:end="49:49">=</operator> <literal type="number" pos:start="49:51" pos:end="49:51">0</literal></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="51:13" pos:end="51:53">else if <condition pos:start="51:21" pos:end="51:45">(<expr pos:start="51:22" pos:end="51:44"><operator pos:start="51:22" pos:end="51:22">!</operator><call pos:start="51:23" pos:end="51:44"><name pos:start="51:23" pos:end="51:28">strcmp</name><argument_list pos:start="51:29" pos:end="51:44">(<argument pos:start="51:30" pos:end="51:32"><expr pos:start="51:30" pos:end="51:32"><name pos:start="51:30" pos:end="51:32">buf</name></expr></argument>, <argument pos:start="51:35" pos:end="51:39"><expr pos:start="51:35" pos:end="51:39"><literal type="string" pos:start="51:35" pos:end="51:39">"all"</literal></expr></argument>    )</argument_list></call></expr>)</condition><block type="pseudo" pos:start="51:47" pos:end="51:53"><block_content pos:start="51:47" pos:end="51:53"> <expr_stmt pos:start="51:47" pos:end="51:53"><expr pos:start="51:47" pos:end="51:52"><name pos:start="51:47" pos:end="51:47">d</name> <operator pos:start="51:49" pos:end="51:49">=</operator> <operator pos:start="51:51" pos:end="51:51">~</operator><literal type="number" pos:start="51:52" pos:end="51:52">0</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="53:13" pos:end="65:13">else <block pos:start="53:18" pos:end="65:13">{<block_content pos:start="55:17" pos:end="63:17">

                <decl_stmt pos:start="55:17" pos:end="55:123"><decl pos:start="55:17" pos:end="55:122"><type pos:start="55:17" pos:end="55:19"><name pos:start="55:17" pos:end="55:19">int</name></type> <name pos:start="55:21" pos:end="55:23">res</name> <init pos:start="55:25" pos:end="55:122">= <expr pos:start="55:27" pos:end="55:122"><call pos:start="55:27" pos:end="55:122"><name pos:start="55:27" pos:end="55:48">av_expr_parse_and_eval</name><argument_list pos:start="55:49" pos:end="55:122">(<argument pos:start="55:50" pos:end="55:51"><expr pos:start="55:50" pos:end="55:51"><operator pos:start="55:50" pos:end="55:50">&amp;</operator><name pos:start="55:51" pos:end="55:51">d</name></expr></argument>, <argument pos:start="55:54" pos:end="55:56"><expr pos:start="55:54" pos:end="55:56"><name pos:start="55:54" pos:end="55:56">buf</name></expr></argument>, <argument pos:start="55:59" pos:end="55:69"><expr pos:start="55:59" pos:end="55:69"><name pos:start="55:59" pos:end="55:69">const_names</name></expr></argument>, <argument pos:start="55:72" pos:end="55:83"><expr pos:start="55:72" pos:end="55:83"><name pos:start="55:72" pos:end="55:83">const_values</name></expr></argument>, <argument pos:start="55:86" pos:end="55:89"><expr pos:start="55:86" pos:end="55:89"><name pos:start="55:86" pos:end="55:89">NULL</name></expr></argument>, <argument pos:start="55:92" pos:end="55:95"><expr pos:start="55:92" pos:end="55:95"><name pos:start="55:92" pos:end="55:95">NULL</name></expr></argument>, <argument pos:start="55:98" pos:end="55:101"><expr pos:start="55:98" pos:end="55:101"><name pos:start="55:98" pos:end="55:101">NULL</name></expr></argument>, <argument pos:start="55:104" pos:end="55:107"><expr pos:start="55:104" pos:end="55:107"><name pos:start="55:104" pos:end="55:107">NULL</name></expr></argument>, <argument pos:start="55:110" pos:end="55:113"><expr pos:start="55:110" pos:end="55:113"><name pos:start="55:110" pos:end="55:113">NULL</name></expr></argument>, <argument pos:start="55:116" pos:end="55:116"><expr pos:start="55:116" pos:end="55:116"><literal type="number" pos:start="55:116" pos:end="55:116">0</literal></expr></argument>, <argument pos:start="55:119" pos:end="55:121"><expr pos:start="55:119" pos:end="55:121"><name pos:start="55:119" pos:end="55:121">obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="57:17" pos:end="63:17"><if pos:start="57:17" pos:end="63:17">if <condition pos:start="57:20" pos:end="57:28">(<expr pos:start="57:21" pos:end="57:27"><name pos:start="57:21" pos:end="57:23">res</name> <operator pos:start="57:25" pos:end="57:25">&lt;</operator> <literal type="number" pos:start="57:27" pos:end="57:27">0</literal></expr>)</condition> <block pos:start="57:30" pos:end="63:17">{<block_content pos:start="59:21" pos:end="61:31">

                    <expr_stmt pos:start="59:21" pos:end="59:92"><expr pos:start="59:21" pos:end="59:91"><call pos:start="59:21" pos:end="59:91"><name pos:start="59:21" pos:end="59:26">av_log</name><argument_list pos:start="59:27" pos:end="59:91">(<argument pos:start="59:28" pos:end="59:30"><expr pos:start="59:28" pos:end="59:30"><name pos:start="59:28" pos:end="59:30">obj</name></expr></argument>, <argument pos:start="59:33" pos:end="59:44"><expr pos:start="59:33" pos:end="59:44"><name pos:start="59:33" pos:end="59:44">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="59:47" pos:end="59:85"><expr pos:start="59:47" pos:end="59:85"><literal type="string" pos:start="59:47" pos:end="59:85">"Unable to parse option value \"%s\"\n"</literal></expr></argument>, <argument pos:start="59:88" pos:end="59:90"><expr pos:start="59:88" pos:end="59:90"><name pos:start="59:88" pos:end="59:90">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="61:21" pos:end="61:31">return <expr pos:start="61:28" pos:end="61:30"><name pos:start="61:28" pos:end="61:30">res</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block>

        <if_stmt pos:start="69:9" pos:end="85:9"><if pos:start="69:9" pos:end="77:9">if <condition pos:start="69:12" pos:end="69:41">(<expr pos:start="69:13" pos:end="69:40"><name pos:start="69:13" pos:end="69:19"><name pos:start="69:13" pos:end="69:13">o</name><operator pos:start="69:14" pos:end="69:15">-&gt;</operator><name pos:start="69:16" pos:end="69:19">type</name></name> <operator pos:start="69:21" pos:end="69:22">==</operator> <name pos:start="69:24" pos:end="69:40">AV_OPT_TYPE_FLAGS</name></expr>)</condition> <block pos:start="69:43" pos:end="77:9">{<block_content pos:start="71:13" pos:end="75:57">

            <expr_stmt pos:start="71:13" pos:end="71:53"><expr pos:start="71:13" pos:end="71:52"><call pos:start="71:13" pos:end="71:52"><name pos:start="71:13" pos:end="71:23">read_number</name><argument_list pos:start="71:24" pos:end="71:52">(<argument pos:start="71:25" pos:end="71:25"><expr pos:start="71:25" pos:end="71:25"><name pos:start="71:25" pos:end="71:25">o</name></expr></argument>, <argument pos:start="71:28" pos:end="71:30"><expr pos:start="71:28" pos:end="71:30"><name pos:start="71:28" pos:end="71:30">dst</name></expr></argument>, <argument pos:start="71:33" pos:end="71:36"><expr pos:start="71:33" pos:end="71:36"><name pos:start="71:33" pos:end="71:36">NULL</name></expr></argument>, <argument pos:start="71:39" pos:end="71:42"><expr pos:start="71:39" pos:end="71:42"><name pos:start="71:39" pos:end="71:42">NULL</name></expr></argument>, <argument pos:start="71:45" pos:end="71:51"><expr pos:start="71:45" pos:end="71:51"><operator pos:start="71:45" pos:end="71:45">&amp;</operator><name pos:start="71:46" pos:end="71:51">intnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="73:13" pos:end="75:57"><if pos:start="73:13" pos:end="73:57">if      <condition pos:start="73:21" pos:end="73:32">(<expr pos:start="73:22" pos:end="73:31"><name pos:start="73:22" pos:end="73:24">cmd</name> <operator pos:start="73:26" pos:end="73:27">==</operator> <literal type="char" pos:start="73:29" pos:end="73:31">'+'</literal></expr>)</condition><block type="pseudo" pos:start="73:34" pos:end="73:57"><block_content pos:start="73:34" pos:end="73:57"> <expr_stmt pos:start="73:34" pos:end="73:57"><expr pos:start="73:34" pos:end="73:56"><name pos:start="73:34" pos:end="73:34">d</name> <operator pos:start="73:36" pos:end="73:36">=</operator> <name pos:start="73:38" pos:end="73:43">intnum</name> <operator pos:start="73:45" pos:end="73:45">|</operator> <operator pos:start="73:47" pos:end="73:47">(</operator><name pos:start="73:48" pos:end="73:54">int64_t</name><operator pos:start="73:55" pos:end="73:55">)</operator><name pos:start="73:56" pos:end="73:56">d</name></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="75:13" pos:end="75:57">else if <condition pos:start="75:21" pos:end="75:32">(<expr pos:start="75:22" pos:end="75:31"><name pos:start="75:22" pos:end="75:24">cmd</name> <operator pos:start="75:26" pos:end="75:27">==</operator> <literal type="char" pos:start="75:29" pos:end="75:31">'-'</literal></expr>)</condition><block type="pseudo" pos:start="75:34" pos:end="75:57"><block_content pos:start="75:34" pos:end="75:57"> <expr_stmt pos:start="75:34" pos:end="75:57"><expr pos:start="75:34" pos:end="75:56"><name pos:start="75:34" pos:end="75:34">d</name> <operator pos:start="75:36" pos:end="75:36">=</operator> <name pos:start="75:38" pos:end="75:43">intnum</name> <operator pos:start="75:45" pos:end="75:45">&amp;</operator><operator pos:start="75:46" pos:end="75:46">~</operator><operator pos:start="75:47" pos:end="75:47">(</operator><name pos:start="75:48" pos:end="75:54">int64_t</name><operator pos:start="75:55" pos:end="75:55">)</operator><name pos:start="75:56" pos:end="75:56">d</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="77:11" pos:end="85:9">else <block pos:start="77:16" pos:end="85:9">{<block_content pos:start="79:13" pos:end="83:65">

            <expr_stmt pos:start="79:13" pos:end="79:53"><expr pos:start="79:13" pos:end="79:52"><call pos:start="79:13" pos:end="79:52"><name pos:start="79:13" pos:end="79:23">read_number</name><argument_list pos:start="79:24" pos:end="79:52">(<argument pos:start="79:25" pos:end="79:25"><expr pos:start="79:25" pos:end="79:25"><name pos:start="79:25" pos:end="79:25">o</name></expr></argument>, <argument pos:start="79:28" pos:end="79:30"><expr pos:start="79:28" pos:end="79:30"><name pos:start="79:28" pos:end="79:30">dst</name></expr></argument>, <argument pos:start="79:33" pos:end="79:36"><expr pos:start="79:33" pos:end="79:36"><operator pos:start="79:33" pos:end="79:33">&amp;</operator><name pos:start="79:34" pos:end="79:36">num</name></expr></argument>, <argument pos:start="79:39" pos:end="79:42"><expr pos:start="79:39" pos:end="79:42"><operator pos:start="79:39" pos:end="79:39">&amp;</operator><name pos:start="79:40" pos:end="79:42">den</name></expr></argument>, <argument pos:start="79:45" pos:end="79:51"><expr pos:start="79:45" pos:end="79:51"><operator pos:start="79:45" pos:end="79:45">&amp;</operator><name pos:start="79:46" pos:end="79:51">intnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="81:13" pos:end="83:65"><if pos:start="81:13" pos:end="81:65">if      <condition pos:start="81:21" pos:end="81:32">(<expr pos:start="81:22" pos:end="81:31"><name pos:start="81:22" pos:end="81:24">cmd</name> <operator pos:start="81:26" pos:end="81:27">==</operator> <literal type="char" pos:start="81:29" pos:end="81:31">'+'</literal></expr>)</condition><block type="pseudo" pos:start="81:34" pos:end="81:65"><block_content pos:start="81:34" pos:end="81:65"> <expr_stmt pos:start="81:34" pos:end="81:65"><expr pos:start="81:34" pos:end="81:64"><name pos:start="81:34" pos:end="81:34">d</name> <operator pos:start="81:36" pos:end="81:36">=</operator> <name pos:start="81:38" pos:end="81:45">notfirst</name><operator pos:start="81:46" pos:end="81:46">*</operator><name pos:start="81:47" pos:end="81:49">num</name><operator pos:start="81:50" pos:end="81:50">*</operator><name pos:start="81:51" pos:end="81:56">intnum</name><operator pos:start="81:57" pos:end="81:57">/</operator><name pos:start="81:58" pos:end="81:60">den</name> <operator pos:start="81:62" pos:end="81:62">+</operator> <name pos:start="81:64" pos:end="81:64">d</name></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="83:13" pos:end="83:65">else if <condition pos:start="83:21" pos:end="83:32">(<expr pos:start="83:22" pos:end="83:31"><name pos:start="83:22" pos:end="83:24">cmd</name> <operator pos:start="83:26" pos:end="83:27">==</operator> <literal type="char" pos:start="83:29" pos:end="83:31">'-'</literal></expr>)</condition><block type="pseudo" pos:start="83:34" pos:end="83:65"><block_content pos:start="83:34" pos:end="83:65"> <expr_stmt pos:start="83:34" pos:end="83:65"><expr pos:start="83:34" pos:end="83:64"><name pos:start="83:34" pos:end="83:34">d</name> <operator pos:start="83:36" pos:end="83:36">=</operator> <name pos:start="83:38" pos:end="83:45">notfirst</name><operator pos:start="83:46" pos:end="83:46">*</operator><name pos:start="83:47" pos:end="83:49">num</name><operator pos:start="83:50" pos:end="83:50">*</operator><name pos:start="83:51" pos:end="83:56">intnum</name><operator pos:start="83:57" pos:end="83:57">/</operator><name pos:start="83:58" pos:end="83:60">den</name> <operator pos:start="83:62" pos:end="83:62">-</operator> <name pos:start="83:64" pos:end="83:64">d</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="89:9" pos:end="91:23"><if pos:start="89:9" pos:end="91:23">if <condition pos:start="89:12" pos:end="89:59">(<expr pos:start="89:13" pos:end="89:58"><operator pos:start="89:13" pos:end="89:13">(</operator><name pos:start="89:14" pos:end="89:16">ret</name> <operator pos:start="89:18" pos:end="89:18">=</operator> <call pos:start="89:20" pos:end="89:53"><name pos:start="89:20" pos:end="89:31">write_number</name><argument_list pos:start="89:32" pos:end="89:53">(<argument pos:start="89:33" pos:end="89:35"><expr pos:start="89:33" pos:end="89:35"><name pos:start="89:33" pos:end="89:35">obj</name></expr></argument>, <argument pos:start="89:38" pos:end="89:38"><expr pos:start="89:38" pos:end="89:38"><name pos:start="89:38" pos:end="89:38">o</name></expr></argument>, <argument pos:start="89:41" pos:end="89:43"><expr pos:start="89:41" pos:end="89:43"><name pos:start="89:41" pos:end="89:43">dst</name></expr></argument>, <argument pos:start="89:46" pos:end="89:46"><expr pos:start="89:46" pos:end="89:46"><name pos:start="89:46" pos:end="89:46">d</name></expr></argument>, <argument pos:start="89:49" pos:end="89:49"><expr pos:start="89:49" pos:end="89:49"><literal type="number" pos:start="89:49" pos:end="89:49">1</literal></expr></argument>, <argument pos:start="89:52" pos:end="89:52"><expr pos:start="89:52" pos:end="89:52"><literal type="number" pos:start="89:52" pos:end="89:52">1</literal></expr></argument>)</argument_list></call><operator pos:start="89:54" pos:end="89:54">)</operator> <operator pos:start="89:56" pos:end="89:56">&lt;</operator> <literal type="number" pos:start="89:58" pos:end="89:58">0</literal></expr>)</condition><block type="pseudo" pos:start="91:13" pos:end="91:23"><block_content pos:start="91:13" pos:end="91:23">

            <return pos:start="91:13" pos:end="91:23">return <expr pos:start="91:20" pos:end="91:22"><name pos:start="91:20" pos:end="91:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:17"><expr pos:start="93:9" pos:end="93:16"><name pos:start="93:9" pos:end="93:11">val</name> <operator pos:start="93:13" pos:end="93:14">+=</operator> <name pos:start="93:16" pos:end="93:16">i</name></expr>;</expr_stmt>

        <if_stmt pos:start="95:9" pos:end="97:21"><if pos:start="95:9" pos:end="97:21">if <condition pos:start="95:12" pos:end="95:18">(<expr pos:start="95:13" pos:end="95:17"><operator pos:start="95:13" pos:end="95:13">!</operator><operator pos:start="95:14" pos:end="95:14">*</operator><name pos:start="95:15" pos:end="95:17">val</name></expr>)</condition><block type="pseudo" pos:start="97:13" pos:end="97:21"><block_content pos:start="97:13" pos:end="97:21">

            <return pos:start="97:13" pos:end="97:21">return <expr pos:start="97:20" pos:end="97:20"><literal type="number" pos:start="97:20" pos:end="97:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:21"><expr pos:start="99:9" pos:end="99:20"><name pos:start="99:9" pos:end="99:16">notfirst</name> <operator pos:start="99:18" pos:end="99:18">=</operator> <literal type="number" pos:start="99:20" pos:end="99:20">1</literal></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="105:5" pos:end="105:13">return <expr pos:start="105:12" pos:end="105:12"><literal type="number" pos:start="105:12" pos:end="105:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
