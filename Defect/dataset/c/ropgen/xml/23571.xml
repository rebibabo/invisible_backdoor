<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23571.c" pos:tabs="8"><function pos:start="1:1" pos:end="361:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">alac_decode_frame</name><parameter_list pos:start="1:29" pos:end="3:65">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:50"><name pos:start="1:30" pos:end="1:43">AVCodecContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:62"><decl pos:start="1:53" pos:end="1:62"><type pos:start="1:53" pos:end="1:62"><name pos:start="1:53" pos:end="1:56">void</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">data</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:47"><decl pos:start="3:30" pos:end="3:47"><type pos:start="3:30" pos:end="3:47"><name pos:start="3:30" pos:end="3:32">int</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:47">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:50" pos:end="3:64"><decl pos:start="3:50" pos:end="3:64"><type pos:start="3:50" pos:end="3:64"><name pos:start="3:50" pos:end="3:57">AVPacket</name> <modifier pos:start="3:59" pos:end="3:59">*</modifier></type><name pos:start="3:60" pos:end="3:64">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="361:1">{<block_content pos:start="7:5" pos:end="359:29">

    <decl_stmt pos:start="7:5" pos:end="7:42"><decl pos:start="7:5" pos:end="7:41"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:27">inbuffer</name> <init pos:start="7:29" pos:end="7:41">= <expr pos:start="7:31" pos:end="7:41"><name pos:start="7:31" pos:end="7:41"><name pos:start="7:31" pos:end="7:35">avpkt</name><operator pos:start="7:36" pos:end="7:37">-&gt;</operator><name pos:start="7:38" pos:end="7:41">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:40"><decl pos:start="9:5" pos:end="9:39"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:25">input_buffer_size</name> <init pos:start="9:27" pos:end="9:39">= <expr pos:start="9:29" pos:end="9:39"><name pos:start="9:29" pos:end="9:39"><name pos:start="9:29" pos:end="9:33">avpkt</name><operator pos:start="9:34" pos:end="9:35">-&gt;</operator><name pos:start="9:36" pos:end="9:39">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:41"><decl pos:start="11:5" pos:end="11:40"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">ALACContext</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:21">alac</name> <init pos:start="11:23" pos:end="11:40">= <expr pos:start="11:25" pos:end="11:40"><name pos:start="11:25" pos:end="11:40"><name pos:start="11:25" pos:end="11:29">avctx</name><operator pos:start="11:30" pos:end="11:31">-&gt;</operator><name pos:start="11:32" pos:end="11:40">priv_data</name></name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="15:5" pos:end="15:17"><decl pos:start="15:5" pos:end="15:16"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:16">channels</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:31"><decl pos:start="17:5" pos:end="17:30"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:12">unsigned</name> <name pos:start="17:14" pos:end="17:16">int</name></type> <name pos:start="17:18" pos:end="17:30">outputsamples</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:16"><decl pos:start="19:5" pos:end="19:15"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:15">hassize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:32"><decl pos:start="21:5" pos:end="21:31"><type pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:12">unsigned</name> <name pos:start="21:14" pos:end="21:16">int</name></type> <name pos:start="21:18" pos:end="21:31">readsamplesize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:24"><decl pos:start="23:5" pos:end="23:23"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:23">isnotcompressed</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:30"><decl pos:start="25:5" pos:end="25:29"><type pos:start="25:5" pos:end="25:11"><name pos:start="25:5" pos:end="25:11">uint8_t</name></type> <name pos:start="25:13" pos:end="25:29">interlacing_shift</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:35"><decl pos:start="27:5" pos:end="27:34"><type pos:start="27:5" pos:end="27:11"><name pos:start="27:5" pos:end="27:11">uint8_t</name></type> <name pos:start="27:13" pos:end="27:34">interlacing_leftweight</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:19"><decl pos:start="29:5" pos:end="29:9"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:9">i</name></decl>, <decl pos:start="29:12" pos:end="29:13"><type ref="prev" pos:start="29:5" pos:end="29:7"/><name pos:start="29:12" pos:end="29:13">ch</name></decl>, <decl pos:start="29:16" pos:end="29:18"><type ref="prev" pos:start="29:5" pos:end="29:7"/><name pos:start="29:16" pos:end="29:18">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:62"><expr pos:start="33:5" pos:end="33:61"><call pos:start="33:5" pos:end="33:61"><name pos:start="33:5" pos:end="33:17">init_get_bits</name><argument_list pos:start="33:18" pos:end="33:61">(<argument pos:start="33:19" pos:end="33:27"><expr pos:start="33:19" pos:end="33:27"><operator pos:start="33:19" pos:end="33:19">&amp;</operator><name pos:start="33:20" pos:end="33:27"><name pos:start="33:20" pos:end="33:23">alac</name><operator pos:start="33:24" pos:end="33:25">-&gt;</operator><name pos:start="33:26" pos:end="33:27">gb</name></name></expr></argument>, <argument pos:start="33:30" pos:end="33:37"><expr pos:start="33:30" pos:end="33:37"><name pos:start="33:30" pos:end="33:37">inbuffer</name></expr></argument>, <argument pos:start="33:40" pos:end="33:60"><expr pos:start="33:40" pos:end="33:60"><name pos:start="33:40" pos:end="33:56">input_buffer_size</name> <operator pos:start="33:58" pos:end="33:58">*</operator> <literal type="number" pos:start="33:60" pos:end="33:60">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:42"><expr pos:start="37:5" pos:end="37:41"><name pos:start="37:5" pos:end="37:12">channels</name> <operator pos:start="37:14" pos:end="37:14">=</operator> <call pos:start="37:16" pos:end="37:37"><name pos:start="37:16" pos:end="37:23">get_bits</name><argument_list pos:start="37:24" pos:end="37:37">(<argument pos:start="37:25" pos:end="37:33"><expr pos:start="37:25" pos:end="37:33"><operator pos:start="37:25" pos:end="37:25">&amp;</operator><name pos:start="37:26" pos:end="37:33"><name pos:start="37:26" pos:end="37:29">alac</name><operator pos:start="37:30" pos:end="37:31">-&gt;</operator><name pos:start="37:32" pos:end="37:33">gb</name></name></expr></argument>, <argument pos:start="37:36" pos:end="37:36"><expr pos:start="37:36" pos:end="37:36"><literal type="number" pos:start="37:36" pos:end="37:36">3</literal></expr></argument>)</argument_list></call> <operator pos:start="37:39" pos:end="37:39">+</operator> <literal type="number" pos:start="37:41" pos:end="37:41">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:36">(<expr pos:start="39:9" pos:end="39:35"><name pos:start="39:9" pos:end="39:16">channels</name> <operator pos:start="39:18" pos:end="39:19">!=</operator> <name pos:start="39:21" pos:end="39:35"><name pos:start="39:21" pos:end="39:25">avctx</name><operator pos:start="39:26" pos:end="39:27">-&gt;</operator><name pos:start="39:28" pos:end="39:35">channels</name></name></expr>)</condition> <block pos:start="39:38" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:35">

        <expr_stmt pos:start="41:9" pos:end="41:77"><expr pos:start="41:9" pos:end="41:76"><call pos:start="41:9" pos:end="41:76"><name pos:start="41:9" pos:end="41:14">av_log</name><argument_list pos:start="41:15" pos:end="41:76">(<argument pos:start="41:16" pos:end="41:20"><expr pos:start="41:16" pos:end="41:20"><name pos:start="41:16" pos:end="41:20">avctx</name></expr></argument>, <argument pos:start="41:23" pos:end="41:34"><expr pos:start="41:23" pos:end="41:34"><name pos:start="41:23" pos:end="41:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="41:37" pos:end="41:75"><expr pos:start="41:37" pos:end="41:75"><literal type="string" pos:start="41:37" pos:end="41:75">"frame header channel count mismatch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:35">return <expr pos:start="43:16" pos:end="43:34"><name pos:start="43:16" pos:end="43:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="49:5" pos:end="53:7">/* 2^result = something to do with output waiting.

     * perhaps matters if we read &gt; 1 frame in a pass?

     */</comment>

    <expr_stmt pos:start="55:5" pos:end="55:28"><expr pos:start="55:5" pos:end="55:27"><call pos:start="55:5" pos:end="55:27"><name pos:start="55:5" pos:end="55:13">skip_bits</name><argument_list pos:start="55:14" pos:end="55:27">(<argument pos:start="55:15" pos:end="55:23"><expr pos:start="55:15" pos:end="55:23"><operator pos:start="55:15" pos:end="55:15">&amp;</operator><name pos:start="55:16" pos:end="55:23"><name pos:start="55:16" pos:end="55:19">alac</name><operator pos:start="55:20" pos:end="55:21">-&gt;</operator><name pos:start="55:22" pos:end="55:23">gb</name></name></expr></argument>, <argument pos:start="55:26" pos:end="55:26"><expr pos:start="55:26" pos:end="55:26"><literal type="number" pos:start="55:26" pos:end="55:26">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:29"><expr pos:start="59:5" pos:end="59:28"><call pos:start="59:5" pos:end="59:28"><name pos:start="59:5" pos:end="59:13">skip_bits</name><argument_list pos:start="59:14" pos:end="59:28">(<argument pos:start="59:15" pos:end="59:23"><expr pos:start="59:15" pos:end="59:23"><operator pos:start="59:15" pos:end="59:15">&amp;</operator><name pos:start="59:16" pos:end="59:23"><name pos:start="59:16" pos:end="59:19">alac</name><operator pos:start="59:20" pos:end="59:21">-&gt;</operator><name pos:start="59:22" pos:end="59:23">gb</name></name></expr></argument>, <argument pos:start="59:26" pos:end="59:27"><expr pos:start="59:26" pos:end="59:27"><literal type="number" pos:start="59:26" pos:end="59:27">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="59:31" pos:end="59:57">/* unknown, skip 12 bits */</comment>



    <comment type="block" pos:start="63:5" pos:end="63:47">/* the output sample size is stored soon */</comment>

    <expr_stmt pos:start="65:5" pos:end="65:35"><expr pos:start="65:5" pos:end="65:34"><name pos:start="65:5" pos:end="65:11">hassize</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <call pos:start="65:15" pos:end="65:34"><name pos:start="65:15" pos:end="65:23">get_bits1</name><argument_list pos:start="65:24" pos:end="65:34">(<argument pos:start="65:25" pos:end="65:33"><expr pos:start="65:25" pos:end="65:33"><operator pos:start="65:25" pos:end="65:25">&amp;</operator><name pos:start="65:26" pos:end="65:33"><name pos:start="65:26" pos:end="65:29">alac</name><operator pos:start="65:30" pos:end="65:31">-&gt;</operator><name pos:start="65:32" pos:end="65:33">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:51"><expr pos:start="69:5" pos:end="69:50"><name pos:start="69:5" pos:end="69:20"><name pos:start="69:5" pos:end="69:8">alac</name><operator pos:start="69:9" pos:end="69:10">-&gt;</operator><name pos:start="69:11" pos:end="69:20">extra_bits</name></name> <operator pos:start="69:22" pos:end="69:22">=</operator> <call pos:start="69:24" pos:end="69:45"><name pos:start="69:24" pos:end="69:31">get_bits</name><argument_list pos:start="69:32" pos:end="69:45">(<argument pos:start="69:33" pos:end="69:41"><expr pos:start="69:33" pos:end="69:41"><operator pos:start="69:33" pos:end="69:33">&amp;</operator><name pos:start="69:34" pos:end="69:41"><name pos:start="69:34" pos:end="69:37">alac</name><operator pos:start="69:38" pos:end="69:39">-&gt;</operator><name pos:start="69:40" pos:end="69:41">gb</name></name></expr></argument>, <argument pos:start="69:44" pos:end="69:44"><expr pos:start="69:44" pos:end="69:44"><literal type="number" pos:start="69:44" pos:end="69:44">2</literal></expr></argument>)</argument_list></call> <operator pos:start="69:47" pos:end="69:48">&lt;&lt;</operator> <literal type="number" pos:start="69:50" pos:end="69:50">3</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="73:5" pos:end="73:41">/* whether the frame is compressed */</comment>

    <expr_stmt pos:start="75:5" pos:end="75:43"><expr pos:start="75:5" pos:end="75:42"><name pos:start="75:5" pos:end="75:19">isnotcompressed</name> <operator pos:start="75:21" pos:end="75:21">=</operator> <call pos:start="75:23" pos:end="75:42"><name pos:start="75:23" pos:end="75:31">get_bits1</name><argument_list pos:start="75:32" pos:end="75:42">(<argument pos:start="75:33" pos:end="75:41"><expr pos:start="75:33" pos:end="75:41"><operator pos:start="75:33" pos:end="75:33">&amp;</operator><name pos:start="75:34" pos:end="75:41"><name pos:start="75:34" pos:end="75:37">alac</name><operator pos:start="75:38" pos:end="75:39">-&gt;</operator><name pos:start="75:40" pos:end="75:41">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="79:5" pos:end="95:60"><if pos:start="79:5" pos:end="93:5">if <condition pos:start="79:8" pos:end="79:16">(<expr pos:start="79:9" pos:end="79:15"><name pos:start="79:9" pos:end="79:15">hassize</name></expr>)</condition> <block pos:start="79:18" pos:end="93:5">{<block_content pos:start="83:9" pos:end="91:9">

        <comment type="block" pos:start="81:9" pos:end="81:63">/* now read the number of samples as a 32bit integer */</comment>

        <expr_stmt pos:start="83:9" pos:end="83:53"><expr pos:start="83:9" pos:end="83:52"><name pos:start="83:9" pos:end="83:21">outputsamples</name> <operator pos:start="83:23" pos:end="83:23">=</operator> <call pos:start="83:25" pos:end="83:52"><name pos:start="83:25" pos:end="83:37">get_bits_long</name><argument_list pos:start="83:38" pos:end="83:52">(<argument pos:start="83:39" pos:end="83:47"><expr pos:start="83:39" pos:end="83:47"><operator pos:start="83:39" pos:end="83:39">&amp;</operator><name pos:start="83:40" pos:end="83:47"><name pos:start="83:40" pos:end="83:43">alac</name><operator pos:start="83:44" pos:end="83:45">-&gt;</operator><name pos:start="83:46" pos:end="83:47">gb</name></name></expr></argument>, <argument pos:start="83:50" pos:end="83:51"><expr pos:start="83:50" pos:end="83:51"><literal type="number" pos:start="83:50" pos:end="83:51">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="85:9" pos:end="91:9"><if pos:start="85:9" pos:end="91:9">if<condition pos:start="85:11" pos:end="85:63">(<expr pos:start="85:12" pos:end="85:62"><name pos:start="85:12" pos:end="85:24">outputsamples</name> <operator pos:start="85:26" pos:end="85:26">&gt;</operator> <name pos:start="85:28" pos:end="85:62"><name pos:start="85:28" pos:end="85:31">alac</name><operator pos:start="85:32" pos:end="85:33">-&gt;</operator><name pos:start="85:34" pos:end="85:62">setinfo_max_samples_per_frame</name></name></expr>)</condition><block pos:start="85:64" pos:end="91:9">{<block_content pos:start="87:13" pos:end="89:22">

            <expr_stmt pos:start="87:13" pos:end="87:119"><expr pos:start="87:13" pos:end="87:118"><call pos:start="87:13" pos:end="87:118"><name pos:start="87:13" pos:end="87:18">av_log</name><argument_list pos:start="87:19" pos:end="87:118">(<argument pos:start="87:20" pos:end="87:24"><expr pos:start="87:20" pos:end="87:24"><name pos:start="87:20" pos:end="87:24">avctx</name></expr></argument>, <argument pos:start="87:27" pos:end="87:38"><expr pos:start="87:27" pos:end="87:38"><name pos:start="87:27" pos:end="87:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="87:41" pos:end="87:65"><expr pos:start="87:41" pos:end="87:65"><literal type="string" pos:start="87:41" pos:end="87:65">"outputsamples %d &gt; %d\n"</literal></expr></argument>, <argument pos:start="87:68" pos:end="87:80"><expr pos:start="87:68" pos:end="87:80"><name pos:start="87:68" pos:end="87:80">outputsamples</name></expr></argument>, <argument pos:start="87:83" pos:end="87:117"><expr pos:start="87:83" pos:end="87:117"><name pos:start="87:83" pos:end="87:117"><name pos:start="87:83" pos:end="87:86">alac</name><operator pos:start="87:87" pos:end="87:88">-&gt;</operator><name pos:start="87:89" pos:end="87:117">setinfo_max_samples_per_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="89:13" pos:end="89:22">return <expr pos:start="89:20" pos:end="89:21"><operator pos:start="89:20" pos:end="89:20">-</operator><literal type="number" pos:start="89:21" pos:end="89:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="93:7" pos:end="95:60">else<block type="pseudo" pos:start="95:9" pos:end="95:60"><block_content pos:start="95:9" pos:end="95:60">

        <expr_stmt pos:start="95:9" pos:end="95:60"><expr pos:start="95:9" pos:end="95:59"><name pos:start="95:9" pos:end="95:21">outputsamples</name> <operator pos:start="95:23" pos:end="95:23">=</operator> <name pos:start="95:25" pos:end="95:59"><name pos:start="95:25" pos:end="95:28">alac</name><operator pos:start="95:29" pos:end="95:30">-&gt;</operator><name pos:start="95:31" pos:end="95:59">setinfo_max_samples_per_frame</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <comment type="block" pos:start="99:5" pos:end="99:27">/* get output buffer */</comment>

    <if_stmt pos:start="101:5" pos:end="107:5"><if pos:start="101:5" pos:end="107:5">if <condition pos:start="101:8" pos:end="101:34">(<expr pos:start="101:9" pos:end="101:33"><name pos:start="101:9" pos:end="101:21">outputsamples</name> <operator pos:start="101:23" pos:end="101:23">&gt;</operator> <name pos:start="101:25" pos:end="101:33">INT32_MAX</name></expr>)</condition> <block pos:start="101:36" pos:end="107:5">{<block_content pos:start="103:9" pos:end="105:35">

        <expr_stmt pos:start="103:9" pos:end="103:83"><expr pos:start="103:9" pos:end="103:82"><call pos:start="103:9" pos:end="103:82"><name pos:start="103:9" pos:end="103:14">av_log</name><argument_list pos:start="103:15" pos:end="103:82">(<argument pos:start="103:16" pos:end="103:20"><expr pos:start="103:16" pos:end="103:20"><name pos:start="103:16" pos:end="103:20">avctx</name></expr></argument>, <argument pos:start="103:23" pos:end="103:34"><expr pos:start="103:23" pos:end="103:34"><name pos:start="103:23" pos:end="103:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="103:37" pos:end="103:66"><expr pos:start="103:37" pos:end="103:66"><literal type="string" pos:start="103:37" pos:end="103:66">"unsupported block size: %u\n"</literal></expr></argument>, <argument pos:start="103:69" pos:end="103:81"><expr pos:start="103:69" pos:end="103:81"><name pos:start="103:69" pos:end="103:81">outputsamples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="105:9" pos:end="105:35">return <expr pos:start="105:16" pos:end="105:34"><name pos:start="105:16" pos:end="105:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:43"><expr pos:start="109:5" pos:end="109:42"><name pos:start="109:5" pos:end="109:26"><name pos:start="109:5" pos:end="109:8">alac</name><operator pos:start="109:9" pos:end="109:10">-&gt;</operator><name pos:start="109:11" pos:end="109:15">frame</name><operator pos:start="109:16" pos:end="109:16">.</operator><name pos:start="109:17" pos:end="109:26">nb_samples</name></name> <operator pos:start="109:28" pos:end="109:28">=</operator> <name pos:start="109:30" pos:end="109:42">outputsamples</name></expr>;</expr_stmt>

    <if_stmt pos:start="111:5" pos:end="117:5"><if pos:start="111:5" pos:end="117:5">if <condition pos:start="111:8" pos:end="111:59">(<expr pos:start="111:9" pos:end="111:58"><operator pos:start="111:9" pos:end="111:9">(</operator><name pos:start="111:10" pos:end="111:12">ret</name> <operator pos:start="111:14" pos:end="111:14">=</operator> <call pos:start="111:16" pos:end="111:53"><name pos:start="111:16" pos:end="111:32"><name pos:start="111:16" pos:end="111:20">avctx</name><operator pos:start="111:21" pos:end="111:22">-&gt;</operator><name pos:start="111:23" pos:end="111:32">get_buffer</name></name><argument_list pos:start="111:33" pos:end="111:53">(<argument pos:start="111:34" pos:end="111:38"><expr pos:start="111:34" pos:end="111:38"><name pos:start="111:34" pos:end="111:38">avctx</name></expr></argument>, <argument pos:start="111:41" pos:end="111:52"><expr pos:start="111:41" pos:end="111:52"><operator pos:start="111:41" pos:end="111:41">&amp;</operator><name pos:start="111:42" pos:end="111:52"><name pos:start="111:42" pos:end="111:45">alac</name><operator pos:start="111:46" pos:end="111:47">-&gt;</operator><name pos:start="111:48" pos:end="111:52">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="111:54" pos:end="111:54">)</operator> <operator pos:start="111:56" pos:end="111:56">&lt;</operator> <literal type="number" pos:start="111:58" pos:end="111:58">0</literal></expr>)</condition> <block pos:start="111:61" pos:end="117:5">{<block_content pos:start="113:9" pos:end="115:19">

        <expr_stmt pos:start="113:9" pos:end="113:61"><expr pos:start="113:9" pos:end="113:60"><call pos:start="113:9" pos:end="113:60"><name pos:start="113:9" pos:end="113:14">av_log</name><argument_list pos:start="113:15" pos:end="113:60">(<argument pos:start="113:16" pos:end="113:20"><expr pos:start="113:16" pos:end="113:20"><name pos:start="113:16" pos:end="113:20">avctx</name></expr></argument>, <argument pos:start="113:23" pos:end="113:34"><expr pos:start="113:23" pos:end="113:34"><name pos:start="113:23" pos:end="113:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="113:37" pos:end="113:59"><expr pos:start="113:37" pos:end="113:59"><literal type="string" pos:start="113:37" pos:end="113:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="115:9" pos:end="115:19">return <expr pos:start="115:16" pos:end="115:18"><name pos:start="115:16" pos:end="115:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="121:5" pos:end="121:81"><expr pos:start="121:5" pos:end="121:80"><name pos:start="121:5" pos:end="121:18">readsamplesize</name> <operator pos:start="121:20" pos:end="121:20">=</operator> <name pos:start="121:22" pos:end="121:46"><name pos:start="121:22" pos:end="121:25">alac</name><operator pos:start="121:26" pos:end="121:27">-&gt;</operator><name pos:start="121:28" pos:end="121:46">setinfo_sample_size</name></name> <operator pos:start="121:48" pos:end="121:48">-</operator> <name pos:start="121:50" pos:end="121:65"><name pos:start="121:50" pos:end="121:53">alac</name><operator pos:start="121:54" pos:end="121:55">-&gt;</operator><name pos:start="121:56" pos:end="121:65">extra_bits</name></name> <operator pos:start="121:67" pos:end="121:67">+</operator> <name pos:start="121:69" pos:end="121:76">channels</name> <operator pos:start="121:78" pos:end="121:78">-</operator> <literal type="number" pos:start="121:80" pos:end="121:80">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="123:5" pos:end="129:5"><if pos:start="123:5" pos:end="129:5">if <condition pos:start="123:8" pos:end="123:40">(<expr pos:start="123:9" pos:end="123:39"><name pos:start="123:9" pos:end="123:22">readsamplesize</name> <operator pos:start="123:24" pos:end="123:24">&gt;</operator> <name pos:start="123:26" pos:end="123:39">MIN_CACHE_BITS</name></expr>)</condition> <block pos:start="123:42" pos:end="129:5">{<block_content pos:start="125:9" pos:end="127:18">

        <expr_stmt pos:start="125:9" pos:end="125:85"><expr pos:start="125:9" pos:end="125:84"><call pos:start="125:9" pos:end="125:84"><name pos:start="125:9" pos:end="125:14">av_log</name><argument_list pos:start="125:15" pos:end="125:84">(<argument pos:start="125:16" pos:end="125:20"><expr pos:start="125:16" pos:end="125:20"><name pos:start="125:16" pos:end="125:20">avctx</name></expr></argument>, <argument pos:start="125:23" pos:end="125:34"><expr pos:start="125:23" pos:end="125:34"><name pos:start="125:23" pos:end="125:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="125:37" pos:end="125:67"><expr pos:start="125:37" pos:end="125:67"><literal type="string" pos:start="125:37" pos:end="125:67">"readsamplesize too big (%d)\n"</literal></expr></argument>, <argument pos:start="125:70" pos:end="125:83"><expr pos:start="125:70" pos:end="125:83"><name pos:start="125:70" pos:end="125:83">readsamplesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="127:9" pos:end="127:18">return <expr pos:start="127:16" pos:end="127:17"><operator pos:start="127:16" pos:end="127:16">-</operator><literal type="number" pos:start="127:17" pos:end="127:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="133:5" pos:end="271:5"><if pos:start="133:5" pos:end="249:5">if <condition pos:start="133:8" pos:end="133:25">(<expr pos:start="133:9" pos:end="133:24"><operator pos:start="133:9" pos:end="133:9">!</operator><name pos:start="133:10" pos:end="133:24">isnotcompressed</name></expr>)</condition> <block pos:start="133:27" pos:end="249:5">{<block_content pos:start="137:9" pos:end="247:9">

        <comment type="block" pos:start="135:9" pos:end="135:33">/* so it is compressed */</comment>

        <decl_stmt pos:start="137:9" pos:end="137:55"><decl pos:start="137:9" pos:end="137:54"><type pos:start="137:9" pos:end="137:15"><name pos:start="137:9" pos:end="137:15">int16_t</name></type> <name pos:start="137:17" pos:end="137:54"><name pos:start="137:17" pos:end="137:36">predictor_coef_table</name><index pos:start="137:37" pos:end="137:50">[<expr pos:start="137:38" pos:end="137:49"><name pos:start="137:38" pos:end="137:49">MAX_CHANNELS</name></expr>]</index><index pos:start="137:51" pos:end="137:54">[<expr pos:start="137:52" pos:end="137:53"><literal type="number" pos:start="137:52" pos:end="137:53">32</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="139:9" pos:end="139:45"><decl pos:start="139:9" pos:end="139:44"><type pos:start="139:9" pos:end="139:11"><name pos:start="139:9" pos:end="139:11">int</name></type> <name pos:start="139:13" pos:end="139:44"><name pos:start="139:13" pos:end="139:30">predictor_coef_num</name><index pos:start="139:31" pos:end="139:44">[<expr pos:start="139:32" pos:end="139:43"><name pos:start="139:32" pos:end="139:43">MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="141:9" pos:end="141:42"><decl pos:start="141:9" pos:end="141:41"><type pos:start="141:9" pos:end="141:11"><name pos:start="141:9" pos:end="141:11">int</name></type> <name pos:start="141:13" pos:end="141:41"><name pos:start="141:13" pos:end="141:27">prediction_type</name><index pos:start="141:28" pos:end="141:41">[<expr pos:start="141:29" pos:end="141:40"><name pos:start="141:29" pos:end="141:40">MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="143:9" pos:end="143:52"><decl pos:start="143:9" pos:end="143:51"><type pos:start="143:9" pos:end="143:11"><name pos:start="143:9" pos:end="143:11">int</name></type> <name pos:start="143:13" pos:end="143:51"><name pos:start="143:13" pos:end="143:37">prediction_quantitization</name><index pos:start="143:38" pos:end="143:51">[<expr pos:start="143:39" pos:end="143:50"><name pos:start="143:39" pos:end="143:50">MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="145:9" pos:end="145:39"><decl pos:start="145:9" pos:end="145:38"><type pos:start="145:9" pos:end="145:11"><name pos:start="145:9" pos:end="145:11">int</name></type> <name pos:start="145:13" pos:end="145:38"><name pos:start="145:13" pos:end="145:24">ricemodifier</name><index pos:start="145:25" pos:end="145:38">[<expr pos:start="145:26" pos:end="145:37"><name pos:start="145:26" pos:end="145:37">MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>



        <expr_stmt pos:start="149:9" pos:end="149:51"><expr pos:start="149:9" pos:end="149:50"><name pos:start="149:9" pos:end="149:25">interlacing_shift</name> <operator pos:start="149:27" pos:end="149:27">=</operator> <call pos:start="149:29" pos:end="149:50"><name pos:start="149:29" pos:end="149:36">get_bits</name><argument_list pos:start="149:37" pos:end="149:50">(<argument pos:start="149:38" pos:end="149:46"><expr pos:start="149:38" pos:end="149:46"><operator pos:start="149:38" pos:end="149:38">&amp;</operator><name pos:start="149:39" pos:end="149:46"><name pos:start="149:39" pos:end="149:42">alac</name><operator pos:start="149:43" pos:end="149:44">-&gt;</operator><name pos:start="149:45" pos:end="149:46">gb</name></name></expr></argument>, <argument pos:start="149:49" pos:end="149:49"><expr pos:start="149:49" pos:end="149:49"><literal type="number" pos:start="149:49" pos:end="149:49">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:56"><expr pos:start="151:9" pos:end="151:55"><name pos:start="151:9" pos:end="151:30">interlacing_leftweight</name> <operator pos:start="151:32" pos:end="151:32">=</operator> <call pos:start="151:34" pos:end="151:55"><name pos:start="151:34" pos:end="151:41">get_bits</name><argument_list pos:start="151:42" pos:end="151:55">(<argument pos:start="151:43" pos:end="151:51"><expr pos:start="151:43" pos:end="151:51"><operator pos:start="151:43" pos:end="151:43">&amp;</operator><name pos:start="151:44" pos:end="151:51"><name pos:start="151:44" pos:end="151:47">alac</name><operator pos:start="151:48" pos:end="151:49">-&gt;</operator><name pos:start="151:50" pos:end="151:51">gb</name></name></expr></argument>, <argument pos:start="151:54" pos:end="151:54"><expr pos:start="151:54" pos:end="151:54"><literal type="number" pos:start="151:54" pos:end="151:54">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="155:9" pos:end="175:9">for <control pos:start="155:13" pos:end="155:41">(<init pos:start="155:14" pos:end="155:20"><expr pos:start="155:14" pos:end="155:19"><name pos:start="155:14" pos:end="155:15">ch</name> <operator pos:start="155:17" pos:end="155:17">=</operator> <literal type="number" pos:start="155:19" pos:end="155:19">0</literal></expr>;</init> <condition pos:start="155:22" pos:end="155:35"><expr pos:start="155:22" pos:end="155:34"><name pos:start="155:22" pos:end="155:23">ch</name> <operator pos:start="155:25" pos:end="155:25">&lt;</operator> <name pos:start="155:27" pos:end="155:34">channels</name></expr>;</condition> <incr pos:start="155:37" pos:end="155:40"><expr pos:start="155:37" pos:end="155:40"><name pos:start="155:37" pos:end="155:38">ch</name><operator pos:start="155:39" pos:end="155:40">++</operator></expr></incr>)</control> <block pos:start="155:43" pos:end="175:9">{<block_content pos:start="157:13" pos:end="173:79">

            <expr_stmt pos:start="157:13" pos:end="157:57"><expr pos:start="157:13" pos:end="157:56"><name pos:start="157:13" pos:end="157:31"><name pos:start="157:13" pos:end="157:27">prediction_type</name><index pos:start="157:28" pos:end="157:31">[<expr pos:start="157:29" pos:end="157:30"><name pos:start="157:29" pos:end="157:30">ch</name></expr>]</index></name> <operator pos:start="157:33" pos:end="157:33">=</operator> <call pos:start="157:35" pos:end="157:56"><name pos:start="157:35" pos:end="157:42">get_bits</name><argument_list pos:start="157:43" pos:end="157:56">(<argument pos:start="157:44" pos:end="157:52"><expr pos:start="157:44" pos:end="157:52"><operator pos:start="157:44" pos:end="157:44">&amp;</operator><name pos:start="157:45" pos:end="157:52"><name pos:start="157:45" pos:end="157:48">alac</name><operator pos:start="157:49" pos:end="157:50">-&gt;</operator><name pos:start="157:51" pos:end="157:52">gb</name></name></expr></argument>, <argument pos:start="157:55" pos:end="157:55"><expr pos:start="157:55" pos:end="157:55"><literal type="number" pos:start="157:55" pos:end="157:55">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:67"><expr pos:start="159:13" pos:end="159:66"><name pos:start="159:13" pos:end="159:41"><name pos:start="159:13" pos:end="159:37">prediction_quantitization</name><index pos:start="159:38" pos:end="159:41">[<expr pos:start="159:39" pos:end="159:40"><name pos:start="159:39" pos:end="159:40">ch</name></expr>]</index></name> <operator pos:start="159:43" pos:end="159:43">=</operator> <call pos:start="159:45" pos:end="159:66"><name pos:start="159:45" pos:end="159:52">get_bits</name><argument_list pos:start="159:53" pos:end="159:66">(<argument pos:start="159:54" pos:end="159:62"><expr pos:start="159:54" pos:end="159:62"><operator pos:start="159:54" pos:end="159:54">&amp;</operator><name pos:start="159:55" pos:end="159:62"><name pos:start="159:55" pos:end="159:58">alac</name><operator pos:start="159:59" pos:end="159:60">-&gt;</operator><name pos:start="159:61" pos:end="159:62">gb</name></name></expr></argument>, <argument pos:start="159:65" pos:end="159:65"><expr pos:start="159:65" pos:end="159:65"><literal type="number" pos:start="159:65" pos:end="159:65">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="163:13" pos:end="163:54"><expr pos:start="163:13" pos:end="163:53"><name pos:start="163:13" pos:end="163:28"><name pos:start="163:13" pos:end="163:24">ricemodifier</name><index pos:start="163:25" pos:end="163:28">[<expr pos:start="163:26" pos:end="163:27"><name pos:start="163:26" pos:end="163:27">ch</name></expr>]</index></name> <operator pos:start="163:30" pos:end="163:30">=</operator> <call pos:start="163:32" pos:end="163:53"><name pos:start="163:32" pos:end="163:39">get_bits</name><argument_list pos:start="163:40" pos:end="163:53">(<argument pos:start="163:41" pos:end="163:49"><expr pos:start="163:41" pos:end="163:49"><operator pos:start="163:41" pos:end="163:41">&amp;</operator><name pos:start="163:42" pos:end="163:49"><name pos:start="163:42" pos:end="163:45">alac</name><operator pos:start="163:46" pos:end="163:47">-&gt;</operator><name pos:start="163:48" pos:end="163:49">gb</name></name></expr></argument>, <argument pos:start="163:52" pos:end="163:52"><expr pos:start="163:52" pos:end="163:52"><literal type="number" pos:start="163:52" pos:end="163:52">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="165:13" pos:end="165:60"><expr pos:start="165:13" pos:end="165:59"><name pos:start="165:13" pos:end="165:34"><name pos:start="165:13" pos:end="165:30">predictor_coef_num</name><index pos:start="165:31" pos:end="165:34">[<expr pos:start="165:32" pos:end="165:33"><name pos:start="165:32" pos:end="165:33">ch</name></expr>]</index></name> <operator pos:start="165:36" pos:end="165:36">=</operator> <call pos:start="165:38" pos:end="165:59"><name pos:start="165:38" pos:end="165:45">get_bits</name><argument_list pos:start="165:46" pos:end="165:59">(<argument pos:start="165:47" pos:end="165:55"><expr pos:start="165:47" pos:end="165:55"><operator pos:start="165:47" pos:end="165:47">&amp;</operator><name pos:start="165:48" pos:end="165:55"><name pos:start="165:48" pos:end="165:51">alac</name><operator pos:start="165:52" pos:end="165:53">-&gt;</operator><name pos:start="165:54" pos:end="165:55">gb</name></name></expr></argument>, <argument pos:start="165:58" pos:end="165:58"><expr pos:start="165:58" pos:end="165:58"><literal type="number" pos:start="165:58" pos:end="165:58">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="169:13" pos:end="169:42">/* read the predictor table */</comment>

            <for pos:start="171:13" pos:end="173:79">for <control pos:start="171:17" pos:end="171:56">(<init pos:start="171:18" pos:end="171:23"><expr pos:start="171:18" pos:end="171:22"><name pos:start="171:18" pos:end="171:18">i</name> <operator pos:start="171:20" pos:end="171:20">=</operator> <literal type="number" pos:start="171:22" pos:end="171:22">0</literal></expr>;</init> <condition pos:start="171:25" pos:end="171:51"><expr pos:start="171:25" pos:end="171:50"><name pos:start="171:25" pos:end="171:25">i</name> <operator pos:start="171:27" pos:end="171:27">&lt;</operator> <name pos:start="171:29" pos:end="171:50"><name pos:start="171:29" pos:end="171:46">predictor_coef_num</name><index pos:start="171:47" pos:end="171:50">[<expr pos:start="171:48" pos:end="171:49"><name pos:start="171:48" pos:end="171:49">ch</name></expr>]</index></name></expr>;</condition> <incr pos:start="171:53" pos:end="171:55"><expr pos:start="171:53" pos:end="171:55"><name pos:start="171:53" pos:end="171:53">i</name><operator pos:start="171:54" pos:end="171:55">++</operator></expr></incr>)</control><block type="pseudo" pos:start="173:17" pos:end="173:79"><block_content pos:start="173:17" pos:end="173:79">

                <expr_stmt pos:start="173:17" pos:end="173:79"><expr pos:start="173:17" pos:end="173:78"><name pos:start="173:17" pos:end="173:43"><name pos:start="173:17" pos:end="173:36">predictor_coef_table</name><index pos:start="173:37" pos:end="173:40">[<expr pos:start="173:38" pos:end="173:39"><name pos:start="173:38" pos:end="173:39">ch</name></expr>]</index><index pos:start="173:41" pos:end="173:43">[<expr pos:start="173:42" pos:end="173:42"><name pos:start="173:42" pos:end="173:42">i</name></expr>]</index></name> <operator pos:start="173:45" pos:end="173:45">=</operator> <operator pos:start="173:47" pos:end="173:47">(</operator><name pos:start="173:48" pos:end="173:54">int16_t</name><operator pos:start="173:55" pos:end="173:55">)</operator><call pos:start="173:56" pos:end="173:78"><name pos:start="173:56" pos:end="173:63">get_bits</name><argument_list pos:start="173:64" pos:end="173:78">(<argument pos:start="173:65" pos:end="173:73"><expr pos:start="173:65" pos:end="173:73"><operator pos:start="173:65" pos:end="173:65">&amp;</operator><name pos:start="173:66" pos:end="173:73"><name pos:start="173:66" pos:end="173:69">alac</name><operator pos:start="173:70" pos:end="173:71">-&gt;</operator><name pos:start="173:72" pos:end="173:73">gb</name></name></expr></argument>, <argument pos:start="173:76" pos:end="173:77"><expr pos:start="173:76" pos:end="173:77"><literal type="number" pos:start="173:76" pos:end="173:77">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></for>



        <if_stmt pos:start="179:9" pos:end="189:9"><if pos:start="179:9" pos:end="189:9">if <condition pos:start="179:12" pos:end="179:29">(<expr pos:start="179:13" pos:end="179:28"><name pos:start="179:13" pos:end="179:28"><name pos:start="179:13" pos:end="179:16">alac</name><operator pos:start="179:17" pos:end="179:18">-&gt;</operator><name pos:start="179:19" pos:end="179:28">extra_bits</name></name></expr>)</condition> <block pos:start="179:31" pos:end="189:9">{<block_content pos:start="181:13" pos:end="187:13">

            <for pos:start="181:13" pos:end="187:13">for <control pos:start="181:17" pos:end="181:47">(<init pos:start="181:18" pos:end="181:23"><expr pos:start="181:18" pos:end="181:22"><name pos:start="181:18" pos:end="181:18">i</name> <operator pos:start="181:20" pos:end="181:20">=</operator> <literal type="number" pos:start="181:22" pos:end="181:22">0</literal></expr>;</init> <condition pos:start="181:25" pos:end="181:42"><expr pos:start="181:25" pos:end="181:41"><name pos:start="181:25" pos:end="181:25">i</name> <operator pos:start="181:27" pos:end="181:27">&lt;</operator> <name pos:start="181:29" pos:end="181:41">outputsamples</name></expr>;</condition> <incr pos:start="181:44" pos:end="181:46"><expr pos:start="181:44" pos:end="181:46"><name pos:start="181:44" pos:end="181:44">i</name><operator pos:start="181:45" pos:end="181:46">++</operator></expr></incr>)</control> <block pos:start="181:49" pos:end="187:13">{<block_content pos:start="183:17" pos:end="185:91">

                <for pos:start="183:17" pos:end="185:91">for <control pos:start="183:21" pos:end="183:49">(<init pos:start="183:22" pos:end="183:28"><expr pos:start="183:22" pos:end="183:27"><name pos:start="183:22" pos:end="183:23">ch</name> <operator pos:start="183:25" pos:end="183:25">=</operator> <literal type="number" pos:start="183:27" pos:end="183:27">0</literal></expr>;</init> <condition pos:start="183:30" pos:end="183:43"><expr pos:start="183:30" pos:end="183:42"><name pos:start="183:30" pos:end="183:31">ch</name> <operator pos:start="183:33" pos:end="183:33">&lt;</operator> <name pos:start="183:35" pos:end="183:42">channels</name></expr>;</condition> <incr pos:start="183:45" pos:end="183:48"><expr pos:start="183:45" pos:end="183:48"><name pos:start="183:45" pos:end="183:46">ch</name><operator pos:start="183:47" pos:end="183:48">++</operator></expr></incr>)</control><block type="pseudo" pos:start="185:21" pos:end="185:91"><block_content pos:start="185:21" pos:end="185:91">

                    <expr_stmt pos:start="185:21" pos:end="185:91"><expr pos:start="185:21" pos:end="185:90"><name pos:start="185:21" pos:end="185:50"><name pos:start="185:21" pos:end="185:24">alac</name><operator pos:start="185:25" pos:end="185:26">-&gt;</operator><name pos:start="185:27" pos:end="185:43">extra_bits_buffer</name><index pos:start="185:44" pos:end="185:47">[<expr pos:start="185:45" pos:end="185:46"><name pos:start="185:45" pos:end="185:46">ch</name></expr>]</index><index pos:start="185:48" pos:end="185:50">[<expr pos:start="185:49" pos:end="185:49"><name pos:start="185:49" pos:end="185:49">i</name></expr>]</index></name> <operator pos:start="185:52" pos:end="185:52">=</operator> <call pos:start="185:54" pos:end="185:90"><name pos:start="185:54" pos:end="185:61">get_bits</name><argument_list pos:start="185:62" pos:end="185:90">(<argument pos:start="185:63" pos:end="185:71"><expr pos:start="185:63" pos:end="185:71"><operator pos:start="185:63" pos:end="185:63">&amp;</operator><name pos:start="185:64" pos:end="185:71"><name pos:start="185:64" pos:end="185:67">alac</name><operator pos:start="185:68" pos:end="185:69">-&gt;</operator><name pos:start="185:70" pos:end="185:71">gb</name></name></expr></argument>, <argument pos:start="185:74" pos:end="185:89"><expr pos:start="185:74" pos:end="185:89"><name pos:start="185:74" pos:end="185:89"><name pos:start="185:74" pos:end="185:77">alac</name><operator pos:start="185:78" pos:end="185:79">-&gt;</operator><name pos:start="185:80" pos:end="185:89">extra_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

        <for pos:start="191:9" pos:end="247:9">for <control pos:start="191:13" pos:end="191:41">(<init pos:start="191:14" pos:end="191:20"><expr pos:start="191:14" pos:end="191:19"><name pos:start="191:14" pos:end="191:15">ch</name> <operator pos:start="191:17" pos:end="191:17">=</operator> <literal type="number" pos:start="191:19" pos:end="191:19">0</literal></expr>;</init> <condition pos:start="191:22" pos:end="191:35"><expr pos:start="191:22" pos:end="191:34"><name pos:start="191:22" pos:end="191:23">ch</name> <operator pos:start="191:25" pos:end="191:25">&lt;</operator> <name pos:start="191:27" pos:end="191:34">channels</name></expr>;</condition> <incr pos:start="191:37" pos:end="191:40"><expr pos:start="191:37" pos:end="191:40"><name pos:start="191:37" pos:end="191:38">ch</name><operator pos:start="191:39" pos:end="191:40">++</operator></expr></incr>)</control> <block pos:start="191:43" pos:end="247:9">{<block_content pos:start="193:13" pos:end="245:13">

            <expr_stmt pos:start="193:13" pos:end="207:81"><expr pos:start="193:13" pos:end="207:80"><call pos:start="193:13" pos:end="207:80"><name pos:start="193:13" pos:end="193:39">bastardized_rice_decompress</name><argument_list pos:start="193:40" pos:end="207:80">(<argument pos:start="193:41" pos:end="193:44"><expr pos:start="193:41" pos:end="193:44"><name pos:start="193:41" pos:end="193:44">alac</name></expr></argument>,

                                        <argument pos:start="195:41" pos:end="195:69"><expr pos:start="195:41" pos:end="195:69"><name pos:start="195:41" pos:end="195:69"><name pos:start="195:41" pos:end="195:44">alac</name><operator pos:start="195:45" pos:end="195:46">-&gt;</operator><name pos:start="195:47" pos:end="195:65">predicterror_buffer</name><index pos:start="195:66" pos:end="195:69">[<expr pos:start="195:67" pos:end="195:68"><name pos:start="195:67" pos:end="195:68">ch</name></expr>]</index></name></expr></argument>,

                                        <argument pos:start="197:41" pos:end="197:53"><expr pos:start="197:41" pos:end="197:53"><name pos:start="197:41" pos:end="197:53">outputsamples</name></expr></argument>,

                                        <argument pos:start="199:41" pos:end="199:54"><expr pos:start="199:41" pos:end="199:54"><name pos:start="199:41" pos:end="199:54">readsamplesize</name></expr></argument>,

                                        <argument pos:start="201:41" pos:end="201:73"><expr pos:start="201:41" pos:end="201:73"><name pos:start="201:41" pos:end="201:73"><name pos:start="201:41" pos:end="201:44">alac</name><operator pos:start="201:45" pos:end="201:46">-&gt;</operator><name pos:start="201:47" pos:end="201:73">setinfo_rice_initialhistory</name></name></expr></argument>,

                                        <argument pos:start="203:41" pos:end="203:68"><expr pos:start="203:41" pos:end="203:68"><name pos:start="203:41" pos:end="203:68"><name pos:start="203:41" pos:end="203:44">alac</name><operator pos:start="203:45" pos:end="203:46">-&gt;</operator><name pos:start="203:47" pos:end="203:68">setinfo_rice_kmodifier</name></name></expr></argument>,

                                        <argument pos:start="205:41" pos:end="205:93"><expr pos:start="205:41" pos:end="205:93"><name pos:start="205:41" pos:end="205:56"><name pos:start="205:41" pos:end="205:52">ricemodifier</name><index pos:start="205:53" pos:end="205:56">[<expr pos:start="205:54" pos:end="205:55"><name pos:start="205:54" pos:end="205:55">ch</name></expr>]</index></name> <operator pos:start="205:58" pos:end="205:58">*</operator> <name pos:start="205:60" pos:end="205:89"><name pos:start="205:60" pos:end="205:63">alac</name><operator pos:start="205:64" pos:end="205:65">-&gt;</operator><name pos:start="205:66" pos:end="205:89">setinfo_rice_historymult</name></name> <operator pos:start="205:91" pos:end="205:91">/</operator> <literal type="number" pos:start="205:93" pos:end="205:93">4</literal></expr></argument>,

                                        <argument pos:start="207:41" pos:end="207:79"><expr pos:start="207:41" pos:end="207:79"><operator pos:start="207:41" pos:end="207:41">(</operator><literal type="number" pos:start="207:42" pos:end="207:42">1</literal> <operator pos:start="207:44" pos:end="207:45">&lt;&lt;</operator> <name pos:start="207:47" pos:end="207:74"><name pos:start="207:47" pos:end="207:50">alac</name><operator pos:start="207:51" pos:end="207:52">-&gt;</operator><name pos:start="207:53" pos:end="207:74">setinfo_rice_kmodifier</name></name><operator pos:start="207:75" pos:end="207:75">)</operator> <operator pos:start="207:77" pos:end="207:77">-</operator> <literal type="number" pos:start="207:79" pos:end="207:79">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="211:13" pos:end="245:13"><if pos:start="211:13" pos:end="229:13">if <condition pos:start="211:16" pos:end="211:41">(<expr pos:start="211:17" pos:end="211:40"><name pos:start="211:17" pos:end="211:35"><name pos:start="211:17" pos:end="211:31">prediction_type</name><index pos:start="211:32" pos:end="211:35">[<expr pos:start="211:33" pos:end="211:34"><name pos:start="211:33" pos:end="211:34">ch</name></expr>]</index></name> <operator pos:start="211:37" pos:end="211:38">==</operator> <literal type="number" pos:start="211:40" pos:end="211:40">0</literal></expr>)</condition> <block pos:start="211:43" pos:end="229:13">{<block_content pos:start="215:17" pos:end="227:78">

                <comment type="block" pos:start="213:17" pos:end="213:34">/* adaptive fir */</comment>

                <expr_stmt pos:start="215:17" pos:end="227:78"><expr pos:start="215:17" pos:end="227:77"><call pos:start="215:17" pos:end="227:77"><name pos:start="215:17" pos:end="215:46">predictor_decompress_fir_adapt</name><argument_list pos:start="215:47" pos:end="227:77">(<argument pos:start="215:48" pos:end="215:76"><expr pos:start="215:48" pos:end="215:76"><name pos:start="215:48" pos:end="215:76"><name pos:start="215:48" pos:end="215:51">alac</name><operator pos:start="215:52" pos:end="215:53">-&gt;</operator><name pos:start="215:54" pos:end="215:72">predicterror_buffer</name><index pos:start="215:73" pos:end="215:76">[<expr pos:start="215:74" pos:end="215:75"><name pos:start="215:74" pos:end="215:75">ch</name></expr>]</index></name></expr></argument>,

                                               <argument pos:start="217:48" pos:end="217:77"><expr pos:start="217:48" pos:end="217:77"><name pos:start="217:48" pos:end="217:77"><name pos:start="217:48" pos:end="217:51">alac</name><operator pos:start="217:52" pos:end="217:53">-&gt;</operator><name pos:start="217:54" pos:end="217:73">outputsamples_buffer</name><index pos:start="217:74" pos:end="217:77">[<expr pos:start="217:75" pos:end="217:76"><name pos:start="217:75" pos:end="217:76">ch</name></expr>]</index></name></expr></argument>,

                                               <argument pos:start="219:48" pos:end="219:60"><expr pos:start="219:48" pos:end="219:60"><name pos:start="219:48" pos:end="219:60">outputsamples</name></expr></argument>,

                                               <argument pos:start="221:48" pos:end="221:61"><expr pos:start="221:48" pos:end="221:61"><name pos:start="221:48" pos:end="221:61">readsamplesize</name></expr></argument>,

                                               <argument pos:start="223:48" pos:end="223:71"><expr pos:start="223:48" pos:end="223:71"><name pos:start="223:48" pos:end="223:71"><name pos:start="223:48" pos:end="223:67">predictor_coef_table</name><index pos:start="223:68" pos:end="223:71">[<expr pos:start="223:69" pos:end="223:70"><name pos:start="223:69" pos:end="223:70">ch</name></expr>]</index></name></expr></argument>,

                                               <argument pos:start="225:48" pos:end="225:69"><expr pos:start="225:48" pos:end="225:69"><name pos:start="225:48" pos:end="225:69"><name pos:start="225:48" pos:end="225:65">predictor_coef_num</name><index pos:start="225:66" pos:end="225:69">[<expr pos:start="225:67" pos:end="225:68"><name pos:start="225:67" pos:end="225:68">ch</name></expr>]</index></name></expr></argument>,

                                               <argument pos:start="227:48" pos:end="227:76"><expr pos:start="227:48" pos:end="227:76"><name pos:start="227:48" pos:end="227:76"><name pos:start="227:48" pos:end="227:72">prediction_quantitization</name><index pos:start="227:73" pos:end="227:76">[<expr pos:start="227:74" pos:end="227:75"><name pos:start="227:74" pos:end="227:75">ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="229:15" pos:end="245:13">else <block pos:start="229:20" pos:end="245:13">{<block_content pos:start="231:17" pos:end="231:107">

                <expr_stmt pos:start="231:17" pos:end="231:107"><expr pos:start="231:17" pos:end="231:106"><call pos:start="231:17" pos:end="231:106"><name pos:start="231:17" pos:end="231:22">av_log</name><argument_list pos:start="231:23" pos:end="231:106">(<argument pos:start="231:24" pos:end="231:28"><expr pos:start="231:24" pos:end="231:28"><name pos:start="231:24" pos:end="231:28">avctx</name></expr></argument>, <argument pos:start="231:31" pos:end="231:42"><expr pos:start="231:31" pos:end="231:42"><name pos:start="231:31" pos:end="231:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="231:45" pos:end="231:84"><expr pos:start="231:45" pos:end="231:84"><literal type="string" pos:start="231:45" pos:end="231:84">"FIXME: unhandled prediction type: %i\n"</literal></expr></argument>, <argument pos:start="231:87" pos:end="231:105"><expr pos:start="231:87" pos:end="231:105"><name pos:start="231:87" pos:end="231:105"><name pos:start="231:87" pos:end="231:101">prediction_type</name><index pos:start="231:102" pos:end="231:105">[<expr pos:start="231:103" pos:end="231:104"><name pos:start="231:103" pos:end="231:104">ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="233:17" pos:end="243:19">/* I think the only other prediction type (or perhaps this is

                 * just a boolean?) runs adaptive fir twice.. like:

                 * predictor_decompress_fir_adapt(predictor_error, tempout, ...)

                 * predictor_decompress_fir_adapt(predictor_error, outputsamples ...)

                 * little strange..

                 */</comment>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="249:7" pos:end="271:5">else <block pos:start="249:12" pos:end="271:5">{<block_content pos:start="253:9" pos:end="269:35">

        <comment type="block" pos:start="251:9" pos:end="251:39">/* not compressed, easy case */</comment>

        <for pos:start="253:9" pos:end="263:9">for <control pos:start="253:13" pos:end="253:43">(<init pos:start="253:14" pos:end="253:19"><expr pos:start="253:14" pos:end="253:18"><name pos:start="253:14" pos:end="253:14">i</name> <operator pos:start="253:16" pos:end="253:16">=</operator> <literal type="number" pos:start="253:18" pos:end="253:18">0</literal></expr>;</init> <condition pos:start="253:21" pos:end="253:38"><expr pos:start="253:21" pos:end="253:37"><name pos:start="253:21" pos:end="253:21">i</name> <operator pos:start="253:23" pos:end="253:23">&lt;</operator> <name pos:start="253:25" pos:end="253:37">outputsamples</name></expr>;</condition> <incr pos:start="253:40" pos:end="253:42"><expr pos:start="253:40" pos:end="253:42"><name pos:start="253:40" pos:end="253:40">i</name><operator pos:start="253:41" pos:end="253:42">++</operator></expr></incr>)</control> <block pos:start="253:45" pos:end="263:9">{<block_content pos:start="255:13" pos:end="261:13">

            <for pos:start="255:13" pos:end="261:13">for <control pos:start="255:17" pos:end="255:45">(<init pos:start="255:18" pos:end="255:24"><expr pos:start="255:18" pos:end="255:23"><name pos:start="255:18" pos:end="255:19">ch</name> <operator pos:start="255:21" pos:end="255:21">=</operator> <literal type="number" pos:start="255:23" pos:end="255:23">0</literal></expr>;</init> <condition pos:start="255:26" pos:end="255:39"><expr pos:start="255:26" pos:end="255:38"><name pos:start="255:26" pos:end="255:27">ch</name> <operator pos:start="255:29" pos:end="255:29">&lt;</operator> <name pos:start="255:31" pos:end="255:38">channels</name></expr>;</condition> <incr pos:start="255:41" pos:end="255:44"><expr pos:start="255:41" pos:end="255:44"><name pos:start="255:41" pos:end="255:42">ch</name><operator pos:start="255:43" pos:end="255:44">++</operator></expr></incr>)</control> <block pos:start="255:47" pos:end="261:13">{<block_content pos:start="257:17" pos:end="259:94">

                <expr_stmt pos:start="257:17" pos:end="259:94"><expr pos:start="257:17" pos:end="259:93"><name pos:start="257:17" pos:end="257:49"><name pos:start="257:17" pos:end="257:20">alac</name><operator pos:start="257:21" pos:end="257:22">-&gt;</operator><name pos:start="257:23" pos:end="257:42">outputsamples_buffer</name><index pos:start="257:43" pos:end="257:46">[<expr pos:start="257:44" pos:end="257:45"><name pos:start="257:44" pos:end="257:45">ch</name></expr>]</index><index pos:start="257:47" pos:end="257:49">[<expr pos:start="257:48" pos:end="257:48"><name pos:start="257:48" pos:end="257:48">i</name></expr>]</index></name> <operator pos:start="257:51" pos:end="257:51">=</operator> <call pos:start="257:53" pos:end="259:93"><name pos:start="257:53" pos:end="257:66">get_sbits_long</name><argument_list pos:start="257:67" pos:end="259:93">(<argument pos:start="257:68" pos:end="257:76"><expr pos:start="257:68" pos:end="257:76"><operator pos:start="257:68" pos:end="257:68">&amp;</operator><name pos:start="257:69" pos:end="257:76"><name pos:start="257:69" pos:end="257:72">alac</name><operator pos:start="257:73" pos:end="257:74">-&gt;</operator><name pos:start="257:75" pos:end="257:76">gb</name></name></expr></argument>,

                                                                   <argument pos:start="259:68" pos:end="259:92"><expr pos:start="259:68" pos:end="259:92"><name pos:start="259:68" pos:end="259:92"><name pos:start="259:68" pos:end="259:71">alac</name><operator pos:start="259:72" pos:end="259:73">-&gt;</operator><name pos:start="259:74" pos:end="259:92">setinfo_sample_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

        <expr_stmt pos:start="265:9" pos:end="265:29"><expr pos:start="265:9" pos:end="265:28"><name pos:start="265:9" pos:end="265:24"><name pos:start="265:9" pos:end="265:12">alac</name><operator pos:start="265:13" pos:end="265:14">-&gt;</operator><name pos:start="265:15" pos:end="265:24">extra_bits</name></name> <operator pos:start="265:26" pos:end="265:26">=</operator> <literal type="number" pos:start="265:28" pos:end="265:28">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="267:9" pos:end="267:30"><expr pos:start="267:9" pos:end="267:29"><name pos:start="267:9" pos:end="267:25">interlacing_shift</name> <operator pos:start="267:27" pos:end="267:27">=</operator> <literal type="number" pos:start="267:29" pos:end="267:29">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="269:9" pos:end="269:35"><expr pos:start="269:9" pos:end="269:34"><name pos:start="269:9" pos:end="269:30">interlacing_leftweight</name> <operator pos:start="269:32" pos:end="269:32">=</operator> <literal type="number" pos:start="269:34" pos:end="269:34">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="273:5" pos:end="275:68"><if pos:start="273:5" pos:end="275:68">if <condition pos:start="273:8" pos:end="273:36">(<expr pos:start="273:9" pos:end="273:35"><call pos:start="273:9" pos:end="273:30"><name pos:start="273:9" pos:end="273:16">get_bits</name><argument_list pos:start="273:17" pos:end="273:30">(<argument pos:start="273:18" pos:end="273:26"><expr pos:start="273:18" pos:end="273:26"><operator pos:start="273:18" pos:end="273:18">&amp;</operator><name pos:start="273:19" pos:end="273:26"><name pos:start="273:19" pos:end="273:22">alac</name><operator pos:start="273:23" pos:end="273:24">-&gt;</operator><name pos:start="273:25" pos:end="273:26">gb</name></name></expr></argument>, <argument pos:start="273:29" pos:end="273:29"><expr pos:start="273:29" pos:end="273:29"><literal type="number" pos:start="273:29" pos:end="273:29">3</literal></expr></argument>)</argument_list></call> <operator pos:start="273:32" pos:end="273:33">!=</operator> <literal type="number" pos:start="273:35" pos:end="273:35">7</literal></expr>)</condition><block type="pseudo" pos:start="275:9" pos:end="275:68"><block_content pos:start="275:9" pos:end="275:68">

        <expr_stmt pos:start="275:9" pos:end="275:68"><expr pos:start="275:9" pos:end="275:67"><call pos:start="275:9" pos:end="275:67"><name pos:start="275:9" pos:end="275:14">av_log</name><argument_list pos:start="275:15" pos:end="275:67">(<argument pos:start="275:16" pos:end="275:20"><expr pos:start="275:16" pos:end="275:20"><name pos:start="275:16" pos:end="275:20">avctx</name></expr></argument>, <argument pos:start="275:23" pos:end="275:34"><expr pos:start="275:23" pos:end="275:34"><name pos:start="275:23" pos:end="275:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="275:37" pos:end="275:66"><expr pos:start="275:37" pos:end="275:66"><literal type="string" pos:start="275:37" pos:end="275:66">"Error : Wrong End Of Frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="279:5" pos:end="285:5"><if pos:start="279:5" pos:end="285:5">if <condition pos:start="279:8" pos:end="279:48">(<expr pos:start="279:9" pos:end="279:47"><name pos:start="279:9" pos:end="279:16">channels</name> <operator pos:start="279:18" pos:end="279:19">==</operator> <literal type="number" pos:start="279:21" pos:end="279:21">2</literal> <operator pos:start="279:23" pos:end="279:24">&amp;&amp;</operator> <name pos:start="279:26" pos:end="279:47">interlacing_leftweight</name></expr>)</condition> <block pos:start="279:50" pos:end="285:5">{<block_content pos:start="281:9" pos:end="283:70">

        <expr_stmt pos:start="281:9" pos:end="283:70"><expr pos:start="281:9" pos:end="283:69"><call pos:start="281:9" pos:end="283:69"><name pos:start="281:9" pos:end="281:26">decorrelate_stereo</name><argument_list pos:start="281:27" pos:end="283:69">(<argument pos:start="281:28" pos:end="281:53"><expr pos:start="281:28" pos:end="281:53"><name pos:start="281:28" pos:end="281:53"><name pos:start="281:28" pos:end="281:31">alac</name><operator pos:start="281:32" pos:end="281:33">-&gt;</operator><name pos:start="281:34" pos:end="281:53">outputsamples_buffer</name></name></expr></argument>, <argument pos:start="281:56" pos:end="281:68"><expr pos:start="281:56" pos:end="281:68"><name pos:start="281:56" pos:end="281:68">outputsamples</name></expr></argument>,

                           <argument pos:start="283:28" pos:end="283:44"><expr pos:start="283:28" pos:end="283:44"><name pos:start="283:28" pos:end="283:44">interlacing_shift</name></expr></argument>, <argument pos:start="283:47" pos:end="283:68"><expr pos:start="283:47" pos:end="283:68"><name pos:start="283:47" pos:end="283:68">interlacing_leftweight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="289:5" pos:end="295:5"><if pos:start="289:5" pos:end="295:5">if <condition pos:start="289:8" pos:end="289:25">(<expr pos:start="289:9" pos:end="289:24"><name pos:start="289:9" pos:end="289:24"><name pos:start="289:9" pos:end="289:12">alac</name><operator pos:start="289:13" pos:end="289:14">-&gt;</operator><name pos:start="289:15" pos:end="289:24">extra_bits</name></name></expr>)</condition> <block pos:start="289:27" pos:end="295:5">{<block_content pos:start="291:9" pos:end="293:78">

        <expr_stmt pos:start="291:9" pos:end="293:78"><expr pos:start="291:9" pos:end="293:77"><call pos:start="291:9" pos:end="293:77"><name pos:start="291:9" pos:end="291:25">append_extra_bits</name><argument_list pos:start="291:26" pos:end="293:77">(<argument pos:start="291:27" pos:end="291:52"><expr pos:start="291:27" pos:end="291:52"><name pos:start="291:27" pos:end="291:52"><name pos:start="291:27" pos:end="291:30">alac</name><operator pos:start="291:31" pos:end="291:32">-&gt;</operator><name pos:start="291:33" pos:end="291:52">outputsamples_buffer</name></name></expr></argument>, <argument pos:start="291:55" pos:end="291:77"><expr pos:start="291:55" pos:end="291:77"><name pos:start="291:55" pos:end="291:77"><name pos:start="291:55" pos:end="291:58">alac</name><operator pos:start="291:59" pos:end="291:60">-&gt;</operator><name pos:start="291:61" pos:end="291:77">extra_bits_buffer</name></name></expr></argument>,

                          <argument pos:start="293:27" pos:end="293:42"><expr pos:start="293:27" pos:end="293:42"><name pos:start="293:27" pos:end="293:42"><name pos:start="293:27" pos:end="293:30">alac</name><operator pos:start="293:31" pos:end="293:32">-&gt;</operator><name pos:start="293:33" pos:end="293:42">extra_bits</name></name></expr></argument>, <argument pos:start="293:45" pos:end="293:61"><expr pos:start="293:45" pos:end="293:61"><name pos:start="293:45" pos:end="293:61"><name pos:start="293:45" pos:end="293:48">alac</name><operator pos:start="293:49" pos:end="293:50">-&gt;</operator><name pos:start="293:51" pos:end="293:61">numchannels</name></name></expr></argument>, <argument pos:start="293:64" pos:end="293:76"><expr pos:start="293:64" pos:end="293:76"><name pos:start="293:64" pos:end="293:76">outputsamples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="299:5" pos:end="343:5">switch<condition pos:start="299:11" pos:end="299:37">(<expr pos:start="299:12" pos:end="299:36"><name pos:start="299:12" pos:end="299:36"><name pos:start="299:12" pos:end="299:15">alac</name><operator pos:start="299:16" pos:end="299:17">-&gt;</operator><name pos:start="299:18" pos:end="299:36">setinfo_sample_size</name></name></expr>)</condition> <block pos:start="299:39" pos:end="343:5">{<block_content pos:start="301:5" pos:end="341:14">

    <case pos:start="301:5" pos:end="301:12">case <expr pos:start="301:10" pos:end="301:11"><literal type="number" pos:start="301:10" pos:end="301:11">16</literal></expr>:</case>

        <if_stmt pos:start="303:9" pos:end="319:9"><if pos:start="303:9" pos:end="309:9">if <condition pos:start="303:12" pos:end="303:26">(<expr pos:start="303:13" pos:end="303:25"><name pos:start="303:13" pos:end="303:20">channels</name> <operator pos:start="303:22" pos:end="303:23">==</operator> <literal type="number" pos:start="303:25" pos:end="303:25">2</literal></expr>)</condition> <block pos:start="303:28" pos:end="309:9">{<block_content pos:start="305:13" pos:end="307:80">

            <expr_stmt pos:start="305:13" pos:end="307:80"><expr pos:start="305:13" pos:end="307:79"><call pos:start="305:13" pos:end="307:79"><name pos:start="305:13" pos:end="305:32">interleave_stereo_16</name><argument_list pos:start="305:33" pos:end="307:79">(<argument pos:start="305:34" pos:end="305:59"><expr pos:start="305:34" pos:end="305:59"><name pos:start="305:34" pos:end="305:59"><name pos:start="305:34" pos:end="305:37">alac</name><operator pos:start="305:38" pos:end="305:39">-&gt;</operator><name pos:start="305:40" pos:end="305:59">outputsamples_buffer</name></name></expr></argument>,

                                 <argument pos:start="307:34" pos:end="307:63"><expr pos:start="307:34" pos:end="307:63"><operator pos:start="307:34" pos:end="307:34">(</operator><name pos:start="307:35" pos:end="307:41">int16_t</name> <operator pos:start="307:43" pos:end="307:43">*</operator><operator pos:start="307:44" pos:end="307:44">)</operator><name pos:start="307:45" pos:end="307:63"><name pos:start="307:45" pos:end="307:48">alac</name><operator pos:start="307:49" pos:end="307:50">-&gt;</operator><name pos:start="307:51" pos:end="307:55">frame</name><operator pos:start="307:56" pos:end="307:56">.</operator><name pos:start="307:57" pos:end="307:60">data</name><index pos:start="307:61" pos:end="307:63">[<expr pos:start="307:62" pos:end="307:62"><literal type="number" pos:start="307:62" pos:end="307:62">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="307:66" pos:end="307:78"><expr pos:start="307:66" pos:end="307:78"><name pos:start="307:66" pos:end="307:78">outputsamples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="309:11" pos:end="319:9">else <block pos:start="309:16" pos:end="319:9">{<block_content pos:start="311:13" pos:end="317:13">

            <decl_stmt pos:start="311:13" pos:end="311:64"><decl pos:start="311:13" pos:end="311:63"><type pos:start="311:13" pos:end="311:21"><name pos:start="311:13" pos:end="311:19">int16_t</name> <modifier pos:start="311:21" pos:end="311:21">*</modifier></type><name pos:start="311:22" pos:end="311:30">outbuffer</name> <init pos:start="311:32" pos:end="311:63">= <expr pos:start="311:34" pos:end="311:63"><operator pos:start="311:34" pos:end="311:34">(</operator><name pos:start="311:35" pos:end="311:41">int16_t</name> <operator pos:start="311:43" pos:end="311:43">*</operator><operator pos:start="311:44" pos:end="311:44">)</operator><name pos:start="311:45" pos:end="311:63"><name pos:start="311:45" pos:end="311:48">alac</name><operator pos:start="311:49" pos:end="311:50">-&gt;</operator><name pos:start="311:51" pos:end="311:55">frame</name><operator pos:start="311:56" pos:end="311:56">.</operator><name pos:start="311:57" pos:end="311:60">data</name><index pos:start="311:61" pos:end="311:63">[<expr pos:start="311:62" pos:end="311:62"><literal type="number" pos:start="311:62" pos:end="311:62">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <for pos:start="313:13" pos:end="317:13">for <control pos:start="313:17" pos:end="313:47">(<init pos:start="313:18" pos:end="313:23"><expr pos:start="313:18" pos:end="313:22"><name pos:start="313:18" pos:end="313:18">i</name> <operator pos:start="313:20" pos:end="313:20">=</operator> <literal type="number" pos:start="313:22" pos:end="313:22">0</literal></expr>;</init> <condition pos:start="313:25" pos:end="313:42"><expr pos:start="313:25" pos:end="313:41"><name pos:start="313:25" pos:end="313:25">i</name> <operator pos:start="313:27" pos:end="313:27">&lt;</operator> <name pos:start="313:29" pos:end="313:41">outputsamples</name></expr>;</condition> <incr pos:start="313:44" pos:end="313:46"><expr pos:start="313:44" pos:end="313:46"><name pos:start="313:44" pos:end="313:44">i</name><operator pos:start="313:45" pos:end="313:46">++</operator></expr></incr>)</control> <block pos:start="313:49" pos:end="317:13">{<block_content pos:start="315:17" pos:end="315:64">

                <expr_stmt pos:start="315:17" pos:end="315:64"><expr pos:start="315:17" pos:end="315:63"><name pos:start="315:17" pos:end="315:28"><name pos:start="315:17" pos:end="315:25">outbuffer</name><index pos:start="315:26" pos:end="315:28">[<expr pos:start="315:27" pos:end="315:27"><name pos:start="315:27" pos:end="315:27">i</name></expr>]</index></name> <operator pos:start="315:30" pos:end="315:30">=</operator> <name pos:start="315:32" pos:end="315:63"><name pos:start="315:32" pos:end="315:35">alac</name><operator pos:start="315:36" pos:end="315:37">-&gt;</operator><name pos:start="315:38" pos:end="315:57">outputsamples_buffer</name><index pos:start="315:58" pos:end="315:60">[<expr pos:start="315:59" pos:end="315:59"><literal type="number" pos:start="315:59" pos:end="315:59">0</literal></expr>]</index><index pos:start="315:61" pos:end="315:63">[<expr pos:start="315:62" pos:end="315:62"><name pos:start="315:62" pos:end="315:62">i</name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

        <break pos:start="321:9" pos:end="321:14">break;</break>

    <case pos:start="323:5" pos:end="323:12">case <expr pos:start="323:10" pos:end="323:11"><literal type="number" pos:start="323:10" pos:end="323:11">24</literal></expr>:</case>

        <if_stmt pos:start="325:9" pos:end="339:9"><if pos:start="325:9" pos:end="331:9">if <condition pos:start="325:12" pos:end="325:26">(<expr pos:start="325:13" pos:end="325:25"><name pos:start="325:13" pos:end="325:20">channels</name> <operator pos:start="325:22" pos:end="325:23">==</operator> <literal type="number" pos:start="325:25" pos:end="325:25">2</literal></expr>)</condition> <block pos:start="325:28" pos:end="331:9">{<block_content pos:start="327:13" pos:end="329:80">

            <expr_stmt pos:start="327:13" pos:end="329:80"><expr pos:start="327:13" pos:end="329:79"><call pos:start="327:13" pos:end="329:79"><name pos:start="327:13" pos:end="327:32">interleave_stereo_24</name><argument_list pos:start="327:33" pos:end="329:79">(<argument pos:start="327:34" pos:end="327:59"><expr pos:start="327:34" pos:end="327:59"><name pos:start="327:34" pos:end="327:59"><name pos:start="327:34" pos:end="327:37">alac</name><operator pos:start="327:38" pos:end="327:39">-&gt;</operator><name pos:start="327:40" pos:end="327:59">outputsamples_buffer</name></name></expr></argument>,

                                 <argument pos:start="329:34" pos:end="329:63"><expr pos:start="329:34" pos:end="329:63"><operator pos:start="329:34" pos:end="329:34">(</operator><name pos:start="329:35" pos:end="329:41">int32_t</name> <operator pos:start="329:43" pos:end="329:43">*</operator><operator pos:start="329:44" pos:end="329:44">)</operator><name pos:start="329:45" pos:end="329:63"><name pos:start="329:45" pos:end="329:48">alac</name><operator pos:start="329:49" pos:end="329:50">-&gt;</operator><name pos:start="329:51" pos:end="329:55">frame</name><operator pos:start="329:56" pos:end="329:56">.</operator><name pos:start="329:57" pos:end="329:60">data</name><index pos:start="329:61" pos:end="329:63">[<expr pos:start="329:62" pos:end="329:62"><literal type="number" pos:start="329:62" pos:end="329:62">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="329:66" pos:end="329:78"><expr pos:start="329:66" pos:end="329:78"><name pos:start="329:66" pos:end="329:78">outputsamples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="331:11" pos:end="339:9">else <block pos:start="331:16" pos:end="339:9">{<block_content pos:start="333:13" pos:end="337:69">

            <decl_stmt pos:start="333:13" pos:end="333:64"><decl pos:start="333:13" pos:end="333:63"><type pos:start="333:13" pos:end="333:21"><name pos:start="333:13" pos:end="333:19">int32_t</name> <modifier pos:start="333:21" pos:end="333:21">*</modifier></type><name pos:start="333:22" pos:end="333:30">outbuffer</name> <init pos:start="333:32" pos:end="333:63">= <expr pos:start="333:34" pos:end="333:63"><operator pos:start="333:34" pos:end="333:34">(</operator><name pos:start="333:35" pos:end="333:41">int32_t</name> <operator pos:start="333:43" pos:end="333:43">*</operator><operator pos:start="333:44" pos:end="333:44">)</operator><name pos:start="333:45" pos:end="333:63"><name pos:start="333:45" pos:end="333:48">alac</name><operator pos:start="333:49" pos:end="333:50">-&gt;</operator><name pos:start="333:51" pos:end="333:55">frame</name><operator pos:start="333:56" pos:end="333:56">.</operator><name pos:start="333:57" pos:end="333:60">data</name><index pos:start="333:61" pos:end="333:63">[<expr pos:start="333:62" pos:end="333:62"><literal type="number" pos:start="333:62" pos:end="333:62">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <for pos:start="335:13" pos:end="337:69">for <control pos:start="335:17" pos:end="335:47">(<init pos:start="335:18" pos:end="335:23"><expr pos:start="335:18" pos:end="335:22"><name pos:start="335:18" pos:end="335:18">i</name> <operator pos:start="335:20" pos:end="335:20">=</operator> <literal type="number" pos:start="335:22" pos:end="335:22">0</literal></expr>;</init> <condition pos:start="335:25" pos:end="335:42"><expr pos:start="335:25" pos:end="335:41"><name pos:start="335:25" pos:end="335:25">i</name> <operator pos:start="335:27" pos:end="335:27">&lt;</operator> <name pos:start="335:29" pos:end="335:41">outputsamples</name></expr>;</condition> <incr pos:start="335:44" pos:end="335:46"><expr pos:start="335:44" pos:end="335:46"><name pos:start="335:44" pos:end="335:44">i</name><operator pos:start="335:45" pos:end="335:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="337:17" pos:end="337:69"><block_content pos:start="337:17" pos:end="337:69">

                <expr_stmt pos:start="337:17" pos:end="337:69"><expr pos:start="337:17" pos:end="337:68"><name pos:start="337:17" pos:end="337:28"><name pos:start="337:17" pos:end="337:25">outbuffer</name><index pos:start="337:26" pos:end="337:28">[<expr pos:start="337:27" pos:end="337:27"><name pos:start="337:27" pos:end="337:27">i</name></expr>]</index></name> <operator pos:start="337:30" pos:end="337:30">=</operator> <name pos:start="337:32" pos:end="337:63"><name pos:start="337:32" pos:end="337:35">alac</name><operator pos:start="337:36" pos:end="337:37">-&gt;</operator><name pos:start="337:38" pos:end="337:57">outputsamples_buffer</name><index pos:start="337:58" pos:end="337:60">[<expr pos:start="337:59" pos:end="337:59"><literal type="number" pos:start="337:59" pos:end="337:59">0</literal></expr>]</index><index pos:start="337:61" pos:end="337:63">[<expr pos:start="337:62" pos:end="337:62"><name pos:start="337:62" pos:end="337:62">i</name></expr>]</index></name> <operator pos:start="337:65" pos:end="337:66">&lt;&lt;</operator> <literal type="number" pos:start="337:68" pos:end="337:68">8</literal></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></else></if_stmt>

        <break pos:start="341:9" pos:end="341:14">break;</break>

    </block_content>}</block></switch>



    <if_stmt pos:start="347:5" pos:end="349:113"><if pos:start="347:5" pos:end="349:113">if <condition pos:start="347:8" pos:end="347:62">(<expr pos:start="347:9" pos:end="347:61"><name pos:start="347:9" pos:end="347:25">input_buffer_size</name> <operator pos:start="347:27" pos:end="347:27">*</operator> <literal type="number" pos:start="347:29" pos:end="347:31">8</literal> <operator pos:start="347:31" pos:end="347:31">-</operator> <call pos:start="347:33" pos:end="347:57"><name pos:start="347:33" pos:end="347:46">get_bits_count</name><argument_list pos:start="347:47" pos:end="347:57">(<argument pos:start="347:48" pos:end="347:56"><expr pos:start="347:48" pos:end="347:56"><operator pos:start="347:48" pos:end="347:48">&amp;</operator><name pos:start="347:49" pos:end="347:56"><name pos:start="347:49" pos:end="347:52">alac</name><operator pos:start="347:53" pos:end="347:54">-&gt;</operator><name pos:start="347:55" pos:end="347:56">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="347:59" pos:end="347:59">&gt;</operator> <literal type="number" pos:start="347:61" pos:end="347:61">8</literal></expr>)</condition><block type="pseudo" pos:start="349:9" pos:end="349:113"><block_content pos:start="349:9" pos:end="349:113">

        <expr_stmt pos:start="349:9" pos:end="349:113"><expr pos:start="349:9" pos:end="349:112"><call pos:start="349:9" pos:end="349:112"><name pos:start="349:9" pos:end="349:14">av_log</name><argument_list pos:start="349:15" pos:end="349:112">(<argument pos:start="349:16" pos:end="349:20"><expr pos:start="349:16" pos:end="349:20"><name pos:start="349:16" pos:end="349:20">avctx</name></expr></argument>, <argument pos:start="349:23" pos:end="349:34"><expr pos:start="349:23" pos:end="349:34"><name pos:start="349:23" pos:end="349:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="349:37" pos:end="349:60"><expr pos:start="349:37" pos:end="349:60"><literal type="string" pos:start="349:37" pos:end="349:60">"Error : %d bits left\n"</literal></expr></argument>, <argument pos:start="349:63" pos:end="349:111"><expr pos:start="349:63" pos:end="349:111"><name pos:start="349:63" pos:end="349:79">input_buffer_size</name> <operator pos:start="349:81" pos:end="349:81">*</operator> <literal type="number" pos:start="349:83" pos:end="349:85">8</literal> <operator pos:start="349:85" pos:end="349:85">-</operator> <call pos:start="349:87" pos:end="349:111"><name pos:start="349:87" pos:end="349:100">get_bits_count</name><argument_list pos:start="349:101" pos:end="349:111">(<argument pos:start="349:102" pos:end="349:110"><expr pos:start="349:102" pos:end="349:110"><operator pos:start="349:102" pos:end="349:102">&amp;</operator><name pos:start="349:103" pos:end="349:110"><name pos:start="349:103" pos:end="349:106">alac</name><operator pos:start="349:107" pos:end="349:108">-&gt;</operator><name pos:start="349:109" pos:end="349:110">gb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="353:5" pos:end="353:25"><expr pos:start="353:5" pos:end="353:24"><operator pos:start="353:5" pos:end="353:5">*</operator><name pos:start="353:6" pos:end="353:18">got_frame_ptr</name>   <operator pos:start="353:22" pos:end="353:22">=</operator> <literal type="number" pos:start="353:24" pos:end="353:24">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="355:5" pos:end="355:35"><expr pos:start="355:5" pos:end="355:34"><operator pos:start="355:5" pos:end="355:5">*</operator><operator pos:start="355:6" pos:end="355:6">(</operator><name pos:start="355:7" pos:end="355:13">AVFrame</name> <operator pos:start="355:15" pos:end="355:15">*</operator><operator pos:start="355:16" pos:end="355:16">)</operator><name pos:start="355:17" pos:end="355:20">data</name> <operator pos:start="355:22" pos:end="355:22">=</operator> <name pos:start="355:24" pos:end="355:34"><name pos:start="355:24" pos:end="355:27">alac</name><operator pos:start="355:28" pos:end="355:29">-&gt;</operator><name pos:start="355:30" pos:end="355:34">frame</name></name></expr>;</expr_stmt>



    <return pos:start="359:5" pos:end="359:29">return <expr pos:start="359:12" pos:end="359:28"><name pos:start="359:12" pos:end="359:28">input_buffer_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
