<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8117.c" pos:tabs="8"><function pos:start="1:1" pos:end="319:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">http_parse_request</name><parameter_list pos:start="1:30" pos:end="1:45">(<parameter pos:start="1:31" pos:end="1:44"><decl pos:start="1:31" pos:end="1:44"><type pos:start="1:31" pos:end="1:43"><name pos:start="1:31" pos:end="1:41">HTTPContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:44">c</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="319:1">{<block_content pos:start="5:5" pos:end="317:13">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">char</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:11">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:13"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">post</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:16"><name pos:start="9:10" pos:end="9:12">cmd</name><index pos:start="9:13" pos:end="9:16">[<expr pos:start="9:14" pos:end="9:15"><literal type="number" pos:start="9:14" pos:end="9:15">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:19"><name pos:start="11:10" pos:end="11:13">info</name><index pos:start="11:14" pos:end="11:19">[<expr pos:start="11:15" pos:end="11:18"><literal type="number" pos:start="11:15" pos:end="11:18">1024</literal></expr>]</index></name></decl>, <decl pos:start="11:22" pos:end="11:30"><type ref="prev" pos:start="11:5" pos:end="11:8"><modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:30">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">char</name></type> <name pos:start="13:10" pos:end="13:18"><name pos:start="13:10" pos:end="13:12">url</name><index pos:start="13:13" pos:end="13:18">[<expr pos:start="13:14" pos:end="13:17"><literal type="number" pos:start="13:14" pos:end="13:17">1024</literal></expr>]</index></name></decl>, <decl pos:start="13:21" pos:end="13:22"><type ref="prev" pos:start="13:5" pos:end="13:8"><modifier pos:start="13:21" pos:end="13:21">*</modifier></type><name pos:start="13:22" pos:end="13:22">q</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">char</name></type> <name pos:start="15:10" pos:end="15:21"><name pos:start="15:10" pos:end="15:17">protocol</name><index pos:start="15:18" pos:end="15:21">[<expr pos:start="15:19" pos:end="15:20"><literal type="number" pos:start="15:19" pos:end="15:20">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">char</name></type> <name pos:start="17:10" pos:end="17:18"><name pos:start="17:10" pos:end="17:12">msg</name><index pos:start="17:13" pos:end="17:18">[<expr pos:start="17:14" pos:end="17:17"><literal type="number" pos:start="17:14" pos:end="17:17">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:26"><decl pos:start="19:5" pos:end="19:25"><type pos:start="19:5" pos:end="19:16"><specifier pos:start="19:5" pos:end="19:9">const</specifier> <name pos:start="19:11" pos:end="19:14">char</name> <modifier pos:start="19:16" pos:end="19:16">*</modifier></type><name pos:start="19:17" pos:end="19:25">mime_type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:21"><decl pos:start="21:5" pos:end="21:20"><type pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:12">FFStream</name> <modifier pos:start="21:14" pos:end="21:14">*</modifier></type><name pos:start="21:15" pos:end="21:20">stream</name></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:18"><expr pos:start="25:5" pos:end="25:17"><name pos:start="25:5" pos:end="25:5">p</name> <operator pos:start="25:7" pos:end="25:7">=</operator> <name pos:start="25:9" pos:end="25:17"><name pos:start="25:9" pos:end="25:9">c</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:17">buffer</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:12"><expr pos:start="27:5" pos:end="27:11"><name pos:start="27:5" pos:end="27:5">q</name> <operator pos:start="27:7" pos:end="27:7">=</operator> <name pos:start="27:9" pos:end="27:11">cmd</name></expr>;</expr_stmt>

    <while pos:start="29:5" pos:end="37:5">while <condition pos:start="29:11" pos:end="29:38">(<expr pos:start="29:12" pos:end="29:37"><operator pos:start="29:12" pos:end="29:12">!</operator><call pos:start="29:13" pos:end="29:23"><name pos:start="29:13" pos:end="29:19">isspace</name><argument_list pos:start="29:20" pos:end="29:23">(<argument pos:start="29:21" pos:end="29:22"><expr pos:start="29:21" pos:end="29:22"><operator pos:start="29:21" pos:end="29:21">*</operator><name pos:start="29:22" pos:end="29:22">p</name></expr></argument>)</argument_list></call> <operator pos:start="29:25" pos:end="29:26">&amp;&amp;</operator> <operator pos:start="29:28" pos:end="29:28">*</operator><name pos:start="29:29" pos:end="29:29">p</name> <operator pos:start="29:31" pos:end="29:32">!=</operator> <literal type="char" pos:start="29:34" pos:end="29:37">'\0'</literal></expr>)</condition> <block pos:start="29:40" pos:end="37:5">{<block_content pos:start="31:9" pos:end="35:12">

        <if_stmt pos:start="31:9" pos:end="33:22"><if pos:start="31:9" pos:end="33:22">if <condition pos:start="31:12" pos:end="31:40">(<expr pos:start="31:13" pos:end="31:39"><operator pos:start="31:13" pos:end="31:13">(</operator><name pos:start="31:14" pos:end="31:14">q</name> <operator pos:start="31:16" pos:end="31:16">-</operator> <name pos:start="31:18" pos:end="31:20">cmd</name><operator pos:start="31:21" pos:end="31:21">)</operator> <operator pos:start="31:23" pos:end="31:23">&lt;</operator> <sizeof pos:start="31:25" pos:end="31:35">sizeof<argument_list pos:start="31:31" pos:end="31:35">(<argument pos:start="31:32" pos:end="31:34"><expr pos:start="31:32" pos:end="31:34"><name pos:start="31:32" pos:end="31:34">cmd</name></expr></argument>)</argument_list></sizeof> <operator pos:start="31:37" pos:end="31:37">-</operator> <literal type="number" pos:start="31:39" pos:end="31:39">1</literal></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:22"><block_content pos:start="33:13" pos:end="33:22">

            <expr_stmt pos:start="33:13" pos:end="33:22"><expr pos:start="33:13" pos:end="33:21"><operator pos:start="33:13" pos:end="33:13">*</operator><name pos:start="33:14" pos:end="33:14">q</name><operator pos:start="33:15" pos:end="33:16">++</operator> <operator pos:start="33:18" pos:end="33:18">=</operator> <operator pos:start="33:20" pos:end="33:20">*</operator><name pos:start="33:21" pos:end="33:21">p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:12"><expr pos:start="35:9" pos:end="35:11"><name pos:start="35:9" pos:end="35:9">p</name><operator pos:start="35:10" pos:end="35:11">++</operator></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="39:5" pos:end="39:14"><expr pos:start="39:5" pos:end="39:13"><operator pos:start="39:5" pos:end="39:5">*</operator><name pos:start="39:6" pos:end="39:6">q</name> <operator pos:start="39:8" pos:end="39:8">=</operator> <literal type="char" pos:start="39:10" pos:end="39:13">'\0'</literal></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="51:18"><if pos:start="41:5" pos:end="43:17">if <condition pos:start="41:8" pos:end="41:28">(<expr pos:start="41:9" pos:end="41:27"><operator pos:start="41:9" pos:end="41:9">!</operator><call pos:start="41:10" pos:end="41:27"><name pos:start="41:10" pos:end="41:15">strcmp</name><argument_list pos:start="41:16" pos:end="41:27">(<argument pos:start="41:17" pos:end="41:19"><expr pos:start="41:17" pos:end="41:19"><name pos:start="41:17" pos:end="41:19">cmd</name></expr></argument>, <argument pos:start="41:22" pos:end="41:26"><expr pos:start="41:22" pos:end="41:26"><literal type="string" pos:start="41:22" pos:end="41:26">"GET"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="43:9" pos:end="43:17"><block_content pos:start="43:9" pos:end="43:17">

        <expr_stmt pos:start="43:9" pos:end="43:17"><expr pos:start="43:9" pos:end="43:16"><name pos:start="43:9" pos:end="43:12">post</name> <operator pos:start="43:14" pos:end="43:14">=</operator> <literal type="number" pos:start="43:16" pos:end="43:16">0</literal></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="45:5" pos:end="47:17">else if <condition pos:start="45:13" pos:end="45:34">(<expr pos:start="45:14" pos:end="45:33"><operator pos:start="45:14" pos:end="45:14">!</operator><call pos:start="45:15" pos:end="45:33"><name pos:start="45:15" pos:end="45:20">strcmp</name><argument_list pos:start="45:21" pos:end="45:33">(<argument pos:start="45:22" pos:end="45:24"><expr pos:start="45:22" pos:end="45:24"><name pos:start="45:22" pos:end="45:24">cmd</name></expr></argument>, <argument pos:start="45:27" pos:end="45:32"><expr pos:start="45:27" pos:end="45:32"><literal type="string" pos:start="45:27" pos:end="45:32">"POST"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="47:9" pos:end="47:17"><block_content pos:start="47:9" pos:end="47:17">

        <expr_stmt pos:start="47:9" pos:end="47:17"><expr pos:start="47:9" pos:end="47:16"><name pos:start="47:9" pos:end="47:12">post</name> <operator pos:start="47:14" pos:end="47:14">=</operator> <literal type="number" pos:start="47:16" pos:end="47:16">1</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="49:5" pos:end="51:18">else<block type="pseudo" pos:start="51:9" pos:end="51:18"><block_content pos:start="51:9" pos:end="51:18">

        <return pos:start="51:9" pos:end="51:18">return <expr pos:start="51:16" pos:end="51:17"><operator pos:start="51:16" pos:end="51:16">-</operator><literal type="number" pos:start="51:17" pos:end="51:17">1</literal></expr>;</return></block_content></block></else></if_stmt>



    <while pos:start="55:5" pos:end="55:28">while <condition pos:start="55:11" pos:end="55:23">(<expr pos:start="55:12" pos:end="55:22"><call pos:start="55:12" pos:end="55:22"><name pos:start="55:12" pos:end="55:18">isspace</name><argument_list pos:start="55:19" pos:end="55:22">(<argument pos:start="55:20" pos:end="55:21"><expr pos:start="55:20" pos:end="55:21"><operator pos:start="55:20" pos:end="55:20">*</operator><name pos:start="55:21" pos:end="55:21">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="55:25" pos:end="55:28"><block_content pos:start="55:25" pos:end="55:28"> <expr_stmt pos:start="55:25" pos:end="55:28"><expr pos:start="55:25" pos:end="55:27"><name pos:start="55:25" pos:end="55:25">p</name><operator pos:start="55:26" pos:end="55:27">++</operator></expr>;</expr_stmt></block_content></block></while>

    <expr_stmt pos:start="57:5" pos:end="57:12"><expr pos:start="57:5" pos:end="57:11"><name pos:start="57:5" pos:end="57:5">q</name> <operator pos:start="57:7" pos:end="57:7">=</operator> <name pos:start="57:9" pos:end="57:11">url</name></expr>;</expr_stmt>

    <while pos:start="59:5" pos:end="67:5">while <condition pos:start="59:11" pos:end="59:38">(<expr pos:start="59:12" pos:end="59:37"><operator pos:start="59:12" pos:end="59:12">!</operator><call pos:start="59:13" pos:end="59:23"><name pos:start="59:13" pos:end="59:19">isspace</name><argument_list pos:start="59:20" pos:end="59:23">(<argument pos:start="59:21" pos:end="59:22"><expr pos:start="59:21" pos:end="59:22"><operator pos:start="59:21" pos:end="59:21">*</operator><name pos:start="59:22" pos:end="59:22">p</name></expr></argument>)</argument_list></call> <operator pos:start="59:25" pos:end="59:26">&amp;&amp;</operator> <operator pos:start="59:28" pos:end="59:28">*</operator><name pos:start="59:29" pos:end="59:29">p</name> <operator pos:start="59:31" pos:end="59:32">!=</operator> <literal type="char" pos:start="59:34" pos:end="59:37">'\0'</literal></expr>)</condition> <block pos:start="59:40" pos:end="67:5">{<block_content pos:start="61:9" pos:end="65:12">

        <if_stmt pos:start="61:9" pos:end="63:22"><if pos:start="61:9" pos:end="63:22">if <condition pos:start="61:12" pos:end="61:40">(<expr pos:start="61:13" pos:end="61:39"><operator pos:start="61:13" pos:end="61:13">(</operator><name pos:start="61:14" pos:end="61:14">q</name> <operator pos:start="61:16" pos:end="61:16">-</operator> <name pos:start="61:18" pos:end="61:20">url</name><operator pos:start="61:21" pos:end="61:21">)</operator> <operator pos:start="61:23" pos:end="61:23">&lt;</operator> <sizeof pos:start="61:25" pos:end="61:35">sizeof<argument_list pos:start="61:31" pos:end="61:35">(<argument pos:start="61:32" pos:end="61:34"><expr pos:start="61:32" pos:end="61:34"><name pos:start="61:32" pos:end="61:34">url</name></expr></argument>)</argument_list></sizeof> <operator pos:start="61:37" pos:end="61:37">-</operator> <literal type="number" pos:start="61:39" pos:end="61:39">1</literal></expr>)</condition><block type="pseudo" pos:start="63:13" pos:end="63:22"><block_content pos:start="63:13" pos:end="63:22">

            <expr_stmt pos:start="63:13" pos:end="63:22"><expr pos:start="63:13" pos:end="63:21"><operator pos:start="63:13" pos:end="63:13">*</operator><name pos:start="63:14" pos:end="63:14">q</name><operator pos:start="63:15" pos:end="63:16">++</operator> <operator pos:start="63:18" pos:end="63:18">=</operator> <operator pos:start="63:20" pos:end="63:20">*</operator><name pos:start="63:21" pos:end="63:21">p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:12"><expr pos:start="65:9" pos:end="65:11"><name pos:start="65:9" pos:end="65:9">p</name><operator pos:start="65:10" pos:end="65:11">++</operator></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="69:5" pos:end="69:14"><expr pos:start="69:5" pos:end="69:13"><operator pos:start="69:5" pos:end="69:5">*</operator><name pos:start="69:6" pos:end="69:6">q</name> <operator pos:start="69:8" pos:end="69:8">=</operator> <literal type="char" pos:start="69:10" pos:end="69:13">'\0'</literal></expr>;</expr_stmt>



    <while pos:start="73:5" pos:end="73:28">while <condition pos:start="73:11" pos:end="73:23">(<expr pos:start="73:12" pos:end="73:22"><call pos:start="73:12" pos:end="73:22"><name pos:start="73:12" pos:end="73:18">isspace</name><argument_list pos:start="73:19" pos:end="73:22">(<argument pos:start="73:20" pos:end="73:21"><expr pos:start="73:20" pos:end="73:21"><operator pos:start="73:20" pos:end="73:20">*</operator><name pos:start="73:21" pos:end="73:21">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="73:25" pos:end="73:28"><block_content pos:start="73:25" pos:end="73:28"> <expr_stmt pos:start="73:25" pos:end="73:28"><expr pos:start="73:25" pos:end="73:27"><name pos:start="73:25" pos:end="73:25">p</name><operator pos:start="73:26" pos:end="73:27">++</operator></expr>;</expr_stmt></block_content></block></while>

    <expr_stmt pos:start="75:5" pos:end="75:17"><expr pos:start="75:5" pos:end="75:16"><name pos:start="75:5" pos:end="75:5">q</name> <operator pos:start="75:7" pos:end="75:7">=</operator> <name pos:start="75:9" pos:end="75:16">protocol</name></expr>;</expr_stmt>

    <while pos:start="77:5" pos:end="85:5">while <condition pos:start="77:11" pos:end="77:38">(<expr pos:start="77:12" pos:end="77:37"><operator pos:start="77:12" pos:end="77:12">!</operator><call pos:start="77:13" pos:end="77:23"><name pos:start="77:13" pos:end="77:19">isspace</name><argument_list pos:start="77:20" pos:end="77:23">(<argument pos:start="77:21" pos:end="77:22"><expr pos:start="77:21" pos:end="77:22"><operator pos:start="77:21" pos:end="77:21">*</operator><name pos:start="77:22" pos:end="77:22">p</name></expr></argument>)</argument_list></call> <operator pos:start="77:25" pos:end="77:26">&amp;&amp;</operator> <operator pos:start="77:28" pos:end="77:28">*</operator><name pos:start="77:29" pos:end="77:29">p</name> <operator pos:start="77:31" pos:end="77:32">!=</operator> <literal type="char" pos:start="77:34" pos:end="77:37">'\0'</literal></expr>)</condition> <block pos:start="77:40" pos:end="85:5">{<block_content pos:start="79:9" pos:end="83:12">

        <if_stmt pos:start="79:9" pos:end="81:22"><if pos:start="79:9" pos:end="81:22">if <condition pos:start="79:12" pos:end="79:50">(<expr pos:start="79:13" pos:end="79:49"><operator pos:start="79:13" pos:end="79:13">(</operator><name pos:start="79:14" pos:end="79:14">q</name> <operator pos:start="79:16" pos:end="79:16">-</operator> <name pos:start="79:18" pos:end="79:25">protocol</name><operator pos:start="79:26" pos:end="79:26">)</operator> <operator pos:start="79:28" pos:end="79:28">&lt;</operator> <sizeof pos:start="79:30" pos:end="79:45">sizeof<argument_list pos:start="79:36" pos:end="79:45">(<argument pos:start="79:37" pos:end="79:44"><expr pos:start="79:37" pos:end="79:44"><name pos:start="79:37" pos:end="79:44">protocol</name></expr></argument>)</argument_list></sizeof> <operator pos:start="79:47" pos:end="79:47">-</operator> <literal type="number" pos:start="79:49" pos:end="79:49">1</literal></expr>)</condition><block type="pseudo" pos:start="81:13" pos:end="81:22"><block_content pos:start="81:13" pos:end="81:22">

            <expr_stmt pos:start="81:13" pos:end="81:22"><expr pos:start="81:13" pos:end="81:21"><operator pos:start="81:13" pos:end="81:13">*</operator><name pos:start="81:14" pos:end="81:14">q</name><operator pos:start="81:15" pos:end="81:16">++</operator> <operator pos:start="81:18" pos:end="81:18">=</operator> <operator pos:start="81:20" pos:end="81:20">*</operator><name pos:start="81:21" pos:end="81:21">p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:12"><expr pos:start="83:9" pos:end="83:11"><name pos:start="83:9" pos:end="83:9">p</name><operator pos:start="83:10" pos:end="83:11">++</operator></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="87:5" pos:end="87:14"><expr pos:start="87:5" pos:end="87:13"><operator pos:start="87:5" pos:end="87:5">*</operator><name pos:start="87:6" pos:end="87:6">q</name> <operator pos:start="87:8" pos:end="87:8">=</operator> <literal type="char" pos:start="87:10" pos:end="87:13">'\0'</literal></expr>;</expr_stmt>

    <if_stmt pos:start="89:5" pos:end="91:18"><if pos:start="89:5" pos:end="91:18">if <condition pos:start="89:8" pos:end="89:69">(<expr pos:start="89:9" pos:end="89:68"><call pos:start="89:9" pos:end="89:36"><name pos:start="89:9" pos:end="89:14">strcmp</name><argument_list pos:start="89:15" pos:end="89:36">(<argument pos:start="89:16" pos:end="89:23"><expr pos:start="89:16" pos:end="89:23"><name pos:start="89:16" pos:end="89:23">protocol</name></expr></argument>, <argument pos:start="89:26" pos:end="89:35"><expr pos:start="89:26" pos:end="89:35"><literal type="string" pos:start="89:26" pos:end="89:35">"HTTP/1.0"</literal></expr></argument>)</argument_list></call> <operator pos:start="89:38" pos:end="89:39">&amp;&amp;</operator> <call pos:start="89:41" pos:end="89:68"><name pos:start="89:41" pos:end="89:46">strcmp</name><argument_list pos:start="89:47" pos:end="89:68">(<argument pos:start="89:48" pos:end="89:55"><expr pos:start="89:48" pos:end="89:55"><name pos:start="89:48" pos:end="89:55">protocol</name></expr></argument>, <argument pos:start="89:58" pos:end="89:67"><expr pos:start="89:58" pos:end="89:67"><literal type="string" pos:start="89:58" pos:end="89:67">"HTTP/1.1"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="91:9" pos:end="91:18"><block_content pos:start="91:9" pos:end="91:18">

        <return pos:start="91:9" pos:end="91:18">return <expr pos:start="91:16" pos:end="91:17"><operator pos:start="91:16" pos:end="91:16">-</operator><literal type="number" pos:start="91:17" pos:end="91:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    

    <comment type="block" pos:start="95:5" pos:end="95:71">/* find the filename and the optional info string in the request */</comment>

    <expr_stmt pos:start="97:5" pos:end="97:12"><expr pos:start="97:5" pos:end="97:11"><name pos:start="97:5" pos:end="97:5">p</name> <operator pos:start="97:7" pos:end="97:7">=</operator> <name pos:start="97:9" pos:end="97:11">url</name></expr>;</expr_stmt>

    <if_stmt pos:start="99:5" pos:end="101:12"><if pos:start="99:5" pos:end="101:12">if <condition pos:start="99:8" pos:end="99:18">(<expr pos:start="99:9" pos:end="99:17"><operator pos:start="99:9" pos:end="99:9">*</operator><name pos:start="99:10" pos:end="99:10">p</name> <operator pos:start="99:12" pos:end="99:13">==</operator> <literal type="char" pos:start="99:15" pos:end="99:17">'/'</literal></expr>)</condition><block type="pseudo" pos:start="101:9" pos:end="101:12"><block_content pos:start="101:9" pos:end="101:12">

        <expr_stmt pos:start="101:9" pos:end="101:12"><expr pos:start="101:9" pos:end="101:11"><name pos:start="101:9" pos:end="101:9">p</name><operator pos:start="101:10" pos:end="101:11">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:17"><expr pos:start="103:5" pos:end="103:16"><name pos:start="103:5" pos:end="103:12">filename</name> <operator pos:start="103:14" pos:end="103:14">=</operator> <name pos:start="103:16" pos:end="103:16">p</name></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:23"><expr pos:start="105:5" pos:end="105:22"><name pos:start="105:5" pos:end="105:5">p</name> <operator pos:start="105:7" pos:end="105:7">=</operator> <call pos:start="105:9" pos:end="105:22"><name pos:start="105:9" pos:end="105:14">strchr</name><argument_list pos:start="105:15" pos:end="105:22">(<argument pos:start="105:16" pos:end="105:16"><expr pos:start="105:16" pos:end="105:16"><name pos:start="105:16" pos:end="105:16">p</name></expr></argument>, <argument pos:start="105:19" pos:end="105:21"><expr pos:start="105:19" pos:end="105:21"><literal type="char" pos:start="105:19" pos:end="105:21">'?'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="107:5" pos:end="117:5"><if pos:start="107:5" pos:end="113:5">if <condition pos:start="107:8" pos:end="107:10">(<expr pos:start="107:9" pos:end="107:9"><name pos:start="107:9" pos:end="107:9">p</name></expr>)</condition> <block pos:start="107:12" pos:end="113:5">{<block_content pos:start="109:9" pos:end="111:18">

        <expr_stmt pos:start="109:9" pos:end="109:24"><expr pos:start="109:9" pos:end="109:23"><call pos:start="109:9" pos:end="109:23"><name pos:start="109:9" pos:end="109:14">strcpy</name><argument_list pos:start="109:15" pos:end="109:23">(<argument pos:start="109:16" pos:end="109:19"><expr pos:start="109:16" pos:end="109:19"><name pos:start="109:16" pos:end="109:19">info</name></expr></argument>, <argument pos:start="109:22" pos:end="109:22"><expr pos:start="109:22" pos:end="109:22"><name pos:start="109:22" pos:end="109:22">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:18"><expr pos:start="111:9" pos:end="111:17"><operator pos:start="111:9" pos:end="111:9">*</operator><name pos:start="111:10" pos:end="111:10">p</name> <operator pos:start="111:12" pos:end="111:12">=</operator> <literal type="char" pos:start="111:14" pos:end="111:17">'\0'</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="113:7" pos:end="117:5">else <block pos:start="113:12" pos:end="117:5">{<block_content pos:start="115:9" pos:end="115:23">

        <expr_stmt pos:start="115:9" pos:end="115:23"><expr pos:start="115:9" pos:end="115:22"><name pos:start="115:9" pos:end="115:15"><name pos:start="115:9" pos:end="115:12">info</name><index pos:start="115:13" pos:end="115:15">[<expr pos:start="115:14" pos:end="115:14"><literal type="number" pos:start="115:14" pos:end="115:14">0</literal></expr>]</index></name> <operator pos:start="115:17" pos:end="115:17">=</operator> <literal type="char" pos:start="115:19" pos:end="115:22">'\0'</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="121:5" pos:end="121:26"><expr pos:start="121:5" pos:end="121:25"><name pos:start="121:5" pos:end="121:10">stream</name> <operator pos:start="121:12" pos:end="121:12">=</operator> <name pos:start="121:14" pos:end="121:25">first_stream</name></expr>;</expr_stmt>

    <while pos:start="123:5" pos:end="131:5">while <condition pos:start="123:11" pos:end="123:26">(<expr pos:start="123:12" pos:end="123:25"><name pos:start="123:12" pos:end="123:17">stream</name> <operator pos:start="123:19" pos:end="123:20">!=</operator> <name pos:start="123:22" pos:end="123:25">NULL</name></expr>)</condition> <block pos:start="123:28" pos:end="131:5">{<block_content pos:start="125:9" pos:end="129:30">

        <if_stmt pos:start="125:9" pos:end="127:18"><if pos:start="125:9" pos:end="127:18">if <condition pos:start="125:12" pos:end="125:48">(<expr pos:start="125:13" pos:end="125:47"><operator pos:start="125:13" pos:end="125:13">!</operator><call pos:start="125:14" pos:end="125:47"><name pos:start="125:14" pos:end="125:19">strcmp</name><argument_list pos:start="125:20" pos:end="125:47">(<argument pos:start="125:21" pos:end="125:36"><expr pos:start="125:21" pos:end="125:36"><name pos:start="125:21" pos:end="125:36"><name pos:start="125:21" pos:end="125:26">stream</name><operator pos:start="125:27" pos:end="125:28">-&gt;</operator><name pos:start="125:29" pos:end="125:36">filename</name></name></expr></argument>, <argument pos:start="125:39" pos:end="125:46"><expr pos:start="125:39" pos:end="125:46"><name pos:start="125:39" pos:end="125:46">filename</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="127:13" pos:end="127:18"><block_content pos:start="127:13" pos:end="127:18">

            <break pos:start="127:13" pos:end="127:18">break;</break></block_content></block></if></if_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:30"><expr pos:start="129:9" pos:end="129:29"><name pos:start="129:9" pos:end="129:14">stream</name> <operator pos:start="129:16" pos:end="129:16">=</operator> <name pos:start="129:18" pos:end="129:29"><name pos:start="129:18" pos:end="129:23">stream</name><operator pos:start="129:24" pos:end="129:25">-&gt;</operator><name pos:start="129:26" pos:end="129:29">next</name></name></expr>;</expr_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="133:5" pos:end="139:5"><if pos:start="133:5" pos:end="139:5">if <condition pos:start="133:8" pos:end="133:23">(<expr pos:start="133:9" pos:end="133:22"><name pos:start="133:9" pos:end="133:14">stream</name> <operator pos:start="133:16" pos:end="133:17">==</operator> <name pos:start="133:19" pos:end="133:22">NULL</name></expr>)</condition> <block pos:start="133:25" pos:end="139:5">{<block_content pos:start="135:9" pos:end="137:24">

        <expr_stmt pos:start="135:9" pos:end="135:49"><expr pos:start="135:9" pos:end="135:48"><call pos:start="135:9" pos:end="135:48"><name pos:start="135:9" pos:end="135:15">sprintf</name><argument_list pos:start="135:16" pos:end="135:48">(<argument pos:start="135:17" pos:end="135:19"><expr pos:start="135:17" pos:end="135:19"><name pos:start="135:17" pos:end="135:19">msg</name></expr></argument>, <argument pos:start="135:22" pos:end="135:42"><expr pos:start="135:22" pos:end="135:42"><literal type="string" pos:start="135:22" pos:end="135:42">"File '%s' not found"</literal></expr></argument>, <argument pos:start="135:45" pos:end="135:47"><expr pos:start="135:45" pos:end="135:47"><name pos:start="135:45" pos:end="135:47">url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="137:9" pos:end="137:24">goto <name pos:start="137:14" pos:end="137:23">send_error</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:23"><expr pos:start="141:5" pos:end="141:22"><name pos:start="141:5" pos:end="141:13"><name pos:start="141:5" pos:end="141:5">c</name><operator pos:start="141:6" pos:end="141:7">-&gt;</operator><name pos:start="141:8" pos:end="141:13">stream</name></name> <operator pos:start="141:15" pos:end="141:15">=</operator> <name pos:start="141:17" pos:end="141:22">stream</name></expr>;</expr_stmt>

    

    <comment type="block" pos:start="145:5" pos:end="145:61">/* should do it after so that the size can be computed */</comment>

    <block pos:start="147:5" pos:end="175:5">{<block_content pos:start="149:9" pos:end="173:60">

        <decl_stmt pos:start="149:9" pos:end="149:36"><decl pos:start="149:9" pos:end="149:21"><type pos:start="149:9" pos:end="149:12"><name pos:start="149:9" pos:end="149:12">char</name></type> <name pos:start="149:14" pos:end="149:21"><name pos:start="149:14" pos:end="149:17">buf1</name><index pos:start="149:18" pos:end="149:21">[<expr pos:start="149:19" pos:end="149:20"><literal type="number" pos:start="149:19" pos:end="149:20">32</literal></expr>]</index></name></decl>, <decl pos:start="149:24" pos:end="149:31"><type ref="prev" pos:start="149:9" pos:end="149:12"/><name pos:start="149:24" pos:end="149:31"><name pos:start="149:24" pos:end="149:27">buf2</name><index pos:start="149:28" pos:end="149:31">[<expr pos:start="149:29" pos:end="149:30"><literal type="number" pos:start="149:29" pos:end="149:30">32</literal></expr>]</index></name></decl>, <decl pos:start="149:34" pos:end="149:35"><type ref="prev" pos:start="149:9" pos:end="149:12"><modifier pos:start="149:34" pos:end="149:34">*</modifier></type><name pos:start="149:35" pos:end="149:35">p</name></decl>;</decl_stmt>

        <decl_stmt pos:start="151:9" pos:end="151:18"><decl pos:start="151:9" pos:end="151:17"><type pos:start="151:9" pos:end="151:14"><name pos:start="151:9" pos:end="151:14">time_t</name></type> <name pos:start="151:16" pos:end="151:17">ti</name></decl>;</decl_stmt>

        <comment type="block" pos:start="153:9" pos:end="153:39">/* XXX: reentrant function ? */</comment>

        <expr_stmt pos:start="155:9" pos:end="155:45"><expr pos:start="155:9" pos:end="155:44"><name pos:start="155:9" pos:end="155:9">p</name> <operator pos:start="155:11" pos:end="155:11">=</operator> <call pos:start="155:13" pos:end="155:44"><name pos:start="155:13" pos:end="155:21">inet_ntoa</name><argument_list pos:start="155:22" pos:end="155:44">(<argument pos:start="155:23" pos:end="155:43"><expr pos:start="155:23" pos:end="155:43"><name pos:start="155:23" pos:end="155:43"><name pos:start="155:23" pos:end="155:23">c</name><operator pos:start="155:24" pos:end="155:25">-&gt;</operator><name pos:start="155:26" pos:end="155:34">from_addr</name><operator pos:start="155:35" pos:end="155:35">.</operator><name pos:start="155:36" pos:end="155:43">sin_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:24"><expr pos:start="157:9" pos:end="157:23"><call pos:start="157:9" pos:end="157:23"><name pos:start="157:9" pos:end="157:14">strcpy</name><argument_list pos:start="157:15" pos:end="157:23">(<argument pos:start="157:16" pos:end="157:19"><expr pos:start="157:16" pos:end="157:19"><name pos:start="157:16" pos:end="157:19">buf1</name></expr></argument>, <argument pos:start="157:22" pos:end="157:22"><expr pos:start="157:22" pos:end="157:22"><name pos:start="157:22" pos:end="157:22">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:24"><expr pos:start="159:9" pos:end="159:23"><name pos:start="159:9" pos:end="159:10">ti</name> <operator pos:start="159:12" pos:end="159:12">=</operator> <call pos:start="159:14" pos:end="159:23"><name pos:start="159:14" pos:end="159:17">time</name><argument_list pos:start="159:18" pos:end="159:23">(<argument pos:start="159:19" pos:end="159:22"><expr pos:start="159:19" pos:end="159:22"><name pos:start="159:19" pos:end="159:22">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:23"><expr pos:start="161:9" pos:end="161:22"><name pos:start="161:9" pos:end="161:9">p</name> <operator pos:start="161:11" pos:end="161:11">=</operator> <call pos:start="161:13" pos:end="161:22"><name pos:start="161:13" pos:end="161:17">ctime</name><argument_list pos:start="161:18" pos:end="161:22">(<argument pos:start="161:19" pos:end="161:21"><expr pos:start="161:19" pos:end="161:21"><operator pos:start="161:19" pos:end="161:19">&amp;</operator><name pos:start="161:20" pos:end="161:21">ti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:24"><expr pos:start="163:9" pos:end="163:23"><call pos:start="163:9" pos:end="163:23"><name pos:start="163:9" pos:end="163:14">strcpy</name><argument_list pos:start="163:15" pos:end="163:23">(<argument pos:start="163:16" pos:end="163:19"><expr pos:start="163:16" pos:end="163:19"><name pos:start="163:16" pos:end="163:19">buf2</name></expr></argument>, <argument pos:start="163:22" pos:end="163:22"><expr pos:start="163:22" pos:end="163:22"><name pos:start="163:22" pos:end="163:22">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:33"><expr pos:start="165:9" pos:end="165:32"><name pos:start="165:9" pos:end="165:9">p</name> <operator pos:start="165:11" pos:end="165:11">=</operator> <name pos:start="165:13" pos:end="165:16">buf2</name> <operator pos:start="165:18" pos:end="165:18">+</operator> <call pos:start="165:20" pos:end="165:28"><name pos:start="165:20" pos:end="165:25">strlen</name><argument_list pos:start="165:26" pos:end="165:28">(<argument pos:start="165:27" pos:end="165:27"><expr pos:start="165:27" pos:end="165:27"><name pos:start="165:27" pos:end="165:27">p</name></expr></argument>)</argument_list></call> <operator pos:start="165:30" pos:end="165:30">-</operator> <literal type="number" pos:start="165:32" pos:end="165:32">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="167:9" pos:end="169:22"><if pos:start="167:9" pos:end="169:22">if <condition pos:start="167:12" pos:end="167:23">(<expr pos:start="167:13" pos:end="167:22"><operator pos:start="167:13" pos:end="167:13">*</operator><name pos:start="167:14" pos:end="167:14">p</name> <operator pos:start="167:16" pos:end="167:17">==</operator> <literal type="char" pos:start="167:19" pos:end="167:22">'\n'</literal></expr>)</condition><block type="pseudo" pos:start="169:13" pos:end="169:22"><block_content pos:start="169:13" pos:end="169:22">

            <expr_stmt pos:start="169:13" pos:end="169:22"><expr pos:start="169:13" pos:end="169:21"><operator pos:start="169:13" pos:end="169:13">*</operator><name pos:start="169:14" pos:end="169:14">p</name> <operator pos:start="169:16" pos:end="169:16">=</operator> <literal type="char" pos:start="169:18" pos:end="169:21">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="171:9" pos:end="173:60"><expr pos:start="171:9" pos:end="173:59"><call pos:start="171:9" pos:end="173:59"><name pos:start="171:9" pos:end="171:16">http_log</name><argument_list pos:start="171:17" pos:end="173:59">(<argument pos:start="171:18" pos:end="171:51"><expr pos:start="171:18" pos:end="171:51"><literal type="string" pos:start="171:18" pos:end="171:51">"%s - - [%s] \"%s %s %s\" %d %d\n"</literal></expr></argument>, 

                 <argument pos:start="173:18" pos:end="173:21"><expr pos:start="173:18" pos:end="173:21"><name pos:start="173:18" pos:end="173:21">buf1</name></expr></argument>, <argument pos:start="173:24" pos:end="173:27"><expr pos:start="173:24" pos:end="173:27"><name pos:start="173:24" pos:end="173:27">buf2</name></expr></argument>, <argument pos:start="173:30" pos:end="173:32"><expr pos:start="173:30" pos:end="173:32"><name pos:start="173:30" pos:end="173:32">cmd</name></expr></argument>, <argument pos:start="173:35" pos:end="173:37"><expr pos:start="173:35" pos:end="173:37"><name pos:start="173:35" pos:end="173:37">url</name></expr></argument>, <argument pos:start="173:40" pos:end="173:47"><expr pos:start="173:40" pos:end="173:47"><name pos:start="173:40" pos:end="173:47">protocol</name></expr></argument>, <argument pos:start="173:50" pos:end="173:52"><expr pos:start="173:50" pos:end="173:52"><literal type="number" pos:start="173:50" pos:end="173:52">200</literal></expr></argument>, <argument pos:start="173:55" pos:end="173:58"><expr pos:start="173:55" pos:end="173:58"><literal type="number" pos:start="173:55" pos:end="173:58">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>



    <comment type="block" pos:start="179:5" pos:end="179:50">/* XXX: add there authenticate and IP match */</comment>



    <if_stmt pos:start="183:5" pos:end="209:5"><if pos:start="183:5" pos:end="209:5">if <condition pos:start="183:8" pos:end="183:13">(<expr pos:start="183:9" pos:end="183:12"><name pos:start="183:9" pos:end="183:12">post</name></expr>)</condition> <block pos:start="183:15" pos:end="209:5">{<block_content pos:start="187:9" pos:end="207:17">

        <comment type="block" pos:start="185:9" pos:end="185:52">/* if post, it means a feed is being sent */</comment>

        <if_stmt pos:start="187:9" pos:end="193:9"><if pos:start="187:9" pos:end="193:9">if <condition pos:start="187:12" pos:end="187:29">(<expr pos:start="187:13" pos:end="187:28"><operator pos:start="187:13" pos:end="187:13">!</operator><name pos:start="187:14" pos:end="187:28"><name pos:start="187:14" pos:end="187:19">stream</name><operator pos:start="187:20" pos:end="187:21">-&gt;</operator><name pos:start="187:22" pos:end="187:28">is_feed</name></name></expr>)</condition> <block pos:start="187:31" pos:end="193:9">{<block_content pos:start="189:13" pos:end="191:28">

            <expr_stmt pos:start="189:13" pos:end="189:53"><expr pos:start="189:13" pos:end="189:52"><call pos:start="189:13" pos:end="189:52"><name pos:start="189:13" pos:end="189:19">sprintf</name><argument_list pos:start="189:20" pos:end="189:52">(<argument pos:start="189:21" pos:end="189:23"><expr pos:start="189:21" pos:end="189:23"><name pos:start="189:21" pos:end="189:23">msg</name></expr></argument>, <argument pos:start="189:26" pos:end="189:51"><expr pos:start="189:26" pos:end="189:51"><literal type="string" pos:start="189:26" pos:end="189:51">"POST command not handled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="191:13" pos:end="191:28">goto <name pos:start="191:18" pos:end="191:27">send_error</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="195:9" pos:end="201:9"><if pos:start="195:9" pos:end="201:9">if <condition pos:start="195:12" pos:end="195:43">(<expr pos:start="195:13" pos:end="195:42"><call pos:start="195:13" pos:end="195:38"><name pos:start="195:13" pos:end="195:35">http_start_receive_data</name><argument_list pos:start="195:36" pos:end="195:38">(<argument pos:start="195:37" pos:end="195:37"><expr pos:start="195:37" pos:end="195:37"><name pos:start="195:37" pos:end="195:37">c</name></expr></argument>)</argument_list></call> <operator pos:start="195:40" pos:end="195:40">&lt;</operator> <literal type="number" pos:start="195:42" pos:end="195:42">0</literal></expr>)</condition> <block pos:start="195:45" pos:end="201:9">{<block_content pos:start="197:13" pos:end="199:28">

            <expr_stmt pos:start="197:13" pos:end="197:48"><expr pos:start="197:13" pos:end="197:47"><call pos:start="197:13" pos:end="197:47"><name pos:start="197:13" pos:end="197:19">sprintf</name><argument_list pos:start="197:20" pos:end="197:47">(<argument pos:start="197:21" pos:end="197:23"><expr pos:start="197:21" pos:end="197:23"><name pos:start="197:21" pos:end="197:23">msg</name></expr></argument>, <argument pos:start="197:26" pos:end="197:46"><expr pos:start="197:26" pos:end="197:46"><literal type="string" pos:start="197:26" pos:end="197:46">"could not open feed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="199:13" pos:end="199:28">goto <name pos:start="199:18" pos:end="199:27">send_error</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="203:9" pos:end="203:26"><expr pos:start="203:9" pos:end="203:25"><name pos:start="203:9" pos:end="203:21"><name pos:start="203:9" pos:end="203:9">c</name><operator pos:start="203:10" pos:end="203:11">-&gt;</operator><name pos:start="203:12" pos:end="203:21">http_error</name></name> <operator pos:start="203:23" pos:end="203:23">=</operator> <literal type="number" pos:start="203:25" pos:end="203:25">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="205:9" pos:end="205:42"><expr pos:start="205:9" pos:end="205:41"><name pos:start="205:9" pos:end="205:16"><name pos:start="205:9" pos:end="205:9">c</name><operator pos:start="205:10" pos:end="205:11">-&gt;</operator><name pos:start="205:12" pos:end="205:16">state</name></name> <operator pos:start="205:18" pos:end="205:18">=</operator> <name pos:start="205:20" pos:end="205:41">HTTPSTATE_RECEIVE_DATA</name></expr>;</expr_stmt>

        <return pos:start="207:9" pos:end="207:17">return <expr pos:start="207:16" pos:end="207:16"><literal type="number" pos:start="207:16" pos:end="207:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="213:5" pos:end="215:24"><if pos:start="213:5" pos:end="215:24">if <condition pos:start="213:8" pos:end="213:53">(<expr pos:start="213:9" pos:end="213:52"><name pos:start="213:9" pos:end="213:30"><name pos:start="213:9" pos:end="213:9">c</name><operator pos:start="213:10" pos:end="213:11">-&gt;</operator><name pos:start="213:12" pos:end="213:17">stream</name><operator pos:start="213:18" pos:end="213:19">-&gt;</operator><name pos:start="213:20" pos:end="213:30">stream_type</name></name> <operator pos:start="213:32" pos:end="213:33">==</operator> <name pos:start="213:35" pos:end="213:52">STREAM_TYPE_STATUS</name></expr>)</condition><block type="pseudo" pos:start="215:9" pos:end="215:24"><block_content pos:start="215:9" pos:end="215:24">

        <goto pos:start="215:9" pos:end="215:24">goto <name pos:start="215:14" pos:end="215:23">send_stats</name>;</goto></block_content></block></if></if_stmt>



    <comment type="block" pos:start="219:5" pos:end="219:27">/* open input stream */</comment>

    <if_stmt pos:start="221:5" pos:end="227:5"><if pos:start="221:5" pos:end="227:5">if <condition pos:start="221:8" pos:end="221:39">(<expr pos:start="221:9" pos:end="221:38"><call pos:start="221:9" pos:end="221:34"><name pos:start="221:9" pos:end="221:25">open_input_stream</name><argument_list pos:start="221:26" pos:end="221:34">(<argument pos:start="221:27" pos:end="221:27"><expr pos:start="221:27" pos:end="221:27"><name pos:start="221:27" pos:end="221:27">c</name></expr></argument>, <argument pos:start="221:30" pos:end="221:33"><expr pos:start="221:30" pos:end="221:33"><name pos:start="221:30" pos:end="221:33">info</name></expr></argument>)</argument_list></call> <operator pos:start="221:36" pos:end="221:36">&lt;</operator> <literal type="number" pos:start="221:38" pos:end="221:38">0</literal></expr>)</condition> <block pos:start="221:41" pos:end="227:5">{<block_content pos:start="223:9" pos:end="225:24">

        <expr_stmt pos:start="223:9" pos:end="223:74"><expr pos:start="223:9" pos:end="223:73"><call pos:start="223:9" pos:end="223:73"><name pos:start="223:9" pos:end="223:15">sprintf</name><argument_list pos:start="223:16" pos:end="223:73">(<argument pos:start="223:17" pos:end="223:19"><expr pos:start="223:17" pos:end="223:19"><name pos:start="223:17" pos:end="223:19">msg</name></expr></argument>, <argument pos:start="223:22" pos:end="223:67"><expr pos:start="223:22" pos:end="223:67"><literal type="string" pos:start="223:22" pos:end="223:67">"Input stream corresponding to '%s' not found"</literal></expr></argument>, <argument pos:start="223:70" pos:end="223:72"><expr pos:start="223:70" pos:end="223:72"><name pos:start="223:70" pos:end="223:72">url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="225:9" pos:end="225:24">goto <name pos:start="225:14" pos:end="225:23">send_error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="231:5" pos:end="231:29">/* prepare http header */</comment>

    <expr_stmt pos:start="233:5" pos:end="233:18"><expr pos:start="233:5" pos:end="233:17"><name pos:start="233:5" pos:end="233:5">q</name> <operator pos:start="233:7" pos:end="233:7">=</operator> <name pos:start="233:9" pos:end="233:17"><name pos:start="233:9" pos:end="233:9">c</name><operator pos:start="233:10" pos:end="233:11">-&gt;</operator><name pos:start="233:12" pos:end="233:17">buffer</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="235:5" pos:end="235:43"><expr pos:start="235:5" pos:end="235:42"><name pos:start="235:5" pos:end="235:5">q</name> <operator pos:start="235:7" pos:end="235:8">+=</operator> <call pos:start="235:10" pos:end="235:42"><name pos:start="235:10" pos:end="235:16">sprintf</name><argument_list pos:start="235:17" pos:end="235:42">(<argument pos:start="235:18" pos:end="235:18"><expr pos:start="235:18" pos:end="235:18"><name pos:start="235:18" pos:end="235:18">q</name></expr></argument>, <argument pos:start="235:21" pos:end="235:41"><expr pos:start="235:21" pos:end="235:41"><literal type="string" pos:start="235:21" pos:end="235:41">"HTTP/1.0 200 OK\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="237:5" pos:end="237:42"><expr pos:start="237:5" pos:end="237:41"><name pos:start="237:5" pos:end="237:13">mime_type</name> <operator pos:start="237:15" pos:end="237:15">=</operator> <name pos:start="237:17" pos:end="237:41"><name pos:start="237:17" pos:end="237:17">c</name><operator pos:start="237:18" pos:end="237:19">-&gt;</operator><name pos:start="237:20" pos:end="237:25">stream</name><operator pos:start="237:26" pos:end="237:27">-&gt;</operator><name pos:start="237:28" pos:end="237:30">fmt</name><operator pos:start="237:31" pos:end="237:32">-&gt;</operator><name pos:start="237:33" pos:end="237:41">mime_type</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="239:5" pos:end="241:49"><if pos:start="239:5" pos:end="241:49">if <condition pos:start="239:8" pos:end="239:19">(<expr pos:start="239:9" pos:end="239:18"><operator pos:start="239:9" pos:end="239:9">!</operator><name pos:start="239:10" pos:end="239:18">mime_type</name></expr>)</condition><block type="pseudo" pos:start="241:9" pos:end="241:49"><block_content pos:start="241:9" pos:end="241:49">

        <expr_stmt pos:start="241:9" pos:end="241:49"><expr pos:start="241:9" pos:end="241:48"><name pos:start="241:9" pos:end="241:17">mime_type</name> <operator pos:start="241:19" pos:end="241:19">=</operator> <literal type="string" pos:start="241:21" pos:end="241:48">"application/x-octet_stream"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="243:5" pos:end="243:44"><expr pos:start="243:5" pos:end="243:43"><name pos:start="243:5" pos:end="243:5">q</name> <operator pos:start="243:7" pos:end="243:8">+=</operator> <call pos:start="243:10" pos:end="243:43"><name pos:start="243:10" pos:end="243:16">sprintf</name><argument_list pos:start="243:17" pos:end="243:43">(<argument pos:start="243:18" pos:end="243:18"><expr pos:start="243:18" pos:end="243:18"><name pos:start="243:18" pos:end="243:18">q</name></expr></argument>, <argument pos:start="243:21" pos:end="243:42"><expr pos:start="243:21" pos:end="243:42"><literal type="string" pos:start="243:21" pos:end="243:42">"Pragma: no-cache\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="247:5" pos:end="247:40">/* for asf, we need extra headers */</comment>

    <if_stmt pos:start="249:5" pos:end="255:5"><if pos:start="249:5" pos:end="255:5">if <condition pos:start="249:8" pos:end="249:44">(<expr pos:start="249:9" pos:end="249:43"><operator pos:start="249:9" pos:end="249:9">!</operator><call pos:start="249:10" pos:end="249:43"><name pos:start="249:10" pos:end="249:15">strcmp</name><argument_list pos:start="249:16" pos:end="249:43">(<argument pos:start="249:17" pos:end="249:36"><expr pos:start="249:17" pos:end="249:36"><name pos:start="249:17" pos:end="249:36"><name pos:start="249:17" pos:end="249:17">c</name><operator pos:start="249:18" pos:end="249:19">-&gt;</operator><name pos:start="249:20" pos:end="249:25">stream</name><operator pos:start="249:26" pos:end="249:27">-&gt;</operator><name pos:start="249:28" pos:end="249:30">fmt</name><operator pos:start="249:31" pos:end="249:32">-&gt;</operator><name pos:start="249:33" pos:end="249:36">name</name></name></expr></argument>,<argument pos:start="249:38" pos:end="249:42"><expr pos:start="249:38" pos:end="249:42"><literal type="string" pos:start="249:38" pos:end="249:42">"asf"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="249:46" pos:end="255:5">{<block_content pos:start="251:9" pos:end="253:47">

        <expr_stmt pos:start="251:9" pos:end="251:144"><expr pos:start="251:9" pos:end="251:143"><name pos:start="251:9" pos:end="251:9">q</name> <operator pos:start="251:11" pos:end="251:12">+=</operator> <call pos:start="251:14" pos:end="251:143"><name pos:start="251:14" pos:end="251:20">sprintf</name><argument_list pos:start="251:21" pos:end="251:143">(<argument pos:start="251:22" pos:end="251:22"><expr pos:start="251:22" pos:end="251:22"><name pos:start="251:22" pos:end="251:22">q</name></expr></argument>, <argument pos:start="251:25" pos:end="251:142"><expr pos:start="251:25" pos:end="251:142"><literal type="string" pos:start="251:25" pos:end="251:142">"Server: Cougar 4.1.0.3923\r\nCache-Control: no-cache\r\nPragma: client-id=1234\r\nPragma: features=\"broadcast\"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="253:9" pos:end="253:47"><expr pos:start="253:9" pos:end="253:46"><name pos:start="253:9" pos:end="253:17">mime_type</name> <operator pos:start="253:19" pos:end="253:19">=</operator> <literal type="string" pos:start="253:21" pos:end="253:46">"application/octet-stream"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="257:5" pos:end="257:55"><expr pos:start="257:5" pos:end="257:54"><name pos:start="257:5" pos:end="257:5">q</name> <operator pos:start="257:7" pos:end="257:8">+=</operator> <call pos:start="257:10" pos:end="257:54"><name pos:start="257:10" pos:end="257:16">sprintf</name><argument_list pos:start="257:17" pos:end="257:54">(<argument pos:start="257:18" pos:end="257:18"><expr pos:start="257:18" pos:end="257:18"><name pos:start="257:18" pos:end="257:18">q</name></expr></argument>, <argument pos:start="257:21" pos:end="257:42"><expr pos:start="257:21" pos:end="257:42"><literal type="string" pos:start="257:21" pos:end="257:42">"Content-Type: %s\r\n"</literal></expr></argument>, <argument pos:start="257:45" pos:end="257:53"><expr pos:start="257:45" pos:end="257:53"><name pos:start="257:45" pos:end="257:53">mime_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="259:5" pos:end="259:28"><expr pos:start="259:5" pos:end="259:27"><name pos:start="259:5" pos:end="259:5">q</name> <operator pos:start="259:7" pos:end="259:8">+=</operator> <call pos:start="259:10" pos:end="259:27"><name pos:start="259:10" pos:end="259:16">sprintf</name><argument_list pos:start="259:17" pos:end="259:27">(<argument pos:start="259:18" pos:end="259:18"><expr pos:start="259:18" pos:end="259:18"><name pos:start="259:18" pos:end="259:18">q</name></expr></argument>, <argument pos:start="259:21" pos:end="259:26"><expr pos:start="259:21" pos:end="259:26"><literal type="string" pos:start="259:21" pos:end="259:26">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    

    <comment type="block" pos:start="263:5" pos:end="263:31">/* prepare output buffer */</comment>

    <expr_stmt pos:start="265:5" pos:end="265:22"><expr pos:start="265:5" pos:end="265:21"><name pos:start="265:5" pos:end="265:17"><name pos:start="265:5" pos:end="265:5">c</name><operator pos:start="265:6" pos:end="265:7">-&gt;</operator><name pos:start="265:8" pos:end="265:17">http_error</name></name> <operator pos:start="265:19" pos:end="265:19">=</operator> <literal type="number" pos:start="265:21" pos:end="265:21">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="267:5" pos:end="267:30"><expr pos:start="267:5" pos:end="267:29"><name pos:start="267:5" pos:end="267:17"><name pos:start="267:5" pos:end="267:5">c</name><operator pos:start="267:6" pos:end="267:7">-&gt;</operator><name pos:start="267:8" pos:end="267:17">buffer_ptr</name></name> <operator pos:start="267:19" pos:end="267:19">=</operator> <name pos:start="267:21" pos:end="267:29"><name pos:start="267:21" pos:end="267:21">c</name><operator pos:start="267:22" pos:end="267:23">-&gt;</operator><name pos:start="267:24" pos:end="267:29">buffer</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="269:5" pos:end="269:22"><expr pos:start="269:5" pos:end="269:21"><name pos:start="269:5" pos:end="269:17"><name pos:start="269:5" pos:end="269:5">c</name><operator pos:start="269:6" pos:end="269:7">-&gt;</operator><name pos:start="269:8" pos:end="269:17">buffer_end</name></name> <operator pos:start="269:19" pos:end="269:19">=</operator> <name pos:start="269:21" pos:end="269:21">q</name></expr>;</expr_stmt>

    <expr_stmt pos:start="271:5" pos:end="271:37"><expr pos:start="271:5" pos:end="271:36"><name pos:start="271:5" pos:end="271:12"><name pos:start="271:5" pos:end="271:5">c</name><operator pos:start="271:6" pos:end="271:7">-&gt;</operator><name pos:start="271:8" pos:end="271:12">state</name></name> <operator pos:start="271:14" pos:end="271:14">=</operator> <name pos:start="271:16" pos:end="271:36">HTTPSTATE_SEND_HEADER</name></expr>;</expr_stmt>

    <return pos:start="273:5" pos:end="273:13">return <expr pos:start="273:12" pos:end="273:12"><literal type="number" pos:start="273:12" pos:end="273:12">0</literal></expr>;</return>

 <label pos:start="275:2" pos:end="275:12"><name pos:start="275:2" pos:end="275:11">send_error</name>:</label>

    <expr_stmt pos:start="277:5" pos:end="277:24"><expr pos:start="277:5" pos:end="277:23"><name pos:start="277:5" pos:end="277:17"><name pos:start="277:5" pos:end="277:5">c</name><operator pos:start="277:6" pos:end="277:7">-&gt;</operator><name pos:start="277:8" pos:end="277:17">http_error</name></name> <operator pos:start="277:19" pos:end="277:19">=</operator> <literal type="number" pos:start="277:21" pos:end="277:23">404</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="279:5" pos:end="279:18"><expr pos:start="279:5" pos:end="279:17"><name pos:start="279:5" pos:end="279:5">q</name> <operator pos:start="279:7" pos:end="279:7">=</operator> <name pos:start="279:9" pos:end="279:17"><name pos:start="279:9" pos:end="279:9">c</name><operator pos:start="279:10" pos:end="279:11">-&gt;</operator><name pos:start="279:12" pos:end="279:17">buffer</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="281:5" pos:end="281:50"><expr pos:start="281:5" pos:end="281:49"><name pos:start="281:5" pos:end="281:5">q</name> <operator pos:start="281:7" pos:end="281:8">+=</operator> <call pos:start="281:10" pos:end="281:49"><name pos:start="281:10" pos:end="281:16">sprintf</name><argument_list pos:start="281:17" pos:end="281:49">(<argument pos:start="281:18" pos:end="281:18"><expr pos:start="281:18" pos:end="281:18"><name pos:start="281:18" pos:end="281:18">q</name></expr></argument>, <argument pos:start="281:21" pos:end="281:48"><expr pos:start="281:21" pos:end="281:48"><literal type="string" pos:start="281:21" pos:end="281:48">"HTTP/1.0 404 Not Found\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="283:5" pos:end="283:57"><expr pos:start="283:5" pos:end="283:56"><name pos:start="283:5" pos:end="283:5">q</name> <operator pos:start="283:7" pos:end="283:8">+=</operator> <call pos:start="283:10" pos:end="283:56"><name pos:start="283:10" pos:end="283:16">sprintf</name><argument_list pos:start="283:17" pos:end="283:56">(<argument pos:start="283:18" pos:end="283:18"><expr pos:start="283:18" pos:end="283:18"><name pos:start="283:18" pos:end="283:18">q</name></expr></argument>, <argument pos:start="283:21" pos:end="283:42"><expr pos:start="283:21" pos:end="283:42"><literal type="string" pos:start="283:21" pos:end="283:42">"Content-type: %s\r\n"</literal></expr></argument>, <argument pos:start="283:45" pos:end="283:55"><expr pos:start="283:45" pos:end="283:55"><literal type="string" pos:start="283:45" pos:end="283:55">"text/html"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="285:5" pos:end="285:28"><expr pos:start="285:5" pos:end="285:27"><name pos:start="285:5" pos:end="285:5">q</name> <operator pos:start="285:7" pos:end="285:8">+=</operator> <call pos:start="285:10" pos:end="285:27"><name pos:start="285:10" pos:end="285:16">sprintf</name><argument_list pos:start="285:17" pos:end="285:27">(<argument pos:start="285:18" pos:end="285:18"><expr pos:start="285:18" pos:end="285:18"><name pos:start="285:18" pos:end="285:18">q</name></expr></argument>, <argument pos:start="285:21" pos:end="285:26"><expr pos:start="285:21" pos:end="285:26"><literal type="string" pos:start="285:21" pos:end="285:26">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="287:5" pos:end="287:32"><expr pos:start="287:5" pos:end="287:31"><name pos:start="287:5" pos:end="287:5">q</name> <operator pos:start="287:7" pos:end="287:8">+=</operator> <call pos:start="287:10" pos:end="287:31"><name pos:start="287:10" pos:end="287:16">sprintf</name><argument_list pos:start="287:17" pos:end="287:31">(<argument pos:start="287:18" pos:end="287:18"><expr pos:start="287:18" pos:end="287:18"><name pos:start="287:18" pos:end="287:18">q</name></expr></argument>, <argument pos:start="287:21" pos:end="287:30"><expr pos:start="287:21" pos:end="287:30"><literal type="string" pos:start="287:21" pos:end="287:30">"&lt;HTML&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="289:5" pos:end="289:67"><expr pos:start="289:5" pos:end="289:66"><name pos:start="289:5" pos:end="289:5">q</name> <operator pos:start="289:7" pos:end="289:8">+=</operator> <call pos:start="289:10" pos:end="289:66"><name pos:start="289:10" pos:end="289:16">sprintf</name><argument_list pos:start="289:17" pos:end="289:66">(<argument pos:start="289:18" pos:end="289:18"><expr pos:start="289:18" pos:end="289:18"><name pos:start="289:18" pos:end="289:18">q</name></expr></argument>, <argument pos:start="289:21" pos:end="289:65"><expr pos:start="289:21" pos:end="289:65"><literal type="string" pos:start="289:21" pos:end="289:65">"&lt;HEAD&gt;&lt;TITLE&gt;404 Not Found&lt;/TITLE&gt;&lt;/HEAD&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="291:5" pos:end="291:46"><expr pos:start="291:5" pos:end="291:45"><name pos:start="291:5" pos:end="291:5">q</name> <operator pos:start="291:7" pos:end="291:8">+=</operator> <call pos:start="291:10" pos:end="291:45"><name pos:start="291:10" pos:end="291:16">sprintf</name><argument_list pos:start="291:17" pos:end="291:45">(<argument pos:start="291:18" pos:end="291:18"><expr pos:start="291:18" pos:end="291:18"><name pos:start="291:18" pos:end="291:18">q</name></expr></argument>, <argument pos:start="291:21" pos:end="291:39"><expr pos:start="291:21" pos:end="291:39"><literal type="string" pos:start="291:21" pos:end="291:39">"&lt;BODY&gt;%s&lt;/BODY&gt;\n"</literal></expr></argument>, <argument pos:start="291:42" pos:end="291:44"><expr pos:start="291:42" pos:end="291:44"><name pos:start="291:42" pos:end="291:44">msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="293:5" pos:end="293:33"><expr pos:start="293:5" pos:end="293:32"><name pos:start="293:5" pos:end="293:5">q</name> <operator pos:start="293:7" pos:end="293:8">+=</operator> <call pos:start="293:10" pos:end="293:32"><name pos:start="293:10" pos:end="293:16">sprintf</name><argument_list pos:start="293:17" pos:end="293:32">(<argument pos:start="293:18" pos:end="293:18"><expr pos:start="293:18" pos:end="293:18"><name pos:start="293:18" pos:end="293:18">q</name></expr></argument>, <argument pos:start="293:21" pos:end="293:31"><expr pos:start="293:21" pos:end="293:31"><literal type="string" pos:start="293:21" pos:end="293:31">"&lt;/HTML&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="297:5" pos:end="297:31">/* prepare output buffer */</comment>

    <expr_stmt pos:start="299:5" pos:end="299:30"><expr pos:start="299:5" pos:end="299:29"><name pos:start="299:5" pos:end="299:17"><name pos:start="299:5" pos:end="299:5">c</name><operator pos:start="299:6" pos:end="299:7">-&gt;</operator><name pos:start="299:8" pos:end="299:17">buffer_ptr</name></name> <operator pos:start="299:19" pos:end="299:19">=</operator> <name pos:start="299:21" pos:end="299:29"><name pos:start="299:21" pos:end="299:21">c</name><operator pos:start="299:22" pos:end="299:23">-&gt;</operator><name pos:start="299:24" pos:end="299:29">buffer</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="301:5" pos:end="301:22"><expr pos:start="301:5" pos:end="301:21"><name pos:start="301:5" pos:end="301:17"><name pos:start="301:5" pos:end="301:5">c</name><operator pos:start="301:6" pos:end="301:7">-&gt;</operator><name pos:start="301:8" pos:end="301:17">buffer_end</name></name> <operator pos:start="301:19" pos:end="301:19">=</operator> <name pos:start="301:21" pos:end="301:21">q</name></expr>;</expr_stmt>

    <expr_stmt pos:start="303:5" pos:end="303:37"><expr pos:start="303:5" pos:end="303:36"><name pos:start="303:5" pos:end="303:12"><name pos:start="303:5" pos:end="303:5">c</name><operator pos:start="303:6" pos:end="303:7">-&gt;</operator><name pos:start="303:8" pos:end="303:12">state</name></name> <operator pos:start="303:14" pos:end="303:14">=</operator> <name pos:start="303:16" pos:end="303:36">HTTPSTATE_SEND_HEADER</name></expr>;</expr_stmt>

    <return pos:start="305:5" pos:end="305:13">return <expr pos:start="305:12" pos:end="305:12"><literal type="number" pos:start="305:12" pos:end="305:12">0</literal></expr>;</return>

 <label pos:start="307:2" pos:end="307:12"><name pos:start="307:2" pos:end="307:11">send_stats</name>:</label>

    <expr_stmt pos:start="309:5" pos:end="309:21"><expr pos:start="309:5" pos:end="309:20"><call pos:start="309:5" pos:end="309:20"><name pos:start="309:5" pos:end="309:17">compute_stats</name><argument_list pos:start="309:18" pos:end="309:20">(<argument pos:start="309:19" pos:end="309:19"><expr pos:start="309:19" pos:end="309:19"><name pos:start="309:19" pos:end="309:19">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="311:5" pos:end="311:24"><expr pos:start="311:5" pos:end="311:23"><name pos:start="311:5" pos:end="311:17"><name pos:start="311:5" pos:end="311:5">c</name><operator pos:start="311:6" pos:end="311:7">-&gt;</operator><name pos:start="311:8" pos:end="311:17">http_error</name></name> <operator pos:start="311:19" pos:end="311:19">=</operator> <literal type="number" pos:start="311:21" pos:end="311:23">200</literal></expr>;</expr_stmt> <comment type="block" pos:start="311:26" pos:end="313:59">/* horrible : we use this value to avoid

                            going to the send data state */</comment>

    <expr_stmt pos:start="315:5" pos:end="315:37"><expr pos:start="315:5" pos:end="315:36"><name pos:start="315:5" pos:end="315:12"><name pos:start="315:5" pos:end="315:5">c</name><operator pos:start="315:6" pos:end="315:7">-&gt;</operator><name pos:start="315:8" pos:end="315:12">state</name></name> <operator pos:start="315:14" pos:end="315:14">=</operator> <name pos:start="315:16" pos:end="315:36">HTTPSTATE_SEND_HEADER</name></expr>;</expr_stmt>

    <return pos:start="317:5" pos:end="317:13">return <expr pos:start="317:12" pos:end="317:12"><literal type="number" pos:start="317:12" pos:end="317:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
