<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9503.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:22">create_gic</name><parameter_list pos:start="1:23" pos:end="1:63">(<parameter pos:start="1:24" pos:end="1:47"><decl pos:start="1:24" pos:end="1:47"><type pos:start="1:24" pos:end="1:47"><specifier pos:start="1:24" pos:end="1:28">const</specifier> <name pos:start="1:30" pos:end="1:42">VirtBoardInfo</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:47">vbi</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:62"><decl pos:start="1:50" pos:end="1:62"><type pos:start="1:50" pos:end="1:62"><name pos:start="1:50" pos:end="1:57">qemu_irq</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:62">pic</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="97:1">{<block_content pos:start="7:5" pos:end="95:26">

    <comment type="block" pos:start="5:5" pos:end="5:39">/* We create a standalone GIC v2 */</comment>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">DeviceState</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:23">gicdev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">SysBusDevice</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:27">gicbusdev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:35"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:23">gictype</name> <init pos:start="11:25" pos:end="11:35">= <expr pos:start="11:27" pos:end="11:35"><literal type="string" pos:start="11:27" pos:end="11:35">"arm_gic"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:10"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="21:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:32">(<expr pos:start="17:9" pos:end="17:31"><call pos:start="17:9" pos:end="17:31"><name pos:start="17:9" pos:end="17:29">kvm_irqchip_in_kernel</name><argument_list pos:start="17:30" pos:end="17:31">()</argument_list></call></expr>)</condition> <block pos:start="17:34" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:32">

        <expr_stmt pos:start="19:9" pos:end="19:32"><expr pos:start="19:9" pos:end="19:31"><name pos:start="19:9" pos:end="19:15">gictype</name> <operator pos:start="19:17" pos:end="19:17">=</operator> <literal type="string" pos:start="19:19" pos:end="19:31">"kvm-arm-gic"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:40"><expr pos:start="25:5" pos:end="25:39"><name pos:start="25:5" pos:end="25:10">gicdev</name> <operator pos:start="25:12" pos:end="25:12">=</operator> <call pos:start="25:14" pos:end="25:39"><name pos:start="25:14" pos:end="25:24">qdev_create</name><argument_list pos:start="25:25" pos:end="25:39">(<argument pos:start="25:26" pos:end="25:29"><expr pos:start="25:26" pos:end="25:29"><name pos:start="25:26" pos:end="25:29">NULL</name></expr></argument>, <argument pos:start="25:32" pos:end="25:38"><expr pos:start="25:32" pos:end="25:38"><name pos:start="25:32" pos:end="25:38">gictype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:48"><expr pos:start="27:5" pos:end="27:47"><call pos:start="27:5" pos:end="27:47"><name pos:start="27:5" pos:end="27:24">qdev_prop_set_uint32</name><argument_list pos:start="27:25" pos:end="27:47">(<argument pos:start="27:26" pos:end="27:31"><expr pos:start="27:26" pos:end="27:31"><name pos:start="27:26" pos:end="27:31">gicdev</name></expr></argument>, <argument pos:start="27:34" pos:end="27:43"><expr pos:start="27:34" pos:end="27:43"><literal type="string" pos:start="27:34" pos:end="27:43">"revision"</literal></expr></argument>, <argument pos:start="27:46" pos:end="27:46"><expr pos:start="27:46" pos:end="27:46"><literal type="number" pos:start="27:46" pos:end="27:46">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:54"><expr pos:start="29:5" pos:end="29:53"><call pos:start="29:5" pos:end="29:53"><name pos:start="29:5" pos:end="29:24">qdev_prop_set_uint32</name><argument_list pos:start="29:25" pos:end="29:53">(<argument pos:start="29:26" pos:end="29:31"><expr pos:start="29:26" pos:end="29:31"><name pos:start="29:26" pos:end="29:31">gicdev</name></expr></argument>, <argument pos:start="29:34" pos:end="29:42"><expr pos:start="29:34" pos:end="29:42"><literal type="string" pos:start="29:34" pos:end="29:42">"num-cpu"</literal></expr></argument>, <argument pos:start="29:45" pos:end="29:52"><expr pos:start="29:45" pos:end="29:52"><name pos:start="29:45" pos:end="29:52">smp_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="31:5" pos:end="35:7">/* Note that the num-irq property counts both internal and external

     * interrupts; there are always 32 of the former (mandated by GIC spec).

     */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:59"><expr pos:start="37:5" pos:end="37:58"><call pos:start="37:5" pos:end="37:58"><name pos:start="37:5" pos:end="37:24">qdev_prop_set_uint32</name><argument_list pos:start="37:25" pos:end="37:58">(<argument pos:start="37:26" pos:end="37:31"><expr pos:start="37:26" pos:end="37:31"><name pos:start="37:26" pos:end="37:31">gicdev</name></expr></argument>, <argument pos:start="37:34" pos:end="37:42"><expr pos:start="37:34" pos:end="37:42"><literal type="string" pos:start="37:34" pos:end="37:42">"num-irq"</literal></expr></argument>, <argument pos:start="37:45" pos:end="37:57"><expr pos:start="37:45" pos:end="37:57"><name pos:start="37:45" pos:end="37:52">NUM_IRQS</name> <operator pos:start="37:54" pos:end="37:54">+</operator> <literal type="number" pos:start="37:56" pos:end="37:57">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:29"><expr pos:start="39:5" pos:end="39:28"><call pos:start="39:5" pos:end="39:28"><name pos:start="39:5" pos:end="39:20">qdev_init_nofail</name><argument_list pos:start="39:21" pos:end="39:28">(<argument pos:start="39:22" pos:end="39:27"><expr pos:start="39:22" pos:end="39:27"><name pos:start="39:22" pos:end="39:27">gicdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:39"><expr pos:start="41:5" pos:end="41:38"><name pos:start="41:5" pos:end="41:13">gicbusdev</name> <operator pos:start="41:15" pos:end="41:15">=</operator> <call pos:start="41:17" pos:end="41:38"><name pos:start="41:17" pos:end="41:30">SYS_BUS_DEVICE</name><argument_list pos:start="41:31" pos:end="41:38">(<argument pos:start="41:32" pos:end="41:37"><expr pos:start="41:32" pos:end="41:37"><name pos:start="41:32" pos:end="41:37">gicdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:67"><expr pos:start="43:5" pos:end="43:66"><call pos:start="43:5" pos:end="43:66"><name pos:start="43:5" pos:end="43:19">sysbus_mmio_map</name><argument_list pos:start="43:20" pos:end="43:66">(<argument pos:start="43:21" pos:end="43:29"><expr pos:start="43:21" pos:end="43:29"><name pos:start="43:21" pos:end="43:29">gicbusdev</name></expr></argument>, <argument pos:start="43:32" pos:end="43:32"><expr pos:start="43:32" pos:end="43:32"><literal type="number" pos:start="43:32" pos:end="43:32">0</literal></expr></argument>, <argument pos:start="43:35" pos:end="43:65"><expr pos:start="43:35" pos:end="43:65"><name pos:start="43:35" pos:end="43:60"><name pos:start="43:35" pos:end="43:37">vbi</name><operator pos:start="43:38" pos:end="43:39">-&gt;</operator><name pos:start="43:40" pos:end="43:45">memmap</name><index pos:start="43:46" pos:end="43:60">[<expr pos:start="43:47" pos:end="43:59"><name pos:start="43:47" pos:end="43:59">VIRT_GIC_DIST</name></expr>]</index></name><operator pos:start="43:61" pos:end="43:61">.</operator><name pos:start="43:62" pos:end="43:65">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:66"><expr pos:start="45:5" pos:end="45:65"><call pos:start="45:5" pos:end="45:65"><name pos:start="45:5" pos:end="45:19">sysbus_mmio_map</name><argument_list pos:start="45:20" pos:end="45:65">(<argument pos:start="45:21" pos:end="45:29"><expr pos:start="45:21" pos:end="45:29"><name pos:start="45:21" pos:end="45:29">gicbusdev</name></expr></argument>, <argument pos:start="45:32" pos:end="45:32"><expr pos:start="45:32" pos:end="45:32"><literal type="number" pos:start="45:32" pos:end="45:32">1</literal></expr></argument>, <argument pos:start="45:35" pos:end="45:64"><expr pos:start="45:35" pos:end="45:64"><name pos:start="45:35" pos:end="45:59"><name pos:start="45:35" pos:end="45:37">vbi</name><operator pos:start="45:38" pos:end="45:39">-&gt;</operator><name pos:start="45:40" pos:end="45:45">memmap</name><index pos:start="45:46" pos:end="45:59">[<expr pos:start="45:47" pos:end="45:58"><name pos:start="45:47" pos:end="45:58">VIRT_GIC_CPU</name></expr>]</index></name><operator pos:start="45:60" pos:end="45:60">.</operator><name pos:start="45:61" pos:end="45:64">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="49:5" pos:end="55:7">/* Wire the outputs from each CPU's generic timer to the

     * appropriate GIC PPI inputs, and the GIC's IRQ output to

     * the CPU's IRQ input.

     */</comment>

    <for pos:start="57:5" pos:end="83:5">for <control pos:start="57:9" pos:end="57:34">(<init pos:start="57:10" pos:end="57:15"><expr pos:start="57:10" pos:end="57:14"><name pos:start="57:10" pos:end="57:10">i</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <literal type="number" pos:start="57:14" pos:end="57:14">0</literal></expr>;</init> <condition pos:start="57:17" pos:end="57:29"><expr pos:start="57:17" pos:end="57:28"><name pos:start="57:17" pos:end="57:17">i</name> <operator pos:start="57:19" pos:end="57:19">&lt;</operator> <name pos:start="57:21" pos:end="57:28">smp_cpus</name></expr>;</condition> <incr pos:start="57:31" pos:end="57:33"><expr pos:start="57:31" pos:end="57:33"><name pos:start="57:31" pos:end="57:31">i</name><operator pos:start="57:32" pos:end="57:33">++</operator></expr></incr>)</control> <block pos:start="57:36" pos:end="83:5">{<block_content pos:start="59:9" pos:end="81:80">

        <decl_stmt pos:start="59:9" pos:end="59:54"><decl pos:start="59:9" pos:end="59:53"><type pos:start="59:9" pos:end="59:21"><name pos:start="59:9" pos:end="59:19">DeviceState</name> <modifier pos:start="59:21" pos:end="59:21">*</modifier></type><name pos:start="59:22" pos:end="59:27">cpudev</name> <init pos:start="59:29" pos:end="59:53">= <expr pos:start="59:31" pos:end="59:53"><call pos:start="59:31" pos:end="59:53"><name pos:start="59:31" pos:end="59:36">DEVICE</name><argument_list pos:start="59:37" pos:end="59:53">(<argument pos:start="59:38" pos:end="59:52"><expr pos:start="59:38" pos:end="59:52"><call pos:start="59:38" pos:end="59:52"><name pos:start="59:38" pos:end="59:49">qemu_get_cpu</name><argument_list pos:start="59:50" pos:end="59:52">(<argument pos:start="59:51" pos:end="59:51"><expr pos:start="59:51" pos:end="59:51"><name pos:start="59:51" pos:end="59:51">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="61:9" pos:end="61:40"><decl pos:start="61:9" pos:end="61:39"><type pos:start="61:9" pos:end="61:11"><name pos:start="61:9" pos:end="61:11">int</name></type> <name pos:start="61:13" pos:end="61:19">ppibase</name> <init pos:start="61:21" pos:end="61:39">= <expr pos:start="61:23" pos:end="61:39"><name pos:start="61:23" pos:end="61:30">NUM_IRQS</name> <operator pos:start="61:32" pos:end="61:32">+</operator> <name pos:start="61:34" pos:end="61:34">i</name> <operator pos:start="61:36" pos:end="61:36">*</operator> <literal type="number" pos:start="61:38" pos:end="61:39">32</literal></expr></init></decl>;</decl_stmt>

        <comment type="block" pos:start="63:9" pos:end="67:11">/* physical timer; we wire it up to the non-secure timer's ID,

         * since a real A15 always has TrustZone but QEMU doesn't.

         */</comment>

        <expr_stmt pos:start="69:9" pos:end="71:70"><expr pos:start="69:9" pos:end="71:69"><call pos:start="69:9" pos:end="71:69"><name pos:start="69:9" pos:end="69:29">qdev_connect_gpio_out</name><argument_list pos:start="69:30" pos:end="71:69">(<argument pos:start="69:31" pos:end="69:36"><expr pos:start="69:31" pos:end="69:36"><name pos:start="69:31" pos:end="69:36">cpudev</name></expr></argument>, <argument pos:start="69:39" pos:end="69:39"><expr pos:start="69:39" pos:end="69:39"><literal type="number" pos:start="69:39" pos:end="69:39">0</literal></expr></argument>,

                              <argument pos:start="71:31" pos:end="71:68"><expr pos:start="71:31" pos:end="71:68"><call pos:start="71:31" pos:end="71:68"><name pos:start="71:31" pos:end="71:46">qdev_get_gpio_in</name><argument_list pos:start="71:47" pos:end="71:68">(<argument pos:start="71:48" pos:end="71:53"><expr pos:start="71:48" pos:end="71:53"><name pos:start="71:48" pos:end="71:53">gicdev</name></expr></argument>, <argument pos:start="71:56" pos:end="71:67"><expr pos:start="71:56" pos:end="71:67"><name pos:start="71:56" pos:end="71:62">ppibase</name> <operator pos:start="71:64" pos:end="71:64">+</operator> <literal type="number" pos:start="71:66" pos:end="71:67">30</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="73:9" pos:end="73:27">/* virtual timer */</comment>

        <expr_stmt pos:start="75:9" pos:end="77:70"><expr pos:start="75:9" pos:end="77:69"><call pos:start="75:9" pos:end="77:69"><name pos:start="75:9" pos:end="75:29">qdev_connect_gpio_out</name><argument_list pos:start="75:30" pos:end="77:69">(<argument pos:start="75:31" pos:end="75:36"><expr pos:start="75:31" pos:end="75:36"><name pos:start="75:31" pos:end="75:36">cpudev</name></expr></argument>, <argument pos:start="75:39" pos:end="75:39"><expr pos:start="75:39" pos:end="75:39"><literal type="number" pos:start="75:39" pos:end="75:39">1</literal></expr></argument>,

                              <argument pos:start="77:31" pos:end="77:68"><expr pos:start="77:31" pos:end="77:68"><call pos:start="77:31" pos:end="77:68"><name pos:start="77:31" pos:end="77:46">qdev_get_gpio_in</name><argument_list pos:start="77:47" pos:end="77:68">(<argument pos:start="77:48" pos:end="77:53"><expr pos:start="77:48" pos:end="77:53"><name pos:start="77:48" pos:end="77:53">gicdev</name></expr></argument>, <argument pos:start="77:56" pos:end="77:67"><expr pos:start="77:56" pos:end="77:67"><name pos:start="77:56" pos:end="77:62">ppibase</name> <operator pos:start="77:64" pos:end="77:64">+</operator> <literal type="number" pos:start="77:66" pos:end="77:67">27</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="81:9" pos:end="81:80"><expr pos:start="81:9" pos:end="81:79"><call pos:start="81:9" pos:end="81:79"><name pos:start="81:9" pos:end="81:26">sysbus_connect_irq</name><argument_list pos:start="81:27" pos:end="81:79">(<argument pos:start="81:28" pos:end="81:36"><expr pos:start="81:28" pos:end="81:36"><name pos:start="81:28" pos:end="81:36">gicbusdev</name></expr></argument>, <argument pos:start="81:39" pos:end="81:39"><expr pos:start="81:39" pos:end="81:39"><name pos:start="81:39" pos:end="81:39">i</name></expr></argument>, <argument pos:start="81:42" pos:end="81:78"><expr pos:start="81:42" pos:end="81:78"><call pos:start="81:42" pos:end="81:78"><name pos:start="81:42" pos:end="81:57">qdev_get_gpio_in</name><argument_list pos:start="81:58" pos:end="81:78">(<argument pos:start="81:59" pos:end="81:64"><expr pos:start="81:59" pos:end="81:64"><name pos:start="81:59" pos:end="81:64">cpudev</name></expr></argument>, <argument pos:start="81:67" pos:end="81:77"><expr pos:start="81:67" pos:end="81:77"><name pos:start="81:67" pos:end="81:77">ARM_CPU_IRQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <for pos:start="87:5" pos:end="91:5">for <control pos:start="87:9" pos:end="87:34">(<init pos:start="87:10" pos:end="87:15"><expr pos:start="87:10" pos:end="87:14"><name pos:start="87:10" pos:end="87:10">i</name> <operator pos:start="87:12" pos:end="87:12">=</operator> <literal type="number" pos:start="87:14" pos:end="87:14">0</literal></expr>;</init> <condition pos:start="87:17" pos:end="87:29"><expr pos:start="87:17" pos:end="87:28"><name pos:start="87:17" pos:end="87:17">i</name> <operator pos:start="87:19" pos:end="87:19">&lt;</operator> <name pos:start="87:21" pos:end="87:28">NUM_IRQS</name></expr>;</condition> <incr pos:start="87:31" pos:end="87:33"><expr pos:start="87:31" pos:end="87:33"><name pos:start="87:31" pos:end="87:31">i</name><operator pos:start="87:32" pos:end="87:33">++</operator></expr></incr>)</control> <block pos:start="87:36" pos:end="91:5">{<block_content pos:start="89:9" pos:end="89:45">

        <expr_stmt pos:start="89:9" pos:end="89:45"><expr pos:start="89:9" pos:end="89:44"><name pos:start="89:9" pos:end="89:14"><name pos:start="89:9" pos:end="89:11">pic</name><index pos:start="89:12" pos:end="89:14">[<expr pos:start="89:13" pos:end="89:13"><name pos:start="89:13" pos:end="89:13">i</name></expr>]</index></name> <operator pos:start="89:16" pos:end="89:16">=</operator> <call pos:start="89:18" pos:end="89:44"><name pos:start="89:18" pos:end="89:33">qdev_get_gpio_in</name><argument_list pos:start="89:34" pos:end="89:44">(<argument pos:start="89:35" pos:end="89:40"><expr pos:start="89:35" pos:end="89:40"><name pos:start="89:35" pos:end="89:40">gicdev</name></expr></argument>, <argument pos:start="89:43" pos:end="89:43"><expr pos:start="89:43" pos:end="89:43"><name pos:start="89:43" pos:end="89:43">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="95:5" pos:end="95:26"><expr pos:start="95:5" pos:end="95:25"><call pos:start="95:5" pos:end="95:25"><name pos:start="95:5" pos:end="95:20">fdt_add_gic_node</name><argument_list pos:start="95:21" pos:end="95:25">(<argument pos:start="95:22" pos:end="95:24"><expr pos:start="95:22" pos:end="95:24"><name pos:start="95:22" pos:end="95:24">vbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
