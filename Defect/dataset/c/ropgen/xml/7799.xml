<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7799.c" pos:tabs="8"><function pos:start="1:1" pos:end="311:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">int32_t</name></type> <name pos:start="1:16" pos:end="1:32">scsi_send_command</name><parameter_list pos:start="1:33" pos:end="1:64">(<parameter pos:start="1:34" pos:end="1:49"><decl pos:start="1:34" pos:end="1:49"><type pos:start="1:34" pos:end="1:49"><name pos:start="1:34" pos:end="1:44">SCSIRequest</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">req</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:63"><decl pos:start="1:52" pos:end="1:63"><type pos:start="1:52" pos:end="1:63"><name pos:start="1:52" pos:end="1:58">uint8_t</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:63">buf</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="311:1">{<block_content pos:start="5:5" pos:end="309:5">

    <decl_stmt pos:start="5:5" pos:end="5:54"><decl pos:start="5:5" pos:end="5:53"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">SCSIDiskReq</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:18">r</name> <init pos:start="5:20" pos:end="5:53">= <expr pos:start="5:22" pos:end="5:53"><call pos:start="5:22" pos:end="5:53"><name pos:start="5:22" pos:end="5:30">DO_UPCAST</name><argument_list pos:start="5:31" pos:end="5:53">(<argument pos:start="5:32" pos:end="5:42"><expr pos:start="5:32" pos:end="5:42"><name pos:start="5:32" pos:end="5:42">SCSIDiskReq</name></expr></argument>, <argument pos:start="5:45" pos:end="5:47"><expr pos:start="5:45" pos:end="5:47"><name pos:start="5:45" pos:end="5:47">req</name></expr></argument>, <argument pos:start="5:50" pos:end="5:52"><expr pos:start="5:50" pos:end="5:52"><name pos:start="5:50" pos:end="5:52">req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:64"><decl pos:start="7:5" pos:end="7:63"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">SCSIDiskState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:63">= <expr pos:start="7:24" pos:end="7:63"><call pos:start="7:24" pos:end="7:63"><name pos:start="7:24" pos:end="7:32">DO_UPCAST</name><argument_list pos:start="7:33" pos:end="7:63">(<argument pos:start="7:34" pos:end="7:46"><expr pos:start="7:34" pos:end="7:46"><name pos:start="7:34" pos:end="7:46">SCSIDiskState</name></expr></argument>, <argument pos:start="7:49" pos:end="7:52"><expr pos:start="7:49" pos:end="7:52"><name pos:start="7:49" pos:end="7:52">qdev</name></expr></argument>, <argument pos:start="7:55" pos:end="7:62"><expr pos:start="7:55" pos:end="7:62"><name pos:start="7:55" pos:end="7:62"><name pos:start="7:55" pos:end="7:57">req</name><operator pos:start="7:58" pos:end="7:59">-&gt;</operator><name pos:start="7:60" pos:end="7:62">dev</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int32_t</name></type> <name pos:start="9:13" pos:end="9:15">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type> <name pos:start="11:13" pos:end="11:19">command</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:19">outbuf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:11"><decl pos:start="15:5" pos:end="15:10"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:10">rc</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:21"><expr pos:start="19:5" pos:end="19:20"><name pos:start="19:5" pos:end="19:11">command</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <name pos:start="19:15" pos:end="19:20"><name pos:start="19:15" pos:end="19:17">buf</name><index pos:start="19:18" pos:end="19:20">[<expr pos:start="19:19" pos:end="19:19"><literal type="number" pos:start="19:19" pos:end="19:19">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:40"><expr pos:start="21:5" pos:end="21:39"><name pos:start="21:5" pos:end="21:10">outbuf</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <operator pos:start="21:14" pos:end="21:14">(</operator><name pos:start="21:15" pos:end="21:21">uint8_t</name> <operator pos:start="21:23" pos:end="21:23">*</operator><operator pos:start="21:24" pos:end="21:24">)</operator><name pos:start="21:25" pos:end="21:39"><name pos:start="21:25" pos:end="21:25">r</name><operator pos:start="21:26" pos:end="21:27">-&gt;</operator><name pos:start="21:28" pos:end="21:30">iov</name><operator pos:start="21:31" pos:end="21:31">.</operator><name pos:start="21:32" pos:end="21:39">iov_base</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="28:0"><expr pos:start="23:5" pos:end="23:79"><call pos:start="23:5" pos:end="23:79"><name pos:start="23:5" pos:end="23:11">DPRINTF</name><argument_list pos:start="23:12" pos:end="23:79">(<argument pos:start="23:13" pos:end="23:50"><expr pos:start="23:13" pos:end="23:50"><literal type="string" pos:start="23:13" pos:end="23:50">"Command: lun=%d tag=0x%x data=0x%02x"</literal></expr></argument>, <argument pos:start="23:53" pos:end="23:60"><expr pos:start="23:53" pos:end="23:60"><name pos:start="23:53" pos:end="23:60"><name pos:start="23:53" pos:end="23:55">req</name><operator pos:start="23:56" pos:end="23:57">-&gt;</operator><name pos:start="23:58" pos:end="23:60">lun</name></name></expr></argument>, <argument pos:start="23:63" pos:end="23:70"><expr pos:start="23:63" pos:end="23:70"><name pos:start="23:63" pos:end="23:70"><name pos:start="23:63" pos:end="23:65">req</name><operator pos:start="23:66" pos:end="23:67">-&gt;</operator><name pos:start="23:68" pos:end="23:70">tag</name></name></expr></argument>, <argument pos:start="23:73" pos:end="23:78"><expr pos:start="23:73" pos:end="23:78"><name pos:start="23:73" pos:end="23:78"><name pos:start="23:73" pos:end="23:75">buf</name><index pos:start="23:76" pos:end="23:78">[<expr pos:start="23:77" pos:end="23:77"><literal type="number" pos:start="23:77" pos:end="23:77">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="27:1" pos:end="27:17">#<cpp:directive pos:start="27:2" pos:end="27:6">ifdef</cpp:directive> <name pos:start="27:8" pos:end="27:17">DEBUG_SCSI</name></cpp:ifdef>

    <block pos:start="29:5" pos:end="44:0">{<block_content pos:start="31:9" pos:end="39:21">

        <decl_stmt pos:start="31:9" pos:end="31:14"><decl pos:start="31:9" pos:end="31:13"><type pos:start="31:9" pos:end="31:11"><name pos:start="31:9" pos:end="31:11">int</name></type> <name pos:start="31:13" pos:end="31:13">i</name></decl>;</decl_stmt>

        <for pos:start="33:9" pos:end="37:9">for <control pos:start="33:13" pos:end="33:44">(<init pos:start="33:14" pos:end="33:19"><expr pos:start="33:14" pos:end="33:18"><name pos:start="33:14" pos:end="33:14">i</name> <operator pos:start="33:16" pos:end="33:16">=</operator> <literal type="number" pos:start="33:18" pos:end="33:18">1</literal></expr>;</init> <condition pos:start="33:21" pos:end="33:39"><expr pos:start="33:21" pos:end="33:38"><name pos:start="33:21" pos:end="33:21">i</name> <operator pos:start="33:23" pos:end="33:23">&lt;</operator> <name pos:start="33:25" pos:end="33:38"><name pos:start="33:25" pos:end="33:25">r</name><operator pos:start="33:26" pos:end="33:27">-&gt;</operator><name pos:start="33:28" pos:end="33:30">req</name><operator pos:start="33:31" pos:end="33:31">.</operator><name pos:start="33:32" pos:end="33:34">cmd</name><operator pos:start="33:35" pos:end="33:35">.</operator><name pos:start="33:36" pos:end="33:38">len</name></name></expr>;</condition> <incr pos:start="33:41" pos:end="33:43"><expr pos:start="33:41" pos:end="33:43"><name pos:start="33:41" pos:end="33:41">i</name><operator pos:start="33:42" pos:end="33:43">++</operator></expr></incr>)</control> <block pos:start="33:46" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:38">

            <expr_stmt pos:start="35:13" pos:end="35:38"><expr pos:start="35:13" pos:end="35:37"><call pos:start="35:13" pos:end="35:37"><name pos:start="35:13" pos:end="35:18">printf</name><argument_list pos:start="35:19" pos:end="35:37">(<argument pos:start="35:20" pos:end="35:28"><expr pos:start="35:20" pos:end="35:28"><literal type="string" pos:start="35:20" pos:end="35:28">" 0x%02x"</literal></expr></argument>, <argument pos:start="35:31" pos:end="35:36"><expr pos:start="35:31" pos:end="35:36"><name pos:start="35:31" pos:end="35:36"><name pos:start="35:31" pos:end="35:33">buf</name><index pos:start="35:34" pos:end="35:36">[<expr pos:start="35:35" pos:end="35:35"><name pos:start="35:35" pos:end="35:35">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="39:9" pos:end="39:21"><expr pos:start="39:9" pos:end="39:20"><call pos:start="39:9" pos:end="39:20"><name pos:start="39:9" pos:end="39:14">printf</name><argument_list pos:start="39:15" pos:end="39:20">(<argument pos:start="39:16" pos:end="39:19"><expr pos:start="39:16" pos:end="39:19"><literal type="string" pos:start="39:16" pos:end="39:19">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

<cpp:endif pos:start="43:1" pos:end="43:6">#<cpp:directive pos:start="43:2" pos:end="43:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="47:5" pos:end="61:5"><if pos:start="47:5" pos:end="61:5">if <condition pos:start="47:8" pos:end="47:17">(<expr pos:start="47:9" pos:end="47:16"><name pos:start="47:9" pos:end="47:16"><name pos:start="47:9" pos:end="47:11">req</name><operator pos:start="47:12" pos:end="47:13">-&gt;</operator><name pos:start="47:14" pos:end="47:16">lun</name></name></expr>)</condition> <block pos:start="47:19" pos:end="61:5">{<block_content pos:start="51:9" pos:end="59:9">

        <comment type="block" pos:start="49:9" pos:end="49:36">/* Only LUN 0 supported.  */</comment>

        <expr_stmt pos:start="51:9" pos:end="51:52"><expr pos:start="51:9" pos:end="51:51"><call pos:start="51:9" pos:end="51:51"><name pos:start="51:9" pos:end="51:15">DPRINTF</name><argument_list pos:start="51:16" pos:end="51:51">(<argument pos:start="51:17" pos:end="51:40"><expr pos:start="51:17" pos:end="51:40"><literal type="string" pos:start="51:17" pos:end="51:40">"Unimplemented LUN %d\n"</literal></expr></argument>, <argument pos:start="51:43" pos:end="51:50"><expr pos:start="51:43" pos:end="51:50"><name pos:start="51:43" pos:end="51:50"><name pos:start="51:43" pos:end="51:45">req</name><operator pos:start="51:46" pos:end="51:47">-&gt;</operator><name pos:start="51:48" pos:end="51:50">lun</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="59:9"><if pos:start="53:9" pos:end="59:9">if <condition pos:start="53:12" pos:end="53:59">(<expr pos:start="53:13" pos:end="53:58"><name pos:start="53:13" pos:end="53:19">command</name> <operator pos:start="53:21" pos:end="53:22">!=</operator> <name pos:start="53:24" pos:end="53:36">REQUEST_SENSE</name> <operator pos:start="53:38" pos:end="53:39">&amp;&amp;</operator> <name pos:start="53:41" pos:end="53:47">command</name> <operator pos:start="53:49" pos:end="53:50">!=</operator> <name pos:start="53:52" pos:end="53:58">INQUIRY</name></expr>)</condition> <block pos:start="53:61" pos:end="59:9">{<block_content pos:start="55:13" pos:end="57:21">

            <expr_stmt pos:start="55:13" pos:end="55:67"><expr pos:start="55:13" pos:end="55:66"><call pos:start="55:13" pos:end="55:66"><name pos:start="55:13" pos:end="55:32">scsi_check_condition</name><argument_list pos:start="55:33" pos:end="55:66">(<argument pos:start="55:34" pos:end="55:34"><expr pos:start="55:34" pos:end="55:34"><name pos:start="55:34" pos:end="55:34">r</name></expr></argument>, <argument pos:start="55:37" pos:end="55:65"><expr pos:start="55:37" pos:end="55:65"><call pos:start="55:37" pos:end="55:65"><name pos:start="55:37" pos:end="55:46">SENSE_CODE</name><argument_list pos:start="55:47" pos:end="55:65">(<argument pos:start="55:48" pos:end="55:64"><expr pos:start="55:48" pos:end="55:64"><name pos:start="55:48" pos:end="55:64">LUN_NOT_SUPPORTED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="57:13" pos:end="57:21">return <expr pos:start="57:20" pos:end="57:20"><literal type="number" pos:start="57:20" pos:end="57:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <switch pos:start="63:5" pos:end="287:5">switch <condition pos:start="63:12" pos:end="63:20">(<expr pos:start="63:13" pos:end="63:19"><name pos:start="63:13" pos:end="63:19">command</name></expr>)</condition> <block pos:start="63:22" pos:end="287:5">{<block_content pos:start="65:5" pos:end="285:17">

    <case pos:start="65:5" pos:end="65:25">case <expr pos:start="65:10" pos:end="65:24"><name pos:start="65:10" pos:end="65:24">TEST_UNIT_READY</name></expr>:</case>

    <case pos:start="67:5" pos:end="67:23">case <expr pos:start="67:10" pos:end="67:22"><name pos:start="67:10" pos:end="67:22">REQUEST_SENSE</name></expr>:</case>

    <case pos:start="69:5" pos:end="69:17">case <expr pos:start="69:10" pos:end="69:16"><name pos:start="69:10" pos:end="69:16">INQUIRY</name></expr>:</case>

    <case pos:start="71:5" pos:end="71:20">case <expr pos:start="71:10" pos:end="71:19"><name pos:start="71:10" pos:end="71:19">MODE_SENSE</name></expr>:</case>

    <case pos:start="73:5" pos:end="73:23">case <expr pos:start="73:10" pos:end="73:22"><name pos:start="73:10" pos:end="73:22">MODE_SENSE_10</name></expr>:</case>

    <case pos:start="75:5" pos:end="75:17">case <expr pos:start="75:10" pos:end="75:16"><name pos:start="75:10" pos:end="75:16">RESERVE</name></expr>:</case>

    <case pos:start="77:5" pos:end="77:20">case <expr pos:start="77:10" pos:end="77:19"><name pos:start="77:10" pos:end="77:19">RESERVE_10</name></expr>:</case>

    <case pos:start="79:5" pos:end="79:17">case <expr pos:start="79:10" pos:end="79:16"><name pos:start="79:10" pos:end="79:16">RELEASE</name></expr>:</case>

    <case pos:start="81:5" pos:end="81:20">case <expr pos:start="81:10" pos:end="81:19"><name pos:start="81:10" pos:end="81:19">RELEASE_10</name></expr>:</case>

    <case pos:start="83:5" pos:end="83:20">case <expr pos:start="83:10" pos:end="83:19"><name pos:start="83:10" pos:end="83:19">START_STOP</name></expr>:</case>

    <case pos:start="85:5" pos:end="85:30">case <expr pos:start="85:10" pos:end="85:29"><name pos:start="85:10" pos:end="85:29">ALLOW_MEDIUM_REMOVAL</name></expr>:</case>

    <case pos:start="87:5" pos:end="87:26">case <expr pos:start="87:10" pos:end="87:25"><name pos:start="87:10" pos:end="87:25">READ_CAPACITY_10</name></expr>:</case>

    <case pos:start="89:5" pos:end="89:27">case <expr pos:start="89:10" pos:end="89:26"><name pos:start="89:10" pos:end="89:26">SYNCHRONIZE_CACHE</name></expr>:</case>

    <case pos:start="91:5" pos:end="91:18">case <expr pos:start="91:10" pos:end="91:17"><name pos:start="91:10" pos:end="91:17">READ_TOC</name></expr>:</case>

    <case pos:start="93:5" pos:end="93:27">case <expr pos:start="93:10" pos:end="93:26"><name pos:start="93:10" pos:end="93:26">GET_CONFIGURATION</name></expr>:</case>

    <case pos:start="95:5" pos:end="95:27">case <expr pos:start="95:10" pos:end="95:26"><name pos:start="95:10" pos:end="95:26">SERVICE_ACTION_IN</name></expr>:</case>

    <case pos:start="97:5" pos:end="97:21">case <expr pos:start="97:10" pos:end="97:20"><name pos:start="97:10" pos:end="97:20">REPORT_LUNS</name></expr>:</case>

    <case pos:start="99:5" pos:end="99:19">case <expr pos:start="99:10" pos:end="99:18"><name pos:start="99:10" pos:end="99:18">VERIFY_10</name></expr>:</case>

        <expr_stmt pos:start="101:9" pos:end="101:50"><expr pos:start="101:9" pos:end="101:49"><name pos:start="101:9" pos:end="101:10">rc</name> <operator pos:start="101:12" pos:end="101:12">=</operator> <call pos:start="101:14" pos:end="101:49"><name pos:start="101:14" pos:end="101:38">scsi_disk_emulate_command</name><argument_list pos:start="101:39" pos:end="101:49">(<argument pos:start="101:40" pos:end="101:40"><expr pos:start="101:40" pos:end="101:40"><name pos:start="101:40" pos:end="101:40">r</name></expr></argument>, <argument pos:start="101:43" pos:end="101:48"><expr pos:start="101:43" pos:end="101:48"><name pos:start="101:43" pos:end="101:48">outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="103:9" pos:end="107:9"><if pos:start="103:9" pos:end="107:9">if <condition pos:start="103:12" pos:end="103:19">(<expr pos:start="103:13" pos:end="103:18"><name pos:start="103:13" pos:end="103:14">rc</name> <operator pos:start="103:16" pos:end="103:16">&lt;</operator> <literal type="number" pos:start="103:18" pos:end="103:18">0</literal></expr>)</condition> <block pos:start="103:21" pos:end="107:9">{<block_content pos:start="105:13" pos:end="105:21">

            <return pos:start="105:13" pos:end="105:21">return <expr pos:start="105:20" pos:end="105:20"><literal type="number" pos:start="105:20" pos:end="105:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="111:9" pos:end="111:28"><expr pos:start="111:9" pos:end="111:27"><name pos:start="111:9" pos:end="111:22"><name pos:start="111:9" pos:end="111:9">r</name><operator pos:start="111:10" pos:end="111:11">-&gt;</operator><name pos:start="111:12" pos:end="111:14">iov</name><operator pos:start="111:15" pos:end="111:15">.</operator><name pos:start="111:16" pos:end="111:22">iov_len</name></name> <operator pos:start="111:24" pos:end="111:24">=</operator> <name pos:start="111:26" pos:end="111:27">rc</name></expr>;</expr_stmt>

        <break pos:start="113:9" pos:end="113:14">break;</break>

    <case pos:start="115:5" pos:end="115:16">case <expr pos:start="115:10" pos:end="115:15"><name pos:start="115:10" pos:end="115:15">READ_6</name></expr>:</case>

    <case pos:start="117:5" pos:end="117:17">case <expr pos:start="117:10" pos:end="117:16"><name pos:start="117:10" pos:end="117:16">READ_10</name></expr>:</case>

    <case pos:start="119:5" pos:end="119:17">case <expr pos:start="119:10" pos:end="119:16"><name pos:start="119:10" pos:end="119:16">READ_12</name></expr>:</case>

    <case pos:start="121:5" pos:end="121:17">case <expr pos:start="121:10" pos:end="121:16"><name pos:start="121:10" pos:end="121:16">READ_16</name></expr>:</case>

        <expr_stmt pos:start="123:9" pos:end="123:50"><expr pos:start="123:9" pos:end="123:49"><name pos:start="123:9" pos:end="123:11">len</name> <operator pos:start="123:13" pos:end="123:13">=</operator> <name pos:start="123:15" pos:end="123:29"><name pos:start="123:15" pos:end="123:15">r</name><operator pos:start="123:16" pos:end="123:17">-&gt;</operator><name pos:start="123:18" pos:end="123:20">req</name><operator pos:start="123:21" pos:end="123:21">.</operator><name pos:start="123:22" pos:end="123:24">cmd</name><operator pos:start="123:25" pos:end="123:25">.</operator><name pos:start="123:26" pos:end="123:29">xfer</name></name> <operator pos:start="123:31" pos:end="123:31">/</operator> <name pos:start="123:33" pos:end="123:49"><name pos:start="123:33" pos:end="123:33">s</name><operator pos:start="123:34" pos:end="123:35">-&gt;</operator><name pos:start="123:36" pos:end="123:39">qdev</name><operator pos:start="123:40" pos:end="123:40">.</operator><name pos:start="123:41" pos:end="123:49">blocksize</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:78"><expr pos:start="125:9" pos:end="125:77"><call pos:start="125:9" pos:end="125:77"><name pos:start="125:9" pos:end="125:15">DPRINTF</name><argument_list pos:start="125:16" pos:end="125:77">(<argument pos:start="125:17" pos:end="125:55"><expr pos:start="125:17" pos:end="125:55"><literal type="string" pos:start="125:17" pos:end="125:32">"Read (sector %"</literal> <name pos:start="125:34" pos:end="125:39">PRId64</name> <literal type="string" pos:start="125:41" pos:end="125:55">", count %d)\n"</literal></expr></argument>, <argument pos:start="125:58" pos:end="125:71"><expr pos:start="125:58" pos:end="125:71"><name pos:start="125:58" pos:end="125:71"><name pos:start="125:58" pos:end="125:58">r</name><operator pos:start="125:59" pos:end="125:60">-&gt;</operator><name pos:start="125:61" pos:end="125:63">req</name><operator pos:start="125:64" pos:end="125:64">.</operator><name pos:start="125:65" pos:end="125:67">cmd</name><operator pos:start="125:68" pos:end="125:68">.</operator><name pos:start="125:69" pos:end="125:71">lba</name></name></expr></argument>, <argument pos:start="125:74" pos:end="125:76"><expr pos:start="125:74" pos:end="125:76"><name pos:start="125:74" pos:end="125:76">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="127:9" pos:end="129:29"><if pos:start="127:9" pos:end="129:29">if <condition pos:start="127:12" pos:end="127:40">(<expr pos:start="127:13" pos:end="127:39"><name pos:start="127:13" pos:end="127:26"><name pos:start="127:13" pos:end="127:13">r</name><operator pos:start="127:14" pos:end="127:15">-&gt;</operator><name pos:start="127:16" pos:end="127:18">req</name><operator pos:start="127:19" pos:end="127:19">.</operator><name pos:start="127:20" pos:end="127:22">cmd</name><operator pos:start="127:23" pos:end="127:23">.</operator><name pos:start="127:24" pos:end="127:26">lba</name></name> <operator pos:start="127:28" pos:end="127:28">&gt;</operator> <name pos:start="127:30" pos:end="127:39"><name pos:start="127:30" pos:end="127:30">s</name><operator pos:start="127:31" pos:end="127:32">-&gt;</operator><name pos:start="127:33" pos:end="127:39">max_lba</name></name></expr>)</condition><block type="pseudo" pos:start="129:13" pos:end="129:29"><block_content pos:start="129:13" pos:end="129:29">

            <goto pos:start="129:13" pos:end="129:29">goto <name pos:start="129:18" pos:end="129:28">illegal_lba</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:53"><expr pos:start="131:9" pos:end="131:52"><name pos:start="131:9" pos:end="131:17"><name pos:start="131:9" pos:end="131:9">r</name><operator pos:start="131:10" pos:end="131:11">-&gt;</operator><name pos:start="131:12" pos:end="131:17">sector</name></name> <operator pos:start="131:19" pos:end="131:19">=</operator> <name pos:start="131:21" pos:end="131:34"><name pos:start="131:21" pos:end="131:21">r</name><operator pos:start="131:22" pos:end="131:23">-&gt;</operator><name pos:start="131:24" pos:end="131:26">req</name><operator pos:start="131:27" pos:end="131:27">.</operator><name pos:start="131:28" pos:end="131:30">cmd</name><operator pos:start="131:31" pos:end="131:31">.</operator><name pos:start="131:32" pos:end="131:34">lba</name></name> <operator pos:start="131:36" pos:end="131:36">*</operator> <name pos:start="131:38" pos:end="131:52"><name pos:start="131:38" pos:end="131:38">s</name><operator pos:start="131:39" pos:end="131:40">-&gt;</operator><name pos:start="131:41" pos:end="131:52">cluster_size</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:48"><expr pos:start="133:9" pos:end="133:47"><name pos:start="133:9" pos:end="133:23"><name pos:start="133:9" pos:end="133:9">r</name><operator pos:start="133:10" pos:end="133:11">-&gt;</operator><name pos:start="133:12" pos:end="133:23">sector_count</name></name> <operator pos:start="133:25" pos:end="133:25">=</operator> <name pos:start="133:27" pos:end="133:29">len</name> <operator pos:start="133:31" pos:end="133:31">*</operator> <name pos:start="133:33" pos:end="133:47"><name pos:start="133:33" pos:end="133:33">s</name><operator pos:start="133:34" pos:end="133:35">-&gt;</operator><name pos:start="133:36" pos:end="133:47">cluster_size</name></name></expr>;</expr_stmt>

        <break pos:start="135:9" pos:end="135:14">break;</break>

    <case pos:start="137:5" pos:end="137:17">case <expr pos:start="137:10" pos:end="137:16"><name pos:start="137:10" pos:end="137:16">WRITE_6</name></expr>:</case>

    <case pos:start="139:5" pos:end="139:18">case <expr pos:start="139:10" pos:end="139:17"><name pos:start="139:10" pos:end="139:17">WRITE_10</name></expr>:</case>

    <case pos:start="141:5" pos:end="141:18">case <expr pos:start="141:10" pos:end="141:17"><name pos:start="141:10" pos:end="141:17">WRITE_12</name></expr>:</case>

    <case pos:start="143:5" pos:end="143:18">case <expr pos:start="143:10" pos:end="143:17"><name pos:start="143:10" pos:end="143:17">WRITE_16</name></expr>:</case>

    <case pos:start="145:5" pos:end="145:25">case <expr pos:start="145:10" pos:end="145:24"><name pos:start="145:10" pos:end="145:24">WRITE_VERIFY_10</name></expr>:</case>

    <case pos:start="147:5" pos:end="147:25">case <expr pos:start="147:10" pos:end="147:24"><name pos:start="147:10" pos:end="147:24">WRITE_VERIFY_12</name></expr>:</case>

    <case pos:start="149:5" pos:end="149:25">case <expr pos:start="149:10" pos:end="149:24"><name pos:start="149:10" pos:end="149:24">WRITE_VERIFY_16</name></expr>:</case>

        <expr_stmt pos:start="151:9" pos:end="151:50"><expr pos:start="151:9" pos:end="151:49"><name pos:start="151:9" pos:end="151:11">len</name> <operator pos:start="151:13" pos:end="151:13">=</operator> <name pos:start="151:15" pos:end="151:29"><name pos:start="151:15" pos:end="151:15">r</name><operator pos:start="151:16" pos:end="151:17">-&gt;</operator><name pos:start="151:18" pos:end="151:20">req</name><operator pos:start="151:21" pos:end="151:21">.</operator><name pos:start="151:22" pos:end="151:24">cmd</name><operator pos:start="151:25" pos:end="151:25">.</operator><name pos:start="151:26" pos:end="151:29">xfer</name></name> <operator pos:start="151:31" pos:end="151:31">/</operator> <name pos:start="151:33" pos:end="151:49"><name pos:start="151:33" pos:end="151:33">s</name><operator pos:start="151:34" pos:end="151:35">-&gt;</operator><name pos:start="151:36" pos:end="151:39">qdev</name><operator pos:start="151:40" pos:end="151:40">.</operator><name pos:start="151:41" pos:end="151:49">blocksize</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="157:37"><expr pos:start="153:9" pos:end="157:36"><call pos:start="153:9" pos:end="157:36"><name pos:start="153:9" pos:end="153:15">DPRINTF</name><argument_list pos:start="153:16" pos:end="157:36">(<argument pos:start="153:17" pos:end="153:58"><expr pos:start="153:17" pos:end="153:58"><literal type="string" pos:start="153:17" pos:end="153:35">"Write %s(sector %"</literal> <name pos:start="153:37" pos:end="153:42">PRId64</name> <literal type="string" pos:start="153:44" pos:end="153:58">", count %d)\n"</literal></expr></argument>,

                <argument pos:start="155:17" pos:end="155:59"><expr pos:start="155:17" pos:end="155:59"><ternary pos:start="155:17" pos:end="155:59"><condition pos:start="155:17" pos:end="155:40"><expr pos:start="155:17" pos:end="155:38"><operator pos:start="155:17" pos:end="155:17">(</operator><name pos:start="155:18" pos:end="155:24">command</name> <operator pos:start="155:26" pos:end="155:26">&amp;</operator> <literal type="number" pos:start="155:28" pos:end="155:30">0xe</literal><operator pos:start="155:31" pos:end="155:31">)</operator> <operator pos:start="155:33" pos:end="155:34">==</operator> <literal type="number" pos:start="155:36" pos:end="155:38">0xe</literal></expr> ?</condition><then pos:start="155:42" pos:end="155:54"> <expr pos:start="155:42" pos:end="155:54"><literal type="string" pos:start="155:42" pos:end="155:54">"And Verify "</literal></expr> </then><else pos:start="155:56" pos:end="155:59">: <expr pos:start="155:58" pos:end="155:59"><literal type="string" pos:start="155:58" pos:end="155:59">""</literal></expr></else></ternary></expr></argument>,

                <argument pos:start="157:17" pos:end="157:30"><expr pos:start="157:17" pos:end="157:30"><name pos:start="157:17" pos:end="157:30"><name pos:start="157:17" pos:end="157:17">r</name><operator pos:start="157:18" pos:end="157:19">-&gt;</operator><name pos:start="157:20" pos:end="157:22">req</name><operator pos:start="157:23" pos:end="157:23">.</operator><name pos:start="157:24" pos:end="157:26">cmd</name><operator pos:start="157:27" pos:end="157:27">.</operator><name pos:start="157:28" pos:end="157:30">lba</name></name></expr></argument>, <argument pos:start="157:33" pos:end="157:35"><expr pos:start="157:33" pos:end="157:35"><name pos:start="157:33" pos:end="157:35">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="159:9" pos:end="161:29"><if pos:start="159:9" pos:end="161:29">if <condition pos:start="159:12" pos:end="159:40">(<expr pos:start="159:13" pos:end="159:39"><name pos:start="159:13" pos:end="159:26"><name pos:start="159:13" pos:end="159:13">r</name><operator pos:start="159:14" pos:end="159:15">-&gt;</operator><name pos:start="159:16" pos:end="159:18">req</name><operator pos:start="159:19" pos:end="159:19">.</operator><name pos:start="159:20" pos:end="159:22">cmd</name><operator pos:start="159:23" pos:end="159:23">.</operator><name pos:start="159:24" pos:end="159:26">lba</name></name> <operator pos:start="159:28" pos:end="159:28">&gt;</operator> <name pos:start="159:30" pos:end="159:39"><name pos:start="159:30" pos:end="159:30">s</name><operator pos:start="159:31" pos:end="159:32">-&gt;</operator><name pos:start="159:33" pos:end="159:39">max_lba</name></name></expr>)</condition><block type="pseudo" pos:start="161:13" pos:end="161:29"><block_content pos:start="161:13" pos:end="161:29">

            <goto pos:start="161:13" pos:end="161:29">goto <name pos:start="161:18" pos:end="161:28">illegal_lba</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:53"><expr pos:start="163:9" pos:end="163:52"><name pos:start="163:9" pos:end="163:17"><name pos:start="163:9" pos:end="163:9">r</name><operator pos:start="163:10" pos:end="163:11">-&gt;</operator><name pos:start="163:12" pos:end="163:17">sector</name></name> <operator pos:start="163:19" pos:end="163:19">=</operator> <name pos:start="163:21" pos:end="163:34"><name pos:start="163:21" pos:end="163:21">r</name><operator pos:start="163:22" pos:end="163:23">-&gt;</operator><name pos:start="163:24" pos:end="163:26">req</name><operator pos:start="163:27" pos:end="163:27">.</operator><name pos:start="163:28" pos:end="163:30">cmd</name><operator pos:start="163:31" pos:end="163:31">.</operator><name pos:start="163:32" pos:end="163:34">lba</name></name> <operator pos:start="163:36" pos:end="163:36">*</operator> <name pos:start="163:38" pos:end="163:52"><name pos:start="163:38" pos:end="163:38">s</name><operator pos:start="163:39" pos:end="163:40">-&gt;</operator><name pos:start="163:41" pos:end="163:52">cluster_size</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:48"><expr pos:start="165:9" pos:end="165:47"><name pos:start="165:9" pos:end="165:23"><name pos:start="165:9" pos:end="165:9">r</name><operator pos:start="165:10" pos:end="165:11">-&gt;</operator><name pos:start="165:12" pos:end="165:23">sector_count</name></name> <operator pos:start="165:25" pos:end="165:25">=</operator> <name pos:start="165:27" pos:end="165:29">len</name> <operator pos:start="165:31" pos:end="165:31">*</operator> <name pos:start="165:33" pos:end="165:47"><name pos:start="165:33" pos:end="165:33">s</name><operator pos:start="165:34" pos:end="165:35">-&gt;</operator><name pos:start="165:36" pos:end="165:47">cluster_size</name></name></expr>;</expr_stmt>

        <break pos:start="167:9" pos:end="167:14">break;</break>

    <case pos:start="169:5" pos:end="169:21">case <expr pos:start="169:10" pos:end="169:20"><name pos:start="169:10" pos:end="169:20">MODE_SELECT</name></expr>:</case>

        <expr_stmt pos:start="171:9" pos:end="171:69"><expr pos:start="171:9" pos:end="171:68"><call pos:start="171:9" pos:end="171:68"><name pos:start="171:9" pos:end="171:15">DPRINTF</name><argument_list pos:start="171:16" pos:end="171:68">(<argument pos:start="171:17" pos:end="171:44"><expr pos:start="171:17" pos:end="171:44"><literal type="string" pos:start="171:17" pos:end="171:44">"Mode Select(6) (len %lu)\n"</literal></expr></argument>, <argument pos:start="171:47" pos:end="171:67"><expr pos:start="171:47" pos:end="171:67"><operator pos:start="171:47" pos:end="171:47">(</operator><name pos:start="171:48" pos:end="171:51">long</name><operator pos:start="171:52" pos:end="171:52">)</operator><name pos:start="171:53" pos:end="171:67"><name pos:start="171:53" pos:end="171:53">r</name><operator pos:start="171:54" pos:end="171:55">-&gt;</operator><name pos:start="171:56" pos:end="171:58">req</name><operator pos:start="171:59" pos:end="171:59">.</operator><name pos:start="171:60" pos:end="171:62">cmd</name><operator pos:start="171:63" pos:end="171:63">.</operator><name pos:start="171:64" pos:end="171:67">xfer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="173:9" pos:end="175:71">/* We don't support mode parameter changes.

           Allow the mode parameter header + block descriptors only. */</comment>

        <if_stmt pos:start="177:9" pos:end="181:9"><if pos:start="177:9" pos:end="181:9">if <condition pos:start="177:12" pos:end="177:33">(<expr pos:start="177:13" pos:end="177:32"><name pos:start="177:13" pos:end="177:27"><name pos:start="177:13" pos:end="177:13">r</name><operator pos:start="177:14" pos:end="177:15">-&gt;</operator><name pos:start="177:16" pos:end="177:18">req</name><operator pos:start="177:19" pos:end="177:19">.</operator><name pos:start="177:20" pos:end="177:22">cmd</name><operator pos:start="177:23" pos:end="177:23">.</operator><name pos:start="177:24" pos:end="177:27">xfer</name></name> <operator pos:start="177:29" pos:end="177:29">&gt;</operator> <literal type="number" pos:start="177:31" pos:end="177:32">12</literal></expr>)</condition> <block pos:start="177:35" pos:end="181:9">{<block_content pos:start="179:13" pos:end="179:22">

            <goto pos:start="179:13" pos:end="179:22">goto <name pos:start="179:18" pos:end="179:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="183:9" pos:end="183:14">break;</break>

    <case pos:start="185:5" pos:end="185:24">case <expr pos:start="185:10" pos:end="185:23"><name pos:start="185:10" pos:end="185:23">MODE_SELECT_10</name></expr>:</case>

        <expr_stmt pos:start="187:9" pos:end="187:70"><expr pos:start="187:9" pos:end="187:69"><call pos:start="187:9" pos:end="187:69"><name pos:start="187:9" pos:end="187:15">DPRINTF</name><argument_list pos:start="187:16" pos:end="187:69">(<argument pos:start="187:17" pos:end="187:45"><expr pos:start="187:17" pos:end="187:45"><literal type="string" pos:start="187:17" pos:end="187:45">"Mode Select(10) (len %lu)\n"</literal></expr></argument>, <argument pos:start="187:48" pos:end="187:68"><expr pos:start="187:48" pos:end="187:68"><operator pos:start="187:48" pos:end="187:48">(</operator><name pos:start="187:49" pos:end="187:52">long</name><operator pos:start="187:53" pos:end="187:53">)</operator><name pos:start="187:54" pos:end="187:68"><name pos:start="187:54" pos:end="187:54">r</name><operator pos:start="187:55" pos:end="187:56">-&gt;</operator><name pos:start="187:57" pos:end="187:59">req</name><operator pos:start="187:60" pos:end="187:60">.</operator><name pos:start="187:61" pos:end="187:63">cmd</name><operator pos:start="187:64" pos:end="187:64">.</operator><name pos:start="187:65" pos:end="187:68">xfer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="189:9" pos:end="191:71">/* We don't support mode parameter changes.

           Allow the mode parameter header + block descriptors only. */</comment>

        <if_stmt pos:start="193:9" pos:end="197:9"><if pos:start="193:9" pos:end="197:9">if <condition pos:start="193:12" pos:end="193:33">(<expr pos:start="193:13" pos:end="193:32"><name pos:start="193:13" pos:end="193:27"><name pos:start="193:13" pos:end="193:13">r</name><operator pos:start="193:14" pos:end="193:15">-&gt;</operator><name pos:start="193:16" pos:end="193:18">req</name><operator pos:start="193:19" pos:end="193:19">.</operator><name pos:start="193:20" pos:end="193:22">cmd</name><operator pos:start="193:23" pos:end="193:23">.</operator><name pos:start="193:24" pos:end="193:27">xfer</name></name> <operator pos:start="193:29" pos:end="193:29">&gt;</operator> <literal type="number" pos:start="193:31" pos:end="193:32">16</literal></expr>)</condition> <block pos:start="193:35" pos:end="197:9">{<block_content pos:start="195:13" pos:end="195:22">

            <goto pos:start="195:13" pos:end="195:22">goto <name pos:start="195:18" pos:end="195:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="199:9" pos:end="199:14">break;</break>

    <case pos:start="201:5" pos:end="201:16">case <expr pos:start="201:10" pos:end="201:15"><name pos:start="201:10" pos:end="201:15">SEEK_6</name></expr>:</case>

    <case pos:start="203:5" pos:end="203:17">case <expr pos:start="203:10" pos:end="203:16"><name pos:start="203:10" pos:end="203:16">SEEK_10</name></expr>:</case>

        <expr_stmt pos:start="205:9" pos:end="207:32"><expr pos:start="205:9" pos:end="207:31"><call pos:start="205:9" pos:end="207:31"><name pos:start="205:9" pos:end="205:15">DPRINTF</name><argument_list pos:start="205:16" pos:end="207:31">(<argument pos:start="205:17" pos:end="205:49"><expr pos:start="205:17" pos:end="205:49"><literal type="string" pos:start="205:17" pos:end="205:36">"Seek(%d) (sector %"</literal> <name pos:start="205:38" pos:end="205:43">PRId64</name> <literal type="string" pos:start="205:45" pos:end="205:49">")\n"</literal></expr></argument>, <argument pos:start="205:52" pos:end="205:77"><expr pos:start="205:52" pos:end="205:77"><ternary pos:start="205:52" pos:end="205:77"><condition pos:start="205:52" pos:end="205:70"><expr pos:start="205:52" pos:end="205:68"><name pos:start="205:52" pos:end="205:58">command</name> <operator pos:start="205:60" pos:end="205:61">==</operator> <name pos:start="205:63" pos:end="205:68">SEEK_6</name></expr> ?</condition><then pos:start="205:72" pos:end="205:72"> <expr pos:start="205:72" pos:end="205:72"><literal type="number" pos:start="205:72" pos:end="205:72">6</literal></expr> </then><else pos:start="205:74" pos:end="205:77">: <expr pos:start="205:76" pos:end="205:77"><literal type="number" pos:start="205:76" pos:end="205:77">10</literal></expr></else></ternary></expr></argument>,

                <argument pos:start="207:17" pos:end="207:30"><expr pos:start="207:17" pos:end="207:30"><name pos:start="207:17" pos:end="207:30"><name pos:start="207:17" pos:end="207:17">r</name><operator pos:start="207:18" pos:end="207:19">-&gt;</operator><name pos:start="207:20" pos:end="207:22">req</name><operator pos:start="207:23" pos:end="207:23">.</operator><name pos:start="207:24" pos:end="207:26">cmd</name><operator pos:start="207:27" pos:end="207:27">.</operator><name pos:start="207:28" pos:end="207:30">lba</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="209:9" pos:end="213:9"><if pos:start="209:9" pos:end="213:9">if <condition pos:start="209:12" pos:end="209:40">(<expr pos:start="209:13" pos:end="209:39"><name pos:start="209:13" pos:end="209:26"><name pos:start="209:13" pos:end="209:13">r</name><operator pos:start="209:14" pos:end="209:15">-&gt;</operator><name pos:start="209:16" pos:end="209:18">req</name><operator pos:start="209:19" pos:end="209:19">.</operator><name pos:start="209:20" pos:end="209:22">cmd</name><operator pos:start="209:23" pos:end="209:23">.</operator><name pos:start="209:24" pos:end="209:26">lba</name></name> <operator pos:start="209:28" pos:end="209:28">&gt;</operator> <name pos:start="209:30" pos:end="209:39"><name pos:start="209:30" pos:end="209:30">s</name><operator pos:start="209:31" pos:end="209:32">-&gt;</operator><name pos:start="209:33" pos:end="209:39">max_lba</name></name></expr>)</condition> <block pos:start="209:42" pos:end="213:9">{<block_content pos:start="211:13" pos:end="211:29">

            <goto pos:start="211:13" pos:end="211:29">goto <name pos:start="211:18" pos:end="211:28">illegal_lba</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="215:9" pos:end="215:14">break;</break>

    <case pos:start="217:5" pos:end="217:23">case <expr pos:start="217:10" pos:end="217:22"><name pos:start="217:10" pos:end="217:22">WRITE_SAME_16</name></expr>:</case>

        <expr_stmt pos:start="219:9" pos:end="219:50"><expr pos:start="219:9" pos:end="219:49"><name pos:start="219:9" pos:end="219:11">len</name> <operator pos:start="219:13" pos:end="219:13">=</operator> <name pos:start="219:15" pos:end="219:29"><name pos:start="219:15" pos:end="219:15">r</name><operator pos:start="219:16" pos:end="219:17">-&gt;</operator><name pos:start="219:18" pos:end="219:20">req</name><operator pos:start="219:21" pos:end="219:21">.</operator><name pos:start="219:22" pos:end="219:24">cmd</name><operator pos:start="219:25" pos:end="219:25">.</operator><name pos:start="219:26" pos:end="219:29">xfer</name></name> <operator pos:start="219:31" pos:end="219:31">/</operator> <name pos:start="219:33" pos:end="219:49"><name pos:start="219:33" pos:end="219:33">s</name><operator pos:start="219:34" pos:end="219:35">-&gt;</operator><name pos:start="219:36" pos:end="219:39">qdev</name><operator pos:start="219:40" pos:end="219:40">.</operator><name pos:start="219:41" pos:end="219:49">blocksize</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="223:9" pos:end="225:37"><expr pos:start="223:9" pos:end="225:36"><call pos:start="223:9" pos:end="225:36"><name pos:start="223:9" pos:end="223:15">DPRINTF</name><argument_list pos:start="223:16" pos:end="225:36">(<argument pos:start="223:17" pos:end="223:65"><expr pos:start="223:17" pos:end="223:65"><literal type="string" pos:start="223:17" pos:end="223:42">"WRITE SAME(16) (sector %"</literal> <name pos:start="223:44" pos:end="223:49">PRId64</name> <literal type="string" pos:start="223:51" pos:end="223:65">", count %d)\n"</literal></expr></argument>,

                <argument pos:start="225:17" pos:end="225:30"><expr pos:start="225:17" pos:end="225:30"><name pos:start="225:17" pos:end="225:30"><name pos:start="225:17" pos:end="225:17">r</name><operator pos:start="225:18" pos:end="225:19">-&gt;</operator><name pos:start="225:20" pos:end="225:22">req</name><operator pos:start="225:23" pos:end="225:23">.</operator><name pos:start="225:24" pos:end="225:26">cmd</name><operator pos:start="225:27" pos:end="225:27">.</operator><name pos:start="225:28" pos:end="225:30">lba</name></name></expr></argument>, <argument pos:start="225:33" pos:end="225:35"><expr pos:start="225:33" pos:end="225:35"><name pos:start="225:33" pos:end="225:35">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="229:9" pos:end="233:9"><if pos:start="229:9" pos:end="233:9">if <condition pos:start="229:12" pos:end="229:40">(<expr pos:start="229:13" pos:end="229:39"><name pos:start="229:13" pos:end="229:26"><name pos:start="229:13" pos:end="229:13">r</name><operator pos:start="229:14" pos:end="229:15">-&gt;</operator><name pos:start="229:16" pos:end="229:18">req</name><operator pos:start="229:19" pos:end="229:19">.</operator><name pos:start="229:20" pos:end="229:22">cmd</name><operator pos:start="229:23" pos:end="229:23">.</operator><name pos:start="229:24" pos:end="229:26">lba</name></name> <operator pos:start="229:28" pos:end="229:28">&gt;</operator> <name pos:start="229:30" pos:end="229:39"><name pos:start="229:30" pos:end="229:30">s</name><operator pos:start="229:31" pos:end="229:32">-&gt;</operator><name pos:start="229:33" pos:end="229:39">max_lba</name></name></expr>)</condition> <block pos:start="229:42" pos:end="233:9">{<block_content pos:start="231:13" pos:end="231:29">

            <goto pos:start="231:13" pos:end="231:29">goto <name pos:start="231:18" pos:end="231:28">illegal_lba</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="237:9" pos:end="241:11">/*

         * We only support WRITE SAME with the unmap bit set for now.

         */</comment>

        <if_stmt pos:start="243:9" pos:end="247:9"><if pos:start="243:9" pos:end="247:9">if <condition pos:start="243:12" pos:end="243:28">(<expr pos:start="243:13" pos:end="243:27"><operator pos:start="243:13" pos:end="243:13">!</operator><operator pos:start="243:14" pos:end="243:14">(</operator><name pos:start="243:15" pos:end="243:20"><name pos:start="243:15" pos:end="243:17">buf</name><index pos:start="243:18" pos:end="243:20">[<expr pos:start="243:19" pos:end="243:19"><literal type="number" pos:start="243:19" pos:end="243:19">1</literal></expr>]</index></name> <operator pos:start="243:22" pos:end="243:22">&amp;</operator> <literal type="number" pos:start="243:24" pos:end="243:26">0x8</literal><operator pos:start="243:27" pos:end="243:27">)</operator></expr>)</condition> <block pos:start="243:30" pos:end="247:9">{<block_content pos:start="245:13" pos:end="245:22">

            <goto pos:start="245:13" pos:end="245:22">goto <name pos:start="245:18" pos:end="245:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="251:9" pos:end="253:49"><expr pos:start="251:9" pos:end="253:48"><name pos:start="251:9" pos:end="251:10">rc</name> <operator pos:start="251:12" pos:end="251:12">=</operator> <call pos:start="251:14" pos:end="253:48"><name pos:start="251:14" pos:end="251:25">bdrv_discard</name><argument_list pos:start="251:26" pos:end="253:48">(<argument pos:start="251:27" pos:end="251:31"><expr pos:start="251:27" pos:end="251:31"><name pos:start="251:27" pos:end="251:31"><name pos:start="251:27" pos:end="251:27">s</name><operator pos:start="251:28" pos:end="251:29">-&gt;</operator><name pos:start="251:30" pos:end="251:31">bs</name></name></expr></argument>, <argument pos:start="251:34" pos:end="251:65"><expr pos:start="251:34" pos:end="251:65"><name pos:start="251:34" pos:end="251:47"><name pos:start="251:34" pos:end="251:34">r</name><operator pos:start="251:35" pos:end="251:36">-&gt;</operator><name pos:start="251:37" pos:end="251:39">req</name><operator pos:start="251:40" pos:end="251:40">.</operator><name pos:start="251:41" pos:end="251:43">cmd</name><operator pos:start="251:44" pos:end="251:44">.</operator><name pos:start="251:45" pos:end="251:47">lba</name></name> <operator pos:start="251:49" pos:end="251:49">*</operator> <name pos:start="251:51" pos:end="251:65"><name pos:start="251:51" pos:end="251:51">s</name><operator pos:start="251:52" pos:end="251:53">-&gt;</operator><name pos:start="251:54" pos:end="251:65">cluster_size</name></name></expr></argument>,

                          <argument pos:start="253:27" pos:end="253:47"><expr pos:start="253:27" pos:end="253:47"><name pos:start="253:27" pos:end="253:29">len</name> <operator pos:start="253:31" pos:end="253:31">*</operator> <name pos:start="253:33" pos:end="253:47"><name pos:start="253:33" pos:end="253:33">s</name><operator pos:start="253:34" pos:end="253:35">-&gt;</operator><name pos:start="253:36" pos:end="253:47">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="255:9" pos:end="261:9"><if pos:start="255:9" pos:end="261:9">if <condition pos:start="255:12" pos:end="255:19">(<expr pos:start="255:13" pos:end="255:18"><name pos:start="255:13" pos:end="255:14">rc</name> <operator pos:start="255:16" pos:end="255:16">&lt;</operator> <literal type="number" pos:start="255:18" pos:end="255:18">0</literal></expr>)</condition> <block pos:start="255:21" pos:end="261:9">{<block_content pos:start="259:13" pos:end="259:22">

            <comment type="block" pos:start="257:13" pos:end="257:41">/* XXX: better error code ?*/</comment>

            <goto pos:start="259:13" pos:end="259:22">goto <name pos:start="259:18" pos:end="259:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <break pos:start="265:9" pos:end="265:14">break;</break>

    <default pos:start="267:5" pos:end="267:12">default:</default>

        <expr_stmt pos:start="269:9" pos:end="269:58"><expr pos:start="269:9" pos:end="269:57"><call pos:start="269:9" pos:end="269:57"><name pos:start="269:9" pos:end="269:15">DPRINTF</name><argument_list pos:start="269:16" pos:end="269:57">(<argument pos:start="269:17" pos:end="269:48"><expr pos:start="269:17" pos:end="269:48"><literal type="string" pos:start="269:17" pos:end="269:48">"Unknown SCSI command (%2.2x)\n"</literal></expr></argument>, <argument pos:start="269:51" pos:end="269:56"><expr pos:start="269:51" pos:end="269:56"><name pos:start="269:51" pos:end="269:56"><name pos:start="269:51" pos:end="269:53">buf</name><index pos:start="269:54" pos:end="269:56">[<expr pos:start="269:55" pos:end="269:55"><literal type="number" pos:start="269:55" pos:end="269:55">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="271:9" pos:end="271:60"><expr pos:start="271:9" pos:end="271:59"><call pos:start="271:9" pos:end="271:59"><name pos:start="271:9" pos:end="271:28">scsi_check_condition</name><argument_list pos:start="271:29" pos:end="271:59">(<argument pos:start="271:30" pos:end="271:30"><expr pos:start="271:30" pos:end="271:30"><name pos:start="271:30" pos:end="271:30">r</name></expr></argument>, <argument pos:start="271:33" pos:end="271:58"><expr pos:start="271:33" pos:end="271:58"><call pos:start="271:33" pos:end="271:58"><name pos:start="271:33" pos:end="271:42">SENSE_CODE</name><argument_list pos:start="271:43" pos:end="271:58">(<argument pos:start="271:44" pos:end="271:57"><expr pos:start="271:44" pos:end="271:57"><name pos:start="271:44" pos:end="271:57">INVALID_OPCODE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="273:9" pos:end="273:17">return <expr pos:start="273:16" pos:end="273:16"><literal type="number" pos:start="273:16" pos:end="273:16">0</literal></expr>;</return>

    <label pos:start="275:5" pos:end="275:9"><name pos:start="275:5" pos:end="275:8">fail</name>:</label>

        <expr_stmt pos:start="277:9" pos:end="277:59"><expr pos:start="277:9" pos:end="277:58"><call pos:start="277:9" pos:end="277:58"><name pos:start="277:9" pos:end="277:28">scsi_check_condition</name><argument_list pos:start="277:29" pos:end="277:58">(<argument pos:start="277:30" pos:end="277:30"><expr pos:start="277:30" pos:end="277:30"><name pos:start="277:30" pos:end="277:30">r</name></expr></argument>, <argument pos:start="277:33" pos:end="277:57"><expr pos:start="277:33" pos:end="277:57"><call pos:start="277:33" pos:end="277:57"><name pos:start="277:33" pos:end="277:42">SENSE_CODE</name><argument_list pos:start="277:43" pos:end="277:57">(<argument pos:start="277:44" pos:end="277:56"><expr pos:start="277:44" pos:end="277:56"><name pos:start="277:44" pos:end="277:56">INVALID_FIELD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="279:9" pos:end="279:17">return <expr pos:start="279:16" pos:end="279:16"><literal type="number" pos:start="279:16" pos:end="279:16">0</literal></expr>;</return>

    <label pos:start="281:5" pos:end="281:16"><name pos:start="281:5" pos:end="281:15">illegal_lba</name>:</label>

        <expr_stmt pos:start="283:9" pos:end="283:62"><expr pos:start="283:9" pos:end="283:61"><call pos:start="283:9" pos:end="283:61"><name pos:start="283:9" pos:end="283:28">scsi_check_condition</name><argument_list pos:start="283:29" pos:end="283:61">(<argument pos:start="283:30" pos:end="283:30"><expr pos:start="283:30" pos:end="283:30"><name pos:start="283:30" pos:end="283:30">r</name></expr></argument>, <argument pos:start="283:33" pos:end="283:60"><expr pos:start="283:33" pos:end="283:60"><call pos:start="283:33" pos:end="283:60"><name pos:start="283:33" pos:end="283:42">SENSE_CODE</name><argument_list pos:start="283:43" pos:end="283:60">(<argument pos:start="283:44" pos:end="283:59"><expr pos:start="283:44" pos:end="283:59"><name pos:start="283:44" pos:end="283:59">LBA_OUT_OF_RANGE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="285:9" pos:end="285:17">return <expr pos:start="285:16" pos:end="285:16"><literal type="number" pos:start="285:16" pos:end="285:16">0</literal></expr>;</return>

    </block_content>}</block></switch>

    <if_stmt pos:start="289:5" pos:end="293:5"><if pos:start="289:5" pos:end="293:5">if <condition pos:start="289:8" pos:end="289:52">(<expr pos:start="289:9" pos:end="289:51"><name pos:start="289:9" pos:end="289:23"><name pos:start="289:9" pos:end="289:9">r</name><operator pos:start="289:10" pos:end="289:11">-&gt;</operator><name pos:start="289:12" pos:end="289:23">sector_count</name></name> <operator pos:start="289:25" pos:end="289:26">==</operator> <literal type="number" pos:start="289:28" pos:end="289:28">0</literal> <operator pos:start="289:30" pos:end="289:31">&amp;&amp;</operator> <name pos:start="289:33" pos:end="289:46"><name pos:start="289:33" pos:end="289:33">r</name><operator pos:start="289:34" pos:end="289:35">-&gt;</operator><name pos:start="289:36" pos:end="289:38">iov</name><operator pos:start="289:39" pos:end="289:39">.</operator><name pos:start="289:40" pos:end="289:46">iov_len</name></name> <operator pos:start="289:48" pos:end="289:49">==</operator> <literal type="number" pos:start="289:51" pos:end="289:51">0</literal></expr>)</condition> <block pos:start="289:54" pos:end="293:5">{<block_content pos:start="291:9" pos:end="291:41">

        <expr_stmt pos:start="291:9" pos:end="291:41"><expr pos:start="291:9" pos:end="291:40"><call pos:start="291:9" pos:end="291:40"><name pos:start="291:9" pos:end="291:25">scsi_req_complete</name><argument_list pos:start="291:26" pos:end="291:40">(<argument pos:start="291:27" pos:end="291:33"><expr pos:start="291:27" pos:end="291:33"><operator pos:start="291:27" pos:end="291:27">&amp;</operator><name pos:start="291:28" pos:end="291:33"><name pos:start="291:28" pos:end="291:28">r</name><operator pos:start="291:29" pos:end="291:30">-&gt;</operator><name pos:start="291:31" pos:end="291:33">req</name></name></expr></argument>, <argument pos:start="291:36" pos:end="291:39"><expr pos:start="291:36" pos:end="291:39"><name pos:start="291:36" pos:end="291:39">GOOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="295:5" pos:end="295:49"><expr pos:start="295:5" pos:end="295:48"><name pos:start="295:5" pos:end="295:7">len</name> <operator pos:start="295:9" pos:end="295:9">=</operator> <name pos:start="295:11" pos:end="295:25"><name pos:start="295:11" pos:end="295:11">r</name><operator pos:start="295:12" pos:end="295:13">-&gt;</operator><name pos:start="295:14" pos:end="295:25">sector_count</name></name> <operator pos:start="295:27" pos:end="295:27">*</operator> <literal type="number" pos:start="295:29" pos:end="295:33">512</literal> <operator pos:start="295:33" pos:end="295:33">+</operator> <name pos:start="295:35" pos:end="295:48"><name pos:start="295:35" pos:end="295:35">r</name><operator pos:start="295:36" pos:end="295:37">-&gt;</operator><name pos:start="295:38" pos:end="295:40">iov</name><operator pos:start="295:41" pos:end="295:41">.</operator><name pos:start="295:42" pos:end="295:48">iov_len</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="297:5" pos:end="309:5"><if pos:start="297:5" pos:end="301:5">if <condition pos:start="297:8" pos:end="297:44">(<expr pos:start="297:9" pos:end="297:43"><name pos:start="297:9" pos:end="297:23"><name pos:start="297:9" pos:end="297:9">r</name><operator pos:start="297:10" pos:end="297:11">-&gt;</operator><name pos:start="297:12" pos:end="297:14">req</name><operator pos:start="297:15" pos:end="297:15">.</operator><name pos:start="297:16" pos:end="297:18">cmd</name><operator pos:start="297:19" pos:end="297:19">.</operator><name pos:start="297:20" pos:end="297:23">mode</name></name> <operator pos:start="297:25" pos:end="297:26">==</operator> <name pos:start="297:28" pos:end="297:43">SCSI_XFER_TO_DEV</name></expr>)</condition> <block pos:start="297:46" pos:end="301:5">{<block_content pos:start="299:9" pos:end="299:20">

        <return pos:start="299:9" pos:end="299:20">return <expr pos:start="299:16" pos:end="299:19"><operator pos:start="299:16" pos:end="299:16">-</operator><name pos:start="299:17" pos:end="299:19">len</name></expr>;</return>

    </block_content>}</block></if> <else pos:start="301:7" pos:end="309:5">else <block pos:start="301:12" pos:end="309:5">{<block_content pos:start="303:9" pos:end="307:19">

        <if_stmt pos:start="303:9" pos:end="305:33"><if pos:start="303:9" pos:end="305:33">if <condition pos:start="303:12" pos:end="303:29">(<expr pos:start="303:13" pos:end="303:28"><operator pos:start="303:13" pos:end="303:13">!</operator><name pos:start="303:14" pos:end="303:28"><name pos:start="303:14" pos:end="303:14">r</name><operator pos:start="303:15" pos:end="303:16">-&gt;</operator><name pos:start="303:17" pos:end="303:28">sector_count</name></name></expr>)</condition><block type="pseudo" pos:start="305:13" pos:end="305:33"><block_content pos:start="305:13" pos:end="305:33">

            <expr_stmt pos:start="305:13" pos:end="305:33"><expr pos:start="305:13" pos:end="305:32"><name pos:start="305:13" pos:end="305:27"><name pos:start="305:13" pos:end="305:13">r</name><operator pos:start="305:14" pos:end="305:15">-&gt;</operator><name pos:start="305:16" pos:end="305:27">sector_count</name></name> <operator pos:start="305:29" pos:end="305:29">=</operator> <operator pos:start="305:31" pos:end="305:31">-</operator><literal type="number" pos:start="305:32" pos:end="305:32">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return pos:start="307:9" pos:end="307:19">return <expr pos:start="307:16" pos:end="307:18"><name pos:start="307:16" pos:end="307:18">len</name></expr>;</return>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
