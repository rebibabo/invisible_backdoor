<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23559.c" pos:tabs="8"><function pos:start="1:1" pos:end="247:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:32">dct_unquantize_h263_altivec</name><parameter_list pos:start="1:33" pos:end="3:67">(<parameter pos:start="1:34" pos:end="1:50"><decl pos:start="1:34" pos:end="1:50"><type pos:start="1:34" pos:end="1:50"><name pos:start="1:34" pos:end="1:47">MpegEncContext</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:50">s</name></decl></parameter>, 

                                 <parameter pos:start="3:34" pos:end="3:47"><decl pos:start="3:34" pos:end="3:47"><type pos:start="3:34" pos:end="3:47"><name pos:start="3:34" pos:end="3:40">DCTELEM</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:47">block</name></decl></parameter>, <parameter pos:start="3:50" pos:end="3:54"><decl pos:start="3:50" pos:end="3:54"><type pos:start="3:50" pos:end="3:54"><name pos:start="3:50" pos:end="3:52">int</name></type> <name pos:start="3:54" pos:end="3:54">n</name></decl></parameter>, <parameter pos:start="3:57" pos:end="3:66"><decl pos:start="3:57" pos:end="3:66"><type pos:start="3:57" pos:end="3:66"><name pos:start="3:57" pos:end="3:59">int</name></type> <name pos:start="3:61" pos:end="3:66">qscale</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="247:1">{<block_content pos:start="7:1" pos:end="245:71">

<expr_stmt pos:start="7:1" pos:end="7:56"><expr pos:start="7:1" pos:end="7:55"><call pos:start="7:1" pos:end="7:55"><name pos:start="7:1" pos:end="7:19">POWERPC_TBL_DECLARE</name><argument_list pos:start="7:20" pos:end="7:55">(<argument pos:start="7:21" pos:end="7:51"><expr pos:start="7:21" pos:end="7:51"><name pos:start="7:21" pos:end="7:51">altivec_dct_unquantize_h263_num</name></expr></argument>, <argument pos:start="7:54" pos:end="7:54"><expr pos:start="7:54" pos:end="7:54"><literal type="number" pos:start="7:54" pos:end="7:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:16"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:16">level</name></decl>, <decl pos:start="9:19" pos:end="9:22"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:19" pos:end="9:22">qmul</name></decl>, <decl pos:start="9:25" pos:end="9:28"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:25" pos:end="9:28">qadd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:15">nCoeffs</name></decl>;</decl_stmt>

    

    <expr_stmt pos:start="15:5" pos:end="15:38"><expr pos:start="15:5" pos:end="15:37"><call pos:start="15:5" pos:end="15:37"><name pos:start="15:5" pos:end="15:10">assert</name><argument_list pos:start="15:11" pos:end="15:37">(<argument pos:start="15:12" pos:end="15:36"><expr pos:start="15:12" pos:end="15:36"><name pos:start="15:12" pos:end="15:33"><name pos:start="15:12" pos:end="15:12">s</name><operator pos:start="15:13" pos:end="15:14">-&gt;</operator><name pos:start="15:15" pos:end="15:30">block_last_index</name><index pos:start="15:31" pos:end="15:33">[<expr pos:start="15:32" pos:end="15:32"><name pos:start="15:32" pos:end="15:32">n</name></expr>]</index></name><operator pos:start="15:34" pos:end="15:35">&gt;=</operator><literal type="number" pos:start="15:36" pos:end="15:36">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt pos:start="19:1" pos:end="19:60"><expr pos:start="19:1" pos:end="19:59"><call pos:start="19:1" pos:end="19:59"><name pos:start="19:1" pos:end="19:23">POWERPC_TBL_START_COUNT</name><argument_list pos:start="19:24" pos:end="19:59">(<argument pos:start="19:25" pos:end="19:55"><expr pos:start="19:25" pos:end="19:55"><name pos:start="19:25" pos:end="19:55">altivec_dct_unquantize_h263_num</name></expr></argument>, <argument pos:start="19:58" pos:end="19:58"><expr pos:start="19:58" pos:end="19:58"><literal type="number" pos:start="19:58" pos:end="19:58">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    

    <expr_stmt pos:start="23:5" pos:end="23:28"><expr pos:start="23:5" pos:end="23:27"><name pos:start="23:5" pos:end="23:8">qadd</name> <operator pos:start="23:10" pos:end="23:10">=</operator> <operator pos:start="23:12" pos:end="23:12">(</operator><name pos:start="23:13" pos:end="23:18">qscale</name> <operator pos:start="23:20" pos:end="23:20">-</operator> <literal type="number" pos:start="23:22" pos:end="23:22">1</literal><operator pos:start="23:23" pos:end="23:23">)</operator> <operator pos:start="23:25" pos:end="23:25">|</operator> <literal type="number" pos:start="23:27" pos:end="23:27">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:23"><expr pos:start="25:5" pos:end="25:22"><name pos:start="25:5" pos:end="25:8">qmul</name> <operator pos:start="25:10" pos:end="25:10">=</operator> <name pos:start="25:12" pos:end="25:17">qscale</name> <operator pos:start="25:19" pos:end="25:20">&lt;&lt;</operator> <literal type="number" pos:start="25:22" pos:end="25:22">1</literal></expr>;</expr_stmt>

    

    <if_stmt pos:start="29:5" pos:end="60:0"><if pos:start="29:5" pos:end="49:5">if <condition pos:start="29:8" pos:end="29:20">(<expr pos:start="29:9" pos:end="29:19"><name pos:start="29:9" pos:end="29:19"><name pos:start="29:9" pos:end="29:9">s</name><operator pos:start="29:10" pos:end="29:11">-&gt;</operator><name pos:start="29:12" pos:end="29:19">mb_intra</name></name></expr>)</condition> <block pos:start="29:22" pos:end="49:5">{<block_content pos:start="31:9" pos:end="47:20">

        <if_stmt pos:start="31:9" pos:end="43:21"><if pos:start="31:9" pos:end="41:9">if <condition pos:start="31:12" pos:end="31:25">(<expr pos:start="31:13" pos:end="31:24"><operator pos:start="31:13" pos:end="31:13">!</operator><name pos:start="31:14" pos:end="31:24"><name pos:start="31:14" pos:end="31:14">s</name><operator pos:start="31:15" pos:end="31:16">-&gt;</operator><name pos:start="31:17" pos:end="31:24">h263_aic</name></name></expr>)</condition> <block pos:start="31:27" pos:end="41:9">{<block_content pos:start="33:13" pos:end="39:52">

            <if_stmt pos:start="33:13" pos:end="39:52"><if pos:start="33:13" pos:end="35:52">if <condition pos:start="33:16" pos:end="33:22">(<expr pos:start="33:17" pos:end="33:21"><name pos:start="33:17" pos:end="33:17">n</name> <operator pos:start="33:19" pos:end="33:19">&lt;</operator> <literal type="number" pos:start="33:21" pos:end="33:21">4</literal></expr>)</condition><block type="pseudo" pos:start="35:17" pos:end="35:52"><block_content pos:start="35:17" pos:end="35:52"> 

                <expr_stmt pos:start="35:17" pos:end="35:52"><expr pos:start="35:17" pos:end="35:51"><name pos:start="35:17" pos:end="35:24"><name pos:start="35:17" pos:end="35:21">block</name><index pos:start="35:22" pos:end="35:24">[<expr pos:start="35:23" pos:end="35:23"><literal type="number" pos:start="35:23" pos:end="35:23">0</literal></expr>]</index></name> <operator pos:start="35:26" pos:end="35:26">=</operator> <name pos:start="35:28" pos:end="35:35"><name pos:start="35:28" pos:end="35:32">block</name><index pos:start="35:33" pos:end="35:35">[<expr pos:start="35:34" pos:end="35:34"><literal type="number" pos:start="35:34" pos:end="35:34">0</literal></expr>]</index></name> <operator pos:start="35:37" pos:end="35:37">*</operator> <name pos:start="35:39" pos:end="35:51"><name pos:start="35:39" pos:end="35:39">s</name><operator pos:start="35:40" pos:end="35:41">-&gt;</operator><name pos:start="35:42" pos:end="35:51">y_dc_scale</name></name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="37:13" pos:end="39:52">else<block type="pseudo" pos:start="39:17" pos:end="39:52"><block_content pos:start="39:17" pos:end="39:52">

                <expr_stmt pos:start="39:17" pos:end="39:52"><expr pos:start="39:17" pos:end="39:51"><name pos:start="39:17" pos:end="39:24"><name pos:start="39:17" pos:end="39:21">block</name><index pos:start="39:22" pos:end="39:24">[<expr pos:start="39:23" pos:end="39:23"><literal type="number" pos:start="39:23" pos:end="39:23">0</literal></expr>]</index></name> <operator pos:start="39:26" pos:end="39:26">=</operator> <name pos:start="39:28" pos:end="39:35"><name pos:start="39:28" pos:end="39:32">block</name><index pos:start="39:33" pos:end="39:35">[<expr pos:start="39:34" pos:end="39:34"><literal type="number" pos:start="39:34" pos:end="39:34">0</literal></expr>]</index></name> <operator pos:start="39:37" pos:end="39:37">*</operator> <name pos:start="39:39" pos:end="39:51"><name pos:start="39:39" pos:end="39:39">s</name><operator pos:start="39:40" pos:end="39:41">-&gt;</operator><name pos:start="39:42" pos:end="39:51">c_dc_scale</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if><else pos:start="41:10" pos:end="43:21">else<block type="pseudo" pos:start="43:13" pos:end="43:21"><block_content pos:start="43:13" pos:end="43:21">

            <expr_stmt pos:start="43:13" pos:end="43:21"><expr pos:start="43:13" pos:end="43:20"><name pos:start="43:13" pos:end="43:16">qadd</name> <operator pos:start="43:18" pos:end="43:18">=</operator> <literal type="number" pos:start="43:20" pos:end="43:20">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:14"><expr pos:start="45:9" pos:end="45:13"><name pos:start="45:9" pos:end="45:9">i</name> <operator pos:start="45:11" pos:end="45:11">=</operator> <literal type="number" pos:start="45:13" pos:end="45:13">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:20"><expr pos:start="47:9" pos:end="47:19"><name pos:start="47:9" pos:end="47:15">nCoeffs</name><operator pos:start="47:16" pos:end="47:16">=</operator> <literal type="number" pos:start="47:18" pos:end="47:19">63</literal></expr>;</expr_stmt> <comment type="line" pos:start="47:22" pos:end="47:57">//does not allways use zigzag table </comment>

    </block_content>}</block></if> <else pos:start="49:7" pos:end="60:0">else <block pos:start="49:12" pos:end="60:0">{<block_content pos:start="51:9" pos:end="53:73">

        <expr_stmt pos:start="51:9" pos:end="51:14"><expr pos:start="51:9" pos:end="51:13"><name pos:start="51:9" pos:end="51:9">i</name> <operator pos:start="51:11" pos:end="51:11">=</operator> <literal type="number" pos:start="51:13" pos:end="51:13">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:73"><expr pos:start="53:9" pos:end="53:72"><name pos:start="53:9" pos:end="53:15">nCoeffs</name><operator pos:start="53:16" pos:end="53:16">=</operator> <name pos:start="53:18" pos:end="53:72"><name pos:start="53:18" pos:end="53:18">s</name><operator pos:start="53:19" pos:end="53:20">-&gt;</operator><name pos:start="53:21" pos:end="53:35">intra_scantable</name><operator pos:start="53:36" pos:end="53:36">.</operator><name pos:start="53:37" pos:end="53:46">raster_end</name><index pos:start="53:47" pos:end="53:72">[ <expr pos:start="53:49" pos:end="53:70"><name pos:start="53:49" pos:end="53:70"><name pos:start="53:49" pos:end="53:49">s</name><operator pos:start="53:50" pos:end="53:51">-&gt;</operator><name pos:start="53:52" pos:end="53:67">block_last_index</name><index pos:start="53:68" pos:end="53:70">[<expr pos:start="53:69" pos:end="53:69"><name pos:start="53:69" pos:end="53:69">n</name></expr>]</index></name></expr> ]</index></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



<cpp:ifdef pos:start="59:1" pos:end="59:35">#<cpp:directive pos:start="59:2" pos:end="59:6">ifdef</cpp:directive> <name pos:start="59:8" pos:end="59:35">ALTIVEC_USE_REFERENCE_C_CODE</name></cpp:ifdef>

    <for pos:start="61:5" pos:end="84:0">for<control pos:start="61:8" pos:end="61:24">(<init pos:start="61:9" pos:end="61:9">;</init><condition pos:start="61:10" pos:end="61:20"><expr pos:start="61:10" pos:end="61:19"><name pos:start="61:10" pos:end="61:10">i</name><operator pos:start="61:11" pos:end="61:12">&lt;=</operator><name pos:start="61:13" pos:end="61:19">nCoeffs</name></expr>;</condition><incr pos:start="61:21" pos:end="61:23"><expr pos:start="61:21" pos:end="61:23"><name pos:start="61:21" pos:end="61:21">i</name><operator pos:start="61:22" pos:end="61:23">++</operator></expr></incr>)</control> <block pos:start="61:26" pos:end="84:0">{<block_content pos:start="63:9" pos:end="79:9">

        <expr_stmt pos:start="63:9" pos:end="63:25"><expr pos:start="63:9" pos:end="63:24"><name pos:start="63:9" pos:end="63:13">level</name> <operator pos:start="63:15" pos:end="63:15">=</operator> <name pos:start="63:17" pos:end="63:24"><name pos:start="63:17" pos:end="63:21">block</name><index pos:start="63:22" pos:end="63:24">[<expr pos:start="63:23" pos:end="63:23"><name pos:start="63:23" pos:end="63:23">i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="65:9" pos:end="79:9"><if pos:start="65:9" pos:end="79:9">if <condition pos:start="65:12" pos:end="65:18">(<expr pos:start="65:13" pos:end="65:17"><name pos:start="65:13" pos:end="65:17">level</name></expr>)</condition> <block pos:start="65:20" pos:end="79:9">{<block_content pos:start="67:13" pos:end="77:29">

            <if_stmt pos:start="67:13" pos:end="75:13"><if pos:start="67:13" pos:end="71:13">if <condition pos:start="67:16" pos:end="67:26">(<expr pos:start="67:17" pos:end="67:25"><name pos:start="67:17" pos:end="67:21">level</name> <operator pos:start="67:23" pos:end="67:23">&lt;</operator> <literal type="number" pos:start="67:25" pos:end="67:25">0</literal></expr>)</condition> <block pos:start="67:28" pos:end="71:13">{<block_content pos:start="69:17" pos:end="69:44">

                <expr_stmt pos:start="69:17" pos:end="69:44"><expr pos:start="69:17" pos:end="69:43"><name pos:start="69:17" pos:end="69:21">level</name> <operator pos:start="69:23" pos:end="69:23">=</operator> <name pos:start="69:25" pos:end="69:29">level</name> <operator pos:start="69:31" pos:end="69:31">*</operator> <name pos:start="69:33" pos:end="69:36">qmul</name> <operator pos:start="69:38" pos:end="69:38">-</operator> <name pos:start="69:40" pos:end="69:43">qadd</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="71:15" pos:end="75:13">else <block pos:start="71:20" pos:end="75:13">{<block_content pos:start="73:17" pos:end="73:44">

                <expr_stmt pos:start="73:17" pos:end="73:44"><expr pos:start="73:17" pos:end="73:43"><name pos:start="73:17" pos:end="73:21">level</name> <operator pos:start="73:23" pos:end="73:23">=</operator> <name pos:start="73:25" pos:end="73:29">level</name> <operator pos:start="73:31" pos:end="73:31">*</operator> <name pos:start="73:33" pos:end="73:36">qmul</name> <operator pos:start="73:38" pos:end="73:38">+</operator> <name pos:start="73:40" pos:end="73:43">qadd</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:29"><expr pos:start="77:13" pos:end="77:28"><name pos:start="77:13" pos:end="77:20"><name pos:start="77:13" pos:end="77:17">block</name><index pos:start="77:18" pos:end="77:20">[<expr pos:start="77:19" pos:end="77:19"><name pos:start="77:19" pos:end="77:19">i</name></expr>]</index></name> <operator pos:start="77:22" pos:end="77:22">=</operator> <name pos:start="77:24" pos:end="77:28">level</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

<cpp:else pos:start="83:1" pos:end="83:5">#<cpp:directive pos:start="83:2" pos:end="83:5">else</cpp:directive></cpp:else> <comment type="block" pos:start="83:7" pos:end="83:40">/* ALTIVEC_USE_REFERENCE_C_CODE */</comment>

    <block pos:start="85:5" pos:end="242:0">{<block_content pos:start="87:7" pos:end="237:7">

      <decl_stmt pos:start="87:7" pos:end="87:80"><decl pos:start="87:7" pos:end="87:79"><type pos:start="87:7" pos:end="87:33"><specifier pos:start="87:7" pos:end="87:14">register</specifier> <specifier pos:start="87:16" pos:end="87:20">const</specifier> <name pos:start="87:22" pos:end="87:27">vector</name> <name pos:start="87:29" pos:end="87:33">short</name></type> <name pos:start="87:35" pos:end="87:40">vczero</name> <init pos:start="87:42" pos:end="87:79">= <expr pos:start="87:44" pos:end="87:79"><operator pos:start="87:44" pos:end="87:44">(</operator><specifier pos:start="87:45" pos:end="87:49">const</specifier> <name pos:start="87:51" pos:end="87:56">vector</name> <name pos:start="87:58" pos:end="87:62">short</name><operator pos:start="87:63" pos:end="87:63">)</operator><call pos:start="87:64" pos:end="87:79"><name pos:start="87:64" pos:end="87:76">vec_splat_s16</name><argument_list pos:start="87:77" pos:end="87:79">(<argument pos:start="87:78" pos:end="87:78"><expr pos:start="87:78" pos:end="87:78"><literal type="number" pos:start="87:78" pos:end="87:78">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt pos:start="89:7" pos:end="97:12"><decl pos:start="89:7" pos:end="97:11"><type pos:start="89:7" pos:end="89:11"><name pos:start="89:7" pos:end="89:11">short</name></type> <name pos:start="89:13" pos:end="89:25">__attribute__</name> <argument_list pos:start="89:27" pos:end="89:41">(<argument pos:start="89:28" pos:end="89:40"><expr pos:start="89:28" pos:end="89:40"><operator pos:start="89:28" pos:end="89:28">(</operator><call pos:start="89:29" pos:end="89:39"><name pos:start="89:29" pos:end="89:35">aligned</name><argument_list pos:start="89:36" pos:end="89:39">(<argument pos:start="89:37" pos:end="89:38"><expr pos:start="89:37" pos:end="89:38"><literal type="number" pos:start="89:37" pos:end="89:38">16</literal></expr></argument>)</argument_list></call><operator pos:start="89:40" pos:end="89:40">)</operator></expr></argument>)</argument_list> <name pos:start="89:43" pos:end="89:49"><name pos:start="89:43" pos:end="89:47">qmul8</name><index pos:start="89:48" pos:end="89:49">[]</index></name> <init pos:start="89:51" pos:end="97:11">=

          <expr pos:start="91:11" pos:end="97:11"><block pos:start="91:11" pos:end="97:11">{

            <expr pos:start="93:13" pos:end="93:16"><name pos:start="93:13" pos:end="93:16">qmul</name></expr>, <expr pos:start="93:19" pos:end="93:22"><name pos:start="93:19" pos:end="93:22">qmul</name></expr>, <expr pos:start="93:25" pos:end="93:28"><name pos:start="93:25" pos:end="93:28">qmul</name></expr>, <expr pos:start="93:31" pos:end="93:34"><name pos:start="93:31" pos:end="93:34">qmul</name></expr>,

            <expr pos:start="95:13" pos:end="95:16"><name pos:start="95:13" pos:end="95:16">qmul</name></expr>, <expr pos:start="95:19" pos:end="95:22"><name pos:start="95:19" pos:end="95:22">qmul</name></expr>, <expr pos:start="95:25" pos:end="95:28"><name pos:start="95:25" pos:end="95:28">qmul</name></expr>, <expr pos:start="95:31" pos:end="95:34"><name pos:start="95:31" pos:end="95:34">qmul</name></expr>

          }</block></expr></init></decl>;</decl_stmt>

      <decl_stmt pos:start="99:7" pos:end="107:12"><decl pos:start="99:7" pos:end="107:11"><type pos:start="99:7" pos:end="99:11"><name pos:start="99:7" pos:end="99:11">short</name></type> <name pos:start="99:13" pos:end="99:25">__attribute__</name> <argument_list pos:start="99:27" pos:end="99:41">(<argument pos:start="99:28" pos:end="99:40"><expr pos:start="99:28" pos:end="99:40"><operator pos:start="99:28" pos:end="99:28">(</operator><call pos:start="99:29" pos:end="99:39"><name pos:start="99:29" pos:end="99:35">aligned</name><argument_list pos:start="99:36" pos:end="99:39">(<argument pos:start="99:37" pos:end="99:38"><expr pos:start="99:37" pos:end="99:38"><literal type="number" pos:start="99:37" pos:end="99:38">16</literal></expr></argument>)</argument_list></call><operator pos:start="99:40" pos:end="99:40">)</operator></expr></argument>)</argument_list> <name pos:start="99:43" pos:end="99:49"><name pos:start="99:43" pos:end="99:47">qadd8</name><index pos:start="99:48" pos:end="99:49">[]</index></name> <init pos:start="99:51" pos:end="107:11">=

          <expr pos:start="101:11" pos:end="107:11"><block pos:start="101:11" pos:end="107:11">{

            <expr pos:start="103:13" pos:end="103:16"><name pos:start="103:13" pos:end="103:16">qadd</name></expr>, <expr pos:start="103:19" pos:end="103:22"><name pos:start="103:19" pos:end="103:22">qadd</name></expr>, <expr pos:start="103:25" pos:end="103:28"><name pos:start="103:25" pos:end="103:28">qadd</name></expr>, <expr pos:start="103:31" pos:end="103:34"><name pos:start="103:31" pos:end="103:34">qadd</name></expr>,

            <expr pos:start="105:13" pos:end="105:16"><name pos:start="105:13" pos:end="105:16">qadd</name></expr>, <expr pos:start="105:19" pos:end="105:22"><name pos:start="105:19" pos:end="105:22">qadd</name></expr>, <expr pos:start="105:25" pos:end="105:28"><name pos:start="105:25" pos:end="105:28">qadd</name></expr>, <expr pos:start="105:31" pos:end="105:34"><name pos:start="105:31" pos:end="105:34">qadd</name></expr>

          }</block></expr></init></decl>;</decl_stmt>

      <decl_stmt pos:start="109:7" pos:end="117:12"><decl pos:start="109:7" pos:end="117:11"><type pos:start="109:7" pos:end="109:11"><name pos:start="109:7" pos:end="109:11">short</name></type> <name pos:start="109:13" pos:end="109:25">__attribute__</name> <argument_list pos:start="109:27" pos:end="109:41">(<argument pos:start="109:28" pos:end="109:40"><expr pos:start="109:28" pos:end="109:40"><operator pos:start="109:28" pos:end="109:28">(</operator><call pos:start="109:29" pos:end="109:39"><name pos:start="109:29" pos:end="109:35">aligned</name><argument_list pos:start="109:36" pos:end="109:39">(<argument pos:start="109:37" pos:end="109:38"><expr pos:start="109:37" pos:end="109:38"><literal type="number" pos:start="109:37" pos:end="109:38">16</literal></expr></argument>)</argument_list></call><operator pos:start="109:40" pos:end="109:40">)</operator></expr></argument>)</argument_list> <name pos:start="109:43" pos:end="109:50"><name pos:start="109:43" pos:end="109:48">nqadd8</name><index pos:start="109:49" pos:end="109:50">[]</index></name> <init pos:start="109:52" pos:end="117:11">=

          <expr pos:start="111:11" pos:end="117:11"><block pos:start="111:11" pos:end="117:11">{

            <expr pos:start="113:13" pos:end="113:17"><operator pos:start="113:13" pos:end="113:13">-</operator><name pos:start="113:14" pos:end="113:17">qadd</name></expr>, <expr pos:start="113:20" pos:end="113:24"><operator pos:start="113:20" pos:end="113:20">-</operator><name pos:start="113:21" pos:end="113:24">qadd</name></expr>, <expr pos:start="113:27" pos:end="113:31"><operator pos:start="113:27" pos:end="113:27">-</operator><name pos:start="113:28" pos:end="113:31">qadd</name></expr>, <expr pos:start="113:34" pos:end="113:38"><operator pos:start="113:34" pos:end="113:34">-</operator><name pos:start="113:35" pos:end="113:38">qadd</name></expr>,

            <expr pos:start="115:13" pos:end="115:17"><operator pos:start="115:13" pos:end="115:13">-</operator><name pos:start="115:14" pos:end="115:17">qadd</name></expr>, <expr pos:start="115:20" pos:end="115:24"><operator pos:start="115:20" pos:end="115:20">-</operator><name pos:start="115:21" pos:end="115:24">qadd</name></expr>, <expr pos:start="115:27" pos:end="115:31"><operator pos:start="115:27" pos:end="115:27">-</operator><name pos:start="115:28" pos:end="115:31">qadd</name></expr>, <expr pos:start="115:34" pos:end="115:38"><operator pos:start="115:34" pos:end="115:34">-</operator><name pos:start="115:35" pos:end="115:38">qadd</name></expr>

          }</block></expr></init></decl>;</decl_stmt>

      <decl_stmt pos:start="119:7" pos:end="119:64"><decl pos:start="119:7" pos:end="119:34"><type pos:start="119:7" pos:end="119:27"><specifier pos:start="119:7" pos:end="119:14">register</specifier> <name pos:start="119:16" pos:end="119:21">vector</name> <name pos:start="119:23" pos:end="119:27">short</name></type> <name pos:start="119:29" pos:end="119:34">blockv</name></decl>, <decl pos:start="119:37" pos:end="119:41"><type ref="prev" pos:start="119:7" pos:end="119:27"/><name pos:start="119:37" pos:end="119:41">qmulv</name></decl>, <decl pos:start="119:44" pos:end="119:48"><type ref="prev" pos:start="119:7" pos:end="119:27"/><name pos:start="119:44" pos:end="119:48">qaddv</name></decl>, <decl pos:start="119:51" pos:end="119:56"><type ref="prev" pos:start="119:7" pos:end="119:27"/><name pos:start="119:51" pos:end="119:56">nqaddv</name></decl>, <decl pos:start="119:59" pos:end="119:63"><type ref="prev" pos:start="119:7" pos:end="119:27"/><name pos:start="119:59" pos:end="119:63">temp1</name></decl>;</decl_stmt>

      <decl_stmt pos:start="121:7" pos:end="121:57"><decl pos:start="121:7" pos:end="121:44"><type pos:start="121:7" pos:end="121:32"><specifier pos:start="121:7" pos:end="121:14">register</specifier> <name pos:start="121:16" pos:end="121:21">vector</name> <name pos:start="121:23" pos:end="121:26">bool</name> <name pos:start="121:28" pos:end="121:32">short</name></type> <name pos:start="121:34" pos:end="121:44">blockv_null</name></decl>, <decl pos:start="121:47" pos:end="121:56"><type ref="prev" pos:start="121:7" pos:end="121:32"/><name pos:start="121:47" pos:end="121:56">blockv_neg</name></decl>;</decl_stmt>

      <decl_stmt pos:start="123:7" pos:end="123:41"><decl pos:start="123:7" pos:end="123:40"><type pos:start="123:7" pos:end="123:20"><specifier pos:start="123:7" pos:end="123:14">register</specifier> <name pos:start="123:16" pos:end="123:20">short</name></type> <name pos:start="123:22" pos:end="123:29">backup_0</name> <init pos:start="123:31" pos:end="123:40">= <expr pos:start="123:33" pos:end="123:40"><name pos:start="123:33" pos:end="123:40"><name pos:start="123:33" pos:end="123:37">block</name><index pos:start="123:38" pos:end="123:40">[<expr pos:start="123:39" pos:end="123:39"><literal type="number" pos:start="123:39" pos:end="123:39">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

      <decl_stmt pos:start="125:7" pos:end="125:25"><decl pos:start="125:7" pos:end="125:24"><type pos:start="125:7" pos:end="125:18"><specifier pos:start="125:7" pos:end="125:14">register</specifier> <name pos:start="125:16" pos:end="125:18">int</name></type> <name pos:start="125:20" pos:end="125:20">j</name> <init pos:start="125:22" pos:end="125:24">= <expr pos:start="125:24" pos:end="125:24"><literal type="number" pos:start="125:24" pos:end="125:24">0</literal></expr></init></decl>;</decl_stmt>

      

      <expr_stmt pos:start="129:7" pos:end="129:31"><expr pos:start="129:7" pos:end="129:30"><name pos:start="129:7" pos:end="129:11">qmulv</name> <operator pos:start="129:13" pos:end="129:13">=</operator> <call pos:start="129:15" pos:end="129:30"><name pos:start="129:15" pos:end="129:20">vec_ld</name><argument_list pos:start="129:21" pos:end="129:30">(<argument pos:start="129:22" pos:end="129:22"><expr pos:start="129:22" pos:end="129:22"><literal type="number" pos:start="129:22" pos:end="129:22">0</literal></expr></argument>, <argument pos:start="129:25" pos:end="129:29"><expr pos:start="129:25" pos:end="129:29"><name pos:start="129:25" pos:end="129:29">qmul8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt pos:start="131:7" pos:end="131:31"><expr pos:start="131:7" pos:end="131:30"><name pos:start="131:7" pos:end="131:11">qaddv</name> <operator pos:start="131:13" pos:end="131:13">=</operator> <call pos:start="131:15" pos:end="131:30"><name pos:start="131:15" pos:end="131:20">vec_ld</name><argument_list pos:start="131:21" pos:end="131:30">(<argument pos:start="131:22" pos:end="131:22"><expr pos:start="131:22" pos:end="131:22"><literal type="number" pos:start="131:22" pos:end="131:22">0</literal></expr></argument>, <argument pos:start="131:25" pos:end="131:29"><expr pos:start="131:25" pos:end="131:29"><name pos:start="131:25" pos:end="131:29">qadd8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt pos:start="133:7" pos:end="164:0"><expr pos:start="133:7" pos:end="133:32"><name pos:start="133:7" pos:end="133:12">nqaddv</name> <operator pos:start="133:14" pos:end="133:14">=</operator> <call pos:start="133:16" pos:end="133:32"><name pos:start="133:16" pos:end="133:21">vec_ld</name><argument_list pos:start="133:22" pos:end="133:32">(<argument pos:start="133:23" pos:end="133:23"><expr pos:start="133:23" pos:end="133:23"><literal type="number" pos:start="133:23" pos:end="133:23">0</literal></expr></argument>, <argument pos:start="133:26" pos:end="133:31"><expr pos:start="133:26" pos:end="133:31"><name pos:start="133:26" pos:end="133:31">nqadd8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:if pos:start="137:1" pos:end="137:5">#<cpp:directive pos:start="137:2" pos:end="137:3">if</cpp:directive> <expr pos:start="137:5" pos:end="137:5"><literal type="number" pos:start="137:5" pos:end="137:5">0</literal></expr></cpp:if> <comment type="line" pos:start="137:7" pos:end="137:47">// block *is* 16 bytes-aligned, it seems.</comment>

      <comment type="line" pos:start="139:7" pos:end="139:53">// first make sure block[j] is 16 bytes-aligned</comment>

      for(j = 0; (j &lt;= nCoeffs) &amp;&amp; ((((unsigned long)block) + (j &lt;&lt; 1)) &amp; 0x0000000F) ; j++) {

        level = block[j];

        if (level) {

          if (level &lt; 0) {

                level = level * qmul - qadd;

            } else {

                level = level * qmul + qadd;

            }

            block[j] = level;

        }

      }

<cpp:endif pos:start="163:1" pos:end="163:6">#<cpp:directive pos:start="163:2" pos:end="163:6">endif</cpp:directive></cpp:endif>

      

      <comment type="line" pos:start="167:7" pos:end="167:50">// vectorize all the 16 bytes-aligned blocks</comment>

      <comment type="line" pos:start="169:7" pos:end="169:22">// of 8 elements</comment>

      <for pos:start="171:7" pos:end="195:7">for<control pos:start="171:10" pos:end="171:38">(<init pos:start="171:11" pos:end="171:11">;</init> <condition pos:start="171:13" pos:end="171:32"><expr pos:start="171:13" pos:end="171:30"><operator pos:start="171:13" pos:end="171:13">(</operator><name pos:start="171:14" pos:end="171:14">j</name> <operator pos:start="171:16" pos:end="171:16">+</operator> <literal type="number" pos:start="171:18" pos:end="171:18">7</literal><operator pos:start="171:19" pos:end="171:19">)</operator> <operator pos:start="171:21" pos:end="171:22">&lt;=</operator> <name pos:start="171:24" pos:end="171:30">nCoeffs</name></expr> ;</condition> <incr pos:start="171:34" pos:end="171:37"><expr pos:start="171:34" pos:end="171:37"><name pos:start="171:34" pos:end="171:34">j</name><operator pos:start="171:35" pos:end="171:36">+=</operator><literal type="number" pos:start="171:37" pos:end="171:37">8</literal></expr></incr>)</control>

      <block pos:start="173:7" pos:end="195:7">{<block_content pos:start="175:9" pos:end="193:38">

        <expr_stmt pos:start="175:9" pos:end="175:39"><expr pos:start="175:9" pos:end="175:38"><name pos:start="175:9" pos:end="175:14">blockv</name> <operator pos:start="175:16" pos:end="175:16">=</operator> <call pos:start="175:18" pos:end="175:38"><name pos:start="175:18" pos:end="175:23">vec_ld</name><argument_list pos:start="175:24" pos:end="175:38">(<argument pos:start="175:25" pos:end="175:30"><expr pos:start="175:25" pos:end="175:30"><name pos:start="175:25" pos:end="175:25">j</name> <operator pos:start="175:27" pos:end="175:28">&lt;&lt;</operator> <literal type="number" pos:start="175:30" pos:end="175:30">1</literal></expr></argument>, <argument pos:start="175:33" pos:end="175:37"><expr pos:start="175:33" pos:end="175:37"><name pos:start="175:33" pos:end="175:37">block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:47"><expr pos:start="177:9" pos:end="177:46"><name pos:start="177:9" pos:end="177:18">blockv_neg</name> <operator pos:start="177:20" pos:end="177:20">=</operator> <call pos:start="177:22" pos:end="177:46"><name pos:start="177:22" pos:end="177:30">vec_cmplt</name><argument_list pos:start="177:31" pos:end="177:46">(<argument pos:start="177:32" pos:end="177:37"><expr pos:start="177:32" pos:end="177:37"><name pos:start="177:32" pos:end="177:37">blockv</name></expr></argument>, <argument pos:start="177:40" pos:end="177:45"><expr pos:start="177:40" pos:end="177:45"><name pos:start="177:40" pos:end="177:45">vczero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:48"><expr pos:start="179:9" pos:end="179:47"><name pos:start="179:9" pos:end="179:19">blockv_null</name> <operator pos:start="179:21" pos:end="179:21">=</operator> <call pos:start="179:23" pos:end="179:47"><name pos:start="179:23" pos:end="179:31">vec_cmpeq</name><argument_list pos:start="179:32" pos:end="179:47">(<argument pos:start="179:33" pos:end="179:38"><expr pos:start="179:33" pos:end="179:38"><name pos:start="179:33" pos:end="179:38">blockv</name></expr></argument>, <argument pos:start="179:41" pos:end="179:46"><expr pos:start="179:41" pos:end="179:46"><name pos:start="179:41" pos:end="179:46">vczero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:start="181:9" pos:end="181:61">// choose between +qadd or -qadd as the third operand</comment>

        <expr_stmt pos:start="183:9" pos:end="183:51"><expr pos:start="183:9" pos:end="183:50"><name pos:start="183:9" pos:end="183:13">temp1</name> <operator pos:start="183:15" pos:end="183:15">=</operator> <call pos:start="183:17" pos:end="183:50"><name pos:start="183:17" pos:end="183:23">vec_sel</name><argument_list pos:start="183:24" pos:end="183:50">(<argument pos:start="183:25" pos:end="183:29"><expr pos:start="183:25" pos:end="183:29"><name pos:start="183:25" pos:end="183:29">qaddv</name></expr></argument>, <argument pos:start="183:32" pos:end="183:37"><expr pos:start="183:32" pos:end="183:37"><name pos:start="183:32" pos:end="183:37">nqaddv</name></expr></argument>, <argument pos:start="183:40" pos:end="183:49"><expr pos:start="183:40" pos:end="183:49"><name pos:start="183:40" pos:end="183:49">blockv_neg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:start="185:9" pos:end="185:57">// multiply &amp; add (block{i,i+7} * qmul [+-] qadd)</comment>

        <expr_stmt pos:start="187:9" pos:end="187:48"><expr pos:start="187:9" pos:end="187:47"><name pos:start="187:9" pos:end="187:13">temp1</name> <operator pos:start="187:15" pos:end="187:15">=</operator> <call pos:start="187:17" pos:end="187:47"><name pos:start="187:17" pos:end="187:25">vec_mladd</name><argument_list pos:start="187:26" pos:end="187:47">(<argument pos:start="187:27" pos:end="187:32"><expr pos:start="187:27" pos:end="187:32"><name pos:start="187:27" pos:end="187:32">blockv</name></expr></argument>, <argument pos:start="187:35" pos:end="187:39"><expr pos:start="187:35" pos:end="187:39"><name pos:start="187:35" pos:end="187:39">qmulv</name></expr></argument>, <argument pos:start="187:42" pos:end="187:46"><expr pos:start="187:42" pos:end="187:46"><name pos:start="187:42" pos:end="187:46">temp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:start="189:9" pos:end="189:51">// put 0 where block[{i,i+7} used to have 0</comment>

        <expr_stmt pos:start="191:9" pos:end="191:53"><expr pos:start="191:9" pos:end="191:52"><name pos:start="191:9" pos:end="191:14">blockv</name> <operator pos:start="191:16" pos:end="191:16">=</operator> <call pos:start="191:18" pos:end="191:52"><name pos:start="191:18" pos:end="191:24">vec_sel</name><argument_list pos:start="191:25" pos:end="191:52">(<argument pos:start="191:26" pos:end="191:30"><expr pos:start="191:26" pos:end="191:30"><name pos:start="191:26" pos:end="191:30">temp1</name></expr></argument>, <argument pos:start="191:33" pos:end="191:38"><expr pos:start="191:33" pos:end="191:38"><name pos:start="191:33" pos:end="191:38">blockv</name></expr></argument>, <argument pos:start="191:41" pos:end="191:51"><expr pos:start="191:41" pos:end="191:51"><name pos:start="191:41" pos:end="191:51">blockv_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:38"><expr pos:start="193:9" pos:end="193:37"><call pos:start="193:9" pos:end="193:37"><name pos:start="193:9" pos:end="193:14">vec_st</name><argument_list pos:start="193:15" pos:end="193:37">(<argument pos:start="193:16" pos:end="193:21"><expr pos:start="193:16" pos:end="193:21"><name pos:start="193:16" pos:end="193:21">blockv</name></expr></argument>, <argument pos:start="193:24" pos:end="193:29"><expr pos:start="193:24" pos:end="193:29"><name pos:start="193:24" pos:end="193:24">j</name> <operator pos:start="193:26" pos:end="193:27">&lt;&lt;</operator> <literal type="number" pos:start="193:29" pos:end="193:29">1</literal></expr></argument>, <argument pos:start="193:32" pos:end="193:36"><expr pos:start="193:32" pos:end="193:36"><name pos:start="193:32" pos:end="193:36">block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      </block_content>}</block></for>



      <comment type="line" pos:start="199:7" pos:end="199:57">// if nCoeffs isn't a multiple of 8, finish the job</comment>

      <comment type="line" pos:start="201:7" pos:end="201:37">// using good old scalar units.</comment>

      <comment type="line" pos:start="203:7" pos:end="203:50">// (we could do it using a truncated vector,</comment>

      <comment type="line" pos:start="205:7" pos:end="205:48">// but I'm not sure it's worth the hassle)</comment>

      <for pos:start="207:7" pos:end="227:7">for<control pos:start="207:10" pos:end="207:31">(<init pos:start="207:11" pos:end="207:11">;</init> <condition pos:start="207:13" pos:end="207:26"><expr pos:start="207:13" pos:end="207:24"><name pos:start="207:13" pos:end="207:13">j</name> <operator pos:start="207:15" pos:end="207:16">&lt;=</operator> <name pos:start="207:18" pos:end="207:24">nCoeffs</name></expr> ;</condition> <incr pos:start="207:28" pos:end="207:30"><expr pos:start="207:28" pos:end="207:30"><name pos:start="207:28" pos:end="207:28">j</name><operator pos:start="207:29" pos:end="207:30">++</operator></expr></incr>)</control> <block pos:start="207:33" pos:end="227:7">{<block_content pos:start="209:9" pos:end="225:9">

        <expr_stmt pos:start="209:9" pos:end="209:25"><expr pos:start="209:9" pos:end="209:24"><name pos:start="209:9" pos:end="209:13">level</name> <operator pos:start="209:15" pos:end="209:15">=</operator> <name pos:start="209:17" pos:end="209:24"><name pos:start="209:17" pos:end="209:21">block</name><index pos:start="209:22" pos:end="209:24">[<expr pos:start="209:23" pos:end="209:23"><name pos:start="209:23" pos:end="209:23">j</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="211:9" pos:end="225:9"><if pos:start="211:9" pos:end="225:9">if <condition pos:start="211:12" pos:end="211:18">(<expr pos:start="211:13" pos:end="211:17"><name pos:start="211:13" pos:end="211:17">level</name></expr>)</condition> <block pos:start="211:20" pos:end="225:9">{<block_content pos:start="213:11" pos:end="223:29">

          <if_stmt pos:start="213:11" pos:end="221:13"><if pos:start="213:11" pos:end="217:13">if <condition pos:start="213:14" pos:end="213:24">(<expr pos:start="213:15" pos:end="213:23"><name pos:start="213:15" pos:end="213:19">level</name> <operator pos:start="213:21" pos:end="213:21">&lt;</operator> <literal type="number" pos:start="213:23" pos:end="213:23">0</literal></expr>)</condition> <block pos:start="213:26" pos:end="217:13">{<block_content pos:start="215:17" pos:end="215:44">

                <expr_stmt pos:start="215:17" pos:end="215:44"><expr pos:start="215:17" pos:end="215:43"><name pos:start="215:17" pos:end="215:21">level</name> <operator pos:start="215:23" pos:end="215:23">=</operator> <name pos:start="215:25" pos:end="215:29">level</name> <operator pos:start="215:31" pos:end="215:31">*</operator> <name pos:start="215:33" pos:end="215:36">qmul</name> <operator pos:start="215:38" pos:end="215:38">-</operator> <name pos:start="215:40" pos:end="215:43">qadd</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="217:15" pos:end="221:13">else <block pos:start="217:20" pos:end="221:13">{<block_content pos:start="219:17" pos:end="219:44">

                <expr_stmt pos:start="219:17" pos:end="219:44"><expr pos:start="219:17" pos:end="219:43"><name pos:start="219:17" pos:end="219:21">level</name> <operator pos:start="219:23" pos:end="219:23">=</operator> <name pos:start="219:25" pos:end="219:29">level</name> <operator pos:start="219:31" pos:end="219:31">*</operator> <name pos:start="219:33" pos:end="219:36">qmul</name> <operator pos:start="219:38" pos:end="219:38">+</operator> <name pos:start="219:40" pos:end="219:43">qadd</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="223:13" pos:end="223:29"><expr pos:start="223:13" pos:end="223:28"><name pos:start="223:13" pos:end="223:20"><name pos:start="223:13" pos:end="223:17">block</name><index pos:start="223:18" pos:end="223:20">[<expr pos:start="223:19" pos:end="223:19"><name pos:start="223:19" pos:end="223:19">j</name></expr>]</index></name> <operator pos:start="223:22" pos:end="223:22">=</operator> <name pos:start="223:24" pos:end="223:28">level</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

      </block_content>}</block></for>

      

      <if_stmt pos:start="231:7" pos:end="237:7"><if pos:start="231:7" pos:end="237:7">if <condition pos:start="231:10" pos:end="231:17">(<expr pos:start="231:11" pos:end="231:16"><name pos:start="231:11" pos:end="231:11">i</name> <operator pos:start="231:13" pos:end="231:14">==</operator> <literal type="number" pos:start="231:16" pos:end="231:16">1</literal></expr>)</condition>

      <block pos:start="233:7" pos:end="237:7">{<block_content pos:start="235:9" pos:end="235:28"> <comment type="line" pos:start="233:9" pos:end="233:63">// cheat. this avoid special-casing the first iteration</comment>

        <expr_stmt pos:start="235:9" pos:end="235:28"><expr pos:start="235:9" pos:end="235:27"><name pos:start="235:9" pos:end="235:16"><name pos:start="235:9" pos:end="235:13">block</name><index pos:start="235:14" pos:end="235:16">[<expr pos:start="235:15" pos:end="235:15"><literal type="number" pos:start="235:15" pos:end="235:15">0</literal></expr>]</index></name> <operator pos:start="235:18" pos:end="235:18">=</operator> <name pos:start="235:20" pos:end="235:27">backup_0</name></expr>;</expr_stmt>

      </block_content>}</block></if></if_stmt>

    </block_content>}</block>

<cpp:endif pos:start="241:1" pos:end="241:6">#<cpp:directive pos:start="241:2" pos:end="241:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="241:8" pos:end="241:41">/* ALTIVEC_USE_REFERENCE_C_CODE */</comment>



<expr_stmt pos:start="245:1" pos:end="245:71"><expr pos:start="245:1" pos:end="245:70"><call pos:start="245:1" pos:end="245:70"><name pos:start="245:1" pos:end="245:22">POWERPC_TBL_STOP_COUNT</name><argument_list pos:start="245:23" pos:end="245:70">(<argument pos:start="245:24" pos:end="245:54"><expr pos:start="245:24" pos:end="245:54"><name pos:start="245:24" pos:end="245:54">altivec_dct_unquantize_h263_num</name></expr></argument>, <argument pos:start="245:57" pos:end="245:69"><expr pos:start="245:57" pos:end="245:69"><name pos:start="245:57" pos:end="245:63">nCoeffs</name> <operator pos:start="245:65" pos:end="245:66">==</operator> <literal type="number" pos:start="245:68" pos:end="245:69">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
