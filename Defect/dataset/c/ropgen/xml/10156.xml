<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10156.c" pos:tabs="8"><function pos:start="1:1" pos:end="215:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:35">handle_cpu_signal</name><parameter_list pos:start="1:36" pos:end="3:68">(<parameter pos:start="1:37" pos:end="1:48"><decl pos:start="1:37" pos:end="1:48"><type pos:start="1:37" pos:end="1:48"><name pos:start="1:37" pos:end="1:45">uintptr_t</name></type> <name pos:start="1:47" pos:end="1:48">pc</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:65"><decl pos:start="1:51" pos:end="1:65"><type pos:start="1:51" pos:end="1:65"><name pos:start="1:51" pos:end="1:59">siginfo_t</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:65">info</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:48"><decl pos:start="3:37" pos:end="3:48"><type pos:start="3:37" pos:end="3:48"><name pos:start="3:37" pos:end="3:39">int</name></type> <name pos:start="3:41" pos:end="3:48">is_write</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:67"><decl pos:start="3:51" pos:end="3:67"><type pos:start="3:51" pos:end="3:67"><name pos:start="3:51" pos:end="3:58">sigset_t</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:67">old_set</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="215:1">{<block_content pos:start="7:5" pos:end="213:13">

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:31"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">CPUState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:17">cpu</name> <init pos:start="7:19" pos:end="7:31">= <expr pos:start="7:21" pos:end="7:31"><name pos:start="7:21" pos:end="7:31">current_cpu</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">CPUClass</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:16">cc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:57"><decl pos:start="13:5" pos:end="13:56"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:17">long</name></type> <name pos:start="13:19" pos:end="13:25">address</name> <init pos:start="13:27" pos:end="13:56">= <expr pos:start="13:29" pos:end="13:56"><operator pos:start="13:29" pos:end="13:29">(</operator><name pos:start="13:30" pos:end="13:37">unsigned</name> <name pos:start="13:39" pos:end="13:42">long</name><operator pos:start="13:43" pos:end="13:43">)</operator><name pos:start="13:44" pos:end="13:56"><name pos:start="13:44" pos:end="13:47">info</name><operator pos:start="13:48" pos:end="13:49">-&gt;</operator><name pos:start="13:50" pos:end="13:56">si_addr</name></name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="45:7">/* We must handle PC addresses from two different sources:

     * a call return address and a signal frame address.

     *

     * Within cpu_restore_state_from_tb we assume the former and adjust

     * the address by -GETPC_ADJ so that the address is within the call

     * insn so that addr does not accidentally match the beginning of the

     * next guest insn.

     *

     * However, when the PC comes from the signal frame, it points to

     * the actual faulting host insn and not a call insn.  Subtracting

     * GETPC_ADJ in that case may accidentally match the previous guest insn.

     *

     * So for the later case, adjust forward to compensate for what

     * will be done later by cpu_restore_state_from_tb.

     */</comment>

    <if_stmt pos:start="47:5" pos:end="55:5"><if pos:start="47:5" pos:end="51:5">if <condition pos:start="47:8" pos:end="47:23">(<expr pos:start="47:9" pos:end="47:22"><name pos:start="47:9" pos:end="47:22">helper_retaddr</name></expr>)</condition> <block pos:start="47:25" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:28">

        <expr_stmt pos:start="49:9" pos:end="49:28"><expr pos:start="49:9" pos:end="49:27"><name pos:start="49:9" pos:end="49:10">pc</name> <operator pos:start="49:12" pos:end="49:12">=</operator> <name pos:start="49:14" pos:end="49:27">helper_retaddr</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="51:7" pos:end="55:5">else <block pos:start="51:12" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:24">

        <expr_stmt pos:start="53:9" pos:end="53:24"><expr pos:start="53:9" pos:end="53:23"><name pos:start="53:9" pos:end="53:10">pc</name> <operator pos:start="53:12" pos:end="53:13">+=</operator> <name pos:start="53:15" pos:end="53:23">GETPC_ADJ</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="59:5" pos:end="71:7">/* For synchronous signals we expect to be coming from the vCPU

     * thread (so current_cpu should be valid) and either from running

     * code or during translation which can fault as we cross pages.

     *

     * If neither is true then something has gone wrong and we should

     * abort rather than try and restart the vCPU execution.

     */</comment>

    <if_stmt pos:start="73:5" pos:end="86:0"><if pos:start="73:5" pos:end="86:0">if <condition pos:start="73:8" pos:end="73:30">(<expr pos:start="73:9" pos:end="73:29"><operator pos:start="73:9" pos:end="73:9">!</operator><name pos:start="73:10" pos:end="73:12">cpu</name> <operator pos:start="73:14" pos:end="73:15">||</operator> <operator pos:start="73:17" pos:end="73:17">!</operator><name pos:start="73:18" pos:end="73:29"><name pos:start="73:18" pos:end="73:20">cpu</name><operator pos:start="73:21" pos:end="73:22">-&gt;</operator><name pos:start="73:23" pos:end="73:29">running</name></name></expr>)</condition> <block pos:start="73:32" pos:end="86:0">{<block_content pos:start="75:9" pos:end="79:16">

        <expr_stmt pos:start="75:9" pos:end="77:44"><expr pos:start="75:9" pos:end="77:43"><call pos:start="75:9" pos:end="77:43"><name pos:start="75:9" pos:end="75:14">printf</name><argument_list pos:start="75:15" pos:end="77:43">(<argument pos:start="75:16" pos:end="77:27"><expr pos:start="75:16" pos:end="77:27"><literal type="string" pos:start="75:16" pos:end="75:70">"qemu:%s received signal outside vCPU context @ pc=0x%"</literal>

               <name pos:start="77:16" pos:end="77:22">PRIxPTR</name> <literal type="string" pos:start="77:24" pos:end="77:27">"\n"</literal></expr></argument>,  <argument pos:start="77:31" pos:end="77:38"><expr pos:start="77:31" pos:end="77:38"><name pos:start="77:31" pos:end="77:38">__func__</name></expr></argument>, <argument pos:start="77:41" pos:end="77:42"><expr pos:start="77:41" pos:end="77:42"><name pos:start="77:41" pos:end="77:42">pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:16"><expr pos:start="79:9" pos:end="79:15"><call pos:start="79:9" pos:end="79:15"><name pos:start="79:9" pos:end="79:13">abort</name><argument_list pos:start="79:14" pos:end="79:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:if pos:start="85:1" pos:end="85:25">#<cpp:directive pos:start="85:2" pos:end="85:3">if</cpp:directive> <expr pos:start="85:5" pos:end="85:25"><call pos:start="85:5" pos:end="85:25"><name pos:start="85:5" pos:end="85:11">defined</name><argument_list pos:start="85:12" pos:end="85:25">(<argument pos:start="85:13" pos:end="85:24"><expr pos:start="85:13" pos:end="85:24"><name pos:start="85:13" pos:end="85:24">DEBUG_SIGNAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="87:5" pos:end="92:0"><expr pos:start="87:5" pos:end="89:60"><call pos:start="87:5" pos:end="89:60"><name pos:start="87:5" pos:end="87:10">printf</name><argument_list pos:start="87:11" pos:end="89:60">(<argument pos:start="87:12" pos:end="87:73"><expr pos:start="87:12" pos:end="87:73"><literal type="string" pos:start="87:12" pos:end="87:73">"qemu: SIGSEGV pc=0x%08lx address=%08lx w=%d oldset=0x%08lx\n"</literal></expr></argument>,

           <argument pos:start="89:12" pos:end="89:13"><expr pos:start="89:12" pos:end="89:13"><name pos:start="89:12" pos:end="89:13">pc</name></expr></argument>, <argument pos:start="89:16" pos:end="89:22"><expr pos:start="89:16" pos:end="89:22"><name pos:start="89:16" pos:end="89:22">address</name></expr></argument>, <argument pos:start="89:25" pos:end="89:32"><expr pos:start="89:25" pos:end="89:32"><name pos:start="89:25" pos:end="89:32">is_write</name></expr></argument>, <argument pos:start="89:35" pos:end="89:59"><expr pos:start="89:35" pos:end="89:59"><operator pos:start="89:35" pos:end="89:35">*</operator><operator pos:start="89:36" pos:end="89:36">(</operator><name pos:start="89:37" pos:end="89:44">unsigned</name> <name pos:start="89:46" pos:end="89:49">long</name> <operator pos:start="89:51" pos:end="89:51">*</operator><operator pos:start="89:52" pos:end="89:52">)</operator><name pos:start="89:53" pos:end="89:59">old_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="91:1" pos:end="91:6">#<cpp:directive pos:start="91:2" pos:end="91:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="93:5" pos:end="93:28">/* XXX: locking issue */</comment>

    <if_stmt pos:start="95:5" pos:end="145:5"><if pos:start="95:5" pos:end="145:5">if <condition pos:start="95:8" pos:end="95:39">(<expr pos:start="95:9" pos:end="95:38"><name pos:start="95:9" pos:end="95:16">is_write</name> <operator pos:start="95:18" pos:end="95:19">&amp;&amp;</operator> <call pos:start="95:21" pos:end="95:38"><name pos:start="95:21" pos:end="95:29">h2g_valid</name><argument_list pos:start="95:30" pos:end="95:38">(<argument pos:start="95:31" pos:end="95:37"><expr pos:start="95:31" pos:end="95:37"><name pos:start="95:31" pos:end="95:37">address</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="95:41" pos:end="145:5">{<block_content pos:start="97:9" pos:end="143:9">

        <switch pos:start="97:9" pos:end="143:9">switch <condition pos:start="97:16" pos:end="97:49">(<expr pos:start="97:17" pos:end="97:48"><call pos:start="97:17" pos:end="97:48"><name pos:start="97:17" pos:end="97:30">page_unprotect</name><argument_list pos:start="97:31" pos:end="97:48">(<argument pos:start="97:32" pos:end="97:43"><expr pos:start="97:32" pos:end="97:43"><call pos:start="97:32" pos:end="97:43"><name pos:start="97:32" pos:end="97:34">h2g</name><argument_list pos:start="97:35" pos:end="97:43">(<argument pos:start="97:36" pos:end="97:42"><expr pos:start="97:36" pos:end="97:42"><name pos:start="97:36" pos:end="97:42">address</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="97:46" pos:end="97:47"><expr pos:start="97:46" pos:end="97:47"><name pos:start="97:46" pos:end="97:47">pc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="97:51" pos:end="143:9">{<block_content pos:start="99:9" pos:end="141:35">

        <case pos:start="99:9" pos:end="99:15">case <expr pos:start="99:14" pos:end="99:14"><literal type="number" pos:start="99:14" pos:end="99:14">0</literal></expr>:</case>

            <comment type="block" pos:start="101:13" pos:end="105:15">/* Fault not caused by a page marked unwritable to protect

             * cached translations, must be the guest binary's problem.

             */</comment>

            <break pos:start="107:13" pos:end="107:18">break;</break>

        <case pos:start="109:9" pos:end="109:15">case <expr pos:start="109:14" pos:end="109:14"><literal type="number" pos:start="109:14" pos:end="109:14">1</literal></expr>:</case>

            <comment type="block" pos:start="111:13" pos:end="117:15">/* Fault caused by protection of cached translation; TBs

             * invalidated, so resume execution.  Retain helper_retaddr

             * for a possible second fault.

             */</comment>

            <return pos:start="119:13" pos:end="119:21">return <expr pos:start="119:20" pos:end="119:20"><literal type="number" pos:start="119:20" pos:end="119:20">1</literal></expr>;</return>

        <case pos:start="121:9" pos:end="121:15">case <expr pos:start="121:14" pos:end="121:14"><literal type="number" pos:start="121:14" pos:end="121:14">2</literal></expr>:</case>

            <comment type="block" pos:start="123:13" pos:end="129:15">/* Fault caused by protection of cached translation, and the

             * currently executing TB was modified and must be exited

             * immediately.  Clear helper_retaddr for next execution.

             */</comment>

            <expr_stmt pos:start="131:13" pos:end="131:31"><expr pos:start="131:13" pos:end="131:30"><name pos:start="131:13" pos:end="131:26">helper_retaddr</name> <operator pos:start="131:28" pos:end="131:28">=</operator> <literal type="number" pos:start="131:30" pos:end="131:30">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:54"><expr pos:start="133:13" pos:end="133:53"><call pos:start="133:13" pos:end="133:53"><name pos:start="133:13" pos:end="133:39">cpu_exit_tb_from_sighandler</name><argument_list pos:start="133:40" pos:end="133:53">(<argument pos:start="133:41" pos:end="133:43"><expr pos:start="133:41" pos:end="133:43"><name pos:start="133:41" pos:end="133:43">cpu</name></expr></argument>, <argument pos:start="133:46" pos:end="133:52"><expr pos:start="133:46" pos:end="133:52"><name pos:start="133:46" pos:end="133:52">old_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="135:13" pos:end="135:26">/* NORETURN */</comment>



        <default pos:start="139:9" pos:end="139:16">default:</default>

            <expr_stmt pos:start="141:13" pos:end="141:35"><expr pos:start="141:13" pos:end="141:34"><call pos:start="141:13" pos:end="141:34"><name pos:start="141:13" pos:end="141:32">g_assert_not_reached</name><argument_list pos:start="141:33" pos:end="141:34">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="149:5" pos:end="151:35">/* Convert forcefully to guest address space, invalid addresses

       are still valid segv ones */</comment>

    <expr_stmt pos:start="153:5" pos:end="153:35"><expr pos:start="153:5" pos:end="153:34"><name pos:start="153:5" pos:end="153:11">address</name> <operator pos:start="153:13" pos:end="153:13">=</operator> <call pos:start="153:15" pos:end="153:34"><name pos:start="153:15" pos:end="153:25">h2g_nocheck</name><argument_list pos:start="153:26" pos:end="153:34">(<argument pos:start="153:27" pos:end="153:33"><expr pos:start="153:27" pos:end="153:33"><name pos:start="153:27" pos:end="153:33">address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="157:5" pos:end="157:28"><expr pos:start="157:5" pos:end="157:27"><name pos:start="157:5" pos:end="157:6">cc</name> <operator pos:start="157:8" pos:end="157:8">=</operator> <call pos:start="157:10" pos:end="157:27"><name pos:start="157:10" pos:end="157:22">CPU_GET_CLASS</name><argument_list pos:start="157:23" pos:end="157:27">(<argument pos:start="157:24" pos:end="157:26"><expr pos:start="157:24" pos:end="157:26"><name pos:start="157:24" pos:end="157:26">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="159:5" pos:end="159:35">/* see if it is an MMU fault */</comment>

    <expr_stmt pos:start="161:5" pos:end="161:35"><expr pos:start="161:5" pos:end="161:34"><call pos:start="161:5" pos:end="161:34"><name pos:start="161:5" pos:end="161:12">g_assert</name><argument_list pos:start="161:13" pos:end="161:34">(<argument pos:start="161:14" pos:end="161:33"><expr pos:start="161:14" pos:end="161:33"><name pos:start="161:14" pos:end="161:33"><name pos:start="161:14" pos:end="161:15">cc</name><operator pos:start="161:16" pos:end="161:17">-&gt;</operator><name pos:start="161:18" pos:end="161:33">handle_mmu_fault</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:69"><expr pos:start="163:5" pos:end="163:68"><name pos:start="163:5" pos:end="163:7">ret</name> <operator pos:start="163:9" pos:end="163:9">=</operator> <call pos:start="163:11" pos:end="163:68"><name pos:start="163:11" pos:end="163:30"><name pos:start="163:11" pos:end="163:12">cc</name><operator pos:start="163:13" pos:end="163:14">-&gt;</operator><name pos:start="163:15" pos:end="163:30">handle_mmu_fault</name></name><argument_list pos:start="163:31" pos:end="163:68">(<argument pos:start="163:32" pos:end="163:34"><expr pos:start="163:32" pos:end="163:34"><name pos:start="163:32" pos:end="163:34">cpu</name></expr></argument>, <argument pos:start="163:37" pos:end="163:43"><expr pos:start="163:37" pos:end="163:43"><name pos:start="163:37" pos:end="163:43">address</name></expr></argument>, <argument pos:start="163:46" pos:end="163:53"><expr pos:start="163:46" pos:end="163:53"><name pos:start="163:46" pos:end="163:53">is_write</name></expr></argument>, <argument pos:start="163:56" pos:end="163:67"><expr pos:start="163:56" pos:end="163:67"><name pos:start="163:56" pos:end="163:67">MMU_USER_IDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="167:5" pos:end="177:5"><if pos:start="167:5" pos:end="177:5">if <condition pos:start="167:8" pos:end="167:17">(<expr pos:start="167:9" pos:end="167:16"><name pos:start="167:9" pos:end="167:11">ret</name> <operator pos:start="167:13" pos:end="167:14">==</operator> <literal type="number" pos:start="167:16" pos:end="167:16">0</literal></expr>)</condition> <block pos:start="167:19" pos:end="177:5">{<block_content pos:start="175:9" pos:end="175:17">

        <comment type="block" pos:start="169:9" pos:end="173:11">/* The MMU fault was handled without causing real CPU fault.

         *  Retain helper_retaddr for a possible second fault.

         */</comment>

        <return pos:start="175:9" pos:end="175:17">return <expr pos:start="175:16" pos:end="175:16"><literal type="number" pos:start="175:16" pos:end="175:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="181:5" pos:end="185:7">/* All other paths lead to cpu_exit; clear helper_retaddr

     * for next execution.

     */</comment>

    <expr_stmt pos:start="187:5" pos:end="187:23"><expr pos:start="187:5" pos:end="187:22"><name pos:start="187:5" pos:end="187:18">helper_retaddr</name> <operator pos:start="187:20" pos:end="187:20">=</operator> <literal type="number" pos:start="187:22" pos:end="187:22">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="191:5" pos:end="195:5"><if pos:start="191:5" pos:end="195:5">if <condition pos:start="191:8" pos:end="191:16">(<expr pos:start="191:9" pos:end="191:15"><name pos:start="191:9" pos:end="191:11">ret</name> <operator pos:start="191:13" pos:end="191:13">&lt;</operator> <literal type="number" pos:start="191:15" pos:end="191:15">0</literal></expr>)</condition> <block pos:start="191:18" pos:end="195:5">{<block_content pos:start="193:9" pos:end="193:17">

        <return pos:start="193:9" pos:end="193:17">return <expr pos:start="193:16" pos:end="193:16"><literal type="number" pos:start="193:16" pos:end="193:16">0</literal></expr>;</return> <comment type="block" pos:start="193:19" pos:end="193:40">/* not an MMU fault */</comment>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="199:5" pos:end="199:40">/* Now we have a real cpu fault.  */</comment>

    <expr_stmt pos:start="201:5" pos:end="201:31"><expr pos:start="201:5" pos:end="201:30"><call pos:start="201:5" pos:end="201:30"><name pos:start="201:5" pos:end="201:21">cpu_restore_state</name><argument_list pos:start="201:22" pos:end="201:30">(<argument pos:start="201:23" pos:end="201:25"><expr pos:start="201:23" pos:end="201:25"><name pos:start="201:23" pos:end="201:25">cpu</name></expr></argument>, <argument pos:start="201:28" pos:end="201:29"><expr pos:start="201:28" pos:end="201:29"><name pos:start="201:28" pos:end="201:29">pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="205:5" pos:end="205:44"><expr pos:start="205:5" pos:end="205:43"><call pos:start="205:5" pos:end="205:43"><name pos:start="205:5" pos:end="205:15">sigprocmask</name><argument_list pos:start="205:16" pos:end="205:43">(<argument pos:start="205:17" pos:end="205:27"><expr pos:start="205:17" pos:end="205:27"><name pos:start="205:17" pos:end="205:27">SIG_SETMASK</name></expr></argument>, <argument pos:start="205:30" pos:end="205:36"><expr pos:start="205:30" pos:end="205:36"><name pos:start="205:30" pos:end="205:36">old_set</name></expr></argument>, <argument pos:start="205:39" pos:end="205:42"><expr pos:start="205:39" pos:end="205:42"><name pos:start="205:39" pos:end="205:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="207:5" pos:end="207:23"><expr pos:start="207:5" pos:end="207:22"><call pos:start="207:5" pos:end="207:22"><name pos:start="207:5" pos:end="207:17">cpu_loop_exit</name><argument_list pos:start="207:18" pos:end="207:22">(<argument pos:start="207:19" pos:end="207:21"><expr pos:start="207:19" pos:end="207:21"><name pos:start="207:19" pos:end="207:21">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="211:5" pos:end="211:26">/* never comes here */</comment>

    <return pos:start="213:5" pos:end="213:13">return <expr pos:start="213:12" pos:end="213:12"><literal type="number" pos:start="213:12" pos:end="213:12">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
