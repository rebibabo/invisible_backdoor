<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3557.c" pos:tabs="8"><function pos:start="1:1" pos:end="121:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">usb_serial_handle_data</name><parameter_list pos:start="1:34" pos:end="1:63">(<parameter pos:start="1:35" pos:end="1:48"><decl pos:start="1:35" pos:end="1:48"><type pos:start="1:35" pos:end="1:48"><name pos:start="1:35" pos:end="1:43">USBDevice</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">dev</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:62"><decl pos:start="1:51" pos:end="1:62"><type pos:start="1:51" pos:end="1:62"><name pos:start="1:51" pos:end="1:59">USBPacket</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:62">p</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="121:1">{<block_content pos:start="5:5" pos:end="119:15">

    <decl_stmt pos:start="5:5" pos:end="5:46"><decl pos:start="5:5" pos:end="5:45"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">USBSerialState</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">s</name> <init pos:start="5:23" pos:end="5:45">= <expr pos:start="5:25" pos:end="5:45"><operator pos:start="5:25" pos:end="5:25">(</operator><name pos:start="5:26" pos:end="5:39">USBSerialState</name> <operator pos:start="5:41" pos:end="5:41">*</operator><operator pos:start="5:42" pos:end="5:42">)</operator><name pos:start="5:43" pos:end="5:45">dev</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:17">devep</name> <init pos:start="9:19" pos:end="9:28">= <expr pos:start="9:21" pos:end="9:28"><name pos:start="9:21" pos:end="9:28"><name pos:start="9:21" pos:end="9:21">p</name><operator pos:start="9:22" pos:end="9:23">-&gt;</operator><name pos:start="9:24" pos:end="9:28">devep</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:17">data</name> <init pos:start="11:19" pos:end="11:27">= <expr pos:start="11:21" pos:end="11:27"><name pos:start="11:21" pos:end="11:27"><name pos:start="11:21" pos:end="11:21">p</name><operator pos:start="11:22" pos:end="11:23">-&gt;</operator><name pos:start="11:24" pos:end="11:27">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">len</name> <init pos:start="13:13" pos:end="13:20">= <expr pos:start="13:15" pos:end="13:20"><name pos:start="13:15" pos:end="13:20"><name pos:start="13:15" pos:end="13:15">p</name><operator pos:start="13:16" pos:end="13:17">-&gt;</operator><name pos:start="13:18" pos:end="13:20">len</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:17">first_len</name></decl>;</decl_stmt>



    <switch pos:start="19:5" pos:end="115:5">switch <condition pos:start="19:12" pos:end="19:19">(<expr pos:start="19:13" pos:end="19:18"><name pos:start="19:13" pos:end="19:18"><name pos:start="19:13" pos:end="19:13">p</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:18">pid</name></name></expr>)</condition> <block pos:start="19:21" pos:end="115:5">{<block_content pos:start="21:5" pos:end="113:14">

    <case pos:start="21:5" pos:end="21:23">case <expr pos:start="21:10" pos:end="21:22"><name pos:start="21:10" pos:end="21:22">USB_TOKEN_OUT</name></expr>:</case>

        <if_stmt pos:start="23:9" pos:end="25:22"><if pos:start="23:9" pos:end="25:22">if <condition pos:start="23:12" pos:end="23:23">(<expr pos:start="23:13" pos:end="23:22"><name pos:start="23:13" pos:end="23:17">devep</name> <operator pos:start="23:19" pos:end="23:20">!=</operator> <literal type="number" pos:start="23:22" pos:end="23:22">2</literal></expr>)</condition><block type="pseudo" pos:start="25:13" pos:end="25:22"><block_content pos:start="25:13" pos:end="25:22">

            <goto pos:start="25:13" pos:end="25:22">goto <name pos:start="25:18" pos:end="25:21">fail</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:41"><expr pos:start="27:9" pos:end="27:40"><call pos:start="27:9" pos:end="27:40"><name pos:start="27:9" pos:end="27:22">qemu_chr_write</name><argument_list pos:start="27:23" pos:end="27:40">(<argument pos:start="27:24" pos:end="27:28"><expr pos:start="27:24" pos:end="27:28"><name pos:start="27:24" pos:end="27:28"><name pos:start="27:24" pos:end="27:24">s</name><operator pos:start="27:25" pos:end="27:26">-&gt;</operator><name pos:start="27:27" pos:end="27:28">cs</name></name></expr></argument>, <argument pos:start="27:31" pos:end="27:34"><expr pos:start="27:31" pos:end="27:34"><name pos:start="27:31" pos:end="27:34">data</name></expr></argument>, <argument pos:start="27:37" pos:end="27:39"><expr pos:start="27:37" pos:end="27:39"><name pos:start="27:37" pos:end="27:39">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="29:9" pos:end="29:14">break;</break>



    <case pos:start="33:5" pos:end="33:22">case <expr pos:start="33:10" pos:end="33:21"><name pos:start="33:10" pos:end="33:21">USB_TOKEN_IN</name></expr>:</case>

        <if_stmt pos:start="35:9" pos:end="37:22"><if pos:start="35:9" pos:end="37:22">if <condition pos:start="35:12" pos:end="35:23">(<expr pos:start="35:13" pos:end="35:22"><name pos:start="35:13" pos:end="35:17">devep</name> <operator pos:start="35:19" pos:end="35:20">!=</operator> <literal type="number" pos:start="35:22" pos:end="35:22">1</literal></expr>)</condition><block type="pseudo" pos:start="37:13" pos:end="37:22"><block_content pos:start="37:13" pos:end="37:22">

            <goto pos:start="37:13" pos:end="37:22">goto <name pos:start="37:18" pos:end="37:21">fail</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:43"><expr pos:start="39:9" pos:end="39:42"><name pos:start="39:9" pos:end="39:17">first_len</name> <operator pos:start="39:19" pos:end="39:19">=</operator> <name pos:start="39:21" pos:end="39:28">RECV_BUF</name> <operator pos:start="39:30" pos:end="39:30">-</operator> <name pos:start="39:32" pos:end="39:42"><name pos:start="39:32" pos:end="39:32">s</name><operator pos:start="39:33" pos:end="39:34">-&gt;</operator><name pos:start="39:35" pos:end="39:42">recv_ptr</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="41:9" pos:end="47:9"><if pos:start="41:9" pos:end="47:9">if <condition pos:start="41:12" pos:end="41:21">(<expr pos:start="41:13" pos:end="41:20"><name pos:start="41:13" pos:end="41:15">len</name> <operator pos:start="41:17" pos:end="41:18">&lt;=</operator> <literal type="number" pos:start="41:20" pos:end="41:20">2</literal></expr>)</condition> <block pos:start="41:23" pos:end="47:9">{<block_content pos:start="43:13" pos:end="45:18">

            <expr_stmt pos:start="43:13" pos:end="43:30"><expr pos:start="43:13" pos:end="43:29"><name pos:start="43:13" pos:end="43:15">ret</name> <operator pos:start="43:17" pos:end="43:17">=</operator> <name pos:start="43:19" pos:end="43:29">USB_RET_NAK</name></expr>;</expr_stmt>

            <break pos:start="45:13" pos:end="45:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:45"><expr pos:start="49:9" pos:end="49:44"><operator pos:start="49:9" pos:end="49:9">*</operator><name pos:start="49:10" pos:end="49:13">data</name><operator pos:start="49:14" pos:end="49:15">++</operator> <operator pos:start="49:17" pos:end="49:17">=</operator> <call pos:start="49:19" pos:end="49:40"><name pos:start="49:19" pos:end="49:37">usb_get_modem_lines</name><argument_list pos:start="49:38" pos:end="49:40">(<argument pos:start="49:39" pos:end="49:39"><expr pos:start="49:39" pos:end="49:39"><name pos:start="49:39" pos:end="49:39">s</name></expr></argument>)</argument_list></call> <operator pos:start="49:42" pos:end="49:42">|</operator> <literal type="number" pos:start="49:44" pos:end="49:44">1</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="51:9" pos:end="51:45">/* We do not have the uart details */</comment>

        <comment type="block" pos:start="53:9" pos:end="53:33">/* handle serial break */</comment>

        <if_stmt pos:start="55:9" pos:end="69:9"><if pos:start="55:9" pos:end="65:9">if <condition pos:start="55:12" pos:end="55:59">(<expr pos:start="55:13" pos:end="55:58"><name pos:start="55:13" pos:end="55:28"><name pos:start="55:13" pos:end="55:13">s</name><operator pos:start="55:14" pos:end="55:15">-&gt;</operator><name pos:start="55:16" pos:end="55:28">event_trigger</name></name> <operator pos:start="55:30" pos:end="55:31">&amp;&amp;</operator> <name pos:start="55:33" pos:end="55:48"><name pos:start="55:33" pos:end="55:33">s</name><operator pos:start="55:34" pos:end="55:35">-&gt;</operator><name pos:start="55:36" pos:end="55:48">event_trigger</name></name> <operator pos:start="55:50" pos:end="55:50">&amp;</operator> <name pos:start="55:52" pos:end="55:58">FTDI_BI</name></expr>)</condition> <block pos:start="55:61" pos:end="65:9">{<block_content pos:start="57:13" pos:end="63:18">

            <expr_stmt pos:start="57:13" pos:end="57:41"><expr pos:start="57:13" pos:end="57:40"><name pos:start="57:13" pos:end="57:28"><name pos:start="57:13" pos:end="57:13">s</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:28">event_trigger</name></name> <operator pos:start="57:30" pos:end="57:31">&amp;=</operator> <operator pos:start="57:33" pos:end="57:33">~</operator><name pos:start="57:34" pos:end="57:40">FTDI_BI</name></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:28"><expr pos:start="59:13" pos:end="59:27"><operator pos:start="59:13" pos:end="59:13">*</operator><name pos:start="59:14" pos:end="59:17">data</name> <operator pos:start="59:19" pos:end="59:19">=</operator> <name pos:start="59:21" pos:end="59:27">FTDI_BI</name></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:20"><expr pos:start="61:13" pos:end="61:19"><name pos:start="61:13" pos:end="61:15">ret</name> <operator pos:start="61:17" pos:end="61:17">=</operator> <literal type="number" pos:start="61:19" pos:end="61:19">2</literal></expr>;</expr_stmt>

            <break pos:start="63:13" pos:end="63:18">break;</break>

        </block_content>}</block></if> <else pos:start="65:11" pos:end="69:9">else <block pos:start="65:16" pos:end="69:9">{<block_content pos:start="67:13" pos:end="67:24">

            <expr_stmt pos:start="67:13" pos:end="67:24"><expr pos:start="67:13" pos:end="67:23"><operator pos:start="67:13" pos:end="67:13">*</operator><name pos:start="67:14" pos:end="67:17">data</name><operator pos:start="67:18" pos:end="67:19">++</operator> <operator pos:start="67:21" pos:end="67:21">=</operator> <literal type="number" pos:start="67:23" pos:end="67:23">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:17"><expr pos:start="71:9" pos:end="71:16"><name pos:start="71:9" pos:end="71:11">len</name> <operator pos:start="71:13" pos:end="71:14">-=</operator> <literal type="number" pos:start="71:16" pos:end="71:16">2</literal></expr>;</expr_stmt>

        <if_stmt pos:start="73:9" pos:end="75:31"><if pos:start="73:9" pos:end="75:31">if <condition pos:start="73:12" pos:end="73:31">(<expr pos:start="73:13" pos:end="73:30"><name pos:start="73:13" pos:end="73:15">len</name> <operator pos:start="73:17" pos:end="73:17">&gt;</operator> <name pos:start="73:19" pos:end="73:30"><name pos:start="73:19" pos:end="73:19">s</name><operator pos:start="73:20" pos:end="73:21">-&gt;</operator><name pos:start="73:22" pos:end="73:30">recv_used</name></name></expr>)</condition><block type="pseudo" pos:start="75:13" pos:end="75:31"><block_content pos:start="75:13" pos:end="75:31">

            <expr_stmt pos:start="75:13" pos:end="75:31"><expr pos:start="75:13" pos:end="75:30"><name pos:start="75:13" pos:end="75:15">len</name> <operator pos:start="75:17" pos:end="75:17">=</operator> <name pos:start="75:19" pos:end="75:30"><name pos:start="75:19" pos:end="75:19">s</name><operator pos:start="75:20" pos:end="75:21">-&gt;</operator><name pos:start="75:22" pos:end="75:30">recv_used</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="77:9" pos:end="83:9"><if pos:start="77:9" pos:end="83:9">if <condition pos:start="77:12" pos:end="77:17">(<expr pos:start="77:13" pos:end="77:16"><operator pos:start="77:13" pos:end="77:13">!</operator><name pos:start="77:14" pos:end="77:16">len</name></expr>)</condition> <block pos:start="77:19" pos:end="83:9">{<block_content pos:start="79:13" pos:end="81:18">

            <expr_stmt pos:start="79:13" pos:end="79:30"><expr pos:start="79:13" pos:end="79:29"><name pos:start="79:13" pos:end="79:15">ret</name> <operator pos:start="79:17" pos:end="79:17">=</operator> <name pos:start="79:19" pos:end="79:29">USB_RET_NAK</name></expr>;</expr_stmt>

            <break pos:start="81:13" pos:end="81:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="85:9" pos:end="87:28"><if pos:start="85:9" pos:end="87:28">if <condition pos:start="85:12" pos:end="85:28">(<expr pos:start="85:13" pos:end="85:27"><name pos:start="85:13" pos:end="85:21">first_len</name> <operator pos:start="85:23" pos:end="85:23">&gt;</operator> <name pos:start="85:25" pos:end="85:27">len</name></expr>)</condition><block type="pseudo" pos:start="87:13" pos:end="87:28"><block_content pos:start="87:13" pos:end="87:28">

            <expr_stmt pos:start="87:13" pos:end="87:28"><expr pos:start="87:13" pos:end="87:27"><name pos:start="87:13" pos:end="87:21">first_len</name> <operator pos:start="87:23" pos:end="87:23">=</operator> <name pos:start="87:25" pos:end="87:27">len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:59"><expr pos:start="89:9" pos:end="89:58"><call pos:start="89:9" pos:end="89:58"><name pos:start="89:9" pos:end="89:14">memcpy</name><argument_list pos:start="89:15" pos:end="89:58">(<argument pos:start="89:16" pos:end="89:19"><expr pos:start="89:16" pos:end="89:19"><name pos:start="89:16" pos:end="89:19">data</name></expr></argument>, <argument pos:start="89:22" pos:end="89:46"><expr pos:start="89:22" pos:end="89:46"><name pos:start="89:22" pos:end="89:32"><name pos:start="89:22" pos:end="89:22">s</name><operator pos:start="89:23" pos:end="89:24">-&gt;</operator><name pos:start="89:25" pos:end="89:32">recv_buf</name></name> <operator pos:start="89:34" pos:end="89:34">+</operator> <name pos:start="89:36" pos:end="89:46"><name pos:start="89:36" pos:end="89:36">s</name><operator pos:start="89:37" pos:end="89:38">-&gt;</operator><name pos:start="89:39" pos:end="89:46">recv_ptr</name></name></expr></argument>, <argument pos:start="89:49" pos:end="89:57"><expr pos:start="89:49" pos:end="89:57"><name pos:start="89:49" pos:end="89:57">first_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="91:9" pos:end="93:67"><if pos:start="91:9" pos:end="93:67">if <condition pos:start="91:12" pos:end="91:28">(<expr pos:start="91:13" pos:end="91:27"><name pos:start="91:13" pos:end="91:15">len</name> <operator pos:start="91:17" pos:end="91:17">&gt;</operator> <name pos:start="91:19" pos:end="91:27">first_len</name></expr>)</condition><block type="pseudo" pos:start="93:13" pos:end="93:67"><block_content pos:start="93:13" pos:end="93:67">

            <expr_stmt pos:start="93:13" pos:end="93:67"><expr pos:start="93:13" pos:end="93:66"><call pos:start="93:13" pos:end="93:66"><name pos:start="93:13" pos:end="93:18">memcpy</name><argument_list pos:start="93:19" pos:end="93:66">(<argument pos:start="93:20" pos:end="93:35"><expr pos:start="93:20" pos:end="93:35"><name pos:start="93:20" pos:end="93:23">data</name> <operator pos:start="93:25" pos:end="93:25">+</operator> <name pos:start="93:27" pos:end="93:35">first_len</name></expr></argument>, <argument pos:start="93:38" pos:end="93:48"><expr pos:start="93:38" pos:end="93:48"><name pos:start="93:38" pos:end="93:48"><name pos:start="93:38" pos:end="93:38">s</name><operator pos:start="93:39" pos:end="93:40">-&gt;</operator><name pos:start="93:41" pos:end="93:48">recv_buf</name></name></expr></argument>, <argument pos:start="93:51" pos:end="93:65"><expr pos:start="93:51" pos:end="93:65"><name pos:start="93:51" pos:end="93:53">len</name> <operator pos:start="93:55" pos:end="93:55">-</operator> <name pos:start="93:57" pos:end="93:65">first_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:28"><expr pos:start="95:9" pos:end="95:27"><name pos:start="95:9" pos:end="95:20"><name pos:start="95:9" pos:end="95:9">s</name><operator pos:start="95:10" pos:end="95:11">-&gt;</operator><name pos:start="95:12" pos:end="95:20">recv_used</name></name> <operator pos:start="95:22" pos:end="95:23">-=</operator> <name pos:start="95:25" pos:end="95:27">len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:53"><expr pos:start="97:9" pos:end="97:52"><name pos:start="97:9" pos:end="97:19"><name pos:start="97:9" pos:end="97:9">s</name><operator pos:start="97:10" pos:end="97:11">-&gt;</operator><name pos:start="97:12" pos:end="97:19">recv_ptr</name></name> <operator pos:start="97:21" pos:end="97:21">=</operator> <operator pos:start="97:23" pos:end="97:23">(</operator><name pos:start="97:24" pos:end="97:34"><name pos:start="97:24" pos:end="97:24">s</name><operator pos:start="97:25" pos:end="97:26">-&gt;</operator><name pos:start="97:27" pos:end="97:34">recv_ptr</name></name> <operator pos:start="97:36" pos:end="97:36">+</operator> <name pos:start="97:38" pos:end="97:40">len</name><operator pos:start="97:41" pos:end="97:41">)</operator> <operator pos:start="97:43" pos:end="97:43">%</operator> <name pos:start="97:45" pos:end="97:52">RECV_BUF</name></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:22"><expr pos:start="99:9" pos:end="99:21"><name pos:start="99:9" pos:end="99:11">ret</name> <operator pos:start="99:13" pos:end="99:13">=</operator> <name pos:start="99:15" pos:end="99:17">len</name> <operator pos:start="99:19" pos:end="99:19">+</operator> <literal type="number" pos:start="99:21" pos:end="99:21">2</literal></expr>;</expr_stmt>

        <break pos:start="101:9" pos:end="101:14">break;</break>



    <default pos:start="105:5" pos:end="105:12">default:</default>

        <expr_stmt pos:start="107:9" pos:end="107:31"><expr pos:start="107:9" pos:end="107:30"><call pos:start="107:9" pos:end="107:30"><name pos:start="107:9" pos:end="107:15">DPRINTF</name><argument_list pos:start="107:16" pos:end="107:30">(<argument pos:start="107:17" pos:end="107:29"><expr pos:start="107:17" pos:end="107:29"><literal type="string" pos:start="107:17" pos:end="107:29">"Bad token\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <label pos:start="109:5" pos:end="109:9"><name pos:start="109:5" pos:end="109:8">fail</name>:</label>

        <expr_stmt pos:start="111:9" pos:end="111:28"><expr pos:start="111:9" pos:end="111:27"><name pos:start="111:9" pos:end="111:11">ret</name> <operator pos:start="111:13" pos:end="111:13">=</operator> <name pos:start="111:15" pos:end="111:27">USB_RET_STALL</name></expr>;</expr_stmt>

        <break pos:start="113:9" pos:end="113:14">break;</break>

    </block_content>}</block></switch>



    <return pos:start="119:5" pos:end="119:15">return <expr pos:start="119:12" pos:end="119:14"><name pos:start="119:12" pos:end="119:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
