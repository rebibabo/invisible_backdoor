<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12072.c" pos:tabs="8"><function pos:start="1:1" pos:end="349:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">img_commit</name><parameter_list pos:start="1:22" pos:end="1:44">(<parameter pos:start="1:23" pos:end="1:30"><decl pos:start="1:23" pos:end="1:30"><type pos:start="1:23" pos:end="1:30"><name pos:start="1:23" pos:end="1:25">int</name></type> <name pos:start="1:27" pos:end="1:30">argc</name></decl></parameter>, <parameter pos:start="1:33" pos:end="1:43"><decl pos:start="1:33" pos:end="1:43"><type pos:start="1:33" pos:end="1:43"><name pos:start="1:33" pos:end="1:36">char</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier><modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:43">argv</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="349:1">{<block_content pos:start="5:5" pos:end="347:13">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">c</name></decl>, <decl pos:start="5:12" pos:end="5:14"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:14">ret</name></decl>, <decl pos:start="5:17" pos:end="5:21"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:17" pos:end="5:21">flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:46"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:24">filename</name></decl>, <decl pos:start="7:27" pos:end="7:30"><type ref="prev" pos:start="7:5" pos:end="7:16"><modifier pos:start="7:27" pos:end="7:27">*</modifier></type><name pos:start="7:28" pos:end="7:30">fmt</name></decl>, <decl pos:start="7:33" pos:end="7:38"><type ref="prev" pos:start="7:5" pos:end="7:16"><modifier pos:start="7:33" pos:end="7:33">*</modifier></type><name pos:start="7:34" pos:end="7:38">cache</name></decl>, <decl pos:start="7:41" pos:end="7:45"><type ref="prev" pos:start="7:5" pos:end="7:16"><modifier pos:start="7:41" pos:end="7:41">*</modifier></type><name pos:start="7:42" pos:end="7:45">base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">BlockBackend</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:21">blk</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:35"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">BlockDriverState</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:24">bs</name></decl>, <decl pos:start="11:27" pos:end="11:34"><type ref="prev" pos:start="11:5" pos:end="11:22"><modifier pos:start="11:27" pos:end="11:27">*</modifier></type><name pos:start="11:28" pos:end="11:34">base_bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">BlockJob</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:17">job</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:55"><decl pos:start="15:5" pos:end="15:25"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">bool</name></type> <name pos:start="15:10" pos:end="15:17">progress</name> <init pos:start="15:19" pos:end="15:25">= <expr pos:start="15:21" pos:end="15:25"><name pos:start="15:21" pos:end="15:25">false</name></expr></init></decl>, <decl pos:start="15:28" pos:end="15:40"><type ref="prev" pos:start="15:5" pos:end="15:8"/><name pos:start="15:28" pos:end="15:32">quiet</name> <init pos:start="15:34" pos:end="15:40">= <expr pos:start="15:36" pos:end="15:40"><name pos:start="15:36" pos:end="15:40">false</name></expr></init></decl>, <decl pos:start="15:43" pos:end="15:54"><type ref="prev" pos:start="15:5" pos:end="15:8"/><name pos:start="15:43" pos:end="15:46">drop</name> <init pos:start="15:48" pos:end="15:54">= <expr pos:start="15:50" pos:end="15:54"><name pos:start="15:50" pos:end="15:54">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">bool</name></type> <name pos:start="17:10" pos:end="17:21">writethrough</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:28"><decl pos:start="19:5" pos:end="19:27"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:9">Error</name> <modifier pos:start="19:11" pos:end="19:11">*</modifier></type><name pos:start="19:12" pos:end="19:20">local_err</name> <init pos:start="19:22" pos:end="19:27">= <expr pos:start="19:24" pos:end="19:27"><name pos:start="19:24" pos:end="19:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:29"><decl pos:start="21:5" pos:end="21:28"><type pos:start="21:5" pos:end="21:24"><name pos:start="21:5" pos:end="21:24">CommonBlockJobCBInfo</name></type> <name pos:start="21:26" pos:end="21:28">cbi</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:28"><decl pos:start="23:5" pos:end="23:27"><type pos:start="23:5" pos:end="23:8"><name pos:start="23:5" pos:end="23:8">bool</name></type> <name pos:start="23:10" pos:end="23:19">image_opts</name> <init pos:start="23:21" pos:end="23:27">= <expr pos:start="23:23" pos:end="23:27"><name pos:start="23:23" pos:end="23:27">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:28"><decl pos:start="25:5" pos:end="25:27"><type pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:14">AioContext</name> <modifier pos:start="25:16" pos:end="25:16">*</modifier></type><name pos:start="25:17" pos:end="25:27">aio_context</name></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:15"><expr pos:start="29:5" pos:end="29:14"><name pos:start="29:5" pos:end="29:7">fmt</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <name pos:start="29:11" pos:end="29:14">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:31"><expr pos:start="31:5" pos:end="31:30"><name pos:start="31:5" pos:end="31:9">cache</name> <operator pos:start="31:11" pos:end="31:11">=</operator> <name pos:start="31:13" pos:end="31:30">BDRV_DEFAULT_CACHE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:16"><expr pos:start="33:5" pos:end="33:15"><name pos:start="33:5" pos:end="33:8">base</name> <operator pos:start="33:10" pos:end="33:10">=</operator> <name pos:start="33:12" pos:end="33:15">NULL</name></expr>;</expr_stmt>

    <for pos:start="35:5" pos:end="133:5">for<control pos:start="35:8" pos:end="35:11">(<init pos:start="35:9" pos:end="35:9">;</init><condition pos:start="35:10" pos:end="35:10">;</condition><incr/>)</control> <block pos:start="35:13" pos:end="133:5">{<block_content pos:start="37:9" pos:end="131:9">

        <decl_stmt pos:start="37:9" pos:end="47:10"><decl pos:start="37:9" pos:end="47:9"><type pos:start="37:9" pos:end="37:34"><specifier pos:start="37:9" pos:end="37:14">static</specifier> <specifier pos:start="37:16" pos:end="37:20">const</specifier> <name pos:start="37:22" pos:end="37:34"><name pos:start="37:22" pos:end="37:27">struct</name> <name pos:start="37:29" pos:end="37:34">option</name></name></type> <name pos:start="37:36" pos:end="37:49"><name pos:start="37:36" pos:end="37:47">long_options</name><index pos:start="37:48" pos:end="37:49">[]</index></name> <init pos:start="37:51" pos:end="47:9">= <expr pos:start="37:53" pos:end="47:9"><block pos:start="37:53" pos:end="47:9">{

            <expr pos:start="39:13" pos:end="39:41"><block pos:start="39:13" pos:end="39:41">{<expr pos:start="39:14" pos:end="39:19"><literal type="string" pos:start="39:14" pos:end="39:19">"help"</literal></expr>, <expr pos:start="39:22" pos:end="39:32"><name pos:start="39:22" pos:end="39:32">no_argument</name></expr>, <expr pos:start="39:35" pos:end="39:35"><literal type="number" pos:start="39:35" pos:end="39:35">0</literal></expr>, <expr pos:start="39:38" pos:end="39:40"><literal type="char" pos:start="39:38" pos:end="39:40">'h'</literal></expr>}</block></expr>,

            <expr pos:start="41:13" pos:end="41:59"><block pos:start="41:13" pos:end="41:59">{<expr pos:start="41:14" pos:end="41:21"><literal type="string" pos:start="41:14" pos:end="41:21">"object"</literal></expr>, <expr pos:start="41:24" pos:end="41:40"><name pos:start="41:24" pos:end="41:40">required_argument</name></expr>, <expr pos:start="41:43" pos:end="41:43"><literal type="number" pos:start="41:43" pos:end="41:43">0</literal></expr>, <expr pos:start="41:46" pos:end="41:58"><name pos:start="41:46" pos:end="41:58">OPTION_OBJECT</name></expr>}</block></expr>,

            <expr pos:start="43:13" pos:end="43:61"><block pos:start="43:13" pos:end="43:61">{<expr pos:start="43:14" pos:end="43:25"><literal type="string" pos:start="43:14" pos:end="43:25">"image-opts"</literal></expr>, <expr pos:start="43:28" pos:end="43:38"><name pos:start="43:28" pos:end="43:38">no_argument</name></expr>, <expr pos:start="43:41" pos:end="43:41"><literal type="number" pos:start="43:41" pos:end="43:41">0</literal></expr>, <expr pos:start="43:44" pos:end="43:60"><name pos:start="43:44" pos:end="43:60">OPTION_IMAGE_OPTS</name></expr>}</block></expr>,

            <expr pos:start="45:13" pos:end="45:24"><block pos:start="45:13" pos:end="45:24">{<expr pos:start="45:14" pos:end="45:14"><literal type="number" pos:start="45:14" pos:end="45:14">0</literal></expr>, <expr pos:start="45:17" pos:end="45:17"><literal type="number" pos:start="45:17" pos:end="45:17">0</literal></expr>, <expr pos:start="45:20" pos:end="45:20"><literal type="number" pos:start="45:20" pos:end="45:20">0</literal></expr>, <expr pos:start="45:23" pos:end="45:23"><literal type="number" pos:start="45:23" pos:end="45:23">0</literal></expr>}</block></expr>

        }</block></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="49:9" pos:end="51:44"><expr pos:start="49:9" pos:end="51:43"><name pos:start="49:9" pos:end="49:9">c</name> <operator pos:start="49:11" pos:end="49:11">=</operator> <call pos:start="49:13" pos:end="51:43"><name pos:start="49:13" pos:end="49:23">getopt_long</name><argument_list pos:start="49:24" pos:end="51:43">(<argument pos:start="49:25" pos:end="49:28"><expr pos:start="49:25" pos:end="49:28"><name pos:start="49:25" pos:end="49:28">argc</name></expr></argument>, <argument pos:start="49:31" pos:end="49:34"><expr pos:start="49:31" pos:end="49:34"><name pos:start="49:31" pos:end="49:34">argv</name></expr></argument>, <argument pos:start="49:37" pos:end="49:48"><expr pos:start="49:37" pos:end="49:48"><literal type="string" pos:start="49:37" pos:end="49:48">"f:ht:b:dpq"</literal></expr></argument>,

                        <argument pos:start="51:25" pos:end="51:36"><expr pos:start="51:25" pos:end="51:36"><name pos:start="51:25" pos:end="51:36">long_options</name></expr></argument>, <argument pos:start="51:39" pos:end="51:42"><expr pos:start="51:39" pos:end="51:42"><name pos:start="51:39" pos:end="51:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="57:9"><if pos:start="53:9" pos:end="57:9">if <condition pos:start="53:12" pos:end="53:20">(<expr pos:start="53:13" pos:end="53:19"><name pos:start="53:13" pos:end="53:13">c</name> <operator pos:start="53:15" pos:end="53:16">==</operator> <operator pos:start="53:18" pos:end="53:18">-</operator><literal type="number" pos:start="53:19" pos:end="53:19">1</literal></expr>)</condition> <block pos:start="53:22" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:18">

            <break pos:start="55:13" pos:end="55:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <switch pos:start="59:9" pos:end="131:9">switch<condition pos:start="59:15" pos:end="59:17">(<expr pos:start="59:16" pos:end="59:16"><name pos:start="59:16" pos:end="59:16">c</name></expr>)</condition> <block pos:start="59:19" pos:end="131:9">{<block_content pos:start="61:9" pos:end="129:18">

        <case pos:start="61:9" pos:end="61:17">case <expr pos:start="61:14" pos:end="61:16"><literal type="char" pos:start="61:14" pos:end="61:16">'?'</literal></expr>:</case>

        <case pos:start="63:9" pos:end="63:17">case <expr pos:start="63:14" pos:end="63:16"><literal type="char" pos:start="63:14" pos:end="63:16">'h'</literal></expr>:</case>

            <expr_stmt pos:start="65:13" pos:end="65:19"><expr pos:start="65:13" pos:end="65:18"><call pos:start="65:13" pos:end="65:18"><name pos:start="65:13" pos:end="65:16">help</name><argument_list pos:start="65:17" pos:end="65:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="67:13" pos:end="67:18">break;</break>

        <case pos:start="69:9" pos:end="69:17">case <expr pos:start="69:14" pos:end="69:16"><literal type="char" pos:start="69:14" pos:end="69:16">'f'</literal></expr>:</case>

            <expr_stmt pos:start="71:13" pos:end="71:25"><expr pos:start="71:13" pos:end="71:24"><name pos:start="71:13" pos:end="71:15">fmt</name> <operator pos:start="71:17" pos:end="71:17">=</operator> <name pos:start="71:19" pos:end="71:24">optarg</name></expr>;</expr_stmt>

            <break pos:start="73:13" pos:end="73:18">break;</break>

        <case pos:start="75:9" pos:end="75:17">case <expr pos:start="75:14" pos:end="75:16"><literal type="char" pos:start="75:14" pos:end="75:16">'t'</literal></expr>:</case>

            <expr_stmt pos:start="77:13" pos:end="77:27"><expr pos:start="77:13" pos:end="77:26"><name pos:start="77:13" pos:end="77:17">cache</name> <operator pos:start="77:19" pos:end="77:19">=</operator> <name pos:start="77:21" pos:end="77:26">optarg</name></expr>;</expr_stmt>

            <break pos:start="79:13" pos:end="79:18">break;</break>

        <case pos:start="81:9" pos:end="81:17">case <expr pos:start="81:14" pos:end="81:16"><literal type="char" pos:start="81:14" pos:end="81:16">'b'</literal></expr>:</case>

            <expr_stmt pos:start="83:13" pos:end="83:26"><expr pos:start="83:13" pos:end="83:25"><name pos:start="83:13" pos:end="83:16">base</name> <operator pos:start="83:18" pos:end="83:18">=</operator> <name pos:start="83:20" pos:end="83:25">optarg</name></expr>;</expr_stmt>

            <comment type="block" pos:start="85:13" pos:end="85:31">/* -b implies -d */</comment>

            <expr_stmt pos:start="87:13" pos:end="87:24"><expr pos:start="87:13" pos:end="87:23"><name pos:start="87:13" pos:end="87:16">drop</name> <operator pos:start="87:18" pos:end="87:18">=</operator> <name pos:start="87:20" pos:end="87:23">true</name></expr>;</expr_stmt>

            <break pos:start="89:13" pos:end="89:18">break;</break>

        <case pos:start="91:9" pos:end="91:17">case <expr pos:start="91:14" pos:end="91:16"><literal type="char" pos:start="91:14" pos:end="91:16">'d'</literal></expr>:</case>

            <expr_stmt pos:start="93:13" pos:end="93:24"><expr pos:start="93:13" pos:end="93:23"><name pos:start="93:13" pos:end="93:16">drop</name> <operator pos:start="93:18" pos:end="93:18">=</operator> <name pos:start="93:20" pos:end="93:23">true</name></expr>;</expr_stmt>

            <break pos:start="95:13" pos:end="95:18">break;</break>

        <case pos:start="97:9" pos:end="97:17">case <expr pos:start="97:14" pos:end="97:16"><literal type="char" pos:start="97:14" pos:end="97:16">'p'</literal></expr>:</case>

            <expr_stmt pos:start="99:13" pos:end="99:28"><expr pos:start="99:13" pos:end="99:27"><name pos:start="99:13" pos:end="99:20">progress</name> <operator pos:start="99:22" pos:end="99:22">=</operator> <name pos:start="99:24" pos:end="99:27">true</name></expr>;</expr_stmt>

            <break pos:start="101:13" pos:end="101:18">break;</break>

        <case pos:start="103:9" pos:end="103:17">case <expr pos:start="103:14" pos:end="103:16"><literal type="char" pos:start="103:14" pos:end="103:16">'q'</literal></expr>:</case>

            <expr_stmt pos:start="105:13" pos:end="105:25"><expr pos:start="105:13" pos:end="105:24"><name pos:start="105:13" pos:end="105:17">quiet</name> <operator pos:start="105:19" pos:end="105:19">=</operator> <name pos:start="105:21" pos:end="105:24">true</name></expr>;</expr_stmt>

            <break pos:start="107:13" pos:end="107:18">break;</break>

        <case pos:start="109:9" pos:end="109:27">case <expr pos:start="109:14" pos:end="109:26"><name pos:start="109:14" pos:end="109:26">OPTION_OBJECT</name></expr>:</case> <block pos:start="109:29" pos:end="123:9">{<block_content pos:start="111:13" pos:end="121:13">

            <decl_stmt pos:start="111:13" pos:end="111:27"><decl pos:start="111:13" pos:end="111:26"><type pos:start="111:13" pos:end="111:22"><name pos:start="111:13" pos:end="111:20">QemuOpts</name> <modifier pos:start="111:22" pos:end="111:22">*</modifier></type><name pos:start="111:23" pos:end="111:26">opts</name></decl>;</decl_stmt>

            <expr_stmt pos:start="113:13" pos:end="115:57"><expr pos:start="113:13" pos:end="115:56"><name pos:start="113:13" pos:end="113:16">opts</name> <operator pos:start="113:18" pos:end="113:18">=</operator> <call pos:start="113:20" pos:end="115:56"><name pos:start="113:20" pos:end="113:42">qemu_opts_parse_noisily</name><argument_list pos:start="113:43" pos:end="115:56">(<argument pos:start="113:44" pos:end="113:60"><expr pos:start="113:44" pos:end="113:60"><operator pos:start="113:44" pos:end="113:44">&amp;</operator><name pos:start="113:45" pos:end="113:60">qemu_object_opts</name></expr></argument>,

                                           <argument pos:start="115:44" pos:end="115:49"><expr pos:start="115:44" pos:end="115:49"><name pos:start="115:44" pos:end="115:49">optarg</name></expr></argument>, <argument pos:start="115:52" pos:end="115:55"><expr pos:start="115:52" pos:end="115:55"><name pos:start="115:52" pos:end="115:55">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="117:13" pos:end="121:13"><if pos:start="117:13" pos:end="121:13">if <condition pos:start="117:16" pos:end="117:22">(<expr pos:start="117:17" pos:end="117:21"><operator pos:start="117:17" pos:end="117:17">!</operator><name pos:start="117:18" pos:end="117:21">opts</name></expr>)</condition> <block pos:start="117:24" pos:end="121:13">{<block_content pos:start="119:17" pos:end="119:25">

                <return pos:start="119:17" pos:end="119:25">return <expr pos:start="119:24" pos:end="119:24"><literal type="number" pos:start="119:24" pos:end="119:24">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>   <break pos:start="123:13" pos:end="123:18">break;</break>

        <case pos:start="125:9" pos:end="125:31">case <expr pos:start="125:14" pos:end="125:30"><name pos:start="125:14" pos:end="125:30">OPTION_IMAGE_OPTS</name></expr>:</case>

            <expr_stmt pos:start="127:13" pos:end="127:30"><expr pos:start="127:13" pos:end="127:29"><name pos:start="127:13" pos:end="127:22">image_opts</name> <operator pos:start="127:24" pos:end="127:24">=</operator> <name pos:start="127:26" pos:end="127:29">true</name></expr>;</expr_stmt>

            <break pos:start="129:13" pos:end="129:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></for>



    <comment type="block" pos:start="137:5" pos:end="137:45">/* Progress is not shown in Quiet mode */</comment>

    <if_stmt pos:start="139:5" pos:end="143:5"><if pos:start="139:5" pos:end="143:5">if <condition pos:start="139:8" pos:end="139:14">(<expr pos:start="139:9" pos:end="139:13"><name pos:start="139:9" pos:end="139:13">quiet</name></expr>)</condition> <block pos:start="139:16" pos:end="143:5">{<block_content pos:start="141:9" pos:end="141:25">

        <expr_stmt pos:start="141:9" pos:end="141:25"><expr pos:start="141:9" pos:end="141:24"><name pos:start="141:9" pos:end="141:16">progress</name> <operator pos:start="141:18" pos:end="141:18">=</operator> <name pos:start="141:20" pos:end="141:24">false</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="147:5" pos:end="151:5"><if pos:start="147:5" pos:end="151:5">if <condition pos:start="147:8" pos:end="147:27">(<expr pos:start="147:9" pos:end="147:26"><name pos:start="147:9" pos:end="147:14">optind</name> <operator pos:start="147:16" pos:end="147:17">!=</operator> <name pos:start="147:19" pos:end="147:22">argc</name> <operator pos:start="147:24" pos:end="147:24">-</operator> <literal type="number" pos:start="147:26" pos:end="147:26">1</literal></expr>)</condition> <block pos:start="147:29" pos:end="151:5">{<block_content pos:start="149:9" pos:end="149:52">

        <expr_stmt pos:start="149:9" pos:end="149:52"><expr pos:start="149:9" pos:end="149:51"><call pos:start="149:9" pos:end="149:51"><name pos:start="149:9" pos:end="149:18">error_exit</name><argument_list pos:start="149:19" pos:end="149:51">(<argument pos:start="149:20" pos:end="149:50"><expr pos:start="149:20" pos:end="149:50"><literal type="string" pos:start="149:20" pos:end="149:50">"Expecting one image file name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:30"><expr pos:start="153:5" pos:end="153:29"><name pos:start="153:5" pos:end="153:12">filename</name> <operator pos:start="153:14" pos:end="153:14">=</operator> <name pos:start="153:16" pos:end="153:29"><name pos:start="153:16" pos:end="153:19">argv</name><index pos:start="153:20" pos:end="153:29">[<expr pos:start="153:21" pos:end="153:28"><name pos:start="153:21" pos:end="153:26">optind</name><operator pos:start="153:27" pos:end="153:28">++</operator></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="157:5" pos:end="165:5"><if pos:start="157:5" pos:end="165:5">if <condition pos:start="157:8" pos:end="161:38">(<expr pos:start="157:9" pos:end="161:37"><call pos:start="157:9" pos:end="161:37"><name pos:start="157:9" pos:end="157:25">qemu_opts_foreach</name><argument_list pos:start="157:26" pos:end="161:37">(<argument pos:start="157:27" pos:end="157:43"><expr pos:start="157:27" pos:end="157:43"><operator pos:start="157:27" pos:end="157:27">&amp;</operator><name pos:start="157:28" pos:end="157:43">qemu_object_opts</name></expr></argument>,

                          <argument pos:start="159:27" pos:end="159:57"><expr pos:start="159:27" pos:end="159:57"><name pos:start="159:27" pos:end="159:57">user_creatable_add_opts_foreach</name></expr></argument>,

                          <argument pos:start="161:27" pos:end="161:30"><expr pos:start="161:27" pos:end="161:30"><name pos:start="161:27" pos:end="161:30">NULL</name></expr></argument>, <argument pos:start="161:33" pos:end="161:36"><expr pos:start="161:33" pos:end="161:36"><name pos:start="161:33" pos:end="161:36">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="161:40" pos:end="165:5">{<block_content pos:start="163:9" pos:end="163:17">

        <return pos:start="163:9" pos:end="163:17">return <expr pos:start="163:16" pos:end="163:16"><literal type="number" pos:start="163:16" pos:end="163:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="169:5" pos:end="169:39"><expr pos:start="169:5" pos:end="169:38"><name pos:start="169:5" pos:end="169:9">flags</name> <operator pos:start="169:11" pos:end="169:11">=</operator> <name pos:start="169:13" pos:end="169:23">BDRV_O_RDWR</name> <operator pos:start="169:25" pos:end="169:25">|</operator> <name pos:start="169:27" pos:end="169:38">BDRV_O_UNMAP</name></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="171:62"><expr pos:start="171:5" pos:end="171:61"><name pos:start="171:5" pos:end="171:7">ret</name> <operator pos:start="171:9" pos:end="171:9">=</operator> <call pos:start="171:11" pos:end="171:61"><name pos:start="171:11" pos:end="171:31">bdrv_parse_cache_mode</name><argument_list pos:start="171:32" pos:end="171:61">(<argument pos:start="171:33" pos:end="171:37"><expr pos:start="171:33" pos:end="171:37"><name pos:start="171:33" pos:end="171:37">cache</name></expr></argument>, <argument pos:start="171:40" pos:end="171:45"><expr pos:start="171:40" pos:end="171:45"><operator pos:start="171:40" pos:end="171:40">&amp;</operator><name pos:start="171:41" pos:end="171:45">flags</name></expr></argument>, <argument pos:start="171:48" pos:end="171:60"><expr pos:start="171:48" pos:end="171:60"><operator pos:start="171:48" pos:end="171:48">&amp;</operator><name pos:start="171:49" pos:end="171:60">writethrough</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="173:5" pos:end="179:5"><if pos:start="173:5" pos:end="179:5">if <condition pos:start="173:8" pos:end="173:16">(<expr pos:start="173:9" pos:end="173:15"><name pos:start="173:9" pos:end="173:11">ret</name> <operator pos:start="173:13" pos:end="173:13">&lt;</operator> <literal type="number" pos:start="173:15" pos:end="173:15">0</literal></expr>)</condition> <block pos:start="173:18" pos:end="179:5">{<block_content pos:start="175:9" pos:end="177:17">

        <expr_stmt pos:start="175:9" pos:end="175:56"><expr pos:start="175:9" pos:end="175:55"><call pos:start="175:9" pos:end="175:55"><name pos:start="175:9" pos:end="175:20">error_report</name><argument_list pos:start="175:21" pos:end="175:55">(<argument pos:start="175:22" pos:end="175:47"><expr pos:start="175:22" pos:end="175:47"><literal type="string" pos:start="175:22" pos:end="175:47">"Invalid cache option: %s"</literal></expr></argument>, <argument pos:start="175:50" pos:end="175:54"><expr pos:start="175:50" pos:end="175:54"><name pos:start="175:50" pos:end="175:54">cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="177:9" pos:end="177:17">return <expr pos:start="177:16" pos:end="177:16"><literal type="number" pos:start="177:16" pos:end="177:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="183:5" pos:end="183:74"><expr pos:start="183:5" pos:end="183:73"><name pos:start="183:5" pos:end="183:7">blk</name> <operator pos:start="183:9" pos:end="183:9">=</operator> <call pos:start="183:11" pos:end="183:73"><name pos:start="183:11" pos:end="183:18">img_open</name><argument_list pos:start="183:19" pos:end="183:73">(<argument pos:start="183:20" pos:end="183:29"><expr pos:start="183:20" pos:end="183:29"><name pos:start="183:20" pos:end="183:29">image_opts</name></expr></argument>, <argument pos:start="183:32" pos:end="183:39"><expr pos:start="183:32" pos:end="183:39"><name pos:start="183:32" pos:end="183:39">filename</name></expr></argument>, <argument pos:start="183:42" pos:end="183:44"><expr pos:start="183:42" pos:end="183:44"><name pos:start="183:42" pos:end="183:44">fmt</name></expr></argument>, <argument pos:start="183:47" pos:end="183:51"><expr pos:start="183:47" pos:end="183:51"><name pos:start="183:47" pos:end="183:51">flags</name></expr></argument>, <argument pos:start="183:54" pos:end="183:65"><expr pos:start="183:54" pos:end="183:65"><name pos:start="183:54" pos:end="183:65">writethrough</name></expr></argument>, <argument pos:start="183:68" pos:end="183:72"><expr pos:start="183:68" pos:end="183:72"><name pos:start="183:68" pos:end="183:72">quiet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="185:5" pos:end="189:5"><if pos:start="185:5" pos:end="189:5">if <condition pos:start="185:8" pos:end="185:13">(<expr pos:start="185:9" pos:end="185:12"><operator pos:start="185:9" pos:end="185:9">!</operator><name pos:start="185:10" pos:end="185:12">blk</name></expr>)</condition> <block pos:start="185:15" pos:end="189:5">{<block_content pos:start="187:9" pos:end="187:17">

        <return pos:start="187:9" pos:end="187:17">return <expr pos:start="187:16" pos:end="187:16"><literal type="number" pos:start="187:16" pos:end="187:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:21"><expr pos:start="191:5" pos:end="191:20"><name pos:start="191:5" pos:end="191:6">bs</name> <operator pos:start="191:8" pos:end="191:8">=</operator> <call pos:start="191:10" pos:end="191:20"><name pos:start="191:10" pos:end="191:15">blk_bs</name><argument_list pos:start="191:16" pos:end="191:20">(<argument pos:start="191:17" pos:end="191:19"><expr pos:start="191:17" pos:end="191:19"><name pos:start="191:17" pos:end="191:19">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="195:5" pos:end="195:38"><expr pos:start="195:5" pos:end="195:37"><call pos:start="195:5" pos:end="195:37"><name pos:start="195:5" pos:end="195:22">qemu_progress_init</name><argument_list pos:start="195:23" pos:end="195:37">(<argument pos:start="195:24" pos:end="195:31"><expr pos:start="195:24" pos:end="195:31"><name pos:start="195:24" pos:end="195:31">progress</name></expr></argument>, <argument pos:start="195:34" pos:end="195:36"><expr pos:start="195:34" pos:end="195:36"><literal type="number" pos:start="195:34" pos:end="195:36">1.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="197:5" pos:end="197:34"><expr pos:start="197:5" pos:end="197:33"><call pos:start="197:5" pos:end="197:33"><name pos:start="197:5" pos:end="197:23">qemu_progress_print</name><argument_list pos:start="197:24" pos:end="197:33">(<argument pos:start="197:25" pos:end="197:27"><expr pos:start="197:25" pos:end="197:27"><literal type="number" pos:start="197:25" pos:end="197:27">0.f</literal></expr></argument>, <argument pos:start="197:30" pos:end="197:32"><expr pos:start="197:30" pos:end="197:32"><literal type="number" pos:start="197:30" pos:end="197:32">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="201:5" pos:end="235:5"><if pos:start="201:5" pos:end="217:5">if <condition pos:start="201:8" pos:end="201:13">(<expr pos:start="201:9" pos:end="201:12"><name pos:start="201:9" pos:end="201:12">base</name></expr>)</condition> <block pos:start="201:15" pos:end="217:5">{<block_content pos:start="203:9" pos:end="215:9">

        <expr_stmt pos:start="203:9" pos:end="203:52"><expr pos:start="203:9" pos:end="203:51"><name pos:start="203:9" pos:end="203:15">base_bs</name> <operator pos:start="203:17" pos:end="203:17">=</operator> <call pos:start="203:19" pos:end="203:51"><name pos:start="203:19" pos:end="203:41">bdrv_find_backing_image</name><argument_list pos:start="203:42" pos:end="203:51">(<argument pos:start="203:43" pos:end="203:44"><expr pos:start="203:43" pos:end="203:44"><name pos:start="203:43" pos:end="203:44">bs</name></expr></argument>, <argument pos:start="203:47" pos:end="203:50"><expr pos:start="203:47" pos:end="203:50"><name pos:start="203:47" pos:end="203:50">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="205:9" pos:end="215:9"><if pos:start="205:9" pos:end="215:9">if <condition pos:start="205:12" pos:end="205:21">(<expr pos:start="205:13" pos:end="205:20"><operator pos:start="205:13" pos:end="205:13">!</operator><name pos:start="205:14" pos:end="205:20">base_bs</name></expr>)</condition> <block pos:start="205:23" pos:end="215:9">{<block_content pos:start="207:13" pos:end="213:22">

            <expr_stmt pos:start="207:13" pos:end="211:39"><expr pos:start="207:13" pos:end="211:38"><call pos:start="207:13" pos:end="211:38"><name pos:start="207:13" pos:end="207:22">error_setg</name><argument_list pos:start="207:23" pos:end="211:38">(<argument pos:start="207:24" pos:end="207:33"><expr pos:start="207:24" pos:end="207:33"><operator pos:start="207:24" pos:end="207:24">&amp;</operator><name pos:start="207:25" pos:end="207:33">local_err</name></expr></argument>,

                       <argument pos:start="209:24" pos:end="209:71"><expr pos:start="209:24" pos:end="209:71"><literal type="string" pos:start="209:24" pos:end="209:71">"Did not find '%s' in the backing chain of '%s'"</literal></expr></argument>,

                       <argument pos:start="211:24" pos:end="211:27"><expr pos:start="211:24" pos:end="211:27"><name pos:start="211:24" pos:end="211:27">base</name></expr></argument>, <argument pos:start="211:30" pos:end="211:37"><expr pos:start="211:30" pos:end="211:37"><name pos:start="211:30" pos:end="211:37">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="213:13" pos:end="213:22">goto <name pos:start="213:18" pos:end="213:21">done</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="217:7" pos:end="235:5">else <block pos:start="217:12" pos:end="235:5">{<block_content pos:start="225:9" pos:end="233:9">

        <comment type="block" pos:start="219:9" pos:end="223:78">/* This is different from QMP, which by default uses the deepest file in

         * the backing chain (i.e., the very base); however, the traditional

         * behavior of qemu-img commit is using the immediate backing file. */</comment>

        <expr_stmt pos:start="225:9" pos:end="225:33"><expr pos:start="225:9" pos:end="225:32"><name pos:start="225:9" pos:end="225:15">base_bs</name> <operator pos:start="225:17" pos:end="225:17">=</operator> <call pos:start="225:19" pos:end="225:32"><name pos:start="225:19" pos:end="225:28">backing_bs</name><argument_list pos:start="225:29" pos:end="225:32">(<argument pos:start="225:30" pos:end="225:31"><expr pos:start="225:30" pos:end="225:31"><name pos:start="225:30" pos:end="225:31">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="227:9" pos:end="233:9"><if pos:start="227:9" pos:end="233:9">if <condition pos:start="227:12" pos:end="227:21">(<expr pos:start="227:13" pos:end="227:20"><operator pos:start="227:13" pos:end="227:13">!</operator><name pos:start="227:14" pos:end="227:20">base_bs</name></expr>)</condition> <block pos:start="227:23" pos:end="233:9">{<block_content pos:start="229:13" pos:end="231:22">

            <expr_stmt pos:start="229:13" pos:end="229:73"><expr pos:start="229:13" pos:end="229:72"><call pos:start="229:13" pos:end="229:72"><name pos:start="229:13" pos:end="229:22">error_setg</name><argument_list pos:start="229:23" pos:end="229:72">(<argument pos:start="229:24" pos:end="229:33"><expr pos:start="229:24" pos:end="229:33"><operator pos:start="229:24" pos:end="229:24">&amp;</operator><name pos:start="229:25" pos:end="229:33">local_err</name></expr></argument>, <argument pos:start="229:36" pos:end="229:71"><expr pos:start="229:36" pos:end="229:71"><literal type="string" pos:start="229:36" pos:end="229:71">"Image does not have a backing file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="231:13" pos:end="231:22">goto <name pos:start="231:18" pos:end="231:21">done</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="239:5" pos:end="245:6"><expr pos:start="239:5" pos:end="245:5"><name pos:start="239:5" pos:end="239:7">cbi</name> <operator pos:start="239:9" pos:end="239:9">=</operator> <operator pos:start="239:11" pos:end="239:11">(</operator><name pos:start="239:12" pos:end="239:31">CommonBlockJobCBInfo</name><operator pos:start="239:32" pos:end="239:32">)</operator><block pos:start="239:33" pos:end="245:5">{

        <expr pos:start="241:9" pos:end="241:26"><operator pos:start="241:9" pos:end="241:9">.</operator><name pos:start="241:10" pos:end="241:13">errp</name> <operator pos:start="241:15" pos:end="241:15">=</operator> <operator pos:start="241:17" pos:end="241:17">&amp;</operator><name pos:start="241:18" pos:end="241:26">local_err</name></expr>,

        <expr pos:start="243:9" pos:end="243:18"><operator pos:start="243:9" pos:end="243:9">.</operator><name pos:start="243:10" pos:end="243:11">bs</name>   <operator pos:start="243:15" pos:end="243:15">=</operator> <name pos:start="243:17" pos:end="243:18">bs</name></expr>,

    }</block></expr>;</expr_stmt>



    <expr_stmt pos:start="249:5" pos:end="249:43"><expr pos:start="249:5" pos:end="249:42"><name pos:start="249:5" pos:end="249:15">aio_context</name> <operator pos:start="249:17" pos:end="249:17">=</operator> <call pos:start="249:19" pos:end="249:42"><name pos:start="249:19" pos:end="249:38">bdrv_get_aio_context</name><argument_list pos:start="249:39" pos:end="249:42">(<argument pos:start="249:40" pos:end="249:41"><expr pos:start="249:40" pos:end="249:41"><name pos:start="249:40" pos:end="249:41">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="251:5" pos:end="251:37"><expr pos:start="251:5" pos:end="251:36"><call pos:start="251:5" pos:end="251:36"><name pos:start="251:5" pos:end="251:23">aio_context_acquire</name><argument_list pos:start="251:24" pos:end="251:36">(<argument pos:start="251:25" pos:end="251:35"><expr pos:start="251:25" pos:end="251:35"><name pos:start="251:25" pos:end="251:35">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="253:5" pos:end="257:49"><expr pos:start="253:5" pos:end="257:48"><call pos:start="253:5" pos:end="257:48"><name pos:start="253:5" pos:end="253:23">commit_active_start</name><argument_list pos:start="253:24" pos:end="257:48">(<argument pos:start="253:25" pos:end="253:32"><expr pos:start="253:25" pos:end="253:32"><literal type="string" pos:start="253:25" pos:end="253:32">"commit"</literal></expr></argument>, <argument pos:start="253:35" pos:end="253:36"><expr pos:start="253:35" pos:end="253:36"><name pos:start="253:35" pos:end="253:36">bs</name></expr></argument>, <argument pos:start="253:39" pos:end="253:45"><expr pos:start="253:39" pos:end="253:45"><name pos:start="253:39" pos:end="253:45">base_bs</name></expr></argument>, <argument pos:start="253:48" pos:end="253:64"><expr pos:start="253:48" pos:end="253:64"><name pos:start="253:48" pos:end="253:64">BLOCK_JOB_DEFAULT</name></expr></argument>, <argument pos:start="253:67" pos:end="253:67"><expr pos:start="253:67" pos:end="253:67"><literal type="number" pos:start="253:67" pos:end="253:67">0</literal></expr></argument>,

                        <argument pos:start="255:25" pos:end="255:48"><expr pos:start="255:25" pos:end="255:48"><name pos:start="255:25" pos:end="255:48">BLOCKDEV_ON_ERROR_REPORT</name></expr></argument>, <argument pos:start="255:51" pos:end="255:54"><expr pos:start="255:51" pos:end="255:54"><name pos:start="255:51" pos:end="255:54">NULL</name></expr></argument>, <argument pos:start="255:57" pos:end="255:75"><expr pos:start="255:57" pos:end="255:75"><name pos:start="255:57" pos:end="255:75">common_block_job_cb</name></expr></argument>,

                        <argument pos:start="257:25" pos:end="257:28"><expr pos:start="257:25" pos:end="257:28"><operator pos:start="257:25" pos:end="257:25">&amp;</operator><name pos:start="257:26" pos:end="257:28">cbi</name></expr></argument>, <argument pos:start="257:31" pos:end="257:40"><expr pos:start="257:31" pos:end="257:40"><operator pos:start="257:31" pos:end="257:31">&amp;</operator><name pos:start="257:32" pos:end="257:40">local_err</name></expr></argument>, <argument pos:start="257:43" pos:end="257:47"><expr pos:start="257:43" pos:end="257:47"><name pos:start="257:43" pos:end="257:47">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="259:5" pos:end="259:37"><expr pos:start="259:5" pos:end="259:36"><call pos:start="259:5" pos:end="259:36"><name pos:start="259:5" pos:end="259:23">aio_context_release</name><argument_list pos:start="259:24" pos:end="259:36">(<argument pos:start="259:25" pos:end="259:35"><expr pos:start="259:25" pos:end="259:35"><name pos:start="259:25" pos:end="259:35">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="261:5" pos:end="265:5"><if pos:start="261:5" pos:end="265:5">if <condition pos:start="261:8" pos:end="261:18">(<expr pos:start="261:9" pos:end="261:17"><name pos:start="261:9" pos:end="261:17">local_err</name></expr>)</condition> <block pos:start="261:20" pos:end="265:5">{<block_content pos:start="263:9" pos:end="263:18">

        <goto pos:start="263:9" pos:end="263:18">goto <name pos:start="263:14" pos:end="263:17">done</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="269:5" pos:end="275:36">/* When the block job completes, the BlockBackend reference will point to

     * the old backing file. In order to avoid that the top image is already

     * deleted, so we can still empty it afterwards, increment the reference

     * counter here preemptively. */</comment>

    <if_stmt pos:start="277:5" pos:end="281:5"><if pos:start="277:5" pos:end="281:5">if <condition pos:start="277:8" pos:end="277:14">(<expr pos:start="277:9" pos:end="277:13"><operator pos:start="277:9" pos:end="277:9">!</operator><name pos:start="277:10" pos:end="277:13">drop</name></expr>)</condition> <block pos:start="277:16" pos:end="281:5">{<block_content pos:start="279:9" pos:end="279:21">

        <expr_stmt pos:start="279:9" pos:end="279:21"><expr pos:start="279:9" pos:end="279:20"><call pos:start="279:9" pos:end="279:20"><name pos:start="279:9" pos:end="279:16">bdrv_ref</name><argument_list pos:start="279:17" pos:end="279:20">(<argument pos:start="279:18" pos:end="279:19"><expr pos:start="279:18" pos:end="279:19"><name pos:start="279:18" pos:end="279:19">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="285:5" pos:end="285:34"><expr pos:start="285:5" pos:end="285:33"><name pos:start="285:5" pos:end="285:7">job</name> <operator pos:start="285:9" pos:end="285:9">=</operator> <call pos:start="285:11" pos:end="285:33"><name pos:start="285:11" pos:end="285:23">block_job_get</name><argument_list pos:start="285:24" pos:end="285:33">(<argument pos:start="285:25" pos:end="285:32"><expr pos:start="285:25" pos:end="285:32"><literal type="string" pos:start="285:25" pos:end="285:32">"commit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="287:5" pos:end="287:35"><expr pos:start="287:5" pos:end="287:34"><call pos:start="287:5" pos:end="287:34"><name pos:start="287:5" pos:end="287:17">run_block_job</name><argument_list pos:start="287:18" pos:end="287:34">(<argument pos:start="287:19" pos:end="287:21"><expr pos:start="287:19" pos:end="287:21"><name pos:start="287:19" pos:end="287:21">job</name></expr></argument>, <argument pos:start="287:24" pos:end="287:33"><expr pos:start="287:24" pos:end="287:33"><operator pos:start="287:24" pos:end="287:24">&amp;</operator><name pos:start="287:25" pos:end="287:33">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="289:5" pos:end="293:5"><if pos:start="289:5" pos:end="293:5">if <condition pos:start="289:8" pos:end="289:18">(<expr pos:start="289:9" pos:end="289:17"><name pos:start="289:9" pos:end="289:17">local_err</name></expr>)</condition> <block pos:start="289:20" pos:end="293:5">{<block_content pos:start="291:9" pos:end="291:27">

        <goto pos:start="291:9" pos:end="291:27">goto <name pos:start="291:14" pos:end="291:26">unref_backing</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="297:5" pos:end="311:5"><if pos:start="297:5" pos:end="311:5">if <condition pos:start="297:8" pos:end="297:42">(<expr pos:start="297:9" pos:end="297:41"><operator pos:start="297:9" pos:end="297:9">!</operator><name pos:start="297:10" pos:end="297:13">drop</name> <operator pos:start="297:15" pos:end="297:16">&amp;&amp;</operator> <name pos:start="297:18" pos:end="297:41"><name pos:start="297:18" pos:end="297:19">bs</name><operator pos:start="297:20" pos:end="297:21">-&gt;</operator><name pos:start="297:22" pos:end="297:24">drv</name><operator pos:start="297:25" pos:end="297:26">-&gt;</operator><name pos:start="297:27" pos:end="297:41">bdrv_make_empty</name></name></expr>)</condition> <block pos:start="297:44" pos:end="311:5">{<block_content pos:start="299:9" pos:end="309:9">

        <expr_stmt pos:start="299:9" pos:end="299:43"><expr pos:start="299:9" pos:end="299:42"><name pos:start="299:9" pos:end="299:11">ret</name> <operator pos:start="299:13" pos:end="299:13">=</operator> <call pos:start="299:15" pos:end="299:42"><name pos:start="299:15" pos:end="299:38"><name pos:start="299:15" pos:end="299:16">bs</name><operator pos:start="299:17" pos:end="299:18">-&gt;</operator><name pos:start="299:19" pos:end="299:21">drv</name><operator pos:start="299:22" pos:end="299:23">-&gt;</operator><name pos:start="299:24" pos:end="299:38">bdrv_make_empty</name></name><argument_list pos:start="299:39" pos:end="299:42">(<argument pos:start="299:40" pos:end="299:41"><expr pos:start="299:40" pos:end="299:41"><name pos:start="299:40" pos:end="299:41">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="301:9" pos:end="309:9"><if pos:start="301:9" pos:end="309:9">if <condition pos:start="301:12" pos:end="301:16">(<expr pos:start="301:13" pos:end="301:15"><name pos:start="301:13" pos:end="301:15">ret</name></expr>)</condition> <block pos:start="301:18" pos:end="309:9">{<block_content pos:start="303:13" pos:end="307:31">

            <expr_stmt pos:start="303:13" pos:end="305:39"><expr pos:start="303:13" pos:end="305:38"><call pos:start="303:13" pos:end="305:38"><name pos:start="303:13" pos:end="303:28">error_setg_errno</name><argument_list pos:start="303:29" pos:end="305:38">(<argument pos:start="303:30" pos:end="303:39"><expr pos:start="303:30" pos:end="303:39"><operator pos:start="303:30" pos:end="303:30">&amp;</operator><name pos:start="303:31" pos:end="303:39">local_err</name></expr></argument>, <argument pos:start="303:42" pos:end="303:45"><expr pos:start="303:42" pos:end="303:45"><operator pos:start="303:42" pos:end="303:42">-</operator><name pos:start="303:43" pos:end="303:45">ret</name></expr></argument>, <argument pos:start="303:48" pos:end="303:67"><expr pos:start="303:48" pos:end="303:67"><literal type="string" pos:start="303:48" pos:end="303:67">"Could not empty %s"</literal></expr></argument>,

                             <argument pos:start="305:30" pos:end="305:37"><expr pos:start="305:30" pos:end="305:37"><name pos:start="305:30" pos:end="305:37">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="307:13" pos:end="307:31">goto <name pos:start="307:18" pos:end="307:30">unref_backing</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="315:1" pos:end="315:14"><name pos:start="315:1" pos:end="315:13">unref_backing</name>:</label>

    <if_stmt pos:start="317:5" pos:end="321:5"><if pos:start="317:5" pos:end="321:5">if <condition pos:start="317:8" pos:end="317:14">(<expr pos:start="317:9" pos:end="317:13"><operator pos:start="317:9" pos:end="317:9">!</operator><name pos:start="317:10" pos:end="317:13">drop</name></expr>)</condition> <block pos:start="317:16" pos:end="321:5">{<block_content pos:start="319:9" pos:end="319:23">

        <expr_stmt pos:start="319:9" pos:end="319:23"><expr pos:start="319:9" pos:end="319:22"><call pos:start="319:9" pos:end="319:22"><name pos:start="319:9" pos:end="319:18">bdrv_unref</name><argument_list pos:start="319:19" pos:end="319:22">(<argument pos:start="319:20" pos:end="319:21"><expr pos:start="319:20" pos:end="319:21"><name pos:start="319:20" pos:end="319:21">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="325:1" pos:end="325:5"><name pos:start="325:1" pos:end="325:4">done</name>:</label>

    <expr_stmt pos:start="327:5" pos:end="327:24"><expr pos:start="327:5" pos:end="327:23"><call pos:start="327:5" pos:end="327:23"><name pos:start="327:5" pos:end="327:21">qemu_progress_end</name><argument_list pos:start="327:22" pos:end="327:23">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="331:5" pos:end="331:19"><expr pos:start="331:5" pos:end="331:18"><call pos:start="331:5" pos:end="331:18"><name pos:start="331:5" pos:end="331:13">blk_unref</name><argument_list pos:start="331:14" pos:end="331:18">(<argument pos:start="331:15" pos:end="331:17"><expr pos:start="331:15" pos:end="331:17"><name pos:start="331:15" pos:end="331:17">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="335:5" pos:end="341:5"><if pos:start="335:5" pos:end="341:5">if <condition pos:start="335:8" pos:end="335:18">(<expr pos:start="335:9" pos:end="335:17"><name pos:start="335:9" pos:end="335:17">local_err</name></expr>)</condition> <block pos:start="335:20" pos:end="341:5">{<block_content pos:start="337:9" pos:end="339:17">

        <expr_stmt pos:start="337:9" pos:end="337:36"><expr pos:start="337:9" pos:end="337:35"><call pos:start="337:9" pos:end="337:35"><name pos:start="337:9" pos:end="337:24">error_report_err</name><argument_list pos:start="337:25" pos:end="337:35">(<argument pos:start="337:26" pos:end="337:34"><expr pos:start="337:26" pos:end="337:34"><name pos:start="337:26" pos:end="337:34">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="339:9" pos:end="339:17">return <expr pos:start="339:16" pos:end="339:16"><literal type="number" pos:start="339:16" pos:end="339:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="345:5" pos:end="345:41"><expr pos:start="345:5" pos:end="345:40"><call pos:start="345:5" pos:end="345:40"><name pos:start="345:5" pos:end="345:11">qprintf</name><argument_list pos:start="345:12" pos:end="345:40">(<argument pos:start="345:13" pos:end="345:17"><expr pos:start="345:13" pos:end="345:17"><name pos:start="345:13" pos:end="345:17">quiet</name></expr></argument>, <argument pos:start="345:20" pos:end="345:39"><expr pos:start="345:20" pos:end="345:39"><literal type="string" pos:start="345:20" pos:end="345:39">"Image committed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="347:5" pos:end="347:13">return <expr pos:start="347:12" pos:end="347:12"><literal type="number" pos:start="347:12" pos:end="347:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
