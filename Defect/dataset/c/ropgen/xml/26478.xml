<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26478.c" pos:tabs="8"><function pos:start="1:1" pos:end="113:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:24">ff_thread_get_buffer</name><parameter_list pos:start="1:25" pos:end="1:74">(<parameter pos:start="1:26" pos:end="1:46"><decl pos:start="1:26" pos:end="1:46"><type pos:start="1:26" pos:end="1:46"><name pos:start="1:26" pos:end="1:39">AVCodecContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:46">avctx</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:62"><decl pos:start="1:49" pos:end="1:62"><type pos:start="1:49" pos:end="1:62"><name pos:start="1:49" pos:end="1:59">ThreadFrame</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:62">f</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:73"><decl pos:start="1:65" pos:end="1:73"><type pos:start="1:65" pos:end="1:73"><name pos:start="1:65" pos:end="1:67">int</name></type> <name pos:start="1:69" pos:end="1:73">flags</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="113:1">{<block_content pos:start="5:5" pos:end="111:15">

    <decl_stmt pos:start="5:5" pos:end="5:54"><decl pos:start="5:5" pos:end="5:53"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">PerThreadContext</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:23">p</name> <init pos:start="5:25" pos:end="5:53">= <expr pos:start="5:27" pos:end="5:53"><name pos:start="5:27" pos:end="5:53"><name pos:start="5:27" pos:end="5:31">avctx</name><operator pos:start="5:32" pos:end="5:33">-&gt;</operator><name pos:start="5:34" pos:end="5:41">internal</name><operator pos:start="5:42" pos:end="5:43">-&gt;</operator><name pos:start="5:44" pos:end="5:53">thread_ctx</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">err</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:21"><expr pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:5">f</name><operator pos:start="11:6" pos:end="11:7">-&gt;</operator><name pos:start="11:8" pos:end="11:12">owner</name></name> <operator pos:start="11:14" pos:end="11:14">=</operator> <name pos:start="11:16" pos:end="11:20">avctx</name></expr>;</expr_stmt>



    <if_stmt pos:start="15:5" pos:end="17:49"><if pos:start="15:5" pos:end="17:49">if <condition pos:start="15:8" pos:end="15:55">(<expr pos:start="15:9" pos:end="15:54"><operator pos:start="15:9" pos:end="15:9">!</operator><operator pos:start="15:10" pos:end="15:10">(</operator><name pos:start="15:11" pos:end="15:35"><name pos:start="15:11" pos:end="15:15">avctx</name><operator pos:start="15:16" pos:end="15:17">-&gt;</operator><name pos:start="15:18" pos:end="15:35">active_thread_type</name></name> <operator pos:start="15:37" pos:end="15:37">&amp;</operator> <name pos:start="15:39" pos:end="15:53">FF_THREAD_FRAME</name><operator pos:start="15:54" pos:end="15:54">)</operator></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:49"><block_content pos:start="17:9" pos:end="17:49">

        <return pos:start="17:9" pos:end="17:49">return <expr pos:start="17:16" pos:end="17:48"><call pos:start="17:16" pos:end="17:48"><name pos:start="17:16" pos:end="17:28">ff_get_buffer</name><argument_list pos:start="17:29" pos:end="17:48">(<argument pos:start="17:30" pos:end="17:34"><expr pos:start="17:30" pos:end="17:34"><name pos:start="17:30" pos:end="17:34">avctx</name></expr></argument>, <argument pos:start="17:37" pos:end="17:40"><expr pos:start="17:37" pos:end="17:40"><name pos:start="17:37" pos:end="17:40"><name pos:start="17:37" pos:end="17:37">f</name><operator pos:start="17:38" pos:end="17:39">-&gt;</operator><name pos:start="17:40" pos:end="17:40">f</name></name></expr></argument>, <argument pos:start="17:43" pos:end="17:47"><expr pos:start="17:43" pos:end="17:47"><name pos:start="17:43" pos:end="17:47">flags</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="21:5" pos:end="29:5"><if pos:start="21:5" pos:end="29:5">if <condition pos:start="21:8" pos:end="23:79">(<expr pos:start="21:9" pos:end="23:78"><call pos:start="21:9" pos:end="21:30"><name pos:start="21:9" pos:end="21:19">atomic_load</name><argument_list pos:start="21:20" pos:end="21:30">(<argument pos:start="21:21" pos:end="21:29"><expr pos:start="21:21" pos:end="21:29"><operator pos:start="21:21" pos:end="21:21">&amp;</operator><name pos:start="21:22" pos:end="21:29"><name pos:start="21:22" pos:end="21:22">p</name><operator pos:start="21:23" pos:end="21:24">-&gt;</operator><name pos:start="21:25" pos:end="21:29">state</name></name></expr></argument>)</argument_list></call> <operator pos:start="21:32" pos:end="21:33">!=</operator> <name pos:start="21:35" pos:end="21:50">STATE_SETTING_UP</name> <operator pos:start="21:52" pos:end="21:53">&amp;&amp;</operator>

        <operator pos:start="23:9" pos:end="23:9">(</operator><name pos:start="23:10" pos:end="23:44"><name pos:start="23:10" pos:end="23:14">avctx</name><operator pos:start="23:15" pos:end="23:16">-&gt;</operator><name pos:start="23:17" pos:end="23:21">codec</name><operator pos:start="23:22" pos:end="23:23">-&gt;</operator><name pos:start="23:24" pos:end="23:44">update_thread_context</name></name> <operator pos:start="23:46" pos:end="23:47">||</operator> <operator pos:start="23:49" pos:end="23:49">!</operator><name pos:start="23:50" pos:end="23:77"><name pos:start="23:50" pos:end="23:54">avctx</name><operator pos:start="23:55" pos:end="23:56">-&gt;</operator><name pos:start="23:57" pos:end="23:77">thread_safe_callbacks</name></name><operator pos:start="23:78" pos:end="23:78">)</operator></expr>)</condition> <block pos:start="23:81" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:18">

        <expr_stmt pos:start="25:9" pos:end="25:102"><expr pos:start="25:9" pos:end="25:101"><call pos:start="25:9" pos:end="25:101"><name pos:start="25:9" pos:end="25:14">av_log</name><argument_list pos:start="25:15" pos:end="25:101">(<argument pos:start="25:16" pos:end="25:20"><expr pos:start="25:16" pos:end="25:20"><name pos:start="25:16" pos:end="25:20">avctx</name></expr></argument>, <argument pos:start="25:23" pos:end="25:34"><expr pos:start="25:23" pos:end="25:34"><name pos:start="25:23" pos:end="25:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="25:37" pos:end="25:100"><expr pos:start="25:37" pos:end="25:100"><literal type="string" pos:start="25:37" pos:end="25:100">"get_buffer() cannot be called after ff_thread_finish_setup()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:18">return <expr pos:start="27:16" pos:end="27:17"><operator pos:start="27:16" pos:end="27:16">-</operator><literal type="number" pos:start="27:17" pos:end="27:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="33:5" pos:end="53:5"><if pos:start="33:5" pos:end="53:5">if <condition pos:start="33:8" pos:end="33:43">(<expr pos:start="33:9" pos:end="33:42"><name pos:start="33:9" pos:end="33:42"><name pos:start="33:9" pos:end="33:13">avctx</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:23">internal</name><operator pos:start="33:24" pos:end="33:25">-&gt;</operator><name pos:start="33:26" pos:end="33:42">allocate_progress</name></name></expr>)</condition> <block pos:start="33:45" pos:end="53:5">{<block_content pos:start="35:9" pos:end="51:39">

        <decl_stmt pos:start="35:9" pos:end="35:29"><decl pos:start="35:9" pos:end="35:28"><type pos:start="35:9" pos:end="35:20"><name pos:start="35:9" pos:end="35:18">atomic_int</name> <modifier pos:start="35:20" pos:end="35:20">*</modifier></type><name pos:start="35:21" pos:end="35:28">progress</name></decl>;</decl_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:61"><expr pos:start="37:9" pos:end="37:60"><name pos:start="37:9" pos:end="37:19"><name pos:start="37:9" pos:end="37:9">f</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:19">progress</name></name> <operator pos:start="37:21" pos:end="37:21">=</operator> <call pos:start="37:23" pos:end="37:60"><name pos:start="37:23" pos:end="37:37">av_buffer_alloc</name><argument_list pos:start="37:38" pos:end="37:60">(<argument pos:start="37:39" pos:end="37:59"><expr pos:start="37:39" pos:end="37:59"><literal type="number" pos:start="37:39" pos:end="37:39">2</literal> <operator pos:start="37:41" pos:end="37:41">*</operator> <sizeof pos:start="37:43" pos:end="37:59">sizeof<argument_list pos:start="37:49" pos:end="37:59">(<argument pos:start="37:50" pos:end="37:58"><expr pos:start="37:50" pos:end="37:58"><operator pos:start="37:50" pos:end="37:50">*</operator><name pos:start="37:51" pos:end="37:58">progress</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="43:9"><if pos:start="39:9" pos:end="43:9">if <condition pos:start="39:12" pos:end="39:25">(<expr pos:start="39:13" pos:end="39:24"><operator pos:start="39:13" pos:end="39:13">!</operator><name pos:start="39:14" pos:end="39:24"><name pos:start="39:14" pos:end="39:14">f</name><operator pos:start="39:15" pos:end="39:16">-&gt;</operator><name pos:start="39:17" pos:end="39:24">progress</name></name></expr>)</condition> <block pos:start="39:27" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:35">

            <return pos:start="41:13" pos:end="41:35">return <expr pos:start="41:20" pos:end="41:34"><call pos:start="41:20" pos:end="41:34"><name pos:start="41:20" pos:end="41:26">AVERROR</name><argument_list pos:start="41:27" pos:end="41:34">(<argument pos:start="41:28" pos:end="41:33"><expr pos:start="41:28" pos:end="41:33"><name pos:start="41:28" pos:end="41:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:50"><expr pos:start="45:9" pos:end="45:49"><name pos:start="45:9" pos:end="45:16">progress</name> <operator pos:start="45:18" pos:end="45:18">=</operator> <operator pos:start="45:20" pos:end="45:20">(</operator><name pos:start="45:21" pos:end="45:30">atomic_int</name><operator pos:start="45:31" pos:end="45:31">*</operator><operator pos:start="45:32" pos:end="45:32">)</operator><name pos:start="45:33" pos:end="45:49"><name pos:start="45:33" pos:end="45:33">f</name><operator pos:start="45:34" pos:end="45:35">-&gt;</operator><name pos:start="45:36" pos:end="45:43">progress</name><operator pos:start="45:44" pos:end="45:45">-&gt;</operator><name pos:start="45:46" pos:end="45:49">data</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="49:9" pos:end="49:39"><expr pos:start="49:9" pos:end="49:38"><call pos:start="49:9" pos:end="49:38"><name pos:start="49:9" pos:end="49:20">atomic_store</name><argument_list pos:start="49:21" pos:end="49:38">(<argument pos:start="49:22" pos:end="49:33"><expr pos:start="49:22" pos:end="49:33"><operator pos:start="49:22" pos:end="49:22">&amp;</operator><name pos:start="49:23" pos:end="49:33"><name pos:start="49:23" pos:end="49:30">progress</name><index pos:start="49:31" pos:end="49:33">[<expr pos:start="49:32" pos:end="49:32"><literal type="number" pos:start="49:32" pos:end="49:32">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="49:36" pos:end="49:37"><expr pos:start="49:36" pos:end="49:37"><operator pos:start="49:36" pos:end="49:36">-</operator><literal type="number" pos:start="49:37" pos:end="49:37">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:39"><expr pos:start="51:9" pos:end="51:38"><call pos:start="51:9" pos:end="51:38"><name pos:start="51:9" pos:end="51:20">atomic_store</name><argument_list pos:start="51:21" pos:end="51:38">(<argument pos:start="51:22" pos:end="51:33"><expr pos:start="51:22" pos:end="51:33"><operator pos:start="51:22" pos:end="51:22">&amp;</operator><name pos:start="51:23" pos:end="51:33"><name pos:start="51:23" pos:end="51:30">progress</name><index pos:start="51:31" pos:end="51:33">[<expr pos:start="51:32" pos:end="51:32"><literal type="number" pos:start="51:32" pos:end="51:32">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="51:36" pos:end="51:37"><expr pos:start="51:36" pos:end="51:37"><operator pos:start="51:36" pos:end="51:36">-</operator><literal type="number" pos:start="51:37" pos:end="51:37">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:49"><expr pos:start="57:5" pos:end="57:48"><call pos:start="57:5" pos:end="57:48"><name pos:start="57:5" pos:end="57:22">pthread_mutex_lock</name><argument_list pos:start="57:23" pos:end="57:48">(<argument pos:start="57:24" pos:end="57:47"><expr pos:start="57:24" pos:end="57:47"><operator pos:start="57:24" pos:end="57:24">&amp;</operator><name pos:start="57:25" pos:end="57:47"><name pos:start="57:25" pos:end="57:25">p</name><operator pos:start="57:26" pos:end="57:27">-&gt;</operator><name pos:start="57:28" pos:end="57:33">parent</name><operator pos:start="57:34" pos:end="57:35">-&gt;</operator><name pos:start="57:36" pos:end="57:47">buffer_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="93:5"><if pos:start="59:5" pos:end="65:5">if <condition pos:start="59:8" pos:end="61:58">(<expr pos:start="59:9" pos:end="61:57"><name pos:start="59:9" pos:end="59:36"><name pos:start="59:9" pos:end="59:13">avctx</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:36">thread_safe_callbacks</name></name> <operator pos:start="59:38" pos:end="59:39">||</operator>

        <name pos:start="61:9" pos:end="61:26"><name pos:start="61:9" pos:end="61:13">avctx</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:26">get_buffer2</name></name> <operator pos:start="61:28" pos:end="61:29">==</operator> <name pos:start="61:31" pos:end="61:57">avcodec_default_get_buffer2</name></expr>)</condition> <block pos:start="61:60" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:48">

        <expr_stmt pos:start="63:9" pos:end="63:48"><expr pos:start="63:9" pos:end="63:47"><name pos:start="63:9" pos:end="63:11">err</name> <operator pos:start="63:13" pos:end="63:13">=</operator> <call pos:start="63:15" pos:end="63:47"><name pos:start="63:15" pos:end="63:27">ff_get_buffer</name><argument_list pos:start="63:28" pos:end="63:47">(<argument pos:start="63:29" pos:end="63:33"><expr pos:start="63:29" pos:end="63:33"><name pos:start="63:29" pos:end="63:33">avctx</name></expr></argument>, <argument pos:start="63:36" pos:end="63:39"><expr pos:start="63:36" pos:end="63:39"><name pos:start="63:36" pos:end="63:39"><name pos:start="63:36" pos:end="63:36">f</name><operator pos:start="63:37" pos:end="63:38">-&gt;</operator><name pos:start="63:39" pos:end="63:39">f</name></name></expr></argument>, <argument pos:start="63:42" pos:end="63:46"><expr pos:start="63:42" pos:end="63:46"><name pos:start="63:42" pos:end="63:46">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="65:7" pos:end="93:5">else <block pos:start="65:12" pos:end="93:5">{<block_content pos:start="67:9" pos:end="89:49">

        <expr_stmt pos:start="67:9" pos:end="67:34"><expr pos:start="67:9" pos:end="67:33"><name pos:start="67:9" pos:end="67:26"><name pos:start="67:9" pos:end="67:9">p</name><operator pos:start="67:10" pos:end="67:11">-&gt;</operator><name pos:start="67:12" pos:end="67:26">requested_frame</name></name> <operator pos:start="67:28" pos:end="67:28">=</operator> <name pos:start="67:30" pos:end="67:33"><name pos:start="67:30" pos:end="67:30">f</name><operator pos:start="67:31" pos:end="67:32">-&gt;</operator><name pos:start="67:33" pos:end="67:33">f</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:35"><expr pos:start="69:9" pos:end="69:34"><name pos:start="69:9" pos:end="69:26"><name pos:start="69:9" pos:end="69:9">p</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:26">requested_flags</name></name> <operator pos:start="69:28" pos:end="69:28">=</operator> <name pos:start="69:30" pos:end="69:34">flags</name></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:81"><expr pos:start="71:9" pos:end="71:80"><call pos:start="71:9" pos:end="71:80"><name pos:start="71:9" pos:end="71:29">atomic_store_explicit</name><argument_list pos:start="71:30" pos:end="71:80">(<argument pos:start="71:31" pos:end="71:39"><expr pos:start="71:31" pos:end="71:39"><operator pos:start="71:31" pos:end="71:31">&amp;</operator><name pos:start="71:32" pos:end="71:39"><name pos:start="71:32" pos:end="71:32">p</name><operator pos:start="71:33" pos:end="71:34">-&gt;</operator><name pos:start="71:35" pos:end="71:39">state</name></name></expr></argument>, <argument pos:start="71:42" pos:end="71:57"><expr pos:start="71:42" pos:end="71:57"><name pos:start="71:42" pos:end="71:57">STATE_GET_BUFFER</name></expr></argument>, <argument pos:start="71:60" pos:end="71:79"><expr pos:start="71:60" pos:end="71:79"><name pos:start="71:60" pos:end="71:79">memory_order_release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:47"><expr pos:start="73:9" pos:end="73:46"><call pos:start="73:9" pos:end="73:46"><name pos:start="73:9" pos:end="73:26">pthread_mutex_lock</name><argument_list pos:start="73:27" pos:end="73:46">(<argument pos:start="73:28" pos:end="73:45"><expr pos:start="73:28" pos:end="73:45"><operator pos:start="73:28" pos:end="73:28">&amp;</operator><name pos:start="73:29" pos:end="73:45"><name pos:start="73:29" pos:end="73:29">p</name><operator pos:start="73:30" pos:end="73:31">-&gt;</operator><name pos:start="73:32" pos:end="73:45">progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:47"><expr pos:start="75:9" pos:end="75:46"><call pos:start="75:9" pos:end="75:46"><name pos:start="75:9" pos:end="75:27">pthread_cond_signal</name><argument_list pos:start="75:28" pos:end="75:46">(<argument pos:start="75:29" pos:end="75:45"><expr pos:start="75:29" pos:end="75:45"><operator pos:start="75:29" pos:end="75:29">&amp;</operator><name pos:start="75:30" pos:end="75:45"><name pos:start="75:30" pos:end="75:30">p</name><operator pos:start="75:31" pos:end="75:32">-&gt;</operator><name pos:start="75:33" pos:end="75:45">progress_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <while pos:start="79:9" pos:end="81:69">while <condition pos:start="79:15" pos:end="79:58">(<expr pos:start="79:16" pos:end="79:57"><call pos:start="79:16" pos:end="79:37"><name pos:start="79:16" pos:end="79:26">atomic_load</name><argument_list pos:start="79:27" pos:end="79:37">(<argument pos:start="79:28" pos:end="79:36"><expr pos:start="79:28" pos:end="79:36"><operator pos:start="79:28" pos:end="79:28">&amp;</operator><name pos:start="79:29" pos:end="79:36"><name pos:start="79:29" pos:end="79:29">p</name><operator pos:start="79:30" pos:end="79:31">-&gt;</operator><name pos:start="79:32" pos:end="79:36">state</name></name></expr></argument>)</argument_list></call> <operator pos:start="79:39" pos:end="79:40">!=</operator> <name pos:start="79:42" pos:end="79:57">STATE_SETTING_UP</name></expr>)</condition><block type="pseudo" pos:start="81:13" pos:end="81:69"><block_content pos:start="81:13" pos:end="81:69">

            <expr_stmt pos:start="81:13" pos:end="81:69"><expr pos:start="81:13" pos:end="81:68"><call pos:start="81:13" pos:end="81:68"><name pos:start="81:13" pos:end="81:29">pthread_cond_wait</name><argument_list pos:start="81:30" pos:end="81:68">(<argument pos:start="81:31" pos:end="81:47"><expr pos:start="81:31" pos:end="81:47"><operator pos:start="81:31" pos:end="81:31">&amp;</operator><name pos:start="81:32" pos:end="81:47"><name pos:start="81:32" pos:end="81:32">p</name><operator pos:start="81:33" pos:end="81:34">-&gt;</operator><name pos:start="81:35" pos:end="81:47">progress_cond</name></name></expr></argument>, <argument pos:start="81:50" pos:end="81:67"><expr pos:start="81:50" pos:end="81:67"><operator pos:start="81:50" pos:end="81:50">&amp;</operator><name pos:start="81:51" pos:end="81:67"><name pos:start="81:51" pos:end="81:51">p</name><operator pos:start="81:52" pos:end="81:53">-&gt;</operator><name pos:start="81:54" pos:end="81:67">progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>



        <expr_stmt pos:start="85:9" pos:end="85:24"><expr pos:start="85:9" pos:end="85:23"><name pos:start="85:9" pos:end="85:11">err</name> <operator pos:start="85:13" pos:end="85:13">=</operator> <name pos:start="85:15" pos:end="85:23"><name pos:start="85:15" pos:end="85:15">p</name><operator pos:start="85:16" pos:end="85:17">-&gt;</operator><name pos:start="85:18" pos:end="85:23">result</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="89:9" pos:end="89:49"><expr pos:start="89:9" pos:end="89:48"><call pos:start="89:9" pos:end="89:48"><name pos:start="89:9" pos:end="89:28">pthread_mutex_unlock</name><argument_list pos:start="89:29" pos:end="89:48">(<argument pos:start="89:30" pos:end="89:47"><expr pos:start="89:30" pos:end="89:47"><operator pos:start="89:30" pos:end="89:30">&amp;</operator><name pos:start="89:31" pos:end="89:47"><name pos:start="89:31" pos:end="89:31">p</name><operator pos:start="89:32" pos:end="89:33">-&gt;</operator><name pos:start="89:34" pos:end="89:47">progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="95:5" pos:end="97:38"><if pos:start="95:5" pos:end="97:38">if <condition pos:start="95:8" pos:end="95:78">(<expr pos:start="95:9" pos:end="95:77"><operator pos:start="95:9" pos:end="95:9">!</operator><name pos:start="95:10" pos:end="95:37"><name pos:start="95:10" pos:end="95:14">avctx</name><operator pos:start="95:15" pos:end="95:16">-&gt;</operator><name pos:start="95:17" pos:end="95:37">thread_safe_callbacks</name></name> <operator pos:start="95:39" pos:end="95:40">&amp;&amp;</operator> <operator pos:start="95:42" pos:end="95:42">!</operator><name pos:start="95:43" pos:end="95:77"><name pos:start="95:43" pos:end="95:47">avctx</name><operator pos:start="95:48" pos:end="95:49">-&gt;</operator><name pos:start="95:50" pos:end="95:54">codec</name><operator pos:start="95:55" pos:end="95:56">-&gt;</operator><name pos:start="95:57" pos:end="95:77">update_thread_context</name></name></expr>)</condition><block type="pseudo" pos:start="97:9" pos:end="97:38"><block_content pos:start="97:9" pos:end="97:38">

        <expr_stmt pos:start="97:9" pos:end="97:38"><expr pos:start="97:9" pos:end="97:37"><call pos:start="97:9" pos:end="97:37"><name pos:start="97:9" pos:end="97:30">ff_thread_finish_setup</name><argument_list pos:start="97:31" pos:end="97:37">(<argument pos:start="97:32" pos:end="97:36"><expr pos:start="97:32" pos:end="97:36"><name pos:start="97:32" pos:end="97:36">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="101:5" pos:end="103:38"><if pos:start="101:5" pos:end="103:38">if <condition pos:start="101:8" pos:end="101:12">(<expr pos:start="101:9" pos:end="101:11"><name pos:start="101:9" pos:end="101:11">err</name></expr>)</condition><block type="pseudo" pos:start="103:9" pos:end="103:38"><block_content pos:start="103:9" pos:end="103:38">

        <expr_stmt pos:start="103:9" pos:end="103:38"><expr pos:start="103:9" pos:end="103:37"><call pos:start="103:9" pos:end="103:37"><name pos:start="103:9" pos:end="103:23">av_buffer_unref</name><argument_list pos:start="103:24" pos:end="103:37">(<argument pos:start="103:25" pos:end="103:36"><expr pos:start="103:25" pos:end="103:36"><operator pos:start="103:25" pos:end="103:25">&amp;</operator><name pos:start="103:26" pos:end="103:36"><name pos:start="103:26" pos:end="103:26">f</name><operator pos:start="103:27" pos:end="103:28">-&gt;</operator><name pos:start="103:29" pos:end="103:36">progress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="107:5" pos:end="107:51"><expr pos:start="107:5" pos:end="107:50"><call pos:start="107:5" pos:end="107:50"><name pos:start="107:5" pos:end="107:24">pthread_mutex_unlock</name><argument_list pos:start="107:25" pos:end="107:50">(<argument pos:start="107:26" pos:end="107:49"><expr pos:start="107:26" pos:end="107:49"><operator pos:start="107:26" pos:end="107:26">&amp;</operator><name pos:start="107:27" pos:end="107:49"><name pos:start="107:27" pos:end="107:27">p</name><operator pos:start="107:28" pos:end="107:29">-&gt;</operator><name pos:start="107:30" pos:end="107:35">parent</name><operator pos:start="107:36" pos:end="107:37">-&gt;</operator><name pos:start="107:38" pos:end="107:49">buffer_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="111:5" pos:end="111:15">return <expr pos:start="111:12" pos:end="111:14"><name pos:start="111:12" pos:end="111:14">err</name></expr>;</return>

</block_content>}</block></function>
</unit>
