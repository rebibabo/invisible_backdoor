<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12168.c" pos:tabs="8"><function pos:start="1:1" pos:end="201:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">scan_for_extensions</name><parameter_list pos:start="1:31" pos:end="1:53">(<parameter pos:start="1:32" pos:end="1:52"><decl pos:start="1:32" pos:end="1:52"><type pos:start="1:32" pos:end="1:47"><name pos:start="1:32" pos:end="1:45">AVCodecContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:52">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="201:1">{<block_content pos:start="5:5" pos:end="199:15">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">DCAContext</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">s</name> <init pos:start="5:19" pos:end="5:36">= <expr pos:start="5:21" pos:end="5:36"><name pos:start="5:21" pos:end="5:36"><name pos:start="5:21" pos:end="5:25">avctx</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:19">core_ss_end</name></decl>, <decl pos:start="7:22" pos:end="7:24"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:22" pos:end="7:24">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:63"><expr pos:start="11:5" pos:end="11:62"><name pos:start="11:5" pos:end="11:15">core_ss_end</name> <operator pos:start="11:17" pos:end="11:17">=</operator> <call pos:start="11:19" pos:end="11:58"><name pos:start="11:19" pos:end="11:23">FFMIN</name><argument_list pos:start="11:24" pos:end="11:58">(<argument pos:start="11:25" pos:end="11:37"><expr pos:start="11:25" pos:end="11:37"><name pos:start="11:25" pos:end="11:37"><name pos:start="11:25" pos:end="11:25">s</name><operator pos:start="11:26" pos:end="11:27">-&gt;</operator><name pos:start="11:28" pos:end="11:37">frame_size</name></name></expr></argument>, <argument pos:start="11:40" pos:end="11:57"><expr pos:start="11:40" pos:end="11:57"><name pos:start="11:40" pos:end="11:57"><name pos:start="11:40" pos:end="11:40">s</name><operator pos:start="11:41" pos:end="11:42">-&gt;</operator><name pos:start="11:43" pos:end="11:57">dca_buffer_size</name></name></expr></argument>)</argument_list></call> <operator pos:start="11:60" pos:end="11:60">*</operator> <literal type="number" pos:start="11:62" pos:end="11:62">8</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="15:5" pos:end="17:33">/* only scan for extensions if ext_descr was unknown or indicated a

     * supported XCh extension */</comment>

    <if_stmt pos:start="19:5" pos:end="175:5"><if pos:start="19:5" pos:end="169:5">if <condition pos:start="19:8" pos:end="19:63">(<expr pos:start="19:9" pos:end="19:62"><name pos:start="19:9" pos:end="19:24"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:24">core_ext_mask</name></name> <operator pos:start="19:26" pos:end="19:26">&lt;</operator> <literal type="number" pos:start="19:28" pos:end="19:28">0</literal> <operator pos:start="19:30" pos:end="19:31">||</operator> <name pos:start="19:33" pos:end="19:48"><name pos:start="19:33" pos:end="19:33">s</name><operator pos:start="19:34" pos:end="19:35">-&gt;</operator><name pos:start="19:36" pos:end="19:48">core_ext_mask</name></name> <operator pos:start="19:50" pos:end="19:50">&amp;</operator> <name pos:start="19:52" pos:end="19:62">DCA_EXT_XCH</name></expr>)</condition> <block pos:start="19:65" pos:end="169:5">{<block_content pos:start="25:9" pos:end="167:9">

        <comment type="block" pos:start="21:9" pos:end="23:44">/* if ext_descr was unknown, clear s-&gt;core_ext_mask so that the

         * extensions scan can fill it up */</comment>

        <expr_stmt pos:start="25:9" pos:end="25:54"><expr pos:start="25:9" pos:end="25:53"><name pos:start="25:9" pos:end="25:24"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:24">core_ext_mask</name></name> <operator pos:start="25:26" pos:end="25:26">=</operator> <call pos:start="25:28" pos:end="25:53"><name pos:start="25:28" pos:end="25:32">FFMAX</name><argument_list pos:start="25:33" pos:end="25:53">(<argument pos:start="25:34" pos:end="25:49"><expr pos:start="25:34" pos:end="25:49"><name pos:start="25:34" pos:end="25:49"><name pos:start="25:34" pos:end="25:34">s</name><operator pos:start="25:35" pos:end="25:36">-&gt;</operator><name pos:start="25:37" pos:end="25:49">core_ext_mask</name></name></expr></argument>, <argument pos:start="25:52" pos:end="25:52"><expr pos:start="25:52" pos:end="25:52"><literal type="number" pos:start="25:52" pos:end="25:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="29:9" pos:end="29:66">/* extensions start at 32-bit boundaries into bitstream */</comment>

        <expr_stmt pos:start="31:9" pos:end="31:63"><expr pos:start="31:9" pos:end="31:62"><call pos:start="31:9" pos:end="31:62"><name pos:start="31:9" pos:end="31:22">skip_bits_long</name><argument_list pos:start="31:23" pos:end="31:62">(<argument pos:start="31:24" pos:end="31:29"><expr pos:start="31:24" pos:end="31:29"><operator pos:start="31:24" pos:end="31:24">&amp;</operator><name pos:start="31:25" pos:end="31:29"><name pos:start="31:25" pos:end="31:25">s</name><operator pos:start="31:26" pos:end="31:27">-&gt;</operator><name pos:start="31:28" pos:end="31:29">gb</name></name></expr></argument>, <argument pos:start="31:32" pos:end="31:61"><expr pos:start="31:32" pos:end="31:61"><operator pos:start="31:32" pos:end="31:32">(</operator><operator pos:start="31:33" pos:end="31:33">-</operator><call pos:start="31:34" pos:end="31:55"><name pos:start="31:34" pos:end="31:47">get_bits_count</name><argument_list pos:start="31:48" pos:end="31:55">(<argument pos:start="31:49" pos:end="31:54"><expr pos:start="31:49" pos:end="31:54"><operator pos:start="31:49" pos:end="31:49">&amp;</operator><name pos:start="31:50" pos:end="31:54"><name pos:start="31:50" pos:end="31:50">s</name><operator pos:start="31:51" pos:end="31:52">-&gt;</operator><name pos:start="31:53" pos:end="31:54">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="31:56" pos:end="31:56">)</operator> <operator pos:start="31:58" pos:end="31:58">&amp;</operator> <literal type="number" pos:start="31:60" pos:end="31:61">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <while pos:start="35:9" pos:end="167:9">while <condition pos:start="35:15" pos:end="35:58">(<expr pos:start="35:16" pos:end="35:57"><name pos:start="35:16" pos:end="35:26">core_ss_end</name> <operator pos:start="35:28" pos:end="35:28">-</operator> <call pos:start="35:30" pos:end="35:51"><name pos:start="35:30" pos:end="35:43">get_bits_count</name><argument_list pos:start="35:44" pos:end="35:51">(<argument pos:start="35:45" pos:end="35:50"><expr pos:start="35:45" pos:end="35:50"><operator pos:start="35:45" pos:end="35:45">&amp;</operator><name pos:start="35:46" pos:end="35:50"><name pos:start="35:46" pos:end="35:46">s</name><operator pos:start="35:47" pos:end="35:48">-&gt;</operator><name pos:start="35:49" pos:end="35:50">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="35:53" pos:end="35:54">&gt;=</operator> <literal type="number" pos:start="35:56" pos:end="35:57">32</literal></expr>)</condition> <block pos:start="35:60" pos:end="167:9">{<block_content pos:start="37:13" pos:end="165:67">

            <decl_stmt pos:start="37:13" pos:end="37:54"><decl pos:start="37:13" pos:end="37:53"><type pos:start="37:13" pos:end="37:20"><name pos:start="37:13" pos:end="37:20">uint32_t</name></type> <name pos:start="37:22" pos:end="37:25">bits</name> <init pos:start="37:27" pos:end="37:53">= <expr pos:start="37:29" pos:end="37:53"><call pos:start="37:29" pos:end="37:53"><name pos:start="37:29" pos:end="37:41">get_bits_long</name><argument_list pos:start="37:42" pos:end="37:53">(<argument pos:start="37:43" pos:end="37:48"><expr pos:start="37:43" pos:end="37:48"><operator pos:start="37:43" pos:end="37:43">&amp;</operator><name pos:start="37:44" pos:end="37:48"><name pos:start="37:44" pos:end="37:44">s</name><operator pos:start="37:45" pos:end="37:46">-&gt;</operator><name pos:start="37:47" pos:end="37:48">gb</name></name></expr></argument>, <argument pos:start="37:51" pos:end="37:52"><expr pos:start="37:51" pos:end="37:52"><literal type="number" pos:start="37:51" pos:end="37:52">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="39:13" pos:end="39:18"><decl pos:start="39:13" pos:end="39:17"><type pos:start="39:13" pos:end="39:15"><name pos:start="39:13" pos:end="39:15">int</name></type> <name pos:start="39:17" pos:end="39:17">i</name></decl>;</decl_stmt>



            <switch pos:start="43:13" pos:end="161:13">switch <condition pos:start="43:20" pos:end="43:25">(<expr pos:start="43:21" pos:end="43:24"><name pos:start="43:21" pos:end="43:24">bits</name></expr>)</condition> <block pos:start="43:27" pos:end="161:13">{<block_content pos:start="45:13" pos:end="159:13">

            <case pos:start="45:13" pos:end="45:34">case <expr pos:start="45:18" pos:end="45:33"><name pos:start="45:18" pos:end="45:33">DCA_SYNCWORD_XCH</name></expr>:</case> <block pos:start="45:36" pos:end="117:13">{<block_content pos:start="47:17" pos:end="115:22">

                <decl_stmt pos:start="47:17" pos:end="47:41"><decl pos:start="47:17" pos:end="47:29"><type pos:start="47:17" pos:end="47:19"><name pos:start="47:17" pos:end="47:19">int</name></type> <name pos:start="47:21" pos:end="47:29">ext_amode</name></decl>, <decl pos:start="47:32" pos:end="47:40"><type ref="prev" pos:start="47:17" pos:end="47:19"/><name pos:start="47:32" pos:end="47:40">xch_fsize</name></decl>;</decl_stmt>



                <expr_stmt pos:start="51:17" pos:end="51:55"><expr pos:start="51:17" pos:end="51:54"><name pos:start="51:17" pos:end="51:35"><name pos:start="51:17" pos:end="51:17">s</name><operator pos:start="51:18" pos:end="51:19">-&gt;</operator><name pos:start="51:20" pos:end="51:35">xch_base_channel</name></name> <operator pos:start="51:37" pos:end="51:37">=</operator> <name pos:start="51:39" pos:end="51:54"><name pos:start="51:39" pos:end="51:39">s</name><operator pos:start="51:40" pos:end="51:41">-&gt;</operator><name pos:start="51:42" pos:end="51:54">prim_channels</name></name></expr>;</expr_stmt>



                <comment type="block" pos:start="55:17" pos:end="55:61">/* validate sync word using XCHFSIZE field */</comment>

                <expr_stmt pos:start="57:17" pos:end="57:50"><expr pos:start="57:17" pos:end="57:49"><name pos:start="57:17" pos:end="57:25">xch_fsize</name> <operator pos:start="57:27" pos:end="57:27">=</operator> <call pos:start="57:29" pos:end="57:49"><name pos:start="57:29" pos:end="57:37">show_bits</name><argument_list pos:start="57:38" pos:end="57:49">(<argument pos:start="57:39" pos:end="57:44"><expr pos:start="57:39" pos:end="57:44"><operator pos:start="57:39" pos:end="57:39">&amp;</operator><name pos:start="57:40" pos:end="57:44"><name pos:start="57:40" pos:end="57:40">s</name><operator pos:start="57:41" pos:end="57:42">-&gt;</operator><name pos:start="57:43" pos:end="57:44">gb</name></name></expr></argument>, <argument pos:start="57:47" pos:end="57:48"><expr pos:start="57:47" pos:end="57:48"><literal type="number" pos:start="57:47" pos:end="57:48">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="59:17" pos:end="63:29"><if pos:start="59:17" pos:end="63:29">if <condition pos:start="59:20" pos:end="61:89">(<expr pos:start="59:21" pos:end="61:88"><operator pos:start="59:21" pos:end="59:21">(</operator><name pos:start="59:22" pos:end="59:34"><name pos:start="59:22" pos:end="59:22">s</name><operator pos:start="59:23" pos:end="59:24">-&gt;</operator><name pos:start="59:25" pos:end="59:34">frame_size</name></name> <operator pos:start="59:36" pos:end="59:37">!=</operator> <operator pos:start="59:39" pos:end="59:39">(</operator><call pos:start="59:40" pos:end="59:61"><name pos:start="59:40" pos:end="59:53">get_bits_count</name><argument_list pos:start="59:54" pos:end="59:61">(<argument pos:start="59:55" pos:end="59:60"><expr pos:start="59:55" pos:end="59:60"><operator pos:start="59:55" pos:end="59:55">&amp;</operator><name pos:start="59:56" pos:end="59:60"><name pos:start="59:56" pos:end="59:56">s</name><operator pos:start="59:57" pos:end="59:58">-&gt;</operator><name pos:start="59:59" pos:end="59:60">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="59:63" pos:end="59:64">&gt;&gt;</operator> <literal type="number" pos:start="59:66" pos:end="59:66">3</literal><operator pos:start="59:67" pos:end="59:67">)</operator> <operator pos:start="59:69" pos:end="59:69">-</operator> <literal type="number" pos:start="59:71" pos:end="59:73">4</literal> <operator pos:start="59:73" pos:end="59:73">+</operator> <name pos:start="59:75" pos:end="59:83">xch_fsize</name><operator pos:start="59:84" pos:end="59:84">)</operator> <operator pos:start="59:86" pos:end="59:87">&amp;&amp;</operator>

                    <operator pos:start="61:21" pos:end="61:21">(</operator><name pos:start="61:22" pos:end="61:34"><name pos:start="61:22" pos:end="61:22">s</name><operator pos:start="61:23" pos:end="61:24">-&gt;</operator><name pos:start="61:25" pos:end="61:34">frame_size</name></name> <operator pos:start="61:36" pos:end="61:37">!=</operator> <operator pos:start="61:39" pos:end="61:39">(</operator><call pos:start="61:40" pos:end="61:61"><name pos:start="61:40" pos:end="61:53">get_bits_count</name><argument_list pos:start="61:54" pos:end="61:61">(<argument pos:start="61:55" pos:end="61:60"><expr pos:start="61:55" pos:end="61:60"><operator pos:start="61:55" pos:end="61:55">&amp;</operator><name pos:start="61:56" pos:end="61:60"><name pos:start="61:56" pos:end="61:56">s</name><operator pos:start="61:57" pos:end="61:58">-&gt;</operator><name pos:start="61:59" pos:end="61:60">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="61:63" pos:end="61:64">&gt;&gt;</operator> <literal type="number" pos:start="61:66" pos:end="61:66">3</literal><operator pos:start="61:67" pos:end="61:67">)</operator> <operator pos:start="61:69" pos:end="61:69">-</operator> <literal type="number" pos:start="61:71" pos:end="61:73">4</literal> <operator pos:start="61:73" pos:end="61:73">+</operator> <name pos:start="61:75" pos:end="61:83">xch_fsize</name> <operator pos:start="61:85" pos:end="61:85">+</operator> <literal type="number" pos:start="61:87" pos:end="61:87">1</literal><operator pos:start="61:88" pos:end="61:88">)</operator></expr>)</condition><block type="pseudo" pos:start="63:21" pos:end="63:29"><block_content pos:start="63:21" pos:end="63:29">

                    <continue pos:start="63:21" pos:end="63:29">continue;</continue></block_content></block></if></if_stmt>



                <comment type="block" pos:start="67:17" pos:end="67:70">/* skip length-to-end-of-frame field for the moment */</comment>

                <expr_stmt pos:start="69:17" pos:end="69:38"><expr pos:start="69:17" pos:end="69:37"><call pos:start="69:17" pos:end="69:37"><name pos:start="69:17" pos:end="69:25">skip_bits</name><argument_list pos:start="69:26" pos:end="69:37">(<argument pos:start="69:27" pos:end="69:32"><expr pos:start="69:27" pos:end="69:32"><operator pos:start="69:27" pos:end="69:27">&amp;</operator><name pos:start="69:28" pos:end="69:32"><name pos:start="69:28" pos:end="69:28">s</name><operator pos:start="69:29" pos:end="69:30">-&gt;</operator><name pos:start="69:31" pos:end="69:32">gb</name></name></expr></argument>, <argument pos:start="69:35" pos:end="69:36"><expr pos:start="69:35" pos:end="69:36"><literal type="number" pos:start="69:35" pos:end="69:36">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="73:17" pos:end="73:48"><expr pos:start="73:17" pos:end="73:47"><name pos:start="73:17" pos:end="73:32"><name pos:start="73:17" pos:end="73:17">s</name><operator pos:start="73:18" pos:end="73:19">-&gt;</operator><name pos:start="73:20" pos:end="73:32">core_ext_mask</name></name> <operator pos:start="73:34" pos:end="73:35">|=</operator> <name pos:start="73:37" pos:end="73:47">DCA_EXT_XCH</name></expr>;</expr_stmt>



                <comment type="block" pos:start="77:17" pos:end="77:82">/* extension amode(number of channels in extension) should be 1 */</comment>

                <comment type="block" pos:start="79:17" pos:end="79:61">/* AFAIK XCh is not used for more channels */</comment>

                <if_stmt pos:start="81:17" pos:end="91:17"><if pos:start="81:17" pos:end="91:17">if <condition pos:start="81:20" pos:end="81:59">(<expr pos:start="81:21" pos:end="81:58"><operator pos:start="81:21" pos:end="81:21">(</operator><name pos:start="81:22" pos:end="81:30">ext_amode</name> <operator pos:start="81:32" pos:end="81:32">=</operator> <call pos:start="81:34" pos:end="81:52"><name pos:start="81:34" pos:end="81:41">get_bits</name><argument_list pos:start="81:42" pos:end="81:52">(<argument pos:start="81:43" pos:end="81:48"><expr pos:start="81:43" pos:end="81:48"><operator pos:start="81:43" pos:end="81:43">&amp;</operator><name pos:start="81:44" pos:end="81:48"><name pos:start="81:44" pos:end="81:44">s</name><operator pos:start="81:45" pos:end="81:46">-&gt;</operator><name pos:start="81:47" pos:end="81:48">gb</name></name></expr></argument>, <argument pos:start="81:51" pos:end="81:51"><expr pos:start="81:51" pos:end="81:51"><literal type="number" pos:start="81:51" pos:end="81:51">4</literal></expr></argument>)</argument_list></call><operator pos:start="81:53" pos:end="81:53">)</operator> <operator pos:start="81:55" pos:end="81:56">!=</operator> <literal type="number" pos:start="81:58" pos:end="81:58">1</literal></expr>)</condition> <block pos:start="81:61" pos:end="91:17">{<block_content pos:start="83:21" pos:end="89:29">

                    <expr_stmt pos:start="83:21" pos:end="87:38"><expr pos:start="83:21" pos:end="87:37"><call pos:start="83:21" pos:end="87:37"><name pos:start="83:21" pos:end="83:26">av_log</name><argument_list pos:start="83:27" pos:end="87:37">(<argument pos:start="83:28" pos:end="83:32"><expr pos:start="83:28" pos:end="83:32"><name pos:start="83:28" pos:end="83:32">avctx</name></expr></argument>, <argument pos:start="83:35" pos:end="83:46"><expr pos:start="83:35" pos:end="83:46"><name pos:start="83:35" pos:end="83:46">AV_LOG_ERROR</name></expr></argument>,

                           <argument pos:start="85:28" pos:end="85:68"><expr pos:start="85:28" pos:end="85:68"><literal type="string" pos:start="85:28" pos:end="85:68">"XCh extension amode %d not supported!\n"</literal></expr></argument>,

                           <argument pos:start="87:28" pos:end="87:36"><expr pos:start="87:28" pos:end="87:36"><name pos:start="87:28" pos:end="87:36">ext_amode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <continue pos:start="89:21" pos:end="89:29">continue;</continue>

                </block_content>}</block></if></if_stmt>



                <comment type="block" pos:start="95:17" pos:end="95:64">/* much like core primary audio coding header */</comment>

                <expr_stmt pos:start="97:17" pos:end="97:70"><expr pos:start="97:17" pos:end="97:69"><call pos:start="97:17" pos:end="97:69"><name pos:start="97:17" pos:end="97:45">dca_parse_audio_coding_header</name><argument_list pos:start="97:46" pos:end="97:69">(<argument pos:start="97:47" pos:end="97:47"><expr pos:start="97:47" pos:end="97:47"><name pos:start="97:47" pos:end="97:47">s</name></expr></argument>, <argument pos:start="97:50" pos:end="97:68"><expr pos:start="97:50" pos:end="97:68"><name pos:start="97:50" pos:end="97:68"><name pos:start="97:50" pos:end="97:50">s</name><operator pos:start="97:51" pos:end="97:52">-&gt;</operator><name pos:start="97:53" pos:end="97:68">xch_base_channel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <for pos:start="101:17" pos:end="109:21">for <control pos:start="101:21" pos:end="101:60">(<init pos:start="101:22" pos:end="101:27"><expr pos:start="101:22" pos:end="101:26"><name pos:start="101:22" pos:end="101:22">i</name> <operator pos:start="101:24" pos:end="101:24">=</operator> <literal type="number" pos:start="101:26" pos:end="101:26">0</literal></expr>;</init> <condition pos:start="101:29" pos:end="101:55"><expr pos:start="101:29" pos:end="101:54"><name pos:start="101:29" pos:end="101:29">i</name> <operator pos:start="101:31" pos:end="101:31">&lt;</operator> <operator pos:start="101:33" pos:end="101:33">(</operator><name pos:start="101:34" pos:end="101:49"><name pos:start="101:34" pos:end="101:34">s</name><operator pos:start="101:35" pos:end="101:36">-&gt;</operator><name pos:start="101:37" pos:end="101:49">sample_blocks</name></name> <operator pos:start="101:51" pos:end="101:51">/</operator> <literal type="number" pos:start="101:53" pos:end="101:53">8</literal><operator pos:start="101:54" pos:end="101:54">)</operator></expr>;</condition> <incr pos:start="101:57" pos:end="101:59"><expr pos:start="101:57" pos:end="101:59"><name pos:start="101:57" pos:end="101:57">i</name><operator pos:start="101:58" pos:end="101:59">++</operator></expr></incr>)</control><block type="pseudo" pos:start="103:21" pos:end="109:21"><block_content pos:start="103:21" pos:end="109:21">

                    <if_stmt pos:start="103:21" pos:end="109:21"><if pos:start="103:21" pos:end="109:21">if <condition pos:start="103:24" pos:end="103:76">(<expr pos:start="103:25" pos:end="103:75"><operator pos:start="103:25" pos:end="103:25">(</operator><name pos:start="103:26" pos:end="103:28">ret</name> <operator pos:start="103:30" pos:end="103:30">=</operator> <call pos:start="103:32" pos:end="103:74"><name pos:start="103:32" pos:end="103:47">dca_decode_block</name><argument_list pos:start="103:48" pos:end="103:74">(<argument pos:start="103:49" pos:end="103:49"><expr pos:start="103:49" pos:end="103:49"><name pos:start="103:49" pos:end="103:49">s</name></expr></argument>, <argument pos:start="103:52" pos:end="103:70"><expr pos:start="103:52" pos:end="103:70"><name pos:start="103:52" pos:end="103:70"><name pos:start="103:52" pos:end="103:52">s</name><operator pos:start="103:53" pos:end="103:54">-&gt;</operator><name pos:start="103:55" pos:end="103:70">xch_base_channel</name></name></expr></argument>, <argument pos:start="103:73" pos:end="103:73"><expr pos:start="103:73" pos:end="103:73"><name pos:start="103:73" pos:end="103:73">i</name></expr></argument>)</argument_list></call><operator pos:start="103:75" pos:end="103:75">)</operator></expr>)</condition> <block pos:start="103:78" pos:end="109:21">{<block_content pos:start="105:25" pos:end="107:33">

                        <expr_stmt pos:start="105:25" pos:end="105:86"><expr pos:start="105:25" pos:end="105:85"><call pos:start="105:25" pos:end="105:85"><name pos:start="105:25" pos:end="105:30">av_log</name><argument_list pos:start="105:31" pos:end="105:85">(<argument pos:start="105:32" pos:end="105:36"><expr pos:start="105:32" pos:end="105:36"><name pos:start="105:32" pos:end="105:36">avctx</name></expr></argument>, <argument pos:start="105:39" pos:end="105:50"><expr pos:start="105:39" pos:end="105:50"><name pos:start="105:39" pos:end="105:50">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="105:53" pos:end="105:84"><expr pos:start="105:53" pos:end="105:84"><literal type="string" pos:start="105:53" pos:end="105:84">"error decoding XCh extension\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <continue pos:start="107:25" pos:end="107:33">continue;</continue>

                    </block_content>}</block></if></if_stmt></block_content></block></for>



                <expr_stmt pos:start="113:17" pos:end="113:35"><expr pos:start="113:17" pos:end="113:34"><name pos:start="113:17" pos:end="113:30"><name pos:start="113:17" pos:end="113:17">s</name><operator pos:start="113:18" pos:end="113:19">-&gt;</operator><name pos:start="113:20" pos:end="113:30">xch_present</name></name> <operator pos:start="113:32" pos:end="113:32">=</operator> <literal type="number" pos:start="113:34" pos:end="113:34">1</literal></expr>;</expr_stmt>

                <break pos:start="115:17" pos:end="115:22">break;</break>

            </block_content>}</block>

            <case pos:start="119:13" pos:end="119:35">case <expr pos:start="119:18" pos:end="119:34"><name pos:start="119:18" pos:end="119:34">DCA_SYNCWORD_XXCH</name></expr>:</case>

                <comment type="block" pos:start="121:17" pos:end="121:45">/* XXCh: extended channels */</comment>

                <comment type="block" pos:start="123:17" pos:end="125:77">/* usually found either in core or HD part in DTS-HD HRA streams,

                 * but not in DTS-ES which contains XCh extensions instead */</comment>

                <expr_stmt pos:start="127:17" pos:end="127:49"><expr pos:start="127:17" pos:end="127:48"><name pos:start="127:17" pos:end="127:32"><name pos:start="127:17" pos:end="127:17">s</name><operator pos:start="127:18" pos:end="127:19">-&gt;</operator><name pos:start="127:20" pos:end="127:32">core_ext_mask</name></name> <operator pos:start="127:34" pos:end="127:35">|=</operator> <name pos:start="127:37" pos:end="127:48">DCA_EXT_XXCH</name></expr>;</expr_stmt>

                <break pos:start="129:17" pos:end="129:22">break;</break>



            <case pos:start="133:13" pos:end="133:28">case <expr pos:start="133:18" pos:end="133:27"><literal type="number" pos:start="133:18" pos:end="133:27">0x1d95f262</literal></expr>:</case> <block pos:start="133:30" pos:end="159:13">{<block_content pos:start="135:17" pos:end="157:22">

                <decl_stmt pos:start="135:17" pos:end="135:56"><decl pos:start="135:17" pos:end="135:55"><type pos:start="135:17" pos:end="135:19"><name pos:start="135:17" pos:end="135:19">int</name></type> <name pos:start="135:21" pos:end="135:27">fsize96</name> <init pos:start="135:29" pos:end="135:55">= <expr pos:start="135:31" pos:end="135:55"><call pos:start="135:31" pos:end="135:51"><name pos:start="135:31" pos:end="135:39">show_bits</name><argument_list pos:start="135:40" pos:end="135:51">(<argument pos:start="135:41" pos:end="135:46"><expr pos:start="135:41" pos:end="135:46"><operator pos:start="135:41" pos:end="135:41">&amp;</operator><name pos:start="135:42" pos:end="135:46"><name pos:start="135:42" pos:end="135:42">s</name><operator pos:start="135:43" pos:end="135:44">-&gt;</operator><name pos:start="135:45" pos:end="135:46">gb</name></name></expr></argument>, <argument pos:start="135:49" pos:end="135:50"><expr pos:start="135:49" pos:end="135:50"><literal type="number" pos:start="135:49" pos:end="135:50">12</literal></expr></argument>)</argument_list></call> <operator pos:start="135:53" pos:end="135:53">+</operator> <literal type="number" pos:start="135:55" pos:end="135:55">1</literal></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="137:17" pos:end="139:29"><if pos:start="137:17" pos:end="139:29">if <condition pos:start="137:20" pos:end="137:81">(<expr pos:start="137:21" pos:end="137:80"><name pos:start="137:21" pos:end="137:33"><name pos:start="137:21" pos:end="137:21">s</name><operator pos:start="137:22" pos:end="137:23">-&gt;</operator><name pos:start="137:24" pos:end="137:33">frame_size</name></name> <operator pos:start="137:35" pos:end="137:36">!=</operator> <operator pos:start="137:38" pos:end="137:38">(</operator><call pos:start="137:39" pos:end="137:60"><name pos:start="137:39" pos:end="137:52">get_bits_count</name><argument_list pos:start="137:53" pos:end="137:60">(<argument pos:start="137:54" pos:end="137:59"><expr pos:start="137:54" pos:end="137:59"><operator pos:start="137:54" pos:end="137:54">&amp;</operator><name pos:start="137:55" pos:end="137:59"><name pos:start="137:55" pos:end="137:55">s</name><operator pos:start="137:56" pos:end="137:57">-&gt;</operator><name pos:start="137:58" pos:end="137:59">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="137:62" pos:end="137:63">&gt;&gt;</operator> <literal type="number" pos:start="137:65" pos:end="137:65">3</literal><operator pos:start="137:66" pos:end="137:66">)</operator> <operator pos:start="137:68" pos:end="137:68">-</operator> <literal type="number" pos:start="137:70" pos:end="137:72">4</literal> <operator pos:start="137:72" pos:end="137:72">+</operator> <name pos:start="137:74" pos:end="137:80">fsize96</name></expr>)</condition><block type="pseudo" pos:start="139:21" pos:end="139:29"><block_content pos:start="139:21" pos:end="139:29">

                    <continue pos:start="139:21" pos:end="139:29">continue;</continue></block_content></block></if></if_stmt>



                <expr_stmt pos:start="143:17" pos:end="145:47"><expr pos:start="143:17" pos:end="145:46"><call pos:start="143:17" pos:end="145:46"><name pos:start="143:17" pos:end="143:22">av_log</name><argument_list pos:start="143:23" pos:end="145:46">(<argument pos:start="143:24" pos:end="143:28"><expr pos:start="143:24" pos:end="143:28"><name pos:start="143:24" pos:end="143:28">avctx</name></expr></argument>, <argument pos:start="143:31" pos:end="143:42"><expr pos:start="143:31" pos:end="143:42"><name pos:start="143:31" pos:end="143:42">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="143:45" pos:end="143:78"><expr pos:start="143:45" pos:end="143:78"><literal type="string" pos:start="143:45" pos:end="143:78">"X96 extension found at %d bits\n"</literal></expr></argument>,

                       <argument pos:start="145:24" pos:end="145:45"><expr pos:start="145:24" pos:end="145:45"><call pos:start="145:24" pos:end="145:45"><name pos:start="145:24" pos:end="145:37">get_bits_count</name><argument_list pos:start="145:38" pos:end="145:45">(<argument pos:start="145:39" pos:end="145:44"><expr pos:start="145:39" pos:end="145:44"><operator pos:start="145:39" pos:end="145:39">&amp;</operator><name pos:start="145:40" pos:end="145:44"><name pos:start="145:40" pos:end="145:40">s</name><operator pos:start="145:41" pos:end="145:42">-&gt;</operator><name pos:start="145:43" pos:end="145:44">gb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="147:17" pos:end="147:38"><expr pos:start="147:17" pos:end="147:37"><call pos:start="147:17" pos:end="147:37"><name pos:start="147:17" pos:end="147:25">skip_bits</name><argument_list pos:start="147:26" pos:end="147:37">(<argument pos:start="147:27" pos:end="147:32"><expr pos:start="147:27" pos:end="147:32"><operator pos:start="147:27" pos:end="147:27">&amp;</operator><name pos:start="147:28" pos:end="147:32"><name pos:start="147:28" pos:end="147:28">s</name><operator pos:start="147:29" pos:end="147:30">-&gt;</operator><name pos:start="147:31" pos:end="147:32">gb</name></name></expr></argument>, <argument pos:start="147:35" pos:end="147:36"><expr pos:start="147:35" pos:end="147:36"><literal type="number" pos:start="147:35" pos:end="147:36">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="149:17" pos:end="149:77"><expr pos:start="149:17" pos:end="149:76"><call pos:start="149:17" pos:end="149:76"><name pos:start="149:17" pos:end="149:22">av_log</name><argument_list pos:start="149:23" pos:end="149:76">(<argument pos:start="149:24" pos:end="149:28"><expr pos:start="149:24" pos:end="149:28"><name pos:start="149:24" pos:end="149:28">avctx</name></expr></argument>, <argument pos:start="149:31" pos:end="149:42"><expr pos:start="149:31" pos:end="149:42"><name pos:start="149:31" pos:end="149:42">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="149:45" pos:end="149:66"><expr pos:start="149:45" pos:end="149:66"><literal type="string" pos:start="149:45" pos:end="149:66">"FSIZE96 = %d bytes\n"</literal></expr></argument>, <argument pos:start="149:69" pos:end="149:75"><expr pos:start="149:69" pos:end="149:75"><name pos:start="149:69" pos:end="149:75">fsize96</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="151:17" pos:end="151:81"><expr pos:start="151:17" pos:end="151:80"><call pos:start="151:17" pos:end="151:80"><name pos:start="151:17" pos:end="151:22">av_log</name><argument_list pos:start="151:23" pos:end="151:80">(<argument pos:start="151:24" pos:end="151:28"><expr pos:start="151:24" pos:end="151:28"><name pos:start="151:24" pos:end="151:28">avctx</name></expr></argument>, <argument pos:start="151:31" pos:end="151:42"><expr pos:start="151:31" pos:end="151:42"><name pos:start="151:31" pos:end="151:42">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="151:45" pos:end="151:58"><expr pos:start="151:45" pos:end="151:58"><literal type="string" pos:start="151:45" pos:end="151:58">"REVNO = %d\n"</literal></expr></argument>, <argument pos:start="151:61" pos:end="151:79"><expr pos:start="151:61" pos:end="151:79"><call pos:start="151:61" pos:end="151:79"><name pos:start="151:61" pos:end="151:68">get_bits</name><argument_list pos:start="151:69" pos:end="151:79">(<argument pos:start="151:70" pos:end="151:75"><expr pos:start="151:70" pos:end="151:75"><operator pos:start="151:70" pos:end="151:70">&amp;</operator><name pos:start="151:71" pos:end="151:75"><name pos:start="151:71" pos:end="151:71">s</name><operator pos:start="151:72" pos:end="151:73">-&gt;</operator><name pos:start="151:74" pos:end="151:75">gb</name></name></expr></argument>, <argument pos:start="151:78" pos:end="151:78"><expr pos:start="151:78" pos:end="151:78"><literal type="number" pos:start="151:78" pos:end="151:78">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="155:17" pos:end="155:48"><expr pos:start="155:17" pos:end="155:47"><name pos:start="155:17" pos:end="155:32"><name pos:start="155:17" pos:end="155:17">s</name><operator pos:start="155:18" pos:end="155:19">-&gt;</operator><name pos:start="155:20" pos:end="155:32">core_ext_mask</name></name> <operator pos:start="155:34" pos:end="155:35">|=</operator> <name pos:start="155:37" pos:end="155:47">DCA_EXT_X96</name></expr>;</expr_stmt>

                <break pos:start="157:17" pos:end="157:22">break;</break>

            </block_content>}</block>

            </block_content>}</block></switch>



            <expr_stmt pos:start="165:13" pos:end="165:67"><expr pos:start="165:13" pos:end="165:66"><call pos:start="165:13" pos:end="165:66"><name pos:start="165:13" pos:end="165:26">skip_bits_long</name><argument_list pos:start="165:27" pos:end="165:66">(<argument pos:start="165:28" pos:end="165:33"><expr pos:start="165:28" pos:end="165:33"><operator pos:start="165:28" pos:end="165:28">&amp;</operator><name pos:start="165:29" pos:end="165:33"><name pos:start="165:29" pos:end="165:29">s</name><operator pos:start="165:30" pos:end="165:31">-&gt;</operator><name pos:start="165:32" pos:end="165:33">gb</name></name></expr></argument>, <argument pos:start="165:36" pos:end="165:65"><expr pos:start="165:36" pos:end="165:65"><operator pos:start="165:36" pos:end="165:36">(</operator><operator pos:start="165:37" pos:end="165:37">-</operator><call pos:start="165:38" pos:end="165:59"><name pos:start="165:38" pos:end="165:51">get_bits_count</name><argument_list pos:start="165:52" pos:end="165:59">(<argument pos:start="165:53" pos:end="165:58"><expr pos:start="165:53" pos:end="165:58"><operator pos:start="165:53" pos:end="165:53">&amp;</operator><name pos:start="165:54" pos:end="165:58"><name pos:start="165:54" pos:end="165:54">s</name><operator pos:start="165:55" pos:end="165:56">-&gt;</operator><name pos:start="165:57" pos:end="165:58">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="165:60" pos:end="165:60">)</operator> <operator pos:start="165:62" pos:end="165:62">&amp;</operator> <literal type="number" pos:start="165:64" pos:end="165:65">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></if> <else pos:start="169:7" pos:end="175:5">else <block pos:start="169:12" pos:end="175:5">{<block_content pos:start="173:9" pos:end="173:69">

        <comment type="block" pos:start="171:9" pos:end="171:74">/* no supported extensions, skip the rest of the core substream */</comment>

        <expr_stmt pos:start="173:9" pos:end="173:69"><expr pos:start="173:9" pos:end="173:68"><call pos:start="173:9" pos:end="173:68"><name pos:start="173:9" pos:end="173:22">skip_bits_long</name><argument_list pos:start="173:23" pos:end="173:68">(<argument pos:start="173:24" pos:end="173:29"><expr pos:start="173:24" pos:end="173:29"><operator pos:start="173:24" pos:end="173:24">&amp;</operator><name pos:start="173:25" pos:end="173:29"><name pos:start="173:25" pos:end="173:25">s</name><operator pos:start="173:26" pos:end="173:27">-&gt;</operator><name pos:start="173:28" pos:end="173:29">gb</name></name></expr></argument>, <argument pos:start="173:32" pos:end="173:67"><expr pos:start="173:32" pos:end="173:67"><name pos:start="173:32" pos:end="173:42">core_ss_end</name> <operator pos:start="173:44" pos:end="173:44">-</operator> <call pos:start="173:46" pos:end="173:67"><name pos:start="173:46" pos:end="173:59">get_bits_count</name><argument_list pos:start="173:60" pos:end="173:67">(<argument pos:start="173:61" pos:end="173:66"><expr pos:start="173:61" pos:end="173:66"><operator pos:start="173:61" pos:end="173:61">&amp;</operator><name pos:start="173:62" pos:end="173:66"><name pos:start="173:62" pos:end="173:62">s</name><operator pos:start="173:63" pos:end="173:64">-&gt;</operator><name pos:start="173:65" pos:end="173:66">gb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="179:5" pos:end="185:39"><if pos:start="179:5" pos:end="181:42">if <condition pos:start="179:8" pos:end="179:39">(<expr pos:start="179:9" pos:end="179:38"><name pos:start="179:9" pos:end="179:24"><name pos:start="179:9" pos:end="179:9">s</name><operator pos:start="179:10" pos:end="179:11">-&gt;</operator><name pos:start="179:12" pos:end="179:24">core_ext_mask</name></name> <operator pos:start="179:26" pos:end="179:26">&amp;</operator> <name pos:start="179:28" pos:end="179:38">DCA_EXT_X96</name></expr>)</condition><block type="pseudo" pos:start="181:9" pos:end="181:42"><block_content pos:start="181:9" pos:end="181:42">

        <expr_stmt pos:start="181:9" pos:end="181:42"><expr pos:start="181:9" pos:end="181:41"><name pos:start="181:9" pos:end="181:18"><name pos:start="181:9" pos:end="181:9">s</name><operator pos:start="181:10" pos:end="181:11">-&gt;</operator><name pos:start="181:12" pos:end="181:18">profile</name></name> <operator pos:start="181:20" pos:end="181:20">=</operator> <name pos:start="181:22" pos:end="181:41">FF_PROFILE_DTS_96_24</name></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="183:5" pos:end="185:39">else if <condition pos:start="183:13" pos:end="183:61">(<expr pos:start="183:14" pos:end="183:60"><name pos:start="183:14" pos:end="183:29"><name pos:start="183:14" pos:end="183:14">s</name><operator pos:start="183:15" pos:end="183:16">-&gt;</operator><name pos:start="183:17" pos:end="183:29">core_ext_mask</name></name> <operator pos:start="183:31" pos:end="183:31">&amp;</operator> <operator pos:start="183:33" pos:end="183:33">(</operator><name pos:start="183:34" pos:end="183:44">DCA_EXT_XCH</name> <operator pos:start="183:46" pos:end="183:46">|</operator> <name pos:start="183:48" pos:end="183:59">DCA_EXT_XXCH</name><operator pos:start="183:60" pos:end="183:60">)</operator></expr>)</condition><block type="pseudo" pos:start="185:9" pos:end="185:39"><block_content pos:start="185:9" pos:end="185:39">

        <expr_stmt pos:start="185:9" pos:end="185:39"><expr pos:start="185:9" pos:end="185:38"><name pos:start="185:9" pos:end="185:18"><name pos:start="185:9" pos:end="185:9">s</name><operator pos:start="185:10" pos:end="185:11">-&gt;</operator><name pos:start="185:12" pos:end="185:18">profile</name></name> <operator pos:start="185:20" pos:end="185:20">=</operator> <name pos:start="185:22" pos:end="185:38">FF_PROFILE_DTS_ES</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="189:5" pos:end="189:34">/* check for ExSS (HD part) */</comment>

    <if_stmt pos:start="191:5" pos:end="195:36"><if pos:start="191:5" pos:end="195:36">if <condition pos:start="191:8" pos:end="193:60">(<expr pos:start="191:9" pos:end="193:59"><name pos:start="191:9" pos:end="191:26"><name pos:start="191:9" pos:end="191:9">s</name><operator pos:start="191:10" pos:end="191:11">-&gt;</operator><name pos:start="191:12" pos:end="191:26">dca_buffer_size</name></name> <operator pos:start="191:28" pos:end="191:28">-</operator> <name pos:start="191:30" pos:end="191:42"><name pos:start="191:30" pos:end="191:30">s</name><operator pos:start="191:31" pos:end="191:32">-&gt;</operator><name pos:start="191:33" pos:end="191:42">frame_size</name></name> <operator pos:start="191:44" pos:end="191:44">&gt;</operator> <literal type="number" pos:start="191:46" pos:end="191:47">32</literal> <operator pos:start="191:49" pos:end="191:50">&amp;&amp;</operator>

        <call pos:start="193:9" pos:end="193:33"><name pos:start="193:9" pos:end="193:21">get_bits_long</name><argument_list pos:start="193:22" pos:end="193:33">(<argument pos:start="193:23" pos:end="193:28"><expr pos:start="193:23" pos:end="193:28"><operator pos:start="193:23" pos:end="193:23">&amp;</operator><name pos:start="193:24" pos:end="193:28"><name pos:start="193:24" pos:end="193:24">s</name><operator pos:start="193:25" pos:end="193:26">-&gt;</operator><name pos:start="193:27" pos:end="193:28">gb</name></name></expr></argument>, <argument pos:start="193:31" pos:end="193:32"><expr pos:start="193:31" pos:end="193:32"><literal type="number" pos:start="193:31" pos:end="193:32">32</literal></expr></argument>)</argument_list></call> <operator pos:start="193:35" pos:end="193:36">==</operator> <name pos:start="193:38" pos:end="193:59">DCA_SYNCWORD_SUBSTREAM</name></expr>)</condition><block type="pseudo" pos:start="195:9" pos:end="195:36"><block_content pos:start="195:9" pos:end="195:36">

        <expr_stmt pos:start="195:9" pos:end="195:36"><expr pos:start="195:9" pos:end="195:35"><call pos:start="195:9" pos:end="195:35"><name pos:start="195:9" pos:end="195:32">ff_dca_exss_parse_header</name><argument_list pos:start="195:33" pos:end="195:35">(<argument pos:start="195:34" pos:end="195:34"><expr pos:start="195:34" pos:end="195:34"><name pos:start="195:34" pos:end="195:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="199:5" pos:end="199:15">return <expr pos:start="199:12" pos:end="199:14"><name pos:start="199:12" pos:end="199:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
