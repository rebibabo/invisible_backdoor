<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24630.c" pos:tabs="8"><function pos:start="1:1" pos:end="195:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">kvm_arm_gic_get</name><parameter_list pos:start="1:28" pos:end="1:40">(<parameter pos:start="1:29" pos:end="1:39"><decl pos:start="1:29" pos:end="1:39"><type pos:start="1:29" pos:end="1:38"><name pos:start="1:29" pos:end="1:36">GICState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:39">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="195:1">{<block_content pos:start="5:5" pos:end="193:5">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:16">reg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">cpu</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:41">(<expr pos:start="13:9" pos:end="13:40"><operator pos:start="13:9" pos:end="13:9">!</operator><call pos:start="13:10" pos:end="13:40"><name pos:start="13:10" pos:end="13:37">kvm_arm_gic_can_save_restore</name><argument_list pos:start="13:38" pos:end="13:40">(<argument pos:start="13:39" pos:end="13:39"><expr pos:start="13:39" pos:end="13:39"><name pos:start="13:39" pos:end="13:39">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="13:43" pos:end="19:5">{<block_content pos:start="15:13" pos:end="17:19">

            <expr_stmt pos:start="15:13" pos:end="15:72"><expr pos:start="15:13" pos:end="15:71"><call pos:start="15:13" pos:end="15:71"><name pos:start="15:13" pos:end="15:19">DPRINTF</name><argument_list pos:start="15:20" pos:end="15:71">(<argument pos:start="15:21" pos:end="15:70"><expr pos:start="15:21" pos:end="15:70"><literal type="string" pos:start="15:21" pos:end="15:70">"Cannot get kernel gic state, no kernel interface"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="17:13" pos:end="17:19">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" format="doxygen" pos:start="23:5" pos:end="27:7">/*****************************************************************

     * Distributor State

     */</comment>



    <comment type="block" pos:start="31:5" pos:end="31:33">/* GICD_CTLR -&gt; s-&gt;enabled */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:44"><expr pos:start="33:5" pos:end="33:43"><call pos:start="33:5" pos:end="33:43"><name pos:start="33:5" pos:end="33:19">kvm_gicd_access</name><argument_list pos:start="33:20" pos:end="33:43">(<argument pos:start="33:21" pos:end="33:21"><expr pos:start="33:21" pos:end="33:21"><name pos:start="33:21" pos:end="33:21">s</name></expr></argument>, <argument pos:start="33:24" pos:end="33:26"><expr pos:start="33:24" pos:end="33:26"><literal type="number" pos:start="33:24" pos:end="33:26">0x0</literal></expr></argument>, <argument pos:start="33:29" pos:end="33:29"><expr pos:start="33:29" pos:end="33:29"><literal type="number" pos:start="33:29" pos:end="33:29">0</literal></expr></argument>, <argument pos:start="33:32" pos:end="33:35"><expr pos:start="33:32" pos:end="33:35"><operator pos:start="33:32" pos:end="33:32">&amp;</operator><name pos:start="33:33" pos:end="33:35">reg</name></expr></argument>, <argument pos:start="33:38" pos:end="33:42"><expr pos:start="33:38" pos:end="33:42"><name pos:start="33:38" pos:end="33:42">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:25"><expr pos:start="35:5" pos:end="35:24"><name pos:start="35:5" pos:end="35:14"><name pos:start="35:5" pos:end="35:5">s</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:14">enabled</name></name> <operator pos:start="35:16" pos:end="35:16">=</operator> <name pos:start="35:18" pos:end="35:20">reg</name> <operator pos:start="35:22" pos:end="35:22">&amp;</operator> <literal type="number" pos:start="35:24" pos:end="35:24">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:65">/* Sanity checking on GICD_TYPER -&gt; s-&gt;num_irq, s-&gt;num_cpu */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:44"><expr pos:start="41:5" pos:end="41:43"><call pos:start="41:5" pos:end="41:43"><name pos:start="41:5" pos:end="41:19">kvm_gicd_access</name><argument_list pos:start="41:20" pos:end="41:43">(<argument pos:start="41:21" pos:end="41:21"><expr pos:start="41:21" pos:end="41:21"><name pos:start="41:21" pos:end="41:21">s</name></expr></argument>, <argument pos:start="41:24" pos:end="41:26"><expr pos:start="41:24" pos:end="41:26"><literal type="number" pos:start="41:24" pos:end="41:26">0x4</literal></expr></argument>, <argument pos:start="41:29" pos:end="41:29"><expr pos:start="41:29" pos:end="41:29"><literal type="number" pos:start="41:29" pos:end="41:29">0</literal></expr></argument>, <argument pos:start="41:32" pos:end="41:35"><expr pos:start="41:32" pos:end="41:35"><operator pos:start="41:32" pos:end="41:32">&amp;</operator><name pos:start="41:33" pos:end="41:35">reg</name></expr></argument>, <argument pos:start="41:38" pos:end="41:42"><expr pos:start="41:38" pos:end="41:42"><name pos:start="41:38" pos:end="41:42">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:41"><expr pos:start="43:5" pos:end="43:40"><name pos:start="43:5" pos:end="43:14"><name pos:start="43:5" pos:end="43:5">s</name><operator pos:start="43:6" pos:end="43:7">-&gt;</operator><name pos:start="43:8" pos:end="43:14">num_irq</name></name> <operator pos:start="43:16" pos:end="43:16">=</operator> <operator pos:start="43:18" pos:end="43:18">(</operator><operator pos:start="43:19" pos:end="43:19">(</operator><name pos:start="43:20" pos:end="43:22">reg</name> <operator pos:start="43:24" pos:end="43:24">&amp;</operator> <literal type="number" pos:start="43:26" pos:end="43:29">0x1f</literal><operator pos:start="43:30" pos:end="43:30">)</operator> <operator pos:start="43:32" pos:end="43:32">+</operator> <literal type="number" pos:start="43:34" pos:end="43:34">1</literal><operator pos:start="43:35" pos:end="43:35">)</operator> <operator pos:start="43:37" pos:end="43:37">*</operator> <literal type="number" pos:start="43:39" pos:end="43:40">32</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:41"><expr pos:start="45:5" pos:end="45:40"><name pos:start="45:5" pos:end="45:14"><name pos:start="45:5" pos:end="45:5">s</name><operator pos:start="45:6" pos:end="45:7">-&gt;</operator><name pos:start="45:8" pos:end="45:14">num_cpu</name></name> <operator pos:start="45:16" pos:end="45:16">=</operator> <operator pos:start="45:18" pos:end="45:18">(</operator><operator pos:start="45:19" pos:end="45:19">(</operator><name pos:start="45:20" pos:end="45:22">reg</name> <operator pos:start="45:24" pos:end="45:24">&amp;</operator> <literal type="number" pos:start="45:26" pos:end="45:29">0xe0</literal><operator pos:start="45:30" pos:end="45:30">)</operator> <operator pos:start="45:32" pos:end="45:33">&gt;&gt;</operator> <literal type="number" pos:start="45:35" pos:end="45:35">5</literal><operator pos:start="45:36" pos:end="45:36">)</operator> <operator pos:start="45:38" pos:end="45:38">+</operator> <literal type="number" pos:start="45:40" pos:end="45:40">1</literal></expr>;</expr_stmt>



    <if_stmt pos:start="49:5" pos:end="57:5"><if pos:start="49:5" pos:end="57:5">if <condition pos:start="49:8" pos:end="49:32">(<expr pos:start="49:9" pos:end="49:31"><name pos:start="49:9" pos:end="49:18"><name pos:start="49:9" pos:end="49:9">s</name><operator pos:start="49:10" pos:end="49:11">-&gt;</operator><name pos:start="49:12" pos:end="49:18">num_irq</name></name> <operator pos:start="49:20" pos:end="49:20">&gt;</operator> <name pos:start="49:22" pos:end="49:31">GIC_MAXIRQ</name></expr>)</condition> <block pos:start="49:34" pos:end="57:5">{<block_content pos:start="51:13" pos:end="55:20">

            <expr_stmt pos:start="51:13" pos:end="53:32"><expr pos:start="51:13" pos:end="53:31"><call pos:start="51:13" pos:end="53:31"><name pos:start="51:13" pos:end="51:19">fprintf</name><argument_list pos:start="51:20" pos:end="53:31">(<argument pos:start="51:21" pos:end="51:26"><expr pos:start="51:21" pos:end="51:26"><name pos:start="51:21" pos:end="51:26">stderr</name></expr></argument>, <argument pos:start="51:29" pos:end="51:74"><expr pos:start="51:29" pos:end="51:74"><literal type="string" pos:start="51:29" pos:end="51:74">"Too many IRQs reported from the kernel: %d\n"</literal></expr></argument>,

                    <argument pos:start="53:21" pos:end="53:30"><expr pos:start="53:21" pos:end="53:30"><name pos:start="53:21" pos:end="53:30"><name pos:start="53:21" pos:end="53:21">s</name><operator pos:start="53:22" pos:end="53:23">-&gt;</operator><name pos:start="53:24" pos:end="53:30">num_irq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:20"><expr pos:start="55:13" pos:end="55:19"><call pos:start="55:13" pos:end="55:19"><name pos:start="55:13" pos:end="55:17">abort</name><argument_list pos:start="55:18" pos:end="55:19">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="61:5" pos:end="61:24">/* GICD_IIDR -&gt; ? */</comment>

    <expr_stmt pos:start="63:5" pos:end="63:44"><expr pos:start="63:5" pos:end="63:43"><call pos:start="63:5" pos:end="63:43"><name pos:start="63:5" pos:end="63:19">kvm_gicd_access</name><argument_list pos:start="63:20" pos:end="63:43">(<argument pos:start="63:21" pos:end="63:21"><expr pos:start="63:21" pos:end="63:21"><name pos:start="63:21" pos:end="63:21">s</name></expr></argument>, <argument pos:start="63:24" pos:end="63:26"><expr pos:start="63:24" pos:end="63:26"><literal type="number" pos:start="63:24" pos:end="63:26">0x8</literal></expr></argument>, <argument pos:start="63:29" pos:end="63:29"><expr pos:start="63:29" pos:end="63:29"><literal type="number" pos:start="63:29" pos:end="63:29">0</literal></expr></argument>, <argument pos:start="63:32" pos:end="63:35"><expr pos:start="63:32" pos:end="63:35"><operator pos:start="63:32" pos:end="63:32">&amp;</operator><name pos:start="63:33" pos:end="63:35">reg</name></expr></argument>, <argument pos:start="63:38" pos:end="63:42"><expr pos:start="63:38" pos:end="63:42"><name pos:start="63:38" pos:end="63:42">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:63">/* Verify no GROUP 1 interrupts configured in the kernel */</comment>

    <macro pos:start="69:5" pos:end="69:38"><name pos:start="69:5" pos:end="69:20">for_each_irq_reg</name><argument_list pos:start="69:21" pos:end="69:38">(<argument pos:start="69:22" pos:end="69:22">i</argument>, <argument pos:start="69:25" pos:end="69:34">s-&gt;num_irq</argument>, <argument pos:start="69:37" pos:end="69:37"><literal type="number" pos:start="69:37" pos:end="69:37">1</literal></argument>)</argument_list></macro> <block pos:start="69:40" pos:end="83:5">{<block_content pos:start="71:9" pos:end="81:9">

        <expr_stmt pos:start="71:9" pos:end="71:59"><expr pos:start="71:9" pos:end="71:58"><call pos:start="71:9" pos:end="71:58"><name pos:start="71:9" pos:end="71:23">kvm_gicd_access</name><argument_list pos:start="71:24" pos:end="71:58">(<argument pos:start="71:25" pos:end="71:25"><expr pos:start="71:25" pos:end="71:25"><name pos:start="71:25" pos:end="71:25">s</name></expr></argument>, <argument pos:start="71:28" pos:end="71:41"><expr pos:start="71:28" pos:end="71:41"><literal type="number" pos:start="71:28" pos:end="71:33">0x80</literal> <operator pos:start="71:33" pos:end="71:33">+</operator> <operator pos:start="71:35" pos:end="71:35">(</operator><name pos:start="71:36" pos:end="71:36">i</name> <operator pos:start="71:38" pos:end="71:38">*</operator> <literal type="number" pos:start="71:40" pos:end="71:40">4</literal><operator pos:start="71:41" pos:end="71:41">)</operator></expr></argument>, <argument pos:start="71:44" pos:end="71:44"><expr pos:start="71:44" pos:end="71:44"><literal type="number" pos:start="71:44" pos:end="71:44">0</literal></expr></argument>, <argument pos:start="71:47" pos:end="71:50"><expr pos:start="71:47" pos:end="71:50"><operator pos:start="71:47" pos:end="71:47">&amp;</operator><name pos:start="71:48" pos:end="71:50">reg</name></expr></argument>, <argument pos:start="71:53" pos:end="71:57"><expr pos:start="71:53" pos:end="71:57"><name pos:start="71:53" pos:end="71:57">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="73:9" pos:end="81:9"><if pos:start="73:9" pos:end="81:9">if <condition pos:start="73:12" pos:end="73:21">(<expr pos:start="73:13" pos:end="73:20"><name pos:start="73:13" pos:end="73:15">reg</name> <operator pos:start="73:17" pos:end="73:18">!=</operator> <literal type="number" pos:start="73:20" pos:end="73:20">0</literal></expr>)</condition> <block pos:start="73:23" pos:end="81:9">{<block_content pos:start="75:13" pos:end="79:20">

            <expr_stmt pos:start="75:13" pos:end="77:25"><expr pos:start="75:13" pos:end="77:24"><call pos:start="75:13" pos:end="77:24"><name pos:start="75:13" pos:end="75:19">fprintf</name><argument_list pos:start="75:20" pos:end="77:24">(<argument pos:start="75:21" pos:end="75:26"><expr pos:start="75:21" pos:end="75:26"><name pos:start="75:21" pos:end="75:26">stderr</name></expr></argument>, <argument pos:start="75:29" pos:end="75:69"><expr pos:start="75:29" pos:end="75:69"><literal type="string" pos:start="75:29" pos:end="75:69">"Unsupported GICD_IGROUPRn value: %08x\n"</literal></expr></argument>,

                    <argument pos:start="77:21" pos:end="77:23"><expr pos:start="77:21" pos:end="77:23"><name pos:start="77:21" pos:end="77:23">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:20"><expr pos:start="79:13" pos:end="79:19"><call pos:start="79:13" pos:end="79:19"><name pos:start="79:13" pos:end="79:17">abort</name><argument_list pos:start="79:18" pos:end="79:19">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>



    <comment type="block" pos:start="87:5" pos:end="87:36">/* Clear all the IRQ settings */</comment>

    <for pos:start="89:5" pos:end="93:5">for <control pos:start="89:9" pos:end="89:36">(<init pos:start="89:10" pos:end="89:15"><expr pos:start="89:10" pos:end="89:14"><name pos:start="89:10" pos:end="89:10">i</name> <operator pos:start="89:12" pos:end="89:12">=</operator> <literal type="number" pos:start="89:14" pos:end="89:14">0</literal></expr>;</init> <condition pos:start="89:17" pos:end="89:31"><expr pos:start="89:17" pos:end="89:30"><name pos:start="89:17" pos:end="89:17">i</name> <operator pos:start="89:19" pos:end="89:19">&lt;</operator> <name pos:start="89:21" pos:end="89:30"><name pos:start="89:21" pos:end="89:21">s</name><operator pos:start="89:22" pos:end="89:23">-&gt;</operator><name pos:start="89:24" pos:end="89:30">num_irq</name></name></expr>;</condition> <incr pos:start="89:33" pos:end="89:35"><expr pos:start="89:33" pos:end="89:35"><name pos:start="89:33" pos:end="89:33">i</name><operator pos:start="89:34" pos:end="89:35">++</operator></expr></incr>)</control> <block pos:start="89:38" pos:end="93:5">{<block_content pos:start="91:9" pos:end="91:61">

        <expr_stmt pos:start="91:9" pos:end="91:61"><expr pos:start="91:9" pos:end="91:60"><call pos:start="91:9" pos:end="91:60"><name pos:start="91:9" pos:end="91:14">memset</name><argument_list pos:start="91:15" pos:end="91:60">(<argument pos:start="91:16" pos:end="91:31"><expr pos:start="91:16" pos:end="91:31"><operator pos:start="91:16" pos:end="91:16">&amp;</operator><name pos:start="91:17" pos:end="91:31"><name pos:start="91:17" pos:end="91:17">s</name><operator pos:start="91:18" pos:end="91:19">-&gt;</operator><name pos:start="91:20" pos:end="91:28">irq_state</name><index pos:start="91:29" pos:end="91:31">[<expr pos:start="91:30" pos:end="91:30"><name pos:start="91:30" pos:end="91:30">i</name></expr>]</index></name></expr></argument>, <argument pos:start="91:34" pos:end="91:34"><expr pos:start="91:34" pos:end="91:34"><literal type="number" pos:start="91:34" pos:end="91:34">0</literal></expr></argument>, <argument pos:start="91:37" pos:end="91:59"><expr pos:start="91:37" pos:end="91:59"><sizeof pos:start="91:37" pos:end="91:59">sizeof<argument_list pos:start="91:43" pos:end="91:59">(<argument pos:start="91:44" pos:end="91:58"><expr pos:start="91:44" pos:end="91:58"><name pos:start="91:44" pos:end="91:58"><name pos:start="91:44" pos:end="91:44">s</name><operator pos:start="91:45" pos:end="91:46">-&gt;</operator><name pos:start="91:47" pos:end="91:55">irq_state</name><index pos:start="91:56" pos:end="91:58">[<expr pos:start="91:57" pos:end="91:57"><literal type="number" pos:start="91:57" pos:end="91:57">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="97:5" pos:end="97:49">/* GICD_ISENABLERn -&gt; irq_state[n].enabled */</comment>

    <expr_stmt pos:start="99:5" pos:end="99:61"><expr pos:start="99:5" pos:end="99:60"><call pos:start="99:5" pos:end="99:60"><name pos:start="99:5" pos:end="99:16">kvm_dist_get</name><argument_list pos:start="99:17" pos:end="99:60">(<argument pos:start="99:18" pos:end="99:18"><expr pos:start="99:18" pos:end="99:18"><name pos:start="99:18" pos:end="99:18">s</name></expr></argument>, <argument pos:start="99:21" pos:end="99:25"><expr pos:start="99:21" pos:end="99:25"><literal type="number" pos:start="99:21" pos:end="99:25">0x100</literal></expr></argument>, <argument pos:start="99:28" pos:end="99:28"><expr pos:start="99:28" pos:end="99:28"><literal type="number" pos:start="99:28" pos:end="99:28">1</literal></expr></argument>, <argument pos:start="99:31" pos:end="99:40"><expr pos:start="99:31" pos:end="99:40"><name pos:start="99:31" pos:end="99:40"><name pos:start="99:31" pos:end="99:31">s</name><operator pos:start="99:32" pos:end="99:33">-&gt;</operator><name pos:start="99:34" pos:end="99:40">num_irq</name></name></expr></argument>, <argument pos:start="99:43" pos:end="99:59"><expr pos:start="99:43" pos:end="99:59"><name pos:start="99:43" pos:end="99:59">translate_enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="103:5" pos:end="103:68">/* GICD_ISPENDRn -&gt; irq_state[n].pending + irq_state[n].level */</comment>

    <expr_stmt pos:start="105:5" pos:end="105:61"><expr pos:start="105:5" pos:end="105:60"><call pos:start="105:5" pos:end="105:60"><name pos:start="105:5" pos:end="105:16">kvm_dist_get</name><argument_list pos:start="105:17" pos:end="105:60">(<argument pos:start="105:18" pos:end="105:18"><expr pos:start="105:18" pos:end="105:18"><name pos:start="105:18" pos:end="105:18">s</name></expr></argument>, <argument pos:start="105:21" pos:end="105:25"><expr pos:start="105:21" pos:end="105:25"><literal type="number" pos:start="105:21" pos:end="105:25">0x200</literal></expr></argument>, <argument pos:start="105:28" pos:end="105:28"><expr pos:start="105:28" pos:end="105:28"><literal type="number" pos:start="105:28" pos:end="105:28">1</literal></expr></argument>, <argument pos:start="105:31" pos:end="105:40"><expr pos:start="105:31" pos:end="105:40"><name pos:start="105:31" pos:end="105:40"><name pos:start="105:31" pos:end="105:31">s</name><operator pos:start="105:32" pos:end="105:33">-&gt;</operator><name pos:start="105:34" pos:end="105:40">num_irq</name></name></expr></argument>, <argument pos:start="105:43" pos:end="105:59"><expr pos:start="105:43" pos:end="105:59"><name pos:start="105:43" pos:end="105:59">translate_pending</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="109:5" pos:end="109:48">/* GICD_ISACTIVERn -&gt; irq_state[n].active */</comment>

    <expr_stmt pos:start="111:5" pos:end="111:60"><expr pos:start="111:5" pos:end="111:59"><call pos:start="111:5" pos:end="111:59"><name pos:start="111:5" pos:end="111:16">kvm_dist_get</name><argument_list pos:start="111:17" pos:end="111:59">(<argument pos:start="111:18" pos:end="111:18"><expr pos:start="111:18" pos:end="111:18"><name pos:start="111:18" pos:end="111:18">s</name></expr></argument>, <argument pos:start="111:21" pos:end="111:25"><expr pos:start="111:21" pos:end="111:25"><literal type="number" pos:start="111:21" pos:end="111:25">0x300</literal></expr></argument>, <argument pos:start="111:28" pos:end="111:28"><expr pos:start="111:28" pos:end="111:28"><literal type="number" pos:start="111:28" pos:end="111:28">1</literal></expr></argument>, <argument pos:start="111:31" pos:end="111:40"><expr pos:start="111:31" pos:end="111:40"><name pos:start="111:31" pos:end="111:40"><name pos:start="111:31" pos:end="111:31">s</name><operator pos:start="111:32" pos:end="111:33">-&gt;</operator><name pos:start="111:34" pos:end="111:40">num_irq</name></name></expr></argument>, <argument pos:start="111:43" pos:end="111:58"><expr pos:start="111:43" pos:end="111:58"><name pos:start="111:43" pos:end="111:58">translate_active</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="115:5" pos:end="115:44">/* GICD_ICFRn -&gt; irq_state[n].trigger */</comment>

    <expr_stmt pos:start="117:5" pos:end="117:61"><expr pos:start="117:5" pos:end="117:60"><call pos:start="117:5" pos:end="117:60"><name pos:start="117:5" pos:end="117:16">kvm_dist_get</name><argument_list pos:start="117:17" pos:end="117:60">(<argument pos:start="117:18" pos:end="117:18"><expr pos:start="117:18" pos:end="117:18"><name pos:start="117:18" pos:end="117:18">s</name></expr></argument>, <argument pos:start="117:21" pos:end="117:25"><expr pos:start="117:21" pos:end="117:25"><literal type="number" pos:start="117:21" pos:end="117:25">0xc00</literal></expr></argument>, <argument pos:start="117:28" pos:end="117:28"><expr pos:start="117:28" pos:end="117:28"><literal type="number" pos:start="117:28" pos:end="117:28">2</literal></expr></argument>, <argument pos:start="117:31" pos:end="117:40"><expr pos:start="117:31" pos:end="117:40"><name pos:start="117:31" pos:end="117:40"><name pos:start="117:31" pos:end="117:31">s</name><operator pos:start="117:32" pos:end="117:33">-&gt;</operator><name pos:start="117:34" pos:end="117:40">num_irq</name></name></expr></argument>, <argument pos:start="117:43" pos:end="117:59"><expr pos:start="117:43" pos:end="117:59"><name pos:start="117:43" pos:end="117:59">translate_trigger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="121:5" pos:end="121:47">/* GICD_IPRIORITYRn -&gt; s-&gt;priorityX[irq] */</comment>

    <expr_stmt pos:start="123:5" pos:end="123:62"><expr pos:start="123:5" pos:end="123:61"><call pos:start="123:5" pos:end="123:61"><name pos:start="123:5" pos:end="123:16">kvm_dist_get</name><argument_list pos:start="123:17" pos:end="123:61">(<argument pos:start="123:18" pos:end="123:18"><expr pos:start="123:18" pos:end="123:18"><name pos:start="123:18" pos:end="123:18">s</name></expr></argument>, <argument pos:start="123:21" pos:end="123:25"><expr pos:start="123:21" pos:end="123:25"><literal type="number" pos:start="123:21" pos:end="123:25">0x400</literal></expr></argument>, <argument pos:start="123:28" pos:end="123:28"><expr pos:start="123:28" pos:end="123:28"><literal type="number" pos:start="123:28" pos:end="123:28">8</literal></expr></argument>, <argument pos:start="123:31" pos:end="123:40"><expr pos:start="123:31" pos:end="123:40"><name pos:start="123:31" pos:end="123:40"><name pos:start="123:31" pos:end="123:31">s</name><operator pos:start="123:32" pos:end="123:33">-&gt;</operator><name pos:start="123:34" pos:end="123:40">num_irq</name></name></expr></argument>, <argument pos:start="123:43" pos:end="123:60"><expr pos:start="123:43" pos:end="123:60"><name pos:start="123:43" pos:end="123:60">translate_priority</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="127:5" pos:end="127:47">/* GICD_ITARGETSRn -&gt; s-&gt;irq_target[irq] */</comment>

    <expr_stmt pos:start="129:5" pos:end="129:61"><expr pos:start="129:5" pos:end="129:60"><call pos:start="129:5" pos:end="129:60"><name pos:start="129:5" pos:end="129:16">kvm_dist_get</name><argument_list pos:start="129:17" pos:end="129:60">(<argument pos:start="129:18" pos:end="129:18"><expr pos:start="129:18" pos:end="129:18"><name pos:start="129:18" pos:end="129:18">s</name></expr></argument>, <argument pos:start="129:21" pos:end="129:25"><expr pos:start="129:21" pos:end="129:25"><literal type="number" pos:start="129:21" pos:end="129:25">0x800</literal></expr></argument>, <argument pos:start="129:28" pos:end="129:28"><expr pos:start="129:28" pos:end="129:28"><literal type="number" pos:start="129:28" pos:end="129:28">8</literal></expr></argument>, <argument pos:start="129:31" pos:end="129:40"><expr pos:start="129:31" pos:end="129:40"><name pos:start="129:31" pos:end="129:40"><name pos:start="129:31" pos:end="129:31">s</name><operator pos:start="129:32" pos:end="129:33">-&gt;</operator><name pos:start="129:34" pos:end="129:40">num_irq</name></name></expr></argument>, <argument pos:start="129:43" pos:end="129:59"><expr pos:start="129:43" pos:end="129:59"><name pos:start="129:43" pos:end="129:59">translate_targets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="133:5" pos:end="133:43">/* GICD_CPENDSGIRn -&gt; s-&gt;sgi_pending */</comment>

    <expr_stmt pos:start="135:5" pos:end="135:64"><expr pos:start="135:5" pos:end="135:63"><call pos:start="135:5" pos:end="135:63"><name pos:start="135:5" pos:end="135:16">kvm_dist_get</name><argument_list pos:start="135:17" pos:end="135:63">(<argument pos:start="135:18" pos:end="135:18"><expr pos:start="135:18" pos:end="135:18"><name pos:start="135:18" pos:end="135:18">s</name></expr></argument>, <argument pos:start="135:21" pos:end="135:25"><expr pos:start="135:21" pos:end="135:25"><literal type="number" pos:start="135:21" pos:end="135:25">0xf10</literal></expr></argument>, <argument pos:start="135:28" pos:end="135:28"><expr pos:start="135:28" pos:end="135:28"><literal type="number" pos:start="135:28" pos:end="135:28">8</literal></expr></argument>, <argument pos:start="135:31" pos:end="135:41"><expr pos:start="135:31" pos:end="135:41"><name pos:start="135:31" pos:end="135:41">GIC_NR_SGIS</name></expr></argument>, <argument pos:start="135:44" pos:end="135:62"><expr pos:start="135:44" pos:end="135:62"><name pos:start="135:44" pos:end="135:62">translate_sgisource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <comment type="block" format="doxygen" pos:start="141:5" pos:end="145:7">/*****************************************************************

     * CPU Interface(s) State

     */</comment>



    <for pos:start="149:5" pos:end="193:5">for <control pos:start="149:9" pos:end="149:42">(<init pos:start="149:10" pos:end="149:17"><expr pos:start="149:10" pos:end="149:16"><name pos:start="149:10" pos:end="149:12">cpu</name> <operator pos:start="149:14" pos:end="149:14">=</operator> <literal type="number" pos:start="149:16" pos:end="149:16">0</literal></expr>;</init> <condition pos:start="149:19" pos:end="149:35"><expr pos:start="149:19" pos:end="149:34"><name pos:start="149:19" pos:end="149:21">cpu</name> <operator pos:start="149:23" pos:end="149:23">&lt;</operator> <name pos:start="149:25" pos:end="149:34"><name pos:start="149:25" pos:end="149:25">s</name><operator pos:start="149:26" pos:end="149:27">-&gt;</operator><name pos:start="149:28" pos:end="149:34">num_cpu</name></name></expr>;</condition> <incr pos:start="149:37" pos:end="149:41"><expr pos:start="149:37" pos:end="149:41"><name pos:start="149:37" pos:end="149:39">cpu</name><operator pos:start="149:40" pos:end="149:41">++</operator></expr></incr>)</control> <block pos:start="149:44" pos:end="193:5">{<block_content pos:start="153:9" pos:end="191:9">

        <comment type="block" pos:start="151:9" pos:end="151:46">/* GICC_CTLR -&gt; s-&gt;cpu_enabled[cpu] */</comment>

        <expr_stmt pos:start="153:9" pos:end="153:51"><expr pos:start="153:9" pos:end="153:50"><call pos:start="153:9" pos:end="153:50"><name pos:start="153:9" pos:end="153:23">kvm_gicc_access</name><argument_list pos:start="153:24" pos:end="153:50">(<argument pos:start="153:25" pos:end="153:25"><expr pos:start="153:25" pos:end="153:25"><name pos:start="153:25" pos:end="153:25">s</name></expr></argument>, <argument pos:start="153:28" pos:end="153:31"><expr pos:start="153:28" pos:end="153:31"><literal type="number" pos:start="153:28" pos:end="153:31">0x00</literal></expr></argument>, <argument pos:start="153:34" pos:end="153:36"><expr pos:start="153:34" pos:end="153:36"><name pos:start="153:34" pos:end="153:36">cpu</name></expr></argument>, <argument pos:start="153:39" pos:end="153:42"><expr pos:start="153:39" pos:end="153:42"><operator pos:start="153:39" pos:end="153:39">&amp;</operator><name pos:start="153:40" pos:end="153:42">reg</name></expr></argument>, <argument pos:start="153:45" pos:end="153:49"><expr pos:start="153:45" pos:end="153:49"><name pos:start="153:45" pos:end="153:49">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:40"><expr pos:start="155:9" pos:end="155:39"><name pos:start="155:9" pos:end="155:27"><name pos:start="155:9" pos:end="155:9">s</name><operator pos:start="155:10" pos:end="155:11">-&gt;</operator><name pos:start="155:12" pos:end="155:22">cpu_enabled</name><index pos:start="155:23" pos:end="155:27">[<expr pos:start="155:24" pos:end="155:26"><name pos:start="155:24" pos:end="155:26">cpu</name></expr>]</index></name> <operator pos:start="155:29" pos:end="155:29">=</operator> <operator pos:start="155:31" pos:end="155:31">(</operator><name pos:start="155:32" pos:end="155:34">reg</name> <operator pos:start="155:36" pos:end="155:36">&amp;</operator> <literal type="number" pos:start="155:38" pos:end="155:38">1</literal><operator pos:start="155:39" pos:end="155:39">)</operator></expr>;</expr_stmt>



        <comment type="block" pos:start="159:9" pos:end="159:47">/* GICC_PMR -&gt; s-&gt;priority_mask[cpu] */</comment>

        <expr_stmt pos:start="161:9" pos:end="161:51"><expr pos:start="161:9" pos:end="161:50"><call pos:start="161:9" pos:end="161:50"><name pos:start="161:9" pos:end="161:23">kvm_gicc_access</name><argument_list pos:start="161:24" pos:end="161:50">(<argument pos:start="161:25" pos:end="161:25"><expr pos:start="161:25" pos:end="161:25"><name pos:start="161:25" pos:end="161:25">s</name></expr></argument>, <argument pos:start="161:28" pos:end="161:31"><expr pos:start="161:28" pos:end="161:31"><literal type="number" pos:start="161:28" pos:end="161:31">0x04</literal></expr></argument>, <argument pos:start="161:34" pos:end="161:36"><expr pos:start="161:34" pos:end="161:36"><name pos:start="161:34" pos:end="161:36">cpu</name></expr></argument>, <argument pos:start="161:39" pos:end="161:42"><expr pos:start="161:39" pos:end="161:42"><operator pos:start="161:39" pos:end="161:39">&amp;</operator><name pos:start="161:40" pos:end="161:42">reg</name></expr></argument>, <argument pos:start="161:45" pos:end="161:49"><expr pos:start="161:45" pos:end="161:49"><name pos:start="161:45" pos:end="161:49">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:45"><expr pos:start="163:9" pos:end="163:44"><name pos:start="163:9" pos:end="163:29"><name pos:start="163:9" pos:end="163:9">s</name><operator pos:start="163:10" pos:end="163:11">-&gt;</operator><name pos:start="163:12" pos:end="163:24">priority_mask</name><index pos:start="163:25" pos:end="163:29">[<expr pos:start="163:26" pos:end="163:28"><name pos:start="163:26" pos:end="163:28">cpu</name></expr>]</index></name> <operator pos:start="163:31" pos:end="163:31">=</operator> <operator pos:start="163:33" pos:end="163:33">(</operator><name pos:start="163:34" pos:end="163:36">reg</name> <operator pos:start="163:38" pos:end="163:38">&amp;</operator> <literal type="number" pos:start="163:40" pos:end="163:43">0xff</literal><operator pos:start="163:44" pos:end="163:44">)</operator></expr>;</expr_stmt>



        <comment type="block" pos:start="167:9" pos:end="167:37">/* GICC_BPR -&gt; s-&gt;bpr[cpu] */</comment>

        <expr_stmt pos:start="169:9" pos:end="169:51"><expr pos:start="169:9" pos:end="169:50"><call pos:start="169:9" pos:end="169:50"><name pos:start="169:9" pos:end="169:23">kvm_gicc_access</name><argument_list pos:start="169:24" pos:end="169:50">(<argument pos:start="169:25" pos:end="169:25"><expr pos:start="169:25" pos:end="169:25"><name pos:start="169:25" pos:end="169:25">s</name></expr></argument>, <argument pos:start="169:28" pos:end="169:31"><expr pos:start="169:28" pos:end="169:31"><literal type="number" pos:start="169:28" pos:end="169:31">0x08</literal></expr></argument>, <argument pos:start="169:34" pos:end="169:36"><expr pos:start="169:34" pos:end="169:36"><name pos:start="169:34" pos:end="169:36">cpu</name></expr></argument>, <argument pos:start="169:39" pos:end="169:42"><expr pos:start="169:39" pos:end="169:42"><operator pos:start="169:39" pos:end="169:39">&amp;</operator><name pos:start="169:40" pos:end="169:42">reg</name></expr></argument>, <argument pos:start="169:45" pos:end="169:49"><expr pos:start="169:45" pos:end="169:49"><name pos:start="169:45" pos:end="169:49">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:34"><expr pos:start="171:9" pos:end="171:33"><name pos:start="171:9" pos:end="171:19"><name pos:start="171:9" pos:end="171:9">s</name><operator pos:start="171:10" pos:end="171:11">-&gt;</operator><name pos:start="171:12" pos:end="171:14">bpr</name><index pos:start="171:15" pos:end="171:19">[<expr pos:start="171:16" pos:end="171:18"><name pos:start="171:16" pos:end="171:18">cpu</name></expr>]</index></name> <operator pos:start="171:21" pos:end="171:21">=</operator> <operator pos:start="171:23" pos:end="171:23">(</operator><name pos:start="171:24" pos:end="171:26">reg</name> <operator pos:start="171:28" pos:end="171:28">&amp;</operator> <literal type="number" pos:start="171:30" pos:end="171:32">0x7</literal><operator pos:start="171:33" pos:end="171:33">)</operator></expr>;</expr_stmt>



        <comment type="block" pos:start="175:9" pos:end="175:39">/* GICC_ABPR -&gt; s-&gt;abpr[cpu] */</comment>

        <expr_stmt pos:start="177:9" pos:end="177:51"><expr pos:start="177:9" pos:end="177:50"><call pos:start="177:9" pos:end="177:50"><name pos:start="177:9" pos:end="177:23">kvm_gicc_access</name><argument_list pos:start="177:24" pos:end="177:50">(<argument pos:start="177:25" pos:end="177:25"><expr pos:start="177:25" pos:end="177:25"><name pos:start="177:25" pos:end="177:25">s</name></expr></argument>, <argument pos:start="177:28" pos:end="177:31"><expr pos:start="177:28" pos:end="177:31"><literal type="number" pos:start="177:28" pos:end="177:31">0x1c</literal></expr></argument>, <argument pos:start="177:34" pos:end="177:36"><expr pos:start="177:34" pos:end="177:36"><name pos:start="177:34" pos:end="177:36">cpu</name></expr></argument>, <argument pos:start="177:39" pos:end="177:42"><expr pos:start="177:39" pos:end="177:42"><operator pos:start="177:39" pos:end="177:39">&amp;</operator><name pos:start="177:40" pos:end="177:42">reg</name></expr></argument>, <argument pos:start="177:45" pos:end="177:49"><expr pos:start="177:45" pos:end="177:49"><name pos:start="177:45" pos:end="177:49">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:35"><expr pos:start="179:9" pos:end="179:34"><name pos:start="179:9" pos:end="179:20"><name pos:start="179:9" pos:end="179:9">s</name><operator pos:start="179:10" pos:end="179:11">-&gt;</operator><name pos:start="179:12" pos:end="179:15">abpr</name><index pos:start="179:16" pos:end="179:20">[<expr pos:start="179:17" pos:end="179:19"><name pos:start="179:17" pos:end="179:19">cpu</name></expr>]</index></name> <operator pos:start="179:22" pos:end="179:22">=</operator> <operator pos:start="179:24" pos:end="179:24">(</operator><name pos:start="179:25" pos:end="179:27">reg</name> <operator pos:start="179:29" pos:end="179:29">&amp;</operator> <literal type="number" pos:start="179:31" pos:end="179:33">0x7</literal><operator pos:start="179:34" pos:end="179:34">)</operator></expr>;</expr_stmt>



        <comment type="block" pos:start="183:9" pos:end="183:41">/* GICC_APRn -&gt; s-&gt;apr[n][cpu] */</comment>

        <for pos:start="185:9" pos:end="191:9">for <control pos:start="185:13" pos:end="185:31">(<init pos:start="185:14" pos:end="185:19"><expr pos:start="185:14" pos:end="185:18"><name pos:start="185:14" pos:end="185:14">i</name> <operator pos:start="185:16" pos:end="185:16">=</operator> <literal type="number" pos:start="185:18" pos:end="185:18">0</literal></expr>;</init> <condition pos:start="185:21" pos:end="185:26"><expr pos:start="185:21" pos:end="185:25"><name pos:start="185:21" pos:end="185:21">i</name> <operator pos:start="185:23" pos:end="185:23">&lt;</operator> <literal type="number" pos:start="185:25" pos:end="185:25">4</literal></expr>;</condition> <incr pos:start="185:28" pos:end="185:30"><expr pos:start="185:28" pos:end="185:30"><name pos:start="185:28" pos:end="185:28">i</name><operator pos:start="185:29" pos:end="185:30">++</operator></expr></incr>)</control> <block pos:start="185:33" pos:end="191:9">{<block_content pos:start="187:13" pos:end="189:33">

            <expr_stmt pos:start="187:13" pos:end="187:63"><expr pos:start="187:13" pos:end="187:62"><call pos:start="187:13" pos:end="187:62"><name pos:start="187:13" pos:end="187:27">kvm_gicc_access</name><argument_list pos:start="187:28" pos:end="187:62">(<argument pos:start="187:29" pos:end="187:29"><expr pos:start="187:29" pos:end="187:29"><name pos:start="187:29" pos:end="187:29">s</name></expr></argument>, <argument pos:start="187:32" pos:end="187:43"><expr pos:start="187:32" pos:end="187:43"><literal type="number" pos:start="187:32" pos:end="187:37">0xd0</literal> <operator pos:start="187:37" pos:end="187:37">+</operator> <name pos:start="187:39" pos:end="187:39">i</name> <operator pos:start="187:41" pos:end="187:41">*</operator> <literal type="number" pos:start="187:43" pos:end="187:43">4</literal></expr></argument>, <argument pos:start="187:46" pos:end="187:48"><expr pos:start="187:46" pos:end="187:48"><name pos:start="187:46" pos:end="187:48">cpu</name></expr></argument>, <argument pos:start="187:51" pos:end="187:54"><expr pos:start="187:51" pos:end="187:54"><operator pos:start="187:51" pos:end="187:51">&amp;</operator><name pos:start="187:52" pos:end="187:54">reg</name></expr></argument>, <argument pos:start="187:57" pos:end="187:61"><expr pos:start="187:57" pos:end="187:61"><name pos:start="187:57" pos:end="187:61">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="189:13" pos:end="189:33"><expr pos:start="189:13" pos:end="189:32"><name pos:start="189:13" pos:end="189:26"><name pos:start="189:13" pos:end="189:13">s</name><operator pos:start="189:14" pos:end="189:15">-&gt;</operator><name pos:start="189:16" pos:end="189:18">apr</name><index pos:start="189:19" pos:end="189:21">[<expr pos:start="189:20" pos:end="189:20"><name pos:start="189:20" pos:end="189:20">i</name></expr>]</index><index pos:start="189:22" pos:end="189:26">[<expr pos:start="189:23" pos:end="189:25"><name pos:start="189:23" pos:end="189:25">cpu</name></expr>]</index></name> <operator pos:start="189:28" pos:end="189:28">=</operator> <name pos:start="189:30" pos:end="189:32">reg</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
