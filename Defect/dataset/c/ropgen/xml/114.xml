<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/114.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">mirror_complete</name><parameter_list pos:start="1:28" pos:end="1:56">(<parameter pos:start="1:29" pos:end="1:41"><decl pos:start="1:29" pos:end="1:41"><type pos:start="1:29" pos:end="1:41"><name pos:start="1:29" pos:end="1:36">BlockJob</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">job</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:55"><decl pos:start="1:44" pos:end="1:55"><type pos:start="1:44" pos:end="1:55"><name pos:start="1:44" pos:end="1:48">Error</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier><modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:55">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="81:1">{<block_content pos:start="5:5" pos:end="79:32">

    <decl_stmt pos:start="5:5" pos:end="5:66"><decl pos:start="5:5" pos:end="5:65"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">MirrorBlockJob</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">s</name> <init pos:start="5:23" pos:end="5:65">= <expr pos:start="5:25" pos:end="5:65"><call pos:start="5:25" pos:end="5:65"><name pos:start="5:25" pos:end="5:36">container_of</name><argument_list pos:start="5:37" pos:end="5:65">(<argument pos:start="5:38" pos:end="5:40"><expr pos:start="5:38" pos:end="5:40"><name pos:start="5:38" pos:end="5:40">job</name></expr></argument>, <argument pos:start="5:43" pos:end="5:56"><expr pos:start="5:43" pos:end="5:56"><name pos:start="5:43" pos:end="5:56">MirrorBlockJob</name></expr></argument>, <argument pos:start="5:59" pos:end="5:64"><expr pos:start="5:59" pos:end="5:64"><name pos:start="5:59" pos:end="5:64">common</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:9">Error</name> <modifier pos:start="7:11" pos:end="7:11">*</modifier></type><name pos:start="7:12" pos:end="7:20">local_err</name> <init pos:start="7:22" pos:end="7:27">= <expr pos:start="7:24" pos:end="7:27"><name pos:start="7:24" pos:end="7:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:62"><expr pos:start="13:5" pos:end="13:61"><name pos:start="13:5" pos:end="13:7">ret</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <call pos:start="13:11" pos:end="13:61"><name pos:start="13:11" pos:end="13:32">bdrv_open_backing_file</name><argument_list pos:start="13:33" pos:end="13:61">(<argument pos:start="13:34" pos:end="13:42"><expr pos:start="13:34" pos:end="13:42"><name pos:start="13:34" pos:end="13:42"><name pos:start="13:34" pos:end="13:34">s</name><operator pos:start="13:35" pos:end="13:36">-&gt;</operator><name pos:start="13:37" pos:end="13:42">target</name></name></expr></argument>, <argument pos:start="13:45" pos:end="13:48"><expr pos:start="13:45" pos:end="13:48"><name pos:start="13:45" pos:end="13:48">NULL</name></expr></argument>, <argument pos:start="13:51" pos:end="13:60"><expr pos:start="13:51" pos:end="13:60"><operator pos:start="13:51" pos:end="13:51">&amp;</operator><name pos:start="13:52" pos:end="13:60">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:16">(<expr pos:start="15:9" pos:end="15:15"><name pos:start="15:9" pos:end="15:11">ret</name> <operator pos:start="15:13" pos:end="15:13">&lt;</operator> <literal type="number" pos:start="15:15" pos:end="15:15">0</literal></expr>)</condition> <block pos:start="15:18" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:15">

        <expr_stmt pos:start="17:9" pos:end="17:41"><expr pos:start="17:9" pos:end="17:40"><call pos:start="17:9" pos:end="17:40"><name pos:start="17:9" pos:end="17:23">error_propagate</name><argument_list pos:start="17:24" pos:end="17:40">(<argument pos:start="17:25" pos:end="17:28"><expr pos:start="17:25" pos:end="17:28"><name pos:start="17:25" pos:end="17:28">errp</name></expr></argument>, <argument pos:start="17:31" pos:end="17:39"><expr pos:start="17:31" pos:end="17:39"><name pos:start="17:31" pos:end="17:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="23:5" pos:end="31:5"><if pos:start="23:5" pos:end="31:5">if <condition pos:start="23:8" pos:end="23:19">(<expr pos:start="23:9" pos:end="23:18"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:18"><name pos:start="23:10" pos:end="23:10">s</name><operator pos:start="23:11" pos:end="23:12">-&gt;</operator><name pos:start="23:13" pos:end="23:18">synced</name></name></expr>)</condition> <block pos:start="23:21" pos:end="31:5">{<block_content pos:start="25:9" pos:end="29:15">

        <expr_stmt pos:start="25:9" pos:end="27:50"><expr pos:start="25:9" pos:end="27:49"><call pos:start="25:9" pos:end="27:49"><name pos:start="25:9" pos:end="25:18">error_setg</name><argument_list pos:start="25:19" pos:end="27:49">(<argument pos:start="25:20" pos:end="25:23"><expr pos:start="25:20" pos:end="25:23"><name pos:start="25:20" pos:end="25:23">errp</name></expr></argument>, <argument pos:start="25:26" pos:end="25:49"><expr pos:start="25:26" pos:end="25:49"><name pos:start="25:26" pos:end="25:49">QERR_BLOCK_JOB_NOT_READY</name></expr></argument>,

                   <argument pos:start="27:20" pos:end="27:48"><expr pos:start="27:20" pos:end="27:48"><call pos:start="27:20" pos:end="27:48"><name pos:start="27:20" pos:end="27:39">bdrv_get_device_name</name><argument_list pos:start="27:40" pos:end="27:48">(<argument pos:start="27:41" pos:end="27:47"><expr pos:start="27:41" pos:end="27:47"><name pos:start="27:41" pos:end="27:47"><name pos:start="27:41" pos:end="27:43">job</name><operator pos:start="27:44" pos:end="27:45">-&gt;</operator><name pos:start="27:46" pos:end="27:47">bs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:75">/* check the target bs is not blocked and block all operations on it */</comment>

    <if_stmt pos:start="37:5" pos:end="73:5"><if pos:start="37:5" pos:end="73:5">if <condition pos:start="37:8" pos:end="37:20">(<expr pos:start="37:9" pos:end="37:19"><name pos:start="37:9" pos:end="37:19"><name pos:start="37:9" pos:end="37:9">s</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:19">replaces</name></name></expr>)</condition> <block pos:start="37:22" pos:end="73:5">{<block_content pos:start="39:9" pos:end="71:49">

        <decl_stmt pos:start="39:9" pos:end="39:40"><decl pos:start="39:9" pos:end="39:39"><type pos:start="39:9" pos:end="39:20"><name pos:start="39:9" pos:end="39:18">AioContext</name> <modifier pos:start="39:20" pos:end="39:20">*</modifier></type><name pos:start="39:21" pos:end="39:39">replace_aio_context</name></decl>;</decl_stmt>



        <expr_stmt pos:start="43:9" pos:end="43:71"><expr pos:start="43:9" pos:end="43:70"><name pos:start="43:9" pos:end="43:21"><name pos:start="43:9" pos:end="43:9">s</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:21">to_replace</name></name> <operator pos:start="43:23" pos:end="43:23">=</operator> <call pos:start="43:25" pos:end="43:70"><name pos:start="43:25" pos:end="43:45">check_to_replace_node</name><argument_list pos:start="43:46" pos:end="43:70">(<argument pos:start="43:47" pos:end="43:57"><expr pos:start="43:47" pos:end="43:57"><name pos:start="43:47" pos:end="43:57"><name pos:start="43:47" pos:end="43:47">s</name><operator pos:start="43:48" pos:end="43:49">-&gt;</operator><name pos:start="43:50" pos:end="43:57">replaces</name></name></expr></argument>, <argument pos:start="43:60" pos:end="43:69"><expr pos:start="43:60" pos:end="43:69"><operator pos:start="43:60" pos:end="43:60">&amp;</operator><name pos:start="43:61" pos:end="43:69">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="51:9"><if pos:start="45:9" pos:end="51:9">if <condition pos:start="45:12" pos:end="45:27">(<expr pos:start="45:13" pos:end="45:26"><operator pos:start="45:13" pos:end="45:13">!</operator><name pos:start="45:14" pos:end="45:26"><name pos:start="45:14" pos:end="45:14">s</name><operator pos:start="45:15" pos:end="45:16">-&gt;</operator><name pos:start="45:17" pos:end="45:26">to_replace</name></name></expr>)</condition> <block pos:start="45:29" pos:end="51:9">{<block_content pos:start="47:13" pos:end="49:19">

            <expr_stmt pos:start="47:13" pos:end="47:45"><expr pos:start="47:13" pos:end="47:44"><call pos:start="47:13" pos:end="47:44"><name pos:start="47:13" pos:end="47:27">error_propagate</name><argument_list pos:start="47:28" pos:end="47:44">(<argument pos:start="47:29" pos:end="47:32"><expr pos:start="47:29" pos:end="47:32"><name pos:start="47:29" pos:end="47:32">errp</name></expr></argument>, <argument pos:start="47:35" pos:end="47:43"><expr pos:start="47:35" pos:end="47:43"><name pos:start="47:35" pos:end="47:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="49:13" pos:end="49:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:66"><expr pos:start="55:9" pos:end="55:65"><name pos:start="55:9" pos:end="55:27">replace_aio_context</name> <operator pos:start="55:29" pos:end="55:29">=</operator> <call pos:start="55:31" pos:end="55:65"><name pos:start="55:31" pos:end="55:50">bdrv_get_aio_context</name><argument_list pos:start="55:51" pos:end="55:65">(<argument pos:start="55:52" pos:end="55:64"><expr pos:start="55:52" pos:end="55:64"><name pos:start="55:52" pos:end="55:64"><name pos:start="55:52" pos:end="55:52">s</name><operator pos:start="55:53" pos:end="55:54">-&gt;</operator><name pos:start="55:55" pos:end="55:64">to_replace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:49"><expr pos:start="57:9" pos:end="57:48"><call pos:start="57:9" pos:end="57:48"><name pos:start="57:9" pos:end="57:27">aio_context_acquire</name><argument_list pos:start="57:28" pos:end="57:48">(<argument pos:start="57:29" pos:end="57:47"><expr pos:start="57:29" pos:end="57:47"><name pos:start="57:29" pos:end="57:47">replace_aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="61:9" pos:end="63:67"><expr pos:start="61:9" pos:end="63:66"><call pos:start="61:9" pos:end="63:66"><name pos:start="61:9" pos:end="61:18">error_setg</name><argument_list pos:start="61:19" pos:end="63:66">(<argument pos:start="61:20" pos:end="61:38"><expr pos:start="61:20" pos:end="61:38"><operator pos:start="61:20" pos:end="61:20">&amp;</operator><name pos:start="61:21" pos:end="61:38"><name pos:start="61:21" pos:end="61:21">s</name><operator pos:start="61:22" pos:end="61:23">-&gt;</operator><name pos:start="61:24" pos:end="61:38">replace_blocker</name></name></expr></argument>,

                   <argument pos:start="63:20" pos:end="63:65"><expr pos:start="63:20" pos:end="63:65"><literal type="string" pos:start="63:20" pos:end="63:65">"block device is in use by block-job-complete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:61"><expr pos:start="65:9" pos:end="65:60"><call pos:start="65:9" pos:end="65:60"><name pos:start="65:9" pos:end="65:25">bdrv_op_block_all</name><argument_list pos:start="65:26" pos:end="65:60">(<argument pos:start="65:27" pos:end="65:39"><expr pos:start="65:27" pos:end="65:39"><name pos:start="65:27" pos:end="65:39"><name pos:start="65:27" pos:end="65:27">s</name><operator pos:start="65:28" pos:end="65:29">-&gt;</operator><name pos:start="65:30" pos:end="65:39">to_replace</name></name></expr></argument>, <argument pos:start="65:42" pos:end="65:59"><expr pos:start="65:42" pos:end="65:59"><name pos:start="65:42" pos:end="65:59"><name pos:start="65:42" pos:end="65:42">s</name><operator pos:start="65:43" pos:end="65:44">-&gt;</operator><name pos:start="65:45" pos:end="65:59">replace_blocker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:32"><expr pos:start="67:9" pos:end="67:31"><call pos:start="67:9" pos:end="67:31"><name pos:start="67:9" pos:end="67:16">bdrv_ref</name><argument_list pos:start="67:17" pos:end="67:31">(<argument pos:start="67:18" pos:end="67:30"><expr pos:start="67:18" pos:end="67:30"><name pos:start="67:18" pos:end="67:30"><name pos:start="67:18" pos:end="67:18">s</name><operator pos:start="67:19" pos:end="67:20">-&gt;</operator><name pos:start="67:21" pos:end="67:30">to_replace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="71:9" pos:end="71:49"><expr pos:start="71:9" pos:end="71:48"><call pos:start="71:9" pos:end="71:48"><name pos:start="71:9" pos:end="71:27">aio_context_release</name><argument_list pos:start="71:28" pos:end="71:48">(<argument pos:start="71:29" pos:end="71:47"><expr pos:start="71:29" pos:end="71:47"><name pos:start="71:29" pos:end="71:47">replace_aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:30"><expr pos:start="77:5" pos:end="77:29"><name pos:start="77:5" pos:end="77:22"><name pos:start="77:5" pos:end="77:5">s</name><operator pos:start="77:6" pos:end="77:7">-&gt;</operator><name pos:start="77:8" pos:end="77:22">should_complete</name></name> <operator pos:start="77:24" pos:end="77:24">=</operator> <name pos:start="77:26" pos:end="77:29">true</name></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:32"><expr pos:start="79:5" pos:end="79:31"><call pos:start="79:5" pos:end="79:31"><name pos:start="79:5" pos:end="79:19">block_job_enter</name><argument_list pos:start="79:20" pos:end="79:31">(<argument pos:start="79:21" pos:end="79:30"><expr pos:start="79:21" pos:end="79:30"><operator pos:start="79:21" pos:end="79:21">&amp;</operator><name pos:start="79:22" pos:end="79:30"><name pos:start="79:22" pos:end="79:22">s</name><operator pos:start="79:23" pos:end="79:24">-&gt;</operator><name pos:start="79:25" pos:end="79:30">common</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
