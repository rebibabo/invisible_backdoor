<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18373.c" pos:tabs="8"><function pos:start="1:1" pos:end="160:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">parse_read_interval</name><parameter_list pos:start="1:31" pos:end="3:54">(<parameter pos:start="1:32" pos:end="1:56"><decl pos:start="1:32" pos:end="1:56"><type pos:start="1:32" pos:end="1:56"><specifier pos:start="1:32" pos:end="1:36">const</specifier> <name pos:start="1:38" pos:end="1:41">char</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:56">interval_spec</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:53"><decl pos:start="3:32" pos:end="3:53"><type pos:start="3:32" pos:end="3:53"><name pos:start="3:32" pos:end="3:43">ReadInterval</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:53">interval</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="160:1">{<block_content pos:start="7:5" pos:end="158:15">

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:53"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:14">next</name></decl>, <decl pos:start="9:17" pos:end="9:18"><type ref="prev" pos:start="9:5" pos:end="9:10"><modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:18">p</name></decl>, <decl pos:start="9:21" pos:end="9:52"><type ref="prev" pos:start="9:5" pos:end="9:10"><modifier pos:start="9:21" pos:end="9:21">*</modifier></type><name pos:start="9:22" pos:end="9:25">spec</name> <init pos:start="9:27" pos:end="9:52">= <expr pos:start="9:29" pos:end="9:52"><call pos:start="9:29" pos:end="9:52"><name pos:start="9:29" pos:end="9:37">av_strdup</name><argument_list pos:start="9:38" pos:end="9:52">(<argument pos:start="9:39" pos:end="9:51"><expr pos:start="9:39" pos:end="9:51"><name pos:start="9:39" pos:end="9:51">interval_spec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="11:5" pos:end="13:31"><if pos:start="11:5" pos:end="13:31">if <condition pos:start="11:8" pos:end="11:14">(<expr pos:start="11:9" pos:end="11:13"><operator pos:start="11:9" pos:end="11:9">!</operator><name pos:start="11:10" pos:end="11:13">spec</name></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="13:31"><block_content pos:start="13:9" pos:end="13:31">

        <return pos:start="13:9" pos:end="13:31">return <expr pos:start="13:16" pos:end="13:30"><call pos:start="13:16" pos:end="13:30"><name pos:start="13:16" pos:end="13:22">AVERROR</name><argument_list pos:start="13:23" pos:end="13:30">(<argument pos:start="13:24" pos:end="13:29"><expr pos:start="13:24" pos:end="13:29"><name pos:start="13:24" pos:end="13:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="17:5" pos:end="25:5"><if pos:start="17:5" pos:end="25:5">if <condition pos:start="17:8" pos:end="17:15">(<expr pos:start="17:9" pos:end="17:14"><operator pos:start="17:9" pos:end="17:9">!</operator><operator pos:start="17:10" pos:end="17:10">*</operator><name pos:start="17:11" pos:end="17:14">spec</name></expr>)</condition> <block pos:start="17:17" pos:end="25:5">{<block_content pos:start="19:9" pos:end="23:17">

        <expr_stmt pos:start="19:9" pos:end="19:77"><expr pos:start="19:9" pos:end="19:76"><call pos:start="19:9" pos:end="19:76"><name pos:start="19:9" pos:end="19:14">av_log</name><argument_list pos:start="19:15" pos:end="19:76">(<argument pos:start="19:16" pos:end="19:19"><expr pos:start="19:16" pos:end="19:19"><name pos:start="19:16" pos:end="19:19">NULL</name></expr></argument>, <argument pos:start="19:22" pos:end="19:33"><expr pos:start="19:22" pos:end="19:33"><name pos:start="19:22" pos:end="19:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="19:36" pos:end="19:75"><expr pos:start="19:36" pos:end="19:75"><literal type="string" pos:start="19:36" pos:end="19:75">"Invalid empty interval specification\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:30"><expr pos:start="21:9" pos:end="21:29"><name pos:start="21:9" pos:end="21:11">ret</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <call pos:start="21:15" pos:end="21:29"><name pos:start="21:15" pos:end="21:21">AVERROR</name><argument_list pos:start="21:22" pos:end="21:29">(<argument pos:start="21:23" pos:end="21:28"><expr pos:start="21:23" pos:end="21:28"><name pos:start="21:23" pos:end="21:28">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="23:9" pos:end="23:17">goto <name pos:start="23:14" pos:end="23:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:13"><expr pos:start="29:5" pos:end="29:12"><name pos:start="29:5" pos:end="29:5">p</name> <operator pos:start="29:7" pos:end="29:7">=</operator> <name pos:start="29:9" pos:end="29:12">spec</name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:29"><expr pos:start="31:5" pos:end="31:28"><name pos:start="31:5" pos:end="31:8">next</name> <operator pos:start="31:10" pos:end="31:10">=</operator> <call pos:start="31:12" pos:end="31:28"><name pos:start="31:12" pos:end="31:17">strchr</name><argument_list pos:start="31:18" pos:end="31:28">(<argument pos:start="31:19" pos:end="31:22"><expr pos:start="31:19" pos:end="31:22"><name pos:start="31:19" pos:end="31:22">spec</name></expr></argument>, <argument pos:start="31:25" pos:end="31:27"><expr pos:start="31:25" pos:end="31:27"><literal type="char" pos:start="31:25" pos:end="31:27">'%'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="35:20"><if pos:start="33:5" pos:end="35:20">if <condition pos:start="33:8" pos:end="33:13">(<expr pos:start="33:9" pos:end="33:12"><name pos:start="33:9" pos:end="33:12">next</name></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="35:20"><block_content pos:start="35:9" pos:end="35:20">

        <expr_stmt pos:start="35:9" pos:end="35:20"><expr pos:start="35:9" pos:end="35:19"><operator pos:start="35:9" pos:end="35:9">*</operator><name pos:start="35:10" pos:end="35:13">next</name><operator pos:start="35:14" pos:end="35:15">++</operator> <operator pos:start="35:17" pos:end="35:17">=</operator> <literal type="number" pos:start="35:19" pos:end="35:19">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:26">/* parse first part */</comment>

    <if_stmt pos:start="41:5" pos:end="75:5"><if pos:start="41:5" pos:end="71:5">if <condition pos:start="41:8" pos:end="41:11">(<expr pos:start="41:9" pos:end="41:10"><operator pos:start="41:9" pos:end="41:9">*</operator><name pos:start="41:10" pos:end="41:10">p</name></expr>)</condition> <block pos:start="41:13" pos:end="71:5">{<block_content pos:start="43:9" pos:end="69:9">

        <expr_stmt pos:start="43:9" pos:end="43:32"><expr pos:start="43:9" pos:end="43:31"><name pos:start="43:9" pos:end="43:27"><name pos:start="43:9" pos:end="43:16">interval</name><operator pos:start="43:17" pos:end="43:18">-&gt;</operator><name pos:start="43:19" pos:end="43:27">has_start</name></name> <operator pos:start="43:29" pos:end="43:29">=</operator> <literal type="number" pos:start="43:31" pos:end="43:31">1</literal></expr>;</expr_stmt>



        <if_stmt pos:start="47:9" pos:end="57:9"><if pos:start="47:9" pos:end="53:9">if <condition pos:start="47:12" pos:end="47:22">(<expr pos:start="47:13" pos:end="47:21"><operator pos:start="47:13" pos:end="47:13">*</operator><name pos:start="47:14" pos:end="47:14">p</name> <operator pos:start="47:16" pos:end="47:17">==</operator> <literal type="char" pos:start="47:19" pos:end="47:21">'+'</literal></expr>)</condition> <block pos:start="47:24" pos:end="53:9">{<block_content pos:start="49:13" pos:end="51:16">

            <expr_stmt pos:start="49:13" pos:end="49:42"><expr pos:start="49:13" pos:end="49:41"><name pos:start="49:13" pos:end="49:37"><name pos:start="49:13" pos:end="49:20">interval</name><operator pos:start="49:21" pos:end="49:22">-&gt;</operator><name pos:start="49:23" pos:end="49:37">start_is_offset</name></name> <operator pos:start="49:39" pos:end="49:39">=</operator> <literal type="number" pos:start="49:41" pos:end="49:41">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:16"><expr pos:start="51:13" pos:end="51:15"><name pos:start="51:13" pos:end="51:13">p</name><operator pos:start="51:14" pos:end="51:15">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="53:11" pos:end="57:9">else <block pos:start="53:16" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:42">

            <expr_stmt pos:start="55:13" pos:end="55:42"><expr pos:start="55:13" pos:end="55:41"><name pos:start="55:13" pos:end="55:37"><name pos:start="55:13" pos:end="55:20">interval</name><operator pos:start="55:21" pos:end="55:22">-&gt;</operator><name pos:start="55:23" pos:end="55:37">start_is_offset</name></name> <operator pos:start="55:39" pos:end="55:39">=</operator> <literal type="number" pos:start="55:41" pos:end="55:41">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="61:9" pos:end="61:52"><expr pos:start="61:9" pos:end="61:51"><name pos:start="61:9" pos:end="61:11">ret</name> <operator pos:start="61:13" pos:end="61:13">=</operator> <call pos:start="61:15" pos:end="61:51"><name pos:start="61:15" pos:end="61:27">av_parse_time</name><argument_list pos:start="61:28" pos:end="61:51">(<argument pos:start="61:29" pos:end="61:44"><expr pos:start="61:29" pos:end="61:44"><operator pos:start="61:29" pos:end="61:29">&amp;</operator><name pos:start="61:30" pos:end="61:44"><name pos:start="61:30" pos:end="61:37">interval</name><operator pos:start="61:38" pos:end="61:39">-&gt;</operator><name pos:start="61:40" pos:end="61:44">start</name></name></expr></argument>, <argument pos:start="61:47" pos:end="61:47"><expr pos:start="61:47" pos:end="61:47"><name pos:start="61:47" pos:end="61:47">p</name></expr></argument>, <argument pos:start="61:50" pos:end="61:50"><expr pos:start="61:50" pos:end="61:50"><literal type="number" pos:start="61:50" pos:end="61:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="69:9"><if pos:start="63:9" pos:end="69:9">if <condition pos:start="63:12" pos:end="63:20">(<expr pos:start="63:13" pos:end="63:19"><name pos:start="63:13" pos:end="63:15">ret</name> <operator pos:start="63:17" pos:end="63:17">&lt;</operator> <literal type="number" pos:start="63:19" pos:end="63:19">0</literal></expr>)</condition> <block pos:start="63:22" pos:end="69:9">{<block_content pos:start="65:13" pos:end="67:21">

            <expr_stmt pos:start="65:13" pos:end="65:89"><expr pos:start="65:13" pos:end="65:88"><call pos:start="65:13" pos:end="65:88"><name pos:start="65:13" pos:end="65:18">av_log</name><argument_list pos:start="65:19" pos:end="65:88">(<argument pos:start="65:20" pos:end="65:23"><expr pos:start="65:20" pos:end="65:23"><name pos:start="65:20" pos:end="65:23">NULL</name></expr></argument>, <argument pos:start="65:26" pos:end="65:37"><expr pos:start="65:26" pos:end="65:37"><name pos:start="65:26" pos:end="65:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="65:40" pos:end="65:84"><expr pos:start="65:40" pos:end="65:84"><literal type="string" pos:start="65:40" pos:end="65:84">"Invalid interval start specification '%s'\n"</literal></expr></argument>, <argument pos:start="65:87" pos:end="65:87"><expr pos:start="65:87" pos:end="65:87"><name pos:start="65:87" pos:end="65:87">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="67:13" pos:end="67:21">goto <name pos:start="67:18" pos:end="67:20">end</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="71:7" pos:end="75:5">else <block pos:start="71:12" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:32">

        <expr_stmt pos:start="73:9" pos:end="73:32"><expr pos:start="73:9" pos:end="73:31"><name pos:start="73:9" pos:end="73:27"><name pos:start="73:9" pos:end="73:16">interval</name><operator pos:start="73:17" pos:end="73:18">-&gt;</operator><name pos:start="73:19" pos:end="73:27">has_start</name></name> <operator pos:start="73:29" pos:end="73:29">=</operator> <literal type="number" pos:start="73:31" pos:end="73:31">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="79:5" pos:end="79:27">/* parse second part */</comment>

    <expr_stmt pos:start="81:5" pos:end="81:13"><expr pos:start="81:5" pos:end="81:12"><name pos:start="81:5" pos:end="81:5">p</name> <operator pos:start="81:7" pos:end="81:7">=</operator> <name pos:start="81:9" pos:end="81:12">next</name></expr>;</expr_stmt>

    <if_stmt pos:start="83:5" pos:end="150:5"><if pos:start="83:5" pos:end="146:5">if <condition pos:start="83:8" pos:end="83:16">(<expr pos:start="83:9" pos:end="83:15"><name pos:start="83:9" pos:end="83:9">p</name> <operator pos:start="83:11" pos:end="83:12">&amp;&amp;</operator> <operator pos:start="83:14" pos:end="83:14">*</operator><name pos:start="83:15" pos:end="83:15">p</name></expr>)</condition> <block pos:start="83:18" pos:end="146:5">{<block_content pos:start="85:9" pos:end="144:9">

        <decl_stmt pos:start="85:9" pos:end="85:19"><decl pos:start="85:9" pos:end="85:18"><type pos:start="85:9" pos:end="85:15"><name pos:start="85:9" pos:end="85:15">int64_t</name></type> <name pos:start="85:17" pos:end="85:18">us</name></decl>;</decl_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:30"><expr pos:start="87:9" pos:end="87:29"><name pos:start="87:9" pos:end="87:25"><name pos:start="87:9" pos:end="87:16">interval</name><operator pos:start="87:17" pos:end="87:18">-&gt;</operator><name pos:start="87:19" pos:end="87:25">has_end</name></name> <operator pos:start="87:27" pos:end="87:27">=</operator> <literal type="number" pos:start="87:29" pos:end="87:29">1</literal></expr>;</expr_stmt>



        <if_stmt pos:start="91:9" pos:end="101:9"><if pos:start="91:9" pos:end="97:9">if <condition pos:start="91:12" pos:end="91:22">(<expr pos:start="91:13" pos:end="91:21"><operator pos:start="91:13" pos:end="91:13">*</operator><name pos:start="91:14" pos:end="91:14">p</name> <operator pos:start="91:16" pos:end="91:17">==</operator> <literal type="char" pos:start="91:19" pos:end="91:21">'+'</literal></expr>)</condition> <block pos:start="91:24" pos:end="97:9">{<block_content pos:start="93:13" pos:end="95:16">

            <expr_stmt pos:start="93:13" pos:end="93:40"><expr pos:start="93:13" pos:end="93:39"><name pos:start="93:13" pos:end="93:35"><name pos:start="93:13" pos:end="93:20">interval</name><operator pos:start="93:21" pos:end="93:22">-&gt;</operator><name pos:start="93:23" pos:end="93:35">end_is_offset</name></name> <operator pos:start="93:37" pos:end="93:37">=</operator> <literal type="number" pos:start="93:39" pos:end="93:39">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:16"><expr pos:start="95:13" pos:end="95:15"><name pos:start="95:13" pos:end="95:13">p</name><operator pos:start="95:14" pos:end="95:15">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="97:11" pos:end="101:9">else <block pos:start="97:16" pos:end="101:9">{<block_content pos:start="99:13" pos:end="99:40">

            <expr_stmt pos:start="99:13" pos:end="99:40"><expr pos:start="99:13" pos:end="99:39"><name pos:start="99:13" pos:end="99:35"><name pos:start="99:13" pos:end="99:20">interval</name><operator pos:start="99:21" pos:end="99:22">-&gt;</operator><name pos:start="99:23" pos:end="99:35">end_is_offset</name></name> <operator pos:start="99:37" pos:end="99:37">=</operator> <literal type="number" pos:start="99:39" pos:end="99:39">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="105:9" pos:end="144:9"><if pos:start="105:9" pos:end="129:9">if <condition pos:start="105:12" pos:end="105:49">(<expr pos:start="105:13" pos:end="105:48"><name pos:start="105:13" pos:end="105:35"><name pos:start="105:13" pos:end="105:20">interval</name><operator pos:start="105:21" pos:end="105:22">-&gt;</operator><name pos:start="105:23" pos:end="105:35">end_is_offset</name></name> <operator pos:start="105:37" pos:end="105:38">&amp;&amp;</operator> <operator pos:start="105:40" pos:end="105:40">*</operator><name pos:start="105:41" pos:end="105:41">p</name> <operator pos:start="105:43" pos:end="105:44">==</operator> <literal type="char" pos:start="105:46" pos:end="105:48">'#'</literal></expr>)</condition> <block pos:start="105:51" pos:end="129:9">{<block_content pos:start="107:13" pos:end="127:32">

            <decl_stmt pos:start="107:13" pos:end="107:30"><decl pos:start="107:13" pos:end="107:29"><type pos:start="107:13" pos:end="107:25"><name pos:start="107:13" pos:end="107:16">long</name> <name pos:start="107:18" pos:end="107:21">long</name> <name pos:start="107:23" pos:end="107:25">int</name></type> <name pos:start="107:27" pos:end="107:29">lli</name></decl>;</decl_stmt>

            <decl_stmt pos:start="109:13" pos:end="109:23"><decl pos:start="109:13" pos:end="109:22"><type pos:start="109:13" pos:end="109:18"><name pos:start="109:13" pos:end="109:16">char</name> <modifier pos:start="109:18" pos:end="109:18">*</modifier></type><name pos:start="109:19" pos:end="109:22">tail</name></decl>;</decl_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:42"><expr pos:start="111:13" pos:end="111:41"><name pos:start="111:13" pos:end="111:37"><name pos:start="111:13" pos:end="111:20">interval</name><operator pos:start="111:21" pos:end="111:22">-&gt;</operator><name pos:start="111:23" pos:end="111:37">duration_frames</name></name> <operator pos:start="111:39" pos:end="111:39">=</operator> <literal type="number" pos:start="111:41" pos:end="111:41">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:16"><expr pos:start="113:13" pos:end="113:15"><name pos:start="113:13" pos:end="113:13">p</name><operator pos:start="113:14" pos:end="113:15">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:40"><expr pos:start="115:13" pos:end="115:39"><name pos:start="115:13" pos:end="115:15">lli</name> <operator pos:start="115:17" pos:end="115:17">=</operator> <call pos:start="115:19" pos:end="115:39"><name pos:start="115:19" pos:end="115:25">strtoll</name><argument_list pos:start="115:26" pos:end="115:39">(<argument pos:start="115:27" pos:end="115:27"><expr pos:start="115:27" pos:end="115:27"><name pos:start="115:27" pos:end="115:27">p</name></expr></argument>, <argument pos:start="115:30" pos:end="115:34"><expr pos:start="115:30" pos:end="115:34"><operator pos:start="115:30" pos:end="115:30">&amp;</operator><name pos:start="115:31" pos:end="115:34">tail</name></expr></argument>, <argument pos:start="115:37" pos:end="115:38"><expr pos:start="115:37" pos:end="115:38"><literal type="number" pos:start="115:37" pos:end="115:38">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="117:13" pos:end="125:13"><if pos:start="117:13" pos:end="125:13">if <condition pos:start="117:16" pos:end="117:33">(<expr pos:start="117:17" pos:end="117:32"><operator pos:start="117:17" pos:end="117:17">*</operator><name pos:start="117:18" pos:end="117:21">tail</name> <operator pos:start="117:23" pos:end="117:24">||</operator> <name pos:start="117:26" pos:end="117:28">lli</name> <operator pos:start="117:30" pos:end="117:30">&lt;</operator> <literal type="number" pos:start="117:32" pos:end="117:32">0</literal></expr>)</condition> <block pos:start="117:35" pos:end="125:13">{<block_content pos:start="119:17" pos:end="123:25">

                <expr_stmt pos:start="119:17" pos:end="121:92"><expr pos:start="119:17" pos:end="121:91"><call pos:start="119:17" pos:end="121:91"><name pos:start="119:17" pos:end="119:22">av_log</name><argument_list pos:start="119:23" pos:end="121:91">(<argument pos:start="119:24" pos:end="119:27"><expr pos:start="119:24" pos:end="119:27"><name pos:start="119:24" pos:end="119:27">NULL</name></expr></argument>, <argument pos:start="119:30" pos:end="119:41"><expr pos:start="119:30" pos:end="119:41"><name pos:start="119:30" pos:end="119:41">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="121:24" pos:end="121:87"><expr pos:start="121:24" pos:end="121:87"><literal type="string" pos:start="121:24" pos:end="121:87">"Invalid or negative value '%s' for duration number of frames\n"</literal></expr></argument>, <argument pos:start="121:90" pos:end="121:90"><expr pos:start="121:90" pos:end="121:90"><name pos:start="121:90" pos:end="121:90">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="123:17" pos:end="123:25">goto <name pos:start="123:22" pos:end="123:24">end</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:32"><expr pos:start="127:13" pos:end="127:31"><name pos:start="127:13" pos:end="127:25"><name pos:start="127:13" pos:end="127:20">interval</name><operator pos:start="127:21" pos:end="127:22">-&gt;</operator><name pos:start="127:23" pos:end="127:25">end</name></name> <operator pos:start="127:27" pos:end="127:27">=</operator> <name pos:start="127:29" pos:end="127:31">lli</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="129:11" pos:end="144:9">else <block pos:start="129:16" pos:end="144:9">{<block_content pos:start="132:13" pos:end="142:31">


            <expr_stmt pos:start="132:13" pos:end="132:43"><expr pos:start="132:13" pos:end="132:42"><name pos:start="132:13" pos:end="132:15">ret</name> <operator pos:start="132:17" pos:end="132:17">=</operator> <call pos:start="132:19" pos:end="132:42"><name pos:start="132:19" pos:end="132:31">av_parse_time</name><argument_list pos:start="132:32" pos:end="132:42">(<argument pos:start="132:33" pos:end="132:35"><expr pos:start="132:33" pos:end="132:35"><operator pos:start="132:33" pos:end="132:33">&amp;</operator><name pos:start="132:34" pos:end="132:35">us</name></expr></argument>, <argument pos:start="132:38" pos:end="132:38"><expr pos:start="132:38" pos:end="132:38"><name pos:start="132:38" pos:end="132:38">p</name></expr></argument>, <argument pos:start="132:41" pos:end="132:41"><expr pos:start="132:41" pos:end="132:41"><literal type="number" pos:start="132:41" pos:end="132:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="134:13" pos:end="140:13"><if pos:start="134:13" pos:end="140:13">if <condition pos:start="134:16" pos:end="134:24">(<expr pos:start="134:17" pos:end="134:23"><name pos:start="134:17" pos:end="134:19">ret</name> <operator pos:start="134:21" pos:end="134:21">&lt;</operator> <literal type="number" pos:start="134:23" pos:end="134:23">0</literal></expr>)</condition> <block pos:start="134:26" pos:end="140:13">{<block_content pos:start="136:17" pos:end="138:25">

                <expr_stmt pos:start="136:17" pos:end="136:100"><expr pos:start="136:17" pos:end="136:99"><call pos:start="136:17" pos:end="136:99"><name pos:start="136:17" pos:end="136:22">av_log</name><argument_list pos:start="136:23" pos:end="136:99">(<argument pos:start="136:24" pos:end="136:27"><expr pos:start="136:24" pos:end="136:27"><name pos:start="136:24" pos:end="136:27">NULL</name></expr></argument>, <argument pos:start="136:30" pos:end="136:41"><expr pos:start="136:30" pos:end="136:41"><name pos:start="136:30" pos:end="136:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="136:44" pos:end="136:95"><expr pos:start="136:44" pos:end="136:95"><literal type="string" pos:start="136:44" pos:end="136:95">"Invalid interval end/duration specification '%s'\n"</literal></expr></argument>, <argument pos:start="136:98" pos:end="136:98"><expr pos:start="136:98" pos:end="136:98"><name pos:start="136:98" pos:end="136:98">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="138:17" pos:end="138:25">goto <name pos:start="138:22" pos:end="138:24">end</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="142:13" pos:end="142:31"><expr pos:start="142:13" pos:end="142:30"><name pos:start="142:13" pos:end="142:25"><name pos:start="142:13" pos:end="142:20">interval</name><operator pos:start="142:21" pos:end="142:22">-&gt;</operator><name pos:start="142:23" pos:end="142:25">end</name></name> <operator pos:start="142:27" pos:end="142:27">=</operator> <name pos:start="142:29" pos:end="142:30">us</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="146:7" pos:end="150:5">else <block pos:start="146:12" pos:end="150:5">{<block_content pos:start="148:9" pos:end="148:30">

        <expr_stmt pos:start="148:9" pos:end="148:30"><expr pos:start="148:9" pos:end="148:29"><name pos:start="148:9" pos:end="148:25"><name pos:start="148:9" pos:end="148:16">interval</name><operator pos:start="148:17" pos:end="148:18">-&gt;</operator><name pos:start="148:19" pos:end="148:25">has_end</name></name> <operator pos:start="148:27" pos:end="148:27">=</operator> <literal type="number" pos:start="148:29" pos:end="148:29">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



<label pos:start="154:1" pos:end="154:4"><name pos:start="154:1" pos:end="154:3">end</name>:</label>

    <expr_stmt pos:start="156:5" pos:end="156:18"><expr pos:start="156:5" pos:end="156:17"><call pos:start="156:5" pos:end="156:17"><name pos:start="156:5" pos:end="156:11">av_free</name><argument_list pos:start="156:12" pos:end="156:17">(<argument pos:start="156:13" pos:end="156:16"><expr pos:start="156:13" pos:end="156:16"><name pos:start="156:13" pos:end="156:16">spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="158:5" pos:end="158:15">return <expr pos:start="158:12" pos:end="158:14"><name pos:start="158:12" pos:end="158:14">ret</name></expr>;</return>

</block_content>}</block></function></unit>
