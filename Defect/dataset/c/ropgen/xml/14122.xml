<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14122.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:24">xen_ram_init</name><parameter_list pos:start="1:25" pos:end="1:45">(<parameter pos:start="1:26" pos:end="1:44"><decl pos:start="1:26" pos:end="1:44"><type pos:start="1:26" pos:end="1:35"><name pos:start="1:26" pos:end="1:35">ram_addr_t</name></type> <name pos:start="1:37" pos:end="1:44">ram_size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="65:1">{<block_content pos:start="5:5" pos:end="64:0">

    <decl_stmt pos:start="5:5" pos:end="5:24"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">RAMBlock</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:23">new_block</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:56"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:14">ram_addr_t</name></type> <name pos:start="7:16" pos:end="7:32">below_4g_mem_size</name></decl>, <decl pos:start="7:35" pos:end="7:55"><type ref="prev" pos:start="7:5" pos:end="7:14"/><name pos:start="7:35" pos:end="7:51">above_4g_mem_size</name> <init pos:start="7:53" pos:end="7:55">= <expr pos:start="7:55" pos:end="7:55"><literal type="number" pos:start="7:55" pos:end="7:55">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:50"><expr pos:start="11:5" pos:end="11:49"><name pos:start="11:5" pos:end="11:13">new_block</name> <operator pos:start="11:15" pos:end="11:15">=</operator> <call pos:start="11:17" pos:end="11:49"><name pos:start="11:17" pos:end="11:28">qemu_mallocz</name><argument_list pos:start="11:29" pos:end="11:49">(<argument pos:start="11:30" pos:end="11:48"><expr pos:start="11:30" pos:end="11:48"><sizeof pos:start="11:30" pos:end="11:48">sizeof <argument_list pos:start="11:37" pos:end="11:48">(<argument pos:start="11:38" pos:end="11:47"><expr pos:start="11:38" pos:end="11:47"><operator pos:start="11:38" pos:end="11:38">*</operator><name pos:start="11:39" pos:end="11:47">new_block</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:68"><expr pos:start="13:5" pos:end="13:67"><call pos:start="13:5" pos:end="13:67"><name pos:start="13:5" pos:end="13:11">pstrcpy</name><argument_list pos:start="13:12" pos:end="13:67">(<argument pos:start="13:13" pos:end="13:28"><expr pos:start="13:13" pos:end="13:28"><name pos:start="13:13" pos:end="13:28"><name pos:start="13:13" pos:end="13:21">new_block</name><operator pos:start="13:22" pos:end="13:23">-&gt;</operator><name pos:start="13:24" pos:end="13:28">idstr</name></name></expr></argument>, <argument pos:start="13:31" pos:end="13:55"><expr pos:start="13:31" pos:end="13:55"><sizeof pos:start="13:31" pos:end="13:55">sizeof <argument_list pos:start="13:38" pos:end="13:55">(<argument pos:start="13:39" pos:end="13:54"><expr pos:start="13:39" pos:end="13:54"><name pos:start="13:39" pos:end="13:54"><name pos:start="13:39" pos:end="13:47">new_block</name><operator pos:start="13:48" pos:end="13:49">-&gt;</operator><name pos:start="13:50" pos:end="13:54">idstr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="13:58" pos:end="13:66"><expr pos:start="13:58" pos:end="13:66"><literal type="string" pos:start="13:58" pos:end="13:66">"xen.ram"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:27"><expr pos:start="15:5" pos:end="15:26"><name pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:13">new_block</name><operator pos:start="15:14" pos:end="15:15">-&gt;</operator><name pos:start="15:16" pos:end="15:19">host</name></name> <operator pos:start="15:21" pos:end="15:21">=</operator> <name pos:start="15:23" pos:end="15:26">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:26"><expr pos:start="17:5" pos:end="17:25"><name pos:start="17:5" pos:end="17:21"><name pos:start="17:5" pos:end="17:13">new_block</name><operator pos:start="17:14" pos:end="17:15">-&gt;</operator><name pos:start="17:16" pos:end="17:21">offset</name></name> <operator pos:start="17:23" pos:end="17:23">=</operator> <literal type="number" pos:start="17:25" pos:end="17:25">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:33"><expr pos:start="19:5" pos:end="19:32"><name pos:start="19:5" pos:end="19:21"><name pos:start="19:5" pos:end="19:13">new_block</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:21">length</name></name> <operator pos:start="19:23" pos:end="19:23">=</operator> <name pos:start="19:25" pos:end="19:32">ram_size</name></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:57"><expr pos:start="23:5" pos:end="23:56"><call pos:start="23:5" pos:end="23:56"><name pos:start="23:5" pos:end="23:21">QLIST_INSERT_HEAD</name><argument_list pos:start="23:22" pos:end="23:56">(<argument pos:start="23:23" pos:end="23:38"><expr pos:start="23:23" pos:end="23:38"><operator pos:start="23:23" pos:end="23:23">&amp;</operator><name pos:start="23:24" pos:end="23:38"><name pos:start="23:24" pos:end="23:31">ram_list</name><operator pos:start="23:32" pos:end="23:32">.</operator><name pos:start="23:33" pos:end="23:38">blocks</name></name></expr></argument>, <argument pos:start="23:41" pos:end="23:49"><expr pos:start="23:41" pos:end="23:49"><name pos:start="23:41" pos:end="23:49">new_block</name></expr></argument>, <argument pos:start="23:52" pos:end="23:55"><expr pos:start="23:52" pos:end="23:55"><name pos:start="23:52" pos:end="23:55">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="29:78"><expr pos:start="27:5" pos:end="29:77"><name pos:start="27:5" pos:end="27:23"><name pos:start="27:5" pos:end="27:12">ram_list</name><operator pos:start="27:13" pos:end="27:13">.</operator><name pos:start="27:14" pos:end="27:23">phys_dirty</name></name> <operator pos:start="27:25" pos:end="27:25">=</operator> <call pos:start="27:27" pos:end="29:77"><name pos:start="27:27" pos:end="27:38">qemu_realloc</name><argument_list pos:start="27:39" pos:end="29:77">(<argument pos:start="27:40" pos:end="27:58"><expr pos:start="27:40" pos:end="27:58"><name pos:start="27:40" pos:end="27:58"><name pos:start="27:40" pos:end="27:47">ram_list</name><operator pos:start="27:48" pos:end="27:48">.</operator><name pos:start="27:49" pos:end="27:58">phys_dirty</name></name></expr></argument>,

                                       <argument pos:start="29:40" pos:end="29:76"><expr pos:start="29:40" pos:end="29:76"><name pos:start="29:40" pos:end="29:56"><name pos:start="29:40" pos:end="29:48">new_block</name><operator pos:start="29:49" pos:end="29:50">-&gt;</operator><name pos:start="29:51" pos:end="29:56">length</name></name> <operator pos:start="29:58" pos:end="29:59">&gt;&gt;</operator> <name pos:start="29:61" pos:end="29:76">TARGET_PAGE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="33:56"><expr pos:start="31:5" pos:end="33:55"><call pos:start="31:5" pos:end="33:55"><name pos:start="31:5" pos:end="31:10">memset</name><argument_list pos:start="31:11" pos:end="33:55">(<argument pos:start="31:12" pos:end="31:72"><expr pos:start="31:12" pos:end="31:72"><name pos:start="31:12" pos:end="31:30"><name pos:start="31:12" pos:end="31:19">ram_list</name><operator pos:start="31:20" pos:end="31:20">.</operator><name pos:start="31:21" pos:end="31:30">phys_dirty</name></name> <operator pos:start="31:32" pos:end="31:32">+</operator> <operator pos:start="31:34" pos:end="31:34">(</operator><name pos:start="31:35" pos:end="31:51"><name pos:start="31:35" pos:end="31:43">new_block</name><operator pos:start="31:44" pos:end="31:45">-&gt;</operator><name pos:start="31:46" pos:end="31:51">offset</name></name> <operator pos:start="31:53" pos:end="31:54">&gt;&gt;</operator> <name pos:start="31:56" pos:end="31:71">TARGET_PAGE_BITS</name><operator pos:start="31:72" pos:end="31:72">)</operator></expr></argument>,

           <argument pos:start="33:12" pos:end="33:15"><expr pos:start="33:12" pos:end="33:15"><literal type="number" pos:start="33:12" pos:end="33:15">0xff</literal></expr></argument>, <argument pos:start="33:18" pos:end="33:54"><expr pos:start="33:18" pos:end="33:54"><name pos:start="33:18" pos:end="33:34"><name pos:start="33:18" pos:end="33:26">new_block</name><operator pos:start="33:27" pos:end="33:28">-&gt;</operator><name pos:start="33:29" pos:end="33:34">length</name></name> <operator pos:start="33:36" pos:end="33:37">&gt;&gt;</operator> <name pos:start="33:39" pos:end="33:54">TARGET_PAGE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="37:5" pos:end="47:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:32">(<expr pos:start="37:9" pos:end="37:30"><name pos:start="37:9" pos:end="37:16">ram_size</name> <operator pos:start="37:18" pos:end="37:19">&gt;=</operator> <literal type="number" pos:start="37:21" pos:end="37:30">0xe0000000</literal></expr> )</condition> <block pos:start="37:34" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:39">

        <expr_stmt pos:start="39:9" pos:end="39:50"><expr pos:start="39:9" pos:end="39:49"><name pos:start="39:9" pos:end="39:25">above_4g_mem_size</name> <operator pos:start="39:27" pos:end="39:27">=</operator> <name pos:start="39:29" pos:end="39:36">ram_size</name> <operator pos:start="39:38" pos:end="39:38">-</operator> <literal type="number" pos:start="39:40" pos:end="39:49">0xe0000000</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:39"><expr pos:start="41:9" pos:end="41:38"><name pos:start="41:9" pos:end="41:25">below_4g_mem_size</name> <operator pos:start="41:27" pos:end="41:27">=</operator> <literal type="number" pos:start="41:29" pos:end="41:38">0xe0000000</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="43:7" pos:end="47:5">else <block pos:start="43:12" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:37">

        <expr_stmt pos:start="45:9" pos:end="45:37"><expr pos:start="45:9" pos:end="45:36"><name pos:start="45:9" pos:end="45:25">below_4g_mem_size</name> <operator pos:start="45:27" pos:end="45:27">=</operator> <name pos:start="45:29" pos:end="45:36">ram_size</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="54:0"><expr pos:start="51:5" pos:end="51:73"><call pos:start="51:5" pos:end="51:73"><name pos:start="51:5" pos:end="51:32">cpu_register_physical_memory</name><argument_list pos:start="51:33" pos:end="51:73">(<argument pos:start="51:34" pos:end="51:34"><expr pos:start="51:34" pos:end="51:34"><literal type="number" pos:start="51:34" pos:end="51:34">0</literal></expr></argument>, <argument pos:start="51:37" pos:end="51:53"><expr pos:start="51:37" pos:end="51:53"><name pos:start="51:37" pos:end="51:53">below_4g_mem_size</name></expr></argument>, <argument pos:start="51:56" pos:end="51:72"><expr pos:start="51:56" pos:end="51:72"><name pos:start="51:56" pos:end="51:72"><name pos:start="51:56" pos:end="51:64">new_block</name><operator pos:start="51:65" pos:end="51:66">-&gt;</operator><name pos:start="51:67" pos:end="51:72">offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="53:1" pos:end="53:30">#<cpp:directive pos:start="53:2" pos:end="53:3">if</cpp:directive> <expr pos:start="53:5" pos:end="53:30"><name pos:start="53:5" pos:end="53:25">TARGET_PHYS_ADDR_BITS</name> <operator pos:start="53:27" pos:end="53:27">&gt;</operator> <literal type="number" pos:start="53:29" pos:end="53:30">32</literal></expr></cpp:if>

    <if_stmt pos:start="55:5" pos:end="64:0"><if pos:start="55:5" pos:end="64:0">if <condition pos:start="55:8" pos:end="55:30">(<expr pos:start="55:9" pos:end="55:29"><name pos:start="55:9" pos:end="55:25">above_4g_mem_size</name> <operator pos:start="55:27" pos:end="55:27">&gt;</operator> <literal type="number" pos:start="55:29" pos:end="55:29">0</literal></expr>)</condition> <block pos:start="55:32" pos:end="64:0">{<block_content pos:start="57:9" pos:end="59:76">

        <expr_stmt pos:start="57:9" pos:end="59:76"><expr pos:start="57:9" pos:end="59:75"><call pos:start="57:9" pos:end="59:75"><name pos:start="57:9" pos:end="57:36">cpu_register_physical_memory</name><argument_list pos:start="57:37" pos:end="59:75">(<argument pos:start="57:38" pos:end="57:51"><expr pos:start="57:38" pos:end="57:51"><literal type="number" pos:start="57:38" pos:end="57:51">0x100000000ULL</literal></expr></argument>, <argument pos:start="57:54" pos:end="57:70"><expr pos:start="57:54" pos:end="57:70"><name pos:start="57:54" pos:end="57:70">above_4g_mem_size</name></expr></argument>,

                                     <argument pos:start="59:38" pos:end="59:74"><expr pos:start="59:38" pos:end="59:74"><name pos:start="59:38" pos:end="59:54"><name pos:start="59:38" pos:end="59:46">new_block</name><operator pos:start="59:47" pos:end="59:48">-&gt;</operator><name pos:start="59:49" pos:end="59:54">offset</name></name> <operator pos:start="59:56" pos:end="59:56">+</operator> <name pos:start="59:58" pos:end="59:74">below_4g_mem_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="63:1" pos:end="63:6">#<cpp:directive pos:start="63:2" pos:end="63:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
