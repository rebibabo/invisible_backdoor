<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17400.c" pos:tabs="8"><function pos:start="1:1" pos:end="16:15"><type pos:start="1:1" pos:end="1:8"><name pos:start="1:1" pos:end="1:8">uint32_t</name></type> <name pos:start="1:10" pos:end="1:23">ide_data_readl</name><parameter_list pos:start="1:24" pos:end="1:52">(<parameter pos:start="1:25" pos:end="1:36"><decl pos:start="1:25" pos:end="1:36"><type pos:start="1:25" pos:end="1:36"><name pos:start="1:25" pos:end="1:28">void</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:36">opaque</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:51"><decl pos:start="1:39" pos:end="1:51"><type pos:start="1:39" pos:end="1:51"><name pos:start="1:39" pos:end="1:46">uint32_t</name></type> <name pos:start="1:48" pos:end="1:51">addr</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="16:15">{<block_content pos:start="3:5" pos:end="16:15">
    <decl_stmt pos:start="3:5" pos:end="3:25"><decl pos:start="3:5" pos:end="3:24"><type pos:start="3:5" pos:end="3:12"><name pos:start="3:5" pos:end="3:10">IDEBus</name> <modifier pos:start="3:12" pos:end="3:12">*</modifier></type><name pos:start="3:13" pos:end="3:15">bus</name> <init pos:start="3:17" pos:end="3:24">= <expr pos:start="3:19" pos:end="3:24"><name pos:start="3:19" pos:end="3:24">opaque</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:40"><decl pos:start="4:5" pos:end="4:39"><type pos:start="4:5" pos:end="4:14"><name pos:start="4:5" pos:end="4:12">IDEState</name> <modifier pos:start="4:14" pos:end="4:14">*</modifier></type><name pos:start="4:15" pos:end="4:15">s</name> <init pos:start="4:17" pos:end="4:39">= <expr pos:start="4:19" pos:end="4:39"><call pos:start="4:19" pos:end="4:39"><name pos:start="4:19" pos:end="4:34">idebus_active_if</name><argument_list pos:start="4:35" pos:end="4:39">(<argument pos:start="4:36" pos:end="4:38"><expr pos:start="4:36" pos:end="4:38"><name pos:start="4:36" pos:end="4:38">bus</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:15"><decl pos:start="5:5" pos:end="5:14"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">uint8_t</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:14">p</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:12"><decl pos:start="6:5" pos:end="6:11"><type pos:start="6:5" pos:end="6:7"><name pos:start="6:5" pos:end="6:7">int</name></type> <name pos:start="6:9" pos:end="6:11">ret</name></decl>;</decl_stmt>
    <comment type="block" pos:start="7:5" pos:end="8:74">/* PIO data access allowed only when DRQ bit is set. The result of a read
     * during PIO in is indeterminate, return 0 and don't move forward. */</comment>
    <if_stmt pos:start="9:5" pos:end="16:15"><if pos:start="9:5" pos:end="16:15">if <condition pos:start="9:8" pos:end="9:54">(<expr pos:start="9:9" pos:end="9:53"><operator pos:start="9:9" pos:end="9:9">!</operator><operator pos:start="9:10" pos:end="9:10">(</operator><name pos:start="9:11" pos:end="9:19"><name pos:start="9:11" pos:end="9:11">s</name><operator pos:start="9:12" pos:end="9:13">-&gt;</operator><name pos:start="9:14" pos:end="9:19">status</name></name> <operator pos:start="9:21" pos:end="9:21">&amp;</operator> <name pos:start="9:23" pos:end="9:30">DRQ_STAT</name><operator pos:start="9:31" pos:end="9:31">)</operator> <operator pos:start="9:33" pos:end="9:34">||</operator> <operator pos:start="9:36" pos:end="9:36">!</operator><call pos:start="9:37" pos:end="9:53"><name pos:start="9:37" pos:end="9:50">ide_is_pio_out</name><argument_list pos:start="9:51" pos:end="9:53">(<argument pos:start="9:52" pos:end="9:52"><expr pos:start="9:52" pos:end="9:52"><name pos:start="9:52" pos:end="9:52">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="9:56" pos:end="16:15">{<block_content pos:start="10:5" pos:end="16:15">
    <expr_stmt pos:start="10:5" pos:end="10:20"><expr pos:start="10:5" pos:end="10:19"><name pos:start="10:5" pos:end="10:5">p</name> <operator pos:start="10:7" pos:end="10:7">=</operator> <name pos:start="10:9" pos:end="10:19"><name pos:start="10:9" pos:end="10:9">s</name><operator pos:start="10:10" pos:end="10:11">-&gt;</operator><name pos:start="10:12" pos:end="10:19">data_ptr</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="11:5" pos:end="11:38"><expr pos:start="11:5" pos:end="11:37"><name pos:start="11:5" pos:end="11:7">ret</name> <operator pos:start="11:9" pos:end="11:9">=</operator> <call pos:start="11:11" pos:end="11:37"><name pos:start="11:11" pos:end="11:21">cpu_to_le32</name><argument_list pos:start="11:22" pos:end="11:37">(<argument pos:start="11:23" pos:end="11:36"><expr pos:start="11:23" pos:end="11:36"><operator pos:start="11:23" pos:end="11:23">*</operator><operator pos:start="11:24" pos:end="11:24">(</operator><name pos:start="11:25" pos:end="11:32">uint32_t</name> <operator pos:start="11:34" pos:end="11:34">*</operator><operator pos:start="11:35" pos:end="11:35">)</operator><name pos:start="11:36" pos:end="11:36">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="12:5" pos:end="12:11"><expr pos:start="12:5" pos:end="12:10"><name pos:start="12:5" pos:end="12:5">p</name> <operator pos:start="12:7" pos:end="12:8">+=</operator> <literal type="number" pos:start="12:10" pos:end="12:10">4</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="13:5" pos:end="13:20"><expr pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:5">s</name><operator pos:start="13:6" pos:end="13:7">-&gt;</operator><name pos:start="13:8" pos:end="13:15">data_ptr</name></name> <operator pos:start="13:17" pos:end="13:17">=</operator> <name pos:start="13:19" pos:end="13:19">p</name></expr>;</expr_stmt>
    <if_stmt pos:start="14:5" pos:end="15:32"><if pos:start="14:5" pos:end="15:32">if <condition pos:start="14:8" pos:end="14:25">(<expr pos:start="14:9" pos:end="14:24"><name pos:start="14:9" pos:end="14:9">p</name> <operator pos:start="14:11" pos:end="14:12">&gt;=</operator> <name pos:start="14:14" pos:end="14:24"><name pos:start="14:14" pos:end="14:14">s</name><operator pos:start="14:15" pos:end="14:16">-&gt;</operator><name pos:start="14:17" pos:end="14:24">data_end</name></name></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:32"><block_content pos:start="15:9" pos:end="15:32">
        <expr_stmt pos:start="15:9" pos:end="15:32"><expr pos:start="15:9" pos:end="15:31"><call pos:start="15:9" pos:end="15:31"><name pos:start="15:9" pos:end="15:28"><name pos:start="15:9" pos:end="15:9">s</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:28">end_transfer_func</name></name><argument_list pos:start="15:29" pos:end="15:31">(<argument pos:start="15:30" pos:end="15:30"><expr pos:start="15:30" pos:end="15:30"><name pos:start="15:30" pos:end="15:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return pos:start="16:5" pos:end="16:15">return <expr pos:start="16:12" pos:end="16:14"><name pos:start="16:12" pos:end="16:14">ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></function></unit>
