<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10078.c" pos:tabs="8"><function pos:start="1:1" pos:end="135:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">usb_host_speed_compat</name><parameter_list pos:start="1:34" pos:end="1:51">(<parameter pos:start="1:35" pos:end="1:50"><decl pos:start="1:35" pos:end="1:50"><type pos:start="1:35" pos:end="1:49"><name pos:start="1:35" pos:end="1:47">USBHostDevice</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:50">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="135:1">{<block_content pos:start="5:5" pos:end="133:5">

    <decl_stmt pos:start="5:5" pos:end="5:36"><decl pos:start="5:5" pos:end="5:35"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">USBDevice</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:19">udev</name> <init pos:start="5:21" pos:end="5:35">= <expr pos:start="5:23" pos:end="5:35"><call pos:start="5:23" pos:end="5:35"><name pos:start="5:23" pos:end="5:32">USB_DEVICE</name><argument_list pos:start="5:33" pos:end="5:35">(<argument pos:start="5:34" pos:end="5:34"><expr pos:start="5:34" pos:end="5:34"><name pos:start="5:34" pos:end="5:34">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:42"><decl pos:start="7:5" pos:end="7:41"><type pos:start="7:5" pos:end="7:37"><name pos:start="7:5" pos:end="7:35"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:35">libusb_config_descriptor</name></name> <modifier pos:start="7:37" pos:end="7:37">*</modifier></type><name pos:start="7:38" pos:end="7:41">conf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:51"><decl pos:start="9:5" pos:end="9:50"><type pos:start="9:5" pos:end="9:46"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:44"><name pos:start="9:11" pos:end="9:16">struct</name> <name pos:start="9:18" pos:end="9:44">libusb_interface_descriptor</name></name> <modifier pos:start="9:46" pos:end="9:46">*</modifier></type><name pos:start="9:47" pos:end="9:50">intf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="14:0"><decl pos:start="11:5" pos:end="11:49"><type pos:start="11:5" pos:end="11:45"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:43"><name pos:start="11:11" pos:end="11:16">struct</name> <name pos:start="11:18" pos:end="11:43">libusb_endpoint_descriptor</name></name> <modifier pos:start="11:45" pos:end="11:45">*</modifier></type><name pos:start="11:46" pos:end="11:49">endp</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="13:1" pos:end="13:19">#<cpp:directive pos:start="13:2" pos:end="13:6">ifdef</cpp:directive> <name pos:start="13:8" pos:end="13:19">HAVE_STREAMS</name></cpp:ifdef>

    <decl_stmt pos:start="15:5" pos:end="18:0"><decl pos:start="15:5" pos:end="15:64"><type pos:start="15:5" pos:end="15:52"><name pos:start="15:5" pos:end="15:50"><name pos:start="15:5" pos:end="15:10">struct</name> <name pos:start="15:12" pos:end="15:50">libusb_ss_endpoint_companion_descriptor</name></name> <modifier pos:start="15:52" pos:end="15:52">*</modifier></type><name pos:start="15:53" pos:end="15:64">endp_ss_comp</name></decl>;</decl_stmt>

<cpp:endif pos:start="17:1" pos:end="17:6">#<cpp:directive pos:start="17:2" pos:end="17:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="19:5" pos:end="19:28"><decl pos:start="19:5" pos:end="19:27"><type pos:start="19:5" pos:end="19:8"><name pos:start="19:5" pos:end="19:8">bool</name></type> <name pos:start="19:10" pos:end="19:20">compat_high</name> <init pos:start="19:22" pos:end="19:27">= <expr pos:start="19:24" pos:end="19:27"><name pos:start="19:24" pos:end="19:27">true</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:28"><decl pos:start="21:5" pos:end="21:27"><type pos:start="21:5" pos:end="21:8"><name pos:start="21:5" pos:end="21:8">bool</name></type> <name pos:start="21:10" pos:end="21:20">compat_full</name> <init pos:start="21:22" pos:end="21:27">= <expr pos:start="21:24" pos:end="21:27"><name pos:start="21:24" pos:end="21:27">true</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:17"><decl pos:start="23:5" pos:end="23:16"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:11">uint8_t</name></type> <name pos:start="23:13" pos:end="23:16">type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:23"><decl pos:start="25:5" pos:end="25:10"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:10">rc</name></decl>, <decl pos:start="25:13" pos:end="25:13"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:13" pos:end="25:13">c</name></decl>, <decl pos:start="25:16" pos:end="25:16"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:16" pos:end="25:16">i</name></decl>, <decl pos:start="25:19" pos:end="25:19"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:19" pos:end="25:19">a</name></decl>, <decl pos:start="25:22" pos:end="25:22"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:22" pos:end="25:22">e</name></decl>;</decl_stmt>



    <for pos:start="29:5" pos:end="111:5">for <control pos:start="29:9" pos:end="29:21">(<init pos:start="29:10" pos:end="29:15"><expr pos:start="29:10" pos:end="29:14"><name pos:start="29:10" pos:end="29:10">c</name> <operator pos:start="29:12" pos:end="29:12">=</operator> <literal type="number" pos:start="29:14" pos:end="29:14">0</literal></expr>;</init><condition pos:start="29:16" pos:end="29:16">;</condition> <incr pos:start="29:18" pos:end="29:20"><expr pos:start="29:18" pos:end="29:20"><name pos:start="29:18" pos:end="29:18">c</name><operator pos:start="29:19" pos:end="29:20">++</operator></expr></incr>)</control> <block pos:start="29:23" pos:end="111:5">{<block_content pos:start="31:9" pos:end="109:44">

        <expr_stmt pos:start="31:9" pos:end="31:60"><expr pos:start="31:9" pos:end="31:59"><name pos:start="31:9" pos:end="31:10">rc</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <call pos:start="31:14" pos:end="31:59"><name pos:start="31:14" pos:end="31:41">libusb_get_config_descriptor</name><argument_list pos:start="31:42" pos:end="31:59">(<argument pos:start="31:43" pos:end="31:48"><expr pos:start="31:43" pos:end="31:48"><name pos:start="31:43" pos:end="31:48"><name pos:start="31:43" pos:end="31:43">s</name><operator pos:start="31:44" pos:end="31:45">-&gt;</operator><name pos:start="31:46" pos:end="31:48">dev</name></name></expr></argument>, <argument pos:start="31:51" pos:end="31:51"><expr pos:start="31:51" pos:end="31:51"><name pos:start="31:51" pos:end="31:51">c</name></expr></argument>, <argument pos:start="31:54" pos:end="31:58"><expr pos:start="31:54" pos:end="31:58"><operator pos:start="31:54" pos:end="31:54">&amp;</operator><name pos:start="31:55" pos:end="31:58">conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="37:9"><if pos:start="33:9" pos:end="37:9">if <condition pos:start="33:12" pos:end="33:20">(<expr pos:start="33:13" pos:end="33:19"><name pos:start="33:13" pos:end="33:14">rc</name> <operator pos:start="33:16" pos:end="33:17">!=</operator> <literal type="number" pos:start="33:19" pos:end="33:19">0</literal></expr>)</condition> <block pos:start="33:22" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:18">

            <break pos:start="35:13" pos:end="35:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <for pos:start="39:9" pos:end="107:9">for <control pos:start="39:13" pos:end="39:50">(<init pos:start="39:14" pos:end="39:19"><expr pos:start="39:14" pos:end="39:18"><name pos:start="39:14" pos:end="39:14">i</name> <operator pos:start="39:16" pos:end="39:16">=</operator> <literal type="number" pos:start="39:18" pos:end="39:18">0</literal></expr>;</init> <condition pos:start="39:21" pos:end="39:45"><expr pos:start="39:21" pos:end="39:44"><name pos:start="39:21" pos:end="39:21">i</name> <operator pos:start="39:23" pos:end="39:23">&lt;</operator> <name pos:start="39:25" pos:end="39:44"><name pos:start="39:25" pos:end="39:28">conf</name><operator pos:start="39:29" pos:end="39:30">-&gt;</operator><name pos:start="39:31" pos:end="39:44">bNumInterfaces</name></name></expr>;</condition> <incr pos:start="39:47" pos:end="39:49"><expr pos:start="39:47" pos:end="39:49"><name pos:start="39:47" pos:end="39:47">i</name><operator pos:start="39:48" pos:end="39:49">++</operator></expr></incr>)</control> <block pos:start="39:52" pos:end="107:9">{<block_content pos:start="41:13" pos:end="105:13">

            <for pos:start="41:13" pos:end="105:13">for <control pos:start="41:17" pos:end="41:67">(<init pos:start="41:18" pos:end="41:23"><expr pos:start="41:18" pos:end="41:22"><name pos:start="41:18" pos:end="41:18">a</name> <operator pos:start="41:20" pos:end="41:20">=</operator> <literal type="number" pos:start="41:22" pos:end="41:22">0</literal></expr>;</init> <condition pos:start="41:25" pos:end="41:62"><expr pos:start="41:25" pos:end="41:61"><name pos:start="41:25" pos:end="41:25">a</name> <operator pos:start="41:27" pos:end="41:27">&lt;</operator> <name pos:start="41:29" pos:end="41:46"><name pos:start="41:29" pos:end="41:32">conf</name><operator pos:start="41:33" pos:end="41:34">-&gt;</operator><name pos:start="41:35" pos:end="41:43">interface</name><index pos:start="41:44" pos:end="41:46">[<expr pos:start="41:45" pos:end="41:45"><name pos:start="41:45" pos:end="41:45">i</name></expr>]</index></name><operator pos:start="41:47" pos:end="41:47">.</operator><name pos:start="41:48" pos:end="41:61">num_altsetting</name></expr>;</condition> <incr pos:start="41:64" pos:end="41:66"><expr pos:start="41:64" pos:end="41:66"><name pos:start="41:64" pos:end="41:64">a</name><operator pos:start="41:65" pos:end="41:66">++</operator></expr></incr>)</control> <block pos:start="41:69" pos:end="105:13">{<block_content pos:start="43:17" pos:end="103:17">

                <expr_stmt pos:start="43:17" pos:end="43:57"><expr pos:start="43:17" pos:end="43:56"><name pos:start="43:17" pos:end="43:20">intf</name> <operator pos:start="43:22" pos:end="43:22">=</operator> <operator pos:start="43:24" pos:end="43:24">&amp;</operator><name pos:start="43:25" pos:end="43:42"><name pos:start="43:25" pos:end="43:28">conf</name><operator pos:start="43:29" pos:end="43:30">-&gt;</operator><name pos:start="43:31" pos:end="43:39">interface</name><index pos:start="43:40" pos:end="43:42">[<expr pos:start="43:41" pos:end="43:41"><name pos:start="43:41" pos:end="43:41">i</name></expr>]</index></name><operator pos:start="43:43" pos:end="43:43">.</operator><name pos:start="43:44" pos:end="43:56"><name pos:start="43:44" pos:end="43:53">altsetting</name><index pos:start="43:54" pos:end="43:56">[<expr pos:start="43:55" pos:end="43:55"><name pos:start="43:55" pos:end="43:55">a</name></expr>]</index></name></expr>;</expr_stmt>

                <for pos:start="45:17" pos:end="103:17">for <control pos:start="45:21" pos:end="45:57">(<init pos:start="45:22" pos:end="45:27"><expr pos:start="45:22" pos:end="45:26"><name pos:start="45:22" pos:end="45:22">e</name> <operator pos:start="45:24" pos:end="45:24">=</operator> <literal type="number" pos:start="45:26" pos:end="45:26">0</literal></expr>;</init> <condition pos:start="45:29" pos:end="45:52"><expr pos:start="45:29" pos:end="45:51"><name pos:start="45:29" pos:end="45:29">e</name> <operator pos:start="45:31" pos:end="45:31">&lt;</operator> <name pos:start="45:33" pos:end="45:51"><name pos:start="45:33" pos:end="45:36">intf</name><operator pos:start="45:37" pos:end="45:38">-&gt;</operator><name pos:start="45:39" pos:end="45:51">bNumEndpoints</name></name></expr>;</condition> <incr pos:start="45:54" pos:end="45:56"><expr pos:start="45:54" pos:end="45:56"><name pos:start="45:54" pos:end="45:54">e</name><operator pos:start="45:55" pos:end="45:56">++</operator></expr></incr>)</control> <block pos:start="45:59" pos:end="103:17">{<block_content pos:start="47:21" pos:end="101:21">

                    <expr_stmt pos:start="47:21" pos:end="47:46"><expr pos:start="47:21" pos:end="47:45"><name pos:start="47:21" pos:end="47:24">endp</name> <operator pos:start="47:26" pos:end="47:26">=</operator> <operator pos:start="47:28" pos:end="47:28">&amp;</operator><name pos:start="47:29" pos:end="47:45"><name pos:start="47:29" pos:end="47:32">intf</name><operator pos:start="47:33" pos:end="47:34">-&gt;</operator><name pos:start="47:35" pos:end="47:42">endpoint</name><index pos:start="47:43" pos:end="47:45">[<expr pos:start="47:44" pos:end="47:44"><name pos:start="47:44" pos:end="47:44">e</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="49:21" pos:end="49:52"><expr pos:start="49:21" pos:end="49:51"><name pos:start="49:21" pos:end="49:24">type</name> <operator pos:start="49:26" pos:end="49:26">=</operator> <name pos:start="49:28" pos:end="49:45"><name pos:start="49:28" pos:end="49:31">endp</name><operator pos:start="49:32" pos:end="49:33">-&gt;</operator><name pos:start="49:34" pos:end="49:45">bmAttributes</name></name> <operator pos:start="49:47" pos:end="49:47">&amp;</operator> <literal type="number" pos:start="49:49" pos:end="49:51">0x3</literal></expr>;</expr_stmt>

                    <switch pos:start="51:21" pos:end="101:21">switch <condition pos:start="51:28" pos:end="51:33">(<expr pos:start="51:29" pos:end="51:32"><name pos:start="51:29" pos:end="51:32">type</name></expr>)</condition> <block pos:start="51:35" pos:end="101:21">{<block_content pos:start="53:21" pos:end="99:30">

                    <case pos:start="53:21" pos:end="53:30">case <expr pos:start="53:26" pos:end="53:29"><literal type="number" pos:start="53:26" pos:end="53:29">0x01</literal></expr>:</case> <comment type="block" pos:start="53:32" pos:end="53:40">/* ISO */</comment>

                        <expr_stmt pos:start="55:25" pos:end="55:44"><expr pos:start="55:25" pos:end="55:43"><name pos:start="55:25" pos:end="55:35">compat_full</name> <operator pos:start="55:37" pos:end="55:37">=</operator> <name pos:start="55:39" pos:end="55:43">false</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="57:25" pos:end="57:44"><expr pos:start="57:25" pos:end="57:43"><name pos:start="57:25" pos:end="57:35">compat_high</name> <operator pos:start="57:37" pos:end="57:37">=</operator> <name pos:start="57:39" pos:end="57:43">false</name></expr>;</expr_stmt>

                        <break pos:start="59:25" pos:end="59:30">break;</break>

                    <case pos:start="61:21" pos:end="64:0">case <expr pos:start="61:26" pos:end="61:29"><literal type="number" pos:start="61:26" pos:end="61:29">0x02</literal></expr>:</case> <comment type="block" pos:start="61:32" pos:end="61:41">/* BULK */</comment>

<cpp:ifdef pos:start="63:1" pos:end="63:19">#<cpp:directive pos:start="63:2" pos:end="63:6">ifdef</cpp:directive> <name pos:start="63:8" pos:end="63:19">HAVE_STREAMS</name></cpp:ifdef>

                        <expr_stmt pos:start="65:25" pos:end="67:55"><expr pos:start="65:25" pos:end="67:54"><name pos:start="65:25" pos:end="65:26">rc</name> <operator pos:start="65:28" pos:end="65:28">=</operator> <call pos:start="65:30" pos:end="67:54"><name pos:start="65:30" pos:end="65:72">libusb_get_ss_endpoint_companion_descriptor</name>

                            <argument_list pos:start="67:29" pos:end="67:54">(<argument pos:start="67:30" pos:end="67:32"><expr pos:start="67:30" pos:end="67:32"><name pos:start="67:30" pos:end="67:32">ctx</name></expr></argument>, <argument pos:start="67:35" pos:end="67:38"><expr pos:start="67:35" pos:end="67:38"><name pos:start="67:35" pos:end="67:38">endp</name></expr></argument>, <argument pos:start="67:41" pos:end="67:53"><expr pos:start="67:41" pos:end="67:53"><operator pos:start="67:41" pos:end="67:41">&amp;</operator><name pos:start="67:42" pos:end="67:53">endp_ss_comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="69:25" pos:end="82:0"><if pos:start="69:25" pos:end="82:0">if <condition pos:start="69:28" pos:end="69:49">(<expr pos:start="69:29" pos:end="69:48"><name pos:start="69:29" pos:end="69:30">rc</name> <operator pos:start="69:32" pos:end="69:33">==</operator> <name pos:start="69:35" pos:end="69:48">LIBUSB_SUCCESS</name></expr>)</condition> <block pos:start="69:51" pos:end="82:0">{<block_content pos:start="71:29" pos:end="77:48">

                            <expr_stmt pos:start="71:29" pos:end="73:47"><expr pos:start="71:29" pos:end="73:46"><call pos:start="71:29" pos:end="73:46"><name pos:start="71:29" pos:end="71:72">libusb_free_ss_endpoint_companion_descriptor</name>

                                <argument_list pos:start="73:33" pos:end="73:46">(<argument pos:start="73:34" pos:end="73:45"><expr pos:start="73:34" pos:end="73:45"><name pos:start="73:34" pos:end="73:45">endp_ss_comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="75:29" pos:end="75:48"><expr pos:start="75:29" pos:end="75:47"><name pos:start="75:29" pos:end="75:39">compat_full</name> <operator pos:start="75:41" pos:end="75:41">=</operator> <name pos:start="75:43" pos:end="75:47">false</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="77:29" pos:end="77:48"><expr pos:start="77:29" pos:end="77:47"><name pos:start="77:29" pos:end="77:39">compat_high</name> <operator pos:start="77:41" pos:end="77:41">=</operator> <name pos:start="77:43" pos:end="77:47">false</name></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="81:1" pos:end="81:6">#<cpp:directive pos:start="81:2" pos:end="81:6">endif</cpp:directive></cpp:endif>

                        <break pos:start="83:25" pos:end="83:30">break;</break>

                    <case pos:start="85:21" pos:end="85:30">case <expr pos:start="85:26" pos:end="85:29"><literal type="number" pos:start="85:26" pos:end="85:29">0x03</literal></expr>:</case> <comment type="block" pos:start="85:32" pos:end="85:46">/* INTERRUPT */</comment>

                        <if_stmt pos:start="87:25" pos:end="91:25"><if pos:start="87:25" pos:end="91:25">if <condition pos:start="87:28" pos:end="87:54">(<expr pos:start="87:29" pos:end="87:53"><name pos:start="87:29" pos:end="87:48"><name pos:start="87:29" pos:end="87:32">endp</name><operator pos:start="87:33" pos:end="87:34">-&gt;</operator><name pos:start="87:35" pos:end="87:48">wMaxPacketSize</name></name> <operator pos:start="87:50" pos:end="87:50">&gt;</operator> <literal type="number" pos:start="87:52" pos:end="87:53">64</literal></expr>)</condition> <block pos:start="87:56" pos:end="91:25">{<block_content pos:start="89:29" pos:end="89:48">

                            <expr_stmt pos:start="89:29" pos:end="89:48"><expr pos:start="89:29" pos:end="89:47"><name pos:start="89:29" pos:end="89:39">compat_full</name> <operator pos:start="89:41" pos:end="89:41">=</operator> <name pos:start="89:43" pos:end="89:47">false</name></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <if_stmt pos:start="93:25" pos:end="97:25"><if pos:start="93:25" pos:end="97:25">if <condition pos:start="93:28" pos:end="93:56">(<expr pos:start="93:29" pos:end="93:55"><name pos:start="93:29" pos:end="93:48"><name pos:start="93:29" pos:end="93:32">endp</name><operator pos:start="93:33" pos:end="93:34">-&gt;</operator><name pos:start="93:35" pos:end="93:48">wMaxPacketSize</name></name> <operator pos:start="93:50" pos:end="93:50">&gt;</operator> <literal type="number" pos:start="93:52" pos:end="93:55">1024</literal></expr>)</condition> <block pos:start="93:58" pos:end="97:25">{<block_content pos:start="95:29" pos:end="95:48">

                            <expr_stmt pos:start="95:29" pos:end="95:48"><expr pos:start="95:29" pos:end="95:47"><name pos:start="95:29" pos:end="95:39">compat_high</name> <operator pos:start="95:41" pos:end="95:41">=</operator> <name pos:start="95:43" pos:end="95:47">false</name></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <break pos:start="99:25" pos:end="99:30">break;</break>

                    </block_content>}</block></switch>

                </block_content>}</block></for>

            </block_content>}</block></for>

        </block_content>}</block></for>

        <expr_stmt pos:start="109:9" pos:end="109:44"><expr pos:start="109:9" pos:end="109:43"><call pos:start="109:9" pos:end="109:43"><name pos:start="109:9" pos:end="109:37">libusb_free_config_descriptor</name><argument_list pos:start="109:38" pos:end="109:43">(<argument pos:start="109:39" pos:end="109:42"><expr pos:start="109:39" pos:end="109:42"><name pos:start="109:39" pos:end="109:42">conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="115:5" pos:end="115:41"><expr pos:start="115:5" pos:end="115:40"><name pos:start="115:5" pos:end="115:19"><name pos:start="115:5" pos:end="115:8">udev</name><operator pos:start="115:9" pos:end="115:10">-&gt;</operator><name pos:start="115:11" pos:end="115:19">speedmask</name></name> <operator pos:start="115:21" pos:end="115:21">=</operator> <operator pos:start="115:23" pos:end="115:23">(</operator><literal type="number" pos:start="115:24" pos:end="115:24">1</literal> <operator pos:start="115:26" pos:end="115:27">&lt;&lt;</operator> <name pos:start="115:29" pos:end="115:39"><name pos:start="115:29" pos:end="115:32">udev</name><operator pos:start="115:33" pos:end="115:34">-&gt;</operator><name pos:start="115:35" pos:end="115:39">speed</name></name><operator pos:start="115:40" pos:end="115:40">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="117:5" pos:end="121:5"><if pos:start="117:5" pos:end="121:5">if <condition pos:start="117:8" pos:end="117:54">(<expr pos:start="117:9" pos:end="117:53"><name pos:start="117:9" pos:end="117:19"><name pos:start="117:9" pos:end="117:12">udev</name><operator pos:start="117:13" pos:end="117:14">-&gt;</operator><name pos:start="117:15" pos:end="117:19">speed</name></name> <operator pos:start="117:21" pos:end="117:22">==</operator> <name pos:start="117:24" pos:end="117:38">USB_SPEED_SUPER</name> <operator pos:start="117:40" pos:end="117:41">&amp;&amp;</operator> <name pos:start="117:43" pos:end="117:53">compat_high</name></expr>)</condition> <block pos:start="117:56" pos:end="121:5">{<block_content pos:start="119:9" pos:end="119:47">

        <expr_stmt pos:start="119:9" pos:end="119:47"><expr pos:start="119:9" pos:end="119:46"><name pos:start="119:9" pos:end="119:23"><name pos:start="119:9" pos:end="119:12">udev</name><operator pos:start="119:13" pos:end="119:14">-&gt;</operator><name pos:start="119:15" pos:end="119:23">speedmask</name></name> <operator pos:start="119:25" pos:end="119:26">|=</operator> <name pos:start="119:28" pos:end="119:46">USB_SPEED_MASK_HIGH</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="123:5" pos:end="127:5"><if pos:start="123:5" pos:end="127:5">if <condition pos:start="123:8" pos:end="123:54">(<expr pos:start="123:9" pos:end="123:53"><name pos:start="123:9" pos:end="123:19"><name pos:start="123:9" pos:end="123:12">udev</name><operator pos:start="123:13" pos:end="123:14">-&gt;</operator><name pos:start="123:15" pos:end="123:19">speed</name></name> <operator pos:start="123:21" pos:end="123:22">==</operator> <name pos:start="123:24" pos:end="123:38">USB_SPEED_SUPER</name> <operator pos:start="123:40" pos:end="123:41">&amp;&amp;</operator> <name pos:start="123:43" pos:end="123:53">compat_full</name></expr>)</condition> <block pos:start="123:56" pos:end="127:5">{<block_content pos:start="125:9" pos:end="125:47">

        <expr_stmt pos:start="125:9" pos:end="125:47"><expr pos:start="125:9" pos:end="125:46"><name pos:start="125:9" pos:end="125:23"><name pos:start="125:9" pos:end="125:12">udev</name><operator pos:start="125:13" pos:end="125:14">-&gt;</operator><name pos:start="125:15" pos:end="125:23">speedmask</name></name> <operator pos:start="125:25" pos:end="125:26">|=</operator> <name pos:start="125:28" pos:end="125:46">USB_SPEED_MASK_FULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="129:5" pos:end="133:5"><if pos:start="129:5" pos:end="133:5">if <condition pos:start="129:8" pos:end="129:53">(<expr pos:start="129:9" pos:end="129:52"><name pos:start="129:9" pos:end="129:19"><name pos:start="129:9" pos:end="129:12">udev</name><operator pos:start="129:13" pos:end="129:14">-&gt;</operator><name pos:start="129:15" pos:end="129:19">speed</name></name> <operator pos:start="129:21" pos:end="129:22">==</operator> <name pos:start="129:24" pos:end="129:37">USB_SPEED_HIGH</name> <operator pos:start="129:39" pos:end="129:40">&amp;&amp;</operator> <name pos:start="129:42" pos:end="129:52">compat_full</name></expr>)</condition> <block pos:start="129:55" pos:end="133:5">{<block_content pos:start="131:9" pos:end="131:47">

        <expr_stmt pos:start="131:9" pos:end="131:47"><expr pos:start="131:9" pos:end="131:46"><name pos:start="131:9" pos:end="131:23"><name pos:start="131:9" pos:end="131:12">udev</name><operator pos:start="131:13" pos:end="131:14">-&gt;</operator><name pos:start="131:15" pos:end="131:23">speedmask</name></name> <operator pos:start="131:25" pos:end="131:26">|=</operator> <name pos:start="131:28" pos:end="131:46">USB_SPEED_MASK_FULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
