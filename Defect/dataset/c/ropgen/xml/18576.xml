<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18576.c" pos:tabs="8"><function pos:start="1:1" pos:end="467:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">decode_block</name><parameter_list pos:start="1:24" pos:end="3:48">(<parameter pos:start="1:25" pos:end="1:45"><decl pos:start="1:25" pos:end="1:45"><type pos:start="1:25" pos:end="1:45"><name pos:start="1:25" pos:end="1:38">AVCodecContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:45">avctx</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:58"><decl pos:start="1:48" pos:end="1:58"><type pos:start="1:48" pos:end="1:58"><name pos:start="1:48" pos:end="1:51">void</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:58">tdata</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:33"><decl pos:start="3:25" pos:end="3:33"><type pos:start="3:25" pos:end="3:33"><name pos:start="3:25" pos:end="3:27">int</name></type> <name pos:start="3:29" pos:end="3:33">jobnr</name></decl></parameter>, <parameter pos:start="3:36" pos:end="3:47"><decl pos:start="3:36" pos:end="3:47"><type pos:start="3:36" pos:end="3:47"><name pos:start="3:36" pos:end="3:38">int</name></type> <name pos:start="3:40" pos:end="3:47">threadnr</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="467:1">{<block_content pos:start="7:5" pos:end="465:13">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">EXRContext</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:17">s</name> <init pos:start="7:19" pos:end="7:36">= <expr pos:start="7:21" pos:end="7:36"><name pos:start="7:21" pos:end="7:36"><name pos:start="7:21" pos:end="7:25">avctx</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:11">AVFrame</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier><specifier pos:start="9:14" pos:end="9:18">const</specifier></type> <name pos:start="9:20" pos:end="9:20">p</name> <init pos:start="9:22" pos:end="9:33">= <expr pos:start="9:24" pos:end="9:33"><name pos:start="9:24" pos:end="9:33"><name pos:start="9:24" pos:end="9:24">s</name><operator pos:start="9:25" pos:end="9:26">-&gt;</operator><name pos:start="9:27" pos:end="9:33">picture</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:50"><decl pos:start="11:5" pos:end="11:49"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:17">EXRThreadData</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:21">td</name> <init pos:start="11:23" pos:end="11:49">= <expr pos:start="11:25" pos:end="11:49"><operator pos:start="11:25" pos:end="11:25">&amp;</operator><name pos:start="11:26" pos:end="11:49"><name pos:start="11:26" pos:end="11:26">s</name><operator pos:start="11:27" pos:end="11:28">-&gt;</operator><name pos:start="11:29" pos:end="11:39">thread_data</name><index pos:start="11:40" pos:end="11:49">[<expr pos:start="11:41" pos:end="11:48"><name pos:start="11:41" pos:end="11:48">threadnr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:45"><decl pos:start="13:5" pos:end="13:44"><type pos:start="13:5" pos:end="13:19"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:17">uint8_t</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:36"><name pos:start="13:20" pos:end="13:33">channel_buffer</name><index pos:start="13:34" pos:end="13:36">[<expr pos:start="13:35" pos:end="13:35"><literal type="number" pos:start="13:35" pos:end="13:35">4</literal></expr>]</index></name> <init pos:start="13:38" pos:end="13:44">= <expr pos:start="13:40" pos:end="13:44"><block pos:start="13:40" pos:end="13:44">{ <expr pos:start="13:42" pos:end="13:42"><literal type="number" pos:start="13:42" pos:end="13:42">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:32"><decl pos:start="15:5" pos:end="15:31"><type pos:start="15:5" pos:end="15:19"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:17">uint8_t</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:22">buf</name> <init pos:start="15:24" pos:end="15:31">= <expr pos:start="15:26" pos:end="15:31"><name pos:start="15:26" pos:end="15:31"><name pos:start="15:26" pos:end="15:26">s</name><operator pos:start="15:27" pos:end="15:28">-&gt;</operator><name pos:start="15:29" pos:end="15:31">buf</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:44"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:24">line_offset</name></decl>, <decl pos:start="17:27" pos:end="17:43"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:27" pos:end="17:43">uncompressed_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:12">uint16_t</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:19">ptr_x</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:17"><decl pos:start="21:5" pos:end="21:16"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:11">uint8_t</name> <modifier pos:start="21:13" pos:end="21:13">*</modifier></type><name pos:start="21:14" pos:end="21:16">ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:23"><decl pos:start="23:5" pos:end="23:22"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:12">uint32_t</name></type> <name pos:start="23:14" pos:end="23:22">data_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:27"><decl pos:start="25:5" pos:end="25:17"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:12">uint64_t</name></type> <name pos:start="25:14" pos:end="25:17">line</name></decl>, <decl pos:start="25:20" pos:end="25:26"><type ref="prev" pos:start="25:5" pos:end="25:12"/><name pos:start="25:20" pos:end="25:22">col</name> <init pos:start="25:24" pos:end="25:26">= <expr pos:start="25:26" pos:end="25:26"><literal type="number" pos:start="25:26" pos:end="25:26">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:56"><decl pos:start="27:5" pos:end="27:19"><type pos:start="27:5" pos:end="27:12"><name pos:start="27:5" pos:end="27:12">uint64_t</name></type> <name pos:start="27:14" pos:end="27:19">tile_x</name></decl>, <decl pos:start="27:22" pos:end="27:27"><type ref="prev" pos:start="27:5" pos:end="27:12"/><name pos:start="27:22" pos:end="27:27">tile_y</name></decl>, <decl pos:start="27:30" pos:end="27:41"><type ref="prev" pos:start="27:5" pos:end="27:12"/><name pos:start="27:30" pos:end="27:41">tile_level_x</name></decl>, <decl pos:start="27:44" pos:end="27:55"><type ref="prev" pos:start="27:5" pos:end="27:12"/><name pos:start="27:44" pos:end="27:55">tile_level_y</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:23"><decl pos:start="29:5" pos:end="29:22"><type pos:start="29:5" pos:end="29:19"><specifier pos:start="29:5" pos:end="29:9">const</specifier> <name pos:start="29:11" pos:end="29:17">uint8_t</name> <modifier pos:start="29:19" pos:end="29:19">*</modifier></type><name pos:start="29:20" pos:end="29:22">src</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:76"><decl pos:start="31:5" pos:end="31:75"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:13">axmax</name> <init pos:start="31:15" pos:end="31:75">= <expr pos:start="31:17" pos:end="31:75"><operator pos:start="31:17" pos:end="31:17">(</operator><name pos:start="31:18" pos:end="31:29"><name pos:start="31:18" pos:end="31:22">avctx</name><operator pos:start="31:23" pos:end="31:24">-&gt;</operator><name pos:start="31:25" pos:end="31:29">width</name></name> <operator pos:start="31:31" pos:end="31:31">-</operator> <operator pos:start="31:33" pos:end="31:33">(</operator><name pos:start="31:34" pos:end="31:40"><name pos:start="31:34" pos:end="31:34">s</name><operator pos:start="31:35" pos:end="31:36">-&gt;</operator><name pos:start="31:37" pos:end="31:40">xmax</name></name> <operator pos:start="31:42" pos:end="31:42">+</operator> <literal type="number" pos:start="31:44" pos:end="31:44">1</literal><operator pos:start="31:45" pos:end="31:45">)</operator><operator pos:start="31:46" pos:end="31:46">)</operator> <operator pos:start="31:48" pos:end="31:48">*</operator> <literal type="number" pos:start="31:50" pos:end="31:50">2</literal> <operator pos:start="31:52" pos:end="31:52">*</operator> <name pos:start="31:54" pos:end="31:75"><name pos:start="31:54" pos:end="31:54">s</name><operator pos:start="31:55" pos:end="31:56">-&gt;</operator><name pos:start="31:57" pos:end="31:60">desc</name><operator pos:start="31:61" pos:end="31:62">-&gt;</operator><name pos:start="31:63" pos:end="31:75">nb_components</name></name></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="31:78" pos:end="31:129">/* nb pixel to add at the right of the datawindow */</comment>

    <decl_stmt pos:start="33:5" pos:end="33:53"><decl pos:start="33:5" pos:end="33:52"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:13">bxmin</name> <init pos:start="33:15" pos:end="33:52">= <expr pos:start="33:17" pos:end="33:52"><name pos:start="33:17" pos:end="33:23"><name pos:start="33:17" pos:end="33:17">s</name><operator pos:start="33:18" pos:end="33:19">-&gt;</operator><name pos:start="33:20" pos:end="33:23">xmin</name></name> <operator pos:start="33:25" pos:end="33:25">*</operator> <literal type="number" pos:start="33:27" pos:end="33:27">2</literal> <operator pos:start="33:29" pos:end="33:29">*</operator> <name pos:start="33:31" pos:end="33:52"><name pos:start="33:31" pos:end="33:31">s</name><operator pos:start="33:32" pos:end="33:33">-&gt;</operator><name pos:start="33:34" pos:end="33:37">desc</name><operator pos:start="33:38" pos:end="33:39">-&gt;</operator><name pos:start="33:40" pos:end="33:52">nb_components</name></name></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="33:55" pos:end="33:105">/* nb pixel to add at the left of the datawindow */</comment>

    <decl_stmt pos:start="35:5" pos:end="35:37"><decl pos:start="35:5" pos:end="35:9"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:9">i</name></decl>, <decl pos:start="35:12" pos:end="35:12"><type ref="prev" pos:start="35:5" pos:end="35:7"/><name pos:start="35:12" pos:end="35:12">x</name></decl>, <decl pos:start="35:15" pos:end="35:36"><type ref="prev" pos:start="35:5" pos:end="35:7"/><name pos:start="35:15" pos:end="35:22">buf_size</name> <init pos:start="35:24" pos:end="35:36">= <expr pos:start="35:26" pos:end="35:36"><name pos:start="35:26" pos:end="35:36"><name pos:start="35:26" pos:end="35:26">s</name><operator pos:start="35:27" pos:end="35:28">-&gt;</operator><name pos:start="35:29" pos:end="35:36">buf_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:29"><decl pos:start="37:5" pos:end="37:9"><type pos:start="37:5" pos:end="37:7"><name pos:start="37:5" pos:end="37:7">int</name></type> <name pos:start="37:9" pos:end="37:9">c</name></decl>, <decl pos:start="37:12" pos:end="37:28"><type ref="prev" pos:start="37:5" pos:end="37:7"/><name pos:start="37:12" pos:end="37:28">rgb_channel_count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:38"><decl pos:start="39:5" pos:end="39:37"><type pos:start="39:5" pos:end="39:9"><name pos:start="39:5" pos:end="39:9">float</name></type> <name pos:start="39:11" pos:end="39:19">one_gamma</name> <init pos:start="39:21" pos:end="39:37">= <expr pos:start="39:23" pos:end="39:37"><literal type="number" pos:start="39:23" pos:end="39:26">1.0f</literal> <operator pos:start="39:28" pos:end="39:28">/</operator> <name pos:start="39:30" pos:end="39:37"><name pos:start="39:30" pos:end="39:30">s</name><operator pos:start="39:31" pos:end="39:32">-&gt;</operator><name pos:start="39:33" pos:end="39:37">gamma</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:87"><decl pos:start="41:5" pos:end="41:86"><type pos:start="41:5" pos:end="41:23"><name pos:start="41:5" pos:end="41:23">avpriv_trc_function</name></type> <name pos:start="41:25" pos:end="41:32">trc_func</name> <init pos:start="41:34" pos:end="41:86">= <expr pos:start="41:36" pos:end="41:86"><call pos:start="41:36" pos:end="41:86"><name pos:start="41:36" pos:end="41:67">avpriv_get_trc_function_from_trc</name><argument_list pos:start="41:68" pos:end="41:86">(<argument pos:start="41:69" pos:end="41:85"><expr pos:start="41:69" pos:end="41:85"><name pos:start="41:69" pos:end="41:85"><name pos:start="41:69" pos:end="41:69">s</name><operator pos:start="41:70" pos:end="41:71">-&gt;</operator><name pos:start="41:72" pos:end="41:85">apply_trc_type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:12"><decl pos:start="43:5" pos:end="43:11"><type pos:start="43:5" pos:end="43:7"><name pos:start="43:5" pos:end="43:7">int</name></type> <name pos:start="43:9" pos:end="43:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:52"><expr pos:start="47:5" pos:end="47:51"><name pos:start="47:5" pos:end="47:15">line_offset</name> <operator pos:start="47:17" pos:end="47:17">=</operator> <call pos:start="47:19" pos:end="47:51"><name pos:start="47:19" pos:end="47:25">AV_RL64</name><argument_list pos:start="47:26" pos:end="47:51">(<argument pos:start="47:27" pos:end="47:50"><expr pos:start="47:27" pos:end="47:50"><name pos:start="47:27" pos:end="47:38"><name pos:start="47:27" pos:end="47:27">s</name><operator pos:start="47:28" pos:end="47:29">-&gt;</operator><name pos:start="47:30" pos:end="47:31">gb</name><operator pos:start="47:32" pos:end="47:32">.</operator><name pos:start="47:33" pos:end="47:38">buffer</name></name> <operator pos:start="47:40" pos:end="47:40">+</operator> <name pos:start="47:42" pos:end="47:46">jobnr</name> <operator pos:start="47:48" pos:end="47:48">*</operator> <literal type="number" pos:start="47:50" pos:end="47:50">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="51:5" pos:end="191:5"><if pos:start="51:5" pos:end="139:5">if <condition pos:start="51:8" pos:end="51:19">(<expr pos:start="51:9" pos:end="51:18"><name pos:start="51:9" pos:end="51:18"><name pos:start="51:9" pos:end="51:9">s</name><operator pos:start="51:10" pos:end="51:11">-&gt;</operator><name pos:start="51:12" pos:end="51:18">is_tile</name></name></expr>)</condition> <block pos:start="51:21" pos:end="139:5">{<block_content pos:start="53:9" pos:end="137:72">

        <if_stmt pos:start="53:9" pos:end="55:39"><if pos:start="53:9" pos:end="55:39">if <condition pos:start="53:12" pos:end="53:40">(<expr pos:start="53:13" pos:end="53:39"><name pos:start="53:13" pos:end="53:23">line_offset</name> <operator pos:start="53:25" pos:end="53:25">&gt;</operator> <name pos:start="53:27" pos:end="53:34">buf_size</name> <operator pos:start="53:36" pos:end="53:36">-</operator> <literal type="number" pos:start="53:38" pos:end="53:39">20</literal></expr>)</condition><block type="pseudo" pos:start="55:13" pos:end="55:39"><block_content pos:start="55:13" pos:end="55:39">

            <return pos:start="55:13" pos:end="55:39">return <expr pos:start="55:20" pos:end="55:38"><name pos:start="55:20" pos:end="55:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="59:9" pos:end="59:38"><expr pos:start="59:9" pos:end="59:37"><name pos:start="59:9" pos:end="59:11">src</name>  <operator pos:start="59:14" pos:end="59:14">=</operator> <name pos:start="59:16" pos:end="59:18">buf</name> <operator pos:start="59:20" pos:end="59:20">+</operator> <name pos:start="59:22" pos:end="59:32">line_offset</name> <operator pos:start="59:34" pos:end="59:34">+</operator> <literal type="number" pos:start="59:36" pos:end="59:37">20</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="63:9" pos:end="63:35"><expr pos:start="63:9" pos:end="63:34"><name pos:start="63:9" pos:end="63:14">tile_x</name> <operator pos:start="63:16" pos:end="63:16">=</operator> <call pos:start="63:18" pos:end="63:34"><name pos:start="63:18" pos:end="63:24">AV_RL32</name><argument_list pos:start="63:25" pos:end="63:34">(<argument pos:start="63:26" pos:end="63:33"><expr pos:start="63:26" pos:end="63:33"><name pos:start="63:26" pos:end="63:28">src</name> <operator pos:start="63:30" pos:end="63:30">-</operator> <literal type="number" pos:start="63:32" pos:end="63:33">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:35"><expr pos:start="65:9" pos:end="65:34"><name pos:start="65:9" pos:end="65:14">tile_y</name> <operator pos:start="65:16" pos:end="65:16">=</operator> <call pos:start="65:18" pos:end="65:34"><name pos:start="65:18" pos:end="65:24">AV_RL32</name><argument_list pos:start="65:25" pos:end="65:34">(<argument pos:start="65:26" pos:end="65:33"><expr pos:start="65:26" pos:end="65:33"><name pos:start="65:26" pos:end="65:28">src</name> <operator pos:start="65:30" pos:end="65:30">-</operator> <literal type="number" pos:start="65:32" pos:end="65:33">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:41"><expr pos:start="67:9" pos:end="67:40"><name pos:start="67:9" pos:end="67:20">tile_level_x</name> <operator pos:start="67:22" pos:end="67:22">=</operator> <call pos:start="67:24" pos:end="67:40"><name pos:start="67:24" pos:end="67:30">AV_RL32</name><argument_list pos:start="67:31" pos:end="67:40">(<argument pos:start="67:32" pos:end="67:39"><expr pos:start="67:32" pos:end="67:39"><name pos:start="67:32" pos:end="67:34">src</name> <operator pos:start="67:36" pos:end="67:36">-</operator> <literal type="number" pos:start="67:38" pos:end="67:39">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:40"><expr pos:start="69:9" pos:end="69:39"><name pos:start="69:9" pos:end="69:20">tile_level_y</name> <operator pos:start="69:22" pos:end="69:22">=</operator> <call pos:start="69:24" pos:end="69:39"><name pos:start="69:24" pos:end="69:30">AV_RL32</name><argument_list pos:start="69:31" pos:end="69:39">(<argument pos:start="69:32" pos:end="69:38"><expr pos:start="69:32" pos:end="69:38"><name pos:start="69:32" pos:end="69:34">src</name> <operator pos:start="69:36" pos:end="69:36">-</operator> <literal type="number" pos:start="69:38" pos:end="69:38">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="73:9" pos:end="73:37"><expr pos:start="73:9" pos:end="73:36"><name pos:start="73:9" pos:end="73:17">data_size</name> <operator pos:start="73:19" pos:end="73:19">=</operator> <call pos:start="73:21" pos:end="73:36"><name pos:start="73:21" pos:end="73:27">AV_RL32</name><argument_list pos:start="73:28" pos:end="73:36">(<argument pos:start="73:29" pos:end="73:35"><expr pos:start="73:29" pos:end="73:35"><name pos:start="73:29" pos:end="73:31">src</name> <operator pos:start="73:33" pos:end="73:33">-</operator> <literal type="number" pos:start="73:35" pos:end="73:35">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="75:9" pos:end="77:39"><if pos:start="75:9" pos:end="77:39">if <condition pos:start="75:12" pos:end="75:51">(<expr pos:start="75:13" pos:end="75:50"><name pos:start="75:13" pos:end="75:21">data_size</name> <operator pos:start="75:23" pos:end="75:24">&lt;=</operator> <literal type="number" pos:start="75:26" pos:end="75:26">0</literal> <operator pos:start="75:28" pos:end="75:29">||</operator> <name pos:start="75:31" pos:end="75:39">data_size</name> <operator pos:start="75:41" pos:end="75:41">&gt;</operator> <name pos:start="75:43" pos:end="75:50">buf_size</name></expr>)</condition><block type="pseudo" pos:start="77:13" pos:end="77:39"><block_content pos:start="77:13" pos:end="77:39">

            <return pos:start="77:13" pos:end="77:39">return <expr pos:start="77:20" pos:end="77:38"><name pos:start="77:20" pos:end="77:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



        <if_stmt pos:start="81:9" pos:end="87:9"><if pos:start="81:9" pos:end="87:9">if <condition pos:start="81:12" pos:end="81:41">(<expr pos:start="81:13" pos:end="81:40"><name pos:start="81:13" pos:end="81:24">tile_level_x</name> <operator pos:start="81:26" pos:end="81:27">||</operator> <name pos:start="81:29" pos:end="81:40">tile_level_y</name></expr>)</condition> <block pos:start="81:43" pos:end="87:9">{<block_content pos:start="83:13" pos:end="85:40"> <comment type="block" pos:start="81:45" pos:end="81:87">/* tile level, is not the full res level */</comment>

            <expr_stmt pos:start="83:13" pos:end="83:88"><expr pos:start="83:13" pos:end="83:87"><call pos:start="83:13" pos:end="83:87"><name pos:start="83:13" pos:end="83:41">avpriv_report_missing_feature</name><argument_list pos:start="83:42" pos:end="83:87">(<argument pos:start="83:43" pos:end="83:50"><expr pos:start="83:43" pos:end="83:50"><name pos:start="83:43" pos:end="83:50"><name pos:start="83:43" pos:end="83:43">s</name><operator pos:start="83:44" pos:end="83:45">-&gt;</operator><name pos:start="83:46" pos:end="83:50">avctx</name></name></expr></argument>, <argument pos:start="83:53" pos:end="83:86"><expr pos:start="83:53" pos:end="83:86"><literal type="string" pos:start="83:53" pos:end="83:86">"Subres tile before full res tile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="85:13" pos:end="85:40">return <expr pos:start="85:20" pos:end="85:39"><name pos:start="85:20" pos:end="85:39">AVERROR_PATCHWELCOME</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="91:9" pos:end="97:9"><if pos:start="91:9" pos:end="97:9">if <condition pos:start="91:12" pos:end="91:31">(<expr pos:start="91:13" pos:end="91:30"><name pos:start="91:13" pos:end="91:19"><name pos:start="91:13" pos:end="91:13">s</name><operator pos:start="91:14" pos:end="91:15">-&gt;</operator><name pos:start="91:16" pos:end="91:19">xmin</name></name> <operator pos:start="91:21" pos:end="91:22">||</operator> <name pos:start="91:24" pos:end="91:30"><name pos:start="91:24" pos:end="91:24">s</name><operator pos:start="91:25" pos:end="91:26">-&gt;</operator><name pos:start="91:27" pos:end="91:30">ymin</name></name></expr>)</condition> <block pos:start="91:33" pos:end="97:9">{<block_content pos:start="93:13" pos:end="95:40">

            <expr_stmt pos:start="93:13" pos:end="93:76"><expr pos:start="93:13" pos:end="93:75"><call pos:start="93:13" pos:end="93:75"><name pos:start="93:13" pos:end="93:41">avpriv_report_missing_feature</name><argument_list pos:start="93:42" pos:end="93:75">(<argument pos:start="93:43" pos:end="93:50"><expr pos:start="93:43" pos:end="93:50"><name pos:start="93:43" pos:end="93:50"><name pos:start="93:43" pos:end="93:43">s</name><operator pos:start="93:44" pos:end="93:45">-&gt;</operator><name pos:start="93:46" pos:end="93:50">avctx</name></name></expr></argument>, <argument pos:start="93:53" pos:end="93:74"><expr pos:start="93:53" pos:end="93:74"><literal type="string" pos:start="93:53" pos:end="93:74">"Tiles with xmin/ymin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="95:13" pos:end="95:40">return <expr pos:start="95:20" pos:end="95:39"><name pos:start="95:20" pos:end="95:39">AVERROR_PATCHWELCOME</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="101:9" pos:end="101:43"><expr pos:start="101:9" pos:end="101:42"><name pos:start="101:9" pos:end="101:12">line</name> <operator pos:start="101:14" pos:end="101:14">=</operator> <name pos:start="101:16" pos:end="101:33"><name pos:start="101:16" pos:end="101:16">s</name><operator pos:start="101:17" pos:end="101:18">-&gt;</operator><name pos:start="101:19" pos:end="101:27">tile_attr</name><operator pos:start="101:28" pos:end="101:28">.</operator><name pos:start="101:29" pos:end="101:33">ySize</name></name> <operator pos:start="101:35" pos:end="101:35">*</operator> <name pos:start="101:37" pos:end="101:42">tile_y</name></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:42"><expr pos:start="103:9" pos:end="103:41"><name pos:start="103:9" pos:end="103:11">col</name> <operator pos:start="103:13" pos:end="103:13">=</operator> <name pos:start="103:15" pos:end="103:32"><name pos:start="103:15" pos:end="103:15">s</name><operator pos:start="103:16" pos:end="103:17">-&gt;</operator><name pos:start="103:18" pos:end="103:26">tile_attr</name><operator pos:start="103:27" pos:end="103:27">.</operator><name pos:start="103:28" pos:end="103:32">xSize</name></name> <operator pos:start="103:34" pos:end="103:34">*</operator> <name pos:start="103:36" pos:end="103:41">tile_x</name></expr>;</expr_stmt>



        <if_stmt pos:start="107:9" pos:end="111:39"><if pos:start="107:9" pos:end="111:39">if <condition pos:start="107:12" pos:end="109:45">(<expr pos:start="107:13" pos:end="109:44"><name pos:start="107:13" pos:end="107:36"><name pos:start="107:13" pos:end="107:16">line</name> <argument_list type="generic" pos:start="107:18" pos:end="107:36">&lt; <argument pos:start="107:20" pos:end="107:34"><expr pos:start="107:20" pos:end="107:34"><name pos:start="107:20" pos:end="107:26"><name pos:start="107:20" pos:end="107:20">s</name><operator pos:start="107:21" pos:end="107:22">-&gt;</operator><name pos:start="107:23" pos:end="107:26">ymin</name></name> <operator pos:start="107:28" pos:end="107:29">||</operator> <name pos:start="107:31" pos:end="107:34">line</name></expr></argument> &gt;</argument_list></name> <name pos:start="107:38" pos:end="107:44"><name pos:start="107:38" pos:end="107:38">s</name><operator pos:start="107:39" pos:end="107:40">-&gt;</operator><name pos:start="107:41" pos:end="107:44">ymax</name></name> <operator pos:start="107:46" pos:end="107:47">||</operator>

            <name pos:start="109:13" pos:end="109:36"><name pos:start="109:13" pos:end="109:15">col</name>  <argument_list type="generic" pos:start="109:18" pos:end="109:36">&lt; <argument pos:start="109:20" pos:end="109:33"><expr pos:start="109:20" pos:end="109:33"><name pos:start="109:20" pos:end="109:26"><name pos:start="109:20" pos:end="109:20">s</name><operator pos:start="109:21" pos:end="109:22">-&gt;</operator><name pos:start="109:23" pos:end="109:26">xmin</name></name> <operator pos:start="109:28" pos:end="109:29">||</operator> <name pos:start="109:31" pos:end="109:33">col</name></expr></argument>  &gt;</argument_list></name> <name pos:start="109:38" pos:end="109:44"><name pos:start="109:38" pos:end="109:38">s</name><operator pos:start="109:39" pos:end="109:40">-&gt;</operator><name pos:start="109:41" pos:end="109:44">xmax</name></name></expr>)</condition><block type="pseudo" pos:start="111:13" pos:end="111:39"><block_content pos:start="111:13" pos:end="111:39">

            <return pos:start="111:13" pos:end="111:39">return <expr pos:start="111:20" pos:end="111:38"><name pos:start="111:20" pos:end="111:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="115:9" pos:end="115:87"><expr pos:start="115:9" pos:end="115:86"><name pos:start="115:9" pos:end="115:17"><name pos:start="115:9" pos:end="115:10">td</name><operator pos:start="115:11" pos:end="115:12">-&gt;</operator><name pos:start="115:13" pos:end="115:17">ysize</name></name> <operator pos:start="115:19" pos:end="115:19">=</operator> <call pos:start="115:21" pos:end="115:86"><name pos:start="115:21" pos:end="115:25">FFMIN</name><argument_list pos:start="115:26" pos:end="115:86">(<argument pos:start="115:27" pos:end="115:44"><expr pos:start="115:27" pos:end="115:44"><name pos:start="115:27" pos:end="115:44"><name pos:start="115:27" pos:end="115:27">s</name><operator pos:start="115:28" pos:end="115:29">-&gt;</operator><name pos:start="115:30" pos:end="115:38">tile_attr</name><operator pos:start="115:39" pos:end="115:39">.</operator><name pos:start="115:40" pos:end="115:44">ySize</name></name></expr></argument>, <argument pos:start="115:47" pos:end="115:85"><expr pos:start="115:47" pos:end="115:85"><name pos:start="115:47" pos:end="115:55"><name pos:start="115:47" pos:end="115:47">s</name><operator pos:start="115:48" pos:end="115:49">-&gt;</operator><name pos:start="115:50" pos:end="115:55">ydelta</name></name> <operator pos:start="115:57" pos:end="115:57">-</operator> <name pos:start="115:59" pos:end="115:64">tile_y</name> <operator pos:start="115:66" pos:end="115:66">*</operator> <name pos:start="115:68" pos:end="115:85"><name pos:start="115:68" pos:end="115:68">s</name><operator pos:start="115:69" pos:end="115:70">-&gt;</operator><name pos:start="115:71" pos:end="115:79">tile_attr</name><operator pos:start="115:80" pos:end="115:80">.</operator><name pos:start="115:81" pos:end="115:85">ySize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:87"><expr pos:start="117:9" pos:end="117:86"><name pos:start="117:9" pos:end="117:17"><name pos:start="117:9" pos:end="117:10">td</name><operator pos:start="117:11" pos:end="117:12">-&gt;</operator><name pos:start="117:13" pos:end="117:17">xsize</name></name> <operator pos:start="117:19" pos:end="117:19">=</operator> <call pos:start="117:21" pos:end="117:86"><name pos:start="117:21" pos:end="117:25">FFMIN</name><argument_list pos:start="117:26" pos:end="117:86">(<argument pos:start="117:27" pos:end="117:44"><expr pos:start="117:27" pos:end="117:44"><name pos:start="117:27" pos:end="117:44"><name pos:start="117:27" pos:end="117:27">s</name><operator pos:start="117:28" pos:end="117:29">-&gt;</operator><name pos:start="117:30" pos:end="117:38">tile_attr</name><operator pos:start="117:39" pos:end="117:39">.</operator><name pos:start="117:40" pos:end="117:44">xSize</name></name></expr></argument>, <argument pos:start="117:47" pos:end="117:85"><expr pos:start="117:47" pos:end="117:85"><name pos:start="117:47" pos:end="117:55"><name pos:start="117:47" pos:end="117:47">s</name><operator pos:start="117:48" pos:end="117:49">-&gt;</operator><name pos:start="117:50" pos:end="117:55">xdelta</name></name> <operator pos:start="117:57" pos:end="117:57">-</operator> <name pos:start="117:59" pos:end="117:64">tile_x</name> <operator pos:start="117:66" pos:end="117:66">*</operator> <name pos:start="117:68" pos:end="117:85"><name pos:start="117:68" pos:end="117:68">s</name><operator pos:start="117:69" pos:end="117:70">-&gt;</operator><name pos:start="117:71" pos:end="117:79">tile_attr</name><operator pos:start="117:80" pos:end="117:80">.</operator><name pos:start="117:81" pos:end="117:85">xSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="121:9" pos:end="125:9"><if pos:start="121:9" pos:end="125:9">if <condition pos:start="121:12" pos:end="121:16">(<expr pos:start="121:13" pos:end="121:15"><name pos:start="121:13" pos:end="121:15">col</name></expr>)</condition> <block pos:start="121:18" pos:end="125:9">{<block_content pos:start="123:13" pos:end="123:22"> <comment type="block" pos:start="121:20" pos:end="121:55">/* not the first tile of the line */</comment>

            <expr_stmt pos:start="123:13" pos:end="123:22"><expr pos:start="123:13" pos:end="123:21"><name pos:start="123:13" pos:end="123:17">bxmin</name> <operator pos:start="123:19" pos:end="123:19">=</operator> <literal type="number" pos:start="123:21" pos:end="123:21">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="123:24" pos:end="123:76">/* doesn't add pixel at the left of the datawindow */</comment>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="129:9" pos:end="131:22"><if pos:start="129:9" pos:end="131:22">if <condition pos:start="129:12" pos:end="129:43">(<expr pos:start="129:13" pos:end="129:42"><operator pos:start="129:13" pos:end="129:13">(</operator><name pos:start="129:14" pos:end="129:16">col</name> <operator pos:start="129:18" pos:end="129:18">+</operator> <name pos:start="129:20" pos:end="129:28"><name pos:start="129:20" pos:end="129:21">td</name><operator pos:start="129:22" pos:end="129:23">-&gt;</operator><name pos:start="129:24" pos:end="129:28">xsize</name></name><operator pos:start="129:29" pos:end="129:29">)</operator> <operator pos:start="129:31" pos:end="129:32">!=</operator> <name pos:start="129:34" pos:end="129:42"><name pos:start="129:34" pos:end="129:34">s</name><operator pos:start="129:35" pos:end="129:36">-&gt;</operator><name pos:start="129:37" pos:end="129:42">xdelta</name></name></expr>)</condition><block type="pseudo" pos:start="131:13" pos:end="131:22"><block_content pos:start="131:13" pos:end="131:22"><comment type="block" pos:start="129:44" pos:end="129:78">/* not the last tile of the line */</comment>

            <expr_stmt pos:start="131:13" pos:end="131:22"><expr pos:start="131:13" pos:end="131:21"><name pos:start="131:13" pos:end="131:17">axmax</name> <operator pos:start="131:19" pos:end="131:19">=</operator> <literal type="number" pos:start="131:21" pos:end="131:21">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block" pos:start="131:24" pos:end="131:77">/* doesn't add pixel at the right of the datawindow */</comment>



        <expr_stmt pos:start="135:9" pos:end="135:70"><expr pos:start="135:9" pos:end="135:69"><name pos:start="135:9" pos:end="135:29"><name pos:start="135:9" pos:end="135:10">td</name><operator pos:start="135:11" pos:end="135:12">-&gt;</operator><name pos:start="135:13" pos:end="135:29">channel_line_size</name></name> <operator pos:start="135:31" pos:end="135:31">=</operator> <name pos:start="135:33" pos:end="135:41"><name pos:start="135:33" pos:end="135:34">td</name><operator pos:start="135:35" pos:end="135:36">-&gt;</operator><name pos:start="135:37" pos:end="135:41">xsize</name></name> <operator pos:start="135:43" pos:end="135:43">*</operator> <name pos:start="135:45" pos:end="135:69"><name pos:start="135:45" pos:end="135:45">s</name><operator pos:start="135:46" pos:end="135:47">-&gt;</operator><name pos:start="135:48" pos:end="135:69">current_channel_offset</name></name></expr>;</expr_stmt><comment type="block" pos:start="135:71" pos:end="135:103">/* uncompress size of one line */</comment>

        <expr_stmt pos:start="137:9" pos:end="137:72"><expr pos:start="137:9" pos:end="137:71"><name pos:start="137:9" pos:end="137:25">uncompressed_size</name> <operator pos:start="137:27" pos:end="137:27">=</operator> <name pos:start="137:29" pos:end="137:49"><name pos:start="137:29" pos:end="137:30">td</name><operator pos:start="137:31" pos:end="137:32">-&gt;</operator><name pos:start="137:33" pos:end="137:49">channel_line_size</name></name> <operator pos:start="137:51" pos:end="137:51">*</operator> <operator pos:start="137:53" pos:end="137:53">(</operator><name pos:start="137:54" pos:end="137:61">uint64_t</name><operator pos:start="137:62" pos:end="137:62">)</operator><name pos:start="137:63" pos:end="137:71"><name pos:start="137:63" pos:end="137:64">td</name><operator pos:start="137:65" pos:end="137:66">-&gt;</operator><name pos:start="137:67" pos:end="137:71">ysize</name></name></expr>;</expr_stmt><comment type="block" pos:start="137:73" pos:end="137:106">/* uncompress size of the block */</comment>

    </block_content>}</block></if> <else pos:start="139:7" pos:end="191:5">else <block pos:start="139:12" pos:end="191:5">{<block_content pos:start="141:9" pos:end="189:9">

        <if_stmt pos:start="141:9" pos:end="143:39"><if pos:start="141:9" pos:end="143:39">if <condition pos:start="141:12" pos:end="141:39">(<expr pos:start="141:13" pos:end="141:38"><name pos:start="141:13" pos:end="141:23">line_offset</name> <operator pos:start="141:25" pos:end="141:25">&gt;</operator> <name pos:start="141:27" pos:end="141:34">buf_size</name> <operator pos:start="141:36" pos:end="141:36">-</operator> <literal type="number" pos:start="141:38" pos:end="141:38">8</literal></expr>)</condition><block type="pseudo" pos:start="143:13" pos:end="143:39"><block_content pos:start="143:13" pos:end="143:39">

            <return pos:start="143:13" pos:end="143:39">return <expr pos:start="143:20" pos:end="143:38"><name pos:start="143:20" pos:end="143:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="147:9" pos:end="147:37"><expr pos:start="147:9" pos:end="147:36"><name pos:start="147:9" pos:end="147:11">src</name>  <operator pos:start="147:14" pos:end="147:14">=</operator> <name pos:start="147:16" pos:end="147:18">buf</name> <operator pos:start="147:20" pos:end="147:20">+</operator> <name pos:start="147:22" pos:end="147:32">line_offset</name> <operator pos:start="147:34" pos:end="147:34">+</operator> <literal type="number" pos:start="147:36" pos:end="147:36">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:32"><expr pos:start="149:9" pos:end="149:31"><name pos:start="149:9" pos:end="149:12">line</name> <operator pos:start="149:14" pos:end="149:14">=</operator> <call pos:start="149:16" pos:end="149:31"><name pos:start="149:16" pos:end="149:22">AV_RL32</name><argument_list pos:start="149:23" pos:end="149:31">(<argument pos:start="149:24" pos:end="149:30"><expr pos:start="149:24" pos:end="149:30"><name pos:start="149:24" pos:end="149:26">src</name> <operator pos:start="149:28" pos:end="149:28">-</operator> <literal type="number" pos:start="149:30" pos:end="149:30">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="153:9" pos:end="155:39"><if pos:start="153:9" pos:end="155:39">if <condition pos:start="153:12" pos:end="153:45">(<expr pos:start="153:13" pos:end="153:44"><name pos:start="153:13" pos:end="153:36"><name pos:start="153:13" pos:end="153:16">line</name> <argument_list type="generic" pos:start="153:18" pos:end="153:36">&lt; <argument pos:start="153:20" pos:end="153:34"><expr pos:start="153:20" pos:end="153:34"><name pos:start="153:20" pos:end="153:26"><name pos:start="153:20" pos:end="153:20">s</name><operator pos:start="153:21" pos:end="153:22">-&gt;</operator><name pos:start="153:23" pos:end="153:26">ymin</name></name> <operator pos:start="153:28" pos:end="153:29">||</operator> <name pos:start="153:31" pos:end="153:34">line</name></expr></argument> &gt;</argument_list></name> <name pos:start="153:38" pos:end="153:44"><name pos:start="153:38" pos:end="153:38">s</name><operator pos:start="153:39" pos:end="153:40">-&gt;</operator><name pos:start="153:41" pos:end="153:44">ymax</name></name></expr>)</condition><block type="pseudo" pos:start="155:13" pos:end="155:39"><block_content pos:start="155:13" pos:end="155:39">

            <return pos:start="155:13" pos:end="155:39">return <expr pos:start="155:20" pos:end="155:38"><name pos:start="155:20" pos:end="155:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="159:9" pos:end="159:37"><expr pos:start="159:9" pos:end="159:36"><name pos:start="159:9" pos:end="159:17">data_size</name> <operator pos:start="159:19" pos:end="159:19">=</operator> <call pos:start="159:21" pos:end="159:36"><name pos:start="159:21" pos:end="159:27">AV_RL32</name><argument_list pos:start="159:28" pos:end="159:36">(<argument pos:start="159:29" pos:end="159:35"><expr pos:start="159:29" pos:end="159:35"><name pos:start="159:29" pos:end="159:31">src</name> <operator pos:start="159:33" pos:end="159:33">-</operator> <literal type="number" pos:start="159:35" pos:end="159:35">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="161:9" pos:end="163:39"><if pos:start="161:9" pos:end="163:39">if <condition pos:start="161:12" pos:end="161:51">(<expr pos:start="161:13" pos:end="161:50"><name pos:start="161:13" pos:end="161:21">data_size</name> <operator pos:start="161:23" pos:end="161:24">&lt;=</operator> <literal type="number" pos:start="161:26" pos:end="161:26">0</literal> <operator pos:start="161:28" pos:end="161:29">||</operator> <name pos:start="161:31" pos:end="161:39">data_size</name> <operator pos:start="161:41" pos:end="161:41">&gt;</operator> <name pos:start="161:43" pos:end="161:50">buf_size</name></expr>)</condition><block type="pseudo" pos:start="163:13" pos:end="163:39"><block_content pos:start="163:13" pos:end="163:39">

            <return pos:start="163:13" pos:end="163:39">return <expr pos:start="163:20" pos:end="163:38"><name pos:start="163:20" pos:end="163:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="167:9" pos:end="167:80"><expr pos:start="167:9" pos:end="167:79"><name pos:start="167:9" pos:end="167:17"><name pos:start="167:9" pos:end="167:10">td</name><operator pos:start="167:11" pos:end="167:12">-&gt;</operator><name pos:start="167:13" pos:end="167:17">ysize</name></name>          <operator pos:start="167:28" pos:end="167:28">=</operator> <call pos:start="167:30" pos:end="167:79"><name pos:start="167:30" pos:end="167:34">FFMIN</name><argument_list pos:start="167:35" pos:end="167:79">(<argument pos:start="167:36" pos:end="167:58"><expr pos:start="167:36" pos:end="167:58"><name pos:start="167:36" pos:end="167:58"><name pos:start="167:36" pos:end="167:36">s</name><operator pos:start="167:37" pos:end="167:38">-&gt;</operator><name pos:start="167:39" pos:end="167:58">scan_lines_per_block</name></name></expr></argument>, <argument pos:start="167:61" pos:end="167:78"><expr pos:start="167:61" pos:end="167:78"><name pos:start="167:61" pos:end="167:67"><name pos:start="167:61" pos:end="167:61">s</name><operator pos:start="167:62" pos:end="167:63">-&gt;</operator><name pos:start="167:64" pos:end="167:67">ymax</name></name> <operator pos:start="167:69" pos:end="167:69">-</operator> <name pos:start="167:71" pos:end="167:74">line</name> <operator pos:start="167:76" pos:end="167:76">+</operator> <literal type="number" pos:start="167:78" pos:end="167:78">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="167:82" pos:end="167:106">/* s-&gt;ydelta - line ?? */</comment>

        <expr_stmt pos:start="169:9" pos:end="169:39"><expr pos:start="169:9" pos:end="169:38"><name pos:start="169:9" pos:end="169:17"><name pos:start="169:9" pos:end="169:10">td</name><operator pos:start="169:11" pos:end="169:12">-&gt;</operator><name pos:start="169:13" pos:end="169:17">xsize</name></name>          <operator pos:start="169:28" pos:end="169:28">=</operator> <name pos:start="169:30" pos:end="169:38"><name pos:start="169:30" pos:end="169:30">s</name><operator pos:start="169:31" pos:end="169:32">-&gt;</operator><name pos:start="169:33" pos:end="169:38">xdelta</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="173:9" pos:end="173:70"><expr pos:start="173:9" pos:end="173:69"><name pos:start="173:9" pos:end="173:29"><name pos:start="173:9" pos:end="173:10">td</name><operator pos:start="173:11" pos:end="173:12">-&gt;</operator><name pos:start="173:13" pos:end="173:29">channel_line_size</name></name> <operator pos:start="173:31" pos:end="173:31">=</operator> <name pos:start="173:33" pos:end="173:41"><name pos:start="173:33" pos:end="173:34">td</name><operator pos:start="173:35" pos:end="173:36">-&gt;</operator><name pos:start="173:37" pos:end="173:41">xsize</name></name> <operator pos:start="173:43" pos:end="173:43">*</operator> <name pos:start="173:45" pos:end="173:69"><name pos:start="173:45" pos:end="173:45">s</name><operator pos:start="173:46" pos:end="173:47">-&gt;</operator><name pos:start="173:48" pos:end="173:69">current_channel_offset</name></name></expr>;</expr_stmt><comment type="block" pos:start="173:71" pos:end="173:103">/* uncompress size of one line */</comment>

        <expr_stmt pos:start="175:9" pos:end="175:72"><expr pos:start="175:9" pos:end="175:71"><name pos:start="175:9" pos:end="175:25">uncompressed_size</name> <operator pos:start="175:27" pos:end="175:27">=</operator> <name pos:start="175:29" pos:end="175:49"><name pos:start="175:29" pos:end="175:30">td</name><operator pos:start="175:31" pos:end="175:32">-&gt;</operator><name pos:start="175:33" pos:end="175:49">channel_line_size</name></name> <operator pos:start="175:51" pos:end="175:51">*</operator> <operator pos:start="175:53" pos:end="175:53">(</operator><name pos:start="175:54" pos:end="175:61">uint64_t</name><operator pos:start="175:62" pos:end="175:62">)</operator><name pos:start="175:63" pos:end="175:71"><name pos:start="175:63" pos:end="175:64">td</name><operator pos:start="175:65" pos:end="175:66">-&gt;</operator><name pos:start="175:67" pos:end="175:71">ysize</name></name></expr>;</expr_stmt><comment type="block" pos:start="175:73" pos:end="175:106">/* uncompress size of the block */</comment>



        <if_stmt pos:start="179:9" pos:end="189:9"><if pos:start="179:9" pos:end="189:9">if <condition pos:start="179:12" pos:end="185:80">(<expr pos:start="179:13" pos:end="185:79"><operator pos:start="179:13" pos:end="179:13">(</operator><name pos:start="179:14" pos:end="179:27"><name pos:start="179:14" pos:end="179:14">s</name><operator pos:start="179:15" pos:end="179:16">-&gt;</operator><name pos:start="179:17" pos:end="179:27">compression</name></name> <operator pos:start="179:29" pos:end="179:30">==</operator> <name pos:start="179:32" pos:end="179:38">EXR_RAW</name> <operator pos:start="179:40" pos:end="179:41">&amp;&amp;</operator> <operator pos:start="179:43" pos:end="179:43">(</operator><name pos:start="179:44" pos:end="179:52">data_size</name> <operator pos:start="179:54" pos:end="179:55">!=</operator> <name pos:start="179:57" pos:end="179:73">uncompressed_size</name> <operator pos:start="179:75" pos:end="179:76">||</operator>

                                           <name pos:start="181:44" pos:end="181:54">line_offset</name> <operator pos:start="181:56" pos:end="181:56">&gt;</operator> <name pos:start="181:58" pos:end="181:65">buf_size</name> <operator pos:start="181:67" pos:end="181:67">-</operator> <name pos:start="181:69" pos:end="181:85">uncompressed_size</name><operator pos:start="181:86" pos:end="181:86">)</operator><operator pos:start="181:87" pos:end="181:87">)</operator> <operator pos:start="181:89" pos:end="181:90">||</operator>

            <operator pos:start="183:13" pos:end="183:13">(</operator><name pos:start="183:14" pos:end="183:27"><name pos:start="183:14" pos:end="183:14">s</name><operator pos:start="183:15" pos:end="183:16">-&gt;</operator><name pos:start="183:17" pos:end="183:27">compression</name></name> <operator pos:start="183:29" pos:end="183:30">!=</operator> <name pos:start="183:32" pos:end="183:38">EXR_RAW</name> <operator pos:start="183:40" pos:end="183:41">&amp;&amp;</operator> <operator pos:start="183:43" pos:end="183:43">(</operator><name pos:start="183:44" pos:end="183:52">data_size</name> <operator pos:start="183:54" pos:end="183:54">&gt;</operator> <name pos:start="183:56" pos:end="183:72">uncompressed_size</name> <operator pos:start="183:74" pos:end="183:75">||</operator>

                                           <name pos:start="185:44" pos:end="185:54">line_offset</name> <operator pos:start="185:56" pos:end="185:56">&gt;</operator> <name pos:start="185:58" pos:end="185:65">buf_size</name> <operator pos:start="185:67" pos:end="185:67">-</operator> <name pos:start="185:69" pos:end="185:77">data_size</name><operator pos:start="185:78" pos:end="185:78">)</operator><operator pos:start="185:79" pos:end="185:79">)</operator></expr>)</condition> <block pos:start="185:82" pos:end="189:9">{<block_content pos:start="187:13" pos:end="187:39">

            <return pos:start="187:13" pos:end="187:39">return <expr pos:start="187:20" pos:end="187:38"><name pos:start="187:20" pos:end="187:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="195:5" pos:end="203:5"><if pos:start="195:5" pos:end="203:5">if <condition pos:start="195:8" pos:end="195:52">(<expr pos:start="195:9" pos:end="195:51"><name pos:start="195:9" pos:end="195:17">data_size</name> <operator pos:start="195:19" pos:end="195:19">&lt;</operator> <name pos:start="195:21" pos:end="195:37">uncompressed_size</name> <operator pos:start="195:39" pos:end="195:40">||</operator> <name pos:start="195:42" pos:end="195:51"><name pos:start="195:42" pos:end="195:42">s</name><operator pos:start="195:43" pos:end="195:44">-&gt;</operator><name pos:start="195:45" pos:end="195:51">is_tile</name></name></expr>)</condition> <block pos:start="195:54" pos:end="203:5">{<block_content pos:start="197:9" pos:end="201:35"> <comment type="block" pos:start="195:56" pos:end="195:99">/* td-&gt;tmp is use for tile reorganization */</comment>

        <expr_stmt pos:start="197:9" pos:end="197:74"><expr pos:start="197:9" pos:end="197:73"><call pos:start="197:9" pos:end="197:73"><name pos:start="197:9" pos:end="197:29">av_fast_padded_malloc</name><argument_list pos:start="197:30" pos:end="197:73">(<argument pos:start="197:31" pos:end="197:38"><expr pos:start="197:31" pos:end="197:38"><operator pos:start="197:31" pos:end="197:31">&amp;</operator><name pos:start="197:32" pos:end="197:38"><name pos:start="197:32" pos:end="197:33">td</name><operator pos:start="197:34" pos:end="197:35">-&gt;</operator><name pos:start="197:36" pos:end="197:38">tmp</name></name></expr></argument>, <argument pos:start="197:41" pos:end="197:53"><expr pos:start="197:41" pos:end="197:53"><operator pos:start="197:41" pos:end="197:41">&amp;</operator><name pos:start="197:42" pos:end="197:53"><name pos:start="197:42" pos:end="197:43">td</name><operator pos:start="197:44" pos:end="197:45">-&gt;</operator><name pos:start="197:46" pos:end="197:53">tmp_size</name></name></expr></argument>, <argument pos:start="197:56" pos:end="197:72"><expr pos:start="197:56" pos:end="197:72"><name pos:start="197:56" pos:end="197:72">uncompressed_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="199:9" pos:end="201:35"><if pos:start="199:9" pos:end="201:35">if <condition pos:start="199:12" pos:end="199:21">(<expr pos:start="199:13" pos:end="199:20"><operator pos:start="199:13" pos:end="199:13">!</operator><name pos:start="199:14" pos:end="199:20"><name pos:start="199:14" pos:end="199:15">td</name><operator pos:start="199:16" pos:end="199:17">-&gt;</operator><name pos:start="199:18" pos:end="199:20">tmp</name></name></expr>)</condition><block type="pseudo" pos:start="201:13" pos:end="201:35"><block_content pos:start="201:13" pos:end="201:35">

            <return pos:start="201:13" pos:end="201:35">return <expr pos:start="201:20" pos:end="201:34"><call pos:start="201:20" pos:end="201:34"><name pos:start="201:20" pos:end="201:26">AVERROR</name><argument_list pos:start="201:27" pos:end="201:34">(<argument pos:start="201:28" pos:end="201:33"><expr pos:start="201:28" pos:end="201:33"><name pos:start="201:28" pos:end="201:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="207:5" pos:end="271:5"><if pos:start="207:5" pos:end="271:5">if <condition pos:start="207:8" pos:end="207:38">(<expr pos:start="207:9" pos:end="207:37"><name pos:start="207:9" pos:end="207:17">data_size</name> <operator pos:start="207:19" pos:end="207:19">&lt;</operator> <name pos:start="207:21" pos:end="207:37">uncompressed_size</name></expr>)</condition> <block pos:start="207:40" pos:end="271:5">{<block_content pos:start="209:9" pos:end="269:36">

        <expr_stmt pos:start="209:9" pos:end="211:78"><expr pos:start="209:9" pos:end="211:77"><call pos:start="209:9" pos:end="211:77"><name pos:start="209:9" pos:end="209:29">av_fast_padded_malloc</name><argument_list pos:start="209:30" pos:end="211:77">(<argument pos:start="209:31" pos:end="209:52"><expr pos:start="209:31" pos:end="209:52"><operator pos:start="209:31" pos:end="209:31">&amp;</operator><name pos:start="209:32" pos:end="209:52"><name pos:start="209:32" pos:end="209:33">td</name><operator pos:start="209:34" pos:end="209:35">-&gt;</operator><name pos:start="209:36" pos:end="209:52">uncompressed_data</name></name></expr></argument>,

                              <argument pos:start="211:31" pos:end="211:52"><expr pos:start="211:31" pos:end="211:52"><operator pos:start="211:31" pos:end="211:31">&amp;</operator><name pos:start="211:32" pos:end="211:52"><name pos:start="211:32" pos:end="211:33">td</name><operator pos:start="211:34" pos:end="211:35">-&gt;</operator><name pos:start="211:36" pos:end="211:52">uncompressed_size</name></name></expr></argument>, <argument pos:start="211:55" pos:end="211:76"><expr pos:start="211:55" pos:end="211:76"><name pos:start="211:55" pos:end="211:71">uncompressed_size</name> <operator pos:start="211:73" pos:end="211:73">+</operator> <literal type="number" pos:start="211:75" pos:end="211:76">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="block" pos:start="211:79" pos:end="211:128">/* Force 64 padding for AVX2 reorder_pixels dst */</comment>



        <if_stmt pos:start="215:9" pos:end="217:35"><if pos:start="215:9" pos:end="217:35">if <condition pos:start="215:12" pos:end="215:35">(<expr pos:start="215:13" pos:end="215:34"><operator pos:start="215:13" pos:end="215:13">!</operator><name pos:start="215:14" pos:end="215:34"><name pos:start="215:14" pos:end="215:15">td</name><operator pos:start="215:16" pos:end="215:17">-&gt;</operator><name pos:start="215:18" pos:end="215:34">uncompressed_data</name></name></expr>)</condition><block type="pseudo" pos:start="217:13" pos:end="217:35"><block_content pos:start="217:13" pos:end="217:35">

            <return pos:start="217:13" pos:end="217:35">return <expr pos:start="217:20" pos:end="217:34"><call pos:start="217:20" pos:end="217:34"><name pos:start="217:20" pos:end="217:26">AVERROR</name><argument_list pos:start="217:27" pos:end="217:34">(<argument pos:start="217:28" pos:end="217:33"><expr pos:start="217:28" pos:end="217:33"><name pos:start="217:28" pos:end="217:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="221:9" pos:end="221:34"><expr pos:start="221:9" pos:end="221:33"><name pos:start="221:9" pos:end="221:11">ret</name> <operator pos:start="221:13" pos:end="221:13">=</operator> <name pos:start="221:15" pos:end="221:33">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

        <switch pos:start="223:9" pos:end="259:9">switch <condition pos:start="223:16" pos:end="223:31">(<expr pos:start="223:17" pos:end="223:30"><name pos:start="223:17" pos:end="223:30"><name pos:start="223:17" pos:end="223:17">s</name><operator pos:start="223:18" pos:end="223:19">-&gt;</operator><name pos:start="223:20" pos:end="223:30">compression</name></name></expr>)</condition> <block pos:start="223:33" pos:end="259:9">{<block_content pos:start="225:9" pos:end="257:18">

        <case pos:start="225:9" pos:end="225:22">case <expr pos:start="225:14" pos:end="225:21"><name pos:start="225:14" pos:end="225:21">EXR_ZIP1</name></expr>:</case>

        <case pos:start="227:9" pos:end="227:23">case <expr pos:start="227:14" pos:end="227:22"><name pos:start="227:14" pos:end="227:22">EXR_ZIP16</name></expr>:</case>

            <expr_stmt pos:start="229:13" pos:end="229:75"><expr pos:start="229:13" pos:end="229:74"><name pos:start="229:13" pos:end="229:15">ret</name> <operator pos:start="229:17" pos:end="229:17">=</operator> <call pos:start="229:19" pos:end="229:74"><name pos:start="229:19" pos:end="229:32">zip_uncompress</name><argument_list pos:start="229:33" pos:end="229:74">(<argument pos:start="229:34" pos:end="229:34"><expr pos:start="229:34" pos:end="229:34"><name pos:start="229:34" pos:end="229:34">s</name></expr></argument>, <argument pos:start="229:37" pos:end="229:39"><expr pos:start="229:37" pos:end="229:39"><name pos:start="229:37" pos:end="229:39">src</name></expr></argument>, <argument pos:start="229:42" pos:end="229:50"><expr pos:start="229:42" pos:end="229:50"><name pos:start="229:42" pos:end="229:50">data_size</name></expr></argument>, <argument pos:start="229:53" pos:end="229:69"><expr pos:start="229:53" pos:end="229:69"><name pos:start="229:53" pos:end="229:69">uncompressed_size</name></expr></argument>, <argument pos:start="229:72" pos:end="229:73"><expr pos:start="229:72" pos:end="229:73"><name pos:start="229:72" pos:end="229:73">td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="231:13" pos:end="231:18">break;</break>

        <case pos:start="233:9" pos:end="233:21">case <expr pos:start="233:14" pos:end="233:20"><name pos:start="233:14" pos:end="233:20">EXR_PIZ</name></expr>:</case>

            <expr_stmt pos:start="235:13" pos:end="235:75"><expr pos:start="235:13" pos:end="235:74"><name pos:start="235:13" pos:end="235:15">ret</name> <operator pos:start="235:17" pos:end="235:17">=</operator> <call pos:start="235:19" pos:end="235:74"><name pos:start="235:19" pos:end="235:32">piz_uncompress</name><argument_list pos:start="235:33" pos:end="235:74">(<argument pos:start="235:34" pos:end="235:34"><expr pos:start="235:34" pos:end="235:34"><name pos:start="235:34" pos:end="235:34">s</name></expr></argument>, <argument pos:start="235:37" pos:end="235:39"><expr pos:start="235:37" pos:end="235:39"><name pos:start="235:37" pos:end="235:39">src</name></expr></argument>, <argument pos:start="235:42" pos:end="235:50"><expr pos:start="235:42" pos:end="235:50"><name pos:start="235:42" pos:end="235:50">data_size</name></expr></argument>, <argument pos:start="235:53" pos:end="235:69"><expr pos:start="235:53" pos:end="235:69"><name pos:start="235:53" pos:end="235:69">uncompressed_size</name></expr></argument>, <argument pos:start="235:72" pos:end="235:73"><expr pos:start="235:72" pos:end="235:73"><name pos:start="235:72" pos:end="235:73">td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="237:13" pos:end="237:18">break;</break>

        <case pos:start="239:9" pos:end="239:23">case <expr pos:start="239:14" pos:end="239:22"><name pos:start="239:14" pos:end="239:22">EXR_PXR24</name></expr>:</case>

            <expr_stmt pos:start="241:13" pos:end="241:77"><expr pos:start="241:13" pos:end="241:76"><name pos:start="241:13" pos:end="241:15">ret</name> <operator pos:start="241:17" pos:end="241:17">=</operator> <call pos:start="241:19" pos:end="241:76"><name pos:start="241:19" pos:end="241:34">pxr24_uncompress</name><argument_list pos:start="241:35" pos:end="241:76">(<argument pos:start="241:36" pos:end="241:36"><expr pos:start="241:36" pos:end="241:36"><name pos:start="241:36" pos:end="241:36">s</name></expr></argument>, <argument pos:start="241:39" pos:end="241:41"><expr pos:start="241:39" pos:end="241:41"><name pos:start="241:39" pos:end="241:41">src</name></expr></argument>, <argument pos:start="241:44" pos:end="241:52"><expr pos:start="241:44" pos:end="241:52"><name pos:start="241:44" pos:end="241:52">data_size</name></expr></argument>, <argument pos:start="241:55" pos:end="241:71"><expr pos:start="241:55" pos:end="241:71"><name pos:start="241:55" pos:end="241:71">uncompressed_size</name></expr></argument>, <argument pos:start="241:74" pos:end="241:75"><expr pos:start="241:74" pos:end="241:75"><name pos:start="241:74" pos:end="241:75">td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="243:13" pos:end="243:18">break;</break>

        <case pos:start="245:9" pos:end="245:21">case <expr pos:start="245:14" pos:end="245:20"><name pos:start="245:14" pos:end="245:20">EXR_RLE</name></expr>:</case>

            <expr_stmt pos:start="247:13" pos:end="247:75"><expr pos:start="247:13" pos:end="247:74"><name pos:start="247:13" pos:end="247:15">ret</name> <operator pos:start="247:17" pos:end="247:17">=</operator> <call pos:start="247:19" pos:end="247:74"><name pos:start="247:19" pos:end="247:32">rle_uncompress</name><argument_list pos:start="247:33" pos:end="247:74">(<argument pos:start="247:34" pos:end="247:34"><expr pos:start="247:34" pos:end="247:34"><name pos:start="247:34" pos:end="247:34">s</name></expr></argument>, <argument pos:start="247:37" pos:end="247:39"><expr pos:start="247:37" pos:end="247:39"><name pos:start="247:37" pos:end="247:39">src</name></expr></argument>, <argument pos:start="247:42" pos:end="247:50"><expr pos:start="247:42" pos:end="247:50"><name pos:start="247:42" pos:end="247:50">data_size</name></expr></argument>, <argument pos:start="247:53" pos:end="247:69"><expr pos:start="247:53" pos:end="247:69"><name pos:start="247:53" pos:end="247:69">uncompressed_size</name></expr></argument>, <argument pos:start="247:72" pos:end="247:73"><expr pos:start="247:72" pos:end="247:73"><name pos:start="247:72" pos:end="247:73">td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="249:13" pos:end="249:18">break;</break>

        <case pos:start="251:9" pos:end="251:21">case <expr pos:start="251:14" pos:end="251:20"><name pos:start="251:14" pos:end="251:20">EXR_B44</name></expr>:</case>

        <case pos:start="253:9" pos:end="253:22">case <expr pos:start="253:14" pos:end="253:21"><name pos:start="253:14" pos:end="253:21">EXR_B44A</name></expr>:</case>

            <expr_stmt pos:start="255:13" pos:end="255:75"><expr pos:start="255:13" pos:end="255:74"><name pos:start="255:13" pos:end="255:15">ret</name> <operator pos:start="255:17" pos:end="255:17">=</operator> <call pos:start="255:19" pos:end="255:74"><name pos:start="255:19" pos:end="255:32">b44_uncompress</name><argument_list pos:start="255:33" pos:end="255:74">(<argument pos:start="255:34" pos:end="255:34"><expr pos:start="255:34" pos:end="255:34"><name pos:start="255:34" pos:end="255:34">s</name></expr></argument>, <argument pos:start="255:37" pos:end="255:39"><expr pos:start="255:37" pos:end="255:39"><name pos:start="255:37" pos:end="255:39">src</name></expr></argument>, <argument pos:start="255:42" pos:end="255:50"><expr pos:start="255:42" pos:end="255:50"><name pos:start="255:42" pos:end="255:50">data_size</name></expr></argument>, <argument pos:start="255:53" pos:end="255:69"><expr pos:start="255:53" pos:end="255:69"><name pos:start="255:53" pos:end="255:69">uncompressed_size</name></expr></argument>, <argument pos:start="255:72" pos:end="255:73"><expr pos:start="255:72" pos:end="255:73"><name pos:start="255:72" pos:end="255:73">td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="257:13" pos:end="257:18">break;</break>

        </block_content>}</block></switch>

        <if_stmt pos:start="261:9" pos:end="267:9"><if pos:start="261:9" pos:end="267:9">if <condition pos:start="261:12" pos:end="261:20">(<expr pos:start="261:13" pos:end="261:19"><name pos:start="261:13" pos:end="261:15">ret</name> <operator pos:start="261:17" pos:end="261:17">&lt;</operator> <literal type="number" pos:start="261:19" pos:end="261:19">0</literal></expr>)</condition> <block pos:start="261:22" pos:end="267:9">{<block_content pos:start="263:13" pos:end="265:23">

            <expr_stmt pos:start="263:13" pos:end="263:68"><expr pos:start="263:13" pos:end="263:67"><call pos:start="263:13" pos:end="263:67"><name pos:start="263:13" pos:end="263:18">av_log</name><argument_list pos:start="263:19" pos:end="263:67">(<argument pos:start="263:20" pos:end="263:24"><expr pos:start="263:20" pos:end="263:24"><name pos:start="263:20" pos:end="263:24">avctx</name></expr></argument>, <argument pos:start="263:27" pos:end="263:38"><expr pos:start="263:27" pos:end="263:38"><name pos:start="263:27" pos:end="263:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="263:41" pos:end="263:66"><expr pos:start="263:41" pos:end="263:66"><literal type="string" pos:start="263:41" pos:end="263:66">"decode_block() failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="265:13" pos:end="265:23">return <expr pos:start="265:20" pos:end="265:22"><name pos:start="265:20" pos:end="265:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="269:9" pos:end="269:36"><expr pos:start="269:9" pos:end="269:35"><name pos:start="269:9" pos:end="269:11">src</name> <operator pos:start="269:13" pos:end="269:13">=</operator> <name pos:start="269:15" pos:end="269:35"><name pos:start="269:15" pos:end="269:16">td</name><operator pos:start="269:17" pos:end="269:18">-&gt;</operator><name pos:start="269:19" pos:end="269:35">uncompressed_data</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="275:5" pos:end="291:5"><if pos:start="275:5" pos:end="285:5">if <condition pos:start="275:8" pos:end="275:20">(<expr pos:start="275:9" pos:end="275:19"><operator pos:start="275:9" pos:end="275:9">!</operator><name pos:start="275:10" pos:end="275:19"><name pos:start="275:10" pos:end="275:10">s</name><operator pos:start="275:11" pos:end="275:12">-&gt;</operator><name pos:start="275:13" pos:end="275:19">is_luma</name></name></expr>)</condition> <block pos:start="275:22" pos:end="285:5">{<block_content pos:start="277:9" pos:end="283:30">

        <expr_stmt pos:start="277:9" pos:end="277:68"><expr pos:start="277:9" pos:end="277:67"><name pos:start="277:9" pos:end="277:25"><name pos:start="277:9" pos:end="277:22">channel_buffer</name><index pos:start="277:23" pos:end="277:25">[<expr pos:start="277:24" pos:end="277:24"><literal type="number" pos:start="277:24" pos:end="277:24">0</literal></expr>]</index></name> <operator pos:start="277:27" pos:end="277:27">=</operator> <name pos:start="277:29" pos:end="277:31">src</name> <operator pos:start="277:33" pos:end="277:33">+</operator> <name pos:start="277:35" pos:end="277:43"><name pos:start="277:35" pos:end="277:36">td</name><operator pos:start="277:37" pos:end="277:38">-&gt;</operator><name pos:start="277:39" pos:end="277:43">xsize</name></name> <operator pos:start="277:45" pos:end="277:45">*</operator> <name pos:start="277:47" pos:end="277:67"><name pos:start="277:47" pos:end="277:47">s</name><operator pos:start="277:48" pos:end="277:49">-&gt;</operator><name pos:start="277:50" pos:end="277:64">channel_offsets</name><index pos:start="277:65" pos:end="277:67">[<expr pos:start="277:66" pos:end="277:66"><literal type="number" pos:start="277:66" pos:end="277:66">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="279:9" pos:end="279:68"><expr pos:start="279:9" pos:end="279:67"><name pos:start="279:9" pos:end="279:25"><name pos:start="279:9" pos:end="279:22">channel_buffer</name><index pos:start="279:23" pos:end="279:25">[<expr pos:start="279:24" pos:end="279:24"><literal type="number" pos:start="279:24" pos:end="279:24">1</literal></expr>]</index></name> <operator pos:start="279:27" pos:end="279:27">=</operator> <name pos:start="279:29" pos:end="279:31">src</name> <operator pos:start="279:33" pos:end="279:33">+</operator> <name pos:start="279:35" pos:end="279:43"><name pos:start="279:35" pos:end="279:36">td</name><operator pos:start="279:37" pos:end="279:38">-&gt;</operator><name pos:start="279:39" pos:end="279:43">xsize</name></name> <operator pos:start="279:45" pos:end="279:45">*</operator> <name pos:start="279:47" pos:end="279:67"><name pos:start="279:47" pos:end="279:47">s</name><operator pos:start="279:48" pos:end="279:49">-&gt;</operator><name pos:start="279:50" pos:end="279:64">channel_offsets</name><index pos:start="279:65" pos:end="279:67">[<expr pos:start="279:66" pos:end="279:66"><literal type="number" pos:start="279:66" pos:end="279:66">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="281:9" pos:end="281:68"><expr pos:start="281:9" pos:end="281:67"><name pos:start="281:9" pos:end="281:25"><name pos:start="281:9" pos:end="281:22">channel_buffer</name><index pos:start="281:23" pos:end="281:25">[<expr pos:start="281:24" pos:end="281:24"><literal type="number" pos:start="281:24" pos:end="281:24">2</literal></expr>]</index></name> <operator pos:start="281:27" pos:end="281:27">=</operator> <name pos:start="281:29" pos:end="281:31">src</name> <operator pos:start="281:33" pos:end="281:33">+</operator> <name pos:start="281:35" pos:end="281:43"><name pos:start="281:35" pos:end="281:36">td</name><operator pos:start="281:37" pos:end="281:38">-&gt;</operator><name pos:start="281:39" pos:end="281:43">xsize</name></name> <operator pos:start="281:45" pos:end="281:45">*</operator> <name pos:start="281:47" pos:end="281:67"><name pos:start="281:47" pos:end="281:47">s</name><operator pos:start="281:48" pos:end="281:49">-&gt;</operator><name pos:start="281:50" pos:end="281:64">channel_offsets</name><index pos:start="281:65" pos:end="281:67">[<expr pos:start="281:66" pos:end="281:66"><literal type="number" pos:start="281:66" pos:end="281:66">2</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="283:9" pos:end="283:30"><expr pos:start="283:9" pos:end="283:29"><name pos:start="283:9" pos:end="283:25">rgb_channel_count</name> <operator pos:start="283:27" pos:end="283:27">=</operator> <literal type="number" pos:start="283:29" pos:end="283:29">3</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="285:7" pos:end="291:5">else <block pos:start="285:12" pos:end="291:5">{<block_content pos:start="287:9" pos:end="289:30"> <comment type="block" pos:start="285:14" pos:end="285:57">/* put y data in the first channel_buffer */</comment>

        <expr_stmt pos:start="287:9" pos:end="287:68"><expr pos:start="287:9" pos:end="287:67"><name pos:start="287:9" pos:end="287:25"><name pos:start="287:9" pos:end="287:22">channel_buffer</name><index pos:start="287:23" pos:end="287:25">[<expr pos:start="287:24" pos:end="287:24"><literal type="number" pos:start="287:24" pos:end="287:24">0</literal></expr>]</index></name> <operator pos:start="287:27" pos:end="287:27">=</operator> <name pos:start="287:29" pos:end="287:31">src</name> <operator pos:start="287:33" pos:end="287:33">+</operator> <name pos:start="287:35" pos:end="287:43"><name pos:start="287:35" pos:end="287:36">td</name><operator pos:start="287:37" pos:end="287:38">-&gt;</operator><name pos:start="287:39" pos:end="287:43">xsize</name></name> <operator pos:start="287:45" pos:end="287:45">*</operator> <name pos:start="287:47" pos:end="287:67"><name pos:start="287:47" pos:end="287:47">s</name><operator pos:start="287:48" pos:end="287:49">-&gt;</operator><name pos:start="287:50" pos:end="287:64">channel_offsets</name><index pos:start="287:65" pos:end="287:67">[<expr pos:start="287:66" pos:end="287:66"><literal type="number" pos:start="287:66" pos:end="287:66">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="289:9" pos:end="289:30"><expr pos:start="289:9" pos:end="289:29"><name pos:start="289:9" pos:end="289:25">rgb_channel_count</name> <operator pos:start="289:27" pos:end="289:27">=</operator> <literal type="number" pos:start="289:29" pos:end="289:29">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="293:5" pos:end="295:68"><if pos:start="293:5" pos:end="295:68">if <condition pos:start="293:8" pos:end="293:35">(<expr pos:start="293:9" pos:end="293:34"><name pos:start="293:9" pos:end="293:29"><name pos:start="293:9" pos:end="293:9">s</name><operator pos:start="293:10" pos:end="293:11">-&gt;</operator><name pos:start="293:12" pos:end="293:26">channel_offsets</name><index pos:start="293:27" pos:end="293:29">[<expr pos:start="293:28" pos:end="293:28"><literal type="number" pos:start="293:28" pos:end="293:28">3</literal></expr>]</index></name> <operator pos:start="293:31" pos:end="293:32">&gt;=</operator> <literal type="number" pos:start="293:34" pos:end="293:34">0</literal></expr>)</condition><block type="pseudo" pos:start="295:9" pos:end="295:68"><block_content pos:start="295:9" pos:end="295:68">

        <expr_stmt pos:start="295:9" pos:end="295:68"><expr pos:start="295:9" pos:end="295:67"><name pos:start="295:9" pos:end="295:25"><name pos:start="295:9" pos:end="295:22">channel_buffer</name><index pos:start="295:23" pos:end="295:25">[<expr pos:start="295:24" pos:end="295:24"><literal type="number" pos:start="295:24" pos:end="295:24">3</literal></expr>]</index></name> <operator pos:start="295:27" pos:end="295:27">=</operator> <name pos:start="295:29" pos:end="295:31">src</name> <operator pos:start="295:33" pos:end="295:33">+</operator> <name pos:start="295:35" pos:end="295:43"><name pos:start="295:35" pos:end="295:36">td</name><operator pos:start="295:37" pos:end="295:38">-&gt;</operator><name pos:start="295:39" pos:end="295:43">xsize</name></name> <operator pos:start="295:45" pos:end="295:45">*</operator> <name pos:start="295:47" pos:end="295:67"><name pos:start="295:47" pos:end="295:47">s</name><operator pos:start="295:48" pos:end="295:49">-&gt;</operator><name pos:start="295:50" pos:end="295:64">channel_offsets</name><index pos:start="295:65" pos:end="295:67">[<expr pos:start="295:66" pos:end="295:66"><literal type="number" pos:start="295:66" pos:end="295:66">3</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="299:5" pos:end="299:82"><expr pos:start="299:5" pos:end="299:81"><name pos:start="299:5" pos:end="299:7">ptr</name> <operator pos:start="299:9" pos:end="299:9">=</operator> <name pos:start="299:11" pos:end="299:20"><name pos:start="299:11" pos:end="299:11">p</name><operator pos:start="299:12" pos:end="299:13">-&gt;</operator><name pos:start="299:14" pos:end="299:17">data</name><index pos:start="299:18" pos:end="299:20">[<expr pos:start="299:19" pos:end="299:19"><literal type="number" pos:start="299:19" pos:end="299:19">0</literal></expr>]</index></name> <operator pos:start="299:22" pos:end="299:22">+</operator> <name pos:start="299:24" pos:end="299:27">line</name> <operator pos:start="299:29" pos:end="299:29">*</operator> <name pos:start="299:31" pos:end="299:44"><name pos:start="299:31" pos:end="299:31">p</name><operator pos:start="299:32" pos:end="299:33">-&gt;</operator><name pos:start="299:34" pos:end="299:41">linesize</name><index pos:start="299:42" pos:end="299:44">[<expr pos:start="299:43" pos:end="299:43"><literal type="number" pos:start="299:43" pos:end="299:43">0</literal></expr>]</index></name> <operator pos:start="299:46" pos:end="299:46">+</operator> <operator pos:start="299:48" pos:end="299:48">(</operator><name pos:start="299:49" pos:end="299:51">col</name> <operator pos:start="299:53" pos:end="299:53">*</operator> <name pos:start="299:55" pos:end="299:76"><name pos:start="299:55" pos:end="299:55">s</name><operator pos:start="299:56" pos:end="299:57">-&gt;</operator><name pos:start="299:58" pos:end="299:61">desc</name><operator pos:start="299:62" pos:end="299:63">-&gt;</operator><name pos:start="299:64" pos:end="299:76">nb_components</name></name> <operator pos:start="299:78" pos:end="299:78">*</operator> <literal type="number" pos:start="299:80" pos:end="299:80">2</literal><operator pos:start="299:81" pos:end="299:81">)</operator></expr>;</expr_stmt>



    <for pos:start="303:5" pos:end="461:5">for <control pos:start="303:9" pos:end="305:51">(<init pos:start="303:10" pos:end="303:15"><expr pos:start="303:10" pos:end="303:14"><name pos:start="303:10" pos:end="303:10">i</name> <operator pos:start="303:12" pos:end="303:12">=</operator> <literal type="number" pos:start="303:14" pos:end="303:14">0</literal></expr>;</init>

         <condition pos:start="305:10" pos:end="305:23"><expr pos:start="305:10" pos:end="305:22"><name pos:start="305:10" pos:end="305:10">i</name> <operator pos:start="305:12" pos:end="305:12">&lt;</operator> <name pos:start="305:14" pos:end="305:22"><name pos:start="305:14" pos:end="305:15">td</name><operator pos:start="305:16" pos:end="305:17">-&gt;</operator><name pos:start="305:18" pos:end="305:22">ysize</name></name></expr>;</condition> <incr pos:start="305:25" pos:end="305:50"><expr pos:start="305:25" pos:end="305:27"><name pos:start="305:25" pos:end="305:25">i</name><operator pos:start="305:26" pos:end="305:27">++</operator></expr><operator pos:start="305:28" pos:end="305:28">,</operator> <expr pos:start="305:30" pos:end="305:50"><name pos:start="305:30" pos:end="305:32">ptr</name> <operator pos:start="305:34" pos:end="305:35">+=</operator> <name pos:start="305:37" pos:end="305:50"><name pos:start="305:37" pos:end="305:37">p</name><operator pos:start="305:38" pos:end="305:39">-&gt;</operator><name pos:start="305:40" pos:end="305:47">linesize</name><index pos:start="305:48" pos:end="305:50">[<expr pos:start="305:49" pos:end="305:49"><literal type="number" pos:start="305:49" pos:end="305:49">0</literal></expr>]</index></name></expr></incr>)</control> <block pos:start="305:53" pos:end="461:5">{<block_content pos:start="309:9" pos:end="459:55">



        <decl_stmt pos:start="309:9" pos:end="309:26"><decl pos:start="309:9" pos:end="309:25"><type pos:start="309:9" pos:end="309:23"><specifier pos:start="309:9" pos:end="309:13">const</specifier> <name pos:start="309:15" pos:end="309:21">uint8_t</name> <modifier pos:start="309:23" pos:end="309:23">*</modifier></type> <name pos:start="309:25" pos:end="309:25">a</name></decl>;</decl_stmt>

        <decl_stmt pos:start="311:9" pos:end="311:30"><decl pos:start="311:9" pos:end="311:29"><type pos:start="311:9" pos:end="311:23"><specifier pos:start="311:9" pos:end="311:13">const</specifier> <name pos:start="311:15" pos:end="311:21">uint8_t</name> <modifier pos:start="311:23" pos:end="311:23">*</modifier></type><name pos:start="311:24" pos:end="311:29"><name pos:start="311:24" pos:end="311:26">rgb</name><index pos:start="311:27" pos:end="311:29">[<expr pos:start="311:28" pos:end="311:28"><literal type="number" pos:start="311:28" pos:end="311:28">3</literal></expr>]</index></name></decl>;</decl_stmt>



        <for pos:start="315:9" pos:end="319:9">for <control pos:start="315:13" pos:end="315:47">(<init pos:start="315:14" pos:end="315:19"><expr pos:start="315:14" pos:end="315:18"><name pos:start="315:14" pos:end="315:14">c</name> <operator pos:start="315:16" pos:end="315:16">=</operator> <literal type="number" pos:start="315:18" pos:end="315:18">0</literal></expr>;</init> <condition pos:start="315:21" pos:end="315:42"><expr pos:start="315:21" pos:end="315:41"><name pos:start="315:21" pos:end="315:21">c</name> <operator pos:start="315:23" pos:end="315:23">&lt;</operator> <name pos:start="315:25" pos:end="315:41">rgb_channel_count</name></expr>;</condition> <incr pos:start="315:44" pos:end="315:46"><expr pos:start="315:44" pos:end="315:46"><name pos:start="315:44" pos:end="315:44">c</name><operator pos:start="315:45" pos:end="315:46">++</operator></expr></incr>)</control><block pos:start="315:48" pos:end="319:9">{<block_content pos:start="317:13" pos:end="317:39">

            <expr_stmt pos:start="317:13" pos:end="317:39"><expr pos:start="317:13" pos:end="317:38"><name pos:start="317:13" pos:end="317:18"><name pos:start="317:13" pos:end="317:15">rgb</name><index pos:start="317:16" pos:end="317:18">[<expr pos:start="317:17" pos:end="317:17"><name pos:start="317:17" pos:end="317:17">c</name></expr>]</index></name> <operator pos:start="317:20" pos:end="317:20">=</operator> <name pos:start="317:22" pos:end="317:38"><name pos:start="317:22" pos:end="317:35">channel_buffer</name><index pos:start="317:36" pos:end="317:38">[<expr pos:start="317:37" pos:end="317:37"><name pos:start="317:37" pos:end="317:37">c</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>



        <if_stmt pos:start="323:9" pos:end="325:34"><if pos:start="323:9" pos:end="325:34">if <condition pos:start="323:12" pos:end="323:30">(<expr pos:start="323:13" pos:end="323:29"><name pos:start="323:13" pos:end="323:29"><name pos:start="323:13" pos:end="323:26">channel_buffer</name><index pos:start="323:27" pos:end="323:29">[<expr pos:start="323:28" pos:end="323:28"><literal type="number" pos:start="323:28" pos:end="323:28">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="325:13" pos:end="325:34"><block_content pos:start="325:13" pos:end="325:34">

            <expr_stmt pos:start="325:13" pos:end="325:34"><expr pos:start="325:13" pos:end="325:33"><name pos:start="325:13" pos:end="325:13">a</name> <operator pos:start="325:15" pos:end="325:15">=</operator> <name pos:start="325:17" pos:end="325:33"><name pos:start="325:17" pos:end="325:30">channel_buffer</name><index pos:start="325:31" pos:end="325:33">[<expr pos:start="325:32" pos:end="325:32"><literal type="number" pos:start="325:32" pos:end="325:32">3</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="329:9" pos:end="329:33"><expr pos:start="329:9" pos:end="329:32"><name pos:start="329:9" pos:end="329:13">ptr_x</name> <operator pos:start="329:15" pos:end="329:15">=</operator> <operator pos:start="329:17" pos:end="329:17">(</operator><name pos:start="329:18" pos:end="329:25">uint16_t</name> <operator pos:start="329:27" pos:end="329:27">*</operator><operator pos:start="329:28" pos:end="329:28">)</operator> <name pos:start="329:30" pos:end="329:32">ptr</name></expr>;</expr_stmt>



        <comment type="line" pos:start="333:9" pos:end="333:46">// Zero out the start if xmin is not 0</comment>

        <expr_stmt pos:start="335:9" pos:end="335:32"><expr pos:start="335:9" pos:end="335:31"><call pos:start="335:9" pos:end="335:31"><name pos:start="335:9" pos:end="335:14">memset</name><argument_list pos:start="335:15" pos:end="335:31">(<argument pos:start="335:16" pos:end="335:20"><expr pos:start="335:16" pos:end="335:20"><name pos:start="335:16" pos:end="335:20">ptr_x</name></expr></argument>, <argument pos:start="335:23" pos:end="335:23"><expr pos:start="335:23" pos:end="335:23"><literal type="number" pos:start="335:23" pos:end="335:23">0</literal></expr></argument>, <argument pos:start="335:26" pos:end="335:30"><expr pos:start="335:26" pos:end="335:30"><name pos:start="335:26" pos:end="335:30">bxmin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="337:9" pos:end="337:50"><expr pos:start="337:9" pos:end="337:49"><name pos:start="337:9" pos:end="337:13">ptr_x</name> <operator pos:start="337:15" pos:end="337:16">+=</operator> <name pos:start="337:18" pos:end="337:24"><name pos:start="337:18" pos:end="337:18">s</name><operator pos:start="337:19" pos:end="337:20">-&gt;</operator><name pos:start="337:21" pos:end="337:24">xmin</name></name> <operator pos:start="337:26" pos:end="337:26">*</operator> <name pos:start="337:28" pos:end="337:49"><name pos:start="337:28" pos:end="337:28">s</name><operator pos:start="337:29" pos:end="337:30">-&gt;</operator><name pos:start="337:31" pos:end="337:34">desc</name><operator pos:start="337:35" pos:end="337:36">-&gt;</operator><name pos:start="337:37" pos:end="337:49">nb_components</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="341:9" pos:end="441:9"><if pos:start="341:9" pos:end="401:9">if <condition pos:start="341:12" pos:end="341:39">(<expr pos:start="341:13" pos:end="341:38"><name pos:start="341:13" pos:end="341:25"><name pos:start="341:13" pos:end="341:13">s</name><operator pos:start="341:14" pos:end="341:15">-&gt;</operator><name pos:start="341:16" pos:end="341:25">pixel_type</name></name> <operator pos:start="341:27" pos:end="341:28">==</operator> <name pos:start="341:30" pos:end="341:38">EXR_FLOAT</name></expr>)</condition> <block pos:start="341:41" pos:end="401:9">{<block_content pos:start="345:13" pos:end="399:13">

            <comment type="line" pos:start="343:13" pos:end="343:21">// 32-bit</comment>

            <if_stmt pos:start="345:13" pos:end="399:13"><if pos:start="345:13" pos:end="369:13">if <condition pos:start="345:16" pos:end="345:25">(<expr pos:start="345:17" pos:end="345:24"><name pos:start="345:17" pos:end="345:24">trc_func</name></expr>)</condition> <block pos:start="345:27" pos:end="369:13">{<block_content pos:start="347:17" pos:end="367:17">

                <for pos:start="347:17" pos:end="367:17">for <control pos:start="347:21" pos:end="347:47">(<init pos:start="347:22" pos:end="347:27"><expr pos:start="347:22" pos:end="347:26"><name pos:start="347:22" pos:end="347:22">x</name> <operator pos:start="347:24" pos:end="347:24">=</operator> <literal type="number" pos:start="347:26" pos:end="347:26">0</literal></expr>;</init> <condition pos:start="347:29" pos:end="347:42"><expr pos:start="347:29" pos:end="347:41"><name pos:start="347:29" pos:end="347:29">x</name> <operator pos:start="347:31" pos:end="347:31">&lt;</operator> <name pos:start="347:33" pos:end="347:41"><name pos:start="347:33" pos:end="347:34">td</name><operator pos:start="347:35" pos:end="347:36">-&gt;</operator><name pos:start="347:37" pos:end="347:41">xsize</name></name></expr>;</condition> <incr pos:start="347:44" pos:end="347:46"><expr pos:start="347:44" pos:end="347:46"><name pos:start="347:44" pos:end="347:44">x</name><operator pos:start="347:45" pos:end="347:46">++</operator></expr></incr>)</control> <block pos:start="347:49" pos:end="367:17">{<block_content pos:start="349:21" pos:end="365:73">

                    <decl_stmt pos:start="349:21" pos:end="349:42"><decl pos:start="349:21" pos:end="349:41"><type pos:start="349:21" pos:end="349:39"><name pos:start="349:21" pos:end="349:39"><name pos:start="349:21" pos:end="349:25">union</name> <name pos:start="349:27" pos:end="349:39">av_intfloat32</name></name></type> <name pos:start="349:41" pos:end="349:41">t</name></decl>;</decl_stmt>



                    <for pos:start="353:21" pos:end="361:21">for <control pos:start="353:25" pos:end="353:59">(<init pos:start="353:26" pos:end="353:31"><expr pos:start="353:26" pos:end="353:30"><name pos:start="353:26" pos:end="353:26">c</name> <operator pos:start="353:28" pos:end="353:28">=</operator> <literal type="number" pos:start="353:30" pos:end="353:30">0</literal></expr>;</init> <condition pos:start="353:33" pos:end="353:54"><expr pos:start="353:33" pos:end="353:53"><name pos:start="353:33" pos:end="353:33">c</name> <operator pos:start="353:35" pos:end="353:35">&lt;</operator> <name pos:start="353:37" pos:end="353:53">rgb_channel_count</name></expr>;</condition> <incr pos:start="353:56" pos:end="353:58"><expr pos:start="353:56" pos:end="353:58"><name pos:start="353:56" pos:end="353:56">c</name><operator pos:start="353:57" pos:end="353:58">++</operator></expr></incr>)</control> <block pos:start="353:61" pos:end="361:21">{<block_content pos:start="355:25" pos:end="359:53">

                        <expr_stmt pos:start="355:25" pos:end="355:59"><expr pos:start="355:25" pos:end="355:58"><name pos:start="355:25" pos:end="355:27"><name pos:start="355:25" pos:end="355:25">t</name><operator pos:start="355:26" pos:end="355:26">.</operator><name pos:start="355:27" pos:end="355:27">i</name></name> <operator pos:start="355:29" pos:end="355:29">=</operator> <call pos:start="355:31" pos:end="355:58"><name pos:start="355:31" pos:end="355:49">bytestream_get_le32</name><argument_list pos:start="355:50" pos:end="355:58">(<argument pos:start="355:51" pos:end="355:57"><expr pos:start="355:51" pos:end="355:57"><operator pos:start="355:51" pos:end="355:51">&amp;</operator><name pos:start="355:52" pos:end="355:57"><name pos:start="355:52" pos:end="355:54">rgb</name><index pos:start="355:55" pos:end="355:57">[<expr pos:start="355:56" pos:end="355:56"><name pos:start="355:56" pos:end="355:56">c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="357:25" pos:end="357:44"><expr pos:start="357:25" pos:end="357:43"><name pos:start="357:25" pos:end="357:27"><name pos:start="357:25" pos:end="357:25">t</name><operator pos:start="357:26" pos:end="357:26">.</operator><name pos:start="357:27" pos:end="357:27">f</name></name> <operator pos:start="357:29" pos:end="357:29">=</operator> <call pos:start="357:31" pos:end="357:43"><name pos:start="357:31" pos:end="357:38">trc_func</name><argument_list pos:start="357:39" pos:end="357:43">(<argument pos:start="357:40" pos:end="357:42"><expr pos:start="357:40" pos:end="357:42"><name pos:start="357:40" pos:end="357:42"><name pos:start="357:40" pos:end="357:40">t</name><operator pos:start="357:41" pos:end="357:41">.</operator><name pos:start="357:42" pos:end="357:42">f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="359:25" pos:end="359:53"><expr pos:start="359:25" pos:end="359:52"><operator pos:start="359:25" pos:end="359:25">*</operator><name pos:start="359:26" pos:end="359:30">ptr_x</name><operator pos:start="359:31" pos:end="359:32">++</operator> <operator pos:start="359:34" pos:end="359:34">=</operator> <call pos:start="359:36" pos:end="359:52"><name pos:start="359:36" pos:end="359:47">exr_flt2uint</name><argument_list pos:start="359:48" pos:end="359:52">(<argument pos:start="359:49" pos:end="359:51"><expr pos:start="359:49" pos:end="359:51"><name pos:start="359:49" pos:end="359:51"><name pos:start="359:49" pos:end="359:49">t</name><operator pos:start="359:50" pos:end="359:50">.</operator><name pos:start="359:51" pos:end="359:51">i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></for>

                    <if_stmt pos:start="363:21" pos:end="365:73"><if pos:start="363:21" pos:end="365:73">if <condition pos:start="363:24" pos:end="363:42">(<expr pos:start="363:25" pos:end="363:41"><name pos:start="363:25" pos:end="363:41"><name pos:start="363:25" pos:end="363:38">channel_buffer</name><index pos:start="363:39" pos:end="363:41">[<expr pos:start="363:40" pos:end="363:40"><literal type="number" pos:start="363:40" pos:end="363:40">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="365:25" pos:end="365:73"><block_content pos:start="365:25" pos:end="365:73">

                        <expr_stmt pos:start="365:25" pos:end="365:73"><expr pos:start="365:25" pos:end="365:72"><operator pos:start="365:25" pos:end="365:25">*</operator><name pos:start="365:26" pos:end="365:30">ptr_x</name><operator pos:start="365:31" pos:end="365:32">++</operator> <operator pos:start="365:34" pos:end="365:34">=</operator> <call pos:start="365:36" pos:end="365:72"><name pos:start="365:36" pos:end="365:47">exr_flt2uint</name><argument_list pos:start="365:48" pos:end="365:72">(<argument pos:start="365:49" pos:end="365:71"><expr pos:start="365:49" pos:end="365:71"><call pos:start="365:49" pos:end="365:71"><name pos:start="365:49" pos:end="365:67">bytestream_get_le32</name><argument_list pos:start="365:68" pos:end="365:71">(<argument pos:start="365:69" pos:end="365:70"><expr pos:start="365:69" pos:end="365:70"><operator pos:start="365:69" pos:end="365:69">&amp;</operator><name pos:start="365:70" pos:end="365:70">a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if> <else pos:start="369:15" pos:end="399:13">else <block pos:start="369:20" pos:end="399:13">{<block_content pos:start="371:17" pos:end="397:17">

                <for pos:start="371:17" pos:end="397:17">for <control pos:start="371:21" pos:end="371:47">(<init pos:start="371:22" pos:end="371:27"><expr pos:start="371:22" pos:end="371:26"><name pos:start="371:22" pos:end="371:22">x</name> <operator pos:start="371:24" pos:end="371:24">=</operator> <literal type="number" pos:start="371:26" pos:end="371:26">0</literal></expr>;</init> <condition pos:start="371:29" pos:end="371:42"><expr pos:start="371:29" pos:end="371:41"><name pos:start="371:29" pos:end="371:29">x</name> <operator pos:start="371:31" pos:end="371:31">&lt;</operator> <name pos:start="371:33" pos:end="371:41"><name pos:start="371:33" pos:end="371:34">td</name><operator pos:start="371:35" pos:end="371:36">-&gt;</operator><name pos:start="371:37" pos:end="371:41">xsize</name></name></expr>;</condition> <incr pos:start="371:44" pos:end="371:46"><expr pos:start="371:44" pos:end="371:46"><name pos:start="371:44" pos:end="371:44">x</name><operator pos:start="371:45" pos:end="371:46">++</operator></expr></incr>)</control> <block pos:start="371:49" pos:end="397:17">{<block_content pos:start="373:21" pos:end="395:73">

                    <decl_stmt pos:start="373:21" pos:end="373:42"><decl pos:start="373:21" pos:end="373:41"><type pos:start="373:21" pos:end="373:39"><name pos:start="373:21" pos:end="373:39"><name pos:start="373:21" pos:end="373:25">union</name> <name pos:start="373:27" pos:end="373:39">av_intfloat32</name></name></type> <name pos:start="373:41" pos:end="373:41">t</name></decl>;</decl_stmt>

                    <decl_stmt pos:start="375:21" pos:end="375:26"><decl pos:start="375:21" pos:end="375:25"><type pos:start="375:21" pos:end="375:23"><name pos:start="375:21" pos:end="375:23">int</name></type> <name pos:start="375:25" pos:end="375:25">c</name></decl>;</decl_stmt>



                    <for pos:start="379:21" pos:end="389:21">for <control pos:start="379:25" pos:end="379:59">(<init pos:start="379:26" pos:end="379:31"><expr pos:start="379:26" pos:end="379:30"><name pos:start="379:26" pos:end="379:26">c</name> <operator pos:start="379:28" pos:end="379:28">=</operator> <literal type="number" pos:start="379:30" pos:end="379:30">0</literal></expr>;</init> <condition pos:start="379:33" pos:end="379:54"><expr pos:start="379:33" pos:end="379:53"><name pos:start="379:33" pos:end="379:33">c</name> <operator pos:start="379:35" pos:end="379:35">&lt;</operator> <name pos:start="379:37" pos:end="379:53">rgb_channel_count</name></expr>;</condition> <incr pos:start="379:56" pos:end="379:58"><expr pos:start="379:56" pos:end="379:58"><name pos:start="379:56" pos:end="379:56">c</name><operator pos:start="379:57" pos:end="379:58">++</operator></expr></incr>)</control> <block pos:start="379:61" pos:end="389:21">{<block_content pos:start="381:25" pos:end="387:53">

                        <expr_stmt pos:start="381:25" pos:end="381:59"><expr pos:start="381:25" pos:end="381:58"><name pos:start="381:25" pos:end="381:27"><name pos:start="381:25" pos:end="381:25">t</name><operator pos:start="381:26" pos:end="381:26">.</operator><name pos:start="381:27" pos:end="381:27">i</name></name> <operator pos:start="381:29" pos:end="381:29">=</operator> <call pos:start="381:31" pos:end="381:58"><name pos:start="381:31" pos:end="381:49">bytestream_get_le32</name><argument_list pos:start="381:50" pos:end="381:58">(<argument pos:start="381:51" pos:end="381:57"><expr pos:start="381:51" pos:end="381:57"><operator pos:start="381:51" pos:end="381:51">&amp;</operator><name pos:start="381:52" pos:end="381:57"><name pos:start="381:52" pos:end="381:54">rgb</name><index pos:start="381:55" pos:end="381:57">[<expr pos:start="381:56" pos:end="381:56"><name pos:start="381:56" pos:end="381:56">c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="383:25" pos:end="385:55"><if pos:start="383:25" pos:end="385:55">if <condition pos:start="383:28" pos:end="383:39">(<expr pos:start="383:29" pos:end="383:38"><name pos:start="383:29" pos:end="383:31"><name pos:start="383:29" pos:end="383:29">t</name><operator pos:start="383:30" pos:end="383:30">.</operator><name pos:start="383:31" pos:end="383:31">f</name></name> <operator pos:start="383:33" pos:end="383:33">&gt;</operator> <literal type="number" pos:start="383:35" pos:end="383:38">0.0f</literal></expr>)</condition><block type="pseudo" pos:start="385:29" pos:end="385:55"><block_content pos:start="385:29" pos:end="385:55">  <comment type="block" pos:start="383:42" pos:end="383:68">/* avoid negative values */</comment>

                            <expr_stmt pos:start="385:29" pos:end="385:55"><expr pos:start="385:29" pos:end="385:54"><name pos:start="385:29" pos:end="385:31"><name pos:start="385:29" pos:end="385:29">t</name><operator pos:start="385:30" pos:end="385:30">.</operator><name pos:start="385:31" pos:end="385:31">f</name></name> <operator pos:start="385:33" pos:end="385:33">=</operator> <call pos:start="385:35" pos:end="385:54"><name pos:start="385:35" pos:end="385:38">powf</name><argument_list pos:start="385:39" pos:end="385:54">(<argument pos:start="385:40" pos:end="385:42"><expr pos:start="385:40" pos:end="385:42"><name pos:start="385:40" pos:end="385:42"><name pos:start="385:40" pos:end="385:40">t</name><operator pos:start="385:41" pos:end="385:41">.</operator><name pos:start="385:42" pos:end="385:42">f</name></name></expr></argument>, <argument pos:start="385:45" pos:end="385:53"><expr pos:start="385:45" pos:end="385:53"><name pos:start="385:45" pos:end="385:53">one_gamma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="387:25" pos:end="387:53"><expr pos:start="387:25" pos:end="387:52"><operator pos:start="387:25" pos:end="387:25">*</operator><name pos:start="387:26" pos:end="387:30">ptr_x</name><operator pos:start="387:31" pos:end="387:32">++</operator> <operator pos:start="387:34" pos:end="387:34">=</operator> <call pos:start="387:36" pos:end="387:52"><name pos:start="387:36" pos:end="387:47">exr_flt2uint</name><argument_list pos:start="387:48" pos:end="387:52">(<argument pos:start="387:49" pos:end="387:51"><expr pos:start="387:49" pos:end="387:51"><name pos:start="387:49" pos:end="387:51"><name pos:start="387:49" pos:end="387:49">t</name><operator pos:start="387:50" pos:end="387:50">.</operator><name pos:start="387:51" pos:end="387:51">i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></for>



                    <if_stmt pos:start="393:21" pos:end="395:73"><if pos:start="393:21" pos:end="395:73">if <condition pos:start="393:24" pos:end="393:42">(<expr pos:start="393:25" pos:end="393:41"><name pos:start="393:25" pos:end="393:41"><name pos:start="393:25" pos:end="393:38">channel_buffer</name><index pos:start="393:39" pos:end="393:41">[<expr pos:start="393:40" pos:end="393:40"><literal type="number" pos:start="393:40" pos:end="393:40">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="395:25" pos:end="395:73"><block_content pos:start="395:25" pos:end="395:73">

                        <expr_stmt pos:start="395:25" pos:end="395:73"><expr pos:start="395:25" pos:end="395:72"><operator pos:start="395:25" pos:end="395:25">*</operator><name pos:start="395:26" pos:end="395:30">ptr_x</name><operator pos:start="395:31" pos:end="395:32">++</operator> <operator pos:start="395:34" pos:end="395:34">=</operator> <call pos:start="395:36" pos:end="395:72"><name pos:start="395:36" pos:end="395:47">exr_flt2uint</name><argument_list pos:start="395:48" pos:end="395:72">(<argument pos:start="395:49" pos:end="395:71"><expr pos:start="395:49" pos:end="395:71"><call pos:start="395:49" pos:end="395:71"><name pos:start="395:49" pos:end="395:67">bytestream_get_le32</name><argument_list pos:start="395:68" pos:end="395:71">(<argument pos:start="395:69" pos:end="395:70"><expr pos:start="395:69" pos:end="395:70"><operator pos:start="395:69" pos:end="395:69">&amp;</operator><name pos:start="395:70" pos:end="395:70">a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="401:11" pos:end="423:9">else if <condition pos:start="401:19" pos:end="401:45">(<expr pos:start="401:20" pos:end="401:44"><name pos:start="401:20" pos:end="401:32"><name pos:start="401:20" pos:end="401:20">s</name><operator pos:start="401:21" pos:end="401:22">-&gt;</operator><name pos:start="401:23" pos:end="401:32">pixel_type</name></name> <operator pos:start="401:34" pos:end="401:35">==</operator> <name pos:start="401:37" pos:end="401:44">EXR_HALF</name></expr>)</condition> <block pos:start="401:47" pos:end="423:9">{<block_content pos:start="405:13" pos:end="421:13">

            <comment type="line" pos:start="403:13" pos:end="403:21">// 16-bit</comment>

            <for pos:start="405:13" pos:end="421:13">for <control pos:start="405:17" pos:end="405:43">(<init pos:start="405:18" pos:end="405:23"><expr pos:start="405:18" pos:end="405:22"><name pos:start="405:18" pos:end="405:18">x</name> <operator pos:start="405:20" pos:end="405:20">=</operator> <literal type="number" pos:start="405:22" pos:end="405:22">0</literal></expr>;</init> <condition pos:start="405:25" pos:end="405:38"><expr pos:start="405:25" pos:end="405:37"><name pos:start="405:25" pos:end="405:25">x</name> <operator pos:start="405:27" pos:end="405:27">&lt;</operator> <name pos:start="405:29" pos:end="405:37"><name pos:start="405:29" pos:end="405:30">td</name><operator pos:start="405:31" pos:end="405:32">-&gt;</operator><name pos:start="405:33" pos:end="405:37">xsize</name></name></expr>;</condition> <incr pos:start="405:40" pos:end="405:42"><expr pos:start="405:40" pos:end="405:42"><name pos:start="405:40" pos:end="405:40">x</name><operator pos:start="405:41" pos:end="405:42">++</operator></expr></incr>)</control> <block pos:start="405:45" pos:end="421:13">{<block_content pos:start="407:17" pos:end="419:72">

                <decl_stmt pos:start="407:17" pos:end="407:22"><decl pos:start="407:17" pos:end="407:21"><type pos:start="407:17" pos:end="407:19"><name pos:start="407:17" pos:end="407:19">int</name></type> <name pos:start="407:21" pos:end="407:21">c</name></decl>;</decl_stmt>

                <for pos:start="409:17" pos:end="413:17">for <control pos:start="409:21" pos:end="409:55">(<init pos:start="409:22" pos:end="409:27"><expr pos:start="409:22" pos:end="409:26"><name pos:start="409:22" pos:end="409:22">c</name> <operator pos:start="409:24" pos:end="409:24">=</operator> <literal type="number" pos:start="409:26" pos:end="409:26">0</literal></expr>;</init> <condition pos:start="409:29" pos:end="409:50"><expr pos:start="409:29" pos:end="409:49"><name pos:start="409:29" pos:end="409:29">c</name> <operator pos:start="409:31" pos:end="409:31">&lt;</operator> <name pos:start="409:33" pos:end="409:49">rgb_channel_count</name></expr>;</condition> <incr pos:start="409:52" pos:end="409:54"><expr pos:start="409:52" pos:end="409:54"><name pos:start="409:52" pos:end="409:52">c</name><operator pos:start="409:53" pos:end="409:54">++</operator></expr></incr>)</control> <block pos:start="409:57" pos:end="413:17">{<block_content pos:start="411:21" pos:end="411:76">

                    <expr_stmt pos:start="411:21" pos:end="411:76"><expr pos:start="411:21" pos:end="411:75"><operator pos:start="411:21" pos:end="411:21">*</operator><name pos:start="411:22" pos:end="411:26">ptr_x</name><operator pos:start="411:27" pos:end="411:28">++</operator> <operator pos:start="411:30" pos:end="411:30">=</operator> <name pos:start="411:32" pos:end="411:75"><name pos:start="411:32" pos:end="411:32">s</name><operator pos:start="411:33" pos:end="411:34">-&gt;</operator><name pos:start="411:35" pos:end="411:45">gamma_table</name><index pos:start="411:46" pos:end="411:75">[<expr pos:start="411:47" pos:end="411:74"><call pos:start="411:47" pos:end="411:74"><name pos:start="411:47" pos:end="411:65">bytestream_get_le16</name><argument_list pos:start="411:66" pos:end="411:74">(<argument pos:start="411:67" pos:end="411:73"><expr pos:start="411:67" pos:end="411:73"><operator pos:start="411:67" pos:end="411:67">&amp;</operator><name pos:start="411:68" pos:end="411:73"><name pos:start="411:68" pos:end="411:70">rgb</name><index pos:start="411:71" pos:end="411:73">[<expr pos:start="411:72" pos:end="411:72"><name pos:start="411:72" pos:end="411:72">c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

                </block_content>}</block></for>



                <if_stmt pos:start="417:17" pos:end="419:72"><if pos:start="417:17" pos:end="419:72">if <condition pos:start="417:20" pos:end="417:38">(<expr pos:start="417:21" pos:end="417:37"><name pos:start="417:21" pos:end="417:37"><name pos:start="417:21" pos:end="417:34">channel_buffer</name><index pos:start="417:35" pos:end="417:37">[<expr pos:start="417:36" pos:end="417:36"><literal type="number" pos:start="417:36" pos:end="417:36">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="419:21" pos:end="419:72"><block_content pos:start="419:21" pos:end="419:72">

                    <expr_stmt pos:start="419:21" pos:end="419:72"><expr pos:start="419:21" pos:end="419:71"><operator pos:start="419:21" pos:end="419:21">*</operator><name pos:start="419:22" pos:end="419:26">ptr_x</name><operator pos:start="419:27" pos:end="419:28">++</operator> <operator pos:start="419:30" pos:end="419:30">=</operator> <call pos:start="419:32" pos:end="419:71"><name pos:start="419:32" pos:end="419:46">exr_halflt2uint</name><argument_list pos:start="419:47" pos:end="419:71">(<argument pos:start="419:48" pos:end="419:70"><expr pos:start="419:48" pos:end="419:70"><call pos:start="419:48" pos:end="419:70"><name pos:start="419:48" pos:end="419:66">bytestream_get_le16</name><argument_list pos:start="419:67" pos:end="419:70">(<argument pos:start="419:68" pos:end="419:69"><expr pos:start="419:68" pos:end="419:69"><operator pos:start="419:68" pos:end="419:68">&amp;</operator><name pos:start="419:69" pos:end="419:69">a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <if type="elseif" pos:start="423:11" pos:end="441:9">else if <condition pos:start="423:19" pos:end="423:45">(<expr pos:start="423:20" pos:end="423:44"><name pos:start="423:20" pos:end="423:32"><name pos:start="423:20" pos:end="423:20">s</name><operator pos:start="423:21" pos:end="423:22">-&gt;</operator><name pos:start="423:23" pos:end="423:32">pixel_type</name></name> <operator pos:start="423:34" pos:end="423:35">==</operator> <name pos:start="423:37" pos:end="423:44">EXR_UINT</name></expr>)</condition> <block pos:start="423:47" pos:end="441:9">{<block_content pos:start="425:13" pos:end="439:13">

            <for pos:start="425:13" pos:end="439:13">for <control pos:start="425:17" pos:end="425:43">(<init pos:start="425:18" pos:end="425:23"><expr pos:start="425:18" pos:end="425:22"><name pos:start="425:18" pos:end="425:18">x</name> <operator pos:start="425:20" pos:end="425:20">=</operator> <literal type="number" pos:start="425:22" pos:end="425:22">0</literal></expr>;</init> <condition pos:start="425:25" pos:end="425:38"><expr pos:start="425:25" pos:end="425:37"><name pos:start="425:25" pos:end="425:25">x</name> <operator pos:start="425:27" pos:end="425:27">&lt;</operator> <name pos:start="425:29" pos:end="425:37"><name pos:start="425:29" pos:end="425:30">td</name><operator pos:start="425:31" pos:end="425:32">-&gt;</operator><name pos:start="425:33" pos:end="425:37">xsize</name></name></expr>;</condition> <incr pos:start="425:40" pos:end="425:42"><expr pos:start="425:40" pos:end="425:42"><name pos:start="425:40" pos:end="425:40">x</name><operator pos:start="425:41" pos:end="425:42">++</operator></expr></incr>)</control> <block pos:start="425:45" pos:end="439:13">{<block_content pos:start="427:17" pos:end="437:61">

                <for pos:start="427:17" pos:end="431:17">for <control pos:start="427:21" pos:end="427:55">(<init pos:start="427:22" pos:end="427:27"><expr pos:start="427:22" pos:end="427:26"><name pos:start="427:22" pos:end="427:22">c</name> <operator pos:start="427:24" pos:end="427:24">=</operator> <literal type="number" pos:start="427:26" pos:end="427:26">0</literal></expr>;</init> <condition pos:start="427:29" pos:end="427:50"><expr pos:start="427:29" pos:end="427:49"><name pos:start="427:29" pos:end="427:29">c</name> <operator pos:start="427:31" pos:end="427:31">&lt;</operator> <name pos:start="427:33" pos:end="427:49">rgb_channel_count</name></expr>;</condition> <incr pos:start="427:52" pos:end="427:54"><expr pos:start="427:52" pos:end="427:54"><name pos:start="427:52" pos:end="427:52">c</name><operator pos:start="427:53" pos:end="427:54">++</operator></expr></incr>)</control> <block pos:start="427:57" pos:end="431:17">{<block_content pos:start="429:21" pos:end="429:66">

                    <expr_stmt pos:start="429:21" pos:end="429:66"><expr pos:start="429:21" pos:end="429:65"><operator pos:start="429:21" pos:end="429:21">*</operator><name pos:start="429:22" pos:end="429:26">ptr_x</name><operator pos:start="429:27" pos:end="429:28">++</operator> <operator pos:start="429:30" pos:end="429:30">=</operator> <call pos:start="429:32" pos:end="429:59"><name pos:start="429:32" pos:end="429:50">bytestream_get_le32</name><argument_list pos:start="429:51" pos:end="429:59">(<argument pos:start="429:52" pos:end="429:58"><expr pos:start="429:52" pos:end="429:58"><operator pos:start="429:52" pos:end="429:52">&amp;</operator><name pos:start="429:53" pos:end="429:58"><name pos:start="429:53" pos:end="429:55">rgb</name><index pos:start="429:56" pos:end="429:58">[<expr pos:start="429:57" pos:end="429:57"><name pos:start="429:57" pos:end="429:57">c</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="429:61" pos:end="429:62">&gt;&gt;</operator> <literal type="number" pos:start="429:64" pos:end="429:65">16</literal></expr>;</expr_stmt>

                </block_content>}</block></for>



                <if_stmt pos:start="435:17" pos:end="437:61"><if pos:start="435:17" pos:end="437:61">if <condition pos:start="435:20" pos:end="435:38">(<expr pos:start="435:21" pos:end="435:37"><name pos:start="435:21" pos:end="435:37"><name pos:start="435:21" pos:end="435:34">channel_buffer</name><index pos:start="435:35" pos:end="435:37">[<expr pos:start="435:36" pos:end="435:36"><literal type="number" pos:start="435:36" pos:end="435:36">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="437:21" pos:end="437:61"><block_content pos:start="437:21" pos:end="437:61">

                    <expr_stmt pos:start="437:21" pos:end="437:61"><expr pos:start="437:21" pos:end="437:60"><operator pos:start="437:21" pos:end="437:21">*</operator><name pos:start="437:22" pos:end="437:26">ptr_x</name><operator pos:start="437:27" pos:end="437:28">++</operator> <operator pos:start="437:30" pos:end="437:30">=</operator> <call pos:start="437:32" pos:end="437:54"><name pos:start="437:32" pos:end="437:50">bytestream_get_le32</name><argument_list pos:start="437:51" pos:end="437:54">(<argument pos:start="437:52" pos:end="437:53"><expr pos:start="437:52" pos:end="437:53"><operator pos:start="437:52" pos:end="437:52">&amp;</operator><name pos:start="437:53" pos:end="437:53">a</name></expr></argument>)</argument_list></call> <operator pos:start="437:56" pos:end="437:57">&gt;&gt;</operator> <literal type="number" pos:start="437:59" pos:end="437:60">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>



        <comment type="line" pos:start="445:9" pos:end="445:46">// Zero out the end if xmax+1 is not w</comment>

        <expr_stmt pos:start="447:9" pos:end="447:32"><expr pos:start="447:9" pos:end="447:31"><call pos:start="447:9" pos:end="447:31"><name pos:start="447:9" pos:end="447:14">memset</name><argument_list pos:start="447:15" pos:end="447:31">(<argument pos:start="447:16" pos:end="447:20"><expr pos:start="447:16" pos:end="447:20"><name pos:start="447:16" pos:end="447:20">ptr_x</name></expr></argument>, <argument pos:start="447:23" pos:end="447:23"><expr pos:start="447:23" pos:end="447:23"><literal type="number" pos:start="447:23" pos:end="447:23">0</literal></expr></argument>, <argument pos:start="447:26" pos:end="447:30"><expr pos:start="447:26" pos:end="447:30"><name pos:start="447:26" pos:end="447:30">axmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="451:9" pos:end="451:51"><expr pos:start="451:9" pos:end="451:50"><name pos:start="451:9" pos:end="451:25"><name pos:start="451:9" pos:end="451:22">channel_buffer</name><index pos:start="451:23" pos:end="451:25">[<expr pos:start="451:24" pos:end="451:24"><literal type="number" pos:start="451:24" pos:end="451:24">0</literal></expr>]</index></name> <operator pos:start="451:27" pos:end="451:28">+=</operator> <name pos:start="451:30" pos:end="451:50"><name pos:start="451:30" pos:end="451:31">td</name><operator pos:start="451:32" pos:end="451:33">-&gt;</operator><name pos:start="451:34" pos:end="451:50">channel_line_size</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="453:9" pos:end="453:51"><expr pos:start="453:9" pos:end="453:50"><name pos:start="453:9" pos:end="453:25"><name pos:start="453:9" pos:end="453:22">channel_buffer</name><index pos:start="453:23" pos:end="453:25">[<expr pos:start="453:24" pos:end="453:24"><literal type="number" pos:start="453:24" pos:end="453:24">1</literal></expr>]</index></name> <operator pos:start="453:27" pos:end="453:28">+=</operator> <name pos:start="453:30" pos:end="453:50"><name pos:start="453:30" pos:end="453:31">td</name><operator pos:start="453:32" pos:end="453:33">-&gt;</operator><name pos:start="453:34" pos:end="453:50">channel_line_size</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="455:9" pos:end="455:51"><expr pos:start="455:9" pos:end="455:50"><name pos:start="455:9" pos:end="455:25"><name pos:start="455:9" pos:end="455:22">channel_buffer</name><index pos:start="455:23" pos:end="455:25">[<expr pos:start="455:24" pos:end="455:24"><literal type="number" pos:start="455:24" pos:end="455:24">2</literal></expr>]</index></name> <operator pos:start="455:27" pos:end="455:28">+=</operator> <name pos:start="455:30" pos:end="455:50"><name pos:start="455:30" pos:end="455:31">td</name><operator pos:start="455:32" pos:end="455:33">-&gt;</operator><name pos:start="455:34" pos:end="455:50">channel_line_size</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="457:9" pos:end="459:55"><if pos:start="457:9" pos:end="459:55">if <condition pos:start="457:12" pos:end="457:30">(<expr pos:start="457:13" pos:end="457:29"><name pos:start="457:13" pos:end="457:29"><name pos:start="457:13" pos:end="457:26">channel_buffer</name><index pos:start="457:27" pos:end="457:29">[<expr pos:start="457:28" pos:end="457:28"><literal type="number" pos:start="457:28" pos:end="457:28">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="459:13" pos:end="459:55"><block_content pos:start="459:13" pos:end="459:55">

            <expr_stmt pos:start="459:13" pos:end="459:55"><expr pos:start="459:13" pos:end="459:54"><name pos:start="459:13" pos:end="459:29"><name pos:start="459:13" pos:end="459:26">channel_buffer</name><index pos:start="459:27" pos:end="459:29">[<expr pos:start="459:28" pos:end="459:28"><literal type="number" pos:start="459:28" pos:end="459:28">3</literal></expr>]</index></name> <operator pos:start="459:31" pos:end="459:32">+=</operator> <name pos:start="459:34" pos:end="459:54"><name pos:start="459:34" pos:end="459:35">td</name><operator pos:start="459:36" pos:end="459:37">-&gt;</operator><name pos:start="459:38" pos:end="459:54">channel_line_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <return pos:start="465:5" pos:end="465:13">return <expr pos:start="465:12" pos:end="465:12"><literal type="number" pos:start="465:12" pos:end="465:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
