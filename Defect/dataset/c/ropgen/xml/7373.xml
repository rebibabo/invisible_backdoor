<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7373.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">decode_subframe_lpc</name><parameter_list pos:start="1:31" pos:end="3:66">(<parameter pos:start="1:32" pos:end="1:48"><decl pos:start="1:32" pos:end="1:48"><type pos:start="1:32" pos:end="1:48"><name pos:start="1:32" pos:end="1:45">ShortenContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">s</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:61"><decl pos:start="1:51" pos:end="1:61"><type pos:start="1:51" pos:end="1:61"><name pos:start="1:51" pos:end="1:53">int</name></type> <name pos:start="1:55" pos:end="1:61">command</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:74"><decl pos:start="1:64" pos:end="1:74"><type pos:start="1:64" pos:end="1:74"><name pos:start="1:64" pos:end="1:66">int</name></type> <name pos:start="1:68" pos:end="1:74">channel</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:48"><decl pos:start="3:32" pos:end="3:48"><type pos:start="3:32" pos:end="3:48"><name pos:start="3:32" pos:end="3:34">int</name></type> <name pos:start="3:36" pos:end="3:48">residual_size</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:65"><decl pos:start="3:51" pos:end="3:65"><type pos:start="3:51" pos:end="3:65"><name pos:start="3:51" pos:end="3:57">int32_t</name></type> <name pos:start="3:59" pos:end="3:65">coffset</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="107:1">{<block_content pos:start="7:5" pos:end="105:13">

    <decl_stmt pos:start="7:5" pos:end="7:48"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:18">pred_order</name></decl>, <decl pos:start="7:21" pos:end="7:23"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:21" pos:end="7:23">sum</name></decl>, <decl pos:start="7:26" pos:end="7:31"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:26" pos:end="7:31">qshift</name></decl>, <decl pos:start="7:34" pos:end="7:41"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:34" pos:end="7:41">init_sum</name></decl>, <decl pos:start="7:44" pos:end="7:44"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:44" pos:end="7:44">i</name></decl>, <decl pos:start="7:47" pos:end="7:47"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:47" pos:end="7:47">j</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:15"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:13">int</name> <modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:21">coeffs</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="61:5"><if pos:start="13:5" pos:end="41:5">if <condition pos:start="13:8" pos:end="13:27">(<expr pos:start="13:9" pos:end="13:26"><name pos:start="13:9" pos:end="13:15">command</name> <operator pos:start="13:17" pos:end="13:18">==</operator> <name pos:start="13:20" pos:end="13:26">FN_QLPC</name></expr>)</condition> <block pos:start="13:29" pos:end="41:5">{<block_content pos:start="17:9" pos:end="39:26">

        <comment type="block" pos:start="15:9" pos:end="15:44">/* read/validate prediction order */</comment>

        <expr_stmt pos:start="17:9" pos:end="17:61"><expr pos:start="17:9" pos:end="17:60"><name pos:start="17:9" pos:end="17:18">pred_order</name> <operator pos:start="17:20" pos:end="17:20">=</operator> <call pos:start="17:22" pos:end="17:60"><name pos:start="17:22" pos:end="17:42">get_ur_golomb_shorten</name><argument_list pos:start="17:43" pos:end="17:60">(<argument pos:start="17:44" pos:end="17:49"><expr pos:start="17:44" pos:end="17:49"><operator pos:start="17:44" pos:end="17:44">&amp;</operator><name pos:start="17:45" pos:end="17:49"><name pos:start="17:45" pos:end="17:45">s</name><operator pos:start="17:46" pos:end="17:47">-&gt;</operator><name pos:start="17:48" pos:end="17:49">gb</name></name></expr></argument>, <argument pos:start="17:52" pos:end="17:59"><expr pos:start="17:52" pos:end="17:59"><name pos:start="17:52" pos:end="17:59">LPCQSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="19:9" pos:end="27:9"><if pos:start="19:9" pos:end="27:9">if <condition pos:start="19:12" pos:end="19:34">(<expr pos:start="19:13" pos:end="19:33"><name pos:start="19:13" pos:end="19:22">pred_order</name> <operator pos:start="19:24" pos:end="19:24">&gt;</operator> <name pos:start="19:26" pos:end="19:33"><name pos:start="19:26" pos:end="19:26">s</name><operator pos:start="19:27" pos:end="19:28">-&gt;</operator><name pos:start="19:29" pos:end="19:33">nwrap</name></name></expr>)</condition> <block pos:start="19:36" pos:end="27:9">{<block_content pos:start="21:13" pos:end="25:35">

            <expr_stmt pos:start="21:13" pos:end="23:31"><expr pos:start="21:13" pos:end="23:30"><call pos:start="21:13" pos:end="23:30"><name pos:start="21:13" pos:end="21:18">av_log</name><argument_list pos:start="21:19" pos:end="23:30">(<argument pos:start="21:20" pos:end="21:27"><expr pos:start="21:20" pos:end="21:27"><name pos:start="21:20" pos:end="21:27"><name pos:start="21:20" pos:end="21:20">s</name><operator pos:start="21:21" pos:end="21:22">-&gt;</operator><name pos:start="21:23" pos:end="21:27">avctx</name></name></expr></argument>, <argument pos:start="21:30" pos:end="21:41"><expr pos:start="21:30" pos:end="21:41"><name pos:start="21:30" pos:end="21:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="21:44" pos:end="21:68"><expr pos:start="21:44" pos:end="21:68"><literal type="string" pos:start="21:44" pos:end="21:68">"invalid pred_order %d\n"</literal></expr></argument>,

                   <argument pos:start="23:20" pos:end="23:29"><expr pos:start="23:20" pos:end="23:29"><name pos:start="23:20" pos:end="23:29">pred_order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="25:13" pos:end="25:35">return <expr pos:start="25:20" pos:end="25:34"><call pos:start="25:20" pos:end="25:34"><name pos:start="25:20" pos:end="25:26">AVERROR</name><argument_list pos:start="25:27" pos:end="25:34">(<argument pos:start="25:28" pos:end="25:33"><expr pos:start="25:28" pos:end="25:33"><name pos:start="25:28" pos:end="25:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="29:9" pos:end="29:35">/* read LPC coefficients */</comment>

        <for pos:start="31:9" pos:end="33:67">for <control pos:start="31:13" pos:end="31:40">(<init pos:start="31:14" pos:end="31:19"><expr pos:start="31:14" pos:end="31:18"><name pos:start="31:14" pos:end="31:14">i</name> <operator pos:start="31:16" pos:end="31:16">=</operator> <literal type="number" pos:start="31:18" pos:end="31:18">0</literal></expr>;</init> <condition pos:start="31:21" pos:end="31:35"><expr pos:start="31:21" pos:end="31:34"><name pos:start="31:21" pos:end="31:21">i</name> <operator pos:start="31:23" pos:end="31:23">&lt;</operator> <name pos:start="31:25" pos:end="31:34">pred_order</name></expr>;</condition> <incr pos:start="31:37" pos:end="31:39"><expr pos:start="31:37" pos:end="31:39"><name pos:start="31:37" pos:end="31:37">i</name><operator pos:start="31:38" pos:end="31:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="33:13" pos:end="33:67"><block_content pos:start="33:13" pos:end="33:67">

            <expr_stmt pos:start="33:13" pos:end="33:67"><expr pos:start="33:13" pos:end="33:66"><name pos:start="33:13" pos:end="33:24"><name pos:start="33:13" pos:end="33:13">s</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:21">coeffs</name><index pos:start="33:22" pos:end="33:24">[<expr pos:start="33:23" pos:end="33:23"><name pos:start="33:23" pos:end="33:23">i</name></expr>]</index></name> <operator pos:start="33:26" pos:end="33:26">=</operator> <call pos:start="33:28" pos:end="33:66"><name pos:start="33:28" pos:end="33:48">get_sr_golomb_shorten</name><argument_list pos:start="33:49" pos:end="33:66">(<argument pos:start="33:50" pos:end="33:55"><expr pos:start="33:50" pos:end="33:55"><operator pos:start="33:50" pos:end="33:50">&amp;</operator><name pos:start="33:51" pos:end="33:55"><name pos:start="33:51" pos:end="33:51">s</name><operator pos:start="33:52" pos:end="33:53">-&gt;</operator><name pos:start="33:54" pos:end="33:55">gb</name></name></expr></argument>, <argument pos:start="33:58" pos:end="33:65"><expr pos:start="33:58" pos:end="33:65"><name pos:start="33:58" pos:end="33:65">LPCQUANT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt pos:start="35:9" pos:end="35:27"><expr pos:start="35:9" pos:end="35:26"><name pos:start="35:9" pos:end="35:14">coeffs</name> <operator pos:start="35:16" pos:end="35:16">=</operator> <name pos:start="35:18" pos:end="35:26"><name pos:start="35:18" pos:end="35:18">s</name><operator pos:start="35:19" pos:end="35:20">-&gt;</operator><name pos:start="35:21" pos:end="35:26">coeffs</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="39:9" pos:end="39:26"><expr pos:start="39:9" pos:end="39:25"><name pos:start="39:9" pos:end="39:14">qshift</name> <operator pos:start="39:16" pos:end="39:16">=</operator> <name pos:start="39:18" pos:end="39:25">LPCQUANT</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="41:7" pos:end="61:5">else <block pos:start="41:12" pos:end="61:5">{<block_content pos:start="45:9" pos:end="59:23">

        <comment type="block" pos:start="43:9" pos:end="43:30">/* fixed LPC coeffs */</comment>

        <expr_stmt pos:start="45:9" pos:end="45:29"><expr pos:start="45:9" pos:end="45:28"><name pos:start="45:9" pos:end="45:18">pred_order</name> <operator pos:start="45:20" pos:end="45:20">=</operator> <name pos:start="45:22" pos:end="45:28">command</name></expr>;</expr_stmt>

        <if_stmt pos:start="47:9" pos:end="55:9"><if pos:start="47:9" pos:end="55:9">if <condition pos:start="47:12" pos:end="47:55">(<expr pos:start="47:13" pos:end="47:54"><name pos:start="47:13" pos:end="47:22">pred_order</name> <operator pos:start="47:24" pos:end="47:25">&gt;=</operator> <call pos:start="47:27" pos:end="47:54"><name pos:start="47:27" pos:end="47:40">FF_ARRAY_ELEMS</name><argument_list pos:start="47:41" pos:end="47:54">(<argument pos:start="47:42" pos:end="47:53"><expr pos:start="47:42" pos:end="47:53"><name pos:start="47:42" pos:end="47:53">fixed_coeffs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="47:57" pos:end="55:9">{<block_content pos:start="49:13" pos:end="53:39">

            <expr_stmt pos:start="49:13" pos:end="51:31"><expr pos:start="49:13" pos:end="51:30"><call pos:start="49:13" pos:end="51:30"><name pos:start="49:13" pos:end="49:18">av_log</name><argument_list pos:start="49:19" pos:end="51:30">(<argument pos:start="49:20" pos:end="49:27"><expr pos:start="49:20" pos:end="49:27"><name pos:start="49:20" pos:end="49:27"><name pos:start="49:20" pos:end="49:20">s</name><operator pos:start="49:21" pos:end="49:22">-&gt;</operator><name pos:start="49:23" pos:end="49:27">avctx</name></name></expr></argument>, <argument pos:start="49:30" pos:end="49:41"><expr pos:start="49:30" pos:end="49:41"><name pos:start="49:30" pos:end="49:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="49:44" pos:end="49:68"><expr pos:start="49:44" pos:end="49:68"><literal type="string" pos:start="49:44" pos:end="49:68">"invalid pred_order %d\n"</literal></expr></argument>,

                   <argument pos:start="51:20" pos:end="51:29"><expr pos:start="51:20" pos:end="51:29"><name pos:start="51:20" pos:end="51:29">pred_order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="53:13" pos:end="53:39">return <expr pos:start="53:20" pos:end="53:38"><name pos:start="53:20" pos:end="53:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:46"><expr pos:start="57:9" pos:end="57:45"><name pos:start="57:9" pos:end="57:14">coeffs</name>     <operator pos:start="57:20" pos:end="57:20">=</operator> <name pos:start="57:22" pos:end="57:45"><name pos:start="57:22" pos:end="57:33">fixed_coeffs</name><index pos:start="57:34" pos:end="57:45">[<expr pos:start="57:35" pos:end="57:44"><name pos:start="57:35" pos:end="57:44">pred_order</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:23"><expr pos:start="59:9" pos:end="59:22"><name pos:start="59:9" pos:end="59:14">qshift</name>     <operator pos:start="59:20" pos:end="59:20">=</operator> <literal type="number" pos:start="59:22" pos:end="59:22">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="65:5" pos:end="65:68">/* subtract offset from previous samples to use in prediction */</comment>

    <if_stmt pos:start="67:5" pos:end="71:46"><if pos:start="67:5" pos:end="71:46">if <condition pos:start="67:8" pos:end="67:38">(<expr pos:start="67:9" pos:end="67:37"><name pos:start="67:9" pos:end="67:15">command</name> <operator pos:start="67:17" pos:end="67:18">==</operator> <name pos:start="67:20" pos:end="67:26">FN_QLPC</name> <operator pos:start="67:28" pos:end="67:29">&amp;&amp;</operator> <name pos:start="67:31" pos:end="67:37">coffset</name></expr>)</condition><block type="pseudo" pos:start="69:9" pos:end="71:46"><block_content pos:start="69:9" pos:end="71:46">

        <for pos:start="69:9" pos:end="71:46">for <control pos:start="69:13" pos:end="69:41">(<init pos:start="69:14" pos:end="69:29"><expr pos:start="69:14" pos:end="69:28"><name pos:start="69:14" pos:end="69:14">i</name> <operator pos:start="69:16" pos:end="69:16">=</operator> <operator pos:start="69:18" pos:end="69:18">-</operator><name pos:start="69:19" pos:end="69:28">pred_order</name></expr>;</init> <condition pos:start="69:31" pos:end="69:36"><expr pos:start="69:31" pos:end="69:35"><name pos:start="69:31" pos:end="69:31">i</name> <operator pos:start="69:33" pos:end="69:33">&lt;</operator> <literal type="number" pos:start="69:35" pos:end="69:35">0</literal></expr>;</condition> <incr pos:start="69:38" pos:end="69:40"><expr pos:start="69:38" pos:end="69:40"><name pos:start="69:38" pos:end="69:38">i</name><operator pos:start="69:39" pos:end="69:40">++</operator></expr></incr>)</control><block type="pseudo" pos:start="71:13" pos:end="71:46"><block_content pos:start="71:13" pos:end="71:46">

            <expr_stmt pos:start="71:13" pos:end="71:46"><expr pos:start="71:13" pos:end="71:45"><name pos:start="71:13" pos:end="71:34"><name pos:start="71:13" pos:end="71:13">s</name><operator pos:start="71:14" pos:end="71:15">-&gt;</operator><name pos:start="71:16" pos:end="71:22">decoded</name><index pos:start="71:23" pos:end="71:31">[<expr pos:start="71:24" pos:end="71:30"><name pos:start="71:24" pos:end="71:30">channel</name></expr>]</index><index pos:start="71:32" pos:end="71:34">[<expr pos:start="71:33" pos:end="71:33"><name pos:start="71:33" pos:end="71:33">i</name></expr>]</index></name> <operator pos:start="71:36" pos:end="71:37">-=</operator> <name pos:start="71:39" pos:end="71:45">coffset</name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>



    <comment type="block" pos:start="75:5" pos:end="75:47">/* decode residual and do LPC prediction */</comment>

    <expr_stmt pos:start="77:5" pos:end="77:79"><expr pos:start="77:5" pos:end="77:78"><name pos:start="77:5" pos:end="77:12">init_sum</name> <operator pos:start="77:14" pos:end="77:14">=</operator> <ternary pos:start="77:16" pos:end="77:78"><condition pos:start="77:16" pos:end="77:27"><expr pos:start="77:16" pos:end="77:25"><name pos:start="77:16" pos:end="77:25">pred_order</name></expr> ?</condition><then pos:start="77:29" pos:end="77:68"> <expr pos:start="77:29" pos:end="77:68"><operator pos:start="77:29" pos:end="77:29">(</operator><ternary pos:start="77:30" pos:end="77:67"><condition pos:start="77:30" pos:end="77:49"><expr pos:start="77:30" pos:end="77:47"><name pos:start="77:30" pos:end="77:36">command</name> <operator pos:start="77:38" pos:end="77:39">==</operator> <name pos:start="77:41" pos:end="77:47">FN_QLPC</name></expr> ?</condition><then pos:start="77:51" pos:end="77:63"> <expr pos:start="77:51" pos:end="77:63"><name pos:start="77:51" pos:end="77:63"><name pos:start="77:51" pos:end="77:51">s</name><operator pos:start="77:52" pos:end="77:53">-&gt;</operator><name pos:start="77:54" pos:end="77:63">lpcqoffset</name></name></expr> </then><else pos:start="77:65" pos:end="77:67">: <expr pos:start="77:67" pos:end="77:67"><literal type="number" pos:start="77:67" pos:end="77:67">0</literal></expr></else></ternary><operator pos:start="77:68" pos:end="77:68">)</operator></expr> </then><else pos:start="77:70" pos:end="77:78">: <expr pos:start="77:72" pos:end="77:78"><name pos:start="77:72" pos:end="77:78">coffset</name></expr></else></ternary></expr>;</expr_stmt>

    <for pos:start="79:5" pos:end="91:5">for <control pos:start="79:9" pos:end="79:38">(<init pos:start="79:10" pos:end="79:15"><expr pos:start="79:10" pos:end="79:14"><name pos:start="79:10" pos:end="79:10">i</name> <operator pos:start="79:12" pos:end="79:12">=</operator> <literal type="number" pos:start="79:14" pos:end="79:14">0</literal></expr>;</init> <condition pos:start="79:17" pos:end="79:33"><expr pos:start="79:17" pos:end="79:32"><name pos:start="79:17" pos:end="79:17">i</name> <operator pos:start="79:19" pos:end="79:19">&lt;</operator> <name pos:start="79:21" pos:end="79:32"><name pos:start="79:21" pos:end="79:21">s</name><operator pos:start="79:22" pos:end="79:23">-&gt;</operator><name pos:start="79:24" pos:end="79:32">blocksize</name></name></expr>;</condition> <incr pos:start="79:35" pos:end="79:37"><expr pos:start="79:35" pos:end="79:37"><name pos:start="79:35" pos:end="79:35">i</name><operator pos:start="79:36" pos:end="79:37">++</operator></expr></incr>)</control> <block pos:start="79:40" pos:end="91:5">{<block_content pos:start="81:9" pos:end="89:49">

        <expr_stmt pos:start="81:9" pos:end="81:23"><expr pos:start="81:9" pos:end="81:22"><name pos:start="81:9" pos:end="81:11">sum</name> <operator pos:start="81:13" pos:end="81:13">=</operator> <name pos:start="81:15" pos:end="81:22">init_sum</name></expr>;</expr_stmt>

        <for pos:start="83:9" pos:end="85:62">for <control pos:start="83:13" pos:end="83:40">(<init pos:start="83:14" pos:end="83:19"><expr pos:start="83:14" pos:end="83:18"><name pos:start="83:14" pos:end="83:14">j</name> <operator pos:start="83:16" pos:end="83:16">=</operator> <literal type="number" pos:start="83:18" pos:end="83:18">0</literal></expr>;</init> <condition pos:start="83:21" pos:end="83:35"><expr pos:start="83:21" pos:end="83:34"><name pos:start="83:21" pos:end="83:21">j</name> <operator pos:start="83:23" pos:end="83:23">&lt;</operator> <name pos:start="83:25" pos:end="83:34">pred_order</name></expr>;</condition> <incr pos:start="83:37" pos:end="83:39"><expr pos:start="83:37" pos:end="83:39"><name pos:start="83:37" pos:end="83:37">j</name><operator pos:start="83:38" pos:end="83:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="85:13" pos:end="85:62"><block_content pos:start="85:13" pos:end="85:62">

            <expr_stmt pos:start="85:13" pos:end="85:62"><expr pos:start="85:13" pos:end="85:61"><name pos:start="85:13" pos:end="85:15">sum</name> <operator pos:start="85:17" pos:end="85:18">+=</operator> <name pos:start="85:20" pos:end="85:28"><name pos:start="85:20" pos:end="85:25">coeffs</name><index pos:start="85:26" pos:end="85:28">[<expr pos:start="85:27" pos:end="85:27"><name pos:start="85:27" pos:end="85:27">j</name></expr>]</index></name> <operator pos:start="85:30" pos:end="85:30">*</operator> <name pos:start="85:32" pos:end="85:61"><name pos:start="85:32" pos:end="85:32">s</name><operator pos:start="85:33" pos:end="85:34">-&gt;</operator><name pos:start="85:35" pos:end="85:41">decoded</name><index pos:start="85:42" pos:end="85:50">[<expr pos:start="85:43" pos:end="85:49"><name pos:start="85:43" pos:end="85:49">channel</name></expr>]</index><index pos:start="85:51" pos:end="85:61">[<expr pos:start="85:52" pos:end="85:60"><name pos:start="85:52" pos:end="85:52">i</name> <operator pos:start="85:54" pos:end="85:54">-</operator> <name pos:start="85:56" pos:end="85:56">j</name> <operator pos:start="85:58" pos:end="85:58">-</operator> <literal type="number" pos:start="85:60" pos:end="85:60">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt pos:start="87:9" pos:end="89:49"><expr pos:start="87:9" pos:end="89:48"><name pos:start="87:9" pos:end="87:30"><name pos:start="87:9" pos:end="87:9">s</name><operator pos:start="87:10" pos:end="87:11">-&gt;</operator><name pos:start="87:12" pos:end="87:18">decoded</name><index pos:start="87:19" pos:end="87:27">[<expr pos:start="87:20" pos:end="87:26"><name pos:start="87:20" pos:end="87:26">channel</name></expr>]</index><index pos:start="87:28" pos:end="87:30">[<expr pos:start="87:29" pos:end="87:29"><name pos:start="87:29" pos:end="87:29">i</name></expr>]</index></name> <operator pos:start="87:32" pos:end="87:32">=</operator> <call pos:start="87:34" pos:end="87:77"><name pos:start="87:34" pos:end="87:54">get_sr_golomb_shorten</name><argument_list pos:start="87:55" pos:end="87:77">(<argument pos:start="87:56" pos:end="87:61"><expr pos:start="87:56" pos:end="87:61"><operator pos:start="87:56" pos:end="87:56">&amp;</operator><name pos:start="87:57" pos:end="87:61"><name pos:start="87:57" pos:end="87:57">s</name><operator pos:start="87:58" pos:end="87:59">-&gt;</operator><name pos:start="87:60" pos:end="87:61">gb</name></name></expr></argument>, <argument pos:start="87:64" pos:end="87:76"><expr pos:start="87:64" pos:end="87:76"><name pos:start="87:64" pos:end="87:76">residual_size</name></expr></argument>)</argument_list></call> <operator pos:start="87:79" pos:end="87:79">+</operator>

                                 <operator pos:start="89:34" pos:end="89:34">(</operator><name pos:start="89:35" pos:end="89:37">sum</name> <operator pos:start="89:39" pos:end="89:40">&gt;&gt;</operator> <name pos:start="89:42" pos:end="89:47">qshift</name><operator pos:start="89:48" pos:end="89:48">)</operator></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="95:5" pos:end="95:39">/* add offset to current samples */</comment>

    <if_stmt pos:start="97:5" pos:end="101:46"><if pos:start="97:5" pos:end="101:46">if <condition pos:start="97:8" pos:end="97:38">(<expr pos:start="97:9" pos:end="97:37"><name pos:start="97:9" pos:end="97:15">command</name> <operator pos:start="97:17" pos:end="97:18">==</operator> <name pos:start="97:20" pos:end="97:26">FN_QLPC</name> <operator pos:start="97:28" pos:end="97:29">&amp;&amp;</operator> <name pos:start="97:31" pos:end="97:37">coffset</name></expr>)</condition><block type="pseudo" pos:start="99:9" pos:end="101:46"><block_content pos:start="99:9" pos:end="101:46">

        <for pos:start="99:9" pos:end="101:46">for <control pos:start="99:13" pos:end="99:42">(<init pos:start="99:14" pos:end="99:19"><expr pos:start="99:14" pos:end="99:18"><name pos:start="99:14" pos:end="99:14">i</name> <operator pos:start="99:16" pos:end="99:16">=</operator> <literal type="number" pos:start="99:18" pos:end="99:18">0</literal></expr>;</init> <condition pos:start="99:21" pos:end="99:37"><expr pos:start="99:21" pos:end="99:36"><name pos:start="99:21" pos:end="99:21">i</name> <operator pos:start="99:23" pos:end="99:23">&lt;</operator> <name pos:start="99:25" pos:end="99:36"><name pos:start="99:25" pos:end="99:25">s</name><operator pos:start="99:26" pos:end="99:27">-&gt;</operator><name pos:start="99:28" pos:end="99:36">blocksize</name></name></expr>;</condition> <incr pos:start="99:39" pos:end="99:41"><expr pos:start="99:39" pos:end="99:41"><name pos:start="99:39" pos:end="99:39">i</name><operator pos:start="99:40" pos:end="99:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="101:13" pos:end="101:46"><block_content pos:start="101:13" pos:end="101:46">

            <expr_stmt pos:start="101:13" pos:end="101:46"><expr pos:start="101:13" pos:end="101:45"><name pos:start="101:13" pos:end="101:34"><name pos:start="101:13" pos:end="101:13">s</name><operator pos:start="101:14" pos:end="101:15">-&gt;</operator><name pos:start="101:16" pos:end="101:22">decoded</name><index pos:start="101:23" pos:end="101:31">[<expr pos:start="101:24" pos:end="101:30"><name pos:start="101:24" pos:end="101:30">channel</name></expr>]</index><index pos:start="101:32" pos:end="101:34">[<expr pos:start="101:33" pos:end="101:33"><name pos:start="101:33" pos:end="101:33">i</name></expr>]</index></name> <operator pos:start="101:36" pos:end="101:37">+=</operator> <name pos:start="101:39" pos:end="101:45">coffset</name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>



    <return pos:start="105:5" pos:end="105:13">return <expr pos:start="105:12" pos:end="105:12"><literal type="number" pos:start="105:12" pos:end="105:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
