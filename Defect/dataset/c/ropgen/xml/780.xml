<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/780.c" pos:tabs="8"><function pos:start="1:1" pos:end="281:20"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">decode_frame</name><parameter_list pos:start="1:24" pos:end="7:40">(<parameter pos:start="1:25" pos:end="1:45"><decl pos:start="1:25" pos:end="1:45"><type pos:start="1:25" pos:end="1:45"><name pos:start="1:25" pos:end="1:38">AVCodecContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:45">avctx</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:34"><decl pos:start="3:25" pos:end="3:34"><type pos:start="3:25" pos:end="3:34"><name pos:start="3:25" pos:end="3:28">void</name> <modifier pos:start="3:30" pos:end="3:30">*</modifier></type><name pos:start="3:31" pos:end="3:34">data</name></decl></parameter>,

                        <parameter pos:start="5:25" pos:end="5:38"><decl pos:start="5:25" pos:end="5:38"><type pos:start="5:25" pos:end="5:38"><name pos:start="5:25" pos:end="5:27">int</name> <modifier pos:start="5:29" pos:end="5:29">*</modifier></type><name pos:start="5:30" pos:end="5:38">data_size</name></decl></parameter>,

                        <parameter pos:start="7:25" pos:end="7:39"><decl pos:start="7:25" pos:end="7:39"><type pos:start="7:25" pos:end="7:39"><name pos:start="7:25" pos:end="7:32">AVPacket</name> <modifier pos:start="7:34" pos:end="7:34">*</modifier></type><name pos:start="7:35" pos:end="7:39">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="281:20">{<block_content pos:start="11:5" pos:end="281:20">

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:19"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:17">uint8_t</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:22">buf</name> <init pos:start="11:24" pos:end="11:36">= <expr pos:start="11:26" pos:end="11:36"><name pos:start="11:26" pos:end="11:36"><name pos:start="11:26" pos:end="11:30">avpkt</name><operator pos:start="11:31" pos:end="11:32">-&gt;</operator><name pos:start="11:33" pos:end="11:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:55"><decl pos:start="13:5" pos:end="13:54"><type pos:start="13:5" pos:end="13:19"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:17">uint8_t</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:26">buf_end</name> <init pos:start="13:28" pos:end="13:54">= <expr pos:start="13:30" pos:end="13:54"><name pos:start="13:30" pos:end="13:40"><name pos:start="13:30" pos:end="13:34">avpkt</name><operator pos:start="13:35" pos:end="13:36">-&gt;</operator><name pos:start="13:37" pos:end="13:40">data</name></name> <operator pos:start="13:42" pos:end="13:42">+</operator> <name pos:start="13:44" pos:end="13:54"><name pos:start="13:44" pos:end="13:48">avpkt</name><operator pos:start="13:49" pos:end="13:50">-&gt;</operator><name pos:start="13:51" pos:end="13:54">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:37"><decl pos:start="15:5" pos:end="15:36"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:16">buf_size</name>       <init pos:start="15:24" pos:end="15:36">= <expr pos:start="15:26" pos:end="15:36"><name pos:start="15:26" pos:end="15:36"><name pos:start="15:26" pos:end="15:30">avpkt</name><operator pos:start="15:31" pos:end="15:32">-&gt;</operator><name pos:start="15:33" pos:end="15:36">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:43"><decl pos:start="17:5" pos:end="17:42"><type pos:start="17:5" pos:end="17:21"><name pos:start="17:5" pos:end="17:14">DPXContext</name> <modifier pos:start="17:16" pos:end="17:16">*</modifier><specifier pos:start="17:17" pos:end="17:21">const</specifier></type> <name pos:start="17:23" pos:end="17:23">s</name> <init pos:start="17:25" pos:end="17:42">= <expr pos:start="17:27" pos:end="17:42"><name pos:start="17:27" pos:end="17:42"><name pos:start="17:27" pos:end="17:31">avctx</name><operator pos:start="17:32" pos:end="17:33">-&gt;</operator><name pos:start="17:34" pos:end="17:42">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:29"><decl pos:start="19:5" pos:end="19:28"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:11">AVFrame</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:20">picture</name>  <init pos:start="19:23" pos:end="19:28">= <expr pos:start="19:25" pos:end="19:28"><name pos:start="19:25" pos:end="19:28">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:35"><decl pos:start="21:5" pos:end="21:34"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:11">AVFrame</name> <modifier pos:start="21:13" pos:end="21:13">*</modifier><specifier pos:start="21:14" pos:end="21:18">const</specifier></type> <name pos:start="21:20" pos:end="21:20">p</name> <init pos:start="21:22" pos:end="21:34">= <expr pos:start="21:24" pos:end="21:34"><operator pos:start="21:24" pos:end="21:24">&amp;</operator><name pos:start="21:25" pos:end="21:34"><name pos:start="21:25" pos:end="21:25">s</name><operator pos:start="21:26" pos:end="21:27">-&gt;</operator><name pos:start="21:28" pos:end="21:34">picture</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:17"><decl pos:start="23:5" pos:end="23:16"><type pos:start="23:5" pos:end="23:13"><name pos:start="23:5" pos:end="23:11">uint8_t</name> <modifier pos:start="23:13" pos:end="23:13">*</modifier></type><name pos:start="23:14" pos:end="23:16">ptr</name></decl>;</decl_stmt>



    <decl_stmt pos:start="27:5" pos:end="27:34"><decl pos:start="27:5" pos:end="27:17"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:17">magic_num</name></decl>, <decl pos:start="27:20" pos:end="27:25"><type ref="prev" pos:start="27:5" pos:end="27:7"/><name pos:start="27:20" pos:end="27:25">offset</name></decl>, <decl pos:start="27:28" pos:end="27:33"><type ref="prev" pos:start="27:5" pos:end="27:7"/><name pos:start="27:28" pos:end="27:33">endian</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:13"><decl pos:start="29:5" pos:end="29:9"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:9">x</name></decl>, <decl pos:start="29:12" pos:end="29:12"><type ref="prev" pos:start="29:5" pos:end="29:7"/><name pos:start="29:12" pos:end="29:12">y</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:99"><decl pos:start="31:5" pos:end="31:9"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:9">w</name></decl>, <decl pos:start="31:12" pos:end="31:12"><type ref="prev" pos:start="31:5" pos:end="31:7"/><name pos:start="31:12" pos:end="31:12">h</name></decl>, <decl pos:start="31:15" pos:end="31:20"><type ref="prev" pos:start="31:5" pos:end="31:7"/><name pos:start="31:15" pos:end="31:20">stride</name></decl>, <decl pos:start="31:23" pos:end="31:36"><type ref="prev" pos:start="31:5" pos:end="31:7"/><name pos:start="31:23" pos:end="31:36">bits_per_color</name></decl>, <decl pos:start="31:39" pos:end="31:48"><type ref="prev" pos:start="31:5" pos:end="31:7"/><name pos:start="31:39" pos:end="31:48">descriptor</name></decl>, <decl pos:start="31:51" pos:end="31:58"><type ref="prev" pos:start="31:5" pos:end="31:7"/><name pos:start="31:51" pos:end="31:58">elements</name></decl>, <decl pos:start="31:61" pos:end="31:78"><type ref="prev" pos:start="31:5" pos:end="31:7"/><name pos:start="31:61" pos:end="31:78">target_packet_size</name></decl>, <decl pos:start="31:81" pos:end="31:98"><type ref="prev" pos:start="31:5" pos:end="31:7"/><name pos:start="31:81" pos:end="31:98">source_packet_size</name></decl>;</decl_stmt>



    <decl_stmt pos:start="35:5" pos:end="35:27"><decl pos:start="35:5" pos:end="35:26"><type pos:start="35:5" pos:end="35:16"><name pos:start="35:5" pos:end="35:12">unsigned</name> <name pos:start="35:14" pos:end="35:16">int</name></type> <name pos:start="35:18" pos:end="35:26">rgbBuffer</name></decl>;</decl_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:29"><expr pos:start="39:5" pos:end="39:28"><name pos:start="39:5" pos:end="39:13">magic_num</name> <operator pos:start="39:15" pos:end="39:15">=</operator> <call pos:start="39:17" pos:end="39:28"><name pos:start="39:17" pos:end="39:23">AV_RB32</name><argument_list pos:start="39:24" pos:end="39:28">(<argument pos:start="39:25" pos:end="39:27"><expr pos:start="39:25" pos:end="39:27"><name pos:start="39:25" pos:end="39:27">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:13"><expr pos:start="41:5" pos:end="41:12"><name pos:start="41:5" pos:end="41:7">buf</name> <operator pos:start="41:9" pos:end="41:10">+=</operator> <literal type="number" pos:start="41:12" pos:end="41:12">4</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="45:5" pos:end="47:61">/* Check if the files "magic number" is "SDPX" which means it uses

     * big-endian or XPDS which is for little-endian files */</comment>

    <if_stmt pos:start="49:5" pos:end="281:20"><if pos:start="49:5" pos:end="53:5">if <condition pos:start="49:8" pos:end="49:37">(<expr pos:start="49:9" pos:end="49:36"><name pos:start="49:9" pos:end="49:17">magic_num</name> <operator pos:start="49:19" pos:end="49:20">==</operator> <call pos:start="49:22" pos:end="49:36"><name pos:start="49:22" pos:end="49:28">AV_RL32</name><argument_list pos:start="49:29" pos:end="49:36">(<argument pos:start="49:30" pos:end="49:35"><expr pos:start="49:30" pos:end="49:35"><literal type="string" pos:start="49:30" pos:end="49:35">"SDPX"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:39" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:19">

        <expr_stmt pos:start="51:9" pos:end="51:19"><expr pos:start="51:9" pos:end="51:18"><name pos:start="51:9" pos:end="51:14">endian</name> <operator pos:start="51:16" pos:end="51:16">=</operator> <literal type="number" pos:start="51:18" pos:end="51:18">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="53:7" pos:end="57:5">else if <condition pos:start="53:15" pos:end="53:44">(<expr pos:start="53:16" pos:end="53:43"><name pos:start="53:16" pos:end="53:24">magic_num</name> <operator pos:start="53:26" pos:end="53:27">==</operator> <call pos:start="53:29" pos:end="53:43"><name pos:start="53:29" pos:end="53:35">AV_RB32</name><argument_list pos:start="53:36" pos:end="53:43">(<argument pos:start="53:37" pos:end="53:42"><expr pos:start="53:37" pos:end="53:42"><literal type="string" pos:start="53:37" pos:end="53:42">"SDPX"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="53:46" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:19">

        <expr_stmt pos:start="55:9" pos:end="55:19"><expr pos:start="55:9" pos:end="55:18"><name pos:start="55:9" pos:end="55:14">endian</name> <operator pos:start="55:16" pos:end="55:16">=</operator> <literal type="number" pos:start="55:18" pos:end="55:18">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="57:7" pos:end="281:20">else <block pos:start="57:12" pos:end="281:20">{<block_content pos:start="59:9" pos:end="281:20">

        <expr_stmt pos:start="59:9" pos:end="59:62"><expr pos:start="59:9" pos:end="59:61"><call pos:start="59:9" pos:end="59:61"><name pos:start="59:9" pos:end="59:14">av_log</name><argument_list pos:start="59:15" pos:end="59:61">(<argument pos:start="59:16" pos:end="59:20"><expr pos:start="59:16" pos:end="59:20"><name pos:start="59:16" pos:end="59:20">avctx</name></expr></argument>, <argument pos:start="59:23" pos:end="59:34"><expr pos:start="59:23" pos:end="59:34"><name pos:start="59:23" pos:end="59:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="59:37" pos:end="59:60"><expr pos:start="59:37" pos:end="59:60"><literal type="string" pos:start="59:37" pos:end="59:60">"DPX marker not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <expr_stmt pos:start="65:5" pos:end="65:34"><expr pos:start="65:5" pos:end="65:33"><name pos:start="65:5" pos:end="65:10">offset</name> <operator pos:start="65:12" pos:end="65:12">=</operator> <call pos:start="65:14" pos:end="65:33"><name pos:start="65:14" pos:end="65:19">read32</name><argument_list pos:start="65:20" pos:end="65:33">(<argument pos:start="65:21" pos:end="65:24"><expr pos:start="65:21" pos:end="65:24"><operator pos:start="65:21" pos:end="65:21">&amp;</operator><name pos:start="65:22" pos:end="65:24">buf</name></expr></argument>, <argument pos:start="65:27" pos:end="65:32"><expr pos:start="65:27" pos:end="65:32"><name pos:start="65:27" pos:end="65:32">endian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:start="67:5" pos:end="67:53">// Need to end in 0x304 offset from start of file</comment>

    <expr_stmt pos:start="69:5" pos:end="69:30"><expr pos:start="69:5" pos:end="69:29"><name pos:start="69:5" pos:end="69:7">buf</name> <operator pos:start="69:9" pos:end="69:9">=</operator> <name pos:start="69:11" pos:end="69:21"><name pos:start="69:11" pos:end="69:15">avpkt</name><operator pos:start="69:16" pos:end="69:17">-&gt;</operator><name pos:start="69:18" pos:end="69:21">data</name></name> <operator pos:start="69:23" pos:end="69:23">+</operator> <literal type="number" pos:start="69:25" pos:end="69:29">0x304</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:29"><expr pos:start="71:5" pos:end="71:28"><name pos:start="71:5" pos:end="71:5">w</name> <operator pos:start="71:7" pos:end="71:7">=</operator> <call pos:start="71:9" pos:end="71:28"><name pos:start="71:9" pos:end="71:14">read32</name><argument_list pos:start="71:15" pos:end="71:28">(<argument pos:start="71:16" pos:end="71:19"><expr pos:start="71:16" pos:end="71:19"><operator pos:start="71:16" pos:end="71:16">&amp;</operator><name pos:start="71:17" pos:end="71:19">buf</name></expr></argument>, <argument pos:start="71:22" pos:end="71:27"><expr pos:start="71:22" pos:end="71:27"><name pos:start="71:22" pos:end="71:27">endian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:29"><expr pos:start="73:5" pos:end="73:28"><name pos:start="73:5" pos:end="73:5">h</name> <operator pos:start="73:7" pos:end="73:7">=</operator> <call pos:start="73:9" pos:end="73:28"><name pos:start="73:9" pos:end="73:14">read32</name><argument_list pos:start="73:15" pos:end="73:28">(<argument pos:start="73:16" pos:end="73:19"><expr pos:start="73:16" pos:end="73:19"><operator pos:start="73:16" pos:end="73:16">&amp;</operator><name pos:start="73:17" pos:end="73:19">buf</name></expr></argument>, <argument pos:start="73:22" pos:end="73:27"><expr pos:start="73:22" pos:end="73:27"><name pos:start="73:22" pos:end="73:27">endian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="77:5" pos:end="77:50">// Need to end in 0x320 to read the descriptor</comment>

    <expr_stmt pos:start="79:5" pos:end="79:14"><expr pos:start="79:5" pos:end="79:13"><name pos:start="79:5" pos:end="79:7">buf</name> <operator pos:start="79:9" pos:end="79:10">+=</operator> <literal type="number" pos:start="79:12" pos:end="79:13">20</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:24"><expr pos:start="81:5" pos:end="81:23"><name pos:start="81:5" pos:end="81:14">descriptor</name> <operator pos:start="81:16" pos:end="81:16">=</operator> <name pos:start="81:18" pos:end="81:23"><name pos:start="81:18" pos:end="81:20">buf</name><index pos:start="81:21" pos:end="81:23">[<expr pos:start="81:22" pos:end="81:22"><literal type="number" pos:start="81:22" pos:end="81:22">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <comment type="line" pos:start="85:5" pos:end="85:54">// Need to end in 0x323 to read the bits per color</comment>

    <expr_stmt pos:start="87:5" pos:end="87:13"><expr pos:start="87:5" pos:end="87:12"><name pos:start="87:5" pos:end="87:7">buf</name> <operator pos:start="87:9" pos:end="87:10">+=</operator> <literal type="number" pos:start="87:12" pos:end="87:12">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="91:28"><expr pos:start="89:5" pos:end="91:27"><name pos:start="89:5" pos:end="89:30"><name pos:start="89:5" pos:end="89:9">avctx</name><operator pos:start="89:10" pos:end="89:11">-&gt;</operator><name pos:start="89:12" pos:end="89:30">bits_per_raw_sample</name></name> <operator pos:start="89:32" pos:end="89:32">=</operator>

    <name pos:start="91:5" pos:end="91:18">bits_per_color</name> <operator pos:start="91:20" pos:end="91:20">=</operator> <name pos:start="91:22" pos:end="91:27"><name pos:start="91:22" pos:end="91:24">buf</name><index pos:start="91:25" pos:end="91:27">[<expr pos:start="91:26" pos:end="91:26"><literal type="number" pos:start="91:26" pos:end="91:26">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <switch pos:start="95:5" pos:end="281:20">switch <condition pos:start="95:12" pos:end="95:23">(<expr pos:start="95:13" pos:end="95:22"><name pos:start="95:13" pos:end="95:22">descriptor</name></expr>)</condition> <block pos:start="95:25" pos:end="281:20">{<block_content pos:start="97:9" pos:end="281:20">

        <case pos:start="97:9" pos:end="97:16">case <expr pos:start="97:14" pos:end="97:15"><literal type="number" pos:start="97:14" pos:end="97:15">51</literal></expr>:</case> <comment type="line" pos:start="97:18" pos:end="97:24">// RGBA</comment>

            <expr_stmt pos:start="99:13" pos:end="99:25"><expr pos:start="99:13" pos:end="99:24"><name pos:start="99:13" pos:end="99:20">elements</name> <operator pos:start="99:22" pos:end="99:22">=</operator> <literal type="number" pos:start="99:24" pos:end="99:24">4</literal></expr>;</expr_stmt>

            <break pos:start="101:13" pos:end="101:18">break;</break>

        <case pos:start="103:9" pos:end="103:16">case <expr pos:start="103:14" pos:end="103:15"><literal type="number" pos:start="103:14" pos:end="103:15">50</literal></expr>:</case> <comment type="line" pos:start="103:18" pos:end="103:23">// RGB</comment>

            <expr_stmt pos:start="105:13" pos:end="105:25"><expr pos:start="105:13" pos:end="105:24"><name pos:start="105:13" pos:end="105:20">elements</name> <operator pos:start="105:22" pos:end="105:22">=</operator> <literal type="number" pos:start="105:24" pos:end="105:24">3</literal></expr>;</expr_stmt>

            <break pos:start="107:13" pos:end="107:18">break;</break>

        <default pos:start="109:9" pos:end="109:16">default:</default>

            <expr_stmt pos:start="111:13" pos:end="111:83"><expr pos:start="111:13" pos:end="111:82"><call pos:start="111:13" pos:end="111:82"><name pos:start="111:13" pos:end="111:18">av_log</name><argument_list pos:start="111:19" pos:end="111:82">(<argument pos:start="111:20" pos:end="111:24"><expr pos:start="111:20" pos:end="111:24"><name pos:start="111:20" pos:end="111:24">avctx</name></expr></argument>, <argument pos:start="111:27" pos:end="111:38"><expr pos:start="111:27" pos:end="111:38"><name pos:start="111:27" pos:end="111:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="111:41" pos:end="111:69"><expr pos:start="111:41" pos:end="111:69"><literal type="string" pos:start="111:41" pos:end="111:69">"Unsupported descriptor %d\n"</literal></expr></argument>, <argument pos:start="111:72" pos:end="111:81"><expr pos:start="111:72" pos:end="111:81"><name pos:start="111:72" pos:end="111:81">descriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <switch pos:start="117:5" pos:end="281:20">switch <condition pos:start="117:12" pos:end="117:27">(<expr pos:start="117:13" pos:end="117:26"><name pos:start="117:13" pos:end="117:26">bits_per_color</name></expr>)</condition> <block pos:start="117:29" pos:end="281:20">{<block_content pos:start="119:9" pos:end="281:20">

        <case pos:start="119:9" pos:end="119:15">case <expr pos:start="119:14" pos:end="119:14"><literal type="number" pos:start="119:14" pos:end="119:14">8</literal></expr>:</case>

            <if_stmt pos:start="121:13" pos:end="281:20"><if pos:start="121:13" pos:end="125:13">if <condition pos:start="121:16" pos:end="121:30">(<expr pos:start="121:17" pos:end="121:29"><name pos:start="121:17" pos:end="121:24">elements</name> <operator pos:start="121:26" pos:end="121:27">==</operator> <literal type="number" pos:start="121:29" pos:end="121:29">4</literal></expr>)</condition> <block pos:start="121:32" pos:end="125:13">{<block_content pos:start="123:17" pos:end="123:46">

                <expr_stmt pos:start="123:17" pos:end="123:46"><expr pos:start="123:17" pos:end="123:45"><name pos:start="123:17" pos:end="123:30"><name pos:start="123:17" pos:end="123:21">avctx</name><operator pos:start="123:22" pos:end="123:23">-&gt;</operator><name pos:start="123:24" pos:end="123:30">pix_fmt</name></name> <operator pos:start="123:32" pos:end="123:32">=</operator> <name pos:start="123:34" pos:end="123:45">PIX_FMT_RGBA</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="125:15" pos:end="281:20">else <block pos:start="125:20" pos:end="281:20">{<block_content pos:start="127:17" pos:end="281:20">

                <expr_stmt pos:start="127:17" pos:end="127:47"><expr pos:start="127:17" pos:end="127:46"><name pos:start="127:17" pos:end="127:30"><name pos:start="127:17" pos:end="127:21">avctx</name><operator pos:start="127:22" pos:end="127:23">-&gt;</operator><name pos:start="127:24" pos:end="127:30">pix_fmt</name></name> <operator pos:start="127:32" pos:end="127:32">=</operator> <name pos:start="127:34" pos:end="127:46">PIX_FMT_RGB24</name></expr>;</expr_stmt>


            <expr_stmt pos:start="130:13" pos:end="130:42"><expr pos:start="130:13" pos:end="130:41"><name pos:start="130:13" pos:end="130:30">source_packet_size</name> <operator pos:start="130:32" pos:end="130:32">=</operator> <name pos:start="130:34" pos:end="130:41">elements</name></expr>;</expr_stmt>

            <expr_stmt pos:start="132:13" pos:end="132:42"><expr pos:start="132:13" pos:end="132:41"><name pos:start="132:13" pos:end="132:30">target_packet_size</name> <operator pos:start="132:32" pos:end="132:32">=</operator> <name pos:start="132:34" pos:end="132:41">elements</name></expr>;</expr_stmt>

            <break pos:start="134:13" pos:end="134:18">break;</break>

        <case pos:start="136:9" pos:end="136:16">case <expr pos:start="136:14" pos:end="136:15"><literal type="number" pos:start="136:14" pos:end="136:15">10</literal></expr>:</case>

            <expr_stmt pos:start="138:13" pos:end="138:43"><expr pos:start="138:13" pos:end="138:42"><name pos:start="138:13" pos:end="138:26"><name pos:start="138:13" pos:end="138:17">avctx</name><operator pos:start="138:18" pos:end="138:19">-&gt;</operator><name pos:start="138:20" pos:end="138:26">pix_fmt</name></name> <operator pos:start="138:28" pos:end="138:28">=</operator> <name pos:start="138:30" pos:end="138:42">PIX_FMT_RGB48</name></expr>;</expr_stmt>

            <expr_stmt pos:start="140:13" pos:end="140:35"><expr pos:start="140:13" pos:end="140:34"><name pos:start="140:13" pos:end="140:30">target_packet_size</name> <operator pos:start="140:32" pos:end="140:32">=</operator> <literal type="number" pos:start="140:34" pos:end="140:34">6</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="142:13" pos:end="142:46"><expr pos:start="142:13" pos:end="142:45"><name pos:start="142:13" pos:end="142:30">source_packet_size</name> <operator pos:start="142:32" pos:end="142:32">=</operator> <name pos:start="142:34" pos:end="142:41">elements</name> <operator pos:start="142:43" pos:end="142:43">*</operator> <literal type="number" pos:start="142:45" pos:end="142:45">2</literal></expr>;</expr_stmt>

            <break pos:start="144:13" pos:end="144:18">break;</break>

        <case pos:start="146:9" pos:end="146:16">case <expr pos:start="146:14" pos:end="146:15"><literal type="number" pos:start="146:14" pos:end="146:15">12</literal></expr>:</case>

        <case pos:start="148:9" pos:end="148:16">case <expr pos:start="148:14" pos:end="148:15"><literal type="number" pos:start="148:14" pos:end="148:15">16</literal></expr>:</case>

            <if_stmt pos:start="150:13" pos:end="281:20"><if pos:start="150:13" pos:end="154:13">if <condition pos:start="150:16" pos:end="150:23">(<expr pos:start="150:17" pos:end="150:22"><name pos:start="150:17" pos:end="150:22">endian</name></expr>)</condition> <block pos:start="150:25" pos:end="154:13">{<block_content pos:start="152:17" pos:end="152:49">

                <expr_stmt pos:start="152:17" pos:end="152:49"><expr pos:start="152:17" pos:end="152:48"><name pos:start="152:17" pos:end="152:30"><name pos:start="152:17" pos:end="152:21">avctx</name><operator pos:start="152:22" pos:end="152:23">-&gt;</operator><name pos:start="152:24" pos:end="152:30">pix_fmt</name></name> <operator pos:start="152:32" pos:end="152:32">=</operator> <name pos:start="152:34" pos:end="152:48">PIX_FMT_RGB48BE</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="154:15" pos:end="281:20">else <block pos:start="154:20" pos:end="281:20">{<block_content pos:start="156:17" pos:end="281:20">

                <expr_stmt pos:start="156:17" pos:end="156:49"><expr pos:start="156:17" pos:end="156:48"><name pos:start="156:17" pos:end="156:30"><name pos:start="156:17" pos:end="156:21">avctx</name><operator pos:start="156:22" pos:end="156:23">-&gt;</operator><name pos:start="156:24" pos:end="156:30">pix_fmt</name></name> <operator pos:start="156:32" pos:end="156:32">=</operator> <name pos:start="156:34" pos:end="156:48">PIX_FMT_RGB48LE</name></expr>;</expr_stmt>


            <expr_stmt pos:start="159:13" pos:end="159:35"><expr pos:start="159:13" pos:end="159:34"><name pos:start="159:13" pos:end="159:30">target_packet_size</name> <operator pos:start="159:32" pos:end="159:32">=</operator> <literal type="number" pos:start="159:34" pos:end="159:34">6</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:46"><expr pos:start="161:13" pos:end="161:45"><name pos:start="161:13" pos:end="161:30">source_packet_size</name> <operator pos:start="161:32" pos:end="161:32">=</operator> <name pos:start="161:34" pos:end="161:41">elements</name> <operator pos:start="161:43" pos:end="161:43">*</operator> <literal type="number" pos:start="161:45" pos:end="161:45">2</literal></expr>;</expr_stmt>

            <break pos:start="163:13" pos:end="163:18">break;</break>

        <default pos:start="165:9" pos:end="165:16">default:</default>

            <expr_stmt pos:start="167:13" pos:end="167:90"><expr pos:start="167:13" pos:end="167:89"><call pos:start="167:13" pos:end="167:89"><name pos:start="167:13" pos:end="167:18">av_log</name><argument_list pos:start="167:19" pos:end="167:89">(<argument pos:start="167:20" pos:end="167:24"><expr pos:start="167:20" pos:end="167:24"><name pos:start="167:20" pos:end="167:24">avctx</name></expr></argument>, <argument pos:start="167:27" pos:end="167:38"><expr pos:start="167:27" pos:end="167:38"><name pos:start="167:27" pos:end="167:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="167:41" pos:end="167:72"><expr pos:start="167:41" pos:end="167:72"><literal type="string" pos:start="167:41" pos:end="167:72">"Unsupported color depth : %d\n"</literal></expr></argument>, <argument pos:start="167:75" pos:end="167:88"><expr pos:start="167:75" pos:end="167:88"><name pos:start="167:75" pos:end="167:88">bits_per_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <if_stmt pos:start="173:5" pos:end="175:50"><if pos:start="173:5" pos:end="175:50">if <condition pos:start="173:8" pos:end="173:27">(<expr pos:start="173:9" pos:end="173:26"><name pos:start="173:9" pos:end="173:26"><name pos:start="173:9" pos:end="173:9">s</name><operator pos:start="173:10" pos:end="173:11">-&gt;</operator><name pos:start="173:12" pos:end="173:18">picture</name><operator pos:start="173:19" pos:end="173:19">.</operator><name pos:start="173:20" pos:end="173:23">data</name><index pos:start="173:24" pos:end="173:26">[<expr pos:start="173:25" pos:end="173:25"><literal type="number" pos:start="173:25" pos:end="173:25">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="175:9" pos:end="175:50"><block_content pos:start="175:9" pos:end="175:50">

        <expr_stmt pos:start="175:9" pos:end="175:50"><expr pos:start="175:9" pos:end="175:49"><call pos:start="175:9" pos:end="175:49"><name pos:start="175:9" pos:end="175:29"><name pos:start="175:9" pos:end="175:13">avctx</name><operator pos:start="175:14" pos:end="175:15">-&gt;</operator><name pos:start="175:16" pos:end="175:29">release_buffer</name></name><argument_list pos:start="175:30" pos:end="175:49">(<argument pos:start="175:31" pos:end="175:35"><expr pos:start="175:31" pos:end="175:35"><name pos:start="175:31" pos:end="175:35">avctx</name></expr></argument>, <argument pos:start="175:38" pos:end="175:48"><expr pos:start="175:38" pos:end="175:48"><operator pos:start="175:38" pos:end="175:38">&amp;</operator><name pos:start="175:39" pos:end="175:48"><name pos:start="175:39" pos:end="175:39">s</name><operator pos:start="175:40" pos:end="175:41">-&gt;</operator><name pos:start="175:42" pos:end="175:48">picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="177:5" pos:end="182:44"><if pos:start="177:5" pos:end="182:44">if <condition pos:start="177:8" pos:end="177:44">(<expr pos:start="177:9" pos:end="177:43"><call pos:start="177:9" pos:end="177:43"><name pos:start="177:9" pos:end="177:27">av_image_check_size</name><argument_list pos:start="177:28" pos:end="177:43">(<argument pos:start="177:29" pos:end="177:29"><expr pos:start="177:29" pos:end="177:29"><name pos:start="177:29" pos:end="177:29">w</name></expr></argument>, <argument pos:start="177:32" pos:end="177:32"><expr pos:start="177:32" pos:end="177:32"><name pos:start="177:32" pos:end="177:32">h</name></expr></argument>, <argument pos:start="177:35" pos:end="177:35"><expr pos:start="177:35" pos:end="177:35"><literal type="number" pos:start="177:35" pos:end="177:35">0</literal></expr></argument>, <argument pos:start="177:38" pos:end="177:42"><expr pos:start="177:38" pos:end="177:42"><name pos:start="177:38" pos:end="177:42">avctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="180:5" pos:end="182:44"><block_content pos:start="180:5" pos:end="182:44">


    <if_stmt pos:start="180:5" pos:end="182:44"><if pos:start="180:5" pos:end="182:44">if <condition pos:start="180:8" pos:end="180:48">(<expr pos:start="180:9" pos:end="180:47"><name pos:start="180:9" pos:end="180:9">w</name> <operator pos:start="180:11" pos:end="180:12">!=</operator> <name pos:start="180:14" pos:end="180:25"><name pos:start="180:14" pos:end="180:18">avctx</name><operator pos:start="180:19" pos:end="180:20">-&gt;</operator><name pos:start="180:21" pos:end="180:25">width</name></name> <operator pos:start="180:27" pos:end="180:28">||</operator> <name pos:start="180:30" pos:end="180:30">h</name> <operator pos:start="180:32" pos:end="180:33">!=</operator> <name pos:start="180:35" pos:end="180:47"><name pos:start="180:35" pos:end="180:39">avctx</name><operator pos:start="180:40" pos:end="180:41">-&gt;</operator><name pos:start="180:42" pos:end="180:47">height</name></name></expr>)</condition><block type="pseudo" pos:start="182:9" pos:end="182:44"><block_content pos:start="182:9" pos:end="182:44">

        <expr_stmt pos:start="182:9" pos:end="182:44"><expr pos:start="182:9" pos:end="182:43"><call pos:start="182:9" pos:end="182:43"><name pos:start="182:9" pos:end="182:30">avcodec_set_dimensions</name><argument_list pos:start="182:31" pos:end="182:43">(<argument pos:start="182:32" pos:end="182:36"><expr pos:start="182:32" pos:end="182:36"><name pos:start="182:32" pos:end="182:36">avctx</name></expr></argument>, <argument pos:start="182:39" pos:end="182:39"><expr pos:start="182:39" pos:end="182:39"><name pos:start="182:39" pos:end="182:39">w</name></expr></argument>, <argument pos:start="182:42" pos:end="182:42"><expr pos:start="182:42" pos:end="182:42"><name pos:start="182:42" pos:end="182:42">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="184:5" pos:end="281:20"><if pos:start="184:5" pos:end="281:20">if <condition pos:start="184:8" pos:end="184:40">(<expr pos:start="184:9" pos:end="184:39"><call pos:start="184:9" pos:end="184:35"><name pos:start="184:9" pos:end="184:25"><name pos:start="184:9" pos:end="184:13">avctx</name><operator pos:start="184:14" pos:end="184:15">-&gt;</operator><name pos:start="184:16" pos:end="184:25">get_buffer</name></name><argument_list pos:start="184:26" pos:end="184:35">(<argument pos:start="184:27" pos:end="184:31"><expr pos:start="184:27" pos:end="184:31"><name pos:start="184:27" pos:end="184:31">avctx</name></expr></argument>, <argument pos:start="184:34" pos:end="184:34"><expr pos:start="184:34" pos:end="184:34"><name pos:start="184:34" pos:end="184:34">p</name></expr></argument>)</argument_list></call> <operator pos:start="184:37" pos:end="184:37">&lt;</operator> <literal type="number" pos:start="184:39" pos:end="184:39">0</literal></expr>)</condition> <block pos:start="184:42" pos:end="281:20">{<block_content pos:start="186:9" pos:end="281:20">

        <expr_stmt pos:start="186:9" pos:end="186:61"><expr pos:start="186:9" pos:end="186:60"><call pos:start="186:9" pos:end="186:60"><name pos:start="186:9" pos:end="186:14">av_log</name><argument_list pos:start="186:15" pos:end="186:60">(<argument pos:start="186:16" pos:end="186:20"><expr pos:start="186:16" pos:end="186:20"><name pos:start="186:16" pos:end="186:20">avctx</name></expr></argument>, <argument pos:start="186:23" pos:end="186:34"><expr pos:start="186:23" pos:end="186:34"><name pos:start="186:23" pos:end="186:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="186:37" pos:end="186:59"><expr pos:start="186:37" pos:end="186:59"><literal type="string" pos:start="186:37" pos:end="186:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <comment type="line" pos:start="192:5" pos:end="192:48">// Move pointer to offset from start of file</comment>

    <expr_stmt pos:start="194:5" pos:end="194:32"><expr pos:start="194:5" pos:end="194:31"><name pos:start="194:5" pos:end="194:7">buf</name> <operator pos:start="194:9" pos:end="194:9">=</operator>  <name pos:start="194:12" pos:end="194:22"><name pos:start="194:12" pos:end="194:16">avpkt</name><operator pos:start="194:17" pos:end="194:18">-&gt;</operator><name pos:start="194:19" pos:end="194:22">data</name></name> <operator pos:start="194:24" pos:end="194:24">+</operator> <name pos:start="194:26" pos:end="194:31">offset</name></expr>;</expr_stmt>



    <expr_stmt pos:start="198:5" pos:end="198:24"><expr pos:start="198:5" pos:end="198:23"><name pos:start="198:5" pos:end="198:7">ptr</name>    <operator pos:start="198:12" pos:end="198:12">=</operator> <name pos:start="198:14" pos:end="198:23"><name pos:start="198:14" pos:end="198:14">p</name><operator pos:start="198:15" pos:end="198:16">-&gt;</operator><name pos:start="198:17" pos:end="198:20">data</name><index pos:start="198:21" pos:end="198:23">[<expr pos:start="198:22" pos:end="198:22"><literal type="number" pos:start="198:22" pos:end="198:22">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="200:5" pos:end="200:28"><expr pos:start="200:5" pos:end="200:27"><name pos:start="200:5" pos:end="200:10">stride</name> <operator pos:start="200:12" pos:end="200:12">=</operator> <name pos:start="200:14" pos:end="200:27"><name pos:start="200:14" pos:end="200:14">p</name><operator pos:start="200:15" pos:end="200:16">-&gt;</operator><name pos:start="200:17" pos:end="200:24">linesize</name><index pos:start="200:25" pos:end="200:27">[<expr pos:start="200:26" pos:end="200:26"><literal type="number" pos:start="200:26" pos:end="200:26">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <switch pos:start="204:5" pos:end="281:20">switch <condition pos:start="204:12" pos:end="204:27">(<expr pos:start="204:13" pos:end="204:26"><name pos:start="204:13" pos:end="204:26">bits_per_color</name></expr>)</condition> <block pos:start="204:29" pos:end="281:20">{<block_content pos:start="206:9" pos:end="281:20">

        <case pos:start="206:9" pos:end="206:16">case <expr pos:start="206:14" pos:end="206:15"><literal type="number" pos:start="206:14" pos:end="206:15">10</literal></expr>:</case>

            <for pos:start="208:13" pos:end="281:20">for <control pos:start="208:17" pos:end="208:47">(<init pos:start="208:18" pos:end="208:23"><expr pos:start="208:18" pos:end="208:22"><name pos:start="208:18" pos:end="208:18">x</name> <operator pos:start="208:20" pos:end="208:20">=</operator> <literal type="number" pos:start="208:22" pos:end="208:22">0</literal></expr>;</init> <condition pos:start="208:25" pos:end="208:42"><expr pos:start="208:25" pos:end="208:41"><name pos:start="208:25" pos:end="208:25">x</name> <operator pos:start="208:27" pos:end="208:27">&lt;</operator> <name pos:start="208:29" pos:end="208:41"><name pos:start="208:29" pos:end="208:33">avctx</name><operator pos:start="208:34" pos:end="208:35">-&gt;</operator><name pos:start="208:36" pos:end="208:41">height</name></name></expr>;</condition> <incr pos:start="208:44" pos:end="208:46"><expr pos:start="208:44" pos:end="208:46"><name pos:start="208:44" pos:end="208:44">x</name><operator pos:start="208:45" pos:end="208:46">++</operator></expr></incr>)</control> <block pos:start="208:49" pos:end="281:20">{<block_content pos:start="210:16" pos:end="281:20">

               <decl_stmt pos:start="210:16" pos:end="210:46"><decl pos:start="210:16" pos:end="210:45"><type pos:start="210:16" pos:end="210:25"><name pos:start="210:16" pos:end="210:23">uint16_t</name> <modifier pos:start="210:25" pos:end="210:25">*</modifier></type><name pos:start="210:26" pos:end="210:28">dst</name> <init pos:start="210:30" pos:end="210:45">= <expr pos:start="210:32" pos:end="210:45"><operator pos:start="210:32" pos:end="210:32">(</operator><name pos:start="210:33" pos:end="210:40">uint16_t</name><operator pos:start="210:41" pos:end="210:41">*</operator><operator pos:start="210:42" pos:end="210:42">)</operator><name pos:start="210:43" pos:end="210:45">ptr</name></expr></init></decl>;</decl_stmt>

               <for pos:start="212:16" pos:end="281:20">for <control pos:start="212:20" pos:end="212:49">(<init pos:start="212:21" pos:end="212:26"><expr pos:start="212:21" pos:end="212:25"><name pos:start="212:21" pos:end="212:21">y</name> <operator pos:start="212:23" pos:end="212:23">=</operator> <literal type="number" pos:start="212:25" pos:end="212:25">0</literal></expr>;</init> <condition pos:start="212:28" pos:end="212:44"><expr pos:start="212:28" pos:end="212:43"><name pos:start="212:28" pos:end="212:28">y</name> <operator pos:start="212:30" pos:end="212:30">&lt;</operator> <name pos:start="212:32" pos:end="212:43"><name pos:start="212:32" pos:end="212:36">avctx</name><operator pos:start="212:37" pos:end="212:38">-&gt;</operator><name pos:start="212:39" pos:end="212:43">width</name></name></expr>;</condition> <incr pos:start="212:46" pos:end="212:48"><expr pos:start="212:46" pos:end="212:48"><name pos:start="212:46" pos:end="212:46">y</name><operator pos:start="212:47" pos:end="212:48">++</operator></expr></incr>)</control> <block pos:start="212:51" pos:end="281:20">{<block_content pos:start="214:20" pos:end="281:20">

                   <expr_stmt pos:start="214:20" pos:end="214:52"><expr pos:start="214:20" pos:end="214:51"><name pos:start="214:20" pos:end="214:28">rgbBuffer</name> <operator pos:start="214:30" pos:end="214:30">=</operator> <call pos:start="214:32" pos:end="214:51"><name pos:start="214:32" pos:end="214:37">read32</name><argument_list pos:start="214:38" pos:end="214:51">(<argument pos:start="214:39" pos:end="214:42"><expr pos:start="214:39" pos:end="214:42"><operator pos:start="214:39" pos:end="214:39">&amp;</operator><name pos:start="214:40" pos:end="214:42">buf</name></expr></argument>, <argument pos:start="214:45" pos:end="214:50"><expr pos:start="214:45" pos:end="214:50"><name pos:start="214:45" pos:end="214:50">endian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                   <comment type="line" pos:start="216:20" pos:end="216:70">// Read out the 10-bit colors and convert to 16-bit</comment>

                   <expr_stmt pos:start="218:20" pos:end="218:56"><expr pos:start="218:20" pos:end="218:55"><operator pos:start="218:20" pos:end="218:20">*</operator><name pos:start="218:21" pos:end="218:23">dst</name><operator pos:start="218:24" pos:end="218:25">++</operator> <operator pos:start="218:27" pos:end="218:27">=</operator> <call pos:start="218:29" pos:end="218:55"><name pos:start="218:29" pos:end="218:38">make_16bit</name><argument_list pos:start="218:39" pos:end="218:55">(<argument pos:start="218:40" pos:end="218:54"><expr pos:start="218:40" pos:end="218:54"><name pos:start="218:40" pos:end="218:48">rgbBuffer</name> <operator pos:start="218:50" pos:end="218:51">&gt;&gt;</operator> <literal type="number" pos:start="218:53" pos:end="218:54">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                   <expr_stmt pos:start="220:20" pos:end="220:56"><expr pos:start="220:20" pos:end="220:55"><operator pos:start="220:20" pos:end="220:20">*</operator><name pos:start="220:21" pos:end="220:23">dst</name><operator pos:start="220:24" pos:end="220:25">++</operator> <operator pos:start="220:27" pos:end="220:27">=</operator> <call pos:start="220:29" pos:end="220:55"><name pos:start="220:29" pos:end="220:38">make_16bit</name><argument_list pos:start="220:39" pos:end="220:55">(<argument pos:start="220:40" pos:end="220:54"><expr pos:start="220:40" pos:end="220:54"><name pos:start="220:40" pos:end="220:48">rgbBuffer</name> <operator pos:start="220:50" pos:end="220:51">&gt;&gt;</operator>  <literal type="number" pos:start="220:54" pos:end="220:54">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                   <expr_stmt pos:start="222:20" pos:end="222:56"><expr pos:start="222:20" pos:end="222:55"><operator pos:start="222:20" pos:end="222:20">*</operator><name pos:start="222:21" pos:end="222:23">dst</name><operator pos:start="222:24" pos:end="222:25">++</operator> <operator pos:start="222:27" pos:end="222:27">=</operator> <call pos:start="222:29" pos:end="222:55"><name pos:start="222:29" pos:end="222:38">make_16bit</name><argument_list pos:start="222:39" pos:end="222:55">(<argument pos:start="222:40" pos:end="222:54"><expr pos:start="222:40" pos:end="222:54"><name pos:start="222:40" pos:end="222:48">rgbBuffer</name> <operator pos:start="222:50" pos:end="222:51">&lt;&lt;</operator>  <literal type="number" pos:start="222:54" pos:end="222:54">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


               <expr_stmt pos:start="225:16" pos:end="225:29"><expr pos:start="225:16" pos:end="225:28"><name pos:start="225:16" pos:end="225:18">ptr</name> <operator pos:start="225:20" pos:end="225:21">+=</operator> <name pos:start="225:23" pos:end="225:28">stride</name></expr>;</expr_stmt>


            <break pos:start="228:13" pos:end="228:18">break;</break>

        <case pos:start="230:9" pos:end="230:15">case <expr pos:start="230:14" pos:end="230:14"><literal type="number" pos:start="230:14" pos:end="230:14">8</literal></expr>:</case>

        <case pos:start="232:9" pos:end="232:16">case <expr pos:start="232:14" pos:end="232:15"><literal type="number" pos:start="232:14" pos:end="232:15">12</literal></expr>:</case> <comment type="line" pos:start="232:18" pos:end="232:42">// Treat 12-bit as 16-bit</comment>

        <case pos:start="234:9" pos:end="234:16">case <expr pos:start="234:14" pos:end="234:15"><literal type="number" pos:start="234:14" pos:end="234:15">16</literal></expr>:</case>





            <if_stmt pos:start="240:13" pos:end="281:20"><if pos:start="240:13" pos:end="281:20">if <condition pos:start="240:16" pos:end="240:57">(<expr pos:start="240:17" pos:end="240:56"><name pos:start="240:17" pos:end="240:34">source_packet_size</name> <operator pos:start="240:36" pos:end="240:37">==</operator> <name pos:start="240:39" pos:end="240:56">target_packet_size</name></expr>)</condition> <block pos:start="240:59" pos:end="281:20">{<block_content pos:start="242:17" pos:end="281:20">

                <for pos:start="242:17" pos:end="251:13">for <control pos:start="242:21" pos:end="242:51">(<init pos:start="242:22" pos:end="242:27"><expr pos:start="242:22" pos:end="242:26"><name pos:start="242:22" pos:end="242:22">x</name> <operator pos:start="242:24" pos:end="242:24">=</operator> <literal type="number" pos:start="242:26" pos:end="242:26">0</literal></expr>;</init> <condition pos:start="242:29" pos:end="242:46"><expr pos:start="242:29" pos:end="242:45"><name pos:start="242:29" pos:end="242:29">x</name> <operator pos:start="242:31" pos:end="242:31">&lt;</operator> <name pos:start="242:33" pos:end="242:45"><name pos:start="242:33" pos:end="242:37">avctx</name><operator pos:start="242:38" pos:end="242:39">-&gt;</operator><name pos:start="242:40" pos:end="242:45">height</name></name></expr>;</condition> <incr pos:start="242:48" pos:end="242:50"><expr pos:start="242:48" pos:end="242:50"><name pos:start="242:48" pos:end="242:48">x</name><operator pos:start="242:49" pos:end="242:50">++</operator></expr></incr>)</control> <block pos:start="242:53" pos:end="251:13">{<block_content pos:start="244:21" pos:end="248:59">

                    <expr_stmt pos:start="244:21" pos:end="244:70"><expr pos:start="244:21" pos:end="244:69"><call pos:start="244:21" pos:end="244:69"><name pos:start="244:21" pos:end="244:26">memcpy</name><argument_list pos:start="244:27" pos:end="244:69">(<argument pos:start="244:28" pos:end="244:30"><expr pos:start="244:28" pos:end="244:30"><name pos:start="244:28" pos:end="244:30">ptr</name></expr></argument>, <argument pos:start="244:33" pos:end="244:35"><expr pos:start="244:33" pos:end="244:35"><name pos:start="244:33" pos:end="244:35">buf</name></expr></argument>, <argument pos:start="244:38" pos:end="244:68"><expr pos:start="244:38" pos:end="244:68"><name pos:start="244:38" pos:end="244:55">target_packet_size</name><operator pos:start="244:56" pos:end="244:56">*</operator><name pos:start="244:57" pos:end="244:68"><name pos:start="244:57" pos:end="244:61">avctx</name><operator pos:start="244:62" pos:end="244:63">-&gt;</operator><name pos:start="244:64" pos:end="244:68">width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="246:21" pos:end="246:34"><expr pos:start="246:21" pos:end="246:33"><name pos:start="246:21" pos:end="246:23">ptr</name> <operator pos:start="246:25" pos:end="246:26">+=</operator> <name pos:start="246:28" pos:end="246:33">stride</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="248:21" pos:end="248:59"><expr pos:start="248:21" pos:end="248:58"><name pos:start="248:21" pos:end="248:23">buf</name> <operator pos:start="248:25" pos:end="248:26">+=</operator> <name pos:start="248:28" pos:end="248:45">source_packet_size</name><operator pos:start="248:46" pos:end="248:46">*</operator><name pos:start="248:47" pos:end="248:58"><name pos:start="248:47" pos:end="248:51">avctx</name><operator pos:start="248:52" pos:end="248:53">-&gt;</operator><name pos:start="248:54" pos:end="248:58">width</name></name></expr>;</expr_stmt>


            </block_content>}</block></for> <if_stmt pos:start="251:15" pos:end="281:20"><else pos:start="251:15" pos:end="281:20">else <block pos:start="251:20" pos:end="281:20">{<block_content pos:start="253:17" pos:end="281:20">

                <for pos:start="253:17" pos:end="281:20">for <control pos:start="253:21" pos:end="253:51">(<init pos:start="253:22" pos:end="253:27"><expr pos:start="253:22" pos:end="253:26"><name pos:start="253:22" pos:end="253:22">x</name> <operator pos:start="253:24" pos:end="253:24">=</operator> <literal type="number" pos:start="253:26" pos:end="253:26">0</literal></expr>;</init> <condition pos:start="253:29" pos:end="253:46"><expr pos:start="253:29" pos:end="253:45"><name pos:start="253:29" pos:end="253:29">x</name> <operator pos:start="253:31" pos:end="253:31">&lt;</operator> <name pos:start="253:33" pos:end="253:45"><name pos:start="253:33" pos:end="253:37">avctx</name><operator pos:start="253:38" pos:end="253:39">-&gt;</operator><name pos:start="253:40" pos:end="253:45">height</name></name></expr>;</condition> <incr pos:start="253:48" pos:end="253:50"><expr pos:start="253:48" pos:end="253:50"><name pos:start="253:48" pos:end="253:48">x</name><operator pos:start="253:49" pos:end="253:50">++</operator></expr></incr>)</control> <block pos:start="253:53" pos:end="281:20">{<block_content pos:start="255:21" pos:end="281:20">

                    <decl_stmt pos:start="255:21" pos:end="255:39"><decl pos:start="255:21" pos:end="255:38"><type pos:start="255:21" pos:end="255:29"><name pos:start="255:21" pos:end="255:27">uint8_t</name> <modifier pos:start="255:29" pos:end="255:29">*</modifier></type><name pos:start="255:30" pos:end="255:32">dst</name> <init pos:start="255:34" pos:end="255:38">= <expr pos:start="255:36" pos:end="255:38"><name pos:start="255:36" pos:end="255:38">ptr</name></expr></init></decl>;</decl_stmt>

                    <for pos:start="257:21" pos:end="281:20">for <control pos:start="257:25" pos:end="257:54">(<init pos:start="257:26" pos:end="257:31"><expr pos:start="257:26" pos:end="257:30"><name pos:start="257:26" pos:end="257:26">y</name> <operator pos:start="257:28" pos:end="257:28">=</operator> <literal type="number" pos:start="257:30" pos:end="257:30">0</literal></expr>;</init> <condition pos:start="257:33" pos:end="257:49"><expr pos:start="257:33" pos:end="257:48"><name pos:start="257:33" pos:end="257:33">y</name> <operator pos:start="257:35" pos:end="257:35">&lt;</operator> <name pos:start="257:37" pos:end="257:48"><name pos:start="257:37" pos:end="257:41">avctx</name><operator pos:start="257:42" pos:end="257:43">-&gt;</operator><name pos:start="257:44" pos:end="257:48">width</name></name></expr>;</condition> <incr pos:start="257:51" pos:end="257:53"><expr pos:start="257:51" pos:end="257:53"><name pos:start="257:51" pos:end="257:51">y</name><operator pos:start="257:52" pos:end="257:53">++</operator></expr></incr>)</control> <block pos:start="257:56" pos:end="281:20">{<block_content pos:start="259:25" pos:end="281:20">

                        <expr_stmt pos:start="259:25" pos:end="259:61"><expr pos:start="259:25" pos:end="259:60"><call pos:start="259:25" pos:end="259:60"><name pos:start="259:25" pos:end="259:30">memcpy</name><argument_list pos:start="259:31" pos:end="259:60">(<argument pos:start="259:32" pos:end="259:34"><expr pos:start="259:32" pos:end="259:34"><name pos:start="259:32" pos:end="259:34">dst</name></expr></argument>, <argument pos:start="259:37" pos:end="259:39"><expr pos:start="259:37" pos:end="259:39"><name pos:start="259:37" pos:end="259:39">buf</name></expr></argument>, <argument pos:start="259:42" pos:end="259:59"><expr pos:start="259:42" pos:end="259:59"><name pos:start="259:42" pos:end="259:59">target_packet_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="261:25" pos:end="261:50"><expr pos:start="261:25" pos:end="261:49"><name pos:start="261:25" pos:end="261:27">dst</name> <operator pos:start="261:29" pos:end="261:30">+=</operator> <name pos:start="261:32" pos:end="261:49">target_packet_size</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="263:25" pos:end="263:50"><expr pos:start="263:25" pos:end="263:49"><name pos:start="263:25" pos:end="263:27">buf</name> <operator pos:start="263:29" pos:end="263:30">+=</operator> <name pos:start="263:32" pos:end="263:49">source_packet_size</name></expr>;</expr_stmt>


                    <expr_stmt pos:start="266:21" pos:end="266:34"><expr pos:start="266:21" pos:end="266:33"><name pos:start="266:21" pos:end="266:23">ptr</name> <operator pos:start="266:25" pos:end="266:26">+=</operator> <name pos:start="266:28" pos:end="266:33">stride</name></expr>;</expr_stmt>



            <break pos:start="270:13" pos:end="270:18">break;</break>




    <expr_stmt pos:start="275:5" pos:end="275:28"><expr pos:start="275:5" pos:end="275:27"><operator pos:start="275:5" pos:end="275:5">*</operator><name pos:start="275:6" pos:end="275:12">picture</name>   <operator pos:start="275:16" pos:end="275:16">=</operator> <name pos:start="275:18" pos:end="275:27"><name pos:start="275:18" pos:end="275:18">s</name><operator pos:start="275:19" pos:end="275:20">-&gt;</operator><name pos:start="275:21" pos:end="275:27">picture</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="277:5" pos:end="277:35"><expr pos:start="277:5" pos:end="277:34"><operator pos:start="277:5" pos:end="277:5">*</operator><name pos:start="277:6" pos:end="277:14">data_size</name> <operator pos:start="277:16" pos:end="277:16">=</operator> <sizeof pos:start="277:18" pos:end="277:34">sizeof<argument_list pos:start="277:24" pos:end="277:34">(<argument pos:start="277:25" pos:end="277:33"><expr pos:start="277:25" pos:end="277:33"><name pos:start="277:25" pos:end="277:33">AVPicture</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



    <return pos:start="281:5" pos:end="281:20">return <expr pos:start="281:12" pos:end="281:19"><name pos:start="281:12" pos:end="281:19">buf_size</name></expr>;</return></block_content></block></for></block_content></block></for></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></switch></block_content></block></switch></block_content></block></else></if_stmt></block_content></block></function>
</unit>
