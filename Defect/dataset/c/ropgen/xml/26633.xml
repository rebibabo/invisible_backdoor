<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26633.c" pos:tabs="8"><function pos:start="1:1" pos:end="301:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">decode_pic</name><parameter_list pos:start="1:22" pos:end="1:36">(<parameter pos:start="1:23" pos:end="1:35"><decl pos:start="1:23" pos:end="1:35"><type pos:start="1:23" pos:end="1:34"><name pos:start="1:23" pos:end="1:32">AVSContext</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:35">h</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="301:1">{<block_content pos:start="5:5" pos:end="299:13">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:18">skip_count</name>    <init pos:start="7:23" pos:end="7:26">= <expr pos:start="7:25" pos:end="7:26"><operator pos:start="7:25" pos:end="7:25">-</operator><literal type="number" pos:start="7:26" pos:end="7:26">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:8">enum</name> <name pos:start="9:10" pos:end="9:16">cavs_mb</name></name></type> <name pos:start="9:18" pos:end="9:24">mb_type</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:19">(<expr pos:start="13:9" pos:end="13:18"><operator pos:start="13:9" pos:end="13:9">!</operator><name pos:start="13:10" pos:end="13:18"><name pos:start="13:10" pos:end="13:10">h</name><operator pos:start="13:11" pos:end="13:12">-&gt;</operator><name pos:start="13:13" pos:end="13:18">top_qp</name></name></expr>)</condition> <block pos:start="13:21" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:35">

        <expr_stmt pos:start="15:9" pos:end="15:75"><expr pos:start="15:9" pos:end="15:74"><call pos:start="15:9" pos:end="15:74"><name pos:start="15:9" pos:end="15:14">av_log</name><argument_list pos:start="15:15" pos:end="15:74">(<argument pos:start="15:16" pos:end="15:23"><expr pos:start="15:16" pos:end="15:23"><name pos:start="15:16" pos:end="15:23"><name pos:start="15:16" pos:end="15:16">h</name><operator pos:start="15:17" pos:end="15:18">-&gt;</operator><name pos:start="15:19" pos:end="15:23">avctx</name></name></expr></argument>, <argument pos:start="15:26" pos:end="15:37"><expr pos:start="15:26" pos:end="15:37"><name pos:start="15:26" pos:end="15:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="15:40" pos:end="15:73"><expr pos:start="15:40" pos:end="15:73"><literal type="string" pos:start="15:40" pos:end="15:73">"No sequence header decoded yet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:35">return <expr pos:start="17:16" pos:end="17:34"><name pos:start="17:16" pos:end="17:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:29"><expr pos:start="23:5" pos:end="23:28"><call pos:start="23:5" pos:end="23:28"><name pos:start="23:5" pos:end="23:18">av_frame_unref</name><argument_list pos:start="23:19" pos:end="23:28">(<argument pos:start="23:20" pos:end="23:27"><expr pos:start="23:20" pos:end="23:27"><name pos:start="23:20" pos:end="23:27"><name pos:start="23:20" pos:end="23:20">h</name><operator pos:start="23:21" pos:end="23:22">-&gt;</operator><name pos:start="23:23" pos:end="23:25">cur</name><operator pos:start="23:26" pos:end="23:26">.</operator><name pos:start="23:27" pos:end="23:27">f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:26"><expr pos:start="27:5" pos:end="27:25"><call pos:start="27:5" pos:end="27:25"><name pos:start="27:5" pos:end="27:13">skip_bits</name><argument_list pos:start="27:14" pos:end="27:25">(<argument pos:start="27:15" pos:end="27:20"><expr pos:start="27:15" pos:end="27:20"><operator pos:start="27:15" pos:end="27:15">&amp;</operator><name pos:start="27:16" pos:end="27:20"><name pos:start="27:16" pos:end="27:16">h</name><operator pos:start="27:17" pos:end="27:18">-&gt;</operator><name pos:start="27:19" pos:end="27:20">gb</name></name></expr></argument>, <argument pos:start="27:23" pos:end="27:24"><expr pos:start="27:23" pos:end="27:24"><literal type="number" pos:start="27:23" pos:end="27:24">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:start="27:27" pos:end="27:37">//bbv_dwlay</comment>

    <if_stmt pos:start="29:5" pos:end="75:5"><if pos:start="29:5" pos:end="49:5">if <condition pos:start="29:8" pos:end="29:36">(<expr pos:start="29:9" pos:end="29:35"><name pos:start="29:9" pos:end="29:14"><name pos:start="29:9" pos:end="29:9">h</name><operator pos:start="29:10" pos:end="29:11">-&gt;</operator><name pos:start="29:12" pos:end="29:14">stc</name></name> <operator pos:start="29:16" pos:end="29:17">==</operator> <name pos:start="29:19" pos:end="29:35">PIC_PB_START_CODE</name></expr>)</condition> <block pos:start="29:38" pos:end="49:5">{<block_content pos:start="31:9" pos:end="47:39">

        <expr_stmt pos:start="31:9" pos:end="31:70"><expr pos:start="31:9" pos:end="31:69"><name pos:start="31:9" pos:end="31:27"><name pos:start="31:9" pos:end="31:9">h</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:14">cur</name><operator pos:start="31:15" pos:end="31:15">.</operator><name pos:start="31:16" pos:end="31:16">f</name><operator pos:start="31:17" pos:end="31:18">-&gt;</operator><name pos:start="31:19" pos:end="31:27">pict_type</name></name> <operator pos:start="31:29" pos:end="31:29">=</operator> <call pos:start="31:31" pos:end="31:49"><name pos:start="31:31" pos:end="31:38">get_bits</name><argument_list pos:start="31:39" pos:end="31:49">(<argument pos:start="31:40" pos:end="31:45"><expr pos:start="31:40" pos:end="31:45"><operator pos:start="31:40" pos:end="31:40">&amp;</operator><name pos:start="31:41" pos:end="31:45"><name pos:start="31:41" pos:end="31:41">h</name><operator pos:start="31:42" pos:end="31:43">-&gt;</operator><name pos:start="31:44" pos:end="31:45">gb</name></name></expr></argument>, <argument pos:start="31:48" pos:end="31:48"><expr pos:start="31:48" pos:end="31:48"><literal type="number" pos:start="31:48" pos:end="31:48">2</literal></expr></argument>)</argument_list></call> <operator pos:start="31:51" pos:end="31:51">+</operator> <name pos:start="31:53" pos:end="31:69">AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="39:9"><if pos:start="33:9" pos:end="39:9">if <condition pos:start="33:12" pos:end="33:52">(<expr pos:start="33:13" pos:end="33:51"><name pos:start="33:13" pos:end="33:31"><name pos:start="33:13" pos:end="33:13">h</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:18">cur</name><operator pos:start="33:19" pos:end="33:19">.</operator><name pos:start="33:20" pos:end="33:20">f</name><operator pos:start="33:21" pos:end="33:22">-&gt;</operator><name pos:start="33:23" pos:end="33:31">pict_type</name></name> <operator pos:start="33:33" pos:end="33:33">&gt;</operator> <name pos:start="33:35" pos:end="33:51">AV_PICTURE_TYPE_B</name></expr>)</condition> <block pos:start="33:54" pos:end="39:9">{<block_content pos:start="35:13" pos:end="37:39">

            <expr_stmt pos:start="35:13" pos:end="35:69"><expr pos:start="35:13" pos:end="35:68"><call pos:start="35:13" pos:end="35:68"><name pos:start="35:13" pos:end="35:18">av_log</name><argument_list pos:start="35:19" pos:end="35:68">(<argument pos:start="35:20" pos:end="35:27"><expr pos:start="35:20" pos:end="35:27"><name pos:start="35:20" pos:end="35:27"><name pos:start="35:20" pos:end="35:20">h</name><operator pos:start="35:21" pos:end="35:22">-&gt;</operator><name pos:start="35:23" pos:end="35:27">avctx</name></name></expr></argument>, <argument pos:start="35:30" pos:end="35:41"><expr pos:start="35:30" pos:end="35:41"><name pos:start="35:30" pos:end="35:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="35:44" pos:end="35:67"><expr pos:start="35:44" pos:end="35:67"><literal type="string" pos:start="35:44" pos:end="35:67">"illegal picture type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="37:13" pos:end="37:39">return <expr pos:start="37:20" pos:end="37:38"><name pos:start="37:20" pos:end="37:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="41:9" pos:end="41:60">/* make sure we have the reference frames we need */</comment>

        <if_stmt pos:start="43:9" pos:end="47:39"><if pos:start="43:9" pos:end="47:39">if <condition pos:start="43:12" pos:end="45:79">(<expr pos:start="43:13" pos:end="45:78"><operator pos:start="43:13" pos:end="43:13">!</operator><name pos:start="43:14" pos:end="43:22"><name pos:start="43:14" pos:end="43:14">h</name><operator pos:start="43:15" pos:end="43:16">-&gt;</operator><name pos:start="43:17" pos:end="43:19">DPB</name><index pos:start="43:20" pos:end="43:22">[<expr pos:start="43:21" pos:end="43:21"><literal type="number" pos:start="43:21" pos:end="43:21">0</literal></expr>]</index></name><operator pos:start="43:23" pos:end="43:23">.</operator><name pos:start="43:24" pos:end="43:33"><name pos:start="43:24" pos:end="43:24">f</name><operator pos:start="43:25" pos:end="43:26">-&gt;</operator><name pos:start="43:27" pos:end="43:30">data</name><index pos:start="43:31" pos:end="43:33">[<expr pos:start="43:32" pos:end="43:32"><literal type="number" pos:start="43:32" pos:end="43:32">0</literal></expr>]</index></name> <operator pos:start="43:35" pos:end="43:36">||</operator>

           <operator pos:start="45:12" pos:end="45:12">(</operator><operator pos:start="45:13" pos:end="45:13">!</operator><name pos:start="45:14" pos:end="45:22"><name pos:start="45:14" pos:end="45:14">h</name><operator pos:start="45:15" pos:end="45:16">-&gt;</operator><name pos:start="45:17" pos:end="45:19">DPB</name><index pos:start="45:20" pos:end="45:22">[<expr pos:start="45:21" pos:end="45:21"><literal type="number" pos:start="45:21" pos:end="45:21">1</literal></expr>]</index></name><operator pos:start="45:23" pos:end="45:23">.</operator><name pos:start="45:24" pos:end="45:33"><name pos:start="45:24" pos:end="45:24">f</name><operator pos:start="45:25" pos:end="45:26">-&gt;</operator><name pos:start="45:27" pos:end="45:30">data</name><index pos:start="45:31" pos:end="45:33">[<expr pos:start="45:32" pos:end="45:32"><literal type="number" pos:start="45:32" pos:end="45:32">0</literal></expr>]</index></name> <operator pos:start="45:35" pos:end="45:36">&amp;&amp;</operator> <name pos:start="45:38" pos:end="45:56"><name pos:start="45:38" pos:end="45:38">h</name><operator pos:start="45:39" pos:end="45:40">-&gt;</operator><name pos:start="45:41" pos:end="45:43">cur</name><operator pos:start="45:44" pos:end="45:44">.</operator><name pos:start="45:45" pos:end="45:45">f</name><operator pos:start="45:46" pos:end="45:47">-&gt;</operator><name pos:start="45:48" pos:end="45:56">pict_type</name></name> <operator pos:start="45:58" pos:end="45:59">==</operator> <name pos:start="45:61" pos:end="45:77">AV_PICTURE_TYPE_B</name><operator pos:start="45:78" pos:end="45:78">)</operator></expr>)</condition><block type="pseudo" pos:start="47:13" pos:end="47:39"><block_content pos:start="47:13" pos:end="47:39">

            <return pos:start="47:13" pos:end="47:39">return <expr pos:start="47:20" pos:end="47:38"><name pos:start="47:20" pos:end="47:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="49:7" pos:end="75:5">else <block pos:start="49:12" pos:end="75:5">{<block_content pos:start="51:9" pos:end="73:33">

        <expr_stmt pos:start="51:9" pos:end="51:48"><expr pos:start="51:9" pos:end="51:47"><name pos:start="51:9" pos:end="51:27"><name pos:start="51:9" pos:end="51:9">h</name><operator pos:start="51:10" pos:end="51:11">-&gt;</operator><name pos:start="51:12" pos:end="51:14">cur</name><operator pos:start="51:15" pos:end="51:15">.</operator><name pos:start="51:16" pos:end="51:16">f</name><operator pos:start="51:17" pos:end="51:18">-&gt;</operator><name pos:start="51:19" pos:end="51:27">pict_type</name></name> <operator pos:start="51:29" pos:end="51:29">=</operator> <name pos:start="51:31" pos:end="51:47">AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="55:34"><if pos:start="53:9" pos:end="55:34">if <condition pos:start="53:12" pos:end="53:30">(<expr pos:start="53:13" pos:end="53:29"><call pos:start="53:13" pos:end="53:29"><name pos:start="53:13" pos:end="53:21">get_bits1</name><argument_list pos:start="53:22" pos:end="53:29">(<argument pos:start="53:23" pos:end="53:28"><expr pos:start="53:23" pos:end="53:28"><operator pos:start="53:23" pos:end="53:23">&amp;</operator><name pos:start="53:24" pos:end="53:28"><name pos:start="53:24" pos:end="53:24">h</name><operator pos:start="53:25" pos:end="53:26">-&gt;</operator><name pos:start="53:27" pos:end="53:28">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="55:13" pos:end="55:34"><block_content pos:start="55:13" pos:end="55:34">

            <expr_stmt pos:start="55:13" pos:end="55:34"><expr pos:start="55:13" pos:end="55:33"><call pos:start="55:13" pos:end="55:33"><name pos:start="55:13" pos:end="55:21">skip_bits</name><argument_list pos:start="55:22" pos:end="55:33">(<argument pos:start="55:23" pos:end="55:28"><expr pos:start="55:23" pos:end="55:28"><operator pos:start="55:23" pos:end="55:23">&amp;</operator><name pos:start="55:24" pos:end="55:28"><name pos:start="55:24" pos:end="55:24">h</name><operator pos:start="55:25" pos:end="55:26">-&gt;</operator><name pos:start="55:27" pos:end="55:28">gb</name></name></expr></argument>, <argument pos:start="55:31" pos:end="55:32"><expr pos:start="55:31" pos:end="55:32"><literal type="number" pos:start="55:31" pos:end="55:32">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt><comment type="line" pos:start="55:35" pos:end="55:45">//time_code</comment>

        <comment type="block" pos:start="57:9" pos:end="59:56">/* old sample clips were all progressive and no low_delay,

           bump stream revision if detected otherwise */</comment>

        <if_stmt pos:start="61:9" pos:end="69:35"><if pos:start="61:9" pos:end="63:35">if <condition pos:start="61:12" pos:end="61:56">(<expr pos:start="61:13" pos:end="61:55"><name pos:start="61:13" pos:end="61:24"><name pos:start="61:13" pos:end="61:13">h</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:24">low_delay</name></name> <operator pos:start="61:26" pos:end="61:27">||</operator> <operator pos:start="61:29" pos:end="61:29">!</operator><operator pos:start="61:30" pos:end="61:30">(</operator><call pos:start="61:31" pos:end="61:50"><name pos:start="61:31" pos:end="61:39">show_bits</name><argument_list pos:start="61:40" pos:end="61:50">(<argument pos:start="61:41" pos:end="61:46"><expr pos:start="61:41" pos:end="61:46"><operator pos:start="61:41" pos:end="61:41">&amp;</operator><name pos:start="61:42" pos:end="61:46"><name pos:start="61:42" pos:end="61:42">h</name><operator pos:start="61:43" pos:end="61:44">-&gt;</operator><name pos:start="61:45" pos:end="61:46">gb</name></name></expr></argument>, <argument pos:start="61:49" pos:end="61:49"><expr pos:start="61:49" pos:end="61:49"><literal type="number" pos:start="61:49" pos:end="61:49">9</literal></expr></argument>)</argument_list></call> <operator pos:start="61:52" pos:end="61:52">&amp;</operator> <literal type="number" pos:start="61:54" pos:end="61:54">1</literal><operator pos:start="61:55" pos:end="61:55">)</operator></expr>)</condition><block type="pseudo" pos:start="63:13" pos:end="63:35"><block_content pos:start="63:13" pos:end="63:35">

            <expr_stmt pos:start="63:13" pos:end="63:35"><expr pos:start="63:13" pos:end="63:34"><name pos:start="63:13" pos:end="63:30"><name pos:start="63:13" pos:end="63:13">h</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:30">stream_revision</name></name> <operator pos:start="63:32" pos:end="63:32">=</operator> <literal type="number" pos:start="63:34" pos:end="63:34">1</literal></expr>;</expr_stmt></block_content></block></if>

        <comment type="block" pos:start="65:9" pos:end="65:67">/* similarly test top_field_first and repeat_first_field */</comment>

        <if type="elseif" pos:start="67:9" pos:end="69:35">else if <condition pos:start="67:17" pos:end="67:43">(<expr pos:start="67:18" pos:end="67:42"><call pos:start="67:18" pos:end="67:38"><name pos:start="67:18" pos:end="67:26">show_bits</name><argument_list pos:start="67:27" pos:end="67:38">(<argument pos:start="67:28" pos:end="67:33"><expr pos:start="67:28" pos:end="67:33"><operator pos:start="67:28" pos:end="67:28">&amp;</operator><name pos:start="67:29" pos:end="67:33"><name pos:start="67:29" pos:end="67:29">h</name><operator pos:start="67:30" pos:end="67:31">-&gt;</operator><name pos:start="67:32" pos:end="67:33">gb</name></name></expr></argument>, <argument pos:start="67:36" pos:end="67:37"><expr pos:start="67:36" pos:end="67:37"><literal type="number" pos:start="67:36" pos:end="67:37">11</literal></expr></argument>)</argument_list></call> <operator pos:start="67:40" pos:end="67:40">&amp;</operator> <literal type="number" pos:start="67:42" pos:end="67:42">3</literal></expr>)</condition><block type="pseudo" pos:start="69:13" pos:end="69:35"><block_content pos:start="69:13" pos:end="69:35">

            <expr_stmt pos:start="69:13" pos:end="69:35"><expr pos:start="69:13" pos:end="69:34"><name pos:start="69:13" pos:end="69:30"><name pos:start="69:13" pos:end="69:13">h</name><operator pos:start="69:14" pos:end="69:15">-&gt;</operator><name pos:start="69:16" pos:end="69:30">stream_revision</name></name> <operator pos:start="69:32" pos:end="69:32">=</operator> <literal type="number" pos:start="69:34" pos:end="69:34">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="71:9" pos:end="73:33"><if pos:start="71:9" pos:end="73:33">if <condition pos:start="71:12" pos:end="71:35">(<expr pos:start="71:13" pos:end="71:34"><name pos:start="71:13" pos:end="71:30"><name pos:start="71:13" pos:end="71:13">h</name><operator pos:start="71:14" pos:end="71:15">-&gt;</operator><name pos:start="71:16" pos:end="71:30">stream_revision</name></name> <operator pos:start="71:32" pos:end="71:32">&gt;</operator> <literal type="number" pos:start="71:34" pos:end="71:34">0</literal></expr>)</condition><block type="pseudo" pos:start="73:13" pos:end="73:33"><block_content pos:start="73:13" pos:end="73:33">

            <expr_stmt pos:start="73:13" pos:end="73:33"><expr pos:start="73:13" pos:end="73:32"><call pos:start="73:13" pos:end="73:32"><name pos:start="73:13" pos:end="73:21">skip_bits</name><argument_list pos:start="73:22" pos:end="73:32">(<argument pos:start="73:23" pos:end="73:28"><expr pos:start="73:23" pos:end="73:28"><operator pos:start="73:23" pos:end="73:23">&amp;</operator><name pos:start="73:24" pos:end="73:28"><name pos:start="73:24" pos:end="73:24">h</name><operator pos:start="73:25" pos:end="73:26">-&gt;</operator><name pos:start="73:27" pos:end="73:28">gb</name></name></expr></argument>, <argument pos:start="73:31" pos:end="73:31"><expr pos:start="73:31" pos:end="73:31"><literal type="number" pos:start="73:31" pos:end="73:31">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="73:35" pos:end="73:46">//marker_bit</comment>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="81:52"><expr pos:start="79:5" pos:end="81:51"><name pos:start="79:5" pos:end="79:7">ret</name> <operator pos:start="79:9" pos:end="79:9">=</operator> <call pos:start="79:11" pos:end="81:51"><name pos:start="79:11" pos:end="79:23">ff_get_buffer</name><argument_list pos:start="79:24" pos:end="81:51">(<argument pos:start="79:25" pos:end="79:32"><expr pos:start="79:25" pos:end="79:32"><name pos:start="79:25" pos:end="79:32"><name pos:start="79:25" pos:end="79:25">h</name><operator pos:start="79:26" pos:end="79:27">-&gt;</operator><name pos:start="79:28" pos:end="79:32">avctx</name></name></expr></argument>, <argument pos:start="79:35" pos:end="79:42"><expr pos:start="79:35" pos:end="79:42"><name pos:start="79:35" pos:end="79:42"><name pos:start="79:35" pos:end="79:35">h</name><operator pos:start="79:36" pos:end="79:37">-&gt;</operator><name pos:start="79:38" pos:end="79:40">cur</name><operator pos:start="79:41" pos:end="79:41">.</operator><name pos:start="79:42" pos:end="79:42">f</name></name></expr></argument>, <argument pos:start="79:45" pos:end="81:50"><expr pos:start="79:45" pos:end="81:50"><ternary pos:start="79:45" pos:end="81:50"><condition pos:start="79:45" pos:end="79:86"><expr pos:start="79:45" pos:end="79:84"><name pos:start="79:45" pos:end="79:63"><name pos:start="79:45" pos:end="79:45">h</name><operator pos:start="79:46" pos:end="79:47">-&gt;</operator><name pos:start="79:48" pos:end="79:50">cur</name><operator pos:start="79:51" pos:end="79:51">.</operator><name pos:start="79:52" pos:end="79:52">f</name><operator pos:start="79:53" pos:end="79:54">-&gt;</operator><name pos:start="79:55" pos:end="79:63">pict_type</name></name> <operator pos:start="79:65" pos:end="79:66">==</operator> <name pos:start="79:68" pos:end="79:84">AV_PICTURE_TYPE_B</name></expr> ?</condition><then pos:start="81:25" pos:end="81:25">

                        <expr pos:start="81:25" pos:end="81:25"><literal type="number" pos:start="81:25" pos:end="81:25">0</literal></expr> </then><else pos:start="81:27" pos:end="81:50">: <expr pos:start="81:29" pos:end="81:50"><name pos:start="81:29" pos:end="81:50">AV_GET_BUFFER_FLAG_REF</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="83:5" pos:end="85:19"><if pos:start="83:5" pos:end="85:19">if <condition pos:start="83:8" pos:end="83:16">(<expr pos:start="83:9" pos:end="83:15"><name pos:start="83:9" pos:end="83:11">ret</name> <operator pos:start="83:13" pos:end="83:13">&lt;</operator> <literal type="number" pos:start="83:15" pos:end="83:15">0</literal></expr>)</condition><block type="pseudo" pos:start="85:9" pos:end="85:19"><block_content pos:start="85:9" pos:end="85:19">

        <return pos:start="85:9" pos:end="85:19">return <expr pos:start="85:16" pos:end="85:18"><name pos:start="85:16" pos:end="85:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="89:5" pos:end="99:5"><if pos:start="89:5" pos:end="99:5">if <condition pos:start="89:8" pos:end="89:28">(<expr pos:start="89:9" pos:end="89:27"><operator pos:start="89:9" pos:end="89:9">!</operator><name pos:start="89:10" pos:end="89:27"><name pos:start="89:10" pos:end="89:10">h</name><operator pos:start="89:11" pos:end="89:12">-&gt;</operator><name pos:start="89:13" pos:end="89:27">edge_emu_buffer</name></name></expr>)</condition> <block pos:start="89:30" pos:end="99:5">{<block_content pos:start="91:9" pos:end="97:35">

        <decl_stmt pos:start="91:9" pos:end="91:72"><decl pos:start="91:9" pos:end="91:71"><type pos:start="91:9" pos:end="91:11"><name pos:start="91:9" pos:end="91:11">int</name></type> <name pos:start="91:13" pos:end="91:22">alloc_size</name> <init pos:start="91:24" pos:end="91:71">= <expr pos:start="91:26" pos:end="91:71"><call pos:start="91:26" pos:end="91:71"><name pos:start="91:26" pos:end="91:32">FFALIGN</name><argument_list pos:start="91:33" pos:end="91:71">(<argument pos:start="91:34" pos:end="91:66"><expr pos:start="91:34" pos:end="91:66"><call pos:start="91:34" pos:end="91:61"><name pos:start="91:34" pos:end="91:38">FFABS</name><argument_list pos:start="91:39" pos:end="91:61">(<argument pos:start="91:40" pos:end="91:60"><expr pos:start="91:40" pos:end="91:60"><name pos:start="91:40" pos:end="91:60"><name pos:start="91:40" pos:end="91:40">h</name><operator pos:start="91:41" pos:end="91:42">-&gt;</operator><name pos:start="91:43" pos:end="91:45">cur</name><operator pos:start="91:46" pos:end="91:46">.</operator><name pos:start="91:47" pos:end="91:47">f</name><operator pos:start="91:48" pos:end="91:49">-&gt;</operator><name pos:start="91:50" pos:end="91:57">linesize</name><index pos:start="91:58" pos:end="91:60">[<expr pos:start="91:59" pos:end="91:59"><literal type="number" pos:start="91:59" pos:end="91:59">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="91:63" pos:end="91:63">+</operator> <literal type="number" pos:start="91:65" pos:end="91:66">32</literal></expr></argument>, <argument pos:start="91:69" pos:end="91:70"><expr pos:start="91:69" pos:end="91:70"><literal type="number" pos:start="91:69" pos:end="91:70">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:61"><expr pos:start="93:9" pos:end="93:60"><name pos:start="93:9" pos:end="93:26"><name pos:start="93:9" pos:end="93:9">h</name><operator pos:start="93:10" pos:end="93:11">-&gt;</operator><name pos:start="93:12" pos:end="93:26">edge_emu_buffer</name></name> <operator pos:start="93:28" pos:end="93:28">=</operator> <call pos:start="93:30" pos:end="93:60"><name pos:start="93:30" pos:end="93:39">av_mallocz</name><argument_list pos:start="93:40" pos:end="93:60">(<argument pos:start="93:41" pos:end="93:59"><expr pos:start="93:41" pos:end="93:59"><name pos:start="93:41" pos:end="93:50">alloc_size</name> <operator pos:start="93:52" pos:end="93:52">*</operator> <literal type="number" pos:start="93:54" pos:end="93:54">2</literal> <operator pos:start="93:56" pos:end="93:56">*</operator> <literal type="number" pos:start="93:58" pos:end="93:59">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="95:9" pos:end="97:35"><if pos:start="95:9" pos:end="97:35">if <condition pos:start="95:12" pos:end="95:32">(<expr pos:start="95:13" pos:end="95:31"><operator pos:start="95:13" pos:end="95:13">!</operator><name pos:start="95:14" pos:end="95:31"><name pos:start="95:14" pos:end="95:14">h</name><operator pos:start="95:15" pos:end="95:16">-&gt;</operator><name pos:start="95:17" pos:end="95:31">edge_emu_buffer</name></name></expr>)</condition><block type="pseudo" pos:start="97:13" pos:end="97:35"><block_content pos:start="97:13" pos:end="97:35">

            <return pos:start="97:13" pos:end="97:35">return <expr pos:start="97:20" pos:end="97:34"><call pos:start="97:20" pos:end="97:34"><name pos:start="97:20" pos:end="97:26">AVERROR</name><argument_list pos:start="97:27" pos:end="97:34">(<argument pos:start="97:28" pos:end="97:33"><expr pos:start="97:28" pos:end="97:33"><name pos:start="97:28" pos:end="97:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="103:5" pos:end="105:19"><if pos:start="103:5" pos:end="105:19">if <condition pos:start="103:8" pos:end="103:40">(<expr pos:start="103:9" pos:end="103:39"><operator pos:start="103:9" pos:end="103:9">(</operator><name pos:start="103:10" pos:end="103:12">ret</name> <operator pos:start="103:14" pos:end="103:14">=</operator> <call pos:start="103:16" pos:end="103:34"><name pos:start="103:16" pos:end="103:31">ff_cavs_init_pic</name><argument_list pos:start="103:32" pos:end="103:34">(<argument pos:start="103:33" pos:end="103:33"><expr pos:start="103:33" pos:end="103:33"><name pos:start="103:33" pos:end="103:33">h</name></expr></argument>)</argument_list></call><operator pos:start="103:35" pos:end="103:35">)</operator> <operator pos:start="103:37" pos:end="103:37">&lt;</operator> <literal type="number" pos:start="103:39" pos:end="103:39">0</literal></expr>)</condition><block type="pseudo" pos:start="105:9" pos:end="105:19"><block_content pos:start="105:9" pos:end="105:19">

        <return pos:start="105:9" pos:end="105:19">return <expr pos:start="105:16" pos:end="105:18"><name pos:start="105:16" pos:end="105:18">ret</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:41"><expr pos:start="107:5" pos:end="107:40"><name pos:start="107:5" pos:end="107:14"><name pos:start="107:5" pos:end="107:5">h</name><operator pos:start="107:6" pos:end="107:7">-&gt;</operator><name pos:start="107:8" pos:end="107:10">cur</name><operator pos:start="107:11" pos:end="107:11">.</operator><name pos:start="107:12" pos:end="107:14">poc</name></name> <operator pos:start="107:16" pos:end="107:16">=</operator> <call pos:start="107:18" pos:end="107:36"><name pos:start="107:18" pos:end="107:25">get_bits</name><argument_list pos:start="107:26" pos:end="107:36">(<argument pos:start="107:27" pos:end="107:32"><expr pos:start="107:27" pos:end="107:32"><operator pos:start="107:27" pos:end="107:27">&amp;</operator><name pos:start="107:28" pos:end="107:32"><name pos:start="107:28" pos:end="107:28">h</name><operator pos:start="107:29" pos:end="107:30">-&gt;</operator><name pos:start="107:31" pos:end="107:32">gb</name></name></expr></argument>, <argument pos:start="107:35" pos:end="107:35"><expr pos:start="107:35" pos:end="107:35"><literal type="number" pos:start="107:35" pos:end="107:35">8</literal></expr></argument>)</argument_list></call> <operator pos:start="107:38" pos:end="107:38">*</operator> <literal type="number" pos:start="107:40" pos:end="107:40">2</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="111:5" pos:end="111:55">/* get temporal distances and MV scaling factors */</comment>

    <if_stmt pos:start="113:5" pos:end="121:5"><if pos:start="113:5" pos:end="117:5">if <condition pos:start="113:8" pos:end="113:49">(<expr pos:start="113:9" pos:end="113:48"><name pos:start="113:9" pos:end="113:27"><name pos:start="113:9" pos:end="113:9">h</name><operator pos:start="113:10" pos:end="113:11">-&gt;</operator><name pos:start="113:12" pos:end="113:14">cur</name><operator pos:start="113:15" pos:end="113:15">.</operator><name pos:start="113:16" pos:end="113:16">f</name><operator pos:start="113:17" pos:end="113:18">-&gt;</operator><name pos:start="113:19" pos:end="113:27">pict_type</name></name> <operator pos:start="113:29" pos:end="113:30">!=</operator> <name pos:start="113:32" pos:end="113:48">AV_PICTURE_TYPE_B</name></expr>)</condition> <block pos:start="113:51" pos:end="117:5">{<block_content pos:start="115:9" pos:end="115:56">

        <expr_stmt pos:start="115:9" pos:end="115:56"><expr pos:start="115:9" pos:end="115:55"><name pos:start="115:9" pos:end="115:18"><name pos:start="115:9" pos:end="115:9">h</name><operator pos:start="115:10" pos:end="115:11">-&gt;</operator><name pos:start="115:12" pos:end="115:15">dist</name><index pos:start="115:16" pos:end="115:18">[<expr pos:start="115:17" pos:end="115:17"><literal type="number" pos:start="115:17" pos:end="115:17">0</literal></expr>]</index></name> <operator pos:start="115:20" pos:end="115:20">=</operator> <operator pos:start="115:22" pos:end="115:22">(</operator><name pos:start="115:23" pos:end="115:32"><name pos:start="115:23" pos:end="115:23">h</name><operator pos:start="115:24" pos:end="115:25">-&gt;</operator><name pos:start="115:26" pos:end="115:28">cur</name><operator pos:start="115:29" pos:end="115:29">.</operator><name pos:start="115:30" pos:end="115:32">poc</name></name> <operator pos:start="115:34" pos:end="115:34">-</operator> <name pos:start="115:36" pos:end="115:44"><name pos:start="115:36" pos:end="115:36">h</name><operator pos:start="115:37" pos:end="115:38">-&gt;</operator><name pos:start="115:39" pos:end="115:41">DPB</name><index pos:start="115:42" pos:end="115:44">[<expr pos:start="115:43" pos:end="115:43"><literal type="number" pos:start="115:43" pos:end="115:43">0</literal></expr>]</index></name><operator pos:start="115:45" pos:end="115:45">.</operator><name pos:start="115:46" pos:end="115:48">poc</name><operator pos:start="115:49" pos:end="115:49">)</operator> <operator pos:start="115:51" pos:end="115:51">&amp;</operator> <literal type="number" pos:start="115:53" pos:end="115:55">511</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="117:7" pos:end="121:5">else <block pos:start="117:12" pos:end="121:5">{<block_content pos:start="119:9" pos:end="119:57">

        <expr_stmt pos:start="119:9" pos:end="119:57"><expr pos:start="119:9" pos:end="119:56"><name pos:start="119:9" pos:end="119:18"><name pos:start="119:9" pos:end="119:9">h</name><operator pos:start="119:10" pos:end="119:11">-&gt;</operator><name pos:start="119:12" pos:end="119:15">dist</name><index pos:start="119:16" pos:end="119:18">[<expr pos:start="119:17" pos:end="119:17"><literal type="number" pos:start="119:17" pos:end="119:17">0</literal></expr>]</index></name> <operator pos:start="119:20" pos:end="119:20">=</operator> <operator pos:start="119:22" pos:end="119:22">(</operator><name pos:start="119:23" pos:end="119:31"><name pos:start="119:23" pos:end="119:23">h</name><operator pos:start="119:24" pos:end="119:25">-&gt;</operator><name pos:start="119:26" pos:end="119:28">DPB</name><index pos:start="119:29" pos:end="119:31">[<expr pos:start="119:30" pos:end="119:30"><literal type="number" pos:start="119:30" pos:end="119:30">0</literal></expr>]</index></name><operator pos:start="119:32" pos:end="119:32">.</operator><name pos:start="119:33" pos:end="119:35">poc</name>  <operator pos:start="119:38" pos:end="119:38">-</operator> <name pos:start="119:40" pos:end="119:49"><name pos:start="119:40" pos:end="119:40">h</name><operator pos:start="119:41" pos:end="119:42">-&gt;</operator><name pos:start="119:43" pos:end="119:45">cur</name><operator pos:start="119:46" pos:end="119:46">.</operator><name pos:start="119:47" pos:end="119:49">poc</name></name><operator pos:start="119:50" pos:end="119:50">)</operator> <operator pos:start="119:52" pos:end="119:52">&amp;</operator> <literal type="number" pos:start="119:54" pos:end="119:56">511</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:52"><expr pos:start="123:5" pos:end="123:51"><name pos:start="123:5" pos:end="123:14"><name pos:start="123:5" pos:end="123:5">h</name><operator pos:start="123:6" pos:end="123:7">-&gt;</operator><name pos:start="123:8" pos:end="123:11">dist</name><index pos:start="123:12" pos:end="123:14">[<expr pos:start="123:13" pos:end="123:13"><literal type="number" pos:start="123:13" pos:end="123:13">1</literal></expr>]</index></name> <operator pos:start="123:16" pos:end="123:16">=</operator> <operator pos:start="123:18" pos:end="123:18">(</operator><name pos:start="123:19" pos:end="123:28"><name pos:start="123:19" pos:end="123:19">h</name><operator pos:start="123:20" pos:end="123:21">-&gt;</operator><name pos:start="123:22" pos:end="123:24">cur</name><operator pos:start="123:25" pos:end="123:25">.</operator><name pos:start="123:26" pos:end="123:28">poc</name></name> <operator pos:start="123:30" pos:end="123:30">-</operator> <name pos:start="123:32" pos:end="123:40"><name pos:start="123:32" pos:end="123:32">h</name><operator pos:start="123:33" pos:end="123:34">-&gt;</operator><name pos:start="123:35" pos:end="123:37">DPB</name><index pos:start="123:38" pos:end="123:40">[<expr pos:start="123:39" pos:end="123:39"><literal type="number" pos:start="123:39" pos:end="123:39">1</literal></expr>]</index></name><operator pos:start="123:41" pos:end="123:41">.</operator><name pos:start="123:42" pos:end="123:44">poc</name><operator pos:start="123:45" pos:end="123:45">)</operator> <operator pos:start="123:47" pos:end="123:47">&amp;</operator> <literal type="number" pos:start="123:49" pos:end="123:51">511</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:54"><expr pos:start="125:5" pos:end="125:53"><name pos:start="125:5" pos:end="125:19"><name pos:start="125:5" pos:end="125:5">h</name><operator pos:start="125:6" pos:end="125:7">-&gt;</operator><name pos:start="125:8" pos:end="125:16">scale_den</name><index pos:start="125:17" pos:end="125:19">[<expr pos:start="125:18" pos:end="125:18"><literal type="number" pos:start="125:18" pos:end="125:18">0</literal></expr>]</index></name> <operator pos:start="125:21" pos:end="125:21">=</operator> <ternary pos:start="125:23" pos:end="125:53"><condition pos:start="125:23" pos:end="125:34"><expr pos:start="125:23" pos:end="125:32"><name pos:start="125:23" pos:end="125:32"><name pos:start="125:23" pos:end="125:23">h</name><operator pos:start="125:24" pos:end="125:25">-&gt;</operator><name pos:start="125:26" pos:end="125:29">dist</name><index pos:start="125:30" pos:end="125:32">[<expr pos:start="125:31" pos:end="125:31"><literal type="number" pos:start="125:31" pos:end="125:31">0</literal></expr>]</index></name></expr> ?</condition><then pos:start="125:36" pos:end="125:49"> <expr pos:start="125:36" pos:end="125:49"><literal type="number" pos:start="125:36" pos:end="125:38">512</literal><operator pos:start="125:39" pos:end="125:39">/</operator><name pos:start="125:40" pos:end="125:49"><name pos:start="125:40" pos:end="125:40">h</name><operator pos:start="125:41" pos:end="125:42">-&gt;</operator><name pos:start="125:43" pos:end="125:46">dist</name><index pos:start="125:47" pos:end="125:49">[<expr pos:start="125:48" pos:end="125:48"><literal type="number" pos:start="125:48" pos:end="125:48">0</literal></expr>]</index></name></expr> </then><else pos:start="125:51" pos:end="125:53">: <expr pos:start="125:53" pos:end="125:53"><literal type="number" pos:start="125:53" pos:end="125:53">0</literal></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:54"><expr pos:start="127:5" pos:end="127:53"><name pos:start="127:5" pos:end="127:19"><name pos:start="127:5" pos:end="127:5">h</name><operator pos:start="127:6" pos:end="127:7">-&gt;</operator><name pos:start="127:8" pos:end="127:16">scale_den</name><index pos:start="127:17" pos:end="127:19">[<expr pos:start="127:18" pos:end="127:18"><literal type="number" pos:start="127:18" pos:end="127:18">1</literal></expr>]</index></name> <operator pos:start="127:21" pos:end="127:21">=</operator> <ternary pos:start="127:23" pos:end="127:53"><condition pos:start="127:23" pos:end="127:34"><expr pos:start="127:23" pos:end="127:32"><name pos:start="127:23" pos:end="127:32"><name pos:start="127:23" pos:end="127:23">h</name><operator pos:start="127:24" pos:end="127:25">-&gt;</operator><name pos:start="127:26" pos:end="127:29">dist</name><index pos:start="127:30" pos:end="127:32">[<expr pos:start="127:31" pos:end="127:31"><literal type="number" pos:start="127:31" pos:end="127:31">1</literal></expr>]</index></name></expr> ?</condition><then pos:start="127:36" pos:end="127:49"> <expr pos:start="127:36" pos:end="127:49"><literal type="number" pos:start="127:36" pos:end="127:38">512</literal><operator pos:start="127:39" pos:end="127:39">/</operator><name pos:start="127:40" pos:end="127:49"><name pos:start="127:40" pos:end="127:40">h</name><operator pos:start="127:41" pos:end="127:42">-&gt;</operator><name pos:start="127:43" pos:end="127:46">dist</name><index pos:start="127:47" pos:end="127:49">[<expr pos:start="127:48" pos:end="127:48"><literal type="number" pos:start="127:48" pos:end="127:48">1</literal></expr>]</index></name></expr> </then><else pos:start="127:51" pos:end="127:53">: <expr pos:start="127:53" pos:end="127:53"><literal type="number" pos:start="127:53" pos:end="127:53">0</literal></expr></else></ternary></expr>;</expr_stmt>

    <if_stmt pos:start="129:5" pos:end="147:5"><if pos:start="129:5" pos:end="141:5">if <condition pos:start="129:8" pos:end="129:49">(<expr pos:start="129:9" pos:end="129:48"><name pos:start="129:9" pos:end="129:27"><name pos:start="129:9" pos:end="129:9">h</name><operator pos:start="129:10" pos:end="129:11">-&gt;</operator><name pos:start="129:12" pos:end="129:14">cur</name><operator pos:start="129:15" pos:end="129:15">.</operator><name pos:start="129:16" pos:end="129:16">f</name><operator pos:start="129:17" pos:end="129:18">-&gt;</operator><name pos:start="129:19" pos:end="129:27">pict_type</name></name> <operator pos:start="129:29" pos:end="129:30">==</operator> <name pos:start="129:32" pos:end="129:48">AV_PICTURE_TYPE_B</name></expr>)</condition> <block pos:start="129:51" pos:end="141:5">{<block_content pos:start="131:9" pos:end="139:9">

        <expr_stmt pos:start="131:9" pos:end="131:53"><expr pos:start="131:9" pos:end="131:52"><name pos:start="131:9" pos:end="131:21"><name pos:start="131:9" pos:end="131:9">h</name><operator pos:start="131:10" pos:end="131:11">-&gt;</operator><name pos:start="131:12" pos:end="131:21">sym_factor</name></name> <operator pos:start="131:23" pos:end="131:23">=</operator> <name pos:start="131:25" pos:end="131:34"><name pos:start="131:25" pos:end="131:25">h</name><operator pos:start="131:26" pos:end="131:27">-&gt;</operator><name pos:start="131:28" pos:end="131:31">dist</name><index pos:start="131:32" pos:end="131:34">[<expr pos:start="131:33" pos:end="131:33"><literal type="number" pos:start="131:33" pos:end="131:33">0</literal></expr>]</index></name> <operator pos:start="131:36" pos:end="131:36">*</operator> <name pos:start="131:38" pos:end="131:52"><name pos:start="131:38" pos:end="131:38">h</name><operator pos:start="131:39" pos:end="131:40">-&gt;</operator><name pos:start="131:41" pos:end="131:49">scale_den</name><index pos:start="131:50" pos:end="131:52">[<expr pos:start="131:51" pos:end="131:51"><literal type="number" pos:start="131:51" pos:end="131:51">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="133:9" pos:end="139:9"><if pos:start="133:9" pos:end="139:9">if <condition pos:start="133:12" pos:end="133:41">(<expr pos:start="133:13" pos:end="133:40"><call pos:start="133:13" pos:end="133:32"><name pos:start="133:13" pos:end="133:17">FFABS</name><argument_list pos:start="133:18" pos:end="133:32">(<argument pos:start="133:19" pos:end="133:31"><expr pos:start="133:19" pos:end="133:31"><name pos:start="133:19" pos:end="133:31"><name pos:start="133:19" pos:end="133:19">h</name><operator pos:start="133:20" pos:end="133:21">-&gt;</operator><name pos:start="133:22" pos:end="133:31">sym_factor</name></name></expr></argument>)</argument_list></call> <operator pos:start="133:34" pos:end="133:34">&gt;</operator> <literal type="number" pos:start="133:36" pos:end="133:40">32768</literal></expr>)</condition> <block pos:start="133:43" pos:end="139:9">{<block_content pos:start="135:13" pos:end="137:39">

            <expr_stmt pos:start="135:13" pos:end="135:87"><expr pos:start="135:13" pos:end="135:86"><call pos:start="135:13" pos:end="135:86"><name pos:start="135:13" pos:end="135:18">av_log</name><argument_list pos:start="135:19" pos:end="135:86">(<argument pos:start="135:20" pos:end="135:27"><expr pos:start="135:20" pos:end="135:27"><name pos:start="135:20" pos:end="135:27"><name pos:start="135:20" pos:end="135:20">h</name><operator pos:start="135:21" pos:end="135:22">-&gt;</operator><name pos:start="135:23" pos:end="135:27">avctx</name></name></expr></argument>, <argument pos:start="135:30" pos:end="135:41"><expr pos:start="135:30" pos:end="135:41"><name pos:start="135:30" pos:end="135:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="135:44" pos:end="135:70"><expr pos:start="135:44" pos:end="135:70"><literal type="string" pos:start="135:44" pos:end="135:70">"sym_factor %d too large\n"</literal></expr></argument>, <argument pos:start="135:73" pos:end="135:85"><expr pos:start="135:73" pos:end="135:85"><name pos:start="135:73" pos:end="135:85"><name pos:start="135:73" pos:end="135:73">h</name><operator pos:start="135:74" pos:end="135:75">-&gt;</operator><name pos:start="135:76" pos:end="135:85">sym_factor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="137:13" pos:end="137:39">return <expr pos:start="137:20" pos:end="137:38"><name pos:start="137:20" pos:end="137:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="141:7" pos:end="147:5">else <block pos:start="141:12" pos:end="147:5">{<block_content pos:start="143:9" pos:end="145:63">

        <expr_stmt pos:start="143:9" pos:end="143:63"><expr pos:start="143:9" pos:end="143:62"><name pos:start="143:9" pos:end="143:24"><name pos:start="143:9" pos:end="143:9">h</name><operator pos:start="143:10" pos:end="143:11">-&gt;</operator><name pos:start="143:12" pos:end="143:21">direct_den</name><index pos:start="143:22" pos:end="143:24">[<expr pos:start="143:23" pos:end="143:23"><literal type="number" pos:start="143:23" pos:end="143:23">0</literal></expr>]</index></name> <operator pos:start="143:26" pos:end="143:26">=</operator> <ternary pos:start="143:28" pos:end="143:62"><condition pos:start="143:28" pos:end="143:39"><expr pos:start="143:28" pos:end="143:37"><name pos:start="143:28" pos:end="143:37"><name pos:start="143:28" pos:end="143:28">h</name><operator pos:start="143:29" pos:end="143:30">-&gt;</operator><name pos:start="143:31" pos:end="143:34">dist</name><index pos:start="143:35" pos:end="143:37">[<expr pos:start="143:36" pos:end="143:36"><literal type="number" pos:start="143:36" pos:end="143:36">0</literal></expr>]</index></name></expr> ?</condition><then pos:start="143:41" pos:end="143:58"> <expr pos:start="143:41" pos:end="143:58"><literal type="number" pos:start="143:41" pos:end="143:45">16384</literal> <operator pos:start="143:47" pos:end="143:47">/</operator> <name pos:start="143:49" pos:end="143:58"><name pos:start="143:49" pos:end="143:49">h</name><operator pos:start="143:50" pos:end="143:51">-&gt;</operator><name pos:start="143:52" pos:end="143:55">dist</name><index pos:start="143:56" pos:end="143:58">[<expr pos:start="143:57" pos:end="143:57"><literal type="number" pos:start="143:57" pos:end="143:57">0</literal></expr>]</index></name></expr> </then><else pos:start="143:60" pos:end="143:62">: <expr pos:start="143:62" pos:end="143:62"><literal type="number" pos:start="143:62" pos:end="143:62">0</literal></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:63"><expr pos:start="145:9" pos:end="145:62"><name pos:start="145:9" pos:end="145:24"><name pos:start="145:9" pos:end="145:9">h</name><operator pos:start="145:10" pos:end="145:11">-&gt;</operator><name pos:start="145:12" pos:end="145:21">direct_den</name><index pos:start="145:22" pos:end="145:24">[<expr pos:start="145:23" pos:end="145:23"><literal type="number" pos:start="145:23" pos:end="145:23">1</literal></expr>]</index></name> <operator pos:start="145:26" pos:end="145:26">=</operator> <ternary pos:start="145:28" pos:end="145:62"><condition pos:start="145:28" pos:end="145:39"><expr pos:start="145:28" pos:end="145:37"><name pos:start="145:28" pos:end="145:37"><name pos:start="145:28" pos:end="145:28">h</name><operator pos:start="145:29" pos:end="145:30">-&gt;</operator><name pos:start="145:31" pos:end="145:34">dist</name><index pos:start="145:35" pos:end="145:37">[<expr pos:start="145:36" pos:end="145:36"><literal type="number" pos:start="145:36" pos:end="145:36">1</literal></expr>]</index></name></expr> ?</condition><then pos:start="145:41" pos:end="145:58"> <expr pos:start="145:41" pos:end="145:58"><literal type="number" pos:start="145:41" pos:end="145:45">16384</literal> <operator pos:start="145:47" pos:end="145:47">/</operator> <name pos:start="145:49" pos:end="145:58"><name pos:start="145:49" pos:end="145:49">h</name><operator pos:start="145:50" pos:end="145:51">-&gt;</operator><name pos:start="145:52" pos:end="145:55">dist</name><index pos:start="145:56" pos:end="145:58">[<expr pos:start="145:57" pos:end="145:57"><literal type="number" pos:start="145:57" pos:end="145:57">1</literal></expr>]</index></name></expr> </then><else pos:start="145:60" pos:end="145:62">: <expr pos:start="145:62" pos:end="145:62"><literal type="number" pos:start="145:62" pos:end="145:62">0</literal></expr></else></ternary></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="151:5" pos:end="153:30"><if pos:start="151:5" pos:end="153:30">if <condition pos:start="151:8" pos:end="151:21">(<expr pos:start="151:9" pos:end="151:20"><name pos:start="151:9" pos:end="151:20"><name pos:start="151:9" pos:end="151:9">h</name><operator pos:start="151:10" pos:end="151:11">-&gt;</operator><name pos:start="151:12" pos:end="151:20">low_delay</name></name></expr>)</condition><block type="pseudo" pos:start="153:9" pos:end="153:30"><block_content pos:start="153:9" pos:end="153:30">

        <expr_stmt pos:start="153:9" pos:end="153:30"><expr pos:start="153:9" pos:end="153:29"><call pos:start="153:9" pos:end="153:29"><name pos:start="153:9" pos:end="153:21">get_ue_golomb</name><argument_list pos:start="153:22" pos:end="153:29">(<argument pos:start="153:23" pos:end="153:28"><expr pos:start="153:23" pos:end="153:28"><operator pos:start="153:23" pos:end="153:23">&amp;</operator><name pos:start="153:24" pos:end="153:28"><name pos:start="153:24" pos:end="153:24">h</name><operator pos:start="153:25" pos:end="153:26">-&gt;</operator><name pos:start="153:27" pos:end="153:28">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="153:32" pos:end="153:48">//bbv_check_times</comment>

    <expr_stmt pos:start="155:5" pos:end="155:41"><expr pos:start="155:5" pos:end="155:40"><name pos:start="155:5" pos:end="155:18"><name pos:start="155:5" pos:end="155:5">h</name><operator pos:start="155:6" pos:end="155:7">-&gt;</operator><name pos:start="155:8" pos:end="155:18">progressive</name></name>   <operator pos:start="155:22" pos:end="155:22">=</operator> <call pos:start="155:24" pos:end="155:40"><name pos:start="155:24" pos:end="155:32">get_bits1</name><argument_list pos:start="155:33" pos:end="155:40">(<argument pos:start="155:34" pos:end="155:39"><expr pos:start="155:34" pos:end="155:39"><operator pos:start="155:34" pos:end="155:34">&amp;</operator><name pos:start="155:35" pos:end="155:39"><name pos:start="155:35" pos:end="155:35">h</name><operator pos:start="155:36" pos:end="155:37">-&gt;</operator><name pos:start="155:38" pos:end="155:39">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:25"><expr pos:start="157:5" pos:end="157:24"><name pos:start="157:5" pos:end="157:20"><name pos:start="157:5" pos:end="157:5">h</name><operator pos:start="157:6" pos:end="157:7">-&gt;</operator><name pos:start="157:8" pos:end="157:20">pic_structure</name></name> <operator pos:start="157:22" pos:end="157:22">=</operator> <literal type="number" pos:start="157:24" pos:end="157:24">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="159:5" pos:end="161:45"><if pos:start="159:5" pos:end="161:45">if <condition pos:start="159:8" pos:end="159:24">(<expr pos:start="159:9" pos:end="159:23"><operator pos:start="159:9" pos:end="159:9">!</operator><name pos:start="159:10" pos:end="159:23"><name pos:start="159:10" pos:end="159:10">h</name><operator pos:start="159:11" pos:end="159:12">-&gt;</operator><name pos:start="159:13" pos:end="159:23">progressive</name></name></expr>)</condition><block type="pseudo" pos:start="161:9" pos:end="161:45"><block_content pos:start="161:9" pos:end="161:45">

        <expr_stmt pos:start="161:9" pos:end="161:45"><expr pos:start="161:9" pos:end="161:44"><name pos:start="161:9" pos:end="161:24"><name pos:start="161:9" pos:end="161:9">h</name><operator pos:start="161:10" pos:end="161:11">-&gt;</operator><name pos:start="161:12" pos:end="161:24">pic_structure</name></name> <operator pos:start="161:26" pos:end="161:26">=</operator> <call pos:start="161:28" pos:end="161:44"><name pos:start="161:28" pos:end="161:36">get_bits1</name><argument_list pos:start="161:37" pos:end="161:44">(<argument pos:start="161:38" pos:end="161:43"><expr pos:start="161:38" pos:end="161:43"><operator pos:start="161:38" pos:end="161:38">&amp;</operator><name pos:start="161:39" pos:end="161:43"><name pos:start="161:39" pos:end="161:39">h</name><operator pos:start="161:40" pos:end="161:41">-&gt;</operator><name pos:start="161:42" pos:end="161:43">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="163:5" pos:end="165:27"><if pos:start="163:5" pos:end="165:27">if <condition pos:start="163:8" pos:end="163:57">(<expr pos:start="163:9" pos:end="163:56"><operator pos:start="163:9" pos:end="163:9">!</operator><name pos:start="163:10" pos:end="163:25"><name pos:start="163:10" pos:end="163:10">h</name><operator pos:start="163:11" pos:end="163:12">-&gt;</operator><name pos:start="163:13" pos:end="163:25">pic_structure</name></name> <operator pos:start="163:27" pos:end="163:28">&amp;&amp;</operator> <name pos:start="163:30" pos:end="163:35"><name pos:start="163:30" pos:end="163:30">h</name><operator pos:start="163:31" pos:end="163:32">-&gt;</operator><name pos:start="163:33" pos:end="163:35">stc</name></name> <operator pos:start="163:37" pos:end="163:38">==</operator> <name pos:start="163:40" pos:end="163:56">PIC_PB_START_CODE</name></expr>)</condition><block type="pseudo" pos:start="165:9" pos:end="165:27"><block_content pos:start="165:9" pos:end="165:27">

        <expr_stmt pos:start="165:9" pos:end="165:27"><expr pos:start="165:9" pos:end="165:26"><call pos:start="165:9" pos:end="165:26"><name pos:start="165:9" pos:end="165:18">skip_bits1</name><argument_list pos:start="165:19" pos:end="165:26">(<argument pos:start="165:20" pos:end="165:25"><expr pos:start="165:20" pos:end="165:25"><operator pos:start="165:20" pos:end="165:20">&amp;</operator><name pos:start="165:21" pos:end="165:25"><name pos:start="165:21" pos:end="165:21">h</name><operator pos:start="165:22" pos:end="165:23">-&gt;</operator><name pos:start="165:24" pos:end="165:25">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>     <comment type="line" pos:start="165:33" pos:end="165:60">//advanced_pred_mode_disable</comment>

    <expr_stmt pos:start="167:5" pos:end="167:23"><expr pos:start="167:5" pos:end="167:22"><call pos:start="167:5" pos:end="167:22"><name pos:start="167:5" pos:end="167:14">skip_bits1</name><argument_list pos:start="167:15" pos:end="167:22">(<argument pos:start="167:16" pos:end="167:21"><expr pos:start="167:16" pos:end="167:21"><operator pos:start="167:16" pos:end="167:16">&amp;</operator><name pos:start="167:17" pos:end="167:21"><name pos:start="167:17" pos:end="167:17">h</name><operator pos:start="167:18" pos:end="167:19">-&gt;</operator><name pos:start="167:20" pos:end="167:21">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="line" pos:start="167:32" pos:end="167:48">//top_field_first</comment>

    <expr_stmt pos:start="169:5" pos:end="169:23"><expr pos:start="169:5" pos:end="169:22"><call pos:start="169:5" pos:end="169:22"><name pos:start="169:5" pos:end="169:14">skip_bits1</name><argument_list pos:start="169:15" pos:end="169:22">(<argument pos:start="169:16" pos:end="169:21"><expr pos:start="169:16" pos:end="169:21"><operator pos:start="169:16" pos:end="169:16">&amp;</operator><name pos:start="169:17" pos:end="169:21"><name pos:start="169:17" pos:end="169:17">h</name><operator pos:start="169:18" pos:end="169:19">-&gt;</operator><name pos:start="169:20" pos:end="169:21">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="line" pos:start="169:32" pos:end="169:51">//repeat_first_field</comment>

    <expr_stmt pos:start="171:5" pos:end="173:36"><expr pos:start="171:5" pos:end="173:35"><name pos:start="171:5" pos:end="171:19"><name pos:start="171:5" pos:end="171:5">h</name><operator pos:start="171:6" pos:end="171:7">-&gt;</operator><name pos:start="171:8" pos:end="171:19">pic_qp_fixed</name></name> <operator pos:start="171:21" pos:end="171:21">=</operator>

    <name pos:start="173:5" pos:end="173:15"><name pos:start="173:5" pos:end="173:5">h</name><operator pos:start="173:6" pos:end="173:7">-&gt;</operator><name pos:start="173:8" pos:end="173:15">qp_fixed</name></name> <operator pos:start="173:17" pos:end="173:17">=</operator> <call pos:start="173:19" pos:end="173:35"><name pos:start="173:19" pos:end="173:27">get_bits1</name><argument_list pos:start="173:28" pos:end="173:35">(<argument pos:start="173:29" pos:end="173:34"><expr pos:start="173:29" pos:end="173:34"><operator pos:start="173:29" pos:end="173:29">&amp;</operator><name pos:start="173:30" pos:end="173:34"><name pos:start="173:30" pos:end="173:30">h</name><operator pos:start="173:31" pos:end="173:32">-&gt;</operator><name pos:start="173:33" pos:end="173:34">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="175:5" pos:end="175:38"><expr pos:start="175:5" pos:end="175:37"><name pos:start="175:5" pos:end="175:9"><name pos:start="175:5" pos:end="175:5">h</name><operator pos:start="175:6" pos:end="175:7">-&gt;</operator><name pos:start="175:8" pos:end="175:9">qp</name></name>       <operator pos:start="175:17" pos:end="175:17">=</operator> <call pos:start="175:19" pos:end="175:37"><name pos:start="175:19" pos:end="175:26">get_bits</name><argument_list pos:start="175:27" pos:end="175:37">(<argument pos:start="175:28" pos:end="175:33"><expr pos:start="175:28" pos:end="175:33"><operator pos:start="175:28" pos:end="175:28">&amp;</operator><name pos:start="175:29" pos:end="175:33"><name pos:start="175:29" pos:end="175:29">h</name><operator pos:start="175:30" pos:end="175:31">-&gt;</operator><name pos:start="175:32" pos:end="175:33">gb</name></name></expr></argument>, <argument pos:start="175:36" pos:end="175:36"><expr pos:start="175:36" pos:end="175:36"><literal type="number" pos:start="175:36" pos:end="175:36">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="177:5" pos:end="195:5"><if pos:start="177:5" pos:end="185:5">if <condition pos:start="177:8" pos:end="177:49">(<expr pos:start="177:9" pos:end="177:48"><name pos:start="177:9" pos:end="177:27"><name pos:start="177:9" pos:end="177:9">h</name><operator pos:start="177:10" pos:end="177:11">-&gt;</operator><name pos:start="177:12" pos:end="177:14">cur</name><operator pos:start="177:15" pos:end="177:15">.</operator><name pos:start="177:16" pos:end="177:16">f</name><operator pos:start="177:17" pos:end="177:18">-&gt;</operator><name pos:start="177:19" pos:end="177:27">pict_type</name></name> <operator pos:start="177:29" pos:end="177:30">==</operator> <name pos:start="177:32" pos:end="177:48">AV_PICTURE_TYPE_I</name></expr>)</condition> <block pos:start="177:51" pos:end="185:5">{<block_content pos:start="179:9" pos:end="183:29">

        <if_stmt pos:start="179:9" pos:end="181:31"><if pos:start="179:9" pos:end="181:31">if <condition pos:start="179:12" pos:end="179:49">(<expr pos:start="179:13" pos:end="179:48"><operator pos:start="179:13" pos:end="179:13">!</operator><name pos:start="179:14" pos:end="179:27"><name pos:start="179:14" pos:end="179:14">h</name><operator pos:start="179:15" pos:end="179:16">-&gt;</operator><name pos:start="179:17" pos:end="179:27">progressive</name></name> <operator pos:start="179:29" pos:end="179:30">&amp;&amp;</operator> <operator pos:start="179:32" pos:end="179:32">!</operator><name pos:start="179:33" pos:end="179:48"><name pos:start="179:33" pos:end="179:33">h</name><operator pos:start="179:34" pos:end="179:35">-&gt;</operator><name pos:start="179:36" pos:end="179:48">pic_structure</name></name></expr>)</condition><block type="pseudo" pos:start="181:13" pos:end="181:31"><block_content pos:start="181:13" pos:end="181:31">

            <expr_stmt pos:start="181:13" pos:end="181:31"><expr pos:start="181:13" pos:end="181:30"><call pos:start="181:13" pos:end="181:30"><name pos:start="181:13" pos:end="181:22">skip_bits1</name><argument_list pos:start="181:23" pos:end="181:30">(<argument pos:start="181:24" pos:end="181:29"><expr pos:start="181:24" pos:end="181:29"><operator pos:start="181:24" pos:end="181:24">&amp;</operator><name pos:start="181:25" pos:end="181:29"><name pos:start="181:25" pos:end="181:25">h</name><operator pos:start="181:26" pos:end="181:27">-&gt;</operator><name pos:start="181:28" pos:end="181:29">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt><comment type="line" pos:start="181:32" pos:end="181:46">//what is this?</comment>

        <expr_stmt pos:start="183:9" pos:end="183:29"><expr pos:start="183:9" pos:end="183:28"><call pos:start="183:9" pos:end="183:28"><name pos:start="183:9" pos:end="183:17">skip_bits</name><argument_list pos:start="183:18" pos:end="183:28">(<argument pos:start="183:19" pos:end="183:24"><expr pos:start="183:19" pos:end="183:24"><operator pos:start="183:19" pos:end="183:19">&amp;</operator><name pos:start="183:20" pos:end="183:24"><name pos:start="183:20" pos:end="183:20">h</name><operator pos:start="183:21" pos:end="183:22">-&gt;</operator><name pos:start="183:23" pos:end="183:24">gb</name></name></expr></argument>, <argument pos:start="183:27" pos:end="183:27"><expr pos:start="183:27" pos:end="183:27"><literal type="number" pos:start="183:27" pos:end="183:27">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="line" pos:start="183:33" pos:end="183:47">//reserved bits</comment>

    </block_content>}</block></if> <else pos:start="185:7" pos:end="195:5">else <block pos:start="185:12" pos:end="195:5">{<block_content pos:start="187:9" pos:end="193:51">

        <if_stmt pos:start="187:9" pos:end="189:51"><if pos:start="187:9" pos:end="189:51">if <condition pos:start="187:12" pos:end="187:81">(<expr pos:start="187:13" pos:end="187:80"><operator pos:start="187:13" pos:end="187:13">!</operator><operator pos:start="187:14" pos:end="187:14">(</operator><name pos:start="187:15" pos:end="187:33"><name pos:start="187:15" pos:end="187:15">h</name><operator pos:start="187:16" pos:end="187:17">-&gt;</operator><name pos:start="187:18" pos:end="187:20">cur</name><operator pos:start="187:21" pos:end="187:21">.</operator><name pos:start="187:22" pos:end="187:22">f</name><operator pos:start="187:23" pos:end="187:24">-&gt;</operator><name pos:start="187:25" pos:end="187:33">pict_type</name></name> <operator pos:start="187:35" pos:end="187:36">==</operator> <name pos:start="187:38" pos:end="187:54">AV_PICTURE_TYPE_B</name> <operator pos:start="187:56" pos:end="187:57">&amp;&amp;</operator> <name pos:start="187:59" pos:end="187:74"><name pos:start="187:59" pos:end="187:59">h</name><operator pos:start="187:60" pos:end="187:61">-&gt;</operator><name pos:start="187:62" pos:end="187:74">pic_structure</name></name> <operator pos:start="187:76" pos:end="187:77">==</operator> <literal type="number" pos:start="187:79" pos:end="187:79">1</literal><operator pos:start="187:80" pos:end="187:80">)</operator></expr>)</condition><block type="pseudo" pos:start="189:13" pos:end="189:51"><block_content pos:start="189:13" pos:end="189:51">

            <expr_stmt pos:start="189:13" pos:end="189:51"><expr pos:start="189:13" pos:end="189:50"><name pos:start="189:13" pos:end="189:23"><name pos:start="189:13" pos:end="189:13">h</name><operator pos:start="189:14" pos:end="189:15">-&gt;</operator><name pos:start="189:16" pos:end="189:23">ref_flag</name></name>        <operator pos:start="189:32" pos:end="189:32">=</operator> <call pos:start="189:34" pos:end="189:50"><name pos:start="189:34" pos:end="189:42">get_bits1</name><argument_list pos:start="189:43" pos:end="189:50">(<argument pos:start="189:44" pos:end="189:49"><expr pos:start="189:44" pos:end="189:49"><operator pos:start="189:44" pos:end="189:44">&amp;</operator><name pos:start="189:45" pos:end="189:49"><name pos:start="189:45" pos:end="189:45">h</name><operator pos:start="189:46" pos:end="189:47">-&gt;</operator><name pos:start="189:48" pos:end="189:49">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="191:9" pos:end="191:29"><expr pos:start="191:9" pos:end="191:28"><call pos:start="191:9" pos:end="191:28"><name pos:start="191:9" pos:end="191:17">skip_bits</name><argument_list pos:start="191:18" pos:end="191:28">(<argument pos:start="191:19" pos:end="191:24"><expr pos:start="191:19" pos:end="191:24"><operator pos:start="191:19" pos:end="191:19">&amp;</operator><name pos:start="191:20" pos:end="191:24"><name pos:start="191:20" pos:end="191:20">h</name><operator pos:start="191:21" pos:end="191:22">-&gt;</operator><name pos:start="191:23" pos:end="191:24">gb</name></name></expr></argument>, <argument pos:start="191:27" pos:end="191:27"><expr pos:start="191:27" pos:end="191:27"><literal type="number" pos:start="191:27" pos:end="191:27">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="line" pos:start="191:33" pos:end="191:47">//reserved bits</comment>

        <expr_stmt pos:start="193:9" pos:end="193:51"><expr pos:start="193:9" pos:end="193:50"><name pos:start="193:9" pos:end="193:25"><name pos:start="193:9" pos:end="193:9">h</name><operator pos:start="193:10" pos:end="193:11">-&gt;</operator><name pos:start="193:12" pos:end="193:25">skip_mode_flag</name></name>      <operator pos:start="193:32" pos:end="193:32">=</operator> <call pos:start="193:34" pos:end="193:50"><name pos:start="193:34" pos:end="193:42">get_bits1</name><argument_list pos:start="193:43" pos:end="193:50">(<argument pos:start="193:44" pos:end="193:49"><expr pos:start="193:44" pos:end="193:49"><operator pos:start="193:44" pos:end="193:44">&amp;</operator><name pos:start="193:45" pos:end="193:49"><name pos:start="193:45" pos:end="193:45">h</name><operator pos:start="193:46" pos:end="193:47">-&gt;</operator><name pos:start="193:48" pos:end="193:49">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="197:5" pos:end="197:51"><expr pos:start="197:5" pos:end="197:50"><name pos:start="197:5" pos:end="197:26"><name pos:start="197:5" pos:end="197:5">h</name><operator pos:start="197:6" pos:end="197:7">-&gt;</operator><name pos:start="197:8" pos:end="197:26">loop_filter_disable</name></name>     <operator pos:start="197:32" pos:end="197:32">=</operator> <call pos:start="197:34" pos:end="197:50"><name pos:start="197:34" pos:end="197:42">get_bits1</name><argument_list pos:start="197:43" pos:end="197:50">(<argument pos:start="197:44" pos:end="197:49"><expr pos:start="197:44" pos:end="197:49"><operator pos:start="197:44" pos:end="197:44">&amp;</operator><name pos:start="197:45" pos:end="197:49"><name pos:start="197:45" pos:end="197:45">h</name><operator pos:start="197:46" pos:end="197:47">-&gt;</operator><name pos:start="197:48" pos:end="197:49">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="199:5" pos:end="209:5"><if pos:start="199:5" pos:end="205:5">if <condition pos:start="199:8" pos:end="199:53">(<expr pos:start="199:9" pos:end="199:52"><operator pos:start="199:9" pos:end="199:9">!</operator><name pos:start="199:10" pos:end="199:31"><name pos:start="199:10" pos:end="199:10">h</name><operator pos:start="199:11" pos:end="199:12">-&gt;</operator><name pos:start="199:13" pos:end="199:31">loop_filter_disable</name></name> <operator pos:start="199:33" pos:end="199:34">&amp;&amp;</operator> <call pos:start="199:36" pos:end="199:52"><name pos:start="199:36" pos:end="199:44">get_bits1</name><argument_list pos:start="199:45" pos:end="199:52">(<argument pos:start="199:46" pos:end="199:51"><expr pos:start="199:46" pos:end="199:51"><operator pos:start="199:46" pos:end="199:46">&amp;</operator><name pos:start="199:47" pos:end="199:51"><name pos:start="199:47" pos:end="199:47">h</name><operator pos:start="199:48" pos:end="199:49">-&gt;</operator><name pos:start="199:50" pos:end="199:51">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="199:55" pos:end="205:5">{<block_content pos:start="201:9" pos:end="203:55">

        <expr_stmt pos:start="201:9" pos:end="201:55"><expr pos:start="201:9" pos:end="201:54"><name pos:start="201:9" pos:end="201:23"><name pos:start="201:9" pos:end="201:9">h</name><operator pos:start="201:10" pos:end="201:11">-&gt;</operator><name pos:start="201:12" pos:end="201:23">alpha_offset</name></name>        <operator pos:start="201:32" pos:end="201:32">=</operator> <call pos:start="201:34" pos:end="201:54"><name pos:start="201:34" pos:end="201:46">get_se_golomb</name><argument_list pos:start="201:47" pos:end="201:54">(<argument pos:start="201:48" pos:end="201:53"><expr pos:start="201:48" pos:end="201:53"><operator pos:start="201:48" pos:end="201:48">&amp;</operator><name pos:start="201:49" pos:end="201:53"><name pos:start="201:49" pos:end="201:49">h</name><operator pos:start="201:50" pos:end="201:51">-&gt;</operator><name pos:start="201:52" pos:end="201:53">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="203:9" pos:end="203:55"><expr pos:start="203:9" pos:end="203:54"><name pos:start="203:9" pos:end="203:22"><name pos:start="203:9" pos:end="203:9">h</name><operator pos:start="203:10" pos:end="203:11">-&gt;</operator><name pos:start="203:12" pos:end="203:22">beta_offset</name></name>         <operator pos:start="203:32" pos:end="203:32">=</operator> <call pos:start="203:34" pos:end="203:54"><name pos:start="203:34" pos:end="203:46">get_se_golomb</name><argument_list pos:start="203:47" pos:end="203:54">(<argument pos:start="203:48" pos:end="203:53"><expr pos:start="203:48" pos:end="203:53"><operator pos:start="203:48" pos:end="203:48">&amp;</operator><name pos:start="203:49" pos:end="203:53"><name pos:start="203:49" pos:end="203:49">h</name><operator pos:start="203:50" pos:end="203:51">-&gt;</operator><name pos:start="203:52" pos:end="203:53">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="205:7" pos:end="209:5">else <block pos:start="205:12" pos:end="209:5">{<block_content pos:start="207:9" pos:end="207:46">

        <expr_stmt pos:start="207:9" pos:end="207:46"><expr pos:start="207:9" pos:end="207:45"><name pos:start="207:9" pos:end="207:23"><name pos:start="207:9" pos:end="207:9">h</name><operator pos:start="207:10" pos:end="207:11">-&gt;</operator><name pos:start="207:12" pos:end="207:23">alpha_offset</name></name> <operator pos:start="207:25" pos:end="207:25">=</operator> <name pos:start="207:27" pos:end="207:40"><name pos:start="207:27" pos:end="207:27">h</name><operator pos:start="207:28" pos:end="207:29">-&gt;</operator><name pos:start="207:30" pos:end="207:40">beta_offset</name></name>  <operator pos:start="207:43" pos:end="207:43">=</operator> <literal type="number" pos:start="207:45" pos:end="207:45">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="211:5" pos:end="285:5"><if pos:start="211:5" pos:end="221:5">if <condition pos:start="211:8" pos:end="211:49">(<expr pos:start="211:9" pos:end="211:48"><name pos:start="211:9" pos:end="211:27"><name pos:start="211:9" pos:end="211:9">h</name><operator pos:start="211:10" pos:end="211:11">-&gt;</operator><name pos:start="211:12" pos:end="211:14">cur</name><operator pos:start="211:15" pos:end="211:15">.</operator><name pos:start="211:16" pos:end="211:16">f</name><operator pos:start="211:17" pos:end="211:18">-&gt;</operator><name pos:start="211:19" pos:end="211:27">pict_type</name></name> <operator pos:start="211:29" pos:end="211:30">==</operator> <name pos:start="211:32" pos:end="211:48">AV_PICTURE_TYPE_I</name></expr>)</condition> <block pos:start="211:51" pos:end="221:5">{<block_content pos:start="213:9" pos:end="219:37">

        <do pos:start="213:9" pos:end="219:37">do <block pos:start="213:12" pos:end="219:9">{<block_content pos:start="215:13" pos:end="217:30">

            <expr_stmt pos:start="215:13" pos:end="215:31"><expr pos:start="215:13" pos:end="215:30"><call pos:start="215:13" pos:end="215:30"><name pos:start="215:13" pos:end="215:27">check_for_slice</name><argument_list pos:start="215:28" pos:end="215:30">(<argument pos:start="215:29" pos:end="215:29"><expr pos:start="215:29" pos:end="215:29"><name pos:start="215:29" pos:end="215:29">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="217:13" pos:end="217:30"><expr pos:start="217:13" pos:end="217:29"><call pos:start="217:13" pos:end="217:29"><name pos:start="217:13" pos:end="217:23">decode_mb_i</name><argument_list pos:start="217:24" pos:end="217:29">(<argument pos:start="217:25" pos:end="217:25"><expr pos:start="217:25" pos:end="217:25"><name pos:start="217:25" pos:end="217:25">h</name></expr></argument>, <argument pos:start="217:28" pos:end="217:28"><expr pos:start="217:28" pos:end="217:28"><literal type="number" pos:start="217:28" pos:end="217:28">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block> while <condition pos:start="219:17" pos:end="219:36">(<expr pos:start="219:18" pos:end="219:35"><call pos:start="219:18" pos:end="219:35"><name pos:start="219:18" pos:end="219:32">ff_cavs_next_mb</name><argument_list pos:start="219:33" pos:end="219:35">(<argument pos:start="219:34" pos:end="219:34"><expr pos:start="219:34" pos:end="219:34"><name pos:start="219:34" pos:end="219:34">h</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

    </block_content>}</block></if> <if type="elseif" pos:start="221:7" pos:end="253:5">else if <condition pos:start="221:15" pos:end="221:56">(<expr pos:start="221:16" pos:end="221:55"><name pos:start="221:16" pos:end="221:34"><name pos:start="221:16" pos:end="221:16">h</name><operator pos:start="221:17" pos:end="221:18">-&gt;</operator><name pos:start="221:19" pos:end="221:21">cur</name><operator pos:start="221:22" pos:end="221:22">.</operator><name pos:start="221:23" pos:end="221:23">f</name><operator pos:start="221:24" pos:end="221:25">-&gt;</operator><name pos:start="221:26" pos:end="221:34">pict_type</name></name> <operator pos:start="221:36" pos:end="221:37">==</operator> <name pos:start="221:39" pos:end="221:55">AV_PICTURE_TYPE_P</name></expr>)</condition> <block pos:start="221:58" pos:end="253:5">{<block_content pos:start="223:9" pos:end="251:37">

        <do pos:start="223:9" pos:end="251:37">do <block pos:start="223:12" pos:end="251:9">{<block_content pos:start="225:13" pos:end="249:13">

            <if_stmt pos:start="225:13" pos:end="227:32"><if pos:start="225:13" pos:end="227:32">if <condition pos:start="225:16" pos:end="225:35">(<expr pos:start="225:17" pos:end="225:34"><call pos:start="225:17" pos:end="225:34"><name pos:start="225:17" pos:end="225:31">check_for_slice</name><argument_list pos:start="225:32" pos:end="225:34">(<argument pos:start="225:33" pos:end="225:33"><expr pos:start="225:33" pos:end="225:33"><name pos:start="225:33" pos:end="225:33">h</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="227:17" pos:end="227:32"><block_content pos:start="227:17" pos:end="227:32">

                <expr_stmt pos:start="227:17" pos:end="227:32"><expr pos:start="227:17" pos:end="227:31"><name pos:start="227:17" pos:end="227:26">skip_count</name> <operator pos:start="227:28" pos:end="227:28">=</operator> <operator pos:start="227:30" pos:end="227:30">-</operator><literal type="number" pos:start="227:31" pos:end="227:31">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="229:13" pos:end="231:51"><if pos:start="229:13" pos:end="231:51">if <condition pos:start="229:16" pos:end="229:54">(<expr pos:start="229:17" pos:end="229:53"><name pos:start="229:17" pos:end="229:33"><name pos:start="229:17" pos:end="229:17">h</name><operator pos:start="229:18" pos:end="229:19">-&gt;</operator><name pos:start="229:20" pos:end="229:33">skip_mode_flag</name></name> <operator pos:start="229:35" pos:end="229:36">&amp;&amp;</operator> <operator pos:start="229:38" pos:end="229:38">(</operator><name pos:start="229:39" pos:end="229:48">skip_count</name> <operator pos:start="229:50" pos:end="229:50">&lt;</operator> <literal type="number" pos:start="229:52" pos:end="229:52">0</literal><operator pos:start="229:53" pos:end="229:53">)</operator></expr>)</condition><block type="pseudo" pos:start="231:17" pos:end="231:51"><block_content pos:start="231:17" pos:end="231:51">

                <expr_stmt pos:start="231:17" pos:end="231:51"><expr pos:start="231:17" pos:end="231:50"><name pos:start="231:17" pos:end="231:26">skip_count</name> <operator pos:start="231:28" pos:end="231:28">=</operator> <call pos:start="231:30" pos:end="231:50"><name pos:start="231:30" pos:end="231:42">get_ue_golomb</name><argument_list pos:start="231:43" pos:end="231:50">(<argument pos:start="231:44" pos:end="231:49"><expr pos:start="231:44" pos:end="231:49"><operator pos:start="231:44" pos:end="231:44">&amp;</operator><name pos:start="231:45" pos:end="231:49"><name pos:start="231:45" pos:end="231:45">h</name><operator pos:start="231:46" pos:end="231:47">-&gt;</operator><name pos:start="231:48" pos:end="231:49">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="233:13" pos:end="249:13"><if pos:start="233:13" pos:end="237:13">if <condition pos:start="233:16" pos:end="233:50">(<expr pos:start="233:17" pos:end="233:49"><name pos:start="233:17" pos:end="233:33"><name pos:start="233:17" pos:end="233:17">h</name><operator pos:start="233:18" pos:end="233:19">-&gt;</operator><name pos:start="233:20" pos:end="233:33">skip_mode_flag</name></name> <operator pos:start="233:35" pos:end="233:36">&amp;&amp;</operator> <name pos:start="233:38" pos:end="233:47">skip_count</name><operator pos:start="233:48" pos:end="233:49">--</operator></expr>)</condition> <block pos:start="233:52" pos:end="237:13">{<block_content pos:start="235:17" pos:end="235:39">

                <expr_stmt pos:start="235:17" pos:end="235:39"><expr pos:start="235:17" pos:end="235:38"><call pos:start="235:17" pos:end="235:38"><name pos:start="235:17" pos:end="235:27">decode_mb_p</name><argument_list pos:start="235:28" pos:end="235:38">(<argument pos:start="235:29" pos:end="235:29"><expr pos:start="235:29" pos:end="235:29"><name pos:start="235:29" pos:end="235:29">h</name></expr></argument>, <argument pos:start="235:32" pos:end="235:37"><expr pos:start="235:32" pos:end="235:37"><name pos:start="235:32" pos:end="235:37">P_SKIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="237:15" pos:end="249:13">else <block pos:start="237:20" pos:end="249:13">{<block_content pos:start="239:17" pos:end="247:44">

                <expr_stmt pos:start="239:17" pos:end="239:77"><expr pos:start="239:17" pos:end="239:76"><name pos:start="239:17" pos:end="239:23">mb_type</name> <operator pos:start="239:25" pos:end="239:25">=</operator> <call pos:start="239:27" pos:end="239:47"><name pos:start="239:27" pos:end="239:39">get_ue_golomb</name><argument_list pos:start="239:40" pos:end="239:47">(<argument pos:start="239:41" pos:end="239:46"><expr pos:start="239:41" pos:end="239:46"><operator pos:start="239:41" pos:end="239:41">&amp;</operator><name pos:start="239:42" pos:end="239:46"><name pos:start="239:42" pos:end="239:42">h</name><operator pos:start="239:43" pos:end="239:44">-&gt;</operator><name pos:start="239:45" pos:end="239:46">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="239:49" pos:end="239:49">+</operator> <name pos:start="239:51" pos:end="239:56">P_SKIP</name> <operator pos:start="239:58" pos:end="239:58">+</operator> <name pos:start="239:60" pos:end="239:76"><name pos:start="239:60" pos:end="239:60">h</name><operator pos:start="239:61" pos:end="239:62">-&gt;</operator><name pos:start="239:63" pos:end="239:76">skip_mode_flag</name></name></expr>;</expr_stmt>

                <if_stmt pos:start="241:17" pos:end="247:44"><if pos:start="241:17" pos:end="243:56">if <condition pos:start="241:20" pos:end="241:36">(<expr pos:start="241:21" pos:end="241:35"><name pos:start="241:21" pos:end="241:27">mb_type</name> <operator pos:start="241:29" pos:end="241:29">&gt;</operator> <name pos:start="241:31" pos:end="241:35">P_8X8</name></expr>)</condition><block type="pseudo" pos:start="243:21" pos:end="243:56"><block_content pos:start="243:21" pos:end="243:56">

                    <expr_stmt pos:start="243:21" pos:end="243:56"><expr pos:start="243:21" pos:end="243:55"><call pos:start="243:21" pos:end="243:55"><name pos:start="243:21" pos:end="243:31">decode_mb_i</name><argument_list pos:start="243:32" pos:end="243:55">(<argument pos:start="243:33" pos:end="243:33"><expr pos:start="243:33" pos:end="243:33"><name pos:start="243:33" pos:end="243:33">h</name></expr></argument>, <argument pos:start="243:36" pos:end="243:54"><expr pos:start="243:36" pos:end="243:54"><name pos:start="243:36" pos:end="243:42">mb_type</name> <operator pos:start="243:44" pos:end="243:44">-</operator> <name pos:start="243:46" pos:end="243:50">P_8X8</name> <operator pos:start="243:52" pos:end="243:52">-</operator> <literal type="number" pos:start="243:54" pos:end="243:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="245:17" pos:end="247:44">else<block type="pseudo" pos:start="247:21" pos:end="247:44"><block_content pos:start="247:21" pos:end="247:44">

                    <expr_stmt pos:start="247:21" pos:end="247:44"><expr pos:start="247:21" pos:end="247:43"><call pos:start="247:21" pos:end="247:43"><name pos:start="247:21" pos:end="247:31">decode_mb_p</name><argument_list pos:start="247:32" pos:end="247:43">(<argument pos:start="247:33" pos:end="247:33"><expr pos:start="247:33" pos:end="247:33"><name pos:start="247:33" pos:end="247:33">h</name></expr></argument>, <argument pos:start="247:36" pos:end="247:42"><expr pos:start="247:36" pos:end="247:42"><name pos:start="247:36" pos:end="247:42">mb_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block> while <condition pos:start="251:17" pos:end="251:36">(<expr pos:start="251:18" pos:end="251:35"><call pos:start="251:18" pos:end="251:35"><name pos:start="251:18" pos:end="251:32">ff_cavs_next_mb</name><argument_list pos:start="251:33" pos:end="251:35">(<argument pos:start="251:34" pos:end="251:34"><expr pos:start="251:34" pos:end="251:34"><name pos:start="251:34" pos:end="251:34">h</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

    </block_content>}</block></if> <else pos:start="253:7" pos:end="285:5">else <block pos:start="253:12" pos:end="285:5">{<block_content pos:start="255:9" pos:end="283:37"> <comment type="block" pos:start="253:14" pos:end="253:36">/* AV_PICTURE_TYPE_B */</comment>

        <do pos:start="255:9" pos:end="283:37">do <block pos:start="255:12" pos:end="283:9">{<block_content pos:start="257:13" pos:end="281:13">

            <if_stmt pos:start="257:13" pos:end="259:32"><if pos:start="257:13" pos:end="259:32">if <condition pos:start="257:16" pos:end="257:35">(<expr pos:start="257:17" pos:end="257:34"><call pos:start="257:17" pos:end="257:34"><name pos:start="257:17" pos:end="257:31">check_for_slice</name><argument_list pos:start="257:32" pos:end="257:34">(<argument pos:start="257:33" pos:end="257:33"><expr pos:start="257:33" pos:end="257:33"><name pos:start="257:33" pos:end="257:33">h</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="259:17" pos:end="259:32"><block_content pos:start="259:17" pos:end="259:32">

                <expr_stmt pos:start="259:17" pos:end="259:32"><expr pos:start="259:17" pos:end="259:31"><name pos:start="259:17" pos:end="259:26">skip_count</name> <operator pos:start="259:28" pos:end="259:28">=</operator> <operator pos:start="259:30" pos:end="259:30">-</operator><literal type="number" pos:start="259:31" pos:end="259:31">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="261:13" pos:end="263:51"><if pos:start="261:13" pos:end="263:51">if <condition pos:start="261:16" pos:end="261:54">(<expr pos:start="261:17" pos:end="261:53"><name pos:start="261:17" pos:end="261:33"><name pos:start="261:17" pos:end="261:17">h</name><operator pos:start="261:18" pos:end="261:19">-&gt;</operator><name pos:start="261:20" pos:end="261:33">skip_mode_flag</name></name> <operator pos:start="261:35" pos:end="261:36">&amp;&amp;</operator> <operator pos:start="261:38" pos:end="261:38">(</operator><name pos:start="261:39" pos:end="261:48">skip_count</name> <operator pos:start="261:50" pos:end="261:50">&lt;</operator> <literal type="number" pos:start="261:52" pos:end="261:52">0</literal><operator pos:start="261:53" pos:end="261:53">)</operator></expr>)</condition><block type="pseudo" pos:start="263:17" pos:end="263:51"><block_content pos:start="263:17" pos:end="263:51">

                <expr_stmt pos:start="263:17" pos:end="263:51"><expr pos:start="263:17" pos:end="263:50"><name pos:start="263:17" pos:end="263:26">skip_count</name> <operator pos:start="263:28" pos:end="263:28">=</operator> <call pos:start="263:30" pos:end="263:50"><name pos:start="263:30" pos:end="263:42">get_ue_golomb</name><argument_list pos:start="263:43" pos:end="263:50">(<argument pos:start="263:44" pos:end="263:49"><expr pos:start="263:44" pos:end="263:49"><operator pos:start="263:44" pos:end="263:44">&amp;</operator><name pos:start="263:45" pos:end="263:49"><name pos:start="263:45" pos:end="263:45">h</name><operator pos:start="263:46" pos:end="263:47">-&gt;</operator><name pos:start="263:48" pos:end="263:49">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="265:13" pos:end="281:13"><if pos:start="265:13" pos:end="269:13">if <condition pos:start="265:16" pos:end="265:50">(<expr pos:start="265:17" pos:end="265:49"><name pos:start="265:17" pos:end="265:33"><name pos:start="265:17" pos:end="265:17">h</name><operator pos:start="265:18" pos:end="265:19">-&gt;</operator><name pos:start="265:20" pos:end="265:33">skip_mode_flag</name></name> <operator pos:start="265:35" pos:end="265:36">&amp;&amp;</operator> <name pos:start="265:38" pos:end="265:47">skip_count</name><operator pos:start="265:48" pos:end="265:49">--</operator></expr>)</condition> <block pos:start="265:52" pos:end="269:13">{<block_content pos:start="267:17" pos:end="267:39">

                <expr_stmt pos:start="267:17" pos:end="267:39"><expr pos:start="267:17" pos:end="267:38"><call pos:start="267:17" pos:end="267:38"><name pos:start="267:17" pos:end="267:27">decode_mb_b</name><argument_list pos:start="267:28" pos:end="267:38">(<argument pos:start="267:29" pos:end="267:29"><expr pos:start="267:29" pos:end="267:29"><name pos:start="267:29" pos:end="267:29">h</name></expr></argument>, <argument pos:start="267:32" pos:end="267:37"><expr pos:start="267:32" pos:end="267:37"><name pos:start="267:32" pos:end="267:37">B_SKIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="269:15" pos:end="281:13">else <block pos:start="269:20" pos:end="281:13">{<block_content pos:start="271:17" pos:end="279:44">

                <expr_stmt pos:start="271:17" pos:end="271:77"><expr pos:start="271:17" pos:end="271:76"><name pos:start="271:17" pos:end="271:23">mb_type</name> <operator pos:start="271:25" pos:end="271:25">=</operator> <call pos:start="271:27" pos:end="271:47"><name pos:start="271:27" pos:end="271:39">get_ue_golomb</name><argument_list pos:start="271:40" pos:end="271:47">(<argument pos:start="271:41" pos:end="271:46"><expr pos:start="271:41" pos:end="271:46"><operator pos:start="271:41" pos:end="271:41">&amp;</operator><name pos:start="271:42" pos:end="271:46"><name pos:start="271:42" pos:end="271:42">h</name><operator pos:start="271:43" pos:end="271:44">-&gt;</operator><name pos:start="271:45" pos:end="271:46">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="271:49" pos:end="271:49">+</operator> <name pos:start="271:51" pos:end="271:56">B_SKIP</name> <operator pos:start="271:58" pos:end="271:58">+</operator> <name pos:start="271:60" pos:end="271:76"><name pos:start="271:60" pos:end="271:60">h</name><operator pos:start="271:61" pos:end="271:62">-&gt;</operator><name pos:start="271:63" pos:end="271:76">skip_mode_flag</name></name></expr>;</expr_stmt>

                <if_stmt pos:start="273:17" pos:end="279:44"><if pos:start="273:17" pos:end="275:56">if <condition pos:start="273:20" pos:end="273:36">(<expr pos:start="273:21" pos:end="273:35"><name pos:start="273:21" pos:end="273:27">mb_type</name> <operator pos:start="273:29" pos:end="273:29">&gt;</operator> <name pos:start="273:31" pos:end="273:35">B_8X8</name></expr>)</condition><block type="pseudo" pos:start="275:21" pos:end="275:56"><block_content pos:start="275:21" pos:end="275:56">

                    <expr_stmt pos:start="275:21" pos:end="275:56"><expr pos:start="275:21" pos:end="275:55"><call pos:start="275:21" pos:end="275:55"><name pos:start="275:21" pos:end="275:31">decode_mb_i</name><argument_list pos:start="275:32" pos:end="275:55">(<argument pos:start="275:33" pos:end="275:33"><expr pos:start="275:33" pos:end="275:33"><name pos:start="275:33" pos:end="275:33">h</name></expr></argument>, <argument pos:start="275:36" pos:end="275:54"><expr pos:start="275:36" pos:end="275:54"><name pos:start="275:36" pos:end="275:42">mb_type</name> <operator pos:start="275:44" pos:end="275:44">-</operator> <name pos:start="275:46" pos:end="275:50">B_8X8</name> <operator pos:start="275:52" pos:end="275:52">-</operator> <literal type="number" pos:start="275:54" pos:end="275:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="277:17" pos:end="279:44">else<block type="pseudo" pos:start="279:21" pos:end="279:44"><block_content pos:start="279:21" pos:end="279:44">

                    <expr_stmt pos:start="279:21" pos:end="279:44"><expr pos:start="279:21" pos:end="279:43"><call pos:start="279:21" pos:end="279:43"><name pos:start="279:21" pos:end="279:31">decode_mb_b</name><argument_list pos:start="279:32" pos:end="279:43">(<argument pos:start="279:33" pos:end="279:33"><expr pos:start="279:33" pos:end="279:33"><name pos:start="279:33" pos:end="279:33">h</name></expr></argument>, <argument pos:start="279:36" pos:end="279:42"><expr pos:start="279:36" pos:end="279:42"><name pos:start="279:36" pos:end="279:42">mb_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block> while <condition pos:start="283:17" pos:end="283:36">(<expr pos:start="283:18" pos:end="283:35"><call pos:start="283:18" pos:end="283:35"><name pos:start="283:18" pos:end="283:32">ff_cavs_next_mb</name><argument_list pos:start="283:33" pos:end="283:35">(<argument pos:start="283:34" pos:end="283:34"><expr pos:start="283:34" pos:end="283:34"><name pos:start="283:34" pos:end="283:34">h</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="287:5" pos:end="287:13"><expr pos:start="287:5" pos:end="287:12"><call pos:start="287:5" pos:end="287:12"><name pos:start="287:5" pos:end="287:10">emms_c</name><argument_list pos:start="287:11" pos:end="287:12">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="289:5" pos:end="297:5"><if pos:start="289:5" pos:end="297:5">if <condition pos:start="289:8" pos:end="289:49">(<expr pos:start="289:9" pos:end="289:48"><name pos:start="289:9" pos:end="289:27"><name pos:start="289:9" pos:end="289:9">h</name><operator pos:start="289:10" pos:end="289:11">-&gt;</operator><name pos:start="289:12" pos:end="289:14">cur</name><operator pos:start="289:15" pos:end="289:15">.</operator><name pos:start="289:16" pos:end="289:16">f</name><operator pos:start="289:17" pos:end="289:18">-&gt;</operator><name pos:start="289:19" pos:end="289:27">pict_type</name></name> <operator pos:start="289:29" pos:end="289:30">!=</operator> <name pos:start="289:32" pos:end="289:48">AV_PICTURE_TYPE_B</name></expr>)</condition> <block pos:start="289:51" pos:end="297:5">{<block_content pos:start="291:9" pos:end="295:47">

        <expr_stmt pos:start="291:9" pos:end="291:36"><expr pos:start="291:9" pos:end="291:35"><call pos:start="291:9" pos:end="291:35"><name pos:start="291:9" pos:end="291:22">av_frame_unref</name><argument_list pos:start="291:23" pos:end="291:35">(<argument pos:start="291:24" pos:end="291:34"><expr pos:start="291:24" pos:end="291:34"><name pos:start="291:24" pos:end="291:32"><name pos:start="291:24" pos:end="291:24">h</name><operator pos:start="291:25" pos:end="291:26">-&gt;</operator><name pos:start="291:27" pos:end="291:29">DPB</name><index pos:start="291:30" pos:end="291:32">[<expr pos:start="291:31" pos:end="291:31"><literal type="number" pos:start="291:31" pos:end="291:31">1</literal></expr>]</index></name><operator pos:start="291:33" pos:end="291:33">.</operator><name pos:start="291:34" pos:end="291:34">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="293:9" pos:end="293:44"><expr pos:start="293:9" pos:end="293:43"><call pos:start="293:9" pos:end="293:43"><name pos:start="293:9" pos:end="293:14">FFSWAP</name><argument_list pos:start="293:15" pos:end="293:43">(<argument pos:start="293:16" pos:end="293:23"><expr pos:start="293:16" pos:end="293:23"><name pos:start="293:16" pos:end="293:23">AVSFrame</name></expr></argument>, <argument pos:start="293:26" pos:end="293:31"><expr pos:start="293:26" pos:end="293:31"><name pos:start="293:26" pos:end="293:31"><name pos:start="293:26" pos:end="293:26">h</name><operator pos:start="293:27" pos:end="293:28">-&gt;</operator><name pos:start="293:29" pos:end="293:31">cur</name></name></expr></argument>, <argument pos:start="293:34" pos:end="293:42"><expr pos:start="293:34" pos:end="293:42"><name pos:start="293:34" pos:end="293:42"><name pos:start="293:34" pos:end="293:34">h</name><operator pos:start="293:35" pos:end="293:36">-&gt;</operator><name pos:start="293:37" pos:end="293:39">DPB</name><index pos:start="293:40" pos:end="293:42">[<expr pos:start="293:41" pos:end="293:41"><literal type="number" pos:start="293:41" pos:end="293:41">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="295:9" pos:end="295:47"><expr pos:start="295:9" pos:end="295:46"><call pos:start="295:9" pos:end="295:46"><name pos:start="295:9" pos:end="295:14">FFSWAP</name><argument_list pos:start="295:15" pos:end="295:46">(<argument pos:start="295:16" pos:end="295:23"><expr pos:start="295:16" pos:end="295:23"><name pos:start="295:16" pos:end="295:23">AVSFrame</name></expr></argument>, <argument pos:start="295:26" pos:end="295:34"><expr pos:start="295:26" pos:end="295:34"><name pos:start="295:26" pos:end="295:34"><name pos:start="295:26" pos:end="295:26">h</name><operator pos:start="295:27" pos:end="295:28">-&gt;</operator><name pos:start="295:29" pos:end="295:31">DPB</name><index pos:start="295:32" pos:end="295:34">[<expr pos:start="295:33" pos:end="295:33"><literal type="number" pos:start="295:33" pos:end="295:33">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="295:37" pos:end="295:45"><expr pos:start="295:37" pos:end="295:45"><name pos:start="295:37" pos:end="295:45"><name pos:start="295:37" pos:end="295:37">h</name><operator pos:start="295:38" pos:end="295:39">-&gt;</operator><name pos:start="295:40" pos:end="295:42">DPB</name><index pos:start="295:43" pos:end="295:45">[<expr pos:start="295:44" pos:end="295:44"><literal type="number" pos:start="295:44" pos:end="295:44">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="299:5" pos:end="299:13">return <expr pos:start="299:12" pos:end="299:12"><literal type="number" pos:start="299:12" pos:end="299:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
