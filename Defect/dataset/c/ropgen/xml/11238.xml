<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11238.c" pos:tabs="8"><function pos:start="1:1" pos:end="55:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:34">usb_net_handle_statusin</name><parameter_list pos:start="1:35" pos:end="1:64">(<parameter pos:start="1:36" pos:end="1:49"><decl pos:start="1:36" pos:end="1:49"><type pos:start="1:36" pos:end="1:49"><name pos:start="1:36" pos:end="1:46">USBNetState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:49">s</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:63"><decl pos:start="1:52" pos:end="1:63"><type pos:start="1:52" pos:end="1:63"><name pos:start="1:52" pos:end="1:60">USBPacket</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:63">p</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="55:1">{<block_content pos:start="5:5" pos:end="53:15">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">8</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="11:29"><if pos:start="9:5" pos:end="11:29">if <condition pos:start="9:8" pos:end="9:19">(<expr pos:start="9:9" pos:end="9:18"><name pos:start="9:9" pos:end="9:14"><name pos:start="9:9" pos:end="9:9">p</name><operator pos:start="9:10" pos:end="9:11">-&gt;</operator><name pos:start="9:12" pos:end="9:14">len</name></name> <operator pos:start="9:16" pos:end="9:16">&lt;</operator> <literal type="number" pos:start="9:18" pos:end="9:18">8</literal></expr>)</condition><block type="pseudo" pos:start="11:9" pos:end="11:29"><block_content pos:start="11:9" pos:end="11:29">

        <return pos:start="11:9" pos:end="11:29">return <expr pos:start="11:16" pos:end="11:28"><name pos:start="11:16" pos:end="11:28">USB_RET_STALL</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:43"><expr pos:start="15:5" pos:end="15:42"><operator pos:start="15:5" pos:end="15:5">(</operator><operator pos:start="15:6" pos:end="15:6">(</operator><name pos:start="15:7" pos:end="15:10">le32</name> <operator pos:start="15:12" pos:end="15:12">*</operator><operator pos:start="15:13" pos:end="15:13">)</operator> <name pos:start="15:15" pos:end="15:21"><name pos:start="15:15" pos:end="15:15">p</name><operator pos:start="15:16" pos:end="15:17">-&gt;</operator><name pos:start="15:18" pos:end="15:21">data</name></name><operator pos:start="15:22" pos:end="15:22">)</operator><index pos:start="15:23" pos:end="15:25">[<expr pos:start="15:24" pos:end="15:24"><literal type="number" pos:start="15:24" pos:end="15:24">0</literal></expr>]</index> <operator pos:start="15:27" pos:end="15:27">=</operator> <call pos:start="15:29" pos:end="15:42"><name pos:start="15:29" pos:end="15:39">cpu_to_le32</name><argument_list pos:start="15:40" pos:end="15:42">(<argument pos:start="15:41" pos:end="15:41"><expr pos:start="15:41" pos:end="15:41"><literal type="number" pos:start="15:41" pos:end="15:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:43"><expr pos:start="17:5" pos:end="17:42"><operator pos:start="17:5" pos:end="17:5">(</operator><operator pos:start="17:6" pos:end="17:6">(</operator><name pos:start="17:7" pos:end="17:10">le32</name> <operator pos:start="17:12" pos:end="17:12">*</operator><operator pos:start="17:13" pos:end="17:13">)</operator> <name pos:start="17:15" pos:end="17:21"><name pos:start="17:15" pos:end="17:15">p</name><operator pos:start="17:16" pos:end="17:17">-&gt;</operator><name pos:start="17:18" pos:end="17:21">data</name></name><operator pos:start="17:22" pos:end="17:22">)</operator><index pos:start="17:23" pos:end="17:25">[<expr pos:start="17:24" pos:end="17:24"><literal type="number" pos:start="17:24" pos:end="17:24">1</literal></expr>]</index> <operator pos:start="17:27" pos:end="17:27">=</operator> <call pos:start="17:29" pos:end="17:42"><name pos:start="17:29" pos:end="17:39">cpu_to_le32</name><argument_list pos:start="17:40" pos:end="17:42">(<argument pos:start="17:41" pos:end="17:41"><expr pos:start="17:41" pos:end="17:41"><literal type="number" pos:start="17:41" pos:end="17:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="26:0"><if pos:start="19:5" pos:end="26:0">if <condition pos:start="19:8" pos:end="19:33">(<expr pos:start="19:9" pos:end="19:32"><operator pos:start="19:9" pos:end="19:9">!</operator><name pos:start="19:10" pos:end="19:32"><name pos:start="19:10" pos:end="19:10">s</name><operator pos:start="19:11" pos:end="19:12">-&gt;</operator><name pos:start="19:13" pos:end="19:22">rndis_resp</name><operator pos:start="19:23" pos:end="19:23">.</operator><name pos:start="19:24" pos:end="19:32">tqh_first</name></name></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="26:0"><block_content pos:start="21:9" pos:end="26:0">

        <expr_stmt pos:start="21:9" pos:end="26:0"><expr pos:start="21:9" pos:end="21:25"><name pos:start="21:9" pos:end="21:11">ret</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <name pos:start="21:15" pos:end="21:25">USB_RET_NAK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<cpp:ifdef pos:start="25:1" pos:end="25:20">#<cpp:directive pos:start="25:2" pos:end="25:6">ifdef</cpp:directive> <name pos:start="25:8" pos:end="25:20">TRAFFIC_DEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="27:5" pos:end="27:76"><expr pos:start="27:5" pos:end="27:75"><call pos:start="27:5" pos:end="27:75"><name pos:start="27:5" pos:end="27:11">fprintf</name><argument_list pos:start="27:12" pos:end="27:75">(<argument pos:start="27:13" pos:end="27:18"><expr pos:start="27:13" pos:end="27:18"><name pos:start="27:13" pos:end="27:18">stderr</name></expr></argument>, <argument pos:start="27:21" pos:end="27:61"><expr pos:start="27:21" pos:end="27:61"><literal type="string" pos:start="27:21" pos:end="27:61">"usbnet: interrupt poll len %u return %d"</literal></expr></argument>, <argument pos:start="27:64" pos:end="27:69"><expr pos:start="27:64" pos:end="27:69"><name pos:start="27:64" pos:end="27:69"><name pos:start="27:64" pos:end="27:64">p</name><operator pos:start="27:65" pos:end="27:66">-&gt;</operator><name pos:start="27:67" pos:end="27:69">len</name></name></expr></argument>, <argument pos:start="27:72" pos:end="27:74"><expr pos:start="27:72" pos:end="27:74"><name pos:start="27:72" pos:end="27:74">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <block pos:start="29:5" pos:end="50:0">{<block_content pos:start="31:9" pos:end="45:32">

        <decl_stmt pos:start="31:9" pos:end="31:14"><decl pos:start="31:9" pos:end="31:13"><type pos:start="31:9" pos:end="31:11"><name pos:start="31:9" pos:end="31:11">int</name></type> <name pos:start="31:13" pos:end="31:13">i</name></decl>;</decl_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:29"><expr pos:start="33:9" pos:end="33:28"><call pos:start="33:9" pos:end="33:28"><name pos:start="33:9" pos:end="33:15">fprintf</name><argument_list pos:start="33:16" pos:end="33:28">(<argument pos:start="33:17" pos:end="33:22"><expr pos:start="33:17" pos:end="33:22"><name pos:start="33:17" pos:end="33:22">stderr</name></expr></argument>, <argument pos:start="33:25" pos:end="33:27"><expr pos:start="33:25" pos:end="33:27"><literal type="string" pos:start="33:25" pos:end="33:27">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="35:9" pos:end="43:9">for <control pos:start="35:13" pos:end="35:33">(<init pos:start="35:14" pos:end="35:19"><expr pos:start="35:14" pos:end="35:18"><name pos:start="35:14" pos:end="35:14">i</name> <operator pos:start="35:16" pos:end="35:16">=</operator> <literal type="number" pos:start="35:18" pos:end="35:18">0</literal></expr>;</init> <condition pos:start="35:21" pos:end="35:28"><expr pos:start="35:21" pos:end="35:27"><name pos:start="35:21" pos:end="35:21">i</name> <operator pos:start="35:23" pos:end="35:23">&lt;</operator> <name pos:start="35:25" pos:end="35:27">ret</name></expr>;</condition> <incr pos:start="35:30" pos:end="35:32"><expr pos:start="35:30" pos:end="35:32"><name pos:start="35:30" pos:end="35:30">i</name><operator pos:start="35:31" pos:end="35:32">++</operator></expr></incr>)</control> <block pos:start="35:35" pos:end="43:9">{<block_content pos:start="37:13" pos:end="41:49">

            <if_stmt pos:start="37:13" pos:end="39:46"><if pos:start="37:13" pos:end="39:46">if <condition pos:start="37:16" pos:end="37:26">(<expr pos:start="37:17" pos:end="37:25"><operator pos:start="37:17" pos:end="37:17">!</operator><operator pos:start="37:18" pos:end="37:18">(</operator><name pos:start="37:19" pos:end="37:19">i</name> <operator pos:start="37:21" pos:end="37:21">&amp;</operator> <literal type="number" pos:start="37:23" pos:end="37:24">15</literal><operator pos:start="37:25" pos:end="37:25">)</operator></expr>)</condition><block type="pseudo" pos:start="39:17" pos:end="39:46"><block_content pos:start="39:17" pos:end="39:46">

                <expr_stmt pos:start="39:17" pos:end="39:46"><expr pos:start="39:17" pos:end="39:45"><call pos:start="39:17" pos:end="39:45"><name pos:start="39:17" pos:end="39:23">fprintf</name><argument_list pos:start="39:24" pos:end="39:45">(<argument pos:start="39:25" pos:end="39:30"><expr pos:start="39:25" pos:end="39:30"><name pos:start="39:25" pos:end="39:30">stderr</name></expr></argument>, <argument pos:start="39:33" pos:end="39:41"><expr pos:start="39:33" pos:end="39:41"><literal type="string" pos:start="39:33" pos:end="39:41">"\n%04x:"</literal></expr></argument>, <argument pos:start="39:44" pos:end="39:44"><expr pos:start="39:44" pos:end="39:44"><name pos:start="39:44" pos:end="39:44">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:49"><expr pos:start="41:13" pos:end="41:48"><call pos:start="41:13" pos:end="41:48"><name pos:start="41:13" pos:end="41:19">fprintf</name><argument_list pos:start="41:20" pos:end="41:48">(<argument pos:start="41:21" pos:end="41:26"><expr pos:start="41:21" pos:end="41:26"><name pos:start="41:21" pos:end="41:26">stderr</name></expr></argument>, <argument pos:start="41:29" pos:end="41:35"><expr pos:start="41:29" pos:end="41:35"><literal type="string" pos:start="41:29" pos:end="41:35">" %02x"</literal></expr></argument>, <argument pos:start="41:38" pos:end="41:47"><expr pos:start="41:38" pos:end="41:47"><name pos:start="41:38" pos:end="41:47"><name pos:start="41:38" pos:end="41:38">p</name><operator pos:start="41:39" pos:end="41:40">-&gt;</operator><name pos:start="41:41" pos:end="41:44">data</name><index pos:start="41:45" pos:end="41:47">[<expr pos:start="41:46" pos:end="41:46"><name pos:start="41:46" pos:end="41:46">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="45:9" pos:end="45:32"><expr pos:start="45:9" pos:end="45:31"><call pos:start="45:9" pos:end="45:31"><name pos:start="45:9" pos:end="45:15">fprintf</name><argument_list pos:start="45:16" pos:end="45:31">(<argument pos:start="45:17" pos:end="45:22"><expr pos:start="45:17" pos:end="45:22"><name pos:start="45:17" pos:end="45:22">stderr</name></expr></argument>, <argument pos:start="45:25" pos:end="45:30"><expr pos:start="45:25" pos:end="45:30"><literal type="string" pos:start="45:25" pos:end="45:30">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

<cpp:endif pos:start="49:1" pos:end="49:6">#<cpp:directive pos:start="49:2" pos:end="49:6">endif</cpp:directive></cpp:endif>



    <return pos:start="53:5" pos:end="53:15">return <expr pos:start="53:12" pos:end="53:14"><name pos:start="53:12" pos:end="53:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
