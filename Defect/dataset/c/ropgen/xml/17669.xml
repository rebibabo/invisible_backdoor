<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17669.c" pos:tabs="8"><function pos:start="1:1" pos:end="163:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:22">vmstate_save_state</name><parameter_list pos:start="1:23" pos:end="3:52">(<parameter pos:start="1:24" pos:end="1:34"><decl pos:start="1:24" pos:end="1:34"><type pos:start="1:24" pos:end="1:34"><name pos:start="1:24" pos:end="1:31">QEMUFile</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:34">f</name></decl></parameter>, <parameter pos:start="1:37" pos:end="1:66"><decl pos:start="1:37" pos:end="1:66"><type pos:start="1:37" pos:end="1:66"><specifier pos:start="1:37" pos:end="1:41">const</specifier> <name pos:start="1:43" pos:end="1:60">VMStateDescription</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:66">vmsd</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:36"><decl pos:start="3:25" pos:end="3:36"><type pos:start="3:25" pos:end="3:36"><name pos:start="3:25" pos:end="3:28">void</name> <modifier pos:start="3:30" pos:end="3:30">*</modifier></type><name pos:start="3:31" pos:end="3:36">opaque</name></decl></parameter>, <parameter pos:start="3:39" pos:end="3:51"><decl pos:start="3:39" pos:end="3:51"><type pos:start="3:39" pos:end="3:51"><name pos:start="3:39" pos:end="3:43">QJSON</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:51">vmdesc</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="163:1">{<block_content pos:start="7:5" pos:end="161:13">

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">VMStateField</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:23">field</name> <init pos:start="9:25" pos:end="9:38">= <expr pos:start="9:27" pos:end="9:38"><name pos:start="9:27" pos:end="9:38"><name pos:start="9:27" pos:end="9:30">vmsd</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:38">fields</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:45"><expr pos:start="13:5" pos:end="13:44"><call pos:start="13:5" pos:end="13:44"><name pos:start="13:5" pos:end="13:32">trace_vmstate_save_state_top</name><argument_list pos:start="13:33" pos:end="13:44">(<argument pos:start="13:34" pos:end="13:43"><expr pos:start="13:34" pos:end="13:43"><name pos:start="13:34" pos:end="13:43"><name pos:start="13:34" pos:end="13:37">vmsd</name><operator pos:start="13:38" pos:end="13:39">-&gt;</operator><name pos:start="13:40" pos:end="13:43">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="17:5" pos:end="31:5"><if pos:start="17:5" pos:end="31:5">if <condition pos:start="17:8" pos:end="17:23">(<expr pos:start="17:9" pos:end="17:22"><name pos:start="17:9" pos:end="17:22"><name pos:start="17:9" pos:end="17:12">vmsd</name><operator pos:start="17:13" pos:end="17:14">-&gt;</operator><name pos:start="17:15" pos:end="17:22">pre_save</name></name></expr>)</condition> <block pos:start="17:25" pos:end="31:5">{<block_content pos:start="19:9" pos:end="29:9">

        <expr_stmt pos:start="19:9" pos:end="19:37"><expr pos:start="19:9" pos:end="19:36"><name pos:start="19:9" pos:end="19:11">ret</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <call pos:start="19:15" pos:end="19:36"><name pos:start="19:15" pos:end="19:28"><name pos:start="19:15" pos:end="19:18">vmsd</name><operator pos:start="19:19" pos:end="19:20">-&gt;</operator><name pos:start="19:21" pos:end="19:28">pre_save</name></name><argument_list pos:start="19:29" pos:end="19:36">(<argument pos:start="19:30" pos:end="19:35"><expr pos:start="19:30" pos:end="19:35"><name pos:start="19:30" pos:end="19:35">opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:63"><expr pos:start="21:9" pos:end="21:62"><call pos:start="21:9" pos:end="21:62"><name pos:start="21:9" pos:end="21:45">trace_vmstate_save_state_pre_save_res</name><argument_list pos:start="21:46" pos:end="21:62">(<argument pos:start="21:47" pos:end="21:56"><expr pos:start="21:47" pos:end="21:56"><name pos:start="21:47" pos:end="21:56"><name pos:start="21:47" pos:end="21:50">vmsd</name><operator pos:start="21:51" pos:end="21:52">-&gt;</operator><name pos:start="21:53" pos:end="21:56">name</name></name></expr></argument>, <argument pos:start="21:59" pos:end="21:61"><expr pos:start="21:59" pos:end="21:61"><name pos:start="21:59" pos:end="21:61">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="29:9"><if pos:start="23:9" pos:end="29:9">if <condition pos:start="23:12" pos:end="23:16">(<expr pos:start="23:13" pos:end="23:15"><name pos:start="23:13" pos:end="23:15">ret</name></expr>)</condition> <block pos:start="23:18" pos:end="29:9">{<block_content pos:start="25:13" pos:end="27:23">

            <expr_stmt pos:start="25:13" pos:end="25:60"><expr pos:start="25:13" pos:end="25:59"><call pos:start="25:13" pos:end="25:59"><name pos:start="25:13" pos:end="25:24">error_report</name><argument_list pos:start="25:25" pos:end="25:59">(<argument pos:start="25:26" pos:end="25:46"><expr pos:start="25:26" pos:end="25:46"><literal type="string" pos:start="25:26" pos:end="25:46">"pre-save failed: %s"</literal></expr></argument>, <argument pos:start="25:49" pos:end="25:58"><expr pos:start="25:49" pos:end="25:58"><name pos:start="25:49" pos:end="25:58"><name pos:start="25:49" pos:end="25:52">vmsd</name><operator pos:start="25:53" pos:end="25:54">-&gt;</operator><name pos:start="25:55" pos:end="25:58">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="27:13" pos:end="27:23">return <expr pos:start="27:20" pos:end="27:22"><name pos:start="27:20" pos:end="27:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="43:5"><if pos:start="35:5" pos:end="43:5">if <condition pos:start="35:8" pos:end="35:15">(<expr pos:start="35:9" pos:end="35:14"><name pos:start="35:9" pos:end="35:14">vmdesc</name></expr>)</condition> <block pos:start="35:17" pos:end="43:5">{<block_content pos:start="37:9" pos:end="41:43">

        <expr_stmt pos:start="37:9" pos:end="37:55"><expr pos:start="37:9" pos:end="37:54"><call pos:start="37:9" pos:end="37:54"><name pos:start="37:9" pos:end="37:21">json_prop_str</name><argument_list pos:start="37:22" pos:end="37:54">(<argument pos:start="37:23" pos:end="37:28"><expr pos:start="37:23" pos:end="37:28"><name pos:start="37:23" pos:end="37:28">vmdesc</name></expr></argument>, <argument pos:start="37:31" pos:end="37:41"><expr pos:start="37:31" pos:end="37:41"><literal type="string" pos:start="37:31" pos:end="37:41">"vmsd_name"</literal></expr></argument>, <argument pos:start="37:44" pos:end="37:53"><expr pos:start="37:44" pos:end="37:53"><name pos:start="37:44" pos:end="37:53"><name pos:start="37:44" pos:end="37:47">vmsd</name><operator pos:start="37:48" pos:end="37:49">-&gt;</operator><name pos:start="37:50" pos:end="37:53">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:59"><expr pos:start="39:9" pos:end="39:58"><call pos:start="39:9" pos:end="39:58"><name pos:start="39:9" pos:end="39:21">json_prop_int</name><argument_list pos:start="39:22" pos:end="39:58">(<argument pos:start="39:23" pos:end="39:28"><expr pos:start="39:23" pos:end="39:28"><name pos:start="39:23" pos:end="39:28">vmdesc</name></expr></argument>, <argument pos:start="39:31" pos:end="39:39"><expr pos:start="39:31" pos:end="39:39"><literal type="string" pos:start="39:31" pos:end="39:39">"version"</literal></expr></argument>, <argument pos:start="39:42" pos:end="39:57"><expr pos:start="39:42" pos:end="39:57"><name pos:start="39:42" pos:end="39:57"><name pos:start="39:42" pos:end="39:45">vmsd</name><operator pos:start="39:46" pos:end="39:47">-&gt;</operator><name pos:start="39:48" pos:end="39:57">version_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:43"><expr pos:start="41:9" pos:end="41:42"><call pos:start="41:9" pos:end="41:42"><name pos:start="41:9" pos:end="41:24">json_start_array</name><argument_list pos:start="41:25" pos:end="41:42">(<argument pos:start="41:26" pos:end="41:31"><expr pos:start="41:26" pos:end="41:31"><name pos:start="41:26" pos:end="41:31">vmdesc</name></expr></argument>, <argument pos:start="41:34" pos:end="41:41"><expr pos:start="41:34" pos:end="41:41"><literal type="string" pos:start="41:34" pos:end="41:41">"fields"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <while pos:start="47:5" pos:end="145:5">while <condition pos:start="47:11" pos:end="47:23">(<expr pos:start="47:12" pos:end="47:22"><name pos:start="47:12" pos:end="47:22"><name pos:start="47:12" pos:end="47:16">field</name><operator pos:start="47:17" pos:end="47:18">-&gt;</operator><name pos:start="47:19" pos:end="47:22">name</name></name></expr>)</condition> <block pos:start="47:25" pos:end="145:5">{<block_content pos:start="49:9" pos:end="143:16">

        <if_stmt pos:start="49:9" pos:end="141:9"><if pos:start="49:9" pos:end="129:9">if <condition pos:start="49:12" pos:end="51:58">(<expr pos:start="49:13" pos:end="51:57"><operator pos:start="49:13" pos:end="49:13">!</operator><name pos:start="49:14" pos:end="49:32"><name pos:start="49:14" pos:end="49:18">field</name><operator pos:start="49:19" pos:end="49:20">-&gt;</operator><name pos:start="49:21" pos:end="49:32">field_exists</name></name> <operator pos:start="49:34" pos:end="49:35">||</operator>

            <call pos:start="51:13" pos:end="51:57"><name pos:start="51:13" pos:end="51:31"><name pos:start="51:13" pos:end="51:17">field</name><operator pos:start="51:18" pos:end="51:19">-&gt;</operator><name pos:start="51:20" pos:end="51:31">field_exists</name></name><argument_list pos:start="51:32" pos:end="51:57">(<argument pos:start="51:33" pos:end="51:38"><expr pos:start="51:33" pos:end="51:38"><name pos:start="51:33" pos:end="51:38">opaque</name></expr></argument>, <argument pos:start="51:41" pos:end="51:56"><expr pos:start="51:41" pos:end="51:56"><name pos:start="51:41" pos:end="51:56"><name pos:start="51:41" pos:end="51:44">vmsd</name><operator pos:start="51:45" pos:end="51:46">-&gt;</operator><name pos:start="51:47" pos:end="51:56">version_id</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:60" pos:end="129:9">{<block_content pos:start="53:13" pos:end="127:13">

            <decl_stmt pos:start="53:13" pos:end="53:54"><decl pos:start="53:13" pos:end="53:53"><type pos:start="53:13" pos:end="53:18"><name pos:start="53:13" pos:end="53:16">void</name> <modifier pos:start="53:18" pos:end="53:18">*</modifier></type><name pos:start="53:19" pos:end="53:28">first_elem</name> <init pos:start="53:30" pos:end="53:53">= <expr pos:start="53:32" pos:end="53:53"><name pos:start="53:32" pos:end="53:37">opaque</name> <operator pos:start="53:39" pos:end="53:39">+</operator> <name pos:start="53:41" pos:end="53:53"><name pos:start="53:41" pos:end="53:45">field</name><operator pos:start="53:46" pos:end="53:47">-&gt;</operator><name pos:start="53:48" pos:end="53:53">offset</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="55:13" pos:end="55:60"><decl pos:start="55:13" pos:end="55:17"><type pos:start="55:13" pos:end="55:15"><name pos:start="55:13" pos:end="55:15">int</name></type> <name pos:start="55:17" pos:end="55:17">i</name></decl>, <decl pos:start="55:20" pos:end="55:59"><type ref="prev" pos:start="55:13" pos:end="55:15"/><name pos:start="55:20" pos:end="55:26">n_elems</name> <init pos:start="55:28" pos:end="55:59">= <expr pos:start="55:30" pos:end="55:59"><call pos:start="55:30" pos:end="55:59"><name pos:start="55:30" pos:end="55:44">vmstate_n_elems</name><argument_list pos:start="55:45" pos:end="55:59">(<argument pos:start="55:46" pos:end="55:51"><expr pos:start="55:46" pos:end="55:51"><name pos:start="55:46" pos:end="55:51">opaque</name></expr></argument>, <argument pos:start="55:54" pos:end="55:58"><expr pos:start="55:54" pos:end="55:58"><name pos:start="55:54" pos:end="55:58">field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="57:13" pos:end="57:51"><decl pos:start="57:13" pos:end="57:50"><type pos:start="57:13" pos:end="57:15"><name pos:start="57:13" pos:end="57:15">int</name></type> <name pos:start="57:17" pos:end="57:20">size</name> <init pos:start="57:22" pos:end="57:50">= <expr pos:start="57:24" pos:end="57:50"><call pos:start="57:24" pos:end="57:50"><name pos:start="57:24" pos:end="57:35">vmstate_size</name><argument_list pos:start="57:36" pos:end="57:50">(<argument pos:start="57:37" pos:end="57:42"><expr pos:start="57:37" pos:end="57:42"><name pos:start="57:37" pos:end="57:42">opaque</name></expr></argument>, <argument pos:start="57:45" pos:end="57:49"><expr pos:start="57:45" pos:end="57:49"><name pos:start="57:45" pos:end="57:49">field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="59:13" pos:end="59:46"><decl pos:start="59:13" pos:end="59:30"><type pos:start="59:13" pos:end="59:19"><name pos:start="59:13" pos:end="59:19">int64_t</name></type> <name pos:start="59:21" pos:end="59:30">old_offset</name></decl>, <decl pos:start="59:33" pos:end="59:45"><type ref="prev" pos:start="59:13" pos:end="59:19"/><name pos:start="59:33" pos:end="59:45">written_bytes</name></decl>;</decl_stmt>

            <decl_stmt pos:start="61:13" pos:end="61:40"><decl pos:start="61:13" pos:end="61:39"><type pos:start="61:13" pos:end="61:19"><name pos:start="61:13" pos:end="61:17">QJSON</name> <modifier pos:start="61:19" pos:end="61:19">*</modifier></type><name pos:start="61:20" pos:end="61:30">vmdesc_loop</name> <init pos:start="61:32" pos:end="61:39">= <expr pos:start="61:34" pos:end="61:39"><name pos:start="61:34" pos:end="61:39">vmdesc</name></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="65:13" pos:end="65:76"><expr pos:start="65:13" pos:end="65:75"><call pos:start="65:13" pos:end="65:75"><name pos:start="65:13" pos:end="65:41">trace_vmstate_save_state_loop</name><argument_list pos:start="65:42" pos:end="65:75">(<argument pos:start="65:43" pos:end="65:52"><expr pos:start="65:43" pos:end="65:52"><name pos:start="65:43" pos:end="65:52"><name pos:start="65:43" pos:end="65:46">vmsd</name><operator pos:start="65:47" pos:end="65:48">-&gt;</operator><name pos:start="65:49" pos:end="65:52">name</name></name></expr></argument>, <argument pos:start="65:55" pos:end="65:65"><expr pos:start="65:55" pos:end="65:65"><name pos:start="65:55" pos:end="65:65"><name pos:start="65:55" pos:end="65:59">field</name><operator pos:start="65:60" pos:end="65:61">-&gt;</operator><name pos:start="65:62" pos:end="65:65">name</name></name></expr></argument>, <argument pos:start="65:68" pos:end="65:74"><expr pos:start="65:68" pos:end="65:74"><name pos:start="65:68" pos:end="65:74">n_elems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="67:13" pos:end="73:13"><if pos:start="67:13" pos:end="73:13">if <condition pos:start="67:16" pos:end="67:43">(<expr pos:start="67:17" pos:end="67:42"><name pos:start="67:17" pos:end="67:28"><name pos:start="67:17" pos:end="67:21">field</name><operator pos:start="67:22" pos:end="67:23">-&gt;</operator><name pos:start="67:24" pos:end="67:28">flags</name></name> <operator pos:start="67:30" pos:end="67:30">&amp;</operator> <name pos:start="67:32" pos:end="67:42">VMS_POINTER</name></expr>)</condition> <block pos:start="67:45" pos:end="73:13">{<block_content pos:start="69:17" pos:end="71:56">

                <expr_stmt pos:start="69:17" pos:end="69:50"><expr pos:start="69:17" pos:end="69:49"><name pos:start="69:17" pos:end="69:26">first_elem</name> <operator pos:start="69:28" pos:end="69:28">=</operator> <operator pos:start="69:30" pos:end="69:30">*</operator><operator pos:start="69:31" pos:end="69:31">(</operator><name pos:start="69:32" pos:end="69:35">void</name> <operator pos:start="69:37" pos:end="69:37">*</operator><operator pos:start="69:38" pos:end="69:38">*</operator><operator pos:start="69:39" pos:end="69:39">)</operator><name pos:start="69:40" pos:end="69:49">first_elem</name></expr>;</expr_stmt>

                <expr_stmt pos:start="71:17" pos:end="71:56"><expr pos:start="71:17" pos:end="71:55"><call pos:start="71:17" pos:end="71:55"><name pos:start="71:17" pos:end="71:22">assert</name><argument_list pos:start="71:23" pos:end="71:55">(<argument pos:start="71:24" pos:end="71:54"><expr pos:start="71:24" pos:end="71:54"><name pos:start="71:24" pos:end="71:33">first_elem</name> <operator pos:start="71:35" pos:end="71:36">||</operator> <operator pos:start="71:38" pos:end="71:38">!</operator><name pos:start="71:39" pos:end="71:45">n_elems</name> <operator pos:start="71:47" pos:end="71:48">||</operator> <operator pos:start="71:50" pos:end="71:50">!</operator><name pos:start="71:51" pos:end="71:54">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <for pos:start="75:13" pos:end="127:13">for <control pos:start="75:17" pos:end="75:41">(<init pos:start="75:18" pos:end="75:23"><expr pos:start="75:18" pos:end="75:22"><name pos:start="75:18" pos:end="75:18">i</name> <operator pos:start="75:20" pos:end="75:20">=</operator> <literal type="number" pos:start="75:22" pos:end="75:22">0</literal></expr>;</init> <condition pos:start="75:25" pos:end="75:36"><expr pos:start="75:25" pos:end="75:35"><name pos:start="75:25" pos:end="75:25">i</name> <operator pos:start="75:27" pos:end="75:27">&lt;</operator> <name pos:start="75:29" pos:end="75:35">n_elems</name></expr>;</condition> <incr pos:start="75:38" pos:end="75:40"><expr pos:start="75:38" pos:end="75:40"><name pos:start="75:38" pos:end="75:38">i</name><operator pos:start="75:39" pos:end="75:40">++</operator></expr></incr>)</control> <block pos:start="75:43" pos:end="127:13">{<block_content pos:start="77:17" pos:end="125:17">

                <decl_stmt pos:start="77:17" pos:end="77:56"><decl pos:start="77:17" pos:end="77:55"><type pos:start="77:17" pos:end="77:22"><name pos:start="77:17" pos:end="77:20">void</name> <modifier pos:start="77:22" pos:end="77:22">*</modifier></type><name pos:start="77:23" pos:end="77:31">curr_elem</name> <init pos:start="77:33" pos:end="77:55">= <expr pos:start="77:35" pos:end="77:55"><name pos:start="77:35" pos:end="77:44">first_elem</name> <operator pos:start="77:46" pos:end="77:46">+</operator> <name pos:start="77:48" pos:end="77:51">size</name> <operator pos:start="77:53" pos:end="77:53">*</operator> <name pos:start="77:55" pos:end="77:55">i</name></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="81:17" pos:end="81:76"><expr pos:start="81:17" pos:end="81:75"><call pos:start="81:17" pos:end="81:75"><name pos:start="81:17" pos:end="81:37">vmsd_desc_field_start</name><argument_list pos:start="81:38" pos:end="81:75">(<argument pos:start="81:39" pos:end="81:42"><expr pos:start="81:39" pos:end="81:42"><name pos:start="81:39" pos:end="81:42">vmsd</name></expr></argument>, <argument pos:start="81:45" pos:end="81:55"><expr pos:start="81:45" pos:end="81:55"><name pos:start="81:45" pos:end="81:55">vmdesc_loop</name></expr></argument>, <argument pos:start="81:58" pos:end="81:62"><expr pos:start="81:58" pos:end="81:62"><name pos:start="81:58" pos:end="81:62">field</name></expr></argument>, <argument pos:start="81:65" pos:end="81:65"><expr pos:start="81:65" pos:end="81:65"><name pos:start="81:65" pos:end="81:65">i</name></expr></argument>, <argument pos:start="81:68" pos:end="81:74"><expr pos:start="81:68" pos:end="81:74"><name pos:start="81:68" pos:end="81:74">n_elems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="83:17" pos:end="83:48"><expr pos:start="83:17" pos:end="83:47"><name pos:start="83:17" pos:end="83:26">old_offset</name> <operator pos:start="83:28" pos:end="83:28">=</operator> <call pos:start="83:30" pos:end="83:47"><name pos:start="83:30" pos:end="83:44">qemu_ftell_fast</name><argument_list pos:start="83:45" pos:end="83:47">(<argument pos:start="83:46" pos:end="83:46"><expr pos:start="83:46" pos:end="83:46"><name pos:start="83:46" pos:end="83:46">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="85:17" pos:end="91:17"><if pos:start="85:17" pos:end="91:17">if <condition pos:start="85:20" pos:end="85:56">(<expr pos:start="85:21" pos:end="85:55"><name pos:start="85:21" pos:end="85:32"><name pos:start="85:21" pos:end="85:25">field</name><operator pos:start="85:26" pos:end="85:27">-&gt;</operator><name pos:start="85:28" pos:end="85:32">flags</name></name> <operator pos:start="85:34" pos:end="85:34">&amp;</operator> <name pos:start="85:36" pos:end="85:55">VMS_ARRAY_OF_POINTER</name></expr>)</condition> <block pos:start="85:58" pos:end="91:17">{<block_content pos:start="87:21" pos:end="89:52">

                    <expr_stmt pos:start="87:21" pos:end="87:38"><expr pos:start="87:21" pos:end="87:37"><call pos:start="87:21" pos:end="87:37"><name pos:start="87:21" pos:end="87:26">assert</name><argument_list pos:start="87:27" pos:end="87:37">(<argument pos:start="87:28" pos:end="87:36"><expr pos:start="87:28" pos:end="87:36"><name pos:start="87:28" pos:end="87:36">curr_elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="89:21" pos:end="89:52"><expr pos:start="89:21" pos:end="89:51"><name pos:start="89:21" pos:end="89:29">curr_elem</name> <operator pos:start="89:31" pos:end="89:31">=</operator> <operator pos:start="89:33" pos:end="89:33">*</operator><operator pos:start="89:34" pos:end="89:34">(</operator><name pos:start="89:35" pos:end="89:38">void</name> <operator pos:start="89:40" pos:end="89:40">*</operator><operator pos:start="89:41" pos:end="89:41">*</operator><operator pos:start="89:42" pos:end="89:42">)</operator><name pos:start="89:43" pos:end="89:51">curr_elem</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="93:17" pos:end="109:17"><if pos:start="93:17" pos:end="101:17">if <condition pos:start="93:20" pos:end="93:39">(<expr pos:start="93:21" pos:end="93:38"><operator pos:start="93:21" pos:end="93:21">!</operator><name pos:start="93:22" pos:end="93:30">curr_elem</name> <operator pos:start="93:32" pos:end="93:33">&amp;&amp;</operator> <name pos:start="93:35" pos:end="93:38">size</name></expr>)</condition> <block pos:start="93:41" pos:end="101:17">{<block_content pos:start="97:21" pos:end="99:77">

                    <comment type="block" pos:start="95:21" pos:end="95:77">/* if null pointer write placeholder and do not follow */</comment>

                    <expr_stmt pos:start="97:21" pos:end="97:64"><expr pos:start="97:21" pos:end="97:63"><call pos:start="97:21" pos:end="97:63"><name pos:start="97:21" pos:end="97:26">assert</name><argument_list pos:start="97:27" pos:end="97:63">(<argument pos:start="97:28" pos:end="97:62"><expr pos:start="97:28" pos:end="97:62"><name pos:start="97:28" pos:end="97:39"><name pos:start="97:28" pos:end="97:32">field</name><operator pos:start="97:33" pos:end="97:34">-&gt;</operator><name pos:start="97:35" pos:end="97:39">flags</name></name> <operator pos:start="97:41" pos:end="97:41">&amp;</operator> <name pos:start="97:43" pos:end="97:62">VMS_ARRAY_OF_POINTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="99:21" pos:end="99:77"><expr pos:start="99:21" pos:end="99:76"><call pos:start="99:21" pos:end="99:76"><name pos:start="99:21" pos:end="99:44"><name pos:start="99:21" pos:end="99:40">vmstate_info_nullptr</name><operator pos:start="99:41" pos:end="99:41">.</operator><name pos:start="99:42" pos:end="99:44">put</name></name><argument_list pos:start="99:45" pos:end="99:76">(<argument pos:start="99:46" pos:end="99:46"><expr pos:start="99:46" pos:end="99:46"><name pos:start="99:46" pos:end="99:46">f</name></expr></argument>, <argument pos:start="99:49" pos:end="99:57"><expr pos:start="99:49" pos:end="99:57"><name pos:start="99:49" pos:end="99:57">curr_elem</name></expr></argument>, <argument pos:start="99:60" pos:end="99:63"><expr pos:start="99:60" pos:end="99:63"><name pos:start="99:60" pos:end="99:63">size</name></expr></argument>, <argument pos:start="99:66" pos:end="99:69"><expr pos:start="99:66" pos:end="99:69"><name pos:start="99:66" pos:end="99:69">NULL</name></expr></argument>, <argument pos:start="99:72" pos:end="99:75"><expr pos:start="99:72" pos:end="99:75"><name pos:start="99:72" pos:end="99:75">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="101:19" pos:end="105:17">else if <condition pos:start="101:27" pos:end="101:53">(<expr pos:start="101:28" pos:end="101:52"><name pos:start="101:28" pos:end="101:39"><name pos:start="101:28" pos:end="101:32">field</name><operator pos:start="101:33" pos:end="101:34">-&gt;</operator><name pos:start="101:35" pos:end="101:39">flags</name></name> <operator pos:start="101:41" pos:end="101:41">&amp;</operator> <name pos:start="101:43" pos:end="101:52">VMS_STRUCT</name></expr>)</condition> <block pos:start="101:55" pos:end="105:17">{<block_content pos:start="103:21" pos:end="103:79">

                    <expr_stmt pos:start="103:21" pos:end="103:79"><expr pos:start="103:21" pos:end="103:78"><call pos:start="103:21" pos:end="103:78"><name pos:start="103:21" pos:end="103:38">vmstate_save_state</name><argument_list pos:start="103:39" pos:end="103:78">(<argument pos:start="103:40" pos:end="103:40"><expr pos:start="103:40" pos:end="103:40"><name pos:start="103:40" pos:end="103:40">f</name></expr></argument>, <argument pos:start="103:43" pos:end="103:53"><expr pos:start="103:43" pos:end="103:53"><name pos:start="103:43" pos:end="103:53"><name pos:start="103:43" pos:end="103:47">field</name><operator pos:start="103:48" pos:end="103:49">-&gt;</operator><name pos:start="103:50" pos:end="103:53">vmsd</name></name></expr></argument>, <argument pos:start="103:56" pos:end="103:64"><expr pos:start="103:56" pos:end="103:64"><name pos:start="103:56" pos:end="103:64">curr_elem</name></expr></argument>, <argument pos:start="103:67" pos:end="103:77"><expr pos:start="103:67" pos:end="103:77"><name pos:start="103:67" pos:end="103:77">vmdesc_loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="105:19" pos:end="109:17">else <block pos:start="105:24" pos:end="109:17">{<block_content pos:start="107:21" pos:end="107:77">

                    <expr_stmt pos:start="107:21" pos:end="107:77"><expr pos:start="107:21" pos:end="107:76"><call pos:start="107:21" pos:end="107:76"><name pos:start="107:21" pos:end="107:36"><name pos:start="107:21" pos:end="107:25">field</name><operator pos:start="107:26" pos:end="107:27">-&gt;</operator><name pos:start="107:28" pos:end="107:31">info</name><operator pos:start="107:32" pos:end="107:33">-&gt;</operator><name pos:start="107:34" pos:end="107:36">put</name></name><argument_list pos:start="107:37" pos:end="107:76">(<argument pos:start="107:38" pos:end="107:38"><expr pos:start="107:38" pos:end="107:38"><name pos:start="107:38" pos:end="107:38">f</name></expr></argument>, <argument pos:start="107:41" pos:end="107:49"><expr pos:start="107:41" pos:end="107:49"><name pos:start="107:41" pos:end="107:49">curr_elem</name></expr></argument>, <argument pos:start="107:52" pos:end="107:55"><expr pos:start="107:52" pos:end="107:55"><name pos:start="107:52" pos:end="107:55">size</name></expr></argument>, <argument pos:start="107:58" pos:end="107:62"><expr pos:start="107:58" pos:end="107:62"><name pos:start="107:58" pos:end="107:62">field</name></expr></argument>, <argument pos:start="107:65" pos:end="107:75"><expr pos:start="107:65" pos:end="107:75"><name pos:start="107:65" pos:end="107:75">vmdesc_loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>



                <expr_stmt pos:start="113:17" pos:end="113:64"><expr pos:start="113:17" pos:end="113:63"><name pos:start="113:17" pos:end="113:29">written_bytes</name> <operator pos:start="113:31" pos:end="113:31">=</operator> <call pos:start="113:33" pos:end="113:50"><name pos:start="113:33" pos:end="113:47">qemu_ftell_fast</name><argument_list pos:start="113:48" pos:end="113:50">(<argument pos:start="113:49" pos:end="113:49"><expr pos:start="113:49" pos:end="113:49"><name pos:start="113:49" pos:end="113:49">f</name></expr></argument>)</argument_list></call> <operator pos:start="113:52" pos:end="113:52">-</operator> <name pos:start="113:54" pos:end="113:63">old_offset</name></expr>;</expr_stmt>

                <expr_stmt pos:start="115:17" pos:end="115:80"><expr pos:start="115:17" pos:end="115:79"><call pos:start="115:17" pos:end="115:79"><name pos:start="115:17" pos:end="115:35">vmsd_desc_field_end</name><argument_list pos:start="115:36" pos:end="115:79">(<argument pos:start="115:37" pos:end="115:40"><expr pos:start="115:37" pos:end="115:40"><name pos:start="115:37" pos:end="115:40">vmsd</name></expr></argument>, <argument pos:start="115:43" pos:end="115:53"><expr pos:start="115:43" pos:end="115:53"><name pos:start="115:43" pos:end="115:53">vmdesc_loop</name></expr></argument>, <argument pos:start="115:56" pos:end="115:60"><expr pos:start="115:56" pos:end="115:60"><name pos:start="115:56" pos:end="115:60">field</name></expr></argument>, <argument pos:start="115:63" pos:end="115:75"><expr pos:start="115:63" pos:end="115:75"><name pos:start="115:63" pos:end="115:75">written_bytes</name></expr></argument>, <argument pos:start="115:78" pos:end="115:78"><expr pos:start="115:78" pos:end="115:78"><name pos:start="115:78" pos:end="115:78">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <comment type="block" pos:start="119:17" pos:end="119:73">/* Compressed arrays only care about the first element */</comment>

                <if_stmt pos:start="121:17" pos:end="125:17"><if pos:start="121:17" pos:end="125:17">if <condition pos:start="121:20" pos:end="121:60">(<expr pos:start="121:21" pos:end="121:59"><name pos:start="121:21" pos:end="121:31">vmdesc_loop</name> <operator pos:start="121:33" pos:end="121:34">&amp;&amp;</operator> <call pos:start="121:36" pos:end="121:59"><name pos:start="121:36" pos:end="121:52">vmsd_can_compress</name><argument_list pos:start="121:53" pos:end="121:59">(<argument pos:start="121:54" pos:end="121:58"><expr pos:start="121:54" pos:end="121:58"><name pos:start="121:54" pos:end="121:58">field</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="121:62" pos:end="125:17">{<block_content pos:start="123:21" pos:end="123:39">

                    <expr_stmt pos:start="123:21" pos:end="123:39"><expr pos:start="123:21" pos:end="123:38"><name pos:start="123:21" pos:end="123:31">vmdesc_loop</name> <operator pos:start="123:33" pos:end="123:33">=</operator> <name pos:start="123:35" pos:end="123:38">NULL</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <else pos:start="129:11" pos:end="141:9">else <block pos:start="129:16" pos:end="141:9">{<block_content pos:start="131:13" pos:end="139:13">

            <if_stmt pos:start="131:13" pos:end="139:13"><if pos:start="131:13" pos:end="139:13">if <condition pos:start="131:16" pos:end="131:46">(<expr pos:start="131:17" pos:end="131:45"><name pos:start="131:17" pos:end="131:28"><name pos:start="131:17" pos:end="131:21">field</name><operator pos:start="131:22" pos:end="131:23">-&gt;</operator><name pos:start="131:24" pos:end="131:28">flags</name></name> <operator pos:start="131:30" pos:end="131:30">&amp;</operator> <name pos:start="131:32" pos:end="131:45">VMS_MUST_EXIST</name></expr>)</condition> <block pos:start="131:48" pos:end="139:13">{<block_content pos:start="133:17" pos:end="137:57">

                <expr_stmt pos:start="133:17" pos:end="135:49"><expr pos:start="133:17" pos:end="135:48"><call pos:start="133:17" pos:end="135:48"><name pos:start="133:17" pos:end="133:28">error_report</name><argument_list pos:start="133:29" pos:end="135:48">(<argument pos:start="133:30" pos:end="133:68"><expr pos:start="133:30" pos:end="133:68"><literal type="string" pos:start="133:30" pos:end="133:68">"Output state validation failed: %s/%s"</literal></expr></argument>,

                        <argument pos:start="135:25" pos:end="135:34"><expr pos:start="135:25" pos:end="135:34"><name pos:start="135:25" pos:end="135:34"><name pos:start="135:25" pos:end="135:28">vmsd</name><operator pos:start="135:29" pos:end="135:30">-&gt;</operator><name pos:start="135:31" pos:end="135:34">name</name></name></expr></argument>, <argument pos:start="135:37" pos:end="135:47"><expr pos:start="135:37" pos:end="135:47"><name pos:start="135:37" pos:end="135:47"><name pos:start="135:37" pos:end="135:41">field</name><operator pos:start="135:42" pos:end="135:43">-&gt;</operator><name pos:start="135:44" pos:end="135:47">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="137:17" pos:end="137:57"><expr pos:start="137:17" pos:end="137:56"><call pos:start="137:17" pos:end="137:56"><name pos:start="137:17" pos:end="137:22">assert</name><argument_list pos:start="137:23" pos:end="137:56">(<argument pos:start="137:24" pos:end="137:55"><expr pos:start="137:24" pos:end="137:55"><operator pos:start="137:24" pos:end="137:24">!</operator><operator pos:start="137:25" pos:end="137:25">(</operator><name pos:start="137:26" pos:end="137:37"><name pos:start="137:26" pos:end="137:30">field</name><operator pos:start="137:31" pos:end="137:32">-&gt;</operator><name pos:start="137:33" pos:end="137:37">flags</name></name> <operator pos:start="137:39" pos:end="137:39">&amp;</operator> <name pos:start="137:41" pos:end="137:54">VMS_MUST_EXIST</name><operator pos:start="137:55" pos:end="137:55">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:16"><expr pos:start="143:9" pos:end="143:15"><name pos:start="143:9" pos:end="143:13">field</name><operator pos:start="143:14" pos:end="143:15">++</operator></expr>;</expr_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="149:5" pos:end="153:5"><if pos:start="149:5" pos:end="153:5">if <condition pos:start="149:8" pos:end="149:15">(<expr pos:start="149:9" pos:end="149:14"><name pos:start="149:9" pos:end="149:14">vmdesc</name></expr>)</condition> <block pos:start="149:17" pos:end="153:5">{<block_content pos:start="151:9" pos:end="151:31">

        <expr_stmt pos:start="151:9" pos:end="151:31"><expr pos:start="151:9" pos:end="151:30"><call pos:start="151:9" pos:end="151:30"><name pos:start="151:9" pos:end="151:22">json_end_array</name><argument_list pos:start="151:23" pos:end="151:30">(<argument pos:start="151:24" pos:end="151:29"><expr pos:start="151:24" pos:end="151:29"><name pos:start="151:24" pos:end="151:29">vmdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="157:5" pos:end="157:53"><expr pos:start="157:5" pos:end="157:52"><call pos:start="157:5" pos:end="157:52"><name pos:start="157:5" pos:end="157:27">vmstate_subsection_save</name><argument_list pos:start="157:28" pos:end="157:52">(<argument pos:start="157:29" pos:end="157:29"><expr pos:start="157:29" pos:end="157:29"><name pos:start="157:29" pos:end="157:29">f</name></expr></argument>, <argument pos:start="157:32" pos:end="157:35"><expr pos:start="157:32" pos:end="157:35"><name pos:start="157:32" pos:end="157:35">vmsd</name></expr></argument>, <argument pos:start="157:38" pos:end="157:43"><expr pos:start="157:38" pos:end="157:43"><name pos:start="157:38" pos:end="157:43">opaque</name></expr></argument>, <argument pos:start="157:46" pos:end="157:51"><expr pos:start="157:46" pos:end="157:51"><name pos:start="157:46" pos:end="157:51">vmdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="161:5" pos:end="161:13">return <expr pos:start="161:12" pos:end="161:12"><literal type="number" pos:start="161:12" pos:end="161:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
