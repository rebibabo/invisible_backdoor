<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20969.c" pos:tabs="8"><function pos:start="1:1" pos:end="47:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:13">fork_end</name><parameter_list pos:start="1:14" pos:end="1:24">(<parameter pos:start="1:15" pos:end="1:23"><decl pos:start="1:15" pos:end="1:23"><type pos:start="1:15" pos:end="1:17"><name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:23">child</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="47:1">{<block_content pos:start="5:5" pos:end="45:5">

    <expr_stmt pos:start="5:5" pos:end="5:25"><expr pos:start="5:5" pos:end="5:24"><call pos:start="5:5" pos:end="5:24"><name pos:start="5:5" pos:end="5:17">mmap_fork_end</name><argument_list pos:start="5:18" pos:end="5:24">(<argument pos:start="5:19" pos:end="5:23"><expr pos:start="5:19" pos:end="5:23"><name pos:start="5:19" pos:end="5:23">child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="7:5" pos:end="45:5"><if pos:start="7:5" pos:end="39:5">if <condition pos:start="7:8" pos:end="7:14">(<expr pos:start="7:9" pos:end="7:13"><name pos:start="7:9" pos:end="7:13">child</name></expr>)</condition> <block pos:start="7:16" pos:end="39:5">{<block_content pos:start="9:9" pos:end="37:35">

        <decl_stmt pos:start="9:9" pos:end="9:33"><decl pos:start="9:9" pos:end="9:21"><type pos:start="9:9" pos:end="9:18"><name pos:start="9:9" pos:end="9:16">CPUState</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:21">cpu</name></decl>, <decl pos:start="9:24" pos:end="9:32"><type ref="prev" pos:start="9:9" pos:end="9:18"><modifier pos:start="9:24" pos:end="9:24">*</modifier></type><name pos:start="9:25" pos:end="9:32">next_cpu</name></decl>;</decl_stmt>

        <comment type="block" pos:start="11:9" pos:end="13:60">/* Child processes created by fork() only have a single thread.

           Discard information about the parent threads.  */</comment>

        <macro pos:start="15:9" pos:end="15:39"><name pos:start="15:9" pos:end="15:24">CPU_FOREACH_SAFE</name><argument_list pos:start="15:25" pos:end="15:39">(<argument pos:start="15:26" pos:end="15:28">cpu</argument>, <argument pos:start="15:31" pos:end="15:38">next_cpu</argument>)</argument_list></macro> <block pos:start="15:41" pos:end="23:9">{<block_content pos:start="17:13" pos:end="21:13">

            <if_stmt pos:start="17:13" pos:end="21:13"><if pos:start="17:13" pos:end="21:13">if <condition pos:start="17:16" pos:end="17:34">(<expr pos:start="17:17" pos:end="17:33"><name pos:start="17:17" pos:end="17:19">cpu</name> <operator pos:start="17:21" pos:end="17:22">!=</operator> <name pos:start="17:24" pos:end="17:33">thread_cpu</name></expr>)</condition> <block pos:start="17:36" pos:end="21:13">{<block_content pos:start="19:17" pos:end="19:55">

                <expr_stmt pos:start="19:17" pos:end="19:55"><expr pos:start="19:17" pos:end="19:54"><call pos:start="19:17" pos:end="19:54"><name pos:start="19:17" pos:end="19:29">QTAILQ_REMOVE</name><argument_list pos:start="19:30" pos:end="19:54">(<argument pos:start="19:31" pos:end="19:35"><expr pos:start="19:31" pos:end="19:35"><operator pos:start="19:31" pos:end="19:31">&amp;</operator><name pos:start="19:32" pos:end="19:35">cpus</name></expr></argument>, <argument pos:start="19:38" pos:end="19:47"><expr pos:start="19:38" pos:end="19:47"><name pos:start="19:38" pos:end="19:47">thread_cpu</name></expr></argument>, <argument pos:start="19:50" pos:end="19:53"><expr pos:start="19:50" pos:end="19:53"><name pos:start="19:50" pos:end="19:53">node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <expr_stmt pos:start="25:9" pos:end="25:25"><expr pos:start="25:9" pos:end="25:24"><name pos:start="25:9" pos:end="25:20">pending_cpus</name> <operator pos:start="25:22" pos:end="25:22">=</operator> <literal type="number" pos:start="25:24" pos:end="25:24">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:50"><expr pos:start="27:9" pos:end="27:49"><call pos:start="27:9" pos:end="27:49"><name pos:start="27:9" pos:end="27:26">pthread_mutex_init</name><argument_list pos:start="27:27" pos:end="27:49">(<argument pos:start="27:28" pos:end="27:42"><expr pos:start="27:28" pos:end="27:42"><operator pos:start="27:28" pos:end="27:28">&amp;</operator><name pos:start="27:29" pos:end="27:42">exclusive_lock</name></expr></argument>, <argument pos:start="27:45" pos:end="27:48"><expr pos:start="27:45" pos:end="27:48"><name pos:start="27:45" pos:end="27:48">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:50"><expr pos:start="29:9" pos:end="29:49"><call pos:start="29:9" pos:end="29:49"><name pos:start="29:9" pos:end="29:26">pthread_mutex_init</name><argument_list pos:start="29:27" pos:end="29:49">(<argument pos:start="29:28" pos:end="29:42"><expr pos:start="29:28" pos:end="29:42"><operator pos:start="29:28" pos:end="29:28">&amp;</operator><name pos:start="29:29" pos:end="29:42">cpu_list_mutex</name></expr></argument>, <argument pos:start="29:45" pos:end="29:48"><expr pos:start="29:45" pos:end="29:48"><name pos:start="29:45" pos:end="29:48">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:49"><expr pos:start="31:9" pos:end="31:48"><call pos:start="31:9" pos:end="31:48"><name pos:start="31:9" pos:end="31:25">pthread_cond_init</name><argument_list pos:start="31:26" pos:end="31:48">(<argument pos:start="31:27" pos:end="31:41"><expr pos:start="31:27" pos:end="31:41"><operator pos:start="31:27" pos:end="31:27">&amp;</operator><name pos:start="31:28" pos:end="31:41">exclusive_cond</name></expr></argument>, <argument pos:start="31:44" pos:end="31:47"><expr pos:start="31:44" pos:end="31:47"><name pos:start="31:44" pos:end="31:47">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:51"><expr pos:start="33:9" pos:end="33:50"><call pos:start="33:9" pos:end="33:50"><name pos:start="33:9" pos:end="33:25">pthread_cond_init</name><argument_list pos:start="33:26" pos:end="33:50">(<argument pos:start="33:27" pos:end="33:43"><expr pos:start="33:27" pos:end="33:43"><operator pos:start="33:27" pos:end="33:27">&amp;</operator><name pos:start="33:28" pos:end="33:43">exclusive_resume</name></expr></argument>, <argument pos:start="33:46" pos:end="33:49"><expr pos:start="33:46" pos:end="33:49"><name pos:start="33:46" pos:end="33:49">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:58"><expr pos:start="35:9" pos:end="35:57"><call pos:start="35:9" pos:end="35:57"><name pos:start="35:9" pos:end="35:26">pthread_mutex_init</name><argument_list pos:start="35:27" pos:end="35:57">(<argument pos:start="35:28" pos:end="35:50"><expr pos:start="35:28" pos:end="35:50"><operator pos:start="35:28" pos:end="35:28">&amp;</operator><name pos:start="35:29" pos:end="35:50"><name pos:start="35:29" pos:end="35:35">tcg_ctx</name><operator pos:start="35:36" pos:end="35:36">.</operator><name pos:start="35:37" pos:end="35:42">tb_ctx</name><operator pos:start="35:43" pos:end="35:43">.</operator><name pos:start="35:44" pos:end="35:50">tb_lock</name></name></expr></argument>, <argument pos:start="35:53" pos:end="35:56"><expr pos:start="35:53" pos:end="35:56"><name pos:start="35:53" pos:end="35:56">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:35"><expr pos:start="37:9" pos:end="37:34"><call pos:start="37:9" pos:end="37:34"><name pos:start="37:9" pos:end="37:22">gdbserver_fork</name><argument_list pos:start="37:23" pos:end="37:34">(<argument pos:start="37:24" pos:end="37:33"><expr pos:start="37:24" pos:end="37:33"><name pos:start="37:24" pos:end="37:33">thread_cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="39:7" pos:end="45:5">else <block pos:start="39:12" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:54">

        <expr_stmt pos:start="41:9" pos:end="41:46"><expr pos:start="41:9" pos:end="41:45"><call pos:start="41:9" pos:end="41:45"><name pos:start="41:9" pos:end="41:28">pthread_mutex_unlock</name><argument_list pos:start="41:29" pos:end="41:45">(<argument pos:start="41:30" pos:end="41:44"><expr pos:start="41:30" pos:end="41:44"><operator pos:start="41:30" pos:end="41:30">&amp;</operator><name pos:start="41:31" pos:end="41:44">exclusive_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:54"><expr pos:start="43:9" pos:end="43:53"><call pos:start="43:9" pos:end="43:53"><name pos:start="43:9" pos:end="43:28">pthread_mutex_unlock</name><argument_list pos:start="43:29" pos:end="43:53">(<argument pos:start="43:30" pos:end="43:52"><expr pos:start="43:30" pos:end="43:52"><operator pos:start="43:30" pos:end="43:30">&amp;</operator><name pos:start="43:31" pos:end="43:52"><name pos:start="43:31" pos:end="43:37">tcg_ctx</name><operator pos:start="43:38" pos:end="43:38">.</operator><name pos:start="43:39" pos:end="43:44">tb_ctx</name><operator pos:start="43:45" pos:end="43:45">.</operator><name pos:start="43:46" pos:end="43:52">tb_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
