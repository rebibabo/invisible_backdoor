<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7954.c" pos:tabs="8"><function pos:start="1:1" pos:end="479:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:17">img_dd</name><parameter_list pos:start="1:18" pos:end="1:40">(<parameter pos:start="1:19" pos:end="1:26"><decl pos:start="1:19" pos:end="1:26"><type pos:start="1:19" pos:end="1:26"><name pos:start="1:19" pos:end="1:21">int</name></type> <name pos:start="1:23" pos:end="1:26">argc</name></decl></parameter>, <parameter pos:start="1:29" pos:end="1:39"><decl pos:start="1:29" pos:end="1:39"><type pos:start="1:29" pos:end="1:39"><name pos:start="1:29" pos:end="1:32">char</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier><modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:39">argv</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="479:1">{<block_content pos:start="5:5" pos:end="477:13">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:13">arg</name> <init pos:start="7:15" pos:end="7:20">= <expr pos:start="7:17" pos:end="7:20"><name pos:start="7:17" pos:end="7:20">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:14"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:13">tmp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:47"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">BlockDriver</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:20">drv</name> <init pos:start="11:22" pos:end="11:27">= <expr pos:start="11:24" pos:end="11:27"><name pos:start="11:24" pos:end="11:27">NULL</name></expr></init></decl>, <decl pos:start="11:30" pos:end="11:46"><type ref="prev" pos:start="11:5" pos:end="11:17"><modifier pos:start="11:30" pos:end="11:30">*</modifier></type><name pos:start="11:31" pos:end="11:39">proto_drv</name> <init pos:start="11:41" pos:end="11:46">= <expr pos:start="11:43" pos:end="11:46"><name pos:start="11:43" pos:end="11:46">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:44"><decl pos:start="13:5" pos:end="13:29"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">BlockBackend</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:22">blk1</name> <init pos:start="13:24" pos:end="13:29">= <expr pos:start="13:26" pos:end="13:29"><name pos:start="13:26" pos:end="13:29">NULL</name></expr></init></decl>, <decl pos:start="13:32" pos:end="13:43"><type ref="prev" pos:start="13:5" pos:end="13:18"><modifier pos:start="13:32" pos:end="13:32">*</modifier></type><name pos:start="13:33" pos:end="13:36">blk2</name> <init pos:start="13:38" pos:end="13:43">= <expr pos:start="13:40" pos:end="13:43"><name pos:start="13:40" pos:end="13:43">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:26"><decl pos:start="15:5" pos:end="15:25"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">QemuOpts</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:18">opts</name> <init pos:start="15:20" pos:end="15:25">= <expr pos:start="15:22" pos:end="15:25"><name pos:start="15:22" pos:end="15:25">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:37"><decl pos:start="17:5" pos:end="17:36"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">QemuOptsList</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:29">create_opts</name> <init pos:start="17:31" pos:end="17:36">= <expr pos:start="17:33" pos:end="17:36"><name pos:start="17:33" pos:end="17:36">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:28"><decl pos:start="19:5" pos:end="19:27"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:9">Error</name> <modifier pos:start="19:11" pos:end="19:11">*</modifier></type><name pos:start="19:12" pos:end="19:20">local_err</name> <init pos:start="19:22" pos:end="19:27">= <expr pos:start="19:24" pos:end="19:27"><name pos:start="19:24" pos:end="19:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:28"><decl pos:start="21:5" pos:end="21:27"><type pos:start="21:5" pos:end="21:8"><name pos:start="21:5" pos:end="21:8">bool</name></type> <name pos:start="21:10" pos:end="21:19">image_opts</name> <init pos:start="21:21" pos:end="21:27">= <expr pos:start="21:23" pos:end="21:27"><name pos:start="21:23" pos:end="21:27">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:13"><decl pos:start="23:5" pos:end="23:9"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:9">c</name></decl>, <decl pos:start="23:12" pos:end="23:12"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:12" pos:end="23:12">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:32"><decl pos:start="25:5" pos:end="25:31"><type pos:start="25:5" pos:end="25:16"><specifier pos:start="25:5" pos:end="25:9">const</specifier> <name pos:start="25:11" pos:end="25:14">char</name> <modifier pos:start="25:16" pos:end="25:16">*</modifier></type><name pos:start="25:17" pos:end="25:23">out_fmt</name> <init pos:start="25:25" pos:end="25:31">= <expr pos:start="25:27" pos:end="25:31"><literal type="string" pos:start="25:27" pos:end="25:31">"raw"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:27"><decl pos:start="27:5" pos:end="27:26"><type pos:start="27:5" pos:end="27:16"><specifier pos:start="27:5" pos:end="27:9">const</specifier> <name pos:start="27:11" pos:end="27:14">char</name> <modifier pos:start="27:16" pos:end="27:16">*</modifier></type><name pos:start="27:17" pos:end="27:19">fmt</name> <init pos:start="27:21" pos:end="27:26">= <expr pos:start="27:23" pos:end="27:26"><name pos:start="27:23" pos:end="27:26">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:21"><decl pos:start="29:5" pos:end="29:20"><type pos:start="29:5" pos:end="29:11"><name pos:start="29:5" pos:end="29:11">int64_t</name></type> <name pos:start="29:13" pos:end="29:16">size</name> <init pos:start="29:18" pos:end="29:20">= <expr pos:start="29:20" pos:end="29:20"><literal type="number" pos:start="29:20" pos:end="29:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:45"><decl pos:start="31:5" pos:end="31:27"><type pos:start="31:5" pos:end="31:11"><name pos:start="31:5" pos:end="31:11">int64_t</name></type> <name pos:start="31:13" pos:end="31:23">block_count</name> <init pos:start="31:25" pos:end="31:27">= <expr pos:start="31:27" pos:end="31:27"><literal type="number" pos:start="31:27" pos:end="31:27">0</literal></expr></init></decl>, <decl pos:start="31:30" pos:end="31:36"><type ref="prev" pos:start="31:5" pos:end="31:11"/><name pos:start="31:30" pos:end="31:36">out_pos</name></decl>, <decl pos:start="31:39" pos:end="31:44"><type ref="prev" pos:start="31:5" pos:end="31:11"/><name pos:start="31:39" pos:end="31:44">in_pos</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="39:6"><decl pos:start="33:5" pos:end="39:5"><type pos:start="33:5" pos:end="33:17"><name pos:start="33:5" pos:end="33:17"><name pos:start="33:5" pos:end="33:10">struct</name> <name pos:start="33:12" pos:end="33:17">DdInfo</name></name></type> <name pos:start="33:19" pos:end="33:20">dd</name> <init pos:start="33:22" pos:end="39:5">= <expr pos:start="33:24" pos:end="39:5"><block pos:start="33:24" pos:end="39:5">{

        <expr pos:start="35:9" pos:end="35:18"><operator pos:start="35:9" pos:end="35:9">.</operator><name pos:start="35:10" pos:end="35:14">flags</name> <operator pos:start="35:16" pos:end="35:16">=</operator> <literal type="number" pos:start="35:18" pos:end="35:18">0</literal></expr>,

        <expr pos:start="37:9" pos:end="37:18"><operator pos:start="37:9" pos:end="37:9">.</operator><name pos:start="37:10" pos:end="37:14">count</name> <operator pos:start="37:16" pos:end="37:16">=</operator> <literal type="number" pos:start="37:18" pos:end="37:18">0</literal></expr>,

    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="51:6"><decl pos:start="41:5" pos:end="51:5"><type pos:start="41:5" pos:end="41:15"><name pos:start="41:5" pos:end="41:15"><name pos:start="41:5" pos:end="41:10">struct</name> <name pos:start="41:12" pos:end="41:15">DdIo</name></name></type> <name pos:start="41:17" pos:end="41:18">in</name> <init pos:start="41:20" pos:end="51:5">= <expr pos:start="41:22" pos:end="51:5"><block pos:start="41:22" pos:end="51:5">{

        <expr pos:start="43:9" pos:end="43:18"><operator pos:start="43:9" pos:end="43:9">.</operator><name pos:start="43:10" pos:end="43:12">bsz</name> <operator pos:start="43:14" pos:end="43:14">=</operator> <literal type="number" pos:start="43:16" pos:end="43:18">512</literal></expr>, <comment type="block" pos:start="43:21" pos:end="43:60">/* Block size is by default 512 bytes */</comment>

        <expr pos:start="45:9" pos:end="45:24"><operator pos:start="45:9" pos:end="45:9">.</operator><name pos:start="45:10" pos:end="45:17">filename</name> <operator pos:start="45:19" pos:end="45:19">=</operator> <name pos:start="45:21" pos:end="45:24">NULL</name></expr>,

        <expr pos:start="47:9" pos:end="47:19"><operator pos:start="47:9" pos:end="47:9">.</operator><name pos:start="47:10" pos:end="47:12">buf</name> <operator pos:start="47:14" pos:end="47:14">=</operator> <name pos:start="47:16" pos:end="47:19">NULL</name></expr>,

        <expr pos:start="49:9" pos:end="49:19"><operator pos:start="49:9" pos:end="49:9">.</operator><name pos:start="49:10" pos:end="49:15">offset</name> <operator pos:start="49:17" pos:end="49:17">=</operator> <literal type="number" pos:start="49:19" pos:end="49:19">0</literal></expr>

    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="53:5" pos:end="63:6"><decl pos:start="53:5" pos:end="63:5"><type pos:start="53:5" pos:end="53:15"><name pos:start="53:5" pos:end="53:15"><name pos:start="53:5" pos:end="53:10">struct</name> <name pos:start="53:12" pos:end="53:15">DdIo</name></name></type> <name pos:start="53:17" pos:end="53:19">out</name> <init pos:start="53:21" pos:end="63:5">= <expr pos:start="53:23" pos:end="63:5"><block pos:start="53:23" pos:end="63:5">{

        <expr pos:start="55:9" pos:end="55:18"><operator pos:start="55:9" pos:end="55:9">.</operator><name pos:start="55:10" pos:end="55:12">bsz</name> <operator pos:start="55:14" pos:end="55:14">=</operator> <literal type="number" pos:start="55:16" pos:end="55:18">512</literal></expr>,

        <expr pos:start="57:9" pos:end="57:24"><operator pos:start="57:9" pos:end="57:9">.</operator><name pos:start="57:10" pos:end="57:17">filename</name> <operator pos:start="57:19" pos:end="57:19">=</operator> <name pos:start="57:21" pos:end="57:24">NULL</name></expr>,

        <expr pos:start="59:9" pos:end="59:19"><operator pos:start="59:9" pos:end="59:9">.</operator><name pos:start="59:10" pos:end="59:12">buf</name> <operator pos:start="59:14" pos:end="59:14">=</operator> <name pos:start="59:16" pos:end="59:19">NULL</name></expr>,

        <expr pos:start="61:9" pos:end="61:19"><operator pos:start="61:9" pos:end="61:9">.</operator><name pos:start="61:10" pos:end="61:15">offset</name> <operator pos:start="61:17" pos:end="61:17">=</operator> <literal type="number" pos:start="61:19" pos:end="61:19">0</literal></expr>

    }</block></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="67:5" pos:end="81:6"><decl pos:start="67:5" pos:end="81:5"><type pos:start="67:5" pos:end="67:23"><specifier pos:start="67:5" pos:end="67:9">const</specifier> <name pos:start="67:11" pos:end="67:23"><name pos:start="67:11" pos:end="67:16">struct</name> <name pos:start="67:18" pos:end="67:23">DdOpts</name></name></type> <name pos:start="67:25" pos:end="67:33"><name pos:start="67:25" pos:end="67:31">options</name><index pos:start="67:32" pos:end="67:33">[]</index></name> <init pos:start="67:35" pos:end="81:5">= <expr pos:start="67:37" pos:end="81:5"><block pos:start="67:37" pos:end="81:5">{

        <expr pos:start="69:9" pos:end="69:33"><block pos:start="69:9" pos:end="69:33">{ <expr pos:start="69:11" pos:end="69:14"><literal type="string" pos:start="69:11" pos:end="69:14">"bs"</literal></expr>, <expr pos:start="69:17" pos:end="69:25"><name pos:start="69:17" pos:end="69:25">img_dd_bs</name></expr>, <expr pos:start="69:28" pos:end="69:31"><name pos:start="69:28" pos:end="69:31">C_BS</name></expr> }</block></expr>,

        <expr pos:start="71:9" pos:end="71:42"><block pos:start="71:9" pos:end="71:42">{ <expr pos:start="71:11" pos:end="71:17"><literal type="string" pos:start="71:11" pos:end="71:17">"count"</literal></expr>, <expr pos:start="71:20" pos:end="71:31"><name pos:start="71:20" pos:end="71:31">img_dd_count</name></expr>, <expr pos:start="71:34" pos:end="71:40"><name pos:start="71:34" pos:end="71:40">C_COUNT</name></expr> }</block></expr>,

        <expr pos:start="73:9" pos:end="73:33"><block pos:start="73:9" pos:end="73:33">{ <expr pos:start="73:11" pos:end="73:14"><literal type="string" pos:start="73:11" pos:end="73:14">"if"</literal></expr>, <expr pos:start="73:17" pos:end="73:25"><name pos:start="73:17" pos:end="73:25">img_dd_if</name></expr>, <expr pos:start="73:28" pos:end="73:31"><name pos:start="73:28" pos:end="73:31">C_IF</name></expr> }</block></expr>,

        <expr pos:start="75:9" pos:end="75:33"><block pos:start="75:9" pos:end="75:33">{ <expr pos:start="75:11" pos:end="75:14"><literal type="string" pos:start="75:11" pos:end="75:14">"of"</literal></expr>, <expr pos:start="75:17" pos:end="75:25"><name pos:start="75:17" pos:end="75:25">img_dd_of</name></expr>, <expr pos:start="75:28" pos:end="75:31"><name pos:start="75:28" pos:end="75:31">C_OF</name></expr> }</block></expr>,

        <expr pos:start="77:9" pos:end="77:39"><block pos:start="77:9" pos:end="77:39">{ <expr pos:start="77:11" pos:end="77:16"><literal type="string" pos:start="77:11" pos:end="77:16">"skip"</literal></expr>, <expr pos:start="77:19" pos:end="77:29"><name pos:start="77:19" pos:end="77:29">img_dd_skip</name></expr>, <expr pos:start="77:32" pos:end="77:37"><name pos:start="77:32" pos:end="77:37">C_SKIP</name></expr> }</block></expr>,

        <expr pos:start="79:9" pos:end="79:25"><block pos:start="79:9" pos:end="79:25">{ <expr pos:start="79:11" pos:end="79:14"><name pos:start="79:11" pos:end="79:14">NULL</name></expr>, <expr pos:start="79:17" pos:end="79:20"><name pos:start="79:17" pos:end="79:20">NULL</name></expr>, <expr pos:start="79:23" pos:end="79:23"><literal type="number" pos:start="79:23" pos:end="79:23">0</literal></expr> }</block></expr>

    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="83:5" pos:end="91:6"><decl pos:start="83:5" pos:end="91:5"><type pos:start="83:5" pos:end="83:23"><specifier pos:start="83:5" pos:end="83:9">const</specifier> <name pos:start="83:11" pos:end="83:23"><name pos:start="83:11" pos:end="83:16">struct</name> <name pos:start="83:18" pos:end="83:23">option</name></name></type> <name pos:start="83:25" pos:end="83:38"><name pos:start="83:25" pos:end="83:36">long_options</name><index pos:start="83:37" pos:end="83:38">[]</index></name> <init pos:start="83:40" pos:end="91:5">= <expr pos:start="83:42" pos:end="91:5"><block pos:start="83:42" pos:end="91:5">{

        <expr pos:start="85:9" pos:end="85:38"><block pos:start="85:9" pos:end="85:38">{ <expr pos:start="85:11" pos:end="85:16"><literal type="string" pos:start="85:11" pos:end="85:16">"help"</literal></expr>, <expr pos:start="85:19" pos:end="85:29"><name pos:start="85:19" pos:end="85:29">no_argument</name></expr>, <expr pos:start="85:32" pos:end="85:32"><literal type="number" pos:start="85:32" pos:end="85:32">0</literal></expr>, <expr pos:start="85:35" pos:end="85:37"><literal type="char" pos:start="85:35" pos:end="85:37">'h'</literal></expr>}</block></expr>,

        <expr pos:start="87:9" pos:end="87:58"><block pos:start="87:9" pos:end="87:58">{ <expr pos:start="87:11" pos:end="87:22"><literal type="string" pos:start="87:11" pos:end="87:22">"image-opts"</literal></expr>, <expr pos:start="87:25" pos:end="87:35"><name pos:start="87:25" pos:end="87:35">no_argument</name></expr>, <expr pos:start="87:38" pos:end="87:38"><literal type="number" pos:start="87:38" pos:end="87:38">0</literal></expr>, <expr pos:start="87:41" pos:end="87:57"><name pos:start="87:41" pos:end="87:57">OPTION_IMAGE_OPTS</name></expr>}</block></expr>,

        <expr pos:start="89:9" pos:end="89:22"><block pos:start="89:9" pos:end="89:22">{ <expr pos:start="89:11" pos:end="89:11"><literal type="number" pos:start="89:11" pos:end="89:11">0</literal></expr>, <expr pos:start="89:14" pos:end="89:14"><literal type="number" pos:start="89:14" pos:end="89:14">0</literal></expr>, <expr pos:start="89:17" pos:end="89:17"><literal type="number" pos:start="89:17" pos:end="89:17">0</literal></expr>, <expr pos:start="89:20" pos:end="89:20"><literal type="number" pos:start="89:20" pos:end="89:20">0</literal></expr> }</block></expr>

    }</block></expr></init></decl>;</decl_stmt>



    <while pos:start="95:5" pos:end="139:5">while <condition pos:start="95:11" pos:end="95:70">(<expr pos:start="95:12" pos:end="95:69"><operator pos:start="95:12" pos:end="95:12">(</operator><name pos:start="95:13" pos:end="95:13">c</name> <operator pos:start="95:15" pos:end="95:15">=</operator> <call pos:start="95:17" pos:end="95:68"><name pos:start="95:17" pos:end="95:27">getopt_long</name><argument_list pos:start="95:28" pos:end="95:68">(<argument pos:start="95:29" pos:end="95:32"><expr pos:start="95:29" pos:end="95:32"><name pos:start="95:29" pos:end="95:32">argc</name></expr></argument>, <argument pos:start="95:35" pos:end="95:38"><expr pos:start="95:35" pos:end="95:38"><name pos:start="95:35" pos:end="95:38">argv</name></expr></argument>, <argument pos:start="95:41" pos:end="95:47"><expr pos:start="95:41" pos:end="95:47"><literal type="string" pos:start="95:41" pos:end="95:47">"hf:O:"</literal></expr></argument>, <argument pos:start="95:50" pos:end="95:61"><expr pos:start="95:50" pos:end="95:61"><name pos:start="95:50" pos:end="95:61">long_options</name></expr></argument>, <argument pos:start="95:64" pos:end="95:67"><expr pos:start="95:64" pos:end="95:67"><name pos:start="95:64" pos:end="95:67">NULL</name></expr></argument>)</argument_list></call><operator pos:start="95:69" pos:end="95:69">)</operator></expr>)</condition> <block pos:start="95:72" pos:end="139:5">{<block_content pos:start="97:9" pos:end="137:9">

        <if_stmt pos:start="97:9" pos:end="101:9"><if pos:start="97:9" pos:end="101:9">if <condition pos:start="97:12" pos:end="97:21">(<expr pos:start="97:13" pos:end="97:20"><name pos:start="97:13" pos:end="97:13">c</name> <operator pos:start="97:15" pos:end="97:16">==</operator> <name pos:start="97:18" pos:end="97:20">EOF</name></expr>)</condition> <block pos:start="97:23" pos:end="101:9">{<block_content pos:start="99:13" pos:end="99:18">

            <break pos:start="99:13" pos:end="99:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <switch pos:start="103:9" pos:end="137:9">switch <condition pos:start="103:16" pos:end="103:18">(<expr pos:start="103:17" pos:end="103:17"><name pos:start="103:17" pos:end="103:17">c</name></expr>)</condition> <block pos:start="103:20" pos:end="137:9">{<block_content pos:start="105:9" pos:end="135:18">

        <case pos:start="105:9" pos:end="105:17">case <expr pos:start="105:14" pos:end="105:16"><literal type="char" pos:start="105:14" pos:end="105:16">'O'</literal></expr>:</case>

            <expr_stmt pos:start="107:13" pos:end="107:29"><expr pos:start="107:13" pos:end="107:28"><name pos:start="107:13" pos:end="107:19">out_fmt</name> <operator pos:start="107:21" pos:end="107:21">=</operator> <name pos:start="107:23" pos:end="107:28">optarg</name></expr>;</expr_stmt>

            <break pos:start="109:13" pos:end="109:18">break;</break>

        <case pos:start="111:9" pos:end="111:17">case <expr pos:start="111:14" pos:end="111:16"><literal type="char" pos:start="111:14" pos:end="111:16">'f'</literal></expr>:</case>

            <expr_stmt pos:start="113:13" pos:end="113:25"><expr pos:start="113:13" pos:end="113:24"><name pos:start="113:13" pos:end="113:15">fmt</name> <operator pos:start="113:17" pos:end="113:17">=</operator> <name pos:start="113:19" pos:end="113:24">optarg</name></expr>;</expr_stmt>

            <break pos:start="115:13" pos:end="115:18">break;</break>

        <case pos:start="117:9" pos:end="117:17">case <expr pos:start="117:14" pos:end="117:16"><literal type="char" pos:start="117:14" pos:end="117:16">'?'</literal></expr>:</case>

            <expr_stmt pos:start="119:13" pos:end="119:72"><expr pos:start="119:13" pos:end="119:71"><call pos:start="119:13" pos:end="119:71"><name pos:start="119:13" pos:end="119:24">error_report</name><argument_list pos:start="119:25" pos:end="119:71">(<argument pos:start="119:26" pos:end="119:70"><expr pos:start="119:26" pos:end="119:70"><literal type="string" pos:start="119:26" pos:end="119:70">"Try 'qemu-img --help' for more information."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:21"><expr pos:start="121:13" pos:end="121:20"><name pos:start="121:13" pos:end="121:15">ret</name> <operator pos:start="121:17" pos:end="121:17">=</operator> <operator pos:start="121:19" pos:end="121:19">-</operator><literal type="number" pos:start="121:20" pos:end="121:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="123:13" pos:end="123:21">goto <name pos:start="123:18" pos:end="123:20">out</name>;</goto>

        <case pos:start="125:9" pos:end="125:17">case <expr pos:start="125:14" pos:end="125:16"><literal type="char" pos:start="125:14" pos:end="125:16">'h'</literal></expr>:</case>

            <expr_stmt pos:start="127:13" pos:end="127:19"><expr pos:start="127:13" pos:end="127:18"><call pos:start="127:13" pos:end="127:18"><name pos:start="127:13" pos:end="127:16">help</name><argument_list pos:start="127:17" pos:end="127:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="129:13" pos:end="129:18">break;</break>

        <case pos:start="131:9" pos:end="131:31">case <expr pos:start="131:14" pos:end="131:30"><name pos:start="131:14" pos:end="131:30">OPTION_IMAGE_OPTS</name></expr>:</case>

            <expr_stmt pos:start="133:13" pos:end="133:30"><expr pos:start="133:13" pos:end="133:29"><name pos:start="133:13" pos:end="133:22">image_opts</name> <operator pos:start="133:24" pos:end="133:24">=</operator> <name pos:start="133:26" pos:end="133:29">true</name></expr>;</expr_stmt>

            <break pos:start="135:13" pos:end="135:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></while>



    <for pos:start="143:5" pos:end="205:5">for <control pos:start="143:9" pos:end="143:35">(<init pos:start="143:10" pos:end="143:20"><expr pos:start="143:10" pos:end="143:19"><name pos:start="143:10" pos:end="143:10">i</name> <operator pos:start="143:12" pos:end="143:12">=</operator> <name pos:start="143:14" pos:end="143:19">optind</name></expr>;</init> <condition pos:start="143:22" pos:end="143:30"><expr pos:start="143:22" pos:end="143:29"><name pos:start="143:22" pos:end="143:22">i</name> <operator pos:start="143:24" pos:end="143:24">&lt;</operator> <name pos:start="143:26" pos:end="143:29">argc</name></expr>;</condition> <incr pos:start="143:32" pos:end="143:34"><expr pos:start="143:32" pos:end="143:34"><name pos:start="143:32" pos:end="143:32">i</name><operator pos:start="143:33" pos:end="143:34">++</operator></expr></incr>)</control> <block pos:start="143:37" pos:end="205:5">{<block_content pos:start="145:9" pos:end="203:19">

        <decl_stmt pos:start="145:9" pos:end="145:14"><decl pos:start="145:9" pos:end="145:13"><type pos:start="145:9" pos:end="145:11"><name pos:start="145:9" pos:end="145:11">int</name></type> <name pos:start="145:13" pos:end="145:13">j</name></decl>;</decl_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:32"><expr pos:start="147:9" pos:end="147:31"><name pos:start="147:9" pos:end="147:11">arg</name> <operator pos:start="147:13" pos:end="147:13">=</operator> <call pos:start="147:15" pos:end="147:31"><name pos:start="147:15" pos:end="147:22">g_strdup</name><argument_list pos:start="147:23" pos:end="147:31">(<argument pos:start="147:24" pos:end="147:30"><expr pos:start="147:24" pos:end="147:30"><name pos:start="147:24" pos:end="147:30"><name pos:start="147:24" pos:end="147:27">argv</name><index pos:start="147:28" pos:end="147:30">[<expr pos:start="147:29" pos:end="147:29"><name pos:start="147:29" pos:end="147:29">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="151:9" pos:end="151:31"><expr pos:start="151:9" pos:end="151:30"><name pos:start="151:9" pos:end="151:11">tmp</name> <operator pos:start="151:13" pos:end="151:13">=</operator> <call pos:start="151:15" pos:end="151:30"><name pos:start="151:15" pos:end="151:20">strchr</name><argument_list pos:start="151:21" pos:end="151:30">(<argument pos:start="151:22" pos:end="151:24"><expr pos:start="151:22" pos:end="151:24"><name pos:start="151:22" pos:end="151:24">arg</name></expr></argument>, <argument pos:start="151:27" pos:end="151:29"><expr pos:start="151:27" pos:end="151:29"><literal type="char" pos:start="151:27" pos:end="151:29">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="153:9" pos:end="161:9"><if pos:start="153:9" pos:end="161:9">if <condition pos:start="153:12" pos:end="153:24">(<expr pos:start="153:13" pos:end="153:23"><name pos:start="153:13" pos:end="153:15">tmp</name> <operator pos:start="153:17" pos:end="153:18">==</operator> <name pos:start="153:20" pos:end="153:23">NULL</name></expr>)</condition> <block pos:start="153:26" pos:end="161:9">{<block_content pos:start="155:13" pos:end="159:21">

            <expr_stmt pos:start="155:13" pos:end="155:57"><expr pos:start="155:13" pos:end="155:56"><call pos:start="155:13" pos:end="155:56"><name pos:start="155:13" pos:end="155:24">error_report</name><argument_list pos:start="155:25" pos:end="155:56">(<argument pos:start="155:26" pos:end="155:50"><expr pos:start="155:26" pos:end="155:50"><literal type="string" pos:start="155:26" pos:end="155:50">"unrecognized operand %s"</literal></expr></argument>, <argument pos:start="155:53" pos:end="155:55"><expr pos:start="155:53" pos:end="155:55"><name pos:start="155:53" pos:end="155:55">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="157:13" pos:end="157:21"><expr pos:start="157:13" pos:end="157:20"><name pos:start="157:13" pos:end="157:15">ret</name> <operator pos:start="157:17" pos:end="157:17">=</operator> <operator pos:start="157:19" pos:end="157:19">-</operator><literal type="number" pos:start="157:20" pos:end="157:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="159:13" pos:end="159:21">goto <name pos:start="159:18" pos:end="159:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="165:9" pos:end="165:22"><expr pos:start="165:9" pos:end="165:21"><operator pos:start="165:9" pos:end="165:9">*</operator><name pos:start="165:10" pos:end="165:12">tmp</name><operator pos:start="165:13" pos:end="165:14">++</operator> <operator pos:start="165:16" pos:end="165:16">=</operator> <literal type="char" pos:start="165:18" pos:end="165:21">'\0'</literal></expr>;</expr_stmt>



        <for pos:start="169:9" pos:end="177:9">for <control pos:start="169:13" pos:end="169:49">(<init pos:start="169:14" pos:end="169:19"><expr pos:start="169:14" pos:end="169:18"><name pos:start="169:14" pos:end="169:14">j</name> <operator pos:start="169:16" pos:end="169:16">=</operator> <literal type="number" pos:start="169:18" pos:end="169:18">0</literal></expr>;</init> <condition pos:start="169:21" pos:end="169:44"><expr pos:start="169:21" pos:end="169:43"><name pos:start="169:21" pos:end="169:30"><name pos:start="169:21" pos:end="169:27">options</name><index pos:start="169:28" pos:end="169:30">[<expr pos:start="169:29" pos:end="169:29"><name pos:start="169:29" pos:end="169:29">j</name></expr>]</index></name><operator pos:start="169:31" pos:end="169:31">.</operator><name pos:start="169:32" pos:end="169:35">name</name> <operator pos:start="169:37" pos:end="169:38">!=</operator> <name pos:start="169:40" pos:end="169:43">NULL</name></expr>;</condition> <incr pos:start="169:46" pos:end="169:48"><expr pos:start="169:46" pos:end="169:48"><name pos:start="169:46" pos:end="169:46">j</name><operator pos:start="169:47" pos:end="169:48">++</operator></expr></incr>)</control> <block pos:start="169:51" pos:end="177:9">{<block_content pos:start="171:13" pos:end="175:13">

            <if_stmt pos:start="171:13" pos:end="175:13"><if pos:start="171:13" pos:end="175:13">if <condition pos:start="171:16" pos:end="171:46">(<expr pos:start="171:17" pos:end="171:45"><operator pos:start="171:17" pos:end="171:17">!</operator><call pos:start="171:18" pos:end="171:45"><name pos:start="171:18" pos:end="171:23">strcmp</name><argument_list pos:start="171:24" pos:end="171:45">(<argument pos:start="171:25" pos:end="171:27"><expr pos:start="171:25" pos:end="171:27"><name pos:start="171:25" pos:end="171:27">arg</name></expr></argument>, <argument pos:start="171:30" pos:end="171:44"><expr pos:start="171:30" pos:end="171:44"><name pos:start="171:30" pos:end="171:39"><name pos:start="171:30" pos:end="171:36">options</name><index pos:start="171:37" pos:end="171:39">[<expr pos:start="171:38" pos:end="171:38"><name pos:start="171:38" pos:end="171:38">j</name></expr>]</index></name><operator pos:start="171:40" pos:end="171:40">.</operator><name pos:start="171:41" pos:end="171:44">name</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="171:48" pos:end="175:13">{<block_content pos:start="173:17" pos:end="173:22">

                <break pos:start="173:17" pos:end="173:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="179:9" pos:end="187:9"><if pos:start="179:9" pos:end="187:9">if <condition pos:start="179:12" pos:end="179:36">(<expr pos:start="179:13" pos:end="179:35"><name pos:start="179:13" pos:end="179:22"><name pos:start="179:13" pos:end="179:19">options</name><index pos:start="179:20" pos:end="179:22">[<expr pos:start="179:21" pos:end="179:21"><name pos:start="179:21" pos:end="179:21">j</name></expr>]</index></name><operator pos:start="179:23" pos:end="179:23">.</operator><name pos:start="179:24" pos:end="179:27">name</name> <operator pos:start="179:29" pos:end="179:30">==</operator> <name pos:start="179:32" pos:end="179:35">NULL</name></expr>)</condition> <block pos:start="179:38" pos:end="187:9">{<block_content pos:start="181:13" pos:end="185:21">

            <expr_stmt pos:start="181:13" pos:end="181:57"><expr pos:start="181:13" pos:end="181:56"><call pos:start="181:13" pos:end="181:56"><name pos:start="181:13" pos:end="181:24">error_report</name><argument_list pos:start="181:25" pos:end="181:56">(<argument pos:start="181:26" pos:end="181:50"><expr pos:start="181:26" pos:end="181:50"><literal type="string" pos:start="181:26" pos:end="181:50">"unrecognized operand %s"</literal></expr></argument>, <argument pos:start="181:53" pos:end="181:55"><expr pos:start="181:53" pos:end="181:55"><name pos:start="181:53" pos:end="181:55">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="183:13" pos:end="183:21"><expr pos:start="183:13" pos:end="183:20"><name pos:start="183:13" pos:end="183:15">ret</name> <operator pos:start="183:17" pos:end="183:17">=</operator> <operator pos:start="183:19" pos:end="183:19">-</operator><literal type="number" pos:start="183:20" pos:end="183:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="185:13" pos:end="185:21">goto <name pos:start="185:18" pos:end="185:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="191:9" pos:end="197:9"><if pos:start="191:9" pos:end="197:9">if <condition pos:start="191:12" pos:end="191:51">(<expr pos:start="191:13" pos:end="191:50"><name pos:start="191:13" pos:end="191:22"><name pos:start="191:13" pos:end="191:19">options</name><index pos:start="191:20" pos:end="191:22">[<expr pos:start="191:21" pos:end="191:21"><name pos:start="191:21" pos:end="191:21">j</name></expr>]</index></name><operator pos:start="191:23" pos:end="191:23">.</operator><call pos:start="191:24" pos:end="191:45"><name pos:start="191:24" pos:end="191:24">f</name><argument_list pos:start="191:25" pos:end="191:45">(<argument pos:start="191:26" pos:end="191:28"><expr pos:start="191:26" pos:end="191:28"><name pos:start="191:26" pos:end="191:28">tmp</name></expr></argument>, <argument pos:start="191:31" pos:end="191:33"><expr pos:start="191:31" pos:end="191:33"><operator pos:start="191:31" pos:end="191:31">&amp;</operator><name pos:start="191:32" pos:end="191:33">in</name></expr></argument>, <argument pos:start="191:36" pos:end="191:39"><expr pos:start="191:36" pos:end="191:39"><operator pos:start="191:36" pos:end="191:36">&amp;</operator><name pos:start="191:37" pos:end="191:39">out</name></expr></argument>, <argument pos:start="191:42" pos:end="191:44"><expr pos:start="191:42" pos:end="191:44"><operator pos:start="191:42" pos:end="191:42">&amp;</operator><name pos:start="191:43" pos:end="191:44">dd</name></expr></argument>)</argument_list></call> <operator pos:start="191:47" pos:end="191:48">!=</operator> <literal type="number" pos:start="191:50" pos:end="191:50">0</literal></expr>)</condition> <block pos:start="191:53" pos:end="197:9">{<block_content pos:start="193:13" pos:end="195:21">

            <expr_stmt pos:start="193:13" pos:end="193:21"><expr pos:start="193:13" pos:end="193:20"><name pos:start="193:13" pos:end="193:15">ret</name> <operator pos:start="193:17" pos:end="193:17">=</operator> <operator pos:start="193:19" pos:end="193:19">-</operator><literal type="number" pos:start="193:20" pos:end="193:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="195:13" pos:end="195:21">goto <name pos:start="195:18" pos:end="195:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:36"><expr pos:start="199:9" pos:end="199:35"><name pos:start="199:9" pos:end="199:16"><name pos:start="199:9" pos:end="199:10">dd</name><operator pos:start="199:11" pos:end="199:11">.</operator><name pos:start="199:12" pos:end="199:16">flags</name></name> <operator pos:start="199:18" pos:end="199:19">|=</operator> <name pos:start="199:21" pos:end="199:30"><name pos:start="199:21" pos:end="199:27">options</name><index pos:start="199:28" pos:end="199:30">[<expr pos:start="199:29" pos:end="199:29"><name pos:start="199:29" pos:end="199:29">j</name></expr>]</index></name><operator pos:start="199:31" pos:end="199:31">.</operator><name pos:start="199:32" pos:end="199:35">flag</name></expr>;</expr_stmt>

        <expr_stmt pos:start="201:9" pos:end="201:20"><expr pos:start="201:9" pos:end="201:19"><call pos:start="201:9" pos:end="201:19"><name pos:start="201:9" pos:end="201:14">g_free</name><argument_list pos:start="201:15" pos:end="201:19">(<argument pos:start="201:16" pos:end="201:18"><expr pos:start="201:16" pos:end="201:18"><name pos:start="201:16" pos:end="201:18">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="203:9" pos:end="203:19"><expr pos:start="203:9" pos:end="203:18"><name pos:start="203:9" pos:end="203:11">arg</name> <operator pos:start="203:13" pos:end="203:13">=</operator> <name pos:start="203:15" pos:end="203:18">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="209:5" pos:end="217:5"><if pos:start="209:5" pos:end="217:5">if <condition pos:start="209:8" pos:end="209:46">(<expr pos:start="209:9" pos:end="209:45"><operator pos:start="209:9" pos:end="209:9">!</operator><operator pos:start="209:10" pos:end="209:10">(</operator><name pos:start="209:11" pos:end="209:18"><name pos:start="209:11" pos:end="209:12">dd</name><operator pos:start="209:13" pos:end="209:13">.</operator><name pos:start="209:14" pos:end="209:18">flags</name></name> <operator pos:start="209:20" pos:end="209:20">&amp;</operator> <name pos:start="209:22" pos:end="209:25">C_IF</name> <operator pos:start="209:27" pos:end="209:28">&amp;&amp;</operator> <name pos:start="209:30" pos:end="209:37"><name pos:start="209:30" pos:end="209:31">dd</name><operator pos:start="209:32" pos:end="209:32">.</operator><name pos:start="209:33" pos:end="209:37">flags</name></name> <operator pos:start="209:39" pos:end="209:39">&amp;</operator> <name pos:start="209:41" pos:end="209:44">C_OF</name><operator pos:start="209:45" pos:end="209:45">)</operator></expr>)</condition> <block pos:start="209:48" pos:end="217:5">{<block_content pos:start="211:9" pos:end="215:17">

        <expr_stmt pos:start="211:9" pos:end="211:65"><expr pos:start="211:9" pos:end="211:64"><call pos:start="211:9" pos:end="211:64"><name pos:start="211:9" pos:end="211:20">error_report</name><argument_list pos:start="211:21" pos:end="211:64">(<argument pos:start="211:22" pos:end="211:63"><expr pos:start="211:22" pos:end="211:63"><literal type="string" pos:start="211:22" pos:end="211:63">"Must specify both input and output files"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="213:9" pos:end="213:17"><expr pos:start="213:9" pos:end="213:16"><name pos:start="213:9" pos:end="213:11">ret</name> <operator pos:start="213:13" pos:end="213:13">=</operator> <operator pos:start="213:15" pos:end="213:15">-</operator><literal type="number" pos:start="213:16" pos:end="213:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="215:9" pos:end="215:17">goto <name pos:start="215:14" pos:end="215:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="219:5" pos:end="219:67"><expr pos:start="219:5" pos:end="219:66"><name pos:start="219:5" pos:end="219:8">blk1</name> <operator pos:start="219:10" pos:end="219:10">=</operator> <call pos:start="219:12" pos:end="219:66"><name pos:start="219:12" pos:end="219:19">img_open</name><argument_list pos:start="219:20" pos:end="219:66">(<argument pos:start="219:21" pos:end="219:30"><expr pos:start="219:21" pos:end="219:30"><name pos:start="219:21" pos:end="219:30">image_opts</name></expr></argument>, <argument pos:start="219:33" pos:end="219:43"><expr pos:start="219:33" pos:end="219:43"><name pos:start="219:33" pos:end="219:43"><name pos:start="219:33" pos:end="219:34">in</name><operator pos:start="219:35" pos:end="219:35">.</operator><name pos:start="219:36" pos:end="219:43">filename</name></name></expr></argument>, <argument pos:start="219:46" pos:end="219:48"><expr pos:start="219:46" pos:end="219:48"><name pos:start="219:46" pos:end="219:48">fmt</name></expr></argument>, <argument pos:start="219:51" pos:end="219:51"><expr pos:start="219:51" pos:end="219:51"><literal type="number" pos:start="219:51" pos:end="219:51">0</literal></expr></argument>, <argument pos:start="219:54" pos:end="219:58"><expr pos:start="219:54" pos:end="219:58"><name pos:start="219:54" pos:end="219:58">false</name></expr></argument>, <argument pos:start="219:61" pos:end="219:65"><expr pos:start="219:61" pos:end="219:65"><name pos:start="219:61" pos:end="219:65">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="223:5" pos:end="229:5"><if pos:start="223:5" pos:end="229:5">if <condition pos:start="223:8" pos:end="223:14">(<expr pos:start="223:9" pos:end="223:13"><operator pos:start="223:9" pos:end="223:9">!</operator><name pos:start="223:10" pos:end="223:13">blk1</name></expr>)</condition> <block pos:start="223:16" pos:end="229:5">{<block_content pos:start="225:9" pos:end="227:17">

        <expr_stmt pos:start="225:9" pos:end="225:17"><expr pos:start="225:9" pos:end="225:16"><name pos:start="225:9" pos:end="225:11">ret</name> <operator pos:start="225:13" pos:end="225:13">=</operator> <operator pos:start="225:15" pos:end="225:15">-</operator><literal type="number" pos:start="225:16" pos:end="225:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="227:9" pos:end="227:17">goto <name pos:start="227:14" pos:end="227:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="233:5" pos:end="233:36"><expr pos:start="233:5" pos:end="233:35"><name pos:start="233:5" pos:end="233:7">drv</name> <operator pos:start="233:9" pos:end="233:9">=</operator> <call pos:start="233:11" pos:end="233:35"><name pos:start="233:11" pos:end="233:26">bdrv_find_format</name><argument_list pos:start="233:27" pos:end="233:35">(<argument pos:start="233:28" pos:end="233:34"><expr pos:start="233:28" pos:end="233:34"><name pos:start="233:28" pos:end="233:34">out_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="235:5" pos:end="243:5"><if pos:start="235:5" pos:end="243:5">if <condition pos:start="235:8" pos:end="235:13">(<expr pos:start="235:9" pos:end="235:12"><operator pos:start="235:9" pos:end="235:9">!</operator><name pos:start="235:10" pos:end="235:12">drv</name></expr>)</condition> <block pos:start="235:15" pos:end="243:5">{<block_content pos:start="237:9" pos:end="241:17">

        <expr_stmt pos:start="237:9" pos:end="237:44"><expr pos:start="237:9" pos:end="237:43"><call pos:start="237:9" pos:end="237:43"><name pos:start="237:9" pos:end="237:20">error_report</name><argument_list pos:start="237:21" pos:end="237:43">(<argument pos:start="237:22" pos:end="237:42"><expr pos:start="237:22" pos:end="237:42"><literal type="string" pos:start="237:22" pos:end="237:42">"Unknown file format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="239:9" pos:end="239:17"><expr pos:start="239:9" pos:end="239:16"><name pos:start="239:9" pos:end="239:11">ret</name> <operator pos:start="239:13" pos:end="239:13">=</operator> <operator pos:start="239:15" pos:end="239:15">-</operator><literal type="number" pos:start="239:16" pos:end="239:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="241:9" pos:end="241:17">goto <name pos:start="241:14" pos:end="241:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="245:5" pos:end="245:67"><expr pos:start="245:5" pos:end="245:66"><name pos:start="245:5" pos:end="245:13">proto_drv</name> <operator pos:start="245:15" pos:end="245:15">=</operator> <call pos:start="245:17" pos:end="245:66"><name pos:start="245:17" pos:end="245:34">bdrv_find_protocol</name><argument_list pos:start="245:35" pos:end="245:66">(<argument pos:start="245:36" pos:end="245:47"><expr pos:start="245:36" pos:end="245:47"><name pos:start="245:36" pos:end="245:47"><name pos:start="245:36" pos:end="245:38">out</name><operator pos:start="245:39" pos:end="245:39">.</operator><name pos:start="245:40" pos:end="245:47">filename</name></name></expr></argument>, <argument pos:start="245:50" pos:end="245:53"><expr pos:start="245:50" pos:end="245:53"><name pos:start="245:50" pos:end="245:53">true</name></expr></argument>, <argument pos:start="245:56" pos:end="245:65"><expr pos:start="245:56" pos:end="245:65"><operator pos:start="245:56" pos:end="245:56">&amp;</operator><name pos:start="245:57" pos:end="245:65">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="249:5" pos:end="257:5"><if pos:start="249:5" pos:end="257:5">if <condition pos:start="249:8" pos:end="249:19">(<expr pos:start="249:9" pos:end="249:18"><operator pos:start="249:9" pos:end="249:9">!</operator><name pos:start="249:10" pos:end="249:18">proto_drv</name></expr>)</condition> <block pos:start="249:21" pos:end="257:5">{<block_content pos:start="251:9" pos:end="255:17">

        <expr_stmt pos:start="251:9" pos:end="251:36"><expr pos:start="251:9" pos:end="251:35"><call pos:start="251:9" pos:end="251:35"><name pos:start="251:9" pos:end="251:24">error_report_err</name><argument_list pos:start="251:25" pos:end="251:35">(<argument pos:start="251:26" pos:end="251:34"><expr pos:start="251:26" pos:end="251:34"><name pos:start="251:26" pos:end="251:34">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="253:9" pos:end="253:17"><expr pos:start="253:9" pos:end="253:16"><name pos:start="253:9" pos:end="253:11">ret</name> <operator pos:start="253:13" pos:end="253:13">=</operator> <operator pos:start="253:15" pos:end="253:15">-</operator><literal type="number" pos:start="253:16" pos:end="253:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="255:9" pos:end="255:17">goto <name pos:start="255:14" pos:end="255:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="259:5" pos:end="269:5"><if pos:start="259:5" pos:end="269:5">if <condition pos:start="259:8" pos:end="259:26">(<expr pos:start="259:9" pos:end="259:25"><operator pos:start="259:9" pos:end="259:9">!</operator><name pos:start="259:10" pos:end="259:25"><name pos:start="259:10" pos:end="259:12">drv</name><operator pos:start="259:13" pos:end="259:14">-&gt;</operator><name pos:start="259:15" pos:end="259:25">create_opts</name></name></expr>)</condition> <block pos:start="259:28" pos:end="269:5">{<block_content pos:start="261:9" pos:end="267:17">

        <expr_stmt pos:start="261:9" pos:end="263:39"><expr pos:start="261:9" pos:end="263:38"><call pos:start="261:9" pos:end="263:38"><name pos:start="261:9" pos:end="261:20">error_report</name><argument_list pos:start="261:21" pos:end="263:38">(<argument pos:start="261:22" pos:end="261:73"><expr pos:start="261:22" pos:end="261:73"><literal type="string" pos:start="261:22" pos:end="261:73">"Format driver '%s' does not support image creation"</literal></expr></argument>,

                     <argument pos:start="263:22" pos:end="263:37"><expr pos:start="263:22" pos:end="263:37"><name pos:start="263:22" pos:end="263:37"><name pos:start="263:22" pos:end="263:24">drv</name><operator pos:start="263:25" pos:end="263:26">-&gt;</operator><name pos:start="263:27" pos:end="263:37">format_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="265:9" pos:end="265:17"><expr pos:start="265:9" pos:end="265:16"><name pos:start="265:9" pos:end="265:11">ret</name> <operator pos:start="265:13" pos:end="265:13">=</operator> <operator pos:start="265:15" pos:end="265:15">-</operator><literal type="number" pos:start="265:16" pos:end="265:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="267:9" pos:end="267:17">goto <name pos:start="267:14" pos:end="267:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="271:5" pos:end="281:5"><if pos:start="271:5" pos:end="281:5">if <condition pos:start="271:8" pos:end="271:32">(<expr pos:start="271:9" pos:end="271:31"><operator pos:start="271:9" pos:end="271:9">!</operator><name pos:start="271:10" pos:end="271:31"><name pos:start="271:10" pos:end="271:18">proto_drv</name><operator pos:start="271:19" pos:end="271:20">-&gt;</operator><name pos:start="271:21" pos:end="271:31">create_opts</name></name></expr>)</condition> <block pos:start="271:34" pos:end="281:5">{<block_content pos:start="273:9" pos:end="279:17">

        <expr_stmt pos:start="273:9" pos:end="275:45"><expr pos:start="273:9" pos:end="275:44"><call pos:start="273:9" pos:end="275:44"><name pos:start="273:9" pos:end="273:20">error_report</name><argument_list pos:start="273:21" pos:end="275:44">(<argument pos:start="273:22" pos:end="273:75"><expr pos:start="273:22" pos:end="273:75"><literal type="string" pos:start="273:22" pos:end="273:75">"Protocol driver '%s' does not support image creation"</literal></expr></argument>,

                     <argument pos:start="275:22" pos:end="275:43"><expr pos:start="275:22" pos:end="275:43"><name pos:start="275:22" pos:end="275:43"><name pos:start="275:22" pos:end="275:30">proto_drv</name><operator pos:start="275:31" pos:end="275:32">-&gt;</operator><name pos:start="275:33" pos:end="275:43">format_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="277:9" pos:end="277:17"><expr pos:start="277:9" pos:end="277:16"><name pos:start="277:9" pos:end="277:11">ret</name> <operator pos:start="277:13" pos:end="277:13">=</operator> <operator pos:start="277:15" pos:end="277:15">-</operator><literal type="number" pos:start="277:16" pos:end="277:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="279:9" pos:end="279:17">goto <name pos:start="279:14" pos:end="279:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="283:5" pos:end="283:66"><expr pos:start="283:5" pos:end="283:65"><name pos:start="283:5" pos:end="283:15">create_opts</name> <operator pos:start="283:17" pos:end="283:17">=</operator> <call pos:start="283:19" pos:end="283:65"><name pos:start="283:19" pos:end="283:34">qemu_opts_append</name><argument_list pos:start="283:35" pos:end="283:65">(<argument pos:start="283:36" pos:end="283:46"><expr pos:start="283:36" pos:end="283:46"><name pos:start="283:36" pos:end="283:46">create_opts</name></expr></argument>, <argument pos:start="283:49" pos:end="283:64"><expr pos:start="283:49" pos:end="283:64"><name pos:start="283:49" pos:end="283:64"><name pos:start="283:49" pos:end="283:51">drv</name><operator pos:start="283:52" pos:end="283:53">-&gt;</operator><name pos:start="283:54" pos:end="283:64">create_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="285:5" pos:end="285:72"><expr pos:start="285:5" pos:end="285:71"><name pos:start="285:5" pos:end="285:15">create_opts</name> <operator pos:start="285:17" pos:end="285:17">=</operator> <call pos:start="285:19" pos:end="285:71"><name pos:start="285:19" pos:end="285:34">qemu_opts_append</name><argument_list pos:start="285:35" pos:end="285:71">(<argument pos:start="285:36" pos:end="285:46"><expr pos:start="285:36" pos:end="285:46"><name pos:start="285:36" pos:end="285:46">create_opts</name></expr></argument>, <argument pos:start="285:49" pos:end="285:70"><expr pos:start="285:49" pos:end="285:70"><name pos:start="285:49" pos:end="285:70"><name pos:start="285:49" pos:end="285:57">proto_drv</name><operator pos:start="285:58" pos:end="285:59">-&gt;</operator><name pos:start="285:60" pos:end="285:70">create_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="289:5" pos:end="289:64"><expr pos:start="289:5" pos:end="289:63"><name pos:start="289:5" pos:end="289:8">opts</name> <operator pos:start="289:10" pos:end="289:10">=</operator> <call pos:start="289:12" pos:end="289:63"><name pos:start="289:12" pos:end="289:27">qemu_opts_create</name><argument_list pos:start="289:28" pos:end="289:63">(<argument pos:start="289:29" pos:end="289:39"><expr pos:start="289:29" pos:end="289:39"><name pos:start="289:29" pos:end="289:39">create_opts</name></expr></argument>, <argument pos:start="289:42" pos:end="289:45"><expr pos:start="289:42" pos:end="289:45"><name pos:start="289:42" pos:end="289:45">NULL</name></expr></argument>, <argument pos:start="289:48" pos:end="289:48"><expr pos:start="289:48" pos:end="289:48"><literal type="number" pos:start="289:48" pos:end="289:48">0</literal></expr></argument>, <argument pos:start="289:51" pos:end="289:62"><expr pos:start="289:51" pos:end="289:62"><operator pos:start="289:51" pos:end="289:51">&amp;</operator><name pos:start="289:52" pos:end="289:62">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="293:5" pos:end="293:31"><expr pos:start="293:5" pos:end="293:30"><name pos:start="293:5" pos:end="293:8">size</name> <operator pos:start="293:10" pos:end="293:10">=</operator> <call pos:start="293:12" pos:end="293:30"><name pos:start="293:12" pos:end="293:24">blk_getlength</name><argument_list pos:start="293:25" pos:end="293:30">(<argument pos:start="293:26" pos:end="293:29"><expr pos:start="293:26" pos:end="293:29"><name pos:start="293:26" pos:end="293:29">blk1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="295:5" pos:end="303:5"><if pos:start="295:5" pos:end="303:5">if <condition pos:start="295:8" pos:end="295:17">(<expr pos:start="295:9" pos:end="295:16"><name pos:start="295:9" pos:end="295:12">size</name> <operator pos:start="295:14" pos:end="295:14">&lt;</operator> <literal type="number" pos:start="295:16" pos:end="295:16">0</literal></expr>)</condition> <block pos:start="295:19" pos:end="303:5">{<block_content pos:start="297:9" pos:end="301:17">

        <expr_stmt pos:start="297:9" pos:end="297:65"><expr pos:start="297:9" pos:end="297:64"><call pos:start="297:9" pos:end="297:64"><name pos:start="297:9" pos:end="297:20">error_report</name><argument_list pos:start="297:21" pos:end="297:64">(<argument pos:start="297:22" pos:end="297:50"><expr pos:start="297:22" pos:end="297:50"><literal type="string" pos:start="297:22" pos:end="297:50">"Failed to get size for '%s'"</literal></expr></argument>, <argument pos:start="297:53" pos:end="297:63"><expr pos:start="297:53" pos:end="297:63"><name pos:start="297:53" pos:end="297:63"><name pos:start="297:53" pos:end="297:54">in</name><operator pos:start="297:55" pos:end="297:55">.</operator><name pos:start="297:56" pos:end="297:63">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="299:9" pos:end="299:17"><expr pos:start="299:9" pos:end="299:16"><name pos:start="299:9" pos:end="299:11">ret</name> <operator pos:start="299:13" pos:end="299:13">=</operator> <operator pos:start="299:15" pos:end="299:15">-</operator><literal type="number" pos:start="299:16" pos:end="299:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="301:9" pos:end="301:17">goto <name pos:start="301:14" pos:end="301:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="307:5" pos:end="313:5"><if pos:start="307:5" pos:end="313:5">if <condition pos:start="307:8" pos:end="309:33">(<expr pos:start="307:9" pos:end="309:32"><name pos:start="307:9" pos:end="307:16"><name pos:start="307:9" pos:end="307:10">dd</name><operator pos:start="307:11" pos:end="307:11">.</operator><name pos:start="307:12" pos:end="307:16">flags</name></name> <operator pos:start="307:18" pos:end="307:18">&amp;</operator> <name pos:start="307:20" pos:end="307:26">C_COUNT</name> <operator pos:start="307:28" pos:end="307:29">&amp;&amp;</operator> <name pos:start="307:31" pos:end="307:38"><name pos:start="307:31" pos:end="307:32">dd</name><operator pos:start="307:33" pos:end="307:33">.</operator><name pos:start="307:34" pos:end="307:38">count</name></name> <operator pos:start="307:40" pos:end="307:41">&lt;=</operator> <name pos:start="307:43" pos:end="307:51">INT64_MAX</name> <operator pos:start="307:53" pos:end="307:53">/</operator> <name pos:start="307:55" pos:end="307:60"><name pos:start="307:55" pos:end="307:56">in</name><operator pos:start="307:57" pos:end="307:57">.</operator><name pos:start="307:58" pos:end="307:60">bsz</name></name> <operator pos:start="307:62" pos:end="307:63">&amp;&amp;</operator>

        <name pos:start="309:9" pos:end="309:16"><name pos:start="309:9" pos:end="309:10">dd</name><operator pos:start="309:11" pos:end="309:11">.</operator><name pos:start="309:12" pos:end="309:16">count</name></name> <operator pos:start="309:18" pos:end="309:18">*</operator> <name pos:start="309:20" pos:end="309:25"><name pos:start="309:20" pos:end="309:21">in</name><operator pos:start="309:22" pos:end="309:22">.</operator><name pos:start="309:23" pos:end="309:25">bsz</name></name> <operator pos:start="309:27" pos:end="309:27">&lt;</operator> <name pos:start="309:29" pos:end="309:32">size</name></expr>)</condition> <block pos:start="309:35" pos:end="313:5">{<block_content pos:start="311:9" pos:end="311:33">

        <expr_stmt pos:start="311:9" pos:end="311:33"><expr pos:start="311:9" pos:end="311:32"><name pos:start="311:9" pos:end="311:12">size</name> <operator pos:start="311:14" pos:end="311:14">=</operator> <name pos:start="311:16" pos:end="311:23"><name pos:start="311:16" pos:end="311:17">dd</name><operator pos:start="311:18" pos:end="311:18">.</operator><name pos:start="311:19" pos:end="311:23">count</name></name> <operator pos:start="311:25" pos:end="311:25">*</operator> <name pos:start="311:27" pos:end="311:32"><name pos:start="311:27" pos:end="311:28">in</name><operator pos:start="311:29" pos:end="311:29">.</operator><name pos:start="311:30" pos:end="311:32">bsz</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="317:5" pos:end="317:74">/* Overflow means the specified offset is beyond input image's size */</comment>

    <if_stmt pos:start="319:5" pos:end="331:5"><if pos:start="319:5" pos:end="325:5">if <condition pos:start="319:8" pos:end="321:57">(<expr pos:start="319:9" pos:end="321:56"><name pos:start="319:9" pos:end="319:16"><name pos:start="319:9" pos:end="319:10">dd</name><operator pos:start="319:11" pos:end="319:11">.</operator><name pos:start="319:12" pos:end="319:16">flags</name></name> <operator pos:start="319:18" pos:end="319:18">&amp;</operator> <name pos:start="319:20" pos:end="319:25">C_SKIP</name> <operator pos:start="319:27" pos:end="319:28">&amp;&amp;</operator> <operator pos:start="319:30" pos:end="319:30">(</operator><name pos:start="319:31" pos:end="319:39"><name pos:start="319:31" pos:end="319:32">in</name><operator pos:start="319:33" pos:end="319:33">.</operator><name pos:start="319:34" pos:end="319:39">offset</name></name> <operator pos:start="319:41" pos:end="319:41">&gt;</operator> <name pos:start="319:43" pos:end="319:51">INT64_MAX</name> <operator pos:start="319:53" pos:end="319:53">/</operator> <name pos:start="319:55" pos:end="319:60"><name pos:start="319:55" pos:end="319:56">in</name><operator pos:start="319:57" pos:end="319:57">.</operator><name pos:start="319:58" pos:end="319:60">bsz</name></name> <operator pos:start="319:62" pos:end="319:63">||</operator>

                              <name pos:start="321:31" pos:end="321:34">size</name> <operator pos:start="321:36" pos:end="321:36">&lt;</operator> <name pos:start="321:38" pos:end="321:43"><name pos:start="321:38" pos:end="321:39">in</name><operator pos:start="321:40" pos:end="321:40">.</operator><name pos:start="321:41" pos:end="321:43">bsz</name></name> <operator pos:start="321:45" pos:end="321:45">*</operator> <name pos:start="321:47" pos:end="321:55"><name pos:start="321:47" pos:end="321:48">in</name><operator pos:start="321:49" pos:end="321:49">.</operator><name pos:start="321:50" pos:end="321:55">offset</name></name><operator pos:start="321:56" pos:end="321:56">)</operator></expr>)</condition> <block pos:start="321:59" pos:end="325:5">{<block_content pos:start="323:9" pos:end="323:67">

        <expr_stmt pos:start="323:9" pos:end="323:67"><expr pos:start="323:9" pos:end="323:66"><call pos:start="323:9" pos:end="323:66"><name pos:start="323:9" pos:end="323:27">qemu_opt_set_number</name><argument_list pos:start="323:28" pos:end="323:66">(<argument pos:start="323:29" pos:end="323:32"><expr pos:start="323:29" pos:end="323:32"><name pos:start="323:29" pos:end="323:32">opts</name></expr></argument>, <argument pos:start="323:35" pos:end="323:48"><expr pos:start="323:35" pos:end="323:48"><name pos:start="323:35" pos:end="323:48">BLOCK_OPT_SIZE</name></expr></argument>, <argument pos:start="323:51" pos:end="323:51"><expr pos:start="323:51" pos:end="323:51"><literal type="number" pos:start="323:51" pos:end="323:51">0</literal></expr></argument>, <argument pos:start="323:54" pos:end="323:65"><expr pos:start="323:54" pos:end="323:65"><operator pos:start="323:54" pos:end="323:54">&amp;</operator><name pos:start="323:55" pos:end="323:65">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="325:7" pos:end="331:5">else <block pos:start="325:12" pos:end="331:5">{<block_content pos:start="327:9" pos:end="329:69">

        <expr_stmt pos:start="327:9" pos:end="329:69"><expr pos:start="327:9" pos:end="329:68"><call pos:start="327:9" pos:end="329:68"><name pos:start="327:9" pos:end="327:27">qemu_opt_set_number</name><argument_list pos:start="327:28" pos:end="329:68">(<argument pos:start="327:29" pos:end="327:32"><expr pos:start="327:29" pos:end="327:32"><name pos:start="327:29" pos:end="327:32">opts</name></expr></argument>, <argument pos:start="327:35" pos:end="327:48"><expr pos:start="327:35" pos:end="327:48"><name pos:start="327:35" pos:end="327:48">BLOCK_OPT_SIZE</name></expr></argument>,

                            <argument pos:start="329:29" pos:end="329:53"><expr pos:start="329:29" pos:end="329:53"><name pos:start="329:29" pos:end="329:32">size</name> <operator pos:start="329:34" pos:end="329:34">-</operator> <name pos:start="329:36" pos:end="329:41"><name pos:start="329:36" pos:end="329:37">in</name><operator pos:start="329:38" pos:end="329:38">.</operator><name pos:start="329:39" pos:end="329:41">bsz</name></name> <operator pos:start="329:43" pos:end="329:43">*</operator> <name pos:start="329:45" pos:end="329:53"><name pos:start="329:45" pos:end="329:46">in</name><operator pos:start="329:47" pos:end="329:47">.</operator><name pos:start="329:48" pos:end="329:53">offset</name></name></expr></argument>, <argument pos:start="329:56" pos:end="329:67"><expr pos:start="329:56" pos:end="329:67"><operator pos:start="329:56" pos:end="329:56">&amp;</operator><name pos:start="329:57" pos:end="329:67">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="335:5" pos:end="335:59"><expr pos:start="335:5" pos:end="335:58"><name pos:start="335:5" pos:end="335:7">ret</name> <operator pos:start="335:9" pos:end="335:9">=</operator> <call pos:start="335:11" pos:end="335:58"><name pos:start="335:11" pos:end="335:21">bdrv_create</name><argument_list pos:start="335:22" pos:end="335:58">(<argument pos:start="335:23" pos:end="335:25"><expr pos:start="335:23" pos:end="335:25"><name pos:start="335:23" pos:end="335:25">drv</name></expr></argument>, <argument pos:start="335:28" pos:end="335:39"><expr pos:start="335:28" pos:end="335:39"><name pos:start="335:28" pos:end="335:39"><name pos:start="335:28" pos:end="335:30">out</name><operator pos:start="335:31" pos:end="335:31">.</operator><name pos:start="335:32" pos:end="335:39">filename</name></name></expr></argument>, <argument pos:start="335:42" pos:end="335:45"><expr pos:start="335:42" pos:end="335:45"><name pos:start="335:42" pos:end="335:45">opts</name></expr></argument>, <argument pos:start="335:48" pos:end="335:57"><expr pos:start="335:48" pos:end="335:57"><operator pos:start="335:48" pos:end="335:48">&amp;</operator><name pos:start="335:49" pos:end="335:57">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="337:5" pos:end="349:5"><if pos:start="337:5" pos:end="349:5">if <condition pos:start="337:8" pos:end="337:16">(<expr pos:start="337:9" pos:end="337:15"><name pos:start="337:9" pos:end="337:11">ret</name> <operator pos:start="337:13" pos:end="337:13">&lt;</operator> <literal type="number" pos:start="337:15" pos:end="337:15">0</literal></expr>)</condition> <block pos:start="337:18" pos:end="349:5">{<block_content pos:start="339:9" pos:end="347:17">

        <expr_stmt pos:start="339:9" pos:end="343:40"><expr pos:start="339:9" pos:end="343:39"><call pos:start="339:9" pos:end="343:39"><name pos:start="339:9" pos:end="339:25">error_reportf_err</name><argument_list pos:start="339:26" pos:end="343:39">(<argument pos:start="339:27" pos:end="339:35"><expr pos:start="339:27" pos:end="339:35"><name pos:start="339:27" pos:end="339:35">local_err</name></expr></argument>,

                          <argument pos:start="341:27" pos:end="341:67"><expr pos:start="341:27" pos:end="341:67"><literal type="string" pos:start="341:27" pos:end="341:67">"%s: error while creating output image: "</literal></expr></argument>,

                          <argument pos:start="343:27" pos:end="343:38"><expr pos:start="343:27" pos:end="343:38"><name pos:start="343:27" pos:end="343:38"><name pos:start="343:27" pos:end="343:29">out</name><operator pos:start="343:30" pos:end="343:30">.</operator><name pos:start="343:31" pos:end="343:38">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="345:9" pos:end="345:17"><expr pos:start="345:9" pos:end="345:16"><name pos:start="345:9" pos:end="345:11">ret</name> <operator pos:start="345:13" pos:end="345:13">=</operator> <operator pos:start="345:15" pos:end="345:15">-</operator><literal type="number" pos:start="345:16" pos:end="345:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="347:9" pos:end="347:17">goto <name pos:start="347:14" pos:end="347:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="353:5" pos:end="355:34"><expr pos:start="353:5" pos:end="355:33"><name pos:start="353:5" pos:end="353:8">blk2</name> <operator pos:start="353:10" pos:end="353:10">=</operator> <call pos:start="353:12" pos:end="355:33"><name pos:start="353:12" pos:end="353:19">img_open</name><argument_list pos:start="353:20" pos:end="355:33">(<argument pos:start="353:21" pos:end="353:30"><expr pos:start="353:21" pos:end="353:30"><name pos:start="353:21" pos:end="353:30">image_opts</name></expr></argument>, <argument pos:start="353:33" pos:end="353:44"><expr pos:start="353:33" pos:end="353:44"><name pos:start="353:33" pos:end="353:44"><name pos:start="353:33" pos:end="353:35">out</name><operator pos:start="353:36" pos:end="353:36">.</operator><name pos:start="353:37" pos:end="353:44">filename</name></name></expr></argument>, <argument pos:start="353:47" pos:end="353:53"><expr pos:start="353:47" pos:end="353:53"><name pos:start="353:47" pos:end="353:53">out_fmt</name></expr></argument>, <argument pos:start="353:56" pos:end="353:66"><expr pos:start="353:56" pos:end="353:66"><name pos:start="353:56" pos:end="353:66">BDRV_O_RDWR</name></expr></argument>,

                    <argument pos:start="355:21" pos:end="355:25"><expr pos:start="355:21" pos:end="355:25"><name pos:start="355:21" pos:end="355:25">false</name></expr></argument>, <argument pos:start="355:28" pos:end="355:32"><expr pos:start="355:28" pos:end="355:32"><name pos:start="355:28" pos:end="355:32">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="359:5" pos:end="365:5"><if pos:start="359:5" pos:end="365:5">if <condition pos:start="359:8" pos:end="359:14">(<expr pos:start="359:9" pos:end="359:13"><operator pos:start="359:9" pos:end="359:9">!</operator><name pos:start="359:10" pos:end="359:13">blk2</name></expr>)</condition> <block pos:start="359:16" pos:end="365:5">{<block_content pos:start="361:9" pos:end="363:17">

        <expr_stmt pos:start="361:9" pos:end="361:17"><expr pos:start="361:9" pos:end="361:16"><name pos:start="361:9" pos:end="361:11">ret</name> <operator pos:start="361:13" pos:end="361:13">=</operator> <operator pos:start="361:15" pos:end="361:15">-</operator><literal type="number" pos:start="361:16" pos:end="361:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="363:9" pos:end="363:17">goto <name pos:start="363:14" pos:end="363:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="369:5" pos:end="387:5"><if pos:start="369:5" pos:end="383:5">if <condition pos:start="369:8" pos:end="371:57">(<expr pos:start="369:9" pos:end="371:56"><name pos:start="369:9" pos:end="369:16"><name pos:start="369:9" pos:end="369:10">dd</name><operator pos:start="369:11" pos:end="369:11">.</operator><name pos:start="369:12" pos:end="369:16">flags</name></name> <operator pos:start="369:18" pos:end="369:18">&amp;</operator> <name pos:start="369:20" pos:end="369:25">C_SKIP</name> <operator pos:start="369:27" pos:end="369:28">&amp;&amp;</operator> <operator pos:start="369:30" pos:end="369:30">(</operator><name pos:start="369:31" pos:end="369:39"><name pos:start="369:31" pos:end="369:32">in</name><operator pos:start="369:33" pos:end="369:33">.</operator><name pos:start="369:34" pos:end="369:39">offset</name></name> <operator pos:start="369:41" pos:end="369:41">&gt;</operator> <name pos:start="369:43" pos:end="369:51">INT64_MAX</name> <operator pos:start="369:53" pos:end="369:53">/</operator> <name pos:start="369:55" pos:end="369:60"><name pos:start="369:55" pos:end="369:56">in</name><operator pos:start="369:57" pos:end="369:57">.</operator><name pos:start="369:58" pos:end="369:60">bsz</name></name> <operator pos:start="369:62" pos:end="369:63">||</operator>

                              <name pos:start="371:31" pos:end="371:34">size</name> <operator pos:start="371:36" pos:end="371:36">&lt;</operator> <name pos:start="371:38" pos:end="371:46"><name pos:start="371:38" pos:end="371:39">in</name><operator pos:start="371:40" pos:end="371:40">.</operator><name pos:start="371:41" pos:end="371:46">offset</name></name> <operator pos:start="371:48" pos:end="371:48">*</operator> <name pos:start="371:50" pos:end="371:55"><name pos:start="371:50" pos:end="371:51">in</name><operator pos:start="371:52" pos:end="371:52">.</operator><name pos:start="371:53" pos:end="371:55">bsz</name></name><operator pos:start="371:56" pos:end="371:56">)</operator></expr>)</condition> <block pos:start="371:59" pos:end="383:5">{<block_content pos:start="379:9" pos:end="381:22">

        <comment type="block" pos:start="373:9" pos:end="377:11">/* We give a warning if the skip option is bigger than the input

         * size and create an empty output disk image (i.e. like dd(1)).

         */</comment>

        <expr_stmt pos:start="379:9" pos:end="379:73"><expr pos:start="379:9" pos:end="379:72"><call pos:start="379:9" pos:end="379:72"><name pos:start="379:9" pos:end="379:20">error_report</name><argument_list pos:start="379:21" pos:end="379:72">(<argument pos:start="379:22" pos:end="379:58"><expr pos:start="379:22" pos:end="379:58"><literal type="string" pos:start="379:22" pos:end="379:58">"%s: cannot skip to specified offset"</literal></expr></argument>, <argument pos:start="379:61" pos:end="379:71"><expr pos:start="379:61" pos:end="379:71"><name pos:start="379:61" pos:end="379:71"><name pos:start="379:61" pos:end="379:62">in</name><operator pos:start="379:63" pos:end="379:63">.</operator><name pos:start="379:64" pos:end="379:71">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="381:9" pos:end="381:22"><expr pos:start="381:9" pos:end="381:21"><name pos:start="381:9" pos:end="381:14">in_pos</name> <operator pos:start="381:16" pos:end="381:16">=</operator> <name pos:start="381:18" pos:end="381:21">size</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="383:7" pos:end="387:5">else <block pos:start="383:12" pos:end="387:5">{<block_content pos:start="385:9" pos:end="385:36">

        <expr_stmt pos:start="385:9" pos:end="385:36"><expr pos:start="385:9" pos:end="385:35"><name pos:start="385:9" pos:end="385:14">in_pos</name> <operator pos:start="385:16" pos:end="385:16">=</operator> <name pos:start="385:18" pos:end="385:26"><name pos:start="385:18" pos:end="385:19">in</name><operator pos:start="385:20" pos:end="385:20">.</operator><name pos:start="385:21" pos:end="385:26">offset</name></name> <operator pos:start="385:28" pos:end="385:28">*</operator> <name pos:start="385:30" pos:end="385:35"><name pos:start="385:30" pos:end="385:31">in</name><operator pos:start="385:32" pos:end="385:32">.</operator><name pos:start="385:33" pos:end="385:35">bsz</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="391:5" pos:end="391:36"><expr pos:start="391:5" pos:end="391:35"><name pos:start="391:5" pos:end="391:10"><name pos:start="391:5" pos:end="391:6">in</name><operator pos:start="391:7" pos:end="391:7">.</operator><name pos:start="391:8" pos:end="391:10">buf</name></name> <operator pos:start="391:12" pos:end="391:12">=</operator> <call pos:start="391:14" pos:end="391:35"><name pos:start="391:14" pos:end="391:18">g_new</name><argument_list pos:start="391:19" pos:end="391:35">(<argument pos:start="391:20" pos:end="391:26"><expr pos:start="391:20" pos:end="391:26"><name pos:start="391:20" pos:end="391:26">uint8_t</name></expr></argument>, <argument pos:start="391:29" pos:end="391:34"><expr pos:start="391:29" pos:end="391:34"><name pos:start="391:29" pos:end="391:34"><name pos:start="391:29" pos:end="391:30">in</name><operator pos:start="391:31" pos:end="391:31">.</operator><name pos:start="391:32" pos:end="391:34">bsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="395:5" pos:end="445:5">for <control pos:start="395:9" pos:end="395:51">(<init pos:start="395:10" pos:end="395:21"><expr pos:start="395:10" pos:end="395:20"><name pos:start="395:10" pos:end="395:16">out_pos</name> <operator pos:start="395:18" pos:end="395:18">=</operator> <literal type="number" pos:start="395:20" pos:end="395:20">0</literal></expr>;</init> <condition pos:start="395:23" pos:end="395:36"><expr pos:start="395:23" pos:end="395:35"><name pos:start="395:23" pos:end="395:28">in_pos</name> <operator pos:start="395:30" pos:end="395:30">&lt;</operator> <name pos:start="395:32" pos:end="395:35">size</name></expr>;</condition> <incr pos:start="395:38" pos:end="395:50"><expr pos:start="395:38" pos:end="395:50"><name pos:start="395:38" pos:end="395:48">block_count</name><operator pos:start="395:49" pos:end="395:50">++</operator></expr></incr>)</control> <block pos:start="395:53" pos:end="445:5">{<block_content pos:start="397:9" pos:end="443:27">

        <decl_stmt pos:start="397:9" pos:end="397:28"><decl pos:start="397:9" pos:end="397:18"><type pos:start="397:9" pos:end="397:11"><name pos:start="397:9" pos:end="397:11">int</name></type> <name pos:start="397:13" pos:end="397:18">in_ret</name></decl>, <decl pos:start="397:21" pos:end="397:27"><type ref="prev" pos:start="397:9" pos:end="397:11"/><name pos:start="397:21" pos:end="397:27">out_ret</name></decl>;</decl_stmt>



        <if_stmt pos:start="401:9" pos:end="409:9"><if pos:start="401:9" pos:end="405:9">if <condition pos:start="401:12" pos:end="401:35">(<expr pos:start="401:13" pos:end="401:34"><name pos:start="401:13" pos:end="401:18">in_pos</name> <operator pos:start="401:20" pos:end="401:20">+</operator> <name pos:start="401:22" pos:end="401:27"><name pos:start="401:22" pos:end="401:23">in</name><operator pos:start="401:24" pos:end="401:24">.</operator><name pos:start="401:25" pos:end="401:27">bsz</name></name> <operator pos:start="401:29" pos:end="401:29">&gt;</operator> <name pos:start="401:31" pos:end="401:34">size</name></expr>)</condition> <block pos:start="401:37" pos:end="405:9">{<block_content pos:start="403:13" pos:end="403:68">

            <expr_stmt pos:start="403:13" pos:end="403:68"><expr pos:start="403:13" pos:end="403:67"><name pos:start="403:13" pos:end="403:18">in_ret</name> <operator pos:start="403:20" pos:end="403:20">=</operator> <call pos:start="403:22" pos:end="403:67"><name pos:start="403:22" pos:end="403:30">blk_pread</name><argument_list pos:start="403:31" pos:end="403:67">(<argument pos:start="403:32" pos:end="403:35"><expr pos:start="403:32" pos:end="403:35"><name pos:start="403:32" pos:end="403:35">blk1</name></expr></argument>, <argument pos:start="403:38" pos:end="403:43"><expr pos:start="403:38" pos:end="403:43"><name pos:start="403:38" pos:end="403:43">in_pos</name></expr></argument>, <argument pos:start="403:46" pos:end="403:51"><expr pos:start="403:46" pos:end="403:51"><name pos:start="403:46" pos:end="403:51"><name pos:start="403:46" pos:end="403:47">in</name><operator pos:start="403:48" pos:end="403:48">.</operator><name pos:start="403:49" pos:end="403:51">buf</name></name></expr></argument>, <argument pos:start="403:54" pos:end="403:66"><expr pos:start="403:54" pos:end="403:66"><name pos:start="403:54" pos:end="403:57">size</name> <operator pos:start="403:59" pos:end="403:59">-</operator> <name pos:start="403:61" pos:end="403:66">in_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="405:11" pos:end="409:9">else <block pos:start="405:16" pos:end="409:9">{<block_content pos:start="407:13" pos:end="407:61">

            <expr_stmt pos:start="407:13" pos:end="407:61"><expr pos:start="407:13" pos:end="407:60"><name pos:start="407:13" pos:end="407:18">in_ret</name> <operator pos:start="407:20" pos:end="407:20">=</operator> <call pos:start="407:22" pos:end="407:60"><name pos:start="407:22" pos:end="407:30">blk_pread</name><argument_list pos:start="407:31" pos:end="407:60">(<argument pos:start="407:32" pos:end="407:35"><expr pos:start="407:32" pos:end="407:35"><name pos:start="407:32" pos:end="407:35">blk1</name></expr></argument>, <argument pos:start="407:38" pos:end="407:43"><expr pos:start="407:38" pos:end="407:43"><name pos:start="407:38" pos:end="407:43">in_pos</name></expr></argument>, <argument pos:start="407:46" pos:end="407:51"><expr pos:start="407:46" pos:end="407:51"><name pos:start="407:46" pos:end="407:51"><name pos:start="407:46" pos:end="407:47">in</name><operator pos:start="407:48" pos:end="407:48">.</operator><name pos:start="407:49" pos:end="407:51">buf</name></name></expr></argument>, <argument pos:start="407:54" pos:end="407:59"><expr pos:start="407:54" pos:end="407:59"><name pos:start="407:54" pos:end="407:59"><name pos:start="407:54" pos:end="407:55">in</name><operator pos:start="407:56" pos:end="407:56">.</operator><name pos:start="407:57" pos:end="407:59">bsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="411:9" pos:end="421:9"><if pos:start="411:9" pos:end="421:9">if <condition pos:start="411:12" pos:end="411:23">(<expr pos:start="411:13" pos:end="411:22"><name pos:start="411:13" pos:end="411:18">in_ret</name> <operator pos:start="411:20" pos:end="411:20">&lt;</operator> <literal type="number" pos:start="411:22" pos:end="411:22">0</literal></expr>)</condition> <block pos:start="411:25" pos:end="421:9">{<block_content pos:start="413:13" pos:end="419:21">

            <expr_stmt pos:start="413:13" pos:end="415:44"><expr pos:start="413:13" pos:end="415:43"><call pos:start="413:13" pos:end="415:43"><name pos:start="413:13" pos:end="413:24">error_report</name><argument_list pos:start="413:25" pos:end="415:43">(<argument pos:start="413:26" pos:end="413:72"><expr pos:start="413:26" pos:end="413:72"><literal type="string" pos:start="413:26" pos:end="413:72">"error while reading from input image file: %s"</literal></expr></argument>,

                         <argument pos:start="415:26" pos:end="415:42"><expr pos:start="415:26" pos:end="415:42"><call pos:start="415:26" pos:end="415:42"><name pos:start="415:26" pos:end="415:33">strerror</name><argument_list pos:start="415:34" pos:end="415:42">(<argument pos:start="415:35" pos:end="415:41"><expr pos:start="415:35" pos:end="415:41"><operator pos:start="415:35" pos:end="415:35">-</operator><name pos:start="415:36" pos:end="415:41">in_ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="417:13" pos:end="417:21"><expr pos:start="417:13" pos:end="417:20"><name pos:start="417:13" pos:end="417:15">ret</name> <operator pos:start="417:17" pos:end="417:17">=</operator> <operator pos:start="417:19" pos:end="417:19">-</operator><literal type="number" pos:start="417:20" pos:end="417:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="419:13" pos:end="419:21">goto <name pos:start="419:18" pos:end="419:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="423:9" pos:end="423:25"><expr pos:start="423:9" pos:end="423:24"><name pos:start="423:9" pos:end="423:14">in_pos</name> <operator pos:start="423:16" pos:end="423:17">+=</operator> <name pos:start="423:19" pos:end="423:24">in_ret</name></expr>;</expr_stmt>



        <expr_stmt pos:start="427:9" pos:end="427:63"><expr pos:start="427:9" pos:end="427:62"><name pos:start="427:9" pos:end="427:15">out_ret</name> <operator pos:start="427:17" pos:end="427:17">=</operator> <call pos:start="427:19" pos:end="427:62"><name pos:start="427:19" pos:end="427:28">blk_pwrite</name><argument_list pos:start="427:29" pos:end="427:62">(<argument pos:start="427:30" pos:end="427:33"><expr pos:start="427:30" pos:end="427:33"><name pos:start="427:30" pos:end="427:33">blk2</name></expr></argument>, <argument pos:start="427:36" pos:end="427:42"><expr pos:start="427:36" pos:end="427:42"><name pos:start="427:36" pos:end="427:42">out_pos</name></expr></argument>, <argument pos:start="427:45" pos:end="427:50"><expr pos:start="427:45" pos:end="427:50"><name pos:start="427:45" pos:end="427:50"><name pos:start="427:45" pos:end="427:46">in</name><operator pos:start="427:47" pos:end="427:47">.</operator><name pos:start="427:48" pos:end="427:50">buf</name></name></expr></argument>, <argument pos:start="427:53" pos:end="427:58"><expr pos:start="427:53" pos:end="427:58"><name pos:start="427:53" pos:end="427:58">in_ret</name></expr></argument>, <argument pos:start="427:61" pos:end="427:61"><expr pos:start="427:61" pos:end="427:61"><literal type="number" pos:start="427:61" pos:end="427:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="431:9" pos:end="441:9"><if pos:start="431:9" pos:end="441:9">if <condition pos:start="431:12" pos:end="431:24">(<expr pos:start="431:13" pos:end="431:23"><name pos:start="431:13" pos:end="431:19">out_ret</name> <operator pos:start="431:21" pos:end="431:21">&lt;</operator> <literal type="number" pos:start="431:23" pos:end="431:23">0</literal></expr>)</condition> <block pos:start="431:26" pos:end="441:9">{<block_content pos:start="433:13" pos:end="439:21">

            <expr_stmt pos:start="433:13" pos:end="435:45"><expr pos:start="433:13" pos:end="435:44"><call pos:start="433:13" pos:end="435:44"><name pos:start="433:13" pos:end="433:24">error_report</name><argument_list pos:start="433:25" pos:end="435:44">(<argument pos:start="433:26" pos:end="433:71"><expr pos:start="433:26" pos:end="433:71"><literal type="string" pos:start="433:26" pos:end="433:71">"error while writing to output image file: %s"</literal></expr></argument>,

                         <argument pos:start="435:26" pos:end="435:43"><expr pos:start="435:26" pos:end="435:43"><call pos:start="435:26" pos:end="435:43"><name pos:start="435:26" pos:end="435:33">strerror</name><argument_list pos:start="435:34" pos:end="435:43">(<argument pos:start="435:35" pos:end="435:42"><expr pos:start="435:35" pos:end="435:42"><operator pos:start="435:35" pos:end="435:35">-</operator><name pos:start="435:36" pos:end="435:42">out_ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="437:13" pos:end="437:21"><expr pos:start="437:13" pos:end="437:20"><name pos:start="437:13" pos:end="437:15">ret</name> <operator pos:start="437:17" pos:end="437:17">=</operator> <operator pos:start="437:19" pos:end="437:19">-</operator><literal type="number" pos:start="437:20" pos:end="437:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="439:13" pos:end="439:21">goto <name pos:start="439:18" pos:end="439:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="443:9" pos:end="443:27"><expr pos:start="443:9" pos:end="443:26"><name pos:start="443:9" pos:end="443:15">out_pos</name> <operator pos:start="443:17" pos:end="443:18">+=</operator> <name pos:start="443:20" pos:end="443:26">out_ret</name></expr>;</expr_stmt>

    </block_content>}</block></for>



<label pos:start="449:1" pos:end="449:4"><name pos:start="449:1" pos:end="449:3">out</name>:</label>

    <expr_stmt pos:start="451:5" pos:end="451:16"><expr pos:start="451:5" pos:end="451:15"><call pos:start="451:5" pos:end="451:15"><name pos:start="451:5" pos:end="451:10">g_free</name><argument_list pos:start="451:11" pos:end="451:15">(<argument pos:start="451:12" pos:end="451:14"><expr pos:start="451:12" pos:end="451:14"><name pos:start="451:12" pos:end="451:14">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="453:5" pos:end="453:24"><expr pos:start="453:5" pos:end="453:23"><call pos:start="453:5" pos:end="453:23"><name pos:start="453:5" pos:end="453:17">qemu_opts_del</name><argument_list pos:start="453:18" pos:end="453:23">(<argument pos:start="453:19" pos:end="453:22"><expr pos:start="453:19" pos:end="453:22"><name pos:start="453:19" pos:end="453:22">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="455:5" pos:end="455:32"><expr pos:start="455:5" pos:end="455:31"><call pos:start="455:5" pos:end="455:31"><name pos:start="455:5" pos:end="455:18">qemu_opts_free</name><argument_list pos:start="455:19" pos:end="455:31">(<argument pos:start="455:20" pos:end="455:30"><expr pos:start="455:20" pos:end="455:30"><name pos:start="455:20" pos:end="455:30">create_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="457:5" pos:end="457:20"><expr pos:start="457:5" pos:end="457:19"><call pos:start="457:5" pos:end="457:19"><name pos:start="457:5" pos:end="457:13">blk_unref</name><argument_list pos:start="457:14" pos:end="457:19">(<argument pos:start="457:15" pos:end="457:18"><expr pos:start="457:15" pos:end="457:18"><name pos:start="457:15" pos:end="457:18">blk1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="459:5" pos:end="459:20"><expr pos:start="459:5" pos:end="459:19"><call pos:start="459:5" pos:end="459:19"><name pos:start="459:5" pos:end="459:13">blk_unref</name><argument_list pos:start="459:14" pos:end="459:19">(<argument pos:start="459:15" pos:end="459:18"><expr pos:start="459:15" pos:end="459:18"><name pos:start="459:15" pos:end="459:18">blk2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="461:5" pos:end="461:24"><expr pos:start="461:5" pos:end="461:23"><call pos:start="461:5" pos:end="461:23"><name pos:start="461:5" pos:end="461:10">g_free</name><argument_list pos:start="461:11" pos:end="461:23">(<argument pos:start="461:12" pos:end="461:22"><expr pos:start="461:12" pos:end="461:22"><name pos:start="461:12" pos:end="461:22"><name pos:start="461:12" pos:end="461:13">in</name><operator pos:start="461:14" pos:end="461:14">.</operator><name pos:start="461:15" pos:end="461:22">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="463:5" pos:end="463:25"><expr pos:start="463:5" pos:end="463:24"><call pos:start="463:5" pos:end="463:24"><name pos:start="463:5" pos:end="463:10">g_free</name><argument_list pos:start="463:11" pos:end="463:24">(<argument pos:start="463:12" pos:end="463:23"><expr pos:start="463:12" pos:end="463:23"><name pos:start="463:12" pos:end="463:23"><name pos:start="463:12" pos:end="463:14">out</name><operator pos:start="463:15" pos:end="463:15">.</operator><name pos:start="463:16" pos:end="463:23">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="465:5" pos:end="465:19"><expr pos:start="465:5" pos:end="465:18"><call pos:start="465:5" pos:end="465:18"><name pos:start="465:5" pos:end="465:10">g_free</name><argument_list pos:start="465:11" pos:end="465:18">(<argument pos:start="465:12" pos:end="465:17"><expr pos:start="465:12" pos:end="465:17"><name pos:start="465:12" pos:end="465:17"><name pos:start="465:12" pos:end="465:13">in</name><operator pos:start="465:14" pos:end="465:14">.</operator><name pos:start="465:15" pos:end="465:17">buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="467:5" pos:end="467:20"><expr pos:start="467:5" pos:end="467:19"><call pos:start="467:5" pos:end="467:19"><name pos:start="467:5" pos:end="467:10">g_free</name><argument_list pos:start="467:11" pos:end="467:19">(<argument pos:start="467:12" pos:end="467:18"><expr pos:start="467:12" pos:end="467:18"><name pos:start="467:12" pos:end="467:18"><name pos:start="467:12" pos:end="467:14">out</name><operator pos:start="467:15" pos:end="467:15">.</operator><name pos:start="467:16" pos:end="467:18">buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="471:5" pos:end="475:5"><if pos:start="471:5" pos:end="475:5">if <condition pos:start="471:8" pos:end="471:12">(<expr pos:start="471:9" pos:end="471:11"><name pos:start="471:9" pos:end="471:11">ret</name></expr>)</condition> <block pos:start="471:14" pos:end="475:5">{<block_content pos:start="473:9" pos:end="473:17">

        <return pos:start="473:9" pos:end="473:17">return <expr pos:start="473:16" pos:end="473:16"><literal type="number" pos:start="473:16" pos:end="473:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="477:5" pos:end="477:13">return <expr pos:start="477:12" pos:end="477:12"><literal type="number" pos:start="477:12" pos:end="477:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
