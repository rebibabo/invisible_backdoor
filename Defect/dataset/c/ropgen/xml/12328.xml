<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12328.c" pos:tabs="8"><function pos:start="1:1" pos:end="231:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint32_t</name></type> <name pos:start="1:17" pos:end="1:30">gic_dist_readb</name><parameter_list pos:start="1:31" pos:end="1:59">(<parameter pos:start="1:32" pos:end="1:43"><decl pos:start="1:32" pos:end="1:43"><type pos:start="1:32" pos:end="1:43"><name pos:start="1:32" pos:end="1:35">void</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:43">opaque</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:58"><decl pos:start="1:46" pos:end="1:58"><type pos:start="1:46" pos:end="1:58"><name pos:start="1:46" pos:end="1:51">hwaddr</name></type> <name pos:start="1:53" pos:end="1:58">offset</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="231:1">{<block_content pos:start="5:5" pos:end="229:13">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">GICState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:15">s</name> <init pos:start="5:17" pos:end="5:36">= <expr pos:start="5:19" pos:end="5:36"><operator pos:start="5:19" pos:end="5:19">(</operator><name pos:start="5:20" pos:end="5:27">GICState</name> <operator pos:start="5:29" pos:end="5:29">*</operator><operator pos:start="5:30" pos:end="5:30">)</operator><name pos:start="5:31" pos:end="5:36">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:16">res</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:11"><decl pos:start="15:5" pos:end="15:10"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:10">cm</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:13"><decl pos:start="17:5" pos:end="17:12"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:12">mask</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:33"><expr pos:start="21:5" pos:end="21:32"><name pos:start="21:5" pos:end="21:7">cpu</name> <operator pos:start="21:9" pos:end="21:9">=</operator> <call pos:start="21:11" pos:end="21:32"><name pos:start="21:11" pos:end="21:29">gic_get_current_cpu</name><argument_list pos:start="21:30" pos:end="21:32">(<argument pos:start="21:31" pos:end="21:31"><expr pos:start="21:31" pos:end="21:31"><name pos:start="21:31" pos:end="21:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:18"><expr pos:start="23:5" pos:end="23:17"><name pos:start="23:5" pos:end="23:6">cm</name> <operator pos:start="23:8" pos:end="23:8">=</operator> <literal type="number" pos:start="23:10" pos:end="23:10">1</literal> <operator pos:start="23:12" pos:end="23:13">&lt;&lt;</operator> <name pos:start="23:15" pos:end="23:17">cpu</name></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="219:5"><if pos:start="25:5" pos:end="49:5">if <condition pos:start="25:8" pos:end="25:23">(<expr pos:start="25:9" pos:end="25:22"><name pos:start="25:9" pos:end="25:14">offset</name> <operator pos:start="25:16" pos:end="25:16">&lt;</operator> <literal type="number" pos:start="25:18" pos:end="25:22">0x100</literal></expr>)</condition> <block pos:start="25:25" pos:end="49:5">{<block_content pos:start="27:9" pos:end="47:21">

        <if_stmt pos:start="27:9" pos:end="29:30"><if pos:start="27:9" pos:end="29:30">if <condition pos:start="27:12" pos:end="27:24">(<expr pos:start="27:13" pos:end="27:23"><name pos:start="27:13" pos:end="27:18">offset</name> <operator pos:start="27:20" pos:end="27:21">==</operator> <literal type="number" pos:start="27:23" pos:end="27:23">0</literal></expr>)</condition><block type="pseudo" pos:start="29:13" pos:end="29:30"><block_content pos:start="29:13" pos:end="29:30">

            <return pos:start="29:13" pos:end="29:30">return <expr pos:start="29:20" pos:end="29:29"><name pos:start="29:20" pos:end="29:29"><name pos:start="29:20" pos:end="29:20">s</name><operator pos:start="29:21" pos:end="29:22">-&gt;</operator><name pos:start="29:23" pos:end="29:29">enabled</name></name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="31:9" pos:end="33:69"><if pos:start="31:9" pos:end="33:69">if <condition pos:start="31:12" pos:end="31:24">(<expr pos:start="31:13" pos:end="31:23"><name pos:start="31:13" pos:end="31:18">offset</name> <operator pos:start="31:20" pos:end="31:21">==</operator> <literal type="number" pos:start="31:23" pos:end="31:23">4</literal></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:69"><block_content pos:start="33:13" pos:end="33:69">

            <return pos:start="33:13" pos:end="33:69">return <expr pos:start="33:20" pos:end="33:68"><operator pos:start="33:20" pos:end="33:20">(</operator><operator pos:start="33:21" pos:end="33:21">(</operator><name pos:start="33:22" pos:end="33:31"><name pos:start="33:22" pos:end="33:22">s</name><operator pos:start="33:23" pos:end="33:24">-&gt;</operator><name pos:start="33:25" pos:end="33:31">num_irq</name></name> <operator pos:start="33:33" pos:end="33:33">/</operator> <literal type="number" pos:start="33:35" pos:end="33:36">32</literal><operator pos:start="33:37" pos:end="33:37">)</operator> <operator pos:start="33:39" pos:end="33:39">-</operator> <literal type="number" pos:start="33:41" pos:end="33:41">1</literal><operator pos:start="33:42" pos:end="33:42">)</operator> <operator pos:start="33:44" pos:end="33:44">|</operator> <operator pos:start="33:46" pos:end="33:46">(</operator><operator pos:start="33:47" pos:end="33:47">(</operator><call pos:start="33:48" pos:end="33:57"><name pos:start="33:48" pos:end="33:54">NUM_CPU</name><argument_list pos:start="33:55" pos:end="33:57">(<argument pos:start="33:56" pos:end="33:56"><expr pos:start="33:56" pos:end="33:56"><name pos:start="33:56" pos:end="33:56">s</name></expr></argument>)</argument_list></call> <operator pos:start="33:59" pos:end="33:59">-</operator> <literal type="number" pos:start="33:61" pos:end="33:61">1</literal><operator pos:start="33:62" pos:end="33:62">)</operator> <operator pos:start="33:64" pos:end="33:65">&lt;&lt;</operator> <literal type="number" pos:start="33:67" pos:end="33:67">5</literal><operator pos:start="33:68" pos:end="33:68">)</operator></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="35:9" pos:end="37:21"><if pos:start="35:9" pos:end="37:21">if <condition pos:start="35:12" pos:end="35:26">(<expr pos:start="35:13" pos:end="35:25"><name pos:start="35:13" pos:end="35:18">offset</name> <operator pos:start="35:20" pos:end="35:20">&lt;</operator> <literal type="number" pos:start="35:22" pos:end="35:25">0x08</literal></expr>)</condition><block type="pseudo" pos:start="37:13" pos:end="37:21"><block_content pos:start="37:13" pos:end="37:21">

            <return pos:start="37:13" pos:end="37:21">return <expr pos:start="37:20" pos:end="37:20"><literal type="number" pos:start="37:20" pos:end="37:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="39:9" pos:end="45:9"><if pos:start="39:9" pos:end="45:9">if <condition pos:start="39:12" pos:end="39:27">(<expr pos:start="39:13" pos:end="39:26"><name pos:start="39:13" pos:end="39:18">offset</name> <operator pos:start="39:20" pos:end="39:21">&gt;=</operator> <literal type="number" pos:start="39:23" pos:end="39:26">0x80</literal></expr>)</condition> <block pos:start="39:29" pos:end="45:9">{<block_content pos:start="43:13" pos:end="43:21">

            <comment type="block" pos:start="41:13" pos:end="41:45">/* Interrupt Security , RAZ/WI */</comment>

            <return pos:start="43:13" pos:end="43:21">return <expr pos:start="43:20" pos:end="43:20"><literal type="number" pos:start="43:20" pos:end="43:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <goto pos:start="47:9" pos:end="47:21">goto <name pos:start="47:14" pos:end="47:20">bad_reg</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="49:7" pos:end="79:5">else if <condition pos:start="49:15" pos:end="49:30">(<expr pos:start="49:16" pos:end="49:29"><name pos:start="49:16" pos:end="49:21">offset</name> <operator pos:start="49:23" pos:end="49:23">&lt;</operator> <literal type="number" pos:start="49:25" pos:end="49:29">0x200</literal></expr>)</condition> <block pos:start="49:32" pos:end="79:5">{<block_content pos:start="53:9" pos:end="77:9">

        <comment type="block" pos:start="51:9" pos:end="51:42">/* Interrupt Set/Clear Enable.  */</comment>

        <if_stmt pos:start="53:9" pos:end="59:39"><if pos:start="53:9" pos:end="55:39">if <condition pos:start="53:12" pos:end="53:27">(<expr pos:start="53:13" pos:end="53:26"><name pos:start="53:13" pos:end="53:18">offset</name> <operator pos:start="53:20" pos:end="53:20">&lt;</operator> <literal type="number" pos:start="53:22" pos:end="53:26">0x180</literal></expr>)</condition><block type="pseudo" pos:start="55:13" pos:end="55:39"><block_content pos:start="55:13" pos:end="55:39">

            <expr_stmt pos:start="55:13" pos:end="55:39"><expr pos:start="55:13" pos:end="55:38"><name pos:start="55:13" pos:end="55:15">irq</name> <operator pos:start="55:17" pos:end="55:17">=</operator> <operator pos:start="55:19" pos:end="55:19">(</operator><name pos:start="55:20" pos:end="55:25">offset</name> <operator pos:start="55:27" pos:end="55:27">-</operator> <literal type="number" pos:start="55:29" pos:end="55:33">0x100</literal><operator pos:start="55:34" pos:end="55:34">)</operator> <operator pos:start="55:36" pos:end="55:36">*</operator> <literal type="number" pos:start="55:38" pos:end="55:38">8</literal></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="57:9" pos:end="59:39">else<block type="pseudo" pos:start="59:13" pos:end="59:39"><block_content pos:start="59:13" pos:end="59:39">

            <expr_stmt pos:start="59:13" pos:end="59:39"><expr pos:start="59:13" pos:end="59:38"><name pos:start="59:13" pos:end="59:15">irq</name> <operator pos:start="59:17" pos:end="59:17">=</operator> <operator pos:start="59:19" pos:end="59:19">(</operator><name pos:start="59:20" pos:end="59:25">offset</name> <operator pos:start="59:27" pos:end="59:27">-</operator> <literal type="number" pos:start="59:29" pos:end="59:33">0x180</literal><operator pos:start="59:34" pos:end="59:34">)</operator> <operator pos:start="59:36" pos:end="59:36">*</operator> <literal type="number" pos:start="59:38" pos:end="59:38">8</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:28"><expr pos:start="61:9" pos:end="61:27"><name pos:start="61:9" pos:end="61:11">irq</name> <operator pos:start="61:13" pos:end="61:14">+=</operator> <name pos:start="61:16" pos:end="61:27">GIC_BASE_IRQ</name></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="65:25"><if pos:start="63:9" pos:end="65:25">if <condition pos:start="63:12" pos:end="63:30">(<expr pos:start="63:13" pos:end="63:29"><name pos:start="63:13" pos:end="63:15">irq</name> <operator pos:start="63:17" pos:end="63:18">&gt;=</operator> <name pos:start="63:20" pos:end="63:29"><name pos:start="63:20" pos:end="63:20">s</name><operator pos:start="63:21" pos:end="63:22">-&gt;</operator><name pos:start="63:23" pos:end="63:29">num_irq</name></name></expr>)</condition><block type="pseudo" pos:start="65:13" pos:end="65:25"><block_content pos:start="65:13" pos:end="65:25">

            <goto pos:start="65:13" pos:end="65:25">goto <name pos:start="65:18" pos:end="65:24">bad_reg</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:16"><expr pos:start="67:9" pos:end="67:15"><name pos:start="67:9" pos:end="67:11">res</name> <operator pos:start="67:13" pos:end="67:13">=</operator> <literal type="number" pos:start="67:15" pos:end="67:15">0</literal></expr>;</expr_stmt>

        <for pos:start="69:9" pos:end="77:9">for <control pos:start="69:13" pos:end="69:31">(<init pos:start="69:14" pos:end="69:19"><expr pos:start="69:14" pos:end="69:18"><name pos:start="69:14" pos:end="69:14">i</name> <operator pos:start="69:16" pos:end="69:16">=</operator> <literal type="number" pos:start="69:18" pos:end="69:18">0</literal></expr>;</init> <condition pos:start="69:21" pos:end="69:26"><expr pos:start="69:21" pos:end="69:25"><name pos:start="69:21" pos:end="69:21">i</name> <operator pos:start="69:23" pos:end="69:23">&lt;</operator> <literal type="number" pos:start="69:25" pos:end="69:25">8</literal></expr>;</condition> <incr pos:start="69:28" pos:end="69:30"><expr pos:start="69:28" pos:end="69:30"><name pos:start="69:28" pos:end="69:28">i</name><operator pos:start="69:29" pos:end="69:30">++</operator></expr></incr>)</control> <block pos:start="69:33" pos:end="77:9">{<block_content pos:start="71:13" pos:end="75:13">

            <if_stmt pos:start="71:13" pos:end="75:13"><if pos:start="71:13" pos:end="75:13">if <condition pos:start="71:16" pos:end="71:46">(<expr pos:start="71:17" pos:end="71:45"><call pos:start="71:17" pos:end="71:45"><name pos:start="71:17" pos:end="71:32">GIC_TEST_ENABLED</name><argument_list pos:start="71:33" pos:end="71:45">(<argument pos:start="71:34" pos:end="71:40"><expr pos:start="71:34" pos:end="71:40"><name pos:start="71:34" pos:end="71:36">irq</name> <operator pos:start="71:38" pos:end="71:38">+</operator> <name pos:start="71:40" pos:end="71:40">i</name></expr></argument>, <argument pos:start="71:43" pos:end="71:44"><expr pos:start="71:43" pos:end="71:44"><name pos:start="71:43" pos:end="71:44">cm</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="71:48" pos:end="75:13">{<block_content pos:start="73:17" pos:end="73:32">

                <expr_stmt pos:start="73:17" pos:end="73:32"><expr pos:start="73:17" pos:end="73:31"><name pos:start="73:17" pos:end="73:19">res</name> <operator pos:start="73:21" pos:end="73:22">|=</operator> <operator pos:start="73:24" pos:end="73:24">(</operator><literal type="number" pos:start="73:25" pos:end="73:25">1</literal> <operator pos:start="73:27" pos:end="73:28">&lt;&lt;</operator> <name pos:start="73:30" pos:end="73:30">i</name><operator pos:start="73:31" pos:end="73:31">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <if type="elseif" pos:start="79:7" pos:end="111:5">else if <condition pos:start="79:15" pos:end="79:30">(<expr pos:start="79:16" pos:end="79:29"><name pos:start="79:16" pos:end="79:21">offset</name> <operator pos:start="79:23" pos:end="79:23">&lt;</operator> <literal type="number" pos:start="79:25" pos:end="79:29">0x300</literal></expr>)</condition> <block pos:start="79:32" pos:end="111:5">{<block_content pos:start="83:9" pos:end="109:9">

        <comment type="block" pos:start="81:9" pos:end="81:43">/* Interrupt Set/Clear Pending.  */</comment>

        <if_stmt pos:start="83:9" pos:end="89:39"><if pos:start="83:9" pos:end="85:39">if <condition pos:start="83:12" pos:end="83:27">(<expr pos:start="83:13" pos:end="83:26"><name pos:start="83:13" pos:end="83:18">offset</name> <operator pos:start="83:20" pos:end="83:20">&lt;</operator> <literal type="number" pos:start="83:22" pos:end="83:26">0x280</literal></expr>)</condition><block type="pseudo" pos:start="85:13" pos:end="85:39"><block_content pos:start="85:13" pos:end="85:39">

            <expr_stmt pos:start="85:13" pos:end="85:39"><expr pos:start="85:13" pos:end="85:38"><name pos:start="85:13" pos:end="85:15">irq</name> <operator pos:start="85:17" pos:end="85:17">=</operator> <operator pos:start="85:19" pos:end="85:19">(</operator><name pos:start="85:20" pos:end="85:25">offset</name> <operator pos:start="85:27" pos:end="85:27">-</operator> <literal type="number" pos:start="85:29" pos:end="85:33">0x200</literal><operator pos:start="85:34" pos:end="85:34">)</operator> <operator pos:start="85:36" pos:end="85:36">*</operator> <literal type="number" pos:start="85:38" pos:end="85:38">8</literal></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="87:9" pos:end="89:39">else<block type="pseudo" pos:start="89:13" pos:end="89:39"><block_content pos:start="89:13" pos:end="89:39">

            <expr_stmt pos:start="89:13" pos:end="89:39"><expr pos:start="89:13" pos:end="89:38"><name pos:start="89:13" pos:end="89:15">irq</name> <operator pos:start="89:17" pos:end="89:17">=</operator> <operator pos:start="89:19" pos:end="89:19">(</operator><name pos:start="89:20" pos:end="89:25">offset</name> <operator pos:start="89:27" pos:end="89:27">-</operator> <literal type="number" pos:start="89:29" pos:end="89:33">0x280</literal><operator pos:start="89:34" pos:end="89:34">)</operator> <operator pos:start="89:36" pos:end="89:36">*</operator> <literal type="number" pos:start="89:38" pos:end="89:38">8</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:28"><expr pos:start="91:9" pos:end="91:27"><name pos:start="91:9" pos:end="91:11">irq</name> <operator pos:start="91:13" pos:end="91:14">+=</operator> <name pos:start="91:16" pos:end="91:27">GIC_BASE_IRQ</name></expr>;</expr_stmt>

        <if_stmt pos:start="93:9" pos:end="95:25"><if pos:start="93:9" pos:end="95:25">if <condition pos:start="93:12" pos:end="93:30">(<expr pos:start="93:13" pos:end="93:29"><name pos:start="93:13" pos:end="93:15">irq</name> <operator pos:start="93:17" pos:end="93:18">&gt;=</operator> <name pos:start="93:20" pos:end="93:29"><name pos:start="93:20" pos:end="93:20">s</name><operator pos:start="93:21" pos:end="93:22">-&gt;</operator><name pos:start="93:23" pos:end="93:29">num_irq</name></name></expr>)</condition><block type="pseudo" pos:start="95:13" pos:end="95:25"><block_content pos:start="95:13" pos:end="95:25">

            <goto pos:start="95:13" pos:end="95:25">goto <name pos:start="95:18" pos:end="95:24">bad_reg</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:16"><expr pos:start="97:9" pos:end="97:15"><name pos:start="97:9" pos:end="97:11">res</name> <operator pos:start="97:13" pos:end="97:13">=</operator> <literal type="number" pos:start="97:15" pos:end="97:15">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:57"><expr pos:start="99:9" pos:end="99:56"><name pos:start="99:9" pos:end="99:12">mask</name> <operator pos:start="99:14" pos:end="99:14">=</operator> <ternary pos:start="99:16" pos:end="99:56"><condition pos:start="99:16" pos:end="99:37"><expr pos:start="99:16" pos:end="99:35"><operator pos:start="99:16" pos:end="99:16">(</operator><name pos:start="99:17" pos:end="99:19">irq</name> <operator pos:start="99:21" pos:end="99:21">&lt;</operator> <name pos:start="99:23" pos:end="99:34">GIC_INTERNAL</name><operator pos:start="99:35" pos:end="99:35">)</operator></expr> ?</condition><then pos:start="99:40" pos:end="99:41">  <expr pos:start="99:40" pos:end="99:41"><name pos:start="99:40" pos:end="99:41">cm</name></expr> </then><else pos:start="99:43" pos:end="99:56">: <expr pos:start="99:45" pos:end="99:56"><name pos:start="99:45" pos:end="99:56">ALL_CPU_MASK</name></expr></else></ternary></expr>;</expr_stmt>

        <for pos:start="101:9" pos:end="109:9">for <control pos:start="101:13" pos:end="101:31">(<init pos:start="101:14" pos:end="101:19"><expr pos:start="101:14" pos:end="101:18"><name pos:start="101:14" pos:end="101:14">i</name> <operator pos:start="101:16" pos:end="101:16">=</operator> <literal type="number" pos:start="101:18" pos:end="101:18">0</literal></expr>;</init> <condition pos:start="101:21" pos:end="101:26"><expr pos:start="101:21" pos:end="101:25"><name pos:start="101:21" pos:end="101:21">i</name> <operator pos:start="101:23" pos:end="101:23">&lt;</operator> <literal type="number" pos:start="101:25" pos:end="101:25">8</literal></expr>;</condition> <incr pos:start="101:28" pos:end="101:30"><expr pos:start="101:28" pos:end="101:30"><name pos:start="101:28" pos:end="101:28">i</name><operator pos:start="101:29" pos:end="101:30">++</operator></expr></incr>)</control> <block pos:start="101:33" pos:end="109:9">{<block_content pos:start="103:13" pos:end="107:13">

            <if_stmt pos:start="103:13" pos:end="107:13"><if pos:start="103:13" pos:end="107:13">if <condition pos:start="103:16" pos:end="103:48">(<expr pos:start="103:17" pos:end="103:47"><call pos:start="103:17" pos:end="103:47"><name pos:start="103:17" pos:end="103:32">GIC_TEST_PENDING</name><argument_list pos:start="103:33" pos:end="103:47">(<argument pos:start="103:34" pos:end="103:40"><expr pos:start="103:34" pos:end="103:40"><name pos:start="103:34" pos:end="103:36">irq</name> <operator pos:start="103:38" pos:end="103:38">+</operator> <name pos:start="103:40" pos:end="103:40">i</name></expr></argument>, <argument pos:start="103:43" pos:end="103:46"><expr pos:start="103:43" pos:end="103:46"><name pos:start="103:43" pos:end="103:46">mask</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="103:50" pos:end="107:13">{<block_content pos:start="105:17" pos:end="105:32">

                <expr_stmt pos:start="105:17" pos:end="105:32"><expr pos:start="105:17" pos:end="105:31"><name pos:start="105:17" pos:end="105:19">res</name> <operator pos:start="105:21" pos:end="105:22">|=</operator> <operator pos:start="105:24" pos:end="105:24">(</operator><literal type="number" pos:start="105:25" pos:end="105:25">1</literal> <operator pos:start="105:27" pos:end="105:28">&lt;&lt;</operator> <name pos:start="105:30" pos:end="105:30">i</name><operator pos:start="105:31" pos:end="105:31">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <if type="elseif" pos:start="111:7" pos:end="135:5">else if <condition pos:start="111:15" pos:end="111:30">(<expr pos:start="111:16" pos:end="111:29"><name pos:start="111:16" pos:end="111:21">offset</name> <operator pos:start="111:23" pos:end="111:23">&lt;</operator> <literal type="number" pos:start="111:25" pos:end="111:29">0x400</literal></expr>)</condition> <block pos:start="111:32" pos:end="135:5">{<block_content pos:start="115:9" pos:end="133:9">

        <comment type="block" pos:start="113:9" pos:end="113:32">/* Interrupt Active.  */</comment>

        <expr_stmt pos:start="115:9" pos:end="115:50"><expr pos:start="115:9" pos:end="115:49"><name pos:start="115:9" pos:end="115:11">irq</name> <operator pos:start="115:13" pos:end="115:13">=</operator> <operator pos:start="115:15" pos:end="115:15">(</operator><name pos:start="115:16" pos:end="115:21">offset</name> <operator pos:start="115:23" pos:end="115:23">-</operator> <literal type="number" pos:start="115:25" pos:end="115:29">0x300</literal><operator pos:start="115:30" pos:end="115:30">)</operator> <operator pos:start="115:32" pos:end="115:32">*</operator> <literal type="number" pos:start="115:34" pos:end="115:36">8</literal> <operator pos:start="115:36" pos:end="115:36">+</operator> <name pos:start="115:38" pos:end="115:49">GIC_BASE_IRQ</name></expr>;</expr_stmt>

        <if_stmt pos:start="117:9" pos:end="119:25"><if pos:start="117:9" pos:end="119:25">if <condition pos:start="117:12" pos:end="117:30">(<expr pos:start="117:13" pos:end="117:29"><name pos:start="117:13" pos:end="117:15">irq</name> <operator pos:start="117:17" pos:end="117:18">&gt;=</operator> <name pos:start="117:20" pos:end="117:29"><name pos:start="117:20" pos:end="117:20">s</name><operator pos:start="117:21" pos:end="117:22">-&gt;</operator><name pos:start="117:23" pos:end="117:29">num_irq</name></name></expr>)</condition><block type="pseudo" pos:start="119:13" pos:end="119:25"><block_content pos:start="119:13" pos:end="119:25">

            <goto pos:start="119:13" pos:end="119:25">goto <name pos:start="119:18" pos:end="119:24">bad_reg</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:16"><expr pos:start="121:9" pos:end="121:15"><name pos:start="121:9" pos:end="121:11">res</name> <operator pos:start="121:13" pos:end="121:13">=</operator> <literal type="number" pos:start="121:15" pos:end="121:15">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:57"><expr pos:start="123:9" pos:end="123:56"><name pos:start="123:9" pos:end="123:12">mask</name> <operator pos:start="123:14" pos:end="123:14">=</operator> <ternary pos:start="123:16" pos:end="123:56"><condition pos:start="123:16" pos:end="123:37"><expr pos:start="123:16" pos:end="123:35"><operator pos:start="123:16" pos:end="123:16">(</operator><name pos:start="123:17" pos:end="123:19">irq</name> <operator pos:start="123:21" pos:end="123:21">&lt;</operator> <name pos:start="123:23" pos:end="123:34">GIC_INTERNAL</name><operator pos:start="123:35" pos:end="123:35">)</operator></expr> ?</condition><then pos:start="123:40" pos:end="123:41">  <expr pos:start="123:40" pos:end="123:41"><name pos:start="123:40" pos:end="123:41">cm</name></expr> </then><else pos:start="123:43" pos:end="123:56">: <expr pos:start="123:45" pos:end="123:56"><name pos:start="123:45" pos:end="123:56">ALL_CPU_MASK</name></expr></else></ternary></expr>;</expr_stmt>

        <for pos:start="125:9" pos:end="133:9">for <control pos:start="125:13" pos:end="125:31">(<init pos:start="125:14" pos:end="125:19"><expr pos:start="125:14" pos:end="125:18"><name pos:start="125:14" pos:end="125:14">i</name> <operator pos:start="125:16" pos:end="125:16">=</operator> <literal type="number" pos:start="125:18" pos:end="125:18">0</literal></expr>;</init> <condition pos:start="125:21" pos:end="125:26"><expr pos:start="125:21" pos:end="125:25"><name pos:start="125:21" pos:end="125:21">i</name> <operator pos:start="125:23" pos:end="125:23">&lt;</operator> <literal type="number" pos:start="125:25" pos:end="125:25">8</literal></expr>;</condition> <incr pos:start="125:28" pos:end="125:30"><expr pos:start="125:28" pos:end="125:30"><name pos:start="125:28" pos:end="125:28">i</name><operator pos:start="125:29" pos:end="125:30">++</operator></expr></incr>)</control> <block pos:start="125:33" pos:end="133:9">{<block_content pos:start="127:13" pos:end="131:13">

            <if_stmt pos:start="127:13" pos:end="131:13"><if pos:start="127:13" pos:end="131:13">if <condition pos:start="127:16" pos:end="127:47">(<expr pos:start="127:17" pos:end="127:46"><call pos:start="127:17" pos:end="127:46"><name pos:start="127:17" pos:end="127:31">GIC_TEST_ACTIVE</name><argument_list pos:start="127:32" pos:end="127:46">(<argument pos:start="127:33" pos:end="127:39"><expr pos:start="127:33" pos:end="127:39"><name pos:start="127:33" pos:end="127:35">irq</name> <operator pos:start="127:37" pos:end="127:37">+</operator> <name pos:start="127:39" pos:end="127:39">i</name></expr></argument>, <argument pos:start="127:42" pos:end="127:45"><expr pos:start="127:42" pos:end="127:45"><name pos:start="127:42" pos:end="127:45">mask</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="127:49" pos:end="131:13">{<block_content pos:start="129:17" pos:end="129:32">

                <expr_stmt pos:start="129:17" pos:end="129:32"><expr pos:start="129:17" pos:end="129:31"><name pos:start="129:17" pos:end="129:19">res</name> <operator pos:start="129:21" pos:end="129:22">|=</operator> <operator pos:start="129:24" pos:end="129:24">(</operator><literal type="number" pos:start="129:25" pos:end="129:25">1</literal> <operator pos:start="129:27" pos:end="129:28">&lt;&lt;</operator> <name pos:start="129:30" pos:end="129:30">i</name><operator pos:start="129:31" pos:end="129:31">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <if type="elseif" pos:start="135:7" pos:end="147:5">else if <condition pos:start="135:15" pos:end="135:30">(<expr pos:start="135:16" pos:end="135:29"><name pos:start="135:16" pos:end="135:21">offset</name> <operator pos:start="135:23" pos:end="135:23">&lt;</operator> <literal type="number" pos:start="135:25" pos:end="135:29">0x800</literal></expr>)</condition> <block pos:start="135:32" pos:end="147:5">{<block_content pos:start="139:9" pos:end="145:41">

        <comment type="block" pos:start="137:9" pos:end="137:34">/* Interrupt Priority.  */</comment>

        <expr_stmt pos:start="139:9" pos:end="139:46"><expr pos:start="139:9" pos:end="139:45"><name pos:start="139:9" pos:end="139:11">irq</name> <operator pos:start="139:13" pos:end="139:13">=</operator> <operator pos:start="139:15" pos:end="139:15">(</operator><name pos:start="139:16" pos:end="139:21">offset</name> <operator pos:start="139:23" pos:end="139:23">-</operator> <literal type="number" pos:start="139:25" pos:end="139:29">0x400</literal><operator pos:start="139:30" pos:end="139:30">)</operator> <operator pos:start="139:32" pos:end="139:32">+</operator> <name pos:start="139:34" pos:end="139:45">GIC_BASE_IRQ</name></expr>;</expr_stmt>

        <if_stmt pos:start="141:9" pos:end="143:25"><if pos:start="141:9" pos:end="143:25">if <condition pos:start="141:12" pos:end="141:30">(<expr pos:start="141:13" pos:end="141:29"><name pos:start="141:13" pos:end="141:15">irq</name> <operator pos:start="141:17" pos:end="141:18">&gt;=</operator> <name pos:start="141:20" pos:end="141:29"><name pos:start="141:20" pos:end="141:20">s</name><operator pos:start="141:21" pos:end="141:22">-&gt;</operator><name pos:start="141:23" pos:end="141:29">num_irq</name></name></expr>)</condition><block type="pseudo" pos:start="143:13" pos:end="143:25"><block_content pos:start="143:13" pos:end="143:25">

            <goto pos:start="143:13" pos:end="143:25">goto <name pos:start="143:18" pos:end="143:24">bad_reg</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:41"><expr pos:start="145:9" pos:end="145:40"><name pos:start="145:9" pos:end="145:11">res</name> <operator pos:start="145:13" pos:end="145:13">=</operator> <call pos:start="145:15" pos:end="145:40"><name pos:start="145:15" pos:end="145:30">GIC_GET_PRIORITY</name><argument_list pos:start="145:31" pos:end="145:40">(<argument pos:start="145:32" pos:end="145:34"><expr pos:start="145:32" pos:end="145:34"><name pos:start="145:32" pos:end="145:34">irq</name></expr></argument>, <argument pos:start="145:37" pos:end="145:39"><expr pos:start="145:37" pos:end="145:39"><name pos:start="145:37" pos:end="145:39">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="147:7" pos:end="179:5">else if <condition pos:start="147:15" pos:end="147:30">(<expr pos:start="147:16" pos:end="147:29"><name pos:start="147:16" pos:end="147:21">offset</name> <operator pos:start="147:23" pos:end="147:23">&lt;</operator> <literal type="number" pos:start="147:25" pos:end="147:29">0xc00</literal></expr>)</condition> <block pos:start="147:32" pos:end="179:5">{<block_content pos:start="151:9" pos:end="177:9">

        <comment type="block" pos:start="149:9" pos:end="149:36">/* Interrupt CPU Target.  */</comment>

        <if_stmt pos:start="151:9" pos:end="177:9"><if pos:start="151:9" pos:end="157:9">if <condition pos:start="151:12" pos:end="151:59">(<expr pos:start="151:13" pos:end="151:58"><name pos:start="151:13" pos:end="151:22"><name pos:start="151:13" pos:end="151:13">s</name><operator pos:start="151:14" pos:end="151:15">-&gt;</operator><name pos:start="151:16" pos:end="151:22">num_cpu</name></name> <operator pos:start="151:24" pos:end="151:25">==</operator> <literal type="number" pos:start="151:27" pos:end="151:27">1</literal> <operator pos:start="151:29" pos:end="151:30">&amp;&amp;</operator> <name pos:start="151:32" pos:end="151:42"><name pos:start="151:32" pos:end="151:32">s</name><operator pos:start="151:33" pos:end="151:34">-&gt;</operator><name pos:start="151:35" pos:end="151:42">revision</name></name> <operator pos:start="151:44" pos:end="151:45">!=</operator> <name pos:start="151:47" pos:end="151:58">REV_11MPCORE</name></expr>)</condition> <block pos:start="151:61" pos:end="157:9">{<block_content pos:start="155:13" pos:end="155:20">

            <comment type="block" pos:start="153:13" pos:end="153:52">/* For uniprocessor GICs these RAZ/WI */</comment>

            <expr_stmt pos:start="155:13" pos:end="155:20"><expr pos:start="155:13" pos:end="155:19"><name pos:start="155:13" pos:end="155:15">res</name> <operator pos:start="155:17" pos:end="155:17">=</operator> <literal type="number" pos:start="155:19" pos:end="155:19">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="157:11" pos:end="177:9">else <block pos:start="157:16" pos:end="177:9">{<block_content pos:start="159:13" pos:end="175:13">

            <expr_stmt pos:start="159:13" pos:end="159:50"><expr pos:start="159:13" pos:end="159:49"><name pos:start="159:13" pos:end="159:15">irq</name> <operator pos:start="159:17" pos:end="159:17">=</operator> <operator pos:start="159:19" pos:end="159:19">(</operator><name pos:start="159:20" pos:end="159:25">offset</name> <operator pos:start="159:27" pos:end="159:27">-</operator> <literal type="number" pos:start="159:29" pos:end="159:33">0x800</literal><operator pos:start="159:34" pos:end="159:34">)</operator> <operator pos:start="159:36" pos:end="159:36">+</operator> <name pos:start="159:38" pos:end="159:49">GIC_BASE_IRQ</name></expr>;</expr_stmt>

            <if_stmt pos:start="161:13" pos:end="165:13"><if pos:start="161:13" pos:end="165:13">if <condition pos:start="161:16" pos:end="161:34">(<expr pos:start="161:17" pos:end="161:33"><name pos:start="161:17" pos:end="161:19">irq</name> <operator pos:start="161:21" pos:end="161:22">&gt;=</operator> <name pos:start="161:24" pos:end="161:33"><name pos:start="161:24" pos:end="161:24">s</name><operator pos:start="161:25" pos:end="161:26">-&gt;</operator><name pos:start="161:27" pos:end="161:33">num_irq</name></name></expr>)</condition> <block pos:start="161:36" pos:end="165:13">{<block_content pos:start="163:17" pos:end="163:29">

                <goto pos:start="163:17" pos:end="163:29">goto <name pos:start="163:22" pos:end="163:28">bad_reg</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="167:13" pos:end="175:13"><if pos:start="167:13" pos:end="171:13">if <condition pos:start="167:16" pos:end="167:39">(<expr pos:start="167:17" pos:end="167:38"><name pos:start="167:17" pos:end="167:19">irq</name> <operator pos:start="167:21" pos:end="167:22">&gt;=</operator> <literal type="number" pos:start="167:24" pos:end="167:25">29</literal> <operator pos:start="167:27" pos:end="167:28">&amp;&amp;</operator> <name pos:start="167:30" pos:end="167:32">irq</name> <operator pos:start="167:34" pos:end="167:35">&lt;=</operator> <literal type="number" pos:start="167:37" pos:end="167:38">31</literal></expr>)</condition> <block pos:start="167:41" pos:end="171:13">{<block_content pos:start="169:17" pos:end="169:25">

                <expr_stmt pos:start="169:17" pos:end="169:25"><expr pos:start="169:17" pos:end="169:24"><name pos:start="169:17" pos:end="169:19">res</name> <operator pos:start="169:21" pos:end="169:21">=</operator> <name pos:start="169:23" pos:end="169:24">cm</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="171:15" pos:end="175:13">else <block pos:start="171:20" pos:end="175:13">{<block_content pos:start="173:17" pos:end="173:38">

                <expr_stmt pos:start="173:17" pos:end="173:38"><expr pos:start="173:17" pos:end="173:37"><name pos:start="173:17" pos:end="173:19">res</name> <operator pos:start="173:21" pos:end="173:21">=</operator> <call pos:start="173:23" pos:end="173:37"><name pos:start="173:23" pos:end="173:32">GIC_TARGET</name><argument_list pos:start="173:33" pos:end="173:37">(<argument pos:start="173:34" pos:end="173:36"><expr pos:start="173:34" pos:end="173:36"><name pos:start="173:34" pos:end="173:36">irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="179:7" pos:end="203:5">else if <condition pos:start="179:15" pos:end="179:30">(<expr pos:start="179:16" pos:end="179:29"><name pos:start="179:16" pos:end="179:21">offset</name> <operator pos:start="179:23" pos:end="179:23">&lt;</operator> <literal type="number" pos:start="179:25" pos:end="179:29">0xf00</literal></expr>)</condition> <block pos:start="179:32" pos:end="203:5">{<block_content pos:start="183:9" pos:end="201:9">

        <comment type="block" pos:start="181:9" pos:end="181:39">/* Interrupt Configuration.  */</comment>

        <expr_stmt pos:start="183:9" pos:end="183:50"><expr pos:start="183:9" pos:end="183:49"><name pos:start="183:9" pos:end="183:11">irq</name> <operator pos:start="183:13" pos:end="183:13">=</operator> <operator pos:start="183:15" pos:end="183:15">(</operator><name pos:start="183:16" pos:end="183:21">offset</name> <operator pos:start="183:23" pos:end="183:23">-</operator> <literal type="number" pos:start="183:25" pos:end="183:29">0xc00</literal><operator pos:start="183:30" pos:end="183:30">)</operator> <operator pos:start="183:32" pos:end="183:32">*</operator> <literal type="number" pos:start="183:34" pos:end="183:36">2</literal> <operator pos:start="183:36" pos:end="183:36">+</operator> <name pos:start="183:38" pos:end="183:49">GIC_BASE_IRQ</name></expr>;</expr_stmt>

        <if_stmt pos:start="185:9" pos:end="187:25"><if pos:start="185:9" pos:end="187:25">if <condition pos:start="185:12" pos:end="185:30">(<expr pos:start="185:13" pos:end="185:29"><name pos:start="185:13" pos:end="185:15">irq</name> <operator pos:start="185:17" pos:end="185:18">&gt;=</operator> <name pos:start="185:20" pos:end="185:29"><name pos:start="185:20" pos:end="185:20">s</name><operator pos:start="185:21" pos:end="185:22">-&gt;</operator><name pos:start="185:23" pos:end="185:29">num_irq</name></name></expr>)</condition><block type="pseudo" pos:start="187:13" pos:end="187:25"><block_content pos:start="187:13" pos:end="187:25">

            <goto pos:start="187:13" pos:end="187:25">goto <name pos:start="187:18" pos:end="187:24">bad_reg</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:16"><expr pos:start="189:9" pos:end="189:15"><name pos:start="189:9" pos:end="189:11">res</name> <operator pos:start="189:13" pos:end="189:13">=</operator> <literal type="number" pos:start="189:15" pos:end="189:15">0</literal></expr>;</expr_stmt>

        <for pos:start="191:9" pos:end="201:9">for <control pos:start="191:13" pos:end="191:31">(<init pos:start="191:14" pos:end="191:19"><expr pos:start="191:14" pos:end="191:18"><name pos:start="191:14" pos:end="191:14">i</name> <operator pos:start="191:16" pos:end="191:16">=</operator> <literal type="number" pos:start="191:18" pos:end="191:18">0</literal></expr>;</init> <condition pos:start="191:21" pos:end="191:26"><expr pos:start="191:21" pos:end="191:25"><name pos:start="191:21" pos:end="191:21">i</name> <operator pos:start="191:23" pos:end="191:23">&lt;</operator> <literal type="number" pos:start="191:25" pos:end="191:25">4</literal></expr>;</condition> <incr pos:start="191:28" pos:end="191:30"><expr pos:start="191:28" pos:end="191:30"><name pos:start="191:28" pos:end="191:28">i</name><operator pos:start="191:29" pos:end="191:30">++</operator></expr></incr>)</control> <block pos:start="191:33" pos:end="201:9">{<block_content pos:start="193:13" pos:end="199:38">

            <if_stmt pos:start="193:13" pos:end="195:38"><if pos:start="193:13" pos:end="195:38">if <condition pos:start="193:16" pos:end="193:40">(<expr pos:start="193:17" pos:end="193:39"><call pos:start="193:17" pos:end="193:39"><name pos:start="193:17" pos:end="193:30">GIC_TEST_MODEL</name><argument_list pos:start="193:31" pos:end="193:39">(<argument pos:start="193:32" pos:end="193:38"><expr pos:start="193:32" pos:end="193:38"><name pos:start="193:32" pos:end="193:34">irq</name> <operator pos:start="193:36" pos:end="193:36">+</operator> <name pos:start="193:38" pos:end="193:38">i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="195:17" pos:end="195:38"><block_content pos:start="195:17" pos:end="195:38">

                <expr_stmt pos:start="195:17" pos:end="195:38"><expr pos:start="195:17" pos:end="195:37"><name pos:start="195:17" pos:end="195:19">res</name> <operator pos:start="195:21" pos:end="195:22">|=</operator> <operator pos:start="195:24" pos:end="195:24">(</operator><literal type="number" pos:start="195:25" pos:end="195:25">1</literal> <operator pos:start="195:27" pos:end="195:28">&lt;&lt;</operator> <operator pos:start="195:30" pos:end="195:30">(</operator><name pos:start="195:31" pos:end="195:31">i</name> <operator pos:start="195:33" pos:end="195:33">*</operator> <literal type="number" pos:start="195:35" pos:end="195:35">2</literal><operator pos:start="195:36" pos:end="195:36">)</operator><operator pos:start="195:37" pos:end="195:37">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="197:13" pos:end="199:38"><if pos:start="197:13" pos:end="199:38">if <condition pos:start="197:16" pos:end="197:47">(<expr pos:start="197:17" pos:end="197:46"><call pos:start="197:17" pos:end="197:46"><name pos:start="197:17" pos:end="197:37">GIC_TEST_EDGE_TRIGGER</name><argument_list pos:start="197:38" pos:end="197:46">(<argument pos:start="197:39" pos:end="197:45"><expr pos:start="197:39" pos:end="197:45"><name pos:start="197:39" pos:end="197:41">irq</name> <operator pos:start="197:43" pos:end="197:43">+</operator> <name pos:start="197:45" pos:end="197:45">i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="199:17" pos:end="199:38"><block_content pos:start="199:17" pos:end="199:38">

                <expr_stmt pos:start="199:17" pos:end="199:38"><expr pos:start="199:17" pos:end="199:37"><name pos:start="199:17" pos:end="199:19">res</name> <operator pos:start="199:21" pos:end="199:22">|=</operator> <operator pos:start="199:24" pos:end="199:24">(</operator><literal type="number" pos:start="199:25" pos:end="199:25">2</literal> <operator pos:start="199:27" pos:end="199:28">&lt;&lt;</operator> <operator pos:start="199:30" pos:end="199:30">(</operator><name pos:start="199:31" pos:end="199:31">i</name> <operator pos:start="199:33" pos:end="199:33">*</operator> <literal type="number" pos:start="199:35" pos:end="199:35">2</literal><operator pos:start="199:36" pos:end="199:36">)</operator><operator pos:start="199:37" pos:end="199:37">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <if type="elseif" pos:start="203:7" pos:end="207:5">else if <condition pos:start="203:15" pos:end="203:30">(<expr pos:start="203:16" pos:end="203:29"><name pos:start="203:16" pos:end="203:21">offset</name> <operator pos:start="203:23" pos:end="203:23">&lt;</operator> <literal type="number" pos:start="203:25" pos:end="203:29">0xfe0</literal></expr>)</condition> <block pos:start="203:32" pos:end="207:5">{<block_content pos:start="205:9" pos:end="205:21">

        <goto pos:start="205:9" pos:end="205:21">goto <name pos:start="205:14" pos:end="205:20">bad_reg</name>;</goto>

    </block_content>}</block></if> <else pos:start="207:7" pos:end="219:5">else <comment type="block" pos:start="207:12" pos:end="207:32">/* offset &gt;= 0xfe0 */</comment> <block pos:start="207:34" pos:end="219:5">{<block_content pos:start="209:9" pos:end="217:9">

        <if_stmt pos:start="209:9" pos:end="217:9"><if pos:start="209:9" pos:end="213:9">if <condition pos:start="209:12" pos:end="209:23">(<expr pos:start="209:13" pos:end="209:22"><name pos:start="209:13" pos:end="209:18">offset</name> <operator pos:start="209:20" pos:end="209:20">&amp;</operator> <literal type="number" pos:start="209:22" pos:end="209:22">3</literal></expr>)</condition> <block pos:start="209:25" pos:end="213:9">{<block_content pos:start="211:13" pos:end="211:20">

            <expr_stmt pos:start="211:13" pos:end="211:20"><expr pos:start="211:13" pos:end="211:19"><name pos:start="211:13" pos:end="211:15">res</name> <operator pos:start="211:17" pos:end="211:17">=</operator> <literal type="number" pos:start="211:19" pos:end="211:19">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="213:11" pos:end="217:9">else <block pos:start="213:16" pos:end="217:9">{<block_content pos:start="215:13" pos:end="215:48">

            <expr_stmt pos:start="215:13" pos:end="215:48"><expr pos:start="215:13" pos:end="215:47"><name pos:start="215:13" pos:end="215:15">res</name> <operator pos:start="215:17" pos:end="215:17">=</operator> <name pos:start="215:19" pos:end="215:47"><name pos:start="215:19" pos:end="215:24">gic_id</name><index pos:start="215:25" pos:end="215:47">[<expr pos:start="215:26" pos:end="215:46"><operator pos:start="215:26" pos:end="215:26">(</operator><name pos:start="215:27" pos:end="215:32">offset</name> <operator pos:start="215:34" pos:end="215:34">-</operator> <literal type="number" pos:start="215:36" pos:end="215:40">0xfe0</literal><operator pos:start="215:41" pos:end="215:41">)</operator> <operator pos:start="215:43" pos:end="215:44">&gt;&gt;</operator> <literal type="number" pos:start="215:46" pos:end="215:46">2</literal></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="221:5" pos:end="221:15">return <expr pos:start="221:12" pos:end="221:14"><name pos:start="221:12" pos:end="221:14">res</name></expr>;</return>

<label pos:start="223:1" pos:end="223:8"><name pos:start="223:1" pos:end="223:7">bad_reg</name>:</label>

    <expr_stmt pos:start="225:5" pos:end="227:66"><expr pos:start="225:5" pos:end="227:65"><call pos:start="225:5" pos:end="227:65"><name pos:start="225:5" pos:end="225:17">qemu_log_mask</name><argument_list pos:start="225:18" pos:end="227:65">(<argument pos:start="225:19" pos:end="225:33"><expr pos:start="225:19" pos:end="225:33"><name pos:start="225:19" pos:end="225:33">LOG_GUEST_ERROR</name></expr></argument>,

                  <argument pos:start="227:19" pos:end="227:51"><expr pos:start="227:19" pos:end="227:51"><literal type="string" pos:start="227:19" pos:end="227:51">"gic_dist_readb: Bad offset %x\n"</literal></expr></argument>, <argument pos:start="227:54" pos:end="227:64"><expr pos:start="227:54" pos:end="227:64"><operator pos:start="227:54" pos:end="227:54">(</operator><name pos:start="227:55" pos:end="227:57">int</name><operator pos:start="227:58" pos:end="227:58">)</operator><name pos:start="227:59" pos:end="227:64">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="229:5" pos:end="229:13">return <expr pos:start="229:12" pos:end="229:12"><literal type="number" pos:start="229:12" pos:end="229:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
