<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20265.c" pos:tabs="8"><function pos:start="1:1" pos:end="209:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">vpc_create</name><parameter_list pos:start="1:22" pos:end="1:73">(<parameter pos:start="1:23" pos:end="1:42"><decl pos:start="1:23" pos:end="1:42"><type pos:start="1:23" pos:end="1:42"><specifier pos:start="1:23" pos:end="1:27">const</specifier> <name pos:start="1:29" pos:end="1:32">char</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:42">filename</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:72"><decl pos:start="1:45" pos:end="1:72"><type pos:start="1:45" pos:end="1:72"><name pos:start="1:45" pos:end="1:63">QEMUOptionParameter</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:72">options</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="209:1">{<block_content pos:start="5:5" pos:end="207:13">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">uint8_t</name></type> <name pos:start="5:13" pos:end="5:21"><name pos:start="5:13" pos:end="5:15">buf</name><index pos:start="5:16" pos:end="5:21">[<expr pos:start="5:17" pos:end="5:20"><literal type="number" pos:start="5:17" pos:end="5:20">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:57"><decl pos:start="7:5" pos:end="7:56"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:21">vhd_footer</name></name><modifier pos:start="7:22" pos:end="7:22">*</modifier></type> <name pos:start="7:24" pos:end="7:29">footer</name> <init pos:start="7:31" pos:end="7:56">= <expr pos:start="7:33" pos:end="7:56"><operator pos:start="7:33" pos:end="7:33">(</operator>struct <name pos:start="7:41" pos:end="7:50">vhd_footer</name><operator pos:start="7:51" pos:end="7:51">*</operator><operator pos:start="7:52" pos:end="7:52">)</operator> <name pos:start="7:54" pos:end="7:56">buf</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="11:41"><decl pos:start="9:5" pos:end="11:40"><type pos:start="9:5" pos:end="9:30"><name pos:start="9:5" pos:end="9:29"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:29">vhd_dyndisk_header</name></name><modifier pos:start="9:30" pos:end="9:30">*</modifier></type> <name pos:start="9:32" pos:end="9:45">dyndisk_header</name> <init pos:start="9:47" pos:end="11:40">=

        <expr pos:start="11:9" pos:end="11:40"><operator pos:start="11:9" pos:end="11:9">(</operator>struct <name pos:start="11:17" pos:end="11:34">vhd_dyndisk_header</name><operator pos:start="11:35" pos:end="11:35">*</operator><operator pos:start="11:36" pos:end="11:36">)</operator> <name pos:start="11:38" pos:end="11:40">buf</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:10"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:10">fd</name></decl>, <decl pos:start="13:13" pos:end="13:13"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:13" pos:end="13:13">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint16_t</name></type> <name pos:start="15:14" pos:end="15:17">cyls</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:18"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">uint8_t</name></type> <name pos:start="17:13" pos:end="17:17">heads</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:25"><decl pos:start="19:5" pos:end="19:24"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">uint8_t</name></type> <name pos:start="19:13" pos:end="19:24">secs_per_cyl</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:39"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:10">size_t</name></type> <name pos:start="21:12" pos:end="21:21">block_size</name></decl>, <decl pos:start="21:24" pos:end="21:38"><type ref="prev" pos:start="21:5" pos:end="21:10"/><name pos:start="21:24" pos:end="21:38">num_bat_entries</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:30"><decl pos:start="23:5" pos:end="23:29"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:11">int64_t</name></type> <name pos:start="23:13" pos:end="23:25">total_sectors</name> <init pos:start="23:27" pos:end="23:29">= <expr pos:start="23:29" pos:end="23:29"><literal type="number" pos:start="23:29" pos:end="23:29">0</literal></expr></init></decl>;</decl_stmt>



    <comment type="line" pos:start="27:5" pos:end="27:23">// Read out options</comment>

    <while pos:start="29:5" pos:end="39:5">while <condition pos:start="29:11" pos:end="29:36">(<expr pos:start="29:12" pos:end="29:35"><name pos:start="29:12" pos:end="29:18">options</name> <operator pos:start="29:20" pos:end="29:21">&amp;&amp;</operator> <name pos:start="29:23" pos:end="29:35"><name pos:start="29:23" pos:end="29:29">options</name><operator pos:start="29:30" pos:end="29:31">-&gt;</operator><name pos:start="29:32" pos:end="29:35">name</name></name></expr>)</condition> <block pos:start="29:38" pos:end="39:5">{<block_content pos:start="31:9" pos:end="37:18">

        <if_stmt pos:start="31:9" pos:end="35:9"><if pos:start="31:9" pos:end="35:9">if <condition pos:start="31:12" pos:end="31:43">(<expr pos:start="31:13" pos:end="31:42"><operator pos:start="31:13" pos:end="31:13">!</operator><call pos:start="31:14" pos:end="31:42"><name pos:start="31:14" pos:end="31:19">strcmp</name><argument_list pos:start="31:20" pos:end="31:42">(<argument pos:start="31:21" pos:end="31:33"><expr pos:start="31:21" pos:end="31:33"><name pos:start="31:21" pos:end="31:33"><name pos:start="31:21" pos:end="31:27">options</name><operator pos:start="31:28" pos:end="31:29">-&gt;</operator><name pos:start="31:30" pos:end="31:33">name</name></name></expr></argument>, <argument pos:start="31:36" pos:end="31:41"><expr pos:start="31:36" pos:end="31:41"><literal type="string" pos:start="31:36" pos:end="31:41">"size"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:45" pos:end="35:9">{<block_content pos:start="33:13" pos:end="33:51">

            <expr_stmt pos:start="33:13" pos:end="33:51"><expr pos:start="33:13" pos:end="33:50"><name pos:start="33:13" pos:end="33:25">total_sectors</name> <operator pos:start="33:27" pos:end="33:27">=</operator> <name pos:start="33:29" pos:end="33:44"><name pos:start="33:29" pos:end="33:35">options</name><operator pos:start="33:36" pos:end="33:37">-&gt;</operator><name pos:start="33:38" pos:end="33:42">value</name><operator pos:start="33:43" pos:end="33:43">.</operator><name pos:start="33:44" pos:end="33:44">n</name></name> <operator pos:start="33:46" pos:end="33:46">/</operator> <literal type="number" pos:start="33:48" pos:end="33:50">512</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:18"><expr pos:start="37:9" pos:end="37:17"><name pos:start="37:9" pos:end="37:15">options</name><operator pos:start="37:16" pos:end="37:17">++</operator></expr>;</expr_stmt>

    </block_content>}</block></while>



    <comment type="line" pos:start="43:5" pos:end="43:22">// Create the file</comment>

    <expr_stmt pos:start="45:5" pos:end="45:71"><expr pos:start="45:5" pos:end="45:70"><name pos:start="45:5" pos:end="45:6">fd</name> <operator pos:start="45:8" pos:end="45:8">=</operator> <call pos:start="45:10" pos:end="45:70"><name pos:start="45:10" pos:end="45:13">open</name><argument_list pos:start="45:14" pos:end="45:70">(<argument pos:start="45:15" pos:end="45:22"><expr pos:start="45:15" pos:end="45:22"><name pos:start="45:15" pos:end="45:22">filename</name></expr></argument>, <argument pos:start="45:25" pos:end="45:63"><expr pos:start="45:25" pos:end="45:63"><name pos:start="45:25" pos:end="45:32">O_WRONLY</name> <operator pos:start="45:34" pos:end="45:34">|</operator> <name pos:start="45:36" pos:end="45:42">O_CREAT</name> <operator pos:start="45:44" pos:end="45:44">|</operator> <name pos:start="45:46" pos:end="45:52">O_TRUNC</name> <operator pos:start="45:54" pos:end="45:54">|</operator> <name pos:start="45:56" pos:end="45:63">O_BINARY</name></expr></argument>, <argument pos:start="45:66" pos:end="45:69"><expr pos:start="45:66" pos:end="45:69"><literal type="number" pos:start="45:66" pos:end="45:69">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="49:20"><if pos:start="47:5" pos:end="49:20">if <condition pos:start="47:8" pos:end="47:15">(<expr pos:start="47:9" pos:end="47:14"><name pos:start="47:9" pos:end="47:10">fd</name> <operator pos:start="47:12" pos:end="47:12">&lt;</operator> <literal type="number" pos:start="47:14" pos:end="47:14">0</literal></expr>)</condition><block type="pseudo" pos:start="49:9" pos:end="49:20"><block_content pos:start="49:9" pos:end="49:20">

        <return pos:start="49:9" pos:end="49:20">return <expr pos:start="49:16" pos:end="49:19"><operator pos:start="49:16" pos:end="49:16">-</operator><name pos:start="49:17" pos:end="49:19">EIO</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="line" pos:start="53:5" pos:end="53:49">// Calculate matching total_size and geometry</comment>

    <if_stmt pos:start="55:5" pos:end="57:22"><if pos:start="55:5" pos:end="57:22">if <condition pos:start="55:8" pos:end="55:72">(<expr pos:start="55:9" pos:end="55:71"><call pos:start="55:9" pos:end="55:71"><name pos:start="55:9" pos:end="55:26">calculate_geometry</name><argument_list pos:start="55:27" pos:end="55:71">(<argument pos:start="55:28" pos:end="55:40"><expr pos:start="55:28" pos:end="55:40"><name pos:start="55:28" pos:end="55:40">total_sectors</name></expr></argument>, <argument pos:start="55:43" pos:end="55:47"><expr pos:start="55:43" pos:end="55:47"><operator pos:start="55:43" pos:end="55:43">&amp;</operator><name pos:start="55:44" pos:end="55:47">cyls</name></expr></argument>, <argument pos:start="55:50" pos:end="55:55"><expr pos:start="55:50" pos:end="55:55"><operator pos:start="55:50" pos:end="55:50">&amp;</operator><name pos:start="55:51" pos:end="55:55">heads</name></expr></argument>, <argument pos:start="55:58" pos:end="55:70"><expr pos:start="55:58" pos:end="55:70"><operator pos:start="55:58" pos:end="55:58">&amp;</operator><name pos:start="55:59" pos:end="55:70">secs_per_cyl</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="57:9" pos:end="57:22"><block_content pos:start="57:9" pos:end="57:22">

        <return pos:start="57:9" pos:end="57:22">return <expr pos:start="57:16" pos:end="57:21"><operator pos:start="57:16" pos:end="57:16">-</operator><name pos:start="57:17" pos:end="57:21">EFBIG</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:58"><expr pos:start="59:5" pos:end="59:57"><name pos:start="59:5" pos:end="59:17">total_sectors</name> <operator pos:start="59:19" pos:end="59:19">=</operator> <operator pos:start="59:21" pos:end="59:21">(</operator><name pos:start="59:22" pos:end="59:28">int64_t</name><operator pos:start="59:29" pos:end="59:29">)</operator> <name pos:start="59:31" pos:end="59:34">cyls</name> <operator pos:start="59:36" pos:end="59:36">*</operator> <name pos:start="59:38" pos:end="59:42">heads</name> <operator pos:start="59:44" pos:end="59:44">*</operator> <name pos:start="59:46" pos:end="59:57">secs_per_cyl</name></expr>;</expr_stmt>



    <comment type="line" pos:start="63:5" pos:end="63:35">// Prepare the Hard Disk Footer</comment>

    <expr_stmt pos:start="65:5" pos:end="65:25"><expr pos:start="65:5" pos:end="65:24"><call pos:start="65:5" pos:end="65:24"><name pos:start="65:5" pos:end="65:10">memset</name><argument_list pos:start="65:11" pos:end="65:24">(<argument pos:start="65:12" pos:end="65:14"><expr pos:start="65:12" pos:end="65:14"><name pos:start="65:12" pos:end="65:14">buf</name></expr></argument>, <argument pos:start="65:17" pos:end="65:17"><expr pos:start="65:17" pos:end="65:17"><literal type="number" pos:start="65:17" pos:end="65:17">0</literal></expr></argument>, <argument pos:start="65:20" pos:end="65:23"><expr pos:start="65:20" pos:end="65:23"><literal type="number" pos:start="65:20" pos:end="65:23">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:43"><expr pos:start="69:5" pos:end="69:42"><call pos:start="69:5" pos:end="69:42"><name pos:start="69:5" pos:end="69:10">memcpy</name><argument_list pos:start="69:11" pos:end="69:42">(<argument pos:start="69:12" pos:end="69:26"><expr pos:start="69:12" pos:end="69:26"><name pos:start="69:12" pos:end="69:26"><name pos:start="69:12" pos:end="69:17">footer</name><operator pos:start="69:18" pos:end="69:19">-&gt;</operator><name pos:start="69:20" pos:end="69:26">creator</name></name></expr></argument>, <argument pos:start="69:29" pos:end="69:38"><expr pos:start="69:29" pos:end="69:38"><literal type="string" pos:start="69:29" pos:end="69:38">"conectix"</literal></expr></argument>, <argument pos:start="69:41" pos:end="69:41"><expr pos:start="69:41" pos:end="69:41"><literal type="number" pos:start="69:41" pos:end="69:41">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:start="71:5" pos:end="71:53">// TODO Check if "qemu" creator_app is ok for VPC</comment>

    <expr_stmt pos:start="73:5" pos:end="73:43"><expr pos:start="73:5" pos:end="73:42"><call pos:start="73:5" pos:end="73:42"><name pos:start="73:5" pos:end="73:10">memcpy</name><argument_list pos:start="73:11" pos:end="73:42">(<argument pos:start="73:12" pos:end="73:30"><expr pos:start="73:12" pos:end="73:30"><name pos:start="73:12" pos:end="73:30"><name pos:start="73:12" pos:end="73:17">footer</name><operator pos:start="73:18" pos:end="73:19">-&gt;</operator><name pos:start="73:20" pos:end="73:30">creator_app</name></name></expr></argument>, <argument pos:start="73:33" pos:end="73:38"><expr pos:start="73:33" pos:end="73:38"><literal type="string" pos:start="73:33" pos:end="73:38">"qemu"</literal></expr></argument>, <argument pos:start="73:41" pos:end="73:41"><expr pos:start="73:41" pos:end="73:41"><literal type="number" pos:start="73:41" pos:end="73:41">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:42"><expr pos:start="75:5" pos:end="75:41"><call pos:start="75:5" pos:end="75:41"><name pos:start="75:5" pos:end="75:10">memcpy</name><argument_list pos:start="75:11" pos:end="75:41">(<argument pos:start="75:12" pos:end="75:29"><expr pos:start="75:12" pos:end="75:29"><name pos:start="75:12" pos:end="75:29"><name pos:start="75:12" pos:end="75:17">footer</name><operator pos:start="75:18" pos:end="75:19">-&gt;</operator><name pos:start="75:20" pos:end="75:29">creator_os</name></name></expr></argument>, <argument pos:start="75:32" pos:end="75:37"><expr pos:start="75:32" pos:end="75:37"><literal type="string" pos:start="75:32" pos:end="75:37">"Wi2k"</literal></expr></argument>, <argument pos:start="75:40" pos:end="75:40"><expr pos:start="75:40" pos:end="75:40"><literal type="number" pos:start="75:40" pos:end="75:40">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:41"><expr pos:start="79:5" pos:end="79:40"><name pos:start="79:5" pos:end="79:20"><name pos:start="79:5" pos:end="79:10">footer</name><operator pos:start="79:11" pos:end="79:12">-&gt;</operator><name pos:start="79:13" pos:end="79:20">features</name></name> <operator pos:start="79:22" pos:end="79:22">=</operator> <call pos:start="79:24" pos:end="79:40"><name pos:start="79:24" pos:end="79:34">be32_to_cpu</name><argument_list pos:start="79:35" pos:end="79:40">(<argument pos:start="79:36" pos:end="79:39"><expr pos:start="79:36" pos:end="79:39"><literal type="number" pos:start="79:36" pos:end="79:39">0x02</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:46"><expr pos:start="81:5" pos:end="81:45"><name pos:start="81:5" pos:end="81:19"><name pos:start="81:5" pos:end="81:10">footer</name><operator pos:start="81:11" pos:end="81:12">-&gt;</operator><name pos:start="81:13" pos:end="81:19">version</name></name> <operator pos:start="81:21" pos:end="81:21">=</operator> <call pos:start="81:23" pos:end="81:45"><name pos:start="81:23" pos:end="81:33">be32_to_cpu</name><argument_list pos:start="81:34" pos:end="81:45">(<argument pos:start="81:35" pos:end="81:44"><expr pos:start="81:35" pos:end="81:44"><literal type="number" pos:start="81:35" pos:end="81:44">0x00010000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:51"><expr pos:start="83:5" pos:end="83:50"><name pos:start="83:5" pos:end="83:23"><name pos:start="83:5" pos:end="83:10">footer</name><operator pos:start="83:11" pos:end="83:12">-&gt;</operator><name pos:start="83:13" pos:end="83:23">data_offset</name></name> <operator pos:start="83:25" pos:end="83:25">=</operator> <call pos:start="83:27" pos:end="83:50"><name pos:start="83:27" pos:end="83:37">be64_to_cpu</name><argument_list pos:start="83:38" pos:end="83:50">(<argument pos:start="83:39" pos:end="83:49"><expr pos:start="83:39" pos:end="83:49"><name pos:start="83:39" pos:end="83:49">HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:69"><expr pos:start="85:5" pos:end="85:68"><name pos:start="85:5" pos:end="85:21"><name pos:start="85:5" pos:end="85:10">footer</name><operator pos:start="85:11" pos:end="85:12">-&gt;</operator><name pos:start="85:13" pos:end="85:21">timestamp</name></name> <operator pos:start="85:23" pos:end="85:23">=</operator> <call pos:start="85:25" pos:end="85:68"><name pos:start="85:25" pos:end="85:35">be32_to_cpu</name><argument_list pos:start="85:36" pos:end="85:68">(<argument pos:start="85:37" pos:end="85:67"><expr pos:start="85:37" pos:end="85:67"><call pos:start="85:37" pos:end="85:46"><name pos:start="85:37" pos:end="85:40">time</name><argument_list pos:start="85:41" pos:end="85:46">(<argument pos:start="85:42" pos:end="85:45"><expr pos:start="85:42" pos:end="85:45"><name pos:start="85:42" pos:end="85:45">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="85:48" pos:end="85:48">-</operator> <name pos:start="85:50" pos:end="85:67">VHD_TIMESTAMP_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="89:5" pos:end="89:33">// Version of Virtual PC 2007</comment>

    <expr_stmt pos:start="91:5" pos:end="91:40"><expr pos:start="91:5" pos:end="91:39"><name pos:start="91:5" pos:end="91:17"><name pos:start="91:5" pos:end="91:10">footer</name><operator pos:start="91:11" pos:end="91:12">-&gt;</operator><name pos:start="91:13" pos:end="91:17">major</name></name> <operator pos:start="91:19" pos:end="91:19">=</operator> <call pos:start="91:21" pos:end="91:39"><name pos:start="91:21" pos:end="91:31">be16_to_cpu</name><argument_list pos:start="91:32" pos:end="91:39">(<argument pos:start="91:33" pos:end="91:38"><expr pos:start="91:33" pos:end="91:38"><literal type="number" pos:start="91:33" pos:end="91:38">0x0005</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:39"><expr pos:start="93:5" pos:end="93:38"><name pos:start="93:5" pos:end="93:17"><name pos:start="93:5" pos:end="93:10">footer</name><operator pos:start="93:11" pos:end="93:12">-&gt;</operator><name pos:start="93:13" pos:end="93:17">minor</name></name> <operator pos:start="93:19" pos:end="93:19">=</operator><call pos:start="93:20" pos:end="93:38"><name pos:start="93:20" pos:end="93:30">be16_to_cpu</name><argument_list pos:start="93:31" pos:end="93:38">(<argument pos:start="93:32" pos:end="93:37"><expr pos:start="93:32" pos:end="93:37"><literal type="number" pos:start="93:32" pos:end="93:37">0x0003</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:57"><expr pos:start="97:5" pos:end="97:56"><name pos:start="97:5" pos:end="97:21"><name pos:start="97:5" pos:end="97:10">footer</name><operator pos:start="97:11" pos:end="97:12">-&gt;</operator><name pos:start="97:13" pos:end="97:21">orig_size</name></name> <operator pos:start="97:23" pos:end="97:23">=</operator> <call pos:start="97:25" pos:end="97:56"><name pos:start="97:25" pos:end="97:35">be64_to_cpu</name><argument_list pos:start="97:36" pos:end="97:56">(<argument pos:start="97:37" pos:end="97:55"><expr pos:start="97:37" pos:end="97:55"><name pos:start="97:37" pos:end="97:49">total_sectors</name> <operator pos:start="97:51" pos:end="97:51">*</operator> <literal type="number" pos:start="97:53" pos:end="97:55">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:52"><expr pos:start="99:5" pos:end="99:51"><name pos:start="99:5" pos:end="99:16"><name pos:start="99:5" pos:end="99:10">footer</name><operator pos:start="99:11" pos:end="99:12">-&gt;</operator><name pos:start="99:13" pos:end="99:16">size</name></name> <operator pos:start="99:18" pos:end="99:18">=</operator> <call pos:start="99:20" pos:end="99:51"><name pos:start="99:20" pos:end="99:30">be64_to_cpu</name><argument_list pos:start="99:31" pos:end="99:51">(<argument pos:start="99:32" pos:end="99:50"><expr pos:start="99:32" pos:end="99:50"><name pos:start="99:32" pos:end="99:44">total_sectors</name> <operator pos:start="99:46" pos:end="99:46">*</operator> <literal type="number" pos:start="99:48" pos:end="99:50">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:37"><expr pos:start="103:5" pos:end="103:36"><name pos:start="103:5" pos:end="103:16"><name pos:start="103:5" pos:end="103:10">footer</name><operator pos:start="103:11" pos:end="103:12">-&gt;</operator><name pos:start="103:13" pos:end="103:16">cyls</name></name> <operator pos:start="103:18" pos:end="103:18">=</operator> <call pos:start="103:20" pos:end="103:36"><name pos:start="103:20" pos:end="103:30">be16_to_cpu</name><argument_list pos:start="103:31" pos:end="103:36">(<argument pos:start="103:32" pos:end="103:35"><expr pos:start="103:32" pos:end="103:35"><name pos:start="103:32" pos:end="103:35">cyls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:26"><expr pos:start="105:5" pos:end="105:25"><name pos:start="105:5" pos:end="105:17"><name pos:start="105:5" pos:end="105:10">footer</name><operator pos:start="105:11" pos:end="105:12">-&gt;</operator><name pos:start="105:13" pos:end="105:17">heads</name></name> <operator pos:start="105:19" pos:end="105:19">=</operator> <name pos:start="105:21" pos:end="105:25">heads</name></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:40"><expr pos:start="107:5" pos:end="107:39"><name pos:start="107:5" pos:end="107:24"><name pos:start="107:5" pos:end="107:10">footer</name><operator pos:start="107:11" pos:end="107:12">-&gt;</operator><name pos:start="107:13" pos:end="107:24">secs_per_cyl</name></name> <operator pos:start="107:26" pos:end="107:26">=</operator> <name pos:start="107:28" pos:end="107:39">secs_per_cyl</name></expr>;</expr_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:44"><expr pos:start="111:5" pos:end="111:43"><name pos:start="111:5" pos:end="111:16"><name pos:start="111:5" pos:end="111:10">footer</name><operator pos:start="111:11" pos:end="111:12">-&gt;</operator><name pos:start="111:13" pos:end="111:16">type</name></name> <operator pos:start="111:18" pos:end="111:18">=</operator> <call pos:start="111:20" pos:end="111:43"><name pos:start="111:20" pos:end="111:30">be32_to_cpu</name><argument_list pos:start="111:31" pos:end="111:43">(<argument pos:start="111:32" pos:end="111:42"><expr pos:start="111:32" pos:end="111:42"><name pos:start="111:32" pos:end="111:42">VHD_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="115:5" pos:end="115:27">// TODO uuid is missing</comment>



    <expr_stmt pos:start="119:5" pos:end="119:67"><expr pos:start="119:5" pos:end="119:66"><name pos:start="119:5" pos:end="119:20"><name pos:start="119:5" pos:end="119:10">footer</name><operator pos:start="119:11" pos:end="119:12">-&gt;</operator><name pos:start="119:13" pos:end="119:20">checksum</name></name> <operator pos:start="119:22" pos:end="119:22">=</operator> <call pos:start="119:24" pos:end="119:66"><name pos:start="119:24" pos:end="119:34">be32_to_cpu</name><argument_list pos:start="119:35" pos:end="119:66">(<argument pos:start="119:36" pos:end="119:65"><expr pos:start="119:36" pos:end="119:65"><call pos:start="119:36" pos:end="119:65"><name pos:start="119:36" pos:end="119:47">vpc_checksum</name><argument_list pos:start="119:48" pos:end="119:65">(<argument pos:start="119:49" pos:end="119:51"><expr pos:start="119:49" pos:end="119:51"><name pos:start="119:49" pos:end="119:51">buf</name></expr></argument>, <argument pos:start="119:54" pos:end="119:64"><expr pos:start="119:54" pos:end="119:64"><name pos:start="119:54" pos:end="119:64">HEADER_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="123:5" pos:end="123:64">// Write the footer (twice: at the beginning and at the end)</comment>

    <expr_stmt pos:start="125:5" pos:end="125:26"><expr pos:start="125:5" pos:end="125:25"><name pos:start="125:5" pos:end="125:14">block_size</name> <operator pos:start="125:16" pos:end="125:16">=</operator> <literal type="number" pos:start="125:18" pos:end="125:25">0x200000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:78"><expr pos:start="127:5" pos:end="127:77"><name pos:start="127:5" pos:end="127:19">num_bat_entries</name> <operator pos:start="127:21" pos:end="127:21">=</operator> <operator pos:start="127:23" pos:end="127:23">(</operator><name pos:start="127:24" pos:end="127:36">total_sectors</name> <operator pos:start="127:38" pos:end="127:38">+</operator> <name pos:start="127:40" pos:end="127:49">block_size</name> <operator pos:start="127:51" pos:end="127:51">/</operator> <literal type="number" pos:start="127:53" pos:end="127:55">512</literal><operator pos:start="127:56" pos:end="127:56">)</operator> <operator pos:start="127:58" pos:end="127:58">/</operator> <operator pos:start="127:60" pos:end="127:60">(</operator><name pos:start="127:61" pos:end="127:70">block_size</name> <operator pos:start="127:72" pos:end="127:72">/</operator> <literal type="number" pos:start="127:74" pos:end="127:76">512</literal><operator pos:start="127:77" pos:end="127:77">)</operator></expr>;</expr_stmt>



    <if_stmt pos:start="131:5" pos:end="133:20"><if pos:start="131:5" pos:end="133:20">if <condition pos:start="131:8" pos:end="131:51">(<expr pos:start="131:9" pos:end="131:50"><call pos:start="131:9" pos:end="131:35"><name pos:start="131:9" pos:end="131:13">write</name><argument_list pos:start="131:14" pos:end="131:35">(<argument pos:start="131:15" pos:end="131:16"><expr pos:start="131:15" pos:end="131:16"><name pos:start="131:15" pos:end="131:16">fd</name></expr></argument>, <argument pos:start="131:19" pos:end="131:21"><expr pos:start="131:19" pos:end="131:21"><name pos:start="131:19" pos:end="131:21">buf</name></expr></argument>, <argument pos:start="131:24" pos:end="131:34"><expr pos:start="131:24" pos:end="131:34"><name pos:start="131:24" pos:end="131:34">HEADER_SIZE</name></expr></argument>)</argument_list></call> <operator pos:start="131:37" pos:end="131:38">!=</operator> <name pos:start="131:40" pos:end="131:50">HEADER_SIZE</name></expr>)</condition><block type="pseudo" pos:start="133:9" pos:end="133:20"><block_content pos:start="133:9" pos:end="133:20">

        <return pos:start="133:9" pos:end="133:20">return <expr pos:start="133:16" pos:end="133:19"><operator pos:start="133:16" pos:end="133:16">-</operator><name pos:start="133:17" pos:end="133:19">EIO</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="137:5" pos:end="139:20"><if pos:start="137:5" pos:end="139:20">if <condition pos:start="137:8" pos:end="137:77">(<expr pos:start="137:9" pos:end="137:76"><call pos:start="137:9" pos:end="137:72"><name pos:start="137:9" pos:end="137:13">lseek</name><argument_list pos:start="137:14" pos:end="137:72">(<argument pos:start="137:15" pos:end="137:16"><expr pos:start="137:15" pos:end="137:16"><name pos:start="137:15" pos:end="137:16">fd</name></expr></argument>, <argument pos:start="137:19" pos:end="137:61"><expr pos:start="137:19" pos:end="137:61"><literal type="number" pos:start="137:19" pos:end="137:24">1536</literal> <operator pos:start="137:24" pos:end="137:24">+</operator> <operator pos:start="137:26" pos:end="137:26">(</operator><operator pos:start="137:27" pos:end="137:27">(</operator><name pos:start="137:28" pos:end="137:42">num_bat_entries</name> <operator pos:start="137:44" pos:end="137:44">*</operator> <literal type="number" pos:start="137:46" pos:end="137:48">4</literal> <operator pos:start="137:48" pos:end="137:48">+</operator> <literal type="number" pos:start="137:50" pos:end="137:52">511</literal><operator pos:start="137:53" pos:end="137:53">)</operator> <operator pos:start="137:55" pos:end="137:55">&amp;</operator> <operator pos:start="137:57" pos:end="137:57">~</operator><literal type="number" pos:start="137:58" pos:end="137:60">511</literal><operator pos:start="137:61" pos:end="137:61">)</operator></expr></argument>, <argument pos:start="137:64" pos:end="137:71"><expr pos:start="137:64" pos:end="137:71"><name pos:start="137:64" pos:end="137:71">SEEK_SET</name></expr></argument>)</argument_list></call> <operator pos:start="137:74" pos:end="137:74">&lt;</operator> <literal type="number" pos:start="137:76" pos:end="137:76">0</literal></expr>)</condition><block type="pseudo" pos:start="139:9" pos:end="139:20"><block_content pos:start="139:9" pos:end="139:20">

        <return pos:start="139:9" pos:end="139:20">return <expr pos:start="139:16" pos:end="139:19"><operator pos:start="139:16" pos:end="139:16">-</operator><name pos:start="139:17" pos:end="139:19">EIO</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="141:5" pos:end="143:20"><if pos:start="141:5" pos:end="143:20">if <condition pos:start="141:8" pos:end="141:51">(<expr pos:start="141:9" pos:end="141:50"><call pos:start="141:9" pos:end="141:35"><name pos:start="141:9" pos:end="141:13">write</name><argument_list pos:start="141:14" pos:end="141:35">(<argument pos:start="141:15" pos:end="141:16"><expr pos:start="141:15" pos:end="141:16"><name pos:start="141:15" pos:end="141:16">fd</name></expr></argument>, <argument pos:start="141:19" pos:end="141:21"><expr pos:start="141:19" pos:end="141:21"><name pos:start="141:19" pos:end="141:21">buf</name></expr></argument>, <argument pos:start="141:24" pos:end="141:34"><expr pos:start="141:24" pos:end="141:34"><name pos:start="141:24" pos:end="141:34">HEADER_SIZE</name></expr></argument>)</argument_list></call> <operator pos:start="141:37" pos:end="141:38">!=</operator> <name pos:start="141:40" pos:end="141:50">HEADER_SIZE</name></expr>)</condition><block type="pseudo" pos:start="143:9" pos:end="143:20"><block_content pos:start="143:9" pos:end="143:20">

        <return pos:start="143:9" pos:end="143:20">return <expr pos:start="143:16" pos:end="143:19"><operator pos:start="143:16" pos:end="143:16">-</operator><name pos:start="143:17" pos:end="143:19">EIO</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="line" pos:start="147:5" pos:end="147:28">// Write the initial BAT</comment>

    <if_stmt pos:start="149:5" pos:end="151:20"><if pos:start="149:5" pos:end="151:20">if <condition pos:start="149:8" pos:end="149:41">(<expr pos:start="149:9" pos:end="149:40"><call pos:start="149:9" pos:end="149:36"><name pos:start="149:9" pos:end="149:13">lseek</name><argument_list pos:start="149:14" pos:end="149:36">(<argument pos:start="149:15" pos:end="149:16"><expr pos:start="149:15" pos:end="149:16"><name pos:start="149:15" pos:end="149:16">fd</name></expr></argument>, <argument pos:start="149:19" pos:end="149:25"><expr pos:start="149:19" pos:end="149:25"><literal type="number" pos:start="149:19" pos:end="149:19">3</literal> <operator pos:start="149:21" pos:end="149:21">*</operator> <literal type="number" pos:start="149:23" pos:end="149:25">512</literal></expr></argument>, <argument pos:start="149:28" pos:end="149:35"><expr pos:start="149:28" pos:end="149:35"><name pos:start="149:28" pos:end="149:35">SEEK_SET</name></expr></argument>)</argument_list></call> <operator pos:start="149:38" pos:end="149:38">&lt;</operator> <literal type="number" pos:start="149:40" pos:end="149:40">0</literal></expr>)</condition><block type="pseudo" pos:start="151:9" pos:end="151:20"><block_content pos:start="151:9" pos:end="151:20">

        <return pos:start="151:9" pos:end="151:20">return <expr pos:start="151:16" pos:end="151:19"><operator pos:start="151:16" pos:end="151:16">-</operator><name pos:start="151:17" pos:end="151:19">EIO</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="155:5" pos:end="155:27"><expr pos:start="155:5" pos:end="155:26"><call pos:start="155:5" pos:end="155:26"><name pos:start="155:5" pos:end="155:10">memset</name><argument_list pos:start="155:11" pos:end="155:26">(<argument pos:start="155:12" pos:end="155:14"><expr pos:start="155:12" pos:end="155:14"><name pos:start="155:12" pos:end="155:14">buf</name></expr></argument>, <argument pos:start="155:17" pos:end="155:20"><expr pos:start="155:17" pos:end="155:20"><literal type="number" pos:start="155:17" pos:end="155:20">0xFF</literal></expr></argument>, <argument pos:start="155:23" pos:end="155:25"><expr pos:start="155:23" pos:end="155:25"><literal type="number" pos:start="155:23" pos:end="155:25">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="157:5" pos:end="161:24">for <control pos:start="157:9" pos:end="157:59">(<init pos:start="157:10" pos:end="157:15"><expr pos:start="157:10" pos:end="157:14"><name pos:start="157:10" pos:end="157:10">i</name> <operator pos:start="157:12" pos:end="157:12">=</operator> <literal type="number" pos:start="157:14" pos:end="157:14">0</literal></expr>;</init> <condition pos:start="157:17" pos:end="157:54"><expr pos:start="157:17" pos:end="157:53"><name pos:start="157:17" pos:end="157:17">i</name> <operator pos:start="157:19" pos:end="157:19">&lt;</operator> <operator pos:start="157:21" pos:end="157:21">(</operator><name pos:start="157:22" pos:end="157:36">num_bat_entries</name> <operator pos:start="157:38" pos:end="157:38">*</operator> <literal type="number" pos:start="157:40" pos:end="157:42">4</literal> <operator pos:start="157:42" pos:end="157:42">+</operator> <literal type="number" pos:start="157:44" pos:end="157:46">511</literal><operator pos:start="157:47" pos:end="157:47">)</operator> <operator pos:start="157:49" pos:end="157:49">/</operator> <literal type="number" pos:start="157:51" pos:end="157:53">512</literal></expr>;</condition> <incr pos:start="157:56" pos:end="157:58"><expr pos:start="157:56" pos:end="157:58"><name pos:start="157:56" pos:end="157:56">i</name><operator pos:start="157:57" pos:end="157:58">++</operator></expr></incr>)</control><block type="pseudo" pos:start="159:9" pos:end="161:24"><block_content pos:start="159:9" pos:end="161:24">

        <if_stmt pos:start="159:9" pos:end="161:24"><if pos:start="159:9" pos:end="161:24">if <condition pos:start="159:12" pos:end="159:39">(<expr pos:start="159:13" pos:end="159:38"><call pos:start="159:13" pos:end="159:31"><name pos:start="159:13" pos:end="159:17">write</name><argument_list pos:start="159:18" pos:end="159:31">(<argument pos:start="159:19" pos:end="159:20"><expr pos:start="159:19" pos:end="159:20"><name pos:start="159:19" pos:end="159:20">fd</name></expr></argument>, <argument pos:start="159:23" pos:end="159:25"><expr pos:start="159:23" pos:end="159:25"><name pos:start="159:23" pos:end="159:25">buf</name></expr></argument>, <argument pos:start="159:28" pos:end="159:30"><expr pos:start="159:28" pos:end="159:30"><literal type="number" pos:start="159:28" pos:end="159:30">512</literal></expr></argument>)</argument_list></call> <operator pos:start="159:33" pos:end="159:34">!=</operator> <literal type="number" pos:start="159:36" pos:end="159:38">512</literal></expr>)</condition><block type="pseudo" pos:start="161:13" pos:end="161:24"><block_content pos:start="161:13" pos:end="161:24">

            <return pos:start="161:13" pos:end="161:24">return <expr pos:start="161:20" pos:end="161:23"><operator pos:start="161:20" pos:end="161:20">-</operator><name pos:start="161:21" pos:end="161:23">EIO</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>





    <comment type="line" pos:start="167:5" pos:end="167:38">// Prepare the Dynamic Disk Header</comment>

    <expr_stmt pos:start="169:5" pos:end="169:25"><expr pos:start="169:5" pos:end="169:24"><call pos:start="169:5" pos:end="169:24"><name pos:start="169:5" pos:end="169:10">memset</name><argument_list pos:start="169:11" pos:end="169:24">(<argument pos:start="169:12" pos:end="169:14"><expr pos:start="169:12" pos:end="169:14"><name pos:start="169:12" pos:end="169:14">buf</name></expr></argument>, <argument pos:start="169:17" pos:end="169:17"><expr pos:start="169:17" pos:end="169:17"><literal type="number" pos:start="169:17" pos:end="169:17">0</literal></expr></argument>, <argument pos:start="169:20" pos:end="169:23"><expr pos:start="169:20" pos:end="169:23"><literal type="number" pos:start="169:20" pos:end="169:23">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="173:5" pos:end="173:49"><expr pos:start="173:5" pos:end="173:48"><call pos:start="173:5" pos:end="173:48"><name pos:start="173:5" pos:end="173:10">memcpy</name><argument_list pos:start="173:11" pos:end="173:48">(<argument pos:start="173:12" pos:end="173:32"><expr pos:start="173:12" pos:end="173:32"><name pos:start="173:12" pos:end="173:32"><name pos:start="173:12" pos:end="173:25">dyndisk_header</name><operator pos:start="173:26" pos:end="173:27">-&gt;</operator><name pos:start="173:28" pos:end="173:32">magic</name></name></expr></argument>, <argument pos:start="173:35" pos:end="173:44"><expr pos:start="173:35" pos:end="173:44"><literal type="string" pos:start="173:35" pos:end="173:44">"cxsparse"</literal></expr></argument>, <argument pos:start="173:47" pos:end="173:47"><expr pos:start="173:47" pos:end="173:47"><literal type="number" pos:start="173:47" pos:end="173:47">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="177:5" pos:end="177:58"><expr pos:start="177:5" pos:end="177:57"><name pos:start="177:5" pos:end="177:31"><name pos:start="177:5" pos:end="177:18">dyndisk_header</name><operator pos:start="177:19" pos:end="177:20">-&gt;</operator><name pos:start="177:21" pos:end="177:31">data_offset</name></name> <operator pos:start="177:33" pos:end="177:33">=</operator> <call pos:start="177:35" pos:end="177:57"><name pos:start="177:35" pos:end="177:45">be64_to_cpu</name><argument_list pos:start="177:46" pos:end="177:57">(<argument pos:start="177:47" pos:end="177:56"><expr pos:start="177:47" pos:end="177:56"><literal type="number" pos:start="177:47" pos:end="177:56">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="179:5" pos:end="179:56"><expr pos:start="179:5" pos:end="179:55"><name pos:start="179:5" pos:end="179:32"><name pos:start="179:5" pos:end="179:18">dyndisk_header</name><operator pos:start="179:19" pos:end="179:20">-&gt;</operator><name pos:start="179:21" pos:end="179:32">table_offset</name></name> <operator pos:start="179:34" pos:end="179:34">=</operator> <call pos:start="179:36" pos:end="179:55"><name pos:start="179:36" pos:end="179:46">be64_to_cpu</name><argument_list pos:start="179:47" pos:end="179:55">(<argument pos:start="179:48" pos:end="179:54"><expr pos:start="179:48" pos:end="179:54"><literal type="number" pos:start="179:48" pos:end="179:48">3</literal> <operator pos:start="179:50" pos:end="179:50">*</operator> <literal type="number" pos:start="179:52" pos:end="179:54">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="181:5" pos:end="181:54"><expr pos:start="181:5" pos:end="181:53"><name pos:start="181:5" pos:end="181:27"><name pos:start="181:5" pos:end="181:18">dyndisk_header</name><operator pos:start="181:19" pos:end="181:20">-&gt;</operator><name pos:start="181:21" pos:end="181:27">version</name></name> <operator pos:start="181:29" pos:end="181:29">=</operator> <call pos:start="181:31" pos:end="181:53"><name pos:start="181:31" pos:end="181:41">be32_to_cpu</name><argument_list pos:start="181:42" pos:end="181:53">(<argument pos:start="181:43" pos:end="181:52"><expr pos:start="181:43" pos:end="181:52"><literal type="number" pos:start="181:43" pos:end="181:52">0x00010000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="183:5" pos:end="183:57"><expr pos:start="183:5" pos:end="183:56"><name pos:start="183:5" pos:end="183:30"><name pos:start="183:5" pos:end="183:18">dyndisk_header</name><operator pos:start="183:19" pos:end="183:20">-&gt;</operator><name pos:start="183:21" pos:end="183:30">block_size</name></name> <operator pos:start="183:32" pos:end="183:32">=</operator> <call pos:start="183:34" pos:end="183:56"><name pos:start="183:34" pos:end="183:44">be32_to_cpu</name><argument_list pos:start="183:45" pos:end="183:56">(<argument pos:start="183:46" pos:end="183:55"><expr pos:start="183:46" pos:end="183:55"><name pos:start="183:46" pos:end="183:55">block_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="185:5" pos:end="185:69"><expr pos:start="185:5" pos:end="185:68"><name pos:start="185:5" pos:end="185:37"><name pos:start="185:5" pos:end="185:18">dyndisk_header</name><operator pos:start="185:19" pos:end="185:20">-&gt;</operator><name pos:start="185:21" pos:end="185:37">max_table_entries</name></name> <operator pos:start="185:39" pos:end="185:39">=</operator> <call pos:start="185:41" pos:end="185:68"><name pos:start="185:41" pos:end="185:51">be32_to_cpu</name><argument_list pos:start="185:52" pos:end="185:68">(<argument pos:start="185:53" pos:end="185:67"><expr pos:start="185:53" pos:end="185:67"><name pos:start="185:53" pos:end="185:67">num_bat_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="189:5" pos:end="189:68"><expr pos:start="189:5" pos:end="189:67"><name pos:start="189:5" pos:end="189:28"><name pos:start="189:5" pos:end="189:18">dyndisk_header</name><operator pos:start="189:19" pos:end="189:20">-&gt;</operator><name pos:start="189:21" pos:end="189:28">checksum</name></name> <operator pos:start="189:30" pos:end="189:30">=</operator> <call pos:start="189:32" pos:end="189:67"><name pos:start="189:32" pos:end="189:42">be32_to_cpu</name><argument_list pos:start="189:43" pos:end="189:67">(<argument pos:start="189:44" pos:end="189:66"><expr pos:start="189:44" pos:end="189:66"><call pos:start="189:44" pos:end="189:66"><name pos:start="189:44" pos:end="189:55">vpc_checksum</name><argument_list pos:start="189:56" pos:end="189:66">(<argument pos:start="189:57" pos:end="189:59"><expr pos:start="189:57" pos:end="189:59"><name pos:start="189:57" pos:end="189:59">buf</name></expr></argument>, <argument pos:start="189:62" pos:end="189:65"><expr pos:start="189:62" pos:end="189:65"><literal type="number" pos:start="189:62" pos:end="189:65">1024</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="193:5" pos:end="193:23">// Write the header</comment>

    <if_stmt pos:start="195:5" pos:end="197:20"><if pos:start="195:5" pos:end="197:20">if <condition pos:start="195:8" pos:end="195:37">(<expr pos:start="195:9" pos:end="195:36"><call pos:start="195:9" pos:end="195:32"><name pos:start="195:9" pos:end="195:13">lseek</name><argument_list pos:start="195:14" pos:end="195:32">(<argument pos:start="195:15" pos:end="195:16"><expr pos:start="195:15" pos:end="195:16"><name pos:start="195:15" pos:end="195:16">fd</name></expr></argument>, <argument pos:start="195:19" pos:end="195:21"><expr pos:start="195:19" pos:end="195:21"><literal type="number" pos:start="195:19" pos:end="195:21">512</literal></expr></argument>, <argument pos:start="195:24" pos:end="195:31"><expr pos:start="195:24" pos:end="195:31"><name pos:start="195:24" pos:end="195:31">SEEK_SET</name></expr></argument>)</argument_list></call> <operator pos:start="195:34" pos:end="195:34">&lt;</operator> <literal type="number" pos:start="195:36" pos:end="195:36">0</literal></expr>)</condition><block type="pseudo" pos:start="197:9" pos:end="197:20"><block_content pos:start="197:9" pos:end="197:20">

        <return pos:start="197:9" pos:end="197:20">return <expr pos:start="197:16" pos:end="197:19"><operator pos:start="197:16" pos:end="197:16">-</operator><name pos:start="197:17" pos:end="197:19">EIO</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="199:5" pos:end="201:20"><if pos:start="199:5" pos:end="201:20">if <condition pos:start="199:8" pos:end="199:37">(<expr pos:start="199:9" pos:end="199:36"><call pos:start="199:9" pos:end="199:28"><name pos:start="199:9" pos:end="199:13">write</name><argument_list pos:start="199:14" pos:end="199:28">(<argument pos:start="199:15" pos:end="199:16"><expr pos:start="199:15" pos:end="199:16"><name pos:start="199:15" pos:end="199:16">fd</name></expr></argument>, <argument pos:start="199:19" pos:end="199:21"><expr pos:start="199:19" pos:end="199:21"><name pos:start="199:19" pos:end="199:21">buf</name></expr></argument>, <argument pos:start="199:24" pos:end="199:27"><expr pos:start="199:24" pos:end="199:27"><literal type="number" pos:start="199:24" pos:end="199:27">1024</literal></expr></argument>)</argument_list></call> <operator pos:start="199:30" pos:end="199:31">!=</operator> <literal type="number" pos:start="199:33" pos:end="199:36">1024</literal></expr>)</condition><block type="pseudo" pos:start="201:9" pos:end="201:20"><block_content pos:start="201:9" pos:end="201:20">

        <return pos:start="201:9" pos:end="201:20">return <expr pos:start="201:16" pos:end="201:19"><operator pos:start="201:16" pos:end="201:16">-</operator><name pos:start="201:17" pos:end="201:19">EIO</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="205:5" pos:end="205:14"><expr pos:start="205:5" pos:end="205:13"><call pos:start="205:5" pos:end="205:13"><name pos:start="205:5" pos:end="205:9">close</name><argument_list pos:start="205:10" pos:end="205:13">(<argument pos:start="205:11" pos:end="205:12"><expr pos:start="205:11" pos:end="205:12"><name pos:start="205:11" pos:end="205:12">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="207:5" pos:end="207:13">return <expr pos:start="207:12" pos:end="207:12"><literal type="number" pos:start="207:12" pos:end="207:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
