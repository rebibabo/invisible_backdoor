<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21810.c" pos:tabs="8"><function pos:start="1:1" pos:end="159:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:35">qemu_tcg_cpu_thread_fn</name><parameter_list pos:start="1:36" pos:end="1:46">(<parameter pos:start="1:37" pos:end="1:45"><decl pos:start="1:37" pos:end="1:45"><type pos:start="1:37" pos:end="1:42"><name pos:start="1:37" pos:end="1:40">void</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">arg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="159:1">{<block_content pos:start="5:5" pos:end="157:16">

    <decl_stmt pos:start="5:5" pos:end="5:24"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:17">cpu</name> <init pos:start="5:19" pos:end="5:23">= <expr pos:start="5:21" pos:end="5:23"><name pos:start="5:21" pos:end="5:23">arg</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:26"><expr pos:start="9:5" pos:end="9:25"><call pos:start="9:5" pos:end="9:25"><name pos:start="9:5" pos:end="9:23">rcu_register_thread</name><argument_list pos:start="9:24" pos:end="9:25">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:31"><expr pos:start="13:5" pos:end="13:30"><call pos:start="13:5" pos:end="13:30"><name pos:start="13:5" pos:end="13:28">qemu_mutex_lock_iothread</name><argument_list pos:start="13:29" pos:end="13:30">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:38"><expr pos:start="15:5" pos:end="15:37"><call pos:start="15:5" pos:end="15:37"><name pos:start="15:5" pos:end="15:24">qemu_thread_get_self</name><argument_list pos:start="15:25" pos:end="15:37">(<argument pos:start="15:26" pos:end="15:36"><expr pos:start="15:26" pos:end="15:36"><name pos:start="15:26" pos:end="15:36"><name pos:start="15:26" pos:end="15:28">cpu</name><operator pos:start="15:29" pos:end="15:30">-&gt;</operator><name pos:start="15:31" pos:end="15:36">thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <macro pos:start="19:5" pos:end="19:20"><name pos:start="19:5" pos:end="19:15">CPU_FOREACH</name><argument_list pos:start="19:16" pos:end="19:20">(<argument pos:start="19:17" pos:end="19:19">cpu</argument>)</argument_list></macro> <block pos:start="19:22" pos:end="27:5">{<block_content pos:start="21:9" pos:end="25:27">

        <expr_stmt pos:start="21:9" pos:end="21:46"><expr pos:start="21:9" pos:end="21:45"><name pos:start="21:9" pos:end="21:22"><name pos:start="21:9" pos:end="21:11">cpu</name><operator pos:start="21:12" pos:end="21:13">-&gt;</operator><name pos:start="21:14" pos:end="21:22">thread_id</name></name> <operator pos:start="21:24" pos:end="21:24">=</operator> <call pos:start="21:26" pos:end="21:45"><name pos:start="21:26" pos:end="21:43">qemu_get_thread_id</name><argument_list pos:start="21:44" pos:end="21:45">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:28"><expr pos:start="23:9" pos:end="23:27"><name pos:start="23:9" pos:end="23:20"><name pos:start="23:9" pos:end="23:11">cpu</name><operator pos:start="23:12" pos:end="23:13">-&gt;</operator><name pos:start="23:14" pos:end="23:20">created</name></name> <operator pos:start="23:22" pos:end="23:22">=</operator> <name pos:start="23:24" pos:end="23:27">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:27"><expr pos:start="25:9" pos:end="25:26"><name pos:start="25:9" pos:end="25:22"><name pos:start="25:9" pos:end="25:11">cpu</name><operator pos:start="25:12" pos:end="25:13">-&gt;</operator><name pos:start="25:14" pos:end="25:22">can_do_io</name></name> <operator pos:start="25:24" pos:end="25:24">=</operator> <literal type="number" pos:start="25:26" pos:end="25:26">1</literal></expr>;</expr_stmt>

    </block_content>}</block>

    <expr_stmt pos:start="29:5" pos:end="29:37"><expr pos:start="29:5" pos:end="29:36"><call pos:start="29:5" pos:end="29:36"><name pos:start="29:5" pos:end="29:20">qemu_cond_signal</name><argument_list pos:start="29:21" pos:end="29:36">(<argument pos:start="29:22" pos:end="29:35"><expr pos:start="29:22" pos:end="29:35"><operator pos:start="29:22" pos:end="29:22">&amp;</operator><name pos:start="29:23" pos:end="29:35">qemu_cpu_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:55">/* wait for initial kick-off after machine start */</comment>

    <while pos:start="35:5" pos:end="49:5">while <condition pos:start="35:11" pos:end="35:30">(<expr pos:start="35:12" pos:end="35:29"><name pos:start="35:12" pos:end="35:29"><name pos:start="35:12" pos:end="35:20">first_cpu</name><operator pos:start="35:21" pos:end="35:22">-&gt;</operator><name pos:start="35:23" pos:end="35:29">stopped</name></name></expr>)</condition> <block pos:start="35:32" pos:end="49:5">{<block_content pos:start="37:9" pos:end="47:9">

        <expr_stmt pos:start="37:9" pos:end="37:65"><expr pos:start="37:9" pos:end="37:64"><call pos:start="37:9" pos:end="37:64"><name pos:start="37:9" pos:end="37:22">qemu_cond_wait</name><argument_list pos:start="37:23" pos:end="37:64">(<argument pos:start="37:24" pos:end="37:43"><expr pos:start="37:24" pos:end="37:43"><name pos:start="37:24" pos:end="37:43"><name pos:start="37:24" pos:end="37:32">first_cpu</name><operator pos:start="37:33" pos:end="37:34">-&gt;</operator><name pos:start="37:35" pos:end="37:43">halt_cond</name></name></expr></argument>, <argument pos:start="37:46" pos:end="37:63"><expr pos:start="37:46" pos:end="37:63"><operator pos:start="37:46" pos:end="37:46">&amp;</operator><name pos:start="37:47" pos:end="37:63">qemu_global_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="41:9" pos:end="41:38">/* process any pending work */</comment>

        <macro pos:start="43:9" pos:end="43:24"><name pos:start="43:9" pos:end="43:19">CPU_FOREACH</name><argument_list pos:start="43:20" pos:end="43:24">(<argument pos:start="43:21" pos:end="43:23">cpu</argument>)</argument_list></macro> <block pos:start="43:26" pos:end="47:9">{<block_content pos:start="45:13" pos:end="45:43">

            <expr_stmt pos:start="45:13" pos:end="45:43"><expr pos:start="45:13" pos:end="45:42"><call pos:start="45:13" pos:end="45:42"><name pos:start="45:13" pos:end="45:37">qemu_wait_io_event_common</name><argument_list pos:start="45:38" pos:end="45:42">(<argument pos:start="45:39" pos:end="45:41"><expr pos:start="45:39" pos:end="45:41"><name pos:start="45:39" pos:end="45:41">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

    </block_content>}</block></while>



    <expr_stmt pos:start="53:5" pos:end="53:27"><expr pos:start="53:5" pos:end="53:26"><call pos:start="53:5" pos:end="53:26"><name pos:start="53:5" pos:end="53:24">start_tcg_kick_timer</name><argument_list pos:start="53:25" pos:end="53:26">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:20"><expr pos:start="57:5" pos:end="57:19"><name pos:start="57:5" pos:end="57:7">cpu</name> <operator pos:start="57:9" pos:end="57:9">=</operator> <name pos:start="57:11" pos:end="57:19">first_cpu</name></expr>;</expr_stmt>



    <comment type="block" pos:start="61:5" pos:end="61:34">/* process any pending work */</comment>

    <expr_stmt pos:start="63:5" pos:end="63:26"><expr pos:start="63:5" pos:end="63:25"><name pos:start="63:5" pos:end="63:21"><name pos:start="63:5" pos:end="63:7">cpu</name><operator pos:start="63:8" pos:end="63:9">-&gt;</operator><name pos:start="63:10" pos:end="63:21">exit_request</name></name> <operator pos:start="63:23" pos:end="63:23">=</operator> <literal type="number" pos:start="63:25" pos:end="63:25">1</literal></expr>;</expr_stmt>



    <while pos:start="67:5" pos:end="153:5">while <condition pos:start="67:11" pos:end="67:13">(<expr pos:start="67:12" pos:end="67:12"><literal type="number" pos:start="67:12" pos:end="67:12">1</literal></expr>)</condition> <block pos:start="67:15" pos:end="153:5">{<block_content pos:start="71:9" pos:end="151:35">

        <comment type="block" pos:start="69:9" pos:end="69:59">/* Account partial waits to QEMU_CLOCK_VIRTUAL.  */</comment>

        <expr_stmt pos:start="71:9" pos:end="71:34"><expr pos:start="71:9" pos:end="71:33"><call pos:start="71:9" pos:end="71:33"><name pos:start="71:9" pos:end="71:31">qemu_account_warp_timer</name><argument_list pos:start="71:32" pos:end="71:33">()</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="75:9" pos:end="79:9"><if pos:start="75:9" pos:end="79:9">if <condition pos:start="75:12" pos:end="75:17">(<expr pos:start="75:13" pos:end="75:16"><operator pos:start="75:13" pos:end="75:13">!</operator><name pos:start="75:14" pos:end="75:16">cpu</name></expr>)</condition> <block pos:start="75:19" pos:end="79:9">{<block_content pos:start="77:13" pos:end="77:28">

            <expr_stmt pos:start="77:13" pos:end="77:28"><expr pos:start="77:13" pos:end="77:27"><name pos:start="77:13" pos:end="77:15">cpu</name> <operator pos:start="77:17" pos:end="77:17">=</operator> <name pos:start="77:19" pos:end="77:27">first_cpu</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <while pos:start="83:9" pos:end="127:9">while <condition pos:start="83:15" pos:end="83:68">(<expr pos:start="83:16" pos:end="83:67"><name pos:start="83:16" pos:end="83:18">cpu</name> <operator pos:start="83:20" pos:end="83:21">&amp;&amp;</operator> <operator pos:start="83:23" pos:end="83:23">!</operator><name pos:start="83:24" pos:end="83:45"><name pos:start="83:24" pos:end="83:26">cpu</name><operator pos:start="83:27" pos:end="83:28">-&gt;</operator><name pos:start="83:29" pos:end="83:45">queued_work_first</name></name> <operator pos:start="83:47" pos:end="83:48">&amp;&amp;</operator> <operator pos:start="83:50" pos:end="83:50">!</operator><name pos:start="83:51" pos:end="83:67"><name pos:start="83:51" pos:end="83:53">cpu</name><operator pos:start="83:54" pos:end="83:55">-&gt;</operator><name pos:start="83:56" pos:end="83:67">exit_request</name></name></expr>)</condition> <block pos:start="83:70" pos:end="127:9">{<block_content pos:start="87:13" pos:end="125:32">



            <expr_stmt pos:start="87:13" pos:end="87:52"><expr pos:start="87:13" pos:end="87:51"><call pos:start="87:13" pos:end="87:51"><name pos:start="87:13" pos:end="87:25">atomic_mb_set</name><argument_list pos:start="87:26" pos:end="87:51">(<argument pos:start="87:27" pos:end="87:45"><expr pos:start="87:27" pos:end="87:45"><operator pos:start="87:27" pos:end="87:27">&amp;</operator><name pos:start="87:28" pos:end="87:45">tcg_current_rr_cpu</name></expr></argument>, <argument pos:start="87:48" pos:end="87:50"><expr pos:start="87:48" pos:end="87:50"><name pos:start="87:48" pos:end="87:50">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="91:13" pos:end="93:78"><expr pos:start="91:13" pos:end="93:77"><call pos:start="91:13" pos:end="93:77"><name pos:start="91:13" pos:end="91:29">qemu_clock_enable</name><argument_list pos:start="91:30" pos:end="93:77">(<argument pos:start="91:31" pos:end="91:48"><expr pos:start="91:31" pos:end="91:48"><name pos:start="91:31" pos:end="91:48">QEMU_CLOCK_VIRTUAL</name></expr></argument>,

                              <argument pos:start="93:31" pos:end="93:76"><expr pos:start="93:31" pos:end="93:76"><operator pos:start="93:31" pos:end="93:31">(</operator><name pos:start="93:32" pos:end="93:54"><name pos:start="93:32" pos:end="93:34">cpu</name><operator pos:start="93:35" pos:end="93:36">-&gt;</operator><name pos:start="93:37" pos:end="93:54">singlestep_enabled</name></name> <operator pos:start="93:56" pos:end="93:56">&amp;</operator> <name pos:start="93:58" pos:end="93:70">SSTEP_NOTIMER</name><operator pos:start="93:71" pos:end="93:71">)</operator> <operator pos:start="93:73" pos:end="93:74">==</operator> <literal type="number" pos:start="93:76" pos:end="93:76">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="97:13" pos:end="121:13"><if pos:start="97:13" pos:end="111:13">if <condition pos:start="97:16" pos:end="97:33">(<expr pos:start="97:17" pos:end="97:32"><call pos:start="97:17" pos:end="97:32"><name pos:start="97:17" pos:end="97:27">cpu_can_run</name><argument_list pos:start="97:28" pos:end="97:32">(<argument pos:start="97:29" pos:end="97:31"><expr pos:start="97:29" pos:end="97:31"><name pos:start="97:29" pos:end="97:31">cpu</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="97:35" pos:end="111:13">{<block_content pos:start="99:17" pos:end="109:17">

                <decl_stmt pos:start="99:17" pos:end="99:22"><decl pos:start="99:17" pos:end="99:21"><type pos:start="99:17" pos:end="99:19"><name pos:start="99:17" pos:end="99:19">int</name></type> <name pos:start="99:21" pos:end="99:21">r</name></decl>;</decl_stmt>

                <expr_stmt pos:start="101:17" pos:end="101:38"><expr pos:start="101:17" pos:end="101:37"><name pos:start="101:17" pos:end="101:17">r</name> <operator pos:start="101:19" pos:end="101:19">=</operator> <call pos:start="101:21" pos:end="101:37"><name pos:start="101:21" pos:end="101:32">tcg_cpu_exec</name><argument_list pos:start="101:33" pos:end="101:37">(<argument pos:start="101:34" pos:end="101:36"><expr pos:start="101:34" pos:end="101:36"><name pos:start="101:34" pos:end="101:36">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="103:17" pos:end="109:17"><if pos:start="103:17" pos:end="109:17">if <condition pos:start="103:20" pos:end="103:36">(<expr pos:start="103:21" pos:end="103:35"><name pos:start="103:21" pos:end="103:21">r</name> <operator pos:start="103:23" pos:end="103:24">==</operator> <name pos:start="103:26" pos:end="103:35">EXCP_DEBUG</name></expr>)</condition> <block pos:start="103:38" pos:end="109:17">{<block_content pos:start="105:21" pos:end="107:26">

                    <expr_stmt pos:start="105:21" pos:end="105:48"><expr pos:start="105:21" pos:end="105:47"><call pos:start="105:21" pos:end="105:47"><name pos:start="105:21" pos:end="105:42">cpu_handle_guest_debug</name><argument_list pos:start="105:43" pos:end="105:47">(<argument pos:start="105:44" pos:end="105:46"><expr pos:start="105:44" pos:end="105:46"><name pos:start="105:44" pos:end="105:46">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="107:21" pos:end="107:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="111:15" pos:end="121:13">else if <condition pos:start="111:23" pos:end="111:49">(<expr pos:start="111:24" pos:end="111:48"><name pos:start="111:24" pos:end="111:32"><name pos:start="111:24" pos:end="111:26">cpu</name><operator pos:start="111:27" pos:end="111:28">-&gt;</operator><name pos:start="111:29" pos:end="111:32">stop</name></name> <operator pos:start="111:34" pos:end="111:35">||</operator> <name pos:start="111:37" pos:end="111:48"><name pos:start="111:37" pos:end="111:39">cpu</name><operator pos:start="111:40" pos:end="111:41">-&gt;</operator><name pos:start="111:42" pos:end="111:48">stopped</name></name></expr>)</condition> <block pos:start="111:51" pos:end="121:13">{<block_content pos:start="113:17" pos:end="119:22">

                <if_stmt pos:start="113:17" pos:end="117:17"><if pos:start="113:17" pos:end="117:17">if <condition pos:start="113:20" pos:end="113:32">(<expr pos:start="113:21" pos:end="113:31"><name pos:start="113:21" pos:end="113:31"><name pos:start="113:21" pos:end="113:23">cpu</name><operator pos:start="113:24" pos:end="113:25">-&gt;</operator><name pos:start="113:26" pos:end="113:31">unplug</name></name></expr>)</condition> <block pos:start="113:34" pos:end="117:17">{<block_content pos:start="115:21" pos:end="115:40">

                    <expr_stmt pos:start="115:21" pos:end="115:40"><expr pos:start="115:21" pos:end="115:39"><name pos:start="115:21" pos:end="115:23">cpu</name> <operator pos:start="115:25" pos:end="115:25">=</operator> <call pos:start="115:27" pos:end="115:39"><name pos:start="115:27" pos:end="115:34">CPU_NEXT</name><argument_list pos:start="115:35" pos:end="115:39">(<argument pos:start="115:36" pos:end="115:38"><expr pos:start="115:36" pos:end="115:38"><name pos:start="115:36" pos:end="115:38">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="119:17" pos:end="119:22">break;</break>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="125:13" pos:end="125:32"><expr pos:start="125:13" pos:end="125:31"><name pos:start="125:13" pos:end="125:15">cpu</name> <operator pos:start="125:17" pos:end="125:17">=</operator> <call pos:start="125:19" pos:end="125:31"><name pos:start="125:19" pos:end="125:26">CPU_NEXT</name><argument_list pos:start="125:27" pos:end="125:31">(<argument pos:start="125:28" pos:end="125:30"><expr pos:start="125:28" pos:end="125:30"><name pos:start="125:28" pos:end="125:30">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while> <comment type="block" pos:start="127:11" pos:end="127:51">/* while (cpu &amp;&amp; !cpu-&gt;exit_request).. */</comment>



        <comment type="block" pos:start="131:9" pos:end="131:77">/* Does not need atomic_mb_set because a spurious wakeup is okay.  */</comment>

        <expr_stmt pos:start="133:9" pos:end="133:46"><expr pos:start="133:9" pos:end="133:45"><call pos:start="133:9" pos:end="133:45"><name pos:start="133:9" pos:end="133:18">atomic_set</name><argument_list pos:start="133:19" pos:end="133:45">(<argument pos:start="133:20" pos:end="133:38"><expr pos:start="133:20" pos:end="133:38"><operator pos:start="133:20" pos:end="133:20">&amp;</operator><name pos:start="133:21" pos:end="133:38">tcg_current_rr_cpu</name></expr></argument>, <argument pos:start="133:41" pos:end="133:44"><expr pos:start="133:41" pos:end="133:44"><name pos:start="133:41" pos:end="133:44">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="137:9" pos:end="141:9"><if pos:start="137:9" pos:end="141:9">if <condition pos:start="137:12" pos:end="137:37">(<expr pos:start="137:13" pos:end="137:36"><name pos:start="137:13" pos:end="137:15">cpu</name> <operator pos:start="137:17" pos:end="137:18">&amp;&amp;</operator> <name pos:start="137:20" pos:end="137:36"><name pos:start="137:20" pos:end="137:22">cpu</name><operator pos:start="137:23" pos:end="137:24">-&gt;</operator><name pos:start="137:25" pos:end="137:36">exit_request</name></name></expr>)</condition> <block pos:start="137:39" pos:end="141:9">{<block_content pos:start="139:13" pos:end="139:49">

            <expr_stmt pos:start="139:13" pos:end="139:49"><expr pos:start="139:13" pos:end="139:48"><call pos:start="139:13" pos:end="139:48"><name pos:start="139:13" pos:end="139:25">atomic_mb_set</name><argument_list pos:start="139:26" pos:end="139:48">(<argument pos:start="139:27" pos:end="139:44"><expr pos:start="139:27" pos:end="139:44"><operator pos:start="139:27" pos:end="139:27">&amp;</operator><name pos:start="139:28" pos:end="139:44"><name pos:start="139:28" pos:end="139:30">cpu</name><operator pos:start="139:31" pos:end="139:32">-&gt;</operator><name pos:start="139:33" pos:end="139:44">exit_request</name></name></expr></argument>, <argument pos:start="139:47" pos:end="139:47"><expr pos:start="139:47" pos:end="139:47"><literal type="number" pos:start="139:47" pos:end="139:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="145:9" pos:end="145:33"><expr pos:start="145:9" pos:end="145:32"><call pos:start="145:9" pos:end="145:32"><name pos:start="145:9" pos:end="145:30">handle_icount_deadline</name><argument_list pos:start="145:31" pos:end="145:32">()</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="149:9" pos:end="149:52"><expr pos:start="149:9" pos:end="149:51"><call pos:start="149:9" pos:end="149:51"><name pos:start="149:9" pos:end="149:30">qemu_tcg_wait_io_event</name><argument_list pos:start="149:31" pos:end="149:51">(<argument pos:start="149:32" pos:end="149:50"><expr pos:start="149:32" pos:end="149:50"><call pos:start="149:32" pos:end="149:50"><name pos:start="149:32" pos:end="149:43">QTAILQ_FIRST</name><argument_list pos:start="149:44" pos:end="149:50">(<argument pos:start="149:45" pos:end="149:49"><expr pos:start="149:45" pos:end="149:49"><operator pos:start="149:45" pos:end="149:45">&amp;</operator><name pos:start="149:46" pos:end="149:49">cpus</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:35"><expr pos:start="151:9" pos:end="151:34"><call pos:start="151:9" pos:end="151:34"><name pos:start="151:9" pos:end="151:32">deal_with_unplugged_cpus</name><argument_list pos:start="151:33" pos:end="151:34">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <return pos:start="157:5" pos:end="157:16">return <expr pos:start="157:12" pos:end="157:15"><name pos:start="157:12" pos:end="157:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
