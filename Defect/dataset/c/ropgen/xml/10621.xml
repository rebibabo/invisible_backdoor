<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10621.c" pos:tabs="8"><function pos:start="1:1" pos:end="365:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">cuvid_decode_frame</name><parameter_list pos:start="1:30" pos:end="1:97">(<parameter pos:start="1:31" pos:end="1:51"><decl pos:start="1:31" pos:end="1:51"><type pos:start="1:31" pos:end="1:51"><name pos:start="1:31" pos:end="1:44">AVCodecContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:51">avctx</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:63"><decl pos:start="1:54" pos:end="1:63"><type pos:start="1:54" pos:end="1:63"><name pos:start="1:54" pos:end="1:57">void</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:63">data</name></decl></parameter>, <parameter pos:start="1:66" pos:end="1:79"><decl pos:start="1:66" pos:end="1:79"><type pos:start="1:66" pos:end="1:79"><name pos:start="1:66" pos:end="1:68">int</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:79">got_frame</name></decl></parameter>, <parameter pos:start="1:82" pos:end="1:96"><decl pos:start="1:82" pos:end="1:96"><type pos:start="1:82" pos:end="1:96"><name pos:start="1:82" pos:end="1:89">AVPacket</name> <modifier pos:start="1:91" pos:end="1:91">*</modifier></type><name pos:start="1:92" pos:end="1:96">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="365:1">{<block_content pos:start="5:5" pos:end="363:19">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">CuvidContext</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:21">ctx</name> <init pos:start="5:23" pos:end="5:40">= <expr pos:start="5:25" pos:end="5:40"><name pos:start="5:25" pos:end="5:40"><name pos:start="5:25" pos:end="5:29">avctx</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:76"><decl pos:start="7:5" pos:end="7:75"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:21">AVHWDeviceContext</name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:33">device_ctx</name> <init pos:start="7:35" pos:end="7:75">= <expr pos:start="7:37" pos:end="7:75"><operator pos:start="7:37" pos:end="7:37">(</operator><name pos:start="7:38" pos:end="7:54">AVHWDeviceContext</name><operator pos:start="7:55" pos:end="7:55">*</operator><operator pos:start="7:56" pos:end="7:56">)</operator><name pos:start="7:57" pos:end="7:75"><name pos:start="7:57" pos:end="7:59">ctx</name><operator pos:start="7:60" pos:end="7:61">-&gt;</operator><name pos:start="7:62" pos:end="7:69">hwdevice</name><operator pos:start="7:70" pos:end="7:71">-&gt;</operator><name pos:start="7:72" pos:end="7:75">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:58"><decl pos:start="9:5" pos:end="9:57"><type pos:start="9:5" pos:end="9:25"><name pos:start="9:5" pos:end="9:23">AVCUDADeviceContext</name> <modifier pos:start="9:25" pos:end="9:25">*</modifier></type><name pos:start="9:26" pos:end="9:37">device_hwctx</name> <init pos:start="9:39" pos:end="9:57">= <expr pos:start="9:41" pos:end="9:57"><name pos:start="9:41" pos:end="9:57"><name pos:start="9:41" pos:end="9:50">device_ctx</name><operator pos:start="9:51" pos:end="9:52">-&gt;</operator><name pos:start="9:53" pos:end="9:57">hwctx</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:55"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:13">CUcontext</name></type> <name pos:start="11:15" pos:end="11:19">dummy</name></decl>, <decl pos:start="11:22" pos:end="11:54"><type ref="prev" pos:start="11:5" pos:end="11:13"/><name pos:start="11:22" pos:end="11:29">cuda_ctx</name> <init pos:start="11:31" pos:end="11:54">= <expr pos:start="11:33" pos:end="11:54"><name pos:start="11:33" pos:end="11:54"><name pos:start="11:33" pos:end="11:44">device_hwctx</name><operator pos:start="11:45" pos:end="11:46">-&gt;</operator><name pos:start="11:47" pos:end="11:54">cuda_ctx</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">AVFrame</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:18">frame</name> <init pos:start="13:20" pos:end="13:25">= <expr pos:start="13:22" pos:end="13:25"><name pos:start="13:22" pos:end="13:25">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:32"><decl pos:start="15:5" pos:end="15:31"><type pos:start="15:5" pos:end="15:25"><name pos:start="15:5" pos:end="15:25">CUVIDSOURCEDATAPACKET</name></type> <name pos:start="15:27" pos:end="15:31">cupkt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:35"><decl pos:start="17:5" pos:end="17:34"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">AVPacket</name></type> <name pos:start="17:14" pos:end="17:26">filter_packet</name> <init pos:start="17:28" pos:end="17:34">= <expr pos:start="17:30" pos:end="17:34"><block pos:start="17:30" pos:end="17:34">{ <expr pos:start="17:32" pos:end="17:32"><literal type="number" pos:start="17:32" pos:end="17:32">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:37"><decl pos:start="19:5" pos:end="19:36"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">AVPacket</name></type> <name pos:start="19:14" pos:end="19:28">filtered_packet</name> <init pos:start="19:30" pos:end="19:36">= <expr pos:start="19:32" pos:end="19:36"><block pos:start="19:32" pos:end="19:36">{ <expr pos:start="19:34" pos:end="19:34"><literal type="number" pos:start="19:34" pos:end="19:34">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:33"><decl pos:start="21:5" pos:end="21:32"><type pos:start="21:5" pos:end="21:15"><name pos:start="21:5" pos:end="21:15">CUdeviceptr</name></type> <name pos:start="21:17" pos:end="21:28">mapped_frame</name> <init pos:start="21:30" pos:end="21:32">= <expr pos:start="21:32" pos:end="21:32"><literal type="number" pos:start="21:32" pos:end="21:32">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:26"><decl pos:start="23:5" pos:end="23:15"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:11">ret</name> <init pos:start="23:13" pos:end="23:15">= <expr pos:start="23:15" pos:end="23:15"><literal type="number" pos:start="23:15" pos:end="23:15">0</literal></expr></init></decl>, <decl pos:start="23:18" pos:end="23:25"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:18" pos:end="23:21">eret</name> <init pos:start="23:23" pos:end="23:25">= <expr pos:start="23:25" pos:end="23:25"><literal type="number" pos:start="23:25" pos:end="23:25">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="27:5" pos:end="63:5"><if pos:start="27:5" pos:end="63:5">if <condition pos:start="27:8" pos:end="27:32">(<expr pos:start="27:9" pos:end="27:31"><name pos:start="27:9" pos:end="27:16"><name pos:start="27:9" pos:end="27:11">ctx</name><operator pos:start="27:12" pos:end="27:13">-&gt;</operator><name pos:start="27:14" pos:end="27:16">bsf</name></name> <operator pos:start="27:18" pos:end="27:19">&amp;&amp;</operator> <name pos:start="27:21" pos:end="27:31"><name pos:start="27:21" pos:end="27:25">avpkt</name><operator pos:start="27:26" pos:end="27:27">-&gt;</operator><name pos:start="27:28" pos:end="27:31">size</name></name></expr>)</condition> <block pos:start="27:34" pos:end="63:5">{<block_content pos:start="29:9" pos:end="61:33">

        <if_stmt pos:start="29:9" pos:end="35:9"><if pos:start="29:9" pos:end="35:9">if <condition pos:start="29:12" pos:end="29:61">(<expr pos:start="29:13" pos:end="29:60"><operator pos:start="29:13" pos:end="29:13">(</operator><name pos:start="29:14" pos:end="29:16">ret</name> <operator pos:start="29:18" pos:end="29:18">=</operator> <call pos:start="29:20" pos:end="29:55"><name pos:start="29:20" pos:end="29:32">av_packet_ref</name><argument_list pos:start="29:33" pos:end="29:55">(<argument pos:start="29:34" pos:end="29:47"><expr pos:start="29:34" pos:end="29:47"><operator pos:start="29:34" pos:end="29:34">&amp;</operator><name pos:start="29:35" pos:end="29:47">filter_packet</name></expr></argument>, <argument pos:start="29:50" pos:end="29:54"><expr pos:start="29:50" pos:end="29:54"><name pos:start="29:50" pos:end="29:54">avpkt</name></expr></argument>)</argument_list></call><operator pos:start="29:56" pos:end="29:56">)</operator> <operator pos:start="29:58" pos:end="29:58">&lt;</operator> <literal type="number" pos:start="29:60" pos:end="29:60">0</literal></expr>)</condition> <block pos:start="29:63" pos:end="35:9">{<block_content pos:start="31:13" pos:end="33:23">

            <expr_stmt pos:start="31:13" pos:end="31:66"><expr pos:start="31:13" pos:end="31:65"><call pos:start="31:13" pos:end="31:65"><name pos:start="31:13" pos:end="31:18">av_log</name><argument_list pos:start="31:19" pos:end="31:65">(<argument pos:start="31:20" pos:end="31:24"><expr pos:start="31:20" pos:end="31:24"><name pos:start="31:20" pos:end="31:24">avctx</name></expr></argument>, <argument pos:start="31:27" pos:end="31:38"><expr pos:start="31:27" pos:end="31:38"><name pos:start="31:27" pos:end="31:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="31:41" pos:end="31:64"><expr pos:start="31:41" pos:end="31:64"><literal type="string" pos:start="31:41" pos:end="31:64">"av_packet_ref failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="33:13" pos:end="33:23">return <expr pos:start="33:20" pos:end="33:22"><name pos:start="33:20" pos:end="33:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="39:9" pos:end="47:9"><if pos:start="39:9" pos:end="47:9">if <condition pos:start="39:12" pos:end="39:69">(<expr pos:start="39:13" pos:end="39:68"><operator pos:start="39:13" pos:end="39:13">(</operator><name pos:start="39:14" pos:end="39:16">ret</name> <operator pos:start="39:18" pos:end="39:18">=</operator> <call pos:start="39:20" pos:end="39:63"><name pos:start="39:20" pos:end="39:37">av_bsf_send_packet</name><argument_list pos:start="39:38" pos:end="39:63">(<argument pos:start="39:39" pos:end="39:46"><expr pos:start="39:39" pos:end="39:46"><name pos:start="39:39" pos:end="39:46"><name pos:start="39:39" pos:end="39:41">ctx</name><operator pos:start="39:42" pos:end="39:43">-&gt;</operator><name pos:start="39:44" pos:end="39:46">bsf</name></name></expr></argument>, <argument pos:start="39:49" pos:end="39:62"><expr pos:start="39:49" pos:end="39:62"><operator pos:start="39:49" pos:end="39:49">&amp;</operator><name pos:start="39:50" pos:end="39:62">filter_packet</name></expr></argument>)</argument_list></call><operator pos:start="39:64" pos:end="39:64">)</operator> <operator pos:start="39:66" pos:end="39:66">&lt;</operator> <literal type="number" pos:start="39:68" pos:end="39:68">0</literal></expr>)</condition> <block pos:start="39:71" pos:end="47:9">{<block_content pos:start="41:13" pos:end="45:23">

            <expr_stmt pos:start="41:13" pos:end="41:71"><expr pos:start="41:13" pos:end="41:70"><call pos:start="41:13" pos:end="41:70"><name pos:start="41:13" pos:end="41:18">av_log</name><argument_list pos:start="41:19" pos:end="41:70">(<argument pos:start="41:20" pos:end="41:24"><expr pos:start="41:20" pos:end="41:24"><name pos:start="41:20" pos:end="41:24">avctx</name></expr></argument>, <argument pos:start="41:27" pos:end="41:38"><expr pos:start="41:27" pos:end="41:38"><name pos:start="41:27" pos:end="41:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="41:41" pos:end="41:69"><expr pos:start="41:41" pos:end="41:69"><literal type="string" pos:start="41:41" pos:end="41:69">"av_bsf_send_packet failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:44"><expr pos:start="43:13" pos:end="43:43"><call pos:start="43:13" pos:end="43:43"><name pos:start="43:13" pos:end="43:27">av_packet_unref</name><argument_list pos:start="43:28" pos:end="43:43">(<argument pos:start="43:29" pos:end="43:42"><expr pos:start="43:29" pos:end="43:42"><operator pos:start="43:29" pos:end="43:29">&amp;</operator><name pos:start="43:30" pos:end="43:42">filter_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="45:13" pos:end="45:23">return <expr pos:start="45:20" pos:end="45:22"><name pos:start="45:20" pos:end="45:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="51:9" pos:end="57:9"><if pos:start="51:9" pos:end="57:9">if <condition pos:start="51:12" pos:end="51:74">(<expr pos:start="51:13" pos:end="51:73"><operator pos:start="51:13" pos:end="51:13">(</operator><name pos:start="51:14" pos:end="51:16">ret</name> <operator pos:start="51:18" pos:end="51:18">=</operator> <call pos:start="51:20" pos:end="51:68"><name pos:start="51:20" pos:end="51:40">av_bsf_receive_packet</name><argument_list pos:start="51:41" pos:end="51:68">(<argument pos:start="51:42" pos:end="51:49"><expr pos:start="51:42" pos:end="51:49"><name pos:start="51:42" pos:end="51:49"><name pos:start="51:42" pos:end="51:44">ctx</name><operator pos:start="51:45" pos:end="51:46">-&gt;</operator><name pos:start="51:47" pos:end="51:49">bsf</name></name></expr></argument>, <argument pos:start="51:52" pos:end="51:67"><expr pos:start="51:52" pos:end="51:67"><operator pos:start="51:52" pos:end="51:52">&amp;</operator><name pos:start="51:53" pos:end="51:67">filtered_packet</name></expr></argument>)</argument_list></call><operator pos:start="51:69" pos:end="51:69">)</operator> <operator pos:start="51:71" pos:end="51:71">&lt;</operator> <literal type="number" pos:start="51:73" pos:end="51:73">0</literal></expr>)</condition> <block pos:start="51:76" pos:end="57:9">{<block_content pos:start="53:13" pos:end="55:23">

            <expr_stmt pos:start="53:13" pos:end="53:74"><expr pos:start="53:13" pos:end="53:73"><call pos:start="53:13" pos:end="53:73"><name pos:start="53:13" pos:end="53:18">av_log</name><argument_list pos:start="53:19" pos:end="53:73">(<argument pos:start="53:20" pos:end="53:24"><expr pos:start="53:20" pos:end="53:24"><name pos:start="53:20" pos:end="53:24">avctx</name></expr></argument>, <argument pos:start="53:27" pos:end="53:38"><expr pos:start="53:27" pos:end="53:38"><name pos:start="53:27" pos:end="53:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="53:41" pos:end="53:72"><expr pos:start="53:41" pos:end="53:72"><literal type="string" pos:start="53:41" pos:end="53:72">"av_bsf_receive_packet failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="55:13" pos:end="55:23">return <expr pos:start="55:20" pos:end="55:22"><name pos:start="55:20" pos:end="55:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="61:9" pos:end="61:33"><expr pos:start="61:9" pos:end="61:32"><name pos:start="61:9" pos:end="61:13">avpkt</name> <operator pos:start="61:15" pos:end="61:15">=</operator> <operator pos:start="61:17" pos:end="61:17">&amp;</operator><name pos:start="61:18" pos:end="61:32">filtered_packet</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:47"><expr pos:start="67:5" pos:end="67:46"><name pos:start="67:5" pos:end="67:7">ret</name> <operator pos:start="67:9" pos:end="67:9">=</operator> <call pos:start="67:11" pos:end="67:46"><name pos:start="67:11" pos:end="67:18">CHECK_CU</name><argument_list pos:start="67:19" pos:end="67:46">(<argument pos:start="67:20" pos:end="67:45"><expr pos:start="67:20" pos:end="67:45"><call pos:start="67:20" pos:end="67:45"><name pos:start="67:20" pos:end="67:35">cuCtxPushCurrent</name><argument_list pos:start="67:36" pos:end="67:45">(<argument pos:start="67:37" pos:end="67:44"><expr pos:start="67:37" pos:end="67:44"><name pos:start="67:37" pos:end="67:44">cuda_ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="69:5" pos:end="75:5"><if pos:start="69:5" pos:end="75:5">if <condition pos:start="69:8" pos:end="69:16">(<expr pos:start="69:9" pos:end="69:15"><name pos:start="69:9" pos:end="69:11">ret</name> <operator pos:start="69:13" pos:end="69:13">&lt;</operator> <literal type="number" pos:start="69:15" pos:end="69:15">0</literal></expr>)</condition> <block pos:start="69:18" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:19">

        <expr_stmt pos:start="71:9" pos:end="71:42"><expr pos:start="71:9" pos:end="71:41"><call pos:start="71:9" pos:end="71:41"><name pos:start="71:9" pos:end="71:23">av_packet_unref</name><argument_list pos:start="71:24" pos:end="71:41">(<argument pos:start="71:25" pos:end="71:40"><expr pos:start="71:25" pos:end="71:40"><operator pos:start="71:25" pos:end="71:25">&amp;</operator><name pos:start="71:26" pos:end="71:40">filtered_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="73:9" pos:end="73:19">return <expr pos:start="73:16" pos:end="73:18"><name pos:start="73:16" pos:end="73:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:37"><expr pos:start="79:5" pos:end="79:36"><call pos:start="79:5" pos:end="79:36"><name pos:start="79:5" pos:end="79:10">memset</name><argument_list pos:start="79:11" pos:end="79:36">(<argument pos:start="79:12" pos:end="79:17"><expr pos:start="79:12" pos:end="79:17"><operator pos:start="79:12" pos:end="79:12">&amp;</operator><name pos:start="79:13" pos:end="79:17">cupkt</name></expr></argument>, <argument pos:start="79:20" pos:end="79:20"><expr pos:start="79:20" pos:end="79:20"><literal type="number" pos:start="79:20" pos:end="79:20">0</literal></expr></argument>, <argument pos:start="79:23" pos:end="79:35"><expr pos:start="79:23" pos:end="79:35"><sizeof pos:start="79:23" pos:end="79:35">sizeof<argument_list pos:start="79:29" pos:end="79:35">(<argument pos:start="79:30" pos:end="79:34"><expr pos:start="79:30" pos:end="79:34"><name pos:start="79:30" pos:end="79:34">cupkt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="83:5" pos:end="103:5"><if pos:start="83:5" pos:end="99:5">if <condition pos:start="83:8" pos:end="83:20">(<expr pos:start="83:9" pos:end="83:19"><name pos:start="83:9" pos:end="83:19"><name pos:start="83:9" pos:end="83:13">avpkt</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:19">size</name></name></expr>)</condition> <block pos:start="83:22" pos:end="99:5">{<block_content pos:start="85:9" pos:end="97:9">

        <expr_stmt pos:start="85:9" pos:end="85:41"><expr pos:start="85:9" pos:end="85:40"><name pos:start="85:9" pos:end="85:26"><name pos:start="85:9" pos:end="85:13">cupkt</name><operator pos:start="85:14" pos:end="85:14">.</operator><name pos:start="85:15" pos:end="85:26">payload_size</name></name> <operator pos:start="85:28" pos:end="85:28">=</operator> <name pos:start="85:30" pos:end="85:40"><name pos:start="85:30" pos:end="85:34">avpkt</name><operator pos:start="85:35" pos:end="85:36">-&gt;</operator><name pos:start="85:37" pos:end="85:40">size</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:36"><expr pos:start="87:9" pos:end="87:35"><name pos:start="87:9" pos:end="87:21"><name pos:start="87:9" pos:end="87:13">cupkt</name><operator pos:start="87:14" pos:end="87:14">.</operator><name pos:start="87:15" pos:end="87:21">payload</name></name> <operator pos:start="87:23" pos:end="87:23">=</operator> <name pos:start="87:25" pos:end="87:35"><name pos:start="87:25" pos:end="87:29">avpkt</name><operator pos:start="87:30" pos:end="87:31">-&gt;</operator><name pos:start="87:32" pos:end="87:35">data</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="91:9" pos:end="97:9"><if pos:start="91:9" pos:end="97:9">if <condition pos:start="91:12" pos:end="91:41">(<expr pos:start="91:13" pos:end="91:40"><name pos:start="91:13" pos:end="91:22"><name pos:start="91:13" pos:end="91:17">avpkt</name><operator pos:start="91:18" pos:end="91:19">-&gt;</operator><name pos:start="91:20" pos:end="91:22">pts</name></name> <operator pos:start="91:24" pos:end="91:25">!=</operator> <name pos:start="91:27" pos:end="91:40">AV_NOPTS_VALUE</name></expr>)</condition> <block pos:start="91:43" pos:end="97:9">{<block_content pos:start="93:13" pos:end="95:103">

            <expr_stmt pos:start="93:13" pos:end="93:46"><expr pos:start="93:13" pos:end="93:45"><name pos:start="93:13" pos:end="93:23"><name pos:start="93:13" pos:end="93:17">cupkt</name><operator pos:start="93:18" pos:end="93:18">.</operator><name pos:start="93:19" pos:end="93:23">flags</name></name> <operator pos:start="93:25" pos:end="93:25">=</operator> <name pos:start="93:27" pos:end="93:45">CUVID_PKT_TIMESTAMP</name></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:103"><expr pos:start="95:13" pos:end="95:102"><name pos:start="95:13" pos:end="95:27"><name pos:start="95:13" pos:end="95:17">cupkt</name><operator pos:start="95:18" pos:end="95:18">.</operator><name pos:start="95:19" pos:end="95:27">timestamp</name></name> <operator pos:start="95:29" pos:end="95:29">=</operator> <macro pos:start="95:31" pos:end="95:102"><name pos:start="95:31" pos:end="95:42">av_rescale_q</name><argument_list pos:start="95:43" pos:end="95:102">(<argument pos:start="95:44" pos:end="95:53">avpkt-&gt;pts</argument>, <argument pos:start="95:56" pos:end="95:74">avctx-&gt;pkt_timebase</argument>, <argument pos:start="95:77" pos:end="95:90">(AVRational){<literal type="number" pos:start="95:90" pos:end="95:90">1</literal></argument>, <argument pos:start="95:93" pos:end="95:101"><literal type="number" pos:start="95:93" pos:end="95:100">10000000</literal>}</argument>)</argument_list></macro></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="99:7" pos:end="103:5">else <block pos:start="99:12" pos:end="103:5">{<block_content pos:start="101:9" pos:end="101:44">

        <expr_stmt pos:start="101:9" pos:end="101:44"><expr pos:start="101:9" pos:end="101:43"><name pos:start="101:9" pos:end="101:19"><name pos:start="101:9" pos:end="101:13">cupkt</name><operator pos:start="101:14" pos:end="101:14">.</operator><name pos:start="101:15" pos:end="101:19">flags</name></name> <operator pos:start="101:21" pos:end="101:21">=</operator> <name pos:start="101:23" pos:end="101:43">CUVID_PKT_ENDOFSTREAM</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="107:5" pos:end="107:63"><expr pos:start="107:5" pos:end="107:62"><name pos:start="107:5" pos:end="107:7">ret</name> <operator pos:start="107:9" pos:end="107:9">=</operator> <call pos:start="107:11" pos:end="107:62"><name pos:start="107:11" pos:end="107:18">CHECK_CU</name><argument_list pos:start="107:19" pos:end="107:62">(<argument pos:start="107:20" pos:end="107:61"><expr pos:start="107:20" pos:end="107:61"><call pos:start="107:20" pos:end="107:61"><name pos:start="107:20" pos:end="107:38">cuvidParseVideoData</name><argument_list pos:start="107:39" pos:end="107:61">(<argument pos:start="107:40" pos:end="107:52"><expr pos:start="107:40" pos:end="107:52"><name pos:start="107:40" pos:end="107:52"><name pos:start="107:40" pos:end="107:42">ctx</name><operator pos:start="107:43" pos:end="107:44">-&gt;</operator><name pos:start="107:45" pos:end="107:52">cuparser</name></name></expr></argument>, <argument pos:start="107:55" pos:end="107:60"><expr pos:start="107:55" pos:end="107:60"><operator pos:start="107:55" pos:end="107:55">&amp;</operator><name pos:start="107:56" pos:end="107:60">cupkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:38"><expr pos:start="111:5" pos:end="111:37"><call pos:start="111:5" pos:end="111:37"><name pos:start="111:5" pos:end="111:19">av_packet_unref</name><argument_list pos:start="111:20" pos:end="111:37">(<argument pos:start="111:21" pos:end="111:36"><expr pos:start="111:21" pos:end="111:36"><operator pos:start="111:21" pos:end="111:21">&amp;</operator><name pos:start="111:22" pos:end="111:36">filtered_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="115:5" pos:end="123:5"><if pos:start="115:5" pos:end="123:5">if <condition pos:start="115:8" pos:end="115:16">(<expr pos:start="115:9" pos:end="115:15"><name pos:start="115:9" pos:end="115:11">ret</name> <operator pos:start="115:13" pos:end="115:13">&lt;</operator> <literal type="number" pos:start="115:15" pos:end="115:15">0</literal></expr>)</condition> <block pos:start="115:18" pos:end="123:5">{<block_content pos:start="117:9" pos:end="121:19">

        <if_stmt pos:start="117:9" pos:end="119:38"><if pos:start="117:9" pos:end="119:38">if <condition pos:start="117:12" pos:end="117:32">(<expr pos:start="117:13" pos:end="117:31"><name pos:start="117:13" pos:end="117:31"><name pos:start="117:13" pos:end="117:15">ctx</name><operator pos:start="117:16" pos:end="117:17">-&gt;</operator><name pos:start="117:18" pos:end="117:31">internal_error</name></name></expr>)</condition><block type="pseudo" pos:start="119:13" pos:end="119:38"><block_content pos:start="119:13" pos:end="119:38">

            <expr_stmt pos:start="119:13" pos:end="119:38"><expr pos:start="119:13" pos:end="119:37"><name pos:start="119:13" pos:end="119:15">ret</name> <operator pos:start="119:17" pos:end="119:17">=</operator> <name pos:start="119:19" pos:end="119:37"><name pos:start="119:19" pos:end="119:21">ctx</name><operator pos:start="119:22" pos:end="119:23">-&gt;</operator><name pos:start="119:24" pos:end="119:37">internal_error</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <goto pos:start="121:9" pos:end="121:19">goto <name pos:start="121:14" pos:end="121:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="127:5" pos:end="341:5"><if pos:start="127:5" pos:end="337:5">if <condition pos:start="127:8" pos:end="127:39">(<expr pos:start="127:9" pos:end="127:38"><call pos:start="127:9" pos:end="127:38"><name pos:start="127:9" pos:end="127:20">av_fifo_size</name><argument_list pos:start="127:21" pos:end="127:38">(<argument pos:start="127:22" pos:end="127:37"><expr pos:start="127:22" pos:end="127:37"><name pos:start="127:22" pos:end="127:37"><name pos:start="127:22" pos:end="127:24">ctx</name><operator pos:start="127:25" pos:end="127:26">-&gt;</operator><name pos:start="127:27" pos:end="127:37">frame_queue</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="127:41" pos:end="337:5">{<block_content pos:start="129:9" pos:end="335:23">

        <decl_stmt pos:start="129:9" pos:end="129:37"><decl pos:start="129:9" pos:end="129:36"><type pos:start="129:9" pos:end="129:27"><name pos:start="129:9" pos:end="129:27">CUVIDPARSERDISPINFO</name></type> <name pos:start="129:29" pos:end="129:36">dispinfo</name></decl>;</decl_stmt>

        <decl_stmt pos:start="131:9" pos:end="131:31"><decl pos:start="131:9" pos:end="131:30"><type pos:start="131:9" pos:end="131:23"><name pos:start="131:9" pos:end="131:23">CUVIDPROCPARAMS</name></type> <name pos:start="131:25" pos:end="131:30">params</name></decl>;</decl_stmt>

        <decl_stmt pos:start="133:9" pos:end="133:31"><decl pos:start="133:9" pos:end="133:30"><type pos:start="133:9" pos:end="133:20"><name pos:start="133:9" pos:end="133:16">unsigned</name> <name pos:start="133:18" pos:end="133:20">int</name></type> <name pos:start="133:22" pos:end="133:26">pitch</name> <init pos:start="133:28" pos:end="133:30">= <expr pos:start="133:30" pos:end="133:30"><literal type="number" pos:start="133:30" pos:end="133:30">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="135:9" pos:end="135:23"><decl pos:start="135:9" pos:end="135:22"><type pos:start="135:9" pos:end="135:11"><name pos:start="135:9" pos:end="135:11">int</name></type> <name pos:start="135:13" pos:end="135:18">offset</name> <init pos:start="135:20" pos:end="135:22">= <expr pos:start="135:22" pos:end="135:22"><literal type="number" pos:start="135:22" pos:end="135:22">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="137:9" pos:end="137:14"><decl pos:start="137:9" pos:end="137:13"><type pos:start="137:9" pos:end="137:11"><name pos:start="137:9" pos:end="137:11">int</name></type> <name pos:start="137:13" pos:end="137:13">i</name></decl>;</decl_stmt>



        <expr_stmt pos:start="141:9" pos:end="141:93"><expr pos:start="141:9" pos:end="141:92"><call pos:start="141:9" pos:end="141:92"><name pos:start="141:9" pos:end="141:28">av_fifo_generic_read</name><argument_list pos:start="141:29" pos:end="141:92">(<argument pos:start="141:30" pos:end="141:45"><expr pos:start="141:30" pos:end="141:45"><name pos:start="141:30" pos:end="141:45"><name pos:start="141:30" pos:end="141:32">ctx</name><operator pos:start="141:33" pos:end="141:34">-&gt;</operator><name pos:start="141:35" pos:end="141:45">frame_queue</name></name></expr></argument>, <argument pos:start="141:48" pos:end="141:56"><expr pos:start="141:48" pos:end="141:56"><operator pos:start="141:48" pos:end="141:48">&amp;</operator><name pos:start="141:49" pos:end="141:56">dispinfo</name></expr></argument>, <argument pos:start="141:59" pos:end="141:85"><expr pos:start="141:59" pos:end="141:85"><sizeof pos:start="141:59" pos:end="141:85">sizeof<argument_list pos:start="141:65" pos:end="141:85">(<argument pos:start="141:66" pos:end="141:84"><expr pos:start="141:66" pos:end="141:84"><name pos:start="141:66" pos:end="141:84">CUVIDPARSERDISPINFO</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="141:88" pos:end="141:91"><expr pos:start="141:88" pos:end="141:91"><name pos:start="141:88" pos:end="141:91">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="145:9" pos:end="145:43"><expr pos:start="145:9" pos:end="145:42"><call pos:start="145:9" pos:end="145:42"><name pos:start="145:9" pos:end="145:14">memset</name><argument_list pos:start="145:15" pos:end="145:42">(<argument pos:start="145:16" pos:end="145:22"><expr pos:start="145:16" pos:end="145:22"><operator pos:start="145:16" pos:end="145:16">&amp;</operator><name pos:start="145:17" pos:end="145:22">params</name></expr></argument>, <argument pos:start="145:25" pos:end="145:25"><expr pos:start="145:25" pos:end="145:25"><literal type="number" pos:start="145:25" pos:end="145:25">0</literal></expr></argument>, <argument pos:start="145:28" pos:end="145:41"><expr pos:start="145:28" pos:end="145:41"><sizeof pos:start="145:28" pos:end="145:41">sizeof<argument_list pos:start="145:34" pos:end="145:41">(<argument pos:start="145:35" pos:end="145:40"><expr pos:start="145:35" pos:end="145:40"><name pos:start="145:35" pos:end="145:40">params</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:62"><expr pos:start="147:9" pos:end="147:61"><name pos:start="147:9" pos:end="147:32"><name pos:start="147:9" pos:end="147:14">params</name><operator pos:start="147:15" pos:end="147:15">.</operator><name pos:start="147:16" pos:end="147:32">progressive_frame</name></name> <operator pos:start="147:34" pos:end="147:34">=</operator> <name pos:start="147:36" pos:end="147:61"><name pos:start="147:36" pos:end="147:43">dispinfo</name><operator pos:start="147:44" pos:end="147:44">.</operator><name pos:start="147:45" pos:end="147:61">progressive_frame</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:32"><expr pos:start="149:9" pos:end="149:31"><name pos:start="149:9" pos:end="149:27"><name pos:start="149:9" pos:end="149:14">params</name><operator pos:start="149:15" pos:end="149:15">.</operator><name pos:start="149:16" pos:end="149:27">second_field</name></name> <operator pos:start="149:29" pos:end="149:29">=</operator> <literal type="number" pos:start="149:31" pos:end="149:31">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:58"><expr pos:start="151:9" pos:end="151:57"><name pos:start="151:9" pos:end="151:30"><name pos:start="151:9" pos:end="151:14">params</name><operator pos:start="151:15" pos:end="151:15">.</operator><name pos:start="151:16" pos:end="151:30">top_field_first</name></name> <operator pos:start="151:32" pos:end="151:32">=</operator> <name pos:start="151:34" pos:end="151:57"><name pos:start="151:34" pos:end="151:41">dispinfo</name><operator pos:start="151:42" pos:end="151:42">.</operator><name pos:start="151:43" pos:end="151:57">top_field_first</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="155:9" pos:end="155:115"><expr pos:start="155:9" pos:end="155:114"><name pos:start="155:9" pos:end="155:11">ret</name> <operator pos:start="155:13" pos:end="155:13">=</operator> <call pos:start="155:15" pos:end="155:114"><name pos:start="155:15" pos:end="155:22">CHECK_CU</name><argument_list pos:start="155:23" pos:end="155:114">(<argument pos:start="155:24" pos:end="155:113"><expr pos:start="155:24" pos:end="155:113"><call pos:start="155:24" pos:end="155:113"><name pos:start="155:24" pos:end="155:41">cuvidMapVideoFrame</name><argument_list pos:start="155:42" pos:end="155:113">(<argument pos:start="155:43" pos:end="155:56"><expr pos:start="155:43" pos:end="155:56"><name pos:start="155:43" pos:end="155:56"><name pos:start="155:43" pos:end="155:45">ctx</name><operator pos:start="155:46" pos:end="155:47">-&gt;</operator><name pos:start="155:48" pos:end="155:56">cudecoder</name></name></expr></argument>, <argument pos:start="155:59" pos:end="155:80"><expr pos:start="155:59" pos:end="155:80"><name pos:start="155:59" pos:end="155:80"><name pos:start="155:59" pos:end="155:66">dispinfo</name><operator pos:start="155:67" pos:end="155:67">.</operator><name pos:start="155:68" pos:end="155:80">picture_index</name></name></expr></argument>, <argument pos:start="155:83" pos:end="155:95"><expr pos:start="155:83" pos:end="155:95"><operator pos:start="155:83" pos:end="155:83">&amp;</operator><name pos:start="155:84" pos:end="155:95">mapped_frame</name></expr></argument>, <argument pos:start="155:98" pos:end="155:103"><expr pos:start="155:98" pos:end="155:103"><operator pos:start="155:98" pos:end="155:98">&amp;</operator><name pos:start="155:99" pos:end="155:103">pitch</name></expr></argument>, <argument pos:start="155:106" pos:end="155:112"><expr pos:start="155:106" pos:end="155:112"><operator pos:start="155:106" pos:end="155:106">&amp;</operator><name pos:start="155:107" pos:end="155:112">params</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="157:9" pos:end="159:23"><if pos:start="157:9" pos:end="159:23">if <condition pos:start="157:12" pos:end="157:20">(<expr pos:start="157:13" pos:end="157:19"><name pos:start="157:13" pos:end="157:15">ret</name> <operator pos:start="157:17" pos:end="157:17">&lt;</operator> <literal type="number" pos:start="157:19" pos:end="157:19">0</literal></expr>)</condition><block type="pseudo" pos:start="159:13" pos:end="159:23"><block_content pos:start="159:13" pos:end="159:23">

            <goto pos:start="159:13" pos:end="159:23">goto <name pos:start="159:18" pos:end="159:22">error</name>;</goto></block_content></block></if></if_stmt>



        <if_stmt pos:start="163:9" pos:end="297:9"><if pos:start="163:9" pos:end="227:9">if <condition pos:start="163:12" pos:end="163:46">(<expr pos:start="163:13" pos:end="163:45"><name pos:start="163:13" pos:end="163:26"><name pos:start="163:13" pos:end="163:17">avctx</name><operator pos:start="163:18" pos:end="163:19">-&gt;</operator><name pos:start="163:20" pos:end="163:26">pix_fmt</name></name> <operator pos:start="163:28" pos:end="163:29">==</operator> <name pos:start="163:31" pos:end="163:45">AV_PIX_FMT_CUDA</name></expr>)</condition> <block pos:start="163:48" pos:end="227:9">{<block_content pos:start="165:13" pos:end="225:13">

            <expr_stmt pos:start="165:13" pos:end="165:64"><expr pos:start="165:13" pos:end="165:63"><name pos:start="165:13" pos:end="165:15">ret</name> <operator pos:start="165:17" pos:end="165:17">=</operator> <call pos:start="165:19" pos:end="165:63"><name pos:start="165:19" pos:end="165:39">av_hwframe_get_buffer</name><argument_list pos:start="165:40" pos:end="165:63">(<argument pos:start="165:41" pos:end="165:52"><expr pos:start="165:41" pos:end="165:52"><name pos:start="165:41" pos:end="165:52"><name pos:start="165:41" pos:end="165:43">ctx</name><operator pos:start="165:44" pos:end="165:45">-&gt;</operator><name pos:start="165:46" pos:end="165:52">hwframe</name></name></expr></argument>, <argument pos:start="165:55" pos:end="165:59"><expr pos:start="165:55" pos:end="165:59"><name pos:start="165:55" pos:end="165:59">frame</name></expr></argument>, <argument pos:start="165:62" pos:end="165:62"><expr pos:start="165:62" pos:end="165:62"><literal type="number" pos:start="165:62" pos:end="165:62">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="167:13" pos:end="173:13"><if pos:start="167:13" pos:end="173:13">if <condition pos:start="167:16" pos:end="167:24">(<expr pos:start="167:17" pos:end="167:23"><name pos:start="167:17" pos:end="167:19">ret</name> <operator pos:start="167:21" pos:end="167:21">&lt;</operator> <literal type="number" pos:start="167:23" pos:end="167:23">0</literal></expr>)</condition> <block pos:start="167:26" pos:end="173:13">{<block_content pos:start="169:17" pos:end="171:27">

                <expr_stmt pos:start="169:17" pos:end="169:78"><expr pos:start="169:17" pos:end="169:77"><call pos:start="169:17" pos:end="169:77"><name pos:start="169:17" pos:end="169:22">av_log</name><argument_list pos:start="169:23" pos:end="169:77">(<argument pos:start="169:24" pos:end="169:28"><expr pos:start="169:24" pos:end="169:28"><name pos:start="169:24" pos:end="169:28">avctx</name></expr></argument>, <argument pos:start="169:31" pos:end="169:42"><expr pos:start="169:31" pos:end="169:42"><name pos:start="169:31" pos:end="169:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="169:45" pos:end="169:76"><expr pos:start="169:45" pos:end="169:76"><literal type="string" pos:start="169:45" pos:end="169:76">"av_hwframe_get_buffer failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="171:17" pos:end="171:27">goto <name pos:start="171:22" pos:end="171:26">error</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="177:13" pos:end="177:54"><expr pos:start="177:13" pos:end="177:53"><name pos:start="177:13" pos:end="177:15">ret</name> <operator pos:start="177:17" pos:end="177:17">=</operator> <call pos:start="177:19" pos:end="177:53"><name pos:start="177:19" pos:end="177:39">ff_decode_frame_props</name><argument_list pos:start="177:40" pos:end="177:53">(<argument pos:start="177:41" pos:end="177:45"><expr pos:start="177:41" pos:end="177:45"><name pos:start="177:41" pos:end="177:45">avctx</name></expr></argument>, <argument pos:start="177:48" pos:end="177:52"><expr pos:start="177:48" pos:end="177:52"><name pos:start="177:48" pos:end="177:52">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="179:13" pos:end="185:13"><if pos:start="179:13" pos:end="185:13">if <condition pos:start="179:16" pos:end="179:24">(<expr pos:start="179:17" pos:end="179:23"><name pos:start="179:17" pos:end="179:19">ret</name> <operator pos:start="179:21" pos:end="179:21">&lt;</operator> <literal type="number" pos:start="179:23" pos:end="179:23">0</literal></expr>)</condition> <block pos:start="179:26" pos:end="185:13">{<block_content pos:start="181:17" pos:end="183:27">

                <expr_stmt pos:start="181:17" pos:end="181:78"><expr pos:start="181:17" pos:end="181:77"><call pos:start="181:17" pos:end="181:77"><name pos:start="181:17" pos:end="181:22">av_log</name><argument_list pos:start="181:23" pos:end="181:77">(<argument pos:start="181:24" pos:end="181:28"><expr pos:start="181:24" pos:end="181:28"><name pos:start="181:24" pos:end="181:28">avctx</name></expr></argument>, <argument pos:start="181:31" pos:end="181:42"><expr pos:start="181:31" pos:end="181:42"><name pos:start="181:31" pos:end="181:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="181:45" pos:end="181:76"><expr pos:start="181:45" pos:end="181:76"><literal type="string" pos:start="181:45" pos:end="181:76">"ff_decode_frame_props failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="183:17" pos:end="183:27">goto <name pos:start="183:22" pos:end="183:26">error</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <for pos:start="189:13" pos:end="225:13">for <control pos:start="189:17" pos:end="189:35">(<init pos:start="189:18" pos:end="189:23"><expr pos:start="189:18" pos:end="189:22"><name pos:start="189:18" pos:end="189:18">i</name> <operator pos:start="189:20" pos:end="189:20">=</operator> <literal type="number" pos:start="189:22" pos:end="189:22">0</literal></expr>;</init> <condition pos:start="189:25" pos:end="189:30"><expr pos:start="189:25" pos:end="189:29"><name pos:start="189:25" pos:end="189:25">i</name> <operator pos:start="189:27" pos:end="189:27">&lt;</operator> <literal type="number" pos:start="189:29" pos:end="189:29">2</literal></expr>;</condition> <incr pos:start="189:32" pos:end="189:34"><expr pos:start="189:32" pos:end="189:34"><name pos:start="189:32" pos:end="189:32">i</name><operator pos:start="189:33" pos:end="189:34">++</operator></expr></incr>)</control> <block pos:start="189:37" pos:end="225:13">{<block_content pos:start="191:17" pos:end="223:46">

                <decl_stmt pos:start="191:17" pos:end="211:18"><decl pos:start="191:17" pos:end="211:17"><type pos:start="191:17" pos:end="191:29"><name pos:start="191:17" pos:end="191:29">CUDA_MEMCPY2D</name></type> <name pos:start="191:31" pos:end="191:33">cpy</name> <init pos:start="191:35" pos:end="211:17">= <expr pos:start="191:37" pos:end="211:17"><block pos:start="191:37" pos:end="211:17">{

                    <expr pos:start="193:21" pos:end="193:57"><operator pos:start="193:21" pos:end="193:21">.</operator><name pos:start="193:22" pos:end="193:34">srcMemoryType</name> <operator pos:start="193:36" pos:end="193:36">=</operator> <name pos:start="193:38" pos:end="193:57">CU_MEMORYTYPE_DEVICE</name></expr>,

                    <expr pos:start="195:21" pos:end="195:57"><operator pos:start="195:21" pos:end="195:21">.</operator><name pos:start="195:22" pos:end="195:34">dstMemoryType</name> <operator pos:start="195:36" pos:end="195:36">=</operator> <name pos:start="195:38" pos:end="195:57">CU_MEMORYTYPE_DEVICE</name></expr>,

                    <expr pos:start="197:21" pos:end="197:49"><operator pos:start="197:21" pos:end="197:21">.</operator><name pos:start="197:22" pos:end="197:30">srcDevice</name>     <operator pos:start="197:36" pos:end="197:36">=</operator> <name pos:start="197:38" pos:end="197:49">mapped_frame</name></expr>,

                    <expr pos:start="199:21" pos:end="199:64"><operator pos:start="199:21" pos:end="199:21">.</operator><name pos:start="199:22" pos:end="199:30">dstDevice</name>     <operator pos:start="199:36" pos:end="199:36">=</operator> <operator pos:start="199:38" pos:end="199:38">(</operator><name pos:start="199:39" pos:end="199:49">CUdeviceptr</name><operator pos:start="199:50" pos:end="199:50">)</operator><name pos:start="199:51" pos:end="199:64"><name pos:start="199:51" pos:end="199:55">frame</name><operator pos:start="199:56" pos:end="199:57">-&gt;</operator><name pos:start="199:58" pos:end="199:61">data</name><index pos:start="199:62" pos:end="199:64">[<expr pos:start="199:63" pos:end="199:63"><name pos:start="199:63" pos:end="199:63">i</name></expr>]</index></name></expr>,

                    <expr pos:start="201:21" pos:end="201:42"><operator pos:start="201:21" pos:end="201:21">.</operator><name pos:start="201:22" pos:end="201:29">srcPitch</name>      <operator pos:start="201:36" pos:end="201:36">=</operator> <name pos:start="201:38" pos:end="201:42">pitch</name></expr>,

                    <expr pos:start="203:21" pos:end="203:55"><operator pos:start="203:21" pos:end="203:21">.</operator><name pos:start="203:22" pos:end="203:29">dstPitch</name>      <operator pos:start="203:36" pos:end="203:36">=</operator> <name pos:start="203:38" pos:end="203:55"><name pos:start="203:38" pos:end="203:42">frame</name><operator pos:start="203:43" pos:end="203:44">-&gt;</operator><name pos:start="203:45" pos:end="203:52">linesize</name><index pos:start="203:53" pos:end="203:55">[<expr pos:start="203:54" pos:end="203:54"><name pos:start="203:54" pos:end="203:54">i</name></expr>]</index></name></expr>,

                    <expr pos:start="205:21" pos:end="205:43"><operator pos:start="205:21" pos:end="205:21">.</operator><name pos:start="205:22" pos:end="205:25">srcY</name>          <operator pos:start="205:36" pos:end="205:36">=</operator> <name pos:start="205:38" pos:end="205:43">offset</name></expr>,

                    <expr pos:start="207:21" pos:end="207:69"><operator pos:start="207:21" pos:end="207:21">.</operator><name pos:start="207:22" pos:end="207:33">WidthInBytes</name>  <operator pos:start="207:36" pos:end="207:36">=</operator> <call pos:start="207:38" pos:end="207:69"><name pos:start="207:38" pos:end="207:42">FFMIN</name><argument_list pos:start="207:43" pos:end="207:69">(<argument pos:start="207:44" pos:end="207:48"><expr pos:start="207:44" pos:end="207:48"><name pos:start="207:44" pos:end="207:48">pitch</name></expr></argument>, <argument pos:start="207:51" pos:end="207:68"><expr pos:start="207:51" pos:end="207:68"><name pos:start="207:51" pos:end="207:68"><name pos:start="207:51" pos:end="207:55">frame</name><operator pos:start="207:56" pos:end="207:57">-&gt;</operator><name pos:start="207:58" pos:end="207:65">linesize</name><index pos:start="207:66" pos:end="207:68">[<expr pos:start="207:67" pos:end="207:67"><name pos:start="207:67" pos:end="207:67">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>,

                    <expr pos:start="209:21" pos:end="209:71"><operator pos:start="209:21" pos:end="209:21">.</operator><name pos:start="209:22" pos:end="209:27">Height</name>        <operator pos:start="209:36" pos:end="209:36">=</operator> <name pos:start="209:38" pos:end="209:56"><name pos:start="209:38" pos:end="209:42">avctx</name><operator pos:start="209:43" pos:end="209:44">-&gt;</operator><name pos:start="209:45" pos:end="209:56">coded_height</name></name> <operator pos:start="209:58" pos:end="209:59">&gt;&gt;</operator> <operator pos:start="209:61" pos:end="209:61">(</operator><name pos:start="209:62" pos:end="209:62">i</name> <operator pos:start="209:64" pos:end="209:64">?</operator> <literal type="number" pos:start="209:66" pos:end="209:66">1</literal> <operator pos:start="209:68" pos:end="209:68">:</operator> <literal type="number" pos:start="209:70" pos:end="209:70">0</literal><operator pos:start="209:71" pos:end="209:71">)</operator></expr>,

                }</block></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="215:17" pos:end="215:49"><expr pos:start="215:17" pos:end="215:48"><name pos:start="215:17" pos:end="215:19">ret</name> <operator pos:start="215:21" pos:end="215:21">=</operator> <call pos:start="215:23" pos:end="215:48"><name pos:start="215:23" pos:end="215:30">CHECK_CU</name><argument_list pos:start="215:31" pos:end="215:48">(<argument pos:start="215:32" pos:end="215:47"><expr pos:start="215:32" pos:end="215:47"><call pos:start="215:32" pos:end="215:47"><name pos:start="215:32" pos:end="215:41">cuMemcpy2D</name><argument_list pos:start="215:42" pos:end="215:47">(<argument pos:start="215:43" pos:end="215:46"><expr pos:start="215:43" pos:end="215:46"><operator pos:start="215:43" pos:end="215:43">&amp;</operator><name pos:start="215:44" pos:end="215:46">cpy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="217:17" pos:end="219:31"><if pos:start="217:17" pos:end="219:31">if <condition pos:start="217:20" pos:end="217:28">(<expr pos:start="217:21" pos:end="217:27"><name pos:start="217:21" pos:end="217:23">ret</name> <operator pos:start="217:25" pos:end="217:25">&lt;</operator> <literal type="number" pos:start="217:27" pos:end="217:27">0</literal></expr>)</condition><block type="pseudo" pos:start="219:21" pos:end="219:31"><block_content pos:start="219:21" pos:end="219:31">

                    <goto pos:start="219:21" pos:end="219:31">goto <name pos:start="219:26" pos:end="219:30">error</name>;</goto></block_content></block></if></if_stmt>



                <expr_stmt pos:start="223:17" pos:end="223:46"><expr pos:start="223:17" pos:end="223:45"><name pos:start="223:17" pos:end="223:22">offset</name> <operator pos:start="223:24" pos:end="223:25">+=</operator> <name pos:start="223:27" pos:end="223:45"><name pos:start="223:27" pos:end="223:31">avctx</name><operator pos:start="223:32" pos:end="223:33">-&gt;</operator><name pos:start="223:34" pos:end="223:45">coded_height</name></name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <if type="elseif" pos:start="227:11" pos:end="291:9">else if <condition pos:start="227:19" pos:end="227:53">(<expr pos:start="227:20" pos:end="227:52"><name pos:start="227:20" pos:end="227:33"><name pos:start="227:20" pos:end="227:24">avctx</name><operator pos:start="227:25" pos:end="227:26">-&gt;</operator><name pos:start="227:27" pos:end="227:33">pix_fmt</name></name> <operator pos:start="227:35" pos:end="227:36">==</operator> <name pos:start="227:38" pos:end="227:52">AV_PIX_FMT_NV12</name></expr>)</condition> <block pos:start="227:55" pos:end="291:9">{<block_content pos:start="229:13" pos:end="289:38">

            <decl_stmt pos:start="229:13" pos:end="229:50"><decl pos:start="229:13" pos:end="229:49"><type pos:start="229:13" pos:end="229:21"><name pos:start="229:13" pos:end="229:19">AVFrame</name> <modifier pos:start="229:21" pos:end="229:21">*</modifier></type><name pos:start="229:22" pos:end="229:30">tmp_frame</name> <init pos:start="229:32" pos:end="229:49">= <expr pos:start="229:34" pos:end="229:49"><call pos:start="229:34" pos:end="229:49"><name pos:start="229:34" pos:end="229:47">av_frame_alloc</name><argument_list pos:start="229:48" pos:end="229:49">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="231:13" pos:end="239:13"><if pos:start="231:13" pos:end="239:13">if <condition pos:start="231:16" pos:end="231:27">(<expr pos:start="231:17" pos:end="231:26"><operator pos:start="231:17" pos:end="231:17">!</operator><name pos:start="231:18" pos:end="231:26">tmp_frame</name></expr>)</condition> <block pos:start="231:29" pos:end="239:13">{<block_content pos:start="233:17" pos:end="237:27">

                <expr_stmt pos:start="233:17" pos:end="233:71"><expr pos:start="233:17" pos:end="233:70"><call pos:start="233:17" pos:end="233:70"><name pos:start="233:17" pos:end="233:22">av_log</name><argument_list pos:start="233:23" pos:end="233:70">(<argument pos:start="233:24" pos:end="233:28"><expr pos:start="233:24" pos:end="233:28"><name pos:start="233:24" pos:end="233:28">avctx</name></expr></argument>, <argument pos:start="233:31" pos:end="233:42"><expr pos:start="233:31" pos:end="233:42"><name pos:start="233:31" pos:end="233:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="233:45" pos:end="233:69"><expr pos:start="233:45" pos:end="233:69"><literal type="string" pos:start="233:45" pos:end="233:69">"av_frame_alloc failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="235:17" pos:end="235:38"><expr pos:start="235:17" pos:end="235:37"><name pos:start="235:17" pos:end="235:19">ret</name> <operator pos:start="235:21" pos:end="235:21">=</operator> <call pos:start="235:23" pos:end="235:37"><name pos:start="235:23" pos:end="235:29">AVERROR</name><argument_list pos:start="235:30" pos:end="235:37">(<argument pos:start="235:31" pos:end="235:36"><expr pos:start="235:31" pos:end="235:36"><name pos:start="235:31" pos:end="235:36">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="237:17" pos:end="237:27">goto <name pos:start="237:22" pos:end="237:26">error</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="243:13" pos:end="243:55"><expr pos:start="243:13" pos:end="243:54"><name pos:start="243:13" pos:end="243:29"><name pos:start="243:13" pos:end="243:21">tmp_frame</name><operator pos:start="243:22" pos:end="243:23">-&gt;</operator><name pos:start="243:24" pos:end="243:29">format</name></name>        <operator pos:start="243:38" pos:end="243:38">=</operator> <name pos:start="243:40" pos:end="243:54">AV_PIX_FMT_CUDA</name></expr>;</expr_stmt>

            <expr_stmt pos:start="245:13" pos:end="245:67"><expr pos:start="245:13" pos:end="245:66"><name pos:start="245:13" pos:end="245:36"><name pos:start="245:13" pos:end="245:21">tmp_frame</name><operator pos:start="245:22" pos:end="245:23">-&gt;</operator><name pos:start="245:24" pos:end="245:36">hw_frames_ctx</name></name> <operator pos:start="245:38" pos:end="245:38">=</operator> <call pos:start="245:40" pos:end="245:66"><name pos:start="245:40" pos:end="245:52">av_buffer_ref</name><argument_list pos:start="245:53" pos:end="245:66">(<argument pos:start="245:54" pos:end="245:65"><expr pos:start="245:54" pos:end="245:65"><name pos:start="245:54" pos:end="245:65"><name pos:start="245:54" pos:end="245:56">ctx</name><operator pos:start="245:57" pos:end="245:58">-&gt;</operator><name pos:start="245:59" pos:end="245:65">hwframe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="247:13" pos:end="247:62"><expr pos:start="247:13" pos:end="247:61"><name pos:start="247:13" pos:end="247:30"><name pos:start="247:13" pos:end="247:21">tmp_frame</name><operator pos:start="247:22" pos:end="247:23">-&gt;</operator><name pos:start="247:24" pos:end="247:27">data</name><index pos:start="247:28" pos:end="247:30">[<expr pos:start="247:29" pos:end="247:29"><literal type="number" pos:start="247:29" pos:end="247:29">0</literal></expr>]</index></name>       <operator pos:start="247:38" pos:end="247:38">=</operator> <operator pos:start="247:40" pos:end="247:40">(</operator><name pos:start="247:41" pos:end="247:47">uint8_t</name><operator pos:start="247:48" pos:end="247:48">*</operator><operator pos:start="247:49" pos:end="247:49">)</operator><name pos:start="247:50" pos:end="247:61">mapped_frame</name></expr>;</expr_stmt>

            <expr_stmt pos:start="249:13" pos:end="249:45"><expr pos:start="249:13" pos:end="249:44"><name pos:start="249:13" pos:end="249:34"><name pos:start="249:13" pos:end="249:21">tmp_frame</name><operator pos:start="249:22" pos:end="249:23">-&gt;</operator><name pos:start="249:24" pos:end="249:31">linesize</name><index pos:start="249:32" pos:end="249:34">[<expr pos:start="249:33" pos:end="249:33"><literal type="number" pos:start="249:33" pos:end="249:33">0</literal></expr>]</index></name>   <operator pos:start="249:38" pos:end="249:38">=</operator> <name pos:start="249:40" pos:end="249:44">pitch</name></expr>;</expr_stmt>

            <expr_stmt pos:start="251:13" pos:end="251:94"><expr pos:start="251:13" pos:end="251:93"><name pos:start="251:13" pos:end="251:30"><name pos:start="251:13" pos:end="251:21">tmp_frame</name><operator pos:start="251:22" pos:end="251:23">-&gt;</operator><name pos:start="251:24" pos:end="251:27">data</name><index pos:start="251:28" pos:end="251:30">[<expr pos:start="251:29" pos:end="251:29"><literal type="number" pos:start="251:29" pos:end="251:29">1</literal></expr>]</index></name>       <operator pos:start="251:38" pos:end="251:38">=</operator> <operator pos:start="251:40" pos:end="251:40">(</operator><name pos:start="251:41" pos:end="251:47">uint8_t</name><operator pos:start="251:48" pos:end="251:48">*</operator><operator pos:start="251:49" pos:end="251:49">)</operator><operator pos:start="251:50" pos:end="251:50">(</operator><name pos:start="251:51" pos:end="251:62">mapped_frame</name> <operator pos:start="251:64" pos:end="251:64">+</operator> <name pos:start="251:66" pos:end="251:84"><name pos:start="251:66" pos:end="251:70">avctx</name><operator pos:start="251:71" pos:end="251:72">-&gt;</operator><name pos:start="251:73" pos:end="251:84">coded_height</name></name> <operator pos:start="251:86" pos:end="251:86">*</operator> <name pos:start="251:88" pos:end="251:92">pitch</name><operator pos:start="251:93" pos:end="251:93">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="253:13" pos:end="253:45"><expr pos:start="253:13" pos:end="253:44"><name pos:start="253:13" pos:end="253:34"><name pos:start="253:13" pos:end="253:21">tmp_frame</name><operator pos:start="253:22" pos:end="253:23">-&gt;</operator><name pos:start="253:24" pos:end="253:31">linesize</name><index pos:start="253:32" pos:end="253:34">[<expr pos:start="253:33" pos:end="253:33"><literal type="number" pos:start="253:33" pos:end="253:33">1</literal></expr>]</index></name>   <operator pos:start="253:38" pos:end="253:38">=</operator> <name pos:start="253:40" pos:end="253:44">pitch</name></expr>;</expr_stmt>

            <expr_stmt pos:start="255:13" pos:end="255:52"><expr pos:start="255:13" pos:end="255:51"><name pos:start="255:13" pos:end="255:28"><name pos:start="255:13" pos:end="255:21">tmp_frame</name><operator pos:start="255:22" pos:end="255:23">-&gt;</operator><name pos:start="255:24" pos:end="255:28">width</name></name>         <operator pos:start="255:38" pos:end="255:38">=</operator> <name pos:start="255:40" pos:end="255:51"><name pos:start="255:40" pos:end="255:44">avctx</name><operator pos:start="255:45" pos:end="255:46">-&gt;</operator><name pos:start="255:47" pos:end="255:51">width</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="257:13" pos:end="257:53"><expr pos:start="257:13" pos:end="257:52"><name pos:start="257:13" pos:end="257:29"><name pos:start="257:13" pos:end="257:21">tmp_frame</name><operator pos:start="257:22" pos:end="257:23">-&gt;</operator><name pos:start="257:24" pos:end="257:29">height</name></name>        <operator pos:start="257:38" pos:end="257:38">=</operator> <name pos:start="257:40" pos:end="257:52"><name pos:start="257:40" pos:end="257:44">avctx</name><operator pos:start="257:45" pos:end="257:46">-&gt;</operator><name pos:start="257:47" pos:end="257:52">height</name></name></expr>;</expr_stmt>



            <expr_stmt pos:start="261:13" pos:end="261:49"><expr pos:start="261:13" pos:end="261:48"><name pos:start="261:13" pos:end="261:15">ret</name> <operator pos:start="261:17" pos:end="261:17">=</operator> <call pos:start="261:19" pos:end="261:48"><name pos:start="261:19" pos:end="261:31">ff_get_buffer</name><argument_list pos:start="261:32" pos:end="261:48">(<argument pos:start="261:33" pos:end="261:37"><expr pos:start="261:33" pos:end="261:37"><name pos:start="261:33" pos:end="261:37">avctx</name></expr></argument>, <argument pos:start="261:40" pos:end="261:44"><expr pos:start="261:40" pos:end="261:44"><name pos:start="261:40" pos:end="261:44">frame</name></expr></argument>, <argument pos:start="261:47" pos:end="261:47"><expr pos:start="261:47" pos:end="261:47"><literal type="number" pos:start="261:47" pos:end="261:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="263:13" pos:end="271:13"><if pos:start="263:13" pos:end="271:13">if <condition pos:start="263:16" pos:end="263:24">(<expr pos:start="263:17" pos:end="263:23"><name pos:start="263:17" pos:end="263:19">ret</name> <operator pos:start="263:21" pos:end="263:21">&lt;</operator> <literal type="number" pos:start="263:23" pos:end="263:23">0</literal></expr>)</condition> <block pos:start="263:26" pos:end="271:13">{<block_content pos:start="265:17" pos:end="269:27">

                <expr_stmt pos:start="265:17" pos:end="265:70"><expr pos:start="265:17" pos:end="265:69"><call pos:start="265:17" pos:end="265:69"><name pos:start="265:17" pos:end="265:22">av_log</name><argument_list pos:start="265:23" pos:end="265:69">(<argument pos:start="265:24" pos:end="265:28"><expr pos:start="265:24" pos:end="265:28"><name pos:start="265:24" pos:end="265:28">avctx</name></expr></argument>, <argument pos:start="265:31" pos:end="265:42"><expr pos:start="265:31" pos:end="265:42"><name pos:start="265:31" pos:end="265:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="265:45" pos:end="265:68"><expr pos:start="265:45" pos:end="265:68"><literal type="string" pos:start="265:45" pos:end="265:68">"ff_get_buffer failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="267:17" pos:end="267:42"><expr pos:start="267:17" pos:end="267:41"><call pos:start="267:17" pos:end="267:41"><name pos:start="267:17" pos:end="267:29">av_frame_free</name><argument_list pos:start="267:30" pos:end="267:41">(<argument pos:start="267:31" pos:end="267:40"><expr pos:start="267:31" pos:end="267:40"><operator pos:start="267:31" pos:end="267:31">&amp;</operator><name pos:start="267:32" pos:end="267:40">tmp_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="269:17" pos:end="269:27">goto <name pos:start="269:22" pos:end="269:26">error</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="275:13" pos:end="275:64"><expr pos:start="275:13" pos:end="275:63"><name pos:start="275:13" pos:end="275:15">ret</name> <operator pos:start="275:17" pos:end="275:17">=</operator> <call pos:start="275:19" pos:end="275:63"><name pos:start="275:19" pos:end="275:42">av_hwframe_transfer_data</name><argument_list pos:start="275:43" pos:end="275:63">(<argument pos:start="275:44" pos:end="275:48"><expr pos:start="275:44" pos:end="275:48"><name pos:start="275:44" pos:end="275:48">frame</name></expr></argument>, <argument pos:start="275:51" pos:end="275:59"><expr pos:start="275:51" pos:end="275:59"><name pos:start="275:51" pos:end="275:59">tmp_frame</name></expr></argument>, <argument pos:start="275:62" pos:end="275:62"><expr pos:start="275:62" pos:end="275:62"><literal type="number" pos:start="275:62" pos:end="275:62">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="277:13" pos:end="285:13"><if pos:start="277:13" pos:end="285:13">if <condition pos:start="277:16" pos:end="277:20">(<expr pos:start="277:17" pos:end="277:19"><name pos:start="277:17" pos:end="277:19">ret</name></expr>)</condition> <block pos:start="277:22" pos:end="285:13">{<block_content pos:start="279:17" pos:end="283:27">

                <expr_stmt pos:start="279:17" pos:end="279:81"><expr pos:start="279:17" pos:end="279:80"><call pos:start="279:17" pos:end="279:80"><name pos:start="279:17" pos:end="279:22">av_log</name><argument_list pos:start="279:23" pos:end="279:80">(<argument pos:start="279:24" pos:end="279:28"><expr pos:start="279:24" pos:end="279:28"><name pos:start="279:24" pos:end="279:28">avctx</name></expr></argument>, <argument pos:start="279:31" pos:end="279:42"><expr pos:start="279:31" pos:end="279:42"><name pos:start="279:31" pos:end="279:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="279:45" pos:end="279:79"><expr pos:start="279:45" pos:end="279:79"><literal type="string" pos:start="279:45" pos:end="279:79">"av_hwframe_transfer_data failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="281:17" pos:end="281:42"><expr pos:start="281:17" pos:end="281:41"><call pos:start="281:17" pos:end="281:41"><name pos:start="281:17" pos:end="281:29">av_frame_free</name><argument_list pos:start="281:30" pos:end="281:41">(<argument pos:start="281:31" pos:end="281:40"><expr pos:start="281:31" pos:end="281:40"><operator pos:start="281:31" pos:end="281:31">&amp;</operator><name pos:start="281:32" pos:end="281:40">tmp_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="283:17" pos:end="283:27">goto <name pos:start="283:22" pos:end="283:26">error</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="289:13" pos:end="289:38"><expr pos:start="289:13" pos:end="289:37"><call pos:start="289:13" pos:end="289:37"><name pos:start="289:13" pos:end="289:25">av_frame_free</name><argument_list pos:start="289:26" pos:end="289:37">(<argument pos:start="289:27" pos:end="289:36"><expr pos:start="289:27" pos:end="289:36"><operator pos:start="289:27" pos:end="289:27">&amp;</operator><name pos:start="289:28" pos:end="289:36">tmp_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="291:11" pos:end="297:9">else <block pos:start="291:16" pos:end="297:9">{<block_content pos:start="293:13" pos:end="295:23">

            <expr_stmt pos:start="293:13" pos:end="293:30"><expr pos:start="293:13" pos:end="293:29"><name pos:start="293:13" pos:end="293:15">ret</name> <operator pos:start="293:17" pos:end="293:17">=</operator> <name pos:start="293:19" pos:end="293:29">AVERROR_BUG</name></expr>;</expr_stmt>

            <goto pos:start="295:13" pos:end="295:23">goto <name pos:start="295:18" pos:end="295:22">error</name>;</goto>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="301:9" pos:end="301:36"><expr pos:start="301:9" pos:end="301:35"><name pos:start="301:9" pos:end="301:20"><name pos:start="301:9" pos:end="301:13">frame</name><operator pos:start="301:14" pos:end="301:15">-&gt;</operator><name pos:start="301:16" pos:end="301:20">width</name></name> <operator pos:start="301:22" pos:end="301:22">=</operator> <name pos:start="301:24" pos:end="301:35"><name pos:start="301:24" pos:end="301:28">avctx</name><operator pos:start="301:29" pos:end="301:30">-&gt;</operator><name pos:start="301:31" pos:end="301:35">width</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="303:9" pos:end="303:38"><expr pos:start="303:9" pos:end="303:37"><name pos:start="303:9" pos:end="303:21"><name pos:start="303:9" pos:end="303:13">frame</name><operator pos:start="303:14" pos:end="303:15">-&gt;</operator><name pos:start="303:16" pos:end="303:21">height</name></name> <operator pos:start="303:23" pos:end="303:23">=</operator> <name pos:start="303:25" pos:end="303:37"><name pos:start="303:25" pos:end="303:29">avctx</name><operator pos:start="303:30" pos:end="303:31">-&gt;</operator><name pos:start="303:32" pos:end="303:37">height</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="305:9" pos:end="305:102"><expr pos:start="305:9" pos:end="305:101"><name pos:start="305:9" pos:end="305:18"><name pos:start="305:9" pos:end="305:13">frame</name><operator pos:start="305:14" pos:end="305:15">-&gt;</operator><name pos:start="305:16" pos:end="305:18">pts</name></name> <operator pos:start="305:20" pos:end="305:20">=</operator> <macro pos:start="305:22" pos:end="305:101"><name pos:start="305:22" pos:end="305:33">av_rescale_q</name><argument_list pos:start="305:34" pos:end="305:101">(<argument pos:start="305:35" pos:end="305:52">dispinfo.timestamp</argument>, <argument pos:start="305:55" pos:end="305:68">(AVRational){<literal type="number" pos:start="305:68" pos:end="305:68">1</literal></argument>, <argument pos:start="305:71" pos:end="305:79"><literal type="number" pos:start="305:71" pos:end="305:78">10000000</literal>}</argument>, <argument pos:start="305:82" pos:end="305:100">avctx-&gt;pkt_timebase</argument>)</argument_list></macro></expr>;</expr_stmt>



        <comment type="block" pos:start="309:9" pos:end="313:11">/* CUVIDs opaque reordering breaks the internal pkt logic.

         * So set pkt_pts and clear all the other pkt_ fields.

         */</comment>

        <expr_stmt pos:start="315:9" pos:end="315:36"><expr pos:start="315:9" pos:end="315:35"><name pos:start="315:9" pos:end="315:22"><name pos:start="315:9" pos:end="315:13">frame</name><operator pos:start="315:14" pos:end="315:15">-&gt;</operator><name pos:start="315:16" pos:end="315:22">pkt_pts</name></name> <operator pos:start="315:24" pos:end="315:24">=</operator> <name pos:start="315:26" pos:end="315:35"><name pos:start="315:26" pos:end="315:30">frame</name><operator pos:start="315:31" pos:end="315:32">-&gt;</operator><name pos:start="315:33" pos:end="315:35">pts</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="317:9" pos:end="317:40"><expr pos:start="317:9" pos:end="317:39"><call pos:start="317:9" pos:end="317:39"><name pos:start="317:9" pos:end="317:28">av_frame_set_pkt_pos</name><argument_list pos:start="317:29" pos:end="317:39">(<argument pos:start="317:30" pos:end="317:34"><expr pos:start="317:30" pos:end="317:34"><name pos:start="317:30" pos:end="317:34">frame</name></expr></argument>, <argument pos:start="317:37" pos:end="317:38"><expr pos:start="317:37" pos:end="317:38"><operator pos:start="317:37" pos:end="317:37">-</operator><literal type="number" pos:start="317:38" pos:end="317:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="319:9" pos:end="319:44"><expr pos:start="319:9" pos:end="319:43"><call pos:start="319:9" pos:end="319:43"><name pos:start="319:9" pos:end="319:33">av_frame_set_pkt_duration</name><argument_list pos:start="319:34" pos:end="319:43">(<argument pos:start="319:35" pos:end="319:39"><expr pos:start="319:35" pos:end="319:39"><name pos:start="319:35" pos:end="319:39">frame</name></expr></argument>, <argument pos:start="319:42" pos:end="319:42"><expr pos:start="319:42" pos:end="319:42"><literal type="number" pos:start="319:42" pos:end="319:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="321:9" pos:end="321:41"><expr pos:start="321:9" pos:end="321:40"><call pos:start="321:9" pos:end="321:40"><name pos:start="321:9" pos:end="321:29">av_frame_set_pkt_size</name><argument_list pos:start="321:30" pos:end="321:40">(<argument pos:start="321:31" pos:end="321:35"><expr pos:start="321:31" pos:end="321:35"><name pos:start="321:31" pos:end="321:35">frame</name></expr></argument>, <argument pos:start="321:38" pos:end="321:39"><expr pos:start="321:38" pos:end="321:39"><operator pos:start="321:38" pos:end="321:38">-</operator><literal type="number" pos:start="321:39" pos:end="321:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="325:9" pos:end="325:62"><expr pos:start="325:9" pos:end="325:61"><name pos:start="325:9" pos:end="325:31"><name pos:start="325:9" pos:end="325:13">frame</name><operator pos:start="325:14" pos:end="325:15">-&gt;</operator><name pos:start="325:16" pos:end="325:31">interlaced_frame</name></name> <operator pos:start="325:33" pos:end="325:33">=</operator> <operator pos:start="325:35" pos:end="325:35">!</operator><name pos:start="325:36" pos:end="325:61"><name pos:start="325:36" pos:end="325:43">dispinfo</name><operator pos:start="325:44" pos:end="325:44">.</operator><name pos:start="325:45" pos:end="325:61">progressive_frame</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="329:9" pos:end="331:62"><if pos:start="329:9" pos:end="331:62">if <condition pos:start="329:12" pos:end="329:40">(<expr pos:start="329:13" pos:end="329:39"><operator pos:start="329:13" pos:end="329:13">!</operator><name pos:start="329:14" pos:end="329:39"><name pos:start="329:14" pos:end="329:21">dispinfo</name><operator pos:start="329:22" pos:end="329:22">.</operator><name pos:start="329:23" pos:end="329:39">progressive_frame</name></name></expr>)</condition><block type="pseudo" pos:start="331:13" pos:end="331:62"><block_content pos:start="331:13" pos:end="331:62">

            <expr_stmt pos:start="331:13" pos:end="331:62"><expr pos:start="331:13" pos:end="331:61"><name pos:start="331:13" pos:end="331:34"><name pos:start="331:13" pos:end="331:17">frame</name><operator pos:start="331:18" pos:end="331:19">-&gt;</operator><name pos:start="331:20" pos:end="331:34">top_field_first</name></name> <operator pos:start="331:36" pos:end="331:36">=</operator> <name pos:start="331:38" pos:end="331:61"><name pos:start="331:38" pos:end="331:45">dispinfo</name><operator pos:start="331:46" pos:end="331:46">.</operator><name pos:start="331:47" pos:end="331:61">top_field_first</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="335:9" pos:end="335:23"><expr pos:start="335:9" pos:end="335:22"><operator pos:start="335:9" pos:end="335:9">*</operator><name pos:start="335:10" pos:end="335:18">got_frame</name> <operator pos:start="335:20" pos:end="335:20">=</operator> <literal type="number" pos:start="335:22" pos:end="335:22">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="337:7" pos:end="341:5">else <block pos:start="337:12" pos:end="341:5">{<block_content pos:start="339:9" pos:end="339:23">

        <expr_stmt pos:start="339:9" pos:end="339:23"><expr pos:start="339:9" pos:end="339:22"><operator pos:start="339:9" pos:end="339:9">*</operator><name pos:start="339:10" pos:end="339:18">got_frame</name> <operator pos:start="339:20" pos:end="339:20">=</operator> <literal type="number" pos:start="339:22" pos:end="339:22">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



<label pos:start="345:1" pos:end="345:6"><name pos:start="345:1" pos:end="345:5">error</name>:</label>

    <if_stmt pos:start="347:5" pos:end="349:76"><if pos:start="347:5" pos:end="349:76">if <condition pos:start="347:8" pos:end="347:21">(<expr pos:start="347:9" pos:end="347:20"><name pos:start="347:9" pos:end="347:20">mapped_frame</name></expr>)</condition><block type="pseudo" pos:start="349:9" pos:end="349:76"><block_content pos:start="349:9" pos:end="349:76">

        <expr_stmt pos:start="349:9" pos:end="349:76"><expr pos:start="349:9" pos:end="349:75"><name pos:start="349:9" pos:end="349:12">eret</name> <operator pos:start="349:14" pos:end="349:14">=</operator> <call pos:start="349:16" pos:end="349:75"><name pos:start="349:16" pos:end="349:23">CHECK_CU</name><argument_list pos:start="349:24" pos:end="349:75">(<argument pos:start="349:25" pos:end="349:74"><expr pos:start="349:25" pos:end="349:74"><call pos:start="349:25" pos:end="349:74"><name pos:start="349:25" pos:end="349:44">cuvidUnmapVideoFrame</name><argument_list pos:start="349:45" pos:end="349:74">(<argument pos:start="349:46" pos:end="349:59"><expr pos:start="349:46" pos:end="349:59"><name pos:start="349:46" pos:end="349:59"><name pos:start="349:46" pos:end="349:48">ctx</name><operator pos:start="349:49" pos:end="349:50">-&gt;</operator><name pos:start="349:51" pos:end="349:59">cudecoder</name></name></expr></argument>, <argument pos:start="349:62" pos:end="349:73"><expr pos:start="349:62" pos:end="349:73"><name pos:start="349:62" pos:end="349:73">mapped_frame</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="353:5" pos:end="353:45"><expr pos:start="353:5" pos:end="353:44"><name pos:start="353:5" pos:end="353:8">eret</name> <operator pos:start="353:10" pos:end="353:10">=</operator> <call pos:start="353:12" pos:end="353:44"><name pos:start="353:12" pos:end="353:19">CHECK_CU</name><argument_list pos:start="353:20" pos:end="353:44">(<argument pos:start="353:21" pos:end="353:43"><expr pos:start="353:21" pos:end="353:43"><call pos:start="353:21" pos:end="353:43"><name pos:start="353:21" pos:end="353:35">cuCtxPopCurrent</name><argument_list pos:start="353:36" pos:end="353:43">(<argument pos:start="353:37" pos:end="353:42"><expr pos:start="353:37" pos:end="353:42"><operator pos:start="353:37" pos:end="353:37">&amp;</operator><name pos:start="353:38" pos:end="353:42">dummy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="357:5" pos:end="363:19"><if pos:start="357:5" pos:end="359:20">if <condition pos:start="357:8" pos:end="357:17">(<expr pos:start="357:9" pos:end="357:16"><name pos:start="357:9" pos:end="357:12">eret</name> <operator pos:start="357:14" pos:end="357:14">&lt;</operator> <literal type="number" pos:start="357:16" pos:end="357:16">0</literal></expr>)</condition><block type="pseudo" pos:start="359:9" pos:end="359:20"><block_content pos:start="359:9" pos:end="359:20">

        <return pos:start="359:9" pos:end="359:20">return <expr pos:start="359:16" pos:end="359:19"><name pos:start="359:16" pos:end="359:19">eret</name></expr>;</return></block_content></block></if>

    <else pos:start="361:5" pos:end="363:19">else<block type="pseudo" pos:start="363:9" pos:end="363:19"><block_content pos:start="363:9" pos:end="363:19">

        <return pos:start="363:9" pos:end="363:19">return <expr pos:start="363:16" pos:end="363:18"><name pos:start="363:16" pos:end="363:18">ret</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>
</unit>
