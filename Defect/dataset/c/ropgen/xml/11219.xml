<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11219.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:70"><name pos:start="1:1" pos:end="1:19">print_operand_value</name> <argument_list pos:start="1:21" pos:end="1:70">(<argument pos:start="1:22" pos:end="1:30">char *buf</argument>, <argument pos:start="1:33" pos:end="1:46">size_t bufsize</argument>, <argument pos:start="1:49" pos:end="1:55">int hex</argument>, <argument pos:start="1:58" pos:end="1:69">bfd_vma disp</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="109:1">{<block_content pos:start="5:3" pos:end="107:5">

  <if_stmt pos:start="5:3" pos:end="107:5"><if pos:start="5:3" pos:end="93:5">if <condition pos:start="5:6" pos:end="5:33">(<expr pos:start="5:7" pos:end="5:32"><name pos:start="5:7" pos:end="5:18">address_mode</name> <operator pos:start="5:20" pos:end="5:21">==</operator> <name pos:start="5:23" pos:end="5:32">mode_64bit</name></expr>)</condition>

    <block pos:start="7:5" pos:end="93:5">{<block_content pos:start="9:7" pos:end="91:9">

      <if_stmt pos:start="9:7" pos:end="91:9"><if pos:start="9:7" pos:end="27:9">if <condition pos:start="9:10" pos:end="9:14">(<expr pos:start="9:11" pos:end="9:13"><name pos:start="9:11" pos:end="9:13">hex</name></expr>)</condition>

	<block pos:start="11:9" pos:end="27:9">{<block_content pos:start="13:11" pos:end="25:50">

	  <decl_stmt pos:start="13:11" pos:end="13:23"><decl pos:start="13:11" pos:end="13:22"><type pos:start="13:11" pos:end="13:14"><name pos:start="13:11" pos:end="13:14">char</name></type> <name pos:start="13:16" pos:end="13:22"><name pos:start="13:16" pos:end="13:18">tmp</name><index pos:start="13:19" pos:end="13:22">[<expr pos:start="13:20" pos:end="13:21"><literal type="number" pos:start="13:20" pos:end="13:21">30</literal></expr>]</index></name></decl>;</decl_stmt>

	  <decl_stmt pos:start="15:11" pos:end="15:16"><decl pos:start="15:11" pos:end="15:15"><type pos:start="15:11" pos:end="15:13"><name pos:start="15:11" pos:end="15:13">int</name></type> <name pos:start="15:15" pos:end="15:15">i</name></decl>;</decl_stmt>

	  <expr_stmt pos:start="17:11" pos:end="17:23"><expr pos:start="17:11" pos:end="17:22"><name pos:start="17:11" pos:end="17:16"><name pos:start="17:11" pos:end="17:13">buf</name><index pos:start="17:14" pos:end="17:16">[<expr pos:start="17:15" pos:end="17:15"><literal type="number" pos:start="17:15" pos:end="17:15">0</literal></expr>]</index></name> <operator pos:start="17:18" pos:end="17:18">=</operator> <literal type="char" pos:start="17:20" pos:end="17:22">'0'</literal></expr>;</expr_stmt>

	  <expr_stmt pos:start="19:11" pos:end="19:23"><expr pos:start="19:11" pos:end="19:22"><name pos:start="19:11" pos:end="19:16"><name pos:start="19:11" pos:end="19:13">buf</name><index pos:start="19:14" pos:end="19:16">[<expr pos:start="19:15" pos:end="19:15"><literal type="number" pos:start="19:15" pos:end="19:15">1</literal></expr>]</index></name> <operator pos:start="19:18" pos:end="19:18">=</operator> <literal type="char" pos:start="19:20" pos:end="19:22">'x'</literal></expr>;</expr_stmt>

          <expr_stmt pos:start="21:11" pos:end="21:48"><expr pos:start="21:11" pos:end="21:47"><call pos:start="21:11" pos:end="21:47"><name pos:start="21:11" pos:end="21:22">snprintf_vma</name> <argument_list pos:start="21:24" pos:end="21:47">(<argument pos:start="21:25" pos:end="21:27"><expr pos:start="21:25" pos:end="21:27"><name pos:start="21:25" pos:end="21:27">tmp</name></expr></argument>, <argument pos:start="21:30" pos:end="21:40"><expr pos:start="21:30" pos:end="21:40"><sizeof pos:start="21:30" pos:end="21:40">sizeof<argument_list pos:start="21:36" pos:end="21:40">(<argument pos:start="21:37" pos:end="21:39"><expr pos:start="21:37" pos:end="21:39"><name pos:start="21:37" pos:end="21:39">tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="21:43" pos:end="21:46"><expr pos:start="21:43" pos:end="21:46"><name pos:start="21:43" pos:end="21:46">disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <for pos:start="23:11" pos:end="23:56">for <control pos:start="23:15" pos:end="23:55">(<init pos:start="23:16" pos:end="23:21"><expr pos:start="23:16" pos:end="23:20"><name pos:start="23:16" pos:end="23:16">i</name> <operator pos:start="23:18" pos:end="23:18">=</operator> <literal type="number" pos:start="23:20" pos:end="23:20">0</literal></expr>;</init> <condition pos:start="23:23" pos:end="23:50"><expr pos:start="23:23" pos:end="23:49"><name pos:start="23:23" pos:end="23:28"><name pos:start="23:23" pos:end="23:25">tmp</name><index pos:start="23:26" pos:end="23:28">[<expr pos:start="23:27" pos:end="23:27"><name pos:start="23:27" pos:end="23:27">i</name></expr>]</index></name> <operator pos:start="23:30" pos:end="23:31">==</operator> <literal type="char" pos:start="23:33" pos:end="23:35">'0'</literal> <operator pos:start="23:37" pos:end="23:38">&amp;&amp;</operator> <name pos:start="23:40" pos:end="23:49"><name pos:start="23:40" pos:end="23:42">tmp</name><index pos:start="23:43" pos:end="23:49">[<expr pos:start="23:44" pos:end="23:48"><name pos:start="23:44" pos:end="23:44">i</name> <operator pos:start="23:46" pos:end="23:46">+</operator> <literal type="number" pos:start="23:48" pos:end="23:48">1</literal></expr>]</index></name></expr>;</condition> <incr pos:start="23:52" pos:end="23:54"><expr pos:start="23:52" pos:end="23:54"><name pos:start="23:52" pos:end="23:52">i</name><operator pos:start="23:53" pos:end="23:54">++</operator></expr></incr>)</control><block type="pseudo" pos:start="23:56" pos:end="23:56"><block_content pos:start="23:56" pos:end="23:56"><empty_stmt pos:start="23:56" pos:end="23:56">;</empty_stmt></block_content></block></for>

          <expr_stmt pos:start="25:11" pos:end="25:50"><expr pos:start="25:11" pos:end="25:49"><call pos:start="25:11" pos:end="25:49"><name pos:start="25:11" pos:end="25:17">pstrcpy</name> <argument_list pos:start="25:19" pos:end="25:49">(<argument pos:start="25:20" pos:end="25:26"><expr pos:start="25:20" pos:end="25:26"><name pos:start="25:20" pos:end="25:22">buf</name> <operator pos:start="25:24" pos:end="25:24">+</operator> <literal type="number" pos:start="25:26" pos:end="25:26">2</literal></expr></argument>, <argument pos:start="25:29" pos:end="25:39"><expr pos:start="25:29" pos:end="25:39"><name pos:start="25:29" pos:end="25:35">bufsize</name> <operator pos:start="25:37" pos:end="25:37">-</operator> <literal type="number" pos:start="25:39" pos:end="25:39">2</literal></expr></argument>, <argument pos:start="25:42" pos:end="25:48"><expr pos:start="25:42" pos:end="25:48"><name pos:start="25:42" pos:end="25:44">tmp</name> <operator pos:start="25:46" pos:end="25:46">+</operator> <name pos:start="25:48" pos:end="25:48">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if>

      <else pos:start="29:7" pos:end="91:9">else

	<block pos:start="31:9" pos:end="91:9">{<block_content pos:start="33:11" pos:end="89:47">

	  <decl_stmt pos:start="33:11" pos:end="33:34"><decl pos:start="33:11" pos:end="33:33"><type pos:start="33:11" pos:end="33:24"><name pos:start="33:11" pos:end="33:24">bfd_signed_vma</name></type> <name pos:start="33:26" pos:end="33:26">v</name> <init pos:start="33:28" pos:end="33:33">= <expr pos:start="33:30" pos:end="33:33"><name pos:start="33:30" pos:end="33:33">disp</name></expr></init></decl>;</decl_stmt>

	  <decl_stmt pos:start="35:11" pos:end="35:23"><decl pos:start="35:11" pos:end="35:22"><type pos:start="35:11" pos:end="35:14"><name pos:start="35:11" pos:end="35:14">char</name></type> <name pos:start="35:16" pos:end="35:22"><name pos:start="35:16" pos:end="35:18">tmp</name><index pos:start="35:19" pos:end="35:22">[<expr pos:start="35:20" pos:end="35:21"><literal type="number" pos:start="35:20" pos:end="35:21">30</literal></expr>]</index></name></decl>;</decl_stmt>

	  <decl_stmt pos:start="37:11" pos:end="37:16"><decl pos:start="37:11" pos:end="37:15"><type pos:start="37:11" pos:end="37:13"><name pos:start="37:11" pos:end="37:13">int</name></type> <name pos:start="37:15" pos:end="37:15">i</name></decl>;</decl_stmt>

	  <if_stmt pos:start="39:11" pos:end="59:13"><if pos:start="39:11" pos:end="59:13">if <condition pos:start="39:14" pos:end="39:20">(<expr pos:start="39:15" pos:end="39:19"><name pos:start="39:15" pos:end="39:15">v</name> <operator pos:start="39:17" pos:end="39:17">&lt;</operator> <literal type="number" pos:start="39:19" pos:end="39:19">0</literal></expr>)</condition>

	    <block pos:start="41:13" pos:end="59:13">{<block_content pos:start="43:15" pos:end="57:17">

	      <expr_stmt pos:start="43:15" pos:end="43:29"><expr pos:start="43:15" pos:end="43:28"><operator pos:start="43:15" pos:end="43:15">*</operator><operator pos:start="43:16" pos:end="43:16">(</operator><name pos:start="43:17" pos:end="43:19">buf</name><operator pos:start="43:20" pos:end="43:21">++</operator><operator pos:start="43:22" pos:end="43:22">)</operator> <operator pos:start="43:24" pos:end="43:24">=</operator> <literal type="char" pos:start="43:26" pos:end="43:28">'-'</literal></expr>;</expr_stmt>

	      <expr_stmt pos:start="45:15" pos:end="45:24"><expr pos:start="45:15" pos:end="45:23"><name pos:start="45:15" pos:end="45:15">v</name> <operator pos:start="45:17" pos:end="45:17">=</operator> <operator pos:start="45:19" pos:end="45:19">-</operator><name pos:start="45:20" pos:end="45:23">disp</name></expr>;</expr_stmt>

	      <comment type="block" pos:start="47:15" pos:end="47:71">/* Check for possible overflow on 0x8000000000000000.  */</comment>

	      <if_stmt pos:start="49:15" pos:end="57:17"><if pos:start="49:15" pos:end="57:17">if <condition pos:start="49:18" pos:end="49:24">(<expr pos:start="49:19" pos:end="49:23"><name pos:start="49:19" pos:end="49:19">v</name> <operator pos:start="49:21" pos:end="49:21">&lt;</operator> <literal type="number" pos:start="49:23" pos:end="49:23">0</literal></expr>)</condition>

		<block pos:start="51:17" pos:end="57:17">{<block_content pos:start="53:19" pos:end="55:25">

                  <expr_stmt pos:start="53:19" pos:end="53:64"><expr pos:start="53:19" pos:end="53:63"><call pos:start="53:19" pos:end="53:63"><name pos:start="53:19" pos:end="53:25">pstrcpy</name> <argument_list pos:start="53:27" pos:end="53:63">(<argument pos:start="53:28" pos:end="53:30"><expr pos:start="53:28" pos:end="53:30"><name pos:start="53:28" pos:end="53:30">buf</name></expr></argument>, <argument pos:start="53:33" pos:end="53:39"><expr pos:start="53:33" pos:end="53:39"><name pos:start="53:33" pos:end="53:39">bufsize</name></expr></argument>, <argument pos:start="53:42" pos:end="53:62"><expr pos:start="53:42" pos:end="53:62"><literal type="string" pos:start="53:42" pos:end="53:62">"9223372036854775808"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		  <return pos:start="55:19" pos:end="55:25">return;</return>

		</block_content>}</block></if></if_stmt>

	    </block_content>}</block></if></if_stmt>

	  <if_stmt pos:start="61:11" pos:end="69:13"><if pos:start="61:11" pos:end="69:13">if <condition pos:start="61:14" pos:end="61:17">(<expr pos:start="61:15" pos:end="61:16"><operator pos:start="61:15" pos:end="61:15">!</operator><name pos:start="61:16" pos:end="61:16">v</name></expr>)</condition>

	    <block pos:start="63:13" pos:end="69:13">{<block_content pos:start="65:17" pos:end="67:21">

                <expr_stmt pos:start="65:17" pos:end="65:44"><expr pos:start="65:17" pos:end="65:43"><call pos:start="65:17" pos:end="65:43"><name pos:start="65:17" pos:end="65:23">pstrcpy</name> <argument_list pos:start="65:25" pos:end="65:43">(<argument pos:start="65:26" pos:end="65:28"><expr pos:start="65:26" pos:end="65:28"><name pos:start="65:26" pos:end="65:28">buf</name></expr></argument>, <argument pos:start="65:31" pos:end="65:37"><expr pos:start="65:31" pos:end="65:37"><name pos:start="65:31" pos:end="65:37">bufsize</name></expr></argument>, <argument pos:start="65:40" pos:end="65:42"><expr pos:start="65:40" pos:end="65:42"><literal type="string" pos:start="65:40" pos:end="65:42">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	      <return pos:start="67:15" pos:end="67:21">return;</return>

	    </block_content>}</block></if></if_stmt>



	  <expr_stmt pos:start="73:11" pos:end="73:16"><expr pos:start="73:11" pos:end="73:15"><name pos:start="73:11" pos:end="73:11">i</name> <operator pos:start="73:13" pos:end="73:13">=</operator> <literal type="number" pos:start="73:15" pos:end="73:15">0</literal></expr>;</expr_stmt>

	  <expr_stmt pos:start="75:11" pos:end="75:22"><expr pos:start="75:11" pos:end="75:21"><name pos:start="75:11" pos:end="75:17"><name pos:start="75:11" pos:end="75:13">tmp</name><index pos:start="75:14" pos:end="75:17">[<expr pos:start="75:15" pos:end="75:16"><literal type="number" pos:start="75:15" pos:end="75:16">29</literal></expr>]</index></name> <operator pos:start="75:19" pos:end="75:19">=</operator> <literal type="number" pos:start="75:21" pos:end="75:21">0</literal></expr>;</expr_stmt>

	  <while pos:start="77:11" pos:end="87:13">while <condition pos:start="77:17" pos:end="77:19">(<expr pos:start="77:18" pos:end="77:18"><name pos:start="77:18" pos:end="77:18">v</name></expr>)</condition>

	    <block pos:start="79:13" pos:end="87:13">{<block_content pos:start="81:15" pos:end="85:18">

	      <expr_stmt pos:start="81:15" pos:end="81:43"><expr pos:start="81:15" pos:end="81:42"><name pos:start="81:15" pos:end="81:25"><name pos:start="81:15" pos:end="81:17">tmp</name><index pos:start="81:18" pos:end="81:25">[<expr pos:start="81:19" pos:end="81:24"><literal type="number" pos:start="81:19" pos:end="81:20">28</literal> <operator pos:start="81:22" pos:end="81:22">-</operator> <name pos:start="81:24" pos:end="81:24">i</name></expr>]</index></name> <operator pos:start="81:27" pos:end="81:27">=</operator> <operator pos:start="81:29" pos:end="81:29">(</operator><name pos:start="81:30" pos:end="81:30">v</name> <operator pos:start="81:32" pos:end="81:32">%</operator> <literal type="number" pos:start="81:34" pos:end="81:35">10</literal><operator pos:start="81:36" pos:end="81:36">)</operator> <operator pos:start="81:38" pos:end="81:38">+</operator> <literal type="char" pos:start="81:40" pos:end="81:42">'0'</literal></expr>;</expr_stmt>

	      <expr_stmt pos:start="83:15" pos:end="83:22"><expr pos:start="83:15" pos:end="83:21"><name pos:start="83:15" pos:end="83:15">v</name> <operator pos:start="83:17" pos:end="83:18">/=</operator> <literal type="number" pos:start="83:20" pos:end="83:21">10</literal></expr>;</expr_stmt>

	      <expr_stmt pos:start="85:15" pos:end="85:18"><expr pos:start="85:15" pos:end="85:17"><name pos:start="85:15" pos:end="85:15">i</name><operator pos:start="85:16" pos:end="85:17">++</operator></expr>;</expr_stmt>

	    </block_content>}</block></while>

          <expr_stmt pos:start="89:11" pos:end="89:47"><expr pos:start="89:11" pos:end="89:46"><call pos:start="89:11" pos:end="89:46"><name pos:start="89:11" pos:end="89:17">pstrcpy</name> <argument_list pos:start="89:19" pos:end="89:46">(<argument pos:start="89:20" pos:end="89:22"><expr pos:start="89:20" pos:end="89:22"><name pos:start="89:20" pos:end="89:22">buf</name></expr></argument>, <argument pos:start="89:25" pos:end="89:31"><expr pos:start="89:25" pos:end="89:31"><name pos:start="89:25" pos:end="89:31">bufsize</name></expr></argument>, <argument pos:start="89:34" pos:end="89:45"><expr pos:start="89:34" pos:end="89:45"><name pos:start="89:34" pos:end="89:36">tmp</name> <operator pos:start="89:38" pos:end="89:38">+</operator> <literal type="number" pos:start="89:40" pos:end="89:43">29</literal> <operator pos:start="89:43" pos:end="89:43">-</operator> <name pos:start="89:45" pos:end="89:45">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></else></if_stmt>

    </block_content>}</block></if>

  <else pos:start="95:3" pos:end="107:5">else

    <block pos:start="97:5" pos:end="107:5">{<block_content pos:start="99:7" pos:end="105:50">

      <if_stmt pos:start="99:7" pos:end="105:50"><if pos:start="99:7" pos:end="101:61">if <condition pos:start="99:10" pos:end="99:14">(<expr pos:start="99:11" pos:end="99:13"><name pos:start="99:11" pos:end="99:13">hex</name></expr>)</condition><block type="pseudo" pos:start="101:9" pos:end="101:61"><block_content pos:start="101:9" pos:end="101:61">

        <expr_stmt pos:start="101:9" pos:end="101:61"><expr pos:start="101:9" pos:end="101:60"><call pos:start="101:9" pos:end="101:60"><name pos:start="101:9" pos:end="101:16">snprintf</name> <argument_list pos:start="101:18" pos:end="101:60">(<argument pos:start="101:19" pos:end="101:21"><expr pos:start="101:19" pos:end="101:21"><name pos:start="101:19" pos:end="101:21">buf</name></expr></argument>, <argument pos:start="101:24" pos:end="101:30"><expr pos:start="101:24" pos:end="101:30"><name pos:start="101:24" pos:end="101:30">bufsize</name></expr></argument>, <argument pos:start="101:33" pos:end="101:38"><expr pos:start="101:33" pos:end="101:38"><literal type="string" pos:start="101:33" pos:end="101:38">"0x%x"</literal></expr></argument>, <argument pos:start="101:41" pos:end="101:59"><expr pos:start="101:41" pos:end="101:59"><operator pos:start="101:41" pos:end="101:41">(</operator><name pos:start="101:42" pos:end="101:49">unsigned</name> <name pos:start="101:51" pos:end="101:53">int</name><operator pos:start="101:54" pos:end="101:54">)</operator> <name pos:start="101:56" pos:end="101:59">disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

      <else pos:start="103:7" pos:end="105:50">else<block type="pseudo" pos:start="105:9" pos:end="105:50"><block_content pos:start="105:9" pos:end="105:50">

        <expr_stmt pos:start="105:9" pos:end="105:50"><expr pos:start="105:9" pos:end="105:49"><call pos:start="105:9" pos:end="105:49"><name pos:start="105:9" pos:end="105:16">snprintf</name> <argument_list pos:start="105:18" pos:end="105:49">(<argument pos:start="105:19" pos:end="105:21"><expr pos:start="105:19" pos:end="105:21"><name pos:start="105:19" pos:end="105:21">buf</name></expr></argument>, <argument pos:start="105:24" pos:end="105:30"><expr pos:start="105:24" pos:end="105:30"><name pos:start="105:24" pos:end="105:30">bufsize</name></expr></argument>, <argument pos:start="105:33" pos:end="105:36"><expr pos:start="105:33" pos:end="105:36"><literal type="string" pos:start="105:33" pos:end="105:36">"%d"</literal></expr></argument>, <argument pos:start="105:39" pos:end="105:48"><expr pos:start="105:39" pos:end="105:48"><operator pos:start="105:39" pos:end="105:39">(</operator><name pos:start="105:40" pos:end="105:42">int</name><operator pos:start="105:43" pos:end="105:43">)</operator> <name pos:start="105:45" pos:end="105:48">disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block>
</unit>
