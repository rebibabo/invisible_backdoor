<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18053.c" pos:tabs="8"><function pos:start="1:1" pos:end="199:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:21">split_commandline</name><parameter_list pos:start="1:22" pos:end="5:51">(<parameter pos:start="1:23" pos:end="1:46"><decl pos:start="1:23" pos:end="1:46"><type pos:start="1:23" pos:end="1:46"><name pos:start="1:23" pos:end="1:40">OptionParseContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:46">octx</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:56"><decl pos:start="1:49" pos:end="1:56"><type pos:start="1:49" pos:end="1:56"><name pos:start="1:49" pos:end="1:51">int</name></type> <name pos:start="1:53" pos:end="1:56">argc</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:70"><decl pos:start="1:59" pos:end="1:70"><type pos:start="1:59" pos:end="1:68"><name pos:start="1:59" pos:end="1:62">char</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:70"><name pos:start="1:65" pos:end="1:68">argv</name><index pos:start="1:69" pos:end="1:70">[]</index></name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:46"><decl pos:start="3:23" pos:end="3:46"><type pos:start="3:23" pos:end="3:46"><specifier pos:start="3:23" pos:end="3:27">const</specifier> <name pos:start="3:29" pos:end="3:37">OptionDef</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:46">options</name></decl></parameter>,

                      <parameter pos:start="5:23" pos:end="5:50"><decl pos:start="5:23" pos:end="5:50"><type pos:start="5:23" pos:end="5:50"><specifier pos:start="5:23" pos:end="5:27">const</specifier> <name pos:start="5:29" pos:end="5:42">OptionGroupDef</name> <modifier pos:start="5:44" pos:end="5:44">*</modifier></type><name pos:start="5:45" pos:end="5:50">groups</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="199:1">{<block_content pos:start="9:5" pos:end="197:13">

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">optindex</name> <init pos:start="9:18" pos:end="9:20">= <expr pos:start="9:20" pos:end="9:20"><literal type="number" pos:start="9:20" pos:end="9:20">1</literal></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="13:65">/* perform system-dependent conversions for arguments list */</comment>

    <expr_stmt pos:start="15:5" pos:end="15:40"><expr pos:start="15:5" pos:end="15:39"><call pos:start="15:5" pos:end="15:39"><name pos:start="15:5" pos:end="15:25">prepare_app_arguments</name><argument_list pos:start="15:26" pos:end="15:39">(<argument pos:start="15:27" pos:end="15:31"><expr pos:start="15:27" pos:end="15:31"><operator pos:start="15:27" pos:end="15:27">&amp;</operator><name pos:start="15:28" pos:end="15:31">argc</name></expr></argument>, <argument pos:start="15:34" pos:end="15:38"><expr pos:start="15:34" pos:end="15:38"><operator pos:start="15:34" pos:end="15:34">&amp;</operator><name pos:start="15:35" pos:end="15:38">argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:37"><expr pos:start="19:5" pos:end="19:36"><call pos:start="19:5" pos:end="19:36"><name pos:start="19:5" pos:end="19:22">init_parse_context</name><argument_list pos:start="19:23" pos:end="19:36">(<argument pos:start="19:24" pos:end="19:27"><expr pos:start="19:24" pos:end="19:27"><name pos:start="19:24" pos:end="19:27">octx</name></expr></argument>, <argument pos:start="19:30" pos:end="19:35"><expr pos:start="19:30" pos:end="19:35"><name pos:start="19:30" pos:end="19:35">groups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:63"><expr pos:start="21:5" pos:end="21:62"><call pos:start="21:5" pos:end="21:62"><name pos:start="21:5" pos:end="21:10">av_log</name><argument_list pos:start="21:11" pos:end="21:62">(<argument pos:start="21:12" pos:end="21:15"><expr pos:start="21:12" pos:end="21:15"><name pos:start="21:12" pos:end="21:15">NULL</name></expr></argument>, <argument pos:start="21:18" pos:end="21:29"><expr pos:start="21:18" pos:end="21:29"><name pos:start="21:18" pos:end="21:29">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="21:32" pos:end="21:61"><expr pos:start="21:32" pos:end="21:61"><literal type="string" pos:start="21:32" pos:end="21:61">"Splitting the commandline.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="25:5" pos:end="181:5">while <condition pos:start="25:11" pos:end="25:27">(<expr pos:start="25:12" pos:end="25:26"><name pos:start="25:12" pos:end="25:19">optindex</name> <operator pos:start="25:21" pos:end="25:21">&lt;</operator> <name pos:start="25:23" pos:end="25:26">argc</name></expr>)</condition> <block pos:start="25:29" pos:end="181:5">{<block_content pos:start="27:9" pos:end="179:40">

        <decl_stmt pos:start="27:9" pos:end="27:49"><decl pos:start="27:9" pos:end="27:42"><type pos:start="27:9" pos:end="27:20"><specifier pos:start="27:9" pos:end="27:13">const</specifier> <name pos:start="27:15" pos:end="27:18">char</name> <modifier pos:start="27:20" pos:end="27:20">*</modifier></type><name pos:start="27:21" pos:end="27:23">opt</name> <init pos:start="27:25" pos:end="27:42">= <expr pos:start="27:27" pos:end="27:42"><name pos:start="27:27" pos:end="27:42"><name pos:start="27:27" pos:end="27:30">argv</name><index pos:start="27:31" pos:end="27:42">[<expr pos:start="27:32" pos:end="27:41"><name pos:start="27:32" pos:end="27:39">optindex</name><operator pos:start="27:40" pos:end="27:41">++</operator></expr>]</index></name></expr></init></decl>, <decl pos:start="27:45" pos:end="27:48"><type ref="prev" pos:start="27:9" pos:end="27:20"><modifier pos:start="27:45" pos:end="27:45">*</modifier></type><name pos:start="27:46" pos:end="27:48">arg</name></decl>;</decl_stmt>

        <decl_stmt pos:start="29:9" pos:end="29:28"><decl pos:start="29:9" pos:end="29:27"><type pos:start="29:9" pos:end="29:25"><specifier pos:start="29:9" pos:end="29:13">const</specifier> <name pos:start="29:15" pos:end="29:23">OptionDef</name> <modifier pos:start="29:25" pos:end="29:25">*</modifier></type><name pos:start="29:26" pos:end="29:27">po</name></decl>;</decl_stmt>

        <decl_stmt pos:start="31:9" pos:end="31:16"><decl pos:start="31:9" pos:end="31:15"><type pos:start="31:9" pos:end="31:11"><name pos:start="31:9" pos:end="31:11">int</name></type> <name pos:start="31:13" pos:end="31:15">ret</name></decl>;</decl_stmt>



        <expr_stmt pos:start="35:9" pos:end="35:67"><expr pos:start="35:9" pos:end="35:66"><call pos:start="35:9" pos:end="35:66"><name pos:start="35:9" pos:end="35:14">av_log</name><argument_list pos:start="35:15" pos:end="35:66">(<argument pos:start="35:16" pos:end="35:19"><expr pos:start="35:16" pos:end="35:19"><name pos:start="35:16" pos:end="35:19">NULL</name></expr></argument>, <argument pos:start="35:22" pos:end="35:33"><expr pos:start="35:22" pos:end="35:33"><name pos:start="35:22" pos:end="35:33">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="35:36" pos:end="35:60"><expr pos:start="35:36" pos:end="35:60"><literal type="string" pos:start="35:36" pos:end="35:60">"Reading option '%s' ..."</literal></expr></argument>, <argument pos:start="35:63" pos:end="35:65"><expr pos:start="35:63" pos:end="35:65"><name pos:start="35:63" pos:end="35:65">opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="39:9" pos:end="39:60">/* unnamed group separators, e.g. output filename */</comment>

        <if_stmt pos:start="41:9" pos:end="49:9"><if pos:start="41:9" pos:end="49:9">if <condition pos:start="41:12" pos:end="41:37">(<expr pos:start="41:13" pos:end="41:36"><name pos:start="41:13" pos:end="41:18"><name pos:start="41:13" pos:end="41:15">opt</name><index pos:start="41:16" pos:end="41:18">[<expr pos:start="41:17" pos:end="41:17"><literal type="number" pos:start="41:17" pos:end="41:17">0</literal></expr>]</index></name> <operator pos:start="41:20" pos:end="41:21">!=</operator> <literal type="char" pos:start="41:23" pos:end="41:25">'-'</literal> <operator pos:start="41:27" pos:end="41:28">||</operator> <operator pos:start="41:30" pos:end="41:30">!</operator><name pos:start="41:31" pos:end="41:36"><name pos:start="41:31" pos:end="41:33">opt</name><index pos:start="41:34" pos:end="41:36">[<expr pos:start="41:35" pos:end="41:35"><literal type="number" pos:start="41:35" pos:end="41:35">1</literal></expr>]</index></name></expr>)</condition> <block pos:start="41:39" pos:end="49:9">{<block_content pos:start="43:13" pos:end="47:21">

            <expr_stmt pos:start="43:13" pos:end="43:39"><expr pos:start="43:13" pos:end="43:38"><call pos:start="43:13" pos:end="43:38"><name pos:start="43:13" pos:end="43:24">finish_group</name><argument_list pos:start="43:25" pos:end="43:38">(<argument pos:start="43:26" pos:end="43:29"><expr pos:start="43:26" pos:end="43:29"><name pos:start="43:26" pos:end="43:29">octx</name></expr></argument>, <argument pos:start="43:32" pos:end="43:32"><expr pos:start="43:32" pos:end="43:32"><literal type="number" pos:start="43:32" pos:end="43:32">0</literal></expr></argument>, <argument pos:start="43:35" pos:end="43:37"><expr pos:start="43:35" pos:end="43:37"><name pos:start="43:35" pos:end="43:37">opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:76"><expr pos:start="45:13" pos:end="45:75"><call pos:start="45:13" pos:end="45:75"><name pos:start="45:13" pos:end="45:18">av_log</name><argument_list pos:start="45:19" pos:end="45:75">(<argument pos:start="45:20" pos:end="45:23"><expr pos:start="45:20" pos:end="45:23"><name pos:start="45:20" pos:end="45:23">NULL</name></expr></argument>, <argument pos:start="45:26" pos:end="45:37"><expr pos:start="45:26" pos:end="45:37"><name pos:start="45:26" pos:end="45:37">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="45:40" pos:end="45:58"><expr pos:start="45:40" pos:end="45:58"><literal type="string" pos:start="45:40" pos:end="45:58">" matched as %s.\n"</literal></expr></argument>, <argument pos:start="45:61" pos:end="45:74"><expr pos:start="45:61" pos:end="45:74"><name pos:start="45:61" pos:end="45:69"><name pos:start="45:61" pos:end="45:66">groups</name><index pos:start="45:67" pos:end="45:69">[<expr pos:start="45:68" pos:end="45:68"><literal type="number" pos:start="45:68" pos:end="45:68">0</literal></expr>]</index></name><operator pos:start="45:70" pos:end="45:70">.</operator><name pos:start="45:71" pos:end="45:74">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <continue pos:start="47:13" pos:end="47:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="51:9" pos:end="70:0"><expr pos:start="51:9" pos:end="51:13"><name pos:start="51:9" pos:end="51:11">opt</name><operator pos:start="51:12" pos:end="51:13">++</operator></expr>;</expr_stmt>



<cpp:define pos:start="55:1" pos:end="69:11">#<cpp:directive pos:start="55:2" pos:end="55:7">define</cpp:directive> <cpp:macro pos:start="55:9" pos:end="55:20"><name pos:start="55:9" pos:end="55:15">GET_ARG</name><parameter_list pos:start="55:16" pos:end="55:20">(<parameter pos:start="55:17" pos:end="55:19"><type pos:start="55:17" pos:end="55:19"><name pos:start="55:17" pos:end="55:19">arg</name></type></parameter>)</parameter_list></cpp:macro>                                                           \

<cpp:value pos:start="57:1" pos:end="69:11">do {                                                                           \

    arg = argv[optindex++];                                                    \

    if (!arg) {                                                                \

        av_log(NULL, AV_LOG_ERROR, "Missing argument for option '%s'.\n", opt);\

        return AVERROR(EINVAL);                                                \

    }                                                                          \

} while (0)</cpp:value></cpp:define>



        <comment type="block" pos:start="73:9" pos:end="73:45">/* named group separators, e.g. -i */</comment>

        <if_stmt pos:start="75:9" pos:end="87:9"><if pos:start="75:9" pos:end="87:9">if <condition pos:start="75:12" pos:end="75:60">(<expr pos:start="75:13" pos:end="75:59"><operator pos:start="75:13" pos:end="75:13">(</operator><name pos:start="75:14" pos:end="75:16">ret</name> <operator pos:start="75:18" pos:end="75:18">=</operator> <call pos:start="75:20" pos:end="75:53"><name pos:start="75:20" pos:end="75:40">match_group_separator</name><argument_list pos:start="75:41" pos:end="75:53">(<argument pos:start="75:42" pos:end="75:47"><expr pos:start="75:42" pos:end="75:47"><name pos:start="75:42" pos:end="75:47">groups</name></expr></argument>, <argument pos:start="75:50" pos:end="75:52"><expr pos:start="75:50" pos:end="75:52"><name pos:start="75:50" pos:end="75:52">opt</name></expr></argument>)</argument_list></call><operator pos:start="75:54" pos:end="75:54">)</operator> <operator pos:start="75:56" pos:end="75:57">&gt;=</operator> <literal type="number" pos:start="75:59" pos:end="75:59">0</literal></expr>)</condition> <block pos:start="75:62" pos:end="87:9">{<block_content pos:start="77:13" pos:end="85:21">

            <expr_stmt pos:start="77:13" pos:end="77:25"><expr pos:start="77:13" pos:end="77:24"><call pos:start="77:13" pos:end="77:24"><name pos:start="77:13" pos:end="77:19">GET_ARG</name><argument_list pos:start="77:20" pos:end="77:24">(<argument pos:start="77:21" pos:end="77:23"><expr pos:start="77:21" pos:end="77:23"><name pos:start="77:21" pos:end="77:23">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:41"><expr pos:start="79:13" pos:end="79:40"><call pos:start="79:13" pos:end="79:40"><name pos:start="79:13" pos:end="79:24">finish_group</name><argument_list pos:start="79:25" pos:end="79:40">(<argument pos:start="79:26" pos:end="79:29"><expr pos:start="79:26" pos:end="79:29"><name pos:start="79:26" pos:end="79:29">octx</name></expr></argument>, <argument pos:start="79:32" pos:end="79:34"><expr pos:start="79:32" pos:end="79:34"><name pos:start="79:32" pos:end="79:34">ret</name></expr></argument>, <argument pos:start="79:37" pos:end="79:39"><expr pos:start="79:37" pos:end="79:39"><name pos:start="79:37" pos:end="79:39">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="83:42"><expr pos:start="81:13" pos:end="83:41"><call pos:start="81:13" pos:end="83:41"><name pos:start="81:13" pos:end="81:18">av_log</name><argument_list pos:start="81:19" pos:end="83:41">(<argument pos:start="81:20" pos:end="81:23"><expr pos:start="81:20" pos:end="81:23"><name pos:start="81:20" pos:end="81:23">NULL</name></expr></argument>, <argument pos:start="81:26" pos:end="81:37"><expr pos:start="81:26" pos:end="81:37"><name pos:start="81:26" pos:end="81:37">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="81:40" pos:end="81:77"><expr pos:start="81:40" pos:end="81:77"><literal type="string" pos:start="81:40" pos:end="81:77">" matched as %s with argument '%s'.\n"</literal></expr></argument>,

                   <argument pos:start="83:20" pos:end="83:35"><expr pos:start="83:20" pos:end="83:35"><name pos:start="83:20" pos:end="83:30"><name pos:start="83:20" pos:end="83:25">groups</name><index pos:start="83:26" pos:end="83:30">[<expr pos:start="83:27" pos:end="83:29"><name pos:start="83:27" pos:end="83:29">ret</name></expr>]</index></name><operator pos:start="83:31" pos:end="83:31">.</operator><name pos:start="83:32" pos:end="83:35">name</name></expr></argument>, <argument pos:start="83:38" pos:end="83:40"><expr pos:start="83:38" pos:end="83:40"><name pos:start="83:38" pos:end="83:40">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <continue pos:start="85:13" pos:end="85:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="91:9" pos:end="91:28">/* normal options */</comment>

        <expr_stmt pos:start="93:9" pos:end="93:39"><expr pos:start="93:9" pos:end="93:38"><name pos:start="93:9" pos:end="93:10">po</name> <operator pos:start="93:12" pos:end="93:12">=</operator> <call pos:start="93:14" pos:end="93:38"><name pos:start="93:14" pos:end="93:24">find_option</name><argument_list pos:start="93:25" pos:end="93:38">(<argument pos:start="93:26" pos:end="93:32"><expr pos:start="93:26" pos:end="93:32"><name pos:start="93:26" pos:end="93:32">options</name></expr></argument>, <argument pos:start="93:35" pos:end="93:37"><expr pos:start="93:35" pos:end="93:37"><name pos:start="93:35" pos:end="93:37">opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="95:9" pos:end="123:9"><if pos:start="95:9" pos:end="123:9">if <condition pos:start="95:12" pos:end="95:21">(<expr pos:start="95:13" pos:end="95:20"><name pos:start="95:13" pos:end="95:20"><name pos:start="95:13" pos:end="95:14">po</name><operator pos:start="95:15" pos:end="95:16">-&gt;</operator><name pos:start="95:17" pos:end="95:20">name</name></name></expr>)</condition> <block pos:start="95:23" pos:end="123:9">{<block_content pos:start="97:13" pos:end="121:21">

            <if_stmt pos:start="97:13" pos:end="111:13"><if pos:start="97:13" pos:end="103:13">if <condition pos:start="97:16" pos:end="97:37">(<expr pos:start="97:17" pos:end="97:36"><name pos:start="97:17" pos:end="97:25"><name pos:start="97:17" pos:end="97:18">po</name><operator pos:start="97:19" pos:end="97:20">-&gt;</operator><name pos:start="97:21" pos:end="97:25">flags</name></name> <operator pos:start="97:27" pos:end="97:27">&amp;</operator> <name pos:start="97:29" pos:end="97:36">OPT_EXIT</name></expr>)</condition> <block pos:start="97:39" pos:end="103:13">{<block_content pos:start="101:17" pos:end="101:39">

                <comment type="block" pos:start="99:17" pos:end="99:48">/* optional argument, e.g. -h */</comment>

                <expr_stmt pos:start="101:17" pos:end="101:39"><expr pos:start="101:17" pos:end="101:38"><name pos:start="101:17" pos:end="101:19">arg</name> <operator pos:start="101:21" pos:end="101:21">=</operator> <name pos:start="101:23" pos:end="101:38"><name pos:start="101:23" pos:end="101:26">argv</name><index pos:start="101:27" pos:end="101:38">[<expr pos:start="101:28" pos:end="101:37"><name pos:start="101:28" pos:end="101:35">optindex</name><operator pos:start="101:36" pos:end="101:37">++</operator></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="103:15" pos:end="107:13">else if <condition pos:start="103:23" pos:end="103:43">(<expr pos:start="103:24" pos:end="103:42"><name pos:start="103:24" pos:end="103:32"><name pos:start="103:24" pos:end="103:25">po</name><operator pos:start="103:26" pos:end="103:27">-&gt;</operator><name pos:start="103:28" pos:end="103:32">flags</name></name> <operator pos:start="103:34" pos:end="103:34">&amp;</operator> <name pos:start="103:36" pos:end="103:42">HAS_ARG</name></expr>)</condition> <block pos:start="103:45" pos:end="107:13">{<block_content pos:start="105:17" pos:end="105:29">

                <expr_stmt pos:start="105:17" pos:end="105:29"><expr pos:start="105:17" pos:end="105:28"><call pos:start="105:17" pos:end="105:28"><name pos:start="105:17" pos:end="105:23">GET_ARG</name><argument_list pos:start="105:24" pos:end="105:28">(<argument pos:start="105:25" pos:end="105:27"><expr pos:start="105:25" pos:end="105:27"><name pos:start="105:25" pos:end="105:27">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="107:15" pos:end="111:13">else <block pos:start="107:20" pos:end="111:13">{<block_content pos:start="109:17" pos:end="109:26">

                <expr_stmt pos:start="109:17" pos:end="109:26"><expr pos:start="109:17" pos:end="109:25"><name pos:start="109:17" pos:end="109:19">arg</name> <operator pos:start="109:21" pos:end="109:21">=</operator> <literal type="string" pos:start="109:23" pos:end="109:25">"1"</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <expr_stmt pos:start="115:13" pos:end="115:40"><expr pos:start="115:13" pos:end="115:39"><call pos:start="115:13" pos:end="115:39"><name pos:start="115:13" pos:end="115:19">add_opt</name><argument_list pos:start="115:20" pos:end="115:39">(<argument pos:start="115:21" pos:end="115:24"><expr pos:start="115:21" pos:end="115:24"><name pos:start="115:21" pos:end="115:24">octx</name></expr></argument>, <argument pos:start="115:27" pos:end="115:28"><expr pos:start="115:27" pos:end="115:28"><name pos:start="115:27" pos:end="115:28">po</name></expr></argument>, <argument pos:start="115:31" pos:end="115:33"><expr pos:start="115:31" pos:end="115:33"><name pos:start="115:31" pos:end="115:33">opt</name></expr></argument>, <argument pos:start="115:36" pos:end="115:38"><expr pos:start="115:36" pos:end="115:38"><name pos:start="115:36" pos:end="115:38">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="119:64"><expr pos:start="117:13" pos:end="119:63"><call pos:start="117:13" pos:end="119:63"><name pos:start="117:13" pos:end="117:18">av_log</name><argument_list pos:start="117:19" pos:end="119:63">(<argument pos:start="117:20" pos:end="117:23"><expr pos:start="117:20" pos:end="117:23"><name pos:start="117:20" pos:end="117:23">NULL</name></expr></argument>, <argument pos:start="117:26" pos:end="117:37"><expr pos:start="117:26" pos:end="117:37"><name pos:start="117:26" pos:end="117:37">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="117:40" pos:end="119:37"><expr pos:start="117:40" pos:end="119:37"><literal type="string" pos:start="117:40" pos:end="117:75">" matched as option '%s' (%s) with "</literal>

                   <literal type="string" pos:start="119:20" pos:end="119:37">"argument '%s'.\n"</literal></expr></argument>, <argument pos:start="119:40" pos:end="119:47"><expr pos:start="119:40" pos:end="119:47"><name pos:start="119:40" pos:end="119:47"><name pos:start="119:40" pos:end="119:41">po</name><operator pos:start="119:42" pos:end="119:43">-&gt;</operator><name pos:start="119:44" pos:end="119:47">name</name></name></expr></argument>, <argument pos:start="119:50" pos:end="119:57"><expr pos:start="119:50" pos:end="119:57"><name pos:start="119:50" pos:end="119:57"><name pos:start="119:50" pos:end="119:51">po</name><operator pos:start="119:52" pos:end="119:53">-&gt;</operator><name pos:start="119:54" pos:end="119:57">help</name></name></expr></argument>, <argument pos:start="119:60" pos:end="119:62"><expr pos:start="119:60" pos:end="119:62"><name pos:start="119:60" pos:end="119:62">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <continue pos:start="121:13" pos:end="121:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="127:9" pos:end="127:23">/* AVOptions */</comment>

        <if_stmt pos:start="129:9" pos:end="153:9"><if pos:start="129:9" pos:end="153:9">if <condition pos:start="129:12" pos:end="129:27">(<expr pos:start="129:13" pos:end="129:26"><name pos:start="129:13" pos:end="129:26"><name pos:start="129:13" pos:end="129:16">argv</name><index pos:start="129:17" pos:end="129:26">[<expr pos:start="129:18" pos:end="129:25"><name pos:start="129:18" pos:end="129:25">optindex</name></expr>]</index></name></expr>)</condition> <block pos:start="129:29" pos:end="153:9">{<block_content pos:start="131:13" pos:end="151:13">

            <expr_stmt pos:start="131:13" pos:end="131:57"><expr pos:start="131:13" pos:end="131:56"><name pos:start="131:13" pos:end="131:15">ret</name> <operator pos:start="131:17" pos:end="131:17">=</operator> <call pos:start="131:19" pos:end="131:56"><name pos:start="131:19" pos:end="131:29">opt_default</name><argument_list pos:start="131:30" pos:end="131:56">(<argument pos:start="131:31" pos:end="131:34"><expr pos:start="131:31" pos:end="131:34"><name pos:start="131:31" pos:end="131:34">NULL</name></expr></argument>, <argument pos:start="131:37" pos:end="131:39"><expr pos:start="131:37" pos:end="131:39"><name pos:start="131:37" pos:end="131:39">opt</name></expr></argument>, <argument pos:start="131:42" pos:end="131:55"><expr pos:start="131:42" pos:end="131:55"><name pos:start="131:42" pos:end="131:55"><name pos:start="131:42" pos:end="131:45">argv</name><index pos:start="131:46" pos:end="131:55">[<expr pos:start="131:47" pos:end="131:54"><name pos:start="131:47" pos:end="131:54">optindex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="133:13" pos:end="151:13"><if pos:start="133:13" pos:end="143:13">if <condition pos:start="133:16" pos:end="133:25">(<expr pos:start="133:17" pos:end="133:24"><name pos:start="133:17" pos:end="133:19">ret</name> <operator pos:start="133:21" pos:end="133:22">&gt;=</operator> <literal type="number" pos:start="133:24" pos:end="133:24">0</literal></expr>)</condition> <block pos:start="133:27" pos:end="143:13">{<block_content pos:start="135:17" pos:end="141:25">

                <expr_stmt pos:start="135:17" pos:end="137:64"><expr pos:start="135:17" pos:end="137:63"><call pos:start="135:17" pos:end="137:63"><name pos:start="135:17" pos:end="135:22">av_log</name><argument_list pos:start="135:23" pos:end="137:63">(<argument pos:start="135:24" pos:end="135:27"><expr pos:start="135:24" pos:end="135:27"><name pos:start="135:24" pos:end="135:27">NULL</name></expr></argument>, <argument pos:start="135:30" pos:end="135:41"><expr pos:start="135:30" pos:end="135:41"><name pos:start="135:30" pos:end="135:41">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="135:44" pos:end="137:41"><expr pos:start="135:44" pos:end="137:41"><literal type="string" pos:start="135:44" pos:end="135:76">" matched as AVOption '%s' with "</literal>

                       <literal type="string" pos:start="137:24" pos:end="137:41">"argument '%s'.\n"</literal></expr></argument>, <argument pos:start="137:44" pos:end="137:46"><expr pos:start="137:44" pos:end="137:46"><name pos:start="137:44" pos:end="137:46">opt</name></expr></argument>, <argument pos:start="137:49" pos:end="137:62"><expr pos:start="137:49" pos:end="137:62"><name pos:start="137:49" pos:end="137:62"><name pos:start="137:49" pos:end="137:52">argv</name><index pos:start="137:53" pos:end="137:62">[<expr pos:start="137:54" pos:end="137:61"><name pos:start="137:54" pos:end="137:61">optindex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="139:17" pos:end="139:27"><expr pos:start="139:17" pos:end="139:26"><name pos:start="139:17" pos:end="139:24">optindex</name><operator pos:start="139:25" pos:end="139:26">++</operator></expr>;</expr_stmt>

                <continue pos:start="141:17" pos:end="141:25">continue;</continue>

            </block_content>}</block></if> <if type="elseif" pos:start="143:15" pos:end="151:13">else if <condition pos:start="143:23" pos:end="143:55">(<expr pos:start="143:24" pos:end="143:54"><name pos:start="143:24" pos:end="143:26">ret</name> <operator pos:start="143:28" pos:end="143:29">!=</operator> <name pos:start="143:31" pos:end="143:54">AVERROR_OPTION_NOT_FOUND</name></expr>)</condition> <block pos:start="143:57" pos:end="151:13">{<block_content pos:start="145:17" pos:end="149:27">

                <expr_stmt pos:start="145:17" pos:end="147:69"><expr pos:start="145:17" pos:end="147:68"><call pos:start="145:17" pos:end="147:68"><name pos:start="145:17" pos:end="145:22">av_log</name><argument_list pos:start="145:23" pos:end="147:68">(<argument pos:start="145:24" pos:end="145:27"><expr pos:start="145:24" pos:end="145:27"><name pos:start="145:24" pos:end="145:27">NULL</name></expr></argument>, <argument pos:start="145:30" pos:end="145:41"><expr pos:start="145:30" pos:end="145:41"><name pos:start="145:30" pos:end="145:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="145:44" pos:end="147:46"><expr pos:start="145:44" pos:end="147:46"><literal type="string" pos:start="145:44" pos:end="145:71">"Error parsing option '%s' "</literal>

                       <literal type="string" pos:start="147:24" pos:end="147:46">"with argument '%s'.\n"</literal></expr></argument>, <argument pos:start="147:49" pos:end="147:51"><expr pos:start="147:49" pos:end="147:51"><name pos:start="147:49" pos:end="147:51">opt</name></expr></argument>, <argument pos:start="147:54" pos:end="147:67"><expr pos:start="147:54" pos:end="147:67"><name pos:start="147:54" pos:end="147:67"><name pos:start="147:54" pos:end="147:57">argv</name><index pos:start="147:58" pos:end="147:67">[<expr pos:start="147:59" pos:end="147:66"><name pos:start="147:59" pos:end="147:66">optindex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="149:17" pos:end="149:27">return <expr pos:start="149:24" pos:end="149:26"><name pos:start="149:24" pos:end="149:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="157:9" pos:end="157:36">/* boolean -nofoo options */</comment>

        <if_stmt pos:start="159:9" pos:end="173:9"><if pos:start="159:9" pos:end="173:9">if <condition pos:start="159:12" pos:end="163:45">(<expr pos:start="159:13" pos:end="163:44"><name pos:start="159:13" pos:end="159:18"><name pos:start="159:13" pos:end="159:15">opt</name><index pos:start="159:16" pos:end="159:18">[<expr pos:start="159:17" pos:end="159:17"><literal type="number" pos:start="159:17" pos:end="159:17">0</literal></expr>]</index></name> <operator pos:start="159:20" pos:end="159:21">==</operator> <literal type="char" pos:start="159:23" pos:end="159:25">'n'</literal> <operator pos:start="159:27" pos:end="159:28">&amp;&amp;</operator> <name pos:start="159:30" pos:end="159:35"><name pos:start="159:30" pos:end="159:32">opt</name><index pos:start="159:33" pos:end="159:35">[<expr pos:start="159:34" pos:end="159:34"><literal type="number" pos:start="159:34" pos:end="159:34">1</literal></expr>]</index></name> <operator pos:start="159:37" pos:end="159:38">==</operator> <literal type="char" pos:start="159:40" pos:end="159:42">'o'</literal> <operator pos:start="159:44" pos:end="159:45">&amp;&amp;</operator>

            <operator pos:start="161:13" pos:end="161:13">(</operator><name pos:start="161:14" pos:end="161:15">po</name> <operator pos:start="161:17" pos:end="161:17">=</operator> <call pos:start="161:19" pos:end="161:47"><name pos:start="161:19" pos:end="161:29">find_option</name><argument_list pos:start="161:30" pos:end="161:47">(<argument pos:start="161:31" pos:end="161:37"><expr pos:start="161:31" pos:end="161:37"><name pos:start="161:31" pos:end="161:37">options</name></expr></argument>, <argument pos:start="161:40" pos:end="161:46"><expr pos:start="161:40" pos:end="161:46"><name pos:start="161:40" pos:end="161:42">opt</name> <operator pos:start="161:44" pos:end="161:44">+</operator> <literal type="number" pos:start="161:46" pos:end="161:46">2</literal></expr></argument>)</argument_list></call><operator pos:start="161:48" pos:end="161:48">)</operator> <operator pos:start="161:50" pos:end="161:51">&amp;&amp;</operator>

            <name pos:start="163:13" pos:end="163:20"><name pos:start="163:13" pos:end="163:14">po</name><operator pos:start="163:15" pos:end="163:16">-&gt;</operator><name pos:start="163:17" pos:end="163:20">name</name></name> <operator pos:start="163:22" pos:end="163:23">&amp;&amp;</operator> <name pos:start="163:25" pos:end="163:33"><name pos:start="163:25" pos:end="163:26">po</name><operator pos:start="163:27" pos:end="163:28">-&gt;</operator><name pos:start="163:29" pos:end="163:33">flags</name></name> <operator pos:start="163:35" pos:end="163:35">&amp;</operator> <name pos:start="163:37" pos:end="163:44">OPT_BOOL</name></expr>)</condition> <block pos:start="163:47" pos:end="173:9">{<block_content pos:start="165:13" pos:end="171:21">

            <expr_stmt pos:start="165:13" pos:end="165:40"><expr pos:start="165:13" pos:end="165:39"><call pos:start="165:13" pos:end="165:39"><name pos:start="165:13" pos:end="165:19">add_opt</name><argument_list pos:start="165:20" pos:end="165:39">(<argument pos:start="165:21" pos:end="165:24"><expr pos:start="165:21" pos:end="165:24"><name pos:start="165:21" pos:end="165:24">octx</name></expr></argument>, <argument pos:start="165:27" pos:end="165:28"><expr pos:start="165:27" pos:end="165:28"><name pos:start="165:27" pos:end="165:28">po</name></expr></argument>, <argument pos:start="165:31" pos:end="165:33"><expr pos:start="165:31" pos:end="165:33"><name pos:start="165:31" pos:end="165:33">opt</name></expr></argument>, <argument pos:start="165:36" pos:end="165:38"><expr pos:start="165:36" pos:end="165:38"><literal type="string" pos:start="165:36" pos:end="165:38">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="167:13" pos:end="169:56"><expr pos:start="167:13" pos:end="169:55"><call pos:start="167:13" pos:end="169:55"><name pos:start="167:13" pos:end="167:18">av_log</name><argument_list pos:start="167:19" pos:end="169:55">(<argument pos:start="167:20" pos:end="167:23"><expr pos:start="167:20" pos:end="167:23"><name pos:start="167:20" pos:end="167:23">NULL</name></expr></argument>, <argument pos:start="167:26" pos:end="167:37"><expr pos:start="167:26" pos:end="167:37"><name pos:start="167:26" pos:end="167:37">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="167:40" pos:end="169:34"><expr pos:start="167:40" pos:end="169:34"><literal type="string" pos:start="167:40" pos:end="167:75">" matched as option '%s' (%s) with "</literal>

                   <literal type="string" pos:start="169:20" pos:end="169:34">"argument 0.\n"</literal></expr></argument>, <argument pos:start="169:37" pos:end="169:44"><expr pos:start="169:37" pos:end="169:44"><name pos:start="169:37" pos:end="169:44"><name pos:start="169:37" pos:end="169:38">po</name><operator pos:start="169:39" pos:end="169:40">-&gt;</operator><name pos:start="169:41" pos:end="169:44">name</name></name></expr></argument>, <argument pos:start="169:47" pos:end="169:54"><expr pos:start="169:47" pos:end="169:54"><name pos:start="169:47" pos:end="169:54"><name pos:start="169:47" pos:end="169:48">po</name><operator pos:start="169:49" pos:end="169:50">-&gt;</operator><name pos:start="169:51" pos:end="169:54">help</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <continue pos:start="171:13" pos:end="171:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="177:9" pos:end="177:71"><expr pos:start="177:9" pos:end="177:70"><call pos:start="177:9" pos:end="177:70"><name pos:start="177:9" pos:end="177:14">av_log</name><argument_list pos:start="177:15" pos:end="177:70">(<argument pos:start="177:16" pos:end="177:19"><expr pos:start="177:16" pos:end="177:19"><name pos:start="177:16" pos:end="177:19">NULL</name></expr></argument>, <argument pos:start="177:22" pos:end="177:33"><expr pos:start="177:22" pos:end="177:33"><name pos:start="177:22" pos:end="177:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="177:36" pos:end="177:64"><expr pos:start="177:36" pos:end="177:64"><literal type="string" pos:start="177:36" pos:end="177:64">"Unrecognized option '%s'.\n"</literal></expr></argument>, <argument pos:start="177:67" pos:end="177:69"><expr pos:start="177:67" pos:end="177:69"><name pos:start="177:67" pos:end="177:69">opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="179:9" pos:end="179:40">return <expr pos:start="179:16" pos:end="179:39"><name pos:start="179:16" pos:end="179:39">AVERROR_OPTION_NOT_FOUND</name></expr>;</return>

    </block_content>}</block></while>



    <if_stmt pos:start="185:5" pos:end="189:33"><if pos:start="185:5" pos:end="189:33">if <condition pos:start="185:8" pos:end="185:61">(<expr pos:start="185:9" pos:end="185:60"><name pos:start="185:9" pos:end="185:31"><name pos:start="185:9" pos:end="185:12">octx</name><operator pos:start="185:13" pos:end="185:14">-&gt;</operator><name pos:start="185:15" pos:end="185:23">cur_group</name><operator pos:start="185:24" pos:end="185:24">.</operator><name pos:start="185:25" pos:end="185:31">nb_opts</name></name> <operator pos:start="185:33" pos:end="185:34">||</operator> <name pos:start="185:36" pos:end="185:45">codec_opts</name> <operator pos:start="185:47" pos:end="185:48">||</operator> <name pos:start="185:50" pos:end="185:60">format_opts</name></expr>)</condition><block type="pseudo" pos:start="187:9" pos:end="189:33"><block_content pos:start="187:9" pos:end="189:33">

        <expr_stmt pos:start="187:9" pos:end="189:33"><expr pos:start="187:9" pos:end="189:32"><call pos:start="187:9" pos:end="189:32"><name pos:start="187:9" pos:end="187:14">av_log</name><argument_list pos:start="187:15" pos:end="189:32">(<argument pos:start="187:16" pos:end="187:19"><expr pos:start="187:16" pos:end="187:19"><name pos:start="187:16" pos:end="187:19">NULL</name></expr></argument>, <argument pos:start="187:22" pos:end="187:35"><expr pos:start="187:22" pos:end="187:35"><name pos:start="187:22" pos:end="187:35">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="187:38" pos:end="189:31"><expr pos:start="187:38" pos:end="189:31"><literal type="string" pos:start="187:38" pos:end="187:74">"Trailing options were found on the "</literal>

               <literal type="string" pos:start="189:16" pos:end="189:31">"commandline.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="193:5" pos:end="193:72"><expr pos:start="193:5" pos:end="193:71"><call pos:start="193:5" pos:end="193:71"><name pos:start="193:5" pos:end="193:10">av_log</name><argument_list pos:start="193:11" pos:end="193:71">(<argument pos:start="193:12" pos:end="193:15"><expr pos:start="193:12" pos:end="193:15"><name pos:start="193:12" pos:end="193:15">NULL</name></expr></argument>, <argument pos:start="193:18" pos:end="193:29"><expr pos:start="193:18" pos:end="193:29"><name pos:start="193:18" pos:end="193:29">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="193:32" pos:end="193:70"><expr pos:start="193:32" pos:end="193:70"><literal type="string" pos:start="193:32" pos:end="193:70">"Finished splitting the commandline.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="197:5" pos:end="197:13">return <expr pos:start="197:12" pos:end="197:12"><literal type="number" pos:start="197:12" pos:end="197:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
