<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8572.c" pos:tabs="8"><function pos:start="1:1" pos:end="399:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:19">lx_init</name><parameter_list pos:start="1:20" pos:end="1:68">(<parameter pos:start="1:21" pos:end="1:44"><decl pos:start="1:21" pos:end="1:44"><type pos:start="1:21" pos:end="1:44"><specifier pos:start="1:21" pos:end="1:25">const</specifier> <name pos:start="1:27" pos:end="1:37">LxBoardDesc</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:44">board</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:67"><decl pos:start="1:47" pos:end="1:67"><type pos:start="1:47" pos:end="1:67"><name pos:start="1:47" pos:end="1:58">MachineState</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:67">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="399:1">{<block_content pos:start="7:5" pos:end="397:5">

<cpp:ifdef pos:start="5:1" pos:end="5:29">#<cpp:directive pos:start="5:2" pos:end="5:6">ifdef</cpp:directive> <name pos:start="5:8" pos:end="5:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

    <decl_stmt pos:start="7:5" pos:end="10:0"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">be</name> <init pos:start="7:12" pos:end="7:14">= <expr pos:start="7:14" pos:end="7:14"><literal type="number" pos:start="7:14" pos:end="7:14">1</literal></expr></init></decl>;</decl_stmt>

<cpp:else pos:start="9:1" pos:end="9:5">#<cpp:directive pos:start="9:2" pos:end="9:5">else</cpp:directive></cpp:else>

    <decl_stmt pos:start="11:5" pos:end="14:0"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:10">be</name> <init pos:start="11:12" pos:end="11:14">= <expr pos:start="11:14" pos:end="11:14"><literal type="number" pos:start="11:14" pos:end="11:14">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="13:1" pos:end="13:6">#<cpp:directive pos:start="13:2" pos:end="13:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="15:5" pos:end="15:54"><decl pos:start="15:5" pos:end="15:53"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:16">MemoryRegion</name> <modifier pos:start="15:18" pos:end="15:18">*</modifier></type><name pos:start="15:19" pos:end="15:31">system_memory</name> <init pos:start="15:33" pos:end="15:53">= <expr pos:start="15:35" pos:end="15:53"><call pos:start="15:35" pos:end="15:53"><name pos:start="15:35" pos:end="15:51">get_system_memory</name><argument_list pos:start="15:52" pos:end="15:53">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:13">XtensaCPU</name> <modifier pos:start="17:15" pos:end="17:15">*</modifier></type><name pos:start="17:16" pos:end="17:18">cpu</name> <init pos:start="17:20" pos:end="17:25">= <expr pos:start="17:22" pos:end="17:25"><name pos:start="17:22" pos:end="17:25">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:31"><decl pos:start="19:5" pos:end="19:30"><type pos:start="19:5" pos:end="19:20"><name pos:start="19:5" pos:end="19:18">CPUXtensaState</name> <modifier pos:start="19:20" pos:end="19:20">*</modifier></type><name pos:start="19:21" pos:end="19:23">env</name> <init pos:start="19:25" pos:end="19:30">= <expr pos:start="19:27" pos:end="19:30"><name pos:start="19:27" pos:end="19:30">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:40"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:16">MemoryRegion</name> <modifier pos:start="21:18" pos:end="21:18">*</modifier></type><name pos:start="21:19" pos:end="21:21">ram</name></decl>, <decl pos:start="21:24" pos:end="21:27"><type ref="prev" pos:start="21:5" pos:end="21:18"><modifier pos:start="21:24" pos:end="21:24">*</modifier></type><name pos:start="21:25" pos:end="21:27">rom</name></decl>, <decl pos:start="21:30" pos:end="21:39"><type ref="prev" pos:start="21:5" pos:end="21:18"><modifier pos:start="21:30" pos:end="21:30">*</modifier></type><name pos:start="21:31" pos:end="21:39">system_io</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:21"><decl pos:start="23:5" pos:end="23:20"><type pos:start="23:5" pos:end="23:15"><name pos:start="23:5" pos:end="23:13">DriveInfo</name> <modifier pos:start="23:15" pos:end="23:15">*</modifier></type><name pos:start="23:16" pos:end="23:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:27"><decl pos:start="25:5" pos:end="25:26"><type pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:12">pflash_t</name> <modifier pos:start="25:14" pos:end="25:14">*</modifier></type><name pos:start="25:15" pos:end="25:19">flash</name> <init pos:start="25:21" pos:end="25:26">= <expr pos:start="25:23" pos:end="25:26"><name pos:start="25:23" pos:end="25:26">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:53"><decl pos:start="27:5" pos:end="27:52"><type pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:12">QemuOpts</name> <modifier pos:start="27:14" pos:end="27:14">*</modifier></type><name pos:start="27:15" pos:end="27:26">machine_opts</name> <init pos:start="27:28" pos:end="27:52">= <expr pos:start="27:30" pos:end="27:52"><call pos:start="27:30" pos:end="27:52"><name pos:start="27:30" pos:end="27:50">qemu_get_machine_opts</name><argument_list pos:start="27:51" pos:end="27:52">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:47"><decl pos:start="29:5" pos:end="29:46"><type pos:start="29:5" pos:end="29:16"><specifier pos:start="29:5" pos:end="29:9">const</specifier> <name pos:start="29:11" pos:end="29:14">char</name> <modifier pos:start="29:16" pos:end="29:16">*</modifier></type><name pos:start="29:17" pos:end="29:25">cpu_model</name> <init pos:start="29:27" pos:end="29:46">= <expr pos:start="29:29" pos:end="29:46"><name pos:start="29:29" pos:end="29:46"><name pos:start="29:29" pos:end="29:35">machine</name><operator pos:start="29:36" pos:end="29:37">-&gt;</operator><name pos:start="29:38" pos:end="29:46">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:71"><decl pos:start="31:5" pos:end="31:70"><type pos:start="31:5" pos:end="31:16"><specifier pos:start="31:5" pos:end="31:9">const</specifier> <name pos:start="31:11" pos:end="31:14">char</name> <modifier pos:start="31:16" pos:end="31:16">*</modifier></type><name pos:start="31:17" pos:end="31:31">kernel_filename</name> <init pos:start="31:33" pos:end="31:70">= <expr pos:start="31:35" pos:end="31:70"><call pos:start="31:35" pos:end="31:70"><name pos:start="31:35" pos:end="31:46">qemu_opt_get</name><argument_list pos:start="31:47" pos:end="31:70">(<argument pos:start="31:48" pos:end="31:59"><expr pos:start="31:48" pos:end="31:59"><name pos:start="31:48" pos:end="31:59">machine_opts</name></expr></argument>, <argument pos:start="31:62" pos:end="31:69"><expr pos:start="31:62" pos:end="31:69"><literal type="string" pos:start="31:62" pos:end="31:69">"kernel"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:70"><decl pos:start="33:5" pos:end="33:69"><type pos:start="33:5" pos:end="33:16"><specifier pos:start="33:5" pos:end="33:9">const</specifier> <name pos:start="33:11" pos:end="33:14">char</name> <modifier pos:start="33:16" pos:end="33:16">*</modifier></type><name pos:start="33:17" pos:end="33:30">kernel_cmdline</name> <init pos:start="33:32" pos:end="33:69">= <expr pos:start="33:34" pos:end="33:69"><call pos:start="33:34" pos:end="33:69"><name pos:start="33:34" pos:end="33:45">qemu_opt_get</name><argument_list pos:start="33:46" pos:end="33:69">(<argument pos:start="33:47" pos:end="33:58"><expr pos:start="33:47" pos:end="33:58"><name pos:start="33:47" pos:end="33:58">machine_opts</name></expr></argument>, <argument pos:start="33:61" pos:end="33:68"><expr pos:start="33:61" pos:end="33:68"><literal type="string" pos:start="33:61" pos:end="33:68">"append"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:65"><decl pos:start="35:5" pos:end="35:64"><type pos:start="35:5" pos:end="35:16"><specifier pos:start="35:5" pos:end="35:9">const</specifier> <name pos:start="35:11" pos:end="35:14">char</name> <modifier pos:start="35:16" pos:end="35:16">*</modifier></type><name pos:start="35:17" pos:end="35:28">dtb_filename</name> <init pos:start="35:30" pos:end="35:64">= <expr pos:start="35:32" pos:end="35:64"><call pos:start="35:32" pos:end="35:64"><name pos:start="35:32" pos:end="35:43">qemu_opt_get</name><argument_list pos:start="35:44" pos:end="35:64">(<argument pos:start="35:45" pos:end="35:56"><expr pos:start="35:45" pos:end="35:56"><name pos:start="35:45" pos:end="35:56">machine_opts</name></expr></argument>, <argument pos:start="35:59" pos:end="35:63"><expr pos:start="35:59" pos:end="35:63"><literal type="string" pos:start="35:59" pos:end="35:63">"dtb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:71"><decl pos:start="37:5" pos:end="37:70"><type pos:start="37:5" pos:end="37:16"><specifier pos:start="37:5" pos:end="37:9">const</specifier> <name pos:start="37:11" pos:end="37:14">char</name> <modifier pos:start="37:16" pos:end="37:16">*</modifier></type><name pos:start="37:17" pos:end="37:31">initrd_filename</name> <init pos:start="37:33" pos:end="37:70">= <expr pos:start="37:35" pos:end="37:70"><call pos:start="37:35" pos:end="37:70"><name pos:start="37:35" pos:end="37:46">qemu_opt_get</name><argument_list pos:start="37:47" pos:end="37:70">(<argument pos:start="37:48" pos:end="37:59"><expr pos:start="37:48" pos:end="37:59"><name pos:start="37:48" pos:end="37:59">machine_opts</name></expr></argument>, <argument pos:start="37:62" pos:end="37:69"><expr pos:start="37:62" pos:end="37:69"><literal type="string" pos:start="37:62" pos:end="37:69">"initrd"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:10"><decl pos:start="39:5" pos:end="39:9"><type pos:start="39:5" pos:end="39:7"><name pos:start="39:5" pos:end="39:7">int</name></type> <name pos:start="39:9" pos:end="39:9">n</name></decl>;</decl_stmt>



    <if_stmt pos:start="43:5" pos:end="47:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:19">(<expr pos:start="43:9" pos:end="43:18"><operator pos:start="43:9" pos:end="43:9">!</operator><name pos:start="43:10" pos:end="43:18">cpu_model</name></expr>)</condition> <block pos:start="43:21" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:45">

        <expr_stmt pos:start="45:9" pos:end="45:45"><expr pos:start="45:9" pos:end="45:44"><name pos:start="45:9" pos:end="45:17">cpu_model</name> <operator pos:start="45:19" pos:end="45:19">=</operator> <name pos:start="45:21" pos:end="45:44">XTENSA_DEFAULT_CPU_MODEL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="51:5" pos:end="81:5">for <control pos:start="51:9" pos:end="51:34">(<init pos:start="51:10" pos:end="51:15"><expr pos:start="51:10" pos:end="51:14"><name pos:start="51:10" pos:end="51:10">n</name> <operator pos:start="51:12" pos:end="51:12">=</operator> <literal type="number" pos:start="51:14" pos:end="51:14">0</literal></expr>;</init> <condition pos:start="51:17" pos:end="51:29"><expr pos:start="51:17" pos:end="51:28"><name pos:start="51:17" pos:end="51:17">n</name> <operator pos:start="51:19" pos:end="51:19">&lt;</operator> <name pos:start="51:21" pos:end="51:28">smp_cpus</name></expr>;</condition> <incr pos:start="51:31" pos:end="51:33"><expr pos:start="51:31" pos:end="51:33"><name pos:start="51:31" pos:end="51:31">n</name><operator pos:start="51:32" pos:end="51:33">++</operator></expr></incr>)</control> <block pos:start="51:36" pos:end="81:5">{<block_content pos:start="53:9" pos:end="79:28">

        <expr_stmt pos:start="53:9" pos:end="53:41"><expr pos:start="53:9" pos:end="53:40"><name pos:start="53:9" pos:end="53:11">cpu</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <call pos:start="53:15" pos:end="53:40"><name pos:start="53:15" pos:end="53:29">cpu_xtensa_init</name><argument_list pos:start="53:30" pos:end="53:40">(<argument pos:start="53:31" pos:end="53:39"><expr pos:start="53:31" pos:end="53:39"><name pos:start="53:31" pos:end="53:39">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="55:9" pos:end="63:9"><if pos:start="55:9" pos:end="63:9">if <condition pos:start="55:12" pos:end="55:24">(<expr pos:start="55:13" pos:end="55:23"><name pos:start="55:13" pos:end="55:15">cpu</name> <operator pos:start="55:17" pos:end="55:18">==</operator> <name pos:start="55:20" pos:end="55:23">NULL</name></expr>)</condition> <block pos:start="55:26" pos:end="63:9">{<block_content pos:start="57:13" pos:end="61:31">

            <expr_stmt pos:start="57:13" pos:end="59:36"><expr pos:start="57:13" pos:end="59:35"><call pos:start="57:13" pos:end="59:35"><name pos:start="57:13" pos:end="57:24">error_report</name><argument_list pos:start="57:25" pos:end="59:35">(<argument pos:start="57:26" pos:end="57:63"><expr pos:start="57:26" pos:end="57:63"><literal type="string" pos:start="57:26" pos:end="57:63">"unable to find CPU definition '%s'\n"</literal></expr></argument>,

                         <argument pos:start="59:26" pos:end="59:34"><expr pos:start="59:26" pos:end="59:34"><name pos:start="59:26" pos:end="59:34">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:31"><expr pos:start="61:13" pos:end="61:30"><call pos:start="61:13" pos:end="61:30"><name pos:start="61:13" pos:end="61:16">exit</name><argument_list pos:start="61:17" pos:end="61:30">(<argument pos:start="61:18" pos:end="61:29"><expr pos:start="61:18" pos:end="61:29"><name pos:start="61:18" pos:end="61:29">EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:24"><expr pos:start="65:9" pos:end="65:23"><name pos:start="65:9" pos:end="65:11">env</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <operator pos:start="65:15" pos:end="65:15">&amp;</operator><name pos:start="65:16" pos:end="65:23"><name pos:start="65:16" pos:end="65:18">cpu</name><operator pos:start="65:19" pos:end="65:20">-&gt;</operator><name pos:start="65:21" pos:end="65:23">env</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="69:9" pos:end="69:29"><expr pos:start="69:9" pos:end="69:28"><name pos:start="69:9" pos:end="69:24"><name pos:start="69:9" pos:end="69:11">env</name><operator pos:start="69:12" pos:end="69:13">-&gt;</operator><name pos:start="69:14" pos:end="69:18">sregs</name><index pos:start="69:19" pos:end="69:24">[<expr pos:start="69:20" pos:end="69:23"><name pos:start="69:20" pos:end="69:23">PRID</name></expr>]</index></name> <operator pos:start="69:26" pos:end="69:26">=</operator> <name pos:start="69:28" pos:end="69:28">n</name></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:45"><expr pos:start="71:9" pos:end="71:44"><call pos:start="71:9" pos:end="71:44"><name pos:start="71:9" pos:end="71:27">qemu_register_reset</name><argument_list pos:start="71:28" pos:end="71:44">(<argument pos:start="71:29" pos:end="71:38"><expr pos:start="71:29" pos:end="71:38"><name pos:start="71:29" pos:end="71:38">lx60_reset</name></expr></argument>, <argument pos:start="71:41" pos:end="71:43"><expr pos:start="71:41" pos:end="71:43"><name pos:start="71:41" pos:end="71:43">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="73:9" pos:end="77:11">/* Need MMU initialized prior to ELF loading,

         * so that ELF gets loaded into virtual addresses

         */</comment>

        <expr_stmt pos:start="79:9" pos:end="79:28"><expr pos:start="79:9" pos:end="79:27"><call pos:start="79:9" pos:end="79:27"><name pos:start="79:9" pos:end="79:17">cpu_reset</name><argument_list pos:start="79:18" pos:end="79:27">(<argument pos:start="79:19" pos:end="79:26"><expr pos:start="79:19" pos:end="79:26"><call pos:start="79:19" pos:end="79:26"><name pos:start="79:19" pos:end="79:21">CPU</name><argument_list pos:start="79:22" pos:end="79:26">(<argument pos:start="79:23" pos:end="79:25"><expr pos:start="79:23" pos:end="79:25"><name pos:start="79:23" pos:end="79:25">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="85:5" pos:end="85:33"><expr pos:start="85:5" pos:end="85:32"><name pos:start="85:5" pos:end="85:7">ram</name> <operator pos:start="85:9" pos:end="85:9">=</operator> <call pos:start="85:11" pos:end="85:32"><name pos:start="85:11" pos:end="85:18">g_malloc</name><argument_list pos:start="85:19" pos:end="85:32">(<argument pos:start="85:20" pos:end="85:31"><expr pos:start="85:20" pos:end="85:31"><sizeof pos:start="85:20" pos:end="85:31">sizeof<argument_list pos:start="85:26" pos:end="85:31">(<argument pos:start="85:27" pos:end="85:30"><expr pos:start="85:27" pos:end="85:30"><operator pos:start="85:27" pos:end="85:27">*</operator><name pos:start="85:28" pos:end="85:30">ram</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="89:41"><expr pos:start="87:5" pos:end="89:40"><call pos:start="87:5" pos:end="89:40"><name pos:start="87:5" pos:end="87:26">memory_region_init_ram</name><argument_list pos:start="87:27" pos:end="89:40">(<argument pos:start="87:28" pos:end="87:30"><expr pos:start="87:28" pos:end="87:30"><name pos:start="87:28" pos:end="87:30">ram</name></expr></argument>, <argument pos:start="87:33" pos:end="87:36"><expr pos:start="87:33" pos:end="87:36"><name pos:start="87:33" pos:end="87:36">NULL</name></expr></argument>, <argument pos:start="87:39" pos:end="87:49"><expr pos:start="87:39" pos:end="87:49"><literal type="string" pos:start="87:39" pos:end="87:49">"lx60.dram"</literal></expr></argument>, <argument pos:start="87:52" pos:end="87:68"><expr pos:start="87:52" pos:end="87:68"><name pos:start="87:52" pos:end="87:68"><name pos:start="87:52" pos:end="87:58">machine</name><operator pos:start="87:59" pos:end="87:60">-&gt;</operator><name pos:start="87:61" pos:end="87:68">ram_size</name></name></expr></argument>,

                           <argument pos:start="89:28" pos:end="89:39"><expr pos:start="89:28" pos:end="89:39"><operator pos:start="89:28" pos:end="89:28">&amp;</operator><name pos:start="89:29" pos:end="89:39">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:37"><expr pos:start="91:5" pos:end="91:36"><call pos:start="91:5" pos:end="91:36"><name pos:start="91:5" pos:end="91:31">vmstate_register_ram_global</name><argument_list pos:start="91:32" pos:end="91:36">(<argument pos:start="91:33" pos:end="91:35"><expr pos:start="91:33" pos:end="91:35"><name pos:start="91:33" pos:end="91:35">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:55"><expr pos:start="93:5" pos:end="93:54"><call pos:start="93:5" pos:end="93:54"><name pos:start="93:5" pos:end="93:31">memory_region_add_subregion</name><argument_list pos:start="93:32" pos:end="93:54">(<argument pos:start="93:33" pos:end="93:45"><expr pos:start="93:33" pos:end="93:45"><name pos:start="93:33" pos:end="93:45">system_memory</name></expr></argument>, <argument pos:start="93:48" pos:end="93:48"><expr pos:start="93:48" pos:end="93:48"><literal type="number" pos:start="93:48" pos:end="93:48">0</literal></expr></argument>, <argument pos:start="93:51" pos:end="93:53"><expr pos:start="93:51" pos:end="93:53"><name pos:start="93:51" pos:end="93:53">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:45"><expr pos:start="97:5" pos:end="97:44"><name pos:start="97:5" pos:end="97:13">system_io</name> <operator pos:start="97:15" pos:end="97:15">=</operator> <call pos:start="97:17" pos:end="97:44"><name pos:start="97:17" pos:end="97:24">g_malloc</name><argument_list pos:start="97:25" pos:end="97:44">(<argument pos:start="97:26" pos:end="97:43"><expr pos:start="97:26" pos:end="97:43"><sizeof pos:start="97:26" pos:end="97:43">sizeof<argument_list pos:start="97:32" pos:end="97:43">(<argument pos:start="97:33" pos:end="97:42"><expr pos:start="97:33" pos:end="97:42"><operator pos:start="97:33" pos:end="97:33">*</operator><name pos:start="97:34" pos:end="97:42">system_io</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:70"><expr pos:start="99:5" pos:end="99:69"><call pos:start="99:5" pos:end="99:69"><name pos:start="99:5" pos:end="99:22">memory_region_init</name><argument_list pos:start="99:23" pos:end="99:69">(<argument pos:start="99:24" pos:end="99:32"><expr pos:start="99:24" pos:end="99:32"><name pos:start="99:24" pos:end="99:32">system_io</name></expr></argument>, <argument pos:start="99:35" pos:end="99:38"><expr pos:start="99:35" pos:end="99:38"><name pos:start="99:35" pos:end="99:38">NULL</name></expr></argument>, <argument pos:start="99:41" pos:end="99:49"><expr pos:start="99:41" pos:end="99:49"><literal type="string" pos:start="99:41" pos:end="99:49">"lx60.io"</literal></expr></argument>, <argument pos:start="99:52" pos:end="99:68"><expr pos:start="99:52" pos:end="99:68"><literal type="number" pos:start="99:52" pos:end="99:54">224</literal> <operator pos:start="99:56" pos:end="99:56">*</operator> <literal type="number" pos:start="99:58" pos:end="99:61">1024</literal> <operator pos:start="99:63" pos:end="99:63">*</operator> <literal type="number" pos:start="99:65" pos:end="99:68">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:70"><expr pos:start="101:5" pos:end="101:69"><call pos:start="101:5" pos:end="101:69"><name pos:start="101:5" pos:end="101:31">memory_region_add_subregion</name><argument_list pos:start="101:32" pos:end="101:69">(<argument pos:start="101:33" pos:end="101:45"><expr pos:start="101:33" pos:end="101:45"><name pos:start="101:33" pos:end="101:45">system_memory</name></expr></argument>, <argument pos:start="101:48" pos:end="101:57"><expr pos:start="101:48" pos:end="101:57"><literal type="number" pos:start="101:48" pos:end="101:57">0xf0000000</literal></expr></argument>, <argument pos:start="101:60" pos:end="101:68"><expr pos:start="101:60" pos:end="101:68"><name pos:start="101:60" pos:end="101:68">system_io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:42"><expr pos:start="103:5" pos:end="103:41"><call pos:start="103:5" pos:end="103:41"><name pos:start="103:5" pos:end="103:18">lx60_fpga_init</name><argument_list pos:start="103:19" pos:end="103:41">(<argument pos:start="103:20" pos:end="103:28"><expr pos:start="103:20" pos:end="103:28"><name pos:start="103:20" pos:end="103:28">system_io</name></expr></argument>, <argument pos:start="103:31" pos:end="103:40"><expr pos:start="103:31" pos:end="103:40"><literal type="number" pos:start="103:31" pos:end="103:40">0x0d020000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="105:5" pos:end="111:5"><if pos:start="105:5" pos:end="111:5">if <condition pos:start="105:8" pos:end="105:25">(<expr pos:start="105:9" pos:end="105:24"><name pos:start="105:9" pos:end="105:19"><name pos:start="105:9" pos:end="105:16">nd_table</name><index pos:start="105:17" pos:end="105:19">[<expr pos:start="105:18" pos:end="105:18"><literal type="number" pos:start="105:18" pos:end="105:18">0</literal></expr>]</index></name><operator pos:start="105:20" pos:end="105:20">.</operator><name pos:start="105:21" pos:end="105:24">used</name></expr>)</condition> <block pos:start="105:27" pos:end="111:5">{<block_content pos:start="107:9" pos:end="109:53">

        <expr_stmt pos:start="107:9" pos:end="109:53"><expr pos:start="107:9" pos:end="109:52"><call pos:start="107:9" pos:end="109:52"><name pos:start="107:9" pos:end="107:21">lx60_net_init</name><argument_list pos:start="107:22" pos:end="109:52">(<argument pos:start="107:23" pos:end="107:31"><expr pos:start="107:23" pos:end="107:31"><name pos:start="107:23" pos:end="107:31">system_io</name></expr></argument>, <argument pos:start="107:34" pos:end="107:43"><expr pos:start="107:34" pos:end="107:43"><literal type="number" pos:start="107:34" pos:end="107:43">0x0d030000</literal></expr></argument>, <argument pos:start="107:46" pos:end="107:55"><expr pos:start="107:46" pos:end="107:55"><literal type="number" pos:start="107:46" pos:end="107:55">0x0d030400</literal></expr></argument>, <argument pos:start="107:58" pos:end="107:67"><expr pos:start="107:58" pos:end="107:67"><literal type="number" pos:start="107:58" pos:end="107:67">0x0d800000</literal></expr></argument>,

                <argument pos:start="109:17" pos:end="109:41"><expr pos:start="109:17" pos:end="109:41"><call pos:start="109:17" pos:end="109:41"><name pos:start="109:17" pos:end="109:33">xtensa_get_extint</name><argument_list pos:start="109:34" pos:end="109:41">(<argument pos:start="109:35" pos:end="109:37"><expr pos:start="109:35" pos:end="109:37"><name pos:start="109:35" pos:end="109:37">env</name></expr></argument>, <argument pos:start="109:40" pos:end="109:40"><expr pos:start="109:40" pos:end="109:40"><literal type="number" pos:start="109:40" pos:end="109:40">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="109:44" pos:end="109:51"><expr pos:start="109:44" pos:end="109:51"><name pos:start="109:44" pos:end="109:51">nd_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="115:5" pos:end="119:5"><if pos:start="115:5" pos:end="119:5">if <condition pos:start="115:8" pos:end="115:23">(<expr pos:start="115:9" pos:end="115:22"><operator pos:start="115:9" pos:end="115:9">!</operator><name pos:start="115:10" pos:end="115:22"><name pos:start="115:10" pos:end="115:19">serial_hds</name><index pos:start="115:20" pos:end="115:22">[<expr pos:start="115:21" pos:end="115:21"><literal type="number" pos:start="115:21" pos:end="115:21">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="115:25" pos:end="119:5">{<block_content pos:start="117:9" pos:end="117:62">

        <expr_stmt pos:start="117:9" pos:end="117:62"><expr pos:start="117:9" pos:end="117:61"><name pos:start="117:9" pos:end="117:21"><name pos:start="117:9" pos:end="117:18">serial_hds</name><index pos:start="117:19" pos:end="117:21">[<expr pos:start="117:20" pos:end="117:20"><literal type="number" pos:start="117:20" pos:end="117:20">0</literal></expr>]</index></name> <operator pos:start="117:23" pos:end="117:23">=</operator> <call pos:start="117:25" pos:end="117:61"><name pos:start="117:25" pos:end="117:36">qemu_chr_new</name><argument_list pos:start="117:37" pos:end="117:61">(<argument pos:start="117:38" pos:end="117:46"><expr pos:start="117:38" pos:end="117:46"><literal type="string" pos:start="117:38" pos:end="117:46">"serial0"</literal></expr></argument>, <argument pos:start="117:49" pos:end="117:54"><expr pos:start="117:49" pos:end="117:54"><literal type="string" pos:start="117:49" pos:end="117:54">"null"</literal></expr></argument>, <argument pos:start="117:57" pos:end="117:60"><expr pos:start="117:57" pos:end="117:60"><name pos:start="117:57" pos:end="117:60">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="123:5" pos:end="125:57"><expr pos:start="123:5" pos:end="125:56"><call pos:start="123:5" pos:end="125:56"><name pos:start="123:5" pos:end="123:18">serial_mm_init</name><argument_list pos:start="123:19" pos:end="125:56">(<argument pos:start="123:20" pos:end="123:28"><expr pos:start="123:20" pos:end="123:28"><name pos:start="123:20" pos:end="123:28">system_io</name></expr></argument>, <argument pos:start="123:31" pos:end="123:40"><expr pos:start="123:31" pos:end="123:40"><literal type="number" pos:start="123:31" pos:end="123:40">0x0d050020</literal></expr></argument>, <argument pos:start="123:43" pos:end="123:43"><expr pos:start="123:43" pos:end="123:43"><literal type="number" pos:start="123:43" pos:end="123:43">2</literal></expr></argument>, <argument pos:start="123:46" pos:end="123:70"><expr pos:start="123:46" pos:end="123:70"><call pos:start="123:46" pos:end="123:70"><name pos:start="123:46" pos:end="123:62">xtensa_get_extint</name><argument_list pos:start="123:63" pos:end="123:70">(<argument pos:start="123:64" pos:end="123:66"><expr pos:start="123:64" pos:end="123:66"><name pos:start="123:64" pos:end="123:66">env</name></expr></argument>, <argument pos:start="123:69" pos:end="123:69"><expr pos:start="123:69" pos:end="123:69"><literal type="number" pos:start="123:69" pos:end="123:69">0</literal></expr></argument>)</argument_list></call></expr></argument>,

            <argument pos:start="125:13" pos:end="125:18"><expr pos:start="125:13" pos:end="125:18"><literal type="number" pos:start="125:13" pos:end="125:18">115200</literal></expr></argument>, <argument pos:start="125:21" pos:end="125:33"><expr pos:start="125:21" pos:end="125:33"><name pos:start="125:21" pos:end="125:33"><name pos:start="125:21" pos:end="125:30">serial_hds</name><index pos:start="125:31" pos:end="125:33">[<expr pos:start="125:32" pos:end="125:32"><literal type="number" pos:start="125:32" pos:end="125:32">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="125:36" pos:end="125:55"><expr pos:start="125:36" pos:end="125:55"><name pos:start="125:36" pos:end="125:55">DEVICE_NATIVE_ENDIAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="129:5" pos:end="129:39"><expr pos:start="129:5" pos:end="129:38"><name pos:start="129:5" pos:end="129:9">dinfo</name> <operator pos:start="129:11" pos:end="129:11">=</operator> <call pos:start="129:13" pos:end="129:38"><name pos:start="129:13" pos:end="129:21">drive_get</name><argument_list pos:start="129:22" pos:end="129:38">(<argument pos:start="129:23" pos:end="129:31"><expr pos:start="129:23" pos:end="129:31"><name pos:start="129:23" pos:end="129:31">IF_PFLASH</name></expr></argument>, <argument pos:start="129:34" pos:end="129:34"><expr pos:start="129:34" pos:end="129:34"><literal type="number" pos:start="129:34" pos:end="129:34">0</literal></expr></argument>, <argument pos:start="129:37" pos:end="129:37"><expr pos:start="129:37" pos:end="129:37"><literal type="number" pos:start="129:37" pos:end="129:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="131:5" pos:end="153:5"><if pos:start="131:5" pos:end="153:5">if <condition pos:start="131:8" pos:end="131:14">(<expr pos:start="131:9" pos:end="131:13"><name pos:start="131:9" pos:end="131:13">dinfo</name></expr>)</condition> <block pos:start="131:16" pos:end="153:5">{<block_content pos:start="133:9" pos:end="151:9">

        <expr_stmt pos:start="133:9" pos:end="143:55"><expr pos:start="133:9" pos:end="143:54"><name pos:start="133:9" pos:end="133:13">flash</name> <operator pos:start="133:15" pos:end="133:15">=</operator> <call pos:start="133:17" pos:end="143:54"><name pos:start="133:17" pos:end="133:37">pflash_cfi01_register</name><argument_list pos:start="133:38" pos:end="143:54">(<argument pos:start="133:39" pos:end="133:55"><expr pos:start="133:39" pos:end="133:55"><name pos:start="133:39" pos:end="133:55"><name pos:start="133:39" pos:end="133:43">board</name><operator pos:start="133:44" pos:end="133:45">-&gt;</operator><name pos:start="133:46" pos:end="133:55">flash_base</name></name></expr></argument>,

                <argument pos:start="135:17" pos:end="135:20"><expr pos:start="135:17" pos:end="135:20"><name pos:start="135:17" pos:end="135:20">NULL</name></expr></argument>, <argument pos:start="135:23" pos:end="135:37"><expr pos:start="135:23" pos:end="135:37"><literal type="string" pos:start="135:23" pos:end="135:37">"lx60.io.flash"</literal></expr></argument>, <argument pos:start="135:40" pos:end="135:56"><expr pos:start="135:40" pos:end="135:56"><name pos:start="135:40" pos:end="135:56"><name pos:start="135:40" pos:end="135:44">board</name><operator pos:start="135:45" pos:end="135:46">-&gt;</operator><name pos:start="135:47" pos:end="135:56">flash_size</name></name></expr></argument>,

                <argument pos:start="137:17" pos:end="137:50"><expr pos:start="137:17" pos:end="137:50"><call pos:start="137:17" pos:end="137:50"><name pos:start="137:17" pos:end="137:22">blk_bs</name><argument_list pos:start="137:23" pos:end="137:50">(<argument pos:start="137:24" pos:end="137:49"><expr pos:start="137:24" pos:end="137:49"><call pos:start="137:24" pos:end="137:49"><name pos:start="137:24" pos:end="137:42">blk_by_legacy_dinfo</name><argument_list pos:start="137:43" pos:end="137:49">(<argument pos:start="137:44" pos:end="137:48"><expr pos:start="137:44" pos:end="137:48"><name pos:start="137:44" pos:end="137:48">dinfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                <argument pos:start="139:17" pos:end="139:40"><expr pos:start="139:17" pos:end="139:40"><name pos:start="139:17" pos:end="139:40"><name pos:start="139:17" pos:end="139:21">board</name><operator pos:start="139:22" pos:end="139:23">-&gt;</operator><name pos:start="139:24" pos:end="139:40">flash_sector_size</name></name></expr></argument>,

                <argument pos:start="141:17" pos:end="141:60"><expr pos:start="141:17" pos:end="141:60"><name pos:start="141:17" pos:end="141:33"><name pos:start="141:17" pos:end="141:21">board</name><operator pos:start="141:22" pos:end="141:23">-&gt;</operator><name pos:start="141:24" pos:end="141:33">flash_size</name></name> <operator pos:start="141:35" pos:end="141:35">/</operator> <name pos:start="141:37" pos:end="141:60"><name pos:start="141:37" pos:end="141:41">board</name><operator pos:start="141:42" pos:end="141:43">-&gt;</operator><name pos:start="141:44" pos:end="141:60">flash_sector_size</name></name></expr></argument>,

                <argument pos:start="143:17" pos:end="143:17"><expr pos:start="143:17" pos:end="143:17"><literal type="number" pos:start="143:17" pos:end="143:17">4</literal></expr></argument>, <argument pos:start="143:20" pos:end="143:25"><expr pos:start="143:20" pos:end="143:25"><literal type="number" pos:start="143:20" pos:end="143:25">0x0000</literal></expr></argument>, <argument pos:start="143:28" pos:end="143:33"><expr pos:start="143:28" pos:end="143:33"><literal type="number" pos:start="143:28" pos:end="143:33">0x0000</literal></expr></argument>, <argument pos:start="143:36" pos:end="143:41"><expr pos:start="143:36" pos:end="143:41"><literal type="number" pos:start="143:36" pos:end="143:41">0x0000</literal></expr></argument>, <argument pos:start="143:44" pos:end="143:49"><expr pos:start="143:44" pos:end="143:49"><literal type="number" pos:start="143:44" pos:end="143:49">0x0000</literal></expr></argument>, <argument pos:start="143:52" pos:end="143:53"><expr pos:start="143:52" pos:end="143:53"><name pos:start="143:52" pos:end="143:53">be</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="145:9" pos:end="151:9"><if pos:start="145:9" pos:end="151:9">if <condition pos:start="145:12" pos:end="145:26">(<expr pos:start="145:13" pos:end="145:25"><name pos:start="145:13" pos:end="145:17">flash</name> <operator pos:start="145:19" pos:end="145:20">==</operator> <name pos:start="145:22" pos:end="145:25">NULL</name></expr>)</condition> <block pos:start="145:28" pos:end="151:9">{<block_content pos:start="147:13" pos:end="149:31">

            <expr_stmt pos:start="147:13" pos:end="147:53"><expr pos:start="147:13" pos:end="147:52"><call pos:start="147:13" pos:end="147:52"><name pos:start="147:13" pos:end="147:24">error_report</name><argument_list pos:start="147:25" pos:end="147:52">(<argument pos:start="147:26" pos:end="147:51"><expr pos:start="147:26" pos:end="147:51"><literal type="string" pos:start="147:26" pos:end="147:51">"unable to mount pflash\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:31"><expr pos:start="149:13" pos:end="149:30"><call pos:start="149:13" pos:end="149:30"><name pos:start="149:13" pos:end="149:16">exit</name><argument_list pos:start="149:17" pos:end="149:30">(<argument pos:start="149:18" pos:end="149:29"><expr pos:start="149:18" pos:end="149:29"><name pos:start="149:18" pos:end="149:29">EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="157:5" pos:end="157:70">/* Use presence of kernel file name as 'boot from SRAM' switch. */</comment>

    <if_stmt pos:start="159:5" pos:end="397:5"><if pos:start="159:5" pos:end="373:5">if <condition pos:start="159:8" pos:end="159:24">(<expr pos:start="159:9" pos:end="159:23"><name pos:start="159:9" pos:end="159:23">kernel_filename</name></expr>)</condition> <block pos:start="159:26" pos:end="373:5">{<block_content pos:start="161:9" pos:end="371:9">

        <decl_stmt pos:start="161:9" pos:end="161:39"><decl pos:start="161:9" pos:end="161:38"><type pos:start="161:9" pos:end="161:16"><name pos:start="161:9" pos:end="161:16">uint32_t</name></type> <name pos:start="161:18" pos:end="161:28">entry_point</name> <init pos:start="161:30" pos:end="161:38">= <expr pos:start="161:32" pos:end="161:38"><name pos:start="161:32" pos:end="161:38"><name pos:start="161:32" pos:end="161:34">env</name><operator pos:start="161:35" pos:end="161:36">-&gt;</operator><name pos:start="161:37" pos:end="161:38">pc</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="163:9" pos:end="163:45"><decl pos:start="163:9" pos:end="163:44"><type pos:start="163:9" pos:end="163:14"><name pos:start="163:9" pos:end="163:14">size_t</name></type> <name pos:start="163:16" pos:end="163:22">bp_size</name> <init pos:start="163:24" pos:end="163:44">= <expr pos:start="163:26" pos:end="163:44"><literal type="number" pos:start="163:26" pos:end="163:26">3</literal> <operator pos:start="163:28" pos:end="163:28">*</operator> <call pos:start="163:30" pos:end="163:44"><name pos:start="163:30" pos:end="163:41">get_tag_size</name><argument_list pos:start="163:42" pos:end="163:44">(<argument pos:start="163:43" pos:end="163:43"><expr pos:start="163:43" pos:end="163:43"><literal type="number" pos:start="163:43" pos:end="163:43">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="163:47" pos:end="163:78">/* first/last and memory tags */</comment>

        <decl_stmt pos:start="165:9" pos:end="165:56"><decl pos:start="165:9" pos:end="165:55"><type pos:start="165:9" pos:end="165:16"><name pos:start="165:9" pos:end="165:16">uint32_t</name></type> <name pos:start="165:18" pos:end="165:23">tagptr</name> <init pos:start="165:25" pos:end="165:55">= <expr pos:start="165:27" pos:end="165:55"><literal type="number" pos:start="165:27" pos:end="165:38">0xfe000000</literal> <operator pos:start="165:38" pos:end="165:38">+</operator> <name pos:start="165:40" pos:end="165:55"><name pos:start="165:40" pos:end="165:44">board</name><operator pos:start="165:45" pos:end="165:46">-&gt;</operator><name pos:start="165:47" pos:end="165:55">sram_size</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="167:9" pos:end="167:28"><decl pos:start="167:9" pos:end="167:27"><type pos:start="167:9" pos:end="167:16"><name pos:start="167:9" pos:end="167:16">uint32_t</name></type> <name pos:start="167:18" pos:end="167:27">cur_tagptr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="169:9" pos:end="177:10"><decl pos:start="169:9" pos:end="177:9"><type pos:start="169:9" pos:end="169:17"><name pos:start="169:9" pos:end="169:17">BpMemInfo</name></type> <name pos:start="169:19" pos:end="169:33">memory_location</name> <init pos:start="169:35" pos:end="177:9">= <expr pos:start="169:37" pos:end="177:9"><block pos:start="169:37" pos:end="177:9">{

            <expr pos:start="171:13" pos:end="171:53"><operator pos:start="171:13" pos:end="171:13">.</operator><name pos:start="171:14" pos:end="171:17">type</name> <operator pos:start="171:19" pos:end="171:19">=</operator> <call pos:start="171:21" pos:end="171:53"><name pos:start="171:21" pos:end="171:27">tswap32</name><argument_list pos:start="171:28" pos:end="171:53">(<argument pos:start="171:29" pos:end="171:52"><expr pos:start="171:29" pos:end="171:52"><name pos:start="171:29" pos:end="171:52">MEMORY_TYPE_CONVENTIONAL</name></expr></argument>)</argument_list></call></expr>,

            <expr pos:start="173:13" pos:end="173:31"><operator pos:start="173:13" pos:end="173:13">.</operator><name pos:start="173:14" pos:end="173:18">start</name> <operator pos:start="173:20" pos:end="173:20">=</operator> <call pos:start="173:22" pos:end="173:31"><name pos:start="173:22" pos:end="173:28">tswap32</name><argument_list pos:start="173:29" pos:end="173:31">(<argument pos:start="173:30" pos:end="173:30"><expr pos:start="173:30" pos:end="173:30"><literal type="number" pos:start="173:30" pos:end="173:30">0</literal></expr></argument>)</argument_list></call></expr>,

            <expr pos:start="175:13" pos:end="175:45"><operator pos:start="175:13" pos:end="175:13">.</operator><name pos:start="175:14" pos:end="175:16">end</name> <operator pos:start="175:18" pos:end="175:18">=</operator> <call pos:start="175:20" pos:end="175:45"><name pos:start="175:20" pos:end="175:26">tswap32</name><argument_list pos:start="175:27" pos:end="175:45">(<argument pos:start="175:28" pos:end="175:44"><expr pos:start="175:28" pos:end="175:44"><name pos:start="175:28" pos:end="175:44"><name pos:start="175:28" pos:end="175:34">machine</name><operator pos:start="175:35" pos:end="175:36">-&gt;</operator><name pos:start="175:37" pos:end="175:44">ram_size</name></name></expr></argument>)</argument_list></call></expr>,

        }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="179:9" pos:end="181:43"><decl pos:start="179:9" pos:end="181:42"><type pos:start="179:9" pos:end="179:16"><name pos:start="179:9" pos:end="179:16">uint32_t</name></type> <name pos:start="179:18" pos:end="179:27">lowmem_end</name> <init pos:start="179:29" pos:end="181:42">= <expr pos:start="179:31" pos:end="181:42"><ternary pos:start="179:31" pos:end="181:42"><condition pos:start="179:31" pos:end="179:62"><expr pos:start="179:31" pos:end="179:60"><name pos:start="179:31" pos:end="179:47"><name pos:start="179:31" pos:end="179:37">machine</name><operator pos:start="179:38" pos:end="179:39">-&gt;</operator><name pos:start="179:40" pos:end="179:47">ram_size</name></name> <operator pos:start="179:49" pos:end="179:49">&lt;</operator> <literal type="number" pos:start="179:51" pos:end="179:60">0x08000000</literal></expr> ?</condition><then pos:start="181:13" pos:end="181:29">

            <expr pos:start="181:13" pos:end="181:29"><name pos:start="181:13" pos:end="181:29"><name pos:start="181:13" pos:end="181:19">machine</name><operator pos:start="181:20" pos:end="181:21">-&gt;</operator><name pos:start="181:22" pos:end="181:29">ram_size</name></name></expr> </then><else pos:start="181:31" pos:end="181:42">: <expr pos:start="181:33" pos:end="181:42"><literal type="number" pos:start="181:33" pos:end="181:42">0x08000000</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="183:9" pos:end="183:66"><decl pos:start="183:9" pos:end="183:65"><type pos:start="183:9" pos:end="183:16"><name pos:start="183:9" pos:end="183:16">uint32_t</name></type> <name pos:start="183:18" pos:end="183:27">cur_lowmem</name> <init pos:start="183:29" pos:end="183:65">= <expr pos:start="183:31" pos:end="183:65"><call pos:start="183:31" pos:end="183:65"><name pos:start="183:31" pos:end="183:43">QEMU_ALIGN_UP</name><argument_list pos:start="183:44" pos:end="183:65">(<argument pos:start="183:45" pos:end="183:58"><expr pos:start="183:45" pos:end="183:58"><name pos:start="183:45" pos:end="183:54">lowmem_end</name> <operator pos:start="183:56" pos:end="183:56">/</operator> <literal type="number" pos:start="183:58" pos:end="183:58">2</literal></expr></argument>, <argument pos:start="183:61" pos:end="183:64"><expr pos:start="183:61" pos:end="183:64"><literal type="number" pos:start="183:61" pos:end="183:64">4096</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="187:9" pos:end="187:37"><expr pos:start="187:9" pos:end="187:36"><name pos:start="187:9" pos:end="187:11">rom</name> <operator pos:start="187:13" pos:end="187:13">=</operator> <call pos:start="187:15" pos:end="187:36"><name pos:start="187:15" pos:end="187:22">g_malloc</name><argument_list pos:start="187:23" pos:end="187:36">(<argument pos:start="187:24" pos:end="187:35"><expr pos:start="187:24" pos:end="187:35"><sizeof pos:start="187:24" pos:end="187:35">sizeof<argument_list pos:start="187:30" pos:end="187:35">(<argument pos:start="187:31" pos:end="187:34"><expr pos:start="187:31" pos:end="187:34"><operator pos:start="187:31" pos:end="187:31">*</operator><name pos:start="187:32" pos:end="187:34">rom</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="191:45"><expr pos:start="189:9" pos:end="191:44"><call pos:start="189:9" pos:end="191:44"><name pos:start="189:9" pos:end="189:30">memory_region_init_ram</name><argument_list pos:start="189:31" pos:end="191:44">(<argument pos:start="189:32" pos:end="189:34"><expr pos:start="189:32" pos:end="189:34"><name pos:start="189:32" pos:end="189:34">rom</name></expr></argument>, <argument pos:start="189:37" pos:end="189:40"><expr pos:start="189:37" pos:end="189:40"><name pos:start="189:37" pos:end="189:40">NULL</name></expr></argument>, <argument pos:start="189:43" pos:end="189:53"><expr pos:start="189:43" pos:end="189:53"><literal type="string" pos:start="189:43" pos:end="189:53">"lx60.sram"</literal></expr></argument>, <argument pos:start="189:56" pos:end="189:71"><expr pos:start="189:56" pos:end="189:71"><name pos:start="189:56" pos:end="189:71"><name pos:start="189:56" pos:end="189:60">board</name><operator pos:start="189:61" pos:end="189:62">-&gt;</operator><name pos:start="189:63" pos:end="189:71">sram_size</name></name></expr></argument>,

                               <argument pos:start="191:32" pos:end="191:43"><expr pos:start="191:32" pos:end="191:43"><operator pos:start="191:32" pos:end="191:32">&amp;</operator><name pos:start="191:33" pos:end="191:43">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:41"><expr pos:start="193:9" pos:end="193:40"><call pos:start="193:9" pos:end="193:40"><name pos:start="193:9" pos:end="193:35">vmstate_register_ram_global</name><argument_list pos:start="193:36" pos:end="193:40">(<argument pos:start="193:37" pos:end="193:39"><expr pos:start="193:37" pos:end="193:39"><name pos:start="193:37" pos:end="193:39">rom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="195:9" pos:end="195:68"><expr pos:start="195:9" pos:end="195:67"><call pos:start="195:9" pos:end="195:67"><name pos:start="195:9" pos:end="195:35">memory_region_add_subregion</name><argument_list pos:start="195:36" pos:end="195:67">(<argument pos:start="195:37" pos:end="195:49"><expr pos:start="195:37" pos:end="195:49"><name pos:start="195:37" pos:end="195:49">system_memory</name></expr></argument>, <argument pos:start="195:52" pos:end="195:61"><expr pos:start="195:52" pos:end="195:61"><literal type="number" pos:start="195:52" pos:end="195:61">0xfe000000</literal></expr></argument>, <argument pos:start="195:64" pos:end="195:66"><expr pos:start="195:64" pos:end="195:66"><name pos:start="195:64" pos:end="195:66">rom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="199:9" pos:end="203:9"><if pos:start="199:9" pos:end="203:9">if <condition pos:start="199:12" pos:end="199:27">(<expr pos:start="199:13" pos:end="199:26"><name pos:start="199:13" pos:end="199:26">kernel_cmdline</name></expr>)</condition> <block pos:start="199:29" pos:end="203:9">{<block_content pos:start="201:13" pos:end="201:64">

            <expr_stmt pos:start="201:13" pos:end="201:64"><expr pos:start="201:13" pos:end="201:63"><name pos:start="201:13" pos:end="201:19">bp_size</name> <operator pos:start="201:21" pos:end="201:22">+=</operator> <call pos:start="201:24" pos:end="201:63"><name pos:start="201:24" pos:end="201:35">get_tag_size</name><argument_list pos:start="201:36" pos:end="201:63">(<argument pos:start="201:37" pos:end="201:62"><expr pos:start="201:37" pos:end="201:62"><call pos:start="201:37" pos:end="201:58"><name pos:start="201:37" pos:end="201:42">strlen</name><argument_list pos:start="201:43" pos:end="201:58">(<argument pos:start="201:44" pos:end="201:57"><expr pos:start="201:44" pos:end="201:57"><name pos:start="201:44" pos:end="201:57">kernel_cmdline</name></expr></argument>)</argument_list></call> <operator pos:start="201:60" pos:end="201:60">+</operator> <literal type="number" pos:start="201:62" pos:end="201:62">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="205:9" pos:end="209:9"><if pos:start="205:9" pos:end="209:9">if <condition pos:start="205:12" pos:end="205:25">(<expr pos:start="205:13" pos:end="205:24"><name pos:start="205:13" pos:end="205:24">dtb_filename</name></expr>)</condition> <block pos:start="205:27" pos:end="209:9">{<block_content pos:start="207:13" pos:end="207:54">

            <expr_stmt pos:start="207:13" pos:end="207:54"><expr pos:start="207:13" pos:end="207:53"><name pos:start="207:13" pos:end="207:19">bp_size</name> <operator pos:start="207:21" pos:end="207:22">+=</operator> <call pos:start="207:24" pos:end="207:53"><name pos:start="207:24" pos:end="207:35">get_tag_size</name><argument_list pos:start="207:36" pos:end="207:53">(<argument pos:start="207:37" pos:end="207:52"><expr pos:start="207:37" pos:end="207:52"><sizeof pos:start="207:37" pos:end="207:52">sizeof<argument_list pos:start="207:43" pos:end="207:52">(<argument pos:start="207:44" pos:end="207:51"><expr pos:start="207:44" pos:end="207:51"><name pos:start="207:44" pos:end="207:51">uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="211:9" pos:end="215:9"><if pos:start="211:9" pos:end="215:9">if <condition pos:start="211:12" pos:end="211:28">(<expr pos:start="211:13" pos:end="211:27"><name pos:start="211:13" pos:end="211:27">initrd_filename</name></expr>)</condition> <block pos:start="211:30" pos:end="215:9">{<block_content pos:start="213:13" pos:end="213:55">

            <expr_stmt pos:start="213:13" pos:end="213:55"><expr pos:start="213:13" pos:end="213:54"><name pos:start="213:13" pos:end="213:19">bp_size</name> <operator pos:start="213:21" pos:end="213:22">+=</operator> <call pos:start="213:24" pos:end="213:54"><name pos:start="213:24" pos:end="213:35">get_tag_size</name><argument_list pos:start="213:36" pos:end="213:54">(<argument pos:start="213:37" pos:end="213:53"><expr pos:start="213:37" pos:end="213:53"><sizeof pos:start="213:37" pos:end="213:53">sizeof<argument_list pos:start="213:43" pos:end="213:53">(<argument pos:start="213:44" pos:end="213:52"><expr pos:start="213:44" pos:end="213:52"><name pos:start="213:44" pos:end="213:52">BpMemInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="219:9" pos:end="219:63">/* Put kernel bootparameters to the end of that SRAM */</comment>

        <expr_stmt pos:start="221:9" pos:end="221:44"><expr pos:start="221:9" pos:end="221:43"><name pos:start="221:9" pos:end="221:14">tagptr</name> <operator pos:start="221:16" pos:end="221:16">=</operator> <operator pos:start="221:18" pos:end="221:18">(</operator><name pos:start="221:19" pos:end="221:24">tagptr</name> <operator pos:start="221:26" pos:end="221:26">-</operator> <name pos:start="221:28" pos:end="221:34">bp_size</name><operator pos:start="221:35" pos:end="221:35">)</operator> <operator pos:start="221:37" pos:end="221:37">&amp;</operator> <operator pos:start="221:39" pos:end="221:39">~</operator><literal type="number" pos:start="221:40" pos:end="221:43">0xff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="223:9" pos:end="223:60"><expr pos:start="223:9" pos:end="223:59"><name pos:start="223:9" pos:end="223:18">cur_tagptr</name> <operator pos:start="223:20" pos:end="223:20">=</operator> <call pos:start="223:22" pos:end="223:59"><name pos:start="223:22" pos:end="223:28">put_tag</name><argument_list pos:start="223:29" pos:end="223:59">(<argument pos:start="223:30" pos:end="223:35"><expr pos:start="223:30" pos:end="223:35"><name pos:start="223:30" pos:end="223:35">tagptr</name></expr></argument>, <argument pos:start="223:38" pos:end="223:49"><expr pos:start="223:38" pos:end="223:49"><name pos:start="223:38" pos:end="223:49">BP_TAG_FIRST</name></expr></argument>, <argument pos:start="223:52" pos:end="223:52"><expr pos:start="223:52" pos:end="223:52"><literal type="number" pos:start="223:52" pos:end="223:52">0</literal></expr></argument>, <argument pos:start="223:55" pos:end="223:58"><expr pos:start="223:55" pos:end="223:58"><name pos:start="223:55" pos:end="223:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="225:9" pos:end="227:72"><expr pos:start="225:9" pos:end="227:71"><name pos:start="225:9" pos:end="225:18">cur_tagptr</name> <operator pos:start="225:20" pos:end="225:20">=</operator> <call pos:start="225:22" pos:end="227:71"><name pos:start="225:22" pos:end="225:28">put_tag</name><argument_list pos:start="225:29" pos:end="227:71">(<argument pos:start="225:30" pos:end="225:39"><expr pos:start="225:30" pos:end="225:39"><name pos:start="225:30" pos:end="225:39">cur_tagptr</name></expr></argument>, <argument pos:start="225:42" pos:end="225:54"><expr pos:start="225:42" pos:end="225:54"><name pos:start="225:42" pos:end="225:54">BP_TAG_MEMORY</name></expr></argument>,

                             <argument pos:start="227:30" pos:end="227:52"><expr pos:start="227:30" pos:end="227:52"><sizeof pos:start="227:30" pos:end="227:52">sizeof<argument_list pos:start="227:36" pos:end="227:52">(<argument pos:start="227:37" pos:end="227:51"><expr pos:start="227:37" pos:end="227:51"><name pos:start="227:37" pos:end="227:51">memory_location</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="227:55" pos:end="227:70"><expr pos:start="227:55" pos:end="227:70"><operator pos:start="227:55" pos:end="227:55">&amp;</operator><name pos:start="227:56" pos:end="227:70">memory_location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="231:9" pos:end="237:9"><if pos:start="231:9" pos:end="237:9">if <condition pos:start="231:12" pos:end="231:27">(<expr pos:start="231:13" pos:end="231:26"><name pos:start="231:13" pos:end="231:26">kernel_cmdline</name></expr>)</condition> <block pos:start="231:29" pos:end="237:9">{<block_content pos:start="233:13" pos:end="235:77">

            <expr_stmt pos:start="233:13" pos:end="235:77"><expr pos:start="233:13" pos:end="235:76"><name pos:start="233:13" pos:end="233:22">cur_tagptr</name> <operator pos:start="233:24" pos:end="233:24">=</operator> <call pos:start="233:26" pos:end="235:76"><name pos:start="233:26" pos:end="233:32">put_tag</name><argument_list pos:start="233:33" pos:end="235:76">(<argument pos:start="233:34" pos:end="233:43"><expr pos:start="233:34" pos:end="233:43"><name pos:start="233:34" pos:end="233:43">cur_tagptr</name></expr></argument>, <argument pos:start="233:46" pos:end="233:64"><expr pos:start="233:46" pos:end="233:64"><name pos:start="233:46" pos:end="233:64">BP_TAG_COMMAND_LINE</name></expr></argument>,

                                 <argument pos:start="235:34" pos:end="235:59"><expr pos:start="235:34" pos:end="235:59"><call pos:start="235:34" pos:end="235:55"><name pos:start="235:34" pos:end="235:39">strlen</name><argument_list pos:start="235:40" pos:end="235:55">(<argument pos:start="235:41" pos:end="235:54"><expr pos:start="235:41" pos:end="235:54"><name pos:start="235:41" pos:end="235:54">kernel_cmdline</name></expr></argument>)</argument_list></call> <operator pos:start="235:57" pos:end="235:57">+</operator> <literal type="number" pos:start="235:59" pos:end="235:59">1</literal></expr></argument>, <argument pos:start="235:62" pos:end="235:75"><expr pos:start="235:62" pos:end="235:75"><name pos:start="235:62" pos:end="235:75">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="239:9" pos:end="267:9"><if pos:start="239:9" pos:end="267:9">if <condition pos:start="239:12" pos:end="239:25">(<expr pos:start="239:13" pos:end="239:24"><name pos:start="239:13" pos:end="239:24">dtb_filename</name></expr>)</condition> <block pos:start="239:27" pos:end="267:9">{<block_content pos:start="241:13" pos:end="265:68">

            <decl_stmt pos:start="241:13" pos:end="241:25"><decl pos:start="241:13" pos:end="241:24"><type pos:start="241:13" pos:end="241:15"><name pos:start="241:13" pos:end="241:15">int</name></type> <name pos:start="241:17" pos:end="241:24">fdt_size</name></decl>;</decl_stmt>

            <decl_stmt pos:start="243:13" pos:end="243:66"><decl pos:start="243:13" pos:end="243:65"><type pos:start="243:13" pos:end="243:18"><name pos:start="243:13" pos:end="243:16">void</name> <modifier pos:start="243:18" pos:end="243:18">*</modifier></type><name pos:start="243:19" pos:end="243:21">fdt</name> <init pos:start="243:23" pos:end="243:65">= <expr pos:start="243:25" pos:end="243:65"><call pos:start="243:25" pos:end="243:65"><name pos:start="243:25" pos:end="243:40">load_device_tree</name><argument_list pos:start="243:41" pos:end="243:65">(<argument pos:start="243:42" pos:end="243:53"><expr pos:start="243:42" pos:end="243:53"><name pos:start="243:42" pos:end="243:53">dtb_filename</name></expr></argument>, <argument pos:start="243:56" pos:end="243:64"><expr pos:start="243:56" pos:end="243:64"><operator pos:start="243:56" pos:end="243:56">&amp;</operator><name pos:start="243:57" pos:end="243:64">fdt_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="245:13" pos:end="245:52"><decl pos:start="245:13" pos:end="245:51"><type pos:start="245:13" pos:end="245:20"><name pos:start="245:13" pos:end="245:20">uint32_t</name></type> <name pos:start="245:22" pos:end="245:29">dtb_addr</name> <init pos:start="245:31" pos:end="245:51">= <expr pos:start="245:33" pos:end="245:51"><call pos:start="245:33" pos:end="245:51"><name pos:start="245:33" pos:end="245:39">tswap32</name><argument_list pos:start="245:40" pos:end="245:51">(<argument pos:start="245:41" pos:end="245:50"><expr pos:start="245:41" pos:end="245:50"><name pos:start="245:41" pos:end="245:50">cur_lowmem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="249:13" pos:end="255:13"><if pos:start="249:13" pos:end="255:13">if <condition pos:start="249:16" pos:end="249:21">(<expr pos:start="249:17" pos:end="249:20"><operator pos:start="249:17" pos:end="249:17">!</operator><name pos:start="249:18" pos:end="249:20">fdt</name></expr>)</condition> <block pos:start="249:23" pos:end="255:13">{<block_content pos:start="251:17" pos:end="253:35">

                <expr_stmt pos:start="251:17" pos:end="251:72"><expr pos:start="251:17" pos:end="251:71"><call pos:start="251:17" pos:end="251:71"><name pos:start="251:17" pos:end="251:28">error_report</name><argument_list pos:start="251:29" pos:end="251:71">(<argument pos:start="251:30" pos:end="251:56"><expr pos:start="251:30" pos:end="251:56"><literal type="string" pos:start="251:30" pos:end="251:56">"could not load DTB '%s'\n"</literal></expr></argument>, <argument pos:start="251:59" pos:end="251:70"><expr pos:start="251:59" pos:end="251:70"><name pos:start="251:59" pos:end="251:70">dtb_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="253:17" pos:end="253:35"><expr pos:start="253:17" pos:end="253:34"><call pos:start="253:17" pos:end="253:34"><name pos:start="253:17" pos:end="253:20">exit</name><argument_list pos:start="253:21" pos:end="253:34">(<argument pos:start="253:22" pos:end="253:33"><expr pos:start="253:22" pos:end="253:33"><name pos:start="253:22" pos:end="253:33">EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="259:13" pos:end="259:65"><expr pos:start="259:13" pos:end="259:64"><call pos:start="259:13" pos:end="259:64"><name pos:start="259:13" pos:end="259:37">cpu_physical_memory_write</name><argument_list pos:start="259:38" pos:end="259:64">(<argument pos:start="259:39" pos:end="259:48"><expr pos:start="259:39" pos:end="259:48"><name pos:start="259:39" pos:end="259:48">cur_lowmem</name></expr></argument>, <argument pos:start="259:51" pos:end="259:53"><expr pos:start="259:51" pos:end="259:53"><name pos:start="259:51" pos:end="259:53">fdt</name></expr></argument>, <argument pos:start="259:56" pos:end="259:63"><expr pos:start="259:56" pos:end="259:63"><name pos:start="259:56" pos:end="259:63">fdt_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="261:13" pos:end="263:62"><expr pos:start="261:13" pos:end="263:61"><name pos:start="261:13" pos:end="261:22">cur_tagptr</name> <operator pos:start="261:24" pos:end="261:24">=</operator> <call pos:start="261:26" pos:end="263:61"><name pos:start="261:26" pos:end="261:32">put_tag</name><argument_list pos:start="261:33" pos:end="263:61">(<argument pos:start="261:34" pos:end="261:43"><expr pos:start="261:34" pos:end="261:43"><name pos:start="261:34" pos:end="261:43">cur_tagptr</name></expr></argument>, <argument pos:start="261:46" pos:end="261:55"><expr pos:start="261:46" pos:end="261:55"><name pos:start="261:46" pos:end="261:55">BP_TAG_FDT</name></expr></argument>,

                                 <argument pos:start="263:34" pos:end="263:49"><expr pos:start="263:34" pos:end="263:49"><sizeof pos:start="263:34" pos:end="263:49">sizeof<argument_list pos:start="263:40" pos:end="263:49">(<argument pos:start="263:41" pos:end="263:48"><expr pos:start="263:41" pos:end="263:48"><name pos:start="263:41" pos:end="263:48">dtb_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="263:52" pos:end="263:60"><expr pos:start="263:52" pos:end="263:60"><operator pos:start="263:52" pos:end="263:52">&amp;</operator><name pos:start="263:53" pos:end="263:60">dtb_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="265:13" pos:end="265:68"><expr pos:start="265:13" pos:end="265:67"><name pos:start="265:13" pos:end="265:22">cur_lowmem</name> <operator pos:start="265:24" pos:end="265:24">=</operator> <call pos:start="265:26" pos:end="265:67"><name pos:start="265:26" pos:end="265:38">QEMU_ALIGN_UP</name><argument_list pos:start="265:39" pos:end="265:67">(<argument pos:start="265:40" pos:end="265:60"><expr pos:start="265:40" pos:end="265:60"><name pos:start="265:40" pos:end="265:49">cur_lowmem</name> <operator pos:start="265:51" pos:end="265:51">+</operator> <name pos:start="265:53" pos:end="265:60">fdt_size</name></expr></argument>, <argument pos:start="265:63" pos:end="265:66"><expr pos:start="265:63" pos:end="265:66"><literal type="number" pos:start="265:63" pos:end="265:66">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="269:9" pos:end="307:9"><if pos:start="269:9" pos:end="307:9">if <condition pos:start="269:12" pos:end="269:28">(<expr pos:start="269:13" pos:end="269:27"><name pos:start="269:13" pos:end="269:27">initrd_filename</name></expr>)</condition> <block pos:start="269:30" pos:end="307:9">{<block_content pos:start="271:13" pos:end="305:71">

            <decl_stmt pos:start="271:13" pos:end="271:46"><decl pos:start="271:13" pos:end="271:45"><type pos:start="271:13" pos:end="271:21"><name pos:start="271:13" pos:end="271:21">BpMemInfo</name></type> <name pos:start="271:23" pos:end="271:37">initrd_location</name> <init pos:start="271:39" pos:end="271:45">= <expr pos:start="271:41" pos:end="271:45"><block pos:start="271:41" pos:end="271:45">{ <expr pos:start="271:43" pos:end="271:43"><literal type="number" pos:start="271:43" pos:end="271:43">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="273:13" pos:end="275:68"><decl pos:start="273:13" pos:end="275:67"><type pos:start="273:13" pos:end="273:15"><name pos:start="273:13" pos:end="273:15">int</name></type> <name pos:start="273:17" pos:end="273:27">initrd_size</name> <init pos:start="273:29" pos:end="275:67">= <expr pos:start="273:31" pos:end="275:67"><call pos:start="273:31" pos:end="275:67"><name pos:start="273:31" pos:end="273:42">load_ramdisk</name><argument_list pos:start="273:43" pos:end="275:67">(<argument pos:start="273:44" pos:end="273:58"><expr pos:start="273:44" pos:end="273:58"><name pos:start="273:44" pos:end="273:58">initrd_filename</name></expr></argument>, <argument pos:start="273:61" pos:end="273:70"><expr pos:start="273:61" pos:end="273:70"><name pos:start="273:61" pos:end="273:70">cur_lowmem</name></expr></argument>,

                                           <argument pos:start="275:44" pos:end="275:66"><expr pos:start="275:44" pos:end="275:66"><name pos:start="275:44" pos:end="275:53">lowmem_end</name> <operator pos:start="275:55" pos:end="275:55">-</operator> <name pos:start="275:57" pos:end="275:66">cur_lowmem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="279:13" pos:end="287:13"><if pos:start="279:13" pos:end="287:13">if <condition pos:start="279:16" pos:end="279:32">(<expr pos:start="279:17" pos:end="279:31"><name pos:start="279:17" pos:end="279:27">initrd_size</name> <operator pos:start="279:29" pos:end="279:29">&lt;</operator> <literal type="number" pos:start="279:31" pos:end="279:31">0</literal></expr>)</condition> <block pos:start="279:34" pos:end="287:13">{<block_content pos:start="281:17" pos:end="285:75">

                <expr_stmt pos:start="281:17" pos:end="285:75"><expr pos:start="281:17" pos:end="285:74"><name pos:start="281:17" pos:end="281:27">initrd_size</name> <operator pos:start="281:29" pos:end="281:29">=</operator> <call pos:start="281:31" pos:end="285:74"><name pos:start="281:31" pos:end="281:49">load_image_targphys</name><argument_list pos:start="281:50" pos:end="285:74">(<argument pos:start="281:51" pos:end="281:65"><expr pos:start="281:51" pos:end="281:65"><name pos:start="281:51" pos:end="281:65">initrd_filename</name></expr></argument>,

                                                  <argument pos:start="283:51" pos:end="283:60"><expr pos:start="283:51" pos:end="283:60"><name pos:start="283:51" pos:end="283:60">cur_lowmem</name></expr></argument>,

                                                  <argument pos:start="285:51" pos:end="285:73"><expr pos:start="285:51" pos:end="285:73"><name pos:start="285:51" pos:end="285:60">lowmem_end</name> <operator pos:start="285:62" pos:end="285:62">-</operator> <name pos:start="285:64" pos:end="285:73">cur_lowmem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="289:13" pos:end="295:13"><if pos:start="289:13" pos:end="295:13">if <condition pos:start="289:16" pos:end="289:32">(<expr pos:start="289:17" pos:end="289:31"><name pos:start="289:17" pos:end="289:27">initrd_size</name> <operator pos:start="289:29" pos:end="289:29">&lt;</operator> <literal type="number" pos:start="289:31" pos:end="289:31">0</literal></expr>)</condition> <block pos:start="289:34" pos:end="295:13">{<block_content pos:start="291:17" pos:end="293:35">

                <expr_stmt pos:start="291:17" pos:end="291:78"><expr pos:start="291:17" pos:end="291:77"><call pos:start="291:17" pos:end="291:77"><name pos:start="291:17" pos:end="291:28">error_report</name><argument_list pos:start="291:29" pos:end="291:77">(<argument pos:start="291:30" pos:end="291:59"><expr pos:start="291:30" pos:end="291:59"><literal type="string" pos:start="291:30" pos:end="291:59">"could not load initrd '%s'\n"</literal></expr></argument>, <argument pos:start="291:62" pos:end="291:76"><expr pos:start="291:62" pos:end="291:76"><name pos:start="291:62" pos:end="291:76">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="293:17" pos:end="293:35"><expr pos:start="293:17" pos:end="293:34"><call pos:start="293:17" pos:end="293:34"><name pos:start="293:17" pos:end="293:20">exit</name><argument_list pos:start="293:21" pos:end="293:34">(<argument pos:start="293:22" pos:end="293:33"><expr pos:start="293:22" pos:end="293:33"><name pos:start="293:22" pos:end="293:33">EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="297:13" pos:end="297:56"><expr pos:start="297:13" pos:end="297:55"><name pos:start="297:13" pos:end="297:33"><name pos:start="297:13" pos:end="297:27">initrd_location</name><operator pos:start="297:28" pos:end="297:28">.</operator><name pos:start="297:29" pos:end="297:33">start</name></name> <operator pos:start="297:35" pos:end="297:35">=</operator> <call pos:start="297:37" pos:end="297:55"><name pos:start="297:37" pos:end="297:43">tswap32</name><argument_list pos:start="297:44" pos:end="297:55">(<argument pos:start="297:45" pos:end="297:54"><expr pos:start="297:45" pos:end="297:54"><name pos:start="297:45" pos:end="297:54">cur_lowmem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="299:13" pos:end="299:68"><expr pos:start="299:13" pos:end="299:67"><name pos:start="299:13" pos:end="299:31"><name pos:start="299:13" pos:end="299:27">initrd_location</name><operator pos:start="299:28" pos:end="299:28">.</operator><name pos:start="299:29" pos:end="299:31">end</name></name> <operator pos:start="299:33" pos:end="299:33">=</operator> <call pos:start="299:35" pos:end="299:67"><name pos:start="299:35" pos:end="299:41">tswap32</name><argument_list pos:start="299:42" pos:end="299:67">(<argument pos:start="299:43" pos:end="299:66"><expr pos:start="299:43" pos:end="299:66"><name pos:start="299:43" pos:end="299:52">cur_lowmem</name> <operator pos:start="299:54" pos:end="299:54">+</operator> <name pos:start="299:56" pos:end="299:66">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="301:13" pos:end="303:76"><expr pos:start="301:13" pos:end="303:75"><name pos:start="301:13" pos:end="301:22">cur_tagptr</name> <operator pos:start="301:24" pos:end="301:24">=</operator> <call pos:start="301:26" pos:end="303:75"><name pos:start="301:26" pos:end="301:32">put_tag</name><argument_list pos:start="301:33" pos:end="303:75">(<argument pos:start="301:34" pos:end="301:43"><expr pos:start="301:34" pos:end="301:43"><name pos:start="301:34" pos:end="301:43">cur_tagptr</name></expr></argument>, <argument pos:start="301:46" pos:end="301:58"><expr pos:start="301:46" pos:end="301:58"><name pos:start="301:46" pos:end="301:58">BP_TAG_INITRD</name></expr></argument>,

                                 <argument pos:start="303:34" pos:end="303:56"><expr pos:start="303:34" pos:end="303:56"><sizeof pos:start="303:34" pos:end="303:56">sizeof<argument_list pos:start="303:40" pos:end="303:56">(<argument pos:start="303:41" pos:end="303:55"><expr pos:start="303:41" pos:end="303:55"><name pos:start="303:41" pos:end="303:55">initrd_location</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="303:59" pos:end="303:74"><expr pos:start="303:59" pos:end="303:74"><operator pos:start="303:59" pos:end="303:59">&amp;</operator><name pos:start="303:60" pos:end="303:74">initrd_location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="305:13" pos:end="305:71"><expr pos:start="305:13" pos:end="305:70"><name pos:start="305:13" pos:end="305:22">cur_lowmem</name> <operator pos:start="305:24" pos:end="305:24">=</operator> <call pos:start="305:26" pos:end="305:70"><name pos:start="305:26" pos:end="305:38">QEMU_ALIGN_UP</name><argument_list pos:start="305:39" pos:end="305:70">(<argument pos:start="305:40" pos:end="305:63"><expr pos:start="305:40" pos:end="305:63"><name pos:start="305:40" pos:end="305:49">cur_lowmem</name> <operator pos:start="305:51" pos:end="305:51">+</operator> <name pos:start="305:53" pos:end="305:63">initrd_size</name></expr></argument>, <argument pos:start="305:66" pos:end="305:69"><expr pos:start="305:66" pos:end="305:69"><literal type="number" pos:start="305:66" pos:end="305:69">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="309:9" pos:end="309:63"><expr pos:start="309:9" pos:end="309:62"><name pos:start="309:9" pos:end="309:18">cur_tagptr</name> <operator pos:start="309:20" pos:end="309:20">=</operator> <call pos:start="309:22" pos:end="309:62"><name pos:start="309:22" pos:end="309:28">put_tag</name><argument_list pos:start="309:29" pos:end="309:62">(<argument pos:start="309:30" pos:end="309:39"><expr pos:start="309:30" pos:end="309:39"><name pos:start="309:30" pos:end="309:39">cur_tagptr</name></expr></argument>, <argument pos:start="309:42" pos:end="309:52"><expr pos:start="309:42" pos:end="309:52"><name pos:start="309:42" pos:end="309:52">BP_TAG_LAST</name></expr></argument>, <argument pos:start="309:55" pos:end="309:55"><expr pos:start="309:55" pos:end="309:55"><literal type="number" pos:start="309:55" pos:end="309:55">0</literal></expr></argument>, <argument pos:start="309:58" pos:end="309:61"><expr pos:start="309:58" pos:end="309:61"><name pos:start="309:58" pos:end="309:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="311:9" pos:end="311:30"><expr pos:start="311:9" pos:end="311:29"><name pos:start="311:9" pos:end="311:20"><name pos:start="311:9" pos:end="311:11">env</name><operator pos:start="311:12" pos:end="311:13">-&gt;</operator><name pos:start="311:14" pos:end="311:17">regs</name><index pos:start="311:18" pos:end="311:20">[<expr pos:start="311:19" pos:end="311:19"><literal type="number" pos:start="311:19" pos:end="311:19">2</literal></expr>]</index></name> <operator pos:start="311:22" pos:end="311:22">=</operator> <name pos:start="311:24" pos:end="311:29">tagptr</name></expr>;</expr_stmt>



        <decl_stmt pos:start="315:9" pos:end="315:27"><decl pos:start="315:9" pos:end="315:26"><type pos:start="315:9" pos:end="315:16"><name pos:start="315:9" pos:end="315:16">uint64_t</name></type> <name pos:start="315:18" pos:end="315:26">elf_entry</name></decl>;</decl_stmt>

        <decl_stmt pos:start="317:9" pos:end="317:29"><decl pos:start="317:9" pos:end="317:28"><type pos:start="317:9" pos:end="317:16"><name pos:start="317:9" pos:end="317:16">uint64_t</name></type> <name pos:start="317:18" pos:end="317:28">elf_lowaddr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="319:9" pos:end="321:68"><decl pos:start="319:9" pos:end="321:67"><type pos:start="319:9" pos:end="319:11"><name pos:start="319:9" pos:end="319:11">int</name></type> <name pos:start="319:13" pos:end="319:19">success</name> <init pos:start="319:21" pos:end="321:67">= <expr pos:start="319:23" pos:end="321:67"><call pos:start="319:23" pos:end="321:67"><name pos:start="319:23" pos:end="319:30">load_elf</name><argument_list pos:start="319:31" pos:end="321:67">(<argument pos:start="319:32" pos:end="319:46"><expr pos:start="319:32" pos:end="319:46"><name pos:start="319:32" pos:end="319:46">kernel_filename</name></expr></argument>, <argument pos:start="319:49" pos:end="319:67"><expr pos:start="319:49" pos:end="319:67"><name pos:start="319:49" pos:end="319:67">translate_phys_addr</name></expr></argument>, <argument pos:start="319:70" pos:end="319:72"><expr pos:start="319:70" pos:end="319:72"><name pos:start="319:70" pos:end="319:72">cpu</name></expr></argument>,

                <argument pos:start="321:17" pos:end="321:26"><expr pos:start="321:17" pos:end="321:26"><operator pos:start="321:17" pos:end="321:17">&amp;</operator><name pos:start="321:18" pos:end="321:26">elf_entry</name></expr></argument>, <argument pos:start="321:29" pos:end="321:40"><expr pos:start="321:29" pos:end="321:40"><operator pos:start="321:29" pos:end="321:29">&amp;</operator><name pos:start="321:30" pos:end="321:40">elf_lowaddr</name></expr></argument>, <argument pos:start="321:43" pos:end="321:46"><expr pos:start="321:43" pos:end="321:46"><name pos:start="321:43" pos:end="321:46">NULL</name></expr></argument>, <argument pos:start="321:49" pos:end="321:50"><expr pos:start="321:49" pos:end="321:50"><name pos:start="321:49" pos:end="321:50">be</name></expr></argument>, <argument pos:start="321:53" pos:end="321:63"><expr pos:start="321:53" pos:end="321:63"><name pos:start="321:53" pos:end="321:63">ELF_MACHINE</name></expr></argument>, <argument pos:start="321:66" pos:end="321:66"><expr pos:start="321:66" pos:end="321:66"><literal type="number" pos:start="321:66" pos:end="321:66">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="323:9" pos:end="349:9"><if pos:start="323:9" pos:end="327:9">if <condition pos:start="323:12" pos:end="323:24">(<expr pos:start="323:13" pos:end="323:23"><name pos:start="323:13" pos:end="323:19">success</name> <operator pos:start="323:21" pos:end="323:21">&gt;</operator> <literal type="number" pos:start="323:23" pos:end="323:23">0</literal></expr>)</condition> <block pos:start="323:26" pos:end="327:9">{<block_content pos:start="325:13" pos:end="325:36">

            <expr_stmt pos:start="325:13" pos:end="325:36"><expr pos:start="325:13" pos:end="325:35"><name pos:start="325:13" pos:end="325:23">entry_point</name> <operator pos:start="325:25" pos:end="325:25">=</operator> <name pos:start="325:27" pos:end="325:35">elf_entry</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="327:11" pos:end="349:9">else <block pos:start="327:16" pos:end="349:9">{<block_content pos:start="329:13" pos:end="347:13">

            <decl_stmt pos:start="329:13" pos:end="329:22"><decl pos:start="329:13" pos:end="329:21"><type pos:start="329:13" pos:end="329:18"><name pos:start="329:13" pos:end="329:18">hwaddr</name></type> <name pos:start="329:20" pos:end="329:21">ep</name></decl>;</decl_stmt>

            <decl_stmt pos:start="331:13" pos:end="331:25"><decl pos:start="331:13" pos:end="331:24"><type pos:start="331:13" pos:end="331:15"><name pos:start="331:13" pos:end="331:15">int</name></type> <name pos:start="331:17" pos:end="331:24">is_linux</name></decl>;</decl_stmt>

            <expr_stmt pos:start="333:13" pos:end="333:73"><expr pos:start="333:13" pos:end="333:72"><name pos:start="333:13" pos:end="333:19">success</name> <operator pos:start="333:21" pos:end="333:21">=</operator> <call pos:start="333:23" pos:end="333:72"><name pos:start="333:23" pos:end="333:33">load_uimage</name><argument_list pos:start="333:34" pos:end="333:72">(<argument pos:start="333:35" pos:end="333:49"><expr pos:start="333:35" pos:end="333:49"><name pos:start="333:35" pos:end="333:49">kernel_filename</name></expr></argument>, <argument pos:start="333:52" pos:end="333:54"><expr pos:start="333:52" pos:end="333:54"><operator pos:start="333:52" pos:end="333:52">&amp;</operator><name pos:start="333:53" pos:end="333:54">ep</name></expr></argument>, <argument pos:start="333:57" pos:end="333:60"><expr pos:start="333:57" pos:end="333:60"><name pos:start="333:57" pos:end="333:60">NULL</name></expr></argument>, <argument pos:start="333:63" pos:end="333:71"><expr pos:start="333:63" pos:end="333:71"><operator pos:start="333:63" pos:end="333:63">&amp;</operator><name pos:start="333:64" pos:end="333:71">is_linux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="335:13" pos:end="347:13"><if pos:start="335:13" pos:end="339:13">if <condition pos:start="335:16" pos:end="335:40">(<expr pos:start="335:17" pos:end="335:39"><name pos:start="335:17" pos:end="335:23">success</name> <operator pos:start="335:25" pos:end="335:25">&gt;</operator> <literal type="number" pos:start="335:27" pos:end="335:27">0</literal> <operator pos:start="335:29" pos:end="335:30">&amp;&amp;</operator> <name pos:start="335:32" pos:end="335:39">is_linux</name></expr>)</condition> <block pos:start="335:42" pos:end="339:13">{<block_content pos:start="337:17" pos:end="337:33">

                <expr_stmt pos:start="337:17" pos:end="337:33"><expr pos:start="337:17" pos:end="337:32"><name pos:start="337:17" pos:end="337:27">entry_point</name> <operator pos:start="337:29" pos:end="337:29">=</operator> <name pos:start="337:31" pos:end="337:32">ep</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="339:15" pos:end="347:13">else <block pos:start="339:20" pos:end="347:13">{<block_content pos:start="341:17" pos:end="345:35">

                <expr_stmt pos:start="341:17" pos:end="343:46"><expr pos:start="341:17" pos:end="343:45"><call pos:start="341:17" pos:end="343:45"><name pos:start="341:17" pos:end="341:28">error_report</name><argument_list pos:start="341:29" pos:end="343:45">(<argument pos:start="341:30" pos:end="341:59"><expr pos:start="341:30" pos:end="341:59"><literal type="string" pos:start="341:30" pos:end="341:59">"could not load kernel '%s'\n"</literal></expr></argument>,

                             <argument pos:start="343:30" pos:end="343:44"><expr pos:start="343:30" pos:end="343:44"><name pos:start="343:30" pos:end="343:44">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="345:17" pos:end="345:35"><expr pos:start="345:17" pos:end="345:34"><call pos:start="345:17" pos:end="345:34"><name pos:start="345:17" pos:end="345:20">exit</name><argument_list pos:start="345:21" pos:end="345:34">(<argument pos:start="345:22" pos:end="345:33"><expr pos:start="345:22" pos:end="345:33"><name pos:start="345:22" pos:end="345:33">EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="351:9" pos:end="371:9"><if pos:start="351:9" pos:end="371:9">if <condition pos:start="351:12" pos:end="351:35">(<expr pos:start="351:13" pos:end="351:34"><name pos:start="351:13" pos:end="351:23">entry_point</name> <operator pos:start="351:25" pos:end="351:26">!=</operator> <name pos:start="351:28" pos:end="351:34"><name pos:start="351:28" pos:end="351:30">env</name><operator pos:start="351:31" pos:end="351:32">-&gt;</operator><name pos:start="351:33" pos:end="351:34">pc</name></name></expr>)</condition> <block pos:start="351:37" pos:end="371:9">{<block_content pos:start="353:13" pos:end="369:69">

            <decl_stmt pos:start="353:13" pos:end="365:14"><decl pos:start="353:13" pos:end="365:13"><type pos:start="353:13" pos:end="353:32"><specifier pos:start="353:13" pos:end="353:18">static</specifier> <specifier pos:start="353:20" pos:end="353:24">const</specifier> <name pos:start="353:26" pos:end="353:32">uint8_t</name></type> <name pos:start="353:34" pos:end="353:40"><name pos:start="353:34" pos:end="353:38">jx_a0</name><index pos:start="353:39" pos:end="353:40">[]</index></name> <init pos:start="353:42" pos:end="365:13">= <expr pos:start="353:44" pos:end="365:13"><block pos:start="353:44" pos:end="365:13">{

<cpp:ifdef pos:start="355:1" pos:end="355:29">#<cpp:directive pos:start="355:2" pos:end="355:6">ifdef</cpp:directive> <name pos:start="355:8" pos:end="355:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

                <expr pos:start="357:17" pos:end="357:20"><literal type="number" pos:start="357:17" pos:end="357:20">0x0a</literal></expr>, <expr pos:start="357:23" pos:end="357:23"><literal type="number" pos:start="357:23" pos:end="357:23">0</literal></expr>, <expr pos:start="357:26" pos:end="357:26"><literal type="number" pos:start="357:26" pos:end="357:26">0</literal></expr>,

<cpp:else pos:start="359:1" pos:end="359:5">#<cpp:directive pos:start="359:2" pos:end="359:5">else</cpp:directive></cpp:else>

                <expr pos:start="361:17" pos:end="361:20"><literal type="number" pos:start="361:17" pos:end="361:20">0xa0</literal></expr>, <expr pos:start="361:23" pos:end="361:23"><literal type="number" pos:start="361:23" pos:end="361:23">0</literal></expr>, <expr pos:start="361:26" pos:end="361:26"><literal type="number" pos:start="361:26" pos:end="361:26">0</literal></expr>,

<cpp:endif pos:start="363:1" pos:end="363:6">#<cpp:directive pos:start="363:2" pos:end="363:6">endif</cpp:directive></cpp:endif>

            }</block></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="367:13" pos:end="367:39"><expr pos:start="367:13" pos:end="367:38"><name pos:start="367:13" pos:end="367:24"><name pos:start="367:13" pos:end="367:15">env</name><operator pos:start="367:16" pos:end="367:17">-&gt;</operator><name pos:start="367:18" pos:end="367:21">regs</name><index pos:start="367:22" pos:end="367:24">[<expr pos:start="367:23" pos:end="367:23"><literal type="number" pos:start="367:23" pos:end="367:23">0</literal></expr>]</index></name> <operator pos:start="367:26" pos:end="367:26">=</operator> <name pos:start="367:28" pos:end="367:38">entry_point</name></expr>;</expr_stmt>

            <expr_stmt pos:start="369:13" pos:end="369:69"><expr pos:start="369:13" pos:end="369:68"><call pos:start="369:13" pos:end="369:68"><name pos:start="369:13" pos:end="369:37">cpu_physical_memory_write</name><argument_list pos:start="369:38" pos:end="369:68">(<argument pos:start="369:39" pos:end="369:45"><expr pos:start="369:39" pos:end="369:45"><name pos:start="369:39" pos:end="369:45"><name pos:start="369:39" pos:end="369:41">env</name><operator pos:start="369:42" pos:end="369:43">-&gt;</operator><name pos:start="369:44" pos:end="369:45">pc</name></name></expr></argument>, <argument pos:start="369:48" pos:end="369:52"><expr pos:start="369:48" pos:end="369:52"><name pos:start="369:48" pos:end="369:52">jx_a0</name></expr></argument>, <argument pos:start="369:55" pos:end="369:67"><expr pos:start="369:55" pos:end="369:67"><sizeof pos:start="369:55" pos:end="369:67">sizeof<argument_list pos:start="369:61" pos:end="369:67">(<argument pos:start="369:62" pos:end="369:66"><expr pos:start="369:62" pos:end="369:66"><name pos:start="369:62" pos:end="369:66">jx_a0</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="373:7" pos:end="397:5">else <block pos:start="373:12" pos:end="397:5">{<block_content pos:start="375:9" pos:end="395:9">

        <if_stmt pos:start="375:9" pos:end="395:9"><if pos:start="375:9" pos:end="395:9">if <condition pos:start="375:12" pos:end="375:18">(<expr pos:start="375:13" pos:end="375:17"><name pos:start="375:13" pos:end="375:17">flash</name></expr>)</condition> <block pos:start="375:20" pos:end="395:9">{<block_content pos:start="377:13" pos:end="393:30">

            <decl_stmt pos:start="377:13" pos:end="377:68"><decl pos:start="377:13" pos:end="377:67"><type pos:start="377:13" pos:end="377:26"><name pos:start="377:13" pos:end="377:24">MemoryRegion</name> <modifier pos:start="377:26" pos:end="377:26">*</modifier></type><name pos:start="377:27" pos:end="377:34">flash_mr</name> <init pos:start="377:36" pos:end="377:67">= <expr pos:start="377:38" pos:end="377:67"><call pos:start="377:38" pos:end="377:67"><name pos:start="377:38" pos:end="377:60">pflash_cfi01_get_memory</name><argument_list pos:start="377:61" pos:end="377:67">(<argument pos:start="377:62" pos:end="377:66"><expr pos:start="377:62" pos:end="377:66"><name pos:start="377:62" pos:end="377:66">flash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="379:13" pos:end="379:65"><decl pos:start="379:13" pos:end="379:64"><type pos:start="379:13" pos:end="379:26"><name pos:start="379:13" pos:end="379:24">MemoryRegion</name> <modifier pos:start="379:26" pos:end="379:26">*</modifier></type><name pos:start="379:27" pos:end="379:34">flash_io</name> <init pos:start="379:36" pos:end="379:64">= <expr pos:start="379:38" pos:end="379:64"><call pos:start="379:38" pos:end="379:64"><name pos:start="379:38" pos:end="379:45">g_malloc</name><argument_list pos:start="379:46" pos:end="379:64">(<argument pos:start="379:47" pos:end="379:63"><expr pos:start="379:47" pos:end="379:63"><sizeof pos:start="379:47" pos:end="379:63">sizeof<argument_list pos:start="379:53" pos:end="379:63">(<argument pos:start="379:54" pos:end="379:62"><expr pos:start="379:54" pos:end="379:62"><operator pos:start="379:54" pos:end="379:54">*</operator><name pos:start="379:55" pos:end="379:62">flash_io</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="383:13" pos:end="389:77"><expr pos:start="383:13" pos:end="389:76"><call pos:start="383:13" pos:end="389:76"><name pos:start="383:13" pos:end="383:36">memory_region_init_alias</name><argument_list pos:start="383:37" pos:end="389:76">(<argument pos:start="383:38" pos:end="383:45"><expr pos:start="383:38" pos:end="383:45"><name pos:start="383:38" pos:end="383:45">flash_io</name></expr></argument>, <argument pos:start="383:48" pos:end="383:51"><expr pos:start="383:48" pos:end="383:51"><name pos:start="383:48" pos:end="383:51">NULL</name></expr></argument>, <argument pos:start="383:54" pos:end="383:65"><expr pos:start="383:54" pos:end="383:65"><literal type="string" pos:start="383:54" pos:end="383:65">"lx60.flash"</literal></expr></argument>,

                    <argument pos:start="385:21" pos:end="385:28"><expr pos:start="385:21" pos:end="385:28"><name pos:start="385:21" pos:end="385:28">flash_mr</name></expr></argument>, <argument pos:start="385:31" pos:end="385:52"><expr pos:start="385:31" pos:end="385:52"><name pos:start="385:31" pos:end="385:52"><name pos:start="385:31" pos:end="385:35">board</name><operator pos:start="385:36" pos:end="385:37">-&gt;</operator><name pos:start="385:38" pos:end="385:52">flash_boot_base</name></name></expr></argument>,

                    <argument pos:start="387:21" pos:end="389:75"><expr pos:start="387:21" pos:end="389:75"><ternary pos:start="387:21" pos:end="389:75"><condition pos:start="387:21" pos:end="387:77"><expr pos:start="387:21" pos:end="387:75"><name pos:start="387:21" pos:end="387:37"><name pos:start="387:21" pos:end="387:25">board</name><operator pos:start="387:26" pos:end="387:27">-&gt;</operator><name pos:start="387:28" pos:end="387:37">flash_size</name></name> <operator pos:start="387:39" pos:end="387:39">-</operator> <name pos:start="387:41" pos:end="387:62"><name pos:start="387:41" pos:end="387:45">board</name><operator pos:start="387:46" pos:end="387:47">-&gt;</operator><name pos:start="387:48" pos:end="387:62">flash_boot_base</name></name> <operator pos:start="387:64" pos:end="387:64">&lt;</operator> <literal type="number" pos:start="387:66" pos:end="387:75">0x02000000</literal></expr> ?</condition><then pos:start="389:21" pos:end="389:62">

                    <expr pos:start="389:21" pos:end="389:62"><name pos:start="389:21" pos:end="389:37"><name pos:start="389:21" pos:end="389:25">board</name><operator pos:start="389:26" pos:end="389:27">-&gt;</operator><name pos:start="389:28" pos:end="389:37">flash_size</name></name> <operator pos:start="389:39" pos:end="389:39">-</operator> <name pos:start="389:41" pos:end="389:62"><name pos:start="389:41" pos:end="389:45">board</name><operator pos:start="389:46" pos:end="389:47">-&gt;</operator><name pos:start="389:48" pos:end="389:62">flash_boot_base</name></name></expr> </then><else pos:start="389:64" pos:end="389:75">: <expr pos:start="389:66" pos:end="389:75"><literal type="number" pos:start="389:66" pos:end="389:75">0x02000000</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="391:13" pos:end="393:30"><expr pos:start="391:13" pos:end="393:29"><call pos:start="391:13" pos:end="393:29"><name pos:start="391:13" pos:end="391:39">memory_region_add_subregion</name><argument_list pos:start="391:40" pos:end="393:29">(<argument pos:start="391:41" pos:end="391:53"><expr pos:start="391:41" pos:end="391:53"><name pos:start="391:41" pos:end="391:53">system_memory</name></expr></argument>, <argument pos:start="391:56" pos:end="391:65"><expr pos:start="391:56" pos:end="391:65"><literal type="number" pos:start="391:56" pos:end="391:65">0xfe000000</literal></expr></argument>,

                    <argument pos:start="393:21" pos:end="393:28"><expr pos:start="393:21" pos:end="393:28"><name pos:start="393:21" pos:end="393:28">flash_io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
