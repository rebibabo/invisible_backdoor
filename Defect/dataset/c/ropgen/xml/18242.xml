<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18242.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:57"><name pos:start="1:1" pos:end="1:20">uri_resolve_relative</name> <argument_list pos:start="1:22" pos:end="1:57">(<argument pos:start="1:23" pos:end="1:37">const char *uri</argument>, <argument pos:start="1:40" pos:end="1:56">const char * base</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="395:1">{<block_content pos:start="5:5" pos:end="393:15">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">char</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:13">val</name> <init pos:start="5:15" pos:end="5:20">= <expr pos:start="5:17" pos:end="5:20"><name pos:start="5:17" pos:end="5:20">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:11"><decl pos:start="9:5" pos:end="9:10"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:10">ix</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">pos</name> <init pos:start="11:13" pos:end="11:15">= <expr pos:start="11:15" pos:end="11:15"><literal type="number" pos:start="11:15" pos:end="11:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:15">nbslash</name> <init pos:start="13:17" pos:end="13:19">= <expr pos:start="13:19" pos:end="13:19"><literal type="number" pos:start="13:19" pos:end="13:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:9"><name pos:start="17:5" pos:end="17:7">URI</name> <modifier pos:start="17:9" pos:end="17:9">*</modifier></type><name pos:start="17:10" pos:end="17:12">ref</name> <init pos:start="17:14" pos:end="17:19">= <expr pos:start="17:16" pos:end="17:19"><name pos:start="17:16" pos:end="17:19">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:9"><name pos:start="19:5" pos:end="19:7">URI</name> <modifier pos:start="19:9" pos:end="19:9">*</modifier></type><name pos:start="19:10" pos:end="19:12">bas</name> <init pos:start="19:14" pos:end="19:19">= <expr pos:start="19:16" pos:end="19:19"><name pos:start="19:16" pos:end="19:19">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:29"><decl pos:start="21:5" pos:end="21:14"><type pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:8">char</name> <modifier pos:start="21:10" pos:end="21:10">*</modifier></type><name pos:start="21:11" pos:end="21:14">bptr</name></decl>, <decl pos:start="21:17" pos:end="21:21"><type ref="prev" pos:start="21:5" pos:end="21:10"><modifier pos:start="21:17" pos:end="21:17">*</modifier></type><name pos:start="21:18" pos:end="21:21">uptr</name></decl>, <decl pos:start="21:24" pos:end="21:28"><type ref="prev" pos:start="21:5" pos:end="21:10"><modifier pos:start="21:24" pos:end="21:24">*</modifier></type><name pos:start="21:25" pos:end="21:28">vptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:24"><decl pos:start="23:5" pos:end="23:23"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:19">remove_path</name> <init pos:start="23:21" pos:end="23:23">= <expr pos:start="23:23" pos:end="23:23"><literal type="number" pos:start="23:23" pos:end="23:23">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="27:5" pos:end="29:20"><if pos:start="27:5" pos:end="29:20">if <condition pos:start="27:8" pos:end="27:37">(<expr pos:start="27:9" pos:end="27:36"><operator pos:start="27:9" pos:end="27:9">(</operator><name pos:start="27:10" pos:end="27:12">uri</name> <operator pos:start="27:14" pos:end="27:15">==</operator> <name pos:start="27:17" pos:end="27:20">NULL</name><operator pos:start="27:21" pos:end="27:21">)</operator> <operator pos:start="27:23" pos:end="27:24">||</operator> <operator pos:start="27:26" pos:end="27:26">(</operator><operator pos:start="27:27" pos:end="27:27">*</operator><name pos:start="27:28" pos:end="27:30">uri</name> <operator pos:start="27:32" pos:end="27:33">==</operator> <literal type="number" pos:start="27:35" pos:end="27:35">0</literal><operator pos:start="27:36" pos:end="27:36">)</operator></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:20"><block_content pos:start="29:9" pos:end="29:20">

	<return pos:start="29:9" pos:end="29:20">return <expr pos:start="29:16" pos:end="29:19"><name pos:start="29:16" pos:end="29:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="33:5" pos:end="37:7">/*

     * First parse URI into a standard form

     */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:21"><expr pos:start="39:5" pos:end="39:20"><name pos:start="39:5" pos:end="39:7">ref</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <call pos:start="39:11" pos:end="39:20"><name pos:start="39:11" pos:end="39:17">uri_new</name> <argument_list pos:start="39:19" pos:end="39:20">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="41:5" pos:end="41:47">/* If URI not already in "relative" form */</comment>

    <if_stmt pos:start="43:5" pos:end="53:34"><if pos:start="43:5" pos:end="51:5">if <condition pos:start="43:8" pos:end="43:22">(<expr pos:start="43:9" pos:end="43:21"><name pos:start="43:9" pos:end="43:14"><name pos:start="43:9" pos:end="43:11">uri</name><index pos:start="43:12" pos:end="43:14">[<expr pos:start="43:13" pos:end="43:13"><literal type="number" pos:start="43:13" pos:end="43:13">0</literal></expr>]</index></name> <operator pos:start="43:16" pos:end="43:17">!=</operator> <literal type="char" pos:start="43:19" pos:end="43:21">'.'</literal></expr>)</condition> <block pos:start="43:24" pos:end="51:5">{<block_content pos:start="45:9" pos:end="49:22">

	<expr_stmt pos:start="45:9" pos:end="45:40"><expr pos:start="45:9" pos:end="45:39"><name pos:start="45:9" pos:end="45:11">ret</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <call pos:start="45:15" pos:end="45:39"><name pos:start="45:15" pos:end="45:28">uri_parse_into</name> <argument_list pos:start="45:30" pos:end="45:39">(<argument pos:start="45:31" pos:end="45:33"><expr pos:start="45:31" pos:end="45:33"><name pos:start="45:31" pos:end="45:33">ref</name></expr></argument>, <argument pos:start="45:36" pos:end="45:38"><expr pos:start="45:36" pos:end="45:38"><name pos:start="45:36" pos:end="45:38">uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="47:9" pos:end="49:22"><if pos:start="47:9" pos:end="49:22">if <condition pos:start="47:12" pos:end="47:21">(<expr pos:start="47:13" pos:end="47:20"><name pos:start="47:13" pos:end="47:15">ret</name> <operator pos:start="47:17" pos:end="47:18">!=</operator> <literal type="number" pos:start="47:20" pos:end="47:20">0</literal></expr>)</condition><block type="pseudo" pos:start="49:13" pos:end="49:22"><block_content pos:start="49:13" pos:end="49:22">

	    <goto pos:start="49:13" pos:end="49:22">goto <name pos:start="49:18" pos:end="49:21">done</name>;</goto></block_content></block></if></if_stmt>		<comment type="block" pos:start="49:33" pos:end="49:63">/* Error in URI, return NULL */</comment>

    </block_content>}</block></if> <else pos:start="51:7" pos:end="53:34">else<block type="pseudo" pos:start="53:9" pos:end="53:34"><block_content pos:start="53:9" pos:end="53:34">

	<expr_stmt pos:start="53:9" pos:end="53:34"><expr pos:start="53:9" pos:end="53:33"><name pos:start="53:9" pos:end="53:17"><name pos:start="53:9" pos:end="53:11">ref</name><operator pos:start="53:12" pos:end="53:13">-&gt;</operator><name pos:start="53:14" pos:end="53:17">path</name></name> <operator pos:start="53:19" pos:end="53:19">=</operator> <call pos:start="53:21" pos:end="53:33"><name pos:start="53:21" pos:end="53:28">g_strdup</name><argument_list pos:start="53:29" pos:end="53:33">(<argument pos:start="53:30" pos:end="53:32"><expr pos:start="53:30" pos:end="53:32"><name pos:start="53:30" pos:end="53:32">uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <comment type="block" pos:start="57:5" pos:end="61:7">/*

     * Next parse base into the same standard form

     */</comment>

    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:39">(<expr pos:start="63:9" pos:end="63:38"><operator pos:start="63:9" pos:end="63:9">(</operator><name pos:start="63:10" pos:end="63:13">base</name> <operator pos:start="63:15" pos:end="63:16">==</operator> <name pos:start="63:18" pos:end="63:21">NULL</name><operator pos:start="63:22" pos:end="63:22">)</operator> <operator pos:start="63:24" pos:end="63:25">||</operator> <operator pos:start="63:27" pos:end="63:27">(</operator><operator pos:start="63:28" pos:end="63:28">*</operator><name pos:start="63:29" pos:end="63:32">base</name> <operator pos:start="63:34" pos:end="63:35">==</operator> <literal type="number" pos:start="63:37" pos:end="63:37">0</literal><operator pos:start="63:38" pos:end="63:38">)</operator></expr>)</condition> <block pos:start="63:41" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:18">

	<expr_stmt pos:start="65:9" pos:end="65:29"><expr pos:start="65:9" pos:end="65:28"><name pos:start="65:9" pos:end="65:11">val</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <call pos:start="65:15" pos:end="65:28"><name pos:start="65:15" pos:end="65:22">g_strdup</name> <argument_list pos:start="65:24" pos:end="65:28">(<argument pos:start="65:25" pos:end="65:27"><expr pos:start="65:25" pos:end="65:27"><name pos:start="65:25" pos:end="65:27">uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<goto pos:start="67:9" pos:end="67:18">goto <name pos:start="67:14" pos:end="67:17">done</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:21"><expr pos:start="71:5" pos:end="71:20"><name pos:start="71:5" pos:end="71:7">bas</name> <operator pos:start="71:9" pos:end="71:9">=</operator> <call pos:start="71:11" pos:end="71:20"><name pos:start="71:11" pos:end="71:17">uri_new</name> <argument_list pos:start="71:19" pos:end="71:20">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="83:35"><if pos:start="73:5" pos:end="81:5">if <condition pos:start="73:8" pos:end="73:23">(<expr pos:start="73:9" pos:end="73:22"><name pos:start="73:9" pos:end="73:15"><name pos:start="73:9" pos:end="73:12">base</name><index pos:start="73:13" pos:end="73:15">[<expr pos:start="73:14" pos:end="73:14"><literal type="number" pos:start="73:14" pos:end="73:14">0</literal></expr>]</index></name> <operator pos:start="73:17" pos:end="73:18">!=</operator> <literal type="char" pos:start="73:20" pos:end="73:22">'.'</literal></expr>)</condition> <block pos:start="73:25" pos:end="81:5">{<block_content pos:start="75:9" pos:end="79:22">

	<expr_stmt pos:start="75:9" pos:end="75:41"><expr pos:start="75:9" pos:end="75:40"><name pos:start="75:9" pos:end="75:11">ret</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <call pos:start="75:15" pos:end="75:40"><name pos:start="75:15" pos:end="75:28">uri_parse_into</name> <argument_list pos:start="75:30" pos:end="75:40">(<argument pos:start="75:31" pos:end="75:33"><expr pos:start="75:31" pos:end="75:33"><name pos:start="75:31" pos:end="75:33">bas</name></expr></argument>, <argument pos:start="75:36" pos:end="75:39"><expr pos:start="75:36" pos:end="75:39"><name pos:start="75:36" pos:end="75:39">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="77:9" pos:end="79:22"><if pos:start="77:9" pos:end="79:22">if <condition pos:start="77:12" pos:end="77:21">(<expr pos:start="77:13" pos:end="77:20"><name pos:start="77:13" pos:end="77:15">ret</name> <operator pos:start="77:17" pos:end="77:18">!=</operator> <literal type="number" pos:start="77:20" pos:end="77:20">0</literal></expr>)</condition><block type="pseudo" pos:start="79:13" pos:end="79:22"><block_content pos:start="79:13" pos:end="79:22">

	    <goto pos:start="79:13" pos:end="79:22">goto <name pos:start="79:18" pos:end="79:21">done</name>;</goto></block_content></block></if></if_stmt>		<comment type="block" pos:start="79:33" pos:end="79:64">/* Error in base, return NULL */</comment>

    </block_content>}</block></if> <else pos:start="81:7" pos:end="83:35">else<block type="pseudo" pos:start="83:9" pos:end="83:35"><block_content pos:start="83:9" pos:end="83:35">

	<expr_stmt pos:start="83:9" pos:end="83:35"><expr pos:start="83:9" pos:end="83:34"><name pos:start="83:9" pos:end="83:17"><name pos:start="83:9" pos:end="83:11">bas</name><operator pos:start="83:12" pos:end="83:13">-&gt;</operator><name pos:start="83:14" pos:end="83:17">path</name></name> <operator pos:start="83:19" pos:end="83:19">=</operator> <call pos:start="83:21" pos:end="83:34"><name pos:start="83:21" pos:end="83:28">g_strdup</name><argument_list pos:start="83:29" pos:end="83:34">(<argument pos:start="83:30" pos:end="83:33"><expr pos:start="83:30" pos:end="83:33"><name pos:start="83:30" pos:end="83:33">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <comment type="block" pos:start="87:5" pos:end="93:7">/*

     * If the scheme / server on the URI differs from the base,

     * just return the URI

     */</comment>

    <if_stmt pos:start="95:5" pos:end="107:5"><if pos:start="95:5" pos:end="107:5">if <condition pos:start="95:8" pos:end="101:46">(<expr pos:start="95:9" pos:end="101:45"><operator pos:start="95:9" pos:end="95:9">(</operator><name pos:start="95:10" pos:end="95:20"><name pos:start="95:10" pos:end="95:12">ref</name><operator pos:start="95:13" pos:end="95:14">-&gt;</operator><name pos:start="95:15" pos:end="95:20">scheme</name></name> <operator pos:start="95:22" pos:end="95:23">!=</operator> <name pos:start="95:25" pos:end="95:28">NULL</name><operator pos:start="95:29" pos:end="95:29">)</operator> <operator pos:start="95:31" pos:end="95:32">&amp;&amp;</operator>

	<operator pos:start="97:9" pos:end="97:9">(</operator><operator pos:start="97:10" pos:end="97:10">(</operator><name pos:start="97:11" pos:end="97:21"><name pos:start="97:11" pos:end="97:13">bas</name><operator pos:start="97:14" pos:end="97:15">-&gt;</operator><name pos:start="97:16" pos:end="97:21">scheme</name></name> <operator pos:start="97:23" pos:end="97:24">==</operator> <name pos:start="97:26" pos:end="97:29">NULL</name><operator pos:start="97:30" pos:end="97:30">)</operator> <operator pos:start="97:32" pos:end="97:33">||</operator>

	 <operator pos:start="99:10" pos:end="99:10">(</operator><call pos:start="99:11" pos:end="99:43"><name pos:start="99:11" pos:end="99:16">strcmp</name> <argument_list pos:start="99:18" pos:end="99:43">(<argument pos:start="99:19" pos:end="99:29"><expr pos:start="99:19" pos:end="99:29"><name pos:start="99:19" pos:end="99:29"><name pos:start="99:19" pos:end="99:21">bas</name><operator pos:start="99:22" pos:end="99:23">-&gt;</operator><name pos:start="99:24" pos:end="99:29">scheme</name></name></expr></argument>, <argument pos:start="99:32" pos:end="99:42"><expr pos:start="99:32" pos:end="99:42"><name pos:start="99:32" pos:end="99:42"><name pos:start="99:32" pos:end="99:34">ref</name><operator pos:start="99:35" pos:end="99:36">-&gt;</operator><name pos:start="99:37" pos:end="99:42">scheme</name></name></expr></argument>)</argument_list></call><operator pos:start="99:44" pos:end="99:44">)</operator> <operator pos:start="99:46" pos:end="99:47">||</operator>

	 <operator pos:start="101:10" pos:end="101:10">(</operator><call pos:start="101:11" pos:end="101:43"><name pos:start="101:11" pos:end="101:16">strcmp</name> <argument_list pos:start="101:18" pos:end="101:43">(<argument pos:start="101:19" pos:end="101:29"><expr pos:start="101:19" pos:end="101:29"><name pos:start="101:19" pos:end="101:29"><name pos:start="101:19" pos:end="101:21">bas</name><operator pos:start="101:22" pos:end="101:23">-&gt;</operator><name pos:start="101:24" pos:end="101:29">server</name></name></expr></argument>, <argument pos:start="101:32" pos:end="101:42"><expr pos:start="101:32" pos:end="101:42"><name pos:start="101:32" pos:end="101:42"><name pos:start="101:32" pos:end="101:34">ref</name><operator pos:start="101:35" pos:end="101:36">-&gt;</operator><name pos:start="101:37" pos:end="101:42">server</name></name></expr></argument>)</argument_list></call><operator pos:start="101:44" pos:end="101:44">)</operator><operator pos:start="101:45" pos:end="101:45">)</operator></expr>)</condition> <block pos:start="101:48" pos:end="107:5">{<block_content pos:start="103:9" pos:end="105:18">

	<expr_stmt pos:start="103:9" pos:end="103:29"><expr pos:start="103:9" pos:end="103:28"><name pos:start="103:9" pos:end="103:11">val</name> <operator pos:start="103:13" pos:end="103:13">=</operator> <call pos:start="103:15" pos:end="103:28"><name pos:start="103:15" pos:end="103:22">g_strdup</name> <argument_list pos:start="103:24" pos:end="103:28">(<argument pos:start="103:25" pos:end="103:27"><expr pos:start="103:25" pos:end="103:27"><name pos:start="103:25" pos:end="103:27">uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<goto pos:start="105:9" pos:end="105:18">goto <name pos:start="105:14" pos:end="105:17">done</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="109:5" pos:end="115:5"><if pos:start="109:5" pos:end="115:5">if <condition pos:start="109:8" pos:end="109:38">(<expr pos:start="109:9" pos:end="109:37"><operator pos:start="109:9" pos:end="109:9">!</operator><call pos:start="109:10" pos:end="109:37"><name pos:start="109:10" pos:end="109:15">strcmp</name><argument_list pos:start="109:16" pos:end="109:37">(<argument pos:start="109:17" pos:end="109:25"><expr pos:start="109:17" pos:end="109:25"><name pos:start="109:17" pos:end="109:25"><name pos:start="109:17" pos:end="109:19">bas</name><operator pos:start="109:20" pos:end="109:21">-&gt;</operator><name pos:start="109:22" pos:end="109:25">path</name></name></expr></argument>, <argument pos:start="109:28" pos:end="109:36"><expr pos:start="109:28" pos:end="109:36"><name pos:start="109:28" pos:end="109:36"><name pos:start="109:28" pos:end="109:30">ref</name><operator pos:start="109:31" pos:end="109:32">-&gt;</operator><name pos:start="109:33" pos:end="109:36">path</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="109:40" pos:end="115:5">{<block_content pos:start="111:9" pos:end="113:18">

	<expr_stmt pos:start="111:9" pos:end="111:27"><expr pos:start="111:9" pos:end="111:26"><name pos:start="111:9" pos:end="111:11">val</name> <operator pos:start="111:13" pos:end="111:13">=</operator> <call pos:start="111:15" pos:end="111:26"><name pos:start="111:15" pos:end="111:22">g_strdup</name><argument_list pos:start="111:23" pos:end="111:26">(<argument pos:start="111:24" pos:end="111:25"><expr pos:start="111:24" pos:end="111:25"><literal type="string" pos:start="111:24" pos:end="111:25">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<goto pos:start="113:9" pos:end="113:18">goto <name pos:start="113:14" pos:end="113:17">done</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="117:5" pos:end="123:5"><if pos:start="117:5" pos:end="123:5">if <condition pos:start="117:8" pos:end="117:26">(<expr pos:start="117:9" pos:end="117:25"><name pos:start="117:9" pos:end="117:17"><name pos:start="117:9" pos:end="117:11">bas</name><operator pos:start="117:12" pos:end="117:13">-&gt;</operator><name pos:start="117:14" pos:end="117:17">path</name></name> <operator pos:start="117:19" pos:end="117:20">==</operator> <name pos:start="117:22" pos:end="117:25">NULL</name></expr>)</condition> <block pos:start="117:28" pos:end="123:5">{<block_content pos:start="119:9" pos:end="121:18">

	<expr_stmt pos:start="119:9" pos:end="119:34"><expr pos:start="119:9" pos:end="119:33"><name pos:start="119:9" pos:end="119:11">val</name> <operator pos:start="119:13" pos:end="119:13">=</operator> <call pos:start="119:15" pos:end="119:33"><name pos:start="119:15" pos:end="119:22">g_strdup</name><argument_list pos:start="119:23" pos:end="119:33">(<argument pos:start="119:24" pos:end="119:32"><expr pos:start="119:24" pos:end="119:32"><name pos:start="119:24" pos:end="119:32"><name pos:start="119:24" pos:end="119:26">ref</name><operator pos:start="119:27" pos:end="119:28">-&gt;</operator><name pos:start="119:29" pos:end="119:32">path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<goto pos:start="121:9" pos:end="121:18">goto <name pos:start="121:14" pos:end="121:17">done</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="125:5" pos:end="131:5"><if pos:start="125:5" pos:end="131:5">if <condition pos:start="125:8" pos:end="125:26">(<expr pos:start="125:9" pos:end="125:25"><name pos:start="125:9" pos:end="125:17"><name pos:start="125:9" pos:end="125:11">ref</name><operator pos:start="125:12" pos:end="125:13">-&gt;</operator><name pos:start="125:14" pos:end="125:17">path</name></name> <operator pos:start="125:19" pos:end="125:20">==</operator> <name pos:start="125:22" pos:end="125:25">NULL</name></expr>)</condition> <block pos:start="125:28" pos:end="131:5">{<block_content pos:start="127:9" pos:end="129:24">

        <expr_stmt pos:start="127:9" pos:end="127:33"><expr pos:start="127:9" pos:end="127:32"><name pos:start="127:9" pos:end="127:17"><name pos:start="127:9" pos:end="127:11">ref</name><operator pos:start="127:12" pos:end="127:13">-&gt;</operator><name pos:start="127:14" pos:end="127:17">path</name></name> <operator pos:start="127:19" pos:end="127:19">=</operator> <operator pos:start="127:21" pos:end="127:21">(</operator><name pos:start="127:22" pos:end="127:25">char</name> <operator pos:start="127:27" pos:end="127:27">*</operator><operator pos:start="127:28" pos:end="127:28">)</operator> <literal type="string" pos:start="127:30" pos:end="127:32">"/"</literal></expr>;</expr_stmt>

	<expr_stmt pos:start="129:9" pos:end="129:24"><expr pos:start="129:9" pos:end="129:23"><name pos:start="129:9" pos:end="129:19">remove_path</name> <operator pos:start="129:21" pos:end="129:21">=</operator> <literal type="number" pos:start="129:23" pos:end="129:23">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="135:5" pos:end="145:7">/*

     * At this point (at last!) we can compare the two paths

     *

     * First we take care of the special case where either of the

     * two path components may be missing (bug 316224)

     */</comment>

    <if_stmt pos:start="147:5" pos:end="165:5"><if pos:start="147:5" pos:end="165:5">if <condition pos:start="147:8" pos:end="147:26">(<expr pos:start="147:9" pos:end="147:25"><name pos:start="147:9" pos:end="147:17"><name pos:start="147:9" pos:end="147:11">bas</name><operator pos:start="147:12" pos:end="147:13">-&gt;</operator><name pos:start="147:14" pos:end="147:17">path</name></name> <operator pos:start="147:19" pos:end="147:20">==</operator> <name pos:start="147:22" pos:end="147:25">NULL</name></expr>)</condition> <block pos:start="147:28" pos:end="165:5">{<block_content pos:start="149:9" pos:end="163:18">

	<if_stmt pos:start="149:9" pos:end="161:9"><if pos:start="149:9" pos:end="161:9">if <condition pos:start="149:12" pos:end="149:30">(<expr pos:start="149:13" pos:end="149:29"><name pos:start="149:13" pos:end="149:21"><name pos:start="149:13" pos:end="149:15">ref</name><operator pos:start="149:16" pos:end="149:17">-&gt;</operator><name pos:start="149:18" pos:end="149:21">path</name></name> <operator pos:start="149:23" pos:end="149:24">!=</operator> <name pos:start="149:26" pos:end="149:29">NULL</name></expr>)</condition> <block pos:start="149:32" pos:end="161:9">{<block_content pos:start="151:13" pos:end="159:53">

	    <expr_stmt pos:start="151:13" pos:end="151:29"><expr pos:start="151:13" pos:end="151:28"><name pos:start="151:13" pos:end="151:16">uptr</name> <operator pos:start="151:18" pos:end="151:18">=</operator> <name pos:start="151:20" pos:end="151:28"><name pos:start="151:20" pos:end="151:22">ref</name><operator pos:start="151:23" pos:end="151:24">-&gt;</operator><name pos:start="151:25" pos:end="151:28">path</name></name></expr>;</expr_stmt>

	    <if_stmt pos:start="153:13" pos:end="155:23"><if pos:start="153:13" pos:end="155:23">if <condition pos:start="153:16" pos:end="153:29">(<expr pos:start="153:17" pos:end="153:28"><operator pos:start="153:17" pos:end="153:17">*</operator><name pos:start="153:18" pos:end="153:21">uptr</name> <operator pos:start="153:23" pos:end="153:24">==</operator> <literal type="char" pos:start="153:26" pos:end="153:28">'/'</literal></expr>)</condition><block type="pseudo" pos:start="155:17" pos:end="155:23"><block_content pos:start="155:17" pos:end="155:23">

		<expr_stmt pos:start="155:17" pos:end="155:23"><expr pos:start="155:17" pos:end="155:22"><name pos:start="155:17" pos:end="155:20">uptr</name><operator pos:start="155:21" pos:end="155:22">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	    <comment type="block" pos:start="157:13" pos:end="157:57">/* exception characters from uri_to_string */</comment>

	    <expr_stmt pos:start="159:13" pos:end="159:53"><expr pos:start="159:13" pos:end="159:52"><name pos:start="159:13" pos:end="159:15">val</name> <operator pos:start="159:17" pos:end="159:17">=</operator> <call pos:start="159:19" pos:end="159:52"><name pos:start="159:19" pos:end="159:35">uri_string_escape</name><argument_list pos:start="159:36" pos:end="159:52">(<argument pos:start="159:37" pos:end="159:40"><expr pos:start="159:37" pos:end="159:40"><name pos:start="159:37" pos:end="159:40">uptr</name></expr></argument>, <argument pos:start="159:43" pos:end="159:51"><expr pos:start="159:43" pos:end="159:51"><literal type="string" pos:start="159:43" pos:end="159:51">"/;&amp;=+$,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

	<goto pos:start="163:9" pos:end="163:18">goto <name pos:start="163:14" pos:end="163:17">done</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:21"><expr pos:start="167:5" pos:end="167:20"><name pos:start="167:5" pos:end="167:8">bptr</name> <operator pos:start="167:10" pos:end="167:10">=</operator> <name pos:start="167:12" pos:end="167:20"><name pos:start="167:12" pos:end="167:14">bas</name><operator pos:start="167:15" pos:end="167:16">-&gt;</operator><name pos:start="167:17" pos:end="167:20">path</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="169:5" pos:end="279:5"><if pos:start="169:5" pos:end="183:5">if <condition pos:start="169:8" pos:end="169:26">(<expr pos:start="169:9" pos:end="169:25"><name pos:start="169:9" pos:end="169:17"><name pos:start="169:9" pos:end="169:11">ref</name><operator pos:start="169:12" pos:end="169:13">-&gt;</operator><name pos:start="169:14" pos:end="169:17">path</name></name> <operator pos:start="169:19" pos:end="169:20">==</operator> <name pos:start="169:22" pos:end="169:25">NULL</name></expr>)</condition> <block pos:start="169:28" pos:end="183:5">{<block_content pos:start="171:9" pos:end="181:16">

	<for pos:start="171:9" pos:end="177:9">for <control pos:start="171:13" pos:end="171:41">(<init pos:start="171:14" pos:end="171:20"><expr pos:start="171:14" pos:end="171:19"><name pos:start="171:14" pos:end="171:15">ix</name> <operator pos:start="171:17" pos:end="171:17">=</operator> <literal type="number" pos:start="171:19" pos:end="171:19">0</literal></expr>;</init> <condition pos:start="171:22" pos:end="171:35"><expr pos:start="171:22" pos:end="171:34"><name pos:start="171:22" pos:end="171:29"><name pos:start="171:22" pos:end="171:25">bptr</name><index pos:start="171:26" pos:end="171:29">[<expr pos:start="171:27" pos:end="171:28"><name pos:start="171:27" pos:end="171:28">ix</name></expr>]</index></name> <operator pos:start="171:31" pos:end="171:32">!=</operator> <literal type="number" pos:start="171:34" pos:end="171:34">0</literal></expr>;</condition> <incr pos:start="171:37" pos:end="171:40"><expr pos:start="171:37" pos:end="171:40"><name pos:start="171:37" pos:end="171:38">ix</name><operator pos:start="171:39" pos:end="171:40">++</operator></expr></incr>)</control> <block pos:start="171:43" pos:end="177:9">{<block_content pos:start="173:13" pos:end="175:26">

	    <if_stmt pos:start="173:13" pos:end="175:26"><if pos:start="173:13" pos:end="175:26">if <condition pos:start="173:16" pos:end="173:32">(<expr pos:start="173:17" pos:end="173:31"><name pos:start="173:17" pos:end="173:24"><name pos:start="173:17" pos:end="173:20">bptr</name><index pos:start="173:21" pos:end="173:24">[<expr pos:start="173:22" pos:end="173:23"><name pos:start="173:22" pos:end="173:23">ix</name></expr>]</index></name> <operator pos:start="173:26" pos:end="173:27">==</operator> <literal type="char" pos:start="173:29" pos:end="173:31">'/'</literal></expr>)</condition><block type="pseudo" pos:start="175:17" pos:end="175:26"><block_content pos:start="175:17" pos:end="175:26">

		<expr_stmt pos:start="175:17" pos:end="175:26"><expr pos:start="175:17" pos:end="175:25"><name pos:start="175:17" pos:end="175:23">nbslash</name><operator pos:start="175:24" pos:end="175:25">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	</block_content>}</block></for>

	<expr_stmt pos:start="179:9" pos:end="179:20"><expr pos:start="179:9" pos:end="179:19"><name pos:start="179:9" pos:end="179:12">uptr</name> <operator pos:start="179:14" pos:end="179:14">=</operator> <name pos:start="179:16" pos:end="179:19">NULL</name></expr>;</expr_stmt>

	<expr_stmt pos:start="181:9" pos:end="181:16"><expr pos:start="181:9" pos:end="181:15"><name pos:start="181:9" pos:end="181:11">len</name> <operator pos:start="181:13" pos:end="181:13">=</operator> <literal type="number" pos:start="181:15" pos:end="181:15">1</literal></expr>;</expr_stmt>	<comment type="block" pos:start="181:25" pos:end="181:66">/* this is for a string terminator only */</comment>

    </block_content>}</block></if> <else pos:start="183:7" pos:end="279:5">else <block pos:start="183:12" pos:end="279:5">{<block_content pos:start="191:9" pos:end="277:32">

    <comment type="block" pos:start="185:5" pos:end="189:7">/*

     * Next we compare the two strings and find where they first differ

     */</comment>

	<if_stmt pos:start="191:9" pos:end="193:21"><if pos:start="191:9" pos:end="193:21">if <condition pos:start="191:12" pos:end="191:65">(<expr pos:start="191:13" pos:end="191:64"><operator pos:start="191:13" pos:end="191:13">(</operator><name pos:start="191:14" pos:end="191:27"><name pos:start="191:14" pos:end="191:16">ref</name><operator pos:start="191:17" pos:end="191:18">-&gt;</operator><name pos:start="191:19" pos:end="191:22">path</name><index pos:start="191:23" pos:end="191:27">[<expr pos:start="191:24" pos:end="191:26"><name pos:start="191:24" pos:end="191:26">pos</name></expr>]</index></name> <operator pos:start="191:29" pos:end="191:30">==</operator> <literal type="char" pos:start="191:32" pos:end="191:34">'.'</literal><operator pos:start="191:35" pos:end="191:35">)</operator> <operator pos:start="191:37" pos:end="191:38">&amp;&amp;</operator> <operator pos:start="191:40" pos:end="191:40">(</operator><name pos:start="191:41" pos:end="191:56"><name pos:start="191:41" pos:end="191:43">ref</name><operator pos:start="191:44" pos:end="191:45">-&gt;</operator><name pos:start="191:46" pos:end="191:49">path</name><index pos:start="191:50" pos:end="191:56">[<expr pos:start="191:51" pos:end="191:55"><name pos:start="191:51" pos:end="191:53">pos</name><operator pos:start="191:54" pos:end="191:54">+</operator><literal type="number" pos:start="191:55" pos:end="191:55">1</literal></expr>]</index></name> <operator pos:start="191:58" pos:end="191:59">==</operator> <literal type="char" pos:start="191:61" pos:end="191:63">'/'</literal><operator pos:start="191:64" pos:end="191:64">)</operator></expr>)</condition><block type="pseudo" pos:start="193:13" pos:end="193:21"><block_content pos:start="193:13" pos:end="193:21">

            <expr_stmt pos:start="193:13" pos:end="193:21"><expr pos:start="193:13" pos:end="193:20"><name pos:start="193:13" pos:end="193:15">pos</name> <operator pos:start="193:17" pos:end="193:18">+=</operator> <literal type="number" pos:start="193:20" pos:end="193:20">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt pos:start="195:9" pos:end="201:19"><if pos:start="195:9" pos:end="197:22">if <condition pos:start="195:12" pos:end="195:47">(<expr pos:start="195:13" pos:end="195:46"><operator pos:start="195:13" pos:end="195:13">(</operator><operator pos:start="195:14" pos:end="195:14">*</operator><name pos:start="195:15" pos:end="195:18">bptr</name> <operator pos:start="195:20" pos:end="195:21">==</operator> <literal type="char" pos:start="195:23" pos:end="195:25">'.'</literal><operator pos:start="195:26" pos:end="195:26">)</operator> <operator pos:start="195:28" pos:end="195:29">&amp;&amp;</operator> <operator pos:start="195:31" pos:end="195:31">(</operator><name pos:start="195:32" pos:end="195:38"><name pos:start="195:32" pos:end="195:35">bptr</name><index pos:start="195:36" pos:end="195:38">[<expr pos:start="195:37" pos:end="195:37"><literal type="number" pos:start="195:37" pos:end="195:37">1</literal></expr>]</index></name> <operator pos:start="195:40" pos:end="195:41">==</operator> <literal type="char" pos:start="195:43" pos:end="195:45">'/'</literal><operator pos:start="195:46" pos:end="195:46">)</operator></expr>)</condition><block type="pseudo" pos:start="197:13" pos:end="197:22"><block_content pos:start="197:13" pos:end="197:22">

            <expr_stmt pos:start="197:13" pos:end="197:22"><expr pos:start="197:13" pos:end="197:21"><name pos:start="197:13" pos:end="197:16">bptr</name> <operator pos:start="197:18" pos:end="197:19">+=</operator> <literal type="number" pos:start="197:21" pos:end="197:21">2</literal></expr>;</expr_stmt></block_content></block></if>

	<if type="elseif" pos:start="199:9" pos:end="201:19">else if <condition pos:start="199:17" pos:end="199:59">(<expr pos:start="199:18" pos:end="199:58"><operator pos:start="199:18" pos:end="199:18">(</operator><operator pos:start="199:19" pos:end="199:19">*</operator><name pos:start="199:20" pos:end="199:23">bptr</name> <operator pos:start="199:25" pos:end="199:26">==</operator> <literal type="char" pos:start="199:28" pos:end="199:30">'/'</literal><operator pos:start="199:31" pos:end="199:31">)</operator> <operator pos:start="199:33" pos:end="199:34">&amp;&amp;</operator> <operator pos:start="199:36" pos:end="199:36">(</operator><name pos:start="199:37" pos:end="199:50"><name pos:start="199:37" pos:end="199:39">ref</name><operator pos:start="199:40" pos:end="199:41">-&gt;</operator><name pos:start="199:42" pos:end="199:45">path</name><index pos:start="199:46" pos:end="199:50">[<expr pos:start="199:47" pos:end="199:49"><name pos:start="199:47" pos:end="199:49">pos</name></expr>]</index></name> <operator pos:start="199:52" pos:end="199:53">!=</operator> <literal type="char" pos:start="199:55" pos:end="199:57">'/'</literal><operator pos:start="199:58" pos:end="199:58">)</operator></expr>)</condition><block type="pseudo" pos:start="201:13" pos:end="201:19"><block_content pos:start="201:13" pos:end="201:19">

	    <expr_stmt pos:start="201:13" pos:end="201:19"><expr pos:start="201:13" pos:end="201:18"><name pos:start="201:13" pos:end="201:16">bptr</name><operator pos:start="201:17" pos:end="201:18">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<while pos:start="203:9" pos:end="205:18">while <condition pos:start="203:15" pos:end="203:65">(<expr pos:start="203:16" pos:end="203:64"><operator pos:start="203:16" pos:end="203:16">(</operator><name pos:start="203:17" pos:end="203:25"><name pos:start="203:17" pos:end="203:20">bptr</name><index pos:start="203:21" pos:end="203:25">[<expr pos:start="203:22" pos:end="203:24"><name pos:start="203:22" pos:end="203:24">pos</name></expr>]</index></name> <operator pos:start="203:27" pos:end="203:28">==</operator> <name pos:start="203:30" pos:end="203:43"><name pos:start="203:30" pos:end="203:32">ref</name><operator pos:start="203:33" pos:end="203:34">-&gt;</operator><name pos:start="203:35" pos:end="203:38">path</name><index pos:start="203:39" pos:end="203:43">[<expr pos:start="203:40" pos:end="203:42"><name pos:start="203:40" pos:end="203:42">pos</name></expr>]</index></name><operator pos:start="203:44" pos:end="203:44">)</operator> <operator pos:start="203:46" pos:end="203:47">&amp;&amp;</operator> <operator pos:start="203:49" pos:end="203:49">(</operator><name pos:start="203:50" pos:end="203:58"><name pos:start="203:50" pos:end="203:53">bptr</name><index pos:start="203:54" pos:end="203:58">[<expr pos:start="203:55" pos:end="203:57"><name pos:start="203:55" pos:end="203:57">pos</name></expr>]</index></name> <operator pos:start="203:60" pos:end="203:61">!=</operator> <literal type="number" pos:start="203:63" pos:end="203:63">0</literal><operator pos:start="203:64" pos:end="203:64">)</operator></expr>)</condition><block type="pseudo" pos:start="205:13" pos:end="205:18"><block_content pos:start="205:13" pos:end="205:18">

	    <expr_stmt pos:start="205:13" pos:end="205:18"><expr pos:start="205:13" pos:end="205:17"><name pos:start="205:13" pos:end="205:15">pos</name><operator pos:start="205:16" pos:end="205:17">++</operator></expr>;</expr_stmt></block_content></block></while>



	<if_stmt pos:start="209:9" pos:end="215:9"><if pos:start="209:9" pos:end="215:9">if <condition pos:start="209:12" pos:end="209:40">(<expr pos:start="209:13" pos:end="209:39"><name pos:start="209:13" pos:end="209:21"><name pos:start="209:13" pos:end="209:16">bptr</name><index pos:start="209:17" pos:end="209:21">[<expr pos:start="209:18" pos:end="209:20"><name pos:start="209:18" pos:end="209:20">pos</name></expr>]</index></name> <operator pos:start="209:23" pos:end="209:24">==</operator> <name pos:start="209:26" pos:end="209:39"><name pos:start="209:26" pos:end="209:28">ref</name><operator pos:start="209:29" pos:end="209:30">-&gt;</operator><name pos:start="209:31" pos:end="209:34">path</name><index pos:start="209:35" pos:end="209:39">[<expr pos:start="209:36" pos:end="209:38"><name pos:start="209:36" pos:end="209:38">pos</name></expr>]</index></name></expr>)</condition> <block pos:start="209:42" pos:end="215:9">{<block_content pos:start="211:13" pos:end="213:22">

	    <expr_stmt pos:start="211:13" pos:end="211:31"><expr pos:start="211:13" pos:end="211:30"><name pos:start="211:13" pos:end="211:15">val</name> <operator pos:start="211:17" pos:end="211:17">=</operator> <call pos:start="211:19" pos:end="211:30"><name pos:start="211:19" pos:end="211:26">g_strdup</name><argument_list pos:start="211:27" pos:end="211:30">(<argument pos:start="211:28" pos:end="211:29"><expr pos:start="211:28" pos:end="211:29"><literal type="string" pos:start="211:28" pos:end="211:29">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <goto pos:start="213:13" pos:end="213:22">goto <name pos:start="213:18" pos:end="213:21">done</name>;</goto>		<comment type="block" pos:start="213:33" pos:end="213:80">/* (I can't imagine why anyone would do this) */</comment>

	</block_content>}</block></if></if_stmt>



	<comment type="block" pos:start="219:9" pos:end="225:11">/*

	 * In URI, "back up" to the last '/' encountered.  This will be the

	 * beginning of the "unique" suffix of URI

	 */</comment>

	<expr_stmt pos:start="227:9" pos:end="227:17"><expr pos:start="227:9" pos:end="227:16"><name pos:start="227:9" pos:end="227:10">ix</name> <operator pos:start="227:12" pos:end="227:12">=</operator> <name pos:start="227:14" pos:end="227:16">pos</name></expr>;</expr_stmt>

	<if_stmt pos:start="229:9" pos:end="235:20"><if pos:start="229:9" pos:end="231:17">if <condition pos:start="229:12" pos:end="229:47">(<expr pos:start="229:13" pos:end="229:46"><operator pos:start="229:13" pos:end="229:13">(</operator><name pos:start="229:14" pos:end="229:26"><name pos:start="229:14" pos:end="229:16">ref</name><operator pos:start="229:17" pos:end="229:18">-&gt;</operator><name pos:start="229:19" pos:end="229:22">path</name><index pos:start="229:23" pos:end="229:26">[<expr pos:start="229:24" pos:end="229:25"><name pos:start="229:24" pos:end="229:25">ix</name></expr>]</index></name> <operator pos:start="229:28" pos:end="229:29">==</operator> <literal type="char" pos:start="229:31" pos:end="229:33">'/'</literal><operator pos:start="229:34" pos:end="229:34">)</operator> <operator pos:start="229:36" pos:end="229:37">&amp;&amp;</operator> <operator pos:start="229:39" pos:end="229:39">(</operator><name pos:start="229:40" pos:end="229:41">ix</name> <operator pos:start="229:43" pos:end="229:43">&gt;</operator> <literal type="number" pos:start="229:45" pos:end="229:45">0</literal><operator pos:start="229:46" pos:end="229:46">)</operator></expr>)</condition><block type="pseudo" pos:start="231:13" pos:end="231:17"><block_content pos:start="231:13" pos:end="231:17">

	    <expr_stmt pos:start="231:13" pos:end="231:17"><expr pos:start="231:13" pos:end="231:16"><name pos:start="231:13" pos:end="231:14">ix</name><operator pos:start="231:15" pos:end="231:16">--</operator></expr>;</expr_stmt></block_content></block></if>

	<if type="elseif" pos:start="233:9" pos:end="235:20">else if <condition pos:start="233:17" pos:end="233:80">(<expr pos:start="233:18" pos:end="233:79"><operator pos:start="233:18" pos:end="233:18">(</operator><name pos:start="233:19" pos:end="233:31"><name pos:start="233:19" pos:end="233:21">ref</name><operator pos:start="233:22" pos:end="233:23">-&gt;</operator><name pos:start="233:24" pos:end="233:27">path</name><index pos:start="233:28" pos:end="233:31">[<expr pos:start="233:29" pos:end="233:30"><name pos:start="233:29" pos:end="233:30">ix</name></expr>]</index></name> <operator pos:start="233:33" pos:end="233:34">==</operator> <literal type="number" pos:start="233:36" pos:end="233:36">0</literal><operator pos:start="233:37" pos:end="233:37">)</operator> <operator pos:start="233:39" pos:end="233:40">&amp;&amp;</operator> <operator pos:start="233:42" pos:end="233:42">(</operator><name pos:start="233:43" pos:end="233:44">ix</name> <operator pos:start="233:46" pos:end="233:46">&gt;</operator> <literal type="number" pos:start="233:48" pos:end="233:48">1</literal><operator pos:start="233:49" pos:end="233:49">)</operator> <operator pos:start="233:51" pos:end="233:52">&amp;&amp;</operator> <operator pos:start="233:54" pos:end="233:54">(</operator><name pos:start="233:55" pos:end="233:71"><name pos:start="233:55" pos:end="233:57">ref</name><operator pos:start="233:58" pos:end="233:59">-&gt;</operator><name pos:start="233:60" pos:end="233:63">path</name><index pos:start="233:64" pos:end="233:71">[<expr pos:start="233:65" pos:end="233:70"><name pos:start="233:65" pos:end="233:66">ix</name> <operator pos:start="233:68" pos:end="233:68">-</operator> <literal type="number" pos:start="233:70" pos:end="233:70">1</literal></expr>]</index></name> <operator pos:start="233:73" pos:end="233:74">==</operator> <literal type="char" pos:start="233:76" pos:end="233:78">'/'</literal><operator pos:start="233:79" pos:end="233:79">)</operator></expr>)</condition><block type="pseudo" pos:start="235:13" pos:end="235:20"><block_content pos:start="235:13" pos:end="235:20">

	    <expr_stmt pos:start="235:13" pos:end="235:20"><expr pos:start="235:13" pos:end="235:19"><name pos:start="235:13" pos:end="235:14">ix</name> <operator pos:start="235:16" pos:end="235:17">-=</operator> <literal type="number" pos:start="235:19" pos:end="235:19">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for pos:start="237:9" pos:end="243:9">for <control pos:start="237:13" pos:end="237:28">(<init pos:start="237:14" pos:end="237:14">;</init> <condition pos:start="237:16" pos:end="237:22"><expr pos:start="237:16" pos:end="237:21"><name pos:start="237:16" pos:end="237:17">ix</name> <operator pos:start="237:19" pos:end="237:19">&gt;</operator> <literal type="number" pos:start="237:21" pos:end="237:21">0</literal></expr>;</condition> <incr pos:start="237:24" pos:end="237:27"><expr pos:start="237:24" pos:end="237:27"><name pos:start="237:24" pos:end="237:25">ix</name><operator pos:start="237:26" pos:end="237:27">--</operator></expr></incr>)</control> <block pos:start="237:30" pos:end="243:9">{<block_content pos:start="239:13" pos:end="241:22">

	    <if_stmt pos:start="239:13" pos:end="241:22"><if pos:start="239:13" pos:end="241:22">if <condition pos:start="239:16" pos:end="239:37">(<expr pos:start="239:17" pos:end="239:36"><name pos:start="239:17" pos:end="239:29"><name pos:start="239:17" pos:end="239:19">ref</name><operator pos:start="239:20" pos:end="239:21">-&gt;</operator><name pos:start="239:22" pos:end="239:25">path</name><index pos:start="239:26" pos:end="239:29">[<expr pos:start="239:27" pos:end="239:28"><name pos:start="239:27" pos:end="239:28">ix</name></expr>]</index></name> <operator pos:start="239:31" pos:end="239:32">==</operator> <literal type="char" pos:start="239:34" pos:end="239:36">'/'</literal></expr>)</condition><block type="pseudo" pos:start="241:17" pos:end="241:22"><block_content pos:start="241:17" pos:end="241:22">

		<break pos:start="241:17" pos:end="241:22">break;</break></block_content></block></if></if_stmt>

	</block_content>}</block></for>

	<if_stmt pos:start="245:9" pos:end="255:9"><if pos:start="245:9" pos:end="249:9">if <condition pos:start="245:12" pos:end="245:20">(<expr pos:start="245:13" pos:end="245:19"><name pos:start="245:13" pos:end="245:14">ix</name> <operator pos:start="245:16" pos:end="245:17">==</operator> <literal type="number" pos:start="245:19" pos:end="245:19">0</literal></expr>)</condition> <block pos:start="245:22" pos:end="249:9">{<block_content pos:start="247:13" pos:end="247:29">

	    <expr_stmt pos:start="247:13" pos:end="247:29"><expr pos:start="247:13" pos:end="247:28"><name pos:start="247:13" pos:end="247:16">uptr</name> <operator pos:start="247:18" pos:end="247:18">=</operator> <name pos:start="247:20" pos:end="247:28"><name pos:start="247:20" pos:end="247:22">ref</name><operator pos:start="247:23" pos:end="247:24">-&gt;</operator><name pos:start="247:25" pos:end="247:28">path</name></name></expr>;</expr_stmt>

	</block_content>}</block></if> <else pos:start="249:11" pos:end="255:9">else <block pos:start="249:16" pos:end="255:9">{<block_content pos:start="251:13" pos:end="253:34">

	    <expr_stmt pos:start="251:13" pos:end="251:17"><expr pos:start="251:13" pos:end="251:16"><name pos:start="251:13" pos:end="251:14">ix</name><operator pos:start="251:15" pos:end="251:16">++</operator></expr>;</expr_stmt>

	    <expr_stmt pos:start="253:13" pos:end="253:34"><expr pos:start="253:13" pos:end="253:33"><name pos:start="253:13" pos:end="253:16">uptr</name> <operator pos:start="253:18" pos:end="253:18">=</operator> <operator pos:start="253:20" pos:end="253:20">&amp;</operator><name pos:start="253:21" pos:end="253:33"><name pos:start="253:21" pos:end="253:23">ref</name><operator pos:start="253:24" pos:end="253:25">-&gt;</operator><name pos:start="253:26" pos:end="253:29">path</name><index pos:start="253:30" pos:end="253:33">[<expr pos:start="253:31" pos:end="253:32"><name pos:start="253:31" pos:end="253:32">ix</name></expr>]</index></name></expr>;</expr_stmt>

	</block_content>}</block></else></if_stmt>



	<comment type="block" pos:start="259:9" pos:end="263:11">/*

	 * In base, count the number of '/' from the differing point

	 */</comment>

	<if_stmt pos:start="265:9" pos:end="275:9"><if pos:start="265:9" pos:end="275:9">if <condition pos:start="265:12" pos:end="265:40">(<expr pos:start="265:13" pos:end="265:39"><name pos:start="265:13" pos:end="265:21"><name pos:start="265:13" pos:end="265:16">bptr</name><index pos:start="265:17" pos:end="265:21">[<expr pos:start="265:18" pos:end="265:20"><name pos:start="265:18" pos:end="265:20">pos</name></expr>]</index></name> <operator pos:start="265:23" pos:end="265:24">!=</operator> <name pos:start="265:26" pos:end="265:39"><name pos:start="265:26" pos:end="265:28">ref</name><operator pos:start="265:29" pos:end="265:30">-&gt;</operator><name pos:start="265:31" pos:end="265:34">path</name><index pos:start="265:35" pos:end="265:39">[<expr pos:start="265:36" pos:end="265:38"><name pos:start="265:36" pos:end="265:38">pos</name></expr>]</index></name></expr>)</condition> <block pos:start="265:42" pos:end="275:9">{<block_content pos:start="267:13" pos:end="273:13"><comment type="block" pos:start="265:43" pos:end="265:77">/* check for trivial URI == base */</comment>

	    <for pos:start="267:13" pos:end="273:13">for <control pos:start="267:17" pos:end="267:39">(<init pos:start="267:18" pos:end="267:18">;</init> <condition pos:start="267:20" pos:end="267:33"><expr pos:start="267:20" pos:end="267:32"><name pos:start="267:20" pos:end="267:27"><name pos:start="267:20" pos:end="267:23">bptr</name><index pos:start="267:24" pos:end="267:27">[<expr pos:start="267:25" pos:end="267:26"><name pos:start="267:25" pos:end="267:26">ix</name></expr>]</index></name> <operator pos:start="267:29" pos:end="267:30">!=</operator> <literal type="number" pos:start="267:32" pos:end="267:32">0</literal></expr>;</condition> <incr pos:start="267:35" pos:end="267:38"><expr pos:start="267:35" pos:end="267:38"><name pos:start="267:35" pos:end="267:36">ix</name><operator pos:start="267:37" pos:end="267:38">++</operator></expr></incr>)</control> <block pos:start="267:41" pos:end="273:13">{<block_content pos:start="269:17" pos:end="271:30">

		<if_stmt pos:start="269:17" pos:end="271:30"><if pos:start="269:17" pos:end="271:30">if <condition pos:start="269:20" pos:end="269:36">(<expr pos:start="269:21" pos:end="269:35"><name pos:start="269:21" pos:end="269:28"><name pos:start="269:21" pos:end="269:24">bptr</name><index pos:start="269:25" pos:end="269:28">[<expr pos:start="269:26" pos:end="269:27"><name pos:start="269:26" pos:end="269:27">ix</name></expr>]</index></name> <operator pos:start="269:30" pos:end="269:31">==</operator> <literal type="char" pos:start="269:33" pos:end="269:35">'/'</literal></expr>)</condition><block type="pseudo" pos:start="271:21" pos:end="271:30"><block_content pos:start="271:21" pos:end="271:30">

		    <expr_stmt pos:start="271:21" pos:end="271:30"><expr pos:start="271:21" pos:end="271:29"><name pos:start="271:21" pos:end="271:27">nbslash</name><operator pos:start="271:28" pos:end="271:29">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	    </block_content>}</block></for>

	</block_content>}</block></if></if_stmt>

	<expr_stmt pos:start="277:9" pos:end="277:32"><expr pos:start="277:9" pos:end="277:31"><name pos:start="277:9" pos:end="277:11">len</name> <operator pos:start="277:13" pos:end="277:13">=</operator> <call pos:start="277:15" pos:end="277:27"><name pos:start="277:15" pos:end="277:20">strlen</name> <argument_list pos:start="277:22" pos:end="277:27">(<argument pos:start="277:23" pos:end="277:26"><expr pos:start="277:23" pos:end="277:26"><name pos:start="277:23" pos:end="277:26">uptr</name></expr></argument>)</argument_list></call> <operator pos:start="277:29" pos:end="277:29">+</operator> <literal type="number" pos:start="277:31" pos:end="277:31">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="283:5" pos:end="293:5"><if pos:start="283:5" pos:end="293:5">if <condition pos:start="283:8" pos:end="283:21">(<expr pos:start="283:9" pos:end="283:20"><name pos:start="283:9" pos:end="283:15">nbslash</name> <operator pos:start="283:17" pos:end="283:18">==</operator> <literal type="number" pos:start="283:20" pos:end="283:20">0</literal></expr>)</condition> <block pos:start="283:23" pos:end="293:5">{<block_content pos:start="285:9" pos:end="291:18">

	<if_stmt pos:start="285:9" pos:end="289:53"><if pos:start="285:9" pos:end="289:53">if <condition pos:start="285:12" pos:end="285:25">(<expr pos:start="285:13" pos:end="285:24"><name pos:start="285:13" pos:end="285:16">uptr</name> <operator pos:start="285:18" pos:end="285:19">!=</operator> <name pos:start="285:21" pos:end="285:24">NULL</name></expr>)</condition><block type="pseudo" pos:start="289:13" pos:end="289:53"><block_content pos:start="289:13" pos:end="289:53">

	    <comment type="block" pos:start="287:13" pos:end="287:57">/* exception characters from uri_to_string */</comment>

	    <expr_stmt pos:start="289:13" pos:end="289:53"><expr pos:start="289:13" pos:end="289:52"><name pos:start="289:13" pos:end="289:15">val</name> <operator pos:start="289:17" pos:end="289:17">=</operator> <call pos:start="289:19" pos:end="289:52"><name pos:start="289:19" pos:end="289:35">uri_string_escape</name><argument_list pos:start="289:36" pos:end="289:52">(<argument pos:start="289:37" pos:end="289:40"><expr pos:start="289:37" pos:end="289:40"><name pos:start="289:37" pos:end="289:40">uptr</name></expr></argument>, <argument pos:start="289:43" pos:end="289:51"><expr pos:start="289:43" pos:end="289:51"><literal type="string" pos:start="289:43" pos:end="289:51">"/;&amp;=+$,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<goto pos:start="291:9" pos:end="291:18">goto <name pos:start="291:14" pos:end="291:17">done</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="297:5" pos:end="305:7">/*

     * Allocate just enough space for the returned string -

     * length of the remainder of the URI, plus enough space

     * for the "../" groups, plus one for the terminator

     */</comment>

    <expr_stmt pos:start="307:5" pos:end="307:39"><expr pos:start="307:5" pos:end="307:38"><name pos:start="307:5" pos:end="307:7">val</name> <operator pos:start="307:9" pos:end="307:9">=</operator> <call pos:start="307:11" pos:end="307:38"><name pos:start="307:11" pos:end="307:18">g_malloc</name> <argument_list pos:start="307:20" pos:end="307:38">(<argument pos:start="307:21" pos:end="307:37"><expr pos:start="307:21" pos:end="307:37"><name pos:start="307:21" pos:end="307:23">len</name> <operator pos:start="307:25" pos:end="307:25">+</operator> <literal type="number" pos:start="307:27" pos:end="307:27">3</literal> <operator pos:start="307:29" pos:end="307:29">*</operator> <name pos:start="307:31" pos:end="307:37">nbslash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="309:5" pos:end="309:15"><expr pos:start="309:5" pos:end="309:14"><name pos:start="309:5" pos:end="309:8">vptr</name> <operator pos:start="309:10" pos:end="309:10">=</operator> <name pos:start="309:12" pos:end="309:14">val</name></expr>;</expr_stmt>

    <comment type="block" pos:start="311:5" pos:end="315:7">/*

     * Put in as many "../" as needed

     */</comment>

    <for pos:start="317:5" pos:end="325:5">for <control pos:start="317:9" pos:end="317:32">(<init pos:start="317:10" pos:end="317:10">;</init> <condition pos:start="317:12" pos:end="317:21"><expr pos:start="317:12" pos:end="317:20"><name pos:start="317:12" pos:end="317:18">nbslash</name><operator pos:start="317:19" pos:end="317:19">&gt;</operator><literal type="number" pos:start="317:20" pos:end="317:20">0</literal></expr>;</condition> <incr pos:start="317:23" pos:end="317:31"><expr pos:start="317:23" pos:end="317:31"><name pos:start="317:23" pos:end="317:29">nbslash</name><operator pos:start="317:30" pos:end="317:31">--</operator></expr></incr>)</control> <block pos:start="317:34" pos:end="325:5">{<block_content pos:start="319:9" pos:end="323:22">

	<expr_stmt pos:start="319:9" pos:end="319:22"><expr pos:start="319:9" pos:end="319:21"><operator pos:start="319:9" pos:end="319:9">*</operator><name pos:start="319:10" pos:end="319:13">vptr</name><operator pos:start="319:14" pos:end="319:15">++</operator> <operator pos:start="319:17" pos:end="319:17">=</operator> <literal type="char" pos:start="319:19" pos:end="319:21">'.'</literal></expr>;</expr_stmt>

	<expr_stmt pos:start="321:9" pos:end="321:22"><expr pos:start="321:9" pos:end="321:21"><operator pos:start="321:9" pos:end="321:9">*</operator><name pos:start="321:10" pos:end="321:13">vptr</name><operator pos:start="321:14" pos:end="321:15">++</operator> <operator pos:start="321:17" pos:end="321:17">=</operator> <literal type="char" pos:start="321:19" pos:end="321:21">'.'</literal></expr>;</expr_stmt>

	<expr_stmt pos:start="323:9" pos:end="323:22"><expr pos:start="323:9" pos:end="323:21"><operator pos:start="323:9" pos:end="323:9">*</operator><name pos:start="323:10" pos:end="323:13">vptr</name><operator pos:start="323:14" pos:end="323:15">++</operator> <operator pos:start="323:17" pos:end="323:17">=</operator> <literal type="char" pos:start="323:19" pos:end="323:21">'/'</literal></expr>;</expr_stmt>

    </block_content>}</block></for>

    <comment type="block" pos:start="327:5" pos:end="331:7">/*

     * Finish up with the end of the URI

     */</comment>

    <if_stmt pos:start="333:5" pos:end="355:5"><if pos:start="333:5" pos:end="351:5">if <condition pos:start="333:8" pos:end="333:21">(<expr pos:start="333:9" pos:end="333:20"><name pos:start="333:9" pos:end="333:12">uptr</name> <operator pos:start="333:14" pos:end="333:15">!=</operator> <name pos:start="333:17" pos:end="333:20">NULL</name></expr>)</condition> <block pos:start="333:23" pos:end="351:5">{<block_content pos:start="335:9" pos:end="349:9">

        <if_stmt pos:start="335:9" pos:end="349:9"><if pos:start="335:9" pos:end="343:9">if <condition pos:start="335:12" pos:end="337:50">(<expr pos:start="335:13" pos:end="337:49"><operator pos:start="335:13" pos:end="335:13">(</operator><name pos:start="335:14" pos:end="335:17">vptr</name> <operator pos:start="335:19" pos:end="335:19">&gt;</operator> <name pos:start="335:21" pos:end="335:23">val</name><operator pos:start="335:24" pos:end="335:24">)</operator> <operator pos:start="335:26" pos:end="335:27">&amp;&amp;</operator> <operator pos:start="335:29" pos:end="335:29">(</operator><name pos:start="335:30" pos:end="335:32">len</name> <operator pos:start="335:34" pos:end="335:34">&gt;</operator> <literal type="number" pos:start="335:36" pos:end="335:36">0</literal><operator pos:start="335:37" pos:end="335:37">)</operator> <operator pos:start="335:39" pos:end="335:40">&amp;&amp;</operator>

	    <operator pos:start="337:13" pos:end="337:13">(</operator><name pos:start="337:14" pos:end="337:20"><name pos:start="337:14" pos:end="337:17">uptr</name><index pos:start="337:18" pos:end="337:20">[<expr pos:start="337:19" pos:end="337:19"><literal type="number" pos:start="337:19" pos:end="337:19">0</literal></expr>]</index></name> <operator pos:start="337:22" pos:end="337:23">==</operator> <literal type="char" pos:start="337:25" pos:end="337:27">'/'</literal><operator pos:start="337:28" pos:end="337:28">)</operator> <operator pos:start="337:30" pos:end="337:31">&amp;&amp;</operator> <operator pos:start="337:33" pos:end="337:33">(</operator><name pos:start="337:34" pos:end="337:41"><name pos:start="337:34" pos:end="337:37">vptr</name><index pos:start="337:38" pos:end="337:41">[<expr pos:start="337:39" pos:end="337:40"><operator pos:start="337:39" pos:end="337:39">-</operator><literal type="number" pos:start="337:40" pos:end="337:40">1</literal></expr>]</index></name> <operator pos:start="337:43" pos:end="337:44">==</operator> <literal type="char" pos:start="337:46" pos:end="337:48">'/'</literal><operator pos:start="337:49" pos:end="337:49">)</operator></expr>)</condition> <block pos:start="337:52" pos:end="343:9">{<block_content pos:start="339:13" pos:end="341:30">

	    <expr_stmt pos:start="339:13" pos:end="339:45"><expr pos:start="339:13" pos:end="339:44"><call pos:start="339:13" pos:end="339:44"><name pos:start="339:13" pos:end="339:18">memcpy</name> <argument_list pos:start="339:20" pos:end="339:44">(<argument pos:start="339:21" pos:end="339:24"><expr pos:start="339:21" pos:end="339:24"><name pos:start="339:21" pos:end="339:24">vptr</name></expr></argument>, <argument pos:start="339:27" pos:end="339:34"><expr pos:start="339:27" pos:end="339:34"><name pos:start="339:27" pos:end="339:30">uptr</name> <operator pos:start="339:32" pos:end="339:32">+</operator> <literal type="number" pos:start="339:34" pos:end="339:34">1</literal></expr></argument>, <argument pos:start="339:37" pos:end="339:43"><expr pos:start="339:37" pos:end="339:43"><name pos:start="339:37" pos:end="339:39">len</name> <operator pos:start="339:41" pos:end="339:41">-</operator> <literal type="number" pos:start="339:43" pos:end="339:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="341:13" pos:end="341:30"><expr pos:start="341:13" pos:end="341:29"><name pos:start="341:13" pos:end="341:25"><name pos:start="341:13" pos:end="341:16">vptr</name><index pos:start="341:17" pos:end="341:25">[<expr pos:start="341:18" pos:end="341:24"><name pos:start="341:18" pos:end="341:20">len</name> <operator pos:start="341:22" pos:end="341:22">-</operator> <literal type="number" pos:start="341:24" pos:end="341:24">2</literal></expr>]</index></name> <operator pos:start="341:27" pos:end="341:27">=</operator> <literal type="number" pos:start="341:29" pos:end="341:29">0</literal></expr>;</expr_stmt>

	</block_content>}</block></if> <else pos:start="343:11" pos:end="349:9">else <block pos:start="343:16" pos:end="349:9">{<block_content pos:start="345:13" pos:end="347:30">

	    <expr_stmt pos:start="345:13" pos:end="345:37"><expr pos:start="345:13" pos:end="345:36"><call pos:start="345:13" pos:end="345:36"><name pos:start="345:13" pos:end="345:18">memcpy</name> <argument_list pos:start="345:20" pos:end="345:36">(<argument pos:start="345:21" pos:end="345:24"><expr pos:start="345:21" pos:end="345:24"><name pos:start="345:21" pos:end="345:24">vptr</name></expr></argument>, <argument pos:start="345:27" pos:end="345:30"><expr pos:start="345:27" pos:end="345:30"><name pos:start="345:27" pos:end="345:30">uptr</name></expr></argument>, <argument pos:start="345:33" pos:end="345:35"><expr pos:start="345:33" pos:end="345:35"><name pos:start="345:33" pos:end="345:35">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="347:13" pos:end="347:30"><expr pos:start="347:13" pos:end="347:29"><name pos:start="347:13" pos:end="347:25"><name pos:start="347:13" pos:end="347:16">vptr</name><index pos:start="347:17" pos:end="347:25">[<expr pos:start="347:18" pos:end="347:24"><name pos:start="347:18" pos:end="347:20">len</name> <operator pos:start="347:22" pos:end="347:22">-</operator> <literal type="number" pos:start="347:24" pos:end="347:24">1</literal></expr>]</index></name> <operator pos:start="347:27" pos:end="347:27">=</operator> <literal type="number" pos:start="347:29" pos:end="347:29">0</literal></expr>;</expr_stmt>

	</block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="351:7" pos:end="355:5">else <block pos:start="351:12" pos:end="355:5">{<block_content pos:start="353:9" pos:end="353:26">

	<expr_stmt pos:start="353:9" pos:end="353:26"><expr pos:start="353:9" pos:end="353:25"><name pos:start="353:9" pos:end="353:21"><name pos:start="353:9" pos:end="353:12">vptr</name><index pos:start="353:13" pos:end="353:21">[<expr pos:start="353:14" pos:end="353:20"><name pos:start="353:14" pos:end="353:16">len</name> <operator pos:start="353:18" pos:end="353:18">-</operator> <literal type="number" pos:start="353:20" pos:end="353:20">1</literal></expr>]</index></name> <operator pos:start="353:23" pos:end="353:23">=</operator> <literal type="number" pos:start="353:25" pos:end="353:25">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="359:5" pos:end="359:39">/* escape the freshly-built path */</comment>

    <expr_stmt pos:start="361:5" pos:end="361:15"><expr pos:start="361:5" pos:end="361:14"><name pos:start="361:5" pos:end="361:8">vptr</name> <operator pos:start="361:10" pos:end="361:10">=</operator> <name pos:start="361:12" pos:end="361:14">val</name></expr>;</expr_stmt>

	<comment type="block" pos:start="363:9" pos:end="363:53">/* exception characters from uri_to_string */</comment>

    <expr_stmt pos:start="365:5" pos:end="365:45"><expr pos:start="365:5" pos:end="365:44"><name pos:start="365:5" pos:end="365:7">val</name> <operator pos:start="365:9" pos:end="365:9">=</operator> <call pos:start="365:11" pos:end="365:44"><name pos:start="365:11" pos:end="365:27">uri_string_escape</name><argument_list pos:start="365:28" pos:end="365:44">(<argument pos:start="365:29" pos:end="365:32"><expr pos:start="365:29" pos:end="365:32"><name pos:start="365:29" pos:end="365:32">vptr</name></expr></argument>, <argument pos:start="365:35" pos:end="365:43"><expr pos:start="365:35" pos:end="365:43"><literal type="string" pos:start="365:35" pos:end="365:43">"/;&amp;=+$,"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="367:5" pos:end="367:17"><expr pos:start="367:5" pos:end="367:16"><call pos:start="367:5" pos:end="367:16"><name pos:start="367:5" pos:end="367:10">g_free</name><argument_list pos:start="367:11" pos:end="367:16">(<argument pos:start="367:12" pos:end="367:15"><expr pos:start="367:12" pos:end="367:15"><name pos:start="367:12" pos:end="367:15">vptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="371:1" pos:end="371:5"><name pos:start="371:1" pos:end="371:4">done</name>:</label>

    <comment type="block" pos:start="373:5" pos:end="377:7">/*

     * Free the working variables

     */</comment>

    <if_stmt pos:start="379:5" pos:end="381:25"><if pos:start="379:5" pos:end="381:25">if <condition pos:start="379:8" pos:end="379:25">(<expr pos:start="379:9" pos:end="379:24"><name pos:start="379:9" pos:end="379:19">remove_path</name> <operator pos:start="379:21" pos:end="379:22">!=</operator> <literal type="number" pos:start="379:24" pos:end="379:24">0</literal></expr>)</condition><block type="pseudo" pos:start="381:9" pos:end="381:25"><block_content pos:start="381:9" pos:end="381:25">

        <expr_stmt pos:start="381:9" pos:end="381:25"><expr pos:start="381:9" pos:end="381:24"><name pos:start="381:9" pos:end="381:17"><name pos:start="381:9" pos:end="381:11">ref</name><operator pos:start="381:12" pos:end="381:13">-&gt;</operator><name pos:start="381:14" pos:end="381:17">path</name></name> <operator pos:start="381:19" pos:end="381:19">=</operator> <name pos:start="381:21" pos:end="381:24">NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="383:5" pos:end="385:23"><if pos:start="383:5" pos:end="385:23">if <condition pos:start="383:8" pos:end="383:20">(<expr pos:start="383:9" pos:end="383:19"><name pos:start="383:9" pos:end="383:11">ref</name> <operator pos:start="383:13" pos:end="383:14">!=</operator> <name pos:start="383:16" pos:end="383:19">NULL</name></expr>)</condition><block type="pseudo" pos:start="385:9" pos:end="385:23"><block_content pos:start="385:9" pos:end="385:23">

	<expr_stmt pos:start="385:9" pos:end="385:23"><expr pos:start="385:9" pos:end="385:22"><call pos:start="385:9" pos:end="385:22"><name pos:start="385:9" pos:end="385:16">uri_free</name> <argument_list pos:start="385:18" pos:end="385:22">(<argument pos:start="385:19" pos:end="385:21"><expr pos:start="385:19" pos:end="385:21"><name pos:start="385:19" pos:end="385:21">ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="387:5" pos:end="389:23"><if pos:start="387:5" pos:end="389:23">if <condition pos:start="387:8" pos:end="387:20">(<expr pos:start="387:9" pos:end="387:19"><name pos:start="387:9" pos:end="387:11">bas</name> <operator pos:start="387:13" pos:end="387:14">!=</operator> <name pos:start="387:16" pos:end="387:19">NULL</name></expr>)</condition><block type="pseudo" pos:start="389:9" pos:end="389:23"><block_content pos:start="389:9" pos:end="389:23">

	<expr_stmt pos:start="389:9" pos:end="389:23"><expr pos:start="389:9" pos:end="389:22"><call pos:start="389:9" pos:end="389:22"><name pos:start="389:9" pos:end="389:16">uri_free</name> <argument_list pos:start="389:18" pos:end="389:22">(<argument pos:start="389:19" pos:end="389:21"><expr pos:start="389:19" pos:end="389:21"><name pos:start="389:19" pos:end="389:21">bas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="393:5" pos:end="393:15">return <expr pos:start="393:12" pos:end="393:14"><name pos:start="393:12" pos:end="393:14">val</name></expr>;</return>

</block_content>}</block>
</unit>
