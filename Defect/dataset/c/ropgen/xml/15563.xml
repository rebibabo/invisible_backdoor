<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15563.c" pos:tabs="8"><function pos:start="1:1" pos:end="245:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:13">bdrv_open</name><parameter_list pos:start="1:14" pos:end="1:71">(<parameter pos:start="1:15" pos:end="1:34"><decl pos:start="1:15" pos:end="1:34"><type pos:start="1:15" pos:end="1:34"><name pos:start="1:15" pos:end="1:30">BlockDriverState</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:34">bs</name></decl></parameter>, <parameter pos:start="1:37" pos:end="1:56"><decl pos:start="1:37" pos:end="1:56"><type pos:start="1:37" pos:end="1:56"><specifier pos:start="1:37" pos:end="1:41">const</specifier> <name pos:start="1:43" pos:end="1:46">char</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:56">filename</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:70"><decl pos:start="1:59" pos:end="1:70"><type pos:start="1:59" pos:end="1:70"><name pos:start="1:59" pos:end="1:61">int</name></type> <name pos:start="1:63" pos:end="1:70">snapshot</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="245:1">{<block_content pos:start="5:5" pos:end="243:14">

    <decl_stmt pos:start="5:5" pos:end="5:11"><decl pos:start="5:5" pos:end="5:10"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:10">fd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">int64_t</name></type> <name pos:start="7:13" pos:end="7:16">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="12:0"><decl pos:start="9:5" pos:end="9:35"><type pos:start="9:5" pos:end="9:24"><name pos:start="9:5" pos:end="9:24"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:24">cow_header_v2</name></name></type> <name pos:start="9:26" pos:end="9:35">cow_header</name></decl>;</decl_stmt>

<cpp:ifndef pos:start="11:1" pos:end="11:14">#<cpp:directive pos:start="11:2" pos:end="11:7">ifndef</cpp:directive> <name pos:start="11:9" pos:end="11:14">_WIN32</name></cpp:ifndef>

    <decl_stmt pos:start="13:5" pos:end="13:39"><decl pos:start="13:5" pos:end="13:38"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">char</name></type> <name pos:start="13:10" pos:end="13:19"><name pos:start="13:10" pos:end="13:17">template</name><index pos:start="13:18" pos:end="13:19">[]</index></name> <init pos:start="13:21" pos:end="13:38">= <expr pos:start="13:23" pos:end="13:38"><literal type="string" pos:start="13:23" pos:end="13:38">"/tmp/vl.XXXXXX"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:15"><decl pos:start="15:5" pos:end="15:14"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:14">cow_fd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="20:0"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:10">struct</name> <name pos:start="17:12" pos:end="17:15">stat</name></name></type> <name pos:start="17:17" pos:end="17:18">st</name></decl>;</decl_stmt>

<cpp:endif pos:start="19:1" pos:end="19:6">#<cpp:directive pos:start="19:2" pos:end="19:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="23:5" pos:end="23:22"><expr pos:start="23:5" pos:end="23:21"><name pos:start="23:5" pos:end="23:17"><name pos:start="23:5" pos:end="23:6">bs</name><operator pos:start="23:7" pos:end="23:8">-&gt;</operator><name pos:start="23:9" pos:end="23:17">read_only</name></name> <operator pos:start="23:19" pos:end="23:19">=</operator> <literal type="number" pos:start="23:21" pos:end="23:21">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:16"><expr pos:start="25:5" pos:end="25:15"><name pos:start="25:5" pos:end="25:10"><name pos:start="25:5" pos:end="25:6">bs</name><operator pos:start="25:7" pos:end="25:8">-&gt;</operator><name pos:start="25:9" pos:end="25:10">fd</name></name> <operator pos:start="25:12" pos:end="25:12">=</operator> <operator pos:start="25:14" pos:end="25:14">-</operator><literal type="number" pos:start="25:15" pos:end="25:15">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:20"><expr pos:start="27:5" pos:end="27:19"><name pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:6">bs</name><operator pos:start="27:7" pos:end="27:8">-&gt;</operator><name pos:start="27:9" pos:end="27:14">cow_fd</name></name> <operator pos:start="27:16" pos:end="27:16">=</operator> <operator pos:start="27:18" pos:end="27:18">-</operator><literal type="number" pos:start="27:19" pos:end="27:19">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:26"><expr pos:start="29:5" pos:end="29:25"><name pos:start="29:5" pos:end="29:18"><name pos:start="29:5" pos:end="29:6">bs</name><operator pos:start="29:7" pos:end="29:8">-&gt;</operator><name pos:start="29:9" pos:end="29:18">cow_bitmap</name></name> <operator pos:start="29:20" pos:end="29:20">=</operator> <name pos:start="29:22" pos:end="29:25">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="38:0"><expr pos:start="31:5" pos:end="31:34"><call pos:start="31:5" pos:end="31:34"><name pos:start="31:5" pos:end="31:10">strcpy</name><argument_list pos:start="31:11" pos:end="31:34">(<argument pos:start="31:12" pos:end="31:23"><expr pos:start="31:12" pos:end="31:23"><name pos:start="31:12" pos:end="31:23"><name pos:start="31:12" pos:end="31:13">bs</name><operator pos:start="31:14" pos:end="31:15">-&gt;</operator><name pos:start="31:16" pos:end="31:23">filename</name></name></expr></argument>, <argument pos:start="31:26" pos:end="31:33"><expr pos:start="31:26" pos:end="31:33"><name pos:start="31:26" pos:end="31:33">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:32">/* open standard HD image */</comment>

<cpp:ifdef pos:start="37:1" pos:end="37:13">#<cpp:directive pos:start="37:2" pos:end="37:6">ifdef</cpp:directive> <name pos:start="37:8" pos:end="37:13">_WIN32</name></cpp:ifdef>

    <expr_stmt pos:start="39:5" pos:end="42:0"><expr pos:start="39:5" pos:end="39:42"><name pos:start="39:5" pos:end="39:6">fd</name> <operator pos:start="39:8" pos:end="39:8">=</operator> <call pos:start="39:10" pos:end="39:42"><name pos:start="39:10" pos:end="39:13">open</name><argument_list pos:start="39:14" pos:end="39:42">(<argument pos:start="39:15" pos:end="39:22"><expr pos:start="39:15" pos:end="39:22"><name pos:start="39:15" pos:end="39:22">filename</name></expr></argument>, <argument pos:start="39:25" pos:end="39:41"><expr pos:start="39:25" pos:end="39:41"><name pos:start="39:25" pos:end="39:30">O_RDWR</name> <operator pos:start="39:32" pos:end="39:32">|</operator> <name pos:start="39:34" pos:end="39:41">O_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="41:1" pos:end="41:5">#<cpp:directive pos:start="41:2" pos:end="41:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="43:5" pos:end="46:0"><expr pos:start="43:5" pos:end="43:45"><name pos:start="43:5" pos:end="43:6">fd</name> <operator pos:start="43:8" pos:end="43:8">=</operator> <call pos:start="43:10" pos:end="43:45"><name pos:start="43:10" pos:end="43:13">open</name><argument_list pos:start="43:14" pos:end="43:45">(<argument pos:start="43:15" pos:end="43:22"><expr pos:start="43:15" pos:end="43:22"><name pos:start="43:15" pos:end="43:22">filename</name></expr></argument>, <argument pos:start="43:25" pos:end="43:44"><expr pos:start="43:25" pos:end="43:44"><name pos:start="43:25" pos:end="43:30">O_RDWR</name> <operator pos:start="43:32" pos:end="43:32">|</operator> <name pos:start="43:34" pos:end="43:44">O_LARGEFILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="45:1" pos:end="45:6">#<cpp:directive pos:start="45:2" pos:end="45:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="47:5" pos:end="73:5"><if pos:start="47:5" pos:end="73:5">if <condition pos:start="47:8" pos:end="47:15">(<expr pos:start="47:9" pos:end="47:14"><name pos:start="47:9" pos:end="47:10">fd</name> <operator pos:start="47:12" pos:end="47:12">&lt;</operator> <literal type="number" pos:start="47:14" pos:end="47:14">0</literal></expr>)</condition> <block pos:start="47:17" pos:end="73:5">{<block_content pos:start="53:9" pos:end="71:30">

        <comment type="block" pos:start="49:9" pos:end="49:37">/* read only image on disk */</comment>

<cpp:ifdef pos:start="51:1" pos:end="51:13">#<cpp:directive pos:start="51:2" pos:end="51:6">ifdef</cpp:directive> <name pos:start="51:8" pos:end="51:13">_WIN32</name></cpp:ifdef>

        <expr_stmt pos:start="53:9" pos:end="56:0"><expr pos:start="53:9" pos:end="53:48"><name pos:start="53:9" pos:end="53:10">fd</name> <operator pos:start="53:12" pos:end="53:12">=</operator> <call pos:start="53:14" pos:end="53:48"><name pos:start="53:14" pos:end="53:17">open</name><argument_list pos:start="53:18" pos:end="53:48">(<argument pos:start="53:19" pos:end="53:26"><expr pos:start="53:19" pos:end="53:26"><name pos:start="53:19" pos:end="53:26">filename</name></expr></argument>, <argument pos:start="53:29" pos:end="53:47"><expr pos:start="53:29" pos:end="53:47"><name pos:start="53:29" pos:end="53:36">O_RDONLY</name> <operator pos:start="53:38" pos:end="53:38">|</operator> <name pos:start="53:40" pos:end="53:47">O_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="55:1" pos:end="55:5">#<cpp:directive pos:start="55:2" pos:end="55:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="57:9" pos:end="60:0"><expr pos:start="57:9" pos:end="57:51"><name pos:start="57:9" pos:end="57:10">fd</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <call pos:start="57:14" pos:end="57:51"><name pos:start="57:14" pos:end="57:17">open</name><argument_list pos:start="57:18" pos:end="57:51">(<argument pos:start="57:19" pos:end="57:26"><expr pos:start="57:19" pos:end="57:26"><name pos:start="57:19" pos:end="57:26">filename</name></expr></argument>, <argument pos:start="57:29" pos:end="57:50"><expr pos:start="57:29" pos:end="57:50"><name pos:start="57:29" pos:end="57:36">O_RDONLY</name> <operator pos:start="57:38" pos:end="57:38">|</operator> <name pos:start="57:40" pos:end="57:50">O_LARGEFILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="59:1" pos:end="59:6">#<cpp:directive pos:start="59:2" pos:end="59:6">endif</cpp:directive></cpp:endif>

        <if_stmt pos:start="61:9" pos:end="67:9"><if pos:start="61:9" pos:end="67:9">if <condition pos:start="61:12" pos:end="61:19">(<expr pos:start="61:13" pos:end="61:18"><name pos:start="61:13" pos:end="61:14">fd</name> <operator pos:start="61:16" pos:end="61:16">&lt;</operator> <literal type="number" pos:start="61:18" pos:end="61:18">0</literal></expr>)</condition> <block pos:start="61:21" pos:end="67:9">{<block_content pos:start="63:13" pos:end="65:22">

            <expr_stmt pos:start="63:13" pos:end="63:29"><expr pos:start="63:13" pos:end="63:28"><call pos:start="63:13" pos:end="63:28"><name pos:start="63:13" pos:end="63:18">perror</name><argument_list pos:start="63:19" pos:end="63:28">(<argument pos:start="63:20" pos:end="63:27"><expr pos:start="63:20" pos:end="63:27"><name pos:start="63:20" pos:end="63:27">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="65:13" pos:end="65:22">goto <name pos:start="65:18" pos:end="65:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="69:9" pos:end="71:30"><if pos:start="69:9" pos:end="71:30">if <condition pos:start="69:12" pos:end="69:22">(<expr pos:start="69:13" pos:end="69:21"><operator pos:start="69:13" pos:end="69:13">!</operator><name pos:start="69:14" pos:end="69:21">snapshot</name></expr>)</condition><block type="pseudo" pos:start="71:13" pos:end="71:30"><block_content pos:start="71:13" pos:end="71:30">

            <expr_stmt pos:start="71:13" pos:end="71:30"><expr pos:start="71:13" pos:end="71:29"><name pos:start="71:13" pos:end="71:25"><name pos:start="71:13" pos:end="71:14">bs</name><operator pos:start="71:15" pos:end="71:16">-&gt;</operator><name pos:start="71:17" pos:end="71:25">read_only</name></name> <operator pos:start="71:27" pos:end="71:27">=</operator> <literal type="number" pos:start="71:29" pos:end="71:29">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:16"><expr pos:start="75:5" pos:end="75:15"><name pos:start="75:5" pos:end="75:10"><name pos:start="75:5" pos:end="75:6">bs</name><operator pos:start="75:7" pos:end="75:8">-&gt;</operator><name pos:start="75:9" pos:end="75:10">fd</name></name> <operator pos:start="75:12" pos:end="75:12">=</operator> <name pos:start="75:14" pos:end="75:15">fd</name></expr>;</expr_stmt>



    <comment type="block" pos:start="79:5" pos:end="79:34">/* see if it is a cow image */</comment>

    <if_stmt pos:start="81:5" pos:end="90:0"><if pos:start="81:5" pos:end="90:0">if <condition pos:start="81:8" pos:end="81:72">(<expr pos:start="81:9" pos:end="81:71"><call pos:start="81:9" pos:end="81:49"><name pos:start="81:9" pos:end="81:12">read</name><argument_list pos:start="81:13" pos:end="81:49">(<argument pos:start="81:14" pos:end="81:15"><expr pos:start="81:14" pos:end="81:15"><name pos:start="81:14" pos:end="81:15">fd</name></expr></argument>, <argument pos:start="81:18" pos:end="81:28"><expr pos:start="81:18" pos:end="81:28"><operator pos:start="81:18" pos:end="81:18">&amp;</operator><name pos:start="81:19" pos:end="81:28">cow_header</name></expr></argument>, <argument pos:start="81:31" pos:end="81:48"><expr pos:start="81:31" pos:end="81:48"><sizeof pos:start="81:31" pos:end="81:48">sizeof<argument_list pos:start="81:37" pos:end="81:48">(<argument pos:start="81:38" pos:end="81:47"><expr pos:start="81:38" pos:end="81:47"><name pos:start="81:38" pos:end="81:47">cow_header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="81:51" pos:end="81:52">!=</operator> <sizeof pos:start="81:54" pos:end="81:71">sizeof<argument_list pos:start="81:60" pos:end="81:71">(<argument pos:start="81:61" pos:end="81:70"><expr pos:start="81:61" pos:end="81:70"><name pos:start="81:61" pos:end="81:70">cow_header</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="81:74" pos:end="90:0">{<block_content pos:start="83:9" pos:end="85:18">

        <expr_stmt pos:start="83:9" pos:end="83:65"><expr pos:start="83:9" pos:end="83:64"><call pos:start="83:9" pos:end="83:64"><name pos:start="83:9" pos:end="83:15">fprintf</name><argument_list pos:start="83:16" pos:end="83:64">(<argument pos:start="83:17" pos:end="83:22"><expr pos:start="83:17" pos:end="83:22"><name pos:start="83:17" pos:end="83:22">stderr</name></expr></argument>, <argument pos:start="83:25" pos:end="83:53"><expr pos:start="83:25" pos:end="83:53"><literal type="string" pos:start="83:25" pos:end="83:53">"%s: could not read header\n"</literal></expr></argument>, <argument pos:start="83:56" pos:end="83:63"><expr pos:start="83:56" pos:end="83:63"><name pos:start="83:56" pos:end="83:63">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="85:9" pos:end="85:18">goto <name pos:start="85:14" pos:end="85:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

<cpp:ifndef pos:start="89:1" pos:end="89:14">#<cpp:directive pos:start="89:2" pos:end="89:7">ifndef</cpp:directive> <name pos:start="89:9" pos:end="89:14">_WIN32</name></cpp:ifndef>

    <if_stmt pos:start="91:5" pos:end="182:0"><if pos:start="91:5" pos:end="163:5">if <condition pos:start="91:8" pos:end="93:55">(<expr pos:start="91:9" pos:end="93:54"><call pos:start="91:9" pos:end="91:37"><name pos:start="91:9" pos:end="91:19">be32_to_cpu</name><argument_list pos:start="91:20" pos:end="91:37">(<argument pos:start="91:21" pos:end="91:36"><expr pos:start="91:21" pos:end="91:36"><name pos:start="91:21" pos:end="91:36"><name pos:start="91:21" pos:end="91:30">cow_header</name><operator pos:start="91:31" pos:end="91:31">.</operator><name pos:start="91:32" pos:end="91:36">magic</name></name></expr></argument>)</argument_list></call> <operator pos:start="91:39" pos:end="91:40">==</operator> <name pos:start="91:42" pos:end="91:50">COW_MAGIC</name> <operator pos:start="91:52" pos:end="91:53">&amp;&amp;</operator>

        <call pos:start="93:9" pos:end="93:39"><name pos:start="93:9" pos:end="93:19">be32_to_cpu</name><argument_list pos:start="93:20" pos:end="93:39">(<argument pos:start="93:21" pos:end="93:38"><expr pos:start="93:21" pos:end="93:38"><name pos:start="93:21" pos:end="93:38"><name pos:start="93:21" pos:end="93:30">cow_header</name><operator pos:start="93:31" pos:end="93:31">.</operator><name pos:start="93:32" pos:end="93:38">version</name></name></expr></argument>)</argument_list></call> <operator pos:start="93:41" pos:end="93:42">==</operator> <name pos:start="93:44" pos:end="93:54">COW_VERSION</name></expr>)</condition> <block pos:start="93:57" pos:end="163:5">{<block_content pos:start="97:9" pos:end="161:21">

        <comment type="block" pos:start="95:9" pos:end="95:29">/* cow image found */</comment>

        <expr_stmt pos:start="97:9" pos:end="100:0"><expr pos:start="97:9" pos:end="97:30"><name pos:start="97:9" pos:end="97:12">size</name> <operator pos:start="97:14" pos:end="97:14">=</operator> <name pos:start="97:16" pos:end="97:30"><name pos:start="97:16" pos:end="97:25">cow_header</name><operator pos:start="97:26" pos:end="97:26">.</operator><name pos:start="97:27" pos:end="97:30">size</name></name></expr>;</expr_stmt>

<cpp:ifndef pos:start="99:1" pos:end="99:23">#<cpp:directive pos:start="99:2" pos:end="99:7">ifndef</cpp:directive> <name pos:start="99:9" pos:end="99:23">WORDS_BIGENDIAN</name></cpp:ifndef>

        <expr_stmt pos:start="101:9" pos:end="104:0"><expr pos:start="101:9" pos:end="101:28"><name pos:start="101:9" pos:end="101:12">size</name> <operator pos:start="101:14" pos:end="101:14">=</operator> <call pos:start="101:16" pos:end="101:28"><name pos:start="101:16" pos:end="101:22">bswap64</name><argument_list pos:start="101:23" pos:end="101:28">(<argument pos:start="101:24" pos:end="101:27"><expr pos:start="101:24" pos:end="101:27"><name pos:start="101:24" pos:end="101:27">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="103:1" pos:end="103:6">#<cpp:directive pos:start="103:2" pos:end="103:6">endif</cpp:directive></cpp:endif>    

        <expr_stmt pos:start="105:9" pos:end="105:39"><expr pos:start="105:9" pos:end="105:38"><name pos:start="105:9" pos:end="105:25"><name pos:start="105:9" pos:end="105:10">bs</name><operator pos:start="105:11" pos:end="105:12">-&gt;</operator><name pos:start="105:13" pos:end="105:25">total_sectors</name></name> <operator pos:start="105:27" pos:end="105:27">=</operator> <name pos:start="105:29" pos:end="105:32">size</name> <operator pos:start="105:34" pos:end="105:34">/</operator> <literal type="number" pos:start="105:36" pos:end="105:38">512</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="109:9" pos:end="109:24"><expr pos:start="109:9" pos:end="109:23"><name pos:start="109:9" pos:end="109:18"><name pos:start="109:9" pos:end="109:10">bs</name><operator pos:start="109:11" pos:end="109:12">-&gt;</operator><name pos:start="109:13" pos:end="109:18">cow_fd</name></name> <operator pos:start="109:20" pos:end="109:20">=</operator> <name pos:start="109:22" pos:end="109:23">fd</name></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:20"><expr pos:start="111:9" pos:end="111:19"><name pos:start="111:9" pos:end="111:14"><name pos:start="111:9" pos:end="111:10">bs</name><operator pos:start="111:11" pos:end="111:12">-&gt;</operator><name pos:start="111:13" pos:end="111:14">fd</name></name> <operator pos:start="111:16" pos:end="111:16">=</operator> <operator pos:start="111:18" pos:end="111:18">-</operator><literal type="number" pos:start="111:19" pos:end="111:19">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="113:9" pos:end="139:9"><if pos:start="113:9" pos:end="139:9">if <condition pos:start="113:12" pos:end="113:47">(<expr pos:start="113:13" pos:end="113:46"><name pos:start="113:13" pos:end="113:38"><name pos:start="113:13" pos:end="113:22">cow_header</name><operator pos:start="113:23" pos:end="113:23">.</operator><name pos:start="113:24" pos:end="113:35">backing_file</name><index pos:start="113:36" pos:end="113:38">[<expr pos:start="113:37" pos:end="113:37"><literal type="number" pos:start="113:37" pos:end="113:37">0</literal></expr>]</index></name> <operator pos:start="113:40" pos:end="113:41">!=</operator> <literal type="char" pos:start="113:43" pos:end="113:46">'\0'</literal></expr>)</condition> <block pos:start="113:49" pos:end="139:9">{<block_content pos:start="115:13" pos:end="137:24">

            <if_stmt pos:start="115:13" pos:end="121:13"><if pos:start="115:13" pos:end="121:13">if <condition pos:start="115:16" pos:end="115:56">(<expr pos:start="115:17" pos:end="115:55"><call pos:start="115:17" pos:end="115:50"><name pos:start="115:17" pos:end="115:20">stat</name><argument_list pos:start="115:21" pos:end="115:50">(<argument pos:start="115:22" pos:end="115:44"><expr pos:start="115:22" pos:end="115:44"><name pos:start="115:22" pos:end="115:44"><name pos:start="115:22" pos:end="115:31">cow_header</name><operator pos:start="115:32" pos:end="115:32">.</operator><name pos:start="115:33" pos:end="115:44">backing_file</name></name></expr></argument>, <argument pos:start="115:47" pos:end="115:49"><expr pos:start="115:47" pos:end="115:49"><operator pos:start="115:47" pos:end="115:47">&amp;</operator><name pos:start="115:48" pos:end="115:49">st</name></expr></argument>)</argument_list></call> <operator pos:start="115:52" pos:end="115:53">!=</operator> <literal type="number" pos:start="115:55" pos:end="115:55">0</literal></expr>)</condition> <block pos:start="115:58" pos:end="121:13">{<block_content pos:start="117:17" pos:end="119:26">

                <expr_stmt pos:start="117:17" pos:end="117:116"><expr pos:start="117:17" pos:end="117:115"><call pos:start="117:17" pos:end="117:115"><name pos:start="117:17" pos:end="117:23">fprintf</name><argument_list pos:start="117:24" pos:end="117:115">(<argument pos:start="117:25" pos:end="117:30"><expr pos:start="117:25" pos:end="117:30"><name pos:start="117:25" pos:end="117:30">stderr</name></expr></argument>, <argument pos:start="117:33" pos:end="117:79"><expr pos:start="117:33" pos:end="117:79"><literal type="string" pos:start="117:33" pos:end="117:79">"%s: could not find original disk image '%s'\n"</literal></expr></argument>, <argument pos:start="117:82" pos:end="117:89"><expr pos:start="117:82" pos:end="117:89"><name pos:start="117:82" pos:end="117:89">filename</name></expr></argument>, <argument pos:start="117:92" pos:end="117:114"><expr pos:start="117:92" pos:end="117:114"><name pos:start="117:92" pos:end="117:114"><name pos:start="117:92" pos:end="117:101">cow_header</name><operator pos:start="117:102" pos:end="117:102">.</operator><name pos:start="117:103" pos:end="117:114">backing_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="119:17" pos:end="119:26">goto <name pos:start="119:22" pos:end="119:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="123:13" pos:end="129:13"><if pos:start="123:13" pos:end="129:13">if <condition pos:start="123:16" pos:end="123:61">(<expr pos:start="123:17" pos:end="123:60"><name pos:start="123:17" pos:end="123:27"><name pos:start="123:17" pos:end="123:18">st</name><operator pos:start="123:19" pos:end="123:19">.</operator><name pos:start="123:20" pos:end="123:27">st_mtime</name></name> <operator pos:start="123:29" pos:end="123:30">!=</operator> <call pos:start="123:32" pos:end="123:60"><name pos:start="123:32" pos:end="123:42">be32_to_cpu</name><argument_list pos:start="123:43" pos:end="123:60">(<argument pos:start="123:44" pos:end="123:59"><expr pos:start="123:44" pos:end="123:59"><name pos:start="123:44" pos:end="123:59"><name pos:start="123:44" pos:end="123:53">cow_header</name><operator pos:start="123:54" pos:end="123:54">.</operator><name pos:start="123:55" pos:end="123:59">mtime</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="123:63" pos:end="129:13">{<block_content pos:start="125:17" pos:end="127:26">

                <expr_stmt pos:start="125:17" pos:end="125:136"><expr pos:start="125:17" pos:end="125:135"><call pos:start="125:17" pos:end="125:135"><name pos:start="125:17" pos:end="125:23">fprintf</name><argument_list pos:start="125:24" pos:end="125:135">(<argument pos:start="125:25" pos:end="125:30"><expr pos:start="125:25" pos:end="125:30"><name pos:start="125:25" pos:end="125:30">stderr</name></expr></argument>, <argument pos:start="125:33" pos:end="125:99"><expr pos:start="125:33" pos:end="125:99"><literal type="string" pos:start="125:33" pos:end="125:99">"%s: original raw disk image '%s' does not match saved timestamp\n"</literal></expr></argument>, <argument pos:start="125:102" pos:end="125:109"><expr pos:start="125:102" pos:end="125:109"><name pos:start="125:102" pos:end="125:109">filename</name></expr></argument>, <argument pos:start="125:112" pos:end="125:134"><expr pos:start="125:112" pos:end="125:134"><name pos:start="125:112" pos:end="125:134"><name pos:start="125:112" pos:end="125:121">cow_header</name><operator pos:start="125:122" pos:end="125:122">.</operator><name pos:start="125:123" pos:end="125:134">backing_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="127:17" pos:end="127:26">goto <name pos:start="127:22" pos:end="127:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:71"><expr pos:start="131:13" pos:end="131:70"><name pos:start="131:13" pos:end="131:14">fd</name> <operator pos:start="131:16" pos:end="131:16">=</operator> <call pos:start="131:18" pos:end="131:70"><name pos:start="131:18" pos:end="131:21">open</name><argument_list pos:start="131:22" pos:end="131:70">(<argument pos:start="131:23" pos:end="131:45"><expr pos:start="131:23" pos:end="131:45"><name pos:start="131:23" pos:end="131:45"><name pos:start="131:23" pos:end="131:32">cow_header</name><operator pos:start="131:33" pos:end="131:33">.</operator><name pos:start="131:34" pos:end="131:45">backing_file</name></name></expr></argument>, <argument pos:start="131:48" pos:end="131:69"><expr pos:start="131:48" pos:end="131:69"><name pos:start="131:48" pos:end="131:55">O_RDONLY</name> <operator pos:start="131:57" pos:end="131:57">|</operator> <name pos:start="131:59" pos:end="131:69">O_LARGEFILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="133:13" pos:end="135:26"><if pos:start="133:13" pos:end="135:26">if <condition pos:start="133:16" pos:end="133:23">(<expr pos:start="133:17" pos:end="133:22"><name pos:start="133:17" pos:end="133:18">fd</name> <operator pos:start="133:20" pos:end="133:20">&lt;</operator> <literal type="number" pos:start="133:22" pos:end="133:22">0</literal></expr>)</condition><block type="pseudo" pos:start="135:17" pos:end="135:26"><block_content pos:start="135:17" pos:end="135:26">

                <goto pos:start="135:17" pos:end="135:26">goto <name pos:start="135:22" pos:end="135:25">fail</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:24"><expr pos:start="137:13" pos:end="137:23"><name pos:start="137:13" pos:end="137:18"><name pos:start="137:13" pos:end="137:14">bs</name><operator pos:start="137:15" pos:end="137:16">-&gt;</operator><name pos:start="137:17" pos:end="137:18">fd</name></name> <operator pos:start="137:20" pos:end="137:20">=</operator> <name pos:start="137:22" pos:end="137:23">fd</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="141:9" pos:end="141:29">/* mmap the bitmap */</comment>

        <expr_stmt pos:start="143:9" pos:end="143:82"><expr pos:start="143:9" pos:end="143:81"><name pos:start="143:9" pos:end="143:27"><name pos:start="143:9" pos:end="143:10">bs</name><operator pos:start="143:11" pos:end="143:12">-&gt;</operator><name pos:start="143:13" pos:end="143:27">cow_bitmap_size</name></name> <operator pos:start="143:29" pos:end="143:29">=</operator> <operator pos:start="143:31" pos:end="143:31">(</operator><operator pos:start="143:32" pos:end="143:32">(</operator><name pos:start="143:33" pos:end="143:49"><name pos:start="143:33" pos:end="143:34">bs</name><operator pos:start="143:35" pos:end="143:36">-&gt;</operator><name pos:start="143:37" pos:end="143:49">total_sectors</name></name> <operator pos:start="143:51" pos:end="143:51">+</operator> <literal type="number" pos:start="143:53" pos:end="143:53">7</literal><operator pos:start="143:54" pos:end="143:54">)</operator> <operator pos:start="143:56" pos:end="143:57">&gt;&gt;</operator> <literal type="number" pos:start="143:59" pos:end="143:59">3</literal><operator pos:start="143:60" pos:end="143:60">)</operator> <operator pos:start="143:62" pos:end="143:62">+</operator> <sizeof pos:start="143:64" pos:end="143:81">sizeof<argument_list pos:start="143:70" pos:end="143:81">(<argument pos:start="143:71" pos:end="143:80"><expr pos:start="143:71" pos:end="143:80"><name pos:start="143:71" pos:end="143:80">cow_header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="151:62"><expr pos:start="145:9" pos:end="151:61"><name pos:start="145:9" pos:end="145:27"><name pos:start="145:9" pos:end="145:10">bs</name><operator pos:start="145:11" pos:end="145:12">-&gt;</operator><name pos:start="145:13" pos:end="145:27">cow_bitmap_addr</name></name> <operator pos:start="145:29" pos:end="145:29">=</operator> <call pos:start="145:31" pos:end="151:61"><name pos:start="145:31" pos:end="145:34">mmap</name><argument_list pos:start="145:35" pos:end="151:61">(<argument pos:start="145:36" pos:end="145:69"><expr pos:start="145:36" pos:end="145:69"><call pos:start="145:36" pos:end="145:69"><name pos:start="145:36" pos:end="145:48">get_mmap_addr</name><argument_list pos:start="145:49" pos:end="145:69">(<argument pos:start="145:50" pos:end="145:68"><expr pos:start="145:50" pos:end="145:68"><name pos:start="145:50" pos:end="145:68"><name pos:start="145:50" pos:end="145:51">bs</name><operator pos:start="145:52" pos:end="145:53">-&gt;</operator><name pos:start="145:54" pos:end="145:68">cow_bitmap_size</name></name></expr></argument>)</argument_list></call></expr></argument>, 

                                   <argument pos:start="147:36" pos:end="147:54"><expr pos:start="147:36" pos:end="147:54"><name pos:start="147:36" pos:end="147:54"><name pos:start="147:36" pos:end="147:37">bs</name><operator pos:start="147:38" pos:end="147:39">-&gt;</operator><name pos:start="147:40" pos:end="147:54">cow_bitmap_size</name></name></expr></argument>, 

                                   <argument pos:start="149:36" pos:end="149:57"><expr pos:start="149:36" pos:end="149:57"><name pos:start="149:36" pos:end="149:44">PROT_READ</name> <operator pos:start="149:46" pos:end="149:46">|</operator> <name pos:start="149:48" pos:end="149:57">PROT_WRITE</name></expr></argument>,

                                   <argument pos:start="151:36" pos:end="151:45"><expr pos:start="151:36" pos:end="151:45"><name pos:start="151:36" pos:end="151:45">MAP_SHARED</name></expr></argument>, <argument pos:start="151:48" pos:end="151:57"><expr pos:start="151:48" pos:end="151:57"><name pos:start="151:48" pos:end="151:57"><name pos:start="151:48" pos:end="151:49">bs</name><operator pos:start="151:50" pos:end="151:51">-&gt;</operator><name pos:start="151:52" pos:end="151:57">cow_fd</name></name></expr></argument>, <argument pos:start="151:60" pos:end="151:60"><expr pos:start="151:60" pos:end="151:60"><literal type="number" pos:start="151:60" pos:end="151:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="153:9" pos:end="155:22"><if pos:start="153:9" pos:end="155:22">if <condition pos:start="153:12" pos:end="153:46">(<expr pos:start="153:13" pos:end="153:45"><name pos:start="153:13" pos:end="153:31"><name pos:start="153:13" pos:end="153:14">bs</name><operator pos:start="153:15" pos:end="153:16">-&gt;</operator><name pos:start="153:17" pos:end="153:31">cow_bitmap_addr</name></name> <operator pos:start="153:33" pos:end="153:34">==</operator> <name pos:start="153:36" pos:end="153:45">MAP_FAILED</name></expr>)</condition><block type="pseudo" pos:start="155:13" pos:end="155:22"><block_content pos:start="155:13" pos:end="155:22">

            <goto pos:start="155:13" pos:end="155:22">goto <name pos:start="155:18" pos:end="155:21">fail</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:66"><expr pos:start="157:9" pos:end="157:65"><name pos:start="157:9" pos:end="157:22"><name pos:start="157:9" pos:end="157:10">bs</name><operator pos:start="157:11" pos:end="157:12">-&gt;</operator><name pos:start="157:13" pos:end="157:22">cow_bitmap</name></name> <operator pos:start="157:24" pos:end="157:24">=</operator> <name pos:start="157:26" pos:end="157:44"><name pos:start="157:26" pos:end="157:27">bs</name><operator pos:start="157:28" pos:end="157:29">-&gt;</operator><name pos:start="157:30" pos:end="157:44">cow_bitmap_addr</name></name> <operator pos:start="157:46" pos:end="157:46">+</operator> <sizeof pos:start="157:48" pos:end="157:65">sizeof<argument_list pos:start="157:54" pos:end="157:65">(<argument pos:start="157:55" pos:end="157:64"><expr pos:start="157:55" pos:end="157:64"><name pos:start="157:55" pos:end="157:64">cow_header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:68"><expr pos:start="159:9" pos:end="159:67"><name pos:start="159:9" pos:end="159:30"><name pos:start="159:9" pos:end="159:10">bs</name><operator pos:start="159:11" pos:end="159:12">-&gt;</operator><name pos:start="159:13" pos:end="159:30">cow_sectors_offset</name></name> <operator pos:start="159:32" pos:end="159:32">=</operator> <operator pos:start="159:34" pos:end="159:34">(</operator><name pos:start="159:35" pos:end="159:53"><name pos:start="159:35" pos:end="159:36">bs</name><operator pos:start="159:37" pos:end="159:38">-&gt;</operator><name pos:start="159:39" pos:end="159:53">cow_bitmap_size</name></name> <operator pos:start="159:55" pos:end="159:55">+</operator> <literal type="number" pos:start="159:57" pos:end="159:59">511</literal><operator pos:start="159:60" pos:end="159:60">)</operator> <operator pos:start="159:62" pos:end="159:62">&amp;</operator> <operator pos:start="159:64" pos:end="159:64">~</operator><literal type="number" pos:start="159:65" pos:end="159:67">511</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:21"><expr pos:start="161:9" pos:end="161:20"><name pos:start="161:9" pos:end="161:16">snapshot</name> <operator pos:start="161:18" pos:end="161:18">=</operator> <literal type="number" pos:start="161:20" pos:end="161:20">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="163:7" pos:end="182:0">else 

<cpp:endif pos:start="165:1" pos:end="165:6">#<cpp:directive pos:start="165:2" pos:end="165:6">endif</cpp:directive></cpp:endif>

    <block pos:start="167:5" pos:end="182:0">{<block_content pos:start="171:9" pos:end="175:20">

        <comment type="block" pos:start="169:9" pos:end="169:32">/* standard raw image */</comment>

        <expr_stmt pos:start="171:9" pos:end="171:40"><expr pos:start="171:9" pos:end="171:39"><name pos:start="171:9" pos:end="171:12">size</name> <operator pos:start="171:14" pos:end="171:14">=</operator> <call pos:start="171:16" pos:end="171:39"><name pos:start="171:16" pos:end="171:22">lseek64</name><argument_list pos:start="171:23" pos:end="171:39">(<argument pos:start="171:24" pos:end="171:25"><expr pos:start="171:24" pos:end="171:25"><name pos:start="171:24" pos:end="171:25">fd</name></expr></argument>, <argument pos:start="171:28" pos:end="171:28"><expr pos:start="171:28" pos:end="171:28"><literal type="number" pos:start="171:28" pos:end="171:28">0</literal></expr></argument>, <argument pos:start="171:31" pos:end="171:38"><expr pos:start="171:31" pos:end="171:38"><name pos:start="171:31" pos:end="171:38">SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:39"><expr pos:start="173:9" pos:end="173:38"><name pos:start="173:9" pos:end="173:25"><name pos:start="173:9" pos:end="173:10">bs</name><operator pos:start="173:11" pos:end="173:12">-&gt;</operator><name pos:start="173:13" pos:end="173:25">total_sectors</name></name> <operator pos:start="173:27" pos:end="173:27">=</operator> <name pos:start="173:29" pos:end="173:32">size</name> <operator pos:start="173:34" pos:end="173:34">/</operator> <literal type="number" pos:start="173:36" pos:end="173:38">512</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:20"><expr pos:start="175:9" pos:end="175:19"><name pos:start="175:9" pos:end="175:14"><name pos:start="175:9" pos:end="175:10">bs</name><operator pos:start="175:11" pos:end="175:12">-&gt;</operator><name pos:start="175:13" pos:end="175:14">fd</name></name> <operator pos:start="175:16" pos:end="175:16">=</operator> <name pos:start="175:18" pos:end="175:19">fd</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



<cpp:ifndef pos:start="181:1" pos:end="181:14">#<cpp:directive pos:start="181:2" pos:end="181:7">ifndef</cpp:directive> <name pos:start="181:9" pos:end="181:14">_WIN32</name></cpp:ifndef>

    <if_stmt pos:start="183:5" pos:end="222:0"><if pos:start="183:5" pos:end="222:0">if <condition pos:start="183:8" pos:end="183:17">(<expr pos:start="183:9" pos:end="183:16"><name pos:start="183:9" pos:end="183:16">snapshot</name></expr>)</condition> <block pos:start="183:19" pos:end="222:0">{<block_content pos:start="187:9" pos:end="217:35">

        <comment type="block" pos:start="185:9" pos:end="185:41">/* create a temporary COW file */</comment>

        <expr_stmt pos:start="187:9" pos:end="187:37"><expr pos:start="187:9" pos:end="187:36"><name pos:start="187:9" pos:end="187:14">cow_fd</name> <operator pos:start="187:16" pos:end="187:16">=</operator> <call pos:start="187:18" pos:end="187:36"><name pos:start="187:18" pos:end="187:26">mkstemp64</name><argument_list pos:start="187:27" pos:end="187:36">(<argument pos:start="187:28" pos:end="187:35"><expr pos:start="187:28" pos:end="187:35"><name pos:start="187:28" pos:end="187:35">template</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="189:9" pos:end="191:22"><if pos:start="189:9" pos:end="191:22">if <condition pos:start="189:12" pos:end="189:23">(<expr pos:start="189:13" pos:end="189:22"><name pos:start="189:13" pos:end="189:18">cow_fd</name> <operator pos:start="189:20" pos:end="189:20">&lt;</operator> <literal type="number" pos:start="189:22" pos:end="189:22">0</literal></expr>)</condition><block type="pseudo" pos:start="191:13" pos:end="191:22"><block_content pos:start="191:13" pos:end="191:22">

            <goto pos:start="191:13" pos:end="191:22">goto <name pos:start="191:18" pos:end="191:21">fail</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:28"><expr pos:start="193:9" pos:end="193:27"><name pos:start="193:9" pos:end="193:18"><name pos:start="193:9" pos:end="193:10">bs</name><operator pos:start="193:11" pos:end="193:12">-&gt;</operator><name pos:start="193:13" pos:end="193:18">cow_fd</name></name> <operator pos:start="193:20" pos:end="193:20">=</operator> <name pos:start="193:22" pos:end="193:27">cow_fd</name></expr>;</expr_stmt>

	<expr_stmt pos:start="195:9" pos:end="195:25"><expr pos:start="195:9" pos:end="195:24"><call pos:start="195:9" pos:end="195:24"><name pos:start="195:9" pos:end="195:14">unlink</name><argument_list pos:start="195:15" pos:end="195:24">(<argument pos:start="195:16" pos:end="195:23"><expr pos:start="195:16" pos:end="195:23"><name pos:start="195:16" pos:end="195:23">template</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        

        <comment type="block" pos:start="199:9" pos:end="199:42">/* just need to allocate bitmap */</comment>

        <expr_stmt pos:start="201:9" pos:end="201:59"><expr pos:start="201:9" pos:end="201:58"><name pos:start="201:9" pos:end="201:27"><name pos:start="201:9" pos:end="201:10">bs</name><operator pos:start="201:11" pos:end="201:12">-&gt;</operator><name pos:start="201:13" pos:end="201:27">cow_bitmap_size</name></name> <operator pos:start="201:29" pos:end="201:29">=</operator> <operator pos:start="201:31" pos:end="201:31">(</operator><name pos:start="201:32" pos:end="201:48"><name pos:start="201:32" pos:end="201:33">bs</name><operator pos:start="201:34" pos:end="201:35">-&gt;</operator><name pos:start="201:36" pos:end="201:48">total_sectors</name></name> <operator pos:start="201:50" pos:end="201:50">+</operator> <literal type="number" pos:start="201:52" pos:end="201:52">7</literal><operator pos:start="201:53" pos:end="201:53">)</operator> <operator pos:start="201:55" pos:end="201:56">&gt;&gt;</operator> <literal type="number" pos:start="201:58" pos:end="201:58">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="203:9" pos:end="209:71"><expr pos:start="203:9" pos:end="209:70"><name pos:start="203:9" pos:end="203:27"><name pos:start="203:9" pos:end="203:10">bs</name><operator pos:start="203:11" pos:end="203:12">-&gt;</operator><name pos:start="203:13" pos:end="203:27">cow_bitmap_addr</name></name> <operator pos:start="203:29" pos:end="203:29">=</operator> <call pos:start="203:31" pos:end="209:70"><name pos:start="203:31" pos:end="203:34">mmap</name><argument_list pos:start="203:35" pos:end="209:70">(<argument pos:start="203:36" pos:end="203:69"><expr pos:start="203:36" pos:end="203:69"><call pos:start="203:36" pos:end="203:69"><name pos:start="203:36" pos:end="203:48">get_mmap_addr</name><argument_list pos:start="203:49" pos:end="203:69">(<argument pos:start="203:50" pos:end="203:68"><expr pos:start="203:50" pos:end="203:68"><name pos:start="203:50" pos:end="203:68"><name pos:start="203:50" pos:end="203:51">bs</name><operator pos:start="203:52" pos:end="203:53">-&gt;</operator><name pos:start="203:54" pos:end="203:68">cow_bitmap_size</name></name></expr></argument>)</argument_list></call></expr></argument>, 

                                   <argument pos:start="205:36" pos:end="205:54"><expr pos:start="205:36" pos:end="205:54"><name pos:start="205:36" pos:end="205:54"><name pos:start="205:36" pos:end="205:37">bs</name><operator pos:start="205:38" pos:end="205:39">-&gt;</operator><name pos:start="205:40" pos:end="205:54">cow_bitmap_size</name></name></expr></argument>, 

                                   <argument pos:start="207:36" pos:end="207:57"><expr pos:start="207:36" pos:end="207:57"><name pos:start="207:36" pos:end="207:44">PROT_READ</name> <operator pos:start="207:46" pos:end="207:46">|</operator> <name pos:start="207:48" pos:end="207:57">PROT_WRITE</name></expr></argument>,

                                   <argument pos:start="209:36" pos:end="209:62"><expr pos:start="209:36" pos:end="209:62"><name pos:start="209:36" pos:end="209:46">MAP_PRIVATE</name> <operator pos:start="209:48" pos:end="209:48">|</operator> <name pos:start="209:50" pos:end="209:62">MAP_ANONYMOUS</name></expr></argument>, <argument pos:start="209:65" pos:end="209:66"><expr pos:start="209:65" pos:end="209:66"><operator pos:start="209:65" pos:end="209:65">-</operator><literal type="number" pos:start="209:66" pos:end="209:66">1</literal></expr></argument>, <argument pos:start="209:69" pos:end="209:69"><expr pos:start="209:69" pos:end="209:69"><literal type="number" pos:start="209:69" pos:end="209:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="211:9" pos:end="213:22"><if pos:start="211:9" pos:end="213:22">if <condition pos:start="211:12" pos:end="211:46">(<expr pos:start="211:13" pos:end="211:45"><name pos:start="211:13" pos:end="211:31"><name pos:start="211:13" pos:end="211:14">bs</name><operator pos:start="211:15" pos:end="211:16">-&gt;</operator><name pos:start="211:17" pos:end="211:31">cow_bitmap_addr</name></name> <operator pos:start="211:33" pos:end="211:34">==</operator> <name pos:start="211:36" pos:end="211:45">MAP_FAILED</name></expr>)</condition><block type="pseudo" pos:start="213:13" pos:end="213:22"><block_content pos:start="213:13" pos:end="213:22">

            <goto pos:start="213:13" pos:end="213:22">goto <name pos:start="213:18" pos:end="213:21">fail</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="215:9" pos:end="215:45"><expr pos:start="215:9" pos:end="215:44"><name pos:start="215:9" pos:end="215:22"><name pos:start="215:9" pos:end="215:10">bs</name><operator pos:start="215:11" pos:end="215:12">-&gt;</operator><name pos:start="215:13" pos:end="215:22">cow_bitmap</name></name> <operator pos:start="215:24" pos:end="215:24">=</operator> <name pos:start="215:26" pos:end="215:44"><name pos:start="215:26" pos:end="215:27">bs</name><operator pos:start="215:28" pos:end="215:29">-&gt;</operator><name pos:start="215:30" pos:end="215:44">cow_bitmap_addr</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="217:9" pos:end="217:35"><expr pos:start="217:9" pos:end="217:34"><name pos:start="217:9" pos:end="217:30"><name pos:start="217:9" pos:end="217:10">bs</name><operator pos:start="217:11" pos:end="217:12">-&gt;</operator><name pos:start="217:13" pos:end="217:30">cow_sectors_offset</name></name> <operator pos:start="217:32" pos:end="217:32">=</operator> <literal type="number" pos:start="217:34" pos:end="217:34">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="221:1" pos:end="221:6">#<cpp:directive pos:start="221:2" pos:end="221:6">endif</cpp:directive></cpp:endif>

    

    <expr_stmt pos:start="225:5" pos:end="225:21"><expr pos:start="225:5" pos:end="225:20"><name pos:start="225:5" pos:end="225:16"><name pos:start="225:5" pos:end="225:6">bs</name><operator pos:start="225:7" pos:end="225:8">-&gt;</operator><name pos:start="225:9" pos:end="225:16">inserted</name></name> <operator pos:start="225:18" pos:end="225:18">=</operator> <literal type="number" pos:start="225:20" pos:end="225:20">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="229:5" pos:end="229:34">/* call the change callback */</comment>

    <if_stmt pos:start="231:5" pos:end="233:41"><if pos:start="231:5" pos:end="233:41">if <condition pos:start="231:8" pos:end="231:22">(<expr pos:start="231:9" pos:end="231:21"><name pos:start="231:9" pos:end="231:21"><name pos:start="231:9" pos:end="231:10">bs</name><operator pos:start="231:11" pos:end="231:12">-&gt;</operator><name pos:start="231:13" pos:end="231:21">change_cb</name></name></expr>)</condition><block type="pseudo" pos:start="233:9" pos:end="233:41"><block_content pos:start="233:9" pos:end="233:41">

        <expr_stmt pos:start="233:9" pos:end="233:41"><expr pos:start="233:9" pos:end="233:40"><call pos:start="233:9" pos:end="233:40"><name pos:start="233:9" pos:end="233:21"><name pos:start="233:9" pos:end="233:10">bs</name><operator pos:start="233:11" pos:end="233:12">-&gt;</operator><name pos:start="233:13" pos:end="233:21">change_cb</name></name><argument_list pos:start="233:22" pos:end="233:40">(<argument pos:start="233:23" pos:end="233:39"><expr pos:start="233:23" pos:end="233:39"><name pos:start="233:23" pos:end="233:39"><name pos:start="233:23" pos:end="233:24">bs</name><operator pos:start="233:25" pos:end="233:26">-&gt;</operator><name pos:start="233:27" pos:end="233:39">change_opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="237:5" pos:end="237:13">return <expr pos:start="237:12" pos:end="237:12"><literal type="number" pos:start="237:12" pos:end="237:12">0</literal></expr>;</return>

 <label pos:start="239:2" pos:end="239:6"><name pos:start="239:2" pos:end="239:5">fail</name>:</label>

    <expr_stmt pos:start="241:5" pos:end="241:19"><expr pos:start="241:5" pos:end="241:18"><call pos:start="241:5" pos:end="241:18"><name pos:start="241:5" pos:end="241:14">bdrv_close</name><argument_list pos:start="241:15" pos:end="241:18">(<argument pos:start="241:16" pos:end="241:17"><expr pos:start="241:16" pos:end="241:17"><name pos:start="241:16" pos:end="241:17">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="243:5" pos:end="243:14">return <expr pos:start="243:12" pos:end="243:13"><operator pos:start="243:12" pos:end="243:12">-</operator><literal type="number" pos:start="243:13" pos:end="243:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
