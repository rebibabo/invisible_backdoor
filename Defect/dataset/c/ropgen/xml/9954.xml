<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9954.c" pos:tabs="8"><function pos:start="1:1" pos:end="49:1"><type pos:start="1:1" pos:end="1:19"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">unsigned</name> <name pos:start="1:17" pos:end="1:19">int</name></type> <name pos:start="1:21" pos:end="1:31">dec_move_pm</name><parameter_list pos:start="1:32" pos:end="1:49">(<parameter pos:start="1:33" pos:end="1:48"><decl pos:start="1:33" pos:end="1:48"><type pos:start="1:33" pos:end="1:46"><name pos:start="1:33" pos:end="1:44">DisasContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:48">dc</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="49:1">{<block_content pos:start="5:9" pos:end="47:17">

	<decl_stmt pos:start="5:9" pos:end="5:16"><decl pos:start="5:9" pos:end="5:15"><type pos:start="5:9" pos:end="5:12"><name pos:start="5:9" pos:end="5:12">TCGv</name></type> <name pos:start="5:14" pos:end="5:15">t0</name></decl>;</decl_stmt>

	<decl_stmt pos:start="7:9" pos:end="7:20"><decl pos:start="7:9" pos:end="7:19"><type pos:start="7:9" pos:end="7:11"><name pos:start="7:9" pos:end="7:11">int</name></type> <name pos:start="7:13" pos:end="7:19">memsize</name></decl>;</decl_stmt>



	<expr_stmt pos:start="11:9" pos:end="11:38"><expr pos:start="11:9" pos:end="11:37"><name pos:start="11:9" pos:end="11:15">memsize</name> <operator pos:start="11:17" pos:end="11:17">=</operator> <name pos:start="11:19" pos:end="11:37"><name pos:start="11:19" pos:end="11:28">preg_sizes</name><index pos:start="11:29" pos:end="11:37">[<expr pos:start="11:30" pos:end="11:36"><name pos:start="11:30" pos:end="11:36"><name pos:start="11:30" pos:end="11:31">dc</name><operator pos:start="11:32" pos:end="11:33">-&gt;</operator><name pos:start="11:34" pos:end="11:36">op2</name></name></expr>]</index></name></expr>;</expr_stmt>



	<expr_stmt pos:start="15:9" pos:end="19:66"><expr pos:start="15:9" pos:end="19:65"><call pos:start="15:9" pos:end="19:65"><name pos:start="15:9" pos:end="15:11">DIS</name><argument_list pos:start="15:12" pos:end="19:65">(<argument pos:start="15:13" pos:end="19:64"><expr pos:start="15:13" pos:end="19:64"><call pos:start="15:13" pos:end="19:64"><name pos:start="15:13" pos:end="15:19">fprintf</name> <argument_list pos:start="15:21" pos:end="19:64">(<argument pos:start="15:22" pos:end="15:28"><expr pos:start="15:22" pos:end="15:28"><name pos:start="15:22" pos:end="15:28">logfile</name></expr></argument>, <argument pos:start="15:31" pos:end="15:55"><expr pos:start="15:31" pos:end="15:55"><literal type="string" pos:start="15:31" pos:end="15:55">"move.%c $p%u, [$r%u%s\n"</literal></expr></argument>,

		     <argument pos:start="17:22" pos:end="17:42"><expr pos:start="17:22" pos:end="17:42"><call pos:start="17:22" pos:end="17:42"><name pos:start="17:22" pos:end="17:33">memsize_char</name><argument_list pos:start="17:34" pos:end="17:42">(<argument pos:start="17:35" pos:end="17:41"><expr pos:start="17:35" pos:end="17:41"><name pos:start="17:35" pos:end="17:41">memsize</name></expr></argument>)</argument_list></call></expr></argument>, 

		     <argument pos:start="19:22" pos:end="19:28"><expr pos:start="19:22" pos:end="19:28"><name pos:start="19:22" pos:end="19:28"><name pos:start="19:22" pos:end="19:23">dc</name><operator pos:start="19:24" pos:end="19:25">-&gt;</operator><name pos:start="19:26" pos:end="19:28">op2</name></name></expr></argument>, <argument pos:start="19:31" pos:end="19:37"><expr pos:start="19:31" pos:end="19:37"><name pos:start="19:31" pos:end="19:37"><name pos:start="19:31" pos:end="19:32">dc</name><operator pos:start="19:33" pos:end="19:34">-&gt;</operator><name pos:start="19:35" pos:end="19:37">op1</name></name></expr></argument>, <argument pos:start="19:40" pos:end="19:63"><expr pos:start="19:40" pos:end="19:63"><ternary pos:start="19:40" pos:end="19:63"><condition pos:start="19:40" pos:end="19:52"><expr pos:start="19:40" pos:end="19:50"><name pos:start="19:40" pos:end="19:50"><name pos:start="19:40" pos:end="19:41">dc</name><operator pos:start="19:42" pos:end="19:43">-&gt;</operator><name pos:start="19:44" pos:end="19:50">postinc</name></name></expr> ?</condition><then pos:start="19:54" pos:end="19:57"> <expr pos:start="19:54" pos:end="19:57"><literal type="string" pos:start="19:54" pos:end="19:57">"+]"</literal></expr> </then><else pos:start="19:59" pos:end="19:63">: <expr pos:start="19:61" pos:end="19:63"><literal type="string" pos:start="19:61" pos:end="19:63">"]"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<comment type="block" pos:start="23:9" pos:end="23:57">/* prepare store. Address in T0, value in T1.  */</comment>

	<if_stmt pos:start="25:9" pos:end="27:40"><if pos:start="25:9" pos:end="27:40">if <condition pos:start="25:12" pos:end="25:30">(<expr pos:start="25:13" pos:end="25:29"><name pos:start="25:13" pos:end="25:19"><name pos:start="25:13" pos:end="25:14">dc</name><operator pos:start="25:15" pos:end="25:16">-&gt;</operator><name pos:start="25:17" pos:end="25:19">op2</name></name> <operator pos:start="25:21" pos:end="25:22">==</operator> <name pos:start="25:24" pos:end="25:29">PR_CCS</name></expr>)</condition><block type="pseudo" pos:start="27:17" pos:end="27:40"><block_content pos:start="27:17" pos:end="27:40">

		<expr_stmt pos:start="27:17" pos:end="27:40"><expr pos:start="27:17" pos:end="27:39"><call pos:start="27:17" pos:end="27:39"><name pos:start="27:17" pos:end="27:35">cris_evaluate_flags</name><argument_list pos:start="27:36" pos:end="27:39">(<argument pos:start="27:37" pos:end="27:38"><expr pos:start="27:37" pos:end="27:38"><name pos:start="27:37" pos:end="27:38">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt pos:start="29:9" pos:end="29:39"><expr pos:start="29:9" pos:end="29:38"><name pos:start="29:9" pos:end="29:10">t0</name> <operator pos:start="29:12" pos:end="29:12">=</operator> <call pos:start="29:14" pos:end="29:38"><name pos:start="29:14" pos:end="29:25">tcg_temp_new</name><argument_list pos:start="29:26" pos:end="29:38">(<argument pos:start="29:27" pos:end="29:37"><expr pos:start="29:27" pos:end="29:37"><name pos:start="29:27" pos:end="29:37">TCG_TYPE_TL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="31:9" pos:end="31:39"><expr pos:start="31:9" pos:end="31:38"><call pos:start="31:9" pos:end="31:38"><name pos:start="31:9" pos:end="31:25">t_gen_mov_TN_preg</name><argument_list pos:start="31:26" pos:end="31:38">(<argument pos:start="31:27" pos:end="31:28"><expr pos:start="31:27" pos:end="31:28"><name pos:start="31:27" pos:end="31:28">t0</name></expr></argument>, <argument pos:start="31:31" pos:end="31:37"><expr pos:start="31:31" pos:end="31:37"><name pos:start="31:31" pos:end="31:37"><name pos:start="31:31" pos:end="31:32">dc</name><operator pos:start="31:33" pos:end="31:34">-&gt;</operator><name pos:start="31:35" pos:end="31:37">op2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="33:9" pos:end="33:32"><expr pos:start="33:9" pos:end="33:31"><call pos:start="33:9" pos:end="33:31"><name pos:start="33:9" pos:end="33:27">cris_flush_cc_state</name><argument_list pos:start="33:28" pos:end="33:31">(<argument pos:start="33:29" pos:end="33:30"><expr pos:start="33:29" pos:end="33:30"><name pos:start="33:29" pos:end="33:30">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="35:9" pos:end="35:51"><expr pos:start="35:9" pos:end="35:50"><call pos:start="35:9" pos:end="35:50"><name pos:start="35:9" pos:end="35:17">gen_store</name><argument_list pos:start="35:18" pos:end="35:50">(<argument pos:start="35:19" pos:end="35:20"><expr pos:start="35:19" pos:end="35:20"><name pos:start="35:19" pos:end="35:20">dc</name></expr></argument>, <argument pos:start="35:23" pos:end="35:36"><expr pos:start="35:23" pos:end="35:36"><name pos:start="35:23" pos:end="35:36"><name pos:start="35:23" pos:end="35:27">cpu_R</name><index pos:start="35:28" pos:end="35:36">[<expr pos:start="35:29" pos:end="35:35"><name pos:start="35:29" pos:end="35:35"><name pos:start="35:29" pos:end="35:30">dc</name><operator pos:start="35:31" pos:end="35:32">-&gt;</operator><name pos:start="35:33" pos:end="35:35">op1</name></name></expr>]</index></name></expr></argument>, <argument pos:start="35:39" pos:end="35:40"><expr pos:start="35:39" pos:end="35:40"><name pos:start="35:39" pos:end="35:40">t0</name></expr></argument>, <argument pos:start="35:43" pos:end="35:49"><expr pos:start="35:43" pos:end="35:49"><name pos:start="35:43" pos:end="35:49">memsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="37:9" pos:end="37:26"><expr pos:start="37:9" pos:end="37:25"><call pos:start="37:9" pos:end="37:25"><name pos:start="37:9" pos:end="37:21">tcg_temp_free</name><argument_list pos:start="37:22" pos:end="37:25">(<argument pos:start="37:23" pos:end="37:24"><expr pos:start="37:23" pos:end="37:24"><name pos:start="37:23" pos:end="37:24">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<expr_stmt pos:start="41:9" pos:end="41:28"><expr pos:start="41:9" pos:end="41:27"><call pos:start="41:9" pos:end="41:27"><name pos:start="41:9" pos:end="41:20">cris_cc_mask</name><argument_list pos:start="41:21" pos:end="41:27">(<argument pos:start="41:22" pos:end="41:23"><expr pos:start="41:22" pos:end="41:23"><name pos:start="41:22" pos:end="41:23">dc</name></expr></argument>, <argument pos:start="41:26" pos:end="41:26"><expr pos:start="41:26" pos:end="41:26"><literal type="number" pos:start="41:26" pos:end="41:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="43:9" pos:end="45:73"><if pos:start="43:9" pos:end="45:73">if <condition pos:start="43:12" pos:end="43:24">(<expr pos:start="43:13" pos:end="43:23"><name pos:start="43:13" pos:end="43:23"><name pos:start="43:13" pos:end="43:14">dc</name><operator pos:start="43:15" pos:end="43:16">-&gt;</operator><name pos:start="43:17" pos:end="43:23">postinc</name></name></expr>)</condition><block type="pseudo" pos:start="45:17" pos:end="45:73"><block_content pos:start="45:17" pos:end="45:73">

		<expr_stmt pos:start="45:17" pos:end="45:73"><expr pos:start="45:17" pos:end="45:72"><call pos:start="45:17" pos:end="45:72"><name pos:start="45:17" pos:end="45:31">tcg_gen_addi_tl</name><argument_list pos:start="45:32" pos:end="45:72">(<argument pos:start="45:33" pos:end="45:46"><expr pos:start="45:33" pos:end="45:46"><name pos:start="45:33" pos:end="45:46"><name pos:start="45:33" pos:end="45:37">cpu_R</name><index pos:start="45:38" pos:end="45:46">[<expr pos:start="45:39" pos:end="45:45"><name pos:start="45:39" pos:end="45:45"><name pos:start="45:39" pos:end="45:40">dc</name><operator pos:start="45:41" pos:end="45:42">-&gt;</operator><name pos:start="45:43" pos:end="45:45">op1</name></name></expr>]</index></name></expr></argument>, <argument pos:start="45:49" pos:end="45:62"><expr pos:start="45:49" pos:end="45:62"><name pos:start="45:49" pos:end="45:62"><name pos:start="45:49" pos:end="45:53">cpu_R</name><index pos:start="45:54" pos:end="45:62">[<expr pos:start="45:55" pos:end="45:61"><name pos:start="45:55" pos:end="45:61"><name pos:start="45:55" pos:end="45:56">dc</name><operator pos:start="45:57" pos:end="45:58">-&gt;</operator><name pos:start="45:59" pos:end="45:61">op1</name></name></expr>]</index></name></expr></argument>, <argument pos:start="45:65" pos:end="45:71"><expr pos:start="45:65" pos:end="45:71"><name pos:start="45:65" pos:end="45:71">memsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return pos:start="47:9" pos:end="47:17">return <expr pos:start="47:16" pos:end="47:16"><literal type="number" pos:start="47:16" pos:end="47:16">2</literal></expr>;</return>

</block_content>}</block></function>
</unit>
