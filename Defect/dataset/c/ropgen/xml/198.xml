<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/198.c" pos:tabs="8"><function pos:start="1:1" pos:end="879:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">nvic_writel</name><parameter_list pos:start="1:24" pos:end="3:41">(<parameter pos:start="1:25" pos:end="1:36"><decl pos:start="1:25" pos:end="1:36"><type pos:start="1:25" pos:end="1:36"><name pos:start="1:25" pos:end="1:33">NVICState</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:36">s</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:53"><decl pos:start="1:39" pos:end="1:53"><type pos:start="1:39" pos:end="1:53"><name pos:start="1:39" pos:end="1:46">uint32_t</name></type> <name pos:start="1:48" pos:end="1:53">offset</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:69"><decl pos:start="1:56" pos:end="1:69"><type pos:start="1:56" pos:end="1:69"><name pos:start="1:56" pos:end="1:63">uint32_t</name></type> <name pos:start="1:65" pos:end="1:69">value</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:40"><decl pos:start="3:25" pos:end="3:40"><type pos:start="3:25" pos:end="3:40"><name pos:start="3:25" pos:end="3:34">MemTxAttrs</name></type> <name pos:start="3:36" pos:end="3:40">attrs</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="879:1">{<block_content pos:start="7:5" pos:end="877:5">

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:10">ARMCPU</name> <modifier pos:start="7:12" pos:end="7:12">*</modifier></type><name pos:start="7:13" pos:end="7:15">cpu</name> <init pos:start="7:17" pos:end="7:24">= <expr pos:start="7:19" pos:end="7:24"><name pos:start="7:19" pos:end="7:24"><name pos:start="7:19" pos:end="7:19">s</name><operator pos:start="7:20" pos:end="7:21">-&gt;</operator><name pos:start="7:22" pos:end="7:24">cpu</name></name></expr></init></decl>;</decl_stmt>



    <switch pos:start="11:5" pos:end="877:5">switch <condition pos:start="11:12" pos:end="11:19">(<expr pos:start="11:13" pos:end="11:18"><name pos:start="11:13" pos:end="11:18">offset</name></expr>)</condition> <block pos:start="11:21" pos:end="877:5">{<block_content pos:start="13:5" pos:end="875:63">

    <case pos:start="13:5" pos:end="13:25">case <expr pos:start="13:10" pos:end="13:24"><literal type="number" pos:start="13:10" pos:end="13:14">0x380</literal> <operator pos:start="13:16" pos:end="13:18">...</operator> <literal type="number" pos:start="13:20" pos:end="13:24">0x3bf</literal></expr>:</case> <comment type="block" pos:start="13:27" pos:end="13:44">/* NVIC_ITNS&lt;n&gt; */</comment>

    <block pos:start="15:5" pos:end="45:5">{<block_content pos:start="17:9" pos:end="43:14">

        <decl_stmt pos:start="17:9" pos:end="17:62"><decl pos:start="17:9" pos:end="17:61"><type pos:start="17:9" pos:end="17:11"><name pos:start="17:9" pos:end="17:11">int</name></type> <name pos:start="17:13" pos:end="17:20">startvec</name> <init pos:start="17:22" pos:end="17:61">= <expr pos:start="17:24" pos:end="17:61"><literal type="number" pos:start="17:24" pos:end="17:25">32</literal> <operator pos:start="17:27" pos:end="17:27">*</operator> <operator pos:start="17:29" pos:end="17:29">(</operator><name pos:start="17:30" pos:end="17:35">offset</name> <operator pos:start="17:37" pos:end="17:37">-</operator> <literal type="number" pos:start="17:39" pos:end="17:43">0x380</literal><operator pos:start="17:44" pos:end="17:44">)</operator> <operator pos:start="17:46" pos:end="17:46">+</operator> <name pos:start="17:48" pos:end="17:61">NVIC_FIRST_IRQ</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="19:9" pos:end="19:14"><decl pos:start="19:9" pos:end="19:13"><type pos:start="19:9" pos:end="19:11"><name pos:start="19:9" pos:end="19:11">int</name></type> <name pos:start="19:13" pos:end="19:13">i</name></decl>;</decl_stmt>



        <if_stmt pos:start="23:9" pos:end="27:9"><if pos:start="23:9" pos:end="27:9">if <condition pos:start="23:12" pos:end="23:52">(<expr pos:start="23:13" pos:end="23:51"><operator pos:start="23:13" pos:end="23:13">!</operator><call pos:start="23:14" pos:end="23:51"><name pos:start="23:14" pos:end="23:24">arm_feature</name><argument_list pos:start="23:25" pos:end="23:51">(<argument pos:start="23:26" pos:end="23:34"><expr pos:start="23:26" pos:end="23:34"><operator pos:start="23:26" pos:end="23:26">&amp;</operator><name pos:start="23:27" pos:end="23:34"><name pos:start="23:27" pos:end="23:29">cpu</name><operator pos:start="23:30" pos:end="23:31">-&gt;</operator><name pos:start="23:32" pos:end="23:34">env</name></name></expr></argument>, <argument pos:start="23:37" pos:end="23:50"><expr pos:start="23:37" pos:end="23:50"><name pos:start="23:37" pos:end="23:50">ARM_FEATURE_V8</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:54" pos:end="27:9">{<block_content pos:start="25:13" pos:end="25:28">

            <goto pos:start="25:13" pos:end="25:28">goto <name pos:start="25:18" pos:end="25:27">bad_offset</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="29:9" pos:end="33:9"><if pos:start="29:9" pos:end="33:9">if <condition pos:start="29:12" pos:end="29:26">(<expr pos:start="29:13" pos:end="29:25"><operator pos:start="29:13" pos:end="29:13">!</operator><name pos:start="29:14" pos:end="29:25"><name pos:start="29:14" pos:end="29:18">attrs</name><operator pos:start="29:19" pos:end="29:19">.</operator><name pos:start="29:20" pos:end="29:25">secure</name></name></expr>)</condition> <block pos:start="29:28" pos:end="33:9">{<block_content pos:start="31:13" pos:end="31:18">

            <break pos:start="31:13" pos:end="31:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <for pos:start="35:9" pos:end="39:9">for <control pos:start="35:13" pos:end="35:61">(<init pos:start="35:14" pos:end="35:19"><expr pos:start="35:14" pos:end="35:18"><name pos:start="35:14" pos:end="35:14">i</name> <operator pos:start="35:16" pos:end="35:16">=</operator> <literal type="number" pos:start="35:18" pos:end="35:18">0</literal></expr>;</init> <condition pos:start="35:21" pos:end="35:56"><expr pos:start="35:21" pos:end="35:55"><name pos:start="35:21" pos:end="35:21">i</name> <operator pos:start="35:23" pos:end="35:23">&lt;</operator> <literal type="number" pos:start="35:25" pos:end="35:26">32</literal> <operator pos:start="35:28" pos:end="35:29">&amp;&amp;</operator> <name pos:start="35:31" pos:end="35:38">startvec</name> <operator pos:start="35:40" pos:end="35:40">+</operator> <name pos:start="35:42" pos:end="35:42">i</name> <operator pos:start="35:44" pos:end="35:44">&lt;</operator> <name pos:start="35:46" pos:end="35:55"><name pos:start="35:46" pos:end="35:46">s</name><operator pos:start="35:47" pos:end="35:48">-&gt;</operator><name pos:start="35:49" pos:end="35:55">num_irq</name></name></expr>;</condition> <incr pos:start="35:58" pos:end="35:60"><expr pos:start="35:58" pos:end="35:60"><name pos:start="35:58" pos:end="35:58">i</name><operator pos:start="35:59" pos:end="35:60">++</operator></expr></incr>)</control> <block pos:start="35:63" pos:end="39:9">{<block_content pos:start="37:13" pos:end="37:53">

            <expr_stmt pos:start="37:13" pos:end="37:53"><expr pos:start="37:13" pos:end="37:52"><name pos:start="37:13" pos:end="37:33"><name pos:start="37:13" pos:end="37:13">s</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:19">itns</name><index pos:start="37:20" pos:end="37:33">[<expr pos:start="37:21" pos:end="37:32"><name pos:start="37:21" pos:end="37:28">startvec</name> <operator pos:start="37:30" pos:end="37:30">+</operator> <name pos:start="37:32" pos:end="37:32">i</name></expr>]</index></name> <operator pos:start="37:35" pos:end="37:35">=</operator> <operator pos:start="37:37" pos:end="37:37">(</operator><name pos:start="37:38" pos:end="37:42">value</name> <operator pos:start="37:44" pos:end="37:45">&gt;&gt;</operator> <name pos:start="37:47" pos:end="37:47">i</name><operator pos:start="37:48" pos:end="37:48">)</operator> <operator pos:start="37:50" pos:end="37:50">&amp;</operator> <literal type="number" pos:start="37:52" pos:end="37:52">1</literal></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="41:9" pos:end="41:27"><expr pos:start="41:9" pos:end="41:26"><call pos:start="41:9" pos:end="41:26"><name pos:start="41:9" pos:end="41:23">nvic_irq_update</name><argument_list pos:start="41:24" pos:end="41:26">(<argument pos:start="41:25" pos:end="41:25"><expr pos:start="41:25" pos:end="41:25"><name pos:start="41:25" pos:end="41:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="43:9" pos:end="43:14">break;</break>

    </block_content>}</block>

    <case pos:start="47:5" pos:end="47:15">case <expr pos:start="47:10" pos:end="47:14"><literal type="number" pos:start="47:10" pos:end="47:14">0xd04</literal></expr>:</case> <comment type="block" pos:start="47:17" pos:end="47:52">/* Interrupt Control State (ICSR) */</comment>

        <if_stmt pos:start="49:9" pos:end="65:9"><if pos:start="49:9" pos:end="65:9">if <condition pos:start="49:12" pos:end="49:60">(<expr pos:start="49:13" pos:end="49:59"><name pos:start="49:13" pos:end="49:30"><name pos:start="49:13" pos:end="49:15">cpu</name><operator pos:start="49:16" pos:end="49:17">-&gt;</operator><name pos:start="49:18" pos:end="49:20">env</name><operator pos:start="49:21" pos:end="49:21">.</operator><name pos:start="49:22" pos:end="49:24">v7m</name><operator pos:start="49:25" pos:end="49:25">.</operator><name pos:start="49:26" pos:end="49:30">aircr</name></name> <operator pos:start="49:32" pos:end="49:32">&amp;</operator> <name pos:start="49:34" pos:end="49:59">R_V7M_AIRCR_BFHFNMINS_MASK</name></expr>)</condition> <block pos:start="49:62" pos:end="65:9">{<block_content pos:start="51:13" pos:end="63:13">

            <if_stmt pos:start="51:13" pos:end="63:13"><if pos:start="51:13" pos:end="55:13">if <condition pos:start="51:16" pos:end="51:34">(<expr pos:start="51:17" pos:end="51:33"><name pos:start="51:17" pos:end="51:21">value</name> <operator pos:start="51:23" pos:end="51:23">&amp;</operator> <operator pos:start="51:25" pos:end="51:25">(</operator><literal type="number" pos:start="51:26" pos:end="51:26">1</literal> <operator pos:start="51:28" pos:end="51:29">&lt;&lt;</operator> <literal type="number" pos:start="51:31" pos:end="51:32">31</literal><operator pos:start="51:33" pos:end="51:33">)</operator></expr>)</condition> <block pos:start="51:36" pos:end="55:13">{<block_content pos:start="53:17" pos:end="53:67">

                <expr_stmt pos:start="53:17" pos:end="53:67"><expr pos:start="53:17" pos:end="53:66"><call pos:start="53:17" pos:end="53:66"><name pos:start="53:17" pos:end="53:39">armv7m_nvic_set_pending</name><argument_list pos:start="53:40" pos:end="53:66">(<argument pos:start="53:41" pos:end="53:41"><expr pos:start="53:41" pos:end="53:41"><name pos:start="53:41" pos:end="53:41">s</name></expr></argument>, <argument pos:start="53:44" pos:end="53:58"><expr pos:start="53:44" pos:end="53:58"><name pos:start="53:44" pos:end="53:58">ARMV7M_EXCP_NMI</name></expr></argument>, <argument pos:start="53:61" pos:end="53:65"><expr pos:start="53:61" pos:end="53:65"><name pos:start="53:61" pos:end="53:65">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="55:15" pos:end="63:13">else if <condition pos:start="55:23" pos:end="57:62">(<expr pos:start="55:24" pos:end="57:61"><name pos:start="55:24" pos:end="55:28">value</name> <operator pos:start="55:30" pos:end="55:30">&amp;</operator> <operator pos:start="55:32" pos:end="55:32">(</operator><literal type="number" pos:start="55:33" pos:end="55:33">1</literal> <operator pos:start="55:35" pos:end="55:36">&lt;&lt;</operator> <literal type="number" pos:start="55:38" pos:end="55:39">30</literal><operator pos:start="55:40" pos:end="55:40">)</operator> <operator pos:start="55:42" pos:end="55:43">&amp;&amp;</operator>

                       <call pos:start="57:24" pos:end="57:61"><name pos:start="57:24" pos:end="57:34">arm_feature</name><argument_list pos:start="57:35" pos:end="57:61">(<argument pos:start="57:36" pos:end="57:44"><expr pos:start="57:36" pos:end="57:44"><operator pos:start="57:36" pos:end="57:36">&amp;</operator><name pos:start="57:37" pos:end="57:44"><name pos:start="57:37" pos:end="57:39">cpu</name><operator pos:start="57:40" pos:end="57:41">-&gt;</operator><name pos:start="57:42" pos:end="57:44">env</name></name></expr></argument>, <argument pos:start="57:47" pos:end="57:60"><expr pos:start="57:47" pos:end="57:60"><name pos:start="57:47" pos:end="57:60">ARM_FEATURE_V8</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="57:64" pos:end="63:13">{<block_content pos:start="61:17" pos:end="61:69">

                <comment type="block" pos:start="59:17" pos:end="59:52">/* PENDNMICLR didn't exist in v7M */</comment>

                <expr_stmt pos:start="61:17" pos:end="61:69"><expr pos:start="61:17" pos:end="61:68"><call pos:start="61:17" pos:end="61:68"><name pos:start="61:17" pos:end="61:41">armv7m_nvic_clear_pending</name><argument_list pos:start="61:42" pos:end="61:68">(<argument pos:start="61:43" pos:end="61:43"><expr pos:start="61:43" pos:end="61:43"><name pos:start="61:43" pos:end="61:43">s</name></expr></argument>, <argument pos:start="61:46" pos:end="61:60"><expr pos:start="61:46" pos:end="61:60"><name pos:start="61:46" pos:end="61:60">ARMV7M_EXCP_NMI</name></expr></argument>, <argument pos:start="61:63" pos:end="61:67"><expr pos:start="61:63" pos:end="61:67"><name pos:start="61:63" pos:end="61:67">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="67:9" pos:end="75:9"><if pos:start="67:9" pos:end="71:9">if <condition pos:start="67:12" pos:end="67:30">(<expr pos:start="67:13" pos:end="67:29"><name pos:start="67:13" pos:end="67:17">value</name> <operator pos:start="67:19" pos:end="67:19">&amp;</operator> <operator pos:start="67:21" pos:end="67:21">(</operator><literal type="number" pos:start="67:22" pos:end="67:22">1</literal> <operator pos:start="67:24" pos:end="67:25">&lt;&lt;</operator> <literal type="number" pos:start="67:27" pos:end="67:28">28</literal><operator pos:start="67:29" pos:end="67:29">)</operator></expr>)</condition> <block pos:start="67:32" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:73">

            <expr_stmt pos:start="69:13" pos:end="69:73"><expr pos:start="69:13" pos:end="69:72"><call pos:start="69:13" pos:end="69:72"><name pos:start="69:13" pos:end="69:35">armv7m_nvic_set_pending</name><argument_list pos:start="69:36" pos:end="69:72">(<argument pos:start="69:37" pos:end="69:37"><expr pos:start="69:37" pos:end="69:37"><name pos:start="69:37" pos:end="69:37">s</name></expr></argument>, <argument pos:start="69:40" pos:end="69:57"><expr pos:start="69:40" pos:end="69:57"><name pos:start="69:40" pos:end="69:57">ARMV7M_EXCP_PENDSV</name></expr></argument>, <argument pos:start="69:60" pos:end="69:71"><expr pos:start="69:60" pos:end="69:71"><name pos:start="69:60" pos:end="69:71"><name pos:start="69:60" pos:end="69:64">attrs</name><operator pos:start="69:65" pos:end="69:65">.</operator><name pos:start="69:66" pos:end="69:71">secure</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="71:11" pos:end="75:9">else if <condition pos:start="71:19" pos:end="71:37">(<expr pos:start="71:20" pos:end="71:36"><name pos:start="71:20" pos:end="71:24">value</name> <operator pos:start="71:26" pos:end="71:26">&amp;</operator> <operator pos:start="71:28" pos:end="71:28">(</operator><literal type="number" pos:start="71:29" pos:end="71:29">1</literal> <operator pos:start="71:31" pos:end="71:32">&lt;&lt;</operator> <literal type="number" pos:start="71:34" pos:end="71:35">27</literal><operator pos:start="71:36" pos:end="71:36">)</operator></expr>)</condition> <block pos:start="71:39" pos:end="75:9">{<block_content pos:start="73:13" pos:end="73:75">

            <expr_stmt pos:start="73:13" pos:end="73:75"><expr pos:start="73:13" pos:end="73:74"><call pos:start="73:13" pos:end="73:74"><name pos:start="73:13" pos:end="73:37">armv7m_nvic_clear_pending</name><argument_list pos:start="73:38" pos:end="73:74">(<argument pos:start="73:39" pos:end="73:39"><expr pos:start="73:39" pos:end="73:39"><name pos:start="73:39" pos:end="73:39">s</name></expr></argument>, <argument pos:start="73:42" pos:end="73:59"><expr pos:start="73:42" pos:end="73:59"><name pos:start="73:42" pos:end="73:59">ARMV7M_EXCP_PENDSV</name></expr></argument>, <argument pos:start="73:62" pos:end="73:73"><expr pos:start="73:62" pos:end="73:73"><name pos:start="73:62" pos:end="73:73"><name pos:start="73:62" pos:end="73:66">attrs</name><operator pos:start="73:67" pos:end="73:67">.</operator><name pos:start="73:68" pos:end="73:73">secure</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="77:9" pos:end="85:9"><if pos:start="77:9" pos:end="81:9">if <condition pos:start="77:12" pos:end="77:30">(<expr pos:start="77:13" pos:end="77:29"><name pos:start="77:13" pos:end="77:17">value</name> <operator pos:start="77:19" pos:end="77:19">&amp;</operator> <operator pos:start="77:21" pos:end="77:21">(</operator><literal type="number" pos:start="77:22" pos:end="77:22">1</literal> <operator pos:start="77:24" pos:end="77:25">&lt;&lt;</operator> <literal type="number" pos:start="77:27" pos:end="77:28">26</literal><operator pos:start="77:29" pos:end="77:29">)</operator></expr>)</condition> <block pos:start="77:32" pos:end="81:9">{<block_content pos:start="79:13" pos:end="79:74">

            <expr_stmt pos:start="79:13" pos:end="79:74"><expr pos:start="79:13" pos:end="79:73"><call pos:start="79:13" pos:end="79:73"><name pos:start="79:13" pos:end="79:35">armv7m_nvic_set_pending</name><argument_list pos:start="79:36" pos:end="79:73">(<argument pos:start="79:37" pos:end="79:37"><expr pos:start="79:37" pos:end="79:37"><name pos:start="79:37" pos:end="79:37">s</name></expr></argument>, <argument pos:start="79:40" pos:end="79:58"><expr pos:start="79:40" pos:end="79:58"><name pos:start="79:40" pos:end="79:58">ARMV7M_EXCP_SYSTICK</name></expr></argument>, <argument pos:start="79:61" pos:end="79:72"><expr pos:start="79:61" pos:end="79:72"><name pos:start="79:61" pos:end="79:72"><name pos:start="79:61" pos:end="79:65">attrs</name><operator pos:start="79:66" pos:end="79:66">.</operator><name pos:start="79:67" pos:end="79:72">secure</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="81:11" pos:end="85:9">else if <condition pos:start="81:19" pos:end="81:37">(<expr pos:start="81:20" pos:end="81:36"><name pos:start="81:20" pos:end="81:24">value</name> <operator pos:start="81:26" pos:end="81:26">&amp;</operator> <operator pos:start="81:28" pos:end="81:28">(</operator><literal type="number" pos:start="81:29" pos:end="81:29">1</literal> <operator pos:start="81:31" pos:end="81:32">&lt;&lt;</operator> <literal type="number" pos:start="81:34" pos:end="81:35">25</literal><operator pos:start="81:36" pos:end="81:36">)</operator></expr>)</condition> <block pos:start="81:39" pos:end="85:9">{<block_content pos:start="83:13" pos:end="83:76">

            <expr_stmt pos:start="83:13" pos:end="83:76"><expr pos:start="83:13" pos:end="83:75"><call pos:start="83:13" pos:end="83:75"><name pos:start="83:13" pos:end="83:37">armv7m_nvic_clear_pending</name><argument_list pos:start="83:38" pos:end="83:75">(<argument pos:start="83:39" pos:end="83:39"><expr pos:start="83:39" pos:end="83:39"><name pos:start="83:39" pos:end="83:39">s</name></expr></argument>, <argument pos:start="83:42" pos:end="83:60"><expr pos:start="83:42" pos:end="83:60"><name pos:start="83:42" pos:end="83:60">ARMV7M_EXCP_SYSTICK</name></expr></argument>, <argument pos:start="83:63" pos:end="83:74"><expr pos:start="83:63" pos:end="83:74"><name pos:start="83:63" pos:end="83:74"><name pos:start="83:63" pos:end="83:67">attrs</name><operator pos:start="83:68" pos:end="83:68">.</operator><name pos:start="83:69" pos:end="83:74">secure</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="87:9" pos:end="87:14">break;</break>

    <case pos:start="89:5" pos:end="89:15">case <expr pos:start="89:10" pos:end="89:14"><literal type="number" pos:start="89:10" pos:end="89:14">0xd08</literal></expr>:</case> <comment type="block" pos:start="89:17" pos:end="89:43">/* Vector Table Offset.  */</comment>

        <expr_stmt pos:start="91:9" pos:end="91:64"><expr pos:start="91:9" pos:end="91:63"><name pos:start="91:9" pos:end="91:42"><name pos:start="91:9" pos:end="91:11">cpu</name><operator pos:start="91:12" pos:end="91:13">-&gt;</operator><name pos:start="91:14" pos:end="91:16">env</name><operator pos:start="91:17" pos:end="91:17">.</operator><name pos:start="91:18" pos:end="91:20">v7m</name><operator pos:start="91:21" pos:end="91:21">.</operator><name pos:start="91:22" pos:end="91:28">vecbase</name><index pos:start="91:29" pos:end="91:42">[<expr pos:start="91:30" pos:end="91:41"><name pos:start="91:30" pos:end="91:41"><name pos:start="91:30" pos:end="91:34">attrs</name><operator pos:start="91:35" pos:end="91:35">.</operator><name pos:start="91:36" pos:end="91:41">secure</name></name></expr>]</index></name> <operator pos:start="91:44" pos:end="91:44">=</operator> <name pos:start="91:46" pos:end="91:50">value</name> <operator pos:start="91:52" pos:end="91:52">&amp;</operator> <literal type="number" pos:start="91:54" pos:end="91:63">0xffffff80</literal></expr>;</expr_stmt>

        <break pos:start="93:9" pos:end="93:14">break;</break>

    <case pos:start="95:5" pos:end="95:15">case <expr pos:start="95:10" pos:end="95:14"><literal type="number" pos:start="95:10" pos:end="95:14">0xd0c</literal></expr>:</case> <comment type="block" pos:start="95:17" pos:end="95:65">/* Application Interrupt/Reset Control (AIRCR) */</comment>

        <if_stmt pos:start="97:9" pos:end="177:9"><if pos:start="97:9" pos:end="177:9">if <condition pos:start="97:12" pos:end="97:59">(<expr pos:start="97:13" pos:end="97:58"><operator pos:start="97:13" pos:end="97:13">(</operator><name pos:start="97:14" pos:end="97:18">value</name> <operator pos:start="97:20" pos:end="97:21">&gt;&gt;</operator> <name pos:start="97:23" pos:end="97:47">R_V7M_AIRCR_VECTKEY_SHIFT</name><operator pos:start="97:48" pos:end="97:48">)</operator> <operator pos:start="97:50" pos:end="97:51">==</operator> <literal type="number" pos:start="97:53" pos:end="97:58">0x05fa</literal></expr>)</condition> <block pos:start="97:61" pos:end="177:9">{<block_content pos:start="99:13" pos:end="175:31">

            <if_stmt pos:start="99:13" pos:end="109:13"><if pos:start="99:13" pos:end="109:13">if <condition pos:start="99:16" pos:end="99:53">(<expr pos:start="99:17" pos:end="99:52"><name pos:start="99:17" pos:end="99:21">value</name> <operator pos:start="99:23" pos:end="99:23">&amp;</operator> <name pos:start="99:25" pos:end="99:52">R_V7M_AIRCR_SYSRESETREQ_MASK</name></expr>)</condition> <block pos:start="99:55" pos:end="109:13">{<block_content pos:start="101:17" pos:end="107:17">

                <if_stmt pos:start="101:17" pos:end="107:17"><if pos:start="101:17" pos:end="107:17">if <condition pos:start="101:20" pos:end="103:74">(<expr pos:start="101:21" pos:end="103:73"><name pos:start="101:21" pos:end="101:32"><name pos:start="101:21" pos:end="101:25">attrs</name><operator pos:start="101:26" pos:end="101:26">.</operator><name pos:start="101:27" pos:end="101:32">secure</name></name> <operator pos:start="101:34" pos:end="101:35">||</operator>

                    <operator pos:start="103:21" pos:end="103:21">!</operator><operator pos:start="103:22" pos:end="103:22">(</operator><name pos:start="103:23" pos:end="103:40"><name pos:start="103:23" pos:end="103:25">cpu</name><operator pos:start="103:26" pos:end="103:27">-&gt;</operator><name pos:start="103:28" pos:end="103:30">env</name><operator pos:start="103:31" pos:end="103:31">.</operator><name pos:start="103:32" pos:end="103:34">v7m</name><operator pos:start="103:35" pos:end="103:35">.</operator><name pos:start="103:36" pos:end="103:40">aircr</name></name> <operator pos:start="103:42" pos:end="103:42">&amp;</operator> <name pos:start="103:44" pos:end="103:72">R_V7M_AIRCR_SYSRESETREQS_MASK</name><operator pos:start="103:73" pos:end="103:73">)</operator></expr>)</condition> <block pos:start="103:76" pos:end="107:17">{<block_content pos:start="105:21" pos:end="105:51">

                    <expr_stmt pos:start="105:21" pos:end="105:51"><expr pos:start="105:21" pos:end="105:50"><call pos:start="105:21" pos:end="105:50"><name pos:start="105:21" pos:end="105:34">qemu_irq_pulse</name><argument_list pos:start="105:35" pos:end="105:50">(<argument pos:start="105:36" pos:end="105:49"><expr pos:start="105:36" pos:end="105:49"><name pos:start="105:36" pos:end="105:49"><name pos:start="105:36" pos:end="105:36">s</name><operator pos:start="105:37" pos:end="105:38">-&gt;</operator><name pos:start="105:39" pos:end="105:49">sysresetreq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="111:13" pos:end="119:13"><if pos:start="111:13" pos:end="119:13">if <condition pos:start="111:16" pos:end="111:55">(<expr pos:start="111:17" pos:end="111:54"><name pos:start="111:17" pos:end="111:21">value</name> <operator pos:start="111:23" pos:end="111:23">&amp;</operator> <name pos:start="111:25" pos:end="111:54">R_V7M_AIRCR_VECTCLRACTIVE_MASK</name></expr>)</condition> <block pos:start="111:57" pos:end="119:13">{<block_content pos:start="113:17" pos:end="117:52">

                <expr_stmt pos:start="113:17" pos:end="117:52"><expr pos:start="113:17" pos:end="117:51"><call pos:start="113:17" pos:end="117:51"><name pos:start="113:17" pos:end="113:29">qemu_log_mask</name><argument_list pos:start="113:30" pos:end="117:51">(<argument pos:start="113:31" pos:end="113:45"><expr pos:start="113:31" pos:end="113:45"><name pos:start="113:31" pos:end="113:45">LOG_GUEST_ERROR</name></expr></argument>,

                              <argument pos:start="115:31" pos:end="117:50"><expr pos:start="115:31" pos:end="117:50"><literal type="string" pos:start="115:31" pos:end="115:77">"Setting VECTCLRACTIVE when not in DEBUG mode "</literal>

                              <literal type="string" pos:start="117:31" pos:end="117:50">"is UNPREDICTABLE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="121:13" pos:end="131:13"><if pos:start="121:13" pos:end="131:13">if <condition pos:start="121:16" pos:end="121:51">(<expr pos:start="121:17" pos:end="121:50"><name pos:start="121:17" pos:end="121:21">value</name> <operator pos:start="121:23" pos:end="121:23">&amp;</operator> <name pos:start="121:25" pos:end="121:50">R_V7M_AIRCR_VECTRESET_MASK</name></expr>)</condition> <block pos:start="121:53" pos:end="131:13">{<block_content pos:start="125:17" pos:end="129:52">

                <comment type="block" pos:start="123:17" pos:end="123:49">/* NB: this bit is RES0 in v8M */</comment>

                <expr_stmt pos:start="125:17" pos:end="129:52"><expr pos:start="125:17" pos:end="129:51"><call pos:start="125:17" pos:end="129:51"><name pos:start="125:17" pos:end="125:29">qemu_log_mask</name><argument_list pos:start="125:30" pos:end="129:51">(<argument pos:start="125:31" pos:end="125:45"><expr pos:start="125:31" pos:end="125:45"><name pos:start="125:31" pos:end="125:45">LOG_GUEST_ERROR</name></expr></argument>,

                              <argument pos:start="127:31" pos:end="129:50"><expr pos:start="127:31" pos:end="129:50"><literal type="string" pos:start="127:31" pos:end="127:73">"Setting VECTRESET when not in DEBUG mode "</literal>

                              <literal type="string" pos:start="129:31" pos:end="129:50">"is UNPREDICTABLE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="133:13" pos:end="137:79"><expr pos:start="133:13" pos:end="137:78"><name pos:start="133:13" pos:end="133:37"><name pos:start="133:13" pos:end="133:13">s</name><operator pos:start="133:14" pos:end="133:15">-&gt;</operator><name pos:start="133:16" pos:end="133:23">prigroup</name><index pos:start="133:24" pos:end="133:37">[<expr pos:start="133:25" pos:end="133:36"><name pos:start="133:25" pos:end="133:36"><name pos:start="133:25" pos:end="133:29">attrs</name><operator pos:start="133:30" pos:end="133:30">.</operator><name pos:start="133:31" pos:end="133:36">secure</name></name></expr>]</index></name> <operator pos:start="133:39" pos:end="133:39">=</operator> <call pos:start="133:41" pos:end="137:78"><name pos:start="133:41" pos:end="133:49">extract32</name><argument_list pos:start="133:50" pos:end="137:78">(<argument pos:start="133:51" pos:end="133:55"><expr pos:start="133:51" pos:end="133:55"><name pos:start="133:51" pos:end="133:55">value</name></expr></argument>,

                                                  <argument pos:start="135:51" pos:end="135:76"><expr pos:start="135:51" pos:end="135:76"><name pos:start="135:51" pos:end="135:76">R_V7M_AIRCR_PRIGROUP_SHIFT</name></expr></argument>,

                                                  <argument pos:start="137:51" pos:end="137:77"><expr pos:start="137:51" pos:end="137:77"><name pos:start="137:51" pos:end="137:77">R_V7M_AIRCR_PRIGROUP_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="139:13" pos:end="173:13"><if pos:start="139:13" pos:end="173:13">if <condition pos:start="139:16" pos:end="139:29">(<expr pos:start="139:17" pos:end="139:28"><name pos:start="139:17" pos:end="139:28"><name pos:start="139:17" pos:end="139:21">attrs</name><operator pos:start="139:22" pos:end="139:22">.</operator><name pos:start="139:23" pos:end="139:28">secure</name></name></expr>)</condition> <block pos:start="139:31" pos:end="173:13">{<block_content pos:start="143:17" pos:end="171:17">

                <comment type="block" pos:start="141:17" pos:end="141:60">/* These bits are only writable by secure */</comment>

                <expr_stmt pos:start="143:17" pos:end="149:44"><expr pos:start="143:17" pos:end="149:43"><name pos:start="143:17" pos:end="143:34"><name pos:start="143:17" pos:end="143:19">cpu</name><operator pos:start="143:20" pos:end="143:21">-&gt;</operator><name pos:start="143:22" pos:end="143:24">env</name><operator pos:start="143:25" pos:end="143:25">.</operator><name pos:start="143:26" pos:end="143:28">v7m</name><operator pos:start="143:29" pos:end="143:29">.</operator><name pos:start="143:30" pos:end="143:34">aircr</name></name> <operator pos:start="143:36" pos:end="143:36">=</operator> <name pos:start="143:38" pos:end="143:42">value</name> <operator pos:start="143:44" pos:end="143:44">&amp;</operator>

                    <operator pos:start="145:21" pos:end="145:21">(</operator><name pos:start="145:22" pos:end="145:50">R_V7M_AIRCR_SYSRESETREQS_MASK</name> <operator pos:start="145:52" pos:end="145:52">|</operator>

                     <name pos:start="147:22" pos:end="147:47">R_V7M_AIRCR_BFHFNMINS_MASK</name> <operator pos:start="147:49" pos:end="147:49">|</operator>

                     <name pos:start="149:22" pos:end="149:42">R_V7M_AIRCR_PRIS_MASK</name><operator pos:start="149:43" pos:end="149:43">)</operator></expr>;</expr_stmt>

                <comment type="block" pos:start="151:17" pos:end="157:19">/* BFHFNMINS changes the priority of Secure HardFault, and

                 * allows a pending Non-secure HardFault to preempt (which

                 * we implement by marking it enabled).

                 */</comment>

                <if_stmt pos:start="159:17" pos:end="171:17"><if pos:start="159:17" pos:end="165:17">if <condition pos:start="159:20" pos:end="159:68">(<expr pos:start="159:21" pos:end="159:67"><name pos:start="159:21" pos:end="159:38"><name pos:start="159:21" pos:end="159:23">cpu</name><operator pos:start="159:24" pos:end="159:25">-&gt;</operator><name pos:start="159:26" pos:end="159:28">env</name><operator pos:start="159:29" pos:end="159:29">.</operator><name pos:start="159:30" pos:end="159:32">v7m</name><operator pos:start="159:33" pos:end="159:33">.</operator><name pos:start="159:34" pos:end="159:38">aircr</name></name> <operator pos:start="159:40" pos:end="159:40">&amp;</operator> <name pos:start="159:42" pos:end="159:67">R_V7M_AIRCR_BFHFNMINS_MASK</name></expr>)</condition> <block pos:start="159:70" pos:end="165:17">{<block_content pos:start="161:21" pos:end="163:61">

                    <expr_stmt pos:start="161:21" pos:end="161:63"><expr pos:start="161:21" pos:end="161:62"><name pos:start="161:21" pos:end="161:52"><name pos:start="161:21" pos:end="161:21">s</name><operator pos:start="161:22" pos:end="161:23">-&gt;</operator><name pos:start="161:24" pos:end="161:34">sec_vectors</name><index pos:start="161:35" pos:end="161:52">[<expr pos:start="161:36" pos:end="161:51"><name pos:start="161:36" pos:end="161:51">ARMV7M_EXCP_HARD</name></expr>]</index></name><operator pos:start="161:53" pos:end="161:53">.</operator><name pos:start="161:54" pos:end="161:57">prio</name> <operator pos:start="161:59" pos:end="161:59">=</operator> <operator pos:start="161:61" pos:end="161:61">-</operator><literal type="number" pos:start="161:62" pos:end="161:62">3</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="163:21" pos:end="163:61"><expr pos:start="163:21" pos:end="163:60"><name pos:start="163:21" pos:end="163:48"><name pos:start="163:21" pos:end="163:21">s</name><operator pos:start="163:22" pos:end="163:23">-&gt;</operator><name pos:start="163:24" pos:end="163:30">vectors</name><index pos:start="163:31" pos:end="163:48">[<expr pos:start="163:32" pos:end="163:47"><name pos:start="163:32" pos:end="163:47">ARMV7M_EXCP_HARD</name></expr>]</index></name><operator pos:start="163:49" pos:end="163:49">.</operator><name pos:start="163:50" pos:end="163:56">enabled</name> <operator pos:start="163:58" pos:end="163:58">=</operator> <literal type="number" pos:start="163:60" pos:end="163:60">1</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="165:19" pos:end="171:17">else <block pos:start="165:24" pos:end="171:17">{<block_content pos:start="167:21" pos:end="169:61">

                    <expr_stmt pos:start="167:21" pos:end="167:63"><expr pos:start="167:21" pos:end="167:62"><name pos:start="167:21" pos:end="167:52"><name pos:start="167:21" pos:end="167:21">s</name><operator pos:start="167:22" pos:end="167:23">-&gt;</operator><name pos:start="167:24" pos:end="167:34">sec_vectors</name><index pos:start="167:35" pos:end="167:52">[<expr pos:start="167:36" pos:end="167:51"><name pos:start="167:36" pos:end="167:51">ARMV7M_EXCP_HARD</name></expr>]</index></name><operator pos:start="167:53" pos:end="167:53">.</operator><name pos:start="167:54" pos:end="167:57">prio</name> <operator pos:start="167:59" pos:end="167:59">=</operator> <operator pos:start="167:61" pos:end="167:61">-</operator><literal type="number" pos:start="167:62" pos:end="167:62">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="169:21" pos:end="169:61"><expr pos:start="169:21" pos:end="169:60"><name pos:start="169:21" pos:end="169:48"><name pos:start="169:21" pos:end="169:21">s</name><operator pos:start="169:22" pos:end="169:23">-&gt;</operator><name pos:start="169:24" pos:end="169:30">vectors</name><index pos:start="169:31" pos:end="169:48">[<expr pos:start="169:32" pos:end="169:47"><name pos:start="169:32" pos:end="169:47">ARMV7M_EXCP_HARD</name></expr>]</index></name><operator pos:start="169:49" pos:end="169:49">.</operator><name pos:start="169:50" pos:end="169:56">enabled</name> <operator pos:start="169:58" pos:end="169:58">=</operator> <literal type="number" pos:start="169:60" pos:end="169:60">0</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="175:13" pos:end="175:31"><expr pos:start="175:13" pos:end="175:30"><call pos:start="175:13" pos:end="175:30"><name pos:start="175:13" pos:end="175:27">nvic_irq_update</name><argument_list pos:start="175:28" pos:end="175:30">(<argument pos:start="175:29" pos:end="175:29"><expr pos:start="175:29" pos:end="175:29"><name pos:start="175:29" pos:end="175:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="179:9" pos:end="179:14">break;</break>

    <case pos:start="181:5" pos:end="181:15">case <expr pos:start="181:10" pos:end="181:14"><literal type="number" pos:start="181:10" pos:end="181:14">0xd10</literal></expr>:</case> <comment type="block" pos:start="181:17" pos:end="181:38">/* System Control.  */</comment>

        <comment type="block" pos:start="183:9" pos:end="183:49">/* TODO: Implement control registers.  */</comment>

        <expr_stmt pos:start="185:9" pos:end="185:62"><expr pos:start="185:9" pos:end="185:61"><call pos:start="185:9" pos:end="185:61"><name pos:start="185:9" pos:end="185:21">qemu_log_mask</name><argument_list pos:start="185:22" pos:end="185:61">(<argument pos:start="185:23" pos:end="185:31"><expr pos:start="185:23" pos:end="185:31"><name pos:start="185:23" pos:end="185:31">LOG_UNIMP</name></expr></argument>, <argument pos:start="185:34" pos:end="185:60"><expr pos:start="185:34" pos:end="185:60"><literal type="string" pos:start="185:34" pos:end="185:60">"NVIC: SCR unimplemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="187:9" pos:end="187:14">break;</break>

    <case pos:start="189:5" pos:end="189:15">case <expr pos:start="189:10" pos:end="189:14"><literal type="number" pos:start="189:10" pos:end="189:14">0xd14</literal></expr>:</case> <comment type="block" pos:start="189:17" pos:end="189:45">/* Configuration Control.  */</comment>

        <comment type="block" pos:start="191:9" pos:end="191:61">/* Enforce RAZ/WI on reserved and must-RAZ/WI bits */</comment>

        <expr_stmt pos:start="193:9" pos:end="203:49"><expr pos:start="193:9" pos:end="203:48"><name pos:start="193:9" pos:end="193:13">value</name> <operator pos:start="193:15" pos:end="193:16">&amp;=</operator> <operator pos:start="193:18" pos:end="193:18">(</operator><name pos:start="193:19" pos:end="193:41">R_V7M_CCR_STKALIGN_MASK</name> <operator pos:start="193:43" pos:end="193:43">|</operator>

                  <name pos:start="195:19" pos:end="195:42">R_V7M_CCR_BFHFNMIGN_MASK</name> <operator pos:start="195:44" pos:end="195:44">|</operator>

                  <name pos:start="197:19" pos:end="197:42">R_V7M_CCR_DIV_0_TRP_MASK</name> <operator pos:start="197:44" pos:end="197:44">|</operator>

                  <name pos:start="199:19" pos:end="199:44">R_V7M_CCR_UNALIGN_TRP_MASK</name> <operator pos:start="199:46" pos:end="199:46">|</operator>

                  <name pos:start="201:19" pos:end="201:45">R_V7M_CCR_USERSETMPEND_MASK</name> <operator pos:start="201:47" pos:end="201:47">|</operator>

                  <name pos:start="203:19" pos:end="203:47">R_V7M_CCR_NONBASETHRDENA_MASK</name><operator pos:start="203:48" pos:end="203:48">)</operator></expr>;</expr_stmt>



        <if_stmt pos:start="207:9" pos:end="215:9"><if pos:start="207:9" pos:end="215:9">if <condition pos:start="207:12" pos:end="207:51">(<expr pos:start="207:13" pos:end="207:50"><call pos:start="207:13" pos:end="207:50"><name pos:start="207:13" pos:end="207:23">arm_feature</name><argument_list pos:start="207:24" pos:end="207:50">(<argument pos:start="207:25" pos:end="207:33"><expr pos:start="207:25" pos:end="207:33"><operator pos:start="207:25" pos:end="207:25">&amp;</operator><name pos:start="207:26" pos:end="207:33"><name pos:start="207:26" pos:end="207:28">cpu</name><operator pos:start="207:29" pos:end="207:30">-&gt;</operator><name pos:start="207:31" pos:end="207:33">env</name></name></expr></argument>, <argument pos:start="207:36" pos:end="207:49"><expr pos:start="207:36" pos:end="207:49"><name pos:start="207:36" pos:end="207:49">ARM_FEATURE_V8</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="207:53" pos:end="215:9">{<block_content pos:start="211:13" pos:end="213:42">

            <comment type="block" pos:start="209:13" pos:end="209:63">/* v8M makes NONBASETHRDENA and STKALIGN be RES1 */</comment>

            <expr_stmt pos:start="211:13" pos:end="213:42"><expr pos:start="211:13" pos:end="213:41"><name pos:start="211:13" pos:end="211:17">value</name> <operator pos:start="211:19" pos:end="211:20">|=</operator> <name pos:start="211:22" pos:end="211:50">R_V7M_CCR_NONBASETHRDENA_MASK</name>

                <operator pos:start="213:17" pos:end="213:17">|</operator> <name pos:start="213:19" pos:end="213:41">R_V7M_CCR_STKALIGN_MASK</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="217:9" pos:end="229:9"><if pos:start="217:9" pos:end="229:9">if <condition pos:start="217:12" pos:end="217:25">(<expr pos:start="217:13" pos:end="217:24"><name pos:start="217:13" pos:end="217:24"><name pos:start="217:13" pos:end="217:17">attrs</name><operator pos:start="217:18" pos:end="217:18">.</operator><name pos:start="217:19" pos:end="217:24">secure</name></name></expr>)</condition> <block pos:start="217:27" pos:end="229:9">{<block_content pos:start="221:13" pos:end="227:47">

            <comment type="block" pos:start="219:13" pos:end="219:75">/* the BFHFNMIGN bit is not banked; keep that in the NS copy */</comment>

            <expr_stmt pos:start="221:13" pos:end="225:53"><expr pos:start="221:13" pos:end="225:52"><name pos:start="221:13" pos:end="221:38"><name pos:start="221:13" pos:end="221:15">cpu</name><operator pos:start="221:16" pos:end="221:17">-&gt;</operator><name pos:start="221:18" pos:end="221:20">env</name><operator pos:start="221:21" pos:end="221:21">.</operator><name pos:start="221:22" pos:end="221:24">v7m</name><operator pos:start="221:25" pos:end="221:25">.</operator><name pos:start="221:26" pos:end="221:28">ccr</name><index pos:start="221:29" pos:end="221:38">[<expr pos:start="221:30" pos:end="221:37"><name pos:start="221:30" pos:end="221:37">M_REG_NS</name></expr>]</index></name> <operator pos:start="221:40" pos:end="221:40">=</operator>

                <operator pos:start="223:17" pos:end="223:17">(</operator><name pos:start="223:18" pos:end="223:43"><name pos:start="223:18" pos:end="223:20">cpu</name><operator pos:start="223:21" pos:end="223:22">-&gt;</operator><name pos:start="223:23" pos:end="223:25">env</name><operator pos:start="223:26" pos:end="223:26">.</operator><name pos:start="223:27" pos:end="223:29">v7m</name><operator pos:start="223:30" pos:end="223:30">.</operator><name pos:start="223:31" pos:end="223:33">ccr</name><index pos:start="223:34" pos:end="223:43">[<expr pos:start="223:35" pos:end="223:42"><name pos:start="223:35" pos:end="223:42">M_REG_NS</name></expr>]</index></name> <operator pos:start="223:45" pos:end="223:45">&amp;</operator> <operator pos:start="223:47" pos:end="223:47">~</operator><name pos:start="223:48" pos:end="223:71">R_V7M_CCR_BFHFNMIGN_MASK</name><operator pos:start="223:72" pos:end="223:72">)</operator>

                <operator pos:start="225:17" pos:end="225:17">|</operator> <operator pos:start="225:19" pos:end="225:19">(</operator><name pos:start="225:20" pos:end="225:24">value</name> <operator pos:start="225:26" pos:end="225:26">&amp;</operator> <name pos:start="225:28" pos:end="225:51">R_V7M_CCR_BFHFNMIGN_MASK</name><operator pos:start="225:52" pos:end="225:52">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="227:13" pos:end="227:47"><expr pos:start="227:13" pos:end="227:46"><name pos:start="227:13" pos:end="227:17">value</name> <operator pos:start="227:19" pos:end="227:20">&amp;=</operator> <operator pos:start="227:22" pos:end="227:22">~</operator><name pos:start="227:23" pos:end="227:46">R_V7M_CCR_BFHFNMIGN_MASK</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="233:9" pos:end="233:47"><expr pos:start="233:9" pos:end="233:46"><name pos:start="233:9" pos:end="233:38"><name pos:start="233:9" pos:end="233:11">cpu</name><operator pos:start="233:12" pos:end="233:13">-&gt;</operator><name pos:start="233:14" pos:end="233:16">env</name><operator pos:start="233:17" pos:end="233:17">.</operator><name pos:start="233:18" pos:end="233:20">v7m</name><operator pos:start="233:21" pos:end="233:21">.</operator><name pos:start="233:22" pos:end="233:24">ccr</name><index pos:start="233:25" pos:end="233:38">[<expr pos:start="233:26" pos:end="233:37"><name pos:start="233:26" pos:end="233:37"><name pos:start="233:26" pos:end="233:30">attrs</name><operator pos:start="233:31" pos:end="233:31">.</operator><name pos:start="233:32" pos:end="233:37">secure</name></name></expr>]</index></name> <operator pos:start="233:40" pos:end="233:40">=</operator> <name pos:start="233:42" pos:end="233:46">value</name></expr>;</expr_stmt>

        <break pos:start="235:9" pos:end="235:14">break;</break>

    <case pos:start="237:5" pos:end="237:15">case <expr pos:start="237:10" pos:end="237:14"><literal type="number" pos:start="237:10" pos:end="237:14">0xd24</literal></expr>:</case> <comment type="block" pos:start="237:17" pos:end="237:62">/* System Handler Control and State (SHCSR) */</comment>

        <if_stmt pos:start="239:9" pos:end="313:9"><if pos:start="239:9" pos:end="283:9">if <condition pos:start="239:12" pos:end="239:25">(<expr pos:start="239:13" pos:end="239:24"><name pos:start="239:13" pos:end="239:24"><name pos:start="239:13" pos:end="239:17">attrs</name><operator pos:start="239:18" pos:end="239:18">.</operator><name pos:start="239:19" pos:end="239:24">secure</name></name></expr>)</condition> <block pos:start="239:27" pos:end="283:9">{<block_content pos:start="241:13" pos:end="281:78">

            <expr_stmt pos:start="241:13" pos:end="241:77"><expr pos:start="241:13" pos:end="241:76"><name pos:start="241:13" pos:end="241:43"><name pos:start="241:13" pos:end="241:13">s</name><operator pos:start="241:14" pos:end="241:15">-&gt;</operator><name pos:start="241:16" pos:end="241:26">sec_vectors</name><index pos:start="241:27" pos:end="241:43">[<expr pos:start="241:28" pos:end="241:42"><name pos:start="241:28" pos:end="241:42">ARMV7M_EXCP_MEM</name></expr>]</index></name><operator pos:start="241:44" pos:end="241:44">.</operator><name pos:start="241:45" pos:end="241:50">active</name> <operator pos:start="241:52" pos:end="241:52">=</operator> <operator pos:start="241:54" pos:end="241:54">(</operator><name pos:start="241:55" pos:end="241:59">value</name> <operator pos:start="241:61" pos:end="241:61">&amp;</operator> <operator pos:start="241:63" pos:end="241:63">(</operator><literal type="number" pos:start="241:64" pos:end="241:64">1</literal> <operator pos:start="241:66" pos:end="241:67">&lt;&lt;</operator> <literal type="number" pos:start="241:69" pos:end="241:69">0</literal><operator pos:start="241:70" pos:end="241:70">)</operator><operator pos:start="241:71" pos:end="241:71">)</operator> <operator pos:start="241:73" pos:end="241:74">!=</operator> <literal type="number" pos:start="241:76" pos:end="241:76">0</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="243:13" pos:end="243:63">/* Secure HardFault active bit cannot be written */</comment>

            <expr_stmt pos:start="245:13" pos:end="245:79"><expr pos:start="245:13" pos:end="245:78"><name pos:start="245:13" pos:end="245:45"><name pos:start="245:13" pos:end="245:13">s</name><operator pos:start="245:14" pos:end="245:15">-&gt;</operator><name pos:start="245:16" pos:end="245:26">sec_vectors</name><index pos:start="245:27" pos:end="245:45">[<expr pos:start="245:28" pos:end="245:44"><name pos:start="245:28" pos:end="245:44">ARMV7M_EXCP_USAGE</name></expr>]</index></name><operator pos:start="245:46" pos:end="245:46">.</operator><name pos:start="245:47" pos:end="245:52">active</name> <operator pos:start="245:54" pos:end="245:54">=</operator> <operator pos:start="245:56" pos:end="245:56">(</operator><name pos:start="245:57" pos:end="245:61">value</name> <operator pos:start="245:63" pos:end="245:63">&amp;</operator> <operator pos:start="245:65" pos:end="245:65">(</operator><literal type="number" pos:start="245:66" pos:end="245:66">1</literal> <operator pos:start="245:68" pos:end="245:69">&lt;&lt;</operator> <literal type="number" pos:start="245:71" pos:end="245:71">3</literal><operator pos:start="245:72" pos:end="245:72">)</operator><operator pos:start="245:73" pos:end="245:73">)</operator> <operator pos:start="245:75" pos:end="245:76">!=</operator> <literal type="number" pos:start="245:78" pos:end="245:78">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="247:13" pos:end="247:77"><expr pos:start="247:13" pos:end="247:76"><name pos:start="247:13" pos:end="247:43"><name pos:start="247:13" pos:end="247:13">s</name><operator pos:start="247:14" pos:end="247:15">-&gt;</operator><name pos:start="247:16" pos:end="247:26">sec_vectors</name><index pos:start="247:27" pos:end="247:43">[<expr pos:start="247:28" pos:end="247:42"><name pos:start="247:28" pos:end="247:42">ARMV7M_EXCP_SVC</name></expr>]</index></name><operator pos:start="247:44" pos:end="247:44">.</operator><name pos:start="247:45" pos:end="247:50">active</name> <operator pos:start="247:52" pos:end="247:52">=</operator> <operator pos:start="247:54" pos:end="247:54">(</operator><name pos:start="247:55" pos:end="247:59">value</name> <operator pos:start="247:61" pos:end="247:61">&amp;</operator> <operator pos:start="247:63" pos:end="247:63">(</operator><literal type="number" pos:start="247:64" pos:end="247:64">1</literal> <operator pos:start="247:66" pos:end="247:67">&lt;&lt;</operator> <literal type="number" pos:start="247:69" pos:end="247:69">7</literal><operator pos:start="247:70" pos:end="247:70">)</operator><operator pos:start="247:71" pos:end="247:71">)</operator> <operator pos:start="247:73" pos:end="247:74">!=</operator> <literal type="number" pos:start="247:76" pos:end="247:76">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="249:13" pos:end="251:41"><expr pos:start="249:13" pos:end="251:40"><name pos:start="249:13" pos:end="249:46"><name pos:start="249:13" pos:end="249:13">s</name><operator pos:start="249:14" pos:end="249:15">-&gt;</operator><name pos:start="249:16" pos:end="249:26">sec_vectors</name><index pos:start="249:27" pos:end="249:46">[<expr pos:start="249:28" pos:end="249:45"><name pos:start="249:28" pos:end="249:45">ARMV7M_EXCP_PENDSV</name></expr>]</index></name><operator pos:start="249:47" pos:end="249:47">.</operator><name pos:start="249:48" pos:end="249:53">active</name> <operator pos:start="249:55" pos:end="249:55">=</operator>

                <operator pos:start="251:17" pos:end="251:17">(</operator><name pos:start="251:18" pos:end="251:22">value</name> <operator pos:start="251:24" pos:end="251:24">&amp;</operator> <operator pos:start="251:26" pos:end="251:26">(</operator><literal type="number" pos:start="251:27" pos:end="251:27">1</literal> <operator pos:start="251:29" pos:end="251:30">&lt;&lt;</operator> <literal type="number" pos:start="251:32" pos:end="251:33">10</literal><operator pos:start="251:34" pos:end="251:34">)</operator><operator pos:start="251:35" pos:end="251:35">)</operator> <operator pos:start="251:37" pos:end="251:38">!=</operator> <literal type="number" pos:start="251:40" pos:end="251:40">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="253:13" pos:end="255:41"><expr pos:start="253:13" pos:end="255:40"><name pos:start="253:13" pos:end="253:47"><name pos:start="253:13" pos:end="253:13">s</name><operator pos:start="253:14" pos:end="253:15">-&gt;</operator><name pos:start="253:16" pos:end="253:26">sec_vectors</name><index pos:start="253:27" pos:end="253:47">[<expr pos:start="253:28" pos:end="253:46"><name pos:start="253:28" pos:end="253:46">ARMV7M_EXCP_SYSTICK</name></expr>]</index></name><operator pos:start="253:48" pos:end="253:48">.</operator><name pos:start="253:49" pos:end="253:54">active</name> <operator pos:start="253:56" pos:end="253:56">=</operator>

                <operator pos:start="255:17" pos:end="255:17">(</operator><name pos:start="255:18" pos:end="255:22">value</name> <operator pos:start="255:24" pos:end="255:24">&amp;</operator> <operator pos:start="255:26" pos:end="255:26">(</operator><literal type="number" pos:start="255:27" pos:end="255:27">1</literal> <operator pos:start="255:29" pos:end="255:30">&lt;&lt;</operator> <literal type="number" pos:start="255:32" pos:end="255:33">11</literal><operator pos:start="255:34" pos:end="255:34">)</operator><operator pos:start="255:35" pos:end="255:35">)</operator> <operator pos:start="255:37" pos:end="255:38">!=</operator> <literal type="number" pos:start="255:40" pos:end="255:40">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="257:13" pos:end="259:41"><expr pos:start="257:13" pos:end="259:40"><name pos:start="257:13" pos:end="257:45"><name pos:start="257:13" pos:end="257:13">s</name><operator pos:start="257:14" pos:end="257:15">-&gt;</operator><name pos:start="257:16" pos:end="257:26">sec_vectors</name><index pos:start="257:27" pos:end="257:45">[<expr pos:start="257:28" pos:end="257:44"><name pos:start="257:28" pos:end="257:44">ARMV7M_EXCP_USAGE</name></expr>]</index></name><operator pos:start="257:46" pos:end="257:46">.</operator><name pos:start="257:47" pos:end="257:53">pending</name> <operator pos:start="257:55" pos:end="257:55">=</operator>

                <operator pos:start="259:17" pos:end="259:17">(</operator><name pos:start="259:18" pos:end="259:22">value</name> <operator pos:start="259:24" pos:end="259:24">&amp;</operator> <operator pos:start="259:26" pos:end="259:26">(</operator><literal type="number" pos:start="259:27" pos:end="259:27">1</literal> <operator pos:start="259:29" pos:end="259:30">&lt;&lt;</operator> <literal type="number" pos:start="259:32" pos:end="259:33">12</literal><operator pos:start="259:34" pos:end="259:34">)</operator><operator pos:start="259:35" pos:end="259:35">)</operator> <operator pos:start="259:37" pos:end="259:38">!=</operator> <literal type="number" pos:start="259:40" pos:end="259:40">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="261:13" pos:end="261:79"><expr pos:start="261:13" pos:end="261:78"><name pos:start="261:13" pos:end="261:43"><name pos:start="261:13" pos:end="261:13">s</name><operator pos:start="261:14" pos:end="261:15">-&gt;</operator><name pos:start="261:16" pos:end="261:26">sec_vectors</name><index pos:start="261:27" pos:end="261:43">[<expr pos:start="261:28" pos:end="261:42"><name pos:start="261:28" pos:end="261:42">ARMV7M_EXCP_MEM</name></expr>]</index></name><operator pos:start="261:44" pos:end="261:44">.</operator><name pos:start="261:45" pos:end="261:51">pending</name> <operator pos:start="261:53" pos:end="261:53">=</operator> <operator pos:start="261:55" pos:end="261:55">(</operator><name pos:start="261:56" pos:end="261:60">value</name> <operator pos:start="261:62" pos:end="261:62">&amp;</operator> <operator pos:start="261:64" pos:end="261:64">(</operator><literal type="number" pos:start="261:65" pos:end="261:65">1</literal> <operator pos:start="261:67" pos:end="261:68">&lt;&lt;</operator> <literal type="number" pos:start="261:70" pos:end="261:71">13</literal><operator pos:start="261:72" pos:end="261:72">)</operator><operator pos:start="261:73" pos:end="261:73">)</operator> <operator pos:start="261:75" pos:end="261:76">!=</operator> <literal type="number" pos:start="261:78" pos:end="261:78">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="263:13" pos:end="263:79"><expr pos:start="263:13" pos:end="263:78"><name pos:start="263:13" pos:end="263:43"><name pos:start="263:13" pos:end="263:13">s</name><operator pos:start="263:14" pos:end="263:15">-&gt;</operator><name pos:start="263:16" pos:end="263:26">sec_vectors</name><index pos:start="263:27" pos:end="263:43">[<expr pos:start="263:28" pos:end="263:42"><name pos:start="263:28" pos:end="263:42">ARMV7M_EXCP_SVC</name></expr>]</index></name><operator pos:start="263:44" pos:end="263:44">.</operator><name pos:start="263:45" pos:end="263:51">pending</name> <operator pos:start="263:53" pos:end="263:53">=</operator> <operator pos:start="263:55" pos:end="263:55">(</operator><name pos:start="263:56" pos:end="263:60">value</name> <operator pos:start="263:62" pos:end="263:62">&amp;</operator> <operator pos:start="263:64" pos:end="263:64">(</operator><literal type="number" pos:start="263:65" pos:end="263:65">1</literal> <operator pos:start="263:67" pos:end="263:68">&lt;&lt;</operator> <literal type="number" pos:start="263:70" pos:end="263:71">15</literal><operator pos:start="263:72" pos:end="263:72">)</operator><operator pos:start="263:73" pos:end="263:73">)</operator> <operator pos:start="263:75" pos:end="263:76">!=</operator> <literal type="number" pos:start="263:78" pos:end="263:78">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="265:13" pos:end="265:79"><expr pos:start="265:13" pos:end="265:78"><name pos:start="265:13" pos:end="265:43"><name pos:start="265:13" pos:end="265:13">s</name><operator pos:start="265:14" pos:end="265:15">-&gt;</operator><name pos:start="265:16" pos:end="265:26">sec_vectors</name><index pos:start="265:27" pos:end="265:43">[<expr pos:start="265:28" pos:end="265:42"><name pos:start="265:28" pos:end="265:42">ARMV7M_EXCP_MEM</name></expr>]</index></name><operator pos:start="265:44" pos:end="265:44">.</operator><name pos:start="265:45" pos:end="265:51">enabled</name> <operator pos:start="265:53" pos:end="265:53">=</operator> <operator pos:start="265:55" pos:end="265:55">(</operator><name pos:start="265:56" pos:end="265:60">value</name> <operator pos:start="265:62" pos:end="265:62">&amp;</operator> <operator pos:start="265:64" pos:end="265:64">(</operator><literal type="number" pos:start="265:65" pos:end="265:65">1</literal> <operator pos:start="265:67" pos:end="265:68">&lt;&lt;</operator> <literal type="number" pos:start="265:70" pos:end="265:71">16</literal><operator pos:start="265:72" pos:end="265:72">)</operator><operator pos:start="265:73" pos:end="265:73">)</operator> <operator pos:start="265:75" pos:end="265:76">!=</operator> <literal type="number" pos:start="265:78" pos:end="265:78">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="267:13" pos:end="267:79"><expr pos:start="267:13" pos:end="267:78"><name pos:start="267:13" pos:end="267:43"><name pos:start="267:13" pos:end="267:13">s</name><operator pos:start="267:14" pos:end="267:15">-&gt;</operator><name pos:start="267:16" pos:end="267:26">sec_vectors</name><index pos:start="267:27" pos:end="267:43">[<expr pos:start="267:28" pos:end="267:42"><name pos:start="267:28" pos:end="267:42">ARMV7M_EXCP_BUS</name></expr>]</index></name><operator pos:start="267:44" pos:end="267:44">.</operator><name pos:start="267:45" pos:end="267:51">enabled</name> <operator pos:start="267:53" pos:end="267:53">=</operator> <operator pos:start="267:55" pos:end="267:55">(</operator><name pos:start="267:56" pos:end="267:60">value</name> <operator pos:start="267:62" pos:end="267:62">&amp;</operator> <operator pos:start="267:64" pos:end="267:64">(</operator><literal type="number" pos:start="267:65" pos:end="267:65">1</literal> <operator pos:start="267:67" pos:end="267:68">&lt;&lt;</operator> <literal type="number" pos:start="267:70" pos:end="267:71">17</literal><operator pos:start="267:72" pos:end="267:72">)</operator><operator pos:start="267:73" pos:end="267:73">)</operator> <operator pos:start="267:75" pos:end="267:76">!=</operator> <literal type="number" pos:start="267:78" pos:end="267:78">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="269:13" pos:end="271:41"><expr pos:start="269:13" pos:end="271:40"><name pos:start="269:13" pos:end="269:45"><name pos:start="269:13" pos:end="269:13">s</name><operator pos:start="269:14" pos:end="269:15">-&gt;</operator><name pos:start="269:16" pos:end="269:26">sec_vectors</name><index pos:start="269:27" pos:end="269:45">[<expr pos:start="269:28" pos:end="269:44"><name pos:start="269:28" pos:end="269:44">ARMV7M_EXCP_USAGE</name></expr>]</index></name><operator pos:start="269:46" pos:end="269:46">.</operator><name pos:start="269:47" pos:end="269:53">enabled</name> <operator pos:start="269:55" pos:end="269:55">=</operator>

                <operator pos:start="271:17" pos:end="271:17">(</operator><name pos:start="271:18" pos:end="271:22">value</name> <operator pos:start="271:24" pos:end="271:24">&amp;</operator> <operator pos:start="271:26" pos:end="271:26">(</operator><literal type="number" pos:start="271:27" pos:end="271:27">1</literal> <operator pos:start="271:29" pos:end="271:30">&lt;&lt;</operator> <literal type="number" pos:start="271:32" pos:end="271:33">18</literal><operator pos:start="271:34" pos:end="271:34">)</operator><operator pos:start="271:35" pos:end="271:35">)</operator> <operator pos:start="271:37" pos:end="271:38">!=</operator> <literal type="number" pos:start="271:40" pos:end="271:40">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="273:13" pos:end="273:80"><expr pos:start="273:13" pos:end="273:79"><name pos:start="273:13" pos:end="273:44"><name pos:start="273:13" pos:end="273:13">s</name><operator pos:start="273:14" pos:end="273:15">-&gt;</operator><name pos:start="273:16" pos:end="273:26">sec_vectors</name><index pos:start="273:27" pos:end="273:44">[<expr pos:start="273:28" pos:end="273:43"><name pos:start="273:28" pos:end="273:43">ARMV7M_EXCP_HARD</name></expr>]</index></name><operator pos:start="273:45" pos:end="273:45">.</operator><name pos:start="273:46" pos:end="273:52">pending</name> <operator pos:start="273:54" pos:end="273:54">=</operator> <operator pos:start="273:56" pos:end="273:56">(</operator><name pos:start="273:57" pos:end="273:61">value</name> <operator pos:start="273:63" pos:end="273:63">&amp;</operator> <operator pos:start="273:65" pos:end="273:65">(</operator><literal type="number" pos:start="273:66" pos:end="273:66">1</literal> <operator pos:start="273:68" pos:end="273:69">&lt;&lt;</operator> <literal type="number" pos:start="273:71" pos:end="273:72">21</literal><operator pos:start="273:73" pos:end="273:73">)</operator><operator pos:start="273:74" pos:end="273:74">)</operator> <operator pos:start="273:76" pos:end="273:77">!=</operator> <literal type="number" pos:start="273:79" pos:end="273:79">0</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="275:13" pos:end="275:58">/* SecureFault not banked, but RAZ/WI to NS */</comment>

            <expr_stmt pos:start="277:13" pos:end="277:76"><expr pos:start="277:13" pos:end="277:75"><name pos:start="277:13" pos:end="277:42"><name pos:start="277:13" pos:end="277:13">s</name><operator pos:start="277:14" pos:end="277:15">-&gt;</operator><name pos:start="277:16" pos:end="277:22">vectors</name><index pos:start="277:23" pos:end="277:42">[<expr pos:start="277:24" pos:end="277:41"><name pos:start="277:24" pos:end="277:41">ARMV7M_EXCP_SECURE</name></expr>]</index></name><operator pos:start="277:43" pos:end="277:43">.</operator><name pos:start="277:44" pos:end="277:49">active</name> <operator pos:start="277:51" pos:end="277:51">=</operator> <operator pos:start="277:53" pos:end="277:53">(</operator><name pos:start="277:54" pos:end="277:58">value</name> <operator pos:start="277:60" pos:end="277:60">&amp;</operator> <operator pos:start="277:62" pos:end="277:62">(</operator><literal type="number" pos:start="277:63" pos:end="277:63">1</literal> <operator pos:start="277:65" pos:end="277:66">&lt;&lt;</operator> <literal type="number" pos:start="277:68" pos:end="277:68">4</literal><operator pos:start="277:69" pos:end="277:69">)</operator><operator pos:start="277:70" pos:end="277:70">)</operator> <operator pos:start="277:72" pos:end="277:73">!=</operator> <literal type="number" pos:start="277:75" pos:end="277:75">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="279:13" pos:end="279:78"><expr pos:start="279:13" pos:end="279:77"><name pos:start="279:13" pos:end="279:42"><name pos:start="279:13" pos:end="279:13">s</name><operator pos:start="279:14" pos:end="279:15">-&gt;</operator><name pos:start="279:16" pos:end="279:22">vectors</name><index pos:start="279:23" pos:end="279:42">[<expr pos:start="279:24" pos:end="279:41"><name pos:start="279:24" pos:end="279:41">ARMV7M_EXCP_SECURE</name></expr>]</index></name><operator pos:start="279:43" pos:end="279:43">.</operator><name pos:start="279:44" pos:end="279:50">enabled</name> <operator pos:start="279:52" pos:end="279:52">=</operator> <operator pos:start="279:54" pos:end="279:54">(</operator><name pos:start="279:55" pos:end="279:59">value</name> <operator pos:start="279:61" pos:end="279:61">&amp;</operator> <operator pos:start="279:63" pos:end="279:63">(</operator><literal type="number" pos:start="279:64" pos:end="279:64">1</literal> <operator pos:start="279:66" pos:end="279:67">&lt;&lt;</operator> <literal type="number" pos:start="279:69" pos:end="279:70">19</literal><operator pos:start="279:71" pos:end="279:71">)</operator><operator pos:start="279:72" pos:end="279:72">)</operator> <operator pos:start="279:74" pos:end="279:75">!=</operator> <literal type="number" pos:start="279:77" pos:end="279:77">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="281:13" pos:end="281:78"><expr pos:start="281:13" pos:end="281:77"><name pos:start="281:13" pos:end="281:42"><name pos:start="281:13" pos:end="281:13">s</name><operator pos:start="281:14" pos:end="281:15">-&gt;</operator><name pos:start="281:16" pos:end="281:22">vectors</name><index pos:start="281:23" pos:end="281:42">[<expr pos:start="281:24" pos:end="281:41"><name pos:start="281:24" pos:end="281:41">ARMV7M_EXCP_SECURE</name></expr>]</index></name><operator pos:start="281:43" pos:end="281:43">.</operator><name pos:start="281:44" pos:end="281:50">pending</name> <operator pos:start="281:52" pos:end="281:52">=</operator> <operator pos:start="281:54" pos:end="281:54">(</operator><name pos:start="281:55" pos:end="281:59">value</name> <operator pos:start="281:61" pos:end="281:61">&amp;</operator> <operator pos:start="281:63" pos:end="281:63">(</operator><literal type="number" pos:start="281:64" pos:end="281:64">1</literal> <operator pos:start="281:66" pos:end="281:67">&lt;&lt;</operator> <literal type="number" pos:start="281:69" pos:end="281:70">20</literal><operator pos:start="281:71" pos:end="281:71">)</operator><operator pos:start="281:72" pos:end="281:72">)</operator> <operator pos:start="281:74" pos:end="281:75">!=</operator> <literal type="number" pos:start="281:77" pos:end="281:77">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="283:11" pos:end="313:9">else <block pos:start="283:16" pos:end="313:9">{<block_content pos:start="285:13" pos:end="311:77">

            <expr_stmt pos:start="285:13" pos:end="285:73"><expr pos:start="285:13" pos:end="285:72"><name pos:start="285:13" pos:end="285:39"><name pos:start="285:13" pos:end="285:13">s</name><operator pos:start="285:14" pos:end="285:15">-&gt;</operator><name pos:start="285:16" pos:end="285:22">vectors</name><index pos:start="285:23" pos:end="285:39">[<expr pos:start="285:24" pos:end="285:38"><name pos:start="285:24" pos:end="285:38">ARMV7M_EXCP_MEM</name></expr>]</index></name><operator pos:start="285:40" pos:end="285:40">.</operator><name pos:start="285:41" pos:end="285:46">active</name> <operator pos:start="285:48" pos:end="285:48">=</operator> <operator pos:start="285:50" pos:end="285:50">(</operator><name pos:start="285:51" pos:end="285:55">value</name> <operator pos:start="285:57" pos:end="285:57">&amp;</operator> <operator pos:start="285:59" pos:end="285:59">(</operator><literal type="number" pos:start="285:60" pos:end="285:60">1</literal> <operator pos:start="285:62" pos:end="285:63">&lt;&lt;</operator> <literal type="number" pos:start="285:65" pos:end="285:65">0</literal><operator pos:start="285:66" pos:end="285:66">)</operator><operator pos:start="285:67" pos:end="285:67">)</operator> <operator pos:start="285:69" pos:end="285:70">!=</operator> <literal type="number" pos:start="285:72" pos:end="285:72">0</literal></expr>;</expr_stmt>

            <if_stmt pos:start="287:13" pos:end="293:13"><if pos:start="287:13" pos:end="293:13">if <condition pos:start="287:16" pos:end="287:55">(<expr pos:start="287:17" pos:end="287:54"><call pos:start="287:17" pos:end="287:54"><name pos:start="287:17" pos:end="287:27">arm_feature</name><argument_list pos:start="287:28" pos:end="287:54">(<argument pos:start="287:29" pos:end="287:37"><expr pos:start="287:29" pos:end="287:37"><operator pos:start="287:29" pos:end="287:29">&amp;</operator><name pos:start="287:30" pos:end="287:37"><name pos:start="287:30" pos:end="287:32">cpu</name><operator pos:start="287:33" pos:end="287:34">-&gt;</operator><name pos:start="287:35" pos:end="287:37">env</name></name></expr></argument>, <argument pos:start="287:40" pos:end="287:53"><expr pos:start="287:40" pos:end="287:53"><name pos:start="287:40" pos:end="287:53">ARM_FEATURE_V8</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="287:57" pos:end="293:13">{<block_content pos:start="291:17" pos:end="291:80">

                <comment type="block" pos:start="289:17" pos:end="289:59">/* HARDFAULTPENDED is not present in v7M */</comment>

                <expr_stmt pos:start="291:17" pos:end="291:80"><expr pos:start="291:17" pos:end="291:79"><name pos:start="291:17" pos:end="291:44"><name pos:start="291:17" pos:end="291:17">s</name><operator pos:start="291:18" pos:end="291:19">-&gt;</operator><name pos:start="291:20" pos:end="291:26">vectors</name><index pos:start="291:27" pos:end="291:44">[<expr pos:start="291:28" pos:end="291:43"><name pos:start="291:28" pos:end="291:43">ARMV7M_EXCP_HARD</name></expr>]</index></name><operator pos:start="291:45" pos:end="291:45">.</operator><name pos:start="291:46" pos:end="291:52">pending</name> <operator pos:start="291:54" pos:end="291:54">=</operator> <operator pos:start="291:56" pos:end="291:56">(</operator><name pos:start="291:57" pos:end="291:61">value</name> <operator pos:start="291:63" pos:end="291:63">&amp;</operator> <operator pos:start="291:65" pos:end="291:65">(</operator><literal type="number" pos:start="291:66" pos:end="291:66">1</literal> <operator pos:start="291:68" pos:end="291:69">&lt;&lt;</operator> <literal type="number" pos:start="291:71" pos:end="291:72">21</literal><operator pos:start="291:73" pos:end="291:73">)</operator><operator pos:start="291:74" pos:end="291:74">)</operator> <operator pos:start="291:76" pos:end="291:77">!=</operator> <literal type="number" pos:start="291:79" pos:end="291:79">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="295:13" pos:end="295:75"><expr pos:start="295:13" pos:end="295:74"><name pos:start="295:13" pos:end="295:41"><name pos:start="295:13" pos:end="295:13">s</name><operator pos:start="295:14" pos:end="295:15">-&gt;</operator><name pos:start="295:16" pos:end="295:22">vectors</name><index pos:start="295:23" pos:end="295:41">[<expr pos:start="295:24" pos:end="295:40"><name pos:start="295:24" pos:end="295:40">ARMV7M_EXCP_USAGE</name></expr>]</index></name><operator pos:start="295:42" pos:end="295:42">.</operator><name pos:start="295:43" pos:end="295:48">active</name> <operator pos:start="295:50" pos:end="295:50">=</operator> <operator pos:start="295:52" pos:end="295:52">(</operator><name pos:start="295:53" pos:end="295:57">value</name> <operator pos:start="295:59" pos:end="295:59">&amp;</operator> <operator pos:start="295:61" pos:end="295:61">(</operator><literal type="number" pos:start="295:62" pos:end="295:62">1</literal> <operator pos:start="295:64" pos:end="295:65">&lt;&lt;</operator> <literal type="number" pos:start="295:67" pos:end="295:67">3</literal><operator pos:start="295:68" pos:end="295:68">)</operator><operator pos:start="295:69" pos:end="295:69">)</operator> <operator pos:start="295:71" pos:end="295:72">!=</operator> <literal type="number" pos:start="295:74" pos:end="295:74">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="297:13" pos:end="297:73"><expr pos:start="297:13" pos:end="297:72"><name pos:start="297:13" pos:end="297:39"><name pos:start="297:13" pos:end="297:13">s</name><operator pos:start="297:14" pos:end="297:15">-&gt;</operator><name pos:start="297:16" pos:end="297:22">vectors</name><index pos:start="297:23" pos:end="297:39">[<expr pos:start="297:24" pos:end="297:38"><name pos:start="297:24" pos:end="297:38">ARMV7M_EXCP_SVC</name></expr>]</index></name><operator pos:start="297:40" pos:end="297:40">.</operator><name pos:start="297:41" pos:end="297:46">active</name> <operator pos:start="297:48" pos:end="297:48">=</operator> <operator pos:start="297:50" pos:end="297:50">(</operator><name pos:start="297:51" pos:end="297:55">value</name> <operator pos:start="297:57" pos:end="297:57">&amp;</operator> <operator pos:start="297:59" pos:end="297:59">(</operator><literal type="number" pos:start="297:60" pos:end="297:60">1</literal> <operator pos:start="297:62" pos:end="297:63">&lt;&lt;</operator> <literal type="number" pos:start="297:65" pos:end="297:65">7</literal><operator pos:start="297:66" pos:end="297:66">)</operator><operator pos:start="297:67" pos:end="297:67">)</operator> <operator pos:start="297:69" pos:end="297:70">!=</operator> <literal type="number" pos:start="297:72" pos:end="297:72">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="299:13" pos:end="299:77"><expr pos:start="299:13" pos:end="299:76"><name pos:start="299:13" pos:end="299:42"><name pos:start="299:13" pos:end="299:13">s</name><operator pos:start="299:14" pos:end="299:15">-&gt;</operator><name pos:start="299:16" pos:end="299:22">vectors</name><index pos:start="299:23" pos:end="299:42">[<expr pos:start="299:24" pos:end="299:41"><name pos:start="299:24" pos:end="299:41">ARMV7M_EXCP_PENDSV</name></expr>]</index></name><operator pos:start="299:43" pos:end="299:43">.</operator><name pos:start="299:44" pos:end="299:49">active</name> <operator pos:start="299:51" pos:end="299:51">=</operator> <operator pos:start="299:53" pos:end="299:53">(</operator><name pos:start="299:54" pos:end="299:58">value</name> <operator pos:start="299:60" pos:end="299:60">&amp;</operator> <operator pos:start="299:62" pos:end="299:62">(</operator><literal type="number" pos:start="299:63" pos:end="299:63">1</literal> <operator pos:start="299:65" pos:end="299:66">&lt;&lt;</operator> <literal type="number" pos:start="299:68" pos:end="299:69">10</literal><operator pos:start="299:70" pos:end="299:70">)</operator><operator pos:start="299:71" pos:end="299:71">)</operator> <operator pos:start="299:73" pos:end="299:74">!=</operator> <literal type="number" pos:start="299:76" pos:end="299:76">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="301:13" pos:end="301:78"><expr pos:start="301:13" pos:end="301:77"><name pos:start="301:13" pos:end="301:43"><name pos:start="301:13" pos:end="301:13">s</name><operator pos:start="301:14" pos:end="301:15">-&gt;</operator><name pos:start="301:16" pos:end="301:22">vectors</name><index pos:start="301:23" pos:end="301:43">[<expr pos:start="301:24" pos:end="301:42"><name pos:start="301:24" pos:end="301:42">ARMV7M_EXCP_SYSTICK</name></expr>]</index></name><operator pos:start="301:44" pos:end="301:44">.</operator><name pos:start="301:45" pos:end="301:50">active</name> <operator pos:start="301:52" pos:end="301:52">=</operator> <operator pos:start="301:54" pos:end="301:54">(</operator><name pos:start="301:55" pos:end="301:59">value</name> <operator pos:start="301:61" pos:end="301:61">&amp;</operator> <operator pos:start="301:63" pos:end="301:63">(</operator><literal type="number" pos:start="301:64" pos:end="301:64">1</literal> <operator pos:start="301:66" pos:end="301:67">&lt;&lt;</operator> <literal type="number" pos:start="301:69" pos:end="301:70">11</literal><operator pos:start="301:71" pos:end="301:71">)</operator><operator pos:start="301:72" pos:end="301:72">)</operator> <operator pos:start="301:74" pos:end="301:75">!=</operator> <literal type="number" pos:start="301:77" pos:end="301:77">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="303:13" pos:end="303:77"><expr pos:start="303:13" pos:end="303:76"><name pos:start="303:13" pos:end="303:41"><name pos:start="303:13" pos:end="303:13">s</name><operator pos:start="303:14" pos:end="303:15">-&gt;</operator><name pos:start="303:16" pos:end="303:22">vectors</name><index pos:start="303:23" pos:end="303:41">[<expr pos:start="303:24" pos:end="303:40"><name pos:start="303:24" pos:end="303:40">ARMV7M_EXCP_USAGE</name></expr>]</index></name><operator pos:start="303:42" pos:end="303:42">.</operator><name pos:start="303:43" pos:end="303:49">pending</name> <operator pos:start="303:51" pos:end="303:51">=</operator> <operator pos:start="303:53" pos:end="303:53">(</operator><name pos:start="303:54" pos:end="303:58">value</name> <operator pos:start="303:60" pos:end="303:60">&amp;</operator> <operator pos:start="303:62" pos:end="303:62">(</operator><literal type="number" pos:start="303:63" pos:end="303:63">1</literal> <operator pos:start="303:65" pos:end="303:66">&lt;&lt;</operator> <literal type="number" pos:start="303:68" pos:end="303:69">12</literal><operator pos:start="303:70" pos:end="303:70">)</operator><operator pos:start="303:71" pos:end="303:71">)</operator> <operator pos:start="303:73" pos:end="303:74">!=</operator> <literal type="number" pos:start="303:76" pos:end="303:76">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="305:13" pos:end="305:75"><expr pos:start="305:13" pos:end="305:74"><name pos:start="305:13" pos:end="305:39"><name pos:start="305:13" pos:end="305:13">s</name><operator pos:start="305:14" pos:end="305:15">-&gt;</operator><name pos:start="305:16" pos:end="305:22">vectors</name><index pos:start="305:23" pos:end="305:39">[<expr pos:start="305:24" pos:end="305:38"><name pos:start="305:24" pos:end="305:38">ARMV7M_EXCP_MEM</name></expr>]</index></name><operator pos:start="305:40" pos:end="305:40">.</operator><name pos:start="305:41" pos:end="305:47">pending</name> <operator pos:start="305:49" pos:end="305:49">=</operator> <operator pos:start="305:51" pos:end="305:51">(</operator><name pos:start="305:52" pos:end="305:56">value</name> <operator pos:start="305:58" pos:end="305:58">&amp;</operator> <operator pos:start="305:60" pos:end="305:60">(</operator><literal type="number" pos:start="305:61" pos:end="305:61">1</literal> <operator pos:start="305:63" pos:end="305:64">&lt;&lt;</operator> <literal type="number" pos:start="305:66" pos:end="305:67">13</literal><operator pos:start="305:68" pos:end="305:68">)</operator><operator pos:start="305:69" pos:end="305:69">)</operator> <operator pos:start="305:71" pos:end="305:72">!=</operator> <literal type="number" pos:start="305:74" pos:end="305:74">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="307:13" pos:end="307:75"><expr pos:start="307:13" pos:end="307:74"><name pos:start="307:13" pos:end="307:39"><name pos:start="307:13" pos:end="307:13">s</name><operator pos:start="307:14" pos:end="307:15">-&gt;</operator><name pos:start="307:16" pos:end="307:22">vectors</name><index pos:start="307:23" pos:end="307:39">[<expr pos:start="307:24" pos:end="307:38"><name pos:start="307:24" pos:end="307:38">ARMV7M_EXCP_SVC</name></expr>]</index></name><operator pos:start="307:40" pos:end="307:40">.</operator><name pos:start="307:41" pos:end="307:47">pending</name> <operator pos:start="307:49" pos:end="307:49">=</operator> <operator pos:start="307:51" pos:end="307:51">(</operator><name pos:start="307:52" pos:end="307:56">value</name> <operator pos:start="307:58" pos:end="307:58">&amp;</operator> <operator pos:start="307:60" pos:end="307:60">(</operator><literal type="number" pos:start="307:61" pos:end="307:61">1</literal> <operator pos:start="307:63" pos:end="307:64">&lt;&lt;</operator> <literal type="number" pos:start="307:66" pos:end="307:67">15</literal><operator pos:start="307:68" pos:end="307:68">)</operator><operator pos:start="307:69" pos:end="307:69">)</operator> <operator pos:start="307:71" pos:end="307:72">!=</operator> <literal type="number" pos:start="307:74" pos:end="307:74">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="309:13" pos:end="309:75"><expr pos:start="309:13" pos:end="309:74"><name pos:start="309:13" pos:end="309:39"><name pos:start="309:13" pos:end="309:13">s</name><operator pos:start="309:14" pos:end="309:15">-&gt;</operator><name pos:start="309:16" pos:end="309:22">vectors</name><index pos:start="309:23" pos:end="309:39">[<expr pos:start="309:24" pos:end="309:38"><name pos:start="309:24" pos:end="309:38">ARMV7M_EXCP_MEM</name></expr>]</index></name><operator pos:start="309:40" pos:end="309:40">.</operator><name pos:start="309:41" pos:end="309:47">enabled</name> <operator pos:start="309:49" pos:end="309:49">=</operator> <operator pos:start="309:51" pos:end="309:51">(</operator><name pos:start="309:52" pos:end="309:56">value</name> <operator pos:start="309:58" pos:end="309:58">&amp;</operator> <operator pos:start="309:60" pos:end="309:60">(</operator><literal type="number" pos:start="309:61" pos:end="309:61">1</literal> <operator pos:start="309:63" pos:end="309:64">&lt;&lt;</operator> <literal type="number" pos:start="309:66" pos:end="309:67">16</literal><operator pos:start="309:68" pos:end="309:68">)</operator><operator pos:start="309:69" pos:end="309:69">)</operator> <operator pos:start="309:71" pos:end="309:72">!=</operator> <literal type="number" pos:start="309:74" pos:end="309:74">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="311:13" pos:end="311:77"><expr pos:start="311:13" pos:end="311:76"><name pos:start="311:13" pos:end="311:41"><name pos:start="311:13" pos:end="311:13">s</name><operator pos:start="311:14" pos:end="311:15">-&gt;</operator><name pos:start="311:16" pos:end="311:22">vectors</name><index pos:start="311:23" pos:end="311:41">[<expr pos:start="311:24" pos:end="311:40"><name pos:start="311:24" pos:end="311:40">ARMV7M_EXCP_USAGE</name></expr>]</index></name><operator pos:start="311:42" pos:end="311:42">.</operator><name pos:start="311:43" pos:end="311:49">enabled</name> <operator pos:start="311:51" pos:end="311:51">=</operator> <operator pos:start="311:53" pos:end="311:53">(</operator><name pos:start="311:54" pos:end="311:58">value</name> <operator pos:start="311:60" pos:end="311:60">&amp;</operator> <operator pos:start="311:62" pos:end="311:62">(</operator><literal type="number" pos:start="311:63" pos:end="311:63">1</literal> <operator pos:start="311:65" pos:end="311:66">&lt;&lt;</operator> <literal type="number" pos:start="311:68" pos:end="311:69">18</literal><operator pos:start="311:70" pos:end="311:70">)</operator><operator pos:start="311:71" pos:end="311:71">)</operator> <operator pos:start="311:73" pos:end="311:74">!=</operator> <literal type="number" pos:start="311:76" pos:end="311:76">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="315:9" pos:end="323:9"><if pos:start="315:9" pos:end="323:9">if <condition pos:start="315:12" pos:end="315:78">(<expr pos:start="315:13" pos:end="315:77"><name pos:start="315:13" pos:end="315:24"><name pos:start="315:13" pos:end="315:17">attrs</name><operator pos:start="315:18" pos:end="315:18">.</operator><name pos:start="315:19" pos:end="315:24">secure</name></name> <operator pos:start="315:26" pos:end="315:27">||</operator> <operator pos:start="315:29" pos:end="315:29">(</operator><name pos:start="315:30" pos:end="315:47"><name pos:start="315:30" pos:end="315:32">cpu</name><operator pos:start="315:33" pos:end="315:34">-&gt;</operator><name pos:start="315:35" pos:end="315:37">env</name><operator pos:start="315:38" pos:end="315:38">.</operator><name pos:start="315:39" pos:end="315:41">v7m</name><operator pos:start="315:42" pos:end="315:42">.</operator><name pos:start="315:43" pos:end="315:47">aircr</name></name> <operator pos:start="315:49" pos:end="315:49">&amp;</operator> <name pos:start="315:51" pos:end="315:76">R_V7M_AIRCR_BFHFNMINS_MASK</name><operator pos:start="315:77" pos:end="315:77">)</operator></expr>)</condition> <block pos:start="315:80" pos:end="323:9">{<block_content pos:start="317:13" pos:end="321:75">

            <expr_stmt pos:start="317:13" pos:end="317:73"><expr pos:start="317:13" pos:end="317:72"><name pos:start="317:13" pos:end="317:39"><name pos:start="317:13" pos:end="317:13">s</name><operator pos:start="317:14" pos:end="317:15">-&gt;</operator><name pos:start="317:16" pos:end="317:22">vectors</name><index pos:start="317:23" pos:end="317:39">[<expr pos:start="317:24" pos:end="317:38"><name pos:start="317:24" pos:end="317:38">ARMV7M_EXCP_BUS</name></expr>]</index></name><operator pos:start="317:40" pos:end="317:40">.</operator><name pos:start="317:41" pos:end="317:46">active</name> <operator pos:start="317:48" pos:end="317:48">=</operator> <operator pos:start="317:50" pos:end="317:50">(</operator><name pos:start="317:51" pos:end="317:55">value</name> <operator pos:start="317:57" pos:end="317:57">&amp;</operator> <operator pos:start="317:59" pos:end="317:59">(</operator><literal type="number" pos:start="317:60" pos:end="317:60">1</literal> <operator pos:start="317:62" pos:end="317:63">&lt;&lt;</operator> <literal type="number" pos:start="317:65" pos:end="317:65">1</literal><operator pos:start="317:66" pos:end="317:66">)</operator><operator pos:start="317:67" pos:end="317:67">)</operator> <operator pos:start="317:69" pos:end="317:70">!=</operator> <literal type="number" pos:start="317:72" pos:end="317:72">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="319:13" pos:end="319:75"><expr pos:start="319:13" pos:end="319:74"><name pos:start="319:13" pos:end="319:39"><name pos:start="319:13" pos:end="319:13">s</name><operator pos:start="319:14" pos:end="319:15">-&gt;</operator><name pos:start="319:16" pos:end="319:22">vectors</name><index pos:start="319:23" pos:end="319:39">[<expr pos:start="319:24" pos:end="319:38"><name pos:start="319:24" pos:end="319:38">ARMV7M_EXCP_BUS</name></expr>]</index></name><operator pos:start="319:40" pos:end="319:40">.</operator><name pos:start="319:41" pos:end="319:47">pending</name> <operator pos:start="319:49" pos:end="319:49">=</operator> <operator pos:start="319:51" pos:end="319:51">(</operator><name pos:start="319:52" pos:end="319:56">value</name> <operator pos:start="319:58" pos:end="319:58">&amp;</operator> <operator pos:start="319:60" pos:end="319:60">(</operator><literal type="number" pos:start="319:61" pos:end="319:61">1</literal> <operator pos:start="319:63" pos:end="319:64">&lt;&lt;</operator> <literal type="number" pos:start="319:66" pos:end="319:67">14</literal><operator pos:start="319:68" pos:end="319:68">)</operator><operator pos:start="319:69" pos:end="319:69">)</operator> <operator pos:start="319:71" pos:end="319:72">!=</operator> <literal type="number" pos:start="319:74" pos:end="319:74">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="321:13" pos:end="321:75"><expr pos:start="321:13" pos:end="321:74"><name pos:start="321:13" pos:end="321:39"><name pos:start="321:13" pos:end="321:13">s</name><operator pos:start="321:14" pos:end="321:15">-&gt;</operator><name pos:start="321:16" pos:end="321:22">vectors</name><index pos:start="321:23" pos:end="321:39">[<expr pos:start="321:24" pos:end="321:38"><name pos:start="321:24" pos:end="321:38">ARMV7M_EXCP_BUS</name></expr>]</index></name><operator pos:start="321:40" pos:end="321:40">.</operator><name pos:start="321:41" pos:end="321:47">enabled</name> <operator pos:start="321:49" pos:end="321:49">=</operator> <operator pos:start="321:51" pos:end="321:51">(</operator><name pos:start="321:52" pos:end="321:56">value</name> <operator pos:start="321:58" pos:end="321:58">&amp;</operator> <operator pos:start="321:60" pos:end="321:60">(</operator><literal type="number" pos:start="321:61" pos:end="321:61">1</literal> <operator pos:start="321:63" pos:end="321:64">&lt;&lt;</operator> <literal type="number" pos:start="321:66" pos:end="321:67">17</literal><operator pos:start="321:68" pos:end="321:68">)</operator><operator pos:start="321:69" pos:end="321:69">)</operator> <operator pos:start="321:71" pos:end="321:72">!=</operator> <literal type="number" pos:start="321:74" pos:end="321:74">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="325:9" pos:end="329:11">/* NMIACT can only be written if the write is of a zero, with

         * BFHFNMINS 1, and by the CPU in secure state via the NS alias.

         */</comment>

        <if_stmt pos:start="331:9" pos:end="339:9"><if pos:start="331:9" pos:end="339:9">if <condition pos:start="331:12" pos:end="335:36">(<expr pos:start="331:13" pos:end="335:35"><operator pos:start="331:13" pos:end="331:13">!</operator><name pos:start="331:14" pos:end="331:25"><name pos:start="331:14" pos:end="331:18">attrs</name><operator pos:start="331:19" pos:end="331:19">.</operator><name pos:start="331:20" pos:end="331:25">secure</name></name> <operator pos:start="331:27" pos:end="331:28">&amp;&amp;</operator> <name pos:start="331:30" pos:end="331:48"><name pos:start="331:30" pos:end="331:32">cpu</name><operator pos:start="331:33" pos:end="331:34">-&gt;</operator><name pos:start="331:35" pos:end="331:37">env</name><operator pos:start="331:38" pos:end="331:38">.</operator><name pos:start="331:39" pos:end="331:41">v7m</name><operator pos:start="331:42" pos:end="331:42">.</operator><name pos:start="331:43" pos:end="331:48">secure</name></name> <operator pos:start="331:50" pos:end="331:51">&amp;&amp;</operator>

            <operator pos:start="333:13" pos:end="333:13">(</operator><name pos:start="333:14" pos:end="333:31"><name pos:start="333:14" pos:end="333:16">cpu</name><operator pos:start="333:17" pos:end="333:18">-&gt;</operator><name pos:start="333:19" pos:end="333:21">env</name><operator pos:start="333:22" pos:end="333:22">.</operator><name pos:start="333:23" pos:end="333:25">v7m</name><operator pos:start="333:26" pos:end="333:26">.</operator><name pos:start="333:27" pos:end="333:31">aircr</name></name> <operator pos:start="333:33" pos:end="333:33">&amp;</operator> <name pos:start="333:35" pos:end="333:60">R_V7M_AIRCR_BFHFNMINS_MASK</name><operator pos:start="333:61" pos:end="333:61">)</operator> <operator pos:start="333:63" pos:end="333:64">&amp;&amp;</operator>

            <operator pos:start="335:13" pos:end="335:13">(</operator><name pos:start="335:14" pos:end="335:18">value</name> <operator pos:start="335:20" pos:end="335:20">&amp;</operator> <operator pos:start="335:22" pos:end="335:22">(</operator><literal type="number" pos:start="335:23" pos:end="335:23">1</literal> <operator pos:start="335:25" pos:end="335:26">&lt;&lt;</operator> <literal type="number" pos:start="335:28" pos:end="335:28">5</literal><operator pos:start="335:29" pos:end="335:29">)</operator><operator pos:start="335:30" pos:end="335:30">)</operator> <operator pos:start="335:32" pos:end="335:33">==</operator> <literal type="number" pos:start="335:35" pos:end="335:35">0</literal></expr>)</condition> <block pos:start="335:38" pos:end="339:9">{<block_content pos:start="337:13" pos:end="337:51">

            <expr_stmt pos:start="337:13" pos:end="337:51"><expr pos:start="337:13" pos:end="337:50"><name pos:start="337:13" pos:end="337:39"><name pos:start="337:13" pos:end="337:13">s</name><operator pos:start="337:14" pos:end="337:15">-&gt;</operator><name pos:start="337:16" pos:end="337:22">vectors</name><index pos:start="337:23" pos:end="337:39">[<expr pos:start="337:24" pos:end="337:38"><name pos:start="337:24" pos:end="337:38">ARMV7M_EXCP_NMI</name></expr>]</index></name><operator pos:start="337:40" pos:end="337:40">.</operator><name pos:start="337:41" pos:end="337:46">active</name> <operator pos:start="337:48" pos:end="337:48">=</operator> <literal type="number" pos:start="337:50" pos:end="337:50">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="341:9" pos:end="351:11">/* HARDFAULTACT can only be written if the write is of a zero

         * to the non-secure HardFault state by the CPU in secure state.

         * The only case where we can be targeting the non-secure HF state

         * when in secure state is if this is a write via the NS alias

         * and BFHFNMINS is 1.

         */</comment>

        <if_stmt pos:start="353:9" pos:end="361:9"><if pos:start="353:9" pos:end="361:9">if <condition pos:start="353:12" pos:end="357:36">(<expr pos:start="353:13" pos:end="357:35"><operator pos:start="353:13" pos:end="353:13">!</operator><name pos:start="353:14" pos:end="353:25"><name pos:start="353:14" pos:end="353:18">attrs</name><operator pos:start="353:19" pos:end="353:19">.</operator><name pos:start="353:20" pos:end="353:25">secure</name></name> <operator pos:start="353:27" pos:end="353:28">&amp;&amp;</operator> <name pos:start="353:30" pos:end="353:48"><name pos:start="353:30" pos:end="353:32">cpu</name><operator pos:start="353:33" pos:end="353:34">-&gt;</operator><name pos:start="353:35" pos:end="353:37">env</name><operator pos:start="353:38" pos:end="353:38">.</operator><name pos:start="353:39" pos:end="353:41">v7m</name><operator pos:start="353:42" pos:end="353:42">.</operator><name pos:start="353:43" pos:end="353:48">secure</name></name> <operator pos:start="353:50" pos:end="353:51">&amp;&amp;</operator>

            <operator pos:start="355:13" pos:end="355:13">(</operator><name pos:start="355:14" pos:end="355:31"><name pos:start="355:14" pos:end="355:16">cpu</name><operator pos:start="355:17" pos:end="355:18">-&gt;</operator><name pos:start="355:19" pos:end="355:21">env</name><operator pos:start="355:22" pos:end="355:22">.</operator><name pos:start="355:23" pos:end="355:25">v7m</name><operator pos:start="355:26" pos:end="355:26">.</operator><name pos:start="355:27" pos:end="355:31">aircr</name></name> <operator pos:start="355:33" pos:end="355:33">&amp;</operator> <name pos:start="355:35" pos:end="355:60">R_V7M_AIRCR_BFHFNMINS_MASK</name><operator pos:start="355:61" pos:end="355:61">)</operator> <operator pos:start="355:63" pos:end="355:64">&amp;&amp;</operator>

            <operator pos:start="357:13" pos:end="357:13">(</operator><name pos:start="357:14" pos:end="357:18">value</name> <operator pos:start="357:20" pos:end="357:20">&amp;</operator> <operator pos:start="357:22" pos:end="357:22">(</operator><literal type="number" pos:start="357:23" pos:end="357:23">1</literal> <operator pos:start="357:25" pos:end="357:26">&lt;&lt;</operator> <literal type="number" pos:start="357:28" pos:end="357:28">2</literal><operator pos:start="357:29" pos:end="357:29">)</operator><operator pos:start="357:30" pos:end="357:30">)</operator> <operator pos:start="357:32" pos:end="357:33">==</operator> <literal type="number" pos:start="357:35" pos:end="357:35">0</literal></expr>)</condition> <block pos:start="357:38" pos:end="361:9">{<block_content pos:start="359:13" pos:end="359:52">

            <expr_stmt pos:start="359:13" pos:end="359:52"><expr pos:start="359:13" pos:end="359:51"><name pos:start="359:13" pos:end="359:40"><name pos:start="359:13" pos:end="359:13">s</name><operator pos:start="359:14" pos:end="359:15">-&gt;</operator><name pos:start="359:16" pos:end="359:22">vectors</name><index pos:start="359:23" pos:end="359:40">[<expr pos:start="359:24" pos:end="359:39"><name pos:start="359:24" pos:end="359:39">ARMV7M_EXCP_HARD</name></expr>]</index></name><operator pos:start="359:41" pos:end="359:41">.</operator><name pos:start="359:42" pos:end="359:47">active</name> <operator pos:start="359:49" pos:end="359:49">=</operator> <literal type="number" pos:start="359:51" pos:end="359:51">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="365:9" pos:end="365:63">/* TODO: this is RAZ/WI from NS if DEMCR.SDME is set */</comment>

        <expr_stmt pos:start="367:9" pos:end="367:71"><expr pos:start="367:9" pos:end="367:70"><name pos:start="367:9" pos:end="367:37"><name pos:start="367:9" pos:end="367:9">s</name><operator pos:start="367:10" pos:end="367:11">-&gt;</operator><name pos:start="367:12" pos:end="367:18">vectors</name><index pos:start="367:19" pos:end="367:37">[<expr pos:start="367:20" pos:end="367:36"><name pos:start="367:20" pos:end="367:36">ARMV7M_EXCP_DEBUG</name></expr>]</index></name><operator pos:start="367:38" pos:end="367:38">.</operator><name pos:start="367:39" pos:end="367:44">active</name> <operator pos:start="367:46" pos:end="367:46">=</operator> <operator pos:start="367:48" pos:end="367:48">(</operator><name pos:start="367:49" pos:end="367:53">value</name> <operator pos:start="367:55" pos:end="367:55">&amp;</operator> <operator pos:start="367:57" pos:end="367:57">(</operator><literal type="number" pos:start="367:58" pos:end="367:58">1</literal> <operator pos:start="367:60" pos:end="367:61">&lt;&lt;</operator> <literal type="number" pos:start="367:63" pos:end="367:63">8</literal><operator pos:start="367:64" pos:end="367:64">)</operator><operator pos:start="367:65" pos:end="367:65">)</operator> <operator pos:start="367:67" pos:end="367:68">!=</operator> <literal type="number" pos:start="367:70" pos:end="367:70">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="369:9" pos:end="369:27"><expr pos:start="369:9" pos:end="369:26"><call pos:start="369:9" pos:end="369:26"><name pos:start="369:9" pos:end="369:23">nvic_irq_update</name><argument_list pos:start="369:24" pos:end="369:26">(<argument pos:start="369:25" pos:end="369:25"><expr pos:start="369:25" pos:end="369:25"><name pos:start="369:25" pos:end="369:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="371:9" pos:end="371:14">break;</break>

    <case pos:start="373:5" pos:end="373:15">case <expr pos:start="373:10" pos:end="373:14"><literal type="number" pos:start="373:10" pos:end="373:14">0xd28</literal></expr>:</case> <comment type="block" pos:start="373:17" pos:end="373:49">/* Configurable Fault Status.  */</comment>

        <expr_stmt pos:start="375:9" pos:end="375:50"><expr pos:start="375:9" pos:end="375:49"><name pos:start="375:9" pos:end="375:39"><name pos:start="375:9" pos:end="375:11">cpu</name><operator pos:start="375:12" pos:end="375:13">-&gt;</operator><name pos:start="375:14" pos:end="375:16">env</name><operator pos:start="375:17" pos:end="375:17">.</operator><name pos:start="375:18" pos:end="375:20">v7m</name><operator pos:start="375:21" pos:end="375:21">.</operator><name pos:start="375:22" pos:end="375:25">cfsr</name><index pos:start="375:26" pos:end="375:39">[<expr pos:start="375:27" pos:end="375:38"><name pos:start="375:27" pos:end="375:38"><name pos:start="375:27" pos:end="375:31">attrs</name><operator pos:start="375:32" pos:end="375:32">.</operator><name pos:start="375:33" pos:end="375:38">secure</name></name></expr>]</index></name> <operator pos:start="375:41" pos:end="375:42">&amp;=</operator> <operator pos:start="375:44" pos:end="375:44">~</operator><name pos:start="375:45" pos:end="375:49">value</name></expr>;</expr_stmt> <comment type="block" pos:start="375:52" pos:end="375:60">/* W1C */</comment>

        <if_stmt pos:start="377:9" pos:end="387:9"><if pos:start="377:9" pos:end="387:9">if <condition pos:start="377:12" pos:end="377:25">(<expr pos:start="377:13" pos:end="377:24"><name pos:start="377:13" pos:end="377:24"><name pos:start="377:13" pos:end="377:17">attrs</name><operator pos:start="377:18" pos:end="377:18">.</operator><name pos:start="377:19" pos:end="377:24">secure</name></name></expr>)</condition> <block pos:start="377:27" pos:end="387:9">{<block_content pos:start="385:13" pos:end="385:75">

            <comment type="block" pos:start="379:13" pos:end="383:15">/* The BFSR bits [15:8] are shared between security states

             * and we store them in the NS copy.

             */</comment>

            <expr_stmt pos:start="385:13" pos:end="385:75"><expr pos:start="385:13" pos:end="385:74"><name pos:start="385:13" pos:end="385:39"><name pos:start="385:13" pos:end="385:15">cpu</name><operator pos:start="385:16" pos:end="385:17">-&gt;</operator><name pos:start="385:18" pos:end="385:20">env</name><operator pos:start="385:21" pos:end="385:21">.</operator><name pos:start="385:22" pos:end="385:24">v7m</name><operator pos:start="385:25" pos:end="385:25">.</operator><name pos:start="385:26" pos:end="385:29">cfsr</name><index pos:start="385:30" pos:end="385:39">[<expr pos:start="385:31" pos:end="385:38"><name pos:start="385:31" pos:end="385:38">M_REG_NS</name></expr>]</index></name> <operator pos:start="385:41" pos:end="385:42">&amp;=</operator> <operator pos:start="385:44" pos:end="385:44">~</operator><operator pos:start="385:45" pos:end="385:45">(</operator><name pos:start="385:46" pos:end="385:50">value</name> <operator pos:start="385:52" pos:end="385:52">&amp;</operator> <name pos:start="385:54" pos:end="385:73">R_V7M_CFSR_BFSR_MASK</name><operator pos:start="385:74" pos:end="385:74">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="389:9" pos:end="389:14">break;</break>

    <case pos:start="391:5" pos:end="391:15">case <expr pos:start="391:10" pos:end="391:14"><literal type="number" pos:start="391:10" pos:end="391:14">0xd2c</literal></expr>:</case> <comment type="block" pos:start="391:17" pos:end="391:41">/* Hard Fault Status.  */</comment>

        <expr_stmt pos:start="393:9" pos:end="393:36"><expr pos:start="393:9" pos:end="393:35"><name pos:start="393:9" pos:end="393:25"><name pos:start="393:9" pos:end="393:11">cpu</name><operator pos:start="393:12" pos:end="393:13">-&gt;</operator><name pos:start="393:14" pos:end="393:16">env</name><operator pos:start="393:17" pos:end="393:17">.</operator><name pos:start="393:18" pos:end="393:20">v7m</name><operator pos:start="393:21" pos:end="393:21">.</operator><name pos:start="393:22" pos:end="393:25">hfsr</name></name> <operator pos:start="393:27" pos:end="393:28">&amp;=</operator> <operator pos:start="393:30" pos:end="393:30">~</operator><name pos:start="393:31" pos:end="393:35">value</name></expr>;</expr_stmt> <comment type="block" pos:start="393:38" pos:end="393:46">/* W1C */</comment>

        <break pos:start="395:9" pos:end="395:14">break;</break>

    <case pos:start="397:5" pos:end="397:15">case <expr pos:start="397:10" pos:end="397:14"><literal type="number" pos:start="397:10" pos:end="397:14">0xd30</literal></expr>:</case> <comment type="block" pos:start="397:17" pos:end="397:42">/* Debug Fault Status.  */</comment>

        <expr_stmt pos:start="399:9" pos:end="399:36"><expr pos:start="399:9" pos:end="399:35"><name pos:start="399:9" pos:end="399:25"><name pos:start="399:9" pos:end="399:11">cpu</name><operator pos:start="399:12" pos:end="399:13">-&gt;</operator><name pos:start="399:14" pos:end="399:16">env</name><operator pos:start="399:17" pos:end="399:17">.</operator><name pos:start="399:18" pos:end="399:20">v7m</name><operator pos:start="399:21" pos:end="399:21">.</operator><name pos:start="399:22" pos:end="399:25">dfsr</name></name> <operator pos:start="399:27" pos:end="399:28">&amp;=</operator> <operator pos:start="399:30" pos:end="399:30">~</operator><name pos:start="399:31" pos:end="399:35">value</name></expr>;</expr_stmt> <comment type="block" pos:start="399:38" pos:end="399:46">/* W1C */</comment>

        <break pos:start="401:9" pos:end="401:14">break;</break>

    <case pos:start="403:5" pos:end="403:15">case <expr pos:start="403:10" pos:end="403:14"><literal type="number" pos:start="403:10" pos:end="403:14">0xd34</literal></expr>:</case> <comment type="block" pos:start="403:17" pos:end="403:42">/* Mem Manage Address.  */</comment>

        <expr_stmt pos:start="405:9" pos:end="405:49"><expr pos:start="405:9" pos:end="405:48"><name pos:start="405:9" pos:end="405:40"><name pos:start="405:9" pos:end="405:11">cpu</name><operator pos:start="405:12" pos:end="405:13">-&gt;</operator><name pos:start="405:14" pos:end="405:16">env</name><operator pos:start="405:17" pos:end="405:17">.</operator><name pos:start="405:18" pos:end="405:20">v7m</name><operator pos:start="405:21" pos:end="405:21">.</operator><name pos:start="405:22" pos:end="405:26">mmfar</name><index pos:start="405:27" pos:end="405:40">[<expr pos:start="405:28" pos:end="405:39"><name pos:start="405:28" pos:end="405:39"><name pos:start="405:28" pos:end="405:32">attrs</name><operator pos:start="405:33" pos:end="405:33">.</operator><name pos:start="405:34" pos:end="405:39">secure</name></name></expr>]</index></name> <operator pos:start="405:42" pos:end="405:42">=</operator> <name pos:start="405:44" pos:end="405:48">value</name></expr>;</expr_stmt>

        <return pos:start="407:9" pos:end="407:15">return;</return>

    <case pos:start="409:5" pos:end="409:15">case <expr pos:start="409:10" pos:end="409:14"><literal type="number" pos:start="409:10" pos:end="409:14">0xd38</literal></expr>:</case> <comment type="block" pos:start="409:17" pos:end="409:41">/* Bus Fault Address.  */</comment>

        <expr_stmt pos:start="411:9" pos:end="411:34"><expr pos:start="411:9" pos:end="411:33"><name pos:start="411:9" pos:end="411:25"><name pos:start="411:9" pos:end="411:11">cpu</name><operator pos:start="411:12" pos:end="411:13">-&gt;</operator><name pos:start="411:14" pos:end="411:16">env</name><operator pos:start="411:17" pos:end="411:17">.</operator><name pos:start="411:18" pos:end="411:20">v7m</name><operator pos:start="411:21" pos:end="411:21">.</operator><name pos:start="411:22" pos:end="411:25">bfar</name></name> <operator pos:start="411:27" pos:end="411:27">=</operator> <name pos:start="411:29" pos:end="411:33">value</name></expr>;</expr_stmt>

        <return pos:start="413:9" pos:end="413:15">return;</return>

    <case pos:start="415:5" pos:end="415:15">case <expr pos:start="415:10" pos:end="415:14"><literal type="number" pos:start="415:10" pos:end="415:14">0xd3c</literal></expr>:</case> <comment type="block" pos:start="415:17" pos:end="415:40">/* Aux Fault Status.  */</comment>

        <expr_stmt pos:start="417:9" pos:end="419:74"><expr pos:start="417:9" pos:end="419:73"><call pos:start="417:9" pos:end="419:73"><name pos:start="417:9" pos:end="417:21">qemu_log_mask</name><argument_list pos:start="417:22" pos:end="419:73">(<argument pos:start="417:23" pos:end="417:31"><expr pos:start="417:23" pos:end="417:31"><name pos:start="417:23" pos:end="417:31">LOG_UNIMP</name></expr></argument>,

                      <argument pos:start="419:23" pos:end="419:72"><expr pos:start="419:23" pos:end="419:72"><literal type="string" pos:start="419:23" pos:end="419:72">"NVIC: Aux fault status registers unimplemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="421:9" pos:end="421:14">break;</break>

    <case pos:start="423:5" pos:end="423:15">case <expr pos:start="423:10" pos:end="423:14"><literal type="number" pos:start="423:10" pos:end="423:14">0xd90</literal></expr>:</case> <comment type="block" pos:start="423:17" pos:end="423:30">/* MPU_TYPE */</comment>

        <return pos:start="425:9" pos:end="425:15">return;</return> <comment type="block" pos:start="425:17" pos:end="425:24">/* RO */</comment>

    <case pos:start="427:5" pos:end="427:15">case <expr pos:start="427:10" pos:end="427:14"><literal type="number" pos:start="427:10" pos:end="427:14">0xd94</literal></expr>:</case> <comment type="block" pos:start="427:17" pos:end="427:30">/* MPU_CTRL */</comment>

        <if_stmt pos:start="429:9" pos:end="439:9"><if pos:start="429:9" pos:end="439:9">if <condition pos:start="429:12" pos:end="433:44">(<expr pos:start="429:13" pos:end="433:43"><operator pos:start="429:13" pos:end="429:13">(</operator><name pos:start="429:14" pos:end="429:18">value</name> <operator pos:start="429:20" pos:end="429:20">&amp;</operator>

             <operator pos:start="431:14" pos:end="431:14">(</operator><name pos:start="431:15" pos:end="431:42">R_V7M_MPU_CTRL_HFNMIENA_MASK</name> <operator pos:start="431:44" pos:end="431:44">|</operator> <name pos:start="431:46" pos:end="431:71">R_V7M_MPU_CTRL_ENABLE_MASK</name><operator pos:start="431:72" pos:end="431:72">)</operator><operator pos:start="431:73" pos:end="431:73">)</operator>

            <operator pos:start="433:13" pos:end="433:14">==</operator> <name pos:start="433:16" pos:end="433:43">R_V7M_MPU_CTRL_HFNMIENA_MASK</name></expr>)</condition> <block pos:start="433:46" pos:end="439:9">{<block_content pos:start="435:13" pos:end="437:45">

            <expr_stmt pos:start="435:13" pos:end="437:45"><expr pos:start="435:13" pos:end="437:44"><call pos:start="435:13" pos:end="437:44"><name pos:start="435:13" pos:end="435:25">qemu_log_mask</name><argument_list pos:start="435:26" pos:end="437:44">(<argument pos:start="435:27" pos:end="435:41"><expr pos:start="435:27" pos:end="435:41"><name pos:start="435:27" pos:end="435:41">LOG_GUEST_ERROR</name></expr></argument>, <argument pos:start="435:44" pos:end="437:43"><expr pos:start="435:44" pos:end="437:43"><literal type="string" pos:start="435:44" pos:end="435:79">"MPU_CTRL: HFNMIENA and !ENABLE is "</literal>

                          <literal type="string" pos:start="437:27" pos:end="437:43">"UNPREDICTABLE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="441:9" pos:end="447:55"><expr pos:start="441:9" pos:end="447:54"><name pos:start="441:9" pos:end="441:43"><name pos:start="441:9" pos:end="441:11">cpu</name><operator pos:start="441:12" pos:end="441:13">-&gt;</operator><name pos:start="441:14" pos:end="441:16">env</name><operator pos:start="441:17" pos:end="441:17">.</operator><name pos:start="441:18" pos:end="441:20">v7m</name><operator pos:start="441:21" pos:end="441:21">.</operator><name pos:start="441:22" pos:end="441:29">mpu_ctrl</name><index pos:start="441:30" pos:end="441:43">[<expr pos:start="441:31" pos:end="441:42"><name pos:start="441:31" pos:end="441:42"><name pos:start="441:31" pos:end="441:35">attrs</name><operator pos:start="441:36" pos:end="441:36">.</operator><name pos:start="441:37" pos:end="441:42">secure</name></name></expr>]</index></name>

            <operator pos:start="443:13" pos:end="443:13">=</operator> <name pos:start="443:15" pos:end="443:19">value</name> <operator pos:start="443:21" pos:end="443:21">&amp;</operator> <operator pos:start="443:23" pos:end="443:23">(</operator><name pos:start="443:24" pos:end="443:49">R_V7M_MPU_CTRL_ENABLE_MASK</name> <operator pos:start="443:51" pos:end="443:51">|</operator>

                       <name pos:start="445:24" pos:end="445:51">R_V7M_MPU_CTRL_HFNMIENA_MASK</name> <operator pos:start="445:53" pos:end="445:53">|</operator>

                       <name pos:start="447:24" pos:end="447:53">R_V7M_MPU_CTRL_PRIVDEFENA_MASK</name><operator pos:start="447:54" pos:end="447:54">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="449:9" pos:end="449:28"><expr pos:start="449:9" pos:end="449:27"><call pos:start="449:9" pos:end="449:27"><name pos:start="449:9" pos:end="449:17">tlb_flush</name><argument_list pos:start="449:18" pos:end="449:27">(<argument pos:start="449:19" pos:end="449:26"><expr pos:start="449:19" pos:end="449:26"><call pos:start="449:19" pos:end="449:26"><name pos:start="449:19" pos:end="449:21">CPU</name><argument_list pos:start="449:22" pos:end="449:26">(<argument pos:start="449:23" pos:end="449:25"><expr pos:start="449:23" pos:end="449:25"><name pos:start="449:23" pos:end="449:25">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="451:9" pos:end="451:14">break;</break>

    <case pos:start="453:5" pos:end="453:15">case <expr pos:start="453:10" pos:end="453:14"><literal type="number" pos:start="453:10" pos:end="453:14">0xd98</literal></expr>:</case> <comment type="block" pos:start="453:17" pos:end="453:29">/* MPU_RNR */</comment>

        <if_stmt pos:start="455:9" pos:end="467:9"><if pos:start="455:9" pos:end="463:9">if <condition pos:start="455:12" pos:end="455:41">(<expr pos:start="455:13" pos:end="455:40"><name pos:start="455:13" pos:end="455:17">value</name> <operator pos:start="455:19" pos:end="455:20">&gt;=</operator> <name pos:start="455:22" pos:end="455:40"><name pos:start="455:22" pos:end="455:24">cpu</name><operator pos:start="455:25" pos:end="455:26">-&gt;</operator><name pos:start="455:27" pos:end="455:40">pmsav7_dregion</name></name></expr>)</condition> <block pos:start="455:43" pos:end="463:9">{<block_content pos:start="457:13" pos:end="461:54">

            <expr_stmt pos:start="457:13" pos:end="461:54"><expr pos:start="457:13" pos:end="461:53"><call pos:start="457:13" pos:end="461:53"><name pos:start="457:13" pos:end="457:25">qemu_log_mask</name><argument_list pos:start="457:26" pos:end="461:53">(<argument pos:start="457:27" pos:end="457:41"><expr pos:start="457:27" pos:end="457:41"><name pos:start="457:27" pos:end="457:41">LOG_GUEST_ERROR</name></expr></argument>, <argument pos:start="457:44" pos:end="459:49"><expr pos:start="457:44" pos:end="459:49"><literal type="string" pos:start="457:44" pos:end="457:70">"MPU region out of range %"</literal>

                          <name pos:start="459:27" pos:end="459:32">PRIu32</name> <literal type="string" pos:start="459:34" pos:end="459:37">"/%"</literal> <name pos:start="459:39" pos:end="459:44">PRIu32</name> <literal type="string" pos:start="459:46" pos:end="459:49">"\n"</literal></expr></argument>,

                          <argument pos:start="461:27" pos:end="461:31"><expr pos:start="461:27" pos:end="461:31"><name pos:start="461:27" pos:end="461:31">value</name></expr></argument>, <argument pos:start="461:34" pos:end="461:52"><expr pos:start="461:34" pos:end="461:52"><name pos:start="461:34" pos:end="461:52"><name pos:start="461:34" pos:end="461:36">cpu</name><operator pos:start="461:37" pos:end="461:38">-&gt;</operator><name pos:start="461:39" pos:end="461:52">pmsav7_dregion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="463:11" pos:end="467:9">else <block pos:start="463:16" pos:end="467:9">{<block_content pos:start="465:13" pos:end="465:54">

            <expr_stmt pos:start="465:13" pos:end="465:54"><expr pos:start="465:13" pos:end="465:53"><name pos:start="465:13" pos:end="465:45"><name pos:start="465:13" pos:end="465:15">cpu</name><operator pos:start="465:16" pos:end="465:17">-&gt;</operator><name pos:start="465:18" pos:end="465:20">env</name><operator pos:start="465:21" pos:end="465:21">.</operator><name pos:start="465:22" pos:end="465:27">pmsav7</name><operator pos:start="465:28" pos:end="465:28">.</operator><name pos:start="465:29" pos:end="465:31">rnr</name><index pos:start="465:32" pos:end="465:45">[<expr pos:start="465:33" pos:end="465:44"><name pos:start="465:33" pos:end="465:44"><name pos:start="465:33" pos:end="465:37">attrs</name><operator pos:start="465:38" pos:end="465:38">.</operator><name pos:start="465:39" pos:end="465:44">secure</name></name></expr>]</index></name> <operator pos:start="465:47" pos:end="465:47">=</operator> <name pos:start="465:49" pos:end="465:53">value</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="469:9" pos:end="469:14">break;</break>

    <case pos:start="471:5" pos:end="471:15">case <expr pos:start="471:10" pos:end="471:14"><literal type="number" pos:start="471:10" pos:end="471:14">0xd9c</literal></expr>:</case> <comment type="block" pos:start="471:17" pos:end="471:30">/* MPU_RBAR */</comment>

    <case pos:start="473:5" pos:end="473:15">case <expr pos:start="473:10" pos:end="473:14"><literal type="number" pos:start="473:10" pos:end="473:14">0xda4</literal></expr>:</case> <comment type="block" pos:start="473:17" pos:end="473:33">/* MPU_RBAR_A1 */</comment>

    <case pos:start="475:5" pos:end="475:15">case <expr pos:start="475:10" pos:end="475:14"><literal type="number" pos:start="475:10" pos:end="475:14">0xdac</literal></expr>:</case> <comment type="block" pos:start="475:17" pos:end="475:33">/* MPU_RBAR_A2 */</comment>

    <case pos:start="477:5" pos:end="477:15">case <expr pos:start="477:10" pos:end="477:14"><literal type="number" pos:start="477:10" pos:end="477:14">0xdb4</literal></expr>:</case> <comment type="block" pos:start="477:17" pos:end="477:33">/* MPU_RBAR_A3 */</comment>

    <block pos:start="479:5" pos:end="571:5">{<block_content pos:start="481:9" pos:end="569:14">

        <decl_stmt pos:start="481:9" pos:end="481:19"><decl pos:start="481:9" pos:end="481:18"><type pos:start="481:9" pos:end="481:11"><name pos:start="481:9" pos:end="481:11">int</name></type> <name pos:start="481:13" pos:end="481:18">region</name></decl>;</decl_stmt>



        <if_stmt pos:start="485:9" pos:end="521:9"><if pos:start="485:9" pos:end="521:9">if <condition pos:start="485:12" pos:end="485:51">(<expr pos:start="485:13" pos:end="485:50"><call pos:start="485:13" pos:end="485:50"><name pos:start="485:13" pos:end="485:23">arm_feature</name><argument_list pos:start="485:24" pos:end="485:50">(<argument pos:start="485:25" pos:end="485:33"><expr pos:start="485:25" pos:end="485:33"><operator pos:start="485:25" pos:end="485:25">&amp;</operator><name pos:start="485:26" pos:end="485:33"><name pos:start="485:26" pos:end="485:28">cpu</name><operator pos:start="485:29" pos:end="485:30">-&gt;</operator><name pos:start="485:31" pos:end="485:33">env</name></name></expr></argument>, <argument pos:start="485:36" pos:end="485:49"><expr pos:start="485:36" pos:end="485:49"><name pos:start="485:36" pos:end="485:49">ARM_FEATURE_V8</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="485:53" pos:end="521:9">{<block_content pos:start="497:13" pos:end="519:19">

            <comment type="block" pos:start="487:13" pos:end="495:15">/* PMSAv8M handling of the aliases is different from v7M:

             * aliases A1, A2, A3 override the low two bits of the region

             * number in MPU_RNR, and there is no 'region' field in the

             * RBAR register.

             */</comment>

            <decl_stmt pos:start="497:13" pos:end="497:47"><decl pos:start="497:13" pos:end="497:46"><type pos:start="497:13" pos:end="497:15"><name pos:start="497:13" pos:end="497:15">int</name></type> <name pos:start="497:17" pos:end="497:23">aliasno</name> <init pos:start="497:25" pos:end="497:46">= <expr pos:start="497:27" pos:end="497:46"><operator pos:start="497:27" pos:end="497:27">(</operator><name pos:start="497:28" pos:end="497:33">offset</name> <operator pos:start="497:35" pos:end="497:35">-</operator> <literal type="number" pos:start="497:37" pos:end="497:41">0xd9c</literal><operator pos:start="497:42" pos:end="497:42">)</operator> <operator pos:start="497:44" pos:end="497:44">/</operator> <literal type="number" pos:start="497:46" pos:end="497:46">8</literal></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="497:49" pos:end="497:58">/* 0..3 */</comment>



            <expr_stmt pos:start="501:13" pos:end="501:55"><expr pos:start="501:13" pos:end="501:54"><name pos:start="501:13" pos:end="501:18">region</name> <operator pos:start="501:20" pos:end="501:20">=</operator> <name pos:start="501:22" pos:end="501:54"><name pos:start="501:22" pos:end="501:24">cpu</name><operator pos:start="501:25" pos:end="501:26">-&gt;</operator><name pos:start="501:27" pos:end="501:29">env</name><operator pos:start="501:30" pos:end="501:30">.</operator><name pos:start="501:31" pos:end="501:36">pmsav7</name><operator pos:start="501:37" pos:end="501:37">.</operator><name pos:start="501:38" pos:end="501:40">rnr</name><index pos:start="501:41" pos:end="501:54">[<expr pos:start="501:42" pos:end="501:53"><name pos:start="501:42" pos:end="501:53"><name pos:start="501:42" pos:end="501:46">attrs</name><operator pos:start="501:47" pos:end="501:47">.</operator><name pos:start="501:48" pos:end="501:53">secure</name></name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="503:13" pos:end="507:13"><if pos:start="503:13" pos:end="507:13">if <condition pos:start="503:16" pos:end="503:24">(<expr pos:start="503:17" pos:end="503:23"><name pos:start="503:17" pos:end="503:23">aliasno</name></expr>)</condition> <block pos:start="503:26" pos:end="507:13">{<block_content pos:start="505:17" pos:end="505:58">

                <expr_stmt pos:start="505:17" pos:end="505:58"><expr pos:start="505:17" pos:end="505:57"><name pos:start="505:17" pos:end="505:22">region</name> <operator pos:start="505:24" pos:end="505:24">=</operator> <call pos:start="505:26" pos:end="505:57"><name pos:start="505:26" pos:end="505:34">deposit32</name><argument_list pos:start="505:35" pos:end="505:57">(<argument pos:start="505:36" pos:end="505:41"><expr pos:start="505:36" pos:end="505:41"><name pos:start="505:36" pos:end="505:41">region</name></expr></argument>, <argument pos:start="505:44" pos:end="505:44"><expr pos:start="505:44" pos:end="505:44"><literal type="number" pos:start="505:44" pos:end="505:44">0</literal></expr></argument>, <argument pos:start="505:47" pos:end="505:47"><expr pos:start="505:47" pos:end="505:47"><literal type="number" pos:start="505:47" pos:end="505:47">2</literal></expr></argument>, <argument pos:start="505:50" pos:end="505:56"><expr pos:start="505:50" pos:end="505:56"><name pos:start="505:50" pos:end="505:56">aliasno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="509:13" pos:end="513:13"><if pos:start="509:13" pos:end="513:13">if <condition pos:start="509:16" pos:end="509:46">(<expr pos:start="509:17" pos:end="509:45"><name pos:start="509:17" pos:end="509:22">region</name> <operator pos:start="509:24" pos:end="509:25">&gt;=</operator> <name pos:start="509:27" pos:end="509:45"><name pos:start="509:27" pos:end="509:29">cpu</name><operator pos:start="509:30" pos:end="509:31">-&gt;</operator><name pos:start="509:32" pos:end="509:45">pmsav7_dregion</name></name></expr>)</condition> <block pos:start="509:48" pos:end="513:13">{<block_content pos:start="511:17" pos:end="511:23">

                <return pos:start="511:17" pos:end="511:23">return;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="515:13" pos:end="515:63"><expr pos:start="515:13" pos:end="515:62"><name pos:start="515:13" pos:end="515:54"><name pos:start="515:13" pos:end="515:15">cpu</name><operator pos:start="515:16" pos:end="515:17">-&gt;</operator><name pos:start="515:18" pos:end="515:20">env</name><operator pos:start="515:21" pos:end="515:21">.</operator><name pos:start="515:22" pos:end="515:27">pmsav8</name><operator pos:start="515:28" pos:end="515:28">.</operator><name pos:start="515:29" pos:end="515:32">rbar</name><index pos:start="515:33" pos:end="515:46">[<expr pos:start="515:34" pos:end="515:45"><name pos:start="515:34" pos:end="515:45"><name pos:start="515:34" pos:end="515:38">attrs</name><operator pos:start="515:39" pos:end="515:39">.</operator><name pos:start="515:40" pos:end="515:45">secure</name></name></expr>]</index><index pos:start="515:47" pos:end="515:54">[<expr pos:start="515:48" pos:end="515:53"><name pos:start="515:48" pos:end="515:53">region</name></expr>]</index></name> <operator pos:start="515:56" pos:end="515:56">=</operator> <name pos:start="515:58" pos:end="515:62">value</name></expr>;</expr_stmt>

            <expr_stmt pos:start="517:13" pos:end="517:32"><expr pos:start="517:13" pos:end="517:31"><call pos:start="517:13" pos:end="517:31"><name pos:start="517:13" pos:end="517:21">tlb_flush</name><argument_list pos:start="517:22" pos:end="517:31">(<argument pos:start="517:23" pos:end="517:30"><expr pos:start="517:23" pos:end="517:30"><call pos:start="517:23" pos:end="517:30"><name pos:start="517:23" pos:end="517:25">CPU</name><argument_list pos:start="517:26" pos:end="517:30">(<argument pos:start="517:27" pos:end="517:29"><expr pos:start="517:27" pos:end="517:29"><name pos:start="517:27" pos:end="517:29">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="519:13" pos:end="519:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="525:9" pos:end="553:9"><if pos:start="525:9" pos:end="549:9">if <condition pos:start="525:12" pos:end="525:29">(<expr pos:start="525:13" pos:end="525:28"><name pos:start="525:13" pos:end="525:17">value</name> <operator pos:start="525:19" pos:end="525:19">&amp;</operator> <operator pos:start="525:21" pos:end="525:21">(</operator><literal type="number" pos:start="525:22" pos:end="525:22">1</literal> <operator pos:start="525:24" pos:end="525:25">&lt;&lt;</operator> <literal type="number" pos:start="525:27" pos:end="525:27">4</literal><operator pos:start="525:28" pos:end="525:28">)</operator></expr>)</condition> <block pos:start="525:31" pos:end="549:9">{<block_content pos:start="533:13" pos:end="547:55">

            <comment type="block" pos:start="527:13" pos:end="531:15">/* VALID bit means use the region number specified in this

             * value and also update MPU_RNR.REGION with that value.

             */</comment>

            <expr_stmt pos:start="533:13" pos:end="533:44"><expr pos:start="533:13" pos:end="533:43"><name pos:start="533:13" pos:end="533:18">region</name> <operator pos:start="533:20" pos:end="533:20">=</operator> <call pos:start="533:22" pos:end="533:43"><name pos:start="533:22" pos:end="533:30">extract32</name><argument_list pos:start="533:31" pos:end="533:43">(<argument pos:start="533:32" pos:end="533:36"><expr pos:start="533:32" pos:end="533:36"><name pos:start="533:32" pos:end="533:36">value</name></expr></argument>, <argument pos:start="533:39" pos:end="533:39"><expr pos:start="533:39" pos:end="533:39"><literal type="number" pos:start="533:39" pos:end="533:39">0</literal></expr></argument>, <argument pos:start="533:42" pos:end="533:42"><expr pos:start="533:42" pos:end="533:42"><literal type="number" pos:start="533:42" pos:end="533:42">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="535:13" pos:end="545:13"><if pos:start="535:13" pos:end="545:13">if <condition pos:start="535:16" pos:end="535:46">(<expr pos:start="535:17" pos:end="535:45"><name pos:start="535:17" pos:end="535:22">region</name> <operator pos:start="535:24" pos:end="535:25">&gt;=</operator> <name pos:start="535:27" pos:end="535:45"><name pos:start="535:27" pos:end="535:29">cpu</name><operator pos:start="535:30" pos:end="535:31">-&gt;</operator><name pos:start="535:32" pos:end="535:45">pmsav7_dregion</name></name></expr>)</condition> <block pos:start="535:48" pos:end="545:13">{<block_content pos:start="537:17" pos:end="543:23">

                <expr_stmt pos:start="537:17" pos:end="541:59"><expr pos:start="537:17" pos:end="541:58"><call pos:start="537:17" pos:end="541:58"><name pos:start="537:17" pos:end="537:29">qemu_log_mask</name><argument_list pos:start="537:30" pos:end="541:58">(<argument pos:start="537:31" pos:end="537:45"><expr pos:start="537:31" pos:end="537:45"><name pos:start="537:31" pos:end="537:45">LOG_GUEST_ERROR</name></expr></argument>,

                              <argument pos:start="539:31" pos:end="539:72"><expr pos:start="539:31" pos:end="539:72"><literal type="string" pos:start="539:31" pos:end="539:60">"MPU region out of range %u/%"</literal> <name pos:start="539:62" pos:end="539:67">PRIu32</name> <literal type="string" pos:start="539:69" pos:end="539:72">"\n"</literal></expr></argument>,

                              <argument pos:start="541:31" pos:end="541:36"><expr pos:start="541:31" pos:end="541:36"><name pos:start="541:31" pos:end="541:36">region</name></expr></argument>, <argument pos:start="541:39" pos:end="541:57"><expr pos:start="541:39" pos:end="541:57"><name pos:start="541:39" pos:end="541:57"><name pos:start="541:39" pos:end="541:41">cpu</name><operator pos:start="541:42" pos:end="541:43">-&gt;</operator><name pos:start="541:44" pos:end="541:57">pmsav7_dregion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="543:17" pos:end="543:23">return;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="547:13" pos:end="547:55"><expr pos:start="547:13" pos:end="547:54"><name pos:start="547:13" pos:end="547:45"><name pos:start="547:13" pos:end="547:15">cpu</name><operator pos:start="547:16" pos:end="547:17">-&gt;</operator><name pos:start="547:18" pos:end="547:20">env</name><operator pos:start="547:21" pos:end="547:21">.</operator><name pos:start="547:22" pos:end="547:27">pmsav7</name><operator pos:start="547:28" pos:end="547:28">.</operator><name pos:start="547:29" pos:end="547:31">rnr</name><index pos:start="547:32" pos:end="547:45">[<expr pos:start="547:33" pos:end="547:44"><name pos:start="547:33" pos:end="547:44"><name pos:start="547:33" pos:end="547:37">attrs</name><operator pos:start="547:38" pos:end="547:38">.</operator><name pos:start="547:39" pos:end="547:44">secure</name></name></expr>]</index></name> <operator pos:start="547:47" pos:end="547:47">=</operator> <name pos:start="547:49" pos:end="547:54">region</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="549:11" pos:end="553:9">else <block pos:start="549:16" pos:end="553:9">{<block_content pos:start="551:13" pos:end="551:55">

            <expr_stmt pos:start="551:13" pos:end="551:55"><expr pos:start="551:13" pos:end="551:54"><name pos:start="551:13" pos:end="551:18">region</name> <operator pos:start="551:20" pos:end="551:20">=</operator> <name pos:start="551:22" pos:end="551:54"><name pos:start="551:22" pos:end="551:24">cpu</name><operator pos:start="551:25" pos:end="551:26">-&gt;</operator><name pos:start="551:27" pos:end="551:29">env</name><operator pos:start="551:30" pos:end="551:30">.</operator><name pos:start="551:31" pos:end="551:36">pmsav7</name><operator pos:start="551:37" pos:end="551:37">.</operator><name pos:start="551:38" pos:end="551:40">rnr</name><index pos:start="551:41" pos:end="551:54">[<expr pos:start="551:42" pos:end="551:53"><name pos:start="551:42" pos:end="551:53"><name pos:start="551:42" pos:end="551:46">attrs</name><operator pos:start="551:47" pos:end="551:47">.</operator><name pos:start="551:48" pos:end="551:53">secure</name></name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="557:9" pos:end="561:9"><if pos:start="557:9" pos:end="561:9">if <condition pos:start="557:12" pos:end="557:42">(<expr pos:start="557:13" pos:end="557:41"><name pos:start="557:13" pos:end="557:18">region</name> <operator pos:start="557:20" pos:end="557:21">&gt;=</operator> <name pos:start="557:23" pos:end="557:41"><name pos:start="557:23" pos:end="557:25">cpu</name><operator pos:start="557:26" pos:end="557:27">-&gt;</operator><name pos:start="557:28" pos:end="557:41">pmsav7_dregion</name></name></expr>)</condition> <block pos:start="557:44" pos:end="561:9">{<block_content pos:start="559:13" pos:end="559:19">

            <return pos:start="559:13" pos:end="559:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="565:9" pos:end="565:54"><expr pos:start="565:9" pos:end="565:53"><name pos:start="565:9" pos:end="565:37"><name pos:start="565:9" pos:end="565:11">cpu</name><operator pos:start="565:12" pos:end="565:13">-&gt;</operator><name pos:start="565:14" pos:end="565:16">env</name><operator pos:start="565:17" pos:end="565:17">.</operator><name pos:start="565:18" pos:end="565:23">pmsav7</name><operator pos:start="565:24" pos:end="565:24">.</operator><name pos:start="565:25" pos:end="565:29">drbar</name><index pos:start="565:30" pos:end="565:37">[<expr pos:start="565:31" pos:end="565:36"><name pos:start="565:31" pos:end="565:36">region</name></expr>]</index></name> <operator pos:start="565:39" pos:end="565:39">=</operator> <name pos:start="565:41" pos:end="565:45">value</name> <operator pos:start="565:47" pos:end="565:47">&amp;</operator> <operator pos:start="565:49" pos:end="565:49">~</operator><literal type="number" pos:start="565:50" pos:end="565:53">0x1f</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="567:9" pos:end="567:28"><expr pos:start="567:9" pos:end="567:27"><call pos:start="567:9" pos:end="567:27"><name pos:start="567:9" pos:end="567:17">tlb_flush</name><argument_list pos:start="567:18" pos:end="567:27">(<argument pos:start="567:19" pos:end="567:26"><expr pos:start="567:19" pos:end="567:26"><call pos:start="567:19" pos:end="567:26"><name pos:start="567:19" pos:end="567:21">CPU</name><argument_list pos:start="567:22" pos:end="567:26">(<argument pos:start="567:23" pos:end="567:25"><expr pos:start="567:23" pos:end="567:25"><name pos:start="567:23" pos:end="567:25">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="569:9" pos:end="569:14">break;</break>

    </block_content>}</block>

    <case pos:start="573:5" pos:end="573:15">case <expr pos:start="573:10" pos:end="573:14"><literal type="number" pos:start="573:10" pos:end="573:14">0xda0</literal></expr>:</case> <comment type="block" pos:start="573:17" pos:end="573:52">/* MPU_RASR (v7M), MPU_RLAR (v8M) */</comment>

    <case pos:start="575:5" pos:end="575:15">case <expr pos:start="575:10" pos:end="575:14"><literal type="number" pos:start="575:10" pos:end="575:14">0xda8</literal></expr>:</case> <comment type="block" pos:start="575:17" pos:end="575:58">/* MPU_RASR_A1 (v7M), MPU_RLAR_A1 (v8M) */</comment>

    <case pos:start="577:5" pos:end="577:15">case <expr pos:start="577:10" pos:end="577:14"><literal type="number" pos:start="577:10" pos:end="577:14">0xdb0</literal></expr>:</case> <comment type="block" pos:start="577:17" pos:end="577:58">/* MPU_RASR_A2 (v7M), MPU_RLAR_A2 (v8M) */</comment>

    <case pos:start="579:5" pos:end="579:15">case <expr pos:start="579:10" pos:end="579:14"><literal type="number" pos:start="579:10" pos:end="579:14">0xdb8</literal></expr>:</case> <comment type="block" pos:start="579:17" pos:end="579:58">/* MPU_RASR_A3 (v7M), MPU_RLAR_A3 (v8M) */</comment>

    <block pos:start="581:5" pos:end="641:5">{<block_content pos:start="583:9" pos:end="639:14">

        <decl_stmt pos:start="583:9" pos:end="583:55"><decl pos:start="583:9" pos:end="583:54"><type pos:start="583:9" pos:end="583:11"><name pos:start="583:9" pos:end="583:11">int</name></type> <name pos:start="583:13" pos:end="583:18">region</name> <init pos:start="583:20" pos:end="583:54">= <expr pos:start="583:22" pos:end="583:54"><name pos:start="583:22" pos:end="583:54"><name pos:start="583:22" pos:end="583:24">cpu</name><operator pos:start="583:25" pos:end="583:26">-&gt;</operator><name pos:start="583:27" pos:end="583:29">env</name><operator pos:start="583:30" pos:end="583:30">.</operator><name pos:start="583:31" pos:end="583:36">pmsav7</name><operator pos:start="583:37" pos:end="583:37">.</operator><name pos:start="583:38" pos:end="583:40">rnr</name><index pos:start="583:41" pos:end="583:54">[<expr pos:start="583:42" pos:end="583:53"><name pos:start="583:42" pos:end="583:53"><name pos:start="583:42" pos:end="583:46">attrs</name><operator pos:start="583:47" pos:end="583:47">.</operator><name pos:start="583:48" pos:end="583:53">secure</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="587:9" pos:end="621:9"><if pos:start="587:9" pos:end="621:9">if <condition pos:start="587:12" pos:end="587:51">(<expr pos:start="587:13" pos:end="587:50"><call pos:start="587:13" pos:end="587:50"><name pos:start="587:13" pos:end="587:23">arm_feature</name><argument_list pos:start="587:24" pos:end="587:50">(<argument pos:start="587:25" pos:end="587:33"><expr pos:start="587:25" pos:end="587:33"><operator pos:start="587:25" pos:end="587:25">&amp;</operator><name pos:start="587:26" pos:end="587:33"><name pos:start="587:26" pos:end="587:28">cpu</name><operator pos:start="587:29" pos:end="587:30">-&gt;</operator><name pos:start="587:31" pos:end="587:33">env</name></name></expr></argument>, <argument pos:start="587:36" pos:end="587:49"><expr pos:start="587:36" pos:end="587:49"><name pos:start="587:36" pos:end="587:49">ARM_FEATURE_V8</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="587:53" pos:end="621:9">{<block_content pos:start="597:13" pos:end="619:19">

            <comment type="block" pos:start="589:13" pos:end="595:15">/* PMSAv8M handling of the aliases is different from v7M:

             * aliases A1, A2, A3 override the low two bits of the region

             * number in MPU_RNR.

             */</comment>

            <decl_stmt pos:start="597:13" pos:end="597:47"><decl pos:start="597:13" pos:end="597:46"><type pos:start="597:13" pos:end="597:15"><name pos:start="597:13" pos:end="597:15">int</name></type> <name pos:start="597:17" pos:end="597:23">aliasno</name> <init pos:start="597:25" pos:end="597:46">= <expr pos:start="597:27" pos:end="597:46"><operator pos:start="597:27" pos:end="597:27">(</operator><name pos:start="597:28" pos:end="597:33">offset</name> <operator pos:start="597:35" pos:end="597:35">-</operator> <literal type="number" pos:start="597:37" pos:end="597:41">0xd9c</literal><operator pos:start="597:42" pos:end="597:42">)</operator> <operator pos:start="597:44" pos:end="597:44">/</operator> <literal type="number" pos:start="597:46" pos:end="597:46">8</literal></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="597:49" pos:end="597:58">/* 0..3 */</comment>



            <expr_stmt pos:start="601:13" pos:end="601:55"><expr pos:start="601:13" pos:end="601:54"><name pos:start="601:13" pos:end="601:18">region</name> <operator pos:start="601:20" pos:end="601:20">=</operator> <name pos:start="601:22" pos:end="601:54"><name pos:start="601:22" pos:end="601:24">cpu</name><operator pos:start="601:25" pos:end="601:26">-&gt;</operator><name pos:start="601:27" pos:end="601:29">env</name><operator pos:start="601:30" pos:end="601:30">.</operator><name pos:start="601:31" pos:end="601:36">pmsav7</name><operator pos:start="601:37" pos:end="601:37">.</operator><name pos:start="601:38" pos:end="601:40">rnr</name><index pos:start="601:41" pos:end="601:54">[<expr pos:start="601:42" pos:end="601:53"><name pos:start="601:42" pos:end="601:53"><name pos:start="601:42" pos:end="601:46">attrs</name><operator pos:start="601:47" pos:end="601:47">.</operator><name pos:start="601:48" pos:end="601:53">secure</name></name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="603:13" pos:end="607:13"><if pos:start="603:13" pos:end="607:13">if <condition pos:start="603:16" pos:end="603:24">(<expr pos:start="603:17" pos:end="603:23"><name pos:start="603:17" pos:end="603:23">aliasno</name></expr>)</condition> <block pos:start="603:26" pos:end="607:13">{<block_content pos:start="605:17" pos:end="605:58">

                <expr_stmt pos:start="605:17" pos:end="605:58"><expr pos:start="605:17" pos:end="605:57"><name pos:start="605:17" pos:end="605:22">region</name> <operator pos:start="605:24" pos:end="605:24">=</operator> <call pos:start="605:26" pos:end="605:57"><name pos:start="605:26" pos:end="605:34">deposit32</name><argument_list pos:start="605:35" pos:end="605:57">(<argument pos:start="605:36" pos:end="605:41"><expr pos:start="605:36" pos:end="605:41"><name pos:start="605:36" pos:end="605:41">region</name></expr></argument>, <argument pos:start="605:44" pos:end="605:44"><expr pos:start="605:44" pos:end="605:44"><literal type="number" pos:start="605:44" pos:end="605:44">0</literal></expr></argument>, <argument pos:start="605:47" pos:end="605:47"><expr pos:start="605:47" pos:end="605:47"><literal type="number" pos:start="605:47" pos:end="605:47">2</literal></expr></argument>, <argument pos:start="605:50" pos:end="605:56"><expr pos:start="605:50" pos:end="605:56"><name pos:start="605:50" pos:end="605:56">aliasno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="609:13" pos:end="613:13"><if pos:start="609:13" pos:end="613:13">if <condition pos:start="609:16" pos:end="609:46">(<expr pos:start="609:17" pos:end="609:45"><name pos:start="609:17" pos:end="609:22">region</name> <operator pos:start="609:24" pos:end="609:25">&gt;=</operator> <name pos:start="609:27" pos:end="609:45"><name pos:start="609:27" pos:end="609:29">cpu</name><operator pos:start="609:30" pos:end="609:31">-&gt;</operator><name pos:start="609:32" pos:end="609:45">pmsav7_dregion</name></name></expr>)</condition> <block pos:start="609:48" pos:end="613:13">{<block_content pos:start="611:17" pos:end="611:23">

                <return pos:start="611:17" pos:end="611:23">return;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="615:13" pos:end="615:63"><expr pos:start="615:13" pos:end="615:62"><name pos:start="615:13" pos:end="615:54"><name pos:start="615:13" pos:end="615:15">cpu</name><operator pos:start="615:16" pos:end="615:17">-&gt;</operator><name pos:start="615:18" pos:end="615:20">env</name><operator pos:start="615:21" pos:end="615:21">.</operator><name pos:start="615:22" pos:end="615:27">pmsav8</name><operator pos:start="615:28" pos:end="615:28">.</operator><name pos:start="615:29" pos:end="615:32">rlar</name><index pos:start="615:33" pos:end="615:46">[<expr pos:start="615:34" pos:end="615:45"><name pos:start="615:34" pos:end="615:45"><name pos:start="615:34" pos:end="615:38">attrs</name><operator pos:start="615:39" pos:end="615:39">.</operator><name pos:start="615:40" pos:end="615:45">secure</name></name></expr>]</index><index pos:start="615:47" pos:end="615:54">[<expr pos:start="615:48" pos:end="615:53"><name pos:start="615:48" pos:end="615:53">region</name></expr>]</index></name> <operator pos:start="615:56" pos:end="615:56">=</operator> <name pos:start="615:58" pos:end="615:62">value</name></expr>;</expr_stmt>

            <expr_stmt pos:start="617:13" pos:end="617:32"><expr pos:start="617:13" pos:end="617:31"><call pos:start="617:13" pos:end="617:31"><name pos:start="617:13" pos:end="617:21">tlb_flush</name><argument_list pos:start="617:22" pos:end="617:31">(<argument pos:start="617:23" pos:end="617:30"><expr pos:start="617:23" pos:end="617:30"><call pos:start="617:23" pos:end="617:30"><name pos:start="617:23" pos:end="617:25">CPU</name><argument_list pos:start="617:26" pos:end="617:30">(<argument pos:start="617:27" pos:end="617:29"><expr pos:start="617:27" pos:end="617:29"><name pos:start="617:27" pos:end="617:29">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="619:13" pos:end="619:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="625:9" pos:end="629:9"><if pos:start="625:9" pos:end="629:9">if <condition pos:start="625:12" pos:end="625:42">(<expr pos:start="625:13" pos:end="625:41"><name pos:start="625:13" pos:end="625:18">region</name> <operator pos:start="625:20" pos:end="625:21">&gt;=</operator> <name pos:start="625:23" pos:end="625:41"><name pos:start="625:23" pos:end="625:25">cpu</name><operator pos:start="625:26" pos:end="625:27">-&gt;</operator><name pos:start="625:28" pos:end="625:41">pmsav7_dregion</name></name></expr>)</condition> <block pos:start="625:44" pos:end="629:9">{<block_content pos:start="627:13" pos:end="627:19">

            <return pos:start="627:13" pos:end="627:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="633:9" pos:end="633:54"><expr pos:start="633:9" pos:end="633:53"><name pos:start="633:9" pos:end="633:36"><name pos:start="633:9" pos:end="633:11">cpu</name><operator pos:start="633:12" pos:end="633:13">-&gt;</operator><name pos:start="633:14" pos:end="633:16">env</name><operator pos:start="633:17" pos:end="633:17">.</operator><name pos:start="633:18" pos:end="633:23">pmsav7</name><operator pos:start="633:24" pos:end="633:24">.</operator><name pos:start="633:25" pos:end="633:28">drsr</name><index pos:start="633:29" pos:end="633:36">[<expr pos:start="633:30" pos:end="633:35"><name pos:start="633:30" pos:end="633:35">region</name></expr>]</index></name> <operator pos:start="633:38" pos:end="633:38">=</operator> <name pos:start="633:40" pos:end="633:44">value</name> <operator pos:start="633:46" pos:end="633:46">&amp;</operator> <literal type="number" pos:start="633:48" pos:end="633:53">0xff3f</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="635:9" pos:end="635:63"><expr pos:start="635:9" pos:end="635:62"><name pos:start="635:9" pos:end="635:37"><name pos:start="635:9" pos:end="635:11">cpu</name><operator pos:start="635:12" pos:end="635:13">-&gt;</operator><name pos:start="635:14" pos:end="635:16">env</name><operator pos:start="635:17" pos:end="635:17">.</operator><name pos:start="635:18" pos:end="635:23">pmsav7</name><operator pos:start="635:24" pos:end="635:24">.</operator><name pos:start="635:25" pos:end="635:29">dracr</name><index pos:start="635:30" pos:end="635:37">[<expr pos:start="635:31" pos:end="635:36"><name pos:start="635:31" pos:end="635:36">region</name></expr>]</index></name> <operator pos:start="635:39" pos:end="635:39">=</operator> <operator pos:start="635:41" pos:end="635:41">(</operator><name pos:start="635:42" pos:end="635:46">value</name> <operator pos:start="635:48" pos:end="635:49">&gt;&gt;</operator> <literal type="number" pos:start="635:51" pos:end="635:52">16</literal><operator pos:start="635:53" pos:end="635:53">)</operator> <operator pos:start="635:55" pos:end="635:55">&amp;</operator> <literal type="number" pos:start="635:57" pos:end="635:62">0x173f</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="637:9" pos:end="637:28"><expr pos:start="637:9" pos:end="637:27"><call pos:start="637:9" pos:end="637:27"><name pos:start="637:9" pos:end="637:17">tlb_flush</name><argument_list pos:start="637:18" pos:end="637:27">(<argument pos:start="637:19" pos:end="637:26"><expr pos:start="637:19" pos:end="637:26"><call pos:start="637:19" pos:end="637:26"><name pos:start="637:19" pos:end="637:21">CPU</name><argument_list pos:start="637:22" pos:end="637:26">(<argument pos:start="637:23" pos:end="637:25"><expr pos:start="637:23" pos:end="637:25"><name pos:start="637:23" pos:end="637:25">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="639:9" pos:end="639:14">break;</break>

    </block_content>}</block>

    <case pos:start="643:5" pos:end="643:15">case <expr pos:start="643:10" pos:end="643:14"><literal type="number" pos:start="643:10" pos:end="643:14">0xdc0</literal></expr>:</case> <comment type="block" pos:start="643:17" pos:end="643:31">/* MPU_MAIR0 */</comment>

        <if_stmt pos:start="645:9" pos:end="649:9"><if pos:start="645:9" pos:end="649:9">if <condition pos:start="645:12" pos:end="645:52">(<expr pos:start="645:13" pos:end="645:51"><operator pos:start="645:13" pos:end="645:13">!</operator><call pos:start="645:14" pos:end="645:51"><name pos:start="645:14" pos:end="645:24">arm_feature</name><argument_list pos:start="645:25" pos:end="645:51">(<argument pos:start="645:26" pos:end="645:34"><expr pos:start="645:26" pos:end="645:34"><operator pos:start="645:26" pos:end="645:26">&amp;</operator><name pos:start="645:27" pos:end="645:34"><name pos:start="645:27" pos:end="645:29">cpu</name><operator pos:start="645:30" pos:end="645:31">-&gt;</operator><name pos:start="645:32" pos:end="645:34">env</name></name></expr></argument>, <argument pos:start="645:37" pos:end="645:50"><expr pos:start="645:37" pos:end="645:50"><name pos:start="645:37" pos:end="645:50">ARM_FEATURE_V8</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="645:54" pos:end="649:9">{<block_content pos:start="647:13" pos:end="647:28">

            <goto pos:start="647:13" pos:end="647:28">goto <name pos:start="647:18" pos:end="647:27">bad_offset</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="651:9" pos:end="657:9"><if pos:start="651:9" pos:end="657:9">if <condition pos:start="651:12" pos:end="651:32">(<expr pos:start="651:13" pos:end="651:31"><name pos:start="651:13" pos:end="651:31"><name pos:start="651:13" pos:end="651:15">cpu</name><operator pos:start="651:16" pos:end="651:17">-&gt;</operator><name pos:start="651:18" pos:end="651:31">pmsav7_dregion</name></name></expr>)</condition> <block pos:start="651:34" pos:end="657:9">{<block_content pos:start="655:13" pos:end="655:56">

            <comment type="block" pos:start="653:13" pos:end="653:68">/* Register is RES0 if no MPU regions are implemented */</comment>

            <expr_stmt pos:start="655:13" pos:end="655:56"><expr pos:start="655:13" pos:end="655:55"><name pos:start="655:13" pos:end="655:47"><name pos:start="655:13" pos:end="655:15">cpu</name><operator pos:start="655:16" pos:end="655:17">-&gt;</operator><name pos:start="655:18" pos:end="655:20">env</name><operator pos:start="655:21" pos:end="655:21">.</operator><name pos:start="655:22" pos:end="655:27">pmsav8</name><operator pos:start="655:28" pos:end="655:28">.</operator><name pos:start="655:29" pos:end="655:33">mair0</name><index pos:start="655:34" pos:end="655:47">[<expr pos:start="655:35" pos:end="655:46"><name pos:start="655:35" pos:end="655:46"><name pos:start="655:35" pos:end="655:39">attrs</name><operator pos:start="655:40" pos:end="655:40">.</operator><name pos:start="655:41" pos:end="655:46">secure</name></name></expr>]</index></name> <operator pos:start="655:49" pos:end="655:49">=</operator> <name pos:start="655:51" pos:end="655:55">value</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="659:9" pos:end="663:11">/* We don't need to do anything else because memory attributes

         * only affect cacheability, and we don't implement caching.

         */</comment>

        <break pos:start="665:9" pos:end="665:14">break;</break>

    <case pos:start="667:5" pos:end="667:15">case <expr pos:start="667:10" pos:end="667:14"><literal type="number" pos:start="667:10" pos:end="667:14">0xdc4</literal></expr>:</case> <comment type="block" pos:start="667:17" pos:end="667:31">/* MPU_MAIR1 */</comment>

        <if_stmt pos:start="669:9" pos:end="673:9"><if pos:start="669:9" pos:end="673:9">if <condition pos:start="669:12" pos:end="669:52">(<expr pos:start="669:13" pos:end="669:51"><operator pos:start="669:13" pos:end="669:13">!</operator><call pos:start="669:14" pos:end="669:51"><name pos:start="669:14" pos:end="669:24">arm_feature</name><argument_list pos:start="669:25" pos:end="669:51">(<argument pos:start="669:26" pos:end="669:34"><expr pos:start="669:26" pos:end="669:34"><operator pos:start="669:26" pos:end="669:26">&amp;</operator><name pos:start="669:27" pos:end="669:34"><name pos:start="669:27" pos:end="669:29">cpu</name><operator pos:start="669:30" pos:end="669:31">-&gt;</operator><name pos:start="669:32" pos:end="669:34">env</name></name></expr></argument>, <argument pos:start="669:37" pos:end="669:50"><expr pos:start="669:37" pos:end="669:50"><name pos:start="669:37" pos:end="669:50">ARM_FEATURE_V8</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="669:54" pos:end="673:9">{<block_content pos:start="671:13" pos:end="671:28">

            <goto pos:start="671:13" pos:end="671:28">goto <name pos:start="671:18" pos:end="671:27">bad_offset</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="675:9" pos:end="681:9"><if pos:start="675:9" pos:end="681:9">if <condition pos:start="675:12" pos:end="675:32">(<expr pos:start="675:13" pos:end="675:31"><name pos:start="675:13" pos:end="675:31"><name pos:start="675:13" pos:end="675:15">cpu</name><operator pos:start="675:16" pos:end="675:17">-&gt;</operator><name pos:start="675:18" pos:end="675:31">pmsav7_dregion</name></name></expr>)</condition> <block pos:start="675:34" pos:end="681:9">{<block_content pos:start="679:13" pos:end="679:56">

            <comment type="block" pos:start="677:13" pos:end="677:68">/* Register is RES0 if no MPU regions are implemented */</comment>

            <expr_stmt pos:start="679:13" pos:end="679:56"><expr pos:start="679:13" pos:end="679:55"><name pos:start="679:13" pos:end="679:47"><name pos:start="679:13" pos:end="679:15">cpu</name><operator pos:start="679:16" pos:end="679:17">-&gt;</operator><name pos:start="679:18" pos:end="679:20">env</name><operator pos:start="679:21" pos:end="679:21">.</operator><name pos:start="679:22" pos:end="679:27">pmsav8</name><operator pos:start="679:28" pos:end="679:28">.</operator><name pos:start="679:29" pos:end="679:33">mair1</name><index pos:start="679:34" pos:end="679:47">[<expr pos:start="679:35" pos:end="679:46"><name pos:start="679:35" pos:end="679:46"><name pos:start="679:35" pos:end="679:39">attrs</name><operator pos:start="679:40" pos:end="679:40">.</operator><name pos:start="679:41" pos:end="679:46">secure</name></name></expr>]</index></name> <operator pos:start="679:49" pos:end="679:49">=</operator> <name pos:start="679:51" pos:end="679:55">value</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="683:9" pos:end="687:11">/* We don't need to do anything else because memory attributes

         * only affect cacheability, and we don't implement caching.

         */</comment>

        <break pos:start="689:9" pos:end="689:14">break;</break>

    <case pos:start="691:5" pos:end="691:15">case <expr pos:start="691:10" pos:end="691:14"><literal type="number" pos:start="691:10" pos:end="691:14">0xdd0</literal></expr>:</case> <comment type="block" pos:start="691:17" pos:end="691:30">/* SAU_CTRL */</comment>

        <if_stmt pos:start="693:9" pos:end="697:9"><if pos:start="693:9" pos:end="697:9">if <condition pos:start="693:12" pos:end="693:52">(<expr pos:start="693:13" pos:end="693:51"><operator pos:start="693:13" pos:end="693:13">!</operator><call pos:start="693:14" pos:end="693:51"><name pos:start="693:14" pos:end="693:24">arm_feature</name><argument_list pos:start="693:25" pos:end="693:51">(<argument pos:start="693:26" pos:end="693:34"><expr pos:start="693:26" pos:end="693:34"><operator pos:start="693:26" pos:end="693:26">&amp;</operator><name pos:start="693:27" pos:end="693:34"><name pos:start="693:27" pos:end="693:29">cpu</name><operator pos:start="693:30" pos:end="693:31">-&gt;</operator><name pos:start="693:32" pos:end="693:34">env</name></name></expr></argument>, <argument pos:start="693:37" pos:end="693:50"><expr pos:start="693:37" pos:end="693:50"><name pos:start="693:37" pos:end="693:50">ARM_FEATURE_V8</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="693:54" pos:end="697:9">{<block_content pos:start="695:13" pos:end="695:28">

            <goto pos:start="695:13" pos:end="695:28">goto <name pos:start="695:18" pos:end="695:27">bad_offset</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="699:9" pos:end="703:9"><if pos:start="699:9" pos:end="703:9">if <condition pos:start="699:12" pos:end="699:26">(<expr pos:start="699:13" pos:end="699:25"><operator pos:start="699:13" pos:end="699:13">!</operator><name pos:start="699:14" pos:end="699:25"><name pos:start="699:14" pos:end="699:18">attrs</name><operator pos:start="699:19" pos:end="699:19">.</operator><name pos:start="699:20" pos:end="699:25">secure</name></name></expr>)</condition> <block pos:start="699:28" pos:end="703:9">{<block_content pos:start="701:13" pos:end="701:19">

            <return pos:start="701:13" pos:end="701:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="705:9" pos:end="705:38"><expr pos:start="705:9" pos:end="705:37"><name pos:start="705:9" pos:end="705:25"><name pos:start="705:9" pos:end="705:11">cpu</name><operator pos:start="705:12" pos:end="705:13">-&gt;</operator><name pos:start="705:14" pos:end="705:16">env</name><operator pos:start="705:17" pos:end="705:17">.</operator><name pos:start="705:18" pos:end="705:20">sau</name><operator pos:start="705:21" pos:end="705:21">.</operator><name pos:start="705:22" pos:end="705:25">ctrl</name></name> <operator pos:start="705:27" pos:end="705:27">=</operator> <name pos:start="705:29" pos:end="705:33">value</name> <operator pos:start="705:35" pos:end="705:35">&amp;</operator> <literal type="number" pos:start="705:37" pos:end="705:37">3</literal></expr>;</expr_stmt>

        <break pos:start="707:9" pos:end="707:14">break;</break>

    <case pos:start="709:5" pos:end="709:15">case <expr pos:start="709:10" pos:end="709:14"><literal type="number" pos:start="709:10" pos:end="709:14">0xdd4</literal></expr>:</case> <comment type="block" pos:start="709:17" pos:end="709:30">/* SAU_TYPE */</comment>

        <if_stmt pos:start="711:9" pos:end="715:9"><if pos:start="711:9" pos:end="715:9">if <condition pos:start="711:12" pos:end="711:52">(<expr pos:start="711:13" pos:end="711:51"><operator pos:start="711:13" pos:end="711:13">!</operator><call pos:start="711:14" pos:end="711:51"><name pos:start="711:14" pos:end="711:24">arm_feature</name><argument_list pos:start="711:25" pos:end="711:51">(<argument pos:start="711:26" pos:end="711:34"><expr pos:start="711:26" pos:end="711:34"><operator pos:start="711:26" pos:end="711:26">&amp;</operator><name pos:start="711:27" pos:end="711:34"><name pos:start="711:27" pos:end="711:29">cpu</name><operator pos:start="711:30" pos:end="711:31">-&gt;</operator><name pos:start="711:32" pos:end="711:34">env</name></name></expr></argument>, <argument pos:start="711:37" pos:end="711:50"><expr pos:start="711:37" pos:end="711:50"><name pos:start="711:37" pos:end="711:50">ARM_FEATURE_V8</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="711:54" pos:end="715:9">{<block_content pos:start="713:13" pos:end="713:28">

            <goto pos:start="713:13" pos:end="713:28">goto <name pos:start="713:18" pos:end="713:27">bad_offset</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="717:9" pos:end="717:14">break;</break>

    <case pos:start="719:5" pos:end="719:15">case <expr pos:start="719:10" pos:end="719:14"><literal type="number" pos:start="719:10" pos:end="719:14">0xdd8</literal></expr>:</case> <comment type="block" pos:start="719:17" pos:end="719:29">/* SAU_RNR */</comment>

        <if_stmt pos:start="721:9" pos:end="725:9"><if pos:start="721:9" pos:end="725:9">if <condition pos:start="721:12" pos:end="721:52">(<expr pos:start="721:13" pos:end="721:51"><operator pos:start="721:13" pos:end="721:13">!</operator><call pos:start="721:14" pos:end="721:51"><name pos:start="721:14" pos:end="721:24">arm_feature</name><argument_list pos:start="721:25" pos:end="721:51">(<argument pos:start="721:26" pos:end="721:34"><expr pos:start="721:26" pos:end="721:34"><operator pos:start="721:26" pos:end="721:26">&amp;</operator><name pos:start="721:27" pos:end="721:34"><name pos:start="721:27" pos:end="721:29">cpu</name><operator pos:start="721:30" pos:end="721:31">-&gt;</operator><name pos:start="721:32" pos:end="721:34">env</name></name></expr></argument>, <argument pos:start="721:37" pos:end="721:50"><expr pos:start="721:37" pos:end="721:50"><name pos:start="721:37" pos:end="721:50">ARM_FEATURE_V8</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="721:54" pos:end="725:9">{<block_content pos:start="723:13" pos:end="723:28">

            <goto pos:start="723:13" pos:end="723:28">goto <name pos:start="723:18" pos:end="723:27">bad_offset</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="727:9" pos:end="731:9"><if pos:start="727:9" pos:end="731:9">if <condition pos:start="727:12" pos:end="727:26">(<expr pos:start="727:13" pos:end="727:25"><operator pos:start="727:13" pos:end="727:13">!</operator><name pos:start="727:14" pos:end="727:25"><name pos:start="727:14" pos:end="727:18">attrs</name><operator pos:start="727:19" pos:end="727:19">.</operator><name pos:start="727:20" pos:end="727:25">secure</name></name></expr>)</condition> <block pos:start="727:28" pos:end="731:9">{<block_content pos:start="729:13" pos:end="729:19">

            <return pos:start="729:13" pos:end="729:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="733:9" pos:end="745:9"><if pos:start="733:9" pos:end="741:9">if <condition pos:start="733:12" pos:end="733:38">(<expr pos:start="733:13" pos:end="733:37"><name pos:start="733:13" pos:end="733:17">value</name> <operator pos:start="733:19" pos:end="733:20">&gt;=</operator> <name pos:start="733:22" pos:end="733:37"><name pos:start="733:22" pos:end="733:24">cpu</name><operator pos:start="733:25" pos:end="733:26">-&gt;</operator><name pos:start="733:27" pos:end="733:37">sau_sregion</name></name></expr>)</condition> <block pos:start="733:40" pos:end="741:9">{<block_content pos:start="735:13" pos:end="739:51">

            <expr_stmt pos:start="735:13" pos:end="739:51"><expr pos:start="735:13" pos:end="739:50"><call pos:start="735:13" pos:end="739:50"><name pos:start="735:13" pos:end="735:25">qemu_log_mask</name><argument_list pos:start="735:26" pos:end="739:50">(<argument pos:start="735:27" pos:end="735:41"><expr pos:start="735:27" pos:end="735:41"><name pos:start="735:27" pos:end="735:41">LOG_GUEST_ERROR</name></expr></argument>, <argument pos:start="735:44" pos:end="737:49"><expr pos:start="735:44" pos:end="737:49"><literal type="string" pos:start="735:44" pos:end="735:70">"SAU region out of range %"</literal>

                          <name pos:start="737:27" pos:end="737:32">PRIu32</name> <literal type="string" pos:start="737:34" pos:end="737:37">"/%"</literal> <name pos:start="737:39" pos:end="737:44">PRIu32</name> <literal type="string" pos:start="737:46" pos:end="737:49">"\n"</literal></expr></argument>,

                          <argument pos:start="739:27" pos:end="739:31"><expr pos:start="739:27" pos:end="739:31"><name pos:start="739:27" pos:end="739:31">value</name></expr></argument>, <argument pos:start="739:34" pos:end="739:49"><expr pos:start="739:34" pos:end="739:49"><name pos:start="739:34" pos:end="739:49"><name pos:start="739:34" pos:end="739:36">cpu</name><operator pos:start="739:37" pos:end="739:38">-&gt;</operator><name pos:start="739:39" pos:end="739:49">sau_sregion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="741:11" pos:end="745:9">else <block pos:start="741:16" pos:end="745:9">{<block_content pos:start="743:13" pos:end="743:37">

            <expr_stmt pos:start="743:13" pos:end="743:37"><expr pos:start="743:13" pos:end="743:36"><name pos:start="743:13" pos:end="743:28"><name pos:start="743:13" pos:end="743:15">cpu</name><operator pos:start="743:16" pos:end="743:17">-&gt;</operator><name pos:start="743:18" pos:end="743:20">env</name><operator pos:start="743:21" pos:end="743:21">.</operator><name pos:start="743:22" pos:end="743:24">sau</name><operator pos:start="743:25" pos:end="743:25">.</operator><name pos:start="743:26" pos:end="743:28">rnr</name></name> <operator pos:start="743:30" pos:end="743:30">=</operator> <name pos:start="743:32" pos:end="743:36">value</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="747:9" pos:end="747:14">break;</break>

    <case pos:start="749:5" pos:end="749:15">case <expr pos:start="749:10" pos:end="749:14"><literal type="number" pos:start="749:10" pos:end="749:14">0xddc</literal></expr>:</case> <comment type="block" pos:start="749:17" pos:end="749:30">/* SAU_RBAR */</comment>

    <block pos:start="751:5" pos:end="781:5">{<block_content pos:start="753:9" pos:end="779:14">

        <decl_stmt pos:start="753:9" pos:end="753:38"><decl pos:start="753:9" pos:end="753:37"><type pos:start="753:9" pos:end="753:11"><name pos:start="753:9" pos:end="753:11">int</name></type> <name pos:start="753:13" pos:end="753:18">region</name> <init pos:start="753:20" pos:end="753:37">= <expr pos:start="753:22" pos:end="753:37"><name pos:start="753:22" pos:end="753:37"><name pos:start="753:22" pos:end="753:24">cpu</name><operator pos:start="753:25" pos:end="753:26">-&gt;</operator><name pos:start="753:27" pos:end="753:29">env</name><operator pos:start="753:30" pos:end="753:30">.</operator><name pos:start="753:31" pos:end="753:33">sau</name><operator pos:start="753:34" pos:end="753:34">.</operator><name pos:start="753:35" pos:end="753:37">rnr</name></name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="757:9" pos:end="761:9"><if pos:start="757:9" pos:end="761:9">if <condition pos:start="757:12" pos:end="757:52">(<expr pos:start="757:13" pos:end="757:51"><operator pos:start="757:13" pos:end="757:13">!</operator><call pos:start="757:14" pos:end="757:51"><name pos:start="757:14" pos:end="757:24">arm_feature</name><argument_list pos:start="757:25" pos:end="757:51">(<argument pos:start="757:26" pos:end="757:34"><expr pos:start="757:26" pos:end="757:34"><operator pos:start="757:26" pos:end="757:26">&amp;</operator><name pos:start="757:27" pos:end="757:34"><name pos:start="757:27" pos:end="757:29">cpu</name><operator pos:start="757:30" pos:end="757:31">-&gt;</operator><name pos:start="757:32" pos:end="757:34">env</name></name></expr></argument>, <argument pos:start="757:37" pos:end="757:50"><expr pos:start="757:37" pos:end="757:50"><name pos:start="757:37" pos:end="757:50">ARM_FEATURE_V8</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="757:54" pos:end="761:9">{<block_content pos:start="759:13" pos:end="759:28">

            <goto pos:start="759:13" pos:end="759:28">goto <name pos:start="759:18" pos:end="759:27">bad_offset</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="763:9" pos:end="767:9"><if pos:start="763:9" pos:end="767:9">if <condition pos:start="763:12" pos:end="763:26">(<expr pos:start="763:13" pos:end="763:25"><operator pos:start="763:13" pos:end="763:13">!</operator><name pos:start="763:14" pos:end="763:25"><name pos:start="763:14" pos:end="763:18">attrs</name><operator pos:start="763:19" pos:end="763:19">.</operator><name pos:start="763:20" pos:end="763:25">secure</name></name></expr>)</condition> <block pos:start="763:28" pos:end="767:9">{<block_content pos:start="765:13" pos:end="765:19">

            <return pos:start="765:13" pos:end="765:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="769:9" pos:end="773:9"><if pos:start="769:9" pos:end="773:9">if <condition pos:start="769:12" pos:end="769:39">(<expr pos:start="769:13" pos:end="769:38"><name pos:start="769:13" pos:end="769:18">region</name> <operator pos:start="769:20" pos:end="769:21">&gt;=</operator> <name pos:start="769:23" pos:end="769:38"><name pos:start="769:23" pos:end="769:25">cpu</name><operator pos:start="769:26" pos:end="769:27">-&gt;</operator><name pos:start="769:28" pos:end="769:38">sau_sregion</name></name></expr>)</condition> <block pos:start="769:41" pos:end="773:9">{<block_content pos:start="771:13" pos:end="771:19">

            <return pos:start="771:13" pos:end="771:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="775:9" pos:end="775:50"><expr pos:start="775:9" pos:end="775:49"><name pos:start="775:9" pos:end="775:33"><name pos:start="775:9" pos:end="775:11">cpu</name><operator pos:start="775:12" pos:end="775:13">-&gt;</operator><name pos:start="775:14" pos:end="775:16">env</name><operator pos:start="775:17" pos:end="775:17">.</operator><name pos:start="775:18" pos:end="775:20">sau</name><operator pos:start="775:21" pos:end="775:21">.</operator><name pos:start="775:22" pos:end="775:25">rbar</name><index pos:start="775:26" pos:end="775:33">[<expr pos:start="775:27" pos:end="775:32"><name pos:start="775:27" pos:end="775:32">region</name></expr>]</index></name> <operator pos:start="775:35" pos:end="775:35">=</operator> <name pos:start="775:37" pos:end="775:41">value</name> <operator pos:start="775:43" pos:end="775:43">&amp;</operator> <operator pos:start="775:45" pos:end="775:45">~</operator><literal type="number" pos:start="775:46" pos:end="775:49">0x1f</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="777:9" pos:end="777:28"><expr pos:start="777:9" pos:end="777:27"><call pos:start="777:9" pos:end="777:27"><name pos:start="777:9" pos:end="777:17">tlb_flush</name><argument_list pos:start="777:18" pos:end="777:27">(<argument pos:start="777:19" pos:end="777:26"><expr pos:start="777:19" pos:end="777:26"><call pos:start="777:19" pos:end="777:26"><name pos:start="777:19" pos:end="777:21">CPU</name><argument_list pos:start="777:22" pos:end="777:26">(<argument pos:start="777:23" pos:end="777:25"><expr pos:start="777:23" pos:end="777:25"><name pos:start="777:23" pos:end="777:25">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="779:9" pos:end="779:14">break;</break>

    </block_content>}</block>

    <case pos:start="783:5" pos:end="783:15">case <expr pos:start="783:10" pos:end="783:14"><literal type="number" pos:start="783:10" pos:end="783:14">0xde0</literal></expr>:</case> <comment type="block" pos:start="783:17" pos:end="783:30">/* SAU_RLAR */</comment>

    <block pos:start="785:5" pos:end="815:5">{<block_content pos:start="787:9" pos:end="813:14">

        <decl_stmt pos:start="787:9" pos:end="787:38"><decl pos:start="787:9" pos:end="787:37"><type pos:start="787:9" pos:end="787:11"><name pos:start="787:9" pos:end="787:11">int</name></type> <name pos:start="787:13" pos:end="787:18">region</name> <init pos:start="787:20" pos:end="787:37">= <expr pos:start="787:22" pos:end="787:37"><name pos:start="787:22" pos:end="787:37"><name pos:start="787:22" pos:end="787:24">cpu</name><operator pos:start="787:25" pos:end="787:26">-&gt;</operator><name pos:start="787:27" pos:end="787:29">env</name><operator pos:start="787:30" pos:end="787:30">.</operator><name pos:start="787:31" pos:end="787:33">sau</name><operator pos:start="787:34" pos:end="787:34">.</operator><name pos:start="787:35" pos:end="787:37">rnr</name></name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="791:9" pos:end="795:9"><if pos:start="791:9" pos:end="795:9">if <condition pos:start="791:12" pos:end="791:52">(<expr pos:start="791:13" pos:end="791:51"><operator pos:start="791:13" pos:end="791:13">!</operator><call pos:start="791:14" pos:end="791:51"><name pos:start="791:14" pos:end="791:24">arm_feature</name><argument_list pos:start="791:25" pos:end="791:51">(<argument pos:start="791:26" pos:end="791:34"><expr pos:start="791:26" pos:end="791:34"><operator pos:start="791:26" pos:end="791:26">&amp;</operator><name pos:start="791:27" pos:end="791:34"><name pos:start="791:27" pos:end="791:29">cpu</name><operator pos:start="791:30" pos:end="791:31">-&gt;</operator><name pos:start="791:32" pos:end="791:34">env</name></name></expr></argument>, <argument pos:start="791:37" pos:end="791:50"><expr pos:start="791:37" pos:end="791:50"><name pos:start="791:37" pos:end="791:50">ARM_FEATURE_V8</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="791:54" pos:end="795:9">{<block_content pos:start="793:13" pos:end="793:28">

            <goto pos:start="793:13" pos:end="793:28">goto <name pos:start="793:18" pos:end="793:27">bad_offset</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="797:9" pos:end="801:9"><if pos:start="797:9" pos:end="801:9">if <condition pos:start="797:12" pos:end="797:26">(<expr pos:start="797:13" pos:end="797:25"><operator pos:start="797:13" pos:end="797:13">!</operator><name pos:start="797:14" pos:end="797:25"><name pos:start="797:14" pos:end="797:18">attrs</name><operator pos:start="797:19" pos:end="797:19">.</operator><name pos:start="797:20" pos:end="797:25">secure</name></name></expr>)</condition> <block pos:start="797:28" pos:end="801:9">{<block_content pos:start="799:13" pos:end="799:19">

            <return pos:start="799:13" pos:end="799:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="803:9" pos:end="807:9"><if pos:start="803:9" pos:end="807:9">if <condition pos:start="803:12" pos:end="803:39">(<expr pos:start="803:13" pos:end="803:38"><name pos:start="803:13" pos:end="803:18">region</name> <operator pos:start="803:20" pos:end="803:21">&gt;=</operator> <name pos:start="803:23" pos:end="803:38"><name pos:start="803:23" pos:end="803:25">cpu</name><operator pos:start="803:26" pos:end="803:27">-&gt;</operator><name pos:start="803:28" pos:end="803:38">sau_sregion</name></name></expr>)</condition> <block pos:start="803:41" pos:end="807:9">{<block_content pos:start="805:13" pos:end="805:19">

            <return pos:start="805:13" pos:end="805:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="809:9" pos:end="809:50"><expr pos:start="809:9" pos:end="809:49"><name pos:start="809:9" pos:end="809:33"><name pos:start="809:9" pos:end="809:11">cpu</name><operator pos:start="809:12" pos:end="809:13">-&gt;</operator><name pos:start="809:14" pos:end="809:16">env</name><operator pos:start="809:17" pos:end="809:17">.</operator><name pos:start="809:18" pos:end="809:20">sau</name><operator pos:start="809:21" pos:end="809:21">.</operator><name pos:start="809:22" pos:end="809:25">rlar</name><index pos:start="809:26" pos:end="809:33">[<expr pos:start="809:27" pos:end="809:32"><name pos:start="809:27" pos:end="809:32">region</name></expr>]</index></name> <operator pos:start="809:35" pos:end="809:35">=</operator> <name pos:start="809:37" pos:end="809:41">value</name> <operator pos:start="809:43" pos:end="809:43">&amp;</operator> <operator pos:start="809:45" pos:end="809:45">~</operator><literal type="number" pos:start="809:46" pos:end="809:49">0x1c</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="811:9" pos:end="811:28"><expr pos:start="811:9" pos:end="811:27"><call pos:start="811:9" pos:end="811:27"><name pos:start="811:9" pos:end="811:17">tlb_flush</name><argument_list pos:start="811:18" pos:end="811:27">(<argument pos:start="811:19" pos:end="811:26"><expr pos:start="811:19" pos:end="811:26"><call pos:start="811:19" pos:end="811:26"><name pos:start="811:19" pos:end="811:21">CPU</name><argument_list pos:start="811:22" pos:end="811:26">(<argument pos:start="811:23" pos:end="811:25"><expr pos:start="811:23" pos:end="811:25"><name pos:start="811:23" pos:end="811:25">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="813:9" pos:end="813:14">break;</break>

    </block_content>}</block>

    <case pos:start="817:5" pos:end="817:15">case <expr pos:start="817:10" pos:end="817:14"><literal type="number" pos:start="817:10" pos:end="817:14">0xde4</literal></expr>:</case> <comment type="block" pos:start="817:17" pos:end="817:26">/* SFSR */</comment>

        <if_stmt pos:start="819:9" pos:end="823:9"><if pos:start="819:9" pos:end="823:9">if <condition pos:start="819:12" pos:end="819:52">(<expr pos:start="819:13" pos:end="819:51"><operator pos:start="819:13" pos:end="819:13">!</operator><call pos:start="819:14" pos:end="819:51"><name pos:start="819:14" pos:end="819:24">arm_feature</name><argument_list pos:start="819:25" pos:end="819:51">(<argument pos:start="819:26" pos:end="819:34"><expr pos:start="819:26" pos:end="819:34"><operator pos:start="819:26" pos:end="819:26">&amp;</operator><name pos:start="819:27" pos:end="819:34"><name pos:start="819:27" pos:end="819:29">cpu</name><operator pos:start="819:30" pos:end="819:31">-&gt;</operator><name pos:start="819:32" pos:end="819:34">env</name></name></expr></argument>, <argument pos:start="819:37" pos:end="819:50"><expr pos:start="819:37" pos:end="819:50"><name pos:start="819:37" pos:end="819:50">ARM_FEATURE_V8</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="819:54" pos:end="823:9">{<block_content pos:start="821:13" pos:end="821:28">

            <goto pos:start="821:13" pos:end="821:28">goto <name pos:start="821:18" pos:end="821:27">bad_offset</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="825:9" pos:end="829:9"><if pos:start="825:9" pos:end="829:9">if <condition pos:start="825:12" pos:end="825:26">(<expr pos:start="825:13" pos:end="825:25"><operator pos:start="825:13" pos:end="825:13">!</operator><name pos:start="825:14" pos:end="825:25"><name pos:start="825:14" pos:end="825:18">attrs</name><operator pos:start="825:19" pos:end="825:19">.</operator><name pos:start="825:20" pos:end="825:25">secure</name></name></expr>)</condition> <block pos:start="825:28" pos:end="829:9">{<block_content pos:start="827:13" pos:end="827:19">

            <return pos:start="827:13" pos:end="827:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="831:9" pos:end="831:36"><expr pos:start="831:9" pos:end="831:35"><name pos:start="831:9" pos:end="831:25"><name pos:start="831:9" pos:end="831:11">cpu</name><operator pos:start="831:12" pos:end="831:13">-&gt;</operator><name pos:start="831:14" pos:end="831:16">env</name><operator pos:start="831:17" pos:end="831:17">.</operator><name pos:start="831:18" pos:end="831:20">v7m</name><operator pos:start="831:21" pos:end="831:21">.</operator><name pos:start="831:22" pos:end="831:25">sfsr</name></name> <operator pos:start="831:27" pos:end="831:28">&amp;=</operator> <operator pos:start="831:30" pos:end="831:30">~</operator><name pos:start="831:31" pos:end="831:35">value</name></expr>;</expr_stmt> <comment type="block" pos:start="831:38" pos:end="831:46">/* W1C */</comment>

        <break pos:start="833:9" pos:end="833:14">break;</break>

    <case pos:start="835:5" pos:end="835:15">case <expr pos:start="835:10" pos:end="835:14"><literal type="number" pos:start="835:10" pos:end="835:14">0xde8</literal></expr>:</case> <comment type="block" pos:start="835:17" pos:end="835:26">/* SFAR */</comment>

        <if_stmt pos:start="837:9" pos:end="841:9"><if pos:start="837:9" pos:end="841:9">if <condition pos:start="837:12" pos:end="837:52">(<expr pos:start="837:13" pos:end="837:51"><operator pos:start="837:13" pos:end="837:13">!</operator><call pos:start="837:14" pos:end="837:51"><name pos:start="837:14" pos:end="837:24">arm_feature</name><argument_list pos:start="837:25" pos:end="837:51">(<argument pos:start="837:26" pos:end="837:34"><expr pos:start="837:26" pos:end="837:34"><operator pos:start="837:26" pos:end="837:26">&amp;</operator><name pos:start="837:27" pos:end="837:34"><name pos:start="837:27" pos:end="837:29">cpu</name><operator pos:start="837:30" pos:end="837:31">-&gt;</operator><name pos:start="837:32" pos:end="837:34">env</name></name></expr></argument>, <argument pos:start="837:37" pos:end="837:50"><expr pos:start="837:37" pos:end="837:50"><name pos:start="837:37" pos:end="837:50">ARM_FEATURE_V8</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="837:54" pos:end="841:9">{<block_content pos:start="839:13" pos:end="839:28">

            <goto pos:start="839:13" pos:end="839:28">goto <name pos:start="839:18" pos:end="839:27">bad_offset</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="843:9" pos:end="847:9"><if pos:start="843:9" pos:end="847:9">if <condition pos:start="843:12" pos:end="843:26">(<expr pos:start="843:13" pos:end="843:25"><operator pos:start="843:13" pos:end="843:13">!</operator><name pos:start="843:14" pos:end="843:25"><name pos:start="843:14" pos:end="843:18">attrs</name><operator pos:start="843:19" pos:end="843:19">.</operator><name pos:start="843:20" pos:end="843:25">secure</name></name></expr>)</condition> <block pos:start="843:28" pos:end="847:9">{<block_content pos:start="845:13" pos:end="845:19">

            <return pos:start="845:13" pos:end="845:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="849:9" pos:end="849:34"><expr pos:start="849:9" pos:end="849:33"><name pos:start="849:9" pos:end="849:25"><name pos:start="849:9" pos:end="849:11">cpu</name><operator pos:start="849:12" pos:end="849:13">-&gt;</operator><name pos:start="849:14" pos:end="849:16">env</name><operator pos:start="849:17" pos:end="849:17">.</operator><name pos:start="849:18" pos:end="849:20">v7m</name><operator pos:start="849:21" pos:end="849:21">.</operator><name pos:start="849:22" pos:end="849:25">sfsr</name></name> <operator pos:start="849:27" pos:end="849:27">=</operator> <name pos:start="849:29" pos:end="849:33">value</name></expr>;</expr_stmt>

        <break pos:start="851:9" pos:end="851:14">break;</break>

    <case pos:start="853:5" pos:end="853:15">case <expr pos:start="853:10" pos:end="853:14"><literal type="number" pos:start="853:10" pos:end="853:14">0xf00</literal></expr>:</case> <comment type="block" pos:start="853:17" pos:end="853:59">/* Software Triggered Interrupt Register */</comment>

    <block pos:start="855:5" pos:end="867:5">{<block_content pos:start="857:9" pos:end="865:14">

        <decl_stmt pos:start="857:9" pos:end="857:54"><decl pos:start="857:9" pos:end="857:53"><type pos:start="857:9" pos:end="857:11"><name pos:start="857:9" pos:end="857:11">int</name></type> <name pos:start="857:13" pos:end="857:18">excnum</name> <init pos:start="857:20" pos:end="857:53">= <expr pos:start="857:22" pos:end="857:53"><operator pos:start="857:22" pos:end="857:22">(</operator><name pos:start="857:23" pos:end="857:27">value</name> <operator pos:start="857:29" pos:end="857:29">&amp;</operator> <literal type="number" pos:start="857:31" pos:end="857:35">0x1ff</literal><operator pos:start="857:36" pos:end="857:36">)</operator> <operator pos:start="857:38" pos:end="857:38">+</operator> <name pos:start="857:40" pos:end="857:53">NVIC_FIRST_IRQ</name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="859:9" pos:end="863:9"><if pos:start="859:9" pos:end="863:9">if <condition pos:start="859:12" pos:end="859:32">(<expr pos:start="859:13" pos:end="859:31"><name pos:start="859:13" pos:end="859:18">excnum</name> <operator pos:start="859:20" pos:end="859:20">&lt;</operator> <name pos:start="859:22" pos:end="859:31"><name pos:start="859:22" pos:end="859:22">s</name><operator pos:start="859:23" pos:end="859:24">-&gt;</operator><name pos:start="859:25" pos:end="859:31">num_irq</name></name></expr>)</condition> <block pos:start="859:34" pos:end="863:9">{<block_content pos:start="861:13" pos:end="861:54">

            <expr_stmt pos:start="861:13" pos:end="861:54"><expr pos:start="861:13" pos:end="861:53"><call pos:start="861:13" pos:end="861:53"><name pos:start="861:13" pos:end="861:35">armv7m_nvic_set_pending</name><argument_list pos:start="861:36" pos:end="861:53">(<argument pos:start="861:37" pos:end="861:37"><expr pos:start="861:37" pos:end="861:37"><name pos:start="861:37" pos:end="861:37">s</name></expr></argument>, <argument pos:start="861:40" pos:end="861:45"><expr pos:start="861:40" pos:end="861:45"><name pos:start="861:40" pos:end="861:45">excnum</name></expr></argument>, <argument pos:start="861:48" pos:end="861:52"><expr pos:start="861:48" pos:end="861:52"><name pos:start="861:48" pos:end="861:52">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="865:9" pos:end="865:14">break;</break>

    </block_content>}</block>

    <default pos:start="869:5" pos:end="869:12">default:</default>

    <label pos:start="871:5" pos:end="871:15"><name pos:start="871:5" pos:end="871:14">bad_offset</name>:</label>

        <expr_stmt pos:start="873:9" pos:end="875:63"><expr pos:start="873:9" pos:end="875:62"><call pos:start="873:9" pos:end="875:62"><name pos:start="873:9" pos:end="873:21">qemu_log_mask</name><argument_list pos:start="873:22" pos:end="875:62">(<argument pos:start="873:23" pos:end="873:37"><expr pos:start="873:23" pos:end="873:37"><name pos:start="873:23" pos:end="873:37">LOG_GUEST_ERROR</name></expr></argument>,

                      <argument pos:start="875:23" pos:end="875:53"><expr pos:start="875:23" pos:end="875:53"><literal type="string" pos:start="875:23" pos:end="875:53">"NVIC: Bad write offset 0x%x\n"</literal></expr></argument>, <argument pos:start="875:56" pos:end="875:61"><expr pos:start="875:56" pos:end="875:61"><name pos:start="875:56" pos:end="875:61">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
