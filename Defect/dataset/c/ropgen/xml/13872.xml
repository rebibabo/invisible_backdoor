<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13872.c" pos:tabs="8"><function pos:start="1:1" pos:end="1171:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">open_output_file</name><parameter_list pos:start="1:28" pos:end="1:68">(<parameter pos:start="1:29" pos:end="1:45"><decl pos:start="1:29" pos:end="1:45"><type pos:start="1:29" pos:end="1:45"><name pos:start="1:29" pos:end="1:42">OptionsContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">o</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:67"><decl pos:start="1:48" pos:end="1:67"><type pos:start="1:48" pos:end="1:67"><specifier pos:start="1:48" pos:end="1:52">const</specifier> <name pos:start="1:54" pos:end="1:57">char</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:67">filename</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="1171:1">{<block_content pos:start="5:5" pos:end="1169:13">

    <decl_stmt pos:start="5:5" pos:end="5:24"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19">AVFormatContext</name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:23">oc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:12"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:12">j</name></decl>, <decl pos:start="7:15" pos:end="7:17"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:15" pos:end="7:17">err</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">AVOutputFormat</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:32">file_oformat</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:14">OutputFile</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:18">of</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">OutputStream</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:21">ost</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:15">InputStream</name>  <modifier pos:start="15:18" pos:end="15:18">*</modifier></type><name pos:start="15:19" pos:end="15:21">ist</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:37"><decl pos:start="17:5" pos:end="17:36"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">AVDictionary</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:29">unused_opts</name> <init pos:start="17:31" pos:end="17:36">= <expr pos:start="17:33" pos:end="17:36"><name pos:start="17:33" pos:end="17:36">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:32"><decl pos:start="19:5" pos:end="19:31"><type pos:start="19:5" pos:end="19:23"><name pos:start="19:5" pos:end="19:21">AVDictionaryEntry</name> <modifier pos:start="19:23" pos:end="19:23">*</modifier></type><name pos:start="19:24" pos:end="19:24">e</name> <init pos:start="19:26" pos:end="19:31">= <expr pos:start="19:28" pos:end="19:31"><name pos:start="19:28" pos:end="19:31">NULL</name></expr></init></decl>;</decl_stmt>





    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:68">(<expr pos:start="25:9" pos:end="25:67"><name pos:start="25:9" pos:end="25:20"><name pos:start="25:9" pos:end="25:9">o</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:20">stop_time</name></name> <operator pos:start="25:22" pos:end="25:23">!=</operator> <name pos:start="25:25" pos:end="25:33">INT64_MAX</name> <operator pos:start="25:35" pos:end="25:36">&amp;&amp;</operator> <name pos:start="25:38" pos:end="25:54"><name pos:start="25:38" pos:end="25:38">o</name><operator pos:start="25:39" pos:end="25:40">-&gt;</operator><name pos:start="25:41" pos:end="25:54">recording_time</name></name> <operator pos:start="25:56" pos:end="25:57">!=</operator> <name pos:start="25:59" pos:end="25:67">INT64_MAX</name></expr>)</condition> <block pos:start="25:70" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:88">

        <expr_stmt pos:start="27:9" pos:end="27:33"><expr pos:start="27:9" pos:end="27:32"><name pos:start="27:9" pos:end="27:20"><name pos:start="27:9" pos:end="27:9">o</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:20">stop_time</name></name> <operator pos:start="27:22" pos:end="27:22">=</operator> <name pos:start="27:24" pos:end="27:32">INT64_MAX</name></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:88"><expr pos:start="29:9" pos:end="29:87"><call pos:start="29:9" pos:end="29:87"><name pos:start="29:9" pos:end="29:14">av_log</name><argument_list pos:start="29:15" pos:end="29:87">(<argument pos:start="29:16" pos:end="29:19"><expr pos:start="29:16" pos:end="29:19"><name pos:start="29:16" pos:end="29:19">NULL</name></expr></argument>, <argument pos:start="29:22" pos:end="29:35"><expr pos:start="29:22" pos:end="29:35"><name pos:start="29:22" pos:end="29:35">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="29:38" pos:end="29:86"><expr pos:start="29:38" pos:end="29:86"><literal type="string" pos:start="29:38" pos:end="29:86">"-t and -to cannot be used together; using -t.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="51:5"><if pos:start="35:5" pos:end="51:5">if <condition pos:start="35:8" pos:end="35:68">(<expr pos:start="35:9" pos:end="35:67"><name pos:start="35:9" pos:end="35:20"><name pos:start="35:9" pos:end="35:9">o</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:20">stop_time</name></name> <operator pos:start="35:22" pos:end="35:23">!=</operator> <name pos:start="35:25" pos:end="35:33">INT64_MAX</name> <operator pos:start="35:35" pos:end="35:36">&amp;&amp;</operator> <name pos:start="35:38" pos:end="35:54"><name pos:start="35:38" pos:end="35:38">o</name><operator pos:start="35:39" pos:end="35:40">-&gt;</operator><name pos:start="35:41" pos:end="35:54">recording_time</name></name> <operator pos:start="35:56" pos:end="35:57">==</operator> <name pos:start="35:59" pos:end="35:67">INT64_MAX</name></expr>)</condition> <block pos:start="35:70" pos:end="51:5">{<block_content pos:start="37:9" pos:end="49:9">

        <decl_stmt pos:start="37:9" pos:end="37:81"><decl pos:start="37:9" pos:end="37:80"><type pos:start="37:9" pos:end="37:15"><name pos:start="37:9" pos:end="37:15">int64_t</name></type> <name pos:start="37:17" pos:end="37:26">start_time</name> <init pos:start="37:28" pos:end="37:80">= <expr pos:start="37:30" pos:end="37:80"><ternary pos:start="37:30" pos:end="37:80"><condition pos:start="37:30" pos:end="37:62"><expr pos:start="37:30" pos:end="37:60"><name pos:start="37:30" pos:end="37:42"><name pos:start="37:30" pos:end="37:30">o</name><operator pos:start="37:31" pos:end="37:32">-&gt;</operator><name pos:start="37:33" pos:end="37:42">start_time</name></name> <operator pos:start="37:44" pos:end="37:45">==</operator> <name pos:start="37:47" pos:end="37:60">AV_NOPTS_VALUE</name></expr> ?</condition><then pos:start="37:64" pos:end="37:64"> <expr pos:start="37:64" pos:end="37:64"><literal type="number" pos:start="37:64" pos:end="37:64">0</literal></expr> </then><else pos:start="37:66" pos:end="37:80">: <expr pos:start="37:68" pos:end="37:80"><name pos:start="37:68" pos:end="37:80"><name pos:start="37:68" pos:end="37:68">o</name><operator pos:start="37:69" pos:end="37:70">-&gt;</operator><name pos:start="37:71" pos:end="37:80">start_time</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="39:9" pos:end="49:9"><if pos:start="39:9" pos:end="45:9">if <condition pos:start="39:12" pos:end="39:39">(<expr pos:start="39:13" pos:end="39:38"><name pos:start="39:13" pos:end="39:24"><name pos:start="39:13" pos:end="39:13">o</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:24">stop_time</name></name> <operator pos:start="39:26" pos:end="39:27">&lt;=</operator> <name pos:start="39:29" pos:end="39:38">start_time</name></expr>)</condition> <block pos:start="39:41" pos:end="45:9">{<block_content pos:start="41:13" pos:end="43:28">

            <expr_stmt pos:start="41:13" pos:end="41:82"><expr pos:start="41:13" pos:end="41:81"><call pos:start="41:13" pos:end="41:81"><name pos:start="41:13" pos:end="41:18">av_log</name><argument_list pos:start="41:19" pos:end="41:81">(<argument pos:start="41:20" pos:end="41:23"><expr pos:start="41:20" pos:end="41:23"><name pos:start="41:20" pos:end="41:23">NULL</name></expr></argument>, <argument pos:start="41:26" pos:end="41:37"><expr pos:start="41:26" pos:end="41:37"><name pos:start="41:26" pos:end="41:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="41:40" pos:end="41:80"><expr pos:start="41:40" pos:end="41:80"><literal type="string" pos:start="41:40" pos:end="41:80">"-to value smaller than -ss; aborting.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:28"><expr pos:start="43:13" pos:end="43:27"><call pos:start="43:13" pos:end="43:27"><name pos:start="43:13" pos:end="43:24">exit_program</name><argument_list pos:start="43:25" pos:end="43:27">(<argument pos:start="43:26" pos:end="43:26"><expr pos:start="43:26" pos:end="43:26"><literal type="number" pos:start="43:26" pos:end="43:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="45:11" pos:end="49:9">else <block pos:start="45:16" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:58">

            <expr_stmt pos:start="47:13" pos:end="47:58"><expr pos:start="47:13" pos:end="47:57"><name pos:start="47:13" pos:end="47:29"><name pos:start="47:13" pos:end="47:13">o</name><operator pos:start="47:14" pos:end="47:15">-&gt;</operator><name pos:start="47:16" pos:end="47:29">recording_time</name></name> <operator pos:start="47:31" pos:end="47:31">=</operator> <name pos:start="47:33" pos:end="47:44"><name pos:start="47:33" pos:end="47:33">o</name><operator pos:start="47:34" pos:end="47:35">-&gt;</operator><name pos:start="47:36" pos:end="47:44">stop_time</name></name> <operator pos:start="47:46" pos:end="47:46">-</operator> <name pos:start="47:48" pos:end="47:57">start_time</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:46"><expr pos:start="55:5" pos:end="55:45"><call pos:start="55:5" pos:end="55:45"><name pos:start="55:5" pos:end="55:14">GROW_ARRAY</name><argument_list pos:start="55:15" pos:end="55:45">(<argument pos:start="55:16" pos:end="55:27"><expr pos:start="55:16" pos:end="55:27"><name pos:start="55:16" pos:end="55:27">output_files</name></expr></argument>, <argument pos:start="55:30" pos:end="55:44"><expr pos:start="55:30" pos:end="55:44"><name pos:start="55:30" pos:end="55:44">nb_output_files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:33"><expr pos:start="57:5" pos:end="57:32"><name pos:start="57:5" pos:end="57:6">of</name> <operator pos:start="57:8" pos:end="57:8">=</operator> <call pos:start="57:10" pos:end="57:32"><name pos:start="57:10" pos:end="57:19">av_mallocz</name><argument_list pos:start="57:20" pos:end="57:32">(<argument pos:start="57:21" pos:end="57:31"><expr pos:start="57:21" pos:end="57:31"><sizeof pos:start="57:21" pos:end="57:31">sizeof<argument_list pos:start="57:27" pos:end="57:31">(<argument pos:start="57:28" pos:end="57:30"><expr pos:start="57:28" pos:end="57:30"><operator pos:start="57:28" pos:end="57:28">*</operator><name pos:start="57:29" pos:end="57:30">of</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="61:24"><if pos:start="59:5" pos:end="61:24">if <condition pos:start="59:8" pos:end="59:12">(<expr pos:start="59:9" pos:end="59:11"><operator pos:start="59:9" pos:end="59:9">!</operator><name pos:start="59:10" pos:end="59:11">of</name></expr>)</condition><block type="pseudo" pos:start="61:9" pos:end="61:24"><block_content pos:start="61:9" pos:end="61:24">

        <expr_stmt pos:start="61:9" pos:end="61:24"><expr pos:start="61:9" pos:end="61:23"><call pos:start="61:9" pos:end="61:23"><name pos:start="61:9" pos:end="61:20">exit_program</name><argument_list pos:start="61:21" pos:end="61:23">(<argument pos:start="61:22" pos:end="61:22"><expr pos:start="61:22" pos:end="61:22"><literal type="number" pos:start="61:22" pos:end="61:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:43"><expr pos:start="63:5" pos:end="63:42"><name pos:start="63:5" pos:end="63:37"><name pos:start="63:5" pos:end="63:16">output_files</name><index pos:start="63:17" pos:end="63:37">[<expr pos:start="63:18" pos:end="63:36"><name pos:start="63:18" pos:end="63:32">nb_output_files</name> <operator pos:start="63:34" pos:end="63:34">-</operator> <literal type="number" pos:start="63:36" pos:end="63:36">1</literal></expr>]</index></name> <operator pos:start="63:39" pos:end="63:39">=</operator> <name pos:start="63:41" pos:end="63:42">of</name></expr>;</expr_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:43"><expr pos:start="67:5" pos:end="67:42"><name pos:start="67:5" pos:end="67:17"><name pos:start="67:5" pos:end="67:6">of</name><operator pos:start="67:7" pos:end="67:8">-&gt;</operator><name pos:start="67:9" pos:end="67:17">ost_index</name></name>      <operator pos:start="67:24" pos:end="67:24">=</operator> <name pos:start="67:26" pos:end="67:42">nb_output_streams</name></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:43"><expr pos:start="69:5" pos:end="69:42"><name pos:start="69:5" pos:end="69:22"><name pos:start="69:5" pos:end="69:6">of</name><operator pos:start="69:7" pos:end="69:8">-&gt;</operator><name pos:start="69:9" pos:end="69:22">recording_time</name></name> <operator pos:start="69:24" pos:end="69:24">=</operator> <name pos:start="69:26" pos:end="69:42"><name pos:start="69:26" pos:end="69:26">o</name><operator pos:start="69:27" pos:end="69:28">-&gt;</operator><name pos:start="69:29" pos:end="69:42">recording_time</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:39"><expr pos:start="71:5" pos:end="71:38"><name pos:start="71:5" pos:end="71:18"><name pos:start="71:5" pos:end="71:6">of</name><operator pos:start="71:7" pos:end="71:8">-&gt;</operator><name pos:start="71:9" pos:end="71:18">start_time</name></name>     <operator pos:start="71:24" pos:end="71:24">=</operator> <name pos:start="71:26" pos:end="71:38"><name pos:start="71:26" pos:end="71:26">o</name><operator pos:start="71:27" pos:end="71:28">-&gt;</operator><name pos:start="71:29" pos:end="71:38">start_time</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:43"><expr pos:start="73:5" pos:end="73:42"><name pos:start="73:5" pos:end="73:22"><name pos:start="73:5" pos:end="73:6">of</name><operator pos:start="73:7" pos:end="73:8">-&gt;</operator><name pos:start="73:9" pos:end="73:22">limit_filesize</name></name> <operator pos:start="73:24" pos:end="73:24">=</operator> <name pos:start="73:26" pos:end="73:42"><name pos:start="73:26" pos:end="73:26">o</name><operator pos:start="73:27" pos:end="73:28">-&gt;</operator><name pos:start="73:29" pos:end="73:42">limit_filesize</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:37"><expr pos:start="75:5" pos:end="75:36"><name pos:start="75:5" pos:end="75:16"><name pos:start="75:5" pos:end="75:6">of</name><operator pos:start="75:7" pos:end="75:8">-&gt;</operator><name pos:start="75:9" pos:end="75:16">shortest</name></name>       <operator pos:start="75:24" pos:end="75:24">=</operator> <name pos:start="75:26" pos:end="75:36"><name pos:start="75:26" pos:end="75:26">o</name><operator pos:start="75:27" pos:end="75:28">-&gt;</operator><name pos:start="75:29" pos:end="75:36">shortest</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:50"><expr pos:start="77:5" pos:end="77:49"><call pos:start="77:5" pos:end="77:49"><name pos:start="77:5" pos:end="77:16">av_dict_copy</name><argument_list pos:start="77:17" pos:end="77:49">(<argument pos:start="77:18" pos:end="77:26"><expr pos:start="77:18" pos:end="77:26"><operator pos:start="77:18" pos:end="77:18">&amp;</operator><name pos:start="77:19" pos:end="77:26"><name pos:start="77:19" pos:end="77:20">of</name><operator pos:start="77:21" pos:end="77:22">-&gt;</operator><name pos:start="77:23" pos:end="77:26">opts</name></name></expr></argument>, <argument pos:start="77:29" pos:end="77:45"><expr pos:start="77:29" pos:end="77:45"><name pos:start="77:29" pos:end="77:45"><name pos:start="77:29" pos:end="77:29">o</name><operator pos:start="77:30" pos:end="77:31">-&gt;</operator><name pos:start="77:32" pos:end="77:32">g</name><operator pos:start="77:33" pos:end="77:34">-&gt;</operator><name pos:start="77:35" pos:end="77:45">format_opts</name></name></expr></argument>, <argument pos:start="77:48" pos:end="77:48"><expr pos:start="77:48" pos:end="77:48"><literal type="number" pos:start="77:48" pos:end="77:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="81:5" pos:end="83:27"><if pos:start="81:5" pos:end="83:27">if <condition pos:start="81:8" pos:end="81:31">(<expr pos:start="81:9" pos:end="81:30"><operator pos:start="81:9" pos:end="81:9">!</operator><call pos:start="81:10" pos:end="81:30"><name pos:start="81:10" pos:end="81:15">strcmp</name><argument_list pos:start="81:16" pos:end="81:30">(<argument pos:start="81:17" pos:end="81:24"><expr pos:start="81:17" pos:end="81:24"><name pos:start="81:17" pos:end="81:24">filename</name></expr></argument>, <argument pos:start="81:27" pos:end="81:29"><expr pos:start="81:27" pos:end="81:29"><literal type="string" pos:start="81:27" pos:end="81:29">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="83:9" pos:end="83:27"><block_content pos:start="83:9" pos:end="83:27">

        <expr_stmt pos:start="83:9" pos:end="83:27"><expr pos:start="83:9" pos:end="83:26"><name pos:start="83:9" pos:end="83:16">filename</name> <operator pos:start="83:18" pos:end="83:18">=</operator> <literal type="string" pos:start="83:20" pos:end="83:26">"pipe:"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:73"><expr pos:start="87:5" pos:end="87:72"><name pos:start="87:5" pos:end="87:7">err</name> <operator pos:start="87:9" pos:end="87:9">=</operator> <call pos:start="87:11" pos:end="87:72"><name pos:start="87:11" pos:end="87:40">avformat_alloc_output_context2</name><argument_list pos:start="87:41" pos:end="87:72">(<argument pos:start="87:42" pos:end="87:44"><expr pos:start="87:42" pos:end="87:44"><operator pos:start="87:42" pos:end="87:42">&amp;</operator><name pos:start="87:43" pos:end="87:44">oc</name></expr></argument>, <argument pos:start="87:47" pos:end="87:50"><expr pos:start="87:47" pos:end="87:50"><name pos:start="87:47" pos:end="87:50">NULL</name></expr></argument>, <argument pos:start="87:53" pos:end="87:61"><expr pos:start="87:53" pos:end="87:61"><name pos:start="87:53" pos:end="87:61"><name pos:start="87:53" pos:end="87:53">o</name><operator pos:start="87:54" pos:end="87:55">-&gt;</operator><name pos:start="87:56" pos:end="87:61">format</name></name></expr></argument>, <argument pos:start="87:64" pos:end="87:71"><expr pos:start="87:64" pos:end="87:71"><name pos:start="87:64" pos:end="87:71">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="89:5" pos:end="95:5"><if pos:start="89:5" pos:end="95:5">if <condition pos:start="89:8" pos:end="89:12">(<expr pos:start="89:9" pos:end="89:11"><operator pos:start="89:9" pos:end="89:9">!</operator><name pos:start="89:10" pos:end="89:11">oc</name></expr>)</condition> <block pos:start="89:14" pos:end="95:5">{<block_content pos:start="91:9" pos:end="93:24">

        <expr_stmt pos:start="91:9" pos:end="91:35"><expr pos:start="91:9" pos:end="91:34"><call pos:start="91:9" pos:end="91:34"><name pos:start="91:9" pos:end="91:19">print_error</name><argument_list pos:start="91:20" pos:end="91:34">(<argument pos:start="91:21" pos:end="91:28"><expr pos:start="91:21" pos:end="91:28"><name pos:start="91:21" pos:end="91:28">filename</name></expr></argument>, <argument pos:start="91:31" pos:end="91:33"><expr pos:start="91:31" pos:end="91:33"><name pos:start="91:31" pos:end="91:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:24"><expr pos:start="93:9" pos:end="93:23"><call pos:start="93:9" pos:end="93:23"><name pos:start="93:9" pos:end="93:20">exit_program</name><argument_list pos:start="93:21" pos:end="93:23">(<argument pos:start="93:22" pos:end="93:22"><expr pos:start="93:22" pos:end="93:22"><literal type="number" pos:start="93:22" pos:end="93:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="99:5" pos:end="99:17"><expr pos:start="99:5" pos:end="99:16"><name pos:start="99:5" pos:end="99:11"><name pos:start="99:5" pos:end="99:6">of</name><operator pos:start="99:7" pos:end="99:8">-&gt;</operator><name pos:start="99:9" pos:end="99:11">ctx</name></name> <operator pos:start="99:13" pos:end="99:13">=</operator> <name pos:start="99:15" pos:end="99:16">oc</name></expr>;</expr_stmt>

    <if_stmt pos:start="101:5" pos:end="103:41"><if pos:start="101:5" pos:end="103:41">if <condition pos:start="101:8" pos:end="101:39">(<expr pos:start="101:9" pos:end="101:38"><name pos:start="101:9" pos:end="101:25"><name pos:start="101:9" pos:end="101:9">o</name><operator pos:start="101:10" pos:end="101:11">-&gt;</operator><name pos:start="101:12" pos:end="101:25">recording_time</name></name> <operator pos:start="101:27" pos:end="101:28">!=</operator> <name pos:start="101:30" pos:end="101:38">INT64_MAX</name></expr>)</condition><block type="pseudo" pos:start="103:9" pos:end="103:41"><block_content pos:start="103:9" pos:end="103:41">

        <expr_stmt pos:start="103:9" pos:end="103:41"><expr pos:start="103:9" pos:end="103:40"><name pos:start="103:9" pos:end="103:20"><name pos:start="103:9" pos:end="103:10">oc</name><operator pos:start="103:11" pos:end="103:12">-&gt;</operator><name pos:start="103:13" pos:end="103:20">duration</name></name> <operator pos:start="103:22" pos:end="103:22">=</operator> <name pos:start="103:24" pos:end="103:40"><name pos:start="103:24" pos:end="103:24">o</name><operator pos:start="103:25" pos:end="103:26">-&gt;</operator><name pos:start="103:27" pos:end="103:40">recording_time</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="107:5" pos:end="107:30"><expr pos:start="107:5" pos:end="107:29"><name pos:start="107:5" pos:end="107:16">file_oformat</name><operator pos:start="107:17" pos:end="107:17">=</operator> <name pos:start="107:19" pos:end="107:29"><name pos:start="107:19" pos:end="107:20">oc</name><operator pos:start="107:21" pos:end="107:22">-&gt;</operator><name pos:start="107:23" pos:end="107:29">oformat</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:36"><expr pos:start="109:5" pos:end="109:35"><name pos:start="109:5" pos:end="109:26"><name pos:start="109:5" pos:end="109:6">oc</name><operator pos:start="109:7" pos:end="109:8">-&gt;</operator><name pos:start="109:9" pos:end="109:26">interrupt_callback</name></name> <operator pos:start="109:28" pos:end="109:28">=</operator> <name pos:start="109:30" pos:end="109:35">int_cb</name></expr>;</expr_stmt>



    <comment type="block" pos:start="113:5" pos:end="113:54">/* create streams for all unlabeled output pads */</comment>

    <for pos:start="115:5" pos:end="145:5">for <control pos:start="115:9" pos:end="115:41">(<init pos:start="115:10" pos:end="115:15"><expr pos:start="115:10" pos:end="115:14"><name pos:start="115:10" pos:end="115:10">i</name> <operator pos:start="115:12" pos:end="115:12">=</operator> <literal type="number" pos:start="115:14" pos:end="115:14">0</literal></expr>;</init> <condition pos:start="115:17" pos:end="115:36"><expr pos:start="115:17" pos:end="115:35"><name pos:start="115:17" pos:end="115:17">i</name> <operator pos:start="115:19" pos:end="115:19">&lt;</operator> <name pos:start="115:21" pos:end="115:35">nb_filtergraphs</name></expr>;</condition> <incr pos:start="115:38" pos:end="115:40"><expr pos:start="115:38" pos:end="115:40"><name pos:start="115:38" pos:end="115:38">i</name><operator pos:start="115:39" pos:end="115:40">++</operator></expr></incr>)</control> <block pos:start="115:43" pos:end="145:5">{<block_content pos:start="117:9" pos:end="143:9">

        <decl_stmt pos:start="117:9" pos:end="117:42"><decl pos:start="117:9" pos:end="117:41"><type pos:start="117:9" pos:end="117:21"><name pos:start="117:9" pos:end="117:19">FilterGraph</name> <modifier pos:start="117:21" pos:end="117:21">*</modifier></type><name pos:start="117:22" pos:end="117:23">fg</name> <init pos:start="117:25" pos:end="117:41">= <expr pos:start="117:27" pos:end="117:41"><name pos:start="117:27" pos:end="117:41"><name pos:start="117:27" pos:end="117:38">filtergraphs</name><index pos:start="117:39" pos:end="117:41">[<expr pos:start="117:40" pos:end="117:40"><name pos:start="117:40" pos:end="117:40">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <for pos:start="119:9" pos:end="143:9">for <control pos:start="119:13" pos:end="119:44">(<init pos:start="119:14" pos:end="119:19"><expr pos:start="119:14" pos:end="119:18"><name pos:start="119:14" pos:end="119:14">j</name> <operator pos:start="119:16" pos:end="119:16">=</operator> <literal type="number" pos:start="119:18" pos:end="119:18">0</literal></expr>;</init> <condition pos:start="119:21" pos:end="119:39"><expr pos:start="119:21" pos:end="119:38"><name pos:start="119:21" pos:end="119:21">j</name> <operator pos:start="119:23" pos:end="119:23">&lt;</operator> <name pos:start="119:25" pos:end="119:38"><name pos:start="119:25" pos:end="119:26">fg</name><operator pos:start="119:27" pos:end="119:28">-&gt;</operator><name pos:start="119:29" pos:end="119:38">nb_outputs</name></name></expr>;</condition> <incr pos:start="119:41" pos:end="119:43"><expr pos:start="119:41" pos:end="119:43"><name pos:start="119:41" pos:end="119:41">j</name><operator pos:start="119:42" pos:end="119:43">++</operator></expr></incr>)</control> <block pos:start="119:46" pos:end="143:9">{<block_content pos:start="121:13" pos:end="141:47">

            <decl_stmt pos:start="121:13" pos:end="121:51"><decl pos:start="121:13" pos:end="121:50"><type pos:start="121:13" pos:end="121:26"><name pos:start="121:13" pos:end="121:24">OutputFilter</name> <modifier pos:start="121:26" pos:end="121:26">*</modifier></type><name pos:start="121:27" pos:end="121:33">ofilter</name> <init pos:start="121:35" pos:end="121:50">= <expr pos:start="121:37" pos:end="121:50"><name pos:start="121:37" pos:end="121:50"><name pos:start="121:37" pos:end="121:38">fg</name><operator pos:start="121:39" pos:end="121:40">-&gt;</operator><name pos:start="121:41" pos:end="121:47">outputs</name><index pos:start="121:48" pos:end="121:50">[<expr pos:start="121:49" pos:end="121:49"><name pos:start="121:49" pos:end="121:49">j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="125:13" pos:end="127:25"><if pos:start="125:13" pos:end="127:25">if <condition pos:start="125:16" pos:end="125:60">(<expr pos:start="125:17" pos:end="125:59"><operator pos:start="125:17" pos:end="125:17">!</operator><name pos:start="125:18" pos:end="125:33"><name pos:start="125:18" pos:end="125:24">ofilter</name><operator pos:start="125:25" pos:end="125:26">-&gt;</operator><name pos:start="125:27" pos:end="125:33">out_tmp</name></name> <operator pos:start="125:35" pos:end="125:36">||</operator> <name pos:start="125:38" pos:end="125:59"><name pos:start="125:38" pos:end="125:44">ofilter</name><operator pos:start="125:45" pos:end="125:46">-&gt;</operator><name pos:start="125:47" pos:end="125:53">out_tmp</name><operator pos:start="125:54" pos:end="125:55">-&gt;</operator><name pos:start="125:56" pos:end="125:59">name</name></name></expr>)</condition><block type="pseudo" pos:start="127:17" pos:end="127:25"><block_content pos:start="127:17" pos:end="127:25">

                <continue pos:start="127:17" pos:end="127:25">continue;</continue></block_content></block></if></if_stmt>



            <switch pos:start="131:13" pos:end="139:13">switch <condition pos:start="131:20" pos:end="131:34">(<expr pos:start="131:21" pos:end="131:33"><name pos:start="131:21" pos:end="131:33"><name pos:start="131:21" pos:end="131:27">ofilter</name><operator pos:start="131:28" pos:end="131:29">-&gt;</operator><name pos:start="131:30" pos:end="131:33">type</name></name></expr>)</condition> <block pos:start="131:36" pos:end="139:13">{<block_content pos:start="133:13" pos:end="137:71">

            <case pos:start="133:13" pos:end="133:36">case <expr pos:start="133:18" pos:end="133:35"><name pos:start="133:18" pos:end="133:35">AVMEDIA_TYPE_VIDEO</name></expr>:</case>    <expr_stmt pos:start="133:41" pos:end="133:64"><expr pos:start="133:41" pos:end="133:63"><name pos:start="133:41" pos:end="133:56"><name pos:start="133:41" pos:end="133:41">o</name><operator pos:start="133:42" pos:end="133:43">-&gt;</operator><name pos:start="133:44" pos:end="133:56">video_disable</name></name>    <operator pos:start="133:61" pos:end="133:61">=</operator> <literal type="number" pos:start="133:63" pos:end="133:63">1</literal></expr>;</expr_stmt> <break pos:start="133:66" pos:end="133:71">break;</break>

            <case pos:start="135:13" pos:end="135:36">case <expr pos:start="135:18" pos:end="135:35"><name pos:start="135:18" pos:end="135:35">AVMEDIA_TYPE_AUDIO</name></expr>:</case>    <expr_stmt pos:start="135:41" pos:end="135:64"><expr pos:start="135:41" pos:end="135:63"><name pos:start="135:41" pos:end="135:56"><name pos:start="135:41" pos:end="135:41">o</name><operator pos:start="135:42" pos:end="135:43">-&gt;</operator><name pos:start="135:44" pos:end="135:56">audio_disable</name></name>    <operator pos:start="135:61" pos:end="135:61">=</operator> <literal type="number" pos:start="135:63" pos:end="135:63">1</literal></expr>;</expr_stmt> <break pos:start="135:66" pos:end="135:71">break;</break>

            <case pos:start="137:13" pos:end="137:39">case <expr pos:start="137:18" pos:end="137:38"><name pos:start="137:18" pos:end="137:38">AVMEDIA_TYPE_SUBTITLE</name></expr>:</case> <expr_stmt pos:start="137:41" pos:end="137:64"><expr pos:start="137:41" pos:end="137:63"><name pos:start="137:41" pos:end="137:59"><name pos:start="137:41" pos:end="137:41">o</name><operator pos:start="137:42" pos:end="137:43">-&gt;</operator><name pos:start="137:44" pos:end="137:59">subtitle_disable</name></name> <operator pos:start="137:61" pos:end="137:61">=</operator> <literal type="number" pos:start="137:63" pos:end="137:63">1</literal></expr>;</expr_stmt> <break pos:start="137:66" pos:end="137:71">break;</break>

            </block_content>}</block></switch>

            <expr_stmt pos:start="141:13" pos:end="141:47"><expr pos:start="141:13" pos:end="141:46"><call pos:start="141:13" pos:end="141:46"><name pos:start="141:13" pos:end="141:30">init_output_filter</name><argument_list pos:start="141:31" pos:end="141:46">(<argument pos:start="141:32" pos:end="141:38"><expr pos:start="141:32" pos:end="141:38"><name pos:start="141:32" pos:end="141:38">ofilter</name></expr></argument>, <argument pos:start="141:41" pos:end="141:41"><expr pos:start="141:41" pos:end="141:41"><name pos:start="141:41" pos:end="141:41">o</name></expr></argument>, <argument pos:start="141:44" pos:end="141:45"><expr pos:start="141:44" pos:end="141:45"><name pos:start="141:44" pos:end="141:45">oc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <comment type="block" pos:start="149:5" pos:end="149:63">/* ffserver seeking with date=... needs a date reference */</comment>

    <if_stmt pos:start="151:5" pos:end="165:5"><if pos:start="151:5" pos:end="165:5">if <condition pos:start="151:8" pos:end="153:45">(<expr pos:start="151:9" pos:end="153:44"><operator pos:start="151:9" pos:end="151:9">!</operator><call pos:start="151:10" pos:end="151:42"><name pos:start="151:10" pos:end="151:15">strcmp</name><argument_list pos:start="151:16" pos:end="151:42">(<argument pos:start="151:17" pos:end="151:34"><expr pos:start="151:17" pos:end="151:34"><name pos:start="151:17" pos:end="151:34"><name pos:start="151:17" pos:end="151:28">file_oformat</name><operator pos:start="151:29" pos:end="151:30">-&gt;</operator><name pos:start="151:31" pos:end="151:34">name</name></name></expr></argument>, <argument pos:start="151:37" pos:end="151:41"><expr pos:start="151:37" pos:end="151:41"><literal type="string" pos:start="151:37" pos:end="151:41">"ffm"</literal></expr></argument>)</argument_list></call> <operator pos:start="151:44" pos:end="151:45">&amp;&amp;</operator>

        <call pos:start="153:9" pos:end="153:44"><name pos:start="153:9" pos:end="153:19">av_strstart</name><argument_list pos:start="153:20" pos:end="153:44">(<argument pos:start="153:21" pos:end="153:28"><expr pos:start="153:21" pos:end="153:28"><name pos:start="153:21" pos:end="153:28">filename</name></expr></argument>, <argument pos:start="153:31" pos:end="153:37"><expr pos:start="153:31" pos:end="153:37"><literal type="string" pos:start="153:31" pos:end="153:37">"http:"</literal></expr></argument>, <argument pos:start="153:40" pos:end="153:43"><expr pos:start="153:40" pos:end="153:43"><name pos:start="153:40" pos:end="153:43">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="153:47" pos:end="165:5">{<block_content pos:start="155:9" pos:end="163:9">

        <decl_stmt pos:start="155:9" pos:end="155:76"><decl pos:start="155:9" pos:end="155:75"><type pos:start="155:9" pos:end="155:11"><name pos:start="155:9" pos:end="155:11">int</name></type> <name pos:start="155:13" pos:end="155:15">err</name> <init pos:start="155:17" pos:end="155:75">= <expr pos:start="155:19" pos:end="155:75"><call pos:start="155:19" pos:end="155:75"><name pos:start="155:19" pos:end="155:30">parse_option</name><argument_list pos:start="155:31" pos:end="155:75">(<argument pos:start="155:32" pos:end="155:32"><expr pos:start="155:32" pos:end="155:32"><name pos:start="155:32" pos:end="155:32">o</name></expr></argument>, <argument pos:start="155:35" pos:end="155:44"><expr pos:start="155:35" pos:end="155:44"><literal type="string" pos:start="155:35" pos:end="155:44">"metadata"</literal></expr></argument>, <argument pos:start="155:47" pos:end="155:65"><expr pos:start="155:47" pos:end="155:65"><literal type="string" pos:start="155:47" pos:end="155:65">"creation_time=now"</literal></expr></argument>, <argument pos:start="155:68" pos:end="155:74"><expr pos:start="155:68" pos:end="155:74"><name pos:start="155:68" pos:end="155:74">options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="157:9" pos:end="163:9"><if pos:start="157:9" pos:end="163:9">if <condition pos:start="157:12" pos:end="157:20">(<expr pos:start="157:13" pos:end="157:19"><name pos:start="157:13" pos:end="157:15">err</name> <operator pos:start="157:17" pos:end="157:17">&lt;</operator> <literal type="number" pos:start="157:19" pos:end="157:19">0</literal></expr>)</condition> <block pos:start="157:22" pos:end="163:9">{<block_content pos:start="159:13" pos:end="161:28">

            <expr_stmt pos:start="159:13" pos:end="159:39"><expr pos:start="159:13" pos:end="159:38"><call pos:start="159:13" pos:end="159:38"><name pos:start="159:13" pos:end="159:23">print_error</name><argument_list pos:start="159:24" pos:end="159:38">(<argument pos:start="159:25" pos:end="159:32"><expr pos:start="159:25" pos:end="159:32"><name pos:start="159:25" pos:end="159:32">filename</name></expr></argument>, <argument pos:start="159:35" pos:end="159:37"><expr pos:start="159:35" pos:end="159:37"><name pos:start="159:35" pos:end="159:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:28"><expr pos:start="161:13" pos:end="161:27"><call pos:start="161:13" pos:end="161:27"><name pos:start="161:13" pos:end="161:24">exit_program</name><argument_list pos:start="161:25" pos:end="161:27">(<argument pos:start="161:26" pos:end="161:26"><expr pos:start="161:26" pos:end="161:26"><literal type="number" pos:start="161:26" pos:end="161:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="169:5" pos:end="529:5"><if pos:start="169:5" pos:end="227:5">if <condition pos:start="169:8" pos:end="171:45">(<expr pos:start="169:9" pos:end="171:44"><operator pos:start="169:9" pos:end="169:9">!</operator><call pos:start="169:10" pos:end="169:42"><name pos:start="169:10" pos:end="169:15">strcmp</name><argument_list pos:start="169:16" pos:end="169:42">(<argument pos:start="169:17" pos:end="169:34"><expr pos:start="169:17" pos:end="169:34"><name pos:start="169:17" pos:end="169:34"><name pos:start="169:17" pos:end="169:28">file_oformat</name><operator pos:start="169:29" pos:end="169:30">-&gt;</operator><name pos:start="169:31" pos:end="169:34">name</name></name></expr></argument>, <argument pos:start="169:37" pos:end="169:41"><expr pos:start="169:37" pos:end="169:41"><literal type="string" pos:start="169:37" pos:end="169:41">"ffm"</literal></expr></argument>)</argument_list></call> <operator pos:start="169:44" pos:end="169:45">&amp;&amp;</operator> <operator pos:start="169:47" pos:end="169:47">!</operator><name pos:start="169:48" pos:end="169:64">override_ffserver</name> <operator pos:start="169:66" pos:end="169:67">&amp;&amp;</operator>

        <call pos:start="171:9" pos:end="171:44"><name pos:start="171:9" pos:end="171:19">av_strstart</name><argument_list pos:start="171:20" pos:end="171:44">(<argument pos:start="171:21" pos:end="171:28"><expr pos:start="171:21" pos:end="171:28"><name pos:start="171:21" pos:end="171:28">filename</name></expr></argument>, <argument pos:start="171:31" pos:end="171:37"><expr pos:start="171:31" pos:end="171:37"><literal type="string" pos:start="171:31" pos:end="171:37">"http:"</literal></expr></argument>, <argument pos:start="171:40" pos:end="171:43"><expr pos:start="171:40" pos:end="171:43"><name pos:start="171:40" pos:end="171:43">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="171:47" pos:end="227:5">{<block_content pos:start="173:9" pos:end="225:9">

        <decl_stmt pos:start="173:9" pos:end="173:14"><decl pos:start="173:9" pos:end="173:13"><type pos:start="173:9" pos:end="173:11"><name pos:start="173:9" pos:end="173:11">int</name></type> <name pos:start="173:13" pos:end="173:13">j</name></decl>;</decl_stmt>

        <comment type="block" pos:start="175:9" pos:end="177:38">/* special case for files sent to ffserver: we get the stream

           parameters from ffserver */</comment>

        <decl_stmt pos:start="179:9" pos:end="179:57"><decl pos:start="179:9" pos:end="179:56"><type pos:start="179:9" pos:end="179:11"><name pos:start="179:9" pos:end="179:11">int</name></type> <name pos:start="179:13" pos:end="179:15">err</name> <init pos:start="179:17" pos:end="179:56">= <expr pos:start="179:19" pos:end="179:56"><call pos:start="179:19" pos:end="179:56"><name pos:start="179:19" pos:end="179:39">read_ffserver_streams</name><argument_list pos:start="179:40" pos:end="179:56">(<argument pos:start="179:41" pos:end="179:41"><expr pos:start="179:41" pos:end="179:41"><name pos:start="179:41" pos:end="179:41">o</name></expr></argument>, <argument pos:start="179:44" pos:end="179:45"><expr pos:start="179:44" pos:end="179:45"><name pos:start="179:44" pos:end="179:45">oc</name></expr></argument>, <argument pos:start="179:48" pos:end="179:55"><expr pos:start="179:48" pos:end="179:55"><name pos:start="179:48" pos:end="179:55">filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="181:9" pos:end="187:9"><if pos:start="181:9" pos:end="187:9">if <condition pos:start="181:12" pos:end="181:20">(<expr pos:start="181:13" pos:end="181:19"><name pos:start="181:13" pos:end="181:15">err</name> <operator pos:start="181:17" pos:end="181:17">&lt;</operator> <literal type="number" pos:start="181:19" pos:end="181:19">0</literal></expr>)</condition> <block pos:start="181:22" pos:end="187:9">{<block_content pos:start="183:13" pos:end="185:28">

            <expr_stmt pos:start="183:13" pos:end="183:39"><expr pos:start="183:13" pos:end="183:38"><call pos:start="183:13" pos:end="183:38"><name pos:start="183:13" pos:end="183:23">print_error</name><argument_list pos:start="183:24" pos:end="183:38">(<argument pos:start="183:25" pos:end="183:32"><expr pos:start="183:25" pos:end="183:32"><name pos:start="183:25" pos:end="183:32">filename</name></expr></argument>, <argument pos:start="183:35" pos:end="183:37"><expr pos:start="183:35" pos:end="183:37"><name pos:start="183:35" pos:end="183:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="185:13" pos:end="185:28"><expr pos:start="185:13" pos:end="185:27"><call pos:start="185:13" pos:end="185:27"><name pos:start="185:13" pos:end="185:24">exit_program</name><argument_list pos:start="185:25" pos:end="185:27">(<argument pos:start="185:26" pos:end="185:26"><expr pos:start="185:26" pos:end="185:26"><literal type="number" pos:start="185:26" pos:end="185:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <for pos:start="189:9" pos:end="225:9">for<control pos:start="189:12" pos:end="189:79">(<init pos:start="189:13" pos:end="189:51"><expr pos:start="189:13" pos:end="189:50"><name pos:start="189:13" pos:end="189:13">j</name> <operator pos:start="189:15" pos:end="189:15">=</operator> <name pos:start="189:17" pos:end="189:33">nb_output_streams</name> <operator pos:start="189:35" pos:end="189:35">-</operator> <name pos:start="189:37" pos:end="189:50"><name pos:start="189:37" pos:end="189:38">oc</name><operator pos:start="189:39" pos:end="189:40">-&gt;</operator><name pos:start="189:41" pos:end="189:50">nb_streams</name></name></expr>;</init> <condition pos:start="189:53" pos:end="189:74"><expr pos:start="189:53" pos:end="189:73"><name pos:start="189:53" pos:end="189:53">j</name> <operator pos:start="189:55" pos:end="189:55">&lt;</operator> <name pos:start="189:57" pos:end="189:73">nb_output_streams</name></expr>;</condition> <incr pos:start="189:76" pos:end="189:78"><expr pos:start="189:76" pos:end="189:78"><name pos:start="189:76" pos:end="189:76">j</name><operator pos:start="189:77" pos:end="189:78">++</operator></expr></incr>)</control> <block pos:start="189:81" pos:end="225:9">{<block_content pos:start="191:13" pos:end="223:13">

            <expr_stmt pos:start="191:13" pos:end="191:36"><expr pos:start="191:13" pos:end="191:35"><name pos:start="191:13" pos:end="191:15">ost</name> <operator pos:start="191:17" pos:end="191:17">=</operator> <name pos:start="191:19" pos:end="191:35"><name pos:start="191:19" pos:end="191:32">output_streams</name><index pos:start="191:33" pos:end="191:35">[<expr pos:start="191:34" pos:end="191:34"><name pos:start="191:34" pos:end="191:34">j</name></expr>]</index></name></expr>;</expr_stmt>

            <for pos:start="193:13" pos:end="215:13">for <control pos:start="193:17" pos:end="193:50">(<init pos:start="193:18" pos:end="193:23"><expr pos:start="193:18" pos:end="193:22"><name pos:start="193:18" pos:end="193:18">i</name> <operator pos:start="193:20" pos:end="193:20">=</operator> <literal type="number" pos:start="193:22" pos:end="193:22">0</literal></expr>;</init> <condition pos:start="193:25" pos:end="193:45"><expr pos:start="193:25" pos:end="193:44"><name pos:start="193:25" pos:end="193:25">i</name> <operator pos:start="193:27" pos:end="193:27">&lt;</operator> <name pos:start="193:29" pos:end="193:44">nb_input_streams</name></expr>;</condition> <incr pos:start="193:47" pos:end="193:49"><expr pos:start="193:47" pos:end="193:49"><name pos:start="193:47" pos:end="193:47">i</name><operator pos:start="193:48" pos:end="193:49">++</operator></expr></incr>)</control> <block pos:start="193:52" pos:end="215:13">{<block_content pos:start="195:17" pos:end="213:17">

                <expr_stmt pos:start="195:17" pos:end="195:39"><expr pos:start="195:17" pos:end="195:38"><name pos:start="195:17" pos:end="195:19">ist</name> <operator pos:start="195:21" pos:end="195:21">=</operator> <name pos:start="195:23" pos:end="195:38"><name pos:start="195:23" pos:end="195:35">input_streams</name><index pos:start="195:36" pos:end="195:38">[<expr pos:start="195:37" pos:end="195:37"><name pos:start="195:37" pos:end="195:37">i</name></expr>]</index></name></expr>;</expr_stmt>

                <if_stmt pos:start="197:17" pos:end="213:17"><if pos:start="197:17" pos:end="213:17">if<condition pos:start="197:19" pos:end="197:76">(<expr pos:start="197:20" pos:end="197:75"><name pos:start="197:20" pos:end="197:45"><name pos:start="197:20" pos:end="197:22">ist</name><operator pos:start="197:23" pos:end="197:24">-&gt;</operator><name pos:start="197:25" pos:end="197:26">st</name><operator pos:start="197:27" pos:end="197:28">-&gt;</operator><name pos:start="197:29" pos:end="197:33">codec</name><operator pos:start="197:34" pos:end="197:35">-&gt;</operator><name pos:start="197:36" pos:end="197:45">codec_type</name></name> <operator pos:start="197:47" pos:end="197:48">==</operator> <name pos:start="197:50" pos:end="197:75"><name pos:start="197:50" pos:end="197:52">ost</name><operator pos:start="197:53" pos:end="197:54">-&gt;</operator><name pos:start="197:55" pos:end="197:56">st</name><operator pos:start="197:57" pos:end="197:58">-&gt;</operator><name pos:start="197:59" pos:end="197:63">codec</name><operator pos:start="197:64" pos:end="197:65">-&gt;</operator><name pos:start="197:66" pos:end="197:75">codec_type</name></name></expr>)</condition><block pos:start="197:77" pos:end="213:17">{<block_content pos:start="199:21" pos:end="211:26">

                    <expr_stmt pos:start="199:21" pos:end="199:39"><expr pos:start="199:21" pos:end="199:38"><name pos:start="199:21" pos:end="199:33"><name pos:start="199:21" pos:end="199:23">ost</name><operator pos:start="199:24" pos:end="199:25">-&gt;</operator><name pos:start="199:26" pos:end="199:33">sync_ist</name></name><operator pos:start="199:34" pos:end="199:34">=</operator> <name pos:start="199:36" pos:end="199:38">ist</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="201:21" pos:end="201:41"><expr pos:start="201:21" pos:end="201:40"><name pos:start="201:21" pos:end="201:37"><name pos:start="201:21" pos:end="201:23">ost</name><operator pos:start="201:24" pos:end="201:25">-&gt;</operator><name pos:start="201:26" pos:end="201:37">source_index</name></name><operator pos:start="201:38" pos:end="201:38">=</operator> <name pos:start="201:40" pos:end="201:40">i</name></expr>;</expr_stmt>

                    <if_stmt pos:start="203:21" pos:end="203:108"><if pos:start="203:21" pos:end="203:108">if<condition pos:start="203:23" pos:end="203:72">(<expr pos:start="203:24" pos:end="203:71"><name pos:start="203:24" pos:end="203:49"><name pos:start="203:24" pos:end="203:26">ost</name><operator pos:start="203:27" pos:end="203:28">-&gt;</operator><name pos:start="203:29" pos:end="203:30">st</name><operator pos:start="203:31" pos:end="203:32">-&gt;</operator><name pos:start="203:33" pos:end="203:37">codec</name><operator pos:start="203:38" pos:end="203:39">-&gt;</operator><name pos:start="203:40" pos:end="203:49">codec_type</name></name> <operator pos:start="203:51" pos:end="203:52">==</operator> <name pos:start="203:54" pos:end="203:71">AVMEDIA_TYPE_AUDIO</name></expr>)</condition><block type="pseudo" pos:start="203:74" pos:end="203:108"><block_content pos:start="203:74" pos:end="203:108"> <expr_stmt pos:start="203:74" pos:end="203:108"><expr pos:start="203:74" pos:end="203:107"><name pos:start="203:74" pos:end="203:86"><name pos:start="203:74" pos:end="203:76">ost</name><operator pos:start="203:77" pos:end="203:78">-&gt;</operator><name pos:start="203:79" pos:end="203:86">avfilter</name></name> <operator pos:start="203:88" pos:end="203:88">=</operator> <call pos:start="203:90" pos:end="203:107"><name pos:start="203:90" pos:end="203:98">av_strdup</name><argument_list pos:start="203:99" pos:end="203:107">(<argument pos:start="203:100" pos:end="203:106"><expr pos:start="203:100" pos:end="203:106"><literal type="string" pos:start="203:100" pos:end="203:106">"anull"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt pos:start="205:21" pos:end="205:107"><if pos:start="205:21" pos:end="205:107">if<condition pos:start="205:23" pos:end="205:72">(<expr pos:start="205:24" pos:end="205:71"><name pos:start="205:24" pos:end="205:49"><name pos:start="205:24" pos:end="205:26">ost</name><operator pos:start="205:27" pos:end="205:28">-&gt;</operator><name pos:start="205:29" pos:end="205:30">st</name><operator pos:start="205:31" pos:end="205:32">-&gt;</operator><name pos:start="205:33" pos:end="205:37">codec</name><operator pos:start="205:38" pos:end="205:39">-&gt;</operator><name pos:start="205:40" pos:end="205:49">codec_type</name></name> <operator pos:start="205:51" pos:end="205:52">==</operator> <name pos:start="205:54" pos:end="205:71">AVMEDIA_TYPE_VIDEO</name></expr>)</condition><block type="pseudo" pos:start="205:74" pos:end="205:107"><block_content pos:start="205:74" pos:end="205:107"> <expr_stmt pos:start="205:74" pos:end="205:107"><expr pos:start="205:74" pos:end="205:106"><name pos:start="205:74" pos:end="205:86"><name pos:start="205:74" pos:end="205:76">ost</name><operator pos:start="205:77" pos:end="205:78">-&gt;</operator><name pos:start="205:79" pos:end="205:86">avfilter</name></name> <operator pos:start="205:88" pos:end="205:88">=</operator> <call pos:start="205:90" pos:end="205:106"><name pos:start="205:90" pos:end="205:98">av_strdup</name><argument_list pos:start="205:99" pos:end="205:106">(<argument pos:start="205:100" pos:end="205:105"><expr pos:start="205:100" pos:end="205:105"><literal type="string" pos:start="205:100" pos:end="205:105">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="207:21" pos:end="207:37"><expr pos:start="207:21" pos:end="207:36"><name pos:start="207:21" pos:end="207:32"><name pos:start="207:21" pos:end="207:23">ist</name><operator pos:start="207:24" pos:end="207:25">-&gt;</operator><name pos:start="207:26" pos:end="207:32">discard</name></name> <operator pos:start="207:34" pos:end="207:34">=</operator> <literal type="number" pos:start="207:36" pos:end="207:36">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="209:21" pos:end="209:61"><expr pos:start="209:21" pos:end="209:60"><name pos:start="209:21" pos:end="209:36"><name pos:start="209:21" pos:end="209:23">ist</name><operator pos:start="209:24" pos:end="209:25">-&gt;</operator><name pos:start="209:26" pos:end="209:27">st</name><operator pos:start="209:28" pos:end="209:29">-&gt;</operator><name pos:start="209:30" pos:end="209:36">discard</name></name> <operator pos:start="209:38" pos:end="209:38">=</operator> <name pos:start="209:40" pos:end="209:60"><name pos:start="209:40" pos:end="209:42">ist</name><operator pos:start="209:43" pos:end="209:44">-&gt;</operator><name pos:start="209:45" pos:end="209:60">user_set_discard</name></name></expr>;</expr_stmt>

                    <break pos:start="211:21" pos:end="211:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="217:13" pos:end="223:13"><if pos:start="217:13" pos:end="223:13">if<condition pos:start="217:15" pos:end="217:30">(<expr pos:start="217:16" pos:end="217:29"><operator pos:start="217:16" pos:end="217:16">!</operator><name pos:start="217:17" pos:end="217:29"><name pos:start="217:17" pos:end="217:19">ost</name><operator pos:start="217:20" pos:end="217:21">-&gt;</operator><name pos:start="217:22" pos:end="217:29">sync_ist</name></name></expr>)</condition><block pos:start="217:31" pos:end="223:13">{<block_content pos:start="219:17" pos:end="221:32">

                <expr_stmt pos:start="219:17" pos:end="219:150"><expr pos:start="219:17" pos:end="219:149"><call pos:start="219:17" pos:end="219:149"><name pos:start="219:17" pos:end="219:22">av_log</name><argument_list pos:start="219:23" pos:end="219:149">(<argument pos:start="219:24" pos:end="219:27"><expr pos:start="219:24" pos:end="219:27"><name pos:start="219:24" pos:end="219:27">NULL</name></expr></argument>, <argument pos:start="219:30" pos:end="219:41"><expr pos:start="219:30" pos:end="219:41"><name pos:start="219:30" pos:end="219:41">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="219:44" pos:end="219:94"><expr pos:start="219:44" pos:end="219:94"><literal type="string" pos:start="219:44" pos:end="219:94">"Missing %s stream which is required by this ffm\n"</literal></expr></argument>, <argument pos:start="219:97" pos:end="219:148"><expr pos:start="219:97" pos:end="219:148"><call pos:start="219:97" pos:end="219:148"><name pos:start="219:97" pos:end="219:120">av_get_media_type_string</name><argument_list pos:start="219:121" pos:end="219:148">(<argument pos:start="219:122" pos:end="219:147"><expr pos:start="219:122" pos:end="219:147"><name pos:start="219:122" pos:end="219:147"><name pos:start="219:122" pos:end="219:124">ost</name><operator pos:start="219:125" pos:end="219:126">-&gt;</operator><name pos:start="219:127" pos:end="219:128">st</name><operator pos:start="219:129" pos:end="219:130">-&gt;</operator><name pos:start="219:131" pos:end="219:135">codec</name><operator pos:start="219:136" pos:end="219:137">-&gt;</operator><name pos:start="219:138" pos:end="219:147">codec_type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="221:17" pos:end="221:32"><expr pos:start="221:17" pos:end="221:31"><call pos:start="221:17" pos:end="221:31"><name pos:start="221:17" pos:end="221:28">exit_program</name><argument_list pos:start="221:29" pos:end="221:31">(<argument pos:start="221:30" pos:end="221:30"><expr pos:start="221:30" pos:end="221:30"><literal type="number" pos:start="221:30" pos:end="221:30">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <if type="elseif" pos:start="227:7" pos:end="387:5">else if <condition pos:start="227:15" pos:end="227:34">(<expr pos:start="227:16" pos:end="227:33"><operator pos:start="227:16" pos:end="227:16">!</operator><name pos:start="227:17" pos:end="227:33"><name pos:start="227:17" pos:end="227:17">o</name><operator pos:start="227:18" pos:end="227:19">-&gt;</operator><name pos:start="227:20" pos:end="227:33">nb_stream_maps</name></name></expr>)</condition> <block pos:start="227:36" pos:end="387:5">{<block_content pos:start="229:9" pos:end="385:9">

        <decl_stmt pos:start="229:9" pos:end="229:41"><decl pos:start="229:9" pos:end="229:40"><type pos:start="229:9" pos:end="229:14"><name pos:start="229:9" pos:end="229:12">char</name> <modifier pos:start="229:14" pos:end="229:14">*</modifier></type><name pos:start="229:15" pos:end="229:33">subtitle_codec_name</name> <init pos:start="229:35" pos:end="229:40">= <expr pos:start="229:37" pos:end="229:40"><name pos:start="229:37" pos:end="229:40">NULL</name></expr></init></decl>;</decl_stmt>

        <comment type="block" pos:start="231:9" pos:end="231:49">/* pick the "best" stream of each type */</comment>



        <comment type="block" pos:start="235:9" pos:end="235:39">/* video: highest resolution */</comment>

        <if_stmt pos:start="237:9" pos:end="275:9"><if pos:start="237:9" pos:end="275:9">if <condition pos:start="237:12" pos:end="237:123">(<expr pos:start="237:13" pos:end="237:122"><operator pos:start="237:13" pos:end="237:13">!</operator><name pos:start="237:14" pos:end="237:29"><name pos:start="237:14" pos:end="237:14">o</name><operator pos:start="237:15" pos:end="237:16">-&gt;</operator><name pos:start="237:17" pos:end="237:29">video_disable</name></name> <operator pos:start="237:31" pos:end="237:32">&amp;&amp;</operator> <call pos:start="237:34" pos:end="237:102"><name pos:start="237:34" pos:end="237:47">av_guess_codec</name><argument_list pos:start="237:48" pos:end="237:102">(<argument pos:start="237:49" pos:end="237:59"><expr pos:start="237:49" pos:end="237:59"><name pos:start="237:49" pos:end="237:59"><name pos:start="237:49" pos:end="237:50">oc</name><operator pos:start="237:51" pos:end="237:52">-&gt;</operator><name pos:start="237:53" pos:end="237:59">oformat</name></name></expr></argument>, <argument pos:start="237:62" pos:end="237:65"><expr pos:start="237:62" pos:end="237:65"><name pos:start="237:62" pos:end="237:65">NULL</name></expr></argument>, <argument pos:start="237:68" pos:end="237:75"><expr pos:start="237:68" pos:end="237:75"><name pos:start="237:68" pos:end="237:75">filename</name></expr></argument>, <argument pos:start="237:78" pos:end="237:81"><expr pos:start="237:78" pos:end="237:81"><name pos:start="237:78" pos:end="237:81">NULL</name></expr></argument>, <argument pos:start="237:84" pos:end="237:101"><expr pos:start="237:84" pos:end="237:101"><name pos:start="237:84" pos:end="237:101">AVMEDIA_TYPE_VIDEO</name></expr></argument>)</argument_list></call> <operator pos:start="237:104" pos:end="237:105">!=</operator> <name pos:start="237:107" pos:end="237:122">AV_CODEC_ID_NONE</name></expr>)</condition> <block pos:start="237:125" pos:end="275:9">{<block_content pos:start="239:13" pos:end="273:45">

            <decl_stmt pos:start="239:13" pos:end="239:35"><decl pos:start="239:13" pos:end="239:24"><type pos:start="239:13" pos:end="239:15"><name pos:start="239:13" pos:end="239:15">int</name></type> <name pos:start="239:17" pos:end="239:20">area</name> <init pos:start="239:22" pos:end="239:24">= <expr pos:start="239:24" pos:end="239:24"><literal type="number" pos:start="239:24" pos:end="239:24">0</literal></expr></init></decl>, <decl pos:start="239:27" pos:end="239:34"><type ref="prev" pos:start="239:13" pos:end="239:15"/><name pos:start="239:27" pos:end="239:29">idx</name> <init pos:start="239:31" pos:end="239:34">= <expr pos:start="239:33" pos:end="239:34"><operator pos:start="239:33" pos:end="239:33">-</operator><literal type="number" pos:start="239:34" pos:end="239:34">1</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="241:13" pos:end="241:85"><decl pos:start="241:13" pos:end="241:84"><type pos:start="241:13" pos:end="241:15"><name pos:start="241:13" pos:end="241:15">int</name></type> <name pos:start="241:17" pos:end="241:19">qcr</name> <init pos:start="241:21" pos:end="241:84">= <expr pos:start="241:23" pos:end="241:84"><call pos:start="241:23" pos:end="241:84"><name pos:start="241:23" pos:end="241:42">avformat_query_codec</name><argument_list pos:start="241:43" pos:end="241:84">(<argument pos:start="241:44" pos:end="241:54"><expr pos:start="241:44" pos:end="241:54"><name pos:start="241:44" pos:end="241:54"><name pos:start="241:44" pos:end="241:45">oc</name><operator pos:start="241:46" pos:end="241:47">-&gt;</operator><name pos:start="241:48" pos:end="241:54">oformat</name></name></expr></argument>, <argument pos:start="241:57" pos:end="241:80"><expr pos:start="241:57" pos:end="241:80"><name pos:start="241:57" pos:end="241:80"><name pos:start="241:57" pos:end="241:58">oc</name><operator pos:start="241:59" pos:end="241:60">-&gt;</operator><name pos:start="241:61" pos:end="241:67">oformat</name><operator pos:start="241:68" pos:end="241:69">-&gt;</operator><name pos:start="241:70" pos:end="241:80">video_codec</name></name></expr></argument>, <argument pos:start="241:83" pos:end="241:83"><expr pos:start="241:83" pos:end="241:83"><literal type="number" pos:start="241:83" pos:end="241:83">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <for pos:start="243:13" pos:end="269:13">for <control pos:start="243:17" pos:end="243:50">(<init pos:start="243:18" pos:end="243:23"><expr pos:start="243:18" pos:end="243:22"><name pos:start="243:18" pos:end="243:18">i</name> <operator pos:start="243:20" pos:end="243:20">=</operator> <literal type="number" pos:start="243:22" pos:end="243:22">0</literal></expr>;</init> <condition pos:start="243:25" pos:end="243:45"><expr pos:start="243:25" pos:end="243:44"><name pos:start="243:25" pos:end="243:25">i</name> <operator pos:start="243:27" pos:end="243:27">&lt;</operator> <name pos:start="243:29" pos:end="243:44">nb_input_streams</name></expr>;</condition> <incr pos:start="243:47" pos:end="243:49"><expr pos:start="243:47" pos:end="243:49"><name pos:start="243:47" pos:end="243:47">i</name><operator pos:start="243:48" pos:end="243:49">++</operator></expr></incr>)</control> <block pos:start="243:52" pos:end="269:13">{<block_content pos:start="245:17" pos:end="267:17">

                <decl_stmt pos:start="245:17" pos:end="245:29"><decl pos:start="245:17" pos:end="245:28"><type pos:start="245:17" pos:end="245:19"><name pos:start="245:17" pos:end="245:19">int</name></type> <name pos:start="245:21" pos:end="245:28">new_area</name></decl>;</decl_stmt>

                <expr_stmt pos:start="247:17" pos:end="247:39"><expr pos:start="247:17" pos:end="247:38"><name pos:start="247:17" pos:end="247:19">ist</name> <operator pos:start="247:21" pos:end="247:21">=</operator> <name pos:start="247:23" pos:end="247:38"><name pos:start="247:23" pos:end="247:35">input_streams</name><index pos:start="247:36" pos:end="247:38">[<expr pos:start="247:37" pos:end="247:37"><name pos:start="247:37" pos:end="247:37">i</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="249:17" pos:end="249:118"><expr pos:start="249:17" pos:end="249:117"><name pos:start="249:17" pos:end="249:24">new_area</name> <operator pos:start="249:26" pos:end="249:26">=</operator> <name pos:start="249:28" pos:end="249:48"><name pos:start="249:28" pos:end="249:30">ist</name><operator pos:start="249:31" pos:end="249:32">-&gt;</operator><name pos:start="249:33" pos:end="249:34">st</name><operator pos:start="249:35" pos:end="249:36">-&gt;</operator><name pos:start="249:37" pos:end="249:41">codec</name><operator pos:start="249:42" pos:end="249:43">-&gt;</operator><name pos:start="249:44" pos:end="249:48">width</name></name> <operator pos:start="249:50" pos:end="249:50">*</operator> <name pos:start="249:52" pos:end="249:73"><name pos:start="249:52" pos:end="249:54">ist</name><operator pos:start="249:55" pos:end="249:56">-&gt;</operator><name pos:start="249:57" pos:end="249:58">st</name><operator pos:start="249:59" pos:end="249:60">-&gt;</operator><name pos:start="249:61" pos:end="249:65">codec</name><operator pos:start="249:66" pos:end="249:67">-&gt;</operator><name pos:start="249:68" pos:end="249:73">height</name></name> <operator pos:start="249:75" pos:end="249:75">+</operator> <literal type="number" pos:start="249:77" pos:end="249:85">100000000</literal><operator pos:start="249:86" pos:end="249:86">*</operator><operator pos:start="249:87" pos:end="249:87">!</operator><operator pos:start="249:88" pos:end="249:88">!</operator><name pos:start="249:89" pos:end="249:117"><name pos:start="249:89" pos:end="249:91">ist</name><operator pos:start="249:92" pos:end="249:93">-&gt;</operator><name pos:start="249:94" pos:end="249:95">st</name><operator pos:start="249:96" pos:end="249:97">-&gt;</operator><name pos:start="249:98" pos:end="249:117">codec_info_nb_frames</name></name></expr>;</expr_stmt>

                <if_stmt pos:start="251:17" pos:end="253:33"><if pos:start="251:17" pos:end="253:33">if<condition pos:start="251:19" pos:end="251:108">(<expr pos:start="251:20" pos:end="251:107"><operator pos:start="251:20" pos:end="251:20">(</operator><name pos:start="251:21" pos:end="251:23">qcr</name><operator pos:start="251:24" pos:end="251:25">!=</operator><call pos:start="251:26" pos:end="251:50"><name pos:start="251:26" pos:end="251:30">MKTAG</name><argument_list pos:start="251:31" pos:end="251:50">(<argument pos:start="251:32" pos:end="251:34"><expr pos:start="251:32" pos:end="251:34"><literal type="char" pos:start="251:32" pos:end="251:34">'A'</literal></expr></argument>, <argument pos:start="251:37" pos:end="251:39"><expr pos:start="251:37" pos:end="251:39"><literal type="char" pos:start="251:37" pos:end="251:39">'P'</literal></expr></argument>, <argument pos:start="251:42" pos:end="251:44"><expr pos:start="251:42" pos:end="251:44"><literal type="char" pos:start="251:42" pos:end="251:44">'I'</literal></expr></argument>, <argument pos:start="251:47" pos:end="251:49"><expr pos:start="251:47" pos:end="251:49"><literal type="char" pos:start="251:47" pos:end="251:49">'C'</literal></expr></argument>)</argument_list></call><operator pos:start="251:51" pos:end="251:51">)</operator> <operator pos:start="251:53" pos:end="251:54">&amp;&amp;</operator> <operator pos:start="251:56" pos:end="251:56">(</operator><name pos:start="251:57" pos:end="251:76"><name pos:start="251:57" pos:end="251:59">ist</name><operator pos:start="251:60" pos:end="251:61">-&gt;</operator><name pos:start="251:62" pos:end="251:63">st</name><operator pos:start="251:64" pos:end="251:65">-&gt;</operator><name pos:start="251:66" pos:end="251:76">disposition</name></name> <operator pos:start="251:78" pos:end="251:78">&amp;</operator> <name pos:start="251:80" pos:end="251:106">AV_DISPOSITION_ATTACHED_PIC</name><operator pos:start="251:107" pos:end="251:107">)</operator></expr>)</condition><block type="pseudo" pos:start="253:21" pos:end="253:33"><block_content pos:start="253:21" pos:end="253:33">

                    <expr_stmt pos:start="253:21" pos:end="253:33"><expr pos:start="253:21" pos:end="253:32"><name pos:start="253:21" pos:end="253:28">new_area</name> <operator pos:start="253:30" pos:end="253:30">=</operator> <literal type="number" pos:start="253:32" pos:end="253:32">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="255:17" pos:end="267:17"><if pos:start="255:17" pos:end="267:17">if <condition pos:start="255:20" pos:end="257:36">(<expr pos:start="255:21" pos:end="257:35"><name pos:start="255:21" pos:end="255:46"><name pos:start="255:21" pos:end="255:23">ist</name><operator pos:start="255:24" pos:end="255:25">-&gt;</operator><name pos:start="255:26" pos:end="255:27">st</name><operator pos:start="255:28" pos:end="255:29">-&gt;</operator><name pos:start="255:30" pos:end="255:34">codec</name><operator pos:start="255:35" pos:end="255:36">-&gt;</operator><name pos:start="255:37" pos:end="255:46">codec_type</name></name> <operator pos:start="255:48" pos:end="255:49">==</operator> <name pos:start="255:51" pos:end="255:68">AVMEDIA_TYPE_VIDEO</name> <operator pos:start="255:70" pos:end="255:71">&amp;&amp;</operator>

                    <name pos:start="257:21" pos:end="257:28">new_area</name> <operator pos:start="257:30" pos:end="257:30">&gt;</operator> <name pos:start="257:32" pos:end="257:35">area</name></expr>)</condition> <block pos:start="257:38" pos:end="267:17">{<block_content pos:start="259:21" pos:end="265:28">

                    <if_stmt pos:start="259:21" pos:end="261:33"><if pos:start="259:21" pos:end="261:33">if<condition pos:start="259:23" pos:end="259:113">(<expr pos:start="259:24" pos:end="259:112"><operator pos:start="259:24" pos:end="259:24">(</operator><name pos:start="259:25" pos:end="259:27">qcr</name><operator pos:start="259:28" pos:end="259:29">==</operator><call pos:start="259:30" pos:end="259:54"><name pos:start="259:30" pos:end="259:34">MKTAG</name><argument_list pos:start="259:35" pos:end="259:54">(<argument pos:start="259:36" pos:end="259:38"><expr pos:start="259:36" pos:end="259:38"><literal type="char" pos:start="259:36" pos:end="259:38">'A'</literal></expr></argument>, <argument pos:start="259:41" pos:end="259:43"><expr pos:start="259:41" pos:end="259:43"><literal type="char" pos:start="259:41" pos:end="259:43">'P'</literal></expr></argument>, <argument pos:start="259:46" pos:end="259:48"><expr pos:start="259:46" pos:end="259:48"><literal type="char" pos:start="259:46" pos:end="259:48">'I'</literal></expr></argument>, <argument pos:start="259:51" pos:end="259:53"><expr pos:start="259:51" pos:end="259:53"><literal type="char" pos:start="259:51" pos:end="259:53">'C'</literal></expr></argument>)</argument_list></call><operator pos:start="259:55" pos:end="259:55">)</operator> <operator pos:start="259:57" pos:end="259:58">&amp;&amp;</operator> <operator pos:start="259:60" pos:end="259:60">!</operator><operator pos:start="259:61" pos:end="259:61">(</operator><name pos:start="259:62" pos:end="259:81"><name pos:start="259:62" pos:end="259:64">ist</name><operator pos:start="259:65" pos:end="259:66">-&gt;</operator><name pos:start="259:67" pos:end="259:68">st</name><operator pos:start="259:69" pos:end="259:70">-&gt;</operator><name pos:start="259:71" pos:end="259:81">disposition</name></name> <operator pos:start="259:83" pos:end="259:83">&amp;</operator> <name pos:start="259:85" pos:end="259:111">AV_DISPOSITION_ATTACHED_PIC</name><operator pos:start="259:112" pos:end="259:112">)</operator></expr>)</condition><block type="pseudo" pos:start="261:25" pos:end="261:33"><block_content pos:start="261:25" pos:end="261:33">

                        <continue pos:start="261:25" pos:end="261:33">continue;</continue></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="263:21" pos:end="263:36"><expr pos:start="263:21" pos:end="263:35"><name pos:start="263:21" pos:end="263:24">area</name> <operator pos:start="263:26" pos:end="263:26">=</operator> <name pos:start="263:28" pos:end="263:35">new_area</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="265:21" pos:end="265:28"><expr pos:start="265:21" pos:end="265:27"><name pos:start="265:21" pos:end="265:23">idx</name> <operator pos:start="265:25" pos:end="265:25">=</operator> <name pos:start="265:27" pos:end="265:27">i</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="271:13" pos:end="273:45"><if pos:start="271:13" pos:end="273:45">if <condition pos:start="271:16" pos:end="271:25">(<expr pos:start="271:17" pos:end="271:24"><name pos:start="271:17" pos:end="271:19">idx</name> <operator pos:start="271:21" pos:end="271:22">&gt;=</operator> <literal type="number" pos:start="271:24" pos:end="271:24">0</literal></expr>)</condition><block type="pseudo" pos:start="273:17" pos:end="273:45"><block_content pos:start="273:17" pos:end="273:45">

                <expr_stmt pos:start="273:17" pos:end="273:45"><expr pos:start="273:17" pos:end="273:44"><call pos:start="273:17" pos:end="273:44"><name pos:start="273:17" pos:end="273:32">new_video_stream</name><argument_list pos:start="273:33" pos:end="273:44">(<argument pos:start="273:34" pos:end="273:34"><expr pos:start="273:34" pos:end="273:34"><name pos:start="273:34" pos:end="273:34">o</name></expr></argument>, <argument pos:start="273:37" pos:end="273:38"><expr pos:start="273:37" pos:end="273:38"><name pos:start="273:37" pos:end="273:38">oc</name></expr></argument>, <argument pos:start="273:41" pos:end="273:43"><expr pos:start="273:41" pos:end="273:43"><name pos:start="273:41" pos:end="273:43">idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="279:9" pos:end="279:34">/* audio: most channels */</comment>

        <if_stmt pos:start="281:9" pos:end="309:9"><if pos:start="281:9" pos:end="309:9">if <condition pos:start="281:12" pos:end="281:123">(<expr pos:start="281:13" pos:end="281:122"><operator pos:start="281:13" pos:end="281:13">!</operator><name pos:start="281:14" pos:end="281:29"><name pos:start="281:14" pos:end="281:14">o</name><operator pos:start="281:15" pos:end="281:16">-&gt;</operator><name pos:start="281:17" pos:end="281:29">audio_disable</name></name> <operator pos:start="281:31" pos:end="281:32">&amp;&amp;</operator> <call pos:start="281:34" pos:end="281:102"><name pos:start="281:34" pos:end="281:47">av_guess_codec</name><argument_list pos:start="281:48" pos:end="281:102">(<argument pos:start="281:49" pos:end="281:59"><expr pos:start="281:49" pos:end="281:59"><name pos:start="281:49" pos:end="281:59"><name pos:start="281:49" pos:end="281:50">oc</name><operator pos:start="281:51" pos:end="281:52">-&gt;</operator><name pos:start="281:53" pos:end="281:59">oformat</name></name></expr></argument>, <argument pos:start="281:62" pos:end="281:65"><expr pos:start="281:62" pos:end="281:65"><name pos:start="281:62" pos:end="281:65">NULL</name></expr></argument>, <argument pos:start="281:68" pos:end="281:75"><expr pos:start="281:68" pos:end="281:75"><name pos:start="281:68" pos:end="281:75">filename</name></expr></argument>, <argument pos:start="281:78" pos:end="281:81"><expr pos:start="281:78" pos:end="281:81"><name pos:start="281:78" pos:end="281:81">NULL</name></expr></argument>, <argument pos:start="281:84" pos:end="281:101"><expr pos:start="281:84" pos:end="281:101"><name pos:start="281:84" pos:end="281:101">AVMEDIA_TYPE_AUDIO</name></expr></argument>)</argument_list></call> <operator pos:start="281:104" pos:end="281:105">!=</operator> <name pos:start="281:107" pos:end="281:122">AV_CODEC_ID_NONE</name></expr>)</condition> <block pos:start="281:125" pos:end="309:9">{<block_content pos:start="283:13" pos:end="307:45">

            <decl_stmt pos:start="283:13" pos:end="283:41"><decl pos:start="283:13" pos:end="283:30"><type pos:start="283:13" pos:end="283:15"><name pos:start="283:13" pos:end="283:15">int</name></type> <name pos:start="283:17" pos:end="283:26">best_score</name> <init pos:start="283:28" pos:end="283:30">= <expr pos:start="283:30" pos:end="283:30"><literal type="number" pos:start="283:30" pos:end="283:30">0</literal></expr></init></decl>, <decl pos:start="283:33" pos:end="283:40"><type ref="prev" pos:start="283:13" pos:end="283:15"/><name pos:start="283:33" pos:end="283:35">idx</name> <init pos:start="283:37" pos:end="283:40">= <expr pos:start="283:39" pos:end="283:40"><operator pos:start="283:39" pos:end="283:39">-</operator><literal type="number" pos:start="283:40" pos:end="283:40">1</literal></expr></init></decl>;</decl_stmt>

            <for pos:start="285:13" pos:end="303:13">for <control pos:start="285:17" pos:end="285:50">(<init pos:start="285:18" pos:end="285:23"><expr pos:start="285:18" pos:end="285:22"><name pos:start="285:18" pos:end="285:18">i</name> <operator pos:start="285:20" pos:end="285:20">=</operator> <literal type="number" pos:start="285:22" pos:end="285:22">0</literal></expr>;</init> <condition pos:start="285:25" pos:end="285:45"><expr pos:start="285:25" pos:end="285:44"><name pos:start="285:25" pos:end="285:25">i</name> <operator pos:start="285:27" pos:end="285:27">&lt;</operator> <name pos:start="285:29" pos:end="285:44">nb_input_streams</name></expr>;</condition> <incr pos:start="285:47" pos:end="285:49"><expr pos:start="285:47" pos:end="285:49"><name pos:start="285:47" pos:end="285:47">i</name><operator pos:start="285:48" pos:end="285:49">++</operator></expr></incr>)</control> <block pos:start="285:52" pos:end="303:13">{<block_content pos:start="287:17" pos:end="301:17">

                <decl_stmt pos:start="287:17" pos:end="287:26"><decl pos:start="287:17" pos:end="287:25"><type pos:start="287:17" pos:end="287:19"><name pos:start="287:17" pos:end="287:19">int</name></type> <name pos:start="287:21" pos:end="287:25">score</name></decl>;</decl_stmt>

                <expr_stmt pos:start="289:17" pos:end="289:39"><expr pos:start="289:17" pos:end="289:38"><name pos:start="289:17" pos:end="289:19">ist</name> <operator pos:start="289:21" pos:end="289:21">=</operator> <name pos:start="289:23" pos:end="289:38"><name pos:start="289:23" pos:end="289:35">input_streams</name><index pos:start="289:36" pos:end="289:38">[<expr pos:start="289:37" pos:end="289:37"><name pos:start="289:37" pos:end="289:37">i</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="291:17" pos:end="291:93"><expr pos:start="291:17" pos:end="291:92"><name pos:start="291:17" pos:end="291:21">score</name> <operator pos:start="291:23" pos:end="291:23">=</operator> <name pos:start="291:25" pos:end="291:48"><name pos:start="291:25" pos:end="291:27">ist</name><operator pos:start="291:28" pos:end="291:29">-&gt;</operator><name pos:start="291:30" pos:end="291:31">st</name><operator pos:start="291:32" pos:end="291:33">-&gt;</operator><name pos:start="291:34" pos:end="291:38">codec</name><operator pos:start="291:39" pos:end="291:40">-&gt;</operator><name pos:start="291:41" pos:end="291:48">channels</name></name> <operator pos:start="291:50" pos:end="291:50">+</operator> <literal type="number" pos:start="291:52" pos:end="291:60">100000000</literal><operator pos:start="291:61" pos:end="291:61">*</operator><operator pos:start="291:62" pos:end="291:62">!</operator><operator pos:start="291:63" pos:end="291:63">!</operator><name pos:start="291:64" pos:end="291:92"><name pos:start="291:64" pos:end="291:66">ist</name><operator pos:start="291:67" pos:end="291:68">-&gt;</operator><name pos:start="291:69" pos:end="291:70">st</name><operator pos:start="291:71" pos:end="291:72">-&gt;</operator><name pos:start="291:73" pos:end="291:92">codec_info_nb_frames</name></name></expr>;</expr_stmt>

                <if_stmt pos:start="293:17" pos:end="301:17"><if pos:start="293:17" pos:end="301:17">if <condition pos:start="293:20" pos:end="295:39">(<expr pos:start="293:21" pos:end="295:38"><name pos:start="293:21" pos:end="293:46"><name pos:start="293:21" pos:end="293:23">ist</name><operator pos:start="293:24" pos:end="293:25">-&gt;</operator><name pos:start="293:26" pos:end="293:27">st</name><operator pos:start="293:28" pos:end="293:29">-&gt;</operator><name pos:start="293:30" pos:end="293:34">codec</name><operator pos:start="293:35" pos:end="293:36">-&gt;</operator><name pos:start="293:37" pos:end="293:46">codec_type</name></name> <operator pos:start="293:48" pos:end="293:49">==</operator> <name pos:start="293:51" pos:end="293:68">AVMEDIA_TYPE_AUDIO</name> <operator pos:start="293:70" pos:end="293:71">&amp;&amp;</operator>

                    <name pos:start="295:21" pos:end="295:25">score</name> <operator pos:start="295:27" pos:end="295:27">&gt;</operator> <name pos:start="295:29" pos:end="295:38">best_score</name></expr>)</condition> <block pos:start="295:41" pos:end="301:17">{<block_content pos:start="297:21" pos:end="299:28">

                    <expr_stmt pos:start="297:21" pos:end="297:39"><expr pos:start="297:21" pos:end="297:38"><name pos:start="297:21" pos:end="297:30">best_score</name> <operator pos:start="297:32" pos:end="297:32">=</operator> <name pos:start="297:34" pos:end="297:38">score</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="299:21" pos:end="299:28"><expr pos:start="299:21" pos:end="299:27"><name pos:start="299:21" pos:end="299:23">idx</name> <operator pos:start="299:25" pos:end="299:25">=</operator> <name pos:start="299:27" pos:end="299:27">i</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="305:13" pos:end="307:45"><if pos:start="305:13" pos:end="307:45">if <condition pos:start="305:16" pos:end="305:25">(<expr pos:start="305:17" pos:end="305:24"><name pos:start="305:17" pos:end="305:19">idx</name> <operator pos:start="305:21" pos:end="305:22">&gt;=</operator> <literal type="number" pos:start="305:24" pos:end="305:24">0</literal></expr>)</condition><block type="pseudo" pos:start="307:17" pos:end="307:45"><block_content pos:start="307:17" pos:end="307:45">

                <expr_stmt pos:start="307:17" pos:end="307:45"><expr pos:start="307:17" pos:end="307:44"><call pos:start="307:17" pos:end="307:44"><name pos:start="307:17" pos:end="307:32">new_audio_stream</name><argument_list pos:start="307:33" pos:end="307:44">(<argument pos:start="307:34" pos:end="307:34"><expr pos:start="307:34" pos:end="307:34"><name pos:start="307:34" pos:end="307:34">o</name></expr></argument>, <argument pos:start="307:37" pos:end="307:38"><expr pos:start="307:37" pos:end="307:38"><name pos:start="307:37" pos:end="307:38">oc</name></expr></argument>, <argument pos:start="307:41" pos:end="307:43"><expr pos:start="307:41" pos:end="307:43"><name pos:start="307:41" pos:end="307:43">idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="313:9" pos:end="313:35">/* subtitles: pick first */</comment>

        <expr_stmt pos:start="315:9" pos:end="315:75"><expr pos:start="315:9" pos:end="315:74"><call pos:start="315:9" pos:end="315:74"><name pos:start="315:9" pos:end="315:26">MATCH_PER_TYPE_OPT</name><argument_list pos:start="315:27" pos:end="315:74">(<argument pos:start="315:28" pos:end="315:38"><expr pos:start="315:28" pos:end="315:38"><name pos:start="315:28" pos:end="315:38">codec_names</name></expr></argument>, <argument pos:start="315:41" pos:end="315:43"><expr pos:start="315:41" pos:end="315:43"><name pos:start="315:41" pos:end="315:43">str</name></expr></argument>, <argument pos:start="315:46" pos:end="315:64"><expr pos:start="315:46" pos:end="315:64"><name pos:start="315:46" pos:end="315:64">subtitle_codec_name</name></expr></argument>, <argument pos:start="315:67" pos:end="315:68"><expr pos:start="315:67" pos:end="315:68"><name pos:start="315:67" pos:end="315:68">oc</name></expr></argument>, <argument pos:start="315:71" pos:end="315:73"><expr pos:start="315:71" pos:end="315:73"><literal type="string" pos:start="315:71" pos:end="315:73">"s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="317:9" pos:end="367:9"><if pos:start="317:9" pos:end="367:9">if <condition pos:start="317:12" pos:end="317:111">(<expr pos:start="317:13" pos:end="317:110"><operator pos:start="317:13" pos:end="317:13">!</operator><name pos:start="317:14" pos:end="317:32"><name pos:start="317:14" pos:end="317:14">o</name><operator pos:start="317:15" pos:end="317:16">-&gt;</operator><name pos:start="317:17" pos:end="317:32">subtitle_disable</name></name> <operator pos:start="317:34" pos:end="317:35">&amp;&amp;</operator> <operator pos:start="317:37" pos:end="317:37">(</operator><call pos:start="317:38" pos:end="317:86"><name pos:start="317:38" pos:end="317:57">avcodec_find_encoder</name><argument_list pos:start="317:58" pos:end="317:86">(<argument pos:start="317:59" pos:end="317:85"><expr pos:start="317:59" pos:end="317:85"><name pos:start="317:59" pos:end="317:85"><name pos:start="317:59" pos:end="317:60">oc</name><operator pos:start="317:61" pos:end="317:62">-&gt;</operator><name pos:start="317:63" pos:end="317:69">oformat</name><operator pos:start="317:70" pos:end="317:71">-&gt;</operator><name pos:start="317:72" pos:end="317:85">subtitle_codec</name></name></expr></argument>)</argument_list></call> <operator pos:start="317:88" pos:end="317:89">||</operator> <name pos:start="317:91" pos:end="317:109">subtitle_codec_name</name><operator pos:start="317:110" pos:end="317:110">)</operator></expr>)</condition> <block pos:start="317:113" pos:end="367:9">{<block_content pos:start="319:13" pos:end="365:17">

            <for pos:start="319:13" pos:end="365:17">for <control pos:start="319:17" pos:end="319:50">(<init pos:start="319:18" pos:end="319:23"><expr pos:start="319:18" pos:end="319:22"><name pos:start="319:18" pos:end="319:18">i</name> <operator pos:start="319:20" pos:end="319:20">=</operator> <literal type="number" pos:start="319:22" pos:end="319:22">0</literal></expr>;</init> <condition pos:start="319:25" pos:end="319:45"><expr pos:start="319:25" pos:end="319:44"><name pos:start="319:25" pos:end="319:25">i</name> <operator pos:start="319:27" pos:end="319:27">&lt;</operator> <name pos:start="319:29" pos:end="319:44">nb_input_streams</name></expr>;</condition> <incr pos:start="319:47" pos:end="319:49"><expr pos:start="319:47" pos:end="319:49"><name pos:start="319:47" pos:end="319:47">i</name><operator pos:start="319:48" pos:end="319:49">++</operator></expr></incr>)</control><block type="pseudo" pos:start="321:17" pos:end="365:17"><block_content pos:start="321:17" pos:end="365:17">

                <if_stmt pos:start="321:17" pos:end="365:17"><if pos:start="321:17" pos:end="365:17">if <condition pos:start="321:20" pos:end="321:85">(<expr pos:start="321:21" pos:end="321:84"><name pos:start="321:21" pos:end="321:36"><name pos:start="321:21" pos:end="321:33">input_streams</name><index pos:start="321:34" pos:end="321:36">[<expr pos:start="321:35" pos:end="321:35"><name pos:start="321:35" pos:end="321:35">i</name></expr>]</index></name><operator pos:start="321:37" pos:end="321:38">-&gt;</operator><name pos:start="321:39" pos:end="321:59"><name pos:start="321:39" pos:end="321:40">st</name><operator pos:start="321:41" pos:end="321:42">-&gt;</operator><name pos:start="321:43" pos:end="321:47">codec</name><operator pos:start="321:48" pos:end="321:49">-&gt;</operator><name pos:start="321:50" pos:end="321:59">codec_type</name></name> <operator pos:start="321:61" pos:end="321:62">==</operator> <name pos:start="321:64" pos:end="321:84">AVMEDIA_TYPE_SUBTITLE</name></expr>)</condition> <block pos:start="321:87" pos:end="365:17">{<block_content pos:start="323:21" pos:end="363:21">

                    <decl_stmt pos:start="323:21" pos:end="325:86"><decl pos:start="323:21" pos:end="325:85"><type pos:start="323:21" pos:end="323:45"><name pos:start="323:21" pos:end="323:37">AVCodecDescriptor</name> <specifier pos:start="323:39" pos:end="323:43">const</specifier> <modifier pos:start="323:45" pos:end="323:45">*</modifier></type><name pos:start="323:46" pos:end="323:61">input_descriptor</name> <init pos:start="323:63" pos:end="325:85">=

                        <expr pos:start="325:25" pos:end="325:85"><call pos:start="325:25" pos:end="325:85"><name pos:start="325:25" pos:end="325:46">avcodec_descriptor_get</name><argument_list pos:start="325:47" pos:end="325:85">(<argument pos:start="325:48" pos:end="325:84"><expr pos:start="325:48" pos:end="325:84"><name pos:start="325:48" pos:end="325:63"><name pos:start="325:48" pos:end="325:60">input_streams</name><index pos:start="325:61" pos:end="325:63">[<expr pos:start="325:62" pos:end="325:62"><name pos:start="325:62" pos:end="325:62">i</name></expr>]</index></name><operator pos:start="325:64" pos:end="325:65">-&gt;</operator><name pos:start="325:66" pos:end="325:84"><name pos:start="325:66" pos:end="325:67">st</name><operator pos:start="325:68" pos:end="325:69">-&gt;</operator><name pos:start="325:70" pos:end="325:74">codec</name><operator pos:start="325:75" pos:end="325:76">-&gt;</operator><name pos:start="325:77" pos:end="325:84">codec_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="327:21" pos:end="327:70"><decl pos:start="327:21" pos:end="327:69"><type pos:start="327:21" pos:end="327:45"><name pos:start="327:21" pos:end="327:37">AVCodecDescriptor</name> <specifier pos:start="327:39" pos:end="327:43">const</specifier> <modifier pos:start="327:45" pos:end="327:45">*</modifier></type><name pos:start="327:46" pos:end="327:62">output_descriptor</name> <init pos:start="327:64" pos:end="327:69">= <expr pos:start="327:66" pos:end="327:69"><name pos:start="327:66" pos:end="327:69">NULL</name></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="329:21" pos:end="331:74"><decl pos:start="329:21" pos:end="331:73"><type pos:start="329:21" pos:end="329:35"><name pos:start="329:21" pos:end="329:27">AVCodec</name> <specifier pos:start="329:29" pos:end="329:33">const</specifier> <modifier pos:start="329:35" pos:end="329:35">*</modifier></type><name pos:start="329:36" pos:end="329:47">output_codec</name> <init pos:start="329:49" pos:end="331:73">=

                        <expr pos:start="331:25" pos:end="331:73"><call pos:start="331:25" pos:end="331:73"><name pos:start="331:25" pos:end="331:44">avcodec_find_encoder</name><argument_list pos:start="331:45" pos:end="331:73">(<argument pos:start="331:46" pos:end="331:72"><expr pos:start="331:46" pos:end="331:72"><name pos:start="331:46" pos:end="331:72"><name pos:start="331:46" pos:end="331:47">oc</name><operator pos:start="331:48" pos:end="331:49">-&gt;</operator><name pos:start="331:50" pos:end="331:56">oformat</name><operator pos:start="331:57" pos:end="331:58">-&gt;</operator><name pos:start="331:59" pos:end="331:72">subtitle_codec</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="333:21" pos:end="333:58"><decl pos:start="333:21" pos:end="333:39"><type pos:start="333:21" pos:end="333:23"><name pos:start="333:21" pos:end="333:23">int</name></type> <name pos:start="333:25" pos:end="333:35">input_props</name> <init pos:start="333:37" pos:end="333:39">= <expr pos:start="333:39" pos:end="333:39"><literal type="number" pos:start="333:39" pos:end="333:39">0</literal></expr></init></decl>, <decl pos:start="333:42" pos:end="333:57"><type ref="prev" pos:start="333:21" pos:end="333:23"/><name pos:start="333:42" pos:end="333:53">output_props</name> <init pos:start="333:55" pos:end="333:57">= <expr pos:start="333:57" pos:end="333:57"><literal type="number" pos:start="333:57" pos:end="333:57">0</literal></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="335:21" pos:end="337:85"><if pos:start="335:21" pos:end="337:85">if <condition pos:start="335:24" pos:end="335:37">(<expr pos:start="335:25" pos:end="335:36"><name pos:start="335:25" pos:end="335:36">output_codec</name></expr>)</condition><block type="pseudo" pos:start="337:25" pos:end="337:85"><block_content pos:start="337:25" pos:end="337:85">

                        <expr_stmt pos:start="337:25" pos:end="337:85"><expr pos:start="337:25" pos:end="337:84"><name pos:start="337:25" pos:end="337:41">output_descriptor</name> <operator pos:start="337:43" pos:end="337:43">=</operator> <call pos:start="337:45" pos:end="337:84"><name pos:start="337:45" pos:end="337:66">avcodec_descriptor_get</name><argument_list pos:start="337:67" pos:end="337:84">(<argument pos:start="337:68" pos:end="337:83"><expr pos:start="337:68" pos:end="337:83"><name pos:start="337:68" pos:end="337:83"><name pos:start="337:68" pos:end="337:79">output_codec</name><operator pos:start="337:80" pos:end="337:81">-&gt;</operator><name pos:start="337:82" pos:end="337:83">id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt pos:start="339:21" pos:end="341:116"><if pos:start="339:21" pos:end="341:116">if <condition pos:start="339:24" pos:end="339:41">(<expr pos:start="339:25" pos:end="339:40"><name pos:start="339:25" pos:end="339:40">input_descriptor</name></expr>)</condition><block type="pseudo" pos:start="341:25" pos:end="341:116"><block_content pos:start="341:25" pos:end="341:116">

                        <expr_stmt pos:start="341:25" pos:end="341:116"><expr pos:start="341:25" pos:end="341:115"><name pos:start="341:25" pos:end="341:35">input_props</name> <operator pos:start="341:37" pos:end="341:37">=</operator> <name pos:start="341:39" pos:end="341:61"><name pos:start="341:39" pos:end="341:54">input_descriptor</name><operator pos:start="341:55" pos:end="341:56">-&gt;</operator><name pos:start="341:57" pos:end="341:61">props</name></name> <operator pos:start="341:63" pos:end="341:63">&amp;</operator> <operator pos:start="341:65" pos:end="341:65">(</operator><name pos:start="341:66" pos:end="341:87">AV_CODEC_PROP_TEXT_SUB</name> <operator pos:start="341:89" pos:end="341:89">|</operator> <name pos:start="341:91" pos:end="341:114">AV_CODEC_PROP_BITMAP_SUB</name><operator pos:start="341:115" pos:end="341:115">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt pos:start="343:21" pos:end="345:118"><if pos:start="343:21" pos:end="345:118">if <condition pos:start="343:24" pos:end="343:42">(<expr pos:start="343:25" pos:end="343:41"><name pos:start="343:25" pos:end="343:41">output_descriptor</name></expr>)</condition><block type="pseudo" pos:start="345:25" pos:end="345:118"><block_content pos:start="345:25" pos:end="345:118">

                        <expr_stmt pos:start="345:25" pos:end="345:118"><expr pos:start="345:25" pos:end="345:117"><name pos:start="345:25" pos:end="345:36">output_props</name> <operator pos:start="345:38" pos:end="345:38">=</operator> <name pos:start="345:40" pos:end="345:63"><name pos:start="345:40" pos:end="345:56">output_descriptor</name><operator pos:start="345:57" pos:end="345:58">-&gt;</operator><name pos:start="345:59" pos:end="345:63">props</name></name> <operator pos:start="345:65" pos:end="345:65">&amp;</operator> <operator pos:start="345:67" pos:end="345:67">(</operator><name pos:start="345:68" pos:end="345:89">AV_CODEC_PROP_TEXT_SUB</name> <operator pos:start="345:91" pos:end="345:91">|</operator> <name pos:start="345:93" pos:end="345:116">AV_CODEC_PROP_BITMAP_SUB</name><operator pos:start="345:117" pos:end="345:117">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt pos:start="347:21" pos:end="363:21"><if pos:start="347:21" pos:end="363:21">if <condition pos:start="347:24" pos:end="357:52">(<expr pos:start="347:25" pos:end="357:51"><name pos:start="347:25" pos:end="347:43">subtitle_codec_name</name> <operator pos:start="347:45" pos:end="347:46">||</operator>

                        <name pos:start="349:25" pos:end="349:35">input_props</name> <operator pos:start="349:37" pos:end="349:37">&amp;</operator> <name pos:start="349:39" pos:end="349:50">output_props</name> <operator pos:start="349:52" pos:end="349:53">||</operator>

                        <comment type="line" pos:start="351:25" pos:end="351:101">// Map dvb teletext which has neither property to any output subtitle encoder</comment>

                        <name pos:start="353:25" pos:end="353:40">input_descriptor</name> <operator pos:start="353:42" pos:end="353:43">&amp;&amp;</operator> <name pos:start="353:45" pos:end="353:61">output_descriptor</name> <operator pos:start="353:63" pos:end="353:64">&amp;&amp;</operator>

                        <operator pos:start="355:25" pos:end="355:25">(</operator><operator pos:start="355:26" pos:end="355:26">!</operator><name pos:start="355:27" pos:end="355:49"><name pos:start="355:27" pos:end="355:42">input_descriptor</name><operator pos:start="355:43" pos:end="355:44">-&gt;</operator><name pos:start="355:45" pos:end="355:49">props</name></name> <operator pos:start="355:51" pos:end="355:52">||</operator>

                         <operator pos:start="357:26" pos:end="357:26">!</operator><name pos:start="357:27" pos:end="357:50"><name pos:start="357:27" pos:end="357:43">output_descriptor</name><operator pos:start="357:44" pos:end="357:45">-&gt;</operator><name pos:start="357:46" pos:end="357:50">props</name></name><operator pos:start="357:51" pos:end="357:51">)</operator></expr>)</condition> <block pos:start="357:54" pos:end="363:21">{<block_content pos:start="359:25" pos:end="361:30">

                        <expr_stmt pos:start="359:25" pos:end="359:54"><expr pos:start="359:25" pos:end="359:53"><call pos:start="359:25" pos:end="359:53"><name pos:start="359:25" pos:end="359:43">new_subtitle_stream</name><argument_list pos:start="359:44" pos:end="359:53">(<argument pos:start="359:45" pos:end="359:45"><expr pos:start="359:45" pos:end="359:45"><name pos:start="359:45" pos:end="359:45">o</name></expr></argument>, <argument pos:start="359:48" pos:end="359:49"><expr pos:start="359:48" pos:end="359:49"><name pos:start="359:48" pos:end="359:49">oc</name></expr></argument>, <argument pos:start="359:52" pos:end="359:52"><expr pos:start="359:52" pos:end="359:52"><name pos:start="359:52" pos:end="359:52">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="361:25" pos:end="361:30">break;</break>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt></block_content></block></for>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="369:9" pos:end="369:41">/* Data only if codec id match */</comment>

        <if_stmt pos:start="371:9" pos:end="385:9"><if pos:start="371:9" pos:end="385:9">if <condition pos:start="371:12" pos:end="371:30">(<expr pos:start="371:13" pos:end="371:28"><operator pos:start="371:13" pos:end="371:13">!</operator><name pos:start="371:14" pos:end="371:28"><name pos:start="371:14" pos:end="371:14">o</name><operator pos:start="371:15" pos:end="371:16">-&gt;</operator><name pos:start="371:17" pos:end="371:28">data_disable</name></name></expr> )</condition> <block pos:start="371:32" pos:end="385:9">{<block_content pos:start="373:13" pos:end="383:13">

            <decl_stmt pos:start="373:13" pos:end="373:107"><decl pos:start="373:13" pos:end="373:106"><type pos:start="373:13" pos:end="373:26"><name pos:start="373:13" pos:end="373:26"><name pos:start="373:13" pos:end="373:16">enum</name> <name pos:start="373:18" pos:end="373:26">AVCodecID</name></name></type> <name pos:start="373:28" pos:end="373:35">codec_id</name> <init pos:start="373:37" pos:end="373:106">= <expr pos:start="373:39" pos:end="373:106"><call pos:start="373:39" pos:end="373:106"><name pos:start="373:39" pos:end="373:52">av_guess_codec</name><argument_list pos:start="373:53" pos:end="373:106">(<argument pos:start="373:54" pos:end="373:64"><expr pos:start="373:54" pos:end="373:64"><name pos:start="373:54" pos:end="373:64"><name pos:start="373:54" pos:end="373:55">oc</name><operator pos:start="373:56" pos:end="373:57">-&gt;</operator><name pos:start="373:58" pos:end="373:64">oformat</name></name></expr></argument>, <argument pos:start="373:67" pos:end="373:70"><expr pos:start="373:67" pos:end="373:70"><name pos:start="373:67" pos:end="373:70">NULL</name></expr></argument>, <argument pos:start="373:73" pos:end="373:80"><expr pos:start="373:73" pos:end="373:80"><name pos:start="373:73" pos:end="373:80">filename</name></expr></argument>, <argument pos:start="373:83" pos:end="373:86"><expr pos:start="373:83" pos:end="373:86"><name pos:start="373:83" pos:end="373:86">NULL</name></expr></argument>, <argument pos:start="373:89" pos:end="373:105"><expr pos:start="373:89" pos:end="373:105"><name pos:start="373:89" pos:end="373:105">AVMEDIA_TYPE_DATA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <for pos:start="375:13" pos:end="383:13">for <control pos:start="375:17" pos:end="375:82">(<init pos:start="375:18" pos:end="375:23"><expr pos:start="375:18" pos:end="375:22"><name pos:start="375:18" pos:end="375:18">i</name> <operator pos:start="375:20" pos:end="375:20">=</operator> <literal type="number" pos:start="375:22" pos:end="375:22">0</literal></expr>;</init> <condition pos:start="375:25" pos:end="375:77"><expr pos:start="375:25" pos:end="375:76"><name pos:start="375:25" pos:end="375:32">codec_id</name> <operator pos:start="375:34" pos:end="375:35">!=</operator> <name pos:start="375:37" pos:end="375:52">AV_CODEC_ID_NONE</name> <operator pos:start="375:54" pos:end="375:55">&amp;&amp;</operator> <name pos:start="375:57" pos:end="375:57">i</name> <operator pos:start="375:59" pos:end="375:59">&lt;</operator> <name pos:start="375:61" pos:end="375:76">nb_input_streams</name></expr>;</condition> <incr pos:start="375:79" pos:end="375:81"><expr pos:start="375:79" pos:end="375:81"><name pos:start="375:79" pos:end="375:79">i</name><operator pos:start="375:80" pos:end="375:81">++</operator></expr></incr>)</control> <block pos:start="375:84" pos:end="383:13">{<block_content pos:start="377:17" pos:end="381:46">

                <if_stmt pos:start="377:17" pos:end="381:46"><if pos:start="377:17" pos:end="381:46">if <condition pos:start="377:20" pos:end="379:74">(<expr pos:start="377:21" pos:end="379:72"><name pos:start="377:21" pos:end="377:36"><name pos:start="377:21" pos:end="377:33">input_streams</name><index pos:start="377:34" pos:end="377:36">[<expr pos:start="377:35" pos:end="377:35"><name pos:start="377:35" pos:end="377:35">i</name></expr>]</index></name><operator pos:start="377:37" pos:end="377:38">-&gt;</operator><name pos:start="377:39" pos:end="377:59"><name pos:start="377:39" pos:end="377:40">st</name><operator pos:start="377:41" pos:end="377:42">-&gt;</operator><name pos:start="377:43" pos:end="377:47">codec</name><operator pos:start="377:48" pos:end="377:49">-&gt;</operator><name pos:start="377:50" pos:end="377:59">codec_type</name></name> <operator pos:start="377:61" pos:end="377:62">==</operator> <name pos:start="377:64" pos:end="377:80">AVMEDIA_TYPE_DATA</name>

                    <operator pos:start="379:21" pos:end="379:22">&amp;&amp;</operator> <name pos:start="379:24" pos:end="379:39"><name pos:start="379:24" pos:end="379:36">input_streams</name><index pos:start="379:37" pos:end="379:39">[<expr pos:start="379:38" pos:end="379:38"><name pos:start="379:38" pos:end="379:38">i</name></expr>]</index></name><operator pos:start="379:40" pos:end="379:41">-&gt;</operator><name pos:start="379:42" pos:end="379:60"><name pos:start="379:42" pos:end="379:43">st</name><operator pos:start="379:44" pos:end="379:45">-&gt;</operator><name pos:start="379:46" pos:end="379:50">codec</name><operator pos:start="379:51" pos:end="379:52">-&gt;</operator><name pos:start="379:53" pos:end="379:60">codec_id</name></name> <operator pos:start="379:62" pos:end="379:63">==</operator> <name pos:start="379:65" pos:end="379:72">codec_id</name></expr> )</condition><block type="pseudo" pos:start="381:21" pos:end="381:46"><block_content pos:start="381:21" pos:end="381:46">

                    <expr_stmt pos:start="381:21" pos:end="381:46"><expr pos:start="381:21" pos:end="381:45"><call pos:start="381:21" pos:end="381:45"><name pos:start="381:21" pos:end="381:35">new_data_stream</name><argument_list pos:start="381:36" pos:end="381:45">(<argument pos:start="381:37" pos:end="381:37"><expr pos:start="381:37" pos:end="381:37"><name pos:start="381:37" pos:end="381:37">o</name></expr></argument>, <argument pos:start="381:40" pos:end="381:41"><expr pos:start="381:40" pos:end="381:41"><name pos:start="381:40" pos:end="381:41">oc</name></expr></argument>, <argument pos:start="381:44" pos:end="381:44"><expr pos:start="381:44" pos:end="381:44"><name pos:start="381:44" pos:end="381:44">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="387:7" pos:end="529:5">else <block pos:start="387:12" pos:end="529:5">{<block_content pos:start="389:9" pos:end="527:9">

        <for pos:start="389:9" pos:end="527:9">for <control pos:start="389:13" pos:end="389:47">(<init pos:start="389:14" pos:end="389:19"><expr pos:start="389:14" pos:end="389:18"><name pos:start="389:14" pos:end="389:14">i</name> <operator pos:start="389:16" pos:end="389:16">=</operator> <literal type="number" pos:start="389:18" pos:end="389:18">0</literal></expr>;</init> <condition pos:start="389:21" pos:end="389:42"><expr pos:start="389:21" pos:end="389:41"><name pos:start="389:21" pos:end="389:21">i</name> <operator pos:start="389:23" pos:end="389:23">&lt;</operator> <name pos:start="389:25" pos:end="389:41"><name pos:start="389:25" pos:end="389:25">o</name><operator pos:start="389:26" pos:end="389:27">-&gt;</operator><name pos:start="389:28" pos:end="389:41">nb_stream_maps</name></name></expr>;</condition> <incr pos:start="389:44" pos:end="389:46"><expr pos:start="389:44" pos:end="389:46"><name pos:start="389:44" pos:end="389:44">i</name><operator pos:start="389:45" pos:end="389:46">++</operator></expr></incr>)</control> <block pos:start="389:49" pos:end="527:9">{<block_content pos:start="391:13" pos:end="525:13">

            <decl_stmt pos:start="391:13" pos:end="391:48"><decl pos:start="391:13" pos:end="391:47"><type pos:start="391:13" pos:end="391:23"><name pos:start="391:13" pos:end="391:21">StreamMap</name> <modifier pos:start="391:23" pos:end="391:23">*</modifier></type><name pos:start="391:24" pos:end="391:26">map</name> <init pos:start="391:28" pos:end="391:47">= <expr pos:start="391:30" pos:end="391:47"><operator pos:start="391:30" pos:end="391:30">&amp;</operator><name pos:start="391:31" pos:end="391:47"><name pos:start="391:31" pos:end="391:31">o</name><operator pos:start="391:32" pos:end="391:33">-&gt;</operator><name pos:start="391:34" pos:end="391:44">stream_maps</name><index pos:start="391:45" pos:end="391:47">[<expr pos:start="391:46" pos:end="391:46"><name pos:start="391:46" pos:end="391:46">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="395:13" pos:end="397:25"><if pos:start="395:13" pos:end="397:25">if <condition pos:start="395:16" pos:end="395:30">(<expr pos:start="395:17" pos:end="395:29"><name pos:start="395:17" pos:end="395:29"><name pos:start="395:17" pos:end="395:19">map</name><operator pos:start="395:20" pos:end="395:21">-&gt;</operator><name pos:start="395:22" pos:end="395:29">disabled</name></name></expr>)</condition><block type="pseudo" pos:start="397:17" pos:end="397:25"><block_content pos:start="397:17" pos:end="397:25">

                <continue pos:start="397:17" pos:end="397:25">continue;</continue></block_content></block></if></if_stmt>



            <if_stmt pos:start="401:13" pos:end="525:13"><if pos:start="401:13" pos:end="445:13">if <condition pos:start="401:16" pos:end="401:31">(<expr pos:start="401:17" pos:end="401:30"><name pos:start="401:17" pos:end="401:30"><name pos:start="401:17" pos:end="401:19">map</name><operator pos:start="401:20" pos:end="401:21">-&gt;</operator><name pos:start="401:22" pos:end="401:30">linklabel</name></name></expr>)</condition> <block pos:start="401:33" pos:end="445:13">{<block_content pos:start="403:17" pos:end="443:51">

                <decl_stmt pos:start="403:17" pos:end="403:32"><decl pos:start="403:17" pos:end="403:31"><type pos:start="403:17" pos:end="403:29"><name pos:start="403:17" pos:end="403:27">FilterGraph</name> <modifier pos:start="403:29" pos:end="403:29">*</modifier></type><name pos:start="403:30" pos:end="403:31">fg</name></decl>;</decl_stmt>

                <decl_stmt pos:start="405:17" pos:end="405:45"><decl pos:start="405:17" pos:end="405:44"><type pos:start="405:17" pos:end="405:30"><name pos:start="405:17" pos:end="405:28">OutputFilter</name> <modifier pos:start="405:30" pos:end="405:30">*</modifier></type><name pos:start="405:31" pos:end="405:37">ofilter</name> <init pos:start="405:39" pos:end="405:44">= <expr pos:start="405:41" pos:end="405:44"><name pos:start="405:41" pos:end="405:44">NULL</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="407:17" pos:end="407:25"><decl pos:start="407:17" pos:end="407:21"><type pos:start="407:17" pos:end="407:19"><name pos:start="407:17" pos:end="407:19">int</name></type> <name pos:start="407:21" pos:end="407:21">j</name></decl>, <decl pos:start="407:24" pos:end="407:24"><type ref="prev" pos:start="407:17" pos:end="407:19"/><name pos:start="407:24" pos:end="407:24">k</name></decl>;</decl_stmt>



                <for pos:start="411:17" pos:end="429:17">for <control pos:start="411:21" pos:end="411:53">(<init pos:start="411:22" pos:end="411:27"><expr pos:start="411:22" pos:end="411:26"><name pos:start="411:22" pos:end="411:22">j</name> <operator pos:start="411:24" pos:end="411:24">=</operator> <literal type="number" pos:start="411:26" pos:end="411:26">0</literal></expr>;</init> <condition pos:start="411:29" pos:end="411:48"><expr pos:start="411:29" pos:end="411:47"><name pos:start="411:29" pos:end="411:29">j</name> <operator pos:start="411:31" pos:end="411:31">&lt;</operator> <name pos:start="411:33" pos:end="411:47">nb_filtergraphs</name></expr>;</condition> <incr pos:start="411:50" pos:end="411:52"><expr pos:start="411:50" pos:end="411:52"><name pos:start="411:50" pos:end="411:50">j</name><operator pos:start="411:51" pos:end="411:52">++</operator></expr></incr>)</control> <block pos:start="411:55" pos:end="429:17">{<block_content pos:start="413:21" pos:end="427:21">

                    <expr_stmt pos:start="413:21" pos:end="413:41"><expr pos:start="413:21" pos:end="413:40"><name pos:start="413:21" pos:end="413:22">fg</name> <operator pos:start="413:24" pos:end="413:24">=</operator> <name pos:start="413:26" pos:end="413:40"><name pos:start="413:26" pos:end="413:37">filtergraphs</name><index pos:start="413:38" pos:end="413:40">[<expr pos:start="413:39" pos:end="413:39"><name pos:start="413:39" pos:end="413:39">j</name></expr>]</index></name></expr>;</expr_stmt>

                    <for pos:start="415:21" pos:end="427:21">for <control pos:start="415:25" pos:end="415:56">(<init pos:start="415:26" pos:end="415:31"><expr pos:start="415:26" pos:end="415:30"><name pos:start="415:26" pos:end="415:26">k</name> <operator pos:start="415:28" pos:end="415:28">=</operator> <literal type="number" pos:start="415:30" pos:end="415:30">0</literal></expr>;</init> <condition pos:start="415:33" pos:end="415:51"><expr pos:start="415:33" pos:end="415:50"><name pos:start="415:33" pos:end="415:33">k</name> <operator pos:start="415:35" pos:end="415:35">&lt;</operator> <name pos:start="415:37" pos:end="415:50"><name pos:start="415:37" pos:end="415:38">fg</name><operator pos:start="415:39" pos:end="415:40">-&gt;</operator><name pos:start="415:41" pos:end="415:50">nb_outputs</name></name></expr>;</condition> <incr pos:start="415:53" pos:end="415:55"><expr pos:start="415:53" pos:end="415:55"><name pos:start="415:53" pos:end="415:53">k</name><operator pos:start="415:54" pos:end="415:55">++</operator></expr></incr>)</control> <block pos:start="415:58" pos:end="427:21">{<block_content pos:start="417:25" pos:end="425:25">

                        <decl_stmt pos:start="417:25" pos:end="417:69"><decl pos:start="417:25" pos:end="417:68"><type pos:start="417:25" pos:end="417:39"><name pos:start="417:25" pos:end="417:37">AVFilterInOut</name> <modifier pos:start="417:39" pos:end="417:39">*</modifier></type><name pos:start="417:40" pos:end="417:42">out</name> <init pos:start="417:44" pos:end="417:68">= <expr pos:start="417:46" pos:end="417:68"><name pos:start="417:46" pos:end="417:59"><name pos:start="417:46" pos:end="417:47">fg</name><operator pos:start="417:48" pos:end="417:49">-&gt;</operator><name pos:start="417:50" pos:end="417:56">outputs</name><index pos:start="417:57" pos:end="417:59">[<expr pos:start="417:58" pos:end="417:58"><name pos:start="417:58" pos:end="417:58">k</name></expr>]</index></name><operator pos:start="417:60" pos:end="417:61">-&gt;</operator><name pos:start="417:62" pos:end="417:68">out_tmp</name></expr></init></decl>;</decl_stmt>

                        <if_stmt pos:start="419:25" pos:end="425:25"><if pos:start="419:25" pos:end="425:25">if <condition pos:start="419:28" pos:end="419:70">(<expr pos:start="419:29" pos:end="419:69"><name pos:start="419:29" pos:end="419:31">out</name> <operator pos:start="419:33" pos:end="419:34">&amp;&amp;</operator> <operator pos:start="419:36" pos:end="419:36">!</operator><call pos:start="419:37" pos:end="419:69"><name pos:start="419:37" pos:end="419:42">strcmp</name><argument_list pos:start="419:43" pos:end="419:69">(<argument pos:start="419:44" pos:end="419:52"><expr pos:start="419:44" pos:end="419:52"><name pos:start="419:44" pos:end="419:52"><name pos:start="419:44" pos:end="419:46">out</name><operator pos:start="419:47" pos:end="419:48">-&gt;</operator><name pos:start="419:49" pos:end="419:52">name</name></name></expr></argument>, <argument pos:start="419:55" pos:end="419:68"><expr pos:start="419:55" pos:end="419:68"><name pos:start="419:55" pos:end="419:68"><name pos:start="419:55" pos:end="419:57">map</name><operator pos:start="419:58" pos:end="419:59">-&gt;</operator><name pos:start="419:60" pos:end="419:68">linklabel</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="419:72" pos:end="425:25">{<block_content pos:start="421:29" pos:end="423:42">

                            <expr_stmt pos:start="421:29" pos:end="421:53"><expr pos:start="421:29" pos:end="421:52"><name pos:start="421:29" pos:end="421:35">ofilter</name> <operator pos:start="421:37" pos:end="421:37">=</operator> <name pos:start="421:39" pos:end="421:52"><name pos:start="421:39" pos:end="421:40">fg</name><operator pos:start="421:41" pos:end="421:42">-&gt;</operator><name pos:start="421:43" pos:end="421:49">outputs</name><index pos:start="421:50" pos:end="421:52">[<expr pos:start="421:51" pos:end="421:51"><name pos:start="421:51" pos:end="421:51">k</name></expr>]</index></name></expr>;</expr_stmt>

                            <goto pos:start="423:29" pos:end="423:42">goto <name pos:start="423:34" pos:end="423:41">loop_end</name>;</goto>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></for>

<label pos:start="431:1" pos:end="431:9"><name pos:start="431:1" pos:end="431:8">loop_end</name>:</label>

                <if_stmt pos:start="433:17" pos:end="441:17"><if pos:start="433:17" pos:end="441:17">if <condition pos:start="433:20" pos:end="433:29">(<expr pos:start="433:21" pos:end="433:28"><operator pos:start="433:21" pos:end="433:21">!</operator><name pos:start="433:22" pos:end="433:28">ofilter</name></expr>)</condition> <block pos:start="433:31" pos:end="441:17">{<block_content pos:start="435:21" pos:end="439:36">

                    <expr_stmt pos:start="435:21" pos:end="437:108"><expr pos:start="435:21" pos:end="437:107"><call pos:start="435:21" pos:end="437:107"><name pos:start="435:21" pos:end="435:26">av_log</name><argument_list pos:start="435:27" pos:end="437:107">(<argument pos:start="435:28" pos:end="435:31"><expr pos:start="435:28" pos:end="435:31"><name pos:start="435:28" pos:end="435:31">NULL</name></expr></argument>, <argument pos:start="435:34" pos:end="435:45"><expr pos:start="435:34" pos:end="435:45"><name pos:start="435:34" pos:end="435:45">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="435:48" pos:end="437:90"><expr pos:start="435:48" pos:end="437:90"><literal type="string" pos:start="435:48" pos:end="435:87">"Output with label '%s' does not exist "</literal>

                           <literal type="string" pos:start="437:28" pos:end="437:90">"in any defined filter graph, or was already used elsewhere.\n"</literal></expr></argument>, <argument pos:start="437:93" pos:end="437:106"><expr pos:start="437:93" pos:end="437:106"><name pos:start="437:93" pos:end="437:106"><name pos:start="437:93" pos:end="437:95">map</name><operator pos:start="437:96" pos:end="437:97">-&gt;</operator><name pos:start="437:98" pos:end="437:106">linklabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="439:21" pos:end="439:36"><expr pos:start="439:21" pos:end="439:35"><call pos:start="439:21" pos:end="439:35"><name pos:start="439:21" pos:end="439:32">exit_program</name><argument_list pos:start="439:33" pos:end="439:35">(<argument pos:start="439:34" pos:end="439:34"><expr pos:start="439:34" pos:end="439:34"><literal type="number" pos:start="439:34" pos:end="439:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="443:17" pos:end="443:51"><expr pos:start="443:17" pos:end="443:50"><call pos:start="443:17" pos:end="443:50"><name pos:start="443:17" pos:end="443:34">init_output_filter</name><argument_list pos:start="443:35" pos:end="443:50">(<argument pos:start="443:36" pos:end="443:42"><expr pos:start="443:36" pos:end="443:42"><name pos:start="443:36" pos:end="443:42">ofilter</name></expr></argument>, <argument pos:start="443:45" pos:end="443:45"><expr pos:start="443:45" pos:end="443:45"><name pos:start="443:45" pos:end="443:45">o</name></expr></argument>, <argument pos:start="443:48" pos:end="443:49"><expr pos:start="443:48" pos:end="443:49"><name pos:start="443:48" pos:end="443:49">oc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="445:15" pos:end="525:13">else <block pos:start="445:20" pos:end="525:13">{<block_content pos:start="447:17" pos:end="523:76">

                <decl_stmt pos:start="447:17" pos:end="447:90"><decl pos:start="447:17" pos:end="447:89"><type pos:start="447:17" pos:end="447:19"><name pos:start="447:17" pos:end="447:19">int</name></type> <name pos:start="447:21" pos:end="447:27">src_idx</name> <init pos:start="447:29" pos:end="447:89">= <expr pos:start="447:31" pos:end="447:89"><name pos:start="447:31" pos:end="447:58"><name pos:start="447:31" pos:end="447:41">input_files</name><index pos:start="447:42" pos:end="447:58">[<expr pos:start="447:43" pos:end="447:57"><name pos:start="447:43" pos:end="447:57"><name pos:start="447:43" pos:end="447:45">map</name><operator pos:start="447:46" pos:end="447:47">-&gt;</operator><name pos:start="447:48" pos:end="447:57">file_index</name></name></expr>]</index></name><operator pos:start="447:59" pos:end="447:60">-&gt;</operator><name pos:start="447:61" pos:end="447:69">ist_index</name> <operator pos:start="447:71" pos:end="447:71">+</operator> <name pos:start="447:73" pos:end="447:89"><name pos:start="447:73" pos:end="447:75">map</name><operator pos:start="447:76" pos:end="447:77">-&gt;</operator><name pos:start="447:78" pos:end="447:89">stream_index</name></name></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="451:17" pos:end="451:97"><expr pos:start="451:17" pos:end="451:96"><name pos:start="451:17" pos:end="451:19">ist</name> <operator pos:start="451:21" pos:end="451:21">=</operator> <name pos:start="451:23" pos:end="451:96"><name pos:start="451:23" pos:end="451:35">input_streams</name><index pos:start="451:36" pos:end="451:96">[<expr pos:start="451:37" pos:end="451:95"><name pos:start="451:37" pos:end="451:64"><name pos:start="451:37" pos:end="451:47">input_files</name><index pos:start="451:48" pos:end="451:64">[<expr pos:start="451:49" pos:end="451:63"><name pos:start="451:49" pos:end="451:63"><name pos:start="451:49" pos:end="451:51">map</name><operator pos:start="451:52" pos:end="451:53">-&gt;</operator><name pos:start="451:54" pos:end="451:63">file_index</name></name></expr>]</index></name><operator pos:start="451:65" pos:end="451:66">-&gt;</operator><name pos:start="451:67" pos:end="451:75">ist_index</name> <operator pos:start="451:77" pos:end="451:77">+</operator> <name pos:start="451:79" pos:end="451:95"><name pos:start="451:79" pos:end="451:81">map</name><operator pos:start="451:82" pos:end="451:83">-&gt;</operator><name pos:start="451:84" pos:end="451:95">stream_index</name></name></expr>]</index></name></expr>;</expr_stmt>

                <if_stmt pos:start="453:17" pos:end="455:29"><if pos:start="453:17" pos:end="455:29">if<condition pos:start="453:19" pos:end="453:94">(<expr pos:start="453:20" pos:end="453:93"><name pos:start="453:20" pos:end="453:38"><name pos:start="453:20" pos:end="453:20">o</name><operator pos:start="453:21" pos:end="453:22">-&gt;</operator><name pos:start="453:23" pos:end="453:38">subtitle_disable</name></name> <operator pos:start="453:40" pos:end="453:41">&amp;&amp;</operator> <name pos:start="453:43" pos:end="453:68"><name pos:start="453:43" pos:end="453:45">ist</name><operator pos:start="453:46" pos:end="453:47">-&gt;</operator><name pos:start="453:48" pos:end="453:49">st</name><operator pos:start="453:50" pos:end="453:51">-&gt;</operator><name pos:start="453:52" pos:end="453:56">codec</name><operator pos:start="453:57" pos:end="453:58">-&gt;</operator><name pos:start="453:59" pos:end="453:68">codec_type</name></name> <operator pos:start="453:70" pos:end="453:71">==</operator> <name pos:start="453:73" pos:end="453:93">AVMEDIA_TYPE_SUBTITLE</name></expr>)</condition><block type="pseudo" pos:start="455:21" pos:end="455:29"><block_content pos:start="455:21" pos:end="455:29">

                    <continue pos:start="455:21" pos:end="455:29">continue;</continue></block_content></block></if></if_stmt>

                <if_stmt pos:start="457:17" pos:end="459:29"><if pos:start="457:17" pos:end="459:29">if<condition pos:start="457:19" pos:end="457:91">(<expr pos:start="457:20" pos:end="457:90"><name pos:start="457:20" pos:end="457:38"><name pos:start="457:20" pos:end="457:20">o</name><operator pos:start="457:21" pos:end="457:22">-&gt;</operator>   <name pos:start="457:26" pos:end="457:38">audio_disable</name></name> <operator pos:start="457:40" pos:end="457:41">&amp;&amp;</operator> <name pos:start="457:43" pos:end="457:68"><name pos:start="457:43" pos:end="457:45">ist</name><operator pos:start="457:46" pos:end="457:47">-&gt;</operator><name pos:start="457:48" pos:end="457:49">st</name><operator pos:start="457:50" pos:end="457:51">-&gt;</operator><name pos:start="457:52" pos:end="457:56">codec</name><operator pos:start="457:57" pos:end="457:58">-&gt;</operator><name pos:start="457:59" pos:end="457:68">codec_type</name></name> <operator pos:start="457:70" pos:end="457:71">==</operator> <name pos:start="457:73" pos:end="457:90">AVMEDIA_TYPE_AUDIO</name></expr>)</condition><block type="pseudo" pos:start="459:21" pos:end="459:29"><block_content pos:start="459:21" pos:end="459:29">

                    <continue pos:start="459:21" pos:end="459:29">continue;</continue></block_content></block></if></if_stmt>

                <if_stmt pos:start="461:17" pos:end="463:29"><if pos:start="461:17" pos:end="463:29">if<condition pos:start="461:19" pos:end="461:91">(<expr pos:start="461:20" pos:end="461:90"><name pos:start="461:20" pos:end="461:38"><name pos:start="461:20" pos:end="461:20">o</name><operator pos:start="461:21" pos:end="461:22">-&gt;</operator>   <name pos:start="461:26" pos:end="461:38">video_disable</name></name> <operator pos:start="461:40" pos:end="461:41">&amp;&amp;</operator> <name pos:start="461:43" pos:end="461:68"><name pos:start="461:43" pos:end="461:45">ist</name><operator pos:start="461:46" pos:end="461:47">-&gt;</operator><name pos:start="461:48" pos:end="461:49">st</name><operator pos:start="461:50" pos:end="461:51">-&gt;</operator><name pos:start="461:52" pos:end="461:56">codec</name><operator pos:start="461:57" pos:end="461:58">-&gt;</operator><name pos:start="461:59" pos:end="461:68">codec_type</name></name> <operator pos:start="461:70" pos:end="461:71">==</operator> <name pos:start="461:73" pos:end="461:90">AVMEDIA_TYPE_VIDEO</name></expr>)</condition><block type="pseudo" pos:start="463:21" pos:end="463:29"><block_content pos:start="463:21" pos:end="463:29">

                    <continue pos:start="463:21" pos:end="463:29">continue;</continue></block_content></block></if></if_stmt>

                <if_stmt pos:start="465:17" pos:end="467:29"><if pos:start="465:17" pos:end="467:29">if<condition pos:start="465:19" pos:end="465:90">(<expr pos:start="465:20" pos:end="465:89"><name pos:start="465:20" pos:end="465:38"><name pos:start="465:20" pos:end="465:20">o</name><operator pos:start="465:21" pos:end="465:22">-&gt;</operator>    <name pos:start="465:27" pos:end="465:38">data_disable</name></name> <operator pos:start="465:40" pos:end="465:41">&amp;&amp;</operator> <name pos:start="465:43" pos:end="465:68"><name pos:start="465:43" pos:end="465:45">ist</name><operator pos:start="465:46" pos:end="465:47">-&gt;</operator><name pos:start="465:48" pos:end="465:49">st</name><operator pos:start="465:50" pos:end="465:51">-&gt;</operator><name pos:start="465:52" pos:end="465:56">codec</name><operator pos:start="465:57" pos:end="465:58">-&gt;</operator><name pos:start="465:59" pos:end="465:68">codec_type</name></name> <operator pos:start="465:70" pos:end="465:71">==</operator> <name pos:start="465:73" pos:end="465:89">AVMEDIA_TYPE_DATA</name></expr>)</condition><block type="pseudo" pos:start="467:21" pos:end="467:29"><block_content pos:start="467:21" pos:end="467:29">

                    <continue pos:start="467:21" pos:end="467:29">continue;</continue></block_content></block></if></if_stmt>



                <expr_stmt pos:start="471:17" pos:end="471:27"><expr pos:start="471:17" pos:end="471:26"><name pos:start="471:17" pos:end="471:19">ost</name> <operator pos:start="471:21" pos:end="471:21">=</operator> <name pos:start="471:23" pos:end="471:26">NULL</name></expr>;</expr_stmt>

                <switch pos:start="473:17" pos:end="517:17">switch <condition pos:start="473:24" pos:end="473:51">(<expr pos:start="473:25" pos:end="473:50"><name pos:start="473:25" pos:end="473:50"><name pos:start="473:25" pos:end="473:27">ist</name><operator pos:start="473:28" pos:end="473:29">-&gt;</operator><name pos:start="473:30" pos:end="473:31">st</name><operator pos:start="473:32" pos:end="473:33">-&gt;</operator><name pos:start="473:34" pos:end="473:38">codec</name><operator pos:start="473:39" pos:end="473:40">-&gt;</operator><name pos:start="473:41" pos:end="473:50">codec_type</name></name></expr>)</condition> <block pos:start="473:53" pos:end="517:17">{<block_content pos:start="475:17" pos:end="515:21">

                <case pos:start="475:17" pos:end="475:40">case <expr pos:start="475:22" pos:end="475:39"><name pos:start="475:22" pos:end="475:39">AVMEDIA_TYPE_VIDEO</name></expr>:</case>      <expr_stmt pos:start="475:47" pos:end="475:90"><expr pos:start="475:47" pos:end="475:89"><name pos:start="475:47" pos:end="475:49">ost</name> <operator pos:start="475:51" pos:end="475:51">=</operator> <call pos:start="475:53" pos:end="475:89"><name pos:start="475:53" pos:end="475:68">new_video_stream</name>     <argument_list pos:start="475:74" pos:end="475:89">(<argument pos:start="475:75" pos:end="475:75"><expr pos:start="475:75" pos:end="475:75"><name pos:start="475:75" pos:end="475:75">o</name></expr></argument>, <argument pos:start="475:78" pos:end="475:79"><expr pos:start="475:78" pos:end="475:79"><name pos:start="475:78" pos:end="475:79">oc</name></expr></argument>, <argument pos:start="475:82" pos:end="475:88"><expr pos:start="475:82" pos:end="475:88"><name pos:start="475:82" pos:end="475:88">src_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="475:92" pos:end="475:97">break;</break>

                <case pos:start="477:17" pos:end="477:40">case <expr pos:start="477:22" pos:end="477:39"><name pos:start="477:22" pos:end="477:39">AVMEDIA_TYPE_AUDIO</name></expr>:</case>      <expr_stmt pos:start="477:47" pos:end="477:90"><expr pos:start="477:47" pos:end="477:89"><name pos:start="477:47" pos:end="477:49">ost</name> <operator pos:start="477:51" pos:end="477:51">=</operator> <call pos:start="477:53" pos:end="477:89"><name pos:start="477:53" pos:end="477:68">new_audio_stream</name>     <argument_list pos:start="477:74" pos:end="477:89">(<argument pos:start="477:75" pos:end="477:75"><expr pos:start="477:75" pos:end="477:75"><name pos:start="477:75" pos:end="477:75">o</name></expr></argument>, <argument pos:start="477:78" pos:end="477:79"><expr pos:start="477:78" pos:end="477:79"><name pos:start="477:78" pos:end="477:79">oc</name></expr></argument>, <argument pos:start="477:82" pos:end="477:88"><expr pos:start="477:82" pos:end="477:88"><name pos:start="477:82" pos:end="477:88">src_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="477:92" pos:end="477:97">break;</break>

                <case pos:start="479:17" pos:end="479:43">case <expr pos:start="479:22" pos:end="479:42"><name pos:start="479:22" pos:end="479:42">AVMEDIA_TYPE_SUBTITLE</name></expr>:</case>   <expr_stmt pos:start="479:47" pos:end="479:90"><expr pos:start="479:47" pos:end="479:89"><name pos:start="479:47" pos:end="479:49">ost</name> <operator pos:start="479:51" pos:end="479:51">=</operator> <call pos:start="479:53" pos:end="479:89"><name pos:start="479:53" pos:end="479:71">new_subtitle_stream</name>  <argument_list pos:start="479:74" pos:end="479:89">(<argument pos:start="479:75" pos:end="479:75"><expr pos:start="479:75" pos:end="479:75"><name pos:start="479:75" pos:end="479:75">o</name></expr></argument>, <argument pos:start="479:78" pos:end="479:79"><expr pos:start="479:78" pos:end="479:79"><name pos:start="479:78" pos:end="479:79">oc</name></expr></argument>, <argument pos:start="479:82" pos:end="479:88"><expr pos:start="479:82" pos:end="479:88"><name pos:start="479:82" pos:end="479:88">src_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="479:92" pos:end="479:97">break;</break>

                <case pos:start="481:17" pos:end="481:39">case <expr pos:start="481:22" pos:end="481:38"><name pos:start="481:22" pos:end="481:38">AVMEDIA_TYPE_DATA</name></expr>:</case>       <expr_stmt pos:start="481:47" pos:end="481:90"><expr pos:start="481:47" pos:end="481:89"><name pos:start="481:47" pos:end="481:49">ost</name> <operator pos:start="481:51" pos:end="481:51">=</operator> <call pos:start="481:53" pos:end="481:89"><name pos:start="481:53" pos:end="481:67">new_data_stream</name>      <argument_list pos:start="481:74" pos:end="481:89">(<argument pos:start="481:75" pos:end="481:75"><expr pos:start="481:75" pos:end="481:75"><name pos:start="481:75" pos:end="481:75">o</name></expr></argument>, <argument pos:start="481:78" pos:end="481:79"><expr pos:start="481:78" pos:end="481:79"><name pos:start="481:78" pos:end="481:79">oc</name></expr></argument>, <argument pos:start="481:82" pos:end="481:88"><expr pos:start="481:82" pos:end="481:88"><name pos:start="481:82" pos:end="481:88">src_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="481:92" pos:end="481:97">break;</break>

                <case pos:start="483:17" pos:end="483:45">case <expr pos:start="483:22" pos:end="483:44"><name pos:start="483:22" pos:end="483:44">AVMEDIA_TYPE_ATTACHMENT</name></expr>:</case> <expr_stmt pos:start="483:47" pos:end="483:90"><expr pos:start="483:47" pos:end="483:89"><name pos:start="483:47" pos:end="483:49">ost</name> <operator pos:start="483:51" pos:end="483:51">=</operator> <call pos:start="483:53" pos:end="483:89"><name pos:start="483:53" pos:end="483:73">new_attachment_stream</name><argument_list pos:start="483:74" pos:end="483:89">(<argument pos:start="483:75" pos:end="483:75"><expr pos:start="483:75" pos:end="483:75"><name pos:start="483:75" pos:end="483:75">o</name></expr></argument>, <argument pos:start="483:78" pos:end="483:79"><expr pos:start="483:78" pos:end="483:79"><name pos:start="483:78" pos:end="483:79">oc</name></expr></argument>, <argument pos:start="483:82" pos:end="483:88"><expr pos:start="483:82" pos:end="483:88"><name pos:start="483:82" pos:end="483:88">src_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="483:92" pos:end="483:97">break;</break>

                <case pos:start="485:17" pos:end="485:42">case <expr pos:start="485:22" pos:end="485:41"><name pos:start="485:22" pos:end="485:41">AVMEDIA_TYPE_UNKNOWN</name></expr>:</case>

                    <if_stmt pos:start="487:21" pos:end="493:21"><if pos:start="487:21" pos:end="493:21">if <condition pos:start="487:24" pos:end="487:45">(<expr pos:start="487:25" pos:end="487:44"><name pos:start="487:25" pos:end="487:44">copy_unknown_streams</name></expr>)</condition> <block pos:start="487:47" pos:end="493:21">{<block_content pos:start="489:25" pos:end="491:30">

                        <expr_stmt pos:start="489:25" pos:end="489:68"><expr pos:start="489:25" pos:end="489:67"><name pos:start="489:25" pos:end="489:27">ost</name> <operator pos:start="489:29" pos:end="489:29">=</operator> <call pos:start="489:31" pos:end="489:67"><name pos:start="489:31" pos:end="489:48">new_unknown_stream</name>   <argument_list pos:start="489:52" pos:end="489:67">(<argument pos:start="489:53" pos:end="489:53"><expr pos:start="489:53" pos:end="489:53"><name pos:start="489:53" pos:end="489:53">o</name></expr></argument>, <argument pos:start="489:56" pos:end="489:57"><expr pos:start="489:56" pos:end="489:57"><name pos:start="489:56" pos:end="489:57">oc</name></expr></argument>, <argument pos:start="489:60" pos:end="489:66"><expr pos:start="489:60" pos:end="489:66"><name pos:start="489:60" pos:end="489:66">src_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="491:25" pos:end="491:30">break;</break>

                    </block_content>}</block></if></if_stmt>

                <default pos:start="495:17" pos:end="495:24">default:</default>

                    <expr_stmt pos:start="497:21" pos:end="501:63"><expr pos:start="497:21" pos:end="501:62"><call pos:start="497:21" pos:end="501:62"><name pos:start="497:21" pos:end="497:26">av_log</name><argument_list pos:start="497:27" pos:end="501:62">(<argument pos:start="497:28" pos:end="497:31"><expr pos:start="497:28" pos:end="497:31"><name pos:start="497:28" pos:end="497:31">NULL</name></expr></argument>, <argument pos:start="497:34" pos:end="497:87"><expr pos:start="497:34" pos:end="497:87"><ternary pos:start="497:34" pos:end="497:87"><condition pos:start="497:34" pos:end="497:57"><expr pos:start="497:34" pos:end="497:55"><name pos:start="497:34" pos:end="497:55">ignore_unknown_streams</name></expr> ?</condition><then pos:start="497:59" pos:end="497:72"> <expr pos:start="497:59" pos:end="497:72"><name pos:start="497:59" pos:end="497:72">AV_LOG_WARNING</name></expr> </then><else pos:start="497:74" pos:end="497:87">: <expr pos:start="497:76" pos:end="497:87"><name pos:start="497:76" pos:end="497:87">AV_LOG_FATAL</name></expr></else></ternary></expr></argument>,

                           <argument pos:start="499:28" pos:end="499:75"><expr pos:start="499:28" pos:end="499:75"><literal type="string" pos:start="499:28" pos:end="499:75">"Cannot map stream #%d:%d - unsupported type.\n"</literal></expr></argument>,

                           <argument pos:start="501:28" pos:end="501:42"><expr pos:start="501:28" pos:end="501:42"><name pos:start="501:28" pos:end="501:42"><name pos:start="501:28" pos:end="501:30">map</name><operator pos:start="501:31" pos:end="501:32">-&gt;</operator><name pos:start="501:33" pos:end="501:42">file_index</name></name></expr></argument>, <argument pos:start="501:45" pos:end="501:61"><expr pos:start="501:45" pos:end="501:61"><name pos:start="501:45" pos:end="501:61"><name pos:start="501:45" pos:end="501:47">map</name><operator pos:start="501:48" pos:end="501:49">-&gt;</operator><name pos:start="501:50" pos:end="501:61">stream_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="503:21" pos:end="515:21"><if pos:start="503:21" pos:end="515:21">if <condition pos:start="503:24" pos:end="503:48">(<expr pos:start="503:25" pos:end="503:47"><operator pos:start="503:25" pos:end="503:25">!</operator><name pos:start="503:26" pos:end="503:47">ignore_unknown_streams</name></expr>)</condition> <block pos:start="503:50" pos:end="515:21">{<block_content pos:start="505:25" pos:end="513:40">

                        <expr_stmt pos:start="505:25" pos:end="511:86"><expr pos:start="505:25" pos:end="511:85"><call pos:start="505:25" pos:end="511:85"><name pos:start="505:25" pos:end="505:30">av_log</name><argument_list pos:start="505:31" pos:end="511:85">(<argument pos:start="505:32" pos:end="505:35"><expr pos:start="505:32" pos:end="505:35"><name pos:start="505:32" pos:end="505:35">NULL</name></expr></argument>, <argument pos:start="505:38" pos:end="505:49"><expr pos:start="505:38" pos:end="505:49"><name pos:start="505:38" pos:end="505:49">AV_LOG_FATAL</name></expr></argument>,

                               <argument pos:start="507:32" pos:end="511:84"><expr pos:start="507:32" pos:end="511:84"><literal type="string" pos:start="507:32" pos:end="507:79">"If you want unsupported types ignored instead "</literal>

                               <literal type="string" pos:start="509:32" pos:end="509:84">"of failing, please use the -ignore_unknown option\n"</literal>

                               <literal type="string" pos:start="511:32" pos:end="511:84">"If you want them copied, please use -copy_unknown\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="513:25" pos:end="513:40"><expr pos:start="513:25" pos:end="513:39"><call pos:start="513:25" pos:end="513:39"><name pos:start="513:25" pos:end="513:36">exit_program</name><argument_list pos:start="513:37" pos:end="513:39">(<argument pos:start="513:38" pos:end="513:38"><expr pos:start="513:38" pos:end="513:38"><literal type="number" pos:start="513:38" pos:end="513:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></switch>

                <if_stmt pos:start="519:17" pos:end="523:76"><if pos:start="519:17" pos:end="523:76">if <condition pos:start="519:20" pos:end="519:24">(<expr pos:start="519:21" pos:end="519:23"><name pos:start="519:21" pos:end="519:23">ost</name></expr>)</condition><block type="pseudo" pos:start="521:21" pos:end="523:76"><block_content pos:start="521:21" pos:end="523:76">

                    <expr_stmt pos:start="521:21" pos:end="523:76"><expr pos:start="521:21" pos:end="523:75"><name pos:start="521:21" pos:end="521:33"><name pos:start="521:21" pos:end="521:23">ost</name><operator pos:start="521:24" pos:end="521:25">-&gt;</operator><name pos:start="521:26" pos:end="521:33">sync_ist</name></name> <operator pos:start="521:35" pos:end="521:35">=</operator> <name pos:start="521:37" pos:end="523:75"><name pos:start="521:37" pos:end="521:49">input_streams</name><index pos:start="521:50" pos:end="523:75">[  <expr pos:start="521:53" pos:end="523:74"><name pos:start="521:53" pos:end="521:85"><name pos:start="521:53" pos:end="521:63">input_files</name><index pos:start="521:64" pos:end="521:85">[<expr pos:start="521:65" pos:end="521:84"><name pos:start="521:65" pos:end="521:84"><name pos:start="521:65" pos:end="521:67">map</name><operator pos:start="521:68" pos:end="521:69">-&gt;</operator><name pos:start="521:70" pos:end="521:84">sync_file_index</name></name></expr>]</index></name><operator pos:start="521:86" pos:end="521:87">-&gt;</operator><name pos:start="521:88" pos:end="521:96">ist_index</name>

                                                  <operator pos:start="523:51" pos:end="523:51">+</operator> <name pos:start="523:53" pos:end="523:74"><name pos:start="523:53" pos:end="523:55">map</name><operator pos:start="523:56" pos:end="523:57">-&gt;</operator><name pos:start="523:58" pos:end="523:74">sync_stream_index</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="533:5" pos:end="533:31">/* handle attached files */</comment>

    <for pos:start="535:5" pos:end="601:5">for <control pos:start="535:9" pos:end="535:43">(<init pos:start="535:10" pos:end="535:15"><expr pos:start="535:10" pos:end="535:14"><name pos:start="535:10" pos:end="535:10">i</name> <operator pos:start="535:12" pos:end="535:12">=</operator> <literal type="number" pos:start="535:14" pos:end="535:14">0</literal></expr>;</init> <condition pos:start="535:17" pos:end="535:38"><expr pos:start="535:17" pos:end="535:37"><name pos:start="535:17" pos:end="535:17">i</name> <operator pos:start="535:19" pos:end="535:19">&lt;</operator> <name pos:start="535:21" pos:end="535:37"><name pos:start="535:21" pos:end="535:21">o</name><operator pos:start="535:22" pos:end="535:23">-&gt;</operator><name pos:start="535:24" pos:end="535:37">nb_attachments</name></name></expr>;</condition> <incr pos:start="535:40" pos:end="535:42"><expr pos:start="535:40" pos:end="535:42"><name pos:start="535:40" pos:end="535:40">i</name><operator pos:start="535:41" pos:end="535:42">++</operator></expr></incr>)</control> <block pos:start="535:45" pos:end="601:5">{<block_content pos:start="537:9" pos:end="599:25">

        <decl_stmt pos:start="537:9" pos:end="537:24"><decl pos:start="537:9" pos:end="537:23"><type pos:start="537:9" pos:end="537:21"><name pos:start="537:9" pos:end="537:19">AVIOContext</name> <modifier pos:start="537:21" pos:end="537:21">*</modifier></type><name pos:start="537:22" pos:end="537:23">pb</name></decl>;</decl_stmt>

        <decl_stmt pos:start="539:9" pos:end="539:28"><decl pos:start="539:9" pos:end="539:27"><type pos:start="539:9" pos:end="539:17"><name pos:start="539:9" pos:end="539:15">uint8_t</name> <modifier pos:start="539:17" pos:end="539:17">*</modifier></type><name pos:start="539:18" pos:end="539:27">attachment</name></decl>;</decl_stmt>

        <decl_stmt pos:start="541:9" pos:end="541:22"><decl pos:start="541:9" pos:end="541:21"><type pos:start="541:9" pos:end="541:20"><specifier pos:start="541:9" pos:end="541:13">const</specifier> <name pos:start="541:15" pos:end="541:18">char</name> <modifier pos:start="541:20" pos:end="541:20">*</modifier></type><name pos:start="541:21" pos:end="541:21">p</name></decl>;</decl_stmt>

        <decl_stmt pos:start="543:9" pos:end="543:20"><decl pos:start="543:9" pos:end="543:19"><type pos:start="543:9" pos:end="543:15"><name pos:start="543:9" pos:end="543:15">int64_t</name></type> <name pos:start="543:17" pos:end="543:19">len</name></decl>;</decl_stmt>



        <if_stmt pos:start="547:9" pos:end="555:9"><if pos:start="547:9" pos:end="555:9">if <condition pos:start="547:12" pos:end="547:90">(<expr pos:start="547:13" pos:end="547:89"><operator pos:start="547:13" pos:end="547:13">(</operator><name pos:start="547:14" pos:end="547:16">err</name> <operator pos:start="547:18" pos:end="547:18">=</operator> <call pos:start="547:20" pos:end="547:84"><name pos:start="547:20" pos:end="547:29">avio_open2</name><argument_list pos:start="547:30" pos:end="547:84">(<argument pos:start="547:31" pos:end="547:33"><expr pos:start="547:31" pos:end="547:33"><operator pos:start="547:31" pos:end="547:31">&amp;</operator><name pos:start="547:32" pos:end="547:33">pb</name></expr></argument>, <argument pos:start="547:36" pos:end="547:52"><expr pos:start="547:36" pos:end="547:52"><name pos:start="547:36" pos:end="547:52"><name pos:start="547:36" pos:end="547:36">o</name><operator pos:start="547:37" pos:end="547:38">-&gt;</operator><name pos:start="547:39" pos:end="547:49">attachments</name><index pos:start="547:50" pos:end="547:52">[<expr pos:start="547:51" pos:end="547:51"><name pos:start="547:51" pos:end="547:51">i</name></expr>]</index></name></expr></argument>, <argument pos:start="547:55" pos:end="547:68"><expr pos:start="547:55" pos:end="547:68"><name pos:start="547:55" pos:end="547:68">AVIO_FLAG_READ</name></expr></argument>, <argument pos:start="547:71" pos:end="547:77"><expr pos:start="547:71" pos:end="547:77"><operator pos:start="547:71" pos:end="547:71">&amp;</operator><name pos:start="547:72" pos:end="547:77">int_cb</name></expr></argument>, <argument pos:start="547:80" pos:end="547:83"><expr pos:start="547:80" pos:end="547:83"><name pos:start="547:80" pos:end="547:83">NULL</name></expr></argument>)</argument_list></call><operator pos:start="547:85" pos:end="547:85">)</operator> <operator pos:start="547:87" pos:end="547:87">&lt;</operator> <literal type="number" pos:start="547:89" pos:end="547:89">0</literal></expr>)</condition> <block pos:start="547:92" pos:end="555:9">{<block_content pos:start="549:13" pos:end="553:28">

            <expr_stmt pos:start="549:13" pos:end="551:38"><expr pos:start="549:13" pos:end="551:37"><call pos:start="549:13" pos:end="551:37"><name pos:start="549:13" pos:end="549:18">av_log</name><argument_list pos:start="549:19" pos:end="551:37">(<argument pos:start="549:20" pos:end="549:23"><expr pos:start="549:20" pos:end="549:23"><name pos:start="549:20" pos:end="549:23">NULL</name></expr></argument>, <argument pos:start="549:26" pos:end="549:37"><expr pos:start="549:26" pos:end="549:37"><name pos:start="549:26" pos:end="549:37">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="549:40" pos:end="549:77"><expr pos:start="549:40" pos:end="549:77"><literal type="string" pos:start="549:40" pos:end="549:77">"Could not open attachment file %s.\n"</literal></expr></argument>,

                   <argument pos:start="551:20" pos:end="551:36"><expr pos:start="551:20" pos:end="551:36"><name pos:start="551:20" pos:end="551:36"><name pos:start="551:20" pos:end="551:20">o</name><operator pos:start="551:21" pos:end="551:22">-&gt;</operator><name pos:start="551:23" pos:end="551:33">attachments</name><index pos:start="551:34" pos:end="551:36">[<expr pos:start="551:35" pos:end="551:35"><name pos:start="551:35" pos:end="551:35">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="553:13" pos:end="553:28"><expr pos:start="553:13" pos:end="553:27"><call pos:start="553:13" pos:end="553:27"><name pos:start="553:13" pos:end="553:24">exit_program</name><argument_list pos:start="553:25" pos:end="553:27">(<argument pos:start="553:26" pos:end="553:26"><expr pos:start="553:26" pos:end="553:26"><literal type="number" pos:start="553:26" pos:end="553:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="557:9" pos:end="565:9"><if pos:start="557:9" pos:end="565:9">if <condition pos:start="557:12" pos:end="557:39">(<expr pos:start="557:13" pos:end="557:38"><operator pos:start="557:13" pos:end="557:13">(</operator><name pos:start="557:14" pos:end="557:16">len</name> <operator pos:start="557:18" pos:end="557:18">=</operator> <call pos:start="557:20" pos:end="557:32"><name pos:start="557:20" pos:end="557:28">avio_size</name><argument_list pos:start="557:29" pos:end="557:32">(<argument pos:start="557:30" pos:end="557:31"><expr pos:start="557:30" pos:end="557:31"><name pos:start="557:30" pos:end="557:31">pb</name></expr></argument>)</argument_list></call><operator pos:start="557:33" pos:end="557:33">)</operator> <operator pos:start="557:35" pos:end="557:36">&lt;=</operator> <literal type="number" pos:start="557:38" pos:end="557:38">0</literal></expr>)</condition> <block pos:start="557:41" pos:end="565:9">{<block_content pos:start="559:13" pos:end="563:28">

            <expr_stmt pos:start="559:13" pos:end="561:38"><expr pos:start="559:13" pos:end="561:37"><call pos:start="559:13" pos:end="561:37"><name pos:start="559:13" pos:end="559:18">av_log</name><argument_list pos:start="559:19" pos:end="561:37">(<argument pos:start="559:20" pos:end="559:23"><expr pos:start="559:20" pos:end="559:23"><name pos:start="559:20" pos:end="559:23">NULL</name></expr></argument>, <argument pos:start="559:26" pos:end="559:37"><expr pos:start="559:26" pos:end="559:37"><name pos:start="559:26" pos:end="559:37">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="559:40" pos:end="559:83"><expr pos:start="559:40" pos:end="559:83"><literal type="string" pos:start="559:40" pos:end="559:83">"Could not get size of the attachment %s.\n"</literal></expr></argument>,

                   <argument pos:start="561:20" pos:end="561:36"><expr pos:start="561:20" pos:end="561:36"><name pos:start="561:20" pos:end="561:36"><name pos:start="561:20" pos:end="561:20">o</name><operator pos:start="561:21" pos:end="561:22">-&gt;</operator><name pos:start="561:23" pos:end="561:33">attachments</name><index pos:start="561:34" pos:end="561:36">[<expr pos:start="561:35" pos:end="561:35"><name pos:start="561:35" pos:end="561:35">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="563:13" pos:end="563:28"><expr pos:start="563:13" pos:end="563:27"><call pos:start="563:13" pos:end="563:27"><name pos:start="563:13" pos:end="563:24">exit_program</name><argument_list pos:start="563:25" pos:end="563:27">(<argument pos:start="563:26" pos:end="563:26"><expr pos:start="563:26" pos:end="563:26"><literal type="number" pos:start="563:26" pos:end="563:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="567:9" pos:end="575:9"><if pos:start="567:9" pos:end="575:9">if <condition pos:start="567:12" pos:end="567:43">(<expr pos:start="567:13" pos:end="567:42"><operator pos:start="567:13" pos:end="567:13">!</operator><operator pos:start="567:14" pos:end="567:14">(</operator><name pos:start="567:15" pos:end="567:24">attachment</name> <operator pos:start="567:26" pos:end="567:26">=</operator> <call pos:start="567:28" pos:end="567:41"><name pos:start="567:28" pos:end="567:36">av_malloc</name><argument_list pos:start="567:37" pos:end="567:41">(<argument pos:start="567:38" pos:end="567:40"><expr pos:start="567:38" pos:end="567:40"><name pos:start="567:38" pos:end="567:40">len</name></expr></argument>)</argument_list></call><operator pos:start="567:42" pos:end="567:42">)</operator></expr>)</condition> <block pos:start="567:45" pos:end="575:9">{<block_content pos:start="569:13" pos:end="573:28">

            <expr_stmt pos:start="569:13" pos:end="571:38"><expr pos:start="569:13" pos:end="571:37"><call pos:start="569:13" pos:end="571:37"><name pos:start="569:13" pos:end="569:18">av_log</name><argument_list pos:start="569:19" pos:end="571:37">(<argument pos:start="569:20" pos:end="569:23"><expr pos:start="569:20" pos:end="569:23"><name pos:start="569:20" pos:end="569:23">NULL</name></expr></argument>, <argument pos:start="569:26" pos:end="569:37"><expr pos:start="569:26" pos:end="569:37"><name pos:start="569:26" pos:end="569:37">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="569:40" pos:end="569:86"><expr pos:start="569:40" pos:end="569:86"><literal type="string" pos:start="569:40" pos:end="569:86">"Attachment %s too large to fit into memory.\n"</literal></expr></argument>,

                   <argument pos:start="571:20" pos:end="571:36"><expr pos:start="571:20" pos:end="571:36"><name pos:start="571:20" pos:end="571:36"><name pos:start="571:20" pos:end="571:20">o</name><operator pos:start="571:21" pos:end="571:22">-&gt;</operator><name pos:start="571:23" pos:end="571:33">attachments</name><index pos:start="571:34" pos:end="571:36">[<expr pos:start="571:35" pos:end="571:35"><name pos:start="571:35" pos:end="571:35">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="573:13" pos:end="573:28"><expr pos:start="573:13" pos:end="573:27"><call pos:start="573:13" pos:end="573:27"><name pos:start="573:13" pos:end="573:24">exit_program</name><argument_list pos:start="573:25" pos:end="573:27">(<argument pos:start="573:26" pos:end="573:26"><expr pos:start="573:26" pos:end="573:26"><literal type="number" pos:start="573:26" pos:end="573:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="577:9" pos:end="577:39"><expr pos:start="577:9" pos:end="577:38"><call pos:start="577:9" pos:end="577:38"><name pos:start="577:9" pos:end="577:17">avio_read</name><argument_list pos:start="577:18" pos:end="577:38">(<argument pos:start="577:19" pos:end="577:20"><expr pos:start="577:19" pos:end="577:20"><name pos:start="577:19" pos:end="577:20">pb</name></expr></argument>, <argument pos:start="577:23" pos:end="577:32"><expr pos:start="577:23" pos:end="577:32"><name pos:start="577:23" pos:end="577:32">attachment</name></expr></argument>, <argument pos:start="577:35" pos:end="577:37"><expr pos:start="577:35" pos:end="577:37"><name pos:start="577:35" pos:end="577:37">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="581:9" pos:end="581:47"><expr pos:start="581:9" pos:end="581:46"><name pos:start="581:9" pos:end="581:11">ost</name> <operator pos:start="581:13" pos:end="581:13">=</operator> <call pos:start="581:15" pos:end="581:46"><name pos:start="581:15" pos:end="581:35">new_attachment_stream</name><argument_list pos:start="581:36" pos:end="581:46">(<argument pos:start="581:37" pos:end="581:37"><expr pos:start="581:37" pos:end="581:37"><name pos:start="581:37" pos:end="581:37">o</name></expr></argument>, <argument pos:start="581:40" pos:end="581:41"><expr pos:start="581:40" pos:end="581:41"><name pos:start="581:40" pos:end="581:41">oc</name></expr></argument>, <argument pos:start="581:44" pos:end="581:45"><expr pos:start="581:44" pos:end="581:45"><operator pos:start="581:44" pos:end="581:44">-</operator><literal type="number" pos:start="581:45" pos:end="581:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="583:9" pos:end="583:43"><expr pos:start="583:9" pos:end="583:42"><name pos:start="583:9" pos:end="583:24"><name pos:start="583:9" pos:end="583:11">ost</name><operator pos:start="583:12" pos:end="583:13">-&gt;</operator><name pos:start="583:14" pos:end="583:24">stream_copy</name></name>               <operator pos:start="583:40" pos:end="583:40">=</operator> <literal type="number" pos:start="583:42" pos:end="583:42">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="585:9" pos:end="585:59"><expr pos:start="585:9" pos:end="585:58"><name pos:start="585:9" pos:end="585:32"><name pos:start="585:9" pos:end="585:11">ost</name><operator pos:start="585:12" pos:end="585:13">-&gt;</operator><name pos:start="585:14" pos:end="585:32">attachment_filename</name></name>       <operator pos:start="585:40" pos:end="585:40">=</operator> <name pos:start="585:42" pos:end="585:58"><name pos:start="585:42" pos:end="585:42">o</name><operator pos:start="585:43" pos:end="585:44">-&gt;</operator><name pos:start="585:45" pos:end="585:55">attachments</name><index pos:start="585:56" pos:end="585:58">[<expr pos:start="585:57" pos:end="585:57"><name pos:start="585:57" pos:end="585:57">i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="587:9" pos:end="587:43"><expr pos:start="587:9" pos:end="587:42"><name pos:start="587:9" pos:end="587:21"><name pos:start="587:9" pos:end="587:11">ost</name><operator pos:start="587:12" pos:end="587:13">-&gt;</operator><name pos:start="587:14" pos:end="587:21">finished</name></name>                  <operator pos:start="587:40" pos:end="587:40">=</operator> <literal type="number" pos:start="587:42" pos:end="587:42">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="589:9" pos:end="589:52"><expr pos:start="589:9" pos:end="589:51"><name pos:start="589:9" pos:end="589:33"><name pos:start="589:9" pos:end="589:11">ost</name><operator pos:start="589:12" pos:end="589:13">-&gt;</operator><name pos:start="589:14" pos:end="589:15">st</name><operator pos:start="589:16" pos:end="589:17">-&gt;</operator><name pos:start="589:18" pos:end="589:22">codec</name><operator pos:start="589:23" pos:end="589:24">-&gt;</operator><name pos:start="589:25" pos:end="589:33">extradata</name></name>      <operator pos:start="589:40" pos:end="589:40">=</operator> <name pos:start="589:42" pos:end="589:51">attachment</name></expr>;</expr_stmt>

        <expr_stmt pos:start="591:9" pos:end="591:45"><expr pos:start="591:9" pos:end="591:44"><name pos:start="591:9" pos:end="591:38"><name pos:start="591:9" pos:end="591:11">ost</name><operator pos:start="591:12" pos:end="591:13">-&gt;</operator><name pos:start="591:14" pos:end="591:15">st</name><operator pos:start="591:16" pos:end="591:17">-&gt;</operator><name pos:start="591:18" pos:end="591:22">codec</name><operator pos:start="591:23" pos:end="591:24">-&gt;</operator><name pos:start="591:25" pos:end="591:38">extradata_size</name></name> <operator pos:start="591:40" pos:end="591:40">=</operator> <name pos:start="591:42" pos:end="591:44">len</name></expr>;</expr_stmt>



        <expr_stmt pos:start="595:9" pos:end="595:44"><expr pos:start="595:9" pos:end="595:43"><name pos:start="595:9" pos:end="595:9">p</name> <operator pos:start="595:11" pos:end="595:11">=</operator> <call pos:start="595:13" pos:end="595:43"><name pos:start="595:13" pos:end="595:19">strrchr</name><argument_list pos:start="595:20" pos:end="595:43">(<argument pos:start="595:21" pos:end="595:37"><expr pos:start="595:21" pos:end="595:37"><name pos:start="595:21" pos:end="595:37"><name pos:start="595:21" pos:end="595:21">o</name><operator pos:start="595:22" pos:end="595:23">-&gt;</operator><name pos:start="595:24" pos:end="595:34">attachments</name><index pos:start="595:35" pos:end="595:37">[<expr pos:start="595:36" pos:end="595:36"><name pos:start="595:36" pos:end="595:36">i</name></expr>]</index></name></expr></argument>, <argument pos:start="595:40" pos:end="595:42"><expr pos:start="595:40" pos:end="595:42"><literal type="char" pos:start="595:40" pos:end="595:42">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="597:9" pos:end="597:115"><expr pos:start="597:9" pos:end="597:114"><call pos:start="597:9" pos:end="597:114"><name pos:start="597:9" pos:end="597:19">av_dict_set</name><argument_list pos:start="597:20" pos:end="597:114">(<argument pos:start="597:21" pos:end="597:38"><expr pos:start="597:21" pos:end="597:38"><operator pos:start="597:21" pos:end="597:21">&amp;</operator><name pos:start="597:22" pos:end="597:38"><name pos:start="597:22" pos:end="597:24">ost</name><operator pos:start="597:25" pos:end="597:26">-&gt;</operator><name pos:start="597:27" pos:end="597:28">st</name><operator pos:start="597:29" pos:end="597:30">-&gt;</operator><name pos:start="597:31" pos:end="597:38">metadata</name></name></expr></argument>, <argument pos:start="597:41" pos:end="597:50"><expr pos:start="597:41" pos:end="597:50"><literal type="string" pos:start="597:41" pos:end="597:50">"filename"</literal></expr></argument>, <argument pos:start="597:53" pos:end="597:89"><expr pos:start="597:53" pos:end="597:89"><ternary pos:start="597:53" pos:end="597:89"><condition pos:start="597:53" pos:end="597:63"><expr pos:start="597:53" pos:end="597:61"><operator pos:start="597:53" pos:end="597:53">(</operator><name pos:start="597:54" pos:end="597:54">p</name> <operator pos:start="597:56" pos:end="597:57">&amp;&amp;</operator> <operator pos:start="597:59" pos:end="597:59">*</operator><name pos:start="597:60" pos:end="597:60">p</name><operator pos:start="597:61" pos:end="597:61">)</operator></expr> ?</condition><then pos:start="597:65" pos:end="597:69"> <expr pos:start="597:65" pos:end="597:69"><name pos:start="597:65" pos:end="597:65">p</name> <operator pos:start="597:67" pos:end="597:67">+</operator> <literal type="number" pos:start="597:69" pos:end="597:69">1</literal></expr> </then><else pos:start="597:71" pos:end="597:89">: <expr pos:start="597:73" pos:end="597:89"><name pos:start="597:73" pos:end="597:89"><name pos:start="597:73" pos:end="597:73">o</name><operator pos:start="597:74" pos:end="597:75">-&gt;</operator><name pos:start="597:76" pos:end="597:86">attachments</name><index pos:start="597:87" pos:end="597:89">[<expr pos:start="597:88" pos:end="597:88"><name pos:start="597:88" pos:end="597:88">i</name></expr>]</index></name></expr></else></ternary></expr></argument>, <argument pos:start="597:92" pos:end="597:113"><expr pos:start="597:92" pos:end="597:113"><name pos:start="597:92" pos:end="597:113">AV_DICT_DONT_OVERWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="599:9" pos:end="599:25"><expr pos:start="599:9" pos:end="599:24"><call pos:start="599:9" pos:end="599:24"><name pos:start="599:9" pos:end="599:19">avio_closep</name><argument_list pos:start="599:20" pos:end="599:24">(<argument pos:start="599:21" pos:end="599:23"><expr pos:start="599:21" pos:end="599:23"><operator pos:start="599:21" pos:end="599:21">&amp;</operator><name pos:start="599:22" pos:end="599:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <for pos:start="605:5" pos:end="623:5">for <control pos:start="605:9" pos:end="605:76">(<init pos:start="605:10" pos:end="605:48"><expr pos:start="605:10" pos:end="605:47"><name pos:start="605:10" pos:end="605:10">i</name> <operator pos:start="605:12" pos:end="605:12">=</operator> <name pos:start="605:14" pos:end="605:30">nb_output_streams</name> <operator pos:start="605:32" pos:end="605:32">-</operator> <name pos:start="605:34" pos:end="605:47"><name pos:start="605:34" pos:end="605:35">oc</name><operator pos:start="605:36" pos:end="605:37">-&gt;</operator><name pos:start="605:38" pos:end="605:47">nb_streams</name></name></expr>;</init> <condition pos:start="605:50" pos:end="605:71"><expr pos:start="605:50" pos:end="605:70"><name pos:start="605:50" pos:end="605:50">i</name> <operator pos:start="605:52" pos:end="605:52">&lt;</operator> <name pos:start="605:54" pos:end="605:70">nb_output_streams</name></expr>;</condition> <incr pos:start="605:73" pos:end="605:75"><expr pos:start="605:73" pos:end="605:75"><name pos:start="605:73" pos:end="605:73">i</name><operator pos:start="605:74" pos:end="605:75">++</operator></expr></incr>)</control> <block pos:start="605:78" pos:end="623:5">{<block_content pos:start="607:9" pos:end="621:32"> <comment type="line" pos:start="605:80" pos:end="605:116">//for all streams of this output file</comment>

        <decl_stmt pos:start="607:9" pos:end="607:29"><decl pos:start="607:9" pos:end="607:28"><type pos:start="607:9" pos:end="607:27"><name pos:start="607:9" pos:end="607:25">AVDictionaryEntry</name> <modifier pos:start="607:27" pos:end="607:27">*</modifier></type><name pos:start="607:28" pos:end="607:28">e</name></decl>;</decl_stmt>

        <expr_stmt pos:start="609:9" pos:end="609:32"><expr pos:start="609:9" pos:end="609:31"><name pos:start="609:9" pos:end="609:11">ost</name> <operator pos:start="609:13" pos:end="609:13">=</operator> <name pos:start="609:15" pos:end="609:31"><name pos:start="609:15" pos:end="609:28">output_streams</name><index pos:start="609:29" pos:end="609:31">[<expr pos:start="609:30" pos:end="609:30"><name pos:start="609:30" pos:end="609:30">i</name></expr>]</index></name></expr>;</expr_stmt>



        <if_stmt pos:start="613:9" pos:end="621:32"><if pos:start="613:9" pos:end="621:32">if <condition pos:start="613:12" pos:end="617:77">(<expr pos:start="613:13" pos:end="617:76"><operator pos:start="613:13" pos:end="613:13">(</operator><name pos:start="613:14" pos:end="613:29"><name pos:start="613:14" pos:end="613:16">ost</name><operator pos:start="613:17" pos:end="613:18">-&gt;</operator><name pos:start="613:19" pos:end="613:29">stream_copy</name></name> <operator pos:start="613:31" pos:end="613:32">||</operator> <name pos:start="613:34" pos:end="613:57"><name pos:start="613:34" pos:end="613:36">ost</name><operator pos:start="613:37" pos:end="613:38">-&gt;</operator><name pos:start="613:39" pos:end="613:57">attachment_filename</name></name><operator pos:start="613:58" pos:end="613:58">)</operator>

            <operator pos:start="615:13" pos:end="615:14">&amp;&amp;</operator> <operator pos:start="615:16" pos:end="615:16">(</operator><name pos:start="615:17" pos:end="615:17">e</name> <operator pos:start="615:19" pos:end="615:19">=</operator> <call pos:start="615:21" pos:end="615:87"><name pos:start="615:21" pos:end="615:31">av_dict_get</name><argument_list pos:start="615:32" pos:end="615:87">(<argument pos:start="615:33" pos:end="615:48"><expr pos:start="615:33" pos:end="615:48"><name pos:start="615:33" pos:end="615:48"><name pos:start="615:33" pos:end="615:33">o</name><operator pos:start="615:34" pos:end="615:35">-&gt;</operator><name pos:start="615:36" pos:end="615:36">g</name><operator pos:start="615:37" pos:end="615:38">-&gt;</operator><name pos:start="615:39" pos:end="615:48">codec_opts</name></name></expr></argument>, <argument pos:start="615:51" pos:end="615:57"><expr pos:start="615:51" pos:end="615:57"><literal type="string" pos:start="615:51" pos:end="615:57">"flags"</literal></expr></argument>, <argument pos:start="615:60" pos:end="615:63"><expr pos:start="615:60" pos:end="615:63"><name pos:start="615:60" pos:end="615:63">NULL</name></expr></argument>, <argument pos:start="615:66" pos:end="615:86"><expr pos:start="615:66" pos:end="615:86"><name pos:start="615:66" pos:end="615:86">AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator pos:start="615:88" pos:end="615:88">)</operator>

            <operator pos:start="617:13" pos:end="617:14">&amp;&amp;</operator> <operator pos:start="617:16" pos:end="617:16">(</operator><operator pos:start="617:17" pos:end="617:17">!</operator><name pos:start="617:18" pos:end="617:26"><name pos:start="617:18" pos:end="617:18">e</name><operator pos:start="617:19" pos:end="617:20">-&gt;</operator><name pos:start="617:21" pos:end="617:23">key</name><index pos:start="617:24" pos:end="617:26">[<expr pos:start="617:25" pos:end="617:25"><literal type="number" pos:start="617:25" pos:end="617:25">5</literal></expr>]</index></name> <operator pos:start="617:28" pos:end="617:29">||</operator> <call pos:start="617:31" pos:end="617:75"><name pos:start="617:31" pos:end="617:52">check_stream_specifier</name><argument_list pos:start="617:53" pos:end="617:75">(<argument pos:start="617:54" pos:end="617:55"><expr pos:start="617:54" pos:end="617:55"><name pos:start="617:54" pos:end="617:55">oc</name></expr></argument>, <argument pos:start="617:58" pos:end="617:64"><expr pos:start="617:58" pos:end="617:64"><name pos:start="617:58" pos:end="617:64"><name pos:start="617:58" pos:end="617:60">ost</name><operator pos:start="617:61" pos:end="617:62">-&gt;</operator><name pos:start="617:63" pos:end="617:64">st</name></name></expr></argument>, <argument pos:start="617:67" pos:end="617:74"><expr pos:start="617:67" pos:end="617:74"><name pos:start="617:67" pos:end="617:72"><name pos:start="617:67" pos:end="617:67">e</name><operator pos:start="617:68" pos:end="617:69">-&gt;</operator><name pos:start="617:70" pos:end="617:72">key</name></name><operator pos:start="617:73" pos:end="617:73">+</operator><literal type="number" pos:start="617:74" pos:end="617:74">6</literal></expr></argument>)</argument_list></call><operator pos:start="617:76" pos:end="617:76">)</operator></expr>)</condition><block type="pseudo" pos:start="619:13" pos:end="621:32"><block_content pos:start="619:13" pos:end="621:32">

            <if_stmt pos:start="619:13" pos:end="621:32"><if pos:start="619:13" pos:end="621:32">if <condition pos:start="619:16" pos:end="619:69">(<expr pos:start="619:17" pos:end="619:68"><call pos:start="619:17" pos:end="619:64"><name pos:start="619:17" pos:end="619:26">av_opt_set</name><argument_list pos:start="619:27" pos:end="619:64">(<argument pos:start="619:28" pos:end="619:41"><expr pos:start="619:28" pos:end="619:41"><name pos:start="619:28" pos:end="619:41"><name pos:start="619:28" pos:end="619:30">ost</name><operator pos:start="619:31" pos:end="619:32">-&gt;</operator><name pos:start="619:33" pos:end="619:34">st</name><operator pos:start="619:35" pos:end="619:36">-&gt;</operator><name pos:start="619:37" pos:end="619:41">codec</name></name></expr></argument>, <argument pos:start="619:44" pos:end="619:50"><expr pos:start="619:44" pos:end="619:50"><literal type="string" pos:start="619:44" pos:end="619:50">"flags"</literal></expr></argument>, <argument pos:start="619:53" pos:end="619:60"><expr pos:start="619:53" pos:end="619:60"><name pos:start="619:53" pos:end="619:60"><name pos:start="619:53" pos:end="619:53">e</name><operator pos:start="619:54" pos:end="619:55">-&gt;</operator><name pos:start="619:56" pos:end="619:60">value</name></name></expr></argument>, <argument pos:start="619:63" pos:end="619:63"><expr pos:start="619:63" pos:end="619:63"><literal type="number" pos:start="619:63" pos:end="619:63">0</literal></expr></argument>)</argument_list></call> <operator pos:start="619:66" pos:end="619:66">&lt;</operator> <literal type="number" pos:start="619:68" pos:end="619:68">0</literal></expr>)</condition><block type="pseudo" pos:start="621:17" pos:end="621:32"><block_content pos:start="621:17" pos:end="621:32">

                <expr_stmt pos:start="621:17" pos:end="621:32"><expr pos:start="621:17" pos:end="621:31"><call pos:start="621:17" pos:end="621:31"><name pos:start="621:17" pos:end="621:28">exit_program</name><argument_list pos:start="621:29" pos:end="621:31">(<argument pos:start="621:30" pos:end="621:30"><expr pos:start="621:30" pos:end="621:30"><literal type="number" pos:start="621:30" pos:end="621:30">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="627:5" pos:end="635:5"><if pos:start="627:5" pos:end="635:5">if <condition pos:start="627:8" pos:end="627:67">(<expr pos:start="627:9" pos:end="627:66"><operator pos:start="627:9" pos:end="627:9">!</operator><name pos:start="627:10" pos:end="627:23"><name pos:start="627:10" pos:end="627:11">oc</name><operator pos:start="627:12" pos:end="627:13">-&gt;</operator><name pos:start="627:14" pos:end="627:23">nb_streams</name></name> <operator pos:start="627:25" pos:end="627:26">&amp;&amp;</operator> <operator pos:start="627:28" pos:end="627:28">!</operator><operator pos:start="627:29" pos:end="627:29">(</operator><name pos:start="627:30" pos:end="627:47"><name pos:start="627:30" pos:end="627:31">oc</name><operator pos:start="627:32" pos:end="627:33">-&gt;</operator><name pos:start="627:34" pos:end="627:40">oformat</name><operator pos:start="627:41" pos:end="627:42">-&gt;</operator><name pos:start="627:43" pos:end="627:47">flags</name></name> <operator pos:start="627:49" pos:end="627:49">&amp;</operator> <name pos:start="627:51" pos:end="627:65">AVFMT_NOSTREAMS</name><operator pos:start="627:66" pos:end="627:66">)</operator></expr>)</condition> <block pos:start="627:69" pos:end="635:5">{<block_content pos:start="629:9" pos:end="633:24">

        <expr_stmt pos:start="629:9" pos:end="629:65"><expr pos:start="629:9" pos:end="629:64"><call pos:start="629:9" pos:end="629:64"><name pos:start="629:9" pos:end="629:22">av_dump_format</name><argument_list pos:start="629:23" pos:end="629:64">(<argument pos:start="629:24" pos:end="629:25"><expr pos:start="629:24" pos:end="629:25"><name pos:start="629:24" pos:end="629:25">oc</name></expr></argument>, <argument pos:start="629:28" pos:end="629:46"><expr pos:start="629:28" pos:end="629:46"><name pos:start="629:28" pos:end="629:42">nb_output_files</name> <operator pos:start="629:44" pos:end="629:44">-</operator> <literal type="number" pos:start="629:46" pos:end="629:46">1</literal></expr></argument>, <argument pos:start="629:49" pos:end="629:60"><expr pos:start="629:49" pos:end="629:60"><name pos:start="629:49" pos:end="629:60"><name pos:start="629:49" pos:end="629:50">oc</name><operator pos:start="629:51" pos:end="629:52">-&gt;</operator><name pos:start="629:53" pos:end="629:60">filename</name></name></expr></argument>, <argument pos:start="629:63" pos:end="629:63"><expr pos:start="629:63" pos:end="629:63"><literal type="number" pos:start="629:63" pos:end="629:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="631:9" pos:end="631:105"><expr pos:start="631:9" pos:end="631:104"><call pos:start="631:9" pos:end="631:104"><name pos:start="631:9" pos:end="631:14">av_log</name><argument_list pos:start="631:15" pos:end="631:104">(<argument pos:start="631:16" pos:end="631:19"><expr pos:start="631:16" pos:end="631:19"><name pos:start="631:16" pos:end="631:19">NULL</name></expr></argument>, <argument pos:start="631:22" pos:end="631:33"><expr pos:start="631:22" pos:end="631:33"><name pos:start="631:22" pos:end="631:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="631:36" pos:end="631:82"><expr pos:start="631:36" pos:end="631:82"><literal type="string" pos:start="631:36" pos:end="631:82">"Output file #%d does not contain any stream\n"</literal></expr></argument>, <argument pos:start="631:85" pos:end="631:103"><expr pos:start="631:85" pos:end="631:103"><name pos:start="631:85" pos:end="631:99">nb_output_files</name> <operator pos:start="631:101" pos:end="631:101">-</operator> <literal type="number" pos:start="631:103" pos:end="631:103">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="633:9" pos:end="633:24"><expr pos:start="633:9" pos:end="633:23"><call pos:start="633:9" pos:end="633:23"><name pos:start="633:9" pos:end="633:20">exit_program</name><argument_list pos:start="633:21" pos:end="633:23">(<argument pos:start="633:22" pos:end="633:22"><expr pos:start="633:22" pos:end="633:22"><literal type="number" pos:start="633:22" pos:end="633:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="639:5" pos:end="639:51">/* check if all codec options have been used */</comment>

    <expr_stmt pos:start="641:5" pos:end="641:53"><expr pos:start="641:5" pos:end="641:52"><name pos:start="641:5" pos:end="641:15">unused_opts</name> <operator pos:start="641:17" pos:end="641:17">=</operator> <call pos:start="641:19" pos:end="641:52"><name pos:start="641:19" pos:end="641:34">strip_specifiers</name><argument_list pos:start="641:35" pos:end="641:52">(<argument pos:start="641:36" pos:end="641:51"><expr pos:start="641:36" pos:end="641:51"><name pos:start="641:36" pos:end="641:51"><name pos:start="641:36" pos:end="641:36">o</name><operator pos:start="641:37" pos:end="641:38">-&gt;</operator><name pos:start="641:39" pos:end="641:39">g</name><operator pos:start="641:40" pos:end="641:41">-&gt;</operator><name pos:start="641:42" pos:end="641:51">codec_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="643:5" pos:end="653:5">for <control pos:start="643:9" pos:end="643:55">(<init pos:start="643:10" pos:end="643:27"><expr pos:start="643:10" pos:end="643:26"><name pos:start="643:10" pos:end="643:10">i</name> <operator pos:start="643:12" pos:end="643:12">=</operator> <name pos:start="643:14" pos:end="643:26"><name pos:start="643:14" pos:end="643:15">of</name><operator pos:start="643:16" pos:end="643:17">-&gt;</operator><name pos:start="643:18" pos:end="643:26">ost_index</name></name></expr>;</init> <condition pos:start="643:29" pos:end="643:50"><expr pos:start="643:29" pos:end="643:49"><name pos:start="643:29" pos:end="643:29">i</name> <operator pos:start="643:31" pos:end="643:31">&lt;</operator> <name pos:start="643:33" pos:end="643:49">nb_output_streams</name></expr>;</condition> <incr pos:start="643:52" pos:end="643:54"><expr pos:start="643:52" pos:end="643:54"><name pos:start="643:52" pos:end="643:52">i</name><operator pos:start="643:53" pos:end="643:54">++</operator></expr></incr>)</control> <block pos:start="643:57" pos:end="653:5">{<block_content pos:start="645:9" pos:end="651:55">

        <expr_stmt pos:start="645:9" pos:end="645:17"><expr pos:start="645:9" pos:end="645:16"><name pos:start="645:9" pos:end="645:9">e</name> <operator pos:start="645:11" pos:end="645:11">=</operator> <name pos:start="645:13" pos:end="645:16">NULL</name></expr>;</expr_stmt>

        <while pos:start="647:9" pos:end="651:55">while <condition pos:start="647:15" pos:end="649:56">(<expr pos:start="647:16" pos:end="649:55"><operator pos:start="647:16" pos:end="647:16">(</operator><name pos:start="647:17" pos:end="647:17">e</name> <operator pos:start="647:19" pos:end="647:19">=</operator> <call pos:start="647:21" pos:end="649:54"><name pos:start="647:21" pos:end="647:31">av_dict_get</name><argument_list pos:start="647:32" pos:end="649:54">(<argument pos:start="647:33" pos:end="647:63"><expr pos:start="647:33" pos:end="647:63"><name pos:start="647:33" pos:end="647:49"><name pos:start="647:33" pos:end="647:46">output_streams</name><index pos:start="647:47" pos:end="647:49">[<expr pos:start="647:48" pos:end="647:48"><name pos:start="647:48" pos:end="647:48">i</name></expr>]</index></name><operator pos:start="647:50" pos:end="647:51">-&gt;</operator><name pos:start="647:52" pos:end="647:63">encoder_opts</name></expr></argument>, <argument pos:start="647:66" pos:end="647:67"><expr pos:start="647:66" pos:end="647:67"><literal type="string" pos:start="647:66" pos:end="647:67">""</literal></expr></argument>, <argument pos:start="647:70" pos:end="647:70"><expr pos:start="647:70" pos:end="647:70"><name pos:start="647:70" pos:end="647:70">e</name></expr></argument>,

                                <argument pos:start="649:33" pos:end="649:53"><expr pos:start="649:33" pos:end="649:53"><name pos:start="649:33" pos:end="649:53">AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator pos:start="649:55" pos:end="649:55">)</operator></expr>)</condition><block type="pseudo" pos:start="651:13" pos:end="651:55"><block_content pos:start="651:13" pos:end="651:55">

            <expr_stmt pos:start="651:13" pos:end="651:55"><expr pos:start="651:13" pos:end="651:54"><call pos:start="651:13" pos:end="651:54"><name pos:start="651:13" pos:end="651:23">av_dict_set</name><argument_list pos:start="651:24" pos:end="651:54">(<argument pos:start="651:25" pos:end="651:36"><expr pos:start="651:25" pos:end="651:36"><operator pos:start="651:25" pos:end="651:25">&amp;</operator><name pos:start="651:26" pos:end="651:36">unused_opts</name></expr></argument>, <argument pos:start="651:39" pos:end="651:44"><expr pos:start="651:39" pos:end="651:44"><name pos:start="651:39" pos:end="651:44"><name pos:start="651:39" pos:end="651:39">e</name><operator pos:start="651:40" pos:end="651:41">-&gt;</operator><name pos:start="651:42" pos:end="651:44">key</name></name></expr></argument>, <argument pos:start="651:47" pos:end="651:50"><expr pos:start="651:47" pos:end="651:50"><name pos:start="651:47" pos:end="651:50">NULL</name></expr></argument>, <argument pos:start="651:53" pos:end="651:53"><expr pos:start="651:53" pos:end="651:53"><literal type="number" pos:start="651:53" pos:end="651:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

    </block_content>}</block></for>



    <expr_stmt pos:start="657:5" pos:end="657:13"><expr pos:start="657:5" pos:end="657:12"><name pos:start="657:5" pos:end="657:5">e</name> <operator pos:start="657:7" pos:end="657:7">=</operator> <name pos:start="657:9" pos:end="657:12">NULL</name></expr>;</expr_stmt>

    <while pos:start="659:5" pos:end="717:5">while <condition pos:start="659:11" pos:end="659:72">(<expr pos:start="659:12" pos:end="659:71"><operator pos:start="659:12" pos:end="659:12">(</operator><name pos:start="659:13" pos:end="659:13">e</name> <operator pos:start="659:15" pos:end="659:15">=</operator> <call pos:start="659:17" pos:end="659:70"><name pos:start="659:17" pos:end="659:27">av_dict_get</name><argument_list pos:start="659:28" pos:end="659:70">(<argument pos:start="659:29" pos:end="659:39"><expr pos:start="659:29" pos:end="659:39"><name pos:start="659:29" pos:end="659:39">unused_opts</name></expr></argument>, <argument pos:start="659:42" pos:end="659:43"><expr pos:start="659:42" pos:end="659:43"><literal type="string" pos:start="659:42" pos:end="659:43">""</literal></expr></argument>, <argument pos:start="659:46" pos:end="659:46"><expr pos:start="659:46" pos:end="659:46"><name pos:start="659:46" pos:end="659:46">e</name></expr></argument>, <argument pos:start="659:49" pos:end="659:69"><expr pos:start="659:49" pos:end="659:69"><name pos:start="659:49" pos:end="659:69">AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator pos:start="659:71" pos:end="659:71">)</operator></expr>)</condition> <block pos:start="659:74" pos:end="717:5">{<block_content pos:start="661:9" pos:end="715:80">

        <decl_stmt pos:start="661:9" pos:end="661:51"><decl pos:start="661:9" pos:end="661:50"><type pos:start="661:9" pos:end="661:23"><specifier pos:start="661:9" pos:end="661:13">const</specifier> <name pos:start="661:15" pos:end="661:21">AVClass</name> <modifier pos:start="661:23" pos:end="661:23">*</modifier></type><name pos:start="661:24" pos:end="661:28">class</name> <init pos:start="661:30" pos:end="661:50">= <expr pos:start="661:32" pos:end="661:50"><call pos:start="661:32" pos:end="661:50"><name pos:start="661:32" pos:end="661:48">avcodec_get_class</name><argument_list pos:start="661:49" pos:end="661:50">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="663:9" pos:end="665:94"><decl pos:start="663:9" pos:end="665:93"><type pos:start="663:9" pos:end="663:24"><specifier pos:start="663:9" pos:end="663:13">const</specifier> <name pos:start="663:15" pos:end="663:22">AVOption</name> <modifier pos:start="663:24" pos:end="663:24">*</modifier></type><name pos:start="663:25" pos:end="663:30">option</name> <init pos:start="663:32" pos:end="665:93">= <expr pos:start="663:34" pos:end="665:93"><call pos:start="663:34" pos:end="665:93"><name pos:start="663:34" pos:end="663:44">av_opt_find</name><argument_list pos:start="663:45" pos:end="665:93">(<argument pos:start="663:46" pos:end="663:51"><expr pos:start="663:46" pos:end="663:51"><operator pos:start="663:46" pos:end="663:46">&amp;</operator><name pos:start="663:47" pos:end="663:51">class</name></expr></argument>, <argument pos:start="663:54" pos:end="663:59"><expr pos:start="663:54" pos:end="663:59"><name pos:start="663:54" pos:end="663:59"><name pos:start="663:54" pos:end="663:54">e</name><operator pos:start="663:55" pos:end="663:56">-&gt;</operator><name pos:start="663:57" pos:end="663:59">key</name></name></expr></argument>, <argument pos:start="663:62" pos:end="663:65"><expr pos:start="663:62" pos:end="663:65"><name pos:start="663:62" pos:end="663:65">NULL</name></expr></argument>, <argument pos:start="663:68" pos:end="663:68"><expr pos:start="663:68" pos:end="663:68"><literal type="number" pos:start="663:68" pos:end="663:68">0</literal></expr></argument>,

                                             <argument pos:start="665:46" pos:end="665:92"><expr pos:start="665:46" pos:end="665:92"><name pos:start="665:46" pos:end="665:67">AV_OPT_SEARCH_CHILDREN</name> <operator pos:start="665:69" pos:end="665:69">|</operator> <name pos:start="665:71" pos:end="665:92">AV_OPT_SEARCH_FAKE_OBJ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="667:9" pos:end="667:53"><decl pos:start="667:9" pos:end="667:52"><type pos:start="667:9" pos:end="667:23"><specifier pos:start="667:9" pos:end="667:13">const</specifier> <name pos:start="667:15" pos:end="667:21">AVClass</name> <modifier pos:start="667:23" pos:end="667:23">*</modifier></type><name pos:start="667:24" pos:end="667:29">fclass</name> <init pos:start="667:31" pos:end="667:52">= <expr pos:start="667:33" pos:end="667:52"><call pos:start="667:33" pos:end="667:52"><name pos:start="667:33" pos:end="667:50">avformat_get_class</name><argument_list pos:start="667:51" pos:end="667:52">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="669:9" pos:end="671:95"><decl pos:start="669:9" pos:end="671:94"><type pos:start="669:9" pos:end="669:24"><specifier pos:start="669:9" pos:end="669:13">const</specifier> <name pos:start="669:15" pos:end="669:22">AVOption</name> <modifier pos:start="669:24" pos:end="669:24">*</modifier></type><name pos:start="669:25" pos:end="669:31">foption</name> <init pos:start="669:33" pos:end="671:94">= <expr pos:start="669:35" pos:end="671:94"><call pos:start="669:35" pos:end="671:94"><name pos:start="669:35" pos:end="669:45">av_opt_find</name><argument_list pos:start="669:46" pos:end="671:94">(<argument pos:start="669:47" pos:end="669:53"><expr pos:start="669:47" pos:end="669:53"><operator pos:start="669:47" pos:end="669:47">&amp;</operator><name pos:start="669:48" pos:end="669:53">fclass</name></expr></argument>, <argument pos:start="669:56" pos:end="669:61"><expr pos:start="669:56" pos:end="669:61"><name pos:start="669:56" pos:end="669:61"><name pos:start="669:56" pos:end="669:56">e</name><operator pos:start="669:57" pos:end="669:58">-&gt;</operator><name pos:start="669:59" pos:end="669:61">key</name></name></expr></argument>, <argument pos:start="669:64" pos:end="669:67"><expr pos:start="669:64" pos:end="669:67"><name pos:start="669:64" pos:end="669:67">NULL</name></expr></argument>, <argument pos:start="669:70" pos:end="669:70"><expr pos:start="669:70" pos:end="669:70"><literal type="number" pos:start="669:70" pos:end="669:70">0</literal></expr></argument>,

                                              <argument pos:start="671:47" pos:end="671:93"><expr pos:start="671:47" pos:end="671:93"><name pos:start="671:47" pos:end="671:68">AV_OPT_SEARCH_CHILDREN</name> <operator pos:start="671:70" pos:end="671:70">|</operator> <name pos:start="671:72" pos:end="671:93">AV_OPT_SEARCH_FAKE_OBJ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="673:9" pos:end="675:21"><if pos:start="673:9" pos:end="675:21">if <condition pos:start="673:12" pos:end="673:31">(<expr pos:start="673:13" pos:end="673:30"><operator pos:start="673:13" pos:end="673:13">!</operator><name pos:start="673:14" pos:end="673:19">option</name> <operator pos:start="673:21" pos:end="673:22">||</operator> <name pos:start="673:24" pos:end="673:30">foption</name></expr>)</condition><block type="pseudo" pos:start="675:13" pos:end="675:21"><block_content pos:start="675:13" pos:end="675:21">

            <continue pos:start="675:13" pos:end="675:21">continue;</continue></block_content></block></if></if_stmt>





        <if_stmt pos:start="681:9" pos:end="693:9"><if pos:start="681:9" pos:end="693:9">if <condition pos:start="681:12" pos:end="681:58">(<expr pos:start="681:13" pos:end="681:57"><operator pos:start="681:13" pos:end="681:13">!</operator><operator pos:start="681:14" pos:end="681:14">(</operator><name pos:start="681:15" pos:end="681:27"><name pos:start="681:15" pos:end="681:20">option</name><operator pos:start="681:21" pos:end="681:22">-&gt;</operator><name pos:start="681:23" pos:end="681:27">flags</name></name> <operator pos:start="681:29" pos:end="681:29">&amp;</operator> <name pos:start="681:31" pos:end="681:56">AV_OPT_FLAG_ENCODING_PARAM</name><operator pos:start="681:57" pos:end="681:57">)</operator></expr>)</condition> <block pos:start="681:60" pos:end="693:9">{<block_content pos:start="683:13" pos:end="691:28">

            <expr_stmt pos:start="683:13" pos:end="689:29"><expr pos:start="683:13" pos:end="689:28"><call pos:start="683:13" pos:end="689:28"><name pos:start="683:13" pos:end="683:18">av_log</name><argument_list pos:start="683:19" pos:end="689:28">(<argument pos:start="683:20" pos:end="683:23"><expr pos:start="683:20" pos:end="683:23"><name pos:start="683:20" pos:end="683:23">NULL</name></expr></argument>, <argument pos:start="683:26" pos:end="683:37"><expr pos:start="683:26" pos:end="683:37"><name pos:start="683:26" pos:end="683:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="683:40" pos:end="685:70"><expr pos:start="683:40" pos:end="685:70"><literal type="string" pos:start="683:40" pos:end="683:78">"Codec AVOption %s (%s) specified for "</literal>

                   <literal type="string" pos:start="685:20" pos:end="685:70">"output file #%d (%s) is not an encoding option.\n"</literal></expr></argument>, <argument pos:start="685:73" pos:end="685:78"><expr pos:start="685:73" pos:end="685:78"><name pos:start="685:73" pos:end="685:78"><name pos:start="685:73" pos:end="685:73">e</name><operator pos:start="685:74" pos:end="685:75">-&gt;</operator><name pos:start="685:76" pos:end="685:78">key</name></name></expr></argument>,

                   <argument pos:start="687:20" pos:end="687:51"><expr pos:start="687:20" pos:end="687:51"><ternary pos:start="687:20" pos:end="687:51"><condition pos:start="687:20" pos:end="687:33"><expr pos:start="687:20" pos:end="687:31"><name pos:start="687:20" pos:end="687:31"><name pos:start="687:20" pos:end="687:25">option</name><operator pos:start="687:26" pos:end="687:27">-&gt;</operator><name pos:start="687:28" pos:end="687:31">help</name></name></expr> ?</condition><then pos:start="687:35" pos:end="687:46"> <expr pos:start="687:35" pos:end="687:46"><name pos:start="687:35" pos:end="687:46"><name pos:start="687:35" pos:end="687:40">option</name><operator pos:start="687:41" pos:end="687:42">-&gt;</operator><name pos:start="687:43" pos:end="687:46">help</name></name></expr> </then><else pos:start="687:48" pos:end="687:51">: <expr pos:start="687:50" pos:end="687:51"><literal type="string" pos:start="687:50" pos:end="687:51">""</literal></expr></else></ternary></expr></argument>, <argument pos:start="687:54" pos:end="687:72"><expr pos:start="687:54" pos:end="687:72"><name pos:start="687:54" pos:end="687:68">nb_output_files</name> <operator pos:start="687:70" pos:end="687:70">-</operator> <literal type="number" pos:start="687:72" pos:end="687:72">1</literal></expr></argument>,

                   <argument pos:start="689:20" pos:end="689:27"><expr pos:start="689:20" pos:end="689:27"><name pos:start="689:20" pos:end="689:27">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="691:13" pos:end="691:28"><expr pos:start="691:13" pos:end="691:27"><call pos:start="691:13" pos:end="691:27"><name pos:start="691:13" pos:end="691:24">exit_program</name><argument_list pos:start="691:25" pos:end="691:27">(<argument pos:start="691:26" pos:end="691:26"><expr pos:start="691:26" pos:end="691:26"><literal type="number" pos:start="691:26" pos:end="691:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="line" pos:start="697:9" pos:end="697:71">// gop_timecode is injected by generic code but not always used</comment>

        <if_stmt pos:start="699:9" pos:end="701:21"><if pos:start="699:9" pos:end="701:21">if <condition pos:start="699:12" pos:end="699:44">(<expr pos:start="699:13" pos:end="699:43"><operator pos:start="699:13" pos:end="699:13">!</operator><call pos:start="699:14" pos:end="699:43"><name pos:start="699:14" pos:end="699:19">strcmp</name><argument_list pos:start="699:20" pos:end="699:43">(<argument pos:start="699:21" pos:end="699:26"><expr pos:start="699:21" pos:end="699:26"><name pos:start="699:21" pos:end="699:26"><name pos:start="699:21" pos:end="699:21">e</name><operator pos:start="699:22" pos:end="699:23">-&gt;</operator><name pos:start="699:24" pos:end="699:26">key</name></name></expr></argument>, <argument pos:start="699:29" pos:end="699:42"><expr pos:start="699:29" pos:end="699:42"><literal type="string" pos:start="699:29" pos:end="699:42">"gop_timecode"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="701:13" pos:end="701:21"><block_content pos:start="701:13" pos:end="701:21">

            <continue pos:start="701:13" pos:end="701:21">continue;</continue></block_content></block></if></if_stmt>



        <expr_stmt pos:start="705:9" pos:end="715:80"><expr pos:start="705:9" pos:end="715:79"><call pos:start="705:9" pos:end="715:79"><name pos:start="705:9" pos:end="705:14">av_log</name><argument_list pos:start="705:15" pos:end="715:79">(<argument pos:start="705:16" pos:end="705:19"><expr pos:start="705:16" pos:end="705:19"><name pos:start="705:16" pos:end="705:19">NULL</name></expr></argument>, <argument pos:start="705:22" pos:end="705:35"><expr pos:start="705:22" pos:end="705:35"><name pos:start="705:22" pos:end="705:35">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="705:38" pos:end="713:62"><expr pos:start="705:38" pos:end="713:62"><literal type="string" pos:start="705:38" pos:end="705:76">"Codec AVOption %s (%s) specified for "</literal>

               <literal type="string" pos:start="707:16" pos:end="707:81">"output file #%d (%s) has not been used for any stream. The most "</literal>

               <literal type="string" pos:start="709:16" pos:end="709:78">"likely reason is either wrong type (e.g. a video option with "</literal>

               <literal type="string" pos:start="711:16" pos:end="711:82">"no video streams) or that it is a private option of some encoder "</literal>

               <literal type="string" pos:start="713:16" pos:end="713:62">"which was not actually used for any stream.\n"</literal></expr></argument>, <argument pos:start="713:65" pos:end="713:70"><expr pos:start="713:65" pos:end="713:70"><name pos:start="713:65" pos:end="713:70"><name pos:start="713:65" pos:end="713:65">e</name><operator pos:start="713:66" pos:end="713:67">-&gt;</operator><name pos:start="713:68" pos:end="713:70">key</name></name></expr></argument>,

               <argument pos:start="715:16" pos:end="715:47"><expr pos:start="715:16" pos:end="715:47"><ternary pos:start="715:16" pos:end="715:47"><condition pos:start="715:16" pos:end="715:29"><expr pos:start="715:16" pos:end="715:27"><name pos:start="715:16" pos:end="715:27"><name pos:start="715:16" pos:end="715:21">option</name><operator pos:start="715:22" pos:end="715:23">-&gt;</operator><name pos:start="715:24" pos:end="715:27">help</name></name></expr> ?</condition><then pos:start="715:31" pos:end="715:42"> <expr pos:start="715:31" pos:end="715:42"><name pos:start="715:31" pos:end="715:42"><name pos:start="715:31" pos:end="715:36">option</name><operator pos:start="715:37" pos:end="715:38">-&gt;</operator><name pos:start="715:39" pos:end="715:42">help</name></name></expr> </then><else pos:start="715:44" pos:end="715:47">: <expr pos:start="715:46" pos:end="715:47"><literal type="string" pos:start="715:46" pos:end="715:47">""</literal></expr></else></ternary></expr></argument>, <argument pos:start="715:50" pos:end="715:68"><expr pos:start="715:50" pos:end="715:68"><name pos:start="715:50" pos:end="715:64">nb_output_files</name> <operator pos:start="715:66" pos:end="715:66">-</operator> <literal type="number" pos:start="715:68" pos:end="715:68">1</literal></expr></argument>, <argument pos:start="715:71" pos:end="715:78"><expr pos:start="715:71" pos:end="715:78"><name pos:start="715:71" pos:end="715:78">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="719:5" pos:end="719:31"><expr pos:start="719:5" pos:end="719:30"><call pos:start="719:5" pos:end="719:30"><name pos:start="719:5" pos:end="719:16">av_dict_free</name><argument_list pos:start="719:17" pos:end="719:30">(<argument pos:start="719:18" pos:end="719:29"><expr pos:start="719:18" pos:end="719:29"><operator pos:start="719:18" pos:end="719:18">&amp;</operator><name pos:start="719:19" pos:end="719:29">unused_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="723:5" pos:end="723:48">/* set the encoding/decoding_needed flags */</comment>

    <for pos:start="725:5" pos:end="741:5">for <control pos:start="725:9" pos:end="725:55">(<init pos:start="725:10" pos:end="725:27"><expr pos:start="725:10" pos:end="725:26"><name pos:start="725:10" pos:end="725:10">i</name> <operator pos:start="725:12" pos:end="725:12">=</operator> <name pos:start="725:14" pos:end="725:26"><name pos:start="725:14" pos:end="725:15">of</name><operator pos:start="725:16" pos:end="725:17">-&gt;</operator><name pos:start="725:18" pos:end="725:26">ost_index</name></name></expr>;</init> <condition pos:start="725:29" pos:end="725:50"><expr pos:start="725:29" pos:end="725:49"><name pos:start="725:29" pos:end="725:29">i</name> <operator pos:start="725:31" pos:end="725:31">&lt;</operator> <name pos:start="725:33" pos:end="725:49">nb_output_streams</name></expr>;</condition> <incr pos:start="725:52" pos:end="725:54"><expr pos:start="725:52" pos:end="725:54"><name pos:start="725:52" pos:end="725:52">i</name><operator pos:start="725:53" pos:end="725:54">++</operator></expr></incr>)</control> <block pos:start="725:57" pos:end="741:5">{<block_content pos:start="727:9" pos:end="739:9">

        <decl_stmt pos:start="727:9" pos:end="727:46"><decl pos:start="727:9" pos:end="727:45"><type pos:start="727:9" pos:end="727:22"><name pos:start="727:9" pos:end="727:20">OutputStream</name> <modifier pos:start="727:22" pos:end="727:22">*</modifier></type><name pos:start="727:23" pos:end="727:25">ost</name> <init pos:start="727:27" pos:end="727:45">= <expr pos:start="727:29" pos:end="727:45"><name pos:start="727:29" pos:end="727:45"><name pos:start="727:29" pos:end="727:42">output_streams</name><index pos:start="727:43" pos:end="727:45">[<expr pos:start="727:44" pos:end="727:44"><name pos:start="727:44" pos:end="727:44">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="731:9" pos:end="731:49"><expr pos:start="731:9" pos:end="731:48"><name pos:start="731:9" pos:end="731:28"><name pos:start="731:9" pos:end="731:11">ost</name><operator pos:start="731:12" pos:end="731:13">-&gt;</operator><name pos:start="731:14" pos:end="731:28">encoding_needed</name></name> <operator pos:start="731:30" pos:end="731:30">=</operator> <operator pos:start="731:32" pos:end="731:32">!</operator><name pos:start="731:33" pos:end="731:48"><name pos:start="731:33" pos:end="731:35">ost</name><operator pos:start="731:36" pos:end="731:37">-&gt;</operator><name pos:start="731:38" pos:end="731:48">stream_copy</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="733:9" pos:end="739:9"><if pos:start="733:9" pos:end="739:9">if <condition pos:start="733:12" pos:end="733:59">(<expr pos:start="733:13" pos:end="733:58"><name pos:start="733:13" pos:end="733:32"><name pos:start="733:13" pos:end="733:15">ost</name><operator pos:start="733:16" pos:end="733:17">-&gt;</operator><name pos:start="733:18" pos:end="733:32">encoding_needed</name></name> <operator pos:start="733:34" pos:end="733:35">&amp;&amp;</operator> <name pos:start="733:37" pos:end="733:53"><name pos:start="733:37" pos:end="733:39">ost</name><operator pos:start="733:40" pos:end="733:41">-&gt;</operator><name pos:start="733:42" pos:end="733:53">source_index</name></name> <operator pos:start="733:55" pos:end="733:56">&gt;=</operator> <literal type="number" pos:start="733:58" pos:end="733:58">0</literal></expr>)</condition> <block pos:start="733:61" pos:end="739:9">{<block_content pos:start="735:13" pos:end="737:53">

            <decl_stmt pos:start="735:13" pos:end="735:64"><decl pos:start="735:13" pos:end="735:63"><type pos:start="735:13" pos:end="735:25"><name pos:start="735:13" pos:end="735:23">InputStream</name> <modifier pos:start="735:25" pos:end="735:25">*</modifier></type><name pos:start="735:26" pos:end="735:28">ist</name> <init pos:start="735:30" pos:end="735:63">= <expr pos:start="735:32" pos:end="735:63"><name pos:start="735:32" pos:end="735:63"><name pos:start="735:32" pos:end="735:44">input_streams</name><index pos:start="735:45" pos:end="735:63">[<expr pos:start="735:46" pos:end="735:62"><name pos:start="735:46" pos:end="735:62"><name pos:start="735:46" pos:end="735:48">ost</name><operator pos:start="735:49" pos:end="735:50">-&gt;</operator><name pos:start="735:51" pos:end="735:62">source_index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="737:13" pos:end="737:53"><expr pos:start="737:13" pos:end="737:52"><name pos:start="737:13" pos:end="737:32"><name pos:start="737:13" pos:end="737:15">ist</name><operator pos:start="737:16" pos:end="737:17">-&gt;</operator><name pos:start="737:18" pos:end="737:32">decoding_needed</name></name> <operator pos:start="737:34" pos:end="737:35">|=</operator> <name pos:start="737:37" pos:end="737:52">DECODING_FOR_OST</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="745:5" pos:end="745:63">/* check filename in case of an image number is expected */</comment>

    <if_stmt pos:start="747:5" pos:end="757:5"><if pos:start="747:5" pos:end="757:5">if <condition pos:start="747:8" pos:end="747:46">(<expr pos:start="747:9" pos:end="747:45"><name pos:start="747:9" pos:end="747:26"><name pos:start="747:9" pos:end="747:10">oc</name><operator pos:start="747:11" pos:end="747:12">-&gt;</operator><name pos:start="747:13" pos:end="747:19">oformat</name><operator pos:start="747:20" pos:end="747:21">-&gt;</operator><name pos:start="747:22" pos:end="747:26">flags</name></name> <operator pos:start="747:28" pos:end="747:28">&amp;</operator> <name pos:start="747:30" pos:end="747:45">AVFMT_NEEDNUMBER</name></expr>)</condition> <block pos:start="747:48" pos:end="757:5">{<block_content pos:start="749:9" pos:end="755:9">

        <if_stmt pos:start="749:9" pos:end="755:9"><if pos:start="749:9" pos:end="755:9">if <condition pos:start="749:12" pos:end="749:51">(<expr pos:start="749:13" pos:end="749:50"><operator pos:start="749:13" pos:end="749:13">!</operator><call pos:start="749:14" pos:end="749:50"><name pos:start="749:14" pos:end="749:36">av_filename_number_test</name><argument_list pos:start="749:37" pos:end="749:50">(<argument pos:start="749:38" pos:end="749:49"><expr pos:start="749:38" pos:end="749:49"><name pos:start="749:38" pos:end="749:49"><name pos:start="749:38" pos:end="749:39">oc</name><operator pos:start="749:40" pos:end="749:41">-&gt;</operator><name pos:start="749:42" pos:end="749:49">filename</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="749:53" pos:end="755:9">{<block_content pos:start="751:13" pos:end="753:28">

            <expr_stmt pos:start="751:13" pos:end="751:55"><expr pos:start="751:13" pos:end="751:54"><call pos:start="751:13" pos:end="751:54"><name pos:start="751:13" pos:end="751:23">print_error</name><argument_list pos:start="751:24" pos:end="751:54">(<argument pos:start="751:25" pos:end="751:36"><expr pos:start="751:25" pos:end="751:36"><name pos:start="751:25" pos:end="751:36"><name pos:start="751:25" pos:end="751:26">oc</name><operator pos:start="751:27" pos:end="751:28">-&gt;</operator><name pos:start="751:29" pos:end="751:36">filename</name></name></expr></argument>, <argument pos:start="751:39" pos:end="751:53"><expr pos:start="751:39" pos:end="751:53"><call pos:start="751:39" pos:end="751:53"><name pos:start="751:39" pos:end="751:45">AVERROR</name><argument_list pos:start="751:46" pos:end="751:53">(<argument pos:start="751:47" pos:end="751:52"><expr pos:start="751:47" pos:end="751:52"><name pos:start="751:47" pos:end="751:52">EINVAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="753:13" pos:end="753:28"><expr pos:start="753:13" pos:end="753:27"><call pos:start="753:13" pos:end="753:27"><name pos:start="753:13" pos:end="753:24">exit_program</name><argument_list pos:start="753:25" pos:end="753:27">(<argument pos:start="753:26" pos:end="753:26"><expr pos:start="753:26" pos:end="753:26"><literal type="number" pos:start="753:26" pos:end="753:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="761:5" pos:end="769:5"><if pos:start="761:5" pos:end="769:5">if <condition pos:start="761:8" pos:end="761:87">(<expr pos:start="761:9" pos:end="761:86"><operator pos:start="761:9" pos:end="761:9">!</operator><operator pos:start="761:10" pos:end="761:10">(</operator><name pos:start="761:11" pos:end="761:28"><name pos:start="761:11" pos:end="761:12">oc</name><operator pos:start="761:13" pos:end="761:14">-&gt;</operator><name pos:start="761:15" pos:end="761:21">oformat</name><operator pos:start="761:22" pos:end="761:23">-&gt;</operator><name pos:start="761:24" pos:end="761:28">flags</name></name> <operator pos:start="761:30" pos:end="761:30">&amp;</operator> <name pos:start="761:32" pos:end="761:46">AVFMT_NOSTREAMS</name><operator pos:start="761:47" pos:end="761:47">)</operator> <operator pos:start="761:49" pos:end="761:50">&amp;&amp;</operator> <operator pos:start="761:52" pos:end="761:52">!</operator><name pos:start="761:53" pos:end="761:86">input_stream_potentially_available</name></expr>)</condition> <block pos:start="761:89" pos:end="769:5">{<block_content pos:start="763:9" pos:end="767:24">

        <expr_stmt pos:start="763:9" pos:end="765:70"><expr pos:start="763:9" pos:end="765:69"><call pos:start="763:9" pos:end="765:69"><name pos:start="763:9" pos:end="763:14">av_log</name><argument_list pos:start="763:15" pos:end="765:69">(<argument pos:start="763:16" pos:end="763:19"><expr pos:start="763:16" pos:end="763:19"><name pos:start="763:16" pos:end="763:19">NULL</name></expr></argument>, <argument pos:start="763:22" pos:end="763:33"><expr pos:start="763:22" pos:end="763:33"><name pos:start="763:22" pos:end="763:33">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="765:16" pos:end="765:68"><expr pos:start="765:16" pos:end="765:68"><literal type="string" pos:start="765:16" pos:end="765:68">"No input streams but output needs an input stream\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="767:9" pos:end="767:24"><expr pos:start="767:9" pos:end="767:23"><call pos:start="767:9" pos:end="767:23"><name pos:start="767:9" pos:end="767:20">exit_program</name><argument_list pos:start="767:21" pos:end="767:23">(<argument pos:start="767:22" pos:end="767:22"><expr pos:start="767:22" pos:end="767:22"><literal type="number" pos:start="767:22" pos:end="767:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="773:5" pos:end="797:40"><if pos:start="773:5" pos:end="795:5">if <condition pos:start="773:8" pos:end="773:45">(<expr pos:start="773:9" pos:end="773:44"><operator pos:start="773:9" pos:end="773:9">!</operator><operator pos:start="773:10" pos:end="773:10">(</operator><name pos:start="773:11" pos:end="773:28"><name pos:start="773:11" pos:end="773:12">oc</name><operator pos:start="773:13" pos:end="773:14">-&gt;</operator><name pos:start="773:15" pos:end="773:21">oformat</name><operator pos:start="773:22" pos:end="773:23">-&gt;</operator><name pos:start="773:24" pos:end="773:28">flags</name></name> <operator pos:start="773:30" pos:end="773:30">&amp;</operator> <name pos:start="773:32" pos:end="773:43">AVFMT_NOFILE</name><operator pos:start="773:44" pos:end="773:44">)</operator></expr>)</condition> <block pos:start="773:47" pos:end="795:5">{<block_content pos:start="777:9" pos:end="793:9">

        <comment type="block" pos:start="775:9" pos:end="775:70">/* test if it already exists to avoid losing precious files */</comment>

        <expr_stmt pos:start="777:9" pos:end="777:40"><expr pos:start="777:9" pos:end="777:39"><call pos:start="777:9" pos:end="777:39"><name pos:start="777:9" pos:end="777:29">assert_file_overwrite</name><argument_list pos:start="777:30" pos:end="777:39">(<argument pos:start="777:31" pos:end="777:38"><expr pos:start="777:31" pos:end="777:38"><name pos:start="777:31" pos:end="777:38">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="781:9" pos:end="781:27">/* open the file */</comment>

        <if_stmt pos:start="783:9" pos:end="793:9"><if pos:start="783:9" pos:end="793:9">if <condition pos:start="783:12" pos:end="787:46">(<expr pos:start="783:13" pos:end="787:45"><operator pos:start="783:13" pos:end="783:13">(</operator><name pos:start="783:14" pos:end="783:16">err</name> <operator pos:start="783:18" pos:end="783:18">=</operator> <call pos:start="783:20" pos:end="787:40"><name pos:start="783:20" pos:end="783:29">avio_open2</name><argument_list pos:start="783:30" pos:end="787:40">(<argument pos:start="783:31" pos:end="783:37"><expr pos:start="783:31" pos:end="783:37"><operator pos:start="783:31" pos:end="783:31">&amp;</operator><name pos:start="783:32" pos:end="783:37"><name pos:start="783:32" pos:end="783:33">oc</name><operator pos:start="783:34" pos:end="783:35">-&gt;</operator><name pos:start="783:36" pos:end="783:37">pb</name></name></expr></argument>, <argument pos:start="783:40" pos:end="783:47"><expr pos:start="783:40" pos:end="783:47"><name pos:start="783:40" pos:end="783:47">filename</name></expr></argument>, <argument pos:start="783:50" pos:end="783:64"><expr pos:start="783:50" pos:end="783:64"><name pos:start="783:50" pos:end="783:64">AVIO_FLAG_WRITE</name></expr></argument>,

                              <argument pos:start="785:31" pos:end="785:53"><expr pos:start="785:31" pos:end="785:53"><operator pos:start="785:31" pos:end="785:31">&amp;</operator><name pos:start="785:32" pos:end="785:53"><name pos:start="785:32" pos:end="785:33">oc</name><operator pos:start="785:34" pos:end="785:35">-&gt;</operator><name pos:start="785:36" pos:end="785:53">interrupt_callback</name></name></expr></argument>,

                              <argument pos:start="787:31" pos:end="787:39"><expr pos:start="787:31" pos:end="787:39"><operator pos:start="787:31" pos:end="787:31">&amp;</operator><name pos:start="787:32" pos:end="787:39"><name pos:start="787:32" pos:end="787:33">of</name><operator pos:start="787:34" pos:end="787:35">-&gt;</operator><name pos:start="787:36" pos:end="787:39">opts</name></name></expr></argument>)</argument_list></call><operator pos:start="787:41" pos:end="787:41">)</operator> <operator pos:start="787:43" pos:end="787:43">&lt;</operator> <literal type="number" pos:start="787:45" pos:end="787:45">0</literal></expr>)</condition> <block pos:start="787:48" pos:end="793:9">{<block_content pos:start="789:13" pos:end="791:28">

            <expr_stmt pos:start="789:13" pos:end="789:39"><expr pos:start="789:13" pos:end="789:38"><call pos:start="789:13" pos:end="789:38"><name pos:start="789:13" pos:end="789:23">print_error</name><argument_list pos:start="789:24" pos:end="789:38">(<argument pos:start="789:25" pos:end="789:32"><expr pos:start="789:25" pos:end="789:32"><name pos:start="789:25" pos:end="789:32">filename</name></expr></argument>, <argument pos:start="789:35" pos:end="789:37"><expr pos:start="789:35" pos:end="789:37"><name pos:start="789:35" pos:end="789:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="791:13" pos:end="791:28"><expr pos:start="791:13" pos:end="791:27"><call pos:start="791:13" pos:end="791:27"><name pos:start="791:13" pos:end="791:24">exit_program</name><argument_list pos:start="791:25" pos:end="791:27">(<argument pos:start="791:26" pos:end="791:26"><expr pos:start="791:26" pos:end="791:26"><literal type="number" pos:start="791:26" pos:end="791:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="795:7" pos:end="797:40">else if <condition pos:start="795:15" pos:end="795:92">(<expr pos:start="795:16" pos:end="795:91"><call pos:start="795:16" pos:end="795:50"><name pos:start="795:16" pos:end="795:21">strcmp</name><argument_list pos:start="795:22" pos:end="795:50">(<argument pos:start="795:23" pos:end="795:39"><expr pos:start="795:23" pos:end="795:39"><name pos:start="795:23" pos:end="795:39"><name pos:start="795:23" pos:end="795:24">oc</name><operator pos:start="795:25" pos:end="795:26">-&gt;</operator><name pos:start="795:27" pos:end="795:33">oformat</name><operator pos:start="795:34" pos:end="795:35">-&gt;</operator><name pos:start="795:36" pos:end="795:39">name</name></name></expr></argument>, <argument pos:start="795:42" pos:end="795:49"><expr pos:start="795:42" pos:end="795:49"><literal type="string" pos:start="795:42" pos:end="795:49">"image2"</literal></expr></argument>)</argument_list></call><operator pos:start="795:51" pos:end="795:52">==</operator><literal type="number" pos:start="795:53" pos:end="795:53">0</literal> <operator pos:start="795:55" pos:end="795:56">&amp;&amp;</operator> <operator pos:start="795:58" pos:end="795:58">!</operator><call pos:start="795:59" pos:end="795:91"><name pos:start="795:59" pos:end="795:81">av_filename_number_test</name><argument_list pos:start="795:82" pos:end="795:91">(<argument pos:start="795:83" pos:end="795:90"><expr pos:start="795:83" pos:end="795:90"><name pos:start="795:83" pos:end="795:90">filename</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="797:9" pos:end="797:40"><block_content pos:start="797:9" pos:end="797:40">

        <expr_stmt pos:start="797:9" pos:end="797:40"><expr pos:start="797:9" pos:end="797:39"><call pos:start="797:9" pos:end="797:39"><name pos:start="797:9" pos:end="797:29">assert_file_overwrite</name><argument_list pos:start="797:30" pos:end="797:39">(<argument pos:start="797:31" pos:end="797:38"><expr pos:start="797:31" pos:end="797:38"><name pos:start="797:31" pos:end="797:38">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="801:5" pos:end="805:5"><if pos:start="801:5" pos:end="805:5">if <condition pos:start="801:8" pos:end="801:23">(<expr pos:start="801:9" pos:end="801:22"><name pos:start="801:9" pos:end="801:22"><name pos:start="801:9" pos:end="801:9">o</name><operator pos:start="801:10" pos:end="801:11">-&gt;</operator><name pos:start="801:12" pos:end="801:22">mux_preload</name></name></expr>)</condition> <block pos:start="801:25" pos:end="805:5">{<block_content pos:start="803:9" pos:end="803:78">

        <expr_stmt pos:start="803:9" pos:end="803:78"><expr pos:start="803:9" pos:end="803:77"><call pos:start="803:9" pos:end="803:77"><name pos:start="803:9" pos:end="803:23">av_dict_set_int</name><argument_list pos:start="803:24" pos:end="803:77">(<argument pos:start="803:25" pos:end="803:33"><expr pos:start="803:25" pos:end="803:33"><operator pos:start="803:25" pos:end="803:25">&amp;</operator><name pos:start="803:26" pos:end="803:33"><name pos:start="803:26" pos:end="803:27">of</name><operator pos:start="803:28" pos:end="803:29">-&gt;</operator><name pos:start="803:30" pos:end="803:33">opts</name></name></expr></argument>, <argument pos:start="803:36" pos:end="803:44"><expr pos:start="803:36" pos:end="803:44"><literal type="string" pos:start="803:36" pos:end="803:44">"preload"</literal></expr></argument>, <argument pos:start="803:47" pos:end="803:73"><expr pos:start="803:47" pos:end="803:73"><name pos:start="803:47" pos:end="803:60"><name pos:start="803:47" pos:end="803:47">o</name><operator pos:start="803:48" pos:end="803:49">-&gt;</operator><name pos:start="803:50" pos:end="803:60">mux_preload</name></name><operator pos:start="803:61" pos:end="803:61">*</operator><name pos:start="803:62" pos:end="803:73">AV_TIME_BASE</name></expr></argument>, <argument pos:start="803:76" pos:end="803:76"><expr pos:start="803:76" pos:end="803:76"><literal type="number" pos:start="803:76" pos:end="803:76">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="807:5" pos:end="807:59"><expr pos:start="807:5" pos:end="807:58"><name pos:start="807:5" pos:end="807:17"><name pos:start="807:5" pos:end="807:6">oc</name><operator pos:start="807:7" pos:end="807:8">-&gt;</operator><name pos:start="807:9" pos:end="807:17">max_delay</name></name> <operator pos:start="807:19" pos:end="807:19">=</operator> <operator pos:start="807:21" pos:end="807:21">(</operator><name pos:start="807:22" pos:end="807:24">int</name><operator pos:start="807:25" pos:end="807:25">)</operator><operator pos:start="807:26" pos:end="807:26">(</operator><name pos:start="807:27" pos:end="807:42"><name pos:start="807:27" pos:end="807:27">o</name><operator pos:start="807:28" pos:end="807:29">-&gt;</operator><name pos:start="807:30" pos:end="807:42">mux_max_delay</name></name> <operator pos:start="807:44" pos:end="807:44">*</operator> <name pos:start="807:46" pos:end="807:57">AV_TIME_BASE</name><operator pos:start="807:58" pos:end="807:58">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="811:5" pos:end="811:23">/* copy metadata */</comment>

    <for pos:start="813:5" pos:end="835:5">for <control pos:start="813:9" pos:end="813:44">(<init pos:start="813:10" pos:end="813:15"><expr pos:start="813:10" pos:end="813:14"><name pos:start="813:10" pos:end="813:10">i</name> <operator pos:start="813:12" pos:end="813:12">=</operator> <literal type="number" pos:start="813:14" pos:end="813:14">0</literal></expr>;</init> <condition pos:start="813:17" pos:end="813:39"><expr pos:start="813:17" pos:end="813:38"><name pos:start="813:17" pos:end="813:17">i</name> <operator pos:start="813:19" pos:end="813:19">&lt;</operator> <name pos:start="813:21" pos:end="813:38"><name pos:start="813:21" pos:end="813:21">o</name><operator pos:start="813:22" pos:end="813:23">-&gt;</operator><name pos:start="813:24" pos:end="813:38">nb_metadata_map</name></name></expr>;</condition> <incr pos:start="813:41" pos:end="813:43"><expr pos:start="813:41" pos:end="813:43"><name pos:start="813:41" pos:end="813:41">i</name><operator pos:start="813:42" pos:end="813:43">++</operator></expr></incr>)</control> <block pos:start="813:46" pos:end="835:5">{<block_content pos:start="815:9" pos:end="833:65">

        <decl_stmt pos:start="815:9" pos:end="815:16"><decl pos:start="815:9" pos:end="815:15"><type pos:start="815:9" pos:end="815:14"><name pos:start="815:9" pos:end="815:12">char</name> <modifier pos:start="815:14" pos:end="815:14">*</modifier></type><name pos:start="815:15" pos:end="815:15">p</name></decl>;</decl_stmt>

        <decl_stmt pos:start="817:9" pos:end="817:68"><decl pos:start="817:9" pos:end="817:67"><type pos:start="817:9" pos:end="817:11"><name pos:start="817:9" pos:end="817:11">int</name></type> <name pos:start="817:13" pos:end="817:25">in_file_index</name> <init pos:start="817:27" pos:end="817:67">= <expr pos:start="817:29" pos:end="817:67"><call pos:start="817:29" pos:end="817:67"><name pos:start="817:29" pos:end="817:34">strtol</name><argument_list pos:start="817:35" pos:end="817:67">(<argument pos:start="817:36" pos:end="817:59"><expr pos:start="817:36" pos:end="817:59"><name pos:start="817:36" pos:end="817:53"><name pos:start="817:36" pos:end="817:36">o</name><operator pos:start="817:37" pos:end="817:38">-&gt;</operator><name pos:start="817:39" pos:end="817:50">metadata_map</name><index pos:start="817:51" pos:end="817:53">[<expr pos:start="817:52" pos:end="817:52"><name pos:start="817:52" pos:end="817:52">i</name></expr>]</index></name><operator pos:start="817:54" pos:end="817:54">.</operator><name pos:start="817:55" pos:end="817:59"><name pos:start="817:55" pos:end="817:55">u</name><operator pos:start="817:56" pos:end="817:56">.</operator><name pos:start="817:57" pos:end="817:59">str</name></name></expr></argument>, <argument pos:start="817:62" pos:end="817:63"><expr pos:start="817:62" pos:end="817:63"><operator pos:start="817:62" pos:end="817:62">&amp;</operator><name pos:start="817:63" pos:end="817:63">p</name></expr></argument>, <argument pos:start="817:66" pos:end="817:66"><expr pos:start="817:66" pos:end="817:66"><literal type="number" pos:start="817:66" pos:end="817:66">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="821:9" pos:end="827:9"><if pos:start="821:9" pos:end="827:9">if <condition pos:start="821:12" pos:end="821:44">(<expr pos:start="821:13" pos:end="821:43"><name pos:start="821:13" pos:end="821:25">in_file_index</name> <operator pos:start="821:27" pos:end="821:28">&gt;=</operator> <name pos:start="821:30" pos:end="821:43">nb_input_files</name></expr>)</condition> <block pos:start="821:46" pos:end="827:9">{<block_content pos:start="823:13" pos:end="825:28">

            <expr_stmt pos:start="823:13" pos:end="823:118"><expr pos:start="823:13" pos:end="823:117"><call pos:start="823:13" pos:end="823:117"><name pos:start="823:13" pos:end="823:18">av_log</name><argument_list pos:start="823:19" pos:end="823:117">(<argument pos:start="823:20" pos:end="823:23"><expr pos:start="823:20" pos:end="823:23"><name pos:start="823:20" pos:end="823:23">NULL</name></expr></argument>, <argument pos:start="823:26" pos:end="823:37"><expr pos:start="823:26" pos:end="823:37"><name pos:start="823:26" pos:end="823:37">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="823:40" pos:end="823:101"><expr pos:start="823:40" pos:end="823:101"><literal type="string" pos:start="823:40" pos:end="823:101">"Invalid input file index %d while processing metadata maps\n"</literal></expr></argument>, <argument pos:start="823:104" pos:end="823:116"><expr pos:start="823:104" pos:end="823:116"><name pos:start="823:104" pos:end="823:116">in_file_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="825:13" pos:end="825:28"><expr pos:start="825:13" pos:end="825:27"><call pos:start="825:13" pos:end="825:27"><name pos:start="825:13" pos:end="825:24">exit_program</name><argument_list pos:start="825:25" pos:end="825:27">(<argument pos:start="825:26" pos:end="825:26"><expr pos:start="825:26" pos:end="825:26"><literal type="number" pos:start="825:26" pos:end="825:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="829:9" pos:end="833:65"><expr pos:start="829:9" pos:end="833:64"><call pos:start="829:9" pos:end="833:64"><name pos:start="829:9" pos:end="829:21">copy_metadata</name><argument_list pos:start="829:22" pos:end="833:64">(<argument pos:start="829:23" pos:end="829:50"><expr pos:start="829:23" pos:end="829:50"><name pos:start="829:23" pos:end="829:40"><name pos:start="829:23" pos:end="829:23">o</name><operator pos:start="829:24" pos:end="829:25">-&gt;</operator><name pos:start="829:26" pos:end="829:37">metadata_map</name><index pos:start="829:38" pos:end="829:40">[<expr pos:start="829:39" pos:end="829:39"><name pos:start="829:39" pos:end="829:39">i</name></expr>]</index></name><operator pos:start="829:41" pos:end="829:41">.</operator><name pos:start="829:42" pos:end="829:50">specifier</name></expr></argument>, <argument pos:start="829:53" pos:end="829:66"><expr pos:start="829:53" pos:end="829:66"><ternary pos:start="829:53" pos:end="829:66"><condition pos:start="829:53" pos:end="829:56"><expr pos:start="829:53" pos:end="829:54"><operator pos:start="829:53" pos:end="829:53">*</operator><name pos:start="829:54" pos:end="829:54">p</name></expr> ?</condition><then pos:start="829:58" pos:end="829:62"> <expr pos:start="829:58" pos:end="829:62"><name pos:start="829:58" pos:end="829:58">p</name> <operator pos:start="829:60" pos:end="829:60">+</operator> <literal type="number" pos:start="829:62" pos:end="829:62">1</literal></expr> </then><else pos:start="829:64" pos:end="829:66">: <expr pos:start="829:66" pos:end="829:66"><name pos:start="829:66" pos:end="829:66">p</name></expr></else></ternary></expr></argument>, <argument pos:start="829:69" pos:end="829:70"><expr pos:start="829:69" pos:end="829:70"><name pos:start="829:69" pos:end="829:70">oc</name></expr></argument>,

                      <argument pos:start="831:23" pos:end="833:60"><expr pos:start="831:23" pos:end="833:60"><ternary pos:start="831:23" pos:end="833:60"><condition pos:start="831:23" pos:end="831:42"><expr pos:start="831:23" pos:end="831:40"><name pos:start="831:23" pos:end="831:35">in_file_index</name> <operator pos:start="831:37" pos:end="831:38">&gt;=</operator> <literal type="number" pos:start="831:40" pos:end="831:40">0</literal></expr> ?</condition><then pos:start="833:23" pos:end="833:53">

                      <expr pos:start="833:23" pos:end="833:53"><name pos:start="833:23" pos:end="833:48"><name pos:start="833:23" pos:end="833:33">input_files</name><index pos:start="833:34" pos:end="833:48">[<expr pos:start="833:35" pos:end="833:47"><name pos:start="833:35" pos:end="833:47">in_file_index</name></expr>]</index></name><operator pos:start="833:49" pos:end="833:50">-&gt;</operator><name pos:start="833:51" pos:end="833:53">ctx</name></expr> </then><else pos:start="833:55" pos:end="833:60">: <expr pos:start="833:57" pos:end="833:60"><name pos:start="833:57" pos:end="833:60">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="833:63" pos:end="833:63"><expr pos:start="833:63" pos:end="833:63"><name pos:start="833:63" pos:end="833:63">o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="839:5" pos:end="839:23">/* copy chapters */</comment>

    <if_stmt pos:start="841:5" pos:end="869:5"><if pos:start="841:5" pos:end="869:5">if <condition pos:start="841:8" pos:end="841:49">(<expr pos:start="841:9" pos:end="841:48"><name pos:start="841:9" pos:end="841:30"><name pos:start="841:9" pos:end="841:9">o</name><operator pos:start="841:10" pos:end="841:11">-&gt;</operator><name pos:start="841:12" pos:end="841:30">chapters_input_file</name></name> <operator pos:start="841:32" pos:end="841:33">&gt;=</operator> <name pos:start="841:35" pos:end="841:48">nb_input_files</name></expr>)</condition> <block pos:start="841:51" pos:end="869:5">{<block_content pos:start="843:9" pos:end="867:9">

        <if_stmt pos:start="843:9" pos:end="867:9"><if pos:start="843:9" pos:end="859:9">if <condition pos:start="843:12" pos:end="843:46">(<expr pos:start="843:13" pos:end="843:45"><name pos:start="843:13" pos:end="843:34"><name pos:start="843:13" pos:end="843:13">o</name><operator pos:start="843:14" pos:end="843:15">-&gt;</operator><name pos:start="843:16" pos:end="843:34">chapters_input_file</name></name> <operator pos:start="843:36" pos:end="843:37">==</operator> <name pos:start="843:39" pos:end="843:45">INT_MAX</name></expr>)</condition> <block pos:start="843:48" pos:end="859:9">{<block_content pos:start="847:13" pos:end="857:17">

            <comment type="block" pos:start="845:13" pos:end="845:70">/* copy chapters from the first input file that has them*/</comment>

            <expr_stmt pos:start="847:13" pos:end="847:40"><expr pos:start="847:13" pos:end="847:39"><name pos:start="847:13" pos:end="847:34"><name pos:start="847:13" pos:end="847:13">o</name><operator pos:start="847:14" pos:end="847:15">-&gt;</operator><name pos:start="847:16" pos:end="847:34">chapters_input_file</name></name> <operator pos:start="847:36" pos:end="847:36">=</operator> <operator pos:start="847:38" pos:end="847:38">-</operator><literal type="number" pos:start="847:39" pos:end="847:39">1</literal></expr>;</expr_stmt>

            <for pos:start="849:13" pos:end="857:17">for <control pos:start="849:17" pos:end="849:48">(<init pos:start="849:18" pos:end="849:23"><expr pos:start="849:18" pos:end="849:22"><name pos:start="849:18" pos:end="849:18">i</name> <operator pos:start="849:20" pos:end="849:20">=</operator> <literal type="number" pos:start="849:22" pos:end="849:22">0</literal></expr>;</init> <condition pos:start="849:25" pos:end="849:43"><expr pos:start="849:25" pos:end="849:42"><name pos:start="849:25" pos:end="849:25">i</name> <operator pos:start="849:27" pos:end="849:27">&lt;</operator> <name pos:start="849:29" pos:end="849:42">nb_input_files</name></expr>;</condition> <incr pos:start="849:45" pos:end="849:47"><expr pos:start="849:45" pos:end="849:47"><name pos:start="849:45" pos:end="849:45">i</name><operator pos:start="849:46" pos:end="849:47">++</operator></expr></incr>)</control><block type="pseudo" pos:start="851:17" pos:end="857:17"><block_content pos:start="851:17" pos:end="857:17">

                <if_stmt pos:start="851:17" pos:end="857:17"><if pos:start="851:17" pos:end="857:17">if <condition pos:start="851:20" pos:end="851:53">(<expr pos:start="851:21" pos:end="851:52"><name pos:start="851:21" pos:end="851:34"><name pos:start="851:21" pos:end="851:31">input_files</name><index pos:start="851:32" pos:end="851:34">[<expr pos:start="851:33" pos:end="851:33"><name pos:start="851:33" pos:end="851:33">i</name></expr>]</index></name><operator pos:start="851:35" pos:end="851:36">-&gt;</operator><name pos:start="851:37" pos:end="851:52"><name pos:start="851:37" pos:end="851:39">ctx</name><operator pos:start="851:40" pos:end="851:41">-&gt;</operator><name pos:start="851:42" pos:end="851:52">nb_chapters</name></name></expr>)</condition> <block pos:start="851:55" pos:end="857:17">{<block_content pos:start="853:21" pos:end="855:26">

                    <expr_stmt pos:start="853:21" pos:end="853:47"><expr pos:start="853:21" pos:end="853:46"><name pos:start="853:21" pos:end="853:42"><name pos:start="853:21" pos:end="853:21">o</name><operator pos:start="853:22" pos:end="853:23">-&gt;</operator><name pos:start="853:24" pos:end="853:42">chapters_input_file</name></name> <operator pos:start="853:44" pos:end="853:44">=</operator> <name pos:start="853:46" pos:end="853:46">i</name></expr>;</expr_stmt>

                    <break pos:start="855:21" pos:end="855:26">break;</break>

                </block_content>}</block></if></if_stmt></block_content></block></for>

        </block_content>}</block></if> <else pos:start="859:11" pos:end="867:9">else <block pos:start="859:16" pos:end="867:9">{<block_content pos:start="861:13" pos:end="865:28">

            <expr_stmt pos:start="861:13" pos:end="863:43"><expr pos:start="861:13" pos:end="863:42"><call pos:start="861:13" pos:end="863:42"><name pos:start="861:13" pos:end="861:18">av_log</name><argument_list pos:start="861:19" pos:end="863:42">(<argument pos:start="861:20" pos:end="861:23"><expr pos:start="861:20" pos:end="861:23"><name pos:start="861:20" pos:end="861:23">NULL</name></expr></argument>, <argument pos:start="861:26" pos:end="861:37"><expr pos:start="861:26" pos:end="861:37"><name pos:start="861:26" pos:end="861:37">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="861:40" pos:end="861:90"><expr pos:start="861:40" pos:end="861:90"><literal type="string" pos:start="861:40" pos:end="861:90">"Invalid input file index %d in chapter mapping.\n"</literal></expr></argument>,

                   <argument pos:start="863:20" pos:end="863:41"><expr pos:start="863:20" pos:end="863:41"><name pos:start="863:20" pos:end="863:41"><name pos:start="863:20" pos:end="863:20">o</name><operator pos:start="863:21" pos:end="863:22">-&gt;</operator><name pos:start="863:23" pos:end="863:41">chapters_input_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="865:13" pos:end="865:28"><expr pos:start="865:13" pos:end="865:27"><call pos:start="865:13" pos:end="865:27"><name pos:start="865:13" pos:end="865:24">exit_program</name><argument_list pos:start="865:25" pos:end="865:27">(<argument pos:start="865:26" pos:end="865:26"><expr pos:start="865:26" pos:end="865:26"><literal type="number" pos:start="865:26" pos:end="865:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="871:5" pos:end="875:52"><if pos:start="871:5" pos:end="875:52">if <condition pos:start="871:8" pos:end="871:36">(<expr pos:start="871:9" pos:end="871:35"><name pos:start="871:9" pos:end="871:30"><name pos:start="871:9" pos:end="871:9">o</name><operator pos:start="871:10" pos:end="871:11">-&gt;</operator><name pos:start="871:12" pos:end="871:30">chapters_input_file</name></name> <operator pos:start="871:32" pos:end="871:33">&gt;=</operator> <literal type="number" pos:start="871:35" pos:end="871:35">0</literal></expr>)</condition><block type="pseudo" pos:start="873:9" pos:end="875:52"><block_content pos:start="873:9" pos:end="875:52">

        <expr_stmt pos:start="873:9" pos:end="875:52"><expr pos:start="873:9" pos:end="875:51"><call pos:start="873:9" pos:end="875:51"><name pos:start="873:9" pos:end="873:21">copy_chapters</name><argument_list pos:start="873:22" pos:end="875:51">(<argument pos:start="873:23" pos:end="873:57"><expr pos:start="873:23" pos:end="873:57"><name pos:start="873:23" pos:end="873:57"><name pos:start="873:23" pos:end="873:33">input_files</name><index pos:start="873:34" pos:end="873:57">[<expr pos:start="873:35" pos:end="873:56"><name pos:start="873:35" pos:end="873:56"><name pos:start="873:35" pos:end="873:35">o</name><operator pos:start="873:36" pos:end="873:37">-&gt;</operator><name pos:start="873:38" pos:end="873:56">chapters_input_file</name></name></expr>]</index></name></expr></argument>, <argument pos:start="873:60" pos:end="873:61"><expr pos:start="873:60" pos:end="873:61"><name pos:start="873:60" pos:end="873:61">of</name></expr></argument>,

                      <argument pos:start="875:23" pos:end="875:50"><expr pos:start="875:23" pos:end="875:50"><operator pos:start="875:23" pos:end="875:23">!</operator><name pos:start="875:24" pos:end="875:50"><name pos:start="875:24" pos:end="875:24">o</name><operator pos:start="875:25" pos:end="875:26">-&gt;</operator><name pos:start="875:27" pos:end="875:50">metadata_chapters_manual</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="879:5" pos:end="879:41">/* copy global metadata by default */</comment>

    <if_stmt pos:start="881:5" pos:end="893:5"><if pos:start="881:5" pos:end="893:5">if <condition pos:start="881:8" pos:end="881:53">(<expr pos:start="881:9" pos:end="881:52"><operator pos:start="881:9" pos:end="881:9">!</operator><name pos:start="881:10" pos:end="881:34"><name pos:start="881:10" pos:end="881:10">o</name><operator pos:start="881:11" pos:end="881:12">-&gt;</operator><name pos:start="881:13" pos:end="881:34">metadata_global_manual</name></name> <operator pos:start="881:36" pos:end="881:37">&amp;&amp;</operator> <name pos:start="881:39" pos:end="881:52">nb_input_files</name></expr>)</condition><block pos:start="881:54" pos:end="893:5">{<block_content pos:start="883:9" pos:end="891:61">

        <expr_stmt pos:start="883:9" pos:end="885:45"><expr pos:start="883:9" pos:end="885:44"><call pos:start="883:9" pos:end="885:44"><name pos:start="883:9" pos:end="883:20">av_dict_copy</name><argument_list pos:start="883:21" pos:end="885:44">(<argument pos:start="883:22" pos:end="883:34"><expr pos:start="883:22" pos:end="883:34"><operator pos:start="883:22" pos:end="883:22">&amp;</operator><name pos:start="883:23" pos:end="883:34"><name pos:start="883:23" pos:end="883:24">oc</name><operator pos:start="883:25" pos:end="883:26">-&gt;</operator><name pos:start="883:27" pos:end="883:34">metadata</name></name></expr></argument>, <argument pos:start="883:37" pos:end="883:65"><expr pos:start="883:37" pos:end="883:65"><name pos:start="883:37" pos:end="883:50"><name pos:start="883:37" pos:end="883:47">input_files</name><index pos:start="883:48" pos:end="883:50">[<expr pos:start="883:49" pos:end="883:49"><literal type="number" pos:start="883:49" pos:end="883:49">0</literal></expr>]</index></name><operator pos:start="883:51" pos:end="883:52">-&gt;</operator><name pos:start="883:53" pos:end="883:65"><name pos:start="883:53" pos:end="883:55">ctx</name><operator pos:start="883:56" pos:end="883:57">-&gt;</operator><name pos:start="883:58" pos:end="883:65">metadata</name></name></expr></argument>,

                     <argument pos:start="885:22" pos:end="885:43"><expr pos:start="885:22" pos:end="885:43"><name pos:start="885:22" pos:end="885:43">AV_DICT_DONT_OVERWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="887:9" pos:end="889:60"><if pos:start="887:9" pos:end="889:60">if<condition pos:start="887:11" pos:end="887:42">(<expr pos:start="887:12" pos:end="887:41"><name pos:start="887:12" pos:end="887:28"><name pos:start="887:12" pos:end="887:12">o</name><operator pos:start="887:13" pos:end="887:14">-&gt;</operator><name pos:start="887:15" pos:end="887:28">recording_time</name></name> <operator pos:start="887:30" pos:end="887:31">!=</operator> <name pos:start="887:33" pos:end="887:41">INT64_MAX</name></expr>)</condition><block type="pseudo" pos:start="889:13" pos:end="889:60"><block_content pos:start="889:13" pos:end="889:60">

            <expr_stmt pos:start="889:13" pos:end="889:60"><expr pos:start="889:13" pos:end="889:59"><call pos:start="889:13" pos:end="889:59"><name pos:start="889:13" pos:end="889:23">av_dict_set</name><argument_list pos:start="889:24" pos:end="889:59">(<argument pos:start="889:25" pos:end="889:37"><expr pos:start="889:25" pos:end="889:37"><operator pos:start="889:25" pos:end="889:25">&amp;</operator><name pos:start="889:26" pos:end="889:37"><name pos:start="889:26" pos:end="889:27">oc</name><operator pos:start="889:28" pos:end="889:29">-&gt;</operator><name pos:start="889:30" pos:end="889:37">metadata</name></name></expr></argument>, <argument pos:start="889:40" pos:end="889:49"><expr pos:start="889:40" pos:end="889:49"><literal type="string" pos:start="889:40" pos:end="889:49">"duration"</literal></expr></argument>, <argument pos:start="889:52" pos:end="889:55"><expr pos:start="889:52" pos:end="889:55"><name pos:start="889:52" pos:end="889:55">NULL</name></expr></argument>, <argument pos:start="889:58" pos:end="889:58"><expr pos:start="889:58" pos:end="889:58"><literal type="number" pos:start="889:58" pos:end="889:58">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="891:9" pos:end="891:61"><expr pos:start="891:9" pos:end="891:60"><call pos:start="891:9" pos:end="891:60"><name pos:start="891:9" pos:end="891:19">av_dict_set</name><argument_list pos:start="891:20" pos:end="891:60">(<argument pos:start="891:21" pos:end="891:33"><expr pos:start="891:21" pos:end="891:33"><operator pos:start="891:21" pos:end="891:21">&amp;</operator><name pos:start="891:22" pos:end="891:33"><name pos:start="891:22" pos:end="891:23">oc</name><operator pos:start="891:24" pos:end="891:25">-&gt;</operator><name pos:start="891:26" pos:end="891:33">metadata</name></name></expr></argument>, <argument pos:start="891:36" pos:end="891:50"><expr pos:start="891:36" pos:end="891:50"><literal type="string" pos:start="891:36" pos:end="891:50">"creation_time"</literal></expr></argument>, <argument pos:start="891:53" pos:end="891:56"><expr pos:start="891:53" pos:end="891:56"><name pos:start="891:53" pos:end="891:56">NULL</name></expr></argument>, <argument pos:start="891:59" pos:end="891:59"><expr pos:start="891:59" pos:end="891:59"><literal type="number" pos:start="891:59" pos:end="891:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="895:5" pos:end="919:9"><if pos:start="895:5" pos:end="919:9">if <condition pos:start="895:8" pos:end="895:36">(<expr pos:start="895:9" pos:end="895:35"><operator pos:start="895:9" pos:end="895:9">!</operator><name pos:start="895:10" pos:end="895:35"><name pos:start="895:10" pos:end="895:10">o</name><operator pos:start="895:11" pos:end="895:12">-&gt;</operator><name pos:start="895:13" pos:end="895:35">metadata_streams_manual</name></name></expr>)</condition><block type="pseudo" pos:start="897:9" pos:end="919:9"><block_content pos:start="897:9" pos:end="919:9">

        <for pos:start="897:9" pos:end="919:9">for <control pos:start="897:13" pos:end="897:59">(<init pos:start="897:14" pos:end="897:31"><expr pos:start="897:14" pos:end="897:30"><name pos:start="897:14" pos:end="897:14">i</name> <operator pos:start="897:16" pos:end="897:16">=</operator> <name pos:start="897:18" pos:end="897:30"><name pos:start="897:18" pos:end="897:19">of</name><operator pos:start="897:20" pos:end="897:21">-&gt;</operator><name pos:start="897:22" pos:end="897:30">ost_index</name></name></expr>;</init> <condition pos:start="897:33" pos:end="897:54"><expr pos:start="897:33" pos:end="897:53"><name pos:start="897:33" pos:end="897:33">i</name> <operator pos:start="897:35" pos:end="897:35">&lt;</operator> <name pos:start="897:37" pos:end="897:53">nb_output_streams</name></expr>;</condition> <incr pos:start="897:56" pos:end="897:58"><expr pos:start="897:56" pos:end="897:58"><name pos:start="897:56" pos:end="897:56">i</name><operator pos:start="897:57" pos:end="897:58">++</operator></expr></incr>)</control> <block pos:start="897:61" pos:end="919:9">{<block_content pos:start="899:13" pos:end="917:13">

            <decl_stmt pos:start="899:13" pos:end="899:29"><decl pos:start="899:13" pos:end="899:28"><type pos:start="899:13" pos:end="899:25"><name pos:start="899:13" pos:end="899:23">InputStream</name> <modifier pos:start="899:25" pos:end="899:25">*</modifier></type><name pos:start="899:26" pos:end="899:28">ist</name></decl>;</decl_stmt>

            <if_stmt pos:start="901:13" pos:end="903:25"><if pos:start="901:13" pos:end="903:25">if <condition pos:start="901:16" pos:end="901:52">(<expr pos:start="901:17" pos:end="901:51"><name pos:start="901:17" pos:end="901:33"><name pos:start="901:17" pos:end="901:30">output_streams</name><index pos:start="901:31" pos:end="901:33">[<expr pos:start="901:32" pos:end="901:32"><name pos:start="901:32" pos:end="901:32">i</name></expr>]</index></name><operator pos:start="901:34" pos:end="901:35">-&gt;</operator><name pos:start="901:36" pos:end="901:47">source_index</name> <operator pos:start="901:49" pos:end="901:49">&lt;</operator> <literal type="number" pos:start="901:51" pos:end="901:51">0</literal></expr>)</condition><block type="pseudo" pos:start="903:17" pos:end="903:25"><block_content pos:start="903:17" pos:end="903:25">         <comment type="block" pos:start="901:62" pos:end="901:103">/* this is true e.g. for attached files */</comment>

                <continue pos:start="903:17" pos:end="903:25">continue;</continue></block_content></block></if></if_stmt>

            <expr_stmt pos:start="905:13" pos:end="905:65"><expr pos:start="905:13" pos:end="905:64"><name pos:start="905:13" pos:end="905:15">ist</name> <operator pos:start="905:17" pos:end="905:17">=</operator> <name pos:start="905:19" pos:end="905:64"><name pos:start="905:19" pos:end="905:31">input_streams</name><index pos:start="905:32" pos:end="905:64">[<expr pos:start="905:33" pos:end="905:63"><name pos:start="905:33" pos:end="905:49"><name pos:start="905:33" pos:end="905:46">output_streams</name><index pos:start="905:47" pos:end="905:49">[<expr pos:start="905:48" pos:end="905:48"><name pos:start="905:48" pos:end="905:48">i</name></expr>]</index></name><operator pos:start="905:50" pos:end="905:51">-&gt;</operator><name pos:start="905:52" pos:end="905:63">source_index</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="907:13" pos:end="907:102"><expr pos:start="907:13" pos:end="907:101"><call pos:start="907:13" pos:end="907:101"><name pos:start="907:13" pos:end="907:24">av_dict_copy</name><argument_list pos:start="907:25" pos:end="907:101">(<argument pos:start="907:26" pos:end="907:57"><expr pos:start="907:26" pos:end="907:57"><operator pos:start="907:26" pos:end="907:26">&amp;</operator><name pos:start="907:27" pos:end="907:43"><name pos:start="907:27" pos:end="907:40">output_streams</name><index pos:start="907:41" pos:end="907:43">[<expr pos:start="907:42" pos:end="907:42"><name pos:start="907:42" pos:end="907:42">i</name></expr>]</index></name><operator pos:start="907:44" pos:end="907:45">-&gt;</operator><name pos:start="907:46" pos:end="907:57"><name pos:start="907:46" pos:end="907:47">st</name><operator pos:start="907:48" pos:end="907:49">-&gt;</operator><name pos:start="907:50" pos:end="907:57">metadata</name></name></expr></argument>, <argument pos:start="907:60" pos:end="907:76"><expr pos:start="907:60" pos:end="907:76"><name pos:start="907:60" pos:end="907:76"><name pos:start="907:60" pos:end="907:62">ist</name><operator pos:start="907:63" pos:end="907:64">-&gt;</operator><name pos:start="907:65" pos:end="907:66">st</name><operator pos:start="907:67" pos:end="907:68">-&gt;</operator><name pos:start="907:69" pos:end="907:76">metadata</name></name></expr></argument>, <argument pos:start="907:79" pos:end="907:100"><expr pos:start="907:79" pos:end="907:100"><name pos:start="907:79" pos:end="907:100">AV_DICT_DONT_OVERWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="909:13" pos:end="917:13"><if pos:start="909:13" pos:end="917:13">if <condition pos:start="909:16" pos:end="909:48">(<expr pos:start="909:17" pos:end="909:47"><operator pos:start="909:17" pos:end="909:17">!</operator><name pos:start="909:18" pos:end="909:34"><name pos:start="909:18" pos:end="909:31">output_streams</name><index pos:start="909:32" pos:end="909:34">[<expr pos:start="909:33" pos:end="909:33"><name pos:start="909:33" pos:end="909:33">i</name></expr>]</index></name><operator pos:start="909:35" pos:end="909:36">-&gt;</operator><name pos:start="909:37" pos:end="909:47">stream_copy</name></expr>)</condition> <block pos:start="909:50" pos:end="917:13">{<block_content pos:start="911:17" pos:end="915:85">

                <expr_stmt pos:start="911:17" pos:end="911:82"><expr pos:start="911:17" pos:end="911:81"><call pos:start="911:17" pos:end="911:81"><name pos:start="911:17" pos:end="911:27">av_dict_set</name><argument_list pos:start="911:28" pos:end="911:81">(<argument pos:start="911:29" pos:end="911:60"><expr pos:start="911:29" pos:end="911:60"><operator pos:start="911:29" pos:end="911:29">&amp;</operator><name pos:start="911:30" pos:end="911:46"><name pos:start="911:30" pos:end="911:43">output_streams</name><index pos:start="911:44" pos:end="911:46">[<expr pos:start="911:45" pos:end="911:45"><name pos:start="911:45" pos:end="911:45">i</name></expr>]</index></name><operator pos:start="911:47" pos:end="911:48">-&gt;</operator><name pos:start="911:49" pos:end="911:60"><name pos:start="911:49" pos:end="911:50">st</name><operator pos:start="911:51" pos:end="911:52">-&gt;</operator><name pos:start="911:53" pos:end="911:60">metadata</name></name></expr></argument>, <argument pos:start="911:63" pos:end="911:71"><expr pos:start="911:63" pos:end="911:71"><literal type="string" pos:start="911:63" pos:end="911:71">"encoder"</literal></expr></argument>, <argument pos:start="911:74" pos:end="911:77"><expr pos:start="911:74" pos:end="911:77"><name pos:start="911:74" pos:end="911:77">NULL</name></expr></argument>, <argument pos:start="911:80" pos:end="911:80"><expr pos:start="911:80" pos:end="911:80"><literal type="number" pos:start="911:80" pos:end="911:80">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="913:17" pos:end="915:85"><if pos:start="913:17" pos:end="915:85">if <condition pos:start="913:20" pos:end="913:36">(<expr pos:start="913:21" pos:end="913:35"><name pos:start="913:21" pos:end="913:35"><name pos:start="913:21" pos:end="913:23">ist</name><operator pos:start="913:24" pos:end="913:25">-&gt;</operator><name pos:start="913:26" pos:end="913:35">autorotate</name></name></expr>)</condition><block type="pseudo" pos:start="915:21" pos:end="915:85"><block_content pos:start="915:21" pos:end="915:85">

                    <expr_stmt pos:start="915:21" pos:end="915:85"><expr pos:start="915:21" pos:end="915:84"><call pos:start="915:21" pos:end="915:84"><name pos:start="915:21" pos:end="915:31">av_dict_set</name><argument_list pos:start="915:32" pos:end="915:84">(<argument pos:start="915:33" pos:end="915:64"><expr pos:start="915:33" pos:end="915:64"><operator pos:start="915:33" pos:end="915:33">&amp;</operator><name pos:start="915:34" pos:end="915:50"><name pos:start="915:34" pos:end="915:47">output_streams</name><index pos:start="915:48" pos:end="915:50">[<expr pos:start="915:49" pos:end="915:49"><name pos:start="915:49" pos:end="915:49">i</name></expr>]</index></name><operator pos:start="915:51" pos:end="915:52">-&gt;</operator><name pos:start="915:53" pos:end="915:64"><name pos:start="915:53" pos:end="915:54">st</name><operator pos:start="915:55" pos:end="915:56">-&gt;</operator><name pos:start="915:57" pos:end="915:64">metadata</name></name></expr></argument>, <argument pos:start="915:67" pos:end="915:74"><expr pos:start="915:67" pos:end="915:74"><literal type="string" pos:start="915:67" pos:end="915:74">"rotate"</literal></expr></argument>, <argument pos:start="915:77" pos:end="915:80"><expr pos:start="915:77" pos:end="915:80"><name pos:start="915:77" pos:end="915:80">NULL</name></expr></argument>, <argument pos:start="915:83" pos:end="915:83"><expr pos:start="915:83" pos:end="915:83"><literal type="number" pos:start="915:83" pos:end="915:83">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for></block_content></block></if></if_stmt>



    <comment type="block" pos:start="923:5" pos:end="923:39">/* process manually set programs */</comment>

    <for pos:start="925:5" pos:end="1031:5">for <control pos:start="925:9" pos:end="925:39">(<init pos:start="925:10" pos:end="925:15"><expr pos:start="925:10" pos:end="925:14"><name pos:start="925:10" pos:end="925:10">i</name> <operator pos:start="925:12" pos:end="925:12">=</operator> <literal type="number" pos:start="925:14" pos:end="925:14">0</literal></expr>;</init> <condition pos:start="925:17" pos:end="925:34"><expr pos:start="925:17" pos:end="925:33"><name pos:start="925:17" pos:end="925:17">i</name> <operator pos:start="925:19" pos:end="925:19">&lt;</operator> <name pos:start="925:21" pos:end="925:33"><name pos:start="925:21" pos:end="925:21">o</name><operator pos:start="925:22" pos:end="925:23">-&gt;</operator><name pos:start="925:24" pos:end="925:33">nb_program</name></name></expr>;</condition> <incr pos:start="925:36" pos:end="925:38"><expr pos:start="925:36" pos:end="925:38"><name pos:start="925:36" pos:end="925:36">i</name><operator pos:start="925:37" pos:end="925:38">++</operator></expr></incr>)</control> <block pos:start="925:41" pos:end="1031:5">{<block_content pos:start="927:9" pos:end="1029:9">

        <decl_stmt pos:start="927:9" pos:end="927:44"><decl pos:start="927:9" pos:end="927:43"><type pos:start="927:9" pos:end="927:20"><specifier pos:start="927:9" pos:end="927:13">const</specifier> <name pos:start="927:15" pos:end="927:18">char</name> <modifier pos:start="927:20" pos:end="927:20">*</modifier></type><name pos:start="927:21" pos:end="927:21">p</name> <init pos:start="927:23" pos:end="927:43">= <expr pos:start="927:25" pos:end="927:43"><name pos:start="927:25" pos:end="927:37"><name pos:start="927:25" pos:end="927:25">o</name><operator pos:start="927:26" pos:end="927:27">-&gt;</operator><name pos:start="927:28" pos:end="927:34">program</name><index pos:start="927:35" pos:end="927:37">[<expr pos:start="927:36" pos:end="927:36"><name pos:start="927:36" pos:end="927:36">i</name></expr>]</index></name><operator pos:start="927:38" pos:end="927:38">.</operator><name pos:start="927:39" pos:end="927:43"><name pos:start="927:39" pos:end="927:39">u</name><operator pos:start="927:40" pos:end="927:40">.</operator><name pos:start="927:41" pos:end="927:43">str</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="929:9" pos:end="929:25"><decl pos:start="929:9" pos:end="929:24"><type pos:start="929:9" pos:end="929:11"><name pos:start="929:9" pos:end="929:11">int</name></type> <name pos:start="929:13" pos:end="929:18">progid</name> <init pos:start="929:20" pos:end="929:24">= <expr pos:start="929:22" pos:end="929:24"><name pos:start="929:22" pos:end="929:22">i</name><operator pos:start="929:23" pos:end="929:23">+</operator><literal type="number" pos:start="929:24" pos:end="929:24">1</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="931:9" pos:end="931:27"><decl pos:start="931:9" pos:end="931:26"><type pos:start="931:9" pos:end="931:19"><name pos:start="931:9" pos:end="931:17">AVProgram</name> <modifier pos:start="931:19" pos:end="931:19">*</modifier></type><name pos:start="931:20" pos:end="931:26">program</name></decl>;</decl_stmt>



        <while pos:start="935:9" pos:end="963:9">while<condition pos:start="935:14" pos:end="935:17">(<expr pos:start="935:15" pos:end="935:16"><operator pos:start="935:15" pos:end="935:15">*</operator><name pos:start="935:16" pos:end="935:16">p</name></expr>)</condition> <block pos:start="935:19" pos:end="963:9">{<block_content pos:start="937:13" pos:end="961:45">

            <decl_stmt pos:start="937:13" pos:end="937:51"><decl pos:start="937:13" pos:end="937:50"><type pos:start="937:13" pos:end="937:24"><specifier pos:start="937:13" pos:end="937:17">const</specifier> <name pos:start="937:19" pos:end="937:22">char</name> <modifier pos:start="937:24" pos:end="937:24">*</modifier></type><name pos:start="937:25" pos:end="937:26">p2</name> <init pos:start="937:28" pos:end="937:50">= <expr pos:start="937:30" pos:end="937:50"><call pos:start="937:30" pos:end="937:50"><name pos:start="937:30" pos:end="937:41">av_get_token</name><argument_list pos:start="937:42" pos:end="937:50">(<argument pos:start="937:43" pos:end="937:44"><expr pos:start="937:43" pos:end="937:44"><operator pos:start="937:43" pos:end="937:43">&amp;</operator><name pos:start="937:44" pos:end="937:44">p</name></expr></argument>, <argument pos:start="937:47" pos:end="937:49"><expr pos:start="937:47" pos:end="937:49"><literal type="string" pos:start="937:47" pos:end="937:49">":"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="939:13" pos:end="939:22"><decl pos:start="939:13" pos:end="939:21"><type pos:start="939:13" pos:end="939:18"><name pos:start="939:13" pos:end="939:16">char</name> <modifier pos:start="939:18" pos:end="939:18">*</modifier></type><name pos:start="939:19" pos:end="939:21">key</name></decl>;</decl_stmt>

            <if_stmt pos:start="941:13" pos:end="943:22"><if pos:start="941:13" pos:end="943:22">if <condition pos:start="941:16" pos:end="941:20">(<expr pos:start="941:17" pos:end="941:19"><operator pos:start="941:17" pos:end="941:17">!</operator><name pos:start="941:18" pos:end="941:19">p2</name></expr>)</condition><block type="pseudo" pos:start="943:17" pos:end="943:22"><block_content pos:start="943:17" pos:end="943:22">

                <break pos:start="943:17" pos:end="943:22">break;</break></block_content></block></if></if_stmt>

            <if_stmt pos:start="945:13" pos:end="945:23"><if pos:start="945:13" pos:end="945:23">if<condition pos:start="945:15" pos:end="945:18">(<expr pos:start="945:16" pos:end="945:17"><operator pos:start="945:16" pos:end="945:16">*</operator><name pos:start="945:17" pos:end="945:17">p</name></expr>)</condition><block type="pseudo" pos:start="945:20" pos:end="945:23"><block_content pos:start="945:20" pos:end="945:23"> <expr_stmt pos:start="945:20" pos:end="945:23"><expr pos:start="945:20" pos:end="945:22"><name pos:start="945:20" pos:end="945:20">p</name><operator pos:start="945:21" pos:end="945:22">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="949:13" pos:end="949:41"><expr pos:start="949:13" pos:end="949:40"><name pos:start="949:13" pos:end="949:15">key</name> <operator pos:start="949:17" pos:end="949:17">=</operator> <call pos:start="949:19" pos:end="949:40"><name pos:start="949:19" pos:end="949:30">av_get_token</name><argument_list pos:start="949:31" pos:end="949:40">(<argument pos:start="949:32" pos:end="949:34"><expr pos:start="949:32" pos:end="949:34"><operator pos:start="949:32" pos:end="949:32">&amp;</operator><name pos:start="949:33" pos:end="949:34">p2</name></expr></argument>, <argument pos:start="949:37" pos:end="949:39"><expr pos:start="949:37" pos:end="949:39"><literal type="string" pos:start="949:37" pos:end="949:39">"="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="951:13" pos:end="953:22"><if pos:start="951:13" pos:end="953:22">if <condition pos:start="951:16" pos:end="951:29">(<expr pos:start="951:17" pos:end="951:28"><operator pos:start="951:17" pos:end="951:17">!</operator><name pos:start="951:18" pos:end="951:20">key</name> <operator pos:start="951:22" pos:end="951:23">||</operator> <operator pos:start="951:25" pos:end="951:25">!</operator><operator pos:start="951:26" pos:end="951:26">*</operator><name pos:start="951:27" pos:end="951:28">p2</name></expr>)</condition><block type="pseudo" pos:start="953:17" pos:end="953:22"><block_content pos:start="953:17" pos:end="953:22">

                <break pos:start="953:17" pos:end="953:22">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="955:13" pos:end="955:17"><expr pos:start="955:13" pos:end="955:16"><name pos:start="955:13" pos:end="955:14">p2</name><operator pos:start="955:15" pos:end="955:16">++</operator></expr>;</expr_stmt>



            <if_stmt pos:start="959:13" pos:end="961:45"><if pos:start="959:13" pos:end="961:45">if <condition pos:start="959:16" pos:end="959:44">(<expr pos:start="959:17" pos:end="959:43"><operator pos:start="959:17" pos:end="959:17">!</operator><call pos:start="959:18" pos:end="959:43"><name pos:start="959:18" pos:end="959:23">strcmp</name><argument_list pos:start="959:24" pos:end="959:43">(<argument pos:start="959:25" pos:end="959:27"><expr pos:start="959:25" pos:end="959:27"><name pos:start="959:25" pos:end="959:27">key</name></expr></argument>, <argument pos:start="959:30" pos:end="959:42"><expr pos:start="959:30" pos:end="959:42"><literal type="string" pos:start="959:30" pos:end="959:42">"program_num"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="961:17" pos:end="961:45"><block_content pos:start="961:17" pos:end="961:45">

                <expr_stmt pos:start="961:17" pos:end="961:45"><expr pos:start="961:17" pos:end="961:44"><name pos:start="961:17" pos:end="961:22">progid</name> <operator pos:start="961:24" pos:end="961:24">=</operator> <call pos:start="961:26" pos:end="961:44"><name pos:start="961:26" pos:end="961:31">strtol</name><argument_list pos:start="961:32" pos:end="961:44">(<argument pos:start="961:33" pos:end="961:34"><expr pos:start="961:33" pos:end="961:34"><name pos:start="961:33" pos:end="961:34">p2</name></expr></argument>, <argument pos:start="961:37" pos:end="961:40"><expr pos:start="961:37" pos:end="961:40"><name pos:start="961:37" pos:end="961:40">NULL</name></expr></argument>, <argument pos:start="961:43" pos:end="961:43"><expr pos:start="961:43" pos:end="961:43"><literal type="number" pos:start="961:43" pos:end="961:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></while>



        <expr_stmt pos:start="967:9" pos:end="967:45"><expr pos:start="967:9" pos:end="967:44"><name pos:start="967:9" pos:end="967:15">program</name> <operator pos:start="967:17" pos:end="967:17">=</operator> <call pos:start="967:19" pos:end="967:44"><name pos:start="967:19" pos:end="967:32">av_new_program</name><argument_list pos:start="967:33" pos:end="967:44">(<argument pos:start="967:34" pos:end="967:35"><expr pos:start="967:34" pos:end="967:35"><name pos:start="967:34" pos:end="967:35">oc</name></expr></argument>, <argument pos:start="967:38" pos:end="967:43"><expr pos:start="967:38" pos:end="967:43"><name pos:start="967:38" pos:end="967:43">progid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="971:9" pos:end="971:32"><expr pos:start="971:9" pos:end="971:31"><name pos:start="971:9" pos:end="971:9">p</name> <operator pos:start="971:11" pos:end="971:11">=</operator> <name pos:start="971:13" pos:end="971:25"><name pos:start="971:13" pos:end="971:13">o</name><operator pos:start="971:14" pos:end="971:15">-&gt;</operator><name pos:start="971:16" pos:end="971:22">program</name><index pos:start="971:23" pos:end="971:25">[<expr pos:start="971:24" pos:end="971:24"><name pos:start="971:24" pos:end="971:24">i</name></expr>]</index></name><operator pos:start="971:26" pos:end="971:26">.</operator><name pos:start="971:27" pos:end="971:31"><name pos:start="971:27" pos:end="971:27">u</name><operator pos:start="971:28" pos:end="971:28">.</operator><name pos:start="971:29" pos:end="971:31">str</name></name></expr>;</expr_stmt>

        <while pos:start="973:9" pos:end="1029:9">while<condition pos:start="973:14" pos:end="973:17">(<expr pos:start="973:15" pos:end="973:16"><operator pos:start="973:15" pos:end="973:15">*</operator><name pos:start="973:16" pos:end="973:16">p</name></expr>)</condition> <block pos:start="973:19" pos:end="1029:9">{<block_content pos:start="975:13" pos:end="1027:13">

            <decl_stmt pos:start="975:13" pos:end="975:51"><decl pos:start="975:13" pos:end="975:50"><type pos:start="975:13" pos:end="975:24"><specifier pos:start="975:13" pos:end="975:17">const</specifier> <name pos:start="975:19" pos:end="975:22">char</name> <modifier pos:start="975:24" pos:end="975:24">*</modifier></type><name pos:start="975:25" pos:end="975:26">p2</name> <init pos:start="975:28" pos:end="975:50">= <expr pos:start="975:30" pos:end="975:50"><call pos:start="975:30" pos:end="975:50"><name pos:start="975:30" pos:end="975:41">av_get_token</name><argument_list pos:start="975:42" pos:end="975:50">(<argument pos:start="975:43" pos:end="975:44"><expr pos:start="975:43" pos:end="975:44"><operator pos:start="975:43" pos:end="975:43">&amp;</operator><name pos:start="975:44" pos:end="975:44">p</name></expr></argument>, <argument pos:start="975:47" pos:end="975:49"><expr pos:start="975:47" pos:end="975:49"><literal type="string" pos:start="975:47" pos:end="975:49">":"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="977:13" pos:end="977:22"><decl pos:start="977:13" pos:end="977:21"><type pos:start="977:13" pos:end="977:18"><name pos:start="977:13" pos:end="977:16">char</name> <modifier pos:start="977:18" pos:end="977:18">*</modifier></type><name pos:start="977:19" pos:end="977:21">key</name></decl>;</decl_stmt>

            <if_stmt pos:start="979:13" pos:end="981:22"><if pos:start="979:13" pos:end="981:22">if <condition pos:start="979:16" pos:end="979:20">(<expr pos:start="979:17" pos:end="979:19"><operator pos:start="979:17" pos:end="979:17">!</operator><name pos:start="979:18" pos:end="979:19">p2</name></expr>)</condition><block type="pseudo" pos:start="981:17" pos:end="981:22"><block_content pos:start="981:17" pos:end="981:22">

                <break pos:start="981:17" pos:end="981:22">break;</break></block_content></block></if></if_stmt>

            <if_stmt pos:start="983:13" pos:end="983:23"><if pos:start="983:13" pos:end="983:23">if<condition pos:start="983:15" pos:end="983:18">(<expr pos:start="983:16" pos:end="983:17"><operator pos:start="983:16" pos:end="983:16">*</operator><name pos:start="983:17" pos:end="983:17">p</name></expr>)</condition><block type="pseudo" pos:start="983:20" pos:end="983:23"><block_content pos:start="983:20" pos:end="983:23"> <expr_stmt pos:start="983:20" pos:end="983:23"><expr pos:start="983:20" pos:end="983:22"><name pos:start="983:20" pos:end="983:20">p</name><operator pos:start="983:21" pos:end="983:22">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="987:13" pos:end="987:41"><expr pos:start="987:13" pos:end="987:40"><name pos:start="987:13" pos:end="987:15">key</name> <operator pos:start="987:17" pos:end="987:17">=</operator> <call pos:start="987:19" pos:end="987:40"><name pos:start="987:19" pos:end="987:30">av_get_token</name><argument_list pos:start="987:31" pos:end="987:40">(<argument pos:start="987:32" pos:end="987:34"><expr pos:start="987:32" pos:end="987:34"><operator pos:start="987:32" pos:end="987:32">&amp;</operator><name pos:start="987:33" pos:end="987:34">p2</name></expr></argument>, <argument pos:start="987:37" pos:end="987:39"><expr pos:start="987:37" pos:end="987:39"><literal type="string" pos:start="987:37" pos:end="987:39">"="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="989:13" pos:end="999:13"><if pos:start="989:13" pos:end="999:13">if <condition pos:start="989:16" pos:end="989:21">(<expr pos:start="989:17" pos:end="989:20"><operator pos:start="989:17" pos:end="989:17">!</operator><name pos:start="989:18" pos:end="989:20">key</name></expr>)</condition> <block pos:start="989:23" pos:end="999:13">{<block_content pos:start="991:17" pos:end="997:32">

                <expr_stmt pos:start="991:17" pos:end="995:27"><expr pos:start="991:17" pos:end="995:26"><call pos:start="991:17" pos:end="995:26"><name pos:start="991:17" pos:end="991:22">av_log</name><argument_list pos:start="991:23" pos:end="995:26">(<argument pos:start="991:24" pos:end="991:27"><expr pos:start="991:24" pos:end="991:27"><name pos:start="991:24" pos:end="991:27">NULL</name></expr></argument>, <argument pos:start="991:30" pos:end="991:41"><expr pos:start="991:30" pos:end="991:41"><name pos:start="991:30" pos:end="991:41">AV_LOG_FATAL</name></expr></argument>,

                       <argument pos:start="993:24" pos:end="993:65"><expr pos:start="993:24" pos:end="993:65"><literal type="string" pos:start="993:24" pos:end="993:65">"No '=' character in program string %s.\n"</literal></expr></argument>,

                       <argument pos:start="995:24" pos:end="995:25"><expr pos:start="995:24" pos:end="995:25"><name pos:start="995:24" pos:end="995:25">p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="997:17" pos:end="997:32"><expr pos:start="997:17" pos:end="997:31"><call pos:start="997:17" pos:end="997:31"><name pos:start="997:17" pos:end="997:28">exit_program</name><argument_list pos:start="997:29" pos:end="997:31">(<argument pos:start="997:30" pos:end="997:30"><expr pos:start="997:30" pos:end="997:30"><literal type="number" pos:start="997:30" pos:end="997:30">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="1001:13" pos:end="1003:32"><if pos:start="1001:13" pos:end="1003:32">if <condition pos:start="1001:16" pos:end="1001:21">(<expr pos:start="1001:17" pos:end="1001:20"><operator pos:start="1001:17" pos:end="1001:17">!</operator><operator pos:start="1001:18" pos:end="1001:18">*</operator><name pos:start="1001:19" pos:end="1001:20">p2</name></expr>)</condition><block type="pseudo" pos:start="1003:17" pos:end="1003:32"><block_content pos:start="1003:17" pos:end="1003:32">

                <expr_stmt pos:start="1003:17" pos:end="1003:32"><expr pos:start="1003:17" pos:end="1003:31"><call pos:start="1003:17" pos:end="1003:31"><name pos:start="1003:17" pos:end="1003:28">exit_program</name><argument_list pos:start="1003:29" pos:end="1003:31">(<argument pos:start="1003:30" pos:end="1003:30"><expr pos:start="1003:30" pos:end="1003:30"><literal type="number" pos:start="1003:30" pos:end="1003:30">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1005:13" pos:end="1005:17"><expr pos:start="1005:13" pos:end="1005:16"><name pos:start="1005:13" pos:end="1005:14">p2</name><operator pos:start="1005:15" pos:end="1005:16">++</operator></expr>;</expr_stmt>



            <if_stmt pos:start="1009:13" pos:end="1027:13"><if pos:start="1009:13" pos:end="1013:13">if <condition pos:start="1009:16" pos:end="1009:38">(<expr pos:start="1009:17" pos:end="1009:37"><operator pos:start="1009:17" pos:end="1009:17">!</operator><call pos:start="1009:18" pos:end="1009:37"><name pos:start="1009:18" pos:end="1009:23">strcmp</name><argument_list pos:start="1009:24" pos:end="1009:37">(<argument pos:start="1009:25" pos:end="1009:27"><expr pos:start="1009:25" pos:end="1009:27"><name pos:start="1009:25" pos:end="1009:27">key</name></expr></argument>, <argument pos:start="1009:30" pos:end="1009:36"><expr pos:start="1009:30" pos:end="1009:36"><literal type="string" pos:start="1009:30" pos:end="1009:36">"title"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1009:40" pos:end="1013:13">{<block_content pos:start="1011:17" pos:end="1011:64">

                <expr_stmt pos:start="1011:17" pos:end="1011:64"><expr pos:start="1011:17" pos:end="1011:63"><call pos:start="1011:17" pos:end="1011:63"><name pos:start="1011:17" pos:end="1011:27">av_dict_set</name><argument_list pos:start="1011:28" pos:end="1011:63">(<argument pos:start="1011:29" pos:end="1011:46"><expr pos:start="1011:29" pos:end="1011:46"><operator pos:start="1011:29" pos:end="1011:29">&amp;</operator><name pos:start="1011:30" pos:end="1011:46"><name pos:start="1011:30" pos:end="1011:36">program</name><operator pos:start="1011:37" pos:end="1011:38">-&gt;</operator><name pos:start="1011:39" pos:end="1011:46">metadata</name></name></expr></argument>, <argument pos:start="1011:49" pos:end="1011:55"><expr pos:start="1011:49" pos:end="1011:55"><literal type="string" pos:start="1011:49" pos:end="1011:55">"title"</literal></expr></argument>, <argument pos:start="1011:58" pos:end="1011:59"><expr pos:start="1011:58" pos:end="1011:59"><name pos:start="1011:58" pos:end="1011:59">p2</name></expr></argument>, <argument pos:start="1011:62" pos:end="1011:62"><expr pos:start="1011:62" pos:end="1011:62"><literal type="number" pos:start="1011:62" pos:end="1011:62">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="1013:15" pos:end="1015:13">else if <condition pos:start="1013:23" pos:end="1013:51">(<expr pos:start="1013:24" pos:end="1013:50"><operator pos:start="1013:24" pos:end="1013:24">!</operator><call pos:start="1013:25" pos:end="1013:50"><name pos:start="1013:25" pos:end="1013:30">strcmp</name><argument_list pos:start="1013:31" pos:end="1013:50">(<argument pos:start="1013:32" pos:end="1013:34"><expr pos:start="1013:32" pos:end="1013:34"><name pos:start="1013:32" pos:end="1013:34">key</name></expr></argument>, <argument pos:start="1013:37" pos:end="1013:49"><expr pos:start="1013:37" pos:end="1013:49"><literal type="string" pos:start="1013:37" pos:end="1013:49">"program_num"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1013:53" pos:end="1015:13">{<block_content>

            </block_content>}</block></if> <if type="elseif" pos:start="1015:15" pos:end="1021:13">else if <condition pos:start="1015:23" pos:end="1015:42">(<expr pos:start="1015:24" pos:end="1015:41"><operator pos:start="1015:24" pos:end="1015:24">!</operator><call pos:start="1015:25" pos:end="1015:41"><name pos:start="1015:25" pos:end="1015:30">strcmp</name><argument_list pos:start="1015:31" pos:end="1015:41">(<argument pos:start="1015:32" pos:end="1015:34"><expr pos:start="1015:32" pos:end="1015:34"><name pos:start="1015:32" pos:end="1015:34">key</name></expr></argument>, <argument pos:start="1015:37" pos:end="1015:40"><expr pos:start="1015:37" pos:end="1015:40"><literal type="string" pos:start="1015:37" pos:end="1015:40">"st"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1015:44" pos:end="1021:13">{<block_content pos:start="1017:17" pos:end="1019:64">

                <decl_stmt pos:start="1017:17" pos:end="1017:49"><decl pos:start="1017:17" pos:end="1017:48"><type pos:start="1017:17" pos:end="1017:19"><name pos:start="1017:17" pos:end="1017:19">int</name></type> <name pos:start="1017:21" pos:end="1017:26">st_num</name> <init pos:start="1017:28" pos:end="1017:48">= <expr pos:start="1017:30" pos:end="1017:48"><call pos:start="1017:30" pos:end="1017:48"><name pos:start="1017:30" pos:end="1017:35">strtol</name><argument_list pos:start="1017:36" pos:end="1017:48">(<argument pos:start="1017:37" pos:end="1017:38"><expr pos:start="1017:37" pos:end="1017:38"><name pos:start="1017:37" pos:end="1017:38">p2</name></expr></argument>, <argument pos:start="1017:41" pos:end="1017:44"><expr pos:start="1017:41" pos:end="1017:44"><name pos:start="1017:41" pos:end="1017:44">NULL</name></expr></argument>, <argument pos:start="1017:47" pos:end="1017:47"><expr pos:start="1017:47" pos:end="1017:47"><literal type="number" pos:start="1017:47" pos:end="1017:47">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="1019:17" pos:end="1019:64"><expr pos:start="1019:17" pos:end="1019:63"><call pos:start="1019:17" pos:end="1019:63"><name pos:start="1019:17" pos:end="1019:43">av_program_add_stream_index</name><argument_list pos:start="1019:44" pos:end="1019:63">(<argument pos:start="1019:45" pos:end="1019:46"><expr pos:start="1019:45" pos:end="1019:46"><name pos:start="1019:45" pos:end="1019:46">oc</name></expr></argument>, <argument pos:start="1019:49" pos:end="1019:54"><expr pos:start="1019:49" pos:end="1019:54"><name pos:start="1019:49" pos:end="1019:54">progid</name></expr></argument>, <argument pos:start="1019:57" pos:end="1019:62"><expr pos:start="1019:57" pos:end="1019:62"><name pos:start="1019:57" pos:end="1019:62">st_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1021:15" pos:end="1027:13">else <block pos:start="1021:20" pos:end="1027:13">{<block_content pos:start="1023:17" pos:end="1025:32">

                <expr_stmt pos:start="1023:17" pos:end="1023:77"><expr pos:start="1023:17" pos:end="1023:76"><call pos:start="1023:17" pos:end="1023:76"><name pos:start="1023:17" pos:end="1023:22">av_log</name><argument_list pos:start="1023:23" pos:end="1023:76">(<argument pos:start="1023:24" pos:end="1023:27"><expr pos:start="1023:24" pos:end="1023:27"><name pos:start="1023:24" pos:end="1023:27">NULL</name></expr></argument>, <argument pos:start="1023:30" pos:end="1023:41"><expr pos:start="1023:30" pos:end="1023:41"><name pos:start="1023:30" pos:end="1023:41">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="1023:44" pos:end="1023:70"><expr pos:start="1023:44" pos:end="1023:70"><literal type="string" pos:start="1023:44" pos:end="1023:70">"Unknown program key %s.\n"</literal></expr></argument>, <argument pos:start="1023:73" pos:end="1023:75"><expr pos:start="1023:73" pos:end="1023:75"><name pos:start="1023:73" pos:end="1023:75">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1025:17" pos:end="1025:32"><expr pos:start="1025:17" pos:end="1025:31"><call pos:start="1025:17" pos:end="1025:31"><name pos:start="1025:17" pos:end="1025:28">exit_program</name><argument_list pos:start="1025:29" pos:end="1025:31">(<argument pos:start="1025:30" pos:end="1025:30"><expr pos:start="1025:30" pos:end="1025:30"><literal type="number" pos:start="1025:30" pos:end="1025:30">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></while>

    </block_content>}</block></for>



    <comment type="block" pos:start="1035:5" pos:end="1035:39">/* process manually set metadata */</comment>

    <for pos:start="1037:5" pos:end="1165:5">for <control pos:start="1037:9" pos:end="1037:40">(<init pos:start="1037:10" pos:end="1037:15"><expr pos:start="1037:10" pos:end="1037:14"><name pos:start="1037:10" pos:end="1037:10">i</name> <operator pos:start="1037:12" pos:end="1037:12">=</operator> <literal type="number" pos:start="1037:14" pos:end="1037:14">0</literal></expr>;</init> <condition pos:start="1037:17" pos:end="1037:35"><expr pos:start="1037:17" pos:end="1037:34"><name pos:start="1037:17" pos:end="1037:17">i</name> <operator pos:start="1037:19" pos:end="1037:19">&lt;</operator> <name pos:start="1037:21" pos:end="1037:34"><name pos:start="1037:21" pos:end="1037:21">o</name><operator pos:start="1037:22" pos:end="1037:23">-&gt;</operator><name pos:start="1037:24" pos:end="1037:34">nb_metadata</name></name></expr>;</condition> <incr pos:start="1037:37" pos:end="1037:39"><expr pos:start="1037:37" pos:end="1037:39"><name pos:start="1037:37" pos:end="1037:37">i</name><operator pos:start="1037:38" pos:end="1037:39">++</operator></expr></incr>)</control> <block pos:start="1037:42" pos:end="1165:5">{<block_content pos:start="1039:9" pos:end="1163:9">

        <decl_stmt pos:start="1039:9" pos:end="1039:25"><decl pos:start="1039:9" pos:end="1039:24"><type pos:start="1039:9" pos:end="1039:23"><name pos:start="1039:9" pos:end="1039:20">AVDictionary</name> <modifier pos:start="1039:22" pos:end="1039:22">*</modifier><modifier pos:start="1039:23" pos:end="1039:23">*</modifier></type><name pos:start="1039:24" pos:end="1039:24">m</name></decl>;</decl_stmt>

        <decl_stmt pos:start="1041:9" pos:end="1041:24"><decl pos:start="1041:9" pos:end="1041:17"><type pos:start="1041:9" pos:end="1041:12"><name pos:start="1041:9" pos:end="1041:12">char</name></type> <name pos:start="1041:14" pos:end="1041:17">type</name></decl>, <decl pos:start="1041:20" pos:end="1041:23"><type ref="prev" pos:start="1041:9" pos:end="1041:12"><modifier pos:start="1041:20" pos:end="1041:20">*</modifier></type><name pos:start="1041:21" pos:end="1041:23">val</name></decl>;</decl_stmt>

        <decl_stmt pos:start="1043:9" pos:end="1043:32"><decl pos:start="1043:9" pos:end="1043:31"><type pos:start="1043:9" pos:end="1043:20"><specifier pos:start="1043:9" pos:end="1043:13">const</specifier> <name pos:start="1043:15" pos:end="1043:18">char</name> <modifier pos:start="1043:20" pos:end="1043:20">*</modifier></type><name pos:start="1043:21" pos:end="1043:31">stream_spec</name></decl>;</decl_stmt>

        <decl_stmt pos:start="1045:9" pos:end="1045:34"><decl pos:start="1045:9" pos:end="1045:21"><type pos:start="1045:9" pos:end="1045:11"><name pos:start="1045:9" pos:end="1045:11">int</name></type> <name pos:start="1045:13" pos:end="1045:17">index</name> <init pos:start="1045:19" pos:end="1045:21">= <expr pos:start="1045:21" pos:end="1045:21"><literal type="number" pos:start="1045:21" pos:end="1045:21">0</literal></expr></init></decl>, <decl pos:start="1045:24" pos:end="1045:24"><type ref="prev" pos:start="1045:9" pos:end="1045:11"/><name pos:start="1045:24" pos:end="1045:24">j</name></decl>, <decl pos:start="1045:27" pos:end="1045:33"><type ref="prev" pos:start="1045:9" pos:end="1045:11"/><name pos:start="1045:27" pos:end="1045:29">ret</name> <init pos:start="1045:31" pos:end="1045:33">= <expr pos:start="1045:33" pos:end="1045:33"><literal type="number" pos:start="1045:33" pos:end="1045:33">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="1047:9" pos:end="1047:27"><decl pos:start="1047:9" pos:end="1047:26"><type pos:start="1047:9" pos:end="1047:12"><name pos:start="1047:9" pos:end="1047:12">char</name></type> <name pos:start="1047:14" pos:end="1047:26"><name pos:start="1047:14" pos:end="1047:21">now_time</name><index pos:start="1047:22" pos:end="1047:26">[<expr pos:start="1047:23" pos:end="1047:25"><literal type="number" pos:start="1047:23" pos:end="1047:25">256</literal></expr>]</index></name></decl>;</decl_stmt>



        <expr_stmt pos:start="1051:9" pos:end="1051:48"><expr pos:start="1051:9" pos:end="1051:47"><name pos:start="1051:9" pos:end="1051:11">val</name> <operator pos:start="1051:13" pos:end="1051:13">=</operator> <call pos:start="1051:15" pos:end="1051:47"><name pos:start="1051:15" pos:end="1051:20">strchr</name><argument_list pos:start="1051:21" pos:end="1051:47">(<argument pos:start="1051:22" pos:end="1051:41"><expr pos:start="1051:22" pos:end="1051:41"><name pos:start="1051:22" pos:end="1051:35"><name pos:start="1051:22" pos:end="1051:22">o</name><operator pos:start="1051:23" pos:end="1051:24">-&gt;</operator><name pos:start="1051:25" pos:end="1051:32">metadata</name><index pos:start="1051:33" pos:end="1051:35">[<expr pos:start="1051:34" pos:end="1051:34"><name pos:start="1051:34" pos:end="1051:34">i</name></expr>]</index></name><operator pos:start="1051:36" pos:end="1051:36">.</operator><name pos:start="1051:37" pos:end="1051:41"><name pos:start="1051:37" pos:end="1051:37">u</name><operator pos:start="1051:38" pos:end="1051:38">.</operator><name pos:start="1051:39" pos:end="1051:41">str</name></name></expr></argument>, <argument pos:start="1051:44" pos:end="1051:46"><expr pos:start="1051:44" pos:end="1051:46"><literal type="char" pos:start="1051:44" pos:end="1051:46">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1053:9" pos:end="1061:9"><if pos:start="1053:9" pos:end="1061:9">if <condition pos:start="1053:12" pos:end="1053:17">(<expr pos:start="1053:13" pos:end="1053:16"><operator pos:start="1053:13" pos:end="1053:13">!</operator><name pos:start="1053:14" pos:end="1053:16">val</name></expr>)</condition> <block pos:start="1053:19" pos:end="1061:9">{<block_content pos:start="1055:13" pos:end="1059:28">

            <expr_stmt pos:start="1055:13" pos:end="1057:41"><expr pos:start="1055:13" pos:end="1057:40"><call pos:start="1055:13" pos:end="1057:40"><name pos:start="1055:13" pos:end="1055:18">av_log</name><argument_list pos:start="1055:19" pos:end="1057:40">(<argument pos:start="1055:20" pos:end="1055:23"><expr pos:start="1055:20" pos:end="1055:23"><name pos:start="1055:20" pos:end="1055:23">NULL</name></expr></argument>, <argument pos:start="1055:26" pos:end="1055:37"><expr pos:start="1055:26" pos:end="1055:37"><name pos:start="1055:26" pos:end="1055:37">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="1055:40" pos:end="1055:82"><expr pos:start="1055:40" pos:end="1055:82"><literal type="string" pos:start="1055:40" pos:end="1055:82">"No '=' character in metadata string %s.\n"</literal></expr></argument>,

                   <argument pos:start="1057:20" pos:end="1057:39"><expr pos:start="1057:20" pos:end="1057:39"><name pos:start="1057:20" pos:end="1057:33"><name pos:start="1057:20" pos:end="1057:20">o</name><operator pos:start="1057:21" pos:end="1057:22">-&gt;</operator><name pos:start="1057:23" pos:end="1057:30">metadata</name><index pos:start="1057:31" pos:end="1057:33">[<expr pos:start="1057:32" pos:end="1057:32"><name pos:start="1057:32" pos:end="1057:32">i</name></expr>]</index></name><operator pos:start="1057:34" pos:end="1057:34">.</operator><name pos:start="1057:35" pos:end="1057:39"><name pos:start="1057:35" pos:end="1057:35">u</name><operator pos:start="1057:36" pos:end="1057:36">.</operator><name pos:start="1057:37" pos:end="1057:39">str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1059:13" pos:end="1059:28"><expr pos:start="1059:13" pos:end="1059:27"><call pos:start="1059:13" pos:end="1059:27"><name pos:start="1059:13" pos:end="1059:24">exit_program</name><argument_list pos:start="1059:25" pos:end="1059:27">(<argument pos:start="1059:26" pos:end="1059:26"><expr pos:start="1059:26" pos:end="1059:26"><literal type="number" pos:start="1059:26" pos:end="1059:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="1063:9" pos:end="1063:19"><expr pos:start="1063:9" pos:end="1063:18"><operator pos:start="1063:9" pos:end="1063:9">*</operator><name pos:start="1063:10" pos:end="1063:12">val</name><operator pos:start="1063:13" pos:end="1063:14">++</operator> <operator pos:start="1063:16" pos:end="1063:16">=</operator> <literal type="number" pos:start="1063:18" pos:end="1063:18">0</literal></expr>;</expr_stmt>



        <if_stmt pos:start="1067:9" pos:end="1085:9"><if pos:start="1067:9" pos:end="1085:9">if <condition pos:start="1067:12" pos:end="1069:32">(<expr pos:start="1067:13" pos:end="1069:31"><operator pos:start="1067:13" pos:end="1067:13">!</operator><call pos:start="1067:14" pos:end="1067:58"><name pos:start="1067:14" pos:end="1067:19">strcmp</name><argument_list pos:start="1067:20" pos:end="1067:58">(<argument pos:start="1067:21" pos:end="1067:40"><expr pos:start="1067:21" pos:end="1067:40"><name pos:start="1067:21" pos:end="1067:34"><name pos:start="1067:21" pos:end="1067:21">o</name><operator pos:start="1067:22" pos:end="1067:23">-&gt;</operator><name pos:start="1067:24" pos:end="1067:31">metadata</name><index pos:start="1067:32" pos:end="1067:34">[<expr pos:start="1067:33" pos:end="1067:33"><name pos:start="1067:33" pos:end="1067:33">i</name></expr>]</index></name><operator pos:start="1067:35" pos:end="1067:35">.</operator><name pos:start="1067:36" pos:end="1067:40"><name pos:start="1067:36" pos:end="1067:36">u</name><operator pos:start="1067:37" pos:end="1067:37">.</operator><name pos:start="1067:38" pos:end="1067:40">str</name></name></expr></argument>, <argument pos:start="1067:43" pos:end="1067:57"><expr pos:start="1067:43" pos:end="1067:57"><literal type="string" pos:start="1067:43" pos:end="1067:57">"creation_time"</literal></expr></argument>)</argument_list></call> <operator pos:start="1067:60" pos:end="1067:61">&amp;&amp;</operator>

            <operator pos:start="1069:13" pos:end="1069:13">!</operator><call pos:start="1069:14" pos:end="1069:31"><name pos:start="1069:14" pos:end="1069:19">strcmp</name><argument_list pos:start="1069:20" pos:end="1069:31">(<argument pos:start="1069:21" pos:end="1069:23"><expr pos:start="1069:21" pos:end="1069:23"><name pos:start="1069:21" pos:end="1069:23">val</name></expr></argument>, <argument pos:start="1069:26" pos:end="1069:30"><expr pos:start="1069:26" pos:end="1069:30"><literal type="string" pos:start="1069:26" pos:end="1069:30">"now"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1069:34" pos:end="1085:9">{<block_content pos:start="1071:13" pos:end="1083:13">

            <decl_stmt pos:start="1071:13" pos:end="1071:33"><decl pos:start="1071:13" pos:end="1071:32"><type pos:start="1071:13" pos:end="1071:18"><name pos:start="1071:13" pos:end="1071:18">time_t</name></type> <name pos:start="1071:20" pos:end="1071:22">now</name> <init pos:start="1071:24" pos:end="1071:32">= <expr pos:start="1071:26" pos:end="1071:32"><call pos:start="1071:26" pos:end="1071:32"><name pos:start="1071:26" pos:end="1071:29">time</name><argument_list pos:start="1071:30" pos:end="1071:32">(<argument pos:start="1071:31" pos:end="1071:31"><expr pos:start="1071:31" pos:end="1071:31"><literal type="number" pos:start="1071:31" pos:end="1071:31">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="1073:13" pos:end="1073:34"><decl pos:start="1073:13" pos:end="1073:26"><type pos:start="1073:13" pos:end="1073:23"><name pos:start="1073:13" pos:end="1073:21"><name pos:start="1073:13" pos:end="1073:18">struct</name> <name pos:start="1073:20" pos:end="1073:21">tm</name></name> <modifier pos:start="1073:23" pos:end="1073:23">*</modifier></type><name pos:start="1073:24" pos:end="1073:26">ptm</name></decl>, <decl pos:start="1073:29" pos:end="1073:33"><type ref="prev" pos:start="1073:13" pos:end="1073:23"/><name pos:start="1073:29" pos:end="1073:33">tmbuf</name></decl>;</decl_stmt>

            <expr_stmt pos:start="1075:13" pos:end="1075:44"><expr pos:start="1075:13" pos:end="1075:43"><name pos:start="1075:13" pos:end="1075:15">ptm</name> <operator pos:start="1075:17" pos:end="1075:17">=</operator> <call pos:start="1075:19" pos:end="1075:43"><name pos:start="1075:19" pos:end="1075:29">localtime_r</name><argument_list pos:start="1075:30" pos:end="1075:43">(<argument pos:start="1075:31" pos:end="1075:34"><expr pos:start="1075:31" pos:end="1075:34"><operator pos:start="1075:31" pos:end="1075:31">&amp;</operator><name pos:start="1075:32" pos:end="1075:34">now</name></expr></argument>, <argument pos:start="1075:37" pos:end="1075:42"><expr pos:start="1075:37" pos:end="1075:42"><operator pos:start="1075:37" pos:end="1075:37">&amp;</operator><name pos:start="1075:38" pos:end="1075:42">tmbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1077:13" pos:end="1083:13"><if pos:start="1077:13" pos:end="1083:13">if <condition pos:start="1077:16" pos:end="1077:20">(<expr pos:start="1077:17" pos:end="1077:19"><name pos:start="1077:17" pos:end="1077:19">ptm</name></expr>)</condition> <block pos:start="1077:22" pos:end="1083:13">{<block_content pos:start="1079:17" pos:end="1081:35">

                <if_stmt pos:start="1079:17" pos:end="1081:35"><if pos:start="1079:17" pos:end="1081:35">if <condition pos:start="1079:20" pos:end="1079:83">(<expr pos:start="1079:21" pos:end="1079:82"><call pos:start="1079:21" pos:end="1079:82"><name pos:start="1079:21" pos:end="1079:28">strftime</name><argument_list pos:start="1079:29" pos:end="1079:82">(<argument pos:start="1079:30" pos:end="1079:37"><expr pos:start="1079:30" pos:end="1079:37"><name pos:start="1079:30" pos:end="1079:37">now_time</name></expr></argument>, <argument pos:start="1079:40" pos:end="1079:55"><expr pos:start="1079:40" pos:end="1079:55"><sizeof pos:start="1079:40" pos:end="1079:55">sizeof<argument_list pos:start="1079:46" pos:end="1079:55">(<argument pos:start="1079:47" pos:end="1079:54"><expr pos:start="1079:47" pos:end="1079:54"><name pos:start="1079:47" pos:end="1079:54">now_time</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1079:58" pos:end="1079:76"><expr pos:start="1079:58" pos:end="1079:76"><literal type="string" pos:start="1079:58" pos:end="1079:76">"%Y-%m-%d %H:%M:%S"</literal></expr></argument>, <argument pos:start="1079:79" pos:end="1079:81"><expr pos:start="1079:79" pos:end="1079:81"><name pos:start="1079:79" pos:end="1079:81">ptm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1081:21" pos:end="1081:35"><block_content pos:start="1081:21" pos:end="1081:35">

                    <expr_stmt pos:start="1081:21" pos:end="1081:35"><expr pos:start="1081:21" pos:end="1081:34"><name pos:start="1081:21" pos:end="1081:23">val</name> <operator pos:start="1081:25" pos:end="1081:25">=</operator> <name pos:start="1081:27" pos:end="1081:34">now_time</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="1089:9" pos:end="1089:79"><expr pos:start="1089:9" pos:end="1089:78"><call pos:start="1089:9" pos:end="1089:78"><name pos:start="1089:9" pos:end="1089:23">parse_meta_type</name><argument_list pos:start="1089:24" pos:end="1089:78">(<argument pos:start="1089:25" pos:end="1089:48"><expr pos:start="1089:25" pos:end="1089:48"><name pos:start="1089:25" pos:end="1089:38"><name pos:start="1089:25" pos:end="1089:25">o</name><operator pos:start="1089:26" pos:end="1089:27">-&gt;</operator><name pos:start="1089:28" pos:end="1089:35">metadata</name><index pos:start="1089:36" pos:end="1089:38">[<expr pos:start="1089:37" pos:end="1089:37"><name pos:start="1089:37" pos:end="1089:37">i</name></expr>]</index></name><operator pos:start="1089:39" pos:end="1089:39">.</operator><name pos:start="1089:40" pos:end="1089:48">specifier</name></expr></argument>, <argument pos:start="1089:51" pos:end="1089:55"><expr pos:start="1089:51" pos:end="1089:55"><operator pos:start="1089:51" pos:end="1089:51">&amp;</operator><name pos:start="1089:52" pos:end="1089:55">type</name></expr></argument>, <argument pos:start="1089:58" pos:end="1089:63"><expr pos:start="1089:58" pos:end="1089:63"><operator pos:start="1089:58" pos:end="1089:58">&amp;</operator><name pos:start="1089:59" pos:end="1089:63">index</name></expr></argument>, <argument pos:start="1089:66" pos:end="1089:77"><expr pos:start="1089:66" pos:end="1089:77"><operator pos:start="1089:66" pos:end="1089:66">&amp;</operator><name pos:start="1089:67" pos:end="1089:77">stream_spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1091:9" pos:end="1163:9"><if pos:start="1091:9" pos:end="1113:9">if <condition pos:start="1091:12" pos:end="1091:24">(<expr pos:start="1091:13" pos:end="1091:23"><name pos:start="1091:13" pos:end="1091:16">type</name> <operator pos:start="1091:18" pos:end="1091:19">==</operator> <literal type="char" pos:start="1091:21" pos:end="1091:23">'s'</literal></expr>)</condition> <block pos:start="1091:26" pos:end="1113:9">{<block_content pos:start="1093:13" pos:end="1111:13">

            <for pos:start="1093:13" pos:end="1111:13">for <control pos:start="1093:17" pos:end="1093:48">(<init pos:start="1093:18" pos:end="1093:23"><expr pos:start="1093:18" pos:end="1093:22"><name pos:start="1093:18" pos:end="1093:18">j</name> <operator pos:start="1093:20" pos:end="1093:20">=</operator> <literal type="number" pos:start="1093:22" pos:end="1093:22">0</literal></expr>;</init> <condition pos:start="1093:25" pos:end="1093:43"><expr pos:start="1093:25" pos:end="1093:42"><name pos:start="1093:25" pos:end="1093:25">j</name> <operator pos:start="1093:27" pos:end="1093:27">&lt;</operator> <name pos:start="1093:29" pos:end="1093:42"><name pos:start="1093:29" pos:end="1093:30">oc</name><operator pos:start="1093:31" pos:end="1093:32">-&gt;</operator><name pos:start="1093:33" pos:end="1093:42">nb_streams</name></name></expr>;</condition> <incr pos:start="1093:45" pos:end="1093:47"><expr pos:start="1093:45" pos:end="1093:47"><name pos:start="1093:45" pos:end="1093:45">j</name><operator pos:start="1093:46" pos:end="1093:47">++</operator></expr></incr>)</control> <block pos:start="1093:50" pos:end="1111:13">{<block_content pos:start="1095:17" pos:end="1109:36">

                <expr_stmt pos:start="1095:17" pos:end="1095:77"><expr pos:start="1095:17" pos:end="1095:76"><name pos:start="1095:17" pos:end="1095:19">ost</name> <operator pos:start="1095:21" pos:end="1095:21">=</operator> <name pos:start="1095:23" pos:end="1095:76"><name pos:start="1095:23" pos:end="1095:36">output_streams</name><index pos:start="1095:37" pos:end="1095:76">[<expr pos:start="1095:38" pos:end="1095:75"><name pos:start="1095:38" pos:end="1095:54">nb_output_streams</name> <operator pos:start="1095:56" pos:end="1095:56">-</operator> <name pos:start="1095:58" pos:end="1095:71"><name pos:start="1095:58" pos:end="1095:59">oc</name><operator pos:start="1095:60" pos:end="1095:61">-&gt;</operator><name pos:start="1095:62" pos:end="1095:71">nb_streams</name></name> <operator pos:start="1095:73" pos:end="1095:73">+</operator> <name pos:start="1095:75" pos:end="1095:75">j</name></expr>]</index></name></expr>;</expr_stmt>

                <if_stmt pos:start="1097:17" pos:end="1109:36"><if pos:start="1097:17" pos:end="1107:17">if <condition pos:start="1097:20" pos:end="1097:88">(<expr pos:start="1097:21" pos:end="1097:87"><operator pos:start="1097:21" pos:end="1097:21">(</operator><name pos:start="1097:22" pos:end="1097:24">ret</name> <operator pos:start="1097:26" pos:end="1097:26">=</operator> <call pos:start="1097:28" pos:end="1097:82"><name pos:start="1097:28" pos:end="1097:49">check_stream_specifier</name><argument_list pos:start="1097:50" pos:end="1097:82">(<argument pos:start="1097:51" pos:end="1097:52"><expr pos:start="1097:51" pos:end="1097:52"><name pos:start="1097:51" pos:end="1097:52">oc</name></expr></argument>, <argument pos:start="1097:55" pos:end="1097:68"><expr pos:start="1097:55" pos:end="1097:68"><name pos:start="1097:55" pos:end="1097:68"><name pos:start="1097:55" pos:end="1097:56">oc</name><operator pos:start="1097:57" pos:end="1097:58">-&gt;</operator><name pos:start="1097:59" pos:end="1097:65">streams</name><index pos:start="1097:66" pos:end="1097:68">[<expr pos:start="1097:67" pos:end="1097:67"><name pos:start="1097:67" pos:end="1097:67">j</name></expr>]</index></name></expr></argument>, <argument pos:start="1097:71" pos:end="1097:81"><expr pos:start="1097:71" pos:end="1097:81"><name pos:start="1097:71" pos:end="1097:81">stream_spec</name></expr></argument>)</argument_list></call><operator pos:start="1097:83" pos:end="1097:83">)</operator> <operator pos:start="1097:85" pos:end="1097:85">&gt;</operator> <literal type="number" pos:start="1097:87" pos:end="1097:87">0</literal></expr>)</condition> <block pos:start="1097:90" pos:end="1107:17">{<block_content pos:start="1099:21" pos:end="1105:21">

                    <expr_stmt pos:start="1099:21" pos:end="1099:103"><expr pos:start="1099:21" pos:end="1099:102"><call pos:start="1099:21" pos:end="1099:102"><name pos:start="1099:21" pos:end="1099:31">av_dict_set</name><argument_list pos:start="1099:32" pos:end="1099:102">(<argument pos:start="1099:33" pos:end="1099:57"><expr pos:start="1099:33" pos:end="1099:57"><operator pos:start="1099:33" pos:end="1099:33">&amp;</operator><name pos:start="1099:34" pos:end="1099:47"><name pos:start="1099:34" pos:end="1099:35">oc</name><operator pos:start="1099:36" pos:end="1099:37">-&gt;</operator><name pos:start="1099:38" pos:end="1099:44">streams</name><index pos:start="1099:45" pos:end="1099:47">[<expr pos:start="1099:46" pos:end="1099:46"><name pos:start="1099:46" pos:end="1099:46">j</name></expr>]</index></name><operator pos:start="1099:48" pos:end="1099:49">-&gt;</operator><name pos:start="1099:50" pos:end="1099:57">metadata</name></expr></argument>, <argument pos:start="1099:60" pos:end="1099:79"><expr pos:start="1099:60" pos:end="1099:79"><name pos:start="1099:60" pos:end="1099:73"><name pos:start="1099:60" pos:end="1099:60">o</name><operator pos:start="1099:61" pos:end="1099:62">-&gt;</operator><name pos:start="1099:63" pos:end="1099:70">metadata</name><index pos:start="1099:71" pos:end="1099:73">[<expr pos:start="1099:72" pos:end="1099:72"><name pos:start="1099:72" pos:end="1099:72">i</name></expr>]</index></name><operator pos:start="1099:74" pos:end="1099:74">.</operator><name pos:start="1099:75" pos:end="1099:79"><name pos:start="1099:75" pos:end="1099:75">u</name><operator pos:start="1099:76" pos:end="1099:76">.</operator><name pos:start="1099:77" pos:end="1099:79">str</name></name></expr></argument>, <argument pos:start="1099:82" pos:end="1099:98"><expr pos:start="1099:82" pos:end="1099:98"><ternary pos:start="1099:82" pos:end="1099:98"><condition pos:start="1099:82" pos:end="1099:87"><expr pos:start="1099:82" pos:end="1099:85"><operator pos:start="1099:82" pos:end="1099:82">*</operator><name pos:start="1099:83" pos:end="1099:85">val</name></expr> ?</condition><then pos:start="1099:89" pos:end="1099:91"> <expr pos:start="1099:89" pos:end="1099:91"><name pos:start="1099:89" pos:end="1099:91">val</name></expr> </then><else pos:start="1099:93" pos:end="1099:98">: <expr pos:start="1099:95" pos:end="1099:98"><name pos:start="1099:95" pos:end="1099:98">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="1099:101" pos:end="1099:101"><expr pos:start="1099:101" pos:end="1099:101"><literal type="number" pos:start="1099:101" pos:end="1099:101">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1101:21" pos:end="1105:21"><if pos:start="1101:21" pos:end="1105:21">if <condition pos:start="1101:24" pos:end="1101:64">(<expr pos:start="1101:25" pos:end="1101:63"><operator pos:start="1101:25" pos:end="1101:25">!</operator><call pos:start="1101:26" pos:end="1101:63"><name pos:start="1101:26" pos:end="1101:31">strcmp</name><argument_list pos:start="1101:32" pos:end="1101:63">(<argument pos:start="1101:33" pos:end="1101:52"><expr pos:start="1101:33" pos:end="1101:52"><name pos:start="1101:33" pos:end="1101:46"><name pos:start="1101:33" pos:end="1101:33">o</name><operator pos:start="1101:34" pos:end="1101:35">-&gt;</operator><name pos:start="1101:36" pos:end="1101:43">metadata</name><index pos:start="1101:44" pos:end="1101:46">[<expr pos:start="1101:45" pos:end="1101:45"><name pos:start="1101:45" pos:end="1101:45">i</name></expr>]</index></name><operator pos:start="1101:47" pos:end="1101:47">.</operator><name pos:start="1101:48" pos:end="1101:52"><name pos:start="1101:48" pos:end="1101:48">u</name><operator pos:start="1101:49" pos:end="1101:49">.</operator><name pos:start="1101:50" pos:end="1101:52">str</name></name></expr></argument>, <argument pos:start="1101:55" pos:end="1101:62"><expr pos:start="1101:55" pos:end="1101:62"><literal type="string" pos:start="1101:55" pos:end="1101:62">"rotate"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1101:66" pos:end="1105:21">{<block_content pos:start="1103:25" pos:end="1103:51">

                        <expr_stmt pos:start="1103:25" pos:end="1103:51"><expr pos:start="1103:25" pos:end="1103:50"><name pos:start="1103:25" pos:end="1103:46"><name pos:start="1103:25" pos:end="1103:27">ost</name><operator pos:start="1103:28" pos:end="1103:29">-&gt;</operator><name pos:start="1103:30" pos:end="1103:46">rotate_overridden</name></name> <operator pos:start="1103:48" pos:end="1103:48">=</operator> <literal type="number" pos:start="1103:50" pos:end="1103:50">1</literal></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="1107:19" pos:end="1109:36">else if <condition pos:start="1107:27" pos:end="1107:35">(<expr pos:start="1107:28" pos:end="1107:34"><name pos:start="1107:28" pos:end="1107:30">ret</name> <operator pos:start="1107:32" pos:end="1107:32">&lt;</operator> <literal type="number" pos:start="1107:34" pos:end="1107:34">0</literal></expr>)</condition><block type="pseudo" pos:start="1109:21" pos:end="1109:36"><block_content pos:start="1109:21" pos:end="1109:36">

                    <expr_stmt pos:start="1109:21" pos:end="1109:36"><expr pos:start="1109:21" pos:end="1109:35"><call pos:start="1109:21" pos:end="1109:35"><name pos:start="1109:21" pos:end="1109:32">exit_program</name><argument_list pos:start="1109:33" pos:end="1109:35">(<argument pos:start="1109:34" pos:end="1109:34"><expr pos:start="1109:34" pos:end="1109:34"><literal type="number" pos:start="1109:34" pos:end="1109:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if>

        <else pos:start="1115:9" pos:end="1163:9">else <block pos:start="1115:14" pos:end="1163:9">{<block_content pos:start="1117:13" pos:end="1161:71">

            <switch pos:start="1117:13" pos:end="1159:13">switch <condition pos:start="1117:20" pos:end="1117:25">(<expr pos:start="1117:21" pos:end="1117:24"><name pos:start="1117:21" pos:end="1117:24">type</name></expr>)</condition> <block pos:start="1117:27" pos:end="1159:13">{<block_content pos:start="1119:13" pos:end="1157:32">

            <case pos:start="1119:13" pos:end="1119:21">case <expr pos:start="1119:18" pos:end="1119:20"><literal type="char" pos:start="1119:18" pos:end="1119:20">'g'</literal></expr>:</case>

                <expr_stmt pos:start="1121:17" pos:end="1121:34"><expr pos:start="1121:17" pos:end="1121:33"><name pos:start="1121:17" pos:end="1121:17">m</name> <operator pos:start="1121:19" pos:end="1121:19">=</operator> <operator pos:start="1121:21" pos:end="1121:21">&amp;</operator><name pos:start="1121:22" pos:end="1121:33"><name pos:start="1121:22" pos:end="1121:23">oc</name><operator pos:start="1121:24" pos:end="1121:25">-&gt;</operator><name pos:start="1121:26" pos:end="1121:33">metadata</name></name></expr>;</expr_stmt>

                <break pos:start="1123:17" pos:end="1123:22">break;</break>

            <case pos:start="1125:13" pos:end="1125:21">case <expr pos:start="1125:18" pos:end="1125:20"><literal type="char" pos:start="1125:18" pos:end="1125:20">'c'</literal></expr>:</case>

                <if_stmt pos:start="1127:17" pos:end="1133:17"><if pos:start="1127:17" pos:end="1133:17">if <condition pos:start="1127:20" pos:end="1127:58">(<expr pos:start="1127:21" pos:end="1127:57"><name pos:start="1127:21" pos:end="1127:25">index</name> <operator pos:start="1127:27" pos:end="1127:27">&lt;</operator> <literal type="number" pos:start="1127:29" pos:end="1127:29">0</literal> <operator pos:start="1127:31" pos:end="1127:32">||</operator> <name pos:start="1127:34" pos:end="1127:38">index</name> <operator pos:start="1127:40" pos:end="1127:41">&gt;=</operator> <name pos:start="1127:43" pos:end="1127:57"><name pos:start="1127:43" pos:end="1127:44">oc</name><operator pos:start="1127:45" pos:end="1127:46">-&gt;</operator><name pos:start="1127:47" pos:end="1127:57">nb_chapters</name></name></expr>)</condition> <block pos:start="1127:60" pos:end="1133:17">{<block_content pos:start="1129:21" pos:end="1131:36">

                    <expr_stmt pos:start="1129:21" pos:end="1129:107"><expr pos:start="1129:21" pos:end="1129:106"><call pos:start="1129:21" pos:end="1129:106"><name pos:start="1129:21" pos:end="1129:26">av_log</name><argument_list pos:start="1129:27" pos:end="1129:106">(<argument pos:start="1129:28" pos:end="1129:31"><expr pos:start="1129:28" pos:end="1129:31"><name pos:start="1129:28" pos:end="1129:31">NULL</name></expr></argument>, <argument pos:start="1129:34" pos:end="1129:45"><expr pos:start="1129:34" pos:end="1129:45"><name pos:start="1129:34" pos:end="1129:45">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="1129:48" pos:end="1129:98"><expr pos:start="1129:48" pos:end="1129:98"><literal type="string" pos:start="1129:48" pos:end="1129:98">"Invalid chapter index %d in metadata specifier.\n"</literal></expr></argument>, <argument pos:start="1129:101" pos:end="1129:105"><expr pos:start="1129:101" pos:end="1129:105"><name pos:start="1129:101" pos:end="1129:105">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1131:21" pos:end="1131:36"><expr pos:start="1131:21" pos:end="1131:35"><call pos:start="1131:21" pos:end="1131:35"><name pos:start="1131:21" pos:end="1131:32">exit_program</name><argument_list pos:start="1131:33" pos:end="1131:35">(<argument pos:start="1131:34" pos:end="1131:34"><expr pos:start="1131:34" pos:end="1131:34"><literal type="number" pos:start="1131:34" pos:end="1131:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1135:17" pos:end="1135:51"><expr pos:start="1135:17" pos:end="1135:50"><name pos:start="1135:17" pos:end="1135:17">m</name> <operator pos:start="1135:19" pos:end="1135:19">=</operator> <operator pos:start="1135:21" pos:end="1135:21">&amp;</operator><name pos:start="1135:22" pos:end="1135:40"><name pos:start="1135:22" pos:end="1135:23">oc</name><operator pos:start="1135:24" pos:end="1135:25">-&gt;</operator><name pos:start="1135:26" pos:end="1135:33">chapters</name><index pos:start="1135:34" pos:end="1135:40">[<expr pos:start="1135:35" pos:end="1135:39"><name pos:start="1135:35" pos:end="1135:39">index</name></expr>]</index></name><operator pos:start="1135:41" pos:end="1135:42">-&gt;</operator><name pos:start="1135:43" pos:end="1135:50">metadata</name></expr>;</expr_stmt>

                <break pos:start="1137:17" pos:end="1137:22">break;</break>

            <case pos:start="1139:13" pos:end="1139:21">case <expr pos:start="1139:18" pos:end="1139:20"><literal type="char" pos:start="1139:18" pos:end="1139:20">'p'</literal></expr>:</case>

                <if_stmt pos:start="1141:17" pos:end="1147:17"><if pos:start="1141:17" pos:end="1147:17">if <condition pos:start="1141:20" pos:end="1141:58">(<expr pos:start="1141:21" pos:end="1141:57"><name pos:start="1141:21" pos:end="1141:25">index</name> <operator pos:start="1141:27" pos:end="1141:27">&lt;</operator> <literal type="number" pos:start="1141:29" pos:end="1141:29">0</literal> <operator pos:start="1141:31" pos:end="1141:32">||</operator> <name pos:start="1141:34" pos:end="1141:38">index</name> <operator pos:start="1141:40" pos:end="1141:41">&gt;=</operator> <name pos:start="1141:43" pos:end="1141:57"><name pos:start="1141:43" pos:end="1141:44">oc</name><operator pos:start="1141:45" pos:end="1141:46">-&gt;</operator><name pos:start="1141:47" pos:end="1141:57">nb_programs</name></name></expr>)</condition> <block pos:start="1141:60" pos:end="1147:17">{<block_content pos:start="1143:21" pos:end="1145:36">

                    <expr_stmt pos:start="1143:21" pos:end="1143:107"><expr pos:start="1143:21" pos:end="1143:106"><call pos:start="1143:21" pos:end="1143:106"><name pos:start="1143:21" pos:end="1143:26">av_log</name><argument_list pos:start="1143:27" pos:end="1143:106">(<argument pos:start="1143:28" pos:end="1143:31"><expr pos:start="1143:28" pos:end="1143:31"><name pos:start="1143:28" pos:end="1143:31">NULL</name></expr></argument>, <argument pos:start="1143:34" pos:end="1143:45"><expr pos:start="1143:34" pos:end="1143:45"><name pos:start="1143:34" pos:end="1143:45">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="1143:48" pos:end="1143:98"><expr pos:start="1143:48" pos:end="1143:98"><literal type="string" pos:start="1143:48" pos:end="1143:98">"Invalid program index %d in metadata specifier.\n"</literal></expr></argument>, <argument pos:start="1143:101" pos:end="1143:105"><expr pos:start="1143:101" pos:end="1143:105"><name pos:start="1143:101" pos:end="1143:105">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1145:21" pos:end="1145:36"><expr pos:start="1145:21" pos:end="1145:35"><call pos:start="1145:21" pos:end="1145:35"><name pos:start="1145:21" pos:end="1145:32">exit_program</name><argument_list pos:start="1145:33" pos:end="1145:35">(<argument pos:start="1145:34" pos:end="1145:34"><expr pos:start="1145:34" pos:end="1145:34"><literal type="number" pos:start="1145:34" pos:end="1145:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1149:17" pos:end="1149:51"><expr pos:start="1149:17" pos:end="1149:50"><name pos:start="1149:17" pos:end="1149:17">m</name> <operator pos:start="1149:19" pos:end="1149:19">=</operator> <operator pos:start="1149:21" pos:end="1149:21">&amp;</operator><name pos:start="1149:22" pos:end="1149:40"><name pos:start="1149:22" pos:end="1149:23">oc</name><operator pos:start="1149:24" pos:end="1149:25">-&gt;</operator><name pos:start="1149:26" pos:end="1149:33">programs</name><index pos:start="1149:34" pos:end="1149:40">[<expr pos:start="1149:35" pos:end="1149:39"><name pos:start="1149:35" pos:end="1149:39">index</name></expr>]</index></name><operator pos:start="1149:41" pos:end="1149:42">-&gt;</operator><name pos:start="1149:43" pos:end="1149:50">metadata</name></expr>;</expr_stmt>

                <break pos:start="1151:17" pos:end="1151:22">break;</break>

            <default pos:start="1153:13" pos:end="1153:20">default:</default>

                <expr_stmt pos:start="1155:17" pos:end="1155:105"><expr pos:start="1155:17" pos:end="1155:104"><call pos:start="1155:17" pos:end="1155:104"><name pos:start="1155:17" pos:end="1155:22">av_log</name><argument_list pos:start="1155:23" pos:end="1155:104">(<argument pos:start="1155:24" pos:end="1155:27"><expr pos:start="1155:24" pos:end="1155:27"><name pos:start="1155:24" pos:end="1155:27">NULL</name></expr></argument>, <argument pos:start="1155:30" pos:end="1155:41"><expr pos:start="1155:30" pos:end="1155:41"><name pos:start="1155:30" pos:end="1155:41">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="1155:44" pos:end="1155:77"><expr pos:start="1155:44" pos:end="1155:77"><literal type="string" pos:start="1155:44" pos:end="1155:77">"Invalid metadata specifier %s.\n"</literal></expr></argument>, <argument pos:start="1155:80" pos:end="1155:103"><expr pos:start="1155:80" pos:end="1155:103"><name pos:start="1155:80" pos:end="1155:93"><name pos:start="1155:80" pos:end="1155:80">o</name><operator pos:start="1155:81" pos:end="1155:82">-&gt;</operator><name pos:start="1155:83" pos:end="1155:90">metadata</name><index pos:start="1155:91" pos:end="1155:93">[<expr pos:start="1155:92" pos:end="1155:92"><name pos:start="1155:92" pos:end="1155:92">i</name></expr>]</index></name><operator pos:start="1155:94" pos:end="1155:94">.</operator><name pos:start="1155:95" pos:end="1155:103">specifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1157:17" pos:end="1157:32"><expr pos:start="1157:17" pos:end="1157:31"><call pos:start="1157:17" pos:end="1157:31"><name pos:start="1157:17" pos:end="1157:28">exit_program</name><argument_list pos:start="1157:29" pos:end="1157:31">(<argument pos:start="1157:30" pos:end="1157:30"><expr pos:start="1157:30" pos:end="1157:30"><literal type="number" pos:start="1157:30" pos:end="1157:30">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></switch>

            <expr_stmt pos:start="1161:13" pos:end="1161:71"><expr pos:start="1161:13" pos:end="1161:70"><call pos:start="1161:13" pos:end="1161:70"><name pos:start="1161:13" pos:end="1161:23">av_dict_set</name><argument_list pos:start="1161:24" pos:end="1161:70">(<argument pos:start="1161:25" pos:end="1161:25"><expr pos:start="1161:25" pos:end="1161:25"><name pos:start="1161:25" pos:end="1161:25">m</name></expr></argument>, <argument pos:start="1161:28" pos:end="1161:47"><expr pos:start="1161:28" pos:end="1161:47"><name pos:start="1161:28" pos:end="1161:41"><name pos:start="1161:28" pos:end="1161:28">o</name><operator pos:start="1161:29" pos:end="1161:30">-&gt;</operator><name pos:start="1161:31" pos:end="1161:38">metadata</name><index pos:start="1161:39" pos:end="1161:41">[<expr pos:start="1161:40" pos:end="1161:40"><name pos:start="1161:40" pos:end="1161:40">i</name></expr>]</index></name><operator pos:start="1161:42" pos:end="1161:42">.</operator><name pos:start="1161:43" pos:end="1161:47"><name pos:start="1161:43" pos:end="1161:43">u</name><operator pos:start="1161:44" pos:end="1161:44">.</operator><name pos:start="1161:45" pos:end="1161:47">str</name></name></expr></argument>, <argument pos:start="1161:50" pos:end="1161:66"><expr pos:start="1161:50" pos:end="1161:66"><ternary pos:start="1161:50" pos:end="1161:66"><condition pos:start="1161:50" pos:end="1161:55"><expr pos:start="1161:50" pos:end="1161:53"><operator pos:start="1161:50" pos:end="1161:50">*</operator><name pos:start="1161:51" pos:end="1161:53">val</name></expr> ?</condition><then pos:start="1161:57" pos:end="1161:59"> <expr pos:start="1161:57" pos:end="1161:59"><name pos:start="1161:57" pos:end="1161:59">val</name></expr> </then><else pos:start="1161:61" pos:end="1161:66">: <expr pos:start="1161:63" pos:end="1161:66"><name pos:start="1161:63" pos:end="1161:66">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="1161:69" pos:end="1161:69"><expr pos:start="1161:69" pos:end="1161:69"><literal type="number" pos:start="1161:69" pos:end="1161:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <return pos:start="1169:5" pos:end="1169:13">return <expr pos:start="1169:12" pos:end="1169:12"><literal type="number" pos:start="1169:12" pos:end="1169:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
