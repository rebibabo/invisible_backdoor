<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17445.c" pos:tabs="8"><function pos:start="1:1" pos:end="63:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">matroska_parse_cluster</name><parameter_list pos:start="1:34" pos:end="1:65">(<parameter pos:start="1:35" pos:end="1:64"><decl pos:start="1:35" pos:end="1:64"><type pos:start="1:35" pos:end="1:56"><name pos:start="1:35" pos:end="1:54">MatroskaDemuxContext</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:64">matroska</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="63:1">{<block_content pos:start="5:5" pos:end="61:15">

    <decl_stmt pos:start="5:5" pos:end="5:36"><decl pos:start="5:5" pos:end="5:35"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:19">MatroskaCluster</name></type> <name pos:start="5:21" pos:end="5:27">cluster</name> <init pos:start="5:29" pos:end="5:35">= <expr pos:start="5:31" pos:end="5:35"><block pos:start="5:31" pos:end="5:35">{ <expr pos:start="5:33" pos:end="5:33"><literal type="number" pos:start="5:33" pos:end="5:33">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">EbmlList</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:25">blocks_list</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">MatroskaBlock</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:25">blocks</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>, <decl pos:start="11:12" pos:end="11:14"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:14">res</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:47"><decl pos:start="13:5" pos:end="13:46"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">int64_t</name></type> <name pos:start="13:13" pos:end="13:15">pos</name> <init pos:start="13:17" pos:end="13:46">= <expr pos:start="13:19" pos:end="13:46"><call pos:start="13:19" pos:end="13:46"><name pos:start="13:19" pos:end="13:27">url_ftell</name><argument_list pos:start="13:28" pos:end="13:46">(<argument pos:start="13:29" pos:end="13:45"><expr pos:start="13:29" pos:end="13:45"><name pos:start="13:29" pos:end="13:45"><name pos:start="13:29" pos:end="13:36">matroska</name><operator pos:start="13:37" pos:end="13:38">-&gt;</operator><name pos:start="13:39" pos:end="13:41">ctx</name><operator pos:start="13:42" pos:end="13:43">-&gt;</operator><name pos:start="13:44" pos:end="13:45">pb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:30"><expr pos:start="15:5" pos:end="15:29"><name pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:12">matroska</name><operator pos:start="15:13" pos:end="15:14">-&gt;</operator><name pos:start="15:15" pos:end="15:22">prev_pkt</name></name> <operator pos:start="15:24" pos:end="15:24">=</operator> <name pos:start="15:26" pos:end="15:29">NULL</name></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="33:64"><if pos:start="17:5" pos:end="31:5">if <condition pos:start="17:8" pos:end="17:33">(<expr pos:start="17:9" pos:end="17:32"><name pos:start="17:9" pos:end="17:32"><name pos:start="17:9" pos:end="17:16">matroska</name><operator pos:start="17:17" pos:end="17:18">-&gt;</operator><name pos:start="17:19" pos:end="17:32">has_cluster_id</name></name></expr>)</condition><block pos:start="17:34" pos:end="31:5">{<block_content pos:start="23:9" pos:end="29:37">

        <comment type="block" pos:start="19:9" pos:end="21:68">/* For the first cluster we parse, its ID was already read as

           part of matroska_read_header(), so don't read it again */</comment>

        <expr_stmt pos:start="23:9" pos:end="25:59"><expr pos:start="23:9" pos:end="25:58"><name pos:start="23:9" pos:end="23:11">res</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <call pos:start="23:15" pos:end="25:58"><name pos:start="23:15" pos:end="23:27">ebml_parse_id</name><argument_list pos:start="23:28" pos:end="25:58">(<argument pos:start="23:29" pos:end="23:36"><expr pos:start="23:29" pos:end="23:36"><name pos:start="23:29" pos:end="23:36">matroska</name></expr></argument>, <argument pos:start="23:39" pos:end="23:55"><expr pos:start="23:39" pos:end="23:55"><name pos:start="23:39" pos:end="23:55">matroska_clusters</name></expr></argument>,

                            <argument pos:start="25:29" pos:end="25:47"><expr pos:start="25:29" pos:end="25:47"><name pos:start="25:29" pos:end="25:47">MATROSKA_ID_CLUSTER</name></expr></argument>, <argument pos:start="25:50" pos:end="25:57"><expr pos:start="25:50" pos:end="25:57"><operator pos:start="25:50" pos:end="25:50">&amp;</operator><name pos:start="25:51" pos:end="25:57">cluster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:17"><expr pos:start="27:9" pos:end="27:16"><name pos:start="27:9" pos:end="27:11">pos</name> <operator pos:start="27:13" pos:end="27:14">-=</operator> <literal type="number" pos:start="27:16" pos:end="27:16">4</literal></expr>;</expr_stmt>  <comment type="block" pos:start="27:20" pos:end="27:61">/* sizeof the ID which was already read */</comment>

        <expr_stmt pos:start="29:9" pos:end="29:37"><expr pos:start="29:9" pos:end="29:36"><name pos:start="29:9" pos:end="29:32"><name pos:start="29:9" pos:end="29:16">matroska</name><operator pos:start="29:17" pos:end="29:18">-&gt;</operator><name pos:start="29:19" pos:end="29:32">has_cluster_id</name></name> <operator pos:start="29:34" pos:end="29:34">=</operator> <literal type="number" pos:start="29:36" pos:end="29:36">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="31:7" pos:end="33:64">else<block type="pseudo" pos:start="33:9" pos:end="33:64"><block_content pos:start="33:9" pos:end="33:64">

        <expr_stmt pos:start="33:9" pos:end="33:64"><expr pos:start="33:9" pos:end="33:63"><name pos:start="33:9" pos:end="33:11">res</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <call pos:start="33:15" pos:end="33:63"><name pos:start="33:15" pos:end="33:24">ebml_parse</name><argument_list pos:start="33:25" pos:end="33:63">(<argument pos:start="33:26" pos:end="33:33"><expr pos:start="33:26" pos:end="33:33"><name pos:start="33:26" pos:end="33:33">matroska</name></expr></argument>, <argument pos:start="33:36" pos:end="33:52"><expr pos:start="33:36" pos:end="33:52"><name pos:start="33:36" pos:end="33:52">matroska_clusters</name></expr></argument>, <argument pos:start="33:55" pos:end="33:62"><expr pos:start="33:55" pos:end="33:62"><operator pos:start="33:55" pos:end="33:55">&amp;</operator><name pos:start="33:56" pos:end="33:62">cluster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:34"><expr pos:start="35:5" pos:end="35:33"><name pos:start="35:5" pos:end="35:15">blocks_list</name> <operator pos:start="35:17" pos:end="35:17">=</operator> <operator pos:start="35:19" pos:end="35:19">&amp;</operator><name pos:start="35:20" pos:end="35:33"><name pos:start="35:20" pos:end="35:26">cluster</name><operator pos:start="35:27" pos:end="35:27">.</operator><name pos:start="35:28" pos:end="35:33">blocks</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:31"><expr pos:start="37:5" pos:end="37:30"><name pos:start="37:5" pos:end="37:10">blocks</name> <operator pos:start="37:12" pos:end="37:12">=</operator> <name pos:start="37:14" pos:end="37:30"><name pos:start="37:14" pos:end="37:24">blocks_list</name><operator pos:start="37:25" pos:end="37:26">-&gt;</operator><name pos:start="37:27" pos:end="37:30">elem</name></name></expr>;</expr_stmt>

    <for pos:start="39:5" pos:end="55:9">for <control pos:start="39:9" pos:end="39:42">(<init pos:start="39:10" pos:end="39:13"><expr pos:start="39:10" pos:end="39:12"><name pos:start="39:10" pos:end="39:10">i</name><operator pos:start="39:11" pos:end="39:11">=</operator><literal type="number" pos:start="39:12" pos:end="39:12">0</literal></expr>;</init> <condition pos:start="39:15" pos:end="39:37"><expr pos:start="39:15" pos:end="39:36"><name pos:start="39:15" pos:end="39:15">i</name><operator pos:start="39:16" pos:end="39:16">&lt;</operator><name pos:start="39:17" pos:end="39:36"><name pos:start="39:17" pos:end="39:27">blocks_list</name><operator pos:start="39:28" pos:end="39:29">-&gt;</operator><name pos:start="39:30" pos:end="39:36">nb_elem</name></name></expr>;</condition> <incr pos:start="39:39" pos:end="39:41"><expr pos:start="39:39" pos:end="39:41"><name pos:start="39:39" pos:end="39:39">i</name><operator pos:start="39:40" pos:end="39:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="41:9" pos:end="55:9"><block_content pos:start="41:9" pos:end="55:9">

        <if_stmt pos:start="41:9" pos:end="55:9"><if pos:start="41:9" pos:end="55:9">if <condition pos:start="41:12" pos:end="41:35">(<expr pos:start="41:13" pos:end="41:34"><name pos:start="41:13" pos:end="41:21"><name pos:start="41:13" pos:end="41:18">blocks</name><index pos:start="41:19" pos:end="41:21">[<expr pos:start="41:20" pos:end="41:20"><name pos:start="41:20" pos:end="41:20">i</name></expr>]</index></name><operator pos:start="41:22" pos:end="41:22">.</operator><name pos:start="41:23" pos:end="41:30"><name pos:start="41:23" pos:end="41:25">bin</name><operator pos:start="41:26" pos:end="41:26">.</operator><name pos:start="41:27" pos:end="41:30">size</name></name> <operator pos:start="41:32" pos:end="41:32">&gt;</operator> <literal type="number" pos:start="41:34" pos:end="41:34">0</literal></expr>)</condition> <block pos:start="41:37" pos:end="55:9">{<block_content pos:start="43:13" pos:end="53:42">

            <decl_stmt pos:start="43:13" pos:end="43:79"><decl pos:start="43:13" pos:end="43:78"><type pos:start="43:13" pos:end="43:15"><name pos:start="43:13" pos:end="43:15">int</name></type> <name pos:start="43:17" pos:end="43:27">is_keyframe</name> <init pos:start="43:29" pos:end="43:78">= <expr pos:start="43:31" pos:end="43:78"><ternary pos:start="43:31" pos:end="43:78"><condition pos:start="43:31" pos:end="43:52"><expr pos:start="43:31" pos:end="43:50"><name pos:start="43:31" pos:end="43:39"><name pos:start="43:31" pos:end="43:36">blocks</name><index pos:start="43:37" pos:end="43:39">[<expr pos:start="43:38" pos:end="43:38"><name pos:start="43:38" pos:end="43:38">i</name></expr>]</index></name><operator pos:start="43:40" pos:end="43:40">.</operator><name pos:start="43:41" pos:end="43:50">non_simple</name></expr> ?</condition><then pos:start="43:54" pos:end="43:73"> <expr pos:start="43:54" pos:end="43:73"><operator pos:start="43:54" pos:end="43:54">!</operator><name pos:start="43:55" pos:end="43:63"><name pos:start="43:55" pos:end="43:60">blocks</name><index pos:start="43:61" pos:end="43:63">[<expr pos:start="43:62" pos:end="43:62"><name pos:start="43:62" pos:end="43:62">i</name></expr>]</index></name><operator pos:start="43:64" pos:end="43:64">.</operator><name pos:start="43:65" pos:end="43:73">reference</name></expr> </then><else pos:start="43:75" pos:end="43:78">: <expr pos:start="43:77" pos:end="43:78"><operator pos:start="43:77" pos:end="43:77">-</operator><literal type="number" pos:start="43:78" pos:end="43:78">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="45:13" pos:end="53:42"><expr pos:start="45:13" pos:end="53:41"><name pos:start="45:13" pos:end="45:15">res</name><operator pos:start="45:16" pos:end="45:16">=</operator><call pos:start="45:17" pos:end="53:41"><name pos:start="45:17" pos:end="45:36">matroska_parse_block</name><argument_list pos:start="45:37" pos:end="53:41">(<argument pos:start="45:38" pos:end="45:45"><expr pos:start="45:38" pos:end="45:45"><name pos:start="45:38" pos:end="45:45">matroska</name></expr></argument>,

                                     <argument pos:start="47:38" pos:end="47:55"><expr pos:start="47:38" pos:end="47:55"><name pos:start="47:38" pos:end="47:46"><name pos:start="47:38" pos:end="47:43">blocks</name><index pos:start="47:44" pos:end="47:46">[<expr pos:start="47:45" pos:end="47:45"><name pos:start="47:45" pos:end="47:45">i</name></expr>]</index></name><operator pos:start="47:47" pos:end="47:47">.</operator><name pos:start="47:48" pos:end="47:55"><name pos:start="47:48" pos:end="47:50">bin</name><operator pos:start="47:51" pos:end="47:51">.</operator><name pos:start="47:52" pos:end="47:55">data</name></name></expr></argument>, <argument pos:start="47:58" pos:end="47:75"><expr pos:start="47:58" pos:end="47:75"><name pos:start="47:58" pos:end="47:66"><name pos:start="47:58" pos:end="47:63">blocks</name><index pos:start="47:64" pos:end="47:66">[<expr pos:start="47:65" pos:end="47:65"><name pos:start="47:65" pos:end="47:65">i</name></expr>]</index></name><operator pos:start="47:67" pos:end="47:67">.</operator><name pos:start="47:68" pos:end="47:75"><name pos:start="47:68" pos:end="47:70">bin</name><operator pos:start="47:71" pos:end="47:71">.</operator><name pos:start="47:72" pos:end="47:75">size</name></name></expr></argument>,

                                     <argument pos:start="49:38" pos:end="49:54"><expr pos:start="49:38" pos:end="49:54"><name pos:start="49:38" pos:end="49:46"><name pos:start="49:38" pos:end="49:43">blocks</name><index pos:start="49:44" pos:end="49:46">[<expr pos:start="49:45" pos:end="49:45"><name pos:start="49:45" pos:end="49:45">i</name></expr>]</index></name><operator pos:start="49:47" pos:end="49:47">.</operator><name pos:start="49:48" pos:end="49:54"><name pos:start="49:48" pos:end="49:50">bin</name><operator pos:start="49:51" pos:end="49:51">.</operator><name pos:start="49:52" pos:end="49:54">pos</name></name></expr></argument>,  <argument pos:start="49:58" pos:end="49:73"><expr pos:start="49:58" pos:end="49:73"><name pos:start="49:58" pos:end="49:73"><name pos:start="49:58" pos:end="49:64">cluster</name><operator pos:start="49:65" pos:end="49:65">.</operator><name pos:start="49:66" pos:end="49:73">timecode</name></name></expr></argument>,

                                     <argument pos:start="51:38" pos:end="51:55"><expr pos:start="51:38" pos:end="51:55"><name pos:start="51:38" pos:end="51:46"><name pos:start="51:38" pos:end="51:43">blocks</name><index pos:start="51:44" pos:end="51:46">[<expr pos:start="51:45" pos:end="51:45"><name pos:start="51:45" pos:end="51:45">i</name></expr>]</index></name><operator pos:start="51:47" pos:end="51:47">.</operator><name pos:start="51:48" pos:end="51:55">duration</name></expr></argument>, <argument pos:start="51:58" pos:end="51:68"><expr pos:start="51:58" pos:end="51:68"><name pos:start="51:58" pos:end="51:68">is_keyframe</name></expr></argument>,

                                     <argument pos:start="53:38" pos:end="53:40"><expr pos:start="53:38" pos:end="53:40"><name pos:start="53:38" pos:end="53:40">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt></block_content></block></for>

    <expr_stmt pos:start="57:5" pos:end="57:42"><expr pos:start="57:5" pos:end="57:41"><call pos:start="57:5" pos:end="57:41"><name pos:start="57:5" pos:end="57:13">ebml_free</name><argument_list pos:start="57:14" pos:end="57:41">(<argument pos:start="57:15" pos:end="57:30"><expr pos:start="57:15" pos:end="57:30"><name pos:start="57:15" pos:end="57:30">matroska_cluster</name></expr></argument>, <argument pos:start="57:33" pos:end="57:40"><expr pos:start="57:33" pos:end="57:40"><operator pos:start="57:33" pos:end="57:33">&amp;</operator><name pos:start="57:34" pos:end="57:40">cluster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="59:37"><if pos:start="59:5" pos:end="59:37">if <condition pos:start="59:8" pos:end="59:16">(<expr pos:start="59:9" pos:end="59:15"><name pos:start="59:9" pos:end="59:11">res</name> <operator pos:start="59:13" pos:end="59:13">&lt;</operator> <literal type="number" pos:start="59:15" pos:end="59:15">0</literal></expr>)</condition><block type="pseudo" pos:start="59:19" pos:end="59:37"><block_content pos:start="59:19" pos:end="59:37">  <expr_stmt pos:start="59:19" pos:end="59:37"><expr pos:start="59:19" pos:end="59:36"><name pos:start="59:19" pos:end="59:32"><name pos:start="59:19" pos:end="59:26">matroska</name><operator pos:start="59:27" pos:end="59:28">-&gt;</operator><name pos:start="59:29" pos:end="59:32">done</name></name> <operator pos:start="59:34" pos:end="59:34">=</operator> <literal type="number" pos:start="59:36" pos:end="59:36">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="61:5" pos:end="61:15">return <expr pos:start="61:12" pos:end="61:14"><name pos:start="61:12" pos:end="61:14">res</name></expr>;</return>

</block_content>}</block></function>
</unit>
