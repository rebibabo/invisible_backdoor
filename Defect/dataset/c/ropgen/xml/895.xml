<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/895.c" pos:tabs="8"><function pos:start="1:1" pos:end="83:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name></type> <name pos:start="1:20" pos:end="1:36">stl_phys_internal</name><parameter_list pos:start="1:37" pos:end="3:63">(<parameter pos:start="1:38" pos:end="1:48"><decl pos:start="1:38" pos:end="1:48"><type pos:start="1:38" pos:end="1:48"><name pos:start="1:38" pos:end="1:43">hwaddr</name></type> <name pos:start="1:45" pos:end="1:48">addr</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:62"><decl pos:start="1:51" pos:end="1:62"><type pos:start="1:51" pos:end="1:62"><name pos:start="1:51" pos:end="1:58">uint32_t</name></type> <name pos:start="1:60" pos:end="1:62">val</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:62"><decl pos:start="3:38" pos:end="3:62"><type pos:start="3:38" pos:end="3:62"><name pos:start="3:38" pos:end="3:55"><name pos:start="3:38" pos:end="3:41">enum</name> <name pos:start="3:43" pos:end="3:55">device_endian</name></name></type> <name pos:start="3:57" pos:end="3:62">endian</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="83:1">{<block_content pos:start="7:5" pos:end="81:5">

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:16">ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:25"><name pos:start="9:5" pos:end="9:23">MemoryRegionSection</name> <modifier pos:start="9:25" pos:end="9:25">*</modifier></type><name pos:start="9:26" pos:end="9:32">section</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">hwaddr</name></type> <name pos:start="11:12" pos:end="11:12">l</name> <init pos:start="11:14" pos:end="11:16">= <expr pos:start="11:16" pos:end="11:16"><literal type="number" pos:start="11:16" pos:end="11:16">4</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">hwaddr</name></type> <name pos:start="13:12" pos:end="13:16">addr1</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="19:44"><expr pos:start="17:5" pos:end="19:43"><name pos:start="17:5" pos:end="17:11">section</name> <operator pos:start="17:13" pos:end="17:13">=</operator> <call pos:start="17:15" pos:end="19:43"><name pos:start="17:15" pos:end="17:37">address_space_translate</name><argument_list pos:start="17:38" pos:end="19:43">(<argument pos:start="17:39" pos:end="17:59"><expr pos:start="17:39" pos:end="17:59"><operator pos:start="17:39" pos:end="17:39">&amp;</operator><name pos:start="17:40" pos:end="17:59">address_space_memory</name></expr></argument>, <argument pos:start="17:62" pos:end="17:65"><expr pos:start="17:62" pos:end="17:65"><name pos:start="17:62" pos:end="17:65">addr</name></expr></argument>, <argument pos:start="17:68" pos:end="17:73"><expr pos:start="17:68" pos:end="17:73"><operator pos:start="17:68" pos:end="17:68">&amp;</operator><name pos:start="17:69" pos:end="17:73">addr1</name></expr></argument>, <argument pos:start="17:76" pos:end="17:77"><expr pos:start="17:76" pos:end="17:77"><operator pos:start="17:76" pos:end="17:76">&amp;</operator><name pos:start="17:77" pos:end="17:77">l</name></expr></argument>,

                                      <argument pos:start="19:39" pos:end="19:42"><expr pos:start="19:39" pos:end="19:42"><name pos:start="19:39" pos:end="19:42">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="81:5"><if pos:start="21:5" pos:end="49:5">if <condition pos:start="21:8" pos:end="21:73">(<expr pos:start="21:9" pos:end="21:72"><name pos:start="21:9" pos:end="21:9">l</name> <operator pos:start="21:11" pos:end="21:11">&lt;</operator> <literal type="number" pos:start="21:13" pos:end="21:13">4</literal> <operator pos:start="21:15" pos:end="21:16">||</operator> <operator pos:start="21:18" pos:end="21:18">!</operator><call pos:start="21:19" pos:end="21:51"><name pos:start="21:19" pos:end="21:38">memory_region_is_ram</name><argument_list pos:start="21:39" pos:end="21:51">(<argument pos:start="21:40" pos:end="21:50"><expr pos:start="21:40" pos:end="21:50"><name pos:start="21:40" pos:end="21:50"><name pos:start="21:40" pos:end="21:46">section</name><operator pos:start="21:47" pos:end="21:48">-&gt;</operator><name pos:start="21:49" pos:end="21:50">mr</name></name></expr></argument>)</argument_list></call> <operator pos:start="21:53" pos:end="21:54">||</operator> <name pos:start="21:56" pos:end="21:72"><name pos:start="21:56" pos:end="21:62">section</name><operator pos:start="21:63" pos:end="21:64">-&gt;</operator><name pos:start="21:65" pos:end="21:72">readonly</name></name></expr>)</condition> <block pos:start="21:75" pos:end="49:5">{<block_content pos:start="23:9" pos:end="47:49">

        <if_stmt pos:start="23:9" pos:end="30:0"><if pos:start="23:9" pos:end="30:0">if <condition pos:start="23:12" pos:end="23:46">(<expr pos:start="23:13" pos:end="23:45"><call pos:start="23:13" pos:end="23:45"><name pos:start="23:13" pos:end="23:32">memory_region_is_ram</name><argument_list pos:start="23:33" pos:end="23:45">(<argument pos:start="23:34" pos:end="23:44"><expr pos:start="23:34" pos:end="23:44"><name pos:start="23:34" pos:end="23:44"><name pos:start="23:34" pos:end="23:40">section</name><operator pos:start="23:41" pos:end="23:42">-&gt;</operator><name pos:start="23:43" pos:end="23:44">mr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:48" pos:end="30:0">{<block_content pos:start="25:13" pos:end="25:55">

            <expr_stmt pos:start="25:13" pos:end="25:55"><expr pos:start="25:13" pos:end="25:54"><name pos:start="25:13" pos:end="25:19">section</name> <operator pos:start="25:21" pos:end="25:21">=</operator> <operator pos:start="25:23" pos:end="25:23">&amp;</operator><name pos:start="25:24" pos:end="25:54"><name pos:start="25:24" pos:end="25:36">phys_sections</name><index pos:start="25:37" pos:end="25:54">[<expr pos:start="25:38" pos:end="25:53"><name pos:start="25:38" pos:end="25:53">phys_section_rom</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:if pos:start="29:1" pos:end="29:35">#<cpp:directive pos:start="29:2" pos:end="29:3">if</cpp:directive> <expr pos:start="29:5" pos:end="29:35"><call pos:start="29:5" pos:end="29:35"><name pos:start="29:5" pos:end="29:11">defined</name><argument_list pos:start="29:12" pos:end="29:35">(<argument pos:start="29:13" pos:end="29:34"><expr pos:start="29:13" pos:end="29:34"><name pos:start="29:13" pos:end="29:34">TARGET_WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="31:9" pos:end="38:0"><if pos:start="31:9" pos:end="38:0">if <condition pos:start="31:12" pos:end="31:43">(<expr pos:start="31:13" pos:end="31:42"><name pos:start="31:13" pos:end="31:18">endian</name> <operator pos:start="31:20" pos:end="31:21">==</operator> <name pos:start="31:23" pos:end="31:42">DEVICE_LITTLE_ENDIAN</name></expr>)</condition> <block pos:start="31:45" pos:end="38:0">{<block_content pos:start="33:13" pos:end="33:31">

            <expr_stmt pos:start="33:13" pos:end="33:31"><expr pos:start="33:13" pos:end="33:30"><name pos:start="33:13" pos:end="33:15">val</name> <operator pos:start="33:17" pos:end="33:17">=</operator> <call pos:start="33:19" pos:end="33:30"><name pos:start="33:19" pos:end="33:25">bswap32</name><argument_list pos:start="33:26" pos:end="33:30">(<argument pos:start="33:27" pos:end="33:29"><expr pos:start="33:27" pos:end="33:29"><name pos:start="33:27" pos:end="33:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:else pos:start="37:1" pos:end="37:5">#<cpp:directive pos:start="37:2" pos:end="37:5">else</cpp:directive></cpp:else>

        <if_stmt pos:start="39:9" pos:end="46:0"><if pos:start="39:9" pos:end="46:0">if <condition pos:start="39:12" pos:end="39:40">(<expr pos:start="39:13" pos:end="39:39"><name pos:start="39:13" pos:end="39:18">endian</name> <operator pos:start="39:20" pos:end="39:21">==</operator> <name pos:start="39:23" pos:end="39:39">DEVICE_BIG_ENDIAN</name></expr>)</condition> <block pos:start="39:42" pos:end="46:0">{<block_content pos:start="41:13" pos:end="41:31">

            <expr_stmt pos:start="41:13" pos:end="41:31"><expr pos:start="41:13" pos:end="41:30"><name pos:start="41:13" pos:end="41:15">val</name> <operator pos:start="41:17" pos:end="41:17">=</operator> <call pos:start="41:19" pos:end="41:30"><name pos:start="41:19" pos:end="41:25">bswap32</name><argument_list pos:start="41:26" pos:end="41:30">(<argument pos:start="41:27" pos:end="41:29"><expr pos:start="41:27" pos:end="41:29"><name pos:start="41:27" pos:end="41:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="45:1" pos:end="45:6">#<cpp:directive pos:start="45:2" pos:end="45:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="47:9" pos:end="47:49"><expr pos:start="47:9" pos:end="47:48"><call pos:start="47:9" pos:end="47:48"><name pos:start="47:9" pos:end="47:20">io_mem_write</name><argument_list pos:start="47:21" pos:end="47:48">(<argument pos:start="47:22" pos:end="47:32"><expr pos:start="47:22" pos:end="47:32"><name pos:start="47:22" pos:end="47:32"><name pos:start="47:22" pos:end="47:28">section</name><operator pos:start="47:29" pos:end="47:30">-&gt;</operator><name pos:start="47:31" pos:end="47:32">mr</name></name></expr></argument>, <argument pos:start="47:35" pos:end="47:39"><expr pos:start="47:35" pos:end="47:39"><name pos:start="47:35" pos:end="47:39">addr1</name></expr></argument>, <argument pos:start="47:42" pos:end="47:44"><expr pos:start="47:42" pos:end="47:44"><name pos:start="47:42" pos:end="47:44">val</name></expr></argument>, <argument pos:start="47:47" pos:end="47:47"><expr pos:start="47:47" pos:end="47:47"><literal type="number" pos:start="47:47" pos:end="47:47">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="49:7" pos:end="81:5">else <block pos:start="49:12" pos:end="81:5">{<block_content pos:start="53:9" pos:end="79:43">

        <comment type="block" pos:start="51:9" pos:end="51:22">/* RAM case */</comment>

        <expr_stmt pos:start="53:9" pos:end="53:76"><expr pos:start="53:9" pos:end="53:75"><name pos:start="53:9" pos:end="53:13">addr1</name> <operator pos:start="53:15" pos:end="53:16">+=</operator> <call pos:start="53:18" pos:end="53:56"><name pos:start="53:18" pos:end="53:43">memory_region_get_ram_addr</name><argument_list pos:start="53:44" pos:end="53:56">(<argument pos:start="53:45" pos:end="53:55"><expr pos:start="53:45" pos:end="53:55"><name pos:start="53:45" pos:end="53:55"><name pos:start="53:45" pos:end="53:51">section</name><operator pos:start="53:52" pos:end="53:53">-&gt;</operator><name pos:start="53:54" pos:end="53:55">mr</name></name></expr></argument>)</argument_list></call> <operator pos:start="53:58" pos:end="53:58">&amp;</operator> <name pos:start="53:60" pos:end="53:75">TARGET_PAGE_MASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:38"><expr pos:start="55:9" pos:end="55:37"><name pos:start="55:9" pos:end="55:11">ptr</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <call pos:start="55:15" pos:end="55:37"><name pos:start="55:15" pos:end="55:30">qemu_get_ram_ptr</name><argument_list pos:start="55:31" pos:end="55:37">(<argument pos:start="55:32" pos:end="55:36"><expr pos:start="55:32" pos:end="55:36"><name pos:start="55:32" pos:end="55:36">addr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="57:9" pos:end="77:9">switch <condition pos:start="57:16" pos:end="57:23">(<expr pos:start="57:17" pos:end="57:22"><name pos:start="57:17" pos:end="57:22">endian</name></expr>)</condition> <block pos:start="57:25" pos:end="77:9">{<block_content pos:start="59:9" pos:end="75:18">

        <case pos:start="59:9" pos:end="59:34">case <expr pos:start="59:14" pos:end="59:33"><name pos:start="59:14" pos:end="59:33">DEVICE_LITTLE_ENDIAN</name></expr>:</case>

            <expr_stmt pos:start="61:13" pos:end="61:31"><expr pos:start="61:13" pos:end="61:30"><call pos:start="61:13" pos:end="61:30"><name pos:start="61:13" pos:end="61:20">stl_le_p</name><argument_list pos:start="61:21" pos:end="61:30">(<argument pos:start="61:22" pos:end="61:24"><expr pos:start="61:22" pos:end="61:24"><name pos:start="61:22" pos:end="61:24">ptr</name></expr></argument>, <argument pos:start="61:27" pos:end="61:29"><expr pos:start="61:27" pos:end="61:29"><name pos:start="61:27" pos:end="61:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="63:13" pos:end="63:18">break;</break>

        <case pos:start="65:9" pos:end="65:31">case <expr pos:start="65:14" pos:end="65:30"><name pos:start="65:14" pos:end="65:30">DEVICE_BIG_ENDIAN</name></expr>:</case>

            <expr_stmt pos:start="67:13" pos:end="67:31"><expr pos:start="67:13" pos:end="67:30"><call pos:start="67:13" pos:end="67:30"><name pos:start="67:13" pos:end="67:20">stl_be_p</name><argument_list pos:start="67:21" pos:end="67:30">(<argument pos:start="67:22" pos:end="67:24"><expr pos:start="67:22" pos:end="67:24"><name pos:start="67:22" pos:end="67:24">ptr</name></expr></argument>, <argument pos:start="67:27" pos:end="67:29"><expr pos:start="67:27" pos:end="67:29"><name pos:start="67:27" pos:end="67:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="69:13" pos:end="69:18">break;</break>

        <default pos:start="71:9" pos:end="71:16">default:</default>

            <expr_stmt pos:start="73:13" pos:end="73:28"><expr pos:start="73:13" pos:end="73:27"><call pos:start="73:13" pos:end="73:27"><name pos:start="73:13" pos:end="73:17">stl_p</name><argument_list pos:start="73:18" pos:end="73:27">(<argument pos:start="73:19" pos:end="73:21"><expr pos:start="73:19" pos:end="73:21"><name pos:start="73:19" pos:end="73:21">ptr</name></expr></argument>, <argument pos:start="73:24" pos:end="73:26"><expr pos:start="73:24" pos:end="73:26"><name pos:start="73:24" pos:end="73:26">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="75:13" pos:end="75:18">break;</break>

        </block_content>}</block></switch>

        <expr_stmt pos:start="79:9" pos:end="79:43"><expr pos:start="79:9" pos:end="79:42"><call pos:start="79:9" pos:end="79:42"><name pos:start="79:9" pos:end="79:32">invalidate_and_set_dirty</name><argument_list pos:start="79:33" pos:end="79:42">(<argument pos:start="79:34" pos:end="79:38"><expr pos:start="79:34" pos:end="79:38"><name pos:start="79:34" pos:end="79:38">addr1</name></expr></argument>, <argument pos:start="79:41" pos:end="79:41"><expr pos:start="79:41" pos:end="79:41"><literal type="number" pos:start="79:41" pos:end="79:41">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
