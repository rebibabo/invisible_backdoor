<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10567.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">bmdma_rw_buf</name><parameter_list pos:start="1:24" pos:end="1:50">(<parameter pos:start="1:25" pos:end="1:35"><decl pos:start="1:25" pos:end="1:35"><type pos:start="1:25" pos:end="1:35"><name pos:start="1:25" pos:end="1:30">IDEDMA</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:35">dma</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:49"><decl pos:start="1:38" pos:end="1:49"><type pos:start="1:38" pos:end="1:49"><name pos:start="1:38" pos:end="1:40">int</name></type> <name pos:start="1:42" pos:end="1:49">is_write</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="93:1">{<block_content pos:start="5:5" pos:end="91:13">

    <decl_stmt pos:start="5:5" pos:end="5:53"><decl pos:start="5:5" pos:end="5:52"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">BMDMAState</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:18">bm</name> <init pos:start="5:20" pos:end="5:52">= <expr pos:start="5:22" pos:end="5:52"><call pos:start="5:22" pos:end="5:52"><name pos:start="5:22" pos:end="5:30">DO_UPCAST</name><argument_list pos:start="5:31" pos:end="5:52">(<argument pos:start="5:32" pos:end="5:41"><expr pos:start="5:32" pos:end="5:41"><name pos:start="5:32" pos:end="5:41">BMDMAState</name></expr></argument>, <argument pos:start="5:44" pos:end="5:46"><expr pos:start="5:44" pos:end="5:46"><name pos:start="5:44" pos:end="5:46">dma</name></expr></argument>, <argument pos:start="5:49" pos:end="5:51"><expr pos:start="5:49" pos:end="5:51"><name pos:start="5:49" pos:end="5:51">dma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">IDEState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:15">s</name> <init pos:start="7:17" pos:end="7:37">= <expr pos:start="7:19" pos:end="7:37"><call pos:start="7:19" pos:end="7:37"><name pos:start="7:19" pos:end="7:33">bmdma_active_if</name><argument_list pos:start="7:34" pos:end="7:37">(<argument pos:start="7:35" pos:end="7:36"><expr pos:start="7:35" pos:end="7:36"><name pos:start="7:35" pos:end="7:36">bm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <struct pos:start="9:5" pos:end="15:10">struct <block pos:start="9:12" pos:end="15:5">{

        <decl_stmt pos:start="11:9" pos:end="11:22"><decl pos:start="11:9" pos:end="11:21"><type pos:start="11:9" pos:end="11:16"><name pos:start="11:9" pos:end="11:16">uint32_t</name></type> <name pos:start="11:18" pos:end="11:21">addr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="13:9" pos:end="13:22"><decl pos:start="13:9" pos:end="13:21"><type pos:start="13:9" pos:end="13:16"><name pos:start="13:9" pos:end="13:16">uint32_t</name></type> <name pos:start="13:18" pos:end="13:21">size</name></decl>;</decl_stmt>

    }</block> <decl pos:start="15:7" pos:end="15:9"><name pos:start="15:7" pos:end="15:9">prd</name></decl>;</struct>

    <decl_stmt pos:start="17:5" pos:end="17:15"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">l</name></decl>, <decl pos:start="17:12" pos:end="17:14"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:12" pos:end="17:14">len</name></decl>;</decl_stmt>



    <for pos:start="21:5" pos:end="89:5">for<control pos:start="21:8" pos:end="21:11">(<init pos:start="21:9" pos:end="21:9">;</init><condition pos:start="21:10" pos:end="21:10">;</condition><incr/>)</control> <block pos:start="21:13" pos:end="89:5">{<block_content pos:start="23:9" pos:end="87:9">

        <expr_stmt pos:start="23:9" pos:end="23:51"><expr pos:start="23:9" pos:end="23:50"><name pos:start="23:9" pos:end="23:9">l</name> <operator pos:start="23:11" pos:end="23:11">=</operator> <name pos:start="23:13" pos:end="23:29"><name pos:start="23:13" pos:end="23:13">s</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:29">io_buffer_size</name></name> <operator pos:start="23:31" pos:end="23:31">-</operator> <name pos:start="23:33" pos:end="23:50"><name pos:start="23:33" pos:end="23:33">s</name><operator pos:start="23:34" pos:end="23:35">-&gt;</operator><name pos:start="23:36" pos:end="23:50">io_buffer_index</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="27:18"><if pos:start="25:9" pos:end="27:18">if <condition pos:start="25:12" pos:end="25:19">(<expr pos:start="25:13" pos:end="25:18"><name pos:start="25:13" pos:end="25:13">l</name> <operator pos:start="25:15" pos:end="25:16">&lt;=</operator> <literal type="number" pos:start="25:18" pos:end="25:18">0</literal></expr>)</condition><block type="pseudo" pos:start="27:13" pos:end="27:18"><block_content pos:start="27:13" pos:end="27:18">

            <break pos:start="27:13" pos:end="27:18">break;</break></block_content></block></if></if_stmt>

        <if_stmt pos:start="29:9" pos:end="59:9"><if pos:start="29:9" pos:end="59:9">if <condition pos:start="29:12" pos:end="29:33">(<expr pos:start="29:13" pos:end="29:32"><name pos:start="29:13" pos:end="29:27"><name pos:start="29:13" pos:end="29:14">bm</name><operator pos:start="29:15" pos:end="29:16">-&gt;</operator><name pos:start="29:17" pos:end="29:27">cur_prd_len</name></name> <operator pos:start="29:29" pos:end="29:30">==</operator> <literal type="number" pos:start="29:32" pos:end="29:32">0</literal></expr>)</condition> <block pos:start="29:35" pos:end="59:9">{<block_content pos:start="33:13" pos:end="57:55">

            <comment type="block" pos:start="31:13" pos:end="31:61">/* end of table (with a fail safe of one page) */</comment>

            <if_stmt pos:start="33:13" pos:end="37:25"><if pos:start="33:13" pos:end="37:25">if <condition pos:start="33:16" pos:end="35:61">(<expr pos:start="33:17" pos:end="35:60"><name pos:start="33:17" pos:end="33:32"><name pos:start="33:17" pos:end="33:18">bm</name><operator pos:start="33:19" pos:end="33:20">-&gt;</operator><name pos:start="33:21" pos:end="33:32">cur_prd_last</name></name> <operator pos:start="33:34" pos:end="33:35">||</operator>

                <operator pos:start="35:17" pos:end="35:17">(</operator><name pos:start="35:18" pos:end="35:29"><name pos:start="35:18" pos:end="35:19">bm</name><operator pos:start="35:20" pos:end="35:21">-&gt;</operator><name pos:start="35:22" pos:end="35:29">cur_addr</name></name> <operator pos:start="35:31" pos:end="35:31">-</operator> <name pos:start="35:33" pos:end="35:40"><name pos:start="35:33" pos:end="35:34">bm</name><operator pos:start="35:35" pos:end="35:36">-&gt;</operator><name pos:start="35:37" pos:end="35:40">addr</name></name><operator pos:start="35:41" pos:end="35:41">)</operator> <operator pos:start="35:43" pos:end="35:44">&gt;=</operator> <name pos:start="35:46" pos:end="35:60">BMDMA_PAGE_SIZE</name></expr>)</condition><block type="pseudo" pos:start="37:17" pos:end="37:25"><block_content pos:start="37:17" pos:end="37:25">

                <return pos:start="37:17" pos:end="37:25">return <expr pos:start="37:24" pos:end="37:24"><literal type="number" pos:start="37:24" pos:end="37:24">0</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:71"><expr pos:start="39:13" pos:end="39:70"><call pos:start="39:13" pos:end="39:70"><name pos:start="39:13" pos:end="39:36">cpu_physical_memory_read</name><argument_list pos:start="39:37" pos:end="39:70">(<argument pos:start="39:38" pos:end="39:49"><expr pos:start="39:38" pos:end="39:49"><name pos:start="39:38" pos:end="39:49"><name pos:start="39:38" pos:end="39:39">bm</name><operator pos:start="39:40" pos:end="39:41">-&gt;</operator><name pos:start="39:42" pos:end="39:49">cur_addr</name></name></expr></argument>, <argument pos:start="39:52" pos:end="39:66"><expr pos:start="39:52" pos:end="39:66"><operator pos:start="39:52" pos:end="39:52">(</operator><name pos:start="39:53" pos:end="39:59">uint8_t</name> <operator pos:start="39:61" pos:end="39:61">*</operator><operator pos:start="39:62" pos:end="39:62">)</operator><operator pos:start="39:63" pos:end="39:63">&amp;</operator><name pos:start="39:64" pos:end="39:66">prd</name></expr></argument>, <argument pos:start="39:69" pos:end="39:69"><expr pos:start="39:69" pos:end="39:69"><literal type="number" pos:start="39:69" pos:end="39:69">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:30"><expr pos:start="41:13" pos:end="41:29"><name pos:start="41:13" pos:end="41:24"><name pos:start="41:13" pos:end="41:14">bm</name><operator pos:start="41:15" pos:end="41:16">-&gt;</operator><name pos:start="41:17" pos:end="41:24">cur_addr</name></name> <operator pos:start="41:26" pos:end="41:27">+=</operator> <literal type="number" pos:start="41:29" pos:end="41:29">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:45"><expr pos:start="43:13" pos:end="43:44"><name pos:start="43:13" pos:end="43:20"><name pos:start="43:13" pos:end="43:15">prd</name><operator pos:start="43:16" pos:end="43:16">.</operator><name pos:start="43:17" pos:end="43:20">addr</name></name> <operator pos:start="43:22" pos:end="43:22">=</operator> <call pos:start="43:24" pos:end="43:44"><name pos:start="43:24" pos:end="43:34">le32_to_cpu</name><argument_list pos:start="43:35" pos:end="43:44">(<argument pos:start="43:36" pos:end="43:43"><expr pos:start="43:36" pos:end="43:43"><name pos:start="43:36" pos:end="43:43"><name pos:start="43:36" pos:end="43:38">prd</name><operator pos:start="43:39" pos:end="43:39">.</operator><name pos:start="43:40" pos:end="43:43">addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:45"><expr pos:start="45:13" pos:end="45:44"><name pos:start="45:13" pos:end="45:20"><name pos:start="45:13" pos:end="45:15">prd</name><operator pos:start="45:16" pos:end="45:16">.</operator><name pos:start="45:17" pos:end="45:20">size</name></name> <operator pos:start="45:22" pos:end="45:22">=</operator> <call pos:start="45:24" pos:end="45:44"><name pos:start="45:24" pos:end="45:34">le32_to_cpu</name><argument_list pos:start="45:35" pos:end="45:44">(<argument pos:start="45:36" pos:end="45:43"><expr pos:start="45:36" pos:end="45:43"><name pos:start="45:36" pos:end="45:43"><name pos:start="45:36" pos:end="45:38">prd</name><operator pos:start="45:39" pos:end="45:39">.</operator><name pos:start="45:40" pos:end="45:43">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:36"><expr pos:start="47:13" pos:end="47:35"><name pos:start="47:13" pos:end="47:15">len</name> <operator pos:start="47:17" pos:end="47:17">=</operator> <name pos:start="47:19" pos:end="47:26"><name pos:start="47:19" pos:end="47:21">prd</name><operator pos:start="47:22" pos:end="47:22">.</operator><name pos:start="47:23" pos:end="47:26">size</name></name> <operator pos:start="47:28" pos:end="47:28">&amp;</operator> <literal type="number" pos:start="47:30" pos:end="47:35">0xfffe</literal></expr>;</expr_stmt>

            <if_stmt pos:start="49:13" pos:end="51:30"><if pos:start="49:13" pos:end="51:30">if <condition pos:start="49:16" pos:end="49:25">(<expr pos:start="49:17" pos:end="49:24"><name pos:start="49:17" pos:end="49:19">len</name> <operator pos:start="49:21" pos:end="49:22">==</operator> <literal type="number" pos:start="49:24" pos:end="49:24">0</literal></expr>)</condition><block type="pseudo" pos:start="51:17" pos:end="51:30"><block_content pos:start="51:17" pos:end="51:30">

                <expr_stmt pos:start="51:17" pos:end="51:30"><expr pos:start="51:17" pos:end="51:29"><name pos:start="51:17" pos:end="51:19">len</name> <operator pos:start="51:21" pos:end="51:21">=</operator> <literal type="number" pos:start="51:23" pos:end="51:29">0x10000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:34"><expr pos:start="53:13" pos:end="53:33"><name pos:start="53:13" pos:end="53:27"><name pos:start="53:13" pos:end="53:14">bm</name><operator pos:start="53:15" pos:end="53:16">-&gt;</operator><name pos:start="53:17" pos:end="53:27">cur_prd_len</name></name> <operator pos:start="53:29" pos:end="53:29">=</operator> <name pos:start="53:31" pos:end="53:33">len</name></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:40"><expr pos:start="55:13" pos:end="55:39"><name pos:start="55:13" pos:end="55:28"><name pos:start="55:13" pos:end="55:14">bm</name><operator pos:start="55:15" pos:end="55:16">-&gt;</operator><name pos:start="55:17" pos:end="55:28">cur_prd_addr</name></name> <operator pos:start="55:30" pos:end="55:30">=</operator> <name pos:start="55:32" pos:end="55:39"><name pos:start="55:32" pos:end="55:34">prd</name><operator pos:start="55:35" pos:end="55:35">.</operator><name pos:start="55:36" pos:end="55:39">addr</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:55"><expr pos:start="57:13" pos:end="57:54"><name pos:start="57:13" pos:end="57:28"><name pos:start="57:13" pos:end="57:14">bm</name><operator pos:start="57:15" pos:end="57:16">-&gt;</operator><name pos:start="57:17" pos:end="57:28">cur_prd_last</name></name> <operator pos:start="57:30" pos:end="57:30">=</operator> <operator pos:start="57:32" pos:end="57:32">(</operator><name pos:start="57:33" pos:end="57:40"><name pos:start="57:33" pos:end="57:35">prd</name><operator pos:start="57:36" pos:end="57:36">.</operator><name pos:start="57:37" pos:end="57:40">size</name></name> <operator pos:start="57:42" pos:end="57:42">&amp;</operator> <literal type="number" pos:start="57:44" pos:end="57:53">0x80000000</literal><operator pos:start="57:54" pos:end="57:54">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="61:9" pos:end="63:32"><if pos:start="61:9" pos:end="63:32">if <condition pos:start="61:12" pos:end="61:32">(<expr pos:start="61:13" pos:end="61:31"><name pos:start="61:13" pos:end="61:13">l</name> <operator pos:start="61:15" pos:end="61:15">&gt;</operator> <name pos:start="61:17" pos:end="61:31"><name pos:start="61:17" pos:end="61:18">bm</name><operator pos:start="61:19" pos:end="61:20">-&gt;</operator><name pos:start="61:21" pos:end="61:31">cur_prd_len</name></name></expr>)</condition><block type="pseudo" pos:start="63:13" pos:end="63:32"><block_content pos:start="63:13" pos:end="63:32">

            <expr_stmt pos:start="63:13" pos:end="63:32"><expr pos:start="63:13" pos:end="63:31"><name pos:start="63:13" pos:end="63:13">l</name> <operator pos:start="63:15" pos:end="63:15">=</operator> <name pos:start="63:17" pos:end="63:31"><name pos:start="63:17" pos:end="63:18">bm</name><operator pos:start="63:19" pos:end="63:20">-&gt;</operator><name pos:start="63:21" pos:end="63:31">cur_prd_len</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="65:9" pos:end="87:9"><if pos:start="65:9" pos:end="87:9">if <condition pos:start="65:12" pos:end="65:18">(<expr pos:start="65:13" pos:end="65:17"><name pos:start="65:13" pos:end="65:13">l</name> <operator pos:start="65:15" pos:end="65:15">&gt;</operator> <literal type="number" pos:start="65:17" pos:end="65:17">0</literal></expr>)</condition> <block pos:start="65:20" pos:end="87:9">{<block_content pos:start="67:13" pos:end="85:36">

            <if_stmt pos:start="67:13" pos:end="79:13"><if pos:start="67:13" pos:end="73:13">if <condition pos:start="67:16" pos:end="67:25">(<expr pos:start="67:17" pos:end="67:24"><name pos:start="67:17" pos:end="67:24">is_write</name></expr>)</condition> <block pos:start="67:27" pos:end="73:13">{<block_content pos:start="69:17" pos:end="71:80">

                <expr_stmt pos:start="69:17" pos:end="71:80"><expr pos:start="69:17" pos:end="71:79"><call pos:start="69:17" pos:end="71:79"><name pos:start="69:17" pos:end="69:41">cpu_physical_memory_write</name><argument_list pos:start="69:42" pos:end="71:79">(<argument pos:start="69:43" pos:end="69:58"><expr pos:start="69:43" pos:end="69:58"><name pos:start="69:43" pos:end="69:58"><name pos:start="69:43" pos:end="69:44">bm</name><operator pos:start="69:45" pos:end="69:46">-&gt;</operator><name pos:start="69:47" pos:end="69:58">cur_prd_addr</name></name></expr></argument>,

                                          <argument pos:start="71:43" pos:end="71:75"><expr pos:start="71:43" pos:end="71:75"><name pos:start="71:43" pos:end="71:54"><name pos:start="71:43" pos:end="71:43">s</name><operator pos:start="71:44" pos:end="71:45">-&gt;</operator><name pos:start="71:46" pos:end="71:54">io_buffer</name></name> <operator pos:start="71:56" pos:end="71:56">+</operator> <name pos:start="71:58" pos:end="71:75"><name pos:start="71:58" pos:end="71:58">s</name><operator pos:start="71:59" pos:end="71:60">-&gt;</operator><name pos:start="71:61" pos:end="71:75">io_buffer_index</name></name></expr></argument>, <argument pos:start="71:78" pos:end="71:78"><expr pos:start="71:78" pos:end="71:78"><name pos:start="71:78" pos:end="71:78">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="73:15" pos:end="79:13">else <block pos:start="73:20" pos:end="79:13">{<block_content pos:start="75:17" pos:end="77:80">

                <expr_stmt pos:start="75:17" pos:end="77:80"><expr pos:start="75:17" pos:end="77:79"><call pos:start="75:17" pos:end="77:79"><name pos:start="75:17" pos:end="75:40">cpu_physical_memory_read</name><argument_list pos:start="75:41" pos:end="77:79">(<argument pos:start="75:42" pos:end="75:57"><expr pos:start="75:42" pos:end="75:57"><name pos:start="75:42" pos:end="75:57"><name pos:start="75:42" pos:end="75:43">bm</name><operator pos:start="75:44" pos:end="75:45">-&gt;</operator><name pos:start="75:46" pos:end="75:57">cur_prd_addr</name></name></expr></argument>,

                                          <argument pos:start="77:43" pos:end="77:75"><expr pos:start="77:43" pos:end="77:75"><name pos:start="77:43" pos:end="77:54"><name pos:start="77:43" pos:end="77:43">s</name><operator pos:start="77:44" pos:end="77:45">-&gt;</operator><name pos:start="77:46" pos:end="77:54">io_buffer</name></name> <operator pos:start="77:56" pos:end="77:56">+</operator> <name pos:start="77:58" pos:end="77:75"><name pos:start="77:58" pos:end="77:58">s</name><operator pos:start="77:59" pos:end="77:60">-&gt;</operator><name pos:start="77:61" pos:end="77:75">io_buffer_index</name></name></expr></argument>, <argument pos:start="77:78" pos:end="77:78"><expr pos:start="77:78" pos:end="77:78"><name pos:start="77:78" pos:end="77:78">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:34"><expr pos:start="81:13" pos:end="81:33"><name pos:start="81:13" pos:end="81:28"><name pos:start="81:13" pos:end="81:14">bm</name><operator pos:start="81:15" pos:end="81:16">-&gt;</operator><name pos:start="81:17" pos:end="81:28">cur_prd_addr</name></name> <operator pos:start="81:30" pos:end="81:31">+=</operator> <name pos:start="81:33" pos:end="81:33">l</name></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:33"><expr pos:start="83:13" pos:end="83:32"><name pos:start="83:13" pos:end="83:27"><name pos:start="83:13" pos:end="83:14">bm</name><operator pos:start="83:15" pos:end="83:16">-&gt;</operator><name pos:start="83:17" pos:end="83:27">cur_prd_len</name></name> <operator pos:start="83:29" pos:end="83:30">-=</operator> <name pos:start="83:32" pos:end="83:32">l</name></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:36"><expr pos:start="85:13" pos:end="85:35"><name pos:start="85:13" pos:end="85:30"><name pos:start="85:13" pos:end="85:13">s</name><operator pos:start="85:14" pos:end="85:15">-&gt;</operator><name pos:start="85:16" pos:end="85:30">io_buffer_index</name></name> <operator pos:start="85:32" pos:end="85:33">+=</operator> <name pos:start="85:35" pos:end="85:35">l</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <return pos:start="91:5" pos:end="91:13">return <expr pos:start="91:12" pos:end="91:12"><literal type="number" pos:start="91:12" pos:end="91:12">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
