<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14529.c" pos:tabs="8"><function pos:start="1:1" pos:end="117:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:34">pxb_dev_realize_common</name><parameter_list pos:start="1:35" pos:end="1:75">(<parameter pos:start="1:36" pos:end="1:49"><decl pos:start="1:36" pos:end="1:49"><type pos:start="1:36" pos:end="1:49"><name pos:start="1:36" pos:end="1:44">PCIDevice</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">dev</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:60"><decl pos:start="1:52" pos:end="1:60"><type pos:start="1:52" pos:end="1:60"><name pos:start="1:52" pos:end="1:55">bool</name></type> <name pos:start="1:57" pos:end="1:60">pcie</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:74"><decl pos:start="1:63" pos:end="1:74"><type pos:start="1:63" pos:end="1:74"><name pos:start="1:63" pos:end="1:67">Error</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier><modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:74">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="117:1">{<block_content pos:start="5:5" pos:end="115:29">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:10">PXBDev</name> <modifier pos:start="5:12" pos:end="5:12">*</modifier></type><name pos:start="5:13" pos:end="5:15">pxb</name> <init pos:start="5:17" pos:end="5:37">= <expr pos:start="5:19" pos:end="5:37"><call pos:start="5:19" pos:end="5:37"><name pos:start="5:19" pos:end="5:32">convert_to_pxb</name><argument_list pos:start="5:33" pos:end="5:37">(<argument pos:start="5:34" pos:end="5:36"><expr pos:start="5:34" pos:end="5:36"><name pos:start="5:34" pos:end="5:36">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">DeviceState</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:19">ds</name></decl>, <decl pos:start="7:22" pos:end="7:32"><type ref="prev" pos:start="7:5" pos:end="7:17"><modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:25">bds</name> <init pos:start="7:27" pos:end="7:32">= <expr pos:start="7:29" pos:end="7:32"><name pos:start="7:29" pos:end="7:32">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:10">PCIBus</name> <modifier pos:start="9:12" pos:end="9:12">*</modifier></type><name pos:start="9:13" pos:end="9:15">bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:32"><decl pos:start="11:5" pos:end="11:31"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:24">dev_name</name> <init pos:start="11:26" pos:end="11:31">= <expr pos:start="11:28" pos:end="11:31"><name pos:start="11:28" pos:end="11:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:9">Error</name> <modifier pos:start="13:11" pos:end="13:11">*</modifier></type><name pos:start="13:12" pos:end="13:20">local_err</name> <init pos:start="13:22" pos:end="13:27">= <expr pos:start="13:24" pos:end="13:27"><name pos:start="13:24" pos:end="13:27">NULL</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="25:5"><if pos:start="17:5" pos:end="25:5">if <condition pos:start="17:8" pos:end="19:40">(<expr pos:start="17:9" pos:end="19:39"><name pos:start="17:9" pos:end="17:22"><name pos:start="17:9" pos:end="17:11">pxb</name><operator pos:start="17:12" pos:end="17:13">-&gt;</operator><name pos:start="17:14" pos:end="17:22">numa_node</name></name> <operator pos:start="17:24" pos:end="17:25">!=</operator> <name pos:start="17:27" pos:end="17:46">NUMA_NODE_UNASSIGNED</name> <operator pos:start="17:48" pos:end="17:49">&amp;&amp;</operator>

        <name pos:start="19:9" pos:end="19:22"><name pos:start="19:9" pos:end="19:11">pxb</name><operator pos:start="19:12" pos:end="19:13">-&gt;</operator><name pos:start="19:14" pos:end="19:22">numa_node</name></name> <operator pos:start="19:24" pos:end="19:25">&gt;=</operator> <name pos:start="19:27" pos:end="19:39">nb_numa_nodes</name></expr>)</condition> <block pos:start="19:42" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:15">

        <expr_stmt pos:start="21:9" pos:end="21:65"><expr pos:start="21:9" pos:end="21:64"><call pos:start="21:9" pos:end="21:64"><name pos:start="21:9" pos:end="21:18">error_setg</name><argument_list pos:start="21:19" pos:end="21:64">(<argument pos:start="21:20" pos:end="21:23"><expr pos:start="21:20" pos:end="21:23"><name pos:start="21:20" pos:end="21:23">errp</name></expr></argument>, <argument pos:start="21:26" pos:end="21:47"><expr pos:start="21:26" pos:end="21:47"><literal type="string" pos:start="21:26" pos:end="21:47">"Illegal numa node %d"</literal></expr></argument>, <argument pos:start="21:50" pos:end="21:63"><expr pos:start="21:50" pos:end="21:63"><name pos:start="21:50" pos:end="21:63"><name pos:start="21:50" pos:end="21:52">pxb</name><operator pos:start="21:53" pos:end="21:54">-&gt;</operator><name pos:start="21:55" pos:end="21:63">numa_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="29:5" pos:end="33:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:38">(<expr pos:start="29:9" pos:end="29:37"><name pos:start="29:9" pos:end="29:20"><name pos:start="29:9" pos:end="29:11">dev</name><operator pos:start="29:12" pos:end="29:13">-&gt;</operator><name pos:start="29:14" pos:end="29:17">qdev</name><operator pos:start="29:18" pos:end="29:18">.</operator><name pos:start="29:19" pos:end="29:20">id</name></name> <operator pos:start="29:22" pos:end="29:23">&amp;&amp;</operator> <operator pos:start="29:25" pos:end="29:25">*</operator><name pos:start="29:26" pos:end="29:37"><name pos:start="29:26" pos:end="29:28">dev</name><operator pos:start="29:29" pos:end="29:30">-&gt;</operator><name pos:start="29:31" pos:end="29:34">qdev</name><operator pos:start="29:35" pos:end="29:35">.</operator><name pos:start="29:36" pos:end="29:37">id</name></name></expr>)</condition> <block pos:start="29:40" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:32">

        <expr_stmt pos:start="31:9" pos:end="31:32"><expr pos:start="31:9" pos:end="31:31"><name pos:start="31:9" pos:end="31:16">dev_name</name> <operator pos:start="31:18" pos:end="31:18">=</operator> <name pos:start="31:20" pos:end="31:31"><name pos:start="31:20" pos:end="31:22">dev</name><operator pos:start="31:23" pos:end="31:24">-&gt;</operator><name pos:start="31:25" pos:end="31:28">qdev</name><operator pos:start="31:29" pos:end="31:29">.</operator><name pos:start="31:30" pos:end="31:31">id</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:42"><expr pos:start="37:5" pos:end="37:41"><name pos:start="37:5" pos:end="37:6">ds</name> <operator pos:start="37:8" pos:end="37:8">=</operator> <call pos:start="37:10" pos:end="37:41"><name pos:start="37:10" pos:end="37:20">qdev_create</name><argument_list pos:start="37:21" pos:end="37:41">(<argument pos:start="37:22" pos:end="37:25"><expr pos:start="37:22" pos:end="37:25"><name pos:start="37:22" pos:end="37:25">NULL</name></expr></argument>, <argument pos:start="37:28" pos:end="37:40"><expr pos:start="37:28" pos:end="37:40"><name pos:start="37:28" pos:end="37:40">TYPE_PXB_HOST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="55:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:13">(<expr pos:start="39:9" pos:end="39:12"><name pos:start="39:9" pos:end="39:12">pcie</name></expr>)</condition> <block pos:start="39:15" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:79">

        <expr_stmt pos:start="41:9" pos:end="41:79"><expr pos:start="41:9" pos:end="41:78"><name pos:start="41:9" pos:end="41:11">bus</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <call pos:start="41:15" pos:end="41:78"><name pos:start="41:15" pos:end="41:30">pci_root_bus_new</name><argument_list pos:start="41:31" pos:end="41:78">(<argument pos:start="41:32" pos:end="41:33"><expr pos:start="41:32" pos:end="41:33"><name pos:start="41:32" pos:end="41:33">ds</name></expr></argument>, <argument pos:start="41:36" pos:end="41:43"><expr pos:start="41:36" pos:end="41:43"><name pos:start="41:36" pos:end="41:43">dev_name</name></expr></argument>, <argument pos:start="41:46" pos:end="41:49"><expr pos:start="41:46" pos:end="41:49"><name pos:start="41:46" pos:end="41:49">NULL</name></expr></argument>, <argument pos:start="41:52" pos:end="41:55"><expr pos:start="41:52" pos:end="41:55"><name pos:start="41:52" pos:end="41:55">NULL</name></expr></argument>, <argument pos:start="41:58" pos:end="41:58"><expr pos:start="41:58" pos:end="41:58"><literal type="number" pos:start="41:58" pos:end="41:58">0</literal></expr></argument>, <argument pos:start="41:61" pos:end="41:77"><expr pos:start="41:61" pos:end="41:77"><name pos:start="41:61" pos:end="41:77">TYPE_PXB_PCIE_BUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="43:7" pos:end="55:5">else <block pos:start="43:12" pos:end="55:5">{<block_content pos:start="45:9" pos:end="53:64">

        <expr_stmt pos:start="45:9" pos:end="45:80"><expr pos:start="45:9" pos:end="45:79"><name pos:start="45:9" pos:end="45:11">bus</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <call pos:start="45:15" pos:end="45:79"><name pos:start="45:15" pos:end="45:30">pci_root_bus_new</name><argument_list pos:start="45:31" pos:end="45:79">(<argument pos:start="45:32" pos:end="45:33"><expr pos:start="45:32" pos:end="45:33"><name pos:start="45:32" pos:end="45:33">ds</name></expr></argument>, <argument pos:start="45:36" pos:end="45:49"><expr pos:start="45:36" pos:end="45:49"><literal type="string" pos:start="45:36" pos:end="45:49">"pxb-internal"</literal></expr></argument>, <argument pos:start="45:52" pos:end="45:55"><expr pos:start="45:52" pos:end="45:55"><name pos:start="45:52" pos:end="45:55">NULL</name></expr></argument>, <argument pos:start="45:58" pos:end="45:61"><expr pos:start="45:58" pos:end="45:61"><name pos:start="45:58" pos:end="45:61">NULL</name></expr></argument>, <argument pos:start="45:64" pos:end="45:64"><expr pos:start="45:64" pos:end="45:64"><literal type="number" pos:start="45:64" pos:end="45:64">0</literal></expr></argument>, <argument pos:start="45:67" pos:end="45:78"><expr pos:start="45:67" pos:end="45:78"><name pos:start="45:67" pos:end="45:78">TYPE_PXB_BUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:50"><expr pos:start="47:9" pos:end="47:49"><name pos:start="47:9" pos:end="47:11">bds</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <call pos:start="47:15" pos:end="47:49"><name pos:start="47:15" pos:end="47:25">qdev_create</name><argument_list pos:start="47:26" pos:end="47:49">(<argument pos:start="47:27" pos:end="47:34"><expr pos:start="47:27" pos:end="47:34"><call pos:start="47:27" pos:end="47:34"><name pos:start="47:27" pos:end="47:29">BUS</name><argument_list pos:start="47:30" pos:end="47:34">(<argument pos:start="47:31" pos:end="47:33"><expr pos:start="47:31" pos:end="47:33"><name pos:start="47:31" pos:end="47:33">bus</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="47:37" pos:end="47:48"><expr pos:start="47:37" pos:end="47:48"><literal type="string" pos:start="47:37" pos:end="47:48">"pci-bridge"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:27"><expr pos:start="49:9" pos:end="49:26"><name pos:start="49:9" pos:end="49:15"><name pos:start="49:9" pos:end="49:11">bds</name><operator pos:start="49:12" pos:end="49:13">-&gt;</operator><name pos:start="49:14" pos:end="49:15">id</name></name> <operator pos:start="49:17" pos:end="49:17">=</operator> <name pos:start="49:19" pos:end="49:26">dev_name</name></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:78"><expr pos:start="51:9" pos:end="51:77"><call pos:start="51:9" pos:end="51:77"><name pos:start="51:9" pos:end="51:27">qdev_prop_set_uint8</name><argument_list pos:start="51:28" pos:end="51:77">(<argument pos:start="51:29" pos:end="51:31"><expr pos:start="51:29" pos:end="51:31"><name pos:start="51:29" pos:end="51:31">bds</name></expr></argument>, <argument pos:start="51:34" pos:end="51:63"><expr pos:start="51:34" pos:end="51:63"><name pos:start="51:34" pos:end="51:63">PCI_BRIDGE_DEV_PROP_CHASSIS_NR</name></expr></argument>, <argument pos:start="51:66" pos:end="51:76"><expr pos:start="51:66" pos:end="51:76"><name pos:start="51:66" pos:end="51:76"><name pos:start="51:66" pos:end="51:68">pxb</name><operator pos:start="51:69" pos:end="51:70">-&gt;</operator><name pos:start="51:71" pos:end="51:76">bus_nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:64"><expr pos:start="53:9" pos:end="53:63"><call pos:start="53:9" pos:end="53:63"><name pos:start="53:9" pos:end="53:25">qdev_prop_set_bit</name><argument_list pos:start="53:26" pos:end="53:63">(<argument pos:start="53:27" pos:end="53:29"><expr pos:start="53:27" pos:end="53:29"><name pos:start="53:27" pos:end="53:29">bds</name></expr></argument>, <argument pos:start="53:32" pos:end="53:55"><expr pos:start="53:32" pos:end="53:55"><name pos:start="53:32" pos:end="53:55">PCI_BRIDGE_DEV_PROP_SHPC</name></expr></argument>, <argument pos:start="53:58" pos:end="53:62"><expr pos:start="53:58" pos:end="53:62"><name pos:start="53:58" pos:end="53:62">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:26"><expr pos:start="59:5" pos:end="59:25"><name pos:start="59:5" pos:end="59:19"><name pos:start="59:5" pos:end="59:7">bus</name><operator pos:start="59:8" pos:end="59:9">-&gt;</operator><name pos:start="59:10" pos:end="59:19">parent_dev</name></name> <operator pos:start="59:21" pos:end="59:21">=</operator> <name pos:start="59:23" pos:end="59:25">dev</name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:57"><expr pos:start="61:5" pos:end="61:56"><name pos:start="61:5" pos:end="61:26"><name pos:start="61:5" pos:end="61:7">bus</name><operator pos:start="61:8" pos:end="61:9">-&gt;</operator><name pos:start="61:10" pos:end="61:26">address_space_mem</name></name> <operator pos:start="61:28" pos:end="61:28">=</operator> <name pos:start="61:30" pos:end="61:56"><name pos:start="61:30" pos:end="61:32">dev</name><operator pos:start="61:33" pos:end="61:34">-&gt;</operator><name pos:start="61:35" pos:end="61:37">bus</name><operator pos:start="61:38" pos:end="61:39">-&gt;</operator><name pos:start="61:40" pos:end="61:56">address_space_mem</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:55"><expr pos:start="63:5" pos:end="63:54"><name pos:start="63:5" pos:end="63:25"><name pos:start="63:5" pos:end="63:7">bus</name><operator pos:start="63:8" pos:end="63:9">-&gt;</operator><name pos:start="63:10" pos:end="63:25">address_space_io</name></name> <operator pos:start="63:27" pos:end="63:27">=</operator> <name pos:start="63:29" pos:end="63:54"><name pos:start="63:29" pos:end="63:31">dev</name><operator pos:start="63:32" pos:end="63:33">-&gt;</operator><name pos:start="63:34" pos:end="63:36">bus</name><operator pos:start="63:37" pos:end="63:38">-&gt;</operator><name pos:start="63:39" pos:end="63:54">address_space_io</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:34"><expr pos:start="65:5" pos:end="65:33"><name pos:start="65:5" pos:end="65:16"><name pos:start="65:5" pos:end="65:7">bus</name><operator pos:start="65:8" pos:end="65:9">-&gt;</operator><name pos:start="65:10" pos:end="65:16">map_irq</name></name> <operator pos:start="65:18" pos:end="65:18">=</operator> <name pos:start="65:20" pos:end="65:33">pxb_map_irq_fn</name></expr>;</expr_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:35"><expr pos:start="69:5" pos:end="69:34"><call pos:start="69:5" pos:end="69:23"><name pos:start="69:5" pos:end="69:19">PCI_HOST_BRIDGE</name><argument_list pos:start="69:20" pos:end="69:23">(<argument pos:start="69:21" pos:end="69:22"><expr pos:start="69:21" pos:end="69:22"><name pos:start="69:21" pos:end="69:22">ds</name></expr></argument>)</argument_list></call><operator pos:start="69:24" pos:end="69:25">-&gt;</operator><name pos:start="69:26" pos:end="69:28">bus</name> <operator pos:start="69:30" pos:end="69:30">=</operator> <name pos:start="69:32" pos:end="69:34">bus</name></expr>;</expr_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:43"><expr pos:start="73:5" pos:end="73:42"><call pos:start="73:5" pos:end="73:42"><name pos:start="73:5" pos:end="73:20">pxb_register_bus</name><argument_list pos:start="73:21" pos:end="73:42">(<argument pos:start="73:22" pos:end="73:24"><expr pos:start="73:22" pos:end="73:24"><name pos:start="73:22" pos:end="73:24">dev</name></expr></argument>, <argument pos:start="73:27" pos:end="73:29"><expr pos:start="73:27" pos:end="73:29"><name pos:start="73:27" pos:end="73:29">bus</name></expr></argument>, <argument pos:start="73:32" pos:end="73:41"><expr pos:start="73:32" pos:end="73:41"><operator pos:start="73:32" pos:end="73:32">&amp;</operator><name pos:start="73:33" pos:end="73:41">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="75:5" pos:end="81:5"><if pos:start="75:5" pos:end="81:5">if <condition pos:start="75:8" pos:end="75:18">(<expr pos:start="75:9" pos:end="75:17"><name pos:start="75:9" pos:end="75:17">local_err</name></expr>)</condition> <block pos:start="75:20" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:30">

        <expr_stmt pos:start="77:9" pos:end="77:41"><expr pos:start="77:9" pos:end="77:40"><call pos:start="77:9" pos:end="77:40"><name pos:start="77:9" pos:end="77:23">error_propagate</name><argument_list pos:start="77:24" pos:end="77:40">(<argument pos:start="77:25" pos:end="77:28"><expr pos:start="77:25" pos:end="77:28"><name pos:start="77:25" pos:end="77:28">errp</name></expr></argument>, <argument pos:start="77:31" pos:end="77:39"><expr pos:start="77:31" pos:end="77:39"><name pos:start="77:31" pos:end="77:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="79:9" pos:end="79:30">goto <name pos:start="79:14" pos:end="79:29">err_register_bus</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:25"><expr pos:start="85:5" pos:end="85:24"><call pos:start="85:5" pos:end="85:24"><name pos:start="85:5" pos:end="85:20">qdev_init_nofail</name><argument_list pos:start="85:21" pos:end="85:24">(<argument pos:start="85:22" pos:end="85:23"><expr pos:start="85:22" pos:end="85:23"><name pos:start="85:22" pos:end="85:23">ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="87:5" pos:end="91:5"><if pos:start="87:5" pos:end="91:5">if <condition pos:start="87:8" pos:end="87:12">(<expr pos:start="87:9" pos:end="87:11"><name pos:start="87:9" pos:end="87:11">bds</name></expr>)</condition> <block pos:start="87:14" pos:end="91:5">{<block_content pos:start="89:9" pos:end="89:30">

        <expr_stmt pos:start="89:9" pos:end="89:30"><expr pos:start="89:9" pos:end="89:29"><call pos:start="89:9" pos:end="89:29"><name pos:start="89:9" pos:end="89:24">qdev_init_nofail</name><argument_list pos:start="89:25" pos:end="89:29">(<argument pos:start="89:26" pos:end="89:28"><expr pos:start="89:26" pos:end="89:28"><name pos:start="89:26" pos:end="89:28">bds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="95:5" pos:end="97:72"><expr pos:start="95:5" pos:end="97:71"><call pos:start="95:5" pos:end="97:71"><name pos:start="95:5" pos:end="95:30">pci_word_test_and_set_mask</name><argument_list pos:start="95:31" pos:end="97:71">(<argument pos:start="95:32" pos:end="95:55"><expr pos:start="95:32" pos:end="95:55"><name pos:start="95:32" pos:end="95:42"><name pos:start="95:32" pos:end="95:34">dev</name><operator pos:start="95:35" pos:end="95:36">-&gt;</operator><name pos:start="95:37" pos:end="95:42">config</name></name> <operator pos:start="95:44" pos:end="95:44">+</operator> <name pos:start="95:46" pos:end="95:55">PCI_STATUS</name></expr></argument>,

                               <argument pos:start="97:32" pos:end="97:70"><expr pos:start="97:32" pos:end="97:70"><name pos:start="97:32" pos:end="97:47">PCI_STATUS_66MHZ</name> <operator pos:start="97:49" pos:end="97:49">|</operator> <name pos:start="97:51" pos:end="97:70">PCI_STATUS_FAST_BACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:61"><expr pos:start="99:5" pos:end="99:60"><call pos:start="99:5" pos:end="99:60"><name pos:start="99:5" pos:end="99:24">pci_config_set_class</name><argument_list pos:start="99:25" pos:end="99:60">(<argument pos:start="99:26" pos:end="99:36"><expr pos:start="99:26" pos:end="99:36"><name pos:start="99:26" pos:end="99:36"><name pos:start="99:26" pos:end="99:28">dev</name><operator pos:start="99:29" pos:end="99:30">-&gt;</operator><name pos:start="99:31" pos:end="99:36">config</name></name></expr></argument>, <argument pos:start="99:39" pos:end="99:59"><expr pos:start="99:39" pos:end="99:59"><name pos:start="99:39" pos:end="99:59">PCI_CLASS_BRIDGE_HOST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:72"><expr pos:start="103:5" pos:end="103:71"><name pos:start="103:5" pos:end="103:16">pxb_dev_list</name> <operator pos:start="103:18" pos:end="103:18">=</operator> <call pos:start="103:20" pos:end="103:71"><name pos:start="103:20" pos:end="103:39">g_list_insert_sorted</name><argument_list pos:start="103:40" pos:end="103:71">(<argument pos:start="103:41" pos:end="103:52"><expr pos:start="103:41" pos:end="103:52"><name pos:start="103:41" pos:end="103:52">pxb_dev_list</name></expr></argument>, <argument pos:start="103:55" pos:end="103:57"><expr pos:start="103:55" pos:end="103:57"><name pos:start="103:55" pos:end="103:57">pxb</name></expr></argument>, <argument pos:start="103:60" pos:end="103:70"><expr pos:start="103:60" pos:end="103:70"><name pos:start="103:60" pos:end="103:70">pxb_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="105:5" pos:end="105:11">return;</return>



<label pos:start="109:1" pos:end="109:17"><name pos:start="109:1" pos:end="109:16">err_register_bus</name>:</label>

    <expr_stmt pos:start="111:5" pos:end="111:30"><expr pos:start="111:5" pos:end="111:29"><call pos:start="111:5" pos:end="111:29"><name pos:start="111:5" pos:end="111:16">object_unref</name><argument_list pos:start="111:17" pos:end="111:29">(<argument pos:start="111:18" pos:end="111:28"><expr pos:start="111:18" pos:end="111:28"><call pos:start="111:18" pos:end="111:28"><name pos:start="111:18" pos:end="111:23">OBJECT</name><argument_list pos:start="111:24" pos:end="111:28">(<argument pos:start="111:25" pos:end="111:27"><expr pos:start="111:25" pos:end="111:27"><name pos:start="111:25" pos:end="111:27">bds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:33"><expr pos:start="113:5" pos:end="113:32"><call pos:start="113:5" pos:end="113:32"><name pos:start="113:5" pos:end="113:19">object_unparent</name><argument_list pos:start="113:20" pos:end="113:32">(<argument pos:start="113:21" pos:end="113:31"><expr pos:start="113:21" pos:end="113:31"><call pos:start="113:21" pos:end="113:31"><name pos:start="113:21" pos:end="113:26">OBJECT</name><argument_list pos:start="113:27" pos:end="113:31">(<argument pos:start="113:28" pos:end="113:30"><expr pos:start="113:28" pos:end="113:30"><name pos:start="113:28" pos:end="113:30">bus</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:29"><expr pos:start="115:5" pos:end="115:28"><call pos:start="115:5" pos:end="115:28"><name pos:start="115:5" pos:end="115:16">object_unref</name><argument_list pos:start="115:17" pos:end="115:28">(<argument pos:start="115:18" pos:end="115:27"><expr pos:start="115:18" pos:end="115:27"><call pos:start="115:18" pos:end="115:27"><name pos:start="115:18" pos:end="115:23">OBJECT</name><argument_list pos:start="115:24" pos:end="115:27">(<argument pos:start="115:25" pos:end="115:26"><expr pos:start="115:25" pos:end="115:26"><name pos:start="115:25" pos:end="115:26">ds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
