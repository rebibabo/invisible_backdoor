<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9827.c" pos:tabs="8"><function pos:start="1:1" pos:end="51:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:32">tcg_handle_interrupt</name><parameter_list pos:start="1:33" pos:end="1:57">(<parameter pos:start="1:34" pos:end="1:46"><decl pos:start="1:34" pos:end="1:46"><type pos:start="1:34" pos:end="1:46"><name pos:start="1:34" pos:end="1:41">CPUState</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:46">cpu</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:56"><decl pos:start="1:49" pos:end="1:56"><type pos:start="1:49" pos:end="1:56"><name pos:start="1:49" pos:end="1:51">int</name></type> <name pos:start="1:53" pos:end="1:56">mask</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="51:1">{<block_content pos:start="5:5" pos:end="49:5">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:16">old_mask</name></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:38"><expr pos:start="9:5" pos:end="9:37"><name pos:start="9:5" pos:end="9:12">old_mask</name> <operator pos:start="9:14" pos:end="9:14">=</operator> <name pos:start="9:16" pos:end="9:37"><name pos:start="9:16" pos:end="9:18">cpu</name><operator pos:start="9:19" pos:end="9:20">-&gt;</operator><name pos:start="9:21" pos:end="9:37">interrupt_request</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="11:5" pos:end="11:35"><expr pos:start="11:5" pos:end="11:34"><name pos:start="11:5" pos:end="11:26"><name pos:start="11:5" pos:end="11:7">cpu</name><operator pos:start="11:8" pos:end="11:9">-&gt;</operator><name pos:start="11:10" pos:end="11:26">interrupt_request</name></name> <operator pos:start="11:28" pos:end="11:29">|=</operator> <name pos:start="11:31" pos:end="11:34">mask</name></expr>;</expr_stmt>



    <comment type="block" pos:start="15:5" pos:end="21:7">/*

     * If called from iothread context, wake the target cpu in

     * case its halted.

     */</comment>

    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:31">(<expr pos:start="23:9" pos:end="23:30"><operator pos:start="23:9" pos:end="23:9">!</operator><call pos:start="23:10" pos:end="23:30"><name pos:start="23:10" pos:end="23:25">qemu_cpu_is_self</name><argument_list pos:start="23:26" pos:end="23:30">(<argument pos:start="23:27" pos:end="23:29"><expr pos:start="23:27" pos:end="23:29"><name pos:start="23:27" pos:end="23:29">cpu</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:33" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:15">

        <expr_stmt pos:start="25:9" pos:end="25:27"><expr pos:start="25:9" pos:end="25:26"><call pos:start="25:9" pos:end="25:26"><name pos:start="25:9" pos:end="25:21">qemu_cpu_kick</name><argument_list pos:start="25:22" pos:end="25:26">(<argument pos:start="25:23" pos:end="25:25"><expr pos:start="25:23" pos:end="25:25"><name pos:start="25:23" pos:end="25:25">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="33:5" pos:end="49:5"><if pos:start="33:5" pos:end="45:5">if <condition pos:start="33:8" pos:end="33:19">(<expr pos:start="33:9" pos:end="33:18"><name pos:start="33:9" pos:end="33:18">use_icount</name></expr>)</condition> <block pos:start="33:21" pos:end="45:5">{<block_content pos:start="35:9" pos:end="43:9">

        <expr_stmt pos:start="35:9" pos:end="35:43"><expr pos:start="35:9" pos:end="35:42"><name pos:start="35:9" pos:end="35:33"><name pos:start="35:9" pos:end="35:11">cpu</name><operator pos:start="35:12" pos:end="35:13">-&gt;</operator><name pos:start="35:14" pos:end="35:24">icount_decr</name><operator pos:start="35:25" pos:end="35:25">.</operator><name pos:start="35:26" pos:end="35:28">u16</name><operator pos:start="35:29" pos:end="35:29">.</operator><name pos:start="35:30" pos:end="35:33">high</name></name> <operator pos:start="35:35" pos:end="35:35">=</operator> <literal type="number" pos:start="35:37" pos:end="35:42">0xffff</literal></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="43:9"><if pos:start="37:9" pos:end="43:9">if <condition pos:start="37:12" pos:end="39:39">(<expr pos:start="37:13" pos:end="39:38"><operator pos:start="37:13" pos:end="37:13">!</operator><name pos:start="37:14" pos:end="37:27"><name pos:start="37:14" pos:end="37:16">cpu</name><operator pos:start="37:17" pos:end="37:18">-&gt;</operator><name pos:start="37:19" pos:end="37:27">can_do_io</name></name>

            <operator pos:start="39:13" pos:end="39:14">&amp;&amp;</operator> <operator pos:start="39:16" pos:end="39:16">(</operator><name pos:start="39:17" pos:end="39:20">mask</name> <operator pos:start="39:22" pos:end="39:22">&amp;</operator> <operator pos:start="39:24" pos:end="39:24">~</operator><name pos:start="39:25" pos:end="39:32">old_mask</name><operator pos:start="39:33" pos:end="39:33">)</operator> <operator pos:start="39:35" pos:end="39:36">!=</operator> <literal type="number" pos:start="39:38" pos:end="39:38">0</literal></expr>)</condition> <block pos:start="39:41" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:73">

            <expr_stmt pos:start="41:13" pos:end="41:73"><expr pos:start="41:13" pos:end="41:72"><call pos:start="41:13" pos:end="41:72"><name pos:start="41:13" pos:end="41:21">cpu_abort</name><argument_list pos:start="41:22" pos:end="41:72">(<argument pos:start="41:23" pos:end="41:25"><expr pos:start="41:23" pos:end="41:25"><name pos:start="41:23" pos:end="41:25">cpu</name></expr></argument>, <argument pos:start="41:28" pos:end="41:71"><expr pos:start="41:28" pos:end="41:71"><literal type="string" pos:start="41:28" pos:end="41:71">"Raised interrupt while not in I/O function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="45:7" pos:end="49:5">else <block pos:start="45:12" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:30">

        <expr_stmt pos:start="47:9" pos:end="47:30"><expr pos:start="47:9" pos:end="47:29"><name pos:start="47:9" pos:end="47:25"><name pos:start="47:9" pos:end="47:11">cpu</name><operator pos:start="47:12" pos:end="47:13">-&gt;</operator><name pos:start="47:14" pos:end="47:25">tcg_exit_req</name></name> <operator pos:start="47:27" pos:end="47:27">=</operator> <literal type="number" pos:start="47:29" pos:end="47:29">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
