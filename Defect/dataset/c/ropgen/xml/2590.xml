<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2590.c" pos:tabs="8"><function pos:start="1:1" pos:end="125:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:24">get_physical_address</name> <parameter_list pos:start="1:26" pos:end="3:50">(<parameter pos:start="1:27" pos:end="1:39"><decl pos:start="1:27" pos:end="1:39"><type pos:start="1:27" pos:end="1:39"><name pos:start="1:27" pos:end="1:34">CPUState</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">env</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:55"><decl pos:start="1:42" pos:end="1:55"><type pos:start="1:42" pos:end="1:55"><name pos:start="1:42" pos:end="1:50">mmu_ctx_t</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:55">ctx</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:75"><decl pos:start="1:58" pos:end="1:75"><type pos:start="1:58" pos:end="1:75"><name pos:start="1:58" pos:end="1:69">target_ulong</name></type> <name pos:start="1:71" pos:end="1:75">eaddr</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:32"><decl pos:start="3:27" pos:end="3:32"><type pos:start="3:27" pos:end="3:32"><name pos:start="3:27" pos:end="3:29">int</name></type> <name pos:start="3:31" pos:end="3:32">rw</name></decl></parameter>, <parameter pos:start="3:35" pos:end="3:49"><decl pos:start="3:35" pos:end="3:49"><type pos:start="3:35" pos:end="3:49"><name pos:start="3:35" pos:end="3:37">int</name></type> <name pos:start="3:39" pos:end="3:49">access_type</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="125:1">{<block_content pos:start="7:5" pos:end="123:15">

    <decl_stmt pos:start="7:5" pos:end="16:0"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>;</decl_stmt>



<cpp:if pos:start="11:1" pos:end="11:5">#<cpp:directive pos:start="11:2" pos:end="11:3">if</cpp:directive> <expr pos:start="11:5" pos:end="11:5"><literal type="number" pos:start="11:5" pos:end="11:5">0</literal></expr></cpp:if>

    qemu_log("%s\n", __func__);

<cpp:endif pos:start="15:1" pos:end="15:6">#<cpp:directive pos:start="15:2" pos:end="15:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="17:5" pos:end="120:0"><if pos:start="17:5" pos:end="25:5">if <condition pos:start="17:8" pos:end="19:52">(<expr pos:start="17:9" pos:end="19:51"><operator pos:start="17:9" pos:end="17:9">(</operator><name pos:start="17:10" pos:end="17:20">access_type</name> <operator pos:start="17:22" pos:end="17:23">==</operator> <name pos:start="17:25" pos:end="17:35">ACCESS_CODE</name> <operator pos:start="17:37" pos:end="17:38">&amp;&amp;</operator> <name pos:start="17:40" pos:end="17:45">msr_ir</name> <operator pos:start="17:47" pos:end="17:48">==</operator> <literal type="number" pos:start="17:50" pos:end="17:50">0</literal><operator pos:start="17:51" pos:end="17:51">)</operator> <operator pos:start="17:53" pos:end="17:54">||</operator>

        <operator pos:start="19:9" pos:end="19:9">(</operator><name pos:start="19:10" pos:end="19:20">access_type</name> <operator pos:start="19:22" pos:end="19:23">!=</operator> <name pos:start="19:25" pos:end="19:35">ACCESS_CODE</name> <operator pos:start="19:37" pos:end="19:38">&amp;&amp;</operator> <name pos:start="19:40" pos:end="19:45">msr_dr</name> <operator pos:start="19:47" pos:end="19:48">==</operator> <literal type="number" pos:start="19:50" pos:end="19:50">0</literal><operator pos:start="19:51" pos:end="19:51">)</operator></expr>)</condition> <block pos:start="19:54" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:50">

        <comment type="block" pos:start="21:9" pos:end="21:36">/* No address translation */</comment>

        <expr_stmt pos:start="23:9" pos:end="23:50"><expr pos:start="23:9" pos:end="23:49"><name pos:start="23:9" pos:end="23:11">ret</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <call pos:start="23:15" pos:end="23:49"><name pos:start="23:15" pos:end="23:28">check_physical</name><argument_list pos:start="23:29" pos:end="23:49">(<argument pos:start="23:30" pos:end="23:32"><expr pos:start="23:30" pos:end="23:32"><name pos:start="23:30" pos:end="23:32">env</name></expr></argument>, <argument pos:start="23:35" pos:end="23:37"><expr pos:start="23:35" pos:end="23:37"><name pos:start="23:35" pos:end="23:37">ctx</name></expr></argument>, <argument pos:start="23:40" pos:end="23:44"><expr pos:start="23:40" pos:end="23:44"><name pos:start="23:40" pos:end="23:44">eaddr</name></expr></argument>, <argument pos:start="23:47" pos:end="23:48"><expr pos:start="23:47" pos:end="23:48"><name pos:start="23:47" pos:end="23:48">rw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="25:7" pos:end="120:0">else <block pos:start="25:12" pos:end="120:0">{<block_content pos:start="27:9" pos:end="109:9">

        <expr_stmt pos:start="27:9" pos:end="27:17"><expr pos:start="27:9" pos:end="27:16"><name pos:start="27:9" pos:end="27:11">ret</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <operator pos:start="27:15" pos:end="27:15">-</operator><literal type="number" pos:start="27:16" pos:end="27:16">1</literal></expr>;</expr_stmt>

        <switch pos:start="29:9" pos:end="109:9">switch <condition pos:start="29:16" pos:end="29:31">(<expr pos:start="29:17" pos:end="29:30"><name pos:start="29:17" pos:end="29:30"><name pos:start="29:17" pos:end="29:19">env</name><operator pos:start="29:20" pos:end="29:21">-&gt;</operator><name pos:start="29:22" pos:end="29:30">mmu_model</name></name></expr>)</condition> <block pos:start="29:33" pos:end="109:9">{<block_content pos:start="31:9" pos:end="107:22">

        <case pos:start="31:9" pos:end="31:29">case <expr pos:start="31:14" pos:end="31:28"><name pos:start="31:14" pos:end="31:28">POWERPC_MMU_32B</name></expr>:</case>

        <case pos:start="33:9" pos:end="33:29">case <expr pos:start="33:14" pos:end="33:28"><name pos:start="33:14" pos:end="33:28">POWERPC_MMU_601</name></expr>:</case>

        <case pos:start="35:9" pos:end="35:34">case <expr pos:start="35:14" pos:end="35:33"><name pos:start="35:14" pos:end="35:33">POWERPC_MMU_SOFT_6xx</name></expr>:</case>

        <case pos:start="37:9" pos:end="40:0">case <expr pos:start="37:14" pos:end="37:34"><name pos:start="37:14" pos:end="37:34">POWERPC_MMU_SOFT_74xx</name></expr>:</case>

<cpp:if pos:start="39:1" pos:end="39:25">#<cpp:directive pos:start="39:2" pos:end="39:3">if</cpp:directive> <expr pos:start="39:5" pos:end="39:25"><call pos:start="39:5" pos:end="39:25"><name pos:start="39:5" pos:end="39:11">defined</name><argument_list pos:start="39:12" pos:end="39:25">(<argument pos:start="39:13" pos:end="39:24"><expr pos:start="39:13" pos:end="39:24"><name pos:start="39:13" pos:end="39:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <case pos:start="41:9" pos:end="41:29">case <expr pos:start="41:14" pos:end="41:28"><name pos:start="41:14" pos:end="41:28">POWERPC_MMU_620</name></expr>:</case>

        <case pos:start="43:9" pos:end="46:0">case <expr pos:start="43:14" pos:end="43:28"><name pos:start="43:14" pos:end="43:28">POWERPC_MMU_64B</name></expr>:</case>

<cpp:endif pos:start="45:1" pos:end="45:6">#<cpp:directive pos:start="45:2" pos:end="45:6">endif</cpp:directive></cpp:endif>

            <comment type="block" pos:start="47:13" pos:end="47:35">/* Try to find a BAT */</comment>

            <if_stmt pos:start="49:13" pos:end="51:64"><if pos:start="49:13" pos:end="51:64">if <condition pos:start="49:16" pos:end="49:34">(<expr pos:start="49:17" pos:end="49:33"><name pos:start="49:17" pos:end="49:28"><name pos:start="49:17" pos:end="49:19">env</name><operator pos:start="49:20" pos:end="49:21">-&gt;</operator><name pos:start="49:22" pos:end="49:28">nb_BATs</name></name> <operator pos:start="49:30" pos:end="49:31">!=</operator> <literal type="number" pos:start="49:33" pos:end="49:33">0</literal></expr>)</condition><block type="pseudo" pos:start="51:17" pos:end="51:64"><block_content pos:start="51:17" pos:end="51:64">

                <expr_stmt pos:start="51:17" pos:end="51:64"><expr pos:start="51:17" pos:end="51:63"><name pos:start="51:17" pos:end="51:19">ret</name> <operator pos:start="51:21" pos:end="51:21">=</operator> <call pos:start="51:23" pos:end="51:63"><name pos:start="51:23" pos:end="51:29">get_bat</name><argument_list pos:start="51:30" pos:end="51:63">(<argument pos:start="51:31" pos:end="51:33"><expr pos:start="51:31" pos:end="51:33"><name pos:start="51:31" pos:end="51:33">env</name></expr></argument>, <argument pos:start="51:36" pos:end="51:38"><expr pos:start="51:36" pos:end="51:38"><name pos:start="51:36" pos:end="51:38">ctx</name></expr></argument>, <argument pos:start="51:41" pos:end="51:45"><expr pos:start="51:41" pos:end="51:45"><name pos:start="51:41" pos:end="51:45">eaddr</name></expr></argument>, <argument pos:start="51:48" pos:end="51:49"><expr pos:start="51:48" pos:end="51:49"><name pos:start="51:48" pos:end="51:49">rw</name></expr></argument>, <argument pos:start="51:52" pos:end="51:62"><expr pos:start="51:52" pos:end="51:62"><name pos:start="51:52" pos:end="51:62">access_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="53:13" pos:end="59:13"><if pos:start="53:13" pos:end="59:13">if <condition pos:start="53:16" pos:end="53:24">(<expr pos:start="53:17" pos:end="53:23"><name pos:start="53:17" pos:end="53:19">ret</name> <operator pos:start="53:21" pos:end="53:21">&lt;</operator> <literal type="number" pos:start="53:23" pos:end="53:23">0</literal></expr>)</condition> <block pos:start="53:26" pos:end="59:13">{<block_content pos:start="57:17" pos:end="57:68">

                <comment type="block" pos:start="55:17" pos:end="55:70">/* We didn't match any BAT entry or don't have BATs */</comment>

                <expr_stmt pos:start="57:17" pos:end="57:68"><expr pos:start="57:17" pos:end="57:67"><name pos:start="57:17" pos:end="57:19">ret</name> <operator pos:start="57:21" pos:end="57:21">=</operator> <call pos:start="57:23" pos:end="57:67"><name pos:start="57:23" pos:end="57:33">get_segment</name><argument_list pos:start="57:34" pos:end="57:67">(<argument pos:start="57:35" pos:end="57:37"><expr pos:start="57:35" pos:end="57:37"><name pos:start="57:35" pos:end="57:37">env</name></expr></argument>, <argument pos:start="57:40" pos:end="57:42"><expr pos:start="57:40" pos:end="57:42"><name pos:start="57:40" pos:end="57:42">ctx</name></expr></argument>, <argument pos:start="57:45" pos:end="57:49"><expr pos:start="57:45" pos:end="57:49"><name pos:start="57:45" pos:end="57:49">eaddr</name></expr></argument>, <argument pos:start="57:52" pos:end="57:53"><expr pos:start="57:52" pos:end="57:53"><name pos:start="57:52" pos:end="57:53">rw</name></expr></argument>, <argument pos:start="57:56" pos:end="57:66"><expr pos:start="57:56" pos:end="57:66"><name pos:start="57:56" pos:end="57:66">access_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="61:13" pos:end="61:18">break;</break>

        <case pos:start="63:9" pos:end="63:34">case <expr pos:start="63:14" pos:end="63:33"><name pos:start="63:14" pos:end="63:33">POWERPC_MMU_SOFT_4xx</name></expr>:</case>

        <case pos:start="65:9" pos:end="65:36">case <expr pos:start="65:14" pos:end="65:35"><name pos:start="65:14" pos:end="65:35">POWERPC_MMU_SOFT_4xx_Z</name></expr>:</case>

            <expr_stmt pos:start="67:13" pos:end="69:63"><expr pos:start="67:13" pos:end="69:62"><name pos:start="67:13" pos:end="67:15">ret</name> <operator pos:start="67:17" pos:end="67:17">=</operator> <call pos:start="67:19" pos:end="69:62"><name pos:start="67:19" pos:end="67:45">mmu40x_get_physical_address</name><argument_list pos:start="67:46" pos:end="69:62">(<argument pos:start="67:47" pos:end="67:49"><expr pos:start="67:47" pos:end="67:49"><name pos:start="67:47" pos:end="67:49">env</name></expr></argument>, <argument pos:start="67:52" pos:end="67:54"><expr pos:start="67:52" pos:end="67:54"><name pos:start="67:52" pos:end="67:54">ctx</name></expr></argument>, <argument pos:start="67:57" pos:end="67:61"><expr pos:start="67:57" pos:end="67:61"><name pos:start="67:57" pos:end="67:61">eaddr</name></expr></argument>,

                                              <argument pos:start="69:47" pos:end="69:48"><expr pos:start="69:47" pos:end="69:48"><name pos:start="69:47" pos:end="69:48">rw</name></expr></argument>, <argument pos:start="69:51" pos:end="69:61"><expr pos:start="69:51" pos:end="69:61"><name pos:start="69:51" pos:end="69:61">access_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="71:13" pos:end="71:18">break;</break>

        <case pos:start="73:9" pos:end="73:31">case <expr pos:start="73:14" pos:end="73:30"><name pos:start="73:14" pos:end="73:30">POWERPC_MMU_BOOKE</name></expr>:</case>

            <expr_stmt pos:start="75:13" pos:end="77:65"><expr pos:start="75:13" pos:end="77:64"><name pos:start="75:13" pos:end="75:15">ret</name> <operator pos:start="75:17" pos:end="75:17">=</operator> <call pos:start="75:19" pos:end="77:64"><name pos:start="75:19" pos:end="75:47">mmubooke_get_physical_address</name><argument_list pos:start="75:48" pos:end="77:64">(<argument pos:start="75:49" pos:end="75:51"><expr pos:start="75:49" pos:end="75:51"><name pos:start="75:49" pos:end="75:51">env</name></expr></argument>, <argument pos:start="75:54" pos:end="75:56"><expr pos:start="75:54" pos:end="75:56"><name pos:start="75:54" pos:end="75:56">ctx</name></expr></argument>, <argument pos:start="75:59" pos:end="75:63"><expr pos:start="75:59" pos:end="75:63"><name pos:start="75:59" pos:end="75:63">eaddr</name></expr></argument>,

                                                <argument pos:start="77:49" pos:end="77:50"><expr pos:start="77:49" pos:end="77:50"><name pos:start="77:49" pos:end="77:50">rw</name></expr></argument>, <argument pos:start="77:53" pos:end="77:63"><expr pos:start="77:53" pos:end="77:63"><name pos:start="77:53" pos:end="77:63">access_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="79:13" pos:end="79:18">break;</break>

        <case pos:start="81:9" pos:end="81:32">case <expr pos:start="81:14" pos:end="81:31"><name pos:start="81:14" pos:end="81:31">POWERPC_MMU_MPC8xx</name></expr>:</case>

            <comment type="block" pos:start="83:13" pos:end="83:27">/* XXX: TODO */</comment>

            <expr_stmt pos:start="85:13" pos:end="85:68"><expr pos:start="85:13" pos:end="85:67"><call pos:start="85:13" pos:end="85:67"><name pos:start="85:13" pos:end="85:21">cpu_abort</name><argument_list pos:start="85:22" pos:end="85:67">(<argument pos:start="85:23" pos:end="85:25"><expr pos:start="85:23" pos:end="85:25"><name pos:start="85:23" pos:end="85:25">env</name></expr></argument>, <argument pos:start="85:28" pos:end="85:66"><expr pos:start="85:28" pos:end="85:66"><literal type="string" pos:start="85:28" pos:end="85:66">"MPC8xx MMU model is not implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="87:13" pos:end="87:18">break;</break>

        <case pos:start="89:9" pos:end="89:35">case <expr pos:start="89:14" pos:end="89:34"><name pos:start="89:14" pos:end="89:34">POWERPC_MMU_BOOKE_FSL</name></expr>:</case>

            <comment type="block" pos:start="91:13" pos:end="91:27">/* XXX: TODO */</comment>

            <expr_stmt pos:start="93:13" pos:end="93:68"><expr pos:start="93:13" pos:end="93:67"><call pos:start="93:13" pos:end="93:67"><name pos:start="93:13" pos:end="93:21">cpu_abort</name><argument_list pos:start="93:22" pos:end="93:67">(<argument pos:start="93:23" pos:end="93:25"><expr pos:start="93:23" pos:end="93:25"><name pos:start="93:23" pos:end="93:25">env</name></expr></argument>, <argument pos:start="93:28" pos:end="93:66"><expr pos:start="93:28" pos:end="93:66"><literal type="string" pos:start="93:28" pos:end="93:66">"BookE FSL MMU model not implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="95:13" pos:end="95:22">return <expr pos:start="95:20" pos:end="95:21"><operator pos:start="95:20" pos:end="95:20">-</operator><literal type="number" pos:start="95:21" pos:end="95:21">1</literal></expr>;</return>

        <case pos:start="97:9" pos:end="97:30">case <expr pos:start="97:14" pos:end="97:29"><name pos:start="97:14" pos:end="97:29">POWERPC_MMU_REAL</name></expr>:</case>

            <expr_stmt pos:start="99:13" pos:end="99:79"><expr pos:start="99:13" pos:end="99:78"><call pos:start="99:13" pos:end="99:78"><name pos:start="99:13" pos:end="99:21">cpu_abort</name><argument_list pos:start="99:22" pos:end="99:78">(<argument pos:start="99:23" pos:end="99:25"><expr pos:start="99:23" pos:end="99:25"><name pos:start="99:23" pos:end="99:25">env</name></expr></argument>, <argument pos:start="99:28" pos:end="99:77"><expr pos:start="99:28" pos:end="99:77"><literal type="string" pos:start="99:28" pos:end="99:77">"PowerPC in real mode do not do any translation\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="101:13" pos:end="101:22">return <expr pos:start="101:20" pos:end="101:21"><operator pos:start="101:20" pos:end="101:20">-</operator><literal type="number" pos:start="101:21" pos:end="101:21">1</literal></expr>;</return>

        <default pos:start="103:9" pos:end="103:16">default:</default>

            <expr_stmt pos:start="105:13" pos:end="105:61"><expr pos:start="105:13" pos:end="105:60"><call pos:start="105:13" pos:end="105:60"><name pos:start="105:13" pos:end="105:21">cpu_abort</name><argument_list pos:start="105:22" pos:end="105:60">(<argument pos:start="105:23" pos:end="105:25"><expr pos:start="105:23" pos:end="105:25"><name pos:start="105:23" pos:end="105:25">env</name></expr></argument>, <argument pos:start="105:28" pos:end="105:59"><expr pos:start="105:28" pos:end="105:59"><literal type="string" pos:start="105:28" pos:end="105:59">"Unknown or invalid MMU model\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="107:13" pos:end="107:22">return <expr pos:start="107:20" pos:end="107:21"><operator pos:start="107:20" pos:end="107:20">-</operator><literal type="number" pos:start="107:21" pos:end="107:21">1</literal></expr>;</return>

        </block_content>}</block></switch>

    </block_content>}</block></else></if_stmt>

<cpp:if pos:start="113:1" pos:end="113:5">#<cpp:directive pos:start="113:2" pos:end="113:3">if</cpp:directive> <expr pos:start="113:5" pos:end="113:5"><literal type="number" pos:start="113:5" pos:end="113:5">0</literal></expr></cpp:if>

    qemu_log("%s address " ADDRX " =&gt; %d " PADDRX "\n",

                __func__, eaddr, ret, ctx-&gt;raddr);

<cpp:endif pos:start="119:1" pos:end="119:6">#<cpp:directive pos:start="119:2" pos:end="119:6">endif</cpp:directive></cpp:endif>



    <return pos:start="123:5" pos:end="123:15">return <expr pos:start="123:12" pos:end="123:14"><name pos:start="123:12" pos:end="123:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
