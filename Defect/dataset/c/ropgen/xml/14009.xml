<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14009.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:40">qcrypto_ivgen_essiv_calculate</name><parameter_list pos:start="1:41" pos:end="7:54">(<parameter pos:start="1:42" pos:end="1:60"><decl pos:start="1:42" pos:end="1:60"><type pos:start="1:42" pos:end="1:60"><name pos:start="1:42" pos:end="1:53">QCryptoIVGen</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:60">ivgen</name></decl></parameter>,

                                         <parameter pos:start="3:42" pos:end="3:56"><decl pos:start="3:42" pos:end="3:56"><type pos:start="3:42" pos:end="3:56"><name pos:start="3:42" pos:end="3:49">uint64_t</name></type> <name pos:start="3:51" pos:end="3:56">sector</name></decl></parameter>,

                                         <parameter pos:start="5:42" pos:end="5:52"><decl pos:start="5:42" pos:end="5:52"><type pos:start="5:42" pos:end="5:52"><name pos:start="5:42" pos:end="5:48">uint8_t</name> <modifier pos:start="5:50" pos:end="5:50">*</modifier></type><name pos:start="5:51" pos:end="5:52">iv</name></decl></parameter>, <parameter pos:start="5:55" pos:end="5:64"><decl pos:start="5:55" pos:end="5:64"><type pos:start="5:55" pos:end="5:64"><name pos:start="5:55" pos:end="5:60">size_t</name></type> <name pos:start="5:62" pos:end="5:64">niv</name></decl></parameter>,

                                         <parameter pos:start="7:42" pos:end="7:53"><decl pos:start="7:42" pos:end="7:53"><type pos:start="7:42" pos:end="7:53"><name pos:start="7:42" pos:end="7:46">Error</name> <modifier pos:start="7:48" pos:end="7:48">*</modifier><modifier pos:start="7:49" pos:end="7:49">*</modifier></type><name pos:start="7:50" pos:end="7:53">errp</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="67:1">{<block_content pos:start="11:5" pos:end="65:13">

    <decl_stmt pos:start="11:5" pos:end="11:46"><decl pos:start="11:5" pos:end="11:45"><type pos:start="11:5" pos:end="11:23"><name pos:start="11:5" pos:end="11:21">QCryptoIVGenESSIV</name> <modifier pos:start="11:23" pos:end="11:23">*</modifier></type><name pos:start="11:24" pos:end="11:28">essiv</name> <init pos:start="11:30" pos:end="11:45">= <expr pos:start="11:32" pos:end="11:45"><name pos:start="11:32" pos:end="11:45"><name pos:start="11:32" pos:end="11:36">ivgen</name><operator pos:start="11:37" pos:end="11:38">-&gt;</operator><name pos:start="11:39" pos:end="11:45">private</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:63"><decl pos:start="13:5" pos:end="13:62"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">size_t</name></type> <name pos:start="13:12" pos:end="13:16">ndata</name> <init pos:start="13:18" pos:end="13:62">= <expr pos:start="13:20" pos:end="13:62"><call pos:start="13:20" pos:end="13:62"><name pos:start="13:20" pos:end="13:47">qcrypto_cipher_get_block_len</name><argument_list pos:start="13:48" pos:end="13:62">(<argument pos:start="13:49" pos:end="13:61"><expr pos:start="13:49" pos:end="13:61"><name pos:start="13:49" pos:end="13:61"><name pos:start="13:49" pos:end="13:53">ivgen</name><operator pos:start="13:54" pos:end="13:55">-&gt;</operator><name pos:start="13:56" pos:end="13:61">cipher</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:42"><decl pos:start="15:5" pos:end="15:41"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">uint8_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:17">data</name> <init pos:start="15:19" pos:end="15:41">= <expr pos:start="15:21" pos:end="15:41"><call pos:start="15:21" pos:end="15:41"><name pos:start="15:21" pos:end="15:25">g_new</name><argument_list pos:start="15:26" pos:end="15:41">(<argument pos:start="15:27" pos:end="15:33"><expr pos:start="15:27" pos:end="15:33"><name pos:start="15:27" pos:end="15:33">uint8_t</name></expr></argument>, <argument pos:start="15:36" pos:end="15:40"><expr pos:start="15:36" pos:end="15:40"><name pos:start="15:36" pos:end="15:40">ndata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:33"><expr pos:start="19:5" pos:end="19:32"><name pos:start="19:5" pos:end="19:10">sector</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <call pos:start="19:14" pos:end="19:32"><name pos:start="19:14" pos:end="19:24">cpu_to_le64</name><argument_list pos:start="19:25" pos:end="19:32">(<argument pos:start="19:26" pos:end="19:31"><expr pos:start="19:26" pos:end="19:31"><name pos:start="19:26" pos:end="19:31">sector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:44"><expr pos:start="21:5" pos:end="21:43"><call pos:start="21:5" pos:end="21:43"><name pos:start="21:5" pos:end="21:10">memcpy</name><argument_list pos:start="21:11" pos:end="21:43">(<argument pos:start="21:12" pos:end="21:15"><expr pos:start="21:12" pos:end="21:15"><name pos:start="21:12" pos:end="21:15">data</name></expr></argument>, <argument pos:start="21:18" pos:end="21:35"><expr pos:start="21:18" pos:end="21:35"><operator pos:start="21:18" pos:end="21:18">(</operator><name pos:start="21:19" pos:end="21:25">uint8_t</name> <operator pos:start="21:27" pos:end="21:27">*</operator><operator pos:start="21:28" pos:end="21:28">)</operator><operator pos:start="21:29" pos:end="21:29">&amp;</operator><name pos:start="21:30" pos:end="21:35">sector</name></expr></argument>, <argument pos:start="21:38" pos:end="21:42"><expr pos:start="21:38" pos:end="21:42"><name pos:start="21:38" pos:end="21:42">ndata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:31">(<expr pos:start="23:9" pos:end="23:30"><sizeof pos:start="23:9" pos:end="23:22">sizeof<argument_list pos:start="23:15" pos:end="23:22">(<argument pos:start="23:16" pos:end="23:21"><expr pos:start="23:16" pos:end="23:21"><name pos:start="23:16" pos:end="23:21">sector</name></expr></argument>)</argument_list></sizeof> <operator pos:start="23:24" pos:end="23:24">&lt;</operator> <name pos:start="23:26" pos:end="23:30">ndata</name></expr>)</condition> <block pos:start="23:33" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:65">

        <expr_stmt pos:start="25:9" pos:end="25:65"><expr pos:start="25:9" pos:end="25:64"><call pos:start="25:9" pos:end="25:64"><name pos:start="25:9" pos:end="25:14">memset</name><argument_list pos:start="25:15" pos:end="25:64">(<argument pos:start="25:16" pos:end="25:36"><expr pos:start="25:16" pos:end="25:36"><name pos:start="25:16" pos:end="25:19">data</name> <operator pos:start="25:21" pos:end="25:21">+</operator> <sizeof pos:start="25:23" pos:end="25:36">sizeof<argument_list pos:start="25:29" pos:end="25:36">(<argument pos:start="25:30" pos:end="25:35"><expr pos:start="25:30" pos:end="25:35"><name pos:start="25:30" pos:end="25:35">sector</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="25:39" pos:end="25:39"><expr pos:start="25:39" pos:end="25:39"><literal type="number" pos:start="25:39" pos:end="25:39">0</literal></expr></argument>, <argument pos:start="25:42" pos:end="25:63"><expr pos:start="25:42" pos:end="25:63"><name pos:start="25:42" pos:end="25:46">ndata</name> <operator pos:start="25:48" pos:end="25:48">-</operator> <sizeof pos:start="25:50" pos:end="25:63">sizeof<argument_list pos:start="25:56" pos:end="25:63">(<argument pos:start="25:57" pos:end="25:62"><expr pos:start="25:57" pos:end="25:62"><name pos:start="25:57" pos:end="25:62">sector</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="31:5" pos:end="45:5"><if pos:start="31:5" pos:end="45:5">if <condition pos:start="31:8" pos:end="39:41">(<expr pos:start="31:9" pos:end="39:40"><call pos:start="31:9" pos:end="39:36"><name pos:start="31:9" pos:end="31:30">qcrypto_cipher_encrypt</name><argument_list pos:start="31:31" pos:end="39:36">(<argument pos:start="31:32" pos:end="31:44"><expr pos:start="31:32" pos:end="31:44"><name pos:start="31:32" pos:end="31:44"><name pos:start="31:32" pos:end="31:36">essiv</name><operator pos:start="31:37" pos:end="31:38">-&gt;</operator><name pos:start="31:39" pos:end="31:44">cipher</name></name></expr></argument>,

                               <argument pos:start="33:32" pos:end="33:35"><expr pos:start="33:32" pos:end="33:35"><name pos:start="33:32" pos:end="33:35">data</name></expr></argument>,

                               <argument pos:start="35:32" pos:end="35:35"><expr pos:start="35:32" pos:end="35:35"><name pos:start="35:32" pos:end="35:35">data</name></expr></argument>,

                               <argument pos:start="37:32" pos:end="37:36"><expr pos:start="37:32" pos:end="37:36"><name pos:start="37:32" pos:end="37:36">ndata</name></expr></argument>,

                               <argument pos:start="39:32" pos:end="39:35"><expr pos:start="39:32" pos:end="39:35"><name pos:start="39:32" pos:end="39:35">errp</name></expr></argument>)</argument_list></call> <operator pos:start="39:38" pos:end="39:38">&lt;</operator> <literal type="number" pos:start="39:40" pos:end="39:40">0</literal></expr>)</condition> <block pos:start="39:43" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:18">

        <expr_stmt pos:start="41:9" pos:end="41:21"><expr pos:start="41:9" pos:end="41:20"><call pos:start="41:9" pos:end="41:20"><name pos:start="41:9" pos:end="41:14">g_free</name><argument_list pos:start="41:15" pos:end="41:20">(<argument pos:start="41:16" pos:end="41:19"><expr pos:start="41:16" pos:end="41:19"><name pos:start="41:16" pos:end="41:19">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:18">return <expr pos:start="43:16" pos:end="43:17"><operator pos:start="43:16" pos:end="43:16">-</operator><literal type="number" pos:start="43:17" pos:end="43:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="49:5" pos:end="53:5"><if pos:start="49:5" pos:end="53:5">if <condition pos:start="49:8" pos:end="49:20">(<expr pos:start="49:9" pos:end="49:19"><name pos:start="49:9" pos:end="49:13">ndata</name> <operator pos:start="49:15" pos:end="49:15">&gt;</operator> <name pos:start="49:17" pos:end="49:19">niv</name></expr>)</condition> <block pos:start="49:22" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:20">

        <expr_stmt pos:start="51:9" pos:end="51:20"><expr pos:start="51:9" pos:end="51:19"><name pos:start="51:9" pos:end="51:13">ndata</name> <operator pos:start="51:15" pos:end="51:15">=</operator> <name pos:start="51:17" pos:end="51:19">niv</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:28"><expr pos:start="55:5" pos:end="55:27"><call pos:start="55:5" pos:end="55:27"><name pos:start="55:5" pos:end="55:10">memcpy</name><argument_list pos:start="55:11" pos:end="55:27">(<argument pos:start="55:12" pos:end="55:13"><expr pos:start="55:12" pos:end="55:13"><name pos:start="55:12" pos:end="55:13">iv</name></expr></argument>, <argument pos:start="55:16" pos:end="55:19"><expr pos:start="55:16" pos:end="55:19"><name pos:start="55:16" pos:end="55:19">data</name></expr></argument>, <argument pos:start="55:22" pos:end="55:26"><expr pos:start="55:22" pos:end="55:26"><name pos:start="55:22" pos:end="55:26">ndata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="61:5"><if pos:start="57:5" pos:end="61:5">if <condition pos:start="57:8" pos:end="57:20">(<expr pos:start="57:9" pos:end="57:19"><name pos:start="57:9" pos:end="57:13">ndata</name> <operator pos:start="57:15" pos:end="57:15">&lt;</operator> <name pos:start="57:17" pos:end="57:19">niv</name></expr>)</condition> <block pos:start="57:22" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:43">

        <expr_stmt pos:start="59:9" pos:end="59:43"><expr pos:start="59:9" pos:end="59:42"><call pos:start="59:9" pos:end="59:42"><name pos:start="59:9" pos:end="59:14">memset</name><argument_list pos:start="59:15" pos:end="59:42">(<argument pos:start="59:16" pos:end="59:25"><expr pos:start="59:16" pos:end="59:25"><name pos:start="59:16" pos:end="59:17">iv</name> <operator pos:start="59:19" pos:end="59:19">+</operator> <name pos:start="59:21" pos:end="59:25">ndata</name></expr></argument>, <argument pos:start="59:28" pos:end="59:28"><expr pos:start="59:28" pos:end="59:28"><literal type="number" pos:start="59:28" pos:end="59:28">0</literal></expr></argument>, <argument pos:start="59:31" pos:end="59:41"><expr pos:start="59:31" pos:end="59:41"><name pos:start="59:31" pos:end="59:33">niv</name> <operator pos:start="59:35" pos:end="59:35">-</operator> <name pos:start="59:37" pos:end="59:41">ndata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:17"><expr pos:start="63:5" pos:end="63:16"><call pos:start="63:5" pos:end="63:16"><name pos:start="63:5" pos:end="63:10">g_free</name><argument_list pos:start="63:11" pos:end="63:16">(<argument pos:start="63:12" pos:end="63:15"><expr pos:start="63:12" pos:end="63:15"><name pos:start="63:12" pos:end="63:15">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="65:5" pos:end="65:13">return <expr pos:start="65:12" pos:end="65:12"><literal type="number" pos:start="65:12" pos:end="65:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
