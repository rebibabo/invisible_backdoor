<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3357.c" pos:tabs="8"><function pos:start="1:1" pos:end="123:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:38">nvenc_alloc_surface</name><parameter_list pos:start="1:39" pos:end="1:70">(<parameter pos:start="1:40" pos:end="1:60"><decl pos:start="1:40" pos:end="1:60"><type pos:start="1:40" pos:end="1:60"><name pos:start="1:40" pos:end="1:53">AVCodecContext</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:60">avctx</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:69"><decl pos:start="1:63" pos:end="1:69"><type pos:start="1:63" pos:end="1:69"><name pos:start="1:63" pos:end="1:65">int</name></type> <name pos:start="1:67" pos:end="1:69">idx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="123:1">{<block_content pos:start="5:5" pos:end="121:13">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">NvencContext</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:21">ctx</name> <init pos:start="5:23" pos:end="5:40">= <expr pos:start="5:25" pos:end="5:40"><name pos:start="5:25" pos:end="5:40"><name pos:start="5:25" pos:end="5:29">avctx</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:59"><decl pos:start="7:5" pos:end="7:58"><type pos:start="7:5" pos:end="7:27"><name pos:start="7:5" pos:end="7:25">NvencDynLoadFunctions</name> <modifier pos:start="7:27" pos:end="7:27">*</modifier></type><name pos:start="7:28" pos:end="7:32">dl_fn</name> <init pos:start="7:34" pos:end="7:58">= <expr pos:start="7:36" pos:end="7:58"><operator pos:start="7:36" pos:end="7:36">&amp;</operator><name pos:start="7:37" pos:end="7:58"><name pos:start="7:37" pos:end="7:39">ctx</name><operator pos:start="7:40" pos:end="7:41">-&gt;</operator><name pos:start="7:42" pos:end="7:58">nvenc_dload_funcs</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:63"><decl pos:start="9:5" pos:end="9:62"><type pos:start="9:5" pos:end="9:33"><name pos:start="9:5" pos:end="9:31">NV_ENCODE_API_FUNCTION_LIST</name> <modifier pos:start="9:33" pos:end="9:33">*</modifier></type><name pos:start="9:34" pos:end="9:40">p_nvenc</name> <init pos:start="9:42" pos:end="9:62">= <expr pos:start="9:44" pos:end="9:62"><operator pos:start="9:44" pos:end="9:44">&amp;</operator><name pos:start="9:45" pos:end="9:62"><name pos:start="9:45" pos:end="9:49">dl_fn</name><operator pos:start="9:50" pos:end="9:51">-&gt;</operator><name pos:start="9:52" pos:end="9:62">nvenc_funcs</name></name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:15">NVENCSTATUS</name></type> <name pos:start="13:17" pos:end="13:25">nv_status</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:52"><decl pos:start="15:5" pos:end="15:51"><type pos:start="15:5" pos:end="15:34"><name pos:start="15:5" pos:end="15:34">NV_ENC_CREATE_BITSTREAM_BUFFER</name></type> <name pos:start="15:36" pos:end="15:43">allocOut</name> <init pos:start="15:45" pos:end="15:51">= <expr pos:start="15:47" pos:end="15:51"><block pos:start="15:47" pos:end="15:51">{ <expr pos:start="15:49" pos:end="15:49"><literal type="number" pos:start="15:49" pos:end="15:49">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:58"><expr pos:start="17:5" pos:end="17:57"><name pos:start="17:5" pos:end="17:20"><name pos:start="17:5" pos:end="17:12">allocOut</name><operator pos:start="17:13" pos:end="17:13">.</operator><name pos:start="17:14" pos:end="17:20">version</name></name> <operator pos:start="17:22" pos:end="17:22">=</operator> <name pos:start="17:24" pos:end="17:57">NV_ENC_CREATE_BITSTREAM_BUFFER_VER</name></expr>;</expr_stmt>



    <if_stmt pos:start="21:5" pos:end="77:5"><if pos:start="21:5" pos:end="29:5">if <condition pos:start="21:8" pos:end="21:42">(<expr pos:start="21:9" pos:end="21:41"><name pos:start="21:9" pos:end="21:22"><name pos:start="21:9" pos:end="21:13">avctx</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:22">pix_fmt</name></name> <operator pos:start="21:24" pos:end="21:25">==</operator> <name pos:start="21:27" pos:end="21:41">AV_PIX_FMT_CUDA</name></expr>)</condition> <block pos:start="21:44" pos:end="29:5">{<block_content pos:start="23:9" pos:end="27:35">

        <expr_stmt pos:start="23:9" pos:end="23:53"><expr pos:start="23:9" pos:end="23:52"><name pos:start="23:9" pos:end="23:26"><name pos:start="23:9" pos:end="23:11">ctx</name><operator pos:start="23:12" pos:end="23:13">-&gt;</operator><name pos:start="23:14" pos:end="23:21">surfaces</name><index pos:start="23:22" pos:end="23:26">[<expr pos:start="23:23" pos:end="23:25"><name pos:start="23:23" pos:end="23:25">idx</name></expr>]</index></name><operator pos:start="23:27" pos:end="23:27">.</operator><name pos:start="23:28" pos:end="23:33">in_ref</name> <operator pos:start="23:35" pos:end="23:35">=</operator> <call pos:start="23:37" pos:end="23:52"><name pos:start="23:37" pos:end="23:50">av_frame_alloc</name><argument_list pos:start="23:51" pos:end="23:52">()</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="27:35"><if pos:start="25:9" pos:end="27:35">if <condition pos:start="25:12" pos:end="25:39">(<expr pos:start="25:13" pos:end="25:38"><operator pos:start="25:13" pos:end="25:13">!</operator><name pos:start="25:14" pos:end="25:31"><name pos:start="25:14" pos:end="25:16">ctx</name><operator pos:start="25:17" pos:end="25:18">-&gt;</operator><name pos:start="25:19" pos:end="25:26">surfaces</name><index pos:start="25:27" pos:end="25:31">[<expr pos:start="25:28" pos:end="25:30"><name pos:start="25:28" pos:end="25:30">idx</name></expr>]</index></name><operator pos:start="25:32" pos:end="25:32">.</operator><name pos:start="25:33" pos:end="25:38">in_ref</name></expr>)</condition><block type="pseudo" pos:start="27:13" pos:end="27:35"><block_content pos:start="27:13" pos:end="27:35">

            <return pos:start="27:13" pos:end="27:35">return <expr pos:start="27:20" pos:end="27:34"><call pos:start="27:20" pos:end="27:34"><name pos:start="27:20" pos:end="27:26">AVERROR</name><argument_list pos:start="27:27" pos:end="27:34">(<argument pos:start="27:28" pos:end="27:33"><expr pos:start="27:28" pos:end="27:33"><name pos:start="27:28" pos:end="27:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="29:7" pos:end="77:5">else <block pos:start="29:12" pos:end="77:5">{<block_content pos:start="31:9" pos:end="75:53">

        <decl_stmt pos:start="31:9" pos:end="31:53"><decl pos:start="31:9" pos:end="31:52"><type pos:start="31:9" pos:end="31:34"><name pos:start="31:9" pos:end="31:34">NV_ENC_CREATE_INPUT_BUFFER</name></type> <name pos:start="31:36" pos:end="31:44">allocSurf</name> <init pos:start="31:46" pos:end="31:52">= <expr pos:start="31:48" pos:end="31:52"><block pos:start="31:48" pos:end="31:52">{ <expr pos:start="31:50" pos:end="31:50"><literal type="number" pos:start="31:50" pos:end="31:50">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="35:9" pos:end="35:79"><expr pos:start="35:9" pos:end="35:78"><name pos:start="35:9" pos:end="35:26"><name pos:start="35:9" pos:end="35:11">ctx</name><operator pos:start="35:12" pos:end="35:13">-&gt;</operator><name pos:start="35:14" pos:end="35:21">surfaces</name><index pos:start="35:22" pos:end="35:26">[<expr pos:start="35:23" pos:end="35:25"><name pos:start="35:23" pos:end="35:25">idx</name></expr>]</index></name><operator pos:start="35:27" pos:end="35:27">.</operator><name pos:start="35:28" pos:end="35:33">format</name> <operator pos:start="35:35" pos:end="35:35">=</operator> <call pos:start="35:37" pos:end="35:78"><name pos:start="35:37" pos:end="35:59">nvenc_map_buffer_format</name><argument_list pos:start="35:60" pos:end="35:78">(<argument pos:start="35:61" pos:end="35:77"><expr pos:start="35:61" pos:end="35:77"><name pos:start="35:61" pos:end="35:77"><name pos:start="35:61" pos:end="35:63">ctx</name><operator pos:start="35:64" pos:end="35:65">-&gt;</operator><name pos:start="35:66" pos:end="35:77">data_pix_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="45:9"><if pos:start="37:9" pos:end="45:9">if <condition pos:start="37:12" pos:end="37:72">(<expr pos:start="37:13" pos:end="37:71"><name pos:start="37:13" pos:end="37:30"><name pos:start="37:13" pos:end="37:15">ctx</name><operator pos:start="37:16" pos:end="37:17">-&gt;</operator><name pos:start="37:18" pos:end="37:25">surfaces</name><index pos:start="37:26" pos:end="37:30">[<expr pos:start="37:27" pos:end="37:29"><name pos:start="37:27" pos:end="37:29">idx</name></expr>]</index></name><operator pos:start="37:31" pos:end="37:31">.</operator><name pos:start="37:32" pos:end="37:37">format</name> <operator pos:start="37:39" pos:end="37:40">==</operator> <name pos:start="37:42" pos:end="37:71">NV_ENC_BUFFER_FORMAT_UNDEFINED</name></expr>)</condition> <block pos:start="37:74" pos:end="45:9">{<block_content pos:start="39:13" pos:end="43:35">

            <expr_stmt pos:start="39:13" pos:end="41:59"><expr pos:start="39:13" pos:end="41:58"><call pos:start="39:13" pos:end="41:58"><name pos:start="39:13" pos:end="39:18">av_log</name><argument_list pos:start="39:19" pos:end="41:58">(<argument pos:start="39:20" pos:end="39:24"><expr pos:start="39:20" pos:end="39:24"><name pos:start="39:20" pos:end="39:24">avctx</name></expr></argument>, <argument pos:start="39:27" pos:end="39:38"><expr pos:start="39:27" pos:end="39:38"><name pos:start="39:27" pos:end="39:38">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="39:41" pos:end="39:74"><expr pos:start="39:41" pos:end="39:74"><literal type="string" pos:start="39:41" pos:end="39:74">"Invalid input pixel format: %s\n"</literal></expr></argument>,

                   <argument pos:start="41:20" pos:end="41:57"><expr pos:start="41:20" pos:end="41:57"><call pos:start="41:20" pos:end="41:57"><name pos:start="41:20" pos:end="41:38">av_get_pix_fmt_name</name><argument_list pos:start="41:39" pos:end="41:57">(<argument pos:start="41:40" pos:end="41:56"><expr pos:start="41:40" pos:end="41:56"><name pos:start="41:40" pos:end="41:56"><name pos:start="41:40" pos:end="41:42">ctx</name><operator pos:start="41:43" pos:end="41:44">-&gt;</operator><name pos:start="41:45" pos:end="41:56">data_pix_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="43:13" pos:end="43:35">return <expr pos:start="43:20" pos:end="43:34"><call pos:start="43:20" pos:end="43:34"><name pos:start="43:20" pos:end="43:26">AVERROR</name><argument_list pos:start="43:27" pos:end="43:34">(<argument pos:start="43:28" pos:end="43:33"><expr pos:start="43:28" pos:end="43:33"><name pos:start="43:28" pos:end="43:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="49:9" pos:end="49:59"><expr pos:start="49:9" pos:end="49:58"><name pos:start="49:9" pos:end="49:25"><name pos:start="49:9" pos:end="49:17">allocSurf</name><operator pos:start="49:18" pos:end="49:18">.</operator><name pos:start="49:19" pos:end="49:25">version</name></name> <operator pos:start="49:27" pos:end="49:27">=</operator> <name pos:start="49:29" pos:end="49:58">NV_ENC_CREATE_INPUT_BUFFER_VER</name></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:52"><expr pos:start="51:9" pos:end="51:51"><name pos:start="51:9" pos:end="51:23"><name pos:start="51:9" pos:end="51:17">allocSurf</name><operator pos:start="51:18" pos:end="51:18">.</operator><name pos:start="51:19" pos:end="51:23">width</name></name> <operator pos:start="51:25" pos:end="51:25">=</operator> <operator pos:start="51:27" pos:end="51:27">(</operator><name pos:start="51:28" pos:end="51:39"><name pos:start="51:28" pos:end="51:32">avctx</name><operator pos:start="51:33" pos:end="51:34">-&gt;</operator><name pos:start="51:35" pos:end="51:39">width</name></name> <operator pos:start="51:41" pos:end="51:41">+</operator> <literal type="number" pos:start="51:43" pos:end="51:44">31</literal><operator pos:start="51:45" pos:end="51:45">)</operator> <operator pos:start="51:47" pos:end="51:47">&amp;</operator> <operator pos:start="51:49" pos:end="51:49">~</operator><literal type="number" pos:start="51:50" pos:end="51:51">31</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:54"><expr pos:start="53:9" pos:end="53:53"><name pos:start="53:9" pos:end="53:24"><name pos:start="53:9" pos:end="53:17">allocSurf</name><operator pos:start="53:18" pos:end="53:18">.</operator><name pos:start="53:19" pos:end="53:24">height</name></name> <operator pos:start="53:26" pos:end="53:26">=</operator> <operator pos:start="53:28" pos:end="53:28">(</operator><name pos:start="53:29" pos:end="53:41"><name pos:start="53:29" pos:end="53:33">avctx</name><operator pos:start="53:34" pos:end="53:35">-&gt;</operator><name pos:start="53:36" pos:end="53:41">height</name></name> <operator pos:start="53:43" pos:end="53:43">+</operator> <literal type="number" pos:start="53:45" pos:end="53:46">31</literal><operator pos:start="53:47" pos:end="53:47">)</operator> <operator pos:start="53:49" pos:end="53:49">&amp;</operator> <operator pos:start="53:51" pos:end="53:51">~</operator><literal type="number" pos:start="53:52" pos:end="53:53">31</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:64"><expr pos:start="55:9" pos:end="55:63"><name pos:start="55:9" pos:end="55:28"><name pos:start="55:9" pos:end="55:17">allocSurf</name><operator pos:start="55:18" pos:end="55:18">.</operator><name pos:start="55:19" pos:end="55:28">memoryHeap</name></name> <operator pos:start="55:30" pos:end="55:30">=</operator> <name pos:start="55:32" pos:end="55:63">NV_ENC_MEMORY_HEAP_SYSMEM_CACHED</name></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:56"><expr pos:start="57:9" pos:end="57:55"><name pos:start="57:9" pos:end="57:27"><name pos:start="57:9" pos:end="57:17">allocSurf</name><operator pos:start="57:18" pos:end="57:18">.</operator><name pos:start="57:19" pos:end="57:27">bufferFmt</name></name> <operator pos:start="57:29" pos:end="57:29">=</operator> <name pos:start="57:31" pos:end="57:48"><name pos:start="57:31" pos:end="57:33">ctx</name><operator pos:start="57:34" pos:end="57:35">-&gt;</operator><name pos:start="57:36" pos:end="57:43">surfaces</name><index pos:start="57:44" pos:end="57:48">[<expr pos:start="57:45" pos:end="57:47"><name pos:start="57:45" pos:end="57:47">idx</name></expr>]</index></name><operator pos:start="57:49" pos:end="57:49">.</operator><name pos:start="57:50" pos:end="57:55">format</name></expr>;</expr_stmt>



        <expr_stmt pos:start="61:9" pos:end="61:80"><expr pos:start="61:9" pos:end="61:79"><name pos:start="61:9" pos:end="61:17">nv_status</name> <operator pos:start="61:19" pos:end="61:19">=</operator> <call pos:start="61:21" pos:end="61:79"><name pos:start="61:21" pos:end="61:51"><name pos:start="61:21" pos:end="61:27">p_nvenc</name><operator pos:start="61:28" pos:end="61:29">-&gt;</operator><name pos:start="61:30" pos:end="61:51">nvEncCreateInputBuffer</name></name><argument_list pos:start="61:52" pos:end="61:79">(<argument pos:start="61:53" pos:end="61:66"><expr pos:start="61:53" pos:end="61:66"><name pos:start="61:53" pos:end="61:66"><name pos:start="61:53" pos:end="61:55">ctx</name><operator pos:start="61:56" pos:end="61:57">-&gt;</operator><name pos:start="61:58" pos:end="61:66">nvencoder</name></name></expr></argument>, <argument pos:start="61:69" pos:end="61:78"><expr pos:start="61:69" pos:end="61:78"><operator pos:start="61:69" pos:end="61:69">&amp;</operator><name pos:start="61:70" pos:end="61:78">allocSurf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="67:9"><if pos:start="63:9" pos:end="67:9">if <condition pos:start="63:12" pos:end="63:40">(<expr pos:start="63:13" pos:end="63:39"><name pos:start="63:13" pos:end="63:21">nv_status</name> <operator pos:start="63:23" pos:end="63:24">!=</operator> <name pos:start="63:26" pos:end="63:39">NV_ENC_SUCCESS</name></expr>)</condition> <block pos:start="63:42" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:83">

            <return pos:start="65:13" pos:end="65:83">return <expr pos:start="65:20" pos:end="65:82"><call pos:start="65:20" pos:end="65:82"><name pos:start="65:20" pos:end="65:36">nvenc_print_error</name><argument_list pos:start="65:37" pos:end="65:82">(<argument pos:start="65:38" pos:end="65:42"><expr pos:start="65:38" pos:end="65:42"><name pos:start="65:38" pos:end="65:42">avctx</name></expr></argument>, <argument pos:start="65:45" pos:end="65:53"><expr pos:start="65:45" pos:end="65:53"><name pos:start="65:45" pos:end="65:53">nv_status</name></expr></argument>, <argument pos:start="65:56" pos:end="65:81"><expr pos:start="65:56" pos:end="65:81"><literal type="string" pos:start="65:56" pos:end="65:81">"CreateInputBuffer failed"</literal></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="71:9" pos:end="71:65"><expr pos:start="71:9" pos:end="71:64"><name pos:start="71:9" pos:end="71:26"><name pos:start="71:9" pos:end="71:11">ctx</name><operator pos:start="71:12" pos:end="71:13">-&gt;</operator><name pos:start="71:14" pos:end="71:21">surfaces</name><index pos:start="71:22" pos:end="71:26">[<expr pos:start="71:23" pos:end="71:25"><name pos:start="71:23" pos:end="71:25">idx</name></expr>]</index></name><operator pos:start="71:27" pos:end="71:27">.</operator><name pos:start="71:28" pos:end="71:40">input_surface</name> <operator pos:start="71:42" pos:end="71:42">=</operator> <name pos:start="71:44" pos:end="71:64"><name pos:start="71:44" pos:end="71:52">allocSurf</name><operator pos:start="71:53" pos:end="71:53">.</operator><name pos:start="71:54" pos:end="71:64">inputBuffer</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:51"><expr pos:start="73:9" pos:end="73:50"><name pos:start="73:9" pos:end="73:26"><name pos:start="73:9" pos:end="73:11">ctx</name><operator pos:start="73:12" pos:end="73:13">-&gt;</operator><name pos:start="73:14" pos:end="73:21">surfaces</name><index pos:start="73:22" pos:end="73:26">[<expr pos:start="73:23" pos:end="73:25"><name pos:start="73:23" pos:end="73:25">idx</name></expr>]</index></name><operator pos:start="73:27" pos:end="73:27">.</operator><name pos:start="73:28" pos:end="73:32">width</name> <operator pos:start="73:34" pos:end="73:34">=</operator> <name pos:start="73:36" pos:end="73:50"><name pos:start="73:36" pos:end="73:44">allocSurf</name><operator pos:start="73:45" pos:end="73:45">.</operator><name pos:start="73:46" pos:end="73:50">width</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:53"><expr pos:start="75:9" pos:end="75:52"><name pos:start="75:9" pos:end="75:26"><name pos:start="75:9" pos:end="75:11">ctx</name><operator pos:start="75:12" pos:end="75:13">-&gt;</operator><name pos:start="75:14" pos:end="75:21">surfaces</name><index pos:start="75:22" pos:end="75:26">[<expr pos:start="75:23" pos:end="75:25"><name pos:start="75:23" pos:end="75:25">idx</name></expr>]</index></name><operator pos:start="75:27" pos:end="75:27">.</operator><name pos:start="75:28" pos:end="75:33">height</name> <operator pos:start="75:35" pos:end="75:35">=</operator> <name pos:start="75:37" pos:end="75:52"><name pos:start="75:37" pos:end="75:45">allocSurf</name><operator pos:start="75:46" pos:end="75:46">.</operator><name pos:start="75:47" pos:end="75:52">height</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:37"><expr pos:start="81:5" pos:end="81:36"><name pos:start="81:5" pos:end="81:22"><name pos:start="81:5" pos:end="81:7">ctx</name><operator pos:start="81:8" pos:end="81:9">-&gt;</operator><name pos:start="81:10" pos:end="81:17">surfaces</name><index pos:start="81:18" pos:end="81:22">[<expr pos:start="81:19" pos:end="81:21"><name pos:start="81:19" pos:end="81:21">idx</name></expr>]</index></name><operator pos:start="81:23" pos:end="81:23">.</operator><name pos:start="81:24" pos:end="81:32">lockCount</name> <operator pos:start="81:34" pos:end="81:34">=</operator> <literal type="number" pos:start="81:36" pos:end="81:36">0</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="85:5" pos:end="87:64">/* 1MB is large enough to hold most output frames.

     * NVENC increases this automaticaly if it is not enough. */</comment>

    <expr_stmt pos:start="89:5" pos:end="89:32"><expr pos:start="89:5" pos:end="89:31"><name pos:start="89:5" pos:end="89:17"><name pos:start="89:5" pos:end="89:12">allocOut</name><operator pos:start="89:13" pos:end="89:13">.</operator><name pos:start="89:14" pos:end="89:17">size</name></name> <operator pos:start="89:19" pos:end="89:19">=</operator> <literal type="number" pos:start="89:21" pos:end="89:24">1024</literal> <operator pos:start="89:26" pos:end="89:26">*</operator> <literal type="number" pos:start="89:28" pos:end="89:31">1024</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:59"><expr pos:start="93:5" pos:end="93:58"><name pos:start="93:5" pos:end="93:23"><name pos:start="93:5" pos:end="93:12">allocOut</name><operator pos:start="93:13" pos:end="93:13">.</operator><name pos:start="93:14" pos:end="93:23">memoryHeap</name></name> <operator pos:start="93:25" pos:end="93:25">=</operator> <name pos:start="93:27" pos:end="93:58">NV_ENC_MEMORY_HEAP_SYSMEM_CACHED</name></expr>;</expr_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:79"><expr pos:start="97:5" pos:end="97:78"><name pos:start="97:5" pos:end="97:13">nv_status</name> <operator pos:start="97:15" pos:end="97:15">=</operator> <call pos:start="97:17" pos:end="97:78"><name pos:start="97:17" pos:end="97:51"><name pos:start="97:17" pos:end="97:23">p_nvenc</name><operator pos:start="97:24" pos:end="97:25">-&gt;</operator><name pos:start="97:26" pos:end="97:51">nvEncCreateBitstreamBuffer</name></name><argument_list pos:start="97:52" pos:end="97:78">(<argument pos:start="97:53" pos:end="97:66"><expr pos:start="97:53" pos:end="97:66"><name pos:start="97:53" pos:end="97:66"><name pos:start="97:53" pos:end="97:55">ctx</name><operator pos:start="97:56" pos:end="97:57">-&gt;</operator><name pos:start="97:58" pos:end="97:66">nvencoder</name></name></expr></argument>, <argument pos:start="97:69" pos:end="97:77"><expr pos:start="97:69" pos:end="97:77"><operator pos:start="97:69" pos:end="97:69">&amp;</operator><name pos:start="97:70" pos:end="97:77">allocOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="99:5" pos:end="111:5"><if pos:start="99:5" pos:end="111:5">if <condition pos:start="99:8" pos:end="99:36">(<expr pos:start="99:9" pos:end="99:35"><name pos:start="99:9" pos:end="99:17">nv_status</name> <operator pos:start="99:19" pos:end="99:20">!=</operator> <name pos:start="99:22" pos:end="99:35">NV_ENC_SUCCESS</name></expr>)</condition> <block pos:start="99:38" pos:end="111:5">{<block_content pos:start="101:9" pos:end="109:19">

        <decl_stmt pos:start="101:9" pos:end="101:86"><decl pos:start="101:9" pos:end="101:85"><type pos:start="101:9" pos:end="101:11"><name pos:start="101:9" pos:end="101:11">int</name></type> <name pos:start="101:13" pos:end="101:15">err</name> <init pos:start="101:17" pos:end="101:85">= <expr pos:start="101:19" pos:end="101:85"><call pos:start="101:19" pos:end="101:85"><name pos:start="101:19" pos:end="101:35">nvenc_print_error</name><argument_list pos:start="101:36" pos:end="101:85">(<argument pos:start="101:37" pos:end="101:41"><expr pos:start="101:37" pos:end="101:41"><name pos:start="101:37" pos:end="101:41">avctx</name></expr></argument>, <argument pos:start="101:44" pos:end="101:52"><expr pos:start="101:44" pos:end="101:52"><name pos:start="101:44" pos:end="101:52">nv_status</name></expr></argument>, <argument pos:start="101:55" pos:end="101:84"><expr pos:start="101:55" pos:end="101:84"><literal type="string" pos:start="101:55" pos:end="101:84">"CreateBitstreamBuffer failed"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="103:9" pos:end="105:95"><if pos:start="103:9" pos:end="105:95">if <condition pos:start="103:12" pos:end="103:46">(<expr pos:start="103:13" pos:end="103:45"><name pos:start="103:13" pos:end="103:26"><name pos:start="103:13" pos:end="103:17">avctx</name><operator pos:start="103:18" pos:end="103:19">-&gt;</operator><name pos:start="103:20" pos:end="103:26">pix_fmt</name></name> <operator pos:start="103:28" pos:end="103:29">!=</operator> <name pos:start="103:31" pos:end="103:45">AV_PIX_FMT_CUDA</name></expr>)</condition><block type="pseudo" pos:start="105:13" pos:end="105:95"><block_content pos:start="105:13" pos:end="105:95">

            <expr_stmt pos:start="105:13" pos:end="105:95"><expr pos:start="105:13" pos:end="105:94"><call pos:start="105:13" pos:end="105:94"><name pos:start="105:13" pos:end="105:44"><name pos:start="105:13" pos:end="105:19">p_nvenc</name><operator pos:start="105:20" pos:end="105:21">-&gt;</operator><name pos:start="105:22" pos:end="105:44">nvEncDestroyInputBuffer</name></name><argument_list pos:start="105:45" pos:end="105:94">(<argument pos:start="105:46" pos:end="105:59"><expr pos:start="105:46" pos:end="105:59"><name pos:start="105:46" pos:end="105:59"><name pos:start="105:46" pos:end="105:48">ctx</name><operator pos:start="105:49" pos:end="105:50">-&gt;</operator><name pos:start="105:51" pos:end="105:59">nvencoder</name></name></expr></argument>, <argument pos:start="105:62" pos:end="105:93"><expr pos:start="105:62" pos:end="105:93"><name pos:start="105:62" pos:end="105:79"><name pos:start="105:62" pos:end="105:64">ctx</name><operator pos:start="105:65" pos:end="105:66">-&gt;</operator><name pos:start="105:67" pos:end="105:74">surfaces</name><index pos:start="105:75" pos:end="105:79">[<expr pos:start="105:76" pos:end="105:78"><name pos:start="105:76" pos:end="105:78">idx</name></expr>]</index></name><operator pos:start="105:80" pos:end="105:80">.</operator><name pos:start="105:81" pos:end="105:93">input_surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:50"><expr pos:start="107:9" pos:end="107:49"><call pos:start="107:9" pos:end="107:49"><name pos:start="107:9" pos:end="107:21">av_frame_free</name><argument_list pos:start="107:22" pos:end="107:49">(<argument pos:start="107:23" pos:end="107:48"><expr pos:start="107:23" pos:end="107:48"><operator pos:start="107:23" pos:end="107:23">&amp;</operator><name pos:start="107:24" pos:end="107:41"><name pos:start="107:24" pos:end="107:26">ctx</name><operator pos:start="107:27" pos:end="107:28">-&gt;</operator><name pos:start="107:29" pos:end="107:36">surfaces</name><index pos:start="107:37" pos:end="107:41">[<expr pos:start="107:38" pos:end="107:40"><name pos:start="107:38" pos:end="107:40">idx</name></expr>]</index></name><operator pos:start="107:42" pos:end="107:42">.</operator><name pos:start="107:43" pos:end="107:48">in_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="109:9" pos:end="109:19">return <expr pos:start="109:16" pos:end="109:18"><name pos:start="109:16" pos:end="109:18">err</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="115:5" pos:end="115:65"><expr pos:start="115:5" pos:end="115:64"><name pos:start="115:5" pos:end="115:22"><name pos:start="115:5" pos:end="115:7">ctx</name><operator pos:start="115:8" pos:end="115:9">-&gt;</operator><name pos:start="115:10" pos:end="115:17">surfaces</name><index pos:start="115:18" pos:end="115:22">[<expr pos:start="115:19" pos:end="115:21"><name pos:start="115:19" pos:end="115:21">idx</name></expr>]</index></name><operator pos:start="115:23" pos:end="115:23">.</operator><name pos:start="115:24" pos:end="115:37">output_surface</name> <operator pos:start="115:39" pos:end="115:39">=</operator> <name pos:start="115:41" pos:end="115:64"><name pos:start="115:41" pos:end="115:48">allocOut</name><operator pos:start="115:49" pos:end="115:49">.</operator><name pos:start="115:50" pos:end="115:64">bitstreamBuffer</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:44"><expr pos:start="117:5" pos:end="117:43"><name pos:start="117:5" pos:end="117:22"><name pos:start="117:5" pos:end="117:7">ctx</name><operator pos:start="117:8" pos:end="117:9">-&gt;</operator><name pos:start="117:10" pos:end="117:17">surfaces</name><index pos:start="117:18" pos:end="117:22">[<expr pos:start="117:19" pos:end="117:21"><name pos:start="117:19" pos:end="117:21">idx</name></expr>]</index></name><operator pos:start="117:23" pos:end="117:23">.</operator><name pos:start="117:24" pos:end="117:27">size</name> <operator pos:start="117:29" pos:end="117:29">=</operator> <name pos:start="117:31" pos:end="117:43"><name pos:start="117:31" pos:end="117:38">allocOut</name><operator pos:start="117:39" pos:end="117:39">.</operator><name pos:start="117:40" pos:end="117:43">size</name></name></expr>;</expr_stmt>



    <return pos:start="121:5" pos:end="121:13">return <expr pos:start="121:12" pos:end="121:12"><literal type="number" pos:start="121:12" pos:end="121:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
