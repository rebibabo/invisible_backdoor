<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/27116.c" pos:tabs="8"><function pos:start="1:1" pos:end="213:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:20">inet_listen_opts</name><parameter_list pos:start="1:21" pos:end="1:67">(<parameter pos:start="1:22" pos:end="1:35"><decl pos:start="1:22" pos:end="1:35"><type pos:start="1:22" pos:end="1:35"><name pos:start="1:22" pos:end="1:29">QemuOpts</name> <modifier pos:start="1:31" pos:end="1:31">*</modifier></type><name pos:start="1:32" pos:end="1:35">opts</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:52"><decl pos:start="1:38" pos:end="1:52"><type pos:start="1:38" pos:end="1:52"><name pos:start="1:38" pos:end="1:40">int</name></type> <name pos:start="1:42" pos:end="1:52">port_offset</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:66"><decl pos:start="1:55" pos:end="1:66"><type pos:start="1:55" pos:end="1:66"><name pos:start="1:55" pos:end="1:59">Error</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier><modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:66">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="213:1">{<block_content pos:start="5:5" pos:end="211:19">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:19">addrinfo</name></name></type> <name pos:start="5:21" pos:end="5:22">ai</name></decl>,<decl pos:start="5:24" pos:end="5:27"><type ref="prev" pos:start="5:5" pos:end="5:19"><modifier pos:start="5:24" pos:end="5:24">*</modifier></type><name pos:start="5:25" pos:end="5:27">res</name></decl>,<decl pos:start="5:29" pos:end="5:30"><type ref="prev" pos:start="5:5" pos:end="5:19"><modifier pos:start="5:29" pos:end="5:29">*</modifier></type><name pos:start="5:30" pos:end="5:30">e</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:20">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:17"><name pos:start="9:10" pos:end="9:13">port</name><index pos:start="9:14" pos:end="9:17">[<expr pos:start="9:15" pos:end="9:16"><literal type="number" pos:start="9:15" pos:end="9:16">33</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:35"><decl pos:start="11:5" pos:end="11:34"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:34"><name pos:start="11:10" pos:end="11:14">uaddr</name><index pos:start="11:15" pos:end="11:34">[<expr pos:start="11:16" pos:end="11:33"><name pos:start="11:16" pos:end="11:31">INET6_ADDRSTRLEN</name><operator pos:start="11:32" pos:end="11:32">+</operator><literal type="number" pos:start="11:33" pos:end="11:33">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">char</name></type> <name pos:start="13:10" pos:end="13:18"><name pos:start="13:10" pos:end="13:14">uport</name><index pos:start="13:15" pos:end="13:18">[<expr pos:start="13:16" pos:end="13:17"><literal type="number" pos:start="13:16" pos:end="13:17">33</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:47"><decl pos:start="15:5" pos:end="15:15"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:15">slisten</name></decl>, <decl pos:start="15:18" pos:end="15:19"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:18" pos:end="15:19">rc</name></decl>, <decl pos:start="15:22" pos:end="15:23"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:22" pos:end="15:23">to</name></decl>, <decl pos:start="15:26" pos:end="15:33"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:26" pos:end="15:33">port_min</name></decl>, <decl pos:start="15:36" pos:end="15:43"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:36" pos:end="15:43">port_max</name></decl>, <decl pos:start="15:46" pos:end="15:46"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:46" pos:end="15:46">p</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:30"><expr pos:start="19:5" pos:end="19:29"><call pos:start="19:5" pos:end="19:29"><name pos:start="19:5" pos:end="19:10">memset</name><argument_list pos:start="19:11" pos:end="19:29">(<argument pos:start="19:12" pos:end="19:14"><expr pos:start="19:12" pos:end="19:14"><operator pos:start="19:12" pos:end="19:12">&amp;</operator><name pos:start="19:13" pos:end="19:14">ai</name></expr></argument>,<argument pos:start="19:16" pos:end="19:16"><expr pos:start="19:16" pos:end="19:16"><literal type="number" pos:start="19:16" pos:end="19:16">0</literal></expr></argument>, <argument pos:start="19:19" pos:end="19:28"><expr pos:start="19:19" pos:end="19:28"><sizeof pos:start="19:19" pos:end="19:28">sizeof<argument_list pos:start="19:25" pos:end="19:28">(<argument pos:start="19:26" pos:end="19:27"><expr pos:start="19:26" pos:end="19:27"><name pos:start="19:26" pos:end="19:27">ai</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:45"><expr pos:start="21:5" pos:end="21:44"><name pos:start="21:5" pos:end="21:15"><name pos:start="21:5" pos:end="21:6">ai</name><operator pos:start="21:7" pos:end="21:7">.</operator><name pos:start="21:8" pos:end="21:15">ai_flags</name></name> <operator pos:start="21:17" pos:end="21:17">=</operator> <name pos:start="21:19" pos:end="21:28">AI_PASSIVE</name> <operator pos:start="21:30" pos:end="21:30">|</operator> <name pos:start="21:32" pos:end="21:44">AI_ADDRCONFIG</name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:29"><expr pos:start="23:5" pos:end="23:28"><name pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:6">ai</name><operator pos:start="23:7" pos:end="23:7">.</operator><name pos:start="23:8" pos:end="23:16">ai_family</name></name> <operator pos:start="23:18" pos:end="23:18">=</operator> <name pos:start="23:20" pos:end="23:28">PF_UNSPEC</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:33"><expr pos:start="25:5" pos:end="25:32"><name pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:6">ai</name><operator pos:start="25:7" pos:end="25:7">.</operator><name pos:start="25:8" pos:end="25:18">ai_socktype</name></name> <operator pos:start="25:20" pos:end="25:20">=</operator> <name pos:start="25:22" pos:end="25:32">SOCK_STREAM</name></expr>;</expr_stmt>



    <if_stmt pos:start="29:5" pos:end="37:5"><if pos:start="29:5" pos:end="37:5">if <condition pos:start="29:8" pos:end="31:45">(<expr pos:start="29:9" pos:end="31:44"><operator pos:start="29:9" pos:end="29:9">(</operator><call pos:start="29:10" pos:end="29:35"><name pos:start="29:10" pos:end="29:21">qemu_opt_get</name><argument_list pos:start="29:22" pos:end="29:35">(<argument pos:start="29:23" pos:end="29:26"><expr pos:start="29:23" pos:end="29:26"><name pos:start="29:23" pos:end="29:26">opts</name></expr></argument>, <argument pos:start="29:29" pos:end="29:34"><expr pos:start="29:29" pos:end="29:34"><literal type="string" pos:start="29:29" pos:end="29:34">"host"</literal></expr></argument>)</argument_list></call> <operator pos:start="29:37" pos:end="29:38">==</operator> <name pos:start="29:40" pos:end="29:43">NULL</name><operator pos:start="29:44" pos:end="29:44">)</operator> <operator pos:start="29:46" pos:end="29:47">||</operator>

        <operator pos:start="31:9" pos:end="31:9">(</operator><call pos:start="31:10" pos:end="31:35"><name pos:start="31:10" pos:end="31:21">qemu_opt_get</name><argument_list pos:start="31:22" pos:end="31:35">(<argument pos:start="31:23" pos:end="31:26"><expr pos:start="31:23" pos:end="31:26"><name pos:start="31:23" pos:end="31:26">opts</name></expr></argument>, <argument pos:start="31:29" pos:end="31:34"><expr pos:start="31:29" pos:end="31:34"><literal type="string" pos:start="31:29" pos:end="31:34">"port"</literal></expr></argument>)</argument_list></call> <operator pos:start="31:37" pos:end="31:38">==</operator> <name pos:start="31:40" pos:end="31:43">NULL</name><operator pos:start="31:44" pos:end="31:44">)</operator></expr>)</condition> <block pos:start="31:47" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:18">

        <expr_stmt pos:start="33:9" pos:end="33:59"><expr pos:start="33:9" pos:end="33:58"><call pos:start="33:9" pos:end="33:58"><name pos:start="33:9" pos:end="33:18">error_setg</name><argument_list pos:start="33:19" pos:end="33:58">(<argument pos:start="33:20" pos:end="33:23"><expr pos:start="33:20" pos:end="33:23"><name pos:start="33:20" pos:end="33:23">errp</name></expr></argument>, <argument pos:start="33:26" pos:end="33:57"><expr pos:start="33:26" pos:end="33:57"><literal type="string" pos:start="33:26" pos:end="33:57">"host and/or port not specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:18">return <expr pos:start="35:16" pos:end="35:17"><operator pos:start="35:16" pos:end="35:16">-</operator><literal type="number" pos:start="35:17" pos:end="35:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:60"><expr pos:start="39:5" pos:end="39:59"><call pos:start="39:5" pos:end="39:59"><name pos:start="39:5" pos:end="39:11">pstrcpy</name><argument_list pos:start="39:12" pos:end="39:59">(<argument pos:start="39:13" pos:end="39:16"><expr pos:start="39:13" pos:end="39:16"><name pos:start="39:13" pos:end="39:16">port</name></expr></argument>, <argument pos:start="39:19" pos:end="39:30"><expr pos:start="39:19" pos:end="39:30"><sizeof pos:start="39:19" pos:end="39:30">sizeof<argument_list pos:start="39:25" pos:end="39:30">(<argument pos:start="39:26" pos:end="39:29"><expr pos:start="39:26" pos:end="39:29"><name pos:start="39:26" pos:end="39:29">port</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="39:33" pos:end="39:58"><expr pos:start="39:33" pos:end="39:58"><call pos:start="39:33" pos:end="39:58"><name pos:start="39:33" pos:end="39:44">qemu_opt_get</name><argument_list pos:start="39:45" pos:end="39:58">(<argument pos:start="39:46" pos:end="39:49"><expr pos:start="39:46" pos:end="39:49"><name pos:start="39:46" pos:end="39:49">opts</name></expr></argument>, <argument pos:start="39:52" pos:end="39:57"><expr pos:start="39:52" pos:end="39:57"><literal type="string" pos:start="39:52" pos:end="39:57">"port"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:38"><expr pos:start="41:5" pos:end="41:37"><name pos:start="41:5" pos:end="41:8">addr</name> <operator pos:start="41:10" pos:end="41:10">=</operator> <call pos:start="41:12" pos:end="41:37"><name pos:start="41:12" pos:end="41:23">qemu_opt_get</name><argument_list pos:start="41:24" pos:end="41:37">(<argument pos:start="41:25" pos:end="41:28"><expr pos:start="41:25" pos:end="41:28"><name pos:start="41:25" pos:end="41:28">opts</name></expr></argument>, <argument pos:start="41:31" pos:end="41:36"><expr pos:start="41:31" pos:end="41:36"><literal type="string" pos:start="41:31" pos:end="41:36">"host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:44"><expr pos:start="45:5" pos:end="45:43"><name pos:start="45:5" pos:end="45:6">to</name> <operator pos:start="45:8" pos:end="45:8">=</operator> <call pos:start="45:10" pos:end="45:43"><name pos:start="45:10" pos:end="45:28">qemu_opt_get_number</name><argument_list pos:start="45:29" pos:end="45:43">(<argument pos:start="45:30" pos:end="45:33"><expr pos:start="45:30" pos:end="45:33"><name pos:start="45:30" pos:end="45:33">opts</name></expr></argument>, <argument pos:start="45:36" pos:end="45:39"><expr pos:start="45:36" pos:end="45:39"><literal type="string" pos:start="45:36" pos:end="45:39">"to"</literal></expr></argument>, <argument pos:start="45:42" pos:end="45:42"><expr pos:start="45:42" pos:end="45:42"><literal type="number" pos:start="45:42" pos:end="45:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="49:31"><if pos:start="47:5" pos:end="49:31">if <condition pos:start="47:8" pos:end="47:43">(<expr pos:start="47:9" pos:end="47:42"><call pos:start="47:9" pos:end="47:42"><name pos:start="47:9" pos:end="47:25">qemu_opt_get_bool</name><argument_list pos:start="47:26" pos:end="47:42">(<argument pos:start="47:27" pos:end="47:30"><expr pos:start="47:27" pos:end="47:30"><name pos:start="47:27" pos:end="47:30">opts</name></expr></argument>, <argument pos:start="47:33" pos:end="47:38"><expr pos:start="47:33" pos:end="47:38"><literal type="string" pos:start="47:33" pos:end="47:38">"ipv4"</literal></expr></argument>, <argument pos:start="47:41" pos:end="47:41"><expr pos:start="47:41" pos:end="47:41"><literal type="number" pos:start="47:41" pos:end="47:41">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="49:9" pos:end="49:31"><block_content pos:start="49:9" pos:end="49:31">

        <expr_stmt pos:start="49:9" pos:end="49:31"><expr pos:start="49:9" pos:end="49:30"><name pos:start="49:9" pos:end="49:20"><name pos:start="49:9" pos:end="49:10">ai</name><operator pos:start="49:11" pos:end="49:11">.</operator><name pos:start="49:12" pos:end="49:20">ai_family</name></name> <operator pos:start="49:22" pos:end="49:22">=</operator> <name pos:start="49:24" pos:end="49:30">PF_INET</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="51:5" pos:end="53:32"><if pos:start="51:5" pos:end="53:32">if <condition pos:start="51:8" pos:end="51:43">(<expr pos:start="51:9" pos:end="51:42"><call pos:start="51:9" pos:end="51:42"><name pos:start="51:9" pos:end="51:25">qemu_opt_get_bool</name><argument_list pos:start="51:26" pos:end="51:42">(<argument pos:start="51:27" pos:end="51:30"><expr pos:start="51:27" pos:end="51:30"><name pos:start="51:27" pos:end="51:30">opts</name></expr></argument>, <argument pos:start="51:33" pos:end="51:38"><expr pos:start="51:33" pos:end="51:38"><literal type="string" pos:start="51:33" pos:end="51:38">"ipv6"</literal></expr></argument>, <argument pos:start="51:41" pos:end="51:41"><expr pos:start="51:41" pos:end="51:41"><literal type="number" pos:start="51:41" pos:end="51:41">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="53:9" pos:end="53:32"><block_content pos:start="53:9" pos:end="53:32">

        <expr_stmt pos:start="53:9" pos:end="53:32"><expr pos:start="53:9" pos:end="53:31"><name pos:start="53:9" pos:end="53:20"><name pos:start="53:9" pos:end="53:10">ai</name><operator pos:start="53:11" pos:end="53:11">.</operator><name pos:start="53:12" pos:end="53:20">ai_family</name></name> <operator pos:start="53:22" pos:end="53:22">=</operator> <name pos:start="53:24" pos:end="53:31">PF_INET6</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="57:5" pos:end="57:16">/* lookup */</comment>

    <if_stmt pos:start="59:5" pos:end="83:5"><if pos:start="59:5" pos:end="83:5">if <condition pos:start="59:8" pos:end="59:20">(<expr pos:start="59:9" pos:end="59:19"><name pos:start="59:9" pos:end="59:19">port_offset</name></expr>)</condition> <block pos:start="59:22" pos:end="83:5">{<block_content pos:start="61:9" pos:end="81:72">

        <decl_stmt pos:start="61:9" pos:end="61:36"><decl pos:start="61:9" pos:end="61:35"><type pos:start="61:9" pos:end="61:26"><name pos:start="61:9" pos:end="61:16">unsigned</name> <name pos:start="61:18" pos:end="61:21">long</name> <name pos:start="61:23" pos:end="61:26">long</name></type> <name pos:start="61:28" pos:end="61:35">baseport</name></decl>;</decl_stmt>

        <if_stmt pos:start="63:9" pos:end="69:9"><if pos:start="63:9" pos:end="69:9">if <condition pos:start="63:12" pos:end="63:53">(<expr pos:start="63:13" pos:end="63:52"><call pos:start="63:13" pos:end="63:48"><name pos:start="63:13" pos:end="63:27">parse_uint_full</name><argument_list pos:start="63:28" pos:end="63:48">(<argument pos:start="63:29" pos:end="63:32"><expr pos:start="63:29" pos:end="63:32"><name pos:start="63:29" pos:end="63:32">port</name></expr></argument>, <argument pos:start="63:35" pos:end="63:43"><expr pos:start="63:35" pos:end="63:43"><operator pos:start="63:35" pos:end="63:35">&amp;</operator><name pos:start="63:36" pos:end="63:43">baseport</name></expr></argument>, <argument pos:start="63:46" pos:end="63:47"><expr pos:start="63:46" pos:end="63:47"><literal type="number" pos:start="63:46" pos:end="63:47">10</literal></expr></argument>)</argument_list></call> <operator pos:start="63:50" pos:end="63:50">&lt;</operator> <literal type="number" pos:start="63:52" pos:end="63:52">0</literal></expr>)</condition> <block pos:start="63:55" pos:end="69:9">{<block_content pos:start="65:13" pos:end="67:22">

            <expr_stmt pos:start="65:13" pos:end="65:68"><expr pos:start="65:13" pos:end="65:67"><call pos:start="65:13" pos:end="65:67"><name pos:start="65:13" pos:end="65:22">error_setg</name><argument_list pos:start="65:23" pos:end="65:67">(<argument pos:start="65:24" pos:end="65:27"><expr pos:start="65:24" pos:end="65:27"><name pos:start="65:24" pos:end="65:27">errp</name></expr></argument>, <argument pos:start="65:30" pos:end="65:60"><expr pos:start="65:30" pos:end="65:60"><literal type="string" pos:start="65:30" pos:end="65:60">"can't convert to a number: %s"</literal></expr></argument>, <argument pos:start="65:63" pos:end="65:66"><expr pos:start="65:63" pos:end="65:66"><name pos:start="65:63" pos:end="65:66">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="67:13" pos:end="67:22">return <expr pos:start="67:20" pos:end="67:21"><operator pos:start="67:20" pos:end="67:20">-</operator><literal type="number" pos:start="67:21" pos:end="67:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="71:9" pos:end="79:9"><if pos:start="71:9" pos:end="79:9">if <condition pos:start="71:12" pos:end="73:43">(<expr pos:start="71:13" pos:end="73:42"><name pos:start="71:13" pos:end="71:20">baseport</name> <operator pos:start="71:22" pos:end="71:22">&gt;</operator> <literal type="number" pos:start="71:24" pos:end="71:28">65535</literal> <operator pos:start="71:30" pos:end="71:31">||</operator>

            <name pos:start="73:13" pos:end="73:20">baseport</name> <operator pos:start="73:22" pos:end="73:22">+</operator> <name pos:start="73:24" pos:end="73:34">port_offset</name> <operator pos:start="73:36" pos:end="73:36">&gt;</operator> <literal type="number" pos:start="73:38" pos:end="73:42">65535</literal></expr>)</condition> <block pos:start="73:45" pos:end="79:9">{<block_content pos:start="75:13" pos:end="77:22">

            <expr_stmt pos:start="75:13" pos:end="75:59"><expr pos:start="75:13" pos:end="75:58"><call pos:start="75:13" pos:end="75:58"><name pos:start="75:13" pos:end="75:22">error_setg</name><argument_list pos:start="75:23" pos:end="75:58">(<argument pos:start="75:24" pos:end="75:27"><expr pos:start="75:24" pos:end="75:27"><name pos:start="75:24" pos:end="75:27">errp</name></expr></argument>, <argument pos:start="75:30" pos:end="75:51"><expr pos:start="75:30" pos:end="75:51"><literal type="string" pos:start="75:30" pos:end="75:51">"port %s out of range"</literal></expr></argument>, <argument pos:start="75:54" pos:end="75:57"><expr pos:start="75:54" pos:end="75:57"><name pos:start="75:54" pos:end="75:57">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="77:13" pos:end="77:22">return <expr pos:start="77:20" pos:end="77:21"><operator pos:start="77:20" pos:end="77:20">-</operator><literal type="number" pos:start="77:21" pos:end="77:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:72"><expr pos:start="81:9" pos:end="81:71"><call pos:start="81:9" pos:end="81:71"><name pos:start="81:9" pos:end="81:16">snprintf</name><argument_list pos:start="81:17" pos:end="81:71">(<argument pos:start="81:18" pos:end="81:21"><expr pos:start="81:18" pos:end="81:21"><name pos:start="81:18" pos:end="81:21">port</name></expr></argument>, <argument pos:start="81:24" pos:end="81:35"><expr pos:start="81:24" pos:end="81:35"><sizeof pos:start="81:24" pos:end="81:35">sizeof<argument_list pos:start="81:30" pos:end="81:35">(<argument pos:start="81:31" pos:end="81:34"><expr pos:start="81:31" pos:end="81:34"><name pos:start="81:31" pos:end="81:34">port</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="81:38" pos:end="81:41"><expr pos:start="81:38" pos:end="81:41"><literal type="string" pos:start="81:38" pos:end="81:41">"%d"</literal></expr></argument>, <argument pos:start="81:44" pos:end="81:70"><expr pos:start="81:44" pos:end="81:70"><operator pos:start="81:44" pos:end="81:44">(</operator><name pos:start="81:45" pos:end="81:47">int</name><operator pos:start="81:48" pos:end="81:48">)</operator><name pos:start="81:49" pos:end="81:56">baseport</name> <operator pos:start="81:58" pos:end="81:58">+</operator> <name pos:start="81:60" pos:end="81:70">port_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:66"><expr pos:start="85:5" pos:end="85:65"><name pos:start="85:5" pos:end="85:6">rc</name> <operator pos:start="85:8" pos:end="85:8">=</operator> <call pos:start="85:10" pos:end="85:65"><name pos:start="85:10" pos:end="85:20">getaddrinfo</name><argument_list pos:start="85:21" pos:end="85:65">(<argument pos:start="85:22" pos:end="85:47"><expr pos:start="85:22" pos:end="85:47"><ternary pos:start="85:22" pos:end="85:47"><condition pos:start="85:22" pos:end="85:35"><expr pos:start="85:22" pos:end="85:33"><call pos:start="85:22" pos:end="85:33"><name pos:start="85:22" pos:end="85:27">strlen</name><argument_list pos:start="85:28" pos:end="85:33">(<argument pos:start="85:29" pos:end="85:32"><expr pos:start="85:29" pos:end="85:32"><name pos:start="85:29" pos:end="85:32">addr</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="85:37" pos:end="85:40"> <expr pos:start="85:37" pos:end="85:40"><name pos:start="85:37" pos:end="85:40">addr</name></expr> </then><else pos:start="85:42" pos:end="85:47">: <expr pos:start="85:44" pos:end="85:47"><name pos:start="85:44" pos:end="85:47">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="85:50" pos:end="85:53"><expr pos:start="85:50" pos:end="85:53"><name pos:start="85:50" pos:end="85:53">port</name></expr></argument>, <argument pos:start="85:56" pos:end="85:58"><expr pos:start="85:56" pos:end="85:58"><operator pos:start="85:56" pos:end="85:56">&amp;</operator><name pos:start="85:57" pos:end="85:58">ai</name></expr></argument>, <argument pos:start="85:61" pos:end="85:64"><expr pos:start="85:61" pos:end="85:64"><operator pos:start="85:61" pos:end="85:61">&amp;</operator><name pos:start="85:62" pos:end="85:64">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="87:5" pos:end="95:5"><if pos:start="87:5" pos:end="95:5">if <condition pos:start="87:8" pos:end="87:16">(<expr pos:start="87:9" pos:end="87:15"><name pos:start="87:9" pos:end="87:10">rc</name> <operator pos:start="87:12" pos:end="87:13">!=</operator> <literal type="number" pos:start="87:15" pos:end="87:15">0</literal></expr>)</condition> <block pos:start="87:18" pos:end="95:5">{<block_content pos:start="89:9" pos:end="93:18">

        <expr_stmt pos:start="89:9" pos:end="91:37"><expr pos:start="89:9" pos:end="91:36"><call pos:start="89:9" pos:end="91:36"><name pos:start="89:9" pos:end="89:18">error_setg</name><argument_list pos:start="89:19" pos:end="91:36">(<argument pos:start="89:20" pos:end="89:23"><expr pos:start="89:20" pos:end="89:23"><name pos:start="89:20" pos:end="89:23">errp</name></expr></argument>, <argument pos:start="89:26" pos:end="89:66"><expr pos:start="89:26" pos:end="89:66"><literal type="string" pos:start="89:26" pos:end="89:66">"address resolution failed for %s:%s: %s"</literal></expr></argument>, <argument pos:start="89:69" pos:end="89:72"><expr pos:start="89:69" pos:end="89:72"><name pos:start="89:69" pos:end="89:72">addr</name></expr></argument>, <argument pos:start="89:75" pos:end="89:78"><expr pos:start="89:75" pos:end="89:78"><name pos:start="89:75" pos:end="89:78">port</name></expr></argument>,

                   <argument pos:start="91:20" pos:end="91:35"><expr pos:start="91:20" pos:end="91:35"><call pos:start="91:20" pos:end="91:35"><name pos:start="91:20" pos:end="91:31">gai_strerror</name><argument_list pos:start="91:32" pos:end="91:35">(<argument pos:start="91:33" pos:end="91:34"><expr pos:start="91:33" pos:end="91:34"><name pos:start="91:33" pos:end="91:34">rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="93:9" pos:end="93:18">return <expr pos:start="93:16" pos:end="93:17"><operator pos:start="93:16" pos:end="93:16">-</operator><literal type="number" pos:start="93:17" pos:end="93:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="99:5" pos:end="99:30">/* create socket + bind */</comment>

    <for pos:start="101:5" pos:end="173:5">for <control pos:start="101:9" pos:end="101:44">(<init pos:start="101:10" pos:end="101:17"><expr pos:start="101:10" pos:end="101:16"><name pos:start="101:10" pos:end="101:10">e</name> <operator pos:start="101:12" pos:end="101:12">=</operator> <name pos:start="101:14" pos:end="101:16">res</name></expr>;</init> <condition pos:start="101:19" pos:end="101:28"><expr pos:start="101:19" pos:end="101:27"><name pos:start="101:19" pos:end="101:19">e</name> <operator pos:start="101:21" pos:end="101:22">!=</operator> <name pos:start="101:24" pos:end="101:27">NULL</name></expr>;</condition> <incr pos:start="101:30" pos:end="101:43"><expr pos:start="101:30" pos:end="101:43"><name pos:start="101:30" pos:end="101:30">e</name> <operator pos:start="101:32" pos:end="101:32">=</operator> <name pos:start="101:34" pos:end="101:43"><name pos:start="101:34" pos:end="101:34">e</name><operator pos:start="101:35" pos:end="101:36">-&gt;</operator><name pos:start="101:37" pos:end="101:43">ai_next</name></name></expr></incr>)</control> <block pos:start="101:46" pos:end="173:5">{<block_content pos:start="103:9" pos:end="171:29">

        <expr_stmt pos:start="103:9" pos:end="107:57"><expr pos:start="103:9" pos:end="107:56"><call pos:start="103:9" pos:end="107:56"><name pos:start="103:9" pos:end="103:19">getnameinfo</name><argument_list pos:start="103:20" pos:end="107:56">(<argument pos:start="103:21" pos:end="103:48"><expr pos:start="103:21" pos:end="103:48"><operator pos:start="103:21" pos:end="103:21">(</operator>struct <name pos:start="103:29" pos:end="103:36">sockaddr</name><operator pos:start="103:37" pos:end="103:37">*</operator><operator pos:start="103:38" pos:end="103:38">)</operator><name pos:start="103:39" pos:end="103:48"><name pos:start="103:39" pos:end="103:39">e</name><operator pos:start="103:40" pos:end="103:41">-&gt;</operator><name pos:start="103:42" pos:end="103:48">ai_addr</name></name></expr></argument>,<argument pos:start="103:50" pos:end="103:62"><expr pos:start="103:50" pos:end="103:62"><name pos:start="103:50" pos:end="103:62"><name pos:start="103:50" pos:end="103:50">e</name><operator pos:start="103:51" pos:end="103:52">-&gt;</operator><name pos:start="103:53" pos:end="103:62">ai_addrlen</name></name></expr></argument>,

		        <argument pos:start="105:25" pos:end="105:29"><expr pos:start="105:25" pos:end="105:29"><name pos:start="105:25" pos:end="105:29">uaddr</name></expr></argument>,<argument pos:start="105:31" pos:end="105:46"><expr pos:start="105:31" pos:end="105:46"><name pos:start="105:31" pos:end="105:46">INET6_ADDRSTRLEN</name></expr></argument>,<argument pos:start="105:48" pos:end="105:52"><expr pos:start="105:48" pos:end="105:52"><name pos:start="105:48" pos:end="105:52">uport</name></expr></argument>,<argument pos:start="105:54" pos:end="105:55"><expr pos:start="105:54" pos:end="105:55"><literal type="number" pos:start="105:54" pos:end="105:55">32</literal></expr></argument>,

		        <argument pos:start="107:25" pos:end="107:55"><expr pos:start="107:25" pos:end="107:55"><name pos:start="107:25" pos:end="107:38">NI_NUMERICHOST</name> <operator pos:start="107:40" pos:end="107:40">|</operator> <name pos:start="107:42" pos:end="107:55">NI_NUMERICSERV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:76"><expr pos:start="109:9" pos:end="109:75"><name pos:start="109:9" pos:end="109:15">slisten</name> <operator pos:start="109:17" pos:end="109:17">=</operator> <call pos:start="109:19" pos:end="109:75"><name pos:start="109:19" pos:end="109:29">qemu_socket</name><argument_list pos:start="109:30" pos:end="109:75">(<argument pos:start="109:31" pos:end="109:42"><expr pos:start="109:31" pos:end="109:42"><name pos:start="109:31" pos:end="109:42"><name pos:start="109:31" pos:end="109:31">e</name><operator pos:start="109:32" pos:end="109:33">-&gt;</operator><name pos:start="109:34" pos:end="109:42">ai_family</name></name></expr></argument>, <argument pos:start="109:45" pos:end="109:58"><expr pos:start="109:45" pos:end="109:58"><name pos:start="109:45" pos:end="109:58"><name pos:start="109:45" pos:end="109:45">e</name><operator pos:start="109:46" pos:end="109:47">-&gt;</operator><name pos:start="109:48" pos:end="109:58">ai_socktype</name></name></expr></argument>, <argument pos:start="109:61" pos:end="109:74"><expr pos:start="109:61" pos:end="109:74"><name pos:start="109:61" pos:end="109:74"><name pos:start="109:61" pos:end="109:61">e</name><operator pos:start="109:62" pos:end="109:63">-&gt;</operator><name pos:start="109:64" pos:end="109:74">ai_protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="111:9" pos:end="121:9"><if pos:start="111:9" pos:end="121:9">if <condition pos:start="111:12" pos:end="111:24">(<expr pos:start="111:13" pos:end="111:23"><name pos:start="111:13" pos:end="111:19">slisten</name> <operator pos:start="111:21" pos:end="111:21">&lt;</operator> <literal type="number" pos:start="111:23" pos:end="111:23">0</literal></expr>)</condition> <block pos:start="111:26" pos:end="121:9">{<block_content pos:start="113:13" pos:end="119:21">

            <if_stmt pos:start="113:13" pos:end="117:13"><if pos:start="113:13" pos:end="117:13">if <condition pos:start="113:16" pos:end="113:28">(<expr pos:start="113:17" pos:end="113:27"><operator pos:start="113:17" pos:end="113:17">!</operator><name pos:start="113:18" pos:end="113:27"><name pos:start="113:18" pos:end="113:18">e</name><operator pos:start="113:19" pos:end="113:20">-&gt;</operator><name pos:start="113:21" pos:end="113:27">ai_next</name></name></expr>)</condition> <block pos:start="113:30" pos:end="117:13">{<block_content pos:start="115:17" pos:end="115:73">

                <expr_stmt pos:start="115:17" pos:end="115:73"><expr pos:start="115:17" pos:end="115:72"><call pos:start="115:17" pos:end="115:72"><name pos:start="115:17" pos:end="115:32">error_setg_errno</name><argument_list pos:start="115:33" pos:end="115:72">(<argument pos:start="115:34" pos:end="115:37"><expr pos:start="115:34" pos:end="115:37"><name pos:start="115:34" pos:end="115:37">errp</name></expr></argument>, <argument pos:start="115:40" pos:end="115:44"><expr pos:start="115:40" pos:end="115:44"><name pos:start="115:40" pos:end="115:44">errno</name></expr></argument>, <argument pos:start="115:47" pos:end="115:71"><expr pos:start="115:47" pos:end="115:71"><literal type="string" pos:start="115:47" pos:end="115:71">"Failed to create socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <continue pos:start="119:13" pos:end="119:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="125:9" pos:end="128:0"><expr pos:start="125:9" pos:end="125:38"><call pos:start="125:9" pos:end="125:38"><name pos:start="125:9" pos:end="125:29">socket_set_fast_reuse</name><argument_list pos:start="125:30" pos:end="125:38">(<argument pos:start="125:31" pos:end="125:37"><expr pos:start="125:31" pos:end="125:37"><name pos:start="125:31" pos:end="125:37">slisten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="127:1" pos:end="127:18">#<cpp:directive pos:start="127:2" pos:end="127:6">ifdef</cpp:directive> <name pos:start="127:8" pos:end="127:18">IPV6_V6ONLY</name></cpp:ifdef>

        <if_stmt pos:start="129:9" pos:end="142:0"><if pos:start="129:9" pos:end="142:0">if <condition pos:start="129:12" pos:end="129:37">(<expr pos:start="129:13" pos:end="129:36"><name pos:start="129:13" pos:end="129:24"><name pos:start="129:13" pos:end="129:13">e</name><operator pos:start="129:14" pos:end="129:15">-&gt;</operator><name pos:start="129:16" pos:end="129:24">ai_family</name></name> <operator pos:start="129:26" pos:end="129:27">==</operator> <name pos:start="129:29" pos:end="129:36">PF_INET6</name></expr>)</condition> <block pos:start="129:39" pos:end="142:0">{<block_content pos:start="133:13" pos:end="137:41">

            <comment type="block" pos:start="131:13" pos:end="131:46">/* listen on both ipv4 and ipv6 */</comment>

            <decl_stmt pos:start="133:13" pos:end="133:30"><decl pos:start="133:13" pos:end="133:29"><type pos:start="133:13" pos:end="133:21"><specifier pos:start="133:13" pos:end="133:17">const</specifier> <name pos:start="133:19" pos:end="133:21">int</name></type> <name pos:start="133:23" pos:end="133:25">off</name> <init pos:start="133:27" pos:end="133:29">= <expr pos:start="133:29" pos:end="133:29"><literal type="number" pos:start="133:29" pos:end="133:29">0</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="135:13" pos:end="137:41"><expr pos:start="135:13" pos:end="137:40"><call pos:start="135:13" pos:end="137:40"><name pos:start="135:13" pos:end="135:27">qemu_setsockopt</name><argument_list pos:start="135:28" pos:end="137:40">(<argument pos:start="135:29" pos:end="135:35"><expr pos:start="135:29" pos:end="135:35"><name pos:start="135:29" pos:end="135:35">slisten</name></expr></argument>, <argument pos:start="135:38" pos:end="135:49"><expr pos:start="135:38" pos:end="135:49"><name pos:start="135:38" pos:end="135:49">IPPROTO_IPV6</name></expr></argument>, <argument pos:start="135:52" pos:end="135:62"><expr pos:start="135:52" pos:end="135:62"><name pos:start="135:52" pos:end="135:62">IPV6_V6ONLY</name></expr></argument>, <argument pos:start="135:65" pos:end="135:68"><expr pos:start="135:65" pos:end="135:68"><operator pos:start="135:65" pos:end="135:65">&amp;</operator><name pos:start="135:66" pos:end="135:68">off</name></expr></argument>,

                            <argument pos:start="137:29" pos:end="137:39"><expr pos:start="137:29" pos:end="137:39"><sizeof pos:start="137:29" pos:end="137:39">sizeof<argument_list pos:start="137:35" pos:end="137:39">(<argument pos:start="137:36" pos:end="137:38"><expr pos:start="137:36" pos:end="137:38"><name pos:start="137:36" pos:end="137:38">off</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="141:1" pos:end="141:6">#<cpp:directive pos:start="141:2" pos:end="141:6">endif</cpp:directive></cpp:endif>



        <expr_stmt pos:start="145:9" pos:end="145:35"><expr pos:start="145:9" pos:end="145:34"><name pos:start="145:9" pos:end="145:16">port_min</name> <operator pos:start="145:18" pos:end="145:18">=</operator> <call pos:start="145:20" pos:end="145:34"><name pos:start="145:20" pos:end="145:31">inet_getport</name><argument_list pos:start="145:32" pos:end="145:34">(<argument pos:start="145:33" pos:end="145:33"><expr pos:start="145:33" pos:end="145:33"><name pos:start="145:33" pos:end="145:33">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:52"><expr pos:start="147:9" pos:end="147:51"><name pos:start="147:9" pos:end="147:16">port_max</name> <operator pos:start="147:18" pos:end="147:18">=</operator> <ternary pos:start="147:20" pos:end="147:51"><condition pos:start="147:20" pos:end="147:23"><expr pos:start="147:20" pos:end="147:21"><name pos:start="147:20" pos:end="147:21">to</name></expr> ?</condition><then pos:start="147:25" pos:end="147:40"> <expr pos:start="147:25" pos:end="147:40"><name pos:start="147:25" pos:end="147:26">to</name> <operator pos:start="147:28" pos:end="147:28">+</operator> <name pos:start="147:30" pos:end="147:40">port_offset</name></expr> </then><else pos:start="147:42" pos:end="147:51">: <expr pos:start="147:44" pos:end="147:51"><name pos:start="147:44" pos:end="147:51">port_min</name></expr></else></ternary></expr>;</expr_stmt>

        <for pos:start="149:9" pos:end="169:9">for <control pos:start="149:13" pos:end="149:46">(<init pos:start="149:14" pos:end="149:26"><expr pos:start="149:14" pos:end="149:25"><name pos:start="149:14" pos:end="149:14">p</name> <operator pos:start="149:16" pos:end="149:16">=</operator> <name pos:start="149:18" pos:end="149:25">port_min</name></expr>;</init> <condition pos:start="149:28" pos:end="149:41"><expr pos:start="149:28" pos:end="149:40"><name pos:start="149:28" pos:end="149:28">p</name> <operator pos:start="149:30" pos:end="149:31">&lt;=</operator> <name pos:start="149:33" pos:end="149:40">port_max</name></expr>;</condition> <incr pos:start="149:43" pos:end="149:45"><expr pos:start="149:43" pos:end="149:45"><name pos:start="149:43" pos:end="149:43">p</name><operator pos:start="149:44" pos:end="149:45">++</operator></expr></incr>)</control> <block pos:start="149:48" pos:end="169:9">{<block_content pos:start="151:13" pos:end="167:13">

            <expr_stmt pos:start="151:13" pos:end="151:31"><expr pos:start="151:13" pos:end="151:30"><call pos:start="151:13" pos:end="151:30"><name pos:start="151:13" pos:end="151:24">inet_setport</name><argument_list pos:start="151:25" pos:end="151:30">(<argument pos:start="151:26" pos:end="151:26"><expr pos:start="151:26" pos:end="151:26"><name pos:start="151:26" pos:end="151:26">e</name></expr></argument>, <argument pos:start="151:29" pos:end="151:29"><expr pos:start="151:29" pos:end="151:29"><name pos:start="151:29" pos:end="151:29">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="153:13" pos:end="157:13"><if pos:start="153:13" pos:end="157:13">if <condition pos:start="153:16" pos:end="153:62">(<expr pos:start="153:17" pos:end="153:61"><call pos:start="153:17" pos:end="153:56"><name pos:start="153:17" pos:end="153:20">bind</name><argument_list pos:start="153:21" pos:end="153:56">(<argument pos:start="153:22" pos:end="153:28"><expr pos:start="153:22" pos:end="153:28"><name pos:start="153:22" pos:end="153:28">slisten</name></expr></argument>, <argument pos:start="153:31" pos:end="153:40"><expr pos:start="153:31" pos:end="153:40"><name pos:start="153:31" pos:end="153:40"><name pos:start="153:31" pos:end="153:31">e</name><operator pos:start="153:32" pos:end="153:33">-&gt;</operator><name pos:start="153:34" pos:end="153:40">ai_addr</name></name></expr></argument>, <argument pos:start="153:43" pos:end="153:55"><expr pos:start="153:43" pos:end="153:55"><name pos:start="153:43" pos:end="153:55"><name pos:start="153:43" pos:end="153:43">e</name><operator pos:start="153:44" pos:end="153:45">-&gt;</operator><name pos:start="153:46" pos:end="153:55">ai_addrlen</name></name></expr></argument>)</argument_list></call> <operator pos:start="153:58" pos:end="153:59">==</operator> <literal type="number" pos:start="153:61" pos:end="153:61">0</literal></expr>)</condition> <block pos:start="153:64" pos:end="157:13">{<block_content pos:start="155:17" pos:end="155:28">

                <goto pos:start="155:17" pos:end="155:28">goto <name pos:start="155:22" pos:end="155:27">listen</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="159:13" pos:end="167:13"><if pos:start="159:13" pos:end="167:13">if <condition pos:start="159:16" pos:end="159:30">(<expr pos:start="159:17" pos:end="159:29"><name pos:start="159:17" pos:end="159:17">p</name> <operator pos:start="159:19" pos:end="159:20">==</operator> <name pos:start="159:22" pos:end="159:29">port_max</name></expr>)</condition> <block pos:start="159:32" pos:end="167:13">{<block_content pos:start="161:17" pos:end="165:17">

                <if_stmt pos:start="161:17" pos:end="165:17"><if pos:start="161:17" pos:end="165:17">if <condition pos:start="161:20" pos:end="161:32">(<expr pos:start="161:21" pos:end="161:31"><operator pos:start="161:21" pos:end="161:21">!</operator><name pos:start="161:22" pos:end="161:31"><name pos:start="161:22" pos:end="161:22">e</name><operator pos:start="161:23" pos:end="161:24">-&gt;</operator><name pos:start="161:25" pos:end="161:31">ai_next</name></name></expr>)</condition> <block pos:start="161:34" pos:end="165:17">{<block_content pos:start="163:21" pos:end="163:75">

                    <expr_stmt pos:start="163:21" pos:end="163:75"><expr pos:start="163:21" pos:end="163:74"><call pos:start="163:21" pos:end="163:74"><name pos:start="163:21" pos:end="163:36">error_setg_errno</name><argument_list pos:start="163:37" pos:end="163:74">(<argument pos:start="163:38" pos:end="163:41"><expr pos:start="163:38" pos:end="163:41"><name pos:start="163:38" pos:end="163:41">errp</name></expr></argument>, <argument pos:start="163:44" pos:end="163:48"><expr pos:start="163:44" pos:end="163:48"><name pos:start="163:44" pos:end="163:48">errno</name></expr></argument>, <argument pos:start="163:51" pos:end="163:73"><expr pos:start="163:51" pos:end="163:73"><literal type="string" pos:start="163:51" pos:end="163:73">"Failed to bind socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="171:9" pos:end="171:29"><expr pos:start="171:9" pos:end="171:28"><call pos:start="171:9" pos:end="171:28"><name pos:start="171:9" pos:end="171:19">closesocket</name><argument_list pos:start="171:20" pos:end="171:28">(<argument pos:start="171:21" pos:end="171:27"><expr pos:start="171:21" pos:end="171:27"><name pos:start="171:21" pos:end="171:27">slisten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="175:5" pos:end="175:22"><expr pos:start="175:5" pos:end="175:21"><call pos:start="175:5" pos:end="175:21"><name pos:start="175:5" pos:end="175:16">freeaddrinfo</name><argument_list pos:start="175:17" pos:end="175:21">(<argument pos:start="175:18" pos:end="175:20"><expr pos:start="175:18" pos:end="175:20"><name pos:start="175:18" pos:end="175:20">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="177:5" pos:end="177:14">return <expr pos:start="177:12" pos:end="177:13"><operator pos:start="177:12" pos:end="177:12">-</operator><literal type="number" pos:start="177:13" pos:end="177:13">1</literal></expr>;</return>



<label pos:start="181:1" pos:end="181:7"><name pos:start="181:1" pos:end="181:6">listen</name>:</label>

    <if_stmt pos:start="183:5" pos:end="193:5"><if pos:start="183:5" pos:end="193:5">if <condition pos:start="183:8" pos:end="183:31">(<expr pos:start="183:9" pos:end="183:30"><call pos:start="183:9" pos:end="183:25"><name pos:start="183:9" pos:end="183:14">listen</name><argument_list pos:start="183:15" pos:end="183:25">(<argument pos:start="183:16" pos:end="183:22"><expr pos:start="183:16" pos:end="183:22"><name pos:start="183:16" pos:end="183:22">slisten</name></expr></argument>,<argument pos:start="183:24" pos:end="183:24"><expr pos:start="183:24" pos:end="183:24"><literal type="number" pos:start="183:24" pos:end="183:24">1</literal></expr></argument>)</argument_list></call> <operator pos:start="183:27" pos:end="183:28">!=</operator> <literal type="number" pos:start="183:30" pos:end="183:30">0</literal></expr>)</condition> <block pos:start="183:33" pos:end="193:5">{<block_content pos:start="185:9" pos:end="191:18">

        <expr_stmt pos:start="185:9" pos:end="185:68"><expr pos:start="185:9" pos:end="185:67"><call pos:start="185:9" pos:end="185:67"><name pos:start="185:9" pos:end="185:24">error_setg_errno</name><argument_list pos:start="185:25" pos:end="185:67">(<argument pos:start="185:26" pos:end="185:29"><expr pos:start="185:26" pos:end="185:29"><name pos:start="185:26" pos:end="185:29">errp</name></expr></argument>, <argument pos:start="185:32" pos:end="185:36"><expr pos:start="185:32" pos:end="185:36"><name pos:start="185:32" pos:end="185:36">errno</name></expr></argument>, <argument pos:start="185:39" pos:end="185:66"><expr pos:start="185:39" pos:end="185:66"><literal type="string" pos:start="185:39" pos:end="185:66">"Failed to listen on socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:29"><expr pos:start="187:9" pos:end="187:28"><call pos:start="187:9" pos:end="187:28"><name pos:start="187:9" pos:end="187:19">closesocket</name><argument_list pos:start="187:20" pos:end="187:28">(<argument pos:start="187:21" pos:end="187:27"><expr pos:start="187:21" pos:end="187:27"><name pos:start="187:21" pos:end="187:27">slisten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:26"><expr pos:start="189:9" pos:end="189:25"><call pos:start="189:9" pos:end="189:25"><name pos:start="189:9" pos:end="189:20">freeaddrinfo</name><argument_list pos:start="189:21" pos:end="189:25">(<argument pos:start="189:22" pos:end="189:24"><expr pos:start="189:22" pos:end="189:24"><name pos:start="189:22" pos:end="189:24">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="191:9" pos:end="191:18">return <expr pos:start="191:16" pos:end="191:17"><operator pos:start="191:16" pos:end="191:16">-</operator><literal type="number" pos:start="191:17" pos:end="191:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="195:5" pos:end="195:52"><expr pos:start="195:5" pos:end="195:51"><call pos:start="195:5" pos:end="195:51"><name pos:start="195:5" pos:end="195:16">qemu_opt_set</name><argument_list pos:start="195:17" pos:end="195:51">(<argument pos:start="195:18" pos:end="195:21"><expr pos:start="195:18" pos:end="195:21"><name pos:start="195:18" pos:end="195:21">opts</name></expr></argument>, <argument pos:start="195:24" pos:end="195:29"><expr pos:start="195:24" pos:end="195:29"><literal type="string" pos:start="195:24" pos:end="195:29">"host"</literal></expr></argument>, <argument pos:start="195:32" pos:end="195:36"><expr pos:start="195:32" pos:end="195:36"><name pos:start="195:32" pos:end="195:36">uaddr</name></expr></argument>, <argument pos:start="195:39" pos:end="195:50"><expr pos:start="195:39" pos:end="195:50"><operator pos:start="195:39" pos:end="195:39">&amp;</operator><name pos:start="195:40" pos:end="195:50">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="197:5" pos:end="199:38"><expr pos:start="197:5" pos:end="199:37"><call pos:start="197:5" pos:end="199:37"><name pos:start="197:5" pos:end="197:23">qemu_opt_set_number</name><argument_list pos:start="197:24" pos:end="199:37">(<argument pos:start="197:25" pos:end="197:28"><expr pos:start="197:25" pos:end="197:28"><name pos:start="197:25" pos:end="197:28">opts</name></expr></argument>, <argument pos:start="197:31" pos:end="197:36"><expr pos:start="197:31" pos:end="197:36"><literal type="string" pos:start="197:31" pos:end="197:36">"port"</literal></expr></argument>, <argument pos:start="197:39" pos:end="197:67"><expr pos:start="197:39" pos:end="197:67"><call pos:start="197:39" pos:end="197:53"><name pos:start="197:39" pos:end="197:50">inet_getport</name><argument_list pos:start="197:51" pos:end="197:53">(<argument pos:start="197:52" pos:end="197:52"><expr pos:start="197:52" pos:end="197:52"><name pos:start="197:52" pos:end="197:52">e</name></expr></argument>)</argument_list></call> <operator pos:start="197:55" pos:end="197:55">-</operator> <name pos:start="197:57" pos:end="197:67">port_offset</name></expr></argument>,

                        <argument pos:start="199:25" pos:end="199:36"><expr pos:start="199:25" pos:end="199:36"><operator pos:start="199:25" pos:end="199:25">&amp;</operator><name pos:start="199:26" pos:end="199:36">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="201:5" pos:end="203:36"><expr pos:start="201:5" pos:end="203:35"><call pos:start="201:5" pos:end="203:35"><name pos:start="201:5" pos:end="201:21">qemu_opt_set_bool</name><argument_list pos:start="201:22" pos:end="203:35">(<argument pos:start="201:23" pos:end="201:26"><expr pos:start="201:23" pos:end="201:26"><name pos:start="201:23" pos:end="201:26">opts</name></expr></argument>, <argument pos:start="201:29" pos:end="201:34"><expr pos:start="201:29" pos:end="201:34"><literal type="string" pos:start="201:29" pos:end="201:34">"ipv6"</literal></expr></argument>, <argument pos:start="201:37" pos:end="201:60"><expr pos:start="201:37" pos:end="201:60"><name pos:start="201:37" pos:end="201:48"><name pos:start="201:37" pos:end="201:37">e</name><operator pos:start="201:38" pos:end="201:39">-&gt;</operator><name pos:start="201:40" pos:end="201:48">ai_family</name></name> <operator pos:start="201:50" pos:end="201:51">==</operator> <name pos:start="201:53" pos:end="201:60">PF_INET6</name></expr></argument>,

                      <argument pos:start="203:23" pos:end="203:34"><expr pos:start="203:23" pos:end="203:34"><operator pos:start="203:23" pos:end="203:23">&amp;</operator><name pos:start="203:24" pos:end="203:34">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="205:5" pos:end="207:36"><expr pos:start="205:5" pos:end="207:35"><call pos:start="205:5" pos:end="207:35"><name pos:start="205:5" pos:end="205:21">qemu_opt_set_bool</name><argument_list pos:start="205:22" pos:end="207:35">(<argument pos:start="205:23" pos:end="205:26"><expr pos:start="205:23" pos:end="205:26"><name pos:start="205:23" pos:end="205:26">opts</name></expr></argument>, <argument pos:start="205:29" pos:end="205:34"><expr pos:start="205:29" pos:end="205:34"><literal type="string" pos:start="205:29" pos:end="205:34">"ipv4"</literal></expr></argument>, <argument pos:start="205:37" pos:end="205:60"><expr pos:start="205:37" pos:end="205:60"><name pos:start="205:37" pos:end="205:48"><name pos:start="205:37" pos:end="205:37">e</name><operator pos:start="205:38" pos:end="205:39">-&gt;</operator><name pos:start="205:40" pos:end="205:48">ai_family</name></name> <operator pos:start="205:50" pos:end="205:51">!=</operator> <name pos:start="205:53" pos:end="205:60">PF_INET6</name></expr></argument>,

                      <argument pos:start="207:23" pos:end="207:34"><expr pos:start="207:23" pos:end="207:34"><operator pos:start="207:23" pos:end="207:23">&amp;</operator><name pos:start="207:24" pos:end="207:34">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="209:5" pos:end="209:22"><expr pos:start="209:5" pos:end="209:21"><call pos:start="209:5" pos:end="209:21"><name pos:start="209:5" pos:end="209:16">freeaddrinfo</name><argument_list pos:start="209:17" pos:end="209:21">(<argument pos:start="209:18" pos:end="209:20"><expr pos:start="209:18" pos:end="209:20"><name pos:start="209:18" pos:end="209:20">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="211:5" pos:end="211:19">return <expr pos:start="211:12" pos:end="211:18"><name pos:start="211:12" pos:end="211:18">slisten</name></expr>;</return>

</block_content>}</block></function>
</unit>
