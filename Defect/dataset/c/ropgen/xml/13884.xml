<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13884.c" pos:tabs="8"><function pos:start="1:1" pos:end="269:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">vvfat_open</name><parameter_list pos:start="1:22" pos:end="1:70">(<parameter pos:start="1:23" pos:end="1:42"><decl pos:start="1:23" pos:end="1:42"><type pos:start="1:23" pos:end="1:42"><name pos:start="1:23" pos:end="1:38">BlockDriverState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:42">bs</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:58"><decl pos:start="1:45" pos:end="1:58"><type pos:start="1:45" pos:end="1:58"><name pos:start="1:45" pos:end="1:49">QDict</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:58">options</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:69"><decl pos:start="1:61" pos:end="1:69"><type pos:start="1:61" pos:end="1:69"><name pos:start="1:61" pos:end="1:63">int</name></type> <name pos:start="1:65" pos:end="1:69">flags</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="269:1">{<block_content pos:start="5:5" pos:end="267:15">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">BDRVVVFATState</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">s</name> <init pos:start="5:23" pos:end="5:34">= <expr pos:start="5:25" pos:end="5:34"><name pos:start="5:25" pos:end="5:34"><name pos:start="5:25" pos:end="5:26">bs</name><operator pos:start="5:27" pos:end="5:28">-&gt;</operator><name pos:start="5:29" pos:end="5:34">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">cyls</name></decl>, <decl pos:start="7:15" pos:end="7:19"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:15" pos:end="7:19">heads</name></decl>, <decl pos:start="7:22" pos:end="7:25"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:22" pos:end="7:25">secs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">bool</name></type> <name pos:start="9:10" pos:end="9:15">floppy</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:23">dirname</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">QemuOpts</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:18">opts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:9">Error</name> <modifier pos:start="15:11" pos:end="15:11">*</modifier></type><name pos:start="15:12" pos:end="15:20">local_err</name> <init pos:start="15:22" pos:end="15:27">= <expr pos:start="15:24" pos:end="15:27"><name pos:start="15:24" pos:end="15:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="22:0"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="21:1" pos:end="21:12">#<cpp:directive pos:start="21:2" pos:end="21:6">ifdef</cpp:directive> <name pos:start="21:8" pos:end="21:12">DEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="23:5" pos:end="26:0"><expr pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:7">vvv</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <name pos:start="23:11" pos:end="23:11">s</name></expr>;</expr_stmt>

<cpp:endif pos:start="25:1" pos:end="25:6">#<cpp:directive pos:start="25:2" pos:end="25:6">endif</cpp:directive></cpp:endif>



<macro pos:start="29:1" pos:end="35:2"><name pos:start="29:1" pos:end="29:4">DLOG</name><argument_list pos:start="29:5" pos:end="35:2">(<argument pos:start="29:6" pos:end="35:1">if (stderr == NULL) {

    stderr = fopen(<literal type="string" pos:start="31:20" pos:end="31:30">"vvfat.log"</literal>, <literal type="string" pos:start="31:33" pos:end="31:35">"a"</literal>);

    setbuf(stderr, NULL);

}</argument>)</argument_list></macro>



    <expr_stmt pos:start="39:5" pos:end="39:50"><expr pos:start="39:5" pos:end="39:49"><name pos:start="39:5" pos:end="39:8">opts</name> <operator pos:start="39:10" pos:end="39:10">=</operator> <call pos:start="39:12" pos:end="39:49"><name pos:start="39:12" pos:end="39:34">qemu_opts_create_nofail</name><argument_list pos:start="39:35" pos:end="39:49">(<argument pos:start="39:36" pos:end="39:48"><expr pos:start="39:36" pos:end="39:48"><operator pos:start="39:36" pos:end="39:36">&amp;</operator><name pos:start="39:37" pos:end="39:48">runtime_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:54"><expr pos:start="41:5" pos:end="41:53"><call pos:start="41:5" pos:end="41:53"><name pos:start="41:5" pos:end="41:26">qemu_opts_absorb_qdict</name><argument_list pos:start="41:27" pos:end="41:53">(<argument pos:start="41:28" pos:end="41:31"><expr pos:start="41:28" pos:end="41:31"><name pos:start="41:28" pos:end="41:31">opts</name></expr></argument>, <argument pos:start="41:34" pos:end="41:40"><expr pos:start="41:34" pos:end="41:40"><name pos:start="41:34" pos:end="41:40">options</name></expr></argument>, <argument pos:start="41:43" pos:end="41:52"><expr pos:start="41:43" pos:end="41:52"><operator pos:start="41:43" pos:end="41:43">&amp;</operator><name pos:start="41:44" pos:end="41:52">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="53:5"><if pos:start="43:5" pos:end="53:5">if <condition pos:start="43:8" pos:end="43:33">(<expr pos:start="43:9" pos:end="43:32"><call pos:start="43:9" pos:end="43:32"><name pos:start="43:9" pos:end="43:20">error_is_set</name><argument_list pos:start="43:21" pos:end="43:32">(<argument pos:start="43:22" pos:end="43:31"><expr pos:start="43:22" pos:end="43:31"><operator pos:start="43:22" pos:end="43:22">&amp;</operator><name pos:start="43:23" pos:end="43:31">local_err</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:35" pos:end="53:5">{<block_content pos:start="45:9" pos:end="51:18">

        <expr_stmt pos:start="45:9" pos:end="45:37"><expr pos:start="45:9" pos:end="45:36"><call pos:start="45:9" pos:end="45:36"><name pos:start="45:9" pos:end="45:25">qerror_report_err</name><argument_list pos:start="45:26" pos:end="45:36">(<argument pos:start="45:27" pos:end="45:35"><expr pos:start="45:27" pos:end="45:35"><name pos:start="45:27" pos:end="45:35">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:30"><expr pos:start="47:9" pos:end="47:29"><call pos:start="47:9" pos:end="47:29"><name pos:start="47:9" pos:end="47:18">error_free</name><argument_list pos:start="47:19" pos:end="47:29">(<argument pos:start="47:20" pos:end="47:28"><expr pos:start="47:20" pos:end="47:28"><name pos:start="47:20" pos:end="47:28">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:22"><expr pos:start="49:9" pos:end="49:21"><name pos:start="49:9" pos:end="49:11">ret</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <operator pos:start="49:15" pos:end="49:15">-</operator><name pos:start="49:16" pos:end="49:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="51:9" pos:end="51:18">goto <name pos:start="51:14" pos:end="51:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:40"><expr pos:start="57:5" pos:end="57:39"><name pos:start="57:5" pos:end="57:11">dirname</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <call pos:start="57:15" pos:end="57:39"><name pos:start="57:15" pos:end="57:26">qemu_opt_get</name><argument_list pos:start="57:27" pos:end="57:39">(<argument pos:start="57:28" pos:end="57:31"><expr pos:start="57:28" pos:end="57:31"><name pos:start="57:28" pos:end="57:31">opts</name></expr></argument>, <argument pos:start="57:34" pos:end="57:38"><expr pos:start="57:34" pos:end="57:38"><literal type="string" pos:start="57:34" pos:end="57:38">"dir"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="69:5"><if pos:start="59:5" pos:end="69:5">if <condition pos:start="59:8" pos:end="59:17">(<expr pos:start="59:9" pos:end="59:16"><operator pos:start="59:9" pos:end="59:9">!</operator><name pos:start="59:10" pos:end="59:16">dirname</name></expr>)</condition> <block pos:start="59:19" pos:end="69:5">{<block_content pos:start="61:9" pos:end="67:18">

        <expr_stmt pos:start="61:9" pos:end="63:40"><expr pos:start="61:9" pos:end="63:39"><call pos:start="61:9" pos:end="63:39"><name pos:start="61:9" pos:end="61:21">qerror_report</name><argument_list pos:start="61:22" pos:end="63:39">(<argument pos:start="61:23" pos:end="61:47"><expr pos:start="61:23" pos:end="61:47"><name pos:start="61:23" pos:end="61:47">ERROR_CLASS_GENERIC_ERROR</name></expr></argument>, <argument pos:start="61:50" pos:end="63:38"><expr pos:start="61:50" pos:end="63:38"><literal type="string" pos:start="61:50" pos:end="61:79">"vvfat block driver requires "</literal>

                      <literal type="string" pos:start="63:23" pos:end="63:38">"a 'dir' option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:22"><expr pos:start="65:9" pos:end="65:21"><name pos:start="65:9" pos:end="65:11">ret</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <operator pos:start="65:15" pos:end="65:15">-</operator><name pos:start="65:16" pos:end="65:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="67:9" pos:end="67:18">goto <name pos:start="67:14" pos:end="67:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:59"><expr pos:start="73:5" pos:end="73:58"><name pos:start="73:5" pos:end="73:15"><name pos:start="73:5" pos:end="73:5">s</name><operator pos:start="73:6" pos:end="73:7">-&gt;</operator><name pos:start="73:8" pos:end="73:15">fat_type</name></name> <operator pos:start="73:17" pos:end="73:17">=</operator> <call pos:start="73:19" pos:end="73:58"><name pos:start="73:19" pos:end="73:37">qemu_opt_get_number</name><argument_list pos:start="73:38" pos:end="73:58">(<argument pos:start="73:39" pos:end="73:42"><expr pos:start="73:39" pos:end="73:42"><name pos:start="73:39" pos:end="73:42">opts</name></expr></argument>, <argument pos:start="73:45" pos:end="73:54"><expr pos:start="73:45" pos:end="73:54"><literal type="string" pos:start="73:45" pos:end="73:54">"fat-type"</literal></expr></argument>, <argument pos:start="73:57" pos:end="73:57"><expr pos:start="73:57" pos:end="73:57"><literal type="number" pos:start="73:57" pos:end="73:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:54"><expr pos:start="75:5" pos:end="75:53"><name pos:start="75:5" pos:end="75:10">floppy</name> <operator pos:start="75:12" pos:end="75:12">=</operator> <call pos:start="75:14" pos:end="75:53"><name pos:start="75:14" pos:end="75:30">qemu_opt_get_bool</name><argument_list pos:start="75:31" pos:end="75:53">(<argument pos:start="75:32" pos:end="75:35"><expr pos:start="75:32" pos:end="75:35"><name pos:start="75:32" pos:end="75:35">opts</name></expr></argument>, <argument pos:start="75:38" pos:end="75:45"><expr pos:start="75:38" pos:end="75:45"><literal type="string" pos:start="75:38" pos:end="75:45">"floppy"</literal></expr></argument>, <argument pos:start="75:48" pos:end="75:52"><expr pos:start="75:48" pos:end="75:52"><name pos:start="75:48" pos:end="75:52">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="79:5" pos:end="121:5"><if pos:start="79:5" pos:end="105:5">if <condition pos:start="79:8" pos:end="79:15">(<expr pos:start="79:9" pos:end="79:14"><name pos:start="79:9" pos:end="79:14">floppy</name></expr>)</condition> <block pos:start="79:17" pos:end="105:5">{<block_content pos:start="83:9" pos:end="103:18">

        <comment type="block" pos:start="81:9" pos:end="81:79">/* 1.44MB or 2.88MB floppy.  2.88MB can be FAT12 (default) or FAT16. */</comment>

        <if_stmt pos:start="83:9" pos:end="97:9"><if pos:start="83:9" pos:end="91:9">if <condition pos:start="83:12" pos:end="83:25">(<expr pos:start="83:13" pos:end="83:24"><operator pos:start="83:13" pos:end="83:13">!</operator><name pos:start="83:14" pos:end="83:24"><name pos:start="83:14" pos:end="83:14">s</name><operator pos:start="83:15" pos:end="83:16">-&gt;</operator><name pos:start="83:17" pos:end="83:24">fat_type</name></name></expr>)</condition> <block pos:start="83:27" pos:end="91:9">{<block_content pos:start="85:13" pos:end="89:39">

            <expr_stmt pos:start="85:13" pos:end="85:29"><expr pos:start="85:13" pos:end="85:28"><name pos:start="85:13" pos:end="85:23"><name pos:start="85:13" pos:end="85:13">s</name><operator pos:start="85:14" pos:end="85:15">-&gt;</operator><name pos:start="85:16" pos:end="85:23">fat_type</name></name> <operator pos:start="85:25" pos:end="85:25">=</operator> <literal type="number" pos:start="85:27" pos:end="85:28">12</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:22"><expr pos:start="87:13" pos:end="87:21"><name pos:start="87:13" pos:end="87:16">secs</name> <operator pos:start="87:18" pos:end="87:18">=</operator> <literal type="number" pos:start="87:20" pos:end="87:21">36</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:39"><expr pos:start="89:13" pos:end="89:38"><name pos:start="89:13" pos:end="89:34"><name pos:start="89:13" pos:end="89:13">s</name><operator pos:start="89:14" pos:end="89:15">-&gt;</operator><name pos:start="89:16" pos:end="89:34">sectors_per_cluster</name></name> <operator pos:start="89:36" pos:end="89:36">=</operator> <literal type="number" pos:start="89:38" pos:end="89:38">2</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="91:11" pos:end="97:9">else <block pos:start="91:16" pos:end="97:9">{<block_content pos:start="93:13" pos:end="95:39">

            <expr_stmt pos:start="93:13" pos:end="93:47"><expr pos:start="93:13" pos:end="93:46"><name pos:start="93:13" pos:end="93:16">secs</name> <operator pos:start="93:18" pos:end="93:18">=</operator> <ternary pos:start="93:20" pos:end="93:46"><condition pos:start="93:20" pos:end="93:38"><expr pos:start="93:20" pos:end="93:36"><name pos:start="93:20" pos:end="93:30"><name pos:start="93:20" pos:end="93:20">s</name><operator pos:start="93:21" pos:end="93:22">-&gt;</operator><name pos:start="93:23" pos:end="93:30">fat_type</name></name> <operator pos:start="93:32" pos:end="93:33">==</operator> <literal type="number" pos:start="93:35" pos:end="93:36">12</literal></expr> ?</condition><then pos:start="93:40" pos:end="93:41"> <expr pos:start="93:40" pos:end="93:41"><literal type="number" pos:start="93:40" pos:end="93:41">18</literal></expr> </then><else pos:start="93:43" pos:end="93:46">: <expr pos:start="93:45" pos:end="93:46"><literal type="number" pos:start="93:45" pos:end="93:46">36</literal></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:39"><expr pos:start="95:13" pos:end="95:38"><name pos:start="95:13" pos:end="95:34"><name pos:start="95:13" pos:end="95:13">s</name><operator pos:start="95:14" pos:end="95:15">-&gt;</operator><name pos:start="95:16" pos:end="95:34">sectors_per_cluster</name></name> <operator pos:start="95:36" pos:end="95:36">=</operator> <literal type="number" pos:start="95:38" pos:end="95:38">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:36"><expr pos:start="99:9" pos:end="99:35"><name pos:start="99:9" pos:end="99:31"><name pos:start="99:9" pos:end="99:9">s</name><operator pos:start="99:10" pos:end="99:11">-&gt;</operator><name pos:start="99:12" pos:end="99:31">first_sectors_number</name></name> <operator pos:start="99:33" pos:end="99:33">=</operator> <literal type="number" pos:start="99:35" pos:end="99:35">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:18"><expr pos:start="101:9" pos:end="101:17"><name pos:start="101:9" pos:end="101:12">cyls</name> <operator pos:start="101:14" pos:end="101:14">=</operator> <literal type="number" pos:start="101:16" pos:end="101:17">80</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:18"><expr pos:start="103:9" pos:end="103:17"><name pos:start="103:9" pos:end="103:13">heads</name> <operator pos:start="103:15" pos:end="103:15">=</operator> <literal type="number" pos:start="103:17" pos:end="103:17">2</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="105:7" pos:end="121:5">else <block pos:start="105:12" pos:end="121:5">{<block_content pos:start="109:9" pos:end="119:18">

        <comment type="block" pos:start="107:9" pos:end="107:31">/* 32MB or 504MB disk*/</comment>

        <if_stmt pos:start="109:9" pos:end="113:9"><if pos:start="109:9" pos:end="113:9">if <condition pos:start="109:12" pos:end="109:25">(<expr pos:start="109:13" pos:end="109:24"><operator pos:start="109:13" pos:end="109:13">!</operator><name pos:start="109:14" pos:end="109:24"><name pos:start="109:14" pos:end="109:14">s</name><operator pos:start="109:15" pos:end="109:16">-&gt;</operator><name pos:start="109:17" pos:end="109:24">fat_type</name></name></expr>)</condition> <block pos:start="109:27" pos:end="113:9">{<block_content pos:start="111:13" pos:end="111:29">

            <expr_stmt pos:start="111:13" pos:end="111:29"><expr pos:start="111:13" pos:end="111:28"><name pos:start="111:13" pos:end="111:23"><name pos:start="111:13" pos:end="111:13">s</name><operator pos:start="111:14" pos:end="111:15">-&gt;</operator><name pos:start="111:16" pos:end="111:23">fat_type</name></name> <operator pos:start="111:25" pos:end="111:25">=</operator> <literal type="number" pos:start="111:27" pos:end="111:28">16</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:45"><expr pos:start="115:9" pos:end="115:44"><name pos:start="115:9" pos:end="115:12">cyls</name> <operator pos:start="115:14" pos:end="115:14">=</operator> <ternary pos:start="115:16" pos:end="115:44"><condition pos:start="115:16" pos:end="115:34"><expr pos:start="115:16" pos:end="115:32"><name pos:start="115:16" pos:end="115:26"><name pos:start="115:16" pos:end="115:16">s</name><operator pos:start="115:17" pos:end="115:18">-&gt;</operator><name pos:start="115:19" pos:end="115:26">fat_type</name></name> <operator pos:start="115:28" pos:end="115:29">==</operator> <literal type="number" pos:start="115:31" pos:end="115:32">12</literal></expr> ?</condition><then pos:start="115:36" pos:end="115:37"> <expr pos:start="115:36" pos:end="115:37"><literal type="number" pos:start="115:36" pos:end="115:37">64</literal></expr> </then><else pos:start="115:39" pos:end="115:44">: <expr pos:start="115:41" pos:end="115:44"><literal type="number" pos:start="115:41" pos:end="115:44">1024</literal></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:19"><expr pos:start="117:9" pos:end="117:18"><name pos:start="117:9" pos:end="117:13">heads</name> <operator pos:start="117:15" pos:end="117:15">=</operator> <literal type="number" pos:start="117:17" pos:end="117:18">16</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:18"><expr pos:start="119:9" pos:end="119:17"><name pos:start="119:9" pos:end="119:12">secs</name> <operator pos:start="119:14" pos:end="119:14">=</operator> <literal type="number" pos:start="119:16" pos:end="119:17">63</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <switch pos:start="125:5" pos:end="151:5">switch <condition pos:start="125:12" pos:end="125:24">(<expr pos:start="125:13" pos:end="125:23"><name pos:start="125:13" pos:end="125:23"><name pos:start="125:13" pos:end="125:13">s</name><operator pos:start="125:14" pos:end="125:15">-&gt;</operator><name pos:start="125:16" pos:end="125:23">fat_type</name></name></expr>)</condition> <block pos:start="125:26" pos:end="151:5">{<block_content pos:start="127:5" pos:end="149:18">

    <case pos:start="127:5" pos:end="127:12">case <expr pos:start="127:10" pos:end="127:11"><literal type="number" pos:start="127:10" pos:end="127:11">32</literal></expr>:</case>

	    <expr_stmt pos:start="129:13" pos:end="131:47"><expr pos:start="129:13" pos:end="131:46"><call pos:start="129:13" pos:end="131:46"><name pos:start="129:13" pos:end="129:19">fprintf</name><argument_list pos:start="129:20" pos:end="131:46">(<argument pos:start="129:21" pos:end="129:26"><expr pos:start="129:21" pos:end="129:26"><name pos:start="129:21" pos:end="129:26">stderr</name></expr></argument>, <argument pos:start="129:29" pos:end="131:45"><expr pos:start="129:29" pos:end="131:45"><literal type="string" pos:start="129:29" pos:end="129:80">"Big fat greek warning: FAT32 has not been tested. "</literal>

                <literal type="string" pos:start="131:17" pos:end="131:45">"You are welcome to do so!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="133:9" pos:end="133:14">break;</break>

    <case pos:start="135:5" pos:end="135:12">case <expr pos:start="135:10" pos:end="135:11"><literal type="number" pos:start="135:10" pos:end="135:11">16</literal></expr>:</case>

    <case pos:start="137:5" pos:end="137:12">case <expr pos:start="137:10" pos:end="137:11"><literal type="number" pos:start="137:10" pos:end="137:11">12</literal></expr>:</case>

        <break pos:start="139:9" pos:end="139:14">break;</break>

    <default pos:start="141:5" pos:end="141:12">default:</default>

        <expr_stmt pos:start="143:9" pos:end="145:39"><expr pos:start="143:9" pos:end="145:38"><call pos:start="143:9" pos:end="145:38"><name pos:start="143:9" pos:end="143:21">qerror_report</name><argument_list pos:start="143:22" pos:end="145:38">(<argument pos:start="143:23" pos:end="143:47"><expr pos:start="143:23" pos:end="143:47"><name pos:start="143:23" pos:end="143:47">ERROR_CLASS_GENERIC_ERROR</name></expr></argument>, <argument pos:start="143:50" pos:end="145:37"><expr pos:start="143:50" pos:end="145:37"><literal type="string" pos:start="143:50" pos:end="143:76">"Valid FAT types are only "</literal>

                      <literal type="string" pos:start="145:23" pos:end="145:37">"12, 16 and 32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:22"><expr pos:start="147:9" pos:end="147:21"><name pos:start="147:9" pos:end="147:11">ret</name> <operator pos:start="147:13" pos:end="147:13">=</operator> <operator pos:start="147:15" pos:end="147:15">-</operator><name pos:start="147:16" pos:end="147:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="149:9" pos:end="149:18">goto <name pos:start="149:14" pos:end="149:17">fail</name>;</goto>

    </block_content>}</block></switch>





    <expr_stmt pos:start="157:5" pos:end="157:15"><expr pos:start="157:5" pos:end="157:14"><name pos:start="157:5" pos:end="157:9"><name pos:start="157:5" pos:end="157:5">s</name><operator pos:start="157:6" pos:end="157:7">-&gt;</operator><name pos:start="157:8" pos:end="157:9">bs</name></name> <operator pos:start="157:11" pos:end="157:11">=</operator> <name pos:start="157:13" pos:end="157:14">bs</name></expr>;</expr_stmt>



    <comment type="block" pos:start="161:5" pos:end="161:38">/* LATER TODO: if FAT32, adjust */</comment>

    <expr_stmt pos:start="163:5" pos:end="163:32"><expr pos:start="163:5" pos:end="163:31"><name pos:start="163:5" pos:end="163:26"><name pos:start="163:5" pos:end="163:5">s</name><operator pos:start="163:6" pos:end="163:7">-&gt;</operator><name pos:start="163:8" pos:end="163:26">sectors_per_cluster</name></name><operator pos:start="163:27" pos:end="163:27">=</operator><literal type="number" pos:start="163:28" pos:end="163:31">0x10</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="167:5" pos:end="167:34"><expr pos:start="167:5" pos:end="167:33"><name pos:start="167:5" pos:end="167:22"><name pos:start="167:5" pos:end="167:5">s</name><operator pos:start="167:6" pos:end="167:7">-&gt;</operator><name pos:start="167:8" pos:end="167:22">current_cluster</name></name><operator pos:start="167:23" pos:end="167:23">=</operator><literal type="number" pos:start="167:24" pos:end="167:33">0xffffffff</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="171:5" pos:end="171:33"><expr pos:start="171:5" pos:end="171:32"><name pos:start="171:5" pos:end="171:27"><name pos:start="171:5" pos:end="171:5">s</name><operator pos:start="171:6" pos:end="171:7">-&gt;</operator><name pos:start="171:8" pos:end="171:27">first_sectors_number</name></name><operator pos:start="171:28" pos:end="171:28">=</operator><literal type="number" pos:start="171:29" pos:end="171:32">0x40</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="173:5" pos:end="173:45">/* read only is the default for safety */</comment>

    <expr_stmt pos:start="175:5" pos:end="175:22"><expr pos:start="175:5" pos:end="175:21"><name pos:start="175:5" pos:end="175:17"><name pos:start="175:5" pos:end="175:6">bs</name><operator pos:start="175:7" pos:end="175:8">-&gt;</operator><name pos:start="175:9" pos:end="175:17">read_only</name></name> <operator pos:start="175:19" pos:end="175:19">=</operator> <literal type="number" pos:start="175:21" pos:end="175:21">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:37"><expr pos:start="177:5" pos:end="177:36"><name pos:start="177:5" pos:end="177:11"><name pos:start="177:5" pos:end="177:5">s</name><operator pos:start="177:6" pos:end="177:7">-&gt;</operator><name pos:start="177:8" pos:end="177:11">qcow</name></name> <operator pos:start="177:13" pos:end="177:13">=</operator> <name pos:start="177:15" pos:end="177:29"><name pos:start="177:15" pos:end="177:15">s</name><operator pos:start="177:16" pos:end="177:17">-&gt;</operator><name pos:start="177:18" pos:end="177:29">write_target</name></name> <operator pos:start="177:31" pos:end="177:31">=</operator> <name pos:start="177:33" pos:end="177:36">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="179:5" pos:end="179:28"><expr pos:start="179:5" pos:end="179:27"><name pos:start="179:5" pos:end="179:20"><name pos:start="179:5" pos:end="179:5">s</name><operator pos:start="179:6" pos:end="179:7">-&gt;</operator><name pos:start="179:8" pos:end="179:20">qcow_filename</name></name> <operator pos:start="179:22" pos:end="179:22">=</operator> <name pos:start="179:24" pos:end="179:27">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="181:5" pos:end="181:19"><expr pos:start="181:5" pos:end="181:18"><name pos:start="181:5" pos:end="181:11"><name pos:start="181:5" pos:end="181:5">s</name><operator pos:start="181:6" pos:end="181:7">-&gt;</operator><name pos:start="181:8" pos:end="181:11">fat2</name></name> <operator pos:start="181:13" pos:end="181:13">=</operator> <name pos:start="181:15" pos:end="181:18">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="183:5" pos:end="183:32"><expr pos:start="183:5" pos:end="183:31"><name pos:start="183:5" pos:end="183:27"><name pos:start="183:5" pos:end="183:5">s</name><operator pos:start="183:6" pos:end="183:7">-&gt;</operator><name pos:start="183:8" pos:end="183:27">downcase_short_names</name></name> <operator pos:start="183:29" pos:end="183:29">=</operator> <literal type="number" pos:start="183:31" pos:end="183:31">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="187:5" pos:end="189:40"><expr pos:start="187:5" pos:end="189:39"><call pos:start="187:5" pos:end="189:39"><name pos:start="187:5" pos:end="187:11">fprintf</name><argument_list pos:start="187:12" pos:end="189:39">(<argument pos:start="187:13" pos:end="187:18"><expr pos:start="187:13" pos:end="187:18"><name pos:start="187:13" pos:end="187:18">stderr</name></expr></argument>, <argument pos:start="187:21" pos:end="187:45"><expr pos:start="187:21" pos:end="187:45"><literal type="string" pos:start="187:21" pos:end="187:45">"vvfat %s chs %d,%d,%d\n"</literal></expr></argument>,

            <argument pos:start="189:13" pos:end="189:19"><expr pos:start="189:13" pos:end="189:19"><name pos:start="189:13" pos:end="189:19">dirname</name></expr></argument>, <argument pos:start="189:22" pos:end="189:25"><expr pos:start="189:22" pos:end="189:25"><name pos:start="189:22" pos:end="189:25">cyls</name></expr></argument>, <argument pos:start="189:28" pos:end="189:32"><expr pos:start="189:28" pos:end="189:32"><name pos:start="189:28" pos:end="189:32">heads</name></expr></argument>, <argument pos:start="189:35" pos:end="189:38"><expr pos:start="189:35" pos:end="189:38"><name pos:start="189:35" pos:end="189:38">secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="193:5" pos:end="193:74"><expr pos:start="193:5" pos:end="193:73"><name pos:start="193:5" pos:end="193:19"><name pos:start="193:5" pos:end="193:5">s</name><operator pos:start="193:6" pos:end="193:7">-&gt;</operator><name pos:start="193:8" pos:end="193:19">sector_count</name></name> <operator pos:start="193:21" pos:end="193:21">=</operator> <name pos:start="193:23" pos:end="193:26">cyls</name> <operator pos:start="193:28" pos:end="193:28">*</operator> <name pos:start="193:30" pos:end="193:34">heads</name> <operator pos:start="193:36" pos:end="193:36">*</operator> <name pos:start="193:38" pos:end="193:41">secs</name> <operator pos:start="193:43" pos:end="193:43">-</operator> <operator pos:start="193:45" pos:end="193:45">(</operator><name pos:start="193:46" pos:end="193:68"><name pos:start="193:46" pos:end="193:46">s</name><operator pos:start="193:47" pos:end="193:48">-&gt;</operator><name pos:start="193:49" pos:end="193:68">first_sectors_number</name></name> <operator pos:start="193:70" pos:end="193:70">-</operator> <literal type="number" pos:start="193:72" pos:end="193:72">1</literal><operator pos:start="193:73" pos:end="193:73">)</operator></expr>;</expr_stmt>



    <if_stmt pos:start="197:5" pos:end="209:5"><if pos:start="197:5" pos:end="209:5">if <condition pos:start="197:8" pos:end="197:45">(<expr pos:start="197:9" pos:end="197:44"><call pos:start="197:9" pos:end="197:44"><name pos:start="197:9" pos:end="197:25">qemu_opt_get_bool</name><argument_list pos:start="197:26" pos:end="197:44">(<argument pos:start="197:27" pos:end="197:30"><expr pos:start="197:27" pos:end="197:30"><name pos:start="197:27" pos:end="197:30">opts</name></expr></argument>, <argument pos:start="197:33" pos:end="197:36"><expr pos:start="197:33" pos:end="197:36"><literal type="string" pos:start="197:33" pos:end="197:36">"rw"</literal></expr></argument>, <argument pos:start="197:39" pos:end="197:43"><expr pos:start="197:39" pos:end="197:43"><name pos:start="197:39" pos:end="197:43">false</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="197:47" pos:end="209:5">{<block_content pos:start="199:9" pos:end="207:26">

        <if_stmt pos:start="199:9" pos:end="205:9"><if pos:start="199:9" pos:end="205:9">if <condition pos:start="199:12" pos:end="199:35">(<expr pos:start="199:13" pos:end="199:34"><call pos:start="199:13" pos:end="199:34"><name pos:start="199:13" pos:end="199:31">enable_write_target</name><argument_list pos:start="199:32" pos:end="199:34">(<argument pos:start="199:33" pos:end="199:33"><expr pos:start="199:33" pos:end="199:33"><name pos:start="199:33" pos:end="199:33">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="199:37" pos:end="205:9">{<block_content pos:start="201:13" pos:end="203:22">

            <expr_stmt pos:start="201:13" pos:end="201:23"><expr pos:start="201:13" pos:end="201:22"><name pos:start="201:13" pos:end="201:15">ret</name> <operator pos:start="201:17" pos:end="201:17">=</operator> <operator pos:start="201:19" pos:end="201:19">-</operator><name pos:start="201:20" pos:end="201:22">EIO</name></expr>;</expr_stmt>

            <goto pos:start="203:13" pos:end="203:22">goto <name pos:start="203:18" pos:end="203:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="207:9" pos:end="207:26"><expr pos:start="207:9" pos:end="207:25"><name pos:start="207:9" pos:end="207:21"><name pos:start="207:9" pos:end="207:10">bs</name><operator pos:start="207:11" pos:end="207:12">-&gt;</operator><name pos:start="207:13" pos:end="207:21">read_only</name></name> <operator pos:start="207:23" pos:end="207:23">=</operator> <literal type="number" pos:start="207:25" pos:end="207:25">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="213:5" pos:end="213:44"><expr pos:start="213:5" pos:end="213:43"><name pos:start="213:5" pos:end="213:21"><name pos:start="213:5" pos:end="213:6">bs</name><operator pos:start="213:7" pos:end="213:8">-&gt;</operator><name pos:start="213:9" pos:end="213:21">total_sectors</name></name> <operator pos:start="213:23" pos:end="213:23">=</operator> <name pos:start="213:25" pos:end="213:28">cyls</name> <operator pos:start="213:30" pos:end="213:30">*</operator> <name pos:start="213:32" pos:end="213:36">heads</name> <operator pos:start="213:38" pos:end="213:38">*</operator> <name pos:start="213:40" pos:end="213:43">secs</name></expr>;</expr_stmt>



    <if_stmt pos:start="217:5" pos:end="223:5"><if pos:start="217:5" pos:end="223:5">if <condition pos:start="217:8" pos:end="217:50">(<expr pos:start="217:9" pos:end="217:49"><call pos:start="217:9" pos:end="217:49"><name pos:start="217:9" pos:end="217:24">init_directories</name><argument_list pos:start="217:25" pos:end="217:49">(<argument pos:start="217:26" pos:end="217:26"><expr pos:start="217:26" pos:end="217:26"><name pos:start="217:26" pos:end="217:26">s</name></expr></argument>, <argument pos:start="217:29" pos:end="217:35"><expr pos:start="217:29" pos:end="217:35"><name pos:start="217:29" pos:end="217:35">dirname</name></expr></argument>, <argument pos:start="217:38" pos:end="217:42"><expr pos:start="217:38" pos:end="217:42"><name pos:start="217:38" pos:end="217:42">heads</name></expr></argument>, <argument pos:start="217:45" pos:end="217:48"><expr pos:start="217:45" pos:end="217:48"><name pos:start="217:45" pos:end="217:48">secs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="217:52" pos:end="223:5">{<block_content pos:start="219:9" pos:end="221:18">

        <expr_stmt pos:start="219:9" pos:end="219:19"><expr pos:start="219:9" pos:end="219:18"><name pos:start="219:9" pos:end="219:11">ret</name> <operator pos:start="219:13" pos:end="219:13">=</operator> <operator pos:start="219:15" pos:end="219:15">-</operator><name pos:start="219:16" pos:end="219:18">EIO</name></expr>;</expr_stmt>

        <goto pos:start="221:9" pos:end="221:18">goto <name pos:start="221:14" pos:end="221:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="227:5" pos:end="227:81"><expr pos:start="227:5" pos:end="227:80"><name pos:start="227:5" pos:end="227:19"><name pos:start="227:5" pos:end="227:5">s</name><operator pos:start="227:6" pos:end="227:7">-&gt;</operator><name pos:start="227:8" pos:end="227:19">sector_count</name></name> <operator pos:start="227:21" pos:end="227:21">=</operator> <name pos:start="227:23" pos:end="227:38"><name pos:start="227:23" pos:end="227:23">s</name><operator pos:start="227:24" pos:end="227:25">-&gt;</operator><name pos:start="227:26" pos:end="227:38">faked_sectors</name></name> <operator pos:start="227:40" pos:end="227:40">+</operator> <name pos:start="227:42" pos:end="227:63"><name pos:start="227:42" pos:end="227:42">s</name><operator pos:start="227:43" pos:end="227:44">-&gt;</operator><name pos:start="227:45" pos:end="227:63">sectors_per_cluster</name></name><operator pos:start="227:64" pos:end="227:64">*</operator><name pos:start="227:65" pos:end="227:80"><name pos:start="227:65" pos:end="227:65">s</name><operator pos:start="227:66" pos:end="227:67">-&gt;</operator><name pos:start="227:68" pos:end="227:80">cluster_count</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="231:5" pos:end="235:5"><if pos:start="231:5" pos:end="235:5">if <condition pos:start="231:8" pos:end="231:40">(<expr pos:start="231:9" pos:end="231:39"><name pos:start="231:9" pos:end="231:31"><name pos:start="231:9" pos:end="231:9">s</name><operator pos:start="231:10" pos:end="231:11">-&gt;</operator><name pos:start="231:12" pos:end="231:31">first_sectors_number</name></name> <operator pos:start="231:33" pos:end="231:34">==</operator> <literal type="number" pos:start="231:36" pos:end="231:39">0x40</literal></expr>)</condition> <block pos:start="231:42" pos:end="235:5">{<block_content pos:start="233:9" pos:end="233:39">

        <expr_stmt pos:start="233:9" pos:end="233:39"><expr pos:start="233:9" pos:end="233:38"><call pos:start="233:9" pos:end="233:38"><name pos:start="233:9" pos:end="233:16">init_mbr</name><argument_list pos:start="233:17" pos:end="233:38">(<argument pos:start="233:18" pos:end="233:18"><expr pos:start="233:18" pos:end="233:18"><name pos:start="233:18" pos:end="233:18">s</name></expr></argument>, <argument pos:start="233:21" pos:end="233:24"><expr pos:start="233:21" pos:end="233:24"><name pos:start="233:21" pos:end="233:24">cyls</name></expr></argument>, <argument pos:start="233:27" pos:end="233:31"><expr pos:start="233:27" pos:end="233:31"><name pos:start="233:27" pos:end="233:31">heads</name></expr></argument>, <argument pos:start="233:34" pos:end="233:37"><expr pos:start="233:34" pos:end="233:37"><name pos:start="233:34" pos:end="233:37">secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="239:5" pos:end="239:35">//    assert(is_consistent(s));</comment>

    <expr_stmt pos:start="241:5" pos:end="241:33"><expr pos:start="241:5" pos:end="241:32"><call pos:start="241:5" pos:end="241:32"><name pos:start="241:5" pos:end="241:22">qemu_co_mutex_init</name><argument_list pos:start="241:23" pos:end="241:32">(<argument pos:start="241:24" pos:end="241:31"><expr pos:start="241:24" pos:end="241:31"><operator pos:start="241:24" pos:end="241:24">&amp;</operator><name pos:start="241:25" pos:end="241:31"><name pos:start="241:25" pos:end="241:25">s</name><operator pos:start="241:26" pos:end="241:27">-&gt;</operator><name pos:start="241:28" pos:end="241:31">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="245:5" pos:end="245:49">/* Disable migration when vvfat is used rw */</comment>

    <if_stmt pos:start="247:5" pos:end="257:5"><if pos:start="247:5" pos:end="257:5">if <condition pos:start="247:8" pos:end="247:16">(<expr pos:start="247:9" pos:end="247:15"><name pos:start="247:9" pos:end="247:15"><name pos:start="247:9" pos:end="247:9">s</name><operator pos:start="247:10" pos:end="247:11">-&gt;</operator><name pos:start="247:12" pos:end="247:15">qcow</name></name></expr>)</condition> <block pos:start="247:18" pos:end="257:5">{<block_content pos:start="249:9" pos:end="255:50">

        <expr_stmt pos:start="249:9" pos:end="253:67"><expr pos:start="249:9" pos:end="253:66"><call pos:start="249:9" pos:end="253:66"><name pos:start="249:9" pos:end="249:17">error_set</name><argument_list pos:start="249:18" pos:end="253:66">(<argument pos:start="249:19" pos:end="249:39"><expr pos:start="249:19" pos:end="249:39"><operator pos:start="249:19" pos:end="249:19">&amp;</operator><name pos:start="249:20" pos:end="249:39"><name pos:start="249:20" pos:end="249:20">s</name><operator pos:start="249:21" pos:end="249:22">-&gt;</operator><name pos:start="249:23" pos:end="249:39">migration_blocker</name></name></expr></argument>,

                  <argument pos:start="251:19" pos:end="251:57"><expr pos:start="251:19" pos:end="251:57"><name pos:start="251:19" pos:end="251:57">QERR_BLOCK_FORMAT_FEATURE_NOT_SUPPORTED</name></expr></argument>,

                  <argument pos:start="253:19" pos:end="253:30"><expr pos:start="253:19" pos:end="253:30"><literal type="string" pos:start="253:19" pos:end="253:30">"vvfat (rw)"</literal></expr></argument>, <argument pos:start="253:33" pos:end="253:47"><expr pos:start="253:33" pos:end="253:47"><name pos:start="253:33" pos:end="253:47"><name pos:start="253:33" pos:end="253:34">bs</name><operator pos:start="253:35" pos:end="253:36">-&gt;</operator><name pos:start="253:37" pos:end="253:47">device_name</name></name></expr></argument>, <argument pos:start="253:50" pos:end="253:65"><expr pos:start="253:50" pos:end="253:65"><literal type="string" pos:start="253:50" pos:end="253:65">"live migration"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="255:9" pos:end="255:50"><expr pos:start="255:9" pos:end="255:49"><call pos:start="255:9" pos:end="255:49"><name pos:start="255:9" pos:end="255:27">migrate_add_blocker</name><argument_list pos:start="255:28" pos:end="255:49">(<argument pos:start="255:29" pos:end="255:48"><expr pos:start="255:29" pos:end="255:48"><name pos:start="255:29" pos:end="255:48"><name pos:start="255:29" pos:end="255:29">s</name><operator pos:start="255:30" pos:end="255:31">-&gt;</operator><name pos:start="255:32" pos:end="255:48">migration_blocker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="261:5" pos:end="261:12"><expr pos:start="261:5" pos:end="261:11"><name pos:start="261:5" pos:end="261:7">ret</name> <operator pos:start="261:9" pos:end="261:9">=</operator> <literal type="number" pos:start="261:11" pos:end="261:11">0</literal></expr>;</expr_stmt>

<label pos:start="263:1" pos:end="263:5"><name pos:start="263:1" pos:end="263:4">fail</name>:</label>

    <expr_stmt pos:start="265:5" pos:end="265:24"><expr pos:start="265:5" pos:end="265:23"><call pos:start="265:5" pos:end="265:23"><name pos:start="265:5" pos:end="265:17">qemu_opts_del</name><argument_list pos:start="265:18" pos:end="265:23">(<argument pos:start="265:19" pos:end="265:22"><expr pos:start="265:19" pos:end="265:22"><name pos:start="265:19" pos:end="265:22">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="267:5" pos:end="267:15">return <expr pos:start="267:12" pos:end="267:14"><name pos:start="267:12" pos:end="267:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
