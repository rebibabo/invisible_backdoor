<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/400.c" pos:tabs="8"><function pos:start="1:1" pos:end="129:9"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:36">dct_unquantize_mpeg1_mmx</name><parameter_list pos:start="1:37" pos:end="3:71">(<parameter pos:start="1:38" pos:end="1:54"><decl pos:start="1:38" pos:end="1:54"><type pos:start="1:38" pos:end="1:54"><name pos:start="1:38" pos:end="1:51">MpegEncContext</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:54">s</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:51"><decl pos:start="3:38" pos:end="3:51"><type pos:start="3:38" pos:end="3:51"><name pos:start="3:38" pos:end="3:44">DCTELEM</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:51">block</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:58"><decl pos:start="3:54" pos:end="3:58"><type pos:start="3:54" pos:end="3:58"><name pos:start="3:54" pos:end="3:56">int</name></type> <name pos:start="3:58" pos:end="3:58">n</name></decl></parameter>, <parameter pos:start="3:61" pos:end="3:70"><decl pos:start="3:61" pos:end="3:70"><type pos:start="3:61" pos:end="3:70"><name pos:start="3:61" pos:end="3:63">int</name></type> <name pos:start="3:65" pos:end="3:70">qscale</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="129:9">{<block_content pos:start="7:5" pos:end="127:35">

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:16"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:16">level</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:18"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:16">UINT16</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:30">quant_matrix</name></decl>;</decl_stmt>

    <if_stmt pos:start="11:5" pos:end="77:58"><if pos:start="11:5" pos:end="77:58">if <condition pos:start="11:8" pos:end="11:20">(<expr pos:start="11:9" pos:end="11:19"><name pos:start="11:9" pos:end="11:19"><name pos:start="11:9" pos:end="11:9">s</name><operator pos:start="11:10" pos:end="11:11">-&gt;</operator><name pos:start="11:12" pos:end="11:19">mb_intra</name></name></expr>)</condition> <block pos:start="11:22" pos:end="77:57">{<block_content pos:start="13:9" pos:end="77:57">

        <if_stmt pos:start="13:9" pos:end="19:48"><if pos:start="13:9" pos:end="15:48">if <condition pos:start="13:12" pos:end="13:18">(<expr pos:start="13:13" pos:end="13:17"><name pos:start="13:13" pos:end="13:13">n</name> <operator pos:start="13:15" pos:end="13:15">&lt;</operator> <literal type="number" pos:start="13:17" pos:end="13:17">4</literal></expr>)</condition><block type="pseudo" pos:start="15:13" pos:end="15:48"><block_content pos:start="15:13" pos:end="15:48"> 

            <expr_stmt pos:start="15:13" pos:end="15:48"><expr pos:start="15:13" pos:end="15:47"><name pos:start="15:13" pos:end="15:20"><name pos:start="15:13" pos:end="15:17">block</name><index pos:start="15:18" pos:end="15:20">[<expr pos:start="15:19" pos:end="15:19"><literal type="number" pos:start="15:19" pos:end="15:19">0</literal></expr>]</index></name> <operator pos:start="15:22" pos:end="15:22">=</operator> <name pos:start="15:24" pos:end="15:31"><name pos:start="15:24" pos:end="15:28">block</name><index pos:start="15:29" pos:end="15:31">[<expr pos:start="15:30" pos:end="15:30"><literal type="number" pos:start="15:30" pos:end="15:30">0</literal></expr>]</index></name> <operator pos:start="15:33" pos:end="15:33">*</operator> <name pos:start="15:35" pos:end="15:47"><name pos:start="15:35" pos:end="15:35">s</name><operator pos:start="15:36" pos:end="15:37">-&gt;</operator><name pos:start="15:38" pos:end="15:47">y_dc_scale</name></name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="17:9" pos:end="19:48">else<block type="pseudo" pos:start="19:13" pos:end="19:48"><block_content pos:start="19:13" pos:end="19:48">

            <expr_stmt pos:start="19:13" pos:end="19:48"><expr pos:start="19:13" pos:end="19:47"><name pos:start="19:13" pos:end="19:20"><name pos:start="19:13" pos:end="19:17">block</name><index pos:start="19:18" pos:end="19:20">[<expr pos:start="19:19" pos:end="19:19"><literal type="number" pos:start="19:19" pos:end="19:19">0</literal></expr>]</index></name> <operator pos:start="19:22" pos:end="19:22">=</operator> <name pos:start="19:24" pos:end="19:31"><name pos:start="19:24" pos:end="19:28">block</name><index pos:start="19:29" pos:end="19:31">[<expr pos:start="19:30" pos:end="19:30"><literal type="number" pos:start="19:30" pos:end="19:30">0</literal></expr>]</index></name> <operator pos:start="19:33" pos:end="19:33">*</operator> <name pos:start="19:35" pos:end="19:47"><name pos:start="19:35" pos:end="19:35">s</name><operator pos:start="19:36" pos:end="19:37">-&gt;</operator><name pos:start="19:38" pos:end="19:47">c_dc_scale</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="21:9" pos:end="27:9"><if pos:start="21:9" pos:end="27:9">if <condition pos:start="21:12" pos:end="21:38">(<expr pos:start="21:13" pos:end="21:37"><name pos:start="21:13" pos:end="21:25"><name pos:start="21:13" pos:end="21:13">s</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:25">out_format</name></name> <operator pos:start="21:27" pos:end="21:28">==</operator> <name pos:start="21:30" pos:end="21:37">FMT_H263</name></expr>)</condition> <block pos:start="21:40" pos:end="27:9">{<block_content pos:start="23:13" pos:end="25:30">

            <expr_stmt pos:start="23:13" pos:end="23:18"><expr pos:start="23:13" pos:end="23:17"><name pos:start="23:13" pos:end="23:13">i</name> <operator pos:start="23:15" pos:end="23:15">=</operator> <literal type="number" pos:start="23:17" pos:end="23:17">1</literal></expr>;</expr_stmt>

            <goto pos:start="25:13" pos:end="25:30">goto <name pos:start="25:18" pos:end="25:29">unquant_even</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="29:9" pos:end="29:29">/* XXX: only mpeg1 */</comment>

        <expr_stmt pos:start="31:9" pos:end="31:39"><expr pos:start="31:9" pos:end="31:38"><name pos:start="31:9" pos:end="31:20">quant_matrix</name> <operator pos:start="31:22" pos:end="31:22">=</operator> <name pos:start="31:24" pos:end="31:38"><name pos:start="31:24" pos:end="31:24">s</name><operator pos:start="31:25" pos:end="31:26">-&gt;</operator><name pos:start="31:27" pos:end="31:38">intra_matrix</name></name></expr>;</expr_stmt>

	<expr_stmt pos:start="33:9" pos:end="33:12"><expr pos:start="33:9" pos:end="33:11"><name pos:start="33:9" pos:end="33:9">i</name><operator pos:start="33:10" pos:end="33:10">=</operator><literal type="number" pos:start="33:11" pos:end="33:11">1</literal></expr>;</expr_stmt>

	<comment type="block" pos:start="35:9" pos:end="35:42">/* Align on 4 elements boundary */</comment>

	<while pos:start="37:9" pos:end="61:25">while<condition pos:start="37:14" pos:end="37:18">(<expr pos:start="37:15" pos:end="37:17"><name pos:start="37:15" pos:end="37:15">i</name><operator pos:start="37:16" pos:end="37:16">&amp;</operator><literal type="number" pos:start="37:17" pos:end="37:17">3</literal></expr>)</condition>

	<block pos:start="39:9" pos:end="61:25">{<block_content pos:start="41:13" pos:end="57:16">

            <expr_stmt pos:start="41:13" pos:end="41:29"><expr pos:start="41:13" pos:end="41:28"><name pos:start="41:13" pos:end="41:17">level</name> <operator pos:start="41:19" pos:end="41:19">=</operator> <name pos:start="41:21" pos:end="41:28"><name pos:start="41:21" pos:end="41:25">block</name><index pos:start="41:26" pos:end="41:28">[<expr pos:start="41:27" pos:end="41:27"><name pos:start="41:27" pos:end="41:27">i</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="43:13" pos:end="55:13"><if pos:start="43:13" pos:end="55:13">if <condition pos:start="43:16" pos:end="43:22">(<expr pos:start="43:17" pos:end="43:21"><name pos:start="43:17" pos:end="43:21">level</name></expr>)</condition> <block pos:start="43:24" pos:end="55:13">{<block_content pos:start="45:17" pos:end="53:33">

                <if_stmt pos:start="45:17" pos:end="45:46"><if pos:start="45:17" pos:end="45:46">if <condition pos:start="45:20" pos:end="45:30">(<expr pos:start="45:21" pos:end="45:29"><name pos:start="45:21" pos:end="45:25">level</name> <operator pos:start="45:27" pos:end="45:27">&lt;</operator> <literal type="number" pos:start="45:29" pos:end="45:29">0</literal></expr>)</condition><block type="pseudo" pos:start="45:32" pos:end="45:46"><block_content pos:start="45:32" pos:end="45:46"> <expr_stmt pos:start="45:32" pos:end="45:46"><expr pos:start="45:32" pos:end="45:45"><name pos:start="45:32" pos:end="45:36">level</name> <operator pos:start="45:38" pos:end="45:38">=</operator> <operator pos:start="45:40" pos:end="45:40">-</operator><name pos:start="45:41" pos:end="45:45">level</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="47:21" pos:end="47:73"><expr pos:start="47:21" pos:end="47:72"><name pos:start="47:21" pos:end="47:25">level</name> <operator pos:start="47:27" pos:end="47:27">=</operator> <operator pos:start="47:29" pos:end="47:29">(</operator><name pos:start="47:30" pos:end="47:32">int</name><operator pos:start="47:33" pos:end="47:33">)</operator><operator pos:start="47:34" pos:end="47:34">(</operator><name pos:start="47:35" pos:end="47:39">level</name> <operator pos:start="47:41" pos:end="47:41">*</operator> <name pos:start="47:43" pos:end="47:48">qscale</name> <operator pos:start="47:50" pos:end="47:50">*</operator> <name pos:start="47:52" pos:end="47:66"><name pos:start="47:52" pos:end="47:63">quant_matrix</name><index pos:start="47:64" pos:end="47:66">[<expr pos:start="47:65" pos:end="47:65"><name pos:start="47:65" pos:end="47:65">i</name></expr>]</index></name><operator pos:start="47:67" pos:end="47:67">)</operator> <operator pos:start="47:69" pos:end="47:70">&gt;&gt;</operator> <literal type="number" pos:start="47:72" pos:end="47:72">3</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="49:21" pos:end="49:44"><expr pos:start="49:21" pos:end="49:43"><name pos:start="49:21" pos:end="49:25">level</name> <operator pos:start="49:27" pos:end="49:27">=</operator> <operator pos:start="49:29" pos:end="49:29">(</operator><name pos:start="49:30" pos:end="49:34">level</name> <operator pos:start="49:36" pos:end="49:36">-</operator> <literal type="number" pos:start="49:38" pos:end="49:38">1</literal><operator pos:start="49:39" pos:end="49:39">)</operator> <operator pos:start="49:41" pos:end="49:41">|</operator> <literal type="number" pos:start="49:43" pos:end="49:43">1</literal></expr>;</expr_stmt>

                <if_stmt pos:start="51:17" pos:end="51:49"><if pos:start="51:17" pos:end="51:49">if <condition pos:start="51:20" pos:end="51:33">(<expr pos:start="51:21" pos:end="51:32"><name pos:start="51:21" pos:end="51:28"><name pos:start="51:21" pos:end="51:25">block</name><index pos:start="51:26" pos:end="51:28">[<expr pos:start="51:27" pos:end="51:27"><name pos:start="51:27" pos:end="51:27">i</name></expr>]</index></name> <operator pos:start="51:30" pos:end="51:30">&lt;</operator> <literal type="number" pos:start="51:32" pos:end="51:32">0</literal></expr>)</condition><block type="pseudo" pos:start="51:35" pos:end="51:49"><block_content pos:start="51:35" pos:end="51:49"> <expr_stmt pos:start="51:35" pos:end="51:49"><expr pos:start="51:35" pos:end="51:48"><name pos:start="51:35" pos:end="51:39">level</name> <operator pos:start="51:41" pos:end="51:41">=</operator> <operator pos:start="51:43" pos:end="51:43">-</operator><name pos:start="51:44" pos:end="51:48">level</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="53:17" pos:end="53:33"><expr pos:start="53:17" pos:end="53:32"><name pos:start="53:17" pos:end="53:24"><name pos:start="53:17" pos:end="53:21">block</name><index pos:start="53:22" pos:end="53:24">[<expr pos:start="53:23" pos:end="53:23"><name pos:start="53:23" pos:end="53:23">i</name></expr>]</index></name> <operator pos:start="53:26" pos:end="53:26">=</operator> <name pos:start="53:28" pos:end="53:32">level</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

	    <expr_stmt pos:start="57:13" pos:end="57:16"><expr pos:start="57:13" pos:end="57:15"><name pos:start="57:13" pos:end="57:13">i</name><operator pos:start="57:14" pos:end="57:15">++</operator></expr>;</expr_stmt>

	</block_content>}</block></while>

	<asm pos:start="61:9" pos:end="61:25">__asm __volatile(</asm>

	<expr_stmt pos:start="63:9" pos:end="77:56"><expr pos:start="63:9" pos:end="77:21"><literal type="string" pos:start="63:9" pos:end="63:30">"movd	%0, %%mm6\n\t"</literal>       <comment type="block" pos:start="63:38" pos:end="63:60">/* mm6 = qscale | 0  */</comment>

	<literal type="string" pos:start="65:9" pos:end="65:36">"punpckldq %%mm6, %%mm6\n\t"</literal> <comment type="block" pos:start="65:38" pos:end="65:64">/* mm6 = qscale | qscale */</comment>

	<literal type="string" pos:start="67:9" pos:end="67:30">"movq	%2, %%mm4\n\t"</literal>

	<literal type="string" pos:start="69:9" pos:end="69:33">"movq	%%mm6, %%mm7\n\t"</literal>

	<literal type="string" pos:start="71:9" pos:end="71:30">"movq	%1, %%mm5\n\t"</literal>

	<literal type="string" pos:start="73:9" pos:end="73:35">"packssdw %%mm6, %%mm7\n\t"</literal> <comment type="block" pos:start="73:37" pos:end="73:81">/* mm7 = qscale | qscale | qscale | qscale */</comment>

	<literal type="string" pos:start="75:9" pos:end="75:33">"pxor	%%mm6, %%mm6\n\t"</literal>

	<operator pos:start="77:9" pos:end="77:10">::</operator><literal type="string" pos:start="77:11" pos:end="77:13">"g"</literal><operator pos:start="77:14" pos:end="77:14">(</operator><name pos:start="77:15" pos:end="77:20">qscale</name><operator pos:start="77:21" pos:end="77:21">)</operator></expr><operator pos:start="77:22" pos:end="77:22">,</operator><expr pos:start="77:23" pos:end="77:34"><literal type="string" pos:start="77:23" pos:end="77:25">"m"</literal><operator pos:start="77:26" pos:end="77:26">(</operator><name pos:start="77:27" pos:end="77:33">mm_wone</name><operator pos:start="77:34" pos:end="77:34">)</operator></expr><operator pos:start="77:35" pos:end="77:35">,</operator><expr pos:start="77:36" pos:end="77:56"><literal type="string" pos:start="77:36" pos:end="77:38">"m"</literal><operator pos:start="77:39" pos:end="77:39">(</operator><name pos:start="77:40" pos:end="77:46">mm_wabs</name><operator pos:start="77:47" pos:end="77:47">)</operator><operator pos:start="77:48" pos:end="77:48">:</operator><literal type="string" pos:start="77:49" pos:end="77:56">"memory"</literal></expr></expr_stmt>)</block_content></block><empty_stmt pos:start="77:58" pos:end="77:58">;</empty_stmt></if></if_stmt>

        <for pos:start="79:9" pos:end="127:35">for<control pos:start="79:12" pos:end="79:23">(<init pos:start="79:13" pos:end="79:13">;</init><condition pos:start="79:14" pos:end="79:18"><expr pos:start="79:14" pos:end="79:17"><name pos:start="79:14" pos:end="79:14">i</name><operator pos:start="79:15" pos:end="79:15">&lt;</operator><literal type="number" pos:start="79:16" pos:end="79:17">64</literal></expr>;</condition><incr pos:start="79:19" pos:end="79:22"><expr pos:start="79:19" pos:end="79:22"><name pos:start="79:19" pos:end="79:19">i</name><operator pos:start="79:20" pos:end="79:21">+=</operator><literal type="number" pos:start="79:22" pos:end="79:22">4</literal></expr></incr>)</control> <block pos:start="79:25" pos:end="127:34">{<block_content pos:start="83:25" pos:end="127:34">

		<asm pos:start="81:17" pos:end="81:33">__asm __volatile(</asm>

			<expr_stmt pos:start="83:25" pos:end="127:33"><expr pos:start="83:25" pos:end="125:38"><literal type="string" pos:start="83:25" pos:end="83:46">"movq	%1, %%mm0\n\t"</literal>

			<literal type="string" pos:start="85:25" pos:end="85:49">"movq	%%mm7, %%mm1\n\t"</literal>

			<literal type="string" pos:start="87:25" pos:end="87:49">"movq	%%mm0, %%mm2\n\t"</literal>

			<literal type="string" pos:start="89:25" pos:end="89:49">"movq	%%mm0, %%mm3\n\t"</literal>

			<literal type="string" pos:start="91:25" pos:end="91:50">"pcmpgtw %%mm6, %%mm2\n\t"</literal>

			<literal type="string" pos:start="93:25" pos:end="93:46">"pmullw	%2, %%mm1\n\t"</literal>

			<literal type="string" pos:start="95:25" pos:end="95:49">"pandn	%%mm4, %%mm2\n\t"</literal>

			<literal type="string" pos:start="97:25" pos:end="97:49">"por	%%mm5, %%mm2\n\t"</literal>

			<literal type="string" pos:start="99:25" pos:end="99:49">"pmullw	%%mm2, %%mm0\n\t"</literal> <comment type="block" pos:start="99:51" pos:end="99:76">/* mm0 = abs(block[i]). */</comment>



			<literal type="string" pos:start="103:25" pos:end="103:50">"pcmpeqw %%mm6, %%mm3\n\t"</literal>

			<literal type="string" pos:start="105:25" pos:end="105:49">"pmullw	%%mm0, %%mm1\n\t"</literal>

			<literal type="string" pos:start="107:25" pos:end="107:46">"psraw	$3, %%mm1\n\t"</literal>

			<literal type="string" pos:start="109:25" pos:end="109:49">"psubw	%%mm5, %%mm1\n\t"</literal>   <comment type="block" pos:start="109:53" pos:end="109:70">/* block[i] --; */</comment>

			<literal type="string" pos:start="111:25" pos:end="111:49">"pandn	%%mm4, %%mm3\n\t"</literal>  <comment type="block" pos:start="111:52" pos:end="111:98">/* fake of pcmpneqw : mm0 != 0 then mm1 = -1 */</comment>

			<literal type="string" pos:start="113:25" pos:end="113:49">"por	%%mm5, %%mm1\n\t"</literal>   <comment type="block" pos:start="113:53" pos:end="113:71">/* block[i] |= 1 */</comment>

			<literal type="string" pos:start="115:25" pos:end="115:49">"pmullw %%mm2, %%mm1\n\t"</literal>   <comment type="block" pos:start="115:53" pos:end="115:76">/* change signs again */</comment>



			<literal type="string" pos:start="119:25" pos:end="119:49">"pand	%%mm3, %%mm1\n\t"</literal> <comment type="block" pos:start="119:51" pos:end="119:75">/* nullify if was zero */</comment>

			<literal type="string" pos:start="121:25" pos:end="121:42">"movq	%%mm1, %0"</literal>

			<operator pos:start="123:25" pos:end="123:25">:</operator><literal type="string" pos:start="123:26" pos:end="123:29">"=m"</literal><operator pos:start="123:30" pos:end="123:30">(</operator><name pos:start="123:31" pos:end="123:38"><name pos:start="123:31" pos:end="123:35">block</name><index pos:start="123:36" pos:end="123:38">[<expr pos:start="123:37" pos:end="123:37"><name pos:start="123:37" pos:end="123:37">i</name></expr>]</index></name><operator pos:start="123:39" pos:end="123:39">)</operator>

			<operator pos:start="125:25" pos:end="125:25">:</operator><literal type="string" pos:start="125:26" pos:end="125:28">"m"</literal><operator pos:start="125:29" pos:end="125:29">(</operator><name pos:start="125:30" pos:end="125:37"><name pos:start="125:30" pos:end="125:34">block</name><index pos:start="125:35" pos:end="125:37">[<expr pos:start="125:36" pos:end="125:36"><name pos:start="125:36" pos:end="125:36">i</name></expr>]</index></name><operator pos:start="125:38" pos:end="125:38">)</operator></expr><operator pos:start="125:39" pos:end="125:39">,</operator> <expr pos:start="125:41" pos:end="127:33"><literal type="string" pos:start="125:41" pos:end="125:43">"m"</literal><operator pos:start="125:44" pos:end="125:44">(</operator><name pos:start="125:45" pos:end="125:59"><name pos:start="125:45" pos:end="125:56">quant_matrix</name><index pos:start="125:57" pos:end="125:59">[<expr pos:start="125:58" pos:end="125:58"><name pos:start="125:58" pos:end="125:58">i</name></expr>]</index></name><operator pos:start="125:60" pos:end="125:60">)</operator>

			<operator pos:start="127:25" pos:end="127:25">:</operator><literal type="string" pos:start="127:26" pos:end="127:33">"memory"</literal></expr></expr_stmt>)</block_content></block><empty_stmt pos:start="127:35" pos:end="127:35">;</empty_stmt></for>

        </block_content>}</block></function>

    } else <block pos:start="131:12" pos:end="351:5">{<block_content pos:start="133:9" pos:end="350:0">

        <expr_stmt pos:start="133:9" pos:end="133:14"><expr pos:start="133:9" pos:end="133:13"><name pos:start="133:9" pos:end="133:9">i</name> <operator pos:start="133:11" pos:end="133:11">=</operator> <literal type="number" pos:start="133:13" pos:end="133:13">0</literal></expr>;</expr_stmt>

    <label pos:start="135:5" pos:end="135:17"><name pos:start="135:5" pos:end="135:16">unquant_even</name>:</label>

        <expr_stmt pos:start="137:9" pos:end="137:43"><expr pos:start="137:9" pos:end="137:42"><name pos:start="137:9" pos:end="137:20">quant_matrix</name> <operator pos:start="137:22" pos:end="137:22">=</operator> <name pos:start="137:24" pos:end="137:42"><name pos:start="137:24" pos:end="137:24">s</name><operator pos:start="137:25" pos:end="137:26">-&gt;</operator><name pos:start="137:27" pos:end="137:42">non_intra_matrix</name></name></expr>;</expr_stmt>

	<comment type="block" pos:start="139:9" pos:end="139:42">/* Align on 4 elements boundary */</comment>

	<while pos:start="141:9" pos:end="165:9">while<condition pos:start="141:14" pos:end="141:18">(<expr pos:start="141:15" pos:end="141:17"><name pos:start="141:15" pos:end="141:15">i</name><operator pos:start="141:16" pos:end="141:16">&amp;</operator><literal type="number" pos:start="141:17" pos:end="141:17">7</literal></expr>)</condition>

	<block pos:start="143:9" pos:end="165:9">{<block_content pos:start="145:13" pos:end="163:16">

	    <expr_stmt pos:start="145:13" pos:end="145:29"><expr pos:start="145:13" pos:end="145:28"><name pos:start="145:13" pos:end="145:17">level</name> <operator pos:start="145:19" pos:end="145:19">=</operator> <name pos:start="145:21" pos:end="145:28"><name pos:start="145:21" pos:end="145:25">block</name><index pos:start="145:26" pos:end="145:28">[<expr pos:start="145:27" pos:end="145:27"><name pos:start="145:27" pos:end="145:27">i</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="147:13" pos:end="161:13"><if pos:start="147:13" pos:end="161:13">if <condition pos:start="147:16" pos:end="147:22">(<expr pos:start="147:17" pos:end="147:21"><name pos:start="147:17" pos:end="147:21">level</name></expr>)</condition> <block pos:start="147:24" pos:end="161:13">{<block_content pos:start="149:17" pos:end="159:33">

                <if_stmt pos:start="149:17" pos:end="149:46"><if pos:start="149:17" pos:end="149:46">if <condition pos:start="149:20" pos:end="149:30">(<expr pos:start="149:21" pos:end="149:29"><name pos:start="149:21" pos:end="149:25">level</name> <operator pos:start="149:27" pos:end="149:27">&lt;</operator> <literal type="number" pos:start="149:29" pos:end="149:29">0</literal></expr>)</condition><block type="pseudo" pos:start="149:32" pos:end="149:46"><block_content pos:start="149:32" pos:end="149:46"> <expr_stmt pos:start="149:32" pos:end="149:46"><expr pos:start="149:32" pos:end="149:45"><name pos:start="149:32" pos:end="149:36">level</name> <operator pos:start="149:38" pos:end="149:38">=</operator> <operator pos:start="149:40" pos:end="149:40">-</operator><name pos:start="149:41" pos:end="149:45">level</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="151:21" pos:end="153:59"><expr pos:start="151:21" pos:end="153:58"><name pos:start="151:21" pos:end="151:25">level</name> <operator pos:start="151:27" pos:end="151:27">=</operator> <operator pos:start="151:29" pos:end="151:29">(</operator><operator pos:start="151:30" pos:end="151:30">(</operator><operator pos:start="151:31" pos:end="151:31">(</operator><name pos:start="151:32" pos:end="151:36">level</name> <operator pos:start="151:38" pos:end="151:39">&lt;&lt;</operator> <literal type="number" pos:start="151:41" pos:end="151:41">1</literal><operator pos:start="151:42" pos:end="151:42">)</operator> <operator pos:start="151:44" pos:end="151:44">+</operator> <literal type="number" pos:start="151:46" pos:end="151:46">1</literal><operator pos:start="151:47" pos:end="151:47">)</operator> <operator pos:start="151:49" pos:end="151:49">*</operator> <name pos:start="151:51" pos:end="151:56">qscale</name> <operator pos:start="151:58" pos:end="151:58">*</operator>

                             <operator pos:start="153:30" pos:end="153:30">(</operator><operator pos:start="153:31" pos:end="153:31">(</operator><name pos:start="153:32" pos:end="153:34">int</name><operator pos:start="153:35" pos:end="153:35">)</operator> <name pos:start="153:37" pos:end="153:51"><name pos:start="153:37" pos:end="153:48">quant_matrix</name><index pos:start="153:49" pos:end="153:51">[<expr pos:start="153:50" pos:end="153:50"><name pos:start="153:50" pos:end="153:50">i</name></expr>]</index></name><operator pos:start="153:52" pos:end="153:52">)</operator><operator pos:start="153:53" pos:end="153:53">)</operator> <operator pos:start="153:55" pos:end="153:56">&gt;&gt;</operator> <literal type="number" pos:start="153:58" pos:end="153:58">4</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="155:21" pos:end="155:44"><expr pos:start="155:21" pos:end="155:43"><name pos:start="155:21" pos:end="155:25">level</name> <operator pos:start="155:27" pos:end="155:27">=</operator> <operator pos:start="155:29" pos:end="155:29">(</operator><name pos:start="155:30" pos:end="155:34">level</name> <operator pos:start="155:36" pos:end="155:36">-</operator> <literal type="number" pos:start="155:38" pos:end="155:38">1</literal><operator pos:start="155:39" pos:end="155:39">)</operator> <operator pos:start="155:41" pos:end="155:41">|</operator> <literal type="number" pos:start="155:43" pos:end="155:43">1</literal></expr>;</expr_stmt>

                <if_stmt pos:start="157:17" pos:end="157:48"><if pos:start="157:17" pos:end="157:48">if<condition pos:start="157:19" pos:end="157:32">(<expr pos:start="157:20" pos:end="157:31"><name pos:start="157:20" pos:end="157:27"><name pos:start="157:20" pos:end="157:24">block</name><index pos:start="157:25" pos:end="157:27">[<expr pos:start="157:26" pos:end="157:26"><name pos:start="157:26" pos:end="157:26">i</name></expr>]</index></name> <operator pos:start="157:29" pos:end="157:29">&lt;</operator> <literal type="number" pos:start="157:31" pos:end="157:31">0</literal></expr>)</condition><block type="pseudo" pos:start="157:34" pos:end="157:48"><block_content pos:start="157:34" pos:end="157:48"> <expr_stmt pos:start="157:34" pos:end="157:48"><expr pos:start="157:34" pos:end="157:47"><name pos:start="157:34" pos:end="157:38">level</name> <operator pos:start="157:40" pos:end="157:40">=</operator> <operator pos:start="157:42" pos:end="157:42">-</operator><name pos:start="157:43" pos:end="157:47">level</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="159:17" pos:end="159:33"><expr pos:start="159:17" pos:end="159:32"><name pos:start="159:17" pos:end="159:24"><name pos:start="159:17" pos:end="159:21">block</name><index pos:start="159:22" pos:end="159:24">[<expr pos:start="159:23" pos:end="159:23"><name pos:start="159:23" pos:end="159:23">i</name></expr>]</index></name> <operator pos:start="159:26" pos:end="159:26">=</operator> <name pos:start="159:28" pos:end="159:32">level</name></expr>;</expr_stmt>

	    </block_content>}</block></if></if_stmt>

	    <expr_stmt pos:start="163:13" pos:end="163:16"><expr pos:start="163:13" pos:end="163:15"><name pos:start="163:13" pos:end="163:13">i</name><operator pos:start="163:14" pos:end="163:15">++</operator></expr>;</expr_stmt>

	</block_content>}</block></while>



<asm pos:start="169:1" pos:end="350:0">asm <specifier pos:start="169:5" pos:end="169:12">volatile</specifier>(

		"pcmpeqw %%mm7, %%mm7		\n\t"

		"psrlw $15, %%mm7		\n\t"

		"movd %2, %%mm6			\n\t"

		"packssdw %%mm6, %%mm6		\n\t"

		"packssdw %%mm6, %%mm6		\n\t"

		"1:				\n\t"

		"movq (%0, %3), %%mm0		\n\t"

		"movq 8(%0, %3), %%mm1		\n\t"

		"movq (%1, %3), %%mm4		\n\t"

		"movq 8(%1, %3), %%mm5		\n\t"

		"pmullw %%mm6, %%mm4		\n\t" <comment type="line" pos:start="191:55" pos:end="191:81">// q=qscale*quant_matrix[i]</comment>

		"pmullw %%mm6, %%mm5		\n\t" <comment type="line" pos:start="193:55" pos:end="193:81">// q=qscale*quant_matrix[i]</comment>

		"pxor %%mm2, %%mm2		\n\t"

		"pxor %%mm3, %%mm3		\n\t"

		"pcmpgtw %%mm0, %%mm2		\n\t" <comment type="line" pos:start="199:55" pos:end="199:78">// block[i] &lt; 0 ? -1 : 0</comment>

		"pcmpgtw %%mm1, %%mm3		\n\t" <comment type="line" pos:start="201:55" pos:end="201:78">// block[i] &lt; 0 ? -1 : 0</comment>

		"pxor %%mm2, %%mm0		\n\t"

		"pxor %%mm3, %%mm1		\n\t"

		"psubw %%mm2, %%mm0		\n\t" <comment type="line" pos:start="207:55" pos:end="207:70">// abs(block[i])</comment>

		"psubw %%mm3, %%mm1		\n\t" <comment type="line" pos:start="209:55" pos:end="209:70">// abs(block[i])</comment>

		"paddw %%mm0, %%mm0		\n\t" <comment type="line" pos:start="211:55" pos:end="211:72">// abs(block[i])*2</comment>

		"paddw %%mm1, %%mm1		\n\t" <comment type="line" pos:start="213:55" pos:end="213:72">// abs(block[i])*2</comment>

		"paddw %%mm7, %%mm0		\n\t" <comment type="line" pos:start="215:55" pos:end="215:76">// abs(block[i])*2 + 1</comment>

		"paddw %%mm7, %%mm1		\n\t" <comment type="line" pos:start="217:55" pos:end="217:76">// abs(block[i])*2 + 1</comment>

		"pmullw %%mm4, %%mm0		\n\t" <comment type="line" pos:start="219:55" pos:end="219:80">// (abs(block[i])*2 + 1)*q</comment>

		"pmullw %%mm5, %%mm1		\n\t" <comment type="line" pos:start="221:55" pos:end="221:80">// (abs(block[i])*2 + 1)*q</comment>

		"pxor %%mm4, %%mm4		\n\t"

		"pxor %%mm5, %%mm5		\n\t" <comment type="line" pos:start="225:55" pos:end="225:67">// FIXME slow</comment>

		"pcmpeqw (%0, %3), %%mm4	\n\t" <comment type="line" pos:start="227:55" pos:end="227:79">// block[i] == 0 ? -1 : 0</comment>

		"pcmpeqw 8(%0, %3), %%mm5	\n\t" <comment type="line" pos:start="229:55" pos:end="229:79">// block[i] == 0 ? -1 : 0</comment>

		"psraw $4, %%mm0		\n\t"

		"psraw $4, %%mm1		\n\t"

		"psubw %%mm7, %%mm0		\n\t"

		"psubw %%mm7, %%mm1		\n\t"

		"por %%mm7, %%mm0		\n\t"

		"por %%mm7, %%mm1		\n\t"

		"pxor %%mm2, %%mm0		\n\t"

		"pxor %%mm3, %%mm1		\n\t"

		"psubw %%mm2, %%mm0		\n\t"

		"psubw %%mm3, %%mm1		\n\t"

		"pandn %%mm0, %%mm4		\n\t"

		"pandn %%mm1, %%mm5		\n\t"

		"movq %%mm4, (%0, %3)		\n\t"

		"movq %%mm5, 8(%0, %3)		\n\t"



		"addl $16, %3			\n\t"

		"cmpl $128, %3			\n\t"

		"jb 1b				\n\t"

		::"r" (block), "r"(quant_matrix), "g" (qscale), "r" (2*i)

		: "memory"

	);</asm>



<cpp:if pos:start="275:1" pos:end="275:5">#<cpp:directive pos:start="275:2" pos:end="275:3">if</cpp:directive> <expr pos:start="275:5" pos:end="275:5"><literal type="number" pos:start="275:5" pos:end="275:5">0</literal></expr></cpp:if>

	__asm __volatile(

	"movd	%0, %%mm6\n\t"       <comment type="block" pos:start="279:38" pos:end="279:60">/* mm6 = qscale | 0  */</comment>

	"punpckldq %%mm6, %%mm6\n\t" <comment type="block" pos:start="281:38" pos:end="281:64">/* mm6 = qscale | qscale */</comment>

	"movq	%2, %%mm4\n\t"

	"movq	%%mm6, %%mm7\n\t"

	"movq	%1, %%mm5\n\t"

	"packssdw %%mm6, %%mm7\n\t" <comment type="block" pos:start="289:37" pos:end="289:81">/* mm7 = qscale | qscale | qscale | qscale */</comment>

	"pxor	%%mm6, %%mm6\n\t"

	::"g"(qscale),"m"(mm_wone),"m"(mm_wabs));

        for(;i&lt;64;i+=4) {

		__asm __volatile(

			"movq	%1, %%mm0\n\t"

			"movq	%%mm7, %%mm1\n\t"

			"movq	%%mm0, %%mm2\n\t"

			"movq	%%mm0, %%mm3\n\t"

			"pcmpgtw %%mm6, %%mm2\n\t"

			"pmullw	%2, %%mm1\n\t"

			"pandn	%%mm4, %%mm2\n\t"

			"por	%%mm5, %%mm2\n\t"

			"pmullw	%%mm2, %%mm0\n\t" <comment type="block" pos:start="315:51" pos:end="315:76">/* mm0 = abs(block[i]). */</comment>

			"psllw	$1, %%mm0\n\t" <comment type="block" pos:start="317:48" pos:end="317:67">/* block[i] &lt;&lt;= 1 */</comment>

			"paddw	%%mm5, %%mm0\n\t" <comment type="block" pos:start="319:51" pos:end="319:67">/* block[i] ++ */</comment>



			"pmullw	%%mm0, %%mm1\n\t"

			"psraw	$4, %%mm1\n\t"

			"pcmpeqw %%mm6, %%mm3\n\t"

			"psubw	%%mm5, %%mm1\n\t"   <comment type="block" pos:start="329:53" pos:end="329:70">/* block[i] --; */</comment>

			"pandn	%%mm4, %%mm3\n\t"  <comment type="block" pos:start="331:52" pos:end="331:98">/* fake of pcmpneqw : mm0 != 0 then mm1 = -1 */</comment>

			"por	%%mm5, %%mm1\n\t"   <comment type="block" pos:start="333:53" pos:end="333:71">/* block[i] |= 1 */</comment>

			"pmullw %%mm2, %%mm1\n\t"   <comment type="block" pos:start="335:53" pos:end="335:76">/* change signs again */</comment>



			"pand	%%mm3, %%mm1\n\t" <comment type="block" pos:start="339:51" pos:end="339:75">/* nullify if was zero */</comment>

			"movq	%%mm1, %0"

			:"=m"(block[i])

			:"m"(block[i]), "m"(quant_matrix[i]));

        }

<cpp:endif pos:start="349:1" pos:end="349:6">#<cpp:directive pos:start="349:2" pos:end="349:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block>

}
</unit>
