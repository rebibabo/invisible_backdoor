<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9740.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint32_t</name></type> <name pos:start="1:17" pos:end="1:36">vfio_pci_read_config</name><parameter_list pos:start="1:37" pos:end="1:77">(<parameter pos:start="1:38" pos:end="1:52"><decl pos:start="1:38" pos:end="1:52"><type pos:start="1:38" pos:end="1:52"><name pos:start="1:38" pos:end="1:46">PCIDevice</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:52">pdev</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:67"><decl pos:start="1:55" pos:end="1:67"><type pos:start="1:55" pos:end="1:67"><name pos:start="1:55" pos:end="1:62">uint32_t</name></type> <name pos:start="1:64" pos:end="1:67">addr</name></decl></parameter>, <parameter pos:start="1:70" pos:end="1:76"><decl pos:start="1:70" pos:end="1:76"><type pos:start="1:70" pos:end="1:76"><name pos:start="1:70" pos:end="1:72">int</name></type> <name pos:start="1:74" pos:end="1:76">len</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="95:1">{<block_content pos:start="5:5" pos:end="93:15">

    <decl_stmt pos:start="5:5" pos:end="5:57"><decl pos:start="5:5" pos:end="5:56"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">VFIODevice</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:20">vdev</name> <init pos:start="5:22" pos:end="5:56">= <expr pos:start="5:24" pos:end="5:56"><call pos:start="5:24" pos:end="5:56"><name pos:start="5:24" pos:end="5:32">DO_UPCAST</name><argument_list pos:start="5:33" pos:end="5:56">(<argument pos:start="5:34" pos:end="5:43"><expr pos:start="5:34" pos:end="5:43"><name pos:start="5:34" pos:end="5:43">VFIODevice</name></expr></argument>, <argument pos:start="5:46" pos:end="5:49"><expr pos:start="5:46" pos:end="5:49"><name pos:start="5:46" pos:end="5:49">pdev</name></expr></argument>, <argument pos:start="5:52" pos:end="5:55"><expr pos:start="5:52" pos:end="5:55"><name pos:start="5:52" pos:end="5:55">pdev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:16">val</name> <init pos:start="7:18" pos:end="7:20">= <expr pos:start="7:20" pos:end="7:20"><literal type="number" pos:start="7:20" pos:end="7:20">0</literal></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="19:7">/*

     * We only need QEMU PCI config support for the ROM BAR, the MSI and MSIX

     * capabilities, and the multifunction bit below.  We let VFIO handle

     * virtualizing everything else.  Performance is not a concern here.

     */</comment>

    <if_stmt pos:start="21:5" pos:end="51:5"><if pos:start="21:5" pos:end="35:5">if <condition pos:start="21:8" pos:end="29:71">(<expr pos:start="21:9" pos:end="29:70"><call pos:start="21:9" pos:end="21:53"><name pos:start="21:9" pos:end="21:22">ranges_overlap</name><argument_list pos:start="21:23" pos:end="21:53">(<argument pos:start="21:24" pos:end="21:27"><expr pos:start="21:24" pos:end="21:27"><name pos:start="21:24" pos:end="21:27">addr</name></expr></argument>, <argument pos:start="21:30" pos:end="21:32"><expr pos:start="21:30" pos:end="21:32"><name pos:start="21:30" pos:end="21:32">len</name></expr></argument>, <argument pos:start="21:35" pos:end="21:49"><expr pos:start="21:35" pos:end="21:49"><name pos:start="21:35" pos:end="21:49">PCI_ROM_ADDRESS</name></expr></argument>, <argument pos:start="21:52" pos:end="21:52"><expr pos:start="21:52" pos:end="21:52"><literal type="number" pos:start="21:52" pos:end="21:52">4</literal></expr></argument>)</argument_list></call> <operator pos:start="21:55" pos:end="21:56">||</operator>

        <operator pos:start="23:9" pos:end="23:9">(</operator><name pos:start="23:10" pos:end="23:26"><name pos:start="23:10" pos:end="23:13">pdev</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:26">cap_present</name></name> <operator pos:start="23:28" pos:end="23:28">&amp;</operator> <name pos:start="23:30" pos:end="23:46">QEMU_PCI_CAP_MSIX</name> <operator pos:start="23:48" pos:end="23:49">&amp;&amp;</operator>

         <call pos:start="25:10" pos:end="25:67"><name pos:start="25:10" pos:end="25:23">ranges_overlap</name><argument_list pos:start="25:24" pos:end="25:67">(<argument pos:start="25:25" pos:end="25:28"><expr pos:start="25:25" pos:end="25:28"><name pos:start="25:25" pos:end="25:28">addr</name></expr></argument>, <argument pos:start="25:31" pos:end="25:33"><expr pos:start="25:31" pos:end="25:33"><name pos:start="25:31" pos:end="25:33">len</name></expr></argument>, <argument pos:start="25:36" pos:end="25:49"><expr pos:start="25:36" pos:end="25:49"><name pos:start="25:36" pos:end="25:49"><name pos:start="25:36" pos:end="25:39">pdev</name><operator pos:start="25:40" pos:end="25:41">-&gt;</operator><name pos:start="25:42" pos:end="25:49">msix_cap</name></name></expr></argument>, <argument pos:start="25:52" pos:end="25:66"><expr pos:start="25:52" pos:end="25:66"><name pos:start="25:52" pos:end="25:66">MSIX_CAP_LENGTH</name></expr></argument>)</argument_list></call><operator pos:start="25:68" pos:end="25:68">)</operator> <operator pos:start="25:70" pos:end="25:71">||</operator>

        <operator pos:start="27:9" pos:end="27:9">(</operator><name pos:start="27:10" pos:end="27:26"><name pos:start="27:10" pos:end="27:13">pdev</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:26">cap_present</name></name> <operator pos:start="27:28" pos:end="27:28">&amp;</operator> <name pos:start="27:30" pos:end="27:45">QEMU_PCI_CAP_MSI</name> <operator pos:start="27:47" pos:end="27:48">&amp;&amp;</operator>

         <call pos:start="29:10" pos:end="29:69"><name pos:start="29:10" pos:end="29:23">ranges_overlap</name><argument_list pos:start="29:24" pos:end="29:69">(<argument pos:start="29:25" pos:end="29:28"><expr pos:start="29:25" pos:end="29:28"><name pos:start="29:25" pos:end="29:28">addr</name></expr></argument>, <argument pos:start="29:31" pos:end="29:33"><expr pos:start="29:31" pos:end="29:33"><name pos:start="29:31" pos:end="29:33">len</name></expr></argument>, <argument pos:start="29:36" pos:end="29:48"><expr pos:start="29:36" pos:end="29:48"><name pos:start="29:36" pos:end="29:48"><name pos:start="29:36" pos:end="29:39">pdev</name><operator pos:start="29:40" pos:end="29:41">-&gt;</operator><name pos:start="29:42" pos:end="29:48">msi_cap</name></name></expr></argument>, <argument pos:start="29:51" pos:end="29:68"><expr pos:start="29:51" pos:end="29:68"><name pos:start="29:51" pos:end="29:68"><name pos:start="29:51" pos:end="29:54">vdev</name><operator pos:start="29:55" pos:end="29:56">-&gt;</operator><name pos:start="29:57" pos:end="29:68">msi_cap_size</name></name></expr></argument>)</argument_list></call><operator pos:start="29:70" pos:end="29:70">)</operator></expr>)</condition> <block pos:start="29:73" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:55">



        <expr_stmt pos:start="33:9" pos:end="33:55"><expr pos:start="33:9" pos:end="33:54"><name pos:start="33:9" pos:end="33:11">val</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <call pos:start="33:15" pos:end="33:54"><name pos:start="33:15" pos:end="33:37">pci_default_read_config</name><argument_list pos:start="33:38" pos:end="33:54">(<argument pos:start="33:39" pos:end="33:42"><expr pos:start="33:39" pos:end="33:42"><name pos:start="33:39" pos:end="33:42">pdev</name></expr></argument>, <argument pos:start="33:45" pos:end="33:48"><expr pos:start="33:45" pos:end="33:48"><name pos:start="33:45" pos:end="33:48">addr</name></expr></argument>, <argument pos:start="33:51" pos:end="33:53"><expr pos:start="33:51" pos:end="33:53"><name pos:start="33:51" pos:end="33:53">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="35:7" pos:end="51:5">else <block pos:start="35:12" pos:end="51:5">{<block_content pos:start="37:9" pos:end="49:31">

        <if_stmt pos:start="37:9" pos:end="47:9"><if pos:start="37:9" pos:end="47:9">if <condition pos:start="37:12" pos:end="37:74">(<expr pos:start="37:13" pos:end="37:73"><call pos:start="37:13" pos:end="37:66"><name pos:start="37:13" pos:end="37:17">pread</name><argument_list pos:start="37:18" pos:end="37:66">(<argument pos:start="37:19" pos:end="37:26"><expr pos:start="37:19" pos:end="37:26"><name pos:start="37:19" pos:end="37:26"><name pos:start="37:19" pos:end="37:22">vdev</name><operator pos:start="37:23" pos:end="37:24">-&gt;</operator><name pos:start="37:25" pos:end="37:26">fd</name></name></expr></argument>, <argument pos:start="37:29" pos:end="37:32"><expr pos:start="37:29" pos:end="37:32"><operator pos:start="37:29" pos:end="37:29">&amp;</operator><name pos:start="37:30" pos:end="37:32">val</name></expr></argument>, <argument pos:start="37:35" pos:end="37:37"><expr pos:start="37:35" pos:end="37:37"><name pos:start="37:35" pos:end="37:37">len</name></expr></argument>, <argument pos:start="37:40" pos:end="37:65"><expr pos:start="37:40" pos:end="37:65"><name pos:start="37:40" pos:end="37:58"><name pos:start="37:40" pos:end="37:43">vdev</name><operator pos:start="37:44" pos:end="37:45">-&gt;</operator><name pos:start="37:46" pos:end="37:58">config_offset</name></name> <operator pos:start="37:60" pos:end="37:60">+</operator> <name pos:start="37:62" pos:end="37:65">addr</name></expr></argument>)</argument_list></call> <operator pos:start="37:68" pos:end="37:69">!=</operator> <name pos:start="37:71" pos:end="37:73">len</name></expr>)</condition> <block pos:start="37:76" pos:end="47:9">{<block_content pos:start="39:13" pos:end="45:26">

            <expr_stmt pos:start="39:13" pos:end="43:74"><expr pos:start="39:13" pos:end="43:73"><call pos:start="39:13" pos:end="43:73"><name pos:start="39:13" pos:end="39:24">error_report</name><argument_list pos:start="39:25" pos:end="43:73">(<argument pos:start="39:26" pos:end="39:71"><expr pos:start="39:26" pos:end="39:71"><literal type="string" pos:start="39:26" pos:end="39:71">"%s(%04x:%02x:%02x.%x, 0x%x, 0x%x) failed: %m"</literal></expr></argument>,

                         <argument pos:start="41:26" pos:end="41:33"><expr pos:start="41:26" pos:end="41:33"><name pos:start="41:26" pos:end="41:33">__func__</name></expr></argument>, <argument pos:start="41:36" pos:end="41:52"><expr pos:start="41:36" pos:end="41:52"><name pos:start="41:36" pos:end="41:52"><name pos:start="41:36" pos:end="41:39">vdev</name><operator pos:start="41:40" pos:end="41:41">-&gt;</operator><name pos:start="41:42" pos:end="41:45">host</name><operator pos:start="41:46" pos:end="41:46">.</operator><name pos:start="41:47" pos:end="41:52">domain</name></name></expr></argument>, <argument pos:start="41:55" pos:end="41:68"><expr pos:start="41:55" pos:end="41:68"><name pos:start="41:55" pos:end="41:68"><name pos:start="41:55" pos:end="41:58">vdev</name><operator pos:start="41:59" pos:end="41:60">-&gt;</operator><name pos:start="41:61" pos:end="41:64">host</name><operator pos:start="41:65" pos:end="41:65">.</operator><name pos:start="41:66" pos:end="41:68">bus</name></name></expr></argument>,

                         <argument pos:start="43:26" pos:end="43:40"><expr pos:start="43:26" pos:end="43:40"><name pos:start="43:26" pos:end="43:40"><name pos:start="43:26" pos:end="43:29">vdev</name><operator pos:start="43:30" pos:end="43:31">-&gt;</operator><name pos:start="43:32" pos:end="43:35">host</name><operator pos:start="43:36" pos:end="43:36">.</operator><name pos:start="43:37" pos:end="43:40">slot</name></name></expr></argument>, <argument pos:start="43:43" pos:end="43:61"><expr pos:start="43:43" pos:end="43:61"><name pos:start="43:43" pos:end="43:61"><name pos:start="43:43" pos:end="43:46">vdev</name><operator pos:start="43:47" pos:end="43:48">-&gt;</operator><name pos:start="43:49" pos:end="43:52">host</name><operator pos:start="43:53" pos:end="43:53">.</operator><name pos:start="43:54" pos:end="43:61">function</name></name></expr></argument>, <argument pos:start="43:64" pos:end="43:67"><expr pos:start="43:64" pos:end="43:67"><name pos:start="43:64" pos:end="43:67">addr</name></expr></argument>, <argument pos:start="43:70" pos:end="43:72"><expr pos:start="43:70" pos:end="43:72"><name pos:start="43:70" pos:end="43:72">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="45:13" pos:end="45:26">return <expr pos:start="45:20" pos:end="45:25"><operator pos:start="45:20" pos:end="45:20">-</operator><name pos:start="45:21" pos:end="45:25">errno</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:31"><expr pos:start="49:9" pos:end="49:30"><name pos:start="49:9" pos:end="49:11">val</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <call pos:start="49:15" pos:end="49:30"><name pos:start="49:15" pos:end="49:25">le32_to_cpu</name><argument_list pos:start="49:26" pos:end="49:30">(<argument pos:start="49:27" pos:end="49:29"><expr pos:start="49:27" pos:end="49:29"><name pos:start="49:27" pos:end="49:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:49">/* Multifunction bit is virualized in QEMU */</comment>

    <if_stmt pos:start="57:5" pos:end="81:5"><if pos:start="57:5" pos:end="81:5">if <condition pos:start="57:8" pos:end="57:64">(<expr pos:start="57:9" pos:end="57:63"><call pos:start="57:9" pos:end="57:63"><name pos:start="57:9" pos:end="57:16">unlikely</name><argument_list pos:start="57:17" pos:end="57:63">(<argument pos:start="57:18" pos:end="57:62"><expr pos:start="57:18" pos:end="57:62"><call pos:start="57:18" pos:end="57:62"><name pos:start="57:18" pos:end="57:31">ranges_overlap</name><argument_list pos:start="57:32" pos:end="57:62">(<argument pos:start="57:33" pos:end="57:36"><expr pos:start="57:33" pos:end="57:36"><name pos:start="57:33" pos:end="57:36">addr</name></expr></argument>, <argument pos:start="57:39" pos:end="57:41"><expr pos:start="57:39" pos:end="57:41"><name pos:start="57:39" pos:end="57:41">len</name></expr></argument>, <argument pos:start="57:44" pos:end="57:58"><expr pos:start="57:44" pos:end="57:58"><name pos:start="57:44" pos:end="57:58">PCI_HEADER_TYPE</name></expr></argument>, <argument pos:start="57:61" pos:end="57:61"><expr pos:start="57:61" pos:end="57:61"><literal type="number" pos:start="57:61" pos:end="57:61">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="57:66" pos:end="81:5">{<block_content pos:start="59:9" pos:end="79:9">

        <decl_stmt pos:start="59:9" pos:end="59:55"><decl pos:start="59:9" pos:end="59:54"><type pos:start="59:9" pos:end="59:16"><name pos:start="59:9" pos:end="59:16">uint32_t</name></type> <name pos:start="59:18" pos:end="59:21">mask</name> <init pos:start="59:23" pos:end="59:54">= <expr pos:start="59:25" pos:end="59:54"><name pos:start="59:25" pos:end="59:54">PCI_HEADER_TYPE_MULTI_FUNCTION</name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="63:9" pos:end="67:9"><if pos:start="63:9" pos:end="67:9">if <condition pos:start="63:12" pos:end="63:21">(<expr pos:start="63:13" pos:end="63:20"><name pos:start="63:13" pos:end="63:15">len</name> <operator pos:start="63:17" pos:end="63:18">==</operator> <literal type="number" pos:start="63:20" pos:end="63:20">4</literal></expr>)</condition> <block pos:start="63:23" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:24">

            <expr_stmt pos:start="65:13" pos:end="65:24"><expr pos:start="65:13" pos:end="65:23"><name pos:start="65:13" pos:end="65:16">mask</name> <operator pos:start="65:18" pos:end="65:20">&lt;&lt;=</operator> <literal type="number" pos:start="65:22" pos:end="65:23">16</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="71:9" pos:end="79:9"><if pos:start="71:9" pos:end="75:9">if <condition pos:start="71:12" pos:end="71:59">(<expr pos:start="71:13" pos:end="71:58"><name pos:start="71:13" pos:end="71:29"><name pos:start="71:13" pos:end="71:16">pdev</name><operator pos:start="71:17" pos:end="71:18">-&gt;</operator><name pos:start="71:19" pos:end="71:29">cap_present</name></name> <operator pos:start="71:31" pos:end="71:31">&amp;</operator> <name pos:start="71:33" pos:end="71:58">QEMU_PCI_CAP_MULTIFUNCTION</name></expr>)</condition> <block pos:start="71:61" pos:end="75:9">{<block_content pos:start="73:13" pos:end="73:24">

            <expr_stmt pos:start="73:13" pos:end="73:24"><expr pos:start="73:13" pos:end="73:23"><name pos:start="73:13" pos:end="73:15">val</name> <operator pos:start="73:17" pos:end="73:18">|=</operator> <name pos:start="73:20" pos:end="73:23">mask</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="75:11" pos:end="79:9">else <block pos:start="75:16" pos:end="79:9">{<block_content pos:start="77:13" pos:end="77:25">

            <expr_stmt pos:start="77:13" pos:end="77:25"><expr pos:start="77:13" pos:end="77:24"><name pos:start="77:13" pos:end="77:15">val</name> <operator pos:start="77:17" pos:end="77:18">&amp;=</operator> <operator pos:start="77:20" pos:end="77:20">~</operator><name pos:start="77:21" pos:end="77:24">mask</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="85:5" pos:end="89:49"><expr pos:start="85:5" pos:end="89:48"><call pos:start="85:5" pos:end="89:48"><name pos:start="85:5" pos:end="85:11">DPRINTF</name><argument_list pos:start="85:12" pos:end="89:48">(<argument pos:start="85:13" pos:end="85:57"><expr pos:start="85:13" pos:end="85:57"><literal type="string" pos:start="85:13" pos:end="85:57">"%s(%04x:%02x:%02x.%x, @0x%x, len=0x%x) %x\n"</literal></expr></argument>, <argument pos:start="85:60" pos:end="85:67"><expr pos:start="85:60" pos:end="85:67"><name pos:start="85:60" pos:end="85:67">__func__</name></expr></argument>,

            <argument pos:start="87:13" pos:end="87:29"><expr pos:start="87:13" pos:end="87:29"><name pos:start="87:13" pos:end="87:29"><name pos:start="87:13" pos:end="87:16">vdev</name><operator pos:start="87:17" pos:end="87:18">-&gt;</operator><name pos:start="87:19" pos:end="87:22">host</name><operator pos:start="87:23" pos:end="87:23">.</operator><name pos:start="87:24" pos:end="87:29">domain</name></name></expr></argument>, <argument pos:start="87:32" pos:end="87:45"><expr pos:start="87:32" pos:end="87:45"><name pos:start="87:32" pos:end="87:45"><name pos:start="87:32" pos:end="87:35">vdev</name><operator pos:start="87:36" pos:end="87:37">-&gt;</operator><name pos:start="87:38" pos:end="87:41">host</name><operator pos:start="87:42" pos:end="87:42">.</operator><name pos:start="87:43" pos:end="87:45">bus</name></name></expr></argument>, <argument pos:start="87:48" pos:end="87:62"><expr pos:start="87:48" pos:end="87:62"><name pos:start="87:48" pos:end="87:62"><name pos:start="87:48" pos:end="87:51">vdev</name><operator pos:start="87:52" pos:end="87:53">-&gt;</operator><name pos:start="87:54" pos:end="87:57">host</name><operator pos:start="87:58" pos:end="87:58">.</operator><name pos:start="87:59" pos:end="87:62">slot</name></name></expr></argument>,

            <argument pos:start="89:13" pos:end="89:31"><expr pos:start="89:13" pos:end="89:31"><name pos:start="89:13" pos:end="89:31"><name pos:start="89:13" pos:end="89:16">vdev</name><operator pos:start="89:17" pos:end="89:18">-&gt;</operator><name pos:start="89:19" pos:end="89:22">host</name><operator pos:start="89:23" pos:end="89:23">.</operator><name pos:start="89:24" pos:end="89:31">function</name></name></expr></argument>, <argument pos:start="89:34" pos:end="89:37"><expr pos:start="89:34" pos:end="89:37"><name pos:start="89:34" pos:end="89:37">addr</name></expr></argument>, <argument pos:start="89:40" pos:end="89:42"><expr pos:start="89:40" pos:end="89:42"><name pos:start="89:40" pos:end="89:42">len</name></expr></argument>, <argument pos:start="89:45" pos:end="89:47"><expr pos:start="89:45" pos:end="89:47"><name pos:start="89:45" pos:end="89:47">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="93:5" pos:end="93:15">return <expr pos:start="93:12" pos:end="93:14"><name pos:start="93:12" pos:end="93:14">val</name></expr>;</return>

</block_content>}</block></function>
</unit>
