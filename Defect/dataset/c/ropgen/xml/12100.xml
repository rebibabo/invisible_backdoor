<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12100.c" pos:tabs="8"><function pos:start="1:1" pos:end="127:1"><type pos:start="1:1" pos:end="1:17"><name pos:start="1:1" pos:end="1:15">AVFilterContext</name> <modifier pos:start="1:17" pos:end="1:17">*</modifier></type><name pos:start="1:18" pos:end="1:32">ff_filter_alloc</name><parameter_list pos:start="1:33" pos:end="1:79">(<parameter pos:start="1:34" pos:end="1:55"><decl pos:start="1:34" pos:end="1:55"><type pos:start="1:34" pos:end="1:55"><specifier pos:start="1:34" pos:end="1:38">const</specifier> <name pos:start="1:40" pos:end="1:47">AVFilter</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:55">filter</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:78"><decl pos:start="1:58" pos:end="1:78"><type pos:start="1:58" pos:end="1:78"><specifier pos:start="1:58" pos:end="1:62">const</specifier> <name pos:start="1:64" pos:end="1:67">char</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:78">inst_name</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="127:1">{<block_content pos:start="5:5" pos:end="125:16">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19">AVFilterContext</name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:24">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="11:20"><if pos:start="9:5" pos:end="11:20">if <condition pos:start="9:8" pos:end="9:16">(<expr pos:start="9:9" pos:end="9:15"><operator pos:start="9:9" pos:end="9:9">!</operator><name pos:start="9:10" pos:end="9:15">filter</name></expr>)</condition><block type="pseudo" pos:start="11:9" pos:end="11:20"><block_content pos:start="11:9" pos:end="11:20">

        <return pos:start="11:9" pos:end="11:20">return <expr pos:start="11:16" pos:end="11:19"><name pos:start="11:16" pos:end="11:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:46"><expr pos:start="15:5" pos:end="15:45"><name pos:start="15:5" pos:end="15:7">ret</name> <operator pos:start="15:9" pos:end="15:9">=</operator> <call pos:start="15:11" pos:end="15:45"><name pos:start="15:11" pos:end="15:20">av_mallocz</name><argument_list pos:start="15:21" pos:end="15:45">(<argument pos:start="15:22" pos:end="15:44"><expr pos:start="15:22" pos:end="15:44"><sizeof pos:start="15:22" pos:end="15:44">sizeof<argument_list pos:start="15:28" pos:end="15:44">(<argument pos:start="15:29" pos:end="15:43"><expr pos:start="15:29" pos:end="15:43"><name pos:start="15:29" pos:end="15:43">AVFilterContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="19:20"><if pos:start="17:5" pos:end="19:20">if <condition pos:start="17:8" pos:end="17:13">(<expr pos:start="17:9" pos:end="17:12"><operator pos:start="17:9" pos:end="17:9">!</operator><name pos:start="17:10" pos:end="17:12">ret</name></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:20"><block_content pos:start="19:9" pos:end="19:20">

        <return pos:start="19:9" pos:end="19:20">return <expr pos:start="19:16" pos:end="19:19"><name pos:start="19:16" pos:end="19:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:36"><expr pos:start="23:5" pos:end="23:35"><name pos:start="23:5" pos:end="23:17"><name pos:start="23:5" pos:end="23:7">ret</name><operator pos:start="23:8" pos:end="23:9">-&gt;</operator><name pos:start="23:10" pos:end="23:17">av_class</name></name> <operator pos:start="23:19" pos:end="23:19">=</operator> <operator pos:start="23:21" pos:end="23:21">&amp;</operator><name pos:start="23:22" pos:end="23:35">avfilter_class</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:27"><expr pos:start="25:5" pos:end="25:26"><name pos:start="25:5" pos:end="25:15"><name pos:start="25:5" pos:end="25:7">ret</name><operator pos:start="25:8" pos:end="25:9">-&gt;</operator><name pos:start="25:10" pos:end="25:15">filter</name></name>   <operator pos:start="25:19" pos:end="25:19">=</operator> <name pos:start="25:21" pos:end="25:26">filter</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:60"><expr pos:start="27:5" pos:end="27:59"><name pos:start="27:5" pos:end="27:13"><name pos:start="27:5" pos:end="27:7">ret</name><operator pos:start="27:8" pos:end="27:9">-&gt;</operator><name pos:start="27:10" pos:end="27:13">name</name></name>     <operator pos:start="27:19" pos:end="27:19">=</operator> <ternary pos:start="27:21" pos:end="27:59"><condition pos:start="27:21" pos:end="27:31"><expr pos:start="27:21" pos:end="27:29"><name pos:start="27:21" pos:end="27:29">inst_name</name></expr> ?</condition><then pos:start="27:33" pos:end="27:52"> <expr pos:start="27:33" pos:end="27:52"><call pos:start="27:33" pos:end="27:52"><name pos:start="27:33" pos:end="27:41">av_strdup</name><argument_list pos:start="27:42" pos:end="27:52">(<argument pos:start="27:43" pos:end="27:51"><expr pos:start="27:43" pos:end="27:51"><name pos:start="27:43" pos:end="27:51">inst_name</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="27:54" pos:end="27:59">: <expr pos:start="27:56" pos:end="27:59"><name pos:start="27:56" pos:end="27:59">NULL</name></expr></else></ternary></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="37:5"><if pos:start="29:5" pos:end="37:5">if <condition pos:start="29:8" pos:end="29:26">(<expr pos:start="29:9" pos:end="29:25"><name pos:start="29:9" pos:end="29:25"><name pos:start="29:9" pos:end="29:14">filter</name><operator pos:start="29:15" pos:end="29:16">-&gt;</operator><name pos:start="29:17" pos:end="29:25">priv_size</name></name></expr>)</condition> <block pos:start="29:28" pos:end="37:5">{<block_content pos:start="31:9" pos:end="35:21">

        <expr_stmt pos:start="31:9" pos:end="31:54"><expr pos:start="31:9" pos:end="31:53"><name pos:start="31:9" pos:end="31:17"><name pos:start="31:9" pos:end="31:11">ret</name><operator pos:start="31:12" pos:end="31:13">-&gt;</operator><name pos:start="31:14" pos:end="31:17">priv</name></name>     <operator pos:start="31:23" pos:end="31:23">=</operator> <call pos:start="31:25" pos:end="31:53"><name pos:start="31:25" pos:end="31:34">av_mallocz</name><argument_list pos:start="31:35" pos:end="31:53">(<argument pos:start="31:36" pos:end="31:52"><expr pos:start="31:36" pos:end="31:52"><name pos:start="31:36" pos:end="31:52"><name pos:start="31:36" pos:end="31:41">filter</name><operator pos:start="31:42" pos:end="31:43">-&gt;</operator><name pos:start="31:44" pos:end="31:52">priv_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="35:21"><if pos:start="33:9" pos:end="35:21">if <condition pos:start="33:12" pos:end="33:23">(<expr pos:start="33:13" pos:end="33:22"><operator pos:start="33:13" pos:end="33:13">!</operator><name pos:start="33:14" pos:end="33:22"><name pos:start="33:14" pos:end="33:16">ret</name><operator pos:start="33:17" pos:end="33:18">-&gt;</operator><name pos:start="33:19" pos:end="33:22">priv</name></name></expr>)</condition><block type="pseudo" pos:start="35:13" pos:end="35:21"><block_content pos:start="35:13" pos:end="35:21">

            <goto pos:start="35:13" pos:end="35:21">goto <name pos:start="35:18" pos:end="35:20">err</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:27">(<expr pos:start="41:9" pos:end="41:26"><name pos:start="41:9" pos:end="41:26"><name pos:start="41:9" pos:end="41:14">filter</name><operator pos:start="41:15" pos:end="41:16">-&gt;</operator><name pos:start="41:17" pos:end="41:26">priv_class</name></name></expr>)</condition> <block pos:start="41:29" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:39">

        <expr_stmt pos:start="43:9" pos:end="43:57"><expr pos:start="43:9" pos:end="43:56"><operator pos:start="43:9" pos:end="43:9">*</operator><operator pos:start="43:10" pos:end="43:10">(</operator><specifier pos:start="43:11" pos:end="43:15">const</specifier> <name pos:start="43:17" pos:end="43:23">AVClass</name><operator pos:start="43:24" pos:end="43:24">*</operator><operator pos:start="43:25" pos:end="43:25">*</operator><operator pos:start="43:26" pos:end="43:26">)</operator><name pos:start="43:27" pos:end="43:35"><name pos:start="43:27" pos:end="43:29">ret</name><operator pos:start="43:30" pos:end="43:31">-&gt;</operator><name pos:start="43:32" pos:end="43:35">priv</name></name> <operator pos:start="43:37" pos:end="43:37">=</operator> <name pos:start="43:39" pos:end="43:56"><name pos:start="43:39" pos:end="43:44">filter</name><operator pos:start="43:45" pos:end="43:46">-&gt;</operator><name pos:start="43:47" pos:end="43:56">priv_class</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:39"><expr pos:start="45:9" pos:end="45:38"><call pos:start="45:9" pos:end="45:38"><name pos:start="45:9" pos:end="45:27">av_opt_set_defaults</name><argument_list pos:start="45:28" pos:end="45:38">(<argument pos:start="45:29" pos:end="45:37"><expr pos:start="45:29" pos:end="45:37"><name pos:start="45:29" pos:end="45:37"><name pos:start="45:29" pos:end="45:31">ret</name><operator pos:start="45:32" pos:end="45:33">-&gt;</operator><name pos:start="45:34" pos:end="45:37">priv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:47"><expr pos:start="51:5" pos:end="51:46"><name pos:start="51:5" pos:end="51:18"><name pos:start="51:5" pos:end="51:7">ret</name><operator pos:start="51:8" pos:end="51:9">-&gt;</operator><name pos:start="51:10" pos:end="51:18">nb_inputs</name></name> <operator pos:start="51:20" pos:end="51:20">=</operator> <call pos:start="51:22" pos:end="51:46"><name pos:start="51:22" pos:end="51:30">pad_count</name><argument_list pos:start="51:31" pos:end="51:46">(<argument pos:start="51:32" pos:end="51:45"><expr pos:start="51:32" pos:end="51:45"><name pos:start="51:32" pos:end="51:45"><name pos:start="51:32" pos:end="51:37">filter</name><operator pos:start="51:38" pos:end="51:39">-&gt;</operator><name pos:start="51:40" pos:end="51:45">inputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="69:5"><if pos:start="53:5" pos:end="69:5">if <condition pos:start="53:8" pos:end="53:24">(<expr pos:start="53:9" pos:end="53:22"><name pos:start="53:9" pos:end="53:22"><name pos:start="53:9" pos:end="53:11">ret</name><operator pos:start="53:12" pos:end="53:13">-&gt;</operator><name pos:start="53:14" pos:end="53:22">nb_inputs</name></name></expr> )</condition> <block pos:start="53:26" pos:end="69:5">{<block_content pos:start="55:9" pos:end="67:21">

        <expr_stmt pos:start="55:9" pos:end="55:76"><expr pos:start="55:9" pos:end="55:75"><name pos:start="55:9" pos:end="55:23"><name pos:start="55:9" pos:end="55:11">ret</name><operator pos:start="55:12" pos:end="55:13">-&gt;</operator><name pos:start="55:14" pos:end="55:23">input_pads</name></name>   <operator pos:start="55:27" pos:end="55:27">=</operator> <call pos:start="55:29" pos:end="55:75"><name pos:start="55:29" pos:end="55:37">av_malloc</name><argument_list pos:start="55:38" pos:end="55:75">(<argument pos:start="55:39" pos:end="55:74"><expr pos:start="55:39" pos:end="55:74"><sizeof pos:start="55:39" pos:end="55:57">sizeof<argument_list pos:start="55:45" pos:end="55:57">(<argument pos:start="55:46" pos:end="55:56"><expr pos:start="55:46" pos:end="55:56"><name pos:start="55:46" pos:end="55:56">AVFilterPad</name></expr></argument>)</argument_list></sizeof> <operator pos:start="55:59" pos:end="55:59">*</operator> <name pos:start="55:61" pos:end="55:74"><name pos:start="55:61" pos:end="55:63">ret</name><operator pos:start="55:64" pos:end="55:65">-&gt;</operator><name pos:start="55:66" pos:end="55:74">nb_inputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="57:9" pos:end="59:21"><if pos:start="57:9" pos:end="59:21">if <condition pos:start="57:12" pos:end="57:29">(<expr pos:start="57:13" pos:end="57:28"><operator pos:start="57:13" pos:end="57:13">!</operator><name pos:start="57:14" pos:end="57:28"><name pos:start="57:14" pos:end="57:16">ret</name><operator pos:start="57:17" pos:end="57:18">-&gt;</operator><name pos:start="57:19" pos:end="57:28">input_pads</name></name></expr>)</condition><block type="pseudo" pos:start="59:13" pos:end="59:21"><block_content pos:start="59:13" pos:end="59:21">

            <goto pos:start="59:13" pos:end="59:21">goto <name pos:start="59:18" pos:end="59:20">err</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:86"><expr pos:start="61:9" pos:end="61:85"><call pos:start="61:9" pos:end="61:85"><name pos:start="61:9" pos:end="61:14">memcpy</name><argument_list pos:start="61:15" pos:end="61:85">(<argument pos:start="61:16" pos:end="61:30"><expr pos:start="61:16" pos:end="61:30"><name pos:start="61:16" pos:end="61:30"><name pos:start="61:16" pos:end="61:18">ret</name><operator pos:start="61:19" pos:end="61:20">-&gt;</operator><name pos:start="61:21" pos:end="61:30">input_pads</name></name></expr></argument>, <argument pos:start="61:33" pos:end="61:46"><expr pos:start="61:33" pos:end="61:46"><name pos:start="61:33" pos:end="61:46"><name pos:start="61:33" pos:end="61:38">filter</name><operator pos:start="61:39" pos:end="61:40">-&gt;</operator><name pos:start="61:41" pos:end="61:46">inputs</name></name></expr></argument>, <argument pos:start="61:49" pos:end="61:84"><expr pos:start="61:49" pos:end="61:84"><sizeof pos:start="61:49" pos:end="61:67">sizeof<argument_list pos:start="61:55" pos:end="61:67">(<argument pos:start="61:56" pos:end="61:66"><expr pos:start="61:56" pos:end="61:66"><name pos:start="61:56" pos:end="61:66">AVFilterPad</name></expr></argument>)</argument_list></sizeof> <operator pos:start="61:69" pos:end="61:69">*</operator> <name pos:start="61:71" pos:end="61:84"><name pos:start="61:71" pos:end="61:73">ret</name><operator pos:start="61:74" pos:end="61:75">-&gt;</operator><name pos:start="61:76" pos:end="61:84">nb_inputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:79"><expr pos:start="63:9" pos:end="63:78"><name pos:start="63:9" pos:end="63:19"><name pos:start="63:9" pos:end="63:11">ret</name><operator pos:start="63:12" pos:end="63:13">-&gt;</operator><name pos:start="63:14" pos:end="63:19">inputs</name></name>       <operator pos:start="63:27" pos:end="63:27">=</operator> <call pos:start="63:29" pos:end="63:78"><name pos:start="63:29" pos:end="63:38">av_mallocz</name><argument_list pos:start="63:39" pos:end="63:78">(<argument pos:start="63:40" pos:end="63:77"><expr pos:start="63:40" pos:end="63:77"><sizeof pos:start="63:40" pos:end="63:60">sizeof<argument_list pos:start="63:46" pos:end="63:60">(<argument pos:start="63:47" pos:end="63:59"><expr pos:start="63:47" pos:end="63:59"><name pos:start="63:47" pos:end="63:58">AVFilterLink</name><operator pos:start="63:59" pos:end="63:59">*</operator></expr></argument>)</argument_list></sizeof> <operator pos:start="63:62" pos:end="63:62">*</operator> <name pos:start="63:64" pos:end="63:77"><name pos:start="63:64" pos:end="63:66">ret</name><operator pos:start="63:67" pos:end="63:68">-&gt;</operator><name pos:start="63:69" pos:end="63:77">nb_inputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="65:9" pos:end="67:21"><if pos:start="65:9" pos:end="67:21">if <condition pos:start="65:12" pos:end="65:25">(<expr pos:start="65:13" pos:end="65:24"><operator pos:start="65:13" pos:end="65:13">!</operator><name pos:start="65:14" pos:end="65:24"><name pos:start="65:14" pos:end="65:16">ret</name><operator pos:start="65:17" pos:end="65:18">-&gt;</operator><name pos:start="65:19" pos:end="65:24">inputs</name></name></expr>)</condition><block type="pseudo" pos:start="67:13" pos:end="67:21"><block_content pos:start="67:13" pos:end="67:21">

            <goto pos:start="67:13" pos:end="67:21">goto <name pos:start="67:18" pos:end="67:20">err</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:49"><expr pos:start="73:5" pos:end="73:48"><name pos:start="73:5" pos:end="73:19"><name pos:start="73:5" pos:end="73:7">ret</name><operator pos:start="73:8" pos:end="73:9">-&gt;</operator><name pos:start="73:10" pos:end="73:19">nb_outputs</name></name> <operator pos:start="73:21" pos:end="73:21">=</operator> <call pos:start="73:23" pos:end="73:48"><name pos:start="73:23" pos:end="73:31">pad_count</name><argument_list pos:start="73:32" pos:end="73:48">(<argument pos:start="73:33" pos:end="73:47"><expr pos:start="73:33" pos:end="73:47"><name pos:start="73:33" pos:end="73:47"><name pos:start="73:33" pos:end="73:38">filter</name><operator pos:start="73:39" pos:end="73:40">-&gt;</operator><name pos:start="73:41" pos:end="73:47">outputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="75:5" pos:end="94:0"><if pos:start="75:5" pos:end="94:0">if <condition pos:start="75:8" pos:end="75:24">(<expr pos:start="75:9" pos:end="75:23"><name pos:start="75:9" pos:end="75:23"><name pos:start="75:9" pos:end="75:11">ret</name><operator pos:start="75:12" pos:end="75:13">-&gt;</operator><name pos:start="75:14" pos:end="75:23">nb_outputs</name></name></expr>)</condition> <block pos:start="75:26" pos:end="94:0">{<block_content pos:start="77:9" pos:end="89:21">

        <expr_stmt pos:start="77:9" pos:end="77:77"><expr pos:start="77:9" pos:end="77:76"><name pos:start="77:9" pos:end="77:24"><name pos:start="77:9" pos:end="77:11">ret</name><operator pos:start="77:12" pos:end="77:13">-&gt;</operator><name pos:start="77:14" pos:end="77:24">output_pads</name></name>  <operator pos:start="77:27" pos:end="77:27">=</operator> <call pos:start="77:29" pos:end="77:76"><name pos:start="77:29" pos:end="77:37">av_malloc</name><argument_list pos:start="77:38" pos:end="77:76">(<argument pos:start="77:39" pos:end="77:75"><expr pos:start="77:39" pos:end="77:75"><sizeof pos:start="77:39" pos:end="77:57">sizeof<argument_list pos:start="77:45" pos:end="77:57">(<argument pos:start="77:46" pos:end="77:56"><expr pos:start="77:46" pos:end="77:56"><name pos:start="77:46" pos:end="77:56">AVFilterPad</name></expr></argument>)</argument_list></sizeof> <operator pos:start="77:59" pos:end="77:59">*</operator> <name pos:start="77:61" pos:end="77:75"><name pos:start="77:61" pos:end="77:63">ret</name><operator pos:start="77:64" pos:end="77:65">-&gt;</operator><name pos:start="77:66" pos:end="77:75">nb_outputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="79:9" pos:end="81:21"><if pos:start="79:9" pos:end="81:21">if <condition pos:start="79:12" pos:end="79:30">(<expr pos:start="79:13" pos:end="79:29"><operator pos:start="79:13" pos:end="79:13">!</operator><name pos:start="79:14" pos:end="79:29"><name pos:start="79:14" pos:end="79:16">ret</name><operator pos:start="79:17" pos:end="79:18">-&gt;</operator><name pos:start="79:19" pos:end="79:29">output_pads</name></name></expr>)</condition><block type="pseudo" pos:start="81:13" pos:end="81:21"><block_content pos:start="81:13" pos:end="81:21">

            <goto pos:start="81:13" pos:end="81:21">goto <name pos:start="81:18" pos:end="81:20">err</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:89"><expr pos:start="83:9" pos:end="83:88"><call pos:start="83:9" pos:end="83:88"><name pos:start="83:9" pos:end="83:14">memcpy</name><argument_list pos:start="83:15" pos:end="83:88">(<argument pos:start="83:16" pos:end="83:31"><expr pos:start="83:16" pos:end="83:31"><name pos:start="83:16" pos:end="83:31"><name pos:start="83:16" pos:end="83:18">ret</name><operator pos:start="83:19" pos:end="83:20">-&gt;</operator><name pos:start="83:21" pos:end="83:31">output_pads</name></name></expr></argument>, <argument pos:start="83:34" pos:end="83:48"><expr pos:start="83:34" pos:end="83:48"><name pos:start="83:34" pos:end="83:48"><name pos:start="83:34" pos:end="83:39">filter</name><operator pos:start="83:40" pos:end="83:41">-&gt;</operator><name pos:start="83:42" pos:end="83:48">outputs</name></name></expr></argument>, <argument pos:start="83:51" pos:end="83:87"><expr pos:start="83:51" pos:end="83:87"><sizeof pos:start="83:51" pos:end="83:69">sizeof<argument_list pos:start="83:57" pos:end="83:69">(<argument pos:start="83:58" pos:end="83:68"><expr pos:start="83:58" pos:end="83:68"><name pos:start="83:58" pos:end="83:68">AVFilterPad</name></expr></argument>)</argument_list></sizeof> <operator pos:start="83:71" pos:end="83:71">*</operator> <name pos:start="83:73" pos:end="83:87"><name pos:start="83:73" pos:end="83:75">ret</name><operator pos:start="83:76" pos:end="83:77">-&gt;</operator><name pos:start="83:78" pos:end="83:87">nb_outputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:80"><expr pos:start="85:9" pos:end="85:79"><name pos:start="85:9" pos:end="85:20"><name pos:start="85:9" pos:end="85:11">ret</name><operator pos:start="85:12" pos:end="85:13">-&gt;</operator><name pos:start="85:14" pos:end="85:20">outputs</name></name>      <operator pos:start="85:27" pos:end="85:27">=</operator> <call pos:start="85:29" pos:end="85:79"><name pos:start="85:29" pos:end="85:38">av_mallocz</name><argument_list pos:start="85:39" pos:end="85:79">(<argument pos:start="85:40" pos:end="85:78"><expr pos:start="85:40" pos:end="85:78"><sizeof pos:start="85:40" pos:end="85:60">sizeof<argument_list pos:start="85:46" pos:end="85:60">(<argument pos:start="85:47" pos:end="85:59"><expr pos:start="85:47" pos:end="85:59"><name pos:start="85:47" pos:end="85:58">AVFilterLink</name><operator pos:start="85:59" pos:end="85:59">*</operator></expr></argument>)</argument_list></sizeof> <operator pos:start="85:62" pos:end="85:62">*</operator> <name pos:start="85:64" pos:end="85:78"><name pos:start="85:64" pos:end="85:66">ret</name><operator pos:start="85:67" pos:end="85:68">-&gt;</operator><name pos:start="85:69" pos:end="85:78">nb_outputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="87:9" pos:end="89:21"><if pos:start="87:9" pos:end="89:21">if <condition pos:start="87:12" pos:end="87:26">(<expr pos:start="87:13" pos:end="87:25"><operator pos:start="87:13" pos:end="87:13">!</operator><name pos:start="87:14" pos:end="87:25"><name pos:start="87:14" pos:end="87:16">ret</name><operator pos:start="87:17" pos:end="87:18">-&gt;</operator><name pos:start="87:19" pos:end="87:25">outputs</name></name></expr>)</condition><block type="pseudo" pos:start="89:13" pos:end="89:21"><block_content pos:start="89:13" pos:end="89:21">

            <goto pos:start="89:13" pos:end="89:21">goto <name pos:start="89:18" pos:end="89:20">err</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:if pos:start="93:1" pos:end="93:20">#<cpp:directive pos:start="93:2" pos:end="93:3">if</cpp:directive> <expr pos:start="93:5" pos:end="93:20"><name pos:start="93:5" pos:end="93:20">FF_API_FOO_COUNT</name></expr></cpp:if>

    <expr_stmt pos:start="95:5" pos:end="95:40"><expr pos:start="95:5" pos:end="95:39"><name pos:start="95:5" pos:end="95:21"><name pos:start="95:5" pos:end="95:7">ret</name><operator pos:start="95:8" pos:end="95:9">-&gt;</operator><name pos:start="95:10" pos:end="95:21">output_count</name></name> <operator pos:start="95:23" pos:end="95:23">=</operator> <name pos:start="95:25" pos:end="95:39"><name pos:start="95:25" pos:end="95:27">ret</name><operator pos:start="95:28" pos:end="95:29">-&gt;</operator><name pos:start="95:30" pos:end="95:39">nb_outputs</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="100:0"><expr pos:start="97:5" pos:end="97:38"><name pos:start="97:5" pos:end="97:20"><name pos:start="97:5" pos:end="97:7">ret</name><operator pos:start="97:8" pos:end="97:9">-&gt;</operator><name pos:start="97:10" pos:end="97:20">input_count</name></name>  <operator pos:start="97:23" pos:end="97:23">=</operator> <name pos:start="97:25" pos:end="97:38"><name pos:start="97:25" pos:end="97:27">ret</name><operator pos:start="97:28" pos:end="97:29">-&gt;</operator><name pos:start="97:30" pos:end="97:38">nb_inputs</name></name></expr>;</expr_stmt>

<cpp:endif pos:start="99:1" pos:end="99:6">#<cpp:directive pos:start="99:2" pos:end="99:6">endif</cpp:directive></cpp:endif>



    <return pos:start="103:5" pos:end="103:15">return <expr pos:start="103:12" pos:end="103:14"><name pos:start="103:12" pos:end="103:14">ret</name></expr>;</return>



<label pos:start="107:1" pos:end="107:4"><name pos:start="107:1" pos:end="107:3">err</name>:</label>

    <expr_stmt pos:start="109:5" pos:end="109:27"><expr pos:start="109:5" pos:end="109:26"><call pos:start="109:5" pos:end="109:26"><name pos:start="109:5" pos:end="109:12">av_freep</name><argument_list pos:start="109:13" pos:end="109:26">(<argument pos:start="109:14" pos:end="109:25"><expr pos:start="109:14" pos:end="109:25"><operator pos:start="109:14" pos:end="109:14">&amp;</operator><name pos:start="109:15" pos:end="109:25"><name pos:start="109:15" pos:end="109:17">ret</name><operator pos:start="109:18" pos:end="109:19">-&gt;</operator><name pos:start="109:20" pos:end="109:25">inputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:31"><expr pos:start="111:5" pos:end="111:30"><call pos:start="111:5" pos:end="111:30"><name pos:start="111:5" pos:end="111:12">av_freep</name><argument_list pos:start="111:13" pos:end="111:30">(<argument pos:start="111:14" pos:end="111:29"><expr pos:start="111:14" pos:end="111:29"><operator pos:start="111:14" pos:end="111:14">&amp;</operator><name pos:start="111:15" pos:end="111:29"><name pos:start="111:15" pos:end="111:17">ret</name><operator pos:start="111:18" pos:end="111:19">-&gt;</operator><name pos:start="111:20" pos:end="111:29">input_pads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:23"><expr pos:start="113:5" pos:end="113:22"><name pos:start="113:5" pos:end="113:18"><name pos:start="113:5" pos:end="113:7">ret</name><operator pos:start="113:8" pos:end="113:9">-&gt;</operator><name pos:start="113:10" pos:end="113:18">nb_inputs</name></name> <operator pos:start="113:20" pos:end="113:20">=</operator> <literal type="number" pos:start="113:22" pos:end="113:22">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:28"><expr pos:start="115:5" pos:end="115:27"><call pos:start="115:5" pos:end="115:27"><name pos:start="115:5" pos:end="115:12">av_freep</name><argument_list pos:start="115:13" pos:end="115:27">(<argument pos:start="115:14" pos:end="115:26"><expr pos:start="115:14" pos:end="115:26"><operator pos:start="115:14" pos:end="115:14">&amp;</operator><name pos:start="115:15" pos:end="115:26"><name pos:start="115:15" pos:end="115:17">ret</name><operator pos:start="115:18" pos:end="115:19">-&gt;</operator><name pos:start="115:20" pos:end="115:26">outputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:32"><expr pos:start="117:5" pos:end="117:31"><call pos:start="117:5" pos:end="117:31"><name pos:start="117:5" pos:end="117:12">av_freep</name><argument_list pos:start="117:13" pos:end="117:31">(<argument pos:start="117:14" pos:end="117:30"><expr pos:start="117:14" pos:end="117:30"><operator pos:start="117:14" pos:end="117:14">&amp;</operator><name pos:start="117:15" pos:end="117:30"><name pos:start="117:15" pos:end="117:17">ret</name><operator pos:start="117:18" pos:end="117:19">-&gt;</operator><name pos:start="117:20" pos:end="117:30">output_pads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:24"><expr pos:start="119:5" pos:end="119:23"><name pos:start="119:5" pos:end="119:19"><name pos:start="119:5" pos:end="119:7">ret</name><operator pos:start="119:8" pos:end="119:9">-&gt;</operator><name pos:start="119:10" pos:end="119:19">nb_outputs</name></name> <operator pos:start="119:21" pos:end="119:21">=</operator> <literal type="number" pos:start="119:23" pos:end="119:23">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:25"><expr pos:start="121:5" pos:end="121:24"><call pos:start="121:5" pos:end="121:24"><name pos:start="121:5" pos:end="121:12">av_freep</name><argument_list pos:start="121:13" pos:end="121:24">(<argument pos:start="121:14" pos:end="121:23"><expr pos:start="121:14" pos:end="121:23"><operator pos:start="121:14" pos:end="121:14">&amp;</operator><name pos:start="121:15" pos:end="121:23"><name pos:start="121:15" pos:end="121:17">ret</name><operator pos:start="121:18" pos:end="121:19">-&gt;</operator><name pos:start="121:20" pos:end="121:23">priv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:17"><expr pos:start="123:5" pos:end="123:16"><call pos:start="123:5" pos:end="123:16"><name pos:start="123:5" pos:end="123:11">av_free</name><argument_list pos:start="123:12" pos:end="123:16">(<argument pos:start="123:13" pos:end="123:15"><expr pos:start="123:13" pos:end="123:15"><name pos:start="123:13" pos:end="123:15">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="125:5" pos:end="125:16">return <expr pos:start="125:12" pos:end="125:15"><name pos:start="125:12" pos:end="125:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
