<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26700.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">open_self_maps</name><parameter_list pos:start="1:26" pos:end="1:48">(<parameter pos:start="1:27" pos:end="1:39"><decl pos:start="1:27" pos:end="1:39"><type pos:start="1:27" pos:end="1:39"><name pos:start="1:27" pos:end="1:30">void</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:39">cpu_env</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:47"><decl pos:start="1:42" pos:end="1:47"><type pos:start="1:42" pos:end="1:47"><name pos:start="1:42" pos:end="1:44">int</name></type> <name pos:start="1:46" pos:end="1:47">fd</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="105:1">{<block_content pos:start="7:5" pos:end="103:13">

<cpp:if pos:start="5:1" pos:end="5:76">#<cpp:directive pos:start="5:2" pos:end="5:3">if</cpp:directive> <expr pos:start="5:5" pos:end="5:76"><call pos:start="5:5" pos:end="5:23"><name pos:start="5:5" pos:end="5:11">defined</name><argument_list pos:start="5:12" pos:end="5:23">(<argument pos:start="5:13" pos:end="5:22"><expr pos:start="5:13" pos:end="5:22"><name pos:start="5:13" pos:end="5:22">TARGET_ARM</name></expr></argument>)</argument_list></call> <operator pos:start="5:25" pos:end="5:26">||</operator> <call pos:start="5:28" pos:end="5:47"><name pos:start="5:28" pos:end="5:34">defined</name><argument_list pos:start="5:35" pos:end="5:47">(<argument pos:start="5:36" pos:end="5:46"><expr pos:start="5:36" pos:end="5:46"><name pos:start="5:36" pos:end="5:46">TARGET_M68K</name></expr></argument>)</argument_list></call> <operator pos:start="5:49" pos:end="5:50">||</operator> <call pos:start="5:52" pos:end="5:76"><name pos:start="5:52" pos:end="5:58">defined</name><argument_list pos:start="5:59" pos:end="5:76">(<argument pos:start="5:60" pos:end="5:75"><expr pos:start="5:60" pos:end="5:75"><name pos:start="5:60" pos:end="5:75">TARGET_UNICORE32</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <decl_stmt pos:start="7:5" pos:end="7:57"><decl pos:start="7:5" pos:end="7:56"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">CPUState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:17">cpu</name> <init pos:start="7:19" pos:end="7:56">= <expr pos:start="7:21" pos:end="7:56"><call pos:start="7:21" pos:end="7:56"><name pos:start="7:21" pos:end="7:31">ENV_GET_CPU</name><argument_list pos:start="7:32" pos:end="7:56">(<argument pos:start="7:33" pos:end="7:55"><expr pos:start="7:33" pos:end="7:55"><operator pos:start="7:33" pos:end="7:33">(</operator><name pos:start="7:34" pos:end="7:45">CPUArchState</name> <operator pos:start="7:47" pos:end="7:47">*</operator><operator pos:start="7:48" pos:end="7:48">)</operator><name pos:start="7:49" pos:end="7:55">cpu_env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="12:0"><decl pos:start="9:5" pos:end="9:31"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:13">TaskState</name> <modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:17">ts</name> <init pos:start="9:19" pos:end="9:31">= <expr pos:start="9:21" pos:end="9:31"><name pos:start="9:21" pos:end="9:31"><name pos:start="9:21" pos:end="9:23">cpu</name><operator pos:start="9:24" pos:end="9:25">-&gt;</operator><name pos:start="9:26" pos:end="9:31">opaque</name></name></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="11:1" pos:end="11:6">#<cpp:directive pos:start="11:2" pos:end="11:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="13:5" pos:end="13:13"><decl pos:start="13:5" pos:end="13:12"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">FILE</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:12">fp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:14">line</name> <init pos:start="15:16" pos:end="15:21">= <expr pos:start="15:18" pos:end="15:21"><name pos:start="15:18" pos:end="15:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:10">size_t</name></type> <name pos:start="17:12" pos:end="17:14">len</name> <init pos:start="17:16" pos:end="17:18">= <expr pos:start="17:18" pos:end="17:18"><literal type="number" pos:start="17:18" pos:end="17:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:17"><decl pos:start="19:5" pos:end="19:16"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">ssize_t</name></type> <name pos:start="19:13" pos:end="19:16">read</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:39"><expr pos:start="23:5" pos:end="23:38"><name pos:start="23:5" pos:end="23:6">fp</name> <operator pos:start="23:8" pos:end="23:8">=</operator> <call pos:start="23:10" pos:end="23:38"><name pos:start="23:10" pos:end="23:14">fopen</name><argument_list pos:start="23:15" pos:end="23:38">(<argument pos:start="23:16" pos:end="23:32"><expr pos:start="23:16" pos:end="23:32"><literal type="string" pos:start="23:16" pos:end="23:32">"/proc/self/maps"</literal></expr></argument>, <argument pos:start="23:35" pos:end="23:37"><expr pos:start="23:35" pos:end="23:37"><literal type="string" pos:start="23:35" pos:end="23:37">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:19">(<expr pos:start="25:9" pos:end="25:18"><name pos:start="25:9" pos:end="25:10">fp</name> <operator pos:start="25:12" pos:end="25:13">==</operator> <name pos:start="25:15" pos:end="25:18">NULL</name></expr>)</condition> <block pos:start="25:21" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:23">

        <return pos:start="27:9" pos:end="27:23">return <expr pos:start="27:16" pos:end="27:22"><operator pos:start="27:16" pos:end="27:16">-</operator><name pos:start="27:17" pos:end="27:22">EACCES</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <while pos:start="33:5" pos:end="77:5">while <condition pos:start="33:11" pos:end="33:51">(<expr pos:start="33:12" pos:end="33:50"><operator pos:start="33:12" pos:end="33:12">(</operator><name pos:start="33:13" pos:end="33:16">read</name> <operator pos:start="33:18" pos:end="33:18">=</operator> <call pos:start="33:20" pos:end="33:43"><name pos:start="33:20" pos:end="33:26">getline</name><argument_list pos:start="33:27" pos:end="33:43">(<argument pos:start="33:28" pos:end="33:32"><expr pos:start="33:28" pos:end="33:32"><operator pos:start="33:28" pos:end="33:28">&amp;</operator><name pos:start="33:29" pos:end="33:32">line</name></expr></argument>, <argument pos:start="33:35" pos:end="33:38"><expr pos:start="33:35" pos:end="33:38"><operator pos:start="33:35" pos:end="33:35">&amp;</operator><name pos:start="33:36" pos:end="33:38">len</name></expr></argument>, <argument pos:start="33:41" pos:end="33:42"><expr pos:start="33:41" pos:end="33:42"><name pos:start="33:41" pos:end="33:42">fp</name></expr></argument>)</argument_list></call><operator pos:start="33:44" pos:end="33:44">)</operator> <operator pos:start="33:46" pos:end="33:47">!=</operator> <operator pos:start="33:49" pos:end="33:49">-</operator><literal type="number" pos:start="33:50" pos:end="33:50">1</literal></expr>)</condition> <block pos:start="33:53" pos:end="77:5">{<block_content pos:start="35:9" pos:end="75:9">

        <decl_stmt pos:start="35:9" pos:end="35:44"><decl pos:start="35:9" pos:end="35:18"><type pos:start="35:9" pos:end="35:11"><name pos:start="35:9" pos:end="35:11">int</name></type> <name pos:start="35:13" pos:end="35:18">fields</name></decl>, <decl pos:start="35:21" pos:end="35:27"><type ref="prev" pos:start="35:9" pos:end="35:11"/><name pos:start="35:21" pos:end="35:27">dev_maj</name></decl>, <decl pos:start="35:30" pos:end="35:36"><type ref="prev" pos:start="35:9" pos:end="35:11"/><name pos:start="35:30" pos:end="35:36">dev_min</name></decl>, <decl pos:start="35:39" pos:end="35:43"><type ref="prev" pos:start="35:9" pos:end="35:11"/><name pos:start="35:39" pos:end="35:43">inode</name></decl>;</decl_stmt>

        <decl_stmt pos:start="37:9" pos:end="37:34"><decl pos:start="37:9" pos:end="37:20"><type pos:start="37:9" pos:end="37:16"><name pos:start="37:9" pos:end="37:16">uint64_t</name></type> <name pos:start="37:18" pos:end="37:20">min</name></decl>, <decl pos:start="37:23" pos:end="37:25"><type ref="prev" pos:start="37:9" pos:end="37:16"/><name pos:start="37:23" pos:end="37:25">max</name></decl>, <decl pos:start="37:28" pos:end="37:33"><type ref="prev" pos:start="37:9" pos:end="37:16"/><name pos:start="37:28" pos:end="37:33">offset</name></decl>;</decl_stmt>

        <decl_stmt pos:start="39:9" pos:end="39:44"><decl pos:start="39:9" pos:end="39:19"><type pos:start="39:9" pos:end="39:12"><name pos:start="39:9" pos:end="39:12">char</name></type> <name pos:start="39:14" pos:end="39:19">flag_r</name></decl>, <decl pos:start="39:22" pos:end="39:27"><type ref="prev" pos:start="39:9" pos:end="39:12"/><name pos:start="39:22" pos:end="39:27">flag_w</name></decl>, <decl pos:start="39:30" pos:end="39:35"><type ref="prev" pos:start="39:9" pos:end="39:12"/><name pos:start="39:30" pos:end="39:35">flag_x</name></decl>, <decl pos:start="39:38" pos:end="39:43"><type ref="prev" pos:start="39:9" pos:end="39:12"/><name pos:start="39:38" pos:end="39:43">flag_p</name></decl>;</decl_stmt>

        <decl_stmt pos:start="41:9" pos:end="41:28"><decl pos:start="41:9" pos:end="41:27"><type pos:start="41:9" pos:end="41:12"><name pos:start="41:9" pos:end="41:12">char</name></type> <name pos:start="41:14" pos:end="41:22"><name pos:start="41:14" pos:end="41:17">path</name><index pos:start="41:18" pos:end="41:22">[<expr pos:start="41:19" pos:end="41:21"><literal type="number" pos:start="41:19" pos:end="41:21">512</literal></expr>]</index></name> <init pos:start="41:24" pos:end="41:27">= <expr pos:start="41:26" pos:end="41:27"><literal type="string" pos:start="41:26" pos:end="41:27">""</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="43:9" pos:end="47:76"><expr pos:start="43:9" pos:end="47:75"><name pos:start="43:9" pos:end="43:14">fields</name> <operator pos:start="43:16" pos:end="43:16">=</operator> <call pos:start="43:18" pos:end="47:75"><name pos:start="43:18" pos:end="43:23">sscanf</name><argument_list pos:start="43:24" pos:end="47:75">(<argument pos:start="43:25" pos:end="43:28"><expr pos:start="43:25" pos:end="43:28"><name pos:start="43:25" pos:end="43:28">line</name></expr></argument>, <argument pos:start="43:31" pos:end="45:32"><expr pos:start="43:31" pos:end="45:32"><literal type="string" pos:start="43:31" pos:end="43:33">"%"</literal><name pos:start="43:34" pos:end="43:39">PRIx64</name><literal type="string" pos:start="43:40" pos:end="43:43">"-%"</literal><name pos:start="43:44" pos:end="43:49">PRIx64</name><literal type="string" pos:start="43:50" pos:end="43:62">" %c%c%c%c %"</literal><name pos:start="43:63" pos:end="43:68">PRIx64</name><literal type="string" pos:start="43:69" pos:end="43:79">" %x:%x %d"</literal>

                        <literal type="string" pos:start="45:25" pos:end="45:32">" %512s"</literal></expr></argument>, <argument pos:start="45:35" pos:end="45:38"><expr pos:start="45:35" pos:end="45:38"><operator pos:start="45:35" pos:end="45:35">&amp;</operator><name pos:start="45:36" pos:end="45:38">min</name></expr></argument>, <argument pos:start="45:41" pos:end="45:44"><expr pos:start="45:41" pos:end="45:44"><operator pos:start="45:41" pos:end="45:41">&amp;</operator><name pos:start="45:42" pos:end="45:44">max</name></expr></argument>, <argument pos:start="45:47" pos:end="45:53"><expr pos:start="45:47" pos:end="45:53"><operator pos:start="45:47" pos:end="45:47">&amp;</operator><name pos:start="45:48" pos:end="45:53">flag_r</name></expr></argument>, <argument pos:start="45:56" pos:end="45:62"><expr pos:start="45:56" pos:end="45:62"><operator pos:start="45:56" pos:end="45:56">&amp;</operator><name pos:start="45:57" pos:end="45:62">flag_w</name></expr></argument>, <argument pos:start="45:65" pos:end="45:71"><expr pos:start="45:65" pos:end="45:71"><operator pos:start="45:65" pos:end="45:65">&amp;</operator><name pos:start="45:66" pos:end="45:71">flag_x</name></expr></argument>,

                        <argument pos:start="47:25" pos:end="47:31"><expr pos:start="47:25" pos:end="47:31"><operator pos:start="47:25" pos:end="47:25">&amp;</operator><name pos:start="47:26" pos:end="47:31">flag_p</name></expr></argument>, <argument pos:start="47:34" pos:end="47:40"><expr pos:start="47:34" pos:end="47:40"><operator pos:start="47:34" pos:end="47:34">&amp;</operator><name pos:start="47:35" pos:end="47:40">offset</name></expr></argument>, <argument pos:start="47:43" pos:end="47:50"><expr pos:start="47:43" pos:end="47:50"><operator pos:start="47:43" pos:end="47:43">&amp;</operator><name pos:start="47:44" pos:end="47:50">dev_maj</name></expr></argument>, <argument pos:start="47:53" pos:end="47:60"><expr pos:start="47:53" pos:end="47:60"><operator pos:start="47:53" pos:end="47:53">&amp;</operator><name pos:start="47:54" pos:end="47:60">dev_min</name></expr></argument>, <argument pos:start="47:63" pos:end="47:68"><expr pos:start="47:63" pos:end="47:68"><operator pos:start="47:63" pos:end="47:63">&amp;</operator><name pos:start="47:64" pos:end="47:68">inode</name></expr></argument>, <argument pos:start="47:71" pos:end="47:74"><expr pos:start="47:71" pos:end="47:74"><name pos:start="47:71" pos:end="47:74">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="51:9" pos:end="55:9"><if pos:start="51:9" pos:end="55:9">if <condition pos:start="51:12" pos:end="51:43">(<expr pos:start="51:13" pos:end="51:42"><operator pos:start="51:13" pos:end="51:13">(</operator><name pos:start="51:14" pos:end="51:19">fields</name> <operator pos:start="51:21" pos:end="51:21">&lt;</operator> <literal type="number" pos:start="51:23" pos:end="51:24">10</literal><operator pos:start="51:25" pos:end="51:25">)</operator> <operator pos:start="51:27" pos:end="51:28">||</operator> <operator pos:start="51:30" pos:end="51:30">(</operator><name pos:start="51:31" pos:end="51:36">fields</name> <operator pos:start="51:38" pos:end="51:38">&gt;</operator> <literal type="number" pos:start="51:40" pos:end="51:41">11</literal><operator pos:start="51:42" pos:end="51:42">)</operator></expr>)</condition> <block pos:start="51:45" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:21">

            <continue pos:start="53:13" pos:end="53:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="57:9" pos:end="61:9"><if pos:start="57:9" pos:end="61:9">if <condition pos:start="57:12" pos:end="57:41">(<expr pos:start="57:13" pos:end="57:40"><operator pos:start="57:13" pos:end="57:13">!</operator><call pos:start="57:14" pos:end="57:40"><name pos:start="57:14" pos:end="57:20">strncmp</name><argument_list pos:start="57:21" pos:end="57:40">(<argument pos:start="57:22" pos:end="57:25"><expr pos:start="57:22" pos:end="57:25"><name pos:start="57:22" pos:end="57:25">path</name></expr></argument>, <argument pos:start="57:28" pos:end="57:36"><expr pos:start="57:28" pos:end="57:36"><literal type="string" pos:start="57:28" pos:end="57:36">"[stack]"</literal></expr></argument>, <argument pos:start="57:39" pos:end="57:39"><expr pos:start="57:39" pos:end="57:39"><literal type="number" pos:start="57:39" pos:end="57:39">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="57:43" pos:end="61:9">{<block_content pos:start="59:13" pos:end="59:21">

            <continue pos:start="59:13" pos:end="59:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="63:9" pos:end="75:9"><if pos:start="63:9" pos:end="75:9">if <condition pos:start="63:12" pos:end="63:45">(<expr pos:start="63:13" pos:end="63:44"><call pos:start="63:13" pos:end="63:26"><name pos:start="63:13" pos:end="63:21">h2g_valid</name><argument_list pos:start="63:22" pos:end="63:26">(<argument pos:start="63:23" pos:end="63:25"><expr pos:start="63:23" pos:end="63:25"><name pos:start="63:23" pos:end="63:25">min</name></expr></argument>)</argument_list></call> <operator pos:start="63:28" pos:end="63:29">&amp;&amp;</operator> <call pos:start="63:31" pos:end="63:44"><name pos:start="63:31" pos:end="63:39">h2g_valid</name><argument_list pos:start="63:40" pos:end="63:44">(<argument pos:start="63:41" pos:end="63:43"><expr pos:start="63:41" pos:end="63:43"><name pos:start="63:41" pos:end="63:43">max</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="63:47" pos:end="75:9">{<block_content pos:start="65:13" pos:end="73:54">

            <expr_stmt pos:start="65:13" pos:end="73:54"><expr pos:start="65:13" pos:end="73:53"><call pos:start="65:13" pos:end="73:53"><name pos:start="65:13" pos:end="65:19">dprintf</name><argument_list pos:start="65:20" pos:end="73:53">(<argument pos:start="65:21" pos:end="65:22"><expr pos:start="65:21" pos:end="65:22"><name pos:start="65:21" pos:end="65:22">fd</name></expr></argument>, <argument pos:start="65:25" pos:end="67:65"><expr pos:start="65:25" pos:end="67:65"><name pos:start="65:25" pos:end="65:41">TARGET_ABI_FMT_lx</name> <literal type="string" pos:start="65:43" pos:end="65:45">"-"</literal> <name pos:start="65:47" pos:end="65:63">TARGET_ABI_FMT_lx</name>

                    <literal type="string" pos:start="67:21" pos:end="67:35">" %c%c%c%c %08"</literal> <name pos:start="67:37" pos:end="67:42">PRIx64</name> <literal type="string" pos:start="67:44" pos:end="67:65">" %02x:%02x %d %s%s\n"</literal></expr></argument>,

                    <argument pos:start="69:21" pos:end="69:28"><expr pos:start="69:21" pos:end="69:28"><call pos:start="69:21" pos:end="69:28"><name pos:start="69:21" pos:end="69:23">h2g</name><argument_list pos:start="69:24" pos:end="69:28">(<argument pos:start="69:25" pos:end="69:27"><expr pos:start="69:25" pos:end="69:27"><name pos:start="69:25" pos:end="69:27">min</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="69:31" pos:end="69:38"><expr pos:start="69:31" pos:end="69:38"><call pos:start="69:31" pos:end="69:38"><name pos:start="69:31" pos:end="69:33">h2g</name><argument_list pos:start="69:34" pos:end="69:38">(<argument pos:start="69:35" pos:end="69:37"><expr pos:start="69:35" pos:end="69:37"><name pos:start="69:35" pos:end="69:37">max</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="69:41" pos:end="69:46"><expr pos:start="69:41" pos:end="69:46"><name pos:start="69:41" pos:end="69:46">flag_r</name></expr></argument>, <argument pos:start="69:49" pos:end="69:54"><expr pos:start="69:49" pos:end="69:54"><name pos:start="69:49" pos:end="69:54">flag_w</name></expr></argument>,

                    <argument pos:start="71:21" pos:end="71:26"><expr pos:start="71:21" pos:end="71:26"><name pos:start="71:21" pos:end="71:26">flag_x</name></expr></argument>, <argument pos:start="71:29" pos:end="71:34"><expr pos:start="71:29" pos:end="71:34"><name pos:start="71:29" pos:end="71:34">flag_p</name></expr></argument>, <argument pos:start="71:37" pos:end="71:42"><expr pos:start="71:37" pos:end="71:42"><name pos:start="71:37" pos:end="71:42">offset</name></expr></argument>, <argument pos:start="71:45" pos:end="71:51"><expr pos:start="71:45" pos:end="71:51"><name pos:start="71:45" pos:end="71:51">dev_maj</name></expr></argument>, <argument pos:start="71:54" pos:end="71:60"><expr pos:start="71:54" pos:end="71:60"><name pos:start="71:54" pos:end="71:60">dev_min</name></expr></argument>, <argument pos:start="71:63" pos:end="71:67"><expr pos:start="71:63" pos:end="71:67"><name pos:start="71:63" pos:end="71:67">inode</name></expr></argument>,

                    <argument pos:start="73:21" pos:end="73:46"><expr pos:start="73:21" pos:end="73:46"><ternary pos:start="73:21" pos:end="73:46"><condition pos:start="73:21" pos:end="73:29"><expr pos:start="73:21" pos:end="73:27"><name pos:start="73:21" pos:end="73:27"><name pos:start="73:21" pos:end="73:24">path</name><index pos:start="73:25" pos:end="73:27">[<expr pos:start="73:26" pos:end="73:26"><literal type="number" pos:start="73:26" pos:end="73:26">0</literal></expr>]</index></name></expr> ?</condition><then pos:start="73:31" pos:end="73:41"> <expr pos:start="73:31" pos:end="73:41"><literal type="string" pos:start="73:31" pos:end="73:41">"         "</literal></expr> </then><else pos:start="73:43" pos:end="73:46">: <expr pos:start="73:45" pos:end="73:46"><literal type="string" pos:start="73:45" pos:end="73:46">""</literal></expr></else></ternary></expr></argument>, <argument pos:start="73:49" pos:end="73:52"><expr pos:start="73:49" pos:end="73:52"><name pos:start="73:49" pos:end="73:52">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="81:5" pos:end="81:15"><expr pos:start="81:5" pos:end="81:14"><call pos:start="81:5" pos:end="81:14"><name pos:start="81:5" pos:end="81:8">free</name><argument_list pos:start="81:9" pos:end="81:14">(<argument pos:start="81:10" pos:end="81:13"><expr pos:start="81:10" pos:end="81:13"><name pos:start="81:10" pos:end="81:13">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="88:0"><expr pos:start="83:5" pos:end="83:14"><call pos:start="83:5" pos:end="83:14"><name pos:start="83:5" pos:end="83:10">fclose</name><argument_list pos:start="83:11" pos:end="83:14">(<argument pos:start="83:12" pos:end="83:13"><expr pos:start="83:12" pos:end="83:13"><name pos:start="83:12" pos:end="83:13">fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:if pos:start="87:1" pos:end="87:76">#<cpp:directive pos:start="87:2" pos:end="87:3">if</cpp:directive> <expr pos:start="87:5" pos:end="87:76"><call pos:start="87:5" pos:end="87:23"><name pos:start="87:5" pos:end="87:11">defined</name><argument_list pos:start="87:12" pos:end="87:23">(<argument pos:start="87:13" pos:end="87:22"><expr pos:start="87:13" pos:end="87:22"><name pos:start="87:13" pos:end="87:22">TARGET_ARM</name></expr></argument>)</argument_list></call> <operator pos:start="87:25" pos:end="87:26">||</operator> <call pos:start="87:28" pos:end="87:47"><name pos:start="87:28" pos:end="87:34">defined</name><argument_list pos:start="87:35" pos:end="87:47">(<argument pos:start="87:36" pos:end="87:46"><expr pos:start="87:36" pos:end="87:46"><name pos:start="87:36" pos:end="87:46">TARGET_M68K</name></expr></argument>)</argument_list></call> <operator pos:start="87:49" pos:end="87:50">||</operator> <call pos:start="87:52" pos:end="87:76"><name pos:start="87:52" pos:end="87:58">defined</name><argument_list pos:start="87:59" pos:end="87:76">(<argument pos:start="87:60" pos:end="87:75"><expr pos:start="87:60" pos:end="87:75"><name pos:start="87:60" pos:end="87:75">TARGET_UNICORE32</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="89:5" pos:end="100:0"><expr pos:start="89:5" pos:end="97:38"><call pos:start="89:5" pos:end="97:38"><name pos:start="89:5" pos:end="89:11">dprintf</name><argument_list pos:start="89:12" pos:end="97:38">(<argument pos:start="89:13" pos:end="89:14"><expr pos:start="89:13" pos:end="89:14"><name pos:start="89:13" pos:end="89:14">fd</name></expr></argument>, <argument pos:start="89:17" pos:end="89:70"><expr pos:start="89:17" pos:end="89:70"><literal type="string" pos:start="89:17" pos:end="89:70">"%08llx-%08llx rw-p %08llx 00:00 0          [stack]\n"</literal></expr></argument>,

                <argument pos:start="91:17" pos:end="91:57"><expr pos:start="91:17" pos:end="91:57"><operator pos:start="91:17" pos:end="91:17">(</operator><name pos:start="91:18" pos:end="91:25">unsigned</name> <name pos:start="91:27" pos:end="91:30">long</name> <name pos:start="91:32" pos:end="91:35">long</name><operator pos:start="91:36" pos:end="91:36">)</operator><name pos:start="91:37" pos:end="91:57"><name pos:start="91:37" pos:end="91:38">ts</name><operator pos:start="91:39" pos:end="91:40">-&gt;</operator><name pos:start="91:41" pos:end="91:44">info</name><operator pos:start="91:45" pos:end="91:46">-&gt;</operator><name pos:start="91:47" pos:end="91:57">stack_limit</name></name></expr></argument>,

                <argument pos:start="93:17" pos:end="95:79"><expr pos:start="93:17" pos:end="95:79"><operator pos:start="93:17" pos:end="93:17">(</operator><name pos:start="93:18" pos:end="93:25">unsigned</name> <name pos:start="93:27" pos:end="93:30">long</name> <name pos:start="93:32" pos:end="93:35">long</name><operator pos:start="93:36" pos:end="93:36">)</operator><operator pos:start="93:37" pos:end="93:37">(</operator><name pos:start="93:38" pos:end="93:58"><name pos:start="93:38" pos:end="93:39">ts</name><operator pos:start="93:40" pos:end="93:41">-&gt;</operator><name pos:start="93:42" pos:end="93:45">info</name><operator pos:start="93:46" pos:end="93:47">-&gt;</operator><name pos:start="93:48" pos:end="93:58">start_stack</name></name> <operator pos:start="93:60" pos:end="93:60">+</operator>

                                     <operator pos:start="95:38" pos:end="95:38">(</operator><name pos:start="95:39" pos:end="95:54">TARGET_PAGE_SIZE</name> <operator pos:start="95:56" pos:end="95:56">-</operator> <literal type="number" pos:start="95:58" pos:end="95:58">1</literal><operator pos:start="95:59" pos:end="95:59">)</operator><operator pos:start="95:60" pos:end="95:60">)</operator> <operator pos:start="95:62" pos:end="95:62">&amp;</operator> <name pos:start="95:64" pos:end="95:79">TARGET_PAGE_MASK</name></expr></argument>,

                <argument pos:start="97:17" pos:end="97:37"><expr pos:start="97:17" pos:end="97:37"><operator pos:start="97:17" pos:end="97:17">(</operator><name pos:start="97:18" pos:end="97:25">unsigned</name> <name pos:start="97:27" pos:end="97:30">long</name> <name pos:start="97:32" pos:end="97:35">long</name><operator pos:start="97:36" pos:end="97:36">)</operator><literal type="number" pos:start="97:37" pos:end="97:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="99:1" pos:end="99:6">#<cpp:directive pos:start="99:2" pos:end="99:6">endif</cpp:directive></cpp:endif>



    <return pos:start="103:5" pos:end="103:13">return <expr pos:start="103:12" pos:end="103:12"><literal type="number" pos:start="103:12" pos:end="103:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
