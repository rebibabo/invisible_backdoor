<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6290.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">block_save_complete</name><parameter_list pos:start="1:31" pos:end="1:57">(<parameter pos:start="1:32" pos:end="1:42"><decl pos:start="1:32" pos:end="1:42"><type pos:start="1:32" pos:end="1:42"><name pos:start="1:32" pos:end="1:39">QEMUFile</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">f</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:56"><decl pos:start="1:45" pos:end="1:56"><type pos:start="1:45" pos:end="1:56"><name pos:start="1:45" pos:end="1:48">void</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:56">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="71:1">{<block_content pos:start="5:5" pos:end="69:13">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="11:68"><expr pos:start="9:5" pos:end="11:67"><call pos:start="9:5" pos:end="11:67"><name pos:start="9:5" pos:end="9:11">DPRINTF</name><argument_list pos:start="9:12" pos:end="11:67">(<argument pos:start="9:13" pos:end="9:68"><expr pos:start="9:13" pos:end="9:68"><literal type="string" pos:start="9:13" pos:end="9:68">"Enter save live complete submitted %d transferred %d\n"</literal></expr></argument>,

            <argument pos:start="11:13" pos:end="11:37"><expr pos:start="11:13" pos:end="11:37"><name pos:start="11:13" pos:end="11:37"><name pos:start="11:13" pos:end="11:27">block_mig_state</name><operator pos:start="11:28" pos:end="11:28">.</operator><name pos:start="11:29" pos:end="11:37">submitted</name></name></expr></argument>, <argument pos:start="11:40" pos:end="11:66"><expr pos:start="11:40" pos:end="11:66"><name pos:start="11:40" pos:end="11:66"><name pos:start="11:40" pos:end="11:54">block_mig_state</name><operator pos:start="11:55" pos:end="11:55">.</operator><name pos:start="11:56" pos:end="11:66">transferred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:24"><expr pos:start="15:5" pos:end="15:23"><name pos:start="15:5" pos:end="15:7">ret</name> <operator pos:start="15:9" pos:end="15:9">=</operator> <call pos:start="15:11" pos:end="15:23"><name pos:start="15:11" pos:end="15:20">flush_blks</name><argument_list pos:start="15:21" pos:end="15:23">(<argument pos:start="15:22" pos:end="15:22"><expr pos:start="15:22" pos:end="15:22"><name pos:start="15:22" pos:end="15:22">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:12">(<expr pos:start="17:9" pos:end="17:11"><name pos:start="17:9" pos:end="17:11">ret</name></expr>)</condition> <block pos:start="17:14" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:19">

        <expr_stmt pos:start="19:9" pos:end="19:26"><expr pos:start="19:9" pos:end="19:25"><call pos:start="19:9" pos:end="19:25"><name pos:start="19:9" pos:end="19:23">blk_mig_cleanup</name><argument_list pos:start="19:24" pos:end="19:25">()</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:19">return <expr pos:start="21:16" pos:end="21:18"><name pos:start="21:16" pos:end="21:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:33"><expr pos:start="27:5" pos:end="27:32"><call pos:start="27:5" pos:end="27:32"><name pos:start="27:5" pos:end="27:30">blk_mig_reset_dirty_cursor</name><argument_list pos:start="27:31" pos:end="27:32">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="31:5" pos:end="33:34">/* we know for sure that save bulk is completed and

       all async read completed */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:43"><expr pos:start="35:5" pos:end="35:42"><call pos:start="35:5" pos:end="35:42"><name pos:start="35:5" pos:end="35:10">assert</name><argument_list pos:start="35:11" pos:end="35:42">(<argument pos:start="35:12" pos:end="35:41"><expr pos:start="35:12" pos:end="35:41"><name pos:start="35:12" pos:end="35:36"><name pos:start="35:12" pos:end="35:26">block_mig_state</name><operator pos:start="35:27" pos:end="35:27">.</operator><name pos:start="35:28" pos:end="35:36">submitted</name></name> <operator pos:start="35:38" pos:end="35:39">==</operator> <literal type="number" pos:start="35:41" pos:end="35:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <do pos:start="39:5" pos:end="43:23">do <block pos:start="39:8" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:45">

        <expr_stmt pos:start="41:9" pos:end="41:45"><expr pos:start="41:9" pos:end="41:44"><name pos:start="41:9" pos:end="41:11">ret</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <call pos:start="41:15" pos:end="41:44"><name pos:start="41:15" pos:end="41:38">blk_mig_save_dirty_block</name><argument_list pos:start="41:39" pos:end="41:44">(<argument pos:start="41:40" pos:end="41:40"><expr pos:start="41:40" pos:end="41:40"><name pos:start="41:40" pos:end="41:40">f</name></expr></argument>, <argument pos:start="41:43" pos:end="41:43"><expr pos:start="41:43" pos:end="41:43"><literal type="number" pos:start="41:43" pos:end="41:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="43:13" pos:end="43:22">(<expr pos:start="43:14" pos:end="43:21"><name pos:start="43:14" pos:end="43:16">ret</name> <operator pos:start="43:18" pos:end="43:19">==</operator> <literal type="number" pos:start="43:21" pos:end="43:21">0</literal></expr>)</condition>;</do>



    <expr_stmt pos:start="47:5" pos:end="47:22"><expr pos:start="47:5" pos:end="47:21"><call pos:start="47:5" pos:end="47:21"><name pos:start="47:5" pos:end="47:19">blk_mig_cleanup</name><argument_list pos:start="47:20" pos:end="47:21">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="53:5"><if pos:start="49:5" pos:end="53:5">if <condition pos:start="49:8" pos:end="49:12">(<expr pos:start="49:9" pos:end="49:11"><name pos:start="49:9" pos:end="49:11">ret</name></expr>)</condition> <block pos:start="49:14" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:19">

        <return pos:start="51:9" pos:end="51:19">return <expr pos:start="51:16" pos:end="51:18"><name pos:start="51:16" pos:end="51:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="55:5" pos:end="55:27">/* report completion */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:72"><expr pos:start="57:5" pos:end="57:71"><call pos:start="57:5" pos:end="57:71"><name pos:start="57:5" pos:end="57:17">qemu_put_be64</name><argument_list pos:start="57:18" pos:end="57:71">(<argument pos:start="57:19" pos:end="57:19"><expr pos:start="57:19" pos:end="57:19"><name pos:start="57:19" pos:end="57:19">f</name></expr></argument>, <argument pos:start="57:22" pos:end="57:70"><expr pos:start="57:22" pos:end="57:70"><operator pos:start="57:22" pos:end="57:22">(</operator><literal type="number" pos:start="57:23" pos:end="57:25">100</literal> <operator pos:start="57:27" pos:end="57:28">&lt;&lt;</operator> <name pos:start="57:30" pos:end="57:45">BDRV_SECTOR_BITS</name><operator pos:start="57:46" pos:end="57:46">)</operator> <operator pos:start="57:48" pos:end="57:48">|</operator> <name pos:start="57:50" pos:end="57:70">BLK_MIG_FLAG_PROGRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:43"><expr pos:start="61:5" pos:end="61:42"><call pos:start="61:5" pos:end="61:42"><name pos:start="61:5" pos:end="61:11">DPRINTF</name><argument_list pos:start="61:12" pos:end="61:42">(<argument pos:start="61:13" pos:end="61:41"><expr pos:start="61:13" pos:end="61:41"><literal type="string" pos:start="61:13" pos:end="61:41">"Block migration completed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:39"><expr pos:start="65:5" pos:end="65:38"><call pos:start="65:5" pos:end="65:38"><name pos:start="65:5" pos:end="65:17">qemu_put_be64</name><argument_list pos:start="65:18" pos:end="65:38">(<argument pos:start="65:19" pos:end="65:19"><expr pos:start="65:19" pos:end="65:19"><name pos:start="65:19" pos:end="65:19">f</name></expr></argument>, <argument pos:start="65:22" pos:end="65:37"><expr pos:start="65:22" pos:end="65:37"><name pos:start="65:22" pos:end="65:37">BLK_MIG_FLAG_EOS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="69:5" pos:end="69:13">return <expr pos:start="69:12" pos:end="69:12"><literal type="number" pos:start="69:12" pos:end="69:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
