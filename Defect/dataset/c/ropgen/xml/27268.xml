<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/27268.c" pos:tabs="8"><function pos:start="1:1" pos:end="719:1"><type pos:start="1:1" pos:end="1:11"><name pos:start="1:1" pos:end="1:9">DriveInfo</name> <modifier pos:start="1:11" pos:end="1:11">*</modifier></type><name pos:start="1:12" pos:end="1:21">drive_init</name><parameter_list pos:start="1:22" pos:end="1:76">(<parameter pos:start="1:23" pos:end="1:36"><decl pos:start="1:23" pos:end="1:36"><type pos:start="1:23" pos:end="1:36"><name pos:start="1:23" pos:end="1:30">QemuOpts</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:36">opts</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:57"><decl pos:start="1:39" pos:end="1:57"><type pos:start="1:39" pos:end="1:57"><name pos:start="1:39" pos:end="1:41">int</name></type> <name pos:start="1:43" pos:end="1:57">default_to_scsi</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:75"><decl pos:start="1:60" pos:end="1:75"><type pos:start="1:60" pos:end="1:75"><name pos:start="1:60" pos:end="1:62">int</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:75">fatal_error</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="719:1">{<block_content pos:start="5:5" pos:end="717:17">

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:20">file</name> <init pos:start="7:22" pos:end="7:27">= <expr pos:start="7:24" pos:end="7:27"><name pos:start="7:24" pos:end="7:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:21"><name pos:start="9:10" pos:end="9:16">devname</name><index pos:start="9:17" pos:end="9:21">[<expr pos:start="9:18" pos:end="9:20"><literal type="number" pos:start="9:18" pos:end="9:20">128</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:22">serial</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:30"><decl pos:start="13:5" pos:end="13:29"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:24">mediastr</name> <init pos:start="13:26" pos:end="13:29">= <expr pos:start="13:28" pos:end="13:29"><literal type="string" pos:start="13:28" pos:end="13:29">""</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:22">BlockInterfaceType</name></type> <name pos:start="15:24" pos:end="15:27">type</name></decl>;</decl_stmt>

    <enum pos:start="17:5" pos:end="17:43">enum <block pos:start="17:10" pos:end="17:36">{ <decl pos:start="17:12" pos:end="17:21"><name pos:start="17:12" pos:end="17:21">MEDIA_DISK</name></decl>, <decl pos:start="17:24" pos:end="17:34"><name pos:start="17:24" pos:end="17:34">MEDIA_CDROM</name></decl> }</block> <decl pos:start="17:38" pos:end="17:42"><name pos:start="17:38" pos:end="17:42">media</name></decl>;</enum>

    <decl_stmt pos:start="19:5" pos:end="19:24"><decl pos:start="19:5" pos:end="19:14"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:14">bus_id</name></decl>, <decl pos:start="19:17" pos:end="19:23"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:17" pos:end="19:23">unit_id</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:39"><decl pos:start="21:5" pos:end="21:12"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:12">cyls</name></decl>, <decl pos:start="21:15" pos:end="21:19"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:15" pos:end="21:19">heads</name></decl>, <decl pos:start="21:22" pos:end="21:25"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:22" pos:end="21:25">secs</name></decl>, <decl pos:start="21:28" pos:end="21:38"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:28" pos:end="21:38">translation</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:28"><decl pos:start="23:5" pos:end="23:27"><type pos:start="23:5" pos:end="23:17"><name pos:start="23:5" pos:end="23:15">BlockDriver</name> <modifier pos:start="23:17" pos:end="23:17">*</modifier></type><name pos:start="23:18" pos:end="23:20">drv</name> <init pos:start="23:22" pos:end="23:27">= <expr pos:start="23:24" pos:end="23:27"><name pos:start="23:24" pos:end="23:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:17"><decl pos:start="25:5" pos:end="25:16"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:16">max_devs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:14"><decl pos:start="27:5" pos:end="27:13"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:13">index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:15"><decl pos:start="29:5" pos:end="29:14"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:10">ro</name> <init pos:start="29:12" pos:end="29:14">= <expr pos:start="29:14" pos:end="29:14"><literal type="number" pos:start="29:14" pos:end="29:14">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:23"><decl pos:start="31:5" pos:end="31:22"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:18">bdrv_flags</name> <init pos:start="31:20" pos:end="31:22">= <expr pos:start="31:22" pos:end="31:22"><literal type="number" pos:start="31:22" pos:end="31:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:38"><decl pos:start="33:5" pos:end="33:21"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:21">on_read_error</name></decl>, <decl pos:start="33:24" pos:end="33:37"><type ref="prev" pos:start="33:5" pos:end="33:7"/><name pos:start="33:24" pos:end="33:37">on_write_error</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:24"><decl pos:start="35:5" pos:end="35:23"><type pos:start="35:5" pos:end="35:16"><specifier pos:start="35:5" pos:end="35:9">const</specifier> <name pos:start="35:11" pos:end="35:14">char</name> <modifier pos:start="35:16" pos:end="35:16">*</modifier></type><name pos:start="35:17" pos:end="35:23">devaddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:21"><decl pos:start="37:5" pos:end="37:20"><type pos:start="37:5" pos:end="37:15"><name pos:start="37:5" pos:end="37:13">DriveInfo</name> <modifier pos:start="37:15" pos:end="37:15">*</modifier></type><name pos:start="37:16" pos:end="37:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:21"><decl pos:start="39:5" pos:end="39:20"><type pos:start="39:5" pos:end="39:7"><name pos:start="39:5" pos:end="39:7">int</name></type> <name pos:start="39:9" pos:end="39:16">snapshot</name> <init pos:start="39:18" pos:end="39:20">= <expr pos:start="39:20" pos:end="39:20"><literal type="number" pos:start="39:20" pos:end="39:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:12"><decl pos:start="41:5" pos:end="41:11"><type pos:start="41:5" pos:end="41:7"><name pos:start="41:5" pos:end="41:7">int</name></type> <name pos:start="41:9" pos:end="41:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:21"><expr pos:start="45:5" pos:end="45:20"><operator pos:start="45:5" pos:end="45:5">*</operator><name pos:start="45:6" pos:end="45:16">fatal_error</name> <operator pos:start="45:18" pos:end="45:18">=</operator> <literal type="number" pos:start="45:20" pos:end="45:20">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:44"><expr pos:start="49:5" pos:end="49:43"><name pos:start="49:5" pos:end="49:15">translation</name> <operator pos:start="49:17" pos:end="49:17">=</operator> <name pos:start="49:19" pos:end="49:43">BIOS_ATA_TRANSLATION_AUTO</name></expr>;</expr_stmt>



    <if_stmt pos:start="53:5" pos:end="69:5"><if pos:start="53:5" pos:end="61:5">if <condition pos:start="53:8" pos:end="53:24">(<expr pos:start="53:9" pos:end="53:23"><name pos:start="53:9" pos:end="53:23">default_to_scsi</name></expr>)</condition> <block pos:start="53:26" pos:end="61:5">{<block_content pos:start="55:9" pos:end="59:50">

        <expr_stmt pos:start="55:9" pos:end="55:23"><expr pos:start="55:9" pos:end="55:22"><name pos:start="55:9" pos:end="55:12">type</name> <operator pos:start="55:14" pos:end="55:14">=</operator> <name pos:start="55:16" pos:end="55:22">IF_SCSI</name></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:33"><expr pos:start="57:9" pos:end="57:32"><name pos:start="57:9" pos:end="57:16">max_devs</name> <operator pos:start="57:18" pos:end="57:18">=</operator> <name pos:start="57:20" pos:end="57:32">MAX_SCSI_DEVS</name></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:50"><expr pos:start="59:9" pos:end="59:49"><call pos:start="59:9" pos:end="59:49"><name pos:start="59:9" pos:end="59:15">pstrcpy</name><argument_list pos:start="59:16" pos:end="59:49">(<argument pos:start="59:17" pos:end="59:23"><expr pos:start="59:17" pos:end="59:23"><name pos:start="59:17" pos:end="59:23">devname</name></expr></argument>, <argument pos:start="59:26" pos:end="59:40"><expr pos:start="59:26" pos:end="59:40"><sizeof pos:start="59:26" pos:end="59:40">sizeof<argument_list pos:start="59:32" pos:end="59:40">(<argument pos:start="59:33" pos:end="59:39"><expr pos:start="59:33" pos:end="59:39"><name pos:start="59:33" pos:end="59:39">devname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="59:43" pos:end="59:48"><expr pos:start="59:43" pos:end="59:48"><literal type="string" pos:start="59:43" pos:end="59:48">"scsi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="61:7" pos:end="69:5">else <block pos:start="61:12" pos:end="69:5">{<block_content pos:start="63:9" pos:end="67:49">

        <expr_stmt pos:start="63:9" pos:end="63:22"><expr pos:start="63:9" pos:end="63:21"><name pos:start="63:9" pos:end="63:12">type</name> <operator pos:start="63:14" pos:end="63:14">=</operator> <name pos:start="63:16" pos:end="63:21">IF_IDE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:32"><expr pos:start="65:9" pos:end="65:31"><name pos:start="65:9" pos:end="65:16">max_devs</name> <operator pos:start="65:18" pos:end="65:18">=</operator> <name pos:start="65:20" pos:end="65:31">MAX_IDE_DEVS</name></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:49"><expr pos:start="67:9" pos:end="67:48"><call pos:start="67:9" pos:end="67:48"><name pos:start="67:9" pos:end="67:15">pstrcpy</name><argument_list pos:start="67:16" pos:end="67:48">(<argument pos:start="67:17" pos:end="67:23"><expr pos:start="67:17" pos:end="67:23"><name pos:start="67:17" pos:end="67:23">devname</name></expr></argument>, <argument pos:start="67:26" pos:end="67:40"><expr pos:start="67:26" pos:end="67:40"><sizeof pos:start="67:26" pos:end="67:40">sizeof<argument_list pos:start="67:32" pos:end="67:40">(<argument pos:start="67:33" pos:end="67:39"><expr pos:start="67:33" pos:end="67:39"><name pos:start="67:33" pos:end="67:39">devname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="67:43" pos:end="67:47"><expr pos:start="67:43" pos:end="67:47"><literal type="string" pos:start="67:43" pos:end="67:47">"ide"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:23"><expr pos:start="71:5" pos:end="71:22"><name pos:start="71:5" pos:end="71:9">media</name> <operator pos:start="71:11" pos:end="71:11">=</operator> <name pos:start="71:13" pos:end="71:22">MEDIA_DISK</name></expr>;</expr_stmt>



    <comment type="block" pos:start="75:5" pos:end="75:28">/* extract parameters */</comment>

    <expr_stmt pos:start="77:5" pos:end="77:50"><expr pos:start="77:5" pos:end="77:49"><name pos:start="77:5" pos:end="77:10">bus_id</name>  <operator pos:start="77:13" pos:end="77:13">=</operator> <call pos:start="77:15" pos:end="77:49"><name pos:start="77:15" pos:end="77:33">qemu_opt_get_number</name><argument_list pos:start="77:34" pos:end="77:49">(<argument pos:start="77:35" pos:end="77:38"><expr pos:start="77:35" pos:end="77:38"><name pos:start="77:35" pos:end="77:38">opts</name></expr></argument>, <argument pos:start="77:41" pos:end="77:45"><expr pos:start="77:41" pos:end="77:45"><literal type="string" pos:start="77:41" pos:end="77:45">"bus"</literal></expr></argument>, <argument pos:start="77:48" pos:end="77:48"><expr pos:start="77:48" pos:end="77:48"><literal type="number" pos:start="77:48" pos:end="77:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:52"><expr pos:start="79:5" pos:end="79:51"><name pos:start="79:5" pos:end="79:11">unit_id</name> <operator pos:start="79:13" pos:end="79:13">=</operator> <call pos:start="79:15" pos:end="79:51"><name pos:start="79:15" pos:end="79:33">qemu_opt_get_number</name><argument_list pos:start="79:34" pos:end="79:51">(<argument pos:start="79:35" pos:end="79:38"><expr pos:start="79:35" pos:end="79:38"><name pos:start="79:35" pos:end="79:38">opts</name></expr></argument>, <argument pos:start="79:41" pos:end="79:46"><expr pos:start="79:41" pos:end="79:46"><literal type="string" pos:start="79:41" pos:end="79:46">"unit"</literal></expr></argument>, <argument pos:start="79:49" pos:end="79:50"><expr pos:start="79:49" pos:end="79:50"><operator pos:start="79:49" pos:end="79:49">-</operator><literal type="number" pos:start="79:50" pos:end="79:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:53"><expr pos:start="81:5" pos:end="81:52"><name pos:start="81:5" pos:end="81:9">index</name>   <operator pos:start="81:13" pos:end="81:13">=</operator> <call pos:start="81:15" pos:end="81:52"><name pos:start="81:15" pos:end="81:33">qemu_opt_get_number</name><argument_list pos:start="81:34" pos:end="81:52">(<argument pos:start="81:35" pos:end="81:38"><expr pos:start="81:35" pos:end="81:38"><name pos:start="81:35" pos:end="81:38">opts</name></expr></argument>, <argument pos:start="81:41" pos:end="81:47"><expr pos:start="81:41" pos:end="81:47"><literal type="string" pos:start="81:41" pos:end="81:47">"index"</literal></expr></argument>, <argument pos:start="81:50" pos:end="81:51"><expr pos:start="81:50" pos:end="81:51"><operator pos:start="81:50" pos:end="81:50">-</operator><literal type="number" pos:start="81:51" pos:end="81:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:49"><expr pos:start="85:5" pos:end="85:48"><name pos:start="85:5" pos:end="85:8">cyls</name>  <operator pos:start="85:11" pos:end="85:11">=</operator> <call pos:start="85:13" pos:end="85:48"><name pos:start="85:13" pos:end="85:31">qemu_opt_get_number</name><argument_list pos:start="85:32" pos:end="85:48">(<argument pos:start="85:33" pos:end="85:36"><expr pos:start="85:33" pos:end="85:36"><name pos:start="85:33" pos:end="85:36">opts</name></expr></argument>, <argument pos:start="85:39" pos:end="85:44"><expr pos:start="85:39" pos:end="85:44"><literal type="string" pos:start="85:39" pos:end="85:44">"cyls"</literal></expr></argument>, <argument pos:start="85:47" pos:end="85:47"><expr pos:start="85:47" pos:end="85:47"><literal type="number" pos:start="85:47" pos:end="85:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:50"><expr pos:start="87:5" pos:end="87:49"><name pos:start="87:5" pos:end="87:9">heads</name> <operator pos:start="87:11" pos:end="87:11">=</operator> <call pos:start="87:13" pos:end="87:49"><name pos:start="87:13" pos:end="87:31">qemu_opt_get_number</name><argument_list pos:start="87:32" pos:end="87:49">(<argument pos:start="87:33" pos:end="87:36"><expr pos:start="87:33" pos:end="87:36"><name pos:start="87:33" pos:end="87:36">opts</name></expr></argument>, <argument pos:start="87:39" pos:end="87:45"><expr pos:start="87:39" pos:end="87:45"><literal type="string" pos:start="87:39" pos:end="87:45">"heads"</literal></expr></argument>, <argument pos:start="87:48" pos:end="87:48"><expr pos:start="87:48" pos:end="87:48"><literal type="number" pos:start="87:48" pos:end="87:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:49"><expr pos:start="89:5" pos:end="89:48"><name pos:start="89:5" pos:end="89:8">secs</name>  <operator pos:start="89:11" pos:end="89:11">=</operator> <call pos:start="89:13" pos:end="89:48"><name pos:start="89:13" pos:end="89:31">qemu_opt_get_number</name><argument_list pos:start="89:32" pos:end="89:48">(<argument pos:start="89:33" pos:end="89:36"><expr pos:start="89:33" pos:end="89:36"><name pos:start="89:33" pos:end="89:36">opts</name></expr></argument>, <argument pos:start="89:39" pos:end="89:44"><expr pos:start="89:39" pos:end="89:44"><literal type="string" pos:start="89:39" pos:end="89:44">"secs"</literal></expr></argument>, <argument pos:start="89:47" pos:end="89:47"><expr pos:start="89:47" pos:end="89:47"><literal type="number" pos:start="89:47" pos:end="89:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:54"><expr pos:start="93:5" pos:end="93:53"><name pos:start="93:5" pos:end="93:12">snapshot</name> <operator pos:start="93:14" pos:end="93:14">=</operator> <call pos:start="93:16" pos:end="93:53"><name pos:start="93:16" pos:end="93:32">qemu_opt_get_bool</name><argument_list pos:start="93:33" pos:end="93:53">(<argument pos:start="93:34" pos:end="93:37"><expr pos:start="93:34" pos:end="93:37"><name pos:start="93:34" pos:end="93:37">opts</name></expr></argument>, <argument pos:start="93:40" pos:end="93:49"><expr pos:start="93:40" pos:end="93:49"><literal type="string" pos:start="93:40" pos:end="93:49">"snapshot"</literal></expr></argument>, <argument pos:start="93:52" pos:end="93:52"><expr pos:start="93:52" pos:end="93:52"><literal type="number" pos:start="93:52" pos:end="93:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:48"><expr pos:start="95:5" pos:end="95:47"><name pos:start="95:5" pos:end="95:6">ro</name> <operator pos:start="95:8" pos:end="95:8">=</operator> <call pos:start="95:10" pos:end="95:47"><name pos:start="95:10" pos:end="95:26">qemu_opt_get_bool</name><argument_list pos:start="95:27" pos:end="95:47">(<argument pos:start="95:28" pos:end="95:31"><expr pos:start="95:28" pos:end="95:31"><name pos:start="95:28" pos:end="95:31">opts</name></expr></argument>, <argument pos:start="95:34" pos:end="95:43"><expr pos:start="95:34" pos:end="95:43"><literal type="string" pos:start="95:34" pos:end="95:43">"readonly"</literal></expr></argument>, <argument pos:start="95:46" pos:end="95:46"><expr pos:start="95:46" pos:end="95:46"><literal type="number" pos:start="95:46" pos:end="95:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="99:5" pos:end="99:38"><expr pos:start="99:5" pos:end="99:37"><name pos:start="99:5" pos:end="99:8">file</name> <operator pos:start="99:10" pos:end="99:10">=</operator> <call pos:start="99:12" pos:end="99:37"><name pos:start="99:12" pos:end="99:23">qemu_opt_get</name><argument_list pos:start="99:24" pos:end="99:37">(<argument pos:start="99:25" pos:end="99:28"><expr pos:start="99:25" pos:end="99:28"><name pos:start="99:25" pos:end="99:28">opts</name></expr></argument>, <argument pos:start="99:31" pos:end="99:36"><expr pos:start="99:31" pos:end="99:36"><literal type="string" pos:start="99:31" pos:end="99:36">"file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:42"><expr pos:start="101:5" pos:end="101:41"><name pos:start="101:5" pos:end="101:10">serial</name> <operator pos:start="101:12" pos:end="101:12">=</operator> <call pos:start="101:14" pos:end="101:41"><name pos:start="101:14" pos:end="101:25">qemu_opt_get</name><argument_list pos:start="101:26" pos:end="101:41">(<argument pos:start="101:27" pos:end="101:30"><expr pos:start="101:27" pos:end="101:30"><name pos:start="101:27" pos:end="101:30">opts</name></expr></argument>, <argument pos:start="101:33" pos:end="101:40"><expr pos:start="101:33" pos:end="101:40"><literal type="string" pos:start="101:33" pos:end="101:40">"serial"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="105:5" pos:end="171:5"><if pos:start="105:5" pos:end="171:5">if <condition pos:start="105:8" pos:end="105:49">(<expr pos:start="105:9" pos:end="105:48"><operator pos:start="105:9" pos:end="105:9">(</operator><name pos:start="105:10" pos:end="105:12">buf</name> <operator pos:start="105:14" pos:end="105:14">=</operator> <call pos:start="105:16" pos:end="105:39"><name pos:start="105:16" pos:end="105:27">qemu_opt_get</name><argument_list pos:start="105:28" pos:end="105:39">(<argument pos:start="105:29" pos:end="105:32"><expr pos:start="105:29" pos:end="105:32"><name pos:start="105:29" pos:end="105:32">opts</name></expr></argument>, <argument pos:start="105:35" pos:end="105:38"><expr pos:start="105:35" pos:end="105:38"><literal type="string" pos:start="105:35" pos:end="105:38">"if"</literal></expr></argument>)</argument_list></call><operator pos:start="105:40" pos:end="105:40">)</operator> <operator pos:start="105:42" pos:end="105:43">!=</operator> <name pos:start="105:45" pos:end="105:48">NULL</name></expr>)</condition> <block pos:start="105:51" pos:end="171:5">{<block_content pos:start="107:9" pos:end="169:9">

        <expr_stmt pos:start="107:9" pos:end="107:47"><expr pos:start="107:9" pos:end="107:46"><call pos:start="107:9" pos:end="107:46"><name pos:start="107:9" pos:end="107:15">pstrcpy</name><argument_list pos:start="107:16" pos:end="107:46">(<argument pos:start="107:17" pos:end="107:23"><expr pos:start="107:17" pos:end="107:23"><name pos:start="107:17" pos:end="107:23">devname</name></expr></argument>, <argument pos:start="107:26" pos:end="107:40"><expr pos:start="107:26" pos:end="107:40"><sizeof pos:start="107:26" pos:end="107:40">sizeof<argument_list pos:start="107:32" pos:end="107:40">(<argument pos:start="107:33" pos:end="107:39"><expr pos:start="107:33" pos:end="107:39"><name pos:start="107:33" pos:end="107:39">devname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="107:43" pos:end="107:45"><expr pos:start="107:43" pos:end="107:45"><name pos:start="107:43" pos:end="107:45">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="109:9" pos:end="169:9"><if pos:start="109:9" pos:end="115:9">if <condition pos:start="109:12" pos:end="109:32">(<expr pos:start="109:13" pos:end="109:31"><operator pos:start="109:13" pos:end="109:13">!</operator><call pos:start="109:14" pos:end="109:31"><name pos:start="109:14" pos:end="109:19">strcmp</name><argument_list pos:start="109:20" pos:end="109:31">(<argument pos:start="109:21" pos:end="109:23"><expr pos:start="109:21" pos:end="109:23"><name pos:start="109:21" pos:end="109:23">buf</name></expr></argument>, <argument pos:start="109:26" pos:end="109:30"><expr pos:start="109:26" pos:end="109:30"><literal type="string" pos:start="109:26" pos:end="109:30">"ide"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="109:34" pos:end="115:9">{<block_content pos:start="111:13" pos:end="113:36">

	    <expr_stmt pos:start="111:13" pos:end="111:26"><expr pos:start="111:13" pos:end="111:25"><name pos:start="111:13" pos:end="111:16">type</name> <operator pos:start="111:18" pos:end="111:18">=</operator> <name pos:start="111:20" pos:end="111:25">IF_IDE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:36"><expr pos:start="113:13" pos:end="113:35"><name pos:start="113:13" pos:end="113:20">max_devs</name> <operator pos:start="113:22" pos:end="113:22">=</operator> <name pos:start="113:24" pos:end="113:35">MAX_IDE_DEVS</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="115:11" pos:end="121:9">else if <condition pos:start="115:19" pos:end="115:40">(<expr pos:start="115:20" pos:end="115:39"><operator pos:start="115:20" pos:end="115:20">!</operator><call pos:start="115:21" pos:end="115:39"><name pos:start="115:21" pos:end="115:26">strcmp</name><argument_list pos:start="115:27" pos:end="115:39">(<argument pos:start="115:28" pos:end="115:30"><expr pos:start="115:28" pos:end="115:30"><name pos:start="115:28" pos:end="115:30">buf</name></expr></argument>, <argument pos:start="115:33" pos:end="115:38"><expr pos:start="115:33" pos:end="115:38"><literal type="string" pos:start="115:33" pos:end="115:38">"scsi"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="115:42" pos:end="121:9">{<block_content pos:start="117:13" pos:end="119:37">

	    <expr_stmt pos:start="117:13" pos:end="117:27"><expr pos:start="117:13" pos:end="117:26"><name pos:start="117:13" pos:end="117:16">type</name> <operator pos:start="117:18" pos:end="117:18">=</operator> <name pos:start="117:20" pos:end="117:26">IF_SCSI</name></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:37"><expr pos:start="119:13" pos:end="119:36"><name pos:start="119:13" pos:end="119:20">max_devs</name> <operator pos:start="119:22" pos:end="119:22">=</operator> <name pos:start="119:24" pos:end="119:36">MAX_SCSI_DEVS</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="121:11" pos:end="127:9">else if <condition pos:start="121:19" pos:end="121:42">(<expr pos:start="121:20" pos:end="121:41"><operator pos:start="121:20" pos:end="121:20">!</operator><call pos:start="121:21" pos:end="121:41"><name pos:start="121:21" pos:end="121:26">strcmp</name><argument_list pos:start="121:27" pos:end="121:41">(<argument pos:start="121:28" pos:end="121:30"><expr pos:start="121:28" pos:end="121:30"><name pos:start="121:28" pos:end="121:30">buf</name></expr></argument>, <argument pos:start="121:33" pos:end="121:40"><expr pos:start="121:33" pos:end="121:40"><literal type="string" pos:start="121:33" pos:end="121:40">"floppy"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="121:44" pos:end="127:9">{<block_content pos:start="123:13" pos:end="125:25">

	    <expr_stmt pos:start="123:13" pos:end="123:29"><expr pos:start="123:13" pos:end="123:28"><name pos:start="123:13" pos:end="123:16">type</name> <operator pos:start="123:18" pos:end="123:18">=</operator> <name pos:start="123:20" pos:end="123:28">IF_FLOPPY</name></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:25"><expr pos:start="125:13" pos:end="125:24"><name pos:start="125:13" pos:end="125:20">max_devs</name> <operator pos:start="125:22" pos:end="125:22">=</operator> <literal type="number" pos:start="125:24" pos:end="125:24">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="127:11" pos:end="133:9">else if <condition pos:start="127:19" pos:end="127:42">(<expr pos:start="127:20" pos:end="127:41"><operator pos:start="127:20" pos:end="127:20">!</operator><call pos:start="127:21" pos:end="127:41"><name pos:start="127:21" pos:end="127:26">strcmp</name><argument_list pos:start="127:27" pos:end="127:41">(<argument pos:start="127:28" pos:end="127:30"><expr pos:start="127:28" pos:end="127:30"><name pos:start="127:28" pos:end="127:30">buf</name></expr></argument>, <argument pos:start="127:33" pos:end="127:40"><expr pos:start="127:33" pos:end="127:40"><literal type="string" pos:start="127:33" pos:end="127:40">"pflash"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="127:44" pos:end="133:9">{<block_content pos:start="129:13" pos:end="131:25">

	    <expr_stmt pos:start="129:13" pos:end="129:29"><expr pos:start="129:13" pos:end="129:28"><name pos:start="129:13" pos:end="129:16">type</name> <operator pos:start="129:18" pos:end="129:18">=</operator> <name pos:start="129:20" pos:end="129:28">IF_PFLASH</name></expr>;</expr_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:25"><expr pos:start="131:13" pos:end="131:24"><name pos:start="131:13" pos:end="131:20">max_devs</name> <operator pos:start="131:22" pos:end="131:22">=</operator> <literal type="number" pos:start="131:24" pos:end="131:24">0</literal></expr>;</expr_stmt>

	</block_content>}</block></if> <if type="elseif" pos:start="133:11" pos:end="139:9">else if <condition pos:start="133:19" pos:end="133:39">(<expr pos:start="133:20" pos:end="133:38"><operator pos:start="133:20" pos:end="133:20">!</operator><call pos:start="133:21" pos:end="133:38"><name pos:start="133:21" pos:end="133:26">strcmp</name><argument_list pos:start="133:27" pos:end="133:38">(<argument pos:start="133:28" pos:end="133:30"><expr pos:start="133:28" pos:end="133:30"><name pos:start="133:28" pos:end="133:30">buf</name></expr></argument>, <argument pos:start="133:33" pos:end="133:37"><expr pos:start="133:33" pos:end="133:37"><literal type="string" pos:start="133:33" pos:end="133:37">"mtd"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="133:41" pos:end="139:9">{<block_content pos:start="135:13" pos:end="137:25">

	    <expr_stmt pos:start="135:13" pos:end="135:26"><expr pos:start="135:13" pos:end="135:25"><name pos:start="135:13" pos:end="135:16">type</name> <operator pos:start="135:18" pos:end="135:18">=</operator> <name pos:start="135:20" pos:end="135:25">IF_MTD</name></expr>;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:25"><expr pos:start="137:13" pos:end="137:24"><name pos:start="137:13" pos:end="137:20">max_devs</name> <operator pos:start="137:22" pos:end="137:22">=</operator> <literal type="number" pos:start="137:24" pos:end="137:24">0</literal></expr>;</expr_stmt>

	</block_content>}</block></if> <if type="elseif" pos:start="139:11" pos:end="145:9">else if <condition pos:start="139:19" pos:end="139:38">(<expr pos:start="139:20" pos:end="139:37"><operator pos:start="139:20" pos:end="139:20">!</operator><call pos:start="139:21" pos:end="139:37"><name pos:start="139:21" pos:end="139:26">strcmp</name><argument_list pos:start="139:27" pos:end="139:37">(<argument pos:start="139:28" pos:end="139:30"><expr pos:start="139:28" pos:end="139:30"><name pos:start="139:28" pos:end="139:30">buf</name></expr></argument>, <argument pos:start="139:33" pos:end="139:36"><expr pos:start="139:33" pos:end="139:36"><literal type="string" pos:start="139:33" pos:end="139:36">"sd"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="139:40" pos:end="145:9">{<block_content pos:start="141:13" pos:end="143:25">

	    <expr_stmt pos:start="141:13" pos:end="141:25"><expr pos:start="141:13" pos:end="141:24"><name pos:start="141:13" pos:end="141:16">type</name> <operator pos:start="141:18" pos:end="141:18">=</operator> <name pos:start="141:20" pos:end="141:24">IF_SD</name></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:25"><expr pos:start="143:13" pos:end="143:24"><name pos:start="143:13" pos:end="143:20">max_devs</name> <operator pos:start="143:22" pos:end="143:22">=</operator> <literal type="number" pos:start="143:24" pos:end="143:24">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="145:11" pos:end="151:9">else if <condition pos:start="145:19" pos:end="145:42">(<expr pos:start="145:20" pos:end="145:41"><operator pos:start="145:20" pos:end="145:20">!</operator><call pos:start="145:21" pos:end="145:41"><name pos:start="145:21" pos:end="145:26">strcmp</name><argument_list pos:start="145:27" pos:end="145:41">(<argument pos:start="145:28" pos:end="145:30"><expr pos:start="145:28" pos:end="145:30"><name pos:start="145:28" pos:end="145:30">buf</name></expr></argument>, <argument pos:start="145:33" pos:end="145:40"><expr pos:start="145:33" pos:end="145:40"><literal type="string" pos:start="145:33" pos:end="145:40">"virtio"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="145:44" pos:end="151:9">{<block_content pos:start="147:13" pos:end="149:25">

            <expr_stmt pos:start="147:13" pos:end="147:29"><expr pos:start="147:13" pos:end="147:28"><name pos:start="147:13" pos:end="147:16">type</name> <operator pos:start="147:18" pos:end="147:18">=</operator> <name pos:start="147:20" pos:end="147:28">IF_VIRTIO</name></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:25"><expr pos:start="149:13" pos:end="149:24"><name pos:start="149:13" pos:end="149:20">max_devs</name> <operator pos:start="149:22" pos:end="149:22">=</operator> <literal type="number" pos:start="149:24" pos:end="149:24">0</literal></expr>;</expr_stmt>

	</block_content>}</block></if> <if type="elseif" pos:start="151:11" pos:end="157:9">else if <condition pos:start="151:19" pos:end="151:39">(<expr pos:start="151:20" pos:end="151:38"><operator pos:start="151:20" pos:end="151:20">!</operator><call pos:start="151:21" pos:end="151:38"><name pos:start="151:21" pos:end="151:26">strcmp</name><argument_list pos:start="151:27" pos:end="151:38">(<argument pos:start="151:28" pos:end="151:30"><expr pos:start="151:28" pos:end="151:30"><name pos:start="151:28" pos:end="151:30">buf</name></expr></argument>, <argument pos:start="151:33" pos:end="151:37"><expr pos:start="151:33" pos:end="151:37"><literal type="string" pos:start="151:33" pos:end="151:37">"xen"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="151:41" pos:end="157:9">{<block_content pos:start="153:13" pos:end="155:25">

	    <expr_stmt pos:start="153:13" pos:end="153:26"><expr pos:start="153:13" pos:end="153:25"><name pos:start="153:13" pos:end="153:16">type</name> <operator pos:start="153:18" pos:end="153:18">=</operator> <name pos:start="153:20" pos:end="153:25">IF_XEN</name></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:25"><expr pos:start="155:13" pos:end="155:24"><name pos:start="155:13" pos:end="155:20">max_devs</name> <operator pos:start="155:22" pos:end="155:22">=</operator> <literal type="number" pos:start="155:24" pos:end="155:24">0</literal></expr>;</expr_stmt>

	</block_content>}</block></if> <if type="elseif" pos:start="157:11" pos:end="163:9">else if <condition pos:start="157:19" pos:end="157:40">(<expr pos:start="157:20" pos:end="157:39"><operator pos:start="157:20" pos:end="157:20">!</operator><call pos:start="157:21" pos:end="157:39"><name pos:start="157:21" pos:end="157:26">strcmp</name><argument_list pos:start="157:27" pos:end="157:39">(<argument pos:start="157:28" pos:end="157:30"><expr pos:start="157:28" pos:end="157:30"><name pos:start="157:28" pos:end="157:30">buf</name></expr></argument>, <argument pos:start="157:33" pos:end="157:38"><expr pos:start="157:33" pos:end="157:38"><literal type="string" pos:start="157:33" pos:end="157:38">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="157:42" pos:end="163:9">{<block_content pos:start="159:13" pos:end="161:25">

	    <expr_stmt pos:start="159:13" pos:end="159:27"><expr pos:start="159:13" pos:end="159:26"><name pos:start="159:13" pos:end="159:16">type</name> <operator pos:start="159:18" pos:end="159:18">=</operator> <name pos:start="159:20" pos:end="159:26">IF_NONE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:25"><expr pos:start="161:13" pos:end="161:24"><name pos:start="161:13" pos:end="161:20">max_devs</name> <operator pos:start="161:22" pos:end="161:22">=</operator> <literal type="number" pos:start="161:24" pos:end="161:24">0</literal></expr>;</expr_stmt>

	</block_content>}</block></if> <else pos:start="163:11" pos:end="169:9">else <block pos:start="163:16" pos:end="169:9">{<block_content pos:start="165:13" pos:end="167:24">

            <expr_stmt pos:start="165:13" pos:end="165:59"><expr pos:start="165:13" pos:end="165:58"><call pos:start="165:13" pos:end="165:58"><name pos:start="165:13" pos:end="165:24">error_report</name><argument_list pos:start="165:25" pos:end="165:58">(<argument pos:start="165:26" pos:end="165:52"><expr pos:start="165:26" pos:end="165:52"><literal type="string" pos:start="165:26" pos:end="165:52">"unsupported bus type '%s'"</literal></expr></argument>, <argument pos:start="165:55" pos:end="165:57"><expr pos:start="165:55" pos:end="165:57"><name pos:start="165:55" pos:end="165:57">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="167:13" pos:end="167:24">return <expr pos:start="167:20" pos:end="167:23"><name pos:start="167:20" pos:end="167:23">NULL</name></expr>;</return>

	</block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="175:5" pos:end="201:5"><if pos:start="175:5" pos:end="201:5">if <condition pos:start="175:8" pos:end="175:30">(<expr pos:start="175:9" pos:end="175:29"><name pos:start="175:9" pos:end="175:12">cyls</name> <operator pos:start="175:14" pos:end="175:15">||</operator> <name pos:start="175:17" pos:end="175:21">heads</name> <operator pos:start="175:23" pos:end="175:24">||</operator> <name pos:start="175:26" pos:end="175:29">secs</name></expr>)</condition> <block pos:start="175:32" pos:end="201:5">{<block_content pos:start="177:9" pos:end="199:9">

        <if_stmt pos:start="177:9" pos:end="183:9"><if pos:start="177:9" pos:end="183:9">if <condition pos:start="177:12" pos:end="177:57">(<expr pos:start="177:13" pos:end="177:56"><name pos:start="177:13" pos:end="177:16">cyls</name> <operator pos:start="177:18" pos:end="177:18">&lt;</operator> <literal type="number" pos:start="177:20" pos:end="177:20">1</literal> <operator pos:start="177:22" pos:end="177:23">||</operator> <operator pos:start="177:25" pos:end="177:25">(</operator><name pos:start="177:26" pos:end="177:29">type</name> <operator pos:start="177:31" pos:end="177:32">==</operator> <name pos:start="177:34" pos:end="177:39">IF_IDE</name> <operator pos:start="177:41" pos:end="177:42">&amp;&amp;</operator> <name pos:start="177:44" pos:end="177:47">cyls</name> <operator pos:start="177:49" pos:end="177:49">&gt;</operator> <literal type="number" pos:start="177:51" pos:end="177:55">16383</literal><operator pos:start="177:56" pos:end="177:56">)</operator></expr>)</condition> <block pos:start="177:59" pos:end="183:9">{<block_content pos:start="179:13" pos:end="181:24">

            <expr_stmt pos:start="179:13" pos:end="179:57"><expr pos:start="179:13" pos:end="179:56"><call pos:start="179:13" pos:end="179:56"><name pos:start="179:13" pos:end="179:24">error_report</name><argument_list pos:start="179:25" pos:end="179:56">(<argument pos:start="179:26" pos:end="179:55"><expr pos:start="179:26" pos:end="179:55"><literal type="string" pos:start="179:26" pos:end="179:55">"invalid physical cyls number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="181:13" pos:end="181:24">return <expr pos:start="181:20" pos:end="181:23"><name pos:start="181:20" pos:end="181:23">NULL</name></expr>;</return>

	</block_content>}</block></if></if_stmt>

        <if_stmt pos:start="185:9" pos:end="191:9"><if pos:start="185:9" pos:end="191:9">if <condition pos:start="185:12" pos:end="185:56">(<expr pos:start="185:13" pos:end="185:55"><name pos:start="185:13" pos:end="185:17">heads</name> <operator pos:start="185:19" pos:end="185:19">&lt;</operator> <literal type="number" pos:start="185:21" pos:end="185:21">1</literal> <operator pos:start="185:23" pos:end="185:24">||</operator> <operator pos:start="185:26" pos:end="185:26">(</operator><name pos:start="185:27" pos:end="185:30">type</name> <operator pos:start="185:32" pos:end="185:33">==</operator> <name pos:start="185:35" pos:end="185:40">IF_IDE</name> <operator pos:start="185:42" pos:end="185:43">&amp;&amp;</operator> <name pos:start="185:45" pos:end="185:49">heads</name> <operator pos:start="185:51" pos:end="185:51">&gt;</operator> <literal type="number" pos:start="185:53" pos:end="185:54">16</literal><operator pos:start="185:55" pos:end="185:55">)</operator></expr>)</condition> <block pos:start="185:58" pos:end="191:9">{<block_content pos:start="187:13" pos:end="189:24">

            <expr_stmt pos:start="187:13" pos:end="187:58"><expr pos:start="187:13" pos:end="187:57"><call pos:start="187:13" pos:end="187:57"><name pos:start="187:13" pos:end="187:24">error_report</name><argument_list pos:start="187:25" pos:end="187:57">(<argument pos:start="187:26" pos:end="187:56"><expr pos:start="187:26" pos:end="187:56"><literal type="string" pos:start="187:26" pos:end="187:56">"invalid physical heads number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="189:13" pos:end="189:24">return <expr pos:start="189:20" pos:end="189:23"><name pos:start="189:20" pos:end="189:23">NULL</name></expr>;</return>

	</block_content>}</block></if></if_stmt>

        <if_stmt pos:start="193:9" pos:end="199:9"><if pos:start="193:9" pos:end="199:9">if <condition pos:start="193:12" pos:end="193:54">(<expr pos:start="193:13" pos:end="193:53"><name pos:start="193:13" pos:end="193:16">secs</name> <operator pos:start="193:18" pos:end="193:18">&lt;</operator> <literal type="number" pos:start="193:20" pos:end="193:20">1</literal> <operator pos:start="193:22" pos:end="193:23">||</operator> <operator pos:start="193:25" pos:end="193:25">(</operator><name pos:start="193:26" pos:end="193:29">type</name> <operator pos:start="193:31" pos:end="193:32">==</operator> <name pos:start="193:34" pos:end="193:39">IF_IDE</name> <operator pos:start="193:41" pos:end="193:42">&amp;&amp;</operator> <name pos:start="193:44" pos:end="193:47">secs</name> <operator pos:start="193:49" pos:end="193:49">&gt;</operator> <literal type="number" pos:start="193:51" pos:end="193:52">63</literal><operator pos:start="193:53" pos:end="193:53">)</operator></expr>)</condition> <block pos:start="193:56" pos:end="199:9">{<block_content pos:start="195:13" pos:end="197:24">

            <expr_stmt pos:start="195:13" pos:end="195:57"><expr pos:start="195:13" pos:end="195:56"><call pos:start="195:13" pos:end="195:56"><name pos:start="195:13" pos:end="195:24">error_report</name><argument_list pos:start="195:25" pos:end="195:56">(<argument pos:start="195:26" pos:end="195:55"><expr pos:start="195:26" pos:end="195:55"><literal type="string" pos:start="195:26" pos:end="195:55">"invalid physical secs number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="197:13" pos:end="197:24">return <expr pos:start="197:20" pos:end="197:23"><name pos:start="197:20" pos:end="197:23">NULL</name></expr>;</return>

	</block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="205:5" pos:end="237:5"><if pos:start="205:5" pos:end="237:5">if <condition pos:start="205:8" pos:end="205:52">(<expr pos:start="205:9" pos:end="205:51"><operator pos:start="205:9" pos:end="205:9">(</operator><name pos:start="205:10" pos:end="205:12">buf</name> <operator pos:start="205:14" pos:end="205:14">=</operator> <call pos:start="205:16" pos:end="205:42"><name pos:start="205:16" pos:end="205:27">qemu_opt_get</name><argument_list pos:start="205:28" pos:end="205:42">(<argument pos:start="205:29" pos:end="205:32"><expr pos:start="205:29" pos:end="205:32"><name pos:start="205:29" pos:end="205:32">opts</name></expr></argument>, <argument pos:start="205:35" pos:end="205:41"><expr pos:start="205:35" pos:end="205:41"><literal type="string" pos:start="205:35" pos:end="205:41">"trans"</literal></expr></argument>)</argument_list></call><operator pos:start="205:43" pos:end="205:43">)</operator> <operator pos:start="205:45" pos:end="205:46">!=</operator> <name pos:start="205:48" pos:end="205:51">NULL</name></expr>)</condition> <block pos:start="205:54" pos:end="237:5">{<block_content pos:start="207:9" pos:end="235:9">

        <if_stmt pos:start="207:9" pos:end="215:9"><if pos:start="207:9" pos:end="215:9">if <condition pos:start="207:12" pos:end="207:18">(<expr pos:start="207:13" pos:end="207:17"><operator pos:start="207:13" pos:end="207:13">!</operator><name pos:start="207:14" pos:end="207:17">cyls</name></expr>)</condition> <block pos:start="207:20" pos:end="215:9">{<block_content pos:start="209:13" pos:end="213:24">

            <expr_stmt pos:start="209:13" pos:end="211:30"><expr pos:start="209:13" pos:end="211:29"><call pos:start="209:13" pos:end="211:29"><name pos:start="209:13" pos:end="209:24">error_report</name><argument_list pos:start="209:25" pos:end="211:29">(<argument pos:start="209:26" pos:end="209:75"><expr pos:start="209:26" pos:end="209:75"><literal type="string" pos:start="209:26" pos:end="209:75">"'%s' trans must be used with cyls,heads and secs"</literal></expr></argument>,

                         <argument pos:start="211:26" pos:end="211:28"><expr pos:start="211:26" pos:end="211:28"><name pos:start="211:26" pos:end="211:28">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="213:13" pos:end="213:24">return <expr pos:start="213:20" pos:end="213:23"><name pos:start="213:20" pos:end="213:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="217:9" pos:end="235:9"><if pos:start="217:9" pos:end="219:52">if <condition pos:start="217:12" pos:end="217:33">(<expr pos:start="217:13" pos:end="217:32"><operator pos:start="217:13" pos:end="217:13">!</operator><call pos:start="217:14" pos:end="217:32"><name pos:start="217:14" pos:end="217:19">strcmp</name><argument_list pos:start="217:20" pos:end="217:32">(<argument pos:start="217:21" pos:end="217:23"><expr pos:start="217:21" pos:end="217:23"><name pos:start="217:21" pos:end="217:23">buf</name></expr></argument>, <argument pos:start="217:26" pos:end="217:31"><expr pos:start="217:26" pos:end="217:31"><literal type="string" pos:start="217:26" pos:end="217:31">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="219:13" pos:end="219:52"><block_content pos:start="219:13" pos:end="219:52">

            <expr_stmt pos:start="219:13" pos:end="219:52"><expr pos:start="219:13" pos:end="219:51"><name pos:start="219:13" pos:end="219:23">translation</name> <operator pos:start="219:25" pos:end="219:25">=</operator> <name pos:start="219:27" pos:end="219:51">BIOS_ATA_TRANSLATION_NONE</name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="221:9" pos:end="223:51">else if <condition pos:start="221:17" pos:end="221:37">(<expr pos:start="221:18" pos:end="221:36"><operator pos:start="221:18" pos:end="221:18">!</operator><call pos:start="221:19" pos:end="221:36"><name pos:start="221:19" pos:end="221:24">strcmp</name><argument_list pos:start="221:25" pos:end="221:36">(<argument pos:start="221:26" pos:end="221:28"><expr pos:start="221:26" pos:end="221:28"><name pos:start="221:26" pos:end="221:28">buf</name></expr></argument>, <argument pos:start="221:31" pos:end="221:35"><expr pos:start="221:31" pos:end="221:35"><literal type="string" pos:start="221:31" pos:end="221:35">"lba"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="223:13" pos:end="223:51"><block_content pos:start="223:13" pos:end="223:51">

            <expr_stmt pos:start="223:13" pos:end="223:51"><expr pos:start="223:13" pos:end="223:50"><name pos:start="223:13" pos:end="223:23">translation</name> <operator pos:start="223:25" pos:end="223:25">=</operator> <name pos:start="223:27" pos:end="223:50">BIOS_ATA_TRANSLATION_LBA</name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="225:9" pos:end="227:52">else if <condition pos:start="225:17" pos:end="225:38">(<expr pos:start="225:18" pos:end="225:37"><operator pos:start="225:18" pos:end="225:18">!</operator><call pos:start="225:19" pos:end="225:37"><name pos:start="225:19" pos:end="225:24">strcmp</name><argument_list pos:start="225:25" pos:end="225:37">(<argument pos:start="225:26" pos:end="225:28"><expr pos:start="225:26" pos:end="225:28"><name pos:start="225:26" pos:end="225:28">buf</name></expr></argument>, <argument pos:start="225:31" pos:end="225:36"><expr pos:start="225:31" pos:end="225:36"><literal type="string" pos:start="225:31" pos:end="225:36">"auto"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="227:13" pos:end="227:52"><block_content pos:start="227:13" pos:end="227:52">

            <expr_stmt pos:start="227:13" pos:end="227:52"><expr pos:start="227:13" pos:end="227:51"><name pos:start="227:13" pos:end="227:23">translation</name> <operator pos:start="227:25" pos:end="227:25">=</operator> <name pos:start="227:27" pos:end="227:51">BIOS_ATA_TRANSLATION_AUTO</name></expr>;</expr_stmt></block_content></block></if>

	<else pos:start="229:9" pos:end="235:9">else <block pos:start="229:14" pos:end="235:9">{<block_content pos:start="231:13" pos:end="233:24">

            <expr_stmt pos:start="231:13" pos:end="231:63"><expr pos:start="231:13" pos:end="231:62"><call pos:start="231:13" pos:end="231:62"><name pos:start="231:13" pos:end="231:24">error_report</name><argument_list pos:start="231:25" pos:end="231:62">(<argument pos:start="231:26" pos:end="231:56"><expr pos:start="231:26" pos:end="231:56"><literal type="string" pos:start="231:26" pos:end="231:56">"'%s' invalid translation type"</literal></expr></argument>, <argument pos:start="231:59" pos:end="231:61"><expr pos:start="231:59" pos:end="231:61"><name pos:start="231:59" pos:end="231:61">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="233:13" pos:end="233:24">return <expr pos:start="233:20" pos:end="233:23"><name pos:start="233:20" pos:end="233:23">NULL</name></expr>;</return>

	</block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="241:5" pos:end="267:5"><if pos:start="241:5" pos:end="267:5">if <condition pos:start="241:8" pos:end="241:52">(<expr pos:start="241:9" pos:end="241:51"><operator pos:start="241:9" pos:end="241:9">(</operator><name pos:start="241:10" pos:end="241:12">buf</name> <operator pos:start="241:14" pos:end="241:14">=</operator> <call pos:start="241:16" pos:end="241:42"><name pos:start="241:16" pos:end="241:27">qemu_opt_get</name><argument_list pos:start="241:28" pos:end="241:42">(<argument pos:start="241:29" pos:end="241:32"><expr pos:start="241:29" pos:end="241:32"><name pos:start="241:29" pos:end="241:32">opts</name></expr></argument>, <argument pos:start="241:35" pos:end="241:41"><expr pos:start="241:35" pos:end="241:41"><literal type="string" pos:start="241:35" pos:end="241:41">"media"</literal></expr></argument>)</argument_list></call><operator pos:start="241:43" pos:end="241:43">)</operator> <operator pos:start="241:45" pos:end="241:46">!=</operator> <name pos:start="241:48" pos:end="241:51">NULL</name></expr>)</condition> <block pos:start="241:54" pos:end="267:5">{<block_content pos:start="243:9" pos:end="265:9">

        <if_stmt pos:start="243:9" pos:end="265:9"><if pos:start="243:9" pos:end="247:9">if <condition pos:start="243:12" pos:end="243:33">(<expr pos:start="243:13" pos:end="243:32"><operator pos:start="243:13" pos:end="243:13">!</operator><call pos:start="243:14" pos:end="243:32"><name pos:start="243:14" pos:end="243:19">strcmp</name><argument_list pos:start="243:20" pos:end="243:32">(<argument pos:start="243:21" pos:end="243:23"><expr pos:start="243:21" pos:end="243:23"><name pos:start="243:21" pos:end="243:23">buf</name></expr></argument>, <argument pos:start="243:26" pos:end="243:31"><expr pos:start="243:26" pos:end="243:31"><literal type="string" pos:start="243:26" pos:end="243:31">"disk"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="243:35" pos:end="247:9">{<block_content pos:start="245:13" pos:end="245:31">

	    <expr_stmt pos:start="245:13" pos:end="245:31"><expr pos:start="245:13" pos:end="245:30"><name pos:start="245:13" pos:end="245:17">media</name> <operator pos:start="245:19" pos:end="245:19">=</operator> <name pos:start="245:21" pos:end="245:30">MEDIA_DISK</name></expr>;</expr_stmt>

	</block_content>}</block></if> <if type="elseif" pos:start="247:11" pos:end="259:9">else if <condition pos:start="247:19" pos:end="247:41">(<expr pos:start="247:20" pos:end="247:40"><operator pos:start="247:20" pos:end="247:20">!</operator><call pos:start="247:21" pos:end="247:40"><name pos:start="247:21" pos:end="247:26">strcmp</name><argument_list pos:start="247:27" pos:end="247:40">(<argument pos:start="247:28" pos:end="247:30"><expr pos:start="247:28" pos:end="247:30"><name pos:start="247:28" pos:end="247:30">buf</name></expr></argument>, <argument pos:start="247:33" pos:end="247:39"><expr pos:start="247:33" pos:end="247:39"><literal type="string" pos:start="247:33" pos:end="247:39">"cdrom"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="247:43" pos:end="259:9">{<block_content pos:start="249:13" pos:end="257:32">

            <if_stmt pos:start="249:13" pos:end="255:13"><if pos:start="249:13" pos:end="255:13">if <condition pos:start="249:16" pos:end="249:38">(<expr pos:start="249:17" pos:end="249:37"><name pos:start="249:17" pos:end="249:20">cyls</name> <operator pos:start="249:22" pos:end="249:23">||</operator> <name pos:start="249:25" pos:end="249:28">secs</name> <operator pos:start="249:30" pos:end="249:31">||</operator> <name pos:start="249:33" pos:end="249:37">heads</name></expr>)</condition> <block pos:start="249:40" pos:end="255:13">{<block_content pos:start="251:17" pos:end="253:28">

                <expr_stmt pos:start="251:17" pos:end="251:70"><expr pos:start="251:17" pos:end="251:69"><call pos:start="251:17" pos:end="251:69"><name pos:start="251:17" pos:end="251:28">error_report</name><argument_list pos:start="251:29" pos:end="251:69">(<argument pos:start="251:30" pos:end="251:63"><expr pos:start="251:30" pos:end="251:63"><literal type="string" pos:start="251:30" pos:end="251:63">"'%s' invalid physical CHS format"</literal></expr></argument>, <argument pos:start="251:66" pos:end="251:68"><expr pos:start="251:66" pos:end="251:68"><name pos:start="251:66" pos:end="251:68">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	        <return pos:start="253:17" pos:end="253:28">return <expr pos:start="253:24" pos:end="253:27"><name pos:start="253:24" pos:end="253:27">NULL</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

	    <expr_stmt pos:start="257:13" pos:end="257:32"><expr pos:start="257:13" pos:end="257:31"><name pos:start="257:13" pos:end="257:17">media</name> <operator pos:start="257:19" pos:end="257:19">=</operator> <name pos:start="257:21" pos:end="257:31">MEDIA_CDROM</name></expr>;</expr_stmt>

	</block_content>}</block></if> <else pos:start="259:11" pos:end="265:9">else <block pos:start="259:16" pos:end="265:9">{<block_content pos:start="261:13" pos:end="263:24">

	    <expr_stmt pos:start="261:13" pos:end="261:52"><expr pos:start="261:13" pos:end="261:51"><call pos:start="261:13" pos:end="261:51"><name pos:start="261:13" pos:end="261:24">error_report</name><argument_list pos:start="261:25" pos:end="261:51">(<argument pos:start="261:26" pos:end="261:45"><expr pos:start="261:26" pos:end="261:45"><literal type="string" pos:start="261:26" pos:end="261:45">"'%s' invalid media"</literal></expr></argument>, <argument pos:start="261:48" pos:end="261:50"><expr pos:start="261:48" pos:end="261:50"><name pos:start="261:48" pos:end="261:50">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="263:13" pos:end="263:24">return <expr pos:start="263:20" pos:end="263:23"><name pos:start="263:20" pos:end="263:23">NULL</name></expr>;</return>

	</block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="271:5" pos:end="304:0"><if pos:start="271:5" pos:end="304:0">if <condition pos:start="271:8" pos:end="271:52">(<expr pos:start="271:9" pos:end="271:51"><operator pos:start="271:9" pos:end="271:9">(</operator><name pos:start="271:10" pos:end="271:12">buf</name> <operator pos:start="271:14" pos:end="271:14">=</operator> <call pos:start="271:16" pos:end="271:42"><name pos:start="271:16" pos:end="271:27">qemu_opt_get</name><argument_list pos:start="271:28" pos:end="271:42">(<argument pos:start="271:29" pos:end="271:32"><expr pos:start="271:29" pos:end="271:32"><name pos:start="271:29" pos:end="271:32">opts</name></expr></argument>, <argument pos:start="271:35" pos:end="271:41"><expr pos:start="271:35" pos:end="271:41"><literal type="string" pos:start="271:35" pos:end="271:41">"cache"</literal></expr></argument>)</argument_list></call><operator pos:start="271:43" pos:end="271:43">)</operator> <operator pos:start="271:45" pos:end="271:46">!=</operator> <name pos:start="271:48" pos:end="271:51">NULL</name></expr>)</condition> <block pos:start="271:54" pos:end="304:0">{<block_content pos:start="273:9" pos:end="297:9">

        <if_stmt pos:start="273:9" pos:end="297:9"><if pos:start="273:9" pos:end="277:9">if <condition pos:start="273:12" pos:end="273:56">(<expr pos:start="273:13" pos:end="273:55"><operator pos:start="273:13" pos:end="273:13">!</operator><call pos:start="273:14" pos:end="273:31"><name pos:start="273:14" pos:end="273:19">strcmp</name><argument_list pos:start="273:20" pos:end="273:31">(<argument pos:start="273:21" pos:end="273:23"><expr pos:start="273:21" pos:end="273:23"><name pos:start="273:21" pos:end="273:23">buf</name></expr></argument>, <argument pos:start="273:26" pos:end="273:30"><expr pos:start="273:26" pos:end="273:30"><literal type="string" pos:start="273:26" pos:end="273:30">"off"</literal></expr></argument>)</argument_list></call> <operator pos:start="273:33" pos:end="273:34">||</operator> <operator pos:start="273:36" pos:end="273:36">!</operator><call pos:start="273:37" pos:end="273:55"><name pos:start="273:37" pos:end="273:42">strcmp</name><argument_list pos:start="273:43" pos:end="273:55">(<argument pos:start="273:44" pos:end="273:46"><expr pos:start="273:44" pos:end="273:46"><name pos:start="273:44" pos:end="273:46">buf</name></expr></argument>, <argument pos:start="273:49" pos:end="273:54"><expr pos:start="273:49" pos:end="273:54"><literal type="string" pos:start="273:49" pos:end="273:54">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="273:58" pos:end="277:9">{<block_content pos:start="275:13" pos:end="275:41">

            <expr_stmt pos:start="275:13" pos:end="275:41"><expr pos:start="275:13" pos:end="275:40"><name pos:start="275:13" pos:end="275:22">bdrv_flags</name> <operator pos:start="275:24" pos:end="275:25">|=</operator> <name pos:start="275:27" pos:end="275:40">BDRV_O_NOCACHE</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="277:11" pos:end="281:9">else if <condition pos:start="277:19" pos:end="277:45">(<expr pos:start="277:20" pos:end="277:44"><operator pos:start="277:20" pos:end="277:20">!</operator><call pos:start="277:21" pos:end="277:44"><name pos:start="277:21" pos:end="277:26">strcmp</name><argument_list pos:start="277:27" pos:end="277:44">(<argument pos:start="277:28" pos:end="277:30"><expr pos:start="277:28" pos:end="277:30"><name pos:start="277:28" pos:end="277:30">buf</name></expr></argument>, <argument pos:start="277:33" pos:end="277:43"><expr pos:start="277:33" pos:end="277:43"><literal type="string" pos:start="277:33" pos:end="277:43">"writeback"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="277:47" pos:end="281:9">{<block_content pos:start="279:13" pos:end="279:42">

            <expr_stmt pos:start="279:13" pos:end="279:42"><expr pos:start="279:13" pos:end="279:41"><name pos:start="279:13" pos:end="279:22">bdrv_flags</name> <operator pos:start="279:24" pos:end="279:25">|=</operator> <name pos:start="279:27" pos:end="279:41">BDRV_O_CACHE_WB</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="281:11" pos:end="287:9">else if <condition pos:start="281:19" pos:end="281:42">(<expr pos:start="281:20" pos:end="281:41"><operator pos:start="281:20" pos:end="281:20">!</operator><call pos:start="281:21" pos:end="281:41"><name pos:start="281:21" pos:end="281:26">strcmp</name><argument_list pos:start="281:27" pos:end="281:41">(<argument pos:start="281:28" pos:end="281:30"><expr pos:start="281:28" pos:end="281:30"><name pos:start="281:28" pos:end="281:30">buf</name></expr></argument>, <argument pos:start="281:33" pos:end="281:40"><expr pos:start="281:33" pos:end="281:40"><literal type="string" pos:start="281:33" pos:end="281:40">"unsafe"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="281:44" pos:end="287:9">{<block_content pos:start="283:13" pos:end="285:42">

            <expr_stmt pos:start="283:13" pos:end="283:42"><expr pos:start="283:13" pos:end="283:41"><name pos:start="283:13" pos:end="283:22">bdrv_flags</name> <operator pos:start="283:24" pos:end="283:25">|=</operator> <name pos:start="283:27" pos:end="283:41">BDRV_O_CACHE_WB</name></expr>;</expr_stmt>

            <expr_stmt pos:start="285:13" pos:end="285:42"><expr pos:start="285:13" pos:end="285:41"><name pos:start="285:13" pos:end="285:22">bdrv_flags</name> <operator pos:start="285:24" pos:end="285:25">|=</operator> <name pos:start="285:27" pos:end="285:41">BDRV_O_NO_FLUSH</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="287:11" pos:end="291:9">else if <condition pos:start="287:19" pos:end="287:48">(<expr pos:start="287:20" pos:end="287:47"><operator pos:start="287:20" pos:end="287:20">!</operator><call pos:start="287:21" pos:end="287:47"><name pos:start="287:21" pos:end="287:26">strcmp</name><argument_list pos:start="287:27" pos:end="287:47">(<argument pos:start="287:28" pos:end="287:30"><expr pos:start="287:28" pos:end="287:30"><name pos:start="287:28" pos:end="287:30">buf</name></expr></argument>, <argument pos:start="287:33" pos:end="287:46"><expr pos:start="287:33" pos:end="287:46"><literal type="string" pos:start="287:33" pos:end="287:46">"writethrough"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="287:50" pos:end="291:9">{<block_content>

            <comment type="block" pos:start="289:13" pos:end="289:37">/* this is the default */</comment>

        </block_content>}</block></if> <else pos:start="291:11" pos:end="297:9">else <block pos:start="291:16" pos:end="297:9">{<block_content pos:start="293:12" pos:end="295:23">

           <expr_stmt pos:start="293:12" pos:end="293:48"><expr pos:start="293:12" pos:end="293:47"><call pos:start="293:12" pos:end="293:47"><name pos:start="293:12" pos:end="293:23">error_report</name><argument_list pos:start="293:24" pos:end="293:47">(<argument pos:start="293:25" pos:end="293:46"><expr pos:start="293:25" pos:end="293:46"><literal type="string" pos:start="293:25" pos:end="293:46">"invalid cache option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <return pos:start="295:12" pos:end="295:23">return <expr pos:start="295:19" pos:end="295:22"><name pos:start="295:19" pos:end="295:22">NULL</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="303:1" pos:end="303:23">#<cpp:directive pos:start="303:2" pos:end="303:6">ifdef</cpp:directive> <name pos:start="303:8" pos:end="303:23">CONFIG_LINUX_AIO</name></cpp:ifdef>

    <if_stmt pos:start="305:5" pos:end="326:0"><if pos:start="305:5" pos:end="326:0">if <condition pos:start="305:8" pos:end="305:50">(<expr pos:start="305:9" pos:end="305:49"><operator pos:start="305:9" pos:end="305:9">(</operator><name pos:start="305:10" pos:end="305:12">buf</name> <operator pos:start="305:14" pos:end="305:14">=</operator> <call pos:start="305:16" pos:end="305:40"><name pos:start="305:16" pos:end="305:27">qemu_opt_get</name><argument_list pos:start="305:28" pos:end="305:40">(<argument pos:start="305:29" pos:end="305:32"><expr pos:start="305:29" pos:end="305:32"><name pos:start="305:29" pos:end="305:32">opts</name></expr></argument>, <argument pos:start="305:35" pos:end="305:39"><expr pos:start="305:35" pos:end="305:39"><literal type="string" pos:start="305:35" pos:end="305:39">"aio"</literal></expr></argument>)</argument_list></call><operator pos:start="305:41" pos:end="305:41">)</operator> <operator pos:start="305:43" pos:end="305:44">!=</operator> <name pos:start="305:46" pos:end="305:49">NULL</name></expr>)</condition> <block pos:start="305:52" pos:end="326:0">{<block_content pos:start="307:9" pos:end="321:9">

        <if_stmt pos:start="307:9" pos:end="321:9"><if pos:start="307:9" pos:end="311:9">if <condition pos:start="307:12" pos:end="307:35">(<expr pos:start="307:13" pos:end="307:34"><operator pos:start="307:13" pos:end="307:13">!</operator><call pos:start="307:14" pos:end="307:34"><name pos:start="307:14" pos:end="307:19">strcmp</name><argument_list pos:start="307:20" pos:end="307:34">(<argument pos:start="307:21" pos:end="307:23"><expr pos:start="307:21" pos:end="307:23"><name pos:start="307:21" pos:end="307:23">buf</name></expr></argument>, <argument pos:start="307:26" pos:end="307:33"><expr pos:start="307:26" pos:end="307:33"><literal type="string" pos:start="307:26" pos:end="307:33">"native"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="307:37" pos:end="311:9">{<block_content pos:start="309:13" pos:end="309:44">

            <expr_stmt pos:start="309:13" pos:end="309:44"><expr pos:start="309:13" pos:end="309:43"><name pos:start="309:13" pos:end="309:22">bdrv_flags</name> <operator pos:start="309:24" pos:end="309:25">|=</operator> <name pos:start="309:27" pos:end="309:43">BDRV_O_NATIVE_AIO</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="311:11" pos:end="315:9">else if <condition pos:start="311:19" pos:end="311:43">(<expr pos:start="311:20" pos:end="311:42"><operator pos:start="311:20" pos:end="311:20">!</operator><call pos:start="311:21" pos:end="311:42"><name pos:start="311:21" pos:end="311:26">strcmp</name><argument_list pos:start="311:27" pos:end="311:42">(<argument pos:start="311:28" pos:end="311:30"><expr pos:start="311:28" pos:end="311:30"><name pos:start="311:28" pos:end="311:30">buf</name></expr></argument>, <argument pos:start="311:33" pos:end="311:41"><expr pos:start="311:33" pos:end="311:41"><literal type="string" pos:start="311:33" pos:end="311:41">"threads"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="311:45" pos:end="315:9">{<block_content>

            <comment type="block" pos:start="313:13" pos:end="313:37">/* this is the default */</comment>

        </block_content>}</block></if> <else pos:start="315:11" pos:end="321:9">else <block pos:start="315:16" pos:end="321:9">{<block_content pos:start="317:12" pos:end="319:23">

           <expr_stmt pos:start="317:12" pos:end="317:46"><expr pos:start="317:12" pos:end="317:45"><call pos:start="317:12" pos:end="317:45"><name pos:start="317:12" pos:end="317:23">error_report</name><argument_list pos:start="317:24" pos:end="317:45">(<argument pos:start="317:25" pos:end="317:44"><expr pos:start="317:25" pos:end="317:44"><literal type="string" pos:start="317:25" pos:end="317:44">"invalid aio option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <return pos:start="319:12" pos:end="319:23">return <expr pos:start="319:19" pos:end="319:22"><name pos:start="319:19" pos:end="319:22">NULL</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="325:1" pos:end="325:6">#<cpp:directive pos:start="325:2" pos:end="325:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="329:5" pos:end="353:5"><if pos:start="329:5" pos:end="353:5">if <condition pos:start="329:8" pos:end="329:53">(<expr pos:start="329:9" pos:end="329:52"><operator pos:start="329:9" pos:end="329:9">(</operator><name pos:start="329:10" pos:end="329:12">buf</name> <operator pos:start="329:14" pos:end="329:14">=</operator> <call pos:start="329:16" pos:end="329:43"><name pos:start="329:16" pos:end="329:27">qemu_opt_get</name><argument_list pos:start="329:28" pos:end="329:43">(<argument pos:start="329:29" pos:end="329:32"><expr pos:start="329:29" pos:end="329:32"><name pos:start="329:29" pos:end="329:32">opts</name></expr></argument>, <argument pos:start="329:35" pos:end="329:42"><expr pos:start="329:35" pos:end="329:42"><literal type="string" pos:start="329:35" pos:end="329:42">"format"</literal></expr></argument>)</argument_list></call><operator pos:start="329:44" pos:end="329:44">)</operator> <operator pos:start="329:46" pos:end="329:47">!=</operator> <name pos:start="329:49" pos:end="329:52">NULL</name></expr>)</condition> <block pos:start="329:55" pos:end="353:5">{<block_content pos:start="331:8" pos:end="351:9">

       <if_stmt pos:start="331:8" pos:end="341:9"><if pos:start="331:8" pos:end="341:9">if <condition pos:start="331:11" pos:end="331:33">(<expr pos:start="331:12" pos:end="331:32"><call pos:start="331:12" pos:end="331:27"><name pos:start="331:12" pos:end="331:17">strcmp</name><argument_list pos:start="331:18" pos:end="331:27">(<argument pos:start="331:19" pos:end="331:21"><expr pos:start="331:19" pos:end="331:21"><name pos:start="331:19" pos:end="331:21">buf</name></expr></argument>, <argument pos:start="331:24" pos:end="331:26"><expr pos:start="331:24" pos:end="331:26"><literal type="string" pos:start="331:24" pos:end="331:26">"?"</literal></expr></argument>)</argument_list></call> <operator pos:start="331:29" pos:end="331:30">==</operator> <literal type="number" pos:start="331:32" pos:end="331:32">0</literal></expr>)</condition> <block pos:start="331:35" pos:end="341:9">{<block_content pos:start="333:12" pos:end="339:23">

           <expr_stmt pos:start="333:12" pos:end="333:46"><expr pos:start="333:12" pos:end="333:45"><call pos:start="333:12" pos:end="333:45"><name pos:start="333:12" pos:end="333:23">error_printf</name><argument_list pos:start="333:24" pos:end="333:45">(<argument pos:start="333:25" pos:end="333:44"><expr pos:start="333:25" pos:end="333:44"><literal type="string" pos:start="333:25" pos:end="333:44">"Supported formats:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <expr_stmt pos:start="335:12" pos:end="335:56"><expr pos:start="335:12" pos:end="335:55"><call pos:start="335:12" pos:end="335:55"><name pos:start="335:12" pos:end="335:30">bdrv_iterate_format</name><argument_list pos:start="335:31" pos:end="335:55">(<argument pos:start="335:32" pos:end="335:48"><expr pos:start="335:32" pos:end="335:48"><name pos:start="335:32" pos:end="335:48">bdrv_format_print</name></expr></argument>, <argument pos:start="335:51" pos:end="335:54"><expr pos:start="335:51" pos:end="335:54"><name pos:start="335:51" pos:end="335:54">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <expr_stmt pos:start="337:12" pos:end="337:30"><expr pos:start="337:12" pos:end="337:29"><call pos:start="337:12" pos:end="337:29"><name pos:start="337:12" pos:end="337:23">error_printf</name><argument_list pos:start="337:24" pos:end="337:29">(<argument pos:start="337:25" pos:end="337:28"><expr pos:start="337:25" pos:end="337:28"><literal type="string" pos:start="337:25" pos:end="337:28">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <return pos:start="339:12" pos:end="339:23">return <expr pos:start="339:19" pos:end="339:22"><name pos:start="339:19" pos:end="339:22">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="343:9" pos:end="343:48"><expr pos:start="343:9" pos:end="343:47"><name pos:start="343:9" pos:end="343:11">drv</name> <operator pos:start="343:13" pos:end="343:13">=</operator> <call pos:start="343:15" pos:end="343:47"><name pos:start="343:15" pos:end="343:42">bdrv_find_whitelisted_format</name><argument_list pos:start="343:43" pos:end="343:47">(<argument pos:start="343:44" pos:end="343:46"><expr pos:start="343:44" pos:end="343:46"><name pos:start="343:44" pos:end="343:46">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="345:9" pos:end="351:9"><if pos:start="345:9" pos:end="351:9">if <condition pos:start="345:12" pos:end="345:17">(<expr pos:start="345:13" pos:end="345:16"><operator pos:start="345:13" pos:end="345:13">!</operator><name pos:start="345:14" pos:end="345:16">drv</name></expr>)</condition> <block pos:start="345:19" pos:end="351:9">{<block_content pos:start="347:13" pos:end="349:24">

            <expr_stmt pos:start="347:13" pos:end="347:53"><expr pos:start="347:13" pos:end="347:52"><call pos:start="347:13" pos:end="347:52"><name pos:start="347:13" pos:end="347:24">error_report</name><argument_list pos:start="347:25" pos:end="347:52">(<argument pos:start="347:26" pos:end="347:46"><expr pos:start="347:26" pos:end="347:46"><literal type="string" pos:start="347:26" pos:end="347:46">"'%s' invalid format"</literal></expr></argument>, <argument pos:start="347:49" pos:end="347:51"><expr pos:start="347:49" pos:end="347:51"><name pos:start="347:49" pos:end="347:51">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="349:13" pos:end="349:24">return <expr pos:start="349:20" pos:end="349:23"><name pos:start="349:20" pos:end="349:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="357:5" pos:end="357:43"><expr pos:start="357:5" pos:end="357:42"><name pos:start="357:5" pos:end="357:18">on_write_error</name> <operator pos:start="357:20" pos:end="357:20">=</operator> <name pos:start="357:22" pos:end="357:42">BLOCK_ERR_STOP_ENOSPC</name></expr>;</expr_stmt>

    <if_stmt pos:start="359:5" pos:end="379:5"><if pos:start="359:5" pos:end="379:5">if <condition pos:start="359:8" pos:end="359:53">(<expr pos:start="359:9" pos:end="359:52"><operator pos:start="359:9" pos:end="359:9">(</operator><name pos:start="359:10" pos:end="359:12">buf</name> <operator pos:start="359:14" pos:end="359:14">=</operator> <call pos:start="359:16" pos:end="359:43"><name pos:start="359:16" pos:end="359:27">qemu_opt_get</name><argument_list pos:start="359:28" pos:end="359:43">(<argument pos:start="359:29" pos:end="359:32"><expr pos:start="359:29" pos:end="359:32"><name pos:start="359:29" pos:end="359:32">opts</name></expr></argument>, <argument pos:start="359:35" pos:end="359:42"><expr pos:start="359:35" pos:end="359:42"><literal type="string" pos:start="359:35" pos:end="359:42">"werror"</literal></expr></argument>)</argument_list></call><operator pos:start="359:44" pos:end="359:44">)</operator> <operator pos:start="359:46" pos:end="359:47">!=</operator> <name pos:start="359:49" pos:end="359:52">NULL</name></expr>)</condition> <block pos:start="359:55" pos:end="379:5">{<block_content pos:start="361:9" pos:end="377:9">

        <if_stmt pos:start="361:9" pos:end="367:9"><if pos:start="361:9" pos:end="367:9">if <condition pos:start="361:12" pos:end="361:86">(<expr pos:start="361:13" pos:end="361:85"><name pos:start="361:13" pos:end="361:16">type</name> <operator pos:start="361:18" pos:end="361:19">!=</operator> <name pos:start="361:21" pos:end="361:26">IF_IDE</name> <operator pos:start="361:28" pos:end="361:29">&amp;&amp;</operator> <name pos:start="361:31" pos:end="361:34">type</name> <operator pos:start="361:36" pos:end="361:37">!=</operator> <name pos:start="361:39" pos:end="361:45">IF_SCSI</name> <operator pos:start="361:47" pos:end="361:48">&amp;&amp;</operator> <name pos:start="361:50" pos:end="361:53">type</name> <operator pos:start="361:55" pos:end="361:56">!=</operator> <name pos:start="361:58" pos:end="361:66">IF_VIRTIO</name> <operator pos:start="361:68" pos:end="361:69">&amp;&amp;</operator> <name pos:start="361:71" pos:end="361:74">type</name> <operator pos:start="361:76" pos:end="361:77">!=</operator> <name pos:start="361:79" pos:end="361:85">IF_NONE</name></expr>)</condition> <block pos:start="361:88" pos:end="367:9">{<block_content pos:start="363:13" pos:end="365:24">

            <expr_stmt pos:start="363:13" pos:end="363:69"><expr pos:start="363:13" pos:end="363:68"><call pos:start="363:13" pos:end="363:68"><name pos:start="363:13" pos:end="363:24">error_report</name><argument_list pos:start="363:25" pos:end="363:68">(<argument pos:start="363:26" pos:end="363:67"><expr pos:start="363:26" pos:end="363:67"><literal type="string" pos:start="363:26" pos:end="363:67">"werror is not supported by this bus type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="365:13" pos:end="365:24">return <expr pos:start="365:20" pos:end="365:23"><name pos:start="365:20" pos:end="365:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="371:9" pos:end="371:58"><expr pos:start="371:9" pos:end="371:57"><name pos:start="371:9" pos:end="371:22">on_write_error</name> <operator pos:start="371:24" pos:end="371:24">=</operator> <call pos:start="371:26" pos:end="371:57"><name pos:start="371:26" pos:end="371:49">parse_block_error_action</name><argument_list pos:start="371:50" pos:end="371:57">(<argument pos:start="371:51" pos:end="371:53"><expr pos:start="371:51" pos:end="371:53"><name pos:start="371:51" pos:end="371:53">buf</name></expr></argument>, <argument pos:start="371:56" pos:end="371:56"><expr pos:start="371:56" pos:end="371:56"><literal type="number" pos:start="371:56" pos:end="371:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="373:9" pos:end="377:9"><if pos:start="373:9" pos:end="377:9">if <condition pos:start="373:12" pos:end="373:31">(<expr pos:start="373:13" pos:end="373:30"><name pos:start="373:13" pos:end="373:26">on_write_error</name> <operator pos:start="373:28" pos:end="373:28">&lt;</operator> <literal type="number" pos:start="373:30" pos:end="373:30">0</literal></expr>)</condition> <block pos:start="373:33" pos:end="377:9">{<block_content pos:start="375:13" pos:end="375:24">

            <return pos:start="375:13" pos:end="375:24">return <expr pos:start="375:20" pos:end="375:23"><name pos:start="375:20" pos:end="375:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="383:5" pos:end="383:37"><expr pos:start="383:5" pos:end="383:36"><name pos:start="383:5" pos:end="383:17">on_read_error</name> <operator pos:start="383:19" pos:end="383:19">=</operator> <name pos:start="383:21" pos:end="383:36">BLOCK_ERR_REPORT</name></expr>;</expr_stmt>

    <if_stmt pos:start="385:5" pos:end="405:5"><if pos:start="385:5" pos:end="405:5">if <condition pos:start="385:8" pos:end="385:53">(<expr pos:start="385:9" pos:end="385:52"><operator pos:start="385:9" pos:end="385:9">(</operator><name pos:start="385:10" pos:end="385:12">buf</name> <operator pos:start="385:14" pos:end="385:14">=</operator> <call pos:start="385:16" pos:end="385:43"><name pos:start="385:16" pos:end="385:27">qemu_opt_get</name><argument_list pos:start="385:28" pos:end="385:43">(<argument pos:start="385:29" pos:end="385:32"><expr pos:start="385:29" pos:end="385:32"><name pos:start="385:29" pos:end="385:32">opts</name></expr></argument>, <argument pos:start="385:35" pos:end="385:42"><expr pos:start="385:35" pos:end="385:42"><literal type="string" pos:start="385:35" pos:end="385:42">"rerror"</literal></expr></argument>)</argument_list></call><operator pos:start="385:44" pos:end="385:44">)</operator> <operator pos:start="385:46" pos:end="385:47">!=</operator> <name pos:start="385:49" pos:end="385:52">NULL</name></expr>)</condition> <block pos:start="385:55" pos:end="405:5">{<block_content pos:start="387:9" pos:end="403:9">

        <if_stmt pos:start="387:9" pos:end="393:9"><if pos:start="387:9" pos:end="393:9">if <condition pos:start="387:12" pos:end="387:86">(<expr pos:start="387:13" pos:end="387:85"><name pos:start="387:13" pos:end="387:16">type</name> <operator pos:start="387:18" pos:end="387:19">!=</operator> <name pos:start="387:21" pos:end="387:26">IF_IDE</name> <operator pos:start="387:28" pos:end="387:29">&amp;&amp;</operator> <name pos:start="387:31" pos:end="387:34">type</name> <operator pos:start="387:36" pos:end="387:37">!=</operator> <name pos:start="387:39" pos:end="387:47">IF_VIRTIO</name> <operator pos:start="387:49" pos:end="387:50">&amp;&amp;</operator> <name pos:start="387:52" pos:end="387:55">type</name> <operator pos:start="387:57" pos:end="387:58">!=</operator> <name pos:start="387:60" pos:end="387:66">IF_SCSI</name> <operator pos:start="387:68" pos:end="387:69">&amp;&amp;</operator> <name pos:start="387:71" pos:end="387:74">type</name> <operator pos:start="387:76" pos:end="387:77">!=</operator> <name pos:start="387:79" pos:end="387:85">IF_NONE</name></expr>)</condition> <block pos:start="387:88" pos:end="393:9">{<block_content pos:start="389:13" pos:end="391:24">

            <expr_stmt pos:start="389:13" pos:end="389:69"><expr pos:start="389:13" pos:end="389:68"><call pos:start="389:13" pos:end="389:68"><name pos:start="389:13" pos:end="389:24">error_report</name><argument_list pos:start="389:25" pos:end="389:68">(<argument pos:start="389:26" pos:end="389:67"><expr pos:start="389:26" pos:end="389:67"><literal type="string" pos:start="389:26" pos:end="389:67">"rerror is not supported by this bus type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="391:13" pos:end="391:24">return <expr pos:start="391:20" pos:end="391:23"><name pos:start="391:20" pos:end="391:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="397:9" pos:end="397:57"><expr pos:start="397:9" pos:end="397:56"><name pos:start="397:9" pos:end="397:21">on_read_error</name> <operator pos:start="397:23" pos:end="397:23">=</operator> <call pos:start="397:25" pos:end="397:56"><name pos:start="397:25" pos:end="397:48">parse_block_error_action</name><argument_list pos:start="397:49" pos:end="397:56">(<argument pos:start="397:50" pos:end="397:52"><expr pos:start="397:50" pos:end="397:52"><name pos:start="397:50" pos:end="397:52">buf</name></expr></argument>, <argument pos:start="397:55" pos:end="397:55"><expr pos:start="397:55" pos:end="397:55"><literal type="number" pos:start="397:55" pos:end="397:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="399:9" pos:end="403:9"><if pos:start="399:9" pos:end="403:9">if <condition pos:start="399:12" pos:end="399:30">(<expr pos:start="399:13" pos:end="399:29"><name pos:start="399:13" pos:end="399:25">on_read_error</name> <operator pos:start="399:27" pos:end="399:27">&lt;</operator> <literal type="number" pos:start="399:29" pos:end="399:29">0</literal></expr>)</condition> <block pos:start="399:32" pos:end="403:9">{<block_content pos:start="401:13" pos:end="401:24">

            <return pos:start="401:13" pos:end="401:24">return <expr pos:start="401:20" pos:end="401:23"><name pos:start="401:20" pos:end="401:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="409:5" pos:end="419:5"><if pos:start="409:5" pos:end="419:5">if <condition pos:start="409:8" pos:end="409:55">(<expr pos:start="409:9" pos:end="409:54"><operator pos:start="409:9" pos:end="409:9">(</operator><name pos:start="409:10" pos:end="409:16">devaddr</name> <operator pos:start="409:18" pos:end="409:18">=</operator> <call pos:start="409:20" pos:end="409:45"><name pos:start="409:20" pos:end="409:31">qemu_opt_get</name><argument_list pos:start="409:32" pos:end="409:45">(<argument pos:start="409:33" pos:end="409:36"><expr pos:start="409:33" pos:end="409:36"><name pos:start="409:33" pos:end="409:36">opts</name></expr></argument>, <argument pos:start="409:39" pos:end="409:44"><expr pos:start="409:39" pos:end="409:44"><literal type="string" pos:start="409:39" pos:end="409:44">"addr"</literal></expr></argument>)</argument_list></call><operator pos:start="409:46" pos:end="409:46">)</operator> <operator pos:start="409:48" pos:end="409:49">!=</operator> <name pos:start="409:51" pos:end="409:54">NULL</name></expr>)</condition> <block pos:start="409:57" pos:end="419:5">{<block_content pos:start="411:9" pos:end="417:9">

        <if_stmt pos:start="411:9" pos:end="417:9"><if pos:start="411:9" pos:end="417:9">if <condition pos:start="411:12" pos:end="411:30">(<expr pos:start="411:13" pos:end="411:29"><name pos:start="411:13" pos:end="411:16">type</name> <operator pos:start="411:18" pos:end="411:19">!=</operator> <name pos:start="411:21" pos:end="411:29">IF_VIRTIO</name></expr>)</condition> <block pos:start="411:32" pos:end="417:9">{<block_content pos:start="413:13" pos:end="415:24">

            <expr_stmt pos:start="413:13" pos:end="413:67"><expr pos:start="413:13" pos:end="413:66"><call pos:start="413:13" pos:end="413:66"><name pos:start="413:13" pos:end="413:24">error_report</name><argument_list pos:start="413:25" pos:end="413:66">(<argument pos:start="413:26" pos:end="413:65"><expr pos:start="413:26" pos:end="413:65"><literal type="string" pos:start="413:26" pos:end="413:65">"addr is not supported by this bus type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="415:13" pos:end="415:24">return <expr pos:start="415:20" pos:end="415:23"><name pos:start="415:20" pos:end="415:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="423:5" pos:end="423:46">/* compute bus and unit according index */</comment>



    <if_stmt pos:start="427:5" pos:end="453:5"><if pos:start="427:5" pos:end="453:5">if <condition pos:start="427:8" pos:end="427:20">(<expr pos:start="427:9" pos:end="427:19"><name pos:start="427:9" pos:end="427:13">index</name> <operator pos:start="427:15" pos:end="427:16">!=</operator> <operator pos:start="427:18" pos:end="427:18">-</operator><literal type="number" pos:start="427:19" pos:end="427:19">1</literal></expr>)</condition> <block pos:start="427:22" pos:end="453:5">{<block_content pos:start="429:9" pos:end="451:9">

        <if_stmt pos:start="429:9" pos:end="435:9"><if pos:start="429:9" pos:end="435:9">if <condition pos:start="429:12" pos:end="429:41">(<expr pos:start="429:13" pos:end="429:40"><name pos:start="429:13" pos:end="429:18">bus_id</name> <operator pos:start="429:20" pos:end="429:21">!=</operator> <literal type="number" pos:start="429:23" pos:end="429:23">0</literal> <operator pos:start="429:25" pos:end="429:26">||</operator> <name pos:start="429:28" pos:end="429:34">unit_id</name> <operator pos:start="429:36" pos:end="429:37">!=</operator> <operator pos:start="429:39" pos:end="429:39">-</operator><literal type="number" pos:start="429:40" pos:end="429:40">1</literal></expr>)</condition> <block pos:start="429:43" pos:end="435:9">{<block_content pos:start="431:13" pos:end="433:24">

            <expr_stmt pos:start="431:13" pos:end="431:67"><expr pos:start="431:13" pos:end="431:66"><call pos:start="431:13" pos:end="431:66"><name pos:start="431:13" pos:end="431:24">error_report</name><argument_list pos:start="431:25" pos:end="431:66">(<argument pos:start="431:26" pos:end="431:65"><expr pos:start="431:26" pos:end="431:65"><literal type="string" pos:start="431:26" pos:end="431:65">"index cannot be used with bus and unit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="433:13" pos:end="433:24">return <expr pos:start="433:20" pos:end="433:23"><name pos:start="433:20" pos:end="433:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="437:9" pos:end="451:9"><if pos:start="437:9" pos:end="445:9">if <condition pos:start="437:12" pos:end="437:26">(<expr pos:start="437:13" pos:end="437:25"><name pos:start="437:13" pos:end="437:20">max_devs</name> <operator pos:start="437:22" pos:end="437:23">==</operator> <literal type="number" pos:start="437:25" pos:end="437:25">0</literal></expr>)</condition>

        <block pos:start="439:9" pos:end="445:9">{<block_content pos:start="441:13" pos:end="443:23">

            <expr_stmt pos:start="441:13" pos:end="441:28"><expr pos:start="441:13" pos:end="441:27"><name pos:start="441:13" pos:end="441:19">unit_id</name> <operator pos:start="441:21" pos:end="441:21">=</operator> <name pos:start="441:23" pos:end="441:27">index</name></expr>;</expr_stmt>

            <expr_stmt pos:start="443:13" pos:end="443:23"><expr pos:start="443:13" pos:end="443:22"><name pos:start="443:13" pos:end="443:18">bus_id</name> <operator pos:start="443:20" pos:end="443:20">=</operator> <literal type="number" pos:start="443:22" pos:end="443:22">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="445:11" pos:end="451:9">else <block pos:start="445:16" pos:end="451:9">{<block_content pos:start="447:13" pos:end="449:38">

            <expr_stmt pos:start="447:13" pos:end="447:39"><expr pos:start="447:13" pos:end="447:38"><name pos:start="447:13" pos:end="447:19">unit_id</name> <operator pos:start="447:21" pos:end="447:21">=</operator> <name pos:start="447:23" pos:end="447:27">index</name> <operator pos:start="447:29" pos:end="447:29">%</operator> <name pos:start="447:31" pos:end="447:38">max_devs</name></expr>;</expr_stmt>

            <expr_stmt pos:start="449:13" pos:end="449:38"><expr pos:start="449:13" pos:end="449:37"><name pos:start="449:13" pos:end="449:18">bus_id</name> <operator pos:start="449:20" pos:end="449:20">=</operator> <name pos:start="449:22" pos:end="449:26">index</name> <operator pos:start="449:28" pos:end="449:28">/</operator> <name pos:start="449:30" pos:end="449:37">max_devs</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="457:5" pos:end="461:7">/* if user doesn't specify a unit_id,

     * try to find the first free

     */</comment>



    <if_stmt pos:start="465:5" pos:end="483:5"><if pos:start="465:5" pos:end="483:5">if <condition pos:start="465:8" pos:end="465:22">(<expr pos:start="465:9" pos:end="465:21"><name pos:start="465:9" pos:end="465:15">unit_id</name> <operator pos:start="465:17" pos:end="465:18">==</operator> <operator pos:start="465:20" pos:end="465:20">-</operator><literal type="number" pos:start="465:21" pos:end="465:21">1</literal></expr>)</condition> <block pos:start="465:24" pos:end="483:5">{<block_content pos:start="467:8" pos:end="481:8">

       <expr_stmt pos:start="467:8" pos:end="467:19"><expr pos:start="467:8" pos:end="467:18"><name pos:start="467:8" pos:end="467:14">unit_id</name> <operator pos:start="467:16" pos:end="467:16">=</operator> <literal type="number" pos:start="467:18" pos:end="467:18">0</literal></expr>;</expr_stmt>

       <while pos:start="469:8" pos:end="481:8">while <condition pos:start="469:14" pos:end="469:55">(<expr pos:start="469:15" pos:end="469:54"><call pos:start="469:15" pos:end="469:46"><name pos:start="469:15" pos:end="469:23">drive_get</name><argument_list pos:start="469:24" pos:end="469:46">(<argument pos:start="469:25" pos:end="469:28"><expr pos:start="469:25" pos:end="469:28"><name pos:start="469:25" pos:end="469:28">type</name></expr></argument>, <argument pos:start="469:31" pos:end="469:36"><expr pos:start="469:31" pos:end="469:36"><name pos:start="469:31" pos:end="469:36">bus_id</name></expr></argument>, <argument pos:start="469:39" pos:end="469:45"><expr pos:start="469:39" pos:end="469:45"><name pos:start="469:39" pos:end="469:45">unit_id</name></expr></argument>)</argument_list></call> <operator pos:start="469:48" pos:end="469:49">!=</operator> <name pos:start="469:51" pos:end="469:54">NULL</name></expr>)</condition> <block pos:start="469:57" pos:end="481:8">{<block_content pos:start="471:12" pos:end="479:12">

           <expr_stmt pos:start="471:12" pos:end="471:21"><expr pos:start="471:12" pos:end="471:20"><name pos:start="471:12" pos:end="471:18">unit_id</name><operator pos:start="471:19" pos:end="471:20">++</operator></expr>;</expr_stmt>

           <if_stmt pos:start="473:12" pos:end="479:12"><if pos:start="473:12" pos:end="479:12">if <condition pos:start="473:15" pos:end="473:47">(<expr pos:start="473:16" pos:end="473:46"><name pos:start="473:16" pos:end="473:23">max_devs</name> <operator pos:start="473:25" pos:end="473:26">&amp;&amp;</operator> <name pos:start="473:28" pos:end="473:34">unit_id</name> <operator pos:start="473:36" pos:end="473:37">&gt;=</operator> <name pos:start="473:39" pos:end="473:46">max_devs</name></expr>)</condition> <block pos:start="473:49" pos:end="479:12">{<block_content pos:start="475:16" pos:end="477:24">

               <expr_stmt pos:start="475:16" pos:end="475:35"><expr pos:start="475:16" pos:end="475:34"><name pos:start="475:16" pos:end="475:22">unit_id</name> <operator pos:start="475:24" pos:end="475:25">-=</operator> <name pos:start="475:27" pos:end="475:34">max_devs</name></expr>;</expr_stmt>

               <expr_stmt pos:start="477:16" pos:end="477:24"><expr pos:start="477:16" pos:end="477:23"><name pos:start="477:16" pos:end="477:21">bus_id</name><operator pos:start="477:22" pos:end="477:23">++</operator></expr>;</expr_stmt>

           </block_content>}</block></if></if_stmt>

       </block_content>}</block></while>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="487:5" pos:end="487:23">/* check unit id */</comment>



    <if_stmt pos:start="491:5" pos:end="499:5"><if pos:start="491:5" pos:end="499:5">if <condition pos:start="491:8" pos:end="491:40">(<expr pos:start="491:9" pos:end="491:39"><name pos:start="491:9" pos:end="491:16">max_devs</name> <operator pos:start="491:18" pos:end="491:19">&amp;&amp;</operator> <name pos:start="491:21" pos:end="491:27">unit_id</name> <operator pos:start="491:29" pos:end="491:30">&gt;=</operator> <name pos:start="491:32" pos:end="491:39">max_devs</name></expr>)</condition> <block pos:start="491:42" pos:end="499:5">{<block_content pos:start="493:9" pos:end="497:20">

        <expr_stmt pos:start="493:9" pos:end="495:44"><expr pos:start="493:9" pos:end="495:43"><call pos:start="493:9" pos:end="495:43"><name pos:start="493:9" pos:end="493:20">error_report</name><argument_list pos:start="493:21" pos:end="495:43">(<argument pos:start="493:22" pos:end="493:50"><expr pos:start="493:22" pos:end="493:50"><literal type="string" pos:start="493:22" pos:end="493:50">"unit %d too big (max is %d)"</literal></expr></argument>,

                     <argument pos:start="495:22" pos:end="495:28"><expr pos:start="495:22" pos:end="495:28"><name pos:start="495:22" pos:end="495:28">unit_id</name></expr></argument>, <argument pos:start="495:31" pos:end="495:42"><expr pos:start="495:31" pos:end="495:42"><name pos:start="495:31" pos:end="495:38">max_devs</name> <operator pos:start="495:40" pos:end="495:40">-</operator> <literal type="number" pos:start="495:42" pos:end="495:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="497:9" pos:end="497:20">return <expr pos:start="497:16" pos:end="497:19"><name pos:start="497:16" pos:end="497:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="503:5" pos:end="507:7">/*

     * ignore multiple definitions

     */</comment>



    <if_stmt pos:start="511:5" pos:end="517:5"><if pos:start="511:5" pos:end="517:5">if <condition pos:start="511:8" pos:end="511:49">(<expr pos:start="511:9" pos:end="511:48"><call pos:start="511:9" pos:end="511:40"><name pos:start="511:9" pos:end="511:17">drive_get</name><argument_list pos:start="511:18" pos:end="511:40">(<argument pos:start="511:19" pos:end="511:22"><expr pos:start="511:19" pos:end="511:22"><name pos:start="511:19" pos:end="511:22">type</name></expr></argument>, <argument pos:start="511:25" pos:end="511:30"><expr pos:start="511:25" pos:end="511:30"><name pos:start="511:25" pos:end="511:30">bus_id</name></expr></argument>, <argument pos:start="511:33" pos:end="511:39"><expr pos:start="511:33" pos:end="511:39"><name pos:start="511:33" pos:end="511:39">unit_id</name></expr></argument>)</argument_list></call> <operator pos:start="511:42" pos:end="511:43">!=</operator> <name pos:start="511:45" pos:end="511:48">NULL</name></expr>)</condition> <block pos:start="511:51" pos:end="517:5">{<block_content pos:start="513:9" pos:end="515:20">

        <expr_stmt pos:start="513:9" pos:end="513:25"><expr pos:start="513:9" pos:end="513:24"><operator pos:start="513:9" pos:end="513:9">*</operator><name pos:start="513:10" pos:end="513:20">fatal_error</name> <operator pos:start="513:22" pos:end="513:22">=</operator> <literal type="number" pos:start="513:24" pos:end="513:24">0</literal></expr>;</expr_stmt>

        <return pos:start="515:9" pos:end="515:20">return <expr pos:start="515:16" pos:end="515:19"><name pos:start="515:16" pos:end="515:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="521:5" pos:end="521:14">/* init */</comment>



    <expr_stmt pos:start="525:5" pos:end="525:41"><expr pos:start="525:5" pos:end="525:40"><name pos:start="525:5" pos:end="525:9">dinfo</name> <operator pos:start="525:11" pos:end="525:11">=</operator> <call pos:start="525:13" pos:end="525:40"><name pos:start="525:13" pos:end="525:24">qemu_mallocz</name><argument_list pos:start="525:25" pos:end="525:40">(<argument pos:start="525:26" pos:end="525:39"><expr pos:start="525:26" pos:end="525:39"><sizeof pos:start="525:26" pos:end="525:39">sizeof<argument_list pos:start="525:32" pos:end="525:39">(<argument pos:start="525:33" pos:end="525:38"><expr pos:start="525:33" pos:end="525:38"><operator pos:start="525:33" pos:end="525:33">*</operator><name pos:start="525:34" pos:end="525:38">dinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="527:5" pos:end="553:5"><if pos:start="527:5" pos:end="531:5">if <condition pos:start="527:8" pos:end="527:43">(<expr pos:start="527:9" pos:end="527:42"><operator pos:start="527:9" pos:end="527:9">(</operator><name pos:start="527:10" pos:end="527:12">buf</name> <operator pos:start="527:14" pos:end="527:14">=</operator> <call pos:start="527:16" pos:end="527:33"><name pos:start="527:16" pos:end="527:27">qemu_opts_id</name><argument_list pos:start="527:28" pos:end="527:33">(<argument pos:start="527:29" pos:end="527:32"><expr pos:start="527:29" pos:end="527:32"><name pos:start="527:29" pos:end="527:32">opts</name></expr></argument>)</argument_list></call><operator pos:start="527:34" pos:end="527:34">)</operator> <operator pos:start="527:36" pos:end="527:37">!=</operator> <name pos:start="527:39" pos:end="527:42">NULL</name></expr>)</condition> <block pos:start="527:45" pos:end="531:5">{<block_content pos:start="529:9" pos:end="529:37">

        <expr_stmt pos:start="529:9" pos:end="529:37"><expr pos:start="529:9" pos:end="529:36"><name pos:start="529:9" pos:end="529:17"><name pos:start="529:9" pos:end="529:13">dinfo</name><operator pos:start="529:14" pos:end="529:15">-&gt;</operator><name pos:start="529:16" pos:end="529:17">id</name></name> <operator pos:start="529:19" pos:end="529:19">=</operator> <call pos:start="529:21" pos:end="529:36"><name pos:start="529:21" pos:end="529:31">qemu_strdup</name><argument_list pos:start="529:32" pos:end="529:36">(<argument pos:start="529:33" pos:end="529:35"><expr pos:start="529:33" pos:end="529:35"><name pos:start="529:33" pos:end="529:35">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="531:7" pos:end="553:5">else <block pos:start="531:12" pos:end="553:5">{<block_content pos:start="535:9" pos:end="551:49">

        <comment type="block" pos:start="533:9" pos:end="533:42">/* no id supplied -&gt; create one */</comment>

        <expr_stmt pos:start="535:9" pos:end="535:37"><expr pos:start="535:9" pos:end="535:36"><name pos:start="535:9" pos:end="535:17"><name pos:start="535:9" pos:end="535:13">dinfo</name><operator pos:start="535:14" pos:end="535:15">-&gt;</operator><name pos:start="535:16" pos:end="535:17">id</name></name> <operator pos:start="535:19" pos:end="535:19">=</operator> <call pos:start="535:21" pos:end="535:36"><name pos:start="535:21" pos:end="535:32">qemu_mallocz</name><argument_list pos:start="535:33" pos:end="535:36">(<argument pos:start="535:34" pos:end="535:35"><expr pos:start="535:34" pos:end="535:35"><literal type="number" pos:start="535:34" pos:end="535:35">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="537:9" pos:end="539:62"><if pos:start="537:9" pos:end="539:62">if <condition pos:start="537:12" pos:end="537:46">(<expr pos:start="537:13" pos:end="537:45"><name pos:start="537:13" pos:end="537:16">type</name> <operator pos:start="537:18" pos:end="537:19">==</operator> <name pos:start="537:21" pos:end="537:26">IF_IDE</name> <operator pos:start="537:28" pos:end="537:29">||</operator> <name pos:start="537:31" pos:end="537:34">type</name> <operator pos:start="537:36" pos:end="537:37">==</operator> <name pos:start="537:39" pos:end="537:45">IF_SCSI</name></expr>)</condition><block type="pseudo" pos:start="539:13" pos:end="539:62"><block_content pos:start="539:13" pos:end="539:62">

            <expr_stmt pos:start="539:13" pos:end="539:62"><expr pos:start="539:13" pos:end="539:61"><name pos:start="539:13" pos:end="539:20">mediastr</name> <operator pos:start="539:22" pos:end="539:22">=</operator> <ternary pos:start="539:24" pos:end="539:61"><condition pos:start="539:24" pos:end="539:47"><expr pos:start="539:24" pos:end="539:45"><operator pos:start="539:24" pos:end="539:24">(</operator><name pos:start="539:25" pos:end="539:29">media</name> <operator pos:start="539:31" pos:end="539:32">==</operator> <name pos:start="539:34" pos:end="539:44">MEDIA_CDROM</name><operator pos:start="539:45" pos:end="539:45">)</operator></expr> ?</condition><then pos:start="539:49" pos:end="539:53"> <expr pos:start="539:49" pos:end="539:53"><literal type="string" pos:start="539:49" pos:end="539:53">"-cd"</literal></expr> </then><else pos:start="539:55" pos:end="539:61">: <expr pos:start="539:57" pos:end="539:61"><literal type="string" pos:start="539:57" pos:end="539:61">"-hd"</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="541:9" pos:end="551:49"><if pos:start="541:9" pos:end="545:57">if <condition pos:start="541:12" pos:end="541:21">(<expr pos:start="541:13" pos:end="541:20"><name pos:start="541:13" pos:end="541:20">max_devs</name></expr>)</condition><block type="pseudo" pos:start="543:13" pos:end="545:57"><block_content pos:start="543:13" pos:end="545:57">

            <expr_stmt pos:start="543:13" pos:end="545:57"><expr pos:start="543:13" pos:end="545:56"><call pos:start="543:13" pos:end="545:56"><name pos:start="543:13" pos:end="543:20">snprintf</name><argument_list pos:start="543:21" pos:end="545:56">(<argument pos:start="543:22" pos:end="543:30"><expr pos:start="543:22" pos:end="543:30"><name pos:start="543:22" pos:end="543:30"><name pos:start="543:22" pos:end="543:26">dinfo</name><operator pos:start="543:27" pos:end="543:28">-&gt;</operator><name pos:start="543:29" pos:end="543:30">id</name></name></expr></argument>, <argument pos:start="543:33" pos:end="543:34"><expr pos:start="543:33" pos:end="543:34"><literal type="number" pos:start="543:33" pos:end="543:34">32</literal></expr></argument>, <argument pos:start="543:37" pos:end="543:46"><expr pos:start="543:37" pos:end="543:46"><literal type="string" pos:start="543:37" pos:end="543:46">"%s%i%s%i"</literal></expr></argument>,

                     <argument pos:start="545:22" pos:end="545:28"><expr pos:start="545:22" pos:end="545:28"><name pos:start="545:22" pos:end="545:28">devname</name></expr></argument>, <argument pos:start="545:31" pos:end="545:36"><expr pos:start="545:31" pos:end="545:36"><name pos:start="545:31" pos:end="545:36">bus_id</name></expr></argument>, <argument pos:start="545:39" pos:end="545:46"><expr pos:start="545:39" pos:end="545:46"><name pos:start="545:39" pos:end="545:46">mediastr</name></expr></argument>, <argument pos:start="545:49" pos:end="545:55"><expr pos:start="545:49" pos:end="545:55"><name pos:start="545:49" pos:end="545:55">unit_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="547:9" pos:end="551:49">else<block type="pseudo" pos:start="549:13" pos:end="551:49"><block_content pos:start="549:13" pos:end="551:49">

            <expr_stmt pos:start="549:13" pos:end="551:49"><expr pos:start="549:13" pos:end="551:48"><call pos:start="549:13" pos:end="551:48"><name pos:start="549:13" pos:end="549:20">snprintf</name><argument_list pos:start="549:21" pos:end="551:48">(<argument pos:start="549:22" pos:end="549:30"><expr pos:start="549:22" pos:end="549:30"><name pos:start="549:22" pos:end="549:30"><name pos:start="549:22" pos:end="549:26">dinfo</name><operator pos:start="549:27" pos:end="549:28">-&gt;</operator><name pos:start="549:29" pos:end="549:30">id</name></name></expr></argument>, <argument pos:start="549:33" pos:end="549:34"><expr pos:start="549:33" pos:end="549:34"><literal type="number" pos:start="549:33" pos:end="549:34">32</literal></expr></argument>, <argument pos:start="549:37" pos:end="549:44"><expr pos:start="549:37" pos:end="549:44"><literal type="string" pos:start="549:37" pos:end="549:44">"%s%s%i"</literal></expr></argument>,

                     <argument pos:start="551:22" pos:end="551:28"><expr pos:start="551:22" pos:end="551:28"><name pos:start="551:22" pos:end="551:28">devname</name></expr></argument>, <argument pos:start="551:31" pos:end="551:38"><expr pos:start="551:31" pos:end="551:38"><name pos:start="551:31" pos:end="551:38">mediastr</name></expr></argument>, <argument pos:start="551:41" pos:end="551:47"><expr pos:start="551:41" pos:end="551:47"><name pos:start="551:41" pos:end="551:47">unit_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="555:5" pos:end="555:38"><expr pos:start="555:5" pos:end="555:37"><name pos:start="555:5" pos:end="555:15"><name pos:start="555:5" pos:end="555:9">dinfo</name><operator pos:start="555:10" pos:end="555:11">-&gt;</operator><name pos:start="555:12" pos:end="555:15">bdrv</name></name> <operator pos:start="555:17" pos:end="555:17">=</operator> <call pos:start="555:19" pos:end="555:37"><name pos:start="555:19" pos:end="555:26">bdrv_new</name><argument_list pos:start="555:27" pos:end="555:37">(<argument pos:start="555:28" pos:end="555:36"><expr pos:start="555:28" pos:end="555:36"><name pos:start="555:28" pos:end="555:36"><name pos:start="555:28" pos:end="555:32">dinfo</name><operator pos:start="555:33" pos:end="555:34">-&gt;</operator><name pos:start="555:35" pos:end="555:36">id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="557:5" pos:end="557:29"><expr pos:start="557:5" pos:end="557:28"><name pos:start="557:5" pos:end="557:18"><name pos:start="557:5" pos:end="557:9">dinfo</name><operator pos:start="557:10" pos:end="557:11">-&gt;</operator><name pos:start="557:12" pos:end="557:18">devaddr</name></name> <operator pos:start="557:20" pos:end="557:20">=</operator> <name pos:start="557:22" pos:end="557:28">devaddr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="559:5" pos:end="559:23"><expr pos:start="559:5" pos:end="559:22"><name pos:start="559:5" pos:end="559:15"><name pos:start="559:5" pos:end="559:9">dinfo</name><operator pos:start="559:10" pos:end="559:11">-&gt;</operator><name pos:start="559:12" pos:end="559:15">type</name></name> <operator pos:start="559:17" pos:end="559:17">=</operator> <name pos:start="559:19" pos:end="559:22">type</name></expr>;</expr_stmt>

    <expr_stmt pos:start="561:5" pos:end="561:24"><expr pos:start="561:5" pos:end="561:23"><name pos:start="561:5" pos:end="561:14"><name pos:start="561:5" pos:end="561:9">dinfo</name><operator pos:start="561:10" pos:end="561:11">-&gt;</operator><name pos:start="561:12" pos:end="561:14">bus</name></name> <operator pos:start="561:16" pos:end="561:16">=</operator> <name pos:start="561:18" pos:end="561:23">bus_id</name></expr>;</expr_stmt>

    <expr_stmt pos:start="563:5" pos:end="563:26"><expr pos:start="563:5" pos:end="563:25"><name pos:start="563:5" pos:end="563:15"><name pos:start="563:5" pos:end="563:9">dinfo</name><operator pos:start="563:10" pos:end="563:11">-&gt;</operator><name pos:start="563:12" pos:end="563:15">unit</name></name> <operator pos:start="563:17" pos:end="563:17">=</operator> <name pos:start="563:19" pos:end="563:25">unit_id</name></expr>;</expr_stmt>

    <expr_stmt pos:start="565:5" pos:end="565:23"><expr pos:start="565:5" pos:end="565:22"><name pos:start="565:5" pos:end="565:15"><name pos:start="565:5" pos:end="565:9">dinfo</name><operator pos:start="565:10" pos:end="565:11">-&gt;</operator><name pos:start="565:12" pos:end="565:15">opts</name></name> <operator pos:start="565:17" pos:end="565:17">=</operator> <name pos:start="565:19" pos:end="565:22">opts</name></expr>;</expr_stmt>

    <if_stmt pos:start="567:5" pos:end="569:66"><if pos:start="567:5" pos:end="569:66">if <condition pos:start="567:8" pos:end="567:15">(<expr pos:start="567:9" pos:end="567:14"><name pos:start="567:9" pos:end="567:14">serial</name></expr>)</condition><block type="pseudo" pos:start="569:9" pos:end="569:66"><block_content pos:start="569:9" pos:end="569:66">

        <expr_stmt pos:start="569:9" pos:end="569:66"><expr pos:start="569:9" pos:end="569:65"><call pos:start="569:9" pos:end="569:65"><name pos:start="569:9" pos:end="569:15">strncpy</name><argument_list pos:start="569:16" pos:end="569:65">(<argument pos:start="569:17" pos:end="569:29"><expr pos:start="569:17" pos:end="569:29"><name pos:start="569:17" pos:end="569:29"><name pos:start="569:17" pos:end="569:21">dinfo</name><operator pos:start="569:22" pos:end="569:23">-&gt;</operator><name pos:start="569:24" pos:end="569:29">serial</name></name></expr></argument>, <argument pos:start="569:32" pos:end="569:37"><expr pos:start="569:32" pos:end="569:37"><name pos:start="569:32" pos:end="569:37">serial</name></expr></argument>, <argument pos:start="569:40" pos:end="569:64"><expr pos:start="569:40" pos:end="569:64"><sizeof pos:start="569:40" pos:end="569:60">sizeof<argument_list pos:start="569:46" pos:end="569:60">(<argument pos:start="569:47" pos:end="569:59"><expr pos:start="569:47" pos:end="569:59"><name pos:start="569:47" pos:end="569:59"><name pos:start="569:47" pos:end="569:51">dinfo</name><operator pos:start="569:52" pos:end="569:53">-&gt;</operator><name pos:start="569:54" pos:end="569:59">serial</name></name></expr></argument>)</argument_list></sizeof> <operator pos:start="569:62" pos:end="569:62">-</operator> <literal type="number" pos:start="569:64" pos:end="569:64">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="571:5" pos:end="571:45"><expr pos:start="571:5" pos:end="571:44"><call pos:start="571:5" pos:end="571:44"><name pos:start="571:5" pos:end="571:22">QTAILQ_INSERT_TAIL</name><argument_list pos:start="571:23" pos:end="571:44">(<argument pos:start="571:24" pos:end="571:30"><expr pos:start="571:24" pos:end="571:30"><operator pos:start="571:24" pos:end="571:24">&amp;</operator><name pos:start="571:25" pos:end="571:30">drives</name></expr></argument>, <argument pos:start="571:33" pos:end="571:37"><expr pos:start="571:33" pos:end="571:37"><name pos:start="571:33" pos:end="571:37">dinfo</name></expr></argument>, <argument pos:start="571:40" pos:end="571:43"><expr pos:start="571:40" pos:end="571:43"><name pos:start="571:40" pos:end="571:43">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="575:5" pos:end="575:66"><expr pos:start="575:5" pos:end="575:65"><call pos:start="575:5" pos:end="575:65"><name pos:start="575:5" pos:end="575:21">bdrv_set_on_error</name><argument_list pos:start="575:22" pos:end="575:65">(<argument pos:start="575:23" pos:end="575:33"><expr pos:start="575:23" pos:end="575:33"><name pos:start="575:23" pos:end="575:33"><name pos:start="575:23" pos:end="575:27">dinfo</name><operator pos:start="575:28" pos:end="575:29">-&gt;</operator><name pos:start="575:30" pos:end="575:33">bdrv</name></name></expr></argument>, <argument pos:start="575:36" pos:end="575:48"><expr pos:start="575:36" pos:end="575:48"><name pos:start="575:36" pos:end="575:48">on_read_error</name></expr></argument>, <argument pos:start="575:51" pos:end="575:64"><expr pos:start="575:51" pos:end="575:64"><name pos:start="575:51" pos:end="575:64">on_write_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="579:5" pos:end="651:5">switch<condition pos:start="579:11" pos:end="579:16">(<expr pos:start="579:12" pos:end="579:15"><name pos:start="579:12" pos:end="579:15">type</name></expr>)</condition> <block pos:start="579:18" pos:end="651:5">{<block_content pos:start="581:5" pos:end="649:16">

    <case pos:start="581:5" pos:end="581:16">case <expr pos:start="581:10" pos:end="581:15"><name pos:start="581:10" pos:end="581:15">IF_IDE</name></expr>:</case>

    <case pos:start="583:5" pos:end="583:17">case <expr pos:start="583:10" pos:end="583:16"><name pos:start="583:10" pos:end="583:16">IF_SCSI</name></expr>:</case>

    <case pos:start="585:5" pos:end="585:16">case <expr pos:start="585:10" pos:end="585:15"><name pos:start="585:10" pos:end="585:15">IF_XEN</name></expr>:</case>

    <case pos:start="587:5" pos:end="587:17">case <expr pos:start="587:10" pos:end="587:16"><name pos:start="587:10" pos:end="587:16">IF_NONE</name></expr>:</case>

        <switch pos:start="589:9" pos:end="609:9">switch<condition pos:start="589:15" pos:end="589:21">(<expr pos:start="589:16" pos:end="589:20"><name pos:start="589:16" pos:end="589:20">media</name></expr>)</condition> <block pos:start="589:23" pos:end="609:9">{<block_content pos:start="591:9" pos:end="607:18">

	<case pos:start="591:9" pos:end="591:24">case <expr pos:start="591:14" pos:end="591:23"><name pos:start="591:14" pos:end="591:23">MEDIA_DISK</name></expr>:</case>

            <if_stmt pos:start="593:13" pos:end="599:13"><if pos:start="593:13" pos:end="599:13">if <condition pos:start="593:16" pos:end="593:26">(<expr pos:start="593:17" pos:end="593:25"><name pos:start="593:17" pos:end="593:20">cyls</name> <operator pos:start="593:22" pos:end="593:23">!=</operator> <literal type="number" pos:start="593:25" pos:end="593:25">0</literal></expr>)</condition> <block pos:start="593:28" pos:end="599:13">{<block_content pos:start="595:17" pos:end="597:68">

                <expr_stmt pos:start="595:17" pos:end="595:71"><expr pos:start="595:17" pos:end="595:70"><call pos:start="595:17" pos:end="595:70"><name pos:start="595:17" pos:end="595:38">bdrv_set_geometry_hint</name><argument_list pos:start="595:39" pos:end="595:70">(<argument pos:start="595:40" pos:end="595:50"><expr pos:start="595:40" pos:end="595:50"><name pos:start="595:40" pos:end="595:50"><name pos:start="595:40" pos:end="595:44">dinfo</name><operator pos:start="595:45" pos:end="595:46">-&gt;</operator><name pos:start="595:47" pos:end="595:50">bdrv</name></name></expr></argument>, <argument pos:start="595:53" pos:end="595:56"><expr pos:start="595:53" pos:end="595:56"><name pos:start="595:53" pos:end="595:56">cyls</name></expr></argument>, <argument pos:start="595:59" pos:end="595:63"><expr pos:start="595:59" pos:end="595:63"><name pos:start="595:59" pos:end="595:63">heads</name></expr></argument>, <argument pos:start="595:66" pos:end="595:69"><expr pos:start="595:66" pos:end="595:69"><name pos:start="595:66" pos:end="595:69">secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="597:17" pos:end="597:68"><expr pos:start="597:17" pos:end="597:67"><call pos:start="597:17" pos:end="597:67"><name pos:start="597:17" pos:end="597:41">bdrv_set_translation_hint</name><argument_list pos:start="597:42" pos:end="597:67">(<argument pos:start="597:43" pos:end="597:53"><expr pos:start="597:43" pos:end="597:53"><name pos:start="597:43" pos:end="597:53"><name pos:start="597:43" pos:end="597:47">dinfo</name><operator pos:start="597:48" pos:end="597:49">-&gt;</operator><name pos:start="597:50" pos:end="597:53">bdrv</name></name></expr></argument>, <argument pos:start="597:56" pos:end="597:66"><expr pos:start="597:56" pos:end="597:66"><name pos:start="597:56" pos:end="597:66">translation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

	    <break pos:start="601:13" pos:end="601:18">break;</break>

	<case pos:start="603:9" pos:end="603:25">case <expr pos:start="603:14" pos:end="603:24"><name pos:start="603:14" pos:end="603:24">MEDIA_CDROM</name></expr>:</case>

            <expr_stmt pos:start="605:13" pos:end="605:61"><expr pos:start="605:13" pos:end="605:60"><call pos:start="605:13" pos:end="605:60"><name pos:start="605:13" pos:end="605:30">bdrv_set_type_hint</name><argument_list pos:start="605:31" pos:end="605:60">(<argument pos:start="605:32" pos:end="605:42"><expr pos:start="605:32" pos:end="605:42"><name pos:start="605:32" pos:end="605:42"><name pos:start="605:32" pos:end="605:36">dinfo</name><operator pos:start="605:37" pos:end="605:38">-&gt;</operator><name pos:start="605:39" pos:end="605:42">bdrv</name></name></expr></argument>, <argument pos:start="605:45" pos:end="605:59"><expr pos:start="605:45" pos:end="605:59"><name pos:start="605:45" pos:end="605:59">BDRV_TYPE_CDROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <break pos:start="607:13" pos:end="607:18">break;</break>

	</block_content>}</block></switch>

        <break pos:start="611:9" pos:end="611:14">break;</break>

    <case pos:start="613:5" pos:end="613:15">case <expr pos:start="613:10" pos:end="613:14"><name pos:start="613:10" pos:end="613:14">IF_SD</name></expr>:</case>

        <comment type="block" pos:start="615:9" pos:end="617:29">/* FIXME: This isn't really a floppy, but it's a reasonable

           approximation.  */</comment>

    <case pos:start="619:5" pos:end="619:19">case <expr pos:start="619:10" pos:end="619:18"><name pos:start="619:10" pos:end="619:18">IF_FLOPPY</name></expr>:</case>

        <expr_stmt pos:start="621:9" pos:end="621:58"><expr pos:start="621:9" pos:end="621:57"><call pos:start="621:9" pos:end="621:57"><name pos:start="621:9" pos:end="621:26">bdrv_set_type_hint</name><argument_list pos:start="621:27" pos:end="621:57">(<argument pos:start="621:28" pos:end="621:38"><expr pos:start="621:28" pos:end="621:38"><name pos:start="621:28" pos:end="621:38"><name pos:start="621:28" pos:end="621:32">dinfo</name><operator pos:start="621:33" pos:end="621:34">-&gt;</operator><name pos:start="621:35" pos:end="621:38">bdrv</name></name></expr></argument>, <argument pos:start="621:41" pos:end="621:56"><expr pos:start="621:41" pos:end="621:56"><name pos:start="621:41" pos:end="621:56">BDRV_TYPE_FLOPPY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="623:9" pos:end="623:14">break;</break>

    <case pos:start="625:5" pos:end="625:19">case <expr pos:start="625:10" pos:end="625:18"><name pos:start="625:10" pos:end="625:18">IF_PFLASH</name></expr>:</case>

    <case pos:start="627:5" pos:end="627:16">case <expr pos:start="627:10" pos:end="627:15"><name pos:start="627:10" pos:end="627:15">IF_MTD</name></expr>:</case>

        <break pos:start="629:9" pos:end="629:14">break;</break>

    <case pos:start="631:5" pos:end="631:19">case <expr pos:start="631:10" pos:end="631:18"><name pos:start="631:10" pos:end="631:18">IF_VIRTIO</name></expr>:</case>

        <comment type="block" pos:start="633:9" pos:end="633:37">/* add virtio block device */</comment>

        <expr_stmt pos:start="635:9" pos:end="635:67"><expr pos:start="635:9" pos:end="635:66"><name pos:start="635:9" pos:end="635:12">opts</name> <operator pos:start="635:14" pos:end="635:14">=</operator> <call pos:start="635:16" pos:end="635:66"><name pos:start="635:16" pos:end="635:31">qemu_opts_create</name><argument_list pos:start="635:32" pos:end="635:66">(<argument pos:start="635:33" pos:end="635:56"><expr pos:start="635:33" pos:end="635:56"><call pos:start="635:33" pos:end="635:56"><name pos:start="635:33" pos:end="635:46">qemu_find_opts</name><argument_list pos:start="635:47" pos:end="635:56">(<argument pos:start="635:48" pos:end="635:55"><expr pos:start="635:48" pos:end="635:55"><literal type="string" pos:start="635:48" pos:end="635:55">"device"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="635:59" pos:end="635:62"><expr pos:start="635:59" pos:end="635:62"><name pos:start="635:59" pos:end="635:62">NULL</name></expr></argument>, <argument pos:start="635:65" pos:end="635:65"><expr pos:start="635:65" pos:end="635:65"><literal type="number" pos:start="635:65" pos:end="635:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="637:9" pos:end="637:55"><expr pos:start="637:9" pos:end="637:54"><call pos:start="637:9" pos:end="637:54"><name pos:start="637:9" pos:end="637:20">qemu_opt_set</name><argument_list pos:start="637:21" pos:end="637:54">(<argument pos:start="637:22" pos:end="637:25"><expr pos:start="637:22" pos:end="637:25"><name pos:start="637:22" pos:end="637:25">opts</name></expr></argument>, <argument pos:start="637:28" pos:end="637:35"><expr pos:start="637:28" pos:end="637:35"><literal type="string" pos:start="637:28" pos:end="637:35">"driver"</literal></expr></argument>, <argument pos:start="637:38" pos:end="637:53"><expr pos:start="637:38" pos:end="637:53"><literal type="string" pos:start="637:38" pos:end="637:53">"virtio-blk-pci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="639:9" pos:end="639:47"><expr pos:start="639:9" pos:end="639:46"><call pos:start="639:9" pos:end="639:46"><name pos:start="639:9" pos:end="639:20">qemu_opt_set</name><argument_list pos:start="639:21" pos:end="639:46">(<argument pos:start="639:22" pos:end="639:25"><expr pos:start="639:22" pos:end="639:25"><name pos:start="639:22" pos:end="639:25">opts</name></expr></argument>, <argument pos:start="639:28" pos:end="639:34"><expr pos:start="639:28" pos:end="639:34"><literal type="string" pos:start="639:28" pos:end="639:34">"drive"</literal></expr></argument>, <argument pos:start="639:37" pos:end="639:45"><expr pos:start="639:37" pos:end="639:45"><name pos:start="639:37" pos:end="639:45"><name pos:start="639:37" pos:end="639:41">dinfo</name><operator pos:start="639:42" pos:end="639:43">-&gt;</operator><name pos:start="639:44" pos:end="639:45">id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="641:9" pos:end="643:48"><if pos:start="641:9" pos:end="643:48">if <condition pos:start="641:12" pos:end="641:20">(<expr pos:start="641:13" pos:end="641:19"><name pos:start="641:13" pos:end="641:19">devaddr</name></expr>)</condition><block type="pseudo" pos:start="643:13" pos:end="643:48"><block_content pos:start="643:13" pos:end="643:48">

            <expr_stmt pos:start="643:13" pos:end="643:48"><expr pos:start="643:13" pos:end="643:47"><call pos:start="643:13" pos:end="643:47"><name pos:start="643:13" pos:end="643:24">qemu_opt_set</name><argument_list pos:start="643:25" pos:end="643:47">(<argument pos:start="643:26" pos:end="643:29"><expr pos:start="643:26" pos:end="643:29"><name pos:start="643:26" pos:end="643:29">opts</name></expr></argument>, <argument pos:start="643:32" pos:end="643:37"><expr pos:start="643:32" pos:end="643:37"><literal type="string" pos:start="643:32" pos:end="643:37">"addr"</literal></expr></argument>, <argument pos:start="643:40" pos:end="643:46"><expr pos:start="643:40" pos:end="643:46"><name pos:start="643:40" pos:end="643:46">devaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="645:9" pos:end="645:14">break;</break>

    <case pos:start="647:5" pos:end="647:18">case <expr pos:start="647:10" pos:end="647:17"><name pos:start="647:10" pos:end="647:17">IF_COUNT</name></expr>:</case>

        <expr_stmt pos:start="649:9" pos:end="649:16"><expr pos:start="649:9" pos:end="649:15"><call pos:start="649:9" pos:end="649:15"><name pos:start="649:9" pos:end="649:13">abort</name><argument_list pos:start="649:14" pos:end="649:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

    <if_stmt pos:start="653:5" pos:end="659:5"><if pos:start="653:5" pos:end="659:5">if <condition pos:start="653:8" pos:end="653:24">(<expr pos:start="653:9" pos:end="653:23"><operator pos:start="653:9" pos:end="653:9">!</operator><name pos:start="653:10" pos:end="653:13">file</name> <operator pos:start="653:15" pos:end="653:16">||</operator> <operator pos:start="653:18" pos:end="653:18">!</operator><operator pos:start="653:19" pos:end="653:19">*</operator><name pos:start="653:20" pos:end="653:23">file</name></expr>)</condition> <block pos:start="653:26" pos:end="659:5">{<block_content pos:start="655:9" pos:end="657:20">

        <expr_stmt pos:start="655:9" pos:end="655:25"><expr pos:start="655:9" pos:end="655:24"><operator pos:start="655:9" pos:end="655:9">*</operator><name pos:start="655:10" pos:end="655:20">fatal_error</name> <operator pos:start="655:22" pos:end="655:22">=</operator> <literal type="number" pos:start="655:24" pos:end="655:24">0</literal></expr>;</expr_stmt>

        <return pos:start="657:9" pos:end="657:20">return <expr pos:start="657:16" pos:end="657:19"><name pos:start="657:16" pos:end="657:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="661:5" pos:end="669:5"><if pos:start="661:5" pos:end="669:5">if <condition pos:start="661:8" pos:end="661:17">(<expr pos:start="661:9" pos:end="661:16"><name pos:start="661:9" pos:end="661:16">snapshot</name></expr>)</condition> <block pos:start="661:19" pos:end="669:5">{<block_content pos:start="665:9" pos:end="667:72">

        <comment type="block" pos:start="663:9" pos:end="663:51">/* always use cache=unsafe with snapshot */</comment>

        <expr_stmt pos:start="665:9" pos:end="665:41"><expr pos:start="665:9" pos:end="665:40"><name pos:start="665:9" pos:end="665:18">bdrv_flags</name> <operator pos:start="665:20" pos:end="665:21">&amp;=</operator> <operator pos:start="665:23" pos:end="665:23">~</operator><name pos:start="665:24" pos:end="665:40">BDRV_O_CACHE_MASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="667:9" pos:end="667:72"><expr pos:start="667:9" pos:end="667:71"><name pos:start="667:9" pos:end="667:18">bdrv_flags</name> <operator pos:start="667:20" pos:end="667:21">|=</operator> <operator pos:start="667:23" pos:end="667:23">(</operator><name pos:start="667:24" pos:end="667:38">BDRV_O_SNAPSHOT</name><operator pos:start="667:39" pos:end="667:39">|</operator><name pos:start="667:40" pos:end="667:54">BDRV_O_CACHE_WB</name><operator pos:start="667:55" pos:end="667:55">|</operator><name pos:start="667:56" pos:end="667:70">BDRV_O_NO_FLUSH</name><operator pos:start="667:71" pos:end="667:71">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="673:5" pos:end="689:5"><if pos:start="673:5" pos:end="679:5">if <condition pos:start="673:8" pos:end="673:29">(<expr pos:start="673:9" pos:end="673:28"><name pos:start="673:9" pos:end="673:13">media</name> <operator pos:start="673:15" pos:end="673:16">==</operator> <name pos:start="673:18" pos:end="673:28">MEDIA_CDROM</name></expr>)</condition> <block pos:start="673:31" pos:end="679:5">{<block_content pos:start="677:9" pos:end="677:15">

        <comment type="block" pos:start="675:9" pos:end="675:60">/* CDROM is fine for any interface, don't check.  */</comment>

        <expr_stmt pos:start="677:9" pos:end="677:15"><expr pos:start="677:9" pos:end="677:14"><name pos:start="677:9" pos:end="677:10">ro</name> <operator pos:start="677:12" pos:end="677:12">=</operator> <literal type="number" pos:start="677:14" pos:end="677:14">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="679:7" pos:end="689:5">else if <condition pos:start="679:15" pos:end="679:23">(<expr pos:start="679:16" pos:end="679:22"><name pos:start="679:16" pos:end="679:17">ro</name> <operator pos:start="679:19" pos:end="679:20">==</operator> <literal type="number" pos:start="679:22" pos:end="679:22">1</literal></expr>)</condition> <block pos:start="679:25" pos:end="689:5">{<block_content pos:start="681:9" pos:end="687:9">

        <if_stmt pos:start="681:9" pos:end="687:9"><if pos:start="681:9" pos:end="687:9">if <condition pos:start="681:12" pos:end="681:89">(<expr pos:start="681:13" pos:end="681:88"><name pos:start="681:13" pos:end="681:16">type</name> <operator pos:start="681:18" pos:end="681:19">!=</operator> <name pos:start="681:21" pos:end="681:27">IF_SCSI</name> <operator pos:start="681:29" pos:end="681:30">&amp;&amp;</operator> <name pos:start="681:32" pos:end="681:35">type</name> <operator pos:start="681:37" pos:end="681:38">!=</operator> <name pos:start="681:40" pos:end="681:48">IF_VIRTIO</name> <operator pos:start="681:50" pos:end="681:51">&amp;&amp;</operator> <name pos:start="681:53" pos:end="681:56">type</name> <operator pos:start="681:58" pos:end="681:59">!=</operator> <name pos:start="681:61" pos:end="681:69">IF_FLOPPY</name> <operator pos:start="681:71" pos:end="681:72">&amp;&amp;</operator> <name pos:start="681:74" pos:end="681:77">type</name> <operator pos:start="681:79" pos:end="681:80">!=</operator> <name pos:start="681:82" pos:end="681:88">IF_NONE</name></expr>)</condition> <block pos:start="681:91" pos:end="687:9">{<block_content pos:start="683:13" pos:end="685:24">

            <expr_stmt pos:start="683:13" pos:end="683:68"><expr pos:start="683:13" pos:end="683:67"><call pos:start="683:13" pos:end="683:67"><name pos:start="683:13" pos:end="683:24">error_report</name><argument_list pos:start="683:25" pos:end="683:67">(<argument pos:start="683:26" pos:end="683:66"><expr pos:start="683:26" pos:end="683:66"><literal type="string" pos:start="683:26" pos:end="683:66">"readonly not supported by this bus type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="685:13" pos:end="685:24">return <expr pos:start="685:20" pos:end="685:23"><name pos:start="685:20" pos:end="685:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="693:5" pos:end="693:39"><expr pos:start="693:5" pos:end="693:38"><name pos:start="693:5" pos:end="693:14">bdrv_flags</name> <operator pos:start="693:16" pos:end="693:17">|=</operator> <ternary pos:start="693:19" pos:end="693:38"><condition pos:start="693:19" pos:end="693:22"><expr pos:start="693:19" pos:end="693:20"><name pos:start="693:19" pos:end="693:20">ro</name></expr> ?</condition><then pos:start="693:24" pos:end="693:24"> <expr pos:start="693:24" pos:end="693:24"><literal type="number" pos:start="693:24" pos:end="693:24">0</literal></expr> </then><else pos:start="693:26" pos:end="693:38">: <expr pos:start="693:28" pos:end="693:38"><name pos:start="693:28" pos:end="693:38">BDRV_O_RDWR</name></expr></else></ternary></expr>;</expr_stmt>



    <expr_stmt pos:start="697:5" pos:end="697:56"><expr pos:start="697:5" pos:end="697:55"><name pos:start="697:5" pos:end="697:7">ret</name> <operator pos:start="697:9" pos:end="697:9">=</operator> <call pos:start="697:11" pos:end="697:55"><name pos:start="697:11" pos:end="697:19">bdrv_open</name><argument_list pos:start="697:20" pos:end="697:55">(<argument pos:start="697:21" pos:end="697:31"><expr pos:start="697:21" pos:end="697:31"><name pos:start="697:21" pos:end="697:31"><name pos:start="697:21" pos:end="697:25">dinfo</name><operator pos:start="697:26" pos:end="697:27">-&gt;</operator><name pos:start="697:28" pos:end="697:31">bdrv</name></name></expr></argument>, <argument pos:start="697:34" pos:end="697:37"><expr pos:start="697:34" pos:end="697:37"><name pos:start="697:34" pos:end="697:37">file</name></expr></argument>, <argument pos:start="697:40" pos:end="697:49"><expr pos:start="697:40" pos:end="697:49"><name pos:start="697:40" pos:end="697:49">bdrv_flags</name></expr></argument>, <argument pos:start="697:52" pos:end="697:54"><expr pos:start="697:52" pos:end="697:54"><name pos:start="697:52" pos:end="697:54">drv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="699:5" pos:end="707:5"><if pos:start="699:5" pos:end="707:5">if <condition pos:start="699:8" pos:end="699:16">(<expr pos:start="699:9" pos:end="699:15"><name pos:start="699:9" pos:end="699:11">ret</name> <operator pos:start="699:13" pos:end="699:13">&lt;</operator> <literal type="number" pos:start="699:15" pos:end="699:15">0</literal></expr>)</condition> <block pos:start="699:18" pos:end="707:5">{<block_content pos:start="701:9" pos:end="705:20">

        <expr_stmt pos:start="701:9" pos:end="703:43"><expr pos:start="701:9" pos:end="703:42"><call pos:start="701:9" pos:end="703:42"><name pos:start="701:9" pos:end="701:20">error_report</name><argument_list pos:start="701:21" pos:end="703:42">(<argument pos:start="701:22" pos:end="701:55"><expr pos:start="701:22" pos:end="701:55"><literal type="string" pos:start="701:22" pos:end="701:55">"could not open disk image %s: %s"</literal></expr></argument>,

                     <argument pos:start="703:22" pos:end="703:25"><expr pos:start="703:22" pos:end="703:25"><name pos:start="703:22" pos:end="703:25">file</name></expr></argument>, <argument pos:start="703:28" pos:end="703:41"><expr pos:start="703:28" pos:end="703:41"><call pos:start="703:28" pos:end="703:41"><name pos:start="703:28" pos:end="703:35">strerror</name><argument_list pos:start="703:36" pos:end="703:41">(<argument pos:start="703:37" pos:end="703:40"><expr pos:start="703:37" pos:end="703:40"><operator pos:start="703:37" pos:end="703:37">-</operator><name pos:start="703:38" pos:end="703:40">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="705:9" pos:end="705:20">return <expr pos:start="705:16" pos:end="705:19"><name pos:start="705:16" pos:end="705:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="711:5" pos:end="713:22"><if pos:start="711:5" pos:end="713:22">if <condition pos:start="711:8" pos:end="711:39">(<expr pos:start="711:9" pos:end="711:38"><call pos:start="711:9" pos:end="711:38"><name pos:start="711:9" pos:end="711:25">bdrv_key_required</name><argument_list pos:start="711:26" pos:end="711:38">(<argument pos:start="711:27" pos:end="711:37"><expr pos:start="711:27" pos:end="711:37"><name pos:start="711:27" pos:end="711:37"><name pos:start="711:27" pos:end="711:31">dinfo</name><operator pos:start="711:32" pos:end="711:33">-&gt;</operator><name pos:start="711:34" pos:end="711:37">bdrv</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="713:9" pos:end="713:22"><block_content pos:start="713:9" pos:end="713:22">

        <expr_stmt pos:start="713:9" pos:end="713:22"><expr pos:start="713:9" pos:end="713:21"><name pos:start="713:9" pos:end="713:17">autostart</name> <operator pos:start="713:19" pos:end="713:19">=</operator> <literal type="number" pos:start="713:21" pos:end="713:21">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="715:5" pos:end="715:21"><expr pos:start="715:5" pos:end="715:20"><operator pos:start="715:5" pos:end="715:5">*</operator><name pos:start="715:6" pos:end="715:16">fatal_error</name> <operator pos:start="715:18" pos:end="715:18">=</operator> <literal type="number" pos:start="715:20" pos:end="715:20">0</literal></expr>;</expr_stmt>

    <return pos:start="717:5" pos:end="717:17">return <expr pos:start="717:12" pos:end="717:16"><name pos:start="717:12" pos:end="717:16">dinfo</name></expr>;</return>

</block_content>}</block></function>
</unit>
