<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19988.c" pos:tabs="8"><function pos:start="1:1" pos:end="123:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">int32_t</name></type> <name pos:start="1:16" pos:end="1:34">virtio_net_flush_tx</name><parameter_list pos:start="1:35" pos:end="1:63">(<parameter pos:start="1:36" pos:end="1:47"><decl pos:start="1:36" pos:end="1:47"><type pos:start="1:36" pos:end="1:47"><name pos:start="1:36" pos:end="1:44">VirtIONet</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:47">n</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:62"><decl pos:start="1:50" pos:end="1:62"><type pos:start="1:50" pos:end="1:62"><name pos:start="1:50" pos:end="1:58">VirtQueue</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:62">vq</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="123:1">{<block_content pos:start="5:5" pos:end="121:23">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:20">VirtQueueElement</name></type> <name pos:start="5:22" pos:end="5:25">elem</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">int32_t</name></type> <name pos:start="7:13" pos:end="7:23">num_packets</name> <init pos:start="7:25" pos:end="7:27">= <expr pos:start="7:27" pos:end="7:27"><literal type="number" pos:start="7:27" pos:end="7:27">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="15:5"><if pos:start="11:5" pos:end="15:5">if <condition pos:start="11:8" pos:end="11:54">(<expr pos:start="11:9" pos:end="11:53"><operator pos:start="11:9" pos:end="11:9">!</operator><operator pos:start="11:10" pos:end="11:10">(</operator><name pos:start="11:11" pos:end="11:24"><name pos:start="11:11" pos:end="11:11">n</name><operator pos:start="11:12" pos:end="11:13">-&gt;</operator><name pos:start="11:14" pos:end="11:17">vdev</name><operator pos:start="11:18" pos:end="11:18">.</operator><name pos:start="11:19" pos:end="11:24">status</name></name> <operator pos:start="11:26" pos:end="11:26">&amp;</operator> <name pos:start="11:28" pos:end="11:52">VIRTIO_CONFIG_S_DRIVER_OK</name><operator pos:start="11:53" pos:end="11:53">)</operator></expr>)</condition> <block pos:start="11:56" pos:end="15:5">{<block_content pos:start="13:9" pos:end="13:27">

        <return pos:start="13:9" pos:end="13:27">return <expr pos:start="13:16" pos:end="13:26"><name pos:start="13:16" pos:end="13:26">num_packets</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:33">(<expr pos:start="19:9" pos:end="19:32"><name pos:start="19:9" pos:end="19:32"><name pos:start="19:9" pos:end="19:9">n</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:19">async_tx</name><operator pos:start="19:20" pos:end="19:20">.</operator><name pos:start="19:21" pos:end="19:24">elem</name><operator pos:start="19:25" pos:end="19:25">.</operator><name pos:start="19:26" pos:end="19:32">out_num</name></name></expr>)</condition> <block pos:start="19:35" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:27">

        <expr_stmt pos:start="21:9" pos:end="21:51"><expr pos:start="21:9" pos:end="21:50"><call pos:start="21:9" pos:end="21:50"><name pos:start="21:9" pos:end="21:37">virtio_queue_set_notification</name><argument_list pos:start="21:38" pos:end="21:50">(<argument pos:start="21:39" pos:end="21:46"><expr pos:start="21:39" pos:end="21:46"><name pos:start="21:39" pos:end="21:46"><name pos:start="21:39" pos:end="21:39">n</name><operator pos:start="21:40" pos:end="21:41">-&gt;</operator><name pos:start="21:42" pos:end="21:46">tx_vq</name></name></expr></argument>, <argument pos:start="21:49" pos:end="21:49"><expr pos:start="21:49" pos:end="21:49"><literal type="number" pos:start="21:49" pos:end="21:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:27">return <expr pos:start="23:16" pos:end="23:26"><name pos:start="23:16" pos:end="23:26">num_packets</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <while pos:start="29:5" pos:end="119:5">while <condition pos:start="29:11" pos:end="29:36">(<expr pos:start="29:12" pos:end="29:35"><call pos:start="29:12" pos:end="29:35"><name pos:start="29:12" pos:end="29:24">virtqueue_pop</name><argument_list pos:start="29:25" pos:end="29:35">(<argument pos:start="29:26" pos:end="29:27"><expr pos:start="29:26" pos:end="29:27"><name pos:start="29:26" pos:end="29:27">vq</name></expr></argument>, <argument pos:start="29:30" pos:end="29:34"><expr pos:start="29:30" pos:end="29:34"><operator pos:start="29:30" pos:end="29:30">&amp;</operator><name pos:start="29:31" pos:end="29:34">elem</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:38" pos:end="119:5">{<block_content pos:start="31:9" pos:end="117:9">

        <decl_stmt pos:start="31:9" pos:end="31:29"><decl pos:start="31:9" pos:end="31:19"><type pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:15">ssize_t</name></type> <name pos:start="31:17" pos:end="31:19">ret</name></decl>, <decl pos:start="31:22" pos:end="31:28"><type ref="prev" pos:start="31:9" pos:end="31:15"/><name pos:start="31:22" pos:end="31:24">len</name> <init pos:start="31:26" pos:end="31:28">= <expr pos:start="31:28" pos:end="31:28"><literal type="number" pos:start="31:28" pos:end="31:28">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="33:9" pos:end="33:44"><decl pos:start="33:9" pos:end="33:43"><type pos:start="33:9" pos:end="33:20"><name pos:start="33:9" pos:end="33:16">unsigned</name> <name pos:start="33:18" pos:end="33:20">int</name></type> <name pos:start="33:22" pos:end="33:28">out_num</name> <init pos:start="33:30" pos:end="33:43">= <expr pos:start="33:32" pos:end="33:43"><name pos:start="33:32" pos:end="33:43"><name pos:start="33:32" pos:end="33:35">elem</name><operator pos:start="33:36" pos:end="33:36">.</operator><name pos:start="33:37" pos:end="33:43">out_num</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="35:9" pos:end="35:47"><decl pos:start="35:9" pos:end="35:46"><type pos:start="35:9" pos:end="35:22"><name pos:start="35:9" pos:end="35:20"><name pos:start="35:9" pos:end="35:14">struct</name> <name pos:start="35:16" pos:end="35:20">iovec</name></name> <modifier pos:start="35:22" pos:end="35:22">*</modifier></type><name pos:start="35:23" pos:end="35:28">out_sg</name> <init pos:start="35:30" pos:end="35:46">= <expr pos:start="35:32" pos:end="35:46"><operator pos:start="35:32" pos:end="35:32">&amp;</operator><name pos:start="35:33" pos:end="35:46"><name pos:start="35:33" pos:end="35:36">elem</name><operator pos:start="35:37" pos:end="35:37">.</operator><name pos:start="35:38" pos:end="35:43">out_sg</name><index pos:start="35:44" pos:end="35:46">[<expr pos:start="35:45" pos:end="35:45"><literal type="number" pos:start="35:45" pos:end="35:45">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="37:9" pos:end="37:25"><decl pos:start="37:9" pos:end="37:24"><type pos:start="37:9" pos:end="37:16"><name pos:start="37:9" pos:end="37:16">unsigned</name></type> <name pos:start="37:18" pos:end="37:24">hdr_len</name></decl>;</decl_stmt>



        <comment type="block" pos:start="41:9" pos:end="41:66">/* hdr_len refers to the header received from the guest */</comment>

        <expr_stmt pos:start="43:9" pos:end="47:42"><expr pos:start="43:9" pos:end="47:41"><name pos:start="43:9" pos:end="43:15">hdr_len</name> <operator pos:start="43:17" pos:end="43:17">=</operator> <ternary pos:start="43:19" pos:end="47:41"><condition pos:start="43:19" pos:end="43:40"><expr pos:start="43:19" pos:end="43:38"><name pos:start="43:19" pos:end="43:38"><name pos:start="43:19" pos:end="43:19">n</name><operator pos:start="43:20" pos:end="43:21">-&gt;</operator><name pos:start="43:22" pos:end="43:38">mergeable_rx_bufs</name></name></expr> ?</condition><then pos:start="45:13" pos:end="45:51">

            <expr pos:start="45:13" pos:end="45:51"><sizeof pos:start="45:13" pos:end="45:51">sizeof<argument_list pos:start="45:19" pos:end="45:51">(<argument pos:start="45:20" pos:end="45:50"><expr pos:start="45:20" pos:end="45:50">struct <name pos:start="45:27" pos:end="45:50">virtio_net_hdr_mrg_rxbuf</name></expr></argument>)</argument_list></sizeof></expr> </then><else pos:start="45:53" pos:end="47:41">:

            <expr pos:start="47:13" pos:end="47:41"><sizeof pos:start="47:13" pos:end="47:41">sizeof<argument_list pos:start="47:19" pos:end="47:41">(<argument pos:start="47:20" pos:end="47:40"><expr pos:start="47:20" pos:end="47:40">struct <name pos:start="47:27" pos:end="47:40">virtio_net_hdr</name></expr></argument>)</argument_list></sizeof></expr></else></ternary></expr>;</expr_stmt>



        <if_stmt pos:start="51:9" pos:end="57:9"><if pos:start="51:9" pos:end="57:9">if <condition pos:start="51:12" pos:end="51:54">(<expr pos:start="51:13" pos:end="51:53"><name pos:start="51:13" pos:end="51:19">out_num</name> <operator pos:start="51:21" pos:end="51:21">&lt;</operator> <literal type="number" pos:start="51:23" pos:end="51:23">1</literal> <operator pos:start="51:25" pos:end="51:26">||</operator> <name pos:start="51:28" pos:end="51:42"><name pos:start="51:28" pos:end="51:33">out_sg</name><operator pos:start="51:34" pos:end="51:35">-&gt;</operator><name pos:start="51:36" pos:end="51:42">iov_len</name></name> <operator pos:start="51:44" pos:end="51:45">!=</operator> <name pos:start="51:47" pos:end="51:53">hdr_len</name></expr>)</condition> <block pos:start="51:56" pos:end="57:9">{<block_content pos:start="53:13" pos:end="55:20">

            <expr_stmt pos:start="53:13" pos:end="53:67"><expr pos:start="53:13" pos:end="53:66"><call pos:start="53:13" pos:end="53:66"><name pos:start="53:13" pos:end="53:24">error_report</name><argument_list pos:start="53:25" pos:end="53:66">(<argument pos:start="53:26" pos:end="53:65"><expr pos:start="53:26" pos:end="53:65"><literal type="string" pos:start="53:26" pos:end="53:65">"virtio-net header not in first element"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:20"><expr pos:start="55:13" pos:end="55:19"><call pos:start="55:13" pos:end="55:19"><name pos:start="55:13" pos:end="55:16">exit</name><argument_list pos:start="55:17" pos:end="55:19">(<argument pos:start="55:18" pos:end="55:18"><expr pos:start="55:18" pos:end="55:18"><literal type="number" pos:start="55:18" pos:end="55:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="61:9" pos:end="61:55">/* ignore the header if GSO is not supported */</comment>

        <if_stmt pos:start="63:9" pos:end="81:9"><if pos:start="63:9" pos:end="71:9">if <condition pos:start="63:12" pos:end="63:29">(<expr pos:start="63:13" pos:end="63:28"><operator pos:start="63:13" pos:end="63:13">!</operator><name pos:start="63:14" pos:end="63:28"><name pos:start="63:14" pos:end="63:14">n</name><operator pos:start="63:15" pos:end="63:16">-&gt;</operator><name pos:start="63:17" pos:end="63:28">has_vnet_hdr</name></name></expr>)</condition> <block pos:start="63:31" pos:end="71:9">{<block_content pos:start="65:13" pos:end="69:27">

            <expr_stmt pos:start="65:13" pos:end="65:22"><expr pos:start="65:13" pos:end="65:21"><name pos:start="65:13" pos:end="65:19">out_num</name><operator pos:start="65:20" pos:end="65:21">--</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:21"><expr pos:start="67:13" pos:end="67:20"><name pos:start="67:13" pos:end="67:18">out_sg</name><operator pos:start="67:19" pos:end="67:20">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:27"><expr pos:start="69:13" pos:end="69:26"><name pos:start="69:13" pos:end="69:15">len</name> <operator pos:start="69:17" pos:end="69:18">+=</operator> <name pos:start="69:20" pos:end="69:26">hdr_len</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="71:11" pos:end="81:9">else if <condition pos:start="71:19" pos:end="71:40">(<expr pos:start="71:20" pos:end="71:39"><name pos:start="71:20" pos:end="71:39"><name pos:start="71:20" pos:end="71:20">n</name><operator pos:start="71:21" pos:end="71:22">-&gt;</operator><name pos:start="71:23" pos:end="71:39">mergeable_rx_bufs</name></name></expr>)</condition> <block pos:start="71:42" pos:end="81:9">{<block_content pos:start="75:13" pos:end="79:27">

            <comment type="block" pos:start="73:13" pos:end="73:55">/* tapfd expects a struct virtio_net_hdr */</comment>

            <expr_stmt pos:start="75:13" pos:end="75:53"><expr pos:start="75:13" pos:end="75:52"><name pos:start="75:13" pos:end="75:19">hdr_len</name> <operator pos:start="75:21" pos:end="75:22">-=</operator> <sizeof pos:start="75:24" pos:end="75:52">sizeof<argument_list pos:start="75:30" pos:end="75:52">(<argument pos:start="75:31" pos:end="75:51"><expr pos:start="75:31" pos:end="75:51">struct <name pos:start="75:38" pos:end="75:51">virtio_net_hdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:39"><expr pos:start="77:13" pos:end="77:38"><name pos:start="77:13" pos:end="77:27"><name pos:start="77:13" pos:end="77:18">out_sg</name><operator pos:start="77:19" pos:end="77:20">-&gt;</operator><name pos:start="77:21" pos:end="77:27">iov_len</name></name> <operator pos:start="77:29" pos:end="77:30">-=</operator> <name pos:start="77:32" pos:end="77:38">hdr_len</name></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:27"><expr pos:start="79:13" pos:end="79:26"><name pos:start="79:13" pos:end="79:15">len</name> <operator pos:start="79:17" pos:end="79:18">+=</operator> <name pos:start="79:20" pos:end="79:26">hdr_len</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="85:9" pos:end="87:62"><expr pos:start="85:9" pos:end="87:61"><name pos:start="85:9" pos:end="85:11">ret</name> <operator pos:start="85:13" pos:end="85:13">=</operator> <call pos:start="85:15" pos:end="87:61"><name pos:start="85:15" pos:end="85:37">qemu_sendv_packet_async</name><argument_list pos:start="85:38" pos:end="87:61">(<argument pos:start="85:39" pos:end="85:49"><expr pos:start="85:39" pos:end="85:49"><operator pos:start="85:39" pos:end="85:39">&amp;</operator><name pos:start="85:40" pos:end="85:49"><name pos:start="85:40" pos:end="85:40">n</name><operator pos:start="85:41" pos:end="85:42">-&gt;</operator><name pos:start="85:43" pos:end="85:45">nic</name><operator pos:start="85:46" pos:end="85:47">-&gt;</operator><name pos:start="85:48" pos:end="85:49">nc</name></name></expr></argument>, <argument pos:start="85:52" pos:end="85:57"><expr pos:start="85:52" pos:end="85:57"><name pos:start="85:52" pos:end="85:57">out_sg</name></expr></argument>, <argument pos:start="85:60" pos:end="85:66"><expr pos:start="85:60" pos:end="85:66"><name pos:start="85:60" pos:end="85:66">out_num</name></expr></argument>,

                                      <argument pos:start="87:39" pos:end="87:60"><expr pos:start="87:39" pos:end="87:60"><name pos:start="87:39" pos:end="87:60">virtio_net_tx_complete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="89:9" pos:end="99:9"><if pos:start="89:9" pos:end="99:9">if <condition pos:start="89:12" pos:end="89:21">(<expr pos:start="89:13" pos:end="89:20"><name pos:start="89:13" pos:end="89:15">ret</name> <operator pos:start="89:17" pos:end="89:18">==</operator> <literal type="number" pos:start="89:20" pos:end="89:20">0</literal></expr>)</condition> <block pos:start="89:23" pos:end="99:9">{<block_content pos:start="91:13" pos:end="97:26">

            <expr_stmt pos:start="91:13" pos:end="91:55"><expr pos:start="91:13" pos:end="91:54"><call pos:start="91:13" pos:end="91:54"><name pos:start="91:13" pos:end="91:41">virtio_queue_set_notification</name><argument_list pos:start="91:42" pos:end="91:54">(<argument pos:start="91:43" pos:end="91:50"><expr pos:start="91:43" pos:end="91:50"><name pos:start="91:43" pos:end="91:50"><name pos:start="91:43" pos:end="91:43">n</name><operator pos:start="91:44" pos:end="91:45">-&gt;</operator><name pos:start="91:46" pos:end="91:50">tx_vq</name></name></expr></argument>, <argument pos:start="91:53" pos:end="91:53"><expr pos:start="91:53" pos:end="91:53"><literal type="number" pos:start="91:53" pos:end="91:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:36"><expr pos:start="93:13" pos:end="93:35"><name pos:start="93:13" pos:end="93:28"><name pos:start="93:13" pos:end="93:13">n</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:23">async_tx</name><operator pos:start="93:24" pos:end="93:24">.</operator><name pos:start="93:25" pos:end="93:28">elem</name></name> <operator pos:start="93:30" pos:end="93:30">=</operator> <name pos:start="93:32" pos:end="93:35">elem</name></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:35"><expr pos:start="95:13" pos:end="95:34"><name pos:start="95:13" pos:end="95:27"><name pos:start="95:13" pos:end="95:13">n</name><operator pos:start="95:14" pos:end="95:15">-&gt;</operator><name pos:start="95:16" pos:end="95:23">async_tx</name><operator pos:start="95:24" pos:end="95:24">.</operator><name pos:start="95:25" pos:end="95:27">len</name></name>  <operator pos:start="95:30" pos:end="95:30">=</operator> <name pos:start="95:32" pos:end="95:34">len</name></expr>;</expr_stmt>

            <return pos:start="97:13" pos:end="97:26">return <expr pos:start="97:20" pos:end="97:25"><operator pos:start="97:20" pos:end="97:20">-</operator><name pos:start="97:21" pos:end="97:25">EBUSY</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="103:9" pos:end="103:19"><expr pos:start="103:9" pos:end="103:18"><name pos:start="103:9" pos:end="103:11">len</name> <operator pos:start="103:13" pos:end="103:14">+=</operator> <name pos:start="103:16" pos:end="103:18">ret</name></expr>;</expr_stmt>



        <expr_stmt pos:start="107:9" pos:end="107:39"><expr pos:start="107:9" pos:end="107:38"><call pos:start="107:9" pos:end="107:38"><name pos:start="107:9" pos:end="107:22">virtqueue_push</name><argument_list pos:start="107:23" pos:end="107:38">(<argument pos:start="107:24" pos:end="107:25"><expr pos:start="107:24" pos:end="107:25"><name pos:start="107:24" pos:end="107:25">vq</name></expr></argument>, <argument pos:start="107:28" pos:end="107:32"><expr pos:start="107:28" pos:end="107:32"><operator pos:start="107:28" pos:end="107:28">&amp;</operator><name pos:start="107:29" pos:end="107:32">elem</name></expr></argument>, <argument pos:start="107:35" pos:end="107:37"><expr pos:start="107:35" pos:end="107:37"><name pos:start="107:35" pos:end="107:37">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:36"><expr pos:start="109:9" pos:end="109:35"><call pos:start="109:9" pos:end="109:35"><name pos:start="109:9" pos:end="109:21">virtio_notify</name><argument_list pos:start="109:22" pos:end="109:35">(<argument pos:start="109:23" pos:end="109:30"><expr pos:start="109:23" pos:end="109:30"><operator pos:start="109:23" pos:end="109:23">&amp;</operator><name pos:start="109:24" pos:end="109:30"><name pos:start="109:24" pos:end="109:24">n</name><operator pos:start="109:25" pos:end="109:26">-&gt;</operator><name pos:start="109:27" pos:end="109:30">vdev</name></name></expr></argument>, <argument pos:start="109:33" pos:end="109:34"><expr pos:start="109:33" pos:end="109:34"><name pos:start="109:33" pos:end="109:34">vq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="113:9" pos:end="117:9"><if pos:start="113:9" pos:end="117:9">if <condition pos:start="113:12" pos:end="113:41">(<expr pos:start="113:13" pos:end="113:40"><operator pos:start="113:13" pos:end="113:14">++</operator><name pos:start="113:15" pos:end="113:25">num_packets</name> <operator pos:start="113:27" pos:end="113:28">&gt;=</operator> <name pos:start="113:30" pos:end="113:40"><name pos:start="113:30" pos:end="113:30">n</name><operator pos:start="113:31" pos:end="113:32">-&gt;</operator><name pos:start="113:33" pos:end="113:40">tx_burst</name></name></expr>)</condition> <block pos:start="113:43" pos:end="117:9">{<block_content pos:start="115:13" pos:end="115:18">

            <break pos:start="115:13" pos:end="115:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>

    <return pos:start="121:5" pos:end="121:23">return <expr pos:start="121:12" pos:end="121:22"><name pos:start="121:12" pos:end="121:22">num_packets</name></expr>;</return>

</block_content>}</block></function>
</unit>
