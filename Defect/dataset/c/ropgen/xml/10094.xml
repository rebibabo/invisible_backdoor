<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10094.c" pos:tabs="8"><function pos:start="1:1" pos:end="35:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:19">coroutine_fn</name> <name pos:start="1:21" pos:end="1:23">int</name></type> <name pos:start="1:25" pos:end="1:35">send_co_req</name><parameter_list pos:start="1:36" pos:end="3:55">(<parameter pos:start="1:37" pos:end="1:46"><decl pos:start="1:37" pos:end="1:46"><type pos:start="1:37" pos:end="1:46"><name pos:start="1:37" pos:end="1:39">int</name></type> <name pos:start="1:41" pos:end="1:46">sockfd</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:64"><decl pos:start="1:49" pos:end="1:64"><type pos:start="1:49" pos:end="1:64"><name pos:start="1:49" pos:end="1:59">SheepdogReq</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:64">hdr</name></decl></parameter>, <parameter pos:start="1:67" pos:end="1:76"><decl pos:start="1:67" pos:end="1:76"><type pos:start="1:67" pos:end="1:76"><name pos:start="1:67" pos:end="1:70">void</name> <modifier pos:start="1:72" pos:end="1:72">*</modifier></type><name pos:start="1:73" pos:end="1:76">data</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:54"><decl pos:start="3:37" pos:end="3:54"><type pos:start="3:37" pos:end="3:54"><name pos:start="3:37" pos:end="3:44">unsigned</name> <name pos:start="3:46" pos:end="3:48">int</name> <modifier pos:start="3:50" pos:end="3:50">*</modifier></type><name pos:start="3:51" pos:end="3:54">wlen</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="35:1">{<block_content pos:start="7:5" pos:end="33:15">

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:50"><expr pos:start="11:5" pos:end="11:49"><name pos:start="11:5" pos:end="11:7">ret</name> <operator pos:start="11:9" pos:end="11:9">=</operator> <call pos:start="11:11" pos:end="11:49"><name pos:start="11:11" pos:end="11:22">qemu_co_send</name><argument_list pos:start="11:23" pos:end="11:49">(<argument pos:start="11:24" pos:end="11:29"><expr pos:start="11:24" pos:end="11:29"><name pos:start="11:24" pos:end="11:29">sockfd</name></expr></argument>, <argument pos:start="11:32" pos:end="11:34"><expr pos:start="11:32" pos:end="11:34"><name pos:start="11:32" pos:end="11:34">hdr</name></expr></argument>, <argument pos:start="11:37" pos:end="11:48"><expr pos:start="11:37" pos:end="11:48"><sizeof pos:start="11:37" pos:end="11:48">sizeof<argument_list pos:start="11:43" pos:end="11:48">(<argument pos:start="11:44" pos:end="11:47"><expr pos:start="11:44" pos:end="11:47"><operator pos:start="11:44" pos:end="11:44">*</operator><name pos:start="11:45" pos:end="11:47">hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:27">(<expr pos:start="13:9" pos:end="13:26"><name pos:start="13:9" pos:end="13:11">ret</name> <operator pos:start="13:13" pos:end="13:13">&lt;</operator> <sizeof pos:start="13:15" pos:end="13:26">sizeof<argument_list pos:start="13:21" pos:end="13:26">(<argument pos:start="13:22" pos:end="13:25"><expr pos:start="13:22" pos:end="13:25"><operator pos:start="13:22" pos:end="13:22">*</operator><name pos:start="13:23" pos:end="13:25">hdr</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="13:29" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:19">

        <expr_stmt pos:start="15:9" pos:end="15:66"><expr pos:start="15:9" pos:end="15:65"><call pos:start="15:9" pos:end="15:65"><name pos:start="15:9" pos:end="15:20">error_report</name><argument_list pos:start="15:21" pos:end="15:65">(<argument pos:start="15:22" pos:end="15:47"><expr pos:start="15:22" pos:end="15:47"><literal type="string" pos:start="15:22" pos:end="15:47">"failed to send a req, %s"</literal></expr></argument>, <argument pos:start="15:50" pos:end="15:64"><expr pos:start="15:50" pos:end="15:64"><call pos:start="15:50" pos:end="15:64"><name pos:start="15:50" pos:end="15:57">strerror</name><argument_list pos:start="15:58" pos:end="15:64">(<argument pos:start="15:59" pos:end="15:63"><expr pos:start="15:59" pos:end="15:63"><name pos:start="15:59" pos:end="15:63">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:19">return <expr pos:start="17:16" pos:end="17:18"><name pos:start="17:16" pos:end="17:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:44"><expr pos:start="23:5" pos:end="23:43"><name pos:start="23:5" pos:end="23:7">ret</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <call pos:start="23:11" pos:end="23:43"><name pos:start="23:11" pos:end="23:22">qemu_co_send</name><argument_list pos:start="23:23" pos:end="23:43">(<argument pos:start="23:24" pos:end="23:29"><expr pos:start="23:24" pos:end="23:29"><name pos:start="23:24" pos:end="23:29">sockfd</name></expr></argument>, <argument pos:start="23:32" pos:end="23:35"><expr pos:start="23:32" pos:end="23:35"><name pos:start="23:32" pos:end="23:35">data</name></expr></argument>, <argument pos:start="23:38" pos:end="23:42"><expr pos:start="23:38" pos:end="23:42"><operator pos:start="23:38" pos:end="23:38">*</operator><name pos:start="23:39" pos:end="23:42">wlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:20">(<expr pos:start="25:9" pos:end="25:19"><name pos:start="25:9" pos:end="25:11">ret</name> <operator pos:start="25:13" pos:end="25:13">&lt;</operator> <operator pos:start="25:15" pos:end="25:15">*</operator><name pos:start="25:16" pos:end="25:19">wlen</name></expr>)</condition> <block pos:start="25:22" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:66">

        <expr_stmt pos:start="27:9" pos:end="27:66"><expr pos:start="27:9" pos:end="27:65"><call pos:start="27:9" pos:end="27:65"><name pos:start="27:9" pos:end="27:20">error_report</name><argument_list pos:start="27:21" pos:end="27:65">(<argument pos:start="27:22" pos:end="27:47"><expr pos:start="27:22" pos:end="27:47"><literal type="string" pos:start="27:22" pos:end="27:47">"failed to send a req, %s"</literal></expr></argument>, <argument pos:start="27:50" pos:end="27:64"><expr pos:start="27:50" pos:end="27:64"><call pos:start="27:50" pos:end="27:64"><name pos:start="27:50" pos:end="27:57">strerror</name><argument_list pos:start="27:58" pos:end="27:64">(<argument pos:start="27:59" pos:end="27:63"><expr pos:start="27:59" pos:end="27:63"><name pos:start="27:59" pos:end="27:63">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="33:5" pos:end="33:15">return <expr pos:start="33:12" pos:end="33:14"><name pos:start="33:12" pos:end="33:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
