<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12422.c" pos:tabs="8"><function pos:start="1:1" pos:end="25:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">ssize_t</name></type> <name pos:start="1:16" pos:end="1:33">write_console_data</name><parameter_list pos:start="1:34" pos:end="3:45">(<parameter pos:start="1:35" pos:end="1:50"><decl pos:start="1:35" pos:end="1:50"><type pos:start="1:35" pos:end="1:50"><name pos:start="1:35" pos:end="1:43">SCLPEvent</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:50">event</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:70"><decl pos:start="1:53" pos:end="1:70"><type pos:start="1:53" pos:end="1:70"><specifier pos:start="1:53" pos:end="1:57">const</specifier> <name pos:start="1:59" pos:end="1:65">uint8_t</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:70">buf</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:44"><decl pos:start="3:35" pos:end="3:44"><type pos:start="3:35" pos:end="3:44"><name pos:start="3:35" pos:end="3:40">size_t</name></type> <name pos:start="3:42" pos:end="3:44">len</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="25:1">{<block_content pos:start="7:5" pos:end="23:54">

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:43"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">SCLPConsole</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:21">scon</name> <init pos:start="7:23" pos:end="7:43">= <expr pos:start="7:25" pos:end="7:43"><call pos:start="7:25" pos:end="7:43"><name pos:start="7:25" pos:end="7:36">SCLP_CONSOLE</name><argument_list pos:start="7:37" pos:end="7:43">(<argument pos:start="7:38" pos:end="7:42"><expr pos:start="7:38" pos:end="7:42"><name pos:start="7:38" pos:end="7:42">event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="17:5"><if pos:start="11:5" pos:end="17:5">if <condition pos:start="11:8" pos:end="11:19">(<expr pos:start="11:9" pos:end="11:18"><operator pos:start="11:9" pos:end="11:9">!</operator><name pos:start="11:10" pos:end="11:18"><name pos:start="11:10" pos:end="11:13">scon</name><operator pos:start="11:14" pos:end="11:15">-&gt;</operator><name pos:start="11:16" pos:end="11:18">chr</name></name></expr>)</condition> <block pos:start="11:21" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:19">

        <comment type="block" pos:start="13:9" pos:end="13:74">/* If there's no backend, we can just say we consumed all data. */</comment>

        <return pos:start="15:9" pos:end="15:19">return <expr pos:start="15:16" pos:end="15:18"><name pos:start="15:16" pos:end="15:18">len</name></expr>;</return>

    </block_content>}</block></if></if_stmt>





    <return pos:start="23:5" pos:end="23:54">return <expr pos:start="23:12" pos:end="23:53"><call pos:start="23:12" pos:end="23:53"><name pos:start="23:12" pos:end="23:32">qemu_chr_fe_write_all</name><argument_list pos:start="23:33" pos:end="23:53">(<argument pos:start="23:34" pos:end="23:42"><expr pos:start="23:34" pos:end="23:42"><name pos:start="23:34" pos:end="23:42"><name pos:start="23:34" pos:end="23:37">scon</name><operator pos:start="23:38" pos:end="23:39">-&gt;</operator><name pos:start="23:40" pos:end="23:42">chr</name></name></expr></argument>, <argument pos:start="23:45" pos:end="23:47"><expr pos:start="23:45" pos:end="23:47"><name pos:start="23:45" pos:end="23:47">buf</name></expr></argument>, <argument pos:start="23:50" pos:end="23:52"><expr pos:start="23:50" pos:end="23:52"><name pos:start="23:50" pos:end="23:52">len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function></unit>
