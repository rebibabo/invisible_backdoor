<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8709.c" pos:tabs="8"><function pos:start="1:1" pos:end="113:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">init_input_stream</name><parameter_list pos:start="1:29" pos:end="1:71">(<parameter pos:start="1:30" pos:end="1:42"><decl pos:start="1:30" pos:end="1:42"><type pos:start="1:30" pos:end="1:42"><name pos:start="1:30" pos:end="1:32">int</name></type> <name pos:start="1:34" pos:end="1:42">ist_index</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:55"><decl pos:start="1:45" pos:end="1:55"><type pos:start="1:45" pos:end="1:55"><name pos:start="1:45" pos:end="1:48">char</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:55">error</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:70"><decl pos:start="1:58" pos:end="1:70"><type pos:start="1:58" pos:end="1:70"><name pos:start="1:58" pos:end="1:60">int</name></type> <name pos:start="1:62" pos:end="1:70">error_len</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="113:1">{<block_content pos:start="5:5" pos:end="111:13">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:48"><decl pos:start="7:5" pos:end="7:47"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">InputStream</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">ist</name> <init pos:start="7:22" pos:end="7:47">= <expr pos:start="7:24" pos:end="7:47"><name pos:start="7:24" pos:end="7:47"><name pos:start="7:24" pos:end="7:36">input_streams</name><index pos:start="7:37" pos:end="7:47">[<expr pos:start="7:38" pos:end="7:46"><name pos:start="7:38" pos:end="7:46">ist_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="9:5" pos:end="97:5"><if pos:start="9:5" pos:end="97:5">if <condition pos:start="9:8" pos:end="9:29">(<expr pos:start="9:9" pos:end="9:28"><name pos:start="9:9" pos:end="9:28"><name pos:start="9:9" pos:end="9:11">ist</name><operator pos:start="9:12" pos:end="9:13">-&gt;</operator><name pos:start="9:14" pos:end="9:28">decoding_needed</name></name></expr>)</condition> <block pos:start="9:31" pos:end="97:5">{<block_content pos:start="11:9" pos:end="95:9">

        <decl_stmt pos:start="11:9" pos:end="11:34"><decl pos:start="11:9" pos:end="11:33"><type pos:start="11:9" pos:end="11:17"><name pos:start="11:9" pos:end="11:15">AVCodec</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:22">codec</name> <init pos:start="11:24" pos:end="11:33">= <expr pos:start="11:26" pos:end="11:33"><name pos:start="11:26" pos:end="11:33"><name pos:start="11:26" pos:end="11:28">ist</name><operator pos:start="11:29" pos:end="11:30">-&gt;</operator><name pos:start="11:31" pos:end="11:33">dec</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="13:9" pos:end="21:9"><if pos:start="13:9" pos:end="21:9">if <condition pos:start="13:12" pos:end="13:19">(<expr pos:start="13:13" pos:end="13:18"><operator pos:start="13:13" pos:end="13:13">!</operator><name pos:start="13:14" pos:end="13:18">codec</name></expr>)</condition> <block pos:start="13:21" pos:end="21:9">{<block_content pos:start="15:13" pos:end="19:35">

            <expr_stmt pos:start="15:13" pos:end="17:79"><expr pos:start="15:13" pos:end="17:78"><call pos:start="15:13" pos:end="17:78"><name pos:start="15:13" pos:end="15:20">snprintf</name><argument_list pos:start="15:21" pos:end="17:78">(<argument pos:start="15:22" pos:end="15:26"><expr pos:start="15:22" pos:end="15:26"><name pos:start="15:22" pos:end="15:26">error</name></expr></argument>, <argument pos:start="15:29" pos:end="15:37"><expr pos:start="15:29" pos:end="15:37"><name pos:start="15:29" pos:end="15:37">error_len</name></expr></argument>, <argument pos:start="15:40" pos:end="15:96"><expr pos:start="15:40" pos:end="15:96"><literal type="string" pos:start="15:40" pos:end="15:96">"Decoder (codec id %d) not found for input stream #%d:%d"</literal></expr></argument>,

                    <argument pos:start="17:21" pos:end="17:44"><expr pos:start="17:21" pos:end="17:44"><name pos:start="17:21" pos:end="17:44"><name pos:start="17:21" pos:end="17:23">ist</name><operator pos:start="17:24" pos:end="17:25">-&gt;</operator><name pos:start="17:26" pos:end="17:27">st</name><operator pos:start="17:28" pos:end="17:29">-&gt;</operator><name pos:start="17:30" pos:end="17:34">codec</name><operator pos:start="17:35" pos:end="17:36">-&gt;</operator><name pos:start="17:37" pos:end="17:44">codec_id</name></name></expr></argument>, <argument pos:start="17:47" pos:end="17:61"><expr pos:start="17:47" pos:end="17:61"><name pos:start="17:47" pos:end="17:61"><name pos:start="17:47" pos:end="17:49">ist</name><operator pos:start="17:50" pos:end="17:51">-&gt;</operator><name pos:start="17:52" pos:end="17:61">file_index</name></name></expr></argument>, <argument pos:start="17:64" pos:end="17:77"><expr pos:start="17:64" pos:end="17:77"><name pos:start="17:64" pos:end="17:77"><name pos:start="17:64" pos:end="17:66">ist</name><operator pos:start="17:67" pos:end="17:68">-&gt;</operator><name pos:start="17:69" pos:end="17:70">st</name><operator pos:start="17:71" pos:end="17:72">-&gt;</operator><name pos:start="17:73" pos:end="17:77">index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="19:13" pos:end="19:35">return <expr pos:start="19:20" pos:end="19:34"><call pos:start="19:20" pos:end="19:34"><name pos:start="19:20" pos:end="19:26">AVERROR</name><argument_list pos:start="19:27" pos:end="19:34">(<argument pos:start="19:28" pos:end="19:33"><expr pos:start="19:28" pos:end="19:33"><name pos:start="19:28" pos:end="19:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="25:9" pos:end="27:49">/* update requested sample format for the decoder based on the

           corresponding encoder sample format */</comment>

        <for pos:start="29:9" pos:end="41:9">for <control pos:start="29:13" pos:end="29:47">(<init pos:start="29:14" pos:end="29:19"><expr pos:start="29:14" pos:end="29:18"><name pos:start="29:14" pos:end="29:14">i</name> <operator pos:start="29:16" pos:end="29:16">=</operator> <literal type="number" pos:start="29:18" pos:end="29:18">0</literal></expr>;</init> <condition pos:start="29:21" pos:end="29:42"><expr pos:start="29:21" pos:end="29:41"><name pos:start="29:21" pos:end="29:21">i</name> <operator pos:start="29:23" pos:end="29:23">&lt;</operator> <name pos:start="29:25" pos:end="29:41">nb_output_streams</name></expr>;</condition> <incr pos:start="29:44" pos:end="29:46"><expr pos:start="29:44" pos:end="29:46"><name pos:start="29:44" pos:end="29:44">i</name><operator pos:start="29:45" pos:end="29:46">++</operator></expr></incr>)</control> <block pos:start="29:49" pos:end="41:9">{<block_content pos:start="31:13" pos:end="39:13">

            <decl_stmt pos:start="31:13" pos:end="31:50"><decl pos:start="31:13" pos:end="31:49"><type pos:start="31:13" pos:end="31:26"><name pos:start="31:13" pos:end="31:24">OutputStream</name> <modifier pos:start="31:26" pos:end="31:26">*</modifier></type><name pos:start="31:27" pos:end="31:29">ost</name> <init pos:start="31:31" pos:end="31:49">= <expr pos:start="31:33" pos:end="31:49"><name pos:start="31:33" pos:end="31:49"><name pos:start="31:33" pos:end="31:46">output_streams</name><index pos:start="31:47" pos:end="31:49">[<expr pos:start="31:48" pos:end="31:48"><name pos:start="31:48" pos:end="31:48">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="33:13" pos:end="39:13"><if pos:start="33:13" pos:end="39:13">if <condition pos:start="33:16" pos:end="33:47">(<expr pos:start="33:17" pos:end="33:46"><name pos:start="33:17" pos:end="33:33"><name pos:start="33:17" pos:end="33:19">ost</name><operator pos:start="33:20" pos:end="33:21">-&gt;</operator><name pos:start="33:22" pos:end="33:33">source_index</name></name> <operator pos:start="33:35" pos:end="33:36">==</operator> <name pos:start="33:38" pos:end="33:46">ist_index</name></expr>)</condition> <block pos:start="33:49" pos:end="39:13">{<block_content pos:start="35:17" pos:end="37:22">

                <expr_stmt pos:start="35:17" pos:end="35:73"><expr pos:start="35:17" pos:end="35:72"><call pos:start="35:17" pos:end="35:72"><name pos:start="35:17" pos:end="35:33">update_sample_fmt</name><argument_list pos:start="35:34" pos:end="35:72">(<argument pos:start="35:35" pos:end="35:48"><expr pos:start="35:35" pos:end="35:48"><name pos:start="35:35" pos:end="35:48"><name pos:start="35:35" pos:end="35:37">ist</name><operator pos:start="35:38" pos:end="35:39">-&gt;</operator><name pos:start="35:40" pos:end="35:41">st</name><operator pos:start="35:42" pos:end="35:43">-&gt;</operator><name pos:start="35:44" pos:end="35:48">codec</name></name></expr></argument>, <argument pos:start="35:51" pos:end="35:55"><expr pos:start="35:51" pos:end="35:55"><name pos:start="35:51" pos:end="35:55">codec</name></expr></argument>, <argument pos:start="35:58" pos:end="35:71"><expr pos:start="35:58" pos:end="35:71"><name pos:start="35:58" pos:end="35:71"><name pos:start="35:58" pos:end="35:60">ost</name><operator pos:start="35:61" pos:end="35:62">-&gt;</operator><name pos:start="35:63" pos:end="35:64">st</name><operator pos:start="35:65" pos:end="35:66">-&gt;</operator><name pos:start="35:67" pos:end="35:71">codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="37:17" pos:end="37:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <if_stmt pos:start="45:9" pos:end="53:9"><if pos:start="45:9" pos:end="53:9">if <condition pos:start="45:12" pos:end="45:85">(<expr pos:start="45:13" pos:end="45:84"><name pos:start="45:13" pos:end="45:23"><name pos:start="45:13" pos:end="45:17">codec</name><operator pos:start="45:18" pos:end="45:19">-&gt;</operator><name pos:start="45:20" pos:end="45:23">type</name></name> <operator pos:start="45:25" pos:end="45:26">==</operator> <name pos:start="45:28" pos:end="45:45">AVMEDIA_TYPE_VIDEO</name> <operator pos:start="45:47" pos:end="45:48">&amp;&amp;</operator> <name pos:start="45:50" pos:end="45:68"><name pos:start="45:50" pos:end="45:54">codec</name><operator pos:start="45:55" pos:end="45:56">-&gt;</operator><name pos:start="45:57" pos:end="45:68">capabilities</name></name> <operator pos:start="45:70" pos:end="45:70">&amp;</operator> <name pos:start="45:72" pos:end="45:84">CODEC_CAP_DR1</name></expr>)</condition> <block pos:start="45:87" pos:end="53:9">{<block_content pos:start="47:13" pos:end="51:49">

            <expr_stmt pos:start="47:13" pos:end="47:62"><expr pos:start="47:13" pos:end="47:61"><name pos:start="47:13" pos:end="47:38"><name pos:start="47:13" pos:end="47:15">ist</name><operator pos:start="47:16" pos:end="47:17">-&gt;</operator><name pos:start="47:18" pos:end="47:19">st</name><operator pos:start="47:20" pos:end="47:21">-&gt;</operator><name pos:start="47:22" pos:end="47:26">codec</name><operator pos:start="47:27" pos:end="47:28">-&gt;</operator><name pos:start="47:29" pos:end="47:38">get_buffer</name></name>     <operator pos:start="47:44" pos:end="47:44">=</operator> <name pos:start="47:46" pos:end="47:61">codec_get_buffer</name></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:66"><expr pos:start="49:13" pos:end="49:65"><name pos:start="49:13" pos:end="49:42"><name pos:start="49:13" pos:end="49:15">ist</name><operator pos:start="49:16" pos:end="49:17">-&gt;</operator><name pos:start="49:18" pos:end="49:19">st</name><operator pos:start="49:20" pos:end="49:21">-&gt;</operator><name pos:start="49:22" pos:end="49:26">codec</name><operator pos:start="49:27" pos:end="49:28">-&gt;</operator><name pos:start="49:29" pos:end="49:42">release_buffer</name></name> <operator pos:start="49:44" pos:end="49:44">=</operator> <name pos:start="49:46" pos:end="49:65">codec_release_buffer</name></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:49"><expr pos:start="51:13" pos:end="51:48"><name pos:start="51:13" pos:end="51:34"><name pos:start="51:13" pos:end="51:15">ist</name><operator pos:start="51:16" pos:end="51:17">-&gt;</operator><name pos:start="51:18" pos:end="51:19">st</name><operator pos:start="51:20" pos:end="51:21">-&gt;</operator><name pos:start="51:22" pos:end="51:26">codec</name><operator pos:start="51:27" pos:end="51:28">-&gt;</operator><name pos:start="51:29" pos:end="51:34">opaque</name></name>         <operator pos:start="51:44" pos:end="51:44">=</operator> <name pos:start="51:46" pos:end="51:48">ist</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="57:9" pos:end="59:58"><if pos:start="57:9" pos:end="59:58">if <condition pos:start="57:12" pos:end="57:56">(<expr pos:start="57:13" pos:end="57:55"><operator pos:start="57:13" pos:end="57:13">!</operator><call pos:start="57:14" pos:end="57:55"><name pos:start="57:14" pos:end="57:24">av_dict_get</name><argument_list pos:start="57:25" pos:end="57:55">(<argument pos:start="57:26" pos:end="57:34"><expr pos:start="57:26" pos:end="57:34"><name pos:start="57:26" pos:end="57:34"><name pos:start="57:26" pos:end="57:28">ist</name><operator pos:start="57:29" pos:end="57:30">-&gt;</operator><name pos:start="57:31" pos:end="57:34">opts</name></name></expr></argument>, <argument pos:start="57:37" pos:end="57:45"><expr pos:start="57:37" pos:end="57:45"><literal type="string" pos:start="57:37" pos:end="57:45">"threads"</literal></expr></argument>, <argument pos:start="57:48" pos:end="57:51"><expr pos:start="57:48" pos:end="57:51"><name pos:start="57:48" pos:end="57:51">NULL</name></expr></argument>, <argument pos:start="57:54" pos:end="57:54"><expr pos:start="57:54" pos:end="57:54"><literal type="number" pos:start="57:54" pos:end="57:54">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="59:13" pos:end="59:58"><block_content pos:start="59:13" pos:end="59:58">

            <expr_stmt pos:start="59:13" pos:end="59:58"><expr pos:start="59:13" pos:end="59:57"><call pos:start="59:13" pos:end="59:57"><name pos:start="59:13" pos:end="59:23">av_dict_set</name><argument_list pos:start="59:24" pos:end="59:57">(<argument pos:start="59:25" pos:end="59:34"><expr pos:start="59:25" pos:end="59:34"><operator pos:start="59:25" pos:end="59:25">&amp;</operator><name pos:start="59:26" pos:end="59:34"><name pos:start="59:26" pos:end="59:28">ist</name><operator pos:start="59:29" pos:end="59:30">-&gt;</operator><name pos:start="59:31" pos:end="59:34">opts</name></name></expr></argument>, <argument pos:start="59:37" pos:end="59:45"><expr pos:start="59:37" pos:end="59:45"><literal type="string" pos:start="59:37" pos:end="59:45">"threads"</literal></expr></argument>, <argument pos:start="59:48" pos:end="59:53"><expr pos:start="59:48" pos:end="59:53"><literal type="string" pos:start="59:48" pos:end="59:53">"auto"</literal></expr></argument>, <argument pos:start="59:56" pos:end="59:56"><expr pos:start="59:56" pos:end="59:56"><literal type="number" pos:start="59:56" pos:end="59:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="61:9" pos:end="69:9"><if pos:start="61:9" pos:end="69:9">if <condition pos:start="61:12" pos:end="61:65">(<expr pos:start="61:13" pos:end="61:64"><call pos:start="61:13" pos:end="61:60"><name pos:start="61:13" pos:end="61:25">avcodec_open2</name><argument_list pos:start="61:26" pos:end="61:60">(<argument pos:start="61:27" pos:end="61:40"><expr pos:start="61:27" pos:end="61:40"><name pos:start="61:27" pos:end="61:40"><name pos:start="61:27" pos:end="61:29">ist</name><operator pos:start="61:30" pos:end="61:31">-&gt;</operator><name pos:start="61:32" pos:end="61:33">st</name><operator pos:start="61:34" pos:end="61:35">-&gt;</operator><name pos:start="61:36" pos:end="61:40">codec</name></name></expr></argument>, <argument pos:start="61:43" pos:end="61:47"><expr pos:start="61:43" pos:end="61:47"><name pos:start="61:43" pos:end="61:47">codec</name></expr></argument>, <argument pos:start="61:50" pos:end="61:59"><expr pos:start="61:50" pos:end="61:59"><operator pos:start="61:50" pos:end="61:50">&amp;</operator><name pos:start="61:51" pos:end="61:59"><name pos:start="61:51" pos:end="61:53">ist</name><operator pos:start="61:54" pos:end="61:55">-&gt;</operator><name pos:start="61:56" pos:end="61:59">opts</name></name></expr></argument>)</argument_list></call> <operator pos:start="61:62" pos:end="61:62">&lt;</operator> <literal type="number" pos:start="61:64" pos:end="61:64">0</literal></expr>)</condition> <block pos:start="61:67" pos:end="69:9">{<block_content pos:start="63:13" pos:end="67:35">

            <expr_stmt pos:start="63:13" pos:end="65:53"><expr pos:start="63:13" pos:end="65:52"><call pos:start="63:13" pos:end="65:52"><name pos:start="63:13" pos:end="63:20">snprintf</name><argument_list pos:start="63:21" pos:end="65:52">(<argument pos:start="63:22" pos:end="63:26"><expr pos:start="63:22" pos:end="63:26"><name pos:start="63:22" pos:end="63:26">error</name></expr></argument>, <argument pos:start="63:29" pos:end="63:37"><expr pos:start="63:29" pos:end="63:37"><name pos:start="63:29" pos:end="63:37">error_len</name></expr></argument>, <argument pos:start="63:40" pos:end="63:92"><expr pos:start="63:40" pos:end="63:92"><literal type="string" pos:start="63:40" pos:end="63:92">"Error while opening decoder for input stream #%d:%d"</literal></expr></argument>,

                    <argument pos:start="65:21" pos:end="65:35"><expr pos:start="65:21" pos:end="65:35"><name pos:start="65:21" pos:end="65:35"><name pos:start="65:21" pos:end="65:23">ist</name><operator pos:start="65:24" pos:end="65:25">-&gt;</operator><name pos:start="65:26" pos:end="65:35">file_index</name></name></expr></argument>, <argument pos:start="65:38" pos:end="65:51"><expr pos:start="65:38" pos:end="65:51"><name pos:start="65:38" pos:end="65:51"><name pos:start="65:38" pos:end="65:40">ist</name><operator pos:start="65:41" pos:end="65:42">-&gt;</operator><name pos:start="65:43" pos:end="65:44">st</name><operator pos:start="65:45" pos:end="65:46">-&gt;</operator><name pos:start="65:47" pos:end="65:51">index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="67:13" pos:end="67:35">return <expr pos:start="67:20" pos:end="67:34"><call pos:start="67:20" pos:end="67:34"><name pos:start="67:20" pos:end="67:26">AVERROR</name><argument_list pos:start="67:27" pos:end="67:34">(<argument pos:start="67:28" pos:end="67:33"><expr pos:start="67:28" pos:end="67:33"><name pos:start="67:28" pos:end="67:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:53"><expr pos:start="71:9" pos:end="71:52"><call pos:start="71:9" pos:end="71:52"><name pos:start="71:9" pos:end="71:33">assert_codec_experimental</name><argument_list pos:start="71:34" pos:end="71:52">(<argument pos:start="71:35" pos:end="71:48"><expr pos:start="71:35" pos:end="71:48"><name pos:start="71:35" pos:end="71:48"><name pos:start="71:35" pos:end="71:37">ist</name><operator pos:start="71:38" pos:end="71:39">-&gt;</operator><name pos:start="71:40" pos:end="71:41">st</name><operator pos:start="71:42" pos:end="71:43">-&gt;</operator><name pos:start="71:44" pos:end="71:48">codec</name></name></expr></argument>, <argument pos:start="71:51" pos:end="71:51"><expr pos:start="71:51" pos:end="71:51"><literal type="number" pos:start="71:51" pos:end="71:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:36"><expr pos:start="73:9" pos:end="73:35"><call pos:start="73:9" pos:end="73:35"><name pos:start="73:9" pos:end="73:24">assert_avoptions</name><argument_list pos:start="73:25" pos:end="73:35">(<argument pos:start="73:26" pos:end="73:34"><expr pos:start="73:26" pos:end="73:34"><name pos:start="73:26" pos:end="73:34"><name pos:start="73:26" pos:end="73:28">ist</name><operator pos:start="73:29" pos:end="73:30">-&gt;</operator><name pos:start="73:31" pos:end="73:34">opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="77:9" pos:end="95:9"><if pos:start="77:9" pos:end="95:9">if <condition pos:start="77:12" pos:end="77:61">(<expr pos:start="77:13" pos:end="77:60"><name pos:start="77:13" pos:end="77:38"><name pos:start="77:13" pos:end="77:15">ist</name><operator pos:start="77:16" pos:end="77:17">-&gt;</operator><name pos:start="77:18" pos:end="77:19">st</name><operator pos:start="77:20" pos:end="77:21">-&gt;</operator><name pos:start="77:22" pos:end="77:26">codec</name><operator pos:start="77:27" pos:end="77:28">-&gt;</operator><name pos:start="77:29" pos:end="77:38">codec_type</name></name> <operator pos:start="77:40" pos:end="77:41">==</operator> <name pos:start="77:43" pos:end="77:60">AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block pos:start="77:63" pos:end="95:9">{<block_content pos:start="79:13" pos:end="93:13">

            <for pos:start="79:13" pos:end="93:13">for <control pos:start="79:17" pos:end="79:51">(<init pos:start="79:18" pos:end="79:23"><expr pos:start="79:18" pos:end="79:22"><name pos:start="79:18" pos:end="79:18">i</name> <operator pos:start="79:20" pos:end="79:20">=</operator> <literal type="number" pos:start="79:22" pos:end="79:22">0</literal></expr>;</init> <condition pos:start="79:25" pos:end="79:46"><expr pos:start="79:25" pos:end="79:45"><name pos:start="79:25" pos:end="79:25">i</name> <operator pos:start="79:27" pos:end="79:27">&lt;</operator> <name pos:start="79:29" pos:end="79:45">nb_output_streams</name></expr>;</condition> <incr pos:start="79:48" pos:end="79:50"><expr pos:start="79:48" pos:end="79:50"><name pos:start="79:48" pos:end="79:48">i</name><operator pos:start="79:49" pos:end="79:50">++</operator></expr></incr>)</control> <block pos:start="79:53" pos:end="93:13">{<block_content pos:start="81:17" pos:end="91:17">

                <decl_stmt pos:start="81:17" pos:end="81:54"><decl pos:start="81:17" pos:end="81:53"><type pos:start="81:17" pos:end="81:30"><name pos:start="81:17" pos:end="81:28">OutputStream</name> <modifier pos:start="81:30" pos:end="81:30">*</modifier></type><name pos:start="81:31" pos:end="81:33">ost</name> <init pos:start="81:35" pos:end="81:53">= <expr pos:start="81:37" pos:end="81:53"><name pos:start="81:37" pos:end="81:53"><name pos:start="81:37" pos:end="81:50">output_streams</name><index pos:start="81:51" pos:end="81:53">[<expr pos:start="81:52" pos:end="81:52"><name pos:start="81:52" pos:end="81:52">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="83:17" pos:end="91:17"><if pos:start="83:17" pos:end="91:17">if <condition pos:start="83:20" pos:end="83:51">(<expr pos:start="83:21" pos:end="83:50"><name pos:start="83:21" pos:end="83:37"><name pos:start="83:21" pos:end="83:23">ost</name><operator pos:start="83:24" pos:end="83:25">-&gt;</operator><name pos:start="83:26" pos:end="83:37">source_index</name></name> <operator pos:start="83:39" pos:end="83:40">==</operator> <name pos:start="83:42" pos:end="83:50">ist_index</name></expr>)</condition> <block pos:start="83:53" pos:end="91:17">{<block_content pos:start="85:21" pos:end="89:26">

                    <if_stmt pos:start="85:21" pos:end="87:62"><if pos:start="85:21" pos:end="87:62">if <condition pos:start="85:24" pos:end="85:91">(<expr pos:start="85:25" pos:end="85:90"><operator pos:start="85:25" pos:end="85:25">!</operator><name pos:start="85:26" pos:end="85:55"><name pos:start="85:26" pos:end="85:28">ist</name><operator pos:start="85:29" pos:end="85:30">-&gt;</operator><name pos:start="85:31" pos:end="85:32">st</name><operator pos:start="85:33" pos:end="85:34">-&gt;</operator><name pos:start="85:35" pos:end="85:39">codec</name><operator pos:start="85:40" pos:end="85:41">-&gt;</operator><name pos:start="85:42" pos:end="85:55">channel_layout</name></name> <operator pos:start="85:57" pos:end="85:58">||</operator> <operator pos:start="85:60" pos:end="85:60">!</operator><name pos:start="85:61" pos:end="85:90"><name pos:start="85:61" pos:end="85:63">ost</name><operator pos:start="85:64" pos:end="85:65">-&gt;</operator><name pos:start="85:66" pos:end="85:67">st</name><operator pos:start="85:68" pos:end="85:69">-&gt;</operator><name pos:start="85:70" pos:end="85:74">codec</name><operator pos:start="85:75" pos:end="85:76">-&gt;</operator><name pos:start="85:77" pos:end="85:90">channel_layout</name></name></expr>)</condition><block type="pseudo" pos:start="87:25" pos:end="87:62"><block_content pos:start="87:25" pos:end="87:62">

                        <expr_stmt pos:start="87:25" pos:end="87:62"><expr pos:start="87:25" pos:end="87:61"><call pos:start="87:25" pos:end="87:61"><name pos:start="87:25" pos:end="87:51">get_default_channel_layouts</name><argument_list pos:start="87:52" pos:end="87:61">(<argument pos:start="87:53" pos:end="87:55"><expr pos:start="87:53" pos:end="87:55"><name pos:start="87:53" pos:end="87:55">ost</name></expr></argument>, <argument pos:start="87:58" pos:end="87:60"><expr pos:start="87:58" pos:end="87:60"><name pos:start="87:58" pos:end="87:60">ist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <break pos:start="89:21" pos:end="89:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="101:5" pos:end="101:134"><expr pos:start="101:5" pos:end="101:133"><name pos:start="101:5" pos:end="101:17"><name pos:start="101:5" pos:end="101:7">ist</name><operator pos:start="101:8" pos:end="101:9">-&gt;</operator><name pos:start="101:10" pos:end="101:17">last_dts</name></name> <operator pos:start="101:19" pos:end="101:19">=</operator> <ternary pos:start="101:21" pos:end="101:133"><condition pos:start="101:21" pos:end="101:49"><expr pos:start="101:21" pos:end="101:47"><name pos:start="101:21" pos:end="101:47"><name pos:start="101:21" pos:end="101:23">ist</name><operator pos:start="101:24" pos:end="101:25">-&gt;</operator><name pos:start="101:26" pos:end="101:27">st</name><operator pos:start="101:28" pos:end="101:29">-&gt;</operator><name pos:start="101:30" pos:end="101:43">avg_frame_rate</name><operator pos:start="101:44" pos:end="101:44">.</operator><name pos:start="101:45" pos:end="101:47">num</name></name></expr> ?</condition><then pos:start="101:51" pos:end="101:129"> <expr pos:start="101:51" pos:end="101:129"><operator pos:start="101:51" pos:end="101:51">-</operator> <name pos:start="101:53" pos:end="101:80"><name pos:start="101:53" pos:end="101:55">ist</name><operator pos:start="101:56" pos:end="101:57">-&gt;</operator><name pos:start="101:58" pos:end="101:59">st</name><operator pos:start="101:60" pos:end="101:61">-&gt;</operator><name pos:start="101:62" pos:end="101:66">codec</name><operator pos:start="101:67" pos:end="101:68">-&gt;</operator><name pos:start="101:69" pos:end="101:80">has_b_frames</name></name> <operator pos:start="101:82" pos:end="101:82">*</operator> <name pos:start="101:84" pos:end="101:95">AV_TIME_BASE</name> <operator pos:start="101:97" pos:end="101:97">/</operator> <call pos:start="101:99" pos:end="101:129"><name pos:start="101:99" pos:end="101:104">av_q2d</name><argument_list pos:start="101:105" pos:end="101:129">(<argument pos:start="101:106" pos:end="101:128"><expr pos:start="101:106" pos:end="101:128"><name pos:start="101:106" pos:end="101:128"><name pos:start="101:106" pos:end="101:108">ist</name><operator pos:start="101:109" pos:end="101:110">-&gt;</operator><name pos:start="101:111" pos:end="101:112">st</name><operator pos:start="101:113" pos:end="101:114">-&gt;</operator><name pos:start="101:115" pos:end="101:128">avg_frame_rate</name></name></expr></argument>)</argument_list></call></expr> </then><else pos:start="101:131" pos:end="101:133">: <expr pos:start="101:133" pos:end="101:133"><literal type="number" pos:start="101:133" pos:end="101:133">0</literal></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:35"><expr pos:start="103:5" pos:end="103:34"><name pos:start="103:5" pos:end="103:17"><name pos:start="103:5" pos:end="103:7">ist</name><operator pos:start="103:8" pos:end="103:9">-&gt;</operator><name pos:start="103:10" pos:end="103:17">next_dts</name></name> <operator pos:start="103:19" pos:end="103:19">=</operator> <name pos:start="103:21" pos:end="103:34">AV_NOPTS_VALUE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:39"><expr pos:start="105:5" pos:end="105:38"><call pos:start="105:5" pos:end="105:38"><name pos:start="105:5" pos:end="105:23">init_pts_correction</name><argument_list pos:start="105:24" pos:end="105:38">(<argument pos:start="105:25" pos:end="105:37"><expr pos:start="105:25" pos:end="105:37"><operator pos:start="105:25" pos:end="105:25">&amp;</operator><name pos:start="105:26" pos:end="105:37"><name pos:start="105:26" pos:end="105:28">ist</name><operator pos:start="105:29" pos:end="105:30">-&gt;</operator><name pos:start="105:31" pos:end="105:37">pts_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:22"><expr pos:start="107:5" pos:end="107:21"><name pos:start="107:5" pos:end="107:17"><name pos:start="107:5" pos:end="107:7">ist</name><operator pos:start="107:8" pos:end="107:9">-&gt;</operator><name pos:start="107:10" pos:end="107:17">is_start</name></name> <operator pos:start="107:19" pos:end="107:19">=</operator> <literal type="number" pos:start="107:21" pos:end="107:21">1</literal></expr>;</expr_stmt>



    <return pos:start="111:5" pos:end="111:13">return <expr pos:start="111:12" pos:end="111:12"><literal type="number" pos:start="111:12" pos:end="111:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
