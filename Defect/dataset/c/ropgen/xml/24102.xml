<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24102.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:40">vfio_probe_nvidia_bar0_quirk</name><parameter_list pos:start="1:41" pos:end="1:69">(<parameter pos:start="1:42" pos:end="1:60"><decl pos:start="1:42" pos:end="1:60"><type pos:start="1:42" pos:end="1:60"><name pos:start="1:42" pos:end="1:54">VFIOPCIDevice</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:60">vdev</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:68"><decl pos:start="1:63" pos:end="1:68"><type pos:start="1:63" pos:end="1:68"><name pos:start="1:63" pos:end="1:65">int</name></type> <name pos:start="1:67" pos:end="1:68">nr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="97:1">{<block_content pos:start="5:5" pos:end="95:60">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">VFIOQuirk</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:20">quirk</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:27"><name pos:start="7:5" pos:end="7:25">VFIOConfigMirrorQuirk</name> <modifier pos:start="7:27" pos:end="7:27">*</modifier></type><name pos:start="7:28" pos:end="7:33">mirror</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="17:5"><if pos:start="11:5" pos:end="17:5">if <condition pos:start="11:8" pos:end="13:38">(<expr pos:start="11:9" pos:end="13:37"><operator pos:start="11:9" pos:end="11:9">!</operator><call pos:start="11:10" pos:end="11:60"><name pos:start="11:10" pos:end="11:20">vfio_pci_is</name><argument_list pos:start="11:21" pos:end="11:60">(<argument pos:start="11:22" pos:end="11:25"><expr pos:start="11:22" pos:end="11:25"><name pos:start="11:22" pos:end="11:25">vdev</name></expr></argument>, <argument pos:start="11:28" pos:end="11:47"><expr pos:start="11:28" pos:end="11:47"><name pos:start="11:28" pos:end="11:47">PCI_VENDOR_ID_NVIDIA</name></expr></argument>, <argument pos:start="11:50" pos:end="11:59"><expr pos:start="11:50" pos:end="11:59"><name pos:start="11:50" pos:end="11:59">PCI_ANY_ID</name></expr></argument>)</argument_list></call> <operator pos:start="11:62" pos:end="11:63">||</operator>

        <operator pos:start="13:9" pos:end="13:9">!</operator><call pos:start="13:10" pos:end="13:26"><name pos:start="13:10" pos:end="13:20">vfio_is_vga</name><argument_list pos:start="13:21" pos:end="13:26">(<argument pos:start="13:22" pos:end="13:25"><expr pos:start="13:22" pos:end="13:25"><name pos:start="13:22" pos:end="13:25">vdev</name></expr></argument>)</argument_list></call> <operator pos:start="13:28" pos:end="13:29">||</operator> <name pos:start="13:31" pos:end="13:32">nr</name> <operator pos:start="13:34" pos:end="13:35">!=</operator> <literal type="number" pos:start="13:37" pos:end="13:37">0</literal></expr>)</condition> <block pos:start="13:40" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:15">

        <return pos:start="15:9" pos:end="15:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:38"><expr pos:start="21:5" pos:end="21:37"><name pos:start="21:5" pos:end="21:9">quirk</name> <operator pos:start="21:11" pos:end="21:11">=</operator> <call pos:start="21:13" pos:end="21:37"><name pos:start="21:13" pos:end="21:21">g_malloc0</name><argument_list pos:start="21:22" pos:end="21:37">(<argument pos:start="21:23" pos:end="21:36"><expr pos:start="21:23" pos:end="21:36"><sizeof pos:start="21:23" pos:end="21:36">sizeof<argument_list pos:start="21:29" pos:end="21:36">(<argument pos:start="21:30" pos:end="21:35"><expr pos:start="21:30" pos:end="21:35"><operator pos:start="21:30" pos:end="21:30">*</operator><name pos:start="21:31" pos:end="21:35">quirk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:54"><expr pos:start="23:5" pos:end="23:53"><name pos:start="23:5" pos:end="23:10">mirror</name> <operator pos:start="23:12" pos:end="23:12">=</operator> <name pos:start="23:14" pos:end="23:24"><name pos:start="23:14" pos:end="23:18">quirk</name><operator pos:start="23:19" pos:end="23:20">-&gt;</operator><name pos:start="23:21" pos:end="23:24">data</name></name> <operator pos:start="23:26" pos:end="23:26">=</operator> <call pos:start="23:28" pos:end="23:53"><name pos:start="23:28" pos:end="23:36">g_malloc0</name><argument_list pos:start="23:37" pos:end="23:53">(<argument pos:start="23:38" pos:end="23:52"><expr pos:start="23:38" pos:end="23:52"><sizeof pos:start="23:38" pos:end="23:52">sizeof<argument_list pos:start="23:44" pos:end="23:52">(<argument pos:start="23:45" pos:end="23:51"><expr pos:start="23:45" pos:end="23:51"><operator pos:start="23:45" pos:end="23:45">*</operator><name pos:start="23:46" pos:end="23:51">mirror</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:55"><expr pos:start="25:5" pos:end="25:54"><name pos:start="25:5" pos:end="25:15"><name pos:start="25:5" pos:end="25:10">mirror</name><operator pos:start="25:11" pos:end="25:12">-&gt;</operator><name pos:start="25:13" pos:end="25:15">mem</name></name> <operator pos:start="25:17" pos:end="25:17">=</operator> <name pos:start="25:19" pos:end="25:28"><name pos:start="25:19" pos:end="25:23">quirk</name><operator pos:start="25:24" pos:end="25:25">-&gt;</operator><name pos:start="25:26" pos:end="25:28">mem</name></name> <operator pos:start="25:30" pos:end="25:30">=</operator> <call pos:start="25:32" pos:end="25:54"><name pos:start="25:32" pos:end="25:37">g_new0</name><argument_list pos:start="25:38" pos:end="25:54">(<argument pos:start="25:39" pos:end="25:50"><expr pos:start="25:39" pos:end="25:50"><name pos:start="25:39" pos:end="25:50">MemoryRegion</name></expr></argument>, <argument pos:start="25:53" pos:end="25:53"><expr pos:start="25:53" pos:end="25:53"><literal type="number" pos:start="25:53" pos:end="25:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:22"><expr pos:start="27:5" pos:end="27:21"><name pos:start="27:5" pos:end="27:17"><name pos:start="27:5" pos:end="27:9">quirk</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:17">nr_mem</name></name> <operator pos:start="27:19" pos:end="27:19">=</operator> <literal type="number" pos:start="27:21" pos:end="27:21">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:24"><expr pos:start="29:5" pos:end="29:23"><name pos:start="29:5" pos:end="29:16"><name pos:start="29:5" pos:end="29:10">mirror</name><operator pos:start="29:11" pos:end="29:12">-&gt;</operator><name pos:start="29:13" pos:end="29:16">vdev</name></name> <operator pos:start="29:18" pos:end="29:18">=</operator> <name pos:start="29:20" pos:end="29:23">vdev</name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:29"><expr pos:start="31:5" pos:end="31:28"><name pos:start="31:5" pos:end="31:18"><name pos:start="31:5" pos:end="31:10">mirror</name><operator pos:start="31:11" pos:end="31:12">-&gt;</operator><name pos:start="31:13" pos:end="31:18">offset</name></name> <operator pos:start="31:20" pos:end="31:20">=</operator> <literal type="number" pos:start="31:22" pos:end="31:28">0x88000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:21"><expr pos:start="33:5" pos:end="33:20"><name pos:start="33:5" pos:end="33:15"><name pos:start="33:5" pos:end="33:10">mirror</name><operator pos:start="33:11" pos:end="33:12">-&gt;</operator><name pos:start="33:13" pos:end="33:15">bar</name></name> <operator pos:start="33:17" pos:end="33:17">=</operator> <name pos:start="33:19" pos:end="33:20">nr</name></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="43:50"><expr pos:start="37:5" pos:end="43:49"><call pos:start="37:5" pos:end="43:49"><name pos:start="37:5" pos:end="37:25">memory_region_init_io</name><argument_list pos:start="37:26" pos:end="43:49">(<argument pos:start="37:27" pos:end="37:37"><expr pos:start="37:27" pos:end="37:37"><name pos:start="37:27" pos:end="37:37"><name pos:start="37:27" pos:end="37:32">mirror</name><operator pos:start="37:33" pos:end="37:34">-&gt;</operator><name pos:start="37:35" pos:end="37:37">mem</name></name></expr></argument>, <argument pos:start="37:40" pos:end="37:51"><expr pos:start="37:40" pos:end="37:51"><call pos:start="37:40" pos:end="37:51"><name pos:start="37:40" pos:end="37:45">OBJECT</name><argument_list pos:start="37:46" pos:end="37:51">(<argument pos:start="37:47" pos:end="37:50"><expr pos:start="37:47" pos:end="37:50"><name pos:start="37:47" pos:end="37:50">vdev</name></expr></argument>)</argument_list></call></expr></argument>,

                          <argument pos:start="39:27" pos:end="39:51"><expr pos:start="39:27" pos:end="39:51"><operator pos:start="39:27" pos:end="39:27">&amp;</operator><name pos:start="39:28" pos:end="39:51">vfio_nvidia_mirror_quirk</name></expr></argument>, <argument pos:start="39:54" pos:end="39:59"><expr pos:start="39:54" pos:end="39:59"><name pos:start="39:54" pos:end="39:59">mirror</name></expr></argument>,

                          <argument pos:start="41:27" pos:end="41:63"><expr pos:start="41:27" pos:end="41:63"><literal type="string" pos:start="41:27" pos:end="41:63">"vfio-nvidia-bar0-88000-mirror-quirk"</literal></expr></argument>,

                          <argument pos:start="43:27" pos:end="43:48"><expr pos:start="43:27" pos:end="43:48"><name pos:start="43:27" pos:end="43:48">PCIE_CONFIG_SPACE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="47:72"><expr pos:start="45:5" pos:end="47:71"><call pos:start="45:5" pos:end="47:71"><name pos:start="45:5" pos:end="45:39">memory_region_add_subregion_overlap</name><argument_list pos:start="45:40" pos:end="47:71">(<argument pos:start="45:41" pos:end="45:66"><expr pos:start="45:41" pos:end="45:66"><operator pos:start="45:41" pos:end="45:41">&amp;</operator><name pos:start="45:42" pos:end="45:55"><name pos:start="45:42" pos:end="45:45">vdev</name><operator pos:start="45:46" pos:end="45:47">-&gt;</operator><name pos:start="45:48" pos:end="45:51">bars</name><index pos:start="45:52" pos:end="45:55">[<expr pos:start="45:53" pos:end="45:54"><name pos:start="45:53" pos:end="45:54">nr</name></expr>]</index></name><operator pos:start="45:56" pos:end="45:56">.</operator><name pos:start="45:57" pos:end="45:66"><name pos:start="45:57" pos:end="45:62">region</name><operator pos:start="45:63" pos:end="45:63">.</operator><name pos:start="45:64" pos:end="45:66">mem</name></name></expr></argument>,

                                        <argument pos:start="47:41" pos:end="47:54"><expr pos:start="47:41" pos:end="47:54"><name pos:start="47:41" pos:end="47:54"><name pos:start="47:41" pos:end="47:46">mirror</name><operator pos:start="47:47" pos:end="47:48">-&gt;</operator><name pos:start="47:49" pos:end="47:54">offset</name></name></expr></argument>, <argument pos:start="47:57" pos:end="47:67"><expr pos:start="47:57" pos:end="47:67"><name pos:start="47:57" pos:end="47:67"><name pos:start="47:57" pos:end="47:62">mirror</name><operator pos:start="47:63" pos:end="47:64">-&gt;</operator><name pos:start="47:65" pos:end="47:67">mem</name></name></expr></argument>, <argument pos:start="47:70" pos:end="47:70"><expr pos:start="47:70" pos:end="47:70"><literal type="number" pos:start="47:70" pos:end="47:70">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:59"><expr pos:start="51:5" pos:end="51:58"><call pos:start="51:5" pos:end="51:58"><name pos:start="51:5" pos:end="51:21">QLIST_INSERT_HEAD</name><argument_list pos:start="51:22" pos:end="51:58">(<argument pos:start="51:23" pos:end="51:44"><expr pos:start="51:23" pos:end="51:44"><operator pos:start="51:23" pos:end="51:23">&amp;</operator><name pos:start="51:24" pos:end="51:37"><name pos:start="51:24" pos:end="51:27">vdev</name><operator pos:start="51:28" pos:end="51:29">-&gt;</operator><name pos:start="51:30" pos:end="51:33">bars</name><index pos:start="51:34" pos:end="51:37">[<expr pos:start="51:35" pos:end="51:36"><name pos:start="51:35" pos:end="51:36">nr</name></expr>]</index></name><operator pos:start="51:38" pos:end="51:38">.</operator><name pos:start="51:39" pos:end="51:44">quirks</name></expr></argument>, <argument pos:start="51:47" pos:end="51:51"><expr pos:start="51:47" pos:end="51:51"><name pos:start="51:47" pos:end="51:51">quirk</name></expr></argument>, <argument pos:start="51:54" pos:end="51:57"><expr pos:start="51:54" pos:end="51:57"><name pos:start="51:54" pos:end="51:57">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:71">/* The 0x1800 offset mirror only seems to get used by legacy VGA */</comment>

    <if_stmt pos:start="57:5" pos:end="91:5"><if pos:start="57:5" pos:end="91:5">if <condition pos:start="57:8" pos:end="57:22">(<expr pos:start="57:9" pos:end="57:21"><name pos:start="57:9" pos:end="57:21"><name pos:start="57:9" pos:end="57:12">vdev</name><operator pos:start="57:13" pos:end="57:14">-&gt;</operator><name pos:start="57:15" pos:end="57:21">has_vga</name></name></expr>)</condition> <block pos:start="57:24" pos:end="91:5">{<block_content pos:start="59:9" pos:end="89:63">

        <expr_stmt pos:start="59:9" pos:end="59:42"><expr pos:start="59:9" pos:end="59:41"><name pos:start="59:9" pos:end="59:13">quirk</name> <operator pos:start="59:15" pos:end="59:15">=</operator> <call pos:start="59:17" pos:end="59:41"><name pos:start="59:17" pos:end="59:25">g_malloc0</name><argument_list pos:start="59:26" pos:end="59:41">(<argument pos:start="59:27" pos:end="59:40"><expr pos:start="59:27" pos:end="59:40"><sizeof pos:start="59:27" pos:end="59:40">sizeof<argument_list pos:start="59:33" pos:end="59:40">(<argument pos:start="59:34" pos:end="59:39"><expr pos:start="59:34" pos:end="59:39"><operator pos:start="59:34" pos:end="59:34">*</operator><name pos:start="59:35" pos:end="59:39">quirk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:58"><expr pos:start="61:9" pos:end="61:57"><name pos:start="61:9" pos:end="61:14">mirror</name> <operator pos:start="61:16" pos:end="61:16">=</operator> <name pos:start="61:18" pos:end="61:28"><name pos:start="61:18" pos:end="61:22">quirk</name><operator pos:start="61:23" pos:end="61:24">-&gt;</operator><name pos:start="61:25" pos:end="61:28">data</name></name> <operator pos:start="61:30" pos:end="61:30">=</operator> <call pos:start="61:32" pos:end="61:57"><name pos:start="61:32" pos:end="61:40">g_malloc0</name><argument_list pos:start="61:41" pos:end="61:57">(<argument pos:start="61:42" pos:end="61:56"><expr pos:start="61:42" pos:end="61:56"><sizeof pos:start="61:42" pos:end="61:56">sizeof<argument_list pos:start="61:48" pos:end="61:56">(<argument pos:start="61:49" pos:end="61:55"><expr pos:start="61:49" pos:end="61:55"><operator pos:start="61:49" pos:end="61:49">*</operator><name pos:start="61:50" pos:end="61:55">mirror</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:59"><expr pos:start="63:9" pos:end="63:58"><name pos:start="63:9" pos:end="63:19"><name pos:start="63:9" pos:end="63:14">mirror</name><operator pos:start="63:15" pos:end="63:16">-&gt;</operator><name pos:start="63:17" pos:end="63:19">mem</name></name> <operator pos:start="63:21" pos:end="63:21">=</operator> <name pos:start="63:23" pos:end="63:32"><name pos:start="63:23" pos:end="63:27">quirk</name><operator pos:start="63:28" pos:end="63:29">-&gt;</operator><name pos:start="63:30" pos:end="63:32">mem</name></name> <operator pos:start="63:34" pos:end="63:34">=</operator> <call pos:start="63:36" pos:end="63:58"><name pos:start="63:36" pos:end="63:41">g_new0</name><argument_list pos:start="63:42" pos:end="63:58">(<argument pos:start="63:43" pos:end="63:54"><expr pos:start="63:43" pos:end="63:54"><name pos:start="63:43" pos:end="63:54">MemoryRegion</name></expr></argument>, <argument pos:start="63:57" pos:end="63:57"><expr pos:start="63:57" pos:end="63:57"><literal type="number" pos:start="63:57" pos:end="63:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:26"><expr pos:start="65:9" pos:end="65:25"><name pos:start="65:9" pos:end="65:21"><name pos:start="65:9" pos:end="65:13">quirk</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:21">nr_mem</name></name> <operator pos:start="65:23" pos:end="65:23">=</operator> <literal type="number" pos:start="65:25" pos:end="65:25">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:28"><expr pos:start="67:9" pos:end="67:27"><name pos:start="67:9" pos:end="67:20"><name pos:start="67:9" pos:end="67:14">mirror</name><operator pos:start="67:15" pos:end="67:16">-&gt;</operator><name pos:start="67:17" pos:end="67:20">vdev</name></name> <operator pos:start="67:22" pos:end="67:22">=</operator> <name pos:start="67:24" pos:end="67:27">vdev</name></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:32"><expr pos:start="69:9" pos:end="69:31"><name pos:start="69:9" pos:end="69:22"><name pos:start="69:9" pos:end="69:14">mirror</name><operator pos:start="69:15" pos:end="69:16">-&gt;</operator><name pos:start="69:17" pos:end="69:22">offset</name></name> <operator pos:start="69:24" pos:end="69:24">=</operator> <literal type="number" pos:start="69:26" pos:end="69:31">0x1800</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:25"><expr pos:start="71:9" pos:end="71:24"><name pos:start="71:9" pos:end="71:19"><name pos:start="71:9" pos:end="71:14">mirror</name><operator pos:start="71:15" pos:end="71:16">-&gt;</operator><name pos:start="71:17" pos:end="71:19">bar</name></name> <operator pos:start="71:21" pos:end="71:21">=</operator> <name pos:start="71:23" pos:end="71:24">nr</name></expr>;</expr_stmt>



        <expr_stmt pos:start="75:9" pos:end="81:53"><expr pos:start="75:9" pos:end="81:52"><call pos:start="75:9" pos:end="81:52"><name pos:start="75:9" pos:end="75:29">memory_region_init_io</name><argument_list pos:start="75:30" pos:end="81:52">(<argument pos:start="75:31" pos:end="75:41"><expr pos:start="75:31" pos:end="75:41"><name pos:start="75:31" pos:end="75:41"><name pos:start="75:31" pos:end="75:36">mirror</name><operator pos:start="75:37" pos:end="75:38">-&gt;</operator><name pos:start="75:39" pos:end="75:41">mem</name></name></expr></argument>, <argument pos:start="75:44" pos:end="75:55"><expr pos:start="75:44" pos:end="75:55"><call pos:start="75:44" pos:end="75:55"><name pos:start="75:44" pos:end="75:49">OBJECT</name><argument_list pos:start="75:50" pos:end="75:55">(<argument pos:start="75:51" pos:end="75:54"><expr pos:start="75:51" pos:end="75:54"><name pos:start="75:51" pos:end="75:54">vdev</name></expr></argument>)</argument_list></call></expr></argument>,

                              <argument pos:start="77:31" pos:end="77:55"><expr pos:start="77:31" pos:end="77:55"><operator pos:start="77:31" pos:end="77:31">&amp;</operator><name pos:start="77:32" pos:end="77:55">vfio_nvidia_mirror_quirk</name></expr></argument>, <argument pos:start="77:58" pos:end="77:63"><expr pos:start="77:58" pos:end="77:63"><name pos:start="77:58" pos:end="77:63">mirror</name></expr></argument>,

                              <argument pos:start="79:31" pos:end="79:66"><expr pos:start="79:31" pos:end="79:66"><literal type="string" pos:start="79:31" pos:end="79:66">"vfio-nvidia-bar0-1800-mirror-quirk"</literal></expr></argument>,

                              <argument pos:start="81:31" pos:end="81:51"><expr pos:start="81:31" pos:end="81:51"><name pos:start="81:31" pos:end="81:51">PCI_CONFIG_SPACE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="85:76"><expr pos:start="83:9" pos:end="85:75"><call pos:start="83:9" pos:end="85:75"><name pos:start="83:9" pos:end="83:43">memory_region_add_subregion_overlap</name><argument_list pos:start="83:44" pos:end="85:75">(<argument pos:start="83:45" pos:end="83:70"><expr pos:start="83:45" pos:end="83:70"><operator pos:start="83:45" pos:end="83:45">&amp;</operator><name pos:start="83:46" pos:end="83:59"><name pos:start="83:46" pos:end="83:49">vdev</name><operator pos:start="83:50" pos:end="83:51">-&gt;</operator><name pos:start="83:52" pos:end="83:55">bars</name><index pos:start="83:56" pos:end="83:59">[<expr pos:start="83:57" pos:end="83:58"><name pos:start="83:57" pos:end="83:58">nr</name></expr>]</index></name><operator pos:start="83:60" pos:end="83:60">.</operator><name pos:start="83:61" pos:end="83:70"><name pos:start="83:61" pos:end="83:66">region</name><operator pos:start="83:67" pos:end="83:67">.</operator><name pos:start="83:68" pos:end="83:70">mem</name></name></expr></argument>,

                                            <argument pos:start="85:45" pos:end="85:58"><expr pos:start="85:45" pos:end="85:58"><name pos:start="85:45" pos:end="85:58"><name pos:start="85:45" pos:end="85:50">mirror</name><operator pos:start="85:51" pos:end="85:52">-&gt;</operator><name pos:start="85:53" pos:end="85:58">offset</name></name></expr></argument>, <argument pos:start="85:61" pos:end="85:71"><expr pos:start="85:61" pos:end="85:71"><name pos:start="85:61" pos:end="85:71"><name pos:start="85:61" pos:end="85:66">mirror</name><operator pos:start="85:67" pos:end="85:68">-&gt;</operator><name pos:start="85:69" pos:end="85:71">mem</name></name></expr></argument>, <argument pos:start="85:74" pos:end="85:74"><expr pos:start="85:74" pos:end="85:74"><literal type="number" pos:start="85:74" pos:end="85:74">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="89:9" pos:end="89:63"><expr pos:start="89:9" pos:end="89:62"><call pos:start="89:9" pos:end="89:62"><name pos:start="89:9" pos:end="89:25">QLIST_INSERT_HEAD</name><argument_list pos:start="89:26" pos:end="89:62">(<argument pos:start="89:27" pos:end="89:48"><expr pos:start="89:27" pos:end="89:48"><operator pos:start="89:27" pos:end="89:27">&amp;</operator><name pos:start="89:28" pos:end="89:41"><name pos:start="89:28" pos:end="89:31">vdev</name><operator pos:start="89:32" pos:end="89:33">-&gt;</operator><name pos:start="89:34" pos:end="89:37">bars</name><index pos:start="89:38" pos:end="89:41">[<expr pos:start="89:39" pos:end="89:40"><name pos:start="89:39" pos:end="89:40">nr</name></expr>]</index></name><operator pos:start="89:42" pos:end="89:42">.</operator><name pos:start="89:43" pos:end="89:48">quirks</name></expr></argument>, <argument pos:start="89:51" pos:end="89:55"><expr pos:start="89:51" pos:end="89:55"><name pos:start="89:51" pos:end="89:55">quirk</name></expr></argument>, <argument pos:start="89:58" pos:end="89:61"><expr pos:start="89:58" pos:end="89:61"><name pos:start="89:58" pos:end="89:61">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:60"><expr pos:start="95:5" pos:end="95:59"><call pos:start="95:5" pos:end="95:59"><name pos:start="95:5" pos:end="95:38">trace_vfio_quirk_nvidia_bar0_probe</name><argument_list pos:start="95:39" pos:end="95:59">(<argument pos:start="95:40" pos:end="95:58"><expr pos:start="95:40" pos:end="95:58"><name pos:start="95:40" pos:end="95:58"><name pos:start="95:40" pos:end="95:43">vdev</name><operator pos:start="95:44" pos:end="95:45">-&gt;</operator><name pos:start="95:46" pos:end="95:53">vbasedev</name><operator pos:start="95:54" pos:end="95:54">.</operator><name pos:start="95:55" pos:end="95:58">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
