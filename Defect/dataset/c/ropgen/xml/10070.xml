<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10070.c" pos:tabs="8"><function pos:start="1:1" pos:end="131:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">vfio_iommu_map_notify</name><parameter_list pos:start="1:34" pos:end="1:73">(<parameter pos:start="1:35" pos:end="1:50"><decl pos:start="1:35" pos:end="1:50"><type pos:start="1:35" pos:end="1:50"><name pos:start="1:35" pos:end="1:47">IOMMUNotifier</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:50">n</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:72"><decl pos:start="1:53" pos:end="1:72"><type pos:start="1:53" pos:end="1:72"><name pos:start="1:53" pos:end="1:65">IOMMUTLBEntry</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:72">iotlb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="131:1">{<block_content pos:start="5:5" pos:end="129:22">

    <decl_stmt pos:start="5:5" pos:end="5:64"><decl pos:start="5:5" pos:end="5:63"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">VFIOGuestIOMMU</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:26">giommu</name> <init pos:start="5:28" pos:end="5:63">= <expr pos:start="5:30" pos:end="5:63"><call pos:start="5:30" pos:end="5:63"><name pos:start="5:30" pos:end="5:41">container_of</name><argument_list pos:start="5:42" pos:end="5:63">(<argument pos:start="5:43" pos:end="5:43"><expr pos:start="5:43" pos:end="5:43"><name pos:start="5:43" pos:end="5:43">n</name></expr></argument>, <argument pos:start="5:46" pos:end="5:59"><expr pos:start="5:46" pos:end="5:59"><name pos:start="5:46" pos:end="5:59">VFIOGuestIOMMU</name></expr></argument>, <argument pos:start="5:62" pos:end="5:62"><expr pos:start="5:62" pos:end="5:62"><name pos:start="5:62" pos:end="5:62">n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:49"><decl pos:start="7:5" pos:end="7:48"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">VFIOContainer</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:28">container</name> <init pos:start="7:30" pos:end="7:48">= <expr pos:start="7:32" pos:end="7:48"><name pos:start="7:32" pos:end="7:48"><name pos:start="7:32" pos:end="7:37">giommu</name><operator pos:start="7:38" pos:end="7:39">-&gt;</operator><name pos:start="7:40" pos:end="7:48">container</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:53"><decl pos:start="9:5" pos:end="9:52"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">hwaddr</name></type> <name pos:start="9:12" pos:end="9:15">iova</name> <init pos:start="9:17" pos:end="9:52">= <expr pos:start="9:19" pos:end="9:52"><name pos:start="9:19" pos:end="9:29"><name pos:start="9:19" pos:end="9:23">iotlb</name><operator pos:start="9:24" pos:end="9:25">-&gt;</operator><name pos:start="9:26" pos:end="9:29">iova</name></name> <operator pos:start="9:31" pos:end="9:31">+</operator> <name pos:start="9:33" pos:end="9:52"><name pos:start="9:33" pos:end="9:38">giommu</name><operator pos:start="9:39" pos:end="9:40">-&gt;</operator><name pos:start="9:41" pos:end="9:52">iommu_offset</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">MemoryRegion</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:20">mr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">hwaddr</name></type> <name pos:start="13:12" pos:end="13:15">xlat</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:38"><decl pos:start="15:5" pos:end="15:37"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:10">hwaddr</name></type> <name pos:start="15:12" pos:end="15:14">len</name> <init pos:start="15:16" pos:end="15:37">= <expr pos:start="15:18" pos:end="15:37"><name pos:start="15:18" pos:end="15:33"><name pos:start="15:18" pos:end="15:22">iotlb</name><operator pos:start="15:23" pos:end="15:24">-&gt;</operator><name pos:start="15:25" pos:end="15:33">addr_mask</name></name> <operator pos:start="15:35" pos:end="15:35">+</operator> <literal type="number" pos:start="15:37" pos:end="15:37">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:16"><decl pos:start="17:5" pos:end="17:15"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">void</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:15">vaddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:12"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="25:63"><expr pos:start="23:5" pos:end="25:62"><call pos:start="23:5" pos:end="25:62"><name pos:start="23:5" pos:end="23:31">trace_vfio_iommu_map_notify</name><argument_list pos:start="23:32" pos:end="25:62">(<argument pos:start="23:33" pos:end="23:75"><expr pos:start="23:33" pos:end="23:75"><ternary pos:start="23:33" pos:end="23:75"><condition pos:start="23:33" pos:end="23:59"><expr pos:start="23:33" pos:end="23:57"><name pos:start="23:33" pos:end="23:43"><name pos:start="23:33" pos:end="23:37">iotlb</name><operator pos:start="23:38" pos:end="23:39">-&gt;</operator><name pos:start="23:40" pos:end="23:43">perm</name></name> <operator pos:start="23:45" pos:end="23:46">==</operator> <name pos:start="23:48" pos:end="23:57">IOMMU_NONE</name></expr> ?</condition><then pos:start="23:61" pos:end="23:67"> <expr pos:start="23:61" pos:end="23:67"><literal type="string" pos:start="23:61" pos:end="23:67">"UNMAP"</literal></expr> </then><else pos:start="23:69" pos:end="23:75">: <expr pos:start="23:71" pos:end="23:75"><literal type="string" pos:start="23:71" pos:end="23:75">"MAP"</literal></expr></else></ternary></expr></argument>,

                                <argument pos:start="25:33" pos:end="25:36"><expr pos:start="25:33" pos:end="25:36"><name pos:start="25:33" pos:end="25:36">iova</name></expr></argument>, <argument pos:start="25:39" pos:end="25:61"><expr pos:start="25:39" pos:end="25:61"><name pos:start="25:39" pos:end="25:42">iova</name> <operator pos:start="25:44" pos:end="25:44">+</operator> <name pos:start="25:46" pos:end="25:61"><name pos:start="25:46" pos:end="25:50">iotlb</name><operator pos:start="25:51" pos:end="25:52">-&gt;</operator><name pos:start="25:53" pos:end="25:61">addr_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="29:5" pos:end="37:5"><if pos:start="29:5" pos:end="37:5">if <condition pos:start="29:8" pos:end="29:50">(<expr pos:start="29:9" pos:end="29:49"><name pos:start="29:9" pos:end="29:24"><name pos:start="29:9" pos:end="29:13">iotlb</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:24">target_as</name></name> <operator pos:start="29:26" pos:end="29:27">!=</operator> <operator pos:start="29:29" pos:end="29:29">&amp;</operator><name pos:start="29:30" pos:end="29:49">address_space_memory</name></expr>)</condition> <block pos:start="29:52" pos:end="37:5">{<block_content pos:start="31:9" pos:end="35:15">

        <expr_stmt pos:start="31:9" pos:end="33:79"><expr pos:start="31:9" pos:end="33:78"><call pos:start="31:9" pos:end="33:78"><name pos:start="31:9" pos:end="31:20">error_report</name><argument_list pos:start="31:21" pos:end="33:78">(<argument pos:start="31:22" pos:end="31:76"><expr pos:start="31:22" pos:end="31:76"><literal type="string" pos:start="31:22" pos:end="31:76">"Wrong target AS \"%s\", only system memory is allowed"</literal></expr></argument>,

                     <argument pos:start="33:22" pos:end="33:77"><expr pos:start="33:22" pos:end="33:77"><ternary pos:start="33:22" pos:end="33:77"><condition pos:start="33:22" pos:end="33:45"><expr pos:start="33:22" pos:end="33:43"><name pos:start="33:22" pos:end="33:43"><name pos:start="33:22" pos:end="33:26">iotlb</name><operator pos:start="33:27" pos:end="33:28">-&gt;</operator><name pos:start="33:29" pos:end="33:37">target_as</name><operator pos:start="33:38" pos:end="33:39">-&gt;</operator><name pos:start="33:40" pos:end="33:43">name</name></name></expr> ?</condition><then pos:start="33:47" pos:end="33:68"> <expr pos:start="33:47" pos:end="33:68"><name pos:start="33:47" pos:end="33:68"><name pos:start="33:47" pos:end="33:51">iotlb</name><operator pos:start="33:52" pos:end="33:53">-&gt;</operator><name pos:start="33:54" pos:end="33:62">target_as</name><operator pos:start="33:63" pos:end="33:64">-&gt;</operator><name pos:start="33:65" pos:end="33:68">name</name></name></expr> </then><else pos:start="33:70" pos:end="33:77">: <expr pos:start="33:72" pos:end="33:77"><literal type="string" pos:start="33:72" pos:end="33:77">"none"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="41:5" pos:end="49:7">/*

     * The IOMMU TLB entry we have just covers translation through

     * this IOMMU to its immediate target.  We need to translate

     * it the rest of the way through to memory.

     */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:20"><expr pos:start="51:5" pos:end="51:19"><call pos:start="51:5" pos:end="51:19"><name pos:start="51:5" pos:end="51:17">rcu_read_lock</name><argument_list pos:start="51:18" pos:end="51:19">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="57:70"><expr pos:start="53:5" pos:end="57:69"><name pos:start="53:5" pos:end="53:6">mr</name> <operator pos:start="53:8" pos:end="53:8">=</operator> <call pos:start="53:10" pos:end="57:69"><name pos:start="53:10" pos:end="53:32">address_space_translate</name><argument_list pos:start="53:33" pos:end="57:69">(<argument pos:start="53:34" pos:end="53:54"><expr pos:start="53:34" pos:end="53:54"><operator pos:start="53:34" pos:end="53:34">&amp;</operator><name pos:start="53:35" pos:end="53:54">address_space_memory</name></expr></argument>,

                                 <argument pos:start="55:34" pos:end="55:55"><expr pos:start="55:34" pos:end="55:55"><name pos:start="55:34" pos:end="55:55"><name pos:start="55:34" pos:end="55:38">iotlb</name><operator pos:start="55:39" pos:end="55:40">-&gt;</operator><name pos:start="55:41" pos:end="55:55">translated_addr</name></name></expr></argument>,

                                 <argument pos:start="57:34" pos:end="57:38"><expr pos:start="57:34" pos:end="57:38"><operator pos:start="57:34" pos:end="57:34">&amp;</operator><name pos:start="57:35" pos:end="57:38">xlat</name></expr></argument>, <argument pos:start="57:41" pos:end="57:44"><expr pos:start="57:41" pos:end="57:44"><operator pos:start="57:41" pos:end="57:41">&amp;</operator><name pos:start="57:42" pos:end="57:44">len</name></expr></argument>, <argument pos:start="57:47" pos:end="57:68"><expr pos:start="57:47" pos:end="57:68"><name pos:start="57:47" pos:end="57:57"><name pos:start="57:47" pos:end="57:51">iotlb</name><operator pos:start="57:52" pos:end="57:53">-&gt;</operator><name pos:start="57:54" pos:end="57:57">perm</name></name> <operator pos:start="57:59" pos:end="57:59">&amp;</operator> <name pos:start="57:61" pos:end="57:68">IOMMU_WO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="67:5"><if pos:start="59:5" pos:end="67:5">if <condition pos:start="59:8" pos:end="59:34">(<expr pos:start="59:9" pos:end="59:33"><operator pos:start="59:9" pos:end="59:9">!</operator><call pos:start="59:10" pos:end="59:33"><name pos:start="59:10" pos:end="59:29">memory_region_is_ram</name><argument_list pos:start="59:30" pos:end="59:33">(<argument pos:start="59:31" pos:end="59:32"><expr pos:start="59:31" pos:end="59:32"><name pos:start="59:31" pos:end="59:32">mr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="59:36" pos:end="67:5">{<block_content pos:start="61:9" pos:end="65:17">

        <expr_stmt pos:start="61:9" pos:end="63:27"><expr pos:start="61:9" pos:end="63:26"><call pos:start="61:9" pos:end="63:26"><name pos:start="61:9" pos:end="61:20">error_report</name><argument_list pos:start="61:21" pos:end="63:26">(<argument pos:start="61:22" pos:end="61:66"><expr pos:start="61:22" pos:end="61:66"><literal type="string" pos:start="61:22" pos:end="61:53">"iommu map to non memory area %"</literal><name pos:start="61:54" pos:end="61:64">HWADDR_PRIx</name><literal type="string" pos:start="61:65" pos:end="61:66">""</literal></expr></argument>,

                     <argument pos:start="63:22" pos:end="63:25"><expr pos:start="63:22" pos:end="63:25"><name pos:start="63:22" pos:end="63:25">xlat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="65:9" pos:end="65:17">goto <name pos:start="65:14" pos:end="65:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="69:5" pos:end="75:7">/*

     * Translation truncates length to the IOMMU page size,

     * check that it did not truncate too much.

     */</comment>

    <if_stmt pos:start="77:5" pos:end="83:5"><if pos:start="77:5" pos:end="83:5">if <condition pos:start="77:8" pos:end="77:31">(<expr pos:start="77:9" pos:end="77:30"><name pos:start="77:9" pos:end="77:11">len</name> <operator pos:start="77:13" pos:end="77:13">&amp;</operator> <name pos:start="77:15" pos:end="77:30"><name pos:start="77:15" pos:end="77:19">iotlb</name><operator pos:start="77:20" pos:end="77:21">-&gt;</operator><name pos:start="77:22" pos:end="77:30">addr_mask</name></name></expr>)</condition> <block pos:start="77:33" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:17">

        <expr_stmt pos:start="79:9" pos:end="79:74"><expr pos:start="79:9" pos:end="79:73"><call pos:start="79:9" pos:end="79:73"><name pos:start="79:9" pos:end="79:20">error_report</name><argument_list pos:start="79:21" pos:end="79:73">(<argument pos:start="79:22" pos:end="79:72"><expr pos:start="79:22" pos:end="79:72"><literal type="string" pos:start="79:22" pos:end="79:72">"iommu has granularity incompatible with target AS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="81:9" pos:end="81:17">goto <name pos:start="81:14" pos:end="81:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="87:5" pos:end="125:5"><if pos:start="87:5" pos:end="109:5">if <condition pos:start="87:8" pos:end="87:47">(<expr pos:start="87:9" pos:end="87:46"><operator pos:start="87:9" pos:end="87:9">(</operator><name pos:start="87:10" pos:end="87:20"><name pos:start="87:10" pos:end="87:14">iotlb</name><operator pos:start="87:15" pos:end="87:16">-&gt;</operator><name pos:start="87:17" pos:end="87:20">perm</name></name> <operator pos:start="87:22" pos:end="87:22">&amp;</operator> <name pos:start="87:24" pos:end="87:31">IOMMU_RW</name><operator pos:start="87:32" pos:end="87:32">)</operator> <operator pos:start="87:34" pos:end="87:35">!=</operator> <name pos:start="87:37" pos:end="87:46">IOMMU_NONE</name></expr>)</condition> <block pos:start="87:49" pos:end="109:5">{<block_content pos:start="89:9" pos:end="107:9">

        <expr_stmt pos:start="89:9" pos:end="89:53"><expr pos:start="89:9" pos:end="89:52"><name pos:start="89:9" pos:end="89:13">vaddr</name> <operator pos:start="89:15" pos:end="89:15">=</operator> <call pos:start="89:17" pos:end="89:45"><name pos:start="89:17" pos:end="89:41">memory_region_get_ram_ptr</name><argument_list pos:start="89:42" pos:end="89:45">(<argument pos:start="89:43" pos:end="89:44"><expr pos:start="89:43" pos:end="89:44"><name pos:start="89:43" pos:end="89:44">mr</name></expr></argument>)</argument_list></call> <operator pos:start="89:47" pos:end="89:47">+</operator> <name pos:start="89:49" pos:end="89:52">xlat</name></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="95:70"><expr pos:start="91:9" pos:end="95:69"><name pos:start="91:9" pos:end="91:11">ret</name> <operator pos:start="91:13" pos:end="91:13">=</operator> <call pos:start="91:15" pos:end="95:69"><name pos:start="91:15" pos:end="91:26">vfio_dma_map</name><argument_list pos:start="91:27" pos:end="95:69">(<argument pos:start="91:28" pos:end="91:36"><expr pos:start="91:28" pos:end="91:36"><name pos:start="91:28" pos:end="91:36">container</name></expr></argument>, <argument pos:start="91:39" pos:end="91:42"><expr pos:start="91:39" pos:end="91:42"><name pos:start="91:39" pos:end="91:42">iova</name></expr></argument>,

                           <argument pos:start="93:28" pos:end="93:47"><expr pos:start="93:28" pos:end="93:47"><name pos:start="93:28" pos:end="93:43"><name pos:start="93:28" pos:end="93:32">iotlb</name><operator pos:start="93:33" pos:end="93:34">-&gt;</operator><name pos:start="93:35" pos:end="93:43">addr_mask</name></name> <operator pos:start="93:45" pos:end="93:45">+</operator> <literal type="number" pos:start="93:47" pos:end="93:47">1</literal></expr></argument>, <argument pos:start="93:50" pos:end="93:54"><expr pos:start="93:50" pos:end="93:54"><name pos:start="93:50" pos:end="93:54">vaddr</name></expr></argument>,

                           <argument pos:start="95:28" pos:end="95:68"><expr pos:start="95:28" pos:end="95:68"><operator pos:start="95:28" pos:end="95:28">!</operator><operator pos:start="95:29" pos:end="95:29">(</operator><name pos:start="95:30" pos:end="95:40"><name pos:start="95:30" pos:end="95:34">iotlb</name><operator pos:start="95:35" pos:end="95:36">-&gt;</operator><name pos:start="95:37" pos:end="95:40">perm</name></name> <operator pos:start="95:42" pos:end="95:42">&amp;</operator> <name pos:start="95:44" pos:end="95:51">IOMMU_WO</name><operator pos:start="95:52" pos:end="95:52">)</operator> <operator pos:start="95:54" pos:end="95:55">||</operator> <name pos:start="95:57" pos:end="95:68"><name pos:start="95:57" pos:end="95:58">mr</name><operator pos:start="95:59" pos:end="95:60">-&gt;</operator><name pos:start="95:61" pos:end="95:68">readonly</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="97:9" pos:end="107:9"><if pos:start="97:9" pos:end="107:9">if <condition pos:start="97:12" pos:end="97:16">(<expr pos:start="97:13" pos:end="97:15"><name pos:start="97:13" pos:end="97:15">ret</name></expr>)</condition> <block pos:start="97:18" pos:end="107:9">{<block_content pos:start="99:13" pos:end="105:59">

            <expr_stmt pos:start="99:13" pos:end="105:59"><expr pos:start="99:13" pos:end="105:58"><call pos:start="99:13" pos:end="105:58"><name pos:start="99:13" pos:end="99:24">error_report</name><argument_list pos:start="99:25" pos:end="105:58">(<argument pos:start="99:26" pos:end="101:58"><expr pos:start="99:26" pos:end="101:58"><literal type="string" pos:start="99:26" pos:end="99:47">"vfio_dma_map(%p, 0x%"</literal><name pos:start="99:48" pos:end="99:58">HWADDR_PRIx</name><literal type="string" pos:start="99:59" pos:end="99:62">", "</literal>

                         <literal type="string" pos:start="101:26" pos:end="101:30">"0x%"</literal><name pos:start="101:31" pos:end="101:41">HWADDR_PRIx</name><literal type="string" pos:start="101:42" pos:end="101:58">", %p) = %d (%m)"</literal></expr></argument>,

                         <argument pos:start="103:26" pos:end="103:34"><expr pos:start="103:26" pos:end="103:34"><name pos:start="103:26" pos:end="103:34">container</name></expr></argument>, <argument pos:start="103:37" pos:end="103:40"><expr pos:start="103:37" pos:end="103:40"><name pos:start="103:37" pos:end="103:40">iova</name></expr></argument>,

                         <argument pos:start="105:26" pos:end="105:45"><expr pos:start="105:26" pos:end="105:45"><name pos:start="105:26" pos:end="105:41"><name pos:start="105:26" pos:end="105:30">iotlb</name><operator pos:start="105:31" pos:end="105:32">-&gt;</operator><name pos:start="105:33" pos:end="105:41">addr_mask</name></name> <operator pos:start="105:43" pos:end="105:43">+</operator> <literal type="number" pos:start="105:45" pos:end="105:45">1</literal></expr></argument>, <argument pos:start="105:48" pos:end="105:52"><expr pos:start="105:48" pos:end="105:52"><name pos:start="105:48" pos:end="105:52">vaddr</name></expr></argument>, <argument pos:start="105:55" pos:end="105:57"><expr pos:start="105:55" pos:end="105:57"><name pos:start="105:55" pos:end="105:57">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="109:7" pos:end="125:5">else <block pos:start="109:12" pos:end="125:5">{<block_content pos:start="111:9" pos:end="123:9">

        <expr_stmt pos:start="111:9" pos:end="111:68"><expr pos:start="111:9" pos:end="111:67"><name pos:start="111:9" pos:end="111:11">ret</name> <operator pos:start="111:13" pos:end="111:13">=</operator> <call pos:start="111:15" pos:end="111:67"><name pos:start="111:15" pos:end="111:28">vfio_dma_unmap</name><argument_list pos:start="111:29" pos:end="111:67">(<argument pos:start="111:30" pos:end="111:38"><expr pos:start="111:30" pos:end="111:38"><name pos:start="111:30" pos:end="111:38">container</name></expr></argument>, <argument pos:start="111:41" pos:end="111:44"><expr pos:start="111:41" pos:end="111:44"><name pos:start="111:41" pos:end="111:44">iova</name></expr></argument>, <argument pos:start="111:47" pos:end="111:66"><expr pos:start="111:47" pos:end="111:66"><name pos:start="111:47" pos:end="111:62"><name pos:start="111:47" pos:end="111:51">iotlb</name><operator pos:start="111:52" pos:end="111:53">-&gt;</operator><name pos:start="111:54" pos:end="111:62">addr_mask</name></name> <operator pos:start="111:64" pos:end="111:64">+</operator> <literal type="number" pos:start="111:66" pos:end="111:66">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="113:9" pos:end="123:9"><if pos:start="113:9" pos:end="123:9">if <condition pos:start="113:12" pos:end="113:16">(<expr pos:start="113:13" pos:end="113:15"><name pos:start="113:13" pos:end="113:15">ret</name></expr>)</condition> <block pos:start="113:18" pos:end="123:9">{<block_content pos:start="115:13" pos:end="121:52">

            <expr_stmt pos:start="115:13" pos:end="121:52"><expr pos:start="115:13" pos:end="121:51"><call pos:start="115:13" pos:end="121:51"><name pos:start="115:13" pos:end="115:24">error_report</name><argument_list pos:start="115:25" pos:end="121:51">(<argument pos:start="115:26" pos:end="117:54"><expr pos:start="115:26" pos:end="117:54"><literal type="string" pos:start="115:26" pos:end="115:49">"vfio_dma_unmap(%p, 0x%"</literal><name pos:start="115:50" pos:end="115:60">HWADDR_PRIx</name><literal type="string" pos:start="115:61" pos:end="115:64">", "</literal>

                         <literal type="string" pos:start="117:26" pos:end="117:30">"0x%"</literal><name pos:start="117:31" pos:end="117:41">HWADDR_PRIx</name><literal type="string" pos:start="117:42" pos:end="117:54">") = %d (%m)"</literal></expr></argument>,

                         <argument pos:start="119:26" pos:end="119:34"><expr pos:start="119:26" pos:end="119:34"><name pos:start="119:26" pos:end="119:34">container</name></expr></argument>, <argument pos:start="119:37" pos:end="119:40"><expr pos:start="119:37" pos:end="119:40"><name pos:start="119:37" pos:end="119:40">iova</name></expr></argument>,

                         <argument pos:start="121:26" pos:end="121:45"><expr pos:start="121:26" pos:end="121:45"><name pos:start="121:26" pos:end="121:41"><name pos:start="121:26" pos:end="121:30">iotlb</name><operator pos:start="121:31" pos:end="121:32">-&gt;</operator><name pos:start="121:33" pos:end="121:41">addr_mask</name></name> <operator pos:start="121:43" pos:end="121:43">+</operator> <literal type="number" pos:start="121:45" pos:end="121:45">1</literal></expr></argument>, <argument pos:start="121:48" pos:end="121:50"><expr pos:start="121:48" pos:end="121:50"><name pos:start="121:48" pos:end="121:50">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

<label pos:start="127:1" pos:end="127:4"><name pos:start="127:1" pos:end="127:3">out</name>:</label>

    <expr_stmt pos:start="129:5" pos:end="129:22"><expr pos:start="129:5" pos:end="129:21"><call pos:start="129:5" pos:end="129:21"><name pos:start="129:5" pos:end="129:19">rcu_read_unlock</name><argument_list pos:start="129:20" pos:end="129:21">()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
