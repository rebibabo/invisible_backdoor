<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9020.c" pos:tabs="8"><function pos:start="1:1" pos:end="177:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">old_codec47</name><parameter_list pos:start="1:23" pos:end="3:55">(<parameter pos:start="1:24" pos:end="1:44"><decl pos:start="1:24" pos:end="1:44"><type pos:start="1:24" pos:end="1:44"><name pos:start="1:24" pos:end="1:39">SANMVideoContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">ctx</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:53"><decl pos:start="1:47" pos:end="1:53"><type pos:start="1:47" pos:end="1:53"><name pos:start="1:47" pos:end="1:49">int</name></type> <name pos:start="1:51" pos:end="1:53">top</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:31"><decl pos:start="3:24" pos:end="3:31"><type pos:start="3:24" pos:end="3:31"><name pos:start="3:24" pos:end="3:26">int</name></type> <name pos:start="3:28" pos:end="3:31">left</name></decl></parameter>, <parameter pos:start="3:34" pos:end="3:42"><decl pos:start="3:34" pos:end="3:42"><type pos:start="3:34" pos:end="3:42"><name pos:start="3:34" pos:end="3:36">int</name></type> <name pos:start="3:38" pos:end="3:42">width</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:54"><decl pos:start="3:45" pos:end="3:54"><type pos:start="3:45" pos:end="3:54"><name pos:start="3:45" pos:end="3:47">int</name></type> <name pos:start="3:49" pos:end="3:54">height</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="177:1">{<block_content pos:start="7:5" pos:end="175:13">

    <decl_stmt pos:start="7:5" pos:end="7:49"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:12"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:12">j</name></decl>, <decl pos:start="7:15" pos:end="7:17"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:15" pos:end="7:17">seq</name></decl>, <decl pos:start="7:20" pos:end="7:24"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:20" pos:end="7:24">compr</name></decl>, <decl pos:start="7:27" pos:end="7:33"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:27" pos:end="7:33">new_rot</name></decl>, <decl pos:start="7:36" pos:end="7:42"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:36" pos:end="7:42">tbl_pos</name></decl>, <decl pos:start="7:45" pos:end="7:48"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:45" pos:end="7:48">skip</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:32"><decl pos:start="9:5" pos:end="9:31"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:14">stride</name>     <init pos:start="9:20" pos:end="9:31">= <expr pos:start="9:22" pos:end="9:31"><name pos:start="9:22" pos:end="9:31"><name pos:start="9:22" pos:end="9:24">ctx</name><operator pos:start="9:25" pos:end="9:26">-&gt;</operator><name pos:start="9:27" pos:end="9:31">pitch</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:65"><decl pos:start="11:5" pos:end="11:64"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:16">dst</name>   <init pos:start="11:20" pos:end="11:64">= <expr pos:start="11:22" pos:end="11:64"><operator pos:start="11:22" pos:end="11:22">(</operator><operator pos:start="11:23" pos:end="11:23">(</operator><name pos:start="11:24" pos:end="11:30">uint8_t</name><operator pos:start="11:31" pos:end="11:31">*</operator><operator pos:start="11:32" pos:end="11:32">)</operator><name pos:start="11:33" pos:end="11:41"><name pos:start="11:33" pos:end="11:35">ctx</name><operator pos:start="11:36" pos:end="11:37">-&gt;</operator><name pos:start="11:38" pos:end="11:41">frm0</name></name><operator pos:start="11:42" pos:end="11:42">)</operator> <operator pos:start="11:44" pos:end="11:44">+</operator> <name pos:start="11:46" pos:end="11:49">left</name> <operator pos:start="11:51" pos:end="11:51">+</operator> <name pos:start="11:53" pos:end="11:55">top</name> <operator pos:start="11:57" pos:end="11:57">*</operator> <name pos:start="11:59" pos:end="11:64">stride</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:41"><decl pos:start="13:5" pos:end="13:40"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:18">prev1</name> <init pos:start="13:20" pos:end="13:40">= <expr pos:start="13:22" pos:end="13:40"><operator pos:start="13:22" pos:end="13:22">(</operator><name pos:start="13:23" pos:end="13:29">uint8_t</name><operator pos:start="13:30" pos:end="13:30">*</operator><operator pos:start="13:31" pos:end="13:31">)</operator><name pos:start="13:32" pos:end="13:40"><name pos:start="13:32" pos:end="13:34">ctx</name><operator pos:start="13:35" pos:end="13:36">-&gt;</operator><name pos:start="13:37" pos:end="13:40">frm1</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:41"><decl pos:start="15:5" pos:end="15:40"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">uint8_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:18">prev2</name> <init pos:start="15:20" pos:end="15:40">= <expr pos:start="15:22" pos:end="15:40"><operator pos:start="15:22" pos:end="15:22">(</operator><name pos:start="15:23" pos:end="15:29">uint8_t</name><operator pos:start="15:30" pos:end="15:30">*</operator><operator pos:start="15:31" pos:end="15:31">)</operator><name pos:start="15:32" pos:end="15:40"><name pos:start="15:32" pos:end="15:34">ctx</name><operator pos:start="15:35" pos:end="15:36">-&gt;</operator><name pos:start="15:37" pos:end="15:40">frm2</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:25">decoded_size</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:41"><expr pos:start="21:5" pos:end="21:40"><name pos:start="21:5" pos:end="21:11">tbl_pos</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <call pos:start="21:15" pos:end="21:40"><name pos:start="21:15" pos:end="21:30">bytestream2_tell</name><argument_list pos:start="21:31" pos:end="21:40">(<argument pos:start="21:32" pos:end="21:39"><expr pos:start="21:32" pos:end="21:39"><operator pos:start="21:32" pos:end="21:32">&amp;</operator><name pos:start="21:33" pos:end="21:39"><name pos:start="21:33" pos:end="21:35">ctx</name><operator pos:start="21:36" pos:end="21:37">-&gt;</operator><name pos:start="21:38" pos:end="21:39">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:45"><expr pos:start="23:5" pos:end="23:44"><name pos:start="23:5" pos:end="23:7">seq</name>     <operator pos:start="23:13" pos:end="23:13">=</operator> <call pos:start="23:15" pos:end="23:44"><name pos:start="23:15" pos:end="23:34">bytestream2_get_le16</name><argument_list pos:start="23:35" pos:end="23:44">(<argument pos:start="23:36" pos:end="23:43"><expr pos:start="23:36" pos:end="23:43"><operator pos:start="23:36" pos:end="23:36">&amp;</operator><name pos:start="23:37" pos:end="23:43"><name pos:start="23:37" pos:end="23:39">ctx</name><operator pos:start="23:40" pos:end="23:41">-&gt;</operator><name pos:start="23:42" pos:end="23:43">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:45"><expr pos:start="25:5" pos:end="25:44"><name pos:start="25:5" pos:end="25:9">compr</name>   <operator pos:start="25:13" pos:end="25:13">=</operator> <call pos:start="25:15" pos:end="25:44"><name pos:start="25:15" pos:end="25:34">bytestream2_get_byte</name><argument_list pos:start="25:35" pos:end="25:44">(<argument pos:start="25:36" pos:end="25:43"><expr pos:start="25:36" pos:end="25:43"><operator pos:start="25:36" pos:end="25:36">&amp;</operator><name pos:start="25:37" pos:end="25:43"><name pos:start="25:37" pos:end="25:39">ctx</name><operator pos:start="25:40" pos:end="25:41">-&gt;</operator><name pos:start="25:42" pos:end="25:43">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:45"><expr pos:start="27:5" pos:end="27:44"><name pos:start="27:5" pos:end="27:11">new_rot</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <call pos:start="27:15" pos:end="27:44"><name pos:start="27:15" pos:end="27:34">bytestream2_get_byte</name><argument_list pos:start="27:35" pos:end="27:44">(<argument pos:start="27:36" pos:end="27:43"><expr pos:start="27:36" pos:end="27:43"><operator pos:start="27:36" pos:end="27:36">&amp;</operator><name pos:start="27:37" pos:end="27:43"><name pos:start="27:37" pos:end="27:39">ctx</name><operator pos:start="27:40" pos:end="27:41">-&gt;</operator><name pos:start="27:42" pos:end="27:43">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:45"><expr pos:start="29:5" pos:end="29:44"><name pos:start="29:5" pos:end="29:8">skip</name>    <operator pos:start="29:13" pos:end="29:13">=</operator> <call pos:start="29:15" pos:end="29:44"><name pos:start="29:15" pos:end="29:34">bytestream2_get_byte</name><argument_list pos:start="29:35" pos:end="29:44">(<argument pos:start="29:36" pos:end="29:43"><expr pos:start="29:36" pos:end="29:43"><operator pos:start="29:36" pos:end="29:36">&amp;</operator><name pos:start="29:37" pos:end="29:43"><name pos:start="29:37" pos:end="29:39">ctx</name><operator pos:start="29:40" pos:end="29:41">-&gt;</operator><name pos:start="29:42" pos:end="29:43">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:34"><expr pos:start="31:5" pos:end="31:33"><call pos:start="31:5" pos:end="31:33"><name pos:start="31:5" pos:end="31:20">bytestream2_skip</name><argument_list pos:start="31:21" pos:end="31:33">(<argument pos:start="31:22" pos:end="31:29"><expr pos:start="31:22" pos:end="31:29"><operator pos:start="31:22" pos:end="31:22">&amp;</operator><name pos:start="31:23" pos:end="31:29"><name pos:start="31:23" pos:end="31:25">ctx</name><operator pos:start="31:26" pos:end="31:27">-&gt;</operator><name pos:start="31:28" pos:end="31:29">gb</name></name></expr></argument>, <argument pos:start="31:32" pos:end="31:32"><expr pos:start="31:32" pos:end="31:32"><literal type="number" pos:start="31:32" pos:end="31:32">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:50"><expr pos:start="33:5" pos:end="33:49"><name pos:start="33:5" pos:end="33:16">decoded_size</name> <operator pos:start="33:18" pos:end="33:18">=</operator> <call pos:start="33:20" pos:end="33:49"><name pos:start="33:20" pos:end="33:39">bytestream2_get_le32</name><argument_list pos:start="33:40" pos:end="33:49">(<argument pos:start="33:41" pos:end="33:48"><expr pos:start="33:41" pos:end="33:48"><operator pos:start="33:41" pos:end="33:41">&amp;</operator><name pos:start="33:42" pos:end="33:48"><name pos:start="33:42" pos:end="33:44">ctx</name><operator pos:start="33:45" pos:end="33:46">-&gt;</operator><name pos:start="33:47" pos:end="33:48">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:34"><expr pos:start="35:5" pos:end="35:33"><call pos:start="35:5" pos:end="35:33"><name pos:start="35:5" pos:end="35:20">bytestream2_skip</name><argument_list pos:start="35:21" pos:end="35:33">(<argument pos:start="35:22" pos:end="35:29"><expr pos:start="35:22" pos:end="35:29"><operator pos:start="35:22" pos:end="35:22">&amp;</operator><name pos:start="35:23" pos:end="35:29"><name pos:start="35:23" pos:end="35:25">ctx</name><operator pos:start="35:26" pos:end="35:27">-&gt;</operator><name pos:start="35:28" pos:end="35:29">gb</name></name></expr></argument>, <argument pos:start="35:32" pos:end="35:32"><expr pos:start="35:32" pos:end="35:32"><literal type="number" pos:start="35:32" pos:end="35:32">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:61">(<expr pos:start="39:9" pos:end="39:60"><name pos:start="39:9" pos:end="39:20">decoded_size</name> <operator pos:start="39:22" pos:end="39:22">&gt;</operator> <name pos:start="39:24" pos:end="39:29">height</name> <operator pos:start="39:31" pos:end="39:31">*</operator> <name pos:start="39:33" pos:end="39:38">stride</name> <operator pos:start="39:40" pos:end="39:40">-</operator> <name pos:start="39:42" pos:end="39:45">left</name> <operator pos:start="39:47" pos:end="39:47">-</operator> <name pos:start="39:49" pos:end="39:51">top</name> <operator pos:start="39:53" pos:end="39:53">*</operator> <name pos:start="39:55" pos:end="39:60">stride</name></expr>)</condition> <block pos:start="39:63" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:74">

        <expr_stmt pos:start="41:9" pos:end="41:61"><expr pos:start="41:9" pos:end="41:60"><name pos:start="41:9" pos:end="41:20">decoded_size</name> <operator pos:start="41:22" pos:end="41:22">=</operator> <name pos:start="41:24" pos:end="41:29">height</name> <operator pos:start="41:31" pos:end="41:31">*</operator> <name pos:start="41:33" pos:end="41:38">stride</name> <operator pos:start="41:40" pos:end="41:40">-</operator> <name pos:start="41:42" pos:end="41:45">left</name> <operator pos:start="41:47" pos:end="41:47">-</operator> <name pos:start="41:49" pos:end="41:51">top</name> <operator pos:start="41:53" pos:end="41:53">*</operator> <name pos:start="41:55" pos:end="41:60">stride</name></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:74"><expr pos:start="43:9" pos:end="43:73"><call pos:start="43:9" pos:end="43:73"><name pos:start="43:9" pos:end="43:14">av_log</name><argument_list pos:start="43:15" pos:end="43:73">(<argument pos:start="43:16" pos:end="43:25"><expr pos:start="43:16" pos:end="43:25"><name pos:start="43:16" pos:end="43:25"><name pos:start="43:16" pos:end="43:18">ctx</name><operator pos:start="43:19" pos:end="43:20">-&gt;</operator><name pos:start="43:21" pos:end="43:25">avctx</name></name></expr></argument>, <argument pos:start="43:28" pos:end="43:41"><expr pos:start="43:28" pos:end="43:41"><name pos:start="43:28" pos:end="43:41">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="43:44" pos:end="43:72"><expr pos:start="43:44" pos:end="43:72"><literal type="string" pos:start="43:44" pos:end="43:72">"decoded size is too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="49:5" pos:end="51:43"><if pos:start="49:5" pos:end="51:43">if <condition pos:start="49:8" pos:end="49:17">(<expr pos:start="49:9" pos:end="49:16"><name pos:start="49:9" pos:end="49:12">skip</name> <operator pos:start="49:14" pos:end="49:14">&amp;</operator> <literal type="number" pos:start="49:16" pos:end="49:16">1</literal></expr>)</condition><block type="pseudo" pos:start="51:9" pos:end="51:43"><block_content pos:start="51:9" pos:end="51:43">

        <expr_stmt pos:start="51:9" pos:end="51:43"><expr pos:start="51:9" pos:end="51:42"><call pos:start="51:9" pos:end="51:42"><name pos:start="51:9" pos:end="51:24">bytestream2_skip</name><argument_list pos:start="51:25" pos:end="51:42">(<argument pos:start="51:26" pos:end="51:33"><expr pos:start="51:26" pos:end="51:33"><operator pos:start="51:26" pos:end="51:26">&amp;</operator><name pos:start="51:27" pos:end="51:33"><name pos:start="51:27" pos:end="51:29">ctx</name><operator pos:start="51:30" pos:end="51:31">-&gt;</operator><name pos:start="51:32" pos:end="51:33">gb</name></name></expr></argument>, <argument pos:start="51:36" pos:end="51:41"><expr pos:start="51:36" pos:end="51:41"><literal type="number" pos:start="51:36" pos:end="51:41">0x8080</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="53:5" pos:end="61:5"><if pos:start="53:5" pos:end="61:5">if <condition pos:start="53:8" pos:end="53:13">(<expr pos:start="53:9" pos:end="53:12"><operator pos:start="53:9" pos:end="53:9">!</operator><name pos:start="53:10" pos:end="53:12">seq</name></expr>)</condition> <block pos:start="53:15" pos:end="61:5">{<block_content pos:start="55:9" pos:end="59:47">

        <expr_stmt pos:start="55:9" pos:end="55:27"><expr pos:start="55:9" pos:end="55:26"><name pos:start="55:9" pos:end="55:21"><name pos:start="55:9" pos:end="55:11">ctx</name><operator pos:start="55:12" pos:end="55:13">-&gt;</operator><name pos:start="55:14" pos:end="55:21">prev_seq</name></name> <operator pos:start="55:23" pos:end="55:23">=</operator> <operator pos:start="55:25" pos:end="55:25">-</operator><literal type="number" pos:start="55:26" pos:end="55:26">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:47"><expr pos:start="57:9" pos:end="57:46"><call pos:start="57:9" pos:end="57:46"><name pos:start="57:9" pos:end="57:14">memset</name><argument_list pos:start="57:15" pos:end="57:46">(<argument pos:start="57:16" pos:end="57:20"><expr pos:start="57:16" pos:end="57:20"><name pos:start="57:16" pos:end="57:20">prev1</name></expr></argument>, <argument pos:start="57:23" pos:end="57:23"><expr pos:start="57:23" pos:end="57:23"><literal type="number" pos:start="57:23" pos:end="57:23">0</literal></expr></argument>, <argument pos:start="57:26" pos:end="57:45"><expr pos:start="57:26" pos:end="57:45"><name pos:start="57:26" pos:end="57:36"><name pos:start="57:26" pos:end="57:28">ctx</name><operator pos:start="57:29" pos:end="57:30">-&gt;</operator><name pos:start="57:31" pos:end="57:36">height</name></name> <operator pos:start="57:38" pos:end="57:38">*</operator> <name pos:start="57:40" pos:end="57:45">stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:47"><expr pos:start="59:9" pos:end="59:46"><call pos:start="59:9" pos:end="59:46"><name pos:start="59:9" pos:end="59:14">memset</name><argument_list pos:start="59:15" pos:end="59:46">(<argument pos:start="59:16" pos:end="59:20"><expr pos:start="59:16" pos:end="59:20"><name pos:start="59:16" pos:end="59:20">prev2</name></expr></argument>, <argument pos:start="59:23" pos:end="59:23"><expr pos:start="59:23" pos:end="59:23"><literal type="number" pos:start="59:23" pos:end="59:23">0</literal></expr></argument>, <argument pos:start="59:26" pos:end="59:45"><expr pos:start="59:26" pos:end="59:45"><name pos:start="59:26" pos:end="59:36"><name pos:start="59:26" pos:end="59:28">ctx</name><operator pos:start="59:29" pos:end="59:30">-&gt;</operator><name pos:start="59:31" pos:end="59:36">height</name></name> <operator pos:start="59:38" pos:end="59:38">*</operator> <name pos:start="59:40" pos:end="59:45">stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:51"><expr pos:start="63:5" pos:end="63:50"><call pos:start="63:5" pos:end="63:50"><name pos:start="63:5" pos:end="63:11">av_dlog</name><argument_list pos:start="63:12" pos:end="63:50">(<argument pos:start="63:13" pos:end="63:22"><expr pos:start="63:13" pos:end="63:22"><name pos:start="63:13" pos:end="63:22"><name pos:start="63:13" pos:end="63:15">ctx</name><operator pos:start="63:16" pos:end="63:17">-&gt;</operator><name pos:start="63:18" pos:end="63:22">avctx</name></name></expr></argument>, <argument pos:start="63:25" pos:end="63:42"><expr pos:start="63:25" pos:end="63:42"><literal type="string" pos:start="63:25" pos:end="63:42">"compression %d\n"</literal></expr></argument>, <argument pos:start="63:45" pos:end="63:49"><expr pos:start="63:45" pos:end="63:49"><name pos:start="63:45" pos:end="63:49">compr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="65:5" pos:end="161:5">switch <condition pos:start="65:12" pos:end="65:18">(<expr pos:start="65:13" pos:end="65:17"><name pos:start="65:13" pos:end="65:17">compr</name></expr>)</condition> <block pos:start="65:20" pos:end="161:5">{<block_content pos:start="67:5" pos:end="159:36">

    <case pos:start="67:5" pos:end="67:11">case <expr pos:start="67:10" pos:end="67:10"><literal type="number" pos:start="67:10" pos:end="67:10">0</literal></expr>:</case>

        <if_stmt pos:start="69:9" pos:end="71:39"><if pos:start="69:9" pos:end="71:39">if <condition pos:start="69:12" pos:end="69:66">(<expr pos:start="69:13" pos:end="69:65"><call pos:start="69:13" pos:end="69:48"><name pos:start="69:13" pos:end="69:38">bytestream2_get_bytes_left</name><argument_list pos:start="69:39" pos:end="69:48">(<argument pos:start="69:40" pos:end="69:47"><expr pos:start="69:40" pos:end="69:47"><operator pos:start="69:40" pos:end="69:40">&amp;</operator><name pos:start="69:41" pos:end="69:47"><name pos:start="69:41" pos:end="69:43">ctx</name><operator pos:start="69:44" pos:end="69:45">-&gt;</operator><name pos:start="69:46" pos:end="69:47">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="69:50" pos:end="69:50">&lt;</operator> <name pos:start="69:52" pos:end="69:56">width</name> <operator pos:start="69:58" pos:end="69:58">*</operator> <name pos:start="69:60" pos:end="69:65">height</name></expr>)</condition><block type="pseudo" pos:start="71:13" pos:end="71:39"><block_content pos:start="71:13" pos:end="71:39">

            <return pos:start="71:13" pos:end="71:39">return <expr pos:start="71:20" pos:end="71:38"><name pos:start="71:20" pos:end="71:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <for pos:start="73:9" pos:end="79:9">for <control pos:start="73:13" pos:end="73:36">(<init pos:start="73:14" pos:end="73:19"><expr pos:start="73:14" pos:end="73:18"><name pos:start="73:14" pos:end="73:14">j</name> <operator pos:start="73:16" pos:end="73:16">=</operator> <literal type="number" pos:start="73:18" pos:end="73:18">0</literal></expr>;</init> <condition pos:start="73:21" pos:end="73:31"><expr pos:start="73:21" pos:end="73:30"><name pos:start="73:21" pos:end="73:21">j</name> <operator pos:start="73:23" pos:end="73:23">&lt;</operator> <name pos:start="73:25" pos:end="73:30">height</name></expr>;</condition> <incr pos:start="73:33" pos:end="73:35"><expr pos:start="73:33" pos:end="73:35"><name pos:start="73:33" pos:end="73:33">j</name><operator pos:start="73:34" pos:end="73:35">++</operator></expr></incr>)</control> <block pos:start="73:38" pos:end="79:9">{<block_content pos:start="75:13" pos:end="77:26">

            <expr_stmt pos:start="75:13" pos:end="75:58"><expr pos:start="75:13" pos:end="75:57"><call pos:start="75:13" pos:end="75:57"><name pos:start="75:13" pos:end="75:35">bytestream2_get_bufferu</name><argument_list pos:start="75:36" pos:end="75:57">(<argument pos:start="75:37" pos:end="75:44"><expr pos:start="75:37" pos:end="75:44"><operator pos:start="75:37" pos:end="75:37">&amp;</operator><name pos:start="75:38" pos:end="75:44"><name pos:start="75:38" pos:end="75:40">ctx</name><operator pos:start="75:41" pos:end="75:42">-&gt;</operator><name pos:start="75:43" pos:end="75:44">gb</name></name></expr></argument>, <argument pos:start="75:47" pos:end="75:49"><expr pos:start="75:47" pos:end="75:49"><name pos:start="75:47" pos:end="75:49">dst</name></expr></argument>, <argument pos:start="75:52" pos:end="75:56"><expr pos:start="75:52" pos:end="75:56"><name pos:start="75:52" pos:end="75:56">width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:26"><expr pos:start="77:13" pos:end="77:25"><name pos:start="77:13" pos:end="77:15">dst</name> <operator pos:start="77:17" pos:end="77:18">+=</operator> <name pos:start="77:20" pos:end="77:25">stride</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="81:9" pos:end="81:14">break;</break>

    <case pos:start="83:5" pos:end="83:11">case <expr pos:start="83:10" pos:end="83:10"><literal type="number" pos:start="83:10" pos:end="83:10">1</literal></expr>:</case>

        <if_stmt pos:start="85:9" pos:end="87:39"><if pos:start="85:9" pos:end="87:39">if <condition pos:start="85:12" pos:end="85:92">(<expr pos:start="85:13" pos:end="85:91"><call pos:start="85:13" pos:end="85:48"><name pos:start="85:13" pos:end="85:38">bytestream2_get_bytes_left</name><argument_list pos:start="85:39" pos:end="85:48">(<argument pos:start="85:40" pos:end="85:47"><expr pos:start="85:40" pos:end="85:47"><operator pos:start="85:40" pos:end="85:40">&amp;</operator><name pos:start="85:41" pos:end="85:47"><name pos:start="85:41" pos:end="85:43">ctx</name><operator pos:start="85:44" pos:end="85:45">-&gt;</operator><name pos:start="85:46" pos:end="85:47">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="85:50" pos:end="85:50">&lt;</operator> <operator pos:start="85:52" pos:end="85:52">(</operator><operator pos:start="85:53" pos:end="85:53">(</operator><name pos:start="85:54" pos:end="85:58">width</name> <operator pos:start="85:60" pos:end="85:60">+</operator> <literal type="number" pos:start="85:62" pos:end="85:62">1</literal><operator pos:start="85:63" pos:end="85:63">)</operator> <operator pos:start="85:65" pos:end="85:66">&gt;&gt;</operator> <literal type="number" pos:start="85:68" pos:end="85:68">1</literal><operator pos:start="85:69" pos:end="85:69">)</operator> <operator pos:start="85:71" pos:end="85:71">*</operator> <operator pos:start="85:73" pos:end="85:73">(</operator><operator pos:start="85:74" pos:end="85:74">(</operator><name pos:start="85:75" pos:end="85:80">height</name> <operator pos:start="85:82" pos:end="85:82">+</operator> <literal type="number" pos:start="85:84" pos:end="85:84">1</literal><operator pos:start="85:85" pos:end="85:85">)</operator> <operator pos:start="85:87" pos:end="85:88">&gt;&gt;</operator> <literal type="number" pos:start="85:90" pos:end="85:90">1</literal><operator pos:start="85:91" pos:end="85:91">)</operator></expr>)</condition><block type="pseudo" pos:start="87:13" pos:end="87:39"><block_content pos:start="87:13" pos:end="87:39">

            <return pos:start="87:13" pos:end="87:39">return <expr pos:start="87:20" pos:end="87:38"><name pos:start="87:20" pos:end="87:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <for pos:start="89:9" pos:end="101:9">for <control pos:start="89:13" pos:end="89:39">(<init pos:start="89:14" pos:end="89:19"><expr pos:start="89:14" pos:end="89:18"><name pos:start="89:14" pos:end="89:14">j</name> <operator pos:start="89:16" pos:end="89:16">=</operator> <literal type="number" pos:start="89:18" pos:end="89:18">0</literal></expr>;</init> <condition pos:start="89:21" pos:end="89:31"><expr pos:start="89:21" pos:end="89:30"><name pos:start="89:21" pos:end="89:21">j</name> <operator pos:start="89:23" pos:end="89:23">&lt;</operator> <name pos:start="89:25" pos:end="89:30">height</name></expr>;</condition> <incr pos:start="89:33" pos:end="89:38"><expr pos:start="89:33" pos:end="89:38"><name pos:start="89:33" pos:end="89:33">j</name> <operator pos:start="89:35" pos:end="89:36">+=</operator> <literal type="number" pos:start="89:38" pos:end="89:38">2</literal></expr></incr>)</control> <block pos:start="89:41" pos:end="101:9">{<block_content pos:start="91:13" pos:end="99:30">

            <for pos:start="91:13" pos:end="97:13">for <control pos:start="91:17" pos:end="91:42">(<init pos:start="91:18" pos:end="91:23"><expr pos:start="91:18" pos:end="91:22"><name pos:start="91:18" pos:end="91:18">i</name> <operator pos:start="91:20" pos:end="91:20">=</operator> <literal type="number" pos:start="91:22" pos:end="91:22">0</literal></expr>;</init> <condition pos:start="91:25" pos:end="91:34"><expr pos:start="91:25" pos:end="91:33"><name pos:start="91:25" pos:end="91:25">i</name> <operator pos:start="91:27" pos:end="91:27">&lt;</operator> <name pos:start="91:29" pos:end="91:33">width</name></expr>;</condition> <incr pos:start="91:36" pos:end="91:41"><expr pos:start="91:36" pos:end="91:41"><name pos:start="91:36" pos:end="91:36">i</name> <operator pos:start="91:38" pos:end="91:39">+=</operator> <literal type="number" pos:start="91:41" pos:end="91:41">2</literal></expr></incr>)</control> <block pos:start="91:44" pos:end="97:13">{<block_content pos:start="93:17" pos:end="95:88">

                <expr_stmt pos:start="93:17" pos:end="95:88"><expr pos:start="93:17" pos:end="95:87"><name pos:start="93:17" pos:end="93:22"><name pos:start="93:17" pos:end="93:19">dst</name><index pos:start="93:20" pos:end="93:22">[<expr pos:start="93:21" pos:end="93:21"><name pos:start="93:21" pos:end="93:21">i</name></expr>]</index></name> <operator pos:start="93:24" pos:end="93:24">=</operator> <name pos:start="93:26" pos:end="93:35"><name pos:start="93:26" pos:end="93:28">dst</name><index pos:start="93:29" pos:end="93:35">[<expr pos:start="93:30" pos:end="93:34"><name pos:start="93:30" pos:end="93:30">i</name> <operator pos:start="93:32" pos:end="93:32">+</operator> <literal type="number" pos:start="93:34" pos:end="93:34">1</literal></expr>]</index></name> <operator pos:start="93:37" pos:end="93:37">=</operator>

                <name pos:start="95:17" pos:end="95:31"><name pos:start="95:17" pos:end="95:19">dst</name><index pos:start="95:20" pos:end="95:31">[<expr pos:start="95:21" pos:end="95:30"><name pos:start="95:21" pos:end="95:26">stride</name> <operator pos:start="95:28" pos:end="95:28">+</operator> <name pos:start="95:30" pos:end="95:30">i</name></expr>]</index></name> <operator pos:start="95:33" pos:end="95:33">=</operator> <name pos:start="95:35" pos:end="95:53"><name pos:start="95:35" pos:end="95:37">dst</name><index pos:start="95:38" pos:end="95:53">[<expr pos:start="95:39" pos:end="95:52"><name pos:start="95:39" pos:end="95:44">stride</name> <operator pos:start="95:46" pos:end="95:46">+</operator> <name pos:start="95:48" pos:end="95:48">i</name> <operator pos:start="95:50" pos:end="95:50">+</operator> <literal type="number" pos:start="95:52" pos:end="95:52">1</literal></expr>]</index></name> <operator pos:start="95:55" pos:end="95:55">=</operator> <call pos:start="95:57" pos:end="95:87"><name pos:start="95:57" pos:end="95:77">bytestream2_get_byteu</name><argument_list pos:start="95:78" pos:end="95:87">(<argument pos:start="95:79" pos:end="95:86"><expr pos:start="95:79" pos:end="95:86"><operator pos:start="95:79" pos:end="95:79">&amp;</operator><name pos:start="95:80" pos:end="95:86"><name pos:start="95:80" pos:end="95:82">ctx</name><operator pos:start="95:83" pos:end="95:84">-&gt;</operator><name pos:start="95:85" pos:end="95:86">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="99:13" pos:end="99:30"><expr pos:start="99:13" pos:end="99:29"><name pos:start="99:13" pos:end="99:15">dst</name> <operator pos:start="99:17" pos:end="99:18">+=</operator> <name pos:start="99:20" pos:end="99:25">stride</name> <operator pos:start="99:27" pos:end="99:27">*</operator> <literal type="number" pos:start="99:29" pos:end="99:29">2</literal></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="103:9" pos:end="103:14">break;</break>

    <case pos:start="105:5" pos:end="105:11">case <expr pos:start="105:10" pos:end="105:10"><literal type="number" pos:start="105:10" pos:end="105:10">2</literal></expr>:</case>

        <if_stmt pos:start="107:9" pos:end="129:9"><if pos:start="107:9" pos:end="129:9">if <condition pos:start="107:12" pos:end="107:37">(<expr pos:start="107:13" pos:end="107:36"><name pos:start="107:13" pos:end="107:15">seq</name> <operator pos:start="107:17" pos:end="107:18">==</operator> <name pos:start="107:20" pos:end="107:32"><name pos:start="107:20" pos:end="107:22">ctx</name><operator pos:start="107:23" pos:end="107:24">-&gt;</operator><name pos:start="107:25" pos:end="107:32">prev_seq</name></name> <operator pos:start="107:34" pos:end="107:34">+</operator> <literal type="number" pos:start="107:36" pos:end="107:36">1</literal></expr>)</condition> <block pos:start="107:39" pos:end="129:9">{<block_content pos:start="109:13" pos:end="127:13">

            <for pos:start="109:13" pos:end="127:13">for <control pos:start="109:17" pos:end="109:43">(<init pos:start="109:18" pos:end="109:23"><expr pos:start="109:18" pos:end="109:22"><name pos:start="109:18" pos:end="109:18">j</name> <operator pos:start="109:20" pos:end="109:20">=</operator> <literal type="number" pos:start="109:22" pos:end="109:22">0</literal></expr>;</init> <condition pos:start="109:25" pos:end="109:35"><expr pos:start="109:25" pos:end="109:34"><name pos:start="109:25" pos:end="109:25">j</name> <operator pos:start="109:27" pos:end="109:27">&lt;</operator> <name pos:start="109:29" pos:end="109:34">height</name></expr>;</condition> <incr pos:start="109:37" pos:end="109:42"><expr pos:start="109:37" pos:end="109:42"><name pos:start="109:37" pos:end="109:37">j</name> <operator pos:start="109:39" pos:end="109:40">+=</operator> <literal type="number" pos:start="109:42" pos:end="109:42">8</literal></expr></incr>)</control> <block pos:start="109:45" pos:end="127:13">{<block_content pos:start="111:17" pos:end="125:36">

                <for pos:start="111:17" pos:end="119:17">for <control pos:start="111:21" pos:end="111:46">(<init pos:start="111:22" pos:end="111:27"><expr pos:start="111:22" pos:end="111:26"><name pos:start="111:22" pos:end="111:22">i</name> <operator pos:start="111:24" pos:end="111:24">=</operator> <literal type="number" pos:start="111:26" pos:end="111:26">0</literal></expr>;</init> <condition pos:start="111:29" pos:end="111:38"><expr pos:start="111:29" pos:end="111:37"><name pos:start="111:29" pos:end="111:29">i</name> <operator pos:start="111:31" pos:end="111:31">&lt;</operator> <name pos:start="111:33" pos:end="111:37">width</name></expr>;</condition> <incr pos:start="111:40" pos:end="111:45"><expr pos:start="111:40" pos:end="111:45"><name pos:start="111:40" pos:end="111:40">i</name> <operator pos:start="111:42" pos:end="111:43">+=</operator> <literal type="number" pos:start="111:45" pos:end="111:45">8</literal></expr></incr>)</control> <block pos:start="111:48" pos:end="119:17">{<block_content pos:start="113:21" pos:end="117:51">

                    <if_stmt pos:start="113:21" pos:end="117:51"><if pos:start="113:21" pos:end="117:51">if <condition pos:start="113:24" pos:end="115:54">(<expr pos:start="113:25" pos:end="115:53"><call pos:start="113:25" pos:end="115:53"><name pos:start="113:25" pos:end="113:37">process_block</name><argument_list pos:start="113:38" pos:end="115:53">(<argument pos:start="113:39" pos:end="113:41"><expr pos:start="113:39" pos:end="113:41"><name pos:start="113:39" pos:end="113:41">ctx</name></expr></argument>, <argument pos:start="113:44" pos:end="113:50"><expr pos:start="113:44" pos:end="113:50"><name pos:start="113:44" pos:end="113:46">dst</name> <operator pos:start="113:48" pos:end="113:48">+</operator> <name pos:start="113:50" pos:end="113:50">i</name></expr></argument>, <argument pos:start="113:53" pos:end="113:61"><expr pos:start="113:53" pos:end="113:61"><name pos:start="113:53" pos:end="113:57">prev1</name> <operator pos:start="113:59" pos:end="113:59">+</operator> <name pos:start="113:61" pos:end="113:61">i</name></expr></argument>, <argument pos:start="113:64" pos:end="113:72"><expr pos:start="113:64" pos:end="113:72"><name pos:start="113:64" pos:end="113:68">prev2</name> <operator pos:start="113:70" pos:end="113:70">+</operator> <name pos:start="113:72" pos:end="113:72">i</name></expr></argument>, <argument pos:start="113:75" pos:end="113:80"><expr pos:start="113:75" pos:end="113:80"><name pos:start="113:75" pos:end="113:80">stride</name></expr></argument>,

                                      <argument pos:start="115:39" pos:end="115:49"><expr pos:start="115:39" pos:end="115:49"><name pos:start="115:39" pos:end="115:45">tbl_pos</name> <operator pos:start="115:47" pos:end="115:47">+</operator> <literal type="number" pos:start="115:49" pos:end="115:49">8</literal></expr></argument>, <argument pos:start="115:52" pos:end="115:52"><expr pos:start="115:52" pos:end="115:52"><literal type="number" pos:start="115:52" pos:end="115:52">8</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="117:25" pos:end="117:51"><block_content pos:start="117:25" pos:end="117:51">

                        <return pos:start="117:25" pos:end="117:51">return <expr pos:start="117:32" pos:end="117:50"><name pos:start="117:32" pos:end="117:50">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="121:17" pos:end="121:36"><expr pos:start="121:17" pos:end="121:35"><name pos:start="121:17" pos:end="121:19">dst</name>   <operator pos:start="121:23" pos:end="121:24">+=</operator> <name pos:start="121:26" pos:end="121:31">stride</name> <operator pos:start="121:33" pos:end="121:33">*</operator> <literal type="number" pos:start="121:35" pos:end="121:35">8</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="123:17" pos:end="123:36"><expr pos:start="123:17" pos:end="123:35"><name pos:start="123:17" pos:end="123:21">prev1</name> <operator pos:start="123:23" pos:end="123:24">+=</operator> <name pos:start="123:26" pos:end="123:31">stride</name> <operator pos:start="123:33" pos:end="123:33">*</operator> <literal type="number" pos:start="123:35" pos:end="123:35">8</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="125:17" pos:end="125:36"><expr pos:start="125:17" pos:end="125:35"><name pos:start="125:17" pos:end="125:21">prev2</name> <operator pos:start="125:23" pos:end="125:24">+=</operator> <name pos:start="125:26" pos:end="125:31">stride</name> <operator pos:start="125:33" pos:end="125:33">*</operator> <literal type="number" pos:start="125:35" pos:end="125:35">8</literal></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

        <break pos:start="131:9" pos:end="131:14">break;</break>

    <case pos:start="133:5" pos:end="133:11">case <expr pos:start="133:10" pos:end="133:10"><literal type="number" pos:start="133:10" pos:end="133:10">3</literal></expr>:</case>

        <expr_stmt pos:start="135:9" pos:end="135:63"><expr pos:start="135:9" pos:end="135:62"><call pos:start="135:9" pos:end="135:62"><name pos:start="135:9" pos:end="135:14">memcpy</name><argument_list pos:start="135:15" pos:end="135:62">(<argument pos:start="135:16" pos:end="135:24"><expr pos:start="135:16" pos:end="135:24"><name pos:start="135:16" pos:end="135:24"><name pos:start="135:16" pos:end="135:18">ctx</name><operator pos:start="135:19" pos:end="135:20">-&gt;</operator><name pos:start="135:21" pos:end="135:24">frm0</name></name></expr></argument>, <argument pos:start="135:27" pos:end="135:35"><expr pos:start="135:27" pos:end="135:35"><name pos:start="135:27" pos:end="135:35"><name pos:start="135:27" pos:end="135:29">ctx</name><operator pos:start="135:30" pos:end="135:31">-&gt;</operator><name pos:start="135:32" pos:end="135:35">frm2</name></name></expr></argument>, <argument pos:start="135:38" pos:end="135:61"><expr pos:start="135:38" pos:end="135:61"><name pos:start="135:38" pos:end="135:47"><name pos:start="135:38" pos:end="135:40">ctx</name><operator pos:start="135:41" pos:end="135:42">-&gt;</operator><name pos:start="135:43" pos:end="135:47">pitch</name></name> <operator pos:start="135:49" pos:end="135:49">*</operator> <name pos:start="135:51" pos:end="135:61"><name pos:start="135:51" pos:end="135:53">ctx</name><operator pos:start="135:54" pos:end="135:55">-&gt;</operator><name pos:start="135:56" pos:end="135:61">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="137:9" pos:end="137:14">break;</break>

    <case pos:start="139:5" pos:end="139:11">case <expr pos:start="139:10" pos:end="139:10"><literal type="number" pos:start="139:10" pos:end="139:10">4</literal></expr>:</case>

        <expr_stmt pos:start="141:9" pos:end="141:63"><expr pos:start="141:9" pos:end="141:62"><call pos:start="141:9" pos:end="141:62"><name pos:start="141:9" pos:end="141:14">memcpy</name><argument_list pos:start="141:15" pos:end="141:62">(<argument pos:start="141:16" pos:end="141:24"><expr pos:start="141:16" pos:end="141:24"><name pos:start="141:16" pos:end="141:24"><name pos:start="141:16" pos:end="141:18">ctx</name><operator pos:start="141:19" pos:end="141:20">-&gt;</operator><name pos:start="141:21" pos:end="141:24">frm0</name></name></expr></argument>, <argument pos:start="141:27" pos:end="141:35"><expr pos:start="141:27" pos:end="141:35"><name pos:start="141:27" pos:end="141:35"><name pos:start="141:27" pos:end="141:29">ctx</name><operator pos:start="141:30" pos:end="141:31">-&gt;</operator><name pos:start="141:32" pos:end="141:35">frm1</name></name></expr></argument>, <argument pos:start="141:38" pos:end="141:61"><expr pos:start="141:38" pos:end="141:61"><name pos:start="141:38" pos:end="141:47"><name pos:start="141:38" pos:end="141:40">ctx</name><operator pos:start="141:41" pos:end="141:42">-&gt;</operator><name pos:start="141:43" pos:end="141:47">pitch</name></name> <operator pos:start="141:49" pos:end="141:49">*</operator> <name pos:start="141:51" pos:end="141:61"><name pos:start="141:51" pos:end="141:53">ctx</name><operator pos:start="141:54" pos:end="141:55">-&gt;</operator><name pos:start="141:56" pos:end="141:61">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="143:9" pos:end="143:14">break;</break>

    <case pos:start="145:5" pos:end="145:11">case <expr pos:start="145:10" pos:end="145:10"><literal type="number" pos:start="145:10" pos:end="145:10">5</literal></expr>:</case>

        <if_stmt pos:start="147:9" pos:end="149:39"><if pos:start="147:9" pos:end="149:39">if <condition pos:start="147:12" pos:end="147:47">(<expr pos:start="147:13" pos:end="147:46"><call pos:start="147:13" pos:end="147:46"><name pos:start="147:13" pos:end="147:22">rle_decode</name><argument_list pos:start="147:23" pos:end="147:46">(<argument pos:start="147:24" pos:end="147:26"><expr pos:start="147:24" pos:end="147:26"><name pos:start="147:24" pos:end="147:26">ctx</name></expr></argument>, <argument pos:start="147:29" pos:end="147:31"><expr pos:start="147:29" pos:end="147:31"><name pos:start="147:29" pos:end="147:31">dst</name></expr></argument>, <argument pos:start="147:34" pos:end="147:45"><expr pos:start="147:34" pos:end="147:45"><name pos:start="147:34" pos:end="147:45">decoded_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="149:13" pos:end="149:39"><block_content pos:start="149:13" pos:end="149:39">

            <return pos:start="149:13" pos:end="149:39">return <expr pos:start="149:20" pos:end="149:38"><name pos:start="149:20" pos:end="149:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <break pos:start="151:9" pos:end="151:14">break;</break>

    <default pos:start="153:5" pos:end="153:12">default:</default>

        <expr_stmt pos:start="155:9" pos:end="157:70"><expr pos:start="155:9" pos:end="157:69"><call pos:start="155:9" pos:end="157:69"><name pos:start="155:9" pos:end="155:14">av_log</name><argument_list pos:start="155:15" pos:end="157:69">(<argument pos:start="155:16" pos:end="155:25"><expr pos:start="155:16" pos:end="155:25"><name pos:start="155:16" pos:end="155:25"><name pos:start="155:16" pos:end="155:18">ctx</name><operator pos:start="155:19" pos:end="155:20">-&gt;</operator><name pos:start="155:21" pos:end="155:25">avctx</name></name></expr></argument>, <argument pos:start="155:28" pos:end="155:39"><expr pos:start="155:28" pos:end="155:39"><name pos:start="155:28" pos:end="155:39">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="157:16" pos:end="157:61"><expr pos:start="157:16" pos:end="157:61"><literal type="string" pos:start="157:16" pos:end="157:61">"subcodec 47 compression %d not implemented\n"</literal></expr></argument>, <argument pos:start="157:64" pos:end="157:68"><expr pos:start="157:64" pos:end="157:68"><name pos:start="157:64" pos:end="157:68">compr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="159:9" pos:end="159:36">return <expr pos:start="159:16" pos:end="159:35"><name pos:start="159:16" pos:end="159:35">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></switch>

    <if_stmt pos:start="163:5" pos:end="169:29"><if pos:start="163:5" pos:end="165:35">if <condition pos:start="163:8" pos:end="163:33">(<expr pos:start="163:9" pos:end="163:32"><name pos:start="163:9" pos:end="163:11">seq</name> <operator pos:start="163:13" pos:end="163:14">==</operator> <name pos:start="163:16" pos:end="163:28"><name pos:start="163:16" pos:end="163:18">ctx</name><operator pos:start="163:19" pos:end="163:20">-&gt;</operator><name pos:start="163:21" pos:end="163:28">prev_seq</name></name> <operator pos:start="163:30" pos:end="163:30">+</operator> <literal type="number" pos:start="163:32" pos:end="163:32">1</literal></expr>)</condition><block type="pseudo" pos:start="165:9" pos:end="165:35"><block_content pos:start="165:9" pos:end="165:35">

        <expr_stmt pos:start="165:9" pos:end="165:35"><expr pos:start="165:9" pos:end="165:34"><name pos:start="165:9" pos:end="165:24"><name pos:start="165:9" pos:end="165:11">ctx</name><operator pos:start="165:12" pos:end="165:13">-&gt;</operator><name pos:start="165:14" pos:end="165:24">rotate_code</name></name> <operator pos:start="165:26" pos:end="165:26">=</operator> <name pos:start="165:28" pos:end="165:34">new_rot</name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="167:5" pos:end="169:29">else<block type="pseudo" pos:start="169:9" pos:end="169:29"><block_content pos:start="169:9" pos:end="169:29">

        <expr_stmt pos:start="169:9" pos:end="169:29"><expr pos:start="169:9" pos:end="169:28"><name pos:start="169:9" pos:end="169:24"><name pos:start="169:9" pos:end="169:11">ctx</name><operator pos:start="169:12" pos:end="169:13">-&gt;</operator><name pos:start="169:14" pos:end="169:24">rotate_code</name></name> <operator pos:start="169:26" pos:end="169:26">=</operator> <literal type="number" pos:start="169:28" pos:end="169:28">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="171:5" pos:end="171:24"><expr pos:start="171:5" pos:end="171:23"><name pos:start="171:5" pos:end="171:17"><name pos:start="171:5" pos:end="171:7">ctx</name><operator pos:start="171:8" pos:end="171:9">-&gt;</operator><name pos:start="171:10" pos:end="171:17">prev_seq</name></name> <operator pos:start="171:19" pos:end="171:19">=</operator> <name pos:start="171:21" pos:end="171:23">seq</name></expr>;</expr_stmt>



    <return pos:start="175:5" pos:end="175:13">return <expr pos:start="175:12" pos:end="175:12"><literal type="number" pos:start="175:12" pos:end="175:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
