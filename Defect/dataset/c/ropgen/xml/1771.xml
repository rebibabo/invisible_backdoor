<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1771.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:8"><name pos:start="1:1" pos:end="1:8">uint32_t</name></type> <name pos:start="1:10" pos:end="1:37">kvm_arch_get_supported_cpuid</name><parameter_list pos:start="1:38" pos:end="3:62">(<parameter pos:start="1:39" pos:end="1:49"><decl pos:start="1:39" pos:end="1:49"><type pos:start="1:39" pos:end="1:49"><name pos:start="1:39" pos:end="1:46">KVMState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:49">s</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:68"><decl pos:start="1:52" pos:end="1:68"><type pos:start="1:52" pos:end="1:68"><name pos:start="1:52" pos:end="1:59">uint32_t</name></type> <name pos:start="1:61" pos:end="1:68">function</name></decl></parameter>,

                                      <parameter pos:start="3:39" pos:end="3:52"><decl pos:start="3:39" pos:end="3:52"><type pos:start="3:39" pos:end="3:52"><name pos:start="3:39" pos:end="3:46">uint32_t</name></type> <name pos:start="3:48" pos:end="3:52">index</name></decl></parameter>, <parameter pos:start="3:55" pos:end="3:61"><decl pos:start="3:55" pos:end="3:61"><type pos:start="3:55" pos:end="3:61"><name pos:start="3:55" pos:end="3:57">int</name></type> <name pos:start="3:59" pos:end="3:61">reg</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="93:1">{<block_content pos:start="7:5" pos:end="91:15">

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:21">kvm_cpuid2</name></name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:28">cpuid</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">max</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:16">ret</name> <init pos:start="11:18" pos:end="11:20">= <expr pos:start="11:20" pos:end="11:20"><literal type="number" pos:start="11:20" pos:end="11:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:24">cpuid_1_edx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">bool</name></type> <name pos:start="15:10" pos:end="15:14">found</name> <init pos:start="15:16" pos:end="15:22">= <expr pos:start="15:18" pos:end="15:22"><name pos:start="15:18" pos:end="15:22">false</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:12"><expr pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:7">max</name> <operator pos:start="19:9" pos:end="19:9">=</operator> <literal type="number" pos:start="19:11" pos:end="19:11">1</literal></expr>;</expr_stmt>

    <while pos:start="21:5" pos:end="25:5">while <condition pos:start="21:11" pos:end="21:51">(<expr pos:start="21:12" pos:end="21:50"><operator pos:start="21:12" pos:end="21:12">(</operator><name pos:start="21:13" pos:end="21:17">cpuid</name> <operator pos:start="21:19" pos:end="21:19">=</operator> <call pos:start="21:21" pos:end="21:41"><name pos:start="21:21" pos:end="21:33">try_get_cpuid</name><argument_list pos:start="21:34" pos:end="21:41">(<argument pos:start="21:35" pos:end="21:35"><expr pos:start="21:35" pos:end="21:35"><name pos:start="21:35" pos:end="21:35">s</name></expr></argument>, <argument pos:start="21:38" pos:end="21:40"><expr pos:start="21:38" pos:end="21:40"><name pos:start="21:38" pos:end="21:40">max</name></expr></argument>)</argument_list></call><operator pos:start="21:42" pos:end="21:42">)</operator> <operator pos:start="21:44" pos:end="21:45">==</operator> <name pos:start="21:47" pos:end="21:50">NULL</name></expr>)</condition> <block pos:start="21:53" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:17">

        <expr_stmt pos:start="23:9" pos:end="23:17"><expr pos:start="23:9" pos:end="23:16"><name pos:start="23:9" pos:end="23:11">max</name> <operator pos:start="23:13" pos:end="23:14">*=</operator> <literal type="number" pos:start="23:16" pos:end="23:16">2</literal></expr>;</expr_stmt>

    </block_content>}</block></while>



    <decl_stmt pos:start="29:5" pos:end="29:78"><decl pos:start="29:5" pos:end="29:77"><type pos:start="29:5" pos:end="29:29"><name pos:start="29:5" pos:end="29:27"><name pos:start="29:5" pos:end="29:10">struct</name> <name pos:start="29:12" pos:end="29:27">kvm_cpuid_entry2</name></name> <modifier pos:start="29:29" pos:end="29:29">*</modifier></type><name pos:start="29:30" pos:end="29:34">entry</name> <init pos:start="29:36" pos:end="29:77">= <expr pos:start="29:38" pos:end="29:77"><call pos:start="29:38" pos:end="29:77"><name pos:start="29:38" pos:end="29:53">cpuid_find_entry</name><argument_list pos:start="29:54" pos:end="29:77">(<argument pos:start="29:55" pos:end="29:59"><expr pos:start="29:55" pos:end="29:59"><name pos:start="29:55" pos:end="29:59">cpuid</name></expr></argument>, <argument pos:start="29:62" pos:end="29:69"><expr pos:start="29:62" pos:end="29:69"><name pos:start="29:62" pos:end="29:69">function</name></expr></argument>, <argument pos:start="29:72" pos:end="29:76"><expr pos:start="29:72" pos:end="29:76"><name pos:start="29:72" pos:end="29:76">index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:14">(<expr pos:start="31:9" pos:end="31:13"><name pos:start="31:9" pos:end="31:13">entry</name></expr>)</condition> <block pos:start="31:16" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:46">

        <expr_stmt pos:start="33:9" pos:end="33:21"><expr pos:start="33:9" pos:end="33:20"><name pos:start="33:9" pos:end="33:13">found</name> <operator pos:start="33:15" pos:end="33:15">=</operator> <name pos:start="33:17" pos:end="33:20">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:46"><expr pos:start="35:9" pos:end="35:45"><name pos:start="35:9" pos:end="35:11">ret</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <call pos:start="35:15" pos:end="35:45"><name pos:start="35:15" pos:end="35:33">cpuid_entry_get_reg</name><argument_list pos:start="35:34" pos:end="35:45">(<argument pos:start="35:35" pos:end="35:39"><expr pos:start="35:35" pos:end="35:39"><name pos:start="35:35" pos:end="35:39">entry</name></expr></argument>, <argument pos:start="35:42" pos:end="35:44"><expr pos:start="35:42" pos:end="35:44"><name pos:start="35:42" pos:end="35:44">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:52">/* Fixups for the data returned by KVM, below */</comment>



    <if_stmt pos:start="45:5" pos:end="73:5"><if pos:start="45:5" pos:end="73:5">if <condition pos:start="45:8" pos:end="45:21">(<expr pos:start="45:9" pos:end="45:20"><name pos:start="45:9" pos:end="45:11">reg</name> <operator pos:start="45:13" pos:end="45:14">==</operator> <name pos:start="45:16" pos:end="45:20">R_EDX</name></expr>)</condition> <block pos:start="45:23" pos:end="73:5">{<block_content pos:start="47:9" pos:end="71:9">

        <switch pos:start="47:9" pos:end="71:9">switch <condition pos:start="47:16" pos:end="47:25">(<expr pos:start="47:17" pos:end="47:24"><name pos:start="47:17" pos:end="47:24">function</name></expr>)</condition> <block pos:start="47:27" pos:end="71:9">{<block_content pos:start="49:9" pos:end="69:18">

        <case pos:start="49:9" pos:end="49:15">case <expr pos:start="49:14" pos:end="49:14"><literal type="number" pos:start="49:14" pos:end="49:14">1</literal></expr>:</case>

            <comment type="block" pos:start="51:13" pos:end="51:69">/* KVM before 2.6.30 misreports the following features */</comment>

            <expr_stmt pos:start="53:13" pos:end="53:66"><expr pos:start="53:13" pos:end="53:65"><name pos:start="53:13" pos:end="53:15">ret</name> <operator pos:start="53:17" pos:end="53:18">|=</operator> <name pos:start="53:20" pos:end="53:29">CPUID_MTRR</name> <operator pos:start="53:31" pos:end="53:31">|</operator> <name pos:start="53:33" pos:end="53:41">CPUID_PAT</name> <operator pos:start="53:43" pos:end="53:43">|</operator> <name pos:start="53:45" pos:end="53:53">CPUID_MCE</name> <operator pos:start="53:55" pos:end="53:55">|</operator> <name pos:start="53:57" pos:end="53:65">CPUID_MCA</name></expr>;</expr_stmt>

            <break pos:start="55:13" pos:end="55:18">break;</break>

        <case pos:start="57:9" pos:end="57:24">case <expr pos:start="57:14" pos:end="57:23"><literal type="number" pos:start="57:14" pos:end="57:23">0x80000001</literal></expr>:</case>

            <comment type="block" pos:start="59:13" pos:end="63:15">/* On Intel, kvm returns cpuid according to the Intel spec,

             * so add missing bits according to the AMD spec:

             */</comment>

            <expr_stmt pos:start="65:13" pos:end="65:71"><expr pos:start="65:13" pos:end="65:70"><name pos:start="65:13" pos:end="65:23">cpuid_1_edx</name> <operator pos:start="65:25" pos:end="65:25">=</operator> <call pos:start="65:27" pos:end="65:70"><name pos:start="65:27" pos:end="65:54">kvm_arch_get_supported_cpuid</name><argument_list pos:start="65:55" pos:end="65:70">(<argument pos:start="65:56" pos:end="65:56"><expr pos:start="65:56" pos:end="65:56"><name pos:start="65:56" pos:end="65:56">s</name></expr></argument>, <argument pos:start="65:59" pos:end="65:59"><expr pos:start="65:59" pos:end="65:59"><literal type="number" pos:start="65:59" pos:end="65:59">1</literal></expr></argument>, <argument pos:start="65:62" pos:end="65:62"><expr pos:start="65:62" pos:end="65:62"><literal type="number" pos:start="65:62" pos:end="65:62">0</literal></expr></argument>, <argument pos:start="65:65" pos:end="65:69"><expr pos:start="65:65" pos:end="65:69"><name pos:start="65:65" pos:end="65:69">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:56"><expr pos:start="67:13" pos:end="67:55"><name pos:start="67:13" pos:end="67:15">ret</name> <operator pos:start="67:17" pos:end="67:18">|=</operator> <name pos:start="67:20" pos:end="67:30">cpuid_1_edx</name> <operator pos:start="67:32" pos:end="67:32">&amp;</operator> <name pos:start="67:34" pos:end="67:55">CPUID_EXT2_AMD_ALIASES</name></expr>;</expr_stmt>

            <break pos:start="69:13" pos:end="69:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:18"><expr pos:start="77:5" pos:end="77:17"><call pos:start="77:5" pos:end="77:17"><name pos:start="77:5" pos:end="77:10">g_free</name><argument_list pos:start="77:11" pos:end="77:17">(<argument pos:start="77:12" pos:end="77:16"><expr pos:start="77:12" pos:end="77:16"><name pos:start="77:12" pos:end="77:16">cpuid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="81:5" pos:end="81:36">/* fallback for older kernels */</comment>

    <if_stmt pos:start="83:5" pos:end="87:5"><if pos:start="83:5" pos:end="87:5">if <condition pos:start="83:8" pos:end="83:51">(<expr pos:start="83:9" pos:end="83:50"><operator pos:start="83:9" pos:end="83:9">(</operator><name pos:start="83:10" pos:end="83:17">function</name> <operator pos:start="83:19" pos:end="83:20">==</operator> <name pos:start="83:22" pos:end="83:39">KVM_CPUID_FEATURES</name><operator pos:start="83:40" pos:end="83:40">)</operator> <operator pos:start="83:42" pos:end="83:43">&amp;&amp;</operator> <operator pos:start="83:45" pos:end="83:45">!</operator><name pos:start="83:46" pos:end="83:50">found</name></expr>)</condition> <block pos:start="83:53" pos:end="87:5">{<block_content pos:start="85:9" pos:end="85:35">

        <expr_stmt pos:start="85:9" pos:end="85:35"><expr pos:start="85:9" pos:end="85:34"><name pos:start="85:9" pos:end="85:11">ret</name> <operator pos:start="85:13" pos:end="85:13">=</operator> <call pos:start="85:15" pos:end="85:34"><name pos:start="85:15" pos:end="85:31">get_para_features</name><argument_list pos:start="85:32" pos:end="85:34">(<argument pos:start="85:33" pos:end="85:33"><expr pos:start="85:33" pos:end="85:33"><name pos:start="85:33" pos:end="85:33">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="91:5" pos:end="91:15">return <expr pos:start="91:12" pos:end="91:14"><name pos:start="91:12" pos:end="91:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
