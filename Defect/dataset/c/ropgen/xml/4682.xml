<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4682.c" pos:tabs="8"><function pos:start="1:1" pos:end="269:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:32">audio_encode_example</name><parameter_list pos:start="1:33" pos:end="1:54">(<parameter pos:start="1:34" pos:end="1:53"><decl pos:start="1:34" pos:end="1:53"><type pos:start="1:34" pos:end="1:45"><specifier pos:start="1:34" pos:end="1:38">const</specifier> <name pos:start="1:40" pos:end="1:43">char</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:53">filename</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="269:1">{<block_content pos:start="5:5" pos:end="267:15">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">AVCodec</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:18">codec</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">AVCodecContext</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">c</name><init pos:start="7:22" pos:end="7:27">= <expr pos:start="7:24" pos:end="7:27"><name pos:start="7:24" pos:end="7:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">AVFrame</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:18">frame</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">AVPacket</name></type> <name pos:start="11:14" pos:end="11:16">pkt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>, <decl pos:start="13:12" pos:end="13:12"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:12">j</name></decl>, <decl pos:start="13:15" pos:end="13:15"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:15" pos:end="13:15">k</name></decl>, <decl pos:start="13:18" pos:end="13:20"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:18" pos:end="13:20">ret</name></decl>, <decl pos:start="13:23" pos:end="13:32"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:23" pos:end="13:32">got_output</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:19">buffer_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:12"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">FILE</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:11">f</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:22"><decl pos:start="19:5" pos:end="19:21"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:12">uint16_t</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:21">samples</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:19"><decl pos:start="21:5" pos:end="21:11"><type pos:start="21:5" pos:end="21:9"><name pos:start="21:5" pos:end="21:9">float</name></type> <name pos:start="21:11" pos:end="21:11">t</name></decl>, <decl pos:start="21:14" pos:end="21:18"><type ref="prev" pos:start="21:5" pos:end="21:9"/><name pos:start="21:14" pos:end="21:18">tincr</name></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:47"><expr pos:start="25:5" pos:end="25:46"><call pos:start="25:5" pos:end="25:46"><name pos:start="25:5" pos:end="25:10">printf</name><argument_list pos:start="25:11" pos:end="25:46">(<argument pos:start="25:12" pos:end="25:35"><expr pos:start="25:12" pos:end="25:35"><literal type="string" pos:start="25:12" pos:end="25:35">"Encode audio file %s\n"</literal></expr></argument>, <argument pos:start="25:38" pos:end="25:45"><expr pos:start="25:38" pos:end="25:45"><name pos:start="25:38" pos:end="25:45">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:30">/* find the MP2 encoder */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:50"><expr pos:start="31:5" pos:end="31:49"><name pos:start="31:5" pos:end="31:9">codec</name> <operator pos:start="31:11" pos:end="31:11">=</operator> <call pos:start="31:13" pos:end="31:49"><name pos:start="31:13" pos:end="31:32">avcodec_find_encoder</name><argument_list pos:start="31:33" pos:end="31:49">(<argument pos:start="31:34" pos:end="31:48"><expr pos:start="31:34" pos:end="31:48"><name pos:start="31:34" pos:end="31:48">AV_CODEC_ID_MP2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:15">(<expr pos:start="33:9" pos:end="33:14"><operator pos:start="33:9" pos:end="33:9">!</operator><name pos:start="33:10" pos:end="33:14">codec</name></expr>)</condition> <block pos:start="33:17" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:16">

        <expr_stmt pos:start="35:9" pos:end="35:45"><expr pos:start="35:9" pos:end="35:44"><call pos:start="35:9" pos:end="35:44"><name pos:start="35:9" pos:end="35:15">fprintf</name><argument_list pos:start="35:16" pos:end="35:44">(<argument pos:start="35:17" pos:end="35:22"><expr pos:start="35:17" pos:end="35:22"><name pos:start="35:17" pos:end="35:22">stderr</name></expr></argument>, <argument pos:start="35:25" pos:end="35:43"><expr pos:start="35:25" pos:end="35:43"><literal type="string" pos:start="35:25" pos:end="35:43">"Codec not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:16"><expr pos:start="37:9" pos:end="37:15"><call pos:start="37:9" pos:end="37:15"><name pos:start="37:9" pos:end="37:12">exit</name><argument_list pos:start="37:13" pos:end="37:15">(<argument pos:start="37:14" pos:end="37:14"><expr pos:start="37:14" pos:end="37:14"><literal type="number" pos:start="37:14" pos:end="37:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:38"><expr pos:start="43:5" pos:end="43:37"><name pos:start="43:5" pos:end="43:5">c</name> <operator pos:start="43:7" pos:end="43:7">=</operator> <call pos:start="43:9" pos:end="43:37"><name pos:start="43:9" pos:end="43:30">avcodec_alloc_context3</name><argument_list pos:start="43:31" pos:end="43:37">(<argument pos:start="43:32" pos:end="43:36"><expr pos:start="43:32" pos:end="43:36"><name pos:start="43:32" pos:end="43:36">codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="51:5"><if pos:start="45:5" pos:end="51:5">if <condition pos:start="45:8" pos:end="45:11">(<expr pos:start="45:9" pos:end="45:10"><operator pos:start="45:9" pos:end="45:9">!</operator><name pos:start="45:10" pos:end="45:10">c</name></expr>)</condition> <block pos:start="45:13" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:16">

        <expr_stmt pos:start="47:9" pos:end="47:68"><expr pos:start="47:9" pos:end="47:67"><call pos:start="47:9" pos:end="47:67"><name pos:start="47:9" pos:end="47:15">fprintf</name><argument_list pos:start="47:16" pos:end="47:67">(<argument pos:start="47:17" pos:end="47:22"><expr pos:start="47:17" pos:end="47:22"><name pos:start="47:17" pos:end="47:22">stderr</name></expr></argument>, <argument pos:start="47:25" pos:end="47:66"><expr pos:start="47:25" pos:end="47:66"><literal type="string" pos:start="47:25" pos:end="47:66">"Could not allocate audio codec context\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:16"><expr pos:start="49:9" pos:end="49:15"><call pos:start="49:9" pos:end="49:15"><name pos:start="49:9" pos:end="49:12">exit</name><argument_list pos:start="49:13" pos:end="49:15">(<argument pos:start="49:14" pos:end="49:14"><expr pos:start="49:14" pos:end="49:14"><literal type="number" pos:start="49:14" pos:end="49:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:31">/* put sample parameters */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:24"><expr pos:start="57:5" pos:end="57:23"><name pos:start="57:5" pos:end="57:15"><name pos:start="57:5" pos:end="57:5">c</name><operator pos:start="57:6" pos:end="57:7">-&gt;</operator><name pos:start="57:8" pos:end="57:15">bit_rate</name></name> <operator pos:start="57:17" pos:end="57:17">=</operator> <literal type="number" pos:start="57:19" pos:end="57:23">64000</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="61:5" pos:end="61:55">/* check that the encoder supports s16 pcm input */</comment>

    <expr_stmt pos:start="63:5" pos:end="63:38"><expr pos:start="63:5" pos:end="63:37"><name pos:start="63:5" pos:end="63:17"><name pos:start="63:5" pos:end="63:5">c</name><operator pos:start="63:6" pos:end="63:7">-&gt;</operator><name pos:start="63:8" pos:end="63:17">sample_fmt</name></name> <operator pos:start="63:19" pos:end="63:19">=</operator> <name pos:start="63:21" pos:end="63:37">AV_SAMPLE_FMT_S16</name></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="73:5"><if pos:start="65:5" pos:end="73:5">if <condition pos:start="65:8" pos:end="65:48">(<expr pos:start="65:9" pos:end="65:47"><operator pos:start="65:9" pos:end="65:9">!</operator><call pos:start="65:10" pos:end="65:47"><name pos:start="65:10" pos:end="65:25">check_sample_fmt</name><argument_list pos:start="65:26" pos:end="65:47">(<argument pos:start="65:27" pos:end="65:31"><expr pos:start="65:27" pos:end="65:31"><name pos:start="65:27" pos:end="65:31">codec</name></expr></argument>, <argument pos:start="65:34" pos:end="65:46"><expr pos:start="65:34" pos:end="65:46"><name pos:start="65:34" pos:end="65:46"><name pos:start="65:34" pos:end="65:34">c</name><operator pos:start="65:35" pos:end="65:36">-&gt;</operator><name pos:start="65:37" pos:end="65:46">sample_fmt</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="65:50" pos:end="73:5">{<block_content pos:start="67:9" pos:end="71:16">

        <expr_stmt pos:start="67:9" pos:end="69:55"><expr pos:start="67:9" pos:end="69:54"><call pos:start="67:9" pos:end="69:54"><name pos:start="67:9" pos:end="67:15">fprintf</name><argument_list pos:start="67:16" pos:end="69:54">(<argument pos:start="67:17" pos:end="67:22"><expr pos:start="67:17" pos:end="67:22"><name pos:start="67:17" pos:end="67:22">stderr</name></expr></argument>, <argument pos:start="67:25" pos:end="67:67"><expr pos:start="67:25" pos:end="67:67"><literal type="string" pos:start="67:25" pos:end="67:67">"Encoder does not support sample format %s"</literal></expr></argument>,

                <argument pos:start="69:17" pos:end="69:53"><expr pos:start="69:17" pos:end="69:53"><call pos:start="69:17" pos:end="69:53"><name pos:start="69:17" pos:end="69:38">av_get_sample_fmt_name</name><argument_list pos:start="69:39" pos:end="69:53">(<argument pos:start="69:40" pos:end="69:52"><expr pos:start="69:40" pos:end="69:52"><name pos:start="69:40" pos:end="69:52"><name pos:start="69:40" pos:end="69:40">c</name><operator pos:start="69:41" pos:end="69:42">-&gt;</operator><name pos:start="69:43" pos:end="69:52">sample_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:16"><expr pos:start="71:9" pos:end="71:15"><call pos:start="71:9" pos:end="71:15"><name pos:start="71:9" pos:end="71:12">exit</name><argument_list pos:start="71:13" pos:end="71:15">(<argument pos:start="71:14" pos:end="71:14"><expr pos:start="71:14" pos:end="71:14"><literal type="number" pos:start="71:14" pos:end="71:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="77:5" pos:end="77:64">/* select other audio parameters supported by the encoder */</comment>

    <expr_stmt pos:start="79:5" pos:end="79:50"><expr pos:start="79:5" pos:end="79:49"><name pos:start="79:5" pos:end="79:18"><name pos:start="79:5" pos:end="79:5">c</name><operator pos:start="79:6" pos:end="79:7">-&gt;</operator><name pos:start="79:8" pos:end="79:18">sample_rate</name></name>    <operator pos:start="79:23" pos:end="79:23">=</operator> <call pos:start="79:25" pos:end="79:49"><name pos:start="79:25" pos:end="79:42">select_sample_rate</name><argument_list pos:start="79:43" pos:end="79:49">(<argument pos:start="79:44" pos:end="79:48"><expr pos:start="79:44" pos:end="79:48"><name pos:start="79:44" pos:end="79:48">codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:53"><expr pos:start="81:5" pos:end="81:52"><name pos:start="81:5" pos:end="81:21"><name pos:start="81:5" pos:end="81:5">c</name><operator pos:start="81:6" pos:end="81:7">-&gt;</operator><name pos:start="81:8" pos:end="81:21">channel_layout</name></name> <operator pos:start="81:23" pos:end="81:23">=</operator> <call pos:start="81:25" pos:end="81:52"><name pos:start="81:25" pos:end="81:45">select_channel_layout</name><argument_list pos:start="81:46" pos:end="81:52">(<argument pos:start="81:47" pos:end="81:51"><expr pos:start="81:47" pos:end="81:51"><name pos:start="81:47" pos:end="81:51">codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:77"><expr pos:start="83:5" pos:end="83:76"><name pos:start="83:5" pos:end="83:15"><name pos:start="83:5" pos:end="83:5">c</name><operator pos:start="83:6" pos:end="83:7">-&gt;</operator><name pos:start="83:8" pos:end="83:15">channels</name></name>       <operator pos:start="83:23" pos:end="83:23">=</operator> <call pos:start="83:25" pos:end="83:76"><name pos:start="83:25" pos:end="83:57">av_get_channel_layout_nb_channels</name><argument_list pos:start="83:58" pos:end="83:76">(<argument pos:start="83:59" pos:end="83:75"><expr pos:start="83:59" pos:end="83:75"><name pos:start="83:59" pos:end="83:75"><name pos:start="83:59" pos:end="83:59">c</name><operator pos:start="83:60" pos:end="83:61">-&gt;</operator><name pos:start="83:62" pos:end="83:75">channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="87:5" pos:end="87:17">/* open it */</comment>

    <if_stmt pos:start="89:5" pos:end="95:5"><if pos:start="89:5" pos:end="95:5">if <condition pos:start="89:8" pos:end="89:42">(<expr pos:start="89:9" pos:end="89:41"><call pos:start="89:9" pos:end="89:37"><name pos:start="89:9" pos:end="89:21">avcodec_open2</name><argument_list pos:start="89:22" pos:end="89:37">(<argument pos:start="89:23" pos:end="89:23"><expr pos:start="89:23" pos:end="89:23"><name pos:start="89:23" pos:end="89:23">c</name></expr></argument>, <argument pos:start="89:26" pos:end="89:30"><expr pos:start="89:26" pos:end="89:30"><name pos:start="89:26" pos:end="89:30">codec</name></expr></argument>, <argument pos:start="89:33" pos:end="89:36"><expr pos:start="89:33" pos:end="89:36"><name pos:start="89:33" pos:end="89:36">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="89:39" pos:end="89:39">&lt;</operator> <literal type="number" pos:start="89:41" pos:end="89:41">0</literal></expr>)</condition> <block pos:start="89:44" pos:end="95:5">{<block_content pos:start="91:9" pos:end="93:16">

        <expr_stmt pos:start="91:9" pos:end="91:50"><expr pos:start="91:9" pos:end="91:49"><call pos:start="91:9" pos:end="91:49"><name pos:start="91:9" pos:end="91:15">fprintf</name><argument_list pos:start="91:16" pos:end="91:49">(<argument pos:start="91:17" pos:end="91:22"><expr pos:start="91:17" pos:end="91:22"><name pos:start="91:17" pos:end="91:22">stderr</name></expr></argument>, <argument pos:start="91:25" pos:end="91:48"><expr pos:start="91:25" pos:end="91:48"><literal type="string" pos:start="91:25" pos:end="91:48">"Could not open codec\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:16"><expr pos:start="93:9" pos:end="93:15"><call pos:start="93:9" pos:end="93:15"><name pos:start="93:9" pos:end="93:12">exit</name><argument_list pos:start="93:13" pos:end="93:15">(<argument pos:start="93:14" pos:end="93:14"><expr pos:start="93:14" pos:end="93:14"><literal type="number" pos:start="93:14" pos:end="93:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="99:5" pos:end="99:30"><expr pos:start="99:5" pos:end="99:29"><name pos:start="99:5" pos:end="99:5">f</name> <operator pos:start="99:7" pos:end="99:7">=</operator> <call pos:start="99:9" pos:end="99:29"><name pos:start="99:9" pos:end="99:13">fopen</name><argument_list pos:start="99:14" pos:end="99:29">(<argument pos:start="99:15" pos:end="99:22"><expr pos:start="99:15" pos:end="99:22"><name pos:start="99:15" pos:end="99:22">filename</name></expr></argument>, <argument pos:start="99:25" pos:end="99:28"><expr pos:start="99:25" pos:end="99:28"><literal type="string" pos:start="99:25" pos:end="99:28">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="101:5" pos:end="107:5"><if pos:start="101:5" pos:end="107:5">if <condition pos:start="101:8" pos:end="101:11">(<expr pos:start="101:9" pos:end="101:10"><operator pos:start="101:9" pos:end="101:9">!</operator><name pos:start="101:10" pos:end="101:10">f</name></expr>)</condition> <block pos:start="101:13" pos:end="107:5">{<block_content pos:start="103:9" pos:end="105:16">

        <expr_stmt pos:start="103:9" pos:end="103:57"><expr pos:start="103:9" pos:end="103:56"><call pos:start="103:9" pos:end="103:56"><name pos:start="103:9" pos:end="103:15">fprintf</name><argument_list pos:start="103:16" pos:end="103:56">(<argument pos:start="103:17" pos:end="103:22"><expr pos:start="103:17" pos:end="103:22"><name pos:start="103:17" pos:end="103:22">stderr</name></expr></argument>, <argument pos:start="103:25" pos:end="103:45"><expr pos:start="103:25" pos:end="103:45"><literal type="string" pos:start="103:25" pos:end="103:45">"Could not open %s\n"</literal></expr></argument>, <argument pos:start="103:48" pos:end="103:55"><expr pos:start="103:48" pos:end="103:55"><name pos:start="103:48" pos:end="103:55">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:16"><expr pos:start="105:9" pos:end="105:15"><call pos:start="105:9" pos:end="105:15"><name pos:start="105:9" pos:end="105:12">exit</name><argument_list pos:start="105:13" pos:end="105:15">(<argument pos:start="105:14" pos:end="105:14"><expr pos:start="105:14" pos:end="105:14"><literal type="number" pos:start="105:14" pos:end="105:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="111:5" pos:end="111:42">/* frame containing input raw audio */</comment>

    <expr_stmt pos:start="113:5" pos:end="113:29"><expr pos:start="113:5" pos:end="113:28"><name pos:start="113:5" pos:end="113:9">frame</name> <operator pos:start="113:11" pos:end="113:11">=</operator> <call pos:start="113:13" pos:end="113:28"><name pos:start="113:13" pos:end="113:26">av_frame_alloc</name><argument_list pos:start="113:27" pos:end="113:28">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="115:5" pos:end="121:5"><if pos:start="115:5" pos:end="121:5">if <condition pos:start="115:8" pos:end="115:15">(<expr pos:start="115:9" pos:end="115:14"><operator pos:start="115:9" pos:end="115:9">!</operator><name pos:start="115:10" pos:end="115:14">frame</name></expr>)</condition> <block pos:start="115:17" pos:end="121:5">{<block_content pos:start="117:9" pos:end="119:16">

        <expr_stmt pos:start="117:9" pos:end="117:60"><expr pos:start="117:9" pos:end="117:59"><call pos:start="117:9" pos:end="117:59"><name pos:start="117:9" pos:end="117:15">fprintf</name><argument_list pos:start="117:16" pos:end="117:59">(<argument pos:start="117:17" pos:end="117:22"><expr pos:start="117:17" pos:end="117:22"><name pos:start="117:17" pos:end="117:22">stderr</name></expr></argument>, <argument pos:start="117:25" pos:end="117:58"><expr pos:start="117:25" pos:end="117:58"><literal type="string" pos:start="117:25" pos:end="117:58">"Could not allocate audio frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:16"><expr pos:start="119:9" pos:end="119:15"><call pos:start="119:9" pos:end="119:15"><name pos:start="119:9" pos:end="119:12">exit</name><argument_list pos:start="119:13" pos:end="119:15">(<argument pos:start="119:14" pos:end="119:14"><expr pos:start="119:14" pos:end="119:14"><literal type="number" pos:start="119:14" pos:end="119:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="125:5" pos:end="125:42"><expr pos:start="125:5" pos:end="125:41"><name pos:start="125:5" pos:end="125:21"><name pos:start="125:5" pos:end="125:9">frame</name><operator pos:start="125:10" pos:end="125:11">-&gt;</operator><name pos:start="125:12" pos:end="125:21">nb_samples</name></name>     <operator pos:start="125:27" pos:end="125:27">=</operator> <name pos:start="125:29" pos:end="125:41"><name pos:start="125:29" pos:end="125:29">c</name><operator pos:start="125:30" pos:end="125:31">-&gt;</operator><name pos:start="125:32" pos:end="125:41">frame_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:42"><expr pos:start="127:5" pos:end="127:41"><name pos:start="127:5" pos:end="127:17"><name pos:start="127:5" pos:end="127:9">frame</name><operator pos:start="127:10" pos:end="127:11">-&gt;</operator><name pos:start="127:12" pos:end="127:17">format</name></name>         <operator pos:start="127:27" pos:end="127:27">=</operator> <name pos:start="127:29" pos:end="127:41"><name pos:start="127:29" pos:end="127:29">c</name><operator pos:start="127:30" pos:end="127:31">-&gt;</operator><name pos:start="127:32" pos:end="127:41">sample_fmt</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:46"><expr pos:start="129:5" pos:end="129:45"><name pos:start="129:5" pos:end="129:25"><name pos:start="129:5" pos:end="129:9">frame</name><operator pos:start="129:10" pos:end="129:11">-&gt;</operator><name pos:start="129:12" pos:end="129:25">channel_layout</name></name> <operator pos:start="129:27" pos:end="129:27">=</operator> <name pos:start="129:29" pos:end="129:45"><name pos:start="129:29" pos:end="129:29">c</name><operator pos:start="129:30" pos:end="129:31">-&gt;</operator><name pos:start="129:32" pos:end="129:45">channel_layout</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="133:5" pos:end="135:62">/* the codec gives us the frame size, in samples,

     * we calculate the size of the samples buffer in bytes */</comment>

    <expr_stmt pos:start="137:5" pos:end="139:63"><expr pos:start="137:5" pos:end="139:62"><name pos:start="137:5" pos:end="137:15">buffer_size</name> <operator pos:start="137:17" pos:end="137:17">=</operator> <call pos:start="137:19" pos:end="139:62"><name pos:start="137:19" pos:end="137:44">av_samples_get_buffer_size</name><argument_list pos:start="137:45" pos:end="139:62">(<argument pos:start="137:46" pos:end="137:49"><expr pos:start="137:46" pos:end="137:49"><name pos:start="137:46" pos:end="137:49">NULL</name></expr></argument>, <argument pos:start="137:52" pos:end="137:62"><expr pos:start="137:52" pos:end="137:62"><name pos:start="137:52" pos:end="137:62"><name pos:start="137:52" pos:end="137:52">c</name><operator pos:start="137:53" pos:end="137:54">-&gt;</operator><name pos:start="137:55" pos:end="137:62">channels</name></name></expr></argument>, <argument pos:start="137:65" pos:end="137:77"><expr pos:start="137:65" pos:end="137:77"><name pos:start="137:65" pos:end="137:77"><name pos:start="137:65" pos:end="137:65">c</name><operator pos:start="137:66" pos:end="137:67">-&gt;</operator><name pos:start="137:68" pos:end="137:77">frame_size</name></name></expr></argument>,

                                             <argument pos:start="139:46" pos:end="139:58"><expr pos:start="139:46" pos:end="139:58"><name pos:start="139:46" pos:end="139:58"><name pos:start="139:46" pos:end="139:46">c</name><operator pos:start="139:47" pos:end="139:48">-&gt;</operator><name pos:start="139:49" pos:end="139:58">sample_fmt</name></name></expr></argument>, <argument pos:start="139:61" pos:end="139:61"><expr pos:start="139:61" pos:end="139:61"><literal type="number" pos:start="139:61" pos:end="139:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="141:5" pos:end="147:5"><if pos:start="141:5" pos:end="147:5">if <condition pos:start="141:8" pos:end="141:21">(<expr pos:start="141:9" pos:end="141:20"><operator pos:start="141:9" pos:end="141:9">!</operator><name pos:start="141:10" pos:end="141:20">buffer_size</name></expr>)</condition> <block pos:start="141:23" pos:end="147:5">{<block_content pos:start="143:9" pos:end="145:16">

        <expr_stmt pos:start="143:9" pos:end="143:62"><expr pos:start="143:9" pos:end="143:61"><call pos:start="143:9" pos:end="143:61"><name pos:start="143:9" pos:end="143:15">fprintf</name><argument_list pos:start="143:16" pos:end="143:61">(<argument pos:start="143:17" pos:end="143:22"><expr pos:start="143:17" pos:end="143:22"><name pos:start="143:17" pos:end="143:22">stderr</name></expr></argument>, <argument pos:start="143:25" pos:end="143:60"><expr pos:start="143:25" pos:end="143:60"><literal type="string" pos:start="143:25" pos:end="143:60">"Could not get sample buffer size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:16"><expr pos:start="145:9" pos:end="145:15"><call pos:start="145:9" pos:end="145:15"><name pos:start="145:9" pos:end="145:12">exit</name><argument_list pos:start="145:13" pos:end="145:15">(<argument pos:start="145:14" pos:end="145:14"><expr pos:start="145:14" pos:end="145:14"><literal type="number" pos:start="145:14" pos:end="145:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:37"><expr pos:start="149:5" pos:end="149:36"><name pos:start="149:5" pos:end="149:11">samples</name> <operator pos:start="149:13" pos:end="149:13">=</operator> <call pos:start="149:15" pos:end="149:36"><name pos:start="149:15" pos:end="149:23">av_malloc</name><argument_list pos:start="149:24" pos:end="149:36">(<argument pos:start="149:25" pos:end="149:35"><expr pos:start="149:25" pos:end="149:35"><name pos:start="149:25" pos:end="149:35">buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="151:5" pos:end="159:5"><if pos:start="151:5" pos:end="159:5">if <condition pos:start="151:8" pos:end="151:17">(<expr pos:start="151:9" pos:end="151:16"><operator pos:start="151:9" pos:end="151:9">!</operator><name pos:start="151:10" pos:end="151:16">samples</name></expr>)</condition> <block pos:start="151:19" pos:end="159:5">{<block_content pos:start="153:9" pos:end="157:16">

        <expr_stmt pos:start="153:9" pos:end="155:29"><expr pos:start="153:9" pos:end="155:28"><call pos:start="153:9" pos:end="155:28"><name pos:start="153:9" pos:end="153:15">fprintf</name><argument_list pos:start="153:16" pos:end="155:28">(<argument pos:start="153:17" pos:end="153:22"><expr pos:start="153:17" pos:end="153:22"><name pos:start="153:17" pos:end="153:22">stderr</name></expr></argument>, <argument pos:start="153:25" pos:end="153:74"><expr pos:start="153:25" pos:end="153:74"><literal type="string" pos:start="153:25" pos:end="153:74">"Could not allocate %d bytes for samples buffer\n"</literal></expr></argument>,

                <argument pos:start="155:17" pos:end="155:27"><expr pos:start="155:17" pos:end="155:27"><name pos:start="155:17" pos:end="155:27">buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:16"><expr pos:start="157:9" pos:end="157:15"><call pos:start="157:9" pos:end="157:15"><name pos:start="157:9" pos:end="157:12">exit</name><argument_list pos:start="157:13" pos:end="157:15">(<argument pos:start="157:14" pos:end="157:14"><expr pos:start="157:14" pos:end="157:14"><literal type="number" pos:start="157:14" pos:end="157:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="161:5" pos:end="161:48">/* setup the data pointers in the AVFrame */</comment>

    <expr_stmt pos:start="163:5" pos:end="165:76"><expr pos:start="163:5" pos:end="165:75"><name pos:start="163:5" pos:end="163:7">ret</name> <operator pos:start="163:9" pos:end="163:9">=</operator> <call pos:start="163:11" pos:end="165:75"><name pos:start="163:11" pos:end="163:34">avcodec_fill_audio_frame</name><argument_list pos:start="163:35" pos:end="165:75">(<argument pos:start="163:36" pos:end="163:40"><expr pos:start="163:36" pos:end="163:40"><name pos:start="163:36" pos:end="163:40">frame</name></expr></argument>, <argument pos:start="163:43" pos:end="163:53"><expr pos:start="163:43" pos:end="163:53"><name pos:start="163:43" pos:end="163:53"><name pos:start="163:43" pos:end="163:43">c</name><operator pos:start="163:44" pos:end="163:45">-&gt;</operator><name pos:start="163:46" pos:end="163:53">channels</name></name></expr></argument>, <argument pos:start="163:56" pos:end="163:68"><expr pos:start="163:56" pos:end="163:68"><name pos:start="163:56" pos:end="163:68"><name pos:start="163:56" pos:end="163:56">c</name><operator pos:start="163:57" pos:end="163:58">-&gt;</operator><name pos:start="163:59" pos:end="163:68">sample_fmt</name></name></expr></argument>,

                                   <argument pos:start="165:36" pos:end="165:58"><expr pos:start="165:36" pos:end="165:58"><operator pos:start="165:36" pos:end="165:36">(</operator><specifier pos:start="165:37" pos:end="165:41">const</specifier> <name pos:start="165:43" pos:end="165:49">uint8_t</name><operator pos:start="165:50" pos:end="165:50">*</operator><operator pos:start="165:51" pos:end="165:51">)</operator><name pos:start="165:52" pos:end="165:58">samples</name></expr></argument>, <argument pos:start="165:61" pos:end="165:71"><expr pos:start="165:61" pos:end="165:71"><name pos:start="165:61" pos:end="165:71">buffer_size</name></expr></argument>, <argument pos:start="165:74" pos:end="165:74"><expr pos:start="165:74" pos:end="165:74"><literal type="number" pos:start="165:74" pos:end="165:74">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="167:5" pos:end="173:5"><if pos:start="167:5" pos:end="173:5">if <condition pos:start="167:8" pos:end="167:16">(<expr pos:start="167:9" pos:end="167:15"><name pos:start="167:9" pos:end="167:11">ret</name> <operator pos:start="167:13" pos:end="167:13">&lt;</operator> <literal type="number" pos:start="167:15" pos:end="167:15">0</literal></expr>)</condition> <block pos:start="167:18" pos:end="173:5">{<block_content pos:start="169:9" pos:end="171:16">

        <expr_stmt pos:start="169:9" pos:end="169:57"><expr pos:start="169:9" pos:end="169:56"><call pos:start="169:9" pos:end="169:56"><name pos:start="169:9" pos:end="169:15">fprintf</name><argument_list pos:start="169:16" pos:end="169:56">(<argument pos:start="169:17" pos:end="169:22"><expr pos:start="169:17" pos:end="169:22"><name pos:start="169:17" pos:end="169:22">stderr</name></expr></argument>, <argument pos:start="169:25" pos:end="169:55"><expr pos:start="169:25" pos:end="169:55"><literal type="string" pos:start="169:25" pos:end="169:55">"Could not setup audio frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:16"><expr pos:start="171:9" pos:end="171:15"><call pos:start="171:9" pos:end="171:15"><name pos:start="171:9" pos:end="171:12">exit</name><argument_list pos:start="171:13" pos:end="171:15">(<argument pos:start="171:14" pos:end="171:14"><expr pos:start="171:14" pos:end="171:14"><literal type="number" pos:start="171:14" pos:end="171:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="177:5" pos:end="177:36">/* encode a single tone sound */</comment>

    <expr_stmt pos:start="179:5" pos:end="179:10"><expr pos:start="179:5" pos:end="179:9"><name pos:start="179:5" pos:end="179:5">t</name> <operator pos:start="179:7" pos:end="179:7">=</operator> <literal type="number" pos:start="179:9" pos:end="179:9">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="181:5" pos:end="181:46"><expr pos:start="181:5" pos:end="181:45"><name pos:start="181:5" pos:end="181:9">tincr</name> <operator pos:start="181:11" pos:end="181:11">=</operator> <literal type="number" pos:start="181:13" pos:end="181:13">2</literal> <operator pos:start="181:15" pos:end="181:15">*</operator> <name pos:start="181:17" pos:end="181:20">M_PI</name> <operator pos:start="181:22" pos:end="181:22">*</operator> <literal type="number" pos:start="181:24" pos:end="181:28">440.0</literal> <operator pos:start="181:30" pos:end="181:30">/</operator> <name pos:start="181:32" pos:end="181:45"><name pos:start="181:32" pos:end="181:32">c</name><operator pos:start="181:33" pos:end="181:34">-&gt;</operator><name pos:start="181:35" pos:end="181:45">sample_rate</name></name></expr>;</expr_stmt>

    <for pos:start="183:5" pos:end="227:5">for<control pos:start="183:8" pos:end="183:22">(<init pos:start="183:9" pos:end="183:12"><expr pos:start="183:9" pos:end="183:11"><name pos:start="183:9" pos:end="183:9">i</name><operator pos:start="183:10" pos:end="183:10">=</operator><literal type="number" pos:start="183:11" pos:end="183:11">0</literal></expr>;</init><condition pos:start="183:13" pos:end="183:18"><expr pos:start="183:13" pos:end="183:17"><name pos:start="183:13" pos:end="183:13">i</name><operator pos:start="183:14" pos:end="183:14">&lt;</operator><literal type="number" pos:start="183:15" pos:end="183:17">200</literal></expr>;</condition><incr pos:start="183:19" pos:end="183:21"><expr pos:start="183:19" pos:end="183:21"><name pos:start="183:19" pos:end="183:19">i</name><operator pos:start="183:20" pos:end="183:21">++</operator></expr></incr>)</control> <block pos:start="183:24" pos:end="227:5">{<block_content pos:start="185:9" pos:end="225:9">

        <expr_stmt pos:start="185:9" pos:end="185:29"><expr pos:start="185:9" pos:end="185:28"><call pos:start="185:9" pos:end="185:28"><name pos:start="185:9" pos:end="185:22">av_init_packet</name><argument_list pos:start="185:23" pos:end="185:28">(<argument pos:start="185:24" pos:end="185:27"><expr pos:start="185:24" pos:end="185:27"><operator pos:start="185:24" pos:end="185:24">&amp;</operator><name pos:start="185:25" pos:end="185:27">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:24"><expr pos:start="187:9" pos:end="187:23"><name pos:start="187:9" pos:end="187:16"><name pos:start="187:9" pos:end="187:11">pkt</name><operator pos:start="187:12" pos:end="187:12">.</operator><name pos:start="187:13" pos:end="187:16">data</name></name> <operator pos:start="187:18" pos:end="187:18">=</operator> <name pos:start="187:20" pos:end="187:23">NULL</name></expr>;</expr_stmt> <comment type="line" pos:start="187:26" pos:end="187:72">// packet data will be allocated by the encoder</comment>

        <expr_stmt pos:start="189:9" pos:end="189:21"><expr pos:start="189:9" pos:end="189:20"><name pos:start="189:9" pos:end="189:16"><name pos:start="189:9" pos:end="189:11">pkt</name><operator pos:start="189:12" pos:end="189:12">.</operator><name pos:start="189:13" pos:end="189:16">size</name></name> <operator pos:start="189:18" pos:end="189:18">=</operator> <literal type="number" pos:start="189:20" pos:end="189:20">0</literal></expr>;</expr_stmt>



        <for pos:start="193:9" pos:end="205:9">for <control pos:start="193:13" pos:end="193:43">(<init pos:start="193:14" pos:end="193:19"><expr pos:start="193:14" pos:end="193:18"><name pos:start="193:14" pos:end="193:14">j</name> <operator pos:start="193:16" pos:end="193:16">=</operator> <literal type="number" pos:start="193:18" pos:end="193:18">0</literal></expr>;</init> <condition pos:start="193:21" pos:end="193:38"><expr pos:start="193:21" pos:end="193:37"><name pos:start="193:21" pos:end="193:21">j</name> <operator pos:start="193:23" pos:end="193:23">&lt;</operator> <name pos:start="193:25" pos:end="193:37"><name pos:start="193:25" pos:end="193:25">c</name><operator pos:start="193:26" pos:end="193:27">-&gt;</operator><name pos:start="193:28" pos:end="193:37">frame_size</name></name></expr>;</condition> <incr pos:start="193:40" pos:end="193:42"><expr pos:start="193:40" pos:end="193:42"><name pos:start="193:40" pos:end="193:40">j</name><operator pos:start="193:41" pos:end="193:42">++</operator></expr></incr>)</control> <block pos:start="193:45" pos:end="205:9">{<block_content pos:start="195:13" pos:end="203:23">

            <expr_stmt pos:start="195:13" pos:end="195:49"><expr pos:start="195:13" pos:end="195:48"><name pos:start="195:13" pos:end="195:24"><name pos:start="195:13" pos:end="195:19">samples</name><index pos:start="195:20" pos:end="195:24">[<expr pos:start="195:21" pos:end="195:23"><literal type="number" pos:start="195:21" pos:end="195:21">2</literal><operator pos:start="195:22" pos:end="195:22">*</operator><name pos:start="195:23" pos:end="195:23">j</name></expr>]</index></name> <operator pos:start="195:26" pos:end="195:26">=</operator> <operator pos:start="195:28" pos:end="195:28">(</operator><name pos:start="195:29" pos:end="195:31">int</name><operator pos:start="195:32" pos:end="195:32">)</operator><operator pos:start="195:33" pos:end="195:33">(</operator><call pos:start="195:34" pos:end="195:39"><name pos:start="195:34" pos:end="195:36">sin</name><argument_list pos:start="195:37" pos:end="195:39">(<argument pos:start="195:38" pos:end="195:38"><expr pos:start="195:38" pos:end="195:38"><name pos:start="195:38" pos:end="195:38">t</name></expr></argument>)</argument_list></call> <operator pos:start="195:41" pos:end="195:41">*</operator> <literal type="number" pos:start="195:43" pos:end="195:47">10000</literal><operator pos:start="195:48" pos:end="195:48">)</operator></expr>;</expr_stmt>



            <for pos:start="199:13" pos:end="201:48">for <control pos:start="199:17" pos:end="199:45">(<init pos:start="199:18" pos:end="199:23"><expr pos:start="199:18" pos:end="199:22"><name pos:start="199:18" pos:end="199:18">k</name> <operator pos:start="199:20" pos:end="199:20">=</operator> <literal type="number" pos:start="199:22" pos:end="199:22">1</literal></expr>;</init> <condition pos:start="199:25" pos:end="199:40"><expr pos:start="199:25" pos:end="199:39"><name pos:start="199:25" pos:end="199:25">k</name> <operator pos:start="199:27" pos:end="199:27">&lt;</operator> <name pos:start="199:29" pos:end="199:39"><name pos:start="199:29" pos:end="199:29">c</name><operator pos:start="199:30" pos:end="199:31">-&gt;</operator><name pos:start="199:32" pos:end="199:39">channels</name></name></expr>;</condition> <incr pos:start="199:42" pos:end="199:44"><expr pos:start="199:42" pos:end="199:44"><name pos:start="199:42" pos:end="199:42">k</name><operator pos:start="199:43" pos:end="199:44">++</operator></expr></incr>)</control><block type="pseudo" pos:start="201:17" pos:end="201:48"><block_content pos:start="201:17" pos:end="201:48">

                <expr_stmt pos:start="201:17" pos:end="201:48"><expr pos:start="201:17" pos:end="201:47"><name pos:start="201:17" pos:end="201:32"><name pos:start="201:17" pos:end="201:23">samples</name><index pos:start="201:24" pos:end="201:32">[<expr pos:start="201:25" pos:end="201:31"><literal type="number" pos:start="201:25" pos:end="201:25">2</literal><operator pos:start="201:26" pos:end="201:26">*</operator><name pos:start="201:27" pos:end="201:27">j</name> <operator pos:start="201:29" pos:end="201:29">+</operator> <name pos:start="201:31" pos:end="201:31">k</name></expr>]</index></name> <operator pos:start="201:34" pos:end="201:34">=</operator> <name pos:start="201:36" pos:end="201:47"><name pos:start="201:36" pos:end="201:42">samples</name><index pos:start="201:43" pos:end="201:47">[<expr pos:start="201:44" pos:end="201:46"><literal type="number" pos:start="201:44" pos:end="201:44">2</literal><operator pos:start="201:45" pos:end="201:45">*</operator><name pos:start="201:46" pos:end="201:46">j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="203:13" pos:end="203:23"><expr pos:start="203:13" pos:end="203:22"><name pos:start="203:13" pos:end="203:13">t</name> <operator pos:start="203:15" pos:end="203:16">+=</operator> <name pos:start="203:18" pos:end="203:22">tincr</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <comment type="block" pos:start="207:9" pos:end="207:32">/* encode the samples */</comment>

        <expr_stmt pos:start="209:9" pos:end="209:65"><expr pos:start="209:9" pos:end="209:64"><name pos:start="209:9" pos:end="209:11">ret</name> <operator pos:start="209:13" pos:end="209:13">=</operator> <call pos:start="209:15" pos:end="209:64"><name pos:start="209:15" pos:end="209:35">avcodec_encode_audio2</name><argument_list pos:start="209:36" pos:end="209:64">(<argument pos:start="209:37" pos:end="209:37"><expr pos:start="209:37" pos:end="209:37"><name pos:start="209:37" pos:end="209:37">c</name></expr></argument>, <argument pos:start="209:40" pos:end="209:43"><expr pos:start="209:40" pos:end="209:43"><operator pos:start="209:40" pos:end="209:40">&amp;</operator><name pos:start="209:41" pos:end="209:43">pkt</name></expr></argument>, <argument pos:start="209:46" pos:end="209:50"><expr pos:start="209:46" pos:end="209:50"><name pos:start="209:46" pos:end="209:50">frame</name></expr></argument>, <argument pos:start="209:53" pos:end="209:63"><expr pos:start="209:53" pos:end="209:63"><operator pos:start="209:53" pos:end="209:53">&amp;</operator><name pos:start="209:54" pos:end="209:63">got_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="211:9" pos:end="217:9"><if pos:start="211:9" pos:end="217:9">if <condition pos:start="211:12" pos:end="211:20">(<expr pos:start="211:13" pos:end="211:19"><name pos:start="211:13" pos:end="211:15">ret</name> <operator pos:start="211:17" pos:end="211:17">&lt;</operator> <literal type="number" pos:start="211:19" pos:end="211:19">0</literal></expr>)</condition> <block pos:start="211:22" pos:end="217:9">{<block_content pos:start="213:13" pos:end="215:20">

            <expr_stmt pos:start="213:13" pos:end="213:60"><expr pos:start="213:13" pos:end="213:59"><call pos:start="213:13" pos:end="213:59"><name pos:start="213:13" pos:end="213:19">fprintf</name><argument_list pos:start="213:20" pos:end="213:59">(<argument pos:start="213:21" pos:end="213:26"><expr pos:start="213:21" pos:end="213:26"><name pos:start="213:21" pos:end="213:26">stderr</name></expr></argument>, <argument pos:start="213:29" pos:end="213:58"><expr pos:start="213:29" pos:end="213:58"><literal type="string" pos:start="213:29" pos:end="213:58">"Error encoding audio frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="215:13" pos:end="215:20"><expr pos:start="215:13" pos:end="215:19"><call pos:start="215:13" pos:end="215:19"><name pos:start="215:13" pos:end="215:16">exit</name><argument_list pos:start="215:17" pos:end="215:19">(<argument pos:start="215:18" pos:end="215:18"><expr pos:start="215:18" pos:end="215:18"><literal type="number" pos:start="215:18" pos:end="215:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="219:9" pos:end="225:9"><if pos:start="219:9" pos:end="225:9">if <condition pos:start="219:12" pos:end="219:23">(<expr pos:start="219:13" pos:end="219:22"><name pos:start="219:13" pos:end="219:22">got_output</name></expr>)</condition> <block pos:start="219:25" pos:end="225:9">{<block_content pos:start="221:13" pos:end="223:33">

            <expr_stmt pos:start="221:13" pos:end="221:45"><expr pos:start="221:13" pos:end="221:44"><call pos:start="221:13" pos:end="221:44"><name pos:start="221:13" pos:end="221:18">fwrite</name><argument_list pos:start="221:19" pos:end="221:44">(<argument pos:start="221:20" pos:end="221:27"><expr pos:start="221:20" pos:end="221:27"><name pos:start="221:20" pos:end="221:27"><name pos:start="221:20" pos:end="221:22">pkt</name><operator pos:start="221:23" pos:end="221:23">.</operator><name pos:start="221:24" pos:end="221:27">data</name></name></expr></argument>, <argument pos:start="221:30" pos:end="221:30"><expr pos:start="221:30" pos:end="221:30"><literal type="number" pos:start="221:30" pos:end="221:30">1</literal></expr></argument>, <argument pos:start="221:33" pos:end="221:40"><expr pos:start="221:33" pos:end="221:40"><name pos:start="221:33" pos:end="221:40"><name pos:start="221:33" pos:end="221:35">pkt</name><operator pos:start="221:36" pos:end="221:36">.</operator><name pos:start="221:37" pos:end="221:40">size</name></name></expr></argument>, <argument pos:start="221:43" pos:end="221:43"><expr pos:start="221:43" pos:end="221:43"><name pos:start="221:43" pos:end="221:43">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="223:13" pos:end="223:33"><expr pos:start="223:13" pos:end="223:32"><call pos:start="223:13" pos:end="223:32"><name pos:start="223:13" pos:end="223:26">av_free_packet</name><argument_list pos:start="223:27" pos:end="223:32">(<argument pos:start="223:28" pos:end="223:31"><expr pos:start="223:28" pos:end="223:31"><operator pos:start="223:28" pos:end="223:28">&amp;</operator><name pos:start="223:29" pos:end="223:31">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="231:5" pos:end="231:32">/* get the delayed frames */</comment>

    <for pos:start="233:5" pos:end="255:5">for <control pos:start="233:9" pos:end="233:41">(<init pos:start="233:10" pos:end="233:24"><expr pos:start="233:10" pos:end="233:23"><name pos:start="233:10" pos:end="233:19">got_output</name> <operator pos:start="233:21" pos:end="233:21">=</operator> <literal type="number" pos:start="233:23" pos:end="233:23">1</literal></expr>;</init> <condition pos:start="233:26" pos:end="233:36"><expr pos:start="233:26" pos:end="233:35"><name pos:start="233:26" pos:end="233:35">got_output</name></expr>;</condition> <incr pos:start="233:38" pos:end="233:40"><expr pos:start="233:38" pos:end="233:40"><name pos:start="233:38" pos:end="233:38">i</name><operator pos:start="233:39" pos:end="233:40">++</operator></expr></incr>)</control> <block pos:start="233:43" pos:end="255:5">{<block_content pos:start="235:9" pos:end="253:9">

        <expr_stmt pos:start="235:9" pos:end="235:64"><expr pos:start="235:9" pos:end="235:63"><name pos:start="235:9" pos:end="235:11">ret</name> <operator pos:start="235:13" pos:end="235:13">=</operator> <call pos:start="235:15" pos:end="235:63"><name pos:start="235:15" pos:end="235:35">avcodec_encode_audio2</name><argument_list pos:start="235:36" pos:end="235:63">(<argument pos:start="235:37" pos:end="235:37"><expr pos:start="235:37" pos:end="235:37"><name pos:start="235:37" pos:end="235:37">c</name></expr></argument>, <argument pos:start="235:40" pos:end="235:43"><expr pos:start="235:40" pos:end="235:43"><operator pos:start="235:40" pos:end="235:40">&amp;</operator><name pos:start="235:41" pos:end="235:43">pkt</name></expr></argument>, <argument pos:start="235:46" pos:end="235:49"><expr pos:start="235:46" pos:end="235:49"><name pos:start="235:46" pos:end="235:49">NULL</name></expr></argument>, <argument pos:start="235:52" pos:end="235:62"><expr pos:start="235:52" pos:end="235:62"><operator pos:start="235:52" pos:end="235:52">&amp;</operator><name pos:start="235:53" pos:end="235:62">got_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="237:9" pos:end="243:9"><if pos:start="237:9" pos:end="243:9">if <condition pos:start="237:12" pos:end="237:20">(<expr pos:start="237:13" pos:end="237:19"><name pos:start="237:13" pos:end="237:15">ret</name> <operator pos:start="237:17" pos:end="237:17">&lt;</operator> <literal type="number" pos:start="237:19" pos:end="237:19">0</literal></expr>)</condition> <block pos:start="237:22" pos:end="243:9">{<block_content pos:start="239:13" pos:end="241:20">

            <expr_stmt pos:start="239:13" pos:end="239:54"><expr pos:start="239:13" pos:end="239:53"><call pos:start="239:13" pos:end="239:53"><name pos:start="239:13" pos:end="239:19">fprintf</name><argument_list pos:start="239:20" pos:end="239:53">(<argument pos:start="239:21" pos:end="239:26"><expr pos:start="239:21" pos:end="239:26"><name pos:start="239:21" pos:end="239:26">stderr</name></expr></argument>, <argument pos:start="239:29" pos:end="239:52"><expr pos:start="239:29" pos:end="239:52"><literal type="string" pos:start="239:29" pos:end="239:52">"Error encoding frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="241:13" pos:end="241:20"><expr pos:start="241:13" pos:end="241:19"><call pos:start="241:13" pos:end="241:19"><name pos:start="241:13" pos:end="241:16">exit</name><argument_list pos:start="241:17" pos:end="241:19">(<argument pos:start="241:18" pos:end="241:18"><expr pos:start="241:18" pos:end="241:18"><literal type="number" pos:start="241:18" pos:end="241:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="247:9" pos:end="253:9"><if pos:start="247:9" pos:end="253:9">if <condition pos:start="247:12" pos:end="247:23">(<expr pos:start="247:13" pos:end="247:22"><name pos:start="247:13" pos:end="247:22">got_output</name></expr>)</condition> <block pos:start="247:25" pos:end="253:9">{<block_content pos:start="249:13" pos:end="251:33">

            <expr_stmt pos:start="249:13" pos:end="249:45"><expr pos:start="249:13" pos:end="249:44"><call pos:start="249:13" pos:end="249:44"><name pos:start="249:13" pos:end="249:18">fwrite</name><argument_list pos:start="249:19" pos:end="249:44">(<argument pos:start="249:20" pos:end="249:27"><expr pos:start="249:20" pos:end="249:27"><name pos:start="249:20" pos:end="249:27"><name pos:start="249:20" pos:end="249:22">pkt</name><operator pos:start="249:23" pos:end="249:23">.</operator><name pos:start="249:24" pos:end="249:27">data</name></name></expr></argument>, <argument pos:start="249:30" pos:end="249:30"><expr pos:start="249:30" pos:end="249:30"><literal type="number" pos:start="249:30" pos:end="249:30">1</literal></expr></argument>, <argument pos:start="249:33" pos:end="249:40"><expr pos:start="249:33" pos:end="249:40"><name pos:start="249:33" pos:end="249:40"><name pos:start="249:33" pos:end="249:35">pkt</name><operator pos:start="249:36" pos:end="249:36">.</operator><name pos:start="249:37" pos:end="249:40">size</name></name></expr></argument>, <argument pos:start="249:43" pos:end="249:43"><expr pos:start="249:43" pos:end="249:43"><name pos:start="249:43" pos:end="249:43">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="251:13" pos:end="251:33"><expr pos:start="251:13" pos:end="251:32"><call pos:start="251:13" pos:end="251:32"><name pos:start="251:13" pos:end="251:26">av_free_packet</name><argument_list pos:start="251:27" pos:end="251:32">(<argument pos:start="251:28" pos:end="251:31"><expr pos:start="251:28" pos:end="251:31"><operator pos:start="251:28" pos:end="251:28">&amp;</operator><name pos:start="251:29" pos:end="251:31">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="257:5" pos:end="257:14"><expr pos:start="257:5" pos:end="257:13"><call pos:start="257:5" pos:end="257:13"><name pos:start="257:5" pos:end="257:10">fclose</name><argument_list pos:start="257:11" pos:end="257:13">(<argument pos:start="257:12" pos:end="257:12"><expr pos:start="257:12" pos:end="257:12"><name pos:start="257:12" pos:end="257:12">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="261:5" pos:end="261:23"><expr pos:start="261:5" pos:end="261:22"><call pos:start="261:5" pos:end="261:22"><name pos:start="261:5" pos:end="261:12">av_freep</name><argument_list pos:start="261:13" pos:end="261:22">(<argument pos:start="261:14" pos:end="261:21"><expr pos:start="261:14" pos:end="261:21"><operator pos:start="261:14" pos:end="261:14">&amp;</operator><name pos:start="261:15" pos:end="261:21">samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="263:5" pos:end="263:26"><expr pos:start="263:5" pos:end="263:25"><call pos:start="263:5" pos:end="263:25"><name pos:start="263:5" pos:end="263:17">av_frame_free</name><argument_list pos:start="263:18" pos:end="263:25">(<argument pos:start="263:19" pos:end="263:24"><expr pos:start="263:19" pos:end="263:24"><operator pos:start="263:19" pos:end="263:19">&amp;</operator><name pos:start="263:20" pos:end="263:24">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="265:5" pos:end="265:21"><expr pos:start="265:5" pos:end="265:20"><call pos:start="265:5" pos:end="265:20"><name pos:start="265:5" pos:end="265:17">avcodec_close</name><argument_list pos:start="265:18" pos:end="265:20">(<argument pos:start="265:19" pos:end="265:19"><expr pos:start="265:19" pos:end="265:19"><name pos:start="265:19" pos:end="265:19">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="267:5" pos:end="267:15"><expr pos:start="267:5" pos:end="267:14"><call pos:start="267:5" pos:end="267:14"><name pos:start="267:5" pos:end="267:11">av_free</name><argument_list pos:start="267:12" pos:end="267:14">(<argument pos:start="267:13" pos:end="267:13"><expr pos:start="267:13" pos:end="267:13"><name pos:start="267:13" pos:end="267:13">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
