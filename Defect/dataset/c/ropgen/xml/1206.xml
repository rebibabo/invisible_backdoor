<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1206.c" pos:tabs="8"><macro pos:start="1:1" pos:end="5:45"><name pos:start="1:1" pos:end="1:21">mlt_compensate_output</name><argument_list pos:start="1:22" pos:end="5:45">(<argument pos:start="1:23" pos:end="1:36">COOKContext *q</argument>, <argument pos:start="1:39" pos:end="1:58">float *decode_buffer</argument>,

                      <argument pos:start="3:23" pos:end="3:39">cook_gains *gains</argument>, <argument pos:start="3:42" pos:end="3:63">float *previous_buffer</argument>,

                      <argument pos:start="5:23" pos:end="5:34">int16_t *out</argument>, <argument pos:start="5:37" pos:end="5:44">int chan</argument>)</argument_list></macro>

<block pos:start="7:1" pos:end="31:1">{<block_content pos:start="9:5" pos:end="29:5">

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">j</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:53"><expr pos:start="13:5" pos:end="13:52"><call pos:start="13:5" pos:end="13:52"><name pos:start="13:5" pos:end="13:13">cook_imlt</name><argument_list pos:start="13:14" pos:end="13:52">(<argument pos:start="13:15" pos:end="13:15"><expr pos:start="13:15" pos:end="13:15"><name pos:start="13:15" pos:end="13:15">q</name></expr></argument>, <argument pos:start="13:18" pos:end="13:30"><expr pos:start="13:18" pos:end="13:30"><name pos:start="13:18" pos:end="13:30">decode_buffer</name></expr></argument>, <argument pos:start="13:33" pos:end="13:51"><expr pos:start="13:33" pos:end="13:51"><name pos:start="13:33" pos:end="13:51"><name pos:start="13:33" pos:end="13:33">q</name><operator pos:start="13:34" pos:end="13:35">-&gt;</operator><name pos:start="13:36" pos:end="13:51">mono_mdct_output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:47"><expr pos:start="15:5" pos:end="15:46"><call pos:start="15:5" pos:end="15:46"><name pos:start="15:5" pos:end="15:19">gain_compensate</name><argument_list pos:start="15:20" pos:end="15:46">(<argument pos:start="15:21" pos:end="15:21"><expr pos:start="15:21" pos:end="15:21"><name pos:start="15:21" pos:end="15:21">q</name></expr></argument>, <argument pos:start="15:24" pos:end="15:28"><expr pos:start="15:24" pos:end="15:28"><name pos:start="15:24" pos:end="15:28">gains</name></expr></argument>, <argument pos:start="15:31" pos:end="15:45"><expr pos:start="15:31" pos:end="15:45"><name pos:start="15:31" pos:end="15:45">previous_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="19:5" pos:end="21:7">/* Clip and convert floats to 16 bits.

     */</comment>

    <for pos:start="23:5" pos:end="29:5">for <control pos:start="23:9" pos:end="23:48">(<init pos:start="23:10" pos:end="23:15"><expr pos:start="23:10" pos:end="23:14"><name pos:start="23:10" pos:end="23:10">j</name> <operator pos:start="23:12" pos:end="23:12">=</operator> <literal type="number" pos:start="23:14" pos:end="23:14">0</literal></expr>;</init> <condition pos:start="23:17" pos:end="23:43"><expr pos:start="23:17" pos:end="23:42"><name pos:start="23:17" pos:end="23:17">j</name> <operator pos:start="23:19" pos:end="23:19">&lt;</operator> <name pos:start="23:21" pos:end="23:42"><name pos:start="23:21" pos:end="23:21">q</name><operator pos:start="23:22" pos:end="23:23">-&gt;</operator><name pos:start="23:24" pos:end="23:42">samples_per_channel</name></name></expr>;</condition> <incr pos:start="23:45" pos:end="23:47"><expr pos:start="23:45" pos:end="23:47"><name pos:start="23:45" pos:end="23:45">j</name><operator pos:start="23:46" pos:end="23:47">++</operator></expr></incr>)</control> <block pos:start="23:50" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:65">

        <expr_stmt pos:start="25:9" pos:end="27:65"><expr pos:start="25:9" pos:end="27:64"><name pos:start="25:9" pos:end="25:38"><name pos:start="25:9" pos:end="25:11">out</name><index pos:start="25:12" pos:end="25:38">[<expr pos:start="25:13" pos:end="25:37"><name pos:start="25:13" pos:end="25:16">chan</name> <operator pos:start="25:18" pos:end="25:18">+</operator> <name pos:start="25:20" pos:end="25:33"><name pos:start="25:20" pos:end="25:20">q</name><operator pos:start="25:21" pos:end="25:22">-&gt;</operator><name pos:start="25:23" pos:end="25:33">nb_channels</name></name> <operator pos:start="25:35" pos:end="25:35">*</operator> <name pos:start="25:37" pos:end="25:37">j</name></expr>]</index></name> <operator pos:start="25:40" pos:end="25:40">=</operator>

          <call pos:start="27:11" pos:end="27:64"><name pos:start="27:11" pos:end="27:17">av_clip</name><argument_list pos:start="27:18" pos:end="27:64">(<argument pos:start="27:19" pos:end="27:48"><expr pos:start="27:19" pos:end="27:48"><call pos:start="27:19" pos:end="27:48"><name pos:start="27:19" pos:end="27:24">lrintf</name><argument_list pos:start="27:25" pos:end="27:48">(<argument pos:start="27:26" pos:end="27:47"><expr pos:start="27:26" pos:end="27:47"><name pos:start="27:26" pos:end="27:47"><name pos:start="27:26" pos:end="27:26">q</name><operator pos:start="27:27" pos:end="27:28">-&gt;</operator><name pos:start="27:29" pos:end="27:44">mono_mdct_output</name><index pos:start="27:45" pos:end="27:47">[<expr pos:start="27:46" pos:end="27:46"><name pos:start="27:46" pos:end="27:46">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="27:51" pos:end="27:56"><expr pos:start="27:51" pos:end="27:56"><operator pos:start="27:51" pos:end="27:51">-</operator><literal type="number" pos:start="27:52" pos:end="27:56">32768</literal></expr></argument>, <argument pos:start="27:59" pos:end="27:63"><expr pos:start="27:59" pos:end="27:63"><literal type="number" pos:start="27:59" pos:end="27:63">32767</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block>
</unit>
