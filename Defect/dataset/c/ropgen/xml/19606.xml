<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19606.c" pos:tabs="8"><decl_stmt pos:start="1:1" pos:end="2:10"><decl pos:start="1:1" pos:end="2:9"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> main<argument_list pos:start="1:9" pos:end="1:44">(<argument pos:start="1:10" pos:end="1:17"><expr pos:start="1:10" pos:end="1:17"><name pos:start="1:10" pos:end="1:12">int</name> <name pos:start="1:14" pos:end="1:17">argc</name></expr></argument>, <argument pos:start="1:20" pos:end="1:30"><expr pos:start="1:20" pos:end="1:30"><name pos:start="1:20" pos:end="1:23">char</name> <operator pos:start="1:25" pos:end="1:25">*</operator><operator pos:start="1:26" pos:end="1:26">*</operator><name pos:start="1:27" pos:end="1:30">argv</name></expr></argument>, <argument pos:start="1:33" pos:end="1:43"><expr pos:start="1:33" pos:end="1:43"><name pos:start="1:33" pos:end="1:36">char</name> <operator pos:start="1:38" pos:end="1:38">*</operator><operator pos:start="1:39" pos:end="1:39">*</operator><name pos:start="1:40" pos:end="1:43">envp</name></expr></argument>)</argument_list>
    <name pos:start="2:5" pos:end="2:7">int</name> <name pos:start="2:9" pos:end="2:9">i</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3:5" pos:end="3:29"><decl pos:start="3:5" pos:end="3:16"><type pos:start="3:5" pos:end="3:7"><name pos:start="3:5" pos:end="3:7">int</name></type> <name pos:start="3:9" pos:end="3:16">snapshot</name></decl>, <decl pos:start="3:19" pos:end="3:28"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:19" pos:end="3:28">linux_boot</name></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:32"><decl pos:start="4:5" pos:end="4:31"><type pos:start="4:5" pos:end="4:16"><specifier pos:start="4:5" pos:end="4:9">const</specifier> <name pos:start="4:11" pos:end="4:14">char</name> <modifier pos:start="4:16" pos:end="4:16">*</modifier></type><name pos:start="4:17" pos:end="4:31">initrd_filename</name></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:49"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:31">kernel_filename</name></decl>, <decl pos:start="5:34" pos:end="5:48"><type ref="prev" pos:start="5:5" pos:end="5:16"><modifier pos:start="5:34" pos:end="5:34">*</modifier></type><name pos:start="5:35" pos:end="5:48">kernel_cmdline</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:34"><decl pos:start="6:5" pos:end="6:33"><type pos:start="6:5" pos:end="6:16"><specifier pos:start="6:5" pos:end="6:9">const</specifier> <name pos:start="6:11" pos:end="6:14">char</name> <modifier pos:start="6:16" pos:end="6:16">*</modifier></type><name pos:start="6:17" pos:end="6:26">boot_order</name> <init pos:start="6:28" pos:end="6:33">= <expr pos:start="6:30" pos:end="6:33"><name pos:start="6:30" pos:end="6:33">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:25">boot_once</name> <init pos:start="7:27" pos:end="7:32">= <expr pos:start="7:29" pos:end="7:32"><name pos:start="7:29" pos:end="7:32">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:21"><decl pos:start="8:5" pos:end="8:20"><type pos:start="8:5" pos:end="8:18"><name pos:start="8:5" pos:end="8:16">DisplayState</name> <modifier pos:start="8:18" pos:end="8:18">*</modifier></type><name pos:start="8:19" pos:end="8:20">ds</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">cyls</name></decl>, <decl pos:start="9:15" pos:end="9:19"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:15" pos:end="9:19">heads</name></decl>, <decl pos:start="9:22" pos:end="9:25"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:22" pos:end="9:25">secs</name></decl>, <decl pos:start="9:28" pos:end="9:38"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:28" pos:end="9:38">translation</name></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:34"><decl pos:start="10:5" pos:end="10:18"><type pos:start="10:5" pos:end="10:14"><name pos:start="10:5" pos:end="10:12">QemuOpts</name> <modifier pos:start="10:14" pos:end="10:14">*</modifier></type><name pos:start="10:15" pos:end="10:18">opts</name></decl>, <decl pos:start="10:21" pos:end="10:33"><type ref="prev" pos:start="10:5" pos:end="10:14"><modifier pos:start="10:21" pos:end="10:21">*</modifier></type><name pos:start="10:22" pos:end="10:33">machine_opts</name></decl>;</decl_stmt>
    <decl_stmt pos:start="11:5" pos:end="11:71"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">QemuOpts</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:22">hda_opts</name> <init pos:start="11:24" pos:end="11:29">= <expr pos:start="11:26" pos:end="11:29"><name pos:start="11:26" pos:end="11:29">NULL</name></expr></init></decl>, <decl pos:start="11:32" pos:end="11:50"><type ref="prev" pos:start="11:5" pos:end="11:14"><modifier pos:start="11:32" pos:end="11:32">*</modifier></type><name pos:start="11:33" pos:end="11:43">icount_opts</name> <init pos:start="11:45" pos:end="11:50">= <expr pos:start="11:47" pos:end="11:50"><name pos:start="11:47" pos:end="11:50">NULL</name></expr></init></decl>, <decl pos:start="11:53" pos:end="11:70"><type ref="prev" pos:start="11:5" pos:end="11:14"><modifier pos:start="11:53" pos:end="11:53">*</modifier></type><name pos:start="11:54" pos:end="11:63">accel_opts</name> <init pos:start="11:65" pos:end="11:70">= <expr pos:start="11:67" pos:end="11:70"><name pos:start="11:67" pos:end="11:70">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="12:5" pos:end="12:24"><decl pos:start="12:5" pos:end="12:23"><type pos:start="12:5" pos:end="12:18"><name pos:start="12:5" pos:end="12:16">QemuOptsList</name> <modifier pos:start="12:18" pos:end="12:18">*</modifier></type><name pos:start="12:19" pos:end="12:23">olist</name></decl>;</decl_stmt>
    <decl_stmt pos:start="13:5" pos:end="13:15"><decl pos:start="13:5" pos:end="13:14"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:14">optind</name></decl>;</decl_stmt>
    <decl_stmt pos:start="14:5" pos:end="14:23"><decl pos:start="14:5" pos:end="14:22"><type pos:start="14:5" pos:end="14:16"><specifier pos:start="14:5" pos:end="14:9">const</specifier> <name pos:start="14:11" pos:end="14:14">char</name> <modifier pos:start="14:16" pos:end="14:16">*</modifier></type><name pos:start="14:17" pos:end="14:22">optarg</name></decl>;</decl_stmt>
    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:29"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:22">loadvm</name> <init pos:start="15:24" pos:end="15:29">= <expr pos:start="15:26" pos:end="15:29"><name pos:start="15:26" pos:end="15:29">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="16:5" pos:end="16:32"><decl pos:start="16:5" pos:end="16:31"><type pos:start="16:5" pos:end="16:18"><name pos:start="16:5" pos:end="16:16">MachineClass</name> <modifier pos:start="16:18" pos:end="16:18">*</modifier></type><name pos:start="16:19" pos:end="16:31">machine_class</name></decl>;</decl_stmt>
    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:16"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:14">char</name> <modifier pos:start="17:16" pos:end="17:16">*</modifier></type><name pos:start="17:17" pos:end="17:25">cpu_model</name></decl>;</decl_stmt>
    <decl_stmt pos:start="18:5" pos:end="18:33"><decl pos:start="18:5" pos:end="18:32"><type pos:start="18:5" pos:end="18:16"><specifier pos:start="18:5" pos:end="18:9">const</specifier> <name pos:start="18:11" pos:end="18:14">char</name> <modifier pos:start="18:16" pos:end="18:16">*</modifier></type><name pos:start="18:17" pos:end="18:25">vga_model</name> <init pos:start="18:27" pos:end="18:32">= <expr pos:start="18:29" pos:end="18:32"><name pos:start="18:29" pos:end="18:32">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="19:5" pos:end="19:36"><decl pos:start="19:5" pos:end="19:35"><type pos:start="19:5" pos:end="19:16"><specifier pos:start="19:5" pos:end="19:9">const</specifier> <name pos:start="19:11" pos:end="19:14">char</name> <modifier pos:start="19:16" pos:end="19:16">*</modifier></type><name pos:start="19:17" pos:end="19:28">qtest_chrdev</name> <init pos:start="19:30" pos:end="19:35">= <expr pos:start="19:32" pos:end="19:35"><name pos:start="19:32" pos:end="19:35">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="20:5" pos:end="20:33"><decl pos:start="20:5" pos:end="20:32"><type pos:start="20:5" pos:end="20:16"><specifier pos:start="20:5" pos:end="20:9">const</specifier> <name pos:start="20:11" pos:end="20:14">char</name> <modifier pos:start="20:16" pos:end="20:16">*</modifier></type><name pos:start="20:17" pos:end="20:25">qtest_log</name> <init pos:start="20:27" pos:end="20:32">= <expr pos:start="20:29" pos:end="20:32"><name pos:start="20:29" pos:end="20:32">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="21:5" pos:end="21:32"><decl pos:start="21:5" pos:end="21:31"><type pos:start="21:5" pos:end="21:16"><specifier pos:start="21:5" pos:end="21:9">const</specifier> <name pos:start="21:11" pos:end="21:14">char</name> <modifier pos:start="21:16" pos:end="21:16">*</modifier></type><name pos:start="21:17" pos:end="21:24">pid_file</name> <init pos:start="21:26" pos:end="21:31">= <expr pos:start="21:28" pos:end="21:31"><name pos:start="21:28" pos:end="21:31">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="22:5" pos:end="22:32"><decl pos:start="22:5" pos:end="22:31"><type pos:start="22:5" pos:end="22:16"><specifier pos:start="22:5" pos:end="22:9">const</specifier> <name pos:start="22:11" pos:end="22:14">char</name> <modifier pos:start="22:16" pos:end="22:16">*</modifier></type><name pos:start="22:17" pos:end="22:24">incoming</name> <init pos:start="22:26" pos:end="22:31">= <expr pos:start="22:28" pos:end="22:31"><name pos:start="22:28" pos:end="22:31">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="23:5" pos:end="23:26"><decl pos:start="23:5" pos:end="23:25"><type pos:start="23:5" pos:end="23:8"><name pos:start="23:5" pos:end="23:8">bool</name></type> <name pos:start="23:10" pos:end="23:18">defconfig</name> <init pos:start="23:20" pos:end="23:25">= <expr pos:start="23:22" pos:end="23:25"><name pos:start="23:22" pos:end="23:25">true</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="24:5" pos:end="24:27"><decl pos:start="24:5" pos:end="24:26"><type pos:start="24:5" pos:end="24:8"><name pos:start="24:5" pos:end="24:8">bool</name></type> <name pos:start="24:10" pos:end="24:19">userconfig</name> <init pos:start="24:21" pos:end="24:26">= <expr pos:start="24:23" pos:end="24:26"><name pos:start="24:23" pos:end="24:26">true</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="25:5" pos:end="25:27"><decl pos:start="25:5" pos:end="25:26"><type pos:start="25:5" pos:end="25:8"><name pos:start="25:5" pos:end="25:8">bool</name></type> <name pos:start="25:10" pos:end="25:18">nographic</name> <init pos:start="25:20" pos:end="25:26">= <expr pos:start="25:22" pos:end="25:26"><name pos:start="25:22" pos:end="25:26">false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="26:5" pos:end="26:42"><decl pos:start="26:5" pos:end="26:41"><type pos:start="26:5" pos:end="26:15"><name pos:start="26:5" pos:end="26:15">DisplayType</name></type> <name pos:start="26:17" pos:end="26:28">display_type</name> <init pos:start="26:30" pos:end="26:41">= <expr pos:start="26:32" pos:end="26:41"><name pos:start="26:32" pos:end="26:41">DT_DEFAULT</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="27:5" pos:end="27:27"><decl pos:start="27:5" pos:end="27:26"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:22">display_remote</name> <init pos:start="27:24" pos:end="27:26">= <expr pos:start="27:26" pos:end="27:26"><literal type="number" pos:start="27:26" pos:end="27:26">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="28:5" pos:end="28:32"><decl pos:start="28:5" pos:end="28:31"><type pos:start="28:5" pos:end="28:16"><specifier pos:start="28:5" pos:end="28:9">const</specifier> <name pos:start="28:11" pos:end="28:14">char</name> <modifier pos:start="28:16" pos:end="28:16">*</modifier></type><name pos:start="28:17" pos:end="28:24">log_mask</name> <init pos:start="28:26" pos:end="28:31">= <expr pos:start="28:28" pos:end="28:31"><name pos:start="28:28" pos:end="28:31">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="29:5" pos:end="29:32"><decl pos:start="29:5" pos:end="29:31"><type pos:start="29:5" pos:end="29:16"><specifier pos:start="29:5" pos:end="29:9">const</specifier> <name pos:start="29:11" pos:end="29:14">char</name> <modifier pos:start="29:16" pos:end="29:16">*</modifier></type><name pos:start="29:17" pos:end="29:24">log_file</name> <init pos:start="29:26" pos:end="29:31">= <expr pos:start="29:28" pos:end="29:31"><name pos:start="29:28" pos:end="29:31">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="30:5" pos:end="30:28"><decl pos:start="30:5" pos:end="30:27"><type pos:start="30:5" pos:end="30:10"><name pos:start="30:5" pos:end="30:8">char</name> <modifier pos:start="30:10" pos:end="30:10">*</modifier></type><name pos:start="30:11" pos:end="30:20">trace_file</name> <init pos:start="30:22" pos:end="30:27">= <expr pos:start="30:24" pos:end="30:27"><name pos:start="30:24" pos:end="30:27">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="31:5" pos:end="31:27"><decl pos:start="31:5" pos:end="31:26"><type pos:start="31:5" pos:end="31:14"><name pos:start="31:5" pos:end="31:14">ram_addr_t</name></type> <name pos:start="31:16" pos:end="31:26">maxram_size</name></decl>;</decl_stmt>
    <decl_stmt pos:start="32:5" pos:end="32:27"><decl pos:start="32:5" pos:end="32:26"><type pos:start="32:5" pos:end="32:12"><name pos:start="32:5" pos:end="32:12">uint64_t</name></type> <name pos:start="32:14" pos:end="32:22">ram_slots</name> <init pos:start="32:24" pos:end="32:26">= <expr pos:start="32:26" pos:end="32:26"><literal type="number" pos:start="32:26" pos:end="32:26">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="33:5" pos:end="33:35"><decl pos:start="33:5" pos:end="33:34"><type pos:start="33:5" pos:end="33:10"><name pos:start="33:5" pos:end="33:8">FILE</name> <modifier pos:start="33:10" pos:end="33:10">*</modifier></type><name pos:start="33:11" pos:end="33:27">vmstate_dump_file</name> <init pos:start="33:29" pos:end="33:34">= <expr pos:start="33:31" pos:end="33:34"><name pos:start="33:31" pos:end="33:34">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="34:5" pos:end="34:32"><decl pos:start="34:5" pos:end="34:31"><type pos:start="34:5" pos:end="34:11"><name pos:start="34:5" pos:end="34:9">Error</name> <modifier pos:start="34:11" pos:end="34:11">*</modifier></type><name pos:start="34:12" pos:end="34:24">main_loop_err</name> <init pos:start="34:26" pos:end="34:31">= <expr pos:start="34:28" pos:end="34:31"><name pos:start="34:28" pos:end="34:31">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="35:5" pos:end="35:22"><decl pos:start="35:5" pos:end="35:21"><type pos:start="35:5" pos:end="35:11"><name pos:start="35:5" pos:end="35:9">Error</name> <modifier pos:start="35:11" pos:end="35:11">*</modifier></type><name pos:start="35:12" pos:end="35:14">err</name> <init pos:start="35:16" pos:end="35:21">= <expr pos:start="35:18" pos:end="35:21"><name pos:start="35:18" pos:end="35:21">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="36:5" pos:end="36:32"><decl pos:start="36:5" pos:end="36:31"><type pos:start="36:5" pos:end="36:8"><name pos:start="36:5" pos:end="36:8">bool</name></type> <name pos:start="36:10" pos:end="36:23">list_data_dirs</name> <init pos:start="36:25" pos:end="36:31">= <expr pos:start="36:27" pos:end="36:31"><name pos:start="36:27" pos:end="36:31">false</name></expr></init></decl>;</decl_stmt>
    <typedef pos:start="37:5" pos:end="41:28">typedef <type pos:start="37:13" pos:end="41:5"><struct pos:start="37:13" pos:end="41:5">struct <name pos:start="37:20" pos:end="37:40">BlockdevOptions_queue</name> <block pos:start="37:42" pos:end="41:5">{
        <decl_stmt pos:start="38:9" pos:end="38:29"><decl pos:start="38:9" pos:end="38:28"><type pos:start="38:9" pos:end="38:25"><name pos:start="38:9" pos:end="38:23">BlockdevOptions</name> <modifier pos:start="38:25" pos:end="38:25">*</modifier></type><name pos:start="38:26" pos:end="38:28">bdo</name></decl>;</decl_stmt>
        <decl_stmt pos:start="39:9" pos:end="39:21"><decl pos:start="39:9" pos:end="39:20"><type pos:start="39:9" pos:end="39:16"><name pos:start="39:9" pos:end="39:16">Location</name></type> <name pos:start="39:18" pos:end="39:20">loc</name></decl>;</decl_stmt>
        <macro pos:start="40:9" pos:end="40:45"><name pos:start="40:9" pos:end="40:22">QSIMPLEQ_ENTRY</name><argument_list pos:start="40:23" pos:end="40:45">(<argument pos:start="40:24" pos:end="40:44">BlockdevOptions_queue</argument>)</argument_list></macro> <expr_stmt pos:start="40:47" pos:end="40:52"><expr pos:start="40:47" pos:end="40:51"><name pos:start="40:47" pos:end="40:51">entry</name></expr>;</expr_stmt>
    }</block></struct></type> <name pos:start="41:7" pos:end="41:27">BlockdevOptions_queue</name>;</typedef>
    <macro pos:start="42:5" pos:end="42:42"><name pos:start="42:5" pos:end="42:17">QSIMPLEQ_HEAD</name><argument_list pos:start="42:18" pos:end="42:42">(<argument/>, <argument pos:start="42:21" pos:end="42:41">BlockdevOptions_queue</argument>)</argument_list></macro> <expr_stmt pos:start="42:44" pos:end="43:47"><expr pos:start="42:44" pos:end="43:46"><name pos:start="42:44" pos:end="42:52">bdo_queue</name>
        <operator pos:start="43:9" pos:end="43:9">=</operator> <call pos:start="43:11" pos:end="43:46"><name pos:start="43:11" pos:end="43:35">QSIMPLEQ_HEAD_INITIALIZER</name><argument_list pos:start="43:36" pos:end="43:46">(<argument pos:start="43:37" pos:end="43:45"><expr pos:start="43:37" pos:end="43:45"><name pos:start="43:37" pos:end="43:45">bdo_queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="44:5" pos:end="44:40"><expr pos:start="44:5" pos:end="44:39"><call pos:start="44:5" pos:end="44:39"><name pos:start="44:5" pos:end="44:20">module_call_init</name><argument_list pos:start="44:21" pos:end="44:39">(<argument pos:start="44:22" pos:end="44:38"><expr pos:start="44:22" pos:end="44:38"><name pos:start="44:22" pos:end="44:38">MODULE_INIT_TRACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="45:5" pos:end="45:25"><expr pos:start="45:5" pos:end="45:24"><call pos:start="45:5" pos:end="45:24"><name pos:start="45:5" pos:end="45:22">qemu_init_cpu_list</name><argument_list pos:start="45:23" pos:end="45:24">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="46:5" pos:end="46:25"><expr pos:start="46:5" pos:end="46:24"><call pos:start="46:5" pos:end="46:24"><name pos:start="46:5" pos:end="46:22">qemu_init_cpu_loop</name><argument_list pos:start="46:23" pos:end="46:24">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="47:5" pos:end="47:31"><expr pos:start="47:5" pos:end="47:30"><call pos:start="47:5" pos:end="47:30"><name pos:start="47:5" pos:end="47:28">qemu_mutex_lock_iothread</name><argument_list pos:start="47:29" pos:end="47:30">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="48:5" pos:end="48:36"><expr pos:start="48:5" pos:end="48:35"><call pos:start="48:5" pos:end="48:35"><name pos:start="48:5" pos:end="48:10">atexit</name><argument_list pos:start="48:11" pos:end="48:35">(<argument pos:start="48:12" pos:end="48:34"><expr pos:start="48:12" pos:end="48:34"><name pos:start="48:12" pos:end="48:34">qemu_run_exit_notifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="49:5" pos:end="49:32"><expr pos:start="49:5" pos:end="49:31"><call pos:start="49:5" pos:end="49:31"><name pos:start="49:5" pos:end="49:22">error_set_progname</name><argument_list pos:start="49:23" pos:end="49:31">(<argument pos:start="49:24" pos:end="49:30"><expr pos:start="49:24" pos:end="49:30"><name pos:start="49:24" pos:end="49:30"><name pos:start="49:24" pos:end="49:27">argv</name><index pos:start="49:28" pos:end="49:30">[<expr pos:start="49:29" pos:end="49:29"><literal type="number" pos:start="49:29" pos:end="49:29">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="50:5" pos:end="50:32"><expr pos:start="50:5" pos:end="50:31"><call pos:start="50:5" pos:end="50:31"><name pos:start="50:5" pos:end="50:22">qemu_init_exec_dir</name><argument_list pos:start="50:23" pos:end="50:31">(<argument pos:start="50:24" pos:end="50:30"><expr pos:start="50:24" pos:end="50:30"><name pos:start="50:24" pos:end="50:30"><name pos:start="50:24" pos:end="50:27">argv</name><index pos:start="50:28" pos:end="50:30">[<expr pos:start="50:29" pos:end="50:29"><literal type="number" pos:start="50:29" pos:end="50:29">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="51:5" pos:end="51:38"><expr pos:start="51:5" pos:end="51:37"><call pos:start="51:5" pos:end="51:37"><name pos:start="51:5" pos:end="51:20">module_call_init</name><argument_list pos:start="51:21" pos:end="51:37">(<argument pos:start="51:22" pos:end="51:36"><expr pos:start="51:22" pos:end="51:36"><name pos:start="51:22" pos:end="51:36">MODULE_INIT_QOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="52:5" pos:end="52:32"><expr pos:start="52:5" pos:end="52:31"><call pos:start="52:5" pos:end="52:31"><name pos:start="52:5" pos:end="52:29">monitor_init_qmp_commands</name><argument_list pos:start="52:30" pos:end="52:31">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="53:5" pos:end="53:36"><expr pos:start="53:5" pos:end="53:35"><call pos:start="53:5" pos:end="53:35"><name pos:start="53:5" pos:end="53:17">qemu_add_opts</name><argument_list pos:start="53:18" pos:end="53:35">(<argument pos:start="53:19" pos:end="53:34"><expr pos:start="53:19" pos:end="53:34"><operator pos:start="53:19" pos:end="53:19">&amp;</operator><name pos:start="53:20" pos:end="53:34">qemu_drive_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="54:5" pos:end="54:49"><expr pos:start="54:5" pos:end="54:48"><call pos:start="54:5" pos:end="54:48"><name pos:start="54:5" pos:end="54:23">qemu_add_drive_opts</name><argument_list pos:start="54:24" pos:end="54:48">(<argument pos:start="54:25" pos:end="54:47"><expr pos:start="54:25" pos:end="54:47"><operator pos:start="54:25" pos:end="54:25">&amp;</operator><name pos:start="54:26" pos:end="54:47">qemu_legacy_drive_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="55:5" pos:end="55:49"><expr pos:start="55:5" pos:end="55:48"><call pos:start="55:5" pos:end="55:48"><name pos:start="55:5" pos:end="55:23">qemu_add_drive_opts</name><argument_list pos:start="55:24" pos:end="55:48">(<argument pos:start="55:25" pos:end="55:47"><expr pos:start="55:25" pos:end="55:47"><operator pos:start="55:25" pos:end="55:25">&amp;</operator><name pos:start="55:26" pos:end="55:47">qemu_common_drive_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="56:5" pos:end="56:42"><expr pos:start="56:5" pos:end="56:41"><call pos:start="56:5" pos:end="56:41"><name pos:start="56:5" pos:end="56:23">qemu_add_drive_opts</name><argument_list pos:start="56:24" pos:end="56:41">(<argument pos:start="56:25" pos:end="56:40"><expr pos:start="56:25" pos:end="56:40"><operator pos:start="56:25" pos:end="56:25">&amp;</operator><name pos:start="56:26" pos:end="56:40">qemu_drive_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="57:5" pos:end="57:44"><expr pos:start="57:5" pos:end="57:43"><call pos:start="57:5" pos:end="57:43"><name pos:start="57:5" pos:end="57:23">qemu_add_drive_opts</name><argument_list pos:start="57:24" pos:end="57:43">(<argument pos:start="57:25" pos:end="57:42"><expr pos:start="57:25" pos:end="57:42"><operator pos:start="57:25" pos:end="57:25">&amp;</operator><name pos:start="57:26" pos:end="57:42">bdrv_runtime_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="58:5" pos:end="58:38"><expr pos:start="58:5" pos:end="58:37"><call pos:start="58:5" pos:end="58:37"><name pos:start="58:5" pos:end="58:17">qemu_add_opts</name><argument_list pos:start="58:18" pos:end="58:37">(<argument pos:start="58:19" pos:end="58:36"><expr pos:start="58:19" pos:end="58:36"><operator pos:start="58:19" pos:end="58:19">&amp;</operator><name pos:start="58:20" pos:end="58:36">qemu_chardev_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="59:5" pos:end="59:37"><expr pos:start="59:5" pos:end="59:36"><call pos:start="59:5" pos:end="59:36"><name pos:start="59:5" pos:end="59:17">qemu_add_opts</name><argument_list pos:start="59:18" pos:end="59:36">(<argument pos:start="59:19" pos:end="59:35"><expr pos:start="59:19" pos:end="59:35"><operator pos:start="59:19" pos:end="59:19">&amp;</operator><name pos:start="59:20" pos:end="59:35">qemu_device_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="60:5" pos:end="60:37"><expr pos:start="60:5" pos:end="60:36"><call pos:start="60:5" pos:end="60:36"><name pos:start="60:5" pos:end="60:17">qemu_add_opts</name><argument_list pos:start="60:18" pos:end="60:36">(<argument pos:start="60:19" pos:end="60:35"><expr pos:start="60:19" pos:end="60:35"><operator pos:start="60:19" pos:end="60:19">&amp;</operator><name pos:start="60:20" pos:end="60:35">qemu_netdev_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="61:5" pos:end="61:34"><expr pos:start="61:5" pos:end="61:33"><call pos:start="61:5" pos:end="61:33"><name pos:start="61:5" pos:end="61:17">qemu_add_opts</name><argument_list pos:start="61:18" pos:end="61:33">(<argument pos:start="61:19" pos:end="61:32"><expr pos:start="61:19" pos:end="61:32"><operator pos:start="61:19" pos:end="61:19">&amp;</operator><name pos:start="61:20" pos:end="61:32">qemu_net_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="62:5" pos:end="62:34"><expr pos:start="62:5" pos:end="62:33"><call pos:start="62:5" pos:end="62:33"><name pos:start="62:5" pos:end="62:17">qemu_add_opts</name><argument_list pos:start="62:18" pos:end="62:33">(<argument pos:start="62:19" pos:end="62:32"><expr pos:start="62:19" pos:end="62:32"><operator pos:start="62:19" pos:end="62:19">&amp;</operator><name pos:start="62:20" pos:end="62:32">qemu_rtc_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="63:5" pos:end="63:37"><expr pos:start="63:5" pos:end="63:36"><call pos:start="63:5" pos:end="63:36"><name pos:start="63:5" pos:end="63:17">qemu_add_opts</name><argument_list pos:start="63:18" pos:end="63:36">(<argument pos:start="63:19" pos:end="63:35"><expr pos:start="63:19" pos:end="63:35"><operator pos:start="63:19" pos:end="63:19">&amp;</operator><name pos:start="63:20" pos:end="63:35">qemu_global_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="64:5" pos:end="64:34"><expr pos:start="64:5" pos:end="64:33"><call pos:start="64:5" pos:end="64:33"><name pos:start="64:5" pos:end="64:17">qemu_add_opts</name><argument_list pos:start="64:18" pos:end="64:33">(<argument pos:start="64:19" pos:end="64:32"><expr pos:start="64:19" pos:end="64:32"><operator pos:start="64:19" pos:end="64:19">&amp;</operator><name pos:start="64:20" pos:end="64:32">qemu_mon_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="65:5" pos:end="65:36"><expr pos:start="65:5" pos:end="65:35"><call pos:start="65:5" pos:end="65:35"><name pos:start="65:5" pos:end="65:17">qemu_add_opts</name><argument_list pos:start="65:18" pos:end="65:35">(<argument pos:start="65:19" pos:end="65:34"><expr pos:start="65:19" pos:end="65:34"><operator pos:start="65:19" pos:end="65:19">&amp;</operator><name pos:start="65:20" pos:end="65:34">qemu_trace_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="66:5" pos:end="66:41"><expr pos:start="66:5" pos:end="66:40"><call pos:start="66:5" pos:end="66:40"><name pos:start="66:5" pos:end="66:17">qemu_add_opts</name><argument_list pos:start="66:18" pos:end="66:40">(<argument pos:start="66:19" pos:end="66:39"><expr pos:start="66:19" pos:end="66:39"><operator pos:start="66:19" pos:end="66:19">&amp;</operator><name pos:start="66:20" pos:end="66:39">qemu_option_rom_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="67:5" pos:end="67:38"><expr pos:start="67:5" pos:end="67:37"><call pos:start="67:5" pos:end="67:37"><name pos:start="67:5" pos:end="67:17">qemu_add_opts</name><argument_list pos:start="67:18" pos:end="67:37">(<argument pos:start="67:19" pos:end="67:36"><expr pos:start="67:19" pos:end="67:36"><operator pos:start="67:19" pos:end="67:19">&amp;</operator><name pos:start="67:20" pos:end="67:36">qemu_machine_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="68:5" pos:end="68:36"><expr pos:start="68:5" pos:end="68:35"><call pos:start="68:5" pos:end="68:35"><name pos:start="68:5" pos:end="68:17">qemu_add_opts</name><argument_list pos:start="68:18" pos:end="68:35">(<argument pos:start="68:19" pos:end="68:34"><expr pos:start="68:19" pos:end="68:34"><operator pos:start="68:19" pos:end="68:19">&amp;</operator><name pos:start="68:20" pos:end="68:34">qemu_accel_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="69:5" pos:end="69:34"><expr pos:start="69:5" pos:end="69:33"><call pos:start="69:5" pos:end="69:33"><name pos:start="69:5" pos:end="69:17">qemu_add_opts</name><argument_list pos:start="69:18" pos:end="69:33">(<argument pos:start="69:19" pos:end="69:32"><expr pos:start="69:19" pos:end="69:32"><operator pos:start="69:19" pos:end="69:19">&amp;</operator><name pos:start="69:20" pos:end="69:32">qemu_mem_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="70:5" pos:end="70:34"><expr pos:start="70:5" pos:end="70:33"><call pos:start="70:5" pos:end="70:33"><name pos:start="70:5" pos:end="70:17">qemu_add_opts</name><argument_list pos:start="70:18" pos:end="70:33">(<argument pos:start="70:19" pos:end="70:32"><expr pos:start="70:19" pos:end="70:32"><operator pos:start="70:19" pos:end="70:19">&amp;</operator><name pos:start="70:20" pos:end="70:32">qemu_smp_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="71:5" pos:end="71:35"><expr pos:start="71:5" pos:end="71:34"><call pos:start="71:5" pos:end="71:34"><name pos:start="71:5" pos:end="71:17">qemu_add_opts</name><argument_list pos:start="71:18" pos:end="71:34">(<argument pos:start="71:19" pos:end="71:33"><expr pos:start="71:19" pos:end="71:33"><operator pos:start="71:19" pos:end="71:19">&amp;</operator><name pos:start="71:20" pos:end="71:33">qemu_boot_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="72:5" pos:end="72:38"><expr pos:start="72:5" pos:end="72:37"><call pos:start="72:5" pos:end="72:37"><name pos:start="72:5" pos:end="72:17">qemu_add_opts</name><argument_list pos:start="72:18" pos:end="72:37">(<argument pos:start="72:19" pos:end="72:36"><expr pos:start="72:19" pos:end="72:36"><operator pos:start="72:19" pos:end="72:19">&amp;</operator><name pos:start="72:20" pos:end="72:36">qemu_sandbox_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="73:5" pos:end="73:37"><expr pos:start="73:5" pos:end="73:36"><call pos:start="73:5" pos:end="73:36"><name pos:start="73:5" pos:end="73:17">qemu_add_opts</name><argument_list pos:start="73:18" pos:end="73:36">(<argument pos:start="73:19" pos:end="73:35"><expr pos:start="73:19" pos:end="73:35"><operator pos:start="73:19" pos:end="73:19">&amp;</operator><name pos:start="73:20" pos:end="73:35">qemu_add_fd_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="74:5" pos:end="74:37"><expr pos:start="74:5" pos:end="74:36"><call pos:start="74:5" pos:end="74:36"><name pos:start="74:5" pos:end="74:17">qemu_add_opts</name><argument_list pos:start="74:18" pos:end="74:36">(<argument pos:start="74:19" pos:end="74:35"><expr pos:start="74:19" pos:end="74:35"><operator pos:start="74:19" pos:end="74:19">&amp;</operator><name pos:start="74:20" pos:end="74:35">qemu_object_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="75:5" pos:end="75:37"><expr pos:start="75:5" pos:end="75:36"><call pos:start="75:5" pos:end="75:36"><name pos:start="75:5" pos:end="75:17">qemu_add_opts</name><argument_list pos:start="75:18" pos:end="75:36">(<argument pos:start="75:19" pos:end="75:35"><expr pos:start="75:19" pos:end="75:35"><operator pos:start="75:19" pos:end="75:19">&amp;</operator><name pos:start="75:20" pos:end="75:35">qemu_tpmdev_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="76:5" pos:end="76:39"><expr pos:start="76:5" pos:end="76:38"><call pos:start="76:5" pos:end="76:38"><name pos:start="76:5" pos:end="76:17">qemu_add_opts</name><argument_list pos:start="76:18" pos:end="76:38">(<argument pos:start="76:19" pos:end="76:37"><expr pos:start="76:19" pos:end="76:37"><operator pos:start="76:19" pos:end="76:19">&amp;</operator><name pos:start="76:20" pos:end="76:37">qemu_realtime_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="77:5" pos:end="77:34"><expr pos:start="77:5" pos:end="77:33"><call pos:start="77:5" pos:end="77:33"><name pos:start="77:5" pos:end="77:17">qemu_add_opts</name><argument_list pos:start="77:18" pos:end="77:33">(<argument pos:start="77:19" pos:end="77:32"><expr pos:start="77:19" pos:end="77:32"><operator pos:start="77:19" pos:end="77:19">&amp;</operator><name pos:start="77:20" pos:end="77:32">qemu_msg_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="78:5" pos:end="78:35"><expr pos:start="78:5" pos:end="78:34"><call pos:start="78:5" pos:end="78:34"><name pos:start="78:5" pos:end="78:17">qemu_add_opts</name><argument_list pos:start="78:18" pos:end="78:34">(<argument pos:start="78:19" pos:end="78:33"><expr pos:start="78:19" pos:end="78:33"><operator pos:start="78:19" pos:end="78:19">&amp;</operator><name pos:start="78:20" pos:end="78:33">qemu_name_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="79:5" pos:end="79:35"><expr pos:start="79:5" pos:end="79:34"><call pos:start="79:5" pos:end="79:34"><name pos:start="79:5" pos:end="79:17">qemu_add_opts</name><argument_list pos:start="79:18" pos:end="79:34">(<argument pos:start="79:19" pos:end="79:33"><expr pos:start="79:19" pos:end="79:33"><operator pos:start="79:19" pos:end="79:19">&amp;</operator><name pos:start="79:20" pos:end="79:33">qemu_numa_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="80:5" pos:end="80:37"><expr pos:start="80:5" pos:end="80:36"><call pos:start="80:5" pos:end="80:36"><name pos:start="80:5" pos:end="80:17">qemu_add_opts</name><argument_list pos:start="80:18" pos:end="80:36">(<argument pos:start="80:19" pos:end="80:35"><expr pos:start="80:19" pos:end="80:35"><operator pos:start="80:19" pos:end="80:19">&amp;</operator><name pos:start="80:20" pos:end="80:35">qemu_icount_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="81:5" pos:end="81:49"><expr pos:start="81:5" pos:end="81:48"><call pos:start="81:5" pos:end="81:48"><name pos:start="81:5" pos:end="81:17">qemu_add_opts</name><argument_list pos:start="81:18" pos:end="81:48">(<argument pos:start="81:19" pos:end="81:47"><expr pos:start="81:19" pos:end="81:47"><operator pos:start="81:19" pos:end="81:19">&amp;</operator><name pos:start="81:20" pos:end="81:47">qemu_semihosting_config_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="82:5" pos:end="82:37"><expr pos:start="82:5" pos:end="82:36"><call pos:start="82:5" pos:end="82:36"><name pos:start="82:5" pos:end="82:17">qemu_add_opts</name><argument_list pos:start="82:18" pos:end="82:36">(<argument pos:start="82:19" pos:end="82:35"><expr pos:start="82:19" pos:end="82:35"><operator pos:start="82:19" pos:end="82:19">&amp;</operator><name pos:start="82:20" pos:end="82:35">qemu_fw_cfg_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="83:5" pos:end="83:39"><expr pos:start="83:5" pos:end="83:38"><call pos:start="83:5" pos:end="83:38"><name pos:start="83:5" pos:end="83:20">module_call_init</name><argument_list pos:start="83:21" pos:end="83:38">(<argument pos:start="83:22" pos:end="83:37"><expr pos:start="83:22" pos:end="83:37"><name pos:start="83:22" pos:end="83:37">MODULE_INIT_OPTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="84:5" pos:end="84:20"><expr pos:start="84:5" pos:end="84:19"><call pos:start="84:5" pos:end="84:19"><name pos:start="84:5" pos:end="84:17">runstate_init</name><argument_list pos:start="84:18" pos:end="84:19">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="85:5" pos:end="1197:13"><if pos:start="85:5" pos:end="1197:13">if <condition pos:start="85:8" pos:end="85:31">(<expr pos:start="85:9" pos:end="85:30"><call pos:start="85:9" pos:end="85:26"><name pos:start="85:9" pos:end="85:20">qcrypto_init</name><argument_list pos:start="85:21" pos:end="85:26">(<argument pos:start="85:22" pos:end="85:25"><expr pos:start="85:22" pos:end="85:25"><operator pos:start="85:22" pos:end="85:22">&amp;</operator><name pos:start="85:23" pos:end="85:25">err</name></expr></argument>)</argument_list></call> <operator pos:start="85:28" pos:end="85:28">&lt;</operator> <literal type="number" pos:start="85:30" pos:end="85:30">0</literal></expr>)</condition> <block pos:start="85:33" pos:end="1197:13">{<block_content pos:start="86:9" pos:end="1197:13">
        <expr_stmt pos:start="86:9" pos:end="86:61"><expr pos:start="86:9" pos:end="86:60"><call pos:start="86:9" pos:end="86:60"><name pos:start="86:9" pos:end="86:25">error_reportf_err</name><argument_list pos:start="86:26" pos:end="86:60">(<argument pos:start="86:27" pos:end="86:29"><expr pos:start="86:27" pos:end="86:29"><name pos:start="86:27" pos:end="86:29">err</name></expr></argument>, <argument pos:start="86:32" pos:end="86:59"><expr pos:start="86:32" pos:end="86:59"><literal type="string" pos:start="86:32" pos:end="86:59">"cannot initialize crypto: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="87:5" pos:end="87:32"><expr pos:start="87:5" pos:end="87:31"><name pos:start="87:5" pos:end="87:13">rtc_clock</name> <operator pos:start="87:15" pos:end="87:15">=</operator> <name pos:start="87:17" pos:end="87:31">QEMU_CLOCK_HOST</name></expr>;</expr_stmt>
    <expr_stmt pos:start="88:5" pos:end="88:39"><expr pos:start="88:5" pos:end="88:38"><call pos:start="88:5" pos:end="88:38"><name pos:start="88:5" pos:end="88:14">QLIST_INIT</name> <argument_list pos:start="88:16" pos:end="88:38">(<argument pos:start="88:17" pos:end="88:37"><expr pos:start="88:17" pos:end="88:37"><operator pos:start="88:17" pos:end="88:17">&amp;</operator><name pos:start="88:18" pos:end="88:37">vm_change_state_head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="89:5" pos:end="89:37"><expr pos:start="89:5" pos:end="89:36"><call pos:start="89:5" pos:end="89:36"><name pos:start="89:5" pos:end="89:34">os_setup_early_signal_handling</name><argument_list pos:start="89:35" pos:end="89:36">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="90:5" pos:end="90:21"><expr pos:start="90:5" pos:end="90:20"><name pos:start="90:5" pos:end="90:13">cpu_model</name> <operator pos:start="90:15" pos:end="90:15">=</operator> <name pos:start="90:17" pos:end="90:20">NULL</name></expr>;</expr_stmt>
    <expr_stmt pos:start="91:5" pos:end="91:17"><expr pos:start="91:5" pos:end="91:16"><name pos:start="91:5" pos:end="91:12">snapshot</name> <operator pos:start="91:14" pos:end="91:14">=</operator> <literal type="number" pos:start="91:16" pos:end="91:16">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="92:5" pos:end="92:28"><expr pos:start="92:5" pos:end="92:27"><name pos:start="92:5" pos:end="92:8">cyls</name> <operator pos:start="92:10" pos:end="92:10">=</operator> <name pos:start="92:12" pos:end="92:16">heads</name> <operator pos:start="92:18" pos:end="92:18">=</operator> <name pos:start="92:20" pos:end="92:23">secs</name> <operator pos:start="92:25" pos:end="92:25">=</operator> <literal type="number" pos:start="92:27" pos:end="92:27">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="93:5" pos:end="93:44"><expr pos:start="93:5" pos:end="93:43"><name pos:start="93:5" pos:end="93:15">translation</name> <operator pos:start="93:17" pos:end="93:17">=</operator> <name pos:start="93:19" pos:end="93:43">BIOS_ATA_TRANSLATION_AUTO</name></expr>;</expr_stmt>
    <expr_stmt pos:start="94:5" pos:end="94:16"><expr pos:start="94:5" pos:end="94:15"><name pos:start="94:5" pos:end="94:11">nb_nics</name> <operator pos:start="94:13" pos:end="94:13">=</operator> <literal type="number" pos:start="94:15" pos:end="94:15">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="95:5" pos:end="95:31"><expr pos:start="95:5" pos:end="95:30"><call pos:start="95:5" pos:end="95:30"><name pos:start="95:5" pos:end="95:28">bdrv_init_with_whitelist</name><argument_list pos:start="95:29" pos:end="95:30">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="96:5" pos:end="96:18"><expr pos:start="96:5" pos:end="96:17"><name pos:start="96:5" pos:end="96:13">autostart</name> <operator pos:start="96:15" pos:end="96:15">=</operator> <literal type="number" pos:start="96:17" pos:end="96:17">1</literal></expr>;</expr_stmt>
    <comment type="block" pos:start="97:5" pos:end="97:38">/* first pass of option parsing */</comment>
    <expr_stmt pos:start="98:5" pos:end="98:15"><expr pos:start="98:5" pos:end="98:14"><name pos:start="98:5" pos:end="98:10">optind</name> <operator pos:start="98:12" pos:end="98:12">=</operator> <literal type="number" pos:start="98:14" pos:end="98:14">1</literal></expr>;</expr_stmt>
    <while pos:start="99:5" pos:end="1197:13">while <condition pos:start="99:11" pos:end="99:25">(<expr pos:start="99:12" pos:end="99:24"><name pos:start="99:12" pos:end="99:17">optind</name> <operator pos:start="99:19" pos:end="99:19">&lt;</operator> <name pos:start="99:21" pos:end="99:24">argc</name></expr>)</condition> <block pos:start="99:27" pos:end="1197:13">{<block_content pos:start="100:9" pos:end="1197:13">
        <if_stmt pos:start="100:9" pos:end="1197:13"><if pos:start="100:9" pos:end="103:9">if <condition pos:start="100:12" pos:end="100:35">(<expr pos:start="100:13" pos:end="100:34"><name pos:start="100:13" pos:end="100:27"><name pos:start="100:13" pos:end="100:16">argv</name><index pos:start="100:17" pos:end="100:24">[<expr pos:start="100:18" pos:end="100:23"><name pos:start="100:18" pos:end="100:23">optind</name></expr>]</index><index pos:start="100:25" pos:end="100:27">[<expr pos:start="100:26" pos:end="100:26"><literal type="number" pos:start="100:26" pos:end="100:26">0</literal></expr>]</index></name> <operator pos:start="100:29" pos:end="100:30">!=</operator> <literal type="char" pos:start="100:32" pos:end="100:34">'-'</literal></expr>)</condition> <block pos:start="100:37" pos:end="103:9">{<block_content pos:start="102:13" pos:end="102:21">
            <comment type="block" pos:start="101:13" pos:end="101:28">/* disk image */</comment>
            <expr_stmt pos:start="102:13" pos:end="102:21"><expr pos:start="102:13" pos:end="102:20"><name pos:start="102:13" pos:end="102:18">optind</name><operator pos:start="102:19" pos:end="102:20">++</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="103:11" pos:end="1197:13">else <block pos:start="103:16" pos:end="1197:13">{<block_content pos:start="104:13" pos:end="1197:13">
            <decl_stmt pos:start="104:13" pos:end="104:35"><decl pos:start="104:13" pos:end="104:34"><type pos:start="104:13" pos:end="104:30"><specifier pos:start="104:13" pos:end="104:17">const</specifier> <name pos:start="104:19" pos:end="104:28">QEMUOption</name> <modifier pos:start="104:30" pos:end="104:30">*</modifier></type><name pos:start="104:31" pos:end="104:34">popt</name></decl>;</decl_stmt>
            <expr_stmt pos:start="105:13" pos:end="105:60"><expr pos:start="105:13" pos:end="105:59"><name pos:start="105:13" pos:end="105:16">popt</name> <operator pos:start="105:18" pos:end="105:18">=</operator> <call pos:start="105:20" pos:end="105:59"><name pos:start="105:20" pos:end="105:29">lookup_opt</name><argument_list pos:start="105:30" pos:end="105:59">(<argument pos:start="105:31" pos:end="105:34"><expr pos:start="105:31" pos:end="105:34"><name pos:start="105:31" pos:end="105:34">argc</name></expr></argument>, <argument pos:start="105:37" pos:end="105:40"><expr pos:start="105:37" pos:end="105:40"><name pos:start="105:37" pos:end="105:40">argv</name></expr></argument>, <argument pos:start="105:43" pos:end="105:49"><expr pos:start="105:43" pos:end="105:49"><operator pos:start="105:43" pos:end="105:43">&amp;</operator><name pos:start="105:44" pos:end="105:49">optarg</name></expr></argument>, <argument pos:start="105:52" pos:end="105:58"><expr pos:start="105:52" pos:end="105:58"><operator pos:start="105:52" pos:end="105:52">&amp;</operator><name pos:start="105:53" pos:end="105:58">optind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <switch pos:start="106:13" pos:end="1197:13">switch <condition pos:start="106:20" pos:end="106:32">(<expr pos:start="106:21" pos:end="106:31"><name pos:start="106:21" pos:end="106:31"><name pos:start="106:21" pos:end="106:24">popt</name><operator pos:start="106:25" pos:end="106:26">-&gt;</operator><name pos:start="106:27" pos:end="106:31">index</name></name></expr>)</condition> <block pos:start="106:34" pos:end="1197:13">{<block_content pos:start="107:13" pos:end="1197:13">
            <case pos:start="107:13" pos:end="107:41">case <expr pos:start="107:18" pos:end="107:40"><name pos:start="107:18" pos:end="107:40">QEMU_OPTION_nodefconfig</name></expr>:</case>
                <expr_stmt pos:start="108:17" pos:end="108:34"><expr pos:start="108:17" pos:end="108:33"><name pos:start="108:17" pos:end="108:25">defconfig</name> <operator pos:start="108:27" pos:end="108:27">=</operator> <name pos:start="108:29" pos:end="108:33">false</name></expr>;</expr_stmt>
            <case pos:start="109:13" pos:end="109:42">case <expr pos:start="109:18" pos:end="109:41"><name pos:start="109:18" pos:end="109:41">QEMU_OPTION_nouserconfig</name></expr>:</case>
                <expr_stmt pos:start="110:17" pos:end="110:35"><expr pos:start="110:17" pos:end="110:34"><name pos:start="110:17" pos:end="110:26">userconfig</name> <operator pos:start="110:28" pos:end="110:28">=</operator> <name pos:start="110:30" pos:end="110:34">false</name></expr>;</expr_stmt>
    <if_stmt pos:start="111:5" pos:end="1197:13"><if pos:start="111:5" pos:end="1197:13">if <condition pos:start="111:8" pos:end="111:32">(<expr pos:start="111:9" pos:end="111:31"><name pos:start="111:9" pos:end="111:17">defconfig</name> <operator pos:start="111:19" pos:end="111:20">&amp;&amp;</operator> <name pos:start="111:22" pos:end="111:31">userconfig</name></expr>)</condition> <block pos:start="111:34" pos:end="1197:13">{<block_content pos:start="112:9" pos:end="1197:13">
        <if_stmt pos:start="112:9" pos:end="1197:13"><if pos:start="112:9" pos:end="1197:13">if <condition pos:start="112:12" pos:end="112:48">(<expr pos:start="112:13" pos:end="112:47"><call pos:start="112:13" pos:end="112:43"><name pos:start="112:13" pos:end="112:41">qemu_read_default_config_file</name><argument_list pos:start="112:42" pos:end="112:43">()</argument_list></call> <operator pos:start="112:45" pos:end="112:45">&lt;</operator> <literal type="number" pos:start="112:47" pos:end="112:47">0</literal></expr>)</condition> <block pos:start="112:50" pos:end="1197:13">{<block_content pos:start="114:5" pos:end="1197:13">
    <comment type="block" pos:start="113:5" pos:end="113:39">/* second pass of option parsing */</comment>
    <expr_stmt pos:start="114:5" pos:end="114:15"><expr pos:start="114:5" pos:end="114:14"><name pos:start="114:5" pos:end="114:10">optind</name> <operator pos:start="114:12" pos:end="114:12">=</operator> <literal type="number" pos:start="114:14" pos:end="114:14">1</literal></expr>;</expr_stmt>
    <for pos:start="115:5" pos:end="1197:13">for<control pos:start="115:8" pos:end="115:11">(<init pos:start="115:9" pos:end="115:9">;</init><condition pos:start="115:10" pos:end="115:10">;</condition><incr/>)</control> <block pos:start="115:13" pos:end="1197:13">{<block_content pos:start="116:9" pos:end="1197:13">
        <if_stmt pos:start="116:9" pos:end="1197:13"><if pos:start="116:9" pos:end="1197:13">if <condition pos:start="116:12" pos:end="116:27">(<expr pos:start="116:13" pos:end="116:26"><name pos:start="116:13" pos:end="116:18">optind</name> <operator pos:start="116:20" pos:end="116:21">&gt;=</operator> <name pos:start="116:23" pos:end="116:26">argc</name></expr>)</condition><block type="pseudo" pos:start="117:9" pos:end="1197:13"><block_content pos:start="117:9" pos:end="1197:13">
        <if_stmt pos:start="117:9" pos:end="1197:13"><if pos:start="117:9" pos:end="119:9">if <condition pos:start="117:12" pos:end="117:35">(<expr pos:start="117:13" pos:end="117:34"><name pos:start="117:13" pos:end="117:27"><name pos:start="117:13" pos:end="117:16">argv</name><index pos:start="117:17" pos:end="117:24">[<expr pos:start="117:18" pos:end="117:23"><name pos:start="117:18" pos:end="117:23">optind</name></expr>]</index><index pos:start="117:25" pos:end="117:27">[<expr pos:start="117:26" pos:end="117:26"><literal type="number" pos:start="117:26" pos:end="117:26">0</literal></expr>]</index></name> <operator pos:start="117:29" pos:end="117:30">!=</operator> <literal type="char" pos:start="117:32" pos:end="117:34">'-'</literal></expr>)</condition> <block pos:start="117:37" pos:end="119:9">{<block_content pos:start="118:13" pos:end="118:73">
            <expr_stmt pos:start="118:13" pos:end="118:73"><expr pos:start="118:13" pos:end="118:72"><name pos:start="118:13" pos:end="118:20">hda_opts</name> <operator pos:start="118:22" pos:end="118:22">=</operator> <call pos:start="118:24" pos:end="118:72"><name pos:start="118:24" pos:end="118:32">drive_add</name><argument_list pos:start="118:33" pos:end="118:72">(<argument pos:start="118:34" pos:end="118:43"><expr pos:start="118:34" pos:end="118:43"><name pos:start="118:34" pos:end="118:43">IF_DEFAULT</name></expr></argument>, <argument pos:start="118:46" pos:end="118:46"><expr pos:start="118:46" pos:end="118:46"><literal type="number" pos:start="118:46" pos:end="118:46">0</literal></expr></argument>, <argument pos:start="118:49" pos:end="118:62"><expr pos:start="118:49" pos:end="118:62"><name pos:start="118:49" pos:end="118:62"><name pos:start="118:49" pos:end="118:52">argv</name><index pos:start="118:53" pos:end="118:62">[<expr pos:start="118:54" pos:end="118:61"><name pos:start="118:54" pos:end="118:59">optind</name><operator pos:start="118:60" pos:end="118:61">++</operator></expr>]</index></name></expr></argument>, <argument pos:start="118:65" pos:end="118:71"><expr pos:start="118:65" pos:end="118:71"><name pos:start="118:65" pos:end="118:71">HD_OPTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="119:11" pos:end="1197:13">else <block pos:start="119:16" pos:end="1197:13">{<block_content pos:start="120:13" pos:end="1197:13">
            <decl_stmt pos:start="120:13" pos:end="120:35"><decl pos:start="120:13" pos:end="120:34"><type pos:start="120:13" pos:end="120:30"><specifier pos:start="120:13" pos:end="120:17">const</specifier> <name pos:start="120:19" pos:end="120:28">QEMUOption</name> <modifier pos:start="120:30" pos:end="120:30">*</modifier></type><name pos:start="120:31" pos:end="120:34">popt</name></decl>;</decl_stmt>
            <expr_stmt pos:start="121:13" pos:end="121:60"><expr pos:start="121:13" pos:end="121:59"><name pos:start="121:13" pos:end="121:16">popt</name> <operator pos:start="121:18" pos:end="121:18">=</operator> <call pos:start="121:20" pos:end="121:59"><name pos:start="121:20" pos:end="121:29">lookup_opt</name><argument_list pos:start="121:30" pos:end="121:59">(<argument pos:start="121:31" pos:end="121:34"><expr pos:start="121:31" pos:end="121:34"><name pos:start="121:31" pos:end="121:34">argc</name></expr></argument>, <argument pos:start="121:37" pos:end="121:40"><expr pos:start="121:37" pos:end="121:40"><name pos:start="121:37" pos:end="121:40">argv</name></expr></argument>, <argument pos:start="121:43" pos:end="121:49"><expr pos:start="121:43" pos:end="121:49"><operator pos:start="121:43" pos:end="121:43">&amp;</operator><name pos:start="121:44" pos:end="121:49">optarg</name></expr></argument>, <argument pos:start="121:52" pos:end="121:58"><expr pos:start="121:52" pos:end="121:58"><operator pos:start="121:52" pos:end="121:52">&amp;</operator><name pos:start="121:53" pos:end="121:58">optind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="122:13" pos:end="1197:13"><if pos:start="122:13" pos:end="1197:13">if <condition pos:start="122:16" pos:end="122:47">(<expr pos:start="122:17" pos:end="122:46"><operator pos:start="122:17" pos:end="122:17">!</operator><operator pos:start="122:18" pos:end="122:18">(</operator><name pos:start="122:19" pos:end="122:33"><name pos:start="122:19" pos:end="122:22">popt</name><operator pos:start="122:23" pos:end="122:24">-&gt;</operator><name pos:start="122:25" pos:end="122:33">arch_mask</name></name> <operator pos:start="122:35" pos:end="122:35">&amp;</operator> <name pos:start="122:37" pos:end="122:45">arch_type</name><operator pos:start="122:46" pos:end="122:46">)</operator></expr>)</condition> <block pos:start="122:49" pos:end="1197:13">{<block_content pos:start="123:17" pos:end="1197:13">
                <expr_stmt pos:start="123:17" pos:end="123:69"><expr pos:start="123:17" pos:end="123:68"><call pos:start="123:17" pos:end="123:68"><name pos:start="123:17" pos:end="123:28">error_report</name><argument_list pos:start="123:29" pos:end="123:68">(<argument pos:start="123:30" pos:end="123:67"><expr pos:start="123:30" pos:end="123:67"><literal type="string" pos:start="123:30" pos:end="123:67">"Option not supported for this target"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <switch pos:start="124:13" pos:end="1197:13">switch<condition pos:start="124:19" pos:end="124:31">(<expr pos:start="124:20" pos:end="124:30"><name pos:start="124:20" pos:end="124:30"><name pos:start="124:20" pos:end="124:23">popt</name><operator pos:start="124:24" pos:end="124:25">-&gt;</operator><name pos:start="124:26" pos:end="124:30">index</name></name></expr>)</condition> <block pos:start="124:33" pos:end="1197:13">{<block_content pos:start="125:13" pos:end="1197:13">
            <case pos:start="125:13" pos:end="125:44">case <expr pos:start="125:18" pos:end="125:43"><name pos:start="125:18" pos:end="125:43">QEMU_OPTION_no_kvm_irqchip</name></expr>:</case> <block pos:start="125:46" pos:end="1197:13">{<block_content pos:start="126:17" pos:end="1197:13">
                <expr_stmt pos:start="126:17" pos:end="126:50"><expr pos:start="126:17" pos:end="126:49"><name pos:start="126:17" pos:end="126:21">olist</name> <operator pos:start="126:23" pos:end="126:23">=</operator> <call pos:start="126:25" pos:end="126:49"><name pos:start="126:25" pos:end="126:38">qemu_find_opts</name><argument_list pos:start="126:39" pos:end="126:49">(<argument pos:start="126:40" pos:end="126:48"><expr pos:start="126:40" pos:end="126:48"><literal type="string" pos:start="126:40" pos:end="126:48">"machine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="127:17" pos:end="127:76"><expr pos:start="127:17" pos:end="127:75"><call pos:start="127:17" pos:end="127:75"><name pos:start="127:17" pos:end="127:39">qemu_opts_parse_noisily</name><argument_list pos:start="127:40" pos:end="127:75">(<argument pos:start="127:41" pos:end="127:45"><expr pos:start="127:41" pos:end="127:45"><name pos:start="127:41" pos:end="127:45">olist</name></expr></argument>, <argument pos:start="127:48" pos:end="127:67"><expr pos:start="127:48" pos:end="127:67"><literal type="string" pos:start="127:48" pos:end="127:67">"kernel_irqchip=off"</literal></expr></argument>, <argument pos:start="127:70" pos:end="127:74"><expr pos:start="127:70" pos:end="127:74"><name pos:start="127:70" pos:end="127:74">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="128:13" pos:end="128:33">case <expr pos:start="128:18" pos:end="128:32"><name pos:start="128:18" pos:end="128:32">QEMU_OPTION_cpu</name></expr>:</case>
                <comment type="block" pos:start="129:17" pos:end="129:55">/* hw initialization will check this */</comment>
                <expr_stmt pos:start="130:17" pos:end="130:35"><expr pos:start="130:17" pos:end="130:34"><name pos:start="130:17" pos:end="130:25">cpu_model</name> <operator pos:start="130:27" pos:end="130:27">=</operator> <name pos:start="130:29" pos:end="130:34">optarg</name></expr>;</expr_stmt>
            <case pos:start="131:13" pos:end="131:33">case <expr pos:start="131:18" pos:end="131:32"><name pos:start="131:18" pos:end="131:32">QEMU_OPTION_hda</name></expr>:</case>
                    <decl_stmt pos:start="132:21" pos:end="132:34"><decl pos:start="132:21" pos:end="132:33"><type pos:start="132:21" pos:end="132:24"><name pos:start="132:21" pos:end="132:24">char</name></type> <name pos:start="132:26" pos:end="132:33"><name pos:start="132:26" pos:end="132:28">buf</name><index pos:start="132:29" pos:end="132:33">[<expr pos:start="132:30" pos:end="132:32"><literal type="number" pos:start="132:30" pos:end="132:32">256</literal></expr>]</index></name></decl>;</decl_stmt>
                    <if_stmt pos:start="133:21" pos:end="142:53"><if pos:start="133:21" pos:end="134:66">if <condition pos:start="133:24" pos:end="133:34">(<expr pos:start="133:25" pos:end="133:33"><name pos:start="133:25" pos:end="133:28">cyls</name> <operator pos:start="133:30" pos:end="133:31">==</operator> <literal type="number" pos:start="133:33" pos:end="133:33">0</literal></expr>)</condition><block type="pseudo" pos:start="134:25" pos:end="134:66"><block_content pos:start="134:25" pos:end="134:66">
                        <expr_stmt pos:start="134:25" pos:end="134:66"><expr pos:start="134:25" pos:end="134:65"><call pos:start="134:25" pos:end="134:65"><name pos:start="134:25" pos:end="134:32">snprintf</name><argument_list pos:start="134:33" pos:end="134:65">(<argument pos:start="134:34" pos:end="134:36"><expr pos:start="134:34" pos:end="134:36"><name pos:start="134:34" pos:end="134:36">buf</name></expr></argument>, <argument pos:start="134:39" pos:end="134:49"><expr pos:start="134:39" pos:end="134:49"><sizeof pos:start="134:39" pos:end="134:49">sizeof<argument_list pos:start="134:45" pos:end="134:49">(<argument pos:start="134:46" pos:end="134:48"><expr pos:start="134:46" pos:end="134:48"><name pos:start="134:46" pos:end="134:48">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="134:52" pos:end="134:55"><expr pos:start="134:52" pos:end="134:55"><literal type="string" pos:start="134:52" pos:end="134:55">"%s"</literal></expr></argument>, <argument pos:start="134:58" pos:end="134:64"><expr pos:start="134:58" pos:end="134:64"><name pos:start="134:58" pos:end="134:64">HD_OPTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                    <else pos:start="135:21" pos:end="142:53">else<block type="pseudo" pos:start="136:25" pos:end="142:53"><block_content pos:start="136:25" pos:end="142:53">
                        <expr_stmt pos:start="136:25" pos:end="142:53"><expr pos:start="136:25" pos:end="142:52"><call pos:start="136:25" pos:end="142:52"><name pos:start="136:25" pos:end="136:32">snprintf</name><argument_list pos:start="136:33" pos:end="142:52">(<argument pos:start="136:34" pos:end="136:36"><expr pos:start="136:34" pos:end="136:36"><name pos:start="136:34" pos:end="136:36">buf</name></expr></argument>, <argument pos:start="136:39" pos:end="136:49"><expr pos:start="136:39" pos:end="136:49"><sizeof pos:start="136:39" pos:end="136:49">sizeof<argument_list pos:start="136:45" pos:end="136:49">(<argument pos:start="136:46" pos:end="136:48"><expr pos:start="136:46" pos:end="136:48"><name pos:start="136:46" pos:end="136:48">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                                 <argument pos:start="137:34" pos:end="137:64"><expr pos:start="137:34" pos:end="137:64"><literal type="string" pos:start="137:34" pos:end="137:64">"%s,cyls=%d,heads=%d,secs=%d%s"</literal></expr></argument>,
                                 <argument pos:start="138:34" pos:end="138:40"><expr pos:start="138:34" pos:end="138:40"><name pos:start="138:34" pos:end="138:40">HD_OPTS</name></expr></argument> , <argument pos:start="138:44" pos:end="138:47"><expr pos:start="138:44" pos:end="138:47"><name pos:start="138:44" pos:end="138:47">cyls</name></expr></argument>, <argument pos:start="138:50" pos:end="138:54"><expr pos:start="138:50" pos:end="138:54"><name pos:start="138:50" pos:end="138:54">heads</name></expr></argument>, <argument pos:start="138:57" pos:end="138:60"><expr pos:start="138:57" pos:end="138:60"><name pos:start="138:57" pos:end="138:60">secs</name></expr></argument>,
                                 <argument pos:start="139:34" pos:end="142:51"><expr pos:start="139:34" pos:end="142:51"><ternary pos:start="139:34" pos:end="142:51"><condition pos:start="139:34" pos:end="139:74"><expr pos:start="139:34" pos:end="139:72"><name pos:start="139:34" pos:end="139:44">translation</name> <operator pos:start="139:46" pos:end="139:47">==</operator> <name pos:start="139:49" pos:end="139:72">BIOS_ATA_TRANSLATION_LBA</name></expr> ?</condition><then pos:start="140:34" pos:end="140:45">
                                 <expr pos:start="140:34" pos:end="140:45"><literal type="string" pos:start="140:34" pos:end="140:45">",trans=lba"</literal></expr> </then><else pos:start="140:47" pos:end="142:51">:
                                 <expr pos:start="141:34" pos:end="142:51"><ternary pos:start="141:34" pos:end="142:51"><condition pos:start="141:34" pos:end="141:75"><expr pos:start="141:34" pos:end="141:73"><name pos:start="141:34" pos:end="141:44">translation</name> <operator pos:start="141:46" pos:end="141:47">==</operator> <name pos:start="141:49" pos:end="141:73">BIOS_ATA_TRANSLATION_NONE</name></expr> ?</condition><then pos:start="142:34" pos:end="142:46">
                                 <expr pos:start="142:34" pos:end="142:46"><literal type="string" pos:start="142:34" pos:end="142:46">",trans=none"</literal></expr> </then><else pos:start="142:48" pos:end="142:51">: <expr pos:start="142:50" pos:end="142:51"><literal type="string" pos:start="142:50" pos:end="142:51">""</literal></expr></else></ternary></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
                    <expr_stmt pos:start="143:21" pos:end="143:58"><expr pos:start="143:21" pos:end="143:57"><call pos:start="143:21" pos:end="143:57"><name pos:start="143:21" pos:end="143:29">drive_add</name><argument_list pos:start="143:30" pos:end="143:57">(<argument pos:start="143:31" pos:end="143:40"><expr pos:start="143:31" pos:end="143:40"><name pos:start="143:31" pos:end="143:40">IF_DEFAULT</name></expr></argument>, <argument pos:start="143:43" pos:end="143:43"><expr pos:start="143:43" pos:end="143:43"><literal type="number" pos:start="143:43" pos:end="143:43">0</literal></expr></argument>, <argument pos:start="143:46" pos:end="143:51"><expr pos:start="143:46" pos:end="143:51"><name pos:start="143:46" pos:end="143:51">optarg</name></expr></argument>, <argument pos:start="143:54" pos:end="143:56"><expr pos:start="143:54" pos:end="143:56"><name pos:start="143:54" pos:end="143:56">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="144:13" pos:end="144:33">case <expr pos:start="144:18" pos:end="144:32"><name pos:start="144:18" pos:end="144:32">QEMU_OPTION_hdb</name></expr>:</case>
            <case pos:start="145:13" pos:end="145:33">case <expr pos:start="145:18" pos:end="145:32"><name pos:start="145:18" pos:end="145:32">QEMU_OPTION_hdc</name></expr>:</case>
            <case pos:start="146:13" pos:end="146:33">case <expr pos:start="146:18" pos:end="146:32"><name pos:start="146:18" pos:end="146:32">QEMU_OPTION_hdd</name></expr>:</case>
                <expr_stmt pos:start="147:17" pos:end="148:35"><expr pos:start="147:17" pos:end="148:34"><call pos:start="147:17" pos:end="148:34"><name pos:start="147:17" pos:end="147:25">drive_add</name><argument_list pos:start="147:26" pos:end="148:34">(<argument pos:start="147:27" pos:end="147:36"><expr pos:start="147:27" pos:end="147:36"><name pos:start="147:27" pos:end="147:36">IF_DEFAULT</name></expr></argument>, <argument pos:start="147:39" pos:end="147:67"><expr pos:start="147:39" pos:end="147:67"><name pos:start="147:39" pos:end="147:49"><name pos:start="147:39" pos:end="147:42">popt</name><operator pos:start="147:43" pos:end="147:44">-&gt;</operator><name pos:start="147:45" pos:end="147:49">index</name></name> <operator pos:start="147:51" pos:end="147:51">-</operator> <name pos:start="147:53" pos:end="147:67">QEMU_OPTION_hda</name></expr></argument>, <argument pos:start="147:70" pos:end="147:75"><expr pos:start="147:70" pos:end="147:75"><name pos:start="147:70" pos:end="147:75">optarg</name></expr></argument>,
                          <argument pos:start="148:27" pos:end="148:33"><expr pos:start="148:27" pos:end="148:33"><name pos:start="148:27" pos:end="148:33">HD_OPTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="149:13" pos:end="149:35">case <expr pos:start="149:18" pos:end="149:34"><name pos:start="149:18" pos:end="149:34">QEMU_OPTION_drive</name></expr>:</case>
                <if_stmt pos:start="150:17" pos:end="1197:13"><if pos:start="150:17" pos:end="1197:13">if <condition pos:start="150:20" pos:end="150:46">(<expr pos:start="150:21" pos:end="150:45"><call pos:start="150:21" pos:end="150:37"><name pos:start="150:21" pos:end="150:29">drive_def</name><argument_list pos:start="150:30" pos:end="150:37">(<argument pos:start="150:31" pos:end="150:36"><expr pos:start="150:31" pos:end="150:36"><name pos:start="150:31" pos:end="150:36">optarg</name></expr></argument>)</argument_list></call> <operator pos:start="150:39" pos:end="150:40">==</operator> <name pos:start="150:42" pos:end="150:45">NULL</name></expr>)</condition> <block pos:start="150:48" pos:end="1197:13">{<block_content pos:start="151:13" pos:end="1197:13">
            <case pos:start="151:13" pos:end="151:33">case <expr pos:start="151:18" pos:end="151:32"><name pos:start="151:18" pos:end="151:32">QEMU_OPTION_set</name></expr>:</case>
                <if_stmt pos:start="152:17" pos:end="156:56"><if pos:start="152:17" pos:end="156:56">if <condition pos:start="152:20" pos:end="152:49">(<expr pos:start="152:21" pos:end="152:48"><call pos:start="152:21" pos:end="152:43"><name pos:start="152:21" pos:end="152:35">qemu_set_option</name><argument_list pos:start="152:36" pos:end="152:43">(<argument pos:start="152:37" pos:end="152:42"><expr pos:start="152:37" pos:end="152:42"><name pos:start="152:37" pos:end="152:42">optarg</name></expr></argument>)</argument_list></call> <operator pos:start="152:45" pos:end="152:46">!=</operator> <literal type="number" pos:start="152:48" pos:end="152:48">0</literal></expr>)</condition><block type="pseudo" pos:start="153:13" pos:end="156:56"><block_content pos:start="153:13" pos:end="156:56">
            <case pos:start="153:13" pos:end="153:36">case <expr pos:start="153:18" pos:end="153:35"><name pos:start="153:18" pos:end="153:35">QEMU_OPTION_global</name></expr>:</case>
                <if_stmt pos:start="154:17" pos:end="156:56"><if pos:start="154:17" pos:end="156:56">if <condition pos:start="154:20" pos:end="154:52">(<expr pos:start="154:21" pos:end="154:51"><call pos:start="154:21" pos:end="154:46"><name pos:start="154:21" pos:end="154:38">qemu_global_option</name><argument_list pos:start="154:39" pos:end="154:46">(<argument pos:start="154:40" pos:end="154:45"><expr pos:start="154:40" pos:end="154:45"><name pos:start="154:40" pos:end="154:45">optarg</name></expr></argument>)</argument_list></call> <operator pos:start="154:48" pos:end="154:49">!=</operator> <literal type="number" pos:start="154:51" pos:end="154:51">0</literal></expr>)</condition><block type="pseudo" pos:start="155:13" pos:end="156:56"><block_content pos:start="155:13" pos:end="156:56">
            <case pos:start="155:13" pos:end="155:38">case <expr pos:start="155:18" pos:end="155:37"><name pos:start="155:18" pos:end="155:37">QEMU_OPTION_mtdblock</name></expr>:</case>
                <expr_stmt pos:start="156:17" pos:end="156:56"><expr pos:start="156:17" pos:end="156:55"><call pos:start="156:17" pos:end="156:55"><name pos:start="156:17" pos:end="156:25">drive_add</name><argument_list pos:start="156:26" pos:end="156:55">(<argument pos:start="156:27" pos:end="156:32"><expr pos:start="156:27" pos:end="156:32"><name pos:start="156:27" pos:end="156:32">IF_MTD</name></expr></argument>, <argument pos:start="156:35" pos:end="156:36"><expr pos:start="156:35" pos:end="156:36"><operator pos:start="156:35" pos:end="156:35">-</operator><literal type="number" pos:start="156:36" pos:end="156:36">1</literal></expr></argument>, <argument pos:start="156:39" pos:end="156:44"><expr pos:start="156:39" pos:end="156:44"><name pos:start="156:39" pos:end="156:44">optarg</name></expr></argument>, <argument pos:start="156:47" pos:end="156:54"><expr pos:start="156:47" pos:end="156:54"><name pos:start="156:47" pos:end="156:54">MTD_OPTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
            <case pos:start="157:13" pos:end="157:32">case <expr pos:start="157:18" pos:end="157:31"><name pos:start="157:18" pos:end="157:31">QEMU_OPTION_sd</name></expr>:</case>
                <expr_stmt pos:start="158:17" pos:end="158:54"><expr pos:start="158:17" pos:end="158:53"><call pos:start="158:17" pos:end="158:53"><name pos:start="158:17" pos:end="158:25">drive_add</name><argument_list pos:start="158:26" pos:end="158:53">(<argument pos:start="158:27" pos:end="158:31"><expr pos:start="158:27" pos:end="158:31"><name pos:start="158:27" pos:end="158:31">IF_SD</name></expr></argument>, <argument pos:start="158:34" pos:end="158:35"><expr pos:start="158:34" pos:end="158:35"><operator pos:start="158:34" pos:end="158:34">-</operator><literal type="number" pos:start="158:35" pos:end="158:35">1</literal></expr></argument>, <argument pos:start="158:38" pos:end="158:43"><expr pos:start="158:38" pos:end="158:43"><name pos:start="158:38" pos:end="158:43">optarg</name></expr></argument>, <argument pos:start="158:46" pos:end="158:52"><expr pos:start="158:46" pos:end="158:52"><name pos:start="158:46" pos:end="158:52">SD_OPTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="159:13" pos:end="159:36">case <expr pos:start="159:18" pos:end="159:35"><name pos:start="159:18" pos:end="159:35">QEMU_OPTION_pflash</name></expr>:</case>
                <expr_stmt pos:start="160:17" pos:end="160:62"><expr pos:start="160:17" pos:end="160:61"><call pos:start="160:17" pos:end="160:61"><name pos:start="160:17" pos:end="160:25">drive_add</name><argument_list pos:start="160:26" pos:end="160:61">(<argument pos:start="160:27" pos:end="160:35"><expr pos:start="160:27" pos:end="160:35"><name pos:start="160:27" pos:end="160:35">IF_PFLASH</name></expr></argument>, <argument pos:start="160:38" pos:end="160:39"><expr pos:start="160:38" pos:end="160:39"><operator pos:start="160:38" pos:end="160:38">-</operator><literal type="number" pos:start="160:39" pos:end="160:39">1</literal></expr></argument>, <argument pos:start="160:42" pos:end="160:47"><expr pos:start="160:42" pos:end="160:47"><name pos:start="160:42" pos:end="160:47">optarg</name></expr></argument>, <argument pos:start="160:50" pos:end="160:60"><expr pos:start="160:50" pos:end="160:60"><name pos:start="160:50" pos:end="160:60">PFLASH_OPTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="161:13" pos:end="161:38">case <expr pos:start="161:18" pos:end="161:37"><name pos:start="161:18" pos:end="161:37">QEMU_OPTION_snapshot</name></expr>:</case>
                <expr_stmt pos:start="162:17" pos:end="162:29"><expr pos:start="162:17" pos:end="162:28"><name pos:start="162:17" pos:end="162:24">snapshot</name> <operator pos:start="162:26" pos:end="162:26">=</operator> <literal type="number" pos:start="162:28" pos:end="162:28">1</literal></expr>;</expr_stmt>
            <case pos:start="163:13" pos:end="163:36">case <expr pos:start="163:18" pos:end="163:35"><name pos:start="163:18" pos:end="163:35">QEMU_OPTION_hdachs</name></expr>:</case>
                    <decl_stmt pos:start="164:21" pos:end="164:34"><decl pos:start="164:21" pos:end="164:33"><type pos:start="164:21" pos:end="164:32"><specifier pos:start="164:21" pos:end="164:25">const</specifier> <name pos:start="164:27" pos:end="164:30">char</name> <modifier pos:start="164:32" pos:end="164:32">*</modifier></type><name pos:start="164:33" pos:end="164:33">p</name></decl>;</decl_stmt>
                    <expr_stmt pos:start="165:21" pos:end="165:31"><expr pos:start="165:21" pos:end="165:30"><name pos:start="165:21" pos:end="165:21">p</name> <operator pos:start="165:23" pos:end="165:23">=</operator> <name pos:start="165:25" pos:end="165:30">optarg</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="166:21" pos:end="166:53"><expr pos:start="166:21" pos:end="166:52"><name pos:start="166:21" pos:end="166:24">cyls</name> <operator pos:start="166:26" pos:end="166:26">=</operator> <call pos:start="166:28" pos:end="166:52"><name pos:start="166:28" pos:end="166:33">strtol</name><argument_list pos:start="166:34" pos:end="166:52">(<argument pos:start="166:35" pos:end="166:35"><expr pos:start="166:35" pos:end="166:35"><name pos:start="166:35" pos:end="166:35">p</name></expr></argument>, <argument pos:start="166:38" pos:end="166:48"><expr pos:start="166:38" pos:end="166:48"><operator pos:start="166:38" pos:end="166:38">(</operator><name pos:start="166:39" pos:end="166:42">char</name> <operator pos:start="166:44" pos:end="166:44">*</operator><operator pos:start="166:45" pos:end="166:45">*</operator><operator pos:start="166:46" pos:end="166:46">)</operator><operator pos:start="166:47" pos:end="166:47">&amp;</operator><name pos:start="166:48" pos:end="166:48">p</name></expr></argument>, <argument pos:start="166:51" pos:end="166:51"><expr pos:start="166:51" pos:end="166:51"><literal type="number" pos:start="166:51" pos:end="166:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="167:21" pos:end="168:38"><if pos:start="167:21" pos:end="168:38">if <condition pos:start="167:24" pos:end="167:49">(<expr pos:start="167:25" pos:end="167:48"><name pos:start="167:25" pos:end="167:42"><name pos:start="167:25" pos:end="167:28">cyls</name> <argument_list type="generic" pos:start="167:30" pos:end="167:42">&lt; <argument pos:start="167:32" pos:end="167:40"><expr pos:start="167:32" pos:end="167:40"><literal type="number" pos:start="167:32" pos:end="167:32">1</literal> <operator pos:start="167:34" pos:end="167:35">||</operator> <name pos:start="167:37" pos:end="167:40">cyls</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="167:44" pos:end="167:48">16383</literal></expr>)</condition><block type="pseudo" pos:start="168:25" pos:end="168:38"><block_content pos:start="168:25" pos:end="168:38">
                        <goto pos:start="168:25" pos:end="168:38">goto <name pos:start="168:30" pos:end="168:37">chs_fail</name>;</goto></block_content></block></if></if_stmt>
                    <if_stmt pos:start="169:21" pos:end="170:38"><if pos:start="169:21" pos:end="170:38">if <condition pos:start="169:24" pos:end="169:34">(<expr pos:start="169:25" pos:end="169:33"><operator pos:start="169:25" pos:end="169:25">*</operator><name pos:start="169:26" pos:end="169:26">p</name> <operator pos:start="169:28" pos:end="169:29">!=</operator> <literal type="char" pos:start="169:31" pos:end="169:33">','</literal></expr>)</condition><block type="pseudo" pos:start="170:25" pos:end="170:38"><block_content pos:start="170:25" pos:end="170:38">
                        <goto pos:start="170:25" pos:end="170:38">goto <name pos:start="170:30" pos:end="170:37">chs_fail</name>;</goto></block_content></block></if></if_stmt>
                    <expr_stmt pos:start="171:21" pos:end="171:24"><expr pos:start="171:21" pos:end="171:23"><name pos:start="171:21" pos:end="171:21">p</name><operator pos:start="171:22" pos:end="171:23">++</operator></expr>;</expr_stmt>
                    <expr_stmt pos:start="172:21" pos:end="172:54"><expr pos:start="172:21" pos:end="172:53"><name pos:start="172:21" pos:end="172:25">heads</name> <operator pos:start="172:27" pos:end="172:27">=</operator> <call pos:start="172:29" pos:end="172:53"><name pos:start="172:29" pos:end="172:34">strtol</name><argument_list pos:start="172:35" pos:end="172:53">(<argument pos:start="172:36" pos:end="172:36"><expr pos:start="172:36" pos:end="172:36"><name pos:start="172:36" pos:end="172:36">p</name></expr></argument>, <argument pos:start="172:39" pos:end="172:49"><expr pos:start="172:39" pos:end="172:49"><operator pos:start="172:39" pos:end="172:39">(</operator><name pos:start="172:40" pos:end="172:43">char</name> <operator pos:start="172:45" pos:end="172:45">*</operator><operator pos:start="172:46" pos:end="172:46">*</operator><operator pos:start="172:47" pos:end="172:47">)</operator><operator pos:start="172:48" pos:end="172:48">&amp;</operator><name pos:start="172:49" pos:end="172:49">p</name></expr></argument>, <argument pos:start="172:52" pos:end="172:52"><expr pos:start="172:52" pos:end="172:52"><literal type="number" pos:start="172:52" pos:end="172:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="173:21" pos:end="174:38"><if pos:start="173:21" pos:end="174:38">if <condition pos:start="173:24" pos:end="173:48">(<expr pos:start="173:25" pos:end="173:47"><name pos:start="173:25" pos:end="173:44"><name pos:start="173:25" pos:end="173:29">heads</name> <argument_list type="generic" pos:start="173:31" pos:end="173:44">&lt; <argument pos:start="173:33" pos:end="173:42"><expr pos:start="173:33" pos:end="173:42"><literal type="number" pos:start="173:33" pos:end="173:33">1</literal> <operator pos:start="173:35" pos:end="173:36">||</operator> <name pos:start="173:38" pos:end="173:42">heads</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="173:46" pos:end="173:47">16</literal></expr>)</condition><block type="pseudo" pos:start="174:25" pos:end="174:38"><block_content pos:start="174:25" pos:end="174:38">
                        <goto pos:start="174:25" pos:end="174:38">goto <name pos:start="174:30" pos:end="174:37">chs_fail</name>;</goto></block_content></block></if></if_stmt>
                    <if_stmt pos:start="175:21" pos:end="176:38"><if pos:start="175:21" pos:end="176:38">if <condition pos:start="175:24" pos:end="175:34">(<expr pos:start="175:25" pos:end="175:33"><operator pos:start="175:25" pos:end="175:25">*</operator><name pos:start="175:26" pos:end="175:26">p</name> <operator pos:start="175:28" pos:end="175:29">!=</operator> <literal type="char" pos:start="175:31" pos:end="175:33">','</literal></expr>)</condition><block type="pseudo" pos:start="176:25" pos:end="176:38"><block_content pos:start="176:25" pos:end="176:38">
                        <goto pos:start="176:25" pos:end="176:38">goto <name pos:start="176:30" pos:end="176:37">chs_fail</name>;</goto></block_content></block></if></if_stmt>
                    <expr_stmt pos:start="177:21" pos:end="177:24"><expr pos:start="177:21" pos:end="177:23"><name pos:start="177:21" pos:end="177:21">p</name><operator pos:start="177:22" pos:end="177:23">++</operator></expr>;</expr_stmt>
                    <expr_stmt pos:start="178:21" pos:end="178:53"><expr pos:start="178:21" pos:end="178:52"><name pos:start="178:21" pos:end="178:24">secs</name> <operator pos:start="178:26" pos:end="178:26">=</operator> <call pos:start="178:28" pos:end="178:52"><name pos:start="178:28" pos:end="178:33">strtol</name><argument_list pos:start="178:34" pos:end="178:52">(<argument pos:start="178:35" pos:end="178:35"><expr pos:start="178:35" pos:end="178:35"><name pos:start="178:35" pos:end="178:35">p</name></expr></argument>, <argument pos:start="178:38" pos:end="178:48"><expr pos:start="178:38" pos:end="178:48"><operator pos:start="178:38" pos:end="178:38">(</operator><name pos:start="178:39" pos:end="178:42">char</name> <operator pos:start="178:44" pos:end="178:44">*</operator><operator pos:start="178:45" pos:end="178:45">*</operator><operator pos:start="178:46" pos:end="178:46">)</operator><operator pos:start="178:47" pos:end="178:47">&amp;</operator><name pos:start="178:48" pos:end="178:48">p</name></expr></argument>, <argument pos:start="178:51" pos:end="178:51"><expr pos:start="178:51" pos:end="178:51"><literal type="number" pos:start="178:51" pos:end="178:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="179:21" pos:end="180:38"><if pos:start="179:21" pos:end="180:38">if <condition pos:start="179:24" pos:end="179:46">(<expr pos:start="179:25" pos:end="179:45"><name pos:start="179:25" pos:end="179:42"><name pos:start="179:25" pos:end="179:28">secs</name> <argument_list type="generic" pos:start="179:30" pos:end="179:42">&lt; <argument pos:start="179:32" pos:end="179:40"><expr pos:start="179:32" pos:end="179:40"><literal type="number" pos:start="179:32" pos:end="179:32">1</literal> <operator pos:start="179:34" pos:end="179:35">||</operator> <name pos:start="179:37" pos:end="179:40">secs</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="179:44" pos:end="179:45">63</literal></expr>)</condition><block type="pseudo" pos:start="180:25" pos:end="180:38"><block_content pos:start="180:25" pos:end="180:38">
                        <goto pos:start="180:25" pos:end="180:38">goto <name pos:start="180:30" pos:end="180:37">chs_fail</name>;</goto></block_content></block></if></if_stmt>
                    <if_stmt pos:start="181:21" pos:end="1197:13"><if pos:start="181:21" pos:end="1197:13">if <condition pos:start="181:24" pos:end="181:34">(<expr pos:start="181:25" pos:end="181:33"><operator pos:start="181:25" pos:end="181:25">*</operator><name pos:start="181:26" pos:end="181:26">p</name> <operator pos:start="181:28" pos:end="181:29">==</operator> <literal type="char" pos:start="181:31" pos:end="181:33">','</literal></expr>)</condition> <block pos:start="181:36" pos:end="1197:13">{<block_content pos:start="182:25" pos:end="1197:13">
                        <expr_stmt pos:start="182:25" pos:end="182:28"><expr pos:start="182:25" pos:end="182:27"><name pos:start="182:25" pos:end="182:25">p</name><operator pos:start="182:26" pos:end="182:27">++</operator></expr>;</expr_stmt>
                        <if_stmt pos:start="183:25" pos:end="195:21"><if pos:start="183:25" pos:end="185:25">if <condition pos:start="183:28" pos:end="183:48">(<expr pos:start="183:29" pos:end="183:47"><operator pos:start="183:29" pos:end="183:29">!</operator><call pos:start="183:30" pos:end="183:47"><name pos:start="183:30" pos:end="183:35">strcmp</name><argument_list pos:start="183:36" pos:end="183:47">(<argument pos:start="183:37" pos:end="183:37"><expr pos:start="183:37" pos:end="183:37"><name pos:start="183:37" pos:end="183:37">p</name></expr></argument>, <argument pos:start="183:40" pos:end="183:46"><expr pos:start="183:40" pos:end="183:46"><literal type="string" pos:start="183:40" pos:end="183:46">"large"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="183:50" pos:end="185:25">{<block_content pos:start="184:29" pos:end="184:69">
                            <expr_stmt pos:start="184:29" pos:end="184:69"><expr pos:start="184:29" pos:end="184:68"><name pos:start="184:29" pos:end="184:39">translation</name> <operator pos:start="184:41" pos:end="184:41">=</operator> <name pos:start="184:43" pos:end="184:68">BIOS_ATA_TRANSLATION_LARGE</name></expr>;</expr_stmt>
                        </block_content>}</block></if> <if type="elseif" pos:start="185:27" pos:end="187:25">else if <condition pos:start="185:35" pos:end="185:55">(<expr pos:start="185:36" pos:end="185:54"><operator pos:start="185:36" pos:end="185:36">!</operator><call pos:start="185:37" pos:end="185:54"><name pos:start="185:37" pos:end="185:42">strcmp</name><argument_list pos:start="185:43" pos:end="185:54">(<argument pos:start="185:44" pos:end="185:44"><expr pos:start="185:44" pos:end="185:44"><name pos:start="185:44" pos:end="185:44">p</name></expr></argument>, <argument pos:start="185:47" pos:end="185:53"><expr pos:start="185:47" pos:end="185:53"><literal type="string" pos:start="185:47" pos:end="185:53">"rechs"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="185:57" pos:end="187:25">{<block_content pos:start="186:29" pos:end="186:69">
                            <expr_stmt pos:start="186:29" pos:end="186:69"><expr pos:start="186:29" pos:end="186:68"><name pos:start="186:29" pos:end="186:39">translation</name> <operator pos:start="186:41" pos:end="186:41">=</operator> <name pos:start="186:43" pos:end="186:68">BIOS_ATA_TRANSLATION_RECHS</name></expr>;</expr_stmt>
                        </block_content>}</block></if> <if type="elseif" pos:start="187:27" pos:end="189:25">else if <condition pos:start="187:35" pos:end="187:54">(<expr pos:start="187:36" pos:end="187:53"><operator pos:start="187:36" pos:end="187:36">!</operator><call pos:start="187:37" pos:end="187:53"><name pos:start="187:37" pos:end="187:42">strcmp</name><argument_list pos:start="187:43" pos:end="187:53">(<argument pos:start="187:44" pos:end="187:44"><expr pos:start="187:44" pos:end="187:44"><name pos:start="187:44" pos:end="187:44">p</name></expr></argument>, <argument pos:start="187:47" pos:end="187:52"><expr pos:start="187:47" pos:end="187:52"><literal type="string" pos:start="187:47" pos:end="187:52">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="187:56" pos:end="189:25">{<block_content pos:start="188:29" pos:end="188:68">
                            <expr_stmt pos:start="188:29" pos:end="188:68"><expr pos:start="188:29" pos:end="188:67"><name pos:start="188:29" pos:end="188:39">translation</name> <operator pos:start="188:41" pos:end="188:41">=</operator> <name pos:start="188:43" pos:end="188:67">BIOS_ATA_TRANSLATION_NONE</name></expr>;</expr_stmt>
                        </block_content>}</block></if> <if type="elseif" pos:start="189:27" pos:end="191:25">else if <condition pos:start="189:35" pos:end="189:53">(<expr pos:start="189:36" pos:end="189:52"><operator pos:start="189:36" pos:end="189:36">!</operator><call pos:start="189:37" pos:end="189:52"><name pos:start="189:37" pos:end="189:42">strcmp</name><argument_list pos:start="189:43" pos:end="189:52">(<argument pos:start="189:44" pos:end="189:44"><expr pos:start="189:44" pos:end="189:44"><name pos:start="189:44" pos:end="189:44">p</name></expr></argument>, <argument pos:start="189:47" pos:end="189:51"><expr pos:start="189:47" pos:end="189:51"><literal type="string" pos:start="189:47" pos:end="189:51">"lba"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="189:55" pos:end="191:25">{<block_content pos:start="190:29" pos:end="190:67">
                            <expr_stmt pos:start="190:29" pos:end="190:67"><expr pos:start="190:29" pos:end="190:66"><name pos:start="190:29" pos:end="190:39">translation</name> <operator pos:start="190:41" pos:end="190:41">=</operator> <name pos:start="190:43" pos:end="190:66">BIOS_ATA_TRANSLATION_LBA</name></expr>;</expr_stmt>
                        </block_content>}</block></if> <if type="elseif" pos:start="191:27" pos:end="193:25">else if <condition pos:start="191:35" pos:end="191:54">(<expr pos:start="191:36" pos:end="191:53"><operator pos:start="191:36" pos:end="191:36">!</operator><call pos:start="191:37" pos:end="191:53"><name pos:start="191:37" pos:end="191:42">strcmp</name><argument_list pos:start="191:43" pos:end="191:53">(<argument pos:start="191:44" pos:end="191:44"><expr pos:start="191:44" pos:end="191:44"><name pos:start="191:44" pos:end="191:44">p</name></expr></argument>, <argument pos:start="191:47" pos:end="191:52"><expr pos:start="191:47" pos:end="191:52"><literal type="string" pos:start="191:47" pos:end="191:52">"auto"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="191:56" pos:end="193:25">{<block_content pos:start="192:29" pos:end="192:68">
                            <expr_stmt pos:start="192:29" pos:end="192:68"><expr pos:start="192:29" pos:end="192:67"><name pos:start="192:29" pos:end="192:39">translation</name> <operator pos:start="192:41" pos:end="192:41">=</operator> <name pos:start="192:43" pos:end="192:67">BIOS_ATA_TRANSLATION_AUTO</name></expr>;</expr_stmt>
                        </block_content>}</block></if> <else pos:start="193:27" pos:end="195:21">else <block pos:start="193:32" pos:end="195:21">{<block_content pos:start="194:29" pos:end="194:42">
                            <goto pos:start="194:29" pos:end="194:42">goto <name pos:start="194:34" pos:end="194:41">chs_fail</name>;</goto>
                    </block_content>}</block></else></if_stmt> <if_stmt pos:start="195:23" pos:end="1197:13"><if type="elseif" pos:start="195:23" pos:end="1197:13">else if <condition pos:start="195:31" pos:end="195:42">(<expr pos:start="195:32" pos:end="195:41"><operator pos:start="195:32" pos:end="195:32">*</operator><name pos:start="195:33" pos:end="195:33">p</name> <operator pos:start="195:35" pos:end="195:36">!=</operator> <literal type="char" pos:start="195:38" pos:end="195:41">'\0'</literal></expr>)</condition> <block pos:start="195:44" pos:end="1197:13">{<block_content pos:start="196:21" pos:end="1197:13">
                    <label pos:start="196:21" pos:end="196:29"><name pos:start="196:21" pos:end="196:28">chs_fail</name>:</label>
                        <expr_stmt pos:start="197:25" pos:end="197:68"><expr pos:start="197:25" pos:end="197:67"><call pos:start="197:25" pos:end="197:67"><name pos:start="197:25" pos:end="197:36">error_report</name><argument_list pos:start="197:37" pos:end="197:67">(<argument pos:start="197:38" pos:end="197:66"><expr pos:start="197:38" pos:end="197:66"><literal type="string" pos:start="197:38" pos:end="197:66">"invalid physical CHS format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="198:21" pos:end="1197:13"><if pos:start="198:21" pos:end="1197:13">if <condition pos:start="198:24" pos:end="198:41">(<expr pos:start="198:25" pos:end="198:40"><name pos:start="198:25" pos:end="198:32">hda_opts</name> <operator pos:start="198:34" pos:end="198:35">!=</operator> <name pos:start="198:37" pos:end="198:40">NULL</name></expr>)</condition> <block pos:start="198:43" pos:end="1197:13">{<block_content pos:start="199:25" pos:end="1197:13">
                        <expr_stmt pos:start="199:25" pos:end="200:58"><expr pos:start="199:25" pos:end="200:57"><call pos:start="199:25" pos:end="200:57"><name pos:start="199:25" pos:end="199:43">qemu_opt_set_number</name><argument_list pos:start="199:44" pos:end="200:57">(<argument pos:start="199:45" pos:end="199:52"><expr pos:start="199:45" pos:end="199:52"><name pos:start="199:45" pos:end="199:52">hda_opts</name></expr></argument>, <argument pos:start="199:55" pos:end="199:60"><expr pos:start="199:55" pos:end="199:60"><literal type="string" pos:start="199:55" pos:end="199:60">"cyls"</literal></expr></argument>, <argument pos:start="199:63" pos:end="199:66"><expr pos:start="199:63" pos:end="199:66"><name pos:start="199:63" pos:end="199:66">cyls</name></expr></argument>,
                                            <argument pos:start="200:45" pos:end="200:56"><expr pos:start="200:45" pos:end="200:56"><operator pos:start="200:45" pos:end="200:45">&amp;</operator><name pos:start="200:46" pos:end="200:56">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="201:25" pos:end="202:58"><expr pos:start="201:25" pos:end="202:57"><call pos:start="201:25" pos:end="202:57"><name pos:start="201:25" pos:end="201:43">qemu_opt_set_number</name><argument_list pos:start="201:44" pos:end="202:57">(<argument pos:start="201:45" pos:end="201:52"><expr pos:start="201:45" pos:end="201:52"><name pos:start="201:45" pos:end="201:52">hda_opts</name></expr></argument>, <argument pos:start="201:55" pos:end="201:61"><expr pos:start="201:55" pos:end="201:61"><literal type="string" pos:start="201:55" pos:end="201:61">"heads"</literal></expr></argument>, <argument pos:start="201:64" pos:end="201:68"><expr pos:start="201:64" pos:end="201:68"><name pos:start="201:64" pos:end="201:68">heads</name></expr></argument>,
                                            <argument pos:start="202:45" pos:end="202:56"><expr pos:start="202:45" pos:end="202:56"><operator pos:start="202:45" pos:end="202:45">&amp;</operator><name pos:start="202:46" pos:end="202:56">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="203:25" pos:end="204:58"><expr pos:start="203:25" pos:end="204:57"><call pos:start="203:25" pos:end="204:57"><name pos:start="203:25" pos:end="203:43">qemu_opt_set_number</name><argument_list pos:start="203:44" pos:end="204:57">(<argument pos:start="203:45" pos:end="203:52"><expr pos:start="203:45" pos:end="203:52"><name pos:start="203:45" pos:end="203:52">hda_opts</name></expr></argument>, <argument pos:start="203:55" pos:end="203:60"><expr pos:start="203:55" pos:end="203:60"><literal type="string" pos:start="203:55" pos:end="203:60">"secs"</literal></expr></argument>, <argument pos:start="203:63" pos:end="203:66"><expr pos:start="203:63" pos:end="203:66"><name pos:start="203:63" pos:end="203:66">secs</name></expr></argument>,
                                            <argument pos:start="204:45" pos:end="204:56"><expr pos:start="204:45" pos:end="204:56"><operator pos:start="204:45" pos:end="204:45">&amp;</operator><name pos:start="204:46" pos:end="204:56">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt pos:start="205:25" pos:end="1197:13"><if pos:start="205:25" pos:end="208:25">if <condition pos:start="205:28" pos:end="205:70">(<expr pos:start="205:29" pos:end="205:69"><name pos:start="205:29" pos:end="205:39">translation</name> <operator pos:start="205:41" pos:end="205:42">==</operator> <name pos:start="205:44" pos:end="205:69">BIOS_ATA_TRANSLATION_LARGE</name></expr>)</condition> <block pos:start="205:72" pos:end="208:25">{<block_content pos:start="206:29" pos:end="207:55">
                            <expr_stmt pos:start="206:29" pos:end="207:55"><expr pos:start="206:29" pos:end="207:54"><call pos:start="206:29" pos:end="207:54"><name pos:start="206:29" pos:end="206:40">qemu_opt_set</name><argument_list pos:start="206:41" pos:end="207:54">(<argument pos:start="206:42" pos:end="206:49"><expr pos:start="206:42" pos:end="206:49"><name pos:start="206:42" pos:end="206:49">hda_opts</name></expr></argument>, <argument pos:start="206:52" pos:end="206:58"><expr pos:start="206:52" pos:end="206:58"><literal type="string" pos:start="206:52" pos:end="206:58">"trans"</literal></expr></argument>, <argument pos:start="206:61" pos:end="206:67"><expr pos:start="206:61" pos:end="206:67"><literal type="string" pos:start="206:61" pos:end="206:67">"large"</literal></expr></argument>,
                                         <argument pos:start="207:42" pos:end="207:53"><expr pos:start="207:42" pos:end="207:53"><operator pos:start="207:42" pos:end="207:42">&amp;</operator><name pos:start="207:43" pos:end="207:53">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if> <if type="elseif" pos:start="208:27" pos:end="211:25">else if <condition pos:start="208:35" pos:end="208:77">(<expr pos:start="208:36" pos:end="208:76"><name pos:start="208:36" pos:end="208:46">translation</name> <operator pos:start="208:48" pos:end="208:49">==</operator> <name pos:start="208:51" pos:end="208:76">BIOS_ATA_TRANSLATION_RECHS</name></expr>)</condition> <block pos:start="208:79" pos:end="211:25">{<block_content pos:start="209:29" pos:end="210:55">
                            <expr_stmt pos:start="209:29" pos:end="210:55"><expr pos:start="209:29" pos:end="210:54"><call pos:start="209:29" pos:end="210:54"><name pos:start="209:29" pos:end="209:40">qemu_opt_set</name><argument_list pos:start="209:41" pos:end="210:54">(<argument pos:start="209:42" pos:end="209:49"><expr pos:start="209:42" pos:end="209:49"><name pos:start="209:42" pos:end="209:49">hda_opts</name></expr></argument>, <argument pos:start="209:52" pos:end="209:58"><expr pos:start="209:52" pos:end="209:58"><literal type="string" pos:start="209:52" pos:end="209:58">"trans"</literal></expr></argument>, <argument pos:start="209:61" pos:end="209:67"><expr pos:start="209:61" pos:end="209:67"><literal type="string" pos:start="209:61" pos:end="209:67">"rechs"</literal></expr></argument>,
                                         <argument pos:start="210:42" pos:end="210:53"><expr pos:start="210:42" pos:end="210:53"><operator pos:start="210:42" pos:end="210:42">&amp;</operator><name pos:start="210:43" pos:end="210:53">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if> <if type="elseif" pos:start="211:27" pos:end="214:25">else if <condition pos:start="211:35" pos:end="211:75">(<expr pos:start="211:36" pos:end="211:74"><name pos:start="211:36" pos:end="211:46">translation</name> <operator pos:start="211:48" pos:end="211:49">==</operator> <name pos:start="211:51" pos:end="211:74">BIOS_ATA_TRANSLATION_LBA</name></expr>)</condition> <block pos:start="211:77" pos:end="214:25">{<block_content pos:start="212:29" pos:end="213:55">
                            <expr_stmt pos:start="212:29" pos:end="213:55"><expr pos:start="212:29" pos:end="213:54"><call pos:start="212:29" pos:end="213:54"><name pos:start="212:29" pos:end="212:40">qemu_opt_set</name><argument_list pos:start="212:41" pos:end="213:54">(<argument pos:start="212:42" pos:end="212:49"><expr pos:start="212:42" pos:end="212:49"><name pos:start="212:42" pos:end="212:49">hda_opts</name></expr></argument>, <argument pos:start="212:52" pos:end="212:58"><expr pos:start="212:52" pos:end="212:58"><literal type="string" pos:start="212:52" pos:end="212:58">"trans"</literal></expr></argument>, <argument pos:start="212:61" pos:end="212:65"><expr pos:start="212:61" pos:end="212:65"><literal type="string" pos:start="212:61" pos:end="212:65">"lba"</literal></expr></argument>,
                                         <argument pos:start="213:42" pos:end="213:53"><expr pos:start="213:42" pos:end="213:53"><operator pos:start="213:42" pos:end="213:42">&amp;</operator><name pos:start="213:43" pos:end="213:53">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if> <if type="elseif" pos:start="214:27" pos:end="1197:13">else if <condition pos:start="214:35" pos:end="214:76">(<expr pos:start="214:36" pos:end="214:75"><name pos:start="214:36" pos:end="214:46">translation</name> <operator pos:start="214:48" pos:end="214:49">==</operator> <name pos:start="214:51" pos:end="214:75">BIOS_ATA_TRANSLATION_NONE</name></expr>)</condition> <block pos:start="214:78" pos:end="1197:13">{<block_content pos:start="215:29" pos:end="1197:13">
                            <expr_stmt pos:start="215:29" pos:end="216:55"><expr pos:start="215:29" pos:end="216:54"><call pos:start="215:29" pos:end="216:54"><name pos:start="215:29" pos:end="215:40">qemu_opt_set</name><argument_list pos:start="215:41" pos:end="216:54">(<argument pos:start="215:42" pos:end="215:49"><expr pos:start="215:42" pos:end="215:49"><name pos:start="215:42" pos:end="215:49">hda_opts</name></expr></argument>, <argument pos:start="215:52" pos:end="215:58"><expr pos:start="215:52" pos:end="215:58"><literal type="string" pos:start="215:52" pos:end="215:58">"trans"</literal></expr></argument>, <argument pos:start="215:61" pos:end="215:66"><expr pos:start="215:61" pos:end="215:66"><literal type="string" pos:start="215:61" pos:end="215:66">"none"</literal></expr></argument>,
                                         <argument pos:start="216:42" pos:end="216:53"><expr pos:start="216:42" pos:end="216:53"><operator pos:start="216:42" pos:end="216:42">&amp;</operator><name pos:start="216:43" pos:end="216:53">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="217:13" pos:end="217:34">case <expr pos:start="217:18" pos:end="217:33"><name pos:start="217:18" pos:end="217:33">QEMU_OPTION_numa</name></expr>:</case>
                <expr_stmt pos:start="218:17" pos:end="219:61"><expr pos:start="218:17" pos:end="219:60"><name pos:start="218:17" pos:end="218:20">opts</name> <operator pos:start="218:22" pos:end="218:22">=</operator> <call pos:start="218:24" pos:end="219:60"><name pos:start="218:24" pos:end="218:46">qemu_opts_parse_noisily</name><argument_list pos:start="218:47" pos:end="219:60">(<argument pos:start="218:48" pos:end="218:69"><expr pos:start="218:48" pos:end="218:69"><call pos:start="218:48" pos:end="218:69"><name pos:start="218:48" pos:end="218:61">qemu_find_opts</name><argument_list pos:start="218:62" pos:end="218:69">(<argument pos:start="218:63" pos:end="218:68"><expr pos:start="218:63" pos:end="218:68"><literal type="string" pos:start="218:63" pos:end="218:68">"numa"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                               <argument pos:start="219:48" pos:end="219:53"><expr pos:start="219:48" pos:end="219:53"><name pos:start="219:48" pos:end="219:53">optarg</name></expr></argument>, <argument pos:start="219:56" pos:end="219:59"><expr pos:start="219:56" pos:end="219:59"><name pos:start="219:56" pos:end="219:59">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="220:17" pos:end="1197:13"><if pos:start="220:17" pos:end="1197:13">if <condition pos:start="220:20" pos:end="220:26">(<expr pos:start="220:21" pos:end="220:25"><operator pos:start="220:21" pos:end="220:21">!</operator><name pos:start="220:22" pos:end="220:25">opts</name></expr>)</condition> <block pos:start="220:28" pos:end="1197:13">{<block_content pos:start="221:13" pos:end="1197:13">
            <case pos:start="221:13" pos:end="221:37">case <expr pos:start="221:18" pos:end="221:36"><name pos:start="221:18" pos:end="221:36">QEMU_OPTION_display</name></expr>:</case>
                <expr_stmt pos:start="222:17" pos:end="222:54"><expr pos:start="222:17" pos:end="222:53"><name pos:start="222:17" pos:end="222:28">display_type</name> <operator pos:start="222:30" pos:end="222:30">=</operator> <call pos:start="222:32" pos:end="222:53"><name pos:start="222:32" pos:end="222:45">select_display</name><argument_list pos:start="222:46" pos:end="222:53">(<argument pos:start="222:47" pos:end="222:52"><expr pos:start="222:47" pos:end="222:52"><name pos:start="222:47" pos:end="222:52">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="223:13" pos:end="223:39">case <expr pos:start="223:18" pos:end="223:38"><name pos:start="223:18" pos:end="223:38">QEMU_OPTION_nographic</name></expr>:</case>
                <expr_stmt pos:start="224:17" pos:end="224:50"><expr pos:start="224:17" pos:end="224:49"><name pos:start="224:17" pos:end="224:21">olist</name> <operator pos:start="224:23" pos:end="224:23">=</operator> <call pos:start="224:25" pos:end="224:49"><name pos:start="224:25" pos:end="224:38">qemu_find_opts</name><argument_list pos:start="224:39" pos:end="224:49">(<argument pos:start="224:40" pos:end="224:48"><expr pos:start="224:40" pos:end="224:48"><literal type="string" pos:start="224:40" pos:end="224:48">"machine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="225:17" pos:end="225:70"><expr pos:start="225:17" pos:end="225:69"><call pos:start="225:17" pos:end="225:69"><name pos:start="225:17" pos:end="225:39">qemu_opts_parse_noisily</name><argument_list pos:start="225:40" pos:end="225:69">(<argument pos:start="225:41" pos:end="225:45"><expr pos:start="225:41" pos:end="225:45"><name pos:start="225:41" pos:end="225:45">olist</name></expr></argument>, <argument pos:start="225:48" pos:end="225:61"><expr pos:start="225:48" pos:end="225:61"><literal type="string" pos:start="225:48" pos:end="225:61">"graphics=off"</literal></expr></argument>, <argument pos:start="225:64" pos:end="225:68"><expr pos:start="225:64" pos:end="225:68"><name pos:start="225:64" pos:end="225:68">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="226:17" pos:end="226:33"><expr pos:start="226:17" pos:end="226:32"><name pos:start="226:17" pos:end="226:25">nographic</name> <operator pos:start="226:27" pos:end="226:27">=</operator> <name pos:start="226:29" pos:end="226:32">true</name></expr>;</expr_stmt>
                <expr_stmt pos:start="227:17" pos:end="227:39"><expr pos:start="227:17" pos:end="227:38"><name pos:start="227:17" pos:end="227:28">display_type</name> <operator pos:start="227:30" pos:end="227:30">=</operator> <name pos:start="227:32" pos:end="227:38">DT_NONE</name></expr>;</expr_stmt>
            <case pos:start="228:13" pos:end="230:0">case <expr pos:start="228:18" pos:end="228:35"><name pos:start="228:18" pos:end="228:35">QEMU_OPTION_curses</name></expr>:</case>
<cpp:ifdef pos:start="229:1" pos:end="229:20">#<cpp:directive pos:start="229:2" pos:end="229:6">ifdef</cpp:directive> <name pos:start="229:8" pos:end="229:20">CONFIG_CURSES</name></cpp:ifdef>
                <expr_stmt pos:start="230:17" pos:end="232:0"><expr pos:start="230:17" pos:end="230:40"><name pos:start="230:17" pos:end="230:28">display_type</name> <operator pos:start="230:30" pos:end="230:30">=</operator> <name pos:start="230:32" pos:end="230:40">DT_CURSES</name></expr>;</expr_stmt>
<cpp:else pos:start="231:1" pos:end="231:5">#<cpp:directive pos:start="231:2" pos:end="231:5">else</cpp:directive></cpp:else>
                <expr_stmt pos:start="232:17" pos:end="234:0"><expr pos:start="232:17" pos:end="232:58"><call pos:start="232:17" pos:end="232:58"><name pos:start="232:17" pos:end="232:28">error_report</name><argument_list pos:start="232:29" pos:end="232:58">(<argument pos:start="232:30" pos:end="232:57"><expr pos:start="232:30" pos:end="232:57"><literal type="string" pos:start="232:30" pos:end="232:57">"curses support is disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="233:1" pos:end="233:6">#<cpp:directive pos:start="233:2" pos:end="233:6">endif</cpp:directive></cpp:endif>
            <case pos:start="234:13" pos:end="234:38">case <expr pos:start="234:18" pos:end="234:37"><name pos:start="234:18" pos:end="234:37">QEMU_OPTION_portrait</name></expr>:</case>
                <expr_stmt pos:start="235:17" pos:end="235:36"><expr pos:start="235:17" pos:end="235:35"><name pos:start="235:17" pos:end="235:30">graphic_rotate</name> <operator pos:start="235:32" pos:end="235:32">=</operator> <literal type="number" pos:start="235:34" pos:end="235:35">90</literal></expr>;</expr_stmt>
            <case pos:start="236:13" pos:end="236:36">case <expr pos:start="236:18" pos:end="236:35"><name pos:start="236:18" pos:end="236:35">QEMU_OPTION_rotate</name></expr>:</case>
                <expr_stmt pos:start="237:17" pos:end="237:71"><expr pos:start="237:17" pos:end="237:70"><name pos:start="237:17" pos:end="237:30">graphic_rotate</name> <operator pos:start="237:32" pos:end="237:32">=</operator> <call pos:start="237:34" pos:end="237:70"><name pos:start="237:34" pos:end="237:39">strtol</name><argument_list pos:start="237:40" pos:end="237:70">(<argument pos:start="237:41" pos:end="237:46"><expr pos:start="237:41" pos:end="237:46"><name pos:start="237:41" pos:end="237:46">optarg</name></expr></argument>, <argument pos:start="237:49" pos:end="237:65"><expr pos:start="237:49" pos:end="237:65"><operator pos:start="237:49" pos:end="237:49">(</operator><name pos:start="237:50" pos:end="237:53">char</name> <operator pos:start="237:55" pos:end="237:55">*</operator><operator pos:start="237:56" pos:end="237:56">*</operator><operator pos:start="237:57" pos:end="237:57">)</operator> <operator pos:start="237:59" pos:end="237:59">&amp;</operator><name pos:start="237:60" pos:end="237:65">optarg</name></expr></argument>, <argument pos:start="237:68" pos:end="237:69"><expr pos:start="237:68" pos:end="237:69"><literal type="number" pos:start="237:68" pos:end="237:69">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="238:17" pos:end="1197:13"><if pos:start="238:17" pos:end="1197:13">if <condition pos:start="238:20" pos:end="239:67">(<expr pos:start="238:21" pos:end="239:66"><name pos:start="238:21" pos:end="238:34">graphic_rotate</name> <operator pos:start="238:36" pos:end="238:37">!=</operator> <literal type="number" pos:start="238:39" pos:end="238:39">0</literal> <operator pos:start="238:41" pos:end="238:42">&amp;&amp;</operator> <name pos:start="238:44" pos:end="238:57">graphic_rotate</name> <operator pos:start="238:59" pos:end="238:60">!=</operator> <literal type="number" pos:start="238:62" pos:end="238:63">90</literal> <operator pos:start="238:65" pos:end="238:66">&amp;&amp;</operator>
                    <name pos:start="239:21" pos:end="239:34">graphic_rotate</name> <operator pos:start="239:36" pos:end="239:37">!=</operator> <literal type="number" pos:start="239:39" pos:end="239:41">180</literal> <operator pos:start="239:43" pos:end="239:44">&amp;&amp;</operator> <name pos:start="239:46" pos:end="239:59">graphic_rotate</name> <operator pos:start="239:61" pos:end="239:62">!=</operator> <literal type="number" pos:start="239:64" pos:end="239:66">270</literal></expr>)</condition> <block pos:start="239:69" pos:end="1197:13">{<block_content pos:start="240:21" pos:end="1197:13">
                    <expr_stmt pos:start="240:21" pos:end="240:80"><expr pos:start="240:21" pos:end="240:79"><call pos:start="240:21" pos:end="240:79"><name pos:start="240:21" pos:end="240:32">error_report</name><argument_list pos:start="240:33" pos:end="240:79">(<argument pos:start="240:34" pos:end="240:78"><expr pos:start="240:34" pos:end="240:78"><literal type="string" pos:start="240:34" pos:end="240:78">"only 90, 180, 270 deg rotation is available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="241:13" pos:end="241:36">case <expr pos:start="241:18" pos:end="241:35"><name pos:start="241:18" pos:end="241:35">QEMU_OPTION_kernel</name></expr>:</case>
                <expr_stmt pos:start="242:17" pos:end="243:44"><expr pos:start="242:17" pos:end="243:43"><call pos:start="242:17" pos:end="243:43"><name pos:start="242:17" pos:end="242:29">qemu_opts_set</name><argument_list pos:start="242:30" pos:end="243:43">(<argument pos:start="242:31" pos:end="242:55"><expr pos:start="242:31" pos:end="242:55"><call pos:start="242:31" pos:end="242:55"><name pos:start="242:31" pos:end="242:44">qemu_find_opts</name><argument_list pos:start="242:45" pos:end="242:55">(<argument pos:start="242:46" pos:end="242:54"><expr pos:start="242:46" pos:end="242:54"><literal type="string" pos:start="242:46" pos:end="242:54">"machine"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="242:58" pos:end="242:58"><expr pos:start="242:58" pos:end="242:58"><literal type="number" pos:start="242:58" pos:end="242:58">0</literal></expr></argument>, <argument pos:start="242:61" pos:end="242:68"><expr pos:start="242:61" pos:end="242:68"><literal type="string" pos:start="242:61" pos:end="242:68">"kernel"</literal></expr></argument>, <argument pos:start="242:71" pos:end="242:76"><expr pos:start="242:71" pos:end="242:76"><name pos:start="242:71" pos:end="242:76">optarg</name></expr></argument>,
                              <argument pos:start="243:31" pos:end="243:42"><expr pos:start="243:31" pos:end="243:42"><operator pos:start="243:31" pos:end="243:31">&amp;</operator><name pos:start="243:32" pos:end="243:42">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="244:13" pos:end="244:36">case <expr pos:start="244:18" pos:end="244:35"><name pos:start="244:18" pos:end="244:35">QEMU_OPTION_initrd</name></expr>:</case>
                <expr_stmt pos:start="245:17" pos:end="246:44"><expr pos:start="245:17" pos:end="246:43"><call pos:start="245:17" pos:end="246:43"><name pos:start="245:17" pos:end="245:29">qemu_opts_set</name><argument_list pos:start="245:30" pos:end="246:43">(<argument pos:start="245:31" pos:end="245:55"><expr pos:start="245:31" pos:end="245:55"><call pos:start="245:31" pos:end="245:55"><name pos:start="245:31" pos:end="245:44">qemu_find_opts</name><argument_list pos:start="245:45" pos:end="245:55">(<argument pos:start="245:46" pos:end="245:54"><expr pos:start="245:46" pos:end="245:54"><literal type="string" pos:start="245:46" pos:end="245:54">"machine"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="245:58" pos:end="245:58"><expr pos:start="245:58" pos:end="245:58"><literal type="number" pos:start="245:58" pos:end="245:58">0</literal></expr></argument>, <argument pos:start="245:61" pos:end="245:68"><expr pos:start="245:61" pos:end="245:68"><literal type="string" pos:start="245:61" pos:end="245:68">"initrd"</literal></expr></argument>, <argument pos:start="245:71" pos:end="245:76"><expr pos:start="245:71" pos:end="245:76"><name pos:start="245:71" pos:end="245:76">optarg</name></expr></argument>,
                              <argument pos:start="246:31" pos:end="246:42"><expr pos:start="246:31" pos:end="246:42"><operator pos:start="246:31" pos:end="246:31">&amp;</operator><name pos:start="246:32" pos:end="246:42">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="247:13" pos:end="247:36">case <expr pos:start="247:18" pos:end="247:35"><name pos:start="247:18" pos:end="247:35">QEMU_OPTION_append</name></expr>:</case>
                <expr_stmt pos:start="248:17" pos:end="249:44"><expr pos:start="248:17" pos:end="249:43"><call pos:start="248:17" pos:end="249:43"><name pos:start="248:17" pos:end="248:29">qemu_opts_set</name><argument_list pos:start="248:30" pos:end="249:43">(<argument pos:start="248:31" pos:end="248:55"><expr pos:start="248:31" pos:end="248:55"><call pos:start="248:31" pos:end="248:55"><name pos:start="248:31" pos:end="248:44">qemu_find_opts</name><argument_list pos:start="248:45" pos:end="248:55">(<argument pos:start="248:46" pos:end="248:54"><expr pos:start="248:46" pos:end="248:54"><literal type="string" pos:start="248:46" pos:end="248:54">"machine"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="248:58" pos:end="248:58"><expr pos:start="248:58" pos:end="248:58"><literal type="number" pos:start="248:58" pos:end="248:58">0</literal></expr></argument>, <argument pos:start="248:61" pos:end="248:68"><expr pos:start="248:61" pos:end="248:68"><literal type="string" pos:start="248:61" pos:end="248:68">"append"</literal></expr></argument>, <argument pos:start="248:71" pos:end="248:76"><expr pos:start="248:71" pos:end="248:76"><name pos:start="248:71" pos:end="248:76">optarg</name></expr></argument>,
                              <argument pos:start="249:31" pos:end="249:42"><expr pos:start="249:31" pos:end="249:42"><operator pos:start="249:31" pos:end="249:31">&amp;</operator><name pos:start="249:32" pos:end="249:42">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="250:13" pos:end="250:33">case <expr pos:start="250:18" pos:end="250:32"><name pos:start="250:18" pos:end="250:32">QEMU_OPTION_dtb</name></expr>:</case>
                <expr_stmt pos:start="251:17" pos:end="252:44"><expr pos:start="251:17" pos:end="252:43"><call pos:start="251:17" pos:end="252:43"><name pos:start="251:17" pos:end="251:29">qemu_opts_set</name><argument_list pos:start="251:30" pos:end="252:43">(<argument pos:start="251:31" pos:end="251:55"><expr pos:start="251:31" pos:end="251:55"><call pos:start="251:31" pos:end="251:55"><name pos:start="251:31" pos:end="251:44">qemu_find_opts</name><argument_list pos:start="251:45" pos:end="251:55">(<argument pos:start="251:46" pos:end="251:54"><expr pos:start="251:46" pos:end="251:54"><literal type="string" pos:start="251:46" pos:end="251:54">"machine"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="251:58" pos:end="251:58"><expr pos:start="251:58" pos:end="251:58"><literal type="number" pos:start="251:58" pos:end="251:58">0</literal></expr></argument>, <argument pos:start="251:61" pos:end="251:65"><expr pos:start="251:61" pos:end="251:65"><literal type="string" pos:start="251:61" pos:end="251:65">"dtb"</literal></expr></argument>, <argument pos:start="251:68" pos:end="251:73"><expr pos:start="251:68" pos:end="251:73"><name pos:start="251:68" pos:end="251:73">optarg</name></expr></argument>,
                              <argument pos:start="252:31" pos:end="252:42"><expr pos:start="252:31" pos:end="252:42"><operator pos:start="252:31" pos:end="252:31">&amp;</operator><name pos:start="252:32" pos:end="252:42">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="253:13" pos:end="253:35">case <expr pos:start="253:18" pos:end="253:34"><name pos:start="253:18" pos:end="253:34">QEMU_OPTION_cdrom</name></expr>:</case>
                <expr_stmt pos:start="254:17" pos:end="254:61"><expr pos:start="254:17" pos:end="254:60"><call pos:start="254:17" pos:end="254:60"><name pos:start="254:17" pos:end="254:25">drive_add</name><argument_list pos:start="254:26" pos:end="254:60">(<argument pos:start="254:27" pos:end="254:36"><expr pos:start="254:27" pos:end="254:36"><name pos:start="254:27" pos:end="254:36">IF_DEFAULT</name></expr></argument>, <argument pos:start="254:39" pos:end="254:39"><expr pos:start="254:39" pos:end="254:39"><literal type="number" pos:start="254:39" pos:end="254:39">2</literal></expr></argument>, <argument pos:start="254:42" pos:end="254:47"><expr pos:start="254:42" pos:end="254:47"><name pos:start="254:42" pos:end="254:47">optarg</name></expr></argument>, <argument pos:start="254:50" pos:end="254:59"><expr pos:start="254:50" pos:end="254:59"><name pos:start="254:50" pos:end="254:59">CDROM_OPTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="255:13" pos:end="255:34">case <expr pos:start="255:18" pos:end="255:33"><name pos:start="255:18" pos:end="255:33">QEMU_OPTION_boot</name></expr>:</case>
                <expr_stmt pos:start="256:17" pos:end="257:61"><expr pos:start="256:17" pos:end="257:60"><name pos:start="256:17" pos:end="256:20">opts</name> <operator pos:start="256:22" pos:end="256:22">=</operator> <call pos:start="256:24" pos:end="257:60"><name pos:start="256:24" pos:end="256:46">qemu_opts_parse_noisily</name><argument_list pos:start="256:47" pos:end="257:60">(<argument pos:start="256:48" pos:end="256:74"><expr pos:start="256:48" pos:end="256:74"><call pos:start="256:48" pos:end="256:74"><name pos:start="256:48" pos:end="256:61">qemu_find_opts</name><argument_list pos:start="256:62" pos:end="256:74">(<argument pos:start="256:63" pos:end="256:73"><expr pos:start="256:63" pos:end="256:73"><literal type="string" pos:start="256:63" pos:end="256:73">"boot-opts"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                               <argument pos:start="257:48" pos:end="257:53"><expr pos:start="257:48" pos:end="257:53"><name pos:start="257:48" pos:end="257:53">optarg</name></expr></argument>, <argument pos:start="257:56" pos:end="257:59"><expr pos:start="257:56" pos:end="257:59"><name pos:start="257:56" pos:end="257:59">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="258:17" pos:end="1197:13"><if pos:start="258:17" pos:end="1197:13">if <condition pos:start="258:20" pos:end="258:26">(<expr pos:start="258:21" pos:end="258:25"><operator pos:start="258:21" pos:end="258:21">!</operator><name pos:start="258:22" pos:end="258:25">opts</name></expr>)</condition> <block pos:start="258:28" pos:end="1197:13">{<block_content pos:start="259:13" pos:end="1197:13">
            <case pos:start="259:13" pos:end="259:33">case <expr pos:start="259:18" pos:end="259:32"><name pos:start="259:18" pos:end="259:32">QEMU_OPTION_fda</name></expr>:</case>
            <case pos:start="260:13" pos:end="260:33">case <expr pos:start="260:18" pos:end="260:32"><name pos:start="260:18" pos:end="260:32">QEMU_OPTION_fdb</name></expr>:</case>
                <expr_stmt pos:start="261:17" pos:end="262:43"><expr pos:start="261:17" pos:end="262:42"><call pos:start="261:17" pos:end="262:42"><name pos:start="261:17" pos:end="261:25">drive_add</name><argument_list pos:start="261:26" pos:end="262:42">(<argument pos:start="261:27" pos:end="261:35"><expr pos:start="261:27" pos:end="261:35"><name pos:start="261:27" pos:end="261:35">IF_FLOPPY</name></expr></argument>, <argument pos:start="261:38" pos:end="261:66"><expr pos:start="261:38" pos:end="261:66"><name pos:start="261:38" pos:end="261:48"><name pos:start="261:38" pos:end="261:41">popt</name><operator pos:start="261:42" pos:end="261:43">-&gt;</operator><name pos:start="261:44" pos:end="261:48">index</name></name> <operator pos:start="261:50" pos:end="261:50">-</operator> <name pos:start="261:52" pos:end="261:66">QEMU_OPTION_fda</name></expr></argument>,
                          <argument pos:start="262:27" pos:end="262:32"><expr pos:start="262:27" pos:end="262:32"><name pos:start="262:27" pos:end="262:32">optarg</name></expr></argument>, <argument pos:start="262:35" pos:end="262:41"><expr pos:start="262:35" pos:end="262:41"><name pos:start="262:35" pos:end="262:41">FD_OPTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="263:13" pos:end="263:43">case <expr pos:start="263:18" pos:end="263:42"><name pos:start="263:18" pos:end="263:42">QEMU_OPTION_no_fd_bootchk</name></expr>:</case>
                <expr_stmt pos:start="264:17" pos:end="264:31"><expr pos:start="264:17" pos:end="264:30"><name pos:start="264:17" pos:end="264:26">fd_bootchk</name> <operator pos:start="264:28" pos:end="264:28">=</operator> <literal type="number" pos:start="264:30" pos:end="264:30">0</literal></expr>;</expr_stmt>
            <case pos:start="265:13" pos:end="265:36">case <expr pos:start="265:18" pos:end="265:35"><name pos:start="265:18" pos:end="265:35">QEMU_OPTION_netdev</name></expr>:</case>
                <expr_stmt pos:start="266:17" pos:end="266:32"><expr pos:start="266:17" pos:end="266:31"><name pos:start="266:17" pos:end="266:27">default_net</name> <operator pos:start="266:29" pos:end="266:29">=</operator> <literal type="number" pos:start="266:31" pos:end="266:31">0</literal></expr>;</expr_stmt>
                <if_stmt pos:start="267:17" pos:end="1197:13"><if pos:start="267:17" pos:end="1197:13">if <condition pos:start="267:20" pos:end="267:77">(<expr pos:start="267:21" pos:end="267:76"><call pos:start="267:21" pos:end="267:70"><name pos:start="267:21" pos:end="267:36">net_client_parse</name><argument_list pos:start="267:37" pos:end="267:70">(<argument pos:start="267:38" pos:end="267:61"><expr pos:start="267:38" pos:end="267:61"><call pos:start="267:38" pos:end="267:61"><name pos:start="267:38" pos:end="267:51">qemu_find_opts</name><argument_list pos:start="267:52" pos:end="267:61">(<argument pos:start="267:53" pos:end="267:60"><expr pos:start="267:53" pos:end="267:60"><literal type="string" pos:start="267:53" pos:end="267:60">"netdev"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="267:64" pos:end="267:69"><expr pos:start="267:64" pos:end="267:69"><name pos:start="267:64" pos:end="267:69">optarg</name></expr></argument>)</argument_list></call> <operator pos:start="267:72" pos:end="267:73">==</operator> <operator pos:start="267:75" pos:end="267:75">-</operator><literal type="number" pos:start="267:76" pos:end="267:76">1</literal></expr>)</condition> <block pos:start="267:79" pos:end="1197:13">{<block_content pos:start="268:13" pos:end="1197:13">
            <case pos:start="268:13" pos:end="268:33">case <expr pos:start="268:18" pos:end="268:32"><name pos:start="268:18" pos:end="268:32">QEMU_OPTION_net</name></expr>:</case>
                <expr_stmt pos:start="269:17" pos:end="269:32"><expr pos:start="269:17" pos:end="269:31"><name pos:start="269:17" pos:end="269:27">default_net</name> <operator pos:start="269:29" pos:end="269:29">=</operator> <literal type="number" pos:start="269:31" pos:end="269:31">0</literal></expr>;</expr_stmt>
                <if_stmt pos:start="270:17" pos:end="1197:13"><if pos:start="270:17" pos:end="1197:13">if <condition pos:start="270:20" pos:end="270:74">(<expr pos:start="270:21" pos:end="270:73"><call pos:start="270:21" pos:end="270:67"><name pos:start="270:21" pos:end="270:36">net_client_parse</name><argument_list pos:start="270:37" pos:end="270:67">(<argument pos:start="270:38" pos:end="270:58"><expr pos:start="270:38" pos:end="270:58"><call pos:start="270:38" pos:end="270:58"><name pos:start="270:38" pos:end="270:51">qemu_find_opts</name><argument_list pos:start="270:52" pos:end="270:58">(<argument pos:start="270:53" pos:end="270:57"><expr pos:start="270:53" pos:end="270:57"><literal type="string" pos:start="270:53" pos:end="270:57">"net"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="270:61" pos:end="270:66"><expr pos:start="270:61" pos:end="270:66"><name pos:start="270:61" pos:end="270:66">optarg</name></expr></argument>)</argument_list></call> <operator pos:start="270:69" pos:end="270:70">==</operator> <operator pos:start="270:72" pos:end="270:72">-</operator><literal type="number" pos:start="270:73" pos:end="270:73">1</literal></expr>)</condition> <block pos:start="270:76" pos:end="1197:13">{<block_content pos:start="272:13" pos:end="1197:13">
<cpp:ifdef pos:start="271:1" pos:end="271:22">#<cpp:directive pos:start="271:2" pos:end="271:6">ifdef</cpp:directive> <name pos:start="271:8" pos:end="271:22">CONFIG_LIBISCSI</name></cpp:ifdef>
            <case pos:start="272:13" pos:end="272:35">case <expr pos:start="272:18" pos:end="272:34"><name pos:start="272:18" pos:end="272:34">QEMU_OPTION_iscsi</name></expr>:</case>
                <expr_stmt pos:start="273:17" pos:end="274:62"><expr pos:start="273:17" pos:end="274:61"><name pos:start="273:17" pos:end="273:20">opts</name> <operator pos:start="273:22" pos:end="273:22">=</operator> <call pos:start="273:24" pos:end="274:61"><name pos:start="273:24" pos:end="273:46">qemu_opts_parse_noisily</name><argument_list pos:start="273:47" pos:end="274:61">(<argument pos:start="273:48" pos:end="273:70"><expr pos:start="273:48" pos:end="273:70"><call pos:start="273:48" pos:end="273:70"><name pos:start="273:48" pos:end="273:61">qemu_find_opts</name><argument_list pos:start="273:62" pos:end="273:70">(<argument pos:start="273:63" pos:end="273:69"><expr pos:start="273:63" pos:end="273:69"><literal type="string" pos:start="273:63" pos:end="273:69">"iscsi"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                               <argument pos:start="274:48" pos:end="274:53"><expr pos:start="274:48" pos:end="274:53"><name pos:start="274:48" pos:end="274:53">optarg</name></expr></argument>, <argument pos:start="274:56" pos:end="274:60"><expr pos:start="274:56" pos:end="274:60"><name pos:start="274:56" pos:end="274:60">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="275:17" pos:end="1197:13"><if pos:start="275:17" pos:end="1197:13">if <condition pos:start="275:20" pos:end="275:26">(<expr pos:start="275:21" pos:end="275:25"><operator pos:start="275:21" pos:end="275:21">!</operator><name pos:start="275:22" pos:end="275:25">opts</name></expr>)</condition> <block pos:start="275:28" pos:end="1197:13">{<block_content pos:start="278:13" pos:end="1197:13">
<cpp:endif pos:start="276:1" pos:end="276:6">#<cpp:directive pos:start="276:2" pos:end="276:6">endif</cpp:directive></cpp:endif>
<cpp:ifdef pos:start="277:1" pos:end="277:19">#<cpp:directive pos:start="277:2" pos:end="277:6">ifdef</cpp:directive> <name pos:start="277:8" pos:end="277:19">CONFIG_SLIRP</name></cpp:ifdef>
            <case pos:start="278:13" pos:end="278:34">case <expr pos:start="278:18" pos:end="278:33"><name pos:start="278:18" pos:end="278:33">QEMU_OPTION_tftp</name></expr>:</case>
                <expr_stmt pos:start="279:17" pos:end="280:76"><expr pos:start="279:17" pos:end="280:75"><call pos:start="279:17" pos:end="280:75"><name pos:start="279:17" pos:end="279:28">error_report</name><argument_list pos:start="279:29" pos:end="280:75">(<argument pos:start="279:30" pos:end="280:74"><expr pos:start="279:30" pos:end="280:74"><literal type="string" pos:start="279:30" pos:end="279:63">"The -tftp option is deprecated. "</literal>
                             <literal type="string" pos:start="280:30" pos:end="280:74">"Please use '-netdev user,tftp=...' instead."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="281:17" pos:end="281:44"><expr pos:start="281:17" pos:end="281:43"><name pos:start="281:17" pos:end="281:34">legacy_tftp_prefix</name> <operator pos:start="281:36" pos:end="281:36">=</operator> <name pos:start="281:38" pos:end="281:43">optarg</name></expr>;</expr_stmt>
            <case pos:start="282:13" pos:end="282:35">case <expr pos:start="282:18" pos:end="282:34"><name pos:start="282:18" pos:end="282:34">QEMU_OPTION_bootp</name></expr>:</case>
                <expr_stmt pos:start="283:17" pos:end="284:80"><expr pos:start="283:17" pos:end="284:79"><call pos:start="283:17" pos:end="284:79"><name pos:start="283:17" pos:end="283:28">error_report</name><argument_list pos:start="283:29" pos:end="284:79">(<argument pos:start="283:30" pos:end="284:78"><expr pos:start="283:30" pos:end="284:78"><literal type="string" pos:start="283:30" pos:end="283:64">"The -bootp option is deprecated. "</literal>
                             <literal type="string" pos:start="284:30" pos:end="284:78">"Please use '-netdev user,bootfile=...' instead."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="285:17" pos:end="285:47"><expr pos:start="285:17" pos:end="285:46"><name pos:start="285:17" pos:end="285:37">legacy_bootp_filename</name> <operator pos:start="285:39" pos:end="285:39">=</operator> <name pos:start="285:41" pos:end="285:46">optarg</name></expr>;</expr_stmt>
            <case pos:start="286:13" pos:end="286:35">case <expr pos:start="286:18" pos:end="286:34"><name pos:start="286:18" pos:end="286:34">QEMU_OPTION_redir</name></expr>:</case>
                <expr_stmt pos:start="287:17" pos:end="288:79"><expr pos:start="287:17" pos:end="288:78"><call pos:start="287:17" pos:end="288:78"><name pos:start="287:17" pos:end="287:28">error_report</name><argument_list pos:start="287:29" pos:end="288:78">(<argument pos:start="287:30" pos:end="288:77"><expr pos:start="287:30" pos:end="288:77"><literal type="string" pos:start="287:30" pos:end="287:64">"The -redir option is deprecated. "</literal>
                             <literal type="string" pos:start="288:30" pos:end="288:77">"Please use '-netdev user,hostfwd=...' instead."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="289:17" pos:end="292:50"><if pos:start="289:17" pos:end="292:50">if <condition pos:start="289:20" pos:end="291:0">(<expr pos:start="289:21" pos:end="289:47"><call pos:start="289:21" pos:end="289:43"><name pos:start="289:21" pos:end="289:35">net_slirp_redir</name><argument_list pos:start="289:36" pos:end="289:43">(<argument pos:start="289:37" pos:end="289:42"><expr pos:start="289:37" pos:end="289:42"><name pos:start="289:37" pos:end="289:42">optarg</name></expr></argument>)</argument_list></call> <operator pos:start="289:45" pos:end="289:45">&lt;</operator> <literal type="number" pos:start="289:47" pos:end="289:47">0</literal></expr>)</condition><block type="pseudo" pos:start="291:13" pos:end="292:50"><block_content pos:start="291:13" pos:end="292:50">
<cpp:endif pos:start="290:1" pos:end="290:6">#<cpp:directive pos:start="290:2" pos:end="290:6">endif</cpp:directive></cpp:endif>
            <case pos:start="291:13" pos:end="291:32">case <expr pos:start="291:18" pos:end="291:31"><name pos:start="291:18" pos:end="291:31">QEMU_OPTION_bt</name></expr>:</case>
                <expr_stmt pos:start="292:17" pos:end="292:50"><expr pos:start="292:17" pos:end="292:49"><call pos:start="292:17" pos:end="292:49"><name pos:start="292:17" pos:end="292:33">add_device_config</name><argument_list pos:start="292:34" pos:end="292:49">(<argument pos:start="292:35" pos:end="292:40"><expr pos:start="292:35" pos:end="292:40"><name pos:start="292:35" pos:end="292:40">DEV_BT</name></expr></argument>, <argument pos:start="292:43" pos:end="292:48"><expr pos:start="292:43" pos:end="292:48"><name pos:start="292:43" pos:end="292:48">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <case pos:start="293:13" pos:end="293:40">case <expr pos:start="293:18" pos:end="293:39"><name pos:start="293:18" pos:end="293:39">QEMU_OPTION_audio_help</name></expr>:</case>
                <expr_stmt pos:start="294:17" pos:end="294:28"><expr pos:start="294:17" pos:end="294:27"><call pos:start="294:17" pos:end="294:27"><name pos:start="294:17" pos:end="294:24">AUD_help</name> <argument_list pos:start="294:26" pos:end="294:27">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="295:17" pos:end="295:25"><expr pos:start="295:17" pos:end="295:24"><call pos:start="295:17" pos:end="295:24"><name pos:start="295:17" pos:end="295:20">exit</name> <argument_list pos:start="295:22" pos:end="295:24">(<argument pos:start="295:23" pos:end="295:23"><expr pos:start="295:23" pos:end="295:23"><literal type="number" pos:start="295:23" pos:end="295:23">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="296:13" pos:end="296:37">case <expr pos:start="296:18" pos:end="296:36"><name pos:start="296:18" pos:end="296:36">QEMU_OPTION_soundhw</name></expr>:</case>
                <expr_stmt pos:start="297:17" pos:end="297:40"><expr pos:start="297:17" pos:end="297:39"><call pos:start="297:17" pos:end="297:39"><name pos:start="297:17" pos:end="297:30">select_soundhw</name> <argument_list pos:start="297:32" pos:end="297:39">(<argument pos:start="297:33" pos:end="297:38"><expr pos:start="297:33" pos:end="297:38"><name pos:start="297:33" pos:end="297:38">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="298:13" pos:end="298:31">case <expr pos:start="298:18" pos:end="298:30"><name pos:start="298:18" pos:end="298:30">QEMU_OPTION_h</name></expr>:</case>
                <expr_stmt pos:start="299:17" pos:end="299:24"><expr pos:start="299:17" pos:end="299:23"><call pos:start="299:17" pos:end="299:23"><name pos:start="299:17" pos:end="299:20">help</name><argument_list pos:start="299:21" pos:end="299:23">(<argument pos:start="299:22" pos:end="299:22"><expr pos:start="299:22" pos:end="299:22"><literal type="number" pos:start="299:22" pos:end="299:22">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="300:13" pos:end="300:37">case <expr pos:start="300:18" pos:end="300:36"><name pos:start="300:18" pos:end="300:36">QEMU_OPTION_version</name></expr>:</case>
                <expr_stmt pos:start="301:17" pos:end="301:26"><expr pos:start="301:17" pos:end="301:25"><call pos:start="301:17" pos:end="301:25"><name pos:start="301:17" pos:end="301:23">version</name><argument_list pos:start="301:24" pos:end="301:25">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="302:17" pos:end="302:24"><expr pos:start="302:17" pos:end="302:23"><call pos:start="302:17" pos:end="302:23"><name pos:start="302:17" pos:end="302:20">exit</name><argument_list pos:start="302:21" pos:end="302:23">(<argument pos:start="302:22" pos:end="302:22"><expr pos:start="302:22" pos:end="302:22"><literal type="number" pos:start="302:22" pos:end="302:22">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="303:13" pos:end="303:31">case <expr pos:start="303:18" pos:end="303:30"><name pos:start="303:18" pos:end="303:30">QEMU_OPTION_m</name></expr>:</case>
                <expr_stmt pos:start="304:17" pos:end="305:61"><expr pos:start="304:17" pos:end="305:60"><name pos:start="304:17" pos:end="304:20">opts</name> <operator pos:start="304:22" pos:end="304:22">=</operator> <call pos:start="304:24" pos:end="305:60"><name pos:start="304:24" pos:end="304:46">qemu_opts_parse_noisily</name><argument_list pos:start="304:47" pos:end="305:60">(<argument pos:start="304:48" pos:end="304:71"><expr pos:start="304:48" pos:end="304:71"><call pos:start="304:48" pos:end="304:71"><name pos:start="304:48" pos:end="304:61">qemu_find_opts</name><argument_list pos:start="304:62" pos:end="304:71">(<argument pos:start="304:63" pos:end="304:70"><expr pos:start="304:63" pos:end="304:70"><literal type="string" pos:start="304:63" pos:end="304:70">"memory"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                               <argument pos:start="305:48" pos:end="305:53"><expr pos:start="305:48" pos:end="305:53"><name pos:start="305:48" pos:end="305:53">optarg</name></expr></argument>, <argument pos:start="305:56" pos:end="305:59"><expr pos:start="305:56" pos:end="305:59"><name pos:start="305:56" pos:end="305:59">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="306:17" pos:end="1197:13"><if pos:start="306:17" pos:end="1197:13">if <condition pos:start="306:20" pos:end="306:26">(<expr pos:start="306:21" pos:end="306:25"><operator pos:start="306:21" pos:end="306:21">!</operator><name pos:start="306:22" pos:end="306:25">opts</name></expr>)</condition> <block pos:start="306:28" pos:end="1197:13">{<block_content pos:start="307:21" pos:end="1197:13">
                    <expr_stmt pos:start="307:21" pos:end="309:0"><expr pos:start="307:21" pos:end="307:38"><call pos:start="307:21" pos:end="307:38"><name pos:start="307:21" pos:end="307:24">exit</name><argument_list pos:start="307:25" pos:end="307:38">(<argument pos:start="307:26" pos:end="307:37"><expr pos:start="307:26" pos:end="307:37"><name pos:start="307:26" pos:end="307:37">EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="308:1" pos:end="308:17">#<cpp:directive pos:start="308:2" pos:end="308:6">ifdef</cpp:directive> <name pos:start="308:8" pos:end="308:17">CONFIG_TPM</name></cpp:ifdef>
            <case pos:start="309:13" pos:end="309:36">case <expr pos:start="309:18" pos:end="309:35"><name pos:start="309:18" pos:end="309:35">QEMU_OPTION_tpmdev</name></expr>:</case>
                <if_stmt pos:start="310:17" pos:end="1197:13"><if pos:start="310:17" pos:end="1197:13">if <condition pos:start="310:20" pos:end="310:75">(<expr pos:start="310:21" pos:end="310:74"><call pos:start="310:21" pos:end="310:70"><name pos:start="310:21" pos:end="310:36">tpm_config_parse</name><argument_list pos:start="310:37" pos:end="310:70">(<argument pos:start="310:38" pos:end="310:61"><expr pos:start="310:38" pos:end="310:61"><call pos:start="310:38" pos:end="310:61"><name pos:start="310:38" pos:end="310:51">qemu_find_opts</name><argument_list pos:start="310:52" pos:end="310:61">(<argument pos:start="310:53" pos:end="310:60"><expr pos:start="310:53" pos:end="310:60"><literal type="string" pos:start="310:53" pos:end="310:60">"tpmdev"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="310:64" pos:end="310:69"><expr pos:start="310:64" pos:end="310:69"><name pos:start="310:64" pos:end="310:69">optarg</name></expr></argument>)</argument_list></call> <operator pos:start="310:72" pos:end="310:72">&lt;</operator> <literal type="number" pos:start="310:74" pos:end="310:74">0</literal></expr>)</condition> <block pos:start="310:77" pos:end="1197:13">{<block_content pos:start="312:13" pos:end="1197:13">
<cpp:endif pos:start="311:1" pos:end="311:6">#<cpp:directive pos:start="311:2" pos:end="311:6">endif</cpp:directive></cpp:endif>
            <case pos:start="312:13" pos:end="312:37">case <expr pos:start="312:18" pos:end="312:36"><name pos:start="312:18" pos:end="312:36">QEMU_OPTION_mempath</name></expr>:</case>
                <expr_stmt pos:start="313:17" pos:end="313:34"><expr pos:start="313:17" pos:end="313:33"><name pos:start="313:17" pos:end="313:24">mem_path</name> <operator pos:start="313:26" pos:end="313:26">=</operator> <name pos:start="313:28" pos:end="313:33">optarg</name></expr>;</expr_stmt>
            <case pos:start="314:13" pos:end="314:42">case <expr pos:start="314:18" pos:end="314:41"><name pos:start="314:18" pos:end="314:41">QEMU_OPTION_mem_prealloc</name></expr>:</case>
                <expr_stmt pos:start="315:17" pos:end="315:33"><expr pos:start="315:17" pos:end="315:32"><name pos:start="315:17" pos:end="315:28">mem_prealloc</name> <operator pos:start="315:30" pos:end="315:30">=</operator> <literal type="number" pos:start="315:32" pos:end="315:32">1</literal></expr>;</expr_stmt>
            <case pos:start="316:13" pos:end="316:31">case <expr pos:start="316:18" pos:end="316:30"><name pos:start="316:18" pos:end="316:30">QEMU_OPTION_d</name></expr>:</case>
                <expr_stmt pos:start="317:17" pos:end="317:34"><expr pos:start="317:17" pos:end="317:33"><name pos:start="317:17" pos:end="317:24">log_mask</name> <operator pos:start="317:26" pos:end="317:26">=</operator> <name pos:start="317:28" pos:end="317:33">optarg</name></expr>;</expr_stmt>
            <case pos:start="318:13" pos:end="318:31">case <expr pos:start="318:18" pos:end="318:30"><name pos:start="318:18" pos:end="318:30">QEMU_OPTION_D</name></expr>:</case>
                <expr_stmt pos:start="319:17" pos:end="319:34"><expr pos:start="319:17" pos:end="319:33"><name pos:start="319:17" pos:end="319:24">log_file</name> <operator pos:start="319:26" pos:end="319:26">=</operator> <name pos:start="319:28" pos:end="319:33">optarg</name></expr>;</expr_stmt>
            <case pos:start="320:13" pos:end="320:37">case <expr pos:start="320:18" pos:end="320:36"><name pos:start="320:18" pos:end="320:36">QEMU_OPTION_DFILTER</name></expr>:</case>
                <expr_stmt pos:start="321:17" pos:end="321:62"><expr pos:start="321:17" pos:end="321:61"><call pos:start="321:17" pos:end="321:61"><name pos:start="321:17" pos:end="321:39">qemu_set_dfilter_ranges</name><argument_list pos:start="321:40" pos:end="321:61">(<argument pos:start="321:41" pos:end="321:46"><expr pos:start="321:41" pos:end="321:46"><name pos:start="321:41" pos:end="321:46">optarg</name></expr></argument>, <argument pos:start="321:49" pos:end="321:60"><expr pos:start="321:49" pos:end="321:60"><operator pos:start="321:49" pos:end="321:49">&amp;</operator><name pos:start="321:50" pos:end="321:60">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="322:13" pos:end="322:31">case <expr pos:start="322:18" pos:end="322:30"><name pos:start="322:18" pos:end="322:30">QEMU_OPTION_s</name></expr>:</case>
                <expr_stmt pos:start="323:17" pos:end="323:73"><expr pos:start="323:17" pos:end="323:72"><call pos:start="323:17" pos:end="323:72"><name pos:start="323:17" pos:end="323:33">add_device_config</name><argument_list pos:start="323:34" pos:end="323:72">(<argument pos:start="323:35" pos:end="323:41"><expr pos:start="323:35" pos:end="323:41"><name pos:start="323:35" pos:end="323:41">DEV_GDB</name></expr></argument>, <argument pos:start="323:44" pos:end="323:71"><expr pos:start="323:44" pos:end="323:71"><literal type="string" pos:start="323:44" pos:end="323:50">"tcp::"</literal> <name pos:start="323:52" pos:end="323:71">DEFAULT_GDBSTUB_PORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="324:13" pos:end="324:33">case <expr pos:start="324:18" pos:end="324:32"><name pos:start="324:18" pos:end="324:32">QEMU_OPTION_gdb</name></expr>:</case>
                <expr_stmt pos:start="325:17" pos:end="325:51"><expr pos:start="325:17" pos:end="325:50"><call pos:start="325:17" pos:end="325:50"><name pos:start="325:17" pos:end="325:33">add_device_config</name><argument_list pos:start="325:34" pos:end="325:50">(<argument pos:start="325:35" pos:end="325:41"><expr pos:start="325:35" pos:end="325:41"><name pos:start="325:35" pos:end="325:41">DEV_GDB</name></expr></argument>, <argument pos:start="325:44" pos:end="325:49"><expr pos:start="325:44" pos:end="325:49"><name pos:start="325:44" pos:end="325:49">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="326:13" pos:end="326:31">case <expr pos:start="326:18" pos:end="326:30"><name pos:start="326:18" pos:end="326:30">QEMU_OPTION_L</name></expr>:</case>
                <if_stmt pos:start="327:17" pos:end="1197:13"><if pos:start="327:17" pos:end="329:17">if <condition pos:start="327:20" pos:end="327:43">(<expr pos:start="327:21" pos:end="327:42"><call pos:start="327:21" pos:end="327:42"><name pos:start="327:21" pos:end="327:34">is_help_option</name><argument_list pos:start="327:35" pos:end="327:42">(<argument pos:start="327:36" pos:end="327:41"><expr pos:start="327:36" pos:end="327:41"><name pos:start="327:36" pos:end="327:41">optarg</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="327:45" pos:end="329:17">{<block_content pos:start="328:21" pos:end="328:42">
                    <expr_stmt pos:start="328:21" pos:end="328:42"><expr pos:start="328:21" pos:end="328:41"><name pos:start="328:21" pos:end="328:34">list_data_dirs</name> <operator pos:start="328:36" pos:end="328:36">=</operator> <name pos:start="328:38" pos:end="328:41">true</name></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif" pos:start="329:19" pos:end="1197:13">else if <condition pos:start="329:27" pos:end="329:63">(<expr pos:start="329:28" pos:end="329:62"><name pos:start="329:28" pos:end="329:39">data_dir_idx</name> <operator pos:start="329:41" pos:end="329:41">&lt;</operator> <call pos:start="329:43" pos:end="329:62"><name pos:start="329:43" pos:end="329:52">ARRAY_SIZE</name><argument_list pos:start="329:53" pos:end="329:62">(<argument pos:start="329:54" pos:end="329:61"><expr pos:start="329:54" pos:end="329:61"><name pos:start="329:54" pos:end="329:61">data_dir</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="329:65" pos:end="1197:13">{<block_content pos:start="330:21" pos:end="1197:13">
                    <expr_stmt pos:start="330:21" pos:end="330:54"><expr pos:start="330:21" pos:end="330:53"><name pos:start="330:21" pos:end="330:44"><name pos:start="330:21" pos:end="330:28">data_dir</name><index pos:start="330:29" pos:end="330:44">[<expr pos:start="330:30" pos:end="330:43"><name pos:start="330:30" pos:end="330:41">data_dir_idx</name><operator pos:start="330:42" pos:end="330:43">++</operator></expr>]</index></name> <operator pos:start="330:46" pos:end="330:46">=</operator> <name pos:start="330:48" pos:end="330:53">optarg</name></expr>;</expr_stmt>
            <case pos:start="331:13" pos:end="331:34">case <expr pos:start="331:18" pos:end="331:33"><name pos:start="331:18" pos:end="331:33">QEMU_OPTION_bios</name></expr>:</case>
                <expr_stmt pos:start="332:17" pos:end="333:44"><expr pos:start="332:17" pos:end="333:43"><call pos:start="332:17" pos:end="333:43"><name pos:start="332:17" pos:end="332:29">qemu_opts_set</name><argument_list pos:start="332:30" pos:end="333:43">(<argument pos:start="332:31" pos:end="332:55"><expr pos:start="332:31" pos:end="332:55"><call pos:start="332:31" pos:end="332:55"><name pos:start="332:31" pos:end="332:44">qemu_find_opts</name><argument_list pos:start="332:45" pos:end="332:55">(<argument pos:start="332:46" pos:end="332:54"><expr pos:start="332:46" pos:end="332:54"><literal type="string" pos:start="332:46" pos:end="332:54">"machine"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="332:58" pos:end="332:58"><expr pos:start="332:58" pos:end="332:58"><literal type="number" pos:start="332:58" pos:end="332:58">0</literal></expr></argument>, <argument pos:start="332:61" pos:end="332:70"><expr pos:start="332:61" pos:end="332:70"><literal type="string" pos:start="332:61" pos:end="332:70">"firmware"</literal></expr></argument>, <argument pos:start="332:73" pos:end="332:78"><expr pos:start="332:73" pos:end="332:78"><name pos:start="332:73" pos:end="332:78">optarg</name></expr></argument>,
                              <argument pos:start="333:31" pos:end="333:42"><expr pos:start="333:31" pos:end="333:42"><operator pos:start="333:31" pos:end="333:31">&amp;</operator><name pos:start="333:32" pos:end="333:42">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="334:13" pos:end="334:40">case <expr pos:start="334:18" pos:end="334:39"><name pos:start="334:18" pos:end="334:39">QEMU_OPTION_singlestep</name></expr>:</case>
                <expr_stmt pos:start="335:17" pos:end="335:31"><expr pos:start="335:17" pos:end="335:30"><name pos:start="335:17" pos:end="335:26">singlestep</name> <operator pos:start="335:28" pos:end="335:28">=</operator> <literal type="number" pos:start="335:30" pos:end="335:30">1</literal></expr>;</expr_stmt>
            <case pos:start="336:13" pos:end="336:31">case <expr pos:start="336:18" pos:end="336:30"><name pos:start="336:18" pos:end="336:30">QEMU_OPTION_S</name></expr>:</case>
                <expr_stmt pos:start="337:17" pos:end="337:30"><expr pos:start="337:17" pos:end="337:29"><name pos:start="337:17" pos:end="337:25">autostart</name> <operator pos:start="337:27" pos:end="337:27">=</operator> <literal type="number" pos:start="337:29" pos:end="337:29">0</literal></expr>;</expr_stmt>
            <case pos:start="338:13" pos:end="338:31">case <expr pos:start="338:18" pos:end="338:30"><name pos:start="338:18" pos:end="338:30">QEMU_OPTION_k</name></expr>:</case>
                <expr_stmt pos:start="339:17" pos:end="339:41"><expr pos:start="339:17" pos:end="339:40"><name pos:start="339:17" pos:end="339:31">keyboard_layout</name> <operator pos:start="339:33" pos:end="339:33">=</operator> <name pos:start="339:35" pos:end="339:40">optarg</name></expr>;</expr_stmt>
            <case pos:start="340:13" pos:end="340:39">case <expr pos:start="340:18" pos:end="340:38"><name pos:start="340:18" pos:end="340:38">QEMU_OPTION_localtime</name></expr>:</case>
                <expr_stmt pos:start="341:17" pos:end="341:28"><expr pos:start="341:17" pos:end="341:27"><name pos:start="341:17" pos:end="341:23">rtc_utc</name> <operator pos:start="341:25" pos:end="341:25">=</operator> <literal type="number" pos:start="341:27" pos:end="341:27">0</literal></expr>;</expr_stmt>
            <case pos:start="342:13" pos:end="342:33">case <expr pos:start="342:18" pos:end="342:32"><name pos:start="342:18" pos:end="342:32">QEMU_OPTION_vga</name></expr>:</case>
                <expr_stmt pos:start="343:17" pos:end="343:35"><expr pos:start="343:17" pos:end="343:34"><name pos:start="343:17" pos:end="343:25">vga_model</name> <operator pos:start="343:27" pos:end="343:27">=</operator> <name pos:start="343:29" pos:end="343:34">optarg</name></expr>;</expr_stmt>
                <expr_stmt pos:start="344:17" pos:end="344:32"><expr pos:start="344:17" pos:end="344:31"><name pos:start="344:17" pos:end="344:27">default_vga</name> <operator pos:start="344:29" pos:end="344:29">=</operator> <literal type="number" pos:start="344:31" pos:end="344:31">0</literal></expr>;</expr_stmt>
            <case pos:start="345:13" pos:end="345:31">case <expr pos:start="345:18" pos:end="345:30"><name pos:start="345:18" pos:end="345:30">QEMU_OPTION_g</name></expr>:</case>
                    <decl_stmt pos:start="346:21" pos:end="346:34"><decl pos:start="346:21" pos:end="346:33"><type pos:start="346:21" pos:end="346:32"><specifier pos:start="346:21" pos:end="346:25">const</specifier> <name pos:start="346:27" pos:end="346:30">char</name> <modifier pos:start="346:32" pos:end="346:32">*</modifier></type><name pos:start="346:33" pos:end="346:33">p</name></decl>;</decl_stmt>
                    <decl_stmt pos:start="347:21" pos:end="347:36"><decl pos:start="347:21" pos:end="347:25"><type pos:start="347:21" pos:end="347:23"><name pos:start="347:21" pos:end="347:23">int</name></type> <name pos:start="347:25" pos:end="347:25">w</name></decl>, <decl pos:start="347:28" pos:end="347:28"><type ref="prev" pos:start="347:21" pos:end="347:23"/><name pos:start="347:28" pos:end="347:28">h</name></decl>, <decl pos:start="347:31" pos:end="347:35"><type ref="prev" pos:start="347:21" pos:end="347:23"/><name pos:start="347:31" pos:end="347:35">depth</name></decl>;</decl_stmt>
                    <expr_stmt pos:start="348:21" pos:end="348:31"><expr pos:start="348:21" pos:end="348:30"><name pos:start="348:21" pos:end="348:21">p</name> <operator pos:start="348:23" pos:end="348:23">=</operator> <name pos:start="348:25" pos:end="348:30">optarg</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="349:21" pos:end="349:51"><expr pos:start="349:21" pos:end="349:50"><name pos:start="349:21" pos:end="349:21">w</name> <operator pos:start="349:23" pos:end="349:23">=</operator> <call pos:start="349:25" pos:end="349:50"><name pos:start="349:25" pos:end="349:30">strtol</name><argument_list pos:start="349:31" pos:end="349:50">(<argument pos:start="349:32" pos:end="349:32"><expr pos:start="349:32" pos:end="349:32"><name pos:start="349:32" pos:end="349:32">p</name></expr></argument>, <argument pos:start="349:35" pos:end="349:45"><expr pos:start="349:35" pos:end="349:45"><operator pos:start="349:35" pos:end="349:35">(</operator><name pos:start="349:36" pos:end="349:39">char</name> <operator pos:start="349:41" pos:end="349:41">*</operator><operator pos:start="349:42" pos:end="349:42">*</operator><operator pos:start="349:43" pos:end="349:43">)</operator><operator pos:start="349:44" pos:end="349:44">&amp;</operator><name pos:start="349:45" pos:end="349:45">p</name></expr></argument>, <argument pos:start="349:48" pos:end="349:49"><expr pos:start="349:48" pos:end="349:49"><literal type="number" pos:start="349:48" pos:end="349:49">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="350:21" pos:end="1197:13"><if pos:start="350:21" pos:end="1197:13">if <condition pos:start="350:24" pos:end="350:31">(<expr pos:start="350:25" pos:end="350:30"><name pos:start="350:25" pos:end="350:25">w</name> <operator pos:start="350:27" pos:end="350:28">&lt;=</operator> <literal type="number" pos:start="350:30" pos:end="350:30">0</literal></expr>)</condition> <block pos:start="350:33" pos:end="1197:13">{<block_content pos:start="351:21" pos:end="1197:13">
                    <label pos:start="351:21" pos:end="351:34"><name pos:start="351:21" pos:end="351:33">graphic_error</name>:</label>
                        <expr_stmt pos:start="352:25" pos:end="352:68"><expr pos:start="352:25" pos:end="352:67"><call pos:start="352:25" pos:end="352:67"><name pos:start="352:25" pos:end="352:36">error_report</name><argument_list pos:start="352:37" pos:end="352:67">(<argument pos:start="352:38" pos:end="352:66"><expr pos:start="352:38" pos:end="352:66"><literal type="string" pos:start="352:38" pos:end="352:66">"invalid resolution or depth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="353:21" pos:end="354:43"><if pos:start="353:21" pos:end="354:43">if <condition pos:start="353:24" pos:end="353:34">(<expr pos:start="353:25" pos:end="353:33"><operator pos:start="353:25" pos:end="353:25">*</operator><name pos:start="353:26" pos:end="353:26">p</name> <operator pos:start="353:28" pos:end="353:29">!=</operator> <literal type="char" pos:start="353:31" pos:end="353:33">'x'</literal></expr>)</condition><block type="pseudo" pos:start="354:25" pos:end="354:43"><block_content pos:start="354:25" pos:end="354:43">
                        <goto pos:start="354:25" pos:end="354:43">goto <name pos:start="354:30" pos:end="354:42">graphic_error</name>;</goto></block_content></block></if></if_stmt>
                    <expr_stmt pos:start="355:21" pos:end="355:24"><expr pos:start="355:21" pos:end="355:23"><name pos:start="355:21" pos:end="355:21">p</name><operator pos:start="355:22" pos:end="355:23">++</operator></expr>;</expr_stmt>
                    <expr_stmt pos:start="356:21" pos:end="356:51"><expr pos:start="356:21" pos:end="356:50"><name pos:start="356:21" pos:end="356:21">h</name> <operator pos:start="356:23" pos:end="356:23">=</operator> <call pos:start="356:25" pos:end="356:50"><name pos:start="356:25" pos:end="356:30">strtol</name><argument_list pos:start="356:31" pos:end="356:50">(<argument pos:start="356:32" pos:end="356:32"><expr pos:start="356:32" pos:end="356:32"><name pos:start="356:32" pos:end="356:32">p</name></expr></argument>, <argument pos:start="356:35" pos:end="356:45"><expr pos:start="356:35" pos:end="356:45"><operator pos:start="356:35" pos:end="356:35">(</operator><name pos:start="356:36" pos:end="356:39">char</name> <operator pos:start="356:41" pos:end="356:41">*</operator><operator pos:start="356:42" pos:end="356:42">*</operator><operator pos:start="356:43" pos:end="356:43">)</operator><operator pos:start="356:44" pos:end="356:44">&amp;</operator><name pos:start="356:45" pos:end="356:45">p</name></expr></argument>, <argument pos:start="356:48" pos:end="356:49"><expr pos:start="356:48" pos:end="356:49"><literal type="number" pos:start="356:48" pos:end="356:49">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="357:21" pos:end="358:43"><if pos:start="357:21" pos:end="358:43">if <condition pos:start="357:24" pos:end="357:31">(<expr pos:start="357:25" pos:end="357:30"><name pos:start="357:25" pos:end="357:25">h</name> <operator pos:start="357:27" pos:end="357:28">&lt;=</operator> <literal type="number" pos:start="357:30" pos:end="357:30">0</literal></expr>)</condition><block type="pseudo" pos:start="358:25" pos:end="358:43"><block_content pos:start="358:25" pos:end="358:43">
                        <goto pos:start="358:25" pos:end="358:43">goto <name pos:start="358:30" pos:end="358:42">graphic_error</name>;</goto></block_content></block></if></if_stmt>
                    <if_stmt pos:start="359:21" pos:end="1197:13"><if pos:start="359:21" pos:end="365:21">if <condition pos:start="359:24" pos:end="359:34">(<expr pos:start="359:25" pos:end="359:33"><operator pos:start="359:25" pos:end="359:25">*</operator><name pos:start="359:26" pos:end="359:26">p</name> <operator pos:start="359:28" pos:end="359:29">==</operator> <literal type="char" pos:start="359:31" pos:end="359:33">'x'</literal></expr>)</condition> <block pos:start="359:36" pos:end="365:21">{<block_content pos:start="360:25" pos:end="364:47">
                        <expr_stmt pos:start="360:25" pos:end="360:28"><expr pos:start="360:25" pos:end="360:27"><name pos:start="360:25" pos:end="360:25">p</name><operator pos:start="360:26" pos:end="360:27">++</operator></expr>;</expr_stmt>
                        <expr_stmt pos:start="361:25" pos:end="361:59"><expr pos:start="361:25" pos:end="361:58"><name pos:start="361:25" pos:end="361:29">depth</name> <operator pos:start="361:31" pos:end="361:31">=</operator> <call pos:start="361:33" pos:end="361:58"><name pos:start="361:33" pos:end="361:38">strtol</name><argument_list pos:start="361:39" pos:end="361:58">(<argument pos:start="361:40" pos:end="361:40"><expr pos:start="361:40" pos:end="361:40"><name pos:start="361:40" pos:end="361:40">p</name></expr></argument>, <argument pos:start="361:43" pos:end="361:53"><expr pos:start="361:43" pos:end="361:53"><operator pos:start="361:43" pos:end="361:43">(</operator><name pos:start="361:44" pos:end="361:47">char</name> <operator pos:start="361:49" pos:end="361:49">*</operator><operator pos:start="361:50" pos:end="361:50">*</operator><operator pos:start="361:51" pos:end="361:51">)</operator><operator pos:start="361:52" pos:end="361:52">&amp;</operator><name pos:start="361:53" pos:end="361:53">p</name></expr></argument>, <argument pos:start="361:56" pos:end="361:57"><expr pos:start="361:56" pos:end="361:57"><literal type="number" pos:start="361:56" pos:end="361:57">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt pos:start="362:25" pos:end="364:47"><if pos:start="362:25" pos:end="364:47">if <condition pos:start="362:28" pos:end="363:55">(<expr pos:start="362:29" pos:end="363:54"><name pos:start="362:29" pos:end="362:33">depth</name> <operator pos:start="362:35" pos:end="362:36">!=</operator> <literal type="number" pos:start="362:38" pos:end="362:38">8</literal> <operator pos:start="362:40" pos:end="362:41">&amp;&amp;</operator> <name pos:start="362:43" pos:end="362:47">depth</name> <operator pos:start="362:49" pos:end="362:50">!=</operator> <literal type="number" pos:start="362:52" pos:end="362:53">15</literal> <operator pos:start="362:55" pos:end="362:56">&amp;&amp;</operator> <name pos:start="362:58" pos:end="362:62">depth</name> <operator pos:start="362:64" pos:end="362:65">!=</operator> <literal type="number" pos:start="362:67" pos:end="362:68">16</literal> <operator pos:start="362:70" pos:end="362:71">&amp;&amp;</operator>
                            <name pos:start="363:29" pos:end="363:33">depth</name> <operator pos:start="363:35" pos:end="363:36">!=</operator> <literal type="number" pos:start="363:38" pos:end="363:39">24</literal> <operator pos:start="363:41" pos:end="363:42">&amp;&amp;</operator> <name pos:start="363:44" pos:end="363:48">depth</name> <operator pos:start="363:50" pos:end="363:51">!=</operator> <literal type="number" pos:start="363:53" pos:end="363:54">32</literal></expr>)</condition><block type="pseudo" pos:start="364:29" pos:end="364:47"><block_content pos:start="364:29" pos:end="364:47">
                            <goto pos:start="364:29" pos:end="364:47">goto <name pos:start="364:34" pos:end="364:46">graphic_error</name>;</goto></block_content></block></if></if_stmt>
                    </block_content>}</block></if> <if type="elseif" pos:start="365:23" pos:end="367:21">else if <condition pos:start="365:31" pos:end="365:42">(<expr pos:start="365:32" pos:end="365:41"><operator pos:start="365:32" pos:end="365:32">*</operator><name pos:start="365:33" pos:end="365:33">p</name> <operator pos:start="365:35" pos:end="365:36">==</operator> <literal type="char" pos:start="365:38" pos:end="365:41">'\0'</literal></expr>)</condition> <block pos:start="365:44" pos:end="367:21">{<block_content pos:start="366:25" pos:end="366:46">
                        <expr_stmt pos:start="366:25" pos:end="366:46"><expr pos:start="366:25" pos:end="366:45"><name pos:start="366:25" pos:end="366:29">depth</name> <operator pos:start="366:31" pos:end="366:31">=</operator> <name pos:start="366:33" pos:end="366:45">graphic_depth</name></expr>;</expr_stmt>
                    </block_content>}</block></if> <else pos:start="367:23" pos:end="1197:13">else <block pos:start="367:28" pos:end="1197:13">{<block_content pos:start="368:25" pos:end="1197:13">
                        <goto pos:start="368:25" pos:end="368:43">goto <name pos:start="368:30" pos:end="368:42">graphic_error</name>;</goto>
                    <expr_stmt pos:start="369:21" pos:end="369:38"><expr pos:start="369:21" pos:end="369:37"><name pos:start="369:21" pos:end="369:33">graphic_width</name> <operator pos:start="369:35" pos:end="369:35">=</operator> <name pos:start="369:37" pos:end="369:37">w</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="370:21" pos:end="370:39"><expr pos:start="370:21" pos:end="370:38"><name pos:start="370:21" pos:end="370:34">graphic_height</name> <operator pos:start="370:36" pos:end="370:36">=</operator> <name pos:start="370:38" pos:end="370:38">h</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="371:21" pos:end="371:42"><expr pos:start="371:21" pos:end="371:41"><name pos:start="371:21" pos:end="371:33">graphic_depth</name> <operator pos:start="371:35" pos:end="371:35">=</operator> <name pos:start="371:37" pos:end="371:41">depth</name></expr>;</expr_stmt>
            <case pos:start="372:13" pos:end="372:34">case <expr pos:start="372:18" pos:end="372:33"><name pos:start="372:18" pos:end="372:33">QEMU_OPTION_echr</name></expr>:</case>
                    <decl_stmt pos:start="373:21" pos:end="373:28"><decl pos:start="373:21" pos:end="373:27"><type pos:start="373:21" pos:end="373:26"><name pos:start="373:21" pos:end="373:24">char</name> <modifier pos:start="373:26" pos:end="373:26">*</modifier></type><name pos:start="373:27" pos:end="373:27">r</name></decl>;</decl_stmt>
                    <expr_stmt pos:start="374:21" pos:end="374:61"><expr pos:start="374:21" pos:end="374:60"><name pos:start="374:21" pos:end="374:36">term_escape_char</name> <operator pos:start="374:38" pos:end="374:38">=</operator> <call pos:start="374:40" pos:end="374:60"><name pos:start="374:40" pos:end="374:45">strtol</name><argument_list pos:start="374:46" pos:end="374:60">(<argument pos:start="374:47" pos:end="374:52"><expr pos:start="374:47" pos:end="374:52"><name pos:start="374:47" pos:end="374:52">optarg</name></expr></argument>, <argument pos:start="374:55" pos:end="374:56"><expr pos:start="374:55" pos:end="374:56"><operator pos:start="374:55" pos:end="374:55">&amp;</operator><name pos:start="374:56" pos:end="374:56">r</name></expr></argument>, <argument pos:start="374:59" pos:end="374:59"><expr pos:start="374:59" pos:end="374:59"><literal type="number" pos:start="374:59" pos:end="374:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="375:21" pos:end="376:57"><if pos:start="375:21" pos:end="376:57">if <condition pos:start="375:24" pos:end="375:36">(<expr pos:start="375:25" pos:end="375:35"><name pos:start="375:25" pos:end="375:25">r</name> <operator pos:start="375:27" pos:end="375:28">==</operator> <name pos:start="375:30" pos:end="375:35">optarg</name></expr>)</condition><block type="pseudo" pos:start="376:25" pos:end="376:57"><block_content pos:start="376:25" pos:end="376:57">
                        <expr_stmt pos:start="376:25" pos:end="376:57"><expr pos:start="376:25" pos:end="376:56"><call pos:start="376:25" pos:end="376:56"><name pos:start="376:25" pos:end="376:30">printf</name><argument_list pos:start="376:31" pos:end="376:56">(<argument pos:start="376:32" pos:end="376:55"><expr pos:start="376:32" pos:end="376:55"><literal type="string" pos:start="376:32" pos:end="376:55">"Bad argument to echr\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <case pos:start="377:13" pos:end="377:37">case <expr pos:start="377:18" pos:end="377:36"><name pos:start="377:18" pos:end="377:36">QEMU_OPTION_monitor</name></expr>:</case>
                <expr_stmt pos:start="378:17" pos:end="378:36"><expr pos:start="378:17" pos:end="378:35"><name pos:start="378:17" pos:end="378:31">default_monitor</name> <operator pos:start="378:33" pos:end="378:33">=</operator> <literal type="number" pos:start="378:35" pos:end="378:35">0</literal></expr>;</expr_stmt>
                <if_stmt pos:start="379:17" pos:end="1197:13"><if pos:start="379:17" pos:end="1197:13">if <condition pos:start="379:20" pos:end="379:47">(<expr pos:start="379:21" pos:end="379:46"><call pos:start="379:21" pos:end="379:46"><name pos:start="379:21" pos:end="379:27">strncmp</name><argument_list pos:start="379:28" pos:end="379:46">(<argument pos:start="379:29" pos:end="379:34"><expr pos:start="379:29" pos:end="379:34"><name pos:start="379:29" pos:end="379:34">optarg</name></expr></argument>, <argument pos:start="379:37" pos:end="379:42"><expr pos:start="379:37" pos:end="379:42"><literal type="string" pos:start="379:37" pos:end="379:42">"none"</literal></expr></argument>, <argument pos:start="379:45" pos:end="379:45"><expr pos:start="379:45" pos:end="379:45"><literal type="number" pos:start="379:45" pos:end="379:45">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="379:49" pos:end="1197:13">{<block_content pos:start="380:21" pos:end="1197:13">
                    <expr_stmt pos:start="380:21" pos:end="380:61"><expr pos:start="380:21" pos:end="380:60"><call pos:start="380:21" pos:end="380:60"><name pos:start="380:21" pos:end="380:33">monitor_parse</name><argument_list pos:start="380:34" pos:end="380:60">(<argument pos:start="380:35" pos:end="380:40"><expr pos:start="380:35" pos:end="380:40"><name pos:start="380:35" pos:end="380:40">optarg</name></expr></argument>, <argument pos:start="380:43" pos:end="380:52"><expr pos:start="380:43" pos:end="380:52"><literal type="string" pos:start="380:43" pos:end="380:52">"readline"</literal></expr></argument>, <argument pos:start="380:55" pos:end="380:59"><expr pos:start="380:55" pos:end="380:59"><name pos:start="380:55" pos:end="380:59">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="381:13" pos:end="381:33">case <expr pos:start="381:18" pos:end="381:32"><name pos:start="381:18" pos:end="381:32">QEMU_OPTION_qmp</name></expr>:</case>
                <expr_stmt pos:start="382:17" pos:end="382:56"><expr pos:start="382:17" pos:end="382:55"><call pos:start="382:17" pos:end="382:55"><name pos:start="382:17" pos:end="382:29">monitor_parse</name><argument_list pos:start="382:30" pos:end="382:55">(<argument pos:start="382:31" pos:end="382:36"><expr pos:start="382:31" pos:end="382:36"><name pos:start="382:31" pos:end="382:36">optarg</name></expr></argument>, <argument pos:start="382:39" pos:end="382:47"><expr pos:start="382:39" pos:end="382:47"><literal type="string" pos:start="382:39" pos:end="382:47">"control"</literal></expr></argument>, <argument pos:start="382:50" pos:end="382:54"><expr pos:start="382:50" pos:end="382:54"><name pos:start="382:50" pos:end="382:54">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="383:17" pos:end="383:36"><expr pos:start="383:17" pos:end="383:35"><name pos:start="383:17" pos:end="383:31">default_monitor</name> <operator pos:start="383:33" pos:end="383:33">=</operator> <literal type="number" pos:start="383:35" pos:end="383:35">0</literal></expr>;</expr_stmt>
            <case pos:start="384:13" pos:end="384:40">case <expr pos:start="384:18" pos:end="384:39"><name pos:start="384:18" pos:end="384:39">QEMU_OPTION_qmp_pretty</name></expr>:</case>
                <expr_stmt pos:start="385:17" pos:end="385:55"><expr pos:start="385:17" pos:end="385:54"><call pos:start="385:17" pos:end="385:54"><name pos:start="385:17" pos:end="385:29">monitor_parse</name><argument_list pos:start="385:30" pos:end="385:54">(<argument pos:start="385:31" pos:end="385:36"><expr pos:start="385:31" pos:end="385:36"><name pos:start="385:31" pos:end="385:36">optarg</name></expr></argument>, <argument pos:start="385:39" pos:end="385:47"><expr pos:start="385:39" pos:end="385:47"><literal type="string" pos:start="385:39" pos:end="385:47">"control"</literal></expr></argument>, <argument pos:start="385:50" pos:end="385:53"><expr pos:start="385:50" pos:end="385:53"><name pos:start="385:50" pos:end="385:53">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="386:17" pos:end="386:36"><expr pos:start="386:17" pos:end="386:35"><name pos:start="386:17" pos:end="386:31">default_monitor</name> <operator pos:start="386:33" pos:end="386:33">=</operator> <literal type="number" pos:start="386:35" pos:end="386:35">0</literal></expr>;</expr_stmt>
            <case pos:start="387:13" pos:end="387:33">case <expr pos:start="387:18" pos:end="387:32"><name pos:start="387:18" pos:end="387:32">QEMU_OPTION_mon</name></expr>:</case>
                <expr_stmt pos:start="388:17" pos:end="389:53"><expr pos:start="388:17" pos:end="389:52"><name pos:start="388:17" pos:end="388:20">opts</name> <operator pos:start="388:22" pos:end="388:22">=</operator> <call pos:start="388:24" pos:end="389:52"><name pos:start="388:24" pos:end="388:46">qemu_opts_parse_noisily</name><argument_list pos:start="388:47" pos:end="389:52">(<argument pos:start="388:48" pos:end="388:68"><expr pos:start="388:48" pos:end="388:68"><call pos:start="388:48" pos:end="388:68"><name pos:start="388:48" pos:end="388:61">qemu_find_opts</name><argument_list pos:start="388:62" pos:end="388:68">(<argument pos:start="388:63" pos:end="388:67"><expr pos:start="388:63" pos:end="388:67"><literal type="string" pos:start="388:63" pos:end="388:67">"mon"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="388:71" pos:end="388:76"><expr pos:start="388:71" pos:end="388:76"><name pos:start="388:71" pos:end="388:76">optarg</name></expr></argument>,
                                               <argument pos:start="389:48" pos:end="389:51"><expr pos:start="389:48" pos:end="389:51"><name pos:start="389:48" pos:end="389:51">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="390:17" pos:end="1197:13"><if pos:start="390:17" pos:end="1197:13">if <condition pos:start="390:20" pos:end="390:26">(<expr pos:start="390:21" pos:end="390:25"><operator pos:start="390:21" pos:end="390:21">!</operator><name pos:start="390:22" pos:end="390:25">opts</name></expr>)</condition> <block pos:start="390:28" pos:end="1197:13">{<block_content pos:start="391:17" pos:end="1197:13">
                <expr_stmt pos:start="391:17" pos:end="391:36"><expr pos:start="391:17" pos:end="391:35"><name pos:start="391:17" pos:end="391:31">default_monitor</name> <operator pos:start="391:33" pos:end="391:33">=</operator> <literal type="number" pos:start="391:35" pos:end="391:35">0</literal></expr>;</expr_stmt>
            <case pos:start="392:13" pos:end="392:37">case <expr pos:start="392:18" pos:end="392:36"><name pos:start="392:18" pos:end="392:36">QEMU_OPTION_chardev</name></expr>:</case>
                <expr_stmt pos:start="393:17" pos:end="394:61"><expr pos:start="393:17" pos:end="394:60"><name pos:start="393:17" pos:end="393:20">opts</name> <operator pos:start="393:22" pos:end="393:22">=</operator> <call pos:start="393:24" pos:end="394:60"><name pos:start="393:24" pos:end="393:46">qemu_opts_parse_noisily</name><argument_list pos:start="393:47" pos:end="394:60">(<argument pos:start="393:48" pos:end="393:72"><expr pos:start="393:48" pos:end="393:72"><call pos:start="393:48" pos:end="393:72"><name pos:start="393:48" pos:end="393:61">qemu_find_opts</name><argument_list pos:start="393:62" pos:end="393:72">(<argument pos:start="393:63" pos:end="393:71"><expr pos:start="393:63" pos:end="393:71"><literal type="string" pos:start="393:63" pos:end="393:71">"chardev"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                               <argument pos:start="394:48" pos:end="394:53"><expr pos:start="394:48" pos:end="394:53"><name pos:start="394:48" pos:end="394:53">optarg</name></expr></argument>, <argument pos:start="394:56" pos:end="394:59"><expr pos:start="394:56" pos:end="394:59"><name pos:start="394:56" pos:end="394:59">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="395:17" pos:end="1197:13"><if pos:start="395:17" pos:end="1197:13">if <condition pos:start="395:20" pos:end="395:26">(<expr pos:start="395:21" pos:end="395:25"><operator pos:start="395:21" pos:end="395:21">!</operator><name pos:start="395:22" pos:end="395:25">opts</name></expr>)</condition> <block pos:start="395:28" pos:end="1197:13">{<block_content pos:start="396:13" pos:end="1197:13">
            <case pos:start="396:13" pos:end="396:35">case <expr pos:start="396:18" pos:end="396:34"><name pos:start="396:18" pos:end="396:34">QEMU_OPTION_fsdev</name></expr>:</case>
                <expr_stmt pos:start="397:17" pos:end="397:48"><expr pos:start="397:17" pos:end="397:47"><name pos:start="397:17" pos:end="397:21">olist</name> <operator pos:start="397:23" pos:end="397:23">=</operator> <call pos:start="397:25" pos:end="397:47"><name pos:start="397:25" pos:end="397:38">qemu_find_opts</name><argument_list pos:start="397:39" pos:end="397:47">(<argument pos:start="397:40" pos:end="397:46"><expr pos:start="397:40" pos:end="397:46"><literal type="string" pos:start="397:40" pos:end="397:46">"fsdev"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="398:17" pos:end="1197:13"><if pos:start="398:17" pos:end="1197:13">if <condition pos:start="398:20" pos:end="398:27">(<expr pos:start="398:21" pos:end="398:26"><operator pos:start="398:21" pos:end="398:21">!</operator><name pos:start="398:22" pos:end="398:26">olist</name></expr>)</condition> <block pos:start="398:29" pos:end="1197:13">{<block_content pos:start="399:21" pos:end="1197:13">
                    <expr_stmt pos:start="399:21" pos:end="399:62"><expr pos:start="399:21" pos:end="399:61"><call pos:start="399:21" pos:end="399:61"><name pos:start="399:21" pos:end="399:32">error_report</name><argument_list pos:start="399:33" pos:end="399:61">(<argument pos:start="399:34" pos:end="399:60"><expr pos:start="399:34" pos:end="399:60"><literal type="string" pos:start="399:34" pos:end="399:60">"fsdev support is disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="400:17" pos:end="400:68"><expr pos:start="400:17" pos:end="400:67"><name pos:start="400:17" pos:end="400:20">opts</name> <operator pos:start="400:22" pos:end="400:22">=</operator> <call pos:start="400:24" pos:end="400:67"><name pos:start="400:24" pos:end="400:46">qemu_opts_parse_noisily</name><argument_list pos:start="400:47" pos:end="400:67">(<argument pos:start="400:48" pos:end="400:52"><expr pos:start="400:48" pos:end="400:52"><name pos:start="400:48" pos:end="400:52">olist</name></expr></argument>, <argument pos:start="400:55" pos:end="400:60"><expr pos:start="400:55" pos:end="400:60"><name pos:start="400:55" pos:end="400:60">optarg</name></expr></argument>, <argument pos:start="400:63" pos:end="400:66"><expr pos:start="400:63" pos:end="400:66"><name pos:start="400:63" pos:end="400:66">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="401:17" pos:end="1197:13"><if pos:start="401:17" pos:end="1197:13">if <condition pos:start="401:20" pos:end="401:26">(<expr pos:start="401:21" pos:end="401:25"><operator pos:start="401:21" pos:end="401:21">!</operator><name pos:start="401:22" pos:end="401:25">opts</name></expr>)</condition> <block pos:start="401:28" pos:end="1197:13">{<block_content pos:start="402:13" pos:end="1197:13">
            <case pos:start="402:13" pos:end="402:36">case <expr pos:start="402:18" pos:end="402:35"><name pos:start="402:18" pos:end="402:35">QEMU_OPTION_virtfs</name></expr>:</case> <block pos:start="402:38" pos:end="1197:13">{<block_content pos:start="403:17" pos:end="1197:13">
                <decl_stmt pos:start="403:17" pos:end="403:32"><decl pos:start="403:17" pos:end="403:31"><type pos:start="403:17" pos:end="403:26"><name pos:start="403:17" pos:end="403:24">QemuOpts</name> <modifier pos:start="403:26" pos:end="403:26">*</modifier></type><name pos:start="403:27" pos:end="403:31">fsdev</name></decl>;</decl_stmt>
                <decl_stmt pos:start="404:17" pos:end="404:33"><decl pos:start="404:17" pos:end="404:32"><type pos:start="404:17" pos:end="404:26"><name pos:start="404:17" pos:end="404:24">QemuOpts</name> <modifier pos:start="404:26" pos:end="404:26">*</modifier></type><name pos:start="404:27" pos:end="404:32">device</name></decl>;</decl_stmt>
                <decl_stmt pos:start="405:17" pos:end="405:56"><decl pos:start="405:17" pos:end="405:36"><type pos:start="405:17" pos:end="405:28"><specifier pos:start="405:17" pos:end="405:21">const</specifier> <name pos:start="405:23" pos:end="405:26">char</name> <modifier pos:start="405:28" pos:end="405:28">*</modifier></type><name pos:start="405:29" pos:end="405:36">writeout</name></decl>, <decl pos:start="405:39" pos:end="405:46"><type ref="prev" pos:start="405:17" pos:end="405:28"><modifier pos:start="405:39" pos:end="405:39">*</modifier></type><name pos:start="405:40" pos:end="405:46">sock_fd</name></decl>, <decl pos:start="405:49" pos:end="405:55"><type ref="prev" pos:start="405:17" pos:end="405:28"><modifier pos:start="405:49" pos:end="405:49">*</modifier></type><name pos:start="405:50" pos:end="405:55">socket</name></decl>;</decl_stmt>
                <expr_stmt pos:start="406:17" pos:end="406:49"><expr pos:start="406:17" pos:end="406:48"><name pos:start="406:17" pos:end="406:21">olist</name> <operator pos:start="406:23" pos:end="406:23">=</operator> <call pos:start="406:25" pos:end="406:48"><name pos:start="406:25" pos:end="406:38">qemu_find_opts</name><argument_list pos:start="406:39" pos:end="406:48">(<argument pos:start="406:40" pos:end="406:47"><expr pos:start="406:40" pos:end="406:47"><literal type="string" pos:start="406:40" pos:end="406:47">"virtfs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="407:17" pos:end="1197:13"><if pos:start="407:17" pos:end="1197:13">if <condition pos:start="407:20" pos:end="407:27">(<expr pos:start="407:21" pos:end="407:26"><operator pos:start="407:21" pos:end="407:21">!</operator><name pos:start="407:22" pos:end="407:26">olist</name></expr>)</condition> <block pos:start="407:29" pos:end="1197:13">{<block_content pos:start="408:21" pos:end="1197:13">
                    <expr_stmt pos:start="408:21" pos:end="408:63"><expr pos:start="408:21" pos:end="408:62"><call pos:start="408:21" pos:end="408:62"><name pos:start="408:21" pos:end="408:32">error_report</name><argument_list pos:start="408:33" pos:end="408:62">(<argument pos:start="408:34" pos:end="408:61"><expr pos:start="408:34" pos:end="408:61"><literal type="string" pos:start="408:34" pos:end="408:61">"virtfs support is disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="409:17" pos:end="409:68"><expr pos:start="409:17" pos:end="409:67"><name pos:start="409:17" pos:end="409:20">opts</name> <operator pos:start="409:22" pos:end="409:22">=</operator> <call pos:start="409:24" pos:end="409:67"><name pos:start="409:24" pos:end="409:46">qemu_opts_parse_noisily</name><argument_list pos:start="409:47" pos:end="409:67">(<argument pos:start="409:48" pos:end="409:52"><expr pos:start="409:48" pos:end="409:52"><name pos:start="409:48" pos:end="409:52">olist</name></expr></argument>, <argument pos:start="409:55" pos:end="409:60"><expr pos:start="409:55" pos:end="409:60"><name pos:start="409:55" pos:end="409:60">optarg</name></expr></argument>, <argument pos:start="409:63" pos:end="409:66"><expr pos:start="409:63" pos:end="409:66"><name pos:start="409:63" pos:end="409:66">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="410:17" pos:end="1197:13"><if pos:start="410:17" pos:end="1197:13">if <condition pos:start="410:20" pos:end="410:26">(<expr pos:start="410:21" pos:end="410:25"><operator pos:start="410:21" pos:end="410:21">!</operator><name pos:start="410:22" pos:end="410:25">opts</name></expr>)</condition> <block pos:start="410:28" pos:end="1197:13">{<block_content pos:start="411:17" pos:end="1197:13">
                <if_stmt pos:start="411:17" pos:end="1197:13"><if pos:start="411:17" pos:end="1197:13">if <condition pos:start="411:20" pos:end="412:60">(<expr pos:start="411:21" pos:end="412:59"><call pos:start="411:21" pos:end="411:50"><name pos:start="411:21" pos:end="411:32">qemu_opt_get</name><argument_list pos:start="411:33" pos:end="411:50">(<argument pos:start="411:34" pos:end="411:37"><expr pos:start="411:34" pos:end="411:37"><name pos:start="411:34" pos:end="411:37">opts</name></expr></argument>, <argument pos:start="411:40" pos:end="411:49"><expr pos:start="411:40" pos:end="411:49"><literal type="string" pos:start="411:40" pos:end="411:49">"fsdriver"</literal></expr></argument>)</argument_list></call> <operator pos:start="411:52" pos:end="411:53">==</operator> <name pos:start="411:55" pos:end="411:58">NULL</name> <operator pos:start="411:60" pos:end="411:61">||</operator>
                    <call pos:start="412:21" pos:end="412:51"><name pos:start="412:21" pos:end="412:32">qemu_opt_get</name><argument_list pos:start="412:33" pos:end="412:51">(<argument pos:start="412:34" pos:end="412:37"><expr pos:start="412:34" pos:end="412:37"><name pos:start="412:34" pos:end="412:37">opts</name></expr></argument>, <argument pos:start="412:40" pos:end="412:50"><expr pos:start="412:40" pos:end="412:50"><literal type="string" pos:start="412:40" pos:end="412:50">"mount_tag"</literal></expr></argument>)</argument_list></call> <operator pos:start="412:53" pos:end="412:54">==</operator> <name pos:start="412:56" pos:end="412:59">NULL</name></expr>)</condition> <block pos:start="412:62" pos:end="1197:13">{<block_content pos:start="413:21" pos:end="1197:13">
                    <expr_stmt pos:start="413:21" pos:end="413:74"><expr pos:start="413:21" pos:end="413:73"><call pos:start="413:21" pos:end="413:73"><name pos:start="413:21" pos:end="413:32">error_report</name><argument_list pos:start="413:33" pos:end="413:73">(<argument pos:start="413:34" pos:end="413:72"><expr pos:start="413:34" pos:end="413:72"><literal type="string" pos:start="413:34" pos:end="413:72">"Usage: -virtfs fsdriver,mount_tag=tag"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="414:17" pos:end="416:50"><expr pos:start="414:17" pos:end="416:49"><name pos:start="414:17" pos:end="414:21">fsdev</name> <operator pos:start="414:23" pos:end="414:23">=</operator> <call pos:start="414:25" pos:end="416:49"><name pos:start="414:25" pos:end="414:40">qemu_opts_create</name><argument_list pos:start="414:41" pos:end="416:49">(<argument pos:start="414:42" pos:end="414:64"><expr pos:start="414:42" pos:end="414:64"><call pos:start="414:42" pos:end="414:64"><name pos:start="414:42" pos:end="414:55">qemu_find_opts</name><argument_list pos:start="414:56" pos:end="414:64">(<argument pos:start="414:57" pos:end="414:63"><expr pos:start="414:57" pos:end="414:63"><literal type="string" pos:start="414:57" pos:end="414:63">"fsdev"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                         <argument pos:start="415:42" pos:end="415:72"><expr pos:start="415:42" pos:end="415:72"><call pos:start="415:42" pos:end="415:72"><name pos:start="415:42" pos:end="415:53">qemu_opt_get</name><argument_list pos:start="415:54" pos:end="415:72">(<argument pos:start="415:55" pos:end="415:58"><expr pos:start="415:55" pos:end="415:58"><name pos:start="415:55" pos:end="415:58">opts</name></expr></argument>, <argument pos:start="415:61" pos:end="415:71"><expr pos:start="415:61" pos:end="415:71"><literal type="string" pos:start="415:61" pos:end="415:71">"mount_tag"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                         <argument pos:start="416:42" pos:end="416:42"><expr pos:start="416:42" pos:end="416:42"><literal type="number" pos:start="416:42" pos:end="416:42">1</literal></expr></argument>, <argument pos:start="416:45" pos:end="416:48"><expr pos:start="416:45" pos:end="416:48"><name pos:start="416:45" pos:end="416:48">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="417:17" pos:end="1197:13"><if pos:start="417:17" pos:end="1197:13">if <condition pos:start="417:20" pos:end="417:27">(<expr pos:start="417:21" pos:end="417:26"><operator pos:start="417:21" pos:end="417:21">!</operator><name pos:start="417:22" pos:end="417:26">fsdev</name></expr>)</condition> <block pos:start="417:29" pos:end="1197:13">{<block_content pos:start="418:21" pos:end="1197:13">
                    <expr_stmt pos:start="418:21" pos:end="419:66"><expr pos:start="418:21" pos:end="419:65"><call pos:start="418:21" pos:end="419:65"><name pos:start="418:21" pos:end="418:32">error_report</name><argument_list pos:start="418:33" pos:end="419:65">(<argument pos:start="418:34" pos:end="418:57"><expr pos:start="418:34" pos:end="418:57"><literal type="string" pos:start="418:34" pos:end="418:57">"duplicate fsdev id: %s"</literal></expr></argument>,
                                 <argument pos:start="419:34" pos:end="419:64"><expr pos:start="419:34" pos:end="419:64"><call pos:start="419:34" pos:end="419:64"><name pos:start="419:34" pos:end="419:45">qemu_opt_get</name><argument_list pos:start="419:46" pos:end="419:64">(<argument pos:start="419:47" pos:end="419:50"><expr pos:start="419:47" pos:end="419:50"><name pos:start="419:47" pos:end="419:50">opts</name></expr></argument>, <argument pos:start="419:53" pos:end="419:63"><expr pos:start="419:53" pos:end="419:63"><literal type="string" pos:start="419:53" pos:end="419:63">"mount_tag"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="420:17" pos:end="420:58"><expr pos:start="420:17" pos:end="420:57"><name pos:start="420:17" pos:end="420:24">writeout</name> <operator pos:start="420:26" pos:end="420:26">=</operator> <call pos:start="420:28" pos:end="420:57"><name pos:start="420:28" pos:end="420:39">qemu_opt_get</name><argument_list pos:start="420:40" pos:end="420:57">(<argument pos:start="420:41" pos:end="420:44"><expr pos:start="420:41" pos:end="420:44"><name pos:start="420:41" pos:end="420:44">opts</name></expr></argument>, <argument pos:start="420:47" pos:end="420:56"><expr pos:start="420:47" pos:end="420:56"><literal type="string" pos:start="420:47" pos:end="420:56">"writeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="421:17" pos:end="1197:13"><if pos:start="421:17" pos:end="1197:13">if <condition pos:start="421:20" pos:end="421:29">(<expr pos:start="421:21" pos:end="421:28"><name pos:start="421:21" pos:end="421:28">writeout</name></expr>)</condition> <block pos:start="421:31" pos:end="1197:13">{<block_content pos:start="423:21" pos:end="1197:13">
<cpp:ifdef pos:start="422:1" pos:end="422:29">#<cpp:directive pos:start="422:2" pos:end="422:6">ifdef</cpp:directive> <name pos:start="422:8" pos:end="422:29">CONFIG_SYNC_FILE_RANGE</name></cpp:ifdef>
                    <expr_stmt pos:start="423:21" pos:end="425:0"><expr pos:start="423:21" pos:end="423:75"><call pos:start="423:21" pos:end="423:75"><name pos:start="423:21" pos:end="423:32">qemu_opt_set</name><argument_list pos:start="423:33" pos:end="423:75">(<argument pos:start="423:34" pos:end="423:38"><expr pos:start="423:34" pos:end="423:38"><name pos:start="423:34" pos:end="423:38">fsdev</name></expr></argument>, <argument pos:start="423:41" pos:end="423:50"><expr pos:start="423:41" pos:end="423:50"><literal type="string" pos:start="423:41" pos:end="423:50">"writeout"</literal></expr></argument>, <argument pos:start="423:53" pos:end="423:60"><expr pos:start="423:53" pos:end="423:60"><name pos:start="423:53" pos:end="423:60">writeout</name></expr></argument>, <argument pos:start="423:63" pos:end="423:74"><expr pos:start="423:63" pos:end="423:74"><operator pos:start="423:63" pos:end="423:63">&amp;</operator><name pos:start="423:64" pos:end="423:74">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:start="424:1" pos:end="424:5">#<cpp:directive pos:start="424:2" pos:end="424:5">else</cpp:directive></cpp:else>
                    <expr_stmt pos:start="425:21" pos:end="428:0"><expr pos:start="425:21" pos:end="426:52"><call pos:start="425:21" pos:end="426:52"><name pos:start="425:21" pos:end="425:32">error_report</name><argument_list pos:start="425:33" pos:end="426:52">(<argument pos:start="425:34" pos:end="426:51"><expr pos:start="425:34" pos:end="426:51"><literal type="string" pos:start="425:34" pos:end="425:68">"writeout=immediate not supported "</literal>
                                 <literal type="string" pos:start="426:34" pos:end="426:51">"on this platform"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="427:1" pos:end="427:6">#<cpp:directive pos:start="427:2" pos:end="427:6">endif</cpp:directive></cpp:endif>
                <expr_stmt pos:start="428:17" pos:end="429:75"><expr pos:start="428:17" pos:end="429:74"><call pos:start="428:17" pos:end="429:74"><name pos:start="428:17" pos:end="428:28">qemu_opt_set</name><argument_list pos:start="428:29" pos:end="429:74">(<argument pos:start="428:30" pos:end="428:34"><expr pos:start="428:30" pos:end="428:34"><name pos:start="428:30" pos:end="428:34">fsdev</name></expr></argument>, <argument pos:start="428:37" pos:end="428:46"><expr pos:start="428:37" pos:end="428:46"><literal type="string" pos:start="428:37" pos:end="428:46">"fsdriver"</literal></expr></argument>,
                             <argument pos:start="429:30" pos:end="429:59"><expr pos:start="429:30" pos:end="429:59"><call pos:start="429:30" pos:end="429:59"><name pos:start="429:30" pos:end="429:41">qemu_opt_get</name><argument_list pos:start="429:42" pos:end="429:59">(<argument pos:start="429:43" pos:end="429:46"><expr pos:start="429:43" pos:end="429:46"><name pos:start="429:43" pos:end="429:46">opts</name></expr></argument>, <argument pos:start="429:49" pos:end="429:58"><expr pos:start="429:49" pos:end="429:58"><literal type="string" pos:start="429:49" pos:end="429:58">"fsdriver"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="429:62" pos:end="429:73"><expr pos:start="429:62" pos:end="429:73"><operator pos:start="429:62" pos:end="429:62">&amp;</operator><name pos:start="429:63" pos:end="429:73">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="430:17" pos:end="431:43"><expr pos:start="430:17" pos:end="431:42"><call pos:start="430:17" pos:end="431:42"><name pos:start="430:17" pos:end="430:28">qemu_opt_set</name><argument_list pos:start="430:29" pos:end="431:42">(<argument pos:start="430:30" pos:end="430:34"><expr pos:start="430:30" pos:end="430:34"><name pos:start="430:30" pos:end="430:34">fsdev</name></expr></argument>, <argument pos:start="430:37" pos:end="430:42"><expr pos:start="430:37" pos:end="430:42"><literal type="string" pos:start="430:37" pos:end="430:42">"path"</literal></expr></argument>, <argument pos:start="430:45" pos:end="430:70"><expr pos:start="430:45" pos:end="430:70"><call pos:start="430:45" pos:end="430:70"><name pos:start="430:45" pos:end="430:56">qemu_opt_get</name><argument_list pos:start="430:57" pos:end="430:70">(<argument pos:start="430:58" pos:end="430:61"><expr pos:start="430:58" pos:end="430:61"><name pos:start="430:58" pos:end="430:61">opts</name></expr></argument>, <argument pos:start="430:64" pos:end="430:69"><expr pos:start="430:64" pos:end="430:69"><literal type="string" pos:start="430:64" pos:end="430:69">"path"</literal></expr></argument>)</argument_list></call></expr></argument>,
                             <argument pos:start="431:30" pos:end="431:41"><expr pos:start="431:30" pos:end="431:41"><operator pos:start="431:30" pos:end="431:30">&amp;</operator><name pos:start="431:31" pos:end="431:41">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="432:17" pos:end="434:43"><expr pos:start="432:17" pos:end="434:42"><call pos:start="432:17" pos:end="434:42"><name pos:start="432:17" pos:end="432:28">qemu_opt_set</name><argument_list pos:start="432:29" pos:end="434:42">(<argument pos:start="432:30" pos:end="432:34"><expr pos:start="432:30" pos:end="432:34"><name pos:start="432:30" pos:end="432:34">fsdev</name></expr></argument>, <argument pos:start="432:37" pos:end="432:52"><expr pos:start="432:37" pos:end="432:52"><literal type="string" pos:start="432:37" pos:end="432:52">"security_model"</literal></expr></argument>,
                             <argument pos:start="433:30" pos:end="433:65"><expr pos:start="433:30" pos:end="433:65"><call pos:start="433:30" pos:end="433:65"><name pos:start="433:30" pos:end="433:41">qemu_opt_get</name><argument_list pos:start="433:42" pos:end="433:65">(<argument pos:start="433:43" pos:end="433:46"><expr pos:start="433:43" pos:end="433:46"><name pos:start="433:43" pos:end="433:46">opts</name></expr></argument>, <argument pos:start="433:49" pos:end="433:64"><expr pos:start="433:49" pos:end="433:64"><literal type="string" pos:start="433:49" pos:end="433:64">"security_model"</literal></expr></argument>)</argument_list></call></expr></argument>,
                             <argument pos:start="434:30" pos:end="434:41"><expr pos:start="434:30" pos:end="434:41"><operator pos:start="434:30" pos:end="434:30">&amp;</operator><name pos:start="434:31" pos:end="434:41">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="435:17" pos:end="435:54"><expr pos:start="435:17" pos:end="435:53"><name pos:start="435:17" pos:end="435:22">socket</name> <operator pos:start="435:24" pos:end="435:24">=</operator> <call pos:start="435:26" pos:end="435:53"><name pos:start="435:26" pos:end="435:37">qemu_opt_get</name><argument_list pos:start="435:38" pos:end="435:53">(<argument pos:start="435:39" pos:end="435:42"><expr pos:start="435:39" pos:end="435:42"><name pos:start="435:39" pos:end="435:42">opts</name></expr></argument>, <argument pos:start="435:45" pos:end="435:52"><expr pos:start="435:45" pos:end="435:52"><literal type="string" pos:start="435:45" pos:end="435:52">"socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="436:17" pos:end="1197:13"><if pos:start="436:17" pos:end="1197:13">if <condition pos:start="436:20" pos:end="436:27">(<expr pos:start="436:21" pos:end="436:26"><name pos:start="436:21" pos:end="436:26">socket</name></expr>)</condition> <block pos:start="436:29" pos:end="1197:13">{<block_content pos:start="437:21" pos:end="1197:13">
                    <expr_stmt pos:start="437:21" pos:end="437:72"><expr pos:start="437:21" pos:end="437:71"><call pos:start="437:21" pos:end="437:71"><name pos:start="437:21" pos:end="437:32">qemu_opt_set</name><argument_list pos:start="437:33" pos:end="437:71">(<argument pos:start="437:34" pos:end="437:38"><expr pos:start="437:34" pos:end="437:38"><name pos:start="437:34" pos:end="437:38">fsdev</name></expr></argument>, <argument pos:start="437:41" pos:end="437:48"><expr pos:start="437:41" pos:end="437:48"><literal type="string" pos:start="437:41" pos:end="437:48">"socket"</literal></expr></argument>, <argument pos:start="437:51" pos:end="437:56"><expr pos:start="437:51" pos:end="437:56"><name pos:start="437:51" pos:end="437:56">socket</name></expr></argument>, <argument pos:start="437:59" pos:end="437:70"><expr pos:start="437:59" pos:end="437:70"><operator pos:start="437:59" pos:end="437:59">&amp;</operator><name pos:start="437:60" pos:end="437:70">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="438:17" pos:end="438:56"><expr pos:start="438:17" pos:end="438:55"><name pos:start="438:17" pos:end="438:23">sock_fd</name> <operator pos:start="438:25" pos:end="438:25">=</operator> <call pos:start="438:27" pos:end="438:55"><name pos:start="438:27" pos:end="438:38">qemu_opt_get</name><argument_list pos:start="438:39" pos:end="438:55">(<argument pos:start="438:40" pos:end="438:43"><expr pos:start="438:40" pos:end="438:43"><name pos:start="438:40" pos:end="438:43">opts</name></expr></argument>, <argument pos:start="438:46" pos:end="438:54"><expr pos:start="438:46" pos:end="438:54"><literal type="string" pos:start="438:46" pos:end="438:54">"sock_fd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="439:17" pos:end="1197:13"><if pos:start="439:17" pos:end="1197:13">if <condition pos:start="439:20" pos:end="439:28">(<expr pos:start="439:21" pos:end="439:27"><name pos:start="439:21" pos:end="439:27">sock_fd</name></expr>)</condition> <block pos:start="439:30" pos:end="1197:13">{<block_content pos:start="440:21" pos:end="1197:13">
                    <expr_stmt pos:start="440:21" pos:end="440:74"><expr pos:start="440:21" pos:end="440:73"><call pos:start="440:21" pos:end="440:73"><name pos:start="440:21" pos:end="440:32">qemu_opt_set</name><argument_list pos:start="440:33" pos:end="440:73">(<argument pos:start="440:34" pos:end="440:38"><expr pos:start="440:34" pos:end="440:38"><name pos:start="440:34" pos:end="440:38">fsdev</name></expr></argument>, <argument pos:start="440:41" pos:end="440:49"><expr pos:start="440:41" pos:end="440:49"><literal type="string" pos:start="440:41" pos:end="440:49">"sock_fd"</literal></expr></argument>, <argument pos:start="440:52" pos:end="440:58"><expr pos:start="440:52" pos:end="440:58"><name pos:start="440:52" pos:end="440:58">sock_fd</name></expr></argument>, <argument pos:start="440:61" pos:end="440:72"><expr pos:start="440:61" pos:end="440:72"><operator pos:start="440:61" pos:end="440:61">&amp;</operator><name pos:start="440:62" pos:end="440:72">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="441:17" pos:end="443:48"><expr pos:start="441:17" pos:end="443:47"><call pos:start="441:17" pos:end="443:47"><name pos:start="441:17" pos:end="441:33">qemu_opt_set_bool</name><argument_list pos:start="441:34" pos:end="443:47">(<argument pos:start="441:35" pos:end="441:39"><expr pos:start="441:35" pos:end="441:39"><name pos:start="441:35" pos:end="441:39">fsdev</name></expr></argument>, <argument pos:start="441:42" pos:end="441:51"><expr pos:start="441:42" pos:end="441:51"><literal type="string" pos:start="441:42" pos:end="441:51">"readonly"</literal></expr></argument>,
                                  <argument pos:start="442:35" pos:end="442:72"><expr pos:start="442:35" pos:end="442:72"><call pos:start="442:35" pos:end="442:72"><name pos:start="442:35" pos:end="442:51">qemu_opt_get_bool</name><argument_list pos:start="442:52" pos:end="442:72">(<argument pos:start="442:53" pos:end="442:56"><expr pos:start="442:53" pos:end="442:56"><name pos:start="442:53" pos:end="442:56">opts</name></expr></argument>, <argument pos:start="442:59" pos:end="442:68"><expr pos:start="442:59" pos:end="442:68"><literal type="string" pos:start="442:59" pos:end="442:68">"readonly"</literal></expr></argument>, <argument pos:start="442:71" pos:end="442:71"><expr pos:start="442:71" pos:end="442:71"><literal type="number" pos:start="442:71" pos:end="442:71">0</literal></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument pos:start="443:35" pos:end="443:46"><expr pos:start="443:35" pos:end="443:46"><operator pos:start="443:35" pos:end="443:35">&amp;</operator><name pos:start="443:36" pos:end="443:46">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="444:17" pos:end="445:56"><expr pos:start="444:17" pos:end="445:55"><name pos:start="444:17" pos:end="444:22">device</name> <operator pos:start="444:24" pos:end="444:24">=</operator> <call pos:start="444:26" pos:end="445:55"><name pos:start="444:26" pos:end="444:41">qemu_opts_create</name><argument_list pos:start="444:42" pos:end="445:55">(<argument pos:start="444:43" pos:end="444:66"><expr pos:start="444:43" pos:end="444:66"><call pos:start="444:43" pos:end="444:66"><name pos:start="444:43" pos:end="444:56">qemu_find_opts</name><argument_list pos:start="444:57" pos:end="444:66">(<argument pos:start="444:58" pos:end="444:65"><expr pos:start="444:58" pos:end="444:65"><literal type="string" pos:start="444:58" pos:end="444:65">"device"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="444:69" pos:end="444:72"><expr pos:start="444:69" pos:end="444:72"><name pos:start="444:69" pos:end="444:72">NULL</name></expr></argument>, <argument pos:start="444:75" pos:end="444:75"><expr pos:start="444:75" pos:end="444:75"><literal type="number" pos:start="444:75" pos:end="444:75">0</literal></expr></argument>,
                                          <argument pos:start="445:43" pos:end="445:54"><expr pos:start="445:43" pos:end="445:54"><operator pos:start="445:43" pos:end="445:43">&amp;</operator><name pos:start="445:44" pos:end="445:54">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="446:17" pos:end="446:78"><expr pos:start="446:17" pos:end="446:77"><call pos:start="446:17" pos:end="446:77"><name pos:start="446:17" pos:end="446:28">qemu_opt_set</name><argument_list pos:start="446:29" pos:end="446:77">(<argument pos:start="446:30" pos:end="446:35"><expr pos:start="446:30" pos:end="446:35"><name pos:start="446:30" pos:end="446:35">device</name></expr></argument>, <argument pos:start="446:38" pos:end="446:45"><expr pos:start="446:38" pos:end="446:45"><literal type="string" pos:start="446:38" pos:end="446:45">"driver"</literal></expr></argument>, <argument pos:start="446:48" pos:end="446:62"><expr pos:start="446:48" pos:end="446:62"><literal type="string" pos:start="446:48" pos:end="446:62">"virtio-9p-pci"</literal></expr></argument>, <argument pos:start="446:65" pos:end="446:76"><expr pos:start="446:65" pos:end="446:76"><operator pos:start="446:65" pos:end="446:65">&amp;</operator><name pos:start="446:66" pos:end="446:76">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="447:17" pos:end="448:76"><expr pos:start="447:17" pos:end="448:75"><call pos:start="447:17" pos:end="448:75"><name pos:start="447:17" pos:end="447:28">qemu_opt_set</name><argument_list pos:start="447:29" pos:end="448:75">(<argument pos:start="447:30" pos:end="447:35"><expr pos:start="447:30" pos:end="447:35"><name pos:start="447:30" pos:end="447:35">device</name></expr></argument>, <argument pos:start="447:38" pos:end="447:44"><expr pos:start="447:38" pos:end="447:44"><literal type="string" pos:start="447:38" pos:end="447:44">"fsdev"</literal></expr></argument>,
                             <argument pos:start="448:30" pos:end="448:60"><expr pos:start="448:30" pos:end="448:60"><call pos:start="448:30" pos:end="448:60"><name pos:start="448:30" pos:end="448:41">qemu_opt_get</name><argument_list pos:start="448:42" pos:end="448:60">(<argument pos:start="448:43" pos:end="448:46"><expr pos:start="448:43" pos:end="448:46"><name pos:start="448:43" pos:end="448:46">opts</name></expr></argument>, <argument pos:start="448:49" pos:end="448:59"><expr pos:start="448:49" pos:end="448:59"><literal type="string" pos:start="448:49" pos:end="448:59">"mount_tag"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="448:63" pos:end="448:74"><expr pos:start="448:63" pos:end="448:74"><operator pos:start="448:63" pos:end="448:63">&amp;</operator><name pos:start="448:64" pos:end="448:74">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="449:17" pos:end="450:76"><expr pos:start="449:17" pos:end="450:75"><call pos:start="449:17" pos:end="450:75"><name pos:start="449:17" pos:end="449:28">qemu_opt_set</name><argument_list pos:start="449:29" pos:end="450:75">(<argument pos:start="449:30" pos:end="449:35"><expr pos:start="449:30" pos:end="449:35"><name pos:start="449:30" pos:end="449:35">device</name></expr></argument>, <argument pos:start="449:38" pos:end="449:48"><expr pos:start="449:38" pos:end="449:48"><literal type="string" pos:start="449:38" pos:end="449:48">"mount_tag"</literal></expr></argument>,
                             <argument pos:start="450:30" pos:end="450:60"><expr pos:start="450:30" pos:end="450:60"><call pos:start="450:30" pos:end="450:60"><name pos:start="450:30" pos:end="450:41">qemu_opt_get</name><argument_list pos:start="450:42" pos:end="450:60">(<argument pos:start="450:43" pos:end="450:46"><expr pos:start="450:43" pos:end="450:46"><name pos:start="450:43" pos:end="450:46">opts</name></expr></argument>, <argument pos:start="450:49" pos:end="450:59"><expr pos:start="450:49" pos:end="450:59"><literal type="string" pos:start="450:49" pos:end="450:59">"mount_tag"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="450:63" pos:end="450:74"><expr pos:start="450:63" pos:end="450:74"><operator pos:start="450:63" pos:end="450:63">&amp;</operator><name pos:start="450:64" pos:end="450:74">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="451:13" pos:end="451:42">case <expr pos:start="451:18" pos:end="451:41"><name pos:start="451:18" pos:end="451:41">QEMU_OPTION_virtfs_synth</name></expr>:</case> <block pos:start="451:44" pos:end="1197:13">{<block_content pos:start="452:17" pos:end="1197:13">
                <decl_stmt pos:start="452:17" pos:end="452:32"><decl pos:start="452:17" pos:end="452:31"><type pos:start="452:17" pos:end="452:26"><name pos:start="452:17" pos:end="452:24">QemuOpts</name> <modifier pos:start="452:26" pos:end="452:26">*</modifier></type><name pos:start="452:27" pos:end="452:31">fsdev</name></decl>;</decl_stmt>
                <decl_stmt pos:start="453:17" pos:end="453:33"><decl pos:start="453:17" pos:end="453:32"><type pos:start="453:17" pos:end="453:26"><name pos:start="453:17" pos:end="453:24">QemuOpts</name> <modifier pos:start="453:26" pos:end="453:26">*</modifier></type><name pos:start="453:27" pos:end="453:32">device</name></decl>;</decl_stmt>
                <expr_stmt pos:start="454:17" pos:end="455:50"><expr pos:start="454:17" pos:end="455:49"><name pos:start="454:17" pos:end="454:21">fsdev</name> <operator pos:start="454:23" pos:end="454:23">=</operator> <call pos:start="454:25" pos:end="455:49"><name pos:start="454:25" pos:end="454:40">qemu_opts_create</name><argument_list pos:start="454:41" pos:end="455:49">(<argument pos:start="454:42" pos:end="454:64"><expr pos:start="454:42" pos:end="454:64"><call pos:start="454:42" pos:end="454:64"><name pos:start="454:42" pos:end="454:55">qemu_find_opts</name><argument_list pos:start="454:56" pos:end="454:64">(<argument pos:start="454:57" pos:end="454:63"><expr pos:start="454:57" pos:end="454:63"><literal type="string" pos:start="454:57" pos:end="454:63">"fsdev"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="454:67" pos:end="454:75"><expr pos:start="454:67" pos:end="454:75"><literal type="string" pos:start="454:67" pos:end="454:75">"v_synth"</literal></expr></argument>,
                                         <argument pos:start="455:42" pos:end="455:42"><expr pos:start="455:42" pos:end="455:42"><literal type="number" pos:start="455:42" pos:end="455:42">1</literal></expr></argument>, <argument pos:start="455:45" pos:end="455:48"><expr pos:start="455:45" pos:end="455:48"><name pos:start="455:45" pos:end="455:48">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="456:17" pos:end="1197:13"><if pos:start="456:17" pos:end="1197:13">if <condition pos:start="456:20" pos:end="456:27">(<expr pos:start="456:21" pos:end="456:26"><operator pos:start="456:21" pos:end="456:21">!</operator><name pos:start="456:22" pos:end="456:26">fsdev</name></expr>)</condition> <block pos:start="456:29" pos:end="1197:13">{<block_content pos:start="457:21" pos:end="1197:13">
                    <expr_stmt pos:start="457:21" pos:end="457:73"><expr pos:start="457:21" pos:end="457:72"><call pos:start="457:21" pos:end="457:72"><name pos:start="457:21" pos:end="457:32">error_report</name><argument_list pos:start="457:33" pos:end="457:72">(<argument pos:start="457:34" pos:end="457:55"><expr pos:start="457:34" pos:end="457:55"><literal type="string" pos:start="457:34" pos:end="457:55">"duplicate option: %s"</literal></expr></argument>, <argument pos:start="457:58" pos:end="457:71"><expr pos:start="457:58" pos:end="457:71"><literal type="string" pos:start="457:58" pos:end="457:71">"virtfs_synth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="458:17" pos:end="458:71"><expr pos:start="458:17" pos:end="458:70"><call pos:start="458:17" pos:end="458:70"><name pos:start="458:17" pos:end="458:28">qemu_opt_set</name><argument_list pos:start="458:29" pos:end="458:70">(<argument pos:start="458:30" pos:end="458:34"><expr pos:start="458:30" pos:end="458:34"><name pos:start="458:30" pos:end="458:34">fsdev</name></expr></argument>, <argument pos:start="458:37" pos:end="458:46"><expr pos:start="458:37" pos:end="458:46"><literal type="string" pos:start="458:37" pos:end="458:46">"fsdriver"</literal></expr></argument>, <argument pos:start="458:49" pos:end="458:55"><expr pos:start="458:49" pos:end="458:55"><literal type="string" pos:start="458:49" pos:end="458:55">"synth"</literal></expr></argument>, <argument pos:start="458:58" pos:end="458:69"><expr pos:start="458:58" pos:end="458:69"><operator pos:start="458:58" pos:end="458:58">&amp;</operator><name pos:start="458:59" pos:end="458:69">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="459:17" pos:end="460:56"><expr pos:start="459:17" pos:end="460:55"><name pos:start="459:17" pos:end="459:22">device</name> <operator pos:start="459:24" pos:end="459:24">=</operator> <call pos:start="459:26" pos:end="460:55"><name pos:start="459:26" pos:end="459:41">qemu_opts_create</name><argument_list pos:start="459:42" pos:end="460:55">(<argument pos:start="459:43" pos:end="459:66"><expr pos:start="459:43" pos:end="459:66"><call pos:start="459:43" pos:end="459:66"><name pos:start="459:43" pos:end="459:56">qemu_find_opts</name><argument_list pos:start="459:57" pos:end="459:66">(<argument pos:start="459:58" pos:end="459:65"><expr pos:start="459:58" pos:end="459:65"><literal type="string" pos:start="459:58" pos:end="459:65">"device"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="459:69" pos:end="459:72"><expr pos:start="459:69" pos:end="459:72"><name pos:start="459:69" pos:end="459:72">NULL</name></expr></argument>, <argument pos:start="459:75" pos:end="459:75"><expr pos:start="459:75" pos:end="459:75"><literal type="number" pos:start="459:75" pos:end="459:75">0</literal></expr></argument>,
                                          <argument pos:start="460:43" pos:end="460:54"><expr pos:start="460:43" pos:end="460:54"><operator pos:start="460:43" pos:end="460:43">&amp;</operator><name pos:start="460:44" pos:end="460:54">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="461:17" pos:end="461:78"><expr pos:start="461:17" pos:end="461:77"><call pos:start="461:17" pos:end="461:77"><name pos:start="461:17" pos:end="461:28">qemu_opt_set</name><argument_list pos:start="461:29" pos:end="461:77">(<argument pos:start="461:30" pos:end="461:35"><expr pos:start="461:30" pos:end="461:35"><name pos:start="461:30" pos:end="461:35">device</name></expr></argument>, <argument pos:start="461:38" pos:end="461:45"><expr pos:start="461:38" pos:end="461:45"><literal type="string" pos:start="461:38" pos:end="461:45">"driver"</literal></expr></argument>, <argument pos:start="461:48" pos:end="461:62"><expr pos:start="461:48" pos:end="461:62"><literal type="string" pos:start="461:48" pos:end="461:62">"virtio-9p-pci"</literal></expr></argument>, <argument pos:start="461:65" pos:end="461:76"><expr pos:start="461:65" pos:end="461:76"><operator pos:start="461:65" pos:end="461:65">&amp;</operator><name pos:start="461:66" pos:end="461:76">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="462:17" pos:end="462:71"><expr pos:start="462:17" pos:end="462:70"><call pos:start="462:17" pos:end="462:70"><name pos:start="462:17" pos:end="462:28">qemu_opt_set</name><argument_list pos:start="462:29" pos:end="462:70">(<argument pos:start="462:30" pos:end="462:35"><expr pos:start="462:30" pos:end="462:35"><name pos:start="462:30" pos:end="462:35">device</name></expr></argument>, <argument pos:start="462:38" pos:end="462:44"><expr pos:start="462:38" pos:end="462:44"><literal type="string" pos:start="462:38" pos:end="462:44">"fsdev"</literal></expr></argument>, <argument pos:start="462:47" pos:end="462:55"><expr pos:start="462:47" pos:end="462:55"><literal type="string" pos:start="462:47" pos:end="462:55">"v_synth"</literal></expr></argument>, <argument pos:start="462:58" pos:end="462:69"><expr pos:start="462:58" pos:end="462:69"><operator pos:start="462:58" pos:end="462:58">&amp;</operator><name pos:start="462:59" pos:end="462:69">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="463:17" pos:end="463:75"><expr pos:start="463:17" pos:end="463:74"><call pos:start="463:17" pos:end="463:74"><name pos:start="463:17" pos:end="463:28">qemu_opt_set</name><argument_list pos:start="463:29" pos:end="463:74">(<argument pos:start="463:30" pos:end="463:35"><expr pos:start="463:30" pos:end="463:35"><name pos:start="463:30" pos:end="463:35">device</name></expr></argument>, <argument pos:start="463:38" pos:end="463:48"><expr pos:start="463:38" pos:end="463:48"><literal type="string" pos:start="463:38" pos:end="463:48">"mount_tag"</literal></expr></argument>, <argument pos:start="463:51" pos:end="463:59"><expr pos:start="463:51" pos:end="463:59"><literal type="string" pos:start="463:51" pos:end="463:59">"v_synth"</literal></expr></argument>, <argument pos:start="463:62" pos:end="463:73"><expr pos:start="463:62" pos:end="463:73"><operator pos:start="463:62" pos:end="463:62">&amp;</operator><name pos:start="463:63" pos:end="463:73">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="464:13" pos:end="464:36">case <expr pos:start="464:18" pos:end="464:35"><name pos:start="464:18" pos:end="464:35">QEMU_OPTION_serial</name></expr>:</case>
                <expr_stmt pos:start="465:17" pos:end="465:54"><expr pos:start="465:17" pos:end="465:53"><call pos:start="465:17" pos:end="465:53"><name pos:start="465:17" pos:end="465:33">add_device_config</name><argument_list pos:start="465:34" pos:end="465:53">(<argument pos:start="465:35" pos:end="465:44"><expr pos:start="465:35" pos:end="465:44"><name pos:start="465:35" pos:end="465:44">DEV_SERIAL</name></expr></argument>, <argument pos:start="465:47" pos:end="465:52"><expr pos:start="465:47" pos:end="465:52"><name pos:start="465:47" pos:end="465:52">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="466:17" pos:end="466:35"><expr pos:start="466:17" pos:end="466:34"><name pos:start="466:17" pos:end="466:30">default_serial</name> <operator pos:start="466:32" pos:end="466:32">=</operator> <literal type="number" pos:start="466:34" pos:end="466:34">0</literal></expr>;</expr_stmt>
                <if_stmt pos:start="467:17" pos:end="1197:13"><if pos:start="467:17" pos:end="1197:13">if <condition pos:start="467:20" pos:end="467:52">(<expr pos:start="467:21" pos:end="467:51"><call pos:start="467:21" pos:end="467:46"><name pos:start="467:21" pos:end="467:27">strncmp</name><argument_list pos:start="467:28" pos:end="467:46">(<argument pos:start="467:29" pos:end="467:34"><expr pos:start="467:29" pos:end="467:34"><name pos:start="467:29" pos:end="467:34">optarg</name></expr></argument>, <argument pos:start="467:37" pos:end="467:42"><expr pos:start="467:37" pos:end="467:42"><literal type="string" pos:start="467:37" pos:end="467:42">"mon:"</literal></expr></argument>, <argument pos:start="467:45" pos:end="467:45"><expr pos:start="467:45" pos:end="467:45"><literal type="number" pos:start="467:45" pos:end="467:45">4</literal></expr></argument>)</argument_list></call> <operator pos:start="467:48" pos:end="467:49">==</operator> <literal type="number" pos:start="467:51" pos:end="467:51">0</literal></expr>)</condition> <block pos:start="467:54" pos:end="1197:13">{<block_content pos:start="468:21" pos:end="1197:13">
                    <expr_stmt pos:start="468:21" pos:end="468:40"><expr pos:start="468:21" pos:end="468:39"><name pos:start="468:21" pos:end="468:35">default_monitor</name> <operator pos:start="468:37" pos:end="468:37">=</operator> <literal type="number" pos:start="468:39" pos:end="468:39">0</literal></expr>;</expr_stmt>
            <case pos:start="469:13" pos:end="469:38">case <expr pos:start="469:18" pos:end="469:37"><name pos:start="469:18" pos:end="469:37">QEMU_OPTION_watchdog</name></expr>:</case>
                <if_stmt pos:start="470:17" pos:end="1197:13"><if pos:start="470:17" pos:end="1197:13">if <condition pos:start="470:20" pos:end="470:29">(<expr pos:start="470:21" pos:end="470:28"><name pos:start="470:21" pos:end="470:28">watchdog</name></expr>)</condition> <block pos:start="470:31" pos:end="1197:13">{<block_content pos:start="471:21" pos:end="1197:13">
                    <expr_stmt pos:start="471:21" pos:end="471:74"><expr pos:start="471:21" pos:end="471:73"><call pos:start="471:21" pos:end="471:73"><name pos:start="471:21" pos:end="471:32">error_report</name><argument_list pos:start="471:33" pos:end="471:73">(<argument pos:start="471:34" pos:end="471:72"><expr pos:start="471:34" pos:end="471:72"><literal type="string" pos:start="471:34" pos:end="471:72">"only one watchdog option may be given"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return pos:start="472:21" pos:end="472:29">return <expr pos:start="472:28" pos:end="472:28"><literal type="number" pos:start="472:28" pos:end="472:28">1</literal></expr>;</return>
                <expr_stmt pos:start="473:17" pos:end="473:34"><expr pos:start="473:17" pos:end="473:33"><name pos:start="473:17" pos:end="473:24">watchdog</name> <operator pos:start="473:26" pos:end="473:26">=</operator> <name pos:start="473:28" pos:end="473:33">optarg</name></expr>;</expr_stmt>
            <case pos:start="474:13" pos:end="474:45">case <expr pos:start="474:18" pos:end="474:44"><name pos:start="474:18" pos:end="474:44">QEMU_OPTION_watchdog_action</name></expr>:</case>
                <if_stmt pos:start="475:17" pos:end="1197:13"><if pos:start="475:17" pos:end="1197:13">if <condition pos:start="475:20" pos:end="475:57">(<expr pos:start="475:21" pos:end="475:56"><call pos:start="475:21" pos:end="475:50"><name pos:start="475:21" pos:end="475:42">select_watchdog_action</name><argument_list pos:start="475:43" pos:end="475:50">(<argument pos:start="475:44" pos:end="475:49"><expr pos:start="475:44" pos:end="475:49"><name pos:start="475:44" pos:end="475:49">optarg</name></expr></argument>)</argument_list></call> <operator pos:start="475:52" pos:end="475:53">==</operator> <operator pos:start="475:55" pos:end="475:55">-</operator><literal type="number" pos:start="475:56" pos:end="475:56">1</literal></expr>)</condition> <block pos:start="475:59" pos:end="1197:13">{<block_content pos:start="476:21" pos:end="1197:13">
                    <expr_stmt pos:start="476:21" pos:end="476:71"><expr pos:start="476:21" pos:end="476:70"><call pos:start="476:21" pos:end="476:70"><name pos:start="476:21" pos:end="476:32">error_report</name><argument_list pos:start="476:33" pos:end="476:70">(<argument pos:start="476:34" pos:end="476:69"><expr pos:start="476:34" pos:end="476:69"><literal type="string" pos:start="476:34" pos:end="476:69">"unknown -watchdog-action parameter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="477:13" pos:end="477:39">case <expr pos:start="477:18" pos:end="477:38"><name pos:start="477:18" pos:end="477:38">QEMU_OPTION_virtiocon</name></expr>:</case>
                <expr_stmt pos:start="478:17" pos:end="478:55"><expr pos:start="478:17" pos:end="478:54"><call pos:start="478:17" pos:end="478:54"><name pos:start="478:17" pos:end="478:33">add_device_config</name><argument_list pos:start="478:34" pos:end="478:54">(<argument pos:start="478:35" pos:end="478:45"><expr pos:start="478:35" pos:end="478:45"><name pos:start="478:35" pos:end="478:45">DEV_VIRTCON</name></expr></argument>, <argument pos:start="478:48" pos:end="478:53"><expr pos:start="478:48" pos:end="478:53"><name pos:start="478:48" pos:end="478:53">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="479:17" pos:end="479:36"><expr pos:start="479:17" pos:end="479:35"><name pos:start="479:17" pos:end="479:31">default_virtcon</name> <operator pos:start="479:33" pos:end="479:33">=</operator> <literal type="number" pos:start="479:35" pos:end="479:35">0</literal></expr>;</expr_stmt>
                <if_stmt pos:start="480:17" pos:end="1197:13"><if pos:start="480:17" pos:end="1197:13">if <condition pos:start="480:20" pos:end="480:52">(<expr pos:start="480:21" pos:end="480:51"><call pos:start="480:21" pos:end="480:46"><name pos:start="480:21" pos:end="480:27">strncmp</name><argument_list pos:start="480:28" pos:end="480:46">(<argument pos:start="480:29" pos:end="480:34"><expr pos:start="480:29" pos:end="480:34"><name pos:start="480:29" pos:end="480:34">optarg</name></expr></argument>, <argument pos:start="480:37" pos:end="480:42"><expr pos:start="480:37" pos:end="480:42"><literal type="string" pos:start="480:37" pos:end="480:42">"mon:"</literal></expr></argument>, <argument pos:start="480:45" pos:end="480:45"><expr pos:start="480:45" pos:end="480:45"><literal type="number" pos:start="480:45" pos:end="480:45">4</literal></expr></argument>)</argument_list></call> <operator pos:start="480:48" pos:end="480:49">==</operator> <literal type="number" pos:start="480:51" pos:end="480:51">0</literal></expr>)</condition> <block pos:start="480:54" pos:end="1197:13">{<block_content pos:start="481:21" pos:end="1197:13">
                    <expr_stmt pos:start="481:21" pos:end="481:40"><expr pos:start="481:21" pos:end="481:39"><name pos:start="481:21" pos:end="481:35">default_monitor</name> <operator pos:start="481:37" pos:end="481:37">=</operator> <literal type="number" pos:start="481:39" pos:end="481:39">0</literal></expr>;</expr_stmt>
            <case pos:start="482:13" pos:end="482:38">case <expr pos:start="482:18" pos:end="482:37"><name pos:start="482:18" pos:end="482:37">QEMU_OPTION_parallel</name></expr>:</case>
                <expr_stmt pos:start="483:17" pos:end="483:56"><expr pos:start="483:17" pos:end="483:55"><call pos:start="483:17" pos:end="483:55"><name pos:start="483:17" pos:end="483:33">add_device_config</name><argument_list pos:start="483:34" pos:end="483:55">(<argument pos:start="483:35" pos:end="483:46"><expr pos:start="483:35" pos:end="483:46"><name pos:start="483:35" pos:end="483:46">DEV_PARALLEL</name></expr></argument>, <argument pos:start="483:49" pos:end="483:54"><expr pos:start="483:49" pos:end="483:54"><name pos:start="483:49" pos:end="483:54">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="484:17" pos:end="484:37"><expr pos:start="484:17" pos:end="484:36"><name pos:start="484:17" pos:end="484:32">default_parallel</name> <operator pos:start="484:34" pos:end="484:34">=</operator> <literal type="number" pos:start="484:36" pos:end="484:36">0</literal></expr>;</expr_stmt>
                <if_stmt pos:start="485:17" pos:end="1197:13"><if pos:start="485:17" pos:end="1197:13">if <condition pos:start="485:20" pos:end="485:52">(<expr pos:start="485:21" pos:end="485:51"><call pos:start="485:21" pos:end="485:46"><name pos:start="485:21" pos:end="485:27">strncmp</name><argument_list pos:start="485:28" pos:end="485:46">(<argument pos:start="485:29" pos:end="485:34"><expr pos:start="485:29" pos:end="485:34"><name pos:start="485:29" pos:end="485:34">optarg</name></expr></argument>, <argument pos:start="485:37" pos:end="485:42"><expr pos:start="485:37" pos:end="485:42"><literal type="string" pos:start="485:37" pos:end="485:42">"mon:"</literal></expr></argument>, <argument pos:start="485:45" pos:end="485:45"><expr pos:start="485:45" pos:end="485:45"><literal type="number" pos:start="485:45" pos:end="485:45">4</literal></expr></argument>)</argument_list></call> <operator pos:start="485:48" pos:end="485:49">==</operator> <literal type="number" pos:start="485:51" pos:end="485:51">0</literal></expr>)</condition> <block pos:start="485:54" pos:end="1197:13">{<block_content pos:start="486:21" pos:end="1197:13">
                    <expr_stmt pos:start="486:21" pos:end="486:40"><expr pos:start="486:21" pos:end="486:39"><name pos:start="486:21" pos:end="486:35">default_monitor</name> <operator pos:start="486:37" pos:end="486:37">=</operator> <literal type="number" pos:start="486:39" pos:end="486:39">0</literal></expr>;</expr_stmt>
            <case pos:start="487:13" pos:end="487:38">case <expr pos:start="487:18" pos:end="487:37"><name pos:start="487:18" pos:end="487:37">QEMU_OPTION_debugcon</name></expr>:</case>
                <expr_stmt pos:start="488:17" pos:end="488:56"><expr pos:start="488:17" pos:end="488:55"><call pos:start="488:17" pos:end="488:55"><name pos:start="488:17" pos:end="488:33">add_device_config</name><argument_list pos:start="488:34" pos:end="488:55">(<argument pos:start="488:35" pos:end="488:46"><expr pos:start="488:35" pos:end="488:46"><name pos:start="488:35" pos:end="488:46">DEV_DEBUGCON</name></expr></argument>, <argument pos:start="488:49" pos:end="488:54"><expr pos:start="488:49" pos:end="488:54"><name pos:start="488:49" pos:end="488:54">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="489:13" pos:end="489:36">case <expr pos:start="489:18" pos:end="489:35"><name pos:start="489:18" pos:end="489:35">QEMU_OPTION_loadvm</name></expr>:</case>
                <expr_stmt pos:start="490:17" pos:end="490:32"><expr pos:start="490:17" pos:end="490:31"><name pos:start="490:17" pos:end="490:22">loadvm</name> <operator pos:start="490:24" pos:end="490:24">=</operator> <name pos:start="490:26" pos:end="490:31">optarg</name></expr>;</expr_stmt>
            <case pos:start="491:13" pos:end="491:41">case <expr pos:start="491:18" pos:end="491:40"><name pos:start="491:18" pos:end="491:40">QEMU_OPTION_full_screen</name></expr>:</case>
                <expr_stmt pos:start="492:17" pos:end="492:32"><expr pos:start="492:17" pos:end="492:31"><name pos:start="492:17" pos:end="492:27">full_screen</name> <operator pos:start="492:29" pos:end="492:29">=</operator> <literal type="number" pos:start="492:31" pos:end="492:31">1</literal></expr>;</expr_stmt>
            <case pos:start="493:13" pos:end="493:38">case <expr pos:start="493:18" pos:end="493:37"><name pos:start="493:18" pos:end="493:37">QEMU_OPTION_no_frame</name></expr>:</case>
                <expr_stmt pos:start="494:17" pos:end="494:29"><expr pos:start="494:17" pos:end="494:28"><name pos:start="494:17" pos:end="494:24">no_frame</name> <operator pos:start="494:26" pos:end="494:26">=</operator> <literal type="number" pos:start="494:28" pos:end="494:28">1</literal></expr>;</expr_stmt>
            <case pos:start="495:13" pos:end="495:38">case <expr pos:start="495:18" pos:end="495:37"><name pos:start="495:18" pos:end="495:37">QEMU_OPTION_alt_grab</name></expr>:</case>
                <expr_stmt pos:start="496:17" pos:end="496:29"><expr pos:start="496:17" pos:end="496:28"><name pos:start="496:17" pos:end="496:24">alt_grab</name> <operator pos:start="496:26" pos:end="496:26">=</operator> <literal type="number" pos:start="496:28" pos:end="496:28">1</literal></expr>;</expr_stmt>
            <case pos:start="497:13" pos:end="497:39">case <expr pos:start="497:18" pos:end="497:38"><name pos:start="497:18" pos:end="497:38">QEMU_OPTION_ctrl_grab</name></expr>:</case>
                <expr_stmt pos:start="498:17" pos:end="498:30"><expr pos:start="498:17" pos:end="498:29"><name pos:start="498:17" pos:end="498:25">ctrl_grab</name> <operator pos:start="498:27" pos:end="498:27">=</operator> <literal type="number" pos:start="498:29" pos:end="498:29">1</literal></expr>;</expr_stmt>
            <case pos:start="499:13" pos:end="499:37">case <expr pos:start="499:18" pos:end="499:36"><name pos:start="499:18" pos:end="499:36">QEMU_OPTION_no_quit</name></expr>:</case>
                <expr_stmt pos:start="500:17" pos:end="500:28"><expr pos:start="500:17" pos:end="500:27"><name pos:start="500:17" pos:end="500:23">no_quit</name> <operator pos:start="500:25" pos:end="500:25">=</operator> <literal type="number" pos:start="500:27" pos:end="500:27">1</literal></expr>;</expr_stmt>
            <case pos:start="501:13" pos:end="503:0">case <expr pos:start="501:18" pos:end="501:32"><name pos:start="501:18" pos:end="501:32">QEMU_OPTION_sdl</name></expr>:</case>
<cpp:ifdef pos:start="502:1" pos:end="502:17">#<cpp:directive pos:start="502:2" pos:end="502:6">ifdef</cpp:directive> <name pos:start="502:8" pos:end="502:17">CONFIG_SDL</name></cpp:ifdef>
                <expr_stmt pos:start="503:17" pos:end="505:0"><expr pos:start="503:17" pos:end="503:37"><name pos:start="503:17" pos:end="503:28">display_type</name> <operator pos:start="503:30" pos:end="503:30">=</operator> <name pos:start="503:32" pos:end="503:37">DT_SDL</name></expr>;</expr_stmt>
<cpp:else pos:start="504:1" pos:end="504:5">#<cpp:directive pos:start="504:2" pos:end="504:5">else</cpp:directive></cpp:else>
                <expr_stmt pos:start="505:17" pos:end="507:0"><expr pos:start="505:17" pos:end="505:55"><call pos:start="505:17" pos:end="505:55"><name pos:start="505:17" pos:end="505:28">error_report</name><argument_list pos:start="505:29" pos:end="505:55">(<argument pos:start="505:30" pos:end="505:54"><expr pos:start="505:30" pos:end="505:54"><literal type="string" pos:start="505:30" pos:end="505:54">"SDL support is disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="506:1" pos:end="506:6">#<cpp:directive pos:start="506:2" pos:end="506:6">endif</cpp:directive></cpp:endif>
            <case pos:start="507:13" pos:end="507:37">case <expr pos:start="507:18" pos:end="507:36"><name pos:start="507:18" pos:end="507:36">QEMU_OPTION_pidfile</name></expr>:</case>
                <expr_stmt pos:start="508:17" pos:end="508:34"><expr pos:start="508:17" pos:end="508:33"><name pos:start="508:17" pos:end="508:24">pid_file</name> <operator pos:start="508:26" pos:end="508:26">=</operator> <name pos:start="508:28" pos:end="508:33">optarg</name></expr>;</expr_stmt>
            <case pos:start="509:13" pos:end="509:40">case <expr pos:start="509:18" pos:end="509:39"><name pos:start="509:18" pos:end="509:39">QEMU_OPTION_win2k_hack</name></expr>:</case>
                <expr_stmt pos:start="510:17" pos:end="510:39"><expr pos:start="510:17" pos:end="510:38"><name pos:start="510:17" pos:end="510:34">win2k_install_hack</name> <operator pos:start="510:36" pos:end="510:36">=</operator> <literal type="number" pos:start="510:38" pos:end="510:38">1</literal></expr>;</expr_stmt>
            <case pos:start="511:13" pos:end="511:41">case <expr pos:start="511:18" pos:end="511:40"><name pos:start="511:18" pos:end="511:40">QEMU_OPTION_rtc_td_hack</name></expr>:</case> <block pos:start="511:43" pos:end="1197:13">{<block_content pos:start="512:17" pos:end="1197:13">
                <decl_stmt pos:start="512:17" pos:end="516:18"><decl pos:start="512:17" pos:end="516:17"><type pos:start="512:17" pos:end="512:37"><specifier pos:start="512:17" pos:end="512:22">static</specifier> <name pos:start="512:24" pos:end="512:37">GlobalProperty</name></type> <name pos:start="512:39" pos:end="512:53">slew_lost_ticks</name> <init pos:start="512:55" pos:end="516:17">= <expr pos:start="512:57" pos:end="516:17"><block pos:start="512:57" pos:end="516:17">{
                    <expr pos:start="513:21" pos:end="513:45"><operator pos:start="513:21" pos:end="513:21">.</operator><name pos:start="513:22" pos:end="513:27">driver</name>   <operator pos:start="513:31" pos:end="513:31">=</operator> <literal type="string" pos:start="513:33" pos:end="513:45">"mc146818rtc"</literal></expr>,
                    <expr pos:start="514:21" pos:end="514:50"><operator pos:start="514:21" pos:end="514:21">.</operator><name pos:start="514:22" pos:end="514:29">property</name> <operator pos:start="514:31" pos:end="514:31">=</operator> <literal type="string" pos:start="514:33" pos:end="514:50">"lost_tick_policy"</literal></expr>,
                    <expr pos:start="515:21" pos:end="515:38"><operator pos:start="515:21" pos:end="515:21">.</operator><name pos:start="515:22" pos:end="515:26">value</name>    <operator pos:start="515:31" pos:end="515:31">=</operator> <literal type="string" pos:start="515:33" pos:end="515:38">"slew"</literal></expr>,
                }</block></expr></init></decl>;</decl_stmt>
                <expr_stmt pos:start="517:17" pos:end="517:60"><expr pos:start="517:17" pos:end="517:59"><call pos:start="517:17" pos:end="517:59"><name pos:start="517:17" pos:end="517:41">qdev_prop_register_global</name><argument_list pos:start="517:42" pos:end="517:59">(<argument pos:start="517:43" pos:end="517:58"><expr pos:start="517:43" pos:end="517:58"><operator pos:start="517:43" pos:end="517:43">&amp;</operator><name pos:start="517:44" pos:end="517:58">slew_lost_ticks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="518:13" pos:end="518:39">case <expr pos:start="518:18" pos:end="518:38"><name pos:start="518:18" pos:end="518:38">QEMU_OPTION_acpitable</name></expr>:</case>
                <expr_stmt pos:start="519:17" pos:end="520:61"><expr pos:start="519:17" pos:end="520:60"><name pos:start="519:17" pos:end="519:20">opts</name> <operator pos:start="519:22" pos:end="519:22">=</operator> <call pos:start="519:24" pos:end="520:60"><name pos:start="519:24" pos:end="519:46">qemu_opts_parse_noisily</name><argument_list pos:start="519:47" pos:end="520:60">(<argument pos:start="519:48" pos:end="519:69"><expr pos:start="519:48" pos:end="519:69"><call pos:start="519:48" pos:end="519:69"><name pos:start="519:48" pos:end="519:61">qemu_find_opts</name><argument_list pos:start="519:62" pos:end="519:69">(<argument pos:start="519:63" pos:end="519:68"><expr pos:start="519:63" pos:end="519:68"><literal type="string" pos:start="519:63" pos:end="519:68">"acpi"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                               <argument pos:start="520:48" pos:end="520:53"><expr pos:start="520:48" pos:end="520:53"><name pos:start="520:48" pos:end="520:53">optarg</name></expr></argument>, <argument pos:start="520:56" pos:end="520:59"><expr pos:start="520:56" pos:end="520:59"><name pos:start="520:56" pos:end="520:59">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="521:17" pos:end="1197:13"><if pos:start="521:17" pos:end="1197:13">if <condition pos:start="521:20" pos:end="521:26">(<expr pos:start="521:21" pos:end="521:25"><operator pos:start="521:21" pos:end="521:21">!</operator><name pos:start="521:22" pos:end="521:25">opts</name></expr>)</condition> <block pos:start="521:28" pos:end="1197:13">{<block_content pos:start="522:17" pos:end="1197:13">
                <expr_stmt pos:start="522:17" pos:end="522:51"><expr pos:start="522:17" pos:end="522:50"><call pos:start="522:17" pos:end="522:50"><name pos:start="522:17" pos:end="522:30">acpi_table_add</name><argument_list pos:start="522:31" pos:end="522:50">(<argument pos:start="522:32" pos:end="522:35"><expr pos:start="522:32" pos:end="522:35"><name pos:start="522:32" pos:end="522:35">opts</name></expr></argument>, <argument pos:start="522:38" pos:end="522:49"><expr pos:start="522:38" pos:end="522:49"><operator pos:start="522:38" pos:end="522:38">&amp;</operator><name pos:start="522:39" pos:end="522:49">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="523:13" pos:end="523:36">case <expr pos:start="523:18" pos:end="523:35"><name pos:start="523:18" pos:end="523:35">QEMU_OPTION_smbios</name></expr>:</case>
                <expr_stmt pos:start="524:17" pos:end="525:62"><expr pos:start="524:17" pos:end="525:61"><name pos:start="524:17" pos:end="524:20">opts</name> <operator pos:start="524:22" pos:end="524:22">=</operator> <call pos:start="524:24" pos:end="525:61"><name pos:start="524:24" pos:end="524:46">qemu_opts_parse_noisily</name><argument_list pos:start="524:47" pos:end="525:61">(<argument pos:start="524:48" pos:end="524:71"><expr pos:start="524:48" pos:end="524:71"><call pos:start="524:48" pos:end="524:71"><name pos:start="524:48" pos:end="524:61">qemu_find_opts</name><argument_list pos:start="524:62" pos:end="524:71">(<argument pos:start="524:63" pos:end="524:70"><expr pos:start="524:63" pos:end="524:70"><literal type="string" pos:start="524:63" pos:end="524:70">"smbios"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                               <argument pos:start="525:48" pos:end="525:53"><expr pos:start="525:48" pos:end="525:53"><name pos:start="525:48" pos:end="525:53">optarg</name></expr></argument>, <argument pos:start="525:56" pos:end="525:60"><expr pos:start="525:56" pos:end="525:60"><name pos:start="525:56" pos:end="525:60">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="526:17" pos:end="1197:13"><if pos:start="526:17" pos:end="1197:13">if <condition pos:start="526:20" pos:end="526:26">(<expr pos:start="526:21" pos:end="526:25"><operator pos:start="526:21" pos:end="526:21">!</operator><name pos:start="526:22" pos:end="526:25">opts</name></expr>)</condition> <block pos:start="526:28" pos:end="1197:13">{<block_content pos:start="527:17" pos:end="1197:13">
                <expr_stmt pos:start="527:17" pos:end="527:53"><expr pos:start="527:17" pos:end="527:52"><call pos:start="527:17" pos:end="527:52"><name pos:start="527:17" pos:end="527:32">smbios_entry_add</name><argument_list pos:start="527:33" pos:end="527:52">(<argument pos:start="527:34" pos:end="527:37"><expr pos:start="527:34" pos:end="527:37"><name pos:start="527:34" pos:end="527:37">opts</name></expr></argument>, <argument pos:start="527:40" pos:end="527:51"><expr pos:start="527:40" pos:end="527:51"><operator pos:start="527:40" pos:end="527:40">&amp;</operator><name pos:start="527:41" pos:end="527:51">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="528:13" pos:end="528:35">case <expr pos:start="528:18" pos:end="528:34"><name pos:start="528:18" pos:end="528:34">QEMU_OPTION_fwcfg</name></expr>:</case>
                <expr_stmt pos:start="529:17" pos:end="530:61"><expr pos:start="529:17" pos:end="530:60"><name pos:start="529:17" pos:end="529:20">opts</name> <operator pos:start="529:22" pos:end="529:22">=</operator> <call pos:start="529:24" pos:end="530:60"><name pos:start="529:24" pos:end="529:46">qemu_opts_parse_noisily</name><argument_list pos:start="529:47" pos:end="530:60">(<argument pos:start="529:48" pos:end="529:71"><expr pos:start="529:48" pos:end="529:71"><call pos:start="529:48" pos:end="529:71"><name pos:start="529:48" pos:end="529:61">qemu_find_opts</name><argument_list pos:start="529:62" pos:end="529:71">(<argument pos:start="529:63" pos:end="529:70"><expr pos:start="529:63" pos:end="529:70"><literal type="string" pos:start="529:63" pos:end="529:70">"fw_cfg"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                               <argument pos:start="530:48" pos:end="530:53"><expr pos:start="530:48" pos:end="530:53"><name pos:start="530:48" pos:end="530:53">optarg</name></expr></argument>, <argument pos:start="530:56" pos:end="530:59"><expr pos:start="530:56" pos:end="530:59"><name pos:start="530:56" pos:end="530:59">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="531:17" pos:end="1197:13"><if pos:start="531:17" pos:end="1197:13">if <condition pos:start="531:20" pos:end="531:33">(<expr pos:start="531:21" pos:end="531:32"><name pos:start="531:21" pos:end="531:24">opts</name> <operator pos:start="531:26" pos:end="531:27">==</operator> <name pos:start="531:29" pos:end="531:32">NULL</name></expr>)</condition> <block pos:start="531:35" pos:end="1197:13">{<block_content pos:start="532:13" pos:end="1197:13">
            <case pos:start="532:13" pos:end="532:40">case <expr pos:start="532:18" pos:end="532:39"><name pos:start="532:18" pos:end="532:39">QEMU_OPTION_enable_kvm</name></expr>:</case>
                <expr_stmt pos:start="533:17" pos:end="533:50"><expr pos:start="533:17" pos:end="533:49"><name pos:start="533:17" pos:end="533:21">olist</name> <operator pos:start="533:23" pos:end="533:23">=</operator> <call pos:start="533:25" pos:end="533:49"><name pos:start="533:25" pos:end="533:38">qemu_find_opts</name><argument_list pos:start="533:39" pos:end="533:49">(<argument pos:start="533:40" pos:end="533:48"><expr pos:start="533:40" pos:end="533:48"><literal type="string" pos:start="533:40" pos:end="533:48">"machine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="534:17" pos:end="534:67"><expr pos:start="534:17" pos:end="534:66"><call pos:start="534:17" pos:end="534:66"><name pos:start="534:17" pos:end="534:39">qemu_opts_parse_noisily</name><argument_list pos:start="534:40" pos:end="534:66">(<argument pos:start="534:41" pos:end="534:45"><expr pos:start="534:41" pos:end="534:45"><name pos:start="534:41" pos:end="534:45">olist</name></expr></argument>, <argument pos:start="534:48" pos:end="534:58"><expr pos:start="534:48" pos:end="534:58"><literal type="string" pos:start="534:48" pos:end="534:58">"accel=kvm"</literal></expr></argument>, <argument pos:start="534:61" pos:end="534:65"><expr pos:start="534:61" pos:end="534:65"><name pos:start="534:61" pos:end="534:65">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="535:13" pos:end="535:40">case <expr pos:start="535:18" pos:end="535:39"><name pos:start="535:18" pos:end="535:39">QEMU_OPTION_enable_hax</name></expr>:</case>
                <expr_stmt pos:start="536:17" pos:end="536:50"><expr pos:start="536:17" pos:end="536:49"><name pos:start="536:17" pos:end="536:21">olist</name> <operator pos:start="536:23" pos:end="536:23">=</operator> <call pos:start="536:25" pos:end="536:49"><name pos:start="536:25" pos:end="536:38">qemu_find_opts</name><argument_list pos:start="536:39" pos:end="536:49">(<argument pos:start="536:40" pos:end="536:48"><expr pos:start="536:40" pos:end="536:48"><literal type="string" pos:start="536:40" pos:end="536:48">"machine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="537:17" pos:end="537:67"><expr pos:start="537:17" pos:end="537:66"><call pos:start="537:17" pos:end="537:66"><name pos:start="537:17" pos:end="537:39">qemu_opts_parse_noisily</name><argument_list pos:start="537:40" pos:end="537:66">(<argument pos:start="537:41" pos:end="537:45"><expr pos:start="537:41" pos:end="537:45"><name pos:start="537:41" pos:end="537:45">olist</name></expr></argument>, <argument pos:start="537:48" pos:end="537:58"><expr pos:start="537:48" pos:end="537:58"><literal type="string" pos:start="537:48" pos:end="537:58">"accel=hax"</literal></expr></argument>, <argument pos:start="537:61" pos:end="537:65"><expr pos:start="537:61" pos:end="537:65"><name pos:start="537:61" pos:end="537:65">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="538:13" pos:end="538:31">case <expr pos:start="538:18" pos:end="538:30"><name pos:start="538:18" pos:end="538:30">QEMU_OPTION_M</name></expr>:</case>
            <case pos:start="539:13" pos:end="539:37">case <expr pos:start="539:18" pos:end="539:36"><name pos:start="539:18" pos:end="539:36">QEMU_OPTION_machine</name></expr>:</case>
                <expr_stmt pos:start="540:17" pos:end="540:50"><expr pos:start="540:17" pos:end="540:49"><name pos:start="540:17" pos:end="540:21">olist</name> <operator pos:start="540:23" pos:end="540:23">=</operator> <call pos:start="540:25" pos:end="540:49"><name pos:start="540:25" pos:end="540:38">qemu_find_opts</name><argument_list pos:start="540:39" pos:end="540:49">(<argument pos:start="540:40" pos:end="540:48"><expr pos:start="540:40" pos:end="540:48"><literal type="string" pos:start="540:40" pos:end="540:48">"machine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="541:17" pos:end="541:68"><expr pos:start="541:17" pos:end="541:67"><name pos:start="541:17" pos:end="541:20">opts</name> <operator pos:start="541:22" pos:end="541:22">=</operator> <call pos:start="541:24" pos:end="541:67"><name pos:start="541:24" pos:end="541:46">qemu_opts_parse_noisily</name><argument_list pos:start="541:47" pos:end="541:67">(<argument pos:start="541:48" pos:end="541:52"><expr pos:start="541:48" pos:end="541:52"><name pos:start="541:48" pos:end="541:52">olist</name></expr></argument>, <argument pos:start="541:55" pos:end="541:60"><expr pos:start="541:55" pos:end="541:60"><name pos:start="541:55" pos:end="541:60">optarg</name></expr></argument>, <argument pos:start="541:63" pos:end="541:66"><expr pos:start="541:63" pos:end="541:66"><name pos:start="541:63" pos:end="541:66">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="542:17" pos:end="1197:13"><if pos:start="542:17" pos:end="1197:13">if <condition pos:start="542:20" pos:end="542:26">(<expr pos:start="542:21" pos:end="542:25"><operator pos:start="542:21" pos:end="542:21">!</operator><name pos:start="542:22" pos:end="542:25">opts</name></expr>)</condition> <block pos:start="542:28" pos:end="1197:13">{<block_content pos:start="543:14" pos:end="1197:13">
             <case pos:start="543:14" pos:end="543:37">case <expr pos:start="543:19" pos:end="543:36"><name pos:start="543:19" pos:end="543:36">QEMU_OPTION_no_kvm</name></expr>:</case>
                <expr_stmt pos:start="544:17" pos:end="544:50"><expr pos:start="544:17" pos:end="544:49"><name pos:start="544:17" pos:end="544:21">olist</name> <operator pos:start="544:23" pos:end="544:23">=</operator> <call pos:start="544:25" pos:end="544:49"><name pos:start="544:25" pos:end="544:38">qemu_find_opts</name><argument_list pos:start="544:39" pos:end="544:49">(<argument pos:start="544:40" pos:end="544:48"><expr pos:start="544:40" pos:end="544:48"><literal type="string" pos:start="544:40" pos:end="544:48">"machine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="545:17" pos:end="545:67"><expr pos:start="545:17" pos:end="545:66"><call pos:start="545:17" pos:end="545:66"><name pos:start="545:17" pos:end="545:39">qemu_opts_parse_noisily</name><argument_list pos:start="545:40" pos:end="545:66">(<argument pos:start="545:41" pos:end="545:45"><expr pos:start="545:41" pos:end="545:45"><name pos:start="545:41" pos:end="545:45">olist</name></expr></argument>, <argument pos:start="545:48" pos:end="545:58"><expr pos:start="545:48" pos:end="545:58"><literal type="string" pos:start="545:48" pos:end="545:58">"accel=tcg"</literal></expr></argument>, <argument pos:start="545:61" pos:end="545:65"><expr pos:start="545:61" pos:end="545:65"><name pos:start="545:61" pos:end="545:65">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="546:13" pos:end="546:40">case <expr pos:start="546:18" pos:end="546:39"><name pos:start="546:18" pos:end="546:39">QEMU_OPTION_no_kvm_pit</name></expr>:</case> <block pos:start="546:42" pos:end="1197:13">{<block_content pos:start="547:17" pos:end="1197:13">
                <expr_stmt pos:start="547:17" pos:end="547:68"><expr pos:start="547:17" pos:end="547:67"><call pos:start="547:17" pos:end="547:67"><name pos:start="547:17" pos:end="547:28">error_report</name><argument_list pos:start="547:29" pos:end="547:67">(<argument pos:start="547:30" pos:end="547:66"><expr pos:start="547:30" pos:end="547:66"><literal type="string" pos:start="547:30" pos:end="547:66">"warning: ignoring deprecated option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="548:13" pos:end="548:52">case <expr pos:start="548:18" pos:end="548:51"><name pos:start="548:18" pos:end="548:51">QEMU_OPTION_no_kvm_pit_reinjection</name></expr>:</case> <block pos:start="548:54" pos:end="1197:13">{<block_content pos:start="549:17" pos:end="1197:13">
                <decl_stmt pos:start="549:17" pos:end="553:18"><decl pos:start="549:17" pos:end="553:17"><type pos:start="549:17" pos:end="549:37"><specifier pos:start="549:17" pos:end="549:22">static</specifier> <name pos:start="549:24" pos:end="549:37">GlobalProperty</name></type> <name pos:start="549:39" pos:end="549:62">kvm_pit_lost_tick_policy</name> <init pos:start="549:64" pos:end="553:17">= <expr pos:start="549:66" pos:end="553:17"><block pos:start="549:66" pos:end="553:17">{
                    <expr pos:start="550:21" pos:end="550:41"><operator pos:start="550:21" pos:end="550:21">.</operator><name pos:start="550:22" pos:end="550:27">driver</name>   <operator pos:start="550:31" pos:end="550:31">=</operator> <literal type="string" pos:start="550:33" pos:end="550:41">"kvm-pit"</literal></expr>,
                    <expr pos:start="551:21" pos:end="551:50"><operator pos:start="551:21" pos:end="551:21">.</operator><name pos:start="551:22" pos:end="551:29">property</name> <operator pos:start="551:31" pos:end="551:31">=</operator> <literal type="string" pos:start="551:33" pos:end="551:50">"lost_tick_policy"</literal></expr>,
                    <expr pos:start="552:21" pos:end="552:41"><operator pos:start="552:21" pos:end="552:21">.</operator><name pos:start="552:22" pos:end="552:26">value</name>    <operator pos:start="552:31" pos:end="552:31">=</operator> <literal type="string" pos:start="552:33" pos:end="552:41">"discard"</literal></expr>,
                }</block></expr></init></decl>;</decl_stmt>
                <expr_stmt pos:start="554:17" pos:end="555:73"><expr pos:start="554:17" pos:end="555:72"><call pos:start="554:17" pos:end="555:72"><name pos:start="554:17" pos:end="554:28">error_report</name><argument_list pos:start="554:29" pos:end="555:72">(<argument pos:start="554:30" pos:end="555:71"><expr pos:start="554:30" pos:end="555:71"><literal type="string" pos:start="554:30" pos:end="554:64">"warning: deprecated, replaced by "</literal>
                             <literal type="string" pos:start="555:30" pos:end="555:71">"-global kvm-pit.lost_tick_policy=discard"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="556:17" pos:end="556:69"><expr pos:start="556:17" pos:end="556:68"><call pos:start="556:17" pos:end="556:68"><name pos:start="556:17" pos:end="556:41">qdev_prop_register_global</name><argument_list pos:start="556:42" pos:end="556:68">(<argument pos:start="556:43" pos:end="556:67"><expr pos:start="556:43" pos:end="556:67"><operator pos:start="556:43" pos:end="556:43">&amp;</operator><name pos:start="556:44" pos:end="556:67">kvm_pit_lost_tick_policy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="557:13" pos:end="557:35">case <expr pos:start="557:18" pos:end="557:34"><name pos:start="557:18" pos:end="557:34">QEMU_OPTION_accel</name></expr>:</case>
                <expr_stmt pos:start="558:17" pos:end="559:67"><expr pos:start="558:17" pos:end="559:66"><name pos:start="558:17" pos:end="558:26">accel_opts</name> <operator pos:start="558:28" pos:end="558:28">=</operator> <call pos:start="558:30" pos:end="559:66"><name pos:start="558:30" pos:end="558:52">qemu_opts_parse_noisily</name><argument_list pos:start="558:53" pos:end="559:66">(<argument pos:start="558:54" pos:end="558:76"><expr pos:start="558:54" pos:end="558:76"><call pos:start="558:54" pos:end="558:76"><name pos:start="558:54" pos:end="558:67">qemu_find_opts</name><argument_list pos:start="558:68" pos:end="558:76">(<argument pos:start="558:69" pos:end="558:75"><expr pos:start="558:69" pos:end="558:75"><literal type="string" pos:start="558:69" pos:end="558:75">"accel"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                                     <argument pos:start="559:54" pos:end="559:59"><expr pos:start="559:54" pos:end="559:59"><name pos:start="559:54" pos:end="559:59">optarg</name></expr></argument>, <argument pos:start="559:62" pos:end="559:65"><expr pos:start="559:62" pos:end="559:65"><name pos:start="559:62" pos:end="559:65">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="560:17" pos:end="560:59"><expr pos:start="560:17" pos:end="560:58"><name pos:start="560:17" pos:end="560:22">optarg</name> <operator pos:start="560:24" pos:end="560:24">=</operator> <call pos:start="560:26" pos:end="560:58"><name pos:start="560:26" pos:end="560:37">qemu_opt_get</name><argument_list pos:start="560:38" pos:end="560:58">(<argument pos:start="560:39" pos:end="560:48"><expr pos:start="560:39" pos:end="560:48"><name pos:start="560:39" pos:end="560:48">accel_opts</name></expr></argument>, <argument pos:start="560:51" pos:end="560:57"><expr pos:start="560:51" pos:end="560:57"><literal type="string" pos:start="560:51" pos:end="560:57">"accel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="561:17" pos:end="561:50"><expr pos:start="561:17" pos:end="561:49"><name pos:start="561:17" pos:end="561:21">olist</name> <operator pos:start="561:23" pos:end="561:23">=</operator> <call pos:start="561:25" pos:end="561:49"><name pos:start="561:25" pos:end="561:38">qemu_find_opts</name><argument_list pos:start="561:39" pos:end="561:49">(<argument pos:start="561:40" pos:end="561:48"><expr pos:start="561:40" pos:end="561:48"><literal type="string" pos:start="561:40" pos:end="561:48">"machine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="562:17" pos:end="1197:13"><if pos:start="562:17" pos:end="564:17">if <condition pos:start="562:20" pos:end="562:47">(<expr pos:start="562:21" pos:end="562:46"><call pos:start="562:21" pos:end="562:41"><name pos:start="562:21" pos:end="562:26">strcmp</name><argument_list pos:start="562:27" pos:end="562:41">(<argument pos:start="562:28" pos:end="562:32"><expr pos:start="562:28" pos:end="562:32"><literal type="string" pos:start="562:28" pos:end="562:32">"kvm"</literal></expr></argument>, <argument pos:start="562:35" pos:end="562:40"><expr pos:start="562:35" pos:end="562:40"><name pos:start="562:35" pos:end="562:40">optarg</name></expr></argument>)</argument_list></call> <operator pos:start="562:43" pos:end="562:44">==</operator> <literal type="number" pos:start="562:46" pos:end="562:46">0</literal></expr>)</condition> <block pos:start="562:49" pos:end="564:17">{<block_content pos:start="563:21" pos:end="563:71">
                    <expr_stmt pos:start="563:21" pos:end="563:71"><expr pos:start="563:21" pos:end="563:70"><call pos:start="563:21" pos:end="563:70"><name pos:start="563:21" pos:end="563:43">qemu_opts_parse_noisily</name><argument_list pos:start="563:44" pos:end="563:70">(<argument pos:start="563:45" pos:end="563:49"><expr pos:start="563:45" pos:end="563:49"><name pos:start="563:45" pos:end="563:49">olist</name></expr></argument>, <argument pos:start="563:52" pos:end="563:62"><expr pos:start="563:52" pos:end="563:62"><literal type="string" pos:start="563:52" pos:end="563:62">"accel=kvm"</literal></expr></argument>, <argument pos:start="563:65" pos:end="563:69"><expr pos:start="563:65" pos:end="563:69"><name pos:start="563:65" pos:end="563:69">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif" pos:start="564:19" pos:end="566:17">else if <condition pos:start="564:27" pos:end="564:54">(<expr pos:start="564:28" pos:end="564:53"><call pos:start="564:28" pos:end="564:48"><name pos:start="564:28" pos:end="564:33">strcmp</name><argument_list pos:start="564:34" pos:end="564:48">(<argument pos:start="564:35" pos:end="564:39"><expr pos:start="564:35" pos:end="564:39"><literal type="string" pos:start="564:35" pos:end="564:39">"xen"</literal></expr></argument>, <argument pos:start="564:42" pos:end="564:47"><expr pos:start="564:42" pos:end="564:47"><name pos:start="564:42" pos:end="564:47">optarg</name></expr></argument>)</argument_list></call> <operator pos:start="564:50" pos:end="564:51">==</operator> <literal type="number" pos:start="564:53" pos:end="564:53">0</literal></expr>)</condition> <block pos:start="564:56" pos:end="566:17">{<block_content pos:start="565:21" pos:end="565:71">
                    <expr_stmt pos:start="565:21" pos:end="565:71"><expr pos:start="565:21" pos:end="565:70"><call pos:start="565:21" pos:end="565:70"><name pos:start="565:21" pos:end="565:43">qemu_opts_parse_noisily</name><argument_list pos:start="565:44" pos:end="565:70">(<argument pos:start="565:45" pos:end="565:49"><expr pos:start="565:45" pos:end="565:49"><name pos:start="565:45" pos:end="565:49">olist</name></expr></argument>, <argument pos:start="565:52" pos:end="565:62"><expr pos:start="565:52" pos:end="565:62"><literal type="string" pos:start="565:52" pos:end="565:62">"accel=xen"</literal></expr></argument>, <argument pos:start="565:65" pos:end="565:69"><expr pos:start="565:65" pos:end="565:69"><name pos:start="565:65" pos:end="565:69">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif" pos:start="566:19" pos:end="568:17">else if <condition pos:start="566:27" pos:end="566:54">(<expr pos:start="566:28" pos:end="566:53"><call pos:start="566:28" pos:end="566:48"><name pos:start="566:28" pos:end="566:33">strcmp</name><argument_list pos:start="566:34" pos:end="566:48">(<argument pos:start="566:35" pos:end="566:39"><expr pos:start="566:35" pos:end="566:39"><literal type="string" pos:start="566:35" pos:end="566:39">"tcg"</literal></expr></argument>, <argument pos:start="566:42" pos:end="566:47"><expr pos:start="566:42" pos:end="566:47"><name pos:start="566:42" pos:end="566:47">optarg</name></expr></argument>)</argument_list></call> <operator pos:start="566:50" pos:end="566:51">==</operator> <literal type="number" pos:start="566:53" pos:end="566:53">0</literal></expr>)</condition> <block pos:start="566:56" pos:end="568:17">{<block_content pos:start="567:21" pos:end="567:71">
                    <expr_stmt pos:start="567:21" pos:end="567:71"><expr pos:start="567:21" pos:end="567:70"><call pos:start="567:21" pos:end="567:70"><name pos:start="567:21" pos:end="567:43">qemu_opts_parse_noisily</name><argument_list pos:start="567:44" pos:end="567:70">(<argument pos:start="567:45" pos:end="567:49"><expr pos:start="567:45" pos:end="567:49"><name pos:start="567:45" pos:end="567:49">olist</name></expr></argument>, <argument pos:start="567:52" pos:end="567:62"><expr pos:start="567:52" pos:end="567:62"><literal type="string" pos:start="567:52" pos:end="567:62">"accel=tcg"</literal></expr></argument>, <argument pos:start="567:65" pos:end="567:69"><expr pos:start="567:65" pos:end="567:69"><name pos:start="567:65" pos:end="567:69">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else pos:start="568:19" pos:end="1197:13">else <block pos:start="568:24" pos:end="1197:13">{<block_content pos:start="569:21" pos:end="1197:13">
                    <if_stmt pos:start="569:21" pos:end="1197:13"><if pos:start="569:21" pos:end="1197:13">if <condition pos:start="569:24" pos:end="569:48">(<expr pos:start="569:25" pos:end="569:47"><operator pos:start="569:25" pos:end="569:25">!</operator><call pos:start="569:26" pos:end="569:47"><name pos:start="569:26" pos:end="569:39">is_help_option</name><argument_list pos:start="569:40" pos:end="569:47">(<argument pos:start="569:41" pos:end="569:46"><expr pos:start="569:41" pos:end="569:46"><name pos:start="569:41" pos:end="569:46">optarg</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="569:50" pos:end="1197:13">{<block_content pos:start="570:25" pos:end="1197:13">
                        <expr_stmt pos:start="570:25" pos:end="570:72"><expr pos:start="570:25" pos:end="570:71"><call pos:start="570:25" pos:end="570:71"><name pos:start="570:25" pos:end="570:36">error_printf</name><argument_list pos:start="570:37" pos:end="570:71">(<argument pos:start="570:38" pos:end="570:62"><expr pos:start="570:38" pos:end="570:62"><literal type="string" pos:start="570:38" pos:end="570:62">"Unknown accelerator: %s"</literal></expr></argument>, <argument pos:start="570:65" pos:end="570:70"><expr pos:start="570:65" pos:end="570:70"><name pos:start="570:65" pos:end="570:70">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="571:21" pos:end="571:76"><expr pos:start="571:21" pos:end="571:75"><call pos:start="571:21" pos:end="571:75"><name pos:start="571:21" pos:end="571:32">error_printf</name><argument_list pos:start="571:33" pos:end="571:75">(<argument pos:start="571:34" pos:end="571:74"><expr pos:start="571:34" pos:end="571:74"><literal type="string" pos:start="571:34" pos:end="571:74">"Supported accelerators: kvm, xen, tcg\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="572:13" pos:end="572:33">case <expr pos:start="572:18" pos:end="572:32"><name pos:start="572:18" pos:end="572:32">QEMU_OPTION_usb</name></expr>:</case>
                <expr_stmt pos:start="573:17" pos:end="573:50"><expr pos:start="573:17" pos:end="573:49"><name pos:start="573:17" pos:end="573:21">olist</name> <operator pos:start="573:23" pos:end="573:23">=</operator> <call pos:start="573:25" pos:end="573:49"><name pos:start="573:25" pos:end="573:38">qemu_find_opts</name><argument_list pos:start="573:39" pos:end="573:49">(<argument pos:start="573:40" pos:end="573:48"><expr pos:start="573:40" pos:end="573:48"><literal type="string" pos:start="573:40" pos:end="573:48">"machine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="574:17" pos:end="574:64"><expr pos:start="574:17" pos:end="574:63"><call pos:start="574:17" pos:end="574:63"><name pos:start="574:17" pos:end="574:39">qemu_opts_parse_noisily</name><argument_list pos:start="574:40" pos:end="574:63">(<argument pos:start="574:41" pos:end="574:45"><expr pos:start="574:41" pos:end="574:45"><name pos:start="574:41" pos:end="574:45">olist</name></expr></argument>, <argument pos:start="574:48" pos:end="574:55"><expr pos:start="574:48" pos:end="574:55"><literal type="string" pos:start="574:48" pos:end="574:55">"usb=on"</literal></expr></argument>, <argument pos:start="574:58" pos:end="574:62"><expr pos:start="574:58" pos:end="574:62"><name pos:start="574:58" pos:end="574:62">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="575:13" pos:end="575:39">case <expr pos:start="575:18" pos:end="575:38"><name pos:start="575:18" pos:end="575:38">QEMU_OPTION_usbdevice</name></expr>:</case>
                <expr_stmt pos:start="576:17" pos:end="576:50"><expr pos:start="576:17" pos:end="576:49"><name pos:start="576:17" pos:end="576:21">olist</name> <operator pos:start="576:23" pos:end="576:23">=</operator> <call pos:start="576:25" pos:end="576:49"><name pos:start="576:25" pos:end="576:38">qemu_find_opts</name><argument_list pos:start="576:39" pos:end="576:49">(<argument pos:start="576:40" pos:end="576:48"><expr pos:start="576:40" pos:end="576:48"><literal type="string" pos:start="576:40" pos:end="576:48">"machine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="577:17" pos:end="577:64"><expr pos:start="577:17" pos:end="577:63"><call pos:start="577:17" pos:end="577:63"><name pos:start="577:17" pos:end="577:39">qemu_opts_parse_noisily</name><argument_list pos:start="577:40" pos:end="577:63">(<argument pos:start="577:41" pos:end="577:45"><expr pos:start="577:41" pos:end="577:45"><name pos:start="577:41" pos:end="577:45">olist</name></expr></argument>, <argument pos:start="577:48" pos:end="577:55"><expr pos:start="577:48" pos:end="577:55"><literal type="string" pos:start="577:48" pos:end="577:55">"usb=on"</literal></expr></argument>, <argument pos:start="577:58" pos:end="577:62"><expr pos:start="577:58" pos:end="577:62"><name pos:start="577:58" pos:end="577:62">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="578:17" pos:end="578:51"><expr pos:start="578:17" pos:end="578:50"><call pos:start="578:17" pos:end="578:50"><name pos:start="578:17" pos:end="578:33">add_device_config</name><argument_list pos:start="578:34" pos:end="578:50">(<argument pos:start="578:35" pos:end="578:41"><expr pos:start="578:35" pos:end="578:41"><name pos:start="578:35" pos:end="578:41">DEV_USB</name></expr></argument>, <argument pos:start="578:44" pos:end="578:49"><expr pos:start="578:44" pos:end="578:49"><name pos:start="578:44" pos:end="578:49">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="579:13" pos:end="579:36">case <expr pos:start="579:18" pos:end="579:35"><name pos:start="579:18" pos:end="579:35">QEMU_OPTION_device</name></expr>:</case>
                <if_stmt pos:start="580:17" pos:end="1197:13"><if pos:start="580:17" pos:end="1197:13">if <condition pos:start="580:20" pos:end="581:59">(<expr pos:start="580:21" pos:end="581:58"><operator pos:start="580:21" pos:end="580:21">!</operator><call pos:start="580:22" pos:end="581:58"><name pos:start="580:22" pos:end="580:44">qemu_opts_parse_noisily</name><argument_list pos:start="580:45" pos:end="581:58">(<argument pos:start="580:46" pos:end="580:69"><expr pos:start="580:46" pos:end="580:69"><call pos:start="580:46" pos:end="580:69"><name pos:start="580:46" pos:end="580:59">qemu_find_opts</name><argument_list pos:start="580:60" pos:end="580:69">(<argument pos:start="580:61" pos:end="580:68"><expr pos:start="580:61" pos:end="580:68"><literal type="string" pos:start="580:61" pos:end="580:68">"device"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                             <argument pos:start="581:46" pos:end="581:51"><expr pos:start="581:46" pos:end="581:51"><name pos:start="581:46" pos:end="581:51">optarg</name></expr></argument>, <argument pos:start="581:54" pos:end="581:57"><expr pos:start="581:54" pos:end="581:57"><name pos:start="581:54" pos:end="581:57">true</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="581:61" pos:end="1197:13">{<block_content pos:start="582:13" pos:end="1197:13">
            <case pos:start="582:13" pos:end="582:33">case <expr pos:start="582:18" pos:end="582:32"><name pos:start="582:18" pos:end="582:32">QEMU_OPTION_smp</name></expr>:</case>
                <if_stmt pos:start="583:17" pos:end="1197:13"><if pos:start="583:17" pos:end="1197:13">if <condition pos:start="583:20" pos:end="584:59">(<expr pos:start="583:21" pos:end="584:58"><operator pos:start="583:21" pos:end="583:21">!</operator><call pos:start="583:22" pos:end="584:58"><name pos:start="583:22" pos:end="583:44">qemu_opts_parse_noisily</name><argument_list pos:start="583:45" pos:end="584:58">(<argument pos:start="583:46" pos:end="583:71"><expr pos:start="583:46" pos:end="583:71"><call pos:start="583:46" pos:end="583:71"><name pos:start="583:46" pos:end="583:59">qemu_find_opts</name><argument_list pos:start="583:60" pos:end="583:71">(<argument pos:start="583:61" pos:end="583:70"><expr pos:start="583:61" pos:end="583:70"><literal type="string" pos:start="583:61" pos:end="583:70">"smp-opts"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                             <argument pos:start="584:46" pos:end="584:51"><expr pos:start="584:46" pos:end="584:51"><name pos:start="584:46" pos:end="584:51">optarg</name></expr></argument>, <argument pos:start="584:54" pos:end="584:57"><expr pos:start="584:54" pos:end="584:57"><name pos:start="584:54" pos:end="584:57">true</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="584:61" pos:end="1197:13">{<block_content pos:start="585:13" pos:end="1197:13">
            <case pos:start="585:13" pos:end="585:33">case <expr pos:start="585:18" pos:end="585:32"><name pos:start="585:18" pos:end="585:32">QEMU_OPTION_vnc</name></expr>:</case>
                <expr_stmt pos:start="586:17" pos:end="586:48"><expr pos:start="586:17" pos:end="586:47"><call pos:start="586:17" pos:end="586:47"><name pos:start="586:17" pos:end="586:25">vnc_parse</name><argument_list pos:start="586:26" pos:end="586:47">(<argument pos:start="586:27" pos:end="586:32"><expr pos:start="586:27" pos:end="586:32"><name pos:start="586:27" pos:end="586:32">optarg</name></expr></argument>, <argument pos:start="586:35" pos:end="586:46"><expr pos:start="586:35" pos:end="586:46"><operator pos:start="586:35" pos:end="586:35">&amp;</operator><name pos:start="586:36" pos:end="586:46">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="587:13" pos:end="587:37">case <expr pos:start="587:18" pos:end="587:36"><name pos:start="587:18" pos:end="587:36">QEMU_OPTION_no_acpi</name></expr>:</case>
                <expr_stmt pos:start="588:17" pos:end="588:33"><expr pos:start="588:17" pos:end="588:32"><name pos:start="588:17" pos:end="588:28">acpi_enabled</name> <operator pos:start="588:30" pos:end="588:30">=</operator> <literal type="number" pos:start="588:32" pos:end="588:32">0</literal></expr>;</expr_stmt>
            <case pos:start="589:13" pos:end="589:37">case <expr pos:start="589:18" pos:end="589:36"><name pos:start="589:18" pos:end="589:36">QEMU_OPTION_no_hpet</name></expr>:</case>
                <expr_stmt pos:start="590:17" pos:end="590:28"><expr pos:start="590:17" pos:end="590:27"><name pos:start="590:17" pos:end="590:23">no_hpet</name> <operator pos:start="590:25" pos:end="590:25">=</operator> <literal type="number" pos:start="590:27" pos:end="590:27">1</literal></expr>;</expr_stmt>
            <case pos:start="591:13" pos:end="591:37">case <expr pos:start="591:18" pos:end="591:36"><name pos:start="591:18" pos:end="591:36">QEMU_OPTION_balloon</name></expr>:</case>
                <if_stmt pos:start="592:17" pos:end="1197:13"><if pos:start="592:17" pos:end="1197:13">if <condition pos:start="592:20" pos:end="592:46">(<expr pos:start="592:21" pos:end="592:45"><call pos:start="592:21" pos:end="592:41"><name pos:start="592:21" pos:end="592:33">balloon_parse</name><argument_list pos:start="592:34" pos:end="592:41">(<argument pos:start="592:35" pos:end="592:40"><expr pos:start="592:35" pos:end="592:40"><name pos:start="592:35" pos:end="592:40">optarg</name></expr></argument>)</argument_list></call> <operator pos:start="592:43" pos:end="592:43">&lt;</operator> <literal type="number" pos:start="592:45" pos:end="592:45">0</literal></expr>)</condition> <block pos:start="592:48" pos:end="1197:13">{<block_content pos:start="593:21" pos:end="1197:13">
                    <expr_stmt pos:start="593:21" pos:end="593:73"><expr pos:start="593:21" pos:end="593:72"><call pos:start="593:21" pos:end="593:72"><name pos:start="593:21" pos:end="593:32">error_report</name><argument_list pos:start="593:33" pos:end="593:72">(<argument pos:start="593:34" pos:end="593:63"><expr pos:start="593:34" pos:end="593:63"><literal type="string" pos:start="593:34" pos:end="593:63">"unknown -balloon argument %s"</literal></expr></argument>, <argument pos:start="593:66" pos:end="593:71"><expr pos:start="593:66" pos:end="593:71"><name pos:start="593:66" pos:end="593:71">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="594:13" pos:end="594:39">case <expr pos:start="594:18" pos:end="594:38"><name pos:start="594:18" pos:end="594:38">QEMU_OPTION_no_reboot</name></expr>:</case>
                <expr_stmt pos:start="595:17" pos:end="595:30"><expr pos:start="595:17" pos:end="595:29"><name pos:start="595:17" pos:end="595:25">no_reboot</name> <operator pos:start="595:27" pos:end="595:27">=</operator> <literal type="number" pos:start="595:29" pos:end="595:29">1</literal></expr>;</expr_stmt>
            <case pos:start="596:13" pos:end="596:41">case <expr pos:start="596:18" pos:end="596:40"><name pos:start="596:18" pos:end="596:40">QEMU_OPTION_no_shutdown</name></expr>:</case>
                <expr_stmt pos:start="597:17" pos:end="597:32"><expr pos:start="597:17" pos:end="597:31"><name pos:start="597:17" pos:end="597:27">no_shutdown</name> <operator pos:start="597:29" pos:end="597:29">=</operator> <literal type="number" pos:start="597:31" pos:end="597:31">1</literal></expr>;</expr_stmt>
            <case pos:start="598:13" pos:end="598:41">case <expr pos:start="598:18" pos:end="598:40"><name pos:start="598:18" pos:end="598:40">QEMU_OPTION_show_cursor</name></expr>:</case>
                <expr_stmt pos:start="599:17" pos:end="599:32"><expr pos:start="599:17" pos:end="599:31"><name pos:start="599:17" pos:end="599:27">cursor_hide</name> <operator pos:start="599:29" pos:end="599:29">=</operator> <literal type="number" pos:start="599:31" pos:end="599:31">0</literal></expr>;</expr_stmt>
            <case pos:start="600:13" pos:end="600:34">case <expr pos:start="600:18" pos:end="600:33"><name pos:start="600:18" pos:end="600:33">QEMU_OPTION_uuid</name></expr>:</case>
                <if_stmt pos:start="601:17" pos:end="1197:13"><if pos:start="601:17" pos:end="1197:13">if <condition pos:start="601:20" pos:end="601:60">(<expr pos:start="601:21" pos:end="601:59"><call pos:start="601:21" pos:end="601:55"><name pos:start="601:21" pos:end="601:35">qemu_uuid_parse</name><argument_list pos:start="601:36" pos:end="601:55">(<argument pos:start="601:37" pos:end="601:42"><expr pos:start="601:37" pos:end="601:42"><name pos:start="601:37" pos:end="601:42">optarg</name></expr></argument>, <argument pos:start="601:45" pos:end="601:54"><expr pos:start="601:45" pos:end="601:54"><operator pos:start="601:45" pos:end="601:45">&amp;</operator><name pos:start="601:46" pos:end="601:54">qemu_uuid</name></expr></argument>)</argument_list></call> <operator pos:start="601:57" pos:end="601:57">&lt;</operator> <literal type="number" pos:start="601:59" pos:end="601:59">0</literal></expr>)</condition> <block pos:start="601:62" pos:end="1197:13">{<block_content pos:start="602:21" pos:end="1197:13">
                    <expr_stmt pos:start="602:21" pos:end="602:78"><expr pos:start="602:21" pos:end="602:77"><call pos:start="602:21" pos:end="602:77"><name pos:start="602:21" pos:end="602:32">error_report</name><argument_list pos:start="602:33" pos:end="602:77">(<argument pos:start="602:34" pos:end="602:76"><expr pos:start="602:34" pos:end="602:76"><literal type="string" pos:start="602:34" pos:end="602:76">"failed to parse UUID string: wrong format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="603:17" pos:end="603:37"><expr pos:start="603:17" pos:end="603:36"><name pos:start="603:17" pos:end="603:29">qemu_uuid_set</name> <operator pos:start="603:31" pos:end="603:31">=</operator> <name pos:start="603:33" pos:end="603:36">true</name></expr>;</expr_stmt>
            <case pos:start="604:13" pos:end="604:40">case <expr pos:start="604:18" pos:end="604:39"><name pos:start="604:18" pos:end="604:39">QEMU_OPTION_option_rom</name></expr>:</case>
                <if_stmt pos:start="605:17" pos:end="1197:13"><if pos:start="605:17" pos:end="1197:13">if <condition pos:start="605:20" pos:end="605:54">(<expr pos:start="605:21" pos:end="605:53"><name pos:start="605:21" pos:end="605:34">nb_option_roms</name> <operator pos:start="605:36" pos:end="605:37">&gt;=</operator> <name pos:start="605:39" pos:end="605:53">MAX_OPTION_ROMS</name></expr>)</condition> <block pos:start="605:56" pos:end="1197:13">{<block_content pos:start="606:21" pos:end="1197:13">
                    <expr_stmt pos:start="606:21" pos:end="606:57"><expr pos:start="606:21" pos:end="606:56"><call pos:start="606:21" pos:end="606:56"><name pos:start="606:21" pos:end="606:32">error_report</name><argument_list pos:start="606:33" pos:end="606:56">(<argument pos:start="606:34" pos:end="606:55"><expr pos:start="606:34" pos:end="606:55"><literal type="string" pos:start="606:34" pos:end="606:55">"too many option ROMs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="607:17" pos:end="608:61"><expr pos:start="607:17" pos:end="608:60"><name pos:start="607:17" pos:end="607:20">opts</name> <operator pos:start="607:22" pos:end="607:22">=</operator> <call pos:start="607:24" pos:end="608:60"><name pos:start="607:24" pos:end="607:46">qemu_opts_parse_noisily</name><argument_list pos:start="607:47" pos:end="608:60">(<argument pos:start="607:48" pos:end="607:75"><expr pos:start="607:48" pos:end="607:75"><call pos:start="607:48" pos:end="607:75"><name pos:start="607:48" pos:end="607:61">qemu_find_opts</name><argument_list pos:start="607:62" pos:end="607:75">(<argument pos:start="607:63" pos:end="607:74"><expr pos:start="607:63" pos:end="607:74"><literal type="string" pos:start="607:63" pos:end="607:74">"option-rom"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                               <argument pos:start="608:48" pos:end="608:53"><expr pos:start="608:48" pos:end="608:53"><name pos:start="608:48" pos:end="608:53">optarg</name></expr></argument>, <argument pos:start="608:56" pos:end="608:59"><expr pos:start="608:56" pos:end="608:59"><name pos:start="608:56" pos:end="608:59">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="609:17" pos:end="1197:13"><if pos:start="609:17" pos:end="1197:13">if <condition pos:start="609:20" pos:end="609:26">(<expr pos:start="609:21" pos:end="609:25"><operator pos:start="609:21" pos:end="609:21">!</operator><name pos:start="609:22" pos:end="609:25">opts</name></expr>)</condition> <block pos:start="609:28" pos:end="1197:13">{<block_content pos:start="610:17" pos:end="1197:13">
                <expr_stmt pos:start="610:17" pos:end="610:80"><expr pos:start="610:17" pos:end="610:79"><name pos:start="610:17" pos:end="610:42"><name pos:start="610:17" pos:end="610:26">option_rom</name><index pos:start="610:27" pos:end="610:42">[<expr pos:start="610:28" pos:end="610:41"><name pos:start="610:28" pos:end="610:41">nb_option_roms</name></expr>]</index></name><operator pos:start="610:43" pos:end="610:43">.</operator><name pos:start="610:44" pos:end="610:47">name</name> <operator pos:start="610:49" pos:end="610:49">=</operator> <call pos:start="610:51" pos:end="610:79"><name pos:start="610:51" pos:end="610:62">qemu_opt_get</name><argument_list pos:start="610:63" pos:end="610:79">(<argument pos:start="610:64" pos:end="610:67"><expr pos:start="610:64" pos:end="610:67"><name pos:start="610:64" pos:end="610:67">opts</name></expr></argument>, <argument pos:start="610:70" pos:end="610:78"><expr pos:start="610:70" pos:end="610:78"><literal type="string" pos:start="610:70" pos:end="610:78">"romfile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="611:17" pos:end="612:63"><expr pos:start="611:17" pos:end="612:62"><name pos:start="611:17" pos:end="611:42"><name pos:start="611:17" pos:end="611:26">option_rom</name><index pos:start="611:27" pos:end="611:42">[<expr pos:start="611:28" pos:end="611:41"><name pos:start="611:28" pos:end="611:41">nb_option_roms</name></expr>]</index></name><operator pos:start="611:43" pos:end="611:43">.</operator><name pos:start="611:44" pos:end="611:52">bootindex</name> <operator pos:start="611:54" pos:end="611:54">=</operator>
                    <call pos:start="612:21" pos:end="612:62"><name pos:start="612:21" pos:end="612:39">qemu_opt_get_number</name><argument_list pos:start="612:40" pos:end="612:62">(<argument pos:start="612:41" pos:end="612:44"><expr pos:start="612:41" pos:end="612:44"><name pos:start="612:41" pos:end="612:44">opts</name></expr></argument>, <argument pos:start="612:47" pos:end="612:57"><expr pos:start="612:47" pos:end="612:57"><literal type="string" pos:start="612:47" pos:end="612:57">"bootindex"</literal></expr></argument>, <argument pos:start="612:60" pos:end="612:61"><expr pos:start="612:60" pos:end="612:61"><operator pos:start="612:60" pos:end="612:60">-</operator><literal type="number" pos:start="612:61" pos:end="612:61">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="613:17" pos:end="1197:13"><if pos:start="613:17" pos:end="1197:13">if <condition pos:start="613:20" pos:end="613:53">(<expr pos:start="613:21" pos:end="613:52"><operator pos:start="613:21" pos:end="613:21">!</operator><name pos:start="613:22" pos:end="613:47"><name pos:start="613:22" pos:end="613:31">option_rom</name><index pos:start="613:32" pos:end="613:47">[<expr pos:start="613:33" pos:end="613:46"><name pos:start="613:33" pos:end="613:46">nb_option_roms</name></expr>]</index></name><operator pos:start="613:48" pos:end="613:48">.</operator><name pos:start="613:49" pos:end="613:52">name</name></expr>)</condition> <block pos:start="613:55" pos:end="1197:13">{<block_content pos:start="614:21" pos:end="1197:13">
                    <expr_stmt pos:start="614:21" pos:end="614:69"><expr pos:start="614:21" pos:end="614:68"><call pos:start="614:21" pos:end="614:68"><name pos:start="614:21" pos:end="614:32">error_report</name><argument_list pos:start="614:33" pos:end="614:68">(<argument pos:start="614:34" pos:end="614:67"><expr pos:start="614:34" pos:end="614:67"><literal type="string" pos:start="614:34" pos:end="614:67">"Option ROM file is not specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="615:17" pos:end="615:33"><expr pos:start="615:17" pos:end="615:32"><name pos:start="615:17" pos:end="615:30">nb_option_roms</name><operator pos:start="615:31" pos:end="615:32">++</operator></expr>;</expr_stmt>
            <case pos:start="616:13" pos:end="616:41">case <expr pos:start="616:18" pos:end="616:40"><name pos:start="616:18" pos:end="616:40">QEMU_OPTION_semihosting</name></expr>:</case>
                <expr_stmt pos:start="617:17" pos:end="617:43"><expr pos:start="617:17" pos:end="617:42"><name pos:start="617:17" pos:end="617:35"><name pos:start="617:17" pos:end="617:27">semihosting</name><operator pos:start="617:28" pos:end="617:28">.</operator><name pos:start="617:29" pos:end="617:35">enabled</name></name> <operator pos:start="617:37" pos:end="617:37">=</operator> <name pos:start="617:39" pos:end="617:42">true</name></expr>;</expr_stmt>
                <expr_stmt pos:start="618:17" pos:end="618:61"><expr pos:start="618:17" pos:end="618:60"><name pos:start="618:17" pos:end="618:34"><name pos:start="618:17" pos:end="618:27">semihosting</name><operator pos:start="618:28" pos:end="618:28">.</operator><name pos:start="618:29" pos:end="618:34">target</name></name> <operator pos:start="618:36" pos:end="618:36">=</operator> <name pos:start="618:38" pos:end="618:60">SEMIHOSTING_TARGET_AUTO</name></expr>;</expr_stmt>
            <case pos:start="619:13" pos:end="619:48">case <expr pos:start="619:18" pos:end="619:47"><name pos:start="619:18" pos:end="619:47">QEMU_OPTION_semihosting_config</name></expr>:</case>
                <expr_stmt pos:start="620:17" pos:end="620:43"><expr pos:start="620:17" pos:end="620:42"><name pos:start="620:17" pos:end="620:35"><name pos:start="620:17" pos:end="620:27">semihosting</name><operator pos:start="620:28" pos:end="620:28">.</operator><name pos:start="620:29" pos:end="620:35">enabled</name></name> <operator pos:start="620:37" pos:end="620:37">=</operator> <name pos:start="620:39" pos:end="620:42">true</name></expr>;</expr_stmt>
                <expr_stmt pos:start="621:17" pos:end="622:62"><expr pos:start="621:17" pos:end="622:61"><name pos:start="621:17" pos:end="621:20">opts</name> <operator pos:start="621:22" pos:end="621:22">=</operator> <call pos:start="621:24" pos:end="622:61"><name pos:start="621:24" pos:end="621:46">qemu_opts_parse_noisily</name><argument_list pos:start="621:47" pos:end="622:61">(<argument pos:start="621:48" pos:end="621:83"><expr pos:start="621:48" pos:end="621:83"><call pos:start="621:48" pos:end="621:83"><name pos:start="621:48" pos:end="621:61">qemu_find_opts</name><argument_list pos:start="621:62" pos:end="621:83">(<argument pos:start="621:63" pos:end="621:82"><expr pos:start="621:63" pos:end="621:82"><literal type="string" pos:start="621:63" pos:end="621:82">"semihosting-config"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                               <argument pos:start="622:48" pos:end="622:53"><expr pos:start="622:48" pos:end="622:53"><name pos:start="622:48" pos:end="622:53">optarg</name></expr></argument>, <argument pos:start="622:56" pos:end="622:60"><expr pos:start="622:56" pos:end="622:60"><name pos:start="622:56" pos:end="622:60">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="623:17" pos:end="1197:13"><if pos:start="623:17" pos:end="1197:13">if <condition pos:start="623:20" pos:end="623:33">(<expr pos:start="623:21" pos:end="623:32"><name pos:start="623:21" pos:end="623:24">opts</name> <operator pos:start="623:26" pos:end="623:27">!=</operator> <name pos:start="623:29" pos:end="623:32">NULL</name></expr>)</condition> <block pos:start="623:35" pos:end="1197:13">{<block_content pos:start="624:21" pos:end="1197:13">
                    <expr_stmt pos:start="624:21" pos:end="625:66"><expr pos:start="624:21" pos:end="625:65"><name pos:start="624:21" pos:end="624:39"><name pos:start="624:21" pos:end="624:31">semihosting</name><operator pos:start="624:32" pos:end="624:32">.</operator><name pos:start="624:33" pos:end="624:39">enabled</name></name> <operator pos:start="624:41" pos:end="624:41">=</operator> <call pos:start="624:43" pos:end="625:65"><name pos:start="624:43" pos:end="624:59">qemu_opt_get_bool</name><argument_list pos:start="624:60" pos:end="625:65">(<argument pos:start="624:61" pos:end="624:64"><expr pos:start="624:61" pos:end="624:64"><name pos:start="624:61" pos:end="624:64">opts</name></expr></argument>, <argument pos:start="624:67" pos:end="624:74"><expr pos:start="624:67" pos:end="624:74"><literal type="string" pos:start="624:67" pos:end="624:74">"enable"</literal></expr></argument>,
                                                            <argument pos:start="625:61" pos:end="625:64"><expr pos:start="625:61" pos:end="625:64"><name pos:start="625:61" pos:end="625:64">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt pos:start="626:21" pos:end="626:70"><decl pos:start="626:21" pos:end="626:69"><type pos:start="626:21" pos:end="626:32"><specifier pos:start="626:21" pos:end="626:25">const</specifier> <name pos:start="626:27" pos:end="626:30">char</name> <modifier pos:start="626:32" pos:end="626:32">*</modifier></type><name pos:start="626:33" pos:end="626:38">target</name> <init pos:start="626:40" pos:end="626:69">= <expr pos:start="626:42" pos:end="626:69"><call pos:start="626:42" pos:end="626:69"><name pos:start="626:42" pos:end="626:53">qemu_opt_get</name><argument_list pos:start="626:54" pos:end="626:69">(<argument pos:start="626:55" pos:end="626:58"><expr pos:start="626:55" pos:end="626:58"><name pos:start="626:55" pos:end="626:58">opts</name></expr></argument>, <argument pos:start="626:61" pos:end="626:68"><expr pos:start="626:61" pos:end="626:68"><literal type="string" pos:start="626:61" pos:end="626:68">"target"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt pos:start="627:21" pos:end="1197:13"><if pos:start="627:21" pos:end="1197:13">if <condition pos:start="627:24" pos:end="627:39">(<expr pos:start="627:25" pos:end="627:38"><name pos:start="627:25" pos:end="627:30">target</name> <operator pos:start="627:32" pos:end="627:33">!=</operator> <name pos:start="627:35" pos:end="627:38">NULL</name></expr>)</condition> <block pos:start="627:41" pos:end="1197:13">{<block_content pos:start="628:25" pos:end="1197:13">
                        <if_stmt pos:start="628:25" pos:end="637:21"><if pos:start="628:25" pos:end="630:25">if <condition pos:start="628:28" pos:end="628:58">(<expr pos:start="628:29" pos:end="628:57"><call pos:start="628:29" pos:end="628:52"><name pos:start="628:29" pos:end="628:34">strcmp</name><argument_list pos:start="628:35" pos:end="628:52">(<argument pos:start="628:36" pos:end="628:43"><expr pos:start="628:36" pos:end="628:43"><literal type="string" pos:start="628:36" pos:end="628:43">"native"</literal></expr></argument>, <argument pos:start="628:46" pos:end="628:51"><expr pos:start="628:46" pos:end="628:51"><name pos:start="628:46" pos:end="628:51">target</name></expr></argument>)</argument_list></call> <operator pos:start="628:54" pos:end="628:55">==</operator> <literal type="number" pos:start="628:57" pos:end="628:57">0</literal></expr>)</condition> <block pos:start="628:60" pos:end="630:25">{<block_content pos:start="629:29" pos:end="629:75">
                            <expr_stmt pos:start="629:29" pos:end="629:75"><expr pos:start="629:29" pos:end="629:74"><name pos:start="629:29" pos:end="629:46"><name pos:start="629:29" pos:end="629:39">semihosting</name><operator pos:start="629:40" pos:end="629:40">.</operator><name pos:start="629:41" pos:end="629:46">target</name></name> <operator pos:start="629:48" pos:end="629:48">=</operator> <name pos:start="629:50" pos:end="629:74">SEMIHOSTING_TARGET_NATIVE</name></expr>;</expr_stmt>
                        </block_content>}</block></if> <if type="elseif" pos:start="630:27" pos:end="632:25">else if <condition pos:start="630:35" pos:end="630:62">(<expr pos:start="630:36" pos:end="630:61"><call pos:start="630:36" pos:end="630:56"><name pos:start="630:36" pos:end="630:41">strcmp</name><argument_list pos:start="630:42" pos:end="630:56">(<argument pos:start="630:43" pos:end="630:47"><expr pos:start="630:43" pos:end="630:47"><literal type="string" pos:start="630:43" pos:end="630:47">"gdb"</literal></expr></argument>, <argument pos:start="630:50" pos:end="630:55"><expr pos:start="630:50" pos:end="630:55"><name pos:start="630:50" pos:end="630:55">target</name></expr></argument>)</argument_list></call> <operator pos:start="630:58" pos:end="630:59">==</operator> <literal type="number" pos:start="630:61" pos:end="630:61">0</literal></expr>)</condition> <block pos:start="630:64" pos:end="632:25">{<block_content pos:start="631:29" pos:end="631:72">
                            <expr_stmt pos:start="631:29" pos:end="631:72"><expr pos:start="631:29" pos:end="631:71"><name pos:start="631:29" pos:end="631:46"><name pos:start="631:29" pos:end="631:39">semihosting</name><operator pos:start="631:40" pos:end="631:40">.</operator><name pos:start="631:41" pos:end="631:46">target</name></name> <operator pos:start="631:48" pos:end="631:48">=</operator> <name pos:start="631:50" pos:end="631:71">SEMIHOSTING_TARGET_GDB</name></expr>;</expr_stmt>
                        </block_content>}</block></if> <if type="elseif" pos:start="632:27" pos:end="634:25">else  if <condition pos:start="632:36" pos:end="632:64">(<expr pos:start="632:37" pos:end="632:63"><call pos:start="632:37" pos:end="632:58"><name pos:start="632:37" pos:end="632:42">strcmp</name><argument_list pos:start="632:43" pos:end="632:58">(<argument pos:start="632:44" pos:end="632:49"><expr pos:start="632:44" pos:end="632:49"><literal type="string" pos:start="632:44" pos:end="632:49">"auto"</literal></expr></argument>, <argument pos:start="632:52" pos:end="632:57"><expr pos:start="632:52" pos:end="632:57"><name pos:start="632:52" pos:end="632:57">target</name></expr></argument>)</argument_list></call> <operator pos:start="632:60" pos:end="632:61">==</operator> <literal type="number" pos:start="632:63" pos:end="632:63">0</literal></expr>)</condition> <block pos:start="632:66" pos:end="634:25">{<block_content pos:start="633:29" pos:end="633:73">
                            <expr_stmt pos:start="633:29" pos:end="633:73"><expr pos:start="633:29" pos:end="633:72"><name pos:start="633:29" pos:end="633:46"><name pos:start="633:29" pos:end="633:39">semihosting</name><operator pos:start="633:40" pos:end="633:40">.</operator><name pos:start="633:41" pos:end="633:46">target</name></name> <operator pos:start="633:48" pos:end="633:48">=</operator> <name pos:start="633:50" pos:end="633:72">SEMIHOSTING_TARGET_AUTO</name></expr>;</expr_stmt>
                        </block_content>}</block></if> <else pos:start="634:27" pos:end="637:21">else <block pos:start="634:32" pos:end="637:21">{<block_content pos:start="635:29" pos:end="636:49">
                            <expr_stmt pos:start="635:29" pos:end="636:49"><expr pos:start="635:29" pos:end="636:48"><call pos:start="635:29" pos:end="636:48"><name pos:start="635:29" pos:end="635:40">error_report</name><argument_list pos:start="635:41" pos:end="636:48">(<argument pos:start="635:42" pos:end="635:76"><expr pos:start="635:42" pos:end="635:76"><literal type="string" pos:start="635:42" pos:end="635:76">"unsupported semihosting-config %s"</literal></expr></argument>,
                                         <argument pos:start="636:42" pos:end="636:47"><expr pos:start="636:42" pos:end="636:47"><name pos:start="636:42" pos:end="636:47">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt> <if_stmt pos:start="637:23" pos:end="642:17"><else pos:start="637:23" pos:end="642:17">else <block pos:start="637:28" pos:end="642:17">{<block_content pos:start="638:25" pos:end="641:57">
                        <expr_stmt pos:start="638:25" pos:end="638:69"><expr pos:start="638:25" pos:end="638:68"><name pos:start="638:25" pos:end="638:42"><name pos:start="638:25" pos:end="638:35">semihosting</name><operator pos:start="638:36" pos:end="638:36">.</operator><name pos:start="638:37" pos:end="638:42">target</name></name> <operator pos:start="638:44" pos:end="638:44">=</operator> <name pos:start="638:46" pos:end="638:68">SEMIHOSTING_TARGET_AUTO</name></expr>;</expr_stmt>
                    <comment type="block" pos:start="639:21" pos:end="639:67">/* Set semihosting argument count and vector */</comment>
                    <expr_stmt pos:start="640:21" pos:end="641:57"><expr pos:start="640:21" pos:end="641:56"><call pos:start="640:21" pos:end="641:56"><name pos:start="640:21" pos:end="640:36">qemu_opt_foreach</name><argument_list pos:start="640:37" pos:end="641:56">(<argument pos:start="640:38" pos:end="640:41"><expr pos:start="640:38" pos:end="640:41"><name pos:start="640:38" pos:end="640:41">opts</name></expr></argument>, <argument pos:start="640:44" pos:end="640:62"><expr pos:start="640:44" pos:end="640:62"><name pos:start="640:44" pos:end="640:62">add_semihosting_arg</name></expr></argument>,
                                     <argument pos:start="641:38" pos:end="641:49"><expr pos:start="641:38" pos:end="641:49"><operator pos:start="641:38" pos:end="641:38">&amp;</operator><name pos:start="641:39" pos:end="641:49">semihosting</name></expr></argument>, <argument pos:start="641:52" pos:end="641:55"><expr pos:start="641:52" pos:end="641:55"><name pos:start="641:52" pos:end="641:55">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt> <if_stmt pos:start="642:19" pos:end="1197:13"><else pos:start="642:19" pos:end="1197:13">else <block pos:start="642:24" pos:end="1197:13">{<block_content pos:start="643:21" pos:end="1197:13">
                    <expr_stmt pos:start="643:21" pos:end="643:78"><expr pos:start="643:21" pos:end="643:77"><call pos:start="643:21" pos:end="643:77"><name pos:start="643:21" pos:end="643:32">error_report</name><argument_list pos:start="643:33" pos:end="643:77">(<argument pos:start="643:34" pos:end="643:68"><expr pos:start="643:34" pos:end="643:68"><literal type="string" pos:start="643:34" pos:end="643:68">"unsupported semihosting-config %s"</literal></expr></argument>, <argument pos:start="643:71" pos:end="643:76"><expr pos:start="643:71" pos:end="643:76"><name pos:start="643:71" pos:end="643:76">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="644:13" pos:end="644:33">case <expr pos:start="644:18" pos:end="644:32"><name pos:start="644:18" pos:end="644:32">QEMU_OPTION_tdf</name></expr>:</case>
                <expr_stmt pos:start="645:17" pos:end="645:68"><expr pos:start="645:17" pos:end="645:67"><call pos:start="645:17" pos:end="645:67"><name pos:start="645:17" pos:end="645:28">error_report</name><argument_list pos:start="645:29" pos:end="645:67">(<argument pos:start="645:30" pos:end="645:66"><expr pos:start="645:30" pos:end="645:66"><literal type="string" pos:start="645:30" pos:end="645:66">"warning: ignoring deprecated option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="646:13" pos:end="646:34">case <expr pos:start="646:18" pos:end="646:33"><name pos:start="646:18" pos:end="646:33">QEMU_OPTION_name</name></expr>:</case>
                <expr_stmt pos:start="647:17" pos:end="648:61"><expr pos:start="647:17" pos:end="648:60"><name pos:start="647:17" pos:end="647:20">opts</name> <operator pos:start="647:22" pos:end="647:22">=</operator> <call pos:start="647:24" pos:end="648:60"><name pos:start="647:24" pos:end="647:46">qemu_opts_parse_noisily</name><argument_list pos:start="647:47" pos:end="648:60">(<argument pos:start="647:48" pos:end="647:69"><expr pos:start="647:48" pos:end="647:69"><call pos:start="647:48" pos:end="647:69"><name pos:start="647:48" pos:end="647:61">qemu_find_opts</name><argument_list pos:start="647:62" pos:end="647:69">(<argument pos:start="647:63" pos:end="647:68"><expr pos:start="647:63" pos:end="647:68"><literal type="string" pos:start="647:63" pos:end="647:68">"name"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                               <argument pos:start="648:48" pos:end="648:53"><expr pos:start="648:48" pos:end="648:53"><name pos:start="648:48" pos:end="648:53">optarg</name></expr></argument>, <argument pos:start="648:56" pos:end="648:59"><expr pos:start="648:56" pos:end="648:59"><name pos:start="648:56" pos:end="648:59">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="649:17" pos:end="1197:13"><if pos:start="649:17" pos:end="1197:13">if <condition pos:start="649:20" pos:end="649:26">(<expr pos:start="649:21" pos:end="649:25"><operator pos:start="649:21" pos:end="649:21">!</operator><name pos:start="649:22" pos:end="649:25">opts</name></expr>)</condition> <block pos:start="649:28" pos:end="1197:13">{<block_content pos:start="650:13" pos:end="1197:13">
            <case pos:start="650:13" pos:end="650:38">case <expr pos:start="650:18" pos:end="650:37"><name pos:start="650:18" pos:end="650:37">QEMU_OPTION_prom_env</name></expr>:</case>
                <if_stmt pos:start="651:17" pos:end="1197:13"><if pos:start="651:17" pos:end="1197:13">if <condition pos:start="651:20" pos:end="651:50">(<expr pos:start="651:21" pos:end="651:49"><name pos:start="651:21" pos:end="651:32">nb_prom_envs</name> <operator pos:start="651:34" pos:end="651:35">&gt;=</operator> <name pos:start="651:37" pos:end="651:49">MAX_PROM_ENVS</name></expr>)</condition> <block pos:start="651:52" pos:end="1197:13">{<block_content pos:start="652:21" pos:end="1197:13">
                    <expr_stmt pos:start="652:21" pos:end="652:60"><expr pos:start="652:21" pos:end="652:59"><call pos:start="652:21" pos:end="652:59"><name pos:start="652:21" pos:end="652:32">error_report</name><argument_list pos:start="652:33" pos:end="652:59">(<argument pos:start="652:34" pos:end="652:58"><expr pos:start="652:34" pos:end="652:58"><literal type="string" pos:start="652:34" pos:end="652:58">"too many prom variables"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="653:17" pos:end="653:49"><expr pos:start="653:17" pos:end="653:48"><name pos:start="653:17" pos:end="653:39"><name pos:start="653:17" pos:end="653:25">prom_envs</name><index pos:start="653:26" pos:end="653:39">[<expr pos:start="653:27" pos:end="653:38"><name pos:start="653:27" pos:end="653:38">nb_prom_envs</name></expr>]</index></name> <operator pos:start="653:41" pos:end="653:41">=</operator> <name pos:start="653:43" pos:end="653:48">optarg</name></expr>;</expr_stmt>
                <expr_stmt pos:start="654:17" pos:end="654:31"><expr pos:start="654:17" pos:end="654:30"><name pos:start="654:17" pos:end="654:28">nb_prom_envs</name><operator pos:start="654:29" pos:end="654:30">++</operator></expr>;</expr_stmt>
            <case pos:start="655:13" pos:end="655:39">case <expr pos:start="655:18" pos:end="655:38"><name pos:start="655:18" pos:end="655:38">QEMU_OPTION_old_param</name></expr>:</case>
                <expr_stmt pos:start="656:17" pos:end="656:30"><expr pos:start="656:17" pos:end="656:29"><name pos:start="656:17" pos:end="656:25">old_param</name> <operator pos:start="656:27" pos:end="656:27">=</operator> <literal type="number" pos:start="656:29" pos:end="656:29">1</literal></expr>;</expr_stmt>
            <case pos:start="657:13" pos:end="657:35">case <expr pos:start="657:18" pos:end="657:34"><name pos:start="657:18" pos:end="657:34">QEMU_OPTION_clock</name></expr>:</case>
                <comment type="block" pos:start="658:17" pos:end="660:19">/* Clock options no longer exist.  Keep this option for
                 * backward compatibility.
                 */</comment>
            <case pos:start="661:13" pos:end="661:39">case <expr pos:start="661:18" pos:end="661:38"><name pos:start="661:18" pos:end="661:38">QEMU_OPTION_startdate</name></expr>:</case>
                <expr_stmt pos:start="662:17" pos:end="662:53"><expr pos:start="662:17" pos:end="662:52"><call pos:start="662:17" pos:end="662:52"><name pos:start="662:17" pos:end="662:41">configure_rtc_date_offset</name><argument_list pos:start="662:42" pos:end="662:52">(<argument pos:start="662:43" pos:end="662:48"><expr pos:start="662:43" pos:end="662:48"><name pos:start="662:43" pos:end="662:48">optarg</name></expr></argument>, <argument pos:start="662:51" pos:end="662:51"><expr pos:start="662:51" pos:end="662:51"><literal type="number" pos:start="662:51" pos:end="662:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="663:13" pos:end="663:33">case <expr pos:start="663:18" pos:end="663:32"><name pos:start="663:18" pos:end="663:32">QEMU_OPTION_rtc</name></expr>:</case>
                <expr_stmt pos:start="664:17" pos:end="665:54"><expr pos:start="664:17" pos:end="665:53"><name pos:start="664:17" pos:end="664:20">opts</name> <operator pos:start="664:22" pos:end="664:22">=</operator> <call pos:start="664:24" pos:end="665:53"><name pos:start="664:24" pos:end="664:46">qemu_opts_parse_noisily</name><argument_list pos:start="664:47" pos:end="665:53">(<argument pos:start="664:48" pos:end="664:68"><expr pos:start="664:48" pos:end="664:68"><call pos:start="664:48" pos:end="664:68"><name pos:start="664:48" pos:end="664:61">qemu_find_opts</name><argument_list pos:start="664:62" pos:end="664:68">(<argument pos:start="664:63" pos:end="664:67"><expr pos:start="664:63" pos:end="664:67"><literal type="string" pos:start="664:63" pos:end="664:67">"rtc"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="664:71" pos:end="664:76"><expr pos:start="664:71" pos:end="664:76"><name pos:start="664:71" pos:end="664:76">optarg</name></expr></argument>,
                                               <argument pos:start="665:48" pos:end="665:52"><expr pos:start="665:48" pos:end="665:52"><name pos:start="665:48" pos:end="665:52">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="666:17" pos:end="1197:13"><if pos:start="666:17" pos:end="1197:13">if <condition pos:start="666:20" pos:end="666:26">(<expr pos:start="666:21" pos:end="666:25"><operator pos:start="666:21" pos:end="666:21">!</operator><name pos:start="666:22" pos:end="666:25">opts</name></expr>)</condition> <block pos:start="666:28" pos:end="1197:13">{<block_content pos:start="667:17" pos:end="1197:13">
                <expr_stmt pos:start="667:17" pos:end="667:36"><expr pos:start="667:17" pos:end="667:35"><call pos:start="667:17" pos:end="667:35"><name pos:start="667:17" pos:end="667:29">configure_rtc</name><argument_list pos:start="667:30" pos:end="667:35">(<argument pos:start="667:31" pos:end="667:34"><expr pos:start="667:31" pos:end="667:34"><name pos:start="667:31" pos:end="667:34">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="668:13" pos:end="668:37">case <expr pos:start="668:18" pos:end="668:36"><name pos:start="668:18" pos:end="668:36">QEMU_OPTION_tb_size</name></expr>:</case>
                <expr_stmt pos:start="669:17" pos:end="669:54"><expr pos:start="669:17" pos:end="669:53"><name pos:start="669:17" pos:end="669:27">tcg_tb_size</name> <operator pos:start="669:29" pos:end="669:29">=</operator> <call pos:start="669:31" pos:end="669:53"><name pos:start="669:31" pos:end="669:36">strtol</name><argument_list pos:start="669:37" pos:end="669:53">(<argument pos:start="669:38" pos:end="669:43"><expr pos:start="669:38" pos:end="669:43"><name pos:start="669:38" pos:end="669:43">optarg</name></expr></argument>, <argument pos:start="669:46" pos:end="669:49"><expr pos:start="669:46" pos:end="669:49"><name pos:start="669:46" pos:end="669:49">NULL</name></expr></argument>, <argument pos:start="669:52" pos:end="669:52"><expr pos:start="669:52" pos:end="669:52"><literal type="number" pos:start="669:52" pos:end="669:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="670:17" pos:end="1197:13"><if pos:start="670:17" pos:end="1197:13">if <condition pos:start="670:20" pos:end="670:36">(<expr pos:start="670:21" pos:end="670:35"><name pos:start="670:21" pos:end="670:31">tcg_tb_size</name> <operator pos:start="670:33" pos:end="670:33">&lt;</operator> <literal type="number" pos:start="670:35" pos:end="670:35">0</literal></expr>)</condition> <block pos:start="670:38" pos:end="1197:13">{<block_content pos:start="671:21" pos:end="1197:13">
                    <expr_stmt pos:start="671:21" pos:end="671:36"><expr pos:start="671:21" pos:end="671:35"><name pos:start="671:21" pos:end="671:31">tcg_tb_size</name> <operator pos:start="671:33" pos:end="671:33">=</operator> <literal type="number" pos:start="671:35" pos:end="671:35">0</literal></expr>;</expr_stmt>
            <case pos:start="672:13" pos:end="672:36">case <expr pos:start="672:18" pos:end="672:35"><name pos:start="672:18" pos:end="672:35">QEMU_OPTION_icount</name></expr>:</case>
                <expr_stmt pos:start="673:17" pos:end="674:68"><expr pos:start="673:17" pos:end="674:67"><name pos:start="673:17" pos:end="673:27">icount_opts</name> <operator pos:start="673:29" pos:end="673:29">=</operator> <call pos:start="673:31" pos:end="674:67"><name pos:start="673:31" pos:end="673:53">qemu_opts_parse_noisily</name><argument_list pos:start="673:54" pos:end="674:67">(<argument pos:start="673:55" pos:end="673:78"><expr pos:start="673:55" pos:end="673:78"><call pos:start="673:55" pos:end="673:78"><name pos:start="673:55" pos:end="673:68">qemu_find_opts</name><argument_list pos:start="673:69" pos:end="673:78">(<argument pos:start="673:70" pos:end="673:77"><expr pos:start="673:70" pos:end="673:77"><literal type="string" pos:start="673:70" pos:end="673:77">"icount"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                                      <argument pos:start="674:55" pos:end="674:60"><expr pos:start="674:55" pos:end="674:60"><name pos:start="674:55" pos:end="674:60">optarg</name></expr></argument>, <argument pos:start="674:63" pos:end="674:66"><expr pos:start="674:63" pos:end="674:66"><name pos:start="674:63" pos:end="674:66">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="675:17" pos:end="1197:13"><if pos:start="675:17" pos:end="1197:13">if <condition pos:start="675:20" pos:end="675:33">(<expr pos:start="675:21" pos:end="675:32"><operator pos:start="675:21" pos:end="675:21">!</operator><name pos:start="675:22" pos:end="675:32">icount_opts</name></expr>)</condition> <block pos:start="675:35" pos:end="1197:13">{<block_content pos:start="676:13" pos:end="1197:13">
            <case pos:start="676:13" pos:end="676:38">case <expr pos:start="676:18" pos:end="676:37"><name pos:start="676:18" pos:end="676:37">QEMU_OPTION_incoming</name></expr>:</case>
                <if_stmt pos:start="677:17" pos:end="1197:13"><if pos:start="677:17" pos:end="1197:13">if <condition pos:start="677:20" pos:end="677:30">(<expr pos:start="677:21" pos:end="677:29"><operator pos:start="677:21" pos:end="677:21">!</operator><name pos:start="677:22" pos:end="677:29">incoming</name></expr>)</condition> <block pos:start="677:32" pos:end="1197:13">{<block_content pos:start="678:21" pos:end="1197:13">
                    <expr_stmt pos:start="678:21" pos:end="678:54"><expr pos:start="678:21" pos:end="678:53"><call pos:start="678:21" pos:end="678:53"><name pos:start="678:21" pos:end="678:32">runstate_set</name><argument_list pos:start="678:33" pos:end="678:53">(<argument pos:start="678:34" pos:end="678:52"><expr pos:start="678:34" pos:end="678:52"><name pos:start="678:34" pos:end="678:52">RUN_STATE_INMIGRATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="679:17" pos:end="679:34"><expr pos:start="679:17" pos:end="679:33"><name pos:start="679:17" pos:end="679:24">incoming</name> <operator pos:start="679:26" pos:end="679:26">=</operator> <name pos:start="679:28" pos:end="679:33">optarg</name></expr>;</expr_stmt>
            <case pos:start="680:13" pos:end="680:45">case <expr pos:start="680:18" pos:end="680:44"><name pos:start="680:18" pos:end="680:44">QEMU_OPTION_only_migratable</name></expr>:</case>
                <expr_stmt pos:start="681:17" pos:end="681:36"><expr pos:start="681:17" pos:end="681:35"><name pos:start="681:17" pos:end="681:31">only_migratable</name> <operator pos:start="681:33" pos:end="681:33">=</operator> <literal type="number" pos:start="681:35" pos:end="681:35">1</literal></expr>;</expr_stmt>
            <case pos:start="682:13" pos:end="682:40">case <expr pos:start="682:18" pos:end="682:39"><name pos:start="682:18" pos:end="682:39">QEMU_OPTION_nodefaults</name></expr>:</case>
                <expr_stmt pos:start="683:17" pos:end="683:33"><expr pos:start="683:17" pos:end="683:32"><name pos:start="683:17" pos:end="683:28">has_defaults</name> <operator pos:start="683:30" pos:end="683:30">=</operator> <literal type="number" pos:start="683:32" pos:end="683:32">0</literal></expr>;</expr_stmt>
            <case pos:start="684:13" pos:end="684:39">case <expr pos:start="684:18" pos:end="684:38"><name pos:start="684:18" pos:end="684:38">QEMU_OPTION_xen_domid</name></expr>:</case>
                <if_stmt pos:start="685:17" pos:end="1197:13"><if pos:start="685:17" pos:end="1197:13">if <condition pos:start="685:20" pos:end="685:39">(<expr pos:start="685:21" pos:end="685:38"><operator pos:start="685:21" pos:end="685:21">!</operator><operator pos:start="685:22" pos:end="685:22">(</operator><call pos:start="685:23" pos:end="685:37"><name pos:start="685:23" pos:end="685:35">xen_available</name><argument_list pos:start="685:36" pos:end="685:37">()</argument_list></call><operator pos:start="685:38" pos:end="685:38">)</operator></expr>)</condition> <block pos:start="685:41" pos:end="1197:13">{<block_content pos:start="686:21" pos:end="1197:13">
                    <expr_stmt pos:start="686:21" pos:end="686:73"><expr pos:start="686:21" pos:end="686:72"><call pos:start="686:21" pos:end="686:72"><name pos:start="686:21" pos:end="686:32">error_report</name><argument_list pos:start="686:33" pos:end="686:72">(<argument pos:start="686:34" pos:end="686:71"><expr pos:start="686:34" pos:end="686:71"><literal type="string" pos:start="686:34" pos:end="686:71">"Option not supported for this target"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="687:17" pos:end="687:41"><expr pos:start="687:17" pos:end="687:40"><name pos:start="687:17" pos:end="687:25">xen_domid</name> <operator pos:start="687:27" pos:end="687:27">=</operator> <call pos:start="687:29" pos:end="687:40"><name pos:start="687:29" pos:end="687:32">atoi</name><argument_list pos:start="687:33" pos:end="687:40">(<argument pos:start="687:34" pos:end="687:39"><expr pos:start="687:34" pos:end="687:39"><name pos:start="687:34" pos:end="687:39">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="688:13" pos:end="688:40">case <expr pos:start="688:18" pos:end="688:39"><name pos:start="688:18" pos:end="688:39">QEMU_OPTION_xen_create</name></expr>:</case>
                <if_stmt pos:start="689:17" pos:end="1197:13"><if pos:start="689:17" pos:end="1197:13">if <condition pos:start="689:20" pos:end="689:39">(<expr pos:start="689:21" pos:end="689:38"><operator pos:start="689:21" pos:end="689:21">!</operator><operator pos:start="689:22" pos:end="689:22">(</operator><call pos:start="689:23" pos:end="689:37"><name pos:start="689:23" pos:end="689:35">xen_available</name><argument_list pos:start="689:36" pos:end="689:37">()</argument_list></call><operator pos:start="689:38" pos:end="689:38">)</operator></expr>)</condition> <block pos:start="689:41" pos:end="1197:13">{<block_content pos:start="690:21" pos:end="1197:13">
                    <expr_stmt pos:start="690:21" pos:end="690:73"><expr pos:start="690:21" pos:end="690:72"><call pos:start="690:21" pos:end="690:72"><name pos:start="690:21" pos:end="690:32">error_report</name><argument_list pos:start="690:33" pos:end="690:72">(<argument pos:start="690:34" pos:end="690:71"><expr pos:start="690:34" pos:end="690:71"><literal type="string" pos:start="690:34" pos:end="690:71">"Option not supported for this target"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="691:17" pos:end="691:38"><expr pos:start="691:17" pos:end="691:37"><name pos:start="691:17" pos:end="691:24">xen_mode</name> <operator pos:start="691:26" pos:end="691:26">=</operator> <name pos:start="691:28" pos:end="691:37">XEN_CREATE</name></expr>;</expr_stmt>
            <case pos:start="692:13" pos:end="692:40">case <expr pos:start="692:18" pos:end="692:39"><name pos:start="692:18" pos:end="692:39">QEMU_OPTION_xen_attach</name></expr>:</case>
                <if_stmt pos:start="693:17" pos:end="1197:13"><if pos:start="693:17" pos:end="1197:13">if <condition pos:start="693:20" pos:end="693:39">(<expr pos:start="693:21" pos:end="693:38"><operator pos:start="693:21" pos:end="693:21">!</operator><operator pos:start="693:22" pos:end="693:22">(</operator><call pos:start="693:23" pos:end="693:37"><name pos:start="693:23" pos:end="693:35">xen_available</name><argument_list pos:start="693:36" pos:end="693:37">()</argument_list></call><operator pos:start="693:38" pos:end="693:38">)</operator></expr>)</condition> <block pos:start="693:41" pos:end="1197:13">{<block_content pos:start="694:21" pos:end="1197:13">
                    <expr_stmt pos:start="694:21" pos:end="694:73"><expr pos:start="694:21" pos:end="694:72"><call pos:start="694:21" pos:end="694:72"><name pos:start="694:21" pos:end="694:32">error_report</name><argument_list pos:start="694:33" pos:end="694:72">(<argument pos:start="694:34" pos:end="694:71"><expr pos:start="694:34" pos:end="694:71"><literal type="string" pos:start="694:34" pos:end="694:71">"Option not supported for this target"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="695:17" pos:end="695:38"><expr pos:start="695:17" pos:end="695:37"><name pos:start="695:17" pos:end="695:24">xen_mode</name> <operator pos:start="695:26" pos:end="695:26">=</operator> <name pos:start="695:28" pos:end="695:37">XEN_ATTACH</name></expr>;</expr_stmt>
            <case pos:start="696:13" pos:end="696:35">case <expr pos:start="696:18" pos:end="696:34"><name pos:start="696:18" pos:end="696:34">QEMU_OPTION_trace</name></expr>:</case>
                <expr_stmt pos:start="697:17" pos:end="697:35"><expr pos:start="697:17" pos:end="697:34"><call pos:start="697:17" pos:end="697:34"><name pos:start="697:17" pos:end="697:22">g_free</name><argument_list pos:start="697:23" pos:end="697:34">(<argument pos:start="697:24" pos:end="697:33"><expr pos:start="697:24" pos:end="697:33"><name pos:start="697:24" pos:end="697:33">trace_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="698:17" pos:end="698:53"><expr pos:start="698:17" pos:end="698:52"><name pos:start="698:17" pos:end="698:26">trace_file</name> <operator pos:start="698:28" pos:end="698:28">=</operator> <call pos:start="698:30" pos:end="698:52"><name pos:start="698:30" pos:end="698:44">trace_opt_parse</name><argument_list pos:start="698:45" pos:end="698:52">(<argument pos:start="698:46" pos:end="698:51"><expr pos:start="698:46" pos:end="698:51"><name pos:start="698:46" pos:end="698:51">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="699:13" pos:end="699:40">case <expr pos:start="699:18" pos:end="699:39"><name pos:start="699:18" pos:end="699:39">QEMU_OPTION_readconfig</name></expr>:</case>
                    <decl_stmt pos:start="700:21" pos:end="700:60"><decl pos:start="700:21" pos:end="700:59"><type pos:start="700:21" pos:end="700:23"><name pos:start="700:21" pos:end="700:23">int</name></type> <name pos:start="700:25" pos:end="700:27">ret</name> <init pos:start="700:29" pos:end="700:59">= <expr pos:start="700:31" pos:end="700:59"><call pos:start="700:31" pos:end="700:59"><name pos:start="700:31" pos:end="700:51">qemu_read_config_file</name><argument_list pos:start="700:52" pos:end="700:59">(<argument pos:start="700:53" pos:end="700:58"><expr pos:start="700:53" pos:end="700:58"><name pos:start="700:53" pos:end="700:58">optarg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt pos:start="701:21" pos:end="1197:13"><if pos:start="701:21" pos:end="1197:13">if <condition pos:start="701:24" pos:end="701:32">(<expr pos:start="701:25" pos:end="701:31"><name pos:start="701:25" pos:end="701:27">ret</name> <operator pos:start="701:29" pos:end="701:29">&lt;</operator> <literal type="number" pos:start="701:31" pos:end="701:31">0</literal></expr>)</condition> <block pos:start="701:34" pos:end="1197:13">{<block_content pos:start="702:25" pos:end="1197:13">
                        <expr_stmt pos:start="702:25" pos:end="703:53"><expr pos:start="702:25" pos:end="703:52"><call pos:start="702:25" pos:end="703:52"><name pos:start="702:25" pos:end="702:36">error_report</name><argument_list pos:start="702:37" pos:end="703:52">(<argument pos:start="702:38" pos:end="702:57"><expr pos:start="702:38" pos:end="702:57"><literal type="string" pos:start="702:38" pos:end="702:57">"read config %s: %s"</literal></expr></argument>, <argument pos:start="702:60" pos:end="702:65"><expr pos:start="702:60" pos:end="702:65"><name pos:start="702:60" pos:end="702:65">optarg</name></expr></argument>,
                                     <argument pos:start="703:38" pos:end="703:51"><expr pos:start="703:38" pos:end="703:51"><call pos:start="703:38" pos:end="703:51"><name pos:start="703:38" pos:end="703:45">strerror</name><argument_list pos:start="703:46" pos:end="703:51">(<argument pos:start="703:47" pos:end="703:50"><expr pos:start="703:47" pos:end="703:50"><operator pos:start="703:47" pos:end="703:47">-</operator><name pos:start="703:48" pos:end="703:50">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="704:13" pos:end="704:35">case <expr pos:start="704:18" pos:end="704:34"><name pos:start="704:18" pos:end="704:34">QEMU_OPTION_spice</name></expr>:</case>
                <expr_stmt pos:start="705:17" pos:end="705:48"><expr pos:start="705:17" pos:end="705:47"><name pos:start="705:17" pos:end="705:21">olist</name> <operator pos:start="705:23" pos:end="705:23">=</operator> <call pos:start="705:25" pos:end="705:47"><name pos:start="705:25" pos:end="705:38">qemu_find_opts</name><argument_list pos:start="705:39" pos:end="705:47">(<argument pos:start="705:40" pos:end="705:46"><expr pos:start="705:40" pos:end="705:46"><literal type="string" pos:start="705:40" pos:end="705:46">"spice"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="706:17" pos:end="1197:13"><if pos:start="706:17" pos:end="1197:13">if <condition pos:start="706:20" pos:end="706:27">(<expr pos:start="706:21" pos:end="706:26"><operator pos:start="706:21" pos:end="706:21">!</operator><name pos:start="706:22" pos:end="706:26">olist</name></expr>)</condition> <block pos:start="706:29" pos:end="1197:13">{<block_content pos:start="707:21" pos:end="1197:13">
                    <expr_stmt pos:start="707:21" pos:end="707:62"><expr pos:start="707:21" pos:end="707:61"><call pos:start="707:21" pos:end="707:61"><name pos:start="707:21" pos:end="707:32">error_report</name><argument_list pos:start="707:33" pos:end="707:61">(<argument pos:start="707:34" pos:end="707:60"><expr pos:start="707:34" pos:end="707:60"><literal type="string" pos:start="707:34" pos:end="707:60">"spice support is disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="708:17" pos:end="708:69"><expr pos:start="708:17" pos:end="708:68"><name pos:start="708:17" pos:end="708:20">opts</name> <operator pos:start="708:22" pos:end="708:22">=</operator> <call pos:start="708:24" pos:end="708:68"><name pos:start="708:24" pos:end="708:46">qemu_opts_parse_noisily</name><argument_list pos:start="708:47" pos:end="708:68">(<argument pos:start="708:48" pos:end="708:52"><expr pos:start="708:48" pos:end="708:52"><name pos:start="708:48" pos:end="708:52">olist</name></expr></argument>, <argument pos:start="708:55" pos:end="708:60"><expr pos:start="708:55" pos:end="708:60"><name pos:start="708:55" pos:end="708:60">optarg</name></expr></argument>, <argument pos:start="708:63" pos:end="708:67"><expr pos:start="708:63" pos:end="708:67"><name pos:start="708:63" pos:end="708:67">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="709:17" pos:end="1197:13"><if pos:start="709:17" pos:end="1197:13">if <condition pos:start="709:20" pos:end="709:26">(<expr pos:start="709:21" pos:end="709:25"><operator pos:start="709:21" pos:end="709:21">!</operator><name pos:start="709:22" pos:end="709:25">opts</name></expr>)</condition> <block pos:start="709:28" pos:end="1197:13">{<block_content pos:start="710:17" pos:end="1197:13">
                <expr_stmt pos:start="710:17" pos:end="710:33"><expr pos:start="710:17" pos:end="710:32"><name pos:start="710:17" pos:end="710:30">display_remote</name><operator pos:start="710:31" pos:end="710:32">++</operator></expr>;</expr_stmt>
            <case pos:start="711:13" pos:end="711:41">case <expr pos:start="711:18" pos:end="711:40"><name pos:start="711:18" pos:end="711:40">QEMU_OPTION_writeconfig</name></expr>:</case>
                    <decl_stmt pos:start="712:21" pos:end="712:29"><decl pos:start="712:21" pos:end="712:28"><type pos:start="712:21" pos:end="712:26"><name pos:start="712:21" pos:end="712:24">FILE</name> <modifier pos:start="712:26" pos:end="712:26">*</modifier></type><name pos:start="712:27" pos:end="712:28">fp</name></decl>;</decl_stmt>
                    <if_stmt pos:start="713:21" pos:end="1197:13"><if pos:start="713:21" pos:end="715:21">if <condition pos:start="713:24" pos:end="713:49">(<expr pos:start="713:25" pos:end="713:48"><call pos:start="713:25" pos:end="713:43"><name pos:start="713:25" pos:end="713:30">strcmp</name><argument_list pos:start="713:31" pos:end="713:43">(<argument pos:start="713:32" pos:end="713:37"><expr pos:start="713:32" pos:end="713:37"><name pos:start="713:32" pos:end="713:37">optarg</name></expr></argument>, <argument pos:start="713:40" pos:end="713:42"><expr pos:start="713:40" pos:end="713:42"><literal type="string" pos:start="713:40" pos:end="713:42">"-"</literal></expr></argument>)</argument_list></call> <operator pos:start="713:45" pos:end="713:46">==</operator> <literal type="number" pos:start="713:48" pos:end="713:48">0</literal></expr>)</condition> <block pos:start="713:51" pos:end="715:21">{<block_content pos:start="714:25" pos:end="714:36">
                        <expr_stmt pos:start="714:25" pos:end="714:36"><expr pos:start="714:25" pos:end="714:35"><name pos:start="714:25" pos:end="714:26">fp</name> <operator pos:start="714:28" pos:end="714:28">=</operator> <name pos:start="714:30" pos:end="714:35">stdout</name></expr>;</expr_stmt>
                    </block_content>}</block></if> <else pos:start="715:23" pos:end="1197:13">else <block pos:start="715:28" pos:end="1197:13">{<block_content pos:start="716:25" pos:end="1197:13">
                        <expr_stmt pos:start="716:25" pos:end="716:48"><expr pos:start="716:25" pos:end="716:47"><name pos:start="716:25" pos:end="716:26">fp</name> <operator pos:start="716:28" pos:end="716:28">=</operator> <call pos:start="716:30" pos:end="716:47"><name pos:start="716:30" pos:end="716:34">fopen</name><argument_list pos:start="716:35" pos:end="716:47">(<argument pos:start="716:36" pos:end="716:41"><expr pos:start="716:36" pos:end="716:41"><name pos:start="716:36" pos:end="716:41">optarg</name></expr></argument>, <argument pos:start="716:44" pos:end="716:46"><expr pos:start="716:44" pos:end="716:46"><literal type="string" pos:start="716:44" pos:end="716:46">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt pos:start="717:25" pos:end="1197:13"><if pos:start="717:25" pos:end="1197:13">if <condition pos:start="717:28" pos:end="717:39">(<expr pos:start="717:29" pos:end="717:38"><name pos:start="717:29" pos:end="717:30">fp</name> <operator pos:start="717:32" pos:end="717:33">==</operator> <name pos:start="717:35" pos:end="717:38">NULL</name></expr>)</condition> <block pos:start="717:41" pos:end="1197:13">{<block_content pos:start="718:29" pos:end="1197:13">
                            <expr_stmt pos:start="718:29" pos:end="719:58"><expr pos:start="718:29" pos:end="719:57"><call pos:start="718:29" pos:end="719:57"><name pos:start="718:29" pos:end="718:40">error_report</name><argument_list pos:start="718:41" pos:end="719:57">(<argument pos:start="718:42" pos:end="718:54"><expr pos:start="718:42" pos:end="718:54"><literal type="string" pos:start="718:42" pos:end="718:54">"open %s: %s"</literal></expr></argument>, <argument pos:start="718:57" pos:end="718:62"><expr pos:start="718:57" pos:end="718:62"><name pos:start="718:57" pos:end="718:62">optarg</name></expr></argument>,
                                         <argument pos:start="719:42" pos:end="719:56"><expr pos:start="719:42" pos:end="719:56"><call pos:start="719:42" pos:end="719:56"><name pos:start="719:42" pos:end="719:49">strerror</name><argument_list pos:start="719:50" pos:end="719:56">(<argument pos:start="719:51" pos:end="719:55"><expr pos:start="719:51" pos:end="719:55"><name pos:start="719:51" pos:end="719:55">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="720:21" pos:end="720:42"><expr pos:start="720:21" pos:end="720:41"><call pos:start="720:21" pos:end="720:41"><name pos:start="720:21" pos:end="720:37">qemu_config_write</name><argument_list pos:start="720:38" pos:end="720:41">(<argument pos:start="720:39" pos:end="720:40"><expr pos:start="720:39" pos:end="720:40"><name pos:start="720:39" pos:end="720:40">fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="721:21" pos:end="1197:13"><if pos:start="721:21" pos:end="1197:13">if <condition pos:start="721:24" pos:end="721:37">(<expr pos:start="721:25" pos:end="721:36"><name pos:start="721:25" pos:end="721:26">fp</name> <operator pos:start="721:28" pos:end="721:29">!=</operator> <name pos:start="721:31" pos:end="721:36">stdout</name></expr>)</condition> <block pos:start="721:39" pos:end="1197:13">{<block_content pos:start="722:25" pos:end="1197:13">
                        <expr_stmt pos:start="722:25" pos:end="722:35"><expr pos:start="722:25" pos:end="722:34"><call pos:start="722:25" pos:end="722:34"><name pos:start="722:25" pos:end="722:30">fclose</name><argument_list pos:start="722:31" pos:end="722:34">(<argument pos:start="722:32" pos:end="722:33"><expr pos:start="722:32" pos:end="722:33"><name pos:start="722:32" pos:end="722:33">fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="723:13" pos:end="723:35">case <expr pos:start="723:18" pos:end="723:34"><name pos:start="723:18" pos:end="723:34">QEMU_OPTION_qtest</name></expr>:</case>
                <expr_stmt pos:start="724:17" pos:end="724:38"><expr pos:start="724:17" pos:end="724:37"><name pos:start="724:17" pos:end="724:28">qtest_chrdev</name> <operator pos:start="724:30" pos:end="724:30">=</operator> <name pos:start="724:32" pos:end="724:37">optarg</name></expr>;</expr_stmt>
            <case pos:start="725:13" pos:end="725:39">case <expr pos:start="725:18" pos:end="725:38"><name pos:start="725:18" pos:end="725:38">QEMU_OPTION_qtest_log</name></expr>:</case>
                <expr_stmt pos:start="726:17" pos:end="726:35"><expr pos:start="726:17" pos:end="726:34"><name pos:start="726:17" pos:end="726:25">qtest_log</name> <operator pos:start="726:27" pos:end="726:27">=</operator> <name pos:start="726:29" pos:end="726:34">optarg</name></expr>;</expr_stmt>
            <case pos:start="727:13" pos:end="727:37">case <expr pos:start="727:18" pos:end="727:36"><name pos:start="727:18" pos:end="727:36">QEMU_OPTION_sandbox</name></expr>:</case>
                <expr_stmt pos:start="728:17" pos:end="729:61"><expr pos:start="728:17" pos:end="729:60"><name pos:start="728:17" pos:end="728:20">opts</name> <operator pos:start="728:22" pos:end="728:22">=</operator> <call pos:start="728:24" pos:end="729:60"><name pos:start="728:24" pos:end="728:46">qemu_opts_parse_noisily</name><argument_list pos:start="728:47" pos:end="729:60">(<argument pos:start="728:48" pos:end="728:72"><expr pos:start="728:48" pos:end="728:72"><call pos:start="728:48" pos:end="728:72"><name pos:start="728:48" pos:end="728:61">qemu_find_opts</name><argument_list pos:start="728:62" pos:end="728:72">(<argument pos:start="728:63" pos:end="728:71"><expr pos:start="728:63" pos:end="728:71"><literal type="string" pos:start="728:63" pos:end="728:71">"sandbox"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                               <argument pos:start="729:48" pos:end="729:53"><expr pos:start="729:48" pos:end="729:53"><name pos:start="729:48" pos:end="729:53">optarg</name></expr></argument>, <argument pos:start="729:56" pos:end="729:59"><expr pos:start="729:56" pos:end="729:59"><name pos:start="729:56" pos:end="729:59">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="730:17" pos:end="1197:13"><if pos:start="730:17" pos:end="1197:13">if <condition pos:start="730:20" pos:end="730:26">(<expr pos:start="730:21" pos:end="730:25"><operator pos:start="730:21" pos:end="730:21">!</operator><name pos:start="730:22" pos:end="730:25">opts</name></expr>)</condition> <block pos:start="730:28" pos:end="1197:13">{<block_content pos:start="731:13" pos:end="1197:13">
            <case pos:start="731:13" pos:end="733:0">case <expr pos:start="731:18" pos:end="731:35"><name pos:start="731:18" pos:end="731:35">QEMU_OPTION_add_fd</name></expr>:</case>
<cpp:ifndef pos:start="732:1" pos:end="732:14">#<cpp:directive pos:start="732:2" pos:end="732:7">ifndef</cpp:directive> <name pos:start="732:9" pos:end="732:14">_WIN32</name></cpp:ifndef>
                <expr_stmt pos:start="733:17" pos:end="734:62"><expr pos:start="733:17" pos:end="734:61"><name pos:start="733:17" pos:end="733:20">opts</name> <operator pos:start="733:22" pos:end="733:22">=</operator> <call pos:start="733:24" pos:end="734:61"><name pos:start="733:24" pos:end="733:46">qemu_opts_parse_noisily</name><argument_list pos:start="733:47" pos:end="734:61">(<argument pos:start="733:48" pos:end="733:71"><expr pos:start="733:48" pos:end="733:71"><call pos:start="733:48" pos:end="733:71"><name pos:start="733:48" pos:end="733:61">qemu_find_opts</name><argument_list pos:start="733:62" pos:end="733:71">(<argument pos:start="733:63" pos:end="733:70"><expr pos:start="733:63" pos:end="733:70"><literal type="string" pos:start="733:63" pos:end="733:70">"add-fd"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                               <argument pos:start="734:48" pos:end="734:53"><expr pos:start="734:48" pos:end="734:53"><name pos:start="734:48" pos:end="734:53">optarg</name></expr></argument>, <argument pos:start="734:56" pos:end="734:60"><expr pos:start="734:56" pos:end="734:60"><name pos:start="734:56" pos:end="734:60">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="735:17" pos:end="1197:13"><if pos:start="735:17" pos:end="1197:13">if <condition pos:start="735:20" pos:end="735:26">(<expr pos:start="735:21" pos:end="735:25"><operator pos:start="735:21" pos:end="735:21">!</operator><name pos:start="735:22" pos:end="735:25">opts</name></expr>)</condition> <block pos:start="735:28" pos:end="1197:13">{<block_content pos:start="737:17" pos:end="1197:13">
<cpp:else pos:start="736:1" pos:end="736:5">#<cpp:directive pos:start="736:2" pos:end="736:5">else</cpp:directive></cpp:else>
                <expr_stmt pos:start="737:17" pos:end="740:0"><expr pos:start="737:17" pos:end="738:40"><call pos:start="737:17" pos:end="738:40"><name pos:start="737:17" pos:end="737:28">error_report</name><argument_list pos:start="737:29" pos:end="738:40">(<argument pos:start="737:30" pos:end="738:39"><expr pos:start="737:30" pos:end="738:39"><literal type="string" pos:start="737:30" pos:end="737:75">"File descriptor passing is disabled on this "</literal>
                             <literal type="string" pos:start="738:30" pos:end="738:39">"platform"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="739:1" pos:end="739:6">#<cpp:directive pos:start="739:2" pos:end="739:6">endif</cpp:directive></cpp:endif>
            <case pos:start="740:13" pos:end="740:36">case <expr pos:start="740:18" pos:end="740:35"><name pos:start="740:18" pos:end="740:35">QEMU_OPTION_object</name></expr>:</case>
                <expr_stmt pos:start="741:17" pos:end="742:61"><expr pos:start="741:17" pos:end="742:60"><name pos:start="741:17" pos:end="741:20">opts</name> <operator pos:start="741:22" pos:end="741:22">=</operator> <call pos:start="741:24" pos:end="742:60"><name pos:start="741:24" pos:end="741:46">qemu_opts_parse_noisily</name><argument_list pos:start="741:47" pos:end="742:60">(<argument pos:start="741:48" pos:end="741:71"><expr pos:start="741:48" pos:end="741:71"><call pos:start="741:48" pos:end="741:71"><name pos:start="741:48" pos:end="741:61">qemu_find_opts</name><argument_list pos:start="741:62" pos:end="741:71">(<argument pos:start="741:63" pos:end="741:70"><expr pos:start="741:63" pos:end="741:70"><literal type="string" pos:start="741:63" pos:end="741:70">"object"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                               <argument pos:start="742:48" pos:end="742:53"><expr pos:start="742:48" pos:end="742:53"><name pos:start="742:48" pos:end="742:53">optarg</name></expr></argument>, <argument pos:start="742:56" pos:end="742:59"><expr pos:start="742:56" pos:end="742:59"><name pos:start="742:56" pos:end="742:59">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="743:17" pos:end="1197:13"><if pos:start="743:17" pos:end="1197:13">if <condition pos:start="743:20" pos:end="743:26">(<expr pos:start="743:21" pos:end="743:25"><operator pos:start="743:21" pos:end="743:21">!</operator><name pos:start="743:22" pos:end="743:25">opts</name></expr>)</condition> <block pos:start="743:28" pos:end="1197:13">{<block_content pos:start="744:13" pos:end="1197:13">
            <case pos:start="744:13" pos:end="744:38">case <expr pos:start="744:18" pos:end="744:37"><name pos:start="744:18" pos:end="744:37">QEMU_OPTION_realtime</name></expr>:</case>
                <expr_stmt pos:start="745:17" pos:end="746:62"><expr pos:start="745:17" pos:end="746:61"><name pos:start="745:17" pos:end="745:20">opts</name> <operator pos:start="745:22" pos:end="745:22">=</operator> <call pos:start="745:24" pos:end="746:61"><name pos:start="745:24" pos:end="745:46">qemu_opts_parse_noisily</name><argument_list pos:start="745:47" pos:end="746:61">(<argument pos:start="745:48" pos:end="745:73"><expr pos:start="745:48" pos:end="745:73"><call pos:start="745:48" pos:end="745:73"><name pos:start="745:48" pos:end="745:61">qemu_find_opts</name><argument_list pos:start="745:62" pos:end="745:73">(<argument pos:start="745:63" pos:end="745:72"><expr pos:start="745:63" pos:end="745:72"><literal type="string" pos:start="745:63" pos:end="745:72">"realtime"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                               <argument pos:start="746:48" pos:end="746:53"><expr pos:start="746:48" pos:end="746:53"><name pos:start="746:48" pos:end="746:53">optarg</name></expr></argument>, <argument pos:start="746:56" pos:end="746:60"><expr pos:start="746:56" pos:end="746:60"><name pos:start="746:56" pos:end="746:60">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="747:17" pos:end="1197:13"><if pos:start="747:17" pos:end="1197:13">if <condition pos:start="747:20" pos:end="747:26">(<expr pos:start="747:21" pos:end="747:25"><operator pos:start="747:21" pos:end="747:21">!</operator><name pos:start="747:22" pos:end="747:25">opts</name></expr>)</condition> <block pos:start="747:28" pos:end="1197:13">{<block_content pos:start="748:17" pos:end="1197:13">
                <expr_stmt pos:start="748:17" pos:end="748:70"><expr pos:start="748:17" pos:end="748:69"><name pos:start="748:17" pos:end="748:28">enable_mlock</name> <operator pos:start="748:30" pos:end="748:30">=</operator> <call pos:start="748:32" pos:end="748:69"><name pos:start="748:32" pos:end="748:48">qemu_opt_get_bool</name><argument_list pos:start="748:49" pos:end="748:69">(<argument pos:start="748:50" pos:end="748:53"><expr pos:start="748:50" pos:end="748:53"><name pos:start="748:50" pos:end="748:53">opts</name></expr></argument>, <argument pos:start="748:56" pos:end="748:62"><expr pos:start="748:56" pos:end="748:62"><literal type="string" pos:start="748:56" pos:end="748:62">"mlock"</literal></expr></argument>, <argument pos:start="748:65" pos:end="748:68"><expr pos:start="748:65" pos:end="748:68"><name pos:start="748:65" pos:end="748:68">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="749:13" pos:end="749:33">case <expr pos:start="749:18" pos:end="749:32"><name pos:start="749:18" pos:end="749:32">QEMU_OPTION_msg</name></expr>:</case>
                <expr_stmt pos:start="750:17" pos:end="751:54"><expr pos:start="750:17" pos:end="751:53"><name pos:start="750:17" pos:end="750:20">opts</name> <operator pos:start="750:22" pos:end="750:22">=</operator> <call pos:start="750:24" pos:end="751:53"><name pos:start="750:24" pos:end="750:46">qemu_opts_parse_noisily</name><argument_list pos:start="750:47" pos:end="751:53">(<argument pos:start="750:48" pos:end="750:68"><expr pos:start="750:48" pos:end="750:68"><call pos:start="750:48" pos:end="750:68"><name pos:start="750:48" pos:end="750:61">qemu_find_opts</name><argument_list pos:start="750:62" pos:end="750:68">(<argument pos:start="750:63" pos:end="750:67"><expr pos:start="750:63" pos:end="750:67"><literal type="string" pos:start="750:63" pos:end="750:67">"msg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="750:71" pos:end="750:76"><expr pos:start="750:71" pos:end="750:76"><name pos:start="750:71" pos:end="750:76">optarg</name></expr></argument>,
                                               <argument pos:start="751:48" pos:end="751:52"><expr pos:start="751:48" pos:end="751:52"><name pos:start="751:48" pos:end="751:52">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="752:17" pos:end="1197:13"><if pos:start="752:17" pos:end="1197:13">if <condition pos:start="752:20" pos:end="752:26">(<expr pos:start="752:21" pos:end="752:25"><operator pos:start="752:21" pos:end="752:21">!</operator><name pos:start="752:22" pos:end="752:25">opts</name></expr>)</condition> <block pos:start="752:28" pos:end="1197:13">{<block_content pos:start="753:17" pos:end="1197:13">
                <expr_stmt pos:start="753:17" pos:end="753:36"><expr pos:start="753:17" pos:end="753:35"><call pos:start="753:17" pos:end="753:35"><name pos:start="753:17" pos:end="753:29">configure_msg</name><argument_list pos:start="753:30" pos:end="753:35">(<argument pos:start="753:31" pos:end="753:34"><expr pos:start="753:31" pos:end="753:34"><name pos:start="753:31" pos:end="753:34">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <case pos:start="754:13" pos:end="754:42">case <expr pos:start="754:18" pos:end="754:41"><name pos:start="754:18" pos:end="754:41">QEMU_OPTION_dump_vmstate</name></expr>:</case>
                <if_stmt pos:start="755:17" pos:end="1197:13"><if pos:start="755:17" pos:end="1197:13">if <condition pos:start="755:20" pos:end="755:38">(<expr pos:start="755:21" pos:end="755:37"><name pos:start="755:21" pos:end="755:37">vmstate_dump_file</name></expr>)</condition> <block pos:start="755:40" pos:end="1197:13">{<block_content pos:start="756:21" pos:end="1197:13">
                    <expr_stmt pos:start="756:21" pos:end="757:56"><expr pos:start="756:21" pos:end="757:55"><call pos:start="756:21" pos:end="757:55"><name pos:start="756:21" pos:end="756:32">error_report</name><argument_list pos:start="756:33" pos:end="757:55">(<argument pos:start="756:34" pos:end="757:54"><expr pos:start="756:34" pos:end="757:54"><literal type="string" pos:start="756:34" pos:end="756:60">"only one '-dump-vmstate' "</literal>
                                 <literal type="string" pos:start="757:34" pos:end="757:54">"option may be given"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="758:17" pos:end="758:55"><expr pos:start="758:17" pos:end="758:54"><name pos:start="758:17" pos:end="758:33">vmstate_dump_file</name> <operator pos:start="758:35" pos:end="758:35">=</operator> <call pos:start="758:37" pos:end="758:54"><name pos:start="758:37" pos:end="758:41">fopen</name><argument_list pos:start="758:42" pos:end="758:54">(<argument pos:start="758:43" pos:end="758:48"><expr pos:start="758:43" pos:end="758:48"><name pos:start="758:43" pos:end="758:48">optarg</name></expr></argument>, <argument pos:start="758:51" pos:end="758:53"><expr pos:start="758:51" pos:end="758:53"><literal type="string" pos:start="758:51" pos:end="758:53">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="759:17" pos:end="1197:13"><if pos:start="759:17" pos:end="1197:13">if <condition pos:start="759:20" pos:end="759:46">(<expr pos:start="759:21" pos:end="759:45"><name pos:start="759:21" pos:end="759:37">vmstate_dump_file</name> <operator pos:start="759:39" pos:end="759:40">==</operator> <name pos:start="759:42" pos:end="759:45">NULL</name></expr>)</condition> <block pos:start="759:48" pos:end="1197:13">{<block_content pos:start="760:21" pos:end="1197:13">
                    <expr_stmt pos:start="760:21" pos:end="760:73"><expr pos:start="760:21" pos:end="760:72"><call pos:start="760:21" pos:end="760:72"><name pos:start="760:21" pos:end="760:32">error_report</name><argument_list pos:start="760:33" pos:end="760:72">(<argument pos:start="760:34" pos:end="760:46"><expr pos:start="760:34" pos:end="760:46"><literal type="string" pos:start="760:34" pos:end="760:46">"open %s: %s"</literal></expr></argument>, <argument pos:start="760:49" pos:end="760:54"><expr pos:start="760:49" pos:end="760:54"><name pos:start="760:49" pos:end="760:54">optarg</name></expr></argument>, <argument pos:start="760:57" pos:end="760:71"><expr pos:start="760:57" pos:end="760:71"><call pos:start="760:57" pos:end="760:71"><name pos:start="760:57" pos:end="760:64">strerror</name><argument_list pos:start="760:65" pos:end="760:71">(<argument pos:start="760:66" pos:end="760:70"><expr pos:start="760:66" pos:end="760:70"><name pos:start="760:66" pos:end="760:70">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <default pos:start="761:13" pos:end="761:20">default:</default>
                <expr_stmt pos:start="762:17" pos:end="762:55"><expr pos:start="762:17" pos:end="762:54"><call pos:start="762:17" pos:end="762:54"><name pos:start="762:17" pos:end="762:33">os_parse_cmd_args</name><argument_list pos:start="762:34" pos:end="762:54">(<argument pos:start="762:35" pos:end="762:45"><expr pos:start="762:35" pos:end="762:45"><name pos:start="762:35" pos:end="762:45"><name pos:start="762:35" pos:end="762:38">popt</name><operator pos:start="762:39" pos:end="762:40">-&gt;</operator><name pos:start="762:41" pos:end="762:45">index</name></name></expr></argument>, <argument pos:start="762:48" pos:end="762:53"><expr pos:start="762:48" pos:end="762:53"><name pos:start="762:48" pos:end="762:53">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="763:5" pos:end="766:7">/*
     * Clear error location left behind by the loop.
     * Best done right after the loop.  Do not insert code here!
     */</comment>
    <expr_stmt pos:start="767:5" pos:end="767:19"><expr pos:start="767:5" pos:end="767:18"><call pos:start="767:5" pos:end="767:18"><name pos:start="767:5" pos:end="767:16">loc_set_none</name><argument_list pos:start="767:17" pos:end="767:18">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="768:5" pos:end="768:34"><expr pos:start="768:5" pos:end="768:33"><call pos:start="768:5" pos:end="768:33"><name pos:start="768:5" pos:end="768:20">replay_configure</name><argument_list pos:start="768:21" pos:end="768:33">(<argument pos:start="768:22" pos:end="768:32"><expr pos:start="768:22" pos:end="768:32"><name pos:start="768:22" pos:end="768:32">icount_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="769:5" pos:end="769:49"><expr pos:start="769:5" pos:end="769:48"><call pos:start="769:5" pos:end="769:48"><name pos:start="769:5" pos:end="769:22">qemu_tcg_configure</name><argument_list pos:start="769:23" pos:end="769:48">(<argument pos:start="769:24" pos:end="769:33"><expr pos:start="769:24" pos:end="769:33"><name pos:start="769:24" pos:end="769:33">accel_opts</name></expr></argument>, <argument pos:start="769:36" pos:end="769:47"><expr pos:start="769:36" pos:end="769:47"><operator pos:start="769:36" pos:end="769:36">&amp;</operator><name pos:start="769:37" pos:end="769:47">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="770:5" pos:end="770:37"><expr pos:start="770:5" pos:end="770:36"><name pos:start="770:5" pos:end="770:17">machine_class</name> <operator pos:start="770:19" pos:end="770:19">=</operator> <call pos:start="770:21" pos:end="770:36"><name pos:start="770:21" pos:end="770:34">select_machine</name><argument_list pos:start="770:35" pos:end="770:36">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="771:5" pos:end="771:64"><expr pos:start="771:5" pos:end="771:63"><call pos:start="771:5" pos:end="771:63"><name pos:start="771:5" pos:end="771:22">set_memory_options</name><argument_list pos:start="771:23" pos:end="771:63">(<argument pos:start="771:24" pos:end="771:33"><expr pos:start="771:24" pos:end="771:33"><operator pos:start="771:24" pos:end="771:24">&amp;</operator><name pos:start="771:25" pos:end="771:33">ram_slots</name></expr></argument>, <argument pos:start="771:36" pos:end="771:47"><expr pos:start="771:36" pos:end="771:47"><operator pos:start="771:36" pos:end="771:36">&amp;</operator><name pos:start="771:37" pos:end="771:47">maxram_size</name></expr></argument>, <argument pos:start="771:50" pos:end="771:62"><expr pos:start="771:50" pos:end="771:62"><name pos:start="771:50" pos:end="771:62">machine_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="772:5" pos:end="772:19"><expr pos:start="772:5" pos:end="772:18"><call pos:start="772:5" pos:end="772:18"><name pos:start="772:5" pos:end="772:16">os_daemonize</name><argument_list pos:start="772:17" pos:end="772:18">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="773:5" pos:end="1197:13"><if pos:start="773:5" pos:end="1197:13">if <condition pos:start="773:8" pos:end="773:55">(<expr pos:start="773:9" pos:end="773:54"><name pos:start="773:9" pos:end="773:16">pid_file</name> <operator pos:start="773:18" pos:end="773:19">&amp;&amp;</operator> <call pos:start="773:21" pos:end="773:49"><name pos:start="773:21" pos:end="773:39">qemu_create_pidfile</name><argument_list pos:start="773:40" pos:end="773:49">(<argument pos:start="773:41" pos:end="773:48"><expr pos:start="773:41" pos:end="773:48"><name pos:start="773:41" pos:end="773:48">pid_file</name></expr></argument>)</argument_list></call> <operator pos:start="773:51" pos:end="773:52">!=</operator> <literal type="number" pos:start="773:54" pos:end="773:54">0</literal></expr>)</condition> <block pos:start="773:57" pos:end="1197:13">{<block_content pos:start="774:9" pos:end="1197:13">
        <expr_stmt pos:start="774:9" pos:end="774:72"><expr pos:start="774:9" pos:end="774:71"><call pos:start="774:9" pos:end="774:71"><name pos:start="774:9" pos:end="774:20">error_report</name><argument_list pos:start="774:21" pos:end="774:71">(<argument pos:start="774:22" pos:end="774:53"><expr pos:start="774:22" pos:end="774:53"><literal type="string" pos:start="774:22" pos:end="774:53">"could not acquire pid file: %s"</literal></expr></argument>, <argument pos:start="774:56" pos:end="774:70"><expr pos:start="774:56" pos:end="774:70"><call pos:start="774:56" pos:end="774:70"><name pos:start="774:56" pos:end="774:63">strerror</name><argument_list pos:start="774:64" pos:end="774:70">(<argument pos:start="774:65" pos:end="774:69"><expr pos:start="774:65" pos:end="774:69"><name pos:start="774:65" pos:end="774:69">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="775:5" pos:end="1197:13"><if pos:start="775:5" pos:end="1197:13">if <condition pos:start="775:8" pos:end="775:44">(<expr pos:start="775:9" pos:end="775:43"><call pos:start="775:9" pos:end="775:43"><name pos:start="775:9" pos:end="775:27">qemu_init_main_loop</name><argument_list pos:start="775:28" pos:end="775:43">(<argument pos:start="775:29" pos:end="775:42"><expr pos:start="775:29" pos:end="775:42"><operator pos:start="775:29" pos:end="775:29">&amp;</operator><name pos:start="775:30" pos:end="775:42">main_loop_err</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="775:46" pos:end="1197:13">{<block_content pos:start="776:9" pos:end="1197:13">
        <expr_stmt pos:start="776:9" pos:end="776:40"><expr pos:start="776:9" pos:end="776:39"><call pos:start="776:9" pos:end="776:39"><name pos:start="776:9" pos:end="776:24">error_report_err</name><argument_list pos:start="776:25" pos:end="776:39">(<argument pos:start="776:26" pos:end="776:38"><expr pos:start="776:26" pos:end="776:38"><name pos:start="776:26" pos:end="776:38">main_loop_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="777:5" pos:end="1197:13"><if pos:start="777:5" pos:end="1197:13">if <condition pos:start="777:8" pos:end="778:53">(<expr pos:start="777:9" pos:end="778:52"><call pos:start="777:9" pos:end="778:52"><name pos:start="777:9" pos:end="777:25">qemu_opts_foreach</name><argument_list pos:start="777:26" pos:end="778:52">(<argument pos:start="777:27" pos:end="777:51"><expr pos:start="777:27" pos:end="777:51"><call pos:start="777:27" pos:end="777:51"><name pos:start="777:27" pos:end="777:40">qemu_find_opts</name><argument_list pos:start="777:41" pos:end="777:51">(<argument pos:start="777:42" pos:end="777:50"><expr pos:start="777:42" pos:end="777:50"><literal type="string" pos:start="777:42" pos:end="777:50">"sandbox"</literal></expr></argument>)</argument_list></call></expr></argument>,
                          <argument pos:start="778:27" pos:end="778:39"><expr pos:start="778:27" pos:end="778:39"><name pos:start="778:27" pos:end="778:39">parse_sandbox</name></expr></argument>, <argument pos:start="778:42" pos:end="778:45"><expr pos:start="778:42" pos:end="778:45"><name pos:start="778:42" pos:end="778:45">NULL</name></expr></argument>, <argument pos:start="778:48" pos:end="778:51"><expr pos:start="778:48" pos:end="778:51"><name pos:start="778:48" pos:end="778:51">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="778:55" pos:end="1197:13">{<block_content pos:start="779:5" pos:end="1197:13">
    <if_stmt pos:start="779:5" pos:end="1197:13"><if pos:start="779:5" pos:end="1197:13">if <condition pos:start="779:8" pos:end="780:50">(<expr pos:start="779:9" pos:end="780:49"><call pos:start="779:9" pos:end="780:49"><name pos:start="779:9" pos:end="779:25">qemu_opts_foreach</name><argument_list pos:start="779:26" pos:end="780:49">(<argument pos:start="779:27" pos:end="779:48"><expr pos:start="779:27" pos:end="779:48"><call pos:start="779:27" pos:end="779:48"><name pos:start="779:27" pos:end="779:40">qemu_find_opts</name><argument_list pos:start="779:41" pos:end="779:48">(<argument pos:start="779:42" pos:end="779:47"><expr pos:start="779:42" pos:end="779:47"><literal type="string" pos:start="779:42" pos:end="779:47">"name"</literal></expr></argument>)</argument_list></call></expr></argument>,
                          <argument pos:start="780:27" pos:end="780:36"><expr pos:start="780:27" pos:end="780:36"><name pos:start="780:27" pos:end="780:36">parse_name</name></expr></argument>, <argument pos:start="780:39" pos:end="780:42"><expr pos:start="780:39" pos:end="780:42"><name pos:start="780:39" pos:end="780:42">NULL</name></expr></argument>, <argument pos:start="780:45" pos:end="780:48"><expr pos:start="780:45" pos:end="780:48"><name pos:start="780:45" pos:end="780:48">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="780:52" pos:end="1197:13">{<block_content pos:start="782:5" pos:end="1197:13">
<cpp:ifndef pos:start="781:1" pos:end="781:14">#<cpp:directive pos:start="781:2" pos:end="781:7">ifndef</cpp:directive> <name pos:start="781:9" pos:end="781:14">_WIN32</name></cpp:ifndef>
    <if_stmt pos:start="782:5" pos:end="1197:13"><if pos:start="782:5" pos:end="1197:13">if <condition pos:start="782:8" pos:end="783:52">(<expr pos:start="782:9" pos:end="783:51"><call pos:start="782:9" pos:end="783:51"><name pos:start="782:9" pos:end="782:25">qemu_opts_foreach</name><argument_list pos:start="782:26" pos:end="783:51">(<argument pos:start="782:27" pos:end="782:50"><expr pos:start="782:27" pos:end="782:50"><call pos:start="782:27" pos:end="782:50"><name pos:start="782:27" pos:end="782:40">qemu_find_opts</name><argument_list pos:start="782:41" pos:end="782:50">(<argument pos:start="782:42" pos:end="782:49"><expr pos:start="782:42" pos:end="782:49"><literal type="string" pos:start="782:42" pos:end="782:49">"add-fd"</literal></expr></argument>)</argument_list></call></expr></argument>,
                          <argument pos:start="783:27" pos:end="783:38"><expr pos:start="783:27" pos:end="783:38"><name pos:start="783:27" pos:end="783:38">parse_add_fd</name></expr></argument>, <argument pos:start="783:41" pos:end="783:44"><expr pos:start="783:41" pos:end="783:44"><name pos:start="783:41" pos:end="783:44">NULL</name></expr></argument>, <argument pos:start="783:47" pos:end="783:50"><expr pos:start="783:47" pos:end="783:50"><name pos:start="783:47" pos:end="783:50">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="783:54" pos:end="1197:13">{<block_content pos:start="784:5" pos:end="1197:13">
    <if_stmt pos:start="784:5" pos:end="1197:13"><if pos:start="784:5" pos:end="1197:13">if <condition pos:start="784:8" pos:end="785:54">(<expr pos:start="784:9" pos:end="785:53"><call pos:start="784:9" pos:end="785:53"><name pos:start="784:9" pos:end="784:25">qemu_opts_foreach</name><argument_list pos:start="784:26" pos:end="785:53">(<argument pos:start="784:27" pos:end="784:50"><expr pos:start="784:27" pos:end="784:50"><call pos:start="784:27" pos:end="784:50"><name pos:start="784:27" pos:end="784:40">qemu_find_opts</name><argument_list pos:start="784:41" pos:end="784:50">(<argument pos:start="784:42" pos:end="784:49"><expr pos:start="784:42" pos:end="784:49"><literal type="string" pos:start="784:42" pos:end="784:49">"add-fd"</literal></expr></argument>)</argument_list></call></expr></argument>,
                          <argument pos:start="785:27" pos:end="785:40"><expr pos:start="785:27" pos:end="785:40"><name pos:start="785:27" pos:end="785:40">cleanup_add_fd</name></expr></argument>, <argument pos:start="785:43" pos:end="785:46"><expr pos:start="785:43" pos:end="785:46"><name pos:start="785:43" pos:end="785:46">NULL</name></expr></argument>, <argument pos:start="785:49" pos:end="785:52"><expr pos:start="785:49" pos:end="785:52"><name pos:start="785:49" pos:end="785:52">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="785:56" pos:end="1197:13">{<block_content pos:start="787:5" pos:end="1197:13">
<cpp:endif pos:start="786:1" pos:end="786:6">#<cpp:directive pos:start="786:2" pos:end="786:6">endif</cpp:directive></cpp:endif>
    <expr_stmt pos:start="787:5" pos:end="788:57"><expr pos:start="787:5" pos:end="788:56"><name pos:start="787:5" pos:end="787:19">current_machine</name> <operator pos:start="787:21" pos:end="787:21">=</operator> <call pos:start="787:23" pos:end="788:56"><name pos:start="787:23" pos:end="787:29">MACHINE</name><argument_list pos:start="787:30" pos:end="788:56">(<argument pos:start="787:31" pos:end="788:55"><expr pos:start="787:31" pos:end="788:55"><call pos:start="787:31" pos:end="788:55"><name pos:start="787:31" pos:end="787:40">object_new</name><argument_list pos:start="787:41" pos:end="788:55">(<argument pos:start="787:42" pos:end="788:54"><expr pos:start="787:42" pos:end="788:54"><call pos:start="787:42" pos:end="788:54"><name pos:start="787:42" pos:end="787:62">object_class_get_name</name><argument_list pos:start="787:63" pos:end="788:54">(
                          <argument pos:start="788:27" pos:end="788:53"><expr pos:start="788:27" pos:end="788:53"><call pos:start="788:27" pos:end="788:53"><name pos:start="788:27" pos:end="788:38">OBJECT_CLASS</name><argument_list pos:start="788:39" pos:end="788:53">(<argument pos:start="788:40" pos:end="788:52"><expr pos:start="788:40" pos:end="788:52"><name pos:start="788:40" pos:end="788:52">machine_class</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="789:5" pos:end="1197:13"><if pos:start="789:5" pos:end="1197:13">if <condition pos:start="789:8" pos:end="789:68">(<expr pos:start="789:9" pos:end="789:67"><call pos:start="789:9" pos:end="789:67"><name pos:start="789:9" pos:end="789:25">machine_help_func</name><argument_list pos:start="789:26" pos:end="789:67">(<argument pos:start="789:27" pos:end="789:49"><expr pos:start="789:27" pos:end="789:49"><call pos:start="789:27" pos:end="789:49"><name pos:start="789:27" pos:end="789:47">qemu_get_machine_opts</name><argument_list pos:start="789:48" pos:end="789:49">()</argument_list></call></expr></argument>, <argument pos:start="789:52" pos:end="789:66"><expr pos:start="789:52" pos:end="789:66"><name pos:start="789:52" pos:end="789:66">current_machine</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="789:70" pos:end="1197:13">{<block_content pos:start="790:9" pos:end="1197:13">
        <expr_stmt pos:start="790:9" pos:end="790:16"><expr pos:start="790:9" pos:end="790:15"><call pos:start="790:9" pos:end="790:15"><name pos:start="790:9" pos:end="790:12">exit</name><argument_list pos:start="790:13" pos:end="790:15">(<argument pos:start="790:14" pos:end="790:14"><expr pos:start="790:14" pos:end="790:14"><literal type="number" pos:start="790:14" pos:end="790:14">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="791:5" pos:end="792:69"><expr pos:start="791:5" pos:end="792:68"><call pos:start="791:5" pos:end="792:68"><name pos:start="791:5" pos:end="791:29">object_property_add_child</name><argument_list pos:start="791:30" pos:end="792:68">(<argument pos:start="791:31" pos:end="791:47"><expr pos:start="791:31" pos:end="791:47"><call pos:start="791:31" pos:end="791:47"><name pos:start="791:31" pos:end="791:45">object_get_root</name><argument_list pos:start="791:46" pos:end="791:47">()</argument_list></call></expr></argument>, <argument pos:start="791:50" pos:end="791:58"><expr pos:start="791:50" pos:end="791:58"><literal type="string" pos:start="791:50" pos:end="791:58">"machine"</literal></expr></argument>,
                              <argument pos:start="792:31" pos:end="792:53"><expr pos:start="792:31" pos:end="792:53"><call pos:start="792:31" pos:end="792:53"><name pos:start="792:31" pos:end="792:36">OBJECT</name><argument_list pos:start="792:37" pos:end="792:53">(<argument pos:start="792:38" pos:end="792:52"><expr pos:start="792:38" pos:end="792:52"><name pos:start="792:38" pos:end="792:52">current_machine</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="792:56" pos:end="792:67"><expr pos:start="792:56" pos:end="792:67"><operator pos:start="792:56" pos:end="792:56">&amp;</operator><name pos:start="792:57" pos:end="792:67">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="793:5" pos:end="1197:13"><if pos:start="793:5" pos:end="1197:13">if <condition pos:start="793:8" pos:end="793:41">(<expr pos:start="793:9" pos:end="793:40"><name pos:start="793:9" pos:end="793:40"><name pos:start="793:9" pos:end="793:21">machine_class</name><operator pos:start="793:22" pos:end="793:23">-&gt;</operator><name pos:start="793:24" pos:end="793:40">minimum_page_bits</name></name></expr>)</condition> <block pos:start="793:43" pos:end="1197:13">{<block_content pos:start="794:9" pos:end="1197:13">
        <if_stmt pos:start="794:9" pos:end="1197:13"><if pos:start="794:9" pos:end="1197:13">if <condition pos:start="794:12" pos:end="794:78">(<expr pos:start="794:13" pos:end="794:77"><operator pos:start="794:13" pos:end="794:13">!</operator><call pos:start="794:14" pos:end="794:77"><name pos:start="794:14" pos:end="794:43">set_preferred_target_page_bits</name><argument_list pos:start="794:44" pos:end="794:77">(<argument pos:start="794:45" pos:end="794:76"><expr pos:start="794:45" pos:end="794:76"><name pos:start="794:45" pos:end="794:76"><name pos:start="794:45" pos:end="794:57">machine_class</name><operator pos:start="794:58" pos:end="794:59">-&gt;</operator><name pos:start="794:60" pos:end="794:76">minimum_page_bits</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="794:80" pos:end="1197:13">{<block_content pos:start="798:13" pos:end="1197:13">
            <comment type="block" pos:start="795:13" pos:end="797:15">/* This would be a board error: specifying a minimum smaller than
             * a target's compile-time fixed setting.
             */</comment>
            <expr_stmt pos:start="798:13" pos:end="798:35"><expr pos:start="798:13" pos:end="798:34"><call pos:start="798:13" pos:end="798:34"><name pos:start="798:13" pos:end="798:32">g_assert_not_reached</name><argument_list pos:start="798:33" pos:end="798:34">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="799:5" pos:end="799:24"><expr pos:start="799:5" pos:end="799:23"><call pos:start="799:5" pos:end="799:23"><name pos:start="799:5" pos:end="799:21">cpu_exec_init_all</name><argument_list pos:start="799:22" pos:end="799:23">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="800:5" pos:end="1197:13"><if pos:start="800:5" pos:end="1197:13">if <condition pos:start="800:8" pos:end="800:34">(<expr pos:start="800:9" pos:end="800:33"><name pos:start="800:9" pos:end="800:33"><name pos:start="800:9" pos:end="800:21">machine_class</name><operator pos:start="800:22" pos:end="800:23">-&gt;</operator><name pos:start="800:24" pos:end="800:33">hw_version</name></name></expr>)</condition> <block pos:start="800:36" pos:end="1197:13">{<block_content pos:start="801:9" pos:end="1197:13">
        <expr_stmt pos:start="801:9" pos:end="801:55"><expr pos:start="801:9" pos:end="801:54"><call pos:start="801:9" pos:end="801:54"><name pos:start="801:9" pos:end="801:27">qemu_set_hw_version</name><argument_list pos:start="801:28" pos:end="801:54">(<argument pos:start="801:29" pos:end="801:53"><expr pos:start="801:29" pos:end="801:53"><name pos:start="801:29" pos:end="801:53"><name pos:start="801:29" pos:end="801:41">machine_class</name><operator pos:start="801:42" pos:end="801:43">-&gt;</operator><name pos:start="801:44" pos:end="801:53">hw_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="802:5" pos:end="1197:13"><if pos:start="802:5" pos:end="1197:13">if <condition pos:start="802:8" pos:end="802:47">(<expr pos:start="802:9" pos:end="802:46"><name pos:start="802:9" pos:end="802:17">cpu_model</name> <operator pos:start="802:19" pos:end="802:20">&amp;&amp;</operator> <call pos:start="802:22" pos:end="802:46"><name pos:start="802:22" pos:end="802:35">is_help_option</name><argument_list pos:start="802:36" pos:end="802:46">(<argument pos:start="802:37" pos:end="802:45"><expr pos:start="802:37" pos:end="802:45"><name pos:start="802:37" pos:end="802:45">cpu_model</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="802:49" pos:end="1197:13">{<block_content pos:start="803:9" pos:end="1197:13">
        <expr_stmt pos:start="803:9" pos:end="803:47"><expr pos:start="803:9" pos:end="803:46"><call pos:start="803:9" pos:end="803:46"><name pos:start="803:9" pos:end="803:17">list_cpus</name><argument_list pos:start="803:18" pos:end="803:46">(<argument pos:start="803:19" pos:end="803:24"><expr pos:start="803:19" pos:end="803:24"><name pos:start="803:19" pos:end="803:24">stdout</name></expr></argument>, <argument pos:start="803:27" pos:end="803:34"><expr pos:start="803:27" pos:end="803:34"><operator pos:start="803:27" pos:end="803:27">&amp;</operator><name pos:start="803:28" pos:end="803:34">fprintf</name></expr></argument>, <argument pos:start="803:37" pos:end="803:45"><expr pos:start="803:37" pos:end="803:45"><name pos:start="803:37" pos:end="803:45">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="804:9" pos:end="804:16"><expr pos:start="804:9" pos:end="804:15"><call pos:start="804:9" pos:end="804:15"><name pos:start="804:9" pos:end="804:12">exit</name><argument_list pos:start="804:13" pos:end="804:15">(<argument pos:start="804:14" pos:end="804:14"><expr pos:start="804:14" pos:end="804:14"><literal type="number" pos:start="804:14" pos:end="804:14">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="805:5" pos:end="1197:13"><if pos:start="805:5" pos:end="1197:13">if <condition pos:start="805:8" pos:end="805:31">(<expr pos:start="805:9" pos:end="805:30"><operator pos:start="805:9" pos:end="805:9">!</operator><call pos:start="805:10" pos:end="805:30"><name pos:start="805:10" pos:end="805:28">trace_init_backends</name><argument_list pos:start="805:29" pos:end="805:30">()</argument_list></call></expr>)</condition> <block pos:start="805:33" pos:end="1197:13">{<block_content pos:start="806:5" pos:end="1197:13">
    <expr_stmt pos:start="806:5" pos:end="806:32"><expr pos:start="806:5" pos:end="806:31"><call pos:start="806:5" pos:end="806:31"><name pos:start="806:5" pos:end="806:19">trace_init_file</name><argument_list pos:start="806:20" pos:end="806:31">(<argument pos:start="806:21" pos:end="806:30"><expr pos:start="806:21" pos:end="806:30"><name pos:start="806:21" pos:end="806:30">trace_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="807:5" pos:end="808:7">/* Open the logfile at this point and set the log mask if necessary.
     */</comment>
    <if_stmt pos:start="809:5" pos:end="1197:13"><if pos:start="809:5" pos:end="1197:13">if <condition pos:start="809:8" pos:end="809:17">(<expr pos:start="809:9" pos:end="809:16"><name pos:start="809:9" pos:end="809:16">log_file</name></expr>)</condition> <block pos:start="809:19" pos:end="1197:13">{<block_content pos:start="810:9" pos:end="1197:13">
        <expr_stmt pos:start="810:9" pos:end="810:54"><expr pos:start="810:9" pos:end="810:53"><call pos:start="810:9" pos:end="810:53"><name pos:start="810:9" pos:end="810:29">qemu_set_log_filename</name><argument_list pos:start="810:30" pos:end="810:53">(<argument pos:start="810:31" pos:end="810:38"><expr pos:start="810:31" pos:end="810:38"><name pos:start="810:31" pos:end="810:38">log_file</name></expr></argument>, <argument pos:start="810:41" pos:end="810:52"><expr pos:start="810:41" pos:end="810:52"><operator pos:start="810:41" pos:end="810:41">&amp;</operator><name pos:start="810:42" pos:end="810:52">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="811:5" pos:end="1197:13"><if pos:start="811:5" pos:end="1197:13">if <condition pos:start="811:8" pos:end="811:17">(<expr pos:start="811:9" pos:end="811:16"><name pos:start="811:9" pos:end="811:16">log_mask</name></expr>)</condition> <block pos:start="811:19" pos:end="1197:13">{<block_content pos:start="812:9" pos:end="1197:13">
        <decl_stmt pos:start="812:9" pos:end="812:17"><decl pos:start="812:9" pos:end="812:16"><type pos:start="812:9" pos:end="812:11"><name pos:start="812:9" pos:end="812:11">int</name></type> <name pos:start="812:13" pos:end="812:16">mask</name></decl>;</decl_stmt>
        <expr_stmt pos:start="813:9" pos:end="813:46"><expr pos:start="813:9" pos:end="813:45"><name pos:start="813:9" pos:end="813:12">mask</name> <operator pos:start="813:14" pos:end="813:14">=</operator> <call pos:start="813:16" pos:end="813:45"><name pos:start="813:16" pos:end="813:35">qemu_str_to_log_mask</name><argument_list pos:start="813:36" pos:end="813:45">(<argument pos:start="813:37" pos:end="813:44"><expr pos:start="813:37" pos:end="813:44"><name pos:start="813:37" pos:end="813:44">log_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="814:9" pos:end="1197:13"><if pos:start="814:9" pos:end="817:5">if <condition pos:start="814:12" pos:end="814:18">(<expr pos:start="814:13" pos:end="814:17"><operator pos:start="814:13" pos:end="814:13">!</operator><name pos:start="814:14" pos:end="814:17">mask</name></expr>)</condition> <block pos:start="814:20" pos:end="817:5">{<block_content pos:start="815:13" pos:end="816:27">
            <expr_stmt pos:start="815:13" pos:end="815:41"><expr pos:start="815:13" pos:end="815:40"><call pos:start="815:13" pos:end="815:40"><name pos:start="815:13" pos:end="815:32">qemu_print_log_usage</name><argument_list pos:start="815:33" pos:end="815:40">(<argument pos:start="815:34" pos:end="815:39"><expr pos:start="815:34" pos:end="815:39"><name pos:start="815:34" pos:end="815:39">stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="816:9" pos:end="816:27"><expr pos:start="816:9" pos:end="816:26"><call pos:start="816:9" pos:end="816:26"><name pos:start="816:9" pos:end="816:20">qemu_set_log</name><argument_list pos:start="816:21" pos:end="816:26">(<argument pos:start="816:22" pos:end="816:25"><expr pos:start="816:22" pos:end="816:25"><name pos:start="816:22" pos:end="816:25">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="817:7" pos:end="1197:13">else <block pos:start="817:12" pos:end="1197:13">{<block_content pos:start="818:9" pos:end="1197:13">
        <expr_stmt pos:start="818:9" pos:end="818:24"><expr pos:start="818:9" pos:end="818:23"><call pos:start="818:9" pos:end="818:23"><name pos:start="818:9" pos:end="818:20">qemu_set_log</name><argument_list pos:start="818:21" pos:end="818:23">(<argument pos:start="818:22" pos:end="818:22"><expr pos:start="818:22" pos:end="818:22"><literal type="number" pos:start="818:22" pos:end="818:22">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="819:5" pos:end="820:27">/* If no data_dir is specified then try to find it relative to the
       executable path.  */</comment>
    <if_stmt pos:start="821:5" pos:end="1197:13"><if pos:start="821:5" pos:end="1197:13">if <condition pos:start="821:8" pos:end="821:44">(<expr pos:start="821:9" pos:end="821:43"><name pos:start="821:9" pos:end="821:20">data_dir_idx</name> <operator pos:start="821:22" pos:end="821:22">&lt;</operator> <call pos:start="821:24" pos:end="821:43"><name pos:start="821:24" pos:end="821:33">ARRAY_SIZE</name><argument_list pos:start="821:34" pos:end="821:43">(<argument pos:start="821:35" pos:end="821:42"><expr pos:start="821:35" pos:end="821:42"><name pos:start="821:35" pos:end="821:42">data_dir</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="821:46" pos:end="1197:13">{<block_content pos:start="822:9" pos:end="1197:13">
        <expr_stmt pos:start="822:9" pos:end="822:51"><expr pos:start="822:9" pos:end="822:50"><name pos:start="822:9" pos:end="822:30"><name pos:start="822:9" pos:end="822:16">data_dir</name><index pos:start="822:17" pos:end="822:30">[<expr pos:start="822:18" pos:end="822:29"><name pos:start="822:18" pos:end="822:29">data_dir_idx</name></expr>]</index></name> <operator pos:start="822:32" pos:end="822:32">=</operator> <call pos:start="822:34" pos:end="822:50"><name pos:start="822:34" pos:end="822:48">os_find_datadir</name><argument_list pos:start="822:49" pos:end="822:50">()</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="823:9" pos:end="1197:13"><if pos:start="823:9" pos:end="1197:13">if <condition pos:start="823:12" pos:end="823:43">(<expr pos:start="823:13" pos:end="823:42"><name pos:start="823:13" pos:end="823:34"><name pos:start="823:13" pos:end="823:20">data_dir</name><index pos:start="823:21" pos:end="823:34">[<expr pos:start="823:22" pos:end="823:33"><name pos:start="823:22" pos:end="823:33">data_dir_idx</name></expr>]</index></name> <operator pos:start="823:36" pos:end="823:37">!=</operator> <name pos:start="823:39" pos:end="823:42">NULL</name></expr>)</condition> <block pos:start="823:45" pos:end="1197:13">{<block_content pos:start="824:13" pos:end="1197:13">
            <expr_stmt pos:start="824:13" pos:end="824:27"><expr pos:start="824:13" pos:end="824:26"><name pos:start="824:13" pos:end="824:24">data_dir_idx</name><operator pos:start="824:25" pos:end="824:26">++</operator></expr>;</expr_stmt>
    <comment type="block" pos:start="825:5" pos:end="825:73">/* If all else fails use the install path specified when building. */</comment>
    <if_stmt pos:start="826:5" pos:end="1197:13"><if pos:start="826:5" pos:end="1197:13">if <condition pos:start="826:8" pos:end="826:44">(<expr pos:start="826:9" pos:end="826:43"><name pos:start="826:9" pos:end="826:20">data_dir_idx</name> <operator pos:start="826:22" pos:end="826:22">&lt;</operator> <call pos:start="826:24" pos:end="826:43"><name pos:start="826:24" pos:end="826:33">ARRAY_SIZE</name><argument_list pos:start="826:34" pos:end="826:43">(<argument pos:start="826:35" pos:end="826:42"><expr pos:start="826:35" pos:end="826:42"><name pos:start="826:35" pos:end="826:42">data_dir</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="826:46" pos:end="1197:13">{<block_content pos:start="827:9" pos:end="1197:13">
        <expr_stmt pos:start="827:9" pos:end="827:55"><expr pos:start="827:9" pos:end="827:54"><name pos:start="827:9" pos:end="827:32"><name pos:start="827:9" pos:end="827:16">data_dir</name><index pos:start="827:17" pos:end="827:32">[<expr pos:start="827:18" pos:end="827:31"><name pos:start="827:18" pos:end="827:29">data_dir_idx</name><operator pos:start="827:30" pos:end="827:31">++</operator></expr>]</index></name> <operator pos:start="827:34" pos:end="827:34">=</operator> <name pos:start="827:36" pos:end="827:54">CONFIG_QEMU_DATADIR</name></expr>;</expr_stmt>
    <comment type="block" pos:start="828:5" pos:end="828:55">/* -L help lists the data directories and exits. */</comment>
    <if_stmt pos:start="829:5" pos:end="1197:13"><if pos:start="829:5" pos:end="1197:13">if <condition pos:start="829:8" pos:end="829:23">(<expr pos:start="829:9" pos:end="829:22"><name pos:start="829:9" pos:end="829:22">list_data_dirs</name></expr>)</condition> <block pos:start="829:25" pos:end="1197:13">{<block_content pos:start="830:9" pos:end="1197:13">
        <for pos:start="830:9" pos:end="1197:13">for <control pos:start="830:13" pos:end="830:42">(<init pos:start="830:14" pos:end="830:19"><expr pos:start="830:14" pos:end="830:18"><name pos:start="830:14" pos:end="830:14">i</name> <operator pos:start="830:16" pos:end="830:16">=</operator> <literal type="number" pos:start="830:18" pos:end="830:18">0</literal></expr>;</init> <condition pos:start="830:21" pos:end="830:37"><expr pos:start="830:21" pos:end="830:36"><name pos:start="830:21" pos:end="830:21">i</name> <operator pos:start="830:23" pos:end="830:23">&lt;</operator> <name pos:start="830:25" pos:end="830:36">data_dir_idx</name></expr>;</condition> <incr pos:start="830:39" pos:end="830:41"><expr pos:start="830:39" pos:end="830:41"><name pos:start="830:39" pos:end="830:39">i</name><operator pos:start="830:40" pos:end="830:41">++</operator></expr></incr>)</control> <block pos:start="830:44" pos:end="1197:13">{<block_content pos:start="831:13" pos:end="1197:13">
            <expr_stmt pos:start="831:13" pos:end="831:40"><expr pos:start="831:13" pos:end="831:39"><call pos:start="831:13" pos:end="831:39"><name pos:start="831:13" pos:end="831:18">printf</name><argument_list pos:start="831:19" pos:end="831:39">(<argument pos:start="831:20" pos:end="831:25"><expr pos:start="831:20" pos:end="831:25"><literal type="string" pos:start="831:20" pos:end="831:25">"%s\n"</literal></expr></argument>, <argument pos:start="831:28" pos:end="831:38"><expr pos:start="831:28" pos:end="831:38"><name pos:start="831:28" pos:end="831:38"><name pos:start="831:28" pos:end="831:35">data_dir</name><index pos:start="831:36" pos:end="831:38">[<expr pos:start="831:37" pos:end="831:37"><name pos:start="831:37" pos:end="831:37">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="832:9" pos:end="832:16"><expr pos:start="832:9" pos:end="832:15"><call pos:start="832:9" pos:end="832:15"><name pos:start="832:9" pos:end="832:12">exit</name><argument_list pos:start="832:13" pos:end="832:15">(<argument pos:start="832:14" pos:end="832:14"><expr pos:start="832:14" pos:end="832:14"><literal type="number" pos:start="832:14" pos:end="832:14">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="833:5" pos:end="833:64"><expr pos:start="833:5" pos:end="833:63"><call pos:start="833:5" pos:end="833:63"><name pos:start="833:5" pos:end="833:13">smp_parse</name><argument_list pos:start="833:14" pos:end="833:63">(<argument pos:start="833:15" pos:end="833:62"><expr pos:start="833:15" pos:end="833:62"><call pos:start="833:15" pos:end="833:62"><name pos:start="833:15" pos:end="833:28">qemu_opts_find</name><argument_list pos:start="833:29" pos:end="833:62">(<argument pos:start="833:30" pos:end="833:55"><expr pos:start="833:30" pos:end="833:55"><call pos:start="833:30" pos:end="833:55"><name pos:start="833:30" pos:end="833:43">qemu_find_opts</name><argument_list pos:start="833:44" pos:end="833:55">(<argument pos:start="833:45" pos:end="833:54"><expr pos:start="833:45" pos:end="833:54"><literal type="string" pos:start="833:45" pos:end="833:54">"smp-opts"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="833:58" pos:end="833:61"><expr pos:start="833:58" pos:end="833:61"><name pos:start="833:58" pos:end="833:61">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="834:5" pos:end="834:59"><expr pos:start="834:5" pos:end="834:58"><name pos:start="834:5" pos:end="834:27"><name pos:start="834:5" pos:end="834:17">machine_class</name><operator pos:start="834:18" pos:end="834:19">-&gt;</operator><name pos:start="834:20" pos:end="834:27">max_cpus</name></name> <operator pos:start="834:29" pos:end="834:29">=</operator> <ternary pos:start="834:31" pos:end="834:58"><condition pos:start="834:31" pos:end="834:55"><expr pos:start="834:31" pos:end="834:53"><name pos:start="834:31" pos:end="834:53"><name pos:start="834:31" pos:end="834:43">machine_class</name><operator pos:start="834:44" pos:end="834:45">-&gt;</operator><name pos:start="834:46" pos:end="834:53">max_cpus</name></name></expr> ?</condition><then/><else pos:start="834:56" pos:end="834:58">: <expr pos:start="834:58" pos:end="834:58"><literal type="number" pos:start="834:58" pos:end="834:58">1</literal></expr></else></ternary></expr>;</expr_stmt> <comment type="block" pos:start="834:61" pos:end="834:79">/* Default to UP */</comment>
    <if_stmt pos:start="835:5" pos:end="1197:13"><if pos:start="835:5" pos:end="1197:13">if <condition pos:start="835:8" pos:end="835:43">(<expr pos:start="835:9" pos:end="835:42"><name pos:start="835:9" pos:end="835:16">max_cpus</name> <operator pos:start="835:18" pos:end="835:18">&gt;</operator> <name pos:start="835:20" pos:end="835:42"><name pos:start="835:20" pos:end="835:32">machine_class</name><operator pos:start="835:33" pos:end="835:34">-&gt;</operator><name pos:start="835:35" pos:end="835:42">max_cpus</name></name></expr>)</condition> <block pos:start="835:45" pos:end="1197:13">{<block_content pos:start="836:9" pos:end="1197:13">
        <expr_stmt pos:start="836:9" pos:end="838:67"><expr pos:start="836:9" pos:end="838:66"><call pos:start="836:9" pos:end="838:66"><name pos:start="836:9" pos:end="836:20">error_report</name><argument_list pos:start="836:21" pos:end="838:66">(<argument pos:start="836:22" pos:end="837:53"><expr pos:start="836:22" pos:end="837:53"><literal type="string" pos:start="836:22" pos:end="836:74">"Number of SMP CPUs requested (%d) exceeds max CPUs "</literal>
                     <literal type="string" pos:start="837:22" pos:end="837:53">"supported by machine '%s' (%d)"</literal></expr></argument>, <argument pos:start="837:56" pos:end="837:63"><expr pos:start="837:56" pos:end="837:63"><name pos:start="837:56" pos:end="837:63">max_cpus</name></expr></argument>,
                     <argument pos:start="838:22" pos:end="838:40"><expr pos:start="838:22" pos:end="838:40"><name pos:start="838:22" pos:end="838:40"><name pos:start="838:22" pos:end="838:34">machine_class</name><operator pos:start="838:35" pos:end="838:36">-&gt;</operator><name pos:start="838:37" pos:end="838:40">name</name></name></expr></argument>, <argument pos:start="838:43" pos:end="838:65"><expr pos:start="838:43" pos:end="838:65"><name pos:start="838:43" pos:end="838:65"><name pos:start="838:43" pos:end="838:55">machine_class</name><operator pos:start="838:56" pos:end="838:57">-&gt;</operator><name pos:start="838:58" pos:end="838:65">max_cpus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="839:5" pos:end="842:7">/*
     * Get the default machine options from the machine if it is not already
     * specified either by the configuration file or by the command line.
     */</comment>
    <if_stmt pos:start="843:5" pos:end="1197:13"><if pos:start="843:5" pos:end="1197:13">if <condition pos:start="843:8" pos:end="843:44">(<expr pos:start="843:9" pos:end="843:43"><name pos:start="843:9" pos:end="843:43"><name pos:start="843:9" pos:end="843:21">machine_class</name><operator pos:start="843:22" pos:end="843:23">-&gt;</operator><name pos:start="843:24" pos:end="843:43">default_machine_opts</name></name></expr>)</condition> <block pos:start="843:46" pos:end="1197:13">{<block_content pos:start="844:9" pos:end="1197:13">
        <expr_stmt pos:start="844:9" pos:end="845:71"><expr pos:start="844:9" pos:end="845:70"><call pos:start="844:9" pos:end="845:70"><name pos:start="844:9" pos:end="844:30">qemu_opts_set_defaults</name><argument_list pos:start="844:31" pos:end="845:70">(<argument pos:start="844:32" pos:end="844:56"><expr pos:start="844:32" pos:end="844:56"><call pos:start="844:32" pos:end="844:56"><name pos:start="844:32" pos:end="844:45">qemu_find_opts</name><argument_list pos:start="844:46" pos:end="844:56">(<argument pos:start="844:47" pos:end="844:55"><expr pos:start="844:47" pos:end="844:55"><literal type="string" pos:start="844:47" pos:end="844:55">"machine"</literal></expr></argument>)</argument_list></call></expr></argument>,
                               <argument pos:start="845:32" pos:end="845:66"><expr pos:start="845:32" pos:end="845:66"><name pos:start="845:32" pos:end="845:66"><name pos:start="845:32" pos:end="845:44">machine_class</name><operator pos:start="845:45" pos:end="845:46">-&gt;</operator><name pos:start="845:47" pos:end="845:66">default_machine_opts</name></name></expr></argument>, <argument pos:start="845:69" pos:end="845:69"><expr pos:start="845:69" pos:end="845:69"><literal type="number" pos:start="845:69" pos:end="845:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="846:5" pos:end="847:56"><expr pos:start="846:5" pos:end="847:55"><call pos:start="846:5" pos:end="847:55"><name pos:start="846:5" pos:end="846:21">qemu_opts_foreach</name><argument_list pos:start="846:22" pos:end="847:55">(<argument pos:start="846:23" pos:end="846:46"><expr pos:start="846:23" pos:end="846:46"><call pos:start="846:23" pos:end="846:46"><name pos:start="846:23" pos:end="846:36">qemu_find_opts</name><argument_list pos:start="846:37" pos:end="846:46">(<argument pos:start="846:38" pos:end="846:45"><expr pos:start="846:38" pos:end="846:45"><literal type="string" pos:start="846:38" pos:end="846:45">"device"</literal></expr></argument>)</argument_list></call></expr></argument>,
                      <argument pos:start="847:23" pos:end="847:42"><expr pos:start="847:23" pos:end="847:42"><name pos:start="847:23" pos:end="847:42">default_driver_check</name></expr></argument>, <argument pos:start="847:45" pos:end="847:48"><expr pos:start="847:45" pos:end="847:48"><name pos:start="847:45" pos:end="847:48">NULL</name></expr></argument>, <argument pos:start="847:51" pos:end="847:54"><expr pos:start="847:51" pos:end="847:54"><name pos:start="847:51" pos:end="847:54">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="848:5" pos:end="849:56"><expr pos:start="848:5" pos:end="849:55"><call pos:start="848:5" pos:end="849:55"><name pos:start="848:5" pos:end="848:21">qemu_opts_foreach</name><argument_list pos:start="848:22" pos:end="849:55">(<argument pos:start="848:23" pos:end="848:46"><expr pos:start="848:23" pos:end="848:46"><call pos:start="848:23" pos:end="848:46"><name pos:start="848:23" pos:end="848:36">qemu_find_opts</name><argument_list pos:start="848:37" pos:end="848:46">(<argument pos:start="848:38" pos:end="848:45"><expr pos:start="848:38" pos:end="848:45"><literal type="string" pos:start="848:38" pos:end="848:45">"global"</literal></expr></argument>)</argument_list></call></expr></argument>,
                      <argument pos:start="849:23" pos:end="849:42"><expr pos:start="849:23" pos:end="849:42"><name pos:start="849:23" pos:end="849:42">default_driver_check</name></expr></argument>, <argument pos:start="849:45" pos:end="849:48"><expr pos:start="849:45" pos:end="849:48"><name pos:start="849:45" pos:end="849:48">NULL</name></expr></argument>, <argument pos:start="849:51" pos:end="849:54"><expr pos:start="849:51" pos:end="849:54"><name pos:start="849:51" pos:end="849:54">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="850:5" pos:end="1197:13"><if pos:start="850:5" pos:end="1197:13">if <condition pos:start="850:8" pos:end="850:35">(<expr pos:start="850:9" pos:end="850:34"><operator pos:start="850:9" pos:end="850:9">!</operator><name pos:start="850:10" pos:end="850:18">vga_model</name> <operator pos:start="850:20" pos:end="850:21">&amp;&amp;</operator> <operator pos:start="850:23" pos:end="850:23">!</operator><name pos:start="850:24" pos:end="850:34">default_vga</name></expr>)</condition> <block pos:start="850:37" pos:end="1197:13">{<block_content pos:start="851:9" pos:end="1197:13">
        <expr_stmt pos:start="851:9" pos:end="851:40"><expr pos:start="851:9" pos:end="851:39"><name pos:start="851:9" pos:end="851:26">vga_interface_type</name> <operator pos:start="851:28" pos:end="851:28">=</operator> <name pos:start="851:30" pos:end="851:39">VGA_DEVICE</name></expr>;</expr_stmt>
    <if_stmt pos:start="852:5" pos:end="1197:13"><if pos:start="852:5" pos:end="1197:13">if <condition pos:start="852:8" pos:end="852:50">(<expr pos:start="852:9" pos:end="852:49"><operator pos:start="852:9" pos:end="852:9">!</operator><name pos:start="852:10" pos:end="852:21">has_defaults</name> <operator pos:start="852:23" pos:end="852:24">||</operator> <name pos:start="852:26" pos:end="852:49"><name pos:start="852:26" pos:end="852:38">machine_class</name><operator pos:start="852:39" pos:end="852:40">-&gt;</operator><name pos:start="852:41" pos:end="852:49">no_serial</name></name></expr>)</condition> <block pos:start="852:52" pos:end="1197:13">{<block_content pos:start="853:9" pos:end="1197:13">
        <expr_stmt pos:start="853:9" pos:end="853:27"><expr pos:start="853:9" pos:end="853:26"><name pos:start="853:9" pos:end="853:22">default_serial</name> <operator pos:start="853:24" pos:end="853:24">=</operator> <literal type="number" pos:start="853:26" pos:end="853:26">0</literal></expr>;</expr_stmt>
    <if_stmt pos:start="854:5" pos:end="1197:13"><if pos:start="854:5" pos:end="1197:13">if <condition pos:start="854:8" pos:end="854:52">(<expr pos:start="854:9" pos:end="854:51"><operator pos:start="854:9" pos:end="854:9">!</operator><name pos:start="854:10" pos:end="854:21">has_defaults</name> <operator pos:start="854:23" pos:end="854:24">||</operator> <name pos:start="854:26" pos:end="854:51"><name pos:start="854:26" pos:end="854:38">machine_class</name><operator pos:start="854:39" pos:end="854:40">-&gt;</operator><name pos:start="854:41" pos:end="854:51">no_parallel</name></name></expr>)</condition> <block pos:start="854:54" pos:end="1197:13">{<block_content pos:start="855:9" pos:end="1197:13">
        <expr_stmt pos:start="855:9" pos:end="855:29"><expr pos:start="855:9" pos:end="855:28"><name pos:start="855:9" pos:end="855:24">default_parallel</name> <operator pos:start="855:26" pos:end="855:26">=</operator> <literal type="number" pos:start="855:28" pos:end="855:28">0</literal></expr>;</expr_stmt>
    <if_stmt pos:start="856:5" pos:end="1197:13"><if pos:start="856:5" pos:end="1197:13">if <condition pos:start="856:8" pos:end="856:53">(<expr pos:start="856:9" pos:end="856:52"><operator pos:start="856:9" pos:end="856:9">!</operator><name pos:start="856:10" pos:end="856:21">has_defaults</name> <operator pos:start="856:23" pos:end="856:24">||</operator> <operator pos:start="856:26" pos:end="856:26">!</operator><name pos:start="856:27" pos:end="856:52"><name pos:start="856:27" pos:end="856:39">machine_class</name><operator pos:start="856:40" pos:end="856:41">-&gt;</operator><name pos:start="856:42" pos:end="856:52">use_virtcon</name></name></expr>)</condition> <block pos:start="856:55" pos:end="1197:13">{<block_content pos:start="857:9" pos:end="1197:13">
        <expr_stmt pos:start="857:9" pos:end="857:28"><expr pos:start="857:9" pos:end="857:27"><name pos:start="857:9" pos:end="857:23">default_virtcon</name> <operator pos:start="857:25" pos:end="857:25">=</operator> <literal type="number" pos:start="857:27" pos:end="857:27">0</literal></expr>;</expr_stmt>
    <if_stmt pos:start="858:5" pos:end="1197:13"><if pos:start="858:5" pos:end="1197:13">if <condition pos:start="858:8" pos:end="858:50">(<expr pos:start="858:9" pos:end="858:49"><operator pos:start="858:9" pos:end="858:9">!</operator><name pos:start="858:10" pos:end="858:21">has_defaults</name> <operator pos:start="858:23" pos:end="858:24">||</operator> <operator pos:start="858:26" pos:end="858:26">!</operator><name pos:start="858:27" pos:end="858:49"><name pos:start="858:27" pos:end="858:39">machine_class</name><operator pos:start="858:40" pos:end="858:41">-&gt;</operator><name pos:start="858:42" pos:end="858:49">use_sclp</name></name></expr>)</condition> <block pos:start="858:52" pos:end="1197:13">{<block_content pos:start="859:9" pos:end="1197:13">
        <expr_stmt pos:start="859:9" pos:end="859:25"><expr pos:start="859:9" pos:end="859:24"><name pos:start="859:9" pos:end="859:20">default_sclp</name> <operator pos:start="859:22" pos:end="859:22">=</operator> <literal type="number" pos:start="859:24" pos:end="859:24">0</literal></expr>;</expr_stmt>
    <if_stmt pos:start="860:5" pos:end="1197:13"><if pos:start="860:5" pos:end="1197:13">if <condition pos:start="860:8" pos:end="860:50">(<expr pos:start="860:9" pos:end="860:49"><operator pos:start="860:9" pos:end="860:9">!</operator><name pos:start="860:10" pos:end="860:21">has_defaults</name> <operator pos:start="860:23" pos:end="860:24">||</operator> <name pos:start="860:26" pos:end="860:49"><name pos:start="860:26" pos:end="860:38">machine_class</name><operator pos:start="860:39" pos:end="860:40">-&gt;</operator><name pos:start="860:41" pos:end="860:49">no_floppy</name></name></expr>)</condition> <block pos:start="860:52" pos:end="1197:13">{<block_content pos:start="861:9" pos:end="1197:13">
        <expr_stmt pos:start="861:9" pos:end="861:27"><expr pos:start="861:9" pos:end="861:26"><name pos:start="861:9" pos:end="861:22">default_floppy</name> <operator pos:start="861:24" pos:end="861:24">=</operator> <literal type="number" pos:start="861:26" pos:end="861:26">0</literal></expr>;</expr_stmt>
    <if_stmt pos:start="862:5" pos:end="1197:13"><if pos:start="862:5" pos:end="1197:13">if <condition pos:start="862:8" pos:end="862:49">(<expr pos:start="862:9" pos:end="862:48"><operator pos:start="862:9" pos:end="862:9">!</operator><name pos:start="862:10" pos:end="862:21">has_defaults</name> <operator pos:start="862:23" pos:end="862:24">||</operator> <name pos:start="862:26" pos:end="862:48"><name pos:start="862:26" pos:end="862:38">machine_class</name><operator pos:start="862:39" pos:end="862:40">-&gt;</operator><name pos:start="862:41" pos:end="862:48">no_cdrom</name></name></expr>)</condition> <block pos:start="862:51" pos:end="1197:13">{<block_content pos:start="863:9" pos:end="1197:13">
        <expr_stmt pos:start="863:9" pos:end="863:26"><expr pos:start="863:9" pos:end="863:25"><name pos:start="863:9" pos:end="863:21">default_cdrom</name> <operator pos:start="863:23" pos:end="863:23">=</operator> <literal type="number" pos:start="863:25" pos:end="863:25">0</literal></expr>;</expr_stmt>
    <if_stmt pos:start="864:5" pos:end="1197:13"><if pos:start="864:5" pos:end="1197:13">if <condition pos:start="864:8" pos:end="864:50">(<expr pos:start="864:9" pos:end="864:49"><operator pos:start="864:9" pos:end="864:9">!</operator><name pos:start="864:10" pos:end="864:21">has_defaults</name> <operator pos:start="864:23" pos:end="864:24">||</operator> <name pos:start="864:26" pos:end="864:49"><name pos:start="864:26" pos:end="864:38">machine_class</name><operator pos:start="864:39" pos:end="864:40">-&gt;</operator><name pos:start="864:41" pos:end="864:49">no_sdcard</name></name></expr>)</condition> <block pos:start="864:52" pos:end="1197:13">{<block_content pos:start="865:9" pos:end="1197:13">
        <expr_stmt pos:start="865:9" pos:end="865:27"><expr pos:start="865:9" pos:end="865:26"><name pos:start="865:9" pos:end="865:22">default_sdcard</name> <operator pos:start="865:24" pos:end="865:24">=</operator> <literal type="number" pos:start="865:26" pos:end="865:26">0</literal></expr>;</expr_stmt>
    <if_stmt pos:start="866:5" pos:end="1197:13"><if pos:start="866:5" pos:end="1197:13">if <condition pos:start="866:8" pos:end="866:22">(<expr pos:start="866:9" pos:end="866:21"><operator pos:start="866:9" pos:end="866:9">!</operator><name pos:start="866:10" pos:end="866:21">has_defaults</name></expr>)</condition> <block pos:start="866:24" pos:end="1197:13">{<block_content pos:start="867:9" pos:end="1197:13">
        <expr_stmt pos:start="867:9" pos:end="867:28"><expr pos:start="867:9" pos:end="867:27"><name pos:start="867:9" pos:end="867:23">default_monitor</name> <operator pos:start="867:25" pos:end="867:25">=</operator> <literal type="number" pos:start="867:27" pos:end="867:27">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="868:9" pos:end="868:24"><expr pos:start="868:9" pos:end="868:23"><name pos:start="868:9" pos:end="868:19">default_net</name> <operator pos:start="868:21" pos:end="868:21">=</operator> <literal type="number" pos:start="868:23" pos:end="868:23">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="869:9" pos:end="869:24"><expr pos:start="869:9" pos:end="869:23"><name pos:start="869:9" pos:end="869:19">default_vga</name> <operator pos:start="869:21" pos:end="869:21">=</operator> <literal type="number" pos:start="869:23" pos:end="869:23">0</literal></expr>;</expr_stmt>
    <if_stmt pos:start="870:5" pos:end="1197:13"><if pos:start="870:5" pos:end="1197:13">if <condition pos:start="870:8" pos:end="870:24">(<expr pos:start="870:9" pos:end="870:23"><call pos:start="870:9" pos:end="870:23"><name pos:start="870:9" pos:end="870:21">is_daemonized</name><argument_list pos:start="870:22" pos:end="870:23">()</argument_list></call></expr>)</condition> <block pos:start="870:26" pos:end="1197:13">{<block_content pos:start="880:9" pos:end="1197:13">
        <comment type="block" pos:start="871:9" pos:end="879:11">/* According to documentation and historically, -nographic redirects
         * serial port, parallel port and monitor to stdio, which does not work
         * with -daemonize.  We can redirect these to null instead, but since
         * -nographic is legacy, let's just error out.
         * We disallow -nographic only if all other ports are not redirected
         * explicitly, to not break existing legacy setups which uses
         * -nographic _and_ redirects all ports explicitly - this is valid
         * usage, -nographic is just a no-op in this case.
         */</comment>
        <if_stmt pos:start="880:9" pos:end="1197:13"><if pos:start="880:9" pos:end="1197:13">if <condition pos:start="880:12" pos:end="882:55">(<expr pos:start="880:13" pos:end="882:54"><name pos:start="880:13" pos:end="880:21">nographic</name>
            <operator pos:start="881:13" pos:end="881:14">&amp;&amp;</operator> <operator pos:start="881:16" pos:end="881:16">(</operator><name pos:start="881:17" pos:end="881:32">default_parallel</name> <operator pos:start="881:34" pos:end="881:35">||</operator> <name pos:start="881:37" pos:end="881:50">default_serial</name>
                <operator pos:start="882:17" pos:end="882:18">||</operator> <name pos:start="882:20" pos:end="882:34">default_monitor</name> <operator pos:start="882:36" pos:end="882:37">||</operator> <name pos:start="882:39" pos:end="882:53">default_virtcon</name><operator pos:start="882:54" pos:end="882:54">)</operator></expr>)</condition> <block pos:start="882:57" pos:end="1197:13">{<block_content pos:start="883:13" pos:end="1197:13">
            <expr_stmt pos:start="883:13" pos:end="885:0"><expr pos:start="883:13" pos:end="883:69"><call pos:start="883:13" pos:end="883:69"><name pos:start="883:13" pos:end="883:24">error_report</name><argument_list pos:start="883:25" pos:end="883:69">(<argument pos:start="883:26" pos:end="883:68"><expr pos:start="883:26" pos:end="883:68"><literal type="string" pos:start="883:26" pos:end="883:68">"-nographic cannot be used with -daemonize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="884:1" pos:end="884:20">#<cpp:directive pos:start="884:2" pos:end="884:6">ifdef</cpp:directive> <name pos:start="884:8" pos:end="884:20">CONFIG_CURSES</name></cpp:ifdef>
        <if_stmt pos:start="885:9" pos:end="1197:13"><if pos:start="885:9" pos:end="1197:13">if <condition pos:start="885:12" pos:end="885:38">(<expr pos:start="885:13" pos:end="885:37"><name pos:start="885:13" pos:end="885:24">display_type</name> <operator pos:start="885:26" pos:end="885:27">==</operator> <name pos:start="885:29" pos:end="885:37">DT_CURSES</name></expr>)</condition> <block pos:start="885:40" pos:end="1197:13">{<block_content pos:start="886:13" pos:end="1197:13">
            <expr_stmt pos:start="886:13" pos:end="888:0"><expr pos:start="886:13" pos:end="886:73"><call pos:start="886:13" pos:end="886:73"><name pos:start="886:13" pos:end="886:24">error_report</name><argument_list pos:start="886:25" pos:end="886:73">(<argument pos:start="886:26" pos:end="886:72"><expr pos:start="886:26" pos:end="886:72"><literal type="string" pos:start="886:26" pos:end="886:72">"curses display cannot be used with -daemonize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="887:1" pos:end="887:6">#<cpp:directive pos:start="887:2" pos:end="887:6">endif</cpp:directive></cpp:endif>
    <if_stmt pos:start="888:5" pos:end="1197:13"><if pos:start="888:5" pos:end="1197:13">if <condition pos:start="888:8" pos:end="888:18">(<expr pos:start="888:9" pos:end="888:17"><name pos:start="888:9" pos:end="888:17">nographic</name></expr>)</condition> <block pos:start="888:20" pos:end="1197:13">{<block_content pos:start="889:9" pos:end="1197:13">
        <if_stmt pos:start="889:9" pos:end="890:52"><if pos:start="889:9" pos:end="890:52">if <condition pos:start="889:12" pos:end="889:29">(<expr pos:start="889:13" pos:end="889:28"><name pos:start="889:13" pos:end="889:28">default_parallel</name></expr>)</condition><block type="pseudo" pos:start="890:13" pos:end="890:52"><block_content pos:start="890:13" pos:end="890:52">
            <expr_stmt pos:start="890:13" pos:end="890:52"><expr pos:start="890:13" pos:end="890:51"><call pos:start="890:13" pos:end="890:51"><name pos:start="890:13" pos:end="890:29">add_device_config</name><argument_list pos:start="890:30" pos:end="890:51">(<argument pos:start="890:31" pos:end="890:42"><expr pos:start="890:31" pos:end="890:42"><name pos:start="890:31" pos:end="890:42">DEV_PARALLEL</name></expr></argument>, <argument pos:start="890:45" pos:end="890:50"><expr pos:start="890:45" pos:end="890:50"><literal type="string" pos:start="890:45" pos:end="890:50">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt pos:start="891:9" pos:end="1197:13"><if pos:start="891:9" pos:end="893:9">if <condition pos:start="891:12" pos:end="891:46">(<expr pos:start="891:13" pos:end="891:45"><name pos:start="891:13" pos:end="891:26">default_serial</name> <operator pos:start="891:28" pos:end="891:29">&amp;&amp;</operator> <name pos:start="891:31" pos:end="891:45">default_monitor</name></expr>)</condition> <block pos:start="891:48" pos:end="893:9">{<block_content pos:start="892:13" pos:end="892:55">
            <expr_stmt pos:start="892:13" pos:end="892:55"><expr pos:start="892:13" pos:end="892:54"><call pos:start="892:13" pos:end="892:54"><name pos:start="892:13" pos:end="892:29">add_device_config</name><argument_list pos:start="892:30" pos:end="892:54">(<argument pos:start="892:31" pos:end="892:40"><expr pos:start="892:31" pos:end="892:40"><name pos:start="892:31" pos:end="892:40">DEV_SERIAL</name></expr></argument>, <argument pos:start="892:43" pos:end="892:53"><expr pos:start="892:43" pos:end="892:53"><literal type="string" pos:start="892:43" pos:end="892:53">"mon:stdio"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="893:11" pos:end="895:9">else if <condition pos:start="893:19" pos:end="893:54">(<expr pos:start="893:20" pos:end="893:53"><name pos:start="893:20" pos:end="893:34">default_virtcon</name> <operator pos:start="893:36" pos:end="893:37">&amp;&amp;</operator> <name pos:start="893:39" pos:end="893:53">default_monitor</name></expr>)</condition> <block pos:start="893:56" pos:end="895:9">{<block_content pos:start="894:13" pos:end="894:56">
            <expr_stmt pos:start="894:13" pos:end="894:56"><expr pos:start="894:13" pos:end="894:55"><call pos:start="894:13" pos:end="894:55"><name pos:start="894:13" pos:end="894:29">add_device_config</name><argument_list pos:start="894:30" pos:end="894:55">(<argument pos:start="894:31" pos:end="894:41"><expr pos:start="894:31" pos:end="894:41"><name pos:start="894:31" pos:end="894:41">DEV_VIRTCON</name></expr></argument>, <argument pos:start="894:44" pos:end="894:54"><expr pos:start="894:44" pos:end="894:54"><literal type="string" pos:start="894:44" pos:end="894:54">"mon:stdio"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="895:11" pos:end="897:9">else if <condition pos:start="895:19" pos:end="895:51">(<expr pos:start="895:20" pos:end="895:50"><name pos:start="895:20" pos:end="895:31">default_sclp</name> <operator pos:start="895:33" pos:end="895:34">&amp;&amp;</operator> <name pos:start="895:36" pos:end="895:50">default_monitor</name></expr>)</condition> <block pos:start="895:53" pos:end="897:9">{<block_content pos:start="896:13" pos:end="896:53">
            <expr_stmt pos:start="896:13" pos:end="896:53"><expr pos:start="896:13" pos:end="896:52"><call pos:start="896:13" pos:end="896:52"><name pos:start="896:13" pos:end="896:29">add_device_config</name><argument_list pos:start="896:30" pos:end="896:52">(<argument pos:start="896:31" pos:end="896:38"><expr pos:start="896:31" pos:end="896:38"><name pos:start="896:31" pos:end="896:38">DEV_SCLP</name></expr></argument>, <argument pos:start="896:41" pos:end="896:51"><expr pos:start="896:41" pos:end="896:51"><literal type="string" pos:start="896:41" pos:end="896:51">"mon:stdio"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="897:11" pos:end="1197:13">else <block pos:start="897:16" pos:end="1197:13">{<block_content pos:start="898:13" pos:end="1197:13">
            <if_stmt pos:start="898:13" pos:end="899:55"><if pos:start="898:13" pos:end="899:55">if <condition pos:start="898:16" pos:end="898:31">(<expr pos:start="898:17" pos:end="898:30"><name pos:start="898:17" pos:end="898:30">default_serial</name></expr>)</condition><block type="pseudo" pos:start="899:17" pos:end="899:55"><block_content pos:start="899:17" pos:end="899:55">
                <expr_stmt pos:start="899:17" pos:end="899:55"><expr pos:start="899:17" pos:end="899:54"><call pos:start="899:17" pos:end="899:54"><name pos:start="899:17" pos:end="899:33">add_device_config</name><argument_list pos:start="899:34" pos:end="899:54">(<argument pos:start="899:35" pos:end="899:44"><expr pos:start="899:35" pos:end="899:44"><name pos:start="899:35" pos:end="899:44">DEV_SERIAL</name></expr></argument>, <argument pos:start="899:47" pos:end="899:53"><expr pos:start="899:47" pos:end="899:53"><literal type="string" pos:start="899:47" pos:end="899:53">"stdio"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt pos:start="900:13" pos:end="901:56"><if pos:start="900:13" pos:end="901:56">if <condition pos:start="900:16" pos:end="900:32">(<expr pos:start="900:17" pos:end="900:31"><name pos:start="900:17" pos:end="900:31">default_virtcon</name></expr>)</condition><block type="pseudo" pos:start="901:17" pos:end="901:56"><block_content pos:start="901:17" pos:end="901:56">
                <expr_stmt pos:start="901:17" pos:end="901:56"><expr pos:start="901:17" pos:end="901:55"><call pos:start="901:17" pos:end="901:55"><name pos:start="901:17" pos:end="901:33">add_device_config</name><argument_list pos:start="901:34" pos:end="901:55">(<argument pos:start="901:35" pos:end="901:45"><expr pos:start="901:35" pos:end="901:45"><name pos:start="901:35" pos:end="901:45">DEV_VIRTCON</name></expr></argument>, <argument pos:start="901:48" pos:end="901:54"><expr pos:start="901:48" pos:end="901:54"><literal type="string" pos:start="901:48" pos:end="901:54">"stdio"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt pos:start="902:13" pos:end="1197:13"><if pos:start="902:13" pos:end="906:5">if <condition pos:start="902:16" pos:end="902:29">(<expr pos:start="902:17" pos:end="902:28"><name pos:start="902:17" pos:end="902:28">default_sclp</name></expr>)</condition> <block pos:start="902:31" pos:end="906:5">{<block_content pos:start="903:17" pos:end="905:58">
                <expr_stmt pos:start="903:17" pos:end="903:53"><expr pos:start="903:17" pos:end="903:52"><call pos:start="903:17" pos:end="903:52"><name pos:start="903:17" pos:end="903:33">add_device_config</name><argument_list pos:start="903:34" pos:end="903:52">(<argument pos:start="903:35" pos:end="903:42"><expr pos:start="903:35" pos:end="903:42"><name pos:start="903:35" pos:end="903:42">DEV_SCLP</name></expr></argument>, <argument pos:start="903:45" pos:end="903:51"><expr pos:start="903:45" pos:end="903:51"><literal type="string" pos:start="903:45" pos:end="903:51">"stdio"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="904:13" pos:end="905:58"><if pos:start="904:13" pos:end="905:58">if <condition pos:start="904:16" pos:end="904:32">(<expr pos:start="904:17" pos:end="904:31"><name pos:start="904:17" pos:end="904:31">default_monitor</name></expr>)</condition><block type="pseudo" pos:start="905:17" pos:end="905:58"><block_content pos:start="905:17" pos:end="905:58">
                <expr_stmt pos:start="905:17" pos:end="905:58"><expr pos:start="905:17" pos:end="905:57"><call pos:start="905:17" pos:end="905:57"><name pos:start="905:17" pos:end="905:29">monitor_parse</name><argument_list pos:start="905:30" pos:end="905:57">(<argument pos:start="905:31" pos:end="905:37"><expr pos:start="905:31" pos:end="905:37"><literal type="string" pos:start="905:31" pos:end="905:37">"stdio"</literal></expr></argument>, <argument pos:start="905:40" pos:end="905:49"><expr pos:start="905:40" pos:end="905:49"><literal type="string" pos:start="905:40" pos:end="905:49">"readline"</literal></expr></argument>, <argument pos:start="905:52" pos:end="905:56"><expr pos:start="905:52" pos:end="905:56"><name pos:start="905:52" pos:end="905:56">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <else pos:start="906:7" pos:end="1197:13">else <block pos:start="906:12" pos:end="1197:13">{<block_content pos:start="907:9" pos:end="1197:13">
        <if_stmt pos:start="907:9" pos:end="908:56"><if pos:start="907:9" pos:end="908:56">if <condition pos:start="907:12" pos:end="907:27">(<expr pos:start="907:13" pos:end="907:26"><name pos:start="907:13" pos:end="907:26">default_serial</name></expr>)</condition><block type="pseudo" pos:start="908:13" pos:end="908:56"><block_content pos:start="908:13" pos:end="908:56">
            <expr_stmt pos:start="908:13" pos:end="908:56"><expr pos:start="908:13" pos:end="908:55"><call pos:start="908:13" pos:end="908:55"><name pos:start="908:13" pos:end="908:29">add_device_config</name><argument_list pos:start="908:30" pos:end="908:55">(<argument pos:start="908:31" pos:end="908:40"><expr pos:start="908:31" pos:end="908:40"><name pos:start="908:31" pos:end="908:40">DEV_SERIAL</name></expr></argument>, <argument pos:start="908:43" pos:end="908:54"><expr pos:start="908:43" pos:end="908:54"><literal type="string" pos:start="908:43" pos:end="908:54">"vc:80Cx24C"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt pos:start="909:9" pos:end="910:58"><if pos:start="909:9" pos:end="910:58">if <condition pos:start="909:12" pos:end="909:29">(<expr pos:start="909:13" pos:end="909:28"><name pos:start="909:13" pos:end="909:28">default_parallel</name></expr>)</condition><block type="pseudo" pos:start="910:13" pos:end="910:58"><block_content pos:start="910:13" pos:end="910:58">
            <expr_stmt pos:start="910:13" pos:end="910:58"><expr pos:start="910:13" pos:end="910:57"><call pos:start="910:13" pos:end="910:57"><name pos:start="910:13" pos:end="910:29">add_device_config</name><argument_list pos:start="910:30" pos:end="910:57">(<argument pos:start="910:31" pos:end="910:42"><expr pos:start="910:31" pos:end="910:42"><name pos:start="910:31" pos:end="910:42">DEV_PARALLEL</name></expr></argument>, <argument pos:start="910:45" pos:end="910:56"><expr pos:start="910:45" pos:end="910:56"><literal type="string" pos:start="910:45" pos:end="910:56">"vc:80Cx24C"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt pos:start="911:9" pos:end="912:59"><if pos:start="911:9" pos:end="912:59">if <condition pos:start="911:12" pos:end="911:28">(<expr pos:start="911:13" pos:end="911:27"><name pos:start="911:13" pos:end="911:27">default_monitor</name></expr>)</condition><block type="pseudo" pos:start="912:13" pos:end="912:59"><block_content pos:start="912:13" pos:end="912:59">
            <expr_stmt pos:start="912:13" pos:end="912:59"><expr pos:start="912:13" pos:end="912:58"><call pos:start="912:13" pos:end="912:58"><name pos:start="912:13" pos:end="912:25">monitor_parse</name><argument_list pos:start="912:26" pos:end="912:58">(<argument pos:start="912:27" pos:end="912:38"><expr pos:start="912:27" pos:end="912:38"><literal type="string" pos:start="912:27" pos:end="912:38">"vc:80Cx24C"</literal></expr></argument>, <argument pos:start="912:41" pos:end="912:50"><expr pos:start="912:41" pos:end="912:50"><literal type="string" pos:start="912:41" pos:end="912:50">"readline"</literal></expr></argument>, <argument pos:start="912:53" pos:end="912:57"><expr pos:start="912:53" pos:end="912:57"><name pos:start="912:53" pos:end="912:57">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt pos:start="913:9" pos:end="914:57"><if pos:start="913:9" pos:end="914:57">if <condition pos:start="913:12" pos:end="913:28">(<expr pos:start="913:13" pos:end="913:27"><name pos:start="913:13" pos:end="913:27">default_virtcon</name></expr>)</condition><block type="pseudo" pos:start="914:13" pos:end="914:57"><block_content pos:start="914:13" pos:end="914:57">
            <expr_stmt pos:start="914:13" pos:end="914:57"><expr pos:start="914:13" pos:end="914:56"><call pos:start="914:13" pos:end="914:56"><name pos:start="914:13" pos:end="914:29">add_device_config</name><argument_list pos:start="914:30" pos:end="914:56">(<argument pos:start="914:31" pos:end="914:41"><expr pos:start="914:31" pos:end="914:41"><name pos:start="914:31" pos:end="914:41">DEV_VIRTCON</name></expr></argument>, <argument pos:start="914:44" pos:end="914:55"><expr pos:start="914:44" pos:end="914:55"><literal type="string" pos:start="914:44" pos:end="914:55">"vc:80Cx24C"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt pos:start="915:9" pos:end="1197:13"><if pos:start="915:9" pos:end="1197:13">if <condition pos:start="915:12" pos:end="915:25">(<expr pos:start="915:13" pos:end="915:24"><name pos:start="915:13" pos:end="915:24">default_sclp</name></expr>)</condition> <block pos:start="915:27" pos:end="1197:13">{<block_content pos:start="916:13" pos:end="1197:13">
            <expr_stmt pos:start="916:13" pos:end="918:0"><expr pos:start="916:13" pos:end="916:53"><call pos:start="916:13" pos:end="916:53"><name pos:start="916:13" pos:end="916:29">add_device_config</name><argument_list pos:start="916:30" pos:end="916:53">(<argument pos:start="916:31" pos:end="916:38"><expr pos:start="916:31" pos:end="916:38"><name pos:start="916:31" pos:end="916:38">DEV_SCLP</name></expr></argument>, <argument pos:start="916:41" pos:end="916:52"><expr pos:start="916:41" pos:end="916:52"><literal type="string" pos:start="916:41" pos:end="916:52">"vc:80Cx24C"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if pos:start="917:1" pos:end="917:23">#<cpp:directive pos:start="917:2" pos:end="917:3">if</cpp:directive> <expr pos:start="917:5" pos:end="917:23"><call pos:start="917:5" pos:end="917:23"><name pos:start="917:5" pos:end="917:11">defined</name><argument_list pos:start="917:12" pos:end="917:23">(<argument pos:start="917:13" pos:end="917:22"><expr pos:start="917:13" pos:end="917:22"><name pos:start="917:13" pos:end="917:22">CONFIG_VNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt pos:start="918:5" pos:end="1197:13"><if pos:start="918:5" pos:end="1197:13">if <condition pos:start="918:8" pos:end="918:54">(<expr pos:start="918:9" pos:end="918:53"><operator pos:start="918:9" pos:end="918:9">!</operator><call pos:start="918:10" pos:end="918:53"><name pos:start="918:10" pos:end="918:21">QTAILQ_EMPTY</name><argument_list pos:start="918:22" pos:end="918:53">(<argument pos:start="918:23" pos:end="918:52"><expr pos:start="918:23" pos:end="918:52"><operator pos:start="918:23" pos:end="918:23">&amp;</operator><operator pos:start="918:24" pos:end="918:24">(</operator><call pos:start="918:25" pos:end="918:45"><name pos:start="918:25" pos:end="918:38">qemu_find_opts</name><argument_list pos:start="918:39" pos:end="918:45">(<argument pos:start="918:40" pos:end="918:44"><expr pos:start="918:40" pos:end="918:44"><literal type="string" pos:start="918:40" pos:end="918:44">"vnc"</literal></expr></argument>)</argument_list></call><operator pos:start="918:46" pos:end="918:47">-&gt;</operator><name pos:start="918:48" pos:end="918:51">head</name><operator pos:start="918:52" pos:end="918:52">)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="918:56" pos:end="1197:13">{<block_content pos:start="919:9" pos:end="1197:13">
        <expr_stmt pos:start="919:9" pos:end="921:0"><expr pos:start="919:9" pos:end="919:24"><name pos:start="919:9" pos:end="919:22">display_remote</name><operator pos:start="919:23" pos:end="919:24">++</operator></expr>;</expr_stmt>
<cpp:endif pos:start="920:1" pos:end="920:6">#<cpp:directive pos:start="920:2" pos:end="920:6">endif</cpp:directive></cpp:endif>
    <if_stmt pos:start="921:5" pos:end="1197:13"><if pos:start="921:5" pos:end="1197:13">if <condition pos:start="921:8" pos:end="921:54">(<expr pos:start="921:9" pos:end="921:53"><name pos:start="921:9" pos:end="921:20">display_type</name> <operator pos:start="921:22" pos:end="921:23">==</operator> <name pos:start="921:25" pos:end="921:34">DT_DEFAULT</name> <operator pos:start="921:36" pos:end="921:37">&amp;&amp;</operator> <operator pos:start="921:39" pos:end="921:39">!</operator><name pos:start="921:40" pos:end="921:53">display_remote</name></expr>)</condition> <block pos:start="921:56" pos:end="1197:13">{<block_content pos:start="923:9" pos:end="1197:13">
<cpp:if pos:start="922:1" pos:end="922:23">#<cpp:directive pos:start="922:2" pos:end="922:3">if</cpp:directive> <expr pos:start="922:5" pos:end="922:23"><call pos:start="922:5" pos:end="922:23"><name pos:start="922:5" pos:end="922:11">defined</name><argument_list pos:start="922:12" pos:end="922:23">(<argument pos:start="922:13" pos:end="922:22"><expr pos:start="922:13" pos:end="922:22"><name pos:start="922:13" pos:end="922:22">CONFIG_GTK</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr_stmt pos:start="923:9" pos:end="925:0"><expr pos:start="923:9" pos:end="923:29"><name pos:start="923:9" pos:end="923:20">display_type</name> <operator pos:start="923:22" pos:end="923:22">=</operator> <name pos:start="923:24" pos:end="923:29">DT_GTK</name></expr>;</expr_stmt>
<cpp:elif pos:start="924:1" pos:end="924:25">#<cpp:directive pos:start="924:2" pos:end="924:5">elif</cpp:directive> <expr pos:start="924:7" pos:end="924:25"><call pos:start="924:7" pos:end="924:25"><name pos:start="924:7" pos:end="924:13">defined</name><argument_list pos:start="924:14" pos:end="924:25">(<argument pos:start="924:15" pos:end="924:24"><expr pos:start="924:15" pos:end="924:24"><name pos:start="924:15" pos:end="924:24">CONFIG_SDL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
        <expr_stmt pos:start="925:9" pos:end="927:0"><expr pos:start="925:9" pos:end="925:29"><name pos:start="925:9" pos:end="925:20">display_type</name> <operator pos:start="925:22" pos:end="925:22">=</operator> <name pos:start="925:24" pos:end="925:29">DT_SDL</name></expr>;</expr_stmt>
<cpp:elif pos:start="926:1" pos:end="926:27">#<cpp:directive pos:start="926:2" pos:end="926:5">elif</cpp:directive> <expr pos:start="926:7" pos:end="926:27"><call pos:start="926:7" pos:end="926:27"><name pos:start="926:7" pos:end="926:13">defined</name><argument_list pos:start="926:14" pos:end="926:27">(<argument pos:start="926:15" pos:end="926:26"><expr pos:start="926:15" pos:end="926:26"><name pos:start="926:15" pos:end="926:26">CONFIG_COCOA</name></expr></argument>)</argument_list></call></expr></cpp:elif>
        <expr_stmt pos:start="927:9" pos:end="929:0"><expr pos:start="927:9" pos:end="927:31"><name pos:start="927:9" pos:end="927:20">display_type</name> <operator pos:start="927:22" pos:end="927:22">=</operator> <name pos:start="927:24" pos:end="927:31">DT_COCOA</name></expr>;</expr_stmt>
<cpp:elif pos:start="928:1" pos:end="928:25">#<cpp:directive pos:start="928:2" pos:end="928:5">elif</cpp:directive> <expr pos:start="928:7" pos:end="928:25"><call pos:start="928:7" pos:end="928:25"><name pos:start="928:7" pos:end="928:13">defined</name><argument_list pos:start="928:14" pos:end="928:25">(<argument pos:start="928:15" pos:end="928:24"><expr pos:start="928:15" pos:end="928:24"><name pos:start="928:15" pos:end="928:24">CONFIG_VNC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
        <expr_stmt pos:start="929:9" pos:end="931:0"><expr pos:start="929:9" pos:end="929:63"><call pos:start="929:9" pos:end="929:63"><name pos:start="929:9" pos:end="929:17">vnc_parse</name><argument_list pos:start="929:18" pos:end="929:63">(<argument pos:start="929:19" pos:end="929:48"><expr pos:start="929:19" pos:end="929:48"><literal type="string" pos:start="929:19" pos:end="929:48">"localhost:0,to=99,id=default"</literal></expr></argument>, <argument pos:start="929:51" pos:end="929:62"><expr pos:start="929:51" pos:end="929:62"><operator pos:start="929:51" pos:end="929:51">&amp;</operator><name pos:start="929:52" pos:end="929:62">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:start="930:1" pos:end="930:5">#<cpp:directive pos:start="930:2" pos:end="930:5">else</cpp:directive></cpp:else>
        <expr_stmt pos:start="931:9" pos:end="933:0"><expr pos:start="931:9" pos:end="931:30"><name pos:start="931:9" pos:end="931:20">display_type</name> <operator pos:start="931:22" pos:end="931:22">=</operator> <name pos:start="931:24" pos:end="931:30">DT_NONE</name></expr>;</expr_stmt>
<cpp:endif pos:start="932:1" pos:end="932:6">#<cpp:directive pos:start="932:2" pos:end="932:6">endif</cpp:directive></cpp:endif>
    <if_stmt pos:start="933:5" pos:end="1197:13"><if pos:start="933:5" pos:end="1197:13">if <condition pos:start="933:8" pos:end="933:70">(<expr pos:start="933:9" pos:end="933:69"><operator pos:start="933:9" pos:end="933:9">(</operator><name pos:start="933:10" pos:end="933:17">no_frame</name> <operator pos:start="933:19" pos:end="933:20">||</operator> <name pos:start="933:22" pos:end="933:29">alt_grab</name> <operator pos:start="933:31" pos:end="933:32">||</operator> <name pos:start="933:34" pos:end="933:42">ctrl_grab</name><operator pos:start="933:43" pos:end="933:43">)</operator> <operator pos:start="933:45" pos:end="933:46">&amp;&amp;</operator> <name pos:start="933:48" pos:end="933:59">display_type</name> <operator pos:start="933:61" pos:end="933:62">!=</operator> <name pos:start="933:64" pos:end="933:69">DT_SDL</name></expr>)</condition> <block pos:start="933:72" pos:end="1197:13">{<block_content pos:start="934:9" pos:end="1197:13">
        <expr_stmt pos:start="934:9" pos:end="935:49"><expr pos:start="934:9" pos:end="935:48"><call pos:start="934:9" pos:end="935:48"><name pos:start="934:9" pos:end="934:20">error_report</name><argument_list pos:start="934:21" pos:end="935:48">(<argument pos:start="934:22" pos:end="935:47"><expr pos:start="934:22" pos:end="935:47"><literal type="string" pos:start="934:22" pos:end="934:74">"-no-frame, -alt-grab and -ctrl-grab are only valid "</literal>
                     <literal type="string" pos:start="935:22" pos:end="935:47">"for SDL, ignoring option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="936:5" pos:end="1197:13"><if pos:start="936:5" pos:end="1197:13">if <condition pos:start="936:8" pos:end="936:70">(<expr pos:start="936:9" pos:end="936:69"><name pos:start="936:9" pos:end="936:15">no_quit</name> <operator pos:start="936:17" pos:end="936:18">&amp;&amp;</operator> <operator pos:start="936:20" pos:end="936:20">(</operator><name pos:start="936:21" pos:end="936:32">display_type</name> <operator pos:start="936:34" pos:end="936:35">!=</operator> <name pos:start="936:37" pos:end="936:42">DT_GTK</name> <operator pos:start="936:44" pos:end="936:45">&amp;&amp;</operator> <name pos:start="936:47" pos:end="936:58">display_type</name> <operator pos:start="936:60" pos:end="936:61">!=</operator> <name pos:start="936:63" pos:end="936:68">DT_SDL</name><operator pos:start="936:69" pos:end="936:69">)</operator></expr>)</condition> <block pos:start="936:72" pos:end="1197:13">{<block_content pos:start="937:9" pos:end="1197:13">
        <expr_stmt pos:start="937:9" pos:end="938:40"><expr pos:start="937:9" pos:end="938:39"><call pos:start="937:9" pos:end="938:39"><name pos:start="937:9" pos:end="937:20">error_report</name><argument_list pos:start="937:21" pos:end="938:39">(<argument pos:start="937:22" pos:end="938:38"><expr pos:start="937:22" pos:end="938:38"><literal type="string" pos:start="937:22" pos:end="937:63">"-no-quit is only valid for GTK and SDL, "</literal>
                     <literal type="string" pos:start="938:22" pos:end="938:38">"ignoring option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="939:5" pos:end="1197:13"><if pos:start="939:5" pos:end="1197:13">if <condition pos:start="939:8" pos:end="939:31">(<expr pos:start="939:9" pos:end="939:30"><name pos:start="939:9" pos:end="939:20">display_type</name> <operator pos:start="939:22" pos:end="939:23">==</operator> <name pos:start="939:25" pos:end="939:30">DT_GTK</name></expr>)</condition> <block pos:start="939:33" pos:end="1197:13">{<block_content pos:start="940:9" pos:end="1197:13">
        <expr_stmt pos:start="940:9" pos:end="940:47"><expr pos:start="940:9" pos:end="940:46"><call pos:start="940:9" pos:end="940:46"><name pos:start="940:9" pos:end="940:30">early_gtk_display_init</name><argument_list pos:start="940:31" pos:end="940:46">(<argument pos:start="940:32" pos:end="940:45"><expr pos:start="940:32" pos:end="940:45"><name pos:start="940:32" pos:end="940:45">request_opengl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="941:5" pos:end="1197:13"><if pos:start="941:5" pos:end="1197:13">if <condition pos:start="941:8" pos:end="941:31">(<expr pos:start="941:9" pos:end="941:30"><name pos:start="941:9" pos:end="941:20">display_type</name> <operator pos:start="941:22" pos:end="941:23">==</operator> <name pos:start="941:25" pos:end="941:30">DT_SDL</name></expr>)</condition> <block pos:start="941:33" pos:end="1197:13">{<block_content pos:start="942:9" pos:end="1197:13">
        <expr_stmt pos:start="942:9" pos:end="942:47"><expr pos:start="942:9" pos:end="942:46"><call pos:start="942:9" pos:end="942:46"><name pos:start="942:9" pos:end="942:30">sdl_display_early_init</name><argument_list pos:start="942:31" pos:end="942:46">(<argument pos:start="942:32" pos:end="942:45"><expr pos:start="942:32" pos:end="942:45"><name pos:start="942:32" pos:end="942:45">request_opengl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="943:5" pos:end="943:30"><expr pos:start="943:5" pos:end="943:29"><call pos:start="943:5" pos:end="943:29"><name pos:start="943:5" pos:end="943:27">qemu_console_early_init</name><argument_list pos:start="943:28" pos:end="943:29">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="944:5" pos:end="1197:13"><if pos:start="944:5" pos:end="1197:13">if <condition pos:start="944:8" pos:end="944:51">(<expr pos:start="944:9" pos:end="944:50"><name pos:start="944:9" pos:end="944:22">request_opengl</name> <operator pos:start="944:24" pos:end="944:25">==</operator> <literal type="number" pos:start="944:27" pos:end="944:27">1</literal> <operator pos:start="944:29" pos:end="944:30">&amp;&amp;</operator> <name pos:start="944:32" pos:end="944:45">display_opengl</name> <operator pos:start="944:47" pos:end="944:48">==</operator> <literal type="number" pos:start="944:50" pos:end="944:50">0</literal></expr>)</condition> <block pos:start="944:53" pos:end="1197:13">{<block_content pos:start="946:9" pos:end="1197:13">
<cpp:if pos:start="945:1" pos:end="945:26">#<cpp:directive pos:start="945:2" pos:end="945:3">if</cpp:directive> <expr pos:start="945:5" pos:end="945:26"><call pos:start="945:5" pos:end="945:26"><name pos:start="945:5" pos:end="945:11">defined</name><argument_list pos:start="945:12" pos:end="945:26">(<argument pos:start="945:13" pos:end="945:25"><expr pos:start="945:13" pos:end="945:25"><name pos:start="945:13" pos:end="945:25">CONFIG_OPENGL</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr_stmt pos:start="946:9" pos:end="948:0"><expr pos:start="946:9" pos:end="946:62"><call pos:start="946:9" pos:end="946:62"><name pos:start="946:9" pos:end="946:20">error_report</name><argument_list pos:start="946:21" pos:end="946:62">(<argument pos:start="946:22" pos:end="946:61"><expr pos:start="946:22" pos:end="946:61"><literal type="string" pos:start="946:22" pos:end="946:61">"OpenGL is not supported by the display"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:start="947:1" pos:end="947:5">#<cpp:directive pos:start="947:2" pos:end="947:5">else</cpp:directive></cpp:else>
        <expr_stmt pos:start="948:9" pos:end="950:0"><expr pos:start="948:9" pos:end="948:50"><call pos:start="948:9" pos:end="948:50"><name pos:start="948:9" pos:end="948:20">error_report</name><argument_list pos:start="948:21" pos:end="948:50">(<argument pos:start="948:22" pos:end="948:49"><expr pos:start="948:22" pos:end="948:49"><literal type="string" pos:start="948:22" pos:end="948:49">"OpenGL support is disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="949:1" pos:end="949:6">#<cpp:directive pos:start="949:2" pos:end="949:6">endif</cpp:directive></cpp:endif>
    <expr_stmt pos:start="950:5" pos:end="950:21"><expr pos:start="950:5" pos:end="950:20"><call pos:start="950:5" pos:end="950:20"><name pos:start="950:5" pos:end="950:18">page_size_init</name><argument_list pos:start="950:19" pos:end="950:20">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="951:5" pos:end="951:18"><expr pos:start="951:5" pos:end="951:17"><call pos:start="951:5" pos:end="951:17"><name pos:start="951:5" pos:end="951:15">socket_init</name><argument_list pos:start="951:16" pos:end="951:17">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="952:5" pos:end="1197:13"><if pos:start="952:5" pos:end="1197:13">if <condition pos:start="952:8" pos:end="954:55">(<expr pos:start="952:9" pos:end="954:54"><call pos:start="952:9" pos:end="954:54"><name pos:start="952:9" pos:end="952:25">qemu_opts_foreach</name><argument_list pos:start="952:26" pos:end="954:54">(<argument pos:start="952:27" pos:end="952:50"><expr pos:start="952:27" pos:end="952:50"><call pos:start="952:27" pos:end="952:50"><name pos:start="952:27" pos:end="952:40">qemu_find_opts</name><argument_list pos:start="952:41" pos:end="952:50">(<argument pos:start="952:42" pos:end="952:49"><expr pos:start="952:42" pos:end="952:49"><literal type="string" pos:start="952:42" pos:end="952:49">"object"</literal></expr></argument>)</argument_list></call></expr></argument>,
                          <argument pos:start="953:27" pos:end="953:57"><expr pos:start="953:27" pos:end="953:57"><name pos:start="953:27" pos:end="953:57">user_creatable_add_opts_foreach</name></expr></argument>,
                          <argument pos:start="954:27" pos:end="954:47"><expr pos:start="954:27" pos:end="954:47"><name pos:start="954:27" pos:end="954:47">object_create_initial</name></expr></argument>, <argument pos:start="954:50" pos:end="954:53"><expr pos:start="954:50" pos:end="954:53"><name pos:start="954:50" pos:end="954:53">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="954:57" pos:end="1197:13">{<block_content pos:start="955:5" pos:end="1197:13">
    <if_stmt pos:start="955:5" pos:end="1197:13"><if pos:start="955:5" pos:end="1197:13">if <condition pos:start="955:8" pos:end="956:57">(<expr pos:start="955:9" pos:end="956:56"><call pos:start="955:9" pos:end="956:56"><name pos:start="955:9" pos:end="955:25">qemu_opts_foreach</name><argument_list pos:start="955:26" pos:end="956:56">(<argument pos:start="955:27" pos:end="955:51"><expr pos:start="955:27" pos:end="955:51"><call pos:start="955:27" pos:end="955:51"><name pos:start="955:27" pos:end="955:40">qemu_find_opts</name><argument_list pos:start="955:41" pos:end="955:51">(<argument pos:start="955:42" pos:end="955:50"><expr pos:start="955:42" pos:end="955:50"><literal type="string" pos:start="955:42" pos:end="955:50">"chardev"</literal></expr></argument>)</argument_list></call></expr></argument>,
                          <argument pos:start="956:27" pos:end="956:43"><expr pos:start="956:27" pos:end="956:43"><name pos:start="956:27" pos:end="956:43">chardev_init_func</name></expr></argument>, <argument pos:start="956:46" pos:end="956:49"><expr pos:start="956:46" pos:end="956:49"><name pos:start="956:46" pos:end="956:49">NULL</name></expr></argument>, <argument pos:start="956:52" pos:end="956:55"><expr pos:start="956:52" pos:end="956:55"><name pos:start="956:52" pos:end="956:55">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="956:59" pos:end="1197:13">{<block_content pos:start="958:5" pos:end="1197:13">
<cpp:ifdef pos:start="957:1" pos:end="957:20">#<cpp:directive pos:start="957:2" pos:end="957:6">ifdef</cpp:directive> <name pos:start="957:8" pos:end="957:20">CONFIG_VIRTFS</name></cpp:ifdef>
    <if_stmt pos:start="958:5" pos:end="1197:13"><if pos:start="958:5" pos:end="1197:13">if <condition pos:start="958:8" pos:end="959:55">(<expr pos:start="958:9" pos:end="959:54"><call pos:start="958:9" pos:end="959:54"><name pos:start="958:9" pos:end="958:25">qemu_opts_foreach</name><argument_list pos:start="958:26" pos:end="959:54">(<argument pos:start="958:27" pos:end="958:49"><expr pos:start="958:27" pos:end="958:49"><call pos:start="958:27" pos:end="958:49"><name pos:start="958:27" pos:end="958:40">qemu_find_opts</name><argument_list pos:start="958:41" pos:end="958:49">(<argument pos:start="958:42" pos:end="958:48"><expr pos:start="958:42" pos:end="958:48"><literal type="string" pos:start="958:42" pos:end="958:48">"fsdev"</literal></expr></argument>)</argument_list></call></expr></argument>,
                          <argument pos:start="959:27" pos:end="959:41"><expr pos:start="959:27" pos:end="959:41"><name pos:start="959:27" pos:end="959:41">fsdev_init_func</name></expr></argument>, <argument pos:start="959:44" pos:end="959:47"><expr pos:start="959:44" pos:end="959:47"><name pos:start="959:44" pos:end="959:47">NULL</name></expr></argument>, <argument pos:start="959:50" pos:end="959:53"><expr pos:start="959:50" pos:end="959:53"><name pos:start="959:50" pos:end="959:53">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="959:57" pos:end="1197:13">{<block_content pos:start="961:5" pos:end="1197:13">
<cpp:endif pos:start="960:1" pos:end="960:6">#<cpp:directive pos:start="960:2" pos:end="960:6">endif</cpp:directive></cpp:endif>
    <if_stmt pos:start="961:5" pos:end="1197:13"><if pos:start="961:5" pos:end="1197:13">if <condition pos:start="961:8" pos:end="962:56">(<expr pos:start="961:9" pos:end="962:55"><call pos:start="961:9" pos:end="962:55"><name pos:start="961:9" pos:end="961:25">qemu_opts_foreach</name><argument_list pos:start="961:26" pos:end="962:55">(<argument pos:start="961:27" pos:end="961:50"><expr pos:start="961:27" pos:end="961:50"><call pos:start="961:27" pos:end="961:50"><name pos:start="961:27" pos:end="961:40">qemu_find_opts</name><argument_list pos:start="961:41" pos:end="961:50">(<argument pos:start="961:42" pos:end="961:49"><expr pos:start="961:42" pos:end="961:49"><literal type="string" pos:start="961:42" pos:end="961:49">"device"</literal></expr></argument>)</argument_list></call></expr></argument>,
                          <argument pos:start="962:27" pos:end="962:42"><expr pos:start="962:27" pos:end="962:42"><name pos:start="962:27" pos:end="962:42">device_help_func</name></expr></argument>, <argument pos:start="962:45" pos:end="962:48"><expr pos:start="962:45" pos:end="962:48"><name pos:start="962:45" pos:end="962:48">NULL</name></expr></argument>, <argument pos:start="962:51" pos:end="962:54"><expr pos:start="962:51" pos:end="962:54"><name pos:start="962:51" pos:end="962:54">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="962:58" pos:end="1197:13">{<block_content pos:start="963:9" pos:end="1197:13">
        <expr_stmt pos:start="963:9" pos:end="963:16"><expr pos:start="963:9" pos:end="963:15"><call pos:start="963:9" pos:end="963:15"><name pos:start="963:9" pos:end="963:12">exit</name><argument_list pos:start="963:13" pos:end="963:15">(<argument pos:start="963:14" pos:end="963:14"><expr pos:start="963:14" pos:end="963:14"><literal type="number" pos:start="963:14" pos:end="963:14">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="964:5" pos:end="964:43"><expr pos:start="964:5" pos:end="964:42"><name pos:start="964:5" pos:end="964:16">machine_opts</name> <operator pos:start="964:18" pos:end="964:18">=</operator> <call pos:start="964:20" pos:end="964:42"><name pos:start="964:20" pos:end="964:40">qemu_get_machine_opts</name><argument_list pos:start="964:41" pos:end="964:42">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="965:5" pos:end="1197:13"><if pos:start="965:5" pos:end="1197:13">if <condition pos:start="965:8" pos:end="966:31">(<expr pos:start="965:9" pos:end="966:30"><call pos:start="965:9" pos:end="966:30"><name pos:start="965:9" pos:end="965:24">qemu_opt_foreach</name><argument_list pos:start="965:25" pos:end="966:30">(<argument pos:start="965:26" pos:end="965:37"><expr pos:start="965:26" pos:end="965:37"><name pos:start="965:26" pos:end="965:37">machine_opts</name></expr></argument>, <argument pos:start="965:40" pos:end="965:59"><expr pos:start="965:40" pos:end="965:59"><name pos:start="965:40" pos:end="965:59">machine_set_property</name></expr></argument>, <argument pos:start="965:62" pos:end="965:76"><expr pos:start="965:62" pos:end="965:76"><name pos:start="965:62" pos:end="965:76">current_machine</name></expr></argument>,
                         <argument pos:start="966:26" pos:end="966:29"><expr pos:start="966:26" pos:end="966:29"><name pos:start="966:26" pos:end="966:29">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="966:33" pos:end="1197:13">{<block_content pos:start="967:9" pos:end="1197:13">
        <expr_stmt pos:start="967:9" pos:end="967:46"><expr pos:start="967:9" pos:end="967:45"><call pos:start="967:9" pos:end="967:45"><name pos:start="967:9" pos:end="967:20">object_unref</name><argument_list pos:start="967:21" pos:end="967:45">(<argument pos:start="967:22" pos:end="967:44"><expr pos:start="967:22" pos:end="967:44"><call pos:start="967:22" pos:end="967:44"><name pos:start="967:22" pos:end="967:27">OBJECT</name><argument_list pos:start="967:28" pos:end="967:44">(<argument pos:start="967:29" pos:end="967:43"><expr pos:start="967:29" pos:end="967:43"><name pos:start="967:29" pos:end="967:43">current_machine</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="968:5" pos:end="968:43"><expr pos:start="968:5" pos:end="968:42"><call pos:start="968:5" pos:end="968:42"><name pos:start="968:5" pos:end="968:25">configure_accelerator</name><argument_list pos:start="968:26" pos:end="968:42">(<argument pos:start="968:27" pos:end="968:41"><expr pos:start="968:27" pos:end="968:41"><name pos:start="968:27" pos:end="968:41">current_machine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="969:5" pos:end="1197:13"><if pos:start="969:5" pos:end="1197:13">if <condition pos:start="969:8" pos:end="969:21">(<expr pos:start="969:9" pos:end="969:20"><name pos:start="969:9" pos:end="969:20">qtest_chrdev</name></expr>)</condition> <block pos:start="969:23" pos:end="1197:13">{<block_content pos:start="970:9" pos:end="1197:13">
        <expr_stmt pos:start="970:9" pos:end="970:58"><expr pos:start="970:9" pos:end="970:57"><call pos:start="970:9" pos:end="970:57"><name pos:start="970:9" pos:end="970:18">qtest_init</name><argument_list pos:start="970:19" pos:end="970:57">(<argument pos:start="970:20" pos:end="970:31"><expr pos:start="970:20" pos:end="970:31"><name pos:start="970:20" pos:end="970:31">qtest_chrdev</name></expr></argument>, <argument pos:start="970:34" pos:end="970:42"><expr pos:start="970:34" pos:end="970:42"><name pos:start="970:34" pos:end="970:42">qtest_log</name></expr></argument>, <argument pos:start="970:45" pos:end="970:56"><expr pos:start="970:45" pos:end="970:56"><operator pos:start="970:45" pos:end="970:45">&amp;</operator><name pos:start="970:46" pos:end="970:56">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="971:5" pos:end="971:43"><expr pos:start="971:5" pos:end="971:42"><name pos:start="971:5" pos:end="971:16">machine_opts</name> <operator pos:start="971:18" pos:end="971:18">=</operator> <call pos:start="971:20" pos:end="971:42"><name pos:start="971:20" pos:end="971:40">qemu_get_machine_opts</name><argument_list pos:start="971:41" pos:end="971:42">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="972:5" pos:end="972:59"><expr pos:start="972:5" pos:end="972:58"><name pos:start="972:5" pos:end="972:19">kernel_filename</name> <operator pos:start="972:21" pos:end="972:21">=</operator> <call pos:start="972:23" pos:end="972:58"><name pos:start="972:23" pos:end="972:34">qemu_opt_get</name><argument_list pos:start="972:35" pos:end="972:58">(<argument pos:start="972:36" pos:end="972:47"><expr pos:start="972:36" pos:end="972:47"><name pos:start="972:36" pos:end="972:47">machine_opts</name></expr></argument>, <argument pos:start="972:50" pos:end="972:57"><expr pos:start="972:50" pos:end="972:57"><literal type="string" pos:start="972:50" pos:end="972:57">"kernel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="973:5" pos:end="973:59"><expr pos:start="973:5" pos:end="973:58"><name pos:start="973:5" pos:end="973:19">initrd_filename</name> <operator pos:start="973:21" pos:end="973:21">=</operator> <call pos:start="973:23" pos:end="973:58"><name pos:start="973:23" pos:end="973:34">qemu_opt_get</name><argument_list pos:start="973:35" pos:end="973:58">(<argument pos:start="973:36" pos:end="973:47"><expr pos:start="973:36" pos:end="973:47"><name pos:start="973:36" pos:end="973:47">machine_opts</name></expr></argument>, <argument pos:start="973:50" pos:end="973:57"><expr pos:start="973:50" pos:end="973:57"><literal type="string" pos:start="973:50" pos:end="973:57">"initrd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="974:5" pos:end="974:58"><expr pos:start="974:5" pos:end="974:57"><name pos:start="974:5" pos:end="974:18">kernel_cmdline</name> <operator pos:start="974:20" pos:end="974:20">=</operator> <call pos:start="974:22" pos:end="974:57"><name pos:start="974:22" pos:end="974:33">qemu_opt_get</name><argument_list pos:start="974:34" pos:end="974:57">(<argument pos:start="974:35" pos:end="974:46"><expr pos:start="974:35" pos:end="974:46"><name pos:start="974:35" pos:end="974:46">machine_opts</name></expr></argument>, <argument pos:start="974:49" pos:end="974:56"><expr pos:start="974:49" pos:end="974:56"><literal type="string" pos:start="974:49" pos:end="974:56">"append"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="975:5" pos:end="975:55"><expr pos:start="975:5" pos:end="975:54"><name pos:start="975:5" pos:end="975:13">bios_name</name> <operator pos:start="975:15" pos:end="975:15">=</operator> <call pos:start="975:17" pos:end="975:54"><name pos:start="975:17" pos:end="975:28">qemu_opt_get</name><argument_list pos:start="975:29" pos:end="975:54">(<argument pos:start="975:30" pos:end="975:41"><expr pos:start="975:30" pos:end="975:41"><name pos:start="975:30" pos:end="975:41">machine_opts</name></expr></argument>, <argument pos:start="975:44" pos:end="975:53"><expr pos:start="975:44" pos:end="975:53"><literal type="string" pos:start="975:44" pos:end="975:53">"firmware"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="976:5" pos:end="976:61"><expr pos:start="976:5" pos:end="976:60"><name pos:start="976:5" pos:end="976:8">opts</name> <operator pos:start="976:10" pos:end="976:10">=</operator> <call pos:start="976:12" pos:end="976:60"><name pos:start="976:12" pos:end="976:25">qemu_opts_find</name><argument_list pos:start="976:26" pos:end="976:60">(<argument pos:start="976:27" pos:end="976:53"><expr pos:start="976:27" pos:end="976:53"><call pos:start="976:27" pos:end="976:53"><name pos:start="976:27" pos:end="976:40">qemu_find_opts</name><argument_list pos:start="976:41" pos:end="976:53">(<argument pos:start="976:42" pos:end="976:52"><expr pos:start="976:42" pos:end="976:52"><literal type="string" pos:start="976:42" pos:end="976:52">"boot-opts"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="976:56" pos:end="976:59"><expr pos:start="976:56" pos:end="976:59"><name pos:start="976:56" pos:end="976:59">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="977:5" pos:end="1197:13"><if pos:start="977:5" pos:end="1197:13">if <condition pos:start="977:8" pos:end="977:13">(<expr pos:start="977:9" pos:end="977:12"><name pos:start="977:9" pos:end="977:12">opts</name></expr>)</condition> <block pos:start="977:15" pos:end="1197:13">{<block_content pos:start="978:9" pos:end="1197:13">
        <expr_stmt pos:start="978:9" pos:end="978:49"><expr pos:start="978:9" pos:end="978:48"><name pos:start="978:9" pos:end="978:18">boot_order</name> <operator pos:start="978:20" pos:end="978:20">=</operator> <call pos:start="978:22" pos:end="978:48"><name pos:start="978:22" pos:end="978:33">qemu_opt_get</name><argument_list pos:start="978:34" pos:end="978:48">(<argument pos:start="978:35" pos:end="978:38"><expr pos:start="978:35" pos:end="978:38"><name pos:start="978:35" pos:end="978:38">opts</name></expr></argument>, <argument pos:start="978:41" pos:end="978:47"><expr pos:start="978:41" pos:end="978:47"><literal type="string" pos:start="978:41" pos:end="978:47">"order"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="979:9" pos:end="1197:13"><if pos:start="979:9" pos:end="1197:13">if <condition pos:start="979:12" pos:end="979:23">(<expr pos:start="979:13" pos:end="979:22"><name pos:start="979:13" pos:end="979:22">boot_order</name></expr>)</condition> <block pos:start="979:25" pos:end="1197:13">{<block_content pos:start="980:13" pos:end="1197:13">
            <expr_stmt pos:start="980:13" pos:end="980:59"><expr pos:start="980:13" pos:end="980:58"><call pos:start="980:13" pos:end="980:58"><name pos:start="980:13" pos:end="980:32">validate_bootdevices</name><argument_list pos:start="980:33" pos:end="980:58">(<argument pos:start="980:34" pos:end="980:43"><expr pos:start="980:34" pos:end="980:43"><name pos:start="980:34" pos:end="980:43">boot_order</name></expr></argument>, <argument pos:start="980:46" pos:end="980:57"><expr pos:start="980:46" pos:end="980:57"><operator pos:start="980:46" pos:end="980:46">&amp;</operator><name pos:start="980:47" pos:end="980:57">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="981:9" pos:end="981:47"><expr pos:start="981:9" pos:end="981:46"><name pos:start="981:9" pos:end="981:17">boot_once</name> <operator pos:start="981:19" pos:end="981:19">=</operator> <call pos:start="981:21" pos:end="981:46"><name pos:start="981:21" pos:end="981:32">qemu_opt_get</name><argument_list pos:start="981:33" pos:end="981:46">(<argument pos:start="981:34" pos:end="981:37"><expr pos:start="981:34" pos:end="981:37"><name pos:start="981:34" pos:end="981:37">opts</name></expr></argument>, <argument pos:start="981:40" pos:end="981:45"><expr pos:start="981:40" pos:end="981:45"><literal type="string" pos:start="981:40" pos:end="981:45">"once"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="982:9" pos:end="1197:13"><if pos:start="982:9" pos:end="1197:13">if <condition pos:start="982:12" pos:end="982:22">(<expr pos:start="982:13" pos:end="982:21"><name pos:start="982:13" pos:end="982:21">boot_once</name></expr>)</condition> <block pos:start="982:24" pos:end="1197:13">{<block_content pos:start="983:13" pos:end="1197:13">
            <expr_stmt pos:start="983:13" pos:end="983:58"><expr pos:start="983:13" pos:end="983:57"><call pos:start="983:13" pos:end="983:57"><name pos:start="983:13" pos:end="983:32">validate_bootdevices</name><argument_list pos:start="983:33" pos:end="983:57">(<argument pos:start="983:34" pos:end="983:42"><expr pos:start="983:34" pos:end="983:42"><name pos:start="983:34" pos:end="983:42">boot_once</name></expr></argument>, <argument pos:start="983:45" pos:end="983:56"><expr pos:start="983:45" pos:end="983:56"><operator pos:start="983:45" pos:end="983:45">&amp;</operator><name pos:start="983:46" pos:end="983:56">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="984:9" pos:end="984:63"><expr pos:start="984:9" pos:end="984:62"><name pos:start="984:9" pos:end="984:17">boot_menu</name> <operator pos:start="984:19" pos:end="984:19">=</operator> <call pos:start="984:21" pos:end="984:62"><name pos:start="984:21" pos:end="984:37">qemu_opt_get_bool</name><argument_list pos:start="984:38" pos:end="984:62">(<argument pos:start="984:39" pos:end="984:42"><expr pos:start="984:39" pos:end="984:42"><name pos:start="984:39" pos:end="984:42">opts</name></expr></argument>, <argument pos:start="984:45" pos:end="984:50"><expr pos:start="984:45" pos:end="984:50"><literal type="string" pos:start="984:45" pos:end="984:50">"menu"</literal></expr></argument>, <argument pos:start="984:53" pos:end="984:61"><expr pos:start="984:53" pos:end="984:61"><name pos:start="984:53" pos:end="984:61">boot_menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="985:9" pos:end="985:63"><expr pos:start="985:9" pos:end="985:62"><name pos:start="985:9" pos:end="985:19">boot_strict</name> <operator pos:start="985:21" pos:end="985:21">=</operator> <call pos:start="985:23" pos:end="985:62"><name pos:start="985:23" pos:end="985:39">qemu_opt_get_bool</name><argument_list pos:start="985:40" pos:end="985:62">(<argument pos:start="985:41" pos:end="985:44"><expr pos:start="985:41" pos:end="985:44"><name pos:start="985:41" pos:end="985:44">opts</name></expr></argument>, <argument pos:start="985:47" pos:end="985:54"><expr pos:start="985:47" pos:end="985:54"><literal type="string" pos:start="985:47" pos:end="985:54">"strict"</literal></expr></argument>, <argument pos:start="985:57" pos:end="985:61"><expr pos:start="985:57" pos:end="985:61"><name pos:start="985:57" pos:end="985:61">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="986:5" pos:end="1197:13"><if pos:start="986:5" pos:end="1197:13">if <condition pos:start="986:8" pos:end="986:20">(<expr pos:start="986:9" pos:end="986:19"><operator pos:start="986:9" pos:end="986:9">!</operator><name pos:start="986:10" pos:end="986:19">boot_order</name></expr>)</condition> <block pos:start="986:22" pos:end="1197:13">{<block_content pos:start="987:9" pos:end="1197:13">
        <expr_stmt pos:start="987:9" pos:end="987:55"><expr pos:start="987:9" pos:end="987:54"><name pos:start="987:9" pos:end="987:18">boot_order</name> <operator pos:start="987:20" pos:end="987:20">=</operator> <name pos:start="987:22" pos:end="987:54"><name pos:start="987:22" pos:end="987:34">machine_class</name><operator pos:start="987:35" pos:end="987:36">-&gt;</operator><name pos:start="987:37" pos:end="987:54">default_boot_order</name></name></expr>;</expr_stmt>
    <if_stmt pos:start="988:5" pos:end="1197:13"><if pos:start="988:5" pos:end="1197:13">if <condition pos:start="988:8" pos:end="988:24">(<expr pos:start="988:9" pos:end="988:23"><operator pos:start="988:9" pos:end="988:9">!</operator><name pos:start="988:10" pos:end="988:23">kernel_cmdline</name></expr>)</condition> <block pos:start="988:26" pos:end="1197:13">{<block_content pos:start="989:9" pos:end="1197:13">
        <expr_stmt pos:start="989:9" pos:end="989:28"><expr pos:start="989:9" pos:end="989:27"><name pos:start="989:9" pos:end="989:22">kernel_cmdline</name> <operator pos:start="989:24" pos:end="989:24">=</operator> <literal type="string" pos:start="989:26" pos:end="989:27">""</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="990:9" pos:end="990:65"><expr pos:start="990:9" pos:end="990:64"><name pos:start="990:9" pos:end="990:39"><name pos:start="990:9" pos:end="990:23">current_machine</name><operator pos:start="990:24" pos:end="990:25">-&gt;</operator><name pos:start="990:26" pos:end="990:39">kernel_cmdline</name></name> <operator pos:start="990:41" pos:end="990:41">=</operator> <operator pos:start="990:43" pos:end="990:43">(</operator><name pos:start="990:44" pos:end="990:47">char</name> <operator pos:start="990:49" pos:end="990:49">*</operator><operator pos:start="990:50" pos:end="990:50">)</operator><name pos:start="990:51" pos:end="990:64">kernel_cmdline</name></expr>;</expr_stmt>
    <expr_stmt pos:start="991:5" pos:end="991:43"><expr pos:start="991:5" pos:end="991:42"><name pos:start="991:5" pos:end="991:14">linux_boot</name> <operator pos:start="991:16" pos:end="991:16">=</operator> <operator pos:start="991:18" pos:end="991:18">(</operator><name pos:start="991:19" pos:end="991:33">kernel_filename</name> <operator pos:start="991:35" pos:end="991:36">!=</operator> <name pos:start="991:38" pos:end="991:41">NULL</name><operator pos:start="991:42" pos:end="991:42">)</operator></expr>;</expr_stmt>
    <if_stmt pos:start="992:5" pos:end="1197:13"><if pos:start="992:5" pos:end="1197:13">if <condition pos:start="992:8" pos:end="992:47">(<expr pos:start="992:9" pos:end="992:46"><operator pos:start="992:9" pos:end="992:9">!</operator><name pos:start="992:10" pos:end="992:19">linux_boot</name> <operator pos:start="992:21" pos:end="992:22">&amp;&amp;</operator> <operator pos:start="992:24" pos:end="992:24">*</operator><name pos:start="992:25" pos:end="992:38">kernel_cmdline</name> <operator pos:start="992:40" pos:end="992:41">!=</operator> <literal type="char" pos:start="992:43" pos:end="992:46">'\0'</literal></expr>)</condition> <block pos:start="992:49" pos:end="1197:13">{<block_content pos:start="993:9" pos:end="1197:13">
        <expr_stmt pos:start="993:9" pos:end="993:65"><expr pos:start="993:9" pos:end="993:64"><call pos:start="993:9" pos:end="993:64"><name pos:start="993:9" pos:end="993:20">error_report</name><argument_list pos:start="993:21" pos:end="993:64">(<argument pos:start="993:22" pos:end="993:63"><expr pos:start="993:22" pos:end="993:63"><literal type="string" pos:start="993:22" pos:end="993:63">"-append only allowed with -kernel option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="994:5" pos:end="1197:13"><if pos:start="994:5" pos:end="1197:13">if <condition pos:start="994:8" pos:end="994:47">(<expr pos:start="994:9" pos:end="994:46"><operator pos:start="994:9" pos:end="994:9">!</operator><name pos:start="994:10" pos:end="994:19">linux_boot</name> <operator pos:start="994:21" pos:end="994:22">&amp;&amp;</operator> <name pos:start="994:24" pos:end="994:38">initrd_filename</name> <operator pos:start="994:40" pos:end="994:41">!=</operator> <name pos:start="994:43" pos:end="994:46">NULL</name></expr>)</condition> <block pos:start="994:49" pos:end="1197:13">{<block_content pos:start="995:9" pos:end="1197:13">
        <expr_stmt pos:start="995:9" pos:end="995:65"><expr pos:start="995:9" pos:end="995:64"><call pos:start="995:9" pos:end="995:64"><name pos:start="995:9" pos:end="995:20">error_report</name><argument_list pos:start="995:21" pos:end="995:64">(<argument pos:start="995:22" pos:end="995:63"><expr pos:start="995:22" pos:end="995:63"><literal type="string" pos:start="995:22" pos:end="995:63">"-initrd only allowed with -kernel option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="996:5" pos:end="1197:13"><if pos:start="996:5" pos:end="1197:13">if <condition pos:start="996:8" pos:end="996:76">(<expr pos:start="996:9" pos:end="996:75"><call pos:start="996:9" pos:end="996:29"><name pos:start="996:9" pos:end="996:27">semihosting_enabled</name><argument_list pos:start="996:28" pos:end="996:29">()</argument_list></call> <operator pos:start="996:31" pos:end="996:32">&amp;&amp;</operator> <operator pos:start="996:34" pos:end="996:34">!</operator><call pos:start="996:35" pos:end="996:56"><name pos:start="996:35" pos:end="996:54">semihosting_get_argc</name><argument_list pos:start="996:55" pos:end="996:56">()</argument_list></call> <operator pos:start="996:58" pos:end="996:59">&amp;&amp;</operator> <name pos:start="996:61" pos:end="996:75">kernel_filename</name></expr>)</condition> <block pos:start="996:78" pos:end="1197:13">{<block_content pos:start="998:9" pos:end="1197:13">
        <comment type="block" pos:start="997:9" pos:end="997:46">/* fall back to the -kernel/-append */</comment>
        <expr_stmt pos:start="998:9" pos:end="998:66"><expr pos:start="998:9" pos:end="998:65"><call pos:start="998:9" pos:end="998:65"><name pos:start="998:9" pos:end="998:32">semihosting_arg_fallback</name><argument_list pos:start="998:33" pos:end="998:65">(<argument pos:start="998:34" pos:end="998:48"><expr pos:start="998:34" pos:end="998:48"><name pos:start="998:34" pos:end="998:48">kernel_filename</name></expr></argument>, <argument pos:start="998:51" pos:end="998:64"><expr pos:start="998:51" pos:end="998:64"><name pos:start="998:51" pos:end="998:64">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="999:5" pos:end="999:28"><expr pos:start="999:5" pos:end="999:27"><call pos:start="999:5" pos:end="999:27"><name pos:start="999:5" pos:end="999:25">os_set_line_buffering</name><argument_list pos:start="999:26" pos:end="999:27">()</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="1000:5" pos:end="1000:64">/* spice needs the timers to be initialized by this point */</comment>
    <expr_stmt pos:start="1001:5" pos:end="1001:22"><expr pos:start="1001:5" pos:end="1001:21"><call pos:start="1001:5" pos:end="1001:21"><name pos:start="1001:5" pos:end="1001:19">qemu_spice_init</name><argument_list pos:start="1001:20" pos:end="1001:21">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1002:5" pos:end="1002:21"><expr pos:start="1002:5" pos:end="1002:20"><call pos:start="1002:5" pos:end="1002:20"><name pos:start="1002:5" pos:end="1002:18">cpu_ticks_init</name><argument_list pos:start="1002:19" pos:end="1002:20">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1003:5" pos:end="1197:13"><if pos:start="1003:5" pos:end="1197:13">if <condition pos:start="1003:8" pos:end="1003:20">(<expr pos:start="1003:9" pos:end="1003:19"><name pos:start="1003:9" pos:end="1003:19">icount_opts</name></expr>)</condition> <block pos:start="1003:22" pos:end="1197:13">{<block_content pos:start="1004:9" pos:end="1197:13">
        <if_stmt pos:start="1004:9" pos:end="1197:13"><if pos:start="1004:9" pos:end="1006:9">if <condition pos:start="1004:12" pos:end="1004:27">(<expr pos:start="1004:13" pos:end="1004:26"><operator pos:start="1004:13" pos:end="1004:13">!</operator><call pos:start="1004:14" pos:end="1004:26"><name pos:start="1004:14" pos:end="1004:24">tcg_enabled</name><argument_list pos:start="1004:25" pos:end="1004:26">()</argument_list></call></expr>)</condition> <block pos:start="1004:29" pos:end="1006:9">{<block_content pos:start="1005:13" pos:end="1005:80">
            <expr_stmt pos:start="1005:13" pos:end="1005:80"><expr pos:start="1005:13" pos:end="1005:79"><call pos:start="1005:13" pos:end="1005:79"><name pos:start="1005:13" pos:end="1005:24">error_report</name><argument_list pos:start="1005:25" pos:end="1005:79">(<argument pos:start="1005:26" pos:end="1005:78"><expr pos:start="1005:26" pos:end="1005:78"><literal type="string" pos:start="1005:26" pos:end="1005:78">"-icount is not allowed with hardware virtualization"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="1006:11" pos:end="1197:13">else if <condition pos:start="1006:19" pos:end="1006:44">(<expr pos:start="1006:20" pos:end="1006:43"><call pos:start="1006:20" pos:end="1006:43"><name pos:start="1006:20" pos:end="1006:41">qemu_tcg_mttcg_enabled</name><argument_list pos:start="1006:42" pos:end="1006:43">()</argument_list></call></expr>)</condition> <block pos:start="1006:46" pos:end="1197:13">{<block_content pos:start="1007:13" pos:end="1197:13">
            <expr_stmt pos:start="1007:13" pos:end="1007:71"><expr pos:start="1007:13" pos:end="1007:70"><call pos:start="1007:13" pos:end="1007:70"><name pos:start="1007:13" pos:end="1007:24">error_report</name><argument_list pos:start="1007:25" pos:end="1007:70">(<argument pos:start="1007:26" pos:end="1007:69"><expr pos:start="1007:26" pos:end="1007:69"><literal type="string" pos:start="1007:26" pos:end="1007:69">"-icount does not currently work with MTTCG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1008:9" pos:end="1008:52"><expr pos:start="1008:9" pos:end="1008:51"><call pos:start="1008:9" pos:end="1008:51"><name pos:start="1008:9" pos:end="1008:24">configure_icount</name><argument_list pos:start="1008:25" pos:end="1008:51">(<argument pos:start="1008:26" pos:end="1008:36"><expr pos:start="1008:26" pos:end="1008:36"><name pos:start="1008:26" pos:end="1008:36">icount_opts</name></expr></argument>, <argument pos:start="1008:39" pos:end="1008:50"><expr pos:start="1008:39" pos:end="1008:50"><operator pos:start="1008:39" pos:end="1008:39">&amp;</operator><name pos:start="1008:40" pos:end="1008:50">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1009:9" pos:end="1009:35"><expr pos:start="1009:9" pos:end="1009:34"><call pos:start="1009:9" pos:end="1009:34"><name pos:start="1009:9" pos:end="1009:21">qemu_opts_del</name><argument_list pos:start="1009:22" pos:end="1009:34">(<argument pos:start="1009:23" pos:end="1009:33"><expr pos:start="1009:23" pos:end="1009:33"><name pos:start="1009:23" pos:end="1009:33">icount_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1010:5" pos:end="1197:13"><if pos:start="1010:5" pos:end="1197:13">if <condition pos:start="1010:8" pos:end="1010:20">(<expr pos:start="1010:9" pos:end="1010:19"><name pos:start="1010:9" pos:end="1010:19">default_net</name></expr>)</condition> <block pos:start="1010:22" pos:end="1197:13">{<block_content pos:start="1011:9" pos:end="1197:13">
        <decl_stmt pos:start="1011:9" pos:end="1011:50"><decl pos:start="1011:9" pos:end="1011:49"><type pos:start="1011:9" pos:end="1011:22"><name pos:start="1011:9" pos:end="1011:20">QemuOptsList</name> <modifier pos:start="1011:22" pos:end="1011:22">*</modifier></type><name pos:start="1011:23" pos:end="1011:25">net</name> <init pos:start="1011:27" pos:end="1011:49">= <expr pos:start="1011:29" pos:end="1011:49"><call pos:start="1011:29" pos:end="1011:49"><name pos:start="1011:29" pos:end="1011:42">qemu_find_opts</name><argument_list pos:start="1011:43" pos:end="1011:49">(<argument pos:start="1011:44" pos:end="1011:48"><expr pos:start="1011:44" pos:end="1011:48"><literal type="string" pos:start="1011:44" pos:end="1011:48">"net"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="1012:9" pos:end="1014:0"><expr pos:start="1012:9" pos:end="1012:61"><call pos:start="1012:9" pos:end="1012:61"><name pos:start="1012:9" pos:end="1012:21">qemu_opts_set</name><argument_list pos:start="1012:22" pos:end="1012:61">(<argument pos:start="1012:23" pos:end="1012:25"><expr pos:start="1012:23" pos:end="1012:25"><name pos:start="1012:23" pos:end="1012:25">net</name></expr></argument>, <argument pos:start="1012:28" pos:end="1012:31"><expr pos:start="1012:28" pos:end="1012:31"><name pos:start="1012:28" pos:end="1012:31">NULL</name></expr></argument>, <argument pos:start="1012:34" pos:end="1012:39"><expr pos:start="1012:34" pos:end="1012:39"><literal type="string" pos:start="1012:34" pos:end="1012:39">"type"</literal></expr></argument>, <argument pos:start="1012:42" pos:end="1012:46"><expr pos:start="1012:42" pos:end="1012:46"><literal type="string" pos:start="1012:42" pos:end="1012:46">"nic"</literal></expr></argument>, <argument pos:start="1012:49" pos:end="1012:60"><expr pos:start="1012:49" pos:end="1012:60"><operator pos:start="1012:49" pos:end="1012:49">&amp;</operator><name pos:start="1012:50" pos:end="1012:60">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="1013:1" pos:end="1013:19">#<cpp:directive pos:start="1013:2" pos:end="1013:6">ifdef</cpp:directive> <name pos:start="1013:8" pos:end="1013:19">CONFIG_SLIRP</name></cpp:ifdef>
        <expr_stmt pos:start="1014:9" pos:end="1016:0"><expr pos:start="1014:9" pos:end="1014:62"><call pos:start="1014:9" pos:end="1014:62"><name pos:start="1014:9" pos:end="1014:21">qemu_opts_set</name><argument_list pos:start="1014:22" pos:end="1014:62">(<argument pos:start="1014:23" pos:end="1014:25"><expr pos:start="1014:23" pos:end="1014:25"><name pos:start="1014:23" pos:end="1014:25">net</name></expr></argument>, <argument pos:start="1014:28" pos:end="1014:31"><expr pos:start="1014:28" pos:end="1014:31"><name pos:start="1014:28" pos:end="1014:31">NULL</name></expr></argument>, <argument pos:start="1014:34" pos:end="1014:39"><expr pos:start="1014:34" pos:end="1014:39"><literal type="string" pos:start="1014:34" pos:end="1014:39">"type"</literal></expr></argument>, <argument pos:start="1014:42" pos:end="1014:47"><expr pos:start="1014:42" pos:end="1014:47"><literal type="string" pos:start="1014:42" pos:end="1014:47">"user"</literal></expr></argument>, <argument pos:start="1014:50" pos:end="1014:61"><expr pos:start="1014:50" pos:end="1014:61"><operator pos:start="1014:50" pos:end="1014:50">&amp;</operator><name pos:start="1014:51" pos:end="1014:61">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1015:1" pos:end="1015:6">#<cpp:directive pos:start="1015:2" pos:end="1015:6">endif</cpp:directive></cpp:endif>
    <expr_stmt pos:start="1016:5" pos:end="1016:21"><expr pos:start="1016:5" pos:end="1016:20"><call pos:start="1016:5" pos:end="1016:20"><name pos:start="1016:5" pos:end="1016:18">colo_info_init</name><argument_list pos:start="1016:19" pos:end="1016:20">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1017:5" pos:end="1197:13"><if pos:start="1017:5" pos:end="1197:13">if <condition pos:start="1017:8" pos:end="1017:31">(<expr pos:start="1017:9" pos:end="1017:30"><call pos:start="1017:9" pos:end="1017:26"><name pos:start="1017:9" pos:end="1017:24">net_init_clients</name><argument_list pos:start="1017:25" pos:end="1017:26">()</argument_list></call> <operator pos:start="1017:28" pos:end="1017:28">&lt;</operator> <literal type="number" pos:start="1017:30" pos:end="1017:30">0</literal></expr>)</condition> <block pos:start="1017:33" pos:end="1197:13">{<block_content pos:start="1018:5" pos:end="1197:13">
    <if_stmt pos:start="1018:5" pos:end="1197:13"><if pos:start="1018:5" pos:end="1197:13">if <condition pos:start="1018:8" pos:end="1020:55">(<expr pos:start="1018:9" pos:end="1020:54"><call pos:start="1018:9" pos:end="1020:54"><name pos:start="1018:9" pos:end="1018:25">qemu_opts_foreach</name><argument_list pos:start="1018:26" pos:end="1020:54">(<argument pos:start="1018:27" pos:end="1018:50"><expr pos:start="1018:27" pos:end="1018:50"><call pos:start="1018:27" pos:end="1018:50"><name pos:start="1018:27" pos:end="1018:40">qemu_find_opts</name><argument_list pos:start="1018:41" pos:end="1018:50">(<argument pos:start="1018:42" pos:end="1018:49"><expr pos:start="1018:42" pos:end="1018:49"><literal type="string" pos:start="1018:42" pos:end="1018:49">"object"</literal></expr></argument>)</argument_list></call></expr></argument>,
                          <argument pos:start="1019:27" pos:end="1019:57"><expr pos:start="1019:27" pos:end="1019:57"><name pos:start="1019:27" pos:end="1019:57">user_creatable_add_opts_foreach</name></expr></argument>,
                          <argument pos:start="1020:27" pos:end="1020:47"><expr pos:start="1020:27" pos:end="1020:47"><name pos:start="1020:27" pos:end="1020:47">object_create_delayed</name></expr></argument>, <argument pos:start="1020:50" pos:end="1020:53"><expr pos:start="1020:50" pos:end="1020:53"><name pos:start="1020:50" pos:end="1020:53">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1020:57" pos:end="1197:13">{<block_content pos:start="1022:5" pos:end="1197:13">
<cpp:ifdef pos:start="1021:1" pos:end="1021:17">#<cpp:directive pos:start="1021:2" pos:end="1021:6">ifdef</cpp:directive> <name pos:start="1021:8" pos:end="1021:17">CONFIG_TPM</name></cpp:ifdef>
    <if_stmt pos:start="1022:5" pos:end="1197:13"><if pos:start="1022:5" pos:end="1197:13">if <condition pos:start="1022:8" pos:end="1022:23">(<expr pos:start="1022:9" pos:end="1022:22"><call pos:start="1022:9" pos:end="1022:18"><name pos:start="1022:9" pos:end="1022:16">tpm_init</name><argument_list pos:start="1022:17" pos:end="1022:18">()</argument_list></call> <operator pos:start="1022:20" pos:end="1022:20">&lt;</operator> <literal type="number" pos:start="1022:22" pos:end="1022:22">0</literal></expr>)</condition> <block pos:start="1022:25" pos:end="1197:13">{<block_content pos:start="1025:5" pos:end="1197:13">
<cpp:endif pos:start="1023:1" pos:end="1023:6">#<cpp:directive pos:start="1023:2" pos:end="1023:6">endif</cpp:directive></cpp:endif>
    <comment type="block" pos:start="1024:5" pos:end="1024:34">/* init the bluetooth world */</comment>
    <if_stmt pos:start="1025:5" pos:end="1197:13"><if pos:start="1025:5" pos:end="1197:13">if <condition pos:start="1025:8" pos:end="1025:48">(<expr pos:start="1025:9" pos:end="1025:47"><call pos:start="1025:9" pos:end="1025:47"><name pos:start="1025:9" pos:end="1025:29">foreach_device_config</name><argument_list pos:start="1025:30" pos:end="1025:47">(<argument pos:start="1025:31" pos:end="1025:36"><expr pos:start="1025:31" pos:end="1025:36"><name pos:start="1025:31" pos:end="1025:36">DEV_BT</name></expr></argument>, <argument pos:start="1025:39" pos:end="1025:46"><expr pos:start="1025:39" pos:end="1025:46"><name pos:start="1025:39" pos:end="1025:46">bt_parse</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1026:5" pos:end="1197:13"><block_content pos:start="1026:5" pos:end="1197:13">
    <if_stmt pos:start="1026:5" pos:end="1197:13"><if pos:start="1026:5" pos:end="1197:13">if <condition pos:start="1026:8" pos:end="1026:23">(<expr pos:start="1026:9" pos:end="1026:22"><operator pos:start="1026:9" pos:end="1026:9">!</operator><call pos:start="1026:10" pos:end="1026:22"><name pos:start="1026:10" pos:end="1026:20">xen_enabled</name><argument_list pos:start="1026:21" pos:end="1026:22">()</argument_list></call></expr>)</condition> <block pos:start="1026:25" pos:end="1197:13">{<block_content pos:start="1028:9" pos:end="1197:13">
        <comment type="block" pos:start="1027:9" pos:end="1027:71">/* On 32-bit hosts, QEMU is limited by virtual address space */</comment>
        <if_stmt pos:start="1028:9" pos:end="1197:13"><if pos:start="1028:9" pos:end="1197:13">if <condition pos:start="1028:12" pos:end="1028:60">(<expr pos:start="1028:13" pos:end="1028:59"><name pos:start="1028:13" pos:end="1028:20">ram_size</name> <operator pos:start="1028:22" pos:end="1028:22">&gt;</operator> <operator pos:start="1028:24" pos:end="1028:24">(</operator><literal type="number" pos:start="1028:25" pos:end="1028:28">2047</literal> <operator pos:start="1028:30" pos:end="1028:31">&lt;&lt;</operator> <literal type="number" pos:start="1028:33" pos:end="1028:34">20</literal><operator pos:start="1028:35" pos:end="1028:35">)</operator> <operator pos:start="1028:37" pos:end="1028:38">&amp;&amp;</operator> <name pos:start="1028:40" pos:end="1028:53">HOST_LONG_BITS</name> <operator pos:start="1028:55" pos:end="1028:56">==</operator> <literal type="number" pos:start="1028:58" pos:end="1028:59">32</literal></expr>)</condition> <block pos:start="1028:62" pos:end="1197:13">{<block_content pos:start="1029:13" pos:end="1197:13">
            <expr_stmt pos:start="1029:13" pos:end="1029:65"><expr pos:start="1029:13" pos:end="1029:64"><call pos:start="1029:13" pos:end="1029:64"><name pos:start="1029:13" pos:end="1029:24">error_report</name><argument_list pos:start="1029:25" pos:end="1029:64">(<argument pos:start="1029:26" pos:end="1029:63"><expr pos:start="1029:26" pos:end="1029:63"><literal type="string" pos:start="1029:26" pos:end="1029:63">"at most 2047 MB RAM can be simulated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1030:5" pos:end="1030:19"><expr pos:start="1030:5" pos:end="1030:18"><call pos:start="1030:5" pos:end="1030:18"><name pos:start="1030:5" pos:end="1030:16">blk_mig_init</name><argument_list pos:start="1030:17" pos:end="1030:18">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1031:5" pos:end="1031:19"><expr pos:start="1031:5" pos:end="1031:18"><call pos:start="1031:5" pos:end="1031:18"><name pos:start="1031:5" pos:end="1031:16">ram_mig_init</name><argument_list pos:start="1031:17" pos:end="1031:18">()</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="1032:5" pos:end="1033:64">/* If the currently selected machine wishes to override the units-per-bus
     * property of its default HBA interface type, do so now. */</comment>
    <if_stmt pos:start="1034:5" pos:end="1197:13"><if pos:start="1034:5" pos:end="1197:13">if <condition pos:start="1034:8" pos:end="1034:45">(<expr pos:start="1034:9" pos:end="1034:44"><name pos:start="1034:9" pos:end="1034:44"><name pos:start="1034:9" pos:end="1034:21">machine_class</name><operator pos:start="1034:22" pos:end="1034:23">-&gt;</operator><name pos:start="1034:24" pos:end="1034:44">units_per_default_bus</name></name></expr>)</condition> <block pos:start="1034:47" pos:end="1197:13">{<block_content pos:start="1035:9" pos:end="1197:13">
        <expr_stmt pos:start="1035:9" pos:end="1036:64"><expr pos:start="1035:9" pos:end="1036:63"><call pos:start="1035:9" pos:end="1036:63"><name pos:start="1035:9" pos:end="1035:25">override_max_devs</name><argument_list pos:start="1035:26" pos:end="1036:63">(<argument pos:start="1035:27" pos:end="1035:59"><expr pos:start="1035:27" pos:end="1035:59"><name pos:start="1035:27" pos:end="1035:59"><name pos:start="1035:27" pos:end="1035:39">machine_class</name><operator pos:start="1035:40" pos:end="1035:41">-&gt;</operator><name pos:start="1035:42" pos:end="1035:59">block_default_type</name></name></expr></argument>,
                          <argument pos:start="1036:27" pos:end="1036:62"><expr pos:start="1036:27" pos:end="1036:62"><name pos:start="1036:27" pos:end="1036:62"><name pos:start="1036:27" pos:end="1036:39">machine_class</name><operator pos:start="1036:40" pos:end="1036:41">-&gt;</operator><name pos:start="1036:42" pos:end="1036:62">units_per_default_bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="1037:5" pos:end="1037:40">/* open the virtual block devices */</comment>
    <while pos:start="1038:5" pos:end="1197:13">while <condition pos:start="1038:11" pos:end="1038:39">(<expr pos:start="1038:12" pos:end="1038:38"><operator pos:start="1038:12" pos:end="1038:12">!</operator><call pos:start="1038:13" pos:end="1038:38"><name pos:start="1038:13" pos:end="1038:26">QSIMPLEQ_EMPTY</name><argument_list pos:start="1038:27" pos:end="1038:38">(<argument pos:start="1038:28" pos:end="1038:37"><expr pos:start="1038:28" pos:end="1038:37"><operator pos:start="1038:28" pos:end="1038:28">&amp;</operator><name pos:start="1038:29" pos:end="1038:37">bdo_queue</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1038:41" pos:end="1197:13">{<block_content pos:start="1039:9" pos:end="1197:13">
        <decl_stmt pos:start="1039:9" pos:end="1039:64"><decl pos:start="1039:9" pos:end="1039:63"><type pos:start="1039:9" pos:end="1039:31"><name pos:start="1039:9" pos:end="1039:29">BlockdevOptions_queue</name> <modifier pos:start="1039:31" pos:end="1039:31">*</modifier></type><name pos:start="1039:32" pos:end="1039:34">bdo</name> <init pos:start="1039:36" pos:end="1039:63">= <expr pos:start="1039:38" pos:end="1039:63"><call pos:start="1039:38" pos:end="1039:63"><name pos:start="1039:38" pos:end="1039:51">QSIMPLEQ_FIRST</name><argument_list pos:start="1039:52" pos:end="1039:63">(<argument pos:start="1039:53" pos:end="1039:62"><expr pos:start="1039:53" pos:end="1039:62"><operator pos:start="1039:53" pos:end="1039:53">&amp;</operator><name pos:start="1039:54" pos:end="1039:62">bdo_queue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="1040:9" pos:end="1040:48"><expr pos:start="1040:9" pos:end="1040:47"><call pos:start="1040:9" pos:end="1040:47"><name pos:start="1040:9" pos:end="1040:28">QSIMPLEQ_REMOVE_HEAD</name><argument_list pos:start="1040:29" pos:end="1040:47">(<argument pos:start="1040:30" pos:end="1040:39"><expr pos:start="1040:30" pos:end="1040:39"><operator pos:start="1040:30" pos:end="1040:30">&amp;</operator><name pos:start="1040:31" pos:end="1040:39">bdo_queue</name></expr></argument>, <argument pos:start="1040:42" pos:end="1040:46"><expr pos:start="1040:42" pos:end="1040:46"><name pos:start="1040:42" pos:end="1040:46">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1041:9" pos:end="1041:36"><expr pos:start="1041:9" pos:end="1041:35"><call pos:start="1041:9" pos:end="1041:35"><name pos:start="1041:9" pos:end="1041:24">loc_push_restore</name><argument_list pos:start="1041:25" pos:end="1041:35">(<argument pos:start="1041:26" pos:end="1041:34"><expr pos:start="1041:26" pos:end="1041:34"><operator pos:start="1041:26" pos:end="1041:26">&amp;</operator><name pos:start="1041:27" pos:end="1041:34"><name pos:start="1041:27" pos:end="1041:29">bdo</name><operator pos:start="1041:30" pos:end="1041:31">-&gt;</operator><name pos:start="1041:32" pos:end="1041:34">loc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1042:9" pos:end="1042:49"><expr pos:start="1042:9" pos:end="1042:48"><call pos:start="1042:9" pos:end="1042:48"><name pos:start="1042:9" pos:end="1042:24">qmp_blockdev_add</name><argument_list pos:start="1042:25" pos:end="1042:48">(<argument pos:start="1042:26" pos:end="1042:33"><expr pos:start="1042:26" pos:end="1042:33"><name pos:start="1042:26" pos:end="1042:33"><name pos:start="1042:26" pos:end="1042:28">bdo</name><operator pos:start="1042:29" pos:end="1042:30">-&gt;</operator><name pos:start="1042:31" pos:end="1042:33">bdo</name></name></expr></argument>, <argument pos:start="1042:36" pos:end="1042:47"><expr pos:start="1042:36" pos:end="1042:47"><operator pos:start="1042:36" pos:end="1042:36">&amp;</operator><name pos:start="1042:37" pos:end="1042:47">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1043:9" pos:end="1043:27"><expr pos:start="1043:9" pos:end="1043:26"><call pos:start="1043:9" pos:end="1043:26"><name pos:start="1043:9" pos:end="1043:15">loc_pop</name><argument_list pos:start="1043:16" pos:end="1043:26">(<argument pos:start="1043:17" pos:end="1043:25"><expr pos:start="1043:17" pos:end="1043:25"><operator pos:start="1043:17" pos:end="1043:17">&amp;</operator><name pos:start="1043:18" pos:end="1043:25"><name pos:start="1043:18" pos:end="1043:20">bdo</name><operator pos:start="1043:21" pos:end="1043:22">-&gt;</operator><name pos:start="1043:23" pos:end="1043:25">loc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1044:9" pos:end="1044:44"><expr pos:start="1044:9" pos:end="1044:43"><call pos:start="1044:9" pos:end="1044:43"><name pos:start="1044:9" pos:end="1044:33">qapi_free_BlockdevOptions</name><argument_list pos:start="1044:34" pos:end="1044:43">(<argument pos:start="1044:35" pos:end="1044:42"><expr pos:start="1044:35" pos:end="1044:42"><name pos:start="1044:35" pos:end="1044:42"><name pos:start="1044:35" pos:end="1044:37">bdo</name><operator pos:start="1044:38" pos:end="1044:39">-&gt;</operator><name pos:start="1044:40" pos:end="1044:42">bdo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1045:9" pos:end="1045:20"><expr pos:start="1045:9" pos:end="1045:19"><call pos:start="1045:9" pos:end="1045:19"><name pos:start="1045:9" pos:end="1045:14">g_free</name><argument_list pos:start="1045:15" pos:end="1045:19">(<argument pos:start="1045:16" pos:end="1045:18"><expr pos:start="1045:16" pos:end="1045:18"><name pos:start="1045:16" pos:end="1045:18">bdo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1046:5" pos:end="1197:13"><if pos:start="1046:5" pos:end="1197:13">if <condition pos:start="1046:8" pos:end="1046:52">(<expr pos:start="1046:9" pos:end="1046:51"><name pos:start="1046:9" pos:end="1046:16">snapshot</name> <operator pos:start="1046:18" pos:end="1046:19">||</operator> <name pos:start="1046:21" pos:end="1046:31">replay_mode</name> <operator pos:start="1046:33" pos:end="1046:34">!=</operator> <name pos:start="1046:36" pos:end="1046:51">REPLAY_MODE_NONE</name></expr>)</condition> <block pos:start="1046:54" pos:end="1197:13">{<block_content pos:start="1047:9" pos:end="1197:13">
        <expr_stmt pos:start="1047:9" pos:end="1048:38"><expr pos:start="1047:9" pos:end="1048:37"><call pos:start="1047:9" pos:end="1048:37"><name pos:start="1047:9" pos:end="1047:25">qemu_opts_foreach</name><argument_list pos:start="1047:26" pos:end="1048:37">(<argument pos:start="1047:27" pos:end="1047:49"><expr pos:start="1047:27" pos:end="1047:49"><call pos:start="1047:27" pos:end="1047:49"><name pos:start="1047:27" pos:end="1047:40">qemu_find_opts</name><argument_list pos:start="1047:41" pos:end="1047:49">(<argument pos:start="1047:42" pos:end="1047:48"><expr pos:start="1047:42" pos:end="1047:48"><literal type="string" pos:start="1047:42" pos:end="1047:48">"drive"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1047:52" pos:end="1047:72"><expr pos:start="1047:52" pos:end="1047:72"><name pos:start="1047:52" pos:end="1047:72">drive_enable_snapshot</name></expr></argument>,
                          <argument pos:start="1048:27" pos:end="1048:30"><expr pos:start="1048:27" pos:end="1048:30"><name pos:start="1048:27" pos:end="1048:30">NULL</name></expr></argument>, <argument pos:start="1048:33" pos:end="1048:36"><expr pos:start="1048:33" pos:end="1048:36"><name pos:start="1048:33" pos:end="1048:36">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1049:5" pos:end="1197:13"><if pos:start="1049:5" pos:end="1197:13">if <condition pos:start="1049:8" pos:end="1050:68">(<expr pos:start="1049:9" pos:end="1050:67"><call pos:start="1049:9" pos:end="1050:67"><name pos:start="1049:9" pos:end="1049:25">qemu_opts_foreach</name><argument_list pos:start="1049:26" pos:end="1050:67">(<argument pos:start="1049:27" pos:end="1049:49"><expr pos:start="1049:27" pos:end="1049:49"><call pos:start="1049:27" pos:end="1049:49"><name pos:start="1049:27" pos:end="1049:40">qemu_find_opts</name><argument_list pos:start="1049:41" pos:end="1049:49">(<argument pos:start="1049:42" pos:end="1049:48"><expr pos:start="1049:42" pos:end="1049:48"><literal type="string" pos:start="1049:42" pos:end="1049:48">"drive"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1049:52" pos:end="1049:66"><expr pos:start="1049:52" pos:end="1049:66"><name pos:start="1049:52" pos:end="1049:66">drive_init_func</name></expr></argument>,
                          <argument pos:start="1050:27" pos:end="1050:60"><expr pos:start="1050:27" pos:end="1050:60"><operator pos:start="1050:27" pos:end="1050:27">&amp;</operator><name pos:start="1050:28" pos:end="1050:60"><name pos:start="1050:28" pos:end="1050:40">machine_class</name><operator pos:start="1050:41" pos:end="1050:42">-&gt;</operator><name pos:start="1050:43" pos:end="1050:60">block_default_type</name></name></expr></argument>, <argument pos:start="1050:63" pos:end="1050:66"><expr pos:start="1050:63" pos:end="1050:66"><name pos:start="1050:63" pos:end="1050:66">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1050:70" pos:end="1197:13">{<block_content pos:start="1051:5" pos:end="1197:13">
    <expr_stmt pos:start="1051:5" pos:end="1052:30"><expr pos:start="1051:5" pos:end="1052:29"><call pos:start="1051:5" pos:end="1052:29"><name pos:start="1051:5" pos:end="1051:17">default_drive</name><argument_list pos:start="1051:18" pos:end="1052:29">(<argument pos:start="1051:19" pos:end="1051:31"><expr pos:start="1051:19" pos:end="1051:31"><name pos:start="1051:19" pos:end="1051:31">default_cdrom</name></expr></argument>, <argument pos:start="1051:34" pos:end="1051:41"><expr pos:start="1051:34" pos:end="1051:41"><name pos:start="1051:34" pos:end="1051:41">snapshot</name></expr></argument>, <argument pos:start="1051:44" pos:end="1051:76"><expr pos:start="1051:44" pos:end="1051:76"><name pos:start="1051:44" pos:end="1051:76"><name pos:start="1051:44" pos:end="1051:56">machine_class</name><operator pos:start="1051:57" pos:end="1051:58">-&gt;</operator><name pos:start="1051:59" pos:end="1051:76">block_default_type</name></name></expr></argument>, <argument pos:start="1051:79" pos:end="1051:79"><expr pos:start="1051:79" pos:end="1051:79"><literal type="number" pos:start="1051:79" pos:end="1051:79">2</literal></expr></argument>,
                  <argument pos:start="1052:19" pos:end="1052:28"><expr pos:start="1052:19" pos:end="1052:28"><name pos:start="1052:19" pos:end="1052:28">CDROM_OPTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1053:5" pos:end="1053:67"><expr pos:start="1053:5" pos:end="1053:66"><call pos:start="1053:5" pos:end="1053:66"><name pos:start="1053:5" pos:end="1053:17">default_drive</name><argument_list pos:start="1053:18" pos:end="1053:66">(<argument pos:start="1053:19" pos:end="1053:32"><expr pos:start="1053:19" pos:end="1053:32"><name pos:start="1053:19" pos:end="1053:32">default_floppy</name></expr></argument>, <argument pos:start="1053:35" pos:end="1053:42"><expr pos:start="1053:35" pos:end="1053:42"><name pos:start="1053:35" pos:end="1053:42">snapshot</name></expr></argument>, <argument pos:start="1053:45" pos:end="1053:53"><expr pos:start="1053:45" pos:end="1053:53"><name pos:start="1053:45" pos:end="1053:53">IF_FLOPPY</name></expr></argument>, <argument pos:start="1053:56" pos:end="1053:56"><expr pos:start="1053:56" pos:end="1053:56"><literal type="number" pos:start="1053:56" pos:end="1053:56">0</literal></expr></argument>, <argument pos:start="1053:59" pos:end="1053:65"><expr pos:start="1053:59" pos:end="1053:65"><name pos:start="1053:59" pos:end="1053:65">FD_OPTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1054:5" pos:end="1054:63"><expr pos:start="1054:5" pos:end="1054:62"><call pos:start="1054:5" pos:end="1054:62"><name pos:start="1054:5" pos:end="1054:17">default_drive</name><argument_list pos:start="1054:18" pos:end="1054:62">(<argument pos:start="1054:19" pos:end="1054:32"><expr pos:start="1054:19" pos:end="1054:32"><name pos:start="1054:19" pos:end="1054:32">default_sdcard</name></expr></argument>, <argument pos:start="1054:35" pos:end="1054:42"><expr pos:start="1054:35" pos:end="1054:42"><name pos:start="1054:35" pos:end="1054:42">snapshot</name></expr></argument>, <argument pos:start="1054:45" pos:end="1054:49"><expr pos:start="1054:45" pos:end="1054:49"><name pos:start="1054:45" pos:end="1054:49">IF_SD</name></expr></argument>, <argument pos:start="1054:52" pos:end="1054:52"><expr pos:start="1054:52" pos:end="1054:52"><literal type="number" pos:start="1054:52" pos:end="1054:52">0</literal></expr></argument>, <argument pos:start="1054:55" pos:end="1054:61"><expr pos:start="1054:55" pos:end="1054:61"><name pos:start="1054:55" pos:end="1054:61">SD_OPTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1055:5" pos:end="1055:35"><expr pos:start="1055:5" pos:end="1055:34"><call pos:start="1055:5" pos:end="1055:34"><name pos:start="1055:5" pos:end="1055:19">parse_numa_opts</name><argument_list pos:start="1055:20" pos:end="1055:34">(<argument pos:start="1055:21" pos:end="1055:33"><expr pos:start="1055:21" pos:end="1055:33"><name pos:start="1055:21" pos:end="1055:33">machine_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1056:5" pos:end="1197:13"><if pos:start="1056:5" pos:end="1197:13">if <condition pos:start="1056:8" pos:end="1057:53">(<expr pos:start="1056:9" pos:end="1057:52"><call pos:start="1056:9" pos:end="1057:52"><name pos:start="1056:9" pos:end="1056:25">qemu_opts_foreach</name><argument_list pos:start="1056:26" pos:end="1057:52">(<argument pos:start="1056:27" pos:end="1056:47"><expr pos:start="1056:27" pos:end="1056:47"><call pos:start="1056:27" pos:end="1056:47"><name pos:start="1056:27" pos:end="1056:40">qemu_find_opts</name><argument_list pos:start="1056:41" pos:end="1056:47">(<argument pos:start="1056:42" pos:end="1056:46"><expr pos:start="1056:42" pos:end="1056:46"><literal type="string" pos:start="1056:42" pos:end="1056:46">"mon"</literal></expr></argument>)</argument_list></call></expr></argument>,
                          <argument pos:start="1057:27" pos:end="1057:39"><expr pos:start="1057:27" pos:end="1057:39"><name pos:start="1057:27" pos:end="1057:39">mon_init_func</name></expr></argument>, <argument pos:start="1057:42" pos:end="1057:45"><expr pos:start="1057:42" pos:end="1057:45"><name pos:start="1057:42" pos:end="1057:45">NULL</name></expr></argument>, <argument pos:start="1057:48" pos:end="1057:51"><expr pos:start="1057:48" pos:end="1057:51"><name pos:start="1057:48" pos:end="1057:51">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1057:55" pos:end="1197:13">{<block_content pos:start="1058:5" pos:end="1197:13">
    <if_stmt pos:start="1058:5" pos:end="1197:13"><if pos:start="1058:5" pos:end="1197:13">if <condition pos:start="1058:8" pos:end="1058:60">(<expr pos:start="1058:9" pos:end="1058:59"><call pos:start="1058:9" pos:end="1058:55"><name pos:start="1058:9" pos:end="1058:29">foreach_device_config</name><argument_list pos:start="1058:30" pos:end="1058:55">(<argument pos:start="1058:31" pos:end="1058:40"><expr pos:start="1058:31" pos:end="1058:40"><name pos:start="1058:31" pos:end="1058:40">DEV_SERIAL</name></expr></argument>, <argument pos:start="1058:43" pos:end="1058:54"><expr pos:start="1058:43" pos:end="1058:54"><name pos:start="1058:43" pos:end="1058:54">serial_parse</name></expr></argument>)</argument_list></call> <operator pos:start="1058:57" pos:end="1058:57">&lt;</operator> <literal type="number" pos:start="1058:59" pos:end="1058:59">0</literal></expr>)</condition><block type="pseudo" pos:start="1059:5" pos:end="1197:13"><block_content pos:start="1059:5" pos:end="1197:13">
    <if_stmt pos:start="1059:5" pos:end="1197:13"><if pos:start="1059:5" pos:end="1197:13">if <condition pos:start="1059:8" pos:end="1059:64">(<expr pos:start="1059:9" pos:end="1059:63"><call pos:start="1059:9" pos:end="1059:59"><name pos:start="1059:9" pos:end="1059:29">foreach_device_config</name><argument_list pos:start="1059:30" pos:end="1059:59">(<argument pos:start="1059:31" pos:end="1059:42"><expr pos:start="1059:31" pos:end="1059:42"><name pos:start="1059:31" pos:end="1059:42">DEV_PARALLEL</name></expr></argument>, <argument pos:start="1059:45" pos:end="1059:58"><expr pos:start="1059:45" pos:end="1059:58"><name pos:start="1059:45" pos:end="1059:58">parallel_parse</name></expr></argument>)</argument_list></call> <operator pos:start="1059:61" pos:end="1059:61">&lt;</operator> <literal type="number" pos:start="1059:63" pos:end="1059:63">0</literal></expr>)</condition><block type="pseudo" pos:start="1060:5" pos:end="1197:13"><block_content pos:start="1060:5" pos:end="1197:13">
    <if_stmt pos:start="1060:5" pos:end="1197:13"><if pos:start="1060:5" pos:end="1197:13">if <condition pos:start="1060:8" pos:end="1060:62">(<expr pos:start="1060:9" pos:end="1060:61"><call pos:start="1060:9" pos:end="1060:57"><name pos:start="1060:9" pos:end="1060:29">foreach_device_config</name><argument_list pos:start="1060:30" pos:end="1060:57">(<argument pos:start="1060:31" pos:end="1060:41"><expr pos:start="1060:31" pos:end="1060:41"><name pos:start="1060:31" pos:end="1060:41">DEV_VIRTCON</name></expr></argument>, <argument pos:start="1060:44" pos:end="1060:56"><expr pos:start="1060:44" pos:end="1060:56"><name pos:start="1060:44" pos:end="1060:56">virtcon_parse</name></expr></argument>)</argument_list></call> <operator pos:start="1060:59" pos:end="1060:59">&lt;</operator> <literal type="number" pos:start="1060:61" pos:end="1060:61">0</literal></expr>)</condition><block type="pseudo" pos:start="1061:5" pos:end="1197:13"><block_content pos:start="1061:5" pos:end="1197:13">
    <if_stmt pos:start="1061:5" pos:end="1197:13"><if pos:start="1061:5" pos:end="1197:13">if <condition pos:start="1061:8" pos:end="1061:56">(<expr pos:start="1061:9" pos:end="1061:55"><call pos:start="1061:9" pos:end="1061:51"><name pos:start="1061:9" pos:end="1061:29">foreach_device_config</name><argument_list pos:start="1061:30" pos:end="1061:51">(<argument pos:start="1061:31" pos:end="1061:38"><expr pos:start="1061:31" pos:end="1061:38"><name pos:start="1061:31" pos:end="1061:38">DEV_SCLP</name></expr></argument>, <argument pos:start="1061:41" pos:end="1061:50"><expr pos:start="1061:41" pos:end="1061:50"><name pos:start="1061:41" pos:end="1061:50">sclp_parse</name></expr></argument>)</argument_list></call> <operator pos:start="1061:53" pos:end="1061:53">&lt;</operator> <literal type="number" pos:start="1061:55" pos:end="1061:55">0</literal></expr>)</condition> <block pos:start="1061:58" pos:end="1197:13">{<block_content pos:start="1062:5" pos:end="1197:13">
    <if_stmt pos:start="1062:5" pos:end="1197:13"><if pos:start="1062:5" pos:end="1197:13">if <condition pos:start="1062:8" pos:end="1062:64">(<expr pos:start="1062:9" pos:end="1062:63"><call pos:start="1062:9" pos:end="1062:59"><name pos:start="1062:9" pos:end="1062:29">foreach_device_config</name><argument_list pos:start="1062:30" pos:end="1062:59">(<argument pos:start="1062:31" pos:end="1062:42"><expr pos:start="1062:31" pos:end="1062:42"><name pos:start="1062:31" pos:end="1062:42">DEV_DEBUGCON</name></expr></argument>, <argument pos:start="1062:45" pos:end="1062:58"><expr pos:start="1062:45" pos:end="1062:58"><name pos:start="1062:45" pos:end="1062:58">debugcon_parse</name></expr></argument>)</argument_list></call> <operator pos:start="1062:61" pos:end="1062:61">&lt;</operator> <literal type="number" pos:start="1062:63" pos:end="1062:63">0</literal></expr>)</condition><block type="pseudo" pos:start="1064:5" pos:end="1197:13"><block_content pos:start="1064:5" pos:end="1197:13">
    <comment type="block" pos:start="1063:5" pos:end="1063:65">/* If no default VGA is requested, the default is "none".  */</comment>
    <if_stmt pos:start="1064:5" pos:end="1197:13"><if pos:start="1064:5" pos:end="1197:13">if <condition pos:start="1064:8" pos:end="1064:20">(<expr pos:start="1064:9" pos:end="1064:19"><name pos:start="1064:9" pos:end="1064:19">default_vga</name></expr>)</condition> <block pos:start="1064:22" pos:end="1197:13">{<block_content pos:start="1065:9" pos:end="1197:13">
        <if_stmt pos:start="1065:9" pos:end="1197:13"><if pos:start="1065:9" pos:end="1067:9">if <condition pos:start="1065:12" pos:end="1065:43">(<expr pos:start="1065:13" pos:end="1065:42"><name pos:start="1065:13" pos:end="1065:42"><name pos:start="1065:13" pos:end="1065:25">machine_class</name><operator pos:start="1065:26" pos:end="1065:27">-&gt;</operator><name pos:start="1065:28" pos:end="1065:42">default_display</name></name></expr>)</condition> <block pos:start="1065:45" pos:end="1067:9">{<block_content pos:start="1066:13" pos:end="1066:55">
            <expr_stmt pos:start="1066:13" pos:end="1066:55"><expr pos:start="1066:13" pos:end="1066:54"><name pos:start="1066:13" pos:end="1066:21">vga_model</name> <operator pos:start="1066:23" pos:end="1066:23">=</operator> <name pos:start="1066:25" pos:end="1066:54"><name pos:start="1066:25" pos:end="1066:37">machine_class</name><operator pos:start="1066:38" pos:end="1066:39">-&gt;</operator><name pos:start="1066:40" pos:end="1066:54">default_display</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="1067:11" pos:end="1069:9">else if <condition pos:start="1067:19" pos:end="1067:55">(<expr pos:start="1067:20" pos:end="1067:54"><call pos:start="1067:20" pos:end="1067:54"><name pos:start="1067:20" pos:end="1067:42">vga_interface_available</name><argument_list pos:start="1067:43" pos:end="1067:54">(<argument pos:start="1067:44" pos:end="1067:53"><expr pos:start="1067:44" pos:end="1067:53"><name pos:start="1067:44" pos:end="1067:53">VGA_CIRRUS</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1067:57" pos:end="1069:9">{<block_content pos:start="1068:13" pos:end="1068:33">
            <expr_stmt pos:start="1068:13" pos:end="1068:33"><expr pos:start="1068:13" pos:end="1068:32"><name pos:start="1068:13" pos:end="1068:21">vga_model</name> <operator pos:start="1068:23" pos:end="1068:23">=</operator> <literal type="string" pos:start="1068:25" pos:end="1068:32">"cirrus"</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="1069:11" pos:end="1197:13">else if <condition pos:start="1069:19" pos:end="1069:52">(<expr pos:start="1069:20" pos:end="1069:51"><call pos:start="1069:20" pos:end="1069:51"><name pos:start="1069:20" pos:end="1069:42">vga_interface_available</name><argument_list pos:start="1069:43" pos:end="1069:51">(<argument pos:start="1069:44" pos:end="1069:50"><expr pos:start="1069:44" pos:end="1069:50"><name pos:start="1069:44" pos:end="1069:50">VGA_STD</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1069:54" pos:end="1197:13">{<block_content pos:start="1070:13" pos:end="1197:13">
            <expr_stmt pos:start="1070:13" pos:end="1070:30"><expr pos:start="1070:13" pos:end="1070:29"><name pos:start="1070:13" pos:end="1070:21">vga_model</name> <operator pos:start="1070:23" pos:end="1070:23">=</operator> <literal type="string" pos:start="1070:25" pos:end="1070:29">"std"</literal></expr>;</expr_stmt>
    <if_stmt pos:start="1071:5" pos:end="1197:13"><if pos:start="1071:5" pos:end="1197:13">if <condition pos:start="1071:8" pos:end="1071:18">(<expr pos:start="1071:9" pos:end="1071:17"><name pos:start="1071:9" pos:end="1071:17">vga_model</name></expr>)</condition> <block pos:start="1071:20" pos:end="1197:13">{<block_content pos:start="1072:9" pos:end="1197:13">
        <expr_stmt pos:start="1072:9" pos:end="1072:32"><expr pos:start="1072:9" pos:end="1072:31"><call pos:start="1072:9" pos:end="1072:31"><name pos:start="1072:9" pos:end="1072:20">select_vgahw</name><argument_list pos:start="1072:21" pos:end="1072:31">(<argument pos:start="1072:22" pos:end="1072:30"><expr pos:start="1072:22" pos:end="1072:30"><name pos:start="1072:22" pos:end="1072:30">vga_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1073:5" pos:end="1197:13"><if pos:start="1073:5" pos:end="1197:13">if <condition pos:start="1073:8" pos:end="1073:17">(<expr pos:start="1073:9" pos:end="1073:16"><name pos:start="1073:9" pos:end="1073:16">watchdog</name></expr>)</condition> <block pos:start="1073:19" pos:end="1197:13">{<block_content pos:start="1074:9" pos:end="1197:13">
        <expr_stmt pos:start="1074:9" pos:end="1074:38"><expr pos:start="1074:9" pos:end="1074:37"><name pos:start="1074:9" pos:end="1074:9">i</name> <operator pos:start="1074:11" pos:end="1074:11">=</operator> <call pos:start="1074:13" pos:end="1074:37"><name pos:start="1074:13" pos:end="1074:27">select_watchdog</name><argument_list pos:start="1074:28" pos:end="1074:37">(<argument pos:start="1074:29" pos:end="1074:36"><expr pos:start="1074:29" pos:end="1074:36"><name pos:start="1074:29" pos:end="1074:36">watchdog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1075:9" pos:end="1076:34"><if pos:start="1075:9" pos:end="1076:34">if <condition pos:start="1075:12" pos:end="1075:18">(<expr pos:start="1075:13" pos:end="1075:17"><name pos:start="1075:13" pos:end="1075:13">i</name> <operator pos:start="1075:15" pos:end="1075:15">&gt;</operator> <literal type="number" pos:start="1075:17" pos:end="1075:17">0</literal></expr>)</condition><block type="pseudo" pos:start="1076:13" pos:end="1076:34"><block_content pos:start="1076:13" pos:end="1076:34">
            <expr_stmt pos:start="1076:13" pos:end="1076:34"><expr pos:start="1076:13" pos:end="1076:33"><call pos:start="1076:13" pos:end="1076:33"><name pos:start="1076:13" pos:end="1076:16">exit</name> <argument_list pos:start="1076:18" pos:end="1076:33">(<argument pos:start="1076:19" pos:end="1076:32"><expr pos:start="1076:19" pos:end="1076:32"><ternary pos:start="1076:19" pos:end="1076:32"><condition pos:start="1076:19" pos:end="1076:26"><expr pos:start="1076:19" pos:end="1076:24"><name pos:start="1076:19" pos:end="1076:19">i</name> <operator pos:start="1076:21" pos:end="1076:22">==</operator> <literal type="number" pos:start="1076:24" pos:end="1076:24">1</literal></expr> ?</condition><then pos:start="1076:28" pos:end="1076:28"> <expr pos:start="1076:28" pos:end="1076:28"><literal type="number" pos:start="1076:28" pos:end="1076:28">1</literal></expr> </then><else pos:start="1076:30" pos:end="1076:32">: <expr pos:start="1076:32" pos:end="1076:32"><literal type="number" pos:start="1076:32" pos:end="1076:32">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="1077:5" pos:end="1077:51"><expr pos:start="1077:5" pos:end="1077:50"><call pos:start="1077:5" pos:end="1077:50"><name pos:start="1077:5" pos:end="1077:33">machine_register_compat_props</name><argument_list pos:start="1077:34" pos:end="1077:50">(<argument pos:start="1077:35" pos:end="1077:49"><expr pos:start="1077:35" pos:end="1077:49"><name pos:start="1077:35" pos:end="1077:49">current_machine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1078:5" pos:end="1079:52"><expr pos:start="1078:5" pos:end="1079:51"><call pos:start="1078:5" pos:end="1079:51"><name pos:start="1078:5" pos:end="1078:21">qemu_opts_foreach</name><argument_list pos:start="1078:22" pos:end="1079:51">(<argument pos:start="1078:23" pos:end="1078:46"><expr pos:start="1078:23" pos:end="1078:46"><call pos:start="1078:23" pos:end="1078:46"><name pos:start="1078:23" pos:end="1078:36">qemu_find_opts</name><argument_list pos:start="1078:37" pos:end="1078:46">(<argument pos:start="1078:38" pos:end="1078:45"><expr pos:start="1078:38" pos:end="1078:45"><literal type="string" pos:start="1078:38" pos:end="1078:45">"global"</literal></expr></argument>)</argument_list></call></expr></argument>,
                      <argument pos:start="1079:23" pos:end="1079:38"><expr pos:start="1079:23" pos:end="1079:38"><name pos:start="1079:23" pos:end="1079:38">global_init_func</name></expr></argument>, <argument pos:start="1079:41" pos:end="1079:44"><expr pos:start="1079:41" pos:end="1079:44"><name pos:start="1079:41" pos:end="1079:44">NULL</name></expr></argument>, <argument pos:start="1079:47" pos:end="1079:50"><expr pos:start="1079:47" pos:end="1079:50"><name pos:start="1079:47" pos:end="1079:50">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="1080:5" pos:end="1082:36">/* This checkpoint is required by replay to separate prior clock
       reading from the other reads, because timer polling functions query
       clock values from the log. */</comment>
    <expr_stmt pos:start="1083:5" pos:end="1083:39"><expr pos:start="1083:5" pos:end="1083:38"><call pos:start="1083:5" pos:end="1083:38"><name pos:start="1083:5" pos:end="1083:21">replay_checkpoint</name><argument_list pos:start="1083:22" pos:end="1083:38">(<argument pos:start="1083:23" pos:end="1083:37"><expr pos:start="1083:23" pos:end="1083:37"><name pos:start="1083:23" pos:end="1083:37">CHECKPOINT_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1084:5" pos:end="1084:24"><expr pos:start="1084:5" pos:end="1084:23"><call pos:start="1084:5" pos:end="1084:23"><name pos:start="1084:5" pos:end="1084:21">qdev_machine_init</name><argument_list pos:start="1084:22" pos:end="1084:23">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1085:5" pos:end="1085:41"><expr pos:start="1085:5" pos:end="1085:40"><name pos:start="1085:5" pos:end="1085:29"><name pos:start="1085:5" pos:end="1085:19">current_machine</name><operator pos:start="1085:20" pos:end="1085:21">-&gt;</operator><name pos:start="1085:22" pos:end="1085:29">ram_size</name></name> <operator pos:start="1085:31" pos:end="1085:31">=</operator> <name pos:start="1085:33" pos:end="1085:40">ram_size</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1086:5" pos:end="1086:47"><expr pos:start="1086:5" pos:end="1086:46"><name pos:start="1086:5" pos:end="1086:32"><name pos:start="1086:5" pos:end="1086:19">current_machine</name><operator pos:start="1086:20" pos:end="1086:21">-&gt;</operator><name pos:start="1086:22" pos:end="1086:32">maxram_size</name></name> <operator pos:start="1086:34" pos:end="1086:34">=</operator> <name pos:start="1086:36" pos:end="1086:46">maxram_size</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1087:5" pos:end="1087:43"><expr pos:start="1087:5" pos:end="1087:42"><name pos:start="1087:5" pos:end="1087:30"><name pos:start="1087:5" pos:end="1087:19">current_machine</name><operator pos:start="1087:20" pos:end="1087:21">-&gt;</operator><name pos:start="1087:22" pos:end="1087:30">ram_slots</name></name> <operator pos:start="1087:32" pos:end="1087:32">=</operator> <name pos:start="1087:34" pos:end="1087:42">ram_slots</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1088:5" pos:end="1088:45"><expr pos:start="1088:5" pos:end="1088:44"><name pos:start="1088:5" pos:end="1088:31"><name pos:start="1088:5" pos:end="1088:19">current_machine</name><operator pos:start="1088:20" pos:end="1088:21">-&gt;</operator><name pos:start="1088:22" pos:end="1088:31">boot_order</name></name> <operator pos:start="1088:33" pos:end="1088:33">=</operator> <name pos:start="1088:35" pos:end="1088:44">boot_order</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1089:5" pos:end="1089:43"><expr pos:start="1089:5" pos:end="1089:42"><name pos:start="1089:5" pos:end="1089:30"><name pos:start="1089:5" pos:end="1089:19">current_machine</name><operator pos:start="1089:20" pos:end="1089:21">-&gt;</operator><name pos:start="1089:22" pos:end="1089:30">cpu_model</name></name> <operator pos:start="1089:32" pos:end="1089:32">=</operator> <name pos:start="1089:34" pos:end="1089:42">cpu_model</name></expr>;</expr_stmt>
    <expr_stmt pos:start="1090:5" pos:end="1090:41"><expr pos:start="1090:5" pos:end="1090:40"><call pos:start="1090:5" pos:end="1090:40"><name pos:start="1090:5" pos:end="1090:23"><name pos:start="1090:5" pos:end="1090:17">machine_class</name><operator pos:start="1090:18" pos:end="1090:19">-&gt;</operator><name pos:start="1090:20" pos:end="1090:23">init</name></name><argument_list pos:start="1090:24" pos:end="1090:40">(<argument pos:start="1090:25" pos:end="1090:39"><expr pos:start="1090:25" pos:end="1090:39"><name pos:start="1090:25" pos:end="1090:39">current_machine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1091:5" pos:end="1091:20"><expr pos:start="1091:5" pos:end="1091:19"><call pos:start="1091:5" pos:end="1091:19"><name pos:start="1091:5" pos:end="1091:17">realtime_init</name><argument_list pos:start="1091:18" pos:end="1091:19">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1092:5" pos:end="1092:17"><expr pos:start="1092:5" pos:end="1092:16"><call pos:start="1092:5" pos:end="1092:16"><name pos:start="1092:5" pos:end="1092:14">audio_init</name><argument_list pos:start="1092:15" pos:end="1092:16">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1093:5" pos:end="1197:13"><if pos:start="1093:5" pos:end="1197:13">if <condition pos:start="1093:8" pos:end="1093:22">(<expr pos:start="1093:9" pos:end="1093:21"><call pos:start="1093:9" pos:end="1093:21"><name pos:start="1093:9" pos:end="1093:19">hax_enabled</name><argument_list pos:start="1093:20" pos:end="1093:21">()</argument_list></call></expr>)</condition> <block pos:start="1093:24" pos:end="1197:13">{<block_content pos:start="1094:9" pos:end="1197:13">
        <expr_stmt pos:start="1094:9" pos:end="1094:25"><expr pos:start="1094:9" pos:end="1094:24"><call pos:start="1094:9" pos:end="1094:24"><name pos:start="1094:9" pos:end="1094:22">hax_sync_vcpus</name><argument_list pos:start="1094:23" pos:end="1094:24">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1095:5" pos:end="1197:13"><if pos:start="1095:5" pos:end="1197:13">if <condition pos:start="1095:8" pos:end="1096:66">(<expr pos:start="1095:9" pos:end="1096:65"><call pos:start="1095:9" pos:end="1096:60"><name pos:start="1095:9" pos:end="1095:25">qemu_opts_foreach</name><argument_list pos:start="1095:26" pos:end="1096:60">(<argument pos:start="1095:27" pos:end="1095:50"><expr pos:start="1095:27" pos:end="1095:50"><call pos:start="1095:27" pos:end="1095:50"><name pos:start="1095:27" pos:end="1095:40">qemu_find_opts</name><argument_list pos:start="1095:41" pos:end="1095:50">(<argument pos:start="1095:42" pos:end="1095:49"><expr pos:start="1095:42" pos:end="1095:49"><literal type="string" pos:start="1095:42" pos:end="1095:49">"fw_cfg"</literal></expr></argument>)</argument_list></call></expr></argument>,
                          <argument pos:start="1096:27" pos:end="1096:38"><expr pos:start="1096:27" pos:end="1096:38"><name pos:start="1096:27" pos:end="1096:38">parse_fw_cfg</name></expr></argument>, <argument pos:start="1096:41" pos:end="1096:53"><expr pos:start="1096:41" pos:end="1096:53"><call pos:start="1096:41" pos:end="1096:53"><name pos:start="1096:41" pos:end="1096:51">fw_cfg_find</name><argument_list pos:start="1096:52" pos:end="1096:53">()</argument_list></call></expr></argument>, <argument pos:start="1096:56" pos:end="1096:59"><expr pos:start="1096:56" pos:end="1096:59"><name pos:start="1096:56" pos:end="1096:59">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="1096:62" pos:end="1096:63">!=</operator> <literal type="number" pos:start="1096:65" pos:end="1096:65">0</literal></expr>)</condition> <block pos:start="1096:68" pos:end="1197:13">{<block_content pos:start="1098:5" pos:end="1197:13">
    <comment type="block" pos:start="1097:5" pos:end="1097:26">/* init USB devices */</comment>
    <if_stmt pos:start="1098:5" pos:end="1197:13"><if pos:start="1098:5" pos:end="1197:13">if <condition pos:start="1098:8" pos:end="1098:37">(<expr pos:start="1098:9" pos:end="1098:36"><call pos:start="1098:9" pos:end="1098:36"><name pos:start="1098:9" pos:end="1098:19">machine_usb</name><argument_list pos:start="1098:20" pos:end="1098:36">(<argument pos:start="1098:21" pos:end="1098:35"><expr pos:start="1098:21" pos:end="1098:35"><name pos:start="1098:21" pos:end="1098:35">current_machine</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1098:39" pos:end="1197:13">{<block_content pos:start="1099:9" pos:end="1197:13">
        <if_stmt pos:start="1099:9" pos:end="1101:23"><if pos:start="1099:9" pos:end="1101:23">if <condition pos:start="1099:12" pos:end="1099:58">(<expr pos:start="1099:13" pos:end="1099:57"><call pos:start="1099:13" pos:end="1099:53"><name pos:start="1099:13" pos:end="1099:33">foreach_device_config</name><argument_list pos:start="1099:34" pos:end="1099:53">(<argument pos:start="1099:35" pos:end="1099:41"><expr pos:start="1099:35" pos:end="1099:41"><name pos:start="1099:35" pos:end="1099:41">DEV_USB</name></expr></argument>, <argument pos:start="1099:44" pos:end="1099:52"><expr pos:start="1099:44" pos:end="1099:52"><name pos:start="1099:44" pos:end="1099:52">usb_parse</name></expr></argument>)</argument_list></call> <operator pos:start="1099:55" pos:end="1099:55">&lt;</operator> <literal type="number" pos:start="1099:57" pos:end="1099:57">0</literal></expr>)</condition><block type="pseudo" pos:start="1101:5" pos:end="1101:23"><block_content pos:start="1101:5" pos:end="1101:23">
    <comment type="block" pos:start="1100:5" pos:end="1100:39">/* Check if IGD GFX passthrough. */</comment>
    <expr_stmt pos:start="1101:5" pos:end="1101:23"><expr pos:start="1101:5" pos:end="1101:22"><call pos:start="1101:5" pos:end="1101:22"><name pos:start="1101:5" pos:end="1101:20">igd_gfx_passthru</name><argument_list pos:start="1101:21" pos:end="1101:22">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block" pos:start="1102:5" pos:end="1102:30">/* init generic devices */</comment>
    <expr_stmt pos:start="1103:5" pos:end="1103:57"><expr pos:start="1103:5" pos:end="1103:56"><call pos:start="1103:5" pos:end="1103:56"><name pos:start="1103:5" pos:end="1103:26">rom_set_order_override</name><argument_list pos:start="1103:27" pos:end="1103:56">(<argument pos:start="1103:28" pos:end="1103:55"><expr pos:start="1103:28" pos:end="1103:55"><name pos:start="1103:28" pos:end="1103:55">FW_CFG_ORDER_OVERRIDE_DEVICE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1104:5" pos:end="1197:13"><if pos:start="1104:5" pos:end="1197:13">if <condition pos:start="1104:8" pos:end="1105:56">(<expr pos:start="1104:9" pos:end="1105:55"><call pos:start="1104:9" pos:end="1105:55"><name pos:start="1104:9" pos:end="1104:25">qemu_opts_foreach</name><argument_list pos:start="1104:26" pos:end="1105:55">(<argument pos:start="1104:27" pos:end="1104:50"><expr pos:start="1104:27" pos:end="1104:50"><call pos:start="1104:27" pos:end="1104:50"><name pos:start="1104:27" pos:end="1104:40">qemu_find_opts</name><argument_list pos:start="1104:41" pos:end="1104:50">(<argument pos:start="1104:42" pos:end="1104:49"><expr pos:start="1104:42" pos:end="1104:49"><literal type="string" pos:start="1104:42" pos:end="1104:49">"device"</literal></expr></argument>)</argument_list></call></expr></argument>,
                          <argument pos:start="1105:27" pos:end="1105:42"><expr pos:start="1105:27" pos:end="1105:42"><name pos:start="1105:27" pos:end="1105:42">device_init_func</name></expr></argument>, <argument pos:start="1105:45" pos:end="1105:48"><expr pos:start="1105:45" pos:end="1105:48"><name pos:start="1105:45" pos:end="1105:48">NULL</name></expr></argument>, <argument pos:start="1105:51" pos:end="1105:54"><expr pos:start="1105:51" pos:end="1105:54"><name pos:start="1105:51" pos:end="1105:54">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1105:58" pos:end="1197:13">{<block_content pos:start="1106:5" pos:end="1197:13">
    <expr_stmt pos:start="1106:5" pos:end="1106:36"><expr pos:start="1106:5" pos:end="1106:35"><call pos:start="1106:5" pos:end="1106:35"><name pos:start="1106:5" pos:end="1106:33">cpu_synchronize_all_post_init</name><argument_list pos:start="1106:34" pos:end="1106:35">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1107:5" pos:end="1107:29"><expr pos:start="1107:5" pos:end="1107:28"><call pos:start="1107:5" pos:end="1107:28"><name pos:start="1107:5" pos:end="1107:26">numa_post_machine_init</name><argument_list pos:start="1107:27" pos:end="1107:28">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1108:5" pos:end="1108:31"><expr pos:start="1108:5" pos:end="1108:30"><call pos:start="1108:5" pos:end="1108:30"><name pos:start="1108:5" pos:end="1108:28">rom_reset_order_override</name><argument_list pos:start="1108:29" pos:end="1108:30">()</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="1109:5" pos:end="1115:7">/*
     * Create frontends for -drive if=scsi leftovers.
     * Normally, frontends for -drive get created by machine
     * initialization for onboard SCSI HBAs.  However, we create a few
     * more ever since SCSI qdevification, but this is pretty much an
     * implementation accident, and deprecated.
     */</comment>
    <expr_stmt pos:start="1116:5" pos:end="1116:33"><expr pos:start="1116:5" pos:end="1116:32"><call pos:start="1116:5" pos:end="1116:32"><name pos:start="1116:5" pos:end="1116:30">scsi_legacy_handle_cmdline</name><argument_list pos:start="1116:31" pos:end="1116:32">()</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="1117:5" pos:end="1117:73">/* Did we create any drives that we failed to create a device for? */</comment>
    <expr_stmt pos:start="1118:5" pos:end="1118:27"><expr pos:start="1118:5" pos:end="1118:26"><call pos:start="1118:5" pos:end="1118:26"><name pos:start="1118:5" pos:end="1118:24">drive_check_orphaned</name><argument_list pos:start="1118:25" pos:end="1118:26">()</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="1119:5" pos:end="1126:7">/* Don't warn about the default network setup that you get if
     * no command line -net or -netdev options are specified. There
     * are two cases that we would otherwise complain about:
     * (1) board doesn't support a NIC but the implicit "-net nic"
     * requested one
     * (2) CONFIG_SLIRP not set, in which case the implicit "-net nic"
     * sets up a nic that isn't connected to anything.
     */</comment>
    <if_stmt pos:start="1127:5" pos:end="1197:13"><if pos:start="1127:5" pos:end="1197:13">if <condition pos:start="1127:8" pos:end="1127:21">(<expr pos:start="1127:9" pos:end="1127:20"><operator pos:start="1127:9" pos:end="1127:9">!</operator><name pos:start="1127:10" pos:end="1127:20">default_net</name></expr>)</condition> <block pos:start="1127:23" pos:end="1197:13">{<block_content pos:start="1128:9" pos:end="1197:13">
        <expr_stmt pos:start="1128:9" pos:end="1128:28"><expr pos:start="1128:9" pos:end="1128:27"><call pos:start="1128:9" pos:end="1128:27"><name pos:start="1128:9" pos:end="1128:25">net_check_clients</name><argument_list pos:start="1128:26" pos:end="1128:27">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1129:5" pos:end="1197:13"><if pos:start="1129:5" pos:end="1197:13">if <condition pos:start="1129:8" pos:end="1129:18">(<expr pos:start="1129:9" pos:end="1129:17"><name pos:start="1129:9" pos:end="1129:17">boot_once</name></expr>)</condition> <block pos:start="1129:20" pos:end="1197:13">{<block_content pos:start="1130:9" pos:end="1197:13">
        <expr_stmt pos:start="1130:9" pos:end="1130:47"><expr pos:start="1130:9" pos:end="1130:46"><call pos:start="1130:9" pos:end="1130:46"><name pos:start="1130:9" pos:end="1130:21">qemu_boot_set</name><argument_list pos:start="1130:22" pos:end="1130:46">(<argument pos:start="1130:23" pos:end="1130:31"><expr pos:start="1130:23" pos:end="1130:31"><name pos:start="1130:23" pos:end="1130:31">boot_once</name></expr></argument>, <argument pos:start="1130:34" pos:end="1130:45"><expr pos:start="1130:34" pos:end="1130:45"><operator pos:start="1130:34" pos:end="1130:34">&amp;</operator><name pos:start="1130:35" pos:end="1130:45">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="1131:9" pos:end="1131:70"><expr pos:start="1131:9" pos:end="1131:69"><call pos:start="1131:9" pos:end="1131:69"><name pos:start="1131:9" pos:end="1131:27">qemu_register_reset</name><argument_list pos:start="1131:28" pos:end="1131:69">(<argument pos:start="1131:29" pos:end="1131:46"><expr pos:start="1131:29" pos:end="1131:46"><name pos:start="1131:29" pos:end="1131:46">restore_boot_order</name></expr></argument>, <argument pos:start="1131:49" pos:end="1131:68"><expr pos:start="1131:49" pos:end="1131:68"><call pos:start="1131:49" pos:end="1131:68"><name pos:start="1131:49" pos:end="1131:56">g_strdup</name><argument_list pos:start="1131:57" pos:end="1131:68">(<argument pos:start="1131:58" pos:end="1131:67"><expr pos:start="1131:58" pos:end="1131:67"><name pos:start="1131:58" pos:end="1131:67">boot_order</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1132:5" pos:end="1132:29"><expr pos:start="1132:5" pos:end="1132:28"><name pos:start="1132:5" pos:end="1132:6">ds</name> <operator pos:start="1132:8" pos:end="1132:8">=</operator> <call pos:start="1132:10" pos:end="1132:28"><name pos:start="1132:10" pos:end="1132:26">init_displaystate</name><argument_list pos:start="1132:27" pos:end="1132:28">()</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="1133:5" pos:end="1133:29">/* init local displays */</comment>
    <switch pos:start="1134:5" pos:end="1197:13">switch <condition pos:start="1134:12" pos:end="1134:25">(<expr pos:start="1134:13" pos:end="1134:24"><name pos:start="1134:13" pos:end="1134:24">display_type</name></expr>)</condition> <block pos:start="1134:27" pos:end="1197:13">{<block_content pos:start="1135:5" pos:end="1197:13">
    <case pos:start="1135:5" pos:end="1135:19">case <expr pos:start="1135:10" pos:end="1135:18"><name pos:start="1135:10" pos:end="1135:18">DT_CURSES</name></expr>:</case>
        <expr_stmt pos:start="1136:9" pos:end="1136:45"><expr pos:start="1136:9" pos:end="1136:44"><call pos:start="1136:9" pos:end="1136:44"><name pos:start="1136:9" pos:end="1136:27">curses_display_init</name><argument_list pos:start="1136:28" pos:end="1136:44">(<argument pos:start="1136:29" pos:end="1136:30"><expr pos:start="1136:29" pos:end="1136:30"><name pos:start="1136:29" pos:end="1136:30">ds</name></expr></argument>, <argument pos:start="1136:33" pos:end="1136:43"><expr pos:start="1136:33" pos:end="1136:43"><name pos:start="1136:33" pos:end="1136:43">full_screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="1137:5" pos:end="1137:16">case <expr pos:start="1137:10" pos:end="1137:15"><name pos:start="1137:10" pos:end="1137:15">DT_SDL</name></expr>:</case>
        <expr_stmt pos:start="1138:9" pos:end="1138:52"><expr pos:start="1138:9" pos:end="1138:51"><call pos:start="1138:9" pos:end="1138:51"><name pos:start="1138:9" pos:end="1138:24">sdl_display_init</name><argument_list pos:start="1138:25" pos:end="1138:51">(<argument pos:start="1138:26" pos:end="1138:27"><expr pos:start="1138:26" pos:end="1138:27"><name pos:start="1138:26" pos:end="1138:27">ds</name></expr></argument>, <argument pos:start="1138:30" pos:end="1138:40"><expr pos:start="1138:30" pos:end="1138:40"><name pos:start="1138:30" pos:end="1138:40">full_screen</name></expr></argument>, <argument pos:start="1138:43" pos:end="1138:50"><expr pos:start="1138:43" pos:end="1138:50"><name pos:start="1138:43" pos:end="1138:50">no_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="1139:5" pos:end="1139:18">case <expr pos:start="1139:10" pos:end="1139:17"><name pos:start="1139:10" pos:end="1139:17">DT_COCOA</name></expr>:</case>
        <expr_stmt pos:start="1140:9" pos:end="1140:44"><expr pos:start="1140:9" pos:end="1140:43"><call pos:start="1140:9" pos:end="1140:43"><name pos:start="1140:9" pos:end="1140:26">cocoa_display_init</name><argument_list pos:start="1140:27" pos:end="1140:43">(<argument pos:start="1140:28" pos:end="1140:29"><expr pos:start="1140:28" pos:end="1140:29"><name pos:start="1140:28" pos:end="1140:29">ds</name></expr></argument>, <argument pos:start="1140:32" pos:end="1140:42"><expr pos:start="1140:32" pos:end="1140:42"><name pos:start="1140:32" pos:end="1140:42">full_screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case pos:start="1141:5" pos:end="1141:16">case <expr pos:start="1141:10" pos:end="1141:15"><name pos:start="1141:10" pos:end="1141:15">DT_GTK</name></expr>:</case>
        <expr_stmt pos:start="1142:9" pos:end="1142:57"><expr pos:start="1142:9" pos:end="1142:56"><call pos:start="1142:9" pos:end="1142:56"><name pos:start="1142:9" pos:end="1142:24">gtk_display_init</name><argument_list pos:start="1142:25" pos:end="1142:56">(<argument pos:start="1142:26" pos:end="1142:27"><expr pos:start="1142:26" pos:end="1142:27"><name pos:start="1142:26" pos:end="1142:27">ds</name></expr></argument>, <argument pos:start="1142:30" pos:end="1142:40"><expr pos:start="1142:30" pos:end="1142:40"><name pos:start="1142:30" pos:end="1142:40">full_screen</name></expr></argument>, <argument pos:start="1142:43" pos:end="1142:55"><expr pos:start="1142:43" pos:end="1142:55"><name pos:start="1142:43" pos:end="1142:55">grab_on_hover</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <default pos:start="1143:5" pos:end="1143:12">default:</default>
    <comment type="block" pos:start="1144:5" pos:end="1144:74">/* must be after terminal init, SDL library changes signal handlers */</comment>
    <expr_stmt pos:start="1145:5" pos:end="1148:0"><expr pos:start="1145:5" pos:end="1145:30"><call pos:start="1145:5" pos:end="1145:30"><name pos:start="1145:5" pos:end="1145:28">os_setup_signal_handling</name><argument_list pos:start="1145:29" pos:end="1145:30">()</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="1146:5" pos:end="1146:30">/* init remote displays */</comment>
<cpp:ifdef pos:start="1147:1" pos:end="1147:17">#<cpp:directive pos:start="1147:2" pos:end="1147:6">ifdef</cpp:directive> <name pos:start="1147:8" pos:end="1147:17">CONFIG_VNC</name></cpp:ifdef>
    <expr_stmt pos:start="1148:5" pos:end="1151:0"><expr pos:start="1148:5" pos:end="1149:48"><call pos:start="1148:5" pos:end="1149:48"><name pos:start="1148:5" pos:end="1148:21">qemu_opts_foreach</name><argument_list pos:start="1148:22" pos:end="1149:48">(<argument pos:start="1148:23" pos:end="1148:43"><expr pos:start="1148:23" pos:end="1148:43"><call pos:start="1148:23" pos:end="1148:43"><name pos:start="1148:23" pos:end="1148:36">qemu_find_opts</name><argument_list pos:start="1148:37" pos:end="1148:43">(<argument pos:start="1148:38" pos:end="1148:42"><expr pos:start="1148:38" pos:end="1148:42"><literal type="string" pos:start="1148:38" pos:end="1148:42">"vnc"</literal></expr></argument>)</argument_list></call></expr></argument>,
                      <argument pos:start="1149:23" pos:end="1149:35"><expr pos:start="1149:23" pos:end="1149:35"><name pos:start="1149:23" pos:end="1149:35">vnc_init_func</name></expr></argument>, <argument pos:start="1149:38" pos:end="1149:41"><expr pos:start="1149:38" pos:end="1149:41"><name pos:start="1149:38" pos:end="1149:41">NULL</name></expr></argument>, <argument pos:start="1149:44" pos:end="1149:47"><expr pos:start="1149:44" pos:end="1149:47"><name pos:start="1149:44" pos:end="1149:47">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="1150:1" pos:end="1150:6">#<cpp:directive pos:start="1150:2" pos:end="1150:6">endif</cpp:directive></cpp:endif>
    <if_stmt pos:start="1151:5" pos:end="1197:13"><if pos:start="1151:5" pos:end="1197:13">if <condition pos:start="1151:8" pos:end="1151:20">(<expr pos:start="1151:9" pos:end="1151:19"><name pos:start="1151:9" pos:end="1151:19">using_spice</name></expr>)</condition> <block pos:start="1151:22" pos:end="1197:13">{<block_content pos:start="1152:9" pos:end="1197:13">
        <expr_stmt pos:start="1152:9" pos:end="1152:34"><expr pos:start="1152:9" pos:end="1152:33"><call pos:start="1152:9" pos:end="1152:33"><name pos:start="1152:9" pos:end="1152:31">qemu_spice_display_init</name><argument_list pos:start="1152:32" pos:end="1152:33">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1153:5" pos:end="1197:13"><if pos:start="1153:5" pos:end="1197:13">if <condition pos:start="1153:8" pos:end="1153:60">(<expr pos:start="1153:9" pos:end="1153:59"><call pos:start="1153:9" pos:end="1153:55"><name pos:start="1153:9" pos:end="1153:29">foreach_device_config</name><argument_list pos:start="1153:30" pos:end="1153:55">(<argument pos:start="1153:31" pos:end="1153:37"><expr pos:start="1153:31" pos:end="1153:37"><name pos:start="1153:31" pos:end="1153:37">DEV_GDB</name></expr></argument>, <argument pos:start="1153:40" pos:end="1153:54"><expr pos:start="1153:40" pos:end="1153:54"><name pos:start="1153:40" pos:end="1153:54">gdbserver_start</name></expr></argument>)</argument_list></call> <operator pos:start="1153:57" pos:end="1153:57">&lt;</operator> <literal type="number" pos:start="1153:59" pos:end="1153:59">0</literal></expr>)</condition> <block pos:start="1153:62" pos:end="1197:13">{<block_content pos:start="1154:5" pos:end="1197:13">
    <expr_stmt pos:start="1154:5" pos:end="1154:33"><expr pos:start="1154:5" pos:end="1154:32"><call pos:start="1154:5" pos:end="1154:32"><name pos:start="1154:5" pos:end="1154:30">qdev_machine_creation_done</name><argument_list pos:start="1154:31" pos:end="1154:32">()</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="1155:5" pos:end="1156:39">/* TODO: once all bus devices are qdevified, this should be done
     * when bus is created by qdev.c */</comment>
    <expr_stmt pos:start="1157:5" pos:end="1157:65"><expr pos:start="1157:5" pos:end="1157:64"><call pos:start="1157:5" pos:end="1157:64"><name pos:start="1157:5" pos:end="1157:23">qemu_register_reset</name><argument_list pos:start="1157:24" pos:end="1157:64">(<argument pos:start="1157:25" pos:end="1157:41"><expr pos:start="1157:25" pos:end="1157:41"><name pos:start="1157:25" pos:end="1157:41">qbus_reset_all_fn</name></expr></argument>, <argument pos:start="1157:44" pos:end="1157:63"><expr pos:start="1157:44" pos:end="1157:63"><call pos:start="1157:44" pos:end="1157:63"><name pos:start="1157:44" pos:end="1157:61">sysbus_get_default</name><argument_list pos:start="1157:62" pos:end="1157:63">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1158:5" pos:end="1158:43"><expr pos:start="1158:5" pos:end="1158:42"><call pos:start="1158:5" pos:end="1158:42"><name pos:start="1158:5" pos:end="1158:40">qemu_run_machine_init_done_notifiers</name><argument_list pos:start="1158:41" pos:end="1158:42">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1159:5" pos:end="1197:13"><if pos:start="1159:5" pos:end="1197:13">if <condition pos:start="1159:8" pos:end="1159:44">(<expr pos:start="1159:9" pos:end="1159:43"><call pos:start="1159:9" pos:end="1159:38"><name pos:start="1159:9" pos:end="1159:36">rom_check_and_register_reset</name><argument_list pos:start="1159:37" pos:end="1159:38">()</argument_list></call> <operator pos:start="1159:40" pos:end="1159:41">!=</operator> <literal type="number" pos:start="1159:43" pos:end="1159:43">0</literal></expr>)</condition> <block pos:start="1159:46" pos:end="1197:13">{<block_content pos:start="1160:9" pos:end="1197:13">
        <expr_stmt pos:start="1160:9" pos:end="1160:60"><expr pos:start="1160:9" pos:end="1160:59"><call pos:start="1160:9" pos:end="1160:59"><name pos:start="1160:9" pos:end="1160:20">error_report</name><argument_list pos:start="1160:21" pos:end="1160:59">(<argument pos:start="1160:22" pos:end="1160:58"><expr pos:start="1160:22" pos:end="1160:58"><literal type="string" pos:start="1160:22" pos:end="1160:58">"rom check and register reset failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1161:5" pos:end="1161:19"><expr pos:start="1161:5" pos:end="1161:18"><call pos:start="1161:5" pos:end="1161:18"><name pos:start="1161:5" pos:end="1161:16">replay_start</name><argument_list pos:start="1161:17" pos:end="1161:18">()</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="1162:5" pos:end="1164:36">/* This checkpoint is required by replay to separate prior clock
       reading from the other reads, because timer polling functions query
       clock values from the log. */</comment>
    <expr_stmt pos:start="1165:5" pos:end="1165:40"><expr pos:start="1165:5" pos:end="1165:39"><call pos:start="1165:5" pos:end="1165:39"><name pos:start="1165:5" pos:end="1165:21">replay_checkpoint</name><argument_list pos:start="1165:22" pos:end="1165:39">(<argument pos:start="1165:23" pos:end="1165:38"><expr pos:start="1165:23" pos:end="1165:38"><name pos:start="1165:23" pos:end="1165:38">CHECKPOINT_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1166:5" pos:end="1166:38"><expr pos:start="1166:5" pos:end="1166:37"><call pos:start="1166:5" pos:end="1166:37"><name pos:start="1166:5" pos:end="1166:21">qemu_system_reset</name><argument_list pos:start="1166:22" pos:end="1166:37">(<argument pos:start="1166:23" pos:end="1166:36"><expr pos:start="1166:23" pos:end="1166:36"><name pos:start="1166:23" pos:end="1166:36">VMRESET_SILENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1167:5" pos:end="1167:28"><expr pos:start="1167:5" pos:end="1167:27"><call pos:start="1167:5" pos:end="1167:27"><name pos:start="1167:5" pos:end="1167:25">register_global_state</name><argument_list pos:start="1167:26" pos:end="1167:27">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1168:5" pos:end="1197:13"><if pos:start="1168:5" pos:end="1170:5">if <condition pos:start="1168:8" pos:end="1168:40">(<expr pos:start="1168:9" pos:end="1168:39"><name pos:start="1168:9" pos:end="1168:19">replay_mode</name> <operator pos:start="1168:21" pos:end="1168:22">!=</operator> <name pos:start="1168:24" pos:end="1168:39">REPLAY_MODE_NONE</name></expr>)</condition> <block pos:start="1168:42" pos:end="1170:5">{<block_content pos:start="1169:9" pos:end="1169:30">
        <expr_stmt pos:start="1169:9" pos:end="1169:30"><expr pos:start="1169:9" pos:end="1169:29"><call pos:start="1169:9" pos:end="1169:29"><name pos:start="1169:9" pos:end="1169:27">replay_vmstate_init</name><argument_list pos:start="1169:28" pos:end="1169:29">()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="1170:7" pos:end="1197:13">else if <condition pos:start="1170:15" pos:end="1170:22">(<expr pos:start="1170:16" pos:end="1170:21"><name pos:start="1170:16" pos:end="1170:21">loadvm</name></expr>)</condition> <block pos:start="1170:24" pos:end="1197:13">{<block_content pos:start="1171:9" pos:end="1197:13">
        <if_stmt pos:start="1171:9" pos:end="1197:13"><if pos:start="1171:9" pos:end="1197:13">if <condition pos:start="1171:12" pos:end="1171:37">(<expr pos:start="1171:13" pos:end="1171:36"><call pos:start="1171:13" pos:end="1171:32"><name pos:start="1171:13" pos:end="1171:24">load_vmstate</name><argument_list pos:start="1171:25" pos:end="1171:32">(<argument pos:start="1171:26" pos:end="1171:31"><expr pos:start="1171:26" pos:end="1171:31"><name pos:start="1171:26" pos:end="1171:31">loadvm</name></expr></argument>)</argument_list></call> <operator pos:start="1171:34" pos:end="1171:34">&lt;</operator> <literal type="number" pos:start="1171:36" pos:end="1171:36">0</literal></expr>)</condition> <block pos:start="1171:39" pos:end="1197:13">{<block_content pos:start="1172:13" pos:end="1197:13">
            <expr_stmt pos:start="1172:13" pos:end="1172:26"><expr pos:start="1172:13" pos:end="1172:25"><name pos:start="1172:13" pos:end="1172:21">autostart</name> <operator pos:start="1172:23" pos:end="1172:23">=</operator> <literal type="number" pos:start="1172:25" pos:end="1172:25">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="1173:5" pos:end="1173:30"><expr pos:start="1173:5" pos:end="1173:29"><call pos:start="1173:5" pos:end="1173:29"><name pos:start="1173:5" pos:end="1173:27">qdev_prop_check_globals</name><argument_list pos:start="1173:28" pos:end="1173:29">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="1174:5" pos:end="1197:13"><if pos:start="1174:5" pos:end="1197:13">if <condition pos:start="1174:8" pos:end="1174:26">(<expr pos:start="1174:9" pos:end="1174:25"><name pos:start="1174:9" pos:end="1174:25">vmstate_dump_file</name></expr>)</condition> <block pos:start="1174:28" pos:end="1197:13">{<block_content pos:start="1176:9" pos:end="1197:13">
        <comment type="block" pos:start="1175:9" pos:end="1175:27">/* dump and exit */</comment>
        <expr_stmt pos:start="1176:9" pos:end="1176:53"><expr pos:start="1176:9" pos:end="1176:52"><call pos:start="1176:9" pos:end="1176:52"><name pos:start="1176:9" pos:end="1176:33">dump_vmstate_json_to_file</name><argument_list pos:start="1176:34" pos:end="1176:52">(<argument pos:start="1176:35" pos:end="1176:51"><expr pos:start="1176:35" pos:end="1176:51"><name pos:start="1176:35" pos:end="1176:51">vmstate_dump_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="1177:9" pos:end="1177:17">return <expr pos:start="1177:16" pos:end="1177:16"><literal type="number" pos:start="1177:16" pos:end="1177:16">0</literal></expr>;</return>
    <if_stmt pos:start="1178:5" pos:end="1197:13"><if pos:start="1178:5" pos:end="1197:13">if <condition pos:start="1178:8" pos:end="1178:17">(<expr pos:start="1178:9" pos:end="1178:16"><name pos:start="1178:9" pos:end="1178:16">incoming</name></expr>)</condition> <block pos:start="1178:19" pos:end="1197:13">{<block_content pos:start="1179:9" pos:end="1197:13">
        <decl_stmt pos:start="1179:9" pos:end="1179:32"><decl pos:start="1179:9" pos:end="1179:31"><type pos:start="1179:9" pos:end="1179:15"><name pos:start="1179:9" pos:end="1179:13">Error</name> <modifier pos:start="1179:15" pos:end="1179:15">*</modifier></type><name pos:start="1179:16" pos:end="1179:24">local_err</name> <init pos:start="1179:26" pos:end="1179:31">= <expr pos:start="1179:28" pos:end="1179:31"><name pos:start="1179:28" pos:end="1179:31">NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="1180:9" pos:end="1180:60"><expr pos:start="1180:9" pos:end="1180:59"><call pos:start="1180:9" pos:end="1180:59"><name pos:start="1180:9" pos:end="1180:37">qemu_start_incoming_migration</name><argument_list pos:start="1180:38" pos:end="1180:59">(<argument pos:start="1180:39" pos:end="1180:46"><expr pos:start="1180:39" pos:end="1180:46"><name pos:start="1180:39" pos:end="1180:46">incoming</name></expr></argument>, <argument pos:start="1180:49" pos:end="1180:58"><expr pos:start="1180:49" pos:end="1180:58"><operator pos:start="1180:49" pos:end="1180:49">&amp;</operator><name pos:start="1180:50" pos:end="1180:58">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="1181:9" pos:end="1197:13"><if pos:start="1181:9" pos:end="1183:5">if <condition pos:start="1181:12" pos:end="1181:22">(<expr pos:start="1181:13" pos:end="1181:21"><name pos:start="1181:13" pos:end="1181:21">local_err</name></expr>)</condition> <block pos:start="1181:24" pos:end="1183:5">{<block_content pos:start="1182:13" pos:end="1182:69">
            <expr_stmt pos:start="1182:13" pos:end="1182:69"><expr pos:start="1182:13" pos:end="1182:68"><call pos:start="1182:13" pos:end="1182:68"><name pos:start="1182:13" pos:end="1182:29">error_reportf_err</name><argument_list pos:start="1182:30" pos:end="1182:68">(<argument pos:start="1182:31" pos:end="1182:39"><expr pos:start="1182:31" pos:end="1182:39"><name pos:start="1182:31" pos:end="1182:39">local_err</name></expr></argument>, <argument pos:start="1182:42" pos:end="1182:57"><expr pos:start="1182:42" pos:end="1182:57"><literal type="string" pos:start="1182:42" pos:end="1182:57">"-incoming %s: "</literal></expr></argument>, <argument pos:start="1182:60" pos:end="1182:67"><expr pos:start="1182:60" pos:end="1182:67"><name pos:start="1182:60" pos:end="1182:67">incoming</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="1183:7" pos:end="1197:13">else if <condition pos:start="1183:15" pos:end="1183:25">(<expr pos:start="1183:16" pos:end="1183:24"><name pos:start="1183:16" pos:end="1183:24">autostart</name></expr>)</condition> <block pos:start="1183:27" pos:end="1197:13">{<block_content pos:start="1184:9" pos:end="1197:13">
        <expr_stmt pos:start="1184:9" pos:end="1184:19"><expr pos:start="1184:9" pos:end="1184:18"><call pos:start="1184:9" pos:end="1184:18"><name pos:start="1184:9" pos:end="1184:16">vm_start</name><argument_list pos:start="1184:17" pos:end="1184:18">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1185:5" pos:end="1185:20"><expr pos:start="1185:5" pos:end="1185:19"><call pos:start="1185:5" pos:end="1185:19"><name pos:start="1185:5" pos:end="1185:17">os_setup_post</name><argument_list pos:start="1185:18" pos:end="1185:19">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1186:5" pos:end="1186:16"><expr pos:start="1186:5" pos:end="1186:15"><call pos:start="1186:5" pos:end="1186:15"><name pos:start="1186:5" pos:end="1186:13">main_loop</name><argument_list pos:start="1186:14" pos:end="1186:15">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1187:5" pos:end="1187:28"><expr pos:start="1187:5" pos:end="1187:27"><call pos:start="1187:5" pos:end="1187:27"><name pos:start="1187:5" pos:end="1187:25">replay_disable_events</name><argument_list pos:start="1187:26" pos:end="1187:27">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1188:5" pos:end="1188:24"><expr pos:start="1188:5" pos:end="1188:23"><call pos:start="1188:5" pos:end="1188:23"><name pos:start="1188:5" pos:end="1188:21">iothread_stop_all</name><argument_list pos:start="1188:22" pos:end="1188:23">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1189:5" pos:end="1189:21"><expr pos:start="1189:5" pos:end="1189:20"><call pos:start="1189:5" pos:end="1189:20"><name pos:start="1189:5" pos:end="1189:18">bdrv_close_all</name><argument_list pos:start="1189:19" pos:end="1189:20">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1190:5" pos:end="1190:22"><expr pos:start="1190:5" pos:end="1190:21"><call pos:start="1190:5" pos:end="1190:21"><name pos:start="1190:5" pos:end="1190:19">pause_all_vcpus</name><argument_list pos:start="1190:20" pos:end="1190:21">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1191:5" pos:end="1191:15"><expr pos:start="1191:5" pos:end="1191:14"><call pos:start="1191:5" pos:end="1191:14"><name pos:start="1191:5" pos:end="1191:12">res_free</name><argument_list pos:start="1191:13" pos:end="1191:14">()</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="1192:5" pos:end="1192:57">/* vhost-user must be cleaned up before chardevs.  */</comment>
    <expr_stmt pos:start="1193:5" pos:end="1193:18"><expr pos:start="1193:5" pos:end="1193:17"><call pos:start="1193:5" pos:end="1193:17"><name pos:start="1193:5" pos:end="1193:15">net_cleanup</name><argument_list pos:start="1193:16" pos:end="1193:17">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1194:5" pos:end="1194:20"><expr pos:start="1194:5" pos:end="1194:19"><call pos:start="1194:5" pos:end="1194:19"><name pos:start="1194:5" pos:end="1194:17">audio_cleanup</name><argument_list pos:start="1194:18" pos:end="1194:19">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1195:5" pos:end="1195:22"><expr pos:start="1195:5" pos:end="1195:21"><call pos:start="1195:5" pos:end="1195:21"><name pos:start="1195:5" pos:end="1195:19">monitor_cleanup</name><argument_list pos:start="1195:20" pos:end="1195:21">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="1196:5" pos:end="1196:23"><expr pos:start="1196:5" pos:end="1196:22"><call pos:start="1196:5" pos:end="1196:22"><name pos:start="1196:5" pos:end="1196:20">qemu_chr_cleanup</name><argument_list pos:start="1196:21" pos:end="1196:22">()</argument_list></call></expr>;</expr_stmt>
    <return pos:start="1197:5" pos:end="1197:13">return <expr pos:start="1197:12" pos:end="1197:12"><literal type="number" pos:start="1197:12" pos:end="1197:12">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></while></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></else></if_stmt></block_content></block></while></block_content></block></if></if_stmt></unit>
