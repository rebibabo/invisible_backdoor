<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24751.c" pos:tabs="8"><function pos:start="1:1" pos:end="25:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">check_breakpoint</name><parameter_list pos:start="1:29" pos:end="1:61">(<parameter pos:start="1:30" pos:end="1:42"><decl pos:start="1:30" pos:end="1:42"><type pos:start="1:30" pos:end="1:42"><name pos:start="1:30" pos:end="1:37">CPUState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">env</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:60"><decl pos:start="1:45" pos:end="1:60"><type pos:start="1:45" pos:end="1:60"><name pos:start="1:45" pos:end="1:56">DisasContext</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:60">dc</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="25:1">{<block_content pos:start="5:5" pos:end="23:5">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">CPUBreakpoint</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:21">bp</name></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="23:5"><if pos:start="9:5" pos:end="23:5">if <condition pos:start="9:8" pos:end="9:50">(<expr pos:start="9:9" pos:end="9:49"><call pos:start="9:9" pos:end="9:49"><name pos:start="9:9" pos:end="9:16">unlikely</name><argument_list pos:start="9:17" pos:end="9:49">(<argument pos:start="9:18" pos:end="9:48"><expr pos:start="9:18" pos:end="9:48"><operator pos:start="9:18" pos:end="9:18">!</operator><call pos:start="9:19" pos:end="9:48"><name pos:start="9:19" pos:end="9:29">TAILQ_EMPTY</name><argument_list pos:start="9:30" pos:end="9:48">(<argument pos:start="9:31" pos:end="9:47"><expr pos:start="9:31" pos:end="9:47"><operator pos:start="9:31" pos:end="9:31">&amp;</operator><name pos:start="9:32" pos:end="9:47"><name pos:start="9:32" pos:end="9:34">env</name><operator pos:start="9:35" pos:end="9:36">-&gt;</operator><name pos:start="9:37" pos:end="9:47">breakpoints</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="9:52" pos:end="23:5">{<block_content pos:start="11:9" pos:end="21:9">

        <macro pos:start="11:9" pos:end="11:51"><name pos:start="11:9" pos:end="11:21">TAILQ_FOREACH</name><argument_list pos:start="11:22" pos:end="11:51">(<argument pos:start="11:23" pos:end="11:24">bp</argument>, <argument pos:start="11:27" pos:end="11:43">&amp;env-&gt;breakpoints</argument>, <argument pos:start="11:46" pos:end="11:50">entry</argument>)</argument_list></macro> <block pos:start="11:53" pos:end="21:9">{<block_content pos:start="13:13" pos:end="19:14">

            <if_stmt pos:start="13:13" pos:end="19:14"><if pos:start="13:13" pos:end="19:14">if <condition pos:start="13:16" pos:end="13:33">(<expr pos:start="13:17" pos:end="13:32"><name pos:start="13:17" pos:end="13:22"><name pos:start="13:17" pos:end="13:18">bp</name><operator pos:start="13:19" pos:end="13:20">-&gt;</operator><name pos:start="13:21" pos:end="13:22">pc</name></name> <operator pos:start="13:24" pos:end="13:25">==</operator> <name pos:start="13:27" pos:end="13:32"><name pos:start="13:27" pos:end="13:28">dc</name><operator pos:start="13:29" pos:end="13:30">-&gt;</operator><name pos:start="13:31" pos:end="13:32">pc</name></name></expr>)</condition> <block pos:start="13:35" pos:end="19:14">{<block_content pos:start="15:17" pos:end="17:42">

                <expr_stmt pos:start="15:17" pos:end="15:54"><expr pos:start="15:17" pos:end="15:53"><call pos:start="15:17" pos:end="15:53"><name pos:start="15:17" pos:end="15:37">t_gen_raise_exception</name><argument_list pos:start="15:38" pos:end="15:53">(<argument pos:start="15:39" pos:end="15:40"><expr pos:start="15:39" pos:end="15:40"><name pos:start="15:39" pos:end="15:40">dc</name></expr></argument>, <argument pos:start="15:43" pos:end="15:52"><expr pos:start="15:43" pos:end="15:52"><name pos:start="15:43" pos:end="15:52">EXCP_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="17:17" pos:end="17:42"><expr pos:start="17:17" pos:end="17:41"><name pos:start="17:17" pos:end="17:26"><name pos:start="17:17" pos:end="17:18">dc</name><operator pos:start="17:19" pos:end="17:20">-&gt;</operator><name pos:start="17:21" pos:end="17:26">is_jmp</name></name> <operator pos:start="17:28" pos:end="17:28">=</operator> <name pos:start="17:30" pos:end="17:41">DISAS_UPDATE</name></expr>;</expr_stmt>

             </block_content>}</block></if></if_stmt>

        </block_content>}</block>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
