<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19979.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:13">hwaddr</name></type> <name pos:start="1:15" pos:end="1:36">ppc_hash64_pteg_search</name><parameter_list pos:start="1:37" pos:end="5:59">(<parameter pos:start="1:38" pos:end="1:52"><decl pos:start="1:38" pos:end="1:52"><type pos:start="1:38" pos:end="1:52"><name pos:start="1:38" pos:end="1:47">PowerPCCPU</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:52">cpu</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:65"><decl pos:start="1:55" pos:end="1:65"><type pos:start="1:55" pos:end="1:65"><name pos:start="1:55" pos:end="1:60">hwaddr</name></type> <name pos:start="1:62" pos:end="1:65">hash</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:51"><decl pos:start="3:38" pos:end="3:51"><type pos:start="3:38" pos:end="3:51"><name pos:start="3:38" pos:end="3:46">ppc_slb_t</name> <modifier pos:start="3:48" pos:end="3:48">*</modifier></type><name pos:start="3:49" pos:end="3:51">slb</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:70"><decl pos:start="3:54" pos:end="3:70"><type pos:start="3:54" pos:end="3:70"><name pos:start="3:54" pos:end="3:65">target_ulong</name></type> <name pos:start="3:67" pos:end="3:70">ptem</name></decl></parameter>,

                                     <parameter pos:start="5:38" pos:end="5:58"><decl pos:start="5:38" pos:end="5:58"><type pos:start="5:38" pos:end="5:58"><name pos:start="5:38" pos:end="5:53">ppc_hash_pte64_t</name> <modifier pos:start="5:55" pos:end="5:55">*</modifier></type><name pos:start="5:56" pos:end="5:58">pte</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="93:1">{<block_content pos:start="9:5" pos:end="91:14">

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">CPUPPCState</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:20">env</name> <init pos:start="9:22" pos:end="9:32">= <expr pos:start="9:24" pos:end="9:32"><operator pos:start="9:24" pos:end="9:24">&amp;</operator><name pos:start="9:25" pos:end="9:32"><name pos:start="9:25" pos:end="9:27">cpu</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:32">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:18">token</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:16">target_ulong</name></type> <name pos:start="15:18" pos:end="15:21">pte0</name></decl>, <decl pos:start="15:24" pos:end="15:27"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:24" pos:end="15:27">pte1</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:27"><decl pos:start="17:5" pos:end="17:26"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:16">target_ulong</name></type> <name pos:start="17:18" pos:end="17:26">pte_index</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:58"><expr pos:start="21:5" pos:end="21:57"><name pos:start="21:5" pos:end="21:13">pte_index</name> <operator pos:start="21:15" pos:end="21:15">=</operator> <operator pos:start="21:17" pos:end="21:17">(</operator><name pos:start="21:18" pos:end="21:21">hash</name> <operator pos:start="21:23" pos:end="21:23">&amp;</operator> <name pos:start="21:25" pos:end="21:38"><name pos:start="21:25" pos:end="21:27">env</name><operator pos:start="21:28" pos:end="21:29">-&gt;</operator><name pos:start="21:30" pos:end="21:38">htab_mask</name></name><operator pos:start="21:39" pos:end="21:39">)</operator> <operator pos:start="21:41" pos:end="21:41">*</operator> <name pos:start="21:43" pos:end="21:57">HPTES_PER_GROUP</name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:52"><expr pos:start="23:5" pos:end="23:51"><name pos:start="23:5" pos:end="23:9">token</name> <operator pos:start="23:11" pos:end="23:11">=</operator> <call pos:start="23:13" pos:end="23:51"><name pos:start="23:13" pos:end="23:35">ppc_hash64_start_access</name><argument_list pos:start="23:36" pos:end="23:51">(<argument pos:start="23:37" pos:end="23:39"><expr pos:start="23:37" pos:end="23:39"><name pos:start="23:37" pos:end="23:39">cpu</name></expr></argument>, <argument pos:start="23:42" pos:end="23:50"><expr pos:start="23:42" pos:end="23:50"><name pos:start="23:42" pos:end="23:50">pte_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:15">(<expr pos:start="25:9" pos:end="25:14"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:14">token</name></expr>)</condition> <block pos:start="25:17" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:18">

        <return pos:start="27:9" pos:end="27:18">return <expr pos:start="27:16" pos:end="27:17"><operator pos:start="27:16" pos:end="27:16">-</operator><literal type="number" pos:start="27:17" pos:end="27:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <for pos:start="31:5" pos:end="81:5">for <control pos:start="31:9" pos:end="31:41">(<init pos:start="31:10" pos:end="31:15"><expr pos:start="31:10" pos:end="31:14"><name pos:start="31:10" pos:end="31:10">i</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <literal type="number" pos:start="31:14" pos:end="31:14">0</literal></expr>;</init> <condition pos:start="31:17" pos:end="31:36"><expr pos:start="31:17" pos:end="31:35"><name pos:start="31:17" pos:end="31:17">i</name> <operator pos:start="31:19" pos:end="31:19">&lt;</operator> <name pos:start="31:21" pos:end="31:35">HPTES_PER_GROUP</name></expr>;</condition> <incr pos:start="31:38" pos:end="31:40"><expr pos:start="31:38" pos:end="31:40"><name pos:start="31:38" pos:end="31:38">i</name><operator pos:start="31:39" pos:end="31:40">++</operator></expr></incr>)</control> <block pos:start="31:43" pos:end="81:5">{<block_content pos:start="33:9" pos:end="79:9">

        <expr_stmt pos:start="33:9" pos:end="33:52"><expr pos:start="33:9" pos:end="33:51"><name pos:start="33:9" pos:end="33:12">pte0</name> <operator pos:start="33:14" pos:end="33:14">=</operator> <call pos:start="33:16" pos:end="33:51"><name pos:start="33:16" pos:end="33:36">ppc_hash64_load_hpte0</name><argument_list pos:start="33:37" pos:end="33:51">(<argument pos:start="33:38" pos:end="33:40"><expr pos:start="33:38" pos:end="33:40"><name pos:start="33:38" pos:end="33:40">cpu</name></expr></argument>, <argument pos:start="33:43" pos:end="33:47"><expr pos:start="33:43" pos:end="33:47"><name pos:start="33:43" pos:end="33:47">token</name></expr></argument>, <argument pos:start="33:50" pos:end="33:50"><expr pos:start="33:50" pos:end="33:50"><name pos:start="33:50" pos:end="33:50">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:52"><expr pos:start="35:9" pos:end="35:51"><name pos:start="35:9" pos:end="35:12">pte1</name> <operator pos:start="35:14" pos:end="35:14">=</operator> <call pos:start="35:16" pos:end="35:51"><name pos:start="35:16" pos:end="35:36">ppc_hash64_load_hpte1</name><argument_list pos:start="35:37" pos:end="35:51">(<argument pos:start="35:38" pos:end="35:40"><expr pos:start="35:38" pos:end="35:40"><name pos:start="35:38" pos:end="35:40">cpu</name></expr></argument>, <argument pos:start="35:43" pos:end="35:47"><expr pos:start="35:43" pos:end="35:47"><name pos:start="35:43" pos:end="35:47">token</name></expr></argument>, <argument pos:start="35:50" pos:end="35:50"><expr pos:start="35:50" pos:end="35:50"><name pos:start="35:50" pos:end="35:50">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="39:9" pos:end="39:60">/* This compares V, B, H (secondary) and the AVPN */</comment>

        <if_stmt pos:start="41:9" pos:end="79:9"><if pos:start="41:9" pos:end="79:9">if <condition pos:start="41:12" pos:end="41:41">(<expr pos:start="41:13" pos:end="41:40"><call pos:start="41:13" pos:end="41:40"><name pos:start="41:13" pos:end="41:28">HPTE64_V_COMPARE</name><argument_list pos:start="41:29" pos:end="41:40">(<argument pos:start="41:30" pos:end="41:33"><expr pos:start="41:30" pos:end="41:33"><name pos:start="41:30" pos:end="41:33">pte0</name></expr></argument>, <argument pos:start="41:36" pos:end="41:39"><expr pos:start="41:36" pos:end="41:39"><name pos:start="41:36" pos:end="41:39">ptem</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="41:43" pos:end="79:9">{<block_content pos:start="43:13" pos:end="77:54">

            <decl_stmt pos:start="43:13" pos:end="43:68"><decl pos:start="43:13" pos:end="43:67"><type pos:start="43:13" pos:end="43:20"><name pos:start="43:13" pos:end="43:20">unsigned</name></type> <name pos:start="43:22" pos:end="43:27">pshift</name> <init pos:start="43:29" pos:end="43:67">= <expr pos:start="43:31" pos:end="43:67"><call pos:start="43:31" pos:end="43:67"><name pos:start="43:31" pos:end="43:45">hpte_page_shift</name><argument_list pos:start="43:46" pos:end="43:67">(<argument pos:start="43:47" pos:end="43:54"><expr pos:start="43:47" pos:end="43:54"><name pos:start="43:47" pos:end="43:54"><name pos:start="43:47" pos:end="43:49">slb</name><operator pos:start="43:50" pos:end="43:51">-&gt;</operator><name pos:start="43:52" pos:end="43:54">sps</name></name></expr></argument>, <argument pos:start="43:57" pos:end="43:60"><expr pos:start="43:57" pos:end="43:60"><name pos:start="43:57" pos:end="43:60">pte0</name></expr></argument>, <argument pos:start="43:63" pos:end="43:66"><expr pos:start="43:63" pos:end="43:66"><name pos:start="43:63" pos:end="43:66">pte1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="block" pos:start="45:13" pos:end="57:15">/*

             * If there is no match, ignore the PTE, it could simply

             * be for a different segment size encoding and the

             * architecture specifies we should not match. Linux will

             * potentially leave behind PTEs for the wrong base page

             * size when demoting segments.

             */</comment>

            <if_stmt pos:start="59:13" pos:end="63:13"><if pos:start="59:13" pos:end="63:13">if <condition pos:start="59:16" pos:end="59:28">(<expr pos:start="59:17" pos:end="59:27"><name pos:start="59:17" pos:end="59:22">pshift</name> <operator pos:start="59:24" pos:end="59:25">==</operator> <literal type="number" pos:start="59:27" pos:end="59:27">0</literal></expr>)</condition> <block pos:start="59:30" pos:end="63:13">{<block_content pos:start="61:17" pos:end="61:25">

                <continue pos:start="61:17" pos:end="61:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="65:13" pos:end="69:15">/* We don't do anything with pshift yet as qemu TLB only deals

             * with 4K pages anyway

             */</comment>

            <expr_stmt pos:start="71:13" pos:end="71:29"><expr pos:start="71:13" pos:end="71:28"><name pos:start="71:13" pos:end="71:21"><name pos:start="71:13" pos:end="71:15">pte</name><operator pos:start="71:16" pos:end="71:17">-&gt;</operator><name pos:start="71:18" pos:end="71:21">pte0</name></name> <operator pos:start="71:23" pos:end="71:23">=</operator> <name pos:start="71:25" pos:end="71:28">pte0</name></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:29"><expr pos:start="73:13" pos:end="73:28"><name pos:start="73:13" pos:end="73:21"><name pos:start="73:13" pos:end="73:15">pte</name><operator pos:start="73:16" pos:end="73:17">-&gt;</operator><name pos:start="73:18" pos:end="73:21">pte1</name></name> <operator pos:start="73:23" pos:end="73:23">=</operator> <name pos:start="73:25" pos:end="73:28">pte1</name></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:47"><expr pos:start="75:13" pos:end="75:46"><call pos:start="75:13" pos:end="75:46"><name pos:start="75:13" pos:end="75:34">ppc_hash64_stop_access</name><argument_list pos:start="75:35" pos:end="75:46">(<argument pos:start="75:36" pos:end="75:38"><expr pos:start="75:36" pos:end="75:38"><name pos:start="75:36" pos:end="75:38">cpu</name></expr></argument>, <argument pos:start="75:41" pos:end="75:45"><expr pos:start="75:41" pos:end="75:45"><name pos:start="75:41" pos:end="75:45">token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="77:13" pos:end="77:54">return <expr pos:start="77:20" pos:end="77:53"><operator pos:start="77:20" pos:end="77:20">(</operator><name pos:start="77:21" pos:end="77:29">pte_index</name> <operator pos:start="77:31" pos:end="77:31">+</operator> <name pos:start="77:33" pos:end="77:33">i</name><operator pos:start="77:34" pos:end="77:34">)</operator> <operator pos:start="77:36" pos:end="77:36">*</operator> <name pos:start="77:38" pos:end="77:53">HASH_PTE_SIZE_64</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="83:5" pos:end="83:39"><expr pos:start="83:5" pos:end="83:38"><call pos:start="83:5" pos:end="83:38"><name pos:start="83:5" pos:end="83:26">ppc_hash64_stop_access</name><argument_list pos:start="83:27" pos:end="83:38">(<argument pos:start="83:28" pos:end="83:30"><expr pos:start="83:28" pos:end="83:30"><name pos:start="83:28" pos:end="83:30">cpu</name></expr></argument>, <argument pos:start="83:33" pos:end="83:37"><expr pos:start="83:33" pos:end="83:37"><name pos:start="83:33" pos:end="83:37">token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="85:5" pos:end="89:7">/*

     * We didn't find a valid entry.

     */</comment>

    <return pos:start="91:5" pos:end="91:14">return <expr pos:start="91:12" pos:end="91:13"><operator pos:start="91:12" pos:end="91:12">-</operator><literal type="number" pos:start="91:13" pos:end="91:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
