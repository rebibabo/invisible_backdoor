<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23437.c" pos:tabs="8"><function pos:start="1:1" pos:end="645:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">fsl_imx6_realize</name><parameter_list pos:start="1:29" pos:end="1:60">(<parameter pos:start="1:30" pos:end="1:45"><decl pos:start="1:30" pos:end="1:45"><type pos:start="1:30" pos:end="1:45"><name pos:start="1:30" pos:end="1:40">DeviceState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">dev</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:59"><decl pos:start="1:48" pos:end="1:59"><type pos:start="1:48" pos:end="1:59"><name pos:start="1:48" pos:end="1:52">Error</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier><modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:59">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="645:1">{<block_content pos:start="5:5" pos:end="643:49">

    <decl_stmt pos:start="5:5" pos:end="5:36"><decl pos:start="5:5" pos:end="5:35"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">FslIMX6State</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:19">s</name> <init pos:start="5:21" pos:end="5:35">= <expr pos:start="5:23" pos:end="5:35"><call pos:start="5:23" pos:end="5:35"><name pos:start="5:23" pos:end="5:30">FSL_IMX6</name><argument_list pos:start="5:31" pos:end="5:35">(<argument pos:start="5:32" pos:end="5:34"><expr pos:start="5:32" pos:end="5:34"><name pos:start="5:32" pos:end="5:34">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint16_t</name></type> <name pos:start="7:14" pos:end="7:14">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">Error</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:14">err</name> <init pos:start="9:16" pos:end="9:21">= <expr pos:start="9:18" pos:end="9:21"><name pos:start="9:18" pos:end="9:21">NULL</name></expr></init></decl>;</decl_stmt>



    <for pos:start="13:5" pos:end="51:5">for <control pos:start="13:9" pos:end="13:34">(<init pos:start="13:10" pos:end="13:15"><expr pos:start="13:10" pos:end="13:14"><name pos:start="13:10" pos:end="13:10">i</name> <operator pos:start="13:12" pos:end="13:12">=</operator> <literal type="number" pos:start="13:14" pos:end="13:14">0</literal></expr>;</init> <condition pos:start="13:17" pos:end="13:29"><expr pos:start="13:17" pos:end="13:28"><name pos:start="13:17" pos:end="13:17">i</name> <operator pos:start="13:19" pos:end="13:19">&lt;</operator> <name pos:start="13:21" pos:end="13:28">smp_cpus</name></expr>;</condition> <incr pos:start="13:31" pos:end="13:33"><expr pos:start="13:31" pos:end="13:33"><name pos:start="13:31" pos:end="13:31">i</name><operator pos:start="13:32" pos:end="13:33">++</operator></expr></incr>)</control> <block pos:start="13:36" pos:end="51:5">{<block_content pos:start="19:9" pos:end="49:9">



        <comment type="block" pos:start="17:9" pos:end="17:51">/* On uniprocessor, the CBAR is set to 0 */</comment>

        <if_stmt pos:start="19:9" pos:end="25:9"><if pos:start="19:9" pos:end="25:9">if <condition pos:start="19:12" pos:end="19:25">(<expr pos:start="19:13" pos:end="19:24"><name pos:start="19:13" pos:end="19:20">smp_cpus</name> <operator pos:start="19:22" pos:end="19:22">&gt;</operator> <literal type="number" pos:start="19:24" pos:end="19:24">1</literal></expr>)</condition> <block pos:start="19:27" pos:end="25:9">{<block_content pos:start="21:13" pos:end="23:64">

            <expr_stmt pos:start="21:13" pos:end="23:64"><expr pos:start="21:13" pos:end="23:63"><call pos:start="21:13" pos:end="23:63"><name pos:start="21:13" pos:end="21:35">object_property_set_int</name><argument_list pos:start="21:36" pos:end="23:63">(<argument pos:start="21:37" pos:end="21:54"><expr pos:start="21:37" pos:end="21:54"><call pos:start="21:37" pos:end="21:54"><name pos:start="21:37" pos:end="21:42">OBJECT</name><argument_list pos:start="21:43" pos:end="21:54">(<argument pos:start="21:44" pos:end="21:53"><expr pos:start="21:44" pos:end="21:53"><operator pos:start="21:44" pos:end="21:44">&amp;</operator><name pos:start="21:45" pos:end="21:53"><name pos:start="21:45" pos:end="21:45">s</name><operator pos:start="21:46" pos:end="21:47">-&gt;</operator><name pos:start="21:48" pos:end="21:50">cpu</name><index pos:start="21:51" pos:end="21:53">[<expr pos:start="21:52" pos:end="21:52"><name pos:start="21:52" pos:end="21:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="21:57" pos:end="21:78"><expr pos:start="21:57" pos:end="21:78"><name pos:start="21:57" pos:end="21:78">FSL_IMX6_A9MPCORE_ADDR</name></expr></argument>,

                                    <argument pos:start="23:37" pos:end="23:48"><expr pos:start="23:37" pos:end="23:48"><literal type="string" pos:start="23:37" pos:end="23:48">"reset-cbar"</literal></expr></argument>, <argument pos:start="23:51" pos:end="23:62"><expr pos:start="23:51" pos:end="23:62"><operator pos:start="23:51" pos:end="23:51">&amp;</operator><name pos:start="23:52" pos:end="23:62">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="29:9" pos:end="29:55">/* All CPU but CPU 0 start in power off mode */</comment>

        <if_stmt pos:start="31:9" pos:end="37:9"><if pos:start="31:9" pos:end="37:9">if <condition pos:start="31:12" pos:end="31:14">(<expr pos:start="31:13" pos:end="31:13"><name pos:start="31:13" pos:end="31:13">i</name></expr>)</condition> <block pos:start="31:16" pos:end="37:9">{<block_content pos:start="33:13" pos:end="35:72">

            <expr_stmt pos:start="33:13" pos:end="35:72"><expr pos:start="33:13" pos:end="35:71"><call pos:start="33:13" pos:end="35:71"><name pos:start="33:13" pos:end="33:36">object_property_set_bool</name><argument_list pos:start="33:37" pos:end="35:71">(<argument pos:start="33:38" pos:end="33:55"><expr pos:start="33:38" pos:end="33:55"><call pos:start="33:38" pos:end="33:55"><name pos:start="33:38" pos:end="33:43">OBJECT</name><argument_list pos:start="33:44" pos:end="33:55">(<argument pos:start="33:45" pos:end="33:54"><expr pos:start="33:45" pos:end="33:54"><operator pos:start="33:45" pos:end="33:45">&amp;</operator><name pos:start="33:46" pos:end="33:54"><name pos:start="33:46" pos:end="33:46">s</name><operator pos:start="33:47" pos:end="33:48">-&gt;</operator><name pos:start="33:49" pos:end="33:51">cpu</name><index pos:start="33:52" pos:end="33:54">[<expr pos:start="33:53" pos:end="33:53"><name pos:start="33:53" pos:end="33:53">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="33:58" pos:end="33:61"><expr pos:start="33:58" pos:end="33:61"><name pos:start="33:58" pos:end="33:61">true</name></expr></argument>,

                                     <argument pos:start="35:38" pos:end="35:56"><expr pos:start="35:38" pos:end="35:56"><literal type="string" pos:start="35:38" pos:end="35:56">"start-powered-off"</literal></expr></argument>, <argument pos:start="35:59" pos:end="35:70"><expr pos:start="35:59" pos:end="35:70"><operator pos:start="35:59" pos:end="35:59">&amp;</operator><name pos:start="35:60" pos:end="35:70">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="41:9" pos:end="41:77"><expr pos:start="41:9" pos:end="41:76"><call pos:start="41:9" pos:end="41:76"><name pos:start="41:9" pos:end="41:32">object_property_set_bool</name><argument_list pos:start="41:33" pos:end="41:76">(<argument pos:start="41:34" pos:end="41:51"><expr pos:start="41:34" pos:end="41:51"><call pos:start="41:34" pos:end="41:51"><name pos:start="41:34" pos:end="41:39">OBJECT</name><argument_list pos:start="41:40" pos:end="41:51">(<argument pos:start="41:41" pos:end="41:50"><expr pos:start="41:41" pos:end="41:50"><operator pos:start="41:41" pos:end="41:41">&amp;</operator><name pos:start="41:42" pos:end="41:50"><name pos:start="41:42" pos:end="41:42">s</name><operator pos:start="41:43" pos:end="41:44">-&gt;</operator><name pos:start="41:45" pos:end="41:47">cpu</name><index pos:start="41:48" pos:end="41:50">[<expr pos:start="41:49" pos:end="41:49"><name pos:start="41:49" pos:end="41:49">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="41:54" pos:end="41:57"><expr pos:start="41:54" pos:end="41:57"><name pos:start="41:54" pos:end="41:57">true</name></expr></argument>, <argument pos:start="41:60" pos:end="41:69"><expr pos:start="41:60" pos:end="41:69"><literal type="string" pos:start="41:60" pos:end="41:69">"realized"</literal></expr></argument>, <argument pos:start="41:72" pos:end="41:75"><expr pos:start="41:72" pos:end="41:75"><operator pos:start="41:72" pos:end="41:72">&amp;</operator><name pos:start="41:73" pos:end="41:75">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="49:9"><if pos:start="43:9" pos:end="49:9">if <condition pos:start="43:12" pos:end="43:16">(<expr pos:start="43:13" pos:end="43:15"><name pos:start="43:13" pos:end="43:15">err</name></expr>)</condition> <block pos:start="43:18" pos:end="49:9">{<block_content pos:start="45:13" pos:end="47:19">

            <expr_stmt pos:start="45:13" pos:end="45:39"><expr pos:start="45:13" pos:end="45:38"><call pos:start="45:13" pos:end="45:38"><name pos:start="45:13" pos:end="45:27">error_propagate</name><argument_list pos:start="45:28" pos:end="45:38">(<argument pos:start="45:29" pos:end="45:32"><expr pos:start="45:29" pos:end="45:32"><name pos:start="45:29" pos:end="45:32">errp</name></expr></argument>, <argument pos:start="45:35" pos:end="45:37"><expr pos:start="45:35" pos:end="45:37"><name pos:start="45:35" pos:end="45:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="47:13" pos:end="47:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="55:5" pos:end="57:42"><expr pos:start="55:5" pos:end="57:41"><call pos:start="55:5" pos:end="57:41"><name pos:start="55:5" pos:end="55:27">object_property_set_int</name><argument_list pos:start="55:28" pos:end="57:41">(<argument pos:start="55:29" pos:end="55:48"><expr pos:start="55:29" pos:end="55:48"><call pos:start="55:29" pos:end="55:48"><name pos:start="55:29" pos:end="55:34">OBJECT</name><argument_list pos:start="55:35" pos:end="55:48">(<argument pos:start="55:36" pos:end="55:47"><expr pos:start="55:36" pos:end="55:47"><operator pos:start="55:36" pos:end="55:36">&amp;</operator><name pos:start="55:37" pos:end="55:47"><name pos:start="55:37" pos:end="55:37">s</name><operator pos:start="55:38" pos:end="55:39">-&gt;</operator><name pos:start="55:40" pos:end="55:47">a9mpcore</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="55:51" pos:end="55:58"><expr pos:start="55:51" pos:end="55:58"><name pos:start="55:51" pos:end="55:58">smp_cpus</name></expr></argument>, <argument pos:start="55:61" pos:end="55:69"><expr pos:start="55:61" pos:end="55:69"><literal type="string" pos:start="55:61" pos:end="55:69">"num-cpu"</literal></expr></argument>,

                            <argument pos:start="57:29" pos:end="57:40"><expr pos:start="57:29" pos:end="57:40"><operator pos:start="57:29" pos:end="57:29">&amp;</operator><name pos:start="57:30" pos:end="57:40">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="65:42"><expr pos:start="61:5" pos:end="65:41"><call pos:start="61:5" pos:end="65:41"><name pos:start="61:5" pos:end="61:27">object_property_set_int</name><argument_list pos:start="61:28" pos:end="65:41">(<argument pos:start="61:29" pos:end="61:48"><expr pos:start="61:29" pos:end="61:48"><call pos:start="61:29" pos:end="61:48"><name pos:start="61:29" pos:end="61:34">OBJECT</name><argument_list pos:start="61:35" pos:end="61:48">(<argument pos:start="61:36" pos:end="61:47"><expr pos:start="61:36" pos:end="61:47"><operator pos:start="61:36" pos:end="61:36">&amp;</operator><name pos:start="61:37" pos:end="61:47"><name pos:start="61:37" pos:end="61:37">s</name><operator pos:start="61:38" pos:end="61:39">-&gt;</operator><name pos:start="61:40" pos:end="61:47">a9mpcore</name></name></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="63:29" pos:end="63:59"><expr pos:start="63:29" pos:end="63:59"><name pos:start="63:29" pos:end="63:44">FSL_IMX6_MAX_IRQ</name> <operator pos:start="63:46" pos:end="63:46">+</operator> <name pos:start="63:48" pos:end="63:59">GIC_INTERNAL</name></expr></argument>, <argument pos:start="63:62" pos:end="63:70"><expr pos:start="63:62" pos:end="63:70"><literal type="string" pos:start="63:62" pos:end="63:70">"num-irq"</literal></expr></argument>,

                            <argument pos:start="65:29" pos:end="65:40"><expr pos:start="65:29" pos:end="65:40"><operator pos:start="65:29" pos:end="65:29">&amp;</operator><name pos:start="65:30" pos:end="65:40">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:75"><expr pos:start="69:5" pos:end="69:74"><call pos:start="69:5" pos:end="69:74"><name pos:start="69:5" pos:end="69:28">object_property_set_bool</name><argument_list pos:start="69:29" pos:end="69:74">(<argument pos:start="69:30" pos:end="69:49"><expr pos:start="69:30" pos:end="69:49"><call pos:start="69:30" pos:end="69:49"><name pos:start="69:30" pos:end="69:35">OBJECT</name><argument_list pos:start="69:36" pos:end="69:49">(<argument pos:start="69:37" pos:end="69:48"><expr pos:start="69:37" pos:end="69:48"><operator pos:start="69:37" pos:end="69:37">&amp;</operator><name pos:start="69:38" pos:end="69:48"><name pos:start="69:38" pos:end="69:38">s</name><operator pos:start="69:39" pos:end="69:40">-&gt;</operator><name pos:start="69:41" pos:end="69:48">a9mpcore</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="69:52" pos:end="69:55"><expr pos:start="69:52" pos:end="69:55"><name pos:start="69:52" pos:end="69:55">true</name></expr></argument>, <argument pos:start="69:58" pos:end="69:67"><expr pos:start="69:58" pos:end="69:67"><literal type="string" pos:start="69:58" pos:end="69:67">"realized"</literal></expr></argument>, <argument pos:start="69:70" pos:end="69:73"><expr pos:start="69:70" pos:end="69:73"><operator pos:start="69:70" pos:end="69:70">&amp;</operator><name pos:start="69:71" pos:end="69:73">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="71:5" pos:end="77:5"><if pos:start="71:5" pos:end="77:5">if <condition pos:start="71:8" pos:end="71:12">(<expr pos:start="71:9" pos:end="71:11"><name pos:start="71:9" pos:end="71:11">err</name></expr>)</condition> <block pos:start="71:14" pos:end="77:5">{<block_content pos:start="73:9" pos:end="75:15">

        <expr_stmt pos:start="73:9" pos:end="73:35"><expr pos:start="73:9" pos:end="73:34"><call pos:start="73:9" pos:end="73:34"><name pos:start="73:9" pos:end="73:23">error_propagate</name><argument_list pos:start="73:24" pos:end="73:34">(<argument pos:start="73:25" pos:end="73:28"><expr pos:start="73:25" pos:end="73:28"><name pos:start="73:25" pos:end="73:28">errp</name></expr></argument>, <argument pos:start="73:31" pos:end="73:33"><expr pos:start="73:31" pos:end="73:33"><name pos:start="73:31" pos:end="73:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="75:9" pos:end="75:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:77"><expr pos:start="79:5" pos:end="79:76"><call pos:start="79:5" pos:end="79:76"><name pos:start="79:5" pos:end="79:19">sysbus_mmio_map</name><argument_list pos:start="79:20" pos:end="79:76">(<argument pos:start="79:21" pos:end="79:48"><expr pos:start="79:21" pos:end="79:48"><call pos:start="79:21" pos:end="79:48"><name pos:start="79:21" pos:end="79:34">SYS_BUS_DEVICE</name><argument_list pos:start="79:35" pos:end="79:48">(<argument pos:start="79:36" pos:end="79:47"><expr pos:start="79:36" pos:end="79:47"><operator pos:start="79:36" pos:end="79:36">&amp;</operator><name pos:start="79:37" pos:end="79:47"><name pos:start="79:37" pos:end="79:37">s</name><operator pos:start="79:38" pos:end="79:39">-&gt;</operator><name pos:start="79:40" pos:end="79:47">a9mpcore</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="79:51" pos:end="79:51"><expr pos:start="79:51" pos:end="79:51"><literal type="number" pos:start="79:51" pos:end="79:51">0</literal></expr></argument>, <argument pos:start="79:54" pos:end="79:75"><expr pos:start="79:54" pos:end="79:75"><name pos:start="79:54" pos:end="79:75">FSL_IMX6_A9MPCORE_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="83:5" pos:end="93:5">for <control pos:start="83:9" pos:end="83:34">(<init pos:start="83:10" pos:end="83:15"><expr pos:start="83:10" pos:end="83:14"><name pos:start="83:10" pos:end="83:10">i</name> <operator pos:start="83:12" pos:end="83:12">=</operator> <literal type="number" pos:start="83:14" pos:end="83:14">0</literal></expr>;</init> <condition pos:start="83:17" pos:end="83:29"><expr pos:start="83:17" pos:end="83:28"><name pos:start="83:17" pos:end="83:17">i</name> <operator pos:start="83:19" pos:end="83:19">&lt;</operator> <name pos:start="83:21" pos:end="83:28">smp_cpus</name></expr>;</condition> <incr pos:start="83:31" pos:end="83:33"><expr pos:start="83:31" pos:end="83:33"><name pos:start="83:31" pos:end="83:31">i</name><operator pos:start="83:32" pos:end="83:33">++</operator></expr></incr>)</control> <block pos:start="83:36" pos:end="93:5">{<block_content pos:start="85:9" pos:end="91:78">

        <expr_stmt pos:start="85:9" pos:end="87:78"><expr pos:start="85:9" pos:end="87:77"><call pos:start="85:9" pos:end="87:77"><name pos:start="85:9" pos:end="85:26">sysbus_connect_irq</name><argument_list pos:start="85:27" pos:end="87:77">(<argument pos:start="85:28" pos:end="85:55"><expr pos:start="85:28" pos:end="85:55"><call pos:start="85:28" pos:end="85:55"><name pos:start="85:28" pos:end="85:41">SYS_BUS_DEVICE</name><argument_list pos:start="85:42" pos:end="85:55">(<argument pos:start="85:43" pos:end="85:54"><expr pos:start="85:43" pos:end="85:54"><operator pos:start="85:43" pos:end="85:43">&amp;</operator><name pos:start="85:44" pos:end="85:54"><name pos:start="85:44" pos:end="85:44">s</name><operator pos:start="85:45" pos:end="85:46">-&gt;</operator><name pos:start="85:47" pos:end="85:54">a9mpcore</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="85:58" pos:end="85:58"><expr pos:start="85:58" pos:end="85:58"><name pos:start="85:58" pos:end="85:58">i</name></expr></argument>,

                           <argument pos:start="87:28" pos:end="87:76"><expr pos:start="87:28" pos:end="87:76"><call pos:start="87:28" pos:end="87:76"><name pos:start="87:28" pos:end="87:43">qdev_get_gpio_in</name><argument_list pos:start="87:44" pos:end="87:76">(<argument pos:start="87:45" pos:end="87:62"><expr pos:start="87:45" pos:end="87:62"><call pos:start="87:45" pos:end="87:62"><name pos:start="87:45" pos:end="87:50">DEVICE</name><argument_list pos:start="87:51" pos:end="87:62">(<argument pos:start="87:52" pos:end="87:61"><expr pos:start="87:52" pos:end="87:61"><operator pos:start="87:52" pos:end="87:52">&amp;</operator><name pos:start="87:53" pos:end="87:61"><name pos:start="87:53" pos:end="87:53">s</name><operator pos:start="87:54" pos:end="87:55">-&gt;</operator><name pos:start="87:56" pos:end="87:58">cpu</name><index pos:start="87:59" pos:end="87:61">[<expr pos:start="87:60" pos:end="87:60"><name pos:start="87:60" pos:end="87:60">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="87:65" pos:end="87:75"><expr pos:start="87:65" pos:end="87:75"><name pos:start="87:65" pos:end="87:75">ARM_CPU_IRQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="91:78"><expr pos:start="89:9" pos:end="91:77"><call pos:start="89:9" pos:end="91:77"><name pos:start="89:9" pos:end="89:26">sysbus_connect_irq</name><argument_list pos:start="89:27" pos:end="91:77">(<argument pos:start="89:28" pos:end="89:55"><expr pos:start="89:28" pos:end="89:55"><call pos:start="89:28" pos:end="89:55"><name pos:start="89:28" pos:end="89:41">SYS_BUS_DEVICE</name><argument_list pos:start="89:42" pos:end="89:55">(<argument pos:start="89:43" pos:end="89:54"><expr pos:start="89:43" pos:end="89:54"><operator pos:start="89:43" pos:end="89:43">&amp;</operator><name pos:start="89:44" pos:end="89:54"><name pos:start="89:44" pos:end="89:44">s</name><operator pos:start="89:45" pos:end="89:46">-&gt;</operator><name pos:start="89:47" pos:end="89:54">a9mpcore</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="89:58" pos:end="89:69"><expr pos:start="89:58" pos:end="89:69"><name pos:start="89:58" pos:end="89:58">i</name> <operator pos:start="89:60" pos:end="89:60">+</operator> <name pos:start="89:62" pos:end="89:69">smp_cpus</name></expr></argument>,

                           <argument pos:start="91:28" pos:end="91:76"><expr pos:start="91:28" pos:end="91:76"><call pos:start="91:28" pos:end="91:76"><name pos:start="91:28" pos:end="91:43">qdev_get_gpio_in</name><argument_list pos:start="91:44" pos:end="91:76">(<argument pos:start="91:45" pos:end="91:62"><expr pos:start="91:45" pos:end="91:62"><call pos:start="91:45" pos:end="91:62"><name pos:start="91:45" pos:end="91:50">DEVICE</name><argument_list pos:start="91:51" pos:end="91:62">(<argument pos:start="91:52" pos:end="91:61"><expr pos:start="91:52" pos:end="91:61"><operator pos:start="91:52" pos:end="91:52">&amp;</operator><name pos:start="91:53" pos:end="91:61"><name pos:start="91:53" pos:end="91:53">s</name><operator pos:start="91:54" pos:end="91:55">-&gt;</operator><name pos:start="91:56" pos:end="91:58">cpu</name><index pos:start="91:59" pos:end="91:61">[<expr pos:start="91:60" pos:end="91:60"><name pos:start="91:60" pos:end="91:60">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="91:65" pos:end="91:75"><expr pos:start="91:65" pos:end="91:75"><name pos:start="91:65" pos:end="91:75">ARM_CPU_FIQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="97:5" pos:end="97:70"><expr pos:start="97:5" pos:end="97:69"><call pos:start="97:5" pos:end="97:69"><name pos:start="97:5" pos:end="97:28">object_property_set_bool</name><argument_list pos:start="97:29" pos:end="97:69">(<argument pos:start="97:30" pos:end="97:44"><expr pos:start="97:30" pos:end="97:44"><call pos:start="97:30" pos:end="97:44"><name pos:start="97:30" pos:end="97:35">OBJECT</name><argument_list pos:start="97:36" pos:end="97:44">(<argument pos:start="97:37" pos:end="97:43"><expr pos:start="97:37" pos:end="97:43"><operator pos:start="97:37" pos:end="97:37">&amp;</operator><name pos:start="97:38" pos:end="97:43"><name pos:start="97:38" pos:end="97:38">s</name><operator pos:start="97:39" pos:end="97:40">-&gt;</operator><name pos:start="97:41" pos:end="97:43">ccm</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="97:47" pos:end="97:50"><expr pos:start="97:47" pos:end="97:50"><name pos:start="97:47" pos:end="97:50">true</name></expr></argument>, <argument pos:start="97:53" pos:end="97:62"><expr pos:start="97:53" pos:end="97:62"><literal type="string" pos:start="97:53" pos:end="97:62">"realized"</literal></expr></argument>, <argument pos:start="97:65" pos:end="97:68"><expr pos:start="97:65" pos:end="97:68"><operator pos:start="97:65" pos:end="97:65">&amp;</operator><name pos:start="97:66" pos:end="97:68">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="99:5" pos:end="105:5"><if pos:start="99:5" pos:end="105:5">if <condition pos:start="99:8" pos:end="99:12">(<expr pos:start="99:9" pos:end="99:11"><name pos:start="99:9" pos:end="99:11">err</name></expr>)</condition> <block pos:start="99:14" pos:end="105:5">{<block_content pos:start="101:9" pos:end="103:15">

        <expr_stmt pos:start="101:9" pos:end="101:35"><expr pos:start="101:9" pos:end="101:34"><call pos:start="101:9" pos:end="101:34"><name pos:start="101:9" pos:end="101:23">error_propagate</name><argument_list pos:start="101:24" pos:end="101:34">(<argument pos:start="101:25" pos:end="101:28"><expr pos:start="101:25" pos:end="101:28"><name pos:start="101:25" pos:end="101:28">errp</name></expr></argument>, <argument pos:start="101:31" pos:end="101:33"><expr pos:start="101:31" pos:end="101:33"><name pos:start="101:31" pos:end="101:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="103:9" pos:end="103:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:67"><expr pos:start="107:5" pos:end="107:66"><call pos:start="107:5" pos:end="107:66"><name pos:start="107:5" pos:end="107:19">sysbus_mmio_map</name><argument_list pos:start="107:20" pos:end="107:66">(<argument pos:start="107:21" pos:end="107:43"><expr pos:start="107:21" pos:end="107:43"><call pos:start="107:21" pos:end="107:43"><name pos:start="107:21" pos:end="107:34">SYS_BUS_DEVICE</name><argument_list pos:start="107:35" pos:end="107:43">(<argument pos:start="107:36" pos:end="107:42"><expr pos:start="107:36" pos:end="107:42"><operator pos:start="107:36" pos:end="107:36">&amp;</operator><name pos:start="107:37" pos:end="107:42"><name pos:start="107:37" pos:end="107:37">s</name><operator pos:start="107:38" pos:end="107:39">-&gt;</operator><name pos:start="107:40" pos:end="107:42">ccm</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="107:46" pos:end="107:46"><expr pos:start="107:46" pos:end="107:46"><literal type="number" pos:start="107:46" pos:end="107:46">0</literal></expr></argument>, <argument pos:start="107:49" pos:end="107:65"><expr pos:start="107:49" pos:end="107:65"><name pos:start="107:49" pos:end="107:65">FSL_IMX6_CCM_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:70"><expr pos:start="111:5" pos:end="111:69"><call pos:start="111:5" pos:end="111:69"><name pos:start="111:5" pos:end="111:28">object_property_set_bool</name><argument_list pos:start="111:29" pos:end="111:69">(<argument pos:start="111:30" pos:end="111:44"><expr pos:start="111:30" pos:end="111:44"><call pos:start="111:30" pos:end="111:44"><name pos:start="111:30" pos:end="111:35">OBJECT</name><argument_list pos:start="111:36" pos:end="111:44">(<argument pos:start="111:37" pos:end="111:43"><expr pos:start="111:37" pos:end="111:43"><operator pos:start="111:37" pos:end="111:37">&amp;</operator><name pos:start="111:38" pos:end="111:43"><name pos:start="111:38" pos:end="111:38">s</name><operator pos:start="111:39" pos:end="111:40">-&gt;</operator><name pos:start="111:41" pos:end="111:43">src</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="111:47" pos:end="111:50"><expr pos:start="111:47" pos:end="111:50"><name pos:start="111:47" pos:end="111:50">true</name></expr></argument>, <argument pos:start="111:53" pos:end="111:62"><expr pos:start="111:53" pos:end="111:62"><literal type="string" pos:start="111:53" pos:end="111:62">"realized"</literal></expr></argument>, <argument pos:start="111:65" pos:end="111:68"><expr pos:start="111:65" pos:end="111:68"><operator pos:start="111:65" pos:end="111:65">&amp;</operator><name pos:start="111:66" pos:end="111:68">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="113:5" pos:end="119:5"><if pos:start="113:5" pos:end="119:5">if <condition pos:start="113:8" pos:end="113:12">(<expr pos:start="113:9" pos:end="113:11"><name pos:start="113:9" pos:end="113:11">err</name></expr>)</condition> <block pos:start="113:14" pos:end="119:5">{<block_content pos:start="115:9" pos:end="117:15">

        <expr_stmt pos:start="115:9" pos:end="115:35"><expr pos:start="115:9" pos:end="115:34"><call pos:start="115:9" pos:end="115:34"><name pos:start="115:9" pos:end="115:23">error_propagate</name><argument_list pos:start="115:24" pos:end="115:34">(<argument pos:start="115:25" pos:end="115:28"><expr pos:start="115:25" pos:end="115:28"><name pos:start="115:25" pos:end="115:28">errp</name></expr></argument>, <argument pos:start="115:31" pos:end="115:33"><expr pos:start="115:31" pos:end="115:33"><name pos:start="115:31" pos:end="115:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="117:9" pos:end="117:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:67"><expr pos:start="121:5" pos:end="121:66"><call pos:start="121:5" pos:end="121:66"><name pos:start="121:5" pos:end="121:19">sysbus_mmio_map</name><argument_list pos:start="121:20" pos:end="121:66">(<argument pos:start="121:21" pos:end="121:43"><expr pos:start="121:21" pos:end="121:43"><call pos:start="121:21" pos:end="121:43"><name pos:start="121:21" pos:end="121:34">SYS_BUS_DEVICE</name><argument_list pos:start="121:35" pos:end="121:43">(<argument pos:start="121:36" pos:end="121:42"><expr pos:start="121:36" pos:end="121:42"><operator pos:start="121:36" pos:end="121:36">&amp;</operator><name pos:start="121:37" pos:end="121:42"><name pos:start="121:37" pos:end="121:37">s</name><operator pos:start="121:38" pos:end="121:39">-&gt;</operator><name pos:start="121:40" pos:end="121:42">src</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="121:46" pos:end="121:46"><expr pos:start="121:46" pos:end="121:46"><literal type="number" pos:start="121:46" pos:end="121:46">0</literal></expr></argument>, <argument pos:start="121:49" pos:end="121:65"><expr pos:start="121:49" pos:end="121:65"><name pos:start="121:49" pos:end="121:65">FSL_IMX6_SRC_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="125:5" pos:end="125:30">/* Initialize all UARTs */</comment>

    <for pos:start="127:5" pos:end="201:5">for <control pos:start="127:9" pos:end="127:44">(<init pos:start="127:10" pos:end="127:15"><expr pos:start="127:10" pos:end="127:14"><name pos:start="127:10" pos:end="127:10">i</name> <operator pos:start="127:12" pos:end="127:12">=</operator> <literal type="number" pos:start="127:14" pos:end="127:14">0</literal></expr>;</init> <condition pos:start="127:17" pos:end="127:39"><expr pos:start="127:17" pos:end="127:38"><name pos:start="127:17" pos:end="127:17">i</name> <operator pos:start="127:19" pos:end="127:19">&lt;</operator> <name pos:start="127:21" pos:end="127:38">FSL_IMX6_NUM_UARTS</name></expr>;</condition> <incr pos:start="127:41" pos:end="127:43"><expr pos:start="127:41" pos:end="127:43"><name pos:start="127:41" pos:end="127:41">i</name><operator pos:start="127:42" pos:end="127:43">++</operator></expr></incr>)</control> <block pos:start="127:46" pos:end="201:5">{<block_content pos:start="129:9" pos:end="199:66">

        <struct pos:start="129:9" pos:end="147:10"><specifier pos:start="129:9" pos:end="129:14">static</specifier> <specifier pos:start="129:16" pos:end="129:20">const</specifier> struct <block pos:start="129:29" pos:end="135:9">{

            <decl_stmt pos:start="131:13" pos:end="131:24"><decl pos:start="131:13" pos:end="131:23"><type pos:start="131:13" pos:end="131:18"><name pos:start="131:13" pos:end="131:18">hwaddr</name></type> <name pos:start="131:20" pos:end="131:23">addr</name></decl>;</decl_stmt>

            <decl_stmt pos:start="133:13" pos:end="133:29"><decl pos:start="133:13" pos:end="133:28"><type pos:start="133:13" pos:end="133:24"><name pos:start="133:13" pos:end="133:20">unsigned</name> <name pos:start="133:22" pos:end="133:24">int</name></type> <name pos:start="133:26" pos:end="133:28">irq</name></decl>;</decl_stmt>

        }</block> <decl pos:start="135:11" pos:end="147:9"><name pos:start="135:11" pos:end="135:42"><name pos:start="135:11" pos:end="135:22">serial_table</name><index pos:start="135:23" pos:end="135:42">[<expr pos:start="135:24" pos:end="135:41"><name pos:start="135:24" pos:end="135:41">FSL_IMX6_NUM_UARTS</name></expr>]</index></name> <init pos:start="135:44" pos:end="147:9">= <expr pos:start="135:46" pos:end="147:9"><block pos:start="135:46" pos:end="147:9">{

            <expr pos:start="137:13" pos:end="137:55"><block pos:start="137:13" pos:end="137:55">{ <expr pos:start="137:15" pos:end="137:33"><name pos:start="137:15" pos:end="137:33">FSL_IMX6_UART1_ADDR</name></expr>, <expr pos:start="137:36" pos:end="137:53"><name pos:start="137:36" pos:end="137:53">FSL_IMX6_UART1_IRQ</name></expr> }</block></expr>,

            <expr pos:start="139:13" pos:end="139:55"><block pos:start="139:13" pos:end="139:55">{ <expr pos:start="139:15" pos:end="139:33"><name pos:start="139:15" pos:end="139:33">FSL_IMX6_UART2_ADDR</name></expr>, <expr pos:start="139:36" pos:end="139:53"><name pos:start="139:36" pos:end="139:53">FSL_IMX6_UART2_IRQ</name></expr> }</block></expr>,

            <expr pos:start="141:13" pos:end="141:55"><block pos:start="141:13" pos:end="141:55">{ <expr pos:start="141:15" pos:end="141:33"><name pos:start="141:15" pos:end="141:33">FSL_IMX6_UART3_ADDR</name></expr>, <expr pos:start="141:36" pos:end="141:53"><name pos:start="141:36" pos:end="141:53">FSL_IMX6_UART3_IRQ</name></expr> }</block></expr>,

            <expr pos:start="143:13" pos:end="143:55"><block pos:start="143:13" pos:end="143:55">{ <expr pos:start="143:15" pos:end="143:33"><name pos:start="143:15" pos:end="143:33">FSL_IMX6_UART4_ADDR</name></expr>, <expr pos:start="143:36" pos:end="143:53"><name pos:start="143:36" pos:end="143:53">FSL_IMX6_UART4_IRQ</name></expr> }</block></expr>,

            <expr pos:start="145:13" pos:end="145:55"><block pos:start="145:13" pos:end="145:55">{ <expr pos:start="145:15" pos:end="145:33"><name pos:start="145:15" pos:end="145:33">FSL_IMX6_UART5_ADDR</name></expr>, <expr pos:start="145:36" pos:end="145:53"><name pos:start="145:36" pos:end="145:53">FSL_IMX6_UART5_IRQ</name></expr> }</block></expr>,

        }</block></expr></init></decl>;</struct>



        <if_stmt pos:start="151:9" pos:end="177:9"><if pos:start="151:9" pos:end="177:9">if <condition pos:start="151:12" pos:end="151:33">(<expr pos:start="151:13" pos:end="151:32"><name pos:start="151:13" pos:end="151:13">i</name> <operator pos:start="151:15" pos:end="151:15">&lt;</operator> <name pos:start="151:17" pos:end="151:32">MAX_SERIAL_PORTS</name></expr>)</condition> <block pos:start="151:35" pos:end="177:9">{<block_content pos:start="153:13" pos:end="175:67">

            <decl_stmt pos:start="153:13" pos:end="153:25"><decl pos:start="153:13" pos:end="153:24"><type pos:start="153:13" pos:end="153:21"><name pos:start="153:13" pos:end="153:19">Chardev</name> <modifier pos:start="153:21" pos:end="153:21">*</modifier></type><name pos:start="153:22" pos:end="153:24">chr</name></decl>;</decl_stmt>



            <expr_stmt pos:start="157:13" pos:end="157:32"><expr pos:start="157:13" pos:end="157:31"><name pos:start="157:13" pos:end="157:15">chr</name> <operator pos:start="157:17" pos:end="157:17">=</operator> <name pos:start="157:19" pos:end="157:31"><name pos:start="157:19" pos:end="157:28">serial_hds</name><index pos:start="157:29" pos:end="157:31">[<expr pos:start="157:30" pos:end="157:30"><name pos:start="157:30" pos:end="157:30">i</name></expr>]</index></name></expr>;</expr_stmt>



            <if_stmt pos:start="161:13" pos:end="171:13"><if pos:start="161:13" pos:end="171:13">if <condition pos:start="161:16" pos:end="161:21">(<expr pos:start="161:17" pos:end="161:20"><operator pos:start="161:17" pos:end="161:17">!</operator><name pos:start="161:18" pos:end="161:20">chr</name></expr>)</condition> <block pos:start="161:23" pos:end="171:13">{<block_content pos:start="163:17" pos:end="169:36">

                <decl_stmt pos:start="163:17" pos:end="163:68"><decl pos:start="163:17" pos:end="163:67"><type pos:start="163:17" pos:end="163:22"><name pos:start="163:17" pos:end="163:20">char</name> <modifier pos:start="163:22" pos:end="163:22">*</modifier></type><name pos:start="163:23" pos:end="163:27">label</name> <init pos:start="163:29" pos:end="163:67">= <expr pos:start="163:31" pos:end="163:67"><call pos:start="163:31" pos:end="163:67"><name pos:start="163:31" pos:end="163:45">g_strdup_printf</name><argument_list pos:start="163:46" pos:end="163:67">(<argument pos:start="163:47" pos:end="163:59"><expr pos:start="163:47" pos:end="163:59"><literal type="string" pos:start="163:47" pos:end="163:59">"imx6.uart%d"</literal></expr></argument>, <argument pos:start="163:62" pos:end="163:66"><expr pos:start="163:62" pos:end="163:66"><name pos:start="163:62" pos:end="163:62">i</name> <operator pos:start="163:64" pos:end="163:64">+</operator> <literal type="number" pos:start="163:66" pos:end="163:66">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="165:17" pos:end="165:50"><expr pos:start="165:17" pos:end="165:49"><name pos:start="165:17" pos:end="165:19">chr</name> <operator pos:start="165:21" pos:end="165:21">=</operator> <call pos:start="165:23" pos:end="165:49"><name pos:start="165:23" pos:end="165:34">qemu_chr_new</name><argument_list pos:start="165:35" pos:end="165:49">(<argument pos:start="165:36" pos:end="165:40"><expr pos:start="165:36" pos:end="165:40"><name pos:start="165:36" pos:end="165:40">label</name></expr></argument>, <argument pos:start="165:43" pos:end="165:48"><expr pos:start="165:43" pos:end="165:48"><literal type="string" pos:start="165:43" pos:end="165:48">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="167:17" pos:end="167:30"><expr pos:start="167:17" pos:end="167:29"><call pos:start="167:17" pos:end="167:29"><name pos:start="167:17" pos:end="167:22">g_free</name><argument_list pos:start="167:23" pos:end="167:29">(<argument pos:start="167:24" pos:end="167:28"><expr pos:start="167:24" pos:end="167:28"><name pos:start="167:24" pos:end="167:28">label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="169:17" pos:end="169:36"><expr pos:start="169:17" pos:end="169:35"><name pos:start="169:17" pos:end="169:29"><name pos:start="169:17" pos:end="169:26">serial_hds</name><index pos:start="169:27" pos:end="169:29">[<expr pos:start="169:28" pos:end="169:28"><name pos:start="169:28" pos:end="169:28">i</name></expr>]</index></name> <operator pos:start="169:31" pos:end="169:31">=</operator> <name pos:start="169:33" pos:end="169:35">chr</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="175:13" pos:end="175:67"><expr pos:start="175:13" pos:end="175:66"><call pos:start="175:13" pos:end="175:66"><name pos:start="175:13" pos:end="175:29">qdev_prop_set_chr</name><argument_list pos:start="175:30" pos:end="175:66">(<argument pos:start="175:31" pos:end="175:49"><expr pos:start="175:31" pos:end="175:49"><call pos:start="175:31" pos:end="175:49"><name pos:start="175:31" pos:end="175:36">DEVICE</name><argument_list pos:start="175:37" pos:end="175:49">(<argument pos:start="175:38" pos:end="175:48"><expr pos:start="175:38" pos:end="175:48"><operator pos:start="175:38" pos:end="175:38">&amp;</operator><name pos:start="175:39" pos:end="175:48"><name pos:start="175:39" pos:end="175:39">s</name><operator pos:start="175:40" pos:end="175:41">-&gt;</operator><name pos:start="175:42" pos:end="175:45">uart</name><index pos:start="175:46" pos:end="175:48">[<expr pos:start="175:47" pos:end="175:47"><name pos:start="175:47" pos:end="175:47">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="175:52" pos:end="175:60"><expr pos:start="175:52" pos:end="175:60"><literal type="string" pos:start="175:52" pos:end="175:60">"chardev"</literal></expr></argument>, <argument pos:start="175:63" pos:end="175:65"><expr pos:start="175:63" pos:end="175:65"><name pos:start="175:63" pos:end="175:65">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="181:9" pos:end="181:78"><expr pos:start="181:9" pos:end="181:77"><call pos:start="181:9" pos:end="181:77"><name pos:start="181:9" pos:end="181:32">object_property_set_bool</name><argument_list pos:start="181:33" pos:end="181:77">(<argument pos:start="181:34" pos:end="181:52"><expr pos:start="181:34" pos:end="181:52"><call pos:start="181:34" pos:end="181:52"><name pos:start="181:34" pos:end="181:39">OBJECT</name><argument_list pos:start="181:40" pos:end="181:52">(<argument pos:start="181:41" pos:end="181:51"><expr pos:start="181:41" pos:end="181:51"><operator pos:start="181:41" pos:end="181:41">&amp;</operator><name pos:start="181:42" pos:end="181:51"><name pos:start="181:42" pos:end="181:42">s</name><operator pos:start="181:43" pos:end="181:44">-&gt;</operator><name pos:start="181:45" pos:end="181:48">uart</name><index pos:start="181:49" pos:end="181:51">[<expr pos:start="181:50" pos:end="181:50"><name pos:start="181:50" pos:end="181:50">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="181:55" pos:end="181:58"><expr pos:start="181:55" pos:end="181:58"><name pos:start="181:55" pos:end="181:58">true</name></expr></argument>, <argument pos:start="181:61" pos:end="181:70"><expr pos:start="181:61" pos:end="181:70"><literal type="string" pos:start="181:61" pos:end="181:70">"realized"</literal></expr></argument>, <argument pos:start="181:73" pos:end="181:76"><expr pos:start="181:73" pos:end="181:76"><operator pos:start="181:73" pos:end="181:73">&amp;</operator><name pos:start="181:74" pos:end="181:76">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="183:9" pos:end="189:9"><if pos:start="183:9" pos:end="189:9">if <condition pos:start="183:12" pos:end="183:16">(<expr pos:start="183:13" pos:end="183:15"><name pos:start="183:13" pos:end="183:15">err</name></expr>)</condition> <block pos:start="183:18" pos:end="189:9">{<block_content pos:start="185:13" pos:end="187:19">

            <expr_stmt pos:start="185:13" pos:end="185:39"><expr pos:start="185:13" pos:end="185:38"><call pos:start="185:13" pos:end="185:38"><name pos:start="185:13" pos:end="185:27">error_propagate</name><argument_list pos:start="185:28" pos:end="185:38">(<argument pos:start="185:29" pos:end="185:32"><expr pos:start="185:29" pos:end="185:32"><name pos:start="185:29" pos:end="185:32">errp</name></expr></argument>, <argument pos:start="185:35" pos:end="185:37"><expr pos:start="185:35" pos:end="185:37"><name pos:start="185:35" pos:end="185:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="187:13" pos:end="187:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="193:9" pos:end="193:78"><expr pos:start="193:9" pos:end="193:77"><call pos:start="193:9" pos:end="193:77"><name pos:start="193:9" pos:end="193:23">sysbus_mmio_map</name><argument_list pos:start="193:24" pos:end="193:77">(<argument pos:start="193:25" pos:end="193:51"><expr pos:start="193:25" pos:end="193:51"><call pos:start="193:25" pos:end="193:51"><name pos:start="193:25" pos:end="193:38">SYS_BUS_DEVICE</name><argument_list pos:start="193:39" pos:end="193:51">(<argument pos:start="193:40" pos:end="193:50"><expr pos:start="193:40" pos:end="193:50"><operator pos:start="193:40" pos:end="193:40">&amp;</operator><name pos:start="193:41" pos:end="193:50"><name pos:start="193:41" pos:end="193:41">s</name><operator pos:start="193:42" pos:end="193:43">-&gt;</operator><name pos:start="193:44" pos:end="193:47">uart</name><index pos:start="193:48" pos:end="193:50">[<expr pos:start="193:49" pos:end="193:49"><name pos:start="193:49" pos:end="193:49">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="193:54" pos:end="193:54"><expr pos:start="193:54" pos:end="193:54"><literal type="number" pos:start="193:54" pos:end="193:54">0</literal></expr></argument>, <argument pos:start="193:57" pos:end="193:76"><expr pos:start="193:57" pos:end="193:76"><name pos:start="193:57" pos:end="193:71"><name pos:start="193:57" pos:end="193:68">serial_table</name><index pos:start="193:69" pos:end="193:71">[<expr pos:start="193:70" pos:end="193:70"><name pos:start="193:70" pos:end="193:70">i</name></expr>]</index></name><operator pos:start="193:72" pos:end="193:72">.</operator><name pos:start="193:73" pos:end="193:76">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="195:9" pos:end="199:66"><expr pos:start="195:9" pos:end="199:65"><call pos:start="195:9" pos:end="199:65"><name pos:start="195:9" pos:end="195:26">sysbus_connect_irq</name><argument_list pos:start="195:27" pos:end="199:65">(<argument pos:start="195:28" pos:end="195:54"><expr pos:start="195:28" pos:end="195:54"><call pos:start="195:28" pos:end="195:54"><name pos:start="195:28" pos:end="195:41">SYS_BUS_DEVICE</name><argument_list pos:start="195:42" pos:end="195:54">(<argument pos:start="195:43" pos:end="195:53"><expr pos:start="195:43" pos:end="195:53"><operator pos:start="195:43" pos:end="195:43">&amp;</operator><name pos:start="195:44" pos:end="195:53"><name pos:start="195:44" pos:end="195:44">s</name><operator pos:start="195:45" pos:end="195:46">-&gt;</operator><name pos:start="195:47" pos:end="195:50">uart</name><index pos:start="195:51" pos:end="195:53">[<expr pos:start="195:52" pos:end="195:52"><name pos:start="195:52" pos:end="195:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="195:57" pos:end="195:57"><expr pos:start="195:57" pos:end="195:57"><literal type="number" pos:start="195:57" pos:end="195:57">0</literal></expr></argument>,

                           <argument pos:start="197:28" pos:end="199:64"><expr pos:start="197:28" pos:end="199:64"><call pos:start="197:28" pos:end="199:64"><name pos:start="197:28" pos:end="197:43">qdev_get_gpio_in</name><argument_list pos:start="197:44" pos:end="199:64">(<argument pos:start="197:45" pos:end="197:64"><expr pos:start="197:45" pos:end="197:64"><call pos:start="197:45" pos:end="197:64"><name pos:start="197:45" pos:end="197:50">DEVICE</name><argument_list pos:start="197:51" pos:end="197:64">(<argument pos:start="197:52" pos:end="197:63"><expr pos:start="197:52" pos:end="197:63"><operator pos:start="197:52" pos:end="197:52">&amp;</operator><name pos:start="197:53" pos:end="197:63"><name pos:start="197:53" pos:end="197:53">s</name><operator pos:start="197:54" pos:end="197:55">-&gt;</operator><name pos:start="197:56" pos:end="197:63">a9mpcore</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                            <argument pos:start="199:45" pos:end="199:63"><expr pos:start="199:45" pos:end="199:63"><name pos:start="199:45" pos:end="199:59"><name pos:start="199:45" pos:end="199:56">serial_table</name><index pos:start="199:57" pos:end="199:59">[<expr pos:start="199:58" pos:end="199:58"><name pos:start="199:58" pos:end="199:58">i</name></expr>]</index></name><operator pos:start="199:60" pos:end="199:60">.</operator><name pos:start="199:61" pos:end="199:63">irq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="205:5" pos:end="205:34"><expr pos:start="205:5" pos:end="205:33"><name pos:start="205:5" pos:end="205:14"><name pos:start="205:5" pos:end="205:5">s</name><operator pos:start="205:6" pos:end="205:7">-&gt;</operator><name pos:start="205:8" pos:end="205:10">gpt</name><operator pos:start="205:11" pos:end="205:11">.</operator><name pos:start="205:12" pos:end="205:14">ccm</name></name> <operator pos:start="205:16" pos:end="205:16">=</operator> <call pos:start="205:18" pos:end="205:33"><name pos:start="205:18" pos:end="205:24">IMX_CCM</name><argument_list pos:start="205:25" pos:end="205:33">(<argument pos:start="205:26" pos:end="205:32"><expr pos:start="205:26" pos:end="205:32"><operator pos:start="205:26" pos:end="205:26">&amp;</operator><name pos:start="205:27" pos:end="205:32"><name pos:start="205:27" pos:end="205:27">s</name><operator pos:start="205:28" pos:end="205:29">-&gt;</operator><name pos:start="205:30" pos:end="205:32">ccm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="209:5" pos:end="209:70"><expr pos:start="209:5" pos:end="209:69"><call pos:start="209:5" pos:end="209:69"><name pos:start="209:5" pos:end="209:28">object_property_set_bool</name><argument_list pos:start="209:29" pos:end="209:69">(<argument pos:start="209:30" pos:end="209:44"><expr pos:start="209:30" pos:end="209:44"><call pos:start="209:30" pos:end="209:44"><name pos:start="209:30" pos:end="209:35">OBJECT</name><argument_list pos:start="209:36" pos:end="209:44">(<argument pos:start="209:37" pos:end="209:43"><expr pos:start="209:37" pos:end="209:43"><operator pos:start="209:37" pos:end="209:37">&amp;</operator><name pos:start="209:38" pos:end="209:43"><name pos:start="209:38" pos:end="209:38">s</name><operator pos:start="209:39" pos:end="209:40">-&gt;</operator><name pos:start="209:41" pos:end="209:43">gpt</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="209:47" pos:end="209:50"><expr pos:start="209:47" pos:end="209:50"><name pos:start="209:47" pos:end="209:50">true</name></expr></argument>, <argument pos:start="209:53" pos:end="209:62"><expr pos:start="209:53" pos:end="209:62"><literal type="string" pos:start="209:53" pos:end="209:62">"realized"</literal></expr></argument>, <argument pos:start="209:65" pos:end="209:68"><expr pos:start="209:65" pos:end="209:68"><operator pos:start="209:65" pos:end="209:65">&amp;</operator><name pos:start="209:66" pos:end="209:68">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="211:5" pos:end="217:5"><if pos:start="211:5" pos:end="217:5">if <condition pos:start="211:8" pos:end="211:12">(<expr pos:start="211:9" pos:end="211:11"><name pos:start="211:9" pos:end="211:11">err</name></expr>)</condition> <block pos:start="211:14" pos:end="217:5">{<block_content pos:start="213:9" pos:end="215:15">

        <expr_stmt pos:start="213:9" pos:end="213:35"><expr pos:start="213:9" pos:end="213:34"><call pos:start="213:9" pos:end="213:34"><name pos:start="213:9" pos:end="213:23">error_propagate</name><argument_list pos:start="213:24" pos:end="213:34">(<argument pos:start="213:25" pos:end="213:28"><expr pos:start="213:25" pos:end="213:28"><name pos:start="213:25" pos:end="213:28">errp</name></expr></argument>, <argument pos:start="213:31" pos:end="213:33"><expr pos:start="213:31" pos:end="213:33"><name pos:start="213:31" pos:end="213:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="215:9" pos:end="215:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="221:5" pos:end="221:67"><expr pos:start="221:5" pos:end="221:66"><call pos:start="221:5" pos:end="221:66"><name pos:start="221:5" pos:end="221:19">sysbus_mmio_map</name><argument_list pos:start="221:20" pos:end="221:66">(<argument pos:start="221:21" pos:end="221:43"><expr pos:start="221:21" pos:end="221:43"><call pos:start="221:21" pos:end="221:43"><name pos:start="221:21" pos:end="221:34">SYS_BUS_DEVICE</name><argument_list pos:start="221:35" pos:end="221:43">(<argument pos:start="221:36" pos:end="221:42"><expr pos:start="221:36" pos:end="221:42"><operator pos:start="221:36" pos:end="221:36">&amp;</operator><name pos:start="221:37" pos:end="221:42"><name pos:start="221:37" pos:end="221:37">s</name><operator pos:start="221:38" pos:end="221:39">-&gt;</operator><name pos:start="221:40" pos:end="221:42">gpt</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="221:46" pos:end="221:46"><expr pos:start="221:46" pos:end="221:46"><literal type="number" pos:start="221:46" pos:end="221:46">0</literal></expr></argument>, <argument pos:start="221:49" pos:end="221:65"><expr pos:start="221:49" pos:end="221:65"><name pos:start="221:49" pos:end="221:65">FSL_IMX6_GPT_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="223:5" pos:end="227:59"><expr pos:start="223:5" pos:end="227:58"><call pos:start="223:5" pos:end="227:58"><name pos:start="223:5" pos:end="223:22">sysbus_connect_irq</name><argument_list pos:start="223:23" pos:end="227:58">(<argument pos:start="223:24" pos:end="223:46"><expr pos:start="223:24" pos:end="223:46"><call pos:start="223:24" pos:end="223:46"><name pos:start="223:24" pos:end="223:37">SYS_BUS_DEVICE</name><argument_list pos:start="223:38" pos:end="223:46">(<argument pos:start="223:39" pos:end="223:45"><expr pos:start="223:39" pos:end="223:45"><operator pos:start="223:39" pos:end="223:39">&amp;</operator><name pos:start="223:40" pos:end="223:45"><name pos:start="223:40" pos:end="223:40">s</name><operator pos:start="223:41" pos:end="223:42">-&gt;</operator><name pos:start="223:43" pos:end="223:45">gpt</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="223:49" pos:end="223:49"><expr pos:start="223:49" pos:end="223:49"><literal type="number" pos:start="223:49" pos:end="223:49">0</literal></expr></argument>,

                       <argument pos:start="225:24" pos:end="227:57"><expr pos:start="225:24" pos:end="227:57"><call pos:start="225:24" pos:end="227:57"><name pos:start="225:24" pos:end="225:39">qdev_get_gpio_in</name><argument_list pos:start="225:40" pos:end="227:57">(<argument pos:start="225:41" pos:end="225:60"><expr pos:start="225:41" pos:end="225:60"><call pos:start="225:41" pos:end="225:60"><name pos:start="225:41" pos:end="225:46">DEVICE</name><argument_list pos:start="225:47" pos:end="225:60">(<argument pos:start="225:48" pos:end="225:59"><expr pos:start="225:48" pos:end="225:59"><operator pos:start="225:48" pos:end="225:48">&amp;</operator><name pos:start="225:49" pos:end="225:59"><name pos:start="225:49" pos:end="225:49">s</name><operator pos:start="225:50" pos:end="225:51">-&gt;</operator><name pos:start="225:52" pos:end="225:59">a9mpcore</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                        <argument pos:start="227:41" pos:end="227:56"><expr pos:start="227:41" pos:end="227:56"><name pos:start="227:41" pos:end="227:56">FSL_IMX6_GPT_IRQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="231:5" pos:end="231:36">/* Initialize all EPIT timers */</comment>

    <for pos:start="233:5" pos:end="275:5">for <control pos:start="233:9" pos:end="233:44">(<init pos:start="233:10" pos:end="233:15"><expr pos:start="233:10" pos:end="233:14"><name pos:start="233:10" pos:end="233:10">i</name> <operator pos:start="233:12" pos:end="233:12">=</operator> <literal type="number" pos:start="233:14" pos:end="233:14">0</literal></expr>;</init> <condition pos:start="233:17" pos:end="233:39"><expr pos:start="233:17" pos:end="233:38"><name pos:start="233:17" pos:end="233:17">i</name> <operator pos:start="233:19" pos:end="233:19">&lt;</operator> <name pos:start="233:21" pos:end="233:38">FSL_IMX6_NUM_EPITS</name></expr>;</condition> <incr pos:start="233:41" pos:end="233:43"><expr pos:start="233:41" pos:end="233:43"><name pos:start="233:41" pos:end="233:41">i</name><operator pos:start="233:42" pos:end="233:43">++</operator></expr></incr>)</control> <block pos:start="233:46" pos:end="275:5">{<block_content pos:start="235:9" pos:end="273:64">

        <struct pos:start="235:9" pos:end="247:10"><specifier pos:start="235:9" pos:end="235:14">static</specifier> <specifier pos:start="235:16" pos:end="235:20">const</specifier> struct <block pos:start="235:29" pos:end="241:9">{

            <decl_stmt pos:start="237:13" pos:end="237:24"><decl pos:start="237:13" pos:end="237:23"><type pos:start="237:13" pos:end="237:18"><name pos:start="237:13" pos:end="237:18">hwaddr</name></type> <name pos:start="237:20" pos:end="237:23">addr</name></decl>;</decl_stmt>

            <decl_stmt pos:start="239:13" pos:end="239:29"><decl pos:start="239:13" pos:end="239:28"><type pos:start="239:13" pos:end="239:24"><name pos:start="239:13" pos:end="239:20">unsigned</name> <name pos:start="239:22" pos:end="239:24">int</name></type> <name pos:start="239:26" pos:end="239:28">irq</name></decl>;</decl_stmt>

        }</block> <decl pos:start="241:11" pos:end="247:9"><name pos:start="241:11" pos:end="241:40"><name pos:start="241:11" pos:end="241:20">epit_table</name><index pos:start="241:21" pos:end="241:40">[<expr pos:start="241:22" pos:end="241:39"><name pos:start="241:22" pos:end="241:39">FSL_IMX6_NUM_EPITS</name></expr>]</index></name> <init pos:start="241:42" pos:end="247:9">= <expr pos:start="241:44" pos:end="247:9"><block pos:start="241:44" pos:end="247:9">{

            <expr pos:start="243:13" pos:end="243:55"><block pos:start="243:13" pos:end="243:55">{ <expr pos:start="243:15" pos:end="243:33"><name pos:start="243:15" pos:end="243:33">FSL_IMX6_EPIT1_ADDR</name></expr>, <expr pos:start="243:36" pos:end="243:53"><name pos:start="243:36" pos:end="243:53">FSL_IMX6_EPIT1_IRQ</name></expr> }</block></expr>,

            <expr pos:start="245:13" pos:end="245:55"><block pos:start="245:13" pos:end="245:55">{ <expr pos:start="245:15" pos:end="245:33"><name pos:start="245:15" pos:end="245:33">FSL_IMX6_EPIT2_ADDR</name></expr>, <expr pos:start="245:36" pos:end="245:53"><name pos:start="245:36" pos:end="245:53">FSL_IMX6_EPIT2_IRQ</name></expr> }</block></expr>,

        }</block></expr></init></decl>;</struct>



        <expr_stmt pos:start="251:9" pos:end="251:42"><expr pos:start="251:9" pos:end="251:41"><name pos:start="251:9" pos:end="251:18"><name pos:start="251:9" pos:end="251:9">s</name><operator pos:start="251:10" pos:end="251:11">-&gt;</operator><name pos:start="251:12" pos:end="251:15">epit</name><index pos:start="251:16" pos:end="251:18">[<expr pos:start="251:17" pos:end="251:17"><name pos:start="251:17" pos:end="251:17">i</name></expr>]</index></name><operator pos:start="251:19" pos:end="251:19">.</operator><name pos:start="251:20" pos:end="251:22">ccm</name> <operator pos:start="251:24" pos:end="251:24">=</operator> <call pos:start="251:26" pos:end="251:41"><name pos:start="251:26" pos:end="251:32">IMX_CCM</name><argument_list pos:start="251:33" pos:end="251:41">(<argument pos:start="251:34" pos:end="251:40"><expr pos:start="251:34" pos:end="251:40"><operator pos:start="251:34" pos:end="251:34">&amp;</operator><name pos:start="251:35" pos:end="251:40"><name pos:start="251:35" pos:end="251:35">s</name><operator pos:start="251:36" pos:end="251:37">-&gt;</operator><name pos:start="251:38" pos:end="251:40">ccm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="255:9" pos:end="255:78"><expr pos:start="255:9" pos:end="255:77"><call pos:start="255:9" pos:end="255:77"><name pos:start="255:9" pos:end="255:32">object_property_set_bool</name><argument_list pos:start="255:33" pos:end="255:77">(<argument pos:start="255:34" pos:end="255:52"><expr pos:start="255:34" pos:end="255:52"><call pos:start="255:34" pos:end="255:52"><name pos:start="255:34" pos:end="255:39">OBJECT</name><argument_list pos:start="255:40" pos:end="255:52">(<argument pos:start="255:41" pos:end="255:51"><expr pos:start="255:41" pos:end="255:51"><operator pos:start="255:41" pos:end="255:41">&amp;</operator><name pos:start="255:42" pos:end="255:51"><name pos:start="255:42" pos:end="255:42">s</name><operator pos:start="255:43" pos:end="255:44">-&gt;</operator><name pos:start="255:45" pos:end="255:48">epit</name><index pos:start="255:49" pos:end="255:51">[<expr pos:start="255:50" pos:end="255:50"><name pos:start="255:50" pos:end="255:50">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="255:55" pos:end="255:58"><expr pos:start="255:55" pos:end="255:58"><name pos:start="255:55" pos:end="255:58">true</name></expr></argument>, <argument pos:start="255:61" pos:end="255:70"><expr pos:start="255:61" pos:end="255:70"><literal type="string" pos:start="255:61" pos:end="255:70">"realized"</literal></expr></argument>, <argument pos:start="255:73" pos:end="255:76"><expr pos:start="255:73" pos:end="255:76"><operator pos:start="255:73" pos:end="255:73">&amp;</operator><name pos:start="255:74" pos:end="255:76">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="257:9" pos:end="263:9"><if pos:start="257:9" pos:end="263:9">if <condition pos:start="257:12" pos:end="257:16">(<expr pos:start="257:13" pos:end="257:15"><name pos:start="257:13" pos:end="257:15">err</name></expr>)</condition> <block pos:start="257:18" pos:end="263:9">{<block_content pos:start="259:13" pos:end="261:19">

            <expr_stmt pos:start="259:13" pos:end="259:39"><expr pos:start="259:13" pos:end="259:38"><call pos:start="259:13" pos:end="259:38"><name pos:start="259:13" pos:end="259:27">error_propagate</name><argument_list pos:start="259:28" pos:end="259:38">(<argument pos:start="259:29" pos:end="259:32"><expr pos:start="259:29" pos:end="259:32"><name pos:start="259:29" pos:end="259:32">errp</name></expr></argument>, <argument pos:start="259:35" pos:end="259:37"><expr pos:start="259:35" pos:end="259:37"><name pos:start="259:35" pos:end="259:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="261:13" pos:end="261:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="267:9" pos:end="267:76"><expr pos:start="267:9" pos:end="267:75"><call pos:start="267:9" pos:end="267:75"><name pos:start="267:9" pos:end="267:23">sysbus_mmio_map</name><argument_list pos:start="267:24" pos:end="267:75">(<argument pos:start="267:25" pos:end="267:51"><expr pos:start="267:25" pos:end="267:51"><call pos:start="267:25" pos:end="267:51"><name pos:start="267:25" pos:end="267:38">SYS_BUS_DEVICE</name><argument_list pos:start="267:39" pos:end="267:51">(<argument pos:start="267:40" pos:end="267:50"><expr pos:start="267:40" pos:end="267:50"><operator pos:start="267:40" pos:end="267:40">&amp;</operator><name pos:start="267:41" pos:end="267:50"><name pos:start="267:41" pos:end="267:41">s</name><operator pos:start="267:42" pos:end="267:43">-&gt;</operator><name pos:start="267:44" pos:end="267:47">epit</name><index pos:start="267:48" pos:end="267:50">[<expr pos:start="267:49" pos:end="267:49"><name pos:start="267:49" pos:end="267:49">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="267:54" pos:end="267:54"><expr pos:start="267:54" pos:end="267:54"><literal type="number" pos:start="267:54" pos:end="267:54">0</literal></expr></argument>, <argument pos:start="267:57" pos:end="267:74"><expr pos:start="267:57" pos:end="267:74"><name pos:start="267:57" pos:end="267:69"><name pos:start="267:57" pos:end="267:66">epit_table</name><index pos:start="267:67" pos:end="267:69">[<expr pos:start="267:68" pos:end="267:68"><name pos:start="267:68" pos:end="267:68">i</name></expr>]</index></name><operator pos:start="267:70" pos:end="267:70">.</operator><name pos:start="267:71" pos:end="267:74">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="269:9" pos:end="273:64"><expr pos:start="269:9" pos:end="273:63"><call pos:start="269:9" pos:end="273:63"><name pos:start="269:9" pos:end="269:26">sysbus_connect_irq</name><argument_list pos:start="269:27" pos:end="273:63">(<argument pos:start="269:28" pos:end="269:54"><expr pos:start="269:28" pos:end="269:54"><call pos:start="269:28" pos:end="269:54"><name pos:start="269:28" pos:end="269:41">SYS_BUS_DEVICE</name><argument_list pos:start="269:42" pos:end="269:54">(<argument pos:start="269:43" pos:end="269:53"><expr pos:start="269:43" pos:end="269:53"><operator pos:start="269:43" pos:end="269:43">&amp;</operator><name pos:start="269:44" pos:end="269:53"><name pos:start="269:44" pos:end="269:44">s</name><operator pos:start="269:45" pos:end="269:46">-&gt;</operator><name pos:start="269:47" pos:end="269:50">epit</name><index pos:start="269:51" pos:end="269:53">[<expr pos:start="269:52" pos:end="269:52"><name pos:start="269:52" pos:end="269:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="269:57" pos:end="269:57"><expr pos:start="269:57" pos:end="269:57"><literal type="number" pos:start="269:57" pos:end="269:57">0</literal></expr></argument>,

                           <argument pos:start="271:28" pos:end="273:62"><expr pos:start="271:28" pos:end="273:62"><call pos:start="271:28" pos:end="273:62"><name pos:start="271:28" pos:end="271:43">qdev_get_gpio_in</name><argument_list pos:start="271:44" pos:end="273:62">(<argument pos:start="271:45" pos:end="271:64"><expr pos:start="271:45" pos:end="271:64"><call pos:start="271:45" pos:end="271:64"><name pos:start="271:45" pos:end="271:50">DEVICE</name><argument_list pos:start="271:51" pos:end="271:64">(<argument pos:start="271:52" pos:end="271:63"><expr pos:start="271:52" pos:end="271:63"><operator pos:start="271:52" pos:end="271:52">&amp;</operator><name pos:start="271:53" pos:end="271:63"><name pos:start="271:53" pos:end="271:53">s</name><operator pos:start="271:54" pos:end="271:55">-&gt;</operator><name pos:start="271:56" pos:end="271:63">a9mpcore</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                            <argument pos:start="273:45" pos:end="273:61"><expr pos:start="273:45" pos:end="273:61"><name pos:start="273:45" pos:end="273:57"><name pos:start="273:45" pos:end="273:54">epit_table</name><index pos:start="273:55" pos:end="273:57">[<expr pos:start="273:56" pos:end="273:56"><name pos:start="273:56" pos:end="273:56">i</name></expr>]</index></name><operator pos:start="273:58" pos:end="273:58">.</operator><name pos:start="273:59" pos:end="273:61">irq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="279:5" pos:end="279:28">/* Initialize all I2C */</comment>

    <for pos:start="281:5" pos:end="321:5">for <control pos:start="281:9" pos:end="281:43">(<init pos:start="281:10" pos:end="281:15"><expr pos:start="281:10" pos:end="281:14"><name pos:start="281:10" pos:end="281:10">i</name> <operator pos:start="281:12" pos:end="281:12">=</operator> <literal type="number" pos:start="281:14" pos:end="281:14">0</literal></expr>;</init> <condition pos:start="281:17" pos:end="281:38"><expr pos:start="281:17" pos:end="281:37"><name pos:start="281:17" pos:end="281:17">i</name> <operator pos:start="281:19" pos:end="281:19">&lt;</operator> <name pos:start="281:21" pos:end="281:37">FSL_IMX6_NUM_I2CS</name></expr>;</condition> <incr pos:start="281:40" pos:end="281:42"><expr pos:start="281:40" pos:end="281:42"><name pos:start="281:40" pos:end="281:40">i</name><operator pos:start="281:41" pos:end="281:42">++</operator></expr></incr>)</control> <block pos:start="281:45" pos:end="321:5">{<block_content pos:start="283:9" pos:end="319:63">

        <struct pos:start="283:9" pos:end="297:10"><specifier pos:start="283:9" pos:end="283:14">static</specifier> <specifier pos:start="283:16" pos:end="283:20">const</specifier> struct <block pos:start="283:29" pos:end="289:9">{

            <decl_stmt pos:start="285:13" pos:end="285:24"><decl pos:start="285:13" pos:end="285:23"><type pos:start="285:13" pos:end="285:18"><name pos:start="285:13" pos:end="285:18">hwaddr</name></type> <name pos:start="285:20" pos:end="285:23">addr</name></decl>;</decl_stmt>

            <decl_stmt pos:start="287:13" pos:end="287:29"><decl pos:start="287:13" pos:end="287:28"><type pos:start="287:13" pos:end="287:24"><name pos:start="287:13" pos:end="287:20">unsigned</name> <name pos:start="287:22" pos:end="287:24">int</name></type> <name pos:start="287:26" pos:end="287:28">irq</name></decl>;</decl_stmt>

        }</block> <decl pos:start="289:11" pos:end="297:9"><name pos:start="289:11" pos:end="289:38"><name pos:start="289:11" pos:end="289:19">i2c_table</name><index pos:start="289:20" pos:end="289:38">[<expr pos:start="289:21" pos:end="289:37"><name pos:start="289:21" pos:end="289:37">FSL_IMX6_NUM_I2CS</name></expr>]</index></name> <init pos:start="289:40" pos:end="297:9">= <expr pos:start="289:42" pos:end="297:9"><block pos:start="289:42" pos:end="297:9">{

            <expr pos:start="291:13" pos:end="291:53"><block pos:start="291:13" pos:end="291:53">{ <expr pos:start="291:15" pos:end="291:32"><name pos:start="291:15" pos:end="291:32">FSL_IMX6_I2C1_ADDR</name></expr>, <expr pos:start="291:35" pos:end="291:51"><name pos:start="291:35" pos:end="291:51">FSL_IMX6_I2C1_IRQ</name></expr> }</block></expr>,

            <expr pos:start="293:13" pos:end="293:53"><block pos:start="293:13" pos:end="293:53">{ <expr pos:start="293:15" pos:end="293:32"><name pos:start="293:15" pos:end="293:32">FSL_IMX6_I2C2_ADDR</name></expr>, <expr pos:start="293:35" pos:end="293:51"><name pos:start="293:35" pos:end="293:51">FSL_IMX6_I2C2_IRQ</name></expr> }</block></expr>,

            <expr pos:start="295:13" pos:end="295:53"><block pos:start="295:13" pos:end="295:53">{ <expr pos:start="295:15" pos:end="295:32"><name pos:start="295:15" pos:end="295:32">FSL_IMX6_I2C3_ADDR</name></expr>, <expr pos:start="295:35" pos:end="295:51"><name pos:start="295:35" pos:end="295:51">FSL_IMX6_I2C3_IRQ</name></expr> }</block></expr>

        }</block></expr></init></decl>;</struct>



        <expr_stmt pos:start="301:9" pos:end="301:77"><expr pos:start="301:9" pos:end="301:76"><call pos:start="301:9" pos:end="301:76"><name pos:start="301:9" pos:end="301:32">object_property_set_bool</name><argument_list pos:start="301:33" pos:end="301:76">(<argument pos:start="301:34" pos:end="301:51"><expr pos:start="301:34" pos:end="301:51"><call pos:start="301:34" pos:end="301:51"><name pos:start="301:34" pos:end="301:39">OBJECT</name><argument_list pos:start="301:40" pos:end="301:51">(<argument pos:start="301:41" pos:end="301:50"><expr pos:start="301:41" pos:end="301:50"><operator pos:start="301:41" pos:end="301:41">&amp;</operator><name pos:start="301:42" pos:end="301:50"><name pos:start="301:42" pos:end="301:42">s</name><operator pos:start="301:43" pos:end="301:44">-&gt;</operator><name pos:start="301:45" pos:end="301:47">i2c</name><index pos:start="301:48" pos:end="301:50">[<expr pos:start="301:49" pos:end="301:49"><name pos:start="301:49" pos:end="301:49">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="301:54" pos:end="301:57"><expr pos:start="301:54" pos:end="301:57"><name pos:start="301:54" pos:end="301:57">true</name></expr></argument>, <argument pos:start="301:60" pos:end="301:69"><expr pos:start="301:60" pos:end="301:69"><literal type="string" pos:start="301:60" pos:end="301:69">"realized"</literal></expr></argument>, <argument pos:start="301:72" pos:end="301:75"><expr pos:start="301:72" pos:end="301:75"><operator pos:start="301:72" pos:end="301:72">&amp;</operator><name pos:start="301:73" pos:end="301:75">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="303:9" pos:end="309:9"><if pos:start="303:9" pos:end="309:9">if <condition pos:start="303:12" pos:end="303:16">(<expr pos:start="303:13" pos:end="303:15"><name pos:start="303:13" pos:end="303:15">err</name></expr>)</condition> <block pos:start="303:18" pos:end="309:9">{<block_content pos:start="305:13" pos:end="307:19">

            <expr_stmt pos:start="305:13" pos:end="305:39"><expr pos:start="305:13" pos:end="305:38"><call pos:start="305:13" pos:end="305:38"><name pos:start="305:13" pos:end="305:27">error_propagate</name><argument_list pos:start="305:28" pos:end="305:38">(<argument pos:start="305:29" pos:end="305:32"><expr pos:start="305:29" pos:end="305:32"><name pos:start="305:29" pos:end="305:32">errp</name></expr></argument>, <argument pos:start="305:35" pos:end="305:37"><expr pos:start="305:35" pos:end="305:37"><name pos:start="305:35" pos:end="305:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="307:13" pos:end="307:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="313:9" pos:end="313:74"><expr pos:start="313:9" pos:end="313:73"><call pos:start="313:9" pos:end="313:73"><name pos:start="313:9" pos:end="313:23">sysbus_mmio_map</name><argument_list pos:start="313:24" pos:end="313:73">(<argument pos:start="313:25" pos:end="313:50"><expr pos:start="313:25" pos:end="313:50"><call pos:start="313:25" pos:end="313:50"><name pos:start="313:25" pos:end="313:38">SYS_BUS_DEVICE</name><argument_list pos:start="313:39" pos:end="313:50">(<argument pos:start="313:40" pos:end="313:49"><expr pos:start="313:40" pos:end="313:49"><operator pos:start="313:40" pos:end="313:40">&amp;</operator><name pos:start="313:41" pos:end="313:49"><name pos:start="313:41" pos:end="313:41">s</name><operator pos:start="313:42" pos:end="313:43">-&gt;</operator><name pos:start="313:44" pos:end="313:46">i2c</name><index pos:start="313:47" pos:end="313:49">[<expr pos:start="313:48" pos:end="313:48"><name pos:start="313:48" pos:end="313:48">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="313:53" pos:end="313:53"><expr pos:start="313:53" pos:end="313:53"><literal type="number" pos:start="313:53" pos:end="313:53">0</literal></expr></argument>, <argument pos:start="313:56" pos:end="313:72"><expr pos:start="313:56" pos:end="313:72"><name pos:start="313:56" pos:end="313:67"><name pos:start="313:56" pos:end="313:64">i2c_table</name><index pos:start="313:65" pos:end="313:67">[<expr pos:start="313:66" pos:end="313:66"><name pos:start="313:66" pos:end="313:66">i</name></expr>]</index></name><operator pos:start="313:68" pos:end="313:68">.</operator><name pos:start="313:69" pos:end="313:72">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="315:9" pos:end="319:63"><expr pos:start="315:9" pos:end="319:62"><call pos:start="315:9" pos:end="319:62"><name pos:start="315:9" pos:end="315:26">sysbus_connect_irq</name><argument_list pos:start="315:27" pos:end="319:62">(<argument pos:start="315:28" pos:end="315:53"><expr pos:start="315:28" pos:end="315:53"><call pos:start="315:28" pos:end="315:53"><name pos:start="315:28" pos:end="315:41">SYS_BUS_DEVICE</name><argument_list pos:start="315:42" pos:end="315:53">(<argument pos:start="315:43" pos:end="315:52"><expr pos:start="315:43" pos:end="315:52"><operator pos:start="315:43" pos:end="315:43">&amp;</operator><name pos:start="315:44" pos:end="315:52"><name pos:start="315:44" pos:end="315:44">s</name><operator pos:start="315:45" pos:end="315:46">-&gt;</operator><name pos:start="315:47" pos:end="315:49">i2c</name><index pos:start="315:50" pos:end="315:52">[<expr pos:start="315:51" pos:end="315:51"><name pos:start="315:51" pos:end="315:51">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="315:56" pos:end="315:56"><expr pos:start="315:56" pos:end="315:56"><literal type="number" pos:start="315:56" pos:end="315:56">0</literal></expr></argument>,

                           <argument pos:start="317:28" pos:end="319:61"><expr pos:start="317:28" pos:end="319:61"><call pos:start="317:28" pos:end="319:61"><name pos:start="317:28" pos:end="317:43">qdev_get_gpio_in</name><argument_list pos:start="317:44" pos:end="319:61">(<argument pos:start="317:45" pos:end="317:64"><expr pos:start="317:45" pos:end="317:64"><call pos:start="317:45" pos:end="317:64"><name pos:start="317:45" pos:end="317:50">DEVICE</name><argument_list pos:start="317:51" pos:end="317:64">(<argument pos:start="317:52" pos:end="317:63"><expr pos:start="317:52" pos:end="317:63"><operator pos:start="317:52" pos:end="317:52">&amp;</operator><name pos:start="317:53" pos:end="317:63"><name pos:start="317:53" pos:end="317:53">s</name><operator pos:start="317:54" pos:end="317:55">-&gt;</operator><name pos:start="317:56" pos:end="317:63">a9mpcore</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                            <argument pos:start="319:45" pos:end="319:60"><expr pos:start="319:45" pos:end="319:60"><name pos:start="319:45" pos:end="319:56"><name pos:start="319:45" pos:end="319:53">i2c_table</name><index pos:start="319:54" pos:end="319:56">[<expr pos:start="319:55" pos:end="319:55"><name pos:start="319:55" pos:end="319:55">i</name></expr>]</index></name><operator pos:start="319:57" pos:end="319:57">.</operator><name pos:start="319:58" pos:end="319:60">irq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="325:5" pos:end="325:30">/* Initialize all GPIOs */</comment>

    <for pos:start="327:5" pos:end="447:5">for <control pos:start="327:9" pos:end="327:44">(<init pos:start="327:10" pos:end="327:15"><expr pos:start="327:10" pos:end="327:14"><name pos:start="327:10" pos:end="327:10">i</name> <operator pos:start="327:12" pos:end="327:12">=</operator> <literal type="number" pos:start="327:14" pos:end="327:14">0</literal></expr>;</init> <condition pos:start="327:17" pos:end="327:39"><expr pos:start="327:17" pos:end="327:38"><name pos:start="327:17" pos:end="327:17">i</name> <operator pos:start="327:19" pos:end="327:19">&lt;</operator> <name pos:start="327:21" pos:end="327:38">FSL_IMX6_NUM_GPIOS</name></expr>;</condition> <incr pos:start="327:41" pos:end="327:43"><expr pos:start="327:41" pos:end="327:43"><name pos:start="327:41" pos:end="327:41">i</name><operator pos:start="327:42" pos:end="327:43">++</operator></expr></incr>)</control> <block pos:start="327:46" pos:end="447:5">{<block_content pos:start="329:9" pos:end="445:69">

        <struct pos:start="329:9" pos:end="409:10"><specifier pos:start="329:9" pos:end="329:14">static</specifier> <specifier pos:start="329:16" pos:end="329:20">const</specifier> struct <block pos:start="329:29" pos:end="337:9">{

            <decl_stmt pos:start="331:13" pos:end="331:24"><decl pos:start="331:13" pos:end="331:23"><type pos:start="331:13" pos:end="331:18"><name pos:start="331:13" pos:end="331:18">hwaddr</name></type> <name pos:start="331:20" pos:end="331:23">addr</name></decl>;</decl_stmt>

            <decl_stmt pos:start="333:13" pos:end="333:33"><decl pos:start="333:13" pos:end="333:32"><type pos:start="333:13" pos:end="333:24"><name pos:start="333:13" pos:end="333:20">unsigned</name> <name pos:start="333:22" pos:end="333:24">int</name></type> <name pos:start="333:26" pos:end="333:32">irq_low</name></decl>;</decl_stmt>

            <decl_stmt pos:start="335:13" pos:end="335:34"><decl pos:start="335:13" pos:end="335:33"><type pos:start="335:13" pos:end="335:24"><name pos:start="335:13" pos:end="335:20">unsigned</name> <name pos:start="335:22" pos:end="335:24">int</name></type> <name pos:start="335:26" pos:end="335:33">irq_high</name></decl>;</decl_stmt>

        }</block> <decl pos:start="337:11" pos:end="409:9"><name pos:start="337:11" pos:end="337:40"><name pos:start="337:11" pos:end="337:20">gpio_table</name><index pos:start="337:21" pos:end="337:40">[<expr pos:start="337:22" pos:end="337:39"><name pos:start="337:22" pos:end="337:39">FSL_IMX6_NUM_GPIOS</name></expr>]</index></name> <init pos:start="337:42" pos:end="409:9">= <expr pos:start="337:44" pos:end="409:9"><block pos:start="337:44" pos:end="409:9">{

            <expr pos:start="339:13" pos:end="347:13"><block pos:start="339:13" pos:end="347:13">{

                <expr pos:start="341:17" pos:end="341:35"><name pos:start="341:17" pos:end="341:35">FSL_IMX6_GPIO1_ADDR</name></expr>,

                <expr pos:start="343:17" pos:end="343:38"><name pos:start="343:17" pos:end="343:38">FSL_IMX6_GPIO1_LOW_IRQ</name></expr>,

                <expr pos:start="345:17" pos:end="345:39"><name pos:start="345:17" pos:end="345:39">FSL_IMX6_GPIO1_HIGH_IRQ</name></expr>

            }</block></expr>,

            <expr pos:start="349:13" pos:end="357:13"><block pos:start="349:13" pos:end="357:13">{

                <expr pos:start="351:17" pos:end="351:35"><name pos:start="351:17" pos:end="351:35">FSL_IMX6_GPIO2_ADDR</name></expr>,

                <expr pos:start="353:17" pos:end="353:38"><name pos:start="353:17" pos:end="353:38">FSL_IMX6_GPIO2_LOW_IRQ</name></expr>,

                <expr pos:start="355:17" pos:end="355:39"><name pos:start="355:17" pos:end="355:39">FSL_IMX6_GPIO2_HIGH_IRQ</name></expr>

            }</block></expr>,

            <expr pos:start="359:13" pos:end="367:13"><block pos:start="359:13" pos:end="367:13">{

                <expr pos:start="361:17" pos:end="361:35"><name pos:start="361:17" pos:end="361:35">FSL_IMX6_GPIO3_ADDR</name></expr>,

                <expr pos:start="363:17" pos:end="363:38"><name pos:start="363:17" pos:end="363:38">FSL_IMX6_GPIO3_LOW_IRQ</name></expr>,

                <expr pos:start="365:17" pos:end="365:39"><name pos:start="365:17" pos:end="365:39">FSL_IMX6_GPIO3_HIGH_IRQ</name></expr>

            }</block></expr>,

            <expr pos:start="369:13" pos:end="377:13"><block pos:start="369:13" pos:end="377:13">{

                <expr pos:start="371:17" pos:end="371:35"><name pos:start="371:17" pos:end="371:35">FSL_IMX6_GPIO4_ADDR</name></expr>,

                <expr pos:start="373:17" pos:end="373:38"><name pos:start="373:17" pos:end="373:38">FSL_IMX6_GPIO4_LOW_IRQ</name></expr>,

                <expr pos:start="375:17" pos:end="375:39"><name pos:start="375:17" pos:end="375:39">FSL_IMX6_GPIO4_HIGH_IRQ</name></expr>

            }</block></expr>,

            <expr pos:start="379:13" pos:end="387:13"><block pos:start="379:13" pos:end="387:13">{

                <expr pos:start="381:17" pos:end="381:35"><name pos:start="381:17" pos:end="381:35">FSL_IMX6_GPIO5_ADDR</name></expr>,

                <expr pos:start="383:17" pos:end="383:38"><name pos:start="383:17" pos:end="383:38">FSL_IMX6_GPIO5_LOW_IRQ</name></expr>,

                <expr pos:start="385:17" pos:end="385:39"><name pos:start="385:17" pos:end="385:39">FSL_IMX6_GPIO5_HIGH_IRQ</name></expr>

            }</block></expr>,

            <expr pos:start="389:13" pos:end="397:13"><block pos:start="389:13" pos:end="397:13">{

                <expr pos:start="391:17" pos:end="391:35"><name pos:start="391:17" pos:end="391:35">FSL_IMX6_GPIO6_ADDR</name></expr>,

                <expr pos:start="393:17" pos:end="393:38"><name pos:start="393:17" pos:end="393:38">FSL_IMX6_GPIO6_LOW_IRQ</name></expr>,

                <expr pos:start="395:17" pos:end="395:39"><name pos:start="395:17" pos:end="395:39">FSL_IMX6_GPIO6_HIGH_IRQ</name></expr>

            }</block></expr>,

            <expr pos:start="399:13" pos:end="407:13"><block pos:start="399:13" pos:end="407:13">{

                <expr pos:start="401:17" pos:end="401:35"><name pos:start="401:17" pos:end="401:35">FSL_IMX6_GPIO7_ADDR</name></expr>,

                <expr pos:start="403:17" pos:end="403:38"><name pos:start="403:17" pos:end="403:38">FSL_IMX6_GPIO7_LOW_IRQ</name></expr>,

                <expr pos:start="405:17" pos:end="405:39"><name pos:start="405:17" pos:end="405:39">FSL_IMX6_GPIO7_HIGH_IRQ</name></expr>

            }</block></expr>,

        }</block></expr></init></decl>;</struct>



        <expr_stmt pos:start="413:9" pos:end="415:47"><expr pos:start="413:9" pos:end="415:46"><call pos:start="413:9" pos:end="415:46"><name pos:start="413:9" pos:end="413:32">object_property_set_bool</name><argument_list pos:start="413:33" pos:end="415:46">(<argument pos:start="413:34" pos:end="413:52"><expr pos:start="413:34" pos:end="413:52"><call pos:start="413:34" pos:end="413:52"><name pos:start="413:34" pos:end="413:39">OBJECT</name><argument_list pos:start="413:40" pos:end="413:52">(<argument pos:start="413:41" pos:end="413:51"><expr pos:start="413:41" pos:end="413:51"><operator pos:start="413:41" pos:end="413:41">&amp;</operator><name pos:start="413:42" pos:end="413:51"><name pos:start="413:42" pos:end="413:42">s</name><operator pos:start="413:43" pos:end="413:44">-&gt;</operator><name pos:start="413:45" pos:end="413:48">gpio</name><index pos:start="413:49" pos:end="413:51">[<expr pos:start="413:50" pos:end="413:50"><name pos:start="413:50" pos:end="413:50">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="413:55" pos:end="413:58"><expr pos:start="413:55" pos:end="413:58"><name pos:start="413:55" pos:end="413:58">true</name></expr></argument>, <argument pos:start="413:61" pos:end="413:74"><expr pos:start="413:61" pos:end="413:74"><literal type="string" pos:start="413:61" pos:end="413:74">"has-edge-sel"</literal></expr></argument>,

                                 <argument pos:start="415:34" pos:end="415:45"><expr pos:start="415:34" pos:end="415:45"><operator pos:start="415:34" pos:end="415:34">&amp;</operator><name pos:start="415:35" pos:end="415:45">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="417:9" pos:end="419:47"><expr pos:start="417:9" pos:end="419:46"><call pos:start="417:9" pos:end="419:46"><name pos:start="417:9" pos:end="417:32">object_property_set_bool</name><argument_list pos:start="417:33" pos:end="419:46">(<argument pos:start="417:34" pos:end="417:52"><expr pos:start="417:34" pos:end="417:52"><call pos:start="417:34" pos:end="417:52"><name pos:start="417:34" pos:end="417:39">OBJECT</name><argument_list pos:start="417:40" pos:end="417:52">(<argument pos:start="417:41" pos:end="417:51"><expr pos:start="417:41" pos:end="417:51"><operator pos:start="417:41" pos:end="417:41">&amp;</operator><name pos:start="417:42" pos:end="417:51"><name pos:start="417:42" pos:end="417:42">s</name><operator pos:start="417:43" pos:end="417:44">-&gt;</operator><name pos:start="417:45" pos:end="417:48">gpio</name><index pos:start="417:49" pos:end="417:51">[<expr pos:start="417:50" pos:end="417:50"><name pos:start="417:50" pos:end="417:50">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="417:55" pos:end="417:58"><expr pos:start="417:55" pos:end="417:58"><name pos:start="417:55" pos:end="417:58">true</name></expr></argument>, <argument pos:start="417:61" pos:end="417:79"><expr pos:start="417:61" pos:end="417:79"><literal type="string" pos:start="417:61" pos:end="417:79">"has-upper-pin-irq"</literal></expr></argument>,

                                 <argument pos:start="419:34" pos:end="419:45"><expr pos:start="419:34" pos:end="419:45"><operator pos:start="419:34" pos:end="419:34">&amp;</operator><name pos:start="419:35" pos:end="419:45">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="421:9" pos:end="421:78"><expr pos:start="421:9" pos:end="421:77"><call pos:start="421:9" pos:end="421:77"><name pos:start="421:9" pos:end="421:32">object_property_set_bool</name><argument_list pos:start="421:33" pos:end="421:77">(<argument pos:start="421:34" pos:end="421:52"><expr pos:start="421:34" pos:end="421:52"><call pos:start="421:34" pos:end="421:52"><name pos:start="421:34" pos:end="421:39">OBJECT</name><argument_list pos:start="421:40" pos:end="421:52">(<argument pos:start="421:41" pos:end="421:51"><expr pos:start="421:41" pos:end="421:51"><operator pos:start="421:41" pos:end="421:41">&amp;</operator><name pos:start="421:42" pos:end="421:51"><name pos:start="421:42" pos:end="421:42">s</name><operator pos:start="421:43" pos:end="421:44">-&gt;</operator><name pos:start="421:45" pos:end="421:48">gpio</name><index pos:start="421:49" pos:end="421:51">[<expr pos:start="421:50" pos:end="421:50"><name pos:start="421:50" pos:end="421:50">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="421:55" pos:end="421:58"><expr pos:start="421:55" pos:end="421:58"><name pos:start="421:55" pos:end="421:58">true</name></expr></argument>, <argument pos:start="421:61" pos:end="421:70"><expr pos:start="421:61" pos:end="421:70"><literal type="string" pos:start="421:61" pos:end="421:70">"realized"</literal></expr></argument>, <argument pos:start="421:73" pos:end="421:76"><expr pos:start="421:73" pos:end="421:76"><operator pos:start="421:73" pos:end="421:73">&amp;</operator><name pos:start="421:74" pos:end="421:76">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="423:9" pos:end="429:9"><if pos:start="423:9" pos:end="429:9">if <condition pos:start="423:12" pos:end="423:16">(<expr pos:start="423:13" pos:end="423:15"><name pos:start="423:13" pos:end="423:15">err</name></expr>)</condition> <block pos:start="423:18" pos:end="429:9">{<block_content pos:start="425:13" pos:end="427:19">

            <expr_stmt pos:start="425:13" pos:end="425:39"><expr pos:start="425:13" pos:end="425:38"><call pos:start="425:13" pos:end="425:38"><name pos:start="425:13" pos:end="425:27">error_propagate</name><argument_list pos:start="425:28" pos:end="425:38">(<argument pos:start="425:29" pos:end="425:32"><expr pos:start="425:29" pos:end="425:32"><name pos:start="425:29" pos:end="425:32">errp</name></expr></argument>, <argument pos:start="425:35" pos:end="425:37"><expr pos:start="425:35" pos:end="425:37"><name pos:start="425:35" pos:end="425:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="427:13" pos:end="427:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="433:9" pos:end="433:76"><expr pos:start="433:9" pos:end="433:75"><call pos:start="433:9" pos:end="433:75"><name pos:start="433:9" pos:end="433:23">sysbus_mmio_map</name><argument_list pos:start="433:24" pos:end="433:75">(<argument pos:start="433:25" pos:end="433:51"><expr pos:start="433:25" pos:end="433:51"><call pos:start="433:25" pos:end="433:51"><name pos:start="433:25" pos:end="433:38">SYS_BUS_DEVICE</name><argument_list pos:start="433:39" pos:end="433:51">(<argument pos:start="433:40" pos:end="433:50"><expr pos:start="433:40" pos:end="433:50"><operator pos:start="433:40" pos:end="433:40">&amp;</operator><name pos:start="433:41" pos:end="433:50"><name pos:start="433:41" pos:end="433:41">s</name><operator pos:start="433:42" pos:end="433:43">-&gt;</operator><name pos:start="433:44" pos:end="433:47">gpio</name><index pos:start="433:48" pos:end="433:50">[<expr pos:start="433:49" pos:end="433:49"><name pos:start="433:49" pos:end="433:49">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="433:54" pos:end="433:54"><expr pos:start="433:54" pos:end="433:54"><literal type="number" pos:start="433:54" pos:end="433:54">0</literal></expr></argument>, <argument pos:start="433:57" pos:end="433:74"><expr pos:start="433:57" pos:end="433:74"><name pos:start="433:57" pos:end="433:69"><name pos:start="433:57" pos:end="433:66">gpio_table</name><index pos:start="433:67" pos:end="433:69">[<expr pos:start="433:68" pos:end="433:68"><name pos:start="433:68" pos:end="433:68">i</name></expr>]</index></name><operator pos:start="433:70" pos:end="433:70">.</operator><name pos:start="433:71" pos:end="433:74">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="435:9" pos:end="439:68"><expr pos:start="435:9" pos:end="439:67"><call pos:start="435:9" pos:end="439:67"><name pos:start="435:9" pos:end="435:26">sysbus_connect_irq</name><argument_list pos:start="435:27" pos:end="439:67">(<argument pos:start="435:28" pos:end="435:54"><expr pos:start="435:28" pos:end="435:54"><call pos:start="435:28" pos:end="435:54"><name pos:start="435:28" pos:end="435:41">SYS_BUS_DEVICE</name><argument_list pos:start="435:42" pos:end="435:54">(<argument pos:start="435:43" pos:end="435:53"><expr pos:start="435:43" pos:end="435:53"><operator pos:start="435:43" pos:end="435:43">&amp;</operator><name pos:start="435:44" pos:end="435:53"><name pos:start="435:44" pos:end="435:44">s</name><operator pos:start="435:45" pos:end="435:46">-&gt;</operator><name pos:start="435:47" pos:end="435:50">gpio</name><index pos:start="435:51" pos:end="435:53">[<expr pos:start="435:52" pos:end="435:52"><name pos:start="435:52" pos:end="435:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="435:57" pos:end="435:57"><expr pos:start="435:57" pos:end="435:57"><literal type="number" pos:start="435:57" pos:end="435:57">0</literal></expr></argument>,

                           <argument pos:start="437:28" pos:end="439:66"><expr pos:start="437:28" pos:end="439:66"><call pos:start="437:28" pos:end="439:66"><name pos:start="437:28" pos:end="437:43">qdev_get_gpio_in</name><argument_list pos:start="437:44" pos:end="439:66">(<argument pos:start="437:45" pos:end="437:64"><expr pos:start="437:45" pos:end="437:64"><call pos:start="437:45" pos:end="437:64"><name pos:start="437:45" pos:end="437:50">DEVICE</name><argument_list pos:start="437:51" pos:end="437:64">(<argument pos:start="437:52" pos:end="437:63"><expr pos:start="437:52" pos:end="437:63"><operator pos:start="437:52" pos:end="437:52">&amp;</operator><name pos:start="437:53" pos:end="437:63"><name pos:start="437:53" pos:end="437:53">s</name><operator pos:start="437:54" pos:end="437:55">-&gt;</operator><name pos:start="437:56" pos:end="437:63">a9mpcore</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                            <argument pos:start="439:45" pos:end="439:65"><expr pos:start="439:45" pos:end="439:65"><name pos:start="439:45" pos:end="439:57"><name pos:start="439:45" pos:end="439:54">gpio_table</name><index pos:start="439:55" pos:end="439:57">[<expr pos:start="439:56" pos:end="439:56"><name pos:start="439:56" pos:end="439:56">i</name></expr>]</index></name><operator pos:start="439:58" pos:end="439:58">.</operator><name pos:start="439:59" pos:end="439:65">irq_low</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="441:9" pos:end="445:69"><expr pos:start="441:9" pos:end="445:68"><call pos:start="441:9" pos:end="445:68"><name pos:start="441:9" pos:end="441:26">sysbus_connect_irq</name><argument_list pos:start="441:27" pos:end="445:68">(<argument pos:start="441:28" pos:end="441:54"><expr pos:start="441:28" pos:end="441:54"><call pos:start="441:28" pos:end="441:54"><name pos:start="441:28" pos:end="441:41">SYS_BUS_DEVICE</name><argument_list pos:start="441:42" pos:end="441:54">(<argument pos:start="441:43" pos:end="441:53"><expr pos:start="441:43" pos:end="441:53"><operator pos:start="441:43" pos:end="441:43">&amp;</operator><name pos:start="441:44" pos:end="441:53"><name pos:start="441:44" pos:end="441:44">s</name><operator pos:start="441:45" pos:end="441:46">-&gt;</operator><name pos:start="441:47" pos:end="441:50">gpio</name><index pos:start="441:51" pos:end="441:53">[<expr pos:start="441:52" pos:end="441:52"><name pos:start="441:52" pos:end="441:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="441:57" pos:end="441:57"><expr pos:start="441:57" pos:end="441:57"><literal type="number" pos:start="441:57" pos:end="441:57">1</literal></expr></argument>,

                           <argument pos:start="443:28" pos:end="445:67"><expr pos:start="443:28" pos:end="445:67"><call pos:start="443:28" pos:end="445:67"><name pos:start="443:28" pos:end="443:43">qdev_get_gpio_in</name><argument_list pos:start="443:44" pos:end="445:67">(<argument pos:start="443:45" pos:end="443:64"><expr pos:start="443:45" pos:end="443:64"><call pos:start="443:45" pos:end="443:64"><name pos:start="443:45" pos:end="443:50">DEVICE</name><argument_list pos:start="443:51" pos:end="443:64">(<argument pos:start="443:52" pos:end="443:63"><expr pos:start="443:52" pos:end="443:63"><operator pos:start="443:52" pos:end="443:52">&amp;</operator><name pos:start="443:53" pos:end="443:63"><name pos:start="443:53" pos:end="443:53">s</name><operator pos:start="443:54" pos:end="443:55">-&gt;</operator><name pos:start="443:56" pos:end="443:63">a9mpcore</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                            <argument pos:start="445:45" pos:end="445:66"><expr pos:start="445:45" pos:end="445:66"><name pos:start="445:45" pos:end="445:57"><name pos:start="445:45" pos:end="445:54">gpio_table</name><index pos:start="445:55" pos:end="445:57">[<expr pos:start="445:56" pos:end="445:56"><name pos:start="445:56" pos:end="445:56">i</name></expr>]</index></name><operator pos:start="445:58" pos:end="445:58">.</operator><name pos:start="445:59" pos:end="445:66">irq_high</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="451:5" pos:end="451:29">/* Initialize all SDHC */</comment>

    <for pos:start="453:5" pos:end="493:5">for <control pos:start="453:9" pos:end="453:45">(<init pos:start="453:10" pos:end="453:15"><expr pos:start="453:10" pos:end="453:14"><name pos:start="453:10" pos:end="453:10">i</name> <operator pos:start="453:12" pos:end="453:12">=</operator> <literal type="number" pos:start="453:14" pos:end="453:14">0</literal></expr>;</init> <condition pos:start="453:17" pos:end="453:40"><expr pos:start="453:17" pos:end="453:39"><name pos:start="453:17" pos:end="453:17">i</name> <operator pos:start="453:19" pos:end="453:19">&lt;</operator> <name pos:start="453:21" pos:end="453:39">FSL_IMX6_NUM_ESDHCS</name></expr>;</condition> <incr pos:start="453:42" pos:end="453:44"><expr pos:start="453:42" pos:end="453:44"><name pos:start="453:42" pos:end="453:42">i</name><operator pos:start="453:43" pos:end="453:44">++</operator></expr></incr>)</control> <block pos:start="453:47" pos:end="493:5">{<block_content pos:start="455:9" pos:end="491:65">

        <struct pos:start="455:9" pos:end="471:10"><specifier pos:start="455:9" pos:end="455:14">static</specifier> <specifier pos:start="455:16" pos:end="455:20">const</specifier> struct <block pos:start="455:29" pos:end="461:9">{

            <decl_stmt pos:start="457:13" pos:end="457:24"><decl pos:start="457:13" pos:end="457:23"><type pos:start="457:13" pos:end="457:18"><name pos:start="457:13" pos:end="457:18">hwaddr</name></type> <name pos:start="457:20" pos:end="457:23">addr</name></decl>;</decl_stmt>

            <decl_stmt pos:start="459:13" pos:end="459:29"><decl pos:start="459:13" pos:end="459:28"><type pos:start="459:13" pos:end="459:24"><name pos:start="459:13" pos:end="459:20">unsigned</name> <name pos:start="459:22" pos:end="459:24">int</name></type> <name pos:start="459:26" pos:end="459:28">irq</name></decl>;</decl_stmt>

        }</block> <decl pos:start="461:11" pos:end="471:9"><name pos:start="461:11" pos:end="461:42"><name pos:start="461:11" pos:end="461:21">esdhc_table</name><index pos:start="461:22" pos:end="461:42">[<expr pos:start="461:23" pos:end="461:41"><name pos:start="461:23" pos:end="461:41">FSL_IMX6_NUM_ESDHCS</name></expr>]</index></name> <init pos:start="461:44" pos:end="471:9">= <expr pos:start="461:46" pos:end="471:9"><block pos:start="461:46" pos:end="471:9">{

            <expr pos:start="463:13" pos:end="463:57"><block pos:start="463:13" pos:end="463:57">{ <expr pos:start="463:15" pos:end="463:34"><name pos:start="463:15" pos:end="463:34">FSL_IMX6_uSDHC1_ADDR</name></expr>, <expr pos:start="463:37" pos:end="463:55"><name pos:start="463:37" pos:end="463:55">FSL_IMX6_uSDHC1_IRQ</name></expr> }</block></expr>,

            <expr pos:start="465:13" pos:end="465:57"><block pos:start="465:13" pos:end="465:57">{ <expr pos:start="465:15" pos:end="465:34"><name pos:start="465:15" pos:end="465:34">FSL_IMX6_uSDHC2_ADDR</name></expr>, <expr pos:start="465:37" pos:end="465:55"><name pos:start="465:37" pos:end="465:55">FSL_IMX6_uSDHC2_IRQ</name></expr> }</block></expr>,

            <expr pos:start="467:13" pos:end="467:57"><block pos:start="467:13" pos:end="467:57">{ <expr pos:start="467:15" pos:end="467:34"><name pos:start="467:15" pos:end="467:34">FSL_IMX6_uSDHC3_ADDR</name></expr>, <expr pos:start="467:37" pos:end="467:55"><name pos:start="467:37" pos:end="467:55">FSL_IMX6_uSDHC3_IRQ</name></expr> }</block></expr>,

            <expr pos:start="469:13" pos:end="469:57"><block pos:start="469:13" pos:end="469:57">{ <expr pos:start="469:15" pos:end="469:34"><name pos:start="469:15" pos:end="469:34">FSL_IMX6_uSDHC4_ADDR</name></expr>, <expr pos:start="469:37" pos:end="469:55"><name pos:start="469:37" pos:end="469:55">FSL_IMX6_uSDHC4_IRQ</name></expr> }</block></expr>,

        }</block></expr></init></decl>;</struct>



        <expr_stmt pos:start="475:9" pos:end="475:79"><expr pos:start="475:9" pos:end="475:78"><call pos:start="475:9" pos:end="475:78"><name pos:start="475:9" pos:end="475:32">object_property_set_bool</name><argument_list pos:start="475:33" pos:end="475:78">(<argument pos:start="475:34" pos:end="475:53"><expr pos:start="475:34" pos:end="475:53"><call pos:start="475:34" pos:end="475:53"><name pos:start="475:34" pos:end="475:39">OBJECT</name><argument_list pos:start="475:40" pos:end="475:53">(<argument pos:start="475:41" pos:end="475:52"><expr pos:start="475:41" pos:end="475:52"><operator pos:start="475:41" pos:end="475:41">&amp;</operator><name pos:start="475:42" pos:end="475:52"><name pos:start="475:42" pos:end="475:42">s</name><operator pos:start="475:43" pos:end="475:44">-&gt;</operator><name pos:start="475:45" pos:end="475:49">esdhc</name><index pos:start="475:50" pos:end="475:52">[<expr pos:start="475:51" pos:end="475:51"><name pos:start="475:51" pos:end="475:51">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="475:56" pos:end="475:59"><expr pos:start="475:56" pos:end="475:59"><name pos:start="475:56" pos:end="475:59">true</name></expr></argument>, <argument pos:start="475:62" pos:end="475:71"><expr pos:start="475:62" pos:end="475:71"><literal type="string" pos:start="475:62" pos:end="475:71">"realized"</literal></expr></argument>, <argument pos:start="475:74" pos:end="475:77"><expr pos:start="475:74" pos:end="475:77"><operator pos:start="475:74" pos:end="475:74">&amp;</operator><name pos:start="475:75" pos:end="475:77">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="477:9" pos:end="483:9"><if pos:start="477:9" pos:end="483:9">if <condition pos:start="477:12" pos:end="477:16">(<expr pos:start="477:13" pos:end="477:15"><name pos:start="477:13" pos:end="477:15">err</name></expr>)</condition> <block pos:start="477:18" pos:end="483:9">{<block_content pos:start="479:13" pos:end="481:19">

            <expr_stmt pos:start="479:13" pos:end="479:39"><expr pos:start="479:13" pos:end="479:38"><call pos:start="479:13" pos:end="479:38"><name pos:start="479:13" pos:end="479:27">error_propagate</name><argument_list pos:start="479:28" pos:end="479:38">(<argument pos:start="479:29" pos:end="479:32"><expr pos:start="479:29" pos:end="479:32"><name pos:start="479:29" pos:end="479:32">errp</name></expr></argument>, <argument pos:start="479:35" pos:end="479:37"><expr pos:start="479:35" pos:end="479:37"><name pos:start="479:35" pos:end="479:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="481:13" pos:end="481:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="485:9" pos:end="485:78"><expr pos:start="485:9" pos:end="485:77"><call pos:start="485:9" pos:end="485:77"><name pos:start="485:9" pos:end="485:23">sysbus_mmio_map</name><argument_list pos:start="485:24" pos:end="485:77">(<argument pos:start="485:25" pos:end="485:52"><expr pos:start="485:25" pos:end="485:52"><call pos:start="485:25" pos:end="485:52"><name pos:start="485:25" pos:end="485:38">SYS_BUS_DEVICE</name><argument_list pos:start="485:39" pos:end="485:52">(<argument pos:start="485:40" pos:end="485:51"><expr pos:start="485:40" pos:end="485:51"><operator pos:start="485:40" pos:end="485:40">&amp;</operator><name pos:start="485:41" pos:end="485:51"><name pos:start="485:41" pos:end="485:41">s</name><operator pos:start="485:42" pos:end="485:43">-&gt;</operator><name pos:start="485:44" pos:end="485:48">esdhc</name><index pos:start="485:49" pos:end="485:51">[<expr pos:start="485:50" pos:end="485:50"><name pos:start="485:50" pos:end="485:50">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="485:55" pos:end="485:55"><expr pos:start="485:55" pos:end="485:55"><literal type="number" pos:start="485:55" pos:end="485:55">0</literal></expr></argument>, <argument pos:start="485:58" pos:end="485:76"><expr pos:start="485:58" pos:end="485:76"><name pos:start="485:58" pos:end="485:71"><name pos:start="485:58" pos:end="485:68">esdhc_table</name><index pos:start="485:69" pos:end="485:71">[<expr pos:start="485:70" pos:end="485:70"><name pos:start="485:70" pos:end="485:70">i</name></expr>]</index></name><operator pos:start="485:72" pos:end="485:72">.</operator><name pos:start="485:73" pos:end="485:76">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="487:9" pos:end="491:65"><expr pos:start="487:9" pos:end="491:64"><call pos:start="487:9" pos:end="491:64"><name pos:start="487:9" pos:end="487:26">sysbus_connect_irq</name><argument_list pos:start="487:27" pos:end="491:64">(<argument pos:start="487:28" pos:end="487:55"><expr pos:start="487:28" pos:end="487:55"><call pos:start="487:28" pos:end="487:55"><name pos:start="487:28" pos:end="487:41">SYS_BUS_DEVICE</name><argument_list pos:start="487:42" pos:end="487:55">(<argument pos:start="487:43" pos:end="487:54"><expr pos:start="487:43" pos:end="487:54"><operator pos:start="487:43" pos:end="487:43">&amp;</operator><name pos:start="487:44" pos:end="487:54"><name pos:start="487:44" pos:end="487:44">s</name><operator pos:start="487:45" pos:end="487:46">-&gt;</operator><name pos:start="487:47" pos:end="487:51">esdhc</name><index pos:start="487:52" pos:end="487:54">[<expr pos:start="487:53" pos:end="487:53"><name pos:start="487:53" pos:end="487:53">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="487:58" pos:end="487:58"><expr pos:start="487:58" pos:end="487:58"><literal type="number" pos:start="487:58" pos:end="487:58">0</literal></expr></argument>,

                           <argument pos:start="489:28" pos:end="491:63"><expr pos:start="489:28" pos:end="491:63"><call pos:start="489:28" pos:end="491:63"><name pos:start="489:28" pos:end="489:43">qdev_get_gpio_in</name><argument_list pos:start="489:44" pos:end="491:63">(<argument pos:start="489:45" pos:end="489:64"><expr pos:start="489:45" pos:end="489:64"><call pos:start="489:45" pos:end="489:64"><name pos:start="489:45" pos:end="489:50">DEVICE</name><argument_list pos:start="489:51" pos:end="489:64">(<argument pos:start="489:52" pos:end="489:63"><expr pos:start="489:52" pos:end="489:63"><operator pos:start="489:52" pos:end="489:52">&amp;</operator><name pos:start="489:53" pos:end="489:63"><name pos:start="489:53" pos:end="489:53">s</name><operator pos:start="489:54" pos:end="489:55">-&gt;</operator><name pos:start="489:56" pos:end="489:63">a9mpcore</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                            <argument pos:start="491:45" pos:end="491:62"><expr pos:start="491:45" pos:end="491:62"><name pos:start="491:45" pos:end="491:58"><name pos:start="491:45" pos:end="491:55">esdhc_table</name><index pos:start="491:56" pos:end="491:58">[<expr pos:start="491:57" pos:end="491:57"><name pos:start="491:57" pos:end="491:57">i</name></expr>]</index></name><operator pos:start="491:59" pos:end="491:59">.</operator><name pos:start="491:60" pos:end="491:62">irq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="497:5" pos:end="497:30">/* Initialize all ECSPI */</comment>

    <for pos:start="499:5" pos:end="545:5">for <control pos:start="499:9" pos:end="499:45">(<init pos:start="499:10" pos:end="499:15"><expr pos:start="499:10" pos:end="499:14"><name pos:start="499:10" pos:end="499:10">i</name> <operator pos:start="499:12" pos:end="499:12">=</operator> <literal type="number" pos:start="499:14" pos:end="499:14">0</literal></expr>;</init> <condition pos:start="499:17" pos:end="499:40"><expr pos:start="499:17" pos:end="499:39"><name pos:start="499:17" pos:end="499:17">i</name> <operator pos:start="499:19" pos:end="499:19">&lt;</operator> <name pos:start="499:21" pos:end="499:39">FSL_IMX6_NUM_ECSPIS</name></expr>;</condition> <incr pos:start="499:42" pos:end="499:44"><expr pos:start="499:42" pos:end="499:44"><name pos:start="499:42" pos:end="499:42">i</name><operator pos:start="499:43" pos:end="499:44">++</operator></expr></incr>)</control> <block pos:start="499:47" pos:end="545:5">{<block_content pos:start="501:9" pos:end="543:63">

        <struct pos:start="501:9" pos:end="519:10"><specifier pos:start="501:9" pos:end="501:14">static</specifier> <specifier pos:start="501:16" pos:end="501:20">const</specifier> struct <block pos:start="501:29" pos:end="507:9">{

            <decl_stmt pos:start="503:13" pos:end="503:24"><decl pos:start="503:13" pos:end="503:23"><type pos:start="503:13" pos:end="503:18"><name pos:start="503:13" pos:end="503:18">hwaddr</name></type> <name pos:start="503:20" pos:end="503:23">addr</name></decl>;</decl_stmt>

            <decl_stmt pos:start="505:13" pos:end="505:29"><decl pos:start="505:13" pos:end="505:28"><type pos:start="505:13" pos:end="505:24"><name pos:start="505:13" pos:end="505:20">unsigned</name> <name pos:start="505:22" pos:end="505:24">int</name></type> <name pos:start="505:26" pos:end="505:28">irq</name></decl>;</decl_stmt>

        }</block> <decl pos:start="507:11" pos:end="519:9"><name pos:start="507:11" pos:end="507:40"><name pos:start="507:11" pos:end="507:19">spi_table</name><index pos:start="507:20" pos:end="507:40">[<expr pos:start="507:21" pos:end="507:39"><name pos:start="507:21" pos:end="507:39">FSL_IMX6_NUM_ECSPIS</name></expr>]</index></name> <init pos:start="507:42" pos:end="519:9">= <expr pos:start="507:44" pos:end="519:9"><block pos:start="507:44" pos:end="519:9">{

            <expr pos:start="509:13" pos:end="509:57"><block pos:start="509:13" pos:end="509:57">{ <expr pos:start="509:15" pos:end="509:34"><name pos:start="509:15" pos:end="509:34">FSL_IMX6_eCSPI1_ADDR</name></expr>, <expr pos:start="509:37" pos:end="509:55"><name pos:start="509:37" pos:end="509:55">FSL_IMX6_ECSPI1_IRQ</name></expr> }</block></expr>,

            <expr pos:start="511:13" pos:end="511:57"><block pos:start="511:13" pos:end="511:57">{ <expr pos:start="511:15" pos:end="511:34"><name pos:start="511:15" pos:end="511:34">FSL_IMX6_eCSPI2_ADDR</name></expr>, <expr pos:start="511:37" pos:end="511:55"><name pos:start="511:37" pos:end="511:55">FSL_IMX6_ECSPI2_IRQ</name></expr> }</block></expr>,

            <expr pos:start="513:13" pos:end="513:57"><block pos:start="513:13" pos:end="513:57">{ <expr pos:start="513:15" pos:end="513:34"><name pos:start="513:15" pos:end="513:34">FSL_IMX6_eCSPI3_ADDR</name></expr>, <expr pos:start="513:37" pos:end="513:55"><name pos:start="513:37" pos:end="513:55">FSL_IMX6_ECSPI3_IRQ</name></expr> }</block></expr>,

            <expr pos:start="515:13" pos:end="515:57"><block pos:start="515:13" pos:end="515:57">{ <expr pos:start="515:15" pos:end="515:34"><name pos:start="515:15" pos:end="515:34">FSL_IMX6_eCSPI4_ADDR</name></expr>, <expr pos:start="515:37" pos:end="515:55"><name pos:start="515:37" pos:end="515:55">FSL_IMX6_ECSPI4_IRQ</name></expr> }</block></expr>,

            <expr pos:start="517:13" pos:end="517:57"><block pos:start="517:13" pos:end="517:57">{ <expr pos:start="517:15" pos:end="517:34"><name pos:start="517:15" pos:end="517:34">FSL_IMX6_eCSPI5_ADDR</name></expr>, <expr pos:start="517:37" pos:end="517:55"><name pos:start="517:37" pos:end="517:55">FSL_IMX6_ECSPI5_IRQ</name></expr> }</block></expr>,

        }</block></expr></init></decl>;</struct>



        <comment type="block" pos:start="523:9" pos:end="523:32">/* Initialize the SPI */</comment>

        <expr_stmt pos:start="525:9" pos:end="525:77"><expr pos:start="525:9" pos:end="525:76"><call pos:start="525:9" pos:end="525:76"><name pos:start="525:9" pos:end="525:32">object_property_set_bool</name><argument_list pos:start="525:33" pos:end="525:76">(<argument pos:start="525:34" pos:end="525:51"><expr pos:start="525:34" pos:end="525:51"><call pos:start="525:34" pos:end="525:51"><name pos:start="525:34" pos:end="525:39">OBJECT</name><argument_list pos:start="525:40" pos:end="525:51">(<argument pos:start="525:41" pos:end="525:50"><expr pos:start="525:41" pos:end="525:50"><operator pos:start="525:41" pos:end="525:41">&amp;</operator><name pos:start="525:42" pos:end="525:50"><name pos:start="525:42" pos:end="525:42">s</name><operator pos:start="525:43" pos:end="525:44">-&gt;</operator><name pos:start="525:45" pos:end="525:47">spi</name><index pos:start="525:48" pos:end="525:50">[<expr pos:start="525:49" pos:end="525:49"><name pos:start="525:49" pos:end="525:49">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="525:54" pos:end="525:57"><expr pos:start="525:54" pos:end="525:57"><name pos:start="525:54" pos:end="525:57">true</name></expr></argument>, <argument pos:start="525:60" pos:end="525:69"><expr pos:start="525:60" pos:end="525:69"><literal type="string" pos:start="525:60" pos:end="525:69">"realized"</literal></expr></argument>, <argument pos:start="525:72" pos:end="525:75"><expr pos:start="525:72" pos:end="525:75"><operator pos:start="525:72" pos:end="525:72">&amp;</operator><name pos:start="525:73" pos:end="525:75">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="527:9" pos:end="533:9"><if pos:start="527:9" pos:end="533:9">if <condition pos:start="527:12" pos:end="527:16">(<expr pos:start="527:13" pos:end="527:15"><name pos:start="527:13" pos:end="527:15">err</name></expr>)</condition> <block pos:start="527:18" pos:end="533:9">{<block_content pos:start="529:13" pos:end="531:19">

            <expr_stmt pos:start="529:13" pos:end="529:39"><expr pos:start="529:13" pos:end="529:38"><call pos:start="529:13" pos:end="529:38"><name pos:start="529:13" pos:end="529:27">error_propagate</name><argument_list pos:start="529:28" pos:end="529:38">(<argument pos:start="529:29" pos:end="529:32"><expr pos:start="529:29" pos:end="529:32"><name pos:start="529:29" pos:end="529:32">errp</name></expr></argument>, <argument pos:start="529:35" pos:end="529:37"><expr pos:start="529:35" pos:end="529:37"><name pos:start="529:35" pos:end="529:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="531:13" pos:end="531:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="537:9" pos:end="537:74"><expr pos:start="537:9" pos:end="537:73"><call pos:start="537:9" pos:end="537:73"><name pos:start="537:9" pos:end="537:23">sysbus_mmio_map</name><argument_list pos:start="537:24" pos:end="537:73">(<argument pos:start="537:25" pos:end="537:50"><expr pos:start="537:25" pos:end="537:50"><call pos:start="537:25" pos:end="537:50"><name pos:start="537:25" pos:end="537:38">SYS_BUS_DEVICE</name><argument_list pos:start="537:39" pos:end="537:50">(<argument pos:start="537:40" pos:end="537:49"><expr pos:start="537:40" pos:end="537:49"><operator pos:start="537:40" pos:end="537:40">&amp;</operator><name pos:start="537:41" pos:end="537:49"><name pos:start="537:41" pos:end="537:41">s</name><operator pos:start="537:42" pos:end="537:43">-&gt;</operator><name pos:start="537:44" pos:end="537:46">spi</name><index pos:start="537:47" pos:end="537:49">[<expr pos:start="537:48" pos:end="537:48"><name pos:start="537:48" pos:end="537:48">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="537:53" pos:end="537:53"><expr pos:start="537:53" pos:end="537:53"><literal type="number" pos:start="537:53" pos:end="537:53">0</literal></expr></argument>, <argument pos:start="537:56" pos:end="537:72"><expr pos:start="537:56" pos:end="537:72"><name pos:start="537:56" pos:end="537:67"><name pos:start="537:56" pos:end="537:64">spi_table</name><index pos:start="537:65" pos:end="537:67">[<expr pos:start="537:66" pos:end="537:66"><name pos:start="537:66" pos:end="537:66">i</name></expr>]</index></name><operator pos:start="537:68" pos:end="537:68">.</operator><name pos:start="537:69" pos:end="537:72">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="539:9" pos:end="543:63"><expr pos:start="539:9" pos:end="543:62"><call pos:start="539:9" pos:end="543:62"><name pos:start="539:9" pos:end="539:26">sysbus_connect_irq</name><argument_list pos:start="539:27" pos:end="543:62">(<argument pos:start="539:28" pos:end="539:53"><expr pos:start="539:28" pos:end="539:53"><call pos:start="539:28" pos:end="539:53"><name pos:start="539:28" pos:end="539:41">SYS_BUS_DEVICE</name><argument_list pos:start="539:42" pos:end="539:53">(<argument pos:start="539:43" pos:end="539:52"><expr pos:start="539:43" pos:end="539:52"><operator pos:start="539:43" pos:end="539:43">&amp;</operator><name pos:start="539:44" pos:end="539:52"><name pos:start="539:44" pos:end="539:44">s</name><operator pos:start="539:45" pos:end="539:46">-&gt;</operator><name pos:start="539:47" pos:end="539:49">spi</name><index pos:start="539:50" pos:end="539:52">[<expr pos:start="539:51" pos:end="539:51"><name pos:start="539:51" pos:end="539:51">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="539:56" pos:end="539:56"><expr pos:start="539:56" pos:end="539:56"><literal type="number" pos:start="539:56" pos:end="539:56">0</literal></expr></argument>,

                           <argument pos:start="541:28" pos:end="543:61"><expr pos:start="541:28" pos:end="543:61"><call pos:start="541:28" pos:end="543:61"><name pos:start="541:28" pos:end="541:43">qdev_get_gpio_in</name><argument_list pos:start="541:44" pos:end="543:61">(<argument pos:start="541:45" pos:end="541:64"><expr pos:start="541:45" pos:end="541:64"><call pos:start="541:45" pos:end="541:64"><name pos:start="541:45" pos:end="541:50">DEVICE</name><argument_list pos:start="541:51" pos:end="541:64">(<argument pos:start="541:52" pos:end="541:63"><expr pos:start="541:52" pos:end="541:63"><operator pos:start="541:52" pos:end="541:52">&amp;</operator><name pos:start="541:53" pos:end="541:63"><name pos:start="541:53" pos:end="541:53">s</name><operator pos:start="541:54" pos:end="541:55">-&gt;</operator><name pos:start="541:56" pos:end="541:63">a9mpcore</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                            <argument pos:start="543:45" pos:end="543:60"><expr pos:start="543:45" pos:end="543:60"><name pos:start="543:45" pos:end="543:56"><name pos:start="543:45" pos:end="543:53">spi_table</name><index pos:start="543:54" pos:end="543:56">[<expr pos:start="543:55" pos:end="543:55"><name pos:start="543:55" pos:end="543:55">i</name></expr>]</index></name><operator pos:start="543:57" pos:end="543:57">.</operator><name pos:start="543:58" pos:end="543:60">irq</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="549:5" pos:end="549:70"><expr pos:start="549:5" pos:end="549:69"><call pos:start="549:5" pos:end="549:69"><name pos:start="549:5" pos:end="549:28">object_property_set_bool</name><argument_list pos:start="549:29" pos:end="549:69">(<argument pos:start="549:30" pos:end="549:44"><expr pos:start="549:30" pos:end="549:44"><call pos:start="549:30" pos:end="549:44"><name pos:start="549:30" pos:end="549:35">OBJECT</name><argument_list pos:start="549:36" pos:end="549:44">(<argument pos:start="549:37" pos:end="549:43"><expr pos:start="549:37" pos:end="549:43"><operator pos:start="549:37" pos:end="549:37">&amp;</operator><name pos:start="549:38" pos:end="549:43"><name pos:start="549:38" pos:end="549:38">s</name><operator pos:start="549:39" pos:end="549:40">-&gt;</operator><name pos:start="549:41" pos:end="549:43">eth</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="549:47" pos:end="549:50"><expr pos:start="549:47" pos:end="549:50"><name pos:start="549:47" pos:end="549:50">true</name></expr></argument>, <argument pos:start="549:53" pos:end="549:62"><expr pos:start="549:53" pos:end="549:62"><literal type="string" pos:start="549:53" pos:end="549:62">"realized"</literal></expr></argument>, <argument pos:start="549:65" pos:end="549:68"><expr pos:start="549:65" pos:end="549:68"><operator pos:start="549:65" pos:end="549:65">&amp;</operator><name pos:start="549:66" pos:end="549:68">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="551:5" pos:end="557:5"><if pos:start="551:5" pos:end="557:5">if <condition pos:start="551:8" pos:end="551:12">(<expr pos:start="551:9" pos:end="551:11"><name pos:start="551:9" pos:end="551:11">err</name></expr>)</condition> <block pos:start="551:14" pos:end="557:5">{<block_content pos:start="553:9" pos:end="555:15">

        <expr_stmt pos:start="553:9" pos:end="553:35"><expr pos:start="553:9" pos:end="553:34"><call pos:start="553:9" pos:end="553:34"><name pos:start="553:9" pos:end="553:23">error_propagate</name><argument_list pos:start="553:24" pos:end="553:34">(<argument pos:start="553:25" pos:end="553:28"><expr pos:start="553:25" pos:end="553:28"><name pos:start="553:25" pos:end="553:28">errp</name></expr></argument>, <argument pos:start="553:31" pos:end="553:33"><expr pos:start="553:31" pos:end="553:33"><name pos:start="553:31" pos:end="553:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="555:9" pos:end="555:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="559:5" pos:end="559:68"><expr pos:start="559:5" pos:end="559:67"><call pos:start="559:5" pos:end="559:67"><name pos:start="559:5" pos:end="559:19">sysbus_mmio_map</name><argument_list pos:start="559:20" pos:end="559:67">(<argument pos:start="559:21" pos:end="559:43"><expr pos:start="559:21" pos:end="559:43"><call pos:start="559:21" pos:end="559:43"><name pos:start="559:21" pos:end="559:34">SYS_BUS_DEVICE</name><argument_list pos:start="559:35" pos:end="559:43">(<argument pos:start="559:36" pos:end="559:42"><expr pos:start="559:36" pos:end="559:42"><operator pos:start="559:36" pos:end="559:36">&amp;</operator><name pos:start="559:37" pos:end="559:42"><name pos:start="559:37" pos:end="559:37">s</name><operator pos:start="559:38" pos:end="559:39">-&gt;</operator><name pos:start="559:40" pos:end="559:42">eth</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="559:46" pos:end="559:46"><expr pos:start="559:46" pos:end="559:46"><literal type="number" pos:start="559:46" pos:end="559:46">0</literal></expr></argument>, <argument pos:start="559:49" pos:end="559:66"><expr pos:start="559:49" pos:end="559:66"><name pos:start="559:49" pos:end="559:66">FSL_IMX6_ENET_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="561:5" pos:end="565:64"><expr pos:start="561:5" pos:end="565:63"><call pos:start="561:5" pos:end="565:63"><name pos:start="561:5" pos:end="561:22">sysbus_connect_irq</name><argument_list pos:start="561:23" pos:end="565:63">(<argument pos:start="561:24" pos:end="561:46"><expr pos:start="561:24" pos:end="561:46"><call pos:start="561:24" pos:end="561:46"><name pos:start="561:24" pos:end="561:37">SYS_BUS_DEVICE</name><argument_list pos:start="561:38" pos:end="561:46">(<argument pos:start="561:39" pos:end="561:45"><expr pos:start="561:39" pos:end="561:45"><operator pos:start="561:39" pos:end="561:39">&amp;</operator><name pos:start="561:40" pos:end="561:45"><name pos:start="561:40" pos:end="561:40">s</name><operator pos:start="561:41" pos:end="561:42">-&gt;</operator><name pos:start="561:43" pos:end="561:45">eth</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="561:49" pos:end="561:49"><expr pos:start="561:49" pos:end="561:49"><literal type="number" pos:start="561:49" pos:end="561:49">0</literal></expr></argument>,

                       <argument pos:start="563:24" pos:end="565:62"><expr pos:start="563:24" pos:end="565:62"><call pos:start="563:24" pos:end="565:62"><name pos:start="563:24" pos:end="563:39">qdev_get_gpio_in</name><argument_list pos:start="563:40" pos:end="565:62">(<argument pos:start="563:41" pos:end="563:60"><expr pos:start="563:41" pos:end="563:60"><call pos:start="563:41" pos:end="563:60"><name pos:start="563:41" pos:end="563:46">DEVICE</name><argument_list pos:start="563:47" pos:end="563:60">(<argument pos:start="563:48" pos:end="563:59"><expr pos:start="563:48" pos:end="563:59"><operator pos:start="563:48" pos:end="563:48">&amp;</operator><name pos:start="563:49" pos:end="563:59"><name pos:start="563:49" pos:end="563:49">s</name><operator pos:start="563:50" pos:end="563:51">-&gt;</operator><name pos:start="563:52" pos:end="563:59">a9mpcore</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                        <argument pos:start="565:41" pos:end="565:61"><expr pos:start="565:41" pos:end="565:61"><name pos:start="565:41" pos:end="565:61">FSL_IMX6_ENET_MAC_IRQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="567:5" pos:end="571:69"><expr pos:start="567:5" pos:end="571:68"><call pos:start="567:5" pos:end="571:68"><name pos:start="567:5" pos:end="567:22">sysbus_connect_irq</name><argument_list pos:start="567:23" pos:end="571:68">(<argument pos:start="567:24" pos:end="567:46"><expr pos:start="567:24" pos:end="567:46"><call pos:start="567:24" pos:end="567:46"><name pos:start="567:24" pos:end="567:37">SYS_BUS_DEVICE</name><argument_list pos:start="567:38" pos:end="567:46">(<argument pos:start="567:39" pos:end="567:45"><expr pos:start="567:39" pos:end="567:45"><operator pos:start="567:39" pos:end="567:39">&amp;</operator><name pos:start="567:40" pos:end="567:45"><name pos:start="567:40" pos:end="567:40">s</name><operator pos:start="567:41" pos:end="567:42">-&gt;</operator><name pos:start="567:43" pos:end="567:45">eth</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="567:49" pos:end="567:49"><expr pos:start="567:49" pos:end="567:49"><literal type="number" pos:start="567:49" pos:end="567:49">1</literal></expr></argument>,

                       <argument pos:start="569:24" pos:end="571:67"><expr pos:start="569:24" pos:end="571:67"><call pos:start="569:24" pos:end="571:67"><name pos:start="569:24" pos:end="569:39">qdev_get_gpio_in</name><argument_list pos:start="569:40" pos:end="571:67">(<argument pos:start="569:41" pos:end="569:60"><expr pos:start="569:41" pos:end="569:60"><call pos:start="569:41" pos:end="569:60"><name pos:start="569:41" pos:end="569:46">DEVICE</name><argument_list pos:start="569:47" pos:end="569:60">(<argument pos:start="569:48" pos:end="569:59"><expr pos:start="569:48" pos:end="569:59"><operator pos:start="569:48" pos:end="569:48">&amp;</operator><name pos:start="569:49" pos:end="569:59"><name pos:start="569:49" pos:end="569:49">s</name><operator pos:start="569:50" pos:end="569:51">-&gt;</operator><name pos:start="569:52" pos:end="569:59">a9mpcore</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                        <argument pos:start="571:41" pos:end="571:66"><expr pos:start="571:41" pos:end="571:66"><name pos:start="571:41" pos:end="571:66">FSL_IMX6_ENET_MAC_1588_IRQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="575:5" pos:end="575:20">/* ROM memory */</comment>

    <expr_stmt pos:start="577:5" pos:end="579:52"><expr pos:start="577:5" pos:end="579:51"><call pos:start="577:5" pos:end="579:51"><name pos:start="577:5" pos:end="577:36">memory_region_init_rom_nomigrate</name><argument_list pos:start="577:37" pos:end="579:51">(<argument pos:start="577:38" pos:end="577:44"><expr pos:start="577:38" pos:end="577:44"><operator pos:start="577:38" pos:end="577:38">&amp;</operator><name pos:start="577:39" pos:end="577:44"><name pos:start="577:39" pos:end="577:39">s</name><operator pos:start="577:40" pos:end="577:41">-&gt;</operator><name pos:start="577:42" pos:end="577:44">rom</name></name></expr></argument>, <argument pos:start="577:47" pos:end="577:50"><expr pos:start="577:47" pos:end="577:50"><name pos:start="577:47" pos:end="577:50">NULL</name></expr></argument>, <argument pos:start="577:53" pos:end="577:62"><expr pos:start="577:53" pos:end="577:62"><literal type="string" pos:start="577:53" pos:end="577:62">"imx6.rom"</literal></expr></argument>,

                           <argument pos:start="579:28" pos:end="579:44"><expr pos:start="579:28" pos:end="579:44"><name pos:start="579:28" pos:end="579:44">FSL_IMX6_ROM_SIZE</name></expr></argument>, <argument pos:start="579:47" pos:end="579:50"><expr pos:start="579:47" pos:end="579:50"><operator pos:start="579:47" pos:end="579:47">&amp;</operator><name pos:start="579:48" pos:end="579:50">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="581:5" pos:end="587:5"><if pos:start="581:5" pos:end="587:5">if <condition pos:start="581:8" pos:end="581:12">(<expr pos:start="581:9" pos:end="581:11"><name pos:start="581:9" pos:end="581:11">err</name></expr>)</condition> <block pos:start="581:14" pos:end="587:5">{<block_content pos:start="583:9" pos:end="585:15">

        <expr_stmt pos:start="583:9" pos:end="583:35"><expr pos:start="583:9" pos:end="583:34"><call pos:start="583:9" pos:end="583:34"><name pos:start="583:9" pos:end="583:23">error_propagate</name><argument_list pos:start="583:24" pos:end="583:34">(<argument pos:start="583:25" pos:end="583:28"><expr pos:start="583:25" pos:end="583:28"><name pos:start="583:25" pos:end="583:28">errp</name></expr></argument>, <argument pos:start="583:31" pos:end="583:33"><expr pos:start="583:31" pos:end="583:33"><name pos:start="583:31" pos:end="583:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="585:9" pos:end="585:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="589:5" pos:end="591:41"><expr pos:start="589:5" pos:end="591:40"><call pos:start="589:5" pos:end="591:40"><name pos:start="589:5" pos:end="589:31">memory_region_add_subregion</name><argument_list pos:start="589:32" pos:end="591:40">(<argument pos:start="589:33" pos:end="589:51"><expr pos:start="589:33" pos:end="589:51"><call pos:start="589:33" pos:end="589:51"><name pos:start="589:33" pos:end="589:49">get_system_memory</name><argument_list pos:start="589:50" pos:end="589:51">()</argument_list></call></expr></argument>, <argument pos:start="589:54" pos:end="589:70"><expr pos:start="589:54" pos:end="589:70"><name pos:start="589:54" pos:end="589:70">FSL_IMX6_ROM_ADDR</name></expr></argument>,

                                <argument pos:start="591:33" pos:end="591:39"><expr pos:start="591:33" pos:end="591:39"><operator pos:start="591:33" pos:end="591:33">&amp;</operator><name pos:start="591:34" pos:end="591:39"><name pos:start="591:34" pos:end="591:34">s</name><operator pos:start="591:35" pos:end="591:36">-&gt;</operator><name pos:start="591:37" pos:end="591:39">rom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="595:5" pos:end="595:21">/* CAAM memory */</comment>

    <expr_stmt pos:start="597:5" pos:end="599:57"><expr pos:start="597:5" pos:end="599:56"><call pos:start="597:5" pos:end="599:56"><name pos:start="597:5" pos:end="597:36">memory_region_init_rom_nomigrate</name><argument_list pos:start="597:37" pos:end="599:56">(<argument pos:start="597:38" pos:end="597:45"><expr pos:start="597:38" pos:end="597:45"><operator pos:start="597:38" pos:end="597:38">&amp;</operator><name pos:start="597:39" pos:end="597:45"><name pos:start="597:39" pos:end="597:39">s</name><operator pos:start="597:40" pos:end="597:41">-&gt;</operator><name pos:start="597:42" pos:end="597:45">caam</name></name></expr></argument>, <argument pos:start="597:48" pos:end="597:51"><expr pos:start="597:48" pos:end="597:51"><name pos:start="597:48" pos:end="597:51">NULL</name></expr></argument>, <argument pos:start="597:54" pos:end="597:64"><expr pos:start="597:54" pos:end="597:64"><literal type="string" pos:start="597:54" pos:end="597:64">"imx6.caam"</literal></expr></argument>,

                           <argument pos:start="599:28" pos:end="599:49"><expr pos:start="599:28" pos:end="599:49"><name pos:start="599:28" pos:end="599:49">FSL_IMX6_CAAM_MEM_SIZE</name></expr></argument>, <argument pos:start="599:52" pos:end="599:55"><expr pos:start="599:52" pos:end="599:55"><operator pos:start="599:52" pos:end="599:52">&amp;</operator><name pos:start="599:53" pos:end="599:55">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="601:5" pos:end="607:5"><if pos:start="601:5" pos:end="607:5">if <condition pos:start="601:8" pos:end="601:12">(<expr pos:start="601:9" pos:end="601:11"><name pos:start="601:9" pos:end="601:11">err</name></expr>)</condition> <block pos:start="601:14" pos:end="607:5">{<block_content pos:start="603:9" pos:end="605:15">

        <expr_stmt pos:start="603:9" pos:end="603:35"><expr pos:start="603:9" pos:end="603:34"><call pos:start="603:9" pos:end="603:34"><name pos:start="603:9" pos:end="603:23">error_propagate</name><argument_list pos:start="603:24" pos:end="603:34">(<argument pos:start="603:25" pos:end="603:28"><expr pos:start="603:25" pos:end="603:28"><name pos:start="603:25" pos:end="603:28">errp</name></expr></argument>, <argument pos:start="603:31" pos:end="603:33"><expr pos:start="603:31" pos:end="603:33"><name pos:start="603:31" pos:end="603:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="605:9" pos:end="605:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="609:5" pos:end="611:42"><expr pos:start="609:5" pos:end="611:41"><call pos:start="609:5" pos:end="611:41"><name pos:start="609:5" pos:end="609:31">memory_region_add_subregion</name><argument_list pos:start="609:32" pos:end="611:41">(<argument pos:start="609:33" pos:end="609:51"><expr pos:start="609:33" pos:end="609:51"><call pos:start="609:33" pos:end="609:51"><name pos:start="609:33" pos:end="609:49">get_system_memory</name><argument_list pos:start="609:50" pos:end="609:51">()</argument_list></call></expr></argument>, <argument pos:start="609:54" pos:end="609:75"><expr pos:start="609:54" pos:end="609:75"><name pos:start="609:54" pos:end="609:75">FSL_IMX6_CAAM_MEM_ADDR</name></expr></argument>,

                                <argument pos:start="611:33" pos:end="611:40"><expr pos:start="611:33" pos:end="611:40"><operator pos:start="611:33" pos:end="611:33">&amp;</operator><name pos:start="611:34" pos:end="611:40"><name pos:start="611:34" pos:end="611:34">s</name><operator pos:start="611:35" pos:end="611:36">-&gt;</operator><name pos:start="611:37" pos:end="611:40">caam</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="615:5" pos:end="615:22">/* OCRAM memory */</comment>

    <expr_stmt pos:start="617:5" pos:end="619:33"><expr pos:start="617:5" pos:end="619:32"><call pos:start="617:5" pos:end="619:32"><name pos:start="617:5" pos:end="617:26">memory_region_init_ram</name><argument_list pos:start="617:27" pos:end="619:32">(<argument pos:start="617:28" pos:end="617:36"><expr pos:start="617:28" pos:end="617:36"><operator pos:start="617:28" pos:end="617:28">&amp;</operator><name pos:start="617:29" pos:end="617:36"><name pos:start="617:29" pos:end="617:29">s</name><operator pos:start="617:30" pos:end="617:31">-&gt;</operator><name pos:start="617:32" pos:end="617:36">ocram</name></name></expr></argument>, <argument pos:start="617:39" pos:end="617:42"><expr pos:start="617:39" pos:end="617:42"><name pos:start="617:39" pos:end="617:42">NULL</name></expr></argument>, <argument pos:start="617:45" pos:end="617:56"><expr pos:start="617:45" pos:end="617:56"><literal type="string" pos:start="617:45" pos:end="617:56">"imx6.ocram"</literal></expr></argument>, <argument pos:start="617:59" pos:end="617:77"><expr pos:start="617:59" pos:end="617:77"><name pos:start="617:59" pos:end="617:77">FSL_IMX6_OCRAM_SIZE</name></expr></argument>,

                           <argument pos:start="619:28" pos:end="619:31"><expr pos:start="619:28" pos:end="619:31"><operator pos:start="619:28" pos:end="619:28">&amp;</operator><name pos:start="619:29" pos:end="619:31">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="621:5" pos:end="627:5"><if pos:start="621:5" pos:end="627:5">if <condition pos:start="621:8" pos:end="621:12">(<expr pos:start="621:9" pos:end="621:11"><name pos:start="621:9" pos:end="621:11">err</name></expr>)</condition> <block pos:start="621:14" pos:end="627:5">{<block_content pos:start="623:9" pos:end="625:15">

        <expr_stmt pos:start="623:9" pos:end="623:35"><expr pos:start="623:9" pos:end="623:34"><call pos:start="623:9" pos:end="623:34"><name pos:start="623:9" pos:end="623:23">error_propagate</name><argument_list pos:start="623:24" pos:end="623:34">(<argument pos:start="623:25" pos:end="623:28"><expr pos:start="623:25" pos:end="623:28"><name pos:start="623:25" pos:end="623:28">errp</name></expr></argument>, <argument pos:start="623:31" pos:end="623:33"><expr pos:start="623:31" pos:end="623:33"><name pos:start="623:31" pos:end="623:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="625:9" pos:end="625:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="629:5" pos:end="631:43"><expr pos:start="629:5" pos:end="631:42"><call pos:start="629:5" pos:end="631:42"><name pos:start="629:5" pos:end="629:31">memory_region_add_subregion</name><argument_list pos:start="629:32" pos:end="631:42">(<argument pos:start="629:33" pos:end="629:51"><expr pos:start="629:33" pos:end="629:51"><call pos:start="629:33" pos:end="629:51"><name pos:start="629:33" pos:end="629:49">get_system_memory</name><argument_list pos:start="629:50" pos:end="629:51">()</argument_list></call></expr></argument>, <argument pos:start="629:54" pos:end="629:72"><expr pos:start="629:54" pos:end="629:72"><name pos:start="629:54" pos:end="629:72">FSL_IMX6_OCRAM_ADDR</name></expr></argument>,

                                <argument pos:start="631:33" pos:end="631:41"><expr pos:start="631:33" pos:end="631:41"><operator pos:start="631:33" pos:end="631:33">&amp;</operator><name pos:start="631:34" pos:end="631:41"><name pos:start="631:34" pos:end="631:34">s</name><operator pos:start="631:35" pos:end="631:36">-&gt;</operator><name pos:start="631:37" pos:end="631:41">ocram</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="635:5" pos:end="635:54">/* internal OCRAM (256 KB) is aliased over 1 MB */</comment>

    <expr_stmt pos:start="637:5" pos:end="639:70"><expr pos:start="637:5" pos:end="639:69"><call pos:start="637:5" pos:end="639:69"><name pos:start="637:5" pos:end="637:28">memory_region_init_alias</name><argument_list pos:start="637:29" pos:end="639:69">(<argument pos:start="637:30" pos:end="637:44"><expr pos:start="637:30" pos:end="637:44"><operator pos:start="637:30" pos:end="637:30">&amp;</operator><name pos:start="637:31" pos:end="637:44"><name pos:start="637:31" pos:end="637:31">s</name><operator pos:start="637:32" pos:end="637:33">-&gt;</operator><name pos:start="637:34" pos:end="637:44">ocram_alias</name></name></expr></argument>, <argument pos:start="637:47" pos:end="637:50"><expr pos:start="637:47" pos:end="637:50"><name pos:start="637:47" pos:end="637:50">NULL</name></expr></argument>, <argument pos:start="637:53" pos:end="637:70"><expr pos:start="637:53" pos:end="637:70"><literal type="string" pos:start="637:53" pos:end="637:70">"imx6.ocram_alias"</literal></expr></argument>,

                             <argument pos:start="639:30" pos:end="639:38"><expr pos:start="639:30" pos:end="639:38"><operator pos:start="639:30" pos:end="639:30">&amp;</operator><name pos:start="639:31" pos:end="639:38"><name pos:start="639:31" pos:end="639:31">s</name><operator pos:start="639:32" pos:end="639:33">-&gt;</operator><name pos:start="639:34" pos:end="639:38">ocram</name></name></expr></argument>, <argument pos:start="639:41" pos:end="639:41"><expr pos:start="639:41" pos:end="639:41"><literal type="number" pos:start="639:41" pos:end="639:41">0</literal></expr></argument>, <argument pos:start="639:44" pos:end="639:68"><expr pos:start="639:44" pos:end="639:68"><name pos:start="639:44" pos:end="639:68">FSL_IMX6_OCRAM_ALIAS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="641:5" pos:end="643:49"><expr pos:start="641:5" pos:end="643:48"><call pos:start="641:5" pos:end="643:48"><name pos:start="641:5" pos:end="641:31">memory_region_add_subregion</name><argument_list pos:start="641:32" pos:end="643:48">(<argument pos:start="641:33" pos:end="641:51"><expr pos:start="641:33" pos:end="641:51"><call pos:start="641:33" pos:end="641:51"><name pos:start="641:33" pos:end="641:49">get_system_memory</name><argument_list pos:start="641:50" pos:end="641:51">()</argument_list></call></expr></argument>, <argument pos:start="641:54" pos:end="641:78"><expr pos:start="641:54" pos:end="641:78"><name pos:start="641:54" pos:end="641:78">FSL_IMX6_OCRAM_ALIAS_ADDR</name></expr></argument>,

                                <argument pos:start="643:33" pos:end="643:47"><expr pos:start="643:33" pos:end="643:47"><operator pos:start="643:33" pos:end="643:33">&amp;</operator><name pos:start="643:34" pos:end="643:47"><name pos:start="643:34" pos:end="643:34">s</name><operator pos:start="643:35" pos:end="643:36">-&gt;</operator><name pos:start="643:37" pos:end="643:47">ocram_alias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
