<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25056.c" pos:tabs="8"><function pos:start="1:1" pos:end="213:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">mpeg_decode_frame</name><parameter_list pos:start="1:29" pos:end="5:56">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:50"><name pos:start="1:30" pos:end="1:43">AVCodecContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>, 

                             <parameter pos:start="3:30" pos:end="3:39"><decl pos:start="3:30" pos:end="3:39"><type pos:start="3:30" pos:end="3:39"><name pos:start="3:30" pos:end="3:33">void</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:39">data</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:55"><decl pos:start="3:42" pos:end="3:55"><type pos:start="3:42" pos:end="3:55"><name pos:start="3:42" pos:end="3:44">int</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:55">data_size</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:41"><decl pos:start="5:30" pos:end="5:41"><type pos:start="5:30" pos:end="5:41"><name pos:start="5:30" pos:end="5:36">uint8_t</name> <modifier pos:start="5:38" pos:end="5:38">*</modifier></type><name pos:start="5:39" pos:end="5:41">buf</name></decl></parameter>, <parameter pos:start="5:44" pos:end="5:55"><decl pos:start="5:44" pos:end="5:55"><type pos:start="5:44" pos:end="5:55"><name pos:start="5:44" pos:end="5:46">int</name></type> <name pos:start="5:48" pos:end="5:55">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="213:1">{<block_content pos:start="9:5" pos:end="211:5">

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">Mpeg1Context</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:19">s</name> <init pos:start="9:21" pos:end="9:38">= <expr pos:start="9:23" pos:end="9:38"><name pos:start="9:23" pos:end="9:38"><name pos:start="9:23" pos:end="9:27">avctx</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:38">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:20">buf_end</name></decl>, <decl pos:start="11:23" pos:end="11:30"><type ref="prev" pos:start="11:5" pos:end="11:13"><modifier pos:start="11:23" pos:end="11:23">*</modifier></type><name pos:start="11:24" pos:end="11:30">buf_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:36"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>, <decl pos:start="13:14" pos:end="13:23"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:14" pos:end="13:23">start_code</name></decl>, <decl pos:start="13:26" pos:end="13:35"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:26" pos:end="13:35">input_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">AVFrame</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:20">picture</name> <init pos:start="15:22" pos:end="15:27">= <expr pos:start="15:24" pos:end="15:27"><name pos:start="15:24" pos:end="15:27">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:42"><decl pos:start="17:5" pos:end="17:41"><type pos:start="17:5" pos:end="17:20"><name pos:start="17:5" pos:end="17:18">MpegEncContext</name> <modifier pos:start="17:20" pos:end="17:20">*</modifier></type><name pos:start="17:21" pos:end="17:22">s2</name> <init pos:start="17:24" pos:end="17:41">= <expr pos:start="17:26" pos:end="17:41"><operator pos:start="17:26" pos:end="17:26">&amp;</operator><name pos:start="17:27" pos:end="17:41"><name pos:start="17:27" pos:end="17:27">s</name><operator pos:start="17:28" pos:end="17:29">-&gt;</operator><name pos:start="17:30" pos:end="17:41">mpeg_enc_ctx</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:29"><expr pos:start="19:5" pos:end="19:28"><call pos:start="19:5" pos:end="19:28"><name pos:start="19:5" pos:end="19:11">dprintf</name><argument_list pos:start="19:12" pos:end="19:28">(<argument pos:start="19:13" pos:end="19:27"><expr pos:start="19:13" pos:end="19:27"><literal type="string" pos:start="19:13" pos:end="19:27">"fill_buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:19"><expr pos:start="23:5" pos:end="23:18"><operator pos:start="23:5" pos:end="23:5">*</operator><name pos:start="23:6" pos:end="23:14">data_size</name> <operator pos:start="23:16" pos:end="23:16">=</operator> <literal type="number" pos:start="23:18" pos:end="23:18">0</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:39">/* special case for last picture */</comment>

    <if_stmt pos:start="29:5" pos:end="43:5"><if pos:start="29:5" pos:end="43:5">if <condition pos:start="29:8" pos:end="29:22">(<expr pos:start="29:9" pos:end="29:21"><name pos:start="29:9" pos:end="29:16">buf_size</name> <operator pos:start="29:18" pos:end="29:19">==</operator> <literal type="number" pos:start="29:21" pos:end="29:21">0</literal></expr>)</condition> <block pos:start="29:24" pos:end="43:5">{<block_content pos:start="31:9" pos:end="41:17">

        <if_stmt pos:start="31:9" pos:end="39:9"><if pos:start="31:9" pos:end="39:9">if <condition pos:start="31:12" pos:end="31:35">(<expr pos:start="31:13" pos:end="31:34"><name pos:start="31:13" pos:end="31:30"><name pos:start="31:13" pos:end="31:14">s2</name><operator pos:start="31:15" pos:end="31:16">-&gt;</operator><name pos:start="31:17" pos:end="31:30">picture_number</name></name> <operator pos:start="31:32" pos:end="31:32">&gt;</operator> <literal type="number" pos:start="31:34" pos:end="31:34">0</literal></expr>)</condition> <block pos:start="31:37" pos:end="39:9">{<block_content pos:start="33:13" pos:end="37:41">

            <expr_stmt pos:start="33:13" pos:end="33:51"><expr pos:start="33:13" pos:end="33:50"><operator pos:start="33:13" pos:end="33:13">*</operator><name pos:start="33:14" pos:end="33:20">picture</name><operator pos:start="33:21" pos:end="33:21">=</operator> <operator pos:start="33:23" pos:end="33:23">*</operator><operator pos:start="33:24" pos:end="33:24">(</operator><name pos:start="33:25" pos:end="33:31">AVFrame</name><operator pos:start="33:32" pos:end="33:32">*</operator><operator pos:start="33:33" pos:end="33:33">)</operator><operator pos:start="33:34" pos:end="33:34">&amp;</operator><name pos:start="33:35" pos:end="33:50"><name pos:start="33:35" pos:end="33:36">s2</name><operator pos:start="33:37" pos:end="33:38">-&gt;</operator><name pos:start="33:39" pos:end="33:50">next_picture</name></name></expr>;</expr_stmt>



            <expr_stmt pos:start="37:13" pos:end="37:41"><expr pos:start="37:13" pos:end="37:40"><operator pos:start="37:13" pos:end="37:13">*</operator><name pos:start="37:14" pos:end="37:22">data_size</name> <operator pos:start="37:24" pos:end="37:24">=</operator> <sizeof pos:start="37:26" pos:end="37:40">sizeof<argument_list pos:start="37:32" pos:end="37:40">(<argument pos:start="37:33" pos:end="37:39"><expr pos:start="37:33" pos:end="37:39"><name pos:start="37:33" pos:end="37:39">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <return pos:start="41:9" pos:end="41:17">return <expr pos:start="41:16" pos:end="41:16"><literal type="number" pos:start="41:16" pos:end="41:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="47:5" pos:end="61:5"><if pos:start="47:5" pos:end="61:5">if<condition pos:start="47:7" pos:end="47:38">(<expr pos:start="47:8" pos:end="47:37"><name pos:start="47:8" pos:end="47:16"><name pos:start="47:8" pos:end="47:9">s2</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:16">flags</name></name><operator pos:start="47:17" pos:end="47:17">&amp;</operator><name pos:start="47:18" pos:end="47:37">CODEC_FLAG_TRUNCATED</name></expr>)</condition><block pos:start="47:39" pos:end="61:5">{<block_content pos:start="49:9" pos:end="59:28">

        <decl_stmt pos:start="49:9" pos:end="49:17"><decl pos:start="49:9" pos:end="49:16"><type pos:start="49:9" pos:end="49:11"><name pos:start="49:9" pos:end="49:11">int</name></type> <name pos:start="49:13" pos:end="49:16">next</name></decl>;</decl_stmt>

        

        <expr_stmt pos:start="53:9" pos:end="53:54"><expr pos:start="53:9" pos:end="53:53"><name pos:start="53:9" pos:end="53:12">next</name><operator pos:start="53:13" pos:end="53:13">=</operator> <call pos:start="53:15" pos:end="53:53"><name pos:start="53:15" pos:end="53:34">mpeg1_find_frame_end</name><argument_list pos:start="53:35" pos:end="53:53">(<argument pos:start="53:36" pos:end="53:37"><expr pos:start="53:36" pos:end="53:37"><name pos:start="53:36" pos:end="53:37">s2</name></expr></argument>, <argument pos:start="53:40" pos:end="53:42"><expr pos:start="53:40" pos:end="53:42"><name pos:start="53:40" pos:end="53:42">buf</name></expr></argument>, <argument pos:start="53:45" pos:end="53:52"><expr pos:start="53:45" pos:end="53:52"><name pos:start="53:45" pos:end="53:52">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        

        <if_stmt pos:start="57:9" pos:end="59:28"><if pos:start="57:9" pos:end="59:28">if<condition pos:start="57:11" pos:end="57:61">( <expr pos:start="57:13" pos:end="57:59"><call pos:start="57:13" pos:end="57:55"><name pos:start="57:13" pos:end="57:28">ff_combine_frame</name><argument_list pos:start="57:29" pos:end="57:55">(<argument pos:start="57:30" pos:end="57:31"><expr pos:start="57:30" pos:end="57:31"><name pos:start="57:30" pos:end="57:31">s2</name></expr></argument>, <argument pos:start="57:34" pos:end="57:37"><expr pos:start="57:34" pos:end="57:37"><name pos:start="57:34" pos:end="57:37">next</name></expr></argument>, <argument pos:start="57:40" pos:end="57:43"><expr pos:start="57:40" pos:end="57:43"><operator pos:start="57:40" pos:end="57:40">&amp;</operator><name pos:start="57:41" pos:end="57:43">buf</name></expr></argument>, <argument pos:start="57:46" pos:end="57:54"><expr pos:start="57:46" pos:end="57:54"><operator pos:start="57:46" pos:end="57:46">&amp;</operator><name pos:start="57:47" pos:end="57:54">buf_size</name></expr></argument>)</argument_list></call> <operator pos:start="57:57" pos:end="57:57">&lt;</operator> <literal type="number" pos:start="57:59" pos:end="57:59">0</literal></expr> )</condition><block type="pseudo" pos:start="59:13" pos:end="59:28"><block_content pos:start="59:13" pos:end="59:28">

            <return pos:start="59:13" pos:end="59:28">return <expr pos:start="59:20" pos:end="59:27"><name pos:start="59:20" pos:end="59:27">buf_size</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>    

    

    <expr_stmt pos:start="65:5" pos:end="65:18"><expr pos:start="65:5" pos:end="65:17"><name pos:start="65:5" pos:end="65:11">buf_ptr</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <name pos:start="65:15" pos:end="65:17">buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="92:0"><expr pos:start="67:5" pos:end="67:28"><name pos:start="67:5" pos:end="67:11">buf_end</name> <operator pos:start="67:13" pos:end="67:13">=</operator> <name pos:start="67:15" pos:end="67:17">buf</name> <operator pos:start="67:19" pos:end="67:19">+</operator> <name pos:start="67:21" pos:end="67:28">buf_size</name></expr>;</expr_stmt>



<cpp:if pos:start="71:1" pos:end="71:5">#<cpp:directive pos:start="71:2" pos:end="71:3">if</cpp:directive> <expr pos:start="71:5" pos:end="71:5"><literal type="number" pos:start="71:5" pos:end="71:5">0</literal></expr></cpp:if>    

    if (s-&gt;repeat_field % 2 == 1) { 

        s-&gt;repeat_field++;

        <comment type="line" pos:start="77:9" pos:end="77:117">//fprintf(stderr,"\nRepeating last frame: %d -&gt; %d! pict: %d %d", avctx-&gt;frame_number-1, avctx-&gt;frame_number,</comment>

        <comment type="line" pos:start="79:9" pos:end="79:55">//        s2-&gt;picture_number, s-&gt;repeat_field);</comment>

        if (avctx-&gt;flags &amp; CODEC_FLAG_REPEAT_FIELD) {

            *data_size = sizeof(AVPicture);

            goto the_end;

        }

    }

<cpp:endif pos:start="91:1" pos:end="91:6">#<cpp:directive pos:start="91:2" pos:end="91:6">endif</cpp:directive></cpp:endif>

    <for pos:start="93:5" pos:end="211:5">for<control pos:start="93:8" pos:end="93:11">(<init pos:start="93:9" pos:end="93:9">;</init><condition pos:start="93:10" pos:end="93:10">;</condition><incr/>)</control> <block pos:start="93:13" pos:end="211:5">{<block_content pos:start="97:9" pos:end="209:17">

        <comment type="block" pos:start="95:9" pos:end="95:34">/* find start next code */</comment>

        <expr_stmt pos:start="97:9" pos:end="97:56"><expr pos:start="97:9" pos:end="97:55"><name pos:start="97:9" pos:end="97:18">start_code</name> <operator pos:start="97:20" pos:end="97:20">=</operator> <call pos:start="97:22" pos:end="97:55"><name pos:start="97:22" pos:end="97:36">find_start_code</name><argument_list pos:start="97:37" pos:end="97:55">(<argument pos:start="97:38" pos:end="97:45"><expr pos:start="97:38" pos:end="97:45"><operator pos:start="97:38" pos:end="97:38">&amp;</operator><name pos:start="97:39" pos:end="97:45">buf_ptr</name></expr></argument>, <argument pos:start="97:48" pos:end="97:54"><expr pos:start="97:48" pos:end="97:54"><name pos:start="97:48" pos:end="97:54">buf_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="99:9" pos:end="105:9"><if pos:start="99:9" pos:end="105:9">if <condition pos:start="99:12" pos:end="99:27">(<expr pos:start="99:13" pos:end="99:26"><name pos:start="99:13" pos:end="99:22">start_code</name> <operator pos:start="99:24" pos:end="99:24">&lt;</operator> <literal type="number" pos:start="99:26" pos:end="99:26">0</literal></expr>)</condition><block pos:start="99:28" pos:end="105:9">{<block_content pos:start="101:13" pos:end="103:74"> 

            <expr_stmt pos:start="101:13" pos:end="101:47"><expr pos:start="101:13" pos:end="101:46"><call pos:start="101:13" pos:end="101:46"><name pos:start="101:13" pos:end="101:18">printf</name><argument_list pos:start="101:19" pos:end="101:46">(<argument pos:start="101:20" pos:end="101:45"><expr pos:start="101:20" pos:end="101:45"><literal type="string" pos:start="101:20" pos:end="101:45">"missing end of picture\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="103:13" pos:end="103:74">return <expr pos:start="103:20" pos:end="103:73"><call pos:start="103:20" pos:end="103:73"><name pos:start="103:20" pos:end="103:24">FFMAX</name><argument_list pos:start="103:25" pos:end="103:73">(<argument pos:start="103:26" pos:end="103:26"><expr pos:start="103:26" pos:end="103:26"><literal type="number" pos:start="103:26" pos:end="103:26">1</literal></expr></argument>, <argument pos:start="103:29" pos:end="103:72"><expr pos:start="103:29" pos:end="103:72"><name pos:start="103:29" pos:end="103:35">buf_ptr</name> <operator pos:start="103:37" pos:end="103:37">-</operator> <name pos:start="103:39" pos:end="103:41">buf</name> <operator pos:start="103:43" pos:end="103:43">-</operator> <name pos:start="103:45" pos:end="103:72"><name pos:start="103:45" pos:end="103:46">s2</name><operator pos:start="103:47" pos:end="103:48">-&gt;</operator><name pos:start="103:49" pos:end="103:61">parse_context</name><operator pos:start="103:62" pos:end="103:62">.</operator><name pos:start="103:63" pos:end="103:72">last_index</name></name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>



                <comment type="block" pos:start="109:17" pos:end="109:54">/* prepare data for next start code */</comment>

                <expr_stmt pos:start="111:17" pos:end="111:47"><expr pos:start="111:17" pos:end="111:46"><name pos:start="111:17" pos:end="111:26">input_size</name> <operator pos:start="111:28" pos:end="111:28">=</operator> <name pos:start="111:30" pos:end="111:36">buf_end</name> <operator pos:start="111:38" pos:end="111:38">-</operator> <name pos:start="111:40" pos:end="111:46">buf_ptr</name></expr>;</expr_stmt>

                <switch pos:start="113:17" pos:end="209:17">switch<condition pos:start="113:23" pos:end="113:34">(<expr pos:start="113:24" pos:end="113:33"><name pos:start="113:24" pos:end="113:33">start_code</name></expr>)</condition> <block pos:start="113:36" pos:end="209:17">{<block_content pos:start="115:17" pos:end="207:26">

                <case pos:start="115:17" pos:end="115:36">case <expr pos:start="115:22" pos:end="115:35"><name pos:start="115:22" pos:end="115:35">SEQ_START_CODE</name></expr>:</case>

                    <expr_stmt pos:start="117:21" pos:end="119:54"><expr pos:start="117:21" pos:end="119:53"><call pos:start="117:21" pos:end="119:53"><name pos:start="117:21" pos:end="117:41">mpeg1_decode_sequence</name><argument_list pos:start="117:42" pos:end="119:53">(<argument pos:start="117:43" pos:end="117:47"><expr pos:start="117:43" pos:end="117:47"><name pos:start="117:43" pos:end="117:47">avctx</name></expr></argument>, <argument pos:start="117:50" pos:end="117:56"><expr pos:start="117:50" pos:end="117:56"><name pos:start="117:50" pos:end="117:56">buf_ptr</name></expr></argument>, 

                                          <argument pos:start="119:43" pos:end="119:52"><expr pos:start="119:43" pos:end="119:52"><name pos:start="119:43" pos:end="119:52">input_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="121:21" pos:end="121:26">break;</break>

                            

                <case pos:start="125:17" pos:end="125:40">case <expr pos:start="125:22" pos:end="125:39"><name pos:start="125:22" pos:end="125:39">PICTURE_START_CODE</name></expr>:</case>

                    <comment type="block" pos:start="127:21" pos:end="127:76">/* we have a complete image : we try to decompress it */</comment>

                    <expr_stmt pos:start="129:21" pos:end="131:62"><expr pos:start="129:21" pos:end="131:61"><call pos:start="129:21" pos:end="131:61"><name pos:start="129:21" pos:end="129:40">mpeg1_decode_picture</name><argument_list pos:start="129:41" pos:end="131:61">(<argument pos:start="129:42" pos:end="129:46"><expr pos:start="129:42" pos:end="129:46"><name pos:start="129:42" pos:end="129:46">avctx</name></expr></argument>, 

                                         <argument pos:start="131:42" pos:end="131:48"><expr pos:start="131:42" pos:end="131:48"><name pos:start="131:42" pos:end="131:48">buf_ptr</name></expr></argument>, <argument pos:start="131:51" pos:end="131:60"><expr pos:start="131:51" pos:end="131:60"><name pos:start="131:51" pos:end="131:60">input_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="133:21" pos:end="133:26">break;</break>

                <case pos:start="135:17" pos:end="135:36">case <expr pos:start="135:22" pos:end="135:35"><name pos:start="135:22" pos:end="135:35">EXT_START_CODE</name></expr>:</case>

                    <expr_stmt pos:start="137:21" pos:end="139:63"><expr pos:start="137:21" pos:end="139:62"><call pos:start="137:21" pos:end="139:62"><name pos:start="137:21" pos:end="137:41">mpeg_decode_extension</name><argument_list pos:start="137:42" pos:end="139:62">(<argument pos:start="137:43" pos:end="137:47"><expr pos:start="137:43" pos:end="137:47"><name pos:start="137:43" pos:end="137:47">avctx</name></expr></argument>,

                                          <argument pos:start="139:43" pos:end="139:49"><expr pos:start="139:43" pos:end="139:49"><name pos:start="139:43" pos:end="139:49">buf_ptr</name></expr></argument>, <argument pos:start="139:52" pos:end="139:61"><expr pos:start="139:52" pos:end="139:61"><name pos:start="139:52" pos:end="139:61">input_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="141:21" pos:end="141:26">break;</break>

                <case pos:start="143:17" pos:end="143:37">case <expr pos:start="143:22" pos:end="143:36"><name pos:start="143:22" pos:end="143:36">USER_START_CODE</name></expr>:</case>

                    <expr_stmt pos:start="145:21" pos:end="147:63"><expr pos:start="145:21" pos:end="147:62"><call pos:start="145:21" pos:end="147:62"><name pos:start="145:21" pos:end="145:41">mpeg_decode_user_data</name><argument_list pos:start="145:42" pos:end="147:62">(<argument pos:start="145:43" pos:end="145:47"><expr pos:start="145:43" pos:end="145:47"><name pos:start="145:43" pos:end="145:47">avctx</name></expr></argument>, 

                                          <argument pos:start="147:43" pos:end="147:49"><expr pos:start="147:43" pos:end="147:49"><name pos:start="147:43" pos:end="147:49">buf_ptr</name></expr></argument>, <argument pos:start="147:52" pos:end="147:61"><expr pos:start="147:52" pos:end="147:61"><name pos:start="147:52" pos:end="147:61">input_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="149:21" pos:end="149:26">break;</break>

                <default pos:start="151:17" pos:end="151:24">default:</default>

                    <if_stmt pos:start="153:21" pos:end="205:21"><if pos:start="153:21" pos:end="205:21">if <condition pos:start="153:24" pos:end="155:59">(<expr pos:start="153:25" pos:end="155:58"><name pos:start="153:25" pos:end="153:34">start_code</name> <operator pos:start="153:36" pos:end="153:37">&gt;=</operator> <name pos:start="153:39" pos:end="153:58">SLICE_MIN_START_CODE</name> <operator pos:start="153:60" pos:end="153:61">&amp;&amp;</operator>

                        <name pos:start="155:25" pos:end="155:34">start_code</name> <operator pos:start="155:36" pos:end="155:37">&lt;=</operator> <name pos:start="155:39" pos:end="155:58">SLICE_MAX_START_CODE</name></expr>)</condition> <block pos:start="155:61" pos:end="205:21">{<block_content pos:start="161:25" pos:end="203:25">

                        

                        <comment type="block" pos:start="159:25" pos:end="159:76">/* skip b frames if we dont have reference frames */</comment>

                        <if_stmt pos:start="161:25" pos:end="161:86"><if pos:start="161:25" pos:end="161:86">if<condition pos:start="161:27" pos:end="161:79">(<expr pos:start="161:28" pos:end="161:78"><name pos:start="161:28" pos:end="161:47"><name pos:start="161:28" pos:end="161:29">s2</name><operator pos:start="161:30" pos:end="161:31">-&gt;</operator><name pos:start="161:32" pos:end="161:47">last_picture_ptr</name></name><operator pos:start="161:48" pos:end="161:49">==</operator><name pos:start="161:50" pos:end="161:53">NULL</name> <operator pos:start="161:55" pos:end="161:56">&amp;&amp;</operator> <name pos:start="161:58" pos:end="161:70"><name pos:start="161:58" pos:end="161:59">s2</name><operator pos:start="161:60" pos:end="161:61">-&gt;</operator><name pos:start="161:62" pos:end="161:70">pict_type</name></name><operator pos:start="161:71" pos:end="161:72">==</operator><name pos:start="161:73" pos:end="161:78">B_TYPE</name></expr>)</condition><block type="pseudo" pos:start="161:81" pos:end="161:86"><block_content pos:start="161:81" pos:end="161:86"> <break pos:start="161:81" pos:end="161:86">break;</break></block_content></block></if></if_stmt>

                        <comment type="block" pos:start="163:25" pos:end="163:64">/* skip b frames if we are in a hurry */</comment>

                        <if_stmt pos:start="165:25" pos:end="165:75"><if pos:start="165:25" pos:end="165:75">if<condition pos:start="165:27" pos:end="165:68">(<expr pos:start="165:28" pos:end="165:67"><name pos:start="165:28" pos:end="165:42"><name pos:start="165:28" pos:end="165:32">avctx</name><operator pos:start="165:33" pos:end="165:34">-&gt;</operator><name pos:start="165:35" pos:end="165:42">hurry_up</name></name> <operator pos:start="165:44" pos:end="165:45">&amp;&amp;</operator> <name pos:start="165:47" pos:end="165:59"><name pos:start="165:47" pos:end="165:48">s2</name><operator pos:start="165:49" pos:end="165:50">-&gt;</operator><name pos:start="165:51" pos:end="165:59">pict_type</name></name><operator pos:start="165:60" pos:end="165:61">==</operator><name pos:start="165:62" pos:end="165:67">B_TYPE</name></expr>)</condition><block type="pseudo" pos:start="165:70" pos:end="165:75"><block_content pos:start="165:70" pos:end="165:75"> <break pos:start="165:70" pos:end="165:75">break;</break></block_content></block></if></if_stmt>

                        <comment type="block" pos:start="167:25" pos:end="167:69">/* skip everything if we are in a hurry&gt;=5 */</comment>

                        <if_stmt pos:start="169:25" pos:end="169:53"><if pos:start="169:25" pos:end="169:53">if<condition pos:start="169:27" pos:end="169:46">(<expr pos:start="169:28" pos:end="169:45"><name pos:start="169:28" pos:end="169:42"><name pos:start="169:28" pos:end="169:32">avctx</name><operator pos:start="169:33" pos:end="169:34">-&gt;</operator><name pos:start="169:35" pos:end="169:42">hurry_up</name></name><operator pos:start="169:43" pos:end="169:44">&gt;=</operator><literal type="number" pos:start="169:45" pos:end="169:45">5</literal></expr>)</condition><block type="pseudo" pos:start="169:48" pos:end="169:53"><block_content pos:start="169:48" pos:end="169:53"> <break pos:start="169:48" pos:end="169:53">break;</break></block_content></block></if></if_stmt>

                        

                        <if_stmt pos:start="173:25" pos:end="173:62"><if pos:start="173:25" pos:end="173:62">if <condition pos:start="173:28" pos:end="173:55">(<expr pos:start="173:29" pos:end="173:54"><operator pos:start="173:29" pos:end="173:29">!</operator><name pos:start="173:30" pos:end="173:54"><name pos:start="173:30" pos:end="173:30">s</name><operator pos:start="173:31" pos:end="173:32">-&gt;</operator><name pos:start="173:33" pos:end="173:54">mpeg_enc_ctx_allocated</name></name></expr>)</condition><block type="pseudo" pos:start="173:57" pos:end="173:62"><block_content pos:start="173:57" pos:end="173:62"> <break pos:start="173:57" pos:end="173:62">break;</break></block_content></block></if></if_stmt>



                        <expr_stmt pos:start="177:25" pos:end="179:82"><expr pos:start="177:25" pos:end="179:81"><name pos:start="177:25" pos:end="177:27">ret</name> <operator pos:start="177:29" pos:end="177:29">=</operator> <call pos:start="177:31" pos:end="179:81"><name pos:start="177:31" pos:end="177:47">mpeg_decode_slice</name><argument_list pos:start="177:48" pos:end="179:81">(<argument pos:start="177:49" pos:end="177:53"><expr pos:start="177:49" pos:end="177:53"><name pos:start="177:49" pos:end="177:53">avctx</name></expr></argument>, <argument pos:start="177:56" pos:end="177:62"><expr pos:start="177:56" pos:end="177:62"><name pos:start="177:56" pos:end="177:62">picture</name></expr></argument>,

                                                <argument pos:start="179:49" pos:end="179:58"><expr pos:start="179:49" pos:end="179:58"><name pos:start="179:49" pos:end="179:58">start_code</name></expr></argument>, <argument pos:start="179:61" pos:end="179:68"><expr pos:start="179:61" pos:end="179:68"><operator pos:start="179:61" pos:end="179:61">&amp;</operator><name pos:start="179:62" pos:end="179:68">buf_ptr</name></expr></argument>, <argument pos:start="179:71" pos:end="179:80"><expr pos:start="179:71" pos:end="179:80"><name pos:start="179:71" pos:end="179:80">input_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <if_stmt pos:start="183:25" pos:end="203:25"><if pos:start="183:25" pos:end="191:25">if <condition pos:start="183:28" pos:end="183:52">(<expr pos:start="183:29" pos:end="183:51"><name pos:start="183:29" pos:end="183:31">ret</name> <operator pos:start="183:33" pos:end="183:34">==</operator> <name pos:start="183:36" pos:end="183:51">DECODE_SLICE_EOP</name></expr>)</condition> <block pos:start="183:54" pos:end="191:25">{<block_content pos:start="185:29" pos:end="189:90">

                            <if_stmt pos:start="185:29" pos:end="187:63"><if pos:start="185:29" pos:end="187:63">if<condition pos:start="185:31" pos:end="185:52">(<expr pos:start="185:32" pos:end="185:51"><name pos:start="185:32" pos:end="185:51"><name pos:start="185:32" pos:end="185:33">s2</name><operator pos:start="185:34" pos:end="185:35">-&gt;</operator><name pos:start="185:36" pos:end="185:51">last_picture_ptr</name></name></expr>)</condition><block type="pseudo" pos:start="187:33" pos:end="187:63"><block_content pos:start="187:33" pos:end="187:63"> <comment type="line" pos:start="185:54" pos:end="185:102">//FIXME merge with the stuff in mpeg_decode_slice</comment>

                                <expr_stmt pos:start="187:33" pos:end="187:63"><expr pos:start="187:33" pos:end="187:62"><operator pos:start="187:33" pos:end="187:33">*</operator><name pos:start="187:34" pos:end="187:42">data_size</name> <operator pos:start="187:44" pos:end="187:44">=</operator> <sizeof pos:start="187:46" pos:end="187:62">sizeof<argument_list pos:start="187:52" pos:end="187:62">(<argument pos:start="187:53" pos:end="187:61"><expr pos:start="187:53" pos:end="187:61"><name pos:start="187:53" pos:end="187:61">AVPicture</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            <return pos:start="189:29" pos:end="189:90">return <expr pos:start="189:36" pos:end="189:89"><call pos:start="189:36" pos:end="189:89"><name pos:start="189:36" pos:end="189:40">FFMAX</name><argument_list pos:start="189:41" pos:end="189:89">(<argument pos:start="189:42" pos:end="189:42"><expr pos:start="189:42" pos:end="189:42"><literal type="number" pos:start="189:42" pos:end="189:42">1</literal></expr></argument>, <argument pos:start="189:45" pos:end="189:88"><expr pos:start="189:45" pos:end="189:88"><name pos:start="189:45" pos:end="189:51">buf_ptr</name> <operator pos:start="189:53" pos:end="189:53">-</operator> <name pos:start="189:55" pos:end="189:57">buf</name> <operator pos:start="189:59" pos:end="189:59">-</operator> <name pos:start="189:61" pos:end="189:88"><name pos:start="189:61" pos:end="189:62">s2</name><operator pos:start="189:63" pos:end="189:64">-&gt;</operator><name pos:start="189:65" pos:end="189:77">parse_context</name><operator pos:start="189:78" pos:end="189:78">.</operator><name pos:start="189:79" pos:end="189:88">last_index</name></name></expr></argument>)</argument_list></call></expr>;</return>

                        </block_content>}</block></if><if type="elseif" pos:start="191:26" pos:end="203:25">else if<condition pos:start="191:33" pos:end="191:41">(<expr pos:start="191:34" pos:end="191:40"><name pos:start="191:34" pos:end="191:36">ret</name> <operator pos:start="191:38" pos:end="191:38">&lt;</operator> <literal type="number" pos:start="191:40" pos:end="191:40">0</literal></expr>)</condition><block pos:start="191:42" pos:end="203:25">{<block_content pos:start="193:29" pos:end="201:72">

                            <if_stmt pos:start="193:29" pos:end="195:134"><if pos:start="193:29" pos:end="195:134">if<condition pos:start="193:31" pos:end="193:57">(<expr pos:start="193:32" pos:end="193:56"><name pos:start="193:32" pos:end="193:34">ret</name> <operator pos:start="193:36" pos:end="193:37">==</operator> <name pos:start="193:39" pos:end="193:56">DECODE_SLICE_ERROR</name></expr>)</condition><block type="pseudo" pos:start="195:33" pos:end="195:134"><block_content pos:start="195:33" pos:end="195:134">

                                <expr_stmt pos:start="195:33" pos:end="195:134"><expr pos:start="195:33" pos:end="195:133"><call pos:start="195:33" pos:end="195:133"><name pos:start="195:33" pos:end="195:47">ff_er_add_slice</name><argument_list pos:start="195:48" pos:end="195:133">(<argument pos:start="195:49" pos:end="195:50"><expr pos:start="195:49" pos:end="195:50"><name pos:start="195:49" pos:end="195:50">s2</name></expr></argument>, <argument pos:start="195:53" pos:end="195:67"><expr pos:start="195:53" pos:end="195:67"><name pos:start="195:53" pos:end="195:67"><name pos:start="195:53" pos:end="195:54">s2</name><operator pos:start="195:55" pos:end="195:56">-&gt;</operator><name pos:start="195:57" pos:end="195:67">resync_mb_x</name></name></expr></argument>, <argument pos:start="195:70" pos:end="195:84"><expr pos:start="195:70" pos:end="195:84"><name pos:start="195:70" pos:end="195:84"><name pos:start="195:70" pos:end="195:71">s2</name><operator pos:start="195:72" pos:end="195:73">-&gt;</operator><name pos:start="195:74" pos:end="195:84">resync_mb_y</name></name></expr></argument>, <argument pos:start="195:87" pos:end="195:94"><expr pos:start="195:87" pos:end="195:94"><name pos:start="195:87" pos:end="195:94"><name pos:start="195:87" pos:end="195:88">s2</name><operator pos:start="195:89" pos:end="195:90">-&gt;</operator><name pos:start="195:91" pos:end="195:94">mb_x</name></name></expr></argument>, <argument pos:start="195:97" pos:end="195:104"><expr pos:start="195:97" pos:end="195:104"><name pos:start="195:97" pos:end="195:104"><name pos:start="195:97" pos:end="195:98">s2</name><operator pos:start="195:99" pos:end="195:100">-&gt;</operator><name pos:start="195:101" pos:end="195:104">mb_y</name></name></expr></argument>, <argument pos:start="195:107" pos:end="195:132"><expr pos:start="195:107" pos:end="195:132"><name pos:start="195:107" pos:end="195:114">AC_ERROR</name><operator pos:start="195:115" pos:end="195:115">|</operator><name pos:start="195:116" pos:end="195:123">DC_ERROR</name><operator pos:start="195:124" pos:end="195:124">|</operator><name pos:start="195:125" pos:end="195:132">MV_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                                

                            <expr_stmt pos:start="199:29" pos:end="199:75"><expr pos:start="199:29" pos:end="199:74"><call pos:start="199:29" pos:end="199:74"><name pos:start="199:29" pos:end="199:35">fprintf</name><argument_list pos:start="199:36" pos:end="199:74">(<argument pos:start="199:37" pos:end="199:42"><expr pos:start="199:37" pos:end="199:42"><name pos:start="199:37" pos:end="199:42">stderr</name></expr></argument>,<argument pos:start="199:44" pos:end="199:73"><expr pos:start="199:44" pos:end="199:73"><literal type="string" pos:start="199:44" pos:end="199:73">"Error while decoding slice\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			    <if_stmt pos:start="201:29" pos:end="201:72"><if pos:start="201:29" pos:end="201:72">if<condition pos:start="201:31" pos:end="201:61">(<expr pos:start="201:32" pos:end="201:60"><name pos:start="201:32" pos:end="201:34">ret</name><operator pos:start="201:35" pos:end="201:36">==</operator><name pos:start="201:37" pos:end="201:60">DECODE_SLICE_FATAL_ERROR</name></expr>)</condition><block type="pseudo" pos:start="201:63" pos:end="201:72"><block_content pos:start="201:63" pos:end="201:72"> <return pos:start="201:63" pos:end="201:72">return <expr pos:start="201:70" pos:end="201:71"><operator pos:start="201:70" pos:end="201:70">-</operator><literal type="number" pos:start="201:71" pos:end="201:71">1</literal></expr>;</return></block_content></block></if></if_stmt>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></if></if_stmt>

                    <break pos:start="207:21" pos:end="207:26">break;</break>

                </block_content>}</block></switch>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
