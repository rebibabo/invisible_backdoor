<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12361.c" pos:tabs="8"><function pos:start="1:1" pos:end="87:1"><type pos:start="1:1" pos:end="1:6"><name pos:start="1:1" pos:end="1:4">void</name> <modifier pos:start="1:6" pos:end="1:6">*</modifier></type><name pos:start="1:7" pos:end="1:25">checkasm_check_func</name><parameter_list pos:start="1:26" pos:end="1:60">(<parameter pos:start="1:27" pos:end="1:36"><decl pos:start="1:27" pos:end="1:36"><type pos:start="1:27" pos:end="1:36"><name pos:start="1:27" pos:end="1:30">void</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:36">func</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:54"><decl pos:start="1:39" pos:end="1:54"><type pos:start="1:39" pos:end="1:54"><specifier pos:start="1:39" pos:end="1:43">const</specifier> <name pos:start="1:45" pos:end="1:48">char</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:54">name</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:59"><decl pos:start="1:57" pos:end="1:59"><type pos:start="1:57" pos:end="1:59"><modifier pos:start="1:57" pos:end="1:59">...</modifier></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="87:1">{<block_content pos:start="5:5" pos:end="85:15">

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">char</name></type> <name pos:start="5:10" pos:end="5:22"><name pos:start="5:10" pos:end="5:17">name_buf</name><index pos:start="5:18" pos:end="5:22">[<expr pos:start="5:19" pos:end="5:21"><literal type="number" pos:start="5:19" pos:end="5:21">256</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">void</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:13">ref</name> <init pos:start="7:15" pos:end="7:20">= <expr pos:start="7:17" pos:end="7:20"><name pos:start="7:17" pos:end="7:20">func</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:25"><name pos:start="9:5" pos:end="9:23">CheckasmFuncVersion</name> <modifier pos:start="9:25" pos:end="9:25">*</modifier></type><name pos:start="9:26" pos:end="9:26">v</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:19">name_length</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">va_list</name></type> <name pos:start="13:13" pos:end="13:15">arg</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:24"><expr pos:start="17:5" pos:end="17:23"><call pos:start="17:5" pos:end="17:23"><name pos:start="17:5" pos:end="17:12">va_start</name><argument_list pos:start="17:13" pos:end="17:23">(<argument pos:start="17:14" pos:end="17:16"><expr pos:start="17:14" pos:end="17:16"><name pos:start="17:14" pos:end="17:16">arg</name></expr></argument>, <argument pos:start="17:19" pos:end="17:22"><expr pos:start="17:19" pos:end="17:22"><name pos:start="17:19" pos:end="17:22">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:67"><expr pos:start="19:5" pos:end="19:66"><name pos:start="19:5" pos:end="19:15">name_length</name> <operator pos:start="19:17" pos:end="19:17">=</operator> <call pos:start="19:19" pos:end="19:66"><name pos:start="19:19" pos:end="19:27">vsnprintf</name><argument_list pos:start="19:28" pos:end="19:66">(<argument pos:start="19:29" pos:end="19:36"><expr pos:start="19:29" pos:end="19:36"><name pos:start="19:29" pos:end="19:36">name_buf</name></expr></argument>, <argument pos:start="19:39" pos:end="19:54"><expr pos:start="19:39" pos:end="19:54"><sizeof pos:start="19:39" pos:end="19:54">sizeof<argument_list pos:start="19:45" pos:end="19:54">(<argument pos:start="19:46" pos:end="19:53"><expr pos:start="19:46" pos:end="19:53"><name pos:start="19:46" pos:end="19:53">name_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="19:57" pos:end="19:60"><expr pos:start="19:57" pos:end="19:60"><name pos:start="19:57" pos:end="19:60">name</name></expr></argument>, <argument pos:start="19:63" pos:end="19:65"><expr pos:start="19:63" pos:end="19:65"><name pos:start="19:63" pos:end="19:65">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:16"><expr pos:start="21:5" pos:end="21:15"><call pos:start="21:5" pos:end="21:15"><name pos:start="21:5" pos:end="21:10">va_end</name><argument_list pos:start="21:11" pos:end="21:15">(<argument pos:start="21:12" pos:end="21:14"><expr pos:start="21:12" pos:end="21:14"><name pos:start="21:12" pos:end="21:14">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="27:20"><if pos:start="25:5" pos:end="27:20">if <condition pos:start="25:8" pos:end="25:69">(<expr pos:start="25:9" pos:end="25:68"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:13">func</name> <operator pos:start="25:15" pos:end="25:16">||</operator> <name pos:start="25:18" pos:end="25:28">name_length</name> <operator pos:start="25:30" pos:end="25:31">&lt;=</operator> <literal type="number" pos:start="25:33" pos:end="25:33">0</literal> <operator pos:start="25:35" pos:end="25:36">||</operator> <name pos:start="25:38" pos:end="25:48">name_length</name> <operator pos:start="25:50" pos:end="25:51">&gt;=</operator> <sizeof pos:start="25:53" pos:end="25:68">sizeof<argument_list pos:start="25:59" pos:end="25:68">(<argument pos:start="25:60" pos:end="25:67"><expr pos:start="25:60" pos:end="25:67"><name pos:start="25:60" pos:end="25:67">name_buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:20"><block_content pos:start="27:9" pos:end="27:20">

        <return pos:start="27:9" pos:end="27:20">return <expr pos:start="27:16" pos:end="27:19"><name pos:start="27:16" pos:end="27:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:57"><expr pos:start="31:5" pos:end="31:56"><name pos:start="31:5" pos:end="31:22"><name pos:start="31:5" pos:end="31:9">state</name><operator pos:start="31:10" pos:end="31:10">.</operator><name pos:start="31:11" pos:end="31:22">current_func</name></name> <operator pos:start="31:24" pos:end="31:24">=</operator> <call pos:start="31:26" pos:end="31:56"><name pos:start="31:26" pos:end="31:33">get_func</name><argument_list pos:start="31:34" pos:end="31:56">(<argument pos:start="31:35" pos:end="31:42"><expr pos:start="31:35" pos:end="31:42"><name pos:start="31:35" pos:end="31:42">name_buf</name></expr></argument>, <argument pos:start="31:45" pos:end="31:55"><expr pos:start="31:45" pos:end="31:55"><name pos:start="31:45" pos:end="31:55">name_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:38"><expr pos:start="33:5" pos:end="33:37"><name pos:start="33:5" pos:end="33:5">v</name> <operator pos:start="33:7" pos:end="33:7">=</operator> <operator pos:start="33:9" pos:end="33:9">&amp;</operator><name pos:start="33:10" pos:end="33:37"><name pos:start="33:10" pos:end="33:14">state</name><operator pos:start="33:15" pos:end="33:15">.</operator><name pos:start="33:16" pos:end="33:27">current_func</name><operator pos:start="33:28" pos:end="33:29">-&gt;</operator><name pos:start="33:30" pos:end="33:37">versions</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="37:5" pos:end="65:5"><if pos:start="37:5" pos:end="65:5">if <condition pos:start="37:8" pos:end="37:16">(<expr pos:start="37:9" pos:end="37:15"><name pos:start="37:9" pos:end="37:15"><name pos:start="37:9" pos:end="37:9">v</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:15">func</name></name></expr>)</condition> <block pos:start="37:18" pos:end="65:5">{<block_content pos:start="39:9" pos:end="63:70">

        <decl_stmt pos:start="39:9" pos:end="39:34"><decl pos:start="39:9" pos:end="39:33"><type pos:start="39:9" pos:end="39:29"><name pos:start="39:9" pos:end="39:27">CheckasmFuncVersion</name> <modifier pos:start="39:29" pos:end="39:29">*</modifier></type><name pos:start="39:30" pos:end="39:33">prev</name></decl>;</decl_stmt>

        <do pos:start="41:9" pos:end="59:32">do <block pos:start="41:12" pos:end="59:9">{<block_content pos:start="45:13" pos:end="57:21">

            <comment type="block" pos:start="43:13" pos:end="43:70">/* Only test functions that haven't already been tested */</comment>

            <if_stmt pos:start="45:13" pos:end="47:28"><if pos:start="45:13" pos:end="47:28">if <condition pos:start="45:16" pos:end="45:32">(<expr pos:start="45:17" pos:end="45:31"><name pos:start="45:17" pos:end="45:23"><name pos:start="45:17" pos:end="45:17">v</name><operator pos:start="45:18" pos:end="45:19">-&gt;</operator><name pos:start="45:20" pos:end="45:23">func</name></name> <operator pos:start="45:25" pos:end="45:26">==</operator> <name pos:start="45:28" pos:end="45:31">func</name></expr>)</condition><block type="pseudo" pos:start="47:17" pos:end="47:28"><block_content pos:start="47:17" pos:end="47:28">

                <return pos:start="47:17" pos:end="47:28">return <expr pos:start="47:24" pos:end="47:27"><name pos:start="47:24" pos:end="47:27">NULL</name></expr>;</return></block_content></block></if></if_stmt>



            <if_stmt pos:start="51:13" pos:end="53:30"><if pos:start="51:13" pos:end="53:30">if <condition pos:start="51:16" pos:end="51:22">(<expr pos:start="51:17" pos:end="51:21"><name pos:start="51:17" pos:end="51:21"><name pos:start="51:17" pos:end="51:17">v</name><operator pos:start="51:18" pos:end="51:19">-&gt;</operator><name pos:start="51:20" pos:end="51:21">ok</name></name></expr>)</condition><block type="pseudo" pos:start="53:17" pos:end="53:30"><block_content pos:start="53:17" pos:end="53:30">

                <expr_stmt pos:start="53:17" pos:end="53:30"><expr pos:start="53:17" pos:end="53:29"><name pos:start="53:17" pos:end="53:19">ref</name> <operator pos:start="53:21" pos:end="53:21">=</operator> <name pos:start="53:23" pos:end="53:29"><name pos:start="53:23" pos:end="53:23">v</name><operator pos:start="53:24" pos:end="53:25">-&gt;</operator><name pos:start="53:26" pos:end="53:29">func</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="57:13" pos:end="57:21"><expr pos:start="57:13" pos:end="57:20"><name pos:start="57:13" pos:end="57:16">prev</name> <operator pos:start="57:18" pos:end="57:18">=</operator> <name pos:start="57:20" pos:end="57:20">v</name></expr>;</expr_stmt>

        </block_content>}</block> while <condition pos:start="59:17" pos:end="59:31">(<expr pos:start="59:18" pos:end="59:30"><operator pos:start="59:18" pos:end="59:18">(</operator><name pos:start="59:19" pos:end="59:19">v</name> <operator pos:start="59:21" pos:end="59:21">=</operator> <name pos:start="59:23" pos:end="59:29"><name pos:start="59:23" pos:end="59:23">v</name><operator pos:start="59:24" pos:end="59:25">-&gt;</operator><name pos:start="59:26" pos:end="59:29">next</name></name><operator pos:start="59:30" pos:end="59:30">)</operator></expr>)</condition>;</do>



        <expr_stmt pos:start="63:9" pos:end="63:70"><expr pos:start="63:9" pos:end="63:69"><name pos:start="63:9" pos:end="63:9">v</name> <operator pos:start="63:11" pos:end="63:11">=</operator> <name pos:start="63:13" pos:end="63:22"><name pos:start="63:13" pos:end="63:16">prev</name><operator pos:start="63:17" pos:end="63:18">-&gt;</operator><name pos:start="63:19" pos:end="63:22">next</name></name> <operator pos:start="63:24" pos:end="63:24">=</operator> <call pos:start="63:26" pos:end="63:69"><name pos:start="63:26" pos:end="63:40">checkasm_malloc</name><argument_list pos:start="63:41" pos:end="63:69">(<argument pos:start="63:42" pos:end="63:68"><expr pos:start="63:42" pos:end="63:68"><sizeof pos:start="63:42" pos:end="63:68">sizeof<argument_list pos:start="63:48" pos:end="63:68">(<argument pos:start="63:49" pos:end="63:67"><expr pos:start="63:49" pos:end="63:67"><name pos:start="63:49" pos:end="63:67">CheckasmFuncVersion</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:19"><expr pos:start="69:5" pos:end="69:18"><name pos:start="69:5" pos:end="69:11"><name pos:start="69:5" pos:end="69:5">v</name><operator pos:start="69:6" pos:end="69:7">-&gt;</operator><name pos:start="69:8" pos:end="69:11">func</name></name> <operator pos:start="69:13" pos:end="69:13">=</operator> <name pos:start="69:15" pos:end="69:18">func</name></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:14"><expr pos:start="71:5" pos:end="71:13"><name pos:start="71:5" pos:end="71:9"><name pos:start="71:5" pos:end="71:5">v</name><operator pos:start="71:6" pos:end="71:7">-&gt;</operator><name pos:start="71:8" pos:end="71:9">ok</name></name> <operator pos:start="71:11" pos:end="71:11">=</operator> <literal type="number" pos:start="71:13" pos:end="71:13">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:28"><expr pos:start="73:5" pos:end="73:27"><name pos:start="73:5" pos:end="73:10"><name pos:start="73:5" pos:end="73:5">v</name><operator pos:start="73:6" pos:end="73:7">-&gt;</operator><name pos:start="73:8" pos:end="73:10">cpu</name></name> <operator pos:start="73:12" pos:end="73:12">=</operator> <name pos:start="73:14" pos:end="73:27"><name pos:start="73:14" pos:end="73:18">state</name><operator pos:start="73:19" pos:end="73:19">.</operator><name pos:start="73:20" pos:end="73:27">cpu_flag</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:31"><expr pos:start="75:5" pos:end="75:30"><name pos:start="75:5" pos:end="75:26"><name pos:start="75:5" pos:end="75:9">state</name><operator pos:start="75:10" pos:end="75:10">.</operator><name pos:start="75:11" pos:end="75:26">current_func_ver</name></name> <operator pos:start="75:28" pos:end="75:28">=</operator> <name pos:start="75:30" pos:end="75:30">v</name></expr>;</expr_stmt>



    <if_stmt pos:start="79:5" pos:end="81:28"><if pos:start="79:5" pos:end="81:28">if <condition pos:start="79:8" pos:end="79:23">(<expr pos:start="79:9" pos:end="79:22"><name pos:start="79:9" pos:end="79:22"><name pos:start="79:9" pos:end="79:13">state</name><operator pos:start="79:14" pos:end="79:14">.</operator><name pos:start="79:15" pos:end="79:22">cpu_flag</name></name></expr>)</condition><block type="pseudo" pos:start="81:9" pos:end="81:28"><block_content pos:start="81:9" pos:end="81:28">

        <expr_stmt pos:start="81:9" pos:end="81:28"><expr pos:start="81:9" pos:end="81:27"><name pos:start="81:9" pos:end="81:25"><name pos:start="81:9" pos:end="81:13">state</name><operator pos:start="81:14" pos:end="81:14">.</operator><name pos:start="81:15" pos:end="81:25">num_checked</name></name><operator pos:start="81:26" pos:end="81:27">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="85:5" pos:end="85:15">return <expr pos:start="85:12" pos:end="85:14"><name pos:start="85:12" pos:end="85:14">ref</name></expr>;</return>

</block_content>}</block></function>
</unit>
