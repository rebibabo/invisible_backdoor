<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17978.c" pos:tabs="8"><function pos:start="1:1" pos:end="117:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">channel_event</name><parameter_list pos:start="1:26" pos:end="1:65">(<parameter pos:start="1:27" pos:end="1:35"><decl pos:start="1:27" pos:end="1:35"><type pos:start="1:27" pos:end="1:35"><name pos:start="1:27" pos:end="1:29">int</name></type> <name pos:start="1:31" pos:end="1:35">event</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:64"><decl pos:start="1:38" pos:end="1:64"><type pos:start="1:38" pos:end="1:64"><name pos:start="1:38" pos:end="1:58">SpiceChannelEventInfo</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:64">info</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="117:1">{<block_content pos:start="5:5" pos:end="115:35">

    <decl_stmt pos:start="5:5" pos:end="5:57"><decl pos:start="5:5" pos:end="5:56"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19">SpiceServerInfo</name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:27">server</name> <init pos:start="5:29" pos:end="5:56">= <expr pos:start="5:31" pos:end="5:56"><call pos:start="5:31" pos:end="5:56"><name pos:start="5:31" pos:end="5:39">g_malloc0</name><argument_list pos:start="5:40" pos:end="5:56">(<argument pos:start="5:41" pos:end="5:55"><expr pos:start="5:41" pos:end="5:55"><sizeof pos:start="5:41" pos:end="5:55">sizeof<argument_list pos:start="5:47" pos:end="5:55">(<argument pos:start="5:48" pos:end="5:54"><expr pos:start="5:48" pos:end="5:54"><operator pos:start="5:48" pos:end="5:48">*</operator><name pos:start="5:49" pos:end="5:54">server</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:54"><decl pos:start="7:5" pos:end="7:53"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">SpiceChannel</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:24">client</name> <init pos:start="7:26" pos:end="7:53">= <expr pos:start="7:28" pos:end="7:53"><call pos:start="7:28" pos:end="7:53"><name pos:start="7:28" pos:end="7:36">g_malloc0</name><argument_list pos:start="7:37" pos:end="7:53">(<argument pos:start="7:38" pos:end="7:52"><expr pos:start="7:38" pos:end="7:52"><sizeof pos:start="7:38" pos:end="7:52">sizeof<argument_list pos:start="7:44" pos:end="7:52">(<argument pos:start="7:45" pos:end="7:51"><expr pos:start="7:45" pos:end="7:51"><operator pos:start="7:45" pos:end="7:45">*</operator><name pos:start="7:46" pos:end="7:51">client</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="9:5" pos:end="9:52"><expr pos:start="9:5" pos:end="9:51"><name pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:10">server</name><operator pos:start="9:11" pos:end="9:12">-&gt;</operator><name pos:start="9:13" pos:end="9:16">base</name></name> <operator pos:start="9:18" pos:end="9:18">=</operator> <call pos:start="9:20" pos:end="9:51"><name pos:start="9:20" pos:end="9:28">g_malloc0</name><argument_list pos:start="9:29" pos:end="9:51">(<argument pos:start="9:30" pos:end="9:50"><expr pos:start="9:30" pos:end="9:50"><sizeof pos:start="9:30" pos:end="9:50">sizeof<argument_list pos:start="9:36" pos:end="9:50">(<argument pos:start="9:37" pos:end="9:49"><expr pos:start="9:37" pos:end="9:49"><operator pos:start="9:37" pos:end="9:37">*</operator><name pos:start="9:38" pos:end="9:49"><name pos:start="9:38" pos:end="9:43">server</name><operator pos:start="9:44" pos:end="9:45">-&gt;</operator><name pos:start="9:46" pos:end="9:49">base</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="11:5" pos:end="11:52"><expr pos:start="11:5" pos:end="11:51"><name pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:10">client</name><operator pos:start="11:11" pos:end="11:12">-&gt;</operator><name pos:start="11:13" pos:end="11:16">base</name></name> <operator pos:start="11:18" pos:end="11:18">=</operator> <call pos:start="11:20" pos:end="11:51"><name pos:start="11:20" pos:end="11:28">g_malloc0</name><argument_list pos:start="11:29" pos:end="11:51">(<argument pos:start="11:30" pos:end="11:50"><expr pos:start="11:30" pos:end="11:50"><sizeof pos:start="11:30" pos:end="11:50">sizeof<argument_list pos:start="11:36" pos:end="11:50">(<argument pos:start="11:37" pos:end="11:49"><expr pos:start="11:37" pos:end="11:49"><operator pos:start="11:37" pos:end="11:37">*</operator><name pos:start="11:38" pos:end="11:49"><name pos:start="11:38" pos:end="11:43">client</name><operator pos:start="11:44" pos:end="11:45">-&gt;</operator><name pos:start="11:46" pos:end="11:49">base</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="15:5" pos:end="31:7">/*

     * Spice server might have called us from spice worker thread

     * context (happens on display channel disconnects).  Spice should

     * not do that.  It isn't that easy to fix it in spice and even

     * when it is fixed we still should cover the already released

     * spice versions.  So detect that we've been called from another

     * thread and grab the iothread lock if so before calling qemu

     * functions.

     */</comment>

    <decl_stmt pos:start="33:5" pos:end="33:47"><decl pos:start="33:5" pos:end="33:46"><type pos:start="33:5" pos:end="33:8"><name pos:start="33:5" pos:end="33:8">bool</name></type> <name pos:start="33:10" pos:end="33:18">need_lock</name> <init pos:start="33:20" pos:end="33:46">= <expr pos:start="33:22" pos:end="33:46"><operator pos:start="33:22" pos:end="33:22">!</operator><call pos:start="33:23" pos:end="33:46"><name pos:start="33:23" pos:end="33:41">qemu_thread_is_self</name><argument_list pos:start="33:42" pos:end="33:46">(<argument pos:start="33:43" pos:end="33:45"><expr pos:start="33:43" pos:end="33:45"><operator pos:start="33:43" pos:end="33:43">&amp;</operator><name pos:start="33:44" pos:end="33:45">me</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="35:5" pos:end="39:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:18">(<expr pos:start="35:9" pos:end="35:17"><name pos:start="35:9" pos:end="35:17">need_lock</name></expr>)</condition> <block pos:start="35:20" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:35">

        <expr_stmt pos:start="37:9" pos:end="37:35"><expr pos:start="37:9" pos:end="37:34"><call pos:start="37:9" pos:end="37:34"><name pos:start="37:9" pos:end="37:32">qemu_mutex_lock_iothread</name><argument_list pos:start="37:33" pos:end="37:34">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="43:5" pos:end="59:5"><if pos:start="43:5" pos:end="53:5">if <condition pos:start="43:8" pos:end="43:56">(<expr pos:start="43:9" pos:end="43:55"><name pos:start="43:9" pos:end="43:19"><name pos:start="43:9" pos:end="43:12">info</name><operator pos:start="43:13" pos:end="43:14">-&gt;</operator><name pos:start="43:15" pos:end="43:19">flags</name></name> <operator pos:start="43:21" pos:end="43:21">&amp;</operator> <name pos:start="43:23" pos:end="43:55">SPICE_CHANNEL_EVENT_FLAG_ADDR_EXT</name></expr>)</condition> <block pos:start="43:58" pos:end="53:5">{<block_content pos:start="45:9" pos:end="51:38">

        <expr_stmt pos:start="45:9" pos:end="47:38"><expr pos:start="45:9" pos:end="47:37"><call pos:start="45:9" pos:end="47:37"><name pos:start="45:9" pos:end="45:21">add_addr_info</name><argument_list pos:start="45:22" pos:end="47:37">(<argument pos:start="45:23" pos:end="45:34"><expr pos:start="45:23" pos:end="45:34"><name pos:start="45:23" pos:end="45:34"><name pos:start="45:23" pos:end="45:28">client</name><operator pos:start="45:29" pos:end="45:30">-&gt;</operator><name pos:start="45:31" pos:end="45:34">base</name></name></expr></argument>, <argument pos:start="45:37" pos:end="45:71"><expr pos:start="45:37" pos:end="45:71"><operator pos:start="45:37" pos:end="45:37">(</operator>struct <name pos:start="45:45" pos:end="45:52">sockaddr</name> <operator pos:start="45:54" pos:end="45:54">*</operator><operator pos:start="45:55" pos:end="45:55">)</operator><operator pos:start="45:56" pos:end="45:56">&amp;</operator><name pos:start="45:57" pos:end="45:71"><name pos:start="45:57" pos:end="45:60">info</name><operator pos:start="45:61" pos:end="45:62">-&gt;</operator><name pos:start="45:63" pos:end="45:71">paddr_ext</name></name></expr></argument>,

                      <argument pos:start="47:23" pos:end="47:36"><expr pos:start="47:23" pos:end="47:36"><name pos:start="47:23" pos:end="47:36"><name pos:start="47:23" pos:end="47:26">info</name><operator pos:start="47:27" pos:end="47:28">-&gt;</operator><name pos:start="47:29" pos:end="47:36">plen_ext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="51:38"><expr pos:start="49:9" pos:end="51:37"><call pos:start="49:9" pos:end="51:37"><name pos:start="49:9" pos:end="49:21">add_addr_info</name><argument_list pos:start="49:22" pos:end="51:37">(<argument pos:start="49:23" pos:end="49:34"><expr pos:start="49:23" pos:end="49:34"><name pos:start="49:23" pos:end="49:34"><name pos:start="49:23" pos:end="49:28">server</name><operator pos:start="49:29" pos:end="49:30">-&gt;</operator><name pos:start="49:31" pos:end="49:34">base</name></name></expr></argument>, <argument pos:start="49:37" pos:end="49:71"><expr pos:start="49:37" pos:end="49:71"><operator pos:start="49:37" pos:end="49:37">(</operator>struct <name pos:start="49:45" pos:end="49:52">sockaddr</name> <operator pos:start="49:54" pos:end="49:54">*</operator><operator pos:start="49:55" pos:end="49:55">)</operator><operator pos:start="49:56" pos:end="49:56">&amp;</operator><name pos:start="49:57" pos:end="49:71"><name pos:start="49:57" pos:end="49:60">info</name><operator pos:start="49:61" pos:end="49:62">-&gt;</operator><name pos:start="49:63" pos:end="49:71">laddr_ext</name></name></expr></argument>,

                      <argument pos:start="51:23" pos:end="51:36"><expr pos:start="51:23" pos:end="51:36"><name pos:start="51:23" pos:end="51:36"><name pos:start="51:23" pos:end="51:26">info</name><operator pos:start="51:27" pos:end="51:28">-&gt;</operator><name pos:start="51:29" pos:end="51:36">llen_ext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="53:7" pos:end="59:5">else <block pos:start="53:12" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:31">

        <expr_stmt pos:start="55:9" pos:end="57:31"><expr pos:start="55:9" pos:end="57:30"><call pos:start="55:9" pos:end="57:30"><name pos:start="55:9" pos:end="55:20">error_report</name><argument_list pos:start="55:21" pos:end="57:30">(<argument pos:start="55:22" pos:end="55:62"><expr pos:start="55:22" pos:end="55:62"><literal type="string" pos:start="55:22" pos:end="55:62">"spice: %s, extended address is expected"</literal></expr></argument>,

                     <argument pos:start="57:22" pos:end="57:29"><expr pos:start="57:22" pos:end="57:29"><name pos:start="57:22" pos:end="57:29">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <switch pos:start="63:5" pos:end="101:5">switch <condition pos:start="63:12" pos:end="63:18">(<expr pos:start="63:13" pos:end="63:17"><name pos:start="63:13" pos:end="63:17">event</name></expr>)</condition> <block pos:start="63:20" pos:end="101:5">{<block_content pos:start="65:5" pos:end="99:14">

    <case pos:start="65:5" pos:end="65:39">case <expr pos:start="65:10" pos:end="65:38"><name pos:start="65:10" pos:end="65:38">SPICE_CHANNEL_EVENT_CONNECTED</name></expr>:</case>

        <expr_stmt pos:start="67:9" pos:end="67:82"><expr pos:start="67:9" pos:end="67:81"><call pos:start="67:9" pos:end="67:81"><name pos:start="67:9" pos:end="67:39">qapi_event_send_spice_connected</name><argument_list pos:start="67:40" pos:end="67:81">(<argument pos:start="67:41" pos:end="67:52"><expr pos:start="67:41" pos:end="67:52"><name pos:start="67:41" pos:end="67:52"><name pos:start="67:41" pos:end="67:46">server</name><operator pos:start="67:47" pos:end="67:48">-&gt;</operator><name pos:start="67:49" pos:end="67:52">base</name></name></expr></argument>, <argument pos:start="67:55" pos:end="67:66"><expr pos:start="67:55" pos:end="67:66"><name pos:start="67:55" pos:end="67:66"><name pos:start="67:55" pos:end="67:60">client</name><operator pos:start="67:61" pos:end="67:62">-&gt;</operator><name pos:start="67:63" pos:end="67:66">base</name></name></expr></argument>, <argument pos:start="67:69" pos:end="67:80"><expr pos:start="67:69" pos:end="67:80"><operator pos:start="67:69" pos:end="67:69">&amp;</operator><name pos:start="67:70" pos:end="67:80">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="69:9" pos:end="69:14">break;</break>

    <case pos:start="71:5" pos:end="71:41">case <expr pos:start="71:10" pos:end="71:40"><name pos:start="71:10" pos:end="71:40">SPICE_CHANNEL_EVENT_INITIALIZED</name></expr>:</case>

        <if_stmt pos:start="73:9" pos:end="79:9"><if pos:start="73:9" pos:end="79:9">if <condition pos:start="73:12" pos:end="73:17">(<expr pos:start="73:13" pos:end="73:16"><name pos:start="73:13" pos:end="73:16">auth</name></expr>)</condition> <block pos:start="73:19" pos:end="79:9">{<block_content pos:start="75:13" pos:end="77:42">

            <expr_stmt pos:start="75:13" pos:end="75:36"><expr pos:start="75:13" pos:end="75:35"><name pos:start="75:13" pos:end="75:28"><name pos:start="75:13" pos:end="75:18">server</name><operator pos:start="75:19" pos:end="75:20">-&gt;</operator><name pos:start="75:21" pos:end="75:28">has_auth</name></name> <operator pos:start="75:30" pos:end="75:30">=</operator> <name pos:start="75:32" pos:end="75:35">true</name></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:42"><expr pos:start="77:13" pos:end="77:41"><name pos:start="77:13" pos:end="77:24"><name pos:start="77:13" pos:end="77:18">server</name><operator pos:start="77:19" pos:end="77:20">-&gt;</operator><name pos:start="77:21" pos:end="77:24">auth</name></name> <operator pos:start="77:26" pos:end="77:26">=</operator> <call pos:start="77:28" pos:end="77:41"><name pos:start="77:28" pos:end="77:35">g_strdup</name><argument_list pos:start="77:36" pos:end="77:41">(<argument pos:start="77:37" pos:end="77:40"><expr pos:start="77:37" pos:end="77:40"><name pos:start="77:37" pos:end="77:40">auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:39"><expr pos:start="81:9" pos:end="81:38"><call pos:start="81:9" pos:end="81:38"><name pos:start="81:9" pos:end="81:24">add_channel_info</name><argument_list pos:start="81:25" pos:end="81:38">(<argument pos:start="81:26" pos:end="81:31"><expr pos:start="81:26" pos:end="81:31"><name pos:start="81:26" pos:end="81:31">client</name></expr></argument>, <argument pos:start="81:34" pos:end="81:37"><expr pos:start="81:34" pos:end="81:37"><name pos:start="81:34" pos:end="81:37">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:31"><expr pos:start="83:9" pos:end="83:30"><call pos:start="83:9" pos:end="83:30"><name pos:start="83:9" pos:end="83:24">channel_list_add</name><argument_list pos:start="83:25" pos:end="83:30">(<argument pos:start="83:26" pos:end="83:29"><expr pos:start="83:26" pos:end="83:29"><name pos:start="83:26" pos:end="83:29">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:72"><expr pos:start="85:9" pos:end="85:71"><call pos:start="85:9" pos:end="85:71"><name pos:start="85:9" pos:end="85:41">qapi_event_send_spice_initialized</name><argument_list pos:start="85:42" pos:end="85:71">(<argument pos:start="85:43" pos:end="85:48"><expr pos:start="85:43" pos:end="85:48"><name pos:start="85:43" pos:end="85:48">server</name></expr></argument>, <argument pos:start="85:51" pos:end="85:56"><expr pos:start="85:51" pos:end="85:56"><name pos:start="85:51" pos:end="85:56">client</name></expr></argument>, <argument pos:start="85:59" pos:end="85:70"><expr pos:start="85:59" pos:end="85:70"><operator pos:start="85:59" pos:end="85:59">&amp;</operator><name pos:start="85:60" pos:end="85:70">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="87:9" pos:end="87:14">break;</break>

    <case pos:start="89:5" pos:end="89:42">case <expr pos:start="89:10" pos:end="89:41"><name pos:start="89:10" pos:end="89:41">SPICE_CHANNEL_EVENT_DISCONNECTED</name></expr>:</case>

        <expr_stmt pos:start="91:9" pos:end="91:31"><expr pos:start="91:9" pos:end="91:30"><call pos:start="91:9" pos:end="91:30"><name pos:start="91:9" pos:end="91:24">channel_list_del</name><argument_list pos:start="91:25" pos:end="91:30">(<argument pos:start="91:26" pos:end="91:29"><expr pos:start="91:26" pos:end="91:29"><name pos:start="91:26" pos:end="91:29">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:85"><expr pos:start="93:9" pos:end="93:84"><call pos:start="93:9" pos:end="93:84"><name pos:start="93:9" pos:end="93:42">qapi_event_send_spice_disconnected</name><argument_list pos:start="93:43" pos:end="93:84">(<argument pos:start="93:44" pos:end="93:55"><expr pos:start="93:44" pos:end="93:55"><name pos:start="93:44" pos:end="93:55"><name pos:start="93:44" pos:end="93:49">server</name><operator pos:start="93:50" pos:end="93:51">-&gt;</operator><name pos:start="93:52" pos:end="93:55">base</name></name></expr></argument>, <argument pos:start="93:58" pos:end="93:69"><expr pos:start="93:58" pos:end="93:69"><name pos:start="93:58" pos:end="93:69"><name pos:start="93:58" pos:end="93:63">client</name><operator pos:start="93:64" pos:end="93:65">-&gt;</operator><name pos:start="93:66" pos:end="93:69">base</name></name></expr></argument>, <argument pos:start="93:72" pos:end="93:83"><expr pos:start="93:72" pos:end="93:83"><operator pos:start="93:72" pos:end="93:72">&amp;</operator><name pos:start="93:73" pos:end="93:83">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="95:9" pos:end="95:14">break;</break>

    <default pos:start="97:5" pos:end="97:12">default:</default>

        <break pos:start="99:9" pos:end="99:14">break;</break>

    </block_content>}</block></switch>



    <if_stmt pos:start="105:5" pos:end="109:5"><if pos:start="105:5" pos:end="109:5">if <condition pos:start="105:8" pos:end="105:18">(<expr pos:start="105:9" pos:end="105:17"><name pos:start="105:9" pos:end="105:17">need_lock</name></expr>)</condition> <block pos:start="105:20" pos:end="109:5">{<block_content pos:start="107:9" pos:end="107:37">

        <expr_stmt pos:start="107:9" pos:end="107:37"><expr pos:start="107:9" pos:end="107:36"><call pos:start="107:9" pos:end="107:36"><name pos:start="107:9" pos:end="107:34">qemu_mutex_unlock_iothread</name><argument_list pos:start="107:35" pos:end="107:36">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:38"><expr pos:start="113:5" pos:end="113:37"><call pos:start="113:5" pos:end="113:37"><name pos:start="113:5" pos:end="113:29">qapi_free_SpiceServerInfo</name><argument_list pos:start="113:30" pos:end="113:37">(<argument pos:start="113:31" pos:end="113:36"><expr pos:start="113:31" pos:end="113:36"><name pos:start="113:31" pos:end="113:36">server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:35"><expr pos:start="115:5" pos:end="115:34"><call pos:start="115:5" pos:end="115:34"><name pos:start="115:5" pos:end="115:26">qapi_free_SpiceChannel</name><argument_list pos:start="115:27" pos:end="115:34">(<argument pos:start="115:28" pos:end="115:33"><expr pos:start="115:28" pos:end="115:33"><name pos:start="115:28" pos:end="115:33">client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
