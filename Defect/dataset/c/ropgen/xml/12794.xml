<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12794.c" pos:tabs="8"><function pos:start="1:1" pos:end="22:13"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">parse_sandbox</name><parameter_list pos:start="1:25" pos:end="1:68">(<parameter pos:start="1:26" pos:end="1:37"><decl pos:start="1:26" pos:end="1:37"><type pos:start="1:26" pos:end="1:37"><name pos:start="1:26" pos:end="1:29">void</name> <modifier pos:start="1:31" pos:end="1:31">*</modifier></type><name pos:start="1:32" pos:end="1:37">opaque</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:53"><decl pos:start="1:40" pos:end="1:53"><type pos:start="1:40" pos:end="1:53"><name pos:start="1:40" pos:end="1:47">QemuOpts</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:53">opts</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:67"><decl pos:start="1:56" pos:end="1:67"><type pos:start="1:56" pos:end="1:67"><name pos:start="1:56" pos:end="1:60">Error</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier><modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:67">errp</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="22:13">{<block_content pos:start="3:5" pos:end="22:13">
    <if_stmt pos:start="3:5" pos:end="22:13"><if pos:start="3:5" pos:end="22:13">if <condition pos:start="3:8" pos:end="3:49">(<expr pos:start="3:9" pos:end="3:48"><call pos:start="3:9" pos:end="3:48"><name pos:start="3:9" pos:end="3:25">qemu_opt_get_bool</name><argument_list pos:start="3:26" pos:end="3:48">(<argument pos:start="3:27" pos:end="3:30"><expr pos:start="3:27" pos:end="3:30"><name pos:start="3:27" pos:end="3:30">opts</name></expr></argument>, <argument pos:start="3:33" pos:end="3:40"><expr pos:start="3:33" pos:end="3:40"><literal type="string" pos:start="3:33" pos:end="3:40">"enable"</literal></expr></argument>, <argument pos:start="3:43" pos:end="3:47"><expr pos:start="3:43" pos:end="3:47"><name pos:start="3:43" pos:end="3:47">false</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="3:51" pos:end="22:13">{<block_content pos:start="5:9" pos:end="22:13">
<cpp:ifdef pos:start="4:1" pos:end="4:21">#<cpp:directive pos:start="4:2" pos:end="4:6">ifdef</cpp:directive> <name pos:start="4:8" pos:end="4:21">CONFIG_SECCOMP</name></cpp:ifdef>
        <decl_stmt pos:start="5:9" pos:end="6:44"><decl pos:start="5:9" pos:end="6:43"><type pos:start="5:9" pos:end="5:16"><name pos:start="5:9" pos:end="5:16">uint32_t</name></type> <name pos:start="5:18" pos:end="5:29">seccomp_opts</name> <init pos:start="5:31" pos:end="6:43">= <expr pos:start="5:33" pos:end="6:43"><name pos:start="5:33" pos:end="5:56">QEMU_SECCOMP_SET_DEFAULT</name>
                <operator pos:start="6:17" pos:end="6:17">|</operator> <name pos:start="6:19" pos:end="6:43">QEMU_SECCOMP_SET_OBSOLETE</name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="7:9" pos:end="7:33"><decl pos:start="7:9" pos:end="7:32"><type pos:start="7:9" pos:end="7:20"><specifier pos:start="7:9" pos:end="7:13">const</specifier> <name pos:start="7:15" pos:end="7:18">char</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:25">value</name> <init pos:start="7:27" pos:end="7:32">= <expr pos:start="7:29" pos:end="7:32"><name pos:start="7:29" pos:end="7:32">NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="8:9" pos:end="8:47"><expr pos:start="8:9" pos:end="8:46"><name pos:start="8:9" pos:end="8:13">value</name> <operator pos:start="8:15" pos:end="8:15">=</operator> <call pos:start="8:17" pos:end="8:46"><name pos:start="8:17" pos:end="8:28">qemu_opt_get</name><argument_list pos:start="8:29" pos:end="8:46">(<argument pos:start="8:30" pos:end="8:33"><expr pos:start="8:30" pos:end="8:33"><name pos:start="8:30" pos:end="8:33">opts</name></expr></argument>, <argument pos:start="8:36" pos:end="8:45"><expr pos:start="8:36" pos:end="8:45"><literal type="string" pos:start="8:36" pos:end="8:45">"obsolete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="9:13" pos:end="22:13"><if pos:start="9:13" pos:end="11:13">if <condition pos:start="9:16" pos:end="9:44">(<expr pos:start="9:17" pos:end="9:43"><call pos:start="9:17" pos:end="9:43"><name pos:start="9:17" pos:end="9:27">g_str_equal</name><argument_list pos:start="9:28" pos:end="9:43">(<argument pos:start="9:29" pos:end="9:33"><expr pos:start="9:29" pos:end="9:33"><name pos:start="9:29" pos:end="9:33">value</name></expr></argument>, <argument pos:start="9:36" pos:end="9:42"><expr pos:start="9:36" pos:end="9:42"><literal type="string" pos:start="9:36" pos:end="9:42">"allow"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="9:46" pos:end="11:13">{<block_content pos:start="10:17" pos:end="10:59">
                <expr_stmt pos:start="10:17" pos:end="10:59"><expr pos:start="10:17" pos:end="10:58"><name pos:start="10:17" pos:end="10:28">seccomp_opts</name> <operator pos:start="10:30" pos:end="10:31">&amp;=</operator> <operator pos:start="10:33" pos:end="10:33">~</operator><name pos:start="10:34" pos:end="10:58">QEMU_SECCOMP_SET_OBSOLETE</name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif" pos:start="11:15" pos:end="22:13">else if <condition pos:start="11:23" pos:end="11:50">(<expr pos:start="11:24" pos:end="11:49"><call pos:start="11:24" pos:end="11:49"><name pos:start="11:24" pos:end="11:34">g_str_equal</name><argument_list pos:start="11:35" pos:end="11:49">(<argument pos:start="11:36" pos:end="11:40"><expr pos:start="11:36" pos:end="11:40"><name pos:start="11:36" pos:end="11:40">value</name></expr></argument>, <argument pos:start="11:43" pos:end="11:48"><expr pos:start="11:43" pos:end="11:48"><literal type="string" pos:start="11:43" pos:end="11:48">"deny"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="11:52" pos:end="22:13">{<block_content pos:start="15:17" pos:end="22:13">
                <comment type="block" pos:start="12:17" pos:end="14:38">/* this is the default option, this if is here
                 * to provide a little bit of consistency for
                 * the command line */</comment>
                <expr_stmt pos:start="15:17" pos:end="15:62"><expr pos:start="15:17" pos:end="15:61"><call pos:start="15:17" pos:end="15:61"><name pos:start="15:17" pos:end="15:28">error_report</name><argument_list pos:start="15:29" pos:end="15:61">(<argument pos:start="15:30" pos:end="15:60"><expr pos:start="15:30" pos:end="15:60"><literal type="string" pos:start="15:30" pos:end="15:60">"invalid argument for obsolete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="16:9" pos:end="22:13"><if pos:start="16:9" pos:end="22:13">if <condition pos:start="16:12" pos:end="16:44">(<expr pos:start="16:13" pos:end="16:43"><call pos:start="16:13" pos:end="16:39"><name pos:start="16:13" pos:end="16:25">seccomp_start</name><argument_list pos:start="16:26" pos:end="16:39">(<argument pos:start="16:27" pos:end="16:38"><expr pos:start="16:27" pos:end="16:38"><name pos:start="16:27" pos:end="16:38">seccomp_opts</name></expr></argument>)</argument_list></call> <operator pos:start="16:41" pos:end="16:41">&lt;</operator> <literal type="number" pos:start="16:43" pos:end="16:43">0</literal></expr>)</condition> <block pos:start="16:46" pos:end="22:13">{<block_content pos:start="17:13" pos:end="22:13">
            <expr_stmt pos:start="17:13" pos:end="20:0"><expr pos:start="17:13" pos:end="18:41"><call pos:start="17:13" pos:end="18:41"><name pos:start="17:13" pos:end="17:24">error_report</name><argument_list pos:start="17:25" pos:end="18:41">(<argument pos:start="17:26" pos:end="18:40"><expr pos:start="17:26" pos:end="18:40"><literal type="string" pos:start="17:26" pos:end="17:68">"failed to install seccomp syscall filter "</literal>
                         <literal type="string" pos:start="18:26" pos:end="18:40">"in the kernel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:start="19:1" pos:end="19:5">#<cpp:directive pos:start="19:2" pos:end="19:5">else</cpp:directive></cpp:else>
        <expr_stmt pos:start="20:9" pos:end="22:0"><expr pos:start="20:9" pos:end="20:51"><call pos:start="20:9" pos:end="20:51"><name pos:start="20:9" pos:end="20:20">error_report</name><argument_list pos:start="20:21" pos:end="20:51">(<argument pos:start="20:22" pos:end="20:50"><expr pos:start="20:22" pos:end="20:50"><literal type="string" pos:start="20:22" pos:end="20:50">"seccomp support is disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="21:1" pos:end="21:6">#<cpp:directive pos:start="21:2" pos:end="21:6">endif</cpp:directive></cpp:endif>
    <return pos:start="22:5" pos:end="22:13">return <expr pos:start="22:12" pos:end="22:12"><literal type="number" pos:start="22:12" pos:end="22:12">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
