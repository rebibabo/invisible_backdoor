<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9940.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">decode_wdlt</name><parameter_list pos:start="1:23" pos:end="1:81">(<parameter pos:start="1:24" pos:end="1:41"><decl pos:start="1:24" pos:end="1:41"><type pos:start="1:24" pos:end="1:41"><name pos:start="1:24" pos:end="1:37">GetByteContext</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:41">gb</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:57"><decl pos:start="1:44" pos:end="1:57"><type pos:start="1:44" pos:end="1:57"><name pos:start="1:44" pos:end="1:50">uint8_t</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:57">frame</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:68"><decl pos:start="1:60" pos:end="1:68"><type pos:start="1:60" pos:end="1:68"><name pos:start="1:60" pos:end="1:62">int</name></type> <name pos:start="1:64" pos:end="1:68">width</name></decl></parameter>, <parameter pos:start="1:71" pos:end="1:80"><decl pos:start="1:71" pos:end="1:80"><type pos:start="1:71" pos:end="1:80"><name pos:start="1:71" pos:end="1:73">int</name></type> <name pos:start="1:75" pos:end="1:80">height</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="101:1">{<block_content pos:start="5:5" pos:end="99:13">

    <decl_stmt pos:start="5:5" pos:end="5:56"><decl pos:start="5:5" pos:end="5:55"><type pos:start="5:5" pos:end="5:19"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:17">uint8_t</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:28">frame_end</name>   <init pos:start="5:32" pos:end="5:55">= <expr pos:start="5:34" pos:end="5:55"><name pos:start="5:34" pos:end="5:38">frame</name> <operator pos:start="5:40" pos:end="5:40">+</operator> <name pos:start="5:42" pos:end="5:46">width</name> <operator pos:start="5:48" pos:end="5:48">*</operator> <name pos:start="5:50" pos:end="5:55">height</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:21">line_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">count</name></decl>, <decl pos:start="9:16" pos:end="9:16"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:16" pos:end="9:16">i</name></decl>, <decl pos:start="9:19" pos:end="9:19"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:19" pos:end="9:19">v</name></decl>, <decl pos:start="9:22" pos:end="9:26"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:22" pos:end="9:26">lines</name></decl>, <decl pos:start="9:29" pos:end="9:36"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:29" pos:end="9:36">segments</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:37"><expr pos:start="13:5" pos:end="13:36"><name pos:start="13:5" pos:end="13:9">lines</name> <operator pos:start="13:11" pos:end="13:11">=</operator> <call pos:start="13:13" pos:end="13:36"><name pos:start="13:13" pos:end="13:32">bytestream2_get_le16</name><argument_list pos:start="13:33" pos:end="13:36">(<argument pos:start="13:34" pos:end="13:35"><expr pos:start="13:34" pos:end="13:35"><name pos:start="13:34" pos:end="13:35">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="17:18"><if pos:start="15:5" pos:end="17:18">if <condition pos:start="15:8" pos:end="15:23">(<expr pos:start="15:9" pos:end="15:22"><name pos:start="15:9" pos:end="15:13">lines</name> <operator pos:start="15:15" pos:end="15:15">&gt;</operator> <name pos:start="15:17" pos:end="15:22">height</name></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:18"><block_content pos:start="17:9" pos:end="17:18">

        <return pos:start="17:9" pos:end="17:18">return <expr pos:start="17:16" pos:end="17:17"><operator pos:start="17:16" pos:end="17:16">-</operator><literal type="number" pos:start="17:17" pos:end="17:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <while pos:start="21:5" pos:end="95:5">while <condition pos:start="21:11" pos:end="21:19">(<expr pos:start="21:12" pos:end="21:18"><name pos:start="21:12" pos:end="21:16">lines</name><operator pos:start="21:17" pos:end="21:18">--</operator></expr>)</condition> <block pos:start="21:21" pos:end="95:5">{<block_content pos:start="23:9" pos:end="93:9">

        <if_stmt pos:start="23:9" pos:end="25:22"><if pos:start="23:9" pos:end="25:22">if <condition pos:start="23:12" pos:end="23:47">(<expr pos:start="23:13" pos:end="23:46"><call pos:start="23:13" pos:end="23:42"><name pos:start="23:13" pos:end="23:38">bytestream2_get_bytes_left</name><argument_list pos:start="23:39" pos:end="23:42">(<argument pos:start="23:40" pos:end="23:41"><expr pos:start="23:40" pos:end="23:41"><name pos:start="23:40" pos:end="23:41">gb</name></expr></argument>)</argument_list></call> <operator pos:start="23:44" pos:end="23:44">&lt;</operator> <literal type="number" pos:start="23:46" pos:end="23:46">2</literal></expr>)</condition><block type="pseudo" pos:start="25:13" pos:end="25:22"><block_content pos:start="25:13" pos:end="25:22">

            <return pos:start="25:13" pos:end="25:22">return <expr pos:start="25:20" pos:end="25:21"><operator pos:start="25:20" pos:end="25:20">-</operator><literal type="number" pos:start="25:21" pos:end="25:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:45"><expr pos:start="27:9" pos:end="27:44"><name pos:start="27:9" pos:end="27:16">segments</name> <operator pos:start="27:18" pos:end="27:18">=</operator> <call pos:start="27:20" pos:end="27:44"><name pos:start="27:20" pos:end="27:40">bytestream2_get_le16u</name><argument_list pos:start="27:41" pos:end="27:44">(<argument pos:start="27:42" pos:end="27:43"><expr pos:start="27:42" pos:end="27:43"><name pos:start="27:42" pos:end="27:43">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <while pos:start="29:9" pos:end="41:9">while <condition pos:start="29:15" pos:end="29:45">(<expr pos:start="29:16" pos:end="29:44"><operator pos:start="29:16" pos:end="29:16">(</operator><name pos:start="29:17" pos:end="29:24">segments</name> <operator pos:start="29:26" pos:end="29:26">&amp;</operator> <literal type="number" pos:start="29:28" pos:end="29:33">0xC000</literal><operator pos:start="29:34" pos:end="29:34">)</operator> <operator pos:start="29:36" pos:end="29:37">==</operator> <literal type="number" pos:start="29:39" pos:end="29:44">0xC000</literal></expr>)</condition> <block pos:start="29:47" pos:end="41:9">{<block_content pos:start="31:13" pos:end="39:48">

            <decl_stmt pos:start="31:13" pos:end="31:58"><decl pos:start="31:13" pos:end="31:57"><type pos:start="31:13" pos:end="31:20"><name pos:start="31:13" pos:end="31:20">unsigned</name></type> <name pos:start="31:22" pos:end="31:26">delta</name> <init pos:start="31:28" pos:end="31:57">= <expr pos:start="31:30" pos:end="31:57"><operator pos:start="31:30" pos:end="31:30">-</operator><operator pos:start="31:31" pos:end="31:31">(</operator><operator pos:start="31:32" pos:end="31:32">(</operator><name pos:start="31:33" pos:end="31:39">int16_t</name><operator pos:start="31:40" pos:end="31:40">)</operator><name pos:start="31:41" pos:end="31:48">segments</name> <operator pos:start="31:50" pos:end="31:50">*</operator> <name pos:start="31:52" pos:end="31:56">width</name><operator pos:start="31:57" pos:end="31:57">)</operator></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="33:13" pos:end="35:26"><if pos:start="33:13" pos:end="35:26">if <condition pos:start="33:16" pos:end="33:43">(<expr pos:start="33:17" pos:end="33:42"><name pos:start="33:17" pos:end="33:25">frame_end</name> <operator pos:start="33:27" pos:end="33:27">-</operator> <name pos:start="33:29" pos:end="33:33">frame</name> <operator pos:start="33:35" pos:end="33:36">&lt;=</operator> <name pos:start="33:38" pos:end="33:42">delta</name></expr>)</condition><block type="pseudo" pos:start="35:17" pos:end="35:26"><block_content pos:start="35:17" pos:end="35:26">

                <return pos:start="35:17" pos:end="35:26">return <expr pos:start="35:24" pos:end="35:25"><operator pos:start="35:24" pos:end="35:24">-</operator><literal type="number" pos:start="35:25" pos:end="35:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:30"><expr pos:start="37:13" pos:end="37:29"><name pos:start="37:13" pos:end="37:17">frame</name>    <operator pos:start="37:22" pos:end="37:23">+=</operator> <name pos:start="37:25" pos:end="37:29">delta</name></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:48"><expr pos:start="39:13" pos:end="39:47"><name pos:start="39:13" pos:end="39:20">segments</name> <operator pos:start="39:22" pos:end="39:22">=</operator> <call pos:start="39:24" pos:end="39:47"><name pos:start="39:24" pos:end="39:43">bytestream2_get_le16</name><argument_list pos:start="39:44" pos:end="39:47">(<argument pos:start="39:45" pos:end="39:46"><expr pos:start="39:45" pos:end="39:46"><name pos:start="39:45" pos:end="39:46">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while>

        <if_stmt pos:start="43:9" pos:end="49:9"><if pos:start="43:9" pos:end="49:9">if <condition pos:start="43:12" pos:end="43:30">(<expr pos:start="43:13" pos:end="43:29"><name pos:start="43:13" pos:end="43:20">segments</name> <operator pos:start="43:22" pos:end="43:22">&amp;</operator> <literal type="number" pos:start="43:24" pos:end="43:29">0x8000</literal></expr>)</condition> <block pos:start="43:32" pos:end="49:9">{<block_content pos:start="45:13" pos:end="47:48">

            <expr_stmt pos:start="45:13" pos:end="45:47"><expr pos:start="45:13" pos:end="45:46"><name pos:start="45:13" pos:end="45:28"><name pos:start="45:13" pos:end="45:17">frame</name><index pos:start="45:18" pos:end="45:28">[<expr pos:start="45:19" pos:end="45:27"><name pos:start="45:19" pos:end="45:23">width</name> <operator pos:start="45:25" pos:end="45:25">-</operator> <literal type="number" pos:start="45:27" pos:end="45:27">1</literal></expr>]</index></name> <operator pos:start="45:30" pos:end="45:30">=</operator> <name pos:start="45:32" pos:end="45:39">segments</name> <operator pos:start="45:41" pos:end="45:41">&amp;</operator> <literal type="number" pos:start="45:43" pos:end="45:46">0xFF</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:48"><expr pos:start="47:13" pos:end="47:47"><name pos:start="47:13" pos:end="47:20">segments</name> <operator pos:start="47:22" pos:end="47:22">=</operator> <call pos:start="47:24" pos:end="47:47"><name pos:start="47:24" pos:end="47:43">bytestream2_get_le16</name><argument_list pos:start="47:44" pos:end="47:47">(<argument pos:start="47:45" pos:end="47:46"><expr pos:start="47:45" pos:end="47:46"><name pos:start="47:45" pos:end="47:46">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:25"><expr pos:start="51:9" pos:end="51:24"><name pos:start="51:9" pos:end="51:16">line_ptr</name> <operator pos:start="51:18" pos:end="51:18">=</operator> <name pos:start="51:20" pos:end="51:24">frame</name></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:23"><expr pos:start="53:9" pos:end="53:22"><name pos:start="53:9" pos:end="53:13">frame</name> <operator pos:start="53:15" pos:end="53:16">+=</operator> <name pos:start="53:18" pos:end="53:22">width</name></expr>;</expr_stmt>

        <while pos:start="55:9" pos:end="93:9">while <condition pos:start="55:15" pos:end="55:26">(<expr pos:start="55:16" pos:end="55:25"><name pos:start="55:16" pos:end="55:23">segments</name><operator pos:start="55:24" pos:end="55:25">--</operator></expr>)</condition> <block pos:start="55:28" pos:end="93:9">{<block_content pos:start="57:13" pos:end="91:13">

            <if_stmt pos:start="57:13" pos:end="59:26"><if pos:start="57:13" pos:end="59:26">if <condition pos:start="57:16" pos:end="57:62">(<expr pos:start="57:17" pos:end="57:61"><name pos:start="57:17" pos:end="57:21">frame</name> <operator pos:start="57:23" pos:end="57:23">-</operator> <name pos:start="57:25" pos:end="57:32">line_ptr</name> <operator pos:start="57:34" pos:end="57:35">&lt;=</operator> <call pos:start="57:37" pos:end="57:61"><name pos:start="57:37" pos:end="57:57">bytestream2_peek_byte</name><argument_list pos:start="57:58" pos:end="57:61">(<argument pos:start="57:59" pos:end="57:60"><expr pos:start="57:59" pos:end="57:60"><name pos:start="57:59" pos:end="57:60">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="59:17" pos:end="59:26"><block_content pos:start="59:17" pos:end="59:26">

                <return pos:start="59:17" pos:end="59:26">return <expr pos:start="59:24" pos:end="59:25"><operator pos:start="59:24" pos:end="59:24">-</operator><literal type="number" pos:start="59:25" pos:end="59:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:49"><expr pos:start="61:13" pos:end="61:48"><name pos:start="61:13" pos:end="61:20">line_ptr</name> <operator pos:start="61:22" pos:end="61:23">+=</operator> <call pos:start="61:25" pos:end="61:48"><name pos:start="61:25" pos:end="61:44">bytestream2_get_byte</name><argument_list pos:start="61:45" pos:end="61:48">(<argument pos:start="61:46" pos:end="61:47"><expr pos:start="61:46" pos:end="61:47"><name pos:start="61:46" pos:end="61:47">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:53"><expr pos:start="63:13" pos:end="63:52"><name pos:start="63:13" pos:end="63:17">count</name> <operator pos:start="63:19" pos:end="63:19">=</operator> <operator pos:start="63:21" pos:end="63:21">(</operator><name pos:start="63:22" pos:end="63:27">int8_t</name><operator pos:start="63:28" pos:end="63:28">)</operator><call pos:start="63:29" pos:end="63:52"><name pos:start="63:29" pos:end="63:48">bytestream2_get_byte</name><argument_list pos:start="63:49" pos:end="63:52">(<argument pos:start="63:50" pos:end="63:51"><expr pos:start="63:50" pos:end="63:51"><name pos:start="63:50" pos:end="63:51">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="65:13" pos:end="91:13"><if pos:start="65:13" pos:end="77:13">if <condition pos:start="65:16" pos:end="65:27">(<expr pos:start="65:17" pos:end="65:26"><name pos:start="65:17" pos:end="65:21">count</name> <operator pos:start="65:23" pos:end="65:24">&gt;=</operator> <literal type="number" pos:start="65:26" pos:end="65:26">0</literal></expr>)</condition> <block pos:start="65:29" pos:end="77:13">{<block_content pos:start="67:17" pos:end="75:38">

                <if_stmt pos:start="67:17" pos:end="69:30"><if pos:start="67:17" pos:end="69:30">if <condition pos:start="67:20" pos:end="67:49">(<expr pos:start="67:21" pos:end="67:48"><name pos:start="67:21" pos:end="67:25">frame</name> <operator pos:start="67:27" pos:end="67:27">-</operator> <name pos:start="67:29" pos:end="67:36">line_ptr</name> <operator pos:start="67:38" pos:end="67:38">&lt;</operator> <name pos:start="67:40" pos:end="67:44">count</name> <operator pos:start="67:46" pos:end="67:46">*</operator> <literal type="number" pos:start="67:48" pos:end="67:48">2</literal></expr>)</condition><block type="pseudo" pos:start="69:21" pos:end="69:30"><block_content pos:start="69:21" pos:end="69:30">

                    <return pos:start="69:21" pos:end="69:30">return <expr pos:start="69:28" pos:end="69:29"><operator pos:start="69:28" pos:end="69:28">-</operator><literal type="number" pos:start="69:29" pos:end="69:29">1</literal></expr>;</return></block_content></block></if></if_stmt>

                <if_stmt pos:start="71:17" pos:end="73:30"><if pos:start="71:17" pos:end="73:30">if <condition pos:start="71:20" pos:end="71:81">(<expr pos:start="71:21" pos:end="71:80"><call pos:start="71:21" pos:end="71:67"><name pos:start="71:21" pos:end="71:42">bytestream2_get_buffer</name><argument_list pos:start="71:43" pos:end="71:67">(<argument pos:start="71:44" pos:end="71:45"><expr pos:start="71:44" pos:end="71:45"><name pos:start="71:44" pos:end="71:45">gb</name></expr></argument>, <argument pos:start="71:48" pos:end="71:55"><expr pos:start="71:48" pos:end="71:55"><name pos:start="71:48" pos:end="71:55">line_ptr</name></expr></argument>, <argument pos:start="71:58" pos:end="71:66"><expr pos:start="71:58" pos:end="71:66"><name pos:start="71:58" pos:end="71:62">count</name> <operator pos:start="71:64" pos:end="71:64">*</operator> <literal type="number" pos:start="71:66" pos:end="71:66">2</literal></expr></argument>)</argument_list></call> <operator pos:start="71:69" pos:end="71:70">!=</operator> <name pos:start="71:72" pos:end="71:76">count</name> <operator pos:start="71:78" pos:end="71:78">*</operator> <literal type="number" pos:start="71:80" pos:end="71:80">2</literal></expr>)</condition><block type="pseudo" pos:start="73:21" pos:end="73:30"><block_content pos:start="73:21" pos:end="73:30">

                    <return pos:start="73:21" pos:end="73:30">return <expr pos:start="73:28" pos:end="73:29"><operator pos:start="73:28" pos:end="73:28">-</operator><literal type="number" pos:start="73:29" pos:end="73:29">1</literal></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="75:17" pos:end="75:38"><expr pos:start="75:17" pos:end="75:37"><name pos:start="75:17" pos:end="75:24">line_ptr</name> <operator pos:start="75:26" pos:end="75:27">+=</operator> <name pos:start="75:29" pos:end="75:33">count</name> <operator pos:start="75:35" pos:end="75:35">*</operator> <literal type="number" pos:start="75:37" pos:end="75:37">2</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="77:15" pos:end="91:13">else <block pos:start="77:20" pos:end="91:13">{<block_content pos:start="79:17" pos:end="89:54">

                <expr_stmt pos:start="79:17" pos:end="79:31"><expr pos:start="79:17" pos:end="79:30"><name pos:start="79:17" pos:end="79:21">count</name> <operator pos:start="79:23" pos:end="79:23">=</operator> <operator pos:start="79:25" pos:end="79:25">-</operator><name pos:start="79:26" pos:end="79:30">count</name></expr>;</expr_stmt>

                <if_stmt pos:start="81:17" pos:end="83:30"><if pos:start="81:17" pos:end="83:30">if <condition pos:start="81:20" pos:end="81:49">(<expr pos:start="81:21" pos:end="81:48"><name pos:start="81:21" pos:end="81:25">frame</name> <operator pos:start="81:27" pos:end="81:27">-</operator> <name pos:start="81:29" pos:end="81:36">line_ptr</name> <operator pos:start="81:38" pos:end="81:38">&lt;</operator> <name pos:start="81:40" pos:end="81:44">count</name> <operator pos:start="81:46" pos:end="81:46">*</operator> <literal type="number" pos:start="81:48" pos:end="81:48">2</literal></expr>)</condition><block type="pseudo" pos:start="83:21" pos:end="83:30"><block_content pos:start="83:21" pos:end="83:30">

                    <return pos:start="83:21" pos:end="83:30">return <expr pos:start="83:28" pos:end="83:29"><operator pos:start="83:28" pos:end="83:28">-</operator><literal type="number" pos:start="83:29" pos:end="83:29">1</literal></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="85:17" pos:end="85:45"><expr pos:start="85:17" pos:end="85:44"><name pos:start="85:17" pos:end="85:17">v</name> <operator pos:start="85:19" pos:end="85:19">=</operator> <call pos:start="85:21" pos:end="85:44"><name pos:start="85:21" pos:end="85:40">bytestream2_get_le16</name><argument_list pos:start="85:41" pos:end="85:44">(<argument pos:start="85:42" pos:end="85:43"><expr pos:start="85:42" pos:end="85:43"><name pos:start="85:42" pos:end="85:43">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="87:17" pos:end="89:54">for <control pos:start="87:21" pos:end="87:43">(<init pos:start="87:22" pos:end="87:27"><expr pos:start="87:22" pos:end="87:26"><name pos:start="87:22" pos:end="87:22">i</name> <operator pos:start="87:24" pos:end="87:24">=</operator> <literal type="number" pos:start="87:26" pos:end="87:26">0</literal></expr>;</init> <condition pos:start="87:29" pos:end="87:38"><expr pos:start="87:29" pos:end="87:37"><name pos:start="87:29" pos:end="87:29">i</name> <operator pos:start="87:31" pos:end="87:31">&lt;</operator> <name pos:start="87:33" pos:end="87:37">count</name></expr>;</condition> <incr pos:start="87:40" pos:end="87:42"><expr pos:start="87:40" pos:end="87:42"><name pos:start="87:40" pos:end="87:40">i</name><operator pos:start="87:41" pos:end="87:42">++</operator></expr></incr>)</control><block type="pseudo" pos:start="89:21" pos:end="89:54"><block_content pos:start="89:21" pos:end="89:54">

                    <expr_stmt pos:start="89:21" pos:end="89:54"><expr pos:start="89:21" pos:end="89:53"><call pos:start="89:21" pos:end="89:53"><name pos:start="89:21" pos:end="89:39">bytestream_put_le16</name><argument_list pos:start="89:40" pos:end="89:53">(<argument pos:start="89:41" pos:end="89:49"><expr pos:start="89:41" pos:end="89:49"><operator pos:start="89:41" pos:end="89:41">&amp;</operator><name pos:start="89:42" pos:end="89:49">line_ptr</name></expr></argument>, <argument pos:start="89:52" pos:end="89:52"><expr pos:start="89:52" pos:end="89:52"><name pos:start="89:52" pos:end="89:52">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></while>

    </block_content>}</block></while>



    <return pos:start="99:5" pos:end="99:13">return <expr pos:start="99:12" pos:end="99:12"><literal type="number" pos:start="99:12" pos:end="99:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
