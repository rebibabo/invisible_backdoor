<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7314.c" pos:tabs="8"><function pos:start="1:1" pos:end="35:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:22">net_set_boot_mask</name><parameter_list pos:start="1:23" pos:end="1:41">(<parameter pos:start="1:24" pos:end="1:40"><decl pos:start="1:24" pos:end="1:40"><type pos:start="1:24" pos:end="1:26"><name pos:start="1:24" pos:end="1:26">int</name></type> <name pos:start="1:28" pos:end="1:40">net_boot_mask</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="35:1">{<block_content pos:start="5:5" pos:end="33:5">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="9:5" pos:end="9:50">/* Only the first four NICs may be bootable */</comment>

    <expr_stmt pos:start="11:5" pos:end="11:40"><expr pos:start="11:5" pos:end="11:39"><name pos:start="11:5" pos:end="11:17">net_boot_mask</name> <operator pos:start="11:19" pos:end="11:19">=</operator> <name pos:start="11:21" pos:end="11:33">net_boot_mask</name> <operator pos:start="11:35" pos:end="11:35">&amp;</operator> <literal type="number" pos:start="11:37" pos:end="11:39">0xF</literal></expr>;</expr_stmt>



    <for pos:start="15:5" pos:end="23:5">for <control pos:start="15:9" pos:end="15:33">(<init pos:start="15:10" pos:end="15:15"><expr pos:start="15:10" pos:end="15:14"><name pos:start="15:10" pos:end="15:10">i</name> <operator pos:start="15:12" pos:end="15:12">=</operator> <literal type="number" pos:start="15:14" pos:end="15:14">0</literal></expr>;</init> <condition pos:start="15:17" pos:end="15:28"><expr pos:start="15:17" pos:end="15:27"><name pos:start="15:17" pos:end="15:17">i</name> <operator pos:start="15:19" pos:end="15:19">&lt;</operator> <name pos:start="15:21" pos:end="15:27">nb_nics</name></expr>;</condition> <incr pos:start="15:30" pos:end="15:32"><expr pos:start="15:30" pos:end="15:32"><name pos:start="15:30" pos:end="15:30">i</name><operator pos:start="15:31" pos:end="15:32">++</operator></expr></incr>)</control> <block pos:start="15:35" pos:end="23:5">{<block_content pos:start="17:9" pos:end="21:9">

        <if_stmt pos:start="17:9" pos:end="21:9"><if pos:start="17:9" pos:end="21:9">if <condition pos:start="17:12" pos:end="17:37">(<expr pos:start="17:13" pos:end="17:36"><name pos:start="17:13" pos:end="17:25">net_boot_mask</name> <operator pos:start="17:27" pos:end="17:27">&amp;</operator> <operator pos:start="17:29" pos:end="17:29">(</operator><literal type="number" pos:start="17:30" pos:end="17:30">1</literal> <operator pos:start="17:32" pos:end="17:33">&lt;&lt;</operator> <name pos:start="17:35" pos:end="17:35">i</name><operator pos:start="17:36" pos:end="17:36">)</operator></expr>)</condition> <block pos:start="17:39" pos:end="21:9">{<block_content pos:start="19:13" pos:end="19:39">

            <expr_stmt pos:start="19:13" pos:end="19:39"><expr pos:start="19:13" pos:end="19:38"><name pos:start="19:13" pos:end="19:25">net_boot_mask</name> <operator pos:start="19:27" pos:end="19:28">&amp;=</operator> <operator pos:start="19:30" pos:end="19:30">~</operator><operator pos:start="19:31" pos:end="19:31">(</operator><literal type="number" pos:start="19:32" pos:end="19:32">1</literal> <operator pos:start="19:34" pos:end="19:35">&lt;&lt;</operator> <name pos:start="19:37" pos:end="19:37">i</name><operator pos:start="19:38" pos:end="19:38">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:22">(<expr pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:21">net_boot_mask</name></expr>)</condition> <block pos:start="27:24" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:16">

        <expr_stmt pos:start="29:9" pos:end="29:63"><expr pos:start="29:9" pos:end="29:62"><call pos:start="29:9" pos:end="29:62"><name pos:start="29:9" pos:end="29:15">fprintf</name><argument_list pos:start="29:16" pos:end="29:62">(<argument pos:start="29:17" pos:end="29:22"><expr pos:start="29:17" pos:end="29:22"><name pos:start="29:17" pos:end="29:22">stderr</name></expr></argument>, <argument pos:start="29:25" pos:end="29:61"><expr pos:start="29:25" pos:end="29:61"><literal type="string" pos:start="29:25" pos:end="29:61">"Cannot boot from non-existent NIC\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:16"><expr pos:start="31:9" pos:end="31:15"><call pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:12">exit</name><argument_list pos:start="31:13" pos:end="31:15">(<argument pos:start="31:14" pos:end="31:14"><expr pos:start="31:14" pos:end="31:14"><literal type="number" pos:start="31:14" pos:end="31:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
