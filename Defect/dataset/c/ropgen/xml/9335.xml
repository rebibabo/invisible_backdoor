<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9335.c" pos:tabs="8"><function pos:start="1:1" pos:end="19:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">usbnet_can_receive</name><parameter_list pos:start="1:30" pos:end="1:50">(<parameter pos:start="1:31" pos:end="1:49"><decl pos:start="1:31" pos:end="1:49"><type pos:start="1:31" pos:end="1:47"><name pos:start="1:31" pos:end="1:45">VLANClientState</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:49">nc</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="19:1">{<block_content pos:start="5:5" pos:end="17:22">

    <decl_stmt pos:start="5:5" pos:end="5:57"><decl pos:start="5:5" pos:end="5:56"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">USBNetState</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:18">s</name> <init pos:start="5:20" pos:end="5:56">= <expr pos:start="5:22" pos:end="5:56"><call pos:start="5:22" pos:end="5:48"><name pos:start="5:22" pos:end="5:30">DO_UPCAST</name><argument_list pos:start="5:31" pos:end="5:48">(<argument pos:start="5:32" pos:end="5:39"><expr pos:start="5:32" pos:end="5:39"><name pos:start="5:32" pos:end="5:39">NICState</name></expr></argument>, <argument pos:start="5:42" pos:end="5:43"><expr pos:start="5:42" pos:end="5:43"><name pos:start="5:42" pos:end="5:43">nc</name></expr></argument>, <argument pos:start="5:46" pos:end="5:47"><expr pos:start="5:46" pos:end="5:47"><name pos:start="5:46" pos:end="5:47">nc</name></expr></argument>)</argument_list></call><operator pos:start="5:49" pos:end="5:50">-&gt;</operator><name pos:start="5:51" pos:end="5:56">opaque</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="13:5"><if pos:start="9:5" pos:end="13:5">if <condition pos:start="9:8" pos:end="9:65">(<expr pos:start="9:9" pos:end="9:64"><call pos:start="9:9" pos:end="9:19"><name pos:start="9:9" pos:end="9:16">is_rndis</name><argument_list pos:start="9:17" pos:end="9:19">(<argument pos:start="9:18" pos:end="9:18"><expr pos:start="9:18" pos:end="9:18"><name pos:start="9:18" pos:end="9:18">s</name></expr></argument>)</argument_list></call> <operator pos:start="9:21" pos:end="9:22">&amp;&amp;</operator> <operator pos:start="9:24" pos:end="9:24">!</operator><name pos:start="9:25" pos:end="9:38"><name pos:start="9:25" pos:end="9:25">s</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:38">rndis_state</name></name> <operator pos:start="9:40" pos:end="9:41">==</operator> <name pos:start="9:43" pos:end="9:64">RNDIS_DATA_INITIALIZED</name></expr>)</condition> <block pos:start="9:67" pos:end="13:5">{<block_content pos:start="11:9" pos:end="11:17">

        <return pos:start="11:9" pos:end="11:17">return <expr pos:start="11:16" pos:end="11:16"><literal type="number" pos:start="11:16" pos:end="11:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="17:5" pos:end="17:22">return <expr pos:start="17:12" pos:end="17:21"><operator pos:start="17:12" pos:end="17:12">!</operator><name pos:start="17:13" pos:end="17:21"><name pos:start="17:13" pos:end="17:13">s</name><operator pos:start="17:14" pos:end="17:15">-&gt;</operator><name pos:start="17:16" pos:end="17:21">in_len</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
