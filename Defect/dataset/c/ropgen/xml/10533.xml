<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10533.c" pos:tabs="8"><function pos:start="1:1" pos:end="153:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:40">imx_gpt_compute_next_timeout</name><parameter_list pos:start="1:41" pos:end="1:68">(<parameter pos:start="1:42" pos:end="1:55"><decl pos:start="1:42" pos:end="1:55"><type pos:start="1:42" pos:end="1:55"><name pos:start="1:42" pos:end="1:52">IMXGPTState</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:55">s</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:67"><decl pos:start="1:58" pos:end="1:67"><type pos:start="1:58" pos:end="1:67"><name pos:start="1:58" pos:end="1:61">bool</name></type> <name pos:start="1:63" pos:end="1:67">event</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="153:1">{<block_content pos:start="5:5" pos:end="151:5">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:20">timeout</name> <init pos:start="5:22" pos:end="5:32">= <expr pos:start="5:24" pos:end="5:32"><name pos:start="5:24" pos:end="5:32">TIMER_MAX</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:18">count</name> <init pos:start="7:20" pos:end="7:22">= <expr pos:start="7:22" pos:end="7:22"><literal type="number" pos:start="7:22" pos:end="7:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:8">long</name> <name pos:start="9:10" pos:end="9:13">long</name></type> <name pos:start="9:15" pos:end="9:19">limit</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:29">(<expr pos:start="13:9" pos:end="13:28"><operator pos:start="13:9" pos:end="13:9">!</operator><operator pos:start="13:10" pos:end="13:10">(</operator><name pos:start="13:11" pos:end="13:15"><name pos:start="13:11" pos:end="13:11">s</name><operator pos:start="13:12" pos:end="13:13">-&gt;</operator><name pos:start="13:14" pos:end="13:15">cr</name></name> <operator pos:start="13:17" pos:end="13:17">&amp;</operator> <name pos:start="13:19" pos:end="13:27">GPT_CR_EN</name><operator pos:start="13:28" pos:end="13:28">)</operator></expr>)</condition> <block pos:start="13:31" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:15">

        <comment type="block" pos:start="15:9" pos:end="15:40">/* if not enabled just return */</comment>

        <return pos:start="17:9" pos:end="17:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="23:5" pos:end="51:5"><if pos:start="23:5" pos:end="43:5">if <condition pos:start="23:8" pos:end="23:14">(<expr pos:start="23:9" pos:end="23:13"><name pos:start="23:9" pos:end="23:13">event</name></expr>)</condition> <block pos:start="23:16" pos:end="43:5">{<block_content pos:start="29:9" pos:end="41:9">

        <comment type="block" pos:start="25:9" pos:end="25:36">/* This is a timer event  */</comment>



        <if_stmt pos:start="29:9" pos:end="41:9"><if pos:start="29:9" pos:end="41:9">if <condition pos:start="29:12" pos:end="29:68">(<expr pos:start="29:13" pos:end="29:67"><operator pos:start="29:13" pos:end="29:13">(</operator><name pos:start="29:14" pos:end="29:18"><name pos:start="29:14" pos:end="29:14">s</name><operator pos:start="29:15" pos:end="29:16">-&gt;</operator><name pos:start="29:17" pos:end="29:18">cr</name></name> <operator pos:start="29:20" pos:end="29:20">&amp;</operator> <name pos:start="29:22" pos:end="29:31">GPT_CR_FRR</name><operator pos:start="29:32" pos:end="29:32">)</operator>  <operator pos:start="29:35" pos:end="29:36">&amp;&amp;</operator> <operator pos:start="29:38" pos:end="29:38">(</operator><name pos:start="29:39" pos:end="29:53"><name pos:start="29:39" pos:end="29:39">s</name><operator pos:start="29:40" pos:end="29:41">-&gt;</operator><name pos:start="29:42" pos:end="29:53">next_timeout</name></name> <operator pos:start="29:55" pos:end="29:56">!=</operator> <name pos:start="29:58" pos:end="29:66">TIMER_MAX</name><operator pos:start="29:67" pos:end="29:67">)</operator></expr>)</condition> <block pos:start="29:70" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:44">

            <comment type="block" pos:start="31:13" pos:end="37:15">/*

             * if we are in free running mode and we have not reached

             * the TIMER_MAX limit, then update the count

             */</comment>

            <expr_stmt pos:start="39:13" pos:end="39:44"><expr pos:start="39:13" pos:end="39:43"><name pos:start="39:13" pos:end="39:17">count</name> <operator pos:start="39:19" pos:end="39:19">=</operator> <call pos:start="39:21" pos:end="39:43"><name pos:start="39:21" pos:end="39:40">imx_gpt_update_count</name><argument_list pos:start="39:41" pos:end="39:43">(<argument pos:start="39:42" pos:end="39:42"><expr pos:start="39:42" pos:end="39:42"><name pos:start="39:42" pos:end="39:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="43:7" pos:end="51:5">else <block pos:start="43:12" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:40">

        <comment type="block" pos:start="45:9" pos:end="45:59">/* not a timer event, then just update the count */</comment>



        <expr_stmt pos:start="49:9" pos:end="49:40"><expr pos:start="49:9" pos:end="49:39"><name pos:start="49:9" pos:end="49:13">count</name> <operator pos:start="49:15" pos:end="49:15">=</operator> <call pos:start="49:17" pos:end="49:39"><name pos:start="49:17" pos:end="49:36">imx_gpt_update_count</name><argument_list pos:start="49:37" pos:end="49:39">(<argument pos:start="49:38" pos:end="49:38"><expr pos:start="49:38" pos:end="49:38"><name pos:start="49:38" pos:end="49:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:53">/* now, find the next timeout related to count */</comment>



    <if_stmt pos:start="59:5" pos:end="63:5"><if pos:start="59:5" pos:end="63:5">if <condition pos:start="59:8" pos:end="59:29">(<expr pos:start="59:9" pos:end="59:28"><name pos:start="59:9" pos:end="59:13"><name pos:start="59:9" pos:end="59:9">s</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:13">ir</name></name> <operator pos:start="59:15" pos:end="59:15">&amp;</operator> <name pos:start="59:17" pos:end="59:28">GPT_IR_OF1IE</name></expr>)</condition> <block pos:start="59:31" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:62">

        <expr_stmt pos:start="61:9" pos:end="61:62"><expr pos:start="61:9" pos:end="61:61"><name pos:start="61:9" pos:end="61:15">timeout</name> <operator pos:start="61:17" pos:end="61:17">=</operator> <call pos:start="61:19" pos:end="61:61"><name pos:start="61:19" pos:end="61:36">imx_gpt_find_limit</name><argument_list pos:start="61:37" pos:end="61:61">(<argument pos:start="61:38" pos:end="61:42"><expr pos:start="61:38" pos:end="61:42"><name pos:start="61:38" pos:end="61:42">count</name></expr></argument>, <argument pos:start="61:45" pos:end="61:51"><expr pos:start="61:45" pos:end="61:51"><name pos:start="61:45" pos:end="61:51"><name pos:start="61:45" pos:end="61:45">s</name><operator pos:start="61:46" pos:end="61:47">-&gt;</operator><name pos:start="61:48" pos:end="61:51">ocr1</name></name></expr></argument>, <argument pos:start="61:54" pos:end="61:60"><expr pos:start="61:54" pos:end="61:60"><name pos:start="61:54" pos:end="61:60">timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="65:5" pos:end="69:5"><if pos:start="65:5" pos:end="69:5">if <condition pos:start="65:8" pos:end="65:29">(<expr pos:start="65:9" pos:end="65:28"><name pos:start="65:9" pos:end="65:13"><name pos:start="65:9" pos:end="65:9">s</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:13">ir</name></name> <operator pos:start="65:15" pos:end="65:15">&amp;</operator> <name pos:start="65:17" pos:end="65:28">GPT_IR_OF2IE</name></expr>)</condition> <block pos:start="65:31" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:62">

        <expr_stmt pos:start="67:9" pos:end="67:62"><expr pos:start="67:9" pos:end="67:61"><name pos:start="67:9" pos:end="67:15">timeout</name> <operator pos:start="67:17" pos:end="67:17">=</operator> <call pos:start="67:19" pos:end="67:61"><name pos:start="67:19" pos:end="67:36">imx_gpt_find_limit</name><argument_list pos:start="67:37" pos:end="67:61">(<argument pos:start="67:38" pos:end="67:42"><expr pos:start="67:38" pos:end="67:42"><name pos:start="67:38" pos:end="67:42">count</name></expr></argument>, <argument pos:start="67:45" pos:end="67:51"><expr pos:start="67:45" pos:end="67:51"><name pos:start="67:45" pos:end="67:51"><name pos:start="67:45" pos:end="67:45">s</name><operator pos:start="67:46" pos:end="67:47">-&gt;</operator><name pos:start="67:48" pos:end="67:51">ocr2</name></name></expr></argument>, <argument pos:start="67:54" pos:end="67:60"><expr pos:start="67:54" pos:end="67:60"><name pos:start="67:54" pos:end="67:60">timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="71:5" pos:end="75:5"><if pos:start="71:5" pos:end="75:5">if <condition pos:start="71:8" pos:end="71:29">(<expr pos:start="71:9" pos:end="71:28"><name pos:start="71:9" pos:end="71:13"><name pos:start="71:9" pos:end="71:9">s</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:13">ir</name></name> <operator pos:start="71:15" pos:end="71:15">&amp;</operator> <name pos:start="71:17" pos:end="71:28">GPT_IR_OF3IE</name></expr>)</condition> <block pos:start="71:31" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:62">

        <expr_stmt pos:start="73:9" pos:end="73:62"><expr pos:start="73:9" pos:end="73:61"><name pos:start="73:9" pos:end="73:15">timeout</name> <operator pos:start="73:17" pos:end="73:17">=</operator> <call pos:start="73:19" pos:end="73:61"><name pos:start="73:19" pos:end="73:36">imx_gpt_find_limit</name><argument_list pos:start="73:37" pos:end="73:61">(<argument pos:start="73:38" pos:end="73:42"><expr pos:start="73:38" pos:end="73:42"><name pos:start="73:38" pos:end="73:42">count</name></expr></argument>, <argument pos:start="73:45" pos:end="73:51"><expr pos:start="73:45" pos:end="73:51"><name pos:start="73:45" pos:end="73:51"><name pos:start="73:45" pos:end="73:45">s</name><operator pos:start="73:46" pos:end="73:47">-&gt;</operator><name pos:start="73:48" pos:end="73:51">ocr3</name></name></expr></argument>, <argument pos:start="73:54" pos:end="73:60"><expr pos:start="73:54" pos:end="73:60"><name pos:start="73:54" pos:end="73:60">timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="79:5" pos:end="79:71">/* find the next set of interrupts to raise for next timer event */</comment>



    <expr_stmt pos:start="83:5" pos:end="83:20"><expr pos:start="83:5" pos:end="83:19"><name pos:start="83:5" pos:end="83:15"><name pos:start="83:5" pos:end="83:5">s</name><operator pos:start="83:6" pos:end="83:7">-&gt;</operator><name pos:start="83:8" pos:end="83:15">next_int</name></name> <operator pos:start="83:17" pos:end="83:17">=</operator> <literal type="number" pos:start="83:19" pos:end="83:19">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="85:5" pos:end="89:5"><if pos:start="85:5" pos:end="89:5">if <condition pos:start="85:8" pos:end="85:55">(<expr pos:start="85:9" pos:end="85:54"><operator pos:start="85:9" pos:end="85:9">(</operator><name pos:start="85:10" pos:end="85:14"><name pos:start="85:10" pos:end="85:10">s</name><operator pos:start="85:11" pos:end="85:12">-&gt;</operator><name pos:start="85:13" pos:end="85:14">ir</name></name> <operator pos:start="85:16" pos:end="85:16">&amp;</operator> <name pos:start="85:18" pos:end="85:29">GPT_IR_OF1IE</name><operator pos:start="85:30" pos:end="85:30">)</operator> <operator pos:start="85:32" pos:end="85:33">&amp;&amp;</operator> <operator pos:start="85:35" pos:end="85:35">(</operator><name pos:start="85:36" pos:end="85:42">timeout</name> <operator pos:start="85:44" pos:end="85:45">==</operator> <name pos:start="85:47" pos:end="85:53"><name pos:start="85:47" pos:end="85:47">s</name><operator pos:start="85:48" pos:end="85:49">-&gt;</operator><name pos:start="85:50" pos:end="85:53">ocr1</name></name><operator pos:start="85:54" pos:end="85:54">)</operator></expr>)</condition> <block pos:start="85:57" pos:end="89:5">{<block_content pos:start="87:9" pos:end="87:34">

        <expr_stmt pos:start="87:9" pos:end="87:34"><expr pos:start="87:9" pos:end="87:33"><name pos:start="87:9" pos:end="87:19"><name pos:start="87:9" pos:end="87:9">s</name><operator pos:start="87:10" pos:end="87:11">-&gt;</operator><name pos:start="87:12" pos:end="87:19">next_int</name></name> <operator pos:start="87:21" pos:end="87:22">|=</operator> <name pos:start="87:24" pos:end="87:33">GPT_SR_OF1</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="91:5" pos:end="95:5"><if pos:start="91:5" pos:end="95:5">if <condition pos:start="91:8" pos:end="91:55">(<expr pos:start="91:9" pos:end="91:54"><operator pos:start="91:9" pos:end="91:9">(</operator><name pos:start="91:10" pos:end="91:14"><name pos:start="91:10" pos:end="91:10">s</name><operator pos:start="91:11" pos:end="91:12">-&gt;</operator><name pos:start="91:13" pos:end="91:14">ir</name></name> <operator pos:start="91:16" pos:end="91:16">&amp;</operator> <name pos:start="91:18" pos:end="91:29">GPT_IR_OF2IE</name><operator pos:start="91:30" pos:end="91:30">)</operator> <operator pos:start="91:32" pos:end="91:33">&amp;&amp;</operator> <operator pos:start="91:35" pos:end="91:35">(</operator><name pos:start="91:36" pos:end="91:42">timeout</name> <operator pos:start="91:44" pos:end="91:45">==</operator> <name pos:start="91:47" pos:end="91:53"><name pos:start="91:47" pos:end="91:47">s</name><operator pos:start="91:48" pos:end="91:49">-&gt;</operator><name pos:start="91:50" pos:end="91:53">ocr2</name></name><operator pos:start="91:54" pos:end="91:54">)</operator></expr>)</condition> <block pos:start="91:57" pos:end="95:5">{<block_content pos:start="93:9" pos:end="93:34">

        <expr_stmt pos:start="93:9" pos:end="93:34"><expr pos:start="93:9" pos:end="93:33"><name pos:start="93:9" pos:end="93:19"><name pos:start="93:9" pos:end="93:9">s</name><operator pos:start="93:10" pos:end="93:11">-&gt;</operator><name pos:start="93:12" pos:end="93:19">next_int</name></name> <operator pos:start="93:21" pos:end="93:22">|=</operator> <name pos:start="93:24" pos:end="93:33">GPT_SR_OF2</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="97:5" pos:end="101:5"><if pos:start="97:5" pos:end="101:5">if <condition pos:start="97:8" pos:end="97:55">(<expr pos:start="97:9" pos:end="97:54"><operator pos:start="97:9" pos:end="97:9">(</operator><name pos:start="97:10" pos:end="97:14"><name pos:start="97:10" pos:end="97:10">s</name><operator pos:start="97:11" pos:end="97:12">-&gt;</operator><name pos:start="97:13" pos:end="97:14">ir</name></name> <operator pos:start="97:16" pos:end="97:16">&amp;</operator> <name pos:start="97:18" pos:end="97:29">GPT_IR_OF3IE</name><operator pos:start="97:30" pos:end="97:30">)</operator> <operator pos:start="97:32" pos:end="97:33">&amp;&amp;</operator> <operator pos:start="97:35" pos:end="97:35">(</operator><name pos:start="97:36" pos:end="97:42">timeout</name> <operator pos:start="97:44" pos:end="97:45">==</operator> <name pos:start="97:47" pos:end="97:53"><name pos:start="97:47" pos:end="97:47">s</name><operator pos:start="97:48" pos:end="97:49">-&gt;</operator><name pos:start="97:50" pos:end="97:53">ocr3</name></name><operator pos:start="97:54" pos:end="97:54">)</operator></expr>)</condition> <block pos:start="97:57" pos:end="101:5">{<block_content pos:start="99:9" pos:end="99:34">

        <expr_stmt pos:start="99:9" pos:end="99:34"><expr pos:start="99:9" pos:end="99:33"><name pos:start="99:9" pos:end="99:19"><name pos:start="99:9" pos:end="99:9">s</name><operator pos:start="99:10" pos:end="99:11">-&gt;</operator><name pos:start="99:12" pos:end="99:19">next_int</name></name> <operator pos:start="99:21" pos:end="99:22">|=</operator> <name pos:start="99:24" pos:end="99:33">GPT_SR_OF3</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="103:5" pos:end="107:5"><if pos:start="103:5" pos:end="107:5">if <condition pos:start="103:8" pos:end="103:57">(<expr pos:start="103:9" pos:end="103:56"><operator pos:start="103:9" pos:end="103:9">(</operator><name pos:start="103:10" pos:end="103:14"><name pos:start="103:10" pos:end="103:10">s</name><operator pos:start="103:11" pos:end="103:12">-&gt;</operator><name pos:start="103:13" pos:end="103:14">ir</name></name> <operator pos:start="103:16" pos:end="103:16">&amp;</operator> <name pos:start="103:18" pos:end="103:29">GPT_IR_ROVIE</name><operator pos:start="103:30" pos:end="103:30">)</operator> <operator pos:start="103:32" pos:end="103:33">&amp;&amp;</operator> <operator pos:start="103:35" pos:end="103:35">(</operator><name pos:start="103:36" pos:end="103:42">timeout</name> <operator pos:start="103:44" pos:end="103:45">==</operator> <name pos:start="103:47" pos:end="103:55">TIMER_MAX</name><operator pos:start="103:56" pos:end="103:56">)</operator></expr>)</condition> <block pos:start="103:59" pos:end="107:5">{<block_content pos:start="105:9" pos:end="105:34">

        <expr_stmt pos:start="105:9" pos:end="105:34"><expr pos:start="105:9" pos:end="105:33"><name pos:start="105:9" pos:end="105:19"><name pos:start="105:9" pos:end="105:9">s</name><operator pos:start="105:10" pos:end="105:11">-&gt;</operator><name pos:start="105:12" pos:end="105:19">next_int</name></name> <operator pos:start="105:21" pos:end="105:22">|=</operator> <name pos:start="105:24" pos:end="105:33">GPT_SR_ROV</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="111:5" pos:end="111:42">/* the new range to count down from */</comment>

    <expr_stmt pos:start="113:5" pos:end="113:46"><expr pos:start="113:5" pos:end="113:45"><name pos:start="113:5" pos:end="113:9">limit</name> <operator pos:start="113:11" pos:end="113:11">=</operator> <name pos:start="113:13" pos:end="113:19">timeout</name> <operator pos:start="113:21" pos:end="113:21">-</operator> <call pos:start="113:23" pos:end="113:45"><name pos:start="113:23" pos:end="113:42">imx_gpt_update_count</name><argument_list pos:start="113:43" pos:end="113:45">(<argument pos:start="113:44" pos:end="113:44"><expr pos:start="113:44" pos:end="113:44"><name pos:start="113:44" pos:end="113:44">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="117:5" pos:end="151:5"><if pos:start="117:5" pos:end="139:5">if <condition pos:start="117:8" pos:end="117:18">(<expr pos:start="117:9" pos:end="117:17"><name pos:start="117:9" pos:end="117:13">limit</name> <operator pos:start="117:15" pos:end="117:15">&lt;</operator> <literal type="number" pos:start="117:17" pos:end="117:17">0</literal></expr>)</condition> <block pos:start="117:20" pos:end="139:5">{<block_content pos:start="129:9" pos:end="137:30">

        <comment type="block" pos:start="119:9" pos:end="127:11">/*

         * if we reach here, then QEMU is running too slow and we pass the

         * timeout limit while computing it. Let's deliver the interrupt

         * and compute a new limit.

         */</comment>

        <expr_stmt pos:start="129:9" pos:end="129:29"><expr pos:start="129:9" pos:end="129:28"><name pos:start="129:9" pos:end="129:13"><name pos:start="129:9" pos:end="129:9">s</name><operator pos:start="129:10" pos:end="129:11">-&gt;</operator><name pos:start="129:12" pos:end="129:13">sr</name></name> <operator pos:start="129:15" pos:end="129:16">|=</operator> <name pos:start="129:18" pos:end="129:28"><name pos:start="129:18" pos:end="129:18">s</name><operator pos:start="129:19" pos:end="129:20">-&gt;</operator><name pos:start="129:21" pos:end="129:28">next_int</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="133:9" pos:end="133:47"><expr pos:start="133:9" pos:end="133:46"><call pos:start="133:9" pos:end="133:46"><name pos:start="133:9" pos:end="133:36">imx_gpt_compute_next_timeout</name><argument_list pos:start="133:37" pos:end="133:46">(<argument pos:start="133:38" pos:end="133:38"><expr pos:start="133:38" pos:end="133:38"><name pos:start="133:38" pos:end="133:38">s</name></expr></argument>, <argument pos:start="133:41" pos:end="133:45"><expr pos:start="133:41" pos:end="133:45"><name pos:start="133:41" pos:end="133:45">event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="137:9" pos:end="137:30"><expr pos:start="137:9" pos:end="137:29"><call pos:start="137:9" pos:end="137:29"><name pos:start="137:9" pos:end="137:26">imx_gpt_update_int</name><argument_list pos:start="137:27" pos:end="137:29">(<argument pos:start="137:28" pos:end="137:28"><expr pos:start="137:28" pos:end="137:28"><name pos:start="137:28" pos:end="137:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="139:7" pos:end="151:5">else <block pos:start="139:12" pos:end="151:5">{<block_content pos:start="143:9" pos:end="149:45">

        <comment type="block" pos:start="141:9" pos:end="141:31">/* New timeout value */</comment>

        <expr_stmt pos:start="143:9" pos:end="143:34"><expr pos:start="143:9" pos:end="143:33"><name pos:start="143:9" pos:end="143:23"><name pos:start="143:9" pos:end="143:9">s</name><operator pos:start="143:10" pos:end="143:11">-&gt;</operator><name pos:start="143:12" pos:end="143:23">next_timeout</name></name> <operator pos:start="143:25" pos:end="143:25">=</operator> <name pos:start="143:27" pos:end="143:33">timeout</name></expr>;</expr_stmt>



        <comment type="block" pos:start="147:9" pos:end="147:51">/* reset the limit to the computed range */</comment>

        <expr_stmt pos:start="149:9" pos:end="149:45"><expr pos:start="149:9" pos:end="149:44"><call pos:start="149:9" pos:end="149:44"><name pos:start="149:9" pos:end="149:24">ptimer_set_limit</name><argument_list pos:start="149:25" pos:end="149:44">(<argument pos:start="149:26" pos:end="149:33"><expr pos:start="149:26" pos:end="149:33"><name pos:start="149:26" pos:end="149:33"><name pos:start="149:26" pos:end="149:26">s</name><operator pos:start="149:27" pos:end="149:28">-&gt;</operator><name pos:start="149:29" pos:end="149:33">timer</name></name></expr></argument>, <argument pos:start="149:36" pos:end="149:40"><expr pos:start="149:36" pos:end="149:40"><name pos:start="149:36" pos:end="149:40">limit</name></expr></argument>, <argument pos:start="149:43" pos:end="149:43"><expr pos:start="149:43" pos:end="149:43"><literal type="number" pos:start="149:43" pos:end="149:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
